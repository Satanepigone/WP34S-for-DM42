ARM GAS  /tmp/ccp3OFc8.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC1:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** //#include <menu.h>
   2:src/menu.c    **** struct _menu UserMenu =
   3:src/menu.c    ****   {
   4:src/menu.c    ****     "User Menu", 
   5:src/menu.c    ****     {
   6:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   7:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   8:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   9:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  10:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  11:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
  12:src/menu.c    ****     }
  13:src/menu.c    ****   };
  14:src/menu.c    **** 
  15:src/menu.c    **** const char* arrow_key_string = "--\015";
  16:src/menu.c    **** const char* cmplx_key_string = "CPX";
  17:src/menu.c    **** 
  18:src/menu.c    **** menu_name current_menu = 0;
  19:src/menu.c    **** menu_name last_menu = 0;
  20:src/menu.c    **** menu_name default_menu = 0;
  21:src/menu.c    **** 
  22:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted);
  23:src/menu.c    **** 
ARM GAS  /tmp/ccp3OFc8.s 			page 2


  24:src/menu.c    **** 
  25:src/menu.c    **** 
  26:src/menu.c    **** /* 
  27:src/menu.c    ****  * System menu stuff
  28:src/menu.c    ****  */
  29:src/menu.c    **** 
  30:src/menu.c    **** #define MI_ABOUT_PGM 11
  31:src/menu.c    **** 
  32:src/menu.c    **** const uint8_t mid_menu[] = {
  33:src/menu.c    ****     MI_SYSTEM_ENTER,
  34:src/menu.c    ****     MI_MSC,
  35:src/menu.c    ****     MI_ABOUT_PGM,
  36:src/menu.c    ****     0 }; // Terminator
  37:src/menu.c    **** 
  38:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  39:src/menu.c    **** 
  40:src/menu.c    **** void disp_about(void);
  41:src/menu.c    **** 
  42:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  43:src/menu.c    ****   int ret = 0;
  44:src/menu.c    **** 
  45:src/menu.c    ****   switch(line_id) {
  46:src/menu.c    ****     case MI_ABOUT_PGM:
  47:src/menu.c    ****       disp_about();
  48:src/menu.c    ****       break;
  49:src/menu.c    **** 
  50:src/menu.c    ****      default:
  51:src/menu.c    ****       ret = MRET_UNIMPL;
  52:src/menu.c    ****       break;
  53:src/menu.c    ****   }
  54:src/menu.c    **** 
  55:src/menu.c    ****   return ret;
  56:src/menu.c    **** }
  57:src/menu.c    **** 
  58:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 58 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  59:src/menu.c    ****   const char * ln;
  40              		.loc 1 59 3 view .LVU1
  60:src/menu.c    **** 
  61:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 61 3 view .LVU2
  62:src/menu.c    **** 
  63:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  64:src/menu.c    **** 
  65:src/menu.c    ****   default:
  66:src/menu.c    ****     ln = NULL;
  42              		.loc 1 66 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  61:src/menu.c    **** 
  44              		.loc 1 61 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
  67:src/menu.c    ****     break;
  68:src/menu.c    ****   }
ARM GAS  /tmp/ccp3OFc8.s 			page 3


  69:src/menu.c    **** 
  70:src/menu.c    ****   return ln;
  71:src/menu.c    **** }
  46              		.loc 1 71 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 71 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC1
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB34:
  72:src/menu.c    **** 
  73:src/menu.c    **** void disp_about() {
  74:src/menu.c    ****   lcd_clear_buf();
  75:src/menu.c    ****   lcd_writeClr(t24);
  76:src/menu.c    **** 
  77:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  78:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
  79:src/menu.c    ****   t24->y += 5;
  80:src/menu.c    **** #ifdef TOP_ROW
  81:src/menu.c    ****   lcd_print(t24, "top row version,");
  82:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
  83:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  84:src/menu.c    ****   lcd_print(t24, "with a longer alpha display,");
  85:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  86:src/menu.c    ****   #else
  87:src/menu.c    ****   lcd_print(t24, "Just like the original calculator");
  88:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed,");
  89:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  90:src/menu.c    **** #endif
  91:src/menu.c    ****   t24->y += 5;
  92:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
  93:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
  94:src/menu.c    **** 
  95:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
  96:src/menu.c    ****   t24->x = 20;
  97:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
  98:src/menu.c    **** 
  99:src/menu.c    ****   lcd_refresh();
 100:src/menu.c    **** 
 101:src/menu.c    ****   wait_for_key_press();
 102:src/menu.c    **** }
ARM GAS  /tmp/ccp3OFc8.s 			page 4


 103:src/menu.c    **** 
 104:src/menu.c    **** /*
 105:src/menu.c    ****  * WP34s menu code
 106:src/menu.c    ****  */
 107:src/menu.c    **** 
 108:src/menu.c    **** void set_menu ( menu_name new_menu ) {
 109:src/menu.c    ****   menu_name m = current_menu;
 110:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 111:src/menu.c    ****     current_menu = default_menu;
 112:src/menu.c    ****   }
 113:src/menu.c    ****   else if (new_menu == M_Last) { // go to last menu
 114:src/menu.c    ****     current_menu = last_menu;
 115:src/menu.c    ****   }
 116:src/menu.c    ****   else {
 117:src/menu.c    ****     current_menu = new_menu; // change to new menu
 118:src/menu.c    ****   }
 119:src/menu.c    ****   if ( (m != M_Arrow) && (m != M_Alpha) ) last_menu = m;
 120:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 121:src/menu.c    **** }
 122:src/menu.c    **** 
 123:src/menu.c    **** void set_default_menu () {
 124:src/menu.c    ****   set_menu (default_menu);
 125:src/menu.c    **** }
 126:src/menu.c    **** 
 127:src/menu.c    **** void toggle_default_menu () {
 128:src/menu.c    ****   if (current_menu == M_Blank) {
 129:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 130:src/menu.c    ****     return;
 131:src/menu.c    ****   }
 132:src/menu.c    ****   else if (current_menu == M_Blank2) {
 133:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 134:src/menu.c    ****   }
 135:src/menu.c    ****   else {
 136:src/menu.c    ****     set_default_menu();
 137:src/menu.c    ****   }
 138:src/menu.c    **** }
 139:src/menu.c    **** 
 140:src/menu.c    **** menu_name get_menu () {
 141:src/menu.c    ****   return current_menu;
 142:src/menu.c    **** }
 143:src/menu.c    **** 
 144:src/menu.c    **** menu_name get_last_menu () {
 145:src/menu.c    ****   return last_menu;
 146:src/menu.c    **** }
 147:src/menu.c    **** 
 148:src/menu.c    **** void display_current_menu () {
 149:src/menu.c    ****   display_menu (get_current_menu_ref());
 150:src/menu.c    **** }
 151:src/menu.c    **** 
 152:src/menu.c    **** void set_last_menu () {
 153:src/menu.c    ****   set_menu (M_Last);
 154:src/menu.c    **** }
 155:src/menu.c    **** 
 156:src/menu.c    **** static unsigned char mdots[200][2];
 157:src/menu.c    **** 
 158:src/menu.c    **** static const struct _menu Menus[] = {
 159:src/menu.c    ****   {
ARM GAS  /tmp/ccp3OFc8.s 			page 5


 160:src/menu.c    ****     "M_Blank", // 0
 161:src/menu.c    ****     { 
 162:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 163:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 164:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 165:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 166:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 167:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 168:src/menu.c    ****     }    
 169:src/menu.c    ****   },
 170:src/menu.c    ****   {
 171:src/menu.c    ****     "M_Clear", // 1
 172:src/menu.c    ****     { 
 173:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 174:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 175:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 176:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 177:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 178:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 179:src/menu.c    ****     }    
 180:src/menu.c    ****   },
 181:src/menu.c    ****   {
 182:src/menu.c    ****     "M_Disp", // 2
 183:src/menu.c    ****     { 
 184:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 185:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 186:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 187:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 188:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 189:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 190:src/menu.c    ****     }
 191:src/menu.c    ****   },
 192:src/menu.c    ****   {
 193:src/menu.c    ****     "M_Base", // 3
 194:src/menu.c    ****     { 
 195:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 196:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 197:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 198:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 199:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 200:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 201:src/menu.c    ****     }
 202:src/menu.c    ****   },
 203:src/menu.c    ****   {
 204:src/menu.c    ****     "M_Angles", // 4
 205:src/menu.c    ****     { 
 206:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 207:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 208:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 209:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 210:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 211:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 212:src/menu.c    ****     }
 213:src/menu.c    ****       
 214:src/menu.c    ****   },
 215:src/menu.c    ****   {
 216:src/menu.c    ****     "M_Misc", // 5
ARM GAS  /tmp/ccp3OFc8.s 			page 6


 217:src/menu.c    ****     { 
 218:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 219:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 220:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 221:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 222:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 223:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 224:src/menu.c    ****     }
 225:src/menu.c    ****   },
 226:src/menu.c    ****   {
 227:src/menu.c    ****     "M_Swap", // 6
 228:src/menu.c    ****     { 
 229:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 230:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 231:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 232:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 233:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 234:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 235:src/menu.c    ****     }    
 236:src/menu.c    ****   },
 237:src/menu.c    ****   {
 238:src/menu.c    ****     "M_Program", // 7
 239:src/menu.c    ****     { 
 240:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 241:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 242:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 243:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 244:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 245:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 246:src/menu.c    ****     }
 247:src/menu.c    ****   },
 248:src/menu.c    ****   {
 249:src/menu.c    ****     "M_Setup1", // 8
 250:src/menu.c    ****     { 
 251:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 252:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 253:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 254:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 255:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 256:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 257:src/menu.c    ****     }
 258:src/menu.c    ****   },
 259:src/menu.c    ****   {
 260:src/menu.c    ****     "M_Arrow", // 9
 261:src/menu.c    ****     { 
 262:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 263:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 264:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 265:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "\015HMS" },
 266:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 267:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 268:src/menu.c    ****     }
 269:src/menu.c    ****   },
 270:src/menu.c    ****   {
 271:src/menu.c    ****     "M_Flags", // 10
 272:src/menu.c    ****     { 
 273:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
ARM GAS  /tmp/ccp3OFc8.s 			page 7


 274:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 275:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 276:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 277:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 278:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 279:src/menu.c    ****     }
 280:src/menu.c    ****   },
 281:src/menu.c    ****   {
 282:src/menu.c    ****     "M_Prob", // 11
 283:src/menu.c    ****     { 
 284:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 285:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 286:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 287:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 288:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 289:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 290:src/menu.c    ****     }
 291:src/menu.c    ****   },
 292:src/menu.c    ****   {
 293:src/menu.c    ****     "M_Stats", // 12
 294:src/menu.c    ****     /*
 295:src/menu.c    ****      *xbar, sd;
 296:src/menu.c    ****      *yhat, xhat;
 297:src/menu.c    ****      *corr, L.R.;
 298:src/menu.c    ****      *best, linear;
 299:src/menu.c    ****      *ln, exp;
 300:src/menu.c    ****      *cmplx, power;
 301:src/menu.c    ****      *No, sums is already on g9.
 302:src/menu.c    ****      */
 303:src/menu.c    ****     { 
 304:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 305:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 306:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 307:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 308:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 309:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 310:src/menu.c    ****     }
 311:src/menu.c    ****   },
 312:src/menu.c    ****   {
 313:src/menu.c    ****     "M_Setup2", // 13
 314:src/menu.c    ****     { 
 315:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 316:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 317:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 318:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 319:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 320:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 321:src/menu.c    ****     }
 322:src/menu.c    ****   },
 323:src/menu.c    ****   {
 324:src/menu.c    ****     "M_Solve", // 14
 325:src/menu.c    ****     { 
 326:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 327:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 328:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 329:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 330:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
ARM GAS  /tmp/ccp3OFc8.s 			page 8


 331:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 332:src/menu.c    ****     }
 333:src/menu.c    ****   },
 334:src/menu.c    ****   {
 335:src/menu.c    ****     "M_Blank2", // 15
 336:src/menu.c    ****     { 
 337:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 338:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 339:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 340:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 341:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 342:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 343:src/menu.c    ****     }    
 344:src/menu.c    ****   },
 345:src/menu.c    ****   {
 346:src/menu.c    ****     "M_Alpha", // 16
 347:src/menu.c    ****     { 
 348:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 349:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 350:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 351:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 352:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 353:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 354:src/menu.c    ****     }    
 355:src/menu.c    ****   },
 356:src/menu.c    ****   {
 357:src/menu.c    ****     "M_C_Lock", // 17
 358:src/menu.c    ****     { 
 359:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 360:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 361:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "CHS\006y", "CHS\006x" },
 362:src/menu.c    ****       { { K21, 1 }, { K00, 1 }, "x\027y", "HYP" },
 363:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 364:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 365:src/menu.c    ****     }    
 366:src/menu.c    ****   },
 367:src/menu.c    ****   {
 368:src/menu.c    ****     "M_Clear_C", // 18
 369:src/menu.c    ****     { 
 370:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 371:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 372:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 373:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, NO_KEY, "CLStk", "" },
 374:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 375:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 376:src/menu.c    ****     }    
 377:src/menu.c    ****   },
 378:src/menu.c    ****   {
 379:src/menu.c    ****     "M_Swap_C", // 19
 380:src/menu.c    ****     { 
 381:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 382:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 383:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 384:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 385:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 386:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 387:src/menu.c    ****     }    
ARM GAS  /tmp/ccp3OFc8.s 			page 9


 388:src/menu.c    ****   },
 389:src/menu.c    ****   {
 390:src/menu.c    ****     "M_Arrow_C", // 20
 391:src/menu.c    ****     { 
 392:src/menu.c    ****       { NO_KEY, { K10, 2 }, "", "DEG" },
 393:src/menu.c    ****       { NO_KEY, { K11, 2 }, "", "RAD" },
 394:src/menu.c    ****       { NO_KEY, { K12, 2 }, "", "Grad" },
 395:src/menu.c    ****       { NO_KEY, { K10, 1 }, "", "\015HMS" },
 396:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 397:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 398:src/menu.c    ****     }
 399:src/menu.c    ****   },
 400:src/menu.c    ****   {
 401:src/menu.c    ****     "M_Prob_C", // 21
 402:src/menu.c    ****     { 
 403:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_CMON | OP_LNGAMMA }, "\024\006!", "\024\006Ln\006\202" },
 404:src/menu.c    ****       { { K_OP, OP_CDYA | OP_COMB }, NO_KEY, "\024\006Cy,x", "" },
 405:src/menu.c    ****       { { K_OP, OP_CDYA | OP_PERM }, NO_KEY, "\024\006Py,x", "" },
 406:src/menu.c    ****       { NO_KEY, NO_KEY , "", "" },
 407:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 408:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 409:src/menu.c    ****     }
 410:src/menu.c    ****   },
 411:src/menu.c    ****   {
 412:src/menu.c    ****     "M_Blank2_C", // 22
 413:src/menu.c    ****     { 
 414:src/menu.c    ****       { { K00, 1 }, NO_KEY, "HYP", "" },
 415:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 416:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 417:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 418:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 419:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 420:src/menu.c    ****     }    
 421:src/menu.c    ****   },
 422:src/menu.c    ****   {
 423:src/menu.c    ****     "M_Misc_C", // 23
 424:src/menu.c    ****     { 
 425:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 426:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 427:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "0\015Re", "Log\213" },
 428:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "0\015Im", "||el" },
 429:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", ".\034" },
 430:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "./" },
 431:src/menu.c    ****     }
 432:src/menu.c    ****   },
 433:src/menu.c    **** 
 434:src/menu.c    **** };  
 435:src/menu.c    **** 
 436:src/menu.c    **** /* This code is the set_status_sized code with small changes
 437:src/menu.c    ****  * and non-DM42 code removed.
 438:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 439:src/menu.c    ****  */
 440:src/menu.c    **** #define MENU_WIDTH 32
 441:src/menu.c    **** 
 442:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 442 13 is_stmt 1 view -0
  72              		.cfi_startproc
ARM GAS  /tmp/ccp3OFc8.s 			page 10


  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 443:src/menu.c    ****   // dotcol is the number of the starting dot column
 444:src/menu.c    ****   // shifted is 1 if shifted
 445:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 445 3 view .LVU8
 446:src/menu.c    **** 
 447:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 448:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 448 3 view .LVU9
 449:src/menu.c    **** 
 450:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 450 3 view .LVU10
 442:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 442 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 442:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 442 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 451:src/menu.c    ****   int i, j, xmax;
 452:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 452 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
  96 000e B4BF     		ite	lt
  97 0010 01F11F03 		addlt	r3, r1, #31
  98 0014 0B46     		movge	r3, r1
 453:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 454:src/menu.c    **** 
 455:src/menu.c    ****   forceDispPlot=0;
  99              		.loc 1 455 16 view .LVU14
 100 0016 4848     		ldr	r0, .L41
 101              	.LVL3:
 442:src/menu.c    ****   // dotcol is the number of the starting dot column
 102              		.loc 1 442 13 view .LVU15
 103 0018 0F46     		mov	r7, r1
 104              	.LVL4:
 451:src/menu.c    ****   int i, j, xmax;
 105              		.loc 1 451 3 is_stmt 1 view .LVU16
 452:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 106              		.loc 1 452 3 view .LVU17
 456:src/menu.c    **** 
 457:src/menu.c    **** #ifdef RP_PREFIX
 458:src/menu.c    ****   RectPolConv = 0;
 107              		.loc 1 458 15 is_stmt 0 view .LVU18
 108 001a 4849     		ldr	r1, .L41+4
ARM GAS  /tmp/ccp3OFc8.s 			page 11


 109              	.LVL5:
 455:src/menu.c    **** 
 110              		.loc 1 455 16 view .LVU19
 111 001c 0022     		movs	r2, #0
 112              	.LVL6:
 455:src/menu.c    **** 
 113              		.loc 1 455 16 view .LVU20
 114 001e 0270     		strb	r2, [r0]
 115              		.loc 1 458 15 view .LVU21
 116 0020 0A60     		str	r2, [r1]
 459:src/menu.c    **** #endif
 460:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 117              		.loc 1 460 10 view .LVU22
 118 0022 019A     		ldr	r2, [sp, #4]
 119 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 452:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 120              		.loc 1 452 30 view .LVU23
 121 0026 23F01F03 		bic	r3, r3, #31
 452:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 122              		.loc 1 452 8 view .LVU24
 123 002a 03F12009 		add	r9, r3, #32
 124              	.LVL7:
 453:src/menu.c    **** 
 125              		.loc 1 453 3 is_stmt 1 view .LVU25
 455:src/menu.c    **** 
 126              		.loc 1 455 3 view .LVU26
 458:src/menu.c    **** #endif
 127              		.loc 1 458 3 view .LVU27
 128              		.loc 1 460 3 view .LVU28
 129              		.loc 1 460 9 view .LVU29
 130 002e 002D     		cmp	r5, #0
 131 0030 78D0     		beq	.L7
 132              		.loc 1 460 23 is_stmt 0 view .LVU30
 133 0032 4F45     		cmp	r7, r9
 134 0034 76DC     		bgt	.L7
 135              	.LBB41:
 461:src/menu.c    ****     int c;
 462:src/menu.c    ****     int width;
 463:src/menu.c    ****     unsigned char cmap[6];
 464:src/menu.c    **** 
 465:src/menu.c    ****     int real_width;
 466:src/menu.c    ****     int current_smallp;
 467:src/menu.c    **** 
 468:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 469:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 470:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 471:src/menu.c    ****     //           01 -> (not used)
 472:src/menu.c    ****     //           10 -> use big font
 473:src/menu.c    ****     //           11 -> use small font
 474:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 475:src/menu.c    ****     if (str[0] == '\007') {
 136              		.loc 1 475 8 view .LVU31
 137 0036 072D     		cmp	r5, #7
 138              	.LBE41:
 448:src/menu.c    **** 
 139              		.loc 1 448 7 view .LVU32
 140 0038 4FF0FF04 		mov	r4, #255
ARM GAS  /tmp/ccp3OFc8.s 			page 12


 141              	.LVL8:
 142              	.LBB58:
 461:src/menu.c    ****     int c;
 143              		.loc 1 461 5 is_stmt 1 view .LVU33
 462:src/menu.c    ****     unsigned char cmap[6];
 144              		.loc 1 462 5 view .LVU34
 463:src/menu.c    **** 
 145              		.loc 1 463 5 view .LVU35
 465:src/menu.c    ****     int current_smallp;
 146              		.loc 1 465 5 view .LVU36
 466:src/menu.c    **** 
 147              		.loc 1 466 5 view .LVU37
 148              		.loc 1 475 5 view .LVU38
 476:src/menu.c    ****       width = str[1] & 0x1F;
 477:src/menu.c    ****       switch (str[1] & 0x60) {
 478:src/menu.c    ****       default:
 479:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 480:src/menu.c    **** 	break;
 481:src/menu.c    ****       case 0x40:	current_smallp = 0;
 482:src/menu.c    **** 	break;
 483:src/menu.c    ****       case 0x60:	current_smallp = 1;
 149              		.loc 1 483 33 is_stmt 0 view .LVU39
 150 003c 4FF0010A 		mov	r10, #1
 475:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 475 8 view .LVU40
 152 0040 64D1     		bne	.L11
 153              	.LVL9:
 154              	.L39:
 476:src/menu.c    ****       width = str[1] & 0x1F;
 155              		.loc 1 476 7 is_stmt 1 view .LVU41
 476:src/menu.c    ****       width = str[1] & 0x1F;
 156              		.loc 1 476 18 is_stmt 0 view .LVU42
 157 0042 019B     		ldr	r3, [sp, #4]
 158 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 159 0046 06F06003 		and	r3, r6, #96
 477:src/menu.c    ****       default:
 160              		.loc 1 477 7 view .LVU43
 161 004a 402B     		cmp	r3, #64
 476:src/menu.c    ****       width = str[1] & 0x1F;
 162              		.loc 1 476 13 view .LVU44
 163 004c 06F01F06 		and	r6, r6, #31
 164              	.LVL10:
 477:src/menu.c    ****       default:
 165              		.loc 1 477 7 is_stmt 1 view .LVU45
 166 0050 6CD0     		beq	.L34
 167 0052 602B     		cmp	r3, #96
 168 0054 6AD1     		bne	.L34
 169              		.loc 1 483 18 view .LVU46
 170              	.LVL11:
 484:src/menu.c    **** 	break;
 171              		.loc 1 484 2 view .LVU47
 485:src/menu.c    ****       }
 486:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 172              		.loc 1 486 7 view .LVU48
 173              		.loc 1 486 11 is_stmt 0 view .LVU49
 174 0056 019B     		ldr	r3, [sp, #4]
 175 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
ARM GAS  /tmp/ccp3OFc8.s 			page 13


 483:src/menu.c    **** 	break;
 176              		.loc 1 483 33 view .LVU50
 177 005a 0123     		movs	r3, #1
 178 005c 0093     		str	r3, [sp]
 179 005e 00F58075 		add	r5, r0, #256
 180              	.LVL12:
 181              	.L15:
 487:src/menu.c    ****       str += 3;
 182              		.loc 1 487 7 is_stmt 1 view .LVU51
 488:src/menu.c    **** 
 489:src/menu.c    ****       real_width = charlengths(c);
 183              		.loc 1 489 20 is_stmt 0 view .LVU52
 184 0062 2846     		mov	r0, r5
 185 0064 FFF7FEFF 		bl	charlengths
 186              	.LVL13:
 487:src/menu.c    ****       str += 3;
 187              		.loc 1 487 11 view .LVU53
 188 0068 019B     		ldr	r3, [sp, #4]
 189 006a 0333     		adds	r3, r3, #3
 190 006c 0193     		str	r3, [sp, #4]
 191              	.LVL14:
 192              		.loc 1 489 7 is_stmt 1 view .LVU54
 490:src/menu.c    ****     } else {
 491:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 492:src/menu.c    ****       real_width = width = charlengths(c);
 493:src/menu.c    ****       current_smallp = smallp;
 494:src/menu.c    ****     }
 495:src/menu.c    **** 
 496:src/menu.c    ****     if (x + real_width > xmax)
 193              		.loc 1 496 5 view .LVU55
 194              		.loc 1 496 11 is_stmt 0 view .LVU56
 195 006e C319     		adds	r3, r0, r7
 196              	.LVL15:
 197              		.loc 1 496 8 view .LVU57
 198 0070 9945     		cmp	r9, r3
 199 0072 57DB     		blt	.L7
 200              	.L40:
 497:src/menu.c    ****       break;
 498:src/menu.c    **** 
 499:src/menu.c    ****     if (posns_state != current_smallp) {
 201              		.loc 1 499 5 is_stmt 1 view .LVU58
 202              		.loc 1 499 8 is_stmt 0 view .LVU59
 203 0074 009B     		ldr	r3, [sp]
 204 0076 A342     		cmp	r3, r4
 500:src/menu.c    ****       findlengths(posns, current_smallp);
 205              		.loc 1 500 7 view .LVU60
 206 0078 07AB     		add	r3, sp, #28
 499:src/menu.c    ****       findlengths(posns, current_smallp);
 207              		.loc 1 499 8 view .LVU61
 208 007a 05D0     		beq	.L18
 209              		.loc 1 500 7 is_stmt 1 view .LVU62
 210 007c 1846     		mov	r0, r3
 211              	.LVL16:
 212              		.loc 1 500 7 is_stmt 0 view .LVU63
 213 007e 0099     		ldr	r1, [sp]
 214 0080 0393     		str	r3, [sp, #12]
 215 0082 FFF7FEFF 		bl	findlengths
ARM GAS  /tmp/ccp3OFc8.s 			page 14


 216              	.LVL17:
 217 0086 039B     		ldr	r3, [sp, #12]
 501:src/menu.c    ****       posns_state = current_smallp;
 218              		.loc 1 501 7 is_stmt 1 view .LVU64
 219              	.LVL18:
 220              	.L18:
 502:src/menu.c    ****     }
 503:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 221              		.loc 1 503 5 view .LVU65
 222 0088 009A     		ldr	r2, [sp]
 223 008a 2846     		mov	r0, r5
 224 008c 05A9     		add	r1, sp, #20
 225 008e FFF7FEFF 		bl	unpackchar
 226              	.LVL19:
 504:src/menu.c    **** 
 505:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 227              		.loc 1 505 5 view .LVU66
 228              		.loc 1 505 15 view .LVU67
 229 0092 029B     		ldr	r3, [sp, #8]
 230 0094 03EB4704 		add	r4, r3, r7, lsl #1
 231 0098 294B     		ldr	r3, .L41+8
 232 009a 0DF1140B 		add	fp, sp, #20
 233 009e 1C44     		add	r4, r4, r3
 503:src/menu.c    **** 
 234              		.loc 1 503 5 is_stmt 0 view .LVU68
 235 00a0 4FF0050E 		mov	lr, #5
 236 00a4 A9EB0705 		sub	r5, r9, r7
 237              	.LVL20:
 238              	.L19:
 506:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 239              		.loc 1 506 17 is_stmt 1 view .LVU69
 240              		.loc 1 506 7 is_stmt 0 view .LVU70
 241 00a8 002E     		cmp	r6, #0
 242 00aa 1FDD     		ble	.L25
 507:src/menu.c    **** 	if (x+j >= xmax)
 243              		.loc 1 507 2 is_stmt 1 view .LVU71
 244              		.loc 1 507 5 is_stmt 0 view .LVU72
 245 00ac B945     		cmp	r9, r7
 246 00ae 1DDD     		ble	.L25
 247              	.LBB42:
 248              	.LBB43:
 249              	.LBB44:
 250              	.LBB45:
 508:src/menu.c    **** 	  break;
 509:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 510:src/menu.c    ****       }
 511:src/menu.c    ****     }
 512:src/menu.c    ****     x += width;
 513:src/menu.c    ****   }
 514:src/menu.c    **** }
 515:src/menu.c    **** 
 516:src/menu.c    **** 
 517:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 518:src/menu.c    **** 
 519:src/menu.c    **** int pixel_length(const char *s, int smallp)
 520:src/menu.c    **** {
 521:src/menu.c    ****   int len = 0;
ARM GAS  /tmp/ccp3OFc8.s 			page 15


 522:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 523:src/menu.c    ****   while (*s != '\0') {
 524:src/menu.c    ****     if (s[0] == '\007') {
 525:src/menu.c    ****       len += s[1] & 0x1F;
 526:src/menu.c    ****       s += 3;
 527:src/menu.c    ****       continue;
 528:src/menu.c    ****     }
 529:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 530:src/menu.c    ****   }
 531:src/menu.c    ****   return len;
 532:src/menu.c    **** }
 533:src/menu.c    **** */
 534:src/menu.c    **** 
 535:src/menu.c    **** 
 536:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 537:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 538:src/menu.c    ****   if (on) {
 539:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 540:src/menu.c    ****   }
 541:src/menu.c    ****   else {
 542:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 251              		.loc 1 542 25 view .LVU73
 252 00b0 0AFA0EFC 		lsl	ip, r10, lr
 253              		.loc 1 542 17 view .LVU74
 254 00b4 4FFA8CFC 		sxtb	ip, ip
 255              	.LBE45:
 256              	.LBE44:
 257              	.LBE43:
 258              	.LBE42:
 509:src/menu.c    ****       }
 259              		.loc 1 509 31 view .LVU75
 260 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 261              	.LBB55:
 262              	.LBB52:
 263              	.LBB49:
 264              	.LBB46:
 265              		.loc 1 542 17 view .LVU76
 266 00bc 6FEA0C08 		mvn	r8, ip
 267              	.LBE46:
 268              	.LBE49:
 269              	.LBE52:
 270              	.LBE55:
 506:src/menu.c    **** 	if (x+j >= xmax)
 271              		.loc 1 506 13 view .LVU77
 272 00c0 0023     		movs	r3, #0
 273 00c2 01E0     		b	.L20
 274              	.LVL21:
 275              	.L24:
 507:src/menu.c    **** 	  break;
 276              		.loc 1 507 5 view .LVU78
 277 00c4 9D42     		cmp	r5, r3
 278 00c6 11D0     		beq	.L25
 279              	.LVL22:
 280              	.L20:
 509:src/menu.c    ****       }
 281              		.loc 1 509 2 is_stmt 1 view .LVU79
 282              	.LBB56:
ARM GAS  /tmp/ccp3OFc8.s 			page 16


 283              	.LBI42:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 536 6 view .LVU80
 285              	.LBB53:
 537:src/menu.c    ****   if (on) {
 286              		.loc 1 537 3 view .LVU81
 287              	.LBB50:
 288              	.LBI44:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 289              		.loc 1 536 6 view .LVU82
 290              	.LBB47:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 291              		.loc 1 538 3 view .LVU83
 292              	.LBE47:
 293              	.LBE50:
 537:src/menu.c    ****   if (on) {
 294              		.loc 1 537 6 is_stmt 0 view .LVU84
 295 00c8 DA19     		adds	r2, r3, r7
 296              	.LVL23:
 537:src/menu.c    ****   if (on) {
 297              		.loc 1 537 6 view .LVU85
 298 00ca C72A     		cmp	r2, #199
 299              	.LBE53:
 300              	.LBE56:
 509:src/menu.c    ****       }
 301              		.loc 1 509 46 view .LVU86
 302 00cc 40FA03F1 		asr	r1, r0, r3
 303              	.LBB57:
 304              	.LBB54:
 537:src/menu.c    ****   if (on) {
 305              		.loc 1 537 6 view .LVU87
 306 00d0 09D8     		bhi	.L22
 307              	.LBB51:
 308              	.LBB48:
 539:src/menu.c    ****   }
 309              		.loc 1 539 5 is_stmt 1 view .LVU88
 310              		.loc 1 542 5 view .LVU89
 539:src/menu.c    ****   }
 311              		.loc 1 539 17 is_stmt 0 view .LVU90
 312 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 313              	.LVL24:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 314              		.loc 1 538 6 view .LVU91
 315 00d6 C907     		lsls	r1, r1, #31
 539:src/menu.c    ****   }
 316              		.loc 1 539 17 view .LVU92
 317 00d8 4CBF     		ite	mi
 318 00da 4CEA0202 		orrmi	r2, ip, r2
 319              		.loc 1 542 17 view .LVU93
 320 00de 08EA0202 		andpl	r2, r8, r2
 321 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 322              	.L22:
 323              	.LBE48:
 324              	.LBE51:
 325              	.LBE54:
 326              	.LBE57:
 507:src/menu.c    **** 	  break;
ARM GAS  /tmp/ccp3OFc8.s 			page 17


 327              		.loc 1 507 2 is_stmt 1 view .LVU94
 328              	.LVL25:
 506:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 506 26 view .LVU95
 506:src/menu.c    **** 	if (x+j >= xmax)
 330              		.loc 1 506 27 is_stmt 0 view .LVU96
 331 00e6 0133     		adds	r3, r3, #1
 332              	.LVL26:
 506:src/menu.c    **** 	if (x+j >= xmax)
 333              		.loc 1 506 17 is_stmt 1 view .LVU97
 506:src/menu.c    **** 	if (x+j >= xmax)
 334              		.loc 1 506 7 is_stmt 0 view .LVU98
 335 00e8 B342     		cmp	r3, r6
 336 00ea EBD1     		bne	.L24
 337              	.LVL27:
 338              	.L25:
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 339              		.loc 1 505 20 is_stmt 1 view .LVU99
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 340              		.loc 1 505 15 view .LVU100
 341 00ec 0EF1FF3E 		add	lr, lr, #-1
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 342              		.loc 1 505 5 is_stmt 0 view .LVU101
 343 00f0 BEF1FF3F 		cmp	lr, #-1
 344 00f4 0BF1010B 		add	fp, fp, #1
 345              	.LVL28:
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 346              		.loc 1 505 5 view .LVU102
 347 00f8 D6D1     		bne	.L19
 512:src/menu.c    ****   }
 348              		.loc 1 512 5 is_stmt 1 view .LVU103
 349              	.LBE58:
 460:src/menu.c    ****     int c;
 350              		.loc 1 460 10 is_stmt 0 view .LVU104
 351 00fa 019B     		ldr	r3, [sp, #4]
 352 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 353              	.LBB59:
 512:src/menu.c    ****   }
 354              		.loc 1 512 7 view .LVU105
 355 00fe 3744     		add	r7, r7, r6
 356              	.LVL29:
 512:src/menu.c    ****   }
 357              		.loc 1 512 7 view .LVU106
 358              	.LBE59:
 460:src/menu.c    ****     int c;
 359              		.loc 1 460 9 is_stmt 1 view .LVU107
 360 0100 85B1     		cbz	r5, .L7
 460:src/menu.c    ****     int c;
 361              		.loc 1 460 23 is_stmt 0 view .LVU108
 362 0102 B945     		cmp	r9, r7
 363 0104 0EDB     		blt	.L7
 364              	.LBB60:
 475:src/menu.c    ****       width = str[1] & 0x1F;
 365              		.loc 1 475 8 view .LVU109
 366 0106 072D     		cmp	r5, #7
 367              	.LBE60:
 368 0108 009C     		ldr	r4, [sp]
ARM GAS  /tmp/ccp3OFc8.s 			page 18


 369              	.LBB61:
 461:src/menu.c    ****     int width;
 370              		.loc 1 461 5 is_stmt 1 view .LVU110
 462:src/menu.c    ****     unsigned char cmap[6];
 371              		.loc 1 462 5 view .LVU111
 463:src/menu.c    **** 
 372              		.loc 1 463 5 view .LVU112
 465:src/menu.c    ****     int current_smallp;
 373              		.loc 1 465 5 view .LVU113
 466:src/menu.c    **** 
 374              		.loc 1 466 5 view .LVU114
 475:src/menu.c    ****       width = str[1] & 0x1F;
 375              		.loc 1 475 5 view .LVU115
 475:src/menu.c    ****       width = str[1] & 0x1F;
 376              		.loc 1 475 8 is_stmt 0 view .LVU116
 377 010a 9AD0     		beq	.L39
 378              	.LVL30:
 379              	.L11:
 491:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 491 7 is_stmt 1 view .LVU117
 492:src/menu.c    ****       current_smallp = smallp;
 381              		.loc 1 492 28 is_stmt 0 view .LVU118
 382 010c 2846     		mov	r0, r5
 383 010e FFF7FEFF 		bl	charlengths
 384              	.LVL31:
 491:src/menu.c    ****       real_width = width = charlengths(c);
 385              		.loc 1 491 31 view .LVU119
 386 0112 019B     		ldr	r3, [sp, #4]
 387 0114 0133     		adds	r3, r3, #1
 388 0116 0193     		str	r3, [sp, #4]
 389              	.LVL32:
 492:src/menu.c    ****       current_smallp = smallp;
 390              		.loc 1 492 7 is_stmt 1 view .LVU120
 493:src/menu.c    ****     }
 391              		.loc 1 493 7 view .LVU121
 493:src/menu.c    ****     }
 392              		.loc 1 493 22 is_stmt 0 view .LVU122
 393 0118 0023     		movs	r3, #0
 394              	.LVL33:
 493:src/menu.c    ****     }
 395              		.loc 1 493 22 view .LVU123
 396 011a 0093     		str	r3, [sp]
 397              	.LVL34:
 496:src/menu.c    ****       break;
 398              		.loc 1 496 11 view .LVU124
 399 011c C319     		adds	r3, r0, r7
 400              	.LVL35:
 496:src/menu.c    ****       break;
 401              		.loc 1 496 8 view .LVU125
 402 011e 9945     		cmp	r9, r3
 492:src/menu.c    ****       current_smallp = smallp;
 403              		.loc 1 492 28 view .LVU126
 404 0120 0646     		mov	r6, r0
 496:src/menu.c    ****       break;
 405              		.loc 1 496 5 is_stmt 1 view .LVU127
 496:src/menu.c    ****       break;
 406              		.loc 1 496 8 is_stmt 0 view .LVU128
ARM GAS  /tmp/ccp3OFc8.s 			page 19


 407 0122 A7DA     		bge	.L40
 408              	.LVL36:
 409              	.L7:
 496:src/menu.c    ****       break;
 410              		.loc 1 496 8 view .LVU129
 411              	.LBE61:
 514:src/menu.c    **** 
 412              		.loc 1 514 1 view .LVU130
 413 0124 0DF5097D 		add	sp, sp, #548
 414              		.cfi_remember_state
 415              		.cfi_def_cfa_offset 36
 416              		@ sp needed
 417 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 418              	.LVL37:
 419              	.L34:
 420              		.cfi_restore_state
 421              	.LBB62:
 486:src/menu.c    ****       str += 3;
 422              		.loc 1 486 7 is_stmt 1 view .LVU131
 486:src/menu.c    ****       str += 3;
 423              		.loc 1 486 11 is_stmt 0 view .LVU132
 424 012c 019B     		ldr	r3, [sp, #4]
 425 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 479:src/menu.c    **** 	break;
 426              		.loc 1 479 33 view .LVU133
 427 0130 0023     		movs	r3, #0
 428 0132 0093     		str	r3, [sp]
 429 0134 95E7     		b	.L15
 430              	.L42:
 431 0136 00BF     		.align	2
 432              	.L41:
 433 0138 00000000 		.word	forceDispPlot
 434 013c 00000000 		.word	RectPolConv
 435 0140 00000000 		.word	.LANCHOR0
 436              	.LBE62:
 437              		.cfi_endproc
 438              	.LFE34:
 440              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 441              		.align	2
 442              	.LC2:
 443 0000 57503334 		.ascii	"WP34C calculator for DM42:\000"
 443      43206361 
 443      6C63756C 
 443      61746F72 
 443      20666F72 
 444 001b 00       		.align	2
 445              	.LC3:
 446 001c 746F7020 		.ascii	"top row version,\000"
 446      726F7720 
 446      76657273 
 446      696F6E2C 
 446      00
 447 002d 000000   		.align	2
 448              	.LC4:
 449 0030 696E636C 		.ascii	"including COMPLEX LOCK mode!\000"
 449      7564696E 
 449      6720434F 
ARM GAS  /tmp/ccp3OFc8.s 			page 20


 449      4D504C45 
 449      58204C4F 
 450 004d 000000   		.align	2
 451              	.LC5:
 452 0050 54686973 		.ascii	"This software is neither provided\000"
 452      20736F66 
 452      74776172 
 452      65206973 
 452      206E6569 
 453 0072 0000     		.align	2
 454              	.LC6:
 455 0074 6279206E 		.ascii	"by nor supported by SwissMicros.\000"
 455      6F722073 
 455      7570706F 
 455      72746564 
 455      20627920 
 456 0095 000000   		.align	2
 457              	.LC7:
 458 0098 20202020 		.ascii	"    Press EXIT key to continue...\000"
 458      50726573 
 458      73204558 
 458      4954206B 
 458      65792074 
 459              		.section	.text.disp_about,"ax",%progbits
 460              		.align	1
 461              		.p2align 2,,3
 462              		.global	disp_about
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv4-sp-d16
 468              	disp_about:
 469              	.LFB5:
  73:src/menu.c    ****   lcd_clear_buf();
 470              		.loc 1 73 19 is_stmt 1 view -0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
  74:src/menu.c    ****   lcd_writeClr(t24);
 474              		.loc 1 74 3 view .LVU135
  73:src/menu.c    ****   lcd_clear_buf();
 475              		.loc 1 73 19 is_stmt 0 view .LVU136
 476 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 477              		.cfi_def_cfa_offset 24
 478              		.cfi_offset 4, -24
 479              		.cfi_offset 5, -20
 480              		.cfi_offset 6, -16
 481              		.cfi_offset 7, -12
 482              		.cfi_offset 8, -8
 483              		.cfi_offset 14, -4
  75:src/menu.c    **** 
 484              		.loc 1 75 3 view .LVU137
 485 0004 1E4C     		ldr	r4, .L45
  74:src/menu.c    ****   lcd_writeClr(t24);
 486              		.loc 1 74 3 view .LVU138
 487 0006 1F4B     		ldr	r3, .L45+4
  78:src/menu.c    ****   t24->y += 5;
ARM GAS  /tmp/ccp3OFc8.s 			page 21


 488              		.loc 1 78 3 view .LVU139
 489 0008 1F4D     		ldr	r5, .L45+8
  74:src/menu.c    ****   lcd_writeClr(t24);
 490              		.loc 1 74 3 view .LVU140
 491 000a 9847     		blx	r3
 492              	.LVL38:
  75:src/menu.c    **** 
 493              		.loc 1 75 3 is_stmt 1 view .LVU141
 494 000c 606B     		ldr	r0, [r4, #52]
 495 000e 1F4B     		ldr	r3, .L45+12
 496 0010 9847     		blx	r3
 497              	.LVL39:
  77:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
 498              		.loc 1 77 3 view .LVU142
 499 0012 0522     		movs	r2, #5
 500 0014 606B     		ldr	r0, [r4, #52]
 501 0016 1E4B     		ldr	r3, .L45+16
 502 0018 0021     		movs	r1, #0
 503 001a 9847     		blx	r3
 504              	.LVL40:
  78:src/menu.c    ****   t24->y += 5;
 505              		.loc 1 78 3 view .LVU143
  78:src/menu.c    ****   t24->y += 5;
 506              		.loc 1 78 3 view .LVU144
 507 001c 606B     		ldr	r0, [r4, #52]
 508 001e 1D49     		ldr	r1, .L45+20
 509 0020 0126     		movs	r6, #1
 510 0022 4674     		strb	r6, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 511              		.loc 1 78 3 view .LVU145
 512 0024 A847     		blx	r5
 513              	.LVL41:
  78:src/menu.c    ****   t24->y += 5;
 514              		.loc 1 78 3 view .LVU146
 515 0026 606B     		ldr	r0, [r4, #52]
  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 516              		.loc 1 81 3 is_stmt 0 view .LVU147
 517 0028 1B49     		ldr	r1, .L45+24
  79:src/menu.c    **** #ifdef TOP_ROW
 518              		.loc 1 79 10 view .LVU148
 519 002a C388     		ldrh	r3, [r0, #6]
  78:src/menu.c    ****   t24->y += 5;
 520              		.loc 1 78 3 view .LVU149
 521 002c 0027     		movs	r7, #0
  79:src/menu.c    **** #ifdef TOP_ROW
 522              		.loc 1 79 10 view .LVU150
 523 002e 0533     		adds	r3, r3, #5
 524 0030 C380     		strh	r3, [r0, #6]	@ movhi
  78:src/menu.c    ****   t24->y += 5;
 525              		.loc 1 78 3 view .LVU151
 526 0032 4774     		strb	r7, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 527              		.loc 1 78 3 is_stmt 1 view .LVU152
  79:src/menu.c    **** #ifdef TOP_ROW
 528              		.loc 1 79 3 view .LVU153
  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 529              		.loc 1 81 3 view .LVU154
ARM GAS  /tmp/ccp3OFc8.s 			page 22


 530 0034 A847     		blx	r5
 531              	.LVL42:
  82:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 532              		.loc 1 82 3 view .LVU155
 533 0036 606B     		ldr	r0, [r4, #52]
 534 0038 1849     		ldr	r1, .L45+28
 535 003a A847     		blx	r5
 536              	.LVL43:
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 537              		.loc 1 91 3 view .LVU156
 538 003c 606B     		ldr	r0, [r4, #52]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 539              		.loc 1 92 3 is_stmt 0 view .LVU157
 540 003e 1849     		ldr	r1, .L45+32
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 541              		.loc 1 91 10 view .LVU158
 542 0040 C388     		ldrh	r3, [r0, #6]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 543              		.loc 1 92 3 view .LVU159
 544 0042 4674     		strb	r6, [r0, #17]
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 545              		.loc 1 91 10 view .LVU160
 546 0044 0533     		adds	r3, r3, #5
 547 0046 C380     		strh	r3, [r0, #6]	@ movhi
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 548              		.loc 1 92 3 is_stmt 1 view .LVU161
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 549              		.loc 1 92 3 view .LVU162
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 550              		.loc 1 92 3 view .LVU163
 551 0048 A847     		blx	r5
 552              	.LVL44:
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 553              		.loc 1 92 3 view .LVU164
 554 004a 606B     		ldr	r0, [r4, #52]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 555              		.loc 1 92 3 view .LVU165
  93:src/menu.c    **** 
 556              		.loc 1 93 3 view .LVU166
  93:src/menu.c    **** 
 557              		.loc 1 93 3 view .LVU167
 558 004c 1549     		ldr	r1, .L45+36
 559 004e 4674     		strb	r6, [r0, #17]
  93:src/menu.c    **** 
 560              		.loc 1 93 3 view .LVU168
 561 0050 A847     		blx	r5
 562              	.LVL45:
  93:src/menu.c    **** 
 563              		.loc 1 93 3 view .LVU169
 564 0052 606B     		ldr	r0, [r4, #52]
  95:src/menu.c    ****   t24->x = 20;
 565              		.loc 1 95 20 is_stmt 0 view .LVU170
 566 0054 144B     		ldr	r3, .L45+40
  93:src/menu.c    **** 
 567              		.loc 1 93 3 view .LVU171
 568 0056 4774     		strb	r7, [r0, #17]
  93:src/menu.c    **** 
ARM GAS  /tmp/ccp3OFc8.s 			page 23


 569              		.loc 1 93 3 is_stmt 1 view .LVU172
  95:src/menu.c    ****   t24->x = 20;
 570              		.loc 1 95 3 view .LVU173
  95:src/menu.c    ****   t24->x = 20;
 571              		.loc 1 95 20 is_stmt 0 view .LVU174
 572 0058 9847     		blx	r3
 573              	.LVL46:
  95:src/menu.c    ****   t24->x = 20;
 574              		.loc 1 95 3 view .LVU175
 575 005a 636B     		ldr	r3, [r4, #52]
  97:src/menu.c    **** 
 576              		.loc 1 97 3 view .LVU176
 577 005c 1349     		ldr	r1, .L45+44
 578 005e 5E74     		strb	r6, [r3, #17]
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 579              		.loc 1 96 10 view .LVU177
 580 0060 1422     		movs	r2, #20
  95:src/menu.c    ****   t24->x = 20;
 581              		.loc 1 95 39 view .LVU178
 582 0062 C0F1EB00 		rsb	r0, r0, #235
  95:src/menu.c    ****   t24->x = 20;
 583              		.loc 1 95 10 view .LVU179
 584 0066 D880     		strh	r0, [r3, #6]	@ movhi
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 585              		.loc 1 96 3 is_stmt 1 view .LVU180
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 586              		.loc 1 96 10 is_stmt 0 view .LVU181
 587 0068 9A80     		strh	r2, [r3, #4]	@ movhi
  97:src/menu.c    **** 
 588              		.loc 1 97 3 is_stmt 1 view .LVU182
  97:src/menu.c    **** 
 589              		.loc 1 97 3 view .LVU183
  97:src/menu.c    **** 
 590              		.loc 1 97 3 view .LVU184
 591 006a 1846     		mov	r0, r3
 592 006c A847     		blx	r5
 593              	.LVL47:
  97:src/menu.c    **** 
 594              		.loc 1 97 3 view .LVU185
 595 006e 626B     		ldr	r2, [r4, #52]
  99:src/menu.c    **** 
 596              		.loc 1 99 3 is_stmt 0 view .LVU186
 597 0070 0F4B     		ldr	r3, .L45+48
  97:src/menu.c    **** 
 598              		.loc 1 97 3 view .LVU187
 599 0072 5774     		strb	r7, [r2, #17]
  97:src/menu.c    **** 
 600              		.loc 1 97 3 is_stmt 1 view .LVU188
  99:src/menu.c    **** 
 601              		.loc 1 99 3 view .LVU189
 602 0074 9847     		blx	r3
 603              	.LVL48:
 101:src/menu.c    **** }
 604              		.loc 1 101 3 view .LVU190
 102:src/menu.c    **** 
 605              		.loc 1 102 1 is_stmt 0 view .LVU191
 606 0076 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/ccp3OFc8.s 			page 24


 607              		.cfi_restore 14
 608              		.cfi_restore 8
 609              		.cfi_restore 7
 610              		.cfi_restore 6
 611              		.cfi_restore 5
 612              		.cfi_restore 4
 613              		.cfi_def_cfa_offset 0
 101:src/menu.c    **** }
 614              		.loc 1 101 3 view .LVU192
 615 007a 0E4B     		ldr	r3, .L45+52
 616 007c 1847     		bx	r3	@ indirect register sibling call
 617              	.LVL49:
 618              	.L46:
 619 007e 00BF     		.align	2
 620              	.L45:
 621 0080 00200010 		.word	268443648
 622 0084 2D020008 		.word	134218285
 623 0088 B1020008 		.word	134218417
 624 008c 65020008 		.word	134218341
 625 0090 6D020008 		.word	134218349
 626 0094 00000000 		.word	.LC2
 627 0098 1C000000 		.word	.LC3
 628 009c 30000000 		.word	.LC4
 629 00a0 50000000 		.word	.LC5
 630 00a4 74000000 		.word	.LC6
 631 00a8 71020008 		.word	134218353
 632 00ac 98000000 		.word	.LC7
 633 00b0 31020008 		.word	134218289
 634 00b4 99030008 		.word	134218649
 635              		.cfi_endproc
 636              	.LFE5:
 638              		.section	.text.run_menu_item,"ax",%progbits
 639              		.align	1
 640              		.p2align 2,,3
 641              		.global	run_menu_item
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	run_menu_item:
 648              	.LVL50:
 649              	.LFB3:
  42:src/menu.c    ****   int ret = 0;
 650              		.loc 1 42 36 is_stmt 1 view -0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
  43:src/menu.c    **** 
 654              		.loc 1 43 3 view .LVU194
  45:src/menu.c    ****     case MI_ABOUT_PGM:
 655              		.loc 1 45 3 view .LVU195
 656 0000 0B28     		cmp	r0, #11
 657 0002 04D1     		bne	.L49
  47:src/menu.c    ****       break;
 658              		.loc 1 47 7 view .LVU196
  42:src/menu.c    ****   int ret = 0;
 659              		.loc 1 42 36 is_stmt 0 view .LVU197
ARM GAS  /tmp/ccp3OFc8.s 			page 25


 660 0004 08B5     		push	{r3, lr}
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 3, -8
 663              		.cfi_offset 14, -4
  47:src/menu.c    ****       break;
 664              		.loc 1 47 7 view .LVU198
 665 0006 FFF7FEFF 		bl	disp_about
 666              	.LVL51:
  48:src/menu.c    **** 
 667              		.loc 1 48 7 is_stmt 1 view .LVU199
  43:src/menu.c    **** 
 668              		.loc 1 43 7 is_stmt 0 view .LVU200
 669 000a 0020     		movs	r0, #0
  56:src/menu.c    **** 
 670              		.loc 1 56 1 view .LVU201
 671 000c 08BD     		pop	{r3, pc}
 672              	.LVL52:
 673              	.L49:
 674              		.cfi_def_cfa_offset 0
 675              		.cfi_restore 3
 676              		.cfi_restore 14
  51:src/menu.c    ****       break;
 677              		.loc 1 51 11 view .LVU202
 678 000e 4FF0FF30 		mov	r0, #-1
 679              	.LVL53:
  55:src/menu.c    **** }
 680              		.loc 1 55 3 is_stmt 1 view .LVU203
  56:src/menu.c    **** 
 681              		.loc 1 56 1 is_stmt 0 view .LVU204
 682 0012 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE3:
 686              		.section	.text.set_menu,"ax",%progbits
 687              		.align	1
 688              		.p2align 2,,3
 689              		.global	set_menu
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu fpv4-sp-d16
 695              	set_menu:
 696              	.LVL54:
 697              	.LFB6:
 108:src/menu.c    ****   menu_name m = current_menu;
 698              		.loc 1 108 38 is_stmt 1 view -0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 703              		.loc 1 109 3 view .LVU206
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 704              		.loc 1 109 13 is_stmt 0 view .LVU207
 705 0000 0A4A     		ldr	r2, .L66
 706 0002 92F90030 		ldrsb	r3, [r2]
 707              	.LVL55:
 110:src/menu.c    ****     current_menu = default_menu;
ARM GAS  /tmp/ccp3OFc8.s 			page 26


 708              		.loc 1 110 3 is_stmt 1 view .LVU208
 110:src/menu.c    ****     current_menu = default_menu;
 709              		.loc 1 110 6 is_stmt 0 view .LVU209
 710 0006 8342     		cmp	r3, r0
 711 0008 0CD0     		beq	.L65
 113:src/menu.c    ****     current_menu = last_menu;
 712              		.loc 1 113 8 is_stmt 1 view .LVU210
 113:src/menu.c    ****     current_menu = last_menu;
 713              		.loc 1 113 11 is_stmt 0 view .LVU211
 714 000a 411C     		adds	r1, r0, #1
 114:src/menu.c    ****   }
 715              		.loc 1 114 5 is_stmt 1 view .LVU212
 114:src/menu.c    ****   }
 716              		.loc 1 114 18 is_stmt 0 view .LVU213
 717 000c 09BF     		itett	eq
 718 000e 0849     		ldreq	r1, .L66+4
 117:src/menu.c    ****   }
 719              		.loc 1 117 18 view .LVU214
 720 0010 1070     		strbne	r0, [r2]
 114:src/menu.c    ****   }
 721              		.loc 1 114 18 view .LVU215
 722 0012 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 723 0014 1170     		strbeq	r1, [r2]
 117:src/menu.c    ****   }
 724              		.loc 1 117 5 is_stmt 1 view .LVU216
 725              	.L56:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 726              		.loc 1 119 3 view .LVU217
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 727              		.loc 1 119 6 is_stmt 0 view .LVU218
 728 0016 092B     		cmp	r3, #9
 729 0018 03D0     		beq	.L54
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 730              		.loc 1 119 23 discriminator 1 view .LVU219
 731 001a 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 732              		.loc 1 119 43 is_stmt 1 discriminator 1 view .LVU220
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 733              		.loc 1 119 53 is_stmt 0 discriminator 1 view .LVU221
 734 001c 1CBF     		itt	ne
 735 001e 044A     		ldrne	r2, .L66+4
 736 0020 1370     		strbne	r3, [r2]
 737              	.L54:
 121:src/menu.c    **** 
 738              		.loc 1 121 1 view .LVU222
 739 0022 7047     		bx	lr
 740              	.L65:
 111:src/menu.c    ****   }
 741              		.loc 1 111 5 is_stmt 1 view .LVU223
 111:src/menu.c    ****   }
 742              		.loc 1 111 18 is_stmt 0 view .LVU224
 743 0024 0349     		ldr	r1, .L66+8
 744 0026 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 745 0028 1170     		strb	r1, [r2]
 746 002a F4E7     		b	.L56
 747              	.L67:
 748              		.align	2
ARM GAS  /tmp/ccp3OFc8.s 			page 27


 749              	.L66:
 750 002c 00000000 		.word	.LANCHOR1
 751 0030 00000000 		.word	.LANCHOR3
 752 0034 00000000 		.word	.LANCHOR2
 753              		.cfi_endproc
 754              	.LFE6:
 756              		.section	.text.set_default_menu,"ax",%progbits
 757              		.align	1
 758              		.p2align 2,,3
 759              		.global	set_default_menu
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 763              		.fpu fpv4-sp-d16
 765              	set_default_menu:
 766              	.LFB7:
 123:src/menu.c    ****   set_menu (default_menu);
 767              		.loc 1 123 26 is_stmt 1 view -0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 124:src/menu.c    **** }
 772              		.loc 1 124 3 view .LVU226
 773 0000 0A4B     		ldr	r3, .L80
 774              	.LBB63:
 775              	.LBB64:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 776              		.loc 1 109 13 is_stmt 0 view .LVU227
 777 0002 0B49     		ldr	r1, .L80+4
 778              	.LBE64:
 779              	.LBE63:
 124:src/menu.c    **** }
 780              		.loc 1 124 3 view .LVU228
 781 0004 93F90020 		ldrsb	r2, [r3]
 782              	.LVL56:
 783              	.LBB67:
 784              	.LBI63:
 108:src/menu.c    ****   menu_name m = current_menu;
 785              		.loc 1 108 6 is_stmt 1 view .LVU229
 786              	.LBB65:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 787              		.loc 1 109 3 view .LVU230
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 788              		.loc 1 109 13 is_stmt 0 view .LVU231
 789 0008 91F90030 		ldrsb	r3, [r1]
 790              	.LVL57:
 110:src/menu.c    ****     current_menu = default_menu;
 791              		.loc 1 110 3 is_stmt 1 view .LVU232
 110:src/menu.c    ****     current_menu = default_menu;
 792              		.loc 1 110 6 is_stmt 0 view .LVU233
 793 000c 9A42     		cmp	r2, r3
 794 000e 0BD0     		beq	.L79
 113:src/menu.c    ****     current_menu = last_menu;
 795              		.loc 1 113 8 is_stmt 1 view .LVU234
 113:src/menu.c    ****     current_menu = last_menu;
 796              		.loc 1 113 11 is_stmt 0 view .LVU235
ARM GAS  /tmp/ccp3OFc8.s 			page 28


 797 0010 501C     		adds	r0, r2, #1
 114:src/menu.c    ****   }
 798              		.loc 1 114 5 is_stmt 1 view .LVU236
 114:src/menu.c    ****   }
 799              		.loc 1 114 18 is_stmt 0 view .LVU237
 800 0012 04BF     		itt	eq
 801 0014 074A     		ldreq	r2, .L80+8
 802              	.LVL58:
 114:src/menu.c    ****   }
 803              		.loc 1 114 18 view .LVU238
 804 0016 1278     		ldrbeq	r2, [r2]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 805              		.loc 1 117 5 is_stmt 1 view .LVU239
 117:src/menu.c    ****   }
 806              		.loc 1 117 18 is_stmt 0 view .LVU240
 807 0018 0A70     		strb	r2, [r1]
 808              	.LVL59:
 809              	.L70:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 810              		.loc 1 119 3 is_stmt 1 view .LVU241
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 811              		.loc 1 119 6 is_stmt 0 view .LVU242
 812 001a 092B     		cmp	r3, #9
 813 001c 03D0     		beq	.L68
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 814              		.loc 1 119 23 view .LVU243
 815 001e 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 816              		.loc 1 119 43 is_stmt 1 view .LVU244
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 817              		.loc 1 119 53 is_stmt 0 view .LVU245
 818 0020 1CBF     		itt	ne
 819 0022 044A     		ldrne	r2, .L80+8
 820 0024 1370     		strbne	r3, [r2]
 821              	.LVL60:
 822              	.L68:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 823              		.loc 1 119 53 view .LVU246
 824              	.LBE65:
 825              	.LBE67:
 125:src/menu.c    **** 
 826              		.loc 1 125 1 view .LVU247
 827 0026 7047     		bx	lr
 828              	.LVL61:
 829              	.L79:
 830              	.LBB68:
 831              	.LBB66:
 111:src/menu.c    ****   }
 832              		.loc 1 111 5 is_stmt 1 view .LVU248
 111:src/menu.c    ****   }
 833              		.loc 1 111 18 is_stmt 0 view .LVU249
 834 0028 0B70     		strb	r3, [r1]
 835 002a F6E7     		b	.L70
 836              	.L81:
 837              		.align	2
 838              	.L80:
 839 002c 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/ccp3OFc8.s 			page 29


 840 0030 00000000 		.word	.LANCHOR1
 841 0034 00000000 		.word	.LANCHOR3
 842              	.LBE66:
 843              	.LBE68:
 844              		.cfi_endproc
 845              	.LFE7:
 847              		.section	.text.toggle_default_menu,"ax",%progbits
 848              		.align	1
 849              		.p2align 2,,3
 850              		.global	toggle_default_menu
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 854              		.fpu fpv4-sp-d16
 856              	toggle_default_menu:
 857              	.LFB8:
 127:src/menu.c    ****   if (current_menu == M_Blank) {
 858              		.loc 1 127 29 is_stmt 1 view -0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 0
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862              		@ link register save eliminated.
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 863              		.loc 1 128 3 view .LVU251
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 864              		.loc 1 128 20 is_stmt 0 view .LVU252
 865 0000 104A     		ldr	r2, .L98
 129:src/menu.c    ****     return;
 866              		.loc 1 129 33 view .LVU253
 867 0002 1149     		ldr	r1, .L98+4
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 868              		.loc 1 128 20 view .LVU254
 869 0004 92F90030 		ldrsb	r3, [r2]
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 870              		.loc 1 128 6 view .LVU255
 871 0008 ABB1     		cbz	r3, .L95
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 872              		.loc 1 132 8 is_stmt 1 view .LVU256
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 873              		.loc 1 132 11 is_stmt 0 view .LVU257
 874 000a 0F2B     		cmp	r3, #15
 875 000c 0FD0     		beq	.L96
 136:src/menu.c    ****   }
 876              		.loc 1 136 5 is_stmt 1 view .LVU258
 877              	.LBB69:
 878              	.LBI69:
 123:src/menu.c    ****   set_menu (default_menu);
 879              		.loc 1 123 6 view .LVU259
 880              	.LBB70:
 124:src/menu.c    **** }
 881              		.loc 1 124 3 view .LVU260
 882 000e 91F90010 		ldrsb	r1, [r1]
 883              	.LVL62:
 884              	.LBB71:
 885              	.LBI71:
 108:src/menu.c    ****   menu_name m = current_menu;
 886              		.loc 1 108 6 view .LVU261
ARM GAS  /tmp/ccp3OFc8.s 			page 30


 887              	.LBB72:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 888              		.loc 1 109 3 view .LVU262
 110:src/menu.c    ****     current_menu = default_menu;
 889              		.loc 1 110 3 view .LVU263
 110:src/menu.c    ****     current_menu = default_menu;
 890              		.loc 1 110 6 is_stmt 0 view .LVU264
 891 0012 8B42     		cmp	r3, r1
 892 0014 13D0     		beq	.L97
 113:src/menu.c    ****     current_menu = last_menu;
 893              		.loc 1 113 8 is_stmt 1 view .LVU265
 113:src/menu.c    ****     current_menu = last_menu;
 894              		.loc 1 113 11 is_stmt 0 view .LVU266
 895 0016 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 896              		.loc 1 114 5 is_stmt 1 view .LVU267
 114:src/menu.c    ****   }
 897              		.loc 1 114 18 is_stmt 0 view .LVU268
 898 0018 04BF     		itt	eq
 899 001a 0C49     		ldreq	r1, .L98+8
 900              	.LVL63:
 114:src/menu.c    ****   }
 901              		.loc 1 114 18 view .LVU269
 902 001c 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 903              		.loc 1 117 5 is_stmt 1 view .LVU270
 117:src/menu.c    ****   }
 904              		.loc 1 117 18 is_stmt 0 view .LVU271
 905 001e 1170     		strb	r1, [r2]
 906              	.LVL64:
 907              	.L87:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 908              		.loc 1 119 3 is_stmt 1 view .LVU272
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 909              		.loc 1 119 6 is_stmt 0 view .LVU273
 910 0020 092B     		cmp	r3, #9
 911 0022 03D0     		beq	.L82
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 912              		.loc 1 119 23 view .LVU274
 913 0024 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 914              		.loc 1 119 43 is_stmt 1 view .LVU275
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 915              		.loc 1 119 53 is_stmt 0 view .LVU276
 916 0026 1CBF     		itt	ne
 917 0028 084A     		ldrne	r2, .L98+8
 918 002a 1370     		strbne	r3, [r2]
 919              	.LVL65:
 920              	.L82:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 921              		.loc 1 119 53 view .LVU277
 922              	.LBE72:
 923              	.LBE71:
 924              	.LBE70:
 925              	.LBE69:
 138:src/menu.c    **** 
 926              		.loc 1 138 1 view .LVU278
ARM GAS  /tmp/ccp3OFc8.s 			page 31


 927 002c 7047     		bx	lr
 928              	.L96:
 133:src/menu.c    ****   }
 929              		.loc 1 133 5 is_stmt 1 view .LVU279
 133:src/menu.c    ****   }
 930              		.loc 1 133 33 is_stmt 0 view .LVU280
 931 002e 0023     		movs	r3, #0
 932 0030 0B70     		strb	r3, [r1]
 133:src/menu.c    ****   }
 933              		.loc 1 133 18 view .LVU281
 934 0032 1370     		strb	r3, [r2]
 935 0034 7047     		bx	lr
 936              	.L95:
 129:src/menu.c    ****     return;
 937              		.loc 1 129 5 is_stmt 1 view .LVU282
 129:src/menu.c    ****     return;
 938              		.loc 1 129 33 is_stmt 0 view .LVU283
 939 0036 0F23     		movs	r3, #15
 940 0038 0B70     		strb	r3, [r1]
 129:src/menu.c    ****     return;
 941              		.loc 1 129 18 view .LVU284
 942 003a 1370     		strb	r3, [r2]
 130:src/menu.c    ****   }
 943              		.loc 1 130 5 is_stmt 1 view .LVU285
 944 003c 7047     		bx	lr
 945              	.LVL66:
 946              	.L97:
 947              	.LBB76:
 948              	.LBB75:
 949              	.LBB74:
 950              	.LBB73:
 111:src/menu.c    ****   }
 951              		.loc 1 111 5 view .LVU286
 111:src/menu.c    ****   }
 952              		.loc 1 111 18 is_stmt 0 view .LVU287
 953 003e 1370     		strb	r3, [r2]
 954 0040 EEE7     		b	.L87
 955              	.L99:
 956 0042 00BF     		.align	2
 957              	.L98:
 958 0044 00000000 		.word	.LANCHOR1
 959 0048 00000000 		.word	.LANCHOR2
 960 004c 00000000 		.word	.LANCHOR3
 961              	.LBE73:
 962              	.LBE74:
 963              	.LBE75:
 964              	.LBE76:
 965              		.cfi_endproc
 966              	.LFE8:
 968              		.section	.text.get_menu,"ax",%progbits
 969              		.align	1
 970              		.p2align 2,,3
 971              		.global	get_menu
 972              		.syntax unified
 973              		.thumb
 974              		.thumb_func
 975              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccp3OFc8.s 			page 32


 977              	get_menu:
 978              	.LFB9:
 140:src/menu.c    ****   return current_menu;
 979              		.loc 1 140 23 is_stmt 1 view -0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 0
 982              		@ frame_needed = 0, uses_anonymous_args = 0
 983              		@ link register save eliminated.
 141:src/menu.c    **** }
 984              		.loc 1 141 3 view .LVU289
 141:src/menu.c    **** }
 985              		.loc 1 141 10 is_stmt 0 view .LVU290
 986 0000 014B     		ldr	r3, .L101
 142:src/menu.c    **** 
 987              		.loc 1 142 1 view .LVU291
 988 0002 93F90000 		ldrsb	r0, [r3]
 989 0006 7047     		bx	lr
 990              	.L102:
 991              		.align	2
 992              	.L101:
 993 0008 00000000 		.word	.LANCHOR1
 994              		.cfi_endproc
 995              	.LFE9:
 997              		.section	.text.get_last_menu,"ax",%progbits
 998              		.align	1
 999              		.p2align 2,,3
 1000              		.global	get_last_menu
 1001              		.syntax unified
 1002              		.thumb
 1003              		.thumb_func
 1004              		.fpu fpv4-sp-d16
 1006              	get_last_menu:
 1007              	.LFB10:
 144:src/menu.c    ****   return last_menu;
 1008              		.loc 1 144 28 is_stmt 1 view -0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 0
 1011              		@ frame_needed = 0, uses_anonymous_args = 0
 1012              		@ link register save eliminated.
 145:src/menu.c    **** }
 1013              		.loc 1 145 3 view .LVU293
 145:src/menu.c    **** }
 1014              		.loc 1 145 10 is_stmt 0 view .LVU294
 1015 0000 014B     		ldr	r3, .L104
 146:src/menu.c    **** 
 1016              		.loc 1 146 1 view .LVU295
 1017 0002 93F90000 		ldrsb	r0, [r3]
 1018 0006 7047     		bx	lr
 1019              	.L105:
 1020              		.align	2
 1021              	.L104:
 1022 0008 00000000 		.word	.LANCHOR3
 1023              		.cfi_endproc
 1024              	.LFE10:
 1026              		.section	.text.set_last_menu,"ax",%progbits
 1027              		.align	1
 1028              		.p2align 2,,3
ARM GAS  /tmp/ccp3OFc8.s 			page 33


 1029              		.global	set_last_menu
 1030              		.syntax unified
 1031              		.thumb
 1032              		.thumb_func
 1033              		.fpu fpv4-sp-d16
 1035              	set_last_menu:
 1036              	.LFB12:
 152:src/menu.c    ****   set_menu (M_Last);
 1037              		.loc 1 152 23 is_stmt 1 view -0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 0
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041              		@ link register save eliminated.
 153:src/menu.c    **** }
 1042              		.loc 1 153 3 view .LVU297
 1043              	.LVL67:
 1044              	.LBB77:
 1045              	.LBI77:
 108:src/menu.c    ****   menu_name m = current_menu;
 1046              		.loc 1 108 6 view .LVU298
 1047              	.LBB78:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1048              		.loc 1 109 3 view .LVU299
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1049              		.loc 1 109 13 is_stmt 0 view .LVU300
 1050 0000 0A4A     		ldr	r2, .L119
 1051 0002 92F90030 		ldrsb	r3, [r2]
 1052              	.LVL68:
 110:src/menu.c    ****     current_menu = default_menu;
 1053              		.loc 1 110 3 is_stmt 1 view .LVU301
 110:src/menu.c    ****     current_menu = default_menu;
 1054              		.loc 1 110 6 is_stmt 0 view .LVU302
 1055 0006 591C     		adds	r1, r3, #1
 1056 0008 09D0     		beq	.L116
 113:src/menu.c    ****     current_menu = last_menu;
 1057              		.loc 1 113 8 is_stmt 1 view .LVU303
 114:src/menu.c    ****   }
 1058              		.loc 1 114 5 view .LVU304
 114:src/menu.c    ****   }
 1059              		.loc 1 114 18 is_stmt 0 view .LVU305
 1060 000a 0949     		ldr	r1, .L119+4
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1061              		.loc 1 119 6 view .LVU306
 1062 000c 092B     		cmp	r3, #9
 114:src/menu.c    ****   }
 1063              		.loc 1 114 18 view .LVU307
 1064 000e 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1065 0010 1070     		strb	r0, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1066              		.loc 1 119 3 is_stmt 1 view .LVU308
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1067              		.loc 1 119 6 is_stmt 0 view .LVU309
 1068 0012 00D1     		bne	.L117
 1069              	.L106:
 1070              	.LBE78:
 1071              	.LBE77:
 154:src/menu.c    **** 
ARM GAS  /tmp/ccp3OFc8.s 			page 34


 1072              		.loc 1 154 1 view .LVU310
 1073 0014 7047     		bx	lr
 1074              	.L117:
 1075              	.LBB81:
 1076              	.LBB79:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1077              		.loc 1 119 23 view .LVU311
 1078 0016 102B     		cmp	r3, #16
 1079 0018 FCD0     		beq	.L106
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1080              		.loc 1 119 43 is_stmt 1 view .LVU312
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1081              		.loc 1 119 53 is_stmt 0 view .LVU313
 1082 001a 0B70     		strb	r3, [r1]
 1083              	.LVL69:
 1084              	.L118:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1085              		.loc 1 119 53 view .LVU314
 1086              	.LBE79:
 1087              	.LBE81:
 154:src/menu.c    **** 
 1088              		.loc 1 154 1 view .LVU315
 1089 001c 7047     		bx	lr
 1090              	.LVL70:
 1091              	.L116:
 1092              	.LBB82:
 1093              	.LBB80:
 111:src/menu.c    ****   }
 1094              		.loc 1 111 5 is_stmt 1 view .LVU316
 111:src/menu.c    ****   }
 1095              		.loc 1 111 18 is_stmt 0 view .LVU317
 1096 001e 0548     		ldr	r0, .L119+8
 1097 0020 0349     		ldr	r1, .L119+4
 1098 0022 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1099 0024 1070     		strb	r0, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1100              		.loc 1 119 3 is_stmt 1 view .LVU318
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1101              		.loc 1 119 43 view .LVU319
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1102              		.loc 1 119 53 is_stmt 0 view .LVU320
 1103 0026 0B70     		strb	r3, [r1]
 1104              	.LVL71:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1105              		.loc 1 119 53 view .LVU321
 1106 0028 F8E7     		b	.L118
 1107              	.L120:
 1108 002a 00BF     		.align	2
 1109              	.L119:
 1110 002c 00000000 		.word	.LANCHOR1
 1111 0030 00000000 		.word	.LANCHOR3
 1112 0034 00000000 		.word	.LANCHOR2
 1113              	.LBE80:
 1114              	.LBE82:
 1115              		.cfi_endproc
 1116              	.LFE12:
 1118              		.section	.text.mdot,"ax",%progbits
ARM GAS  /tmp/ccp3OFc8.s 			page 35


 1119              		.align	1
 1120              		.p2align 2,,3
 1121              		.global	mdot
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu fpv4-sp-d16
 1127              	mdot:
 1128              	.LVL72:
 1129              	.LFB14:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1130              		.loc 1 536 40 is_stmt 1 view -0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 1134              		@ link register save eliminated.
 537:src/menu.c    ****   if (on) {
 1135              		.loc 1 537 3 view .LVU323
 537:src/menu.c    ****   if (on) {
 1136              		.loc 1 537 6 is_stmt 0 view .LVU324
 1137 0000 C728     		cmp	r0, #199
 1138 0002 1AD8     		bhi	.L125
 1139              	.LVL73:
 1140              	.LBB85:
 1141              	.LBI85:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1142              		.loc 1 536 6 is_stmt 1 view .LVU325
 1143              	.LBB86:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1144              		.loc 1 538 3 view .LVU326
 1145              	.LBE86:
 1146              	.LBE85:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1147              		.loc 1 536 40 is_stmt 0 view .LVU327
 1148 0004 10B4     		push	{r4}
 1149              		.cfi_def_cfa_offset 4
 1150              		.cfi_offset 4, -4
 1151              	.LBB89:
 1152              	.LBB87:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1153              		.loc 1 538 6 view .LVU328
 1154 0006 63B9     		cbnz	r3, .L128
 1155              		.loc 1 542 5 is_stmt 1 view .LVU329
 1156              		.loc 1 542 17 is_stmt 0 view .LVU330
 1157 0008 0C4B     		ldr	r3, .L129
 1158              	.LVL74:
 1159              		.loc 1 542 17 view .LVU331
 1160 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1161              	.LVL75:
 1162              		.loc 1 542 25 view .LVU332
 1163 000e 0124     		movs	r4, #1
 1164              		.loc 1 542 17 view .LVU333
 1165 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1166              		.loc 1 542 25 view .LVU334
 1167 0012 04FA01F1 		lsl	r1, r4, r1
 1168              	.LVL76:
 1169              		.loc 1 542 17 view .LVU335
ARM GAS  /tmp/ccp3OFc8.s 			page 36


 1170 0016 23EA0101 		bic	r1, r3, r1
 1171 001a 8154     		strb	r1, [r0, r2]
 1172              	.LVL77:
 1173              		.loc 1 542 17 view .LVU336
 1174              	.LBE87:
 1175              	.LBE89:
 543:src/menu.c    ****   }
 544:src/menu.c    **** }
 1176              		.loc 1 544 1 view .LVU337
 1177 001c 5DF8044B 		ldr	r4, [sp], #4
 1178              		.cfi_remember_state
 1179              		.cfi_restore 4
 1180              		.cfi_def_cfa_offset 0
 1181 0020 7047     		bx	lr
 1182              	.LVL78:
 1183              	.L128:
 1184              		.cfi_restore_state
 1185              	.LBB90:
 1186              	.LBB88:
 539:src/menu.c    ****   }
 1187              		.loc 1 539 5 is_stmt 1 view .LVU338
 539:src/menu.c    ****   }
 1188              		.loc 1 539 17 is_stmt 0 view .LVU339
 1189 0022 064B     		ldr	r3, .L129
 1190              	.LVL79:
 539:src/menu.c    ****   }
 1191              		.loc 1 539 17 view .LVU340
 1192 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1193              	.LVL80:
 539:src/menu.c    ****   }
 1194              		.loc 1 539 24 view .LVU341
 1195 0028 0124     		movs	r4, #1
 539:src/menu.c    ****   }
 1196              		.loc 1 539 17 view .LVU342
 1197 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 539:src/menu.c    ****   }
 1198              		.loc 1 539 24 view .LVU343
 1199 002c 04FA01F1 		lsl	r1, r4, r1
 1200              	.LVL81:
 539:src/menu.c    ****   }
 1201              		.loc 1 539 17 view .LVU344
 1202 0030 1943     		orrs	r1, r1, r3
 1203 0032 8154     		strb	r1, [r0, r2]
 1204              	.LBE88:
 1205              	.LBE90:
 1206              		.loc 1 544 1 view .LVU345
 1207 0034 5DF8044B 		ldr	r4, [sp], #4
 1208              		.cfi_restore 4
 1209              		.cfi_def_cfa_offset 0
 1210 0038 7047     		bx	lr
 1211              	.LVL82:
 1212              	.L125:
 1213              		.loc 1 544 1 view .LVU346
 1214 003a 7047     		bx	lr
 1215              	.L130:
 1216              		.align	2
 1217              	.L129:
ARM GAS  /tmp/ccp3OFc8.s 			page 37


 1218 003c 00000000 		.word	.LANCHOR0
 1219              		.cfi_endproc
 1220              	.LFE14:
 1222              		.section	.text.get_current_menu_ref,"ax",%progbits
 1223              		.align	1
 1224              		.p2align 2,,3
 1225              		.global	get_current_menu_ref
 1226              		.syntax unified
 1227              		.thumb
 1228              		.thumb_func
 1229              		.fpu fpv4-sp-d16
 1231              	get_current_menu_ref:
 1232              	.LVL83:
 1233              	.LFB15:
 545:src/menu.c    **** 
 546:src/menu.c    **** struct _menu get_current_menu_ref() {
 1234              		.loc 1 546 37 is_stmt 1 view -0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 0
 1237              		@ frame_needed = 0, uses_anonymous_args = 0
 547:src/menu.c    ****   int i = current_menu;
 1238              		.loc 1 547 3 view .LVU348
 546:src/menu.c    ****   int i = current_menu;
 1239              		.loc 1 546 37 is_stmt 0 view .LVU349
 1240 0000 08B5     		push	{r3, lr}
 1241              		.cfi_def_cfa_offset 8
 1242              		.cfi_offset 3, -8
 1243              		.cfi_offset 14, -4
 548:src/menu.c    ****   if (C_LOCKED)
 1244              		.loc 1 548 7 view .LVU350
 1245 0002 294B     		ldr	r3, .L147
 547:src/menu.c    ****   int i = current_menu;
 1246              		.loc 1 547 7 view .LVU351
 1247 0004 294A     		ldr	r2, .L147+4
 1248              		.loc 1 548 7 view .LVU352
 1249 0006 1B68     		ldr	r3, [r3]
 547:src/menu.c    ****   int i = current_menu;
 1250              		.loc 1 547 7 view .LVU353
 1251 0008 92F90010 		ldrsb	r1, [r2]
 1252              	.LVL84:
 1253              		.loc 1 548 3 is_stmt 1 view .LVU354
 1254              		.loc 1 548 7 is_stmt 0 view .LVU355
 1255 000c 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 1256              		.loc 1 548 6 view .LVU356
 1257 0010 03F04102 		and	r2, r3, #65
 1258 0014 412A     		cmp	r2, #65
 546:src/menu.c    ****   int i = current_menu;
 1259              		.loc 1 546 37 view .LVU357
 1260 0016 0346     		mov	r3, r0
 1261              		.loc 1 548 6 view .LVU358
 1262 0018 0BD0     		beq	.L145
 1263              	.LVL85:
 1264              	.L132:
 549:src/menu.c    ****     switch (current_menu) {
 550:src/menu.c    ****     case (M_Clear):
 551:src/menu.c    ****       i = M_Clear_C;
 552:src/menu.c    ****       break;
ARM GAS  /tmp/ccp3OFc8.s 			page 38


 553:src/menu.c    ****     case (M_Swap):
 554:src/menu.c    ****       i = M_Swap_C;
 555:src/menu.c    ****       break;
 556:src/menu.c    ****     case (M_Arrow):
 557:src/menu.c    ****       i = M_Arrow_C;
 558:src/menu.c    ****       break;
 559:src/menu.c    ****     case (M_Prob):
 560:src/menu.c    ****       i = M_Prob_C;
 561:src/menu.c    ****       break;
 562:src/menu.c    ****     case (M_Blank2):
 563:src/menu.c    ****       i = M_Blank2_C;
 564:src/menu.c    ****       break;
 565:src/menu.c    ****     case (M_Misc):
 566:src/menu.c    ****       i = M_Misc_C;
 567:src/menu.c    ****       break;
 568:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 569:src/menu.c    ****     case (M_Flags):// so don't display them.
 570:src/menu.c    ****     case (M_Stats):
 571:src/menu.c    ****     case (M_Setup2):
 572:src/menu.c    ****     case (M_Solve):
 573:src/menu.c    ****     case (M_Program):
 574:src/menu.c    ****       i = M_C_Lock;
 575:src/menu.c    ****     default:;
 1265              		.loc 1 575 13 is_stmt 1 view .LVU359
 576:src/menu.c    ****     }
 577:src/menu.c    ****   if (current_menu == M_User) {
 1266              		.loc 1 577 3 view .LVU360
 1267              		.loc 1 577 6 is_stmt 0 view .LVU361
 1268 001a 6329     		cmp	r1, #99
 1269 001c 32D0     		beq	.L146
 1270              	.LVL86:
 1271              	.L137:
 578:src/menu.c    ****     return UserMenu;
 579:src/menu.c    ****   }
 580:src/menu.c    ****   else {
 581:src/menu.c    ****     return Menus[i];
 1272              		.loc 1 581 5 is_stmt 1 view .LVU362
 1273              		.loc 1 581 17 is_stmt 0 view .LVU363
 1274 001e 2448     		ldr	r0, .L147+8
 1275 0020 D022     		movs	r2, #208
 1276 0022 02FB0101 		mla	r1, r2, r1, r0
 1277              	.LVL87:
 1278              		.loc 1 581 17 view .LVU364
 1279 0026 1846     		mov	r0, r3
 1280 0028 FFF7FEFF 		bl	memcpy
 1281              	.LVL88:
 1282              		.loc 1 581 17 view .LVU365
 1283 002c 0346     		mov	r3, r0
 582:src/menu.c    ****   }
 583:src/menu.c    **** }
 1284              		.loc 1 583 1 view .LVU366
 1285 002e 1846     		mov	r0, r3
 1286 0030 08BD     		pop	{r3, pc}
 1287              	.LVL89:
 1288              	.L145:
 549:src/menu.c    ****     case (M_Clear):
 1289              		.loc 1 549 5 is_stmt 1 view .LVU367
ARM GAS  /tmp/ccp3OFc8.s 			page 39


 1290 0032 4A1E     		subs	r2, r1, #1
 1291 0034 0E2A     		cmp	r2, #14
 1292 0036 F0D8     		bhi	.L132
 1293 0038 01A0     		adr	r0, .L134
 1294 003a 50F822F0 		ldr	pc, [r0, r2, lsl #2]
 1295              	.LVL90:
 1296 003e 00BF     		.p2align 2
 1297              	.L134:
 1298 0040 A5000000 		.word	.L140+1
 1299 0044 1B000000 		.word	.L132+1
 1300 0048 A1000000 		.word	.L135+1
 1301 004c 1B000000 		.word	.L132+1
 1302 0050 9D000000 		.word	.L139+1
 1303 0054 81000000 		.word	.L138+1
 1304 0058 A1000000 		.word	.L135+1
 1305 005c 1B000000 		.word	.L132+1
 1306 0060 7D000000 		.word	.L143+1
 1307 0064 A1000000 		.word	.L135+1
 1308 0068 99000000 		.word	.L136+1
 1309 006c A1000000 		.word	.L135+1
 1310 0070 A1000000 		.word	.L135+1
 1311 0074 A1000000 		.word	.L135+1
 1312 0078 95000000 		.word	.L133+1
 1313              		.p2align 1
 1314              	.L143:
 557:src/menu.c    ****       break;
 1315              		.loc 1 557 9 is_stmt 0 view .LVU368
 1316 007c 1421     		movs	r1, #20
 1317              	.LVL91:
 557:src/menu.c    ****       break;
 1318              		.loc 1 557 9 view .LVU369
 1319 007e CEE7     		b	.L137
 1320              	.LVL92:
 1321              	.L138:
 548:src/menu.c    ****     switch (current_menu) {
 1322              		.loc 1 548 6 view .LVU370
 1323 0080 1321     		movs	r1, #19
 1324              	.LVL93:
 548:src/menu.c    ****     switch (current_menu) {
 1325              		.loc 1 548 6 view .LVU371
 1326 0082 CCE7     		b	.L137
 1327              	.LVL94:
 1328              	.L146:
 578:src/menu.c    ****   }
 1329              		.loc 1 578 5 is_stmt 1 view .LVU372
 578:src/menu.c    ****   }
 1330              		.loc 1 578 12 is_stmt 0 view .LVU373
 1331 0084 0B49     		ldr	r1, .L147+12
 1332              	.LVL95:
 578:src/menu.c    ****   }
 1333              		.loc 1 578 12 view .LVU374
 1334 0086 D022     		movs	r2, #208
 1335 0088 1846     		mov	r0, r3
 1336 008a FFF7FEFF 		bl	memcpy
 1337              	.LVL96:
 578:src/menu.c    ****   }
 1338              		.loc 1 578 12 view .LVU375
ARM GAS  /tmp/ccp3OFc8.s 			page 40


 1339 008e 0346     		mov	r3, r0
 1340              		.loc 1 583 1 view .LVU376
 1341 0090 1846     		mov	r0, r3
 1342 0092 08BD     		pop	{r3, pc}
 1343              	.LVL97:
 1344              	.L133:
 563:src/menu.c    ****       break;
 1345              		.loc 1 563 7 is_stmt 1 view .LVU377
 564:src/menu.c    ****     case (M_Misc):
 1346              		.loc 1 564 7 view .LVU378
 563:src/menu.c    ****       break;
 1347              		.loc 1 563 9 is_stmt 0 view .LVU379
 1348 0094 1621     		movs	r1, #22
 564:src/menu.c    ****     case (M_Misc):
 1349              		.loc 1 564 7 view .LVU380
 1350 0096 C2E7     		b	.L137
 1351              	.LVL98:
 1352              	.L136:
 560:src/menu.c    ****       break;
 1353              		.loc 1 560 7 is_stmt 1 view .LVU381
 561:src/menu.c    ****     case (M_Blank2):
 1354              		.loc 1 561 7 view .LVU382
 560:src/menu.c    ****       break;
 1355              		.loc 1 560 9 is_stmt 0 view .LVU383
 1356 0098 1521     		movs	r1, #21
 561:src/menu.c    ****     case (M_Blank2):
 1357              		.loc 1 561 7 view .LVU384
 1358 009a C0E7     		b	.L137
 1359              	.LVL99:
 1360              	.L139:
 566:src/menu.c    ****       break;
 1361              		.loc 1 566 7 is_stmt 1 view .LVU385
 567:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1362              		.loc 1 567 7 view .LVU386
 566:src/menu.c    ****       break;
 1363              		.loc 1 566 9 is_stmt 0 view .LVU387
 1364 009c 1721     		movs	r1, #23
 567:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1365              		.loc 1 567 7 view .LVU388
 1366 009e BEE7     		b	.L137
 1367              	.LVL100:
 1368              	.L135:
 574:src/menu.c    ****     default:;
 1369              		.loc 1 574 7 is_stmt 1 view .LVU389
 574:src/menu.c    ****     default:;
 1370              		.loc 1 574 9 is_stmt 0 view .LVU390
 1371 00a0 1121     		movs	r1, #17
 1372 00a2 BCE7     		b	.L137
 1373              	.LVL101:
 1374              	.L140:
 551:src/menu.c    ****       break;
 1375              		.loc 1 551 9 view .LVU391
 1376 00a4 1221     		movs	r1, #18
 1377              	.LVL102:
 551:src/menu.c    ****       break;
 1378              		.loc 1 551 9 view .LVU392
 1379 00a6 BAE7     		b	.L137
ARM GAS  /tmp/ccp3OFc8.s 			page 41


 1380              	.L148:
 1381              		.align	2
 1382              	.L147:
 1383 00a8 00000000 		.word	main_ram
 1384 00ac 00000000 		.word	.LANCHOR1
 1385 00b0 00000000 		.word	Menus
 1386 00b4 00000000 		.word	.LANCHOR4
 1387              		.cfi_endproc
 1388              	.LFE15:
 1390              		.section	.text.display_menu,"ax",%progbits
 1391              		.align	1
 1392              		.p2align 2,,3
 1393              		.global	display_menu
 1394              		.syntax unified
 1395              		.thumb
 1396              		.thumb_func
 1397              		.fpu fpv4-sp-d16
 1399              	display_menu:
 1400              	.LFB16:
 584:src/menu.c    **** 
 585:src/menu.c    **** void display_menu (struct _menu Ref) {
 1401              		.loc 1 585 38 is_stmt 1 view -0
 1402              		.cfi_startproc
 1403              		@ args = 208, pretend = 16, frame = 0
 1404              		@ frame_needed = 0, uses_anonymous_args = 0
 586:src/menu.c    ****   int len = 0;
 1405              		.loc 1 586 3 view .LVU394
 1406              	.LVL103:
 587:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1407              		.loc 1 587 3 view .LVU395
 585:src/menu.c    ****   int len = 0;
 1408              		.loc 1 585 38 is_stmt 0 view .LVU396
 1409 0000 84B0     		sub	sp, sp, #16
 1410              		.cfi_def_cfa_offset 16
 1411 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1412              		.cfi_def_cfa_offset 52
 1413              		.cfi_offset 4, -52
 1414              		.cfi_offset 5, -48
 1415              		.cfi_offset 6, -44
 1416              		.cfi_offset 7, -40
 1417              		.cfi_offset 8, -36
 1418              		.cfi_offset 9, -32
 1419              		.cfi_offset 10, -28
 1420              		.cfi_offset 11, -24
 1421              		.cfi_offset 14, -20
 1422 0006 83B0     		sub	sp, sp, #12
 1423              		.cfi_def_cfa_offset 64
 1424              		.loc 1 587 3 view .LVU397
 1425 0008 0024     		movs	r4, #0
 585:src/menu.c    ****   int len = 0;
 1426              		.loc 1 585 38 view .LVU398
 1427 000a 0CAD     		add	r5, sp, #48
 1428 000c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1429              		.loc 1 587 3 view .LVU399
 1430 0010 3E4E     		ldr	r6, .L167
 1431 0012 0094     		str	r4, [sp]
 1432 0014 2046     		mov	r0, r4
ARM GAS  /tmp/ccp3OFc8.s 			page 42


 1433 0016 3423     		movs	r3, #52
 1434 0018 4FF4C872 		mov	r2, #400
 1435 001c BC21     		movs	r1, #188
 1436 001e B047     		blx	r6
 1437              	.LVL104:
 588:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1438              		.loc 1 588 3 is_stmt 1 view .LVU400
 1439 0020 3B4D     		ldr	r5, .L167+4
 1440 0022 FF23     		movs	r3, #255
 1441 0024 0093     		str	r3, [sp]
 1442 0026 4FF4C872 		mov	r2, #400
 1443 002a 0123     		movs	r3, #1
 1444 002c BC21     		movs	r1, #188
 1445 002e 2046     		mov	r0, r4
 1446 0030 B047     		blx	r6
 1447              	.LVL105:
 589:src/menu.c    ****   //Clear previous menu
 590:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1448              		.loc 1 590 3 view .LVU401
 1449              	.LBB91:
 1450              		.loc 1 590 8 view .LVU402
 1451              		.loc 1 590 21 view .LVU403
 591:src/menu.c    ****     mdots[col][0] = 0;
 1452              		.loc 1 591 19 is_stmt 0 view .LVU404
 1453 0032 2246     		mov	r2, r4
 1454 0034 05F5C871 		add	r1, r5, #400
 1455              	.LBE91:
 588:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1456              		.loc 1 588 3 view .LVU405
 1457 0038 2B46     		mov	r3, r5
 1458              	.LVL106:
 1459              	.L150:
 1460              	.LBB92:
 1461              		.loc 1 591 5 is_stmt 1 discriminator 3 view .LVU406
 1462              		.loc 1 591 19 is_stmt 0 discriminator 3 view .LVU407
 1463 003a 1A70     		strb	r2, [r3]
 592:src/menu.c    ****     mdots[col][1] = 0;
 1464              		.loc 1 592 5 is_stmt 1 discriminator 3 view .LVU408
 1465              		.loc 1 592 19 is_stmt 0 discriminator 3 view .LVU409
 1466 003c 5A70     		strb	r2, [r3, #1]
 590:src/menu.c    ****     mdots[col][0] = 0;
 1467              		.loc 1 590 32 is_stmt 1 discriminator 3 view .LVU410
 590:src/menu.c    ****     mdots[col][0] = 0;
 1468              		.loc 1 590 21 discriminator 3 view .LVU411
 1469 003e 0233     		adds	r3, r3, #2
 590:src/menu.c    ****     mdots[col][0] = 0;
 1470              		.loc 1 590 3 is_stmt 0 discriminator 3 view .LVU412
 1471 0040 9942     		cmp	r1, r3
 1472 0042 FAD1     		bne	.L150
 1473 0044 14AE     		add	r6, sp, #80
 590:src/menu.c    ****     mdots[col][0] = 0;
 1474              		.loc 1 590 3 view .LVU413
 1475 0046 0024     		movs	r4, #0
 1476              	.LVL107:
 1477              	.L151:
 590:src/menu.c    ****     mdots[col][0] = 0;
 1478              		.loc 1 590 3 view .LVU414
ARM GAS  /tmp/ccp3OFc8.s 			page 43


 1479              	.LBE92:
 1480              	.LBB93:
 593:src/menu.c    ****   }
 594:src/menu.c    **** 
 595:src/menu.c    ****   // Draw menu items
 596:src/menu.c    ****   // 
 597:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 598:src/menu.c    ****     /*
 599:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 600:src/menu.c    ****     */
 601:src/menu.c    ****     // Label is Ref.keys[item].unshifted_label
 602:src/menu.c    ****     // Unshifted first
 603:src/menu.c    ****       len = pixel_length (Ref.keys[item].unshifted_label, 0); // 0 means not small font
 1481              		.loc 1 603 7 is_stmt 1 view .LVU415
 1482              		.loc 1 603 13 is_stmt 0 view .LVU416
 1483 0048 0021     		movs	r1, #0
 1484 004a 3046     		mov	r0, r6
 1485 004c FFF7FEFF 		bl	pixel_length
 1486              	.LVL108:
 604:src/menu.c    ****       set_menu_label ( Ref.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1487              		.loc 1 604 7 is_stmt 1 view .LVU417
 1488              		.loc 1 604 73 is_stmt 0 view .LVU418
 1489 0050 C0F12000 		rsb	r0, r0, #32
 1490              	.LVL109:
 1491              		.loc 1 604 79 view .LVU419
 1492 0054 00EBD070 		add	r0, r0, r0, lsr #31
 1493              		.loc 1 604 7 view .LVU420
 1494 0058 04EB6001 		add	r1, r4, r0, asr #1
 1495 005c 0022     		movs	r2, #0
 1496 005e 3046     		mov	r0, r6
 1497 0060 06F10807 		add	r7, r6, #8
 1498 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1499              	.LVL110:
 605:src/menu.c    ****       // Now shifted ...	
 606:src/menu.c    ****       len = pixel_length (Ref.keys[item].shifted_label, 0); // 0 means not small font
 1500              		.loc 1 606 7 is_stmt 1 view .LVU421
 1501              		.loc 1 606 13 is_stmt 0 view .LVU422
 1502 0068 0021     		movs	r1, #0
 1503 006a 3846     		mov	r0, r7
 1504 006c FFF7FEFF 		bl	pixel_length
 1505              	.LVL111:
 607:src/menu.c    ****       len = item*32 + (32-len)/2;
 1506              		.loc 1 607 7 is_stmt 1 view .LVU423
 1507              		.loc 1 607 26 is_stmt 0 view .LVU424
 1508 0070 C0F12000 		rsb	r0, r0, #32
 1509              	.LVL112:
 1510              		.loc 1 607 31 view .LVU425
 1511 0074 00EBD070 		add	r0, r0, r0, lsr #31
 1512              	.LVL113:
 608:src/menu.c    ****       if (len<0) len = 0;
 1513              		.loc 1 608 7 is_stmt 1 view .LVU426
 607:src/menu.c    ****       len = item*32 + (32-len)/2;
 1514              		.loc 1 607 11 is_stmt 0 view .LVU427
 1515 0078 04EB6001 		add	r1, r4, r0, asr #1
 1516              	.LVL114:
 607:src/menu.c    ****       len = item*32 + (32-len)/2;
 1517              		.loc 1 607 11 view .LVU428
ARM GAS  /tmp/ccp3OFc8.s 			page 44


 1518 007c C729     		cmp	r1, #199
 1519 007e A8BF     		it	ge
 1520 0080 C721     		movge	r1, #199
 1521              	.LVL115:
 609:src/menu.c    ****       if (len>199) len = 199;
 610:src/menu.c    ****       set_menu_label ( Ref.keys[item].shifted_label, 0, len, 1 );
 1522              		.loc 1 610 7 is_stmt 1 view .LVU429
 1523 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1524              	.LVL116:
 1525              		.loc 1 610 7 is_stmt 0 view .LVU430
 1526 0086 3846     		mov	r0, r7
 1527 0088 2034     		adds	r4, r4, #32
 1528 008a 0122     		movs	r2, #1
 1529 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1530              	.LVL117:
 597:src/menu.c    ****     /*
 1531              		.loc 1 597 32 is_stmt 1 view .LVU431
 597:src/menu.c    ****     /*
 1532              		.loc 1 597 22 view .LVU432
 597:src/menu.c    ****     /*
 1533              		.loc 1 597 3 is_stmt 0 view .LVU433
 1534 0090 C02C     		cmp	r4, #192
 1535 0092 06F12006 		add	r6, r6, #32
 1536 0096 D7D1     		bne	.L151
 1537 0098 1E4E     		ldr	r6, .L167+8
 1538              	.LBE93:
 1539              	.LBB94:
 1540              	.LBB95:
 611:src/menu.c    ****   }
 612:src/menu.c    **** 
 613:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 614:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 615:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 616:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 617:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1541              		.loc 1 617 2 view .LVU434
 1542 009a DFF87090 		ldr	r9, .L167
 1543 009e C5F1040A 		rsb	r10, r5, #4
 1544 00a2 06F5C47B 		add	fp, r6, #392
 1545              	.LBE95:
 1546              	.LBE94:
 1547              	.LBB97:
 597:src/menu.c    ****     /*
 1548              		.loc 1 597 3 view .LVU435
 1549 00a6 771E     		subs	r7, r6, #1
 1550              	.LBE97:
 1551              	.LBB98:
 1552              	.LBB96:
 1553              		.loc 1 617 2 view .LVU436
 1554 00a8 4FF0FF08 		mov	r8, #255
 1555              	.L152:
 1556              	.LVL118:
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1557              		.loc 1 614 23 is_stmt 1 view .LVU437
 1558 00ac 0AEB0705 		add	r5, r10, r7
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1559              		.loc 1 614 14 is_stmt 0 view .LVU438
ARM GAS  /tmp/ccp3OFc8.s 			page 45


 1560 00b0 0024     		movs	r4, #0
 1561              	.LVL119:
 1562              	.L155:
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1563              		.loc 1 615 7 is_stmt 1 view .LVU439
 1564              		.loc 1 617 2 view .LVU440
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1565              		.loc 1 615 22 is_stmt 0 view .LVU441
 1566 00b2 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1567              		.loc 1 615 40 view .LVU442
 1568 00b6 2241     		asrs	r2, r2, r4
 1569              		.loc 1 617 2 view .LVU443
 1570 00b8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1571 00bc 0323     		movs	r3, #3
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1572              		.loc 1 615 10 view .LVU444
 1573 00be 12F0010F 		tst	r2, #1
 1574              		.loc 1 617 2 view .LVU445
 1575 00c2 01F1E901 		add	r1, r1, #233
 1576 00c6 1A46     		mov	r2, r3
 1577 00c8 2846     		mov	r0, r5
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1578              		.loc 1 615 10 view .LVU446
 1579 00ca 02D0     		beq	.L153
 1580              		.loc 1 617 2 view .LVU447
 1581 00cc CDF80080 		str	r8, [sp]
 1582 00d0 C847     		blx	r9
 1583              	.LVL120:
 1584              	.L153:
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1585              		.loc 1 618 7 is_stmt 1 view .LVU448
 619:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 620:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1586              		.loc 1 620 2 view .LVU449
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1587              		.loc 1 618 22 is_stmt 0 view .LVU450
 1588 00d2 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1589              		.loc 1 618 40 view .LVU451
 1590 00d4 2241     		asrs	r2, r2, r4
 1591              		.loc 1 620 2 view .LVU452
 1592 00d6 A4EB8401 		sub	r1, r4, r4, lsl #2
 1593 00da 0323     		movs	r3, #3
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1594              		.loc 1 618 10 view .LVU453
 1595 00dc 12F0010F 		tst	r2, #1
 1596              		.loc 1 620 2 view .LVU454
 1597 00e0 01F1D001 		add	r1, r1, #208
 1598 00e4 1A46     		mov	r2, r3
 1599 00e6 04F10104 		add	r4, r4, #1
 1600              	.LVL121:
 1601              		.loc 1 620 2 view .LVU455
 1602 00ea 2846     		mov	r0, r5
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1603              		.loc 1 618 10 view .LVU456
 1604 00ec 02D0     		beq	.L154
ARM GAS  /tmp/ccp3OFc8.s 			page 46


 1605              		.loc 1 620 2 view .LVU457
 1606 00ee CDF80080 		str	r8, [sp]
 1607 00f2 C847     		blx	r9
 1608              	.LVL122:
 1609              	.L154:
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1610              		.loc 1 614 32 is_stmt 1 discriminator 2 view .LVU458
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1611              		.loc 1 614 23 discriminator 2 view .LVU459
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1612              		.loc 1 614 5 is_stmt 0 discriminator 2 view .LVU460
 1613 00f4 062C     		cmp	r4, #6
 1614 00f6 DCD1     		bne	.L155
 1615              	.LBE96:
 613:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1616              		.loc 1 613 32 is_stmt 1 discriminator 2 view .LVU461
 613:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1617              		.loc 1 613 21 discriminator 2 view .LVU462
 1618 00f8 0236     		adds	r6, r6, #2
 613:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1619              		.loc 1 613 3 is_stmt 0 discriminator 2 view .LVU463
 1620 00fa B345     		cmp	fp, r6
 1621 00fc 07F10207 		add	r7, r7, #2
 1622 0100 D4D1     		bne	.L152
 1623              	.LBE98:
 621:src/menu.c    ****     }
 622:src/menu.c    ****   }
 623:src/menu.c    **** }
 1624              		.loc 1 623 1 view .LVU464
 1625 0102 03B0     		add	sp, sp, #12
 1626              		.cfi_def_cfa_offset 52
 1627              		@ sp needed
 1628 0104 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1629              		.cfi_restore 14
 1630              		.cfi_restore 11
 1631              		.cfi_restore 10
 1632              		.cfi_restore 9
 1633              		.cfi_restore 8
 1634              		.cfi_restore 7
 1635              		.cfi_restore 6
 1636              		.cfi_restore 5
 1637              		.cfi_restore 4
 1638              		.cfi_def_cfa_offset 16
 1639              	.LVL123:
 1640              		.loc 1 623 1 view .LVU465
 1641 0108 04B0     		add	sp, sp, #16
 1642              		.cfi_def_cfa_offset 0
 1643 010a 7047     		bx	lr
 1644              	.L168:
 1645              		.align	2
 1646              	.L167:
 1647 010c 3D020008 		.word	134218301
 1648 0110 00000000 		.word	.LANCHOR0
 1649 0114 01000000 		.word	.LANCHOR0+1
 1650              		.cfi_endproc
 1651              	.LFE16:
 1653              		.section	.text.display_current_menu,"ax",%progbits
ARM GAS  /tmp/ccp3OFc8.s 			page 47


 1654              		.align	1
 1655              		.p2align 2,,3
 1656              		.global	display_current_menu
 1657              		.syntax unified
 1658              		.thumb
 1659              		.thumb_func
 1660              		.fpu fpv4-sp-d16
 1662              	display_current_menu:
 1663              	.LFB11:
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1664              		.loc 1 148 30 is_stmt 1 view -0
 1665              		.cfi_startproc
 1666              		@ args = 0, pretend = 0, frame = 208
 1667              		@ frame_needed = 0, uses_anonymous_args = 0
 149:src/menu.c    **** }
 1668              		.loc 1 149 3 view .LVU467
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1669              		.loc 1 148 30 is_stmt 0 view .LVU468
 1670 0000 10B5     		push	{r4, lr}
 1671              		.cfi_def_cfa_offset 8
 1672              		.cfi_offset 4, -8
 1673              		.cfi_offset 14, -4
 1674 0002 E4B0     		sub	sp, sp, #400
 1675              		.cfi_def_cfa_offset 408
 149:src/menu.c    **** }
 1676              		.loc 1 149 3 view .LVU469
 1677 0004 30AC     		add	r4, sp, #192
 1678 0006 2046     		mov	r0, r4
 1679 0008 FFF7FEFF 		bl	get_current_menu_ref
 1680              	.LVL124:
 1681 000c 34A9     		add	r1, sp, #208
 1682 000e C022     		movs	r2, #192
 1683 0010 6846     		mov	r0, sp
 1684 0012 FFF7FEFF 		bl	memcpy
 1685              	.LVL125:
 1686 0016 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1687 001a FFF7FEFF 		bl	display_menu
 1688              	.LVL126:
 150:src/menu.c    **** 
 1689              		.loc 1 150 1 view .LVU470
 1690 001e 64B0     		add	sp, sp, #400
 1691              		.cfi_def_cfa_offset 8
 1692              		@ sp needed
 1693 0020 10BD     		pop	{r4, pc}
 1694              		.cfi_endproc
 1695              	.LFE11:
 1697 0022 00BF     		.section	.text.all_menu_dots,"ax",%progbits
 1698              		.align	1
 1699              		.p2align 2,,3
 1700              		.global	all_menu_dots
 1701              		.syntax unified
 1702              		.thumb
 1703              		.thumb_func
 1704              		.fpu fpv4-sp-d16
 1706              	all_menu_dots:
 1707              	.LFB17:
 624:src/menu.c    **** 
ARM GAS  /tmp/ccp3OFc8.s 			page 48


 625:src/menu.c    **** void all_menu_dots () {
 1708              		.loc 1 625 23 is_stmt 1 view -0
 1709              		.cfi_startproc
 1710              		@ args = 0, pretend = 0, frame = 0
 1711              		@ frame_needed = 0, uses_anonymous_args = 0
 626:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1712              		.loc 1 626 3 view .LVU472
 1713              	.LBB99:
 1714              		.loc 1 626 8 view .LVU473
 1715              	.LVL127:
 1716              		.loc 1 626 21 view .LVU474
 1717              	.LBE99:
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1718              		.loc 1 625 23 is_stmt 0 view .LVU475
 1719 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1720              		.cfi_def_cfa_offset 20
 1721              		.cfi_offset 4, -20
 1722              		.cfi_offset 5, -16
 1723              		.cfi_offset 6, -12
 1724              		.cfi_offset 7, -8
 1725              		.cfi_offset 14, -4
 1726              	.LBB103:
 1727              	.LBB100:
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 628:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1728              		.loc 1 628 2 view .LVU476
 1729 0002 0D4E     		ldr	r6, .L177
 1730              	.LBE100:
 1731              	.LBE103:
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1732              		.loc 1 625 23 view .LVU477
 1733 0004 83B0     		sub	sp, sp, #12
 1734              		.cfi_def_cfa_offset 32
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1735              		.loc 1 625 23 view .LVU478
 1736 0006 0025     		movs	r5, #0
 1737              	.LBB104:
 1738              	.LBB101:
 1739              		.loc 1 628 2 view .LVU479
 1740 0008 FF27     		movs	r7, #255
 1741              	.LVL128:
 1742              	.L172:
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1743              		.loc 1 627 23 is_stmt 1 view .LVU480
 1744              	.LBE101:
 1745              	.LBE104:
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1746              		.loc 1 625 23 is_stmt 0 view .LVU481
 1747 000a E924     		movs	r4, #233
 1748              	.LVL129:
 1749              	.L173:
 1750              	.LBB105:
 1751              	.LBB102:
 1752              		.loc 1 628 2 is_stmt 1 discriminator 3 view .LVU482
 1753 000c 0323     		movs	r3, #3
 1754 000e 1A46     		mov	r2, r3
 1755 0010 2146     		mov	r1, r4
ARM GAS  /tmp/ccp3OFc8.s 			page 49


 1756 0012 2846     		mov	r0, r5
 1757 0014 0097     		str	r7, [sp]
 1758 0016 B047     		blx	r6
 1759              	.LVL130:
 629:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1760              		.loc 1 629 2 discriminator 3 view .LVU483
 1761 0018 0323     		movs	r3, #3
 1762 001a A4F11901 		sub	r1, r4, #25
 1763 001e 0097     		str	r7, [sp]
 1764 0020 1A46     		mov	r2, r3
 1765 0022 2846     		mov	r0, r5
 1766 0024 033C     		subs	r4, r4, #3
 1767 0026 B047     		blx	r6
 1768              	.LVL131:
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1769              		.loc 1 627 32 discriminator 3 view .LVU484
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1770              		.loc 1 627 23 discriminator 3 view .LVU485
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1771              		.loc 1 627 5 is_stmt 0 discriminator 3 view .LVU486
 1772 0028 D72C     		cmp	r4, #215
 1773 002a EFD1     		bne	.L173
 1774              	.LBE102:
 626:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1775              		.loc 1 626 32 is_stmt 1 discriminator 2 view .LVU487
 626:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1776              		.loc 1 626 21 discriminator 2 view .LVU488
 1777 002c 0235     		adds	r5, r5, #2
 626:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1778              		.loc 1 626 3 is_stmt 0 discriminator 2 view .LVU489
 1779 002e B5F5C87F 		cmp	r5, #400
 1780 0032 EAD1     		bne	.L172
 1781              	.LBE105:
 630:src/menu.c    ****     }
 631:src/menu.c    ****   }
 632:src/menu.c    **** }  
 1782              		.loc 1 632 1 view .LVU490
 1783 0034 03B0     		add	sp, sp, #12
 1784              		.cfi_def_cfa_offset 20
 1785              		@ sp needed
 1786 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1787              	.L178:
 1788              		.align	2
 1789              	.L177:
 1790 0038 3D020008 		.word	134218301
 1791              		.cfi_endproc
 1792              	.LFE17:
 1794              		.section	.text.build_user_menu,"ax",%progbits
 1795              		.align	1
 1796              		.p2align 2,,3
 1797              		.global	build_user_menu
 1798              		.syntax unified
 1799              		.thumb
 1800              		.thumb_func
 1801              		.fpu fpv4-sp-d16
 1803              	build_user_menu:
 1804              	.LFB18:
ARM GAS  /tmp/ccp3OFc8.s 			page 50


 633:src/menu.c    **** 
 634:src/menu.c    **** void build_user_menu(void)
 635:src/menu.c    **** {
 1805              		.loc 1 635 1 is_stmt 1 view -0
 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 24
 1808              		@ frame_needed = 0, uses_anonymous_args = 0
 636:src/menu.c    ****   // find the label 'MNU'
 637:src/menu.c    ****   const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 1809              		.loc 1 637 3 view .LVU492
 1810              	.LVL132:
 638:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 1811              		.loc 1 638 3 view .LVU493
 635:src/menu.c    ****   // find the label 'MNU'
 1812              		.loc 1 635 1 is_stmt 0 view .LVU494
 1813 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1814              		.cfi_def_cfa_offset 36
 1815              		.cfi_offset 4, -36
 1816              		.cfi_offset 5, -32
 1817              		.cfi_offset 6, -28
 1818              		.cfi_offset 7, -24
 1819              		.cfi_offset 8, -20
 1820              		.cfi_offset 9, -16
 1821              		.cfi_offset 10, -12
 1822              		.cfi_offset 11, -8
 1823              		.cfi_offset 14, -4
 1824              		.loc 1 638 21 view .LVU495
 1825 0004 0021     		movs	r1, #0
 1826 0006 4E48     		ldr	r0, .L220
 1827 0008 4E4F     		ldr	r7, .L220+4
 635:src/menu.c    ****   // find the label 'MNU'
 1828              		.loc 1 635 1 view .LVU496
 1829 000a 87B0     		sub	sp, sp, #28
 1830              		.cfi_def_cfa_offset 64
 1831              		.loc 1 638 21 view .LVU497
 1832 000c FFF7FEFF 		bl	findmultilbl
 1833              	.LVL133:
 1834 0010 3B46     		mov	r3, r7
 1835 0012 0546     		mov	r5, r0
 1836              	.LVL134:
 639:src/menu.c    ****   int i=0;
 1837              		.loc 1 639 3 is_stmt 1 view .LVU498
 640:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 1838              		.loc 1 640 3 view .LVU499
 1839              	.LBB106:
 1840              		.loc 1 640 8 view .LVU500
 1841              		.loc 1 640 19 view .LVU501
 641:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1842              		.loc 1 641 43 is_stmt 0 view .LVU502
 1843 0014 0022     		movs	r2, #0
 1844 0016 07F1C000 		add	r0, r7, #192
 1845              	.LVL135:
 642:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 643:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1846              		.loc 1 643 42 view .LVU503
 1847 001a 2E21     		movs	r1, #46
 1848              	.LVL136:
ARM GAS  /tmp/ccp3OFc8.s 			page 51


 1849              	.L180:
 641:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1850              		.loc 1 641 7 is_stmt 1 discriminator 3 view .LVU504
 641:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1851              		.loc 1 641 43 is_stmt 0 discriminator 3 view .LVU505
 1852 001c 83F82020 		strb	r2, [r3, #32]
 642:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1853              		.loc 1 642 7 is_stmt 1 discriminator 3 view .LVU506
 642:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1854              		.loc 1 642 40 is_stmt 0 discriminator 3 view .LVU507
 1855 0020 5A61     		str	r2, [r3, #20]
 1856              		.loc 1 643 7 is_stmt 1 discriminator 3 view .LVU508
 1857              		.loc 1 643 42 is_stmt 0 discriminator 3 view .LVU509
 1858 0022 1974     		strb	r1, [r3, #16]
 644:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1859              		.loc 1 644 7 is_stmt 1 discriminator 3 view .LVU510
 1860              		.loc 1 644 41 is_stmt 0 discriminator 3 view .LVU511
 1861 0024 83F82820 		strb	r2, [r3, #40]
 645:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1862              		.loc 1 645 7 is_stmt 1 discriminator 3 view .LVU512
 1863              		.loc 1 645 38 is_stmt 0 discriminator 3 view .LVU513
 1864 0028 DA61     		str	r2, [r3, #28]
 646:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1865              		.loc 1 646 7 is_stmt 1 discriminator 3 view .LVU514
 1866              		.loc 1 646 40 is_stmt 0 discriminator 3 view .LVU515
 1867 002a 1976     		strb	r1, [r3, #24]
 640:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1868              		.loc 1 640 24 is_stmt 1 discriminator 3 view .LVU516
 640:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1869              		.loc 1 640 19 discriminator 3 view .LVU517
 1870 002c 2033     		adds	r3, r3, #32
 640:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1871              		.loc 1 640 3 is_stmt 0 discriminator 3 view .LVU518
 1872 002e 8342     		cmp	r3, r0
 1873 0030 F4D1     		bne	.L180
 640:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1874              		.loc 1 640 3 discriminator 3 view .LVU519
 1875              	.LBE106:
 647:src/menu.c    ****   }
 648:src/menu.c    ****   while (pc && i < 12) {
 1876              		.loc 1 648 9 is_stmt 1 view .LVU520
 1877 0032 002D     		cmp	r5, #0
 1878 0034 44D0     		beq	.L179
 1879 0036 DFF814B1 		ldr	fp, .L220+12
 1880              	.LBB107:
 649:src/menu.c    ****     s_opcode op;
 650:src/menu.c    ****     opcode opc;
 651:src/menu.c    ****     char buf1[16];
 652:src/menu.c    **** 
 653:src/menu.c    ****     pc = do_inc(pc, 0);
 654:src/menu.c    ****     opc = getprog(pc);
 655:src/menu.c    ****     op = (s_opcode) opc;
 656:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 657:src/menu.c    ****       break;
 658:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 659:src/menu.c    ****       if (i==4) {
 660:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
ARM GAS  /tmp/ccp3OFc8.s 			page 52


 661:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 662:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 663:src/menu.c    ****       }
 664:src/menu.c    ****       else if (i==5) {
 665:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 666:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 667:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1881              		.loc 1 667 2 is_stmt 0 view .LVU521
 1882 003a DFF814A1 		ldr	r10, .L220+16
 662:src/menu.c    ****       }
 1883              		.loc 1 662 2 view .LVU522
 1884 003e DFF81481 		ldr	r8, .L220+20
 1885              		.loc 1 667 2 view .LVU523
 1886 0042 0BF1A009 		add	r9, fp, #160
 1887              	.LBE107:
 648:src/menu.c    ****     s_opcode op;
 1888              		.loc 1 648 9 view .LVU524
 1889 0046 0026     		movs	r6, #0
 1890              	.LVL137:
 1891              	.L194:
 1892              	.LBB110:
 649:src/menu.c    ****     s_opcode op;
 1893              		.loc 1 649 5 is_stmt 1 view .LVU525
 650:src/menu.c    ****     char buf1[16];
 1894              		.loc 1 650 5 view .LVU526
 651:src/menu.c    **** 
 1895              		.loc 1 651 5 view .LVU527
 653:src/menu.c    ****     opc = getprog(pc);
 1896              		.loc 1 653 5 view .LVU528
 653:src/menu.c    ****     opc = getprog(pc);
 1897              		.loc 1 653 10 is_stmt 0 view .LVU529
 1898 0048 2846     		mov	r0, r5
 1899 004a 0021     		movs	r1, #0
 1900 004c FFF7FEFF 		bl	do_inc
 1901              	.LVL138:
 1902 0050 0546     		mov	r5, r0
 1903              	.LVL139:
 654:src/menu.c    ****     op = (s_opcode) opc;
 1904              		.loc 1 654 5 is_stmt 1 view .LVU530
 654:src/menu.c    ****     op = (s_opcode) opc;
 1905              		.loc 1 654 11 is_stmt 0 view .LVU531
 1906 0052 FFF7FEFF 		bl	getprog
 1907              	.LVL140:
 655:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1908              		.loc 1 655 8 view .LVU532
 1909 0056 83B2     		uxth	r3, r0
 656:src/menu.c    ****       break;
 1910              		.loc 1 656 8 view .LVU533
 1911 0058 B3F59D7F 		cmp	r3, #314
 654:src/menu.c    ****     op = (s_opcode) opc;
 1912              		.loc 1 654 11 view .LVU534
 1913 005c 0446     		mov	r4, r0
 1914              	.LVL141:
 655:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1915              		.loc 1 655 5 is_stmt 1 view .LVU535
 656:src/menu.c    ****       break;
 1916              		.loc 1 656 5 view .LVU536
ARM GAS  /tmp/ccp3OFc8.s 			page 53


 656:src/menu.c    ****       break;
 1917              		.loc 1 656 8 is_stmt 0 view .LVU537
 1918 005e 2FD0     		beq	.L179
 658:src/menu.c    ****       if (i==4) {
 1919              		.loc 1 658 5 is_stmt 1 view .LVU538
 658:src/menu.c    ****       if (i==4) {
 1920              		.loc 1 658 8 is_stmt 0 view .LVU539
 1921 0060 B3F5807F 		cmp	r3, #256
 1922 0064 46D0     		beq	.L216
 668:src/menu.c    ****       }
 669:src/menu.c    ****       i += 1;
 670:src/menu.c    ****       continue;
 671:src/menu.c    ****     }
 672:src/menu.c    ****     if (isRARG(op)) {
 1923              		.loc 1 672 5 is_stmt 1 view .LVU540
 1924              		.loc 1 672 8 is_stmt 0 view .LVU541
 1925 0066 14F47042 		ands	r2, r4, #61440
 1926 006a 80B2     		uxth	r0, r0
 1927              	.LVL142:
 1928              		.loc 1 672 8 view .LVU542
 1929 006c 2BD0     		beq	.L188
 1930              		.loc 1 672 9 discriminator 1 view .LVU543
 1931 006e B2F5704F 		cmp	r2, #61440
 1932 0072 28D0     		beq	.L188
 1933              	.LBB108:
 673:src/menu.c    ****       const s_opcode rarg = RARG_CMD(op);
 1934              		.loc 1 673 7 is_stmt 1 view .LVU544
 1935              		.loc 1 673 29 is_stmt 0 view .LVU545
 1936 0074 1B0A     		lsrs	r3, r3, #8
 1937              	.LVL143:
 1938              		.loc 1 673 29 view .LVU546
 1939 0076 203B     		subs	r3, r3, #32
 1940 0078 DBB2     		uxtb	r3, r3
 1941              	.LVL144:
 674:src/menu.c    ****       if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 1942              		.loc 1 674 7 is_stmt 1 view .LVU547
 1943              		.loc 1 674 10 is_stmt 0 view .LVU548
 1944 007a 242B     		cmp	r3, #36
 1945 007c 06D0     		beq	.L189
 1946              		.loc 1 674 31 discriminator 1 view .LVU549
 1947 007e 6C2B     		cmp	r3, #108
 1948 0080 04D0     		beq	.L189
 675:src/menu.c    **** 	  && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 1949              		.loc 1 675 4 view .LVU550
 1950 0082 012B     		cmp	r3, #1
 1951 0084 02D9     		bls	.L189
 676:src/menu.c    **** 	   && ( (op & 0xff) == 0 ) ) { // argument = 0 
 1952              		.loc 1 676 5 view .LVU551
 1953 0086 10F0FF0F 		tst	r0, #255
 1954 008a 53D0     		beq	.L217
 1955              	.L189:
 677:src/menu.c    **** 	catcmd (op, buf1);
 678:src/menu.c    ****       }
 679:src/menu.c    ****       else {
 680:src/menu.c    **** 	prt_umen(op, buf1);	
 1956              		.loc 1 680 2 is_stmt 1 view .LVU552
 1957 008c 02A9     		add	r1, sp, #8
ARM GAS  /tmp/ccp3OFc8.s 			page 54


 1958 008e 0191     		str	r1, [sp, #4]
 1959 0090 FFF7FEFF 		bl	prt_umen
 1960              	.LVL145:
 1961              		.loc 1 680 2 is_stmt 0 view .LVU553
 1962 0094 0199     		ldr	r1, [sp, #4]
 1963              	.L190:
 1964              	.LBE108:
 681:src/menu.c    ****       }
 682:src/menu.c    ****     }
 683:src/menu.c    ****     else {
 684:src/menu.c    **** 	prt_umen(opc, buf1);	
 685:src/menu.c    ****     }      
 686:src/menu.c    **** 
 687:src/menu.c    **** #pragma GCC diagnostic push
 688:src/menu.c    **** #pragma GCC diagnostic ignored "-Wstringop-truncation"
 689:src/menu.c    ****     if (i<6) {
 1965              		.loc 1 689 5 is_stmt 1 view .LVU554
 1966              		.loc 1 689 8 is_stmt 0 view .LVU555
 1967 0096 052E     		cmp	r6, #5
 690:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1968              		.loc 1 690 7 view .LVU556
 1969 0098 4FF00702 		mov	r2, #7
 689:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1970              		.loc 1 689 8 view .LVU557
 1971 009c 1DD8     		bhi	.L191
 1972              	.L218:
 1973              		.loc 1 690 7 is_stmt 1 view .LVU558
 1974 009e 5846     		mov	r0, fp
 1975 00a0 FFF7FEFF 		bl	strncpy
 1976              	.LVL146:
 691:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1977              		.loc 1 691 7 view .LVU559
 1978              		.loc 1 691 42 is_stmt 0 view .LVU560
 1979 00a4 0022     		movs	r2, #0
 692:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = opc;
 693:src/menu.c    ****       UserMenu.keys[i].unshifted.key_34s = K_OP;
 1980              		.loc 1 693 42 view .LVU561
 1981 00a6 3423     		movs	r3, #52
 692:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = opc;
 1982              		.loc 1 692 40 view .LVU562
 1983 00a8 4BF80C4C 		str	r4, [fp, #-12]
 691:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1984              		.loc 1 691 42 view .LVU563
 1985 00ac 8BF80720 		strb	r2, [fp, #7]
 692:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = opc;
 1986              		.loc 1 692 7 is_stmt 1 view .LVU564
 1987              		.loc 1 693 7 view .LVU565
 1988              		.loc 1 693 42 is_stmt 0 view .LVU566
 1989 00b0 0BF8103C 		strb	r3, [fp, #-16]
 1990              	.LVL147:
 1991              	.L187:
 1992              		.loc 1 693 42 view .LVU567
 1993              	.LBE110:
 648:src/menu.c    ****     s_opcode op;
 1994              		.loc 1 648 9 is_stmt 1 view .LVU568
 1995 00b4 25B1     		cbz	r5, .L179
 1996 00b6 0136     		adds	r6, r6, #1
ARM GAS  /tmp/ccp3OFc8.s 			page 55


 648:src/menu.c    ****     s_opcode op;
 1997              		.loc 1 648 13 is_stmt 0 discriminator 1 view .LVU569
 1998 00b8 0C2E     		cmp	r6, #12
 1999 00ba 0BF1200B 		add	fp, fp, #32
 2000 00be C3D1     		bne	.L194
 2001              	.LVL148:
 2002              	.L179:
 694:src/menu.c    ****     }
 695:src/menu.c    ****     else {
 696:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 697:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 698:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = opc;
 699:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 700:src/menu.c    ****     }
 701:src/menu.c    **** #pragma GCC diagnostic pop
 702:src/menu.c    ****     i++;
 703:src/menu.c    ****   }
 704:src/menu.c    **** }
 2003              		.loc 1 704 1 view .LVU570
 2004 00c0 07B0     		add	sp, sp, #28
 2005              		.cfi_remember_state
 2006              		.cfi_def_cfa_offset 36
 2007              		@ sp needed
 2008 00c2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2009              	.LVL149:
 2010              	.L188:
 2011              		.cfi_restore_state
 2012              	.LBB111:
 684:src/menu.c    ****     }      
 2013              		.loc 1 684 2 is_stmt 1 view .LVU571
 2014 00c6 02A9     		add	r1, sp, #8
 2015 00c8 2046     		mov	r0, r4
 2016 00ca 0191     		str	r1, [sp, #4]
 2017 00cc FFF7FEFF 		bl	prt_umen
 2018              	.LVL150:
 689:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 2019              		.loc 1 689 8 is_stmt 0 view .LVU572
 2020 00d0 052E     		cmp	r6, #5
 684:src/menu.c    ****     }      
 2021              		.loc 1 684 2 view .LVU573
 2022 00d2 0199     		ldr	r1, [sp, #4]
 689:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 2023              		.loc 1 689 5 is_stmt 1 view .LVU574
 690:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 2024              		.loc 1 690 7 is_stmt 0 view .LVU575
 2025 00d4 4FF00702 		mov	r2, #7
 689:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 2026              		.loc 1 689 8 view .LVU576
 2027 00d8 E1D9     		bls	.L218
 2028              	.L191:
 696:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 2029              		.loc 1 696 7 is_stmt 1 view .LVU577
 2030 00da ABF1B800 		sub	r0, fp, #184
 2031 00de FFF7FEFF 		bl	strncpy
 2032              	.LVL151:
 697:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = opc;
 2033              		.loc 1 697 7 view .LVU578
ARM GAS  /tmp/ccp3OFc8.s 			page 56


 697:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = opc;
 2034              		.loc 1 697 42 is_stmt 0 view .LVU579
 2035 00e2 0022     		movs	r2, #0
 699:src/menu.c    ****     }
 2036              		.loc 1 699 42 view .LVU580
 2037 00e4 3423     		movs	r3, #52
 698:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 2038              		.loc 1 698 40 view .LVU581
 2039 00e6 4BF8C44C 		str	r4, [fp, #-196]
 697:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = opc;
 2040              		.loc 1 697 42 view .LVU582
 2041 00ea 0BF8B12C 		strb	r2, [fp, #-177]
 698:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 2042              		.loc 1 698 7 is_stmt 1 view .LVU583
 699:src/menu.c    ****     }
 2043              		.loc 1 699 7 view .LVU584
 699:src/menu.c    ****     }
 2044              		.loc 1 699 42 is_stmt 0 view .LVU585
 2045 00ee 0BF8C83C 		strb	r3, [fp, #-200]
 702:src/menu.c    ****   }
 2046              		.loc 1 702 5 is_stmt 1 view .LVU586
 2047              	.LVL152:
 702:src/menu.c    ****   }
 2048              		.loc 1 702 5 is_stmt 0 view .LVU587
 2049 00f2 DFE7     		b	.L187
 2050              	.LVL153:
 2051              	.L216:
 659:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 2052              		.loc 1 659 7 is_stmt 1 view .LVU588
 659:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 2053              		.loc 1 659 10 is_stmt 0 view .LVU589
 2054 00f4 042E     		cmp	r6, #4
 2055 00f6 0FD0     		beq	.L219
 664:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 2056              		.loc 1 664 12 is_stmt 1 view .LVU590
 664:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 2057              		.loc 1 664 15 is_stmt 0 view .LVU591
 2058 00f8 052E     		cmp	r6, #5
 2059 00fa DBD1     		bne	.L187
 665:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 2060              		.loc 1 665 2 is_stmt 1 view .LVU592
 665:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 2061              		.loc 1 665 35 is_stmt 0 view .LVU593
 2062 00fc 4FF0FF30 		mov	r0, #-1
 2063              	.LVL154:
 666:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2064              		.loc 1 666 37 view .LVU594
 2065 0100 2D23     		movs	r3, #45
 2066              	.LVL155:
 665:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 2067              		.loc 1 665 35 view .LVU595
 2068 0102 C7F8B400 		str	r0, [r7, #180]
 666:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2069              		.loc 1 666 2 is_stmt 1 view .LVU596
 667:src/menu.c    ****       }
 2070              		.loc 1 667 2 is_stmt 0 view .LVU597
 2071 0106 DAF80010 		ldr	r1, [r10]
ARM GAS  /tmp/ccp3OFc8.s 			page 57


 666:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2072              		.loc 1 666 37 view .LVU598
 2073 010a 87F8B030 		strb	r3, [r7, #176]
 667:src/menu.c    ****       }
 2074              		.loc 1 667 2 is_stmt 1 view .LVU599
 2075 010e 3246     		mov	r2, r6
 2076 0110 4846     		mov	r0, r9
 2077 0112 FFF7FEFF 		bl	strncpy
 2078              	.LVL156:
 669:src/menu.c    ****       continue;
 2079              		.loc 1 669 7 view .LVU600
 670:src/menu.c    ****     }
 2080              		.loc 1 670 7 view .LVU601
 2081 0116 CDE7     		b	.L187
 2082              	.LVL157:
 2083              	.L219:
 660:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 2084              		.loc 1 660 2 view .LVU602
 660:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 2085              		.loc 1 660 35 is_stmt 0 view .LVU603
 2086 0118 4FF0FF30 		mov	r0, #-1
 2087              	.LVL158:
 661:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2088              		.loc 1 661 37 view .LVU604
 2089 011c 2C23     		movs	r3, #44
 2090              	.LVL159:
 660:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 2091              		.loc 1 660 35 view .LVU605
 2092 011e C7F89400 		str	r0, [r7, #148]
 661:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2093              		.loc 1 661 2 is_stmt 1 view .LVU606
 662:src/menu.c    ****       }
 2094              		.loc 1 662 2 is_stmt 0 view .LVU607
 2095 0122 D8F80010 		ldr	r1, [r8]
 2096 0126 0848     		ldr	r0, .L220+8
 661:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2097              		.loc 1 661 37 view .LVU608
 2098 0128 87F89030 		strb	r3, [r7, #144]
 662:src/menu.c    ****       }
 2099              		.loc 1 662 2 is_stmt 1 view .LVU609
 2100 012c 0522     		movs	r2, #5
 2101 012e FFF7FEFF 		bl	strncpy
 2102              	.LVL160:
 2103 0132 BFE7     		b	.L187
 2104              	.LVL161:
 2105              	.L217:
 2106              	.LBB109:
 677:src/menu.c    ****       }
 2107              		.loc 1 677 2 view .LVU610
 2108 0134 02A9     		add	r1, sp, #8
 2109 0136 0191     		str	r1, [sp, #4]
 2110 0138 FFF7FEFF 		bl	catcmd
 2111              	.LVL162:
 677:src/menu.c    ****       }
 2112              		.loc 1 677 2 is_stmt 0 view .LVU611
 2113 013c 0199     		ldr	r1, [sp, #4]
 2114 013e AAE7     		b	.L190
ARM GAS  /tmp/ccp3OFc8.s 			page 58


 2115              	.L221:
 2116              		.align	2
 2117              	.L220:
 2118 0140 4DF04E55 		.word	1431236685
 2119 0144 00000000 		.word	.LANCHOR4
 2120 0148 A0000000 		.word	.LANCHOR4+160
 2121 014c 20000000 		.word	.LANCHOR4+32
 2122 0150 00000000 		.word	.LANCHOR6
 2123 0154 00000000 		.word	.LANCHOR5
 2124              	.LBE109:
 2125              	.LBE111:
 2126              		.cfi_endproc
 2127              	.LFE18:
 2129              		.section	.text.shutdown,"ax",%progbits
 2130              		.align	1
 2131              		.p2align 2,,3
 2132              		.global	shutdown
 2133              		.syntax unified
 2134              		.thumb
 2135              		.thumb_func
 2136              		.fpu fpv4-sp-d16
 2138              	shutdown:
 2139              	.LFB20:
 2140              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
ARM GAS  /tmp/ccp3OFc8.s 			page 59


  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #ifdef INCLUDE_STOPWATCH
  39:src/console.c **** #include "stopwatch.h"
  40:src/console.c **** #endif
  41:src/console.c **** #undef DM42SAFE
  42:src/console.c **** 
  43:src/console.c **** 
  44:src/console.c **** #ifdef DM42
  45:src/console.c **** 
  46:src/console.c **** #include <menu.c>
  47:src/console.c **** 
  48:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  49:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  50:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  51:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  52:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  53:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  54:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  55:src/console.c **** 
  56:src/console.c **** static struct _ndmap remap (const int c) {
  57:src/console.c **** 
  58:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  59:src/console.c **** 
  60:src/console.c **** #include "keytran.c"
  61:src/console.c **** 
  62:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  63:src/console.c **** 
  64:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  65:src/console.c **** 
  66:src/console.c ****   if (c == 44 ) {
  67:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  68:src/console.c ****     return sshot;
  69:src/console.c ****   }
  70:src/console.c ****   
  71:src/console.c ****   if (Running | Pause) {
  72:src/console.c ****     return mapping_running[c];
  73:src/console.c ****   }
  74:src/console.c **** 
  75:src/console.c ****   struct _menu Ref = get_current_menu_ref();
  76:src/console.c ****   
  77:src/console.c ****   switch (c) {
  78:src/console.c ****   case KEY_F1:
  79:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[0].unshifted;
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
  81:src/console.c ****   case KEY_F2:
  82:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[1].unshifted;
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
  84:src/console.c ****   case KEY_F3:
  85:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[2].unshifted;
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
  87:src/console.c ****   case KEY_F4:
  88:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[3].unshifted;
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
  90:src/console.c ****   case KEY_F5:
ARM GAS  /tmp/ccp3OFc8.s 			page 60


  91:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[4].unshifted;
  92:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
  93:src/console.c ****   case KEY_F6:
  94:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[5].unshifted;
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
  96:src/console.c ****   }
  97:src/console.c **** 
  98:src/console.c ****   if ( get_alpha_state() ) {
  99:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 100:src/console.c ****       switch (cur_shift()) { 
 101:src/console.c ****       case SHIFT_N:
 102:src/console.c **** 	return mapping_none[c]; // N -> F
 103:src/console.c **** 	break;
 104:src/console.c ****       case SHIFT_F:
 105:src/console.c **** 	return mapping_fshift[c]; // F -> G
 106:src/console.c **** 	break;
 107:src/console.c ****       case SHIFT_G:
 108:src/console.c **** 	return h_shift; // G -> H
 109:src/console.c **** 	break;
 110:src/console.c ****       case SHIFT_H:
 111:src/console.c **** 	return h_shift; // H -> N
 112:src/console.c ****       default:
 113:src/console.c **** 	return no_change;
 114:src/console.c ****       }
 115:src/console.c ****     }
 116:src/console.c ****     return mapping_alpha [c];
 117:src/console.c ****   }
 118:src/console.c **** 
 119:src/console.c ****   switch (cur_shift()) {
 120:src/console.c ****   case SHIFT_N:    
 121:src/console.c ****     return mapping_none[c];
 122:src/console.c ****     break;
 123:src/console.c ****   case SHIFT_F:
 124:src/console.c ****     return mapping_fshift[c];
 125:src/console.c ****     break;
 126:src/console.c ****   case SHIFT_G:
 127:src/console.c ****     return mapping_gshift[c];
 128:src/console.c ****     break;
 129:src/console.c ****   default:
 130:src/console.c ****     return no_change;
 131:src/console.c ****   }
 132:src/console.c **** }
 133:src/console.c **** 
 134:src/console.c **** #endif
 135:src/console.c **** 
 136:src/console.c **** void shutdown( void )
 137:src/console.c **** {
 2141              		.loc 2 137 1 is_stmt 1 view -0
 2142              		.cfi_startproc
 2143              		@ args = 0, pretend = 0, frame = 0
 2144              		@ frame_needed = 0, uses_anonymous_args = 0
 2145              		@ link register save eliminated.
 138:src/console.c **** #ifndef DM42
 139:src/console.c ****   checksum_all();
 140:src/console.c ****   setuptty( 1 );
 141:src/console.c ****   save_statefile( NULL );
 142:src/console.c ****   exit( 0 );
ARM GAS  /tmp/ccp3OFc8.s 			page 61


 143:src/console.c **** #else
 144:src/console.c ****   //  save_ram_file(0);
 145:src/console.c ****   SET_ST(STAT_PGM_END);
 2146              		.loc 2 145 3 view .LVU613
 2147 0000 024A     		ldr	r2, .L223
 2148 0002 1368     		ldr	r3, [r2]
 2149 0004 43F40073 		orr	r3, r3, #512
 2150 0008 1360     		str	r3, [r2]
 146:src/console.c **** #endif
 147:src/console.c **** }
 2151              		.loc 2 147 1 is_stmt 0 view .LVU614
 2152 000a 7047     		bx	lr
 2153              	.L224:
 2154              		.align	2
 2155              	.L223:
 2156 000c 00200010 		.word	268443648
 2157              		.cfi_endproc
 2158              	.LFE20:
 2160              		.section	.text.is_key_pressed,"ax",%progbits
 2161              		.align	1
 2162              		.p2align 2,,3
 2163              		.global	is_key_pressed
 2164              		.syntax unified
 2165              		.thumb
 2166              		.thumb_func
 2167              		.fpu fpv4-sp-d16
 2169              	is_key_pressed:
 2170              	.LFB21:
 148:src/console.c **** 
 149:src/console.c **** 
 150:src/console.c **** /*
 151:src/console.c ****  *  Dummies
 152:src/console.c ****  */
 153:src/console.c **** int is_key_pressed(void) 
 154:src/console.c **** {
 2171              		.loc 2 154 1 is_stmt 1 view -0
 2172              		.cfi_startproc
 2173              		@ args = 0, pretend = 0, frame = 0
 2174              		@ frame_needed = 0, uses_anonymous_args = 0
 155:src/console.c **** #ifdef DM42
 156:src/console.c ****   return !key_empty();
 2175              		.loc 2 156 3 view .LVU616
 154:src/console.c **** #ifdef DM42
 2176              		.loc 2 154 1 is_stmt 0 view .LVU617
 2177 0000 08B5     		push	{r3, lr}
 2178              		.cfi_def_cfa_offset 8
 2179              		.cfi_offset 3, -8
 2180              		.cfi_offset 14, -4
 2181              		.loc 2 156 11 view .LVU618
 2182 0002 034B     		ldr	r3, .L227
 2183 0004 9847     		blx	r3
 2184              	.LVL163:
 157:src/console.c **** #else
 158:src/console.c ****   return 0;
 159:src/console.c **** #endif
 160:src/console.c **** }
 2185              		.loc 2 160 1 view .LVU619
ARM GAS  /tmp/ccp3OFc8.s 			page 62


 2186 0006 B0FA80F0 		clz	r0, r0
 2187 000a 4009     		lsrs	r0, r0, #5
 2188 000c 08BD     		pop	{r3, pc}
 2189              	.L228:
 2190 000e 00BF     		.align	2
 2191              	.L227:
 2192 0010 7D030008 		.word	134218621
 2193              		.cfi_endproc
 2194              	.LFE21:
 2196              		.section	.text.get_key,"ax",%progbits
 2197              		.align	1
 2198              		.p2align 2,,3
 2199              		.global	get_key
 2200              		.syntax unified
 2201              		.thumb
 2202              		.thumb_func
 2203              		.fpu fpv4-sp-d16
 2205              	get_key:
 2206              	.LFB22:
 161:src/console.c **** 
 162:src/console.c **** int get_key(void)
 163:src/console.c **** {
 2207              		.loc 2 163 1 is_stmt 1 view -0
 2208              		.cfi_startproc
 2209              		@ args = 0, pretend = 0, frame = 0
 2210              		@ frame_needed = 0, uses_anonymous_args = 0
 2211              		@ link register save eliminated.
 164:src/console.c ****   #ifdef DM42
 165:src/console.c ****   return key_pop();
 2212              		.loc 2 165 3 view .LVU621
 2213              		.loc 2 165 10 is_stmt 0 view .LVU622
 2214 0000 004B     		ldr	r3, .L230
 2215 0002 1847     		bx	r3
 2216              	.LVL164:
 2217              	.L231:
 2218              		.align	2
 2219              	.L230:
 2220 0004 89030008 		.word	134218633
 2221              		.cfi_endproc
 2222              	.LFE22:
 2224              		.section	.text.put_key,"ax",%progbits
 2225              		.align	1
 2226              		.p2align 2,,3
 2227              		.global	put_key
 2228              		.syntax unified
 2229              		.thumb
 2230              		.thumb_func
 2231              		.fpu fpv4-sp-d16
 2233              	put_key:
 2234              	.LVL165:
 2235              	.LFB23:
 166:src/console.c ****   #else
 167:src/console.c ****   return 0;
 168:src/console.c ****   #endif
 169:src/console.c **** }
 170:src/console.c **** 
 171:src/console.c **** /*
ARM GAS  /tmp/ccp3OFc8.s 			page 63


 172:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 173:src/console.c ****  * 
 174:src/console.c ****  */
 175:src/console.c **** int put_key( int k )
 176:src/console.c **** {
 2236              		.loc 2 176 1 is_stmt 1 view -0
 2237              		.cfi_startproc
 2238              		@ args = 0, pretend = 0, frame = 48
 2239              		@ frame_needed = 0, uses_anonymous_args = 0
 2240              		@ link register save eliminated.
 177:src/console.c ****   #ifdef DM42
 178:src/console.c ****   const char wp34s_to_DM42[] = {
 2241              		.loc 2 178 3 view .LVU624
 176:src/console.c ****   #ifdef DM42
 2242              		.loc 2 176 1 is_stmt 0 view .LVU625
 2243 0000 70B4     		push	{r4, r5, r6}
 2244              		.cfi_def_cfa_offset 12
 2245              		.cfi_offset 4, -12
 2246              		.cfi_offset 5, -8
 2247              		.cfi_offset 6, -4
 2248              		.loc 2 178 14 view .LVU626
 2249 0002 0E4D     		ldr	r5, .L235
 176:src/console.c ****   #ifdef DM42
 2250              		.loc 2 176 1 view .LVU627
 2251 0004 0646     		mov	r6, r0
 2252              		.loc 2 178 14 view .LVU628
 2253 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2254              	.LVL166:
 176:src/console.c ****   #ifdef DM42
 2255              		.loc 2 176 1 view .LVU629
 2256 0008 8DB0     		sub	sp, sp, #52
 2257              		.cfi_def_cfa_offset 64
 2258              		.loc 2 178 14 view .LVU630
 2259 000a 01AC     		add	r4, sp, #4
 2260 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2261 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2262 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2263 0012 95E80700 		ldm	r5, {r0, r1, r2}
 2264 0016 03C4     		stmia	r4!, {r0, r1}
 179:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 180:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 181:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 182:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 183:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 184:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 185:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 186:src/console.c ****   
 187:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 2265              		.loc 2 187 6 view .LVU631
 2266 0018 282E     		cmp	r6, #40
 178:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 2267              		.loc 2 178 14 view .LVU632
 2268 001a 2270     		strb	r2, [r4]
 2269              		.loc 2 187 3 is_stmt 1 view .LVU633
 2270              		.loc 2 187 6 is_stmt 0 view .LVU634
 2271 001c 08D8     		bhi	.L233
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
ARM GAS  /tmp/ccp3OFc8.s 			page 64


 2272              		.loc 2 188 5 is_stmt 1 view .LVU635
 2273              		.loc 2 188 36 is_stmt 0 view .LVU636
 2274 001e 0CAB     		add	r3, sp, #48
 2275 0020 3046     		mov	r0, r6
 2276 0022 1844     		add	r0, r0, r3
 2277              		.loc 2 188 12 view .LVU637
 2278 0024 064B     		ldr	r3, .L235+4
 2279 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 189:src/console.c ****   }
 190:src/console.c ****   else {
 191:src/console.c ****     return -1;
 192:src/console.c ****   }
 193:src/console.c ****   #else
 194:src/console.c ****   return k;
 195:src/console.c ****   #endif
 196:src/console.c **** }
 2280              		.loc 2 196 1 view .LVU638
 2281 002a 0DB0     		add	sp, sp, #52
 2282              		.cfi_remember_state
 2283              		.cfi_def_cfa_offset 12
 2284              		@ sp needed
 2285 002c 70BC     		pop	{r4, r5, r6}
 2286              		.cfi_restore 6
 2287              		.cfi_restore 5
 2288              		.cfi_restore 4
 2289              		.cfi_def_cfa_offset 0
 2290              	.LVL167:
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2291              		.loc 2 188 12 view .LVU639
 2292 002e 1847     		bx	r3
 2293              	.LVL168:
 2294              	.L233:
 2295              		.cfi_restore_state
 2296              		.loc 2 196 1 view .LVU640
 2297 0030 4FF0FF30 		mov	r0, #-1
 2298 0034 0DB0     		add	sp, sp, #52
 2299              		.cfi_def_cfa_offset 12
 2300              		@ sp needed
 2301 0036 70BC     		pop	{r4, r5, r6}
 2302              		.cfi_restore 6
 2303              		.cfi_restore 5
 2304              		.cfi_restore 4
 2305              		.cfi_def_cfa_offset 0
 2306              	.LVL169:
 2307              		.loc 2 196 1 view .LVU641
 2308 0038 7047     		bx	lr
 2309              	.L236:
 2310 003a 00BF     		.align	2
 2311              	.L235:
 2312 003c 00000000 		.word	.LANCHOR7
 2313 0040 81030008 		.word	134218625
 2314              		.cfi_endproc
 2315              	.LFE23:
 2317              		.section	.text.shift_down,"ax",%progbits
 2318              		.align	1
 2319              		.p2align 2,,3
 2320              		.global	shift_down
ARM GAS  /tmp/ccp3OFc8.s 			page 65


 2321              		.syntax unified
 2322              		.thumb
 2323              		.thumb_func
 2324              		.fpu fpv4-sp-d16
 2326              	shift_down:
 2327              	.LFB24:
 197:src/console.c **** 
 198:src/console.c **** enum shifts shift_down(void)
 199:src/console.c **** {
 2328              		.loc 2 199 1 is_stmt 1 view -0
 2329              		.cfi_startproc
 2330              		@ args = 0, pretend = 0, frame = 0
 2331              		@ frame_needed = 0, uses_anonymous_args = 0
 2332              		@ link register save eliminated.
 200:src/console.c **** 	return SHIFT_N;
 2333              		.loc 2 200 2 view .LVU643
 201:src/console.c **** }
 2334              		.loc 2 201 1 is_stmt 0 view .LVU644
 2335 0000 0020     		movs	r0, #0
 2336 0002 7047     		bx	lr
 2337              		.cfi_endproc
 2338              	.LFE24:
 2340              		.section	.text.start_key_timer,"ax",%progbits
 2341              		.align	1
 2342              		.p2align 2,,3
 2343              		.global	start_key_timer
 2344              		.syntax unified
 2345              		.thumb
 2346              		.thumb_func
 2347              		.fpu fpv4-sp-d16
 2349              	start_key_timer:
 2350              	.LFB25:
 202:src/console.c **** 
 203:src/console.c **** #ifndef DM42   // No serial operations for DM42
 204:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 205:src/console.c **** /*
 206:src/console.c ****  *  Open a COM port for transmission
 207:src/console.c ****  */
 208:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 209:src/console.c **** {
 210:src/console.c **** 	return 0;
 211:src/console.c **** }
 212:src/console.c **** 
 213:src/console.c **** 
 214:src/console.c **** /*
 215:src/console.c ****  *  Close the COM port after transmission is complete
 216:src/console.c ****  */
 217:src/console.c **** extern void close_port( void )
 218:src/console.c **** {
 219:src/console.c **** }
 220:src/console.c **** 
 221:src/console.c **** 
 222:src/console.c **** /*
 223:src/console.c ****  *  Output a single byte to the serial
 224:src/console.c ****  */
 225:src/console.c **** void put_byte( unsigned char byte )
 226:src/console.c **** {
ARM GAS  /tmp/ccp3OFc8.s 			page 66


 227:src/console.c **** 	report_err(ERR_PROG_BAD);
 228:src/console.c **** }
 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Force buffer flush
 233:src/console.c ****  */
 234:src/console.c **** void flush_comm( void )
 235:src/console.c **** {
 236:src/console.c **** }
 237:src/console.c **** 
 238:src/console.c **** #endif
 239:src/console.c **** #endif
 240:src/console.c **** 
 241:src/console.c **** 
 242:src/console.c **** /*
 243:src/console.c ****  *  Main loop
 244:src/console.c ****  */
 245:src/console.c **** #ifdef DM42
 246:src/console.c **** void start_key_timer (void);
 247:src/console.c **** long int keyticks (void);
 248:src/console.c **** void moveto (int line, int x);
 249:src/console.c **** 
 250:src/console.c **** static long int start_ticks;
 251:src/console.c **** 
 252:src/console.c **** void start_key_timer() {
 2351              		.loc 2 252 24 is_stmt 1 view -0
 2352              		.cfi_startproc
 2353              		@ args = 0, pretend = 0, frame = 0
 2354              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/console.c ****     start_ticks = get_rtc_ticks();
 2355              		.loc 2 253 5 view .LVU646
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 2356              		.loc 2 252 24 is_stmt 0 view .LVU647
 2357 0000 08B5     		push	{r3, lr}
 2358              		.cfi_def_cfa_offset 8
 2359              		.cfi_offset 3, -8
 2360              		.cfi_offset 14, -4
 2361              		.loc 2 253 19 view .LVU648
 2362 0002 024B     		ldr	r3, .L240
 2363 0004 9847     		blx	r3
 2364              	.LVL170:
 2365              		.loc 2 253 17 view .LVU649
 2366 0006 024B     		ldr	r3, .L240+4
 2367 0008 1860     		str	r0, [r3]
 254:src/console.c **** }
 2368              		.loc 2 254 1 view .LVU650
 2369 000a 08BD     		pop	{r3, pc}
 2370              	.L241:
 2371              		.align	2
 2372              	.L240:
 2373 000c B9040008 		.word	134218937
 2374 0010 00000000 		.word	.LANCHOR8
 2375              		.cfi_endproc
 2376              	.LFE25:
 2378              		.section	.text.keyticks,"ax",%progbits
 2379              		.align	1
ARM GAS  /tmp/ccp3OFc8.s 			page 67


 2380              		.p2align 2,,3
 2381              		.global	keyticks
 2382              		.syntax unified
 2383              		.thumb
 2384              		.thumb_func
 2385              		.fpu fpv4-sp-d16
 2387              	keyticks:
 2388              	.LFB26:
 255:src/console.c **** 
 256:src/console.c **** long int keyticks () {
 2389              		.loc 2 256 22 is_stmt 1 view -0
 2390              		.cfi_startproc
 2391              		@ args = 0, pretend = 0, frame = 0
 2392              		@ frame_needed = 0, uses_anonymous_args = 0
 257:src/console.c ****   long int i;
 2393              		.loc 2 257 3 view .LVU652
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2394              		.loc 2 258 3 view .LVU653
 256:src/console.c ****   long int i;
 2395              		.loc 2 256 22 is_stmt 0 view .LVU654
 2396 0000 08B5     		push	{r3, lr}
 2397              		.cfi_def_cfa_offset 8
 2398              		.cfi_offset 3, -8
 2399              		.cfi_offset 14, -4
 2400              		.loc 2 258 8 view .LVU655
 2401 0002 054B     		ldr	r3, .L244
 2402 0004 9847     		blx	r3
 2403              	.LVL171:
 259:src/console.c ****   return i >> 8;
 2404              		.loc 2 259 3 is_stmt 1 view .LVU656
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2405              		.loc 2 258 24 is_stmt 0 view .LVU657
 2406 0006 054B     		ldr	r3, .L244+4
 2407 0008 1B68     		ldr	r3, [r3]
 2408 000a C01A     		subs	r0, r0, r3
 2409              	.LVL172:
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2410              		.loc 2 258 38 view .LVU658
 2411 000c 00EB8000 		add	r0, r0, r0, lsl #2
 260:src/console.c **** }
 2412              		.loc 2 260 1 view .LVU659
 2413 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2414 0014 08BD     		pop	{r3, pc}
 2415              	.L245:
 2416 0016 00BF     		.align	2
 2417              	.L244:
 2418 0018 B9040008 		.word	134218937
 2419 001c 00000000 		.word	.LANCHOR8
 2420              		.cfi_endproc
 2421              	.LFE26:
 2423              		.section	.text.moveto,"ax",%progbits
 2424              		.align	1
 2425              		.p2align 2,,3
 2426              		.global	moveto
 2427              		.syntax unified
 2428              		.thumb
 2429              		.thumb_func
ARM GAS  /tmp/ccp3OFc8.s 			page 68


 2430              		.fpu fpv4-sp-d16
 2432              	moveto:
 2433              	.LVL173:
 2434              	.LFB27:
 261:src/console.c **** 
 262:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 263:src/console.c **** char print_string[22];
 264:src/console.c **** int n_p = 0;
 265:src/console.c **** 
 266:src/console.c **** 
 267:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2435              		.loc 2 267 30 is_stmt 1 view -0
 2436              		.cfi_startproc
 2437              		@ args = 0, pretend = 0, frame = 0
 2438              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2439              		.loc 2 268 3 view .LVU661
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2440              		.loc 2 267 30 is_stmt 0 view .LVU662
 2441 0000 70B5     		push	{r4, r5, r6, lr}
 2442              		.cfi_def_cfa_offset 16
 2443              		.cfi_offset 4, -16
 2444              		.cfi_offset 5, -12
 2445              		.cfi_offset 6, -8
 2446              		.cfi_offset 14, -4
 2447              		.loc 2 268 3 view .LVU663
 2448 0002 0A4D     		ldr	r5, .L248
 2449 0004 0A4B     		ldr	r3, .L248+4
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2450              		.loc 2 267 30 view .LVU664
 2451 0006 0246     		mov	r2, r0
 2452 0008 0C46     		mov	r4, r1
 2453              		.loc 2 268 3 view .LVU665
 2454 000a A86B     		ldr	r0, [r5, #56]
 2455              	.LVL174:
 2456              		.loc 2 268 3 view .LVU666
 2457 000c 511E     		subs	r1, r2, #1
 2458              	.LVL175:
 2459              		.loc 2 268 3 view .LVU667
 2460 000e 9847     		blx	r3
 2461              	.LVL176:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2462              		.loc 2 269 3 is_stmt 1 view .LVU668
 2463 0010 A86B     		ldr	r0, [r5, #56]
 2464 0012 084B     		ldr	r3, .L248+8
 2465              		.loc 2 269 33 is_stmt 0 view .LVU669
 2466 0014 0168     		ldr	r1, [r0]
 2467              		.loc 2 269 3 view .LVU670
 2468 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2469              		.loc 2 269 33 view .LVU671
 2470 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2471              		.loc 2 269 43 view .LVU672
 2472 001c 013C     		subs	r4, r4, #1
 2473              	.LVL177:
 2474              		.loc 2 269 40 view .LVU673
 2475 001e 04FB01F1 		mul	r1, r4, r1
 2476              		.loc 2 269 3 view .LVU674
ARM GAS  /tmp/ccp3OFc8.s 			page 69


 2477 0022 1431     		adds	r1, r1, #20
 270:src/console.c **** }
 2478              		.loc 2 270 1 view .LVU675
 2479 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2480              		.cfi_restore 14
 2481              		.cfi_restore 6
 2482              		.cfi_restore 5
 2483              		.cfi_restore 4
 2484              		.cfi_def_cfa_offset 0
 2485              	.LVL178:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2486              		.loc 2 269 3 view .LVU676
 2487 0028 1847     		bx	r3	@ indirect register sibling call
 2488              	.LVL179:
 2489              	.L249:
 2490 002a 00BF     		.align	2
 2491              	.L248:
 2492 002c 00200010 		.word	268443648
 2493 0030 69020008 		.word	134218345
 2494 0034 6D020008 		.word	134218349
 2495              		.cfi_endproc
 2496              	.LFE27:
 2498              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2499              		.align	2
 2500              	.LC9:
 2501 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2501      673A2025 
 2501      34692C25 
 2501      346900
 2502              		.section	.text.print_debug,"ax",%progbits
 2503              		.align	1
 2504              		.p2align 2,,3
 2505              		.global	print_debug
 2506              		.syntax unified
 2507              		.thumb
 2508              		.thumb_func
 2509              		.fpu fpv4-sp-d16
 2511              	print_debug:
 2512              	.LVL180:
 2513              	.LFB28:
 271:src/console.c **** 
 272:src/console.c **** void print_debug (int i, int j) {
 2514              		.loc 2 272 33 is_stmt 1 view -0
 2515              		.cfi_startproc
 2516              		@ args = 0, pretend = 0, frame = 8
 2517              		@ frame_needed = 0, uses_anonymous_args = 0
 273:src/console.c ****   strcpy( print_string, spaces );
 2518              		.loc 2 273 3 view .LVU678
 272:src/console.c ****   strcpy( print_string, spaces );
 2519              		.loc 2 272 33 is_stmt 0 view .LVU679
 2520 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2521              		.cfi_def_cfa_offset 24
 2522              		.cfi_offset 4, -24
 2523              		.cfi_offset 5, -20
 2524              		.cfi_offset 6, -16
 2525              		.cfi_offset 7, -12
 2526              		.cfi_offset 8, -8
ARM GAS  /tmp/ccp3OFc8.s 			page 70


 2527              		.cfi_offset 14, -4
 2528              		.loc 2 273 3 view .LVU680
 2529 0004 174C     		ldr	r4, .L252
 2530 0006 184F     		ldr	r7, .L252+4
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 275:src/console.c ****   moveto (3, 1);
 276:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2531              		.loc 2 276 3 view .LVU681
 2532 0008 184E     		ldr	r6, .L252+8
 2533 000a 194D     		ldr	r5, .L252+12
 277:src/console.c ****   lcd_refresh();
 2534              		.loc 2 277 3 view .LVU682
 2535 000c DFF86C80 		ldr	r8, .L252+24
 272:src/console.c ****   strcpy( print_string, spaces );
 2536              		.loc 2 272 33 view .LVU683
 2537 0010 82B0     		sub	sp, sp, #8
 2538              		.cfi_def_cfa_offset 32
 272:src/console.c ****   strcpy( print_string, spaces );
 2539              		.loc 2 272 33 view .LVU684
 2540 0012 0190     		str	r0, [sp, #4]
 2541 0014 0091     		str	r1, [sp]
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2542              		.loc 2 273 3 view .LVU685
 2543 0016 2046     		mov	r0, r4
 2544              	.LVL181:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2545              		.loc 2 273 3 view .LVU686
 2546 0018 3946     		mov	r1, r7
 2547              	.LVL182:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2548              		.loc 2 273 3 view .LVU687
 2549 001a FFF7FEFF 		bl	strcpy
 2550              	.LVL183:
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2551              		.loc 2 274 3 is_stmt 1 view .LVU688
 2552 001e DDE90032 		ldrd	r3, r2, [sp]
 2553 0022 1449     		ldr	r1, .L252+16
 2554 0024 2046     		mov	r0, r4
 2555 0026 FFF7FEFF 		bl	sprintf
 2556              	.LVL184:
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2557              		.loc 2 275 3 view .LVU689
 2558 002a 0121     		movs	r1, #1
 2559 002c 0320     		movs	r0, #3
 2560 002e FFF7FEFF 		bl	moveto
 2561              	.LVL185:
 276:src/console.c ****   lcd_refresh();
 2562              		.loc 2 276 3 view .LVU690
 2563 0032 2146     		mov	r1, r4
 2564 0034 B06B     		ldr	r0, [r6, #56]
 2565 0036 A847     		blx	r5
 2566              	.LVL186:
 2567              		.loc 2 277 3 view .LVU691
 2568 0038 C047     		blx	r8
 2569              	.LVL187:
 278:src/console.c ****   sys_delay (1000);
 2570              		.loc 2 278 3 view .LVU692
ARM GAS  /tmp/ccp3OFc8.s 			page 71


 2571 003a 0F4B     		ldr	r3, .L252+20
 2572 003c 4FF47A70 		mov	r0, #1000
 2573 0040 9847     		blx	r3
 2574              	.LVL188:
 279:src/console.c ****   /* wait_for_key_press(); */
 280:src/console.c ****   //  key_pop_all();
 281:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 282:src/console.c ****   // key_pop_all();
 283:src/console.c ****   strcpy( print_string, spaces );
 2575              		.loc 2 283 3 view .LVU693
 2576 0042 3946     		mov	r1, r7
 2577 0044 2046     		mov	r0, r4
 2578 0046 FFF7FEFF 		bl	strcpy
 2579              	.LVL189:
 284:src/console.c ****   moveto (3, 1);
 2580              		.loc 2 284 3 view .LVU694
 2581 004a 0121     		movs	r1, #1
 2582 004c 0320     		movs	r0, #3
 2583 004e FFF7FEFF 		bl	moveto
 2584              	.LVL190:
 285:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2585              		.loc 2 285 3 view .LVU695
 2586 0052 B06B     		ldr	r0, [r6, #56]
 2587 0054 2146     		mov	r1, r4
 2588 0056 A847     		blx	r5
 2589              	.LVL191:
 286:src/console.c ****   lcd_refresh();
 2590              		.loc 2 286 3 view .LVU696
 2591 0058 4346     		mov	r3, r8
 287:src/console.c ****   // while (key_empty()<=0);; // wait for release
 288:src/console.c ****   // key_pop_all();
 289:src/console.c **** }
 2592              		.loc 2 289 1 is_stmt 0 view .LVU697
 2593 005a 02B0     		add	sp, sp, #8
 2594              		.cfi_def_cfa_offset 24
 2595              	.LVL192:
 2596              		.loc 2 289 1 view .LVU698
 2597              		@ sp needed
 2598 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2599              		.cfi_restore 14
 2600              		.cfi_restore 8
 2601              		.cfi_restore 7
 2602              		.cfi_restore 6
 2603              		.cfi_restore 5
 2604              		.cfi_restore 4
 2605              		.cfi_def_cfa_offset 0
 2606              	.LVL193:
 286:src/console.c ****   lcd_refresh();
 2607              		.loc 2 286 3 view .LVU699
 2608 0060 1847     		bx	r3	@ indirect register sibling call
 2609              	.LVL194:
 2610              	.L253:
 2611 0062 00BF     		.align	2
 2612              	.L252:
 2613 0064 00000000 		.word	print_string
 2614 0068 00000000 		.word	.LANCHOR9
 2615 006c 00200010 		.word	268443648
ARM GAS  /tmp/ccp3OFc8.s 			page 72


 2616 0070 B1020008 		.word	134218417
 2617 0074 00000000 		.word	.LC9
 2618 0078 05040008 		.word	134218757
 2619 007c 31020008 		.word	134218289
 2620              		.cfi_endproc
 2621              	.LFE28:
 2623              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2624              		.align	2
 2625              	.LC10:
 2626 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2626      692C2531 
 2626      337300
 2627              		.section	.text.print_debug2,"ax",%progbits
 2628              		.align	1
 2629              		.p2align 2,,3
 2630              		.global	print_debug2
 2631              		.syntax unified
 2632              		.thumb
 2633              		.thumb_func
 2634              		.fpu fpv4-sp-d16
 2636              	print_debug2:
 2637              	.LVL195:
 2638              	.LFB29:
 290:src/console.c **** 
 291:src/console.c **** void print_debug2 (int i, char* j) {
 2639              		.loc 2 291 36 is_stmt 1 view -0
 2640              		.cfi_startproc
 2641              		@ args = 0, pretend = 0, frame = 8
 2642              		@ frame_needed = 0, uses_anonymous_args = 0
 292:src/console.c ****   strcpy( print_string, spaces );
 2643              		.loc 2 292 3 view .LVU701
 291:src/console.c ****   strcpy( print_string, spaces );
 2644              		.loc 2 291 36 is_stmt 0 view .LVU702
 2645 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2646              		.cfi_def_cfa_offset 24
 2647              		.cfi_offset 4, -24
 2648              		.cfi_offset 5, -20
 2649              		.cfi_offset 6, -16
 2650              		.cfi_offset 7, -12
 2651              		.cfi_offset 8, -8
 2652              		.cfi_offset 14, -4
 2653              		.loc 2 292 3 view .LVU703
 2654 0004 174C     		ldr	r4, .L256
 2655 0006 184F     		ldr	r7, .L256+4
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 294:src/console.c ****   moveto (3, 1);
 295:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2656              		.loc 2 295 3 view .LVU704
 2657 0008 184E     		ldr	r6, .L256+8
 2658 000a 194D     		ldr	r5, .L256+12
 296:src/console.c ****   lcd_refresh();
 2659              		.loc 2 296 3 view .LVU705
 2660 000c DFF86C80 		ldr	r8, .L256+24
 291:src/console.c ****   strcpy( print_string, spaces );
 2661              		.loc 2 291 36 view .LVU706
 2662 0010 82B0     		sub	sp, sp, #8
 2663              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccp3OFc8.s 			page 73


 291:src/console.c ****   strcpy( print_string, spaces );
 2664              		.loc 2 291 36 view .LVU707
 2665 0012 0190     		str	r0, [sp, #4]
 2666 0014 0091     		str	r1, [sp]
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2667              		.loc 2 292 3 view .LVU708
 2668 0016 2046     		mov	r0, r4
 2669              	.LVL196:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2670              		.loc 2 292 3 view .LVU709
 2671 0018 3946     		mov	r1, r7
 2672              	.LVL197:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2673              		.loc 2 292 3 view .LVU710
 2674 001a FFF7FEFF 		bl	strcpy
 2675              	.LVL198:
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2676              		.loc 2 293 3 is_stmt 1 view .LVU711
 2677 001e DDE90032 		ldrd	r3, r2, [sp]
 2678 0022 1449     		ldr	r1, .L256+16
 2679 0024 2046     		mov	r0, r4
 2680 0026 FFF7FEFF 		bl	sprintf
 2681              	.LVL199:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2682              		.loc 2 294 3 view .LVU712
 2683 002a 0121     		movs	r1, #1
 2684 002c 0320     		movs	r0, #3
 2685 002e FFF7FEFF 		bl	moveto
 2686              	.LVL200:
 295:src/console.c ****   lcd_refresh();
 2687              		.loc 2 295 3 view .LVU713
 2688 0032 2146     		mov	r1, r4
 2689 0034 B06B     		ldr	r0, [r6, #56]
 2690 0036 A847     		blx	r5
 2691              	.LVL201:
 2692              		.loc 2 296 3 view .LVU714
 2693 0038 C047     		blx	r8
 2694              	.LVL202:
 297:src/console.c ****   sys_delay (2500);
 2695              		.loc 2 297 3 view .LVU715
 2696 003a 0F4B     		ldr	r3, .L256+20
 2697 003c 40F6C410 		movw	r0, #2500
 2698 0040 9847     		blx	r3
 2699              	.LVL203:
 298:src/console.c ****   /* wait_for_key_press(); */
 299:src/console.c ****   //  key_pop_all();
 300:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 301:src/console.c ****   // key_pop_all();
 302:src/console.c ****   strcpy( print_string, spaces );
 2700              		.loc 2 302 3 view .LVU716
 2701 0042 3946     		mov	r1, r7
 2702 0044 2046     		mov	r0, r4
 2703 0046 FFF7FEFF 		bl	strcpy
 2704              	.LVL204:
 303:src/console.c ****   moveto (3, 1);
 2705              		.loc 2 303 3 view .LVU717
 2706 004a 0121     		movs	r1, #1
ARM GAS  /tmp/ccp3OFc8.s 			page 74


 2707 004c 0320     		movs	r0, #3
 2708 004e FFF7FEFF 		bl	moveto
 2709              	.LVL205:
 304:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2710              		.loc 2 304 3 view .LVU718
 2711 0052 B06B     		ldr	r0, [r6, #56]
 2712 0054 2146     		mov	r1, r4
 2713 0056 A847     		blx	r5
 2714              	.LVL206:
 305:src/console.c ****   lcd_refresh();
 2715              		.loc 2 305 3 view .LVU719
 2716 0058 4346     		mov	r3, r8
 306:src/console.c ****   // while (key_empty()<=0);; // wait for release
 307:src/console.c ****   // key_pop_all();
 308:src/console.c **** }
 2717              		.loc 2 308 1 is_stmt 0 view .LVU720
 2718 005a 02B0     		add	sp, sp, #8
 2719              		.cfi_def_cfa_offset 24
 2720              	.LVL207:
 2721              		.loc 2 308 1 view .LVU721
 2722              		@ sp needed
 2723 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2724              		.cfi_restore 14
 2725              		.cfi_restore 8
 2726              		.cfi_restore 7
 2727              		.cfi_restore 6
 2728              		.cfi_restore 5
 2729              		.cfi_restore 4
 2730              		.cfi_def_cfa_offset 0
 2731              	.LVL208:
 305:src/console.c ****   lcd_refresh();
 2732              		.loc 2 305 3 view .LVU722
 2733 0060 1847     		bx	r3	@ indirect register sibling call
 2734              	.LVL209:
 2735              	.L257:
 2736 0062 00BF     		.align	2
 2737              	.L256:
 2738 0064 00000000 		.word	print_string
 2739 0068 00000000 		.word	.LANCHOR9
 2740 006c 00200010 		.word	268443648
 2741 0070 B1020008 		.word	134218417
 2742 0074 00000000 		.word	.LC10
 2743 0078 05040008 		.word	134218757
 2744 007c 31020008 		.word	134218289
 2745              		.cfi_endproc
 2746              	.LFE29:
 2748              		.section	.text.do_now,"ax",%progbits
 2749              		.align	1
 2750              		.p2align 2,,3
 2751              		.global	do_now
 2752              		.syntax unified
 2753              		.thumb
 2754              		.thumb_func
 2755              		.fpu fpv4-sp-d16
 2757              	do_now:
 2758              	.LVL210:
 2759              	.LFB30:
ARM GAS  /tmp/ccp3OFc8.s 			page 75


 309:src/console.c **** 
 310:src/console.c **** void do_now (int key, int shift) { // key and shift are like the output of remapped
 2760              		.loc 2 310 34 is_stmt 1 view -0
 2761              		.cfi_startproc
 2762              		@ args = 0, pretend = 0, frame = 8
 2763              		@ frame_needed = 0, uses_anonymous_args = 0
 2764              		@ link register save eliminated.
 311:src/console.c ****   struct _ndmap temp;
 2765              		.loc 2 311 3 view .LVU724
 312:src/console.c ****   temp.key_34s = key;
 2766              		.loc 2 312 3 view .LVU725
 310:src/console.c ****   struct _ndmap temp;
 2767              		.loc 2 310 34 is_stmt 0 view .LVU726
 2768 0000 82B0     		sub	sp, sp, #8
 2769              		.cfi_def_cfa_offset 8
 313:src/console.c ****   temp.shift = shift;
 314:src/console.c ****   process_keycode_with_shift (temp);
 2770              		.loc 2 314 3 view .LVU727
 2771 0002 02AB     		add	r3, sp, #8
 312:src/console.c ****   temp.shift = shift;
 2772              		.loc 2 312 16 view .LVU728
 2773 0004 8DF80000 		strb	r0, [sp]
 313:src/console.c ****   temp.shift = shift;
 2774              		.loc 2 313 3 is_stmt 1 view .LVU729
 313:src/console.c ****   temp.shift = shift;
 2775              		.loc 2 313 14 is_stmt 0 view .LVU730
 2776 0008 0191     		str	r1, [sp, #4]
 2777              		.loc 2 314 3 is_stmt 1 view .LVU731
 2778 000a 13E90300 		ldmdb	r3, {r0, r1}
 2779              	.LVL211:
 315:src/console.c **** }
 2780              		.loc 2 315 1 is_stmt 0 view .LVU732
 2781 000e 02B0     		add	sp, sp, #8
 2782              		.cfi_def_cfa_offset 0
 2783              		@ sp needed
 314:src/console.c **** }
 2784              		.loc 2 314 3 view .LVU733
 2785 0010 FFF7FEBF 		b	process_keycode_with_shift
 2786              	.LVL212:
 314:src/console.c **** }
 2787              		.loc 2 314 3 view .LVU734
 2788              		.cfi_endproc
 2789              	.LFE30:
 2791              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 2792              		.align	2
 2793              	.LC11:
 2794 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 2794      502F7770 
 2794      3334735F 
 2794      68656C70 
 2794      2E68746D 
 2795              		.section	.text.do_multi,"ax",%progbits
 2796              		.align	1
 2797              		.p2align 2,,3
 2798              		.global	do_multi
 2799              		.syntax unified
 2800              		.thumb
ARM GAS  /tmp/ccp3OFc8.s 			page 76


 2801              		.thumb_func
 2802              		.fpu fpv4-sp-d16
 2804              	do_multi:
 2805              	.LVL213:
 2806              	.LFB31:
 316:src/console.c **** 
 317:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 2807              		.loc 2 317 42 is_stmt 1 view -0
 2808              		.cfi_startproc
 2809              		@ args = 0, pretend = 0, frame = 16
 2810              		@ frame_needed = 0, uses_anonymous_args = 0
 2811              		.loc 2 317 42 is_stmt 0 view .LVU736
 2812 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2813              		.cfi_def_cfa_offset 24
 2814              		.cfi_offset 4, -24
 2815              		.cfi_offset 5, -20
 2816              		.cfi_offset 6, -16
 2817              		.cfi_offset 7, -12
 2818              		.cfi_offset 8, -8
 2819              		.cfi_offset 14, -4
 2820 0004 84B0     		sub	sp, sp, #16
 2821              		.cfi_def_cfa_offset 40
 2822              	.LVL214:
 318:src/console.c ****   switch(r.shift) {
 2823              		.loc 2 318 3 is_stmt 1 view .LVU737
 317:src/console.c ****   switch(r.shift) {
 2824              		.loc 2 317 42 is_stmt 0 view .LVU738
 2825 0006 6C46     		mov	r4, sp
 2826 0008 531E     		subs	r3, r2, #1
 2827 000a 84E80600 		stm	r4, {r1, r2}
 2828              	.LVL215:
 317:src/console.c ****   switch(r.shift) {
 2829              		.loc 2 317 42 view .LVU739
 2830 000e 0546     		mov	r5, r0
 2831 0010 0E2B     		cmp	r3, #14
 2832 0012 00F28A80 		bhi	.L261
 2833 0016 DFE803F0 		tbb	[pc, r3]
 2834              	.L263:
 2835 001a 21       		.byte	(.L277-.L263)/2
 2836 001b 49       		.byte	(.L276-.L263)/2
 2837 001c 55       		.byte	(.L275-.L263)/2
 2838 001d 59       		.byte	(.L274-.L263)/2
 2839 001e 5D       		.byte	(.L273-.L263)/2
 2840 001f 61       		.byte	(.L272-.L263)/2
 2841 0020 65       		.byte	(.L271-.L263)/2
 2842 0021 69       		.byte	(.L270-.L263)/2
 2843 0022 6C       		.byte	(.L269-.L263)/2
 2844 0023 70       		.byte	(.L268-.L263)/2
 2845 0024 73       		.byte	(.L267-.L263)/2
 2846 0025 76       		.byte	(.L266-.L263)/2
 2847 0026 8F       		.byte	(.L265-.L263)/2
 2848 0027 92       		.byte	(.L264-.L263)/2
 2849 0028 08       		.byte	(.L262-.L263)/2
 2850 0029 00       		.p2align 1
 2851              	.L262:
 319:src/console.c ****   case LASTX: // Last x via RCL L
 320:src/console.c ****     do_now (K11, 0); // RCL
ARM GAS  /tmp/ccp3OFc8.s 			page 77


 321:src/console.c ****     do_now (K_RELEASE,0); // release
 322:src/console.c ****     do_now (K15,0); // TAN key
 323:src/console.c ****     r.key_34s = K_RELEASE;
 324:src/console.c ****     r.shift = 0; // set up for release;
 325:src/console.c ****     break;
 326:src/console.c ****   case ONSTO: // flash_backup()
 327:src/console.c ****     flash_backup(OP_SAVE);
 328:src/console.c ****     reset_shift();
 329:src/console.c ****     r = no_key;
 330:src/console.c ****     break;
 331:src/console.c ****   case ONRCL: // flash_restore()
 332:src/console.c ****     flash_restore(OP_LOAD);
 333:src/console.c ****     reset_shift();
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
 336:src/console.c ****   case WRLIB: // save library file
 337:src/console.c ****     save_lib_file(1);
 338:src/console.c ****     reset_shift();
 339:src/console.c ****     r = no_key;
 340:src/console.c ****     break;
 341:src/console.c ****   case LLIB: // load library file
 342:src/console.c ****     load_lib_file(1);
 343:src/console.c ****     reset_shift();
 344:src/console.c ****     r = no_key;
 345:src/console.c ****     break;
 346:src/console.c ****   case WRTST: // save state file
 347:src/console.c ****     save_ram_file(1);
 348:src/console.c ****     reset_shift();
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case LDST:
 352:src/console.c ****     load_ram_file(1);
 353:src/console.c ****     reset_shift();
 354:src/console.c ****     r = no_key;
 355:src/console.c ****     break;
 356:src/console.c ****   case LDPRG:
 357:src/console.c ****     load_prog_file();
 358:src/console.c ****     reset_shift();
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case SVPRG:
 362:src/console.c ****     save_prog_file();
 363:src/console.c ****     reset_shift();
 364:src/console.c ****     r = no_key;
 365:src/console.c ****     break;
 366:src/console.c ****   case HELP:
 367:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 368:src/console.c ****     reset_shift();
 369:src/console.c ****     r = no_key;
 370:src/console.c ****     break;
 371:src/console.c ****   case DOTS:
 372:src/console.c ****     do_all_dots();
 373:src/console.c ****     reset_shift();
 374:src/console.c ****     r = no_key;
 375:src/console.c ****     break;
 376:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 377:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
ARM GAS  /tmp/ccp3OFc8.s 			page 78


 378:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 379:src/console.c ****     r = no_key;
 380:src/console.c ****     break;
 381:src/console.c ****   case DEFMEN:
 382:src/console.c ****     toggle_default_menu();
 383:src/console.c ****     reset_shift();
 384:src/console.c ****     r = no_key;
 385:src/console.c ****     break;
 386:src/console.c ****   case SETUMEN:
 387:src/console.c ****     build_user_menu();
 388:src/console.c ****     reset_shift();
 389:src/console.c ****     r = no_key;;
 390:src/console.c ****     break;
 391:src/console.c ****   case KCPX:
 392:src/console.c ****     if (C_LOCKED) {
 2852              		.loc 2 392 5 is_stmt 1 view .LVU740
 2853              		.loc 2 392 9 is_stmt 0 view .LVU741
 2854 002a 4F4B     		ldr	r3, .L293
 2855 002c 1B68     		ldr	r3, [r3]
 2856 002e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 2857              		.loc 2 392 8 view .LVU742
 2858 0032 03F04103 		and	r3, r3, #65
 2859 0036 412B     		cmp	r3, #65
 2860 0038 40F08480 		bne	.L279
 393:src/console.c ****       set_menu(M_C_Lock);
 2861              		.loc 2 393 7 is_stmt 1 view .LVU743
 2862              	.LVL216:
 2863              	.LBB112:
 2864              	.LBI112:
 108:src/menu.c    ****   menu_name m = current_menu;
 2865              		.loc 1 108 6 view .LVU744
 2866              	.LBB113:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 2867              		.loc 1 109 3 view .LVU745
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 2868              		.loc 1 109 13 is_stmt 0 view .LVU746
 2869 003c 4B4A     		ldr	r2, .L293+4
 2870 003e 92F90030 		ldrsb	r3, [r2]
 2871              	.LVL217:
 110:src/menu.c    ****     current_menu = default_menu;
 2872              		.loc 1 110 3 is_stmt 1 view .LVU747
 110:src/menu.c    ****     current_menu = default_menu;
 2873              		.loc 1 110 6 is_stmt 0 view .LVU748
 2874 0042 112B     		cmp	r3, #17
 2875 0044 00F08A80 		beq	.L292
 113:src/menu.c    ****     current_menu = last_menu;
 2876              		.loc 1 113 8 is_stmt 1 view .LVU749
 117:src/menu.c    ****   }
 2877              		.loc 1 117 5 view .LVU750
 117:src/menu.c    ****   }
 2878              		.loc 1 117 18 is_stmt 0 view .LVU751
 2879 0048 1121     		movs	r1, #17
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 2880              		.loc 1 119 6 view .LVU752
 2881 004a 092B     		cmp	r3, #9
 117:src/menu.c    ****   }
 2882              		.loc 1 117 18 view .LVU753
ARM GAS  /tmp/ccp3OFc8.s 			page 79


 2883 004c 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 2884              		.loc 1 119 3 is_stmt 1 view .LVU754
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 2885              		.loc 1 119 6 is_stmt 0 view .LVU755
 2886 004e 02D0     		beq	.L282
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 2887              		.loc 1 119 23 view .LVU756
 2888 0050 102B     		cmp	r3, #16
 2889 0052 40F08680 		bne	.L281
 2890              	.L282:
 2891              	.LVL218:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 2892              		.loc 1 119 23 view .LVU757
 2893              	.LBE113:
 2894              	.LBE112:
 394:src/console.c ****       reset_shift();
 2895              		.loc 2 394 7 is_stmt 1 view .LVU758
 2896 0056 FFF7FEFF 		bl	reset_shift
 2897              	.LVL219:
 2898              		.loc 2 394 7 is_stmt 0 view .LVU759
 2899 005a 66E0     		b	.L261
 2900              	.LVL220:
 2901              	.L277:
 320:src/console.c ****     do_now (K_RELEASE,0); // release
 2902              		.loc 2 320 5 is_stmt 1 view .LVU760
 2903              	.LBB115:
 2904              	.LBI115:
 310:src/console.c ****   struct _ndmap temp;
 2905              		.loc 2 310 6 view .LVU761
 2906              	.LBB116:
 311:src/console.c ****   temp.key_34s = key;
 2907              		.loc 2 311 3 view .LVU762
 312:src/console.c ****   temp.shift = shift;
 2908              		.loc 2 312 3 view .LVU763
 312:src/console.c ****   temp.shift = shift;
 2909              		.loc 2 312 16 is_stmt 0 view .LVU764
 2910 005c 0723     		movs	r3, #7
 313:src/console.c ****   process_keycode_with_shift (temp);
 2911              		.loc 2 313 14 view .LVU765
 2912 005e 0026     		movs	r6, #0
 312:src/console.c ****   temp.shift = shift;
 2913              		.loc 2 312 16 view .LVU766
 2914 0060 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 2915              		.loc 2 313 3 is_stmt 1 view .LVU767
 314:src/console.c **** }
 2916              		.loc 2 314 3 is_stmt 0 view .LVU768
 2917 0064 0DF10808 		add	r8, sp, #8
 313:src/console.c ****   process_keycode_with_shift (temp);
 2918              		.loc 2 313 14 view .LVU769
 2919 0068 0396     		str	r6, [sp, #12]
 314:src/console.c **** }
 2920              		.loc 2 314 3 is_stmt 1 view .LVU770
 2921 006a 98E80300 		ldm	r8, {r0, r1}
 2922              	.LVL221:
 314:src/console.c **** }
ARM GAS  /tmp/ccp3OFc8.s 			page 80


 2923              		.loc 2 314 3 is_stmt 0 view .LVU771
 2924              	.LBE116:
 2925              	.LBE115:
 2926              	.LBB118:
 2927              	.LBB119:
 312:src/console.c ****   temp.shift = shift;
 2928              		.loc 2 312 16 view .LVU772
 2929 006e 6327     		movs	r7, #99
 2930              	.LBE119:
 2931              	.LBE118:
 2932              	.LBB121:
 2933              	.LBB117:
 314:src/console.c **** }
 2934              		.loc 2 314 3 view .LVU773
 2935 0070 FFF7FEFF 		bl	process_keycode_with_shift
 2936              	.LVL222:
 314:src/console.c **** }
 2937              		.loc 2 314 3 view .LVU774
 2938              	.LBE117:
 2939              	.LBE121:
 321:src/console.c ****     do_now (K15,0); // TAN key
 2940              		.loc 2 321 5 is_stmt 1 view .LVU775
 2941              	.LBB122:
 2942              	.LBI118:
 310:src/console.c ****   struct _ndmap temp;
 2943              		.loc 2 310 6 view .LVU776
 2944              	.LBB120:
 311:src/console.c ****   temp.key_34s = key;
 2945              		.loc 2 311 3 view .LVU777
 312:src/console.c ****   temp.shift = shift;
 2946              		.loc 2 312 3 view .LVU778
 313:src/console.c ****   process_keycode_with_shift (temp);
 2947              		.loc 2 313 14 is_stmt 0 view .LVU779
 2948 0074 0396     		str	r6, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 2949              		.loc 2 312 16 view .LVU780
 2950 0076 8DF80870 		strb	r7, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 2951              		.loc 2 313 3 is_stmt 1 view .LVU781
 314:src/console.c **** }
 2952              		.loc 2 314 3 view .LVU782
 2953 007a 98E80300 		ldm	r8, {r0, r1}
 2954 007e FFF7FEFF 		bl	process_keycode_with_shift
 2955              	.LVL223:
 314:src/console.c **** }
 2956              		.loc 2 314 3 is_stmt 0 view .LVU783
 2957              	.LBE120:
 2958              	.LBE122:
 322:src/console.c ****     r.key_34s = K_RELEASE;
 2959              		.loc 2 322 5 is_stmt 1 view .LVU784
 2960              	.LBB123:
 2961              	.LBI123:
 310:src/console.c ****   struct _ndmap temp;
 2962              		.loc 2 310 6 view .LVU785
 2963              	.LBB124:
 311:src/console.c ****   temp.key_34s = key;
 2964              		.loc 2 311 3 view .LVU786
ARM GAS  /tmp/ccp3OFc8.s 			page 81


 312:src/console.c ****   temp.shift = shift;
 2965              		.loc 2 312 3 view .LVU787
 312:src/console.c ****   temp.shift = shift;
 2966              		.loc 2 312 16 is_stmt 0 view .LVU788
 2967 0082 0B23     		movs	r3, #11
 2968 0084 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 2969              		.loc 2 313 3 is_stmt 1 view .LVU789
 314:src/console.c **** }
 2970              		.loc 2 314 3 view .LVU790
 313:src/console.c ****   process_keycode_with_shift (temp);
 2971              		.loc 2 313 14 is_stmt 0 view .LVU791
 2972 0088 0396     		str	r6, [sp, #12]
 314:src/console.c **** }
 2973              		.loc 2 314 3 view .LVU792
 2974 008a 98E80300 		ldm	r8, {r0, r1}
 2975 008e FFF7FEFF 		bl	process_keycode_with_shift
 2976              	.LVL224:
 314:src/console.c **** }
 2977              		.loc 2 314 3 view .LVU793
 2978              	.LBE124:
 2979              	.LBE123:
 323:src/console.c ****     r.shift = 0; // set up for release;
 2980              		.loc 2 323 5 is_stmt 1 view .LVU794
 324:src/console.c ****     break;
 2981              		.loc 2 324 5 view .LVU795
 325:src/console.c ****   case ONSTO: // flash_backup()
 2982              		.loc 2 325 5 view .LVU796
 324:src/console.c ****     break;
 2983              		.loc 2 324 13 is_stmt 0 view .LVU797
 2984 0092 3146     		mov	r1, r6
 323:src/console.c ****     r.shift = 0; // set up for release;
 2985              		.loc 2 323 15 view .LVU798
 2986 0094 3B46     		mov	r3, r7
 2987              	.LVL225:
 2988              	.L278:
 395:src/console.c ****     }
 396:src/console.c ****     else {
 397:src/console.c ****       do_now (K_CMPLX, 0);
 398:src/console.c ****       do_now (K_RELEASE, 0);
 399:src/console.c ****       r = no_key;
 400:src/console.c ****     }
 401:src/console.c ****   default:
 402:src/console.c ****     r = no_key;
 403:src/console.c ****   }
 404:src/console.c ****   return r;
 2989              		.loc 2 404 3 is_stmt 1 view .LVU799
 2990              		.loc 2 404 10 is_stmt 0 view .LVU800
 2991 0096 8DF80030 		strb	r3, [sp]
 2992 009a 0191     		str	r1, [sp, #4]
 2993 009c 94E80300 		ldm	r4, {r0, r1}
 2994              	.LVL226:
 2995              		.loc 2 404 10 view .LVU801
 2996 00a0 85E80300 		stm	r5, {r0, r1}
 405:src/console.c **** }
 2997              		.loc 2 405 1 view .LVU802
 2998 00a4 2846     		mov	r0, r5
ARM GAS  /tmp/ccp3OFc8.s 			page 82


 2999 00a6 04B0     		add	sp, sp, #16
 3000              		.cfi_remember_state
 3001              		.cfi_def_cfa_offset 24
 3002              		@ sp needed
 3003 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3004              	.LVL227:
 3005              	.L276:
 3006              		.cfi_restore_state
 327:src/console.c ****     reset_shift();
 3007              		.loc 2 327 5 is_stmt 1 view .LVU803
 3008 00ac AD20     		movs	r0, #173
 3009              	.LVL228:
 327:src/console.c ****     reset_shift();
 3010              		.loc 2 327 5 is_stmt 0 view .LVU804
 3011 00ae FFF7FEFF 		bl	flash_backup
 3012              	.LVL229:
 328:src/console.c ****     r = no_key;
 3013              		.loc 2 328 5 is_stmt 1 view .LVU805
 3014              	.L290:
 333:src/console.c ****     r = no_key;
 3015              		.loc 2 333 5 view .LVU806
 3016 00b2 FFF7FEFF 		bl	reset_shift
 3017              	.LVL230:
 334:src/console.c ****     break;
 3018              		.loc 2 334 5 view .LVU807
 334:src/console.c ****     break;
 3019              		.loc 2 334 7 is_stmt 0 view .LVU808
 3020 00b6 2E4B     		ldr	r3, .L293+8
 3021 00b8 93E80300 		ldm	r3, {r0, r1}
 3022 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3023              	.LVL231:
 335:src/console.c ****   case WRLIB: // save library file
 3024              		.loc 2 335 5 is_stmt 1 view .LVU809
 334:src/console.c ****     break;
 3025              		.loc 2 334 7 is_stmt 0 view .LVU810
 3026 00be 84E80300 		stm	r4, {r0, r1}
 335:src/console.c ****   case WRLIB: // save library file
 3027              		.loc 2 335 5 view .LVU811
 3028 00c2 E8E7     		b	.L278
 3029              	.LVL232:
 3030              	.L275:
 332:src/console.c ****     reset_shift();
 3031              		.loc 2 332 5 is_stmt 1 view .LVU812
 3032 00c4 AE20     		movs	r0, #174
 3033              	.LVL233:
 332:src/console.c ****     reset_shift();
 3034              		.loc 2 332 5 is_stmt 0 view .LVU813
 3035 00c6 FFF7FEFF 		bl	flash_restore
 3036              	.LVL234:
 3037 00ca F2E7     		b	.L290
 3038              	.LVL235:
 3039              	.L274:
 337:src/console.c ****     reset_shift();
 3040              		.loc 2 337 5 is_stmt 1 view .LVU814
 3041 00cc 0120     		movs	r0, #1
 3042              	.LVL236:
 337:src/console.c ****     reset_shift();
ARM GAS  /tmp/ccp3OFc8.s 			page 83


 3043              		.loc 2 337 5 is_stmt 0 view .LVU815
 3044 00ce FFF7FEFF 		bl	save_lib_file
 3045              	.LVL237:
 338:src/console.c ****     r = no_key;
 3046              		.loc 2 338 5 is_stmt 1 view .LVU816
 3047 00d2 EEE7     		b	.L290
 3048              	.LVL238:
 3049              	.L273:
 342:src/console.c ****     reset_shift();
 3050              		.loc 2 342 5 view .LVU817
 3051 00d4 0120     		movs	r0, #1
 3052              	.LVL239:
 342:src/console.c ****     reset_shift();
 3053              		.loc 2 342 5 is_stmt 0 view .LVU818
 3054 00d6 FFF7FEFF 		bl	load_lib_file
 3055              	.LVL240:
 343:src/console.c ****     r = no_key;
 3056              		.loc 2 343 5 is_stmt 1 view .LVU819
 3057 00da EAE7     		b	.L290
 3058              	.LVL241:
 3059              	.L272:
 347:src/console.c ****     reset_shift();
 3060              		.loc 2 347 5 view .LVU820
 3061 00dc 0120     		movs	r0, #1
 3062              	.LVL242:
 347:src/console.c ****     reset_shift();
 3063              		.loc 2 347 5 is_stmt 0 view .LVU821
 3064 00de FFF7FEFF 		bl	save_ram_file
 3065              	.LVL243:
 348:src/console.c ****     r = no_key;
 3066              		.loc 2 348 5 is_stmt 1 view .LVU822
 3067 00e2 E6E7     		b	.L290
 3068              	.LVL244:
 3069              	.L271:
 352:src/console.c ****     reset_shift();
 3070              		.loc 2 352 5 view .LVU823
 3071 00e4 0120     		movs	r0, #1
 3072              	.LVL245:
 352:src/console.c ****     reset_shift();
 3073              		.loc 2 352 5 is_stmt 0 view .LVU824
 3074 00e6 FFF7FEFF 		bl	load_ram_file
 3075              	.LVL246:
 353:src/console.c ****     r = no_key;
 3076              		.loc 2 353 5 is_stmt 1 view .LVU825
 3077 00ea E2E7     		b	.L290
 3078              	.LVL247:
 3079              	.L270:
 357:src/console.c ****     reset_shift();
 3080              		.loc 2 357 5 view .LVU826
 3081 00ec FFF7FEFF 		bl	load_prog_file
 3082              	.LVL248:
 358:src/console.c ****     r = no_key;
 3083              		.loc 2 358 5 view .LVU827
 3084 00f0 DFE7     		b	.L290
 3085              	.LVL249:
 3086              	.L269:
 367:src/console.c ****     reset_shift();
ARM GAS  /tmp/ccp3OFc8.s 			page 84


 3087              		.loc 2 367 5 view .LVU828
 3088 00f2 204B     		ldr	r3, .L293+12
 3089 00f4 2048     		ldr	r0, .L293+16
 3090              	.LVL250:
 367:src/console.c ****     reset_shift();
 3091              		.loc 2 367 5 is_stmt 0 view .LVU829
 3092 00f6 9847     		blx	r3
 3093              	.LVL251:
 368:src/console.c ****     r = no_key;
 3094              		.loc 2 368 5 is_stmt 1 view .LVU830
 3095 00f8 DBE7     		b	.L290
 3096              	.LVL252:
 3097              	.L268:
 362:src/console.c ****     reset_shift();
 3098              		.loc 2 362 5 view .LVU831
 3099 00fa FFF7FEFF 		bl	save_prog_file
 3100              	.LVL253:
 363:src/console.c ****     r = no_key;
 3101              		.loc 2 363 5 view .LVU832
 3102 00fe D8E7     		b	.L290
 3103              	.LVL254:
 3104              	.L267:
 372:src/console.c ****     reset_shift();
 3105              		.loc 2 372 5 view .LVU833
 3106 0100 FFF7FEFF 		bl	do_all_dots
 3107              	.LVL255:
 373:src/console.c ****     r = no_key;
 3108              		.loc 2 373 5 view .LVU834
 3109 0104 D5E7     		b	.L290
 3110              	.LVL256:
 3111              	.L266:
 377:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 3112              		.loc 2 377 5 view .LVU835
 3113              	.LBB125:
 3114              	.LBI125:
 310:src/console.c ****   struct _ndmap temp;
 3115              		.loc 2 310 6 view .LVU836
 3116              	.LBB126:
 311:src/console.c ****   temp.key_34s = key;
 3117              		.loc 2 311 3 view .LVU837
 312:src/console.c ****   temp.shift = shift;
 3118              		.loc 2 312 3 view .LVU838
 312:src/console.c ****   temp.shift = shift;
 3119              		.loc 2 312 16 is_stmt 0 view .LVU839
 3120 0106 6323     		movs	r3, #99
 313:src/console.c ****   process_keycode_with_shift (temp);
 3121              		.loc 2 313 14 view .LVU840
 3122 0108 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3123              		.loc 2 312 16 view .LVU841
 3124 010a 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3125              		.loc 2 313 3 is_stmt 1 view .LVU842
 313:src/console.c ****   process_keycode_with_shift (temp);
 3126              		.loc 2 313 14 is_stmt 0 view .LVU843
 3127 010e 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
ARM GAS  /tmp/ccp3OFc8.s 			page 85


 3128              		.loc 2 314 3 is_stmt 1 view .LVU844
 3129 0110 02AE     		add	r6, sp, #8
 3130 0112 96E80300 		ldm	r6, {r0, r1}
 3131              	.LVL257:
 314:src/console.c **** }
 3132              		.loc 2 314 3 is_stmt 0 view .LVU845
 3133 0116 FFF7FEFF 		bl	process_keycode_with_shift
 3134              	.LVL258:
 314:src/console.c **** }
 3135              		.loc 2 314 3 view .LVU846
 3136              	.LBE126:
 3137              	.LBE125:
 378:src/console.c ****     r = no_key;
 3138              		.loc 2 378 5 is_stmt 1 view .LVU847
 3139              	.LBB127:
 3140              	.LBI127:
 310:src/console.c ****   struct _ndmap temp;
 3141              		.loc 2 310 6 view .LVU848
 3142              	.LBB128:
 311:src/console.c ****   temp.key_34s = key;
 3143              		.loc 2 311 3 view .LVU849
 312:src/console.c ****   temp.shift = shift;
 3144              		.loc 2 312 3 view .LVU850
 312:src/console.c ****   temp.shift = shift;
 3145              		.loc 2 312 16 is_stmt 0 view .LVU851
 3146 011a 3323     		movs	r3, #51
 3147              	.LVL259:
 3148              	.L291:
 312:src/console.c ****   temp.shift = shift;
 3149              		.loc 2 312 16 view .LVU852
 3150              	.LBE128:
 3151              	.LBE127:
 3152              	.LBB129:
 3153              	.LBB130:
 313:src/console.c ****   process_keycode_with_shift (temp);
 3154              		.loc 2 313 14 view .LVU853
 3155 011c 0397     		str	r7, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 3156              		.loc 2 312 16 view .LVU854
 3157 011e 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3158              		.loc 2 313 3 is_stmt 1 view .LVU855
 314:src/console.c **** }
 3159              		.loc 2 314 3 view .LVU856
 3160 0122 96E80300 		ldm	r6, {r0, r1}
 3161 0126 FFF7FEFF 		bl	process_keycode_with_shift
 3162              	.LVL260:
 3163              	.LBE130:
 3164              	.LBE129:
 399:src/console.c ****     }
 3165              		.loc 2 399 7 view .LVU857
 3166              	.L261:
 402:src/console.c ****   }
 3167              		.loc 2 402 5 view .LVU858
 402:src/console.c ****   }
 3168              		.loc 2 402 7 is_stmt 0 view .LVU859
 3169 012a 114B     		ldr	r3, .L293+8
ARM GAS  /tmp/ccp3OFc8.s 			page 86


 3170 012c 93E80300 		ldm	r3, {r0, r1}
 3171 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3172              	.LVL261:
 402:src/console.c ****   }
 3173              		.loc 2 402 7 view .LVU860
 3174 0132 84E80300 		stm	r4, {r0, r1}
 3175 0136 AEE7     		b	.L278
 3176              	.LVL262:
 3177              	.L265:
 382:src/console.c ****     reset_shift();
 3178              		.loc 2 382 5 is_stmt 1 view .LVU861
 3179 0138 FFF7FEFF 		bl	toggle_default_menu
 3180              	.LVL263:
 383:src/console.c ****     r = no_key;
 3181              		.loc 2 383 5 view .LVU862
 3182 013c B9E7     		b	.L290
 3183              	.LVL264:
 3184              	.L264:
 387:src/console.c ****     reset_shift();
 3185              		.loc 2 387 5 view .LVU863
 3186 013e FFF7FEFF 		bl	build_user_menu
 3187              	.LVL265:
 388:src/console.c ****     r = no_key;;
 3188              		.loc 2 388 5 view .LVU864
 3189 0142 B6E7     		b	.L290
 3190              	.LVL266:
 3191              	.L279:
 397:src/console.c ****       do_now (K_RELEASE, 0);
 3192              		.loc 2 397 7 view .LVU865
 3193              	.LBB132:
 3194              	.LBI132:
 310:src/console.c ****   struct _ndmap temp;
 3195              		.loc 2 310 6 view .LVU866
 3196              	.LBB133:
 311:src/console.c ****   temp.key_34s = key;
 3197              		.loc 2 311 3 view .LVU867
 312:src/console.c ****   temp.shift = shift;
 3198              		.loc 2 312 3 view .LVU868
 312:src/console.c ****   temp.shift = shift;
 3199              		.loc 2 312 16 is_stmt 0 view .LVU869
 3200 0144 2D23     		movs	r3, #45
 313:src/console.c ****   process_keycode_with_shift (temp);
 3201              		.loc 2 313 14 view .LVU870
 3202 0146 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3203              		.loc 2 312 16 view .LVU871
 3204 0148 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3205              		.loc 2 313 3 is_stmt 1 view .LVU872
 313:src/console.c ****   process_keycode_with_shift (temp);
 3206              		.loc 2 313 14 is_stmt 0 view .LVU873
 3207 014c 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3208              		.loc 2 314 3 is_stmt 1 view .LVU874
 3209 014e 02AE     		add	r6, sp, #8
 3210 0150 96E80300 		ldm	r6, {r0, r1}
 3211              	.LVL267:
ARM GAS  /tmp/ccp3OFc8.s 			page 87


 314:src/console.c **** }
 3212              		.loc 2 314 3 is_stmt 0 view .LVU875
 3213 0154 FFF7FEFF 		bl	process_keycode_with_shift
 3214              	.LVL268:
 314:src/console.c **** }
 3215              		.loc 2 314 3 view .LVU876
 3216              	.LBE133:
 3217              	.LBE132:
 398:src/console.c ****       r = no_key;
 3218              		.loc 2 398 7 is_stmt 1 view .LVU877
 3219              	.LBB134:
 3220              	.LBI129:
 310:src/console.c ****   struct _ndmap temp;
 3221              		.loc 2 310 6 view .LVU878
 3222              	.LBB131:
 311:src/console.c ****   temp.key_34s = key;
 3223              		.loc 2 311 3 view .LVU879
 312:src/console.c ****   temp.shift = shift;
 3224              		.loc 2 312 3 view .LVU880
 312:src/console.c ****   temp.shift = shift;
 3225              		.loc 2 312 16 is_stmt 0 view .LVU881
 3226 0158 6323     		movs	r3, #99
 3227 015a DFE7     		b	.L291
 3228              	.LVL269:
 3229              	.L292:
 312:src/console.c ****   temp.shift = shift;
 3230              		.loc 2 312 16 view .LVU882
 3231              	.LBE131:
 3232              	.LBE134:
 3233              	.LBB135:
 3234              	.LBB114:
 111:src/menu.c    ****   }
 3235              		.loc 1 111 5 is_stmt 1 view .LVU883
 111:src/menu.c    ****   }
 3236              		.loc 1 111 18 is_stmt 0 view .LVU884
 3237 015c 0749     		ldr	r1, .L293+20
 3238 015e 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3239 0160 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3240              		.loc 1 119 3 is_stmt 1 view .LVU885
 3241              	.L281:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3242              		.loc 1 119 43 view .LVU886
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3243              		.loc 1 119 53 is_stmt 0 view .LVU887
 3244 0162 074A     		ldr	r2, .L293+24
 3245 0164 1370     		strb	r3, [r2]
 3246 0166 76E7     		b	.L282
 3247              	.L294:
 3248              		.align	2
 3249              	.L293:
 3250 0168 00000000 		.word	main_ram
 3251 016c 00000000 		.word	.LANCHOR1
 3252 0170 00000000 		.word	.LANCHOR10
 3253 0174 49040008 		.word	134218825
 3254 0178 00000000 		.word	.LC11
 3255 017c 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/ccp3OFc8.s 			page 88


 3256 0180 00000000 		.word	.LANCHOR3
 3257              	.LBE114:
 3258              	.LBE135:
 3259              		.cfi_endproc
 3260              	.LFE31:
 3262              		.section	.text.program_main,"ax",%progbits
 3263              		.align	1
 3264              		.p2align 2,,3
 3265              		.global	program_main
 3266              		.syntax unified
 3267              		.thumb
 3268              		.thumb_func
 3269              		.fpu fpv4-sp-d16
 3271              	program_main:
 3272              	.LFB32:
 406:src/console.c **** 
 407:src/console.c **** void program_main(){
 3273              		.loc 2 407 20 is_stmt 1 view -0
 3274              		.cfi_startproc
 3275              		@ args = 0, pretend = 0, frame = 224
 3276              		@ frame_needed = 0, uses_anonymous_args = 0
 408:src/console.c ****   int c;
 3277              		.loc 2 408 3 view .LVU889
 409:src/console.c ****   struct _ndmap remapped;
 3278              		.loc 2 409 3 view .LVU890
 410:src/console.c **** 
 411:src/console.c ****   init_mem();
 3279              		.loc 2 411 3 view .LVU891
 407:src/console.c ****   int c;
 3280              		.loc 2 407 20 is_stmt 0 view .LVU892
 3281 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3282              		.cfi_def_cfa_offset 32
 3283              		.cfi_offset 4, -32
 3284              		.cfi_offset 5, -28
 3285              		.cfi_offset 6, -24
 3286              		.cfi_offset 7, -20
 3287              		.cfi_offset 8, -16
 3288              		.cfi_offset 9, -12
 3289              		.cfi_offset 10, -8
 3290              		.cfi_offset 14, -4
 3291 0004 B8B0     		sub	sp, sp, #224
 3292              		.cfi_def_cfa_offset 256
 3293              		.loc 2 411 3 view .LVU893
 3294 0006 FFF7FEFF 		bl	init_mem
 3295              	.LVL270:
 412:src/console.c ****   init_RegionTab();
 3296              		.loc 2 412 3 is_stmt 1 view .LVU894
 3297 000a FFF7FEFF 		bl	init_RegionTab
 3298              	.LVL271:
 413:src/console.c ****   init_34s();
 3299              		.loc 2 413 3 view .LVU895
 3300 000e FFF7FEFF 		bl	init_34s
 3301              	.LVL272:
 414:src/console.c ****   State2.flags = 1;  
 3302              		.loc 2 414 3 view .LVU896
 3303              		.loc 2 414 16 is_stmt 0 view .LVU897
 3304 0012 B34A     		ldr	r2, .L396
ARM GAS  /tmp/ccp3OFc8.s 			page 89


 3305 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3306 0016 43F00103 		orr	r3, r3, #1
 3307 001a 1376     		strb	r3, [r2, #24]
 415:src/console.c ****   check_create_wp34sdir();
 3308              		.loc 2 415 3 is_stmt 1 view .LVU898
 3309 001c FFF7FEFF 		bl	check_create_wp34sdir
 3310              	.LVL273:
 416:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3311              		.loc 2 416 3 view .LVU899
 3312              		.loc 2 416 8 is_stmt 0 view .LVU900
 3313 0020 0020     		movs	r0, #0
 3314 0022 FFF7FEFF 		bl	load_ram_file
 3315              	.LVL274:
 3316              		.loc 2 416 6 view .LVU901
 3317 0026 08B9     		cbnz	r0, .L296
 3318              		.loc 2 416 26 is_stmt 1 discriminator 1 view .LVU902
 3319              		.loc 2 416 34 is_stmt 0 discriminator 1 view .LVU903
 3320 0028 AE4B     		ldr	r3, .L396+4
 3321 002a 1860     		str	r0, [r3]
 3322              	.L296:
 417:src/console.c ****   load_backup_file(0);
 3323              		.loc 2 417 3 is_stmt 1 view .LVU904
 418:src/console.c ****   load_lib_file(0);
 419:src/console.c ****   t20->newln = 0;
 3324              		.loc 2 419 3 is_stmt 0 view .LVU905
 3325 002c AE4C     		ldr	r4, .L396+8
 3326 002e AF4E     		ldr	r6, .L396+12
 420:src/console.c ****   t20->lnfill = 0;
 421:src/console.c ****   t20->fixed = 1;
 422:src/console.c ****   t20->xspc = -2;
 423:src/console.c ****   t20->bgfill = 0;
 424:src/console.c ****   run_menu_item_app = run_menu_item;
 425:src/console.c ****   menu_line_str_app = menu_line_str;
 426:src/console.c **** 
 427:src/console.c ****   display();
 428:src/console.c ****   display_current_menu();
 429:src/console.c ****   lcd_refresh();
 430:src/console.c ****   JustDisplayed = 0;
 431:src/console.c ****   /*
 432:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 433:src/console.c ****     Sleeps peacefully while waiting for a key.
 434:src/console.c ****     Handles (in principle!) turning off and on.
 435:src/console.c ****     =================
 436:src/console.c ****     Main event loop
 437:src/console.c ****     =================
 438:src/console.c **** 
 439:src/console.c ****     Status flags:
 440:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 441:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 442:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 443:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 444:src/console.c ****   */
 445:src/console.c ****   for(;;) {
 446:src/console.c **** 
 447:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 448:src/console.c ****       {
 449:src/console.c **** 	CLR_ST(STAT_RUNNING);
ARM GAS  /tmp/ccp3OFc8.s 			page 90


 450:src/console.c **** 	sys_sleep();
 451:src/console.c ****       }
 452:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 3327              		.loc 2 452 35 view .LVU906
 3328 0030 AF4F     		ldr	r7, .L396+16
 453:src/console.c ****     {
 454:src/console.c ****       CLR_ST(STAT_RUNNING);
 455:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3329              		.loc 2 455 7 view .LVU907
 3330 0032 DFF83083 		ldr	r8, .L396+132
 417:src/console.c ****   load_lib_file(0);
 3331              		.loc 2 417 3 view .LVU908
 3332 0036 0020     		movs	r0, #0
 3333 0038 FFF7FEFF 		bl	load_backup_file
 3334              	.LVL275:
 418:src/console.c ****   t20->newln = 0;
 3335              		.loc 2 418 3 is_stmt 1 view .LVU909
 3336 003c 0020     		movs	r0, #0
 3337 003e FFF7FEFF 		bl	load_lib_file
 3338              	.LVL276:
 419:src/console.c ****   t20->lnfill = 0;
 3339              		.loc 2 419 3 view .LVU910
 3340 0042 236B     		ldr	r3, [r4, #48]
 420:src/console.c ****   t20->fixed = 1;
 3341              		.loc 2 420 3 view .LVU911
 421:src/console.c ****   t20->xspc = -2;
 3342              		.loc 2 421 3 view .LVU912
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3343              		.loc 2 424 21 is_stmt 0 view .LVU913
 3344 0044 AB4A     		ldr	r2, .L396+20
 421:src/console.c ****   t20->xspc = -2;
 3345              		.loc 2 421 14 view .LVU914
 3346 0046 0121     		movs	r1, #1
 3347 0048 1974     		strb	r1, [r3, #16]
 422:src/console.c ****   t20->bgfill = 0;
 3348              		.loc 2 422 3 is_stmt 1 view .LVU915
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3349              		.loc 2 423 15 is_stmt 0 view .LVU916
 3350 004a 0025     		movs	r5, #0
 422:src/console.c ****   t20->bgfill = 0;
 3351              		.loc 2 422 13 view .LVU917
 3352 004c FE21     		movs	r1, #254
 3353 004e 9973     		strb	r1, [r3, #14]
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3354              		.loc 2 423 3 is_stmt 1 view .LVU918
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3355              		.loc 2 423 15 is_stmt 0 view .LVU919
 3356 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 419:src/console.c ****   t20->lnfill = 0;
 3357              		.loc 2 419 14 view .LVU920
 3358 0052 1D75     		strb	r5, [r3, #20]
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3359              		.loc 2 424 3 is_stmt 1 view .LVU921
 425:src/console.c **** 
 3360              		.loc 2 425 21 is_stmt 0 view .LVU922
 3361 0054 A84B     		ldr	r3, .L396+24
 424:src/console.c ****   menu_line_str_app = menu_line_str;
ARM GAS  /tmp/ccp3OFc8.s 			page 91


 3362              		.loc 2 424 21 view .LVU923
 3363 0056 E260     		str	r2, [r4, #12]
 425:src/console.c **** 
 3364              		.loc 2 425 3 is_stmt 1 view .LVU924
 425:src/console.c **** 
 3365              		.loc 2 425 21 is_stmt 0 view .LVU925
 3366 0058 2361     		str	r3, [r4, #16]
 427:src/console.c ****   display_current_menu();
 3367              		.loc 2 427 3 is_stmt 1 view .LVU926
 3368 005a FFF7FEFF 		bl	display
 3369              	.LVL277:
 428:src/console.c ****   lcd_refresh();
 3370              		.loc 2 428 3 view .LVU927
 3371 005e FFF7FEFF 		bl	display_current_menu
 3372              	.LVL278:
 429:src/console.c ****   JustDisplayed = 0;
 3373              		.loc 2 429 3 view .LVU928
 3374 0062 A64B     		ldr	r3, .L396+28
 3375 0064 9847     		blx	r3
 3376              	.LVL279:
 430:src/console.c ****   /*
 3377              		.loc 2 430 3 view .LVU929
 430:src/console.c ****   /*
 3378              		.loc 2 430 17 is_stmt 0 view .LVU930
 3379 0066 A64B     		ldr	r3, .L396+32
 3380 0068 1D60     		str	r5, [r3]
 3381              	.L297:
 445:src/console.c **** 
 3382              		.loc 2 445 3 is_stmt 1 view .LVU931
 447:src/console.c ****       {
 3383              		.loc 2 447 5 view .LVU932
 447:src/console.c ****       {
 3384              		.loc 2 447 10 is_stmt 0 view .LVU933
 3385 006a 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3386              		.loc 2 447 8 view .LVU934
 3387 006c 9B05     		lsls	r3, r3, #22
 3388 006e 40F1BE80 		bpl	.L298
 447:src/console.c ****       {
 3389              		.loc 2 447 30 discriminator 1 view .LVU935
 3390 0072 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3391              		.loc 2 447 27 discriminator 1 view .LVU936
 3392 0074 5D07     		lsls	r5, r3, #29
 3393 0076 40F1BA80 		bpl	.L298
 449:src/console.c **** 	sys_sleep();
 3394              		.loc 2 449 2 is_stmt 1 view .LVU937
 3395 007a 2368     		ldr	r3, [r4]
 450:src/console.c ****       }
 3396              		.loc 2 450 2 is_stmt 0 view .LVU938
 3397 007c A14A     		ldr	r2, .L396+36
 449:src/console.c **** 	sys_sleep();
 3398              		.loc 2 449 2 view .LVU939
 3399 007e 23F00203 		bic	r3, r3, #2
 3400 0082 2360     		str	r3, [r4]
 450:src/console.c ****       }
 3401              		.loc 2 450 2 is_stmt 1 view .LVU940
ARM GAS  /tmp/ccp3OFc8.s 			page 92


 3402 0084 9047     		blx	r2
 3403              	.LVL280:
 3404              	.L299:
 456:src/console.c ****       sys_sleep();
 457:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 458:src/console.c **** 	key_push (K_HEARTBEAT);
 459:src/console.c **** 	if (Pause > 0) Pause--;
 460:src/console.c ****       }
 461:src/console.c ****       sys_timer_disable(0); // stop timer
 462:src/console.c ****     }
 463:src/console.c ****     
 464:src/console.c ****     // Wakeup in off state or going to sleep
 465:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3405              		.loc 2 465 5 view .LVU941
 3406              		.loc 2 465 9 is_stmt 0 view .LVU942
 3407 0086 2368     		ldr	r3, [r4]
 3408              		.loc 2 465 8 view .LVU943
 3409 0088 9805     		lsls	r0, r3, #22
 3410 008a 00F1D780 		bmi	.L305
 3411              	.L391:
 3412              		.loc 2 465 29 discriminator 1 view .LVU944
 3413 008e 2368     		ldr	r3, [r4]
 3414              		.loc 2 465 26 discriminator 1 view .LVU945
 3415 0090 5907     		lsls	r1, r3, #29
 3416 0092 00F1D380 		bmi	.L305
 466:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 467:src/console.c ****         // Going to off mode
 468:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 469:src/console.c ****         draw_power_off_image(1);
 470:src/console.c **** 
 471:src/console.c ****         LCD_power_off(0);
 472:src/console.c ****         SET_ST(STAT_SUSPENDED);
 473:src/console.c ****         SET_ST(STAT_OFF);
 474:src/console.c ****       }
 475:src/console.c ****       // Already in OFF -> just continue to sleep above
 476:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 477:src/console.c ****       // thus reaching the sleep()
 478:src/console.c ****     }
 479:src/console.c **** 
 480:src/console.c ****     // Well, we are woken-up
 481:src/console.c ****     SET_ST(STAT_RUNNING);
 3417              		.loc 2 481 5 is_stmt 1 view .LVU946
 3418 0096 2368     		ldr	r3, [r4]
 3419 0098 43F00203 		orr	r3, r3, #2
 3420 009c 2360     		str	r3, [r4]
 482:src/console.c **** 
 483:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 484:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3421              		.loc 2 484 5 view .LVU947
 3422 009e 2368     		ldr	r3, [r4]
 3423 00a0 23F00403 		bic	r3, r3, #4
 3424 00a4 2360     		str	r3, [r4]
 485:src/console.c **** 
 486:src/console.c ****     // Get up from OFF state
 487:src/console.c ****     if ( ST(STAT_OFF) ) {
 3425              		.loc 2 487 5 view .LVU948
 3426              		.loc 2 487 10 is_stmt 0 view .LVU949
ARM GAS  /tmp/ccp3OFc8.s 			page 93


 3427 00a6 2368     		ldr	r3, [r4]
 3428              		.loc 2 487 8 view .LVU950
 3429 00a8 DA06     		lsls	r2, r3, #27
 3430 00aa 0ED5     		bpl	.L310
 488:src/console.c ****       LCD_power_on();
 3431              		.loc 2 488 7 is_stmt 1 view .LVU951
 3432 00ac 964B     		ldr	r3, .L396+40
 3433 00ae 9847     		blx	r3
 3434              	.LVL281:
 489:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3435              		.loc 2 489 7 view .LVU952
 3436 00b0 964B     		ldr	r3, .L396+44
 3437 00b2 9847     		blx	r3
 3438              	.LVL282:
 490:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3439              		.loc 2 490 7 view .LVU953
 3440 00b4 964B     		ldr	r3, .L396+48
 3441 00b6 9847     		blx	r3
 3442              	.LVL283:
 491:src/console.c **** 
 492:src/console.c ****       CLR_ST(STAT_OFF);
 3443              		.loc 2 492 7 view .LVU954
 3444 00b8 2368     		ldr	r3, [r4]
 493:src/console.c **** 
 494:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3445              		.loc 2 494 13 is_stmt 0 view .LVU955
 3446 00ba 964A     		ldr	r2, .L396+52
 492:src/console.c **** 
 3447              		.loc 2 492 7 view .LVU956
 3448 00bc 23F01003 		bic	r3, r3, #16
 3449 00c0 2360     		str	r3, [r4]
 3450              		.loc 2 494 7 is_stmt 1 view .LVU957
 3451              		.loc 2 494 13 is_stmt 0 view .LVU958
 3452 00c2 9047     		blx	r2
 3453              	.LVL284:
 3454              		.loc 2 494 10 view .LVU959
 3455 00c4 08B9     		cbnz	r0, .L310
 495:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3456              		.loc 2 495 9 is_stmt 1 view .LVU960
 3457 00c6 944B     		ldr	r3, .L396+56
 3458 00c8 9847     		blx	r3
 3459              	.LVL285:
 3460              	.L310:
 496:src/console.c ****     }
 497:src/console.c **** 
 498:src/console.c ****     // Key is ready -> clear auto off timer
 499:src/console.c ****     //    if ( !key_empty() )
 500:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 501:src/console.c ****     // Fetch the key
 502:src/console.c ****     //  < 0 -> No key event
 503:src/console.c ****     //  > 0 -> Key pressed
 504:src/console.c ****     // == 0 -> Key released
 505:src/console.c ****     c = key_pop();
 3461              		.loc 2 505 5 view .LVU961
 3462              		.loc 2 505 9 is_stmt 0 view .LVU962
 3463 00ca 944B     		ldr	r3, .L396+60
 3464 00cc 9847     		blx	r3
ARM GAS  /tmp/ccp3OFc8.s 			page 94


 3465              	.LVL286:
 506:src/console.c **** #ifdef INCLUDE_STOPWATCH
 507:src/console.c ****     if ( KeyCallback != NULL ) {
 3466              		.loc 2 507 22 view .LVU963
 3467 00ce 3368     		ldr	r3, [r6]
 505:src/console.c **** #ifdef INCLUDE_STOPWATCH
 3468              		.loc 2 505 9 view .LVU964
 3469 00d0 0546     		mov	r5, r0
 3470              	.LVL287:
 3471              		.loc 2 507 5 is_stmt 1 view .LVU965
 3472              		.loc 2 507 8 is_stmt 0 view .LVU966
 3473 00d2 002B     		cmp	r3, #0
 3474 00d4 00F04881 		beq	.L312
 508:src/console.c ****       c = (*KeyCallback)( c );
 3475              		.loc 2 508 7 is_stmt 1 view .LVU967
 3476              		.loc 2 508 12 is_stmt 0 view .LVU968
 3477 00d8 9847     		blx	r3
 3478              	.LVL288:
 3479              		.loc 2 508 12 view .LVU969
 3480 00da 0546     		mov	r5, r0
 3481              	.LVL289:
 3482              	.L313:
 509:src/console.c ****     }
 510:src/console.c ****     else if ( StopWatchRunning && ( Ticker % STOPWATCH_BLINK ) == 0 ) {
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 512:src/console.c ****       finish_display();
 513:src/console.c ****     }
 514:src/console.c **** #endif
 515:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 3483              		.loc 2 515 5 is_stmt 1 view .LVU970
 3484              		.loc 2 515 8 is_stmt 0 view .LVU971
 3485 00dc 622D     		cmp	r5, #98
 3486 00de 00F0C780 		beq	.L314
 3487              		.loc 2 515 29 discriminator 1 view .LVU972
 3488 00e2 002D     		cmp	r5, #0
 3489 00e4 40F3C180 		ble	.L315
 516:src/console.c ****       reset_auto_off();
 3490              		.loc 2 516 7 is_stmt 1 view .LVU973
 3491 00e8 8D4B     		ldr	r3, .L396+64
 3492 00ea 9847     		blx	r3
 3493              	.LVL290:
 517:src/console.c ****       start_key_timer();
 3494              		.loc 2 517 7 view .LVU974
 3495              	.LBB143:
 3496              	.LBI143:
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 3497              		.loc 2 252 6 view .LVU975
 3498              	.LBB144:
 253:src/console.c **** }
 3499              		.loc 2 253 5 view .LVU976
 253:src/console.c **** }
 3500              		.loc 2 253 19 is_stmt 0 view .LVU977
 3501 00ec 8D4B     		ldr	r3, .L396+68
 3502 00ee 9847     		blx	r3
 3503              	.LVL291:
 253:src/console.c **** }
 3504              		.loc 2 253 17 view .LVU978
ARM GAS  /tmp/ccp3OFc8.s 			page 95


 3505 00f0 8D4B     		ldr	r3, .L396+72
 3506              	.LBE144:
 3507              	.LBE143:
 3508              	.LBB146:
 3509              	.LBB147:
  64:src/console.c **** 
 3510              		.loc 2 64 6 view .LVU979
 3511 00f2 632D     		cmp	r5, #99
 3512              	.LBE147:
 3513              	.LBE146:
 3514              	.LBB157:
 3515              	.LBB145:
 253:src/console.c **** }
 3516              		.loc 2 253 17 view .LVU980
 3517 00f4 1860     		str	r0, [r3]
 3518              	.LBE145:
 3519              	.LBE157:
 518:src/console.c ****     }
 519:src/console.c ****     if (c >= 0) {
 3520              		.loc 2 519 5 is_stmt 1 view .LVU981
 520:src/console.c ****       remapped = remap(c);
 3521              		.loc 2 520 7 view .LVU982
 3522              	.LVL292:
 3523              	.LBB158:
 3524              	.LBI146:
  56:src/console.c **** 
 3525              		.loc 2 56 22 view .LVU983
 3526              	.LBB149:
  58:src/console.c **** 
 3527              		.loc 2 58 3 view .LVU984
 3528              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3529              		.loc 3 1 1 view .LVU985
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
ARM GAS  /tmp/ccp3OFc8.s 			page 96


  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3530              		.loc 3 59 3 view .LVU986
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX}, // Complex
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU,  M_Disp}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU,  M_Clear}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
ARM GAS  /tmp/ccp3OFc8.s 			page 97


  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU,  M_Solve}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU,  M_Stats}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU,  M_Base}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU,  M_Flags}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU,  M_Prob}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  96:src/keytran.c ****     {K_SETMENU,  M_User}, // select user menu
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU,  M_Setup1}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU,  M_Last}, // last menu
 114:src/keytran.c ****     {K_SETMENU,  M_Misc}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3531              		.loc 3 117 3 view .LVU987
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU,  M_Swap}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
ARM GAS  /tmp/ccp3OFc8.s 			page 98


 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_MULTI, SETUMEN}, // Set up user menu
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 159:src/keytran.c ****     {K_SETMENU,  M_Setup2}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU,  M_Program}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3532              		.loc 3 175 1 view .LVU988
 176:src/keytran.c ****     {K_RELEASE, -1},
 177:src/keytran.c ****     // Top row of DM42 1--6
 178:src/keytran.c ****     {K00, -1},
 179:src/keytran.c ****     {K01, -1},
 180:src/keytran.c ****     {K02, -1},
 181:src/keytran.c ****     {K03, -1},
 182:src/keytran.c ****     {K04, -1},
 183:src/keytran.c ****     {K05, -1},
 184:src/keytran.c ****     // Next row of DM42 7--12
 185:src/keytran.c ****     {K10, -1},
 186:src/keytran.c ****     {K11, -1},
 187:src/keytran.c ****     {K12, -1},
 188:src/keytran.c ****     {K13, -1},
 189:src/keytran.c ****     {K14, -1},
 190:src/keytran.c ****     {K15, -1},
 191:src/keytran.c ****     // Third row of DM42 13--17
 192:src/keytran.c ****     {K20, -1},
 193:src/keytran.c ****     {K21, -1},
ARM GAS  /tmp/ccp3OFc8.s 			page 99


 194:src/keytran.c ****     {K22, -1},
 195:src/keytran.c ****     {K23, -1},
 196:src/keytran.c ****     {K24, -1},
 197:src/keytran.c ****     // Fourth row of DM42 18--22
 198:src/keytran.c ****     {K30, -1},
 199:src/keytran.c ****     {K31, -1},
 200:src/keytran.c ****     {K32, -1},
 201:src/keytran.c ****     {K33, -1},
 202:src/keytran.c ****     {K34, -1},
 203:src/keytran.c ****     // Fifth row of DM42 23--27
 204:src/keytran.c ****     {K40, -1},
 205:src/keytran.c ****     {K41, -1},
 206:src/keytran.c ****     {K42, -1},
 207:src/keytran.c ****     {K43, -1},
 208:src/keytran.c ****     {K44, -1},
 209:src/keytran.c ****     // Sixth row of DM42 28--32
 210:src/keytran.c ****     {K50, -1},
 211:src/keytran.c ****     {K51, -1},
 212:src/keytran.c ****     {K52, -1},
 213:src/keytran.c ****     {K53, -1},
 214:src/keytran.c ****     {K54, -1},
 215:src/keytran.c ****     // Last row of DM42 33--37
 216:src/keytran.c ****     {K60, -1},
 217:src/keytran.c ****     {K61, -1},
 218:src/keytran.c ****     {K62, -1},
 219:src/keytran.c ****     {K63, -1},
 220:src/keytran.c ****     {K64, -1},
 221:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 222:src/keytran.c ****     {K_NOP, -1},
 223:src/keytran.c ****     {K_NOP, -1},
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 227:src/keytran.c ****     {K_CMPLX, -1},
 228:src/keytran.c ****     {K_NOP, -1},
 229:src/keytran.c ****     {K_NOP, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c **** };
 232:src/keytran.c **** 
 233:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3533              		.loc 3 233 1 view .LVU989
  62:src/console.c **** 
 3534              		.loc 2 62 3 view .LVU990
  64:src/console.c **** 
 3535              		.loc 2 64 3 view .LVU991
  64:src/console.c **** 
 3536              		.loc 2 64 6 is_stmt 0 view .LVU992
 3537 00f6 00F08181 		beq	.L379
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3538              		.loc 2 66 3 is_stmt 1 view .LVU993
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3539              		.loc 2 66 6 is_stmt 0 view .LVU994
 3540 00fa 2C2D     		cmp	r5, #44
 3541 00fc 00F04F81 		beq	.L318
 3542              	.LVL293:
 3543              	.L352:
  71:src/console.c ****     return mapping_running[c];
ARM GAS  /tmp/ccp3OFc8.s 			page 100


 3544              		.loc 2 71 3 is_stmt 1 view .LVU995
  71:src/console.c ****     return mapping_running[c];
 3545              		.loc 2 71 15 is_stmt 0 view .LVU996
 3546 0100 8A4A     		ldr	r2, .L396+76
 3547 0102 8B4B     		ldr	r3, .L396+80
 3548 0104 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3549 0108 1968     		ldr	r1, [r3]
  71:src/console.c ****     return mapping_running[c];
 3550              		.loc 2 71 6 view .LVU997
 3551 010a 59EA0109 		orrs	r9, r9, r1
 3552 010e 40F06881 		bne	.L380
  75:src/console.c ****   
 3553              		.loc 2 75 3 is_stmt 1 view .LVU998
  75:src/console.c ****   
 3554              		.loc 2 75 22 is_stmt 0 view .LVU999
 3555 0112 04A8     		add	r0, sp, #16
 3556 0114 FFF7FEFF 		bl	get_current_menu_ref
 3557              	.LVL294:
  77:src/console.c ****   case KEY_F1:
 3558              		.loc 2 77 3 is_stmt 1 view .LVU1000
 3559 0118 A5F12603 		sub	r3, r5, #38
 3560 011c 052B     		cmp	r3, #5
 3561 011e 00F27781 		bhi	.L320
 3562 0122 DFE813F0 		tbh	[pc, r3, lsl #1]
 3563              	.L322:
 3564 0126 7D01     		.2byte	(.L327-.L322)/2
 3565 0128 0B00     		.2byte	(.L326-.L322)/2
 3566 012a 1500     		.2byte	(.L325-.L322)/2
 3567 012c 1F00     		.2byte	(.L324-.L322)/2
 3568 012e 2900     		.2byte	(.L323-.L322)/2
 3569 0130 3300     		.2byte	(.L321-.L322)/2
 3570              		.p2align 1
 3571              	.L328:
  80:src/console.c ****   case KEY_F2:
 3572              		.loc 2 80 5 view .LVU1001
  80:src/console.c ****   case KEY_F2:
 3573              		.loc 2 80 9 is_stmt 0 view .LVU1002
 3574 0132 FFF7FEFF 		bl	cur_shift
 3575              	.LVL295:
  80:src/console.c ****   case KEY_F2:
 3576              		.loc 2 80 8 view .LVU1003
 3577 0136 0128     		cmp	r0, #1
 3578 0138 00F00882 		beq	.L381
 3579              	.L326:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3580              		.loc 2 82 5 is_stmt 1 view .LVU1004
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3581              		.loc 2 82 9 is_stmt 0 view .LVU1005
 3582 013c FFF7FEFF 		bl	cur_shift
 3583              	.LVL296:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3584              		.loc 2 82 8 view .LVU1006
 3585 0140 0028     		cmp	r0, #0
 3586 0142 00F09A81 		beq	.L382
  83:src/console.c ****   case KEY_F3:
 3587              		.loc 2 83 5 is_stmt 1 view .LVU1007
  83:src/console.c ****   case KEY_F3:
ARM GAS  /tmp/ccp3OFc8.s 			page 101


 3588              		.loc 2 83 9 is_stmt 0 view .LVU1008
 3589 0146 FFF7FEFF 		bl	cur_shift
 3590              	.LVL297:
  83:src/console.c ****   case KEY_F3:
 3591              		.loc 2 83 8 view .LVU1009
 3592 014a 0128     		cmp	r0, #1
 3593 014c 00F0DF81 		beq	.L383
 3594              	.L325:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3595              		.loc 2 85 5 is_stmt 1 view .LVU1010
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3596              		.loc 2 85 9 is_stmt 0 view .LVU1011
 3597 0150 FFF7FEFF 		bl	cur_shift
 3598              	.LVL298:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3599              		.loc 2 85 8 view .LVU1012
 3600 0154 0028     		cmp	r0, #0
 3601 0156 00F08681 		beq	.L384
  86:src/console.c ****   case KEY_F4:
 3602              		.loc 2 86 5 is_stmt 1 view .LVU1013
  86:src/console.c ****   case KEY_F4:
 3603              		.loc 2 86 9 is_stmt 0 view .LVU1014
 3604 015a FFF7FEFF 		bl	cur_shift
 3605              	.LVL299:
  86:src/console.c ****   case KEY_F4:
 3606              		.loc 2 86 8 view .LVU1015
 3607 015e 0128     		cmp	r0, #1
 3608 0160 00F0CB81 		beq	.L385
 3609              	.L324:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3610              		.loc 2 88 5 is_stmt 1 view .LVU1016
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3611              		.loc 2 88 9 is_stmt 0 view .LVU1017
 3612 0164 FFF7FEFF 		bl	cur_shift
 3613              	.LVL300:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3614              		.loc 2 88 8 view .LVU1018
 3615 0168 0028     		cmp	r0, #0
 3616 016a 00F07281 		beq	.L386
  89:src/console.c ****   case KEY_F5:
 3617              		.loc 2 89 5 is_stmt 1 view .LVU1019
  89:src/console.c ****   case KEY_F5:
 3618              		.loc 2 89 9 is_stmt 0 view .LVU1020
 3619 016e FFF7FEFF 		bl	cur_shift
 3620              	.LVL301:
  89:src/console.c ****   case KEY_F5:
 3621              		.loc 2 89 8 view .LVU1021
 3622 0172 0128     		cmp	r0, #1
 3623 0174 00F0AD81 		beq	.L387
 3624              	.L323:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3625              		.loc 2 91 5 is_stmt 1 view .LVU1022
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3626              		.loc 2 91 9 is_stmt 0 view .LVU1023
 3627 0178 FFF7FEFF 		bl	cur_shift
 3628              	.LVL302:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
ARM GAS  /tmp/ccp3OFc8.s 			page 102


 3629              		.loc 2 91 8 view .LVU1024
 3630 017c 0028     		cmp	r0, #0
 3631 017e 00F05E81 		beq	.L388
  92:src/console.c ****   case KEY_F6:
 3632              		.loc 2 92 5 is_stmt 1 view .LVU1025
  92:src/console.c ****   case KEY_F6:
 3633              		.loc 2 92 9 is_stmt 0 view .LVU1026
 3634 0182 FFF7FEFF 		bl	cur_shift
 3635              	.LVL303:
  92:src/console.c ****   case KEY_F6:
 3636              		.loc 2 92 8 view .LVU1027
 3637 0186 0128     		cmp	r0, #1
 3638 0188 00F0AD81 		beq	.L389
 3639              	.L321:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3640              		.loc 2 94 5 is_stmt 1 view .LVU1028
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3641              		.loc 2 94 9 is_stmt 0 view .LVU1029
 3642 018c FFF7FEFF 		bl	cur_shift
 3643              	.LVL304:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3644              		.loc 2 94 8 view .LVU1030
 3645 0190 0028     		cmp	r0, #0
 3646 0192 40F03981 		bne	.L333
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3647              		.loc 2 94 33 is_stmt 1 view .LVU1031
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3648              		.loc 2 94 51 is_stmt 0 view .LVU1032
 3649 0196 DDE93001 		ldrd	r0, r1, [sp, #192]
 3650 019a 9DF8C050 		ldrb	r5, [sp, #192]	@ zero_extendqisi2
 3651              	.LVL305:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3652              		.loc 2 94 51 view .LVU1033
 3653 019e 0DF1080A 		add	r10, sp, #8
 3654              	.LBE149:
 3655              	.LBE158:
 521:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3656              		.loc 2 521 10 view .LVU1034
 3657 01a2 2F2D     		cmp	r5, #47
 3658              	.LBB159:
 3659              	.LBB150:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3660              		.loc 2 94 51 view .LVU1035
 3661 01a4 8AE80300 		stm	r10, {r0, r1}
 3662 01a8 8946     		mov	r9, r1
 3663              	.LVL306:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3664              		.loc 2 94 51 view .LVU1036
 3665              	.LBE150:
 3666              	.LBE159:
 3667              		.loc 2 521 7 is_stmt 1 view .LVU1037
 3668              		.loc 2 521 10 is_stmt 0 view .LVU1038
 3669 01aa 6CD1     		bne	.L344
 3670              	.LVL307:
 3671              	.L392:
 522:src/console.c **** 	set_menu ( remapped.shift );
 3672              		.loc 2 522 2 is_stmt 1 view .LVU1039
ARM GAS  /tmp/ccp3OFc8.s 			page 103


 3673              	.LBB160:
 3674              	.LBB161:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3675              		.loc 1 109 13 is_stmt 0 view .LVU1040
 3676 01ac 614A     		ldr	r2, .L396+84
 3677 01ae 92F90030 		ldrsb	r3, [r2]
 3678              	.LBE161:
 3679              	.LBE160:
 3680              		.loc 2 522 2 view .LVU1041
 3681 01b2 4FFA89F1 		sxtb	r1, r9
 3682              	.LVL308:
 3683              	.LBB164:
 3684              	.LBI160:
 108:src/menu.c    ****   menu_name m = current_menu;
 3685              		.loc 1 108 6 is_stmt 1 view .LVU1042
 3686              	.LBB162:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3687              		.loc 1 109 3 view .LVU1043
 110:src/menu.c    ****     current_menu = default_menu;
 3688              		.loc 1 110 3 view .LVU1044
 110:src/menu.c    ****     current_menu = default_menu;
 3689              		.loc 1 110 6 is_stmt 0 view .LVU1045
 3690 01b6 9942     		cmp	r1, r3
 3691 01b8 00F02281 		beq	.L390
 113:src/menu.c    ****     current_menu = last_menu;
 3692              		.loc 1 113 8 is_stmt 1 view .LVU1046
 113:src/menu.c    ****     current_menu = last_menu;
 3693              		.loc 1 113 11 is_stmt 0 view .LVU1047
 3694 01bc 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 3695              		.loc 1 114 5 is_stmt 1 view .LVU1048
 114:src/menu.c    ****   }
 3696              		.loc 1 114 18 is_stmt 0 view .LVU1049
 3697 01be 04BF     		itt	eq
 3698 01c0 5D49     		ldreq	r1, .L396+88
 3699              	.LVL309:
 114:src/menu.c    ****   }
 3700              		.loc 1 114 18 view .LVU1050
 3701 01c2 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 3702              		.loc 1 117 5 is_stmt 1 view .LVU1051
 117:src/menu.c    ****   }
 3703              		.loc 1 117 18 is_stmt 0 view .LVU1052
 3704 01c4 1170     		strb	r1, [r2]
 3705              	.LVL310:
 3706              	.L346:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3707              		.loc 1 119 3 is_stmt 1 view .LVU1053
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3708              		.loc 1 119 6 is_stmt 0 view .LVU1054
 3709 01c6 092B     		cmp	r3, #9
 3710 01c8 03D0     		beq	.L348
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3711              		.loc 1 119 23 view .LVU1055
 3712 01ca 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3713              		.loc 1 119 43 is_stmt 1 view .LVU1056
ARM GAS  /tmp/ccp3OFc8.s 			page 104


 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3714              		.loc 1 119 53 is_stmt 0 view .LVU1057
 3715 01cc 1CBF     		itt	ne
 3716 01ce 5A4A     		ldrne	r2, .L396+88
 3717 01d0 1370     		strbne	r3, [r2]
 3718              	.L348:
 3719              	.LVL311:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3720              		.loc 1 119 53 view .LVU1058
 3721              	.LBE162:
 3722              	.LBE164:
 523:src/console.c **** 	display_current_menu ();
 3723              		.loc 2 523 2 is_stmt 1 view .LVU1059
 3724 01d2 FFF7FEFF 		bl	display_current_menu
 3725              	.LVL312:
 524:src/console.c **** 	reset_shift();
 3726              		.loc 2 524 2 view .LVU1060
 3727 01d6 FFF7FEFF 		bl	reset_shift
 3728              	.LVL313:
 525:src/console.c **** 	remapped = no_key;
 3729              		.loc 2 525 2 view .LVU1061
 3730              		.loc 2 525 11 is_stmt 0 view .LVU1062
 3731 01da 584B     		ldr	r3, .L396+92
 3732 01dc 93E80300 		ldm	r3, {r0, r1}
 3733 01e0 0DF1080A 		add	r10, sp, #8
 3734 01e4 8AE80300 		stm	r10, {r0, r1}
 3735 01e8 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3736              	.LVL314:
 3737              		.loc 2 525 11 view .LVU1063
 3738 01ea 8946     		mov	r9, r1
 3739              	.LVL315:
 3740              		.loc 2 525 11 view .LVU1064
 3741 01ec 4BE0     		b	.L344
 3742              	.LVL316:
 3743              	.L298:
 452:src/console.c ****     {
 3744              		.loc 2 452 10 is_stmt 1 view .LVU1065
 452:src/console.c ****     {
 3745              		.loc 2 452 15 is_stmt 0 view .LVU1066
 3746 01ee 2568     		ldr	r5, [r4]
 452:src/console.c ****     {
 3747              		.loc 2 452 13 view .LVU1067
 3748 01f0 15F40075 		ands	r5, r5, #512
 3749 01f4 7FF447AF 		bne	.L299
 452:src/console.c ****     {
 3750              		.loc 2 452 35 discriminator 1 view .LVU1068
 3751 01f8 B847     		blx	r7
 3752              	.LVL317:
 452:src/console.c ****     {
 3753              		.loc 2 452 32 discriminator 1 view .LVU1069
 3754 01fa 0028     		cmp	r0, #0
 3755 01fc 3FF443AF 		beq	.L299
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3756              		.loc 2 454 7 is_stmt 1 view .LVU1070
 3757 0200 2368     		ldr	r3, [r4]
 3758 0202 23F00203 		bic	r3, r3, #2
 455:src/console.c ****       sys_sleep();
ARM GAS  /tmp/ccp3OFc8.s 			page 105


 3759              		.loc 2 455 7 is_stmt 0 view .LVU1071
 3760 0206 2846     		mov	r0, r5
 3761 0208 6421     		movs	r1, #100
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3762              		.loc 2 454 7 view .LVU1072
 3763 020a 2360     		str	r3, [r4]
 455:src/console.c ****       sys_sleep();
 3764              		.loc 2 455 7 is_stmt 1 view .LVU1073
 3765 020c C047     		blx	r8
 3766              	.LVL318:
 456:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 3767              		.loc 2 456 7 view .LVU1074
 3768 020e 3D4B     		ldr	r3, .L396+36
 3769 0210 9847     		blx	r3
 3770              	.LVL319:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 3771              		.loc 2 457 7 view .LVU1075
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 3772              		.loc 2 457 11 is_stmt 0 view .LVU1076
 3773 0212 4B4B     		ldr	r3, .L396+96
 3774 0214 2846     		mov	r0, r5
 3775 0216 9847     		blx	r3
 3776              	.LVL320:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 3777              		.loc 2 457 10 view .LVU1077
 3778 0218 48B1     		cbz	r0, .L303
 458:src/console.c **** 	if (Pause > 0) Pause--;
 3779              		.loc 2 458 2 is_stmt 1 view .LVU1078
 3780 021a 4A4B     		ldr	r3, .L396+100
 3781 021c 6220     		movs	r0, #98
 3782 021e 9847     		blx	r3
 3783              	.LVL321:
 459:src/console.c ****       }
 3784              		.loc 2 459 2 view .LVU1079
 459:src/console.c ****       }
 3785              		.loc 2 459 12 is_stmt 0 view .LVU1080
 3786 0220 424B     		ldr	r3, .L396+76
 3787 0222 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 459:src/console.c ****       }
 3788              		.loc 2 459 5 view .LVU1081
 3789 0224 1AB1     		cbz	r2, .L303
 459:src/console.c ****       }
 3790              		.loc 2 459 17 is_stmt 1 discriminator 1 view .LVU1082
 459:src/console.c ****       }
 3791              		.loc 2 459 22 is_stmt 0 discriminator 1 view .LVU1083
 3792 0226 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3793 0228 013A     		subs	r2, r2, #1
 3794 022a D2B2     		uxtb	r2, r2
 3795 022c 1A70     		strb	r2, [r3]
 3796              	.L303:
 461:src/console.c ****     }
 3797              		.loc 2 461 7 is_stmt 1 view .LVU1084
 3798 022e 464B     		ldr	r3, .L396+104
 3799 0230 0020     		movs	r0, #0
 3800 0232 9847     		blx	r3
 3801              	.LVL322:
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
ARM GAS  /tmp/ccp3OFc8.s 			page 106


 3802              		.loc 2 465 5 view .LVU1085
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3803              		.loc 2 465 9 is_stmt 0 view .LVU1086
 3804 0234 2368     		ldr	r3, [r4]
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3805              		.loc 2 465 8 view .LVU1087
 3806 0236 9805     		lsls	r0, r3, #22
 3807 0238 7FF529AF 		bpl	.L391
 3808              	.L305:
 466:src/console.c ****         // Going to off mode
 3809              		.loc 2 466 7 is_stmt 1 view .LVU1088
 466:src/console.c ****         // Going to off mode
 3810              		.loc 2 466 12 is_stmt 0 view .LVU1089
 3811 023c 2568     		ldr	r5, [r4]
 466:src/console.c ****         // Going to off mode
 3812              		.loc 2 466 10 view .LVU1090
 3813 023e 15F00405 		ands	r5, r5, #4
 3814 0242 7FF412AF 		bne	.L297
 468:src/console.c ****         draw_power_off_image(1);
 3815              		.loc 2 468 9 is_stmt 1 view .LVU1091
 3816 0246 414B     		ldr	r3, .L396+108
 3817 0248 2846     		mov	r0, r5
 3818 024a 9847     		blx	r3
 3819              	.LVL323:
 469:src/console.c **** 
 3820              		.loc 2 469 9 view .LVU1092
 3821 024c 404B     		ldr	r3, .L396+112
 3822 024e 0120     		movs	r0, #1
 3823 0250 9847     		blx	r3
 3824              	.LVL324:
 471:src/console.c ****         SET_ST(STAT_SUSPENDED);
 3825              		.loc 2 471 9 view .LVU1093
 3826 0252 404B     		ldr	r3, .L396+116
 3827 0254 2846     		mov	r0, r5
 3828 0256 9847     		blx	r3
 3829              	.LVL325:
 472:src/console.c ****         SET_ST(STAT_OFF);
 3830              		.loc 2 472 9 view .LVU1094
 3831 0258 2368     		ldr	r3, [r4]
 3832 025a 43F00403 		orr	r3, r3, #4
 3833 025e 2360     		str	r3, [r4]
 473:src/console.c ****       }
 3834              		.loc 2 473 9 view .LVU1095
 3835 0260 2368     		ldr	r3, [r4]
 3836 0262 43F01003 		orr	r3, r3, #16
 3837 0266 2360     		str	r3, [r4]
 3838 0268 FFE6     		b	.L297
 3839              	.LVL326:
 3840              	.L315:
 519:src/console.c ****       remapped = remap(c);
 3841              		.loc 2 519 5 view .LVU1096
 519:src/console.c ****       remapped = remap(c);
 3842              		.loc 2 519 8 is_stmt 0 view .LVU1097
 3843 026a 7FF4FEAE 		bne	.L297
 3844 026e 47E7     		b	.L352
 3845              	.L314:
 519:src/console.c ****       remapped = remap(c);
ARM GAS  /tmp/ccp3OFc8.s 			page 107


 3846              		.loc 2 519 5 is_stmt 1 view .LVU1098
 520:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3847              		.loc 2 520 7 view .LVU1099
 3848              	.LVL327:
 3849              	.LBB165:
  56:src/console.c **** 
 3850              		.loc 2 56 22 view .LVU1100
 3851              	.LBB151:
  58:src/console.c **** 
 3852              		.loc 2 58 3 view .LVU1101
   1:src/keytran.c ****     {K00, 0}, // A/sig+
 3853              		.loc 3 1 1 view .LVU1102
  59:src/keytran.c ****     {K_RELEASE, -1},
 3854              		.loc 3 59 3 view .LVU1103
 117:src/keytran.c ****     {K_RELEASE, -1},
 3855              		.loc 3 117 3 view .LVU1104
 175:src/keytran.c ****     {K_RELEASE, -1},
 3856              		.loc 3 175 1 view .LVU1105
 3857              		.loc 3 233 1 view .LVU1106
  62:src/console.c **** 
 3858              		.loc 2 62 3 view .LVU1107
  62:src/console.c **** 
 3859              		.loc 2 62 23 view .LVU1108
  62:src/console.c **** 
 3860              		.loc 2 62 30 is_stmt 0 view .LVU1109
 3861 0270 394B     		ldr	r3, .L396+120
 3862              	.LVL328:
 3863              	.L377:
  62:src/console.c **** 
 3864              		.loc 2 62 30 view .LVU1110
 3865 0272 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3866              	.LVL329:
  62:src/console.c **** 
 3867              		.loc 2 62 30 view .LVU1111
 3868 0274 93E80300 		ldm	r3, {r0, r1}
 3869 0278 0DF1080A 		add	r10, sp, #8
 3870 027c 8AE80300 		stm	r10, {r0, r1}
 3871 0280 8946     		mov	r9, r1
 3872              	.LVL330:
 3873              	.L317:
  62:src/console.c **** 
 3874              		.loc 2 62 30 view .LVU1112
 3875              	.LBE151:
 3876              	.LBE165:
 521:src/console.c **** 	set_menu ( remapped.shift );
 3877              		.loc 2 521 7 is_stmt 1 view .LVU1113
 521:src/console.c **** 	set_menu ( remapped.shift );
 3878              		.loc 2 521 10 is_stmt 0 view .LVU1114
 3879 0282 2F2D     		cmp	r5, #47
 3880 0284 92D0     		beq	.L392
 3881              	.L344:
 526:src/console.c ****       }
 527:src/console.c ****       if (remapped.key_34s == K_SYS) {
 3882              		.loc 2 527 7 is_stmt 1 view .LVU1115
 3883              		.loc 2 527 10 is_stmt 0 view .LVU1116
 3884 0286 302D     		cmp	r5, #48
 3885 0288 19D1     		bne	.L349
ARM GAS  /tmp/ccp3OFc8.s 			page 108


 528:src/console.c **** 	SET_ST(STAT_MENU);
 3886              		.loc 2 528 2 is_stmt 1 view .LVU1117
 3887 028a 2368     		ldr	r3, [r4]
 529:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 3888              		.loc 2 529 2 is_stmt 0 view .LVU1118
 3889 028c 334D     		ldr	r5, .L396+124
 3890              	.LVL331:
 3891              		.loc 2 529 2 view .LVU1119
 3892 028e 3448     		ldr	r0, .L396+128
 3893 0290 0022     		movs	r2, #0
 528:src/console.c **** 	SET_ST(STAT_MENU);
 3894              		.loc 2 528 2 view .LVU1120
 3895 0292 43F04003 		orr	r3, r3, #64
 3896              		.loc 2 529 2 view .LVU1121
 3897 0296 1146     		mov	r1, r2
 528:src/console.c **** 	SET_ST(STAT_MENU);
 3898              		.loc 2 528 2 view .LVU1122
 3899 0298 2360     		str	r3, [r4]
 3900              		.loc 2 529 2 is_stmt 1 view .LVU1123
 3901 029a A847     		blx	r5
 3902              	.LVL332:
 530:src/console.c **** 	CLR_ST(STAT_MENU);
 3903              		.loc 2 530 2 view .LVU1124
 3904 029c 2368     		ldr	r3, [r4]
 3905 029e 23F04003 		bic	r3, r3, #64
 3906 02a2 2360     		str	r3, [r4]
 531:src/console.c **** 	reset_shift();
 3907              		.loc 2 531 2 view .LVU1125
 3908 02a4 FFF7FEFF 		bl	reset_shift
 3909              	.LVL333:
 532:src/console.c **** 	remapped =  no_key;
 3910              		.loc 2 532 2 view .LVU1126
 3911              		.loc 2 532 11 is_stmt 0 view .LVU1127
 3912 02a8 244B     		ldr	r3, .L396+92
 3913 02aa 93E80300 		ldm	r3, {r0, r1}
 3914 02ae 0DF1080A 		add	r10, sp, #8
 3915 02b2 8AE80300 		stm	r10, {r0, r1}
 3916 02b6 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3917              	.LVL334:
 3918              		.loc 2 532 11 view .LVU1128
 3919 02b8 8946     		mov	r9, r1
 3920              	.LVL335:
 533:src/console.c **** 	display_current_menu();
 3921              		.loc 2 533 2 is_stmt 1 view .LVU1129
 3922 02ba FFF7FEFF 		bl	display_current_menu
 3923              	.LVL336:
 3924              	.L349:
 534:src/console.c ****       }
 535:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 3925              		.loc 2 535 7 view .LVU1130
 3926              		.loc 2 535 10 is_stmt 0 view .LVU1131
 3927 02be 312D     		cmp	r5, #49
 3928 02c0 6FD0     		beq	.L353
 536:src/console.c **** 	remapped = do_multi (remapped);
 537:src/console.c **** 	display_current_menu();
 538:src/console.c ****       }
 539:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
ARM GAS  /tmp/ccp3OFc8.s 			page 109


 3929              		.loc 2 539 7 is_stmt 1 view .LVU1132
 3930              		.loc 2 539 10 is_stmt 0 view .LVU1133
 3931 02c2 322D     		cmp	r5, #50
 3932 02c4 00F08780 		beq	.L351
 3933              	.LVL337:
 3934              	.L378:
 3935              		.loc 2 539 10 view .LVU1134
 3936 02c8 0DF1080A 		add	r10, sp, #8
 3937              	.L340:
 3938              	.LVL338:
 540:src/console.c ****       process_keycode_with_shift(remapped);
 3939              		.loc 2 540 7 is_stmt 1 view .LVU1135
 3940              		.loc 2 540 7 is_stmt 0 view .LVU1136
 3941 02cc 8DF80850 		strb	r5, [sp, #8]
 3942 02d0 CDF80C90 		str	r9, [sp, #12]
 3943 02d4 9AE80300 		ldm	r10, {r0, r1}
 3944 02d8 FFF7FEFF 		bl	process_keycode_with_shift
 3945              	.LVL339:
 3946 02dc C5E6     		b	.L297
 3947              	.L397:
 3948 02de 00BF     		.align	2
 3949              	.L396:
 3950 02e0 00000000 		.word	StateWhileOn
 3951 02e4 00000000 		.word	DispMsg
 3952 02e8 00200010 		.word	268443648
 3953 02ec 00000000 		.word	KeyCallback
 3954 02f0 7D030008 		.word	134218621
 3955 02f4 00000000 		.word	run_menu_item
 3956 02f8 00000000 		.word	menu_line_str
 3957 02fc 31020008 		.word	134218289
 3958 0300 00000000 		.word	JustDisplayed
 3959 0304 19040008 		.word	134218777
 3960 0308 19020008 		.word	134218265
 3961 030c 91030008 		.word	134218641
 3962 0310 E5020008 		.word	134218469
 3963 0314 59020008 		.word	134218329
 3964 0318 35020008 		.word	134218293
 3965 031c 89030008 		.word	134218633
 3966 0320 B9030008 		.word	134218681
 3967 0324 B9040008 		.word	134218937
 3968 0328 00000000 		.word	.LANCHOR8
 3969 032c 00000000 		.word	Pause
 3970 0330 00000000 		.word	Running
 3971 0334 00000000 		.word	.LANCHOR1
 3972 0338 00000000 		.word	.LANCHOR3
 3973 033c 00000000 		.word	.LANCHOR10
 3974 0340 01040008 		.word	134218753
 3975 0344 81030008 		.word	134218625
 3976 0348 F5030008 		.word	134218741
 3977 034c 55020008 		.word	134218325
 3978 0350 2D040008 		.word	134218797
 3979 0354 1D020008 		.word	134218269
 3980 0358 00000000 		.word	.LANCHOR19
 3981 035c 59030008 		.word	134218585
 3982 0360 00000000 		.word	.LANCHOR18
 3983 0364 F9030008 		.word	134218745
 3984              	.LVL340:
ARM GAS  /tmp/ccp3OFc8.s 			page 110


 3985              	.L312:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 3986              		.loc 2 510 10 is_stmt 1 view .LVU1137
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 3987              		.loc 2 510 15 is_stmt 0 view .LVU1138
 3988 0368 824B     		ldr	r3, .L398
 3989 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 3990              		.loc 2 510 13 view .LVU1139
 3991 036c DB07     		lsls	r3, r3, #31
 3992 036e 7FF5B5AE 		bpl	.L313
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 3993              		.loc 2 510 37 discriminator 1 view .LVU1140
 3994 0372 FFF7FEFF 		bl	DM42_Ticker
 3995              	.LVL341:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 3996              		.loc 2 510 37 discriminator 1 view .LVU1141
 3997 0376 804A     		ldr	r2, .L398+4
 3998 0378 804B     		ldr	r3, .L398+8
 3999 037a 02FB0030 		mla	r0, r2, r0, r3
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4000              		.loc 2 510 32 discriminator 1 view .LVU1142
 4001 037e B0F1333F 		cmp	r0, #858993459
 4002 0382 BFF4ABAE 		bcs	.L313
 511:src/console.c ****       finish_display();
 4003              		.loc 2 511 7 is_stmt 1 view .LVU1143
 511:src/console.c ****       finish_display();
 4004              		.loc 2 511 21 is_stmt 0 view .LVU1144
 4005 0386 8420     		movs	r0, #132
 4006 0388 FFF7FEFF 		bl	is_dot
 4007              	.LVL342:
 511:src/console.c ****       finish_display();
 4008              		.loc 2 511 7 view .LVU1145
 4009 038c B0FA80F1 		clz	r1, r0
 4010 0390 4909     		lsrs	r1, r1, #5
 4011 0392 8420     		movs	r0, #132
 4012 0394 FFF7FEFF 		bl	dot
 4013              	.LVL343:
 512:src/console.c ****     }
 4014              		.loc 2 512 7 is_stmt 1 view .LVU1146
 4015 0398 FFF7FEFF 		bl	finish_display
 4016              	.LVL344:
 4017 039c 9EE6     		b	.L313
 4018              	.LVL345:
 4019              	.L318:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4020              		.loc 2 521 7 view .LVU1147
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4021              		.loc 2 527 7 view .LVU1148
 535:src/console.c **** 	remapped = do_multi (remapped);
 4022              		.loc 2 535 7 view .LVU1149
 4023              	.LBB166:
 4024              	.LBB152:
 4025              	.LBB148:
  68:src/console.c ****   }
 4026              		.loc 2 68 12 is_stmt 0 view .LVU1150
 4027 039e 4FF00C09 		mov	r9, #12
ARM GAS  /tmp/ccp3OFc8.s 			page 111


 4028              	.LVL346:
 4029              	.L353:
  68:src/console.c ****   }
 4030              		.loc 2 68 12 view .LVU1151
 4031              	.LBE148:
 4032              	.LBE152:
 4033              	.LBE166:
 536:src/console.c **** 	display_current_menu();
 4034              		.loc 2 536 2 is_stmt 1 view .LVU1152
 536:src/console.c **** 	display_current_menu();
 4035              		.loc 2 536 13 is_stmt 0 view .LVU1153
 4036 03a2 3123     		movs	r3, #49
 4037 03a4 CDF80C90 		str	r9, [sp, #12]
 4038 03a8 8DF80830 		strb	r3, [sp, #8]
 4039 03ac 6D46     		mov	r5, sp
 4040 03ae 0DF1080A 		add	r10, sp, #8
 4041 03b2 9AE80600 		ldm	r10, {r1, r2}
 4042 03b6 2846     		mov	r0, r5
 4043 03b8 FFF7FEFF 		bl	do_multi
 4044              	.LVL347:
 4045 03bc 95E80300 		ldm	r5, {r0, r1}
 4046 03c0 8AE80300 		stm	r10, {r0, r1}
 4047 03c4 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 4048              	.LVL348:
 536:src/console.c **** 	display_current_menu();
 4049              		.loc 2 536 13 view .LVU1154
 4050 03c8 DDF80C90 		ldr	r9, [sp, #12]
 4051              	.LVL349:
 537:src/console.c ****       }
 4052              		.loc 2 537 2 is_stmt 1 view .LVU1155
 4053 03cc FFF7FEFF 		bl	display_current_menu
 4054              	.LVL350:
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4055              		.loc 2 539 7 view .LVU1156
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4056              		.loc 2 539 10 is_stmt 0 view .LVU1157
 4057 03d0 322D     		cmp	r5, #50
 4058 03d2 7FF479AF 		bne	.L378
 4059              	.L351:
 541:src/console.c ****     }
 542:src/console.c ****   }
 543:src/console.c ****   save_ram_file(0);
 4060              		.loc 2 543 3 is_stmt 1 view .LVU1158
 4061 03d6 0020     		movs	r0, #0
 544:src/console.c ****   //  free_storage();
 545:src/console.c ****   return;
 546:src/console.c **** }
 4062              		.loc 2 546 1 is_stmt 0 view .LVU1159
 4063 03d8 38B0     		add	sp, sp, #224
 4064              		.cfi_remember_state
 4065              		.cfi_def_cfa_offset 32
 4066              		@ sp needed
 4067 03da BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 4068              		.cfi_restore 14
 4069              		.cfi_restore 10
 4070              		.cfi_restore 9
 4071              		.cfi_restore 8
ARM GAS  /tmp/ccp3OFc8.s 			page 112


 4072              		.cfi_restore 7
 4073              		.cfi_restore 6
 4074              		.cfi_restore 5
 4075              		.cfi_restore 4
 4076              		.cfi_def_cfa_offset 0
 4077              	.LVL351:
 543:src/console.c ****   //  free_storage();
 4078              		.loc 2 543 3 view .LVU1160
 4079 03de FFF7FEBF 		b	save_ram_file
 4080              	.LVL352:
 4081              	.L380:
 4082              		.cfi_restore_state
 4083              	.LBB167:
 4084              	.LBB153:
  72:src/console.c ****   }
 4085              		.loc 2 72 5 is_stmt 1 view .LVU1161
  72:src/console.c ****   }
 4086              		.loc 2 72 27 is_stmt 0 view .LVU1162
 4087 03e2 674B     		ldr	r3, .L398+12
 4088              	.L376:
 124:src/console.c ****     break;
 4089              		.loc 2 124 26 view .LVU1163
 4090 03e4 03EBC502 		add	r2, r3, r5, lsl #3
 4091 03e8 92E80300 		ldm	r2, {r0, r1}
 4092 03ec 0DF1080A 		add	r10, sp, #8
 4093 03f0 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4094              	.LVL353:
 124:src/console.c ****     break;
 4095              		.loc 2 124 26 view .LVU1164
 4096 03f4 8946     		mov	r9, r1
 4097              	.LVL354:
 124:src/console.c ****     break;
 4098              		.loc 2 124 26 view .LVU1165
 4099 03f6 8AE80300 		stm	r10, {r0, r1}
 4100 03fa 42E7     		b	.L317
 4101              	.LVL355:
 4102              	.L379:
  64:src/console.c **** 
 4103              		.loc 2 64 16 is_stmt 1 view .LVU1166
  64:src/console.c **** 
 4104              		.loc 2 64 23 is_stmt 0 view .LVU1167
 4105 03fc 614B     		ldr	r3, .L398+16
 4106 03fe 38E7     		b	.L377
 4107              	.LVL356:
 4108              	.L390:
  64:src/console.c **** 
 4109              		.loc 2 64 23 view .LVU1168
 4110              	.LBE153:
 4111              	.LBE167:
 4112              	.LBB168:
 4113              	.LBB163:
 111:src/menu.c    ****   }
 4114              		.loc 1 111 5 is_stmt 1 view .LVU1169
 111:src/menu.c    ****   }
 4115              		.loc 1 111 18 is_stmt 0 view .LVU1170
 4116 0400 6149     		ldr	r1, .L398+20
 4117              	.LVL357:
ARM GAS  /tmp/ccp3OFc8.s 			page 113


 111:src/menu.c    ****   }
 4118              		.loc 1 111 18 view .LVU1171
 4119 0402 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4120 0404 1170     		strb	r1, [r2]
 4121 0406 DEE6     		b	.L346
 4122              	.LVL358:
 4123              	.L333:
 111:src/menu.c    ****   }
 4124              		.loc 1 111 18 view .LVU1172
 4125              	.LBE163:
 4126              	.LBE168:
 4127              	.LBB169:
 4128              	.LBB154:
  95:src/console.c ****   }
 4129              		.loc 2 95 5 is_stmt 1 view .LVU1173
  95:src/console.c ****   }
 4130              		.loc 2 95 9 is_stmt 0 view .LVU1174
 4131 0408 FFF7FEFF 		bl	cur_shift
 4132              	.LVL359:
  95:src/console.c ****   }
 4133              		.loc 2 95 8 view .LVU1175
 4134 040c 0128     		cmp	r0, #1
 4135 040e 56D0     		beq	.L393
 4136              	.L320:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4137              		.loc 2 98 3 is_stmt 1 view .LVU1176
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4138              		.loc 2 98 8 is_stmt 0 view .LVU1177
 4139 0410 FFF7FEFF 		bl	get_alpha_state
 4140              	.LVL360:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4141              		.loc 2 98 6 view .LVU1178
 4142 0414 D8B3     		cbz	r0, .L334
  99:src/console.c ****       switch (cur_shift()) { 
 4143              		.loc 2 99 5 is_stmt 1 view .LVU1179
  99:src/console.c ****       switch (cur_shift()) { 
 4144              		.loc 2 99 8 is_stmt 0 view .LVU1180
 4145 0416 1C2D     		cmp	r5, #28
 4146 0418 00F08580 		beq	.L394
 116:src/console.c ****   }
 4147              		.loc 2 116 5 is_stmt 1 view .LVU1181
 116:src/console.c ****   }
 4148              		.loc 2 116 26 is_stmt 0 view .LVU1182
 4149 041c 5B4B     		ldr	r3, .L398+24
 4150 041e E1E7     		b	.L376
 4151              	.L327:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4152              		.loc 2 79 5 is_stmt 1 view .LVU1183
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4153              		.loc 2 79 9 is_stmt 0 view .LVU1184
 4154 0420 FFF7FEFF 		bl	cur_shift
 4155              	.LVL361:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4156              		.loc 2 79 8 view .LVU1185
 4157 0424 0028     		cmp	r0, #0
 4158 0426 7FF484AE 		bne	.L328
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
ARM GAS  /tmp/ccp3OFc8.s 			page 114


 4159              		.loc 2 79 33 is_stmt 1 view .LVU1186
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4160              		.loc 2 79 51 is_stmt 0 view .LVU1187
 4161 042a DDE90801 		ldrd	r0, r1, [sp, #32]
 4162 042e 0DF1080A 		add	r10, sp, #8
 4163 0432 8AE80300 		stm	r10, {r0, r1}
 4164 0436 9DF82050 		ldrb	r5, [sp, #32]	@ zero_extendqisi2
 4165              	.LVL362:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4166              		.loc 2 79 51 view .LVU1188
 4167 043a 8946     		mov	r9, r1
 4168              	.LVL363:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4169              		.loc 2 79 51 view .LVU1189
 4170 043c 21E7     		b	.L317
 4171              	.LVL364:
 4172              	.L388:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4173              		.loc 2 91 33 is_stmt 1 view .LVU1190
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4174              		.loc 2 91 51 is_stmt 0 view .LVU1191
 4175 043e DDE92801 		ldrd	r0, r1, [sp, #160]
 4176 0442 0DF1080A 		add	r10, sp, #8
 4177 0446 8AE80300 		stm	r10, {r0, r1}
 4178 044a 9DF8A050 		ldrb	r5, [sp, #160]	@ zero_extendqisi2
 4179              	.LVL365:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4180              		.loc 2 91 51 view .LVU1192
 4181 044e 8946     		mov	r9, r1
 4182              	.LVL366:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4183              		.loc 2 91 51 view .LVU1193
 4184 0450 17E7     		b	.L317
 4185              	.LVL367:
 4186              	.L386:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4187              		.loc 2 88 33 is_stmt 1 view .LVU1194
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4188              		.loc 2 88 51 is_stmt 0 view .LVU1195
 4189 0452 DDE92001 		ldrd	r0, r1, [sp, #128]
 4190 0456 0DF1080A 		add	r10, sp, #8
 4191 045a 8AE80300 		stm	r10, {r0, r1}
 4192 045e 9DF88050 		ldrb	r5, [sp, #128]	@ zero_extendqisi2
 4193              	.LVL368:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4194              		.loc 2 88 51 view .LVU1196
 4195 0462 8946     		mov	r9, r1
 4196              	.LVL369:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4197              		.loc 2 88 51 view .LVU1197
 4198 0464 0DE7     		b	.L317
 4199              	.LVL370:
 4200              	.L384:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4201              		.loc 2 85 33 is_stmt 1 view .LVU1198
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4202              		.loc 2 85 51 is_stmt 0 view .LVU1199
ARM GAS  /tmp/ccp3OFc8.s 			page 115


 4203 0466 DDE91801 		ldrd	r0, r1, [sp, #96]
 4204 046a 0DF1080A 		add	r10, sp, #8
 4205 046e 8AE80300 		stm	r10, {r0, r1}
 4206 0472 9DF86050 		ldrb	r5, [sp, #96]	@ zero_extendqisi2
 4207              	.LVL371:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4208              		.loc 2 85 51 view .LVU1200
 4209 0476 8946     		mov	r9, r1
 4210              	.LVL372:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4211              		.loc 2 85 51 view .LVU1201
 4212 0478 03E7     		b	.L317
 4213              	.LVL373:
 4214              	.L382:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4215              		.loc 2 82 33 is_stmt 1 view .LVU1202
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4216              		.loc 2 82 51 is_stmt 0 view .LVU1203
 4217 047a DDE91001 		ldrd	r0, r1, [sp, #64]
 4218 047e 0DF1080A 		add	r10, sp, #8
 4219 0482 8AE80300 		stm	r10, {r0, r1}
 4220 0486 9DF84050 		ldrb	r5, [sp, #64]	@ zero_extendqisi2
 4221              	.LVL374:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4222              		.loc 2 82 51 view .LVU1204
 4223 048a 8946     		mov	r9, r1
 4224              	.LVL375:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4225              		.loc 2 82 51 view .LVU1205
 4226 048c F9E6     		b	.L317
 4227              	.LVL376:
 4228              	.L334:
 119:src/console.c ****   case SHIFT_N:    
 4229              		.loc 2 119 3 is_stmt 1 view .LVU1206
 119:src/console.c ****   case SHIFT_N:    
 4230              		.loc 2 119 11 is_stmt 0 view .LVU1207
 4231 048e FFF7FEFF 		bl	cur_shift
 4232              	.LVL377:
 119:src/console.c ****   case SHIFT_N:    
 4233              		.loc 2 119 3 view .LVU1208
 4234 0492 0128     		cmp	r0, #1
 4235 0494 45D0     		beq	.L341
 4236 0496 0228     		cmp	r0, #2
 4237 0498 02D0     		beq	.L342
 4238 049a 70B1     		cbz	r0, .L343
  58:src/console.c **** 
 4239              		.loc 2 58 41 view .LVU1209
 4240 049c EDB2     		uxtb	r5, r5
 4241              	.LVL378:
  58:src/console.c **** 
 4242              		.loc 2 58 41 view .LVU1210
 4243 049e F0E6     		b	.L317
 4244              	.LVL379:
 4245              	.L342:
 125:src/console.c ****   case SHIFT_G:
 4246              		.loc 2 125 5 is_stmt 1 view .LVU1211
 127:src/console.c ****     break;
ARM GAS  /tmp/ccp3OFc8.s 			page 116


 4247              		.loc 2 127 5 view .LVU1212
 127:src/console.c ****     break;
 4248              		.loc 2 127 26 is_stmt 0 view .LVU1213
 4249 04a0 3B4B     		ldr	r3, .L398+28
 4250 04a2 03EBC502 		add	r2, r3, r5, lsl #3
 4251 04a6 92E80300 		ldm	r2, {r0, r1}
 4252 04aa 0DF1080A 		add	r10, sp, #8
 4253 04ae 8AE80300 		stm	r10, {r0, r1}
 4254 04b2 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4255              	.LVL380:
 127:src/console.c ****     break;
 4256              		.loc 2 127 26 view .LVU1214
 4257 04b6 8946     		mov	r9, r1
 4258              	.LVL381:
 127:src/console.c ****     break;
 4259              		.loc 2 127 26 view .LVU1215
 4260 04b8 E3E6     		b	.L317
 4261              	.LVL382:
 4262              	.L343:
 121:src/console.c ****     break;
 4263              		.loc 2 121 5 is_stmt 1 view .LVU1216
 121:src/console.c ****     break;
 4264              		.loc 2 121 24 is_stmt 0 view .LVU1217
 4265 04ba 364B     		ldr	r3, .L398+32
 4266 04bc 92E7     		b	.L376
 4267              	.L393:
  95:src/console.c ****   }
 4268              		.loc 2 95 33 is_stmt 1 view .LVU1218
  95:src/console.c ****   }
 4269              		.loc 2 95 51 is_stmt 0 view .LVU1219
 4270 04be DDE93201 		ldrd	r0, r1, [sp, #200]
 4271 04c2 0DF1080A 		add	r10, sp, #8
 4272 04c6 8AE80300 		stm	r10, {r0, r1}
 4273 04ca 9DF8C850 		ldrb	r5, [sp, #200]	@ zero_extendqisi2
 4274              	.LVL383:
  95:src/console.c ****   }
 4275              		.loc 2 95 51 view .LVU1220
 4276 04ce 8946     		mov	r9, r1
 4277              	.LVL384:
  95:src/console.c ****   }
 4278              		.loc 2 95 51 view .LVU1221
 4279 04d0 D7E6     		b	.L317
 4280              	.LVL385:
 4281              	.L387:
  89:src/console.c ****   case KEY_F5:
 4282              		.loc 2 89 33 is_stmt 1 view .LVU1222
  89:src/console.c ****   case KEY_F5:
 4283              		.loc 2 89 51 is_stmt 0 view .LVU1223
 4284 04d2 DDE92201 		ldrd	r0, r1, [sp, #136]
 4285 04d6 0DF1080A 		add	r10, sp, #8
 4286 04da 8AE80300 		stm	r10, {r0, r1}
 4287 04de 9DF88850 		ldrb	r5, [sp, #136]	@ zero_extendqisi2
 4288              	.LVL386:
  89:src/console.c ****   case KEY_F5:
 4289              		.loc 2 89 51 view .LVU1224
 4290 04e2 8946     		mov	r9, r1
 4291              	.LVL387:
ARM GAS  /tmp/ccp3OFc8.s 			page 117


  89:src/console.c ****   case KEY_F5:
 4292              		.loc 2 89 51 view .LVU1225
 4293 04e4 CDE6     		b	.L317
 4294              	.LVL388:
 4295              	.L389:
  92:src/console.c ****   case KEY_F6:
 4296              		.loc 2 92 33 is_stmt 1 view .LVU1226
  92:src/console.c ****   case KEY_F6:
 4297              		.loc 2 92 51 is_stmt 0 view .LVU1227
 4298 04e6 DDE92A01 		ldrd	r0, r1, [sp, #168]
 4299 04ea 0DF1080A 		add	r10, sp, #8
 4300 04ee 8AE80300 		stm	r10, {r0, r1}
 4301 04f2 9DF8A850 		ldrb	r5, [sp, #168]	@ zero_extendqisi2
 4302              	.LVL389:
  92:src/console.c ****   case KEY_F6:
 4303              		.loc 2 92 51 view .LVU1228
 4304 04f6 8946     		mov	r9, r1
 4305              	.LVL390:
  92:src/console.c ****   case KEY_F6:
 4306              		.loc 2 92 51 view .LVU1229
 4307 04f8 C3E6     		b	.L317
 4308              	.LVL391:
 4309              	.L385:
  86:src/console.c ****   case KEY_F4:
 4310              		.loc 2 86 33 is_stmt 1 view .LVU1230
  86:src/console.c ****   case KEY_F4:
 4311              		.loc 2 86 51 is_stmt 0 view .LVU1231
 4312 04fa DDE91A01 		ldrd	r0, r1, [sp, #104]
 4313 04fe 0DF1080A 		add	r10, sp, #8
 4314 0502 8AE80300 		stm	r10, {r0, r1}
 4315 0506 9DF86850 		ldrb	r5, [sp, #104]	@ zero_extendqisi2
 4316              	.LVL392:
  86:src/console.c ****   case KEY_F4:
 4317              		.loc 2 86 51 view .LVU1232
 4318 050a 8946     		mov	r9, r1
 4319              	.LVL393:
  86:src/console.c ****   case KEY_F4:
 4320              		.loc 2 86 51 view .LVU1233
 4321 050c B9E6     		b	.L317
 4322              	.LVL394:
 4323              	.L383:
  83:src/console.c ****   case KEY_F3:
 4324              		.loc 2 83 33 is_stmt 1 view .LVU1234
  83:src/console.c ****   case KEY_F3:
 4325              		.loc 2 83 51 is_stmt 0 view .LVU1235
 4326 050e DDE91201 		ldrd	r0, r1, [sp, #72]
 4327 0512 0DF1080A 		add	r10, sp, #8
 4328 0516 8AE80300 		stm	r10, {r0, r1}
 4329 051a 9DF84850 		ldrb	r5, [sp, #72]	@ zero_extendqisi2
 4330              	.LVL395:
  83:src/console.c ****   case KEY_F3:
 4331              		.loc 2 83 51 view .LVU1236
 4332 051e 8946     		mov	r9, r1
 4333              	.LVL396:
  83:src/console.c ****   case KEY_F3:
 4334              		.loc 2 83 51 view .LVU1237
 4335 0520 AFE6     		b	.L317
ARM GAS  /tmp/ccp3OFc8.s 			page 118


 4336              	.LVL397:
 4337              	.L341:
 122:src/console.c ****   case SHIFT_F:
 4338              		.loc 2 122 5 is_stmt 1 view .LVU1238
 124:src/console.c ****     break;
 4339              		.loc 2 124 5 view .LVU1239
 124:src/console.c ****     break;
 4340              		.loc 2 124 26 is_stmt 0 view .LVU1240
 4341 0522 1D4B     		ldr	r3, .L398+36
 4342 0524 5EE7     		b	.L376
 4343              	.L394:
 100:src/console.c ****       case SHIFT_N:
 4344              		.loc 2 100 7 is_stmt 1 view .LVU1241
 100:src/console.c ****       case SHIFT_N:
 4345              		.loc 2 100 15 is_stmt 0 view .LVU1242
 4346 0526 FFF7FEFF 		bl	cur_shift
 4347              	.LVL398:
 100:src/console.c ****       case SHIFT_N:
 4348              		.loc 2 100 7 view .LVU1243
 4349 052a 0328     		cmp	r0, #3
 4350 052c 3FF6CCAE 		bhi	.L378
 4351 0530 0128     		cmp	r0, #1
 4352 0532 09D8     		bhi	.L337
 4353 0534 A0B1     		cbz	r0, .L395
 103:src/console.c ****       case SHIFT_F:
 4354              		.loc 2 103 2 is_stmt 1 view .LVU1244
 105:src/console.c **** 	break;
 4355              		.loc 2 105 2 view .LVU1245
 105:src/console.c **** 	break;
 4356              		.loc 2 105 23 is_stmt 0 view .LVU1246
 4357 0536 194B     		ldr	r3, .L398+40
 4358 0538 93E80300 		ldm	r3, {r0, r1}
 4359 053c 0DF1080A 		add	r10, sp, #8
 4360 0540 8AE80300 		stm	r10, {r0, r1}
 4361              	.LVL399:
 105:src/console.c **** 	break;
 4362              		.loc 2 105 23 view .LVU1247
 4363              	.LBE154:
 4364              	.LBE169:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4365              		.loc 2 521 7 is_stmt 1 view .LVU1248
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4366              		.loc 2 527 7 view .LVU1249
 535:src/console.c **** 	remapped = do_multi (remapped);
 4367              		.loc 2 535 7 view .LVU1250
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4368              		.loc 2 539 7 view .LVU1251
 4369              	.LBB170:
 4370              	.LBB155:
 105:src/console.c **** 	break;
 4371              		.loc 2 105 23 is_stmt 0 view .LVU1252
 4372 0544 2A25     		movs	r5, #42
 4373              	.LVL400:
 105:src/console.c **** 	break;
 4374              		.loc 2 105 23 view .LVU1253
 4375 0546 C1E6     		b	.L340
 4376              	.LVL401:
ARM GAS  /tmp/ccp3OFc8.s 			page 119


 4377              	.L337:
 106:src/console.c ****       case SHIFT_G:
 4378              		.loc 2 106 2 is_stmt 1 view .LVU1254
 108:src/console.c **** 	break;
 4379              		.loc 2 108 2 view .LVU1255
 108:src/console.c **** 	break;
 4380              		.loc 2 108 9 is_stmt 0 view .LVU1256
 4381 0548 154B     		ldr	r3, .L398+44
 4382 054a 92E6     		b	.L377
 4383              	.L381:
  80:src/console.c ****   case KEY_F2:
 4384              		.loc 2 80 33 is_stmt 1 view .LVU1257
  80:src/console.c ****   case KEY_F2:
 4385              		.loc 2 80 51 is_stmt 0 view .LVU1258
 4386 054c DDE90A01 		ldrd	r0, r1, [sp, #40]
 4387 0550 0DF1080A 		add	r10, sp, #8
 4388 0554 8AE80300 		stm	r10, {r0, r1}
 4389 0558 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 4390              	.LVL402:
  80:src/console.c ****   case KEY_F2:
 4391              		.loc 2 80 51 view .LVU1259
 4392 055c 8946     		mov	r9, r1
 4393              	.LVL403:
  80:src/console.c ****   case KEY_F2:
 4394              		.loc 2 80 51 view .LVU1260
 4395 055e 90E6     		b	.L317
 4396              	.LVL404:
 4397              	.L395:
 102:src/console.c **** 	break;
 4398              		.loc 2 102 2 is_stmt 1 view .LVU1261
 102:src/console.c **** 	break;
 4399              		.loc 2 102 21 is_stmt 0 view .LVU1262
 4400 0560 104B     		ldr	r3, .L398+48
 4401 0562 93E80300 		ldm	r3, {r0, r1}
 4402 0566 0DF1080A 		add	r10, sp, #8
 4403 056a 8AE80300 		stm	r10, {r0, r1}
 4404              	.LVL405:
 102:src/console.c **** 	break;
 4405              		.loc 2 102 21 view .LVU1263
 4406              	.LBE155:
 4407              	.LBE170:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4408              		.loc 2 521 7 is_stmt 1 view .LVU1264
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4409              		.loc 2 527 7 view .LVU1265
 535:src/console.c **** 	remapped = do_multi (remapped);
 4410              		.loc 2 535 7 view .LVU1266
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4411              		.loc 2 539 7 view .LVU1267
 4412              	.LBB171:
 4413              	.LBB156:
 102:src/console.c **** 	break;
 4414              		.loc 2 102 21 is_stmt 0 view .LVU1268
 4415 056e 2925     		movs	r5, #41
 4416              	.LVL406:
 102:src/console.c **** 	break;
 4417              		.loc 2 102 21 view .LVU1269
ARM GAS  /tmp/ccp3OFc8.s 			page 120


 4418 0570 ACE6     		b	.L340
 4419              	.L399:
 4420 0572 00BF     		.align	2
 4421              	.L398:
 4422 0574 00000000 		.word	StopWatchStatus
 4423 0578 CDCCCCCC 		.word	-858993459
 4424 057c 99999919 		.word	429496729
 4425 0580 00000000 		.word	.LANCHOR12
 4426 0584 00000000 		.word	.LANCHOR11
 4427 0588 00000000 		.word	.LANCHOR2
 4428 058c 00000000 		.word	.LANCHOR16
 4429 0590 00000000 		.word	.LANCHOR17
 4430 0594 00000000 		.word	.LANCHOR13
 4431 0598 00000000 		.word	.LANCHOR14
 4432 059c E0000000 		.word	.LANCHOR14+224
 4433 05a0 00000000 		.word	.LANCHOR15
 4434 05a4 E0000000 		.word	.LANCHOR13+224
 4435              	.LBE156:
 4436              	.LBE171:
 4437              		.cfi_endproc
 4438              	.LFE32:
 4440              		.global	n_p
 4441              		.comm	print_string,22,4
 4442              		.global	spaces
 4443              		.global	release
 4444              		.global	h_shift
 4445              		.global	g_shift
 4446              		.global	f_shift
 4447              		.global	heartbeat
 4448              		.global	no_key
 4449              		.global	MID_MENU
 4450              		.section	.rodata.str1.4,"aMS",%progbits,1
 4451              		.align	2
 4452              	.LC12:
 4453 0000 53797374 		.ascii	"System!\000"
 4453      656D2100 
 4454              		.global	mid_menu
 4455              		.global	default_menu
 4456              		.global	last_menu
 4457              		.global	current_menu
 4458              		.global	cmplx_key_string
 4459              		.align	2
 4460              	.LC13:
 4461 0008 43505800 		.ascii	"CPX\000"
 4462              		.global	arrow_key_string
 4463              		.align	2
 4464              	.LC14:
 4465 000c 2D2D0D00 		.ascii	"--\015\000"
 4466              		.global	UserMenu
 4467              		.section	.rodata
 4468              		.align	2
 4469              		.set	.LANCHOR7,. + 0
 4470              	.LC8:
 4471 0000 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4471      2A2B0708 
 4471      091C0B0C 
 4471      0D0E0F
ARM GAS  /tmp/ccp3OFc8.s 			page 121


 4472 000f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4472      13141516 
 4472      00121819 
 4472      1A
 4473 001c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4473      1E1F2000 
 4473      21222324 
 4473      25
 4474              		.section	.bss.current_menu,"aw",%nobits
 4475              		.set	.LANCHOR1,. + 0
 4478              	current_menu:
 4479 0000 00       		.space	1
 4480              		.section	.bss.default_menu,"aw",%nobits
 4481              		.set	.LANCHOR2,. + 0
 4484              	default_menu:
 4485 0000 00       		.space	1
 4486              		.section	.bss.last_menu,"aw",%nobits
 4487              		.set	.LANCHOR3,. + 0
 4490              	last_menu:
 4491 0000 00       		.space	1
 4492              		.section	.bss.mdots,"aw",%nobits
 4493              		.align	2
 4494              		.set	.LANCHOR0,. + 0
 4497              	mdots:
 4498 0000 00000000 		.space	400
 4498      00000000 
 4498      00000000 
 4498      00000000 
 4498      00000000 
 4499              		.section	.bss.n_p,"aw",%nobits
 4500              		.align	2
 4503              	n_p:
 4504 0000 00000000 		.space	4
 4505              		.section	.bss.start_ticks,"aw",%nobits
 4506              		.align	2
 4507              		.set	.LANCHOR8,. + 0
 4510              	start_ticks:
 4511 0000 00000000 		.space	4
 4512              		.section	.data.UserMenu,"aw"
 4513              		.align	2
 4514              		.set	.LANCHOR4,. + 0
 4517              	UserMenu:
 4518 0000 55736572 		.ascii	"User Menu\000"
 4518      204D656E 
 4518      7500
 4519 000a 00000000 		.space	5
 4519      00
 4520 000f 00       		.space	1
 4521 0010 2E       		.byte	46
 4522 0011 000000   		.space	3
 4523 0014 FFFFFFFF 		.word	-1
 4524 0018 2E       		.byte	46
 4525 0019 000000   		.space	3
 4526 001c FFFFFFFF 		.word	-1
 4527 0020 00       		.ascii	"\000"
 4528 0021 00000000 		.space	7
 4528      000000
ARM GAS  /tmp/ccp3OFc8.s 			page 122


 4529 0028 00       		.ascii	"\000"
 4530 0029 00000000 		.space	7
 4530      000000
 4531 0030 2E       		.byte	46
 4532 0031 000000   		.space	3
 4533 0034 FFFFFFFF 		.word	-1
 4534 0038 2E       		.byte	46
 4535 0039 000000   		.space	3
 4536 003c FFFFFFFF 		.word	-1
 4537 0040 00       		.ascii	"\000"
 4538 0041 00000000 		.space	7
 4538      000000
 4539 0048 00       		.ascii	"\000"
 4540 0049 00000000 		.space	7
 4540      000000
 4541 0050 2E       		.byte	46
 4542 0051 000000   		.space	3
 4543 0054 FFFFFFFF 		.word	-1
 4544 0058 2E       		.byte	46
 4545 0059 000000   		.space	3
 4546 005c FFFFFFFF 		.word	-1
 4547 0060 00       		.ascii	"\000"
 4548 0061 00000000 		.space	7
 4548      000000
 4549 0068 00       		.ascii	"\000"
 4550 0069 00000000 		.space	7
 4550      000000
 4551 0070 2E       		.byte	46
 4552 0071 000000   		.space	3
 4553 0074 FFFFFFFF 		.word	-1
 4554 0078 2E       		.byte	46
 4555 0079 000000   		.space	3
 4556 007c FFFFFFFF 		.word	-1
 4557 0080 00       		.ascii	"\000"
 4558 0081 00000000 		.space	7
 4558      000000
 4559 0088 00       		.ascii	"\000"
 4560 0089 00000000 		.space	7
 4560      000000
 4561 0090 2C       		.byte	44
 4562 0091 000000   		.space	3
 4563 0094 FFFFFFFF 		.word	-1
 4564 0098 2E       		.byte	46
 4565 0099 000000   		.space	3
 4566 009c FFFFFFFF 		.word	-1
 4567 00a0 2D2D0D00 		.ascii	"--\015\000"
 4568 00a4 00000000 		.space	4
 4569 00a8 00       		.ascii	"\000"
 4570 00a9 00000000 		.space	7
 4570      000000
 4571 00b0 2D       		.byte	45
 4572 00b1 000000   		.space	3
 4573 00b4 FFFFFFFF 		.word	-1
 4574 00b8 31       		.byte	49
 4575 00b9 000000   		.space	3
 4576 00bc 0B000000 		.word	11
 4577 00c0 43505800 		.ascii	"CPX\000"
ARM GAS  /tmp/ccp3OFc8.s 			page 123


 4578 00c4 00000000 		.space	4
 4579 00c8 00       		.ascii	"\000"
 4580 00c9 00000000 		.space	7
 4580      000000
 4581              		.section	.data.arrow_key_string,"aw"
 4582              		.align	2
 4583              		.set	.LANCHOR5,. + 0
 4586              	arrow_key_string:
 4587 0000 0C000000 		.word	.LC14
 4588              		.section	.data.cmplx_key_string,"aw"
 4589              		.align	2
 4590              		.set	.LANCHOR6,. + 0
 4593              	cmplx_key_string:
 4594 0000 08000000 		.word	.LC13
 4595              		.section	.data.f_shift,"aw"
 4596              		.align	2
 4599              	f_shift:
 4600 0000 29       		.byte	41
 4601 0001 000000   		.space	3
 4602 0004 FFFFFFFF 		.word	-1
 4603              		.section	.data.g_shift,"aw"
 4604              		.align	2
 4607              	g_shift:
 4608 0000 2A       		.byte	42
 4609 0001 000000   		.space	3
 4610 0004 FFFFFFFF 		.word	-1
 4611              		.section	.data.h_shift,"aw"
 4612              		.align	2
 4613              		.set	.LANCHOR15,. + 0
 4616              	h_shift:
 4617 0000 2B       		.byte	43
 4618 0001 000000   		.space	3
 4619 0004 FFFFFFFF 		.word	-1
 4620              		.section	.data.heartbeat,"aw"
 4621              		.align	2
 4622              		.set	.LANCHOR19,. + 0
 4625              	heartbeat:
 4626 0000 62       		.byte	98
 4627 0001 000000   		.space	3
 4628 0004 FFFFFFFF 		.word	-1
 4629              		.section	.data.no_key,"aw"
 4630              		.align	2
 4631              		.set	.LANCHOR10,. + 0
 4634              	no_key:
 4635 0000 2E       		.byte	46
 4636 0001 000000   		.space	3
 4637 0004 00000000 		.word	0
 4638              		.section	.data.release,"aw"
 4639              		.align	2
 4640              		.set	.LANCHOR11,. + 0
 4643              	release:
 4644 0000 63       		.byte	99
 4645 0001 000000   		.space	3
 4646 0004 FFFFFFFF 		.word	-1
 4647              		.section	.data.spaces,"aw"
 4648              		.align	2
 4649              		.set	.LANCHOR9,. + 0
ARM GAS  /tmp/ccp3OFc8.s 			page 124


 4652              	spaces:
 4653 0000 20202020 		.ascii	"                     \000"
 4653      20202020 
 4653      20202020 
 4653      20202020 
 4653      20202020 
 4654              		.section	.rodata.MID_MENU,"a"
 4655              		.align	2
 4656              		.set	.LANCHOR18,. + 0
 4659              	MID_MENU:
 4660 0000 00000000 		.word	.LC12
 4661 0004 00000000 		.word	mid_menu
 4662 0008 00000000 		.word	0
 4663 000c 00000000 		.word	0
 4664              		.section	.rodata.Menus,"a"
 4665              		.align	2
 4668              	Menus:
 4669 0000 4D5F426C 		.ascii	"M_Blank\000"
 4669      616E6B00 
 4670 0008 00000000 		.space	7
 4670      000000
 4671 000f 00       		.space	1
 4672 0010 2E       		.byte	46
 4673 0011 000000   		.space	3
 4674 0014 FFFFFFFF 		.word	-1
 4675 0018 2E       		.byte	46
 4676 0019 000000   		.space	3
 4677 001c FFFFFFFF 		.word	-1
 4678 0020 00       		.ascii	"\000"
 4679 0021 00000000 		.space	7
 4679      000000
 4680 0028 00       		.ascii	"\000"
 4681 0029 00000000 		.space	7
 4681      000000
 4682 0030 2E       		.byte	46
 4683 0031 000000   		.space	3
 4684 0034 FFFFFFFF 		.word	-1
 4685 0038 2E       		.byte	46
 4686 0039 000000   		.space	3
 4687 003c FFFFFFFF 		.word	-1
 4688 0040 00       		.ascii	"\000"
 4689 0041 00000000 		.space	7
 4689      000000
 4690 0048 00       		.ascii	"\000"
 4691 0049 00000000 		.space	7
 4691      000000
 4692 0050 2E       		.byte	46
 4693 0051 000000   		.space	3
 4694 0054 FFFFFFFF 		.word	-1
 4695 0058 2E       		.byte	46
 4696 0059 000000   		.space	3
 4697 005c FFFFFFFF 		.word	-1
 4698 0060 00       		.ascii	"\000"
 4699 0061 00000000 		.space	7
 4699      000000
 4700 0068 00       		.ascii	"\000"
 4701 0069 00000000 		.space	7
ARM GAS  /tmp/ccp3OFc8.s 			page 125


 4701      000000
 4702 0070 2E       		.byte	46
 4703 0071 000000   		.space	3
 4704 0074 FFFFFFFF 		.word	-1
 4705 0078 2E       		.byte	46
 4706 0079 000000   		.space	3
 4707 007c FFFFFFFF 		.word	-1
 4708 0080 00       		.ascii	"\000"
 4709 0081 00000000 		.space	7
 4709      000000
 4710 0088 00       		.ascii	"\000"
 4711 0089 00000000 		.space	7
 4711      000000
 4712 0090 2C       		.byte	44
 4713 0091 000000   		.space	3
 4714 0094 FFFFFFFF 		.word	-1
 4715 0098 2E       		.byte	46
 4716 0099 000000   		.space	3
 4717 009c FFFFFFFF 		.word	-1
 4718 00a0 2D2D0D00 		.ascii	"--\015\000"
 4719 00a4 00000000 		.space	4
 4720 00a8 00       		.ascii	"\000"
 4721 00a9 00000000 		.space	7
 4721      000000
 4722 00b0 2D       		.byte	45
 4723 00b1 000000   		.space	3
 4724 00b4 FFFFFFFF 		.word	-1
 4725 00b8 31       		.byte	49
 4726 00b9 000000   		.space	3
 4727 00bc 0B000000 		.word	11
 4728 00c0 43505800 		.ascii	"CPX\000"
 4729 00c4 00000000 		.space	4
 4730 00c8 00       		.ascii	"\000"
 4731 00c9 00000000 		.space	7
 4731      000000
 4732 00d0 4D5F436C 		.ascii	"M_Clear\000"
 4732      65617200 
 4733 00d8 00000000 		.space	7
 4733      000000
 4734 00df 00       		.space	1
 4735 00e0 10       		.byte	16
 4736 00e1 000000   		.space	3
 4737 00e4 01000000 		.word	1
 4738 00e8 34       		.byte	52
 4739 00e9 000000   		.space	3
 4740 00ec 44010000 		.word	324
 4741 00f0 434C5072 		.ascii	"CLProg\000"
 4741      6F6700
 4742 00f7 00       		.space	1
 4743 00f8 434C5041 		.ascii	"CLPAll\000"
 4743      6C6C00
 4744 00ff 00       		.space	1
 4745 0100 10       		.byte	16
 4746 0101 000000   		.space	3
 4747 0104 02000000 		.word	2
 4748 0108 34       		.byte	52
 4749 0109 000000   		.space	3
ARM GAS  /tmp/ccp3OFc8.s 			page 126


 4750 010c 3E010000 		.word	318
 4751 0110 434C9100 		.ascii	"CL\221\000"
 4752 0114 00000000 		.space	4
 4753 0118 434C5265 		.ascii	"CLReg\000"
 4753      6700
 4754 011e 0000     		.space	2
 4755 0120 10       		.byte	16
 4756 0121 000000   		.space	3
 4757 0124 03000000 		.word	3
 4758 0128 34       		.byte	52
 4759 0129 000000   		.space	3
 4760 012c 74010000 		.word	372
 4761 0130 434C7800 		.ascii	"CLx\000"
 4762 0134 00000000 		.space	4
 4763 0138 434C06A0 		.ascii	"CL\006\240\000"
 4763      00
 4764 013d 000000   		.space	3
 4765 0140 34       		.byte	52
 4766 0141 000000   		.space	3
 4767 0144 40010000 		.word	320
 4768 0148 34       		.byte	52
 4769 0149 000000   		.space	3
 4770 014c 41010000 		.word	321
 4771 0150 434C5374 		.ascii	"CLStk\000"
 4771      6B00
 4772 0156 0000     		.space	2
 4773 0158 434C416C 		.ascii	"CLAll\000"
 4773      6C00
 4774 015e 0000     		.space	2
 4775 0160 2C       		.byte	44
 4776 0161 000000   		.space	3
 4777 0164 FFFFFFFF 		.word	-1
 4778 0168 2E       		.byte	46
 4779 0169 000000   		.space	3
 4780 016c FFFFFFFF 		.word	-1
 4781 0170 2D2D0D00 		.ascii	"--\015\000"
 4782 0174 00000000 		.space	4
 4783 0178 00       		.ascii	"\000"
 4784 0179 00000000 		.space	7
 4784      000000
 4785 0180 2D       		.byte	45
 4786 0181 000000   		.space	3
 4787 0184 FFFFFFFF 		.word	-1
 4788 0188 2E       		.byte	46
 4789 0189 000000   		.space	3
 4790 018c FFFFFFFF 		.word	-1
 4791 0190 43505800 		.ascii	"CPX\000"
 4792 0194 00000000 		.space	4
 4793 0198 00       		.ascii	"\000"
 4794 0199 00000000 		.space	7
 4794      000000
 4795 01a0 4D5F4469 		.ascii	"M_Disp\000"
 4795      737000
 4796 01a7 00000000 		.space	8
 4796      00000000 
 4797 01af 00       		.space	1
 4798 01b0 00       		.byte	0
ARM GAS  /tmp/ccp3OFc8.s 			page 127


 4799 01b1 000000   		.space	3
 4800 01b4 03000000 		.word	3
 4801 01b8 05       		.byte	5
 4802 01b9 000000   		.space	3
 4803 01bc 01000000 		.word	1
 4804 01c0 414C4C00 		.ascii	"ALL\000"
 4805 01c4 00000000 		.space	4
 4806 01c8 6120622F 		.ascii	"a b/c\000"
 4806      6300
 4807 01ce 0000     		.space	2
 4808 01d0 01       		.byte	1
 4809 01d1 000000   		.space	3
 4810 01d4 03000000 		.word	3
 4811 01d8 05       		.byte	5
 4812 01d9 000000   		.space	3
 4813 01dc 02000000 		.word	2
 4814 01e0 46495800 		.ascii	"FIX\000"
 4815 01e4 00000000 		.space	4
 4816 01e8 642F6300 		.ascii	"d/c\000"
 4817 01ec 00000000 		.space	4
 4818 01f0 02       		.byte	2
 4819 01f1 000000   		.space	3
 4820 01f4 03000000 		.word	3
 4821 01f8 06       		.byte	6
 4822 01f9 000000   		.space	3
 4823 01fc 01000000 		.word	1
 4824 0200 53434900 		.ascii	"SCI\000"
 4825 0204 00000000 		.space	4
 4826 0208 482E4D53 		.ascii	"H.MS\000"
 4826      00
 4827 020d 000000   		.space	3
 4828 0210 03       		.byte	3
 4829 0211 000000   		.space	3
 4830 0214 03000000 		.word	3
 4831 0218 07       		.byte	7
 4832 0219 000000   		.space	3
 4833 021c 01000000 		.word	1
 4834 0220 454E4700 		.ascii	"ENG\000"
 4835 0224 00000000 		.space	4
 4836 0228 482E6400 		.ascii	"H.d\000"
 4837 022c 00000000 		.space	4
 4838 0230 2C       		.byte	44
 4839 0231 000000   		.space	3
 4840 0234 FFFFFFFF 		.word	-1
 4841 0238 26       		.byte	38
 4842 0239 000000   		.space	3
 4843 023c 03000000 		.word	3
 4844 0240 2D2D0D00 		.ascii	"--\015\000"
 4845 0244 00000000 		.space	4
 4846 0248 2E2F2C00 		.ascii	"./,\000"
 4847 024c 00000000 		.space	4
 4848 0250 2D       		.byte	45
 4849 0251 000000   		.space	3
 4850 0254 FFFFFFFF 		.word	-1
 4851 0258 2E       		.byte	46
 4852 0259 000000   		.space	3
 4853 025c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccp3OFc8.s 			page 128


 4854 0260 43505800 		.ascii	"CPX\000"
 4855 0264 00000000 		.space	4
 4856 0268 00       		.ascii	"\000"
 4857 0269 00000000 		.space	7
 4857      000000
 4858 0270 4D5F4261 		.ascii	"M_Base\000"
 4858      736500
 4859 0277 00000000 		.space	8
 4859      00000000 
 4860 027f 00       		.space	1
 4861 0280 0E       		.byte	14
 4862 0281 000000   		.space	3
 4863 0284 01000000 		.word	1
 4864 0288 0E       		.byte	14
 4865 0289 000000   		.space	3
 4866 028c 03000000 		.word	3
 4867 0290 42494E00 		.ascii	"BIN\000"
 4868 0294 00000000 		.space	4
 4869 0298 6E6F7400 		.ascii	"not\000"
 4870 029c 00000000 		.space	4
 4871 02a0 0E       		.byte	14
 4872 02a1 000000   		.space	3
 4873 02a4 02000000 		.word	2
 4874 02a8 13       		.byte	19
 4875 02a9 000000   		.space	3
 4876 02ac 03000000 		.word	3
 4877 02b0 4F435400 		.ascii	"OCT\000"
 4878 02b4 00000000 		.space	4
 4879 02b8 616E6400 		.ascii	"and\000"
 4880 02bc 00000000 		.space	4
 4881 02c0 0F       		.byte	15
 4882 02c1 000000   		.space	3
 4883 02c4 01000000 		.word	1
 4884 02c8 14       		.byte	20
 4885 02c9 000000   		.space	3
 4886 02cc 03000000 		.word	3
 4887 02d0 44454300 		.ascii	"DEC\000"
 4888 02d4 00000000 		.space	4
 4889 02d8 6F7200   		.ascii	"or\000"
 4890 02db 00000000 		.space	5
 4890      00
 4891 02e0 0F       		.byte	15
 4892 02e1 000000   		.space	3
 4893 02e4 02000000 		.word	2
 4894 02e8 15       		.byte	21
 4895 02e9 000000   		.space	3
 4896 02ec 03000000 		.word	3
 4897 02f0 48455800 		.ascii	"HEX\000"
 4898 02f4 00000000 		.space	4
 4899 02f8 786F7200 		.ascii	"xor\000"
 4900 02fc 00000000 		.space	4
 4901 0300 2C       		.byte	44
 4902 0301 000000   		.space	3
 4903 0304 FFFFFFFF 		.word	-1
 4904 0308 16       		.byte	22
 4905 0309 000000   		.space	3
 4906 030c 03000000 		.word	3
ARM GAS  /tmp/ccp3OFc8.s 			page 129


 4907 0310 2D2D0D00 		.ascii	"--\015\000"
 4908 0314 00000000 		.space	4
 4909 0318 524D4452 		.ascii	"RMDR\000"
 4909      00
 4910 031d 000000   		.space	3
 4911 0320 2D       		.byte	45
 4912 0321 000000   		.space	3
 4913 0324 FFFFFFFF 		.word	-1
 4914 0328 07       		.byte	7
 4915 0329 000000   		.space	3
 4916 032c 01000000 		.word	1
 4917 0330 43505800 		.ascii	"CPX\000"
 4918 0334 00000000 		.space	4
 4919 0338 482E6400 		.ascii	"H.d\000"
 4920 033c 00000000 		.space	4
 4921 0340 4D5F416E 		.ascii	"M_Angles\000"
 4921      676C6573 
 4921      00
 4922 0349 00000000 		.space	6
 4922      0000
 4923 034f 00       		.space	1
 4924 0350 06       		.byte	6
 4925 0351 000000   		.space	3
 4926 0354 02000000 		.word	2
 4927 0358 04       		.byte	4
 4928 0359 000000   		.space	3
 4929 035c 01000000 		.word	1
 4930 0360 44454700 		.ascii	"DEG\000"
 4931 0364 00000000 		.space	4
 4932 0368 500D5200 		.ascii	"P\015R\000"
 4933 036c 00000000 		.space	4
 4934 0370 07       		.byte	7
 4935 0371 000000   		.space	3
 4936 0374 02000000 		.word	2
 4937 0378 04       		.byte	4
 4938 0379 000000   		.space	3
 4939 037c 02000000 		.word	2
 4940 0380 52414400 		.ascii	"RAD\000"
 4941 0384 00000000 		.space	4
 4942 0388 520D5000 		.ascii	"R\015P\000"
 4943 038c 00000000 		.space	4
 4944 0390 08       		.byte	8
 4945 0391 000000   		.space	3
 4946 0394 02000000 		.word	2
 4947 0398 00       		.byte	0
 4948 0399 000000   		.space	3
 4949 039c 01000000 		.word	1
 4950 03a0 47524144 		.ascii	"GRAD\000"
 4950      00
 4951 03a5 000000   		.space	3
 4952 03a8 48595000 		.ascii	"HYP\000"
 4953 03ac 00000000 		.space	4
 4954 03b0 06       		.byte	6
 4955 03b1 000000   		.space	3
 4956 03b4 01000000 		.word	1
 4957 03b8 07       		.byte	7
 4958 03b9 000000   		.space	3
ARM GAS  /tmp/ccp3OFc8.s 			page 130


 4959 03bc 01000000 		.word	1
 4960 03c0 482E4D53 		.ascii	"H.MS\000"
 4960      00
 4961 03c5 000000   		.space	3
 4962 03c8 482E6400 		.ascii	"H.d\000"
 4963 03cc 00000000 		.space	4
 4964 03d0 2C       		.byte	44
 4965 03d1 000000   		.space	3
 4966 03d4 FFFFFFFF 		.word	-1
 4967 03d8 00       		.byte	0
 4968 03d9 000000   		.space	3
 4969 03dc 02000000 		.word	2
 4970 03e0 2D2D0D00 		.ascii	"--\015\000"
 4971 03e4 00000000 		.space	4
 4972 03e8 4859509D 		.ascii	"HYP\235\000"
 4972      00
 4973 03ed 000000   		.space	3
 4974 03f0 2D       		.byte	45
 4975 03f1 000000   		.space	3
 4976 03f4 FFFFFFFF 		.word	-1
 4977 03f8 2E       		.byte	46
 4978 03f9 000000   		.space	3
 4979 03fc FFFFFFFF 		.word	-1
 4980 0400 43505800 		.ascii	"CPX\000"
 4981 0404 00000000 		.space	4
 4982 0408 00       		.ascii	"\000"
 4983 0409 00000000 		.space	7
 4983      000000
 4984 0410 4D5F4D69 		.ascii	"M_Misc\000"
 4984      736300
 4985 0417 00000000 		.space	8
 4985      00000000 
 4986 041f 00       		.space	1
 4987 0420 25       		.byte	37
 4988 0421 000000   		.space	3
 4989 0424 01000000 		.word	1
 4990 0428 14       		.byte	20
 4991 0429 000000   		.space	3
 4992 042c 01000000 		.word	1
 4993 0430 7C587C00 		.ascii	"|X|\000"
 4994 0434 00000000 		.space	4
 4995 0438 329C00   		.ascii	"2\234\000"
 4996 043b 00000000 		.space	5
 4996      00
 4997 0440 25       		.byte	37
 4998 0441 000000   		.space	3
 4999 0444 02000000 		.word	2
 5000 0448 14       		.byte	20
 5001 0449 000000   		.space	3
 5002 044c 02000000 		.word	2
 5003 0450 524E4400 		.ascii	"RND\000"
 5004 0454 00000000 		.space	4
 5005 0458 4C6F67BA 		.ascii	"Log\272\000"
 5005      00
 5006 045d 000000   		.space	3
 5007 0460 26       		.byte	38
 5008 0461 000000   		.space	3
ARM GAS  /tmp/ccp3OFc8.s 			page 131


 5009 0464 01000000 		.word	1
 5010 0468 15       		.byte	21
 5011 0469 000000   		.space	3
 5012 046c 02000000 		.word	2
 5013 0470 49506172 		.ascii	"IPart\000"
 5013      7400
 5014 0476 0000     		.space	2
 5015 0478 4C6F678B 		.ascii	"Log\213\000"
 5015      00
 5016 047d 000000   		.space	3
 5017 0480 26       		.byte	38
 5018 0481 000000   		.space	3
 5019 0484 02000000 		.word	2
 5020 0488 16       		.byte	22
 5021 0489 000000   		.space	3
 5022 048c 02000000 		.word	2
 5023 0490 46506172 		.ascii	"FPart\000"
 5023      7400
 5024 0496 0000     		.space	2
 5025 0498 7C7C656C 		.ascii	"||el\000"
 5025      00
 5026 049d 000000   		.space	3
 5027 04a0 2C       		.byte	44
 5028 04a1 000000   		.space	3
 5029 04a4 FFFFFFFF 		.word	-1
 5030 04a8 22       		.byte	34
 5031 04a9 000000   		.space	3
 5032 04ac 02000000 		.word	2
 5033 04b0 2D2D0D00 		.ascii	"--\015\000"
 5034 04b4 00000000 		.space	4
 5035 04b8 832500   		.ascii	"\203%\000"
 5036 04bb 00000000 		.space	5
 5036      00
 5037 04c0 2D       		.byte	45
 5038 04c1 000000   		.space	3
 5039 04c4 FFFFFFFF 		.word	-1
 5040 04c8 2E       		.byte	46
 5041 04c9 000000   		.space	3
 5042 04cc FFFFFFFF 		.word	-1
 5043 04d0 43505800 		.ascii	"CPX\000"
 5044 04d4 00000000 		.space	4
 5045 04d8 00       		.ascii	"\000"
 5046 04d9 00000000 		.space	7
 5046      000000
 5047 04e0 4D5F5377 		.ascii	"M_Swap\000"
 5047      617000
 5048 04e7 00000000 		.space	8
 5048      00000000 
 5049 04ef 00       		.space	1
 5050 04f0 0D       		.byte	13
 5051 04f1 000000   		.space	3
 5052 04f4 01000000 		.word	1
 5053 04f8 34       		.byte	52
 5054 04f9 000000   		.space	3
 5055 04fc 00A60000 		.word	42496
 5056 0500 53686F77 		.ascii	"Show\016\000"
 5056      0E00
ARM GAS  /tmp/ccp3OFc8.s 			page 132


 5057 0506 0000     		.space	2
 5058 0508 5B175D00 		.ascii	"[\027]\000"
 5059 050c 00000000 		.space	4
 5060 0510 0D       		.byte	13
 5061 0511 000000   		.space	3
 5062 0514 02000000 		.word	2
 5063 0518 2E       		.byte	46
 5064 0519 000000   		.space	3
 5065 051c FFFFFFFF 		.word	-1
 5066 0520 53686F77 		.ascii	"Show\015\000"
 5066      0D00
 5067 0526 0000     		.space	2
 5068 0528 00       		.ascii	"\000"
 5069 0529 00000000 		.space	7
 5069      000000
 5070 0530 0D       		.byte	13
 5071 0531 000000   		.space	3
 5072 0534 03000000 		.word	3
 5073 0538 34       		.byte	52
 5074 0539 000000   		.space	3
 5075 053c 00330000 		.word	13056
 5076 0540 78173F00 		.ascii	"x\027?\000"
 5077 0544 00000000 		.space	4
 5078 0548 7A173F00 		.ascii	"z\027?\000"
 5079 054c 00000000 		.space	4
 5080 0550 34       		.byte	52
 5081 0551 000000   		.space	3
 5082 0554 00320000 		.word	12800
 5083 0558 34       		.byte	52
 5084 0559 000000   		.space	3
 5085 055c 00340000 		.word	13312
 5086 0560 79173F00 		.ascii	"y\027?\000"
 5087 0564 00000000 		.space	4
 5088 0568 74173F00 		.ascii	"t\027?\000"
 5089 056c 00000000 		.space	4
 5090 0570 2C       		.byte	44
 5091 0571 000000   		.space	3
 5092 0574 FFFFFFFF 		.word	-1
 5093 0578 2E       		.byte	46
 5094 0579 000000   		.space	3
 5095 057c FFFFFFFF 		.word	-1
 5096 0580 2D2D0D00 		.ascii	"--\015\000"
 5097 0584 00000000 		.space	4
 5098 0588 00       		.ascii	"\000"
 5099 0589 00000000 		.space	7
 5099      000000
 5100 0590 2D       		.byte	45
 5101 0591 000000   		.space	3
 5102 0594 FFFFFFFF 		.word	-1
 5103 0598 2E       		.byte	46
 5104 0599 000000   		.space	3
 5105 059c FFFFFFFF 		.word	-1
 5106 05a0 43505800 		.ascii	"CPX\000"
 5107 05a4 00000000 		.space	4
 5108 05a8 00       		.ascii	"\000"
 5109 05a9 00000000 		.space	7
 5109      000000
ARM GAS  /tmp/ccp3OFc8.s 			page 133


 5110 05b0 4D5F5072 		.ascii	"M_Program\000"
 5110      6F677261 
 5110      6D00
 5111 05ba 00000000 		.space	5
 5111      00
 5112 05bf 00       		.space	1
 5113 05c0 27       		.byte	39
 5114 05c1 000000   		.space	3
 5115 05c4 01000000 		.word	1
 5116 05c8 28       		.byte	40
 5117 05c9 000000   		.space	3
 5118 05cc 01000000 		.word	1
 5119 05d0 4C424C00 		.ascii	"LBL\000"
 5120 05d4 00000000 		.space	4
 5121 05d8 44534500 		.ascii	"DSE\000"
 5122 05dc 00000000 		.space	4
 5123 05e0 27       		.byte	39
 5124 05e1 000000   		.space	3
 5125 05e4 02000000 		.word	2
 5126 05e8 28       		.byte	40
 5127 05e9 000000   		.space	3
 5128 05ec 02000000 		.word	2
 5129 05f0 52544E00 		.ascii	"RTN\000"
 5130 05f4 00000000 		.space	4
 5131 05f8 49534700 		.ascii	"ISG\000"
 5132 05fc 00000000 		.space	4
 5133 0600 25       		.byte	37
 5134 0601 000000   		.space	3
 5135 0604 03000000 		.word	3
 5136 0608 34       		.byte	52
 5137 0609 000000   		.space	3
 5138 060c 00600000 		.word	24576
 5139 0610 50617573 		.ascii	"Pause\000"
 5139      6500
 5140 0616 0000     		.space	2
 5141 0618 44454300 		.ascii	"DEC\000"
 5142 061c 00000000 		.space	4
 5143 0620 12       		.byte	18
 5144 0621 000000   		.space	3
 5145 0624 03000000 		.word	3
 5146 0628 34       		.byte	52
 5147 0629 000000   		.space	3
 5148 062c 00610000 		.word	24832
 5149 0630 47544F00 		.ascii	"GTO\000"
 5150 0634 00000000 		.space	4
 5151 0638 494E4300 		.ascii	"INC\000"
 5152 063c 00000000 		.space	4
 5153 0640 2C       		.byte	44
 5154 0641 000000   		.space	3
 5155 0644 FFFFFFFF 		.word	-1
 5156 0648 34       		.byte	52
 5157 0649 000000   		.space	3
 5158 064c 00570000 		.word	22272
 5159 0650 2D2D0D00 		.ascii	"--\015\000"
 5160 0654 00000000 		.space	4
 5161 0658 4241434B 		.ascii	"BACK\000"
 5161      00
ARM GAS  /tmp/ccp3OFc8.s 			page 134


 5162 065d 000000   		.space	3
 5163 0660 2D       		.byte	45
 5164 0661 000000   		.space	3
 5165 0664 FFFFFFFF 		.word	-1
 5166 0668 34       		.byte	52
 5167 0669 000000   		.space	3
 5168 066c 00560000 		.word	22016
 5169 0670 43505800 		.ascii	"CPX\000"
 5170 0674 00000000 		.space	4
 5171 0678 534B4950 		.ascii	"SKIP\000"
 5171      00
 5172 067d 000000   		.space	3
 5173 0680 4D5F5365 		.ascii	"M_Setup1\000"
 5173      74757031 
 5173      00
 5174 0689 00000000 		.space	6
 5174      0000
 5175 068f 00       		.space	1
 5176 0690 32       		.byte	50
 5177 0691 000000   		.space	3
 5178 0694 00000000 		.word	0
 5179 0698 30       		.byte	48
 5180 0699 000000   		.space	3
 5181 069c 00000000 		.word	0
 5182 06a0 45584954 		.ascii	"EXIT\000"
 5182      00
 5183 06a5 000000   		.space	3
 5184 06a8 53797374 		.ascii	"System\000"
 5184      656D00
 5185 06af 00       		.space	1
 5186 06b0 31       		.byte	49
 5187 06b1 000000   		.space	3
 5188 06b4 09000000 		.word	9
 5189 06b8 2E       		.byte	46
 5190 06b9 000000   		.space	3
 5191 06bc FFFFFFFF 		.word	-1
 5192 06c0 48454C50 		.ascii	"HELP\000"
 5192      00
 5193 06c5 000000   		.space	3
 5194 06c8 00       		.ascii	"\000"
 5195 06c9 00000000 		.space	7
 5195      000000
 5196 06d0 31       		.byte	49
 5197 06d1 000000   		.space	3
 5198 06d4 02000000 		.word	2
 5199 06d8 31       		.byte	49
 5200 06d9 000000   		.space	3
 5201 06dc 06000000 		.word	6
 5202 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5202      4F00
 5203 06e6 0000     		.space	2
 5204 06e8 53765241 		.ascii	"SvRAM\000"
 5204      4D00
 5205 06ee 0000     		.space	2
 5206 06f0 31       		.byte	49
 5207 06f1 000000   		.space	3
 5208 06f4 03000000 		.word	3
ARM GAS  /tmp/ccp3OFc8.s 			page 135


 5209 06f8 31       		.byte	49
 5210 06f9 000000   		.space	3
 5211 06fc 07000000 		.word	7
 5212 0700 4F6E5243 		.ascii	"OnRCL\000"
 5212      4C00
 5213 0706 0000     		.space	2
 5214 0708 4C645241 		.ascii	"LdRAM\000"
 5214      4D00
 5215 070e 0000     		.space	2
 5216 0710 2C       		.byte	44
 5217 0711 000000   		.space	3
 5218 0714 FFFFFFFF 		.word	-1
 5219 0718 2E       		.byte	46
 5220 0719 000000   		.space	3
 5221 071c FFFFFFFF 		.word	-1
 5222 0720 2D2D0D00 		.ascii	"--\015\000"
 5223 0724 00000000 		.space	4
 5224 0728 00       		.ascii	"\000"
 5225 0729 00000000 		.space	7
 5225      000000
 5226 0730 2D       		.byte	45
 5227 0731 000000   		.space	3
 5228 0734 FFFFFFFF 		.word	-1
 5229 0738 2E       		.byte	46
 5230 0739 000000   		.space	3
 5231 073c FFFFFFFF 		.word	-1
 5232 0740 43505800 		.ascii	"CPX\000"
 5233 0744 00000000 		.space	4
 5234 0748 00       		.ascii	"\000"
 5235 0749 00000000 		.space	7
 5235      000000
 5236 0750 4D5F4172 		.ascii	"M_Arrow\000"
 5236      726F7700 
 5237 0758 00000000 		.space	7
 5237      000000
 5238 075f 00       		.space	1
 5239 0760 0E       		.byte	14
 5240 0761 000000   		.space	3
 5241 0764 01000000 		.word	1
 5242 0768 06       		.byte	6
 5243 0769 000000   		.space	3
 5244 076c 02000000 		.word	2
 5245 0770 42696E00 		.ascii	"Bin\000"
 5246 0774 00000000 		.space	4
 5247 0778 44454700 		.ascii	"DEG\000"
 5248 077c 00000000 		.space	4
 5249 0780 0E       		.byte	14
 5250 0781 000000   		.space	3
 5251 0784 02000000 		.word	2
 5252 0788 07       		.byte	7
 5253 0789 000000   		.space	3
 5254 078c 02000000 		.word	2
 5255 0790 4F637400 		.ascii	"Oct\000"
 5256 0794 00000000 		.space	4
 5257 0798 52414400 		.ascii	"RAD\000"
 5258 079c 00000000 		.space	4
 5259 07a0 0F       		.byte	15
ARM GAS  /tmp/ccp3OFc8.s 			page 136


 5260 07a1 000000   		.space	3
 5261 07a4 01000000 		.word	1
 5262 07a8 08       		.byte	8
 5263 07a9 000000   		.space	3
 5264 07ac 02000000 		.word	2
 5265 07b0 44656300 		.ascii	"Dec\000"
 5266 07b4 00000000 		.space	4
 5267 07b8 47726164 		.ascii	"Grad\000"
 5267      00
 5268 07bd 000000   		.space	3
 5269 07c0 0F       		.byte	15
 5270 07c1 000000   		.space	3
 5271 07c4 02000000 		.word	2
 5272 07c8 06       		.byte	6
 5273 07c9 000000   		.space	3
 5274 07cc 01000000 		.word	1
 5275 07d0 48657800 		.ascii	"Hex\000"
 5276 07d4 00000000 		.space	4
 5277 07d8 0D484D53 		.ascii	"\015HMS\000"
 5277      00
 5278 07dd 000000   		.space	3
 5279 07e0 2C       		.byte	44
 5280 07e1 000000   		.space	3
 5281 07e4 FFFFFFFF 		.word	-1
 5282 07e8 07       		.byte	7
 5283 07e9 000000   		.space	3
 5284 07ec 01000000 		.word	1
 5285 07f0 2D2D0D00 		.ascii	"--\015\000"
 5286 07f4 00000000 		.space	4
 5287 07f8 484D530D 		.ascii	"HMS\015\000"
 5287      00
 5288 07fd 000000   		.space	3
 5289 0800 2D       		.byte	45
 5290 0801 000000   		.space	3
 5291 0804 FFFFFFFF 		.word	-1
 5292 0808 2E       		.byte	46
 5293 0809 000000   		.space	3
 5294 080c FFFFFFFF 		.word	-1
 5295 0810 43505800 		.ascii	"CPX\000"
 5296 0814 00000000 		.space	4
 5297 0818 00       		.ascii	"\000"
 5298 0819 00000000 		.space	7
 5298      000000
 5299 0820 4D5F466C 		.ascii	"M_Flags\000"
 5299      61677300 
 5300 0828 00000000 		.space	7
 5300      000000
 5301 082f 00       		.space	1
 5302 0830 1E       		.byte	30
 5303 0831 000000   		.space	3
 5304 0834 01000000 		.word	1
 5305 0838 34       		.byte	52
 5306 0839 000000   		.space	3
 5307 083c 00740000 		.word	29696
 5308 0840 53465F00 		.ascii	"SF_\000"
 5309 0844 00000000 		.space	4
 5310 0848 46533F00 		.ascii	"FS?\000"
ARM GAS  /tmp/ccp3OFc8.s 			page 137


 5311 084c 00000000 		.space	4
 5312 0850 1E       		.byte	30
 5313 0851 000000   		.space	3
 5314 0854 02000000 		.word	2
 5315 0858 34       		.byte	52
 5316 0859 000000   		.space	3
 5317 085c 00750000 		.word	29952
 5318 0860 43465F00 		.ascii	"CF_\000"
 5319 0864 00000000 		.space	4
 5320 0868 46433F00 		.ascii	"FC?\000"
 5321 086c 00000000 		.space	4
 5322 0870 1F       		.byte	31
 5323 0871 000000   		.space	3
 5324 0874 01000000 		.word	1
 5325 0878 34       		.byte	52
 5326 0879 000000   		.space	3
 5327 087c 00500000 		.word	20480
 5328 0880 783D3F00 		.ascii	"x=?\000"
 5329 0884 00000000 		.space	4
 5330 0888 783C3F00 		.ascii	"x<?\000"
 5331 088c 00000000 		.space	4
 5332 0890 1F       		.byte	31
 5333 0891 000000   		.space	3
 5334 0894 02000000 		.word	2
 5335 0898 34       		.byte	52
 5336 0899 000000   		.space	3
 5337 089c 00510000 		.word	20736
 5338 08a0 780B3F00 		.ascii	"x\013?\000"
 5339 08a4 00000000 		.space	4
 5340 08a8 783C3D3F 		.ascii	"x<=?\000"
 5340      00
 5341 08ad 000000   		.space	3
 5342 08b0 2C       		.byte	44
 5343 08b1 000000   		.space	3
 5344 08b4 FFFFFFFF 		.word	-1
 5345 08b8 34       		.byte	52
 5346 08b9 000000   		.space	3
 5347 08bc 00530000 		.word	21248
 5348 08c0 2D2D0D00 		.ascii	"--\015\000"
 5349 08c4 00000000 		.space	4
 5350 08c8 783E3D3F 		.ascii	"x>=?\000"
 5350      00
 5351 08cd 000000   		.space	3
 5352 08d0 2D       		.byte	45
 5353 08d1 000000   		.space	3
 5354 08d4 FFFFFFFF 		.word	-1
 5355 08d8 34       		.byte	52
 5356 08d9 000000   		.space	3
 5357 08dc 00520000 		.word	20992
 5358 08e0 43505800 		.ascii	"CPX\000"
 5359 08e4 00000000 		.space	4
 5360 08e8 783E3F00 		.ascii	"x>?\000"
 5361 08ec 00000000 		.space	4
 5362 08f0 4D5F5072 		.ascii	"M_Prob\000"
 5362      6F6200
 5363 08f7 00000000 		.space	8
 5363      00000000 
ARM GAS  /tmp/ccp3OFc8.s 			page 138


 5364 08ff 00       		.space	1
 5365 0900 18       		.byte	24
 5366 0901 000000   		.space	3
 5367 0904 03000000 		.word	3
 5368 0908 34       		.byte	52
 5369 0909 000000   		.space	3
 5370 090c 31020000 		.word	561
 5371 0910 46616374 		.ascii	"Fact!\000"
 5371      2100
 5372 0916 0000     		.space	2
 5373 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5373      00
 5374 091d 000000   		.space	3
 5375 0920 18       		.byte	24
 5376 0921 000000   		.space	3
 5377 0924 01000000 		.word	1
 5378 0928 19       		.byte	25
 5379 0929 000000   		.space	3
 5380 092c 01000000 		.word	1
 5381 0930 43792C78 		.ascii	"Cy,x\000"
 5381      00
 5382 0935 000000   		.space	3
 5383 0938 9400     		.ascii	"\224\000"
 5384 093a 00000000 		.space	6
 5384      0000
 5385 0940 18       		.byte	24
 5386 0941 000000   		.space	3
 5387 0944 02000000 		.word	2
 5388 0948 19       		.byte	25
 5389 0949 000000   		.space	3
 5390 094c 02000000 		.word	2
 5391 0950 50792C78 		.ascii	"Py,x\000"
 5391      00
 5392 0955 000000   		.space	3
 5393 0958 949D00   		.ascii	"\224\235\000"
 5394 095b 00000000 		.space	5
 5394      00
 5395 0960 08       		.byte	8
 5396 0961 000000   		.space	3
 5397 0964 01000000 		.word	1
 5398 0968 34       		.byte	52
 5399 0969 000000   		.space	3
 5400 096c 34010000 		.word	308
 5401 0970 52414E23 		.ascii	"RAN#\000"
 5401      00
 5402 0975 000000   		.space	3
 5403 0978 53454544 		.ascii	"SEED\000"
 5403      00
 5404 097d 000000   		.space	3
 5405 0980 2C       		.byte	44
 5406 0981 000000   		.space	3
 5407 0984 FFFFFFFF 		.word	-1
 5408 0988 2E       		.byte	46
 5409 0989 000000   		.space	3
 5410 098c FFFFFFFF 		.word	-1
 5411 0990 2D2D0D00 		.ascii	"--\015\000"
 5412 0994 00000000 		.space	4
ARM GAS  /tmp/ccp3OFc8.s 			page 139


 5413 0998 00       		.ascii	"\000"
 5414 0999 00000000 		.space	7
 5414      000000
 5415 09a0 2D       		.byte	45
 5416 09a1 000000   		.space	3
 5417 09a4 FFFFFFFF 		.word	-1
 5418 09a8 2E       		.byte	46
 5419 09a9 000000   		.space	3
 5420 09ac FFFFFFFF 		.word	-1
 5421 09b0 43505800 		.ascii	"CPX\000"
 5422 09b4 00000000 		.space	4
 5423 09b8 00       		.ascii	"\000"
 5424 09b9 00000000 		.space	7
 5424      000000
 5425 09c0 4D5F5374 		.ascii	"M_Stats\000"
 5425      61747300 
 5426 09c8 00000000 		.space	7
 5426      000000
 5427 09cf 00       		.space	1
 5428 09d0 1A       		.byte	26
 5429 09d1 000000   		.space	3
 5430 09d4 01000000 		.word	1
 5431 09d8 1A       		.byte	26
 5432 09d9 000000   		.space	3
 5433 09dc 02000000 		.word	2
 5434 09e0 0100     		.ascii	"\001\000"
 5435 09e2 00000000 		.space	6
 5435      0000
 5436 09e8 532E442E 		.ascii	"S.D.\000"
 5436      00
 5437 09ed 000000   		.space	3
 5438 09f0 1B       		.byte	27
 5439 09f1 000000   		.space	3
 5440 09f4 01000000 		.word	1
 5441 09f8 34       		.byte	52
 5442 09f9 000000   		.space	3
 5443 09fc 74020000 		.word	628
 5444 0a00 792D6861 		.ascii	"y-hat\000"
 5444      7400
 5445 0a06 0000     		.space	2
 5446 0a08 782D6861 		.ascii	"x-hat\000"
 5446      7400
 5447 0a0e 0000     		.space	2
 5448 0a10 34       		.byte	52
 5449 0a11 000000   		.space	3
 5450 0a14 27010000 		.word	295
 5451 0a18 34       		.byte	52
 5452 0a19 000000   		.space	3
 5453 0a1c 28010000 		.word	296
 5454 0a20 434F5252 		.ascii	"CORR\000"
 5454      00
 5455 0a25 000000   		.space	3
 5456 0a28 4C2E522E 		.ascii	"L.R.\000"
 5456      00
 5457 0a2d 000000   		.space	3
 5458 0a30 34       		.byte	52
 5459 0a31 000000   		.space	3
ARM GAS  /tmp/ccp3OFc8.s 			page 140


 5460 0a34 32010000 		.word	306
 5461 0a38 34       		.byte	52
 5462 0a39 000000   		.space	3
 5463 0a3c 31010000 		.word	305
 5464 0a40 42657374 		.ascii	"BestF\000"
 5464      4600
 5465 0a46 0000     		.space	2
 5466 0a48 4C6F6746 		.ascii	"LogFit\000"
 5466      697400
 5467 0a4f 00       		.space	1
 5468 0a50 34       		.byte	52
 5469 0a51 000000   		.space	3
 5470 0a54 2E010000 		.word	302
 5471 0a58 34       		.byte	52
 5472 0a59 000000   		.space	3
 5473 0a5c 2F010000 		.word	303
 5474 0a60 4C696E65 		.ascii	"Linear\000"
 5474      617200
 5475 0a67 00       		.space	1
 5476 0a68 45787046 		.ascii	"ExpFit\000"
 5476      697400
 5477 0a6f 00       		.space	1
 5478 0a70 2D       		.byte	45
 5479 0a71 000000   		.space	3
 5480 0a74 FFFFFFFF 		.word	-1
 5481 0a78 34       		.byte	52
 5482 0a79 000000   		.space	3
 5483 0a7c 30010000 		.word	304
 5484 0a80 43505800 		.ascii	"CPX\000"
 5485 0a84 00000000 		.space	4
 5486 0a88 50777246 		.ascii	"PwrFit\000"
 5486      697400
 5487 0a8f 00       		.space	1
 5488 0a90 4D5F5365 		.ascii	"M_Setup2\000"
 5488      74757032 
 5488      00
 5489 0a99 00000000 		.space	6
 5489      0000
 5490 0a9f 00       		.space	1
 5491 0aa0 31       		.byte	49
 5492 0aa1 000000   		.space	3
 5493 0aa4 04000000 		.word	4
 5494 0aa8 2E       		.byte	46
 5495 0aa9 000000   		.space	3
 5496 0aac FFFFFFFF 		.word	-1
 5497 0ab0 53764C49 		.ascii	"SvLIB\000"
 5497      4200
 5498 0ab6 0000     		.space	2
 5499 0ab8 00       		.ascii	"\000"
 5500 0ab9 00000000 		.space	7
 5500      000000
 5501 0ac0 31       		.byte	49
 5502 0ac1 000000   		.space	3
 5503 0ac4 05000000 		.word	5
 5504 0ac8 2E       		.byte	46
 5505 0ac9 000000   		.space	3
 5506 0acc FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccp3OFc8.s 			page 141


 5507 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5507      4200
 5508 0ad6 0000     		.space	2
 5509 0ad8 00       		.ascii	"\000"
 5510 0ad9 00000000 		.space	7
 5510      000000
 5511 0ae0 31       		.byte	49
 5512 0ae1 000000   		.space	3
 5513 0ae4 0A000000 		.word	10
 5514 0ae8 2E       		.byte	46
 5515 0ae9 000000   		.space	3
 5516 0aec FFFFFFFF 		.word	-1
 5517 0af0 53764350 		.ascii	"SvCPRG\000"
 5517      524700
 5518 0af7 00       		.space	1
 5519 0af8 00       		.ascii	"\000"
 5520 0af9 00000000 		.space	7
 5520      000000
 5521 0b00 31       		.byte	49
 5522 0b01 000000   		.space	3
 5523 0b04 08000000 		.word	8
 5524 0b08 2E       		.byte	46
 5525 0b09 000000   		.space	3
 5526 0b0c FFFFFFFF 		.word	-1
 5527 0b10 4C645052 		.ascii	"LdPRG\000"
 5527      4700
 5528 0b16 0000     		.space	2
 5529 0b18 00       		.ascii	"\000"
 5530 0b19 00000000 		.space	7
 5530      000000
 5531 0b20 2C       		.byte	44
 5532 0b21 000000   		.space	3
 5533 0b24 FFFFFFFF 		.word	-1
 5534 0b28 2E       		.byte	46
 5535 0b29 000000   		.space	3
 5536 0b2c FFFFFFFF 		.word	-1
 5537 0b30 2D2D0D00 		.ascii	"--\015\000"
 5538 0b34 00000000 		.space	4
 5539 0b38 00       		.ascii	"\000"
 5540 0b39 00000000 		.space	7
 5540      000000
 5541 0b40 2D       		.byte	45
 5542 0b41 000000   		.space	3
 5543 0b44 FFFFFFFF 		.word	-1
 5544 0b48 2E       		.byte	46
 5545 0b49 000000   		.space	3
 5546 0b4c FFFFFFFF 		.word	-1
 5547 0b50 43505800 		.ascii	"CPX\000"
 5548 0b54 00000000 		.space	4
 5549 0b58 00       		.ascii	"\000"
 5550 0b59 00000000 		.space	7
 5550      000000
 5551 0b60 4D5F536F 		.ascii	"M_Solve\000"
 5551      6C766500 
 5552 0b68 00000000 		.space	7
 5552      000000
 5553 0b6f 00       		.space	1
ARM GAS  /tmp/ccp3OFc8.s 			page 142


 5554 0b70 20       		.byte	32
 5555 0b71 000000   		.space	3
 5556 0b74 01000000 		.word	1
 5557 0b78 2E       		.byte	46
 5558 0b79 000000   		.space	3
 5559 0b7c FFFFFFFF 		.word	-1
 5560 0b80 534C5600 		.ascii	"SLV\000"
 5561 0b84 00000000 		.space	4
 5562 0b88 00       		.ascii	"\000"
 5563 0b89 00000000 		.space	7
 5563      000000
 5564 0b90 20       		.byte	32
 5565 0b91 000000   		.space	3
 5566 0b94 02000000 		.word	2
 5567 0b98 2E       		.byte	46
 5568 0b99 000000   		.space	3
 5569 0b9c FFFFFFFF 		.word	-1
 5570 0ba0 04206478 		.ascii	"\004 dx\000"
 5570      00
 5571 0ba5 000000   		.space	3
 5572 0ba8 00       		.ascii	"\000"
 5573 0ba9 00000000 		.space	7
 5573      000000
 5574 0bb0 21       		.byte	33
 5575 0bb1 000000   		.space	3
 5576 0bb4 02000000 		.word	2
 5577 0bb8 2E       		.byte	46
 5578 0bb9 000000   		.space	3
 5579 0bbc FFFFFFFF 		.word	-1
 5580 0bc0 53554D00 		.ascii	"SUM\000"
 5581 0bc4 00000000 		.space	4
 5582 0bc8 00       		.ascii	"\000"
 5583 0bc9 00000000 		.space	7
 5583      000000
 5584 0bd0 21       		.byte	33
 5585 0bd1 000000   		.space	3
 5586 0bd4 01000000 		.word	1
 5587 0bd8 2E       		.byte	46
 5588 0bd9 000000   		.space	3
 5589 0bdc FFFFFFFF 		.word	-1
 5590 0be0 50524F44 		.ascii	"PROD\000"
 5590      00
 5591 0be5 000000   		.space	3
 5592 0be8 00       		.ascii	"\000"
 5593 0be9 00000000 		.space	7
 5593      000000
 5594 0bf0 2C       		.byte	44
 5595 0bf1 000000   		.space	3
 5596 0bf4 FFFFFFFF 		.word	-1
 5597 0bf8 2E       		.byte	46
 5598 0bf9 000000   		.space	3
 5599 0bfc FFFFFFFF 		.word	-1
 5600 0c00 2D2D0D00 		.ascii	"--\015\000"
 5601 0c04 00000000 		.space	4
 5602 0c08 00       		.ascii	"\000"
 5603 0c09 00000000 		.space	7
 5603      000000
ARM GAS  /tmp/ccp3OFc8.s 			page 143


 5604 0c10 2D       		.byte	45
 5605 0c11 000000   		.space	3
 5606 0c14 FFFFFFFF 		.word	-1
 5607 0c18 2E       		.byte	46
 5608 0c19 000000   		.space	3
 5609 0c1c FFFFFFFF 		.word	-1
 5610 0c20 43505800 		.ascii	"CPX\000"
 5611 0c24 00000000 		.space	4
 5612 0c28 00       		.ascii	"\000"
 5613 0c29 00000000 		.space	7
 5613      000000
 5614 0c30 4D5F426C 		.ascii	"M_Blank2\000"
 5614      616E6B32 
 5614      00
 5615 0c39 00000000 		.space	6
 5615      0000
 5616 0c3f 00       		.space	1
 5617 0c40 28       		.byte	40
 5618 0c41 000000   		.space	3
 5619 0c44 03000000 		.word	3
 5620 0c48 2E       		.byte	46
 5621 0c49 000000   		.space	3
 5622 0c4c FFFFFFFF 		.word	-1
 5623 0c50 912B00   		.ascii	"\221+\000"
 5624 0c53 00000000 		.space	5
 5624      00
 5625 0c58 00       		.ascii	"\000"
 5626 0c59 00000000 		.space	7
 5626      000000
 5627 0c60 16       		.byte	22
 5628 0c61 000000   		.space	3
 5629 0c64 01000000 		.word	1
 5630 0c68 2E       		.byte	46
 5631 0c69 000000   		.space	3
 5632 0c6c FFFFFFFF 		.word	-1
 5633 0c70 312F5800 		.ascii	"1/X\000"
 5634 0c74 00000000 		.space	4
 5635 0c78 00       		.ascii	"\000"
 5636 0c79 00000000 		.space	7
 5636      000000
 5637 0c80 1C       		.byte	28
 5638 0c81 000000   		.space	3
 5639 0c84 01000000 		.word	1
 5640 0c88 2E       		.byte	46
 5641 0c89 000000   		.space	3
 5642 0c8c FFFFFFFF 		.word	-1
 5643 0c90 035800   		.ascii	"\003X\000"
 5644 0c93 00000000 		.space	5
 5644      00
 5645 0c98 00       		.ascii	"\000"
 5646 0c99 00000000 		.space	7
 5646      000000
 5647 0ca0 13       		.byte	19
 5648 0ca1 000000   		.space	3
 5649 0ca4 02000000 		.word	2
 5650 0ca8 2E       		.byte	46
 5651 0ca9 000000   		.space	3
ARM GAS  /tmp/ccp3OFc8.s 			page 144


 5652 0cac FFFFFFFF 		.word	-1
 5653 0cb0 4C4F4700 		.ascii	"LOG\000"
 5654 0cb4 00000000 		.space	4
 5655 0cb8 00       		.ascii	"\000"
 5656 0cb9 00000000 		.space	7
 5656      000000
 5657 0cc0 2C       		.byte	44
 5658 0cc1 000000   		.space	3
 5659 0cc4 FFFFFFFF 		.word	-1
 5660 0cc8 2E       		.byte	46
 5661 0cc9 000000   		.space	3
 5662 0ccc FFFFFFFF 		.word	-1
 5663 0cd0 2D2D0D00 		.ascii	"--\015\000"
 5664 0cd4 00000000 		.space	4
 5665 0cd8 00       		.ascii	"\000"
 5666 0cd9 00000000 		.space	7
 5666      000000
 5667 0ce0 2D       		.byte	45
 5668 0ce1 000000   		.space	3
 5669 0ce4 FFFFFFFF 		.word	-1
 5670 0ce8 2E       		.byte	46
 5671 0ce9 000000   		.space	3
 5672 0cec FFFFFFFF 		.word	-1
 5673 0cf0 43505800 		.ascii	"CPX\000"
 5674 0cf4 00000000 		.space	4
 5675 0cf8 00       		.ascii	"\000"
 5676 0cf9 00000000 		.space	7
 5676      000000
 5677 0d00 4D5F416C 		.ascii	"M_Alpha\000"
 5677      70686100 
 5678 0d08 00000000 		.space	7
 5678      000000
 5679 0d0f 00       		.space	1
 5680 0d10 34       		.byte	52
 5681 0d11 000000   		.space	3
 5682 0d14 78010000 		.word	376
 5683 0d18 34       		.byte	52
 5684 0d19 000000   		.space	3
 5685 0d1c 6D010000 		.word	365
 5686 0d20 582D3EA0 		.ascii	"X->\240\000"
 5686      00
 5687 0d25 000000   		.space	3
 5688 0d28 A054494D 		.ascii	"\240TIME\000"
 5688      4500
 5689 0d2e 0000     		.space	2
 5690 0d30 34       		.byte	52
 5691 0d31 000000   		.space	3
 5692 0d34 77010000 		.word	375
 5693 0d38 34       		.byte	52
 5694 0d39 000000   		.space	3
 5695 0d3c 6C010000 		.word	364
 5696 0d40 A02D3E58 		.ascii	"\240->X\000"
 5696      00
 5697 0d45 000000   		.space	3
 5698 0d48 A0444154 		.ascii	"\240DATE\000"
 5698      4500
 5699 0d4e 0000     		.space	2
ARM GAS  /tmp/ccp3OFc8.s 			page 145


 5700 0d50 34       		.byte	52
 5701 0d51 000000   		.space	3
 5702 0d54 00480000 		.word	18432
 5703 0d58 34       		.byte	52
 5704 0d59 000000   		.space	3
 5705 0d5c 6A010000 		.word	362
 5706 0d60 A0495000 		.ascii	"\240IP\000"
 5707 0d64 00000000 		.space	4
 5708 0d68 A0444159 		.ascii	"\240DAY\000"
 5708      00
 5709 0d6d 000000   		.space	3
 5710 0d70 34       		.byte	52
 5711 0d71 000000   		.space	3
 5712 0d74 76010000 		.word	374
 5713 0d78 34       		.byte	52
 5714 0d79 000000   		.space	3
 5715 0d7c 6B010000 		.word	363
 5716 0d80 A04C454E 		.ascii	"\240LENG\000"
 5716      4700
 5717 0d86 0000     		.space	2
 5718 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 5718      4800
 5719 0d8e 0000     		.space	2
 5720 0d90 2C       		.byte	44
 5721 0d91 000000   		.space	3
 5722 0d94 FFFFFFFF 		.word	-1
 5723 0d98 2C       		.byte	44
 5724 0d99 000000   		.space	3
 5725 0d9c 01000000 		.word	1
 5726 0da0 2D2D0D00 		.ascii	"--\015\000"
 5727 0da4 00000000 		.space	4
 5728 0da8 00       		.ascii	"\000"
 5729 0da9 00000000 		.space	7
 5729      000000
 5730 0db0 2D       		.byte	45
 5731 0db1 000000   		.space	3
 5732 0db4 FFFFFFFF 		.word	-1
 5733 0db8 2D       		.byte	45
 5734 0db9 000000   		.space	3
 5735 0dbc 01000000 		.word	1
 5736 0dc0 43505800 		.ascii	"CPX\000"
 5737 0dc4 00000000 		.space	4
 5738 0dc8 00       		.ascii	"\000"
 5739 0dc9 00000000 		.space	7
 5739      000000
 5740 0dd0 4D5F435F 		.ascii	"M_C_Lock\000"
 5740      4C6F636B 
 5740      00
 5741 0dd9 00000000 		.space	6
 5741      0000
 5742 0ddf 00       		.space	1
 5743 0de0 18       		.byte	24
 5744 0de1 000000   		.space	3
 5745 0de4 02000000 		.word	2
 5746 0de8 04       		.byte	4
 5747 0de9 000000   		.space	3
 5748 0dec 02000000 		.word	2
ARM GAS  /tmp/ccp3OFc8.s 			page 146


 5749 0df0 504F4C41 		.ascii	"POLAR\000"
 5749      5200
 5750 0df6 0000     		.space	2
 5751 0df8 0D205000 		.ascii	"\015 P\000"
 5752 0dfc 00000000 		.space	4
 5753 0e00 18       		.byte	24
 5754 0e01 000000   		.space	3
 5755 0e04 01000000 		.word	1
 5756 0e08 04       		.byte	4
 5757 0e09 000000   		.space	3
 5758 0e0c 01000000 		.word	1
 5759 0e10 52454354 		.ascii	"RECT\000"
 5759      00
 5760 0e15 000000   		.space	3
 5761 0e18 0D205200 		.ascii	"\015 R\000"
 5762 0e1c 00000000 		.space	4
 5763 0e20 0E       		.byte	14
 5764 0e21 000000   		.space	3
 5765 0e24 01000000 		.word	1
 5766 0e28 0E       		.byte	14
 5767 0e29 000000   		.space	3
 5768 0e2c 03000000 		.word	3
 5769 0e30 43485306 		.ascii	"CHS\006y\000"
 5769      7900
 5770 0e36 0000     		.space	2
 5771 0e38 43485306 		.ascii	"CHS\006x\000"
 5771      7800
 5772 0e3e 0000     		.space	2
 5773 0e40 0D       		.byte	13
 5774 0e41 000000   		.space	3
 5775 0e44 01000000 		.word	1
 5776 0e48 00       		.byte	0
 5777 0e49 000000   		.space	3
 5778 0e4c 01000000 		.word	1
 5779 0e50 78177900 		.ascii	"x\027y\000"
 5780 0e54 00000000 		.space	4
 5781 0e58 48595000 		.ascii	"HYP\000"
 5782 0e5c 00000000 		.space	4
 5783 0e60 2C       		.byte	44
 5784 0e61 000000   		.space	3
 5785 0e64 FFFFFFFF 		.word	-1
 5786 0e68 0F       		.byte	15
 5787 0e69 000000   		.space	3
 5788 0e6c 01000000 		.word	1
 5789 0e70 2D2D0D00 		.ascii	"--\015\000"
 5790 0e74 00000000 		.space	4
 5791 0e78 1106AF00 		.ascii	"\021\006\257\000"
 5792 0e7c 00000000 		.space	4
 5793 0e80 2D       		.byte	45
 5794 0e81 000000   		.space	3
 5795 0e84 FFFFFFFF 		.word	-1
 5796 0e88 0C       		.byte	12
 5797 0e89 000000   		.space	3
 5798 0e8c 01000000 		.word	1
 5799 0e90 43505800 		.ascii	"CPX\000"
 5800 0e94 00000000 		.space	4
 5801 0e98 1106434E 		.ascii	"\021\006CNST\000"
ARM GAS  /tmp/ccp3OFc8.s 			page 147


 5801      535400
 5802 0e9f 00       		.space	1
 5803 0ea0 4D5F436C 		.ascii	"M_Clear_C\000"
 5803      6561725F 
 5803      4300
 5804 0eaa 00000000 		.space	5
 5804      00
 5805 0eaf 00       		.space	1
 5806 0eb0 2E       		.byte	46
 5807 0eb1 000000   		.space	3
 5808 0eb4 FFFFFFFF 		.word	-1
 5809 0eb8 2E       		.byte	46
 5810 0eb9 000000   		.space	3
 5811 0ebc FFFFFFFF 		.word	-1
 5812 0ec0 00       		.ascii	"\000"
 5813 0ec1 00000000 		.space	7
 5813      000000
 5814 0ec8 00       		.ascii	"\000"
 5815 0ec9 00000000 		.space	7
 5815      000000
 5816 0ed0 2E       		.byte	46
 5817 0ed1 000000   		.space	3
 5818 0ed4 FFFFFFFF 		.word	-1
 5819 0ed8 2E       		.byte	46
 5820 0ed9 000000   		.space	3
 5821 0edc FFFFFFFF 		.word	-1
 5822 0ee0 00       		.ascii	"\000"
 5823 0ee1 00000000 		.space	7
 5823      000000
 5824 0ee8 00       		.ascii	"\000"
 5825 0ee9 00000000 		.space	7
 5825      000000
 5826 0ef0 10       		.byte	16
 5827 0ef1 000000   		.space	3
 5828 0ef4 03000000 		.word	3
 5829 0ef8 34       		.byte	52
 5830 0ef9 000000   		.space	3
 5831 0efc 74010000 		.word	372
 5832 0f00 434C7800 		.ascii	"CLx\000"
 5833 0f04 00000000 		.space	4
 5834 0f08 434C06A0 		.ascii	"CL\006\240\000"
 5834      00
 5835 0f0d 000000   		.space	3
 5836 0f10 34       		.byte	52
 5837 0f11 000000   		.space	3
 5838 0f14 40010000 		.word	320
 5839 0f18 2E       		.byte	46
 5840 0f19 000000   		.space	3
 5841 0f1c FFFFFFFF 		.word	-1
 5842 0f20 434C5374 		.ascii	"CLStk\000"
 5842      6B00
 5843 0f26 0000     		.space	2
 5844 0f28 00       		.ascii	"\000"
 5845 0f29 00000000 		.space	7
 5845      000000
 5846 0f30 2C       		.byte	44
 5847 0f31 000000   		.space	3
ARM GAS  /tmp/ccp3OFc8.s 			page 148


 5848 0f34 FFFFFFFF 		.word	-1
 5849 0f38 2E       		.byte	46
 5850 0f39 000000   		.space	3
 5851 0f3c FFFFFFFF 		.word	-1
 5852 0f40 2D2D0D00 		.ascii	"--\015\000"
 5853 0f44 00000000 		.space	4
 5854 0f48 00       		.ascii	"\000"
 5855 0f49 00000000 		.space	7
 5855      000000
 5856 0f50 2D       		.byte	45
 5857 0f51 000000   		.space	3
 5858 0f54 FFFFFFFF 		.word	-1
 5859 0f58 2E       		.byte	46
 5860 0f59 000000   		.space	3
 5861 0f5c FFFFFFFF 		.word	-1
 5862 0f60 43505800 		.ascii	"CPX\000"
 5863 0f64 00000000 		.space	4
 5864 0f68 00       		.ascii	"\000"
 5865 0f69 00000000 		.space	7
 5865      000000
 5866 0f70 4D5F5377 		.ascii	"M_Swap_C\000"
 5866      61705F43 
 5866      00
 5867 0f79 00000000 		.space	6
 5867      0000
 5868 0f7f 00       		.space	1
 5869 0f80 0D       		.byte	13
 5870 0f81 000000   		.space	3
 5871 0f84 01000000 		.word	1
 5872 0f88 2E       		.byte	46
 5873 0f89 000000   		.space	3
 5874 0f8c FFFFFFFF 		.word	-1
 5875 0f90 53686F77 		.ascii	"Show\016\000"
 5875      0E00
 5876 0f96 0000     		.space	2
 5877 0f98 00       		.ascii	"\000"
 5878 0f99 00000000 		.space	7
 5878      000000
 5879 0fa0 0D       		.byte	13
 5880 0fa1 000000   		.space	3
 5881 0fa4 02000000 		.word	2
 5882 0fa8 2E       		.byte	46
 5883 0fa9 000000   		.space	3
 5884 0fac FFFFFFFF 		.word	-1
 5885 0fb0 53686F77 		.ascii	"Show\015\000"
 5885      0D00
 5886 0fb6 0000     		.space	2
 5887 0fb8 00       		.ascii	"\000"
 5888 0fb9 00000000 		.space	7
 5888      000000
 5889 0fc0 0D       		.byte	13
 5890 0fc1 000000   		.space	3
 5891 0fc4 03000000 		.word	3
 5892 0fc8 2E       		.byte	46
 5893 0fc9 000000   		.space	3
 5894 0fcc FFFFFFFF 		.word	-1
 5895 0fd0 78173F00 		.ascii	"x\027?\000"
ARM GAS  /tmp/ccp3OFc8.s 			page 149


 5896 0fd4 00000000 		.space	4
 5897 0fd8 00       		.ascii	"\000"
 5898 0fd9 00000000 		.space	7
 5898      000000
 5899 0fe0 2E       		.byte	46
 5900 0fe1 000000   		.space	3
 5901 0fe4 FFFFFFFF 		.word	-1
 5902 0fe8 2E       		.byte	46
 5903 0fe9 000000   		.space	3
 5904 0fec FFFFFFFF 		.word	-1
 5905 0ff0 00       		.ascii	"\000"
 5906 0ff1 00000000 		.space	7
 5906      000000
 5907 0ff8 00       		.ascii	"\000"
 5908 0ff9 00000000 		.space	7
 5908      000000
 5909 1000 2C       		.byte	44
 5910 1001 000000   		.space	3
 5911 1004 FFFFFFFF 		.word	-1
 5912 1008 2E       		.byte	46
 5913 1009 000000   		.space	3
 5914 100c FFFFFFFF 		.word	-1
 5915 1010 2D2D0D00 		.ascii	"--\015\000"
 5916 1014 00000000 		.space	4
 5917 1018 00       		.ascii	"\000"
 5918 1019 00000000 		.space	7
 5918      000000
 5919 1020 2D       		.byte	45
 5920 1021 000000   		.space	3
 5921 1024 FFFFFFFF 		.word	-1
 5922 1028 2E       		.byte	46
 5923 1029 000000   		.space	3
 5924 102c FFFFFFFF 		.word	-1
 5925 1030 43505800 		.ascii	"CPX\000"
 5926 1034 00000000 		.space	4
 5927 1038 00       		.ascii	"\000"
 5928 1039 00000000 		.space	7
 5928      000000
 5929 1040 4D5F4172 		.ascii	"M_Arrow_C\000"
 5929      726F775F 
 5929      4300
 5930 104a 00000000 		.space	5
 5930      00
 5931 104f 00       		.space	1
 5932 1050 2E       		.byte	46
 5933 1051 000000   		.space	3
 5934 1054 FFFFFFFF 		.word	-1
 5935 1058 06       		.byte	6
 5936 1059 000000   		.space	3
 5937 105c 02000000 		.word	2
 5938 1060 00       		.ascii	"\000"
 5939 1061 00000000 		.space	7
 5939      000000
 5940 1068 44454700 		.ascii	"DEG\000"
 5941 106c 00000000 		.space	4
 5942 1070 2E       		.byte	46
 5943 1071 000000   		.space	3
ARM GAS  /tmp/ccp3OFc8.s 			page 150


 5944 1074 FFFFFFFF 		.word	-1
 5945 1078 07       		.byte	7
 5946 1079 000000   		.space	3
 5947 107c 02000000 		.word	2
 5948 1080 00       		.ascii	"\000"
 5949 1081 00000000 		.space	7
 5949      000000
 5950 1088 52414400 		.ascii	"RAD\000"
 5951 108c 00000000 		.space	4
 5952 1090 2E       		.byte	46
 5953 1091 000000   		.space	3
 5954 1094 FFFFFFFF 		.word	-1
 5955 1098 08       		.byte	8
 5956 1099 000000   		.space	3
 5957 109c 02000000 		.word	2
 5958 10a0 00       		.ascii	"\000"
 5959 10a1 00000000 		.space	7
 5959      000000
 5960 10a8 47726164 		.ascii	"Grad\000"
 5960      00
 5961 10ad 000000   		.space	3
 5962 10b0 2E       		.byte	46
 5963 10b1 000000   		.space	3
 5964 10b4 FFFFFFFF 		.word	-1
 5965 10b8 06       		.byte	6
 5966 10b9 000000   		.space	3
 5967 10bc 01000000 		.word	1
 5968 10c0 00       		.ascii	"\000"
 5969 10c1 00000000 		.space	7
 5969      000000
 5970 10c8 0D484D53 		.ascii	"\015HMS\000"
 5970      00
 5971 10cd 000000   		.space	3
 5972 10d0 2C       		.byte	44
 5973 10d1 000000   		.space	3
 5974 10d4 FFFFFFFF 		.word	-1
 5975 10d8 07       		.byte	7
 5976 10d9 000000   		.space	3
 5977 10dc 01000000 		.word	1
 5978 10e0 2D2D0D00 		.ascii	"--\015\000"
 5979 10e4 00000000 		.space	4
 5980 10e8 484D530D 		.ascii	"HMS\015\000"
 5980      00
 5981 10ed 000000   		.space	3
 5982 10f0 2D       		.byte	45
 5983 10f1 000000   		.space	3
 5984 10f4 FFFFFFFF 		.word	-1
 5985 10f8 2E       		.byte	46
 5986 10f9 000000   		.space	3
 5987 10fc FFFFFFFF 		.word	-1
 5988 1100 43505800 		.ascii	"CPX\000"
 5989 1104 00000000 		.space	4
 5990 1108 00       		.ascii	"\000"
 5991 1109 00000000 		.space	7
 5991      000000
 5992 1110 4D5F5072 		.ascii	"M_Prob_C\000"
 5992      6F625F43 
ARM GAS  /tmp/ccp3OFc8.s 			page 151


 5992      00
 5993 1119 00000000 		.space	6
 5993      0000
 5994 111f 00       		.space	1
 5995 1120 18       		.byte	24
 5996 1121 000000   		.space	3
 5997 1124 03000000 		.word	3
 5998 1128 34       		.byte	52
 5999 1129 000000   		.space	3
 6000 112c 31050000 		.word	1329
 6001 1130 14062100 		.ascii	"\024\006!\000"
 6002 1134 00000000 		.space	4
 6003 1138 14064C6E 		.ascii	"\024\006Ln\006\202\000"
 6003      068200
 6004 113f 00       		.space	1
 6005 1140 34       		.byte	52
 6006 1141 000000   		.space	3
 6007 1144 12060000 		.word	1554
 6008 1148 2E       		.byte	46
 6009 1149 000000   		.space	3
 6010 114c FFFFFFFF 		.word	-1
 6011 1150 14064379 		.ascii	"\024\006Cy,x\000"
 6011      2C7800
 6012 1157 00       		.space	1
 6013 1158 00       		.ascii	"\000"
 6014 1159 00000000 		.space	7
 6014      000000
 6015 1160 34       		.byte	52
 6016 1161 000000   		.space	3
 6017 1164 13060000 		.word	1555
 6018 1168 2E       		.byte	46
 6019 1169 000000   		.space	3
 6020 116c FFFFFFFF 		.word	-1
 6021 1170 14065079 		.ascii	"\024\006Py,x\000"
 6021      2C7800
 6022 1177 00       		.space	1
 6023 1178 00       		.ascii	"\000"
 6024 1179 00000000 		.space	7
 6024      000000
 6025 1180 2E       		.byte	46
 6026 1181 000000   		.space	3
 6027 1184 FFFFFFFF 		.word	-1
 6028 1188 2E       		.byte	46
 6029 1189 000000   		.space	3
 6030 118c FFFFFFFF 		.word	-1
 6031 1190 00       		.ascii	"\000"
 6032 1191 00000000 		.space	7
 6032      000000
 6033 1198 00       		.ascii	"\000"
 6034 1199 00000000 		.space	7
 6034      000000
 6035 11a0 2C       		.byte	44
 6036 11a1 000000   		.space	3
 6037 11a4 FFFFFFFF 		.word	-1
 6038 11a8 2E       		.byte	46
 6039 11a9 000000   		.space	3
 6040 11ac FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccp3OFc8.s 			page 152


 6041 11b0 2D2D0D00 		.ascii	"--\015\000"
 6042 11b4 00000000 		.space	4
 6043 11b8 00       		.ascii	"\000"
 6044 11b9 00000000 		.space	7
 6044      000000
 6045 11c0 2D       		.byte	45
 6046 11c1 000000   		.space	3
 6047 11c4 FFFFFFFF 		.word	-1
 6048 11c8 2E       		.byte	46
 6049 11c9 000000   		.space	3
 6050 11cc FFFFFFFF 		.word	-1
 6051 11d0 43505800 		.ascii	"CPX\000"
 6052 11d4 00000000 		.space	4
 6053 11d8 00       		.ascii	"\000"
 6054 11d9 00000000 		.space	7
 6054      000000
 6055 11e0 4D5F426C 		.ascii	"M_Blank2_C\000"
 6055      616E6B32 
 6055      5F4300
 6056 11eb 00000000 		.space	4
 6057 11ef 00       		.space	1
 6058 11f0 00       		.byte	0
 6059 11f1 000000   		.space	3
 6060 11f4 01000000 		.word	1
 6061 11f8 2E       		.byte	46
 6062 11f9 000000   		.space	3
 6063 11fc FFFFFFFF 		.word	-1
 6064 1200 48595000 		.ascii	"HYP\000"
 6065 1204 00000000 		.space	4
 6066 1208 00       		.ascii	"\000"
 6067 1209 00000000 		.space	7
 6067      000000
 6068 1210 16       		.byte	22
 6069 1211 000000   		.space	3
 6070 1214 01000000 		.word	1
 6071 1218 2E       		.byte	46
 6072 1219 000000   		.space	3
 6073 121c FFFFFFFF 		.word	-1
 6074 1220 312F5800 		.ascii	"1/X\000"
 6075 1224 00000000 		.space	4
 6076 1228 00       		.ascii	"\000"
 6077 1229 00000000 		.space	7
 6077      000000
 6078 1230 1C       		.byte	28
 6079 1231 000000   		.space	3
 6080 1234 01000000 		.word	1
 6081 1238 2E       		.byte	46
 6082 1239 000000   		.space	3
 6083 123c FFFFFFFF 		.word	-1
 6084 1240 035800   		.ascii	"\003X\000"
 6085 1243 00000000 		.space	5
 6085      00
 6086 1248 00       		.ascii	"\000"
 6087 1249 00000000 		.space	7
 6087      000000
 6088 1250 13       		.byte	19
 6089 1251 000000   		.space	3
ARM GAS  /tmp/ccp3OFc8.s 			page 153


 6090 1254 02000000 		.word	2
 6091 1258 2E       		.byte	46
 6092 1259 000000   		.space	3
 6093 125c FFFFFFFF 		.word	-1
 6094 1260 4C4F4700 		.ascii	"LOG\000"
 6095 1264 00000000 		.space	4
 6096 1268 00       		.ascii	"\000"
 6097 1269 00000000 		.space	7
 6097      000000
 6098 1270 2C       		.byte	44
 6099 1271 000000   		.space	3
 6100 1274 FFFFFFFF 		.word	-1
 6101 1278 2E       		.byte	46
 6102 1279 000000   		.space	3
 6103 127c FFFFFFFF 		.word	-1
 6104 1280 2D2D0D00 		.ascii	"--\015\000"
 6105 1284 00000000 		.space	4
 6106 1288 00       		.ascii	"\000"
 6107 1289 00000000 		.space	7
 6107      000000
 6108 1290 2D       		.byte	45
 6109 1291 000000   		.space	3
 6110 1294 FFFFFFFF 		.word	-1
 6111 1298 2E       		.byte	46
 6112 1299 000000   		.space	3
 6113 129c FFFFFFFF 		.word	-1
 6114 12a0 43505800 		.ascii	"CPX\000"
 6115 12a4 00000000 		.space	4
 6116 12a8 00       		.ascii	"\000"
 6117 12a9 00000000 		.space	7
 6117      000000
 6118 12b0 4D5F4D69 		.ascii	"M_Misc_C\000"
 6118      73635F43 
 6118      00
 6119 12b9 00000000 		.space	6
 6119      0000
 6120 12bf 00       		.space	1
 6121 12c0 25       		.byte	37
 6122 12c1 000000   		.space	3
 6123 12c4 01000000 		.word	1
 6124 12c8 14       		.byte	20
 6125 12c9 000000   		.space	3
 6126 12cc 01000000 		.word	1
 6127 12d0 7C587C00 		.ascii	"|X|\000"
 6128 12d4 00000000 		.space	4
 6129 12d8 329C00   		.ascii	"2\234\000"
 6130 12db 00000000 		.space	5
 6130      00
 6131 12e0 25       		.byte	37
 6132 12e1 000000   		.space	3
 6133 12e4 02000000 		.word	2
 6134 12e8 14       		.byte	20
 6135 12e9 000000   		.space	3
 6136 12ec 02000000 		.word	2
 6137 12f0 524E4400 		.ascii	"RND\000"
 6138 12f4 00000000 		.space	4
 6139 12f8 4C6F67BA 		.ascii	"Log\272\000"
ARM GAS  /tmp/ccp3OFc8.s 			page 154


 6139      00
 6140 12fd 000000   		.space	3
 6141 1300 26       		.byte	38
 6142 1301 000000   		.space	3
 6143 1304 01000000 		.word	1
 6144 1308 15       		.byte	21
 6145 1309 000000   		.space	3
 6146 130c 02000000 		.word	2
 6147 1310 300D5265 		.ascii	"0\015Re\000"
 6147      00
 6148 1315 000000   		.space	3
 6149 1318 4C6F678B 		.ascii	"Log\213\000"
 6149      00
 6150 131d 000000   		.space	3
 6151 1320 26       		.byte	38
 6152 1321 000000   		.space	3
 6153 1324 02000000 		.word	2
 6154 1328 16       		.byte	22
 6155 1329 000000   		.space	3
 6156 132c 02000000 		.word	2
 6157 1330 300D496D 		.ascii	"0\015Im\000"
 6157      00
 6158 1335 000000   		.space	3
 6159 1338 7C7C656C 		.ascii	"||el\000"
 6159      00
 6160 133d 000000   		.space	3
 6161 1340 2C       		.byte	44
 6162 1341 000000   		.space	3
 6163 1344 FFFFFFFF 		.word	-1
 6164 1348 1C       		.byte	28
 6165 1349 000000   		.space	3
 6166 134c 03000000 		.word	3
 6167 1350 2D2D0D00 		.ascii	"--\015\000"
 6168 1354 00000000 		.space	4
 6169 1358 2E1C00   		.ascii	".\034\000"
 6170 135b 00000000 		.space	5
 6170      00
 6171 1360 2D       		.byte	45
 6172 1361 000000   		.space	3
 6173 1364 FFFFFFFF 		.word	-1
 6174 1368 16       		.byte	22
 6175 1369 000000   		.space	3
 6176 136c 03000000 		.word	3
 6177 1370 43505800 		.ascii	"CPX\000"
 6178 1374 00000000 		.space	4
 6179 1378 2E2F00   		.ascii	"./\000"
 6180 137b 00000000 		.space	5
 6180      00
 6181              		.section	.rodata.mapping_alpha.11098,"a"
 6182              		.align	2
 6183              		.set	.LANCHOR16,. + 0
 6186              	mapping_alpha.11098:
 6187 0000 63       		.byte	99
 6188 0001 000000   		.space	3
 6189 0004 FFFFFFFF 		.word	-1
 6190 0008 00       		.byte	0
 6191 0009 000000   		.space	3
ARM GAS  /tmp/ccp3OFc8.s 			page 155


 6192 000c FFFFFFFF 		.word	-1
 6193 0010 01       		.byte	1
 6194 0011 000000   		.space	3
 6195 0014 FFFFFFFF 		.word	-1
 6196 0018 02       		.byte	2
 6197 0019 000000   		.space	3
 6198 001c FFFFFFFF 		.word	-1
 6199 0020 03       		.byte	3
 6200 0021 000000   		.space	3
 6201 0024 FFFFFFFF 		.word	-1
 6202 0028 04       		.byte	4
 6203 0029 000000   		.space	3
 6204 002c FFFFFFFF 		.word	-1
 6205 0030 05       		.byte	5
 6206 0031 000000   		.space	3
 6207 0034 FFFFFFFF 		.word	-1
 6208 0038 06       		.byte	6
 6209 0039 000000   		.space	3
 6210 003c FFFFFFFF 		.word	-1
 6211 0040 07       		.byte	7
 6212 0041 000000   		.space	3
 6213 0044 FFFFFFFF 		.word	-1
 6214 0048 08       		.byte	8
 6215 0049 000000   		.space	3
 6216 004c FFFFFFFF 		.word	-1
 6217 0050 09       		.byte	9
 6218 0051 000000   		.space	3
 6219 0054 FFFFFFFF 		.word	-1
 6220 0058 0A       		.byte	10
 6221 0059 000000   		.space	3
 6222 005c FFFFFFFF 		.word	-1
 6223 0060 0B       		.byte	11
 6224 0061 000000   		.space	3
 6225 0064 FFFFFFFF 		.word	-1
 6226 0068 0C       		.byte	12
 6227 0069 000000   		.space	3
 6228 006c FFFFFFFF 		.word	-1
 6229 0070 0D       		.byte	13
 6230 0071 000000   		.space	3
 6231 0074 FFFFFFFF 		.word	-1
 6232 0078 0E       		.byte	14
 6233 0079 000000   		.space	3
 6234 007c FFFFFFFF 		.word	-1
 6235 0080 0F       		.byte	15
 6236 0081 000000   		.space	3
 6237 0084 FFFFFFFF 		.word	-1
 6238 0088 10       		.byte	16
 6239 0089 000000   		.space	3
 6240 008c FFFFFFFF 		.word	-1
 6241 0090 12       		.byte	18
 6242 0091 000000   		.space	3
 6243 0094 FFFFFFFF 		.word	-1
 6244 0098 13       		.byte	19
 6245 0099 000000   		.space	3
 6246 009c FFFFFFFF 		.word	-1
 6247 00a0 14       		.byte	20
 6248 00a1 000000   		.space	3
ARM GAS  /tmp/ccp3OFc8.s 			page 156


 6249 00a4 FFFFFFFF 		.word	-1
 6250 00a8 15       		.byte	21
 6251 00a9 000000   		.space	3
 6252 00ac FFFFFFFF 		.word	-1
 6253 00b0 16       		.byte	22
 6254 00b1 000000   		.space	3
 6255 00b4 FFFFFFFF 		.word	-1
 6256 00b8 18       		.byte	24
 6257 00b9 000000   		.space	3
 6258 00bc FFFFFFFF 		.word	-1
 6259 00c0 19       		.byte	25
 6260 00c1 000000   		.space	3
 6261 00c4 FFFFFFFF 		.word	-1
 6262 00c8 1A       		.byte	26
 6263 00c9 000000   		.space	3
 6264 00cc FFFFFFFF 		.word	-1
 6265 00d0 1B       		.byte	27
 6266 00d1 000000   		.space	3
 6267 00d4 FFFFFFFF 		.word	-1
 6268 00d8 1C       		.byte	28
 6269 00d9 000000   		.space	3
 6270 00dc FFFFFFFF 		.word	-1
 6271 00e0 1E       		.byte	30
 6272 00e1 000000   		.space	3
 6273 00e4 FFFFFFFF 		.word	-1
 6274 00e8 1F       		.byte	31
 6275 00e9 000000   		.space	3
 6276 00ec FFFFFFFF 		.word	-1
 6277 00f0 20       		.byte	32
 6278 00f1 000000   		.space	3
 6279 00f4 FFFFFFFF 		.word	-1
 6280 00f8 21       		.byte	33
 6281 00f9 000000   		.space	3
 6282 00fc FFFFFFFF 		.word	-1
 6283 0100 22       		.byte	34
 6284 0101 000000   		.space	3
 6285 0104 FFFFFFFF 		.word	-1
 6286 0108 24       		.byte	36
 6287 0109 000000   		.space	3
 6288 010c FFFFFFFF 		.word	-1
 6289 0110 25       		.byte	37
 6290 0111 000000   		.space	3
 6291 0114 FFFFFFFF 		.word	-1
 6292 0118 26       		.byte	38
 6293 0119 000000   		.space	3
 6294 011c FFFFFFFF 		.word	-1
 6295 0120 27       		.byte	39
 6296 0121 000000   		.space	3
 6297 0124 FFFFFFFF 		.word	-1
 6298 0128 28       		.byte	40
 6299 0129 000000   		.space	3
 6300 012c FFFFFFFF 		.word	-1
 6301 0130 2E       		.byte	46
 6302 0131 000000   		.space	3
 6303 0134 FFFFFFFF 		.word	-1
 6304 0138 2E       		.byte	46
 6305 0139 000000   		.space	3
ARM GAS  /tmp/ccp3OFc8.s 			page 157


 6306 013c FFFFFFFF 		.word	-1
 6307 0140 2E       		.byte	46
 6308 0141 000000   		.space	3
 6309 0144 FFFFFFFF 		.word	-1
 6310 0148 2E       		.byte	46
 6311 0149 000000   		.space	3
 6312 014c FFFFFFFF 		.word	-1
 6313 0150 2C       		.byte	44
 6314 0151 000000   		.space	3
 6315 0154 FFFFFFFF 		.word	-1
 6316 0158 2D       		.byte	45
 6317 0159 000000   		.space	3
 6318 015c FFFFFFFF 		.word	-1
 6319 0160 2E       		.byte	46
 6320 0161 000000   		.space	3
 6321 0164 FFFFFFFF 		.word	-1
 6322 0168 2E       		.byte	46
 6323 0169 000000   		.space	3
 6324 016c FFFFFFFF 		.word	-1
 6325 0170 2E       		.byte	46
 6326 0171 000000   		.space	3
 6327 0174 FFFFFFFF 		.word	-1
 6328              		.section	.rodata.mapping_fshift.11096,"a"
 6329              		.align	2
 6330              		.set	.LANCHOR14,. + 0
 6333              	mapping_fshift.11096:
 6334 0000 63       		.byte	99
 6335 0001 000000   		.space	3
 6336 0004 FFFFFFFF 		.word	-1
 6337 0008 22       		.byte	34
 6338 0009 000000   		.space	3
 6339 000c 03000000 		.word	3
 6340 0010 15       		.byte	21
 6341 0011 000000   		.space	3
 6342 0014 01000000 		.word	1
 6343 0018 1C       		.byte	28
 6344 0019 000000   		.space	3
 6345 001c 02000000 		.word	2
 6346 0020 13       		.byte	19
 6347 0021 000000   		.space	3
 6348 0024 01000000 		.word	1
 6349 0028 12       		.byte	18
 6350 0029 000000   		.space	3
 6351 002c 01000000 		.word	1
 6352 0030 12       		.byte	18
 6353 0031 000000   		.space	3
 6354 0034 03000000 		.word	3
 6355 0038 31       		.byte	49
 6356 0039 000000   		.space	3
 6357 003c 0F000000 		.word	15
 6358 0040 22       		.byte	34
 6359 0041 000000   		.space	3
 6360 0044 01000000 		.word	1
 6361 0048 0F       		.byte	15
 6362 0049 000000   		.space	3
 6363 004c 03000000 		.word	3
 6364 0050 01       		.byte	1
ARM GAS  /tmp/ccp3OFc8.s 			page 158


 6365 0051 000000   		.space	3
 6366 0054 02000000 		.word	2
 6367 0058 02       		.byte	2
 6368 0059 000000   		.space	3
 6369 005c 02000000 		.word	2
 6370 0060 03       		.byte	3
 6371 0061 000000   		.space	3
 6372 0064 02000000 		.word	2
 6373 0068 0C       		.byte	12
 6374 0069 000000   		.space	3
 6375 006c 01000000 		.word	1
 6376 0070 31       		.byte	49
 6377 0071 000000   		.space	3
 6378 0074 01000000 		.word	1
 6379 0078 2F       		.byte	47
 6380 0079 000000   		.space	3
 6381 007c 04000000 		.word	4
 6382 0080 2F       		.byte	47
 6383 0081 000000   		.space	3
 6384 0084 02000000 		.word	2
 6385 0088 2F       		.byte	47
 6386 0089 000000   		.space	3
 6387 008c 01000000 		.word	1
 6388 0090 18       		.byte	24
 6389 0091 000000   		.space	3
 6390 0094 00000000 		.word	0
 6391 0098 20       		.byte	32
 6392 0099 000000   		.space	3
 6393 009c 01000000 		.word	1
 6394 00a0 2F       		.byte	47
 6395 00a1 000000   		.space	3
 6396 00a4 0E000000 		.word	14
 6397 00a8 1C       		.byte	28
 6398 00a9 000000   		.space	3
 6399 00ac 03000000 		.word	3
 6400 00b0 2F       		.byte	47
 6401 00b1 000000   		.space	3
 6402 00b4 0C000000 		.word	12
 6403 00b8 1E       		.byte	30
 6404 00b9 000000   		.space	3
 6405 00bc 00000000 		.word	0
 6406 00c0 2F       		.byte	47
 6407 00c1 000000   		.space	3
 6408 00c4 03000000 		.word	3
 6409 00c8 04       		.byte	4
 6410 00c9 000000   		.space	3
 6411 00cc 03000000 		.word	3
 6412 00d0 2F       		.byte	47
 6413 00d1 000000   		.space	3
 6414 00d4 0A000000 		.word	10
 6415 00d8 2F       		.byte	47
 6416 00d9 000000   		.space	3
 6417 00dc 0B000000 		.word	11
 6418 00e0 2A       		.byte	42
 6419 00e1 000000   		.space	3
 6420 00e4 00000000 		.word	0
 6421 00e8 31       		.byte	49
ARM GAS  /tmp/ccp3OFc8.s 			page 159


 6422 00e9 000000   		.space	3
 6423 00ec 0D000000 		.word	13
 6424 00f0 2F       		.byte	47
 6425 00f1 000000   		.space	3
 6426 00f4 63000000 		.word	99
 6427 00f8 20       		.byte	32
 6428 00f9 000000   		.space	3
 6429 00fc 03000000 		.word	3
 6430 0100 2E       		.byte	46
 6431 0101 000000   		.space	3
 6432 0104 00000000 		.word	0
 6433 0108 24       		.byte	36
 6434 0109 000000   		.space	3
 6435 010c 03000000 		.word	3
 6436 0110 2F       		.byte	47
 6437 0111 000000   		.space	3
 6438 0114 08000000 		.word	8
 6439 0118 0D       		.byte	13
 6440 0119 000000   		.space	3
 6441 011c 01000000 		.word	1
 6442 0120 27       		.byte	39
 6443 0121 000000   		.space	3
 6444 0124 03000000 		.word	3
 6445 0128 06       		.byte	6
 6446 0129 000000   		.space	3
 6447 012c 03000000 		.word	3
 6448 0130 2E       		.byte	46
 6449 0131 000000   		.space	3
 6450 0134 00000000 		.word	0
 6451 0138 2E       		.byte	46
 6452 0139 000000   		.space	3
 6453 013c 00000000 		.word	0
 6454 0140 2E       		.byte	46
 6455 0141 000000   		.space	3
 6456 0144 00000000 		.word	0
 6457 0148 2E       		.byte	46
 6458 0149 000000   		.space	3
 6459 014c 00000000 		.word	0
 6460 0150 2E       		.byte	46
 6461 0151 000000   		.space	3
 6462 0154 00000000 		.word	0
 6463 0158 2E       		.byte	46
 6464 0159 000000   		.space	3
 6465 015c 00000000 		.word	0
 6466 0160 2E       		.byte	46
 6467 0161 000000   		.space	3
 6468 0164 00000000 		.word	0
 6469 0168 2F       		.byte	47
 6470 0169 000000   		.space	3
 6471 016c FFFFFFFF 		.word	-1
 6472 0170 2F       		.byte	47
 6473 0171 000000   		.space	3
 6474 0174 05000000 		.word	5
 6475              		.section	.rodata.mapping_gshift.11097,"a"
 6476              		.align	2
 6477              		.set	.LANCHOR17,. + 0
 6480              	mapping_gshift.11097:
ARM GAS  /tmp/ccp3OFc8.s 			page 160


 6481 0000 63       		.byte	99
 6482 0001 000000   		.space	3
 6483 0004 FFFFFFFF 		.word	-1
 6484 0008 28       		.byte	40
 6485 0009 000000   		.space	3
 6486 000c 03000000 		.word	3
 6487 0010 16       		.byte	22
 6488 0011 000000   		.space	3
 6489 0014 01000000 		.word	1
 6490 0018 1C       		.byte	28
 6491 0019 000000   		.space	3
 6492 001c 01000000 		.word	1
 6493 0020 13       		.byte	19
 6494 0021 000000   		.space	3
 6495 0024 02000000 		.word	2
 6496 0028 2E       		.byte	46
 6497 0029 000000   		.space	3
 6498 002c 00000000 		.word	0
 6499 0030 2E       		.byte	46
 6500 0031 000000   		.space	3
 6501 0034 00000000 		.word	0
 6502 0038 2E       		.byte	46
 6503 0039 000000   		.space	3
 6504 003c 00000000 		.word	0
 6505 0040 07       		.byte	7
 6506 0041 000000   		.space	3
 6507 0044 03000000 		.word	3
 6508 0048 08       		.byte	8
 6509 0049 000000   		.space	3
 6510 004c 03000000 		.word	3
 6511 0050 2F       		.byte	47
 6512 0051 000000   		.space	3
 6513 0054 04000000 		.word	4
 6514 0058 2F       		.byte	47
 6515 0059 000000   		.space	3
 6516 005c 04000000 		.word	4
 6517 0060 2F       		.byte	47
 6518 0061 000000   		.space	3
 6519 0064 04000000 		.word	4
 6520 0068 0C       		.byte	12
 6521 0069 000000   		.space	3
 6522 006c 02000000 		.word	2
 6523 0070 2F       		.byte	47
 6524 0071 000000   		.space	3
 6525 0074 06000000 		.word	6
 6526 0078 05       		.byte	5
 6527 0079 000000   		.space	3
 6528 007c 03000000 		.word	3
 6529 0080 2E       		.byte	46
 6530 0081 000000   		.space	3
 6531 0084 00000000 		.word	0
 6532 0088 2E       		.byte	46
 6533 0089 000000   		.space	3
 6534 008c 00000000 		.word	0
 6535 0090 2E       		.byte	46
 6536 0091 000000   		.space	3
 6537 0094 00000000 		.word	0
ARM GAS  /tmp/ccp3OFc8.s 			page 161


 6538 0098 2E       		.byte	46
 6539 0099 000000   		.space	3
 6540 009c 00000000 		.word	0
 6541 00a0 2E       		.byte	46
 6542 00a1 000000   		.space	3
 6543 00a4 00000000 		.word	0
 6544 00a8 1B       		.byte	27
 6545 00a9 000000   		.space	3
 6546 00ac 03000000 		.word	3
 6547 00b0 1A       		.byte	26
 6548 00b1 000000   		.space	3
 6549 00b4 03000000 		.word	3
 6550 00b8 2E       		.byte	46
 6551 00b9 000000   		.space	3
 6552 00bc 00000000 		.word	0
 6553 00c0 2E       		.byte	46
 6554 00c1 000000   		.space	3
 6555 00c4 00000000 		.word	0
 6556 00c8 0C       		.byte	12
 6557 00c9 000000   		.space	3
 6558 00cc 03000000 		.word	3
 6559 00d0 1F       		.byte	31
 6560 00d1 000000   		.space	3
 6561 00d4 03000000 		.word	3
 6562 00d8 19       		.byte	25
 6563 00d9 000000   		.space	3
 6564 00dc 03000000 		.word	3
 6565 00e0 2A       		.byte	42
 6566 00e1 000000   		.space	3
 6567 00e4 FFFFFFFF 		.word	-1
 6568 00e8 2E       		.byte	46
 6569 00e9 000000   		.space	3
 6570 00ec 00000000 		.word	0
 6571 00f0 31       		.byte	49
 6572 00f1 000000   		.space	3
 6573 00f4 0E000000 		.word	14
 6574 00f8 21       		.byte	33
 6575 00f9 000000   		.space	3
 6576 00fc 03000000 		.word	3
 6577 0100 2E       		.byte	46
 6578 0101 000000   		.space	3
 6579 0104 00000000 		.word	0
 6580 0108 24       		.byte	36
 6581 0109 000000   		.space	3
 6582 010c 02000000 		.word	2
 6583 0110 2F       		.byte	47
 6584 0111 000000   		.space	3
 6585 0114 0D000000 		.word	13
 6586 0118 2E       		.byte	46
 6587 0119 000000   		.space	3
 6588 011c 00000000 		.word	0
 6589 0120 2F       		.byte	47
 6590 0121 000000   		.space	3
 6591 0124 07000000 		.word	7
 6592 0128 1E       		.byte	30
 6593 0129 000000   		.space	3
 6594 012c 03000000 		.word	3
ARM GAS  /tmp/ccp3OFc8.s 			page 162


 6595 0130 2E       		.byte	46
 6596 0131 000000   		.space	3
 6597 0134 00000000 		.word	0
 6598 0138 2E       		.byte	46
 6599 0139 000000   		.space	3
 6600 013c 00000000 		.word	0
 6601 0140 2E       		.byte	46
 6602 0141 000000   		.space	3
 6603 0144 00000000 		.word	0
 6604 0148 2E       		.byte	46
 6605 0149 000000   		.space	3
 6606 014c 00000000 		.word	0
 6607 0150 2E       		.byte	46
 6608 0151 000000   		.space	3
 6609 0154 00000000 		.word	0
 6610 0158 2E       		.byte	46
 6611 0159 000000   		.space	3
 6612 015c 00000000 		.word	0
 6613 0160 2E       		.byte	46
 6614 0161 000000   		.space	3
 6615 0164 00000000 		.word	0
 6616 0168 2E       		.byte	46
 6617 0169 000000   		.space	3
 6618 016c 00000000 		.word	0
 6619 0170 2E       		.byte	46
 6620 0171 000000   		.space	3
 6621 0174 00000000 		.word	0
 6622              		.section	.rodata.mapping_none.11095,"a"
 6623              		.align	2
 6624              		.set	.LANCHOR13,. + 0
 6627              	mapping_none.11095:
 6628 0000 63       		.byte	99
 6629 0001 000000   		.space	3
 6630 0004 FFFFFFFF 		.word	-1
 6631 0008 00       		.byte	0
 6632 0009 000000   		.space	3
 6633 000c 00000000 		.word	0
 6634 0010 01       		.byte	1
 6635 0011 000000   		.space	3
 6636 0014 00000000 		.word	0
 6637 0018 03       		.byte	3
 6638 0019 000000   		.space	3
 6639 001c 00000000 		.word	0
 6640 0020 13       		.byte	19
 6641 0021 000000   		.space	3
 6642 0024 02000000 		.word	2
 6643 0028 12       		.byte	18
 6644 0029 000000   		.space	3
 6645 002c 02000000 		.word	2
 6646 0030 12       		.byte	18
 6647 0031 000000   		.space	3
 6648 0034 00000000 		.word	0
 6649 0038 06       		.byte	6
 6650 0039 000000   		.space	3
 6651 003c 00000000 		.word	0
 6652 0040 07       		.byte	7
 6653 0041 000000   		.space	3
ARM GAS  /tmp/ccp3OFc8.s 			page 163


 6654 0044 00000000 		.word	0
 6655 0048 08       		.byte	8
 6656 0049 000000   		.space	3
 6657 004c 00000000 		.word	0
 6658 0050 01       		.byte	1
 6659 0051 000000   		.space	3
 6660 0054 01000000 		.word	1
 6661 0058 02       		.byte	2
 6662 0059 000000   		.space	3
 6663 005c 01000000 		.word	1
 6664 0060 03       		.byte	3
 6665 0061 000000   		.space	3
 6666 0064 01000000 		.word	1
 6667 0068 0C       		.byte	12
 6668 0069 000000   		.space	3
 6669 006c 00000000 		.word	0
 6670 0070 0D       		.byte	13
 6671 0071 000000   		.space	3
 6672 0074 00000000 		.word	0
 6673 0078 0E       		.byte	14
 6674 0079 000000   		.space	3
 6675 007c 00000000 		.word	0
 6676 0080 0F       		.byte	15
 6677 0081 000000   		.space	3
 6678 0084 00000000 		.word	0
 6679 0088 10       		.byte	16
 6680 0089 000000   		.space	3
 6681 008c 00000000 		.word	0
 6682 0090 18       		.byte	24
 6683 0091 000000   		.space	3
 6684 0094 00000000 		.word	0
 6685 0098 13       		.byte	19
 6686 0099 000000   		.space	3
 6687 009c 00000000 		.word	0
 6688 00a0 14       		.byte	20
 6689 00a1 000000   		.space	3
 6690 00a4 00000000 		.word	0
 6691 00a8 15       		.byte	21
 6692 00a9 000000   		.space	3
 6693 00ac 00000000 		.word	0
 6694 00b0 16       		.byte	22
 6695 00b1 000000   		.space	3
 6696 00b4 00000000 		.word	0
 6697 00b8 1E       		.byte	30
 6698 00b9 000000   		.space	3
 6699 00bc 00000000 		.word	0
 6700 00c0 19       		.byte	25
 6701 00c1 000000   		.space	3
 6702 00c4 00000000 		.word	0
 6703 00c8 1A       		.byte	26
 6704 00c9 000000   		.space	3
 6705 00cc 00000000 		.word	0
 6706 00d0 1B       		.byte	27
 6707 00d1 000000   		.space	3
 6708 00d4 00000000 		.word	0
 6709 00d8 1C       		.byte	28
 6710 00d9 000000   		.space	3
ARM GAS  /tmp/ccp3OFc8.s 			page 164


 6711 00dc 00000000 		.word	0
 6712 00e0 29       		.byte	41
 6713 00e1 000000   		.space	3
 6714 00e4 00000000 		.word	0
 6715 00e8 1F       		.byte	31
 6716 00e9 000000   		.space	3
 6717 00ec 00000000 		.word	0
 6718 00f0 20       		.byte	32
 6719 00f1 000000   		.space	3
 6720 00f4 00000000 		.word	0
 6721 00f8 21       		.byte	33
 6722 00f9 000000   		.space	3
 6723 00fc 00000000 		.word	0
 6724 0100 22       		.byte	34
 6725 0101 000000   		.space	3
 6726 0104 00000000 		.word	0
 6727 0108 24       		.byte	36
 6728 0109 000000   		.space	3
 6729 010c 00000000 		.word	0
 6730 0110 25       		.byte	37
 6731 0111 000000   		.space	3
 6732 0114 00000000 		.word	0
 6733 0118 26       		.byte	38
 6734 0119 000000   		.space	3
 6735 011c 00000000 		.word	0
 6736 0120 27       		.byte	39
 6737 0121 000000   		.space	3
 6738 0124 00000000 		.word	0
 6739 0128 28       		.byte	40
 6740 0129 000000   		.space	3
 6741 012c 00000000 		.word	0
 6742 0130 2E       		.byte	46
 6743 0131 000000   		.space	3
 6744 0134 00000000 		.word	0
 6745 0138 2E       		.byte	46
 6746 0139 000000   		.space	3
 6747 013c 00000000 		.word	0
 6748 0140 2E       		.byte	46
 6749 0141 000000   		.space	3
 6750 0144 00000000 		.word	0
 6751 0148 2E       		.byte	46
 6752 0149 000000   		.space	3
 6753 014c 00000000 		.word	0
 6754 0150 2E       		.byte	46
 6755 0151 000000   		.space	3
 6756 0154 00000000 		.word	0
 6757 0158 2E       		.byte	46
 6758 0159 000000   		.space	3
 6759 015c 00000000 		.word	0
 6760 0160 2E       		.byte	46
 6761 0161 000000   		.space	3
 6762 0164 00000000 		.word	0
 6763 0168 2E       		.byte	46
 6764 0169 000000   		.space	3
 6765 016c 00000000 		.word	0
 6766 0170 2E       		.byte	46
 6767 0171 000000   		.space	3
ARM GAS  /tmp/ccp3OFc8.s 			page 165


 6768 0174 00000000 		.word	0
 6769              		.section	.rodata.mapping_running.11099,"a"
 6770              		.align	2
 6771              		.set	.LANCHOR12,. + 0
 6774              	mapping_running.11099:
 6775 0000 63       		.byte	99
 6776 0001 000000   		.space	3
 6777 0004 FFFFFFFF 		.word	-1
 6778 0008 00       		.byte	0
 6779 0009 000000   		.space	3
 6780 000c 00000000 		.word	0
 6781 0010 01       		.byte	1
 6782 0011 000000   		.space	3
 6783 0014 00000000 		.word	0
 6784 0018 02       		.byte	2
 6785 0019 000000   		.space	3
 6786 001c 00000000 		.word	0
 6787 0020 03       		.byte	3
 6788 0021 000000   		.space	3
 6789 0024 00000000 		.word	0
 6790 0028 04       		.byte	4
 6791 0029 000000   		.space	3
 6792 002c 00000000 		.word	0
 6793 0030 12       		.byte	18
 6794 0031 000000   		.space	3
 6795 0034 00000000 		.word	0
 6796 0038 06       		.byte	6
 6797 0039 000000   		.space	3
 6798 003c 00000000 		.word	0
 6799 0040 07       		.byte	7
 6800 0041 000000   		.space	3
 6801 0044 00000000 		.word	0
 6802 0048 08       		.byte	8
 6803 0049 000000   		.space	3
 6804 004c 00000000 		.word	0
 6805 0050 09       		.byte	9
 6806 0051 000000   		.space	3
 6807 0054 00000000 		.word	0
 6808 0058 0A       		.byte	10
 6809 0059 000000   		.space	3
 6810 005c 00000000 		.word	0
 6811 0060 0B       		.byte	11
 6812 0061 000000   		.space	3
 6813 0064 00000000 		.word	0
 6814 0068 0C       		.byte	12
 6815 0069 000000   		.space	3
 6816 006c 00000000 		.word	0
 6817 0070 0D       		.byte	13
 6818 0071 000000   		.space	3
 6819 0074 00000000 		.word	0
 6820 0078 0E       		.byte	14
 6821 0079 000000   		.space	3
 6822 007c 00000000 		.word	0
 6823 0080 0F       		.byte	15
 6824 0081 000000   		.space	3
 6825 0084 00000000 		.word	0
 6826 0088 10       		.byte	16
ARM GAS  /tmp/ccp3OFc8.s 			page 166


 6827 0089 000000   		.space	3
 6828 008c 00000000 		.word	0
 6829 0090 18       		.byte	24
 6830 0091 000000   		.space	3
 6831 0094 00000000 		.word	0
 6832 0098 13       		.byte	19
 6833 0099 000000   		.space	3
 6834 009c 00000000 		.word	0
 6835 00a0 14       		.byte	20
 6836 00a1 000000   		.space	3
 6837 00a4 00000000 		.word	0
 6838 00a8 15       		.byte	21
 6839 00a9 000000   		.space	3
 6840 00ac 00000000 		.word	0
 6841 00b0 16       		.byte	22
 6842 00b1 000000   		.space	3
 6843 00b4 00000000 		.word	0
 6844 00b8 1E       		.byte	30
 6845 00b9 000000   		.space	3
 6846 00bc 00000000 		.word	0
 6847 00c0 19       		.byte	25
 6848 00c1 000000   		.space	3
 6849 00c4 00000000 		.word	0
 6850 00c8 1A       		.byte	26
 6851 00c9 000000   		.space	3
 6852 00cc 00000000 		.word	0
 6853 00d0 1B       		.byte	27
 6854 00d1 000000   		.space	3
 6855 00d4 00000000 		.word	0
 6856 00d8 1C       		.byte	28
 6857 00d9 000000   		.space	3
 6858 00dc 00000000 		.word	0
 6859 00e0 09       		.byte	9
 6860 00e1 000000   		.space	3
 6861 00e4 00000000 		.word	0
 6862 00e8 1F       		.byte	31
 6863 00e9 000000   		.space	3
 6864 00ec 00000000 		.word	0
 6865 00f0 20       		.byte	32
 6866 00f1 000000   		.space	3
 6867 00f4 00000000 		.word	0
 6868 00f8 21       		.byte	33
 6869 00f9 000000   		.space	3
 6870 00fc 00000000 		.word	0
 6871 0100 22       		.byte	34
 6872 0101 000000   		.space	3
 6873 0104 00000000 		.word	0
 6874 0108 24       		.byte	36
 6875 0109 000000   		.space	3
 6876 010c 00000000 		.word	0
 6877 0110 25       		.byte	37
 6878 0111 000000   		.space	3
 6879 0114 00000000 		.word	0
 6880 0118 26       		.byte	38
 6881 0119 000000   		.space	3
 6882 011c 00000000 		.word	0
 6883 0120 27       		.byte	39
ARM GAS  /tmp/ccp3OFc8.s 			page 167


 6884 0121 000000   		.space	3
 6885 0124 00000000 		.word	0
 6886 0128 28       		.byte	40
 6887 0129 000000   		.space	3
 6888 012c 00000000 		.word	0
 6889 0130 2E       		.byte	46
 6890 0131 000000   		.space	3
 6891 0134 00000000 		.word	0
 6892 0138 2E       		.byte	46
 6893 0139 000000   		.space	3
 6894 013c 00000000 		.word	0
 6895 0140 2E       		.byte	46
 6896 0141 000000   		.space	3
 6897 0144 00000000 		.word	0
 6898 0148 2E       		.byte	46
 6899 0149 000000   		.space	3
 6900 014c 00000000 		.word	0
 6901 0150 04       		.byte	4
 6902 0151 000000   		.space	3
 6903 0154 00000000 		.word	0
 6904 0158 05       		.byte	5
 6905 0159 000000   		.space	3
 6906 015c 00000000 		.word	0
 6907 0160 2E       		.byte	46
 6908 0161 000000   		.space	3
 6909 0164 00000000 		.word	0
 6910 0168 2E       		.byte	46
 6911 0169 000000   		.space	3
 6912 016c 00000000 		.word	0
 6913 0170 2E       		.byte	46
 6914 0171 000000   		.space	3
 6915 0174 00000000 		.word	0
 6916              		.section	.rodata.mid_menu,"a"
 6917              		.align	2
 6920              	mid_menu:
 6921 0000 C8C40B00 		.ascii	"\310\304\013\000"
 6922              		.text
 6923              	.Letext0:
 6924              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 6925              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 6926              		.file 6 "/usr/include/newlib/sys/_types.h"
 6927              		.file 7 "/usr/include/newlib/sys/reent.h"
 6928              		.file 8 "/usr/include/newlib/sys/lock.h"
 6929              		.file 9 "/usr/include/newlib/stdlib.h"
 6930              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 6931              		.file 11 "/usr/include/newlib/ctype.h"
 6932              		.file 12 "dmcp/ff_ifc.h"
 6933              		.file 13 "dmcp/dmcp.h"
 6934              		.file 14 "src/keys.h"
 6935              		.file 15 "src/menu.h"
 6936              		.file 16 "src/decNumber/decContext.h"
 6937              		.file 17 "src/decNumber/decNumber.h"
 6938              		.file 18 "src/decNumber/decimal64.h"
 6939              		.file 19 "src/decNumber/decimal128.h"
 6940              		.file 20 "src/xeq.h"
 6941              		.file 21 "src/data.h"
 6942              		.file 22 "src/display.h"
ARM GAS  /tmp/ccp3OFc8.s 			page 168


 6943              		.file 23 "src/consts.h"
 6944              		.file 24 "src/storage.h"
 6945              		.file 25 "src/catalogues.h"
 6946              		.file 26 "src/stopwatch.h"
 6947              		.file 27 "src/lcd.h"
 6948              		.file 28 "/usr/include/newlib/string.h"
 6949              		.file 29 "/usr/include/newlib/stdio.h"
 6950              		.file 30 "<built-in>"
ARM GAS  /tmp/ccp3OFc8.s 			page 169


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccp3OFc8.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/ccp3OFc8.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/ccp3OFc8.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/ccp3OFc8.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/ccp3OFc8.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccp3OFc8.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccp3OFc8.s:433    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/ccp3OFc8.s:441    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/ccp3OFc8.s:460    .text.disp_about:0000000000000000 $t
     /tmp/ccp3OFc8.s:468    .text.disp_about:0000000000000000 disp_about
     /tmp/ccp3OFc8.s:621    .text.disp_about:0000000000000080 $d
     /tmp/ccp3OFc8.s:639    .text.run_menu_item:0000000000000000 $t
     /tmp/ccp3OFc8.s:647    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/ccp3OFc8.s:687    .text.set_menu:0000000000000000 $t
     /tmp/ccp3OFc8.s:695    .text.set_menu:0000000000000000 set_menu
     /tmp/ccp3OFc8.s:750    .text.set_menu:000000000000002c $d
     /tmp/ccp3OFc8.s:757    .text.set_default_menu:0000000000000000 $t
     /tmp/ccp3OFc8.s:765    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/ccp3OFc8.s:839    .text.set_default_menu:000000000000002c $d
     /tmp/ccp3OFc8.s:848    .text.toggle_default_menu:0000000000000000 $t
     /tmp/ccp3OFc8.s:856    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/ccp3OFc8.s:958    .text.toggle_default_menu:0000000000000044 $d
     /tmp/ccp3OFc8.s:969    .text.get_menu:0000000000000000 $t
     /tmp/ccp3OFc8.s:977    .text.get_menu:0000000000000000 get_menu
     /tmp/ccp3OFc8.s:993    .text.get_menu:0000000000000008 $d
     /tmp/ccp3OFc8.s:998    .text.get_last_menu:0000000000000000 $t
     /tmp/ccp3OFc8.s:1006   .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/ccp3OFc8.s:1022   .text.get_last_menu:0000000000000008 $d
     /tmp/ccp3OFc8.s:1027   .text.set_last_menu:0000000000000000 $t
     /tmp/ccp3OFc8.s:1035   .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccp3OFc8.s:1110   .text.set_last_menu:000000000000002c $d
     /tmp/ccp3OFc8.s:1119   .text.mdot:0000000000000000 $t
     /tmp/ccp3OFc8.s:1127   .text.mdot:0000000000000000 mdot
     /tmp/ccp3OFc8.s:1218   .text.mdot:000000000000003c $d
     /tmp/ccp3OFc8.s:1223   .text.get_current_menu_ref:0000000000000000 $t
     /tmp/ccp3OFc8.s:1231   .text.get_current_menu_ref:0000000000000000 get_current_menu_ref
     /tmp/ccp3OFc8.s:1298   .text.get_current_menu_ref:0000000000000040 $d
     /tmp/ccp3OFc8.s:1313   .text.get_current_menu_ref:000000000000007c $t
     /tmp/ccp3OFc8.s:1383   .text.get_current_menu_ref:00000000000000a8 $d
     /tmp/ccp3OFc8.s:4668   .rodata.Menus:0000000000000000 Menus
     /tmp/ccp3OFc8.s:1391   .text.display_menu:0000000000000000 $t
     /tmp/ccp3OFc8.s:1399   .text.display_menu:0000000000000000 display_menu
     /tmp/ccp3OFc8.s:1647   .text.display_menu:000000000000010c $d
     /tmp/ccp3OFc8.s:1654   .text.display_current_menu:0000000000000000 $t
     /tmp/ccp3OFc8.s:1662   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccp3OFc8.s:1698   .text.all_menu_dots:0000000000000000 $t
     /tmp/ccp3OFc8.s:1706   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccp3OFc8.s:1790   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccp3OFc8.s:1795   .text.build_user_menu:0000000000000000 $t
     /tmp/ccp3OFc8.s:1803   .text.build_user_menu:0000000000000000 build_user_menu
     /tmp/ccp3OFc8.s:2118   .text.build_user_menu:0000000000000140 $d
     /tmp/ccp3OFc8.s:2130   .text.shutdown:0000000000000000 $t
     /tmp/ccp3OFc8.s:2138   .text.shutdown:0000000000000000 shutdown
     /tmp/ccp3OFc8.s:2156   .text.shutdown:000000000000000c $d
     /tmp/ccp3OFc8.s:2161   .text.is_key_pressed:0000000000000000 $t
ARM GAS  /tmp/ccp3OFc8.s 			page 170


     /tmp/ccp3OFc8.s:2169   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccp3OFc8.s:2192   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccp3OFc8.s:2197   .text.get_key:0000000000000000 $t
     /tmp/ccp3OFc8.s:2205   .text.get_key:0000000000000000 get_key
     /tmp/ccp3OFc8.s:2220   .text.get_key:0000000000000004 $d
     /tmp/ccp3OFc8.s:2225   .text.put_key:0000000000000000 $t
     /tmp/ccp3OFc8.s:2233   .text.put_key:0000000000000000 put_key
     /tmp/ccp3OFc8.s:2312   .text.put_key:000000000000003c $d
     /tmp/ccp3OFc8.s:2318   .text.shift_down:0000000000000000 $t
     /tmp/ccp3OFc8.s:2326   .text.shift_down:0000000000000000 shift_down
     /tmp/ccp3OFc8.s:2341   .text.start_key_timer:0000000000000000 $t
     /tmp/ccp3OFc8.s:2349   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccp3OFc8.s:2373   .text.start_key_timer:000000000000000c $d
     /tmp/ccp3OFc8.s:2379   .text.keyticks:0000000000000000 $t
     /tmp/ccp3OFc8.s:2387   .text.keyticks:0000000000000000 keyticks
     /tmp/ccp3OFc8.s:2418   .text.keyticks:0000000000000018 $d
     /tmp/ccp3OFc8.s:2424   .text.moveto:0000000000000000 $t
     /tmp/ccp3OFc8.s:2432   .text.moveto:0000000000000000 moveto
     /tmp/ccp3OFc8.s:2492   .text.moveto:000000000000002c $d
     /tmp/ccp3OFc8.s:2499   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccp3OFc8.s:2503   .text.print_debug:0000000000000000 $t
     /tmp/ccp3OFc8.s:2511   .text.print_debug:0000000000000000 print_debug
     /tmp/ccp3OFc8.s:2613   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccp3OFc8.s:2624   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccp3OFc8.s:2628   .text.print_debug2:0000000000000000 $t
     /tmp/ccp3OFc8.s:2636   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccp3OFc8.s:2738   .text.print_debug2:0000000000000064 $d
     /tmp/ccp3OFc8.s:2749   .text.do_now:0000000000000000 $t
     /tmp/ccp3OFc8.s:2757   .text.do_now:0000000000000000 do_now
     /tmp/ccp3OFc8.s:2792   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccp3OFc8.s:2796   .text.do_multi:0000000000000000 $t
     /tmp/ccp3OFc8.s:2804   .text.do_multi:0000000000000000 do_multi
     /tmp/ccp3OFc8.s:2835   .text.do_multi:000000000000001a $d
     /tmp/ccp3OFc8.s:3250   .text.do_multi:0000000000000168 $d
     /tmp/ccp3OFc8.s:3263   .text.program_main:0000000000000000 $t
     /tmp/ccp3OFc8.s:3271   .text.program_main:0000000000000000 program_main
     /tmp/ccp3OFc8.s:3564   .text.program_main:0000000000000126 $d
     /tmp/ccp3OFc8.s:3570   .text.program_main:0000000000000132 $t
     /tmp/ccp3OFc8.s:3950   .text.program_main:00000000000002e0 $d
     /tmp/ccp3OFc8.s:3988   .text.program_main:0000000000000368 $t
     /tmp/ccp3OFc8.s:4422   .text.program_main:0000000000000574 $d
     /tmp/ccp3OFc8.s:4503   .bss.n_p:0000000000000000 n_p
     /tmp/ccp3OFc8.s:4652   .data.spaces:0000000000000000 spaces
     /tmp/ccp3OFc8.s:4643   .data.release:0000000000000000 release
     /tmp/ccp3OFc8.s:4616   .data.h_shift:0000000000000000 h_shift
     /tmp/ccp3OFc8.s:4607   .data.g_shift:0000000000000000 g_shift
     /tmp/ccp3OFc8.s:4599   .data.f_shift:0000000000000000 f_shift
     /tmp/ccp3OFc8.s:4625   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccp3OFc8.s:4634   .data.no_key:0000000000000000 no_key
     /tmp/ccp3OFc8.s:4659   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccp3OFc8.s:4451   .rodata.str1.4:0000000000000000 $d
     /tmp/ccp3OFc8.s:6920   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccp3OFc8.s:4484   .bss.default_menu:0000000000000000 default_menu
     /tmp/ccp3OFc8.s:4490   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccp3OFc8.s:4478   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccp3OFc8.s:4593   .data.cmplx_key_string:0000000000000000 cmplx_key_string
ARM GAS  /tmp/ccp3OFc8.s 			page 171


     /tmp/ccp3OFc8.s:4586   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/ccp3OFc8.s:4517   .data.UserMenu:0000000000000000 UserMenu
     /tmp/ccp3OFc8.s:4468   .rodata:0000000000000000 $d
     /tmp/ccp3OFc8.s:4479   .bss.current_menu:0000000000000000 $d
     /tmp/ccp3OFc8.s:4485   .bss.default_menu:0000000000000000 $d
     /tmp/ccp3OFc8.s:4491   .bss.last_menu:0000000000000000 $d
     /tmp/ccp3OFc8.s:4493   .bss.mdots:0000000000000000 $d
     /tmp/ccp3OFc8.s:4497   .bss.mdots:0000000000000000 mdots
     /tmp/ccp3OFc8.s:4500   .bss.n_p:0000000000000000 $d
     /tmp/ccp3OFc8.s:4506   .bss.start_ticks:0000000000000000 $d
     /tmp/ccp3OFc8.s:4510   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccp3OFc8.s:4513   .data.UserMenu:0000000000000000 $d
     /tmp/ccp3OFc8.s:4582   .data.arrow_key_string:0000000000000000 $d
     /tmp/ccp3OFc8.s:4589   .data.cmplx_key_string:0000000000000000 $d
     /tmp/ccp3OFc8.s:4596   .data.f_shift:0000000000000000 $d
     /tmp/ccp3OFc8.s:4604   .data.g_shift:0000000000000000 $d
     /tmp/ccp3OFc8.s:4612   .data.h_shift:0000000000000000 $d
     /tmp/ccp3OFc8.s:4621   .data.heartbeat:0000000000000000 $d
     /tmp/ccp3OFc8.s:4630   .data.no_key:0000000000000000 $d
     /tmp/ccp3OFc8.s:4639   .data.release:0000000000000000 $d
     /tmp/ccp3OFc8.s:4648   .data.spaces:0000000000000000 $d
     /tmp/ccp3OFc8.s:4655   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccp3OFc8.s:4665   .rodata.Menus:0000000000000000 $d
     /tmp/ccp3OFc8.s:6182   .rodata.mapping_alpha.11098:0000000000000000 $d
     /tmp/ccp3OFc8.s:6186   .rodata.mapping_alpha.11098:0000000000000000 mapping_alpha.11098
     /tmp/ccp3OFc8.s:6329   .rodata.mapping_fshift.11096:0000000000000000 $d
     /tmp/ccp3OFc8.s:6333   .rodata.mapping_fshift.11096:0000000000000000 mapping_fshift.11096
     /tmp/ccp3OFc8.s:6476   .rodata.mapping_gshift.11097:0000000000000000 $d
     /tmp/ccp3OFc8.s:6480   .rodata.mapping_gshift.11097:0000000000000000 mapping_gshift.11097
     /tmp/ccp3OFc8.s:6623   .rodata.mapping_none.11095:0000000000000000 $d
     /tmp/ccp3OFc8.s:6627   .rodata.mapping_none.11095:0000000000000000 mapping_none.11095
     /tmp/ccp3OFc8.s:6770   .rodata.mapping_running.11099:0000000000000000 $d
     /tmp/ccp3OFc8.s:6774   .rodata.mapping_running.11099:0000000000000000 mapping_running.11099
     /tmp/ccp3OFc8.s:6917   .rodata.mid_menu:0000000000000000 $d
     /tmp/ccp3OFc8.s:2850   .text.do_multi:0000000000000029 $d
     /tmp/ccp3OFc8.s:2850   .text.do_multi:000000000000002a $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
memcpy
main_ram
pixel_length
findmultilbl
do_inc
getprog
prt_umen
strncpy
catcmd
strcpy
sprintf
process_keycode_with_shift
reset_shift
flash_backup
ARM GAS  /tmp/ccp3OFc8.s 			page 172


flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
KeyCallback
JustDisplayed
Pause
Running
DM42_Ticker
is_dot
dot
finish_display
get_alpha_state
StopWatchStatus

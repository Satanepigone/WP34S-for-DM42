ARM GAS  /tmp/cckAiVOj.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC1:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** /* 
   4:src/menu.c    ****  * System menu stuff
   5:src/menu.c    ****  */
   6:src/menu.c    **** 
   7:src/menu.c    **** #define MI_ABOUT_PGM 11
   8:src/menu.c    **** 
   9:src/menu.c    **** const uint8_t mid_menu[] = {
  10:src/menu.c    ****     MI_SYSTEM_ENTER,
  11:src/menu.c    ****     MI_MSC,
  12:src/menu.c    ****     MI_ABOUT_PGM,
  13:src/menu.c    ****     0 }; // Terminator
  14:src/menu.c    **** 
  15:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  16:src/menu.c    **** 
  17:src/menu.c    **** void disp_about(void);
  18:src/menu.c    **** 
  19:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  20:src/menu.c    ****   int ret = 0;
  21:src/menu.c    **** 
  22:src/menu.c    ****   switch(line_id) {
  23:src/menu.c    ****     case MI_ABOUT_PGM:
ARM GAS  /tmp/cckAiVOj.s 			page 2


  24:src/menu.c    ****       disp_about();
  25:src/menu.c    ****       break;
  26:src/menu.c    **** 
  27:src/menu.c    ****      default:
  28:src/menu.c    ****       ret = MRET_UNIMPL;
  29:src/menu.c    ****       break;
  30:src/menu.c    ****   }
  31:src/menu.c    **** 
  32:src/menu.c    ****   return ret;
  33:src/menu.c    **** }
  34:src/menu.c    **** 
  35:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 35 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  36:src/menu.c    ****   const char * ln;
  40              		.loc 1 36 3 view .LVU1
  37:src/menu.c    **** 
  38:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 38 3 view .LVU2
  39:src/menu.c    **** 
  40:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  41:src/menu.c    **** 
  42:src/menu.c    ****   default:
  43:src/menu.c    ****     ln = NULL;
  42              		.loc 1 43 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  38:src/menu.c    **** 
  44              		.loc 1 38 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
  44:src/menu.c    ****     break;
  45:src/menu.c    ****   }
  46:src/menu.c    **** 
  47:src/menu.c    ****   return ln;
  48:src/menu.c    **** }
  46              		.loc 1 48 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 48 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC1
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cckAiVOj.s 			page 3


  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB30:
  49:src/menu.c    **** 
  50:src/menu.c    **** void disp_about() {
  51:src/menu.c    ****   lcd_clear_buf();
  52:src/menu.c    ****   lcd_writeClr(t24);
  53:src/menu.c    **** 
  54:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  55:src/menu.c    ****   lcd_printR(t24, "WP34s calculator for DM42:");
  56:src/menu.c    ****   t24->y += 5;
  57:src/menu.c    **** #ifdef TOP_ROW
  58:src/menu.c    ****   lcd_print(t24, "with top row for annunciators,");
  59:src/menu.c    ****   lcd_print(t24, "a longer alpha display,");
  60:src/menu.c    ****   lcd_print(t24, "and some annunciators renamed.");
  61:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  62:src/menu.c    ****   lcd_print(t24, "with a longer alpha display");
  63:src/menu.c    ****   lcd_print(t24, "than the original calculator,");
  64:src/menu.c    ****   lcd_print(t24, "and some annunciators renamed.");
  65:src/menu.c    ****   #else
  66:src/menu.c    ****   lcd_print(t24, "Just like the original calculator");
  67:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed.");
  68:src/menu.c    **** #endif
  69:src/menu.c    ****   t24->y += 5;
  70:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
  71:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
  72:src/menu.c    **** 
  73:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
  74:src/menu.c    ****   t24->x = 20;
  75:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
  76:src/menu.c    **** 
  77:src/menu.c    ****   lcd_refresh();
  78:src/menu.c    **** 
  79:src/menu.c    ****   wait_for_key_press();
  80:src/menu.c    **** }
  81:src/menu.c    **** 
  82:src/menu.c    **** /*
  83:src/menu.c    ****  * WP34s menu code
  84:src/menu.c    ****  */
  85:src/menu.c    **** 
  86:src/menu.c    **** void set_menu ( int new_menu ) {
  87:src/menu.c    ****   int m = current_menu;
  88:src/menu.c    ****   if (new_menu == current_menu) { // return to default
  89:src/menu.c    ****     current_menu = default_menu;
  90:src/menu.c    ****   }
  91:src/menu.c    ****   else if (new_menu == -1) { // go to last menu
  92:src/menu.c    ****     current_menu = last_menu;
  93:src/menu.c    ****   }
  94:src/menu.c    ****   else {
  95:src/menu.c    ****     current_menu = new_menu; // change to new menu
  96:src/menu.c    ****   }
  97:src/menu.c    ****   if (m != 9) last_menu = m; // store menu as last menu unless it's arrow!
  98:src/menu.c    **** }
  99:src/menu.c    **** 
 100:src/menu.c    **** void toggle_default_menu () {
 101:src/menu.c    ****   if (current_menu == default_menu) {
 102:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
ARM GAS  /tmp/cckAiVOj.s 			page 4


 103:src/menu.c    ****   }
 104:src/menu.c    **** }
 105:src/menu.c    **** 
 106:src/menu.c    **** int get_menu () {
 107:src/menu.c    ****   return current_menu;
 108:src/menu.c    **** }
 109:src/menu.c    **** 
 110:src/menu.c    **** void display_current_menu () {
 111:src/menu.c    ****   display_menu (current_menu);
 112:src/menu.c    **** }
 113:src/menu.c    **** 
 114:src/menu.c    **** void set_last_menu () {
 115:src/menu.c    ****   set_menu (last_menu);
 116:src/menu.c    **** }
 117:src/menu.c    **** 
 118:src/menu.c    **** static unsigned char mdots[200][2];
 119:src/menu.c    **** 
 120:src/menu.c    **** static const struct _menu Menus[] = {
 121:src/menu.c    ****   {
 122:src/menu.c    ****     "Blank", // 0
 123:src/menu.c    ****     { 
 124:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 125:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 126:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 127:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 128:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 129:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 130:src/menu.c    ****     }    
 131:src/menu.c    ****   },
 132:src/menu.c    ****   {
 133:src/menu.c    ****     "Clear", // 1
 134:src/menu.c    ****     { 
 135:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 136:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 137:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 138:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 139:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 140:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 141:src/menu.c    ****     }    
 142:src/menu.c    ****   },
 143:src/menu.c    ****   {
 144:src/menu.c    ****     "DISP", // 2
 145:src/menu.c    ****     { 
 146:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 147:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 148:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 149:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 150:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 151:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 152:src/menu.c    ****     }
 153:src/menu.c    ****   },
 154:src/menu.c    ****   {
 155:src/menu.c    ****     "BASE", // 3
 156:src/menu.c    ****     { 
 157:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 158:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 159:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
ARM GAS  /tmp/cckAiVOj.s 			page 5


 160:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 161:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 162:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 163:src/menu.c    ****     }
 164:src/menu.c    ****   },
 165:src/menu.c    ****   {
 166:src/menu.c    ****     "ANGLES", // 4
 167:src/menu.c    ****     { 
 168:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 169:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 170:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 171:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 172:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 173:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 174:src/menu.c    ****     }
 175:src/menu.c    ****       
 176:src/menu.c    ****   },
 177:src/menu.c    ****   {
 178:src/menu.c    ****     "MISC", // 5
 179:src/menu.c    ****     { 
 180:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 181:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 182:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 183:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 184:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 185:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 186:src/menu.c    ****     }
 187:src/menu.c    ****   },
 188:src/menu.c    ****   {
 189:src/menu.c    ****     "X<>Y Key", // 6
 190:src/menu.c    ****     { 
 191:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 192:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 193:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 194:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 195:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 196:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 197:src/menu.c    ****     }    
 198:src/menu.c    ****   },
 199:src/menu.c    ****   {
 200:src/menu.c    ****     "Program", // 7
 201:src/menu.c    ****     { 
 202:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 203:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 204:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 205:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 206:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 207:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 208:src/menu.c    ****     }
 209:src/menu.c    ****   },
 210:src/menu.c    ****   {
 211:src/menu.c    ****     "Setup 1", // 8
 212:src/menu.c    ****     { 
 213:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 214:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 215:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 216:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
ARM GAS  /tmp/cckAiVOj.s 			page 6


 217:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 218:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 219:src/menu.c    ****     }
 220:src/menu.c    ****   },
 221:src/menu.c    ****   {
 222:src/menu.c    ****     "Arrow", // 9
 223:src/menu.c    ****     { 
 224:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 225:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 226:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 227:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "\015HMS" },
 228:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 229:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 230:src/menu.c    ****     }
 231:src/menu.c    ****   },
 232:src/menu.c    ****   {
 233:src/menu.c    ****     "Flags", // 10
 234:src/menu.c    ****     { 
 235:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
 236:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 237:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 238:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 239:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "--\015", "x>?" },
 240:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "CPX", "x>=?" },
 241:src/menu.c    ****     }
 242:src/menu.c    ****   },
 243:src/menu.c    ****   {
 244:src/menu.c    ****     "Probability", // 11
 245:src/menu.c    ****     { 
 246:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 247:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 248:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 249:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 250:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 251:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 252:src/menu.c    ****     }
 253:src/menu.c    ****   },
 254:src/menu.c    ****   {
 255:src/menu.c    ****     "Statistics", // 12
 256:src/menu.c    ****     /*
 257:src/menu.c    ****      *xbar, sd;
 258:src/menu.c    ****      *yhat, xhat;
 259:src/menu.c    ****      *corr, L.R.;
 260:src/menu.c    ****      *best, linear;
 261:src/menu.c    ****      *ln, exp;
 262:src/menu.c    ****      *cmplx, power;
 263:src/menu.c    ****      *No, sums is already on g9.
 264:src/menu.c    ****      */
 265:src/menu.c    ****     { 
 266:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 267:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 268:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 269:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 270:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 271:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 272:src/menu.c    ****     }
 273:src/menu.c    ****   },
ARM GAS  /tmp/cckAiVOj.s 			page 7


 274:src/menu.c    ****   {
 275:src/menu.c    ****     "Setup 2", // 13
 276:src/menu.c    ****     { 
 277:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 278:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 279:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 280:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 281:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 282:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 283:src/menu.c    ****     }
 284:src/menu.c    ****   },
 285:src/menu.c    ****   {
 286:src/menu.c    ****     "Integ/Sum/Prod", // 14
 287:src/menu.c    ****     { 
 288:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 289:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 290:src/menu.c    ****       { { K53, 1 }, NO_KEY, "SUM", "" },
 291:src/menu.c    ****       { { K53, 2 }, NO_KEY, "PROD", "" },
 292:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 293:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 294:src/menu.c    ****     }
 295:src/menu.c    ****   },
 296:src/menu.c    ****   {
 297:src/menu.c    ****     "Blank with A-D", // 15
 298:src/menu.c    ****     { 
 299:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 300:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 301:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 302:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 303:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 304:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 305:src/menu.c    ****     }    
 306:src/menu.c    ****   },
 307:src/menu.c    **** };  
 308:src/menu.c    **** 
 309:src/menu.c    **** /* This code is the set_status_sized code with small changes
 310:src/menu.c    ****  * and non-DM42 code removed.
 311:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 312:src/menu.c    ****  */
 313:src/menu.c    **** #define MENU_WIDTH 32
 314:src/menu.c    **** 
 315:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 315 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 316:src/menu.c    ****   // dotcol is the number of the starting dot column
 317:src/menu.c    ****   // shifted is 1 if shifted
 318:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 318 3 view .LVU8
 319:src/menu.c    **** 
 320:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 321:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 321 3 view .LVU9
 322:src/menu.c    **** 
 323:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 323 3 view .LVU10
ARM GAS  /tmp/cckAiVOj.s 			page 8


 315:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 315 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 315:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 315 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 324:src/menu.c    ****   int i, j, xmax;
 325:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 325 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
  96 000e B4BF     		ite	lt
  97 0010 01F11F03 		addlt	r3, r1, #31
  98 0014 0B46     		movge	r3, r1
 326:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 327:src/menu.c    **** 
 328:src/menu.c    ****   forceDispPlot=0;
  99              		.loc 1 328 16 view .LVU14
 100 0016 4848     		ldr	r0, .L41
 101              	.LVL3:
 315:src/menu.c    ****   // dotcol is the number of the starting dot column
 102              		.loc 1 315 13 view .LVU15
 103 0018 0F46     		mov	r7, r1
 104              	.LVL4:
 324:src/menu.c    ****   int i, j, xmax;
 105              		.loc 1 324 3 is_stmt 1 view .LVU16
 325:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 106              		.loc 1 325 3 view .LVU17
 329:src/menu.c    **** 
 330:src/menu.c    **** #ifdef RP_PREFIX
 331:src/menu.c    ****   RectPolConv = 0;
 107              		.loc 1 331 15 is_stmt 0 view .LVU18
 108 001a 4849     		ldr	r1, .L41+4
 109              	.LVL5:
 328:src/menu.c    **** 
 110              		.loc 1 328 16 view .LVU19
 111 001c 0022     		movs	r2, #0
 112              	.LVL6:
 328:src/menu.c    **** 
 113              		.loc 1 328 16 view .LVU20
 114 001e 0270     		strb	r2, [r0]
 115              		.loc 1 331 15 view .LVU21
 116 0020 0A60     		str	r2, [r1]
 332:src/menu.c    **** #endif
 333:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 117              		.loc 1 333 10 view .LVU22
ARM GAS  /tmp/cckAiVOj.s 			page 9


 118 0022 019A     		ldr	r2, [sp, #4]
 119 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 325:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 120              		.loc 1 325 30 view .LVU23
 121 0026 23F01F03 		bic	r3, r3, #31
 325:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 122              		.loc 1 325 8 view .LVU24
 123 002a 03F12009 		add	r9, r3, #32
 124              	.LVL7:
 326:src/menu.c    **** 
 125              		.loc 1 326 3 is_stmt 1 view .LVU25
 328:src/menu.c    **** 
 126              		.loc 1 328 3 view .LVU26
 331:src/menu.c    **** #endif
 127              		.loc 1 331 3 view .LVU27
 128              		.loc 1 333 3 view .LVU28
 129              		.loc 1 333 9 view .LVU29
 130 002e 002D     		cmp	r5, #0
 131 0030 78D0     		beq	.L7
 132              		.loc 1 333 23 is_stmt 0 view .LVU30
 133 0032 4F45     		cmp	r7, r9
 134 0034 76DC     		bgt	.L7
 135              	.LBB39:
 334:src/menu.c    ****     int c;
 335:src/menu.c    ****     int width;
 336:src/menu.c    ****     unsigned char cmap[6];
 337:src/menu.c    **** 
 338:src/menu.c    ****     int real_width;
 339:src/menu.c    ****     int current_smallp;
 340:src/menu.c    **** 
 341:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 342:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 343:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 344:src/menu.c    ****     //           01 -> (not used)
 345:src/menu.c    ****     //           10 -> use big font
 346:src/menu.c    ****     //           11 -> use small font
 347:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 348:src/menu.c    ****     if (str[0] == '\007') {
 136              		.loc 1 348 8 view .LVU31
 137 0036 072D     		cmp	r5, #7
 138              	.LBE39:
 321:src/menu.c    **** 
 139              		.loc 1 321 7 view .LVU32
 140 0038 4FF0FF04 		mov	r4, #255
 141              	.LVL8:
 142              	.LBB56:
 334:src/menu.c    ****     int c;
 143              		.loc 1 334 5 is_stmt 1 view .LVU33
 335:src/menu.c    ****     unsigned char cmap[6];
 144              		.loc 1 335 5 view .LVU34
 336:src/menu.c    **** 
 145              		.loc 1 336 5 view .LVU35
 338:src/menu.c    ****     int current_smallp;
 146              		.loc 1 338 5 view .LVU36
 339:src/menu.c    **** 
 147              		.loc 1 339 5 view .LVU37
 148              		.loc 1 348 5 view .LVU38
ARM GAS  /tmp/cckAiVOj.s 			page 10


 349:src/menu.c    ****       width = str[1] & 0x1F;
 350:src/menu.c    ****       switch (str[1] & 0x60) {
 351:src/menu.c    ****       default:
 352:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 353:src/menu.c    **** 	break;
 354:src/menu.c    ****       case 0x40:	current_smallp = 0;
 355:src/menu.c    **** 	break;
 356:src/menu.c    ****       case 0x60:	current_smallp = 1;
 149              		.loc 1 356 33 is_stmt 0 view .LVU39
 150 003c 4FF0010A 		mov	r10, #1
 348:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 348 8 view .LVU40
 152 0040 64D1     		bne	.L11
 153              	.LVL9:
 154              	.L39:
 349:src/menu.c    ****       width = str[1] & 0x1F;
 155              		.loc 1 349 7 is_stmt 1 view .LVU41
 349:src/menu.c    ****       width = str[1] & 0x1F;
 156              		.loc 1 349 18 is_stmt 0 view .LVU42
 157 0042 019B     		ldr	r3, [sp, #4]
 158 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 159 0046 06F06003 		and	r3, r6, #96
 350:src/menu.c    ****       default:
 160              		.loc 1 350 7 view .LVU43
 161 004a 402B     		cmp	r3, #64
 349:src/menu.c    ****       width = str[1] & 0x1F;
 162              		.loc 1 349 13 view .LVU44
 163 004c 06F01F06 		and	r6, r6, #31
 164              	.LVL10:
 350:src/menu.c    ****       default:
 165              		.loc 1 350 7 is_stmt 1 view .LVU45
 166 0050 6CD0     		beq	.L34
 167 0052 602B     		cmp	r3, #96
 168 0054 6AD1     		bne	.L34
 169              		.loc 1 356 18 view .LVU46
 170              	.LVL11:
 357:src/menu.c    **** 	break;
 171              		.loc 1 357 2 view .LVU47
 358:src/menu.c    ****       }
 359:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 172              		.loc 1 359 7 view .LVU48
 173              		.loc 1 359 11 is_stmt 0 view .LVU49
 174 0056 019B     		ldr	r3, [sp, #4]
 175 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 356:src/menu.c    **** 	break;
 176              		.loc 1 356 33 view .LVU50
 177 005a 0123     		movs	r3, #1
 178 005c 0093     		str	r3, [sp]
 179 005e 00F58075 		add	r5, r0, #256
 180              	.LVL12:
 181              	.L15:
 360:src/menu.c    ****       str += 3;
 182              		.loc 1 360 7 is_stmt 1 view .LVU51
 361:src/menu.c    **** 
 362:src/menu.c    ****       real_width = charlengths(c);
 183              		.loc 1 362 20 is_stmt 0 view .LVU52
 184 0062 2846     		mov	r0, r5
ARM GAS  /tmp/cckAiVOj.s 			page 11


 185 0064 FFF7FEFF 		bl	charlengths
 186              	.LVL13:
 360:src/menu.c    ****       str += 3;
 187              		.loc 1 360 11 view .LVU53
 188 0068 019B     		ldr	r3, [sp, #4]
 189 006a 0333     		adds	r3, r3, #3
 190 006c 0193     		str	r3, [sp, #4]
 191              	.LVL14:
 192              		.loc 1 362 7 is_stmt 1 view .LVU54
 363:src/menu.c    ****     } else {
 364:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 365:src/menu.c    ****       real_width = width = charlengths(c);
 366:src/menu.c    ****       current_smallp = smallp;
 367:src/menu.c    ****     }
 368:src/menu.c    **** 
 369:src/menu.c    ****     if (x + real_width > xmax)
 193              		.loc 1 369 5 view .LVU55
 194              		.loc 1 369 11 is_stmt 0 view .LVU56
 195 006e C319     		adds	r3, r0, r7
 196              	.LVL15:
 197              		.loc 1 369 8 view .LVU57
 198 0070 9945     		cmp	r9, r3
 199 0072 57DB     		blt	.L7
 200              	.L40:
 370:src/menu.c    ****       break;
 371:src/menu.c    **** 
 372:src/menu.c    ****     if (posns_state != current_smallp) {
 201              		.loc 1 372 5 is_stmt 1 view .LVU58
 202              		.loc 1 372 8 is_stmt 0 view .LVU59
 203 0074 009B     		ldr	r3, [sp]
 204 0076 A342     		cmp	r3, r4
 373:src/menu.c    ****       findlengths(posns, current_smallp);
 205              		.loc 1 373 7 view .LVU60
 206 0078 07AB     		add	r3, sp, #28
 372:src/menu.c    ****       findlengths(posns, current_smallp);
 207              		.loc 1 372 8 view .LVU61
 208 007a 05D0     		beq	.L18
 209              		.loc 1 373 7 is_stmt 1 view .LVU62
 210 007c 1846     		mov	r0, r3
 211              	.LVL16:
 212              		.loc 1 373 7 is_stmt 0 view .LVU63
 213 007e 0099     		ldr	r1, [sp]
 214 0080 0393     		str	r3, [sp, #12]
 215 0082 FFF7FEFF 		bl	findlengths
 216              	.LVL17:
 217 0086 039B     		ldr	r3, [sp, #12]
 374:src/menu.c    ****       posns_state = current_smallp;
 218              		.loc 1 374 7 is_stmt 1 view .LVU64
 219              	.LVL18:
 220              	.L18:
 375:src/menu.c    ****     }
 376:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 221              		.loc 1 376 5 view .LVU65
 222 0088 009A     		ldr	r2, [sp]
 223 008a 2846     		mov	r0, r5
 224 008c 05A9     		add	r1, sp, #20
 225 008e FFF7FEFF 		bl	unpackchar
ARM GAS  /tmp/cckAiVOj.s 			page 12


 226              	.LVL19:
 377:src/menu.c    **** 
 378:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 227              		.loc 1 378 5 view .LVU66
 228              		.loc 1 378 15 view .LVU67
 229 0092 029B     		ldr	r3, [sp, #8]
 230 0094 03EB4704 		add	r4, r3, r7, lsl #1
 231 0098 294B     		ldr	r3, .L41+8
 232 009a 0DF1140B 		add	fp, sp, #20
 233 009e 1C44     		add	r4, r4, r3
 376:src/menu.c    **** 
 234              		.loc 1 376 5 is_stmt 0 view .LVU68
 235 00a0 4FF0050E 		mov	lr, #5
 236 00a4 A9EB0705 		sub	r5, r9, r7
 237              	.LVL20:
 238              	.L19:
 379:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 239              		.loc 1 379 17 is_stmt 1 view .LVU69
 240              		.loc 1 379 7 is_stmt 0 view .LVU70
 241 00a8 002E     		cmp	r6, #0
 242 00aa 1FDD     		ble	.L25
 380:src/menu.c    **** 	if (x+j >= xmax)
 243              		.loc 1 380 2 is_stmt 1 view .LVU71
 244              		.loc 1 380 5 is_stmt 0 view .LVU72
 245 00ac B945     		cmp	r9, r7
 246 00ae 1DDD     		ble	.L25
 247              	.LBB40:
 248              	.LBB41:
 249              	.LBB42:
 250              	.LBB43:
 381:src/menu.c    **** 	  break;
 382:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 383:src/menu.c    ****       }
 384:src/menu.c    ****     }
 385:src/menu.c    ****     x += width;
 386:src/menu.c    ****   }
 387:src/menu.c    **** }
 388:src/menu.c    **** 
 389:src/menu.c    **** 
 390:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 391:src/menu.c    **** 
 392:src/menu.c    **** int pixel_length(const char *s, int smallp)
 393:src/menu.c    **** {
 394:src/menu.c    ****   int len = 0;
 395:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 396:src/menu.c    ****   while (*s != '\0') {
 397:src/menu.c    ****     if (s[0] == '\007') {
 398:src/menu.c    ****       len += s[1] & 0x1F;
 399:src/menu.c    ****       s += 3;
 400:src/menu.c    ****       continue;
 401:src/menu.c    ****     }
 402:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 403:src/menu.c    ****   }
 404:src/menu.c    ****   return len;
 405:src/menu.c    **** }
 406:src/menu.c    **** */
 407:src/menu.c    **** 
ARM GAS  /tmp/cckAiVOj.s 			page 13


 408:src/menu.c    **** 
 409:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 410:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 411:src/menu.c    ****   if (on) {
 412:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 413:src/menu.c    ****   }
 414:src/menu.c    ****   else {
 415:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 251              		.loc 1 415 25 view .LVU73
 252 00b0 0AFA0EFC 		lsl	ip, r10, lr
 253              		.loc 1 415 17 view .LVU74
 254 00b4 4FFA8CFC 		sxtb	ip, ip
 255              	.LBE43:
 256              	.LBE42:
 257              	.LBE41:
 258              	.LBE40:
 382:src/menu.c    ****       }
 259              		.loc 1 382 31 view .LVU75
 260 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 261              	.LBB53:
 262              	.LBB50:
 263              	.LBB47:
 264              	.LBB44:
 265              		.loc 1 415 17 view .LVU76
 266 00bc 6FEA0C08 		mvn	r8, ip
 267              	.LBE44:
 268              	.LBE47:
 269              	.LBE50:
 270              	.LBE53:
 379:src/menu.c    **** 	if (x+j >= xmax)
 271              		.loc 1 379 13 view .LVU77
 272 00c0 0023     		movs	r3, #0
 273 00c2 01E0     		b	.L20
 274              	.LVL21:
 275              	.L24:
 380:src/menu.c    **** 	  break;
 276              		.loc 1 380 5 view .LVU78
 277 00c4 9D42     		cmp	r5, r3
 278 00c6 11D0     		beq	.L25
 279              	.LVL22:
 280              	.L20:
 382:src/menu.c    ****       }
 281              		.loc 1 382 2 is_stmt 1 view .LVU79
 282              	.LBB54:
 283              	.LBI40:
 409:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 409 6 view .LVU80
 285              	.LBB51:
 410:src/menu.c    ****   if (on) {
 286              		.loc 1 410 3 view .LVU81
 287              	.LBB48:
 288              	.LBI42:
 409:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 289              		.loc 1 409 6 view .LVU82
 290              	.LBB45:
 411:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 291              		.loc 1 411 3 view .LVU83
ARM GAS  /tmp/cckAiVOj.s 			page 14


 292              	.LBE45:
 293              	.LBE48:
 410:src/menu.c    ****   if (on) {
 294              		.loc 1 410 6 is_stmt 0 view .LVU84
 295 00c8 DA19     		adds	r2, r3, r7
 296              	.LVL23:
 410:src/menu.c    ****   if (on) {
 297              		.loc 1 410 6 view .LVU85
 298 00ca C72A     		cmp	r2, #199
 299              	.LBE51:
 300              	.LBE54:
 382:src/menu.c    ****       }
 301              		.loc 1 382 46 view .LVU86
 302 00cc 40FA03F1 		asr	r1, r0, r3
 303              	.LBB55:
 304              	.LBB52:
 410:src/menu.c    ****   if (on) {
 305              		.loc 1 410 6 view .LVU87
 306 00d0 09D8     		bhi	.L22
 307              	.LBB49:
 308              	.LBB46:
 412:src/menu.c    ****   }
 309              		.loc 1 412 5 is_stmt 1 view .LVU88
 310              		.loc 1 415 5 view .LVU89
 412:src/menu.c    ****   }
 311              		.loc 1 412 17 is_stmt 0 view .LVU90
 312 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 313              	.LVL24:
 411:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 314              		.loc 1 411 6 view .LVU91
 315 00d6 C907     		lsls	r1, r1, #31
 412:src/menu.c    ****   }
 316              		.loc 1 412 17 view .LVU92
 317 00d8 4CBF     		ite	mi
 318 00da 4CEA0202 		orrmi	r2, ip, r2
 319              		.loc 1 415 17 view .LVU93
 320 00de 08EA0202 		andpl	r2, r8, r2
 321 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 322              	.L22:
 323              	.LBE46:
 324              	.LBE49:
 325              	.LBE52:
 326              	.LBE55:
 380:src/menu.c    **** 	  break;
 327              		.loc 1 380 2 is_stmt 1 view .LVU94
 328              	.LVL25:
 379:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 379 26 view .LVU95
 379:src/menu.c    **** 	if (x+j >= xmax)
 330              		.loc 1 379 27 is_stmt 0 view .LVU96
 331 00e6 0133     		adds	r3, r3, #1
 332              	.LVL26:
 379:src/menu.c    **** 	if (x+j >= xmax)
 333              		.loc 1 379 17 is_stmt 1 view .LVU97
 379:src/menu.c    **** 	if (x+j >= xmax)
 334              		.loc 1 379 7 is_stmt 0 view .LVU98
 335 00e8 B342     		cmp	r3, r6
ARM GAS  /tmp/cckAiVOj.s 			page 15


 336 00ea EBD1     		bne	.L24
 337              	.LVL27:
 338              	.L25:
 378:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 339              		.loc 1 378 20 is_stmt 1 view .LVU99
 378:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 340              		.loc 1 378 15 view .LVU100
 341 00ec 0EF1FF3E 		add	lr, lr, #-1
 378:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 342              		.loc 1 378 5 is_stmt 0 view .LVU101
 343 00f0 BEF1FF3F 		cmp	lr, #-1
 344 00f4 0BF1010B 		add	fp, fp, #1
 345              	.LVL28:
 378:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 346              		.loc 1 378 5 view .LVU102
 347 00f8 D6D1     		bne	.L19
 385:src/menu.c    ****   }
 348              		.loc 1 385 5 is_stmt 1 view .LVU103
 349              	.LBE56:
 333:src/menu.c    ****     int c;
 350              		.loc 1 333 10 is_stmt 0 view .LVU104
 351 00fa 019B     		ldr	r3, [sp, #4]
 352 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 353              	.LBB57:
 385:src/menu.c    ****   }
 354              		.loc 1 385 7 view .LVU105
 355 00fe 3744     		add	r7, r7, r6
 356              	.LVL29:
 385:src/menu.c    ****   }
 357              		.loc 1 385 7 view .LVU106
 358              	.LBE57:
 333:src/menu.c    ****     int c;
 359              		.loc 1 333 9 is_stmt 1 view .LVU107
 360 0100 85B1     		cbz	r5, .L7
 333:src/menu.c    ****     int c;
 361              		.loc 1 333 23 is_stmt 0 view .LVU108
 362 0102 B945     		cmp	r9, r7
 363 0104 0EDB     		blt	.L7
 364              	.LBB58:
 348:src/menu.c    ****       width = str[1] & 0x1F;
 365              		.loc 1 348 8 view .LVU109
 366 0106 072D     		cmp	r5, #7
 367              	.LBE58:
 368 0108 009C     		ldr	r4, [sp]
 369              	.LBB59:
 334:src/menu.c    ****     int width;
 370              		.loc 1 334 5 is_stmt 1 view .LVU110
 335:src/menu.c    ****     unsigned char cmap[6];
 371              		.loc 1 335 5 view .LVU111
 336:src/menu.c    **** 
 372              		.loc 1 336 5 view .LVU112
 338:src/menu.c    ****     int current_smallp;
 373              		.loc 1 338 5 view .LVU113
 339:src/menu.c    **** 
 374              		.loc 1 339 5 view .LVU114
 348:src/menu.c    ****       width = str[1] & 0x1F;
 375              		.loc 1 348 5 view .LVU115
ARM GAS  /tmp/cckAiVOj.s 			page 16


 348:src/menu.c    ****       width = str[1] & 0x1F;
 376              		.loc 1 348 8 is_stmt 0 view .LVU116
 377 010a 9AD0     		beq	.L39
 378              	.LVL30:
 379              	.L11:
 364:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 364 7 is_stmt 1 view .LVU117
 365:src/menu.c    ****       current_smallp = smallp;
 381              		.loc 1 365 28 is_stmt 0 view .LVU118
 382 010c 2846     		mov	r0, r5
 383 010e FFF7FEFF 		bl	charlengths
 384              	.LVL31:
 364:src/menu.c    ****       real_width = width = charlengths(c);
 385              		.loc 1 364 31 view .LVU119
 386 0112 019B     		ldr	r3, [sp, #4]
 387 0114 0133     		adds	r3, r3, #1
 388 0116 0193     		str	r3, [sp, #4]
 389              	.LVL32:
 365:src/menu.c    ****       current_smallp = smallp;
 390              		.loc 1 365 7 is_stmt 1 view .LVU120
 366:src/menu.c    ****     }
 391              		.loc 1 366 7 view .LVU121
 366:src/menu.c    ****     }
 392              		.loc 1 366 22 is_stmt 0 view .LVU122
 393 0118 0023     		movs	r3, #0
 394              	.LVL33:
 366:src/menu.c    ****     }
 395              		.loc 1 366 22 view .LVU123
 396 011a 0093     		str	r3, [sp]
 397              	.LVL34:
 369:src/menu.c    ****       break;
 398              		.loc 1 369 11 view .LVU124
 399 011c C319     		adds	r3, r0, r7
 400              	.LVL35:
 369:src/menu.c    ****       break;
 401              		.loc 1 369 8 view .LVU125
 402 011e 9945     		cmp	r9, r3
 365:src/menu.c    ****       current_smallp = smallp;
 403              		.loc 1 365 28 view .LVU126
 404 0120 0646     		mov	r6, r0
 369:src/menu.c    ****       break;
 405              		.loc 1 369 5 is_stmt 1 view .LVU127
 369:src/menu.c    ****       break;
 406              		.loc 1 369 8 is_stmt 0 view .LVU128
 407 0122 A7DA     		bge	.L40
 408              	.LVL36:
 409              	.L7:
 369:src/menu.c    ****       break;
 410              		.loc 1 369 8 view .LVU129
 411              	.LBE59:
 387:src/menu.c    **** 
 412              		.loc 1 387 1 view .LVU130
 413 0124 0DF5097D 		add	sp, sp, #548
 414              		.cfi_remember_state
 415              		.cfi_def_cfa_offset 36
 416              		@ sp needed
 417 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/cckAiVOj.s 			page 17


 418              	.LVL37:
 419              	.L34:
 420              		.cfi_restore_state
 421              	.LBB60:
 359:src/menu.c    ****       str += 3;
 422              		.loc 1 359 7 is_stmt 1 view .LVU131
 359:src/menu.c    ****       str += 3;
 423              		.loc 1 359 11 is_stmt 0 view .LVU132
 424 012c 019B     		ldr	r3, [sp, #4]
 425 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 352:src/menu.c    **** 	break;
 426              		.loc 1 352 33 view .LVU133
 427 0130 0023     		movs	r3, #0
 428 0132 0093     		str	r3, [sp]
 429 0134 95E7     		b	.L15
 430              	.L42:
 431 0136 00BF     		.align	2
 432              	.L41:
 433 0138 00000000 		.word	forceDispPlot
 434 013c 00000000 		.word	RectPolConv
 435 0140 00000000 		.word	.LANCHOR0
 436              	.LBE60:
 437              		.cfi_endproc
 438              	.LFE30:
 440              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 441              		.align	2
 442              	.LC2:
 443 0000 57503334 		.ascii	"WP34s calculator for DM42:\000"
 443      73206361 
 443      6C63756C 
 443      61746F72 
 443      20666F72 
 444 001b 00       		.align	2
 445              	.LC3:
 446 001c 77697468 		.ascii	"with top row for annunciators,\000"
 446      20746F70 
 446      20726F77 
 446      20666F72 
 446      20616E6E 
 447 003b 00       		.align	2
 448              	.LC4:
 449 003c 61206C6F 		.ascii	"a longer alpha display,\000"
 449      6E676572 
 449      20616C70 
 449      68612064 
 449      6973706C 
 450              		.align	2
 451              	.LC5:
 452 0054 616E6420 		.ascii	"and some annunciators renamed.\000"
 452      736F6D65 
 452      20616E6E 
 452      756E6369 
 452      61746F72 
 453 0073 00       		.align	2
 454              	.LC6:
 455 0074 54686973 		.ascii	"This software is neither provided\000"
 455      20736F66 
ARM GAS  /tmp/cckAiVOj.s 			page 18


 455      74776172 
 455      65206973 
 455      206E6569 
 456 0096 0000     		.align	2
 457              	.LC7:
 458 0098 6279206E 		.ascii	"by nor supported by SwissMicros.\000"
 458      6F722073 
 458      7570706F 
 458      72746564 
 458      20627920 
 459 00b9 000000   		.align	2
 460              	.LC8:
 461 00bc 20202020 		.ascii	"    Press EXIT key to continue...\000"
 461      50726573 
 461      73204558 
 461      4954206B 
 461      65792074 
 462              		.section	.text.disp_about,"ax",%progbits
 463              		.align	1
 464              		.p2align 2,,3
 465              		.global	disp_about
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 469              		.fpu fpv4-sp-d16
 471              	disp_about:
 472              	.LFB5:
  50:src/menu.c    ****   lcd_clear_buf();
 473              		.loc 1 50 19 is_stmt 1 view -0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
  51:src/menu.c    ****   lcd_writeClr(t24);
 477              		.loc 1 51 3 view .LVU135
  50:src/menu.c    ****   lcd_clear_buf();
 478              		.loc 1 50 19 is_stmt 0 view .LVU136
 479 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 480              		.cfi_def_cfa_offset 24
 481              		.cfi_offset 4, -24
 482              		.cfi_offset 5, -20
 483              		.cfi_offset 6, -16
 484              		.cfi_offset 7, -12
 485              		.cfi_offset 8, -8
 486              		.cfi_offset 14, -4
  52:src/menu.c    **** 
 487              		.loc 1 52 3 view .LVU137
 488 0004 1F4C     		ldr	r4, .L45
  51:src/menu.c    ****   lcd_writeClr(t24);
 489              		.loc 1 51 3 view .LVU138
 490 0006 204B     		ldr	r3, .L45+4
  55:src/menu.c    ****   t24->y += 5;
 491              		.loc 1 55 3 view .LVU139
 492 0008 204D     		ldr	r5, .L45+8
  51:src/menu.c    ****   lcd_writeClr(t24);
 493              		.loc 1 51 3 view .LVU140
 494 000a 9847     		blx	r3
 495              	.LVL38:
ARM GAS  /tmp/cckAiVOj.s 			page 19


  52:src/menu.c    **** 
 496              		.loc 1 52 3 is_stmt 1 view .LVU141
 497 000c 606B     		ldr	r0, [r4, #52]
 498 000e 204B     		ldr	r3, .L45+12
 499 0010 9847     		blx	r3
 500              	.LVL39:
  54:src/menu.c    ****   lcd_printR(t24, "WP34s calculator for DM42:");
 501              		.loc 1 54 3 view .LVU142
 502 0012 0522     		movs	r2, #5
 503 0014 606B     		ldr	r0, [r4, #52]
 504 0016 1F4B     		ldr	r3, .L45+16
 505 0018 0021     		movs	r1, #0
 506 001a 9847     		blx	r3
 507              	.LVL40:
  55:src/menu.c    ****   t24->y += 5;
 508              		.loc 1 55 3 view .LVU143
  55:src/menu.c    ****   t24->y += 5;
 509              		.loc 1 55 3 view .LVU144
 510 001c 606B     		ldr	r0, [r4, #52]
 511 001e 1E49     		ldr	r1, .L45+20
 512 0020 0126     		movs	r6, #1
 513 0022 4674     		strb	r6, [r0, #17]
  55:src/menu.c    ****   t24->y += 5;
 514              		.loc 1 55 3 view .LVU145
 515 0024 A847     		blx	r5
 516              	.LVL41:
  55:src/menu.c    ****   t24->y += 5;
 517              		.loc 1 55 3 view .LVU146
 518 0026 606B     		ldr	r0, [r4, #52]
  58:src/menu.c    ****   lcd_print(t24, "a longer alpha display,");
 519              		.loc 1 58 3 is_stmt 0 view .LVU147
 520 0028 1C49     		ldr	r1, .L45+24
  56:src/menu.c    **** #ifdef TOP_ROW
 521              		.loc 1 56 10 view .LVU148
 522 002a C388     		ldrh	r3, [r0, #6]
  55:src/menu.c    ****   t24->y += 5;
 523              		.loc 1 55 3 view .LVU149
 524 002c 0027     		movs	r7, #0
  56:src/menu.c    **** #ifdef TOP_ROW
 525              		.loc 1 56 10 view .LVU150
 526 002e 0533     		adds	r3, r3, #5
 527 0030 C380     		strh	r3, [r0, #6]	@ movhi
  55:src/menu.c    ****   t24->y += 5;
 528              		.loc 1 55 3 view .LVU151
 529 0032 4774     		strb	r7, [r0, #17]
  55:src/menu.c    ****   t24->y += 5;
 530              		.loc 1 55 3 is_stmt 1 view .LVU152
  56:src/menu.c    **** #ifdef TOP_ROW
 531              		.loc 1 56 3 view .LVU153
  58:src/menu.c    ****   lcd_print(t24, "a longer alpha display,");
 532              		.loc 1 58 3 view .LVU154
 533 0034 A847     		blx	r5
 534              	.LVL42:
  59:src/menu.c    ****   lcd_print(t24, "and some annunciators renamed.");
 535              		.loc 1 59 3 view .LVU155
 536 0036 606B     		ldr	r0, [r4, #52]
 537 0038 1949     		ldr	r1, .L45+28
ARM GAS  /tmp/cckAiVOj.s 			page 20


 538 003a A847     		blx	r5
 539              	.LVL43:
  60:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 540              		.loc 1 60 3 view .LVU156
 541 003c 606B     		ldr	r0, [r4, #52]
 542 003e 1949     		ldr	r1, .L45+32
 543 0040 A847     		blx	r5
 544              	.LVL44:
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 545              		.loc 1 69 3 view .LVU157
 546 0042 606B     		ldr	r0, [r4, #52]
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 547              		.loc 1 70 3 is_stmt 0 view .LVU158
 548 0044 1849     		ldr	r1, .L45+36
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 549              		.loc 1 69 10 view .LVU159
 550 0046 C388     		ldrh	r3, [r0, #6]
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 551              		.loc 1 70 3 view .LVU160
 552 0048 4674     		strb	r6, [r0, #17]
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 553              		.loc 1 69 10 view .LVU161
 554 004a 0533     		adds	r3, r3, #5
 555 004c C380     		strh	r3, [r0, #6]	@ movhi
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 556              		.loc 1 70 3 is_stmt 1 view .LVU162
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 557              		.loc 1 70 3 view .LVU163
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 558              		.loc 1 70 3 view .LVU164
 559 004e A847     		blx	r5
 560              	.LVL45:
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 561              		.loc 1 70 3 view .LVU165
 562 0050 606B     		ldr	r0, [r4, #52]
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 563              		.loc 1 70 3 view .LVU166
  71:src/menu.c    **** 
 564              		.loc 1 71 3 view .LVU167
  71:src/menu.c    **** 
 565              		.loc 1 71 3 view .LVU168
 566 0052 1649     		ldr	r1, .L45+40
 567 0054 4674     		strb	r6, [r0, #17]
  71:src/menu.c    **** 
 568              		.loc 1 71 3 view .LVU169
 569 0056 A847     		blx	r5
 570              	.LVL46:
  71:src/menu.c    **** 
 571              		.loc 1 71 3 view .LVU170
 572 0058 606B     		ldr	r0, [r4, #52]
  73:src/menu.c    ****   t24->x = 20;
 573              		.loc 1 73 20 is_stmt 0 view .LVU171
 574 005a 154B     		ldr	r3, .L45+44
  71:src/menu.c    **** 
 575              		.loc 1 71 3 view .LVU172
 576 005c 4774     		strb	r7, [r0, #17]
  71:src/menu.c    **** 
ARM GAS  /tmp/cckAiVOj.s 			page 21


 577              		.loc 1 71 3 is_stmt 1 view .LVU173
  73:src/menu.c    ****   t24->x = 20;
 578              		.loc 1 73 3 view .LVU174
  73:src/menu.c    ****   t24->x = 20;
 579              		.loc 1 73 20 is_stmt 0 view .LVU175
 580 005e 9847     		blx	r3
 581              	.LVL47:
  73:src/menu.c    ****   t24->x = 20;
 582              		.loc 1 73 3 view .LVU176
 583 0060 636B     		ldr	r3, [r4, #52]
  75:src/menu.c    **** 
 584              		.loc 1 75 3 view .LVU177
 585 0062 1449     		ldr	r1, .L45+48
 586 0064 5E74     		strb	r6, [r3, #17]
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 587              		.loc 1 74 10 view .LVU178
 588 0066 1422     		movs	r2, #20
  73:src/menu.c    ****   t24->x = 20;
 589              		.loc 1 73 39 view .LVU179
 590 0068 C0F1EB00 		rsb	r0, r0, #235
  73:src/menu.c    ****   t24->x = 20;
 591              		.loc 1 73 10 view .LVU180
 592 006c D880     		strh	r0, [r3, #6]	@ movhi
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 593              		.loc 1 74 3 is_stmt 1 view .LVU181
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 594              		.loc 1 74 10 is_stmt 0 view .LVU182
 595 006e 9A80     		strh	r2, [r3, #4]	@ movhi
  75:src/menu.c    **** 
 596              		.loc 1 75 3 is_stmt 1 view .LVU183
  75:src/menu.c    **** 
 597              		.loc 1 75 3 view .LVU184
  75:src/menu.c    **** 
 598              		.loc 1 75 3 view .LVU185
 599 0070 1846     		mov	r0, r3
 600 0072 A847     		blx	r5
 601              	.LVL48:
  75:src/menu.c    **** 
 602              		.loc 1 75 3 view .LVU186
 603 0074 626B     		ldr	r2, [r4, #52]
  77:src/menu.c    **** 
 604              		.loc 1 77 3 is_stmt 0 view .LVU187
 605 0076 104B     		ldr	r3, .L45+52
  75:src/menu.c    **** 
 606              		.loc 1 75 3 view .LVU188
 607 0078 5774     		strb	r7, [r2, #17]
  75:src/menu.c    **** 
 608              		.loc 1 75 3 is_stmt 1 view .LVU189
  77:src/menu.c    **** 
 609              		.loc 1 77 3 view .LVU190
 610 007a 9847     		blx	r3
 611              	.LVL49:
  79:src/menu.c    **** }
 612              		.loc 1 79 3 view .LVU191
  80:src/menu.c    **** 
 613              		.loc 1 80 1 is_stmt 0 view .LVU192
 614 007c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/cckAiVOj.s 			page 22


 615              		.cfi_restore 14
 616              		.cfi_restore 8
 617              		.cfi_restore 7
 618              		.cfi_restore 6
 619              		.cfi_restore 5
 620              		.cfi_restore 4
 621              		.cfi_def_cfa_offset 0
  79:src/menu.c    **** }
 622              		.loc 1 79 3 view .LVU193
 623 0080 0E4B     		ldr	r3, .L45+56
 624 0082 1847     		bx	r3	@ indirect register sibling call
 625              	.LVL50:
 626              	.L46:
 627              		.align	2
 628              	.L45:
 629 0084 00200010 		.word	268443648
 630 0088 2D020008 		.word	134218285
 631 008c B1020008 		.word	134218417
 632 0090 65020008 		.word	134218341
 633 0094 6D020008 		.word	134218349
 634 0098 00000000 		.word	.LC2
 635 009c 1C000000 		.word	.LC3
 636 00a0 3C000000 		.word	.LC4
 637 00a4 54000000 		.word	.LC5
 638 00a8 74000000 		.word	.LC6
 639 00ac 98000000 		.word	.LC7
 640 00b0 71020008 		.word	134218353
 641 00b4 BC000000 		.word	.LC8
 642 00b8 31020008 		.word	134218289
 643 00bc 99030008 		.word	134218649
 644              		.cfi_endproc
 645              	.LFE5:
 647              		.section	.text.run_menu_item,"ax",%progbits
 648              		.align	1
 649              		.p2align 2,,3
 650              		.global	run_menu_item
 651              		.syntax unified
 652              		.thumb
 653              		.thumb_func
 654              		.fpu fpv4-sp-d16
 656              	run_menu_item:
 657              	.LVL51:
 658              	.LFB3:
  19:src/menu.c    ****   int ret = 0;
 659              		.loc 1 19 36 is_stmt 1 view -0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 0
 662              		@ frame_needed = 0, uses_anonymous_args = 0
  20:src/menu.c    **** 
 663              		.loc 1 20 3 view .LVU195
  22:src/menu.c    ****     case MI_ABOUT_PGM:
 664              		.loc 1 22 3 view .LVU196
 665 0000 0B28     		cmp	r0, #11
 666 0002 04D1     		bne	.L49
  24:src/menu.c    ****       break;
 667              		.loc 1 24 7 view .LVU197
  19:src/menu.c    ****   int ret = 0;
ARM GAS  /tmp/cckAiVOj.s 			page 23


 668              		.loc 1 19 36 is_stmt 0 view .LVU198
 669 0004 08B5     		push	{r3, lr}
 670              		.cfi_def_cfa_offset 8
 671              		.cfi_offset 3, -8
 672              		.cfi_offset 14, -4
  24:src/menu.c    ****       break;
 673              		.loc 1 24 7 view .LVU199
 674 0006 FFF7FEFF 		bl	disp_about
 675              	.LVL52:
  25:src/menu.c    **** 
 676              		.loc 1 25 7 is_stmt 1 view .LVU200
  20:src/menu.c    **** 
 677              		.loc 1 20 7 is_stmt 0 view .LVU201
 678 000a 0020     		movs	r0, #0
  33:src/menu.c    **** 
 679              		.loc 1 33 1 view .LVU202
 680 000c 08BD     		pop	{r3, pc}
 681              	.LVL53:
 682              	.L49:
 683              		.cfi_def_cfa_offset 0
 684              		.cfi_restore 3
 685              		.cfi_restore 14
  28:src/menu.c    ****       break;
 686              		.loc 1 28 11 view .LVU203
 687 000e 4FF0FF30 		mov	r0, #-1
 688              	.LVL54:
  32:src/menu.c    **** }
 689              		.loc 1 32 3 is_stmt 1 view .LVU204
  33:src/menu.c    **** 
 690              		.loc 1 33 1 is_stmt 0 view .LVU205
 691 0012 7047     		bx	lr
 692              		.cfi_endproc
 693              	.LFE3:
 695              		.section	.text.set_menu,"ax",%progbits
 696              		.align	1
 697              		.p2align 2,,3
 698              		.global	set_menu
 699              		.syntax unified
 700              		.thumb
 701              		.thumb_func
 702              		.fpu fpv4-sp-d16
 704              	set_menu:
 705              	.LVL55:
 706              	.LFB6:
  86:src/menu.c    ****   int m = current_menu;
 707              		.loc 1 86 32 is_stmt 1 view -0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              		@ link register save eliminated.
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 712              		.loc 1 87 3 view .LVU207
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 713              		.loc 1 87 7 is_stmt 0 view .LVU208
 714 0000 094A     		ldr	r2, .L63
 715 0002 1368     		ldr	r3, [r2]
 716              	.LVL56:
ARM GAS  /tmp/cckAiVOj.s 			page 24


  88:src/menu.c    ****     current_menu = default_menu;
 717              		.loc 1 88 3 is_stmt 1 view .LVU209
  88:src/menu.c    ****     current_menu = default_menu;
 718              		.loc 1 88 6 is_stmt 0 view .LVU210
 719 0004 8342     		cmp	r3, r0
 720 0006 0AD0     		beq	.L62
  91:src/menu.c    ****     current_menu = last_menu;
 721              		.loc 1 91 8 is_stmt 1 view .LVU211
  91:src/menu.c    ****     current_menu = last_menu;
 722              		.loc 1 91 11 is_stmt 0 view .LVU212
 723 0008 411C     		adds	r1, r0, #1
  92:src/menu.c    ****   }
 724              		.loc 1 92 5 is_stmt 1 view .LVU213
  92:src/menu.c    ****   }
 725              		.loc 1 92 18 is_stmt 0 view .LVU214
 726 000a 09BF     		itett	eq
 727 000c 0749     		ldreq	r1, .L63+4
  95:src/menu.c    ****   }
 728              		.loc 1 95 18 view .LVU215
 729 000e 1060     		strne	r0, [r2]
  92:src/menu.c    ****   }
 730              		.loc 1 92 18 view .LVU216
 731 0010 0968     		ldreq	r1, [r1]
 732 0012 1160     		streq	r1, [r2]
  95:src/menu.c    ****   }
 733              		.loc 1 95 5 is_stmt 1 view .LVU217
 734              	.L56:
  97:src/menu.c    **** }
 735              		.loc 1 97 3 view .LVU218
  97:src/menu.c    **** }
 736              		.loc 1 97 6 is_stmt 0 view .LVU219
 737 0014 092B     		cmp	r3, #9
  97:src/menu.c    **** }
 738              		.loc 1 97 15 is_stmt 1 view .LVU220
  97:src/menu.c    **** }
 739              		.loc 1 97 25 is_stmt 0 view .LVU221
 740 0016 1CBF     		itt	ne
 741 0018 044A     		ldrne	r2, .L63+4
 742 001a 1360     		strne	r3, [r2]
  98:src/menu.c    **** 
 743              		.loc 1 98 1 view .LVU222
 744 001c 7047     		bx	lr
 745              	.L62:
  89:src/menu.c    ****   }
 746              		.loc 1 89 5 is_stmt 1 view .LVU223
  89:src/menu.c    ****   }
 747              		.loc 1 89 18 is_stmt 0 view .LVU224
 748 001e 0449     		ldr	r1, .L63+8
 749 0020 0968     		ldr	r1, [r1]
 750 0022 1160     		str	r1, [r2]
 751 0024 F6E7     		b	.L56
 752              	.L64:
 753 0026 00BF     		.align	2
 754              	.L63:
 755 0028 00000000 		.word	.LANCHOR1
 756 002c 00000000 		.word	.LANCHOR3
 757 0030 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/cckAiVOj.s 			page 25


 758              		.cfi_endproc
 759              	.LFE6:
 761              		.section	.text.toggle_default_menu,"ax",%progbits
 762              		.align	1
 763              		.p2align 2,,3
 764              		.global	toggle_default_menu
 765              		.syntax unified
 766              		.thumb
 767              		.thumb_func
 768              		.fpu fpv4-sp-d16
 770              	toggle_default_menu:
 771              	.LFB7:
 100:src/menu.c    ****   if (current_menu == default_menu) {
 772              		.loc 1 100 29 is_stmt 1 view -0
 773              		.cfi_startproc
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 776              		@ link register save eliminated.
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 777              		.loc 1 101 3 view .LVU226
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 778              		.loc 1 101 20 is_stmt 0 view .LVU227
 779 0000 0549     		ldr	r1, .L67
 780 0002 064A     		ldr	r2, .L67+4
 781 0004 0868     		ldr	r0, [r1]
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 782              		.loc 1 101 6 view .LVU228
 783 0006 1368     		ldr	r3, [r2]
 784 0008 8342     		cmp	r3, r0
 785 000a 03D1     		bne	.L65
 102:src/menu.c    ****   }
 786              		.loc 1 102 5 is_stmt 1 view .LVU229
 102:src/menu.c    ****   }
 787              		.loc 1 102 38 is_stmt 0 view .LVU230
 788 000c C3F10F03 		rsb	r3, r3, #15
 102:src/menu.c    ****   }
 789              		.loc 1 102 33 view .LVU231
 790 0010 0B60     		str	r3, [r1]
 102:src/menu.c    ****   }
 791              		.loc 1 102 18 view .LVU232
 792 0012 1360     		str	r3, [r2]
 793              	.L65:
 104:src/menu.c    **** 
 794              		.loc 1 104 1 view .LVU233
 795 0014 7047     		bx	lr
 796              	.L68:
 797 0016 00BF     		.align	2
 798              	.L67:
 799 0018 00000000 		.word	.LANCHOR2
 800 001c 00000000 		.word	.LANCHOR1
 801              		.cfi_endproc
 802              	.LFE7:
 804              		.section	.text.get_menu,"ax",%progbits
 805              		.align	1
 806              		.p2align 2,,3
 807              		.global	get_menu
 808              		.syntax unified
ARM GAS  /tmp/cckAiVOj.s 			page 26


 809              		.thumb
 810              		.thumb_func
 811              		.fpu fpv4-sp-d16
 813              	get_menu:
 814              	.LFB8:
 106:src/menu.c    ****   return current_menu;
 815              		.loc 1 106 17 is_stmt 1 view -0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 0
 818              		@ frame_needed = 0, uses_anonymous_args = 0
 819              		@ link register save eliminated.
 107:src/menu.c    **** }
 820              		.loc 1 107 3 view .LVU235
 107:src/menu.c    **** }
 821              		.loc 1 107 10 is_stmt 0 view .LVU236
 822 0000 014B     		ldr	r3, .L70
 108:src/menu.c    **** 
 823              		.loc 1 108 1 view .LVU237
 824 0002 1868     		ldr	r0, [r3]
 825 0004 7047     		bx	lr
 826              	.L71:
 827 0006 00BF     		.align	2
 828              	.L70:
 829 0008 00000000 		.word	.LANCHOR1
 830              		.cfi_endproc
 831              	.LFE8:
 833              		.section	.text.set_last_menu,"ax",%progbits
 834              		.align	1
 835              		.p2align 2,,3
 836              		.global	set_last_menu
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 840              		.fpu fpv4-sp-d16
 842              	set_last_menu:
 843              	.LFB10:
 114:src/menu.c    ****   set_menu (last_menu);
 844              		.loc 1 114 23 is_stmt 1 view -0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 0
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848              		@ link register save eliminated.
 115:src/menu.c    **** }
 849              		.loc 1 115 3 view .LVU239
 850 0000 0649     		ldr	r1, .L80
 851              	.LBB61:
 852              	.LBB62:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 853              		.loc 1 87 7 is_stmt 0 view .LVU240
 854 0002 074A     		ldr	r2, .L80+4
 855              	.LBE62:
 856              	.LBE61:
 115:src/menu.c    **** }
 857              		.loc 1 115 3 view .LVU241
 858 0004 0868     		ldr	r0, [r1]
 859              	.LVL57:
 860              	.LBB64:
ARM GAS  /tmp/cckAiVOj.s 			page 27


 861              	.LBI61:
  86:src/menu.c    ****   int m = current_menu;
 862              		.loc 1 86 6 is_stmt 1 view .LVU242
 863              	.LBB63:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 864              		.loc 1 87 3 view .LVU243
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 865              		.loc 1 87 7 is_stmt 0 view .LVU244
 866 0006 1368     		ldr	r3, [r2]
 867              	.LVL58:
  88:src/menu.c    ****     current_menu = default_menu;
 868              		.loc 1 88 3 is_stmt 1 view .LVU245
  88:src/menu.c    ****     current_menu = default_menu;
 869              		.loc 1 88 6 is_stmt 0 view .LVU246
 870 0008 9842     		cmp	r0, r3
  89:src/menu.c    ****   }
 871              		.loc 1 89 5 is_stmt 1 view .LVU247
  89:src/menu.c    ****   }
 872              		.loc 1 89 18 is_stmt 0 view .LVU248
 873 000a 04BF     		itt	eq
 874 000c 0548     		ldreq	r0, .L80+8
 875              	.LVL59:
  89:src/menu.c    ****   }
 876              		.loc 1 89 18 view .LVU249
 877 000e 0068     		ldreq	r0, [r0]
  91:src/menu.c    ****     current_menu = last_menu;
 878              		.loc 1 91 8 is_stmt 1 view .LVU250
  95:src/menu.c    ****   }
 879              		.loc 1 95 18 is_stmt 0 view .LVU251
 880 0010 1060     		str	r0, [r2]
  97:src/menu.c    **** }
 881              		.loc 1 97 3 is_stmt 1 view .LVU252
  97:src/menu.c    **** }
 882              		.loc 1 97 6 is_stmt 0 view .LVU253
 883 0012 092B     		cmp	r3, #9
  97:src/menu.c    **** }
 884              		.loc 1 97 15 is_stmt 1 view .LVU254
  97:src/menu.c    **** }
 885              		.loc 1 97 25 is_stmt 0 view .LVU255
 886 0014 18BF     		it	ne
 887 0016 0B60     		strne	r3, [r1]
 888              	.LVL60:
  97:src/menu.c    **** }
 889              		.loc 1 97 25 view .LVU256
 890              	.LBE63:
 891              	.LBE64:
 116:src/menu.c    **** 
 892              		.loc 1 116 1 view .LVU257
 893 0018 7047     		bx	lr
 894              	.L81:
 895 001a 00BF     		.align	2
 896              	.L80:
 897 001c 00000000 		.word	.LANCHOR3
 898 0020 00000000 		.word	.LANCHOR1
 899 0024 00000000 		.word	.LANCHOR2
 900              		.cfi_endproc
 901              	.LFE10:
ARM GAS  /tmp/cckAiVOj.s 			page 28


 903              		.section	.text.mdot,"ax",%progbits
 904              		.align	1
 905              		.p2align 2,,3
 906              		.global	mdot
 907              		.syntax unified
 908              		.thumb
 909              		.thumb_func
 910              		.fpu fpv4-sp-d16
 912              	mdot:
 913              	.LVL61:
 914              	.LFB12:
 409:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 915              		.loc 1 409 40 is_stmt 1 view -0
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 0
 918              		@ frame_needed = 0, uses_anonymous_args = 0
 919              		@ link register save eliminated.
 410:src/menu.c    ****   if (on) {
 920              		.loc 1 410 3 view .LVU259
 410:src/menu.c    ****   if (on) {
 921              		.loc 1 410 6 is_stmt 0 view .LVU260
 922 0000 C728     		cmp	r0, #199
 923 0002 1AD8     		bhi	.L86
 924              	.LVL62:
 925              	.LBB67:
 926              	.LBI67:
 409:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 927              		.loc 1 409 6 is_stmt 1 view .LVU261
 928              	.LBB68:
 411:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 929              		.loc 1 411 3 view .LVU262
 930              	.LBE68:
 931              	.LBE67:
 409:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 932              		.loc 1 409 40 is_stmt 0 view .LVU263
 933 0004 10B4     		push	{r4}
 934              		.cfi_def_cfa_offset 4
 935              		.cfi_offset 4, -4
 936              	.LBB71:
 937              	.LBB69:
 411:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 938              		.loc 1 411 6 view .LVU264
 939 0006 63B9     		cbnz	r3, .L89
 940              		.loc 1 415 5 is_stmt 1 view .LVU265
 941              		.loc 1 415 17 is_stmt 0 view .LVU266
 942 0008 0C4B     		ldr	r3, .L90
 943              	.LVL63:
 944              		.loc 1 415 17 view .LVU267
 945 000a 03EB4000 		add	r0, r3, r0, lsl #1
 946              	.LVL64:
 947              		.loc 1 415 25 view .LVU268
 948 000e 0124     		movs	r4, #1
 949              		.loc 1 415 17 view .LVU269
 950 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 951              		.loc 1 415 25 view .LVU270
 952 0012 04FA01F1 		lsl	r1, r4, r1
 953              	.LVL65:
ARM GAS  /tmp/cckAiVOj.s 			page 29


 954              		.loc 1 415 17 view .LVU271
 955 0016 23EA0101 		bic	r1, r3, r1
 956 001a 8154     		strb	r1, [r0, r2]
 957              	.LVL66:
 958              		.loc 1 415 17 view .LVU272
 959              	.LBE69:
 960              	.LBE71:
 416:src/menu.c    ****   }
 417:src/menu.c    **** }
 961              		.loc 1 417 1 view .LVU273
 962 001c 5DF8044B 		ldr	r4, [sp], #4
 963              		.cfi_remember_state
 964              		.cfi_restore 4
 965              		.cfi_def_cfa_offset 0
 966 0020 7047     		bx	lr
 967              	.LVL67:
 968              	.L89:
 969              		.cfi_restore_state
 970              	.LBB72:
 971              	.LBB70:
 412:src/menu.c    ****   }
 972              		.loc 1 412 5 is_stmt 1 view .LVU274
 412:src/menu.c    ****   }
 973              		.loc 1 412 17 is_stmt 0 view .LVU275
 974 0022 064B     		ldr	r3, .L90
 975              	.LVL68:
 412:src/menu.c    ****   }
 976              		.loc 1 412 17 view .LVU276
 977 0024 03EB4000 		add	r0, r3, r0, lsl #1
 978              	.LVL69:
 412:src/menu.c    ****   }
 979              		.loc 1 412 24 view .LVU277
 980 0028 0124     		movs	r4, #1
 412:src/menu.c    ****   }
 981              		.loc 1 412 17 view .LVU278
 982 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 412:src/menu.c    ****   }
 983              		.loc 1 412 24 view .LVU279
 984 002c 04FA01F1 		lsl	r1, r4, r1
 985              	.LVL70:
 412:src/menu.c    ****   }
 986              		.loc 1 412 17 view .LVU280
 987 0030 1943     		orrs	r1, r1, r3
 988 0032 8154     		strb	r1, [r0, r2]
 989              	.LBE70:
 990              	.LBE72:
 991              		.loc 1 417 1 view .LVU281
 992 0034 5DF8044B 		ldr	r4, [sp], #4
 993              		.cfi_restore 4
 994              		.cfi_def_cfa_offset 0
 995 0038 7047     		bx	lr
 996              	.LVL71:
 997              	.L86:
 998              		.loc 1 417 1 view .LVU282
 999 003a 7047     		bx	lr
 1000              	.L91:
 1001              		.align	2
ARM GAS  /tmp/cckAiVOj.s 			page 30


 1002              	.L90:
 1003 003c 00000000 		.word	.LANCHOR0
 1004              		.cfi_endproc
 1005              	.LFE12:
 1007              		.section	.text.display_menu,"ax",%progbits
 1008              		.align	1
 1009              		.p2align 2,,3
 1010              		.global	display_menu
 1011              		.syntax unified
 1012              		.thumb
 1013              		.thumb_func
 1014              		.fpu fpv4-sp-d16
 1016              	display_menu:
 1017              	.LVL72:
 1018              	.LFB13:
 418:src/menu.c    **** 
 419:src/menu.c    **** 
 420:src/menu.c    **** void display_menu (int current_menu) {
 1019              		.loc 1 420 38 is_stmt 1 view -0
 1020              		.cfi_startproc
 1021              		@ args = 0, pretend = 0, frame = 0
 1022              		@ frame_needed = 0, uses_anonymous_args = 0
 421:src/menu.c    ****   int len = 0;
 1023              		.loc 1 421 3 view .LVU284
 422:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1024              		.loc 1 422 3 view .LVU285
 420:src/menu.c    ****   int len = 0;
 1025              		.loc 1 420 38 is_stmt 0 view .LVU286
 1026 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1027              		.cfi_def_cfa_offset 36
 1028              		.cfi_offset 4, -36
 1029              		.cfi_offset 5, -32
 1030              		.cfi_offset 6, -28
 1031              		.cfi_offset 7, -24
 1032              		.cfi_offset 8, -20
 1033              		.cfi_offset 9, -16
 1034              		.cfi_offset 10, -12
 1035              		.cfi_offset 11, -8
 1036              		.cfi_offset 14, -4
 1037 0004 83B0     		sub	sp, sp, #12
 1038              		.cfi_def_cfa_offset 48
 1039              		.loc 1 422 3 view .LVU287
 1040 0006 0024     		movs	r4, #0
 1041 0008 404F     		ldr	r7, .L110
 1042 000a 0094     		str	r4, [sp]
 1043 000c 3423     		movs	r3, #52
 1044 000e 4FF4C872 		mov	r2, #400
 1045 0012 BC21     		movs	r1, #188
 420:src/menu.c    ****   int len = 0;
 1046              		.loc 1 420 38 view .LVU288
 1047 0014 0646     		mov	r6, r0
 1048              		.loc 1 422 3 view .LVU289
 1049 0016 2046     		mov	r0, r4
 1050              	.LVL73:
 1051              		.loc 1 422 3 view .LVU290
 1052 0018 B847     		blx	r7
 1053              	.LVL74:
ARM GAS  /tmp/cckAiVOj.s 			page 31


 423:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1054              		.loc 1 423 3 is_stmt 1 view .LVU291
 1055 001a 3D4D     		ldr	r5, .L110+4
 1056 001c FF23     		movs	r3, #255
 1057 001e 0093     		str	r3, [sp]
 1058 0020 4FF4C872 		mov	r2, #400
 1059 0024 0123     		movs	r3, #1
 1060 0026 BC21     		movs	r1, #188
 1061 0028 2046     		mov	r0, r4
 1062 002a B847     		blx	r7
 1063              	.LVL75:
 424:src/menu.c    ****   //Clear previous menu
 425:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1064              		.loc 1 425 3 view .LVU292
 1065              	.LBB73:
 1066              		.loc 1 425 8 view .LVU293
 1067              		.loc 1 425 21 view .LVU294
 426:src/menu.c    ****     mdots[col][0] = 0;
 1068              		.loc 1 426 19 is_stmt 0 view .LVU295
 1069 002c 2246     		mov	r2, r4
 1070 002e 05F5C871 		add	r1, r5, #400
 1071              	.LBE73:
 423:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1072              		.loc 1 423 3 view .LVU296
 1073 0032 2B46     		mov	r3, r5
 1074              	.LVL76:
 1075              	.L93:
 1076              	.LBB74:
 1077              		.loc 1 426 5 is_stmt 1 discriminator 3 view .LVU297
 1078              		.loc 1 426 19 is_stmt 0 discriminator 3 view .LVU298
 1079 0034 1A70     		strb	r2, [r3]
 427:src/menu.c    ****     mdots[col][1] = 0;
 1080              		.loc 1 427 5 is_stmt 1 discriminator 3 view .LVU299
 1081              		.loc 1 427 19 is_stmt 0 discriminator 3 view .LVU300
 1082 0036 5A70     		strb	r2, [r3, #1]
 425:src/menu.c    ****     mdots[col][0] = 0;
 1083              		.loc 1 425 32 is_stmt 1 discriminator 3 view .LVU301
 425:src/menu.c    ****     mdots[col][0] = 0;
 1084              		.loc 1 425 21 discriminator 3 view .LVU302
 1085 0038 0233     		adds	r3, r3, #2
 425:src/menu.c    ****     mdots[col][0] = 0;
 1086              		.loc 1 425 3 is_stmt 0 discriminator 3 view .LVU303
 1087 003a 9942     		cmp	r1, r3
 1088 003c FAD1     		bne	.L93
 1089 003e 354B     		ldr	r3, .L110+8
 1090 0040 D022     		movs	r2, #208
 1091 0042 02FB0636 		mla	r6, r2, r6, r3
 1092              	.LVL77:
 425:src/menu.c    ****     mdots[col][0] = 0;
 1093              		.loc 1 425 3 discriminator 3 view .LVU304
 1094 0046 2036     		adds	r6, r6, #32
 425:src/menu.c    ****     mdots[col][0] = 0;
 1095              		.loc 1 425 3 view .LVU305
 1096 0048 0024     		movs	r4, #0
 1097              	.LVL78:
 1098              	.L94:
 425:src/menu.c    ****     mdots[col][0] = 0;
ARM GAS  /tmp/cckAiVOj.s 			page 32


 1099              		.loc 1 425 3 view .LVU306
 1100              	.LBE74:
 1101              	.LBB75:
 428:src/menu.c    ****   }
 429:src/menu.c    **** 
 430:src/menu.c    ****   // Draw menu items
 431:src/menu.c    ****   // 
 432:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 433:src/menu.c    ****     /*
 434:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 435:src/menu.c    ****     */
 436:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 437:src/menu.c    ****     // Unshifted first
 438:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small fo
 1102              		.loc 1 438 5 is_stmt 1 view .LVU307
 1103              		.loc 1 438 11 is_stmt 0 view .LVU308
 1104 004a 0021     		movs	r1, #0
 1105 004c 3046     		mov	r0, r6
 1106 004e FFF7FEFF 		bl	pixel_length
 1107              	.LVL79:
 439:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 )
 1108              		.loc 1 439 5 is_stmt 1 view .LVU309
 1109              		.loc 1 439 87 is_stmt 0 view .LVU310
 1110 0052 C0F12000 		rsb	r0, r0, #32
 1111              	.LVL80:
 1112              		.loc 1 439 93 view .LVU311
 1113 0056 00EBD070 		add	r0, r0, r0, lsr #31
 1114              		.loc 1 439 5 view .LVU312
 1115 005a 04EB6001 		add	r1, r4, r0, asr #1
 1116 005e 0022     		movs	r2, #0
 1117 0060 3046     		mov	r0, r6
 1118 0062 06F10807 		add	r7, r6, #8
 1119 0066 FFF7FEFF 		bl	set_menu_label.constprop.0
 1120              	.LVL81:
 440:src/menu.c    ****     // Now shifted ...	
 441:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small font
 1121              		.loc 1 441 5 is_stmt 1 view .LVU313
 1122              		.loc 1 441 11 is_stmt 0 view .LVU314
 1123 006a 0021     		movs	r1, #0
 1124 006c 3846     		mov	r0, r7
 1125 006e FFF7FEFF 		bl	pixel_length
 1126              	.LVL82:
 442:src/menu.c    ****     len = item*32 + (32-len)/2;
 1127              		.loc 1 442 5 is_stmt 1 view .LVU315
 1128              		.loc 1 442 24 is_stmt 0 view .LVU316
 1129 0072 C0F12000 		rsb	r0, r0, #32
 1130              	.LVL83:
 1131              		.loc 1 442 29 view .LVU317
 1132 0076 00EBD070 		add	r0, r0, r0, lsr #31
 1133              	.LVL84:
 443:src/menu.c    ****     if (len<0) len = 0;
 1134              		.loc 1 443 5 is_stmt 1 view .LVU318
 442:src/menu.c    ****     len = item*32 + (32-len)/2;
 1135              		.loc 1 442 9 is_stmt 0 view .LVU319
 1136 007a 04EB6001 		add	r1, r4, r0, asr #1
 1137              	.LVL85:
 442:src/menu.c    ****     len = item*32 + (32-len)/2;
ARM GAS  /tmp/cckAiVOj.s 			page 33


 1138              		.loc 1 442 9 view .LVU320
 1139 007e C729     		cmp	r1, #199
 1140 0080 A8BF     		it	ge
 1141 0082 C721     		movge	r1, #199
 1142              	.LVL86:
 444:src/menu.c    ****     if (len>199) len = 199;
 445:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 1143              		.loc 1 445 5 is_stmt 1 view .LVU321
 1144 0084 21EAE171 		bic	r1, r1, r1, asr #31
 1145              	.LVL87:
 1146              		.loc 1 445 5 is_stmt 0 view .LVU322
 1147 0088 3846     		mov	r0, r7
 1148 008a 2034     		adds	r4, r4, #32
 1149 008c 0122     		movs	r2, #1
 1150 008e FFF7FEFF 		bl	set_menu_label.constprop.0
 1151              	.LVL88:
 432:src/menu.c    ****     /*
 1152              		.loc 1 432 32 is_stmt 1 view .LVU323
 432:src/menu.c    ****     /*
 1153              		.loc 1 432 22 view .LVU324
 432:src/menu.c    ****     /*
 1154              		.loc 1 432 3 is_stmt 0 view .LVU325
 1155 0092 C02C     		cmp	r4, #192
 1156 0094 06F12006 		add	r6, r6, #32
 1157 0098 D7D1     		bne	.L94
 1158 009a 1F4E     		ldr	r6, .L110+12
 1159              	.LBE75:
 1160              	.LBB76:
 1161              	.LBB77:
 446:src/menu.c    ****   }
 447:src/menu.c    **** 
 448:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 449:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 450:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 451:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 452:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1162              		.loc 1 452 2 view .LVU326
 1163 009c DFF86C90 		ldr	r9, .L110
 1164 00a0 C5F1040A 		rsb	r10, r5, #4
 1165 00a4 06F5C47B 		add	fp, r6, #392
 1166              	.LBE77:
 1167              	.LBE76:
 1168              	.LBB79:
 432:src/menu.c    ****     /*
 1169              		.loc 1 432 3 view .LVU327
 1170 00a8 771E     		subs	r7, r6, #1
 1171              	.LBE79:
 1172              	.LBB80:
 1173              	.LBB78:
 1174              		.loc 1 452 2 view .LVU328
 1175 00aa 4FF0FF08 		mov	r8, #255
 1176              	.L95:
 1177              	.LVL89:
 449:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1178              		.loc 1 449 23 is_stmt 1 view .LVU329
 1179 00ae 0AEB0705 		add	r5, r10, r7
 449:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
ARM GAS  /tmp/cckAiVOj.s 			page 34


 1180              		.loc 1 449 14 is_stmt 0 view .LVU330
 1181 00b2 0024     		movs	r4, #0
 1182              	.LVL90:
 1183              	.L98:
 450:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1184              		.loc 1 450 7 is_stmt 1 view .LVU331
 1185              		.loc 1 452 2 view .LVU332
 450:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1186              		.loc 1 450 22 is_stmt 0 view .LVU333
 1187 00b4 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 450:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1188              		.loc 1 450 40 view .LVU334
 1189 00b8 2241     		asrs	r2, r2, r4
 1190              		.loc 1 452 2 view .LVU335
 1191 00ba A4EB8401 		sub	r1, r4, r4, lsl #2
 1192 00be 0323     		movs	r3, #3
 450:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1193              		.loc 1 450 10 view .LVU336
 1194 00c0 12F0010F 		tst	r2, #1
 1195              		.loc 1 452 2 view .LVU337
 1196 00c4 01F1E901 		add	r1, r1, #233
 1197 00c8 1A46     		mov	r2, r3
 1198 00ca 2846     		mov	r0, r5
 450:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1199              		.loc 1 450 10 view .LVU338
 1200 00cc 02D0     		beq	.L96
 1201              		.loc 1 452 2 view .LVU339
 1202 00ce CDF80080 		str	r8, [sp]
 1203 00d2 C847     		blx	r9
 1204              	.LVL91:
 1205              	.L96:
 453:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1206              		.loc 1 453 7 is_stmt 1 view .LVU340
 454:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 455:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1207              		.loc 1 455 2 view .LVU341
 453:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1208              		.loc 1 453 22 is_stmt 0 view .LVU342
 1209 00d4 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 453:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1210              		.loc 1 453 40 view .LVU343
 1211 00d6 2241     		asrs	r2, r2, r4
 1212              		.loc 1 455 2 view .LVU344
 1213 00d8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1214 00dc 0323     		movs	r3, #3
 453:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1215              		.loc 1 453 10 view .LVU345
 1216 00de 12F0010F 		tst	r2, #1
 1217              		.loc 1 455 2 view .LVU346
 1218 00e2 01F1D001 		add	r1, r1, #208
 1219 00e6 1A46     		mov	r2, r3
 1220 00e8 04F10104 		add	r4, r4, #1
 1221              	.LVL92:
 1222              		.loc 1 455 2 view .LVU347
 1223 00ec 2846     		mov	r0, r5
 453:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1224              		.loc 1 453 10 view .LVU348
ARM GAS  /tmp/cckAiVOj.s 			page 35


 1225 00ee 02D0     		beq	.L97
 1226              		.loc 1 455 2 view .LVU349
 1227 00f0 CDF80080 		str	r8, [sp]
 1228 00f4 C847     		blx	r9
 1229              	.LVL93:
 1230              	.L97:
 449:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1231              		.loc 1 449 32 is_stmt 1 discriminator 2 view .LVU350
 449:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1232              		.loc 1 449 23 discriminator 2 view .LVU351
 449:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1233              		.loc 1 449 5 is_stmt 0 discriminator 2 view .LVU352
 1234 00f6 062C     		cmp	r4, #6
 1235 00f8 DCD1     		bne	.L98
 1236              	.LBE78:
 448:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1237              		.loc 1 448 32 is_stmt 1 discriminator 2 view .LVU353
 448:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1238              		.loc 1 448 21 discriminator 2 view .LVU354
 1239 00fa 0236     		adds	r6, r6, #2
 448:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1240              		.loc 1 448 3 is_stmt 0 discriminator 2 view .LVU355
 1241 00fc B345     		cmp	fp, r6
 1242 00fe 07F10207 		add	r7, r7, #2
 1243 0102 D4D1     		bne	.L95
 1244              	.LBE80:
 456:src/menu.c    ****     }
 457:src/menu.c    ****   }
 458:src/menu.c    **** }
 1245              		.loc 1 458 1 view .LVU356
 1246 0104 03B0     		add	sp, sp, #12
 1247              		.cfi_def_cfa_offset 36
 1248              		@ sp needed
 1249 0106 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1250              	.LVL94:
 1251              	.L111:
 1252              		.loc 1 458 1 view .LVU357
 1253 010a 00BF     		.align	2
 1254              	.L110:
 1255 010c 3D020008 		.word	134218301
 1256 0110 00000000 		.word	.LANCHOR0
 1257 0114 00000000 		.word	.LANCHOR4
 1258 0118 01000000 		.word	.LANCHOR0+1
 1259              		.cfi_endproc
 1260              	.LFE13:
 1262              		.section	.text.display_current_menu,"ax",%progbits
 1263              		.align	1
 1264              		.p2align 2,,3
 1265              		.global	display_current_menu
 1266              		.syntax unified
 1267              		.thumb
 1268              		.thumb_func
 1269              		.fpu fpv4-sp-d16
 1271              	display_current_menu:
 1272              	.LFB9:
 110:src/menu.c    ****   display_menu (current_menu);
 1273              		.loc 1 110 30 is_stmt 1 view -0
ARM GAS  /tmp/cckAiVOj.s 			page 36


 1274              		.cfi_startproc
 1275              		@ args = 0, pretend = 0, frame = 0
 1276              		@ frame_needed = 0, uses_anonymous_args = 0
 1277              		@ link register save eliminated.
 111:src/menu.c    **** }
 1278              		.loc 1 111 3 view .LVU359
 1279 0000 014B     		ldr	r3, .L113
 1280 0002 1868     		ldr	r0, [r3]
 1281 0004 FFF7FEBF 		b	display_menu
 1282              	.LVL95:
 1283              	.L114:
 1284              		.align	2
 1285              	.L113:
 1286 0008 00000000 		.word	.LANCHOR1
 1287              		.cfi_endproc
 1288              	.LFE9:
 1290              		.section	.text.all_menu_dots,"ax",%progbits
 1291              		.align	1
 1292              		.p2align 2,,3
 1293              		.global	all_menu_dots
 1294              		.syntax unified
 1295              		.thumb
 1296              		.thumb_func
 1297              		.fpu fpv4-sp-d16
 1299              	all_menu_dots:
 1300              	.LFB14:
 459:src/menu.c    **** 
 460:src/menu.c    **** void all_menu_dots () {
 1301              		.loc 1 460 23 view -0
 1302              		.cfi_startproc
 1303              		@ args = 0, pretend = 0, frame = 0
 1304              		@ frame_needed = 0, uses_anonymous_args = 0
 461:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1305              		.loc 1 461 3 view .LVU361
 1306              	.LBB81:
 1307              		.loc 1 461 8 view .LVU362
 1308              	.LVL96:
 1309              		.loc 1 461 21 view .LVU363
 1310              	.LBE81:
 460:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1311              		.loc 1 460 23 is_stmt 0 view .LVU364
 1312 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1313              		.cfi_def_cfa_offset 20
 1314              		.cfi_offset 4, -20
 1315              		.cfi_offset 5, -16
 1316              		.cfi_offset 6, -12
 1317              		.cfi_offset 7, -8
 1318              		.cfi_offset 14, -4
 1319              	.LBB85:
 1320              	.LBB82:
 462:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 463:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1321              		.loc 1 463 2 view .LVU365
 1322 0002 0D4E     		ldr	r6, .L121
 1323              	.LBE82:
 1324              	.LBE85:
 460:src/menu.c    ****   for (int col = 0; col < 200; col++) {
ARM GAS  /tmp/cckAiVOj.s 			page 37


 1325              		.loc 1 460 23 view .LVU366
 1326 0004 83B0     		sub	sp, sp, #12
 1327              		.cfi_def_cfa_offset 32
 460:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1328              		.loc 1 460 23 view .LVU367
 1329 0006 0025     		movs	r5, #0
 1330              	.LBB86:
 1331              	.LBB83:
 1332              		.loc 1 463 2 view .LVU368
 1333 0008 FF27     		movs	r7, #255
 1334              	.LVL97:
 1335              	.L116:
 462:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1336              		.loc 1 462 23 is_stmt 1 view .LVU369
 1337              	.LBE83:
 1338              	.LBE86:
 460:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1339              		.loc 1 460 23 is_stmt 0 view .LVU370
 1340 000a E924     		movs	r4, #233
 1341              	.LVL98:
 1342              	.L117:
 1343              	.LBB87:
 1344              	.LBB84:
 1345              		.loc 1 463 2 is_stmt 1 discriminator 3 view .LVU371
 1346 000c 0323     		movs	r3, #3
 1347 000e 1A46     		mov	r2, r3
 1348 0010 2146     		mov	r1, r4
 1349 0012 2846     		mov	r0, r5
 1350 0014 0097     		str	r7, [sp]
 1351 0016 B047     		blx	r6
 1352              	.LVL99:
 464:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1353              		.loc 1 464 2 discriminator 3 view .LVU372
 1354 0018 0323     		movs	r3, #3
 1355 001a A4F11901 		sub	r1, r4, #25
 1356 001e 0097     		str	r7, [sp]
 1357 0020 1A46     		mov	r2, r3
 1358 0022 2846     		mov	r0, r5
 1359 0024 033C     		subs	r4, r4, #3
 1360 0026 B047     		blx	r6
 1361              	.LVL100:
 462:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1362              		.loc 1 462 32 discriminator 3 view .LVU373
 462:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1363              		.loc 1 462 23 discriminator 3 view .LVU374
 462:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1364              		.loc 1 462 5 is_stmt 0 discriminator 3 view .LVU375
 1365 0028 D72C     		cmp	r4, #215
 1366 002a EFD1     		bne	.L117
 1367              	.LBE84:
 461:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1368              		.loc 1 461 32 is_stmt 1 discriminator 2 view .LVU376
 461:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1369              		.loc 1 461 21 discriminator 2 view .LVU377
 1370 002c 0235     		adds	r5, r5, #2
 461:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1371              		.loc 1 461 3 is_stmt 0 discriminator 2 view .LVU378
ARM GAS  /tmp/cckAiVOj.s 			page 38


 1372 002e B5F5C87F 		cmp	r5, #400
 1373 0032 EAD1     		bne	.L116
 1374              	.LBE87:
 465:src/menu.c    ****     }
 466:src/menu.c    ****   }
 467:src/menu.c    **** }  
 1375              		.loc 1 467 1 view .LVU379
 1376 0034 03B0     		add	sp, sp, #12
 1377              		.cfi_def_cfa_offset 20
 1378              		@ sp needed
 1379 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1380              	.L122:
 1381              		.align	2
 1382              	.L121:
 1383 0038 3D020008 		.word	134218301
 1384              		.cfi_endproc
 1385              	.LFE14:
 1387              		.section	.text.shutdown,"ax",%progbits
 1388              		.align	1
 1389              		.p2align 2,,3
 1390              		.global	shutdown
 1391              		.syntax unified
 1392              		.thumb
 1393              		.thumb_func
 1394              		.fpu fpv4-sp-d16
 1396              	shutdown:
 1397              	.LFB16:
 1398              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
ARM GAS  /tmp/cckAiVOj.s 			page 39


  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  46:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  47:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  48:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  49:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  50:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  51:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  52:src/console.c **** 
  53:src/console.c **** static struct _ndmap remap (const int c) {
  54:src/console.c **** 
  55:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  56:src/console.c **** 
  57:src/console.c **** #include "keytran.c"
  58:src/console.c **** 
  59:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  60:src/console.c **** 
  61:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  62:src/console.c **** 
  63:src/console.c ****   if (c == 44 ) {
  64:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  65:src/console.c ****     return sshot;
  66:src/console.c ****   }
  67:src/console.c ****   
  68:src/console.c ****   if ( get_alpha_state() ) {
  69:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  70:src/console.c ****       switch (cur_shift()) { 
  71:src/console.c ****       case SHIFT_N:
  72:src/console.c **** 	return mapping_none[c]; // N -> F
  73:src/console.c **** 	break;
  74:src/console.c ****       case SHIFT_F:
  75:src/console.c **** 	return mapping_fshift[c]; // F -> G
  76:src/console.c **** 	break;
  77:src/console.c ****       case SHIFT_G:
  78:src/console.c **** 	return h_shift; // G -> H
  79:src/console.c **** 	break;
  80:src/console.c ****       case SHIFT_H:
  81:src/console.c **** 	return h_shift; // H -> N
  82:src/console.c ****       default:
  83:src/console.c **** 	return no_change;
  84:src/console.c ****       }
  85:src/console.c ****     }
  86:src/console.c ****     return mapping_alpha [c];
ARM GAS  /tmp/cckAiVOj.s 			page 40


  87:src/console.c ****   }
  88:src/console.c **** 
  89:src/console.c ****   if (Running | Pause) {
  90:src/console.c ****     return mapping_running[c];
  91:src/console.c ****   }
  92:src/console.c ****   
  93:src/console.c ****   switch (c) {
  94:src/console.c ****   case KEY_F1:
  95:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
  96:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
  97:src/console.c ****   case KEY_F2:
  98:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
  99:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 100:src/console.c ****   case KEY_F3:
 101:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 102:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 103:src/console.c ****   case KEY_F4:
 104:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 105:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 106:src/console.c ****   case KEY_F5:
 107:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 109:src/console.c ****   case KEY_F6:
 110:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 112:src/console.c ****   }
 113:src/console.c ****   
 114:src/console.c ****   switch (cur_shift()) {
 115:src/console.c ****   case SHIFT_N:    
 116:src/console.c ****     return mapping_none[c];
 117:src/console.c ****     break;
 118:src/console.c ****   case SHIFT_F:
 119:src/console.c ****     return mapping_fshift[c];
 120:src/console.c ****     break;
 121:src/console.c ****   case SHIFT_G:
 122:src/console.c ****     return mapping_gshift[c];
 123:src/console.c ****     break;
 124:src/console.c ****   default:
 125:src/console.c ****     return no_change;
 126:src/console.c ****   }
 127:src/console.c **** }
 128:src/console.c **** 
 129:src/console.c **** #endif
 130:src/console.c **** 
 131:src/console.c **** void shutdown( void )
 132:src/console.c **** {
 1399              		.loc 2 132 1 is_stmt 1 view -0
 1400              		.cfi_startproc
 1401              		@ args = 0, pretend = 0, frame = 0
 1402              		@ frame_needed = 0, uses_anonymous_args = 0
 1403              		@ link register save eliminated.
 133:src/console.c **** #ifndef DM42
 134:src/console.c ****   checksum_all();
 135:src/console.c ****   setuptty( 1 );
 136:src/console.c ****   save_statefile( NULL );
 137:src/console.c ****   exit( 0 );
 138:src/console.c **** #else
ARM GAS  /tmp/cckAiVOj.s 			page 41


 139:src/console.c ****   //  save_ram_file(0);
 140:src/console.c ****   SET_ST(STAT_PGM_END);
 1404              		.loc 2 140 3 view .LVU381
 1405 0000 024A     		ldr	r2, .L124
 1406 0002 1368     		ldr	r3, [r2]
 1407 0004 43F40073 		orr	r3, r3, #512
 1408 0008 1360     		str	r3, [r2]
 141:src/console.c **** #endif
 142:src/console.c **** }
 1409              		.loc 2 142 1 is_stmt 0 view .LVU382
 1410 000a 7047     		bx	lr
 1411              	.L125:
 1412              		.align	2
 1413              	.L124:
 1414 000c 00200010 		.word	268443648
 1415              		.cfi_endproc
 1416              	.LFE16:
 1418              		.section	.text.is_key_pressed,"ax",%progbits
 1419              		.align	1
 1420              		.p2align 2,,3
 1421              		.global	is_key_pressed
 1422              		.syntax unified
 1423              		.thumb
 1424              		.thumb_func
 1425              		.fpu fpv4-sp-d16
 1427              	is_key_pressed:
 1428              	.LFB17:
 143:src/console.c **** 
 144:src/console.c **** 
 145:src/console.c **** /*
 146:src/console.c ****  *  Dummies
 147:src/console.c ****  */
 148:src/console.c **** int is_key_pressed(void) 
 149:src/console.c **** {
 1429              		.loc 2 149 1 is_stmt 1 view -0
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 0
 1432              		@ frame_needed = 0, uses_anonymous_args = 0
 150:src/console.c **** #ifdef DM42
 151:src/console.c ****   return !key_empty();
 1433              		.loc 2 151 3 view .LVU384
 149:src/console.c **** #ifdef DM42
 1434              		.loc 2 149 1 is_stmt 0 view .LVU385
 1435 0000 08B5     		push	{r3, lr}
 1436              		.cfi_def_cfa_offset 8
 1437              		.cfi_offset 3, -8
 1438              		.cfi_offset 14, -4
 1439              		.loc 2 151 11 view .LVU386
 1440 0002 034B     		ldr	r3, .L128
 1441 0004 9847     		blx	r3
 1442              	.LVL101:
 152:src/console.c **** #else
 153:src/console.c ****   return 0;
 154:src/console.c **** #endif
 155:src/console.c **** }
 1443              		.loc 2 155 1 view .LVU387
 1444 0006 B0FA80F0 		clz	r0, r0
ARM GAS  /tmp/cckAiVOj.s 			page 42


 1445 000a 4009     		lsrs	r0, r0, #5
 1446 000c 08BD     		pop	{r3, pc}
 1447              	.L129:
 1448 000e 00BF     		.align	2
 1449              	.L128:
 1450 0010 7D030008 		.word	134218621
 1451              		.cfi_endproc
 1452              	.LFE17:
 1454              		.section	.text.get_key,"ax",%progbits
 1455              		.align	1
 1456              		.p2align 2,,3
 1457              		.global	get_key
 1458              		.syntax unified
 1459              		.thumb
 1460              		.thumb_func
 1461              		.fpu fpv4-sp-d16
 1463              	get_key:
 1464              	.LFB18:
 156:src/console.c **** 
 157:src/console.c **** int get_key(void)
 158:src/console.c **** {
 1465              		.loc 2 158 1 is_stmt 1 view -0
 1466              		.cfi_startproc
 1467              		@ args = 0, pretend = 0, frame = 0
 1468              		@ frame_needed = 0, uses_anonymous_args = 0
 1469              		@ link register save eliminated.
 159:src/console.c ****   #ifdef DM42
 160:src/console.c ****   return key_pop();
 1470              		.loc 2 160 3 view .LVU389
 1471              		.loc 2 160 10 is_stmt 0 view .LVU390
 1472 0000 004B     		ldr	r3, .L131
 1473 0002 1847     		bx	r3
 1474              	.LVL102:
 1475              	.L132:
 1476              		.align	2
 1477              	.L131:
 1478 0004 89030008 		.word	134218633
 1479              		.cfi_endproc
 1480              	.LFE18:
 1482              		.section	.text.put_key,"ax",%progbits
 1483              		.align	1
 1484              		.p2align 2,,3
 1485              		.global	put_key
 1486              		.syntax unified
 1487              		.thumb
 1488              		.thumb_func
 1489              		.fpu fpv4-sp-d16
 1491              	put_key:
 1492              	.LVL103:
 1493              	.LFB19:
 161:src/console.c ****   #else
 162:src/console.c ****   return 0;
 163:src/console.c ****   #endif
 164:src/console.c **** }
 165:src/console.c **** 
 166:src/console.c **** /*
 167:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
ARM GAS  /tmp/cckAiVOj.s 			page 43


 168:src/console.c ****  * 
 169:src/console.c ****  */
 170:src/console.c **** int put_key( int k )
 171:src/console.c **** {
 1494              		.loc 2 171 1 is_stmt 1 view -0
 1495              		.cfi_startproc
 1496              		@ args = 0, pretend = 0, frame = 48
 1497              		@ frame_needed = 0, uses_anonymous_args = 0
 1498              		@ link register save eliminated.
 172:src/console.c ****   #ifdef DM42
 173:src/console.c ****   const char wp34s_to_DM42[] = {
 1499              		.loc 2 173 3 view .LVU392
 171:src/console.c ****   #ifdef DM42
 1500              		.loc 2 171 1 is_stmt 0 view .LVU393
 1501 0000 70B4     		push	{r4, r5, r6}
 1502              		.cfi_def_cfa_offset 12
 1503              		.cfi_offset 4, -12
 1504              		.cfi_offset 5, -8
 1505              		.cfi_offset 6, -4
 1506              		.loc 2 173 14 view .LVU394
 1507 0002 0E4D     		ldr	r5, .L136
 171:src/console.c ****   #ifdef DM42
 1508              		.loc 2 171 1 view .LVU395
 1509 0004 0646     		mov	r6, r0
 1510              		.loc 2 173 14 view .LVU396
 1511 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1512              	.LVL104:
 171:src/console.c ****   #ifdef DM42
 1513              		.loc 2 171 1 view .LVU397
 1514 0008 8DB0     		sub	sp, sp, #52
 1515              		.cfi_def_cfa_offset 64
 1516              		.loc 2 173 14 view .LVU398
 1517 000a 01AC     		add	r4, sp, #4
 1518 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1519 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1520 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1521 0012 95E80700 		ldm	r5, {r0, r1, r2}
 1522 0016 03C4     		stmia	r4!, {r0, r1}
 174:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 175:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 176:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 177:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 178:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 179:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 180:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 181:src/console.c ****   
 182:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 1523              		.loc 2 182 6 view .LVU399
 1524 0018 282E     		cmp	r6, #40
 173:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 1525              		.loc 2 173 14 view .LVU400
 1526 001a 2270     		strb	r2, [r4]
 1527              		.loc 2 182 3 is_stmt 1 view .LVU401
 1528              		.loc 2 182 6 is_stmt 0 view .LVU402
 1529 001c 08D8     		bhi	.L134
 183:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 1530              		.loc 2 183 5 is_stmt 1 view .LVU403
ARM GAS  /tmp/cckAiVOj.s 			page 44


 1531              		.loc 2 183 36 is_stmt 0 view .LVU404
 1532 001e 0CAB     		add	r3, sp, #48
 1533 0020 3046     		mov	r0, r6
 1534 0022 1844     		add	r0, r0, r3
 1535              		.loc 2 183 12 view .LVU405
 1536 0024 064B     		ldr	r3, .L136+4
 1537 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 184:src/console.c ****   }
 185:src/console.c ****   else {
 186:src/console.c ****     return -1;
 187:src/console.c ****   }
 188:src/console.c ****   #else
 189:src/console.c ****   return k;
 190:src/console.c ****   #endif
 191:src/console.c **** }
 1538              		.loc 2 191 1 view .LVU406
 1539 002a 0DB0     		add	sp, sp, #52
 1540              		.cfi_remember_state
 1541              		.cfi_def_cfa_offset 12
 1542              		@ sp needed
 1543 002c 70BC     		pop	{r4, r5, r6}
 1544              		.cfi_restore 6
 1545              		.cfi_restore 5
 1546              		.cfi_restore 4
 1547              		.cfi_def_cfa_offset 0
 1548              	.LVL105:
 183:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 1549              		.loc 2 183 12 view .LVU407
 1550 002e 1847     		bx	r3
 1551              	.LVL106:
 1552              	.L134:
 1553              		.cfi_restore_state
 1554              		.loc 2 191 1 view .LVU408
 1555 0030 4FF0FF30 		mov	r0, #-1
 1556 0034 0DB0     		add	sp, sp, #52
 1557              		.cfi_def_cfa_offset 12
 1558              		@ sp needed
 1559 0036 70BC     		pop	{r4, r5, r6}
 1560              		.cfi_restore 6
 1561              		.cfi_restore 5
 1562              		.cfi_restore 4
 1563              		.cfi_def_cfa_offset 0
 1564              	.LVL107:
 1565              		.loc 2 191 1 view .LVU409
 1566 0038 7047     		bx	lr
 1567              	.L137:
 1568 003a 00BF     		.align	2
 1569              	.L136:
 1570 003c 00000000 		.word	.LANCHOR5
 1571 0040 81030008 		.word	134218625
 1572              		.cfi_endproc
 1573              	.LFE19:
 1575              		.section	.text.shift_down,"ax",%progbits
 1576              		.align	1
 1577              		.p2align 2,,3
 1578              		.global	shift_down
 1579              		.syntax unified
ARM GAS  /tmp/cckAiVOj.s 			page 45


 1580              		.thumb
 1581              		.thumb_func
 1582              		.fpu fpv4-sp-d16
 1584              	shift_down:
 1585              	.LFB20:
 192:src/console.c **** 
 193:src/console.c **** enum shifts shift_down(void)
 194:src/console.c **** {
 1586              		.loc 2 194 1 is_stmt 1 view -0
 1587              		.cfi_startproc
 1588              		@ args = 0, pretend = 0, frame = 0
 1589              		@ frame_needed = 0, uses_anonymous_args = 0
 1590              		@ link register save eliminated.
 195:src/console.c **** 	return SHIFT_N;
 1591              		.loc 2 195 2 view .LVU411
 196:src/console.c **** }
 1592              		.loc 2 196 1 is_stmt 0 view .LVU412
 1593 0000 0020     		movs	r0, #0
 1594 0002 7047     		bx	lr
 1595              		.cfi_endproc
 1596              	.LFE20:
 1598              		.section	.text.start_key_timer,"ax",%progbits
 1599              		.align	1
 1600              		.p2align 2,,3
 1601              		.global	start_key_timer
 1602              		.syntax unified
 1603              		.thumb
 1604              		.thumb_func
 1605              		.fpu fpv4-sp-d16
 1607              	start_key_timer:
 1608              	.LFB21:
 197:src/console.c **** 
 198:src/console.c **** #ifndef DM42   // No serial operations for DM42
 199:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 200:src/console.c **** /*
 201:src/console.c ****  *  Open a COM port for transmission
 202:src/console.c ****  */
 203:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 204:src/console.c **** {
 205:src/console.c **** 	return 0;
 206:src/console.c **** }
 207:src/console.c **** 
 208:src/console.c **** 
 209:src/console.c **** /*
 210:src/console.c ****  *  Close the COM port after transmission is complete
 211:src/console.c ****  */
 212:src/console.c **** extern void close_port( void )
 213:src/console.c **** {
 214:src/console.c **** }
 215:src/console.c **** 
 216:src/console.c **** 
 217:src/console.c **** /*
 218:src/console.c ****  *  Output a single byte to the serial
 219:src/console.c ****  */
 220:src/console.c **** void put_byte( unsigned char byte )
 221:src/console.c **** {
 222:src/console.c **** 	report_err(ERR_PROG_BAD);
ARM GAS  /tmp/cckAiVOj.s 			page 46


 223:src/console.c **** }
 224:src/console.c **** 
 225:src/console.c **** 
 226:src/console.c **** /*
 227:src/console.c ****  *  Force buffer flush
 228:src/console.c ****  */
 229:src/console.c **** void flush_comm( void )
 230:src/console.c **** {
 231:src/console.c **** }
 232:src/console.c **** 
 233:src/console.c **** #endif
 234:src/console.c **** #endif
 235:src/console.c **** 
 236:src/console.c **** 
 237:src/console.c **** /*
 238:src/console.c ****  *  Main loop
 239:src/console.c ****  */
 240:src/console.c **** #ifdef DM42
 241:src/console.c **** void start_key_timer (void);
 242:src/console.c **** long int keyticks (void);
 243:src/console.c **** void moveto (int line, int x);
 244:src/console.c **** 
 245:src/console.c **** static long int start_ticks;
 246:src/console.c **** 
 247:src/console.c **** void start_key_timer() {
 1609              		.loc 2 247 24 is_stmt 1 view -0
 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 0
 1612              		@ frame_needed = 0, uses_anonymous_args = 0
 248:src/console.c ****     start_ticks = get_rtc_ticks();
 1613              		.loc 2 248 5 view .LVU414
 247:src/console.c ****     start_ticks = get_rtc_ticks();
 1614              		.loc 2 247 24 is_stmt 0 view .LVU415
 1615 0000 08B5     		push	{r3, lr}
 1616              		.cfi_def_cfa_offset 8
 1617              		.cfi_offset 3, -8
 1618              		.cfi_offset 14, -4
 1619              		.loc 2 248 19 view .LVU416
 1620 0002 024B     		ldr	r3, .L141
 1621 0004 9847     		blx	r3
 1622              	.LVL108:
 1623              		.loc 2 248 17 view .LVU417
 1624 0006 024B     		ldr	r3, .L141+4
 1625 0008 1860     		str	r0, [r3]
 249:src/console.c **** }
 1626              		.loc 2 249 1 view .LVU418
 1627 000a 08BD     		pop	{r3, pc}
 1628              	.L142:
 1629              		.align	2
 1630              	.L141:
 1631 000c B9040008 		.word	134218937
 1632 0010 00000000 		.word	.LANCHOR6
 1633              		.cfi_endproc
 1634              	.LFE21:
 1636              		.section	.text.keyticks,"ax",%progbits
 1637              		.align	1
 1638              		.p2align 2,,3
ARM GAS  /tmp/cckAiVOj.s 			page 47


 1639              		.global	keyticks
 1640              		.syntax unified
 1641              		.thumb
 1642              		.thumb_func
 1643              		.fpu fpv4-sp-d16
 1645              	keyticks:
 1646              	.LFB22:
 250:src/console.c **** 
 251:src/console.c **** long int keyticks () {
 1647              		.loc 2 251 22 is_stmt 1 view -0
 1648              		.cfi_startproc
 1649              		@ args = 0, pretend = 0, frame = 0
 1650              		@ frame_needed = 0, uses_anonymous_args = 0
 252:src/console.c ****   long int i;
 1651              		.loc 2 252 3 view .LVU420
 253:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1652              		.loc 2 253 3 view .LVU421
 251:src/console.c ****   long int i;
 1653              		.loc 2 251 22 is_stmt 0 view .LVU422
 1654 0000 08B5     		push	{r3, lr}
 1655              		.cfi_def_cfa_offset 8
 1656              		.cfi_offset 3, -8
 1657              		.cfi_offset 14, -4
 1658              		.loc 2 253 8 view .LVU423
 1659 0002 054B     		ldr	r3, .L145
 1660 0004 9847     		blx	r3
 1661              	.LVL109:
 254:src/console.c ****   return i >> 8;
 1662              		.loc 2 254 3 is_stmt 1 view .LVU424
 253:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1663              		.loc 2 253 24 is_stmt 0 view .LVU425
 1664 0006 054B     		ldr	r3, .L145+4
 1665 0008 1B68     		ldr	r3, [r3]
 1666 000a C01A     		subs	r0, r0, r3
 1667              	.LVL110:
 253:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1668              		.loc 2 253 38 view .LVU426
 1669 000c 00EB8000 		add	r0, r0, r0, lsl #2
 255:src/console.c **** }
 1670              		.loc 2 255 1 view .LVU427
 1671 0010 40F3D710 		sbfx	r0, r0, #7, #24
 1672 0014 08BD     		pop	{r3, pc}
 1673              	.L146:
 1674 0016 00BF     		.align	2
 1675              	.L145:
 1676 0018 B9040008 		.word	134218937
 1677 001c 00000000 		.word	.LANCHOR6
 1678              		.cfi_endproc
 1679              	.LFE22:
 1681              		.section	.text.moveto,"ax",%progbits
 1682              		.align	1
 1683              		.p2align 2,,3
 1684              		.global	moveto
 1685              		.syntax unified
 1686              		.thumb
 1687              		.thumb_func
 1688              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cckAiVOj.s 			page 48


 1690              	moveto:
 1691              	.LVL111:
 1692              	.LFB23:
 256:src/console.c **** 
 257:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 258:src/console.c **** char print_string[22];
 259:src/console.c **** int n_p = 0;
 260:src/console.c **** 
 261:src/console.c **** 
 262:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 1693              		.loc 2 262 30 is_stmt 1 view -0
 1694              		.cfi_startproc
 1695              		@ args = 0, pretend = 0, frame = 0
 1696              		@ frame_needed = 0, uses_anonymous_args = 0
 263:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1697              		.loc 2 263 3 view .LVU429
 262:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1698              		.loc 2 262 30 is_stmt 0 view .LVU430
 1699 0000 70B5     		push	{r4, r5, r6, lr}
 1700              		.cfi_def_cfa_offset 16
 1701              		.cfi_offset 4, -16
 1702              		.cfi_offset 5, -12
 1703              		.cfi_offset 6, -8
 1704              		.cfi_offset 14, -4
 1705              		.loc 2 263 3 view .LVU431
 1706 0002 0A4D     		ldr	r5, .L149
 1707 0004 0A4B     		ldr	r3, .L149+4
 262:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1708              		.loc 2 262 30 view .LVU432
 1709 0006 0246     		mov	r2, r0
 1710 0008 0C46     		mov	r4, r1
 1711              		.loc 2 263 3 view .LVU433
 1712 000a A86B     		ldr	r0, [r5, #56]
 1713              	.LVL112:
 1714              		.loc 2 263 3 view .LVU434
 1715 000c 511E     		subs	r1, r2, #1
 1716              	.LVL113:
 1717              		.loc 2 263 3 view .LVU435
 1718 000e 9847     		blx	r3
 1719              	.LVL114:
 264:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1720              		.loc 2 264 3 is_stmt 1 view .LVU436
 1721 0010 A86B     		ldr	r0, [r5, #56]
 1722 0012 084B     		ldr	r3, .L149+8
 1723              		.loc 2 264 33 is_stmt 0 view .LVU437
 1724 0014 0168     		ldr	r1, [r0]
 1725              		.loc 2 264 3 view .LVU438
 1726 0016 B0F90620 		ldrsh	r2, [r0, #6]
 1727              		.loc 2 264 33 view .LVU439
 1728 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 1729              		.loc 2 264 43 view .LVU440
 1730 001c 013C     		subs	r4, r4, #1
 1731              	.LVL115:
 1732              		.loc 2 264 40 view .LVU441
 1733 001e 04FB01F1 		mul	r1, r4, r1
 1734              		.loc 2 264 3 view .LVU442
 1735 0022 1431     		adds	r1, r1, #20
ARM GAS  /tmp/cckAiVOj.s 			page 49


 265:src/console.c **** }
 1736              		.loc 2 265 1 view .LVU443
 1737 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1738              		.cfi_restore 14
 1739              		.cfi_restore 6
 1740              		.cfi_restore 5
 1741              		.cfi_restore 4
 1742              		.cfi_def_cfa_offset 0
 1743              	.LVL116:
 264:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1744              		.loc 2 264 3 view .LVU444
 1745 0028 1847     		bx	r3	@ indirect register sibling call
 1746              	.LVL117:
 1747              	.L150:
 1748 002a 00BF     		.align	2
 1749              	.L149:
 1750 002c 00200010 		.word	268443648
 1751 0030 69020008 		.word	134218345
 1752 0034 6D020008 		.word	134218349
 1753              		.cfi_endproc
 1754              	.LFE23:
 1756              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 1757              		.align	2
 1758              	.LC10:
 1759 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 1759      673A2025 
 1759      34692C25 
 1759      346900
 1760              		.section	.text.print_debug,"ax",%progbits
 1761              		.align	1
 1762              		.p2align 2,,3
 1763              		.global	print_debug
 1764              		.syntax unified
 1765              		.thumb
 1766              		.thumb_func
 1767              		.fpu fpv4-sp-d16
 1769              	print_debug:
 1770              	.LVL118:
 1771              	.LFB24:
 266:src/console.c **** 
 267:src/console.c **** void print_debug (int i, int j) {
 1772              		.loc 2 267 33 is_stmt 1 view -0
 1773              		.cfi_startproc
 1774              		@ args = 0, pretend = 0, frame = 8
 1775              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/console.c ****   strcpy( print_string, spaces );
 1776              		.loc 2 268 3 view .LVU446
 267:src/console.c ****   strcpy( print_string, spaces );
 1777              		.loc 2 267 33 is_stmt 0 view .LVU447
 1778 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1779              		.cfi_def_cfa_offset 24
 1780              		.cfi_offset 4, -24
 1781              		.cfi_offset 5, -20
 1782              		.cfi_offset 6, -16
 1783              		.cfi_offset 7, -12
 1784              		.cfi_offset 8, -8
 1785              		.cfi_offset 14, -4
ARM GAS  /tmp/cckAiVOj.s 			page 50


 1786              		.loc 2 268 3 view .LVU448
 1787 0004 164C     		ldr	r4, .L153
 1788 0006 174F     		ldr	r7, .L153+4
 269:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 270:src/console.c ****   moveto (3, 1);
 271:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1789              		.loc 2 271 3 view .LVU449
 1790 0008 174E     		ldr	r6, .L153+8
 1791 000a 184D     		ldr	r5, .L153+12
 272:src/console.c ****   lcd_refresh();
 1792              		.loc 2 272 3 view .LVU450
 1793 000c DFF86880 		ldr	r8, .L153+24
 267:src/console.c ****   strcpy( print_string, spaces );
 1794              		.loc 2 267 33 view .LVU451
 1795 0010 82B0     		sub	sp, sp, #8
 1796              		.cfi_def_cfa_offset 32
 267:src/console.c ****   strcpy( print_string, spaces );
 1797              		.loc 2 267 33 view .LVU452
 1798 0012 0190     		str	r0, [sp, #4]
 1799 0014 0091     		str	r1, [sp]
 268:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1800              		.loc 2 268 3 view .LVU453
 1801 0016 2046     		mov	r0, r4
 1802              	.LVL119:
 268:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1803              		.loc 2 268 3 view .LVU454
 1804 0018 3946     		mov	r1, r7
 1805              	.LVL120:
 268:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1806              		.loc 2 268 3 view .LVU455
 1807 001a FFF7FEFF 		bl	strcpy
 1808              	.LVL121:
 269:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1809              		.loc 2 269 3 is_stmt 1 view .LVU456
 1810 001e DDE90032 		ldrd	r3, r2, [sp]
 1811 0022 1349     		ldr	r1, .L153+16
 1812 0024 2046     		mov	r0, r4
 1813 0026 FFF7FEFF 		bl	sprintf
 1814              	.LVL122:
 270:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1815              		.loc 2 270 3 view .LVU457
 1816 002a 0121     		movs	r1, #1
 1817 002c 0320     		movs	r0, #3
 1818 002e FFF7FEFF 		bl	moveto
 1819              	.LVL123:
 271:src/console.c ****   lcd_refresh();
 1820              		.loc 2 271 3 view .LVU458
 1821 0032 2146     		mov	r1, r4
 1822 0034 B06B     		ldr	r0, [r6, #56]
 1823 0036 A847     		blx	r5
 1824              	.LVL124:
 1825              		.loc 2 272 3 view .LVU459
 1826 0038 C047     		blx	r8
 1827              	.LVL125:
 273:src/console.c ****   sys_delay (100);
 1828              		.loc 2 273 3 view .LVU460
 1829 003a 0E4B     		ldr	r3, .L153+20
ARM GAS  /tmp/cckAiVOj.s 			page 51


 1830 003c 6420     		movs	r0, #100
 1831 003e 9847     		blx	r3
 1832              	.LVL126:
 274:src/console.c ****   /* wait_for_key_press(); */
 275:src/console.c ****   //  key_pop_all();
 276:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 277:src/console.c ****   // key_pop_all();
 278:src/console.c ****   strcpy( print_string, spaces );
 1833              		.loc 2 278 3 view .LVU461
 1834 0040 3946     		mov	r1, r7
 1835 0042 2046     		mov	r0, r4
 1836 0044 FFF7FEFF 		bl	strcpy
 1837              	.LVL127:
 279:src/console.c ****   moveto (3, 1);
 1838              		.loc 2 279 3 view .LVU462
 1839 0048 0121     		movs	r1, #1
 1840 004a 0320     		movs	r0, #3
 1841 004c FFF7FEFF 		bl	moveto
 1842              	.LVL128:
 280:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1843              		.loc 2 280 3 view .LVU463
 1844 0050 B06B     		ldr	r0, [r6, #56]
 1845 0052 2146     		mov	r1, r4
 1846 0054 A847     		blx	r5
 1847              	.LVL129:
 281:src/console.c ****   lcd_refresh();
 1848              		.loc 2 281 3 view .LVU464
 1849 0056 4346     		mov	r3, r8
 282:src/console.c ****   // while (key_empty()<=0);; // wait for release
 283:src/console.c ****   // key_pop_all();
 284:src/console.c **** }
 1850              		.loc 2 284 1 is_stmt 0 view .LVU465
 1851 0058 02B0     		add	sp, sp, #8
 1852              		.cfi_def_cfa_offset 24
 1853              	.LVL130:
 1854              		.loc 2 284 1 view .LVU466
 1855              		@ sp needed
 1856 005a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1857              		.cfi_restore 14
 1858              		.cfi_restore 8
 1859              		.cfi_restore 7
 1860              		.cfi_restore 6
 1861              		.cfi_restore 5
 1862              		.cfi_restore 4
 1863              		.cfi_def_cfa_offset 0
 1864              	.LVL131:
 281:src/console.c ****   lcd_refresh();
 1865              		.loc 2 281 3 view .LVU467
 1866 005e 1847     		bx	r3	@ indirect register sibling call
 1867              	.LVL132:
 1868              	.L154:
 1869              		.align	2
 1870              	.L153:
 1871 0060 00000000 		.word	print_string
 1872 0064 00000000 		.word	.LANCHOR7
 1873 0068 00200010 		.word	268443648
 1874 006c B1020008 		.word	134218417
ARM GAS  /tmp/cckAiVOj.s 			page 52


 1875 0070 00000000 		.word	.LC10
 1876 0074 05040008 		.word	134218757
 1877 0078 31020008 		.word	134218289
 1878              		.cfi_endproc
 1879              	.LFE24:
 1881              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 1882              		.align	2
 1883              	.LC11:
 1884 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 1884      692C2531 
 1884      337300
 1885              		.section	.text.print_debug2,"ax",%progbits
 1886              		.align	1
 1887              		.p2align 2,,3
 1888              		.global	print_debug2
 1889              		.syntax unified
 1890              		.thumb
 1891              		.thumb_func
 1892              		.fpu fpv4-sp-d16
 1894              	print_debug2:
 1895              	.LVL133:
 1896              	.LFB25:
 285:src/console.c **** 
 286:src/console.c **** void print_debug2 (int i, char* j) {
 1897              		.loc 2 286 36 is_stmt 1 view -0
 1898              		.cfi_startproc
 1899              		@ args = 0, pretend = 0, frame = 8
 1900              		@ frame_needed = 0, uses_anonymous_args = 0
 287:src/console.c ****   strcpy( print_string, spaces );
 1901              		.loc 2 287 3 view .LVU469
 286:src/console.c ****   strcpy( print_string, spaces );
 1902              		.loc 2 286 36 is_stmt 0 view .LVU470
 1903 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1904              		.cfi_def_cfa_offset 24
 1905              		.cfi_offset 4, -24
 1906              		.cfi_offset 5, -20
 1907              		.cfi_offset 6, -16
 1908              		.cfi_offset 7, -12
 1909              		.cfi_offset 8, -8
 1910              		.cfi_offset 14, -4
 1911              		.loc 2 287 3 view .LVU471
 1912 0004 174C     		ldr	r4, .L157
 1913 0006 184F     		ldr	r7, .L157+4
 288:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 289:src/console.c ****   moveto (3, 1);
 290:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1914              		.loc 2 290 3 view .LVU472
 1915 0008 184E     		ldr	r6, .L157+8
 1916 000a 194D     		ldr	r5, .L157+12
 291:src/console.c ****   lcd_refresh();
 1917              		.loc 2 291 3 view .LVU473
 1918 000c DFF86C80 		ldr	r8, .L157+24
 286:src/console.c ****   strcpy( print_string, spaces );
 1919              		.loc 2 286 36 view .LVU474
 1920 0010 82B0     		sub	sp, sp, #8
 1921              		.cfi_def_cfa_offset 32
 286:src/console.c ****   strcpy( print_string, spaces );
ARM GAS  /tmp/cckAiVOj.s 			page 53


 1922              		.loc 2 286 36 view .LVU475
 1923 0012 0190     		str	r0, [sp, #4]
 1924 0014 0091     		str	r1, [sp]
 287:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1925              		.loc 2 287 3 view .LVU476
 1926 0016 2046     		mov	r0, r4
 1927              	.LVL134:
 287:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1928              		.loc 2 287 3 view .LVU477
 1929 0018 3946     		mov	r1, r7
 1930              	.LVL135:
 287:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1931              		.loc 2 287 3 view .LVU478
 1932 001a FFF7FEFF 		bl	strcpy
 1933              	.LVL136:
 288:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1934              		.loc 2 288 3 is_stmt 1 view .LVU479
 1935 001e DDE90032 		ldrd	r3, r2, [sp]
 1936 0022 1449     		ldr	r1, .L157+16
 1937 0024 2046     		mov	r0, r4
 1938 0026 FFF7FEFF 		bl	sprintf
 1939              	.LVL137:
 289:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1940              		.loc 2 289 3 view .LVU480
 1941 002a 0121     		movs	r1, #1
 1942 002c 0320     		movs	r0, #3
 1943 002e FFF7FEFF 		bl	moveto
 1944              	.LVL138:
 290:src/console.c ****   lcd_refresh();
 1945              		.loc 2 290 3 view .LVU481
 1946 0032 2146     		mov	r1, r4
 1947 0034 B06B     		ldr	r0, [r6, #56]
 1948 0036 A847     		blx	r5
 1949              	.LVL139:
 1950              		.loc 2 291 3 view .LVU482
 1951 0038 C047     		blx	r8
 1952              	.LVL140:
 292:src/console.c ****   sys_delay (2500);
 1953              		.loc 2 292 3 view .LVU483
 1954 003a 0F4B     		ldr	r3, .L157+20
 1955 003c 40F6C410 		movw	r0, #2500
 1956 0040 9847     		blx	r3
 1957              	.LVL141:
 293:src/console.c ****   /* wait_for_key_press(); */
 294:src/console.c ****   //  key_pop_all();
 295:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 296:src/console.c ****   // key_pop_all();
 297:src/console.c ****   strcpy( print_string, spaces );
 1958              		.loc 2 297 3 view .LVU484
 1959 0042 3946     		mov	r1, r7
 1960 0044 2046     		mov	r0, r4
 1961 0046 FFF7FEFF 		bl	strcpy
 1962              	.LVL142:
 298:src/console.c ****   moveto (3, 1);
 1963              		.loc 2 298 3 view .LVU485
 1964 004a 0121     		movs	r1, #1
 1965 004c 0320     		movs	r0, #3
ARM GAS  /tmp/cckAiVOj.s 			page 54


 1966 004e FFF7FEFF 		bl	moveto
 1967              	.LVL143:
 299:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1968              		.loc 2 299 3 view .LVU486
 1969 0052 B06B     		ldr	r0, [r6, #56]
 1970 0054 2146     		mov	r1, r4
 1971 0056 A847     		blx	r5
 1972              	.LVL144:
 300:src/console.c ****   lcd_refresh();
 1973              		.loc 2 300 3 view .LVU487
 1974 0058 4346     		mov	r3, r8
 301:src/console.c ****   // while (key_empty()<=0);; // wait for release
 302:src/console.c ****   // key_pop_all();
 303:src/console.c **** }
 1975              		.loc 2 303 1 is_stmt 0 view .LVU488
 1976 005a 02B0     		add	sp, sp, #8
 1977              		.cfi_def_cfa_offset 24
 1978              	.LVL145:
 1979              		.loc 2 303 1 view .LVU489
 1980              		@ sp needed
 1981 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1982              		.cfi_restore 14
 1983              		.cfi_restore 8
 1984              		.cfi_restore 7
 1985              		.cfi_restore 6
 1986              		.cfi_restore 5
 1987              		.cfi_restore 4
 1988              		.cfi_def_cfa_offset 0
 1989              	.LVL146:
 300:src/console.c ****   lcd_refresh();
 1990              		.loc 2 300 3 view .LVU490
 1991 0060 1847     		bx	r3	@ indirect register sibling call
 1992              	.LVL147:
 1993              	.L158:
 1994 0062 00BF     		.align	2
 1995              	.L157:
 1996 0064 00000000 		.word	print_string
 1997 0068 00000000 		.word	.LANCHOR7
 1998 006c 00200010 		.word	268443648
 1999 0070 B1020008 		.word	134218417
 2000 0074 00000000 		.word	.LC11
 2001 0078 05040008 		.word	134218757
 2002 007c 31020008 		.word	134218289
 2003              		.cfi_endproc
 2004              	.LFE25:
 2006              		.section	.text.do_now,"ax",%progbits
 2007              		.align	1
 2008              		.p2align 2,,3
 2009              		.global	do_now
 2010              		.syntax unified
 2011              		.thumb
 2012              		.thumb_func
 2013              		.fpu fpv4-sp-d16
 2015              	do_now:
 2016              	.LVL148:
 2017              	.LFB26:
 304:src/console.c **** 
ARM GAS  /tmp/cckAiVOj.s 			page 55


 305:src/console.c **** void do_now (int key, int shift) {
 2018              		.loc 2 305 34 is_stmt 1 view -0
 2019              		.cfi_startproc
 2020              		@ args = 0, pretend = 0, frame = 8
 2021              		@ frame_needed = 0, uses_anonymous_args = 0
 2022              		@ link register save eliminated.
 306:src/console.c ****   struct _ndmap temp;
 2023              		.loc 2 306 3 view .LVU492
 307:src/console.c ****   temp.key_34s = key;
 2024              		.loc 2 307 3 view .LVU493
 305:src/console.c ****   struct _ndmap temp;
 2025              		.loc 2 305 34 is_stmt 0 view .LVU494
 2026 0000 82B0     		sub	sp, sp, #8
 2027              		.cfi_def_cfa_offset 8
 308:src/console.c ****   temp.shift = shift;
 309:src/console.c ****   process_keycode_with_shift (temp);
 2028              		.loc 2 309 3 view .LVU495
 2029 0002 02AB     		add	r3, sp, #8
 307:src/console.c ****   temp.shift = shift;
 2030              		.loc 2 307 16 view .LVU496
 2031 0004 8DF80000 		strb	r0, [sp]
 308:src/console.c ****   temp.shift = shift;
 2032              		.loc 2 308 3 is_stmt 1 view .LVU497
 308:src/console.c ****   temp.shift = shift;
 2033              		.loc 2 308 14 is_stmt 0 view .LVU498
 2034 0008 0191     		str	r1, [sp, #4]
 2035              		.loc 2 309 3 is_stmt 1 view .LVU499
 2036 000a 13E90300 		ldmdb	r3, {r0, r1}
 2037              	.LVL149:
 310:src/console.c **** }
 2038              		.loc 2 310 1 is_stmt 0 view .LVU500
 2039 000e 02B0     		add	sp, sp, #8
 2040              		.cfi_def_cfa_offset 0
 2041              		@ sp needed
 309:src/console.c **** }
 2042              		.loc 2 309 3 view .LVU501
 2043 0010 FFF7FEBF 		b	process_keycode_with_shift
 2044              	.LVL150:
 309:src/console.c **** }
 2045              		.loc 2 309 3 view .LVU502
 2046              		.cfi_endproc
 2047              	.LFE26:
 2049              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 2050              		.align	2
 2051              	.LC12:
 2052 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 2052      502F7770 
 2052      3334735F 
 2052      68656C70 
 2052      2E68746D 
 2053              		.section	.text.do_multi,"ax",%progbits
 2054              		.align	1
 2055              		.p2align 2,,3
 2056              		.global	do_multi
 2057              		.syntax unified
 2058              		.thumb
 2059              		.thumb_func
ARM GAS  /tmp/cckAiVOj.s 			page 56


 2060              		.fpu fpv4-sp-d16
 2062              	do_multi:
 2063              	.LVL151:
 2064              	.LFB27:
 311:src/console.c **** 
 312:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 2065              		.loc 2 312 42 is_stmt 1 view -0
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 16
 2068              		@ frame_needed = 0, uses_anonymous_args = 0
 2069              		.loc 2 312 42 is_stmt 0 view .LVU504
 2070 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2071              		.cfi_def_cfa_offset 24
 2072              		.cfi_offset 4, -24
 2073              		.cfi_offset 5, -20
 2074              		.cfi_offset 6, -16
 2075              		.cfi_offset 7, -12
 2076              		.cfi_offset 8, -8
 2077              		.cfi_offset 14, -4
 2078 0004 84B0     		sub	sp, sp, #16
 2079              		.cfi_def_cfa_offset 40
 2080              	.LVL152:
 313:src/console.c ****   switch(r.shift) {
 2081              		.loc 2 313 3 is_stmt 1 view .LVU505
 312:src/console.c ****   switch(r.shift) {
 2082              		.loc 2 312 42 is_stmt 0 view .LVU506
 2083 0006 6C46     		mov	r4, sp
 2084 0008 531E     		subs	r3, r2, #1
 2085 000a 84E80600 		stm	r4, {r1, r2}
 2086              	.LVL153:
 312:src/console.c ****   switch(r.shift) {
 2087              		.loc 2 312 42 view .LVU507
 2088 000e 0546     		mov	r5, r0
 2089 0010 0C2B     		cmp	r3, #12
 2090 0012 00F2BE80 		bhi	.L162
 2091 0016 DFE803F0 		tbb	[pc, r3]
 2092              	.L164:
 2093 001a 15       		.byte	(.L176-.L164)/2
 2094 001b 51       		.byte	(.L175-.L164)/2
 2095 001c 3D       		.byte	(.L174-.L164)/2
 2096 001d 47       		.byte	(.L173-.L164)/2
 2097 001e 5B       		.byte	(.L172-.L164)/2
 2098 001f 65       		.byte	(.L171-.L164)/2
 2099 0020 6F       		.byte	(.L170-.L164)/2
 2100 0021 79       		.byte	(.L169-.L164)/2
 2101 0022 82       		.byte	(.L168-.L164)/2
 2102 0023 8C       		.byte	(.L167-.L164)/2
 2103 0024 95       		.byte	(.L166-.L164)/2
 2104 0025 9E       		.byte	(.L165-.L164)/2
 2105 0026 07       		.byte	(.L163-.L164)/2
 2106 0027 00       		.p2align 1
 2107              	.L163:
 314:src/console.c ****   case LASTX: // Last x via RCL L
 315:src/console.c ****     do_now (K11, 0); // RCL
 316:src/console.c ****     do_now (K_RELEASE,0); // release
 317:src/console.c ****     do_now (K15,0); // TAN key
 318:src/console.c ****     r.key_34s = K_RELEASE;
ARM GAS  /tmp/cckAiVOj.s 			page 57


 319:src/console.c ****     r.shift = 0; // set up for release;
 320:src/console.c ****     break;
 321:src/console.c ****   case ONSTO: // flash_backup()
 322:src/console.c ****     flash_backup(OP_SAVE);
 323:src/console.c ****     r = no_key;
 324:src/console.c ****     break;
 325:src/console.c ****   case ONRCL: // flash_restore()
 326:src/console.c ****     flash_restore(OP_LOAD);
 327:src/console.c ****     r = no_key;
 328:src/console.c ****     break;
 329:src/console.c ****   case WRLIB: // save library file
 330:src/console.c ****     save_lib_file(1);
 331:src/console.c ****     r = no_key;
 332:src/console.c ****     break;
 333:src/console.c ****   case LLIB: // load library file
 334:src/console.c ****     load_lib_file(1);
 335:src/console.c ****     r = no_key;
 336:src/console.c ****     break;
 337:src/console.c ****   case WRTST: // save state file
 338:src/console.c ****     save_ram_file(1);
 339:src/console.c ****     r = no_key;
 340:src/console.c ****     break;
 341:src/console.c ****   case LDST:
 342:src/console.c ****     load_ram_file(1);
 343:src/console.c ****     r = no_key;
 344:src/console.c ****     break;
 345:src/console.c ****   case LDPRG:
 346:src/console.c ****     load_prog_file();
 347:src/console.c ****     r = no_key;
 348:src/console.c ****     break;
 349:src/console.c ****   case SVPRG:
 350:src/console.c ****     save_prog_file();
 351:src/console.c ****     r = no_key;
 352:src/console.c ****     break;
 353:src/console.c ****   case HELP:
 354:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 355:src/console.c ****     r = no_key;
 356:src/console.c ****     break;
 357:src/console.c ****   case DOTS:
 358:src/console.c ****     do_all_dots();
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 362:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 363:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 364:src/console.c ****     r = no_key;
 365:src/console.c ****     break;
 366:src/console.c ****   case DEFMEN:
 367:src/console.c ****     toggle_default_menu();
 2108              		.loc 2 367 5 is_stmt 1 view .LVU508
 2109              	.LBB88:
 2110              	.LBI88:
 100:src/menu.c    ****   if (current_menu == default_menu) {
 2111              		.loc 1 100 6 view .LVU509
 2112              	.LBB89:
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2113              		.loc 1 101 3 view .LVU510
ARM GAS  /tmp/cckAiVOj.s 			page 58


 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2114              		.loc 1 101 20 is_stmt 0 view .LVU511
 2115 0028 5D49     		ldr	r1, .L181
 2116 002a 5E4A     		ldr	r2, .L181+4
 2117 002c 0868     		ldr	r0, [r1]
 2118              	.LVL154:
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2119              		.loc 1 101 6 view .LVU512
 2120 002e 1368     		ldr	r3, [r2]
 2121 0030 8342     		cmp	r3, r0
 2122 0032 00F0A980 		beq	.L180
 2123              	.L178:
 2124              	.LBE89:
 2125              	.LBE88:
 368:src/console.c ****     r = f_shift; // clears f-shift that called this function
 2126              		.loc 2 368 5 is_stmt 1 view .LVU513
 2127              		.loc 2 368 7 is_stmt 0 view .LVU514
 2128 0036 5C4B     		ldr	r3, .L181+8
 2129 0038 93E80300 		ldm	r3, {r0, r1}
 2130 003c 84E80300 		stm	r4, {r0, r1}
 2131 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2132              	.LVL155:
 369:src/console.c ****     break;
 2133              		.loc 2 369 5 is_stmt 1 view .LVU515
 2134 0042 1CE0     		b	.L177
 2135              	.LVL156:
 2136              	.L176:
 315:src/console.c ****     do_now (K_RELEASE,0); // release
 2137              		.loc 2 315 5 view .LVU516
 2138              	.LBB91:
 2139              	.LBI91:
 305:src/console.c ****   struct _ndmap temp;
 2140              		.loc 2 305 6 view .LVU517
 2141              	.LBB92:
 306:src/console.c ****   temp.key_34s = key;
 2142              		.loc 2 306 3 view .LVU518
 307:src/console.c ****   temp.shift = shift;
 2143              		.loc 2 307 3 view .LVU519
 307:src/console.c ****   temp.shift = shift;
 2144              		.loc 2 307 16 is_stmt 0 view .LVU520
 2145 0044 0723     		movs	r3, #7
 308:src/console.c ****   process_keycode_with_shift (temp);
 2146              		.loc 2 308 14 view .LVU521
 2147 0046 0026     		movs	r6, #0
 307:src/console.c ****   temp.shift = shift;
 2148              		.loc 2 307 16 view .LVU522
 2149 0048 8DF80830 		strb	r3, [sp, #8]
 308:src/console.c ****   process_keycode_with_shift (temp);
 2150              		.loc 2 308 3 is_stmt 1 view .LVU523
 309:src/console.c **** }
 2151              		.loc 2 309 3 is_stmt 0 view .LVU524
 2152 004c 0DF10808 		add	r8, sp, #8
 308:src/console.c ****   process_keycode_with_shift (temp);
 2153              		.loc 2 308 14 view .LVU525
 2154 0050 0396     		str	r6, [sp, #12]
 309:src/console.c **** }
 2155              		.loc 2 309 3 is_stmt 1 view .LVU526
ARM GAS  /tmp/cckAiVOj.s 			page 59


 2156 0052 98E80300 		ldm	r8, {r0, r1}
 2157              	.LVL157:
 309:src/console.c **** }
 2158              		.loc 2 309 3 is_stmt 0 view .LVU527
 2159              	.LBE92:
 2160              	.LBE91:
 2161              	.LBB94:
 2162              	.LBB95:
 307:src/console.c ****   temp.shift = shift;
 2163              		.loc 2 307 16 view .LVU528
 2164 0056 6327     		movs	r7, #99
 2165              	.LBE95:
 2166              	.LBE94:
 2167              	.LBB97:
 2168              	.LBB93:
 309:src/console.c **** }
 2169              		.loc 2 309 3 view .LVU529
 2170 0058 FFF7FEFF 		bl	process_keycode_with_shift
 2171              	.LVL158:
 309:src/console.c **** }
 2172              		.loc 2 309 3 view .LVU530
 2173              	.LBE93:
 2174              	.LBE97:
 316:src/console.c ****     do_now (K15,0); // TAN key
 2175              		.loc 2 316 5 is_stmt 1 view .LVU531
 2176              	.LBB98:
 2177              	.LBI94:
 305:src/console.c ****   struct _ndmap temp;
 2178              		.loc 2 305 6 view .LVU532
 2179              	.LBB96:
 306:src/console.c ****   temp.key_34s = key;
 2180              		.loc 2 306 3 view .LVU533
 307:src/console.c ****   temp.shift = shift;
 2181              		.loc 2 307 3 view .LVU534
 308:src/console.c ****   process_keycode_with_shift (temp);
 2182              		.loc 2 308 14 is_stmt 0 view .LVU535
 2183 005c 0396     		str	r6, [sp, #12]
 307:src/console.c ****   temp.shift = shift;
 2184              		.loc 2 307 16 view .LVU536
 2185 005e 8DF80870 		strb	r7, [sp, #8]
 308:src/console.c ****   process_keycode_with_shift (temp);
 2186              		.loc 2 308 3 is_stmt 1 view .LVU537
 309:src/console.c **** }
 2187              		.loc 2 309 3 view .LVU538
 2188 0062 98E80300 		ldm	r8, {r0, r1}
 2189 0066 FFF7FEFF 		bl	process_keycode_with_shift
 2190              	.LVL159:
 309:src/console.c **** }
 2191              		.loc 2 309 3 is_stmt 0 view .LVU539
 2192              	.LBE96:
 2193              	.LBE98:
 317:src/console.c ****     r.key_34s = K_RELEASE;
 2194              		.loc 2 317 5 is_stmt 1 view .LVU540
 2195              	.LBB99:
 2196              	.LBI99:
 305:src/console.c ****   struct _ndmap temp;
 2197              		.loc 2 305 6 view .LVU541
ARM GAS  /tmp/cckAiVOj.s 			page 60


 2198              	.LBB100:
 306:src/console.c ****   temp.key_34s = key;
 2199              		.loc 2 306 3 view .LVU542
 307:src/console.c ****   temp.shift = shift;
 2200              		.loc 2 307 3 view .LVU543
 307:src/console.c ****   temp.shift = shift;
 2201              		.loc 2 307 16 is_stmt 0 view .LVU544
 2202 006a 0B23     		movs	r3, #11
 2203 006c 8DF80830 		strb	r3, [sp, #8]
 308:src/console.c ****   process_keycode_with_shift (temp);
 2204              		.loc 2 308 3 is_stmt 1 view .LVU545
 309:src/console.c **** }
 2205              		.loc 2 309 3 view .LVU546
 308:src/console.c ****   process_keycode_with_shift (temp);
 2206              		.loc 2 308 14 is_stmt 0 view .LVU547
 2207 0070 0396     		str	r6, [sp, #12]
 309:src/console.c **** }
 2208              		.loc 2 309 3 view .LVU548
 2209 0072 98E80300 		ldm	r8, {r0, r1}
 2210 0076 FFF7FEFF 		bl	process_keycode_with_shift
 2211              	.LVL160:
 309:src/console.c **** }
 2212              		.loc 2 309 3 view .LVU549
 2213              	.LBE100:
 2214              	.LBE99:
 318:src/console.c ****     r.shift = 0; // set up for release;
 2215              		.loc 2 318 5 is_stmt 1 view .LVU550
 319:src/console.c ****     break;
 2216              		.loc 2 319 5 view .LVU551
 320:src/console.c ****   case ONSTO: // flash_backup()
 2217              		.loc 2 320 5 view .LVU552
 319:src/console.c ****     break;
 2218              		.loc 2 319 13 is_stmt 0 view .LVU553
 2219 007a 3146     		mov	r1, r6
 318:src/console.c ****     r.shift = 0; // set up for release;
 2220              		.loc 2 318 15 view .LVU554
 2221 007c 3B46     		mov	r3, r7
 2222              	.LVL161:
 2223              	.L177:
 370:src/console.c ****   default:
 371:src/console.c ****     r = no_key;
 372:src/console.c ****   }
 373:src/console.c ****   return r;
 2224              		.loc 2 373 3 is_stmt 1 view .LVU555
 2225              		.loc 2 373 10 is_stmt 0 view .LVU556
 2226 007e 8DF80030 		strb	r3, [sp]
 2227 0082 0191     		str	r1, [sp, #4]
 2228 0084 94E80300 		ldm	r4, {r0, r1}
 2229              	.LVL162:
 2230              		.loc 2 373 10 view .LVU557
 2231 0088 85E80300 		stm	r5, {r0, r1}
 374:src/console.c **** }
 2232              		.loc 2 374 1 view .LVU558
 2233 008c 2846     		mov	r0, r5
 2234 008e 04B0     		add	sp, sp, #16
 2235              		.cfi_remember_state
 2236              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cckAiVOj.s 			page 61


 2237              		@ sp needed
 2238 0090 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2239              	.LVL163:
 2240              	.L174:
 2241              		.cfi_restore_state
 326:src/console.c ****     r = no_key;
 2242              		.loc 2 326 5 is_stmt 1 view .LVU559
 2243 0094 AE20     		movs	r0, #174
 2244              	.LVL164:
 326:src/console.c ****     r = no_key;
 2245              		.loc 2 326 5 is_stmt 0 view .LVU560
 2246 0096 FFF7FEFF 		bl	flash_restore
 2247              	.LVL165:
 327:src/console.c ****     break;
 2248              		.loc 2 327 5 is_stmt 1 view .LVU561
 327:src/console.c ****     break;
 2249              		.loc 2 327 7 is_stmt 0 view .LVU562
 2250 009a 444B     		ldr	r3, .L181+12
 2251 009c 93E80300 		ldm	r3, {r0, r1}
 2252 00a0 84E80300 		stm	r4, {r0, r1}
 2253 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2254              	.LVL166:
 328:src/console.c ****   case WRLIB: // save library file
 2255              		.loc 2 328 5 is_stmt 1 view .LVU563
 2256 00a6 EAE7     		b	.L177
 2257              	.LVL167:
 2258              	.L173:
 330:src/console.c ****     r = no_key;
 2259              		.loc 2 330 5 view .LVU564
 2260 00a8 0120     		movs	r0, #1
 2261              	.LVL168:
 330:src/console.c ****     r = no_key;
 2262              		.loc 2 330 5 is_stmt 0 view .LVU565
 2263 00aa FFF7FEFF 		bl	save_lib_file
 2264              	.LVL169:
 331:src/console.c ****     break;
 2265              		.loc 2 331 5 is_stmt 1 view .LVU566
 331:src/console.c ****     break;
 2266              		.loc 2 331 7 is_stmt 0 view .LVU567
 2267 00ae 3F4B     		ldr	r3, .L181+12
 2268 00b0 93E80300 		ldm	r3, {r0, r1}
 2269 00b4 84E80300 		stm	r4, {r0, r1}
 2270 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2271              	.LVL170:
 332:src/console.c ****   case LLIB: // load library file
 2272              		.loc 2 332 5 is_stmt 1 view .LVU568
 2273 00ba E0E7     		b	.L177
 2274              	.LVL171:
 2275              	.L175:
 322:src/console.c ****     r = no_key;
 2276              		.loc 2 322 5 view .LVU569
 2277 00bc AD20     		movs	r0, #173
 2278              	.LVL172:
 322:src/console.c ****     r = no_key;
 2279              		.loc 2 322 5 is_stmt 0 view .LVU570
 2280 00be FFF7FEFF 		bl	flash_backup
 2281              	.LVL173:
ARM GAS  /tmp/cckAiVOj.s 			page 62


 323:src/console.c ****     break;
 2282              		.loc 2 323 5 is_stmt 1 view .LVU571
 323:src/console.c ****     break;
 2283              		.loc 2 323 7 is_stmt 0 view .LVU572
 2284 00c2 3A4B     		ldr	r3, .L181+12
 2285 00c4 93E80300 		ldm	r3, {r0, r1}
 2286 00c8 84E80300 		stm	r4, {r0, r1}
 2287 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2288              	.LVL174:
 324:src/console.c ****   case ONRCL: // flash_restore()
 2289              		.loc 2 324 5 is_stmt 1 view .LVU573
 2290 00ce D6E7     		b	.L177
 2291              	.LVL175:
 2292              	.L172:
 334:src/console.c ****     r = no_key;
 2293              		.loc 2 334 5 view .LVU574
 2294 00d0 0120     		movs	r0, #1
 2295              	.LVL176:
 334:src/console.c ****     r = no_key;
 2296              		.loc 2 334 5 is_stmt 0 view .LVU575
 2297 00d2 FFF7FEFF 		bl	load_lib_file
 2298              	.LVL177:
 335:src/console.c ****     break;
 2299              		.loc 2 335 5 is_stmt 1 view .LVU576
 335:src/console.c ****     break;
 2300              		.loc 2 335 7 is_stmt 0 view .LVU577
 2301 00d6 354B     		ldr	r3, .L181+12
 2302 00d8 93E80300 		ldm	r3, {r0, r1}
 2303 00dc 84E80300 		stm	r4, {r0, r1}
 2304 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2305              	.LVL178:
 336:src/console.c ****   case WRTST: // save state file
 2306              		.loc 2 336 5 is_stmt 1 view .LVU578
 2307 00e2 CCE7     		b	.L177
 2308              	.LVL179:
 2309              	.L171:
 338:src/console.c ****     r = no_key;
 2310              		.loc 2 338 5 view .LVU579
 2311 00e4 0120     		movs	r0, #1
 2312              	.LVL180:
 338:src/console.c ****     r = no_key;
 2313              		.loc 2 338 5 is_stmt 0 view .LVU580
 2314 00e6 FFF7FEFF 		bl	save_ram_file
 2315              	.LVL181:
 339:src/console.c ****     break;
 2316              		.loc 2 339 5 is_stmt 1 view .LVU581
 339:src/console.c ****     break;
 2317              		.loc 2 339 7 is_stmt 0 view .LVU582
 2318 00ea 304B     		ldr	r3, .L181+12
 2319 00ec 93E80300 		ldm	r3, {r0, r1}
 2320 00f0 84E80300 		stm	r4, {r0, r1}
 2321 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2322              	.LVL182:
 340:src/console.c ****   case LDST:
 2323              		.loc 2 340 5 is_stmt 1 view .LVU583
 2324 00f6 C2E7     		b	.L177
 2325              	.LVL183:
ARM GAS  /tmp/cckAiVOj.s 			page 63


 2326              	.L170:
 342:src/console.c ****     r = no_key;
 2327              		.loc 2 342 5 view .LVU584
 2328 00f8 0120     		movs	r0, #1
 2329              	.LVL184:
 342:src/console.c ****     r = no_key;
 2330              		.loc 2 342 5 is_stmt 0 view .LVU585
 2331 00fa FFF7FEFF 		bl	load_ram_file
 2332              	.LVL185:
 343:src/console.c ****     break;
 2333              		.loc 2 343 5 is_stmt 1 view .LVU586
 343:src/console.c ****     break;
 2334              		.loc 2 343 7 is_stmt 0 view .LVU587
 2335 00fe 2B4B     		ldr	r3, .L181+12
 2336 0100 93E80300 		ldm	r3, {r0, r1}
 2337 0104 84E80300 		stm	r4, {r0, r1}
 2338 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2339              	.LVL186:
 344:src/console.c ****   case LDPRG:
 2340              		.loc 2 344 5 is_stmt 1 view .LVU588
 2341 010a B8E7     		b	.L177
 2342              	.LVL187:
 2343              	.L169:
 346:src/console.c ****     r = no_key;
 2344              		.loc 2 346 5 view .LVU589
 2345 010c FFF7FEFF 		bl	load_prog_file
 2346              	.LVL188:
 347:src/console.c ****     break;
 2347              		.loc 2 347 5 view .LVU590
 347:src/console.c ****     break;
 2348              		.loc 2 347 7 is_stmt 0 view .LVU591
 2349 0110 264B     		ldr	r3, .L181+12
 2350 0112 93E80300 		ldm	r3, {r0, r1}
 2351 0116 84E80300 		stm	r4, {r0, r1}
 2352 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2353              	.LVL189:
 348:src/console.c ****   case SVPRG:
 2354              		.loc 2 348 5 is_stmt 1 view .LVU592
 2355 011c AFE7     		b	.L177
 2356              	.LVL190:
 2357              	.L168:
 354:src/console.c ****     r = no_key;
 2358              		.loc 2 354 5 view .LVU593
 2359 011e 244B     		ldr	r3, .L181+16
 2360 0120 2448     		ldr	r0, .L181+20
 2361              	.LVL191:
 354:src/console.c ****     r = no_key;
 2362              		.loc 2 354 5 is_stmt 0 view .LVU594
 2363 0122 9847     		blx	r3
 2364              	.LVL192:
 355:src/console.c ****     break;
 2365              		.loc 2 355 5 is_stmt 1 view .LVU595
 355:src/console.c ****     break;
 2366              		.loc 2 355 7 is_stmt 0 view .LVU596
 2367 0124 214B     		ldr	r3, .L181+12
 2368 0126 93E80300 		ldm	r3, {r0, r1}
 2369 012a 84E80300 		stm	r4, {r0, r1}
ARM GAS  /tmp/cckAiVOj.s 			page 64


 2370 012e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2371              	.LVL193:
 356:src/console.c ****   case DOTS:
 2372              		.loc 2 356 5 is_stmt 1 view .LVU597
 2373 0130 A5E7     		b	.L177
 2374              	.LVL194:
 2375              	.L167:
 350:src/console.c ****     r = no_key;
 2376              		.loc 2 350 5 view .LVU598
 2377 0132 FFF7FEFF 		bl	save_prog_file
 2378              	.LVL195:
 351:src/console.c ****     break;
 2379              		.loc 2 351 5 view .LVU599
 351:src/console.c ****     break;
 2380              		.loc 2 351 7 is_stmt 0 view .LVU600
 2381 0136 1D4B     		ldr	r3, .L181+12
 2382 0138 93E80300 		ldm	r3, {r0, r1}
 2383 013c 84E80300 		stm	r4, {r0, r1}
 2384 0140 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2385              	.LVL196:
 352:src/console.c ****   case HELP:
 2386              		.loc 2 352 5 is_stmt 1 view .LVU601
 2387 0142 9CE7     		b	.L177
 2388              	.LVL197:
 2389              	.L166:
 358:src/console.c ****     r = no_key;
 2390              		.loc 2 358 5 view .LVU602
 2391 0144 FFF7FEFF 		bl	do_all_dots
 2392              	.LVL198:
 359:src/console.c ****     break;
 2393              		.loc 2 359 5 view .LVU603
 359:src/console.c ****     break;
 2394              		.loc 2 359 7 is_stmt 0 view .LVU604
 2395 0148 184B     		ldr	r3, .L181+12
 2396 014a 93E80300 		ldm	r3, {r0, r1}
 2397 014e 84E80300 		stm	r4, {r0, r1}
 2398 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2399              	.LVL199:
 360:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 2400              		.loc 2 360 5 is_stmt 1 view .LVU605
 2401 0154 93E7     		b	.L177
 2402              	.LVL200:
 2403              	.L165:
 362:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 2404              		.loc 2 362 5 view .LVU606
 2405              	.LBB101:
 2406              	.LBI101:
 305:src/console.c ****   struct _ndmap temp;
 2407              		.loc 2 305 6 view .LVU607
 2408              	.LBB102:
 306:src/console.c ****   temp.key_34s = key;
 2409              		.loc 2 306 3 view .LVU608
 307:src/console.c ****   temp.shift = shift;
 2410              		.loc 2 307 3 view .LVU609
 307:src/console.c ****   temp.shift = shift;
 2411              		.loc 2 307 16 is_stmt 0 view .LVU610
 2412 0156 6323     		movs	r3, #99
ARM GAS  /tmp/cckAiVOj.s 			page 65


 308:src/console.c ****   process_keycode_with_shift (temp);
 2413              		.loc 2 308 14 view .LVU611
 2414 0158 0027     		movs	r7, #0
 307:src/console.c ****   temp.shift = shift;
 2415              		.loc 2 307 16 view .LVU612
 2416 015a 8DF80830 		strb	r3, [sp, #8]
 308:src/console.c ****   process_keycode_with_shift (temp);
 2417              		.loc 2 308 3 is_stmt 1 view .LVU613
 308:src/console.c ****   process_keycode_with_shift (temp);
 2418              		.loc 2 308 14 is_stmt 0 view .LVU614
 2419 015e 0397     		str	r7, [sp, #12]
 309:src/console.c **** }
 2420              		.loc 2 309 3 is_stmt 1 view .LVU615
 2421 0160 02AE     		add	r6, sp, #8
 2422 0162 96E80300 		ldm	r6, {r0, r1}
 2423              	.LVL201:
 309:src/console.c **** }
 2424              		.loc 2 309 3 is_stmt 0 view .LVU616
 2425 0166 FFF7FEFF 		bl	process_keycode_with_shift
 2426              	.LVL202:
 309:src/console.c **** }
 2427              		.loc 2 309 3 view .LVU617
 2428              	.LBE102:
 2429              	.LBE101:
 363:src/console.c ****     r = no_key;
 2430              		.loc 2 363 5 is_stmt 1 view .LVU618
 2431              	.LBB103:
 2432              	.LBI103:
 305:src/console.c ****   struct _ndmap temp;
 2433              		.loc 2 305 6 view .LVU619
 2434              	.LBB104:
 306:src/console.c ****   temp.key_34s = key;
 2435              		.loc 2 306 3 view .LVU620
 307:src/console.c ****   temp.shift = shift;
 2436              		.loc 2 307 3 view .LVU621
 307:src/console.c ****   temp.shift = shift;
 2437              		.loc 2 307 16 is_stmt 0 view .LVU622
 2438 016a 3323     		movs	r3, #51
 2439 016c 8DF80830 		strb	r3, [sp, #8]
 308:src/console.c ****   process_keycode_with_shift (temp);
 2440              		.loc 2 308 3 is_stmt 1 view .LVU623
 309:src/console.c **** }
 2441              		.loc 2 309 3 view .LVU624
 308:src/console.c ****   process_keycode_with_shift (temp);
 2442              		.loc 2 308 14 is_stmt 0 view .LVU625
 2443 0170 0397     		str	r7, [sp, #12]
 309:src/console.c **** }
 2444              		.loc 2 309 3 view .LVU626
 2445 0172 96E80300 		ldm	r6, {r0, r1}
 2446 0176 FFF7FEFF 		bl	process_keycode_with_shift
 2447              	.LVL203:
 309:src/console.c **** }
 2448              		.loc 2 309 3 view .LVU627
 2449              	.LBE104:
 2450              	.LBE103:
 364:src/console.c ****     break;
 2451              		.loc 2 364 5 is_stmt 1 view .LVU628
ARM GAS  /tmp/cckAiVOj.s 			page 66


 364:src/console.c ****     break;
 2452              		.loc 2 364 7 is_stmt 0 view .LVU629
 2453 017a 0C4B     		ldr	r3, .L181+12
 2454 017c 93E80300 		ldm	r3, {r0, r1}
 2455 0180 84E80300 		stm	r4, {r0, r1}
 2456 0184 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2457              	.LVL204:
 365:src/console.c ****   case DEFMEN:
 2458              		.loc 2 365 5 is_stmt 1 view .LVU630
 2459 0186 7AE7     		b	.L177
 2460              	.LVL205:
 2461              	.L180:
 2462              	.LBB105:
 2463              	.LBB90:
 102:src/menu.c    ****   }
 2464              		.loc 1 102 5 view .LVU631
 102:src/menu.c    ****   }
 2465              		.loc 1 102 38 is_stmt 0 view .LVU632
 2466 0188 C3F10F03 		rsb	r3, r3, #15
 102:src/menu.c    ****   }
 2467              		.loc 1 102 33 view .LVU633
 2468 018c 0B60     		str	r3, [r1]
 102:src/menu.c    ****   }
 2469              		.loc 1 102 18 view .LVU634
 2470 018e 1360     		str	r3, [r2]
 2471 0190 51E7     		b	.L178
 2472              	.LVL206:
 2473              	.L162:
 102:src/menu.c    ****   }
 2474              		.loc 1 102 18 view .LVU635
 2475              	.LBE90:
 2476              	.LBE105:
 371:src/console.c ****   }
 2477              		.loc 2 371 5 is_stmt 1 view .LVU636
 371:src/console.c ****   }
 2478              		.loc 2 371 7 is_stmt 0 view .LVU637
 2479 0192 064B     		ldr	r3, .L181+12
 2480 0194 93E80300 		ldm	r3, {r0, r1}
 2481              	.LVL207:
 371:src/console.c ****   }
 2482              		.loc 2 371 7 view .LVU638
 2483 0198 84E80300 		stm	r4, {r0, r1}
 2484 019c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2485              	.LVL208:
 371:src/console.c ****   }
 2486              		.loc 2 371 7 view .LVU639
 2487 019e 6EE7     		b	.L177
 2488              	.L182:
 2489              		.align	2
 2490              	.L181:
 2491 01a0 00000000 		.word	.LANCHOR2
 2492 01a4 00000000 		.word	.LANCHOR1
 2493 01a8 00000000 		.word	.LANCHOR9
 2494 01ac 00000000 		.word	.LANCHOR8
 2495 01b0 49040008 		.word	134218825
 2496 01b4 00000000 		.word	.LC12
 2497              		.cfi_endproc
ARM GAS  /tmp/cckAiVOj.s 			page 67


 2498              	.LFE27:
 2500              		.section	.text.program_main,"ax",%progbits
 2501              		.align	1
 2502              		.p2align 2,,3
 2503              		.global	program_main
 2504              		.syntax unified
 2505              		.thumb
 2506              		.thumb_func
 2507              		.fpu fpv4-sp-d16
 2509              	program_main:
 2510              	.LFB28:
 375:src/console.c **** 
 376:src/console.c **** void program_main(){
 2511              		.loc 2 376 20 is_stmt 1 view -0
 2512              		.cfi_startproc
 2513              		@ args = 0, pretend = 0, frame = 16
 2514              		@ frame_needed = 0, uses_anonymous_args = 0
 377:src/console.c ****   int c;
 2515              		.loc 2 377 3 view .LVU641
 378:src/console.c ****   struct _ndmap remapped;
 2516              		.loc 2 378 3 view .LVU642
 379:src/console.c **** 
 380:src/console.c ****   init_mem();
 2517              		.loc 2 380 3 view .LVU643
 376:src/console.c ****   int c;
 2518              		.loc 2 376 20 is_stmt 0 view .LVU644
 2519 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2520              		.cfi_def_cfa_offset 32
 2521              		.cfi_offset 4, -32
 2522              		.cfi_offset 5, -28
 2523              		.cfi_offset 6, -24
 2524              		.cfi_offset 7, -20
 2525              		.cfi_offset 8, -16
 2526              		.cfi_offset 9, -12
 2527              		.cfi_offset 10, -8
 2528              		.cfi_offset 14, -4
 2529 0004 84B0     		sub	sp, sp, #16
 2530              		.cfi_def_cfa_offset 48
 2531              		.loc 2 380 3 view .LVU645
 2532 0006 FFF7FEFF 		bl	init_mem
 2533              	.LVL209:
 381:src/console.c ****   init_RegionTab();
 2534              		.loc 2 381 3 is_stmt 1 view .LVU646
 2535 000a FFF7FEFF 		bl	init_RegionTab
 2536              	.LVL210:
 382:src/console.c ****   init_34s();
 2537              		.loc 2 382 3 view .LVU647
 2538 000e FFF7FEFF 		bl	init_34s
 2539              	.LVL211:
 383:src/console.c ****   State2.flags = 1;  
 2540              		.loc 2 383 3 view .LVU648
 2541              		.loc 2 383 16 is_stmt 0 view .LVU649
 2542 0012 AC4A     		ldr	r2, .L282
 2543 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 2544 0016 43F00103 		orr	r3, r3, #1
 2545 001a 1376     		strb	r3, [r2, #24]
 384:src/console.c ****   check_create_wp34sdir();
ARM GAS  /tmp/cckAiVOj.s 			page 68


 2546              		.loc 2 384 3 is_stmt 1 view .LVU650
 2547 001c FFF7FEFF 		bl	check_create_wp34sdir
 2548              	.LVL212:
 385:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 2549              		.loc 2 385 3 view .LVU651
 2550              		.loc 2 385 8 is_stmt 0 view .LVU652
 2551 0020 0020     		movs	r0, #0
 2552 0022 FFF7FEFF 		bl	load_ram_file
 2553              	.LVL213:
 2554              		.loc 2 385 6 view .LVU653
 2555 0026 08B9     		cbnz	r0, .L184
 2556              		.loc 2 385 26 is_stmt 1 discriminator 1 view .LVU654
 2557              		.loc 2 385 34 is_stmt 0 discriminator 1 view .LVU655
 2558 0028 A74B     		ldr	r3, .L282+4
 2559 002a 1860     		str	r0, [r3]
 2560              	.L184:
 386:src/console.c ****   load_backup_file(0);
 2561              		.loc 2 386 3 is_stmt 1 view .LVU656
 387:src/console.c ****   load_lib_file(0);
 388:src/console.c ****   t20->newln = 0;
 2562              		.loc 2 388 3 is_stmt 0 view .LVU657
 2563 002c A74C     		ldr	r4, .L282+8
 2564              	.LBB121:
 2565              	.LBB122:
 111:src/menu.c    **** }
 2566              		.loc 1 111 3 view .LVU658
 2567 002e A84E     		ldr	r6, .L282+12
 2568              	.LBE122:
 2569              	.LBE121:
 389:src/console.c ****   t20->lnfill = 0;
 390:src/console.c ****   t20->fixed = 1;
 391:src/console.c ****   t20->xspc = -2;
 392:src/console.c ****   t20->bgfill = 0;
 393:src/console.c ****   run_menu_item_app = run_menu_item;
 394:src/console.c ****   menu_line_str_app = menu_line_str;
 395:src/console.c **** 
 396:src/console.c ****   display();
 397:src/console.c ****   display_current_menu();
 398:src/console.c ****   lcd_refresh();
 399:src/console.c ****   JustDisplayed = 0;
 400:src/console.c ****   /*
 401:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 402:src/console.c ****     Sleeps peacefully while waiting for a key.
 403:src/console.c ****     Handles (in principle!) turning off and on.
 404:src/console.c ****     =================
 405:src/console.c ****     Main event loop
 406:src/console.c ****     =================
 407:src/console.c **** 
 408:src/console.c ****     Status flags:
 409:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 410:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 411:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 412:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 413:src/console.c ****   */
 414:src/console.c ****   for(;;) {
 415:src/console.c **** 
 416:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
ARM GAS  /tmp/cckAiVOj.s 			page 69


 417:src/console.c ****       {
 418:src/console.c **** 	CLR_ST(STAT_RUNNING);
 419:src/console.c **** 	sys_sleep();
 420:src/console.c ****       }
 421:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 2570              		.loc 2 421 35 view .LVU659
 2571 0030 A84F     		ldr	r7, .L282+16
 422:src/console.c ****     {
 423:src/console.c ****       CLR_ST(STAT_RUNNING);
 424:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2572              		.loc 2 424 7 view .LVU660
 2573 0032 DFF82083 		ldr	r8, .L282+144
 386:src/console.c ****   load_lib_file(0);
 2574              		.loc 2 386 3 view .LVU661
 2575 0036 0020     		movs	r0, #0
 2576 0038 FFF7FEFF 		bl	load_backup_file
 2577              	.LVL214:
 387:src/console.c ****   t20->newln = 0;
 2578              		.loc 2 387 3 is_stmt 1 view .LVU662
 2579 003c 0020     		movs	r0, #0
 2580 003e FFF7FEFF 		bl	load_lib_file
 2581              	.LVL215:
 388:src/console.c ****   t20->lnfill = 0;
 2582              		.loc 2 388 3 view .LVU663
 2583 0042 236B     		ldr	r3, [r4, #48]
 389:src/console.c ****   t20->fixed = 1;
 2584              		.loc 2 389 3 view .LVU664
 390:src/console.c ****   t20->xspc = -2;
 2585              		.loc 2 390 3 view .LVU665
 393:src/console.c ****   menu_line_str_app = menu_line_str;
 2586              		.loc 2 393 21 is_stmt 0 view .LVU666
 2587 0044 A44A     		ldr	r2, .L282+20
 390:src/console.c ****   t20->xspc = -2;
 2588              		.loc 2 390 14 view .LVU667
 2589 0046 0121     		movs	r1, #1
 2590 0048 1974     		strb	r1, [r3, #16]
 391:src/console.c ****   t20->bgfill = 0;
 2591              		.loc 2 391 3 is_stmt 1 view .LVU668
 392:src/console.c ****   run_menu_item_app = run_menu_item;
 2592              		.loc 2 392 15 is_stmt 0 view .LVU669
 2593 004a 0025     		movs	r5, #0
 391:src/console.c ****   t20->bgfill = 0;
 2594              		.loc 2 391 13 view .LVU670
 2595 004c FE21     		movs	r1, #254
 2596 004e 9973     		strb	r1, [r3, #14]
 392:src/console.c ****   run_menu_item_app = run_menu_item;
 2597              		.loc 2 392 3 is_stmt 1 view .LVU671
 392:src/console.c ****   run_menu_item_app = run_menu_item;
 2598              		.loc 2 392 15 is_stmt 0 view .LVU672
 2599 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 388:src/console.c ****   t20->lnfill = 0;
 2600              		.loc 2 388 14 view .LVU673
 2601 0052 1D75     		strb	r5, [r3, #20]
 393:src/console.c ****   menu_line_str_app = menu_line_str;
 2602              		.loc 2 393 3 is_stmt 1 view .LVU674
 394:src/console.c **** 
 2603              		.loc 2 394 21 is_stmt 0 view .LVU675
ARM GAS  /tmp/cckAiVOj.s 			page 70


 2604 0054 A14B     		ldr	r3, .L282+24
 393:src/console.c ****   menu_line_str_app = menu_line_str;
 2605              		.loc 2 393 21 view .LVU676
 2606 0056 E260     		str	r2, [r4, #12]
 394:src/console.c **** 
 2607              		.loc 2 394 3 is_stmt 1 view .LVU677
 394:src/console.c **** 
 2608              		.loc 2 394 21 is_stmt 0 view .LVU678
 2609 0058 2361     		str	r3, [r4, #16]
 396:src/console.c ****   display_current_menu();
 2610              		.loc 2 396 3 is_stmt 1 view .LVU679
 2611 005a FFF7FEFF 		bl	display
 2612              	.LVL216:
 397:src/console.c ****   lcd_refresh();
 2613              		.loc 2 397 3 view .LVU680
 2614              	.LBB124:
 2615              	.LBI121:
 110:src/menu.c    ****   display_menu (current_menu);
 2616              		.loc 1 110 6 view .LVU681
 2617              	.LBB123:
 111:src/menu.c    **** }
 2618              		.loc 1 111 3 view .LVU682
 2619 005e 3068     		ldr	r0, [r6]
 2620 0060 FFF7FEFF 		bl	display_menu
 2621              	.LVL217:
 2622              	.LBE123:
 2623              	.LBE124:
 398:src/console.c ****   JustDisplayed = 0;
 2624              		.loc 2 398 3 view .LVU683
 2625 0064 9E4B     		ldr	r3, .L282+28
 2626 0066 9847     		blx	r3
 2627              	.LVL218:
 399:src/console.c ****   /*
 2628              		.loc 2 399 3 view .LVU684
 399:src/console.c ****   /*
 2629              		.loc 2 399 17 is_stmt 0 view .LVU685
 2630 0068 9E4B     		ldr	r3, .L282+32
 2631 006a 1D60     		str	r5, [r3]
 2632              	.L185:
 414:src/console.c **** 
 2633              		.loc 2 414 3 is_stmt 1 view .LVU686
 416:src/console.c ****       {
 2634              		.loc 2 416 5 view .LVU687
 416:src/console.c ****       {
 2635              		.loc 2 416 10 is_stmt 0 view .LVU688
 2636 006c 2368     		ldr	r3, [r4]
 416:src/console.c ****       {
 2637              		.loc 2 416 8 view .LVU689
 2638 006e 9D05     		lsls	r5, r3, #22
 2639 0070 40F18380 		bpl	.L186
 2640              	.L266:
 416:src/console.c ****       {
 2641              		.loc 2 416 30 discriminator 1 view .LVU690
 2642 0074 2368     		ldr	r3, [r4]
 416:src/console.c ****       {
 2643              		.loc 2 416 27 discriminator 1 view .LVU691
 2644 0076 5807     		lsls	r0, r3, #29
ARM GAS  /tmp/cckAiVOj.s 			page 71


 2645 0078 7FD5     		bpl	.L186
 418:src/console.c **** 	sys_sleep();
 2646              		.loc 2 418 2 is_stmt 1 view .LVU692
 2647 007a 2368     		ldr	r3, [r4]
 419:src/console.c ****       }
 2648              		.loc 2 419 2 is_stmt 0 view .LVU693
 2649 007c 9A4A     		ldr	r2, .L282+36
 418:src/console.c **** 	sys_sleep();
 2650              		.loc 2 418 2 view .LVU694
 2651 007e 23F00203 		bic	r3, r3, #2
 2652 0082 2360     		str	r3, [r4]
 419:src/console.c ****       }
 2653              		.loc 2 419 2 is_stmt 1 view .LVU695
 2654 0084 9047     		blx	r2
 2655              	.LVL219:
 2656              	.L187:
 425:src/console.c ****       sys_sleep();
 426:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 427:src/console.c **** 	key_push (K_HEARTBEAT);
 428:src/console.c **** 	if (Pause > 0) Pause--;
 429:src/console.c ****       }
 430:src/console.c ****       sys_timer_disable(0); // stop timer
 431:src/console.c ****     }
 432:src/console.c ****     
 433:src/console.c ****     // Wakeup in off state or going to sleep
 434:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 2657              		.loc 2 434 5 view .LVU696
 2658              		.loc 2 434 9 is_stmt 0 view .LVU697
 2659 0086 2368     		ldr	r3, [r4]
 2660              		.loc 2 434 8 view .LVU698
 2661 0088 9905     		lsls	r1, r3, #22
 2662 008a 00F19C80 		bmi	.L193
 2663              	.L267:
 2664              		.loc 2 434 29 discriminator 1 view .LVU699
 2665 008e 2368     		ldr	r3, [r4]
 2666              		.loc 2 434 26 discriminator 1 view .LVU700
 2667 0090 5A07     		lsls	r2, r3, #29
 2668 0092 00F19880 		bmi	.L193
 435:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 436:src/console.c ****         // Going to off mode
 437:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 438:src/console.c ****         draw_power_off_image(1);
 439:src/console.c **** 
 440:src/console.c ****         LCD_power_off(0);
 441:src/console.c ****         SET_ST(STAT_SUSPENDED);
 442:src/console.c ****         SET_ST(STAT_OFF);
 443:src/console.c ****       }
 444:src/console.c ****       // Already in OFF -> just continue to sleep above
 445:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 446:src/console.c ****       // thus reaching the sleep()
 447:src/console.c ****     }
 448:src/console.c **** 
 449:src/console.c ****     // Well, we are woken-up
 450:src/console.c ****     SET_ST(STAT_RUNNING);
 2669              		.loc 2 450 5 is_stmt 1 view .LVU701
 2670 0096 2368     		ldr	r3, [r4]
 2671 0098 43F00203 		orr	r3, r3, #2
ARM GAS  /tmp/cckAiVOj.s 			page 72


 2672 009c 2360     		str	r3, [r4]
 451:src/console.c **** 
 452:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 453:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 2673              		.loc 2 453 5 view .LVU702
 2674 009e 2368     		ldr	r3, [r4]
 2675 00a0 23F00403 		bic	r3, r3, #4
 2676 00a4 2360     		str	r3, [r4]
 454:src/console.c **** 
 455:src/console.c ****     // Get up from OFF state
 456:src/console.c ****     if ( ST(STAT_OFF) ) {
 2677              		.loc 2 456 5 view .LVU703
 2678              		.loc 2 456 10 is_stmt 0 view .LVU704
 2679 00a6 2368     		ldr	r3, [r4]
 2680              		.loc 2 456 8 view .LVU705
 2681 00a8 DB06     		lsls	r3, r3, #27
 2682 00aa 0ED5     		bpl	.L198
 457:src/console.c ****       LCD_power_on();
 2683              		.loc 2 457 7 is_stmt 1 view .LVU706
 2684 00ac 8F4B     		ldr	r3, .L282+40
 2685 00ae 9847     		blx	r3
 2686              	.LVL220:
 458:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 2687              		.loc 2 458 7 view .LVU707
 2688 00b0 8F4B     		ldr	r3, .L282+44
 2689 00b2 9847     		blx	r3
 2690              	.LVL221:
 459:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 2691              		.loc 2 459 7 view .LVU708
 2692 00b4 8F4B     		ldr	r3, .L282+48
 2693 00b6 9847     		blx	r3
 2694              	.LVL222:
 460:src/console.c **** 
 461:src/console.c ****       CLR_ST(STAT_OFF);
 2695              		.loc 2 461 7 view .LVU709
 2696 00b8 2368     		ldr	r3, [r4]
 462:src/console.c **** 
 463:src/console.c ****       if ( !lcd_get_buf_cleared() )
 2697              		.loc 2 463 13 is_stmt 0 view .LVU710
 2698 00ba 8F4A     		ldr	r2, .L282+52
 461:src/console.c **** 
 2699              		.loc 2 461 7 view .LVU711
 2700 00bc 23F01003 		bic	r3, r3, #16
 2701 00c0 2360     		str	r3, [r4]
 2702              		.loc 2 463 7 is_stmt 1 view .LVU712
 2703              		.loc 2 463 13 is_stmt 0 view .LVU713
 2704 00c2 9047     		blx	r2
 2705              	.LVL223:
 2706              		.loc 2 463 10 view .LVU714
 2707 00c4 08B9     		cbnz	r0, .L198
 464:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 2708              		.loc 2 464 9 is_stmt 1 view .LVU715
 2709 00c6 8D4B     		ldr	r3, .L282+56
 2710 00c8 9847     		blx	r3
 2711              	.LVL224:
 2712              	.L198:
 465:src/console.c ****     }
ARM GAS  /tmp/cckAiVOj.s 			page 73


 466:src/console.c **** 
 467:src/console.c ****     // Key is ready -> clear auto off timer
 468:src/console.c ****     //    if ( !key_empty() )
 469:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 470:src/console.c ****     // Fetch the key
 471:src/console.c ****     //  < 0 -> No key event
 472:src/console.c ****     //  > 0 -> Key pressed
 473:src/console.c ****     // == 0 -> Key released
 474:src/console.c ****     c = key_pop();
 2713              		.loc 2 474 5 view .LVU716
 2714              		.loc 2 474 9 is_stmt 0 view .LVU717
 2715 00ca 8D4B     		ldr	r3, .L282+60
 2716 00cc 9847     		blx	r3
 2717              	.LVL225:
 475:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2718              		.loc 2 475 8 view .LVU718
 2719 00ce 6228     		cmp	r0, #98
 474:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2720              		.loc 2 474 9 view .LVU719
 2721 00d0 0546     		mov	r5, r0
 2722              	.LVL226:
 2723              		.loc 2 475 5 is_stmt 1 view .LVU720
 2724              		.loc 2 475 8 is_stmt 0 view .LVU721
 2725 00d2 00F09280 		beq	.L200
 2726              		.loc 2 475 29 discriminator 1 view .LVU722
 2727 00d6 0028     		cmp	r0, #0
 2728 00d8 40F38C80 		ble	.L201
 476:src/console.c ****       reset_auto_off();
 2729              		.loc 2 476 7 is_stmt 1 view .LVU723
 2730 00dc 894B     		ldr	r3, .L282+64
 2731 00de 9847     		blx	r3
 2732              	.LVL227:
 477:src/console.c ****       start_key_timer();
 2733              		.loc 2 477 7 view .LVU724
 2734              	.LBB125:
 2735              	.LBI125:
 247:src/console.c ****     start_ticks = get_rtc_ticks();
 2736              		.loc 2 247 6 view .LVU725
 2737              	.LBB126:
 248:src/console.c **** }
 2738              		.loc 2 248 5 view .LVU726
 248:src/console.c **** }
 2739              		.loc 2 248 19 is_stmt 0 view .LVU727
 2740 00e0 894B     		ldr	r3, .L282+68
 2741 00e2 9847     		blx	r3
 2742              	.LVL228:
 248:src/console.c **** }
 2743              		.loc 2 248 17 view .LVU728
 2744 00e4 894B     		ldr	r3, .L282+72
 2745              	.LBE126:
 2746              	.LBE125:
 2747              	.LBB128:
 2748              	.LBB129:
  61:src/console.c **** 
 2749              		.loc 2 61 6 view .LVU729
 2750 00e6 632D     		cmp	r5, #99
 2751              	.LBE129:
ARM GAS  /tmp/cckAiVOj.s 			page 74


 2752              	.LBE128:
 2753              	.LBB140:
 2754              	.LBB127:
 248:src/console.c **** }
 2755              		.loc 2 248 17 view .LVU730
 2756 00e8 1860     		str	r0, [r3]
 2757              	.LBE127:
 2758              	.LBE140:
 478:src/console.c ****     }
 479:src/console.c ****     if (c >= 0) {
 2759              		.loc 2 479 5 is_stmt 1 view .LVU731
 480:src/console.c ****       remapped = remap(c);
 2760              		.loc 2 480 7 view .LVU732
 2761              	.LVL229:
 2762              	.LBB141:
 2763              	.LBI128:
  53:src/console.c **** 
 2764              		.loc 2 53 22 view .LVU733
 2765              	.LBB131:
  55:src/console.c **** 
 2766              		.loc 2 55 3 view .LVU734
 2767              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 2768              		.loc 3 1 1 view .LVU735
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
ARM GAS  /tmp/cckAiVOj.s 			page 75


  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 2769              		.loc 3 59 3 view .LVU736
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU, 14}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
ARM GAS  /tmp/cckAiVOj.s 			page 76


  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  96:src/keytran.c ****     {K_NOP, 0}, // no function
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 2770              		.loc 3 117 3 view .LVU737
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
ARM GAS  /tmp/cckAiVOj.s 			page 77


 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 2771              		.loc 3 175 1 view .LVU738
 176:src/keytran.c ****     {K_RELEASE, -1},
 177:src/keytran.c ****     // Top row of DM42 1--6
 178:src/keytran.c ****     {K00, -1},
 179:src/keytran.c ****     {K01, -1},
 180:src/keytran.c ****     {K02, -1},
 181:src/keytran.c ****     {K03, -1},
 182:src/keytran.c ****     {K04, -1},
 183:src/keytran.c ****     {K05, -1},
 184:src/keytran.c ****     // Next row of DM42 7--12
 185:src/keytran.c ****     {K10, -1},
 186:src/keytran.c ****     {K11, -1},
 187:src/keytran.c ****     {K12, -1},
 188:src/keytran.c ****     {K13, -1},
 189:src/keytran.c ****     {K14, -1},
 190:src/keytran.c ****     {K15, -1},
 191:src/keytran.c ****     // Third row of DM42 13--17
 192:src/keytran.c ****     {K20, -1},
 193:src/keytran.c ****     {K21, -1},
 194:src/keytran.c ****     {K22, -1},
 195:src/keytran.c ****     {K23, -1},
 196:src/keytran.c ****     {K24, -1},
 197:src/keytran.c ****     // Fourth row of DM42 18--22
 198:src/keytran.c ****     {K30, -1},
 199:src/keytran.c ****     {K31, -1},
 200:src/keytran.c ****     {K32, -1},
 201:src/keytran.c ****     {K33, -1},
 202:src/keytran.c ****     {K34, -1},
ARM GAS  /tmp/cckAiVOj.s 			page 78


 203:src/keytran.c ****     // Fifth row of DM42 23--27
 204:src/keytran.c ****     {K40, -1},
 205:src/keytran.c ****     {K41, -1},
 206:src/keytran.c ****     {K42, -1},
 207:src/keytran.c ****     {K43, -1},
 208:src/keytran.c ****     {K44, -1},
 209:src/keytran.c ****     // Sixth row of DM42 28--32
 210:src/keytran.c ****     {K50, -1},
 211:src/keytran.c ****     {K51, -1},
 212:src/keytran.c ****     {K52, -1},
 213:src/keytran.c ****     {K53, -1},
 214:src/keytran.c ****     {K54, -1},
 215:src/keytran.c ****     // Last row of DM42 33--37
 216:src/keytran.c ****     {K60, -1},
 217:src/keytran.c ****     {K61, -1},
 218:src/keytran.c ****     {K62, -1},
 219:src/keytran.c ****     {K63, -1},
 220:src/keytran.c ****     {K64, -1},
 221:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 222:src/keytran.c ****     {K_NOP, -1},
 223:src/keytran.c ****     {K_NOP, -1},
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_ARROW, -1}, //F5 is always K_ARROW in all menus
 227:src/keytran.c ****     {K_NOP, -1},
 228:src/keytran.c ****     {K_NOP, -1},
 229:src/keytran.c ****     {K_NOP, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c **** };
 232:src/keytran.c **** 
 233:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 2772              		.loc 3 233 1 view .LVU739
  59:src/console.c **** 
 2773              		.loc 2 59 3 view .LVU740
  61:src/console.c **** 
 2774              		.loc 2 61 3 view .LVU741
  61:src/console.c **** 
 2775              		.loc 2 61 6 is_stmt 0 view .LVU742
 2776 00ea 00F0E280 		beq	.L263
  63:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 2777              		.loc 2 63 3 is_stmt 1 view .LVU743
  63:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 2778              		.loc 2 63 6 is_stmt 0 view .LVU744
 2779 00ee 2C2D     		cmp	r5, #44
 2780 00f0 00F0AB80 		beq	.L239
 2781              	.LVL230:
 2782              	.L238:
  68:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2783              		.loc 2 68 3 is_stmt 1 view .LVU745
  68:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2784              		.loc 2 68 8 is_stmt 0 view .LVU746
 2785 00f4 FFF7FEFF 		bl	get_alpha_state
 2786              	.LVL231:
  68:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2787              		.loc 2 68 6 view .LVU747
 2788 00f8 0028     		cmp	r0, #0
 2789 00fa 00F0C980 		beq	.L205
ARM GAS  /tmp/cckAiVOj.s 			page 79


  69:src/console.c ****       switch (cur_shift()) { 
 2790              		.loc 2 69 5 is_stmt 1 view .LVU748
  69:src/console.c ****       switch (cur_shift()) { 
 2791              		.loc 2 69 8 is_stmt 0 view .LVU749
 2792 00fe 1C2D     		cmp	r5, #28
 2793 0100 00F03A81 		beq	.L264
  86:src/console.c ****   }
 2794              		.loc 2 86 5 is_stmt 1 view .LVU750
  86:src/console.c ****   }
 2795              		.loc 2 86 26 is_stmt 0 view .LVU751
 2796 0104 824B     		ldr	r3, .L282+76
 2797              	.L260:
 119:src/console.c ****     break;
 2798              		.loc 2 119 26 view .LVU752
 2799 0106 03EBC502 		add	r2, r3, r5, lsl #3
 2800 010a 92E80300 		ldm	r2, {r0, r1}
 2801 010e 0DF1080A 		add	r10, sp, #8
 2802 0112 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 2803              	.LVL232:
 119:src/console.c ****     break;
 2804              		.loc 2 119 26 view .LVU753
 2805 0116 8AE80300 		stm	r10, {r0, r1}
 2806 011a 8946     		mov	r9, r1
 2807              	.LVL233:
 2808              	.L203:
 119:src/console.c ****     break;
 2809              		.loc 2 119 26 view .LVU754
 2810              	.LBE131:
 2811              	.LBE141:
 481:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2812              		.loc 2 481 7 is_stmt 1 view .LVU755
 2813              		.loc 2 481 10 is_stmt 0 view .LVU756
 2814 011c 2F2D     		cmp	r5, #47
 2815 011e 77D0     		beq	.L265
 2816              	.LVL234:
 2817              	.L228:
 482:src/console.c **** 	set_menu ( remapped.shift );
 483:src/console.c **** 	display_current_menu ();
 484:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 485:src/console.c **** 	case SHIFT_F:
 486:src/console.c **** 	  remapped = f_shift; // F -> N
 487:src/console.c **** 	  break;
 488:src/console.c **** 	case SHIFT_G:
 489:src/console.c **** 	  remapped = g_shift; // G -> N
 490:src/console.c **** 	  break;
 491:src/console.c **** 	case SHIFT_H:
 492:src/console.c **** 	  remapped = h_shift; // H -> N
 493:src/console.c **** 	default:
 494:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 495:src/console.c **** 	}
 496:src/console.c ****       }
 497:src/console.c ****       if (remapped.key_34s == K_SYS) {
 2818              		.loc 2 497 7 is_stmt 1 view .LVU757
 2819              		.loc 2 497 10 is_stmt 0 view .LVU758
 2820 0120 302D     		cmp	r5, #48
 2821 0122 17D1     		bne	.L235
 498:src/console.c **** 	SET_ST(STAT_MENU);
ARM GAS  /tmp/cckAiVOj.s 			page 80


 2822              		.loc 2 498 2 is_stmt 1 view .LVU759
 2823 0124 2368     		ldr	r3, [r4]
 499:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 2824              		.loc 2 499 2 is_stmt 0 view .LVU760
 2825 0126 7B4D     		ldr	r5, .L282+80
 2826              	.LVL235:
 2827              		.loc 2 499 2 view .LVU761
 2828 0128 7B48     		ldr	r0, .L282+84
 2829 012a 0022     		movs	r2, #0
 498:src/console.c **** 	SET_ST(STAT_MENU);
 2830              		.loc 2 498 2 view .LVU762
 2831 012c 43F04003 		orr	r3, r3, #64
 2832              		.loc 2 499 2 view .LVU763
 2833 0130 1146     		mov	r1, r2
 498:src/console.c **** 	SET_ST(STAT_MENU);
 2834              		.loc 2 498 2 view .LVU764
 2835 0132 2360     		str	r3, [r4]
 2836              		.loc 2 499 2 is_stmt 1 view .LVU765
 2837 0134 A847     		blx	r5
 2838              	.LVL236:
 500:src/console.c **** 	CLR_ST(STAT_MENU);
 2839              		.loc 2 500 2 view .LVU766
 501:src/console.c **** 	remapped =  no_key;
 2840              		.loc 2 501 11 is_stmt 0 view .LVU767
 2841 0136 794B     		ldr	r3, .L282+88
 500:src/console.c **** 	CLR_ST(STAT_MENU);
 2842              		.loc 2 500 2 view .LVU768
 2843 0138 2268     		ldr	r2, [r4]
 2844              		.loc 2 501 11 view .LVU769
 2845 013a 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 2846 013c 93E80300 		ldm	r3, {r0, r1}
 500:src/console.c **** 	CLR_ST(STAT_MENU);
 2847              		.loc 2 500 2 view .LVU770
 2848 0140 22F04002 		bic	r2, r2, #64
 2849 0144 2260     		str	r2, [r4]
 2850              		.loc 2 501 2 is_stmt 1 view .LVU771
 2851              	.LVL237:
 2852              		.loc 2 501 11 is_stmt 0 view .LVU772
 2853 0146 04AA     		add	r2, sp, #16
 2854 0148 02E90300 		stmdb	r2, {r0, r1}
 2855              	.LBB142:
 2856              	.LBB143:
 111:src/menu.c    **** }
 2857              		.loc 1 111 3 view .LVU773
 2858 014c 3068     		ldr	r0, [r6]
 2859              	.LBE143:
 2860              	.LBE142:
 2861              		.loc 2 501 11 view .LVU774
 2862 014e 8946     		mov	r9, r1
 2863              	.LVL238:
 502:src/console.c **** 	display_current_menu();
 2864              		.loc 2 502 2 is_stmt 1 view .LVU775
 2865              	.LBB145:
 2866              	.LBI142:
 110:src/menu.c    ****   display_menu (current_menu);
 2867              		.loc 1 110 6 view .LVU776
 2868              	.LBB144:
ARM GAS  /tmp/cckAiVOj.s 			page 81


 111:src/menu.c    **** }
 2869              		.loc 1 111 3 view .LVU777
 2870 0150 FFF7FEFF 		bl	display_menu
 2871              	.LVL239:
 2872              	.L235:
 111:src/menu.c    **** }
 2873              		.loc 1 111 3 is_stmt 0 view .LVU778
 2874              	.LBE144:
 2875              	.LBE145:
 503:src/console.c ****       }
 504:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 2876              		.loc 2 504 7 is_stmt 1 view .LVU779
 2877              		.loc 2 504 10 is_stmt 0 view .LVU780
 2878 0154 312D     		cmp	r5, #49
 2879 0156 7AD0     		beq	.L204
 505:src/console.c **** 	remapped = do_multi (remapped);
 506:src/console.c **** 	display_current_menu();
 507:src/console.c ****       }
 508:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 2880              		.loc 2 508 7 is_stmt 1 view .LVU781
 2881              		.loc 2 508 10 is_stmt 0 view .LVU782
 2882 0158 322D     		cmp	r5, #50
 2883 015a 00F09380 		beq	.L237
 2884              	.LVL240:
 2885              	.L262:
 2886              		.loc 2 508 10 view .LVU783
 2887 015e 0DF1080A 		add	r10, sp, #8
 2888              	.L207:
 2889              	.LVL241:
 509:src/console.c ****       process_keycode_with_shift(remapped);
 2890              		.loc 2 509 7 is_stmt 1 view .LVU784
 2891              		.loc 2 509 7 is_stmt 0 view .LVU785
 2892 0162 8DF80850 		strb	r5, [sp, #8]
 2893 0166 CDF80C90 		str	r9, [sp, #12]
 2894 016a 9AE80300 		ldm	r10, {r0, r1}
 2895 016e FFF7FEFF 		bl	process_keycode_with_shift
 2896              	.LVL242:
 414:src/console.c **** 
 2897              		.loc 2 414 3 is_stmt 1 view .LVU786
 416:src/console.c ****       {
 2898              		.loc 2 416 5 view .LVU787
 416:src/console.c ****       {
 2899              		.loc 2 416 10 is_stmt 0 view .LVU788
 2900 0172 2368     		ldr	r3, [r4]
 416:src/console.c ****       {
 2901              		.loc 2 416 8 view .LVU789
 2902 0174 9D05     		lsls	r5, r3, #22
 2903              	.LVL243:
 416:src/console.c ****       {
 2904              		.loc 2 416 8 view .LVU790
 2905 0176 3FF57DAF 		bmi	.L266
 2906              	.LVL244:
 2907              	.L186:
 421:src/console.c ****     {
 2908              		.loc 2 421 10 is_stmt 1 view .LVU791
 421:src/console.c ****     {
 2909              		.loc 2 421 15 is_stmt 0 view .LVU792
ARM GAS  /tmp/cckAiVOj.s 			page 82


 2910 017a 2568     		ldr	r5, [r4]
 421:src/console.c ****     {
 2911              		.loc 2 421 13 view .LVU793
 2912 017c 15F40075 		ands	r5, r5, #512
 2913 0180 81D1     		bne	.L187
 421:src/console.c ****     {
 2914              		.loc 2 421 35 discriminator 1 view .LVU794
 2915 0182 B847     		blx	r7
 2916              	.LVL245:
 421:src/console.c ****     {
 2917              		.loc 2 421 32 discriminator 1 view .LVU795
 2918 0184 0028     		cmp	r0, #0
 2919 0186 3FF47EAF 		beq	.L187
 423:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2920              		.loc 2 423 7 is_stmt 1 view .LVU796
 2921 018a 2368     		ldr	r3, [r4]
 2922 018c 23F00203 		bic	r3, r3, #2
 424:src/console.c ****       sys_sleep();
 2923              		.loc 2 424 7 is_stmt 0 view .LVU797
 2924 0190 2846     		mov	r0, r5
 2925 0192 6421     		movs	r1, #100
 423:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2926              		.loc 2 423 7 view .LVU798
 2927 0194 2360     		str	r3, [r4]
 424:src/console.c ****       sys_sleep();
 2928              		.loc 2 424 7 is_stmt 1 view .LVU799
 2929 0196 C047     		blx	r8
 2930              	.LVL246:
 425:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 2931              		.loc 2 425 7 view .LVU800
 2932 0198 534B     		ldr	r3, .L282+36
 2933 019a 9847     		blx	r3
 2934              	.LVL247:
 426:src/console.c **** 	key_push (K_HEARTBEAT);
 2935              		.loc 2 426 7 view .LVU801
 426:src/console.c **** 	key_push (K_HEARTBEAT);
 2936              		.loc 2 426 11 is_stmt 0 view .LVU802
 2937 019c 604B     		ldr	r3, .L282+92
 2938 019e 2846     		mov	r0, r5
 2939 01a0 9847     		blx	r3
 2940              	.LVL248:
 426:src/console.c **** 	key_push (K_HEARTBEAT);
 2941              		.loc 2 426 10 view .LVU803
 2942 01a2 48B1     		cbz	r0, .L191
 427:src/console.c **** 	if (Pause > 0) Pause--;
 2943              		.loc 2 427 2 is_stmt 1 view .LVU804
 2944 01a4 5F4B     		ldr	r3, .L282+96
 2945 01a6 6220     		movs	r0, #98
 2946 01a8 9847     		blx	r3
 2947              	.LVL249:
 428:src/console.c ****       }
 2948              		.loc 2 428 2 view .LVU805
 428:src/console.c ****       }
 2949              		.loc 2 428 12 is_stmt 0 view .LVU806
 2950 01aa 5F4B     		ldr	r3, .L282+100
 2951 01ac 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 428:src/console.c ****       }
ARM GAS  /tmp/cckAiVOj.s 			page 83


 2952              		.loc 2 428 5 view .LVU807
 2953 01ae 1AB1     		cbz	r2, .L191
 428:src/console.c ****       }
 2954              		.loc 2 428 17 is_stmt 1 discriminator 1 view .LVU808
 428:src/console.c ****       }
 2955              		.loc 2 428 22 is_stmt 0 discriminator 1 view .LVU809
 2956 01b0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2957 01b2 013A     		subs	r2, r2, #1
 2958 01b4 D2B2     		uxtb	r2, r2
 2959 01b6 1A70     		strb	r2, [r3]
 2960              	.L191:
 430:src/console.c ****     }
 2961              		.loc 2 430 7 is_stmt 1 view .LVU810
 2962 01b8 5C4B     		ldr	r3, .L282+104
 2963 01ba 0020     		movs	r0, #0
 2964 01bc 9847     		blx	r3
 2965              	.LVL250:
 434:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2966              		.loc 2 434 5 view .LVU811
 434:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2967              		.loc 2 434 9 is_stmt 0 view .LVU812
 2968 01be 2368     		ldr	r3, [r4]
 434:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2969              		.loc 2 434 8 view .LVU813
 2970 01c0 9905     		lsls	r1, r3, #22
 2971 01c2 7FF564AF 		bpl	.L267
 2972              	.L193:
 435:src/console.c ****         // Going to off mode
 2973              		.loc 2 435 7 is_stmt 1 view .LVU814
 435:src/console.c ****         // Going to off mode
 2974              		.loc 2 435 12 is_stmt 0 view .LVU815
 2975 01c6 2568     		ldr	r5, [r4]
 435:src/console.c ****         // Going to off mode
 2976              		.loc 2 435 10 view .LVU816
 2977 01c8 15F00405 		ands	r5, r5, #4
 2978 01cc 7FF44EAF 		bne	.L185
 437:src/console.c ****         draw_power_off_image(1);
 2979              		.loc 2 437 9 is_stmt 1 view .LVU817
 2980 01d0 574B     		ldr	r3, .L282+108
 2981 01d2 2846     		mov	r0, r5
 2982 01d4 9847     		blx	r3
 2983              	.LVL251:
 438:src/console.c **** 
 2984              		.loc 2 438 9 view .LVU818
 2985 01d6 574B     		ldr	r3, .L282+112
 2986 01d8 0120     		movs	r0, #1
 2987 01da 9847     		blx	r3
 2988              	.LVL252:
 440:src/console.c ****         SET_ST(STAT_SUSPENDED);
 2989              		.loc 2 440 9 view .LVU819
 2990 01dc 564B     		ldr	r3, .L282+116
 2991 01de 2846     		mov	r0, r5
 2992 01e0 9847     		blx	r3
 2993              	.LVL253:
 441:src/console.c ****         SET_ST(STAT_OFF);
 2994              		.loc 2 441 9 view .LVU820
 2995 01e2 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cckAiVOj.s 			page 84


 2996 01e4 43F00403 		orr	r3, r3, #4
 2997 01e8 2360     		str	r3, [r4]
 442:src/console.c ****       }
 2998              		.loc 2 442 9 view .LVU821
 2999 01ea 2368     		ldr	r3, [r4]
 3000 01ec 43F01003 		orr	r3, r3, #16
 3001 01f0 2360     		str	r3, [r4]
 3002 01f2 3BE7     		b	.L185
 3003              	.LVL254:
 3004              	.L201:
 479:src/console.c ****       remapped = remap(c);
 3005              		.loc 2 479 5 view .LVU822
 479:src/console.c ****       remapped = remap(c);
 3006              		.loc 2 479 8 is_stmt 0 view .LVU823
 3007 01f4 7FF43AAF 		bne	.L185
 3008 01f8 7CE7     		b	.L238
 3009              	.L200:
 479:src/console.c ****       remapped = remap(c);
 3010              		.loc 2 479 5 is_stmt 1 view .LVU824
 480:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3011              		.loc 2 480 7 view .LVU825
 3012              	.LVL255:
 3013              	.LBB146:
  53:src/console.c **** 
 3014              		.loc 2 53 22 view .LVU826
 3015              	.LBB132:
  55:src/console.c **** 
 3016              		.loc 2 55 3 view .LVU827
   1:src/keytran.c ****     // Top row of DM42 1--6
 3017              		.loc 3 1 1 view .LVU828
  59:src/keytran.c ****     {K_RELEASE, -1},
 3018              		.loc 3 59 3 view .LVU829
 117:src/keytran.c ****     {K_RELEASE, -1},
 3019              		.loc 3 117 3 view .LVU830
 175:src/keytran.c ****     {K_RELEASE, -1},
 3020              		.loc 3 175 1 view .LVU831
 3021              		.loc 3 233 1 view .LVU832
  59:src/console.c **** 
 3022              		.loc 2 59 3 view .LVU833
  59:src/console.c **** 
 3023              		.loc 2 59 23 view .LVU834
  59:src/console.c **** 
 3024              		.loc 2 59 30 is_stmt 0 view .LVU835
 3025 01fa 504B     		ldr	r3, .L282+120
 3026              	.LVL256:
 3027              	.L261:
  59:src/console.c **** 
 3028              		.loc 2 59 30 view .LVU836
 3029 01fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3030              	.LVL257:
  59:src/console.c **** 
 3031              		.loc 2 59 30 view .LVU837
 3032 01fe 93E80300 		ldm	r3, {r0, r1}
 3033 0202 0DF1080A 		add	r10, sp, #8
 3034              	.LBE132:
 3035              	.LBE146:
 481:src/console.c **** 	set_menu ( remapped.shift );
ARM GAS  /tmp/cckAiVOj.s 			page 85


 3036              		.loc 2 481 10 view .LVU838
 3037 0206 2F2D     		cmp	r5, #47
 3038              	.LBB147:
 3039              	.LBB133:
  59:src/console.c **** 
 3040              		.loc 2 59 30 view .LVU839
 3041 0208 8AE80300 		stm	r10, {r0, r1}
 3042 020c 8946     		mov	r9, r1
 3043              	.LVL258:
  59:src/console.c **** 
 3044              		.loc 2 59 30 view .LVU840
 3045              	.LBE133:
 3046              	.LBE147:
 481:src/console.c **** 	set_menu ( remapped.shift );
 3047              		.loc 2 481 7 is_stmt 1 view .LVU841
 481:src/console.c **** 	set_menu ( remapped.shift );
 3048              		.loc 2 481 10 is_stmt 0 view .LVU842
 3049 020e 87D1     		bne	.L228
 3050              	.LVL259:
 3051              	.L265:
 482:src/console.c **** 	display_current_menu ();
 3052              		.loc 2 482 2 is_stmt 1 view .LVU843
 3053              	.LBB148:
 3054              	.LBI148:
  86:src/menu.c    ****   int m = current_menu;
 3055              		.loc 1 86 6 view .LVU844
 3056              	.LBB149:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3057              		.loc 1 87 3 view .LVU845
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3058              		.loc 1 87 7 is_stmt 0 view .LVU846
 3059 0210 3368     		ldr	r3, [r6]
 3060              	.LVL260:
  88:src/menu.c    ****     current_menu = default_menu;
 3061              		.loc 1 88 3 is_stmt 1 view .LVU847
  88:src/menu.c    ****     current_menu = default_menu;
 3062              		.loc 1 88 6 is_stmt 0 view .LVU848
 3063 0212 4B45     		cmp	r3, r9
 3064 0214 4FD0     		beq	.L268
  91:src/menu.c    ****     current_menu = last_menu;
 3065              		.loc 1 91 8 is_stmt 1 view .LVU849
  91:src/menu.c    ****     current_menu = last_menu;
 3066              		.loc 1 91 11 is_stmt 0 view .LVU850
 3067 0216 B9F1FF3F 		cmp	r9, #-1
 3068 021a 00F0A580 		beq	.L269
 3069              	.LVL261:
 3070              	.L229:
  95:src/menu.c    ****   }
 3071              		.loc 1 95 5 is_stmt 1 view .LVU851
  95:src/menu.c    ****   }
 3072              		.loc 1 95 18 is_stmt 0 view .LVU852
 3073 021e C6F80090 		str	r9, [r6]
 3074              	.LVL262:
 3075              	.L232:
  97:src/menu.c    **** }
 3076              		.loc 1 97 3 is_stmt 1 view .LVU853
  97:src/menu.c    **** }
ARM GAS  /tmp/cckAiVOj.s 			page 86


 3077              		.loc 1 97 6 is_stmt 0 view .LVU854
 3078 0222 092B     		cmp	r3, #9
 3079 0224 01D0     		beq	.L233
 3080              	.L230:
  97:src/menu.c    **** }
 3081              		.loc 1 97 15 is_stmt 1 view .LVU855
  97:src/menu.c    **** }
 3082              		.loc 1 97 25 is_stmt 0 view .LVU856
 3083 0226 464A     		ldr	r2, .L282+124
 3084 0228 1360     		str	r3, [r2]
 3085              	.L233:
  97:src/menu.c    **** }
 3086              		.loc 1 97 25 view .LVU857
 3087              	.LBE149:
 3088              	.LBE148:
 483:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 3089              		.loc 2 483 2 is_stmt 1 view .LVU858
 3090              	.LBB154:
 3091              	.LBI154:
 110:src/menu.c    ****   display_menu (current_menu);
 3092              		.loc 1 110 6 view .LVU859
 3093              	.LBB155:
 111:src/menu.c    **** }
 3094              		.loc 1 111 3 view .LVU860
 3095 022a 4846     		mov	r0, r9
 3096 022c FFF7FEFF 		bl	display_menu
 3097              	.LVL263:
 3098              	.LBE155:
 3099              	.LBE154:
 484:src/console.c **** 	case SHIFT_F:
 3100              		.loc 2 484 2 view .LVU861
 484:src/console.c **** 	case SHIFT_F:
 3101              		.loc 2 484 10 is_stmt 0 view .LVU862
 3102 0230 FFF7FEFF 		bl	cur_shift
 3103              	.LVL264:
 484:src/console.c **** 	case SHIFT_F:
 3104              		.loc 2 484 2 view .LVU863
 3105 0234 0228     		cmp	r0, #2
 3106 0236 00F08F80 		beq	.L234
 486:src/console.c **** 	  break;
 3107              		.loc 2 486 4 is_stmt 1 view .LVU864
 486:src/console.c **** 	  break;
 3108              		.loc 2 486 13 is_stmt 0 view .LVU865
 3109 023a 424B     		ldr	r3, .L282+128
 3110 023c 93E80300 		ldm	r3, {r0, r1}
 3111 0240 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3112              	.LVL265:
 486:src/console.c **** 	  break;
 3113              		.loc 2 486 13 view .LVU866
 3114 0242 8AE80300 		stm	r10, {r0, r1}
 3115 0246 8946     		mov	r9, r1
 3116              	.LVL266:
 487:src/console.c **** 	case SHIFT_G:
 3117              		.loc 2 487 4 is_stmt 1 view .LVU867
 3118 0248 6AE7     		b	.L228
 3119              	.LVL267:
 3120              	.L239:
ARM GAS  /tmp/cckAiVOj.s 			page 87


 3121              	.LBB156:
 3122              	.LBB134:
 3123              	.LBB130:
  65:src/console.c ****   }
 3124              		.loc 2 65 12 is_stmt 0 view .LVU868
 3125 024a 4FF00C09 		mov	r9, #12
 3126              	.LVL268:
 3127              	.L204:
  65:src/console.c ****   }
 3128              		.loc 2 65 12 view .LVU869
 3129              	.LBE130:
 3130              	.LBE134:
 3131              	.LBE156:
 505:src/console.c **** 	display_current_menu();
 3132              		.loc 2 505 2 is_stmt 1 view .LVU870
 505:src/console.c **** 	display_current_menu();
 3133              		.loc 2 505 13 is_stmt 0 view .LVU871
 3134 024e 3123     		movs	r3, #49
 3135 0250 CDF80C90 		str	r9, [sp, #12]
 3136 0254 8DF80830 		strb	r3, [sp, #8]
 3137 0258 6D46     		mov	r5, sp
 3138 025a 0DF1080A 		add	r10, sp, #8
 3139 025e 9AE80600 		ldm	r10, {r1, r2}
 3140 0262 2846     		mov	r0, r5
 3141 0264 FFF7FEFF 		bl	do_multi
 3142              	.LVL269:
 3143 0268 95E80300 		ldm	r5, {r0, r1}
 3144 026c 8AE80300 		stm	r10, {r0, r1}
 3145 0270 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 3146              	.LVL270:
 3147              	.LBB157:
 3148              	.LBB158:
 111:src/menu.c    **** }
 3149              		.loc 1 111 3 view .LVU872
 3150 0274 3068     		ldr	r0, [r6]
 3151              	.LBE158:
 3152              	.LBE157:
 505:src/console.c **** 	display_current_menu();
 3153              		.loc 2 505 13 view .LVU873
 3154 0276 DDF80C90 		ldr	r9, [sp, #12]
 3155              	.LVL271:
 506:src/console.c ****       }
 3156              		.loc 2 506 2 is_stmt 1 view .LVU874
 3157              	.LBB160:
 3158              	.LBI157:
 110:src/menu.c    ****   display_menu (current_menu);
 3159              		.loc 1 110 6 view .LVU875
 3160              	.LBB159:
 111:src/menu.c    **** }
 3161              		.loc 1 111 3 view .LVU876
 3162 027a FFF7FEFF 		bl	display_menu
 3163              	.LVL272:
 111:src/menu.c    **** }
 3164              		.loc 1 111 3 is_stmt 0 view .LVU877
 3165              	.LBE159:
 3166              	.LBE160:
 508:src/console.c ****       process_keycode_with_shift(remapped);
ARM GAS  /tmp/cckAiVOj.s 			page 88


 3167              		.loc 2 508 7 is_stmt 1 view .LVU878
 508:src/console.c ****       process_keycode_with_shift(remapped);
 3168              		.loc 2 508 10 is_stmt 0 view .LVU879
 3169 027e 322D     		cmp	r5, #50
 3170 0280 7FF46DAF 		bne	.L262
 3171              	.LVL273:
 3172              	.L237:
 510:src/console.c ****     }
 511:src/console.c ****   }
 512:src/console.c ****   save_ram_file(0);
 3173              		.loc 2 512 3 is_stmt 1 view .LVU880
 3174 0284 0020     		movs	r0, #0
 513:src/console.c ****   //  free_storage();
 514:src/console.c ****   return;
 515:src/console.c **** }
 3175              		.loc 2 515 1 is_stmt 0 view .LVU881
 3176 0286 04B0     		add	sp, sp, #16
 3177              		.cfi_remember_state
 3178              		.cfi_def_cfa_offset 32
 3179              		@ sp needed
 3180 0288 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 3181              		.cfi_restore 14
 3182              		.cfi_restore 10
 3183              		.cfi_restore 9
 3184              		.cfi_restore 8
 3185              		.cfi_restore 7
 3186              		.cfi_restore 6
 3187              		.cfi_restore 5
 3188              		.cfi_restore 4
 3189              		.cfi_def_cfa_offset 0
 3190              	.LVL274:
 512:src/console.c ****   //  free_storage();
 3191              		.loc 2 512 3 view .LVU882
 3192 028c FFF7FEBF 		b	save_ram_file
 3193              	.LVL275:
 3194              	.L205:
 3195              		.cfi_restore_state
 3196              	.LBB161:
 3197              	.LBB135:
  89:src/console.c ****     return mapping_running[c];
 3198              		.loc 2 89 3 is_stmt 1 view .LVU883
  89:src/console.c ****     return mapping_running[c];
 3199              		.loc 2 89 15 is_stmt 0 view .LVU884
 3200 0290 254A     		ldr	r2, .L282+100
 3201 0292 2D4B     		ldr	r3, .L282+132
 3202 0294 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3203 0296 1B68     		ldr	r3, [r3]
  89:src/console.c ****     return mapping_running[c];
 3204              		.loc 2 89 6 view .LVU885
 3205 0298 51EA0309 		orrs	r9, r1, r3
 3206 029c 6AD1     		bne	.L270
  93:src/console.c ****   case KEY_F1:
 3207              		.loc 2 93 3 is_stmt 1 view .LVU886
 3208 029e A5F12603 		sub	r3, r5, #38
 3209 02a2 052B     		cmp	r3, #5
 3210 02a4 00F2BB80 		bhi	.L211
 3211 02a8 DFE803F0 		tbb	[pc, r3]
ARM GAS  /tmp/cckAiVOj.s 			page 89


 3212              	.L213:
 3213 02ac CC       		.byte	(.L218-.L213)/2
 3214 02ad 80       		.byte	(.L217-.L213)/2
 3215 02ae 8A       		.byte	(.L216-.L213)/2
 3216 02af 93       		.byte	(.L215-.L213)/2
 3217 02b0 9C       		.byte	(.L214-.L213)/2
 3218 02b1 A5       		.byte	(.L212-.L213)/2
 3219              		.p2align 1
 3220              	.L263:
  61:src/console.c **** 
 3221              		.loc 2 61 16 view .LVU887
  61:src/console.c **** 
 3222              		.loc 2 61 23 is_stmt 0 view .LVU888
 3223 02b2 264B     		ldr	r3, .L282+136
 3224 02b4 A2E7     		b	.L261
 3225              	.LVL276:
 3226              	.L268:
  61:src/console.c **** 
 3227              		.loc 2 61 23 view .LVU889
 3228              	.LBE135:
 3229              	.LBE161:
 3230              	.LBB162:
 3231              	.LBB150:
  89:src/menu.c    ****   }
 3232              		.loc 1 89 5 is_stmt 1 view .LVU890
  89:src/menu.c    ****   }
 3233              		.loc 1 89 18 is_stmt 0 view .LVU891
 3234 02b6 264B     		ldr	r3, .L282+140
 3235              	.LVL277:
  89:src/menu.c    ****   }
 3236              		.loc 1 89 18 view .LVU892
 3237 02b8 1A68     		ldr	r2, [r3]
 3238 02ba 3260     		str	r2, [r6]
 3239              	.LVL278:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3240              		.loc 1 87 7 view .LVU893
 3241 02bc 4B46     		mov	r3, r9
  89:src/menu.c    ****   }
 3242              		.loc 1 89 18 view .LVU894
 3243 02be 9146     		mov	r9, r2
 3244              	.LVL279:
  89:src/menu.c    ****   }
 3245              		.loc 1 89 18 view .LVU895
 3246 02c0 AFE7     		b	.L232
 3247              	.L283:
 3248 02c2 00BF     		.align	2
 3249              	.L282:
 3250 02c4 00000000 		.word	StateWhileOn
 3251 02c8 00000000 		.word	DispMsg
 3252 02cc 00200010 		.word	268443648
 3253 02d0 00000000 		.word	.LANCHOR1
 3254 02d4 7D030008 		.word	134218621
 3255 02d8 00000000 		.word	run_menu_item
 3256 02dc 00000000 		.word	menu_line_str
 3257 02e0 31020008 		.word	134218289
 3258 02e4 00000000 		.word	JustDisplayed
 3259 02e8 19040008 		.word	134218777
ARM GAS  /tmp/cckAiVOj.s 			page 90


 3260 02ec 19020008 		.word	134218265
 3261 02f0 91030008 		.word	134218641
 3262 02f4 E5020008 		.word	134218469
 3263 02f8 59020008 		.word	134218329
 3264 02fc 35020008 		.word	134218293
 3265 0300 89030008 		.word	134218633
 3266 0304 B9030008 		.word	134218681
 3267 0308 B9040008 		.word	134218937
 3268 030c 00000000 		.word	.LANCHOR6
 3269 0310 00000000 		.word	.LANCHOR14
 3270 0314 59030008 		.word	134218585
 3271 0318 00000000 		.word	.LANCHOR18
 3272 031c 00000000 		.word	.LANCHOR8
 3273 0320 01040008 		.word	134218753
 3274 0324 81030008 		.word	134218625
 3275 0328 00000000 		.word	Pause
 3276 032c F5030008 		.word	134218741
 3277 0330 55020008 		.word	134218325
 3278 0334 2D040008 		.word	134218797
 3279 0338 1D020008 		.word	134218269
 3280 033c 00000000 		.word	.LANCHOR19
 3281 0340 00000000 		.word	.LANCHOR3
 3282 0344 00000000 		.word	.LANCHOR9
 3283 0348 00000000 		.word	Running
 3284 034c 00000000 		.word	.LANCHOR10
 3285 0350 00000000 		.word	.LANCHOR2
 3286 0354 F9030008 		.word	134218745
 3287              	.LVL280:
 3288              	.L234:
  89:src/menu.c    ****   }
 3289              		.loc 1 89 18 view .LVU896
 3290              	.LBE150:
 3291              	.LBE162:
 489:src/console.c **** 	  break;
 3292              		.loc 2 489 4 is_stmt 1 view .LVU897
 489:src/console.c **** 	  break;
 3293              		.loc 2 489 13 is_stmt 0 view .LVU898
 3294 0358 8A4B     		ldr	r3, .L284
 3295 035a 93E80300 		ldm	r3, {r0, r1}
 3296 035e 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3297              	.LVL281:
 489:src/console.c **** 	  break;
 3298              		.loc 2 489 13 view .LVU899
 3299 0360 8AE80300 		stm	r10, {r0, r1}
 3300 0364 8946     		mov	r9, r1
 3301              	.LVL282:
 490:src/console.c **** 	case SHIFT_H:
 3302              		.loc 2 490 4 is_stmt 1 view .LVU900
 3303 0366 DBE6     		b	.L228
 3304              	.LVL283:
 3305              	.L269:
 3306              	.LBB163:
 3307              	.LBB151:
  92:src/menu.c    ****   }
 3308              		.loc 1 92 5 view .LVU901
  92:src/menu.c    ****   }
 3309              		.loc 1 92 18 is_stmt 0 view .LVU902
ARM GAS  /tmp/cckAiVOj.s 			page 91


 3310 0368 874A     		ldr	r2, .L284+4
 3311 036a D2F80090 		ldr	r9, [r2]
 3312              	.LVL284:
  92:src/menu.c    ****   }
 3313              		.loc 1 92 18 view .LVU903
 3314 036e C6F80090 		str	r9, [r6]
 3315 0372 56E7     		b	.L232
 3316              	.LVL285:
 3317              	.L270:
  92:src/menu.c    ****   }
 3318              		.loc 1 92 18 view .LVU904
 3319              	.LBE151:
 3320              	.LBE163:
 3321              	.LBB164:
 3322              	.LBB136:
  90:src/console.c ****   }
 3323              		.loc 2 90 5 is_stmt 1 view .LVU905
  90:src/console.c ****   }
 3324              		.loc 2 90 27 is_stmt 0 view .LVU906
 3325 0374 854B     		ldr	r3, .L284+8
 3326 0376 C6E6     		b	.L260
 3327              	.L264:
  70:src/console.c ****       case SHIFT_N:
 3328              		.loc 2 70 7 is_stmt 1 view .LVU907
  70:src/console.c ****       case SHIFT_N:
 3329              		.loc 2 70 15 is_stmt 0 view .LVU908
 3330 0378 FFF7FEFF 		bl	cur_shift
 3331              	.LVL286:
  70:src/console.c ****       case SHIFT_N:
 3332              		.loc 2 70 7 view .LVU909
 3333 037c 0328     		cmp	r0, #3
  70:src/console.c ****       case SHIFT_N:
 3334              		.loc 2 70 15 view .LVU910
 3335 037e 0346     		mov	r3, r0
  70:src/console.c ****       case SHIFT_N:
 3336              		.loc 2 70 7 view .LVU911
 3337 0380 00F2B980 		bhi	.L240
 3338 0384 0128     		cmp	r0, #1
 3339 0386 43D8     		bhi	.L208
 3340 0388 0028     		cmp	r0, #0
 3341 038a 71D0     		beq	.L271
  73:src/console.c ****       case SHIFT_F:
 3342              		.loc 2 73 2 is_stmt 1 view .LVU912
  75:src/console.c **** 	break;
 3343              		.loc 2 75 2 view .LVU913
  75:src/console.c **** 	break;
 3344              		.loc 2 75 23 is_stmt 0 view .LVU914
 3345 038c 804B     		ldr	r3, .L284+12
 3346 038e 93E80300 		ldm	r3, {r0, r1}
 3347 0392 0DF1080A 		add	r10, sp, #8
 3348 0396 8AE80300 		stm	r10, {r0, r1}
 3349              	.LVL287:
  75:src/console.c **** 	break;
 3350              		.loc 2 75 23 view .LVU915
 3351              	.LBE136:
 3352              	.LBE164:
 481:src/console.c **** 	set_menu ( remapped.shift );
ARM GAS  /tmp/cckAiVOj.s 			page 92


 3353              		.loc 2 481 7 is_stmt 1 view .LVU916
 497:src/console.c **** 	SET_ST(STAT_MENU);
 3354              		.loc 2 497 7 view .LVU917
 504:src/console.c **** 	remapped = do_multi (remapped);
 3355              		.loc 2 504 7 view .LVU918
 508:src/console.c ****       process_keycode_with_shift(remapped);
 3356              		.loc 2 508 7 view .LVU919
 3357              	.LBB165:
 3358              	.LBB137:
  75:src/console.c **** 	break;
 3359              		.loc 2 75 23 is_stmt 0 view .LVU920
 3360 039a 4FF00009 		mov	r9, #0
 3361 039e 2A25     		movs	r5, #42
 3362              	.LVL288:
  75:src/console.c **** 	break;
 3363              		.loc 2 75 23 view .LVU921
 3364 03a0 DFE6     		b	.L207
 3365              	.LVL289:
 3366              	.L219:
  96:src/console.c ****   case KEY_F2:
 3367              		.loc 2 96 5 is_stmt 1 view .LVU922
  96:src/console.c ****   case KEY_F2:
 3368              		.loc 2 96 9 is_stmt 0 view .LVU923
 3369 03a2 FFF7FEFF 		bl	cur_shift
 3370              	.LVL290:
  96:src/console.c ****   case KEY_F2:
 3371              		.loc 2 96 8 view .LVU924
 3372 03a6 0128     		cmp	r0, #1
 3373 03a8 00F0DA80 		beq	.L272
 3374              	.L217:
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3375              		.loc 2 98 5 is_stmt 1 view .LVU925
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3376              		.loc 2 98 9 is_stmt 0 view .LVU926
 3377 03ac FFF7FEFF 		bl	cur_shift
 3378              	.LVL291:
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3379              		.loc 2 98 8 view .LVU927
 3380 03b0 0028     		cmp	r0, #0
 3381 03b2 00F08580 		beq	.L273
  99:src/console.c ****   case KEY_F3:
 3382              		.loc 2 99 5 is_stmt 1 view .LVU928
  99:src/console.c ****   case KEY_F3:
 3383              		.loc 2 99 9 is_stmt 0 view .LVU929
 3384 03b6 FFF7FEFF 		bl	cur_shift
 3385              	.LVL292:
  99:src/console.c ****   case KEY_F3:
 3386              		.loc 2 99 8 view .LVU930
 3387 03ba 0128     		cmp	r0, #1
 3388 03bc 00F0C680 		beq	.L274
 3389              	.L216:
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3390              		.loc 2 101 5 is_stmt 1 view .LVU931
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3391              		.loc 2 101 9 is_stmt 0 view .LVU932
 3392 03c0 FFF7FEFF 		bl	cur_shift
 3393              	.LVL293:
ARM GAS  /tmp/cckAiVOj.s 			page 93


 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3394              		.loc 2 101 8 view .LVU933
 3395 03c4 0028     		cmp	r0, #0
 3396 03c6 71D0     		beq	.L275
 102:src/console.c ****   case KEY_F4:
 3397              		.loc 2 102 5 is_stmt 1 view .LVU934
 102:src/console.c ****   case KEY_F4:
 3398              		.loc 2 102 9 is_stmt 0 view .LVU935
 3399 03c8 FFF7FEFF 		bl	cur_shift
 3400              	.LVL294:
 102:src/console.c ****   case KEY_F4:
 3401              		.loc 2 102 8 view .LVU936
 3402 03cc 0128     		cmp	r0, #1
 3403 03ce 00F09580 		beq	.L276
 3404              	.L215:
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3405              		.loc 2 104 5 is_stmt 1 view .LVU937
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3406              		.loc 2 104 9 is_stmt 0 view .LVU938
 3407 03d2 FFF7FEFF 		bl	cur_shift
 3408              	.LVL295:
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3409              		.loc 2 104 8 view .LVU939
 3410 03d6 0028     		cmp	r0, #0
 3411 03d8 5ED0     		beq	.L277
 105:src/console.c ****   case KEY_F5:
 3412              		.loc 2 105 5 is_stmt 1 view .LVU940
 105:src/console.c ****   case KEY_F5:
 3413              		.loc 2 105 9 is_stmt 0 view .LVU941
 3414 03da FFF7FEFF 		bl	cur_shift
 3415              	.LVL296:
 105:src/console.c ****   case KEY_F5:
 3416              		.loc 2 105 8 view .LVU942
 3417 03de 0128     		cmp	r0, #1
 3418 03e0 00F0AA80 		beq	.L278
 3419              	.L214:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3420              		.loc 2 107 5 is_stmt 1 view .LVU943
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3421              		.loc 2 107 9 is_stmt 0 view .LVU944
 3422 03e4 FFF7FEFF 		bl	cur_shift
 3423              	.LVL297:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3424              		.loc 2 107 8 view .LVU945
 3425 03e8 0028     		cmp	r0, #0
 3426 03ea 4BD0     		beq	.L279
 108:src/console.c ****   case KEY_F6:
 3427              		.loc 2 108 5 is_stmt 1 view .LVU946
 108:src/console.c ****   case KEY_F6:
 3428              		.loc 2 108 9 is_stmt 0 view .LVU947
 3429 03ec FFF7FEFF 		bl	cur_shift
 3430              	.LVL298:
 108:src/console.c ****   case KEY_F6:
 3431              		.loc 2 108 8 view .LVU948
 3432 03f0 0128     		cmp	r0, #1
 3433 03f2 00F08D80 		beq	.L280
 3434              	.L212:
ARM GAS  /tmp/cckAiVOj.s 			page 94


 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3435              		.loc 2 110 5 is_stmt 1 view .LVU949
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3436              		.loc 2 110 9 is_stmt 0 view .LVU950
 3437 03f6 FFF7FEFF 		bl	cur_shift
 3438              	.LVL299:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3439              		.loc 2 110 8 view .LVU951
 3440 03fa 58B9     		cbnz	r0, .L224
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3441              		.loc 2 110 33 is_stmt 1 view .LVU952
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3442              		.loc 2 110 67 is_stmt 0 view .LVU953
 3443 03fc 3168     		ldr	r1, [r6]
 3444 03fe 654A     		ldr	r2, .L284+16
 3445 0400 D023     		movs	r3, #208
 3446 0402 03FB01F3 		mul	r3, r3, r1
 3447 0406 D018     		adds	r0, r2, r3
 3448 0408 D0E92C01 		ldrd	r0, r1, [r0, #176]
 3449 040c B033     		adds	r3, r3, #176
 3450 040e 26E0     		b	.L259
 3451              	.L208:
  76:src/console.c ****       case SHIFT_G:
 3452              		.loc 2 76 2 is_stmt 1 view .LVU954
  78:src/console.c **** 	break;
 3453              		.loc 2 78 2 view .LVU955
  78:src/console.c **** 	break;
 3454              		.loc 2 78 9 is_stmt 0 view .LVU956
 3455 0410 614B     		ldr	r3, .L284+20
 3456 0412 F3E6     		b	.L261
 3457              	.L224:
 111:src/console.c ****   }
 3458              		.loc 2 111 5 is_stmt 1 view .LVU957
 111:src/console.c ****   }
 3459              		.loc 2 111 9 is_stmt 0 view .LVU958
 3460 0414 FFF7FEFF 		bl	cur_shift
 3461              	.LVL300:
 111:src/console.c ****   }
 3462              		.loc 2 111 8 view .LVU959
 3463 0418 0128     		cmp	r0, #1
 3464 041a 00F08380 		beq	.L281
 3465              	.L211:
 114:src/console.c ****   case SHIFT_N:    
 3466              		.loc 2 114 3 is_stmt 1 view .LVU960
 114:src/console.c ****   case SHIFT_N:    
 3467              		.loc 2 114 11 is_stmt 0 view .LVU961
 3468 041e FFF7FEFF 		bl	cur_shift
 3469              	.LVL301:
 114:src/console.c ****   case SHIFT_N:    
 3470              		.loc 2 114 3 view .LVU962
 3471 0422 0128     		cmp	r0, #1
 3472 0424 65D0     		beq	.L225
 3473 0426 0228     		cmp	r0, #2
 3474 0428 56D0     		beq	.L226
 3475 042a 0028     		cmp	r0, #0
 3476 042c 52D0     		beq	.L227
  55:src/console.c **** 
ARM GAS  /tmp/cckAiVOj.s 			page 95


 3477              		.loc 2 55 41 view .LVU963
 3478 042e EDB2     		uxtb	r5, r5
 3479              	.LVL302:
  55:src/console.c **** 
 3480              		.loc 2 55 41 view .LVU964
 3481              	.LBE137:
 3482              	.LBE165:
 481:src/console.c **** 	set_menu ( remapped.shift );
 3483              		.loc 2 481 7 is_stmt 1 view .LVU965
 481:src/console.c **** 	set_menu ( remapped.shift );
 3484              		.loc 2 481 10 is_stmt 0 view .LVU966
 3485 0430 2F2D     		cmp	r5, #47
 3486 0432 7FF475AE 		bne	.L228
 482:src/console.c **** 	display_current_menu ();
 3487              		.loc 2 482 2 is_stmt 1 view .LVU967
 3488              	.LVL303:
 3489              	.LBB166:
  86:src/menu.c    ****   int m = current_menu;
 3490              		.loc 1 86 6 view .LVU968
 3491              	.LBB152:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3492              		.loc 1 87 3 view .LVU969
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3493              		.loc 1 87 7 is_stmt 0 view .LVU970
 3494 0436 3368     		ldr	r3, [r6]
 3495              	.LVL304:
  88:src/menu.c    ****     current_menu = default_menu;
 3496              		.loc 1 88 3 is_stmt 1 view .LVU971
  88:src/menu.c    ****     current_menu = default_menu;
 3497              		.loc 1 88 6 is_stmt 0 view .LVU972
 3498 0438 002B     		cmp	r3, #0
 3499 043a 00F09B80 		beq	.L257
 3500 043e 0DF1080A 		add	r10, sp, #8
 3501 0442 ECE6     		b	.L229
 3502              	.LVL305:
 3503              	.L218:
  88:src/menu.c    ****     current_menu = default_menu;
 3504              		.loc 1 88 6 view .LVU973
 3505              	.LBE152:
 3506              	.LBE166:
 3507              	.LBB167:
 3508              	.LBB138:
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3509              		.loc 2 95 5 is_stmt 1 view .LVU974
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3510              		.loc 2 95 9 is_stmt 0 view .LVU975
 3511 0444 FFF7FEFF 		bl	cur_shift
 3512              	.LVL306:
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3513              		.loc 2 95 8 view .LVU976
 3514 0448 0028     		cmp	r0, #0
 3515 044a AAD1     		bne	.L219
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3516              		.loc 2 95 33 is_stmt 1 view .LVU977
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3517              		.loc 2 95 67 is_stmt 0 view .LVU978
 3518 044c 3168     		ldr	r1, [r6]
ARM GAS  /tmp/cckAiVOj.s 			page 96


 3519 044e 514A     		ldr	r2, .L284+16
 3520 0450 D023     		movs	r3, #208
 3521 0452 03FB01F3 		mul	r3, r3, r1
 3522 0456 D018     		adds	r0, r2, r3
 3523 0458 D0E90401 		ldrd	r0, r1, [r0, #16]
 3524 045c 1033     		adds	r3, r3, #16
 3525              	.L259:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3526              		.loc 2 110 67 view .LVU979
 3527 045e 0DF1080A 		add	r10, sp, #8
 3528 0462 D55C     		ldrb	r5, [r2, r3]	@ zero_extendqisi2
 3529              	.LVL307:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3530              		.loc 2 110 67 view .LVU980
 3531 0464 8AE80300 		stm	r10, {r0, r1}
 3532 0468 1344     		add	r3, r3, r2
 3533 046a D3F80490 		ldr	r9, [r3, #4]
 3534              	.LVL308:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3535              		.loc 2 110 67 view .LVU981
 3536 046e 55E6     		b	.L203
 3537              	.LVL309:
 3538              	.L271:
  72:src/console.c **** 	break;
 3539              		.loc 2 72 2 is_stmt 1 view .LVU982
  72:src/console.c **** 	break;
 3540              		.loc 2 72 21 is_stmt 0 view .LVU983
 3541 0470 4A4A     		ldr	r2, .L284+24
 3542 0472 92E80300 		ldm	r2, {r0, r1}
 3543 0476 0DF1080A 		add	r10, sp, #8
 3544 047a 8AE80300 		stm	r10, {r0, r1}
 3545              	.LVL310:
  72:src/console.c **** 	break;
 3546              		.loc 2 72 21 view .LVU984
 3547              	.LBE138:
 3548              	.LBE167:
 481:src/console.c **** 	set_menu ( remapped.shift );
 3549              		.loc 2 481 7 is_stmt 1 view .LVU985
 497:src/console.c **** 	SET_ST(STAT_MENU);
 3550              		.loc 2 497 7 view .LVU986
 504:src/console.c **** 	remapped = do_multi (remapped);
 3551              		.loc 2 504 7 view .LVU987
 508:src/console.c ****       process_keycode_with_shift(remapped);
 3552              		.loc 2 508 7 view .LVU988
 3553              	.LBB168:
 3554              	.LBB139:
  72:src/console.c **** 	break;
 3555              		.loc 2 72 21 is_stmt 0 view .LVU989
 3556 047e 9946     		mov	r9, r3
 3557 0480 2925     		movs	r5, #41
 3558              	.LVL311:
  72:src/console.c **** 	break;
 3559              		.loc 2 72 21 view .LVU990
 3560 0482 6EE6     		b	.L207
 3561              	.LVL312:
 3562              	.L279:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
ARM GAS  /tmp/cckAiVOj.s 			page 97


 3563              		.loc 2 107 33 is_stmt 1 view .LVU991
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3564              		.loc 2 107 67 is_stmt 0 view .LVU992
 3565 0484 3168     		ldr	r1, [r6]
 3566 0486 434A     		ldr	r2, .L284+16
 3567 0488 D023     		movs	r3, #208
 3568 048a 03FB01F3 		mul	r3, r3, r1
 3569 048e D018     		adds	r0, r2, r3
 3570 0490 D0E92401 		ldrd	r0, r1, [r0, #144]
 3571 0494 9033     		adds	r3, r3, #144
 3572 0496 E2E7     		b	.L259
 3573              	.L277:
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3574              		.loc 2 104 33 is_stmt 1 view .LVU993
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3575              		.loc 2 104 67 is_stmt 0 view .LVU994
 3576 0498 3168     		ldr	r1, [r6]
 3577 049a 3E4A     		ldr	r2, .L284+16
 3578 049c D023     		movs	r3, #208
 3579 049e 03FB01F3 		mul	r3, r3, r1
 3580 04a2 D018     		adds	r0, r2, r3
 3581 04a4 D0E91C01 		ldrd	r0, r1, [r0, #112]
 3582 04a8 7033     		adds	r3, r3, #112
 3583 04aa D8E7     		b	.L259
 3584              	.L275:
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3585              		.loc 2 101 33 is_stmt 1 view .LVU995
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3586              		.loc 2 101 67 is_stmt 0 view .LVU996
 3587 04ac 3168     		ldr	r1, [r6]
 3588 04ae 394A     		ldr	r2, .L284+16
 3589 04b0 D023     		movs	r3, #208
 3590 04b2 03FB01F3 		mul	r3, r3, r1
 3591 04b6 D018     		adds	r0, r2, r3
 3592 04b8 D0E91401 		ldrd	r0, r1, [r0, #80]
 3593 04bc 5033     		adds	r3, r3, #80
 3594 04be CEE7     		b	.L259
 3595              	.L273:
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3596              		.loc 2 98 33 is_stmt 1 view .LVU997
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3597              		.loc 2 98 67 is_stmt 0 view .LVU998
 3598 04c0 3168     		ldr	r1, [r6]
 3599 04c2 344A     		ldr	r2, .L284+16
 3600 04c4 D023     		movs	r3, #208
 3601 04c6 03FB01F3 		mul	r3, r3, r1
 3602 04ca D018     		adds	r0, r2, r3
 3603 04cc D0E90C01 		ldrd	r0, r1, [r0, #48]
 3604 04d0 3033     		adds	r3, r3, #48
 3605 04d2 C4E7     		b	.L259
 3606              	.L227:
 116:src/console.c ****     break;
 3607              		.loc 2 116 5 is_stmt 1 view .LVU999
 116:src/console.c ****     break;
 3608              		.loc 2 116 24 is_stmt 0 view .LVU1000
 3609 04d4 324B     		ldr	r3, .L284+28
 3610 04d6 16E6     		b	.L260
ARM GAS  /tmp/cckAiVOj.s 			page 98


 3611              	.L226:
 120:src/console.c ****   case SHIFT_G:
 3612              		.loc 2 120 5 is_stmt 1 view .LVU1001
 122:src/console.c ****     break;
 3613              		.loc 2 122 5 view .LVU1002
 122:src/console.c ****     break;
 3614              		.loc 2 122 26 is_stmt 0 view .LVU1003
 3615 04d8 324B     		ldr	r3, .L284+32
 3616 04da 03EBC502 		add	r2, r3, r5, lsl #3
 3617 04de 92E80300 		ldm	r2, {r0, r1}
 3618 04e2 0DF1080A 		add	r10, sp, #8
 3619 04e6 8AE80300 		stm	r10, {r0, r1}
 3620 04ea 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 3621              	.LVL313:
 122:src/console.c ****     break;
 3622              		.loc 2 122 26 view .LVU1004
 3623 04ee 8946     		mov	r9, r1
 3624              	.LVL314:
 122:src/console.c ****     break;
 3625              		.loc 2 122 26 view .LVU1005
 3626 04f0 14E6     		b	.L203
 3627              	.LVL315:
 3628              	.L225:
 117:src/console.c ****   case SHIFT_F:
 3629              		.loc 2 117 5 is_stmt 1 view .LVU1006
 119:src/console.c ****     break;
 3630              		.loc 2 119 5 view .LVU1007
 119:src/console.c ****     break;
 3631              		.loc 2 119 26 is_stmt 0 view .LVU1008
 3632 04f2 2D4B     		ldr	r3, .L284+36
 3633 04f4 07E6     		b	.L260
 3634              	.L240:
  70:src/console.c ****       case SHIFT_N:
 3635              		.loc 2 70 7 view .LVU1009
 3636 04f6 4FF00009 		mov	r9, #0
 3637 04fa 30E6     		b	.L262
 3638              	.L276:
 102:src/console.c ****   case KEY_F4:
 3639              		.loc 2 102 33 is_stmt 1 view .LVU1010
 102:src/console.c ****   case KEY_F4:
 3640              		.loc 2 102 67 is_stmt 0 view .LVU1011
 3641 04fc 3168     		ldr	r1, [r6]
 3642 04fe 254A     		ldr	r2, .L284+16
 3643 0500 D023     		movs	r3, #208
 3644 0502 03FB01F3 		mul	r3, r3, r1
 3645 0506 D018     		adds	r0, r2, r3
 3646 0508 D0E91601 		ldrd	r0, r1, [r0, #88]
 3647 050c 5833     		adds	r3, r3, #88
 3648 050e A6E7     		b	.L259
 3649              	.L280:
 108:src/console.c ****   case KEY_F6:
 3650              		.loc 2 108 33 is_stmt 1 view .LVU1012
 108:src/console.c ****   case KEY_F6:
 3651              		.loc 2 108 67 is_stmt 0 view .LVU1013
 3652 0510 3168     		ldr	r1, [r6]
 3653 0512 204A     		ldr	r2, .L284+16
 3654 0514 D023     		movs	r3, #208
ARM GAS  /tmp/cckAiVOj.s 			page 99


 3655 0516 03FB01F3 		mul	r3, r3, r1
 3656 051a D018     		adds	r0, r2, r3
 3657 051c D0E92601 		ldrd	r0, r1, [r0, #152]
 3658 0520 9833     		adds	r3, r3, #152
 3659 0522 9CE7     		b	.L259
 3660              	.L281:
 111:src/console.c ****   }
 3661              		.loc 2 111 33 is_stmt 1 view .LVU1014
 111:src/console.c ****   }
 3662              		.loc 2 111 67 is_stmt 0 view .LVU1015
 3663 0524 3168     		ldr	r1, [r6]
 3664 0526 1B4A     		ldr	r2, .L284+16
 3665 0528 D023     		movs	r3, #208
 3666 052a 03FB01F3 		mul	r3, r3, r1
 3667 052e D018     		adds	r0, r2, r3
 3668 0530 D0E92E01 		ldrd	r0, r1, [r0, #184]
 3669 0534 B833     		adds	r3, r3, #184
 3670 0536 92E7     		b	.L259
 3671              	.L278:
 105:src/console.c ****   case KEY_F5:
 3672              		.loc 2 105 33 is_stmt 1 view .LVU1016
 105:src/console.c ****   case KEY_F5:
 3673              		.loc 2 105 67 is_stmt 0 view .LVU1017
 3674 0538 3168     		ldr	r1, [r6]
 3675 053a 164A     		ldr	r2, .L284+16
 3676 053c D023     		movs	r3, #208
 3677 053e 03FB01F3 		mul	r3, r3, r1
 3678 0542 D018     		adds	r0, r2, r3
 3679 0544 D0E91E01 		ldrd	r0, r1, [r0, #120]
 3680 0548 7833     		adds	r3, r3, #120
 3681 054a 88E7     		b	.L259
 3682              	.L274:
  99:src/console.c ****   case KEY_F3:
 3683              		.loc 2 99 33 is_stmt 1 view .LVU1018
  99:src/console.c ****   case KEY_F3:
 3684              		.loc 2 99 67 is_stmt 0 view .LVU1019
 3685 054c 3168     		ldr	r1, [r6]
 3686 054e 114A     		ldr	r2, .L284+16
 3687 0550 D023     		movs	r3, #208
 3688 0552 03FB01F3 		mul	r3, r3, r1
 3689 0556 D018     		adds	r0, r2, r3
 3690 0558 D0E90E01 		ldrd	r0, r1, [r0, #56]
 3691 055c 3833     		adds	r3, r3, #56
 3692 055e 7EE7     		b	.L259
 3693              	.L272:
  96:src/console.c ****   case KEY_F2:
 3694              		.loc 2 96 33 is_stmt 1 view .LVU1020
  96:src/console.c ****   case KEY_F2:
 3695              		.loc 2 96 67 is_stmt 0 view .LVU1021
 3696 0560 3168     		ldr	r1, [r6]
 3697 0562 0C4A     		ldr	r2, .L284+16
 3698 0564 D023     		movs	r3, #208
 3699 0566 03FB01F3 		mul	r3, r3, r1
 3700 056a D018     		adds	r0, r2, r3
 3701 056c D0E90601 		ldrd	r0, r1, [r0, #24]
 3702 0570 1833     		adds	r3, r3, #24
 3703 0572 74E7     		b	.L259
ARM GAS  /tmp/cckAiVOj.s 			page 100


 3704              	.LVL316:
 3705              	.L257:
  96:src/console.c ****   case KEY_F2:
 3706              		.loc 2 96 67 view .LVU1022
 3707              	.LBE139:
 3708              	.LBE168:
 3709              	.LBB169:
 3710              	.LBB153:
  89:src/menu.c    ****   }
 3711              		.loc 1 89 5 is_stmt 1 view .LVU1023
  89:src/menu.c    ****   }
 3712              		.loc 1 89 18 is_stmt 0 view .LVU1024
 3713 0574 0D4A     		ldr	r2, .L284+40
 3714 0576 D2F80090 		ldr	r9, [r2]
 3715 057a C6F80090 		str	r9, [r6]
  97:src/menu.c    **** }
 3716              		.loc 1 97 3 is_stmt 1 view .LVU1025
 3717 057e 0DF1080A 		add	r10, sp, #8
 3718 0582 50E6     		b	.L230
 3719              	.L285:
 3720              		.align	2
 3721              	.L284:
 3722 0584 00000000 		.word	.LANCHOR17
 3723 0588 00000000 		.word	.LANCHOR3
 3724 058c 00000000 		.word	.LANCHOR15
 3725 0590 E0000000 		.word	.LANCHOR12+224
 3726 0594 00000000 		.word	.LANCHOR4
 3727 0598 00000000 		.word	.LANCHOR13
 3728 059c E0000000 		.word	.LANCHOR11+224
 3729 05a0 00000000 		.word	.LANCHOR11
 3730 05a4 00000000 		.word	.LANCHOR16
 3731 05a8 00000000 		.word	.LANCHOR12
 3732 05ac 00000000 		.word	.LANCHOR2
 3733              	.LBE153:
 3734              	.LBE169:
 3735              		.cfi_endproc
 3736              	.LFE28:
 3738              		.global	n_p
 3739              		.comm	print_string,22,4
 3740              		.global	spaces
 3741              		.global	release
 3742              		.global	h_shift
 3743              		.global	g_shift
 3744              		.global	f_shift
 3745              		.global	heartbeat
 3746              		.global	no_key
 3747              		.global	MID_MENU
 3748              		.section	.rodata.str1.4,"aMS",%progbits,1
 3749              		.align	2
 3750              	.LC13:
 3751 0000 53797374 		.ascii	"System!\000"
 3751      656D2100 
 3752              		.global	mid_menu
 3753              		.section	.rodata
 3754              		.align	2
 3755              		.set	.LANCHOR5,. + 0
 3756              	.LC9:
ARM GAS  /tmp/cckAiVOj.s 			page 101


 3757 0000 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 3757      2A2B0708 
 3757      091C0B0C 
 3757      0D0E0F
 3758 000f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 3758      13141516 
 3758      00121819 
 3758      1A
 3759 001c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 3759      1E1F2000 
 3759      21222324 
 3759      25
 3760              		.section	.bss.current_menu,"aw",%nobits
 3761              		.align	2
 3762              		.set	.LANCHOR1,. + 0
 3765              	current_menu:
 3766 0000 00000000 		.space	4
 3767              		.section	.bss.default_menu,"aw",%nobits
 3768              		.align	2
 3769              		.set	.LANCHOR2,. + 0
 3772              	default_menu:
 3773 0000 00000000 		.space	4
 3774              		.section	.bss.last_menu,"aw",%nobits
 3775              		.align	2
 3776              		.set	.LANCHOR3,. + 0
 3779              	last_menu:
 3780 0000 00000000 		.space	4
 3781              		.section	.bss.mdots,"aw",%nobits
 3782              		.align	2
 3783              		.set	.LANCHOR0,. + 0
 3786              	mdots:
 3787 0000 00000000 		.space	400
 3787      00000000 
 3787      00000000 
 3787      00000000 
 3787      00000000 
 3788              		.section	.bss.n_p,"aw",%nobits
 3789              		.align	2
 3792              	n_p:
 3793 0000 00000000 		.space	4
 3794              		.section	.bss.start_ticks,"aw",%nobits
 3795              		.align	2
 3796              		.set	.LANCHOR6,. + 0
 3799              	start_ticks:
 3800 0000 00000000 		.space	4
 3801              		.section	.data.f_shift,"aw"
 3802              		.align	2
 3803              		.set	.LANCHOR9,. + 0
 3806              	f_shift:
 3807 0000 29       		.byte	41
 3808 0001 000000   		.space	3
 3809 0004 FFFFFFFF 		.word	-1
 3810              		.section	.data.g_shift,"aw"
 3811              		.align	2
 3812              		.set	.LANCHOR17,. + 0
 3815              	g_shift:
 3816 0000 2A       		.byte	42
ARM GAS  /tmp/cckAiVOj.s 			page 102


 3817 0001 000000   		.space	3
 3818 0004 FFFFFFFF 		.word	-1
 3819              		.section	.data.h_shift,"aw"
 3820              		.align	2
 3821              		.set	.LANCHOR13,. + 0
 3824              	h_shift:
 3825 0000 2B       		.byte	43
 3826 0001 000000   		.space	3
 3827 0004 FFFFFFFF 		.word	-1
 3828              		.section	.data.heartbeat,"aw"
 3829              		.align	2
 3830              		.set	.LANCHOR19,. + 0
 3833              	heartbeat:
 3834 0000 62       		.byte	98
 3835 0001 000000   		.space	3
 3836 0004 FFFFFFFF 		.word	-1
 3837              		.section	.data.no_key,"aw"
 3838              		.align	2
 3839              		.set	.LANCHOR8,. + 0
 3842              	no_key:
 3843 0000 2E       		.byte	46
 3844 0001 000000   		.space	3
 3845 0004 00000000 		.word	0
 3846              		.section	.data.release,"aw"
 3847              		.align	2
 3848              		.set	.LANCHOR10,. + 0
 3851              	release:
 3852 0000 63       		.byte	99
 3853 0001 000000   		.space	3
 3854 0004 FFFFFFFF 		.word	-1
 3855              		.section	.data.spaces,"aw"
 3856              		.align	2
 3857              		.set	.LANCHOR7,. + 0
 3860              	spaces:
 3861 0000 20202020 		.ascii	"                     \000"
 3861      20202020 
 3861      20202020 
 3861      20202020 
 3861      20202020 
 3862              		.section	.rodata.MID_MENU,"a"
 3863              		.align	2
 3864              		.set	.LANCHOR18,. + 0
 3867              	MID_MENU:
 3868 0000 00000000 		.word	.LC13
 3869 0004 00000000 		.word	mid_menu
 3870 0008 00000000 		.word	0
 3871 000c 00000000 		.word	0
 3872              		.section	.rodata.Menus,"a"
 3873              		.align	2
 3874              		.set	.LANCHOR4,. + 0
 3877              	Menus:
 3878 0000 426C616E 		.ascii	"Blank\000"
 3878      6B00
 3879 0006 00000000 		.space	9
 3879      00000000 
 3879      00
 3880 000f 00       		.space	1
ARM GAS  /tmp/cckAiVOj.s 			page 103


 3881 0010 2E       		.byte	46
 3882 0011 000000   		.space	3
 3883 0014 FFFFFFFF 		.word	-1
 3884 0018 2E       		.byte	46
 3885 0019 000000   		.space	3
 3886 001c FFFFFFFF 		.word	-1
 3887 0020 00       		.ascii	"\000"
 3888 0021 00000000 		.space	7
 3888      000000
 3889 0028 00       		.ascii	"\000"
 3890 0029 00000000 		.space	7
 3890      000000
 3891 0030 2E       		.byte	46
 3892 0031 000000   		.space	3
 3893 0034 FFFFFFFF 		.word	-1
 3894 0038 2E       		.byte	46
 3895 0039 000000   		.space	3
 3896 003c FFFFFFFF 		.word	-1
 3897 0040 00       		.ascii	"\000"
 3898 0041 00000000 		.space	7
 3898      000000
 3899 0048 00       		.ascii	"\000"
 3900 0049 00000000 		.space	7
 3900      000000
 3901 0050 2E       		.byte	46
 3902 0051 000000   		.space	3
 3903 0054 FFFFFFFF 		.word	-1
 3904 0058 2E       		.byte	46
 3905 0059 000000   		.space	3
 3906 005c FFFFFFFF 		.word	-1
 3907 0060 00       		.ascii	"\000"
 3908 0061 00000000 		.space	7
 3908      000000
 3909 0068 00       		.ascii	"\000"
 3910 0069 00000000 		.space	7
 3910      000000
 3911 0070 2E       		.byte	46
 3912 0071 000000   		.space	3
 3913 0074 FFFFFFFF 		.word	-1
 3914 0078 2E       		.byte	46
 3915 0079 000000   		.space	3
 3916 007c FFFFFFFF 		.word	-1
 3917 0080 00       		.ascii	"\000"
 3918 0081 00000000 		.space	7
 3918      000000
 3919 0088 00       		.ascii	"\000"
 3920 0089 00000000 		.space	7
 3920      000000
 3921 0090 2C       		.byte	44
 3922 0091 000000   		.space	3
 3923 0094 FFFFFFFF 		.word	-1
 3924 0098 2E       		.byte	46
 3925 0099 000000   		.space	3
 3926 009c FFFFFFFF 		.word	-1
 3927 00a0 2D2D0D00 		.ascii	"--\015\000"
 3928 00a4 00000000 		.space	4
 3929 00a8 00       		.ascii	"\000"
ARM GAS  /tmp/cckAiVOj.s 			page 104


 3930 00a9 00000000 		.space	7
 3930      000000
 3931 00b0 2D       		.byte	45
 3932 00b1 000000   		.space	3
 3933 00b4 FFFFFFFF 		.word	-1
 3934 00b8 31       		.byte	49
 3935 00b9 000000   		.space	3
 3936 00bc 0B000000 		.word	11
 3937 00c0 43505800 		.ascii	"CPX\000"
 3938 00c4 00000000 		.space	4
 3939 00c8 00       		.ascii	"\000"
 3940 00c9 00000000 		.space	7
 3940      000000
 3941 00d0 436C6561 		.ascii	"Clear\000"
 3941      7200
 3942 00d6 00000000 		.space	9
 3942      00000000 
 3942      00
 3943 00df 00       		.space	1
 3944 00e0 10       		.byte	16
 3945 00e1 000000   		.space	3
 3946 00e4 01000000 		.word	1
 3947 00e8 34       		.byte	52
 3948 00e9 000000   		.space	3
 3949 00ec 44010000 		.word	324
 3950 00f0 434C5072 		.ascii	"CLProg\000"
 3950      6F6700
 3951 00f7 00       		.space	1
 3952 00f8 434C5041 		.ascii	"CLPAll\000"
 3952      6C6C00
 3953 00ff 00       		.space	1
 3954 0100 10       		.byte	16
 3955 0101 000000   		.space	3
 3956 0104 02000000 		.word	2
 3957 0108 34       		.byte	52
 3958 0109 000000   		.space	3
 3959 010c 3E010000 		.word	318
 3960 0110 434C9100 		.ascii	"CL\221\000"
 3961 0114 00000000 		.space	4
 3962 0118 434C5265 		.ascii	"CLReg\000"
 3962      6700
 3963 011e 0000     		.space	2
 3964 0120 10       		.byte	16
 3965 0121 000000   		.space	3
 3966 0124 03000000 		.word	3
 3967 0128 34       		.byte	52
 3968 0129 000000   		.space	3
 3969 012c 74010000 		.word	372
 3970 0130 434C7800 		.ascii	"CLx\000"
 3971 0134 00000000 		.space	4
 3972 0138 434C06A0 		.ascii	"CL\006\240\000"
 3972      00
 3973 013d 000000   		.space	3
 3974 0140 34       		.byte	52
 3975 0141 000000   		.space	3
 3976 0144 40010000 		.word	320
 3977 0148 34       		.byte	52
ARM GAS  /tmp/cckAiVOj.s 			page 105


 3978 0149 000000   		.space	3
 3979 014c 41010000 		.word	321
 3980 0150 434C5374 		.ascii	"CLStk\000"
 3980      6B00
 3981 0156 0000     		.space	2
 3982 0158 434C416C 		.ascii	"CLAll\000"
 3982      6C00
 3983 015e 0000     		.space	2
 3984 0160 2C       		.byte	44
 3985 0161 000000   		.space	3
 3986 0164 FFFFFFFF 		.word	-1
 3987 0168 2E       		.byte	46
 3988 0169 000000   		.space	3
 3989 016c FFFFFFFF 		.word	-1
 3990 0170 2D2D0D00 		.ascii	"--\015\000"
 3991 0174 00000000 		.space	4
 3992 0178 00       		.ascii	"\000"
 3993 0179 00000000 		.space	7
 3993      000000
 3994 0180 2D       		.byte	45
 3995 0181 000000   		.space	3
 3996 0184 FFFFFFFF 		.word	-1
 3997 0188 2E       		.byte	46
 3998 0189 000000   		.space	3
 3999 018c FFFFFFFF 		.word	-1
 4000 0190 43505800 		.ascii	"CPX\000"
 4001 0194 00000000 		.space	4
 4002 0198 00       		.ascii	"\000"
 4003 0199 00000000 		.space	7
 4003      000000
 4004 01a0 44495350 		.ascii	"DISP\000"
 4004      00
 4005 01a5 00000000 		.space	10
 4005      00000000 
 4005      0000
 4006 01af 00       		.space	1
 4007 01b0 00       		.byte	0
 4008 01b1 000000   		.space	3
 4009 01b4 03000000 		.word	3
 4010 01b8 05       		.byte	5
 4011 01b9 000000   		.space	3
 4012 01bc 01000000 		.word	1
 4013 01c0 414C4C00 		.ascii	"ALL\000"
 4014 01c4 00000000 		.space	4
 4015 01c8 6120622F 		.ascii	"a b/c\000"
 4015      6300
 4016 01ce 0000     		.space	2
 4017 01d0 01       		.byte	1
 4018 01d1 000000   		.space	3
 4019 01d4 03000000 		.word	3
 4020 01d8 05       		.byte	5
 4021 01d9 000000   		.space	3
 4022 01dc 02000000 		.word	2
 4023 01e0 46495800 		.ascii	"FIX\000"
 4024 01e4 00000000 		.space	4
 4025 01e8 642F6300 		.ascii	"d/c\000"
 4026 01ec 00000000 		.space	4
ARM GAS  /tmp/cckAiVOj.s 			page 106


 4027 01f0 02       		.byte	2
 4028 01f1 000000   		.space	3
 4029 01f4 03000000 		.word	3
 4030 01f8 06       		.byte	6
 4031 01f9 000000   		.space	3
 4032 01fc 01000000 		.word	1
 4033 0200 53434900 		.ascii	"SCI\000"
 4034 0204 00000000 		.space	4
 4035 0208 482E4D53 		.ascii	"H.MS\000"
 4035      00
 4036 020d 000000   		.space	3
 4037 0210 03       		.byte	3
 4038 0211 000000   		.space	3
 4039 0214 03000000 		.word	3
 4040 0218 07       		.byte	7
 4041 0219 000000   		.space	3
 4042 021c 01000000 		.word	1
 4043 0220 454E4700 		.ascii	"ENG\000"
 4044 0224 00000000 		.space	4
 4045 0228 482E6400 		.ascii	"H.d\000"
 4046 022c 00000000 		.space	4
 4047 0230 2C       		.byte	44
 4048 0231 000000   		.space	3
 4049 0234 FFFFFFFF 		.word	-1
 4050 0238 26       		.byte	38
 4051 0239 000000   		.space	3
 4052 023c 03000000 		.word	3
 4053 0240 2D2D0D00 		.ascii	"--\015\000"
 4054 0244 00000000 		.space	4
 4055 0248 2E2F2C00 		.ascii	"./,\000"
 4056 024c 00000000 		.space	4
 4057 0250 2D       		.byte	45
 4058 0251 000000   		.space	3
 4059 0254 FFFFFFFF 		.word	-1
 4060 0258 2E       		.byte	46
 4061 0259 000000   		.space	3
 4062 025c FFFFFFFF 		.word	-1
 4063 0260 43505800 		.ascii	"CPX\000"
 4064 0264 00000000 		.space	4
 4065 0268 00       		.ascii	"\000"
 4066 0269 00000000 		.space	7
 4066      000000
 4067 0270 42415345 		.ascii	"BASE\000"
 4067      00
 4068 0275 00000000 		.space	10
 4068      00000000 
 4068      0000
 4069 027f 00       		.space	1
 4070 0280 0E       		.byte	14
 4071 0281 000000   		.space	3
 4072 0284 01000000 		.word	1
 4073 0288 0E       		.byte	14
 4074 0289 000000   		.space	3
 4075 028c 03000000 		.word	3
 4076 0290 42494E00 		.ascii	"BIN\000"
 4077 0294 00000000 		.space	4
 4078 0298 6E6F7400 		.ascii	"not\000"
ARM GAS  /tmp/cckAiVOj.s 			page 107


 4079 029c 00000000 		.space	4
 4080 02a0 0E       		.byte	14
 4081 02a1 000000   		.space	3
 4082 02a4 02000000 		.word	2
 4083 02a8 13       		.byte	19
 4084 02a9 000000   		.space	3
 4085 02ac 03000000 		.word	3
 4086 02b0 4F435400 		.ascii	"OCT\000"
 4087 02b4 00000000 		.space	4
 4088 02b8 616E6400 		.ascii	"and\000"
 4089 02bc 00000000 		.space	4
 4090 02c0 0F       		.byte	15
 4091 02c1 000000   		.space	3
 4092 02c4 01000000 		.word	1
 4093 02c8 14       		.byte	20
 4094 02c9 000000   		.space	3
 4095 02cc 03000000 		.word	3
 4096 02d0 44454300 		.ascii	"DEC\000"
 4097 02d4 00000000 		.space	4
 4098 02d8 6F7200   		.ascii	"or\000"
 4099 02db 00000000 		.space	5
 4099      00
 4100 02e0 0F       		.byte	15
 4101 02e1 000000   		.space	3
 4102 02e4 02000000 		.word	2
 4103 02e8 15       		.byte	21
 4104 02e9 000000   		.space	3
 4105 02ec 03000000 		.word	3
 4106 02f0 48455800 		.ascii	"HEX\000"
 4107 02f4 00000000 		.space	4
 4108 02f8 786F7200 		.ascii	"xor\000"
 4109 02fc 00000000 		.space	4
 4110 0300 2C       		.byte	44
 4111 0301 000000   		.space	3
 4112 0304 FFFFFFFF 		.word	-1
 4113 0308 16       		.byte	22
 4114 0309 000000   		.space	3
 4115 030c 03000000 		.word	3
 4116 0310 2D2D0D00 		.ascii	"--\015\000"
 4117 0314 00000000 		.space	4
 4118 0318 524D4452 		.ascii	"RMDR\000"
 4118      00
 4119 031d 000000   		.space	3
 4120 0320 2D       		.byte	45
 4121 0321 000000   		.space	3
 4122 0324 FFFFFFFF 		.word	-1
 4123 0328 07       		.byte	7
 4124 0329 000000   		.space	3
 4125 032c 01000000 		.word	1
 4126 0330 43505800 		.ascii	"CPX\000"
 4127 0334 00000000 		.space	4
 4128 0338 482E6400 		.ascii	"H.d\000"
 4129 033c 00000000 		.space	4
 4130 0340 414E474C 		.ascii	"ANGLES\000"
 4130      455300
 4131 0347 00000000 		.space	8
 4131      00000000 
ARM GAS  /tmp/cckAiVOj.s 			page 108


 4132 034f 00       		.space	1
 4133 0350 06       		.byte	6
 4134 0351 000000   		.space	3
 4135 0354 02000000 		.word	2
 4136 0358 04       		.byte	4
 4137 0359 000000   		.space	3
 4138 035c 01000000 		.word	1
 4139 0360 44454700 		.ascii	"DEG\000"
 4140 0364 00000000 		.space	4
 4141 0368 500D5200 		.ascii	"P\015R\000"
 4142 036c 00000000 		.space	4
 4143 0370 07       		.byte	7
 4144 0371 000000   		.space	3
 4145 0374 02000000 		.word	2
 4146 0378 04       		.byte	4
 4147 0379 000000   		.space	3
 4148 037c 02000000 		.word	2
 4149 0380 52414400 		.ascii	"RAD\000"
 4150 0384 00000000 		.space	4
 4151 0388 520D5000 		.ascii	"R\015P\000"
 4152 038c 00000000 		.space	4
 4153 0390 08       		.byte	8
 4154 0391 000000   		.space	3
 4155 0394 02000000 		.word	2
 4156 0398 00       		.byte	0
 4157 0399 000000   		.space	3
 4158 039c 01000000 		.word	1
 4159 03a0 47524144 		.ascii	"GRAD\000"
 4159      00
 4160 03a5 000000   		.space	3
 4161 03a8 48595000 		.ascii	"HYP\000"
 4162 03ac 00000000 		.space	4
 4163 03b0 06       		.byte	6
 4164 03b1 000000   		.space	3
 4165 03b4 01000000 		.word	1
 4166 03b8 07       		.byte	7
 4167 03b9 000000   		.space	3
 4168 03bc 01000000 		.word	1
 4169 03c0 482E4D53 		.ascii	"H.MS\000"
 4169      00
 4170 03c5 000000   		.space	3
 4171 03c8 482E6400 		.ascii	"H.d\000"
 4172 03cc 00000000 		.space	4
 4173 03d0 2C       		.byte	44
 4174 03d1 000000   		.space	3
 4175 03d4 FFFFFFFF 		.word	-1
 4176 03d8 00       		.byte	0
 4177 03d9 000000   		.space	3
 4178 03dc 02000000 		.word	2
 4179 03e0 2D2D0D00 		.ascii	"--\015\000"
 4180 03e4 00000000 		.space	4
 4181 03e8 4859509D 		.ascii	"HYP\235\000"
 4181      00
 4182 03ed 000000   		.space	3
 4183 03f0 2D       		.byte	45
 4184 03f1 000000   		.space	3
 4185 03f4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cckAiVOj.s 			page 109


 4186 03f8 2E       		.byte	46
 4187 03f9 000000   		.space	3
 4188 03fc FFFFFFFF 		.word	-1
 4189 0400 43505800 		.ascii	"CPX\000"
 4190 0404 00000000 		.space	4
 4191 0408 00       		.ascii	"\000"
 4192 0409 00000000 		.space	7
 4192      000000
 4193 0410 4D495343 		.ascii	"MISC\000"
 4193      00
 4194 0415 00000000 		.space	10
 4194      00000000 
 4194      0000
 4195 041f 00       		.space	1
 4196 0420 25       		.byte	37
 4197 0421 000000   		.space	3
 4198 0424 01000000 		.word	1
 4199 0428 14       		.byte	20
 4200 0429 000000   		.space	3
 4201 042c 01000000 		.word	1
 4202 0430 7C587C00 		.ascii	"|X|\000"
 4203 0434 00000000 		.space	4
 4204 0438 329C00   		.ascii	"2\234\000"
 4205 043b 00000000 		.space	5
 4205      00
 4206 0440 25       		.byte	37
 4207 0441 000000   		.space	3
 4208 0444 02000000 		.word	2
 4209 0448 14       		.byte	20
 4210 0449 000000   		.space	3
 4211 044c 02000000 		.word	2
 4212 0450 524E4400 		.ascii	"RND\000"
 4213 0454 00000000 		.space	4
 4214 0458 4C6F67BA 		.ascii	"Log\272\000"
 4214      00
 4215 045d 000000   		.space	3
 4216 0460 26       		.byte	38
 4217 0461 000000   		.space	3
 4218 0464 01000000 		.word	1
 4219 0468 15       		.byte	21
 4220 0469 000000   		.space	3
 4221 046c 02000000 		.word	2
 4222 0470 49506172 		.ascii	"IPart\000"
 4222      7400
 4223 0476 0000     		.space	2
 4224 0478 4C6F678B 		.ascii	"Log\213\000"
 4224      00
 4225 047d 000000   		.space	3
 4226 0480 26       		.byte	38
 4227 0481 000000   		.space	3
 4228 0484 02000000 		.word	2
 4229 0488 16       		.byte	22
 4230 0489 000000   		.space	3
 4231 048c 02000000 		.word	2
 4232 0490 46506172 		.ascii	"FPart\000"
 4232      7400
 4233 0496 0000     		.space	2
ARM GAS  /tmp/cckAiVOj.s 			page 110


 4234 0498 7C7C656C 		.ascii	"||el\000"
 4234      00
 4235 049d 000000   		.space	3
 4236 04a0 2C       		.byte	44
 4237 04a1 000000   		.space	3
 4238 04a4 FFFFFFFF 		.word	-1
 4239 04a8 22       		.byte	34
 4240 04a9 000000   		.space	3
 4241 04ac 02000000 		.word	2
 4242 04b0 2D2D0D00 		.ascii	"--\015\000"
 4243 04b4 00000000 		.space	4
 4244 04b8 832500   		.ascii	"\203%\000"
 4245 04bb 00000000 		.space	5
 4245      00
 4246 04c0 2D       		.byte	45
 4247 04c1 000000   		.space	3
 4248 04c4 FFFFFFFF 		.word	-1
 4249 04c8 2E       		.byte	46
 4250 04c9 000000   		.space	3
 4251 04cc FFFFFFFF 		.word	-1
 4252 04d0 43505800 		.ascii	"CPX\000"
 4253 04d4 00000000 		.space	4
 4254 04d8 00       		.ascii	"\000"
 4255 04d9 00000000 		.space	7
 4255      000000
 4256 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 4256      204B6579 
 4256      00
 4257 04e9 00000000 		.space	6
 4257      0000
 4258 04ef 00       		.space	1
 4259 04f0 0D       		.byte	13
 4260 04f1 000000   		.space	3
 4261 04f4 01000000 		.word	1
 4262 04f8 2E       		.byte	46
 4263 04f9 000000   		.space	3
 4264 04fc FFFFFFFF 		.word	-1
 4265 0500 53686F77 		.ascii	"Show\016\000"
 4265      0E00
 4266 0506 0000     		.space	2
 4267 0508 00       		.ascii	"\000"
 4268 0509 00000000 		.space	7
 4268      000000
 4269 0510 0D       		.byte	13
 4270 0511 000000   		.space	3
 4271 0514 02000000 		.word	2
 4272 0518 2E       		.byte	46
 4273 0519 000000   		.space	3
 4274 051c FFFFFFFF 		.word	-1
 4275 0520 53686F77 		.ascii	"Show\015\000"
 4275      0D00
 4276 0526 0000     		.space	2
 4277 0528 00       		.ascii	"\000"
 4278 0529 00000000 		.space	7
 4278      000000
 4279 0530 0D       		.byte	13
 4280 0531 000000   		.space	3
ARM GAS  /tmp/cckAiVOj.s 			page 111


 4281 0534 03000000 		.word	3
 4282 0538 34       		.byte	52
 4283 0539 000000   		.space	3
 4284 053c 00330000 		.word	13056
 4285 0540 78173F00 		.ascii	"x\027?\000"
 4286 0544 00000000 		.space	4
 4287 0548 7A173F00 		.ascii	"z\027?\000"
 4288 054c 00000000 		.space	4
 4289 0550 34       		.byte	52
 4290 0551 000000   		.space	3
 4291 0554 00320000 		.word	12800
 4292 0558 34       		.byte	52
 4293 0559 000000   		.space	3
 4294 055c 00340000 		.word	13312
 4295 0560 79173F00 		.ascii	"y\027?\000"
 4296 0564 00000000 		.space	4
 4297 0568 74173F00 		.ascii	"t\027?\000"
 4298 056c 00000000 		.space	4
 4299 0570 2C       		.byte	44
 4300 0571 000000   		.space	3
 4301 0574 FFFFFFFF 		.word	-1
 4302 0578 2E       		.byte	46
 4303 0579 000000   		.space	3
 4304 057c FFFFFFFF 		.word	-1
 4305 0580 2D2D0D00 		.ascii	"--\015\000"
 4306 0584 00000000 		.space	4
 4307 0588 00       		.ascii	"\000"
 4308 0589 00000000 		.space	7
 4308      000000
 4309 0590 2D       		.byte	45
 4310 0591 000000   		.space	3
 4311 0594 FFFFFFFF 		.word	-1
 4312 0598 2E       		.byte	46
 4313 0599 000000   		.space	3
 4314 059c FFFFFFFF 		.word	-1
 4315 05a0 43505800 		.ascii	"CPX\000"
 4316 05a4 00000000 		.space	4
 4317 05a8 00       		.ascii	"\000"
 4318 05a9 00000000 		.space	7
 4318      000000
 4319 05b0 50726F67 		.ascii	"Program\000"
 4319      72616D00 
 4320 05b8 00000000 		.space	7
 4320      000000
 4321 05bf 00       		.space	1
 4322 05c0 27       		.byte	39
 4323 05c1 000000   		.space	3
 4324 05c4 01000000 		.word	1
 4325 05c8 28       		.byte	40
 4326 05c9 000000   		.space	3
 4327 05cc 01000000 		.word	1
 4328 05d0 4C424C00 		.ascii	"LBL\000"
 4329 05d4 00000000 		.space	4
 4330 05d8 44534500 		.ascii	"DSE\000"
 4331 05dc 00000000 		.space	4
 4332 05e0 27       		.byte	39
 4333 05e1 000000   		.space	3
ARM GAS  /tmp/cckAiVOj.s 			page 112


 4334 05e4 02000000 		.word	2
 4335 05e8 28       		.byte	40
 4336 05e9 000000   		.space	3
 4337 05ec 02000000 		.word	2
 4338 05f0 52544E00 		.ascii	"RTN\000"
 4339 05f4 00000000 		.space	4
 4340 05f8 49534700 		.ascii	"ISG\000"
 4341 05fc 00000000 		.space	4
 4342 0600 25       		.byte	37
 4343 0601 000000   		.space	3
 4344 0604 03000000 		.word	3
 4345 0608 34       		.byte	52
 4346 0609 000000   		.space	3
 4347 060c 00600000 		.word	24576
 4348 0610 50617573 		.ascii	"Pause\000"
 4348      6500
 4349 0616 0000     		.space	2
 4350 0618 44454300 		.ascii	"DEC\000"
 4351 061c 00000000 		.space	4
 4352 0620 12       		.byte	18
 4353 0621 000000   		.space	3
 4354 0624 03000000 		.word	3
 4355 0628 34       		.byte	52
 4356 0629 000000   		.space	3
 4357 062c 00610000 		.word	24832
 4358 0630 47544F00 		.ascii	"GTO\000"
 4359 0634 00000000 		.space	4
 4360 0638 494E4300 		.ascii	"INC\000"
 4361 063c 00000000 		.space	4
 4362 0640 2C       		.byte	44
 4363 0641 000000   		.space	3
 4364 0644 FFFFFFFF 		.word	-1
 4365 0648 34       		.byte	52
 4366 0649 000000   		.space	3
 4367 064c 00570000 		.word	22272
 4368 0650 2D2D0D00 		.ascii	"--\015\000"
 4369 0654 00000000 		.space	4
 4370 0658 4241434B 		.ascii	"BACK\000"
 4370      00
 4371 065d 000000   		.space	3
 4372 0660 2D       		.byte	45
 4373 0661 000000   		.space	3
 4374 0664 FFFFFFFF 		.word	-1
 4375 0668 34       		.byte	52
 4376 0669 000000   		.space	3
 4377 066c 00560000 		.word	22016
 4378 0670 43505800 		.ascii	"CPX\000"
 4379 0674 00000000 		.space	4
 4380 0678 534B4950 		.ascii	"SKIP\000"
 4380      00
 4381 067d 000000   		.space	3
 4382 0680 53657475 		.ascii	"Setup 1\000"
 4382      70203100 
 4383 0688 00000000 		.space	7
 4383      000000
 4384 068f 00       		.space	1
 4385 0690 32       		.byte	50
ARM GAS  /tmp/cckAiVOj.s 			page 113


 4386 0691 000000   		.space	3
 4387 0694 00000000 		.word	0
 4388 0698 30       		.byte	48
 4389 0699 000000   		.space	3
 4390 069c 00000000 		.word	0
 4391 06a0 45584954 		.ascii	"EXIT\000"
 4391      00
 4392 06a5 000000   		.space	3
 4393 06a8 53797374 		.ascii	"System\000"
 4393      656D00
 4394 06af 00       		.space	1
 4395 06b0 31       		.byte	49
 4396 06b1 000000   		.space	3
 4397 06b4 09000000 		.word	9
 4398 06b8 2E       		.byte	46
 4399 06b9 000000   		.space	3
 4400 06bc FFFFFFFF 		.word	-1
 4401 06c0 48454C50 		.ascii	"HELP\000"
 4401      00
 4402 06c5 000000   		.space	3
 4403 06c8 00       		.ascii	"\000"
 4404 06c9 00000000 		.space	7
 4404      000000
 4405 06d0 31       		.byte	49
 4406 06d1 000000   		.space	3
 4407 06d4 02000000 		.word	2
 4408 06d8 31       		.byte	49
 4409 06d9 000000   		.space	3
 4410 06dc 06000000 		.word	6
 4411 06e0 4F6E5354 		.ascii	"OnSTO\000"
 4411      4F00
 4412 06e6 0000     		.space	2
 4413 06e8 53765241 		.ascii	"SvRAM\000"
 4413      4D00
 4414 06ee 0000     		.space	2
 4415 06f0 31       		.byte	49
 4416 06f1 000000   		.space	3
 4417 06f4 03000000 		.word	3
 4418 06f8 31       		.byte	49
 4419 06f9 000000   		.space	3
 4420 06fc 07000000 		.word	7
 4421 0700 4F6E5243 		.ascii	"OnRCL\000"
 4421      4C00
 4422 0706 0000     		.space	2
 4423 0708 4C645241 		.ascii	"LdRAM\000"
 4423      4D00
 4424 070e 0000     		.space	2
 4425 0710 2C       		.byte	44
 4426 0711 000000   		.space	3
 4427 0714 FFFFFFFF 		.word	-1
 4428 0718 2E       		.byte	46
 4429 0719 000000   		.space	3
 4430 071c FFFFFFFF 		.word	-1
 4431 0720 2D2D0D00 		.ascii	"--\015\000"
 4432 0724 00000000 		.space	4
 4433 0728 00       		.ascii	"\000"
 4434 0729 00000000 		.space	7
ARM GAS  /tmp/cckAiVOj.s 			page 114


 4434      000000
 4435 0730 2D       		.byte	45
 4436 0731 000000   		.space	3
 4437 0734 FFFFFFFF 		.word	-1
 4438 0738 2E       		.byte	46
 4439 0739 000000   		.space	3
 4440 073c FFFFFFFF 		.word	-1
 4441 0740 43505800 		.ascii	"CPX\000"
 4442 0744 00000000 		.space	4
 4443 0748 00       		.ascii	"\000"
 4444 0749 00000000 		.space	7
 4444      000000
 4445 0750 4172726F 		.ascii	"Arrow\000"
 4445      7700
 4446 0756 00000000 		.space	9
 4446      00000000 
 4446      00
 4447 075f 00       		.space	1
 4448 0760 0E       		.byte	14
 4449 0761 000000   		.space	3
 4450 0764 01000000 		.word	1
 4451 0768 06       		.byte	6
 4452 0769 000000   		.space	3
 4453 076c 02000000 		.word	2
 4454 0770 42696E00 		.ascii	"Bin\000"
 4455 0774 00000000 		.space	4
 4456 0778 44454700 		.ascii	"DEG\000"
 4457 077c 00000000 		.space	4
 4458 0780 0E       		.byte	14
 4459 0781 000000   		.space	3
 4460 0784 02000000 		.word	2
 4461 0788 07       		.byte	7
 4462 0789 000000   		.space	3
 4463 078c 02000000 		.word	2
 4464 0790 4F637400 		.ascii	"Oct\000"
 4465 0794 00000000 		.space	4
 4466 0798 52414400 		.ascii	"RAD\000"
 4467 079c 00000000 		.space	4
 4468 07a0 0F       		.byte	15
 4469 07a1 000000   		.space	3
 4470 07a4 01000000 		.word	1
 4471 07a8 08       		.byte	8
 4472 07a9 000000   		.space	3
 4473 07ac 02000000 		.word	2
 4474 07b0 44656300 		.ascii	"Dec\000"
 4475 07b4 00000000 		.space	4
 4476 07b8 47726164 		.ascii	"Grad\000"
 4476      00
 4477 07bd 000000   		.space	3
 4478 07c0 0F       		.byte	15
 4479 07c1 000000   		.space	3
 4480 07c4 02000000 		.word	2
 4481 07c8 06       		.byte	6
 4482 07c9 000000   		.space	3
 4483 07cc 01000000 		.word	1
 4484 07d0 48657800 		.ascii	"Hex\000"
 4485 07d4 00000000 		.space	4
ARM GAS  /tmp/cckAiVOj.s 			page 115


 4486 07d8 0D484D53 		.ascii	"\015HMS\000"
 4486      00
 4487 07dd 000000   		.space	3
 4488 07e0 2C       		.byte	44
 4489 07e1 000000   		.space	3
 4490 07e4 FFFFFFFF 		.word	-1
 4491 07e8 07       		.byte	7
 4492 07e9 000000   		.space	3
 4493 07ec 01000000 		.word	1
 4494 07f0 2D2D0D00 		.ascii	"--\015\000"
 4495 07f4 00000000 		.space	4
 4496 07f8 484D530D 		.ascii	"HMS\015\000"
 4496      00
 4497 07fd 000000   		.space	3
 4498 0800 2D       		.byte	45
 4499 0801 000000   		.space	3
 4500 0804 FFFFFFFF 		.word	-1
 4501 0808 2E       		.byte	46
 4502 0809 000000   		.space	3
 4503 080c FFFFFFFF 		.word	-1
 4504 0810 43505800 		.ascii	"CPX\000"
 4505 0814 00000000 		.space	4
 4506 0818 00       		.ascii	"\000"
 4507 0819 00000000 		.space	7
 4507      000000
 4508 0820 466C6167 		.ascii	"Flags\000"
 4508      7300
 4509 0826 00000000 		.space	9
 4509      00000000 
 4509      00
 4510 082f 00       		.space	1
 4511 0830 1E       		.byte	30
 4512 0831 000000   		.space	3
 4513 0834 01000000 		.word	1
 4514 0838 34       		.byte	52
 4515 0839 000000   		.space	3
 4516 083c 00740000 		.word	29696
 4517 0840 53465F00 		.ascii	"SF_\000"
 4518 0844 00000000 		.space	4
 4519 0848 46533F00 		.ascii	"FS?\000"
 4520 084c 00000000 		.space	4
 4521 0850 1E       		.byte	30
 4522 0851 000000   		.space	3
 4523 0854 02000000 		.word	2
 4524 0858 34       		.byte	52
 4525 0859 000000   		.space	3
 4526 085c 00750000 		.word	29952
 4527 0860 43465F00 		.ascii	"CF_\000"
 4528 0864 00000000 		.space	4
 4529 0868 46433F00 		.ascii	"FC?\000"
 4530 086c 00000000 		.space	4
 4531 0870 1F       		.byte	31
 4532 0871 000000   		.space	3
 4533 0874 01000000 		.word	1
 4534 0878 34       		.byte	52
 4535 0879 000000   		.space	3
 4536 087c 00500000 		.word	20480
ARM GAS  /tmp/cckAiVOj.s 			page 116


 4537 0880 783D3F00 		.ascii	"x=?\000"
 4538 0884 00000000 		.space	4
 4539 0888 783C3F00 		.ascii	"x<?\000"
 4540 088c 00000000 		.space	4
 4541 0890 1F       		.byte	31
 4542 0891 000000   		.space	3
 4543 0894 02000000 		.word	2
 4544 0898 34       		.byte	52
 4545 0899 000000   		.space	3
 4546 089c 00510000 		.word	20736
 4547 08a0 780B3F00 		.ascii	"x\013?\000"
 4548 08a4 00000000 		.space	4
 4549 08a8 783C3D3F 		.ascii	"x<=?\000"
 4549      00
 4550 08ad 000000   		.space	3
 4551 08b0 2C       		.byte	44
 4552 08b1 000000   		.space	3
 4553 08b4 FFFFFFFF 		.word	-1
 4554 08b8 34       		.byte	52
 4555 08b9 000000   		.space	3
 4556 08bc 00520000 		.word	20992
 4557 08c0 2D2D0D00 		.ascii	"--\015\000"
 4558 08c4 00000000 		.space	4
 4559 08c8 783E3F00 		.ascii	"x>?\000"
 4560 08cc 00000000 		.space	4
 4561 08d0 2D       		.byte	45
 4562 08d1 000000   		.space	3
 4563 08d4 FFFFFFFF 		.word	-1
 4564 08d8 34       		.byte	52
 4565 08d9 000000   		.space	3
 4566 08dc 00530000 		.word	21248
 4567 08e0 43505800 		.ascii	"CPX\000"
 4568 08e4 00000000 		.space	4
 4569 08e8 783E3D3F 		.ascii	"x>=?\000"
 4569      00
 4570 08ed 000000   		.space	3
 4571 08f0 50726F62 		.ascii	"Probability\000"
 4571      6162696C 
 4571      69747900 
 4572 08fc 000000   		.space	3
 4573 08ff 00       		.space	1
 4574 0900 18       		.byte	24
 4575 0901 000000   		.space	3
 4576 0904 03000000 		.word	3
 4577 0908 34       		.byte	52
 4578 0909 000000   		.space	3
 4579 090c 31020000 		.word	561
 4580 0910 46616374 		.ascii	"Fact!\000"
 4580      2100
 4581 0916 0000     		.space	2
 4582 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 4582      00
 4583 091d 000000   		.space	3
 4584 0920 18       		.byte	24
 4585 0921 000000   		.space	3
 4586 0924 01000000 		.word	1
 4587 0928 19       		.byte	25
ARM GAS  /tmp/cckAiVOj.s 			page 117


 4588 0929 000000   		.space	3
 4589 092c 01000000 		.word	1
 4590 0930 43792C78 		.ascii	"Cy,x\000"
 4590      00
 4591 0935 000000   		.space	3
 4592 0938 9400     		.ascii	"\224\000"
 4593 093a 00000000 		.space	6
 4593      0000
 4594 0940 18       		.byte	24
 4595 0941 000000   		.space	3
 4596 0944 02000000 		.word	2
 4597 0948 19       		.byte	25
 4598 0949 000000   		.space	3
 4599 094c 02000000 		.word	2
 4600 0950 50792C78 		.ascii	"Py,x\000"
 4600      00
 4601 0955 000000   		.space	3
 4602 0958 949D00   		.ascii	"\224\235\000"
 4603 095b 00000000 		.space	5
 4603      00
 4604 0960 08       		.byte	8
 4605 0961 000000   		.space	3
 4606 0964 01000000 		.word	1
 4607 0968 34       		.byte	52
 4608 0969 000000   		.space	3
 4609 096c 34010000 		.word	308
 4610 0970 52414E23 		.ascii	"RAN#\000"
 4610      00
 4611 0975 000000   		.space	3
 4612 0978 53454544 		.ascii	"SEED\000"
 4612      00
 4613 097d 000000   		.space	3
 4614 0980 2C       		.byte	44
 4615 0981 000000   		.space	3
 4616 0984 FFFFFFFF 		.word	-1
 4617 0988 2E       		.byte	46
 4618 0989 000000   		.space	3
 4619 098c FFFFFFFF 		.word	-1
 4620 0990 2D2D0D00 		.ascii	"--\015\000"
 4621 0994 00000000 		.space	4
 4622 0998 00       		.ascii	"\000"
 4623 0999 00000000 		.space	7
 4623      000000
 4624 09a0 2D       		.byte	45
 4625 09a1 000000   		.space	3
 4626 09a4 FFFFFFFF 		.word	-1
 4627 09a8 2E       		.byte	46
 4628 09a9 000000   		.space	3
 4629 09ac FFFFFFFF 		.word	-1
 4630 09b0 43505800 		.ascii	"CPX\000"
 4631 09b4 00000000 		.space	4
 4632 09b8 00       		.ascii	"\000"
 4633 09b9 00000000 		.space	7
 4633      000000
 4634 09c0 53746174 		.ascii	"Statistics\000"
 4634      69737469 
 4634      637300
ARM GAS  /tmp/cckAiVOj.s 			page 118


 4635 09cb 00000000 		.space	4
 4636 09cf 00       		.space	1
 4637 09d0 1A       		.byte	26
 4638 09d1 000000   		.space	3
 4639 09d4 01000000 		.word	1
 4640 09d8 1A       		.byte	26
 4641 09d9 000000   		.space	3
 4642 09dc 02000000 		.word	2
 4643 09e0 0100     		.ascii	"\001\000"
 4644 09e2 00000000 		.space	6
 4644      0000
 4645 09e8 532E442E 		.ascii	"S.D.\000"
 4645      00
 4646 09ed 000000   		.space	3
 4647 09f0 1B       		.byte	27
 4648 09f1 000000   		.space	3
 4649 09f4 01000000 		.word	1
 4650 09f8 34       		.byte	52
 4651 09f9 000000   		.space	3
 4652 09fc 74020000 		.word	628
 4653 0a00 792D6861 		.ascii	"y-hat\000"
 4653      7400
 4654 0a06 0000     		.space	2
 4655 0a08 782D6861 		.ascii	"x-hat\000"
 4655      7400
 4656 0a0e 0000     		.space	2
 4657 0a10 34       		.byte	52
 4658 0a11 000000   		.space	3
 4659 0a14 27010000 		.word	295
 4660 0a18 34       		.byte	52
 4661 0a19 000000   		.space	3
 4662 0a1c 28010000 		.word	296
 4663 0a20 434F5252 		.ascii	"CORR\000"
 4663      00
 4664 0a25 000000   		.space	3
 4665 0a28 4C2E522E 		.ascii	"L.R.\000"
 4665      00
 4666 0a2d 000000   		.space	3
 4667 0a30 34       		.byte	52
 4668 0a31 000000   		.space	3
 4669 0a34 32010000 		.word	306
 4670 0a38 34       		.byte	52
 4671 0a39 000000   		.space	3
 4672 0a3c 31010000 		.word	305
 4673 0a40 42657374 		.ascii	"BestF\000"
 4673      4600
 4674 0a46 0000     		.space	2
 4675 0a48 4C6F6746 		.ascii	"LogFit\000"
 4675      697400
 4676 0a4f 00       		.space	1
 4677 0a50 34       		.byte	52
 4678 0a51 000000   		.space	3
 4679 0a54 2E010000 		.word	302
 4680 0a58 34       		.byte	52
 4681 0a59 000000   		.space	3
 4682 0a5c 2F010000 		.word	303
 4683 0a60 4C696E65 		.ascii	"Linear\000"
ARM GAS  /tmp/cckAiVOj.s 			page 119


 4683      617200
 4684 0a67 00       		.space	1
 4685 0a68 45787046 		.ascii	"ExpFit\000"
 4685      697400
 4686 0a6f 00       		.space	1
 4687 0a70 2D       		.byte	45
 4688 0a71 000000   		.space	3
 4689 0a74 FFFFFFFF 		.word	-1
 4690 0a78 34       		.byte	52
 4691 0a79 000000   		.space	3
 4692 0a7c 30010000 		.word	304
 4693 0a80 43505800 		.ascii	"CPX\000"
 4694 0a84 00000000 		.space	4
 4695 0a88 50777246 		.ascii	"PwrFit\000"
 4695      697400
 4696 0a8f 00       		.space	1
 4697 0a90 53657475 		.ascii	"Setup 2\000"
 4697      70203200 
 4698 0a98 00000000 		.space	7
 4698      000000
 4699 0a9f 00       		.space	1
 4700 0aa0 31       		.byte	49
 4701 0aa1 000000   		.space	3
 4702 0aa4 04000000 		.word	4
 4703 0aa8 2E       		.byte	46
 4704 0aa9 000000   		.space	3
 4705 0aac FFFFFFFF 		.word	-1
 4706 0ab0 53764C49 		.ascii	"SvLIB\000"
 4706      4200
 4707 0ab6 0000     		.space	2
 4708 0ab8 00       		.ascii	"\000"
 4709 0ab9 00000000 		.space	7
 4709      000000
 4710 0ac0 31       		.byte	49
 4711 0ac1 000000   		.space	3
 4712 0ac4 05000000 		.word	5
 4713 0ac8 2E       		.byte	46
 4714 0ac9 000000   		.space	3
 4715 0acc FFFFFFFF 		.word	-1
 4716 0ad0 4C644C49 		.ascii	"LdLIB\000"
 4716      4200
 4717 0ad6 0000     		.space	2
 4718 0ad8 00       		.ascii	"\000"
 4719 0ad9 00000000 		.space	7
 4719      000000
 4720 0ae0 31       		.byte	49
 4721 0ae1 000000   		.space	3
 4722 0ae4 0A000000 		.word	10
 4723 0ae8 2E       		.byte	46
 4724 0ae9 000000   		.space	3
 4725 0aec FFFFFFFF 		.word	-1
 4726 0af0 53764350 		.ascii	"SvCPRG\000"
 4726      524700
 4727 0af7 00       		.space	1
 4728 0af8 00       		.ascii	"\000"
 4729 0af9 00000000 		.space	7
 4729      000000
ARM GAS  /tmp/cckAiVOj.s 			page 120


 4730 0b00 31       		.byte	49
 4731 0b01 000000   		.space	3
 4732 0b04 08000000 		.word	8
 4733 0b08 2E       		.byte	46
 4734 0b09 000000   		.space	3
 4735 0b0c FFFFFFFF 		.word	-1
 4736 0b10 4C645052 		.ascii	"LdPRG\000"
 4736      4700
 4737 0b16 0000     		.space	2
 4738 0b18 00       		.ascii	"\000"
 4739 0b19 00000000 		.space	7
 4739      000000
 4740 0b20 2C       		.byte	44
 4741 0b21 000000   		.space	3
 4742 0b24 FFFFFFFF 		.word	-1
 4743 0b28 2E       		.byte	46
 4744 0b29 000000   		.space	3
 4745 0b2c FFFFFFFF 		.word	-1
 4746 0b30 2D2D0D00 		.ascii	"--\015\000"
 4747 0b34 00000000 		.space	4
 4748 0b38 00       		.ascii	"\000"
 4749 0b39 00000000 		.space	7
 4749      000000
 4750 0b40 2D       		.byte	45
 4751 0b41 000000   		.space	3
 4752 0b44 FFFFFFFF 		.word	-1
 4753 0b48 2E       		.byte	46
 4754 0b49 000000   		.space	3
 4755 0b4c FFFFFFFF 		.word	-1
 4756 0b50 43505800 		.ascii	"CPX\000"
 4757 0b54 00000000 		.space	4
 4758 0b58 00       		.ascii	"\000"
 4759 0b59 00000000 		.space	7
 4759      000000
 4760 0b60 496E7465 		.ascii	"Integ/Sum/Prod\000"
 4760      672F5375 
 4760      6D2F5072 
 4760      6F6400
 4761 0b6f 00       		.space	1
 4762 0b70 20       		.byte	32
 4763 0b71 000000   		.space	3
 4764 0b74 01000000 		.word	1
 4765 0b78 2E       		.byte	46
 4766 0b79 000000   		.space	3
 4767 0b7c FFFFFFFF 		.word	-1
 4768 0b80 534C5600 		.ascii	"SLV\000"
 4769 0b84 00000000 		.space	4
 4770 0b88 00       		.ascii	"\000"
 4771 0b89 00000000 		.space	7
 4771      000000
 4772 0b90 20       		.byte	32
 4773 0b91 000000   		.space	3
 4774 0b94 02000000 		.word	2
 4775 0b98 2E       		.byte	46
 4776 0b99 000000   		.space	3
 4777 0b9c FFFFFFFF 		.word	-1
 4778 0ba0 04206478 		.ascii	"\004 dx\000"
ARM GAS  /tmp/cckAiVOj.s 			page 121


 4778      00
 4779 0ba5 000000   		.space	3
 4780 0ba8 00       		.ascii	"\000"
 4781 0ba9 00000000 		.space	7
 4781      000000
 4782 0bb0 21       		.byte	33
 4783 0bb1 000000   		.space	3
 4784 0bb4 01000000 		.word	1
 4785 0bb8 2E       		.byte	46
 4786 0bb9 000000   		.space	3
 4787 0bbc FFFFFFFF 		.word	-1
 4788 0bc0 53554D00 		.ascii	"SUM\000"
 4789 0bc4 00000000 		.space	4
 4790 0bc8 00       		.ascii	"\000"
 4791 0bc9 00000000 		.space	7
 4791      000000
 4792 0bd0 21       		.byte	33
 4793 0bd1 000000   		.space	3
 4794 0bd4 02000000 		.word	2
 4795 0bd8 2E       		.byte	46
 4796 0bd9 000000   		.space	3
 4797 0bdc FFFFFFFF 		.word	-1
 4798 0be0 50524F44 		.ascii	"PROD\000"
 4798      00
 4799 0be5 000000   		.space	3
 4800 0be8 00       		.ascii	"\000"
 4801 0be9 00000000 		.space	7
 4801      000000
 4802 0bf0 2C       		.byte	44
 4803 0bf1 000000   		.space	3
 4804 0bf4 FFFFFFFF 		.word	-1
 4805 0bf8 2E       		.byte	46
 4806 0bf9 000000   		.space	3
 4807 0bfc FFFFFFFF 		.word	-1
 4808 0c00 2D2D0D00 		.ascii	"--\015\000"
 4809 0c04 00000000 		.space	4
 4810 0c08 00       		.ascii	"\000"
 4811 0c09 00000000 		.space	7
 4811      000000
 4812 0c10 2D       		.byte	45
 4813 0c11 000000   		.space	3
 4814 0c14 FFFFFFFF 		.word	-1
 4815 0c18 2E       		.byte	46
 4816 0c19 000000   		.space	3
 4817 0c1c FFFFFFFF 		.word	-1
 4818 0c20 43505800 		.ascii	"CPX\000"
 4819 0c24 00000000 		.space	4
 4820 0c28 00       		.ascii	"\000"
 4821 0c29 00000000 		.space	7
 4821      000000
 4822 0c30 426C616E 		.ascii	"Blank with A-D\000"
 4822      6B207769 
 4822      74682041 
 4822      2D4400
 4823 0c3f 00       		.space	1
 4824 0c40 28       		.byte	40
 4825 0c41 000000   		.space	3
ARM GAS  /tmp/cckAiVOj.s 			page 122


 4826 0c44 03000000 		.word	3
 4827 0c48 2E       		.byte	46
 4828 0c49 000000   		.space	3
 4829 0c4c FFFFFFFF 		.word	-1
 4830 0c50 912B00   		.ascii	"\221+\000"
 4831 0c53 00000000 		.space	5
 4831      00
 4832 0c58 00       		.ascii	"\000"
 4833 0c59 00000000 		.space	7
 4833      000000
 4834 0c60 16       		.byte	22
 4835 0c61 000000   		.space	3
 4836 0c64 01000000 		.word	1
 4837 0c68 2E       		.byte	46
 4838 0c69 000000   		.space	3
 4839 0c6c FFFFFFFF 		.word	-1
 4840 0c70 312F5800 		.ascii	"1/X\000"
 4841 0c74 00000000 		.space	4
 4842 0c78 00       		.ascii	"\000"
 4843 0c79 00000000 		.space	7
 4843      000000
 4844 0c80 1C       		.byte	28
 4845 0c81 000000   		.space	3
 4846 0c84 01000000 		.word	1
 4847 0c88 2E       		.byte	46
 4848 0c89 000000   		.space	3
 4849 0c8c FFFFFFFF 		.word	-1
 4850 0c90 035800   		.ascii	"\003X\000"
 4851 0c93 00000000 		.space	5
 4851      00
 4852 0c98 00       		.ascii	"\000"
 4853 0c99 00000000 		.space	7
 4853      000000
 4854 0ca0 13       		.byte	19
 4855 0ca1 000000   		.space	3
 4856 0ca4 02000000 		.word	2
 4857 0ca8 2E       		.byte	46
 4858 0ca9 000000   		.space	3
 4859 0cac FFFFFFFF 		.word	-1
 4860 0cb0 4C4F4700 		.ascii	"LOG\000"
 4861 0cb4 00000000 		.space	4
 4862 0cb8 00       		.ascii	"\000"
 4863 0cb9 00000000 		.space	7
 4863      000000
 4864 0cc0 2C       		.byte	44
 4865 0cc1 000000   		.space	3
 4866 0cc4 FFFFFFFF 		.word	-1
 4867 0cc8 2E       		.byte	46
 4868 0cc9 000000   		.space	3
 4869 0ccc FFFFFFFF 		.word	-1
 4870 0cd0 2D2D0D00 		.ascii	"--\015\000"
 4871 0cd4 00000000 		.space	4
 4872 0cd8 00       		.ascii	"\000"
 4873 0cd9 00000000 		.space	7
 4873      000000
 4874 0ce0 2D       		.byte	45
 4875 0ce1 000000   		.space	3
ARM GAS  /tmp/cckAiVOj.s 			page 123


 4876 0ce4 FFFFFFFF 		.word	-1
 4877 0ce8 2E       		.byte	46
 4878 0ce9 000000   		.space	3
 4879 0cec FFFFFFFF 		.word	-1
 4880 0cf0 43505800 		.ascii	"CPX\000"
 4881 0cf4 00000000 		.space	4
 4882 0cf8 00       		.ascii	"\000"
 4883 0cf9 00000000 		.space	7
 4883      000000
 4884              		.section	.rodata.mapping_alpha.10909,"a"
 4885              		.align	2
 4886              		.set	.LANCHOR14,. + 0
 4889              	mapping_alpha.10909:
 4890 0000 63       		.byte	99
 4891 0001 000000   		.space	3
 4892 0004 FFFFFFFF 		.word	-1
 4893 0008 00       		.byte	0
 4894 0009 000000   		.space	3
 4895 000c FFFFFFFF 		.word	-1
 4896 0010 01       		.byte	1
 4897 0011 000000   		.space	3
 4898 0014 FFFFFFFF 		.word	-1
 4899 0018 02       		.byte	2
 4900 0019 000000   		.space	3
 4901 001c FFFFFFFF 		.word	-1
 4902 0020 03       		.byte	3
 4903 0021 000000   		.space	3
 4904 0024 FFFFFFFF 		.word	-1
 4905 0028 04       		.byte	4
 4906 0029 000000   		.space	3
 4907 002c FFFFFFFF 		.word	-1
 4908 0030 05       		.byte	5
 4909 0031 000000   		.space	3
 4910 0034 FFFFFFFF 		.word	-1
 4911 0038 06       		.byte	6
 4912 0039 000000   		.space	3
 4913 003c FFFFFFFF 		.word	-1
 4914 0040 07       		.byte	7
 4915 0041 000000   		.space	3
 4916 0044 FFFFFFFF 		.word	-1
 4917 0048 08       		.byte	8
 4918 0049 000000   		.space	3
 4919 004c FFFFFFFF 		.word	-1
 4920 0050 09       		.byte	9
 4921 0051 000000   		.space	3
 4922 0054 FFFFFFFF 		.word	-1
 4923 0058 0A       		.byte	10
 4924 0059 000000   		.space	3
 4925 005c FFFFFFFF 		.word	-1
 4926 0060 0B       		.byte	11
 4927 0061 000000   		.space	3
 4928 0064 FFFFFFFF 		.word	-1
 4929 0068 0C       		.byte	12
 4930 0069 000000   		.space	3
 4931 006c FFFFFFFF 		.word	-1
 4932 0070 0D       		.byte	13
 4933 0071 000000   		.space	3
ARM GAS  /tmp/cckAiVOj.s 			page 124


 4934 0074 FFFFFFFF 		.word	-1
 4935 0078 0E       		.byte	14
 4936 0079 000000   		.space	3
 4937 007c FFFFFFFF 		.word	-1
 4938 0080 0F       		.byte	15
 4939 0081 000000   		.space	3
 4940 0084 FFFFFFFF 		.word	-1
 4941 0088 10       		.byte	16
 4942 0089 000000   		.space	3
 4943 008c FFFFFFFF 		.word	-1
 4944 0090 12       		.byte	18
 4945 0091 000000   		.space	3
 4946 0094 FFFFFFFF 		.word	-1
 4947 0098 13       		.byte	19
 4948 0099 000000   		.space	3
 4949 009c FFFFFFFF 		.word	-1
 4950 00a0 14       		.byte	20
 4951 00a1 000000   		.space	3
 4952 00a4 FFFFFFFF 		.word	-1
 4953 00a8 15       		.byte	21
 4954 00a9 000000   		.space	3
 4955 00ac FFFFFFFF 		.word	-1
 4956 00b0 16       		.byte	22
 4957 00b1 000000   		.space	3
 4958 00b4 FFFFFFFF 		.word	-1
 4959 00b8 18       		.byte	24
 4960 00b9 000000   		.space	3
 4961 00bc FFFFFFFF 		.word	-1
 4962 00c0 19       		.byte	25
 4963 00c1 000000   		.space	3
 4964 00c4 FFFFFFFF 		.word	-1
 4965 00c8 1A       		.byte	26
 4966 00c9 000000   		.space	3
 4967 00cc FFFFFFFF 		.word	-1
 4968 00d0 1B       		.byte	27
 4969 00d1 000000   		.space	3
 4970 00d4 FFFFFFFF 		.word	-1
 4971 00d8 1C       		.byte	28
 4972 00d9 000000   		.space	3
 4973 00dc FFFFFFFF 		.word	-1
 4974 00e0 1E       		.byte	30
 4975 00e1 000000   		.space	3
 4976 00e4 FFFFFFFF 		.word	-1
 4977 00e8 1F       		.byte	31
 4978 00e9 000000   		.space	3
 4979 00ec FFFFFFFF 		.word	-1
 4980 00f0 20       		.byte	32
 4981 00f1 000000   		.space	3
 4982 00f4 FFFFFFFF 		.word	-1
 4983 00f8 21       		.byte	33
 4984 00f9 000000   		.space	3
 4985 00fc FFFFFFFF 		.word	-1
 4986 0100 22       		.byte	34
 4987 0101 000000   		.space	3
 4988 0104 FFFFFFFF 		.word	-1
 4989 0108 24       		.byte	36
 4990 0109 000000   		.space	3
ARM GAS  /tmp/cckAiVOj.s 			page 125


 4991 010c FFFFFFFF 		.word	-1
 4992 0110 25       		.byte	37
 4993 0111 000000   		.space	3
 4994 0114 FFFFFFFF 		.word	-1
 4995 0118 26       		.byte	38
 4996 0119 000000   		.space	3
 4997 011c FFFFFFFF 		.word	-1
 4998 0120 27       		.byte	39
 4999 0121 000000   		.space	3
 5000 0124 FFFFFFFF 		.word	-1
 5001 0128 28       		.byte	40
 5002 0129 000000   		.space	3
 5003 012c FFFFFFFF 		.word	-1
 5004 0130 2E       		.byte	46
 5005 0131 000000   		.space	3
 5006 0134 FFFFFFFF 		.word	-1
 5007 0138 2E       		.byte	46
 5008 0139 000000   		.space	3
 5009 013c FFFFFFFF 		.word	-1
 5010 0140 2E       		.byte	46
 5011 0141 000000   		.space	3
 5012 0144 FFFFFFFF 		.word	-1
 5013 0148 2E       		.byte	46
 5014 0149 000000   		.space	3
 5015 014c FFFFFFFF 		.word	-1
 5016 0150 2C       		.byte	44
 5017 0151 000000   		.space	3
 5018 0154 FFFFFFFF 		.word	-1
 5019 0158 2E       		.byte	46
 5020 0159 000000   		.space	3
 5021 015c FFFFFFFF 		.word	-1
 5022 0160 2E       		.byte	46
 5023 0161 000000   		.space	3
 5024 0164 FFFFFFFF 		.word	-1
 5025 0168 2E       		.byte	46
 5026 0169 000000   		.space	3
 5027 016c FFFFFFFF 		.word	-1
 5028 0170 2E       		.byte	46
 5029 0171 000000   		.space	3
 5030 0174 FFFFFFFF 		.word	-1
 5031              		.section	.rodata.mapping_fshift.10907,"a"
 5032              		.align	2
 5033              		.set	.LANCHOR12,. + 0
 5036              	mapping_fshift.10907:
 5037 0000 63       		.byte	99
 5038 0001 000000   		.space	3
 5039 0004 FFFFFFFF 		.word	-1
 5040 0008 22       		.byte	34
 5041 0009 000000   		.space	3
 5042 000c 03000000 		.word	3
 5043 0010 15       		.byte	21
 5044 0011 000000   		.space	3
 5045 0014 01000000 		.word	1
 5046 0018 1C       		.byte	28
 5047 0019 000000   		.space	3
 5048 001c 02000000 		.word	2
 5049 0020 13       		.byte	19
ARM GAS  /tmp/cckAiVOj.s 			page 126


 5050 0021 000000   		.space	3
 5051 0024 01000000 		.word	1
 5052 0028 12       		.byte	18
 5053 0029 000000   		.space	3
 5054 002c 01000000 		.word	1
 5055 0030 12       		.byte	18
 5056 0031 000000   		.space	3
 5057 0034 03000000 		.word	3
 5058 0038 2D       		.byte	45
 5059 0039 000000   		.space	3
 5060 003c 00000000 		.word	0
 5061 0040 22       		.byte	34
 5062 0041 000000   		.space	3
 5063 0044 01000000 		.word	1
 5064 0048 0F       		.byte	15
 5065 0049 000000   		.space	3
 5066 004c 03000000 		.word	3
 5067 0050 01       		.byte	1
 5068 0051 000000   		.space	3
 5069 0054 02000000 		.word	2
 5070 0058 02       		.byte	2
 5071 0059 000000   		.space	3
 5072 005c 02000000 		.word	2
 5073 0060 03       		.byte	3
 5074 0061 000000   		.space	3
 5075 0064 02000000 		.word	2
 5076 0068 0C       		.byte	12
 5077 0069 000000   		.space	3
 5078 006c 01000000 		.word	1
 5079 0070 31       		.byte	49
 5080 0071 000000   		.space	3
 5081 0074 01000000 		.word	1
 5082 0078 2F       		.byte	47
 5083 0079 000000   		.space	3
 5084 007c 04000000 		.word	4
 5085 0080 2F       		.byte	47
 5086 0081 000000   		.space	3
 5087 0084 02000000 		.word	2
 5088 0088 2F       		.byte	47
 5089 0089 000000   		.space	3
 5090 008c 01000000 		.word	1
 5091 0090 18       		.byte	24
 5092 0091 000000   		.space	3
 5093 0094 00000000 		.word	0
 5094 0098 20       		.byte	32
 5095 0099 000000   		.space	3
 5096 009c 01000000 		.word	1
 5097 00a0 2F       		.byte	47
 5098 00a1 000000   		.space	3
 5099 00a4 0E000000 		.word	14
 5100 00a8 1C       		.byte	28
 5101 00a9 000000   		.space	3
 5102 00ac 03000000 		.word	3
 5103 00b0 2F       		.byte	47
 5104 00b1 000000   		.space	3
 5105 00b4 0C000000 		.word	12
 5106 00b8 1E       		.byte	30
ARM GAS  /tmp/cckAiVOj.s 			page 127


 5107 00b9 000000   		.space	3
 5108 00bc 00000000 		.word	0
 5109 00c0 2F       		.byte	47
 5110 00c1 000000   		.space	3
 5111 00c4 03000000 		.word	3
 5112 00c8 04       		.byte	4
 5113 00c9 000000   		.space	3
 5114 00cc 03000000 		.word	3
 5115 00d0 2F       		.byte	47
 5116 00d1 000000   		.space	3
 5117 00d4 0A000000 		.word	10
 5118 00d8 2F       		.byte	47
 5119 00d9 000000   		.space	3
 5120 00dc 0B000000 		.word	11
 5121 00e0 2A       		.byte	42
 5122 00e1 000000   		.space	3
 5123 00e4 00000000 		.word	0
 5124 00e8 31       		.byte	49
 5125 00e9 000000   		.space	3
 5126 00ec 0D000000 		.word	13
 5127 00f0 2E       		.byte	46
 5128 00f1 000000   		.space	3
 5129 00f4 00000000 		.word	0
 5130 00f8 20       		.byte	32
 5131 00f9 000000   		.space	3
 5132 00fc 03000000 		.word	3
 5133 0100 2E       		.byte	46
 5134 0101 000000   		.space	3
 5135 0104 00000000 		.word	0
 5136 0108 24       		.byte	36
 5137 0109 000000   		.space	3
 5138 010c 03000000 		.word	3
 5139 0110 2F       		.byte	47
 5140 0111 000000   		.space	3
 5141 0114 08000000 		.word	8
 5142 0118 0D       		.byte	13
 5143 0119 000000   		.space	3
 5144 011c 01000000 		.word	1
 5145 0120 27       		.byte	39
 5146 0121 000000   		.space	3
 5147 0124 03000000 		.word	3
 5148 0128 06       		.byte	6
 5149 0129 000000   		.space	3
 5150 012c 03000000 		.word	3
 5151 0130 2E       		.byte	46
 5152 0131 000000   		.space	3
 5153 0134 00000000 		.word	0
 5154 0138 2E       		.byte	46
 5155 0139 000000   		.space	3
 5156 013c 00000000 		.word	0
 5157 0140 2E       		.byte	46
 5158 0141 000000   		.space	3
 5159 0144 00000000 		.word	0
 5160 0148 2E       		.byte	46
 5161 0149 000000   		.space	3
 5162 014c 00000000 		.word	0
 5163 0150 2E       		.byte	46
ARM GAS  /tmp/cckAiVOj.s 			page 128


 5164 0151 000000   		.space	3
 5165 0154 00000000 		.word	0
 5166 0158 2E       		.byte	46
 5167 0159 000000   		.space	3
 5168 015c 00000000 		.word	0
 5169 0160 2E       		.byte	46
 5170 0161 000000   		.space	3
 5171 0164 00000000 		.word	0
 5172 0168 2F       		.byte	47
 5173 0169 000000   		.space	3
 5174 016c FFFFFFFF 		.word	-1
 5175 0170 2F       		.byte	47
 5176 0171 000000   		.space	3
 5177 0174 05000000 		.word	5
 5178              		.section	.rodata.mapping_gshift.10908,"a"
 5179              		.align	2
 5180              		.set	.LANCHOR16,. + 0
 5183              	mapping_gshift.10908:
 5184 0000 63       		.byte	99
 5185 0001 000000   		.space	3
 5186 0004 FFFFFFFF 		.word	-1
 5187 0008 28       		.byte	40
 5188 0009 000000   		.space	3
 5189 000c 03000000 		.word	3
 5190 0010 16       		.byte	22
 5191 0011 000000   		.space	3
 5192 0014 01000000 		.word	1
 5193 0018 1C       		.byte	28
 5194 0019 000000   		.space	3
 5195 001c 01000000 		.word	1
 5196 0020 13       		.byte	19
 5197 0021 000000   		.space	3
 5198 0024 02000000 		.word	2
 5199 0028 2E       		.byte	46
 5200 0029 000000   		.space	3
 5201 002c 00000000 		.word	0
 5202 0030 2E       		.byte	46
 5203 0031 000000   		.space	3
 5204 0034 00000000 		.word	0
 5205 0038 2E       		.byte	46
 5206 0039 000000   		.space	3
 5207 003c 00000000 		.word	0
 5208 0040 07       		.byte	7
 5209 0041 000000   		.space	3
 5210 0044 03000000 		.word	3
 5211 0048 08       		.byte	8
 5212 0049 000000   		.space	3
 5213 004c 03000000 		.word	3
 5214 0050 2F       		.byte	47
 5215 0051 000000   		.space	3
 5216 0054 04000000 		.word	4
 5217 0058 2F       		.byte	47
 5218 0059 000000   		.space	3
 5219 005c 04000000 		.word	4
 5220 0060 2F       		.byte	47
 5221 0061 000000   		.space	3
 5222 0064 04000000 		.word	4
ARM GAS  /tmp/cckAiVOj.s 			page 129


 5223 0068 0C       		.byte	12
 5224 0069 000000   		.space	3
 5225 006c 02000000 		.word	2
 5226 0070 2F       		.byte	47
 5227 0071 000000   		.space	3
 5228 0074 06000000 		.word	6
 5229 0078 05       		.byte	5
 5230 0079 000000   		.space	3
 5231 007c 03000000 		.word	3
 5232 0080 2E       		.byte	46
 5233 0081 000000   		.space	3
 5234 0084 00000000 		.word	0
 5235 0088 2E       		.byte	46
 5236 0089 000000   		.space	3
 5237 008c 00000000 		.word	0
 5238 0090 2E       		.byte	46
 5239 0091 000000   		.space	3
 5240 0094 00000000 		.word	0
 5241 0098 2E       		.byte	46
 5242 0099 000000   		.space	3
 5243 009c 00000000 		.word	0
 5244 00a0 2E       		.byte	46
 5245 00a1 000000   		.space	3
 5246 00a4 00000000 		.word	0
 5247 00a8 1B       		.byte	27
 5248 00a9 000000   		.space	3
 5249 00ac 03000000 		.word	3
 5250 00b0 1A       		.byte	26
 5251 00b1 000000   		.space	3
 5252 00b4 03000000 		.word	3
 5253 00b8 2E       		.byte	46
 5254 00b9 000000   		.space	3
 5255 00bc 00000000 		.word	0
 5256 00c0 2E       		.byte	46
 5257 00c1 000000   		.space	3
 5258 00c4 00000000 		.word	0
 5259 00c8 0C       		.byte	12
 5260 00c9 000000   		.space	3
 5261 00cc 03000000 		.word	3
 5262 00d0 1F       		.byte	31
 5263 00d1 000000   		.space	3
 5264 00d4 03000000 		.word	3
 5265 00d8 19       		.byte	25
 5266 00d9 000000   		.space	3
 5267 00dc 03000000 		.word	3
 5268 00e0 2A       		.byte	42
 5269 00e1 000000   		.space	3
 5270 00e4 FFFFFFFF 		.word	-1
 5271 00e8 2E       		.byte	46
 5272 00e9 000000   		.space	3
 5273 00ec 00000000 		.word	0
 5274 00f0 2E       		.byte	46
 5275 00f1 000000   		.space	3
 5276 00f4 00000000 		.word	0
 5277 00f8 21       		.byte	33
 5278 00f9 000000   		.space	3
 5279 00fc 03000000 		.word	3
ARM GAS  /tmp/cckAiVOj.s 			page 130


 5280 0100 2E       		.byte	46
 5281 0101 000000   		.space	3
 5282 0104 00000000 		.word	0
 5283 0108 24       		.byte	36
 5284 0109 000000   		.space	3
 5285 010c 02000000 		.word	2
 5286 0110 2F       		.byte	47
 5287 0111 000000   		.space	3
 5288 0114 0D000000 		.word	13
 5289 0118 2E       		.byte	46
 5290 0119 000000   		.space	3
 5291 011c 00000000 		.word	0
 5292 0120 2F       		.byte	47
 5293 0121 000000   		.space	3
 5294 0124 07000000 		.word	7
 5295 0128 1E       		.byte	30
 5296 0129 000000   		.space	3
 5297 012c 03000000 		.word	3
 5298 0130 2E       		.byte	46
 5299 0131 000000   		.space	3
 5300 0134 00000000 		.word	0
 5301 0138 2E       		.byte	46
 5302 0139 000000   		.space	3
 5303 013c 00000000 		.word	0
 5304 0140 2E       		.byte	46
 5305 0141 000000   		.space	3
 5306 0144 00000000 		.word	0
 5307 0148 2E       		.byte	46
 5308 0149 000000   		.space	3
 5309 014c 00000000 		.word	0
 5310 0150 2E       		.byte	46
 5311 0151 000000   		.space	3
 5312 0154 00000000 		.word	0
 5313 0158 2E       		.byte	46
 5314 0159 000000   		.space	3
 5315 015c 00000000 		.word	0
 5316 0160 2E       		.byte	46
 5317 0161 000000   		.space	3
 5318 0164 00000000 		.word	0
 5319 0168 2E       		.byte	46
 5320 0169 000000   		.space	3
 5321 016c 00000000 		.word	0
 5322 0170 2E       		.byte	46
 5323 0171 000000   		.space	3
 5324 0174 00000000 		.word	0
 5325              		.section	.rodata.mapping_none.10906,"a"
 5326              		.align	2
 5327              		.set	.LANCHOR11,. + 0
 5330              	mapping_none.10906:
 5331 0000 63       		.byte	99
 5332 0001 000000   		.space	3
 5333 0004 FFFFFFFF 		.word	-1
 5334 0008 00       		.byte	0
 5335 0009 000000   		.space	3
 5336 000c 00000000 		.word	0
 5337 0010 01       		.byte	1
 5338 0011 000000   		.space	3
ARM GAS  /tmp/cckAiVOj.s 			page 131


 5339 0014 00000000 		.word	0
 5340 0018 03       		.byte	3
 5341 0019 000000   		.space	3
 5342 001c 00000000 		.word	0
 5343 0020 13       		.byte	19
 5344 0021 000000   		.space	3
 5345 0024 02000000 		.word	2
 5346 0028 12       		.byte	18
 5347 0029 000000   		.space	3
 5348 002c 02000000 		.word	2
 5349 0030 12       		.byte	18
 5350 0031 000000   		.space	3
 5351 0034 00000000 		.word	0
 5352 0038 06       		.byte	6
 5353 0039 000000   		.space	3
 5354 003c 00000000 		.word	0
 5355 0040 07       		.byte	7
 5356 0041 000000   		.space	3
 5357 0044 00000000 		.word	0
 5358 0048 08       		.byte	8
 5359 0049 000000   		.space	3
 5360 004c 00000000 		.word	0
 5361 0050 01       		.byte	1
 5362 0051 000000   		.space	3
 5363 0054 01000000 		.word	1
 5364 0058 02       		.byte	2
 5365 0059 000000   		.space	3
 5366 005c 01000000 		.word	1
 5367 0060 03       		.byte	3
 5368 0061 000000   		.space	3
 5369 0064 01000000 		.word	1
 5370 0068 0C       		.byte	12
 5371 0069 000000   		.space	3
 5372 006c 00000000 		.word	0
 5373 0070 0D       		.byte	13
 5374 0071 000000   		.space	3
 5375 0074 00000000 		.word	0
 5376 0078 0E       		.byte	14
 5377 0079 000000   		.space	3
 5378 007c 00000000 		.word	0
 5379 0080 0F       		.byte	15
 5380 0081 000000   		.space	3
 5381 0084 00000000 		.word	0
 5382 0088 10       		.byte	16
 5383 0089 000000   		.space	3
 5384 008c 00000000 		.word	0
 5385 0090 18       		.byte	24
 5386 0091 000000   		.space	3
 5387 0094 00000000 		.word	0
 5388 0098 13       		.byte	19
 5389 0099 000000   		.space	3
 5390 009c 00000000 		.word	0
 5391 00a0 14       		.byte	20
 5392 00a1 000000   		.space	3
 5393 00a4 00000000 		.word	0
 5394 00a8 15       		.byte	21
 5395 00a9 000000   		.space	3
ARM GAS  /tmp/cckAiVOj.s 			page 132


 5396 00ac 00000000 		.word	0
 5397 00b0 16       		.byte	22
 5398 00b1 000000   		.space	3
 5399 00b4 00000000 		.word	0
 5400 00b8 1E       		.byte	30
 5401 00b9 000000   		.space	3
 5402 00bc 00000000 		.word	0
 5403 00c0 19       		.byte	25
 5404 00c1 000000   		.space	3
 5405 00c4 00000000 		.word	0
 5406 00c8 1A       		.byte	26
 5407 00c9 000000   		.space	3
 5408 00cc 00000000 		.word	0
 5409 00d0 1B       		.byte	27
 5410 00d1 000000   		.space	3
 5411 00d4 00000000 		.word	0
 5412 00d8 1C       		.byte	28
 5413 00d9 000000   		.space	3
 5414 00dc 00000000 		.word	0
 5415 00e0 29       		.byte	41
 5416 00e1 000000   		.space	3
 5417 00e4 00000000 		.word	0
 5418 00e8 1F       		.byte	31
 5419 00e9 000000   		.space	3
 5420 00ec 00000000 		.word	0
 5421 00f0 20       		.byte	32
 5422 00f1 000000   		.space	3
 5423 00f4 00000000 		.word	0
 5424 00f8 21       		.byte	33
 5425 00f9 000000   		.space	3
 5426 00fc 00000000 		.word	0
 5427 0100 22       		.byte	34
 5428 0101 000000   		.space	3
 5429 0104 00000000 		.word	0
 5430 0108 24       		.byte	36
 5431 0109 000000   		.space	3
 5432 010c 00000000 		.word	0
 5433 0110 25       		.byte	37
 5434 0111 000000   		.space	3
 5435 0114 00000000 		.word	0
 5436 0118 26       		.byte	38
 5437 0119 000000   		.space	3
 5438 011c 00000000 		.word	0
 5439 0120 27       		.byte	39
 5440 0121 000000   		.space	3
 5441 0124 00000000 		.word	0
 5442 0128 28       		.byte	40
 5443 0129 000000   		.space	3
 5444 012c 00000000 		.word	0
 5445 0130 2E       		.byte	46
 5446 0131 000000   		.space	3
 5447 0134 00000000 		.word	0
 5448 0138 2E       		.byte	46
 5449 0139 000000   		.space	3
 5450 013c 00000000 		.word	0
 5451 0140 2E       		.byte	46
 5452 0141 000000   		.space	3
ARM GAS  /tmp/cckAiVOj.s 			page 133


 5453 0144 00000000 		.word	0
 5454 0148 2E       		.byte	46
 5455 0149 000000   		.space	3
 5456 014c 00000000 		.word	0
 5457 0150 2E       		.byte	46
 5458 0151 000000   		.space	3
 5459 0154 00000000 		.word	0
 5460 0158 2E       		.byte	46
 5461 0159 000000   		.space	3
 5462 015c 00000000 		.word	0
 5463 0160 2E       		.byte	46
 5464 0161 000000   		.space	3
 5465 0164 00000000 		.word	0
 5466 0168 2E       		.byte	46
 5467 0169 000000   		.space	3
 5468 016c 00000000 		.word	0
 5469 0170 2E       		.byte	46
 5470 0171 000000   		.space	3
 5471 0174 00000000 		.word	0
 5472              		.section	.rodata.mapping_running.10910,"a"
 5473              		.align	2
 5474              		.set	.LANCHOR15,. + 0
 5477              	mapping_running.10910:
 5478 0000 63       		.byte	99
 5479 0001 000000   		.space	3
 5480 0004 FFFFFFFF 		.word	-1
 5481 0008 00       		.byte	0
 5482 0009 000000   		.space	3
 5483 000c 00000000 		.word	0
 5484 0010 01       		.byte	1
 5485 0011 000000   		.space	3
 5486 0014 00000000 		.word	0
 5487 0018 02       		.byte	2
 5488 0019 000000   		.space	3
 5489 001c 00000000 		.word	0
 5490 0020 03       		.byte	3
 5491 0021 000000   		.space	3
 5492 0024 00000000 		.word	0
 5493 0028 04       		.byte	4
 5494 0029 000000   		.space	3
 5495 002c 00000000 		.word	0
 5496 0030 12       		.byte	18
 5497 0031 000000   		.space	3
 5498 0034 00000000 		.word	0
 5499 0038 06       		.byte	6
 5500 0039 000000   		.space	3
 5501 003c 00000000 		.word	0
 5502 0040 07       		.byte	7
 5503 0041 000000   		.space	3
 5504 0044 00000000 		.word	0
 5505 0048 08       		.byte	8
 5506 0049 000000   		.space	3
 5507 004c 00000000 		.word	0
 5508 0050 09       		.byte	9
 5509 0051 000000   		.space	3
 5510 0054 00000000 		.word	0
 5511 0058 0A       		.byte	10
ARM GAS  /tmp/cckAiVOj.s 			page 134


 5512 0059 000000   		.space	3
 5513 005c 00000000 		.word	0
 5514 0060 0B       		.byte	11
 5515 0061 000000   		.space	3
 5516 0064 00000000 		.word	0
 5517 0068 0C       		.byte	12
 5518 0069 000000   		.space	3
 5519 006c 00000000 		.word	0
 5520 0070 0D       		.byte	13
 5521 0071 000000   		.space	3
 5522 0074 00000000 		.word	0
 5523 0078 0E       		.byte	14
 5524 0079 000000   		.space	3
 5525 007c 00000000 		.word	0
 5526 0080 0F       		.byte	15
 5527 0081 000000   		.space	3
 5528 0084 00000000 		.word	0
 5529 0088 10       		.byte	16
 5530 0089 000000   		.space	3
 5531 008c 00000000 		.word	0
 5532 0090 18       		.byte	24
 5533 0091 000000   		.space	3
 5534 0094 00000000 		.word	0
 5535 0098 13       		.byte	19
 5536 0099 000000   		.space	3
 5537 009c 00000000 		.word	0
 5538 00a0 14       		.byte	20
 5539 00a1 000000   		.space	3
 5540 00a4 00000000 		.word	0
 5541 00a8 15       		.byte	21
 5542 00a9 000000   		.space	3
 5543 00ac 00000000 		.word	0
 5544 00b0 16       		.byte	22
 5545 00b1 000000   		.space	3
 5546 00b4 00000000 		.word	0
 5547 00b8 1E       		.byte	30
 5548 00b9 000000   		.space	3
 5549 00bc 00000000 		.word	0
 5550 00c0 19       		.byte	25
 5551 00c1 000000   		.space	3
 5552 00c4 00000000 		.word	0
 5553 00c8 1A       		.byte	26
 5554 00c9 000000   		.space	3
 5555 00cc 00000000 		.word	0
 5556 00d0 1B       		.byte	27
 5557 00d1 000000   		.space	3
 5558 00d4 00000000 		.word	0
 5559 00d8 1C       		.byte	28
 5560 00d9 000000   		.space	3
 5561 00dc 00000000 		.word	0
 5562 00e0 09       		.byte	9
 5563 00e1 000000   		.space	3
 5564 00e4 00000000 		.word	0
 5565 00e8 1F       		.byte	31
 5566 00e9 000000   		.space	3
 5567 00ec 00000000 		.word	0
 5568 00f0 20       		.byte	32
ARM GAS  /tmp/cckAiVOj.s 			page 135


 5569 00f1 000000   		.space	3
 5570 00f4 00000000 		.word	0
 5571 00f8 21       		.byte	33
 5572 00f9 000000   		.space	3
 5573 00fc 00000000 		.word	0
 5574 0100 22       		.byte	34
 5575 0101 000000   		.space	3
 5576 0104 00000000 		.word	0
 5577 0108 24       		.byte	36
 5578 0109 000000   		.space	3
 5579 010c 00000000 		.word	0
 5580 0110 25       		.byte	37
 5581 0111 000000   		.space	3
 5582 0114 00000000 		.word	0
 5583 0118 26       		.byte	38
 5584 0119 000000   		.space	3
 5585 011c 00000000 		.word	0
 5586 0120 27       		.byte	39
 5587 0121 000000   		.space	3
 5588 0124 00000000 		.word	0
 5589 0128 28       		.byte	40
 5590 0129 000000   		.space	3
 5591 012c 00000000 		.word	0
 5592 0130 2E       		.byte	46
 5593 0131 000000   		.space	3
 5594 0134 00000000 		.word	0
 5595 0138 2E       		.byte	46
 5596 0139 000000   		.space	3
 5597 013c 00000000 		.word	0
 5598 0140 2E       		.byte	46
 5599 0141 000000   		.space	3
 5600 0144 00000000 		.word	0
 5601 0148 2E       		.byte	46
 5602 0149 000000   		.space	3
 5603 014c 00000000 		.word	0
 5604 0150 04       		.byte	4
 5605 0151 000000   		.space	3
 5606 0154 00000000 		.word	0
 5607 0158 05       		.byte	5
 5608 0159 000000   		.space	3
 5609 015c 00000000 		.word	0
 5610 0160 2E       		.byte	46
 5611 0161 000000   		.space	3
 5612 0164 00000000 		.word	0
 5613 0168 2E       		.byte	46
 5614 0169 000000   		.space	3
 5615 016c 00000000 		.word	0
 5616 0170 2E       		.byte	46
 5617 0171 000000   		.space	3
 5618 0174 00000000 		.word	0
 5619              		.section	.rodata.mid_menu,"a"
 5620              		.align	2
 5623              	mid_menu:
 5624 0000 C8C40B00 		.ascii	"\310\304\013\000"
 5625              		.text
 5626              	.Letext0:
 5627              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
ARM GAS  /tmp/cckAiVOj.s 			page 136


 5628              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 5629              		.file 6 "/usr/include/newlib/sys/_types.h"
 5630              		.file 7 "/usr/include/newlib/sys/reent.h"
 5631              		.file 8 "/usr/include/newlib/sys/lock.h"
 5632              		.file 9 "/usr/include/newlib/stdlib.h"
 5633              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 5634              		.file 11 "/usr/include/newlib/ctype.h"
 5635              		.file 12 "dmcp/ff_ifc.h"
 5636              		.file 13 "dmcp/dmcp.h"
 5637              		.file 14 "src/keys.h"
 5638              		.file 15 "src/decNumber/decContext.h"
 5639              		.file 16 "src/decNumber/decNumber.h"
 5640              		.file 17 "src/decNumber/decimal64.h"
 5641              		.file 18 "src/decNumber/decimal128.h"
 5642              		.file 19 "src/xeq.h"
 5643              		.file 20 "src/data.h"
 5644              		.file 21 "src/display.h"
 5645              		.file 22 "src/consts.h"
 5646              		.file 23 "src/storage.h"
 5647              		.file 24 "src/catalogues.h"
 5648              		.file 25 "src/menu.h"
 5649              		.file 26 "src/lcd.h"
 5650              		.file 27 "/usr/include/newlib/string.h"
 5651              		.file 28 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/cckAiVOj.s 			page 137


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/cckAiVOj.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/cckAiVOj.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/cckAiVOj.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/cckAiVOj.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/cckAiVOj.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/cckAiVOj.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/cckAiVOj.s:433    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/cckAiVOj.s:441    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/cckAiVOj.s:463    .text.disp_about:0000000000000000 $t
     /tmp/cckAiVOj.s:471    .text.disp_about:0000000000000000 disp_about
     /tmp/cckAiVOj.s:629    .text.disp_about:0000000000000084 $d
     /tmp/cckAiVOj.s:648    .text.run_menu_item:0000000000000000 $t
     /tmp/cckAiVOj.s:656    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/cckAiVOj.s:696    .text.set_menu:0000000000000000 $t
     /tmp/cckAiVOj.s:704    .text.set_menu:0000000000000000 set_menu
     /tmp/cckAiVOj.s:755    .text.set_menu:0000000000000028 $d
     /tmp/cckAiVOj.s:762    .text.toggle_default_menu:0000000000000000 $t
     /tmp/cckAiVOj.s:770    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/cckAiVOj.s:799    .text.toggle_default_menu:0000000000000018 $d
     /tmp/cckAiVOj.s:805    .text.get_menu:0000000000000000 $t
     /tmp/cckAiVOj.s:813    .text.get_menu:0000000000000000 get_menu
     /tmp/cckAiVOj.s:829    .text.get_menu:0000000000000008 $d
     /tmp/cckAiVOj.s:834    .text.set_last_menu:0000000000000000 $t
     /tmp/cckAiVOj.s:842    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/cckAiVOj.s:897    .text.set_last_menu:000000000000001c $d
     /tmp/cckAiVOj.s:904    .text.mdot:0000000000000000 $t
     /tmp/cckAiVOj.s:912    .text.mdot:0000000000000000 mdot
     /tmp/cckAiVOj.s:1003   .text.mdot:000000000000003c $d
     /tmp/cckAiVOj.s:1008   .text.display_menu:0000000000000000 $t
     /tmp/cckAiVOj.s:1016   .text.display_menu:0000000000000000 display_menu
     /tmp/cckAiVOj.s:1255   .text.display_menu:000000000000010c $d
     /tmp/cckAiVOj.s:1263   .text.display_current_menu:0000000000000000 $t
     /tmp/cckAiVOj.s:1271   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/cckAiVOj.s:1286   .text.display_current_menu:0000000000000008 $d
     /tmp/cckAiVOj.s:1291   .text.all_menu_dots:0000000000000000 $t
     /tmp/cckAiVOj.s:1299   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/cckAiVOj.s:1383   .text.all_menu_dots:0000000000000038 $d
     /tmp/cckAiVOj.s:1388   .text.shutdown:0000000000000000 $t
     /tmp/cckAiVOj.s:1396   .text.shutdown:0000000000000000 shutdown
     /tmp/cckAiVOj.s:1414   .text.shutdown:000000000000000c $d
     /tmp/cckAiVOj.s:1419   .text.is_key_pressed:0000000000000000 $t
     /tmp/cckAiVOj.s:1427   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/cckAiVOj.s:1450   .text.is_key_pressed:0000000000000010 $d
     /tmp/cckAiVOj.s:1455   .text.get_key:0000000000000000 $t
     /tmp/cckAiVOj.s:1463   .text.get_key:0000000000000000 get_key
     /tmp/cckAiVOj.s:1478   .text.get_key:0000000000000004 $d
     /tmp/cckAiVOj.s:1483   .text.put_key:0000000000000000 $t
     /tmp/cckAiVOj.s:1491   .text.put_key:0000000000000000 put_key
     /tmp/cckAiVOj.s:1570   .text.put_key:000000000000003c $d
     /tmp/cckAiVOj.s:1576   .text.shift_down:0000000000000000 $t
     /tmp/cckAiVOj.s:1584   .text.shift_down:0000000000000000 shift_down
     /tmp/cckAiVOj.s:1599   .text.start_key_timer:0000000000000000 $t
     /tmp/cckAiVOj.s:1607   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/cckAiVOj.s:1631   .text.start_key_timer:000000000000000c $d
     /tmp/cckAiVOj.s:1637   .text.keyticks:0000000000000000 $t
ARM GAS  /tmp/cckAiVOj.s 			page 138


     /tmp/cckAiVOj.s:1645   .text.keyticks:0000000000000000 keyticks
     /tmp/cckAiVOj.s:1676   .text.keyticks:0000000000000018 $d
     /tmp/cckAiVOj.s:1682   .text.moveto:0000000000000000 $t
     /tmp/cckAiVOj.s:1690   .text.moveto:0000000000000000 moveto
     /tmp/cckAiVOj.s:1750   .text.moveto:000000000000002c $d
     /tmp/cckAiVOj.s:1757   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/cckAiVOj.s:1761   .text.print_debug:0000000000000000 $t
     /tmp/cckAiVOj.s:1769   .text.print_debug:0000000000000000 print_debug
     /tmp/cckAiVOj.s:1871   .text.print_debug:0000000000000060 $d
                            *COM*:0000000000000016 print_string
     /tmp/cckAiVOj.s:1882   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/cckAiVOj.s:1886   .text.print_debug2:0000000000000000 $t
     /tmp/cckAiVOj.s:1894   .text.print_debug2:0000000000000000 print_debug2
     /tmp/cckAiVOj.s:1996   .text.print_debug2:0000000000000064 $d
     /tmp/cckAiVOj.s:2007   .text.do_now:0000000000000000 $t
     /tmp/cckAiVOj.s:2015   .text.do_now:0000000000000000 do_now
     /tmp/cckAiVOj.s:2050   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/cckAiVOj.s:2054   .text.do_multi:0000000000000000 $t
     /tmp/cckAiVOj.s:2062   .text.do_multi:0000000000000000 do_multi
     /tmp/cckAiVOj.s:2093   .text.do_multi:000000000000001a $d
     /tmp/cckAiVOj.s:2491   .text.do_multi:00000000000001a0 $d
     /tmp/cckAiVOj.s:2501   .text.program_main:0000000000000000 $t
     /tmp/cckAiVOj.s:2509   .text.program_main:0000000000000000 program_main
     /tmp/cckAiVOj.s:3213   .text.program_main:00000000000002ac $d
     /tmp/cckAiVOj.s:3219   .text.program_main:00000000000002b2 $t
     /tmp/cckAiVOj.s:3250   .text.program_main:00000000000002c4 $d
     /tmp/cckAiVOj.s:3294   .text.program_main:0000000000000358 $t
     /tmp/cckAiVOj.s:3722   .text.program_main:0000000000000584 $d
     /tmp/cckAiVOj.s:3792   .bss.n_p:0000000000000000 n_p
     /tmp/cckAiVOj.s:3860   .data.spaces:0000000000000000 spaces
     /tmp/cckAiVOj.s:3851   .data.release:0000000000000000 release
     /tmp/cckAiVOj.s:3824   .data.h_shift:0000000000000000 h_shift
     /tmp/cckAiVOj.s:3815   .data.g_shift:0000000000000000 g_shift
     /tmp/cckAiVOj.s:3806   .data.f_shift:0000000000000000 f_shift
     /tmp/cckAiVOj.s:3833   .data.heartbeat:0000000000000000 heartbeat
     /tmp/cckAiVOj.s:3842   .data.no_key:0000000000000000 no_key
     /tmp/cckAiVOj.s:3867   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/cckAiVOj.s:3749   .rodata.str1.4:0000000000000000 $d
     /tmp/cckAiVOj.s:5623   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/cckAiVOj.s:3754   .rodata:0000000000000000 $d
     /tmp/cckAiVOj.s:3761   .bss.current_menu:0000000000000000 $d
     /tmp/cckAiVOj.s:3765   .bss.current_menu:0000000000000000 current_menu
     /tmp/cckAiVOj.s:3768   .bss.default_menu:0000000000000000 $d
     /tmp/cckAiVOj.s:3772   .bss.default_menu:0000000000000000 default_menu
     /tmp/cckAiVOj.s:3775   .bss.last_menu:0000000000000000 $d
     /tmp/cckAiVOj.s:3779   .bss.last_menu:0000000000000000 last_menu
     /tmp/cckAiVOj.s:3782   .bss.mdots:0000000000000000 $d
     /tmp/cckAiVOj.s:3786   .bss.mdots:0000000000000000 mdots
     /tmp/cckAiVOj.s:3789   .bss.n_p:0000000000000000 $d
     /tmp/cckAiVOj.s:3795   .bss.start_ticks:0000000000000000 $d
     /tmp/cckAiVOj.s:3799   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/cckAiVOj.s:3802   .data.f_shift:0000000000000000 $d
     /tmp/cckAiVOj.s:3811   .data.g_shift:0000000000000000 $d
     /tmp/cckAiVOj.s:3820   .data.h_shift:0000000000000000 $d
     /tmp/cckAiVOj.s:3829   .data.heartbeat:0000000000000000 $d
     /tmp/cckAiVOj.s:3838   .data.no_key:0000000000000000 $d
     /tmp/cckAiVOj.s:3847   .data.release:0000000000000000 $d
ARM GAS  /tmp/cckAiVOj.s 			page 139


     /tmp/cckAiVOj.s:3856   .data.spaces:0000000000000000 $d
     /tmp/cckAiVOj.s:3863   .rodata.MID_MENU:0000000000000000 $d
     /tmp/cckAiVOj.s:3873   .rodata.Menus:0000000000000000 $d
     /tmp/cckAiVOj.s:3877   .rodata.Menus:0000000000000000 Menus
     /tmp/cckAiVOj.s:4885   .rodata.mapping_alpha.10909:0000000000000000 $d
     /tmp/cckAiVOj.s:4889   .rodata.mapping_alpha.10909:0000000000000000 mapping_alpha.10909
     /tmp/cckAiVOj.s:5032   .rodata.mapping_fshift.10907:0000000000000000 $d
     /tmp/cckAiVOj.s:5036   .rodata.mapping_fshift.10907:0000000000000000 mapping_fshift.10907
     /tmp/cckAiVOj.s:5179   .rodata.mapping_gshift.10908:0000000000000000 $d
     /tmp/cckAiVOj.s:5183   .rodata.mapping_gshift.10908:0000000000000000 mapping_gshift.10908
     /tmp/cckAiVOj.s:5326   .rodata.mapping_none.10906:0000000000000000 $d
     /tmp/cckAiVOj.s:5330   .rodata.mapping_none.10906:0000000000000000 mapping_none.10906
     /tmp/cckAiVOj.s:5473   .rodata.mapping_running.10910:0000000000000000 $d
     /tmp/cckAiVOj.s:5477   .rodata.mapping_running.10910:0000000000000000 mapping_running.10910
     /tmp/cckAiVOj.s:5620   .rodata.mid_menu:0000000000000000 $d
     /tmp/cckAiVOj.s:2106   .text.do_multi:0000000000000027 $d
     /tmp/cckAiVOj.s:2106   .text.do_multi:0000000000000028 $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
pixel_length
strcpy
sprintf
process_keycode_with_shift
flash_restore
save_lib_file
flash_backup
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
get_alpha_state
cur_shift
StateWhileOn
DispMsg
JustDisplayed
Pause
Running

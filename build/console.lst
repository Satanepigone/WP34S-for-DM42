ARM GAS  /tmp/ccGwc1Zz.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_menu_label.constprop.0:
  27              	.LVL0:
  28              	.LFB28:
  29              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** void set_menu ( int new_menu ) {
   4:src/menu.c    ****   int m = current_menu;
   5:src/menu.c    ****   if (new_menu == current_menu) {
   6:src/menu.c    ****     current_menu = 0;
   7:src/menu.c    ****   }
   8:src/menu.c    ****   else if (new_menu == -1) {
   9:src/menu.c    ****     current_menu = last_menu;
  10:src/menu.c    ****   }
  11:src/menu.c    ****   else {
  12:src/menu.c    ****     current_menu = new_menu;
  13:src/menu.c    ****   }
  14:src/menu.c    ****   last_menu = m;
  15:src/menu.c    **** }
  16:src/menu.c    **** 
  17:src/menu.c    **** int get_menu () {
  18:src/menu.c    ****   return current_menu;
  19:src/menu.c    **** }
  20:src/menu.c    **** 
  21:src/menu.c    **** void display_current_menu () {
  22:src/menu.c    ****   display_menu (current_menu);
  23:src/menu.c    **** }
  24:src/menu.c    **** 
  25:src/menu.c    **** void set_last_menu () {
  26:src/menu.c    ****   set_menu (last_menu);
  27:src/menu.c    **** }
  28:src/menu.c    **** 
  29:src/menu.c    **** static unsigned char mdots[200][2];
ARM GAS  /tmp/ccGwc1Zz.s 			page 2


  30:src/menu.c    **** 
  31:src/menu.c    **** static const struct _menu Menus[] = {
  32:src/menu.c    ****   {
  33:src/menu.c    ****     "Blank", // 0
  34:src/menu.c    ****     { 
  35:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  36:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  37:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  38:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  39:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  40:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  41:src/menu.c    ****     }    
  42:src/menu.c    ****   },
  43:src/menu.c    ****   {
  44:src/menu.c    ****     "Clear", // 1
  45:src/menu.c    ****     { 
  46:src/menu.c    ****       { { K24, 1 }, NO_KEY, "CLProg", "" },
  47:src/menu.c    ****       { { K24, 2 }, NO_KEY, "CL\221", "" },
  48:src/menu.c    ****       { { K24, 3 }, NO_KEY, "CLx", "" },
  49:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  50:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  51:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  52:src/menu.c    ****     }    
  53:src/menu.c    ****   },
  54:src/menu.c    ****   {
  55:src/menu.c    ****     "DISP", // 2
  56:src/menu.c    ****     { 
  57:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
  58:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
  59:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.M.S." },
  60:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
  61:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
  62:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  63:src/menu.c    ****     }
  64:src/menu.c    ****   },
  65:src/menu.c    ****   {
  66:src/menu.c    ****     "BASE", // 3
  67:src/menu.c    ****     { 
  68:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
  69:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
  70:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
  71:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
  72:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
  73:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  74:src/menu.c    ****     }
  75:src/menu.c    ****   },
  76:src/menu.c    ****   {
  77:src/menu.c    ****     "ANGLES", // 4
  78:src/menu.c    ****     { 
  79:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
  80:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
  81:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
  82:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
  83:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
  84:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  85:src/menu.c    ****     }
  86:src/menu.c    ****       
ARM GAS  /tmp/ccGwc1Zz.s 			page 3


  87:src/menu.c    ****   },
  88:src/menu.c    ****   {
  89:src/menu.c    ****     "MISC", // 5
  90:src/menu.c    ****     { 
  91:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
  92:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
  93:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
  94:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
  95:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
  96:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  97:src/menu.c    ****     }
  98:src/menu.c    ****   },
  99:src/menu.c    ****   {
 100:src/menu.c    ****     "X<>Y Key", // 6
 101:src/menu.c    ****     { 
 102:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 103:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 104:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 105:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 106:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 107:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 108:src/menu.c    ****     }    
 109:src/menu.c    ****   },
 110:src/menu.c    ****   {
 111:src/menu.c    ****     "Program", // 7
 112:src/menu.c    ****     { 
 113:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 114:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 115:src/menu.c    ****       { { K61, 3 }, NO_KEY, "Pause", "" },
 116:src/menu.c    ****       { { K30, 3 }, NO_KEY, "GTO", "" },
 117:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 118:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 119:src/menu.c    ****     }
 120:src/menu.c    ****   },
 121:src/menu.c    ****   {
 122:src/menu.c    ****     "Setup 1", // 8
 123:src/menu.c    ****     { 
 124:src/menu.c    ****       { { K_SYS, 0}, NO_KEY, "System", "" },
 125:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 126:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "WrtSt" },
 127:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdSt" },
 128:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 129:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 130:src/menu.c    ****     }
 131:src/menu.c    ****   },
 132:src/menu.c    ****   {
 133:src/menu.c    ****     "Arrow", // 9
 134:src/menu.c    ****     { 
 135:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 136:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 137:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 138:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "2HMS" },
 139:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS2" },
 140:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 141:src/menu.c    ****     }
 142:src/menu.c    ****   },
 143:src/menu.c    ****   {
ARM GAS  /tmp/ccGwc1Zz.s 			page 4


 144:src/menu.c    ****     "Flags", // 10
 145:src/menu.c    ****     { 
 146:src/menu.c    ****       { { K50, 1 }, NO_KEY, "SF_", "" },
 147:src/menu.c    ****       { { K50, 2 }, NO_KEY, "CF_", "" },
 148:src/menu.c    ****       { { K51, 1 }, NO_KEY, "x=?", "" },
 149:src/menu.c    ****       { { K51, 2 }, NO_KEY, "x\013?", "" },
 150:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 151:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 152:src/menu.c    ****     }
 153:src/menu.c    ****   },
 154:src/menu.c    ****   {
 155:src/menu.c    ****     "Probability", // 11
 156:src/menu.c    ****     { 
 157:src/menu.c    ****       { { K40, 3 }, { K41, 1 }, "Fact!", "\224" },
 158:src/menu.c    ****       { { K40, 1 }, { K41, 2 }, "Cy,x", "\224\235" },
 159:src/menu.c    ****       { { K40, 2 }, NO_KEY, "Py,x", "" },
 160:src/menu.c    ****       { { K12, 1 }, NO_KEY, "RAN#", "" },
 161:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 162:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 163:src/menu.c    ****     }
 164:src/menu.c    ****   },
 165:src/menu.c    ****   {
 166:src/menu.c    ****     "Statistics", // 12
 167:src/menu.c    ****     { 
 168:src/menu.c    ****       { { K42, 1 }, { K43, 3 }, "Xbar", "SUMS" },
 169:src/menu.c    ****       { { K43, 1 }, NO_KEY, "Yhat", "" },
 170:src/menu.c    ****       { { K42, 2 }, NO_KEY, "s", "" },
 171:src/menu.c    ****       { { K43, 2 }, NO_KEY, "r", "" },
 172:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 173:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 174:src/menu.c    ****     }
 175:src/menu.c    ****   },
 176:src/menu.c    ****   {
 177:src/menu.c    ****     "Setup 2", // 13
 178:src/menu.c    ****     { 
 179:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "WrtLib", "" },
 180:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdSt", "" },
 181:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SaveP", "" },
 182:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LoadP", "" },
 183:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 184:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 185:src/menu.c    ****     }
 186:src/menu.c    ****   },
 187:src/menu.c    **** };  
 188:src/menu.c    **** 
 189:src/menu.c    **** /* This code is the set_status_sized code with small changes
 190:src/menu.c    ****  * and non-DM42 code removed.
 191:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 192:src/menu.c    ****  */
 193:src/menu.c    **** #define MENU_WIDTH 32
 194:src/menu.c    **** 
 195:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  30              		.loc 1 195 13 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 544
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 196:src/menu.c    ****   // dotcol is the number of the starting dot column
ARM GAS  /tmp/ccGwc1Zz.s 			page 5


 197:src/menu.c    ****   // shifted is 1 if shifted
 198:src/menu.c    ****   unsigned short int posns[257];
  34              		.loc 1 198 3 view .LVU1
 199:src/menu.c    **** 
 200:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 201:src/menu.c    ****   int posns_state = 255;
  35              		.loc 1 201 3 view .LVU2
 202:src/menu.c    **** 
 203:src/menu.c    ****   int x = dotcol;
  36              		.loc 1 203 3 view .LVU3
 195:src/menu.c    ****   // dotcol is the number of the starting dot column
  37              		.loc 1 195 13 is_stmt 0 view .LVU4
  38 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  39              		.cfi_def_cfa_offset 36
  40              		.cfi_offset 4, -36
  41              		.cfi_offset 5, -32
  42              		.cfi_offset 6, -28
  43              		.cfi_offset 7, -24
  44              		.cfi_offset 8, -20
  45              		.cfi_offset 9, -16
  46              		.cfi_offset 10, -12
  47              		.cfi_offset 11, -8
  48              		.cfi_offset 14, -4
  49 0004 ADF5097D 		sub	sp, sp, #548
  50              		.cfi_def_cfa_offset 584
 195:src/menu.c    ****   // dotcol is the number of the starting dot column
  51              		.loc 1 195 13 view .LVU5
  52 0008 CDE90102 		strd	r0, r2, [sp, #4]
 204:src/menu.c    ****   int i, j, xmax;
 205:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  53              		.loc 1 205 18 view .LVU6
  54 000c 0029     		cmp	r1, #0
  55 000e B4BF     		ite	lt
  56 0010 01F11F03 		addlt	r3, r1, #31
  57 0014 0B46     		movge	r3, r1
 206:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 207:src/menu.c    **** 
 208:src/menu.c    ****   forceDispPlot=0;
  58              		.loc 1 208 16 view .LVU7
  59 0016 4848     		ldr	r0, .L36
  60              	.LVL1:
 195:src/menu.c    ****   // dotcol is the number of the starting dot column
  61              		.loc 1 195 13 view .LVU8
  62 0018 0F46     		mov	r7, r1
  63              	.LVL2:
 204:src/menu.c    ****   int i, j, xmax;
  64              		.loc 1 204 3 is_stmt 1 view .LVU9
 205:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  65              		.loc 1 205 3 view .LVU10
 209:src/menu.c    **** 
 210:src/menu.c    **** #ifdef RP_PREFIX
 211:src/menu.c    ****   RectPolConv = 0;
  66              		.loc 1 211 15 is_stmt 0 view .LVU11
  67 001a 4849     		ldr	r1, .L36+4
  68              	.LVL3:
 208:src/menu.c    **** 
  69              		.loc 1 208 16 view .LVU12
ARM GAS  /tmp/ccGwc1Zz.s 			page 6


  70 001c 0022     		movs	r2, #0
  71              	.LVL4:
 208:src/menu.c    **** 
  72              		.loc 1 208 16 view .LVU13
  73 001e 0270     		strb	r2, [r0]
  74              		.loc 1 211 15 view .LVU14
  75 0020 0A60     		str	r2, [r1]
 212:src/menu.c    **** #endif
 213:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
  76              		.loc 1 213 10 view .LVU15
  77 0022 019A     		ldr	r2, [sp, #4]
  78 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 205:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  79              		.loc 1 205 30 view .LVU16
  80 0026 23F01F03 		bic	r3, r3, #31
 205:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  81              		.loc 1 205 8 view .LVU17
  82 002a 03F12009 		add	r9, r3, #32
  83              	.LVL5:
 206:src/menu.c    **** 
  84              		.loc 1 206 3 is_stmt 1 view .LVU18
 208:src/menu.c    **** 
  85              		.loc 1 208 3 view .LVU19
 211:src/menu.c    **** #endif
  86              		.loc 1 211 3 view .LVU20
  87              		.loc 1 213 3 view .LVU21
  88              		.loc 1 213 9 view .LVU22
  89 002e 002D     		cmp	r5, #0
  90 0030 78D0     		beq	.L1
  91              		.loc 1 213 23 is_stmt 0 view .LVU23
  92 0032 4F45     		cmp	r7, r9
  93 0034 76DC     		bgt	.L1
  94              	.LBB33:
 214:src/menu.c    ****     int c;
 215:src/menu.c    ****     int width;
 216:src/menu.c    ****     unsigned char cmap[6];
 217:src/menu.c    **** 
 218:src/menu.c    ****     int real_width;
 219:src/menu.c    ****     int current_smallp;
 220:src/menu.c    **** 
 221:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 222:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 223:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 224:src/menu.c    ****     //           01 -> (not used)
 225:src/menu.c    ****     //           10 -> use big font
 226:src/menu.c    ****     //           11 -> use small font
 227:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 228:src/menu.c    ****     if (str[0] == '\007') {
  95              		.loc 1 228 8 view .LVU24
  96 0036 072D     		cmp	r5, #7
  97              	.LBE33:
 201:src/menu.c    **** 
  98              		.loc 1 201 7 view .LVU25
  99 0038 4FF0FF04 		mov	r4, #255
 100              	.LVL6:
 101              	.LBB50:
 214:src/menu.c    ****     int c;
ARM GAS  /tmp/ccGwc1Zz.s 			page 7


 102              		.loc 1 214 5 is_stmt 1 view .LVU26
 215:src/menu.c    ****     unsigned char cmap[6];
 103              		.loc 1 215 5 view .LVU27
 216:src/menu.c    **** 
 104              		.loc 1 216 5 view .LVU28
 218:src/menu.c    ****     int current_smallp;
 105              		.loc 1 218 5 view .LVU29
 219:src/menu.c    **** 
 106              		.loc 1 219 5 view .LVU30
 107              		.loc 1 228 5 view .LVU31
 229:src/menu.c    ****       width = str[1] & 0x1F;
 230:src/menu.c    ****       switch (str[1] & 0x60) {
 231:src/menu.c    ****       default:
 232:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 233:src/menu.c    **** 	break;
 234:src/menu.c    ****       case 0x40:	current_smallp = 0;
 235:src/menu.c    **** 	break;
 236:src/menu.c    ****       case 0x60:	current_smallp = 1;
 108              		.loc 1 236 33 is_stmt 0 view .LVU32
 109 003c 4FF0010A 		mov	r10, #1
 228:src/menu.c    ****       width = str[1] & 0x1F;
 110              		.loc 1 228 8 view .LVU33
 111 0040 64D1     		bne	.L5
 112              	.LVL7:
 113              	.L34:
 229:src/menu.c    ****       width = str[1] & 0x1F;
 114              		.loc 1 229 7 is_stmt 1 view .LVU34
 229:src/menu.c    ****       width = str[1] & 0x1F;
 115              		.loc 1 229 18 is_stmt 0 view .LVU35
 116 0042 019B     		ldr	r3, [sp, #4]
 117 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 118 0046 06F06003 		and	r3, r6, #96
 230:src/menu.c    ****       default:
 119              		.loc 1 230 7 view .LVU36
 120 004a 402B     		cmp	r3, #64
 229:src/menu.c    ****       width = str[1] & 0x1F;
 121              		.loc 1 229 13 view .LVU37
 122 004c 06F01F06 		and	r6, r6, #31
 123              	.LVL8:
 230:src/menu.c    ****       default:
 124              		.loc 1 230 7 is_stmt 1 view .LVU38
 125 0050 6CD0     		beq	.L28
 126 0052 602B     		cmp	r3, #96
 127 0054 6AD1     		bne	.L28
 128              		.loc 1 236 18 view .LVU39
 129              	.LVL9:
 237:src/menu.c    **** 	break;
 130              		.loc 1 237 2 view .LVU40
 238:src/menu.c    ****       }
 239:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 131              		.loc 1 239 7 view .LVU41
 132              		.loc 1 239 11 is_stmt 0 view .LVU42
 133 0056 019B     		ldr	r3, [sp, #4]
 134 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 236:src/menu.c    **** 	break;
 135              		.loc 1 236 33 view .LVU43
 136 005a 0123     		movs	r3, #1
ARM GAS  /tmp/ccGwc1Zz.s 			page 8


 137 005c 0093     		str	r3, [sp]
 138 005e 00F58075 		add	r5, r0, #256
 139              	.LVL10:
 140              	.L9:
 240:src/menu.c    ****       str += 3;
 141              		.loc 1 240 7 is_stmt 1 view .LVU44
 241:src/menu.c    **** 
 242:src/menu.c    ****       real_width = charlengths(c);
 142              		.loc 1 242 20 is_stmt 0 view .LVU45
 143 0062 2846     		mov	r0, r5
 144 0064 FFF7FEFF 		bl	charlengths
 145              	.LVL11:
 240:src/menu.c    ****       str += 3;
 146              		.loc 1 240 11 view .LVU46
 147 0068 019B     		ldr	r3, [sp, #4]
 148 006a 0333     		adds	r3, r3, #3
 149 006c 0193     		str	r3, [sp, #4]
 150              	.LVL12:
 151              		.loc 1 242 7 is_stmt 1 view .LVU47
 243:src/menu.c    ****     } else {
 244:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 245:src/menu.c    ****       real_width = width = charlengths(c);
 246:src/menu.c    ****       current_smallp = smallp;
 247:src/menu.c    ****     }
 248:src/menu.c    **** 
 249:src/menu.c    ****     if (x + real_width > xmax)
 152              		.loc 1 249 5 view .LVU48
 153              		.loc 1 249 11 is_stmt 0 view .LVU49
 154 006e C319     		adds	r3, r0, r7
 155              	.LVL13:
 156              		.loc 1 249 8 view .LVU50
 157 0070 9945     		cmp	r9, r3
 158 0072 57DB     		blt	.L1
 159              	.L35:
 250:src/menu.c    ****       break;
 251:src/menu.c    **** 
 252:src/menu.c    ****     if (posns_state != current_smallp) {
 160              		.loc 1 252 5 is_stmt 1 view .LVU51
 161              		.loc 1 252 8 is_stmt 0 view .LVU52
 162 0074 009B     		ldr	r3, [sp]
 163 0076 A342     		cmp	r3, r4
 253:src/menu.c    ****       findlengths(posns, current_smallp);
 164              		.loc 1 253 7 view .LVU53
 165 0078 07AB     		add	r3, sp, #28
 252:src/menu.c    ****       findlengths(posns, current_smallp);
 166              		.loc 1 252 8 view .LVU54
 167 007a 05D0     		beq	.L12
 168              		.loc 1 253 7 is_stmt 1 view .LVU55
 169 007c 1846     		mov	r0, r3
 170              	.LVL14:
 171              		.loc 1 253 7 is_stmt 0 view .LVU56
 172 007e 0099     		ldr	r1, [sp]
 173 0080 0393     		str	r3, [sp, #12]
 174 0082 FFF7FEFF 		bl	findlengths
 175              	.LVL15:
 176 0086 039B     		ldr	r3, [sp, #12]
 254:src/menu.c    ****       posns_state = current_smallp;
ARM GAS  /tmp/ccGwc1Zz.s 			page 9


 177              		.loc 1 254 7 is_stmt 1 view .LVU57
 178              	.LVL16:
 179              	.L12:
 255:src/menu.c    ****     }
 256:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 180              		.loc 1 256 5 view .LVU58
 181 0088 009A     		ldr	r2, [sp]
 182 008a 2846     		mov	r0, r5
 183 008c 05A9     		add	r1, sp, #20
 184 008e FFF7FEFF 		bl	unpackchar
 185              	.LVL17:
 257:src/menu.c    **** 
 258:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 186              		.loc 1 258 5 view .LVU59
 187              		.loc 1 258 15 view .LVU60
 188 0092 029B     		ldr	r3, [sp, #8]
 189 0094 03EB4704 		add	r4, r3, r7, lsl #1
 190 0098 294B     		ldr	r3, .L36+8
 191 009a 0DF1140B 		add	fp, sp, #20
 192 009e 1C44     		add	r4, r4, r3
 256:src/menu.c    **** 
 193              		.loc 1 256 5 is_stmt 0 view .LVU61
 194 00a0 4FF0050E 		mov	lr, #5
 195 00a4 A9EB0705 		sub	r5, r9, r7
 196              	.LVL18:
 197              	.L13:
 259:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 198              		.loc 1 259 17 is_stmt 1 view .LVU62
 199              		.loc 1 259 7 is_stmt 0 view .LVU63
 200 00a8 002E     		cmp	r6, #0
 201 00aa 1FDD     		ble	.L19
 260:src/menu.c    **** 	if (x+j >= xmax)
 202              		.loc 1 260 2 is_stmt 1 view .LVU64
 203              		.loc 1 260 5 is_stmt 0 view .LVU65
 204 00ac B945     		cmp	r9, r7
 205 00ae 1DDD     		ble	.L19
 206              	.LBB34:
 207              	.LBB35:
 208              	.LBB36:
 209              	.LBB37:
 261:src/menu.c    **** 	  break;
 262:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 263:src/menu.c    ****       }
 264:src/menu.c    ****     }
 265:src/menu.c    ****     x += width;
 266:src/menu.c    ****   }
 267:src/menu.c    **** }
 268:src/menu.c    **** 
 269:src/menu.c    **** 
 270:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 271:src/menu.c    **** 
 272:src/menu.c    **** int pixel_length(const char *s, int smallp)
 273:src/menu.c    **** {
 274:src/menu.c    ****   int len = 0;
 275:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 276:src/menu.c    ****   while (*s != '\0') {
 277:src/menu.c    ****     if (s[0] == '\007') {
ARM GAS  /tmp/ccGwc1Zz.s 			page 10


 278:src/menu.c    ****       len += s[1] & 0x1F;
 279:src/menu.c    ****       s += 3;
 280:src/menu.c    ****       continue;
 281:src/menu.c    ****     }
 282:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 283:src/menu.c    ****   }
 284:src/menu.c    ****   return len;
 285:src/menu.c    **** }
 286:src/menu.c    **** */
 287:src/menu.c    **** 
 288:src/menu.c    **** 
 289:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 290:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 291:src/menu.c    ****   if (on) {
 292:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 293:src/menu.c    ****   }
 294:src/menu.c    ****   else {
 295:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 210              		.loc 1 295 25 view .LVU66
 211 00b0 0AFA0EFC 		lsl	ip, r10, lr
 212              		.loc 1 295 17 view .LVU67
 213 00b4 4FFA8CFC 		sxtb	ip, ip
 214              	.LBE37:
 215              	.LBE36:
 216              	.LBE35:
 217              	.LBE34:
 262:src/menu.c    ****       }
 218              		.loc 1 262 31 view .LVU68
 219 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 220              	.LBB47:
 221              	.LBB44:
 222              	.LBB41:
 223              	.LBB38:
 224              		.loc 1 295 17 view .LVU69
 225 00bc 6FEA0C08 		mvn	r8, ip
 226              	.LBE38:
 227              	.LBE41:
 228              	.LBE44:
 229              	.LBE47:
 259:src/menu.c    **** 	if (x+j >= xmax)
 230              		.loc 1 259 13 view .LVU70
 231 00c0 0023     		movs	r3, #0
 232 00c2 01E0     		b	.L14
 233              	.LVL19:
 234              	.L18:
 260:src/menu.c    **** 	  break;
 235              		.loc 1 260 5 view .LVU71
 236 00c4 9D42     		cmp	r5, r3
 237 00c6 11D0     		beq	.L19
 238              	.LVL20:
 239              	.L14:
 262:src/menu.c    ****       }
 240              		.loc 1 262 2 is_stmt 1 view .LVU72
 241              	.LBB48:
 242              	.LBI34:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 243              		.loc 1 289 6 view .LVU73
ARM GAS  /tmp/ccGwc1Zz.s 			page 11


 244              	.LBB45:
 290:src/menu.c    ****   if (on) {
 245              		.loc 1 290 3 view .LVU74
 246              	.LBB42:
 247              	.LBI36:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 248              		.loc 1 289 6 view .LVU75
 249              	.LBB39:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 250              		.loc 1 291 3 view .LVU76
 251              	.LBE39:
 252              	.LBE42:
 290:src/menu.c    ****   if (on) {
 253              		.loc 1 290 6 is_stmt 0 view .LVU77
 254 00c8 DA19     		adds	r2, r3, r7
 255              	.LVL21:
 290:src/menu.c    ****   if (on) {
 256              		.loc 1 290 6 view .LVU78
 257 00ca C72A     		cmp	r2, #199
 258              	.LBE45:
 259              	.LBE48:
 262:src/menu.c    ****       }
 260              		.loc 1 262 46 view .LVU79
 261 00cc 40FA03F1 		asr	r1, r0, r3
 262              	.LBB49:
 263              	.LBB46:
 290:src/menu.c    ****   if (on) {
 264              		.loc 1 290 6 view .LVU80
 265 00d0 09D8     		bhi	.L16
 266              	.LBB43:
 267              	.LBB40:
 292:src/menu.c    ****   }
 268              		.loc 1 292 5 is_stmt 1 view .LVU81
 269              		.loc 1 295 5 view .LVU82
 292:src/menu.c    ****   }
 270              		.loc 1 292 17 is_stmt 0 view .LVU83
 271 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 272              	.LVL22:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 273              		.loc 1 291 6 view .LVU84
 274 00d6 C907     		lsls	r1, r1, #31
 292:src/menu.c    ****   }
 275              		.loc 1 292 17 view .LVU85
 276 00d8 4CBF     		ite	mi
 277 00da 4CEA0202 		orrmi	r2, ip, r2
 278              		.loc 1 295 17 view .LVU86
 279 00de 08EA0202 		andpl	r2, r8, r2
 280 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 281              	.L16:
 282              	.LBE40:
 283              	.LBE43:
 284              	.LBE46:
 285              	.LBE49:
 260:src/menu.c    **** 	  break;
 286              		.loc 1 260 2 is_stmt 1 view .LVU87
 287              	.LVL23:
 259:src/menu.c    **** 	if (x+j >= xmax)
ARM GAS  /tmp/ccGwc1Zz.s 			page 12


 288              		.loc 1 259 26 view .LVU88
 259:src/menu.c    **** 	if (x+j >= xmax)
 289              		.loc 1 259 27 is_stmt 0 view .LVU89
 290 00e6 0133     		adds	r3, r3, #1
 291              	.LVL24:
 259:src/menu.c    **** 	if (x+j >= xmax)
 292              		.loc 1 259 17 is_stmt 1 view .LVU90
 259:src/menu.c    **** 	if (x+j >= xmax)
 293              		.loc 1 259 7 is_stmt 0 view .LVU91
 294 00e8 B342     		cmp	r3, r6
 295 00ea EBD1     		bne	.L18
 296              	.LVL25:
 297              	.L19:
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 298              		.loc 1 258 20 is_stmt 1 view .LVU92
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 299              		.loc 1 258 15 view .LVU93
 300 00ec 0EF1FF3E 		add	lr, lr, #-1
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 301              		.loc 1 258 5 is_stmt 0 view .LVU94
 302 00f0 BEF1FF3F 		cmp	lr, #-1
 303 00f4 0BF1010B 		add	fp, fp, #1
 304              	.LVL26:
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 305              		.loc 1 258 5 view .LVU95
 306 00f8 D6D1     		bne	.L13
 265:src/menu.c    ****   }
 307              		.loc 1 265 5 is_stmt 1 view .LVU96
 308              	.LBE50:
 213:src/menu.c    ****     int c;
 309              		.loc 1 213 10 is_stmt 0 view .LVU97
 310 00fa 019B     		ldr	r3, [sp, #4]
 311 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 312              	.LBB51:
 265:src/menu.c    ****   }
 313              		.loc 1 265 7 view .LVU98
 314 00fe 3744     		add	r7, r7, r6
 315              	.LVL27:
 265:src/menu.c    ****   }
 316              		.loc 1 265 7 view .LVU99
 317              	.LBE51:
 213:src/menu.c    ****     int c;
 318              		.loc 1 213 9 is_stmt 1 view .LVU100
 319 0100 85B1     		cbz	r5, .L1
 213:src/menu.c    ****     int c;
 320              		.loc 1 213 23 is_stmt 0 view .LVU101
 321 0102 B945     		cmp	r9, r7
 322 0104 0EDB     		blt	.L1
 323              	.LBB52:
 228:src/menu.c    ****       width = str[1] & 0x1F;
 324              		.loc 1 228 8 view .LVU102
 325 0106 072D     		cmp	r5, #7
 326              	.LBE52:
 327 0108 009C     		ldr	r4, [sp]
 328              	.LBB53:
 214:src/menu.c    ****     int width;
 329              		.loc 1 214 5 is_stmt 1 view .LVU103
ARM GAS  /tmp/ccGwc1Zz.s 			page 13


 215:src/menu.c    ****     unsigned char cmap[6];
 330              		.loc 1 215 5 view .LVU104
 216:src/menu.c    **** 
 331              		.loc 1 216 5 view .LVU105
 218:src/menu.c    ****     int current_smallp;
 332              		.loc 1 218 5 view .LVU106
 219:src/menu.c    **** 
 333              		.loc 1 219 5 view .LVU107
 228:src/menu.c    ****       width = str[1] & 0x1F;
 334              		.loc 1 228 5 view .LVU108
 228:src/menu.c    ****       width = str[1] & 0x1F;
 335              		.loc 1 228 8 is_stmt 0 view .LVU109
 336 010a 9AD0     		beq	.L34
 337              	.LVL28:
 338              	.L5:
 244:src/menu.c    ****       real_width = width = charlengths(c);
 339              		.loc 1 244 7 is_stmt 1 view .LVU110
 245:src/menu.c    ****       current_smallp = smallp;
 340              		.loc 1 245 28 is_stmt 0 view .LVU111
 341 010c 2846     		mov	r0, r5
 342 010e FFF7FEFF 		bl	charlengths
 343              	.LVL29:
 244:src/menu.c    ****       real_width = width = charlengths(c);
 344              		.loc 1 244 31 view .LVU112
 345 0112 019B     		ldr	r3, [sp, #4]
 346 0114 0133     		adds	r3, r3, #1
 347 0116 0193     		str	r3, [sp, #4]
 348              	.LVL30:
 245:src/menu.c    ****       current_smallp = smallp;
 349              		.loc 1 245 7 is_stmt 1 view .LVU113
 246:src/menu.c    ****     }
 350              		.loc 1 246 7 view .LVU114
 246:src/menu.c    ****     }
 351              		.loc 1 246 22 is_stmt 0 view .LVU115
 352 0118 0023     		movs	r3, #0
 353              	.LVL31:
 246:src/menu.c    ****     }
 354              		.loc 1 246 22 view .LVU116
 355 011a 0093     		str	r3, [sp]
 356              	.LVL32:
 249:src/menu.c    ****       break;
 357              		.loc 1 249 11 view .LVU117
 358 011c C319     		adds	r3, r0, r7
 359              	.LVL33:
 249:src/menu.c    ****       break;
 360              		.loc 1 249 8 view .LVU118
 361 011e 9945     		cmp	r9, r3
 245:src/menu.c    ****       current_smallp = smallp;
 362              		.loc 1 245 28 view .LVU119
 363 0120 0646     		mov	r6, r0
 249:src/menu.c    ****       break;
 364              		.loc 1 249 5 is_stmt 1 view .LVU120
 249:src/menu.c    ****       break;
 365              		.loc 1 249 8 is_stmt 0 view .LVU121
 366 0122 A7DA     		bge	.L35
 367              	.LVL34:
 368              	.L1:
ARM GAS  /tmp/ccGwc1Zz.s 			page 14


 249:src/menu.c    ****       break;
 369              		.loc 1 249 8 view .LVU122
 370              	.LBE53:
 267:src/menu.c    **** 
 371              		.loc 1 267 1 view .LVU123
 372 0124 0DF5097D 		add	sp, sp, #548
 373              		.cfi_remember_state
 374              		.cfi_def_cfa_offset 36
 375              		@ sp needed
 376 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 377              	.LVL35:
 378              	.L28:
 379              		.cfi_restore_state
 380              	.LBB54:
 239:src/menu.c    ****       str += 3;
 381              		.loc 1 239 7 is_stmt 1 view .LVU124
 239:src/menu.c    ****       str += 3;
 382              		.loc 1 239 11 is_stmt 0 view .LVU125
 383 012c 019B     		ldr	r3, [sp, #4]
 384 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 232:src/menu.c    **** 	break;
 385              		.loc 1 232 33 view .LVU126
 386 0130 0023     		movs	r3, #0
 387 0132 0093     		str	r3, [sp]
 388 0134 95E7     		b	.L9
 389              	.L37:
 390 0136 00BF     		.align	2
 391              	.L36:
 392 0138 00000000 		.word	forceDispPlot
 393 013c 00000000 		.word	RectPolConv
 394 0140 00000000 		.word	.LANCHOR0
 395              	.LBE54:
 396              		.cfi_endproc
 397              	.LFE28:
 399              		.section	.text.set_menu,"ax",%progbits
 400              		.align	1
 401              		.p2align 2,,3
 402              		.global	set_menu
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu fpv4-sp-d16
 408              	set_menu:
 409              	.LVL36:
 410              	.LFB3:
   3:src/menu.c    ****   int m = current_menu;
 411              		.loc 1 3 32 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              		@ link register save eliminated.
   4:src/menu.c    ****   if (new_menu == current_menu) {
 416              		.loc 1 4 3 view .LVU128
   4:src/menu.c    ****   if (new_menu == current_menu) {
 417              		.loc 1 4 7 is_stmt 0 view .LVU129
 418 0000 084A     		ldr	r2, .L43
 419 0002 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccGwc1Zz.s 			page 15


 420              	.LVL37:
   5:src/menu.c    ****     current_menu = 0;
 421              		.loc 1 5 3 is_stmt 1 view .LVU130
   5:src/menu.c    ****     current_menu = 0;
 422              		.loc 1 5 6 is_stmt 0 view .LVU131
 423 0004 8342     		cmp	r3, r0
 424 0006 07D0     		beq	.L42
   8:src/menu.c    ****     current_menu = last_menu;
 425              		.loc 1 8 8 is_stmt 1 view .LVU132
   9:src/menu.c    ****   }
 426              		.loc 1 9 18 is_stmt 0 view .LVU133
 427 0008 0749     		ldr	r1, .L43+4
   8:src/menu.c    ****     current_menu = last_menu;
 428              		.loc 1 8 11 view .LVU134
 429 000a B0F1FF3F 		cmp	r0, #-1
   9:src/menu.c    ****   }
 430              		.loc 1 9 5 is_stmt 1 view .LVU135
   9:src/menu.c    ****   }
 431              		.loc 1 9 18 is_stmt 0 view .LVU136
 432 000e 08BF     		it	eq
 433 0010 0868     		ldreq	r0, [r1]
 434              	.LVL38:
  12:src/menu.c    ****   }
 435              		.loc 1 12 5 is_stmt 1 view .LVU137
  12:src/menu.c    ****   }
 436              		.loc 1 12 18 is_stmt 0 view .LVU138
 437 0012 1060     		str	r0, [r2]
  14:src/menu.c    **** }
 438              		.loc 1 14 3 is_stmt 1 view .LVU139
  14:src/menu.c    **** }
 439              		.loc 1 14 13 is_stmt 0 view .LVU140
 440 0014 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 441              		.loc 1 15 1 view .LVU141
 442 0016 7047     		bx	lr
 443              	.LVL39:
 444              	.L42:
   6:src/menu.c    ****   }
 445              		.loc 1 6 5 is_stmt 1 view .LVU142
   6:src/menu.c    ****   }
 446              		.loc 1 6 18 is_stmt 0 view .LVU143
 447 0018 0021     		movs	r1, #0
 448 001a 1160     		str	r1, [r2]
 449 001c 0249     		ldr	r1, .L43+4
  14:src/menu.c    **** }
 450              		.loc 1 14 3 is_stmt 1 view .LVU144
  14:src/menu.c    **** }
 451              		.loc 1 14 13 is_stmt 0 view .LVU145
 452 001e 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 453              		.loc 1 15 1 view .LVU146
 454 0020 7047     		bx	lr
 455              	.L44:
 456 0022 00BF     		.align	2
 457              	.L43:
 458 0024 00000000 		.word	.LANCHOR1
 459 0028 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/ccGwc1Zz.s 			page 16


 460              		.cfi_endproc
 461              	.LFE3:
 463              		.section	.text.get_menu,"ax",%progbits
 464              		.align	1
 465              		.p2align 2,,3
 466              		.global	get_menu
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv4-sp-d16
 472              	get_menu:
 473              	.LFB4:
  17:src/menu.c    ****   return current_menu;
 474              		.loc 1 17 17 is_stmt 1 view -0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
  18:src/menu.c    **** }
 479              		.loc 1 18 3 view .LVU148
  18:src/menu.c    **** }
 480              		.loc 1 18 10 is_stmt 0 view .LVU149
 481 0000 014B     		ldr	r3, .L46
  19:src/menu.c    **** 
 482              		.loc 1 19 1 view .LVU150
 483 0002 1868     		ldr	r0, [r3]
 484 0004 7047     		bx	lr
 485              	.L47:
 486 0006 00BF     		.align	2
 487              	.L46:
 488 0008 00000000 		.word	.LANCHOR1
 489              		.cfi_endproc
 490              	.LFE4:
 492              		.section	.text.set_last_menu,"ax",%progbits
 493              		.align	1
 494              		.p2align 2,,3
 495              		.global	set_last_menu
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu fpv4-sp-d16
 501              	set_last_menu:
 502              	.LFB6:
  25:src/menu.c    ****   set_menu (last_menu);
 503              		.loc 1 25 23 is_stmt 1 view -0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
  26:src/menu.c    **** }
 508              		.loc 1 26 3 view .LVU152
 509 0000 044B     		ldr	r3, .L52
 510              	.LBB55:
 511              	.LBB56:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 512              		.loc 1 4 7 is_stmt 0 view .LVU153
 513 0002 0549     		ldr	r1, .L52+4
ARM GAS  /tmp/ccGwc1Zz.s 			page 17


 514              	.LBE56:
 515              	.LBE55:
  26:src/menu.c    **** }
 516              		.loc 1 26 3 view .LVU154
 517 0004 1868     		ldr	r0, [r3]
 518              	.LVL40:
 519              	.LBB58:
 520              	.LBI55:
   3:src/menu.c    ****   int m = current_menu;
 521              		.loc 1 3 6 is_stmt 1 view .LVU155
 522              	.LBB57:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 523              		.loc 1 4 3 view .LVU156
   4:src/menu.c    ****   if (new_menu == current_menu) {
 524              		.loc 1 4 7 is_stmt 0 view .LVU157
 525 0006 0A68     		ldr	r2, [r1]
 526              	.LVL41:
   5:src/menu.c    ****     current_menu = 0;
 527              		.loc 1 5 3 is_stmt 1 view .LVU158
  14:src/menu.c    **** }
 528              		.loc 1 14 13 is_stmt 0 view .LVU159
 529 0008 1A60     		str	r2, [r3]
   5:src/menu.c    ****     current_menu = 0;
 530              		.loc 1 5 6 view .LVU160
 531 000a 9042     		cmp	r0, r2
   6:src/menu.c    ****   }
 532              		.loc 1 6 5 is_stmt 1 view .LVU161
   6:src/menu.c    ****   }
 533              		.loc 1 6 18 is_stmt 0 view .LVU162
 534 000c 08BF     		it	eq
 535 000e 0020     		moveq	r0, #0
 536              	.LVL42:
   8:src/menu.c    ****     current_menu = last_menu;
 537              		.loc 1 8 8 is_stmt 1 view .LVU163
  12:src/menu.c    ****   }
 538              		.loc 1 12 18 is_stmt 0 view .LVU164
 539 0010 0860     		str	r0, [r1]
  14:src/menu.c    **** }
 540              		.loc 1 14 3 is_stmt 1 view .LVU165
 541              	.LVL43:
  14:src/menu.c    **** }
 542              		.loc 1 14 3 is_stmt 0 view .LVU166
 543              	.LBE57:
 544              	.LBE58:
  27:src/menu.c    **** 
 545              		.loc 1 27 1 view .LVU167
 546 0012 7047     		bx	lr
 547              	.L53:
 548              		.align	2
 549              	.L52:
 550 0014 00000000 		.word	.LANCHOR2
 551 0018 00000000 		.word	.LANCHOR1
 552              		.cfi_endproc
 553              	.LFE6:
 555              		.section	.text.mdot,"ax",%progbits
 556              		.align	1
 557              		.p2align 2,,3
ARM GAS  /tmp/ccGwc1Zz.s 			page 18


 558              		.global	mdot
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu fpv4-sp-d16
 564              	mdot:
 565              	.LVL44:
 566              	.LFB8:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 567              		.loc 1 289 40 is_stmt 1 view -0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 290:src/menu.c    ****   if (on) {
 572              		.loc 1 290 3 view .LVU169
 290:src/menu.c    ****   if (on) {
 573              		.loc 1 290 6 is_stmt 0 view .LVU170
 574 0000 C728     		cmp	r0, #199
 575 0002 1AD8     		bhi	.L58
 576              	.LVL45:
 577              	.LBB61:
 578              	.LBI61:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 579              		.loc 1 289 6 is_stmt 1 view .LVU171
 580              	.LBB62:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 581              		.loc 1 291 3 view .LVU172
 582              	.LBE62:
 583              	.LBE61:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 584              		.loc 1 289 40 is_stmt 0 view .LVU173
 585 0004 10B4     		push	{r4}
 586              		.cfi_def_cfa_offset 4
 587              		.cfi_offset 4, -4
 588              	.LBB65:
 589              	.LBB63:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 590              		.loc 1 291 6 view .LVU174
 591 0006 63B9     		cbnz	r3, .L61
 592              		.loc 1 295 5 is_stmt 1 view .LVU175
 593              		.loc 1 295 17 is_stmt 0 view .LVU176
 594 0008 0C4B     		ldr	r3, .L62
 595              	.LVL46:
 596              		.loc 1 295 17 view .LVU177
 597 000a 03EB4000 		add	r0, r3, r0, lsl #1
 598              	.LVL47:
 599              		.loc 1 295 25 view .LVU178
 600 000e 0124     		movs	r4, #1
 601              		.loc 1 295 17 view .LVU179
 602 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 603              		.loc 1 295 25 view .LVU180
 604 0012 04FA01F1 		lsl	r1, r4, r1
 605              	.LVL48:
 606              		.loc 1 295 17 view .LVU181
 607 0016 23EA0101 		bic	r1, r3, r1
 608 001a 8154     		strb	r1, [r0, r2]
ARM GAS  /tmp/ccGwc1Zz.s 			page 19


 609              	.LVL49:
 610              		.loc 1 295 17 view .LVU182
 611              	.LBE63:
 612              	.LBE65:
 296:src/menu.c    ****   }
 297:src/menu.c    **** }
 613              		.loc 1 297 1 view .LVU183
 614 001c 5DF8044B 		ldr	r4, [sp], #4
 615              		.cfi_remember_state
 616              		.cfi_restore 4
 617              		.cfi_def_cfa_offset 0
 618 0020 7047     		bx	lr
 619              	.LVL50:
 620              	.L61:
 621              		.cfi_restore_state
 622              	.LBB66:
 623              	.LBB64:
 292:src/menu.c    ****   }
 624              		.loc 1 292 5 is_stmt 1 view .LVU184
 292:src/menu.c    ****   }
 625              		.loc 1 292 17 is_stmt 0 view .LVU185
 626 0022 064B     		ldr	r3, .L62
 627              	.LVL51:
 292:src/menu.c    ****   }
 628              		.loc 1 292 17 view .LVU186
 629 0024 03EB4000 		add	r0, r3, r0, lsl #1
 630              	.LVL52:
 292:src/menu.c    ****   }
 631              		.loc 1 292 24 view .LVU187
 632 0028 0124     		movs	r4, #1
 292:src/menu.c    ****   }
 633              		.loc 1 292 17 view .LVU188
 634 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 292:src/menu.c    ****   }
 635              		.loc 1 292 24 view .LVU189
 636 002c 04FA01F1 		lsl	r1, r4, r1
 637              	.LVL53:
 292:src/menu.c    ****   }
 638              		.loc 1 292 17 view .LVU190
 639 0030 1943     		orrs	r1, r1, r3
 640 0032 8154     		strb	r1, [r0, r2]
 641              	.LBE64:
 642              	.LBE66:
 643              		.loc 1 297 1 view .LVU191
 644 0034 5DF8044B 		ldr	r4, [sp], #4
 645              		.cfi_restore 4
 646              		.cfi_def_cfa_offset 0
 647 0038 7047     		bx	lr
 648              	.LVL54:
 649              	.L58:
 650              		.loc 1 297 1 view .LVU192
 651 003a 7047     		bx	lr
 652              	.L63:
 653              		.align	2
 654              	.L62:
 655 003c 00000000 		.word	.LANCHOR0
 656              		.cfi_endproc
ARM GAS  /tmp/ccGwc1Zz.s 			page 20


 657              	.LFE8:
 659              		.section	.text.display_menu,"ax",%progbits
 660              		.align	1
 661              		.p2align 2,,3
 662              		.global	display_menu
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu fpv4-sp-d16
 668              	display_menu:
 669              	.LVL55:
 670              	.LFB9:
 298:src/menu.c    **** 
 299:src/menu.c    **** 
 300:src/menu.c    **** void display_menu (int current_menu) {
 671              		.loc 1 300 38 is_stmt 1 view -0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 301:src/menu.c    ****   int len = 0;
 675              		.loc 1 301 3 view .LVU194
 302:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 676              		.loc 1 302 3 view .LVU195
 300:src/menu.c    ****   int len = 0;
 677              		.loc 1 300 38 is_stmt 0 view .LVU196
 678 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 679              		.cfi_def_cfa_offset 36
 680              		.cfi_offset 4, -36
 681              		.cfi_offset 5, -32
 682              		.cfi_offset 6, -28
 683              		.cfi_offset 7, -24
 684              		.cfi_offset 8, -20
 685              		.cfi_offset 9, -16
 686              		.cfi_offset 10, -12
 687              		.cfi_offset 11, -8
 688              		.cfi_offset 14, -4
 689 0004 83B0     		sub	sp, sp, #12
 690              		.cfi_def_cfa_offset 48
 691              		.loc 1 302 3 view .LVU197
 692 0006 0024     		movs	r4, #0
 693 0008 404F     		ldr	r7, .L82
 694 000a 0094     		str	r4, [sp]
 695 000c 3423     		movs	r3, #52
 696 000e 4FF4C872 		mov	r2, #400
 697 0012 BC21     		movs	r1, #188
 300:src/menu.c    ****   int len = 0;
 698              		.loc 1 300 38 view .LVU198
 699 0014 0646     		mov	r6, r0
 700              		.loc 1 302 3 view .LVU199
 701 0016 2046     		mov	r0, r4
 702              	.LVL56:
 703              		.loc 1 302 3 view .LVU200
 704 0018 B847     		blx	r7
 705              	.LVL57:
 303:src/menu.c    ****   //  if (current_menu == 0) return; // Menu 0 is blank
 304:src/menu.c    ****   // Not blank now - includes arrow and cmplx like all the others.
 305:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
ARM GAS  /tmp/ccGwc1Zz.s 			page 21


 706              		.loc 1 305 3 is_stmt 1 view .LVU201
 707 001a 3D4D     		ldr	r5, .L82+4
 708 001c FF23     		movs	r3, #255
 709 001e 0093     		str	r3, [sp]
 710 0020 4FF4C872 		mov	r2, #400
 711 0024 0123     		movs	r3, #1
 712 0026 BC21     		movs	r1, #188
 713 0028 2046     		mov	r0, r4
 714 002a B847     		blx	r7
 715              	.LVL58:
 306:src/menu.c    ****   //Clear previous menu
 307:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 716              		.loc 1 307 3 view .LVU202
 717              	.LBB67:
 718              		.loc 1 307 8 view .LVU203
 719              		.loc 1 307 21 view .LVU204
 308:src/menu.c    ****     mdots[col][0] = 0;
 720              		.loc 1 308 19 is_stmt 0 view .LVU205
 721 002c 2246     		mov	r2, r4
 722 002e 05F5C871 		add	r1, r5, #400
 723              	.LBE67:
 305:src/menu.c    ****   //Clear previous menu
 724              		.loc 1 305 3 view .LVU206
 725 0032 2B46     		mov	r3, r5
 726              	.LVL59:
 727              	.L65:
 728              	.LBB68:
 729              		.loc 1 308 5 is_stmt 1 discriminator 3 view .LVU207
 730              		.loc 1 308 19 is_stmt 0 discriminator 3 view .LVU208
 731 0034 1A70     		strb	r2, [r3]
 309:src/menu.c    ****     mdots[col][1] = 0;
 732              		.loc 1 309 5 is_stmt 1 discriminator 3 view .LVU209
 733              		.loc 1 309 19 is_stmt 0 discriminator 3 view .LVU210
 734 0036 5A70     		strb	r2, [r3, #1]
 307:src/menu.c    ****     mdots[col][0] = 0;
 735              		.loc 1 307 32 is_stmt 1 discriminator 3 view .LVU211
 307:src/menu.c    ****     mdots[col][0] = 0;
 736              		.loc 1 307 21 discriminator 3 view .LVU212
 737 0038 0233     		adds	r3, r3, #2
 307:src/menu.c    ****     mdots[col][0] = 0;
 738              		.loc 1 307 3 is_stmt 0 discriminator 3 view .LVU213
 739 003a 9942     		cmp	r1, r3
 740 003c FAD1     		bne	.L65
 741 003e 354B     		ldr	r3, .L82+8
 742 0040 D022     		movs	r2, #208
 743 0042 02FB0636 		mla	r6, r2, r6, r3
 744              	.LVL60:
 307:src/menu.c    ****     mdots[col][0] = 0;
 745              		.loc 1 307 3 discriminator 3 view .LVU214
 746 0046 2036     		adds	r6, r6, #32
 307:src/menu.c    ****     mdots[col][0] = 0;
 747              		.loc 1 307 3 view .LVU215
 748 0048 0024     		movs	r4, #0
 749              	.LVL61:
 750              	.L66:
 307:src/menu.c    ****     mdots[col][0] = 0;
 751              		.loc 1 307 3 view .LVU216
ARM GAS  /tmp/ccGwc1Zz.s 			page 22


 752              	.LBE68:
 753              	.LBB69:
 310:src/menu.c    ****   }
 311:src/menu.c    **** 
 312:src/menu.c    ****   // Draw menu items
 313:src/menu.c    ****   // 
 314:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 315:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 316:src/menu.c    ****     // Unshifted first
 317:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small fo
 754              		.loc 1 317 5 is_stmt 1 view .LVU217
 755              		.loc 1 317 11 is_stmt 0 view .LVU218
 756 004a 0021     		movs	r1, #0
 757 004c 3046     		mov	r0, r6
 758 004e FFF7FEFF 		bl	pixel_length
 759              	.LVL62:
 318:src/menu.c    ****     /*
 319:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 320:src/menu.c    ****     */
 321:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 )
 760              		.loc 1 321 5 is_stmt 1 view .LVU219
 761              		.loc 1 321 87 is_stmt 0 view .LVU220
 762 0052 C0F12000 		rsb	r0, r0, #32
 763              	.LVL63:
 764              		.loc 1 321 93 view .LVU221
 765 0056 00EBD070 		add	r0, r0, r0, lsr #31
 766              		.loc 1 321 5 view .LVU222
 767 005a 04EB6001 		add	r1, r4, r0, asr #1
 768 005e 0022     		movs	r2, #0
 769 0060 3046     		mov	r0, r6
 770 0062 06F10807 		add	r7, r6, #8
 771 0066 FFF7FEFF 		bl	set_menu_label.constprop.0
 772              	.LVL64:
 322:src/menu.c    ****     // Now shifted ...	
 323:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small font
 773              		.loc 1 323 5 is_stmt 1 view .LVU223
 774              		.loc 1 323 11 is_stmt 0 view .LVU224
 775 006a 0021     		movs	r1, #0
 776 006c 3846     		mov	r0, r7
 777 006e FFF7FEFF 		bl	pixel_length
 778              	.LVL65:
 324:src/menu.c    ****     len = item*32 + (32-len)/2;
 779              		.loc 1 324 5 is_stmt 1 view .LVU225
 780              		.loc 1 324 24 is_stmt 0 view .LVU226
 781 0072 C0F12000 		rsb	r0, r0, #32
 782              	.LVL66:
 783              		.loc 1 324 29 view .LVU227
 784 0076 00EBD070 		add	r0, r0, r0, lsr #31
 785              	.LVL67:
 325:src/menu.c    ****     if (len<0) len = 0;
 786              		.loc 1 325 5 is_stmt 1 view .LVU228
 324:src/menu.c    ****     len = item*32 + (32-len)/2;
 787              		.loc 1 324 9 is_stmt 0 view .LVU229
 788 007a 04EB6001 		add	r1, r4, r0, asr #1
 789              	.LVL68:
 324:src/menu.c    ****     len = item*32 + (32-len)/2;
 790              		.loc 1 324 9 view .LVU230
ARM GAS  /tmp/ccGwc1Zz.s 			page 23


 791 007e C729     		cmp	r1, #199
 792 0080 A8BF     		it	ge
 793 0082 C721     		movge	r1, #199
 794              	.LVL69:
 326:src/menu.c    ****     if (len>199) len = 199;
 327:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 795              		.loc 1 327 5 is_stmt 1 view .LVU231
 796 0084 21EAE171 		bic	r1, r1, r1, asr #31
 797              	.LVL70:
 798              		.loc 1 327 5 is_stmt 0 view .LVU232
 799 0088 3846     		mov	r0, r7
 800 008a 2034     		adds	r4, r4, #32
 801 008c 0122     		movs	r2, #1
 802 008e FFF7FEFF 		bl	set_menu_label.constprop.0
 803              	.LVL71:
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 804              		.loc 1 314 32 is_stmt 1 view .LVU233
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 805              		.loc 1 314 22 view .LVU234
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 806              		.loc 1 314 3 is_stmt 0 view .LVU235
 807 0092 C02C     		cmp	r4, #192
 808 0094 06F12006 		add	r6, r6, #32
 809 0098 D7D1     		bne	.L66
 810 009a 1F4E     		ldr	r6, .L82+12
 811              	.LBE69:
 812              	.LBB70:
 813              	.LBB71:
 328:src/menu.c    ****   }
 329:src/menu.c    **** 
 330:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 331:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 332:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 333:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 334:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 814              		.loc 1 334 2 view .LVU236
 815 009c DFF86C90 		ldr	r9, .L82
 816 00a0 6FEA050A 		mvn	r10, r5
 817 00a4 06F5C87B 		add	fp, r6, #400
 818              	.LBE71:
 819              	.LBE70:
 820              	.LBB73:
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 821              		.loc 1 314 3 view .LVU237
 822 00a8 771E     		subs	r7, r6, #1
 823              	.LBE73:
 824              	.LBB74:
 825              	.LBB72:
 826              		.loc 1 334 2 view .LVU238
 827 00aa 4FF0FF08 		mov	r8, #255
 828              	.L67:
 829              	.LVL72:
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 830              		.loc 1 331 23 is_stmt 1 view .LVU239
 831 00ae 0AEB0605 		add	r5, r10, r6
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 832              		.loc 1 331 14 is_stmt 0 view .LVU240
ARM GAS  /tmp/ccGwc1Zz.s 			page 24


 833 00b2 0024     		movs	r4, #0
 834              	.LVL73:
 835              	.L70:
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 836              		.loc 1 332 7 is_stmt 1 view .LVU241
 837              		.loc 1 334 2 view .LVU242
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 838              		.loc 1 332 22 is_stmt 0 view .LVU243
 839 00b4 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 840              		.loc 1 332 40 view .LVU244
 841 00b8 2241     		asrs	r2, r2, r4
 842              		.loc 1 334 2 view .LVU245
 843 00ba A4EB8401 		sub	r1, r4, r4, lsl #2
 844 00be 0323     		movs	r3, #3
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 845              		.loc 1 332 10 view .LVU246
 846 00c0 12F0010F 		tst	r2, #1
 847              		.loc 1 334 2 view .LVU247
 848 00c4 01F1E901 		add	r1, r1, #233
 849 00c8 1A46     		mov	r2, r3
 850 00ca 2846     		mov	r0, r5
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 851              		.loc 1 332 10 view .LVU248
 852 00cc 02D0     		beq	.L68
 853              		.loc 1 334 2 view .LVU249
 854 00ce CDF80080 		str	r8, [sp]
 855 00d2 C847     		blx	r9
 856              	.LVL74:
 857              	.L68:
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 858              		.loc 1 335 7 is_stmt 1 view .LVU250
 336:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 337:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 859              		.loc 1 337 2 view .LVU251
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 860              		.loc 1 335 22 is_stmt 0 view .LVU252
 861 00d4 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 862              		.loc 1 335 40 view .LVU253
 863 00d6 2241     		asrs	r2, r2, r4
 864              		.loc 1 337 2 view .LVU254
 865 00d8 A4EB8401 		sub	r1, r4, r4, lsl #2
 866 00dc 0323     		movs	r3, #3
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 867              		.loc 1 335 10 view .LVU255
 868 00de 12F0010F 		tst	r2, #1
 869              		.loc 1 337 2 view .LVU256
 870 00e2 01F1D001 		add	r1, r1, #208
 871 00e6 1A46     		mov	r2, r3
 872 00e8 04F10104 		add	r4, r4, #1
 873              	.LVL75:
 874              		.loc 1 337 2 view .LVU257
 875 00ec 2846     		mov	r0, r5
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 876              		.loc 1 335 10 view .LVU258
 877 00ee 02D0     		beq	.L69
ARM GAS  /tmp/ccGwc1Zz.s 			page 25


 878              		.loc 1 337 2 view .LVU259
 879 00f0 CDF80080 		str	r8, [sp]
 880 00f4 C847     		blx	r9
 881              	.LVL76:
 882              	.L69:
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 883              		.loc 1 331 32 is_stmt 1 discriminator 2 view .LVU260
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 884              		.loc 1 331 23 discriminator 2 view .LVU261
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 885              		.loc 1 331 5 is_stmt 0 discriminator 2 view .LVU262
 886 00f6 062C     		cmp	r4, #6
 887 00f8 DCD1     		bne	.L70
 888              	.LBE72:
 330:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 889              		.loc 1 330 32 is_stmt 1 discriminator 2 view .LVU263
 330:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 890              		.loc 1 330 21 discriminator 2 view .LVU264
 891 00fa 0236     		adds	r6, r6, #2
 330:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 892              		.loc 1 330 3 is_stmt 0 discriminator 2 view .LVU265
 893 00fc B345     		cmp	fp, r6
 894 00fe 07F10207 		add	r7, r7, #2
 895 0102 D4D1     		bne	.L67
 896              	.LBE74:
 338:src/menu.c    ****     }
 339:src/menu.c    ****   }
 340:src/menu.c    **** }
 897              		.loc 1 340 1 view .LVU266
 898 0104 03B0     		add	sp, sp, #12
 899              		.cfi_def_cfa_offset 36
 900              		@ sp needed
 901 0106 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 902              	.LVL77:
 903              	.L83:
 904              		.loc 1 340 1 view .LVU267
 905 010a 00BF     		.align	2
 906              	.L82:
 907 010c 3D020008 		.word	134218301
 908 0110 00000000 		.word	.LANCHOR0
 909 0114 00000000 		.word	.LANCHOR3
 910 0118 01000000 		.word	.LANCHOR0+1
 911              		.cfi_endproc
 912              	.LFE9:
 914              		.section	.text.display_current_menu,"ax",%progbits
 915              		.align	1
 916              		.p2align 2,,3
 917              		.global	display_current_menu
 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu fpv4-sp-d16
 923              	display_current_menu:
 924              	.LFB5:
  21:src/menu.c    ****   display_menu (current_menu);
 925              		.loc 1 21 30 is_stmt 1 view -0
 926              		.cfi_startproc
ARM GAS  /tmp/ccGwc1Zz.s 			page 26


 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
  22:src/menu.c    **** }
 930              		.loc 1 22 3 view .LVU269
 931 0000 014B     		ldr	r3, .L85
 932 0002 1868     		ldr	r0, [r3]
 933 0004 FFF7FEBF 		b	display_menu
 934              	.LVL78:
 935              	.L86:
 936              		.align	2
 937              	.L85:
 938 0008 00000000 		.word	.LANCHOR1
 939              		.cfi_endproc
 940              	.LFE5:
 942              		.section	.text.shutdown,"ax",%progbits
 943              		.align	1
 944              		.p2align 2,,3
 945              		.global	shutdown
 946              		.syntax unified
 947              		.thumb
 948              		.thumb_func
 949              		.fpu fpv4-sp-d16
 951              	shutdown:
 952              	.LFB11:
 953              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
ARM GAS  /tmp/ccGwc1Zz.s 			page 27


  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** const uint8_t mid_menu[] = {
  46:src/console.c ****     MI_SYSTEM_ENTER,
  47:src/console.c ****     0 }; // Terminator
  48:src/console.c **** 
  49:src/console.c **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  50:src/console.c **** 
  51:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  52:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  53:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  54:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  55:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  56:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  57:src/console.c **** 
  58:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  59:src/console.c **** 
  60:src/console.c **** static struct _ndmap remap (const int c) {
  61:src/console.c **** 
  62:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  63:src/console.c **** 
  64:src/console.c **** #include "keytran.c"
  65:src/console.c **** 
  66:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  67:src/console.c **** 
  68:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  69:src/console.c **** 
  70:src/console.c ****   if (c == 44 ) {
  71:src/console.c ****     // Start click 
  72:src/console.c ****     start_buzzer_freq(4400); sys_delay(10); stop_buzzer();
  73:src/console.c ****     // Make screenshot - allow to report errors
  74:src/console.c ****     if ( create_screenshot(1) == 2 ) {
  75:src/console.c ****       // Was error just wait for confirmation
  76:src/console.c ****       wait_for_key_press();
  77:src/console.c ****     }
  78:src/console.c ****     // End click
  79:src/console.c ****     start_buzzer_freq(8800); sys_delay(10); stop_buzzer();
  80:src/console.c ****     return no_key;
  81:src/console.c ****   }
  82:src/console.c **** 
  83:src/console.c ****   
  84:src/console.c ****   if ( get_alpha_state() ) {
  85:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  86:src/console.c ****       switch (cur_shift()) { 
  87:src/console.c ****       case SHIFT_N:
  88:src/console.c **** 	return mapping_none[c]; // N -> F
ARM GAS  /tmp/ccGwc1Zz.s 			page 28


  89:src/console.c **** 	break;
  90:src/console.c ****       case SHIFT_F:
  91:src/console.c **** 	return mapping_fshift[c]; // F -> G
  92:src/console.c **** 	break;
  93:src/console.c ****       case SHIFT_G:
  94:src/console.c **** 	return h_shift; // G -> H
  95:src/console.c **** 	break;
  96:src/console.c ****       case SHIFT_H:
  97:src/console.c **** 	return h_shift; // H -> N
  98:src/console.c ****       default:
  99:src/console.c **** 	return no_change;
 100:src/console.c ****       }
 101:src/console.c ****     }
 102:src/console.c ****     return mapping_alpha [c];
 103:src/console.c ****   }
 104:src/console.c ****     
 105:src/console.c ****   switch (c) {
 106:src/console.c ****   case KEY_F1:
 107:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 109:src/console.c ****   case KEY_F2:
 110:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 112:src/console.c ****   case KEY_F3:
 113:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 115:src/console.c ****   case KEY_F4:
 116:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 118:src/console.c ****   case KEY_F5:
 119:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 121:src/console.c ****   case KEY_F6:
 122:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 124:src/console.c ****   }
 125:src/console.c ****   
 126:src/console.c ****   switch (cur_shift()) {
 127:src/console.c ****   case SHIFT_N:    
 128:src/console.c ****     return mapping_none[c];
 129:src/console.c ****     break;
 130:src/console.c ****   case SHIFT_F:
 131:src/console.c ****     return mapping_fshift[c];
 132:src/console.c ****     break;
 133:src/console.c ****   case SHIFT_G:
 134:src/console.c ****     return mapping_gshift[c];
 135:src/console.c ****     break;
 136:src/console.c ****   default:
 137:src/console.c ****     return no_change;
 138:src/console.c ****   }
 139:src/console.c **** }
 140:src/console.c **** 
 141:src/console.c **** #endif
 142:src/console.c **** 
 143:src/console.c **** void shutdown( void )
 144:src/console.c **** {
 954              		.loc 2 144 1 view -0
ARM GAS  /tmp/ccGwc1Zz.s 			page 29


 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 0
 957              		@ frame_needed = 0, uses_anonymous_args = 0
 145:src/console.c **** #ifndef DM42
 146:src/console.c ****   checksum_all();
 147:src/console.c ****   setuptty( 1 );
 148:src/console.c ****   save_statefile( NULL );
 149:src/console.c ****   exit( 0 );
 150:src/console.c **** #else
 151:src/console.c ****   save_ram_file(0);
 958              		.loc 2 151 3 view .LVU271
 144:src/console.c **** #ifndef DM42
 959              		.loc 2 144 1 is_stmt 0 view .LVU272
 960 0000 08B5     		push	{r3, lr}
 961              		.cfi_def_cfa_offset 8
 962              		.cfi_offset 3, -8
 963              		.cfi_offset 14, -4
 964              		.loc 2 151 3 view .LVU273
 965 0002 0020     		movs	r0, #0
 966 0004 FFF7FEFF 		bl	save_ram_file
 967              	.LVL79:
 152:src/console.c ****   SET_ST(STAT_PGM_END);
 968              		.loc 2 152 3 is_stmt 1 view .LVU274
 969 0008 024A     		ldr	r2, .L89
 970 000a 1368     		ldr	r3, [r2]
 971 000c 43F40073 		orr	r3, r3, #512
 972 0010 1360     		str	r3, [r2]
 153:src/console.c **** #endif
 154:src/console.c **** }
 973              		.loc 2 154 1 is_stmt 0 view .LVU275
 974 0012 08BD     		pop	{r3, pc}
 975              	.L90:
 976              		.align	2
 977              	.L89:
 978 0014 00200010 		.word	268443648
 979              		.cfi_endproc
 980              	.LFE11:
 982              		.section	.text.is_key_pressed,"ax",%progbits
 983              		.align	1
 984              		.p2align 2,,3
 985              		.global	is_key_pressed
 986              		.syntax unified
 987              		.thumb
 988              		.thumb_func
 989              		.fpu fpv4-sp-d16
 991              	is_key_pressed:
 992              	.LFB12:
 155:src/console.c **** 
 156:src/console.c **** 
 157:src/console.c **** /*
 158:src/console.c ****  *  Dummies
 159:src/console.c ****  */
 160:src/console.c **** int is_key_pressed(void) 
 161:src/console.c **** {
 993              		.loc 2 161 1 is_stmt 1 view -0
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccGwc1Zz.s 			page 30


 996              		@ frame_needed = 0, uses_anonymous_args = 0
 162:src/console.c **** #ifdef DM42
 163:src/console.c ****   return !key_empty();
 997              		.loc 2 163 3 view .LVU277
 161:src/console.c **** #ifdef DM42
 998              		.loc 2 161 1 is_stmt 0 view .LVU278
 999 0000 08B5     		push	{r3, lr}
 1000              		.cfi_def_cfa_offset 8
 1001              		.cfi_offset 3, -8
 1002              		.cfi_offset 14, -4
 1003              		.loc 2 163 11 view .LVU279
 1004 0002 034B     		ldr	r3, .L93
 1005 0004 9847     		blx	r3
 1006              	.LVL80:
 164:src/console.c **** #else
 165:src/console.c ****   return 0;
 166:src/console.c **** #endif
 167:src/console.c **** }
 1007              		.loc 2 167 1 view .LVU280
 1008 0006 B0FA80F0 		clz	r0, r0
 1009 000a 4009     		lsrs	r0, r0, #5
 1010 000c 08BD     		pop	{r3, pc}
 1011              	.L94:
 1012 000e 00BF     		.align	2
 1013              	.L93:
 1014 0010 7D030008 		.word	134218621
 1015              		.cfi_endproc
 1016              	.LFE12:
 1018              		.section	.text.get_key,"ax",%progbits
 1019              		.align	1
 1020              		.p2align 2,,3
 1021              		.global	get_key
 1022              		.syntax unified
 1023              		.thumb
 1024              		.thumb_func
 1025              		.fpu fpv4-sp-d16
 1027              	get_key:
 1028              	.LFB13:
 168:src/console.c **** 
 169:src/console.c **** int get_key(void)
 170:src/console.c **** {
 1029              		.loc 2 170 1 is_stmt 1 view -0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 0
 1032              		@ frame_needed = 0, uses_anonymous_args = 0
 1033              		@ link register save eliminated.
 171:src/console.c ****   #ifdef DM42
 172:src/console.c ****   return key_pop();
 1034              		.loc 2 172 3 view .LVU282
 1035              		.loc 2 172 10 is_stmt 0 view .LVU283
 1036 0000 004B     		ldr	r3, .L96
 1037 0002 1847     		bx	r3
 1038              	.LVL81:
 1039              	.L97:
 1040              		.align	2
 1041              	.L96:
 1042 0004 89030008 		.word	134218633
ARM GAS  /tmp/ccGwc1Zz.s 			page 31


 1043              		.cfi_endproc
 1044              	.LFE13:
 1046              		.section	.text.put_key,"ax",%progbits
 1047              		.align	1
 1048              		.p2align 2,,3
 1049              		.global	put_key
 1050              		.syntax unified
 1051              		.thumb
 1052              		.thumb_func
 1053              		.fpu fpv4-sp-d16
 1055              	put_key:
 1056              	.LVL82:
 1057              	.LFB14:
 173:src/console.c ****   #else
 174:src/console.c ****   return 0;
 175:src/console.c ****   #endif
 176:src/console.c **** }
 177:src/console.c **** 
 178:src/console.c **** int put_key( int k )
 179:src/console.c **** {
 1058              		.loc 2 179 1 is_stmt 1 view -0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062              		@ link register save eliminated.
 180:src/console.c ****   #ifdef DM42
 181:src/console.c ****   return key_push(k);
 1063              		.loc 2 181 3 view .LVU285
 1064              		.loc 2 181 10 is_stmt 0 view .LVU286
 1065 0000 004B     		ldr	r3, .L99
 1066 0002 1847     		bx	r3
 1067              	.LVL83:
 1068              	.L100:
 1069              		.loc 2 181 10 view .LVU287
 1070              		.align	2
 1071              	.L99:
 1072 0004 81030008 		.word	134218625
 1073              		.cfi_endproc
 1074              	.LFE14:
 1076              		.section	.text.shift_down,"ax",%progbits
 1077              		.align	1
 1078              		.p2align 2,,3
 1079              		.global	shift_down
 1080              		.syntax unified
 1081              		.thumb
 1082              		.thumb_func
 1083              		.fpu fpv4-sp-d16
 1085              	shift_down:
 1086              	.LFB15:
 182:src/console.c ****   #else
 183:src/console.c ****   return k;
 184:src/console.c ****   #endif
 185:src/console.c **** }
 186:src/console.c **** 
 187:src/console.c **** enum shifts shift_down(void)
 188:src/console.c **** {
 1087              		.loc 2 188 1 is_stmt 1 view -0
ARM GAS  /tmp/ccGwc1Zz.s 			page 32


 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 0
 1090              		@ frame_needed = 0, uses_anonymous_args = 0
 1091              		@ link register save eliminated.
 189:src/console.c **** 	return SHIFT_N;
 1092              		.loc 2 189 2 view .LVU289
 190:src/console.c **** }
 1093              		.loc 2 190 1 is_stmt 0 view .LVU290
 1094 0000 0020     		movs	r0, #0
 1095 0002 7047     		bx	lr
 1096              		.cfi_endproc
 1097              	.LFE15:
 1099              		.section	.text.start_key_timer,"ax",%progbits
 1100              		.align	1
 1101              		.p2align 2,,3
 1102              		.global	start_key_timer
 1103              		.syntax unified
 1104              		.thumb
 1105              		.thumb_func
 1106              		.fpu fpv4-sp-d16
 1108              	start_key_timer:
 1109              	.LFB16:
 191:src/console.c **** 
 192:src/console.c **** #ifndef DM42   // No serial operations for DM42
 193:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 194:src/console.c **** /*
 195:src/console.c ****  *  Open a COM port for transmission
 196:src/console.c ****  */
 197:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 198:src/console.c **** {
 199:src/console.c **** 	return 0;
 200:src/console.c **** }
 201:src/console.c **** 
 202:src/console.c **** 
 203:src/console.c **** /*
 204:src/console.c ****  *  Close the COM port after transmission is complete
 205:src/console.c ****  */
 206:src/console.c **** extern void close_port( void )
 207:src/console.c **** {
 208:src/console.c **** }
 209:src/console.c **** 
 210:src/console.c **** 
 211:src/console.c **** /*
 212:src/console.c ****  *  Output a single byte to the serial
 213:src/console.c ****  */
 214:src/console.c **** void put_byte( unsigned char byte )
 215:src/console.c **** {
 216:src/console.c **** 	report_err(ERR_PROG_BAD);
 217:src/console.c **** }
 218:src/console.c **** 
 219:src/console.c **** 
 220:src/console.c **** /*
 221:src/console.c ****  *  Force buffer flush
 222:src/console.c ****  */
 223:src/console.c **** void flush_comm( void )
 224:src/console.c **** {
 225:src/console.c **** }
ARM GAS  /tmp/ccGwc1Zz.s 			page 33


 226:src/console.c **** 
 227:src/console.c **** #endif
 228:src/console.c **** #endif
 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Main loop
 233:src/console.c ****  */
 234:src/console.c **** #ifdef DM42
 235:src/console.c **** void start_key_timer (void);
 236:src/console.c **** int keyticks (void);
 237:src/console.c **** 
 238:src/console.c **** static int start_ticks;
 239:src/console.c **** 
 240:src/console.c **** void start_key_timer() {
 1110              		.loc 2 240 24 is_stmt 1 view -0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 241:src/console.c ****     start_ticks = get_rtc_ticks();
 1114              		.loc 2 241 5 view .LVU292
 240:src/console.c ****     start_ticks = get_rtc_ticks();
 1115              		.loc 2 240 24 is_stmt 0 view .LVU293
 1116 0000 08B5     		push	{r3, lr}
 1117              		.cfi_def_cfa_offset 8
 1118              		.cfi_offset 3, -8
 1119              		.cfi_offset 14, -4
 1120              		.loc 2 241 19 view .LVU294
 1121 0002 024B     		ldr	r3, .L104
 1122 0004 9847     		blx	r3
 1123              	.LVL84:
 1124              		.loc 2 241 17 view .LVU295
 1125 0006 024B     		ldr	r3, .L104+4
 1126 0008 1860     		str	r0, [r3]
 242:src/console.c **** }
 1127              		.loc 2 242 1 view .LVU296
 1128 000a 08BD     		pop	{r3, pc}
 1129              	.L105:
 1130              		.align	2
 1131              	.L104:
 1132 000c B9040008 		.word	134218937
 1133 0010 00000000 		.word	.LANCHOR4
 1134              		.cfi_endproc
 1135              	.LFE16:
 1137              		.section	.text.keyticks,"ax",%progbits
 1138              		.align	1
 1139              		.p2align 2,,3
 1140              		.global	keyticks
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1144              		.fpu fpv4-sp-d16
 1146              	keyticks:
 1147              	.LFB17:
 243:src/console.c **** 
 244:src/console.c **** int keyticks () {
 1148              		.loc 2 244 17 is_stmt 1 view -0
ARM GAS  /tmp/ccGwc1Zz.s 			page 34


 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 0
 1151              		@ frame_needed = 0, uses_anonymous_args = 0
 245:src/console.c ****   int i;
 1152              		.loc 2 245 3 view .LVU298
 246:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1153              		.loc 2 246 3 view .LVU299
 244:src/console.c ****   int i;
 1154              		.loc 2 244 17 is_stmt 0 view .LVU300
 1155 0000 08B5     		push	{r3, lr}
 1156              		.cfi_def_cfa_offset 8
 1157              		.cfi_offset 3, -8
 1158              		.cfi_offset 14, -4
 1159              		.loc 2 246 8 view .LVU301
 1160 0002 054B     		ldr	r3, .L108
 1161 0004 9847     		blx	r3
 1162              	.LVL85:
 247:src/console.c ****   return i >> 8;
 1163              		.loc 2 247 3 is_stmt 1 view .LVU302
 246:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1164              		.loc 2 246 24 is_stmt 0 view .LVU303
 1165 0006 054B     		ldr	r3, .L108+4
 1166 0008 1B68     		ldr	r3, [r3]
 1167 000a C01A     		subs	r0, r0, r3
 1168              	.LVL86:
 246:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1169              		.loc 2 246 38 view .LVU304
 1170 000c 00EB8000 		add	r0, r0, r0, lsl #2
 248:src/console.c **** }
 1171              		.loc 2 248 1 view .LVU305
 1172 0010 40F3D710 		sbfx	r0, r0, #7, #24
 1173 0014 08BD     		pop	{r3, pc}
 1174              	.L109:
 1175 0016 00BF     		.align	2
 1176              	.L108:
 1177 0018 B9040008 		.word	134218937
 1178 001c 00000000 		.word	.LANCHOR4
 1179              		.cfi_endproc
 1180              	.LFE17:
 1182              		.section	.text.is_paused,"ax",%progbits
 1183              		.align	1
 1184              		.p2align 2,,3
 1185              		.global	is_paused
 1186              		.syntax unified
 1187              		.thumb
 1188              		.thumb_func
 1189              		.fpu fpv4-sp-d16
 1191              	is_paused:
 1192              	.LFB18:
 249:src/console.c **** 
 250:src/console.c **** int is_paused () {
 1193              		.loc 2 250 18 is_stmt 1 view -0
 1194              		.cfi_startproc
 1195              		@ args = 0, pretend = 0, frame = 0
 1196              		@ frame_needed = 0, uses_anonymous_args = 0
 1197              		@ link register save eliminated.
 251:src/console.c ****   return sys_timer_active(1);
ARM GAS  /tmp/ccGwc1Zz.s 			page 35


 1198              		.loc 2 251 3 view .LVU307
 1199              		.loc 2 251 10 is_stmt 0 view .LVU308
 1200 0000 014B     		ldr	r3, .L111
 1201 0002 0120     		movs	r0, #1
 1202 0004 1847     		bx	r3
 1203              	.LVL87:
 1204              	.L112:
 1205 0006 00BF     		.align	2
 1206              	.L111:
 1207 0008 FD030008 		.word	134218749
 1208              		.cfi_endproc
 1209              	.LFE18:
 1211              		.section	.text.start_pause,"ax",%progbits
 1212              		.align	1
 1213              		.p2align 2,,3
 1214              		.global	start_pause
 1215              		.syntax unified
 1216              		.thumb
 1217              		.thumb_func
 1218              		.fpu fpv4-sp-d16
 1220              	start_pause:
 1221              	.LVL88:
 1222              	.LFB19:
 252:src/console.c **** }
 253:src/console.c **** 
 254:src/console.c **** void start_pause (int i) {
 1223              		.loc 2 254 26 is_stmt 1 view -0
 1224              		.cfi_startproc
 1225              		@ args = 0, pretend = 0, frame = 0
 1226              		@ frame_needed = 0, uses_anonymous_args = 0
 1227              		@ link register save eliminated.
 255:src/console.c ****   if ( i >= 0 ) {
 1228              		.loc 2 255 3 view .LVU310
 1229              		.loc 2 255 6 is_stmt 0 view .LVU311
 1230 0000 0028     		cmp	r0, #0
 1231              		.loc 2 255 6 view .LVU312
 1232 0002 02DB     		blt	.L113
 256:src/console.c ****     Pause = i;
 1233              		.loc 2 256 5 is_stmt 1 view .LVU313
 1234              		.loc 2 256 11 is_stmt 0 view .LVU314
 1235 0004 014B     		ldr	r3, .L115
 1236 0006 C0B2     		uxtb	r0, r0
 1237              	.LVL89:
 1238              		.loc 2 256 11 view .LVU315
 1239 0008 1870     		strb	r0, [r3]
 257:src/console.c ****   }
 258:src/console.c ****   return;
 1240              		.loc 2 258 3 is_stmt 1 view .LVU316
 1241              	.L113:
 259:src/console.c **** }
 1242              		.loc 2 259 1 is_stmt 0 view .LVU317
 1243 000a 7047     		bx	lr
 1244              	.L116:
 1245              		.align	2
 1246              	.L115:
 1247 000c 00000000 		.word	Pause
 1248              		.cfi_endproc
ARM GAS  /tmp/ccGwc1Zz.s 			page 36


 1249              	.LFE19:
 1251              		.section	.text.init_graphics,"ax",%progbits
 1252              		.align	1
 1253              		.p2align 2,,3
 1254              		.global	init_graphics
 1255              		.syntax unified
 1256              		.thumb
 1257              		.thumb_func
 1258              		.fpu fpv4-sp-d16
 1260              	init_graphics:
 1261              	.LFB20:
 260:src/console.c ****     
 261:src/console.c ****   
 262:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 263:src/console.c **** char print_string[22];
 264:src/console.c **** int n_p = 0;
 265:src/console.c **** 
 266:src/console.c **** void init_graphics() {
 1262              		.loc 2 266 22 is_stmt 1 view -0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 0
 1265              		@ frame_needed = 0, uses_anonymous_args = 0
 267:src/console.c ****   lcd_switchFont(fReg,3); //Font number 3
 1266              		.loc 2 267 3 view .LVU319
 266:src/console.c ****   lcd_switchFont(fReg,3); //Font number 3
 1267              		.loc 2 266 22 is_stmt 0 view .LVU320
 1268 0000 10B5     		push	{r4, lr}
 1269              		.cfi_def_cfa_offset 8
 1270              		.cfi_offset 4, -8
 1271              		.cfi_offset 14, -4
 1272              		.loc 2 267 3 view .LVU321
 1273 0002 094C     		ldr	r4, .L119
 1274 0004 094B     		ldr	r3, .L119+4
 1275 0006 A06B     		ldr	r0, [r4, #56]
 1276 0008 0321     		movs	r1, #3
 1277 000a 9847     		blx	r3
 1278              	.LVL90:
 268:src/console.c ****   fReg->newln = 0;//no newline after printing
 1279              		.loc 2 268 3 is_stmt 1 view .LVU322
 1280 000c A36B     		ldr	r3, [r4, #56]
 269:src/console.c ****   fReg->fixed = 1;//fixed width characters
 270:src/console.c ****   strcpy (print_string,spaces);
 1281              		.loc 2 270 3 is_stmt 0 view .LVU323
 1282 000e 0849     		ldr	r1, .L119+8
 1283 0010 0848     		ldr	r0, .L119+12
 268:src/console.c ****   fReg->newln = 0;//no newline after printing
 1284              		.loc 2 268 15 view .LVU324
 1285 0012 0024     		movs	r4, #0
 269:src/console.c ****   fReg->fixed = 1;//fixed width characters
 1286              		.loc 2 269 15 view .LVU325
 1287 0014 0122     		movs	r2, #1
 268:src/console.c ****   fReg->newln = 0;//no newline after printing
 1288              		.loc 2 268 15 view .LVU326
 1289 0016 1C75     		strb	r4, [r3, #20]
 269:src/console.c ****   fReg->fixed = 1;//fixed width characters
 1290              		.loc 2 269 3 is_stmt 1 view .LVU327
 269:src/console.c ****   fReg->fixed = 1;//fixed width characters
ARM GAS  /tmp/ccGwc1Zz.s 			page 37


 1291              		.loc 2 269 15 is_stmt 0 view .LVU328
 1292 0018 1A74     		strb	r2, [r3, #16]
 1293              		.loc 2 270 3 is_stmt 1 view .LVU329
 1294 001a FFF7FEFF 		bl	strcpy
 1295              	.LVL91:
 271:src/console.c ****   //  lcd_clear_buf();//clear buffer
 272:src/console.c ****   lcd_refresh();
 1296              		.loc 2 272 3 view .LVU330
 273:src/console.c **** }
 1297              		.loc 2 273 1 is_stmt 0 view .LVU331
 1298 001e BDE81040 		pop	{r4, lr}
 1299              		.cfi_restore 14
 1300              		.cfi_restore 4
 1301              		.cfi_def_cfa_offset 0
 272:src/console.c **** }
 1302              		.loc 2 272 3 view .LVU332
 1303 0022 054B     		ldr	r3, .L119+16
 1304 0024 1847     		bx	r3	@ indirect register sibling call
 1305              	.LVL92:
 1306              	.L120:
 1307 0026 00BF     		.align	2
 1308              	.L119:
 1309 0028 00200010 		.word	268443648
 1310 002c 9D020008 		.word	134218397
 1311 0030 00000000 		.word	.LANCHOR5
 1312 0034 00000000 		.word	print_string
 1313 0038 31020008 		.word	134218289
 1314              		.cfi_endproc
 1315              	.LFE20:
 1317              		.section	.text.moveto,"ax",%progbits
 1318              		.align	1
 1319              		.p2align 2,,3
 1320              		.global	moveto
 1321              		.syntax unified
 1322              		.thumb
 1323              		.thumb_func
 1324              		.fpu fpv4-sp-d16
 1326              	moveto:
 1327              	.LVL93:
 1328              	.LFB21:
 274:src/console.c **** 
 275:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 1329              		.loc 2 275 30 is_stmt 1 view -0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 0
 1332              		@ frame_needed = 0, uses_anonymous_args = 0
 276:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1333              		.loc 2 276 3 view .LVU334
 275:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1334              		.loc 2 275 30 is_stmt 0 view .LVU335
 1335 0000 70B5     		push	{r4, r5, r6, lr}
 1336              		.cfi_def_cfa_offset 16
 1337              		.cfi_offset 4, -16
 1338              		.cfi_offset 5, -12
 1339              		.cfi_offset 6, -8
 1340              		.cfi_offset 14, -4
 1341              		.loc 2 276 3 view .LVU336
ARM GAS  /tmp/ccGwc1Zz.s 			page 38


 1342 0002 0A4D     		ldr	r5, .L123
 1343 0004 0A4B     		ldr	r3, .L123+4
 275:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1344              		.loc 2 275 30 view .LVU337
 1345 0006 0246     		mov	r2, r0
 1346 0008 0C46     		mov	r4, r1
 1347              		.loc 2 276 3 view .LVU338
 1348 000a A86B     		ldr	r0, [r5, #56]
 1349              	.LVL94:
 1350              		.loc 2 276 3 view .LVU339
 1351 000c 511E     		subs	r1, r2, #1
 1352              	.LVL95:
 1353              		.loc 2 276 3 view .LVU340
 1354 000e 9847     		blx	r3
 1355              	.LVL96:
 277:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1356              		.loc 2 277 3 is_stmt 1 view .LVU341
 1357 0010 A86B     		ldr	r0, [r5, #56]
 1358 0012 084B     		ldr	r3, .L123+8
 1359              		.loc 2 277 33 is_stmt 0 view .LVU342
 1360 0014 0168     		ldr	r1, [r0]
 1361              		.loc 2 277 3 view .LVU343
 1362 0016 B0F90620 		ldrsh	r2, [r0, #6]
 1363              		.loc 2 277 33 view .LVU344
 1364 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 1365              		.loc 2 277 43 view .LVU345
 1366 001c 013C     		subs	r4, r4, #1
 1367              	.LVL97:
 1368              		.loc 2 277 40 view .LVU346
 1369 001e 04FB01F1 		mul	r1, r4, r1
 1370              		.loc 2 277 3 view .LVU347
 1371 0022 1431     		adds	r1, r1, #20
 278:src/console.c **** }
 1372              		.loc 2 278 1 view .LVU348
 1373 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1374              		.cfi_restore 14
 1375              		.cfi_restore 6
 1376              		.cfi_restore 5
 1377              		.cfi_restore 4
 1378              		.cfi_def_cfa_offset 0
 1379              	.LVL98:
 277:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1380              		.loc 2 277 3 view .LVU349
 1381 0028 1847     		bx	r3	@ indirect register sibling call
 1382              	.LVL99:
 1383              	.L124:
 1384 002a 00BF     		.align	2
 1385              	.L123:
 1386 002c 00200010 		.word	268443648
 1387 0030 69020008 		.word	134218345
 1388 0034 6D020008 		.word	134218349
 1389              		.cfi_endproc
 1390              	.LFE21:
 1392              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 1393              		.align	2
 1394              	.LC0:
 1395 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
ARM GAS  /tmp/ccGwc1Zz.s 			page 39


 1395      673A2025 
 1395      34692C25 
 1395      346900
 1396              		.section	.text.print_debug,"ax",%progbits
 1397              		.align	1
 1398              		.p2align 2,,3
 1399              		.global	print_debug
 1400              		.syntax unified
 1401              		.thumb
 1402              		.thumb_func
 1403              		.fpu fpv4-sp-d16
 1405              	print_debug:
 1406              	.LVL100:
 1407              	.LFB22:
 279:src/console.c **** 
 280:src/console.c **** //print_debug(is_dot(RPN) ? 'X' : 'x');
 281:src/console.c **** 
 282:src/console.c **** //void print_debug (char i) {
 283:src/console.c **** //  if (n_p < 21) {
 284:src/console.c **** //    print_string[n_p] = i;
 285:src/console.c **** //    n_p++;
 286:src/console.c **** //  }
 287:src/console.c **** //}
 288:src/console.c **** 
 289:src/console.c **** void print_debug (int i, int j) {
 1408              		.loc 2 289 33 is_stmt 1 view -0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 8
 1411              		@ frame_needed = 0, uses_anonymous_args = 0
 290:src/console.c ****   strcpy( print_string, spaces );
 1412              		.loc 2 290 3 view .LVU351
 289:src/console.c ****   strcpy( print_string, spaces );
 1413              		.loc 2 289 33 is_stmt 0 view .LVU352
 1414 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1415              		.cfi_def_cfa_offset 24
 1416              		.cfi_offset 4, -24
 1417              		.cfi_offset 5, -20
 1418              		.cfi_offset 6, -16
 1419              		.cfi_offset 7, -12
 1420              		.cfi_offset 8, -8
 1421              		.cfi_offset 14, -4
 1422              		.loc 2 290 3 view .LVU353
 1423 0004 174C     		ldr	r4, .L127
 1424 0006 184F     		ldr	r7, .L127+4
 291:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 292:src/console.c ****   moveto (3, 1);
 293:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1425              		.loc 2 293 3 view .LVU354
 1426 0008 184E     		ldr	r6, .L127+8
 1427 000a 194D     		ldr	r5, .L127+12
 294:src/console.c ****   lcd_refresh();
 1428              		.loc 2 294 3 view .LVU355
 1429 000c DFF86C80 		ldr	r8, .L127+24
 289:src/console.c ****   strcpy( print_string, spaces );
 1430              		.loc 2 289 33 view .LVU356
 1431 0010 82B0     		sub	sp, sp, #8
 1432              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccGwc1Zz.s 			page 40


 289:src/console.c ****   strcpy( print_string, spaces );
 1433              		.loc 2 289 33 view .LVU357
 1434 0012 0190     		str	r0, [sp, #4]
 1435 0014 0091     		str	r1, [sp]
 290:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1436              		.loc 2 290 3 view .LVU358
 1437 0016 2046     		mov	r0, r4
 1438              	.LVL101:
 290:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1439              		.loc 2 290 3 view .LVU359
 1440 0018 3946     		mov	r1, r7
 1441              	.LVL102:
 290:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1442              		.loc 2 290 3 view .LVU360
 1443 001a FFF7FEFF 		bl	strcpy
 1444              	.LVL103:
 291:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1445              		.loc 2 291 3 is_stmt 1 view .LVU361
 1446 001e DDE90032 		ldrd	r3, r2, [sp]
 1447 0022 1449     		ldr	r1, .L127+16
 1448 0024 2046     		mov	r0, r4
 1449 0026 FFF7FEFF 		bl	sprintf
 1450              	.LVL104:
 292:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1451              		.loc 2 292 3 view .LVU362
 1452 002a 0121     		movs	r1, #1
 1453 002c 0320     		movs	r0, #3
 1454 002e FFF7FEFF 		bl	moveto
 1455              	.LVL105:
 293:src/console.c ****   lcd_refresh();
 1456              		.loc 2 293 3 view .LVU363
 1457 0032 2146     		mov	r1, r4
 1458 0034 B06B     		ldr	r0, [r6, #56]
 1459 0036 A847     		blx	r5
 1460              	.LVL106:
 1461              		.loc 2 294 3 view .LVU364
 1462 0038 C047     		blx	r8
 1463              	.LVL107:
 295:src/console.c ****   sys_delay (2500);
 1464              		.loc 2 295 3 view .LVU365
 1465 003a 0F4B     		ldr	r3, .L127+20
 1466 003c 40F6C410 		movw	r0, #2500
 1467 0040 9847     		blx	r3
 1468              	.LVL108:
 296:src/console.c ****   /* wait_for_key_press(); */
 297:src/console.c ****   //  key_pop_all();
 298:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 299:src/console.c ****   // key_pop_all();
 300:src/console.c ****   strcpy( print_string, spaces );
 1469              		.loc 2 300 3 view .LVU366
 1470 0042 3946     		mov	r1, r7
 1471 0044 2046     		mov	r0, r4
 1472 0046 FFF7FEFF 		bl	strcpy
 1473              	.LVL109:
 301:src/console.c ****   moveto (3, 1);
 1474              		.loc 2 301 3 view .LVU367
 1475 004a 0121     		movs	r1, #1
ARM GAS  /tmp/ccGwc1Zz.s 			page 41


 1476 004c 0320     		movs	r0, #3
 1477 004e FFF7FEFF 		bl	moveto
 1478              	.LVL110:
 302:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1479              		.loc 2 302 3 view .LVU368
 1480 0052 B06B     		ldr	r0, [r6, #56]
 1481 0054 2146     		mov	r1, r4
 1482 0056 A847     		blx	r5
 1483              	.LVL111:
 303:src/console.c ****   lcd_refresh();
 1484              		.loc 2 303 3 view .LVU369
 1485 0058 4346     		mov	r3, r8
 304:src/console.c ****   // while (key_empty()<=0);; // wait for release
 305:src/console.c ****   // key_pop_all();
 306:src/console.c **** }
 1486              		.loc 2 306 1 is_stmt 0 view .LVU370
 1487 005a 02B0     		add	sp, sp, #8
 1488              		.cfi_def_cfa_offset 24
 1489              	.LVL112:
 1490              		.loc 2 306 1 view .LVU371
 1491              		@ sp needed
 1492 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1493              		.cfi_restore 14
 1494              		.cfi_restore 8
 1495              		.cfi_restore 7
 1496              		.cfi_restore 6
 1497              		.cfi_restore 5
 1498              		.cfi_restore 4
 1499              		.cfi_def_cfa_offset 0
 1500              	.LVL113:
 303:src/console.c ****   lcd_refresh();
 1501              		.loc 2 303 3 view .LVU372
 1502 0060 1847     		bx	r3	@ indirect register sibling call
 1503              	.LVL114:
 1504              	.L128:
 1505 0062 00BF     		.align	2
 1506              	.L127:
 1507 0064 00000000 		.word	print_string
 1508 0068 00000000 		.word	.LANCHOR5
 1509 006c 00200010 		.word	268443648
 1510 0070 B1020008 		.word	134218417
 1511 0074 00000000 		.word	.LC0
 1512 0078 05040008 		.word	134218757
 1513 007c 31020008 		.word	134218289
 1514              		.cfi_endproc
 1515              	.LFE22:
 1517              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 1518              		.align	2
 1519              	.LC1:
 1520 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 1520      692C2531 
 1520      337300
 1521              		.section	.text.print_debug2,"ax",%progbits
 1522              		.align	1
 1523              		.p2align 2,,3
 1524              		.global	print_debug2
 1525              		.syntax unified
ARM GAS  /tmp/ccGwc1Zz.s 			page 42


 1526              		.thumb
 1527              		.thumb_func
 1528              		.fpu fpv4-sp-d16
 1530              	print_debug2:
 1531              	.LVL115:
 1532              	.LFB23:
 307:src/console.c **** 
 308:src/console.c **** void print_debug2 (int i, char* j) {
 1533              		.loc 2 308 36 is_stmt 1 view -0
 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 8
 1536              		@ frame_needed = 0, uses_anonymous_args = 0
 309:src/console.c ****   strcpy( print_string, spaces );
 1537              		.loc 2 309 3 view .LVU374
 308:src/console.c ****   strcpy( print_string, spaces );
 1538              		.loc 2 308 36 is_stmt 0 view .LVU375
 1539 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1540              		.cfi_def_cfa_offset 24
 1541              		.cfi_offset 4, -24
 1542              		.cfi_offset 5, -20
 1543              		.cfi_offset 6, -16
 1544              		.cfi_offset 7, -12
 1545              		.cfi_offset 8, -8
 1546              		.cfi_offset 14, -4
 1547              		.loc 2 309 3 view .LVU376
 1548 0004 174C     		ldr	r4, .L131
 1549 0006 184F     		ldr	r7, .L131+4
 310:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 311:src/console.c ****   moveto (3, 1);
 312:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1550              		.loc 2 312 3 view .LVU377
 1551 0008 184E     		ldr	r6, .L131+8
 1552 000a 194D     		ldr	r5, .L131+12
 313:src/console.c ****   lcd_refresh();
 1553              		.loc 2 313 3 view .LVU378
 1554 000c DFF86C80 		ldr	r8, .L131+24
 308:src/console.c ****   strcpy( print_string, spaces );
 1555              		.loc 2 308 36 view .LVU379
 1556 0010 82B0     		sub	sp, sp, #8
 1557              		.cfi_def_cfa_offset 32
 308:src/console.c ****   strcpy( print_string, spaces );
 1558              		.loc 2 308 36 view .LVU380
 1559 0012 0190     		str	r0, [sp, #4]
 1560 0014 0091     		str	r1, [sp]
 309:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1561              		.loc 2 309 3 view .LVU381
 1562 0016 2046     		mov	r0, r4
 1563              	.LVL116:
 309:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1564              		.loc 2 309 3 view .LVU382
 1565 0018 3946     		mov	r1, r7
 1566              	.LVL117:
 309:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1567              		.loc 2 309 3 view .LVU383
 1568 001a FFF7FEFF 		bl	strcpy
 1569              	.LVL118:
 310:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
ARM GAS  /tmp/ccGwc1Zz.s 			page 43


 1570              		.loc 2 310 3 is_stmt 1 view .LVU384
 1571 001e DDE90032 		ldrd	r3, r2, [sp]
 1572 0022 1449     		ldr	r1, .L131+16
 1573 0024 2046     		mov	r0, r4
 1574 0026 FFF7FEFF 		bl	sprintf
 1575              	.LVL119:
 311:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1576              		.loc 2 311 3 view .LVU385
 1577 002a 0121     		movs	r1, #1
 1578 002c 0320     		movs	r0, #3
 1579 002e FFF7FEFF 		bl	moveto
 1580              	.LVL120:
 312:src/console.c ****   lcd_refresh();
 1581              		.loc 2 312 3 view .LVU386
 1582 0032 2146     		mov	r1, r4
 1583 0034 B06B     		ldr	r0, [r6, #56]
 1584 0036 A847     		blx	r5
 1585              	.LVL121:
 1586              		.loc 2 313 3 view .LVU387
 1587 0038 C047     		blx	r8
 1588              	.LVL122:
 314:src/console.c ****   sys_delay (2500);
 1589              		.loc 2 314 3 view .LVU388
 1590 003a 0F4B     		ldr	r3, .L131+20
 1591 003c 40F6C410 		movw	r0, #2500
 1592 0040 9847     		blx	r3
 1593              	.LVL123:
 315:src/console.c ****   /* wait_for_key_press(); */
 316:src/console.c ****   //  key_pop_all();
 317:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 318:src/console.c ****   // key_pop_all();
 319:src/console.c ****   strcpy( print_string, spaces );
 1594              		.loc 2 319 3 view .LVU389
 1595 0042 3946     		mov	r1, r7
 1596 0044 2046     		mov	r0, r4
 1597 0046 FFF7FEFF 		bl	strcpy
 1598              	.LVL124:
 320:src/console.c ****   moveto (3, 1);
 1599              		.loc 2 320 3 view .LVU390
 1600 004a 0121     		movs	r1, #1
 1601 004c 0320     		movs	r0, #3
 1602 004e FFF7FEFF 		bl	moveto
 1603              	.LVL125:
 321:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1604              		.loc 2 321 3 view .LVU391
 1605 0052 B06B     		ldr	r0, [r6, #56]
 1606 0054 2146     		mov	r1, r4
 1607 0056 A847     		blx	r5
 1608              	.LVL126:
 322:src/console.c ****   lcd_refresh();
 1609              		.loc 2 322 3 view .LVU392
 1610 0058 4346     		mov	r3, r8
 323:src/console.c ****   // while (key_empty()<=0);; // wait for release
 324:src/console.c ****   // key_pop_all();
 325:src/console.c **** }
 1611              		.loc 2 325 1 is_stmt 0 view .LVU393
 1612 005a 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccGwc1Zz.s 			page 44


 1613              		.cfi_def_cfa_offset 24
 1614              	.LVL127:
 1615              		.loc 2 325 1 view .LVU394
 1616              		@ sp needed
 1617 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1618              		.cfi_restore 14
 1619              		.cfi_restore 8
 1620              		.cfi_restore 7
 1621              		.cfi_restore 6
 1622              		.cfi_restore 5
 1623              		.cfi_restore 4
 1624              		.cfi_def_cfa_offset 0
 1625              	.LVL128:
 322:src/console.c ****   lcd_refresh();
 1626              		.loc 2 322 3 view .LVU395
 1627 0060 1847     		bx	r3	@ indirect register sibling call
 1628              	.LVL129:
 1629              	.L132:
 1630 0062 00BF     		.align	2
 1631              	.L131:
 1632 0064 00000000 		.word	print_string
 1633 0068 00000000 		.word	.LANCHOR5
 1634 006c 00200010 		.word	268443648
 1635 0070 B1020008 		.word	134218417
 1636 0074 00000000 		.word	.LC1
 1637 0078 05040008 		.word	134218757
 1638 007c 31020008 		.word	134218289
 1639              		.cfi_endproc
 1640              	.LFE23:
 1642              		.section	.text.do_now,"ax",%progbits
 1643              		.align	1
 1644              		.p2align 2,,3
 1645              		.global	do_now
 1646              		.syntax unified
 1647              		.thumb
 1648              		.thumb_func
 1649              		.fpu fpv4-sp-d16
 1651              	do_now:
 1652              	.LVL130:
 1653              	.LFB24:
 326:src/console.c **** 
 327:src/console.c **** void do_now (int key, int shift) {
 1654              		.loc 2 327 34 is_stmt 1 view -0
 1655              		.cfi_startproc
 1656              		@ args = 0, pretend = 0, frame = 8
 1657              		@ frame_needed = 0, uses_anonymous_args = 0
 1658              		@ link register save eliminated.
 328:src/console.c ****   struct _ndmap temp;
 1659              		.loc 2 328 3 view .LVU397
 329:src/console.c ****   temp.key_34s = key;
 1660              		.loc 2 329 3 view .LVU398
 327:src/console.c ****   struct _ndmap temp;
 1661              		.loc 2 327 34 is_stmt 0 view .LVU399
 1662 0000 82B0     		sub	sp, sp, #8
 1663              		.cfi_def_cfa_offset 8
 330:src/console.c ****   temp.shift = shift;
 331:src/console.c ****   process_keycode_with_shift (temp);
ARM GAS  /tmp/ccGwc1Zz.s 			page 45


 1664              		.loc 2 331 3 view .LVU400
 1665 0002 02AB     		add	r3, sp, #8
 329:src/console.c ****   temp.shift = shift;
 1666              		.loc 2 329 16 view .LVU401
 1667 0004 8DF80000 		strb	r0, [sp]
 330:src/console.c ****   temp.shift = shift;
 1668              		.loc 2 330 3 is_stmt 1 view .LVU402
 330:src/console.c ****   temp.shift = shift;
 1669              		.loc 2 330 14 is_stmt 0 view .LVU403
 1670 0008 0191     		str	r1, [sp, #4]
 1671              		.loc 2 331 3 is_stmt 1 view .LVU404
 1672 000a 13E90300 		ldmdb	r3, {r0, r1}
 1673              	.LVL131:
 332:src/console.c **** }
 1674              		.loc 2 332 1 is_stmt 0 view .LVU405
 1675 000e 02B0     		add	sp, sp, #8
 1676              		.cfi_def_cfa_offset 0
 1677              		@ sp needed
 331:src/console.c **** }
 1678              		.loc 2 331 3 view .LVU406
 1679 0010 FFF7FEBF 		b	process_keycode_with_shift
 1680              	.LVL132:
 331:src/console.c **** }
 1681              		.loc 2 331 3 view .LVU407
 1682              		.cfi_endproc
 1683              	.LFE24:
 1685              		.section	.text.do_multi,"ax",%progbits
 1686              		.align	1
 1687              		.p2align 2,,3
 1688              		.global	do_multi
 1689              		.syntax unified
 1690              		.thumb
 1691              		.thumb_func
 1692              		.fpu fpv4-sp-d16
 1694              	do_multi:
 1695              	.LVL133:
 1696              	.LFB25:
 333:src/console.c **** 
 334:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 1697              		.loc 2 334 42 is_stmt 1 view -0
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 16
 1700              		@ frame_needed = 0, uses_anonymous_args = 0
 1701              		.loc 2 334 42 is_stmt 0 view .LVU409
 1702 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1703              		.cfi_def_cfa_offset 24
 1704              		.cfi_offset 4, -24
 1705              		.cfi_offset 5, -20
 1706              		.cfi_offset 6, -16
 1707              		.cfi_offset 7, -12
 1708              		.cfi_offset 8, -8
 1709              		.cfi_offset 14, -4
 1710 0004 84B0     		sub	sp, sp, #16
 1711              		.cfi_def_cfa_offset 40
 1712              	.LVL134:
 335:src/console.c ****   switch(r.shift) {
 1713              		.loc 2 335 3 is_stmt 1 view .LVU410
ARM GAS  /tmp/ccGwc1Zz.s 			page 46


 334:src/console.c ****   switch(r.shift) {
 1714              		.loc 2 334 42 is_stmt 0 view .LVU411
 1715 0006 6C46     		mov	r4, sp
 1716 0008 531E     		subs	r3, r2, #1
 1717 000a 84E80600 		stm	r4, {r1, r2}
 1718              	.LVL135:
 334:src/console.c ****   switch(r.shift) {
 1719              		.loc 2 334 42 view .LVU412
 1720 000e 0546     		mov	r5, r0
 1721 0010 092B     		cmp	r3, #9
 1722 0012 7CD8     		bhi	.L136
 1723 0014 DFE803F0 		tbb	[pc, r3]
 1724              	.L138:
 1725 0018 18       		.byte	(.L146-.L138)/2
 1726 0019 36       		.byte	(.L145-.L138)/2
 1727 001a 40       		.byte	(.L144-.L138)/2
 1728 001b 4A       		.byte	(.L143-.L138)/2
 1729 001c 54       		.byte	(.L142-.L138)/2
 1730 001d 5E       		.byte	(.L141-.L138)/2
 1731 001e 68       		.byte	(.L140-.L138)/2
 1732 001f 72       		.byte	(.L139-.L138)/2
 1733 0020 7B       		.byte	(.L136-.L138)/2
 1734 0021 05       		.byte	(.L137-.L138)/2
 1735              		.p2align 1
 1736              	.L137:
 336:src/console.c ****   case LASTX: // Last x via RCL L
 337:src/console.c ****     do_now (K11, 0); // RCL
 338:src/console.c ****     do_now (K_RELEASE,0); // release
 339:src/console.c ****     do_now (K15,0); // TAN key
 340:src/console.c ****     r.key_34s = K_RELEASE;
 341:src/console.c ****     r.shift = 0; // set up for release;
 342:src/console.c ****     break;
 343:src/console.c ****   case ONSTO: // flash_backup()
 344:src/console.c ****     flash_backup(OP_SAVE);
 345:src/console.c ****     r = no_key;
 346:src/console.c ****     break;
 347:src/console.c ****   case ONRCL: // flash_restore()
 348:src/console.c ****     flash_restore(OP_LOAD);
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case WRLIB: // save library file
 352:src/console.c ****     save_lib_file(1);
 353:src/console.c ****     r = no_key;
 354:src/console.c ****     break;
 355:src/console.c ****   case LLIB: // load library file
 356:src/console.c ****     load_lib_file(1);
 357:src/console.c ****     r = no_key;
 358:src/console.c ****     break;
 359:src/console.c ****   case WRTST: // save state file
 360:src/console.c ****     save_ram_file(1);
 361:src/console.c ****     r = no_key;
 362:src/console.c ****     break;
 363:src/console.c ****   case LDST:
 364:src/console.c ****     load_ram_file(1);
 365:src/console.c ****     r = no_key;
 366:src/console.c ****     break;
 367:src/console.c ****   case LDPRG:
ARM GAS  /tmp/ccGwc1Zz.s 			page 47


 368:src/console.c ****     load_prog_file();
 369:src/console.c ****     r = no_key;
 370:src/console.c ****     break;
 371:src/console.c ****   case SVPRG:
 372:src/console.c ****     save_prog_file();
 1737              		.loc 2 372 5 is_stmt 1 view .LVU413
 1738 0022 FFF7FEFF 		bl	save_prog_file
 1739              	.LVL136:
 373:src/console.c ****     r = no_key;
 1740              		.loc 2 373 5 view .LVU414
 1741              		.loc 2 373 7 is_stmt 0 view .LVU415
 1742 0026 3D4B     		ldr	r3, .L149
 1743 0028 93E80300 		ldm	r3, {r0, r1}
 1744 002c 84E80300 		stm	r4, {r0, r1}
 1745 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1746              	.LVL137:
 374:src/console.c ****     break;
 1747              		.loc 2 374 5 is_stmt 1 view .LVU416
 1748              	.L147:
 375:src/console.c ****   default:
 376:src/console.c ****     r = no_key;
 377:src/console.c ****   }
 378:src/console.c ****   return r;
 1749              		.loc 2 378 3 view .LVU417
 1750              		.loc 2 378 10 is_stmt 0 view .LVU418
 1751 0032 8DF80030 		strb	r3, [sp]
 1752 0036 0191     		str	r1, [sp, #4]
 1753 0038 94E80300 		ldm	r4, {r0, r1}
 1754              	.LVL138:
 1755              		.loc 2 378 10 view .LVU419
 1756 003c 85E80300 		stm	r5, {r0, r1}
 379:src/console.c **** }
 1757              		.loc 2 379 1 view .LVU420
 1758 0040 2846     		mov	r0, r5
 1759 0042 04B0     		add	sp, sp, #16
 1760              		.cfi_remember_state
 1761              		.cfi_def_cfa_offset 24
 1762              		@ sp needed
 1763 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1764              	.LVL139:
 1765              	.L146:
 1766              		.cfi_restore_state
 337:src/console.c ****     do_now (K_RELEASE,0); // release
 1767              		.loc 2 337 5 is_stmt 1 view .LVU421
 1768              	.LBB75:
 1769              	.LBI75:
 327:src/console.c ****   struct _ndmap temp;
 1770              		.loc 2 327 6 view .LVU422
 1771              	.LBB76:
 328:src/console.c ****   temp.key_34s = key;
 1772              		.loc 2 328 3 view .LVU423
 329:src/console.c ****   temp.shift = shift;
 1773              		.loc 2 329 3 view .LVU424
 329:src/console.c ****   temp.shift = shift;
 1774              		.loc 2 329 16 is_stmt 0 view .LVU425
 1775 0048 0723     		movs	r3, #7
 330:src/console.c ****   process_keycode_with_shift (temp);
ARM GAS  /tmp/ccGwc1Zz.s 			page 48


 1776              		.loc 2 330 14 view .LVU426
 1777 004a 0026     		movs	r6, #0
 329:src/console.c ****   temp.shift = shift;
 1778              		.loc 2 329 16 view .LVU427
 1779 004c 8DF80830 		strb	r3, [sp, #8]
 330:src/console.c ****   process_keycode_with_shift (temp);
 1780              		.loc 2 330 3 is_stmt 1 view .LVU428
 331:src/console.c **** }
 1781              		.loc 2 331 3 is_stmt 0 view .LVU429
 1782 0050 0DF10808 		add	r8, sp, #8
 330:src/console.c ****   process_keycode_with_shift (temp);
 1783              		.loc 2 330 14 view .LVU430
 1784 0054 0396     		str	r6, [sp, #12]
 331:src/console.c **** }
 1785              		.loc 2 331 3 is_stmt 1 view .LVU431
 1786 0056 98E80300 		ldm	r8, {r0, r1}
 1787              	.LVL140:
 331:src/console.c **** }
 1788              		.loc 2 331 3 is_stmt 0 view .LVU432
 1789              	.LBE76:
 1790              	.LBE75:
 1791              	.LBB78:
 1792              	.LBB79:
 329:src/console.c ****   temp.shift = shift;
 1793              		.loc 2 329 16 view .LVU433
 1794 005a 6327     		movs	r7, #99
 1795              	.LBE79:
 1796              	.LBE78:
 1797              	.LBB81:
 1798              	.LBB77:
 331:src/console.c **** }
 1799              		.loc 2 331 3 view .LVU434
 1800 005c FFF7FEFF 		bl	process_keycode_with_shift
 1801              	.LVL141:
 331:src/console.c **** }
 1802              		.loc 2 331 3 view .LVU435
 1803              	.LBE77:
 1804              	.LBE81:
 338:src/console.c ****     do_now (K15,0); // TAN key
 1805              		.loc 2 338 5 is_stmt 1 view .LVU436
 1806              	.LBB82:
 1807              	.LBI78:
 327:src/console.c ****   struct _ndmap temp;
 1808              		.loc 2 327 6 view .LVU437
 1809              	.LBB80:
 328:src/console.c ****   temp.key_34s = key;
 1810              		.loc 2 328 3 view .LVU438
 329:src/console.c ****   temp.shift = shift;
 1811              		.loc 2 329 3 view .LVU439
 330:src/console.c ****   process_keycode_with_shift (temp);
 1812              		.loc 2 330 14 is_stmt 0 view .LVU440
 1813 0060 0396     		str	r6, [sp, #12]
 329:src/console.c ****   temp.shift = shift;
 1814              		.loc 2 329 16 view .LVU441
 1815 0062 8DF80870 		strb	r7, [sp, #8]
 330:src/console.c ****   process_keycode_with_shift (temp);
 1816              		.loc 2 330 3 is_stmt 1 view .LVU442
ARM GAS  /tmp/ccGwc1Zz.s 			page 49


 331:src/console.c **** }
 1817              		.loc 2 331 3 view .LVU443
 1818 0066 98E80300 		ldm	r8, {r0, r1}
 1819 006a FFF7FEFF 		bl	process_keycode_with_shift
 1820              	.LVL142:
 331:src/console.c **** }
 1821              		.loc 2 331 3 is_stmt 0 view .LVU444
 1822              	.LBE80:
 1823              	.LBE82:
 339:src/console.c ****     r.key_34s = K_RELEASE;
 1824              		.loc 2 339 5 is_stmt 1 view .LVU445
 1825              	.LBB83:
 1826              	.LBI83:
 327:src/console.c ****   struct _ndmap temp;
 1827              		.loc 2 327 6 view .LVU446
 1828              	.LBB84:
 328:src/console.c ****   temp.key_34s = key;
 1829              		.loc 2 328 3 view .LVU447
 329:src/console.c ****   temp.shift = shift;
 1830              		.loc 2 329 3 view .LVU448
 329:src/console.c ****   temp.shift = shift;
 1831              		.loc 2 329 16 is_stmt 0 view .LVU449
 1832 006e 0B23     		movs	r3, #11
 1833 0070 8DF80830 		strb	r3, [sp, #8]
 330:src/console.c ****   process_keycode_with_shift (temp);
 1834              		.loc 2 330 3 is_stmt 1 view .LVU450
 331:src/console.c **** }
 1835              		.loc 2 331 3 view .LVU451
 330:src/console.c ****   process_keycode_with_shift (temp);
 1836              		.loc 2 330 14 is_stmt 0 view .LVU452
 1837 0074 0396     		str	r6, [sp, #12]
 331:src/console.c **** }
 1838              		.loc 2 331 3 view .LVU453
 1839 0076 98E80300 		ldm	r8, {r0, r1}
 1840 007a FFF7FEFF 		bl	process_keycode_with_shift
 1841              	.LVL143:
 331:src/console.c **** }
 1842              		.loc 2 331 3 view .LVU454
 1843              	.LBE84:
 1844              	.LBE83:
 340:src/console.c ****     r.shift = 0; // set up for release;
 1845              		.loc 2 340 5 is_stmt 1 view .LVU455
 341:src/console.c ****     break;
 1846              		.loc 2 341 5 view .LVU456
 342:src/console.c ****   case ONSTO: // flash_backup()
 1847              		.loc 2 342 5 view .LVU457
 341:src/console.c ****     break;
 1848              		.loc 2 341 13 is_stmt 0 view .LVU458
 1849 007e 3146     		mov	r1, r6
 340:src/console.c ****     r.shift = 0; // set up for release;
 1850              		.loc 2 340 15 view .LVU459
 1851 0080 3B46     		mov	r3, r7
 342:src/console.c ****   case ONSTO: // flash_backup()
 1852              		.loc 2 342 5 view .LVU460
 1853 0082 D6E7     		b	.L147
 1854              	.LVL144:
 1855              	.L145:
ARM GAS  /tmp/ccGwc1Zz.s 			page 50


 344:src/console.c ****     r = no_key;
 1856              		.loc 2 344 5 is_stmt 1 view .LVU461
 1857 0084 AD20     		movs	r0, #173
 1858              	.LVL145:
 344:src/console.c ****     r = no_key;
 1859              		.loc 2 344 5 is_stmt 0 view .LVU462
 1860 0086 FFF7FEFF 		bl	flash_backup
 1861              	.LVL146:
 345:src/console.c ****     break;
 1862              		.loc 2 345 5 is_stmt 1 view .LVU463
 345:src/console.c ****     break;
 1863              		.loc 2 345 7 is_stmt 0 view .LVU464
 1864 008a 244B     		ldr	r3, .L149
 1865 008c 93E80300 		ldm	r3, {r0, r1}
 1866 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1867              	.LVL147:
 346:src/console.c ****   case ONRCL: // flash_restore()
 1868              		.loc 2 346 5 is_stmt 1 view .LVU465
 345:src/console.c ****     break;
 1869              		.loc 2 345 7 is_stmt 0 view .LVU466
 1870 0092 84E80300 		stm	r4, {r0, r1}
 346:src/console.c ****   case ONRCL: // flash_restore()
 1871              		.loc 2 346 5 view .LVU467
 1872 0096 CCE7     		b	.L147
 1873              	.LVL148:
 1874              	.L144:
 348:src/console.c ****     r = no_key;
 1875              		.loc 2 348 5 is_stmt 1 view .LVU468
 1876 0098 AE20     		movs	r0, #174
 1877              	.LVL149:
 348:src/console.c ****     r = no_key;
 1878              		.loc 2 348 5 is_stmt 0 view .LVU469
 1879 009a FFF7FEFF 		bl	flash_restore
 1880              	.LVL150:
 349:src/console.c ****     break;
 1881              		.loc 2 349 5 is_stmt 1 view .LVU470
 349:src/console.c ****     break;
 1882              		.loc 2 349 7 is_stmt 0 view .LVU471
 1883 009e 1F4B     		ldr	r3, .L149
 1884 00a0 93E80300 		ldm	r3, {r0, r1}
 1885 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1886              	.LVL151:
 350:src/console.c ****   case WRLIB: // save library file
 1887              		.loc 2 350 5 is_stmt 1 view .LVU472
 349:src/console.c ****     break;
 1888              		.loc 2 349 7 is_stmt 0 view .LVU473
 1889 00a6 84E80300 		stm	r4, {r0, r1}
 350:src/console.c ****   case WRLIB: // save library file
 1890              		.loc 2 350 5 view .LVU474
 1891 00aa C2E7     		b	.L147
 1892              	.LVL152:
 1893              	.L143:
 352:src/console.c ****     r = no_key;
 1894              		.loc 2 352 5 is_stmt 1 view .LVU475
 1895 00ac 0120     		movs	r0, #1
 1896              	.LVL153:
 352:src/console.c ****     r = no_key;
ARM GAS  /tmp/ccGwc1Zz.s 			page 51


 1897              		.loc 2 352 5 is_stmt 0 view .LVU476
 1898 00ae FFF7FEFF 		bl	save_lib_file
 1899              	.LVL154:
 353:src/console.c ****     break;
 1900              		.loc 2 353 5 is_stmt 1 view .LVU477
 353:src/console.c ****     break;
 1901              		.loc 2 353 7 is_stmt 0 view .LVU478
 1902 00b2 1A4B     		ldr	r3, .L149
 1903 00b4 93E80300 		ldm	r3, {r0, r1}
 1904 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1905              	.LVL155:
 354:src/console.c ****   case LLIB: // load library file
 1906              		.loc 2 354 5 is_stmt 1 view .LVU479
 353:src/console.c ****     break;
 1907              		.loc 2 353 7 is_stmt 0 view .LVU480
 1908 00ba 84E80300 		stm	r4, {r0, r1}
 354:src/console.c ****   case LLIB: // load library file
 1909              		.loc 2 354 5 view .LVU481
 1910 00be B8E7     		b	.L147
 1911              	.LVL156:
 1912              	.L142:
 356:src/console.c ****     r = no_key;
 1913              		.loc 2 356 5 is_stmt 1 view .LVU482
 1914 00c0 0120     		movs	r0, #1
 1915              	.LVL157:
 356:src/console.c ****     r = no_key;
 1916              		.loc 2 356 5 is_stmt 0 view .LVU483
 1917 00c2 FFF7FEFF 		bl	load_lib_file
 1918              	.LVL158:
 357:src/console.c ****     break;
 1919              		.loc 2 357 5 is_stmt 1 view .LVU484
 357:src/console.c ****     break;
 1920              		.loc 2 357 7 is_stmt 0 view .LVU485
 1921 00c6 154B     		ldr	r3, .L149
 1922 00c8 93E80300 		ldm	r3, {r0, r1}
 1923 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1924              	.LVL159:
 358:src/console.c ****   case WRTST: // save state file
 1925              		.loc 2 358 5 is_stmt 1 view .LVU486
 357:src/console.c ****     break;
 1926              		.loc 2 357 7 is_stmt 0 view .LVU487
 1927 00ce 84E80300 		stm	r4, {r0, r1}
 358:src/console.c ****   case WRTST: // save state file
 1928              		.loc 2 358 5 view .LVU488
 1929 00d2 AEE7     		b	.L147
 1930              	.LVL160:
 1931              	.L141:
 360:src/console.c ****     r = no_key;
 1932              		.loc 2 360 5 is_stmt 1 view .LVU489
 1933 00d4 0120     		movs	r0, #1
 1934              	.LVL161:
 360:src/console.c ****     r = no_key;
 1935              		.loc 2 360 5 is_stmt 0 view .LVU490
 1936 00d6 FFF7FEFF 		bl	save_ram_file
 1937              	.LVL162:
 361:src/console.c ****     break;
 1938              		.loc 2 361 5 is_stmt 1 view .LVU491
ARM GAS  /tmp/ccGwc1Zz.s 			page 52


 361:src/console.c ****     break;
 1939              		.loc 2 361 7 is_stmt 0 view .LVU492
 1940 00da 104B     		ldr	r3, .L149
 1941 00dc 93E80300 		ldm	r3, {r0, r1}
 1942 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1943              	.LVL163:
 362:src/console.c ****   case LDST:
 1944              		.loc 2 362 5 is_stmt 1 view .LVU493
 361:src/console.c ****     break;
 1945              		.loc 2 361 7 is_stmt 0 view .LVU494
 1946 00e2 84E80300 		stm	r4, {r0, r1}
 362:src/console.c ****   case LDST:
 1947              		.loc 2 362 5 view .LVU495
 1948 00e6 A4E7     		b	.L147
 1949              	.LVL164:
 1950              	.L140:
 364:src/console.c ****     r = no_key;
 1951              		.loc 2 364 5 is_stmt 1 view .LVU496
 1952 00e8 0120     		movs	r0, #1
 1953              	.LVL165:
 364:src/console.c ****     r = no_key;
 1954              		.loc 2 364 5 is_stmt 0 view .LVU497
 1955 00ea FFF7FEFF 		bl	load_ram_file
 1956              	.LVL166:
 365:src/console.c ****     break;
 1957              		.loc 2 365 5 is_stmt 1 view .LVU498
 365:src/console.c ****     break;
 1958              		.loc 2 365 7 is_stmt 0 view .LVU499
 1959 00ee 0B4B     		ldr	r3, .L149
 1960 00f0 93E80300 		ldm	r3, {r0, r1}
 1961 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1962              	.LVL167:
 366:src/console.c ****   case LDPRG:
 1963              		.loc 2 366 5 is_stmt 1 view .LVU500
 365:src/console.c ****     break;
 1964              		.loc 2 365 7 is_stmt 0 view .LVU501
 1965 00f6 84E80300 		stm	r4, {r0, r1}
 366:src/console.c ****   case LDPRG:
 1966              		.loc 2 366 5 view .LVU502
 1967 00fa 9AE7     		b	.L147
 1968              	.LVL168:
 1969              	.L139:
 368:src/console.c ****     r = no_key;
 1970              		.loc 2 368 5 is_stmt 1 view .LVU503
 1971 00fc FFF7FEFF 		bl	load_prog_file
 1972              	.LVL169:
 369:src/console.c ****     break;
 1973              		.loc 2 369 5 view .LVU504
 369:src/console.c ****     break;
 1974              		.loc 2 369 7 is_stmt 0 view .LVU505
 1975 0100 064B     		ldr	r3, .L149
 1976 0102 93E80300 		ldm	r3, {r0, r1}
 1977 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1978              	.LVL170:
 370:src/console.c ****   case SVPRG:
 1979              		.loc 2 370 5 is_stmt 1 view .LVU506
 369:src/console.c ****     break;
ARM GAS  /tmp/ccGwc1Zz.s 			page 53


 1980              		.loc 2 369 7 is_stmt 0 view .LVU507
 1981 0108 84E80300 		stm	r4, {r0, r1}
 370:src/console.c ****   case SVPRG:
 1982              		.loc 2 370 5 view .LVU508
 1983 010c 91E7     		b	.L147
 1984              	.LVL171:
 1985              	.L136:
 376:src/console.c ****   }
 1986              		.loc 2 376 5 is_stmt 1 view .LVU509
 376:src/console.c ****   }
 1987              		.loc 2 376 7 is_stmt 0 view .LVU510
 1988 010e 034B     		ldr	r3, .L149
 1989 0110 93E80300 		ldm	r3, {r0, r1}
 1990              	.LVL172:
 376:src/console.c ****   }
 1991              		.loc 2 376 7 view .LVU511
 1992 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1993              	.LVL173:
 376:src/console.c ****   }
 1994              		.loc 2 376 7 view .LVU512
 1995 0116 84E80300 		stm	r4, {r0, r1}
 1996 011a 8AE7     		b	.L147
 1997              	.L150:
 1998              		.align	2
 1999              	.L149:
 2000 011c 00000000 		.word	.LANCHOR6
 2001              		.cfi_endproc
 2002              	.LFE25:
 2004              		.section	.rodata.program_main.str1.4,"aMS",%progbits,1
 2005              		.align	2
 2006              	.LC2:
 2007 0000 00       		.ascii	"\000"
 2008              		.section	.text.program_main,"ax",%progbits
 2009              		.align	1
 2010              		.p2align 2,,3
 2011              		.global	program_main
 2012              		.syntax unified
 2013              		.thumb
 2014              		.thumb_func
 2015              		.fpu fpv4-sp-d16
 2017              	program_main:
 2018              	.LFB26:
 380:src/console.c **** 
 381:src/console.c **** void program_main(){
 2019              		.loc 2 381 20 is_stmt 1 view -0
 2020              		.cfi_startproc
 2021              		@ args = 0, pretend = 0, frame = 24
 2022              		@ frame_needed = 0, uses_anonymous_args = 0
 382:src/console.c ****   int c;
 2023              		.loc 2 382 3 view .LVU514
 383:src/console.c ****   struct _ndmap remapped;
 2024              		.loc 2 383 3 view .LVU515
 384:src/console.c **** 
 385:src/console.c ****   //  init_graphics();
 386:src/console.c ****   //  xeq_init_contexts();
 387:src/console.c ****   init_mem();
 2025              		.loc 2 387 3 view .LVU516
ARM GAS  /tmp/ccGwc1Zz.s 			page 54


 381:src/console.c ****   int c;
 2026              		.loc 2 381 20 is_stmt 0 view .LVU517
 2027 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2028              		.cfi_def_cfa_offset 36
 2029              		.cfi_offset 4, -36
 2030              		.cfi_offset 5, -32
 2031              		.cfi_offset 6, -28
 2032              		.cfi_offset 7, -24
 2033              		.cfi_offset 8, -20
 2034              		.cfi_offset 9, -16
 2035              		.cfi_offset 10, -12
 2036              		.cfi_offset 11, -8
 2037              		.cfi_offset 14, -4
 2038 0004 87B0     		sub	sp, sp, #28
 2039              		.cfi_def_cfa_offset 64
 2040              		.loc 2 387 3 view .LVU518
 2041 0006 FFF7FEFF 		bl	init_mem
 2042              	.LVL174:
 388:src/console.c ****   init_RegionTab();
 2043              		.loc 2 388 3 is_stmt 1 view .LVU519
 2044 000a FFF7FEFF 		bl	init_RegionTab
 2045              	.LVL175:
 389:src/console.c ****   init_34s();
 2046              		.loc 2 389 3 view .LVU520
 2047 000e FFF7FEFF 		bl	init_34s
 2048              	.LVL176:
 390:src/console.c ****   DispMsg = "";
 2049              		.loc 2 390 3 view .LVU521
 391:src/console.c ****   State2.flags = 1;
 2050              		.loc 2 391 16 is_stmt 0 view .LVU522
 2051 0012 B14A     		ldr	r2, .L235
 390:src/console.c ****   DispMsg = "";
 2052              		.loc 2 390 11 view .LVU523
 2053 0014 B149     		ldr	r1, .L235+4
 2054              		.loc 2 391 16 view .LVU524
 2055 0016 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 390:src/console.c ****   DispMsg = "";
 2056              		.loc 2 390 11 view .LVU525
 2057 0018 B148     		ldr	r0, .L235+8
 2058 001a 0860     		str	r0, [r1]
 2059              		.loc 2 391 3 is_stmt 1 view .LVU526
 2060              		.loc 2 391 16 is_stmt 0 view .LVU527
 2061 001c 43F00103 		orr	r3, r3, #1
 2062 0020 1376     		strb	r3, [r2, #24]
 392:src/console.c ****   load_ram_file(0);
 2063              		.loc 2 392 3 is_stmt 1 view .LVU528
 2064 0022 0020     		movs	r0, #0
 2065 0024 FFF7FEFF 		bl	load_ram_file
 2066              	.LVL177:
 393:src/console.c ****   load_backup_file(0);
 2067              		.loc 2 393 3 view .LVU529
 2068              	.LBB99:
 2069              	.LBB100:
  22:src/menu.c    **** }
 2070              		.loc 1 22 3 is_stmt 0 view .LVU530
 2071 0028 DFF820B3 		ldr	fp, .L235+116
 2072 002c DFF82093 		ldr	r9, .L235+120
ARM GAS  /tmp/ccGwc1Zz.s 			page 55


 2073              	.LBE100:
 2074              	.LBE99:
 394:src/console.c ****   load_lib_file(0);
 395:src/console.c ****   display();
 396:src/console.c ****   display_current_menu();
 397:src/console.c ****   lcd_refresh();
 398:src/console.c ****   JustDisplayed = 0;
 399:src/console.c ****   /*
 400:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 401:src/console.c ****     Sleeps peacefully while waiting for a key.
 402:src/console.c ****     Handles (in principle!) turning off and on.
 403:src/console.c ****     =================
 404:src/console.c ****     Main event loop
 405:src/console.c ****     =================
 406:src/console.c **** 
 407:src/console.c ****     Status flags:
 408:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 409:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 410:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 411:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 412:src/console.c ****   */
 413:src/console.c ****   for(;;) {
 414:src/console.c **** 
 415:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 2075              		.loc 2 415 10 view .LVU531
 2076 0030 AC4C     		ldr	r4, .L235+12
 416:src/console.c ****       {
 417:src/console.c **** 	CLR_ST(STAT_RUNNING);
 418:src/console.c **** 	sys_sleep();
 419:src/console.c ****       }
 420:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 2077              		.loc 2 420 35 view .LVU532
 2078 0032 AD4E     		ldr	r6, .L235+16
 421:src/console.c ****     {
 422:src/console.c ****       CLR_ST(STAT_RUNNING);
 423:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2079              		.loc 2 423 7 view .LVU533
 2080 0034 DFF81C83 		ldr	r8, .L235+124
 393:src/console.c ****   load_lib_file(0);
 2081              		.loc 2 393 3 view .LVU534
 2082 0038 0020     		movs	r0, #0
 2083 003a FFF7FEFF 		bl	load_backup_file
 2084              	.LVL178:
 394:src/console.c ****   display();
 2085              		.loc 2 394 3 is_stmt 1 view .LVU535
 2086 003e 0020     		movs	r0, #0
 2087 0040 FFF7FEFF 		bl	load_lib_file
 2088              	.LVL179:
 395:src/console.c ****   display_current_menu();
 2089              		.loc 2 395 3 view .LVU536
 2090 0044 FFF7FEFF 		bl	display
 2091              	.LVL180:
 396:src/console.c ****   lcd_refresh();
 2092              		.loc 2 396 3 view .LVU537
 2093              	.LBB102:
 2094              	.LBI99:
  21:src/menu.c    ****   display_menu (current_menu);
ARM GAS  /tmp/ccGwc1Zz.s 			page 56


 2095              		.loc 1 21 6 view .LVU538
 2096              	.LBB101:
  22:src/menu.c    **** }
 2097              		.loc 1 22 3 view .LVU539
 2098 0048 DBF80000 		ldr	r0, [fp]
 2099 004c FFF7FEFF 		bl	display_menu
 2100              	.LVL181:
 2101              	.LBE101:
 2102              	.LBE102:
 397:src/console.c ****   JustDisplayed = 0;
 2103              		.loc 2 397 3 view .LVU540
 2104 0050 A64B     		ldr	r3, .L235+20
 2105 0052 9847     		blx	r3
 2106              	.LVL182:
 398:src/console.c ****   /*
 2107              		.loc 2 398 3 view .LVU541
 398:src/console.c ****   /*
 2108              		.loc 2 398 17 is_stmt 0 view .LVU542
 2109 0054 A64B     		ldr	r3, .L235+24
 2110 0056 0022     		movs	r2, #0
 2111 0058 1A60     		str	r2, [r3]
 2112 005a 04AD     		add	r5, sp, #16
 2113              	.L152:
 413:src/console.c **** 
 2114              		.loc 2 413 3 is_stmt 1 view .LVU543
 415:src/console.c ****       {
 2115              		.loc 2 415 5 view .LVU544
 415:src/console.c ****       {
 2116              		.loc 2 415 10 is_stmt 0 view .LVU545
 2117 005c 2368     		ldr	r3, [r4]
 415:src/console.c ****       {
 2118              		.loc 2 415 8 view .LVU546
 2119 005e 9F05     		lsls	r7, r3, #22
 2120 0060 40F18180 		bpl	.L153
 2121              	.L224:
 415:src/console.c ****       {
 2122              		.loc 2 415 30 discriminator 1 view .LVU547
 2123 0064 2368     		ldr	r3, [r4]
 415:src/console.c ****       {
 2124              		.loc 2 415 27 discriminator 1 view .LVU548
 2125 0066 5807     		lsls	r0, r3, #29
 2126 0068 7DD5     		bpl	.L153
 417:src/console.c **** 	sys_sleep();
 2127              		.loc 2 417 2 is_stmt 1 view .LVU549
 2128 006a 2368     		ldr	r3, [r4]
 418:src/console.c ****       }
 2129              		.loc 2 418 2 is_stmt 0 view .LVU550
 2130 006c A14A     		ldr	r2, .L235+28
 417:src/console.c **** 	sys_sleep();
 2131              		.loc 2 417 2 view .LVU551
 2132 006e 23F00203 		bic	r3, r3, #2
 2133 0072 2360     		str	r3, [r4]
 418:src/console.c ****       }
 2134              		.loc 2 418 2 is_stmt 1 view .LVU552
 2135 0074 9047     		blx	r2
 2136              	.LVL183:
 2137              	.L154:
ARM GAS  /tmp/ccGwc1Zz.s 			page 57


 424:src/console.c ****       sys_sleep();
 425:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 426:src/console.c **** 	key_push (K_HEARTBEAT);
 427:src/console.c **** 	if (Pause > 0) Pause--;
 428:src/console.c ****       }
 429:src/console.c ****       sys_timer_disable(0); // stop timer
 430:src/console.c ****     }
 431:src/console.c ****     
 432:src/console.c ****     // Wakeup in off state or going to sleep
 433:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 2138              		.loc 2 433 5 view .LVU553
 2139              		.loc 2 433 9 is_stmt 0 view .LVU554
 2140 0076 2368     		ldr	r3, [r4]
 2141              		.loc 2 433 8 view .LVU555
 2142 0078 9905     		lsls	r1, r3, #22
 2143 007a 00F19B80 		bmi	.L160
 2144              	.L225:
 2145              		.loc 2 433 29 discriminator 1 view .LVU556
 2146 007e 2368     		ldr	r3, [r4]
 2147              		.loc 2 433 26 discriminator 1 view .LVU557
 2148 0080 5A07     		lsls	r2, r3, #29
 2149 0082 00F19780 		bmi	.L160
 434:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 435:src/console.c ****         // Going to off mode
 436:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 437:src/console.c ****         draw_power_off_image(1);
 438:src/console.c **** 
 439:src/console.c ****         LCD_power_off(0);
 440:src/console.c ****         SET_ST(STAT_SUSPENDED);
 441:src/console.c ****         SET_ST(STAT_OFF);
 442:src/console.c ****       }
 443:src/console.c ****       // Already in OFF -> just continue to sleep above
 444:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 445:src/console.c ****       // thus reaching the sleep()
 446:src/console.c ****     }
 447:src/console.c **** 
 448:src/console.c ****     // Well, we are woken-up
 449:src/console.c ****     SET_ST(STAT_RUNNING);
 2150              		.loc 2 449 5 is_stmt 1 view .LVU558
 2151 0086 2368     		ldr	r3, [r4]
 2152 0088 43F00203 		orr	r3, r3, #2
 2153 008c 2360     		str	r3, [r4]
 450:src/console.c **** 
 451:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 452:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 2154              		.loc 2 452 5 view .LVU559
 2155 008e 2368     		ldr	r3, [r4]
 2156 0090 23F00403 		bic	r3, r3, #4
 2157 0094 2360     		str	r3, [r4]
 453:src/console.c **** 
 454:src/console.c ****     // Get up from OFF state
 455:src/console.c ****     if ( ST(STAT_OFF) ) {
 2158              		.loc 2 455 5 view .LVU560
 2159              		.loc 2 455 10 is_stmt 0 view .LVU561
 2160 0096 2368     		ldr	r3, [r4]
 2161              		.loc 2 455 8 view .LVU562
 2162 0098 DB06     		lsls	r3, r3, #27
ARM GAS  /tmp/ccGwc1Zz.s 			page 58


 2163 009a 0CD5     		bpl	.L165
 456:src/console.c ****       LCD_power_on();
 2164              		.loc 2 456 7 is_stmt 1 view .LVU563
 2165 009c 964B     		ldr	r3, .L235+32
 2166 009e 9847     		blx	r3
 2167              	.LVL184:
 457:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 2168              		.loc 2 457 7 view .LVU564
 2169 00a0 964B     		ldr	r3, .L235+36
 2170 00a2 9847     		blx	r3
 2171              	.LVL185:
 458:src/console.c **** 
 459:src/console.c ****       CLR_ST(STAT_OFF);
 2172              		.loc 2 459 7 view .LVU565
 2173 00a4 2368     		ldr	r3, [r4]
 460:src/console.c **** 
 461:src/console.c ****       if ( !lcd_get_buf_cleared() )
 2174              		.loc 2 461 13 is_stmt 0 view .LVU566
 2175 00a6 964A     		ldr	r2, .L235+40
 459:src/console.c **** 
 2176              		.loc 2 459 7 view .LVU567
 2177 00a8 23F01003 		bic	r3, r3, #16
 2178 00ac 2360     		str	r3, [r4]
 2179              		.loc 2 461 7 is_stmt 1 view .LVU568
 2180              		.loc 2 461 13 is_stmt 0 view .LVU569
 2181 00ae 9047     		blx	r2
 2182              	.LVL186:
 2183              		.loc 2 461 10 view .LVU570
 2184 00b0 08B9     		cbnz	r0, .L165
 462:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 2185              		.loc 2 462 9 is_stmt 1 view .LVU571
 2186 00b2 944B     		ldr	r3, .L235+44
 2187 00b4 9847     		blx	r3
 2188              	.LVL187:
 2189              	.L165:
 463:src/console.c ****     }
 464:src/console.c **** 
 465:src/console.c ****     // Key is ready -> clear auto off timer
 466:src/console.c ****     //    if ( !key_empty() )
 467:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 468:src/console.c ****     // Fetch the key
 469:src/console.c ****     //  < 0 -> No key event
 470:src/console.c ****     //  > 0 -> Key pressed
 471:src/console.c ****     // == 0 -> Key released
 472:src/console.c ****     c = key_pop();
 2190              		.loc 2 472 5 view .LVU572
 2191              		.loc 2 472 9 is_stmt 0 view .LVU573
 2192 00b6 944B     		ldr	r3, .L235+48
 2193 00b8 9847     		blx	r3
 2194              	.LVL188:
 473:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2195              		.loc 2 473 8 view .LVU574
 2196 00ba 6228     		cmp	r0, #98
 472:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2197              		.loc 2 472 9 view .LVU575
 2198 00bc 8246     		mov	r10, r0
 2199              	.LVL189:
ARM GAS  /tmp/ccGwc1Zz.s 			page 59


 2200              		.loc 2 473 5 is_stmt 1 view .LVU576
 2201              		.loc 2 473 8 is_stmt 0 view .LVU577
 2202 00be 00F09A81 		beq	.L167
 2203              		.loc 2 473 29 discriminator 1 view .LVU578
 2204 00c2 0028     		cmp	r0, #0
 2205 00c4 40F39481 		ble	.L168
 474:src/console.c ****       reset_auto_off();
 2206              		.loc 2 474 7 is_stmt 1 view .LVU579
 2207 00c8 904B     		ldr	r3, .L235+52
 2208 00ca 9847     		blx	r3
 2209              	.LVL190:
 475:src/console.c ****       start_key_timer();
 2210              		.loc 2 475 7 view .LVU580
 2211              	.LBB103:
 2212              	.LBI103:
 240:src/console.c ****     start_ticks = get_rtc_ticks();
 2213              		.loc 2 240 6 view .LVU581
 2214              	.LBB104:
 241:src/console.c **** }
 2215              		.loc 2 241 5 view .LVU582
 241:src/console.c **** }
 2216              		.loc 2 241 19 is_stmt 0 view .LVU583
 2217 00cc 904B     		ldr	r3, .L235+56
 2218 00ce 9847     		blx	r3
 2219              	.LVL191:
 241:src/console.c **** }
 2220              		.loc 2 241 17 view .LVU584
 2221 00d0 904B     		ldr	r3, .L235+60
 2222              	.LBE104:
 2223              	.LBE103:
 2224              	.LBB106:
 2225              	.LBB107:
  68:src/console.c **** 
 2226              		.loc 2 68 6 view .LVU585
 2227 00d2 BAF1630F 		cmp	r10, #99
 2228              	.LBE107:
 2229              	.LBE106:
 2230              	.LBB119:
 2231              	.LBB105:
 241:src/console.c **** }
 2232              		.loc 2 241 17 view .LVU586
 2233 00d6 1860     		str	r0, [r3]
 2234              	.LBE105:
 2235              	.LBE119:
 476:src/console.c ****     }
 477:src/console.c ****     if (c >= 0) {
 2236              		.loc 2 477 5 is_stmt 1 view .LVU587
 478:src/console.c ****       remapped = remap(c);
 2237              		.loc 2 478 7 view .LVU588
 2238              	.LVL192:
 2239              	.LBB120:
 2240              	.LBI106:
  60:src/console.c **** 
 2241              		.loc 2 60 22 view .LVU589
 2242              	.LBB108:
  62:src/console.c **** 
 2243              		.loc 2 62 3 view .LVU590
ARM GAS  /tmp/ccGwc1Zz.s 			page 60


 2244              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 2245              		.loc 3 1 1 view .LVU591
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
ARM GAS  /tmp/ccGwc1Zz.s 			page 61


  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 2246              		.loc 3 59 3 view .LVU592
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K52, 2}, // Integral
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_NOP, 0}, // no function
  96:src/keytran.c ****     {K_NOP, 0}, // no function
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
ARM GAS  /tmp/ccGwc1Zz.s 			page 62


 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 2247              		.loc 3 117 3 view .LVU593
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K20, 2}, // Fill
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K_NOP, 0}, // no function
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     {K53, 3}, // X.FCN
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 0}, // Exit
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K_NOP, 0}, // no function
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
ARM GAS  /tmp/ccGwc1Zz.s 			page 63


 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 2248              		.loc 3 175 1 view .LVU594
  66:src/console.c **** 
 2249              		.loc 2 66 3 view .LVU595
  68:src/console.c **** 
 2250              		.loc 2 68 3 view .LVU596
  68:src/console.c **** 
 2251              		.loc 2 68 6 is_stmt 0 view .LVU597
 2252 00d8 00F0CF81 		beq	.L219
  70:src/console.c ****     // Start click 
 2253              		.loc 2 70 3 is_stmt 1 view .LVU598
  70:src/console.c ****     // Start click 
 2254              		.loc 2 70 6 is_stmt 0 view .LVU599
 2255 00dc BAF12C0F 		cmp	r10, #44
 2256 00e0 00F09181 		beq	.L220
 2257              	.LVL193:
 2258              	.L171:
  84:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2259              		.loc 2 84 3 is_stmt 1 view .LVU600
  84:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2260              		.loc 2 84 8 is_stmt 0 view .LVU601
 2261 00e4 FFF7FEFF 		bl	get_alpha_state
 2262              	.LVL194:
  84:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2263              		.loc 2 84 6 view .LVU602
 2264 00e8 0028     		cmp	r0, #0
 2265 00ea 7AD0     		beq	.L173
  85:src/console.c ****       switch (cur_shift()) { 
 2266              		.loc 2 85 5 is_stmt 1 view .LVU603
  85:src/console.c ****       switch (cur_shift()) { 
 2267              		.loc 2 85 8 is_stmt 0 view .LVU604
 2268 00ec BAF11C0F 		cmp	r10, #28
 2269 00f0 00F0D881 		beq	.L221
 102:src/console.c ****   }
 2270              		.loc 2 102 5 is_stmt 1 view .LVU605
 102:src/console.c ****   }
 2271              		.loc 2 102 26 is_stmt 0 view .LVU606
 2272 00f4 884A     		ldr	r2, .L235+64
 2273              	.L218:
 131:src/console.c ****     break;
 2274              		.loc 2 131 26 view .LVU607
 2275 00f6 02EBCA03 		add	r3, r2, r10, lsl #3
 2276 00fa 93E80300 		ldm	r3, {r0, r1}
 2277 00fe 12F83A30 		ldrb	r3, [r2, r10, lsl #3]	@ zero_extendqisi2
 2278              	.LVL195:
 131:src/console.c ****     break;
 2279              		.loc 2 131 26 view .LVU608
 2280 0102 85E80300 		stm	r5, {r0, r1}
 2281 0106 8A46     		mov	r10, r1
 2282              	.LVL196:
ARM GAS  /tmp/ccGwc1Zz.s 			page 64


 2283              	.L170:
 131:src/console.c ****     break;
 2284              		.loc 2 131 26 view .LVU609
 2285              	.LBE108:
 2286              	.LBE120:
 479:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2287              		.loc 2 479 7 is_stmt 1 view .LVU610
 2288              		.loc 2 479 10 is_stmt 0 view .LVU611
 2289 0108 2F2B     		cmp	r3, #47
 2290 010a 00F09480 		beq	.L222
 2291              	.LVL197:
 2292              	.L195:
 480:src/console.c **** 	set_menu ( remapped.shift );
 481:src/console.c **** 	display_current_menu ();
 482:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 483:src/console.c **** 	case SHIFT_F:
 484:src/console.c **** 	  remapped = f_shift; // F -> N
 485:src/console.c **** 	  break;
 486:src/console.c **** 	case SHIFT_G:
 487:src/console.c **** 	  remapped = g_shift; // G -> N
 488:src/console.c **** 	  break;
 489:src/console.c **** 	case SHIFT_H:
 490:src/console.c **** 	  remapped = h_shift; // H -> N
 491:src/console.c **** 	default:
 492:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 493:src/console.c **** 	}
 494:src/console.c ****       }
 495:src/console.c ****       if (remapped.key_34s == K_SYS) {
 2293              		.loc 2 495 7 is_stmt 1 view .LVU612
 2294              		.loc 2 495 10 is_stmt 0 view .LVU613
 2295 010e 302B     		cmp	r3, #48
 2296 0110 1AD1     		bne	.L201
 496:src/console.c **** 	SET_ST(STAT_MENU);
 2297              		.loc 2 496 2 is_stmt 1 view .LVU614
 2298 0112 2368     		ldr	r3, [r4]
 2299              	.LVL198:
 497:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 2300              		.loc 2 497 2 is_stmt 0 view .LVU615
 2301 0114 DFF840A2 		ldr	r10, .L235+128
 2302              	.LVL199:
 2303              		.loc 2 497 2 view .LVU616
 2304 0118 8048     		ldr	r0, .L235+68
 2305 011a 0022     		movs	r2, #0
 496:src/console.c **** 	SET_ST(STAT_MENU);
 2306              		.loc 2 496 2 view .LVU617
 2307 011c 43F04003 		orr	r3, r3, #64
 2308              		.loc 2 497 2 view .LVU618
 2309 0120 1146     		mov	r1, r2
 496:src/console.c **** 	SET_ST(STAT_MENU);
 2310              		.loc 2 496 2 view .LVU619
 2311 0122 2360     		str	r3, [r4]
 2312              		.loc 2 497 2 is_stmt 1 view .LVU620
 2313 0124 D047     		blx	r10
 2314              	.LVL200:
 498:src/console.c **** 	CLR_ST(STAT_MENU);
 2315              		.loc 2 498 2 view .LVU621
 2316 0126 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccGwc1Zz.s 			page 65


 2317 0128 23F04003 		bic	r3, r3, #64
 2318 012c 2360     		str	r3, [r4]
 499:src/console.c **** 	remapped =  no_key;
 2319              		.loc 2 499 2 view .LVU622
 2320              		.loc 2 499 11 is_stmt 0 view .LVU623
 2321 012e 7C4B     		ldr	r3, .L235+72
 2322 0130 93E80300 		ldm	r3, {r0, r1}
 2323 0134 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2324 0136 0193     		str	r3, [sp, #4]
 2325              	.LVL201:
 2326              		.loc 2 499 11 view .LVU624
 2327 0138 85E80300 		stm	r5, {r0, r1}
 2328              	.LBB121:
 2329              	.LBB122:
  22:src/menu.c    **** }
 2330              		.loc 1 22 3 view .LVU625
 2331 013c DBF80000 		ldr	r0, [fp]
 2332              	.LBE122:
 2333              	.LBE121:
 2334              		.loc 2 499 11 view .LVU626
 2335 0140 8A46     		mov	r10, r1
 2336              	.LVL202:
 500:src/console.c **** 	display_current_menu();
 2337              		.loc 2 500 2 is_stmt 1 view .LVU627
 2338              	.LBB124:
 2339              	.LBI121:
  21:src/menu.c    ****   display_menu (current_menu);
 2340              		.loc 1 21 6 view .LVU628
 2341              	.LBB123:
  22:src/menu.c    **** }
 2342              		.loc 1 22 3 view .LVU629
 2343 0142 FFF7FEFF 		bl	display_menu
 2344              	.LVL203:
  22:src/menu.c    **** }
 2345              		.loc 1 22 3 is_stmt 0 view .LVU630
 2346 0146 019B     		ldr	r3, [sp, #4]
 2347              	.LVL204:
 2348              	.L201:
  22:src/menu.c    **** }
 2349              		.loc 1 22 3 view .LVU631
 2350              	.LBE123:
 2351              	.LBE124:
 501:src/console.c ****       }
 502:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 2352              		.loc 2 502 7 is_stmt 1 view .LVU632
 2353              		.loc 2 502 10 is_stmt 0 view .LVU633
 2354 0148 312B     		cmp	r3, #49
 2355 014a 00F07D81 		beq	.L223
 2356              	.LVL205:
 2357              	.L175:
 503:src/console.c **** 	remapped = do_multi (remapped);
 504:src/console.c **** 	display_current_menu();
 505:src/console.c ****       }
 506:src/console.c ****       process_keycode_with_shift(remapped);
 2358              		.loc 2 506 7 is_stmt 1 view .LVU634
 2359              		.loc 2 506 7 is_stmt 0 view .LVU635
 2360 014e 8DF81030 		strb	r3, [sp, #16]
ARM GAS  /tmp/ccGwc1Zz.s 			page 66


 2361 0152 CDF814A0 		str	r10, [sp, #20]
 2362 0156 95E80300 		ldm	r5, {r0, r1}
 2363 015a FFF7FEFF 		bl	process_keycode_with_shift
 2364              	.LVL206:
 413:src/console.c **** 
 2365              		.loc 2 413 3 is_stmt 1 view .LVU636
 415:src/console.c ****       {
 2366              		.loc 2 415 5 view .LVU637
 415:src/console.c ****       {
 2367              		.loc 2 415 10 is_stmt 0 view .LVU638
 2368 015e 2368     		ldr	r3, [r4]
 415:src/console.c ****       {
 2369              		.loc 2 415 8 view .LVU639
 2370 0160 9F05     		lsls	r7, r3, #22
 2371 0162 3FF57FAF 		bmi	.L224
 2372              	.LVL207:
 2373              	.L153:
 420:src/console.c ****     {
 2374              		.loc 2 420 10 is_stmt 1 view .LVU640
 420:src/console.c ****     {
 2375              		.loc 2 420 15 is_stmt 0 view .LVU641
 2376 0166 2068     		ldr	r0, [r4]
 420:src/console.c ****     {
 2377              		.loc 2 420 13 view .LVU642
 2378 0168 10F4007A 		ands	r10, r0, #512
 2379 016c 83D1     		bne	.L154
 420:src/console.c ****     {
 2380              		.loc 2 420 35 discriminator 1 view .LVU643
 2381 016e B047     		blx	r6
 2382              	.LVL208:
 420:src/console.c ****     {
 2383              		.loc 2 420 32 discriminator 1 view .LVU644
 2384 0170 0028     		cmp	r0, #0
 2385 0172 80D0     		beq	.L154
 422:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2386              		.loc 2 422 7 is_stmt 1 view .LVU645
 2387 0174 2368     		ldr	r3, [r4]
 2388 0176 23F00203 		bic	r3, r3, #2
 423:src/console.c ****       sys_sleep();
 2389              		.loc 2 423 7 is_stmt 0 view .LVU646
 2390 017a 5046     		mov	r0, r10
 2391 017c 6421     		movs	r1, #100
 422:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2392              		.loc 2 422 7 view .LVU647
 2393 017e 2360     		str	r3, [r4]
 423:src/console.c ****       sys_sleep();
 2394              		.loc 2 423 7 is_stmt 1 view .LVU648
 2395 0180 C047     		blx	r8
 2396              	.LVL209:
 424:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 2397              		.loc 2 424 7 view .LVU649
 2398 0182 5C4B     		ldr	r3, .L235+28
 2399 0184 9847     		blx	r3
 2400              	.LVL210:
 425:src/console.c **** 	key_push (K_HEARTBEAT);
 2401              		.loc 2 425 7 view .LVU650
 425:src/console.c **** 	key_push (K_HEARTBEAT);
ARM GAS  /tmp/ccGwc1Zz.s 			page 67


 2402              		.loc 2 425 11 is_stmt 0 view .LVU651
 2403 0186 674B     		ldr	r3, .L235+76
 2404 0188 5046     		mov	r0, r10
 2405 018a 9847     		blx	r3
 2406              	.LVL211:
 425:src/console.c **** 	key_push (K_HEARTBEAT);
 2407              		.loc 2 425 10 view .LVU652
 2408 018c 58B1     		cbz	r0, .L158
 426:src/console.c **** 	if (Pause > 0) Pause--;
 2409              		.loc 2 426 2 is_stmt 1 view .LVU653
 2410 018e 664B     		ldr	r3, .L235+80
 2411 0190 6220     		movs	r0, #98
 2412 0192 9847     		blx	r3
 2413              	.LVL212:
 427:src/console.c ****       }
 2414              		.loc 2 427 2 view .LVU654
 427:src/console.c ****       }
 2415              		.loc 2 427 12 is_stmt 0 view .LVU655
 2416 0194 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 427:src/console.c ****       }
 2417              		.loc 2 427 5 view .LVU656
 2418 0198 2BB1     		cbz	r3, .L158
 427:src/console.c ****       }
 2419              		.loc 2 427 17 is_stmt 1 discriminator 1 view .LVU657
 427:src/console.c ****       }
 2420              		.loc 2 427 22 is_stmt 0 discriminator 1 view .LVU658
 2421 019a 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 2422 019e 013B     		subs	r3, r3, #1
 2423 01a0 DBB2     		uxtb	r3, r3
 2424 01a2 89F80030 		strb	r3, [r9]
 2425              	.L158:
 429:src/console.c ****     }
 2426              		.loc 2 429 7 is_stmt 1 view .LVU659
 2427 01a6 614B     		ldr	r3, .L235+84
 2428 01a8 0020     		movs	r0, #0
 2429 01aa 9847     		blx	r3
 2430              	.LVL213:
 433:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2431              		.loc 2 433 5 view .LVU660
 433:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2432              		.loc 2 433 9 is_stmt 0 view .LVU661
 2433 01ac 2368     		ldr	r3, [r4]
 433:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2434              		.loc 2 433 8 view .LVU662
 2435 01ae 9905     		lsls	r1, r3, #22
 2436 01b0 7FF565AF 		bpl	.L225
 2437              	.L160:
 434:src/console.c ****         // Going to off mode
 2438              		.loc 2 434 7 is_stmt 1 view .LVU663
 434:src/console.c ****         // Going to off mode
 2439              		.loc 2 434 12 is_stmt 0 view .LVU664
 2440 01b4 2068     		ldr	r0, [r4]
 434:src/console.c ****         // Going to off mode
 2441              		.loc 2 434 10 view .LVU665
 2442 01b6 10F0040A 		ands	r10, r0, #4
 2443 01ba 7FF44FAF 		bne	.L152
 436:src/console.c ****         draw_power_off_image(1);
ARM GAS  /tmp/ccGwc1Zz.s 			page 68


 2444              		.loc 2 436 9 is_stmt 1 view .LVU666
 2445 01be 5C4B     		ldr	r3, .L235+88
 2446 01c0 5046     		mov	r0, r10
 2447 01c2 9847     		blx	r3
 2448              	.LVL214:
 437:src/console.c **** 
 2449              		.loc 2 437 9 view .LVU667
 2450 01c4 5B4B     		ldr	r3, .L235+92
 2451 01c6 0120     		movs	r0, #1
 2452 01c8 9847     		blx	r3
 2453              	.LVL215:
 439:src/console.c ****         SET_ST(STAT_SUSPENDED);
 2454              		.loc 2 439 9 view .LVU668
 2455 01ca 5B4B     		ldr	r3, .L235+96
 2456 01cc 5046     		mov	r0, r10
 2457 01ce 9847     		blx	r3
 2458              	.LVL216:
 440:src/console.c ****         SET_ST(STAT_OFF);
 2459              		.loc 2 440 9 view .LVU669
 2460 01d0 2368     		ldr	r3, [r4]
 2461 01d2 43F00403 		orr	r3, r3, #4
 2462 01d6 2360     		str	r3, [r4]
 441:src/console.c ****       }
 2463              		.loc 2 441 9 view .LVU670
 2464 01d8 2368     		ldr	r3, [r4]
 2465 01da 43F01003 		orr	r3, r3, #16
 2466 01de 2360     		str	r3, [r4]
 2467 01e0 3CE7     		b	.L152
 2468              	.LVL217:
 2469              	.L173:
 2470              	.LBB125:
 2471              	.LBB109:
 105:src/console.c ****   case KEY_F1:
 2472              		.loc 2 105 3 view .LVU671
 2473 01e2 AAF12603 		sub	r3, r10, #38
 2474 01e6 052B     		cmp	r3, #5
 2475 01e8 00F27481 		bhi	.L178
 2476 01ec DFE813F0 		tbh	[pc, r3, lsl #1]
 2477              	.L180:
 2478 01f0 EB00     		.2byte	(.L185-.L180)/2
 2479 01f2 D500     		.2byte	(.L184-.L180)/2
 2480 01f4 BB00     		.2byte	(.L183-.L180)/2
 2481 01f6 5F00     		.2byte	(.L182-.L180)/2
 2482 01f8 4500     		.2byte	(.L181-.L180)/2
 2483 01fa 0B00     		.2byte	(.L179-.L180)/2
 2484              		.p2align 1
 2485              	.L190:
 120:src/console.c ****   case KEY_F6:
 2486              		.loc 2 120 5 view .LVU672
 120:src/console.c ****   case KEY_F6:
 2487              		.loc 2 120 9 is_stmt 0 view .LVU673
 2488 01fc FFF7FEFF 		bl	cur_shift
 2489              	.LVL218:
 120:src/console.c ****   case KEY_F6:
 2490              		.loc 2 120 8 view .LVU674
 2491 0200 0128     		cmp	r0, #1
 2492 0202 00F09281 		beq	.L226
ARM GAS  /tmp/ccGwc1Zz.s 			page 69


 2493              	.L179:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2494              		.loc 2 122 5 is_stmt 1 view .LVU675
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2495              		.loc 2 122 9 is_stmt 0 view .LVU676
 2496 0206 FFF7FEFF 		bl	cur_shift
 2497              	.LVL219:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2498              		.loc 2 122 8 view .LVU677
 2499 020a 0028     		cmp	r0, #0
 2500 020c 40F05E81 		bne	.L191
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2501              		.loc 2 122 33 is_stmt 1 view .LVU678
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2502              		.loc 2 122 67 is_stmt 0 view .LVU679
 2503 0210 DBF80030 		ldr	r3, [fp]
 2504 0214 494F     		ldr	r7, .L235+100
 2505 0216 D022     		movs	r2, #208
 2506 0218 02FB03F2 		mul	r2, r2, r3
 2507 021c BB18     		adds	r3, r7, r2
 2508 021e D3E92C01 		ldrd	r0, r1, [r3, #176]
 2509 0222 B032     		adds	r2, r2, #176
 2510 0224 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2511              	.LVL220:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2512              		.loc 2 122 67 view .LVU680
 2513 0226 85E80300 		stm	r5, {r0, r1}
 2514 022a 3A44     		add	r2, r2, r7
 2515              	.LBE109:
 2516              	.LBE125:
 479:src/console.c **** 	set_menu ( remapped.shift );
 2517              		.loc 2 479 10 view .LVU681
 2518 022c 2F2B     		cmp	r3, #47
 2519              	.LBB126:
 2520              	.LBB110:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2521              		.loc 2 122 67 view .LVU682
 2522 022e D2F804A0 		ldr	r10, [r2, #4]
 2523              	.LVL221:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2524              		.loc 2 122 67 view .LVU683
 2525              	.LBE110:
 2526              	.LBE126:
 479:src/console.c **** 	set_menu ( remapped.shift );
 2527              		.loc 2 479 7 is_stmt 1 view .LVU684
 479:src/console.c **** 	set_menu ( remapped.shift );
 2528              		.loc 2 479 10 is_stmt 0 view .LVU685
 2529 0232 7FF46CAF 		bne	.L195
 2530              	.L222:
 480:src/console.c **** 	display_current_menu ();
 2531              		.loc 2 480 2 is_stmt 1 view .LVU686
 2532              	.LVL222:
 2533              	.LBB127:
 2534              	.LBI127:
   3:src/menu.c    ****   if (new_menu == current_menu) {
 2535              		.loc 1 3 6 view .LVU687
 2536              	.LBB128:
ARM GAS  /tmp/ccGwc1Zz.s 			page 70


   4:src/menu.c    ****   if (new_menu == current_menu) {
 2537              		.loc 1 4 3 view .LVU688
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2538              		.loc 1 4 7 is_stmt 0 view .LVU689
 2539 0236 DBF80030 		ldr	r3, [fp]
 2540              	.LVL223:
   5:src/menu.c    ****     current_menu = 0;
 2541              		.loc 1 5 3 is_stmt 1 view .LVU690
   5:src/menu.c    ****     current_menu = 0;
 2542              		.loc 1 5 6 is_stmt 0 view .LVU691
 2543 023a 5345     		cmp	r3, r10
 2544 023c 00F02681 		beq	.L196
   8:src/menu.c    ****     current_menu = last_menu;
 2545              		.loc 1 8 8 is_stmt 1 view .LVU692
   8:src/menu.c    ****     current_menu = last_menu;
 2546              		.loc 1 8 11 is_stmt 0 view .LVU693
 2547 0240 BAF1FF3F 		cmp	r10, #-1
 2548 0244 00F02881 		beq	.L227
 2549              	.LVL224:
 2550              	.L197:
  12:src/menu.c    ****   }
 2551              		.loc 1 12 5 is_stmt 1 view .LVU694
  12:src/menu.c    ****   }
 2552              		.loc 1 12 18 is_stmt 0 view .LVU695
 2553 0248 CBF800A0 		str	r10, [fp]
 2554              	.LVL225:
 2555              	.L199:
  14:src/menu.c    **** }
 2556              		.loc 1 14 3 is_stmt 1 view .LVU696
  14:src/menu.c    **** }
 2557              		.loc 1 14 13 is_stmt 0 view .LVU697
 2558 024c 3C4A     		ldr	r2, .L235+104
 2559              	.LBE128:
 2560              	.LBE127:
 2561              	.LBB132:
 2562              	.LBB133:
  22:src/menu.c    **** }
 2563              		.loc 1 22 3 view .LVU698
 2564 024e 5046     		mov	r0, r10
 2565              	.LBE133:
 2566              	.LBE132:
 2567              	.LBB135:
 2568              	.LBB129:
  14:src/menu.c    **** }
 2569              		.loc 1 14 13 view .LVU699
 2570 0250 1360     		str	r3, [r2]
 2571              	.LBE129:
 2572              	.LBE135:
 481:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 2573              		.loc 2 481 2 is_stmt 1 view .LVU700
 2574              	.LBB136:
 2575              	.LBI132:
  21:src/menu.c    ****   display_menu (current_menu);
 2576              		.loc 1 21 6 view .LVU701
 2577              	.LBB134:
  22:src/menu.c    **** }
 2578              		.loc 1 22 3 view .LVU702
ARM GAS  /tmp/ccGwc1Zz.s 			page 71


 2579 0252 FFF7FEFF 		bl	display_menu
 2580              	.LVL226:
 2581              	.LBE134:
 2582              	.LBE136:
 482:src/console.c **** 	case SHIFT_F:
 2583              		.loc 2 482 2 view .LVU703
 482:src/console.c **** 	case SHIFT_F:
 2584              		.loc 2 482 10 is_stmt 0 view .LVU704
 2585 0256 FFF7FEFF 		bl	cur_shift
 2586              	.LVL227:
 482:src/console.c **** 	case SHIFT_F:
 2587              		.loc 2 482 2 view .LVU705
 2588 025a 0228     		cmp	r0, #2
 484:src/console.c **** 	  break;
 2589              		.loc 2 484 4 is_stmt 1 view .LVU706
 484:src/console.c **** 	  break;
 2590              		.loc 2 484 13 is_stmt 0 view .LVU707
 2591 025c 14BF     		ite	ne
 2592 025e 394B     		ldrne	r3, .L235+108
 487:src/console.c **** 	  break;
 2593              		.loc 2 487 4 is_stmt 1 view .LVU708
 487:src/console.c **** 	  break;
 2594              		.loc 2 487 13 is_stmt 0 view .LVU709
 2595 0260 394B     		ldreq	r3, .L235+112
 2596 0262 93E80300 		ldm	r3, {r0, r1}
 2597 0266 85E80300 		stm	r5, {r0, r1}
 2598 026a 8A46     		mov	r10, r1
 2599 026c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2600              	.LVL228:
 488:src/console.c **** 	case SHIFT_H:
 2601              		.loc 2 488 4 is_stmt 1 view .LVU710
 2602 026e 4EE7     		b	.L195
 2603              	.LVL229:
 2604              	.L189:
 2605              	.LBB137:
 2606              	.LBB111:
 117:src/console.c ****   case KEY_F5:
 2607              		.loc 2 117 5 view .LVU711
 117:src/console.c ****   case KEY_F5:
 2608              		.loc 2 117 9 is_stmt 0 view .LVU712
 2609 0270 FFF7FEFF 		bl	cur_shift
 2610              	.LVL230:
 117:src/console.c ****   case KEY_F5:
 2611              		.loc 2 117 8 view .LVU713
 2612 0274 0128     		cmp	r0, #1
 2613 0276 00F06981 		beq	.L228
 2614              	.L181:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2615              		.loc 2 119 5 is_stmt 1 view .LVU714
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2616              		.loc 2 119 9 is_stmt 0 view .LVU715
 2617 027a FFF7FEFF 		bl	cur_shift
 2618              	.LVL231:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2619              		.loc 2 119 8 view .LVU716
 2620 027e 0028     		cmp	r0, #0
 2621 0280 BCD1     		bne	.L190
ARM GAS  /tmp/ccGwc1Zz.s 			page 72


 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2622              		.loc 2 119 33 is_stmt 1 view .LVU717
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2623              		.loc 2 119 67 is_stmt 0 view .LVU718
 2624 0282 DBF80030 		ldr	r3, [fp]
 2625 0286 2D4F     		ldr	r7, .L235+100
 2626 0288 D022     		movs	r2, #208
 2627 028a 02FB03F2 		mul	r2, r2, r3
 2628 028e BB18     		adds	r3, r7, r2
 2629 0290 D3E92401 		ldrd	r0, r1, [r3, #144]
 2630 0294 9032     		adds	r2, r2, #144
 2631 0296 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2632              	.LVL232:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2633              		.loc 2 119 67 view .LVU719
 2634 0298 85E80300 		stm	r5, {r0, r1}
 2635 029c 3A44     		add	r2, r2, r7
 2636 029e D2F804A0 		ldr	r10, [r2, #4]
 2637              	.LVL233:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2638              		.loc 2 119 67 view .LVU720
 2639 02a2 31E7     		b	.L170
 2640              	.LVL234:
 2641              	.L188:
 114:src/console.c ****   case KEY_F4:
 2642              		.loc 2 114 5 is_stmt 1 view .LVU721
 114:src/console.c ****   case KEY_F4:
 2643              		.loc 2 114 9 is_stmt 0 view .LVU722
 2644 02a4 FFF7FEFF 		bl	cur_shift
 2645              	.LVL235:
 114:src/console.c ****   case KEY_F4:
 2646              		.loc 2 114 8 view .LVU723
 2647 02a8 0128     		cmp	r0, #1
 2648 02aa 00F06081 		beq	.L229
 2649              	.L182:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2650              		.loc 2 116 5 is_stmt 1 view .LVU724
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2651              		.loc 2 116 9 is_stmt 0 view .LVU725
 2652 02ae FFF7FEFF 		bl	cur_shift
 2653              	.LVL236:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2654              		.loc 2 116 8 view .LVU726
 2655 02b2 0028     		cmp	r0, #0
 2656 02b4 DCD1     		bne	.L189
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2657              		.loc 2 116 33 is_stmt 1 view .LVU727
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2658              		.loc 2 116 67 is_stmt 0 view .LVU728
 2659 02b6 DBF80030 		ldr	r3, [fp]
 2660 02ba 204F     		ldr	r7, .L235+100
 2661 02bc D022     		movs	r2, #208
 2662 02be 02FB03F2 		mul	r2, r2, r3
 2663 02c2 BB18     		adds	r3, r7, r2
 2664 02c4 D3E91C01 		ldrd	r0, r1, [r3, #112]
 2665 02c8 7032     		adds	r2, r2, #112
 2666 02ca BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
ARM GAS  /tmp/ccGwc1Zz.s 			page 73


 2667              	.LVL237:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2668              		.loc 2 116 67 view .LVU729
 2669 02cc 85E80300 		stm	r5, {r0, r1}
 2670 02d0 3A44     		add	r2, r2, r7
 2671 02d2 D2F804A0 		ldr	r10, [r2, #4]
 2672              	.LVL238:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2673              		.loc 2 116 67 view .LVU730
 2674 02d6 17E7     		b	.L170
 2675              	.L236:
 2676              		.align	2
 2677              	.L235:
 2678 02d8 00000000 		.word	StateWhileOn
 2679 02dc 00000000 		.word	DispMsg
 2680 02e0 00000000 		.word	.LC2
 2681 02e4 00200010 		.word	268443648
 2682 02e8 7D030008 		.word	134218621
 2683 02ec 31020008 		.word	134218289
 2684 02f0 00000000 		.word	JustDisplayed
 2685 02f4 19040008 		.word	134218777
 2686 02f8 19020008 		.word	134218265
 2687 02fc E5020008 		.word	134218469
 2688 0300 59020008 		.word	134218329
 2689 0304 35020008 		.word	134218293
 2690 0308 89030008 		.word	134218633
 2691 030c B9030008 		.word	134218681
 2692 0310 B9040008 		.word	134218937
 2693 0314 00000000 		.word	.LANCHOR4
 2694 0318 00000000 		.word	.LANCHOR11
 2695 031c 00000000 		.word	.LANCHOR15
 2696 0320 00000000 		.word	.LANCHOR6
 2697 0324 01040008 		.word	134218753
 2698 0328 81030008 		.word	134218625
 2699 032c F5030008 		.word	134218741
 2700 0330 55020008 		.word	134218325
 2701 0334 2D040008 		.word	134218797
 2702 0338 1D020008 		.word	134218269
 2703 033c 00000000 		.word	.LANCHOR3
 2704 0340 00000000 		.word	.LANCHOR2
 2705 0344 00000000 		.word	.LANCHOR13
 2706 0348 00000000 		.word	.LANCHOR14
 2707 034c 00000000 		.word	.LANCHOR1
 2708 0350 00000000 		.word	Pause
 2709 0354 F9030008 		.word	134218745
 2710 0358 59030008 		.word	134218585
 2711              	.LVL239:
 2712              	.L187:
 111:src/console.c ****   case KEY_F3:
 2713              		.loc 2 111 5 is_stmt 1 view .LVU731
 111:src/console.c ****   case KEY_F3:
 2714              		.loc 2 111 9 is_stmt 0 view .LVU732
 2715 035c FFF7FEFF 		bl	cur_shift
 2716              	.LVL240:
 111:src/console.c ****   case KEY_F3:
 2717              		.loc 2 111 8 view .LVU733
 2718 0360 0128     		cmp	r0, #1
ARM GAS  /tmp/ccGwc1Zz.s 			page 74


 2719 0362 00F01581 		beq	.L230
 2720              	.L183:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2721              		.loc 2 113 5 is_stmt 1 view .LVU734
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2722              		.loc 2 113 9 is_stmt 0 view .LVU735
 2723 0366 FFF7FEFF 		bl	cur_shift
 2724              	.LVL241:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2725              		.loc 2 113 8 view .LVU736
 2726 036a 0028     		cmp	r0, #0
 2727 036c 9AD1     		bne	.L188
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2728              		.loc 2 113 33 is_stmt 1 view .LVU737
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2729              		.loc 2 113 67 is_stmt 0 view .LVU738
 2730 036e DBF80030 		ldr	r3, [fp]
 2731 0372 AA4F     		ldr	r7, .L237
 2732 0374 D022     		movs	r2, #208
 2733 0376 02FB03F2 		mul	r2, r2, r3
 2734 037a BB18     		adds	r3, r7, r2
 2735 037c D3E91401 		ldrd	r0, r1, [r3, #80]
 2736 0380 5032     		adds	r2, r2, #80
 2737 0382 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2738              	.LVL242:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2739              		.loc 2 113 67 view .LVU739
 2740 0384 85E80300 		stm	r5, {r0, r1}
 2741 0388 3A44     		add	r2, r2, r7
 2742 038a D2F804A0 		ldr	r10, [r2, #4]
 2743              	.LVL243:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2744              		.loc 2 113 67 view .LVU740
 2745 038e BBE6     		b	.L170
 2746              	.LVL244:
 2747              	.L186:
 108:src/console.c ****   case KEY_F2:
 2748              		.loc 2 108 5 is_stmt 1 view .LVU741
 108:src/console.c ****   case KEY_F2:
 2749              		.loc 2 108 9 is_stmt 0 view .LVU742
 2750 0390 FFF7FEFF 		bl	cur_shift
 2751              	.LVL245:
 108:src/console.c ****   case KEY_F2:
 2752              		.loc 2 108 8 view .LVU743
 2753 0394 0128     		cmp	r0, #1
 2754 0396 00F00C81 		beq	.L231
 2755              	.L184:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2756              		.loc 2 110 5 is_stmt 1 view .LVU744
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2757              		.loc 2 110 9 is_stmt 0 view .LVU745
 2758 039a FFF7FEFF 		bl	cur_shift
 2759              	.LVL246:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2760              		.loc 2 110 8 view .LVU746
 2761 039e 0028     		cmp	r0, #0
 2762 03a0 DCD1     		bne	.L187
ARM GAS  /tmp/ccGwc1Zz.s 			page 75


 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2763              		.loc 2 110 33 is_stmt 1 view .LVU747
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2764              		.loc 2 110 67 is_stmt 0 view .LVU748
 2765 03a2 DBF80030 		ldr	r3, [fp]
 2766 03a6 D022     		movs	r2, #208
 2767 03a8 02FB03F2 		mul	r2, r2, r3
 2768 03ac 9B4B     		ldr	r3, .L237
 2769 03ae 1F46     		mov	r7, r3
 2770 03b0 1344     		add	r3, r3, r2
 2771 03b2 D3E90C01 		ldrd	r0, r1, [r3, #48]
 2772 03b6 3032     		adds	r2, r2, #48
 2773 03b8 85E80300 		stm	r5, {r0, r1}
 2774 03bc BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2775              	.LVL247:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2776              		.loc 2 110 67 view .LVU749
 2777 03be 3A44     		add	r2, r2, r7
 2778 03c0 D2F804A0 		ldr	r10, [r2, #4]
 2779              	.LVL248:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2780              		.loc 2 110 67 view .LVU750
 2781 03c4 A0E6     		b	.L170
 2782              	.LVL249:
 2783              	.L185:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2784              		.loc 2 107 5 is_stmt 1 view .LVU751
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2785              		.loc 2 107 9 is_stmt 0 view .LVU752
 2786 03c6 FFF7FEFF 		bl	cur_shift
 2787              	.LVL250:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2788              		.loc 2 107 8 view .LVU753
 2789 03ca 0028     		cmp	r0, #0
 2790 03cc E0D1     		bne	.L186
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2791              		.loc 2 107 33 is_stmt 1 view .LVU754
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2792              		.loc 2 107 67 is_stmt 0 view .LVU755
 2793 03ce DBF80030 		ldr	r3, [fp]
 2794 03d2 924F     		ldr	r7, .L237
 2795 03d4 D022     		movs	r2, #208
 2796 03d6 02FB03F2 		mul	r2, r2, r3
 2797 03da BB18     		adds	r3, r7, r2
 2798 03dc D3E90401 		ldrd	r0, r1, [r3, #16]
 2799 03e0 1032     		adds	r2, r2, #16
 2800 03e2 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2801              	.LVL251:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2802              		.loc 2 107 67 view .LVU756
 2803 03e4 85E80300 		stm	r5, {r0, r1}
 2804 03e8 3A44     		add	r2, r2, r7
 2805 03ea D2F804A0 		ldr	r10, [r2, #4]
 2806              	.LVL252:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2807              		.loc 2 107 67 view .LVU757
 2808 03ee 8BE6     		b	.L170
ARM GAS  /tmp/ccGwc1Zz.s 			page 76


 2809              	.LVL253:
 2810              	.L168:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2811              		.loc 2 107 67 view .LVU758
 2812              	.LBE111:
 2813              	.LBE137:
 477:src/console.c ****       remapped = remap(c);
 2814              		.loc 2 477 5 is_stmt 1 view .LVU759
 477:src/console.c ****       remapped = remap(c);
 2815              		.loc 2 477 8 is_stmt 0 view .LVU760
 2816 03f0 7FF434AE 		bne	.L152
 2817 03f4 76E6     		b	.L171
 2818              	.L167:
 477:src/console.c ****       remapped = remap(c);
 2819              		.loc 2 477 5 is_stmt 1 view .LVU761
 478:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2820              		.loc 2 478 7 view .LVU762
 2821              	.LVL254:
 2822              	.LBB138:
  60:src/console.c **** 
 2823              		.loc 2 60 22 view .LVU763
 2824              	.LBB112:
  62:src/console.c **** 
 2825              		.loc 2 62 3 view .LVU764
   1:src/keytran.c ****     {K_RELEASE, -1},
 2826              		.loc 3 1 1 view .LVU765
  59:src/keytran.c ****     {K_RELEASE, -1},
 2827              		.loc 3 59 3 view .LVU766
 117:src/keytran.c ****     {K_RELEASE, -1},
 2828              		.loc 3 117 3 view .LVU767
 2829              		.loc 3 175 1 view .LVU768
  66:src/console.c **** 
 2830              		.loc 2 66 3 view .LVU769
  66:src/console.c **** 
 2831              		.loc 2 66 23 view .LVU770
  66:src/console.c **** 
 2832              		.loc 2 66 30 is_stmt 0 view .LVU771
 2833 03f6 8A4B     		ldr	r3, .L237+4
 2834 03f8 93E80300 		ldm	r3, {r0, r1}
 2835              	.LVL255:
  66:src/console.c **** 
 2836              		.loc 2 66 30 view .LVU772
 2837 03fc 85E80300 		stm	r5, {r0, r1}
 2838 0400 8A46     		mov	r10, r1
 2839              	.LVL256:
  66:src/console.c **** 
 2840              		.loc 2 66 30 view .LVU773
 2841 0402 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2842              	.LVL257:
  66:src/console.c **** 
 2843              		.loc 2 66 30 view .LVU774
 2844 0404 80E6     		b	.L170
 2845              	.LVL258:
 2846              	.L220:
  72:src/console.c ****     // Make screenshot - allow to report errors
 2847              		.loc 2 72 5 is_stmt 1 view .LVU775
 2848 0406 874B     		ldr	r3, .L237+8
ARM GAS  /tmp/ccGwc1Zz.s 			page 77


 2849 0408 41F23010 		movw	r0, #4400
 2850 040c 9847     		blx	r3
 2851              	.LVL259:
  72:src/console.c ****     // Make screenshot - allow to report errors
 2852              		.loc 2 72 30 view .LVU776
 2853 040e 0A20     		movs	r0, #10
 2854 0410 854B     		ldr	r3, .L237+12
 2855 0412 9847     		blx	r3
 2856              	.LVL260:
  72:src/console.c ****     // Make screenshot - allow to report errors
 2857              		.loc 2 72 45 view .LVU777
 2858 0414 854B     		ldr	r3, .L237+16
 2859 0416 9847     		blx	r3
 2860              	.LVL261:
  74:src/console.c ****       // Was error just wait for confirmation
 2861              		.loc 2 74 5 view .LVU778
  74:src/console.c ****       // Was error just wait for confirmation
 2862              		.loc 2 74 10 is_stmt 0 view .LVU779
 2863 0418 854B     		ldr	r3, .L237+20
 2864 041a 0120     		movs	r0, #1
 2865 041c 9847     		blx	r3
 2866              	.LVL262:
  74:src/console.c ****       // Was error just wait for confirmation
 2867              		.loc 2 74 8 view .LVU780
 2868 041e 0228     		cmp	r0, #2
 2869 0420 01D1     		bne	.L172
  76:src/console.c ****     }
 2870              		.loc 2 76 7 is_stmt 1 view .LVU781
 2871 0422 844B     		ldr	r3, .L237+24
 2872 0424 9847     		blx	r3
 2873              	.LVL263:
 2874              	.L172:
  79:src/console.c ****     return no_key;
 2875              		.loc 2 79 5 view .LVU782
 2876 0426 7F4B     		ldr	r3, .L237+8
 2877 0428 42F26020 		movw	r0, #8800
 2878 042c 9847     		blx	r3
 2879              	.LVL264:
  79:src/console.c ****     return no_key;
 2880              		.loc 2 79 30 view .LVU783
 2881 042e 0A20     		movs	r0, #10
 2882 0430 7D4B     		ldr	r3, .L237+12
 2883 0432 9847     		blx	r3
 2884              	.LVL265:
  79:src/console.c ****     return no_key;
 2885              		.loc 2 79 45 view .LVU784
 2886 0434 7D4B     		ldr	r3, .L237+16
 2887 0436 9847     		blx	r3
 2888              	.LVL266:
  80:src/console.c ****   }
 2889              		.loc 2 80 5 view .LVU785
  80:src/console.c ****   }
 2890              		.loc 2 80 12 is_stmt 0 view .LVU786
 2891 0438 7F4B     		ldr	r3, .L237+28
 2892 043a 93E80300 		ldm	r3, {r0, r1}
 2893 043e 85E80300 		stm	r5, {r0, r1}
 2894 0442 8A46     		mov	r10, r1
ARM GAS  /tmp/ccGwc1Zz.s 			page 78


 2895              	.LVL267:
  80:src/console.c ****   }
 2896              		.loc 2 80 12 view .LVU787
 2897 0444 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2898              	.LVL268:
  80:src/console.c ****   }
 2899              		.loc 2 80 12 view .LVU788
 2900 0446 5FE6     		b	.L170
 2901              	.LVL269:
 2902              	.L223:
  80:src/console.c ****   }
 2903              		.loc 2 80 12 view .LVU789
 2904              	.LBE112:
 2905              	.LBE138:
 503:src/console.c **** 	display_current_menu();
 2906              		.loc 2 503 2 is_stmt 1 view .LVU790
 503:src/console.c **** 	display_current_menu();
 2907              		.loc 2 503 13 is_stmt 0 view .LVU791
 2908 0448 8DF81030 		strb	r3, [sp, #16]
 2909 044c CDF814A0 		str	r10, [sp, #20]
 2910 0450 95E80600 		ldm	r5, {r1, r2}
 2911 0454 02A8     		add	r0, sp, #8
 2912 0456 FFF7FEFF 		bl	do_multi
 2913              	.LVL270:
 503:src/console.c **** 	display_current_menu();
 2914              		.loc 2 503 13 view .LVU792
 2915 045a 02AB     		add	r3, sp, #8
 2916 045c 93E80300 		ldm	r3, {r0, r1}
 2917 0460 85E80300 		stm	r5, {r0, r1}
 2918              	.LVL271:
 2919              	.LBB139:
 2920              	.LBB140:
  22:src/menu.c    **** }
 2921              		.loc 1 22 3 view .LVU793
 2922 0464 DBF80000 		ldr	r0, [fp]
 2923              	.LBE140:
 2924              	.LBE139:
 503:src/console.c **** 	display_current_menu();
 2925              		.loc 2 503 13 view .LVU794
 2926 0468 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 2927 046c 0193     		str	r3, [sp, #4]
 2928              	.LVL272:
 503:src/console.c **** 	display_current_menu();
 2929              		.loc 2 503 13 view .LVU795
 2930 046e DDF814A0 		ldr	r10, [sp, #20]
 2931              	.LVL273:
 504:src/console.c ****       }
 2932              		.loc 2 504 2 is_stmt 1 view .LVU796
 2933              	.LBB142:
 2934              	.LBI139:
  21:src/menu.c    ****   display_menu (current_menu);
 2935              		.loc 1 21 6 view .LVU797
 2936              	.LBB141:
  22:src/menu.c    **** }
 2937              		.loc 1 22 3 view .LVU798
 2938 0472 FFF7FEFF 		bl	display_menu
 2939              	.LVL274:
ARM GAS  /tmp/ccGwc1Zz.s 			page 79


  23:src/menu.c    **** 
 2940              		.loc 1 23 1 is_stmt 0 view .LVU799
 2941 0476 019B     		ldr	r3, [sp, #4]
 2942 0478 69E6     		b	.L175
 2943              	.LVL275:
 2944              	.L219:
  23:src/menu.c    **** 
 2945              		.loc 1 23 1 view .LVU800
 2946              	.LBE141:
 2947              	.LBE142:
 2948              	.LBB143:
 2949              	.LBB113:
  68:src/console.c **** 
 2950              		.loc 2 68 16 is_stmt 1 view .LVU801
  68:src/console.c **** 
 2951              		.loc 2 68 23 is_stmt 0 view .LVU802
 2952 047a 704B     		ldr	r3, .L237+32
 2953 047c 93E80300 		ldm	r3, {r0, r1}
 2954 0480 85E80300 		stm	r5, {r0, r1}
 2955 0484 8A46     		mov	r10, r1
 2956              	.LVL276:
  68:src/console.c **** 
 2957              		.loc 2 68 23 view .LVU803
 2958 0486 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2959              	.LVL277:
  68:src/console.c **** 
 2960              		.loc 2 68 23 view .LVU804
 2961 0488 3EE6     		b	.L170
 2962              	.LVL278:
 2963              	.L204:
  68:src/console.c **** 
 2964              		.loc 2 68 23 view .LVU805
 2965              	.LBE113:
 2966              	.LBE143:
 2967              	.LBB144:
 2968              	.LBB130:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2969              		.loc 1 4 7 view .LVU806
 2970 048a 9A46     		mov	r10, r3
 2971              	.LVL279:
 2972              	.L196:
   6:src/menu.c    ****   }
 2973              		.loc 1 6 5 is_stmt 1 view .LVU807
   6:src/menu.c    ****   }
 2974              		.loc 1 6 18 is_stmt 0 view .LVU808
 2975 048c 0022     		movs	r2, #0
 2976 048e 5346     		mov	r3, r10
 2977              	.LVL280:
   6:src/menu.c    ****   }
 2978              		.loc 1 6 18 view .LVU809
 2979 0490 CBF80020 		str	r2, [fp]
 2980              	.LVL281:
   6:src/menu.c    ****   }
 2981              		.loc 1 6 18 view .LVU810
 2982 0494 9246     		mov	r10, r2
 2983 0496 D9E6     		b	.L199
 2984              	.LVL282:
ARM GAS  /tmp/ccGwc1Zz.s 			page 80


 2985              	.L227:
   9:src/menu.c    ****   }
 2986              		.loc 1 9 5 is_stmt 1 view .LVU811
   9:src/menu.c    ****   }
 2987              		.loc 1 9 18 is_stmt 0 view .LVU812
 2988 0498 694A     		ldr	r2, .L237+36
 2989 049a D2F800A0 		ldr	r10, [r2]
 2990              	.LVL283:
   9:src/menu.c    ****   }
 2991              		.loc 1 9 18 view .LVU813
 2992 049e CBF800A0 		str	r10, [fp]
 2993 04a2 D3E6     		b	.L199
 2994              	.LVL284:
 2995              	.L221:
   9:src/menu.c    ****   }
 2996              		.loc 1 9 18 view .LVU814
 2997              	.LBE130:
 2998              	.LBE144:
 2999              	.LBB145:
 3000              	.LBB114:
  86:src/console.c ****       case SHIFT_N:
 3001              		.loc 2 86 7 is_stmt 1 view .LVU815
  86:src/console.c ****       case SHIFT_N:
 3002              		.loc 2 86 15 is_stmt 0 view .LVU816
 3003 04a4 FFF7FEFF 		bl	cur_shift
 3004              	.LVL285:
  86:src/console.c ****       case SHIFT_N:
 3005              		.loc 2 86 7 view .LVU817
 3006 04a8 0328     		cmp	r0, #3
  86:src/console.c ****       case SHIFT_N:
 3007              		.loc 2 86 15 view .LVU818
 3008 04aa 0346     		mov	r3, r0
  86:src/console.c ****       case SHIFT_N:
 3009              		.loc 2 86 7 view .LVU819
 3010 04ac 00F2A980 		bhi	.L202
 3011 04b0 0128     		cmp	r0, #1
 3012 04b2 21D8     		bhi	.L176
 3013 04b4 0028     		cmp	r0, #0
 3014 04b6 00F08D80 		beq	.L232
  89:src/console.c ****       case SHIFT_F:
 3015              		.loc 2 89 2 is_stmt 1 view .LVU820
  91:src/console.c **** 	break;
 3016              		.loc 2 91 2 view .LVU821
  91:src/console.c **** 	break;
 3017              		.loc 2 91 23 is_stmt 0 view .LVU822
 3018 04ba 624B     		ldr	r3, .L237+40
 3019 04bc 93E80300 		ldm	r3, {r0, r1}
 3020 04c0 4FF0000A 		mov	r10, #0
 3021              	.LVL286:
  91:src/console.c **** 	break;
 3022              		.loc 2 91 23 view .LVU823
 3023 04c4 85E80300 		stm	r5, {r0, r1}
 3024              	.LVL287:
  91:src/console.c **** 	break;
 3025              		.loc 2 91 23 view .LVU824
 3026              	.LBE114:
 3027              	.LBE145:
ARM GAS  /tmp/ccGwc1Zz.s 			page 81


 479:src/console.c **** 	set_menu ( remapped.shift );
 3028              		.loc 2 479 7 is_stmt 1 view .LVU825
 495:src/console.c **** 	SET_ST(STAT_MENU);
 3029              		.loc 2 495 7 view .LVU826
 502:src/console.c **** 	remapped = do_multi (remapped);
 3030              		.loc 2 502 7 view .LVU827
 3031              	.LBB146:
 3032              	.LBB115:
  91:src/console.c **** 	break;
 3033              		.loc 2 91 23 is_stmt 0 view .LVU828
 3034 04c8 2A23     		movs	r3, #42
 3035 04ca 40E6     		b	.L175
 3036              	.LVL288:
 3037              	.L191:
 123:src/console.c ****   }
 3038              		.loc 2 123 5 is_stmt 1 view .LVU829
 123:src/console.c ****   }
 3039              		.loc 2 123 9 is_stmt 0 view .LVU830
 3040 04cc FFF7FEFF 		bl	cur_shift
 3041              	.LVL289:
 123:src/console.c ****   }
 3042              		.loc 2 123 8 view .LVU831
 3043 04d0 0128     		cmp	r0, #1
 3044 04d2 19D0     		beq	.L233
 3045              	.L178:
 126:src/console.c ****   case SHIFT_N:    
 3046              		.loc 2 126 3 is_stmt 1 view .LVU832
 126:src/console.c ****   case SHIFT_N:    
 3047              		.loc 2 126 11 is_stmt 0 view .LVU833
 3048 04d4 FFF7FEFF 		bl	cur_shift
 3049              	.LVL290:
 126:src/console.c ****   case SHIFT_N:    
 3050              		.loc 2 126 3 view .LVU834
 3051 04d8 0128     		cmp	r0, #1
 3052 04da 00F09080 		beq	.L192
 3053 04de 0228     		cmp	r0, #2
 3054 04e0 00F08280 		beq	.L193
 3055 04e4 0028     		cmp	r0, #0
 3056 04e6 7DD0     		beq	.L194
  62:src/console.c **** 
 3057              		.loc 2 62 41 view .LVU835
 3058 04e8 5FFA8AF3 		uxtb	r3, r10
 3059              	.LVL291:
  62:src/console.c **** 
 3060              		.loc 2 62 41 view .LVU836
 3061              	.LBE115:
 3062              	.LBE146:
 479:src/console.c **** 	set_menu ( remapped.shift );
 3063              		.loc 2 479 7 is_stmt 1 view .LVU837
 479:src/console.c **** 	set_menu ( remapped.shift );
 3064              		.loc 2 479 10 is_stmt 0 view .LVU838
 3065 04ec 2F2B     		cmp	r3, #47
 3066 04ee 00F08C80 		beq	.L234
 3067              	.LBB147:
 3068              	.LBB116:
 137:src/console.c ****   }
 3069              		.loc 2 137 12 view .LVU839
ARM GAS  /tmp/ccGwc1Zz.s 			page 82


 3070 04f2 4FF0000A 		mov	r10, #0
 3071              	.LVL292:
 137:src/console.c ****   }
 3072              		.loc 2 137 12 view .LVU840
 3073 04f6 0AE6     		b	.L195
 3074              	.LVL293:
 3075              	.L176:
  92:src/console.c ****       case SHIFT_G:
 3076              		.loc 2 92 2 is_stmt 1 view .LVU841
  94:src/console.c **** 	break;
 3077              		.loc 2 94 2 view .LVU842
  94:src/console.c **** 	break;
 3078              		.loc 2 94 9 is_stmt 0 view .LVU843
 3079 04f8 534B     		ldr	r3, .L237+44
 3080 04fa 93E80300 		ldm	r3, {r0, r1}
 3081 04fe 85E80300 		stm	r5, {r0, r1}
 3082 0502 8A46     		mov	r10, r1
 3083              	.LVL294:
  94:src/console.c **** 	break;
 3084              		.loc 2 94 9 view .LVU844
 3085 0504 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3086              	.LVL295:
  94:src/console.c **** 	break;
 3087              		.loc 2 94 9 view .LVU845
 3088 0506 FFE5     		b	.L170
 3089              	.LVL296:
 3090              	.L233:
 123:src/console.c ****   }
 3091              		.loc 2 123 33 is_stmt 1 view .LVU846
 123:src/console.c ****   }
 3092              		.loc 2 123 67 is_stmt 0 view .LVU847
 3093 0508 DBF80030 		ldr	r3, [fp]
 3094 050c 434F     		ldr	r7, .L237
 3095 050e D022     		movs	r2, #208
 3096 0510 02FB03F2 		mul	r2, r2, r3
 3097 0514 BB18     		adds	r3, r7, r2
 3098 0516 D3E92E01 		ldrd	r0, r1, [r3, #184]
 3099 051a B832     		adds	r2, r2, #184
 3100 051c BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3101              	.LVL297:
 123:src/console.c ****   }
 3102              		.loc 2 123 67 view .LVU848
 3103 051e 85E80300 		stm	r5, {r0, r1}
 3104 0522 3A44     		add	r2, r2, r7
 3105 0524 D2F804A0 		ldr	r10, [r2, #4]
 3106              	.LVL298:
 123:src/console.c ****   }
 3107              		.loc 2 123 67 view .LVU849
 3108 0528 EEE5     		b	.L170
 3109              	.LVL299:
 3110              	.L226:
 120:src/console.c ****   case KEY_F6:
 3111              		.loc 2 120 33 is_stmt 1 view .LVU850
 120:src/console.c ****   case KEY_F6:
 3112              		.loc 2 120 67 is_stmt 0 view .LVU851
 3113 052a DBF80030 		ldr	r3, [fp]
 3114 052e 3B4F     		ldr	r7, .L237
ARM GAS  /tmp/ccGwc1Zz.s 			page 83


 3115 0530 D022     		movs	r2, #208
 3116 0532 02FB03F2 		mul	r2, r2, r3
 3117 0536 BB18     		adds	r3, r7, r2
 3118 0538 D3E92601 		ldrd	r0, r1, [r3, #152]
 3119 053c 9832     		adds	r2, r2, #152
 3120 053e BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3121              	.LVL300:
 120:src/console.c ****   case KEY_F6:
 3122              		.loc 2 120 67 view .LVU852
 3123 0540 85E80300 		stm	r5, {r0, r1}
 3124 0544 3A44     		add	r2, r2, r7
 3125 0546 D2F804A0 		ldr	r10, [r2, #4]
 3126              	.LVL301:
 120:src/console.c ****   case KEY_F6:
 3127              		.loc 2 120 67 view .LVU853
 3128 054a DDE5     		b	.L170
 3129              	.LVL302:
 3130              	.L228:
 117:src/console.c ****   case KEY_F5:
 3131              		.loc 2 117 33 is_stmt 1 view .LVU854
 117:src/console.c ****   case KEY_F5:
 3132              		.loc 2 117 67 is_stmt 0 view .LVU855
 3133 054c DBF80030 		ldr	r3, [fp]
 3134 0550 324F     		ldr	r7, .L237
 3135 0552 D022     		movs	r2, #208
 3136 0554 02FB03F2 		mul	r2, r2, r3
 3137 0558 BB18     		adds	r3, r7, r2
 3138 055a D3E91E01 		ldrd	r0, r1, [r3, #120]
 3139 055e 7832     		adds	r2, r2, #120
 3140 0560 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3141              	.LVL303:
 117:src/console.c ****   case KEY_F5:
 3142              		.loc 2 117 67 view .LVU856
 3143 0562 85E80300 		stm	r5, {r0, r1}
 3144 0566 3A44     		add	r2, r2, r7
 3145 0568 D2F804A0 		ldr	r10, [r2, #4]
 3146              	.LVL304:
 117:src/console.c ****   case KEY_F5:
 3147              		.loc 2 117 67 view .LVU857
 3148 056c CCE5     		b	.L170
 3149              	.LVL305:
 3150              	.L229:
 114:src/console.c ****   case KEY_F4:
 3151              		.loc 2 114 33 is_stmt 1 view .LVU858
 114:src/console.c ****   case KEY_F4:
 3152              		.loc 2 114 67 is_stmt 0 view .LVU859
 3153 056e DBF80030 		ldr	r3, [fp]
 3154 0572 2A4F     		ldr	r7, .L237
 3155 0574 D022     		movs	r2, #208
 3156 0576 02FB03F2 		mul	r2, r2, r3
 3157 057a BB18     		adds	r3, r7, r2
 3158 057c D3E91601 		ldrd	r0, r1, [r3, #88]
 3159 0580 5832     		adds	r2, r2, #88
 3160 0582 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3161              	.LVL306:
 114:src/console.c ****   case KEY_F4:
 3162              		.loc 2 114 67 view .LVU860
ARM GAS  /tmp/ccGwc1Zz.s 			page 84


 3163 0584 85E80300 		stm	r5, {r0, r1}
 3164 0588 3A44     		add	r2, r2, r7
 3165 058a D2F804A0 		ldr	r10, [r2, #4]
 3166              	.LVL307:
 114:src/console.c ****   case KEY_F4:
 3167              		.loc 2 114 67 view .LVU861
 3168 058e BBE5     		b	.L170
 3169              	.LVL308:
 3170              	.L230:
 111:src/console.c ****   case KEY_F3:
 3171              		.loc 2 111 33 is_stmt 1 view .LVU862
 111:src/console.c ****   case KEY_F3:
 3172              		.loc 2 111 67 is_stmt 0 view .LVU863
 3173 0590 DBF80030 		ldr	r3, [fp]
 3174 0594 214F     		ldr	r7, .L237
 3175 0596 D022     		movs	r2, #208
 3176 0598 02FB03F2 		mul	r2, r2, r3
 3177 059c BB18     		adds	r3, r7, r2
 3178 059e D3E90E01 		ldrd	r0, r1, [r3, #56]
 3179 05a2 3832     		adds	r2, r2, #56
 3180 05a4 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3181              	.LVL309:
 111:src/console.c ****   case KEY_F3:
 3182              		.loc 2 111 67 view .LVU864
 3183 05a6 85E80300 		stm	r5, {r0, r1}
 3184 05aa 3A44     		add	r2, r2, r7
 3185 05ac D2F804A0 		ldr	r10, [r2, #4]
 3186              	.LVL310:
 111:src/console.c ****   case KEY_F3:
 3187              		.loc 2 111 67 view .LVU865
 3188 05b0 AAE5     		b	.L170
 3189              	.LVL311:
 3190              	.L231:
 108:src/console.c ****   case KEY_F2:
 3191              		.loc 2 108 33 is_stmt 1 view .LVU866
 108:src/console.c ****   case KEY_F2:
 3192              		.loc 2 108 67 is_stmt 0 view .LVU867
 3193 05b2 DBF80030 		ldr	r3, [fp]
 3194 05b6 194F     		ldr	r7, .L237
 3195 05b8 D022     		movs	r2, #208
 3196 05ba 02FB03F2 		mul	r2, r2, r3
 3197 05be BB18     		adds	r3, r7, r2
 3198 05c0 D3E90601 		ldrd	r0, r1, [r3, #24]
 3199 05c4 1832     		adds	r2, r2, #24
 3200 05c6 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3201              	.LVL312:
 108:src/console.c ****   case KEY_F2:
 3202              		.loc 2 108 67 view .LVU868
 3203 05c8 85E80300 		stm	r5, {r0, r1}
 3204 05cc 3A44     		add	r2, r2, r7
 3205 05ce D2F804A0 		ldr	r10, [r2, #4]
 3206              	.LVL313:
 108:src/console.c ****   case KEY_F2:
 3207              		.loc 2 108 67 view .LVU869
 3208 05d2 99E5     		b	.L170
 3209              	.LVL314:
 3210              	.L232:
ARM GAS  /tmp/ccGwc1Zz.s 			page 85


  88:src/console.c **** 	break;
 3211              		.loc 2 88 2 is_stmt 1 view .LVU870
  88:src/console.c **** 	break;
 3212              		.loc 2 88 21 is_stmt 0 view .LVU871
 3213 05d4 1D4A     		ldr	r2, .L237+48
 3214 05d6 92E80300 		ldm	r2, {r0, r1}
 3215 05da 9A46     		mov	r10, r3
 3216              	.LVL315:
  88:src/console.c **** 	break;
 3217              		.loc 2 88 21 view .LVU872
 3218 05dc 85E80300 		stm	r5, {r0, r1}
 3219              	.LVL316:
  88:src/console.c **** 	break;
 3220              		.loc 2 88 21 view .LVU873
 3221              	.LBE116:
 3222              	.LBE147:
 479:src/console.c **** 	set_menu ( remapped.shift );
 3223              		.loc 2 479 7 is_stmt 1 view .LVU874
 495:src/console.c **** 	SET_ST(STAT_MENU);
 3224              		.loc 2 495 7 view .LVU875
 502:src/console.c **** 	remapped = do_multi (remapped);
 3225              		.loc 2 502 7 view .LVU876
 3226              	.LBB148:
 3227              	.LBB117:
  88:src/console.c **** 	break;
 3228              		.loc 2 88 21 is_stmt 0 view .LVU877
 3229 05e0 2923     		movs	r3, #41
 3230 05e2 B4E5     		b	.L175
 3231              	.LVL317:
 3232              	.L194:
 128:src/console.c ****     break;
 3233              		.loc 2 128 5 is_stmt 1 view .LVU878
 128:src/console.c ****     break;
 3234              		.loc 2 128 24 is_stmt 0 view .LVU879
 3235 05e4 1A4A     		ldr	r2, .L237+52
 3236 05e6 86E5     		b	.L218
 3237              	.L193:
 132:src/console.c ****   case SHIFT_G:
 3238              		.loc 2 132 5 is_stmt 1 view .LVU880
 134:src/console.c ****     break;
 3239              		.loc 2 134 5 view .LVU881
 134:src/console.c ****     break;
 3240              		.loc 2 134 26 is_stmt 0 view .LVU882
 3241 05e8 1A4A     		ldr	r2, .L237+56
 3242 05ea 02EBCA03 		add	r3, r2, r10, lsl #3
 3243 05ee 93E80300 		ldm	r3, {r0, r1}
 3244 05f2 12F83A30 		ldrb	r3, [r2, r10, lsl #3]	@ zero_extendqisi2
 3245              	.LVL318:
 134:src/console.c ****     break;
 3246              		.loc 2 134 26 view .LVU883
 3247 05f6 85E80300 		stm	r5, {r0, r1}
 3248 05fa 8A46     		mov	r10, r1
 3249              	.LVL319:
 134:src/console.c ****     break;
 3250              		.loc 2 134 26 view .LVU884
 3251 05fc 84E5     		b	.L170
 3252              	.LVL320:
ARM GAS  /tmp/ccGwc1Zz.s 			page 86


 3253              	.L192:
 129:src/console.c ****   case SHIFT_F:
 3254              		.loc 2 129 5 is_stmt 1 view .LVU885
 131:src/console.c ****     break;
 3255              		.loc 2 131 5 view .LVU886
 131:src/console.c ****     break;
 3256              		.loc 2 131 26 is_stmt 0 view .LVU887
 3257 05fe 164A     		ldr	r2, .L237+60
 3258 0600 79E5     		b	.L218
 3259              	.L202:
  86:src/console.c ****       case SHIFT_N:
 3260              		.loc 2 86 7 view .LVU888
 3261 0602 5346     		mov	r3, r10
 3262 0604 4FF0000A 		mov	r10, #0
 3263              	.LVL321:
  86:src/console.c ****       case SHIFT_N:
 3264              		.loc 2 86 7 view .LVU889
 3265 0608 A1E5     		b	.L175
 3266              	.LVL322:
 3267              	.L234:
  86:src/console.c ****       case SHIFT_N:
 3268              		.loc 2 86 7 view .LVU890
 3269              	.LBE117:
 3270              	.LBE148:
 480:src/console.c **** 	display_current_menu ();
 3271              		.loc 2 480 2 is_stmt 1 view .LVU891
 3272              	.LBB149:
   3:src/menu.c    ****   if (new_menu == current_menu) {
 3273              		.loc 1 3 6 view .LVU892
 3274              	.LBB131:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3275              		.loc 1 4 3 view .LVU893
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3276              		.loc 1 4 7 is_stmt 0 view .LVU894
 3277 060a DBF80030 		ldr	r3, [fp]
 3278              	.LVL323:
   5:src/menu.c    ****     current_menu = 0;
 3279              		.loc 1 5 3 is_stmt 1 view .LVU895
   5:src/menu.c    ****     current_menu = 0;
 3280              		.loc 1 5 6 is_stmt 0 view .LVU896
 3281 060e 002B     		cmp	r3, #0
 3282 0610 3FF43BAF 		beq	.L204
 3283              	.LBE131:
 3284              	.LBE149:
 3285              	.LBB150:
 3286              	.LBB118:
 137:src/console.c ****   }
 3287              		.loc 2 137 12 view .LVU897
 3288 0614 4FF0000A 		mov	r10, #0
 3289              	.LVL324:
 137:src/console.c ****   }
 3290              		.loc 2 137 12 view .LVU898
 3291 0618 16E6     		b	.L197
 3292              	.L238:
 3293 061a 00BF     		.align	2
 3294              	.L237:
 3295 061c 00000000 		.word	.LANCHOR3
ARM GAS  /tmp/ccGwc1Zz.s 			page 87


 3296 0620 00000000 		.word	.LANCHOR16
 3297 0624 F5020008 		.word	134218485
 3298 0628 05040008 		.word	134218757
 3299 062c F9020008 		.word	134218489
 3300 0630 79030008 		.word	134218617
 3301 0634 99030008 		.word	134218649
 3302 0638 00000000 		.word	.LANCHOR6
 3303 063c 00000000 		.word	.LANCHOR7
 3304 0640 00000000 		.word	.LANCHOR2
 3305 0644 E0000000 		.word	.LANCHOR9+224
 3306 0648 00000000 		.word	.LANCHOR10
 3307 064c E0000000 		.word	.LANCHOR8+224
 3308 0650 00000000 		.word	.LANCHOR8
 3309 0654 00000000 		.word	.LANCHOR12
 3310 0658 00000000 		.word	.LANCHOR9
 3311              	.LBE118:
 3312              	.LBE150:
 3313              		.cfi_endproc
 3314              	.LFE26:
 3316              		.global	n_p
 3317              		.comm	print_string,22,4
 3318              		.global	spaces
 3319              		.global	release
 3320              		.global	h_shift
 3321              		.global	g_shift
 3322              		.global	f_shift
 3323              		.global	heartbeat
 3324              		.global	no_key
 3325              		.global	MID_MENU
 3326              		.section	.rodata.str1.4,"aMS",%progbits,1
 3327              		.align	2
 3328              	.LC3:
 3329 0000 53797374 		.ascii	"System!\000"
 3329      656D2100 
 3330              		.global	mid_menu
 3331              		.section	.bss.current_menu,"aw",%nobits
 3332              		.align	2
 3333              		.set	.LANCHOR1,. + 0
 3336              	current_menu:
 3337 0000 00000000 		.space	4
 3338              		.section	.bss.last_menu,"aw",%nobits
 3339              		.align	2
 3340              		.set	.LANCHOR2,. + 0
 3343              	last_menu:
 3344 0000 00000000 		.space	4
 3345              		.section	.bss.mdots,"aw",%nobits
 3346              		.align	2
 3347              		.set	.LANCHOR0,. + 0
 3350              	mdots:
 3351 0000 00000000 		.space	400
 3351      00000000 
 3351      00000000 
 3351      00000000 
 3351      00000000 
 3352              		.section	.bss.n_p,"aw",%nobits
 3353              		.align	2
 3356              	n_p:
ARM GAS  /tmp/ccGwc1Zz.s 			page 88


 3357 0000 00000000 		.space	4
 3358              		.section	.bss.start_ticks,"aw",%nobits
 3359              		.align	2
 3360              		.set	.LANCHOR4,. + 0
 3363              	start_ticks:
 3364 0000 00000000 		.space	4
 3365              		.section	.data.f_shift,"aw"
 3366              		.align	2
 3367              		.set	.LANCHOR13,. + 0
 3370              	f_shift:
 3371 0000 29       		.byte	41
 3372 0001 000000   		.space	3
 3373 0004 FFFFFFFF 		.word	-1
 3374              		.section	.data.g_shift,"aw"
 3375              		.align	2
 3376              		.set	.LANCHOR14,. + 0
 3379              	g_shift:
 3380 0000 2A       		.byte	42
 3381 0001 000000   		.space	3
 3382 0004 FFFFFFFF 		.word	-1
 3383              		.section	.data.h_shift,"aw"
 3384              		.align	2
 3385              		.set	.LANCHOR10,. + 0
 3388              	h_shift:
 3389 0000 2B       		.byte	43
 3390 0001 000000   		.space	3
 3391 0004 FFFFFFFF 		.word	-1
 3392              		.section	.data.heartbeat,"aw"
 3393              		.align	2
 3394              		.set	.LANCHOR16,. + 0
 3397              	heartbeat:
 3398 0000 62       		.byte	98
 3399 0001 000000   		.space	3
 3400 0004 FFFFFFFF 		.word	-1
 3401              		.section	.data.no_key,"aw"
 3402              		.align	2
 3403              		.set	.LANCHOR6,. + 0
 3406              	no_key:
 3407 0000 2E       		.byte	46
 3408 0001 000000   		.space	3
 3409 0004 00000000 		.word	0
 3410              		.section	.data.release,"aw"
 3411              		.align	2
 3412              		.set	.LANCHOR7,. + 0
 3415              	release:
 3416 0000 63       		.byte	99
 3417 0001 000000   		.space	3
 3418 0004 FFFFFFFF 		.word	-1
 3419              		.section	.data.spaces,"aw"
 3420              		.align	2
 3421              		.set	.LANCHOR5,. + 0
 3424              	spaces:
 3425 0000 20202020 		.ascii	"                     \000"
 3425      20202020 
 3425      20202020 
 3425      20202020 
 3425      20202020 
ARM GAS  /tmp/ccGwc1Zz.s 			page 89


 3426              		.section	.rodata.MID_MENU,"a"
 3427              		.align	2
 3428              		.set	.LANCHOR15,. + 0
 3431              	MID_MENU:
 3432 0000 00000000 		.word	.LC3
 3433 0004 00000000 		.word	mid_menu
 3434 0008 00000000 		.word	0
 3435 000c 00000000 		.word	0
 3436              		.section	.rodata.Menus,"a"
 3437              		.align	2
 3438              		.set	.LANCHOR3,. + 0
 3441              	Menus:
 3442 0000 426C616E 		.ascii	"Blank\000"
 3442      6B00
 3443 0006 00000000 		.space	9
 3443      00000000 
 3443      00
 3444 000f 00       		.space	1
 3445 0010 2E       		.byte	46
 3446 0011 000000   		.space	3
 3447 0014 FFFFFFFF 		.word	-1
 3448 0018 2E       		.byte	46
 3449 0019 000000   		.space	3
 3450 001c FFFFFFFF 		.word	-1
 3451 0020 00       		.ascii	"\000"
 3452 0021 00000000 		.space	7
 3452      000000
 3453 0028 00       		.ascii	"\000"
 3454 0029 00000000 		.space	7
 3454      000000
 3455 0030 2E       		.byte	46
 3456 0031 000000   		.space	3
 3457 0034 FFFFFFFF 		.word	-1
 3458 0038 2E       		.byte	46
 3459 0039 000000   		.space	3
 3460 003c FFFFFFFF 		.word	-1
 3461 0040 00       		.ascii	"\000"
 3462 0041 00000000 		.space	7
 3462      000000
 3463 0048 00       		.ascii	"\000"
 3464 0049 00000000 		.space	7
 3464      000000
 3465 0050 2E       		.byte	46
 3466 0051 000000   		.space	3
 3467 0054 FFFFFFFF 		.word	-1
 3468 0058 2E       		.byte	46
 3469 0059 000000   		.space	3
 3470 005c FFFFFFFF 		.word	-1
 3471 0060 00       		.ascii	"\000"
 3472 0061 00000000 		.space	7
 3472      000000
 3473 0068 00       		.ascii	"\000"
 3474 0069 00000000 		.space	7
 3474      000000
 3475 0070 2E       		.byte	46
 3476 0071 000000   		.space	3
 3477 0074 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccGwc1Zz.s 			page 90


 3478 0078 2E       		.byte	46
 3479 0079 000000   		.space	3
 3480 007c FFFFFFFF 		.word	-1
 3481 0080 00       		.ascii	"\000"
 3482 0081 00000000 		.space	7
 3482      000000
 3483 0088 00       		.ascii	"\000"
 3484 0089 00000000 		.space	7
 3484      000000
 3485 0090 2C       		.byte	44
 3486 0091 000000   		.space	3
 3487 0094 FFFFFFFF 		.word	-1
 3488 0098 2E       		.byte	46
 3489 0099 000000   		.space	3
 3490 009c FFFFFFFF 		.word	-1
 3491 00a0 2D2D0D00 		.ascii	"--\015\000"
 3492 00a4 00000000 		.space	4
 3493 00a8 00       		.ascii	"\000"
 3494 00a9 00000000 		.space	7
 3494      000000
 3495 00b0 2D       		.byte	45
 3496 00b1 000000   		.space	3
 3497 00b4 FFFFFFFF 		.word	-1
 3498 00b8 2E       		.byte	46
 3499 00b9 000000   		.space	3
 3500 00bc FFFFFFFF 		.word	-1
 3501 00c0 43505800 		.ascii	"CPX\000"
 3502 00c4 00000000 		.space	4
 3503 00c8 00       		.ascii	"\000"
 3504 00c9 00000000 		.space	7
 3504      000000
 3505 00d0 436C6561 		.ascii	"Clear\000"
 3505      7200
 3506 00d6 00000000 		.space	9
 3506      00000000 
 3506      00
 3507 00df 00       		.space	1
 3508 00e0 10       		.byte	16
 3509 00e1 000000   		.space	3
 3510 00e4 01000000 		.word	1
 3511 00e8 2E       		.byte	46
 3512 00e9 000000   		.space	3
 3513 00ec FFFFFFFF 		.word	-1
 3514 00f0 434C5072 		.ascii	"CLProg\000"
 3514      6F6700
 3515 00f7 00       		.space	1
 3516 00f8 00       		.ascii	"\000"
 3517 00f9 00000000 		.space	7
 3517      000000
 3518 0100 10       		.byte	16
 3519 0101 000000   		.space	3
 3520 0104 02000000 		.word	2
 3521 0108 2E       		.byte	46
 3522 0109 000000   		.space	3
 3523 010c FFFFFFFF 		.word	-1
 3524 0110 434C9100 		.ascii	"CL\221\000"
 3525 0114 00000000 		.space	4
ARM GAS  /tmp/ccGwc1Zz.s 			page 91


 3526 0118 00       		.ascii	"\000"
 3527 0119 00000000 		.space	7
 3527      000000
 3528 0120 10       		.byte	16
 3529 0121 000000   		.space	3
 3530 0124 03000000 		.word	3
 3531 0128 2E       		.byte	46
 3532 0129 000000   		.space	3
 3533 012c FFFFFFFF 		.word	-1
 3534 0130 434C7800 		.ascii	"CLx\000"
 3535 0134 00000000 		.space	4
 3536 0138 00       		.ascii	"\000"
 3537 0139 00000000 		.space	7
 3537      000000
 3538 0140 2E       		.byte	46
 3539 0141 000000   		.space	3
 3540 0144 FFFFFFFF 		.word	-1
 3541 0148 2E       		.byte	46
 3542 0149 000000   		.space	3
 3543 014c FFFFFFFF 		.word	-1
 3544 0150 00       		.ascii	"\000"
 3545 0151 00000000 		.space	7
 3545      000000
 3546 0158 00       		.ascii	"\000"
 3547 0159 00000000 		.space	7
 3547      000000
 3548 0160 2C       		.byte	44
 3549 0161 000000   		.space	3
 3550 0164 FFFFFFFF 		.word	-1
 3551 0168 2E       		.byte	46
 3552 0169 000000   		.space	3
 3553 016c FFFFFFFF 		.word	-1
 3554 0170 2D2D0D00 		.ascii	"--\015\000"
 3555 0174 00000000 		.space	4
 3556 0178 00       		.ascii	"\000"
 3557 0179 00000000 		.space	7
 3557      000000
 3558 0180 2D       		.byte	45
 3559 0181 000000   		.space	3
 3560 0184 FFFFFFFF 		.word	-1
 3561 0188 2E       		.byte	46
 3562 0189 000000   		.space	3
 3563 018c FFFFFFFF 		.word	-1
 3564 0190 43505800 		.ascii	"CPX\000"
 3565 0194 00000000 		.space	4
 3566 0198 00       		.ascii	"\000"
 3567 0199 00000000 		.space	7
 3567      000000
 3568 01a0 44495350 		.ascii	"DISP\000"
 3568      00
 3569 01a5 00000000 		.space	10
 3569      00000000 
 3569      0000
 3570 01af 00       		.space	1
 3571 01b0 00       		.byte	0
 3572 01b1 000000   		.space	3
 3573 01b4 03000000 		.word	3
ARM GAS  /tmp/ccGwc1Zz.s 			page 92


 3574 01b8 05       		.byte	5
 3575 01b9 000000   		.space	3
 3576 01bc 01000000 		.word	1
 3577 01c0 414C4C00 		.ascii	"ALL\000"
 3578 01c4 00000000 		.space	4
 3579 01c8 6120622F 		.ascii	"a b/c\000"
 3579      6300
 3580 01ce 0000     		.space	2
 3581 01d0 01       		.byte	1
 3582 01d1 000000   		.space	3
 3583 01d4 03000000 		.word	3
 3584 01d8 05       		.byte	5
 3585 01d9 000000   		.space	3
 3586 01dc 02000000 		.word	2
 3587 01e0 46495800 		.ascii	"FIX\000"
 3588 01e4 00000000 		.space	4
 3589 01e8 642F6300 		.ascii	"d/c\000"
 3590 01ec 00000000 		.space	4
 3591 01f0 02       		.byte	2
 3592 01f1 000000   		.space	3
 3593 01f4 03000000 		.word	3
 3594 01f8 06       		.byte	6
 3595 01f9 000000   		.space	3
 3596 01fc 01000000 		.word	1
 3597 0200 53434900 		.ascii	"SCI\000"
 3598 0204 00000000 		.space	4
 3599 0208 482E4D2E 		.ascii	"H.M.S.\000"
 3599      532E00
 3600 020f 00       		.space	1
 3601 0210 03       		.byte	3
 3602 0211 000000   		.space	3
 3603 0214 03000000 		.word	3
 3604 0218 07       		.byte	7
 3605 0219 000000   		.space	3
 3606 021c 01000000 		.word	1
 3607 0220 454E4700 		.ascii	"ENG\000"
 3608 0224 00000000 		.space	4
 3609 0228 482E6400 		.ascii	"H.d\000"
 3610 022c 00000000 		.space	4
 3611 0230 2C       		.byte	44
 3612 0231 000000   		.space	3
 3613 0234 FFFFFFFF 		.word	-1
 3614 0238 26       		.byte	38
 3615 0239 000000   		.space	3
 3616 023c 03000000 		.word	3
 3617 0240 2D2D0D00 		.ascii	"--\015\000"
 3618 0244 00000000 		.space	4
 3619 0248 2E2F2C00 		.ascii	"./,\000"
 3620 024c 00000000 		.space	4
 3621 0250 2D       		.byte	45
 3622 0251 000000   		.space	3
 3623 0254 FFFFFFFF 		.word	-1
 3624 0258 2E       		.byte	46
 3625 0259 000000   		.space	3
 3626 025c FFFFFFFF 		.word	-1
 3627 0260 43505800 		.ascii	"CPX\000"
 3628 0264 00000000 		.space	4
ARM GAS  /tmp/ccGwc1Zz.s 			page 93


 3629 0268 00       		.ascii	"\000"
 3630 0269 00000000 		.space	7
 3630      000000
 3631 0270 42415345 		.ascii	"BASE\000"
 3631      00
 3632 0275 00000000 		.space	10
 3632      00000000 
 3632      0000
 3633 027f 00       		.space	1
 3634 0280 0E       		.byte	14
 3635 0281 000000   		.space	3
 3636 0284 01000000 		.word	1
 3637 0288 0E       		.byte	14
 3638 0289 000000   		.space	3
 3639 028c 03000000 		.word	3
 3640 0290 42494E00 		.ascii	"BIN\000"
 3641 0294 00000000 		.space	4
 3642 0298 6E6F7400 		.ascii	"not\000"
 3643 029c 00000000 		.space	4
 3644 02a0 0E       		.byte	14
 3645 02a1 000000   		.space	3
 3646 02a4 02000000 		.word	2
 3647 02a8 13       		.byte	19
 3648 02a9 000000   		.space	3
 3649 02ac 03000000 		.word	3
 3650 02b0 4F435400 		.ascii	"OCT\000"
 3651 02b4 00000000 		.space	4
 3652 02b8 616E6400 		.ascii	"and\000"
 3653 02bc 00000000 		.space	4
 3654 02c0 0F       		.byte	15
 3655 02c1 000000   		.space	3
 3656 02c4 01000000 		.word	1
 3657 02c8 14       		.byte	20
 3658 02c9 000000   		.space	3
 3659 02cc 03000000 		.word	3
 3660 02d0 44454300 		.ascii	"DEC\000"
 3661 02d4 00000000 		.space	4
 3662 02d8 6F7200   		.ascii	"or\000"
 3663 02db 00000000 		.space	5
 3663      00
 3664 02e0 0F       		.byte	15
 3665 02e1 000000   		.space	3
 3666 02e4 02000000 		.word	2
 3667 02e8 15       		.byte	21
 3668 02e9 000000   		.space	3
 3669 02ec 03000000 		.word	3
 3670 02f0 48455800 		.ascii	"HEX\000"
 3671 02f4 00000000 		.space	4
 3672 02f8 786F7200 		.ascii	"xor\000"
 3673 02fc 00000000 		.space	4
 3674 0300 2C       		.byte	44
 3675 0301 000000   		.space	3
 3676 0304 FFFFFFFF 		.word	-1
 3677 0308 16       		.byte	22
 3678 0309 000000   		.space	3
 3679 030c 03000000 		.word	3
 3680 0310 2D2D0D00 		.ascii	"--\015\000"
ARM GAS  /tmp/ccGwc1Zz.s 			page 94


 3681 0314 00000000 		.space	4
 3682 0318 524D4452 		.ascii	"RMDR\000"
 3682      00
 3683 031d 000000   		.space	3
 3684 0320 2D       		.byte	45
 3685 0321 000000   		.space	3
 3686 0324 FFFFFFFF 		.word	-1
 3687 0328 2E       		.byte	46
 3688 0329 000000   		.space	3
 3689 032c FFFFFFFF 		.word	-1
 3690 0330 43505800 		.ascii	"CPX\000"
 3691 0334 00000000 		.space	4
 3692 0338 00       		.ascii	"\000"
 3693 0339 00000000 		.space	7
 3693      000000
 3694 0340 414E474C 		.ascii	"ANGLES\000"
 3694      455300
 3695 0347 00000000 		.space	8
 3695      00000000 
 3696 034f 00       		.space	1
 3697 0350 06       		.byte	6
 3698 0351 000000   		.space	3
 3699 0354 02000000 		.word	2
 3700 0358 04       		.byte	4
 3701 0359 000000   		.space	3
 3702 035c 01000000 		.word	1
 3703 0360 44454700 		.ascii	"DEG\000"
 3704 0364 00000000 		.space	4
 3705 0368 500D5200 		.ascii	"P\015R\000"
 3706 036c 00000000 		.space	4
 3707 0370 07       		.byte	7
 3708 0371 000000   		.space	3
 3709 0374 02000000 		.word	2
 3710 0378 04       		.byte	4
 3711 0379 000000   		.space	3
 3712 037c 02000000 		.word	2
 3713 0380 52414400 		.ascii	"RAD\000"
 3714 0384 00000000 		.space	4
 3715 0388 520D5000 		.ascii	"R\015P\000"
 3716 038c 00000000 		.space	4
 3717 0390 08       		.byte	8
 3718 0391 000000   		.space	3
 3719 0394 02000000 		.word	2
 3720 0398 00       		.byte	0
 3721 0399 000000   		.space	3
 3722 039c 01000000 		.word	1
 3723 03a0 47524144 		.ascii	"GRAD\000"
 3723      00
 3724 03a5 000000   		.space	3
 3725 03a8 48595000 		.ascii	"HYP\000"
 3726 03ac 00000000 		.space	4
 3727 03b0 06       		.byte	6
 3728 03b1 000000   		.space	3
 3729 03b4 01000000 		.word	1
 3730 03b8 07       		.byte	7
 3731 03b9 000000   		.space	3
 3732 03bc 01000000 		.word	1
ARM GAS  /tmp/ccGwc1Zz.s 			page 95


 3733 03c0 482E4D53 		.ascii	"H.MS\000"
 3733      00
 3734 03c5 000000   		.space	3
 3735 03c8 482E6400 		.ascii	"H.d\000"
 3736 03cc 00000000 		.space	4
 3737 03d0 2C       		.byte	44
 3738 03d1 000000   		.space	3
 3739 03d4 FFFFFFFF 		.word	-1
 3740 03d8 00       		.byte	0
 3741 03d9 000000   		.space	3
 3742 03dc 02000000 		.word	2
 3743 03e0 2D2D0D00 		.ascii	"--\015\000"
 3744 03e4 00000000 		.space	4
 3745 03e8 4859509D 		.ascii	"HYP\235\000"
 3745      00
 3746 03ed 000000   		.space	3
 3747 03f0 2D       		.byte	45
 3748 03f1 000000   		.space	3
 3749 03f4 FFFFFFFF 		.word	-1
 3750 03f8 2E       		.byte	46
 3751 03f9 000000   		.space	3
 3752 03fc FFFFFFFF 		.word	-1
 3753 0400 43505800 		.ascii	"CPX\000"
 3754 0404 00000000 		.space	4
 3755 0408 00       		.ascii	"\000"
 3756 0409 00000000 		.space	7
 3756      000000
 3757 0410 4D495343 		.ascii	"MISC\000"
 3757      00
 3758 0415 00000000 		.space	10
 3758      00000000 
 3758      0000
 3759 041f 00       		.space	1
 3760 0420 25       		.byte	37
 3761 0421 000000   		.space	3
 3762 0424 01000000 		.word	1
 3763 0428 14       		.byte	20
 3764 0429 000000   		.space	3
 3765 042c 01000000 		.word	1
 3766 0430 7C587C00 		.ascii	"|X|\000"
 3767 0434 00000000 		.space	4
 3768 0438 329C00   		.ascii	"2\234\000"
 3769 043b 00000000 		.space	5
 3769      00
 3770 0440 25       		.byte	37
 3771 0441 000000   		.space	3
 3772 0444 02000000 		.word	2
 3773 0448 14       		.byte	20
 3774 0449 000000   		.space	3
 3775 044c 02000000 		.word	2
 3776 0450 524E4400 		.ascii	"RND\000"
 3777 0454 00000000 		.space	4
 3778 0458 4C6F67BA 		.ascii	"Log\272\000"
 3778      00
 3779 045d 000000   		.space	3
 3780 0460 26       		.byte	38
 3781 0461 000000   		.space	3
ARM GAS  /tmp/ccGwc1Zz.s 			page 96


 3782 0464 01000000 		.word	1
 3783 0468 15       		.byte	21
 3784 0469 000000   		.space	3
 3785 046c 02000000 		.word	2
 3786 0470 49506172 		.ascii	"IPart\000"
 3786      7400
 3787 0476 0000     		.space	2
 3788 0478 4C6F678B 		.ascii	"Log\213\000"
 3788      00
 3789 047d 000000   		.space	3
 3790 0480 26       		.byte	38
 3791 0481 000000   		.space	3
 3792 0484 02000000 		.word	2
 3793 0488 16       		.byte	22
 3794 0489 000000   		.space	3
 3795 048c 02000000 		.word	2
 3796 0490 46506172 		.ascii	"FPart\000"
 3796      7400
 3797 0496 0000     		.space	2
 3798 0498 7C7C656C 		.ascii	"||el\000"
 3798      00
 3799 049d 000000   		.space	3
 3800 04a0 2C       		.byte	44
 3801 04a1 000000   		.space	3
 3802 04a4 FFFFFFFF 		.word	-1
 3803 04a8 22       		.byte	34
 3804 04a9 000000   		.space	3
 3805 04ac 02000000 		.word	2
 3806 04b0 2D2D0D00 		.ascii	"--\015\000"
 3807 04b4 00000000 		.space	4
 3808 04b8 832500   		.ascii	"\203%\000"
 3809 04bb 00000000 		.space	5
 3809      00
 3810 04c0 2D       		.byte	45
 3811 04c1 000000   		.space	3
 3812 04c4 FFFFFFFF 		.word	-1
 3813 04c8 2E       		.byte	46
 3814 04c9 000000   		.space	3
 3815 04cc FFFFFFFF 		.word	-1
 3816 04d0 43505800 		.ascii	"CPX\000"
 3817 04d4 00000000 		.space	4
 3818 04d8 00       		.ascii	"\000"
 3819 04d9 00000000 		.space	7
 3819      000000
 3820 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 3820      204B6579 
 3820      00
 3821 04e9 00000000 		.space	6
 3821      0000
 3822 04ef 00       		.space	1
 3823 04f0 0D       		.byte	13
 3824 04f1 000000   		.space	3
 3825 04f4 01000000 		.word	1
 3826 04f8 2E       		.byte	46
 3827 04f9 000000   		.space	3
 3828 04fc FFFFFFFF 		.word	-1
 3829 0500 53686F77 		.ascii	"Show\016\000"
ARM GAS  /tmp/ccGwc1Zz.s 			page 97


 3829      0E00
 3830 0506 0000     		.space	2
 3831 0508 00       		.ascii	"\000"
 3832 0509 00000000 		.space	7
 3832      000000
 3833 0510 0D       		.byte	13
 3834 0511 000000   		.space	3
 3835 0514 02000000 		.word	2
 3836 0518 2E       		.byte	46
 3837 0519 000000   		.space	3
 3838 051c FFFFFFFF 		.word	-1
 3839 0520 53686F77 		.ascii	"Show\015\000"
 3839      0D00
 3840 0526 0000     		.space	2
 3841 0528 00       		.ascii	"\000"
 3842 0529 00000000 		.space	7
 3842      000000
 3843 0530 0D       		.byte	13
 3844 0531 000000   		.space	3
 3845 0534 03000000 		.word	3
 3846 0538 2E       		.byte	46
 3847 0539 000000   		.space	3
 3848 053c FFFFFFFF 		.word	-1
 3849 0540 78173F00 		.ascii	"x\027?\000"
 3850 0544 00000000 		.space	4
 3851 0548 00       		.ascii	"\000"
 3852 0549 00000000 		.space	7
 3852      000000
 3853 0550 2E       		.byte	46
 3854 0551 000000   		.space	3
 3855 0554 FFFFFFFF 		.word	-1
 3856 0558 2E       		.byte	46
 3857 0559 000000   		.space	3
 3858 055c FFFFFFFF 		.word	-1
 3859 0560 00       		.ascii	"\000"
 3860 0561 00000000 		.space	7
 3860      000000
 3861 0568 00       		.ascii	"\000"
 3862 0569 00000000 		.space	7
 3862      000000
 3863 0570 2C       		.byte	44
 3864 0571 000000   		.space	3
 3865 0574 FFFFFFFF 		.word	-1
 3866 0578 2E       		.byte	46
 3867 0579 000000   		.space	3
 3868 057c FFFFFFFF 		.word	-1
 3869 0580 2D2D0D00 		.ascii	"--\015\000"
 3870 0584 00000000 		.space	4
 3871 0588 00       		.ascii	"\000"
 3872 0589 00000000 		.space	7
 3872      000000
 3873 0590 2D       		.byte	45
 3874 0591 000000   		.space	3
 3875 0594 FFFFFFFF 		.word	-1
 3876 0598 2E       		.byte	46
 3877 0599 000000   		.space	3
 3878 059c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccGwc1Zz.s 			page 98


 3879 05a0 43505800 		.ascii	"CPX\000"
 3880 05a4 00000000 		.space	4
 3881 05a8 00       		.ascii	"\000"
 3882 05a9 00000000 		.space	7
 3882      000000
 3883 05b0 50726F67 		.ascii	"Program\000"
 3883      72616D00 
 3884 05b8 00000000 		.space	7
 3884      000000
 3885 05bf 00       		.space	1
 3886 05c0 27       		.byte	39
 3887 05c1 000000   		.space	3
 3888 05c4 01000000 		.word	1
 3889 05c8 28       		.byte	40
 3890 05c9 000000   		.space	3
 3891 05cc 01000000 		.word	1
 3892 05d0 4C424C00 		.ascii	"LBL\000"
 3893 05d4 00000000 		.space	4
 3894 05d8 44534500 		.ascii	"DSE\000"
 3895 05dc 00000000 		.space	4
 3896 05e0 27       		.byte	39
 3897 05e1 000000   		.space	3
 3898 05e4 02000000 		.word	2
 3899 05e8 28       		.byte	40
 3900 05e9 000000   		.space	3
 3901 05ec 02000000 		.word	2
 3902 05f0 52544E00 		.ascii	"RTN\000"
 3903 05f4 00000000 		.space	4
 3904 05f8 49534700 		.ascii	"ISG\000"
 3905 05fc 00000000 		.space	4
 3906 0600 25       		.byte	37
 3907 0601 000000   		.space	3
 3908 0604 03000000 		.word	3
 3909 0608 2E       		.byte	46
 3910 0609 000000   		.space	3
 3911 060c FFFFFFFF 		.word	-1
 3912 0610 50617573 		.ascii	"Pause\000"
 3912      6500
 3913 0616 0000     		.space	2
 3914 0618 00       		.ascii	"\000"
 3915 0619 00000000 		.space	7
 3915      000000
 3916 0620 12       		.byte	18
 3917 0621 000000   		.space	3
 3918 0624 03000000 		.word	3
 3919 0628 2E       		.byte	46
 3920 0629 000000   		.space	3
 3921 062c FFFFFFFF 		.word	-1
 3922 0630 47544F00 		.ascii	"GTO\000"
 3923 0634 00000000 		.space	4
 3924 0638 00       		.ascii	"\000"
 3925 0639 00000000 		.space	7
 3925      000000
 3926 0640 2C       		.byte	44
 3927 0641 000000   		.space	3
 3928 0644 FFFFFFFF 		.word	-1
 3929 0648 2E       		.byte	46
ARM GAS  /tmp/ccGwc1Zz.s 			page 99


 3930 0649 000000   		.space	3
 3931 064c FFFFFFFF 		.word	-1
 3932 0650 2D2D0D00 		.ascii	"--\015\000"
 3933 0654 00000000 		.space	4
 3934 0658 00       		.ascii	"\000"
 3935 0659 00000000 		.space	7
 3935      000000
 3936 0660 2D       		.byte	45
 3937 0661 000000   		.space	3
 3938 0664 FFFFFFFF 		.word	-1
 3939 0668 2E       		.byte	46
 3940 0669 000000   		.space	3
 3941 066c FFFFFFFF 		.word	-1
 3942 0670 43505800 		.ascii	"CPX\000"
 3943 0674 00000000 		.space	4
 3944 0678 00       		.ascii	"\000"
 3945 0679 00000000 		.space	7
 3945      000000
 3946 0680 53657475 		.ascii	"Setup 1\000"
 3946      70203100 
 3947 0688 00000000 		.space	7
 3947      000000
 3948 068f 00       		.space	1
 3949 0690 30       		.byte	48
 3950 0691 000000   		.space	3
 3951 0694 00000000 		.word	0
 3952 0698 2E       		.byte	46
 3953 0699 000000   		.space	3
 3954 069c FFFFFFFF 		.word	-1
 3955 06a0 53797374 		.ascii	"System\000"
 3955      656D00
 3956 06a7 00       		.space	1
 3957 06a8 00       		.ascii	"\000"
 3958 06a9 00000000 		.space	7
 3958      000000
 3959 06b0 31       		.byte	49
 3960 06b1 000000   		.space	3
 3961 06b4 09000000 		.word	9
 3962 06b8 2E       		.byte	46
 3963 06b9 000000   		.space	3
 3964 06bc FFFFFFFF 		.word	-1
 3965 06c0 48454C50 		.ascii	"HELP\000"
 3965      00
 3966 06c5 000000   		.space	3
 3967 06c8 00       		.ascii	"\000"
 3968 06c9 00000000 		.space	7
 3968      000000
 3969 06d0 31       		.byte	49
 3970 06d1 000000   		.space	3
 3971 06d4 02000000 		.word	2
 3972 06d8 31       		.byte	49
 3973 06d9 000000   		.space	3
 3974 06dc 06000000 		.word	6
 3975 06e0 4F6E5354 		.ascii	"OnSTO\000"
 3975      4F00
 3976 06e6 0000     		.space	2
 3977 06e8 57727453 		.ascii	"WrtSt\000"
ARM GAS  /tmp/ccGwc1Zz.s 			page 100


 3977      7400
 3978 06ee 0000     		.space	2
 3979 06f0 31       		.byte	49
 3980 06f1 000000   		.space	3
 3981 06f4 03000000 		.word	3
 3982 06f8 31       		.byte	49
 3983 06f9 000000   		.space	3
 3984 06fc 07000000 		.word	7
 3985 0700 4F6E5243 		.ascii	"OnRCL\000"
 3985      4C00
 3986 0706 0000     		.space	2
 3987 0708 4C645374 		.ascii	"LdSt\000"
 3987      00
 3988 070d 000000   		.space	3
 3989 0710 2C       		.byte	44
 3990 0711 000000   		.space	3
 3991 0714 FFFFFFFF 		.word	-1
 3992 0718 2E       		.byte	46
 3993 0719 000000   		.space	3
 3994 071c FFFFFFFF 		.word	-1
 3995 0720 2D2D0D00 		.ascii	"--\015\000"
 3996 0724 00000000 		.space	4
 3997 0728 00       		.ascii	"\000"
 3998 0729 00000000 		.space	7
 3998      000000
 3999 0730 2D       		.byte	45
 4000 0731 000000   		.space	3
 4001 0734 FFFFFFFF 		.word	-1
 4002 0738 2E       		.byte	46
 4003 0739 000000   		.space	3
 4004 073c FFFFFFFF 		.word	-1
 4005 0740 43505800 		.ascii	"CPX\000"
 4006 0744 00000000 		.space	4
 4007 0748 00       		.ascii	"\000"
 4008 0749 00000000 		.space	7
 4008      000000
 4009 0750 4172726F 		.ascii	"Arrow\000"
 4009      7700
 4010 0756 00000000 		.space	9
 4010      00000000 
 4010      00
 4011 075f 00       		.space	1
 4012 0760 0E       		.byte	14
 4013 0761 000000   		.space	3
 4014 0764 01000000 		.word	1
 4015 0768 06       		.byte	6
 4016 0769 000000   		.space	3
 4017 076c 02000000 		.word	2
 4018 0770 42696E00 		.ascii	"Bin\000"
 4019 0774 00000000 		.space	4
 4020 0778 44454700 		.ascii	"DEG\000"
 4021 077c 00000000 		.space	4
 4022 0780 0E       		.byte	14
 4023 0781 000000   		.space	3
 4024 0784 02000000 		.word	2
 4025 0788 07       		.byte	7
 4026 0789 000000   		.space	3
ARM GAS  /tmp/ccGwc1Zz.s 			page 101


 4027 078c 02000000 		.word	2
 4028 0790 4F637400 		.ascii	"Oct\000"
 4029 0794 00000000 		.space	4
 4030 0798 52414400 		.ascii	"RAD\000"
 4031 079c 00000000 		.space	4
 4032 07a0 0F       		.byte	15
 4033 07a1 000000   		.space	3
 4034 07a4 01000000 		.word	1
 4035 07a8 08       		.byte	8
 4036 07a9 000000   		.space	3
 4037 07ac 02000000 		.word	2
 4038 07b0 44656300 		.ascii	"Dec\000"
 4039 07b4 00000000 		.space	4
 4040 07b8 47726164 		.ascii	"Grad\000"
 4040      00
 4041 07bd 000000   		.space	3
 4042 07c0 0F       		.byte	15
 4043 07c1 000000   		.space	3
 4044 07c4 02000000 		.word	2
 4045 07c8 06       		.byte	6
 4046 07c9 000000   		.space	3
 4047 07cc 01000000 		.word	1
 4048 07d0 48657800 		.ascii	"Hex\000"
 4049 07d4 00000000 		.space	4
 4050 07d8 32484D53 		.ascii	"2HMS\000"
 4050      00
 4051 07dd 000000   		.space	3
 4052 07e0 2C       		.byte	44
 4053 07e1 000000   		.space	3
 4054 07e4 FFFFFFFF 		.word	-1
 4055 07e8 07       		.byte	7
 4056 07e9 000000   		.space	3
 4057 07ec 01000000 		.word	1
 4058 07f0 2D2D0D00 		.ascii	"--\015\000"
 4059 07f4 00000000 		.space	4
 4060 07f8 484D5332 		.ascii	"HMS2\000"
 4060      00
 4061 07fd 000000   		.space	3
 4062 0800 2D       		.byte	45
 4063 0801 000000   		.space	3
 4064 0804 FFFFFFFF 		.word	-1
 4065 0808 2E       		.byte	46
 4066 0809 000000   		.space	3
 4067 080c FFFFFFFF 		.word	-1
 4068 0810 43505800 		.ascii	"CPX\000"
 4069 0814 00000000 		.space	4
 4070 0818 00       		.ascii	"\000"
 4071 0819 00000000 		.space	7
 4071      000000
 4072 0820 466C6167 		.ascii	"Flags\000"
 4072      7300
 4073 0826 00000000 		.space	9
 4073      00000000 
 4073      00
 4074 082f 00       		.space	1
 4075 0830 1E       		.byte	30
 4076 0831 000000   		.space	3
ARM GAS  /tmp/ccGwc1Zz.s 			page 102


 4077 0834 01000000 		.word	1
 4078 0838 2E       		.byte	46
 4079 0839 000000   		.space	3
 4080 083c FFFFFFFF 		.word	-1
 4081 0840 53465F00 		.ascii	"SF_\000"
 4082 0844 00000000 		.space	4
 4083 0848 00       		.ascii	"\000"
 4084 0849 00000000 		.space	7
 4084      000000
 4085 0850 1E       		.byte	30
 4086 0851 000000   		.space	3
 4087 0854 02000000 		.word	2
 4088 0858 2E       		.byte	46
 4089 0859 000000   		.space	3
 4090 085c FFFFFFFF 		.word	-1
 4091 0860 43465F00 		.ascii	"CF_\000"
 4092 0864 00000000 		.space	4
 4093 0868 00       		.ascii	"\000"
 4094 0869 00000000 		.space	7
 4094      000000
 4095 0870 1F       		.byte	31
 4096 0871 000000   		.space	3
 4097 0874 01000000 		.word	1
 4098 0878 2E       		.byte	46
 4099 0879 000000   		.space	3
 4100 087c FFFFFFFF 		.word	-1
 4101 0880 783D3F00 		.ascii	"x=?\000"
 4102 0884 00000000 		.space	4
 4103 0888 00       		.ascii	"\000"
 4104 0889 00000000 		.space	7
 4104      000000
 4105 0890 1F       		.byte	31
 4106 0891 000000   		.space	3
 4107 0894 02000000 		.word	2
 4108 0898 2E       		.byte	46
 4109 0899 000000   		.space	3
 4110 089c FFFFFFFF 		.word	-1
 4111 08a0 780B3F00 		.ascii	"x\013?\000"
 4112 08a4 00000000 		.space	4
 4113 08a8 00       		.ascii	"\000"
 4114 08a9 00000000 		.space	7
 4114      000000
 4115 08b0 2C       		.byte	44
 4116 08b1 000000   		.space	3
 4117 08b4 FFFFFFFF 		.word	-1
 4118 08b8 2E       		.byte	46
 4119 08b9 000000   		.space	3
 4120 08bc FFFFFFFF 		.word	-1
 4121 08c0 2D2D0D00 		.ascii	"--\015\000"
 4122 08c4 00000000 		.space	4
 4123 08c8 00       		.ascii	"\000"
 4124 08c9 00000000 		.space	7
 4124      000000
 4125 08d0 2D       		.byte	45
 4126 08d1 000000   		.space	3
 4127 08d4 FFFFFFFF 		.word	-1
 4128 08d8 2E       		.byte	46
ARM GAS  /tmp/ccGwc1Zz.s 			page 103


 4129 08d9 000000   		.space	3
 4130 08dc FFFFFFFF 		.word	-1
 4131 08e0 43505800 		.ascii	"CPX\000"
 4132 08e4 00000000 		.space	4
 4133 08e8 00       		.ascii	"\000"
 4134 08e9 00000000 		.space	7
 4134      000000
 4135 08f0 50726F62 		.ascii	"Probability\000"
 4135      6162696C 
 4135      69747900 
 4136 08fc 000000   		.space	3
 4137 08ff 00       		.space	1
 4138 0900 18       		.byte	24
 4139 0901 000000   		.space	3
 4140 0904 03000000 		.word	3
 4141 0908 19       		.byte	25
 4142 0909 000000   		.space	3
 4143 090c 01000000 		.word	1
 4144 0910 46616374 		.ascii	"Fact!\000"
 4144      2100
 4145 0916 0000     		.space	2
 4146 0918 9400     		.ascii	"\224\000"
 4147 091a 00000000 		.space	6
 4147      0000
 4148 0920 18       		.byte	24
 4149 0921 000000   		.space	3
 4150 0924 01000000 		.word	1
 4151 0928 19       		.byte	25
 4152 0929 000000   		.space	3
 4153 092c 02000000 		.word	2
 4154 0930 43792C78 		.ascii	"Cy,x\000"
 4154      00
 4155 0935 000000   		.space	3
 4156 0938 949D00   		.ascii	"\224\235\000"
 4157 093b 00000000 		.space	5
 4157      00
 4158 0940 18       		.byte	24
 4159 0941 000000   		.space	3
 4160 0944 02000000 		.word	2
 4161 0948 2E       		.byte	46
 4162 0949 000000   		.space	3
 4163 094c FFFFFFFF 		.word	-1
 4164 0950 50792C78 		.ascii	"Py,x\000"
 4164      00
 4165 0955 000000   		.space	3
 4166 0958 00       		.ascii	"\000"
 4167 0959 00000000 		.space	7
 4167      000000
 4168 0960 08       		.byte	8
 4169 0961 000000   		.space	3
 4170 0964 01000000 		.word	1
 4171 0968 2E       		.byte	46
 4172 0969 000000   		.space	3
 4173 096c FFFFFFFF 		.word	-1
 4174 0970 52414E23 		.ascii	"RAN#\000"
 4174      00
 4175 0975 000000   		.space	3
ARM GAS  /tmp/ccGwc1Zz.s 			page 104


 4176 0978 00       		.ascii	"\000"
 4177 0979 00000000 		.space	7
 4177      000000
 4178 0980 2C       		.byte	44
 4179 0981 000000   		.space	3
 4180 0984 FFFFFFFF 		.word	-1
 4181 0988 2E       		.byte	46
 4182 0989 000000   		.space	3
 4183 098c FFFFFFFF 		.word	-1
 4184 0990 2D2D0D00 		.ascii	"--\015\000"
 4185 0994 00000000 		.space	4
 4186 0998 00       		.ascii	"\000"
 4187 0999 00000000 		.space	7
 4187      000000
 4188 09a0 2D       		.byte	45
 4189 09a1 000000   		.space	3
 4190 09a4 FFFFFFFF 		.word	-1
 4191 09a8 2E       		.byte	46
 4192 09a9 000000   		.space	3
 4193 09ac FFFFFFFF 		.word	-1
 4194 09b0 43505800 		.ascii	"CPX\000"
 4195 09b4 00000000 		.space	4
 4196 09b8 00       		.ascii	"\000"
 4197 09b9 00000000 		.space	7
 4197      000000
 4198 09c0 53746174 		.ascii	"Statistics\000"
 4198      69737469 
 4198      637300
 4199 09cb 00000000 		.space	4
 4200 09cf 00       		.space	1
 4201 09d0 1A       		.byte	26
 4202 09d1 000000   		.space	3
 4203 09d4 01000000 		.word	1
 4204 09d8 1B       		.byte	27
 4205 09d9 000000   		.space	3
 4206 09dc 03000000 		.word	3
 4207 09e0 58626172 		.ascii	"Xbar\000"
 4207      00
 4208 09e5 000000   		.space	3
 4209 09e8 53554D53 		.ascii	"SUMS\000"
 4209      00
 4210 09ed 000000   		.space	3
 4211 09f0 1B       		.byte	27
 4212 09f1 000000   		.space	3
 4213 09f4 01000000 		.word	1
 4214 09f8 2E       		.byte	46
 4215 09f9 000000   		.space	3
 4216 09fc FFFFFFFF 		.word	-1
 4217 0a00 59686174 		.ascii	"Yhat\000"
 4217      00
 4218 0a05 000000   		.space	3
 4219 0a08 00       		.ascii	"\000"
 4220 0a09 00000000 		.space	7
 4220      000000
 4221 0a10 1A       		.byte	26
 4222 0a11 000000   		.space	3
 4223 0a14 02000000 		.word	2
ARM GAS  /tmp/ccGwc1Zz.s 			page 105


 4224 0a18 2E       		.byte	46
 4225 0a19 000000   		.space	3
 4226 0a1c FFFFFFFF 		.word	-1
 4227 0a20 7300     		.ascii	"s\000"
 4228 0a22 00000000 		.space	6
 4228      0000
 4229 0a28 00       		.ascii	"\000"
 4230 0a29 00000000 		.space	7
 4230      000000
 4231 0a30 1B       		.byte	27
 4232 0a31 000000   		.space	3
 4233 0a34 02000000 		.word	2
 4234 0a38 2E       		.byte	46
 4235 0a39 000000   		.space	3
 4236 0a3c FFFFFFFF 		.word	-1
 4237 0a40 7200     		.ascii	"r\000"
 4238 0a42 00000000 		.space	6
 4238      0000
 4239 0a48 00       		.ascii	"\000"
 4240 0a49 00000000 		.space	7
 4240      000000
 4241 0a50 2C       		.byte	44
 4242 0a51 000000   		.space	3
 4243 0a54 FFFFFFFF 		.word	-1
 4244 0a58 2E       		.byte	46
 4245 0a59 000000   		.space	3
 4246 0a5c FFFFFFFF 		.word	-1
 4247 0a60 2D2D0D00 		.ascii	"--\015\000"
 4248 0a64 00000000 		.space	4
 4249 0a68 00       		.ascii	"\000"
 4250 0a69 00000000 		.space	7
 4250      000000
 4251 0a70 2D       		.byte	45
 4252 0a71 000000   		.space	3
 4253 0a74 FFFFFFFF 		.word	-1
 4254 0a78 2E       		.byte	46
 4255 0a79 000000   		.space	3
 4256 0a7c FFFFFFFF 		.word	-1
 4257 0a80 43505800 		.ascii	"CPX\000"
 4258 0a84 00000000 		.space	4
 4259 0a88 00       		.ascii	"\000"
 4260 0a89 00000000 		.space	7
 4260      000000
 4261 0a90 53657475 		.ascii	"Setup 2\000"
 4261      70203200 
 4262 0a98 00000000 		.space	7
 4262      000000
 4263 0a9f 00       		.space	1
 4264 0aa0 31       		.byte	49
 4265 0aa1 000000   		.space	3
 4266 0aa4 04000000 		.word	4
 4267 0aa8 2E       		.byte	46
 4268 0aa9 000000   		.space	3
 4269 0aac FFFFFFFF 		.word	-1
 4270 0ab0 5772744C 		.ascii	"WrtLib\000"
 4270      696200
 4271 0ab7 00       		.space	1
ARM GAS  /tmp/ccGwc1Zz.s 			page 106


 4272 0ab8 00       		.ascii	"\000"
 4273 0ab9 00000000 		.space	7
 4273      000000
 4274 0ac0 31       		.byte	49
 4275 0ac1 000000   		.space	3
 4276 0ac4 05000000 		.word	5
 4277 0ac8 2E       		.byte	46
 4278 0ac9 000000   		.space	3
 4279 0acc FFFFFFFF 		.word	-1
 4280 0ad0 4C645374 		.ascii	"LdSt\000"
 4280      00
 4281 0ad5 000000   		.space	3
 4282 0ad8 00       		.ascii	"\000"
 4283 0ad9 00000000 		.space	7
 4283      000000
 4284 0ae0 31       		.byte	49
 4285 0ae1 000000   		.space	3
 4286 0ae4 0A000000 		.word	10
 4287 0ae8 2E       		.byte	46
 4288 0ae9 000000   		.space	3
 4289 0aec FFFFFFFF 		.word	-1
 4290 0af0 53617665 		.ascii	"SaveP\000"
 4290      5000
 4291 0af6 0000     		.space	2
 4292 0af8 00       		.ascii	"\000"
 4293 0af9 00000000 		.space	7
 4293      000000
 4294 0b00 31       		.byte	49
 4295 0b01 000000   		.space	3
 4296 0b04 08000000 		.word	8
 4297 0b08 2E       		.byte	46
 4298 0b09 000000   		.space	3
 4299 0b0c FFFFFFFF 		.word	-1
 4300 0b10 4C6F6164 		.ascii	"LoadP\000"
 4300      5000
 4301 0b16 0000     		.space	2
 4302 0b18 00       		.ascii	"\000"
 4303 0b19 00000000 		.space	7
 4303      000000
 4304 0b20 2C       		.byte	44
 4305 0b21 000000   		.space	3
 4306 0b24 FFFFFFFF 		.word	-1
 4307 0b28 2E       		.byte	46
 4308 0b29 000000   		.space	3
 4309 0b2c FFFFFFFF 		.word	-1
 4310 0b30 2D2D0D00 		.ascii	"--\015\000"
 4311 0b34 00000000 		.space	4
 4312 0b38 00       		.ascii	"\000"
 4313 0b39 00000000 		.space	7
 4313      000000
 4314 0b40 2D       		.byte	45
 4315 0b41 000000   		.space	3
 4316 0b44 FFFFFFFF 		.word	-1
 4317 0b48 2E       		.byte	46
 4318 0b49 000000   		.space	3
 4319 0b4c FFFFFFFF 		.word	-1
 4320 0b50 43505800 		.ascii	"CPX\000"
ARM GAS  /tmp/ccGwc1Zz.s 			page 107


 4321 0b54 00000000 		.space	4
 4322 0b58 00       		.ascii	"\000"
 4323 0b59 00000000 		.space	7
 4323      000000
 4324              		.section	.rodata.mapping_alpha.10894,"a"
 4325              		.align	2
 4326              		.set	.LANCHOR11,. + 0
 4329              	mapping_alpha.10894:
 4330 0000 63       		.byte	99
 4331 0001 000000   		.space	3
 4332 0004 FFFFFFFF 		.word	-1
 4333 0008 00       		.byte	0
 4334 0009 000000   		.space	3
 4335 000c FFFFFFFF 		.word	-1
 4336 0010 01       		.byte	1
 4337 0011 000000   		.space	3
 4338 0014 FFFFFFFF 		.word	-1
 4339 0018 02       		.byte	2
 4340 0019 000000   		.space	3
 4341 001c FFFFFFFF 		.word	-1
 4342 0020 03       		.byte	3
 4343 0021 000000   		.space	3
 4344 0024 FFFFFFFF 		.word	-1
 4345 0028 04       		.byte	4
 4346 0029 000000   		.space	3
 4347 002c FFFFFFFF 		.word	-1
 4348 0030 05       		.byte	5
 4349 0031 000000   		.space	3
 4350 0034 FFFFFFFF 		.word	-1
 4351 0038 06       		.byte	6
 4352 0039 000000   		.space	3
 4353 003c FFFFFFFF 		.word	-1
 4354 0040 07       		.byte	7
 4355 0041 000000   		.space	3
 4356 0044 FFFFFFFF 		.word	-1
 4357 0048 08       		.byte	8
 4358 0049 000000   		.space	3
 4359 004c FFFFFFFF 		.word	-1
 4360 0050 09       		.byte	9
 4361 0051 000000   		.space	3
 4362 0054 FFFFFFFF 		.word	-1
 4363 0058 0A       		.byte	10
 4364 0059 000000   		.space	3
 4365 005c FFFFFFFF 		.word	-1
 4366 0060 0B       		.byte	11
 4367 0061 000000   		.space	3
 4368 0064 FFFFFFFF 		.word	-1
 4369 0068 0C       		.byte	12
 4370 0069 000000   		.space	3
 4371 006c FFFFFFFF 		.word	-1
 4372 0070 0D       		.byte	13
 4373 0071 000000   		.space	3
 4374 0074 FFFFFFFF 		.word	-1
 4375 0078 0E       		.byte	14
 4376 0079 000000   		.space	3
 4377 007c FFFFFFFF 		.word	-1
 4378 0080 0F       		.byte	15
ARM GAS  /tmp/ccGwc1Zz.s 			page 108


 4379 0081 000000   		.space	3
 4380 0084 FFFFFFFF 		.word	-1
 4381 0088 10       		.byte	16
 4382 0089 000000   		.space	3
 4383 008c FFFFFFFF 		.word	-1
 4384 0090 12       		.byte	18
 4385 0091 000000   		.space	3
 4386 0094 FFFFFFFF 		.word	-1
 4387 0098 13       		.byte	19
 4388 0099 000000   		.space	3
 4389 009c FFFFFFFF 		.word	-1
 4390 00a0 14       		.byte	20
 4391 00a1 000000   		.space	3
 4392 00a4 FFFFFFFF 		.word	-1
 4393 00a8 15       		.byte	21
 4394 00a9 000000   		.space	3
 4395 00ac FFFFFFFF 		.word	-1
 4396 00b0 16       		.byte	22
 4397 00b1 000000   		.space	3
 4398 00b4 FFFFFFFF 		.word	-1
 4399 00b8 18       		.byte	24
 4400 00b9 000000   		.space	3
 4401 00bc FFFFFFFF 		.word	-1
 4402 00c0 19       		.byte	25
 4403 00c1 000000   		.space	3
 4404 00c4 FFFFFFFF 		.word	-1
 4405 00c8 1A       		.byte	26
 4406 00c9 000000   		.space	3
 4407 00cc FFFFFFFF 		.word	-1
 4408 00d0 1B       		.byte	27
 4409 00d1 000000   		.space	3
 4410 00d4 FFFFFFFF 		.word	-1
 4411 00d8 1C       		.byte	28
 4412 00d9 000000   		.space	3
 4413 00dc FFFFFFFF 		.word	-1
 4414 00e0 1E       		.byte	30
 4415 00e1 000000   		.space	3
 4416 00e4 FFFFFFFF 		.word	-1
 4417 00e8 1F       		.byte	31
 4418 00e9 000000   		.space	3
 4419 00ec FFFFFFFF 		.word	-1
 4420 00f0 20       		.byte	32
 4421 00f1 000000   		.space	3
 4422 00f4 FFFFFFFF 		.word	-1
 4423 00f8 21       		.byte	33
 4424 00f9 000000   		.space	3
 4425 00fc FFFFFFFF 		.word	-1
 4426 0100 22       		.byte	34
 4427 0101 000000   		.space	3
 4428 0104 FFFFFFFF 		.word	-1
 4429 0108 24       		.byte	36
 4430 0109 000000   		.space	3
 4431 010c FFFFFFFF 		.word	-1
 4432 0110 25       		.byte	37
 4433 0111 000000   		.space	3
 4434 0114 FFFFFFFF 		.word	-1
 4435 0118 26       		.byte	38
ARM GAS  /tmp/ccGwc1Zz.s 			page 109


 4436 0119 000000   		.space	3
 4437 011c FFFFFFFF 		.word	-1
 4438 0120 27       		.byte	39
 4439 0121 000000   		.space	3
 4440 0124 FFFFFFFF 		.word	-1
 4441 0128 28       		.byte	40
 4442 0129 000000   		.space	3
 4443 012c FFFFFFFF 		.word	-1
 4444 0130 2E       		.byte	46
 4445 0131 000000   		.space	3
 4446 0134 FFFFFFFF 		.word	-1
 4447 0138 2E       		.byte	46
 4448 0139 000000   		.space	3
 4449 013c FFFFFFFF 		.word	-1
 4450 0140 2E       		.byte	46
 4451 0141 000000   		.space	3
 4452 0144 FFFFFFFF 		.word	-1
 4453 0148 2E       		.byte	46
 4454 0149 000000   		.space	3
 4455 014c FFFFFFFF 		.word	-1
 4456 0150 2C       		.byte	44
 4457 0151 000000   		.space	3
 4458 0154 FFFFFFFF 		.word	-1
 4459 0158 2E       		.byte	46
 4460 0159 000000   		.space	3
 4461 015c FFFFFFFF 		.word	-1
 4462 0160 2E       		.byte	46
 4463 0161 000000   		.space	3
 4464 0164 FFFFFFFF 		.word	-1
 4465 0168 2E       		.byte	46
 4466 0169 000000   		.space	3
 4467 016c FFFFFFFF 		.word	-1
 4468 0170 2E       		.byte	46
 4469 0171 000000   		.space	3
 4470 0174 FFFFFFFF 		.word	-1
 4471              		.section	.rodata.mapping_fshift.10892,"a"
 4472              		.align	2
 4473              		.set	.LANCHOR9,. + 0
 4476              	mapping_fshift.10892:
 4477 0000 63       		.byte	99
 4478 0001 000000   		.space	3
 4479 0004 FFFFFFFF 		.word	-1
 4480 0008 22       		.byte	34
 4481 0009 000000   		.space	3
 4482 000c 03000000 		.word	3
 4483 0010 15       		.byte	21
 4484 0011 000000   		.space	3
 4485 0014 01000000 		.word	1
 4486 0018 1C       		.byte	28
 4487 0019 000000   		.space	3
 4488 001c 02000000 		.word	2
 4489 0020 13       		.byte	19
 4490 0021 000000   		.space	3
 4491 0024 01000000 		.word	1
 4492 0028 12       		.byte	18
 4493 0029 000000   		.space	3
 4494 002c 01000000 		.word	1
ARM GAS  /tmp/ccGwc1Zz.s 			page 110


 4495 0030 12       		.byte	18
 4496 0031 000000   		.space	3
 4497 0034 03000000 		.word	3
 4498 0038 2D       		.byte	45
 4499 0039 000000   		.space	3
 4500 003c 00000000 		.word	0
 4501 0040 22       		.byte	34
 4502 0041 000000   		.space	3
 4503 0044 01000000 		.word	1
 4504 0048 0F       		.byte	15
 4505 0049 000000   		.space	3
 4506 004c 03000000 		.word	3
 4507 0050 01       		.byte	1
 4508 0051 000000   		.space	3
 4509 0054 02000000 		.word	2
 4510 0058 02       		.byte	2
 4511 0059 000000   		.space	3
 4512 005c 02000000 		.word	2
 4513 0060 03       		.byte	3
 4514 0061 000000   		.space	3
 4515 0064 02000000 		.word	2
 4516 0068 0C       		.byte	12
 4517 0069 000000   		.space	3
 4518 006c 01000000 		.word	1
 4519 0070 31       		.byte	49
 4520 0071 000000   		.space	3
 4521 0074 01000000 		.word	1
 4522 0078 2F       		.byte	47
 4523 0079 000000   		.space	3
 4524 007c 04000000 		.word	4
 4525 0080 2F       		.byte	47
 4526 0081 000000   		.space	3
 4527 0084 02000000 		.word	2
 4528 0088 2F       		.byte	47
 4529 0089 000000   		.space	3
 4530 008c 01000000 		.word	1
 4531 0090 18       		.byte	24
 4532 0091 000000   		.space	3
 4533 0094 00000000 		.word	0
 4534 0098 20       		.byte	32
 4535 0099 000000   		.space	3
 4536 009c 01000000 		.word	1
 4537 00a0 20       		.byte	32
 4538 00a1 000000   		.space	3
 4539 00a4 02000000 		.word	2
 4540 00a8 1C       		.byte	28
 4541 00a9 000000   		.space	3
 4542 00ac 03000000 		.word	3
 4543 00b0 2F       		.byte	47
 4544 00b1 000000   		.space	3
 4545 00b4 0C000000 		.word	12
 4546 00b8 1E       		.byte	30
 4547 00b9 000000   		.space	3
 4548 00bc 00000000 		.word	0
 4549 00c0 2F       		.byte	47
 4550 00c1 000000   		.space	3
 4551 00c4 03000000 		.word	3
ARM GAS  /tmp/ccGwc1Zz.s 			page 111


 4552 00c8 04       		.byte	4
 4553 00c9 000000   		.space	3
 4554 00cc 03000000 		.word	3
 4555 00d0 2F       		.byte	47
 4556 00d1 000000   		.space	3
 4557 00d4 0A000000 		.word	10
 4558 00d8 2F       		.byte	47
 4559 00d9 000000   		.space	3
 4560 00dc 0B000000 		.word	11
 4561 00e0 2A       		.byte	42
 4562 00e1 000000   		.space	3
 4563 00e4 00000000 		.word	0
 4564 00e8 2E       		.byte	46
 4565 00e9 000000   		.space	3
 4566 00ec 00000000 		.word	0
 4567 00f0 2E       		.byte	46
 4568 00f1 000000   		.space	3
 4569 00f4 00000000 		.word	0
 4570 00f8 20       		.byte	32
 4571 00f9 000000   		.space	3
 4572 00fc 03000000 		.word	3
 4573 0100 2E       		.byte	46
 4574 0101 000000   		.space	3
 4575 0104 00000000 		.word	0
 4576 0108 24       		.byte	36
 4577 0109 000000   		.space	3
 4578 010c 03000000 		.word	3
 4579 0110 2F       		.byte	47
 4580 0111 000000   		.space	3
 4581 0114 08000000 		.word	8
 4582 0118 0D       		.byte	13
 4583 0119 000000   		.space	3
 4584 011c 01000000 		.word	1
 4585 0120 27       		.byte	39
 4586 0121 000000   		.space	3
 4587 0124 03000000 		.word	3
 4588 0128 06       		.byte	6
 4589 0129 000000   		.space	3
 4590 012c 03000000 		.word	3
 4591 0130 2E       		.byte	46
 4592 0131 000000   		.space	3
 4593 0134 00000000 		.word	0
 4594 0138 2E       		.byte	46
 4595 0139 000000   		.space	3
 4596 013c 00000000 		.word	0
 4597 0140 2E       		.byte	46
 4598 0141 000000   		.space	3
 4599 0144 00000000 		.word	0
 4600 0148 2E       		.byte	46
 4601 0149 000000   		.space	3
 4602 014c 00000000 		.word	0
 4603 0150 2E       		.byte	46
 4604 0151 000000   		.space	3
 4605 0154 00000000 		.word	0
 4606 0158 2E       		.byte	46
 4607 0159 000000   		.space	3
 4608 015c 00000000 		.word	0
ARM GAS  /tmp/ccGwc1Zz.s 			page 112


 4609 0160 2E       		.byte	46
 4610 0161 000000   		.space	3
 4611 0164 00000000 		.word	0
 4612 0168 2F       		.byte	47
 4613 0169 000000   		.space	3
 4614 016c FFFFFFFF 		.word	-1
 4615 0170 2F       		.byte	47
 4616 0171 000000   		.space	3
 4617 0174 05000000 		.word	5
 4618              		.section	.rodata.mapping_gshift.10893,"a"
 4619              		.align	2
 4620              		.set	.LANCHOR12,. + 0
 4623              	mapping_gshift.10893:
 4624 0000 63       		.byte	99
 4625 0001 000000   		.space	3
 4626 0004 FFFFFFFF 		.word	-1
 4627 0008 28       		.byte	40
 4628 0009 000000   		.space	3
 4629 000c 03000000 		.word	3
 4630 0010 16       		.byte	22
 4631 0011 000000   		.space	3
 4632 0014 01000000 		.word	1
 4633 0018 1C       		.byte	28
 4634 0019 000000   		.space	3
 4635 001c 01000000 		.word	1
 4636 0020 13       		.byte	19
 4637 0021 000000   		.space	3
 4638 0024 02000000 		.word	2
 4639 0028 2E       		.byte	46
 4640 0029 000000   		.space	3
 4641 002c 00000000 		.word	0
 4642 0030 2E       		.byte	46
 4643 0031 000000   		.space	3
 4644 0034 00000000 		.word	0
 4645 0038 0C       		.byte	12
 4646 0039 000000   		.space	3
 4647 003c 02000000 		.word	2
 4648 0040 07       		.byte	7
 4649 0041 000000   		.space	3
 4650 0044 03000000 		.word	3
 4651 0048 08       		.byte	8
 4652 0049 000000   		.space	3
 4653 004c 03000000 		.word	3
 4654 0050 2F       		.byte	47
 4655 0051 000000   		.space	3
 4656 0054 04000000 		.word	4
 4657 0058 2F       		.byte	47
 4658 0059 000000   		.space	3
 4659 005c 04000000 		.word	4
 4660 0060 2F       		.byte	47
 4661 0061 000000   		.space	3
 4662 0064 04000000 		.word	4
 4663 0068 2E       		.byte	46
 4664 0069 000000   		.space	3
 4665 006c 00000000 		.word	0
 4666 0070 2F       		.byte	47
 4667 0071 000000   		.space	3
ARM GAS  /tmp/ccGwc1Zz.s 			page 113


 4668 0074 06000000 		.word	6
 4669 0078 05       		.byte	5
 4670 0079 000000   		.space	3
 4671 007c 03000000 		.word	3
 4672 0080 2E       		.byte	46
 4673 0081 000000   		.space	3
 4674 0084 00000000 		.word	0
 4675 0088 2E       		.byte	46
 4676 0089 000000   		.space	3
 4677 008c 00000000 		.word	0
 4678 0090 2E       		.byte	46
 4679 0091 000000   		.space	3
 4680 0094 00000000 		.word	0
 4681 0098 2E       		.byte	46
 4682 0099 000000   		.space	3
 4683 009c 00000000 		.word	0
 4684 00a0 2E       		.byte	46
 4685 00a1 000000   		.space	3
 4686 00a4 00000000 		.word	0
 4687 00a8 1B       		.byte	27
 4688 00a9 000000   		.space	3
 4689 00ac 03000000 		.word	3
 4690 00b0 1A       		.byte	26
 4691 00b1 000000   		.space	3
 4692 00b4 03000000 		.word	3
 4693 00b8 2E       		.byte	46
 4694 00b9 000000   		.space	3
 4695 00bc 00000000 		.word	0
 4696 00c0 2E       		.byte	46
 4697 00c1 000000   		.space	3
 4698 00c4 00000000 		.word	0
 4699 00c8 0C       		.byte	12
 4700 00c9 000000   		.space	3
 4701 00cc 03000000 		.word	3
 4702 00d0 1F       		.byte	31
 4703 00d1 000000   		.space	3
 4704 00d4 03000000 		.word	3
 4705 00d8 19       		.byte	25
 4706 00d9 000000   		.space	3
 4707 00dc 03000000 		.word	3
 4708 00e0 2A       		.byte	42
 4709 00e1 000000   		.space	3
 4710 00e4 FFFFFFFF 		.word	-1
 4711 00e8 2E       		.byte	46
 4712 00e9 000000   		.space	3
 4713 00ec 00000000 		.word	0
 4714 00f0 2E       		.byte	46
 4715 00f1 000000   		.space	3
 4716 00f4 00000000 		.word	0
 4717 00f8 21       		.byte	33
 4718 00f9 000000   		.space	3
 4719 00fc 03000000 		.word	3
 4720 0100 2E       		.byte	46
 4721 0101 000000   		.space	3
 4722 0104 00000000 		.word	0
 4723 0108 24       		.byte	36
 4724 0109 000000   		.space	3
ARM GAS  /tmp/ccGwc1Zz.s 			page 114


 4725 010c 00000000 		.word	0
 4726 0110 2F       		.byte	47
 4727 0111 000000   		.space	3
 4728 0114 0D000000 		.word	13
 4729 0118 2E       		.byte	46
 4730 0119 000000   		.space	3
 4731 011c 00000000 		.word	0
 4732 0120 2F       		.byte	47
 4733 0121 000000   		.space	3
 4734 0124 07000000 		.word	7
 4735 0128 2E       		.byte	46
 4736 0129 000000   		.space	3
 4737 012c 00000000 		.word	0
 4738 0130 2E       		.byte	46
 4739 0131 000000   		.space	3
 4740 0134 00000000 		.word	0
 4741 0138 2E       		.byte	46
 4742 0139 000000   		.space	3
 4743 013c 00000000 		.word	0
 4744 0140 2E       		.byte	46
 4745 0141 000000   		.space	3
 4746 0144 00000000 		.word	0
 4747 0148 2E       		.byte	46
 4748 0149 000000   		.space	3
 4749 014c 00000000 		.word	0
 4750 0150 2E       		.byte	46
 4751 0151 000000   		.space	3
 4752 0154 00000000 		.word	0
 4753 0158 2E       		.byte	46
 4754 0159 000000   		.space	3
 4755 015c 00000000 		.word	0
 4756 0160 2E       		.byte	46
 4757 0161 000000   		.space	3
 4758 0164 00000000 		.word	0
 4759 0168 2E       		.byte	46
 4760 0169 000000   		.space	3
 4761 016c 00000000 		.word	0
 4762 0170 2E       		.byte	46
 4763 0171 000000   		.space	3
 4764 0174 00000000 		.word	0
 4765              		.section	.rodata.mapping_none.10891,"a"
 4766              		.align	2
 4767              		.set	.LANCHOR8,. + 0
 4770              	mapping_none.10891:
 4771 0000 63       		.byte	99
 4772 0001 000000   		.space	3
 4773 0004 FFFFFFFF 		.word	-1
 4774 0008 00       		.byte	0
 4775 0009 000000   		.space	3
 4776 000c 00000000 		.word	0
 4777 0010 01       		.byte	1
 4778 0011 000000   		.space	3
 4779 0014 00000000 		.word	0
 4780 0018 03       		.byte	3
 4781 0019 000000   		.space	3
 4782 001c 00000000 		.word	0
 4783 0020 13       		.byte	19
ARM GAS  /tmp/ccGwc1Zz.s 			page 115


 4784 0021 000000   		.space	3
 4785 0024 02000000 		.word	2
 4786 0028 12       		.byte	18
 4787 0029 000000   		.space	3
 4788 002c 02000000 		.word	2
 4789 0030 12       		.byte	18
 4790 0031 000000   		.space	3
 4791 0034 00000000 		.word	0
 4792 0038 06       		.byte	6
 4793 0039 000000   		.space	3
 4794 003c 00000000 		.word	0
 4795 0040 07       		.byte	7
 4796 0041 000000   		.space	3
 4797 0044 00000000 		.word	0
 4798 0048 08       		.byte	8
 4799 0049 000000   		.space	3
 4800 004c 00000000 		.word	0
 4801 0050 01       		.byte	1
 4802 0051 000000   		.space	3
 4803 0054 01000000 		.word	1
 4804 0058 02       		.byte	2
 4805 0059 000000   		.space	3
 4806 005c 01000000 		.word	1
 4807 0060 03       		.byte	3
 4808 0061 000000   		.space	3
 4809 0064 01000000 		.word	1
 4810 0068 0C       		.byte	12
 4811 0069 000000   		.space	3
 4812 006c 00000000 		.word	0
 4813 0070 0D       		.byte	13
 4814 0071 000000   		.space	3
 4815 0074 00000000 		.word	0
 4816 0078 0E       		.byte	14
 4817 0079 000000   		.space	3
 4818 007c 00000000 		.word	0
 4819 0080 0F       		.byte	15
 4820 0081 000000   		.space	3
 4821 0084 00000000 		.word	0
 4822 0088 10       		.byte	16
 4823 0089 000000   		.space	3
 4824 008c 00000000 		.word	0
 4825 0090 18       		.byte	24
 4826 0091 000000   		.space	3
 4827 0094 00000000 		.word	0
 4828 0098 13       		.byte	19
 4829 0099 000000   		.space	3
 4830 009c 00000000 		.word	0
 4831 00a0 14       		.byte	20
 4832 00a1 000000   		.space	3
 4833 00a4 00000000 		.word	0
 4834 00a8 15       		.byte	21
 4835 00a9 000000   		.space	3
 4836 00ac 00000000 		.word	0
 4837 00b0 16       		.byte	22
 4838 00b1 000000   		.space	3
 4839 00b4 00000000 		.word	0
 4840 00b8 1E       		.byte	30
ARM GAS  /tmp/ccGwc1Zz.s 			page 116


 4841 00b9 000000   		.space	3
 4842 00bc 00000000 		.word	0
 4843 00c0 19       		.byte	25
 4844 00c1 000000   		.space	3
 4845 00c4 00000000 		.word	0
 4846 00c8 1A       		.byte	26
 4847 00c9 000000   		.space	3
 4848 00cc 00000000 		.word	0
 4849 00d0 1B       		.byte	27
 4850 00d1 000000   		.space	3
 4851 00d4 00000000 		.word	0
 4852 00d8 1C       		.byte	28
 4853 00d9 000000   		.space	3
 4854 00dc 00000000 		.word	0
 4855 00e0 29       		.byte	41
 4856 00e1 000000   		.space	3
 4857 00e4 00000000 		.word	0
 4858 00e8 1F       		.byte	31
 4859 00e9 000000   		.space	3
 4860 00ec 00000000 		.word	0
 4861 00f0 20       		.byte	32
 4862 00f1 000000   		.space	3
 4863 00f4 00000000 		.word	0
 4864 00f8 21       		.byte	33
 4865 00f9 000000   		.space	3
 4866 00fc 00000000 		.word	0
 4867 0100 22       		.byte	34
 4868 0101 000000   		.space	3
 4869 0104 00000000 		.word	0
 4870 0108 24       		.byte	36
 4871 0109 000000   		.space	3
 4872 010c 00000000 		.word	0
 4873 0110 25       		.byte	37
 4874 0111 000000   		.space	3
 4875 0114 00000000 		.word	0
 4876 0118 26       		.byte	38
 4877 0119 000000   		.space	3
 4878 011c 00000000 		.word	0
 4879 0120 27       		.byte	39
 4880 0121 000000   		.space	3
 4881 0124 00000000 		.word	0
 4882 0128 28       		.byte	40
 4883 0129 000000   		.space	3
 4884 012c 00000000 		.word	0
 4885 0130 2E       		.byte	46
 4886 0131 000000   		.space	3
 4887 0134 00000000 		.word	0
 4888 0138 2E       		.byte	46
 4889 0139 000000   		.space	3
 4890 013c 00000000 		.word	0
 4891 0140 2E       		.byte	46
 4892 0141 000000   		.space	3
 4893 0144 00000000 		.word	0
 4894 0148 2E       		.byte	46
 4895 0149 000000   		.space	3
 4896 014c 00000000 		.word	0
 4897 0150 2E       		.byte	46
ARM GAS  /tmp/ccGwc1Zz.s 			page 117


 4898 0151 000000   		.space	3
 4899 0154 00000000 		.word	0
 4900 0158 2E       		.byte	46
 4901 0159 000000   		.space	3
 4902 015c 00000000 		.word	0
 4903 0160 2E       		.byte	46
 4904 0161 000000   		.space	3
 4905 0164 00000000 		.word	0
 4906 0168 2E       		.byte	46
 4907 0169 000000   		.space	3
 4908 016c 00000000 		.word	0
 4909 0170 2E       		.byte	46
 4910 0171 000000   		.space	3
 4911 0174 00000000 		.word	0
 4912              		.section	.rodata.mid_menu,"a"
 4913              		.align	2
 4916              	mid_menu:
 4917 0000 C800     		.ascii	"\310\000"
 4918              		.text
 4919              	.Letext0:
 4920              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 4921              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 4922              		.file 6 "/usr/include/newlib/sys/_types.h"
 4923              		.file 7 "/usr/include/newlib/sys/reent.h"
 4924              		.file 8 "/usr/include/newlib/sys/lock.h"
 4925              		.file 9 "/usr/include/newlib/stdlib.h"
 4926              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 4927              		.file 11 "/usr/include/newlib/ctype.h"
 4928              		.file 12 "dmcp/ff_ifc.h"
 4929              		.file 13 "dmcp/dmcp.h"
 4930              		.file 14 "src/keys.h"
 4931              		.file 15 "src/decNumber/decContext.h"
 4932              		.file 16 "src/decNumber/decNumber.h"
 4933              		.file 17 "src/decNumber/decimal64.h"
 4934              		.file 18 "src/decNumber/decimal128.h"
 4935              		.file 19 "src/xeq.h"
 4936              		.file 20 "src/data.h"
 4937              		.file 21 "src/display.h"
 4938              		.file 22 "src/consts.h"
 4939              		.file 23 "src/storage.h"
 4940              		.file 24 "src/catalogues.h"
 4941              		.file 25 "src/menu.h"
 4942              		.file 26 "/usr/include/newlib/string.h"
 4943              		.file 27 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccGwc1Zz.s 			page 118


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccGwc1Zz.s:18     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccGwc1Zz.s:26     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccGwc1Zz.s:392    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/ccGwc1Zz.s:400    .text.set_menu:0000000000000000 $t
     /tmp/ccGwc1Zz.s:408    .text.set_menu:0000000000000000 set_menu
     /tmp/ccGwc1Zz.s:458    .text.set_menu:0000000000000024 $d
     /tmp/ccGwc1Zz.s:464    .text.get_menu:0000000000000000 $t
     /tmp/ccGwc1Zz.s:472    .text.get_menu:0000000000000000 get_menu
     /tmp/ccGwc1Zz.s:488    .text.get_menu:0000000000000008 $d
     /tmp/ccGwc1Zz.s:493    .text.set_last_menu:0000000000000000 $t
     /tmp/ccGwc1Zz.s:501    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccGwc1Zz.s:550    .text.set_last_menu:0000000000000014 $d
     /tmp/ccGwc1Zz.s:556    .text.mdot:0000000000000000 $t
     /tmp/ccGwc1Zz.s:564    .text.mdot:0000000000000000 mdot
     /tmp/ccGwc1Zz.s:655    .text.mdot:000000000000003c $d
     /tmp/ccGwc1Zz.s:660    .text.display_menu:0000000000000000 $t
     /tmp/ccGwc1Zz.s:668    .text.display_menu:0000000000000000 display_menu
     /tmp/ccGwc1Zz.s:907    .text.display_menu:000000000000010c $d
     /tmp/ccGwc1Zz.s:915    .text.display_current_menu:0000000000000000 $t
     /tmp/ccGwc1Zz.s:923    .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccGwc1Zz.s:938    .text.display_current_menu:0000000000000008 $d
     /tmp/ccGwc1Zz.s:943    .text.shutdown:0000000000000000 $t
     /tmp/ccGwc1Zz.s:951    .text.shutdown:0000000000000000 shutdown
     /tmp/ccGwc1Zz.s:978    .text.shutdown:0000000000000014 $d
     /tmp/ccGwc1Zz.s:983    .text.is_key_pressed:0000000000000000 $t
     /tmp/ccGwc1Zz.s:991    .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccGwc1Zz.s:1014   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccGwc1Zz.s:1019   .text.get_key:0000000000000000 $t
     /tmp/ccGwc1Zz.s:1027   .text.get_key:0000000000000000 get_key
     /tmp/ccGwc1Zz.s:1042   .text.get_key:0000000000000004 $d
     /tmp/ccGwc1Zz.s:1047   .text.put_key:0000000000000000 $t
     /tmp/ccGwc1Zz.s:1055   .text.put_key:0000000000000000 put_key
     /tmp/ccGwc1Zz.s:1072   .text.put_key:0000000000000004 $d
     /tmp/ccGwc1Zz.s:1077   .text.shift_down:0000000000000000 $t
     /tmp/ccGwc1Zz.s:1085   .text.shift_down:0000000000000000 shift_down
     /tmp/ccGwc1Zz.s:1100   .text.start_key_timer:0000000000000000 $t
     /tmp/ccGwc1Zz.s:1108   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccGwc1Zz.s:1132   .text.start_key_timer:000000000000000c $d
     /tmp/ccGwc1Zz.s:1138   .text.keyticks:0000000000000000 $t
     /tmp/ccGwc1Zz.s:1146   .text.keyticks:0000000000000000 keyticks
     /tmp/ccGwc1Zz.s:1177   .text.keyticks:0000000000000018 $d
     /tmp/ccGwc1Zz.s:1183   .text.is_paused:0000000000000000 $t
     /tmp/ccGwc1Zz.s:1191   .text.is_paused:0000000000000000 is_paused
     /tmp/ccGwc1Zz.s:1207   .text.is_paused:0000000000000008 $d
     /tmp/ccGwc1Zz.s:1212   .text.start_pause:0000000000000000 $t
     /tmp/ccGwc1Zz.s:1220   .text.start_pause:0000000000000000 start_pause
     /tmp/ccGwc1Zz.s:1247   .text.start_pause:000000000000000c $d
     /tmp/ccGwc1Zz.s:1252   .text.init_graphics:0000000000000000 $t
     /tmp/ccGwc1Zz.s:1260   .text.init_graphics:0000000000000000 init_graphics
     /tmp/ccGwc1Zz.s:1309   .text.init_graphics:0000000000000028 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccGwc1Zz.s:1318   .text.moveto:0000000000000000 $t
     /tmp/ccGwc1Zz.s:1326   .text.moveto:0000000000000000 moveto
     /tmp/ccGwc1Zz.s:1386   .text.moveto:000000000000002c $d
     /tmp/ccGwc1Zz.s:1393   .rodata.print_debug.str1.4:0000000000000000 $d
ARM GAS  /tmp/ccGwc1Zz.s 			page 119


     /tmp/ccGwc1Zz.s:1397   .text.print_debug:0000000000000000 $t
     /tmp/ccGwc1Zz.s:1405   .text.print_debug:0000000000000000 print_debug
     /tmp/ccGwc1Zz.s:1507   .text.print_debug:0000000000000064 $d
     /tmp/ccGwc1Zz.s:1518   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccGwc1Zz.s:1522   .text.print_debug2:0000000000000000 $t
     /tmp/ccGwc1Zz.s:1530   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccGwc1Zz.s:1632   .text.print_debug2:0000000000000064 $d
     /tmp/ccGwc1Zz.s:1643   .text.do_now:0000000000000000 $t
     /tmp/ccGwc1Zz.s:1651   .text.do_now:0000000000000000 do_now
     /tmp/ccGwc1Zz.s:1686   .text.do_multi:0000000000000000 $t
     /tmp/ccGwc1Zz.s:1694   .text.do_multi:0000000000000000 do_multi
     /tmp/ccGwc1Zz.s:1725   .text.do_multi:0000000000000018 $d
     /tmp/ccGwc1Zz.s:1735   .text.do_multi:0000000000000022 $t
     /tmp/ccGwc1Zz.s:2000   .text.do_multi:000000000000011c $d
     /tmp/ccGwc1Zz.s:2005   .rodata.program_main.str1.4:0000000000000000 $d
     /tmp/ccGwc1Zz.s:2009   .text.program_main:0000000000000000 $t
     /tmp/ccGwc1Zz.s:2017   .text.program_main:0000000000000000 program_main
     /tmp/ccGwc1Zz.s:2478   .text.program_main:00000000000001f0 $d
     /tmp/ccGwc1Zz.s:2484   .text.program_main:00000000000001fc $t
     /tmp/ccGwc1Zz.s:2678   .text.program_main:00000000000002d8 $d
     /tmp/ccGwc1Zz.s:2715   .text.program_main:000000000000035c $t
     /tmp/ccGwc1Zz.s:3295   .text.program_main:000000000000061c $d
     /tmp/ccGwc1Zz.s:3356   .bss.n_p:0000000000000000 n_p
     /tmp/ccGwc1Zz.s:3424   .data.spaces:0000000000000000 spaces
     /tmp/ccGwc1Zz.s:3415   .data.release:0000000000000000 release
     /tmp/ccGwc1Zz.s:3388   .data.h_shift:0000000000000000 h_shift
     /tmp/ccGwc1Zz.s:3379   .data.g_shift:0000000000000000 g_shift
     /tmp/ccGwc1Zz.s:3370   .data.f_shift:0000000000000000 f_shift
     /tmp/ccGwc1Zz.s:3397   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccGwc1Zz.s:3406   .data.no_key:0000000000000000 no_key
     /tmp/ccGwc1Zz.s:3431   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccGwc1Zz.s:3327   .rodata.str1.4:0000000000000000 $d
     /tmp/ccGwc1Zz.s:4916   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccGwc1Zz.s:3332   .bss.current_menu:0000000000000000 $d
     /tmp/ccGwc1Zz.s:3336   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccGwc1Zz.s:3339   .bss.last_menu:0000000000000000 $d
     /tmp/ccGwc1Zz.s:3343   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccGwc1Zz.s:3346   .bss.mdots:0000000000000000 $d
     /tmp/ccGwc1Zz.s:3350   .bss.mdots:0000000000000000 mdots
     /tmp/ccGwc1Zz.s:3353   .bss.n_p:0000000000000000 $d
     /tmp/ccGwc1Zz.s:3359   .bss.start_ticks:0000000000000000 $d
     /tmp/ccGwc1Zz.s:3363   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccGwc1Zz.s:3366   .data.f_shift:0000000000000000 $d
     /tmp/ccGwc1Zz.s:3375   .data.g_shift:0000000000000000 $d
     /tmp/ccGwc1Zz.s:3384   .data.h_shift:0000000000000000 $d
     /tmp/ccGwc1Zz.s:3393   .data.heartbeat:0000000000000000 $d
     /tmp/ccGwc1Zz.s:3402   .data.no_key:0000000000000000 $d
     /tmp/ccGwc1Zz.s:3411   .data.release:0000000000000000 $d
     /tmp/ccGwc1Zz.s:3420   .data.spaces:0000000000000000 $d
     /tmp/ccGwc1Zz.s:3427   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccGwc1Zz.s:3437   .rodata.Menus:0000000000000000 $d
     /tmp/ccGwc1Zz.s:3441   .rodata.Menus:0000000000000000 Menus
     /tmp/ccGwc1Zz.s:4325   .rodata.mapping_alpha.10894:0000000000000000 $d
     /tmp/ccGwc1Zz.s:4329   .rodata.mapping_alpha.10894:0000000000000000 mapping_alpha.10894
     /tmp/ccGwc1Zz.s:4472   .rodata.mapping_fshift.10892:0000000000000000 $d
     /tmp/ccGwc1Zz.s:4476   .rodata.mapping_fshift.10892:0000000000000000 mapping_fshift.10892
     /tmp/ccGwc1Zz.s:4619   .rodata.mapping_gshift.10893:0000000000000000 $d
ARM GAS  /tmp/ccGwc1Zz.s 			page 120


     /tmp/ccGwc1Zz.s:4623   .rodata.mapping_gshift.10893:0000000000000000 mapping_gshift.10893
     /tmp/ccGwc1Zz.s:4766   .rodata.mapping_none.10891:0000000000000000 $d
     /tmp/ccGwc1Zz.s:4770   .rodata.mapping_none.10891:0000000000000000 mapping_none.10891
     /tmp/ccGwc1Zz.s:4913   .rodata.mid_menu:0000000000000000 $d

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
pixel_length
save_ram_file
Pause
strcpy
sprintf
process_keycode_with_shift
save_prog_file
flash_backup
flash_restore
save_lib_file
load_lib_file
load_ram_file
load_prog_file
init_mem
init_RegionTab
init_34s
load_backup_file
display
get_alpha_state
cur_shift
StateWhileOn
DispMsg
JustDisplayed

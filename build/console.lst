ARM GAS  /tmp/cczIC8Cx.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC3:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** //#include <menu.h>
   2:src/menu.c    **** struct _menu UserMenu =
   3:src/menu.c    ****   {
   4:src/menu.c    ****     "User Menu", 
   5:src/menu.c    ****     {
   6:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   7:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   8:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   9:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  10:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  11:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
  12:src/menu.c    ****     }
  13:src/menu.c    ****   };
  14:src/menu.c    **** 
  15:src/menu.c    **** const char* arrow_key_string = "--\015";
  16:src/menu.c    **** const char* cmplx_key_string = "CPX";
  17:src/menu.c    **** 
  18:src/menu.c    **** menu_name current_menu = 0;
  19:src/menu.c    **** menu_name last_menu = 0;
  20:src/menu.c    **** menu_name default_menu = 0;
  21:src/menu.c    **** 
  22:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted);
  23:src/menu.c    **** 
ARM GAS  /tmp/cczIC8Cx.s 			page 2


  24:src/menu.c    **** 
  25:src/menu.c    **** 
  26:src/menu.c    **** /* 
  27:src/menu.c    ****  * System menu stuff
  28:src/menu.c    ****  */
  29:src/menu.c    **** 
  30:src/menu.c    **** #define MI_ABOUT_PGM 11
  31:src/menu.c    **** 
  32:src/menu.c    **** const uint8_t mid_menu[] = {
  33:src/menu.c    ****     MI_SYSTEM_ENTER,
  34:src/menu.c    ****     MI_MSC,
  35:src/menu.c    ****     MI_ABOUT_PGM,
  36:src/menu.c    ****     0 }; // Terminator
  37:src/menu.c    **** 
  38:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  39:src/menu.c    **** 
  40:src/menu.c    **** void disp_about(void);
  41:src/menu.c    **** 
  42:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  43:src/menu.c    ****   int ret = 0;
  44:src/menu.c    **** 
  45:src/menu.c    ****   switch(line_id) {
  46:src/menu.c    ****     case MI_ABOUT_PGM:
  47:src/menu.c    ****       disp_about();
  48:src/menu.c    ****       break;
  49:src/menu.c    **** 
  50:src/menu.c    ****      default:
  51:src/menu.c    ****       ret = MRET_UNIMPL;
  52:src/menu.c    ****       break;
  53:src/menu.c    ****   }
  54:src/menu.c    **** 
  55:src/menu.c    ****   return ret;
  56:src/menu.c    **** }
  57:src/menu.c    **** 
  58:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 58 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  59:src/menu.c    ****   const char * ln;
  40              		.loc 1 59 3 view .LVU1
  60:src/menu.c    **** 
  61:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 61 3 view .LVU2
  62:src/menu.c    **** 
  63:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  64:src/menu.c    **** 
  65:src/menu.c    ****   default:
  66:src/menu.c    ****     ln = NULL;
  42              		.loc 1 66 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  61:src/menu.c    **** 
  44              		.loc 1 61 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
  67:src/menu.c    ****     break;
  68:src/menu.c    ****   }
ARM GAS  /tmp/cczIC8Cx.s 			page 3


  69:src/menu.c    **** 
  70:src/menu.c    ****   return ln;
  71:src/menu.c    **** }
  46              		.loc 1 71 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 71 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC3
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB37:
  72:src/menu.c    **** 
  73:src/menu.c    **** void disp_about() {
  74:src/menu.c    ****   lcd_clear_buf();
  75:src/menu.c    ****   lcd_writeClr(t24);
  76:src/menu.c    **** 
  77:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  78:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
  79:src/menu.c    ****   t24->y += 5;
  80:src/menu.c    **** #ifdef TOP_ROW
  81:src/menu.c    ****   lcd_print(t24, "top row version,");
  82:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
  83:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  84:src/menu.c    ****   lcd_print(t24, "with a longer alpha display,");
  85:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  86:src/menu.c    ****   #else
  87:src/menu.c    ****   lcd_print(t24, "Just like the original calculator");
  88:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed,");
  89:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  90:src/menu.c    **** #endif
  91:src/menu.c    ****   t24->y += 5;
  92:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
  93:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
  94:src/menu.c    **** 
  95:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
  96:src/menu.c    ****   t24->x = 20;
  97:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
  98:src/menu.c    **** 
  99:src/menu.c    ****   lcd_refresh();
 100:src/menu.c    **** 
 101:src/menu.c    ****   wait_for_key_press();
 102:src/menu.c    **** }
ARM GAS  /tmp/cczIC8Cx.s 			page 4


 103:src/menu.c    **** 
 104:src/menu.c    **** /*
 105:src/menu.c    ****  * WP34s menu code
 106:src/menu.c    ****  */
 107:src/menu.c    **** 
 108:src/menu.c    **** void set_menu ( menu_name new_menu ) {
 109:src/menu.c    ****   menu_name m = current_menu;
 110:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 111:src/menu.c    ****     current_menu = default_menu;
 112:src/menu.c    ****   }
 113:src/menu.c    ****   else if (new_menu == M_Last) { // go to last menu
 114:src/menu.c    ****     current_menu = last_menu;
 115:src/menu.c    ****   }
 116:src/menu.c    ****   else {
 117:src/menu.c    ****     current_menu = new_menu; // change to new menu
 118:src/menu.c    ****   }
 119:src/menu.c    ****   if ( (m != M_Arrow) && (m != M_Alpha) ) last_menu = m;
 120:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 121:src/menu.c    **** }
 122:src/menu.c    **** 
 123:src/menu.c    **** void set_default_menu () {
 124:src/menu.c    ****   set_menu (default_menu);
 125:src/menu.c    **** }
 126:src/menu.c    **** 
 127:src/menu.c    **** void toggle_default_menu () {
 128:src/menu.c    ****   if (current_menu == M_Blank) {
 129:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 130:src/menu.c    ****     return;
 131:src/menu.c    ****   }
 132:src/menu.c    ****   else if (current_menu == M_Blank2) {
 133:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 134:src/menu.c    ****   }
 135:src/menu.c    ****   else {
 136:src/menu.c    ****     set_default_menu();
 137:src/menu.c    ****   }
 138:src/menu.c    **** }
 139:src/menu.c    **** 
 140:src/menu.c    **** menu_name get_menu () {
 141:src/menu.c    ****   return current_menu;
 142:src/menu.c    **** }
 143:src/menu.c    **** 
 144:src/menu.c    **** menu_name get_last_menu () {
 145:src/menu.c    ****   return last_menu;
 146:src/menu.c    **** }
 147:src/menu.c    **** 
 148:src/menu.c    **** void display_current_menu () {
 149:src/menu.c    ****   display_menu (get_current_menu_ref());
 150:src/menu.c    **** }
 151:src/menu.c    **** 
 152:src/menu.c    **** void set_last_menu () {
 153:src/menu.c    ****   set_menu (M_Last);
 154:src/menu.c    **** }
 155:src/menu.c    **** 
 156:src/menu.c    **** static unsigned char mdots[200][2];
 157:src/menu.c    **** 
 158:src/menu.c    **** static const struct _menu Menus[] = {
 159:src/menu.c    ****   {
ARM GAS  /tmp/cczIC8Cx.s 			page 5


 160:src/menu.c    ****     "M_Blank", // 0
 161:src/menu.c    ****     { 
 162:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 163:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 164:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 165:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 166:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 167:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 168:src/menu.c    ****     }    
 169:src/menu.c    ****   },
 170:src/menu.c    ****   {
 171:src/menu.c    ****     "M_Clear", // 1
 172:src/menu.c    ****     { 
 173:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 174:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 175:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 176:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 177:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 178:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 179:src/menu.c    ****     }    
 180:src/menu.c    ****   },
 181:src/menu.c    ****   {
 182:src/menu.c    ****     "M_Disp", // 2
 183:src/menu.c    ****     { 
 184:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 185:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 186:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 187:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 188:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 189:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 190:src/menu.c    ****     }
 191:src/menu.c    ****   },
 192:src/menu.c    ****   {
 193:src/menu.c    ****     "M_Base", // 3
 194:src/menu.c    ****     { 
 195:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 196:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 197:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 198:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 199:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 200:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 201:src/menu.c    ****     }
 202:src/menu.c    ****   },
 203:src/menu.c    ****   {
 204:src/menu.c    ****     "M_Angles", // 4
 205:src/menu.c    ****     { 
 206:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 207:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 208:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 209:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 210:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 211:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 212:src/menu.c    ****     }
 213:src/menu.c    ****       
 214:src/menu.c    ****   },
 215:src/menu.c    ****   {
 216:src/menu.c    ****     "M_Misc", // 5
ARM GAS  /tmp/cczIC8Cx.s 			page 6


 217:src/menu.c    ****     { 
 218:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 219:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 220:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 221:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 222:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 223:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 224:src/menu.c    ****     }
 225:src/menu.c    ****   },
 226:src/menu.c    ****   {
 227:src/menu.c    ****     "M_Swap", // 6
 228:src/menu.c    ****     { 
 229:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 230:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 231:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 232:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 233:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 234:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 235:src/menu.c    ****     }    
 236:src/menu.c    ****   },
 237:src/menu.c    ****   {
 238:src/menu.c    ****     "M_Program", // 7
 239:src/menu.c    ****     { 
 240:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 241:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 242:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 243:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 244:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 245:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 246:src/menu.c    ****     }
 247:src/menu.c    ****   },
 248:src/menu.c    ****   {
 249:src/menu.c    ****     "M_Setup1", // 8
 250:src/menu.c    ****     { 
 251:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 252:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 253:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 254:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 255:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 256:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 257:src/menu.c    ****     }
 258:src/menu.c    ****   },
 259:src/menu.c    ****   {
 260:src/menu.c    ****     "M_Arrow", // 9
 261:src/menu.c    ****     { 
 262:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 263:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 264:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 265:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "\015HMS" },
 266:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 267:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 268:src/menu.c    ****     }
 269:src/menu.c    ****   },
 270:src/menu.c    ****   {
 271:src/menu.c    ****     "M_Flags", // 10
 272:src/menu.c    ****     { 
 273:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
ARM GAS  /tmp/cczIC8Cx.s 			page 7


 274:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 275:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 276:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 277:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 278:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 279:src/menu.c    ****     }
 280:src/menu.c    ****   },
 281:src/menu.c    ****   {
 282:src/menu.c    ****     "M_Prob", // 11
 283:src/menu.c    ****     { 
 284:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 285:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 286:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 287:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 288:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 289:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 290:src/menu.c    ****     }
 291:src/menu.c    ****   },
 292:src/menu.c    ****   {
 293:src/menu.c    ****     "M_Stats", // 12
 294:src/menu.c    ****     /*
 295:src/menu.c    ****      *xbar, sd;
 296:src/menu.c    ****      *yhat, xhat;
 297:src/menu.c    ****      *corr, L.R.;
 298:src/menu.c    ****      *best, linear;
 299:src/menu.c    ****      *ln, exp;
 300:src/menu.c    ****      *cmplx, power;
 301:src/menu.c    ****      *No, sums is already on g9.
 302:src/menu.c    ****      */
 303:src/menu.c    ****     { 
 304:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 305:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 306:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 307:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 308:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 309:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 310:src/menu.c    ****     }
 311:src/menu.c    ****   },
 312:src/menu.c    ****   {
 313:src/menu.c    ****     "M_Setup2", // 13
 314:src/menu.c    ****     { 
 315:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 316:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 317:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 318:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 319:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 320:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 321:src/menu.c    ****     }
 322:src/menu.c    ****   },
 323:src/menu.c    ****   {
 324:src/menu.c    ****     "M_Solve", // 14
 325:src/menu.c    ****     { 
 326:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 327:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 328:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 329:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 330:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
ARM GAS  /tmp/cczIC8Cx.s 			page 8


 331:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 332:src/menu.c    ****     }
 333:src/menu.c    ****   },
 334:src/menu.c    ****   {
 335:src/menu.c    ****     "M_Blank2", // 15
 336:src/menu.c    ****     { 
 337:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 338:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 339:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 340:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 341:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 342:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 343:src/menu.c    ****     }    
 344:src/menu.c    ****   },
 345:src/menu.c    ****   {
 346:src/menu.c    ****     "M_Alpha", // 16
 347:src/menu.c    ****     { 
 348:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 349:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 350:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 351:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 352:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 353:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 354:src/menu.c    ****     }    
 355:src/menu.c    ****   },
 356:src/menu.c    ****   {
 357:src/menu.c    ****     "M_C_Lock", // 17
 358:src/menu.c    ****     { 
 359:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 360:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 361:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "+/-\006Im", "+/-\006Re" },
 362:src/menu.c    ****       { { K21, 2 }, { K00, 1 }, "Re\027Im", "HYP" },
 363:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 364:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 365:src/menu.c    ****     }    
 366:src/menu.c    ****   },
 367:src/menu.c    ****   {
 368:src/menu.c    ****     "M_Clear_C", // 18
 369:src/menu.c    ****     { 
 370:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 371:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 372:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 373:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, NO_KEY, "CLStk", "" },
 374:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 375:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 376:src/menu.c    ****     }    
 377:src/menu.c    ****   },
 378:src/menu.c    ****   {
 379:src/menu.c    ****     "M_Swap_C", // 19
 380:src/menu.c    ****     { 
 381:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 382:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 383:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 384:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 385:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 386:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 387:src/menu.c    ****     }    
ARM GAS  /tmp/cczIC8Cx.s 			page 9


 388:src/menu.c    ****   },
 389:src/menu.c    ****   {
 390:src/menu.c    ****     "M_Arrow_C", // 20
 391:src/menu.c    ****     { 
 392:src/menu.c    ****       { NO_KEY, { K10, 2 }, "", "DEG" },
 393:src/menu.c    ****       { NO_KEY, { K11, 2 }, "", "RAD" },
 394:src/menu.c    ****       { NO_KEY, { K12, 2 }, "", "Grad" },
 395:src/menu.c    ****       { NO_KEY, { K10, 1 }, "", "\015HMS" },
 396:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 397:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 398:src/menu.c    ****     }
 399:src/menu.c    ****   },
 400:src/menu.c    ****   {
 401:src/menu.c    ****     "M_Prob_C", // 21
 402:src/menu.c    ****     { 
 403:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_CMON | OP_LNGAMMA }, "\024\006!", "\024\006Ln\006\202" },
 404:src/menu.c    ****       { { K_OP, OP_CDYA | OP_COMB }, NO_KEY, "\024\006Cy,x", "" },
 405:src/menu.c    ****       { { K_OP, OP_CDYA | OP_PERM }, NO_KEY, "\024\006Py,x", "" },
 406:src/menu.c    ****       { NO_KEY, NO_KEY , "", "" },
 407:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 408:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 409:src/menu.c    ****     }
 410:src/menu.c    ****   },
 411:src/menu.c    ****   {
 412:src/menu.c    ****     "M_Blank2_C", // 22
 413:src/menu.c    ****     { 
 414:src/menu.c    ****       { { K00, 1 }, NO_KEY, "HYP", "" },
 415:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 416:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 417:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 418:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 419:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 420:src/menu.c    ****     }    
 421:src/menu.c    ****   },
 422:src/menu.c    ****   {
 423:src/menu.c    ****     "M_Misc_C", // 23
 424:src/menu.c    ****     { 
 425:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|z|", "\0242\234" },
 426:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "\024Log\272" },
 427:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "0\015Re", "\024Log\213" },
 428:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "0\015Im", "\024||el" },
 429:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "\024.\034" },
 430:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "\024./" },
 431:src/menu.c    ****     }
 432:src/menu.c    ****   },
 433:src/menu.c    ****   {
 434:src/menu.c    ****     "M_Usermenu", // 24
 435:src/menu.c    ****     { 
 436:src/menu.c    ****       { { K_OP, 0x0000fb00  }, NO_KEY, "UMEN", "" },
 437:src/menu.c    ****       { { K_OP, 0x314dfb55 }, { K_OP, 0x344dfb55 }, "UM1", "UM4" },
 438:src/menu.c    ****       { { K_OP, 0x324dfb55 }, { K_OP, 0x354dfb55 }, "UM2", "UM5" },
 439:src/menu.c    ****       { { K_OP, 0x334dfb55 }, { K_OP, 0x364dfb55 }, "UM3", "UM6" },
 440:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "" },
 441:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "" },
 442:src/menu.c    ****     }
 443:src/menu.c    ****   },
 444:src/menu.c    ****   {
ARM GAS  /tmp/cczIC8Cx.s 			page 10


 445:src/menu.c    ****     "M_Print", // 25
 446:src/menu.c    ****     { 
 447:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_ON  }, { K_OP, OP_NIL | OP_PRINT_OFF }, "\222\006On", "\222\006Of
 448:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_PMODE) }, { K_OP, RARG_BASEOP(RARG_DBLSP) }, "\222\006Mode", "\222
 449:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_PGM }, { K_OP, OP_NIL | OP_PRINT_REGS }, "\222\006Prog", "\222\00
 450:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_STACK }, { K_OP, OP_NIL | OP_PRINT_SIGMA }, "\222\006Stck", "\222
 451:src/menu.c    ****       { ARROW_KEY, { K_OP, OP_NIL | OP_PRINT_ALPHA }, "--\015", "\222\006\240" },
 452:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PRINT_ADV }, "CPX", "\222\006ADV" },
 453:src/menu.c    ****     }
 454:src/menu.c    ****   },
 455:src/menu.c    **** 
 456:src/menu.c    **** };  
 457:src/menu.c    **** 
 458:src/menu.c    **** /* This code is the set_status_sized code with small changes
 459:src/menu.c    ****  * and non-DM42 code removed.
 460:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 461:src/menu.c    ****  */
 462:src/menu.c    **** #define MENU_WIDTH 32
 463:src/menu.c    **** 
 464:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 464 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 465:src/menu.c    ****   // dotcol is the number of the starting dot column
 466:src/menu.c    ****   // shifted is 1 if shifted
 467:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 467 3 view .LVU8
 468:src/menu.c    **** 
 469:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 470:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 470 3 view .LVU9
 471:src/menu.c    **** 
 472:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 472 3 view .LVU10
 464:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 464 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 464:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 464 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 473:src/menu.c    ****   int i, j, xmax;
 474:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 474 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
ARM GAS  /tmp/cczIC8Cx.s 			page 11


  96 000e B4BF     		ite	lt
  97 0010 01F11F03 		addlt	r3, r1, #31
  98 0014 0B46     		movge	r3, r1
 475:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 476:src/menu.c    **** 
 477:src/menu.c    ****   forceDispPlot=0;
  99              		.loc 1 477 16 view .LVU14
 100 0016 4848     		ldr	r0, .L41
 101              	.LVL3:
 464:src/menu.c    ****   // dotcol is the number of the starting dot column
 102              		.loc 1 464 13 view .LVU15
 103 0018 0F46     		mov	r7, r1
 104              	.LVL4:
 473:src/menu.c    ****   int i, j, xmax;
 105              		.loc 1 473 3 is_stmt 1 view .LVU16
 474:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 106              		.loc 1 474 3 view .LVU17
 478:src/menu.c    **** 
 479:src/menu.c    **** #ifdef RP_PREFIX
 480:src/menu.c    ****   RectPolConv = 0;
 107              		.loc 1 480 15 is_stmt 0 view .LVU18
 108 001a 4849     		ldr	r1, .L41+4
 109              	.LVL5:
 477:src/menu.c    **** 
 110              		.loc 1 477 16 view .LVU19
 111 001c 0022     		movs	r2, #0
 112              	.LVL6:
 477:src/menu.c    **** 
 113              		.loc 1 477 16 view .LVU20
 114 001e 0270     		strb	r2, [r0]
 115              		.loc 1 480 15 view .LVU21
 116 0020 0A60     		str	r2, [r1]
 481:src/menu.c    **** #endif
 482:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 117              		.loc 1 482 10 view .LVU22
 118 0022 019A     		ldr	r2, [sp, #4]
 119 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 474:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 120              		.loc 1 474 30 view .LVU23
 121 0026 23F01F03 		bic	r3, r3, #31
 474:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 122              		.loc 1 474 8 view .LVU24
 123 002a 03F12009 		add	r9, r3, #32
 124              	.LVL7:
 475:src/menu.c    **** 
 125              		.loc 1 475 3 is_stmt 1 view .LVU25
 477:src/menu.c    **** 
 126              		.loc 1 477 3 view .LVU26
 480:src/menu.c    **** #endif
 127              		.loc 1 480 3 view .LVU27
 128              		.loc 1 482 3 view .LVU28
 129              		.loc 1 482 9 view .LVU29
 130 002e 002D     		cmp	r5, #0
 131 0030 78D0     		beq	.L7
 132              		.loc 1 482 23 is_stmt 0 view .LVU30
 133 0032 4F45     		cmp	r7, r9
 134 0034 76DC     		bgt	.L7
ARM GAS  /tmp/cczIC8Cx.s 			page 12


 135              	.LBB39:
 483:src/menu.c    ****     int c;
 484:src/menu.c    ****     int width;
 485:src/menu.c    ****     unsigned char cmap[6];
 486:src/menu.c    **** 
 487:src/menu.c    ****     int real_width;
 488:src/menu.c    ****     int current_smallp;
 489:src/menu.c    **** 
 490:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 491:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 492:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 493:src/menu.c    ****     //           01 -> (not used)
 494:src/menu.c    ****     //           10 -> use big font
 495:src/menu.c    ****     //           11 -> use small font
 496:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 497:src/menu.c    ****     if (str[0] == '\007') {
 136              		.loc 1 497 8 view .LVU31
 137 0036 072D     		cmp	r5, #7
 138              	.LBE39:
 470:src/menu.c    **** 
 139              		.loc 1 470 7 view .LVU32
 140 0038 4FF0FF04 		mov	r4, #255
 141              	.LVL8:
 142              	.LBB56:
 483:src/menu.c    ****     int c;
 143              		.loc 1 483 5 is_stmt 1 view .LVU33
 484:src/menu.c    ****     unsigned char cmap[6];
 144              		.loc 1 484 5 view .LVU34
 485:src/menu.c    **** 
 145              		.loc 1 485 5 view .LVU35
 487:src/menu.c    ****     int current_smallp;
 146              		.loc 1 487 5 view .LVU36
 488:src/menu.c    **** 
 147              		.loc 1 488 5 view .LVU37
 148              		.loc 1 497 5 view .LVU38
 498:src/menu.c    ****       width = str[1] & 0x1F;
 499:src/menu.c    ****       switch (str[1] & 0x60) {
 500:src/menu.c    ****       default:
 501:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 502:src/menu.c    **** 	break;
 503:src/menu.c    ****       case 0x40:	current_smallp = 0;
 504:src/menu.c    **** 	break;
 505:src/menu.c    ****       case 0x60:	current_smallp = 1;
 149              		.loc 1 505 33 is_stmt 0 view .LVU39
 150 003c 4FF0010A 		mov	r10, #1
 497:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 497 8 view .LVU40
 152 0040 64D1     		bne	.L11
 153              	.LVL9:
 154              	.L39:
 498:src/menu.c    ****       width = str[1] & 0x1F;
 155              		.loc 1 498 7 is_stmt 1 view .LVU41
 498:src/menu.c    ****       width = str[1] & 0x1F;
 156              		.loc 1 498 18 is_stmt 0 view .LVU42
 157 0042 019B     		ldr	r3, [sp, #4]
 158 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 159 0046 06F06003 		and	r3, r6, #96
ARM GAS  /tmp/cczIC8Cx.s 			page 13


 499:src/menu.c    ****       default:
 160              		.loc 1 499 7 view .LVU43
 161 004a 402B     		cmp	r3, #64
 498:src/menu.c    ****       width = str[1] & 0x1F;
 162              		.loc 1 498 13 view .LVU44
 163 004c 06F01F06 		and	r6, r6, #31
 164              	.LVL10:
 499:src/menu.c    ****       default:
 165              		.loc 1 499 7 is_stmt 1 view .LVU45
 166 0050 6CD0     		beq	.L34
 167 0052 602B     		cmp	r3, #96
 168 0054 6AD1     		bne	.L34
 169              		.loc 1 505 18 view .LVU46
 170              	.LVL11:
 506:src/menu.c    **** 	break;
 171              		.loc 1 506 2 view .LVU47
 507:src/menu.c    ****       }
 508:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 172              		.loc 1 508 7 view .LVU48
 173              		.loc 1 508 11 is_stmt 0 view .LVU49
 174 0056 019B     		ldr	r3, [sp, #4]
 175 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 505:src/menu.c    **** 	break;
 176              		.loc 1 505 33 view .LVU50
 177 005a 0123     		movs	r3, #1
 178 005c 0093     		str	r3, [sp]
 179 005e 00F58075 		add	r5, r0, #256
 180              	.LVL12:
 181              	.L15:
 509:src/menu.c    ****       str += 3;
 182              		.loc 1 509 7 is_stmt 1 view .LVU51
 510:src/menu.c    **** 
 511:src/menu.c    ****       real_width = charlengths(c);
 183              		.loc 1 511 20 is_stmt 0 view .LVU52
 184 0062 2846     		mov	r0, r5
 185 0064 FFF7FEFF 		bl	charlengths
 186              	.LVL13:
 509:src/menu.c    ****       str += 3;
 187              		.loc 1 509 11 view .LVU53
 188 0068 019B     		ldr	r3, [sp, #4]
 189 006a 0333     		adds	r3, r3, #3
 190 006c 0193     		str	r3, [sp, #4]
 191              	.LVL14:
 192              		.loc 1 511 7 is_stmt 1 view .LVU54
 512:src/menu.c    ****     } else {
 513:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 514:src/menu.c    ****       real_width = width = charlengths(c);
 515:src/menu.c    ****       current_smallp = smallp;
 516:src/menu.c    ****     }
 517:src/menu.c    **** 
 518:src/menu.c    ****     if (x + real_width > xmax)
 193              		.loc 1 518 5 view .LVU55
 194              		.loc 1 518 11 is_stmt 0 view .LVU56
 195 006e C319     		adds	r3, r0, r7
 196              	.LVL15:
 197              		.loc 1 518 8 view .LVU57
 198 0070 9945     		cmp	r9, r3
ARM GAS  /tmp/cczIC8Cx.s 			page 14


 199 0072 57DB     		blt	.L7
 200              	.L40:
 519:src/menu.c    ****       break;
 520:src/menu.c    **** 
 521:src/menu.c    ****     if (posns_state != current_smallp) {
 201              		.loc 1 521 5 is_stmt 1 view .LVU58
 202              		.loc 1 521 8 is_stmt 0 view .LVU59
 203 0074 009B     		ldr	r3, [sp]
 204 0076 A342     		cmp	r3, r4
 522:src/menu.c    ****       findlengths(posns, current_smallp);
 205              		.loc 1 522 7 view .LVU60
 206 0078 07AB     		add	r3, sp, #28
 521:src/menu.c    ****       findlengths(posns, current_smallp);
 207              		.loc 1 521 8 view .LVU61
 208 007a 05D0     		beq	.L18
 209              		.loc 1 522 7 is_stmt 1 view .LVU62
 210 007c 1846     		mov	r0, r3
 211              	.LVL16:
 212              		.loc 1 522 7 is_stmt 0 view .LVU63
 213 007e 0099     		ldr	r1, [sp]
 214 0080 0393     		str	r3, [sp, #12]
 215 0082 FFF7FEFF 		bl	findlengths
 216              	.LVL17:
 217 0086 039B     		ldr	r3, [sp, #12]
 523:src/menu.c    ****       posns_state = current_smallp;
 218              		.loc 1 523 7 is_stmt 1 view .LVU64
 219              	.LVL18:
 220              	.L18:
 524:src/menu.c    ****     }
 525:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 221              		.loc 1 525 5 view .LVU65
 222 0088 009A     		ldr	r2, [sp]
 223 008a 2846     		mov	r0, r5
 224 008c 05A9     		add	r1, sp, #20
 225 008e FFF7FEFF 		bl	unpackchar
 226              	.LVL19:
 526:src/menu.c    **** 
 527:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 227              		.loc 1 527 5 view .LVU66
 228              		.loc 1 527 15 view .LVU67
 229 0092 029B     		ldr	r3, [sp, #8]
 230 0094 03EB4704 		add	r4, r3, r7, lsl #1
 231 0098 294B     		ldr	r3, .L41+8
 232 009a 0DF1140B 		add	fp, sp, #20
 233 009e 1C44     		add	r4, r4, r3
 525:src/menu.c    **** 
 234              		.loc 1 525 5 is_stmt 0 view .LVU68
 235 00a0 4FF0050E 		mov	lr, #5
 236 00a4 A9EB0705 		sub	r5, r9, r7
 237              	.LVL20:
 238              	.L19:
 528:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 239              		.loc 1 528 17 is_stmt 1 view .LVU69
 240              		.loc 1 528 7 is_stmt 0 view .LVU70
 241 00a8 002E     		cmp	r6, #0
 242 00aa 1FDD     		ble	.L25
 529:src/menu.c    **** 	if (x+j >= xmax)
ARM GAS  /tmp/cczIC8Cx.s 			page 15


 243              		.loc 1 529 2 is_stmt 1 view .LVU71
 244              		.loc 1 529 5 is_stmt 0 view .LVU72
 245 00ac B945     		cmp	r9, r7
 246 00ae 1DDD     		ble	.L25
 247              	.LBB40:
 248              	.LBB41:
 249              	.LBB42:
 250              	.LBB43:
 530:src/menu.c    **** 	  break;
 531:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 532:src/menu.c    ****       }
 533:src/menu.c    ****     }
 534:src/menu.c    ****     x += width;
 535:src/menu.c    ****   }
 536:src/menu.c    **** }
 537:src/menu.c    **** 
 538:src/menu.c    **** 
 539:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 540:src/menu.c    **** 
 541:src/menu.c    **** int pixel_length(const char *s, int smallp)
 542:src/menu.c    **** {
 543:src/menu.c    ****   int len = 0;
 544:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 545:src/menu.c    ****   while (*s != '\0') {
 546:src/menu.c    ****     if (s[0] == '\007') {
 547:src/menu.c    ****       len += s[1] & 0x1F;
 548:src/menu.c    ****       s += 3;
 549:src/menu.c    ****       continue;
 550:src/menu.c    ****     }
 551:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 552:src/menu.c    ****   }
 553:src/menu.c    ****   return len;
 554:src/menu.c    **** }
 555:src/menu.c    **** */
 556:src/menu.c    **** 
 557:src/menu.c    **** 
 558:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 559:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 560:src/menu.c    ****   if (on) {
 561:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 562:src/menu.c    ****   }
 563:src/menu.c    ****   else {
 564:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 251              		.loc 1 564 25 view .LVU73
 252 00b0 0AFA0EFC 		lsl	ip, r10, lr
 253              		.loc 1 564 17 view .LVU74
 254 00b4 4FFA8CFC 		sxtb	ip, ip
 255              	.LBE43:
 256              	.LBE42:
 257              	.LBE41:
 258              	.LBE40:
 531:src/menu.c    ****       }
 259              		.loc 1 531 31 view .LVU75
 260 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 261              	.LBB53:
 262              	.LBB50:
 263              	.LBB47:
ARM GAS  /tmp/cczIC8Cx.s 			page 16


 264              	.LBB44:
 265              		.loc 1 564 17 view .LVU76
 266 00bc 6FEA0C08 		mvn	r8, ip
 267              	.LBE44:
 268              	.LBE47:
 269              	.LBE50:
 270              	.LBE53:
 528:src/menu.c    **** 	if (x+j >= xmax)
 271              		.loc 1 528 13 view .LVU77
 272 00c0 0023     		movs	r3, #0
 273 00c2 01E0     		b	.L20
 274              	.LVL21:
 275              	.L24:
 529:src/menu.c    **** 	  break;
 276              		.loc 1 529 5 view .LVU78
 277 00c4 9D42     		cmp	r5, r3
 278 00c6 11D0     		beq	.L25
 279              	.LVL22:
 280              	.L20:
 531:src/menu.c    ****       }
 281              		.loc 1 531 2 is_stmt 1 view .LVU79
 282              	.LBB54:
 283              	.LBI40:
 558:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 558 6 view .LVU80
 285              	.LBB51:
 559:src/menu.c    ****   if (on) {
 286              		.loc 1 559 3 view .LVU81
 287              	.LBB48:
 288              	.LBI42:
 558:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 289              		.loc 1 558 6 view .LVU82
 290              	.LBB45:
 560:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 291              		.loc 1 560 3 view .LVU83
 292              	.LBE45:
 293              	.LBE48:
 559:src/menu.c    ****   if (on) {
 294              		.loc 1 559 6 is_stmt 0 view .LVU84
 295 00c8 DA19     		adds	r2, r3, r7
 296              	.LVL23:
 559:src/menu.c    ****   if (on) {
 297              		.loc 1 559 6 view .LVU85
 298 00ca C72A     		cmp	r2, #199
 299              	.LBE51:
 300              	.LBE54:
 531:src/menu.c    ****       }
 301              		.loc 1 531 46 view .LVU86
 302 00cc 40FA03F1 		asr	r1, r0, r3
 303              	.LBB55:
 304              	.LBB52:
 559:src/menu.c    ****   if (on) {
 305              		.loc 1 559 6 view .LVU87
 306 00d0 09D8     		bhi	.L22
 307              	.LBB49:
 308              	.LBB46:
 561:src/menu.c    ****   }
ARM GAS  /tmp/cczIC8Cx.s 			page 17


 309              		.loc 1 561 5 is_stmt 1 view .LVU88
 310              		.loc 1 564 5 view .LVU89
 561:src/menu.c    ****   }
 311              		.loc 1 561 17 is_stmt 0 view .LVU90
 312 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 313              	.LVL24:
 560:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 314              		.loc 1 560 6 view .LVU91
 315 00d6 C907     		lsls	r1, r1, #31
 561:src/menu.c    ****   }
 316              		.loc 1 561 17 view .LVU92
 317 00d8 4CBF     		ite	mi
 318 00da 4CEA0202 		orrmi	r2, ip, r2
 319              		.loc 1 564 17 view .LVU93
 320 00de 08EA0202 		andpl	r2, r8, r2
 321 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 322              	.L22:
 323              	.LBE46:
 324              	.LBE49:
 325              	.LBE52:
 326              	.LBE55:
 529:src/menu.c    **** 	  break;
 327              		.loc 1 529 2 is_stmt 1 view .LVU94
 328              	.LVL25:
 528:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 528 26 view .LVU95
 528:src/menu.c    **** 	if (x+j >= xmax)
 330              		.loc 1 528 27 is_stmt 0 view .LVU96
 331 00e6 0133     		adds	r3, r3, #1
 332              	.LVL26:
 528:src/menu.c    **** 	if (x+j >= xmax)
 333              		.loc 1 528 17 is_stmt 1 view .LVU97
 528:src/menu.c    **** 	if (x+j >= xmax)
 334              		.loc 1 528 7 is_stmt 0 view .LVU98
 335 00e8 B342     		cmp	r3, r6
 336 00ea EBD1     		bne	.L24
 337              	.LVL27:
 338              	.L25:
 527:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 339              		.loc 1 527 20 is_stmt 1 view .LVU99
 527:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 340              		.loc 1 527 15 view .LVU100
 341 00ec 0EF1FF3E 		add	lr, lr, #-1
 527:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 342              		.loc 1 527 5 is_stmt 0 view .LVU101
 343 00f0 BEF1FF3F 		cmp	lr, #-1
 344 00f4 0BF1010B 		add	fp, fp, #1
 345              	.LVL28:
 527:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 346              		.loc 1 527 5 view .LVU102
 347 00f8 D6D1     		bne	.L19
 534:src/menu.c    ****   }
 348              		.loc 1 534 5 is_stmt 1 view .LVU103
 349              	.LBE56:
 482:src/menu.c    ****     int c;
 350              		.loc 1 482 10 is_stmt 0 view .LVU104
 351 00fa 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/cczIC8Cx.s 			page 18


 352 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 353              	.LBB57:
 534:src/menu.c    ****   }
 354              		.loc 1 534 7 view .LVU105
 355 00fe 3744     		add	r7, r7, r6
 356              	.LVL29:
 534:src/menu.c    ****   }
 357              		.loc 1 534 7 view .LVU106
 358              	.LBE57:
 482:src/menu.c    ****     int c;
 359              		.loc 1 482 9 is_stmt 1 view .LVU107
 360 0100 85B1     		cbz	r5, .L7
 482:src/menu.c    ****     int c;
 361              		.loc 1 482 23 is_stmt 0 view .LVU108
 362 0102 B945     		cmp	r9, r7
 363 0104 0EDB     		blt	.L7
 364              	.LBB58:
 497:src/menu.c    ****       width = str[1] & 0x1F;
 365              		.loc 1 497 8 view .LVU109
 366 0106 072D     		cmp	r5, #7
 367              	.LBE58:
 368 0108 009C     		ldr	r4, [sp]
 369              	.LBB59:
 483:src/menu.c    ****     int width;
 370              		.loc 1 483 5 is_stmt 1 view .LVU110
 484:src/menu.c    ****     unsigned char cmap[6];
 371              		.loc 1 484 5 view .LVU111
 485:src/menu.c    **** 
 372              		.loc 1 485 5 view .LVU112
 487:src/menu.c    ****     int current_smallp;
 373              		.loc 1 487 5 view .LVU113
 488:src/menu.c    **** 
 374              		.loc 1 488 5 view .LVU114
 497:src/menu.c    ****       width = str[1] & 0x1F;
 375              		.loc 1 497 5 view .LVU115
 497:src/menu.c    ****       width = str[1] & 0x1F;
 376              		.loc 1 497 8 is_stmt 0 view .LVU116
 377 010a 9AD0     		beq	.L39
 378              	.LVL30:
 379              	.L11:
 513:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 513 7 is_stmt 1 view .LVU117
 514:src/menu.c    ****       current_smallp = smallp;
 381              		.loc 1 514 28 is_stmt 0 view .LVU118
 382 010c 2846     		mov	r0, r5
 383 010e FFF7FEFF 		bl	charlengths
 384              	.LVL31:
 513:src/menu.c    ****       real_width = width = charlengths(c);
 385              		.loc 1 513 31 view .LVU119
 386 0112 019B     		ldr	r3, [sp, #4]
 387 0114 0133     		adds	r3, r3, #1
 388 0116 0193     		str	r3, [sp, #4]
 389              	.LVL32:
 514:src/menu.c    ****       current_smallp = smallp;
 390              		.loc 1 514 7 is_stmt 1 view .LVU120
 515:src/menu.c    ****     }
 391              		.loc 1 515 7 view .LVU121
ARM GAS  /tmp/cczIC8Cx.s 			page 19


 515:src/menu.c    ****     }
 392              		.loc 1 515 22 is_stmt 0 view .LVU122
 393 0118 0023     		movs	r3, #0
 394              	.LVL33:
 515:src/menu.c    ****     }
 395              		.loc 1 515 22 view .LVU123
 396 011a 0093     		str	r3, [sp]
 397              	.LVL34:
 518:src/menu.c    ****       break;
 398              		.loc 1 518 11 view .LVU124
 399 011c C319     		adds	r3, r0, r7
 400              	.LVL35:
 518:src/menu.c    ****       break;
 401              		.loc 1 518 8 view .LVU125
 402 011e 9945     		cmp	r9, r3
 514:src/menu.c    ****       current_smallp = smallp;
 403              		.loc 1 514 28 view .LVU126
 404 0120 0646     		mov	r6, r0
 518:src/menu.c    ****       break;
 405              		.loc 1 518 5 is_stmt 1 view .LVU127
 518:src/menu.c    ****       break;
 406              		.loc 1 518 8 is_stmt 0 view .LVU128
 407 0122 A7DA     		bge	.L40
 408              	.LVL36:
 409              	.L7:
 518:src/menu.c    ****       break;
 410              		.loc 1 518 8 view .LVU129
 411              	.LBE59:
 536:src/menu.c    **** 
 412              		.loc 1 536 1 view .LVU130
 413 0124 0DF5097D 		add	sp, sp, #548
 414              		.cfi_remember_state
 415              		.cfi_def_cfa_offset 36
 416              		@ sp needed
 417 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 418              	.LVL37:
 419              	.L34:
 420              		.cfi_restore_state
 421              	.LBB60:
 508:src/menu.c    ****       str += 3;
 422              		.loc 1 508 7 is_stmt 1 view .LVU131
 508:src/menu.c    ****       str += 3;
 423              		.loc 1 508 11 is_stmt 0 view .LVU132
 424 012c 019B     		ldr	r3, [sp, #4]
 425 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 501:src/menu.c    **** 	break;
 426              		.loc 1 501 33 view .LVU133
 427 0130 0023     		movs	r3, #0
 428 0132 0093     		str	r3, [sp]
 429 0134 95E7     		b	.L15
 430              	.L42:
 431 0136 00BF     		.align	2
 432              	.L41:
 433 0138 00000000 		.word	forceDispPlot
 434 013c 00000000 		.word	RectPolConv
 435 0140 00000000 		.word	.LANCHOR0
 436              	.LBE60:
ARM GAS  /tmp/cczIC8Cx.s 			page 20


 437              		.cfi_endproc
 438              	.LFE37:
 440              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 441              		.align	2
 442              	.LC4:
 443 0000 57503334 		.ascii	"WP34C calculator for DM42:\000"
 443      43206361 
 443      6C63756C 
 443      61746F72 
 443      20666F72 
 444 001b 00       		.align	2
 445              	.LC5:
 446 001c 746F7020 		.ascii	"top row version,\000"
 446      726F7720 
 446      76657273 
 446      696F6E2C 
 446      00
 447 002d 000000   		.align	2
 448              	.LC6:
 449 0030 696E636C 		.ascii	"including COMPLEX LOCK mode!\000"
 449      7564696E 
 449      6720434F 
 449      4D504C45 
 449      58204C4F 
 450 004d 000000   		.align	2
 451              	.LC7:
 452 0050 54686973 		.ascii	"This software is neither provided\000"
 452      20736F66 
 452      74776172 
 452      65206973 
 452      206E6569 
 453 0072 0000     		.align	2
 454              	.LC8:
 455 0074 6279206E 		.ascii	"by nor supported by SwissMicros.\000"
 455      6F722073 
 455      7570706F 
 455      72746564 
 455      20627920 
 456 0095 000000   		.align	2
 457              	.LC9:
 458 0098 20202020 		.ascii	"    Press EXIT key to continue...\000"
 458      50726573 
 458      73204558 
 458      4954206B 
 458      65792074 
 459              		.section	.text.disp_about,"ax",%progbits
 460              		.align	1
 461              		.p2align 2,,3
 462              		.global	disp_about
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv4-sp-d16
 468              	disp_about:
 469              	.LFB5:
  73:src/menu.c    ****   lcd_clear_buf();
 470              		.loc 1 73 19 is_stmt 1 view -0
ARM GAS  /tmp/cczIC8Cx.s 			page 21


 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
  74:src/menu.c    ****   lcd_writeClr(t24);
 474              		.loc 1 74 3 view .LVU135
  73:src/menu.c    ****   lcd_clear_buf();
 475              		.loc 1 73 19 is_stmt 0 view .LVU136
 476 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 477              		.cfi_def_cfa_offset 24
 478              		.cfi_offset 4, -24
 479              		.cfi_offset 5, -20
 480              		.cfi_offset 6, -16
 481              		.cfi_offset 7, -12
 482              		.cfi_offset 8, -8
 483              		.cfi_offset 14, -4
  75:src/menu.c    **** 
 484              		.loc 1 75 3 view .LVU137
 485 0004 1E4C     		ldr	r4, .L45
  74:src/menu.c    ****   lcd_writeClr(t24);
 486              		.loc 1 74 3 view .LVU138
 487 0006 1F4B     		ldr	r3, .L45+4
  78:src/menu.c    ****   t24->y += 5;
 488              		.loc 1 78 3 view .LVU139
 489 0008 1F4D     		ldr	r5, .L45+8
  74:src/menu.c    ****   lcd_writeClr(t24);
 490              		.loc 1 74 3 view .LVU140
 491 000a 9847     		blx	r3
 492              	.LVL38:
  75:src/menu.c    **** 
 493              		.loc 1 75 3 is_stmt 1 view .LVU141
 494 000c 606B     		ldr	r0, [r4, #52]
 495 000e 1F4B     		ldr	r3, .L45+12
 496 0010 9847     		blx	r3
 497              	.LVL39:
  77:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
 498              		.loc 1 77 3 view .LVU142
 499 0012 0522     		movs	r2, #5
 500 0014 606B     		ldr	r0, [r4, #52]
 501 0016 1E4B     		ldr	r3, .L45+16
 502 0018 0021     		movs	r1, #0
 503 001a 9847     		blx	r3
 504              	.LVL40:
  78:src/menu.c    ****   t24->y += 5;
 505              		.loc 1 78 3 view .LVU143
  78:src/menu.c    ****   t24->y += 5;
 506              		.loc 1 78 3 view .LVU144
 507 001c 606B     		ldr	r0, [r4, #52]
 508 001e 1D49     		ldr	r1, .L45+20
 509 0020 0126     		movs	r6, #1
 510 0022 4674     		strb	r6, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 511              		.loc 1 78 3 view .LVU145
 512 0024 A847     		blx	r5
 513              	.LVL41:
  78:src/menu.c    ****   t24->y += 5;
 514              		.loc 1 78 3 view .LVU146
 515 0026 606B     		ldr	r0, [r4, #52]
ARM GAS  /tmp/cczIC8Cx.s 			page 22


  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 516              		.loc 1 81 3 is_stmt 0 view .LVU147
 517 0028 1B49     		ldr	r1, .L45+24
  79:src/menu.c    **** #ifdef TOP_ROW
 518              		.loc 1 79 10 view .LVU148
 519 002a C388     		ldrh	r3, [r0, #6]
  78:src/menu.c    ****   t24->y += 5;
 520              		.loc 1 78 3 view .LVU149
 521 002c 0027     		movs	r7, #0
  79:src/menu.c    **** #ifdef TOP_ROW
 522              		.loc 1 79 10 view .LVU150
 523 002e 0533     		adds	r3, r3, #5
 524 0030 C380     		strh	r3, [r0, #6]	@ movhi
  78:src/menu.c    ****   t24->y += 5;
 525              		.loc 1 78 3 view .LVU151
 526 0032 4774     		strb	r7, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 527              		.loc 1 78 3 is_stmt 1 view .LVU152
  79:src/menu.c    **** #ifdef TOP_ROW
 528              		.loc 1 79 3 view .LVU153
  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 529              		.loc 1 81 3 view .LVU154
 530 0034 A847     		blx	r5
 531              	.LVL42:
  82:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 532              		.loc 1 82 3 view .LVU155
 533 0036 606B     		ldr	r0, [r4, #52]
 534 0038 1849     		ldr	r1, .L45+28
 535 003a A847     		blx	r5
 536              	.LVL43:
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 537              		.loc 1 91 3 view .LVU156
 538 003c 606B     		ldr	r0, [r4, #52]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 539              		.loc 1 92 3 is_stmt 0 view .LVU157
 540 003e 1849     		ldr	r1, .L45+32
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 541              		.loc 1 91 10 view .LVU158
 542 0040 C388     		ldrh	r3, [r0, #6]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 543              		.loc 1 92 3 view .LVU159
 544 0042 4674     		strb	r6, [r0, #17]
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 545              		.loc 1 91 10 view .LVU160
 546 0044 0533     		adds	r3, r3, #5
 547 0046 C380     		strh	r3, [r0, #6]	@ movhi
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 548              		.loc 1 92 3 is_stmt 1 view .LVU161
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 549              		.loc 1 92 3 view .LVU162
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 550              		.loc 1 92 3 view .LVU163
 551 0048 A847     		blx	r5
 552              	.LVL44:
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 553              		.loc 1 92 3 view .LVU164
 554 004a 606B     		ldr	r0, [r4, #52]
ARM GAS  /tmp/cczIC8Cx.s 			page 23


  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 555              		.loc 1 92 3 view .LVU165
  93:src/menu.c    **** 
 556              		.loc 1 93 3 view .LVU166
  93:src/menu.c    **** 
 557              		.loc 1 93 3 view .LVU167
 558 004c 1549     		ldr	r1, .L45+36
 559 004e 4674     		strb	r6, [r0, #17]
  93:src/menu.c    **** 
 560              		.loc 1 93 3 view .LVU168
 561 0050 A847     		blx	r5
 562              	.LVL45:
  93:src/menu.c    **** 
 563              		.loc 1 93 3 view .LVU169
 564 0052 606B     		ldr	r0, [r4, #52]
  95:src/menu.c    ****   t24->x = 20;
 565              		.loc 1 95 20 is_stmt 0 view .LVU170
 566 0054 144B     		ldr	r3, .L45+40
  93:src/menu.c    **** 
 567              		.loc 1 93 3 view .LVU171
 568 0056 4774     		strb	r7, [r0, #17]
  93:src/menu.c    **** 
 569              		.loc 1 93 3 is_stmt 1 view .LVU172
  95:src/menu.c    ****   t24->x = 20;
 570              		.loc 1 95 3 view .LVU173
  95:src/menu.c    ****   t24->x = 20;
 571              		.loc 1 95 20 is_stmt 0 view .LVU174
 572 0058 9847     		blx	r3
 573              	.LVL46:
  95:src/menu.c    ****   t24->x = 20;
 574              		.loc 1 95 3 view .LVU175
 575 005a 636B     		ldr	r3, [r4, #52]
  97:src/menu.c    **** 
 576              		.loc 1 97 3 view .LVU176
 577 005c 1349     		ldr	r1, .L45+44
 578 005e 5E74     		strb	r6, [r3, #17]
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 579              		.loc 1 96 10 view .LVU177
 580 0060 1422     		movs	r2, #20
  95:src/menu.c    ****   t24->x = 20;
 581              		.loc 1 95 39 view .LVU178
 582 0062 C0F1EB00 		rsb	r0, r0, #235
  95:src/menu.c    ****   t24->x = 20;
 583              		.loc 1 95 10 view .LVU179
 584 0066 D880     		strh	r0, [r3, #6]	@ movhi
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 585              		.loc 1 96 3 is_stmt 1 view .LVU180
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 586              		.loc 1 96 10 is_stmt 0 view .LVU181
 587 0068 9A80     		strh	r2, [r3, #4]	@ movhi
  97:src/menu.c    **** 
 588              		.loc 1 97 3 is_stmt 1 view .LVU182
  97:src/menu.c    **** 
 589              		.loc 1 97 3 view .LVU183
  97:src/menu.c    **** 
 590              		.loc 1 97 3 view .LVU184
 591 006a 1846     		mov	r0, r3
ARM GAS  /tmp/cczIC8Cx.s 			page 24


 592 006c A847     		blx	r5
 593              	.LVL47:
  97:src/menu.c    **** 
 594              		.loc 1 97 3 view .LVU185
 595 006e 626B     		ldr	r2, [r4, #52]
  99:src/menu.c    **** 
 596              		.loc 1 99 3 is_stmt 0 view .LVU186
 597 0070 0F4B     		ldr	r3, .L45+48
  97:src/menu.c    **** 
 598              		.loc 1 97 3 view .LVU187
 599 0072 5774     		strb	r7, [r2, #17]
  97:src/menu.c    **** 
 600              		.loc 1 97 3 is_stmt 1 view .LVU188
  99:src/menu.c    **** 
 601              		.loc 1 99 3 view .LVU189
 602 0074 9847     		blx	r3
 603              	.LVL48:
 101:src/menu.c    **** }
 604              		.loc 1 101 3 view .LVU190
 102:src/menu.c    **** 
 605              		.loc 1 102 1 is_stmt 0 view .LVU191
 606 0076 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 607              		.cfi_restore 14
 608              		.cfi_restore 8
 609              		.cfi_restore 7
 610              		.cfi_restore 6
 611              		.cfi_restore 5
 612              		.cfi_restore 4
 613              		.cfi_def_cfa_offset 0
 101:src/menu.c    **** }
 614              		.loc 1 101 3 view .LVU192
 615 007a 0E4B     		ldr	r3, .L45+52
 616 007c 1847     		bx	r3	@ indirect register sibling call
 617              	.LVL49:
 618              	.L46:
 619 007e 00BF     		.align	2
 620              	.L45:
 621 0080 00200010 		.word	268443648
 622 0084 2D020008 		.word	134218285
 623 0088 B1020008 		.word	134218417
 624 008c 65020008 		.word	134218341
 625 0090 6D020008 		.word	134218349
 626 0094 00000000 		.word	.LC4
 627 0098 1C000000 		.word	.LC5
 628 009c 30000000 		.word	.LC6
 629 00a0 50000000 		.word	.LC7
 630 00a4 74000000 		.word	.LC8
 631 00a8 71020008 		.word	134218353
 632 00ac 98000000 		.word	.LC9
 633 00b0 31020008 		.word	134218289
 634 00b4 99030008 		.word	134218649
 635              		.cfi_endproc
 636              	.LFE5:
 638              		.section	.text.run_menu_item,"ax",%progbits
 639              		.align	1
 640              		.p2align 2,,3
 641              		.global	run_menu_item
ARM GAS  /tmp/cczIC8Cx.s 			page 25


 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	run_menu_item:
 648              	.LVL50:
 649              	.LFB3:
  42:src/menu.c    ****   int ret = 0;
 650              		.loc 1 42 36 is_stmt 1 view -0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
  43:src/menu.c    **** 
 654              		.loc 1 43 3 view .LVU194
  45:src/menu.c    ****     case MI_ABOUT_PGM:
 655              		.loc 1 45 3 view .LVU195
 656 0000 0B28     		cmp	r0, #11
 657 0002 04D1     		bne	.L49
  47:src/menu.c    ****       break;
 658              		.loc 1 47 7 view .LVU196
  42:src/menu.c    ****   int ret = 0;
 659              		.loc 1 42 36 is_stmt 0 view .LVU197
 660 0004 08B5     		push	{r3, lr}
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 3, -8
 663              		.cfi_offset 14, -4
  47:src/menu.c    ****       break;
 664              		.loc 1 47 7 view .LVU198
 665 0006 FFF7FEFF 		bl	disp_about
 666              	.LVL51:
  48:src/menu.c    **** 
 667              		.loc 1 48 7 is_stmt 1 view .LVU199
  43:src/menu.c    **** 
 668              		.loc 1 43 7 is_stmt 0 view .LVU200
 669 000a 0020     		movs	r0, #0
  56:src/menu.c    **** 
 670              		.loc 1 56 1 view .LVU201
 671 000c 08BD     		pop	{r3, pc}
 672              	.LVL52:
 673              	.L49:
 674              		.cfi_def_cfa_offset 0
 675              		.cfi_restore 3
 676              		.cfi_restore 14
  51:src/menu.c    ****       break;
 677              		.loc 1 51 11 view .LVU202
 678 000e 4FF0FF30 		mov	r0, #-1
 679              	.LVL53:
  55:src/menu.c    **** }
 680              		.loc 1 55 3 is_stmt 1 view .LVU203
  56:src/menu.c    **** 
 681              		.loc 1 56 1 is_stmt 0 view .LVU204
 682 0012 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE3:
 686              		.section	.text.set_menu,"ax",%progbits
 687              		.align	1
 688              		.p2align 2,,3
ARM GAS  /tmp/cczIC8Cx.s 			page 26


 689              		.global	set_menu
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu fpv4-sp-d16
 695              	set_menu:
 696              	.LVL54:
 697              	.LFB6:
 108:src/menu.c    ****   menu_name m = current_menu;
 698              		.loc 1 108 38 is_stmt 1 view -0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 703              		.loc 1 109 3 view .LVU206
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 704              		.loc 1 109 13 is_stmt 0 view .LVU207
 705 0000 0A4A     		ldr	r2, .L66
 706 0002 92F90030 		ldrsb	r3, [r2]
 707              	.LVL55:
 110:src/menu.c    ****     current_menu = default_menu;
 708              		.loc 1 110 3 is_stmt 1 view .LVU208
 110:src/menu.c    ****     current_menu = default_menu;
 709              		.loc 1 110 6 is_stmt 0 view .LVU209
 710 0006 8342     		cmp	r3, r0
 711 0008 0CD0     		beq	.L65
 113:src/menu.c    ****     current_menu = last_menu;
 712              		.loc 1 113 8 is_stmt 1 view .LVU210
 113:src/menu.c    ****     current_menu = last_menu;
 713              		.loc 1 113 11 is_stmt 0 view .LVU211
 714 000a 411C     		adds	r1, r0, #1
 114:src/menu.c    ****   }
 715              		.loc 1 114 5 is_stmt 1 view .LVU212
 114:src/menu.c    ****   }
 716              		.loc 1 114 18 is_stmt 0 view .LVU213
 717 000c 09BF     		itett	eq
 718 000e 0849     		ldreq	r1, .L66+4
 117:src/menu.c    ****   }
 719              		.loc 1 117 18 view .LVU214
 720 0010 1070     		strbne	r0, [r2]
 114:src/menu.c    ****   }
 721              		.loc 1 114 18 view .LVU215
 722 0012 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 723 0014 1170     		strbeq	r1, [r2]
 117:src/menu.c    ****   }
 724              		.loc 1 117 5 is_stmt 1 view .LVU216
 725              	.L56:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 726              		.loc 1 119 3 view .LVU217
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 727              		.loc 1 119 6 is_stmt 0 view .LVU218
 728 0016 092B     		cmp	r3, #9
 729 0018 03D0     		beq	.L54
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 730              		.loc 1 119 23 discriminator 1 view .LVU219
 731 001a 102B     		cmp	r3, #16
ARM GAS  /tmp/cczIC8Cx.s 			page 27


 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 732              		.loc 1 119 43 is_stmt 1 discriminator 1 view .LVU220
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 733              		.loc 1 119 53 is_stmt 0 discriminator 1 view .LVU221
 734 001c 1CBF     		itt	ne
 735 001e 044A     		ldrne	r2, .L66+4
 736 0020 1370     		strbne	r3, [r2]
 737              	.L54:
 121:src/menu.c    **** 
 738              		.loc 1 121 1 view .LVU222
 739 0022 7047     		bx	lr
 740              	.L65:
 111:src/menu.c    ****   }
 741              		.loc 1 111 5 is_stmt 1 view .LVU223
 111:src/menu.c    ****   }
 742              		.loc 1 111 18 is_stmt 0 view .LVU224
 743 0024 0349     		ldr	r1, .L66+8
 744 0026 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 745 0028 1170     		strb	r1, [r2]
 746 002a F4E7     		b	.L56
 747              	.L67:
 748              		.align	2
 749              	.L66:
 750 002c 00000000 		.word	.LANCHOR1
 751 0030 00000000 		.word	.LANCHOR3
 752 0034 00000000 		.word	.LANCHOR2
 753              		.cfi_endproc
 754              	.LFE6:
 756              		.section	.text.set_default_menu,"ax",%progbits
 757              		.align	1
 758              		.p2align 2,,3
 759              		.global	set_default_menu
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 763              		.fpu fpv4-sp-d16
 765              	set_default_menu:
 766              	.LFB7:
 123:src/menu.c    ****   set_menu (default_menu);
 767              		.loc 1 123 26 is_stmt 1 view -0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 124:src/menu.c    **** }
 772              		.loc 1 124 3 view .LVU226
 773 0000 0A4B     		ldr	r3, .L80
 774              	.LBB61:
 775              	.LBB62:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 776              		.loc 1 109 13 is_stmt 0 view .LVU227
 777 0002 0B49     		ldr	r1, .L80+4
 778              	.LBE62:
 779              	.LBE61:
 124:src/menu.c    **** }
 780              		.loc 1 124 3 view .LVU228
 781 0004 93F90020 		ldrsb	r2, [r3]
ARM GAS  /tmp/cczIC8Cx.s 			page 28


 782              	.LVL56:
 783              	.LBB65:
 784              	.LBI61:
 108:src/menu.c    ****   menu_name m = current_menu;
 785              		.loc 1 108 6 is_stmt 1 view .LVU229
 786              	.LBB63:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 787              		.loc 1 109 3 view .LVU230
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 788              		.loc 1 109 13 is_stmt 0 view .LVU231
 789 0008 91F90030 		ldrsb	r3, [r1]
 790              	.LVL57:
 110:src/menu.c    ****     current_menu = default_menu;
 791              		.loc 1 110 3 is_stmt 1 view .LVU232
 110:src/menu.c    ****     current_menu = default_menu;
 792              		.loc 1 110 6 is_stmt 0 view .LVU233
 793 000c 9A42     		cmp	r2, r3
 794 000e 0BD0     		beq	.L79
 113:src/menu.c    ****     current_menu = last_menu;
 795              		.loc 1 113 8 is_stmt 1 view .LVU234
 113:src/menu.c    ****     current_menu = last_menu;
 796              		.loc 1 113 11 is_stmt 0 view .LVU235
 797 0010 501C     		adds	r0, r2, #1
 114:src/menu.c    ****   }
 798              		.loc 1 114 5 is_stmt 1 view .LVU236
 114:src/menu.c    ****   }
 799              		.loc 1 114 18 is_stmt 0 view .LVU237
 800 0012 04BF     		itt	eq
 801 0014 074A     		ldreq	r2, .L80+8
 802              	.LVL58:
 114:src/menu.c    ****   }
 803              		.loc 1 114 18 view .LVU238
 804 0016 1278     		ldrbeq	r2, [r2]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 805              		.loc 1 117 5 is_stmt 1 view .LVU239
 117:src/menu.c    ****   }
 806              		.loc 1 117 18 is_stmt 0 view .LVU240
 807 0018 0A70     		strb	r2, [r1]
 808              	.LVL59:
 809              	.L70:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 810              		.loc 1 119 3 is_stmt 1 view .LVU241
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 811              		.loc 1 119 6 is_stmt 0 view .LVU242
 812 001a 092B     		cmp	r3, #9
 813 001c 03D0     		beq	.L68
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 814              		.loc 1 119 23 view .LVU243
 815 001e 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 816              		.loc 1 119 43 is_stmt 1 view .LVU244
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 817              		.loc 1 119 53 is_stmt 0 view .LVU245
 818 0020 1CBF     		itt	ne
 819 0022 044A     		ldrne	r2, .L80+8
 820 0024 1370     		strbne	r3, [r2]
 821              	.LVL60:
ARM GAS  /tmp/cczIC8Cx.s 			page 29


 822              	.L68:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 823              		.loc 1 119 53 view .LVU246
 824              	.LBE63:
 825              	.LBE65:
 125:src/menu.c    **** 
 826              		.loc 1 125 1 view .LVU247
 827 0026 7047     		bx	lr
 828              	.LVL61:
 829              	.L79:
 830              	.LBB66:
 831              	.LBB64:
 111:src/menu.c    ****   }
 832              		.loc 1 111 5 is_stmt 1 view .LVU248
 111:src/menu.c    ****   }
 833              		.loc 1 111 18 is_stmt 0 view .LVU249
 834 0028 0B70     		strb	r3, [r1]
 835 002a F6E7     		b	.L70
 836              	.L81:
 837              		.align	2
 838              	.L80:
 839 002c 00000000 		.word	.LANCHOR2
 840 0030 00000000 		.word	.LANCHOR1
 841 0034 00000000 		.word	.LANCHOR3
 842              	.LBE64:
 843              	.LBE66:
 844              		.cfi_endproc
 845              	.LFE7:
 847              		.section	.text.toggle_default_menu,"ax",%progbits
 848              		.align	1
 849              		.p2align 2,,3
 850              		.global	toggle_default_menu
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 854              		.fpu fpv4-sp-d16
 856              	toggle_default_menu:
 857              	.LFB8:
 127:src/menu.c    ****   if (current_menu == M_Blank) {
 858              		.loc 1 127 29 is_stmt 1 view -0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 0
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862              		@ link register save eliminated.
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 863              		.loc 1 128 3 view .LVU251
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 864              		.loc 1 128 20 is_stmt 0 view .LVU252
 865 0000 104A     		ldr	r2, .L98
 129:src/menu.c    ****     return;
 866              		.loc 1 129 33 view .LVU253
 867 0002 1149     		ldr	r1, .L98+4
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 868              		.loc 1 128 20 view .LVU254
 869 0004 92F90030 		ldrsb	r3, [r2]
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 870              		.loc 1 128 6 view .LVU255
ARM GAS  /tmp/cczIC8Cx.s 			page 30


 871 0008 ABB1     		cbz	r3, .L95
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 872              		.loc 1 132 8 is_stmt 1 view .LVU256
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 873              		.loc 1 132 11 is_stmt 0 view .LVU257
 874 000a 0F2B     		cmp	r3, #15
 875 000c 0FD0     		beq	.L96
 136:src/menu.c    ****   }
 876              		.loc 1 136 5 is_stmt 1 view .LVU258
 877              	.LBB67:
 878              	.LBI67:
 123:src/menu.c    ****   set_menu (default_menu);
 879              		.loc 1 123 6 view .LVU259
 880              	.LBB68:
 124:src/menu.c    **** }
 881              		.loc 1 124 3 view .LVU260
 882 000e 91F90010 		ldrsb	r1, [r1]
 883              	.LVL62:
 884              	.LBB69:
 885              	.LBI69:
 108:src/menu.c    ****   menu_name m = current_menu;
 886              		.loc 1 108 6 view .LVU261
 887              	.LBB70:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 888              		.loc 1 109 3 view .LVU262
 110:src/menu.c    ****     current_menu = default_menu;
 889              		.loc 1 110 3 view .LVU263
 110:src/menu.c    ****     current_menu = default_menu;
 890              		.loc 1 110 6 is_stmt 0 view .LVU264
 891 0012 8B42     		cmp	r3, r1
 892 0014 13D0     		beq	.L97
 113:src/menu.c    ****     current_menu = last_menu;
 893              		.loc 1 113 8 is_stmt 1 view .LVU265
 113:src/menu.c    ****     current_menu = last_menu;
 894              		.loc 1 113 11 is_stmt 0 view .LVU266
 895 0016 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 896              		.loc 1 114 5 is_stmt 1 view .LVU267
 114:src/menu.c    ****   }
 897              		.loc 1 114 18 is_stmt 0 view .LVU268
 898 0018 04BF     		itt	eq
 899 001a 0C49     		ldreq	r1, .L98+8
 900              	.LVL63:
 114:src/menu.c    ****   }
 901              		.loc 1 114 18 view .LVU269
 902 001c 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 903              		.loc 1 117 5 is_stmt 1 view .LVU270
 117:src/menu.c    ****   }
 904              		.loc 1 117 18 is_stmt 0 view .LVU271
 905 001e 1170     		strb	r1, [r2]
 906              	.LVL64:
 907              	.L87:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 908              		.loc 1 119 3 is_stmt 1 view .LVU272
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 909              		.loc 1 119 6 is_stmt 0 view .LVU273
ARM GAS  /tmp/cczIC8Cx.s 			page 31


 910 0020 092B     		cmp	r3, #9
 911 0022 03D0     		beq	.L82
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 912              		.loc 1 119 23 view .LVU274
 913 0024 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 914              		.loc 1 119 43 is_stmt 1 view .LVU275
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 915              		.loc 1 119 53 is_stmt 0 view .LVU276
 916 0026 1CBF     		itt	ne
 917 0028 084A     		ldrne	r2, .L98+8
 918 002a 1370     		strbne	r3, [r2]
 919              	.LVL65:
 920              	.L82:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 921              		.loc 1 119 53 view .LVU277
 922              	.LBE70:
 923              	.LBE69:
 924              	.LBE68:
 925              	.LBE67:
 138:src/menu.c    **** 
 926              		.loc 1 138 1 view .LVU278
 927 002c 7047     		bx	lr
 928              	.L96:
 133:src/menu.c    ****   }
 929              		.loc 1 133 5 is_stmt 1 view .LVU279
 133:src/menu.c    ****   }
 930              		.loc 1 133 33 is_stmt 0 view .LVU280
 931 002e 0023     		movs	r3, #0
 932 0030 0B70     		strb	r3, [r1]
 133:src/menu.c    ****   }
 933              		.loc 1 133 18 view .LVU281
 934 0032 1370     		strb	r3, [r2]
 935 0034 7047     		bx	lr
 936              	.L95:
 129:src/menu.c    ****     return;
 937              		.loc 1 129 5 is_stmt 1 view .LVU282
 129:src/menu.c    ****     return;
 938              		.loc 1 129 33 is_stmt 0 view .LVU283
 939 0036 0F23     		movs	r3, #15
 940 0038 0B70     		strb	r3, [r1]
 129:src/menu.c    ****     return;
 941              		.loc 1 129 18 view .LVU284
 942 003a 1370     		strb	r3, [r2]
 130:src/menu.c    ****   }
 943              		.loc 1 130 5 is_stmt 1 view .LVU285
 944 003c 7047     		bx	lr
 945              	.LVL66:
 946              	.L97:
 947              	.LBB74:
 948              	.LBB73:
 949              	.LBB72:
 950              	.LBB71:
 111:src/menu.c    ****   }
 951              		.loc 1 111 5 view .LVU286
 111:src/menu.c    ****   }
 952              		.loc 1 111 18 is_stmt 0 view .LVU287
ARM GAS  /tmp/cczIC8Cx.s 			page 32


 953 003e 1370     		strb	r3, [r2]
 954 0040 EEE7     		b	.L87
 955              	.L99:
 956 0042 00BF     		.align	2
 957              	.L98:
 958 0044 00000000 		.word	.LANCHOR1
 959 0048 00000000 		.word	.LANCHOR2
 960 004c 00000000 		.word	.LANCHOR3
 961              	.LBE71:
 962              	.LBE72:
 963              	.LBE73:
 964              	.LBE74:
 965              		.cfi_endproc
 966              	.LFE8:
 968              		.section	.text.get_menu,"ax",%progbits
 969              		.align	1
 970              		.p2align 2,,3
 971              		.global	get_menu
 972              		.syntax unified
 973              		.thumb
 974              		.thumb_func
 975              		.fpu fpv4-sp-d16
 977              	get_menu:
 978              	.LFB9:
 140:src/menu.c    ****   return current_menu;
 979              		.loc 1 140 23 is_stmt 1 view -0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 0
 982              		@ frame_needed = 0, uses_anonymous_args = 0
 983              		@ link register save eliminated.
 141:src/menu.c    **** }
 984              		.loc 1 141 3 view .LVU289
 141:src/menu.c    **** }
 985              		.loc 1 141 10 is_stmt 0 view .LVU290
 986 0000 014B     		ldr	r3, .L101
 142:src/menu.c    **** 
 987              		.loc 1 142 1 view .LVU291
 988 0002 93F90000 		ldrsb	r0, [r3]
 989 0006 7047     		bx	lr
 990              	.L102:
 991              		.align	2
 992              	.L101:
 993 0008 00000000 		.word	.LANCHOR1
 994              		.cfi_endproc
 995              	.LFE9:
 997              		.section	.text.get_last_menu,"ax",%progbits
 998              		.align	1
 999              		.p2align 2,,3
 1000              		.global	get_last_menu
 1001              		.syntax unified
 1002              		.thumb
 1003              		.thumb_func
 1004              		.fpu fpv4-sp-d16
 1006              	get_last_menu:
 1007              	.LFB10:
 144:src/menu.c    ****   return last_menu;
 1008              		.loc 1 144 28 is_stmt 1 view -0
ARM GAS  /tmp/cczIC8Cx.s 			page 33


 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 0
 1011              		@ frame_needed = 0, uses_anonymous_args = 0
 1012              		@ link register save eliminated.
 145:src/menu.c    **** }
 1013              		.loc 1 145 3 view .LVU293
 145:src/menu.c    **** }
 1014              		.loc 1 145 10 is_stmt 0 view .LVU294
 1015 0000 014B     		ldr	r3, .L104
 146:src/menu.c    **** 
 1016              		.loc 1 146 1 view .LVU295
 1017 0002 93F90000 		ldrsb	r0, [r3]
 1018 0006 7047     		bx	lr
 1019              	.L105:
 1020              		.align	2
 1021              	.L104:
 1022 0008 00000000 		.word	.LANCHOR3
 1023              		.cfi_endproc
 1024              	.LFE10:
 1026              		.section	.text.set_last_menu,"ax",%progbits
 1027              		.align	1
 1028              		.p2align 2,,3
 1029              		.global	set_last_menu
 1030              		.syntax unified
 1031              		.thumb
 1032              		.thumb_func
 1033              		.fpu fpv4-sp-d16
 1035              	set_last_menu:
 1036              	.LFB12:
 152:src/menu.c    ****   set_menu (M_Last);
 1037              		.loc 1 152 23 is_stmt 1 view -0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 0
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041              		@ link register save eliminated.
 153:src/menu.c    **** }
 1042              		.loc 1 153 3 view .LVU297
 1043              	.LVL67:
 1044              	.LBB75:
 1045              	.LBI75:
 108:src/menu.c    ****   menu_name m = current_menu;
 1046              		.loc 1 108 6 view .LVU298
 1047              	.LBB76:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1048              		.loc 1 109 3 view .LVU299
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1049              		.loc 1 109 13 is_stmt 0 view .LVU300
 1050 0000 0A4A     		ldr	r2, .L119
 1051 0002 92F90030 		ldrsb	r3, [r2]
 1052              	.LVL68:
 110:src/menu.c    ****     current_menu = default_menu;
 1053              		.loc 1 110 3 is_stmt 1 view .LVU301
 110:src/menu.c    ****     current_menu = default_menu;
 1054              		.loc 1 110 6 is_stmt 0 view .LVU302
 1055 0006 591C     		adds	r1, r3, #1
 1056 0008 09D0     		beq	.L116
 113:src/menu.c    ****     current_menu = last_menu;
ARM GAS  /tmp/cczIC8Cx.s 			page 34


 1057              		.loc 1 113 8 is_stmt 1 view .LVU303
 114:src/menu.c    ****   }
 1058              		.loc 1 114 5 view .LVU304
 114:src/menu.c    ****   }
 1059              		.loc 1 114 18 is_stmt 0 view .LVU305
 1060 000a 0949     		ldr	r1, .L119+4
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1061              		.loc 1 119 6 view .LVU306
 1062 000c 092B     		cmp	r3, #9
 114:src/menu.c    ****   }
 1063              		.loc 1 114 18 view .LVU307
 1064 000e 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1065 0010 1070     		strb	r0, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1066              		.loc 1 119 3 is_stmt 1 view .LVU308
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1067              		.loc 1 119 6 is_stmt 0 view .LVU309
 1068 0012 00D1     		bne	.L117
 1069              	.L106:
 1070              	.LBE76:
 1071              	.LBE75:
 154:src/menu.c    **** 
 1072              		.loc 1 154 1 view .LVU310
 1073 0014 7047     		bx	lr
 1074              	.L117:
 1075              	.LBB79:
 1076              	.LBB77:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1077              		.loc 1 119 23 view .LVU311
 1078 0016 102B     		cmp	r3, #16
 1079 0018 FCD0     		beq	.L106
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1080              		.loc 1 119 43 is_stmt 1 view .LVU312
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1081              		.loc 1 119 53 is_stmt 0 view .LVU313
 1082 001a 0B70     		strb	r3, [r1]
 1083              	.LVL69:
 1084              	.L118:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1085              		.loc 1 119 53 view .LVU314
 1086              	.LBE77:
 1087              	.LBE79:
 154:src/menu.c    **** 
 1088              		.loc 1 154 1 view .LVU315
 1089 001c 7047     		bx	lr
 1090              	.LVL70:
 1091              	.L116:
 1092              	.LBB80:
 1093              	.LBB78:
 111:src/menu.c    ****   }
 1094              		.loc 1 111 5 is_stmt 1 view .LVU316
 111:src/menu.c    ****   }
 1095              		.loc 1 111 18 is_stmt 0 view .LVU317
 1096 001e 0548     		ldr	r0, .L119+8
 1097 0020 0349     		ldr	r1, .L119+4
 1098 0022 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1099 0024 1070     		strb	r0, [r2]
ARM GAS  /tmp/cczIC8Cx.s 			page 35


 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1100              		.loc 1 119 3 is_stmt 1 view .LVU318
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1101              		.loc 1 119 43 view .LVU319
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1102              		.loc 1 119 53 is_stmt 0 view .LVU320
 1103 0026 0B70     		strb	r3, [r1]
 1104              	.LVL71:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1105              		.loc 1 119 53 view .LVU321
 1106 0028 F8E7     		b	.L118
 1107              	.L120:
 1108 002a 00BF     		.align	2
 1109              	.L119:
 1110 002c 00000000 		.word	.LANCHOR1
 1111 0030 00000000 		.word	.LANCHOR3
 1112 0034 00000000 		.word	.LANCHOR2
 1113              	.LBE78:
 1114              	.LBE80:
 1115              		.cfi_endproc
 1116              	.LFE12:
 1118              		.section	.text.mdot,"ax",%progbits
 1119              		.align	1
 1120              		.p2align 2,,3
 1121              		.global	mdot
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu fpv4-sp-d16
 1127              	mdot:
 1128              	.LVL72:
 1129              	.LFB14:
 558:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1130              		.loc 1 558 40 is_stmt 1 view -0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 1134              		@ link register save eliminated.
 559:src/menu.c    ****   if (on) {
 1135              		.loc 1 559 3 view .LVU323
 559:src/menu.c    ****   if (on) {
 1136              		.loc 1 559 6 is_stmt 0 view .LVU324
 1137 0000 C728     		cmp	r0, #199
 1138 0002 1AD8     		bhi	.L125
 1139              	.LVL73:
 1140              	.LBB83:
 1141              	.LBI83:
 558:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1142              		.loc 1 558 6 is_stmt 1 view .LVU325
 1143              	.LBB84:
 560:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1144              		.loc 1 560 3 view .LVU326
 1145              	.LBE84:
 1146              	.LBE83:
 558:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1147              		.loc 1 558 40 is_stmt 0 view .LVU327
 1148 0004 10B4     		push	{r4}
ARM GAS  /tmp/cczIC8Cx.s 			page 36


 1149              		.cfi_def_cfa_offset 4
 1150              		.cfi_offset 4, -4
 1151              	.LBB87:
 1152              	.LBB85:
 560:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1153              		.loc 1 560 6 view .LVU328
 1154 0006 63B9     		cbnz	r3, .L128
 1155              		.loc 1 564 5 is_stmt 1 view .LVU329
 1156              		.loc 1 564 17 is_stmt 0 view .LVU330
 1157 0008 0C4B     		ldr	r3, .L129
 1158              	.LVL74:
 1159              		.loc 1 564 17 view .LVU331
 1160 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1161              	.LVL75:
 1162              		.loc 1 564 25 view .LVU332
 1163 000e 0124     		movs	r4, #1
 1164              		.loc 1 564 17 view .LVU333
 1165 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1166              		.loc 1 564 25 view .LVU334
 1167 0012 04FA01F1 		lsl	r1, r4, r1
 1168              	.LVL76:
 1169              		.loc 1 564 17 view .LVU335
 1170 0016 23EA0101 		bic	r1, r3, r1
 1171 001a 8154     		strb	r1, [r0, r2]
 1172              	.LVL77:
 1173              		.loc 1 564 17 view .LVU336
 1174              	.LBE85:
 1175              	.LBE87:
 565:src/menu.c    ****   }
 566:src/menu.c    **** }
 1176              		.loc 1 566 1 view .LVU337
 1177 001c 5DF8044B 		ldr	r4, [sp], #4
 1178              		.cfi_remember_state
 1179              		.cfi_restore 4
 1180              		.cfi_def_cfa_offset 0
 1181 0020 7047     		bx	lr
 1182              	.LVL78:
 1183              	.L128:
 1184              		.cfi_restore_state
 1185              	.LBB88:
 1186              	.LBB86:
 561:src/menu.c    ****   }
 1187              		.loc 1 561 5 is_stmt 1 view .LVU338
 561:src/menu.c    ****   }
 1188              		.loc 1 561 17 is_stmt 0 view .LVU339
 1189 0022 064B     		ldr	r3, .L129
 1190              	.LVL79:
 561:src/menu.c    ****   }
 1191              		.loc 1 561 17 view .LVU340
 1192 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1193              	.LVL80:
 561:src/menu.c    ****   }
 1194              		.loc 1 561 24 view .LVU341
 1195 0028 0124     		movs	r4, #1
 561:src/menu.c    ****   }
 1196              		.loc 1 561 17 view .LVU342
 1197 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
ARM GAS  /tmp/cczIC8Cx.s 			page 37


 561:src/menu.c    ****   }
 1198              		.loc 1 561 24 view .LVU343
 1199 002c 04FA01F1 		lsl	r1, r4, r1
 1200              	.LVL81:
 561:src/menu.c    ****   }
 1201              		.loc 1 561 17 view .LVU344
 1202 0030 1943     		orrs	r1, r1, r3
 1203 0032 8154     		strb	r1, [r0, r2]
 1204              	.LBE86:
 1205              	.LBE88:
 1206              		.loc 1 566 1 view .LVU345
 1207 0034 5DF8044B 		ldr	r4, [sp], #4
 1208              		.cfi_restore 4
 1209              		.cfi_def_cfa_offset 0
 1210 0038 7047     		bx	lr
 1211              	.LVL82:
 1212              	.L125:
 1213              		.loc 1 566 1 view .LVU346
 1214 003a 7047     		bx	lr
 1215              	.L130:
 1216              		.align	2
 1217              	.L129:
 1218 003c 00000000 		.word	.LANCHOR0
 1219              		.cfi_endproc
 1220              	.LFE14:
 1222              		.section	.text.get_current_menu_ref,"ax",%progbits
 1223              		.align	1
 1224              		.p2align 2,,3
 1225              		.global	get_current_menu_ref
 1226              		.syntax unified
 1227              		.thumb
 1228              		.thumb_func
 1229              		.fpu fpv4-sp-d16
 1231              	get_current_menu_ref:
 1232              	.LVL83:
 1233              	.LFB15:
 567:src/menu.c    **** 
 568:src/menu.c    **** struct _menu get_current_menu_ref() {
 1234              		.loc 1 568 37 is_stmt 1 view -0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 0
 1237              		@ frame_needed = 0, uses_anonymous_args = 0
 569:src/menu.c    ****   int i = current_menu;
 1238              		.loc 1 569 3 view .LVU348
 568:src/menu.c    ****   int i = current_menu;
 1239              		.loc 1 568 37 is_stmt 0 view .LVU349
 1240 0000 08B5     		push	{r3, lr}
 1241              		.cfi_def_cfa_offset 8
 1242              		.cfi_offset 3, -8
 1243              		.cfi_offset 14, -4
 570:src/menu.c    ****   if (C_LOCKED)
 1244              		.loc 1 570 7 view .LVU350
 1245 0002 294B     		ldr	r3, .L147
 569:src/menu.c    ****   int i = current_menu;
 1246              		.loc 1 569 7 view .LVU351
 1247 0004 294A     		ldr	r2, .L147+4
 1248              		.loc 1 570 7 view .LVU352
ARM GAS  /tmp/cczIC8Cx.s 			page 38


 1249 0006 1B68     		ldr	r3, [r3]
 569:src/menu.c    ****   int i = current_menu;
 1250              		.loc 1 569 7 view .LVU353
 1251 0008 92F90010 		ldrsb	r1, [r2]
 1252              	.LVL84:
 1253              		.loc 1 570 3 is_stmt 1 view .LVU354
 1254              		.loc 1 570 7 is_stmt 0 view .LVU355
 1255 000c 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 1256              		.loc 1 570 6 view .LVU356
 1257 0010 03F04102 		and	r2, r3, #65
 1258 0014 412A     		cmp	r2, #65
 568:src/menu.c    ****   int i = current_menu;
 1259              		.loc 1 568 37 view .LVU357
 1260 0016 0346     		mov	r3, r0
 1261              		.loc 1 570 6 view .LVU358
 1262 0018 0BD0     		beq	.L145
 1263              	.LVL85:
 1264              	.L132:
 571:src/menu.c    ****     switch (current_menu) {
 572:src/menu.c    ****     case (M_Clear):
 573:src/menu.c    ****       i = M_Clear_C;
 574:src/menu.c    ****       break;
 575:src/menu.c    ****     case (M_Swap):
 576:src/menu.c    ****       i = M_Swap_C;
 577:src/menu.c    ****       break;
 578:src/menu.c    ****     case (M_Arrow):
 579:src/menu.c    ****       i = M_Arrow_C;
 580:src/menu.c    ****       break;
 581:src/menu.c    ****     case (M_Prob):
 582:src/menu.c    ****       i = M_Prob_C;
 583:src/menu.c    ****       break;
 584:src/menu.c    ****     case (M_Blank2):
 585:src/menu.c    ****       i = M_Blank2_C;
 586:src/menu.c    ****       break;
 587:src/menu.c    ****     case (M_Misc):
 588:src/menu.c    ****       i = M_Misc_C;
 589:src/menu.c    ****       break;
 590:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 591:src/menu.c    ****     case (M_Flags):// so don't display them.
 592:src/menu.c    ****     case (M_Stats):
 593:src/menu.c    ****     case (M_Setup2):
 594:src/menu.c    ****     case (M_Solve):
 595:src/menu.c    ****     case (M_Program):
 596:src/menu.c    ****       i = M_C_Lock;
 597:src/menu.c    ****     default:;
 1265              		.loc 1 597 13 is_stmt 1 view .LVU359
 598:src/menu.c    ****     }
 599:src/menu.c    ****   if (current_menu == M_User) {
 1266              		.loc 1 599 3 view .LVU360
 1267              		.loc 1 599 6 is_stmt 0 view .LVU361
 1268 001a 6329     		cmp	r1, #99
 1269 001c 32D0     		beq	.L146
 1270              	.LVL86:
 1271              	.L137:
 600:src/menu.c    ****     return UserMenu;
 601:src/menu.c    ****   }
 602:src/menu.c    ****   else {
ARM GAS  /tmp/cczIC8Cx.s 			page 39


 603:src/menu.c    ****     return Menus[i];
 1272              		.loc 1 603 5 is_stmt 1 view .LVU362
 1273              		.loc 1 603 17 is_stmt 0 view .LVU363
 1274 001e 2448     		ldr	r0, .L147+8
 1275 0020 D022     		movs	r2, #208
 1276 0022 02FB0101 		mla	r1, r2, r1, r0
 1277              	.LVL87:
 1278              		.loc 1 603 17 view .LVU364
 1279 0026 1846     		mov	r0, r3
 1280 0028 FFF7FEFF 		bl	memcpy
 1281              	.LVL88:
 1282              		.loc 1 603 17 view .LVU365
 1283 002c 0346     		mov	r3, r0
 604:src/menu.c    ****   }
 605:src/menu.c    **** }
 1284              		.loc 1 605 1 view .LVU366
 1285 002e 1846     		mov	r0, r3
 1286 0030 08BD     		pop	{r3, pc}
 1287              	.LVL89:
 1288              	.L145:
 571:src/menu.c    ****     case (M_Clear):
 1289              		.loc 1 571 5 is_stmt 1 view .LVU367
 1290 0032 4A1E     		subs	r2, r1, #1
 1291 0034 0E2A     		cmp	r2, #14
 1292 0036 F0D8     		bhi	.L132
 1293 0038 01A0     		adr	r0, .L134
 1294 003a 50F822F0 		ldr	pc, [r0, r2, lsl #2]
 1295              	.LVL90:
 1296 003e 00BF     		.p2align 2
 1297              	.L134:
 1298 0040 A5000000 		.word	.L140+1
 1299 0044 1B000000 		.word	.L132+1
 1300 0048 A1000000 		.word	.L135+1
 1301 004c 1B000000 		.word	.L132+1
 1302 0050 9D000000 		.word	.L139+1
 1303 0054 81000000 		.word	.L138+1
 1304 0058 A1000000 		.word	.L135+1
 1305 005c 1B000000 		.word	.L132+1
 1306 0060 7D000000 		.word	.L143+1
 1307 0064 A1000000 		.word	.L135+1
 1308 0068 99000000 		.word	.L136+1
 1309 006c A1000000 		.word	.L135+1
 1310 0070 A1000000 		.word	.L135+1
 1311 0074 A1000000 		.word	.L135+1
 1312 0078 95000000 		.word	.L133+1
 1313              		.p2align 1
 1314              	.L143:
 579:src/menu.c    ****       break;
 1315              		.loc 1 579 9 is_stmt 0 view .LVU368
 1316 007c 1421     		movs	r1, #20
 1317              	.LVL91:
 579:src/menu.c    ****       break;
 1318              		.loc 1 579 9 view .LVU369
 1319 007e CEE7     		b	.L137
 1320              	.LVL92:
 1321              	.L138:
 570:src/menu.c    ****     switch (current_menu) {
ARM GAS  /tmp/cczIC8Cx.s 			page 40


 1322              		.loc 1 570 6 view .LVU370
 1323 0080 1321     		movs	r1, #19
 1324              	.LVL93:
 570:src/menu.c    ****     switch (current_menu) {
 1325              		.loc 1 570 6 view .LVU371
 1326 0082 CCE7     		b	.L137
 1327              	.LVL94:
 1328              	.L146:
 600:src/menu.c    ****   }
 1329              		.loc 1 600 5 is_stmt 1 view .LVU372
 600:src/menu.c    ****   }
 1330              		.loc 1 600 12 is_stmt 0 view .LVU373
 1331 0084 0B49     		ldr	r1, .L147+12
 1332              	.LVL95:
 600:src/menu.c    ****   }
 1333              		.loc 1 600 12 view .LVU374
 1334 0086 D022     		movs	r2, #208
 1335 0088 1846     		mov	r0, r3
 1336 008a FFF7FEFF 		bl	memcpy
 1337              	.LVL96:
 600:src/menu.c    ****   }
 1338              		.loc 1 600 12 view .LVU375
 1339 008e 0346     		mov	r3, r0
 1340              		.loc 1 605 1 view .LVU376
 1341 0090 1846     		mov	r0, r3
 1342 0092 08BD     		pop	{r3, pc}
 1343              	.LVL97:
 1344              	.L133:
 585:src/menu.c    ****       break;
 1345              		.loc 1 585 7 is_stmt 1 view .LVU377
 586:src/menu.c    ****     case (M_Misc):
 1346              		.loc 1 586 7 view .LVU378
 585:src/menu.c    ****       break;
 1347              		.loc 1 585 9 is_stmt 0 view .LVU379
 1348 0094 1621     		movs	r1, #22
 586:src/menu.c    ****     case (M_Misc):
 1349              		.loc 1 586 7 view .LVU380
 1350 0096 C2E7     		b	.L137
 1351              	.LVL98:
 1352              	.L136:
 582:src/menu.c    ****       break;
 1353              		.loc 1 582 7 is_stmt 1 view .LVU381
 583:src/menu.c    ****     case (M_Blank2):
 1354              		.loc 1 583 7 view .LVU382
 582:src/menu.c    ****       break;
 1355              		.loc 1 582 9 is_stmt 0 view .LVU383
 1356 0098 1521     		movs	r1, #21
 583:src/menu.c    ****     case (M_Blank2):
 1357              		.loc 1 583 7 view .LVU384
 1358 009a C0E7     		b	.L137
 1359              	.LVL99:
 1360              	.L139:
 588:src/menu.c    ****       break;
 1361              		.loc 1 588 7 is_stmt 1 view .LVU385
 589:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1362              		.loc 1 589 7 view .LVU386
 588:src/menu.c    ****       break;
ARM GAS  /tmp/cczIC8Cx.s 			page 41


 1363              		.loc 1 588 9 is_stmt 0 view .LVU387
 1364 009c 1721     		movs	r1, #23
 589:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1365              		.loc 1 589 7 view .LVU388
 1366 009e BEE7     		b	.L137
 1367              	.LVL100:
 1368              	.L135:
 596:src/menu.c    ****     default:;
 1369              		.loc 1 596 7 is_stmt 1 view .LVU389
 596:src/menu.c    ****     default:;
 1370              		.loc 1 596 9 is_stmt 0 view .LVU390
 1371 00a0 1121     		movs	r1, #17
 1372 00a2 BCE7     		b	.L137
 1373              	.LVL101:
 1374              	.L140:
 573:src/menu.c    ****       break;
 1375              		.loc 1 573 9 view .LVU391
 1376 00a4 1221     		movs	r1, #18
 1377              	.LVL102:
 573:src/menu.c    ****       break;
 1378              		.loc 1 573 9 view .LVU392
 1379 00a6 BAE7     		b	.L137
 1380              	.L148:
 1381              		.align	2
 1382              	.L147:
 1383 00a8 00000000 		.word	main_ram
 1384 00ac 00000000 		.word	.LANCHOR1
 1385 00b0 00000000 		.word	Menus
 1386 00b4 00000000 		.word	.LANCHOR4
 1387              		.cfi_endproc
 1388              	.LFE15:
 1390              		.section	.text.display_menu,"ax",%progbits
 1391              		.align	1
 1392              		.p2align 2,,3
 1393              		.global	display_menu
 1394              		.syntax unified
 1395              		.thumb
 1396              		.thumb_func
 1397              		.fpu fpv4-sp-d16
 1399              	display_menu:
 1400              	.LFB16:
 606:src/menu.c    **** 
 607:src/menu.c    **** void display_menu (struct _menu Ref) {
 1401              		.loc 1 607 38 is_stmt 1 view -0
 1402              		.cfi_startproc
 1403              		@ args = 208, pretend = 16, frame = 0
 1404              		@ frame_needed = 0, uses_anonymous_args = 0
 608:src/menu.c    ****   int len = 0;
 1405              		.loc 1 608 3 view .LVU394
 1406              	.LVL103:
 609:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1407              		.loc 1 609 3 view .LVU395
 607:src/menu.c    ****   int len = 0;
 1408              		.loc 1 607 38 is_stmt 0 view .LVU396
 1409 0000 84B0     		sub	sp, sp, #16
 1410              		.cfi_def_cfa_offset 16
 1411 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
ARM GAS  /tmp/cczIC8Cx.s 			page 42


 1412              		.cfi_def_cfa_offset 52
 1413              		.cfi_offset 4, -52
 1414              		.cfi_offset 5, -48
 1415              		.cfi_offset 6, -44
 1416              		.cfi_offset 7, -40
 1417              		.cfi_offset 8, -36
 1418              		.cfi_offset 9, -32
 1419              		.cfi_offset 10, -28
 1420              		.cfi_offset 11, -24
 1421              		.cfi_offset 14, -20
 1422 0006 83B0     		sub	sp, sp, #12
 1423              		.cfi_def_cfa_offset 64
 1424              		.loc 1 609 3 view .LVU397
 1425 0008 0024     		movs	r4, #0
 607:src/menu.c    ****   int len = 0;
 1426              		.loc 1 607 38 view .LVU398
 1427 000a 0CAD     		add	r5, sp, #48
 1428 000c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1429              		.loc 1 609 3 view .LVU399
 1430 0010 3E4E     		ldr	r6, .L167
 1431 0012 0094     		str	r4, [sp]
 1432 0014 2046     		mov	r0, r4
 1433 0016 3423     		movs	r3, #52
 1434 0018 4FF4C872 		mov	r2, #400
 1435 001c BC21     		movs	r1, #188
 1436 001e B047     		blx	r6
 1437              	.LVL104:
 610:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1438              		.loc 1 610 3 is_stmt 1 view .LVU400
 1439 0020 3B4D     		ldr	r5, .L167+4
 1440 0022 FF23     		movs	r3, #255
 1441 0024 0093     		str	r3, [sp]
 1442 0026 4FF4C872 		mov	r2, #400
 1443 002a 0123     		movs	r3, #1
 1444 002c BC21     		movs	r1, #188
 1445 002e 2046     		mov	r0, r4
 1446 0030 B047     		blx	r6
 1447              	.LVL105:
 611:src/menu.c    ****   //Clear previous menu
 612:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1448              		.loc 1 612 3 view .LVU401
 1449              	.LBB89:
 1450              		.loc 1 612 8 view .LVU402
 1451              		.loc 1 612 21 view .LVU403
 613:src/menu.c    ****     mdots[col][0] = 0;
 1452              		.loc 1 613 19 is_stmt 0 view .LVU404
 1453 0032 2246     		mov	r2, r4
 1454 0034 05F5C871 		add	r1, r5, #400
 1455              	.LBE89:
 610:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1456              		.loc 1 610 3 view .LVU405
 1457 0038 2B46     		mov	r3, r5
 1458              	.LVL106:
 1459              	.L150:
 1460              	.LBB90:
 1461              		.loc 1 613 5 is_stmt 1 discriminator 3 view .LVU406
 1462              		.loc 1 613 19 is_stmt 0 discriminator 3 view .LVU407
ARM GAS  /tmp/cczIC8Cx.s 			page 43


 1463 003a 1A70     		strb	r2, [r3]
 614:src/menu.c    ****     mdots[col][1] = 0;
 1464              		.loc 1 614 5 is_stmt 1 discriminator 3 view .LVU408
 1465              		.loc 1 614 19 is_stmt 0 discriminator 3 view .LVU409
 1466 003c 5A70     		strb	r2, [r3, #1]
 612:src/menu.c    ****     mdots[col][0] = 0;
 1467              		.loc 1 612 32 is_stmt 1 discriminator 3 view .LVU410
 612:src/menu.c    ****     mdots[col][0] = 0;
 1468              		.loc 1 612 21 discriminator 3 view .LVU411
 1469 003e 0233     		adds	r3, r3, #2
 612:src/menu.c    ****     mdots[col][0] = 0;
 1470              		.loc 1 612 3 is_stmt 0 discriminator 3 view .LVU412
 1471 0040 9942     		cmp	r1, r3
 1472 0042 FAD1     		bne	.L150
 1473 0044 14AE     		add	r6, sp, #80
 612:src/menu.c    ****     mdots[col][0] = 0;
 1474              		.loc 1 612 3 view .LVU413
 1475 0046 0024     		movs	r4, #0
 1476              	.LVL107:
 1477              	.L151:
 612:src/menu.c    ****     mdots[col][0] = 0;
 1478              		.loc 1 612 3 view .LVU414
 1479              	.LBE90:
 1480              	.LBB91:
 615:src/menu.c    ****   }
 616:src/menu.c    **** 
 617:src/menu.c    ****   // Draw menu items
 618:src/menu.c    ****   // 
 619:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 620:src/menu.c    ****     /*
 621:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 622:src/menu.c    ****     */
 623:src/menu.c    ****     // Label is Ref.keys[item].unshifted_label
 624:src/menu.c    ****     // Unshifted first
 625:src/menu.c    ****       len = pixel_length (Ref.keys[item].unshifted_label, 0); // 0 means not small font
 1481              		.loc 1 625 7 is_stmt 1 view .LVU415
 1482              		.loc 1 625 13 is_stmt 0 view .LVU416
 1483 0048 0021     		movs	r1, #0
 1484 004a 3046     		mov	r0, r6
 1485 004c FFF7FEFF 		bl	pixel_length
 1486              	.LVL108:
 626:src/menu.c    ****       set_menu_label ( Ref.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1487              		.loc 1 626 7 is_stmt 1 view .LVU417
 1488              		.loc 1 626 73 is_stmt 0 view .LVU418
 1489 0050 C0F12000 		rsb	r0, r0, #32
 1490              	.LVL109:
 1491              		.loc 1 626 79 view .LVU419
 1492 0054 00EBD070 		add	r0, r0, r0, lsr #31
 1493              		.loc 1 626 7 view .LVU420
 1494 0058 04EB6001 		add	r1, r4, r0, asr #1
 1495 005c 0022     		movs	r2, #0
 1496 005e 3046     		mov	r0, r6
 1497 0060 06F10807 		add	r7, r6, #8
 1498 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1499              	.LVL110:
 627:src/menu.c    ****       // Now shifted ...	
 628:src/menu.c    ****       len = pixel_length (Ref.keys[item].shifted_label, 0); // 0 means not small font
ARM GAS  /tmp/cczIC8Cx.s 			page 44


 1500              		.loc 1 628 7 is_stmt 1 view .LVU421
 1501              		.loc 1 628 13 is_stmt 0 view .LVU422
 1502 0068 0021     		movs	r1, #0
 1503 006a 3846     		mov	r0, r7
 1504 006c FFF7FEFF 		bl	pixel_length
 1505              	.LVL111:
 629:src/menu.c    ****       len = item*32 + (32-len)/2;
 1506              		.loc 1 629 7 is_stmt 1 view .LVU423
 1507              		.loc 1 629 26 is_stmt 0 view .LVU424
 1508 0070 C0F12000 		rsb	r0, r0, #32
 1509              	.LVL112:
 1510              		.loc 1 629 31 view .LVU425
 1511 0074 00EBD070 		add	r0, r0, r0, lsr #31
 1512              	.LVL113:
 630:src/menu.c    ****       if (len<0) len = 0;
 1513              		.loc 1 630 7 is_stmt 1 view .LVU426
 629:src/menu.c    ****       len = item*32 + (32-len)/2;
 1514              		.loc 1 629 11 is_stmt 0 view .LVU427
 1515 0078 04EB6001 		add	r1, r4, r0, asr #1
 1516              	.LVL114:
 629:src/menu.c    ****       len = item*32 + (32-len)/2;
 1517              		.loc 1 629 11 view .LVU428
 1518 007c C729     		cmp	r1, #199
 1519 007e A8BF     		it	ge
 1520 0080 C721     		movge	r1, #199
 1521              	.LVL115:
 631:src/menu.c    ****       if (len>199) len = 199;
 632:src/menu.c    ****       set_menu_label ( Ref.keys[item].shifted_label, 0, len, 1 );
 1522              		.loc 1 632 7 is_stmt 1 view .LVU429
 1523 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1524              	.LVL116:
 1525              		.loc 1 632 7 is_stmt 0 view .LVU430
 1526 0086 3846     		mov	r0, r7
 1527 0088 2034     		adds	r4, r4, #32
 1528 008a 0122     		movs	r2, #1
 1529 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1530              	.LVL117:
 619:src/menu.c    ****     /*
 1531              		.loc 1 619 32 is_stmt 1 view .LVU431
 619:src/menu.c    ****     /*
 1532              		.loc 1 619 22 view .LVU432
 619:src/menu.c    ****     /*
 1533              		.loc 1 619 3 is_stmt 0 view .LVU433
 1534 0090 C02C     		cmp	r4, #192
 1535 0092 06F12006 		add	r6, r6, #32
 1536 0096 D7D1     		bne	.L151
 1537 0098 1E4E     		ldr	r6, .L167+8
 1538              	.LBE91:
 1539              	.LBB92:
 1540              	.LBB93:
 633:src/menu.c    ****   }
 634:src/menu.c    **** 
 635:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 636:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 637:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 638:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 639:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
ARM GAS  /tmp/cczIC8Cx.s 			page 45


 1541              		.loc 1 639 2 view .LVU434
 1542 009a DFF87090 		ldr	r9, .L167
 1543 009e C5F1040A 		rsb	r10, r5, #4
 1544 00a2 06F5C47B 		add	fp, r6, #392
 1545              	.LBE93:
 1546              	.LBE92:
 1547              	.LBB95:
 619:src/menu.c    ****     /*
 1548              		.loc 1 619 3 view .LVU435
 1549 00a6 771E     		subs	r7, r6, #1
 1550              	.LBE95:
 1551              	.LBB96:
 1552              	.LBB94:
 1553              		.loc 1 639 2 view .LVU436
 1554 00a8 4FF0FF08 		mov	r8, #255
 1555              	.L152:
 1556              	.LVL118:
 636:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1557              		.loc 1 636 23 is_stmt 1 view .LVU437
 1558 00ac 0AEB0705 		add	r5, r10, r7
 636:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1559              		.loc 1 636 14 is_stmt 0 view .LVU438
 1560 00b0 0024     		movs	r4, #0
 1561              	.LVL119:
 1562              	.L155:
 637:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1563              		.loc 1 637 7 is_stmt 1 view .LVU439
 1564              		.loc 1 639 2 view .LVU440
 637:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1565              		.loc 1 637 22 is_stmt 0 view .LVU441
 1566 00b2 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 637:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1567              		.loc 1 637 40 view .LVU442
 1568 00b6 2241     		asrs	r2, r2, r4
 1569              		.loc 1 639 2 view .LVU443
 1570 00b8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1571 00bc 0323     		movs	r3, #3
 637:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1572              		.loc 1 637 10 view .LVU444
 1573 00be 12F0010F 		tst	r2, #1
 1574              		.loc 1 639 2 view .LVU445
 1575 00c2 01F1E901 		add	r1, r1, #233
 1576 00c6 1A46     		mov	r2, r3
 1577 00c8 2846     		mov	r0, r5
 637:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1578              		.loc 1 637 10 view .LVU446
 1579 00ca 02D0     		beq	.L153
 1580              		.loc 1 639 2 view .LVU447
 1581 00cc CDF80080 		str	r8, [sp]
 1582 00d0 C847     		blx	r9
 1583              	.LVL120:
 1584              	.L153:
 640:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1585              		.loc 1 640 7 is_stmt 1 view .LVU448
 641:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 642:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1586              		.loc 1 642 2 view .LVU449
ARM GAS  /tmp/cczIC8Cx.s 			page 46


 640:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1587              		.loc 1 640 22 is_stmt 0 view .LVU450
 1588 00d2 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 640:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1589              		.loc 1 640 40 view .LVU451
 1590 00d4 2241     		asrs	r2, r2, r4
 1591              		.loc 1 642 2 view .LVU452
 1592 00d6 A4EB8401 		sub	r1, r4, r4, lsl #2
 1593 00da 0323     		movs	r3, #3
 640:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1594              		.loc 1 640 10 view .LVU453
 1595 00dc 12F0010F 		tst	r2, #1
 1596              		.loc 1 642 2 view .LVU454
 1597 00e0 01F1D001 		add	r1, r1, #208
 1598 00e4 1A46     		mov	r2, r3
 1599 00e6 04F10104 		add	r4, r4, #1
 1600              	.LVL121:
 1601              		.loc 1 642 2 view .LVU455
 1602 00ea 2846     		mov	r0, r5
 640:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1603              		.loc 1 640 10 view .LVU456
 1604 00ec 02D0     		beq	.L154
 1605              		.loc 1 642 2 view .LVU457
 1606 00ee CDF80080 		str	r8, [sp]
 1607 00f2 C847     		blx	r9
 1608              	.LVL122:
 1609              	.L154:
 636:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1610              		.loc 1 636 32 is_stmt 1 discriminator 2 view .LVU458
 636:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1611              		.loc 1 636 23 discriminator 2 view .LVU459
 636:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1612              		.loc 1 636 5 is_stmt 0 discriminator 2 view .LVU460
 1613 00f4 062C     		cmp	r4, #6
 1614 00f6 DCD1     		bne	.L155
 1615              	.LBE94:
 635:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1616              		.loc 1 635 32 is_stmt 1 discriminator 2 view .LVU461
 635:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1617              		.loc 1 635 21 discriminator 2 view .LVU462
 1618 00f8 0236     		adds	r6, r6, #2
 635:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1619              		.loc 1 635 3 is_stmt 0 discriminator 2 view .LVU463
 1620 00fa B345     		cmp	fp, r6
 1621 00fc 07F10207 		add	r7, r7, #2
 1622 0100 D4D1     		bne	.L152
 1623              	.LBE96:
 643:src/menu.c    ****     }
 644:src/menu.c    ****   }
 645:src/menu.c    **** }
 1624              		.loc 1 645 1 view .LVU464
 1625 0102 03B0     		add	sp, sp, #12
 1626              		.cfi_def_cfa_offset 52
 1627              		@ sp needed
 1628 0104 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1629              		.cfi_restore 14
 1630              		.cfi_restore 11
ARM GAS  /tmp/cczIC8Cx.s 			page 47


 1631              		.cfi_restore 10
 1632              		.cfi_restore 9
 1633              		.cfi_restore 8
 1634              		.cfi_restore 7
 1635              		.cfi_restore 6
 1636              		.cfi_restore 5
 1637              		.cfi_restore 4
 1638              		.cfi_def_cfa_offset 16
 1639              	.LVL123:
 1640              		.loc 1 645 1 view .LVU465
 1641 0108 04B0     		add	sp, sp, #16
 1642              		.cfi_def_cfa_offset 0
 1643 010a 7047     		bx	lr
 1644              	.L168:
 1645              		.align	2
 1646              	.L167:
 1647 010c 3D020008 		.word	134218301
 1648 0110 00000000 		.word	.LANCHOR0
 1649 0114 01000000 		.word	.LANCHOR0+1
 1650              		.cfi_endproc
 1651              	.LFE16:
 1653              		.section	.text.display_current_menu,"ax",%progbits
 1654              		.align	1
 1655              		.p2align 2,,3
 1656              		.global	display_current_menu
 1657              		.syntax unified
 1658              		.thumb
 1659              		.thumb_func
 1660              		.fpu fpv4-sp-d16
 1662              	display_current_menu:
 1663              	.LFB11:
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1664              		.loc 1 148 30 is_stmt 1 view -0
 1665              		.cfi_startproc
 1666              		@ args = 0, pretend = 0, frame = 208
 1667              		@ frame_needed = 0, uses_anonymous_args = 0
 149:src/menu.c    **** }
 1668              		.loc 1 149 3 view .LVU467
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1669              		.loc 1 148 30 is_stmt 0 view .LVU468
 1670 0000 10B5     		push	{r4, lr}
 1671              		.cfi_def_cfa_offset 8
 1672              		.cfi_offset 4, -8
 1673              		.cfi_offset 14, -4
 1674 0002 E4B0     		sub	sp, sp, #400
 1675              		.cfi_def_cfa_offset 408
 149:src/menu.c    **** }
 1676              		.loc 1 149 3 view .LVU469
 1677 0004 30AC     		add	r4, sp, #192
 1678 0006 2046     		mov	r0, r4
 1679 0008 FFF7FEFF 		bl	get_current_menu_ref
 1680              	.LVL124:
 1681 000c 34A9     		add	r1, sp, #208
 1682 000e C022     		movs	r2, #192
 1683 0010 6846     		mov	r0, sp
 1684 0012 FFF7FEFF 		bl	memcpy
 1685              	.LVL125:
ARM GAS  /tmp/cczIC8Cx.s 			page 48


 1686 0016 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1687 001a FFF7FEFF 		bl	display_menu
 1688              	.LVL126:
 150:src/menu.c    **** 
 1689              		.loc 1 150 1 view .LVU470
 1690 001e 64B0     		add	sp, sp, #400
 1691              		.cfi_def_cfa_offset 8
 1692              		@ sp needed
 1693 0020 10BD     		pop	{r4, pc}
 1694              		.cfi_endproc
 1695              	.LFE11:
 1697 0022 00BF     		.section	.text.all_menu_dots,"ax",%progbits
 1698              		.align	1
 1699              		.p2align 2,,3
 1700              		.global	all_menu_dots
 1701              		.syntax unified
 1702              		.thumb
 1703              		.thumb_func
 1704              		.fpu fpv4-sp-d16
 1706              	all_menu_dots:
 1707              	.LFB17:
 646:src/menu.c    **** 
 647:src/menu.c    **** void all_menu_dots () {
 1708              		.loc 1 647 23 is_stmt 1 view -0
 1709              		.cfi_startproc
 1710              		@ args = 0, pretend = 0, frame = 0
 1711              		@ frame_needed = 0, uses_anonymous_args = 0
 648:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1712              		.loc 1 648 3 view .LVU472
 1713              	.LBB97:
 1714              		.loc 1 648 8 view .LVU473
 1715              	.LVL127:
 1716              		.loc 1 648 21 view .LVU474
 1717              	.LBE97:
 647:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1718              		.loc 1 647 23 is_stmt 0 view .LVU475
 1719 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1720              		.cfi_def_cfa_offset 20
 1721              		.cfi_offset 4, -20
 1722              		.cfi_offset 5, -16
 1723              		.cfi_offset 6, -12
 1724              		.cfi_offset 7, -8
 1725              		.cfi_offset 14, -4
 1726              	.LBB101:
 1727              	.LBB98:
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 650:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1728              		.loc 1 650 2 view .LVU476
 1729 0002 0D4E     		ldr	r6, .L177
 1730              	.LBE98:
 1731              	.LBE101:
 647:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1732              		.loc 1 647 23 view .LVU477
 1733 0004 83B0     		sub	sp, sp, #12
 1734              		.cfi_def_cfa_offset 32
 647:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1735              		.loc 1 647 23 view .LVU478
ARM GAS  /tmp/cczIC8Cx.s 			page 49


 1736 0006 0025     		movs	r5, #0
 1737              	.LBB102:
 1738              	.LBB99:
 1739              		.loc 1 650 2 view .LVU479
 1740 0008 FF27     		movs	r7, #255
 1741              	.LVL128:
 1742              	.L172:
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1743              		.loc 1 649 23 is_stmt 1 view .LVU480
 1744              	.LBE99:
 1745              	.LBE102:
 647:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1746              		.loc 1 647 23 is_stmt 0 view .LVU481
 1747 000a E924     		movs	r4, #233
 1748              	.LVL129:
 1749              	.L173:
 1750              	.LBB103:
 1751              	.LBB100:
 1752              		.loc 1 650 2 is_stmt 1 discriminator 3 view .LVU482
 1753 000c 0323     		movs	r3, #3
 1754 000e 1A46     		mov	r2, r3
 1755 0010 2146     		mov	r1, r4
 1756 0012 2846     		mov	r0, r5
 1757 0014 0097     		str	r7, [sp]
 1758 0016 B047     		blx	r6
 1759              	.LVL130:
 651:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1760              		.loc 1 651 2 discriminator 3 view .LVU483
 1761 0018 0323     		movs	r3, #3
 1762 001a A4F11901 		sub	r1, r4, #25
 1763 001e 0097     		str	r7, [sp]
 1764 0020 1A46     		mov	r2, r3
 1765 0022 2846     		mov	r0, r5
 1766 0024 033C     		subs	r4, r4, #3
 1767 0026 B047     		blx	r6
 1768              	.LVL131:
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1769              		.loc 1 649 32 discriminator 3 view .LVU484
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1770              		.loc 1 649 23 discriminator 3 view .LVU485
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1771              		.loc 1 649 5 is_stmt 0 discriminator 3 view .LVU486
 1772 0028 D72C     		cmp	r4, #215
 1773 002a EFD1     		bne	.L173
 1774              	.LBE100:
 648:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1775              		.loc 1 648 32 is_stmt 1 discriminator 2 view .LVU487
 648:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1776              		.loc 1 648 21 discriminator 2 view .LVU488
 1777 002c 0235     		adds	r5, r5, #2
 648:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1778              		.loc 1 648 3 is_stmt 0 discriminator 2 view .LVU489
 1779 002e B5F5C87F 		cmp	r5, #400
 1780 0032 EAD1     		bne	.L172
 1781              	.LBE103:
 652:src/menu.c    ****     }
 653:src/menu.c    ****   }
ARM GAS  /tmp/cczIC8Cx.s 			page 50


 654:src/menu.c    **** }  
 1782              		.loc 1 654 1 view .LVU490
 1783 0034 03B0     		add	sp, sp, #12
 1784              		.cfi_def_cfa_offset 20
 1785              		@ sp needed
 1786 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1787              	.L178:
 1788              		.align	2
 1789              	.L177:
 1790 0038 3D020008 		.word	134218301
 1791              		.cfi_endproc
 1792              	.LFE17:
 1794              		.section	.text.umen_store,"ax",%progbits
 1795              		.align	1
 1796              		.p2align 2,,3
 1797              		.global	umen_store
 1798              		.syntax unified
 1799              		.thumb
 1800              		.thumb_func
 1801              		.fpu fpv4-sp-d16
 1803              	umen_store:
 1804              	.LVL132:
 1805              	.LFB20:
 655:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1);
 656:src/menu.c    **** 
 657:src/menu.c    **** void build_user_menu(void){
 658:src/menu.c    ****   // find the label 'MNU'
 659:src/menu.c    ****    const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 660:src/menu.c    ****    build_user_menu_from_program (lbl);
 661:src/menu.c    **** }
 662:src/menu.c    **** 
 663:src/menu.c    **** void build_user_menu_from_program(int lbl)
 664:src/menu.c    **** {
 665:src/menu.c    ****   // find the label 'MNU'
 666:src/menu.c    ****   // const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 667:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 668:src/menu.c    ****   int i=0;
 669:src/menu.c    ****   s_opcode op;
 670:src/menu.c    ****   opcode opc;
 671:src/menu.c    ****   char buf1[16];
 672:src/menu.c    ****   char *p = buf1;
 673:src/menu.c    ****   char c;
 674:src/menu.c    ****   int finished = 0;
 675:src/menu.c    **** 
 676:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 677:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 678:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 679:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 680:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 681:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 682:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 683:src/menu.c    ****   }
 684:src/menu.c    ****   while (pc && i < 12) {
 685:src/menu.c    **** 
 686:src/menu.c    ****     pc = do_inc(pc, 0);
 687:src/menu.c    ****     opc = getprog(pc);
 688:src/menu.c    ****     op = (s_opcode) opc;
ARM GAS  /tmp/cczIC8Cx.s 			page 51


 689:src/menu.c    **** 
 690:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 691:src/menu.c    ****       break;
 692:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 693:src/menu.c    ****       if (i==4) {
 694:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 695:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 696:src/menu.c    ****       }
 697:src/menu.c    ****       else if (i==5) {
 698:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 699:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 700:src/menu.c    ****       }
 701:src/menu.c    ****       i += 1;
 702:src/menu.c    ****       continue;
 703:src/menu.c    ****     }
 704:src/menu.c    **** 
 705:src/menu.c    ****     if (isDBL(opc) && (opDBL(opc) == DBL_ALPHA)) { // is it double alpha?
 706:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 707:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 708:src/menu.c    **** 	i++;
 709:src/menu.c    ****     	p = buf1;
 710:src/menu.c    **** 	finished = 0;
 711:src/menu.c    ****       } // ..and start reading the new alpha
 712:src/menu.c    ****       *p++ = opc & 0xff; // character 1
 713:src/menu.c    ****       c = (opc >> 16) & 0xff;
 714:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 715:src/menu.c    **** 	*p++ = c;
 716:src/menu.c    **** 	c = opc>>24;
 717:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 718:src/menu.c    **** 	  *p++ = c;
 719:src/menu.c    ****       }
 720:src/menu.c    ****       *p = '\0'; // no ++: next character can overwrite the 0.
 721:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 722:src/menu.c    **** 	finished = 1;
 723:src/menu.c    ****       }
 724:src/menu.c    ****     }
 725:src/menu.c    ****     else { // Not a DBL_ALPHA op - the usual case
 726:src/menu.c    ****       if ( p == buf1 ) { // no alpha label to use
 727:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 728:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 729:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 730:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 731:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 732:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 733:src/menu.c    **** 	  }
 734:src/menu.c    **** 	  else {
 735:src/menu.c    **** 	    prt_umen(opc, buf1); // display rarg with argument
 736:src/menu.c    **** 	  }
 737:src/menu.c    **** 	}
 738:src/menu.c    **** 	else {
 739:src/menu.c    **** 	  prt_umen(opc, buf1); // display non-rarg thing
 740:src/menu.c    **** 	}
 741:src/menu.c    ****       }
 742:src/menu.c    ****       else { // there is an alpha label to use, so reset
 743:src/menu.c    **** 	p = buf1;
 744:src/menu.c    **** 	finished = 0;
 745:src/menu.c    ****       }
ARM GAS  /tmp/cczIC8Cx.s 			page 52


 746:src/menu.c    ****       umen_store (i, opc, buf1);
 747:src/menu.c    ****       i++;
 748:src/menu.c    ****     }
 749:src/menu.c    ****   }
 750:src/menu.c    **** }
 751:src/menu.c    **** 
 752:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1) {
 1806              		.loc 1 752 49 is_stmt 1 view -0
 1807              		.cfi_startproc
 1808              		@ args = 0, pretend = 0, frame = 0
 1809              		@ frame_needed = 0, uses_anonymous_args = 0
 753:src/menu.c    **** #pragma GCC diagnostic push
 754:src/menu.c    **** #pragma GCC diagnostic ignored "-Wstringop-truncation"
 755:src/menu.c    ****     if (i<6) {
 1810              		.loc 1 755 5 view .LVU492
 1811              		.loc 1 755 8 is_stmt 0 view .LVU493
 1812 0000 0528     		cmp	r0, #5
 752:src/menu.c    **** #pragma GCC diagnostic push
 1813              		.loc 1 752 49 view .LVU494
 1814 0002 70B5     		push	{r4, r5, r6, lr}
 1815              		.cfi_def_cfa_offset 16
 1816              		.cfi_offset 4, -16
 1817              		.cfi_offset 5, -12
 1818              		.cfi_offset 6, -8
 1819              		.cfi_offset 14, -4
 752:src/menu.c    **** #pragma GCC diagnostic push
 1820              		.loc 1 752 49 view .LVU495
 1821 0004 0D46     		mov	r5, r1
 1822 0006 0446     		mov	r4, r0
 1823 0008 1146     		mov	r1, r2
 1824              	.LVL133:
 1825              		.loc 1 755 8 view .LVU496
 1826 000a 0FDC     		bgt	.L180
 1827              	.LBB109:
 756:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1828              		.loc 1 756 7 is_stmt 1 view .LVU497
 1829              		.loc 1 756 31 is_stmt 0 view .LVU498
 1830 000c 104E     		ldr	r6, .L183
 1831 000e 0130     		adds	r0, r0, #1
 1832              	.LVL134:
 757:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1833              		.loc 1 757 42 view .LVU499
 1834 0010 06EB4414 		add	r4, r6, r4, lsl #5
 1835              	.LVL135:
 756:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1836              		.loc 1 756 7 view .LVU500
 1837 0014 0722     		movs	r2, #7
 1838              	.LVL136:
 756:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1839              		.loc 1 756 7 view .LVU501
 1840 0016 06EB4010 		add	r0, r6, r0, lsl #5
 1841              	.LVL137:
 756:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1842              		.loc 1 756 7 view .LVU502
 1843 001a FFF7FEFF 		bl	strncpy
 1844              	.LVL138:
 1845              		.loc 1 757 7 is_stmt 1 view .LVU503
ARM GAS  /tmp/cczIC8Cx.s 			page 53


 1846              		.loc 1 757 42 is_stmt 0 view .LVU504
 1847 001e 0022     		movs	r2, #0
 758:src/menu.c    ****       UserMenu.keys[i].unshifted = (struct _ndmap) {K_OP, opc};
 1848              		.loc 1 758 34 view .LVU505
 1849 0020 3423     		movs	r3, #52
 757:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1850              		.loc 1 757 42 view .LVU506
 1851 0022 84F82720 		strb	r2, [r4, #39]
 1852              		.loc 1 758 7 is_stmt 1 view .LVU507
 1853              		.loc 1 758 34 is_stmt 0 view .LVU508
 1854 0026 2374     		strb	r3, [r4, #16]
 1855 0028 6561     		str	r5, [r4, #20]
 1856              	.LBE109:
 759:src/menu.c    ****     }
 760:src/menu.c    ****     else {
 761:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 762:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 763:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 764:src/menu.c    ****     }
 765:src/menu.c    **** #pragma GCC diagnostic pop
 766:src/menu.c    **** }  
 1857              		.loc 1 766 1 view .LVU509
 1858 002a 70BD     		pop	{r4, r5, r6, pc}
 1859              	.LVL139:
 1860              	.L180:
 1861              	.LBB110:
 1862              	.LBI110:
 752:src/menu.c    **** #pragma GCC diagnostic push
 1863              		.loc 1 752 6 is_stmt 1 view .LVU510
 1864              	.LBB111:
 1865              	.LBB112:
 761:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1866              		.loc 1 761 7 view .LVU511
 761:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1867              		.loc 1 761 30 is_stmt 0 view .LVU512
 1868 002c 841F     		subs	r4, r0, #6
 761:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1869              		.loc 1 761 33 view .LVU513
 1870 002e 084E     		ldr	r6, .L183
 1871 0030 6401     		lsls	r4, r4, #5
 1872 0032 04F12800 		add	r0, r4, #40
 1873              	.LVL140:
 761:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1874              		.loc 1 761 7 view .LVU514
 1875 0036 0722     		movs	r2, #7
 762:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1876              		.loc 1 762 42 view .LVU515
 1877 0038 3444     		add	r4, r4, r6
 761:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1878              		.loc 1 761 7 view .LVU516
 1879 003a 3044     		add	r0, r0, r6
 1880 003c FFF7FEFF 		bl	strncpy
 1881              	.LVL141:
 762:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1882              		.loc 1 762 7 is_stmt 1 view .LVU517
 762:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1883              		.loc 1 762 42 is_stmt 0 view .LVU518
ARM GAS  /tmp/cczIC8Cx.s 			page 54


 1884 0040 0022     		movs	r2, #0
 763:src/menu.c    ****     }
 1885              		.loc 1 763 34 view .LVU519
 1886 0042 3423     		movs	r3, #52
 762:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1887              		.loc 1 762 42 view .LVU520
 1888 0044 84F82F20 		strb	r2, [r4, #47]
 763:src/menu.c    ****     }
 1889              		.loc 1 763 7 is_stmt 1 view .LVU521
 1890              	.LVL142:
 763:src/menu.c    ****     }
 1891              		.loc 1 763 34 is_stmt 0 view .LVU522
 1892 0048 2376     		strb	r3, [r4, #24]
 1893 004a E561     		str	r5, [r4, #28]
 1894              	.LBE112:
 1895              	.LBE111:
 1896              	.LBE110:
 1897              		.loc 1 766 1 view .LVU523
 1898 004c 70BD     		pop	{r4, r5, r6, pc}
 1899              	.LVL143:
 1900              	.L184:
 1901              		.loc 1 766 1 view .LVU524
 1902 004e 00BF     		.align	2
 1903              	.L183:
 1904 0050 00000000 		.word	.LANCHOR4
 1905              		.cfi_endproc
 1906              	.LFE20:
 1908              		.section	.text.build_user_menu_from_program,"ax",%progbits
 1909              		.align	1
 1910              		.p2align 2,,3
 1911              		.global	build_user_menu_from_program
 1912              		.syntax unified
 1913              		.thumb
 1914              		.thumb_func
 1915              		.fpu fpv4-sp-d16
 1917              	build_user_menu_from_program:
 1918              	.LVL144:
 1919              	.LFB19:
 664:src/menu.c    ****   // find the label 'MNU'
 1920              		.loc 1 664 1 is_stmt 1 view -0
 1921              		.cfi_startproc
 1922              		@ args = 0, pretend = 0, frame = 16
 1923              		@ frame_needed = 0, uses_anonymous_args = 0
 667:src/menu.c    ****   int i=0;
 1924              		.loc 1 667 3 view .LVU526
 664:src/menu.c    ****   // find the label 'MNU'
 1925              		.loc 1 664 1 is_stmt 0 view .LVU527
 1926 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1927              		.cfi_def_cfa_offset 36
 1928              		.cfi_offset 4, -36
 1929              		.cfi_offset 5, -32
 1930              		.cfi_offset 6, -28
 1931              		.cfi_offset 7, -24
 1932              		.cfi_offset 8, -20
 1933              		.cfi_offset 9, -16
 1934              		.cfi_offset 10, -12
 1935              		.cfi_offset 11, -8
ARM GAS  /tmp/cczIC8Cx.s 			page 55


 1936              		.cfi_offset 14, -4
 667:src/menu.c    ****   int i=0;
 1937              		.loc 1 667 21 view .LVU528
 1938 0004 0021     		movs	r1, #0
 664:src/menu.c    ****   // find the label 'MNU'
 1939              		.loc 1 664 1 view .LVU529
 1940 0006 85B0     		sub	sp, sp, #20
 1941              		.cfi_def_cfa_offset 56
 667:src/menu.c    ****   int i=0;
 1942              		.loc 1 667 21 view .LVU530
 1943 0008 FFF7FEFF 		bl	findmultilbl
 1944              	.LVL145:
 667:src/menu.c    ****   int i=0;
 1945              		.loc 1 667 21 view .LVU531
 1946 000c 5C4B     		ldr	r3, .L236
 1947 000e 0546     		mov	r5, r0
 1948              	.LVL146:
 668:src/menu.c    ****   s_opcode op;
 1949              		.loc 1 668 3 is_stmt 1 view .LVU532
 669:src/menu.c    ****   opcode opc;
 1950              		.loc 1 669 3 view .LVU533
 670:src/menu.c    ****   char buf1[16];
 1951              		.loc 1 670 3 view .LVU534
 671:src/menu.c    ****   char *p = buf1;
 1952              		.loc 1 671 3 view .LVU535
 672:src/menu.c    ****   char c;
 1953              		.loc 1 672 3 view .LVU536
 673:src/menu.c    ****   int finished = 0;
 1954              		.loc 1 673 3 view .LVU537
 674:src/menu.c    **** 
 1955              		.loc 1 674 3 view .LVU538
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1956              		.loc 1 676 3 view .LVU539
 1957              	.LBB113:
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1958              		.loc 1 676 8 view .LVU540
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1959              		.loc 1 676 19 view .LVU541
 677:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1960              		.loc 1 677 43 is_stmt 0 view .LVU542
 1961 0010 0022     		movs	r2, #0
 1962 0012 03F1C000 		add	r0, r3, #192
 1963              	.LVL147:
 679:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1964              		.loc 1 679 42 view .LVU543
 1965 0016 2E21     		movs	r1, #46
 1966              	.LVL148:
 1967              	.L186:
 677:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1968              		.loc 1 677 7 is_stmt 1 discriminator 3 view .LVU544
 677:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1969              		.loc 1 677 43 is_stmt 0 discriminator 3 view .LVU545
 1970 0018 83F82020 		strb	r2, [r3, #32]
 678:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1971              		.loc 1 678 7 is_stmt 1 discriminator 3 view .LVU546
 678:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1972              		.loc 1 678 40 is_stmt 0 discriminator 3 view .LVU547
ARM GAS  /tmp/cczIC8Cx.s 			page 56


 1973 001c 5A61     		str	r2, [r3, #20]
 679:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1974              		.loc 1 679 7 is_stmt 1 discriminator 3 view .LVU548
 679:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1975              		.loc 1 679 42 is_stmt 0 discriminator 3 view .LVU549
 1976 001e 1974     		strb	r1, [r3, #16]
 680:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1977              		.loc 1 680 7 is_stmt 1 discriminator 3 view .LVU550
 680:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1978              		.loc 1 680 41 is_stmt 0 discriminator 3 view .LVU551
 1979 0020 83F82820 		strb	r2, [r3, #40]
 681:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1980              		.loc 1 681 7 is_stmt 1 discriminator 3 view .LVU552
 681:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1981              		.loc 1 681 38 is_stmt 0 discriminator 3 view .LVU553
 1982 0024 DA61     		str	r2, [r3, #28]
 682:src/menu.c    ****   }
 1983              		.loc 1 682 7 is_stmt 1 discriminator 3 view .LVU554
 682:src/menu.c    ****   }
 1984              		.loc 1 682 40 is_stmt 0 discriminator 3 view .LVU555
 1985 0026 1976     		strb	r1, [r3, #24]
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1986              		.loc 1 676 24 is_stmt 1 discriminator 3 view .LVU556
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1987              		.loc 1 676 19 discriminator 3 view .LVU557
 1988 0028 2033     		adds	r3, r3, #32
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1989              		.loc 1 676 3 is_stmt 0 discriminator 3 view .LVU558
 1990 002a 8342     		cmp	r3, r0
 1991 002c F4D1     		bne	.L186
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1992              		.loc 1 676 3 discriminator 3 view .LVU559
 1993              	.LBE113:
 684:src/menu.c    **** 
 1994              		.loc 1 684 9 is_stmt 1 view .LVU560
 1995 002e 65B3     		cbz	r5, .L185
 1996              	.LBB114:
 698:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1997              		.loc 1 698 29 is_stmt 0 view .LVU561
 1998 0030 DFF86891 		ldr	r9, .L236+28
 1999              	.LBE114:
 674:src/menu.c    **** 
 2000              		.loc 1 674 7 view .LVU562
 2001 0034 4FF00008 		mov	r8, #0
 672:src/menu.c    ****   char c;
 2002              		.loc 1 672 9 view .LVU563
 2003 0038 6E46     		mov	r6, sp
 2004              	.LBB115:
 695:src/menu.c    ****       }
 2005              		.loc 1 695 2 view .LVU564
 2006 003a A9F1100A 		sub	r10, r9, #16
 2007              	.LBE115:
 668:src/menu.c    ****   s_opcode op;
 2008              		.loc 1 668 7 view .LVU565
 2009 003e C346     		mov	fp, r8
 672:src/menu.c    ****   char c;
 2010              		.loc 1 672 9 view .LVU566
ARM GAS  /tmp/cczIC8Cx.s 			page 57


 2011 0040 3746     		mov	r7, r6
 2012              	.LVL149:
 2013              	.L187:
 686:src/menu.c    ****     opc = getprog(pc);
 2014              		.loc 1 686 5 is_stmt 1 view .LVU567
 686:src/menu.c    ****     opc = getprog(pc);
 2015              		.loc 1 686 10 is_stmt 0 view .LVU568
 2016 0042 2846     		mov	r0, r5
 2017 0044 0021     		movs	r1, #0
 2018 0046 FFF7FEFF 		bl	do_inc
 2019              	.LVL150:
 2020 004a 0546     		mov	r5, r0
 2021              	.LVL151:
 687:src/menu.c    ****     op = (s_opcode) opc;
 2022              		.loc 1 687 5 is_stmt 1 view .LVU569
 687:src/menu.c    ****     op = (s_opcode) opc;
 2023              		.loc 1 687 11 is_stmt 0 view .LVU570
 2024 004c FFF7FEFF 		bl	getprog
 2025              	.LVL152:
 688:src/menu.c    **** 
 2026              		.loc 1 688 8 view .LVU571
 2027 0050 83B2     		uxth	r3, r0
 690:src/menu.c    ****       break;
 2028              		.loc 1 690 8 view .LVU572
 2029 0052 B3F59D7F 		cmp	r3, #314
 687:src/menu.c    ****     op = (s_opcode) opc;
 2030              		.loc 1 687 11 view .LVU573
 2031 0056 0446     		mov	r4, r0
 2032              	.LVL153:
 688:src/menu.c    **** 
 2033              		.loc 1 688 5 is_stmt 1 view .LVU574
 690:src/menu.c    ****       break;
 2034              		.loc 1 690 5 view .LVU575
 690:src/menu.c    ****       break;
 2035              		.loc 1 690 8 is_stmt 0 view .LVU576
 2036 0058 17D0     		beq	.L185
 692:src/menu.c    ****       if (i==4) {
 2037              		.loc 1 692 5 is_stmt 1 view .LVU577
 692:src/menu.c    ****       if (i==4) {
 2038              		.loc 1 692 8 is_stmt 0 view .LVU578
 2039 005a B3F5807F 		cmp	r3, #256
 2040 005e 43D0     		beq	.L228
 705:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2041              		.loc 1 705 5 is_stmt 1 view .LVU579
 705:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2042              		.loc 1 705 9 is_stmt 0 view .LVU580
 2043 0060 00F47042 		and	r2, r0, #61440
 705:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2044              		.loc 1 705 8 view .LVU581
 2045 0064 B2F5704F 		cmp	r2, #61440
 2046 0068 12D0     		beq	.L229
 2047              	.L193:
 726:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2048              		.loc 1 726 7 is_stmt 1 view .LVU582
 726:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2049              		.loc 1 726 10 is_stmt 0 view .LVU583
 2050 006a B742     		cmp	r7, r6
ARM GAS  /tmp/cczIC8Cx.s 			page 58


 2051 006c 26D0     		beq	.L230
 744:src/menu.c    ****       }
 2052              		.loc 1 744 11 view .LVU584
 2053 006e 4FF00008 		mov	r8, #0
 2054              	.LVL154:
 2055              	.L199:
 746:src/menu.c    ****       i++;
 2056              		.loc 1 746 7 is_stmt 1 view .LVU585
 2057 0072 5846     		mov	r0, fp
 2058 0074 2146     		mov	r1, r4
 2059 0076 3246     		mov	r2, r6
 2060 0078 FFF7FEFF 		bl	umen_store
 2061              	.LVL155:
 747:src/menu.c    ****     }
 2062              		.loc 1 747 7 view .LVU586
 747:src/menu.c    ****     }
 2063              		.loc 1 747 8 is_stmt 0 view .LVU587
 2064 007c 0BF1010B 		add	fp, fp, #1
 2065              	.LVL156:
 747:src/menu.c    ****     }
 2066              		.loc 1 747 8 view .LVU588
 2067 0080 3746     		mov	r7, r6
 2068              	.LVL157:
 2069              	.L192:
 684:src/menu.c    **** 
 2070              		.loc 1 684 9 is_stmt 1 view .LVU589
 2071 0082 15B1     		cbz	r5, .L185
 684:src/menu.c    **** 
 2072              		.loc 1 684 13 is_stmt 0 discriminator 1 view .LVU590
 2073 0084 BBF10C0F 		cmp	fp, #12
 2074 0088 DBD1     		bne	.L187
 2075              	.LVL158:
 2076              	.L185:
 750:src/menu.c    **** 
 2077              		.loc 1 750 1 view .LVU591
 2078 008a 05B0     		add	sp, sp, #20
 2079              		.cfi_remember_state
 2080              		.cfi_def_cfa_offset 36
 2081              		@ sp needed
 2082 008c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2083              	.LVL159:
 2084              	.L229:
 2085              		.cfi_restore_state
 705:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2086              		.loc 1 705 24 discriminator 1 view .LVU592
 2087 0090 C0F30321 		ubfx	r1, r0, #8, #4
 705:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2088              		.loc 1 705 20 discriminator 1 view .LVU593
 2089 0094 0A29     		cmp	r1, #10
 2090 0096 E8D1     		bne	.L193
 706:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2091              		.loc 1 706 7 is_stmt 1 view .LVU594
 706:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2092              		.loc 1 706 10 is_stmt 0 view .LVU595
 2093 0098 B8F1000F 		cmp	r8, #0
 2094 009c 40D1     		bne	.L194
 706:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
ARM GAS  /tmp/cczIC8Cx.s 			page 59


 2095              		.loc 1 706 29 discriminator 1 view .LVU596
 2096 009e BB1B     		subs	r3, r7, r6
 2097              	.LVL160:
 706:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2098              		.loc 1 706 24 discriminator 1 view .LVU597
 2099 00a0 062B     		cmp	r3, #6
 2100 00a2 3DD0     		beq	.L194
 2101              	.LVL161:
 712:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2102              		.loc 1 712 7 is_stmt 1 view .LVU598
 714:src/menu.c    **** 	*p++ = c;
 2103              		.loc 1 714 10 is_stmt 0 view .LVU599
 2104 00a4 14F47F0F 		tst	r4, #16711680
 712:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2105              		.loc 1 712 12 view .LVU600
 2106 00a8 3C70     		strb	r4, [r7]
 713:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2107              		.loc 1 713 7 is_stmt 1 view .LVU601
 713:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2108              		.loc 1 713 9 is_stmt 0 view .LVU602
 2109 00aa C4F30743 		ubfx	r3, r4, #16, #8
 2110              	.LVL162:
 714:src/menu.c    **** 	*p++ = c;
 2111              		.loc 1 714 7 is_stmt 1 view .LVU603
 714:src/menu.c    **** 	*p++ = c;
 2112              		.loc 1 714 10 is_stmt 0 view .LVU604
 2113 00ae 24D1     		bne	.L231
 2114              	.LVL163:
 2115              	.L196:
 712:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2116              		.loc 1 712 9 view .LVU605
 2117 00b0 0137     		adds	r7, r7, #1
 2118              	.LVL164:
 2119              	.L198:
 720:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2120              		.loc 1 720 7 is_stmt 1 view .LVU606
 720:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2121              		.loc 1 720 10 is_stmt 0 view .LVU607
 2122 00b2 0023     		movs	r3, #0
 2123 00b4 3B70     		strb	r3, [r7]
 721:src/menu.c    **** 	finished = 1;
 2124              		.loc 1 721 7 is_stmt 1 view .LVU608
 722:src/menu.c    ****       }
 2125              		.loc 1 722 11 is_stmt 0 view .LVU609
 2126 00b6 4FF00108 		mov	r8, #1
 2127 00ba E2E7     		b	.L192
 2128              	.LVL165:
 2129              	.L230:
 727:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2130              		.loc 1 727 2 is_stmt 1 view .LVU610
 2131 00bc A0B2     		uxth	r0, r4
 2132              	.LVL166:
 727:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2133              		.loc 1 727 5 is_stmt 0 view .LVU611
 2134 00be 72B1     		cbz	r2, .L200
 727:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2135              		.loc 1 727 6 discriminator 1 view .LVU612
ARM GAS  /tmp/cczIC8Cx.s 			page 60


 2136 00c0 B2F5704F 		cmp	r2, #61440
 2137 00c4 0BD0     		beq	.L200
 2138              	.LBB116:
 728:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2139              		.loc 1 728 4 is_stmt 1 view .LVU613
 728:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2140              		.loc 1 728 26 is_stmt 0 view .LVU614
 2141 00c6 1B0A     		lsrs	r3, r3, #8
 2142              	.LVL167:
 728:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2143              		.loc 1 728 26 view .LVU615
 2144 00c8 203B     		subs	r3, r3, #32
 2145 00ca DBB2     		uxtb	r3, r3
 2146              	.LVL168:
 729:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2147              		.loc 1 729 4 is_stmt 1 view .LVU616
 729:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2148              		.loc 1 729 7 is_stmt 0 view .LVU617
 2149 00cc 242B     		cmp	r3, #36
 2150 00ce 06D0     		beq	.L200
 729:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2151              		.loc 1 729 28 discriminator 1 view .LVU618
 2152 00d0 6C2B     		cmp	r3, #108
 2153 00d2 04D0     		beq	.L200
 730:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 2154              		.loc 1 730 9 view .LVU619
 2155 00d4 012B     		cmp	r3, #1
 2156 00d6 02D9     		bls	.L200
 731:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2157              		.loc 1 731 9 view .LVU620
 2158 00d8 10F0FF0F 		tst	r0, #255
 2159 00dc 4BD0     		beq	.L232
 2160              	.LVL169:
 2161              	.L200:
 731:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2162              		.loc 1 731 9 view .LVU621
 2163              	.LBE116:
 739:src/menu.c    **** 	}
 2164              		.loc 1 739 4 is_stmt 1 view .LVU622
 2165 00de 3146     		mov	r1, r6
 2166 00e0 2046     		mov	r0, r4
 2167 00e2 FFF7FEFF 		bl	prt_umen
 2168              	.LVL170:
 2169 00e6 C4E7     		b	.L199
 2170              	.LVL171:
 2171              	.L228:
 693:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2172              		.loc 1 693 7 view .LVU623
 693:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2173              		.loc 1 693 10 is_stmt 0 view .LVU624
 2174 00e8 BBF1040F 		cmp	fp, #4
 2175 00ec 28D0     		beq	.L233
 697:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2176              		.loc 1 697 12 is_stmt 1 view .LVU625
 697:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2177              		.loc 1 697 15 is_stmt 0 view .LVU626
 2178 00ee BBF1050F 		cmp	fp, #5
ARM GAS  /tmp/cczIC8Cx.s 			page 61


 2179 00f2 32D0     		beq	.L234
 2180              	.LVL172:
 2181              	.L191:
 701:src/menu.c    ****       continue;
 2182              		.loc 1 701 7 is_stmt 1 view .LVU627
 701:src/menu.c    ****       continue;
 2183              		.loc 1 701 9 is_stmt 0 view .LVU628
 2184 00f4 0BF1010B 		add	fp, fp, #1
 2185              	.LVL173:
 702:src/menu.c    ****     }
 2186              		.loc 1 702 7 is_stmt 1 view .LVU629
 2187 00f8 C3E7     		b	.L192
 2188              	.LVL174:
 2189              	.L231:
 715:src/menu.c    **** 	c = opc>>24;
 2190              		.loc 1 715 2 view .LVU630
 715:src/menu.c    **** 	c = opc>>24;
 2191              		.loc 1 715 7 is_stmt 0 view .LVU631
 2192 00fa 7B70     		strb	r3, [r7, #1]
 716:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2193              		.loc 1 716 2 is_stmt 1 view .LVU632
 717:src/menu.c    **** 	  *p++ = c;
 2194              		.loc 1 717 5 is_stmt 0 view .LVU633
 2195 00fc 230E     		lsrs	r3, r4, #24
 2196              	.LVL175:
 716:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2197              		.loc 1 716 4 view .LVU634
 2198 00fe 4FEA1461 		lsr	r1, r4, #24
 2199              	.LVL176:
 717:src/menu.c    **** 	  *p++ = c;
 2200              		.loc 1 717 2 is_stmt 1 view .LVU635
 717:src/menu.c    **** 	  *p++ = c;
 2201              		.loc 1 717 5 is_stmt 0 view .LVU636
 2202 0102 36D0     		beq	.L235
 718:src/menu.c    ****       }
 2203              		.loc 1 718 4 is_stmt 1 view .LVU637
 718:src/menu.c    ****       }
 2204              		.loc 1 718 6 is_stmt 0 view .LVU638
 2205 0104 FB1C     		adds	r3, r7, #3
 2206              	.LVL177:
 721:src/menu.c    **** 	finished = 1;
 2207              		.loc 1 721 26 view .LVU639
 2208 0106 A3EB0608 		sub	r8, r3, r6
 721:src/menu.c    **** 	finished = 1;
 2209              		.loc 1 721 21 view .LVU640
 2210 010a A8F10608 		sub	r8, r8, #6
 720:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2211              		.loc 1 720 10 view .LVU641
 2212 010e 0022     		movs	r2, #0
 721:src/menu.c    **** 	finished = 1;
 2213              		.loc 1 721 21 view .LVU642
 2214 0110 B8FA88F8 		clz	r8, r8
 718:src/menu.c    ****       }
 2215              		.loc 1 718 9 view .LVU643
 2216 0114 B970     		strb	r1, [r7, #2]
 720:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2217              		.loc 1 720 7 is_stmt 1 view .LVU644
ARM GAS  /tmp/cczIC8Cx.s 			page 62


 720:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2218              		.loc 1 720 10 is_stmt 0 view .LVU645
 2219 0116 FA70     		strb	r2, [r7, #3]
 721:src/menu.c    **** 	finished = 1;
 2220              		.loc 1 721 7 is_stmt 1 view .LVU646
 721:src/menu.c    **** 	finished = 1;
 2221              		.loc 1 721 21 is_stmt 0 view .LVU647
 2222 0118 4FEA5818 		lsr	r8, r8, #5
 718:src/menu.c    ****       }
 2223              		.loc 1 718 6 view .LVU648
 2224 011c 1F46     		mov	r7, r3
 2225 011e B0E7     		b	.L192
 2226              	.LVL178:
 2227              	.L194:
 707:src/menu.c    **** 	i++;
 2228              		.loc 1 707 2 is_stmt 1 view .LVU649
 2229 0120 5846     		mov	r0, fp
 2230              	.LVL179:
 707:src/menu.c    **** 	i++;
 2231              		.loc 1 707 2 is_stmt 0 view .LVU650
 2232 0122 3246     		mov	r2, r6
 2233 0124 4FF48071 		mov	r1, #256
 709:src/menu.c    **** 	finished = 0;
 2234              		.loc 1 709 8 view .LVU651
 2235 0128 3746     		mov	r7, r6
 2236              	.LVL180:
 707:src/menu.c    **** 	i++;
 2237              		.loc 1 707 2 view .LVU652
 2238 012a FFF7FEFF 		bl	umen_store
 2239              	.LVL181:
 708:src/menu.c    ****     	p = buf1;
 2240              		.loc 1 708 2 is_stmt 1 view .LVU653
 714:src/menu.c    **** 	*p++ = c;
 2241              		.loc 1 714 10 is_stmt 0 view .LVU654
 2242 012e 14F47F0F 		tst	r4, #16711680
 708:src/menu.c    ****     	p = buf1;
 2243              		.loc 1 708 3 view .LVU655
 2244 0132 0BF1010B 		add	fp, fp, #1
 2245              	.LVL182:
 709:src/menu.c    **** 	finished = 0;
 2246              		.loc 1 709 6 is_stmt 1 view .LVU656
 710:src/menu.c    ****       } // ..and start reading the new alpha
 2247              		.loc 1 710 2 view .LVU657
 712:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2248              		.loc 1 712 7 view .LVU658
 712:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2249              		.loc 1 712 12 is_stmt 0 view .LVU659
 2250 0136 3C70     		strb	r4, [r7]
 713:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2251              		.loc 1 713 7 is_stmt 1 view .LVU660
 713:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2252              		.loc 1 713 9 is_stmt 0 view .LVU661
 2253 0138 C4F30743 		ubfx	r3, r4, #16, #8
 2254              	.LVL183:
 714:src/menu.c    **** 	*p++ = c;
 2255              		.loc 1 714 7 is_stmt 1 view .LVU662
 714:src/menu.c    **** 	*p++ = c;
ARM GAS  /tmp/cczIC8Cx.s 			page 63


 2256              		.loc 1 714 10 is_stmt 0 view .LVU663
 2257 013c B8D0     		beq	.L196
 2258              	.LVL184:
 714:src/menu.c    **** 	*p++ = c;
 2259              		.loc 1 714 10 view .LVU664
 2260 013e DCE7     		b	.L231
 2261              	.LVL185:
 2262              	.L233:
 2263              	.LBB117:
 694:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2264              		.loc 1 694 2 is_stmt 1 view .LVU665
 694:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2265              		.loc 1 694 29 is_stmt 0 view .LVU666
 2266 0140 104B     		ldr	r3, .L236+4
 2267              	.LVL186:
 695:src/menu.c    ****       }
 2268              		.loc 1 695 2 view .LVU667
 2269 0142 114C     		ldr	r4, .L236+8
 694:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2270              		.loc 1 694 29 view .LVU668
 2271 0144 93E80300 		ldm	r3, {r0, r1}
 2272              	.LVL187:
 694:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2273              		.loc 1 694 29 view .LVU669
 2274 0148 104B     		ldr	r3, .L236+12
 695:src/menu.c    ****       }
 2275              		.loc 1 695 2 view .LVU670
 2276 014a 0522     		movs	r2, #5
 694:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2277              		.loc 1 694 29 view .LVU671
 2278 014c 83E80300 		stm	r3, {r0, r1}
 695:src/menu.c    ****       }
 2279              		.loc 1 695 2 is_stmt 1 view .LVU672
 2280 0150 2168     		ldr	r1, [r4]
 2281 0152 5046     		mov	r0, r10
 2282 0154 FFF7FEFF 		bl	strncpy
 2283              	.LVL188:
 2284              	.LBE117:
 2285 0158 CCE7     		b	.L191
 2286              	.LVL189:
 2287              	.L234:
 2288              	.LBB118:
 698:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2289              		.loc 1 698 2 view .LVU673
 698:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2290              		.loc 1 698 29 is_stmt 0 view .LVU674
 2291 015a 0D4B     		ldr	r3, .L236+16
 2292              	.LVL190:
 698:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2293              		.loc 1 698 29 view .LVU675
 2294 015c 93E80300 		ldm	r3, {r0, r1}
 2295              	.LVL191:
 699:src/menu.c    ****       }
 2296              		.loc 1 699 2 view .LVU676
 2297 0160 0C4B     		ldr	r3, .L236+20
 698:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2298              		.loc 1 698 29 view .LVU677
ARM GAS  /tmp/cczIC8Cx.s 			page 64


 2299 0162 89E80300 		stm	r9, {r0, r1}
 699:src/menu.c    ****       }
 2300              		.loc 1 699 2 is_stmt 1 view .LVU678
 2301 0166 5A46     		mov	r2, fp
 2302 0168 1968     		ldr	r1, [r3]
 2303 016a 0B48     		ldr	r0, .L236+24
 2304 016c FFF7FEFF 		bl	strncpy
 2305              	.LVL192:
 2306 0170 C0E7     		b	.L191
 2307              	.LVL193:
 2308              	.L235:
 699:src/menu.c    ****       }
 2309              		.loc 1 699 2 is_stmt 0 view .LVU679
 2310              	.LBE118:
 715:src/menu.c    **** 	c = opc>>24;
 2311              		.loc 1 715 4 view .LVU680
 2312 0172 0237     		adds	r7, r7, #2
 2313              	.LVL194:
 715:src/menu.c    **** 	c = opc>>24;
 2314              		.loc 1 715 4 view .LVU681
 2315 0174 9DE7     		b	.L198
 2316              	.LVL195:
 2317              	.L232:
 2318              	.LBB119:
 732:src/menu.c    **** 	  }
 2319              		.loc 1 732 6 is_stmt 1 view .LVU682
 2320 0176 3146     		mov	r1, r6
 2321 0178 FFF7FEFF 		bl	catcmd
 2322              	.LVL196:
 732:src/menu.c    **** 	  }
 2323              		.loc 1 732 6 is_stmt 0 view .LVU683
 2324 017c 79E7     		b	.L199
 2325              	.L237:
 2326 017e 00BF     		.align	2
 2327              	.L236:
 2328 0180 00000000 		.word	.LANCHOR4
 2329 0184 00000000 		.word	.LANCHOR5
 2330 0188 00000000 		.word	.LANCHOR6
 2331 018c 90000000 		.word	.LANCHOR4+144
 2332 0190 08000000 		.word	.LANCHOR5+8
 2333 0194 00000000 		.word	.LANCHOR7
 2334 0198 C0000000 		.word	.LANCHOR4+192
 2335 019c B0000000 		.word	.LANCHOR4+176
 2336              	.LBE119:
 2337              		.cfi_endproc
 2338              	.LFE19:
 2340              		.section	.text.build_user_menu,"ax",%progbits
 2341              		.align	1
 2342              		.p2align 2,,3
 2343              		.global	build_user_menu
 2344              		.syntax unified
 2345              		.thumb
 2346              		.thumb_func
 2347              		.fpu fpv4-sp-d16
 2349              	build_user_menu:
 2350              	.LFB18:
 657:src/menu.c    ****   // find the label 'MNU'
ARM GAS  /tmp/cczIC8Cx.s 			page 65


 2351              		.loc 1 657 27 is_stmt 1 view -0
 2352              		.cfi_startproc
 2353              		@ args = 0, pretend = 0, frame = 0
 2354              		@ frame_needed = 0, uses_anonymous_args = 0
 2355              		@ link register save eliminated.
 659:src/menu.c    ****    build_user_menu_from_program (lbl);
 2356              		.loc 1 659 4 view .LVU685
 2357              	.LVL197:
 660:src/menu.c    **** }
 2358              		.loc 1 660 4 view .LVU686
 2359 0000 0148     		ldr	r0, .L239
 2360 0002 FFF7FEBF 		b	build_user_menu_from_program
 2361              	.LVL198:
 2362              	.L240:
 2363 0006 00BF     		.align	2
 2364              	.L239:
 2365 0008 4DF04E55 		.word	1431236685
 2366              		.cfi_endproc
 2367              	.LFE18:
 2369              		.section	.text.shutdown,"ax",%progbits
 2370              		.align	1
 2371              		.p2align 2,,3
 2372              		.global	shutdown
 2373              		.syntax unified
 2374              		.thumb
 2375              		.thumb_func
 2376              		.fpu fpv4-sp-d16
 2378              	shutdown:
 2379              	.LFB22:
 2380              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
ARM GAS  /tmp/cczIC8Cx.s 			page 66


  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #ifdef INCLUDE_STOPWATCH
  39:src/console.c **** #include "stopwatch.h"
  40:src/console.c **** #endif
  41:src/console.c **** #undef DM42SAFE
  42:src/console.c **** 
  43:src/console.c **** 
  44:src/console.c **** #ifdef DM42
  45:src/console.c **** 
  46:src/console.c **** #include <menu.c>
  47:src/console.c **** 
  48:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  49:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  50:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  51:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  52:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  53:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  54:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  55:src/console.c **** 
  56:src/console.c **** static struct _ndmap remap (const int c) {
  57:src/console.c **** 
  58:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  59:src/console.c **** 
  60:src/console.c **** #include "keytran.c"
  61:src/console.c **** 
  62:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  63:src/console.c **** 
  64:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  65:src/console.c **** 
  66:src/console.c ****   if (c == 44 ) {
  67:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  68:src/console.c ****     return sshot;
  69:src/console.c ****   }
  70:src/console.c ****   
  71:src/console.c ****   if (Running | Pause) {
  72:src/console.c ****     return mapping_running[c];
  73:src/console.c ****   }
  74:src/console.c **** 
  75:src/console.c ****   struct _menu Ref = get_current_menu_ref();
  76:src/console.c ****   
  77:src/console.c ****   switch (c) {
  78:src/console.c ****   case KEY_F1:
  79:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[0].unshifted;
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
  81:src/console.c ****   case KEY_F2:
  82:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[1].unshifted;
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
  84:src/console.c ****   case KEY_F3:
ARM GAS  /tmp/cczIC8Cx.s 			page 67


  85:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[2].unshifted;
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
  87:src/console.c ****   case KEY_F4:
  88:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[3].unshifted;
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
  90:src/console.c ****   case KEY_F5:
  91:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[4].unshifted;
  92:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
  93:src/console.c ****   case KEY_F6:
  94:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[5].unshifted;
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
  96:src/console.c ****   }
  97:src/console.c **** 
  98:src/console.c ****   if ( get_alpha_state() ) {
  99:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 100:src/console.c ****       switch (cur_shift()) { 
 101:src/console.c ****       case SHIFT_N:
 102:src/console.c **** 	return mapping_none[c]; // N -> F
 103:src/console.c **** 	break;
 104:src/console.c ****       case SHIFT_F:
 105:src/console.c **** 	return mapping_fshift[c]; // F -> G
 106:src/console.c **** 	break;
 107:src/console.c ****       case SHIFT_G:
 108:src/console.c **** 	return h_shift; // G -> H
 109:src/console.c **** 	break;
 110:src/console.c ****       case SHIFT_H:
 111:src/console.c **** 	return h_shift; // H -> N
 112:src/console.c ****       default:
 113:src/console.c **** 	return no_change;
 114:src/console.c ****       }
 115:src/console.c ****     }
 116:src/console.c ****     return mapping_alpha [c];
 117:src/console.c ****   }
 118:src/console.c **** 
 119:src/console.c ****   switch (cur_shift()) {
 120:src/console.c ****   case SHIFT_N:    
 121:src/console.c ****     return mapping_none[c];
 122:src/console.c ****     break;
 123:src/console.c ****   case SHIFT_F:
 124:src/console.c ****     return mapping_fshift[c];
 125:src/console.c ****     break;
 126:src/console.c ****   case SHIFT_G:
 127:src/console.c ****     return mapping_gshift[c];
 128:src/console.c ****     break;
 129:src/console.c ****   default:
 130:src/console.c ****     return no_change;
 131:src/console.c ****   }
 132:src/console.c **** }
 133:src/console.c **** 
 134:src/console.c **** #endif
 135:src/console.c **** 
 136:src/console.c **** void shutdown( void )
 137:src/console.c **** {
 2381              		.loc 2 137 1 view -0
 2382              		.cfi_startproc
 2383              		@ args = 0, pretend = 0, frame = 0
 2384              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cczIC8Cx.s 			page 68


 2385              		@ link register save eliminated.
 138:src/console.c **** #ifndef DM42
 139:src/console.c ****   checksum_all();
 140:src/console.c ****   setuptty( 1 );
 141:src/console.c ****   save_statefile( NULL );
 142:src/console.c ****   exit( 0 );
 143:src/console.c **** #else
 144:src/console.c ****   //  save_ram_file(0);
 145:src/console.c ****   SET_ST(STAT_PGM_END);
 2386              		.loc 2 145 3 view .LVU688
 2387 0000 024A     		ldr	r2, .L242
 2388 0002 1368     		ldr	r3, [r2]
 2389 0004 43F40073 		orr	r3, r3, #512
 2390 0008 1360     		str	r3, [r2]
 146:src/console.c **** #endif
 147:src/console.c **** }
 2391              		.loc 2 147 1 is_stmt 0 view .LVU689
 2392 000a 7047     		bx	lr
 2393              	.L243:
 2394              		.align	2
 2395              	.L242:
 2396 000c 00200010 		.word	268443648
 2397              		.cfi_endproc
 2398              	.LFE22:
 2400              		.section	.text.is_key_pressed,"ax",%progbits
 2401              		.align	1
 2402              		.p2align 2,,3
 2403              		.global	is_key_pressed
 2404              		.syntax unified
 2405              		.thumb
 2406              		.thumb_func
 2407              		.fpu fpv4-sp-d16
 2409              	is_key_pressed:
 2410              	.LFB23:
 148:src/console.c **** 
 149:src/console.c **** 
 150:src/console.c **** /*
 151:src/console.c ****  *  Dummies
 152:src/console.c ****  */
 153:src/console.c **** int is_key_pressed(void) 
 154:src/console.c **** {
 2411              		.loc 2 154 1 is_stmt 1 view -0
 2412              		.cfi_startproc
 2413              		@ args = 0, pretend = 0, frame = 0
 2414              		@ frame_needed = 0, uses_anonymous_args = 0
 155:src/console.c **** #ifdef DM42
 156:src/console.c ****   return !key_empty();
 2415              		.loc 2 156 3 view .LVU691
 154:src/console.c **** #ifdef DM42
 2416              		.loc 2 154 1 is_stmt 0 view .LVU692
 2417 0000 08B5     		push	{r3, lr}
 2418              		.cfi_def_cfa_offset 8
 2419              		.cfi_offset 3, -8
 2420              		.cfi_offset 14, -4
 2421              		.loc 2 156 11 view .LVU693
 2422 0002 034B     		ldr	r3, .L246
 2423 0004 9847     		blx	r3
ARM GAS  /tmp/cczIC8Cx.s 			page 69


 2424              	.LVL199:
 157:src/console.c **** #else
 158:src/console.c ****   return 0;
 159:src/console.c **** #endif
 160:src/console.c **** }
 2425              		.loc 2 160 1 view .LVU694
 2426 0006 B0FA80F0 		clz	r0, r0
 2427 000a 4009     		lsrs	r0, r0, #5
 2428 000c 08BD     		pop	{r3, pc}
 2429              	.L247:
 2430 000e 00BF     		.align	2
 2431              	.L246:
 2432 0010 7D030008 		.word	134218621
 2433              		.cfi_endproc
 2434              	.LFE23:
 2436              		.section	.text.get_key,"ax",%progbits
 2437              		.align	1
 2438              		.p2align 2,,3
 2439              		.global	get_key
 2440              		.syntax unified
 2441              		.thumb
 2442              		.thumb_func
 2443              		.fpu fpv4-sp-d16
 2445              	get_key:
 2446              	.LFB24:
 161:src/console.c **** 
 162:src/console.c **** int get_key(void)
 163:src/console.c **** {
 2447              		.loc 2 163 1 is_stmt 1 view -0
 2448              		.cfi_startproc
 2449              		@ args = 0, pretend = 0, frame = 0
 2450              		@ frame_needed = 0, uses_anonymous_args = 0
 2451              		@ link register save eliminated.
 164:src/console.c ****   #ifdef DM42
 165:src/console.c ****   return key_pop();
 2452              		.loc 2 165 3 view .LVU696
 2453              		.loc 2 165 10 is_stmt 0 view .LVU697
 2454 0000 004B     		ldr	r3, .L249
 2455 0002 1847     		bx	r3
 2456              	.LVL200:
 2457              	.L250:
 2458              		.align	2
 2459              	.L249:
 2460 0004 89030008 		.word	134218633
 2461              		.cfi_endproc
 2462              	.LFE24:
 2464              		.section	.text.put_key,"ax",%progbits
 2465              		.align	1
 2466              		.p2align 2,,3
 2467              		.global	put_key
 2468              		.syntax unified
 2469              		.thumb
 2470              		.thumb_func
 2471              		.fpu fpv4-sp-d16
 2473              	put_key:
 2474              	.LVL201:
 2475              	.LFB25:
ARM GAS  /tmp/cczIC8Cx.s 			page 70


 166:src/console.c ****   #else
 167:src/console.c ****   return 0;
 168:src/console.c ****   #endif
 169:src/console.c **** }
 170:src/console.c **** 
 171:src/console.c **** /*
 172:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 173:src/console.c ****  * 
 174:src/console.c ****  */
 175:src/console.c **** int put_key( int k )
 176:src/console.c **** {
 2476              		.loc 2 176 1 is_stmt 1 view -0
 2477              		.cfi_startproc
 2478              		@ args = 0, pretend = 0, frame = 48
 2479              		@ frame_needed = 0, uses_anonymous_args = 0
 2480              		@ link register save eliminated.
 177:src/console.c ****   #ifdef DM42
 178:src/console.c ****   const char wp34s_to_DM42[] = {
 2481              		.loc 2 178 3 view .LVU699
 176:src/console.c ****   #ifdef DM42
 2482              		.loc 2 176 1 is_stmt 0 view .LVU700
 2483 0000 70B4     		push	{r4, r5, r6}
 2484              		.cfi_def_cfa_offset 12
 2485              		.cfi_offset 4, -12
 2486              		.cfi_offset 5, -8
 2487              		.cfi_offset 6, -4
 2488              		.loc 2 178 14 view .LVU701
 2489 0002 0E4D     		ldr	r5, .L254
 176:src/console.c ****   #ifdef DM42
 2490              		.loc 2 176 1 view .LVU702
 2491 0004 0646     		mov	r6, r0
 2492              		.loc 2 178 14 view .LVU703
 2493 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2494              	.LVL202:
 176:src/console.c ****   #ifdef DM42
 2495              		.loc 2 176 1 view .LVU704
 2496 0008 8DB0     		sub	sp, sp, #52
 2497              		.cfi_def_cfa_offset 64
 2498              		.loc 2 178 14 view .LVU705
 2499 000a 01AC     		add	r4, sp, #4
 2500 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2501 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2502 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2503 0012 95E80700 		ldm	r5, {r0, r1, r2}
 2504 0016 03C4     		stmia	r4!, {r0, r1}
 179:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 180:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 181:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 182:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 183:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 184:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 185:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 186:src/console.c ****   
 187:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 2505              		.loc 2 187 6 view .LVU706
 2506 0018 282E     		cmp	r6, #40
 178:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
ARM GAS  /tmp/cczIC8Cx.s 			page 71


 2507              		.loc 2 178 14 view .LVU707
 2508 001a 2270     		strb	r2, [r4]
 2509              		.loc 2 187 3 is_stmt 1 view .LVU708
 2510              		.loc 2 187 6 is_stmt 0 view .LVU709
 2511 001c 08D8     		bhi	.L252
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2512              		.loc 2 188 5 is_stmt 1 view .LVU710
 2513              		.loc 2 188 36 is_stmt 0 view .LVU711
 2514 001e 0CAB     		add	r3, sp, #48
 2515 0020 3046     		mov	r0, r6
 2516 0022 1844     		add	r0, r0, r3
 2517              		.loc 2 188 12 view .LVU712
 2518 0024 064B     		ldr	r3, .L254+4
 2519 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 189:src/console.c ****   }
 190:src/console.c ****   else {
 191:src/console.c ****     return -1;
 192:src/console.c ****   }
 193:src/console.c ****   #else
 194:src/console.c ****   return k;
 195:src/console.c ****   #endif
 196:src/console.c **** }
 2520              		.loc 2 196 1 view .LVU713
 2521 002a 0DB0     		add	sp, sp, #52
 2522              		.cfi_remember_state
 2523              		.cfi_def_cfa_offset 12
 2524              		@ sp needed
 2525 002c 70BC     		pop	{r4, r5, r6}
 2526              		.cfi_restore 6
 2527              		.cfi_restore 5
 2528              		.cfi_restore 4
 2529              		.cfi_def_cfa_offset 0
 2530              	.LVL203:
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2531              		.loc 2 188 12 view .LVU714
 2532 002e 1847     		bx	r3
 2533              	.LVL204:
 2534              	.L252:
 2535              		.cfi_restore_state
 2536              		.loc 2 196 1 view .LVU715
 2537 0030 4FF0FF30 		mov	r0, #-1
 2538 0034 0DB0     		add	sp, sp, #52
 2539              		.cfi_def_cfa_offset 12
 2540              		@ sp needed
 2541 0036 70BC     		pop	{r4, r5, r6}
 2542              		.cfi_restore 6
 2543              		.cfi_restore 5
 2544              		.cfi_restore 4
 2545              		.cfi_def_cfa_offset 0
 2546              	.LVL205:
 2547              		.loc 2 196 1 view .LVU716
 2548 0038 7047     		bx	lr
 2549              	.L255:
 2550 003a 00BF     		.align	2
 2551              	.L254:
 2552 003c 10000000 		.word	.LANCHOR5+16
 2553 0040 81030008 		.word	134218625
ARM GAS  /tmp/cczIC8Cx.s 			page 72


 2554              		.cfi_endproc
 2555              	.LFE25:
 2557              		.section	.text.shift_down,"ax",%progbits
 2558              		.align	1
 2559              		.p2align 2,,3
 2560              		.global	shift_down
 2561              		.syntax unified
 2562              		.thumb
 2563              		.thumb_func
 2564              		.fpu fpv4-sp-d16
 2566              	shift_down:
 2567              	.LFB26:
 197:src/console.c **** 
 198:src/console.c **** enum shifts shift_down(void)
 199:src/console.c **** {
 2568              		.loc 2 199 1 is_stmt 1 view -0
 2569              		.cfi_startproc
 2570              		@ args = 0, pretend = 0, frame = 0
 2571              		@ frame_needed = 0, uses_anonymous_args = 0
 2572              		@ link register save eliminated.
 200:src/console.c **** 	return SHIFT_N;
 2573              		.loc 2 200 2 view .LVU718
 201:src/console.c **** }
 2574              		.loc 2 201 1 is_stmt 0 view .LVU719
 2575 0000 0020     		movs	r0, #0
 2576 0002 7047     		bx	lr
 2577              		.cfi_endproc
 2578              	.LFE26:
 2580              		.section	.text.start_key_timer,"ax",%progbits
 2581              		.align	1
 2582              		.p2align 2,,3
 2583              		.global	start_key_timer
 2584              		.syntax unified
 2585              		.thumb
 2586              		.thumb_func
 2587              		.fpu fpv4-sp-d16
 2589              	start_key_timer:
 2590              	.LFB27:
 202:src/console.c **** 
 203:src/console.c **** #ifndef DM42   // No serial operations for DM42
 204:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 205:src/console.c **** /*
 206:src/console.c ****  *  Open a COM port for transmission
 207:src/console.c ****  */
 208:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 209:src/console.c **** {
 210:src/console.c **** 	return 0;
 211:src/console.c **** }
 212:src/console.c **** 
 213:src/console.c **** 
 214:src/console.c **** /*
 215:src/console.c ****  *  Close the COM port after transmission is complete
 216:src/console.c ****  */
 217:src/console.c **** extern void close_port( void )
 218:src/console.c **** {
 219:src/console.c **** }
 220:src/console.c **** 
ARM GAS  /tmp/cczIC8Cx.s 			page 73


 221:src/console.c **** 
 222:src/console.c **** /*
 223:src/console.c ****  *  Output a single byte to the serial
 224:src/console.c ****  */
 225:src/console.c **** void put_byte( unsigned char byte )
 226:src/console.c **** {
 227:src/console.c **** 	report_err(ERR_PROG_BAD);
 228:src/console.c **** }
 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Force buffer flush
 233:src/console.c ****  */
 234:src/console.c **** void flush_comm( void )
 235:src/console.c **** {
 236:src/console.c **** }
 237:src/console.c **** 
 238:src/console.c **** #endif
 239:src/console.c **** #endif
 240:src/console.c **** 
 241:src/console.c **** 
 242:src/console.c **** /*
 243:src/console.c ****  *  Main loop
 244:src/console.c ****  */
 245:src/console.c **** #ifdef DM42
 246:src/console.c **** void start_key_timer (void);
 247:src/console.c **** long int keyticks (void);
 248:src/console.c **** void moveto (int line, int x);
 249:src/console.c **** 
 250:src/console.c **** static long int start_ticks;
 251:src/console.c **** 
 252:src/console.c **** void start_key_timer() {
 2591              		.loc 2 252 24 is_stmt 1 view -0
 2592              		.cfi_startproc
 2593              		@ args = 0, pretend = 0, frame = 0
 2594              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/console.c ****     start_ticks = get_rtc_ticks();
 2595              		.loc 2 253 5 view .LVU721
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 2596              		.loc 2 252 24 is_stmt 0 view .LVU722
 2597 0000 08B5     		push	{r3, lr}
 2598              		.cfi_def_cfa_offset 8
 2599              		.cfi_offset 3, -8
 2600              		.cfi_offset 14, -4
 2601              		.loc 2 253 19 view .LVU723
 2602 0002 024B     		ldr	r3, .L259
 2603 0004 9847     		blx	r3
 2604              	.LVL206:
 2605              		.loc 2 253 17 view .LVU724
 2606 0006 024B     		ldr	r3, .L259+4
 2607 0008 1860     		str	r0, [r3]
 254:src/console.c **** }
 2608              		.loc 2 254 1 view .LVU725
 2609 000a 08BD     		pop	{r3, pc}
 2610              	.L260:
 2611              		.align	2
 2612              	.L259:
ARM GAS  /tmp/cczIC8Cx.s 			page 74


 2613 000c B9040008 		.word	134218937
 2614 0010 00000000 		.word	.LANCHOR8
 2615              		.cfi_endproc
 2616              	.LFE27:
 2618              		.section	.text.keyticks,"ax",%progbits
 2619              		.align	1
 2620              		.p2align 2,,3
 2621              		.global	keyticks
 2622              		.syntax unified
 2623              		.thumb
 2624              		.thumb_func
 2625              		.fpu fpv4-sp-d16
 2627              	keyticks:
 2628              	.LFB28:
 255:src/console.c **** 
 256:src/console.c **** long int keyticks () {
 2629              		.loc 2 256 22 is_stmt 1 view -0
 2630              		.cfi_startproc
 2631              		@ args = 0, pretend = 0, frame = 0
 2632              		@ frame_needed = 0, uses_anonymous_args = 0
 257:src/console.c ****   long int i;
 2633              		.loc 2 257 3 view .LVU727
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2634              		.loc 2 258 3 view .LVU728
 256:src/console.c ****   long int i;
 2635              		.loc 2 256 22 is_stmt 0 view .LVU729
 2636 0000 08B5     		push	{r3, lr}
 2637              		.cfi_def_cfa_offset 8
 2638              		.cfi_offset 3, -8
 2639              		.cfi_offset 14, -4
 2640              		.loc 2 258 8 view .LVU730
 2641 0002 054B     		ldr	r3, .L263
 2642 0004 9847     		blx	r3
 2643              	.LVL207:
 259:src/console.c ****   return i >> 8;
 2644              		.loc 2 259 3 is_stmt 1 view .LVU731
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2645              		.loc 2 258 24 is_stmt 0 view .LVU732
 2646 0006 054B     		ldr	r3, .L263+4
 2647 0008 1B68     		ldr	r3, [r3]
 2648 000a C01A     		subs	r0, r0, r3
 2649              	.LVL208:
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2650              		.loc 2 258 38 view .LVU733
 2651 000c 00EB8000 		add	r0, r0, r0, lsl #2
 260:src/console.c **** }
 2652              		.loc 2 260 1 view .LVU734
 2653 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2654 0014 08BD     		pop	{r3, pc}
 2655              	.L264:
 2656 0016 00BF     		.align	2
 2657              	.L263:
 2658 0018 B9040008 		.word	134218937
 2659 001c 00000000 		.word	.LANCHOR8
 2660              		.cfi_endproc
 2661              	.LFE28:
 2663              		.section	.text.moveto,"ax",%progbits
ARM GAS  /tmp/cczIC8Cx.s 			page 75


 2664              		.align	1
 2665              		.p2align 2,,3
 2666              		.global	moveto
 2667              		.syntax unified
 2668              		.thumb
 2669              		.thumb_func
 2670              		.fpu fpv4-sp-d16
 2672              	moveto:
 2673              	.LVL209:
 2674              	.LFB29:
 261:src/console.c **** 
 262:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 263:src/console.c **** char print_string[22];
 264:src/console.c **** int n_p = 0;
 265:src/console.c **** 
 266:src/console.c **** 
 267:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2675              		.loc 2 267 30 is_stmt 1 view -0
 2676              		.cfi_startproc
 2677              		@ args = 0, pretend = 0, frame = 0
 2678              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2679              		.loc 2 268 3 view .LVU736
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2680              		.loc 2 267 30 is_stmt 0 view .LVU737
 2681 0000 70B5     		push	{r4, r5, r6, lr}
 2682              		.cfi_def_cfa_offset 16
 2683              		.cfi_offset 4, -16
 2684              		.cfi_offset 5, -12
 2685              		.cfi_offset 6, -8
 2686              		.cfi_offset 14, -4
 2687              		.loc 2 268 3 view .LVU738
 2688 0002 0A4D     		ldr	r5, .L267
 2689 0004 0A4B     		ldr	r3, .L267+4
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2690              		.loc 2 267 30 view .LVU739
 2691 0006 0246     		mov	r2, r0
 2692 0008 0C46     		mov	r4, r1
 2693              		.loc 2 268 3 view .LVU740
 2694 000a A86B     		ldr	r0, [r5, #56]
 2695              	.LVL210:
 2696              		.loc 2 268 3 view .LVU741
 2697 000c 511E     		subs	r1, r2, #1
 2698              	.LVL211:
 2699              		.loc 2 268 3 view .LVU742
 2700 000e 9847     		blx	r3
 2701              	.LVL212:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2702              		.loc 2 269 3 is_stmt 1 view .LVU743
 2703 0010 A86B     		ldr	r0, [r5, #56]
 2704 0012 084B     		ldr	r3, .L267+8
 2705              		.loc 2 269 33 is_stmt 0 view .LVU744
 2706 0014 0168     		ldr	r1, [r0]
 2707              		.loc 2 269 3 view .LVU745
 2708 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2709              		.loc 2 269 33 view .LVU746
 2710 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
ARM GAS  /tmp/cczIC8Cx.s 			page 76


 2711              		.loc 2 269 43 view .LVU747
 2712 001c 013C     		subs	r4, r4, #1
 2713              	.LVL213:
 2714              		.loc 2 269 40 view .LVU748
 2715 001e 04FB01F1 		mul	r1, r4, r1
 2716              		.loc 2 269 3 view .LVU749
 2717 0022 1431     		adds	r1, r1, #20
 270:src/console.c **** }
 2718              		.loc 2 270 1 view .LVU750
 2719 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2720              		.cfi_restore 14
 2721              		.cfi_restore 6
 2722              		.cfi_restore 5
 2723              		.cfi_restore 4
 2724              		.cfi_def_cfa_offset 0
 2725              	.LVL214:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2726              		.loc 2 269 3 view .LVU751
 2727 0028 1847     		bx	r3	@ indirect register sibling call
 2728              	.LVL215:
 2729              	.L268:
 2730 002a 00BF     		.align	2
 2731              	.L267:
 2732 002c 00200010 		.word	268443648
 2733 0030 69020008 		.word	134218345
 2734 0034 6D020008 		.word	134218349
 2735              		.cfi_endproc
 2736              	.LFE29:
 2738              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2739              		.align	2
 2740              	.LC11:
 2741 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2741      673A2025 
 2741      34692C25 
 2741      346900
 2742              		.section	.text.print_debug,"ax",%progbits
 2743              		.align	1
 2744              		.p2align 2,,3
 2745              		.global	print_debug
 2746              		.syntax unified
 2747              		.thumb
 2748              		.thumb_func
 2749              		.fpu fpv4-sp-d16
 2751              	print_debug:
 2752              	.LVL216:
 2753              	.LFB30:
 271:src/console.c **** 
 272:src/console.c **** void print_debug (int i, int j) {
 2754              		.loc 2 272 33 is_stmt 1 view -0
 2755              		.cfi_startproc
 2756              		@ args = 0, pretend = 0, frame = 8
 2757              		@ frame_needed = 0, uses_anonymous_args = 0
 273:src/console.c ****   strcpy( print_string, spaces );
 2758              		.loc 2 273 3 view .LVU753
 272:src/console.c ****   strcpy( print_string, spaces );
 2759              		.loc 2 272 33 is_stmt 0 view .LVU754
 2760 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/cczIC8Cx.s 			page 77


 2761              		.cfi_def_cfa_offset 24
 2762              		.cfi_offset 4, -24
 2763              		.cfi_offset 5, -20
 2764              		.cfi_offset 6, -16
 2765              		.cfi_offset 7, -12
 2766              		.cfi_offset 8, -8
 2767              		.cfi_offset 14, -4
 2768              		.loc 2 273 3 view .LVU755
 2769 0004 174C     		ldr	r4, .L271
 2770 0006 184F     		ldr	r7, .L271+4
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 275:src/console.c ****   moveto (3, 1);
 276:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2771              		.loc 2 276 3 view .LVU756
 2772 0008 184E     		ldr	r6, .L271+8
 2773 000a 194D     		ldr	r5, .L271+12
 277:src/console.c ****   lcd_refresh();
 2774              		.loc 2 277 3 view .LVU757
 2775 000c DFF86C80 		ldr	r8, .L271+24
 272:src/console.c ****   strcpy( print_string, spaces );
 2776              		.loc 2 272 33 view .LVU758
 2777 0010 82B0     		sub	sp, sp, #8
 2778              		.cfi_def_cfa_offset 32
 272:src/console.c ****   strcpy( print_string, spaces );
 2779              		.loc 2 272 33 view .LVU759
 2780 0012 0190     		str	r0, [sp, #4]
 2781 0014 0091     		str	r1, [sp]
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2782              		.loc 2 273 3 view .LVU760
 2783 0016 2046     		mov	r0, r4
 2784              	.LVL217:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2785              		.loc 2 273 3 view .LVU761
 2786 0018 3946     		mov	r1, r7
 2787              	.LVL218:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2788              		.loc 2 273 3 view .LVU762
 2789 001a FFF7FEFF 		bl	strcpy
 2790              	.LVL219:
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2791              		.loc 2 274 3 is_stmt 1 view .LVU763
 2792 001e DDE90032 		ldrd	r3, r2, [sp]
 2793 0022 1449     		ldr	r1, .L271+16
 2794 0024 2046     		mov	r0, r4
 2795 0026 FFF7FEFF 		bl	sprintf
 2796              	.LVL220:
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2797              		.loc 2 275 3 view .LVU764
 2798 002a 0121     		movs	r1, #1
 2799 002c 0320     		movs	r0, #3
 2800 002e FFF7FEFF 		bl	moveto
 2801              	.LVL221:
 276:src/console.c ****   lcd_refresh();
 2802              		.loc 2 276 3 view .LVU765
 2803 0032 2146     		mov	r1, r4
 2804 0034 B06B     		ldr	r0, [r6, #56]
 2805 0036 A847     		blx	r5
ARM GAS  /tmp/cczIC8Cx.s 			page 78


 2806              	.LVL222:
 2807              		.loc 2 277 3 view .LVU766
 2808 0038 C047     		blx	r8
 2809              	.LVL223:
 278:src/console.c ****   sys_delay (1000);
 2810              		.loc 2 278 3 view .LVU767
 2811 003a 0F4B     		ldr	r3, .L271+20
 2812 003c 4FF47A70 		mov	r0, #1000
 2813 0040 9847     		blx	r3
 2814              	.LVL224:
 279:src/console.c ****   /* wait_for_key_press(); */
 280:src/console.c ****   //  key_pop_all();
 281:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 282:src/console.c ****   // key_pop_all();
 283:src/console.c ****   strcpy( print_string, spaces );
 2815              		.loc 2 283 3 view .LVU768
 2816 0042 3946     		mov	r1, r7
 2817 0044 2046     		mov	r0, r4
 2818 0046 FFF7FEFF 		bl	strcpy
 2819              	.LVL225:
 284:src/console.c ****   moveto (3, 1);
 2820              		.loc 2 284 3 view .LVU769
 2821 004a 0121     		movs	r1, #1
 2822 004c 0320     		movs	r0, #3
 2823 004e FFF7FEFF 		bl	moveto
 2824              	.LVL226:
 285:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2825              		.loc 2 285 3 view .LVU770
 2826 0052 B06B     		ldr	r0, [r6, #56]
 2827 0054 2146     		mov	r1, r4
 2828 0056 A847     		blx	r5
 2829              	.LVL227:
 286:src/console.c ****   lcd_refresh();
 2830              		.loc 2 286 3 view .LVU771
 2831 0058 4346     		mov	r3, r8
 287:src/console.c ****   // while (key_empty()<=0);; // wait for release
 288:src/console.c ****   // key_pop_all();
 289:src/console.c **** }
 2832              		.loc 2 289 1 is_stmt 0 view .LVU772
 2833 005a 02B0     		add	sp, sp, #8
 2834              		.cfi_def_cfa_offset 24
 2835              	.LVL228:
 2836              		.loc 2 289 1 view .LVU773
 2837              		@ sp needed
 2838 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2839              		.cfi_restore 14
 2840              		.cfi_restore 8
 2841              		.cfi_restore 7
 2842              		.cfi_restore 6
 2843              		.cfi_restore 5
 2844              		.cfi_restore 4
 2845              		.cfi_def_cfa_offset 0
 2846              	.LVL229:
 286:src/console.c ****   lcd_refresh();
 2847              		.loc 2 286 3 view .LVU774
 2848 0060 1847     		bx	r3	@ indirect register sibling call
 2849              	.LVL230:
ARM GAS  /tmp/cczIC8Cx.s 			page 79


 2850              	.L272:
 2851 0062 00BF     		.align	2
 2852              	.L271:
 2853 0064 00000000 		.word	print_string
 2854 0068 00000000 		.word	.LANCHOR9
 2855 006c 00200010 		.word	268443648
 2856 0070 B1020008 		.word	134218417
 2857 0074 00000000 		.word	.LC11
 2858 0078 05040008 		.word	134218757
 2859 007c 31020008 		.word	134218289
 2860              		.cfi_endproc
 2861              	.LFE30:
 2863              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2864              		.align	2
 2865              	.LC12:
 2866 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2866      692C2531 
 2866      337300
 2867              		.section	.text.print_debug2,"ax",%progbits
 2868              		.align	1
 2869              		.p2align 2,,3
 2870              		.global	print_debug2
 2871              		.syntax unified
 2872              		.thumb
 2873              		.thumb_func
 2874              		.fpu fpv4-sp-d16
 2876              	print_debug2:
 2877              	.LVL231:
 2878              	.LFB31:
 290:src/console.c **** 
 291:src/console.c **** void print_debug2 (int i, char* j) {
 2879              		.loc 2 291 36 is_stmt 1 view -0
 2880              		.cfi_startproc
 2881              		@ args = 0, pretend = 0, frame = 8
 2882              		@ frame_needed = 0, uses_anonymous_args = 0
 292:src/console.c ****   strcpy( print_string, spaces );
 2883              		.loc 2 292 3 view .LVU776
 291:src/console.c ****   strcpy( print_string, spaces );
 2884              		.loc 2 291 36 is_stmt 0 view .LVU777
 2885 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2886              		.cfi_def_cfa_offset 24
 2887              		.cfi_offset 4, -24
 2888              		.cfi_offset 5, -20
 2889              		.cfi_offset 6, -16
 2890              		.cfi_offset 7, -12
 2891              		.cfi_offset 8, -8
 2892              		.cfi_offset 14, -4
 2893              		.loc 2 292 3 view .LVU778
 2894 0004 174C     		ldr	r4, .L275
 2895 0006 184F     		ldr	r7, .L275+4
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 294:src/console.c ****   moveto (3, 1);
 295:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2896              		.loc 2 295 3 view .LVU779
 2897 0008 184E     		ldr	r6, .L275+8
 2898 000a 194D     		ldr	r5, .L275+12
 296:src/console.c ****   lcd_refresh();
ARM GAS  /tmp/cczIC8Cx.s 			page 80


 2899              		.loc 2 296 3 view .LVU780
 2900 000c DFF86C80 		ldr	r8, .L275+24
 291:src/console.c ****   strcpy( print_string, spaces );
 2901              		.loc 2 291 36 view .LVU781
 2902 0010 82B0     		sub	sp, sp, #8
 2903              		.cfi_def_cfa_offset 32
 291:src/console.c ****   strcpy( print_string, spaces );
 2904              		.loc 2 291 36 view .LVU782
 2905 0012 0190     		str	r0, [sp, #4]
 2906 0014 0091     		str	r1, [sp]
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2907              		.loc 2 292 3 view .LVU783
 2908 0016 2046     		mov	r0, r4
 2909              	.LVL232:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2910              		.loc 2 292 3 view .LVU784
 2911 0018 3946     		mov	r1, r7
 2912              	.LVL233:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2913              		.loc 2 292 3 view .LVU785
 2914 001a FFF7FEFF 		bl	strcpy
 2915              	.LVL234:
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2916              		.loc 2 293 3 is_stmt 1 view .LVU786
 2917 001e DDE90032 		ldrd	r3, r2, [sp]
 2918 0022 1449     		ldr	r1, .L275+16
 2919 0024 2046     		mov	r0, r4
 2920 0026 FFF7FEFF 		bl	sprintf
 2921              	.LVL235:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2922              		.loc 2 294 3 view .LVU787
 2923 002a 0121     		movs	r1, #1
 2924 002c 0320     		movs	r0, #3
 2925 002e FFF7FEFF 		bl	moveto
 2926              	.LVL236:
 295:src/console.c ****   lcd_refresh();
 2927              		.loc 2 295 3 view .LVU788
 2928 0032 2146     		mov	r1, r4
 2929 0034 B06B     		ldr	r0, [r6, #56]
 2930 0036 A847     		blx	r5
 2931              	.LVL237:
 2932              		.loc 2 296 3 view .LVU789
 2933 0038 C047     		blx	r8
 2934              	.LVL238:
 297:src/console.c ****   sys_delay (2500);
 2935              		.loc 2 297 3 view .LVU790
 2936 003a 0F4B     		ldr	r3, .L275+20
 2937 003c 40F6C410 		movw	r0, #2500
 2938 0040 9847     		blx	r3
 2939              	.LVL239:
 298:src/console.c ****   /* wait_for_key_press(); */
 299:src/console.c ****   //  key_pop_all();
 300:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 301:src/console.c ****   // key_pop_all();
 302:src/console.c ****   strcpy( print_string, spaces );
 2940              		.loc 2 302 3 view .LVU791
 2941 0042 3946     		mov	r1, r7
ARM GAS  /tmp/cczIC8Cx.s 			page 81


 2942 0044 2046     		mov	r0, r4
 2943 0046 FFF7FEFF 		bl	strcpy
 2944              	.LVL240:
 303:src/console.c ****   moveto (3, 1);
 2945              		.loc 2 303 3 view .LVU792
 2946 004a 0121     		movs	r1, #1
 2947 004c 0320     		movs	r0, #3
 2948 004e FFF7FEFF 		bl	moveto
 2949              	.LVL241:
 304:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2950              		.loc 2 304 3 view .LVU793
 2951 0052 B06B     		ldr	r0, [r6, #56]
 2952 0054 2146     		mov	r1, r4
 2953 0056 A847     		blx	r5
 2954              	.LVL242:
 305:src/console.c ****   lcd_refresh();
 2955              		.loc 2 305 3 view .LVU794
 2956 0058 4346     		mov	r3, r8
 306:src/console.c ****   // while (key_empty()<=0);; // wait for release
 307:src/console.c ****   // key_pop_all();
 308:src/console.c **** }
 2957              		.loc 2 308 1 is_stmt 0 view .LVU795
 2958 005a 02B0     		add	sp, sp, #8
 2959              		.cfi_def_cfa_offset 24
 2960              	.LVL243:
 2961              		.loc 2 308 1 view .LVU796
 2962              		@ sp needed
 2963 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2964              		.cfi_restore 14
 2965              		.cfi_restore 8
 2966              		.cfi_restore 7
 2967              		.cfi_restore 6
 2968              		.cfi_restore 5
 2969              		.cfi_restore 4
 2970              		.cfi_def_cfa_offset 0
 2971              	.LVL244:
 305:src/console.c ****   lcd_refresh();
 2972              		.loc 2 305 3 view .LVU797
 2973 0060 1847     		bx	r3	@ indirect register sibling call
 2974              	.LVL245:
 2975              	.L276:
 2976 0062 00BF     		.align	2
 2977              	.L275:
 2978 0064 00000000 		.word	print_string
 2979 0068 00000000 		.word	.LANCHOR9
 2980 006c 00200010 		.word	268443648
 2981 0070 B1020008 		.word	134218417
 2982 0074 00000000 		.word	.LC12
 2983 0078 05040008 		.word	134218757
 2984 007c 31020008 		.word	134218289
 2985              		.cfi_endproc
 2986              	.LFE31:
 2988              		.section	.text.do_now,"ax",%progbits
 2989              		.align	1
 2990              		.p2align 2,,3
 2991              		.global	do_now
 2992              		.syntax unified
ARM GAS  /tmp/cczIC8Cx.s 			page 82


 2993              		.thumb
 2994              		.thumb_func
 2995              		.fpu fpv4-sp-d16
 2997              	do_now:
 2998              	.LVL246:
 2999              	.LFB32:
 309:src/console.c **** 
 310:src/console.c **** void do_now (int key, int shift) { // key and shift are like the output of remapped
 3000              		.loc 2 310 34 is_stmt 1 view -0
 3001              		.cfi_startproc
 3002              		@ args = 0, pretend = 0, frame = 8
 3003              		@ frame_needed = 0, uses_anonymous_args = 0
 3004              		@ link register save eliminated.
 311:src/console.c ****   struct _ndmap temp;
 3005              		.loc 2 311 3 view .LVU799
 312:src/console.c ****   temp.key_34s = key;
 3006              		.loc 2 312 3 view .LVU800
 310:src/console.c ****   struct _ndmap temp;
 3007              		.loc 2 310 34 is_stmt 0 view .LVU801
 3008 0000 82B0     		sub	sp, sp, #8
 3009              		.cfi_def_cfa_offset 8
 313:src/console.c ****   temp.shift = shift;
 314:src/console.c ****   process_keycode_with_shift (temp);
 3010              		.loc 2 314 3 view .LVU802
 3011 0002 02AB     		add	r3, sp, #8
 312:src/console.c ****   temp.shift = shift;
 3012              		.loc 2 312 16 view .LVU803
 3013 0004 8DF80000 		strb	r0, [sp]
 313:src/console.c ****   temp.shift = shift;
 3014              		.loc 2 313 3 is_stmt 1 view .LVU804
 313:src/console.c ****   temp.shift = shift;
 3015              		.loc 2 313 14 is_stmt 0 view .LVU805
 3016 0008 0191     		str	r1, [sp, #4]
 3017              		.loc 2 314 3 is_stmt 1 view .LVU806
 3018 000a 13E90300 		ldmdb	r3, {r0, r1}
 3019              	.LVL247:
 315:src/console.c **** }
 3020              		.loc 2 315 1 is_stmt 0 view .LVU807
 3021 000e 02B0     		add	sp, sp, #8
 3022              		.cfi_def_cfa_offset 0
 3023              		@ sp needed
 314:src/console.c **** }
 3024              		.loc 2 314 3 view .LVU808
 3025 0010 FFF7FEBF 		b	process_keycode_with_shift
 3026              	.LVL248:
 314:src/console.c **** }
 3027              		.loc 2 314 3 view .LVU809
 3028              		.cfi_endproc
 3029              	.LFE32:
 3031              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 3032              		.align	2
 3033              	.LC13:
 3034 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 3034      502F7770 
 3034      3334735F 
 3034      68656C70 
 3034      2E68746D 
ARM GAS  /tmp/cczIC8Cx.s 			page 83


 3035              		.section	.text.do_multi,"ax",%progbits
 3036              		.align	1
 3037              		.p2align 2,,3
 3038              		.global	do_multi
 3039              		.syntax unified
 3040              		.thumb
 3041              		.thumb_func
 3042              		.fpu fpv4-sp-d16
 3044              	do_multi:
 3045              	.LVL249:
 3046              	.LFB33:
 316:src/console.c **** 
 317:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 3047              		.loc 2 317 42 is_stmt 1 view -0
 3048              		.cfi_startproc
 3049              		@ args = 0, pretend = 0, frame = 16
 3050              		@ frame_needed = 0, uses_anonymous_args = 0
 3051              		.loc 2 317 42 is_stmt 0 view .LVU811
 3052 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3053              		.cfi_def_cfa_offset 20
 3054              		.cfi_offset 4, -20
 3055              		.cfi_offset 5, -16
 3056              		.cfi_offset 6, -12
 3057              		.cfi_offset 7, -8
 3058              		.cfi_offset 14, -4
 3059 0002 85B0     		sub	sp, sp, #20
 3060              		.cfi_def_cfa_offset 40
 3061              	.LVL250:
 318:src/console.c ****   switch(r.shift) {
 3062              		.loc 2 318 3 is_stmt 1 view .LVU812
 317:src/console.c ****   switch(r.shift) {
 3063              		.loc 2 317 42 is_stmt 0 view .LVU813
 3064 0004 6C46     		mov	r4, sp
 3065 0006 931E     		subs	r3, r2, #2
 3066 0008 84E80600 		stm	r4, {r1, r2}
 3067              	.LVL251:
 317:src/console.c ****   switch(r.shift) {
 3068              		.loc 2 317 42 view .LVU814
 3069 000c 0546     		mov	r5, r0
 3070 000e 0D2B     		cmp	r3, #13
 3071 0010 20D8     		bhi	.L280
 3072 0012 DFE803F0 		tbb	[pc, r3]
 3073              	.L282:
 3074 0016 2C       		.byte	(.L295-.L282)/2
 3075 0017 37       		.byte	(.L294-.L282)/2
 3076 0018 42       		.byte	(.L293-.L282)/2
 3077 0019 4D       		.byte	(.L292-.L282)/2
 3078 001a 58       		.byte	(.L291-.L282)/2
 3079 001b 63       		.byte	(.L290-.L282)/2
 3080 001c 6E       		.byte	(.L289-.L282)/2
 3081 001d 78       		.byte	(.L288-.L282)/2
 3082 001e 83       		.byte	(.L287-.L282)/2
 3083 001f 8D       		.byte	(.L286-.L282)/2
 3084 0020 97       		.byte	(.L285-.L282)/2
 3085 0021 AA       		.byte	(.L284-.L282)/2
 3086 0022 B4       		.byte	(.L283-.L282)/2
 3087 0023 07       		.byte	(.L281-.L282)/2
ARM GAS  /tmp/cczIC8Cx.s 			page 84


 3088              		.p2align 1
 3089              	.L281:
 319:src/console.c ****   /* case LASTX: // Last x via RCL L */
 320:src/console.c ****   /*   do_now (K11, 0); // RCL */
 321:src/console.c ****   /*   do_now (K_RELEASE,0); // release */
 322:src/console.c ****   /*   do_now (K15,0); // TAN key */
 323:src/console.c ****   /*   r.key_34s = K_RELEASE; */
 324:src/console.c ****   /*   r.shift = 0; // set up for release; */
 325:src/console.c ****   /*   break; */
 326:src/console.c ****   case ONSTO: // flash_backup()
 327:src/console.c ****     flash_backup(OP_SAVE);
 328:src/console.c ****     reset_shift();
 329:src/console.c ****     r = no_key;
 330:src/console.c ****     break;
 331:src/console.c ****   case ONRCL: // flash_restore()
 332:src/console.c ****     flash_restore(OP_LOAD);
 333:src/console.c ****     reset_shift();
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
 336:src/console.c ****   case WRLIB: // save library file
 337:src/console.c ****     save_lib_file(1);
 338:src/console.c ****     reset_shift();
 339:src/console.c ****     r = no_key;
 340:src/console.c ****     break;
 341:src/console.c ****   case LLIB: // load library file
 342:src/console.c ****     load_lib_file(1);
 343:src/console.c ****     reset_shift();
 344:src/console.c ****     r = no_key;
 345:src/console.c ****     break;
 346:src/console.c ****   case WRTST: // save state file
 347:src/console.c ****     save_ram_file(1);
 348:src/console.c ****     reset_shift();
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case LDST:
 352:src/console.c ****     load_ram_file(1);
 353:src/console.c ****     reset_shift();
 354:src/console.c ****     r = no_key;
 355:src/console.c ****     break;
 356:src/console.c ****   case LDPRG:
 357:src/console.c ****     load_prog_file();
 358:src/console.c ****     reset_shift();
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case SVPRG:
 362:src/console.c ****     save_prog_file();
 363:src/console.c ****     reset_shift();
 364:src/console.c ****     r = no_key;
 365:src/console.c ****     break;
 366:src/console.c ****   case HELP:
 367:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 368:src/console.c ****     reset_shift();
 369:src/console.c ****     r = no_key;
 370:src/console.c ****     break;
 371:src/console.c ****   case DOTS:
 372:src/console.c ****     do_all_dots();
 373:src/console.c ****     reset_shift();
ARM GAS  /tmp/cczIC8Cx.s 			page 85


 374:src/console.c ****     r = no_key;
 375:src/console.c ****     break;
 376:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 377:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 378:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 379:src/console.c ****     r = no_key;
 380:src/console.c ****     break;
 381:src/console.c ****   case DEFMEN:
 382:src/console.c ****     toggle_default_menu();
 383:src/console.c ****     reset_shift();
 384:src/console.c ****     r = no_key;
 385:src/console.c ****     break;
 386:src/console.c ****   case SETUMEN:
 387:src/console.c ****     build_user_menu();
 388:src/console.c ****     reset_shift();
 389:src/console.c ****     r = no_key;;
 390:src/console.c ****     break;
 391:src/console.c ****   case KCPX:
 392:src/console.c ****     if (C_LOCKED) {
 3090              		.loc 2 392 5 is_stmt 1 view .LVU815
 3091              		.loc 2 392 9 is_stmt 0 view .LVU816
 3092 0024 644B     		ldr	r3, .L310
 3093 0026 1B68     		ldr	r3, [r3]
 3094 0028 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 3095              		.loc 2 392 8 view .LVU817
 3096 002c 03F04103 		and	r3, r3, #65
 3097 0030 412B     		cmp	r3, #65
 3098 0032 40F0AF80 		bne	.L297
 393:src/console.c ****       set_menu(M_C_Lock);
 3099              		.loc 2 393 7 is_stmt 1 view .LVU818
 3100              	.LVL252:
 3101              	.LBB120:
 3102              	.LBI120:
 108:src/menu.c    ****   menu_name m = current_menu;
 3103              		.loc 1 108 6 view .LVU819
 3104              	.LBB121:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3105              		.loc 1 109 3 view .LVU820
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3106              		.loc 1 109 13 is_stmt 0 view .LVU821
 3107 0036 614A     		ldr	r2, .L310+4
 3108 0038 92F90030 		ldrsb	r3, [r2]
 3109              	.LVL253:
 110:src/menu.c    ****     current_menu = default_menu;
 3110              		.loc 1 110 3 is_stmt 1 view .LVU822
 110:src/menu.c    ****     current_menu = default_menu;
 3111              		.loc 1 110 6 is_stmt 0 view .LVU823
 3112 003c 112B     		cmp	r3, #17
 3113 003e 00F0B580 		beq	.L309
 113:src/menu.c    ****     current_menu = last_menu;
 3114              		.loc 1 113 8 is_stmt 1 view .LVU824
 117:src/menu.c    ****   }
 3115              		.loc 1 117 5 view .LVU825
 117:src/menu.c    ****   }
 3116              		.loc 1 117 18 is_stmt 0 view .LVU826
 3117 0042 1121     		movs	r1, #17
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
ARM GAS  /tmp/cczIC8Cx.s 			page 86


 3118              		.loc 1 119 6 view .LVU827
 3119 0044 092B     		cmp	r3, #9
 117:src/menu.c    ****   }
 3120              		.loc 1 117 18 view .LVU828
 3121 0046 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3122              		.loc 1 119 3 is_stmt 1 view .LVU829
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3123              		.loc 1 119 6 is_stmt 0 view .LVU830
 3124 0048 02D0     		beq	.L300
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3125              		.loc 1 119 23 view .LVU831
 3126 004a 102B     		cmp	r3, #16
 3127 004c 40F0B180 		bne	.L299
 3128              	.L300:
 3129              	.LVL254:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3130              		.loc 1 119 23 view .LVU832
 3131              	.LBE121:
 3132              	.LBE120:
 394:src/console.c ****       reset_shift();
 3133              		.loc 2 394 7 is_stmt 1 view .LVU833
 3134 0050 FFF7FEFF 		bl	reset_shift
 3135              	.LVL255:
 3136              	.L280:
 395:src/console.c ****     }
 396:src/console.c ****     else {
 397:src/console.c ****       do_now (K_CMPLX, 0);
 398:src/console.c ****       do_now (K_RELEASE, 0);
 399:src/console.c ****       r = no_key;
 400:src/console.c ****     }
 401:src/console.c ****   default:
 402:src/console.c ****     r = no_key;
 3137              		.loc 2 402 5 view .LVU834
 3138              		.loc 2 402 7 is_stmt 0 view .LVU835
 3139 0054 5A4B     		ldr	r3, .L310+8
 3140 0056 93E80300 		ldm	r3, {r0, r1}
 3141 005a 84E80300 		stm	r4, {r0, r1}
 3142              	.LVL256:
 3143              	.L296:
 403:src/console.c ****   }
 404:src/console.c ****   return r;
 3144              		.loc 2 404 3 is_stmt 1 view .LVU836
 3145              		.loc 2 404 10 is_stmt 0 view .LVU837
 3146 005e 0191     		str	r1, [sp, #4]
 3147 0060 94E80300 		ldm	r4, {r0, r1}
 3148              	.LVL257:
 3149              		.loc 2 404 10 view .LVU838
 3150 0064 85E80300 		stm	r5, {r0, r1}
 405:src/console.c **** }
 3151              		.loc 2 405 1 view .LVU839
 3152 0068 2846     		mov	r0, r5
 3153 006a 05B0     		add	sp, sp, #20
 3154              		.cfi_remember_state
 3155              		.cfi_def_cfa_offset 20
 3156              		@ sp needed
 3157 006c F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/cczIC8Cx.s 			page 87


 3158              	.LVL258:
 3159              	.L295:
 3160              		.cfi_restore_state
 327:src/console.c ****     reset_shift();
 3161              		.loc 2 327 5 is_stmt 1 view .LVU840
 3162 006e AD20     		movs	r0, #173
 3163              	.LVL259:
 327:src/console.c ****     reset_shift();
 3164              		.loc 2 327 5 is_stmt 0 view .LVU841
 3165 0070 FFF7FEFF 		bl	flash_backup
 3166              	.LVL260:
 328:src/console.c ****     r = no_key;
 3167              		.loc 2 328 5 is_stmt 1 view .LVU842
 3168 0074 FFF7FEFF 		bl	reset_shift
 3169              	.LVL261:
 329:src/console.c ****     break;
 3170              		.loc 2 329 5 view .LVU843
 329:src/console.c ****     break;
 3171              		.loc 2 329 7 is_stmt 0 view .LVU844
 3172 0078 514B     		ldr	r3, .L310+8
 3173 007a 93E80300 		ldm	r3, {r0, r1}
 3174 007e 84E80300 		stm	r4, {r0, r1}
 3175              	.LVL262:
 330:src/console.c ****   case ONRCL: // flash_restore()
 3176              		.loc 2 330 5 is_stmt 1 view .LVU845
 3177 0082 ECE7     		b	.L296
 3178              	.LVL263:
 3179              	.L294:
 332:src/console.c ****     reset_shift();
 3180              		.loc 2 332 5 view .LVU846
 3181 0084 AE20     		movs	r0, #174
 3182              	.LVL264:
 332:src/console.c ****     reset_shift();
 3183              		.loc 2 332 5 is_stmt 0 view .LVU847
 3184 0086 FFF7FEFF 		bl	flash_restore
 3185              	.LVL265:
 333:src/console.c ****     r = no_key;
 3186              		.loc 2 333 5 is_stmt 1 view .LVU848
 3187 008a FFF7FEFF 		bl	reset_shift
 3188              	.LVL266:
 334:src/console.c ****     break;
 3189              		.loc 2 334 5 view .LVU849
 334:src/console.c ****     break;
 3190              		.loc 2 334 7 is_stmt 0 view .LVU850
 3191 008e 4C4B     		ldr	r3, .L310+8
 3192 0090 93E80300 		ldm	r3, {r0, r1}
 3193 0094 84E80300 		stm	r4, {r0, r1}
 3194              	.LVL267:
 335:src/console.c ****   case WRLIB: // save library file
 3195              		.loc 2 335 5 is_stmt 1 view .LVU851
 3196 0098 E1E7     		b	.L296
 3197              	.LVL268:
 3198              	.L293:
 337:src/console.c ****     reset_shift();
 3199              		.loc 2 337 5 view .LVU852
 3200 009a 0120     		movs	r0, #1
 3201              	.LVL269:
ARM GAS  /tmp/cczIC8Cx.s 			page 88


 337:src/console.c ****     reset_shift();
 3202              		.loc 2 337 5 is_stmt 0 view .LVU853
 3203 009c FFF7FEFF 		bl	save_lib_file
 3204              	.LVL270:
 338:src/console.c ****     r = no_key;
 3205              		.loc 2 338 5 is_stmt 1 view .LVU854
 3206 00a0 FFF7FEFF 		bl	reset_shift
 3207              	.LVL271:
 339:src/console.c ****     break;
 3208              		.loc 2 339 5 view .LVU855
 339:src/console.c ****     break;
 3209              		.loc 2 339 7 is_stmt 0 view .LVU856
 3210 00a4 464B     		ldr	r3, .L310+8
 3211 00a6 93E80300 		ldm	r3, {r0, r1}
 3212 00aa 84E80300 		stm	r4, {r0, r1}
 3213              	.LVL272:
 340:src/console.c ****   case LLIB: // load library file
 3214              		.loc 2 340 5 is_stmt 1 view .LVU857
 3215 00ae D6E7     		b	.L296
 3216              	.LVL273:
 3217              	.L292:
 342:src/console.c ****     reset_shift();
 3218              		.loc 2 342 5 view .LVU858
 3219 00b0 0120     		movs	r0, #1
 3220              	.LVL274:
 342:src/console.c ****     reset_shift();
 3221              		.loc 2 342 5 is_stmt 0 view .LVU859
 3222 00b2 FFF7FEFF 		bl	load_lib_file
 3223              	.LVL275:
 343:src/console.c ****     r = no_key;
 3224              		.loc 2 343 5 is_stmt 1 view .LVU860
 3225 00b6 FFF7FEFF 		bl	reset_shift
 3226              	.LVL276:
 344:src/console.c ****     break;
 3227              		.loc 2 344 5 view .LVU861
 344:src/console.c ****     break;
 3228              		.loc 2 344 7 is_stmt 0 view .LVU862
 3229 00ba 414B     		ldr	r3, .L310+8
 3230 00bc 93E80300 		ldm	r3, {r0, r1}
 3231 00c0 84E80300 		stm	r4, {r0, r1}
 3232              	.LVL277:
 345:src/console.c ****   case WRTST: // save state file
 3233              		.loc 2 345 5 is_stmt 1 view .LVU863
 3234 00c4 CBE7     		b	.L296
 3235              	.LVL278:
 3236              	.L291:
 347:src/console.c ****     reset_shift();
 3237              		.loc 2 347 5 view .LVU864
 3238 00c6 0120     		movs	r0, #1
 3239              	.LVL279:
 347:src/console.c ****     reset_shift();
 3240              		.loc 2 347 5 is_stmt 0 view .LVU865
 3241 00c8 FFF7FEFF 		bl	save_ram_file
 3242              	.LVL280:
 348:src/console.c ****     r = no_key;
 3243              		.loc 2 348 5 is_stmt 1 view .LVU866
 3244 00cc FFF7FEFF 		bl	reset_shift
ARM GAS  /tmp/cczIC8Cx.s 			page 89


 3245              	.LVL281:
 349:src/console.c ****     break;
 3246              		.loc 2 349 5 view .LVU867
 349:src/console.c ****     break;
 3247              		.loc 2 349 7 is_stmt 0 view .LVU868
 3248 00d0 3B4B     		ldr	r3, .L310+8
 3249 00d2 93E80300 		ldm	r3, {r0, r1}
 3250 00d6 84E80300 		stm	r4, {r0, r1}
 3251              	.LVL282:
 350:src/console.c ****   case LDST:
 3252              		.loc 2 350 5 is_stmt 1 view .LVU869
 3253 00da C0E7     		b	.L296
 3254              	.LVL283:
 3255              	.L290:
 352:src/console.c ****     reset_shift();
 3256              		.loc 2 352 5 view .LVU870
 3257 00dc 0120     		movs	r0, #1
 3258              	.LVL284:
 352:src/console.c ****     reset_shift();
 3259              		.loc 2 352 5 is_stmt 0 view .LVU871
 3260 00de FFF7FEFF 		bl	load_ram_file
 3261              	.LVL285:
 353:src/console.c ****     r = no_key;
 3262              		.loc 2 353 5 is_stmt 1 view .LVU872
 3263 00e2 FFF7FEFF 		bl	reset_shift
 3264              	.LVL286:
 354:src/console.c ****     break;
 3265              		.loc 2 354 5 view .LVU873
 354:src/console.c ****     break;
 3266              		.loc 2 354 7 is_stmt 0 view .LVU874
 3267 00e6 364B     		ldr	r3, .L310+8
 3268 00e8 93E80300 		ldm	r3, {r0, r1}
 3269 00ec 84E80300 		stm	r4, {r0, r1}
 3270              	.LVL287:
 355:src/console.c ****   case LDPRG:
 3271              		.loc 2 355 5 is_stmt 1 view .LVU875
 3272 00f0 B5E7     		b	.L296
 3273              	.LVL288:
 3274              	.L289:
 357:src/console.c ****     reset_shift();
 3275              		.loc 2 357 5 view .LVU876
 3276 00f2 FFF7FEFF 		bl	load_prog_file
 3277              	.LVL289:
 358:src/console.c ****     r = no_key;
 3278              		.loc 2 358 5 view .LVU877
 3279 00f6 FFF7FEFF 		bl	reset_shift
 3280              	.LVL290:
 359:src/console.c ****     break;
 3281              		.loc 2 359 5 view .LVU878
 359:src/console.c ****     break;
 3282              		.loc 2 359 7 is_stmt 0 view .LVU879
 3283 00fa 314B     		ldr	r3, .L310+8
 3284 00fc 93E80300 		ldm	r3, {r0, r1}
 3285 0100 84E80300 		stm	r4, {r0, r1}
 3286              	.LVL291:
 360:src/console.c ****   case SVPRG:
 3287              		.loc 2 360 5 is_stmt 1 view .LVU880
ARM GAS  /tmp/cczIC8Cx.s 			page 90


 3288 0104 ABE7     		b	.L296
 3289              	.LVL292:
 3290              	.L288:
 367:src/console.c ****     reset_shift();
 3291              		.loc 2 367 5 view .LVU881
 3292 0106 2F4B     		ldr	r3, .L310+12
 3293 0108 2F48     		ldr	r0, .L310+16
 3294              	.LVL293:
 367:src/console.c ****     reset_shift();
 3295              		.loc 2 367 5 is_stmt 0 view .LVU882
 3296 010a 9847     		blx	r3
 3297              	.LVL294:
 368:src/console.c ****     r = no_key;
 3298              		.loc 2 368 5 is_stmt 1 view .LVU883
 3299 010c FFF7FEFF 		bl	reset_shift
 3300              	.LVL295:
 369:src/console.c ****     break;
 3301              		.loc 2 369 5 view .LVU884
 369:src/console.c ****     break;
 3302              		.loc 2 369 7 is_stmt 0 view .LVU885
 3303 0110 2B4B     		ldr	r3, .L310+8
 3304 0112 93E80300 		ldm	r3, {r0, r1}
 3305 0116 84E80300 		stm	r4, {r0, r1}
 3306              	.LVL296:
 370:src/console.c ****   case DOTS:
 3307              		.loc 2 370 5 is_stmt 1 view .LVU886
 3308 011a A0E7     		b	.L296
 3309              	.LVL297:
 3310              	.L287:
 362:src/console.c ****     reset_shift();
 3311              		.loc 2 362 5 view .LVU887
 3312 011c FFF7FEFF 		bl	save_prog_file
 3313              	.LVL298:
 363:src/console.c ****     r = no_key;
 3314              		.loc 2 363 5 view .LVU888
 3315 0120 FFF7FEFF 		bl	reset_shift
 3316              	.LVL299:
 364:src/console.c ****     break;
 3317              		.loc 2 364 5 view .LVU889
 364:src/console.c ****     break;
 3318              		.loc 2 364 7 is_stmt 0 view .LVU890
 3319 0124 264B     		ldr	r3, .L310+8
 3320 0126 93E80300 		ldm	r3, {r0, r1}
 3321 012a 84E80300 		stm	r4, {r0, r1}
 3322              	.LVL300:
 365:src/console.c ****   case HELP:
 3323              		.loc 2 365 5 is_stmt 1 view .LVU891
 3324 012e 96E7     		b	.L296
 3325              	.LVL301:
 3326              	.L286:
 372:src/console.c ****     reset_shift();
 3327              		.loc 2 372 5 view .LVU892
 3328 0130 FFF7FEFF 		bl	do_all_dots
 3329              	.LVL302:
 373:src/console.c ****     r = no_key;
 3330              		.loc 2 373 5 view .LVU893
 3331 0134 FFF7FEFF 		bl	reset_shift
ARM GAS  /tmp/cczIC8Cx.s 			page 91


 3332              	.LVL303:
 374:src/console.c ****     break;
 3333              		.loc 2 374 5 view .LVU894
 374:src/console.c ****     break;
 3334              		.loc 2 374 7 is_stmt 0 view .LVU895
 3335 0138 214B     		ldr	r3, .L310+8
 3336 013a 93E80300 		ldm	r3, {r0, r1}
 3337 013e 84E80300 		stm	r4, {r0, r1}
 3338              	.LVL304:
 375:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 3339              		.loc 2 375 5 is_stmt 1 view .LVU896
 3340 0142 8CE7     		b	.L296
 3341              	.LVL305:
 3342              	.L285:
 377:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 3343              		.loc 2 377 5 view .LVU897
 3344              	.LBB123:
 3345              	.LBI123:
 310:src/console.c ****   struct _ndmap temp;
 3346              		.loc 2 310 6 view .LVU898
 3347              	.LBB124:
 311:src/console.c ****   temp.key_34s = key;
 3348              		.loc 2 311 3 view .LVU899
 312:src/console.c ****   temp.shift = shift;
 3349              		.loc 2 312 3 view .LVU900
 312:src/console.c ****   temp.shift = shift;
 3350              		.loc 2 312 16 is_stmt 0 view .LVU901
 3351 0144 6323     		movs	r3, #99
 313:src/console.c ****   process_keycode_with_shift (temp);
 3352              		.loc 2 313 14 view .LVU902
 3353 0146 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3354              		.loc 2 312 16 view .LVU903
 3355 0148 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3356              		.loc 2 313 3 is_stmt 1 view .LVU904
 313:src/console.c ****   process_keycode_with_shift (temp);
 3357              		.loc 2 313 14 is_stmt 0 view .LVU905
 3358 014c 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3359              		.loc 2 314 3 is_stmt 1 view .LVU906
 3360 014e 02AE     		add	r6, sp, #8
 3361 0150 96E80300 		ldm	r6, {r0, r1}
 3362              	.LVL306:
 314:src/console.c **** }
 3363              		.loc 2 314 3 is_stmt 0 view .LVU907
 3364 0154 FFF7FEFF 		bl	process_keycode_with_shift
 3365              	.LVL307:
 314:src/console.c **** }
 3366              		.loc 2 314 3 view .LVU908
 3367              	.LBE124:
 3368              	.LBE123:
 378:src/console.c ****     r = no_key;
 3369              		.loc 2 378 5 is_stmt 1 view .LVU909
 3370              	.LBB125:
 3371              	.LBI125:
 310:src/console.c ****   struct _ndmap temp;
ARM GAS  /tmp/cczIC8Cx.s 			page 92


 3372              		.loc 2 310 6 view .LVU910
 3373              	.LBB126:
 311:src/console.c ****   temp.key_34s = key;
 3374              		.loc 2 311 3 view .LVU911
 312:src/console.c ****   temp.shift = shift;
 3375              		.loc 2 312 3 view .LVU912
 312:src/console.c ****   temp.shift = shift;
 3376              		.loc 2 312 16 is_stmt 0 view .LVU913
 3377 0158 3323     		movs	r3, #51
 3378              	.LVL308:
 3379              	.L308:
 312:src/console.c ****   temp.shift = shift;
 3380              		.loc 2 312 16 view .LVU914
 3381              	.LBE126:
 3382              	.LBE125:
 3383              	.LBB127:
 3384              	.LBB128:
 313:src/console.c ****   process_keycode_with_shift (temp);
 3385              		.loc 2 313 14 view .LVU915
 3386 015a 0397     		str	r7, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 3387              		.loc 2 312 16 view .LVU916
 3388 015c 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3389              		.loc 2 313 3 is_stmt 1 view .LVU917
 314:src/console.c **** }
 3390              		.loc 2 314 3 view .LVU918
 3391 0160 96E80300 		ldm	r6, {r0, r1}
 3392 0164 FFF7FEFF 		bl	process_keycode_with_shift
 3393              	.LVL309:
 3394              	.LBE128:
 3395              	.LBE127:
 399:src/console.c ****     }
 3396              		.loc 2 399 7 view .LVU919
 399:src/console.c ****     }
 3397              		.loc 2 399 7 is_stmt 0 view .LVU920
 3398 0168 74E7     		b	.L280
 3399              	.LVL310:
 3400              	.L284:
 382:src/console.c ****     reset_shift();
 3401              		.loc 2 382 5 is_stmt 1 view .LVU921
 3402 016a FFF7FEFF 		bl	toggle_default_menu
 3403              	.LVL311:
 383:src/console.c ****     r = no_key;
 3404              		.loc 2 383 5 view .LVU922
 3405 016e FFF7FEFF 		bl	reset_shift
 3406              	.LVL312:
 384:src/console.c ****     break;
 3407              		.loc 2 384 5 view .LVU923
 384:src/console.c ****     break;
 3408              		.loc 2 384 7 is_stmt 0 view .LVU924
 3409 0172 134B     		ldr	r3, .L310+8
 3410 0174 93E80300 		ldm	r3, {r0, r1}
 3411 0178 84E80300 		stm	r4, {r0, r1}
 3412              	.LVL313:
 385:src/console.c ****   case SETUMEN:
 3413              		.loc 2 385 5 is_stmt 1 view .LVU925
ARM GAS  /tmp/cczIC8Cx.s 			page 93


 3414 017c 6FE7     		b	.L296
 3415              	.LVL314:
 3416              	.L283:
 387:src/console.c ****     reset_shift();
 3417              		.loc 2 387 5 view .LVU926
 3418              	.LBB130:
 3419              	.LBI130:
 657:src/menu.c    ****   // find the label 'MNU'
 3420              		.loc 1 657 6 view .LVU927
 3421              	.LBB131:
 659:src/menu.c    ****    build_user_menu_from_program (lbl);
 3422              		.loc 1 659 4 view .LVU928
 660:src/menu.c    **** }
 3423              		.loc 1 660 4 view .LVU929
 3424 017e 1348     		ldr	r0, .L310+20
 3425              	.LVL315:
 660:src/menu.c    **** }
 3426              		.loc 1 660 4 is_stmt 0 view .LVU930
 3427 0180 FFF7FEFF 		bl	build_user_menu_from_program
 3428              	.LVL316:
 3429              	.LBE131:
 3430              	.LBE130:
 388:src/console.c ****     r = no_key;;
 3431              		.loc 2 388 5 is_stmt 1 view .LVU931
 3432 0184 FFF7FEFF 		bl	reset_shift
 3433              	.LVL317:
 389:src/console.c ****     break;
 3434              		.loc 2 389 5 view .LVU932
 389:src/console.c ****     break;
 3435              		.loc 2 389 7 is_stmt 0 view .LVU933
 3436 0188 0D4B     		ldr	r3, .L310+8
 3437 018a 93E80300 		ldm	r3, {r0, r1}
 3438 018e 84E80300 		stm	r4, {r0, r1}
 3439              	.LVL318:
 389:src/console.c ****     break;
 3440              		.loc 2 389 16 is_stmt 1 view .LVU934
 390:src/console.c ****   case KCPX:
 3441              		.loc 2 390 5 view .LVU935
 3442 0192 64E7     		b	.L296
 3443              	.LVL319:
 3444              	.L297:
 397:src/console.c ****       do_now (K_RELEASE, 0);
 3445              		.loc 2 397 7 view .LVU936
 3446              	.LBB132:
 3447              	.LBI132:
 310:src/console.c ****   struct _ndmap temp;
 3448              		.loc 2 310 6 view .LVU937
 3449              	.LBB133:
 311:src/console.c ****   temp.key_34s = key;
 3450              		.loc 2 311 3 view .LVU938
 312:src/console.c ****   temp.shift = shift;
 3451              		.loc 2 312 3 view .LVU939
 312:src/console.c ****   temp.shift = shift;
 3452              		.loc 2 312 16 is_stmt 0 view .LVU940
 3453 0194 2D23     		movs	r3, #45
 313:src/console.c ****   process_keycode_with_shift (temp);
 3454              		.loc 2 313 14 view .LVU941
ARM GAS  /tmp/cczIC8Cx.s 			page 94


 3455 0196 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3456              		.loc 2 312 16 view .LVU942
 3457 0198 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3458              		.loc 2 313 3 is_stmt 1 view .LVU943
 313:src/console.c ****   process_keycode_with_shift (temp);
 3459              		.loc 2 313 14 is_stmt 0 view .LVU944
 3460 019c 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3461              		.loc 2 314 3 is_stmt 1 view .LVU945
 3462 019e 02AE     		add	r6, sp, #8
 3463 01a0 96E80300 		ldm	r6, {r0, r1}
 3464              	.LVL320:
 314:src/console.c **** }
 3465              		.loc 2 314 3 is_stmt 0 view .LVU946
 3466 01a4 FFF7FEFF 		bl	process_keycode_with_shift
 3467              	.LVL321:
 314:src/console.c **** }
 3468              		.loc 2 314 3 view .LVU947
 3469              	.LBE133:
 3470              	.LBE132:
 398:src/console.c ****       r = no_key;
 3471              		.loc 2 398 7 is_stmt 1 view .LVU948
 3472              	.LBB134:
 3473              	.LBI127:
 310:src/console.c ****   struct _ndmap temp;
 3474              		.loc 2 310 6 view .LVU949
 3475              	.LBB129:
 311:src/console.c ****   temp.key_34s = key;
 3476              		.loc 2 311 3 view .LVU950
 312:src/console.c ****   temp.shift = shift;
 3477              		.loc 2 312 3 view .LVU951
 312:src/console.c ****   temp.shift = shift;
 3478              		.loc 2 312 16 is_stmt 0 view .LVU952
 3479 01a8 6323     		movs	r3, #99
 3480 01aa D6E7     		b	.L308
 3481              	.LVL322:
 3482              	.L309:
 312:src/console.c ****   temp.shift = shift;
 3483              		.loc 2 312 16 view .LVU953
 3484              	.LBE129:
 3485              	.LBE134:
 3486              	.LBB135:
 3487              	.LBB122:
 111:src/menu.c    ****   }
 3488              		.loc 1 111 5 is_stmt 1 view .LVU954
 111:src/menu.c    ****   }
 3489              		.loc 1 111 18 is_stmt 0 view .LVU955
 3490 01ac 0849     		ldr	r1, .L310+24
 3491 01ae 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3492 01b0 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3493              		.loc 1 119 3 is_stmt 1 view .LVU956
 3494              	.L299:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3495              		.loc 1 119 43 view .LVU957
ARM GAS  /tmp/cczIC8Cx.s 			page 95


 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3496              		.loc 1 119 53 is_stmt 0 view .LVU958
 3497 01b2 084A     		ldr	r2, .L310+28
 3498 01b4 1370     		strb	r3, [r2]
 3499 01b6 4BE7     		b	.L300
 3500              	.L311:
 3501              		.align	2
 3502              	.L310:
 3503 01b8 00000000 		.word	main_ram
 3504 01bc 00000000 		.word	.LANCHOR1
 3505 01c0 00000000 		.word	.LANCHOR10
 3506 01c4 49040008 		.word	134218825
 3507 01c8 00000000 		.word	.LC13
 3508 01cc 4DF04E55 		.word	1431236685
 3509 01d0 00000000 		.word	.LANCHOR2
 3510 01d4 00000000 		.word	.LANCHOR3
 3511              	.LBE122:
 3512              	.LBE135:
 3513              		.cfi_endproc
 3514              	.LFE33:
 3516              		.section	.text.program_main,"ax",%progbits
 3517              		.align	1
 3518              		.p2align 2,,3
 3519              		.global	program_main
 3520              		.syntax unified
 3521              		.thumb
 3522              		.thumb_func
 3523              		.fpu fpv4-sp-d16
 3525              	program_main:
 3526              	.LFB34:
 406:src/console.c **** 
 407:src/console.c **** void program_main(){
 3527              		.loc 2 407 20 is_stmt 1 view -0
 3528              		.cfi_startproc
 3529              		@ args = 0, pretend = 0, frame = 224
 3530              		@ frame_needed = 0, uses_anonymous_args = 0
 408:src/console.c ****   int c;
 3531              		.loc 2 408 3 view .LVU960
 409:src/console.c ****   struct _ndmap remapped;
 3532              		.loc 2 409 3 view .LVU961
 410:src/console.c **** 
 411:src/console.c ****   init_mem();
 3533              		.loc 2 411 3 view .LVU962
 407:src/console.c ****   int c;
 3534              		.loc 2 407 20 is_stmt 0 view .LVU963
 3535 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3536              		.cfi_def_cfa_offset 32
 3537              		.cfi_offset 4, -32
 3538              		.cfi_offset 5, -28
 3539              		.cfi_offset 6, -24
 3540              		.cfi_offset 7, -20
 3541              		.cfi_offset 8, -16
 3542              		.cfi_offset 9, -12
 3543              		.cfi_offset 10, -8
 3544              		.cfi_offset 14, -4
 3545 0004 B8B0     		sub	sp, sp, #224
 3546              		.cfi_def_cfa_offset 256
ARM GAS  /tmp/cczIC8Cx.s 			page 96


 3547              		.loc 2 411 3 view .LVU964
 3548 0006 FFF7FEFF 		bl	init_mem
 3549              	.LVL323:
 412:src/console.c ****   init_RegionTab();
 3550              		.loc 2 412 3 is_stmt 1 view .LVU965
 3551 000a FFF7FEFF 		bl	init_RegionTab
 3552              	.LVL324:
 413:src/console.c ****   init_34s();
 3553              		.loc 2 413 3 view .LVU966
 3554 000e FFF7FEFF 		bl	init_34s
 3555              	.LVL325:
 414:src/console.c ****   State2.flags = 1;  
 3556              		.loc 2 414 3 view .LVU967
 3557              		.loc 2 414 16 is_stmt 0 view .LVU968
 3558 0012 B24A     		ldr	r2, .L415
 3559 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3560 0016 43F00103 		orr	r3, r3, #1
 3561 001a 1376     		strb	r3, [r2, #24]
 415:src/console.c ****   check_create_wp34sdir();
 3562              		.loc 2 415 3 is_stmt 1 view .LVU969
 3563 001c FFF7FEFF 		bl	check_create_wp34sdir
 3564              	.LVL326:
 416:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3565              		.loc 2 416 3 view .LVU970
 3566              		.loc 2 416 8 is_stmt 0 view .LVU971
 3567 0020 0020     		movs	r0, #0
 3568 0022 FFF7FEFF 		bl	load_ram_file
 3569              	.LVL327:
 3570              		.loc 2 416 6 view .LVU972
 3571 0026 08B9     		cbnz	r0, .L313
 3572              		.loc 2 416 26 is_stmt 1 discriminator 1 view .LVU973
 3573              		.loc 2 416 34 is_stmt 0 discriminator 1 view .LVU974
 3574 0028 AD4B     		ldr	r3, .L415+4
 3575 002a 1860     		str	r0, [r3]
 3576              	.L313:
 417:src/console.c ****   load_backup_file(0);
 3577              		.loc 2 417 3 is_stmt 1 view .LVU975
 418:src/console.c ****   load_lib_file(0);
 419:src/console.c ****   t20->newln = 0;
 3578              		.loc 2 419 3 is_stmt 0 view .LVU976
 3579 002c AD4C     		ldr	r4, .L415+8
 3580 002e AE4E     		ldr	r6, .L415+12
 420:src/console.c ****   t20->lnfill = 0;
 421:src/console.c ****   t20->fixed = 1;
 422:src/console.c ****   t20->xspc = -2;
 423:src/console.c ****   t20->bgfill = 0;
 424:src/console.c ****   run_menu_item_app = run_menu_item;
 425:src/console.c ****   menu_line_str_app = menu_line_str;
 426:src/console.c **** 
 427:src/console.c ****   display();
 428:src/console.c ****   display_current_menu();
 429:src/console.c ****   lcd_refresh();
 430:src/console.c ****   JustDisplayed = 0;
 431:src/console.c ****   /*
 432:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 433:src/console.c ****     Sleeps peacefully while waiting for a key.
 434:src/console.c ****     Handles (in principle!) turning off and on.
ARM GAS  /tmp/cczIC8Cx.s 			page 97


 435:src/console.c ****     =================
 436:src/console.c ****     Main event loop
 437:src/console.c ****     =================
 438:src/console.c **** 
 439:src/console.c ****     Status flags:
 440:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 441:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 442:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 443:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 444:src/console.c ****   */
 445:src/console.c ****   for(;;) {
 446:src/console.c **** 
 447:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 448:src/console.c ****       {
 449:src/console.c **** 	CLR_ST(STAT_RUNNING);
 450:src/console.c **** 	sys_sleep();
 451:src/console.c ****       }
 452:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 3581              		.loc 2 452 35 view .LVU977
 3582 0030 AE4F     		ldr	r7, .L415+16
 453:src/console.c ****     {
 454:src/console.c ****       CLR_ST(STAT_RUNNING);
 455:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3583              		.loc 2 455 7 view .LVU978
 3584 0032 DFF82C83 		ldr	r8, .L415+132
 417:src/console.c ****   load_lib_file(0);
 3585              		.loc 2 417 3 view .LVU979
 3586 0036 0020     		movs	r0, #0
 3587 0038 FFF7FEFF 		bl	load_backup_file
 3588              	.LVL328:
 418:src/console.c ****   t20->newln = 0;
 3589              		.loc 2 418 3 is_stmt 1 view .LVU980
 3590 003c 0020     		movs	r0, #0
 3591 003e FFF7FEFF 		bl	load_lib_file
 3592              	.LVL329:
 419:src/console.c ****   t20->lnfill = 0;
 3593              		.loc 2 419 3 view .LVU981
 3594 0042 236B     		ldr	r3, [r4, #48]
 420:src/console.c ****   t20->fixed = 1;
 3595              		.loc 2 420 3 view .LVU982
 421:src/console.c ****   t20->xspc = -2;
 3596              		.loc 2 421 3 view .LVU983
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3597              		.loc 2 424 21 is_stmt 0 view .LVU984
 3598 0044 AA4A     		ldr	r2, .L415+20
 421:src/console.c ****   t20->xspc = -2;
 3599              		.loc 2 421 14 view .LVU985
 3600 0046 0121     		movs	r1, #1
 3601 0048 1974     		strb	r1, [r3, #16]
 422:src/console.c ****   t20->bgfill = 0;
 3602              		.loc 2 422 3 is_stmt 1 view .LVU986
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3603              		.loc 2 423 15 is_stmt 0 view .LVU987
 3604 004a 0025     		movs	r5, #0
 422:src/console.c ****   t20->bgfill = 0;
 3605              		.loc 2 422 13 view .LVU988
 3606 004c FE21     		movs	r1, #254
ARM GAS  /tmp/cczIC8Cx.s 			page 98


 3607 004e 9973     		strb	r1, [r3, #14]
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3608              		.loc 2 423 3 is_stmt 1 view .LVU989
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3609              		.loc 2 423 15 is_stmt 0 view .LVU990
 3610 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 419:src/console.c ****   t20->lnfill = 0;
 3611              		.loc 2 419 14 view .LVU991
 3612 0052 1D75     		strb	r5, [r3, #20]
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3613              		.loc 2 424 3 is_stmt 1 view .LVU992
 425:src/console.c **** 
 3614              		.loc 2 425 21 is_stmt 0 view .LVU993
 3615 0054 A74B     		ldr	r3, .L415+24
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3616              		.loc 2 424 21 view .LVU994
 3617 0056 E260     		str	r2, [r4, #12]
 425:src/console.c **** 
 3618              		.loc 2 425 3 is_stmt 1 view .LVU995
 425:src/console.c **** 
 3619              		.loc 2 425 21 is_stmt 0 view .LVU996
 3620 0058 2361     		str	r3, [r4, #16]
 427:src/console.c ****   display_current_menu();
 3621              		.loc 2 427 3 is_stmt 1 view .LVU997
 3622 005a FFF7FEFF 		bl	display
 3623              	.LVL330:
 428:src/console.c ****   lcd_refresh();
 3624              		.loc 2 428 3 view .LVU998
 3625 005e FFF7FEFF 		bl	display_current_menu
 3626              	.LVL331:
 429:src/console.c ****   JustDisplayed = 0;
 3627              		.loc 2 429 3 view .LVU999
 3628 0062 A54B     		ldr	r3, .L415+28
 3629 0064 9847     		blx	r3
 3630              	.LVL332:
 430:src/console.c ****   /*
 3631              		.loc 2 430 3 view .LVU1000
 430:src/console.c ****   /*
 3632              		.loc 2 430 17 is_stmt 0 view .LVU1001
 3633 0066 A54B     		ldr	r3, .L415+32
 3634 0068 1D60     		str	r5, [r3]
 3635              	.L314:
 445:src/console.c **** 
 3636              		.loc 2 445 3 is_stmt 1 view .LVU1002
 447:src/console.c ****       {
 3637              		.loc 2 447 5 view .LVU1003
 447:src/console.c ****       {
 3638              		.loc 2 447 10 is_stmt 0 view .LVU1004
 3639 006a 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3640              		.loc 2 447 8 view .LVU1005
 3641 006c 9B05     		lsls	r3, r3, #22
 3642 006e 40F1B980 		bpl	.L315
 447:src/console.c ****       {
 3643              		.loc 2 447 30 discriminator 1 view .LVU1006
 3644 0072 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
ARM GAS  /tmp/cczIC8Cx.s 			page 99


 3645              		.loc 2 447 27 discriminator 1 view .LVU1007
 3646 0074 5D07     		lsls	r5, r3, #29
 3647 0076 40F1B580 		bpl	.L315
 449:src/console.c **** 	sys_sleep();
 3648              		.loc 2 449 2 is_stmt 1 view .LVU1008
 3649 007a 2368     		ldr	r3, [r4]
 450:src/console.c ****       }
 3650              		.loc 2 450 2 is_stmt 0 view .LVU1009
 3651 007c A04A     		ldr	r2, .L415+36
 449:src/console.c **** 	sys_sleep();
 3652              		.loc 2 449 2 view .LVU1010
 3653 007e 23F00203 		bic	r3, r3, #2
 3654 0082 2360     		str	r3, [r4]
 450:src/console.c ****       }
 3655              		.loc 2 450 2 is_stmt 1 view .LVU1011
 3656 0084 9047     		blx	r2
 3657              	.LVL333:
 3658              	.L316:
 456:src/console.c ****       sys_sleep();
 457:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 458:src/console.c **** 	key_push (K_HEARTBEAT);
 459:src/console.c **** 	if (Pause > 0) Pause--;
 460:src/console.c ****       }
 461:src/console.c ****       sys_timer_disable(0); // stop timer
 462:src/console.c ****     }
 463:src/console.c ****     
 464:src/console.c ****     // Wakeup in off state or going to sleep
 465:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3659              		.loc 2 465 5 view .LVU1012
 3660              		.loc 2 465 9 is_stmt 0 view .LVU1013
 3661 0086 2368     		ldr	r3, [r4]
 3662              		.loc 2 465 8 view .LVU1014
 3663 0088 9805     		lsls	r0, r3, #22
 3664 008a 00F1D280 		bmi	.L322
 3665              	.L408:
 3666              		.loc 2 465 29 discriminator 1 view .LVU1015
 3667 008e 2368     		ldr	r3, [r4]
 3668              		.loc 2 465 26 discriminator 1 view .LVU1016
 3669 0090 5907     		lsls	r1, r3, #29
 3670 0092 00F1CE80 		bmi	.L322
 466:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 467:src/console.c ****         // Going to off mode
 468:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 469:src/console.c ****         draw_power_off_image(1);
 470:src/console.c **** 
 471:src/console.c ****         LCD_power_off(0);
 472:src/console.c ****         SET_ST(STAT_SUSPENDED);
 473:src/console.c ****         SET_ST(STAT_OFF);
 474:src/console.c ****       }
 475:src/console.c ****       // Already in OFF -> just continue to sleep above
 476:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 477:src/console.c ****       // thus reaching the sleep()
 478:src/console.c ****     }
 479:src/console.c **** 
 480:src/console.c ****     // Well, we are woken-up
 481:src/console.c ****     SET_ST(STAT_RUNNING);
 3671              		.loc 2 481 5 is_stmt 1 view .LVU1017
ARM GAS  /tmp/cczIC8Cx.s 			page 100


 3672 0096 2368     		ldr	r3, [r4]
 3673 0098 43F00203 		orr	r3, r3, #2
 3674 009c 2360     		str	r3, [r4]
 482:src/console.c **** 
 483:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 484:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3675              		.loc 2 484 5 view .LVU1018
 3676 009e 2368     		ldr	r3, [r4]
 3677 00a0 23F00403 		bic	r3, r3, #4
 3678 00a4 2360     		str	r3, [r4]
 485:src/console.c **** 
 486:src/console.c ****     // Get up from OFF state
 487:src/console.c ****     if ( ST(STAT_OFF) ) {
 3679              		.loc 2 487 5 view .LVU1019
 3680              		.loc 2 487 10 is_stmt 0 view .LVU1020
 3681 00a6 2368     		ldr	r3, [r4]
 3682              		.loc 2 487 8 view .LVU1021
 3683 00a8 DA06     		lsls	r2, r3, #27
 3684 00aa 0ED5     		bpl	.L327
 488:src/console.c ****       LCD_power_on();
 3685              		.loc 2 488 7 is_stmt 1 view .LVU1022
 3686 00ac 954B     		ldr	r3, .L415+40
 3687 00ae 9847     		blx	r3
 3688              	.LVL334:
 489:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3689              		.loc 2 489 7 view .LVU1023
 3690 00b0 954B     		ldr	r3, .L415+44
 3691 00b2 9847     		blx	r3
 3692              	.LVL335:
 490:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3693              		.loc 2 490 7 view .LVU1024
 3694 00b4 954B     		ldr	r3, .L415+48
 3695 00b6 9847     		blx	r3
 3696              	.LVL336:
 491:src/console.c **** 
 492:src/console.c ****       CLR_ST(STAT_OFF);
 3697              		.loc 2 492 7 view .LVU1025
 3698 00b8 2368     		ldr	r3, [r4]
 493:src/console.c **** 
 494:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3699              		.loc 2 494 13 is_stmt 0 view .LVU1026
 3700 00ba 954A     		ldr	r2, .L415+52
 492:src/console.c **** 
 3701              		.loc 2 492 7 view .LVU1027
 3702 00bc 23F01003 		bic	r3, r3, #16
 3703 00c0 2360     		str	r3, [r4]
 3704              		.loc 2 494 7 is_stmt 1 view .LVU1028
 3705              		.loc 2 494 13 is_stmt 0 view .LVU1029
 3706 00c2 9047     		blx	r2
 3707              	.LVL337:
 3708              		.loc 2 494 10 view .LVU1030
 3709 00c4 08B9     		cbnz	r0, .L327
 495:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3710              		.loc 2 495 9 is_stmt 1 view .LVU1031
 3711 00c6 934B     		ldr	r3, .L415+56
 3712 00c8 9847     		blx	r3
 3713              	.LVL338:
ARM GAS  /tmp/cczIC8Cx.s 			page 101


 3714              	.L327:
 496:src/console.c ****     }
 497:src/console.c **** 
 498:src/console.c ****     // Key is ready -> clear auto off timer
 499:src/console.c ****     //    if ( !key_empty() )
 500:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 501:src/console.c ****     // Fetch the key
 502:src/console.c ****     //  < 0 -> No key event
 503:src/console.c ****     //  > 0 -> Key pressed
 504:src/console.c ****     // == 0 -> Key released
 505:src/console.c ****     c = key_pop();
 3715              		.loc 2 505 5 view .LVU1032
 3716              		.loc 2 505 9 is_stmt 0 view .LVU1033
 3717 00ca 934B     		ldr	r3, .L415+60
 3718 00cc 9847     		blx	r3
 3719              	.LVL339:
 506:src/console.c **** #ifdef INCLUDE_STOPWATCH
 507:src/console.c ****     if ( KeyCallback != NULL ) {
 3720              		.loc 2 507 22 view .LVU1034
 3721 00ce 3368     		ldr	r3, [r6]
 505:src/console.c **** #ifdef INCLUDE_STOPWATCH
 3722              		.loc 2 505 9 view .LVU1035
 3723 00d0 0546     		mov	r5, r0
 3724              	.LVL340:
 3725              		.loc 2 507 5 is_stmt 1 view .LVU1036
 3726              		.loc 2 507 8 is_stmt 0 view .LVU1037
 3727 00d2 002B     		cmp	r3, #0
 3728 00d4 00F04681 		beq	.L329
 508:src/console.c ****       c = (*KeyCallback)( c );
 3729              		.loc 2 508 7 is_stmt 1 view .LVU1038
 3730              		.loc 2 508 12 is_stmt 0 view .LVU1039
 3731 00d8 9847     		blx	r3
 3732              	.LVL341:
 3733              		.loc 2 508 12 view .LVU1040
 3734 00da 0546     		mov	r5, r0
 3735              	.LVL342:
 3736              	.L330:
 509:src/console.c ****     }
 510:src/console.c ****     else if ( StopWatchRunning && ( Ticker % STOPWATCH_BLINK ) == 0 ) {
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 512:src/console.c ****       finish_LEQ();
 513:src/console.c ****     }
 514:src/console.c **** #endif
 515:src/console.c ****     if ( (c != K_HEARTBEAT) && (c >= 0) ) {
 3737              		.loc 2 515 5 is_stmt 1 view .LVU1041
 3738              		.loc 2 515 8 is_stmt 0 view .LVU1042
 3739 00dc 622D     		cmp	r5, #98
 3740 00de 00F0BF80 		beq	.L331
 3741              		.loc 2 515 29 discriminator 1 view .LVU1043
 3742 00e2 002D     		cmp	r5, #0
 3743 00e4 C1DB     		blt	.L314
 516:src/console.c ****       reset_auto_off();
 3744              		.loc 2 516 7 is_stmt 1 view .LVU1044
 3745 00e6 8D4B     		ldr	r3, .L415+64
 3746 00e8 9847     		blx	r3
 3747              	.LVL343:
 517:src/console.c ****       //      start_key_timer();
ARM GAS  /tmp/cczIC8Cx.s 			page 102


 518:src/console.c ****     }
 519:src/console.c ****     if (c >= 0) {
 3748              		.loc 2 519 5 view .LVU1045
 520:src/console.c ****       remapped = remap(c);
 3749              		.loc 2 520 7 view .LVU1046
 3750              	.LBB143:
 3751              	.LBI143:
  56:src/console.c **** 
 3752              		.loc 2 56 22 view .LVU1047
 3753              	.LBB144:
  58:src/console.c **** 
 3754              		.loc 2 58 3 view .LVU1048
 3755              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3756              		.loc 3 1 1 view .LVU1049
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
ARM GAS  /tmp/cczIC8Cx.s 			page 103


  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3757              		.loc 3 59 3 view .LVU1050
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX}, // Complex
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     //    {K_MULTI, 1}, // lastX 
  78:src/keytran.c ****     {K_OP, RARG( RARG_RCL, regL_idx )}, // lastX 
  79:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
  80:src/keytran.c ****     {K_SETMENU,  M_Disp}, // DISP menu
  81:src/keytran.c ****     {K_SETMENU,  M_Clear}, // CLR menu
  82:src/keytran.c ****     // Fourth row of DM42 18--22
  83:src/keytran.c ****     {K40, 0}, // up-arrow
  84:src/keytran.c ****     {K52, 1}, // SLV
  85:src/keytran.c ****     {K_SETMENU,  M_Solve}, // Integral/sum/product menu
  86:src/keytran.c ****     {K44, 3}, // MATRIX cat
  87:src/keytran.c ****     {K_SETMENU,  M_Stats}, // STATS menu
  88:src/keytran.c ****     // Fifth row of DM42 23--27
  89:src/keytran.c ****     {K50, 0}, // down-arrow
  90:src/keytran.c ****     {K_SETMENU,  M_Base}, // BASE menu 
  91:src/keytran.c ****     {K04, 3}, // CONV cat
  92:src/keytran.c ****     {K_SETMENU,  M_Flags}, // FLAGS menu
  93:src/keytran.c ****     {K_SETMENU,  M_Prob}, // PROBS menu
  94:src/keytran.c ****     // Sixth row of DM42 28--32
  95:src/keytran.c ****     {K_G, 0}, // gshift
  96:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  97:src/keytran.c ****     {K_SETMENU,  M_User}, // select user menu
  98:src/keytran.c ****     {K52, 3}, // P.FCN cat
  99:src/keytran.c ****     {K_SETMENU, M_Print}, // Print menu
ARM GAS  /tmp/cczIC8Cx.s 			page 104


 100:src/keytran.c ****     // Last row of DM42 33--37
 101:src/keytran.c ****     {K60, 3}, // off
 102:src/keytran.c ****     {K_SETMENU,  M_Setup1}, // SETUP menu
 103:src/keytran.c ****     {K21, 1}, // <(
 104:src/keytran.c ****     {K63, 3}, // P/R
 105:src/keytran.c ****     {K10, 3}, // CAT cat
 106:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_NOP, 0},
 114:src/keytran.c ****     {K_SETMENU,  M_Last}, // last menu
 115:src/keytran.c ****     {K_SETMENU,  M_Misc}, // MISC menu!
 116:src/keytran.c ****   };
 117:src/keytran.c **** 
 118:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3758              		.loc 3 118 3 view .LVU1051
 119:src/keytran.c ****     {K_RELEASE, -1},
 120:src/keytran.c ****     // Top row of DM42 1--6
 121:src/keytran.c ****     {K64, 3}, // sig+
 122:src/keytran.c ****     {K34, 1}, // 1/x
 123:src/keytran.c ****     {K44, 1}, // sqrt x
 124:src/keytran.c ****     {K31, 2}, // 10^x
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     {K_NOP, 0}, // no function
 127:src/keytran.c ****     // Next row of DM42 7--12
 128:src/keytran.c ****     {K_NOP, 0}, // no function
 129:src/keytran.c ****     {K11, 3}, // View
 130:src/keytran.c ****     {K12, 3}, // Rup
 131:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 133:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 134:src/keytran.c ****     // Third row of DM42 13--17
 135:src/keytran.c ****     {K20, 2}, // fill
 136:src/keytran.c ****     {K_SETMENU,  M_Swap}, // X<>Y menu
 137:src/keytran.c ****     {K05, 3}, // MODE cat
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     {K_NOP, 0}, // no function
 140:src/keytran.c ****     // Fourth row of DM42 18--22
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K_NOP, 0}, // no function
 144:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 145:src/keytran.c ****     {K42, 3}, // STAT catalogue
 146:src/keytran.c ****     // Fifth row of DM42 23--27
 147:src/keytran.c ****     {K_NOP, 0}, // no function 
 148:src/keytran.c ****     {K_NOP, 0}, // no function
 149:src/keytran.c ****     {K20, 3}, // CONST catalogue
 150:src/keytran.c ****     {K51, 3}, // TEST catalogue
 151:src/keytran.c ****     {K41, 3}, // PROB catalogue
 152:src/keytran.c ****     // Sixth row of DM42 28--32
 153:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     //    {K_MULTI, SETUMEN}, // Set up user menu
ARM GAS  /tmp/cczIC8Cx.s 			page 105


 156:src/keytran.c ****     {K_SETMENU, M_Usermenu}, //User menu create
 157:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 158:src/keytran.c ****     {K_NOP, 0}, // no function
 159:src/keytran.c ****     // Last row of DM42 33--37
 160:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 161:src/keytran.c ****     {K_SETMENU,  M_Setup2}, // SETUP2 menu
 162:src/keytran.c ****     {K_NOP, 0}, // no function
 163:src/keytran.c ****     {K_SETMENU,  M_Program}, // P.FCN menu
 164:src/keytran.c ****     {K50, 3}, // Status
 165:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****     {K_NOP, 0},
 174:src/keytran.c ****     {K_NOP, 0},
 175:src/keytran.c ****   };
 176:src/keytran.c **** 
 177:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3759              		.loc 3 177 1 view .LVU1052
 178:src/keytran.c ****     {K_RELEASE, -1},
 179:src/keytran.c ****     // Top row of DM42 1--6
 180:src/keytran.c ****     {K00, -1},
 181:src/keytran.c ****     {K01, -1},
 182:src/keytran.c ****     {K02, -1},
 183:src/keytran.c ****     {K03, -1},
 184:src/keytran.c ****     {K04, -1},
 185:src/keytran.c ****     {K05, -1},
 186:src/keytran.c ****     // Next row of DM42 7--12
 187:src/keytran.c ****     {K10, -1},
 188:src/keytran.c ****     {K11, -1},
 189:src/keytran.c ****     {K12, -1},
 190:src/keytran.c ****     {K13, -1},
 191:src/keytran.c ****     {K14, -1},
 192:src/keytran.c ****     {K15, -1},
 193:src/keytran.c ****     // Third row of DM42 13--17
 194:src/keytran.c ****     {K20, -1},
 195:src/keytran.c ****     {K21, -1},
 196:src/keytran.c ****     {K22, -1},
 197:src/keytran.c ****     {K23, -1},
 198:src/keytran.c ****     {K24, -1},
 199:src/keytran.c ****     // Fourth row of DM42 18--22
 200:src/keytran.c ****     {K30, -1},
 201:src/keytran.c ****     {K31, -1},
 202:src/keytran.c ****     {K32, -1},
 203:src/keytran.c ****     {K33, -1},
 204:src/keytran.c ****     {K34, -1},
 205:src/keytran.c ****     // Fifth row of DM42 23--27
 206:src/keytran.c ****     {K40, -1},
 207:src/keytran.c ****     {K41, -1},
 208:src/keytran.c ****     {K42, -1},
 209:src/keytran.c ****     {K43, -1},
 210:src/keytran.c ****     {K44, -1},
 211:src/keytran.c ****     // Sixth row of DM42 28--32
ARM GAS  /tmp/cczIC8Cx.s 			page 106


 212:src/keytran.c ****     {K50, -1},
 213:src/keytran.c ****     {K51, -1},
 214:src/keytran.c ****     {K52, -1},
 215:src/keytran.c ****     {K53, -1},
 216:src/keytran.c ****     {K54, -1},
 217:src/keytran.c ****     // Last row of DM42 33--37
 218:src/keytran.c ****     {K60, -1},
 219:src/keytran.c ****     {K61, -1},
 220:src/keytran.c ****     {K62, -1},
 221:src/keytran.c ****     {K63, -1},
 222:src/keytran.c ****     {K64, -1},
 223:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_NOP, -1},
 227:src/keytran.c ****     {K_NOP, -1},
 228:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 229:src/keytran.c ****     {K_CMPLX, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c ****     {K_NOP, -1},
 232:src/keytran.c ****     {K_NOP, -1},
 233:src/keytran.c **** };
 234:src/keytran.c **** 
 235:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3760              		.loc 3 235 1 view .LVU1053
  62:src/console.c **** 
 3761              		.loc 2 62 3 view .LVU1054
  64:src/console.c **** 
 3762              		.loc 2 64 3 view .LVU1055
  64:src/console.c **** 
 3763              		.loc 2 64 6 is_stmt 0 view .LVU1056
 3764 00ea 632D     		cmp	r5, #99
 3765 00ec 00F08A81 		beq	.L396
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3766              		.loc 2 66 3 is_stmt 1 view .LVU1057
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3767              		.loc 2 66 6 is_stmt 0 view .LVU1058
 3768 00f0 2C2D     		cmp	r5, #44
 3769 00f2 00F05881 		beq	.L334
  71:src/console.c ****     return mapping_running[c];
 3770              		.loc 2 71 3 is_stmt 1 view .LVU1059
  71:src/console.c ****     return mapping_running[c];
 3771              		.loc 2 71 15 is_stmt 0 view .LVU1060
 3772 00f6 8A4A     		ldr	r2, .L415+68
 3773 00f8 8A4B     		ldr	r3, .L415+72
 3774 00fa 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3775 00fe 1968     		ldr	r1, [r3]
  71:src/console.c ****     return mapping_running[c];
 3776              		.loc 2 71 6 view .LVU1061
 3777 0100 59EA0109 		orrs	r9, r9, r1
 3778 0104 40F07181 		bne	.L397
  75:src/console.c ****   
 3779              		.loc 2 75 3 is_stmt 1 view .LVU1062
  75:src/console.c ****   
 3780              		.loc 2 75 22 is_stmt 0 view .LVU1063
 3781 0108 04A8     		add	r0, sp, #16
 3782 010a FFF7FEFF 		bl	get_current_menu_ref
ARM GAS  /tmp/cczIC8Cx.s 			page 107


 3783              	.LVL344:
  77:src/console.c ****   case KEY_F1:
 3784              		.loc 2 77 3 is_stmt 1 view .LVU1064
 3785 010e A5F12603 		sub	r3, r5, #38
 3786 0112 052B     		cmp	r3, #5
 3787 0114 00F28081 		bhi	.L336
 3788 0118 DFE813F0 		tbh	[pc, r3, lsl #1]
 3789              	.L338:
 3790 011c 8601     		.2byte	(.L343-.L338)/2
 3791 011e 0B00     		.2byte	(.L342-.L338)/2
 3792 0120 1500     		.2byte	(.L341-.L338)/2
 3793 0122 1F00     		.2byte	(.L340-.L338)/2
 3794 0124 2900     		.2byte	(.L339-.L338)/2
 3795 0126 3300     		.2byte	(.L337-.L338)/2
 3796              		.p2align 1
 3797              	.L344:
  80:src/console.c ****   case KEY_F2:
 3798              		.loc 2 80 5 view .LVU1065
  80:src/console.c ****   case KEY_F2:
 3799              		.loc 2 80 9 is_stmt 0 view .LVU1066
 3800 0128 FFF7FEFF 		bl	cur_shift
 3801              	.LVL345:
  80:src/console.c ****   case KEY_F2:
 3802              		.loc 2 80 8 view .LVU1067
 3803 012c 0128     		cmp	r0, #1
 3804 012e 00F01882 		beq	.L398
 3805              	.L342:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3806              		.loc 2 82 5 is_stmt 1 view .LVU1068
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3807              		.loc 2 82 9 is_stmt 0 view .LVU1069
 3808 0132 FFF7FEFF 		bl	cur_shift
 3809              	.LVL346:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3810              		.loc 2 82 8 view .LVU1070
 3811 0136 0028     		cmp	r0, #0
 3812 0138 00F0A381 		beq	.L399
  83:src/console.c ****   case KEY_F3:
 3813              		.loc 2 83 5 is_stmt 1 view .LVU1071
  83:src/console.c ****   case KEY_F3:
 3814              		.loc 2 83 9 is_stmt 0 view .LVU1072
 3815 013c FFF7FEFF 		bl	cur_shift
 3816              	.LVL347:
  83:src/console.c ****   case KEY_F3:
 3817              		.loc 2 83 8 view .LVU1073
 3818 0140 0128     		cmp	r0, #1
 3819 0142 00F0E881 		beq	.L400
 3820              	.L341:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3821              		.loc 2 85 5 is_stmt 1 view .LVU1074
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3822              		.loc 2 85 9 is_stmt 0 view .LVU1075
 3823 0146 FFF7FEFF 		bl	cur_shift
 3824              	.LVL348:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3825              		.loc 2 85 8 view .LVU1076
 3826 014a 0028     		cmp	r0, #0
ARM GAS  /tmp/cczIC8Cx.s 			page 108


 3827 014c 00F08F81 		beq	.L401
  86:src/console.c ****   case KEY_F4:
 3828              		.loc 2 86 5 is_stmt 1 view .LVU1077
  86:src/console.c ****   case KEY_F4:
 3829              		.loc 2 86 9 is_stmt 0 view .LVU1078
 3830 0150 FFF7FEFF 		bl	cur_shift
 3831              	.LVL349:
  86:src/console.c ****   case KEY_F4:
 3832              		.loc 2 86 8 view .LVU1079
 3833 0154 0128     		cmp	r0, #1
 3834 0156 00F0D481 		beq	.L402
 3835              	.L340:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3836              		.loc 2 88 5 is_stmt 1 view .LVU1080
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3837              		.loc 2 88 9 is_stmt 0 view .LVU1081
 3838 015a FFF7FEFF 		bl	cur_shift
 3839              	.LVL350:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3840              		.loc 2 88 8 view .LVU1082
 3841 015e 0028     		cmp	r0, #0
 3842 0160 00F07B81 		beq	.L403
  89:src/console.c ****   case KEY_F5:
 3843              		.loc 2 89 5 is_stmt 1 view .LVU1083
  89:src/console.c ****   case KEY_F5:
 3844              		.loc 2 89 9 is_stmt 0 view .LVU1084
 3845 0164 FFF7FEFF 		bl	cur_shift
 3846              	.LVL351:
  89:src/console.c ****   case KEY_F5:
 3847              		.loc 2 89 8 view .LVU1085
 3848 0168 0128     		cmp	r0, #1
 3849 016a 00F0B681 		beq	.L404
 3850              	.L339:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3851              		.loc 2 91 5 is_stmt 1 view .LVU1086
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3852              		.loc 2 91 9 is_stmt 0 view .LVU1087
 3853 016e FFF7FEFF 		bl	cur_shift
 3854              	.LVL352:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3855              		.loc 2 91 8 view .LVU1088
 3856 0172 0028     		cmp	r0, #0
 3857 0174 00F06781 		beq	.L405
  92:src/console.c ****   case KEY_F6:
 3858              		.loc 2 92 5 is_stmt 1 view .LVU1089
  92:src/console.c ****   case KEY_F6:
 3859              		.loc 2 92 9 is_stmt 0 view .LVU1090
 3860 0178 FFF7FEFF 		bl	cur_shift
 3861              	.LVL353:
  92:src/console.c ****   case KEY_F6:
 3862              		.loc 2 92 8 view .LVU1091
 3863 017c 0128     		cmp	r0, #1
 3864 017e 00F0B681 		beq	.L406
 3865              	.L337:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3866              		.loc 2 94 5 is_stmt 1 view .LVU1092
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
ARM GAS  /tmp/cczIC8Cx.s 			page 109


 3867              		.loc 2 94 9 is_stmt 0 view .LVU1093
 3868 0182 FFF7FEFF 		bl	cur_shift
 3869              	.LVL354:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3870              		.loc 2 94 8 view .LVU1094
 3871 0186 0028     		cmp	r0, #0
 3872 0188 40F04281 		bne	.L349
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3873              		.loc 2 94 33 is_stmt 1 view .LVU1095
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3874              		.loc 2 94 51 is_stmt 0 view .LVU1096
 3875 018c DDE93001 		ldrd	r0, r1, [sp, #192]
 3876 0190 9DF8C050 		ldrb	r5, [sp, #192]	@ zero_extendqisi2
 3877              	.LVL355:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3878              		.loc 2 94 51 view .LVU1097
 3879 0194 0DF1080A 		add	r10, sp, #8
 3880              	.LBE144:
 3881              	.LBE143:
 521:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3882              		.loc 2 521 10 view .LVU1098
 3883 0198 2F2D     		cmp	r5, #47
 3884              	.LBB153:
 3885              	.LBB146:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3886              		.loc 2 94 51 view .LVU1099
 3887 019a 8AE80300 		stm	r10, {r0, r1}
 3888 019e 8946     		mov	r9, r1
 3889              	.LVL356:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3890              		.loc 2 94 51 view .LVU1100
 3891              	.LBE146:
 3892              	.LBE153:
 3893              		.loc 2 521 7 is_stmt 1 view .LVU1101
 3894              		.loc 2 521 10 is_stmt 0 view .LVU1102
 3895 01a0 69D1     		bne	.L360
 3896              	.LVL357:
 3897              	.L409:
 522:src/console.c **** 	set_menu ( remapped.shift );
 3898              		.loc 2 522 2 is_stmt 1 view .LVU1103
 3899              	.LBB154:
 3900              	.LBB155:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3901              		.loc 1 109 13 is_stmt 0 view .LVU1104
 3902 01a2 614A     		ldr	r2, .L415+76
 3903 01a4 92F90030 		ldrsb	r3, [r2]
 3904              	.LBE155:
 3905              	.LBE154:
 3906              		.loc 2 522 2 view .LVU1105
 3907 01a8 4FFA89F1 		sxtb	r1, r9
 3908              	.LVL358:
 3909              	.LBB158:
 3910              	.LBI154:
 108:src/menu.c    ****   menu_name m = current_menu;
 3911              		.loc 1 108 6 is_stmt 1 view .LVU1106
 3912              	.LBB156:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
ARM GAS  /tmp/cczIC8Cx.s 			page 110


 3913              		.loc 1 109 3 view .LVU1107
 110:src/menu.c    ****     current_menu = default_menu;
 3914              		.loc 1 110 3 view .LVU1108
 110:src/menu.c    ****     current_menu = default_menu;
 3915              		.loc 1 110 6 is_stmt 0 view .LVU1109
 3916 01ac 9942     		cmp	r1, r3
 3917 01ae 00F02B81 		beq	.L407
 113:src/menu.c    ****     current_menu = last_menu;
 3918              		.loc 1 113 8 is_stmt 1 view .LVU1110
 113:src/menu.c    ****     current_menu = last_menu;
 3919              		.loc 1 113 11 is_stmt 0 view .LVU1111
 3920 01b2 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 3921              		.loc 1 114 5 is_stmt 1 view .LVU1112
 114:src/menu.c    ****   }
 3922              		.loc 1 114 18 is_stmt 0 view .LVU1113
 3923 01b4 04BF     		itt	eq
 3924 01b6 5D49     		ldreq	r1, .L415+80
 3925              	.LVL359:
 114:src/menu.c    ****   }
 3926              		.loc 1 114 18 view .LVU1114
 3927 01b8 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 3928              		.loc 1 117 5 is_stmt 1 view .LVU1115
 117:src/menu.c    ****   }
 3929              		.loc 1 117 18 is_stmt 0 view .LVU1116
 3930 01ba 1170     		strb	r1, [r2]
 3931              	.LVL360:
 3932              	.L362:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3933              		.loc 1 119 3 is_stmt 1 view .LVU1117
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3934              		.loc 1 119 6 is_stmt 0 view .LVU1118
 3935 01bc 092B     		cmp	r3, #9
 3936 01be 03D0     		beq	.L364
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3937              		.loc 1 119 23 view .LVU1119
 3938 01c0 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3939              		.loc 1 119 43 is_stmt 1 view .LVU1120
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3940              		.loc 1 119 53 is_stmt 0 view .LVU1121
 3941 01c2 1CBF     		itt	ne
 3942 01c4 594A     		ldrne	r2, .L415+80
 3943 01c6 1370     		strbne	r3, [r2]
 3944              	.L364:
 3945              	.LVL361:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3946              		.loc 1 119 53 view .LVU1122
 3947              	.LBE156:
 3948              	.LBE158:
 523:src/console.c **** 	display_current_menu ();
 3949              		.loc 2 523 2 is_stmt 1 view .LVU1123
 3950 01c8 FFF7FEFF 		bl	display_current_menu
 3951              	.LVL362:
 524:src/console.c **** 	reset_shift();
 3952              		.loc 2 524 2 view .LVU1124
ARM GAS  /tmp/cczIC8Cx.s 			page 111


 3953 01cc FFF7FEFF 		bl	reset_shift
 3954              	.LVL363:
 525:src/console.c **** 	remapped = no_key;
 3955              		.loc 2 525 2 view .LVU1125
 3956              		.loc 2 525 11 is_stmt 0 view .LVU1126
 3957 01d0 574B     		ldr	r3, .L415+84
 3958 01d2 93E80300 		ldm	r3, {r0, r1}
 3959 01d6 0DF1080A 		add	r10, sp, #8
 3960 01da 8AE80300 		stm	r10, {r0, r1}
 3961 01de 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3962              	.LVL364:
 3963              		.loc 2 525 11 view .LVU1127
 3964 01e0 8946     		mov	r9, r1
 3965              	.LVL365:
 3966              		.loc 2 525 11 view .LVU1128
 3967 01e2 48E0     		b	.L360
 3968              	.LVL366:
 3969              	.L315:
 452:src/console.c ****     {
 3970              		.loc 2 452 10 is_stmt 1 view .LVU1129
 452:src/console.c ****     {
 3971              		.loc 2 452 15 is_stmt 0 view .LVU1130
 3972 01e4 2568     		ldr	r5, [r4]
 452:src/console.c ****     {
 3973              		.loc 2 452 13 view .LVU1131
 3974 01e6 15F40075 		ands	r5, r5, #512
 3975 01ea 7FF44CAF 		bne	.L316
 452:src/console.c ****     {
 3976              		.loc 2 452 35 discriminator 1 view .LVU1132
 3977 01ee B847     		blx	r7
 3978              	.LVL367:
 452:src/console.c ****     {
 3979              		.loc 2 452 32 discriminator 1 view .LVU1133
 3980 01f0 0028     		cmp	r0, #0
 3981 01f2 3FF448AF 		beq	.L316
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3982              		.loc 2 454 7 is_stmt 1 view .LVU1134
 3983 01f6 2368     		ldr	r3, [r4]
 3984 01f8 23F00203 		bic	r3, r3, #2
 455:src/console.c ****       sys_sleep();
 3985              		.loc 2 455 7 is_stmt 0 view .LVU1135
 3986 01fc 2846     		mov	r0, r5
 3987 01fe 6421     		movs	r1, #100
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3988              		.loc 2 454 7 view .LVU1136
 3989 0200 2360     		str	r3, [r4]
 455:src/console.c ****       sys_sleep();
 3990              		.loc 2 455 7 is_stmt 1 view .LVU1137
 3991 0202 C047     		blx	r8
 3992              	.LVL368:
 456:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 3993              		.loc 2 456 7 view .LVU1138
 3994 0204 3E4B     		ldr	r3, .L415+36
 3995 0206 9847     		blx	r3
 3996              	.LVL369:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 3997              		.loc 2 457 7 view .LVU1139
ARM GAS  /tmp/cczIC8Cx.s 			page 112


 457:src/console.c **** 	key_push (K_HEARTBEAT);
 3998              		.loc 2 457 11 is_stmt 0 view .LVU1140
 3999 0208 4A4B     		ldr	r3, .L415+88
 4000 020a 2846     		mov	r0, r5
 4001 020c 9847     		blx	r3
 4002              	.LVL370:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4003              		.loc 2 457 10 view .LVU1141
 4004 020e 48B1     		cbz	r0, .L320
 458:src/console.c **** 	if (Pause > 0) Pause--;
 4005              		.loc 2 458 2 is_stmt 1 view .LVU1142
 4006 0210 494B     		ldr	r3, .L415+92
 4007 0212 6220     		movs	r0, #98
 4008 0214 9847     		blx	r3
 4009              	.LVL371:
 459:src/console.c ****       }
 4010              		.loc 2 459 2 view .LVU1143
 459:src/console.c ****       }
 4011              		.loc 2 459 12 is_stmt 0 view .LVU1144
 4012 0216 424B     		ldr	r3, .L415+68
 4013 0218 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 459:src/console.c ****       }
 4014              		.loc 2 459 5 view .LVU1145
 4015 021a 1AB1     		cbz	r2, .L320
 459:src/console.c ****       }
 4016              		.loc 2 459 17 is_stmt 1 discriminator 1 view .LVU1146
 459:src/console.c ****       }
 4017              		.loc 2 459 22 is_stmt 0 discriminator 1 view .LVU1147
 4018 021c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4019 021e 013A     		subs	r2, r2, #1
 4020 0220 D2B2     		uxtb	r2, r2
 4021 0222 1A70     		strb	r2, [r3]
 4022              	.L320:
 461:src/console.c ****     }
 4023              		.loc 2 461 7 is_stmt 1 view .LVU1148
 4024 0224 454B     		ldr	r3, .L415+96
 4025 0226 0020     		movs	r0, #0
 4026 0228 9847     		blx	r3
 4027              	.LVL372:
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4028              		.loc 2 465 5 view .LVU1149
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4029              		.loc 2 465 9 is_stmt 0 view .LVU1150
 4030 022a 2368     		ldr	r3, [r4]
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4031              		.loc 2 465 8 view .LVU1151
 4032 022c 9805     		lsls	r0, r3, #22
 4033 022e 7FF52EAF 		bpl	.L408
 4034              	.L322:
 466:src/console.c ****         // Going to off mode
 4035              		.loc 2 466 7 is_stmt 1 view .LVU1152
 466:src/console.c ****         // Going to off mode
 4036              		.loc 2 466 12 is_stmt 0 view .LVU1153
 4037 0232 2568     		ldr	r5, [r4]
 466:src/console.c ****         // Going to off mode
 4038              		.loc 2 466 10 view .LVU1154
 4039 0234 15F00405 		ands	r5, r5, #4
ARM GAS  /tmp/cczIC8Cx.s 			page 113


 4040 0238 7FF417AF 		bne	.L314
 468:src/console.c ****         draw_power_off_image(1);
 4041              		.loc 2 468 9 is_stmt 1 view .LVU1155
 4042 023c 404B     		ldr	r3, .L415+100
 4043 023e 2846     		mov	r0, r5
 4044 0240 9847     		blx	r3
 4045              	.LVL373:
 469:src/console.c **** 
 4046              		.loc 2 469 9 view .LVU1156
 4047 0242 404B     		ldr	r3, .L415+104
 4048 0244 0120     		movs	r0, #1
 4049 0246 9847     		blx	r3
 4050              	.LVL374:
 471:src/console.c ****         SET_ST(STAT_SUSPENDED);
 4051              		.loc 2 471 9 view .LVU1157
 4052 0248 3F4B     		ldr	r3, .L415+108
 4053 024a 2846     		mov	r0, r5
 4054 024c 9847     		blx	r3
 4055              	.LVL375:
 472:src/console.c ****         SET_ST(STAT_OFF);
 4056              		.loc 2 472 9 view .LVU1158
 4057 024e 2368     		ldr	r3, [r4]
 4058 0250 43F00403 		orr	r3, r3, #4
 4059 0254 2360     		str	r3, [r4]
 473:src/console.c ****       }
 4060              		.loc 2 473 9 view .LVU1159
 4061 0256 2368     		ldr	r3, [r4]
 4062 0258 43F01003 		orr	r3, r3, #16
 4063 025c 2360     		str	r3, [r4]
 4064 025e 04E7     		b	.L314
 4065              	.LVL376:
 4066              	.L331:
 519:src/console.c ****       remapped = remap(c);
 4067              		.loc 2 519 5 view .LVU1160
 520:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 4068              		.loc 2 520 7 view .LVU1161
 4069              	.LBB159:
  56:src/console.c **** 
 4070              		.loc 2 56 22 view .LVU1162
 4071              	.LBB147:
  58:src/console.c **** 
 4072              		.loc 2 58 3 view .LVU1163
   1:src/keytran.c ****     {K_RELEASE, -1},
 4073              		.loc 3 1 1 view .LVU1164
  59:src/keytran.c ****     {K_RELEASE, -1},
 4074              		.loc 3 59 3 view .LVU1165
 118:src/keytran.c ****     {K_RELEASE, -1},
 4075              		.loc 3 118 3 view .LVU1166
 177:src/keytran.c ****     {K_RELEASE, -1},
 4076              		.loc 3 177 1 view .LVU1167
 4077              		.loc 3 235 1 view .LVU1168
  62:src/console.c **** 
 4078              		.loc 2 62 3 view .LVU1169
  62:src/console.c **** 
 4079              		.loc 2 62 23 view .LVU1170
  62:src/console.c **** 
 4080              		.loc 2 62 30 is_stmt 0 view .LVU1171
ARM GAS  /tmp/cczIC8Cx.s 			page 114


 4081 0260 3A4B     		ldr	r3, .L415+112
 4082              	.LVL377:
 4083              	.L395:
  62:src/console.c **** 
 4084              		.loc 2 62 30 view .LVU1172
 4085 0262 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4086              	.LVL378:
  62:src/console.c **** 
 4087              		.loc 2 62 30 view .LVU1173
 4088 0264 93E80300 		ldm	r3, {r0, r1}
 4089 0268 0DF1080A 		add	r10, sp, #8
 4090 026c 8AE80300 		stm	r10, {r0, r1}
 4091 0270 8946     		mov	r9, r1
 4092              	.LVL379:
 4093              	.L333:
  62:src/console.c **** 
 4094              		.loc 2 62 30 view .LVU1174
 4095              	.LBE147:
 4096              	.LBE159:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4097              		.loc 2 521 7 is_stmt 1 view .LVU1175
 521:src/console.c **** 	set_menu ( remapped.shift );
 4098              		.loc 2 521 10 is_stmt 0 view .LVU1176
 4099 0272 2F2D     		cmp	r5, #47
 4100 0274 95D0     		beq	.L409
 4101              	.L360:
 526:src/console.c ****       }
 527:src/console.c ****       if (remapped.key_34s == K_SYS) {
 4102              		.loc 2 527 7 is_stmt 1 view .LVU1177
 4103              		.loc 2 527 10 is_stmt 0 view .LVU1178
 4104 0276 302D     		cmp	r5, #48
 4105 0278 19D1     		bne	.L365
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4106              		.loc 2 528 2 is_stmt 1 view .LVU1179
 4107 027a 2368     		ldr	r3, [r4]
 529:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 4108              		.loc 2 529 2 is_stmt 0 view .LVU1180
 4109 027c 344D     		ldr	r5, .L415+116
 4110              	.LVL380:
 4111              		.loc 2 529 2 view .LVU1181
 4112 027e 3548     		ldr	r0, .L415+120
 4113 0280 0022     		movs	r2, #0
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4114              		.loc 2 528 2 view .LVU1182
 4115 0282 43F04003 		orr	r3, r3, #64
 4116              		.loc 2 529 2 view .LVU1183
 4117 0286 1146     		mov	r1, r2
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4118              		.loc 2 528 2 view .LVU1184
 4119 0288 2360     		str	r3, [r4]
 4120              		.loc 2 529 2 is_stmt 1 view .LVU1185
 4121 028a A847     		blx	r5
 4122              	.LVL381:
 530:src/console.c **** 	CLR_ST(STAT_MENU);
 4123              		.loc 2 530 2 view .LVU1186
 4124 028c 2368     		ldr	r3, [r4]
 4125 028e 23F04003 		bic	r3, r3, #64
ARM GAS  /tmp/cczIC8Cx.s 			page 115


 4126 0292 2360     		str	r3, [r4]
 531:src/console.c **** 	reset_shift();
 4127              		.loc 2 531 2 view .LVU1187
 4128 0294 FFF7FEFF 		bl	reset_shift
 4129              	.LVL382:
 532:src/console.c **** 	remapped =  no_key;
 4130              		.loc 2 532 2 view .LVU1188
 4131              		.loc 2 532 11 is_stmt 0 view .LVU1189
 4132 0298 254B     		ldr	r3, .L415+84
 4133 029a 93E80300 		ldm	r3, {r0, r1}
 4134 029e 0DF1080A 		add	r10, sp, #8
 4135 02a2 8AE80300 		stm	r10, {r0, r1}
 4136 02a6 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4137              	.LVL383:
 4138              		.loc 2 532 11 view .LVU1190
 4139 02a8 8946     		mov	r9, r1
 4140              	.LVL384:
 533:src/console.c **** 	display_current_menu();
 4141              		.loc 2 533 2 is_stmt 1 view .LVU1191
 4142 02aa FFF7FEFF 		bl	display_current_menu
 4143              	.LVL385:
 4144              	.L365:
 534:src/console.c ****       }
 535:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 4145              		.loc 2 535 7 view .LVU1192
 4146              		.loc 2 535 10 is_stmt 0 view .LVU1193
 4147 02ae 312D     		cmp	r5, #49
 4148 02b0 7BD0     		beq	.L368
 536:src/console.c **** 	remapped = do_multi (remapped);
 537:src/console.c **** 	display_current_menu();
 538:src/console.c ****       }
 539:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 4149              		.loc 2 539 7 is_stmt 1 view .LVU1194
 4150              		.loc 2 539 10 is_stmt 0 view .LVU1195
 4151 02b2 322D     		cmp	r5, #50
 4152 02b4 00F09380 		beq	.L367
 4153              	.L411:
 4154              		.loc 2 539 10 view .LVU1196
 4155 02b8 0DF1080A 		add	r10, sp, #8
 4156              	.LVL386:
 4157              	.L355:
 540:src/console.c ****       process_keycode_with_shift(remapped);
 4158              		.loc 2 540 7 is_stmt 1 view .LVU1197
 4159              		.loc 2 540 7 is_stmt 0 view .LVU1198
 4160 02bc 8DF80850 		strb	r5, [sp, #8]
 4161 02c0 CDF80C90 		str	r9, [sp, #12]
 4162 02c4 9AE80300 		ldm	r10, {r0, r1}
 4163 02c8 FFF7FEFF 		bl	process_keycode_with_shift
 4164              	.LVL387:
 541:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4165              		.loc 2 541 7 is_stmt 1 view .LVU1199
 4166              		.loc 2 541 10 is_stmt 0 view .LVU1200
 4167 02cc 622D     		cmp	r5, #98
 4168 02ce 64D0     		beq	.L410
 4169              	.LVL388:
 4170              	.L356:
 4171              		.loc 2 541 59 is_stmt 1 view .LVU1201
ARM GAS  /tmp/cczIC8Cx.s 			page 116


 4172              	.LBB160:
 4173              	.LBI160:
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 4174              		.loc 2 252 6 view .LVU1202
 4175              	.LBB161:
 253:src/console.c **** }
 4176              		.loc 2 253 5 view .LVU1203
 253:src/console.c **** }
 4177              		.loc 2 253 19 is_stmt 0 view .LVU1204
 4178 02d0 214B     		ldr	r3, .L415+124
 4179 02d2 9847     		blx	r3
 4180              	.LVL389:
 253:src/console.c **** }
 4181              		.loc 2 253 17 view .LVU1205
 4182 02d4 214B     		ldr	r3, .L415+128
 4183 02d6 1860     		str	r0, [r3]
 254:src/console.c **** 
 4184              		.loc 2 254 1 view .LVU1206
 4185 02d8 C7E6     		b	.L314
 4186              	.L416:
 4187 02da 00BF     		.align	2
 4188              	.L415:
 4189 02dc 00000000 		.word	StateWhileOn
 4190 02e0 00000000 		.word	DispMsg
 4191 02e4 00200010 		.word	268443648
 4192 02e8 00000000 		.word	KeyCallback
 4193 02ec 7D030008 		.word	134218621
 4194 02f0 00000000 		.word	run_menu_item
 4195 02f4 00000000 		.word	menu_line_str
 4196 02f8 31020008 		.word	134218289
 4197 02fc 00000000 		.word	JustDisplayed
 4198 0300 19040008 		.word	134218777
 4199 0304 19020008 		.word	134218265
 4200 0308 91030008 		.word	134218641
 4201 030c E5020008 		.word	134218469
 4202 0310 59020008 		.word	134218329
 4203 0314 35020008 		.word	134218293
 4204 0318 89030008 		.word	134218633
 4205 031c B9030008 		.word	134218681
 4206 0320 00000000 		.word	Pause
 4207 0324 00000000 		.word	Running
 4208 0328 00000000 		.word	.LANCHOR1
 4209 032c 00000000 		.word	.LANCHOR3
 4210 0330 00000000 		.word	.LANCHOR10
 4211 0334 01040008 		.word	134218753
 4212 0338 81030008 		.word	134218625
 4213 033c F5030008 		.word	134218741
 4214 0340 55020008 		.word	134218325
 4215 0344 2D040008 		.word	134218797
 4216 0348 1D020008 		.word	134218269
 4217 034c 00000000 		.word	.LANCHOR19
 4218 0350 59030008 		.word	134218585
 4219 0354 00000000 		.word	.LANCHOR18
 4220 0358 B9040008 		.word	134218937
 4221 035c 00000000 		.word	.LANCHOR8
 4222 0360 F9030008 		.word	134218745
 4223              	.LVL390:
ARM GAS  /tmp/cczIC8Cx.s 			page 117


 4224              	.L329:
 254:src/console.c **** 
 4225              		.loc 2 254 1 view .LVU1207
 4226              	.LBE161:
 4227              	.LBE160:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4228              		.loc 2 510 10 is_stmt 1 view .LVU1208
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4229              		.loc 2 510 15 is_stmt 0 view .LVU1209
 4230 0364 8D4B     		ldr	r3, .L417
 4231 0366 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4232              		.loc 2 510 13 view .LVU1210
 4233 0368 DB07     		lsls	r3, r3, #31
 4234 036a 7FF5B7AE 		bpl	.L330
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4235              		.loc 2 510 37 discriminator 1 view .LVU1211
 4236 036e FFF7FEFF 		bl	DM42_Ticker
 4237              	.LVL391:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4238              		.loc 2 510 37 discriminator 1 view .LVU1212
 4239 0372 8B4A     		ldr	r2, .L417+4
 4240 0374 8B4B     		ldr	r3, .L417+8
 4241 0376 02FB0030 		mla	r0, r2, r0, r3
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4242              		.loc 2 510 32 discriminator 1 view .LVU1213
 4243 037a B0F1333F 		cmp	r0, #858993459
 4244 037e BFF4ADAE 		bcs	.L330
 511:src/console.c ****       finish_LEQ();
 4245              		.loc 2 511 7 is_stmt 1 view .LVU1214
 511:src/console.c ****       finish_LEQ();
 4246              		.loc 2 511 21 is_stmt 0 view .LVU1215
 4247 0382 8420     		movs	r0, #132
 4248 0384 FFF7FEFF 		bl	is_dot
 4249              	.LVL392:
 511:src/console.c ****       finish_LEQ();
 4250              		.loc 2 511 7 view .LVU1216
 4251 0388 B0FA80F1 		clz	r1, r0
 4252 038c 4909     		lsrs	r1, r1, #5
 4253 038e 8420     		movs	r0, #132
 4254 0390 FFF7FEFF 		bl	dot
 4255              	.LVL393:
 512:src/console.c ****     }
 4256              		.loc 2 512 7 is_stmt 1 view .LVU1217
 4257 0394 FFF7FEFF 		bl	finish_LEQ
 4258              	.LVL394:
 4259 0398 A0E6     		b	.L330
 4260              	.LVL395:
 4261              	.L410:
 4262              		.loc 2 541 43 is_stmt 0 discriminator 2 view .LVU1218
 4263 039a 834B     		ldr	r3, .L417+12
 4264 039c 1B68     		ldr	r3, [r3]
 4265 039e 002B     		cmp	r3, #0
 4266 03a0 3FF463AE 		beq	.L314
 4267 03a4 94E7     		b	.L356
 4268              	.LVL396:
 4269              	.L334:
ARM GAS  /tmp/cczIC8Cx.s 			page 118


 521:src/console.c **** 	set_menu ( remapped.shift );
 4270              		.loc 2 521 7 is_stmt 1 view .LVU1219
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4271              		.loc 2 527 7 view .LVU1220
 535:src/console.c **** 	remapped = do_multi (remapped);
 4272              		.loc 2 535 7 view .LVU1221
 4273              	.LBB162:
 4274              	.LBB148:
 4275              	.LBB145:
  68:src/console.c ****   }
 4276              		.loc 2 68 12 is_stmt 0 view .LVU1222
 4277 03a6 4FF00C09 		mov	r9, #12
 4278              	.LVL397:
 4279              	.L368:
  68:src/console.c ****   }
 4280              		.loc 2 68 12 view .LVU1223
 4281              	.LBE145:
 4282              	.LBE148:
 4283              	.LBE162:
 536:src/console.c **** 	display_current_menu();
 4284              		.loc 2 536 2 is_stmt 1 view .LVU1224
 536:src/console.c **** 	display_current_menu();
 4285              		.loc 2 536 13 is_stmt 0 view .LVU1225
 4286 03aa 3123     		movs	r3, #49
 4287 03ac CDF80C90 		str	r9, [sp, #12]
 4288 03b0 8DF80830 		strb	r3, [sp, #8]
 4289 03b4 6D46     		mov	r5, sp
 4290 03b6 0DF1080A 		add	r10, sp, #8
 4291 03ba 9AE80600 		ldm	r10, {r1, r2}
 4292 03be 2846     		mov	r0, r5
 4293 03c0 FFF7FEFF 		bl	do_multi
 4294              	.LVL398:
 4295 03c4 95E80300 		ldm	r5, {r0, r1}
 4296 03c8 8AE80300 		stm	r10, {r0, r1}
 4297 03cc 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 4298              	.LVL399:
 536:src/console.c **** 	display_current_menu();
 4299              		.loc 2 536 13 view .LVU1226
 4300 03d0 DDF80C90 		ldr	r9, [sp, #12]
 4301              	.LVL400:
 537:src/console.c ****       }
 4302              		.loc 2 537 2 is_stmt 1 view .LVU1227
 4303 03d4 FFF7FEFF 		bl	display_current_menu
 4304              	.LVL401:
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4305              		.loc 2 539 7 view .LVU1228
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4306              		.loc 2 539 10 is_stmt 0 view .LVU1229
 4307 03d8 322D     		cmp	r5, #50
 4308 03da 7FF46DAF 		bne	.L411
 4309              	.L367:
 542:src/console.c ****     }
 543:src/console.c ****   }
 544:src/console.c ****   save_ram_file(0);
 4310              		.loc 2 544 3 is_stmt 1 view .LVU1230
 4311 03de 0020     		movs	r0, #0
 545:src/console.c ****   //  free_storage();
ARM GAS  /tmp/cczIC8Cx.s 			page 119


 546:src/console.c ****   return;
 547:src/console.c **** }
 4312              		.loc 2 547 1 is_stmt 0 view .LVU1231
 4313 03e0 38B0     		add	sp, sp, #224
 4314              		.cfi_remember_state
 4315              		.cfi_def_cfa_offset 32
 4316              		@ sp needed
 4317 03e2 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 4318              		.cfi_restore 14
 4319              		.cfi_restore 10
 4320              		.cfi_restore 9
 4321              		.cfi_restore 8
 4322              		.cfi_restore 7
 4323              		.cfi_restore 6
 4324              		.cfi_restore 5
 4325              		.cfi_restore 4
 4326              		.cfi_def_cfa_offset 0
 4327              	.LVL402:
 544:src/console.c ****   //  free_storage();
 4328              		.loc 2 544 3 view .LVU1232
 4329 03e6 FFF7FEBF 		b	save_ram_file
 4330              	.LVL403:
 4331              	.L397:
 4332              		.cfi_restore_state
 4333              	.LBB163:
 4334              	.LBB149:
  72:src/console.c ****   }
 4335              		.loc 2 72 5 is_stmt 1 view .LVU1233
  72:src/console.c ****   }
 4336              		.loc 2 72 27 is_stmt 0 view .LVU1234
 4337 03ea 704B     		ldr	r3, .L417+16
 4338              	.L394:
 124:src/console.c ****     break;
 4339              		.loc 2 124 26 view .LVU1235
 4340 03ec 03EBC502 		add	r2, r3, r5, lsl #3
 4341 03f0 92E80300 		ldm	r2, {r0, r1}
 4342 03f4 0DF1080A 		add	r10, sp, #8
 4343 03f8 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4344              	.LVL404:
 124:src/console.c ****     break;
 4345              		.loc 2 124 26 view .LVU1236
 4346 03fc 8946     		mov	r9, r1
 4347              	.LVL405:
 124:src/console.c ****     break;
 4348              		.loc 2 124 26 view .LVU1237
 4349 03fe 8AE80300 		stm	r10, {r0, r1}
 4350 0402 36E7     		b	.L333
 4351              	.LVL406:
 4352              	.L396:
  64:src/console.c **** 
 4353              		.loc 2 64 16 is_stmt 1 view .LVU1238
  64:src/console.c **** 
 4354              		.loc 2 64 23 is_stmt 0 view .LVU1239
 4355 0404 6A4B     		ldr	r3, .L417+20
 4356 0406 2CE7     		b	.L395
 4357              	.LVL407:
 4358              	.L407:
ARM GAS  /tmp/cczIC8Cx.s 			page 120


  64:src/console.c **** 
 4359              		.loc 2 64 23 view .LVU1240
 4360              	.LBE149:
 4361              	.LBE163:
 4362              	.LBB164:
 4363              	.LBB157:
 111:src/menu.c    ****   }
 4364              		.loc 1 111 5 is_stmt 1 view .LVU1241
 111:src/menu.c    ****   }
 4365              		.loc 1 111 18 is_stmt 0 view .LVU1242
 4366 0408 6A49     		ldr	r1, .L417+24
 4367              	.LVL408:
 111:src/menu.c    ****   }
 4368              		.loc 1 111 18 view .LVU1243
 4369 040a 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4370 040c 1170     		strb	r1, [r2]
 4371 040e D5E6     		b	.L362
 4372              	.LVL409:
 4373              	.L349:
 111:src/menu.c    ****   }
 4374              		.loc 1 111 18 view .LVU1244
 4375              	.LBE157:
 4376              	.LBE164:
 4377              	.LBB165:
 4378              	.LBB150:
  95:src/console.c ****   }
 4379              		.loc 2 95 5 is_stmt 1 view .LVU1245
  95:src/console.c ****   }
 4380              		.loc 2 95 9 is_stmt 0 view .LVU1246
 4381 0410 FFF7FEFF 		bl	cur_shift
 4382              	.LVL410:
  95:src/console.c ****   }
 4383              		.loc 2 95 8 view .LVU1247
 4384 0414 0128     		cmp	r0, #1
 4385 0416 56D0     		beq	.L412
 4386              	.L336:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4387              		.loc 2 98 3 is_stmt 1 view .LVU1248
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4388              		.loc 2 98 8 is_stmt 0 view .LVU1249
 4389 0418 FFF7FEFF 		bl	get_alpha_state
 4390              	.LVL411:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4391              		.loc 2 98 6 view .LVU1250
 4392 041c D8B3     		cbz	r0, .L350
  99:src/console.c ****       switch (cur_shift()) { 
 4393              		.loc 2 99 5 is_stmt 1 view .LVU1251
  99:src/console.c ****       switch (cur_shift()) { 
 4394              		.loc 2 99 8 is_stmt 0 view .LVU1252
 4395 041e 1C2D     		cmp	r5, #28
 4396 0420 00F08580 		beq	.L413
 116:src/console.c ****   }
 4397              		.loc 2 116 5 is_stmt 1 view .LVU1253
 116:src/console.c ****   }
 4398              		.loc 2 116 26 is_stmt 0 view .LVU1254
 4399 0424 644B     		ldr	r3, .L417+28
 4400 0426 E1E7     		b	.L394
ARM GAS  /tmp/cczIC8Cx.s 			page 121


 4401              	.L343:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4402              		.loc 2 79 5 is_stmt 1 view .LVU1255
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4403              		.loc 2 79 9 is_stmt 0 view .LVU1256
 4404 0428 FFF7FEFF 		bl	cur_shift
 4405              	.LVL412:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4406              		.loc 2 79 8 view .LVU1257
 4407 042c 0028     		cmp	r0, #0
 4408 042e 7FF47BAE 		bne	.L344
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4409              		.loc 2 79 33 is_stmt 1 view .LVU1258
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4410              		.loc 2 79 51 is_stmt 0 view .LVU1259
 4411 0432 DDE90801 		ldrd	r0, r1, [sp, #32]
 4412 0436 0DF1080A 		add	r10, sp, #8
 4413 043a 8AE80300 		stm	r10, {r0, r1}
 4414 043e 9DF82050 		ldrb	r5, [sp, #32]	@ zero_extendqisi2
 4415              	.LVL413:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4416              		.loc 2 79 51 view .LVU1260
 4417 0442 8946     		mov	r9, r1
 4418              	.LVL414:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4419              		.loc 2 79 51 view .LVU1261
 4420 0444 15E7     		b	.L333
 4421              	.LVL415:
 4422              	.L405:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4423              		.loc 2 91 33 is_stmt 1 view .LVU1262
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4424              		.loc 2 91 51 is_stmt 0 view .LVU1263
 4425 0446 DDE92801 		ldrd	r0, r1, [sp, #160]
 4426 044a 0DF1080A 		add	r10, sp, #8
 4427 044e 8AE80300 		stm	r10, {r0, r1}
 4428 0452 9DF8A050 		ldrb	r5, [sp, #160]	@ zero_extendqisi2
 4429              	.LVL416:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4430              		.loc 2 91 51 view .LVU1264
 4431 0456 8946     		mov	r9, r1
 4432              	.LVL417:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4433              		.loc 2 91 51 view .LVU1265
 4434 0458 0BE7     		b	.L333
 4435              	.LVL418:
 4436              	.L403:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4437              		.loc 2 88 33 is_stmt 1 view .LVU1266
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4438              		.loc 2 88 51 is_stmt 0 view .LVU1267
 4439 045a DDE92001 		ldrd	r0, r1, [sp, #128]
 4440 045e 0DF1080A 		add	r10, sp, #8
 4441 0462 8AE80300 		stm	r10, {r0, r1}
 4442 0466 9DF88050 		ldrb	r5, [sp, #128]	@ zero_extendqisi2
 4443              	.LVL419:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
ARM GAS  /tmp/cczIC8Cx.s 			page 122


 4444              		.loc 2 88 51 view .LVU1268
 4445 046a 8946     		mov	r9, r1
 4446              	.LVL420:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4447              		.loc 2 88 51 view .LVU1269
 4448 046c 01E7     		b	.L333
 4449              	.LVL421:
 4450              	.L401:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4451              		.loc 2 85 33 is_stmt 1 view .LVU1270
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4452              		.loc 2 85 51 is_stmt 0 view .LVU1271
 4453 046e DDE91801 		ldrd	r0, r1, [sp, #96]
 4454 0472 0DF1080A 		add	r10, sp, #8
 4455 0476 8AE80300 		stm	r10, {r0, r1}
 4456 047a 9DF86050 		ldrb	r5, [sp, #96]	@ zero_extendqisi2
 4457              	.LVL422:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4458              		.loc 2 85 51 view .LVU1272
 4459 047e 8946     		mov	r9, r1
 4460              	.LVL423:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4461              		.loc 2 85 51 view .LVU1273
 4462 0480 F7E6     		b	.L333
 4463              	.LVL424:
 4464              	.L399:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4465              		.loc 2 82 33 is_stmt 1 view .LVU1274
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4466              		.loc 2 82 51 is_stmt 0 view .LVU1275
 4467 0482 DDE91001 		ldrd	r0, r1, [sp, #64]
 4468 0486 0DF1080A 		add	r10, sp, #8
 4469 048a 8AE80300 		stm	r10, {r0, r1}
 4470 048e 9DF84050 		ldrb	r5, [sp, #64]	@ zero_extendqisi2
 4471              	.LVL425:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4472              		.loc 2 82 51 view .LVU1276
 4473 0492 8946     		mov	r9, r1
 4474              	.LVL426:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4475              		.loc 2 82 51 view .LVU1277
 4476 0494 EDE6     		b	.L333
 4477              	.LVL427:
 4478              	.L350:
 119:src/console.c ****   case SHIFT_N:    
 4479              		.loc 2 119 3 is_stmt 1 view .LVU1278
 119:src/console.c ****   case SHIFT_N:    
 4480              		.loc 2 119 11 is_stmt 0 view .LVU1279
 4481 0496 FFF7FEFF 		bl	cur_shift
 4482              	.LVL428:
 119:src/console.c ****   case SHIFT_N:    
 4483              		.loc 2 119 3 view .LVU1280
 4484 049a 0128     		cmp	r0, #1
 4485 049c 45D0     		beq	.L357
 4486 049e 0228     		cmp	r0, #2
 4487 04a0 02D0     		beq	.L358
 4488 04a2 70B1     		cbz	r0, .L359
ARM GAS  /tmp/cczIC8Cx.s 			page 123


  58:src/console.c **** 
 4489              		.loc 2 58 41 view .LVU1281
 4490 04a4 EDB2     		uxtb	r5, r5
 4491              	.LVL429:
  58:src/console.c **** 
 4492              		.loc 2 58 41 view .LVU1282
 4493 04a6 E4E6     		b	.L333
 4494              	.LVL430:
 4495              	.L358:
 125:src/console.c ****   case SHIFT_G:
 4496              		.loc 2 125 5 is_stmt 1 view .LVU1283
 127:src/console.c ****     break;
 4497              		.loc 2 127 5 view .LVU1284
 127:src/console.c ****     break;
 4498              		.loc 2 127 26 is_stmt 0 view .LVU1285
 4499 04a8 444B     		ldr	r3, .L417+32
 4500 04aa 03EBC502 		add	r2, r3, r5, lsl #3
 4501 04ae 92E80300 		ldm	r2, {r0, r1}
 4502 04b2 0DF1080A 		add	r10, sp, #8
 4503 04b6 8AE80300 		stm	r10, {r0, r1}
 4504 04ba 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4505              	.LVL431:
 127:src/console.c ****     break;
 4506              		.loc 2 127 26 view .LVU1286
 4507 04be 8946     		mov	r9, r1
 4508              	.LVL432:
 127:src/console.c ****     break;
 4509              		.loc 2 127 26 view .LVU1287
 4510 04c0 D7E6     		b	.L333
 4511              	.LVL433:
 4512              	.L359:
 121:src/console.c ****     break;
 4513              		.loc 2 121 5 is_stmt 1 view .LVU1288
 121:src/console.c ****     break;
 4514              		.loc 2 121 24 is_stmt 0 view .LVU1289
 4515 04c2 3F4B     		ldr	r3, .L417+36
 4516 04c4 92E7     		b	.L394
 4517              	.L412:
  95:src/console.c ****   }
 4518              		.loc 2 95 33 is_stmt 1 view .LVU1290
  95:src/console.c ****   }
 4519              		.loc 2 95 51 is_stmt 0 view .LVU1291
 4520 04c6 DDE93201 		ldrd	r0, r1, [sp, #200]
 4521 04ca 0DF1080A 		add	r10, sp, #8
 4522 04ce 8AE80300 		stm	r10, {r0, r1}
 4523 04d2 9DF8C850 		ldrb	r5, [sp, #200]	@ zero_extendqisi2
 4524              	.LVL434:
  95:src/console.c ****   }
 4525              		.loc 2 95 51 view .LVU1292
 4526 04d6 8946     		mov	r9, r1
 4527              	.LVL435:
  95:src/console.c ****   }
 4528              		.loc 2 95 51 view .LVU1293
 4529 04d8 CBE6     		b	.L333
 4530              	.LVL436:
 4531              	.L404:
  89:src/console.c ****   case KEY_F5:
ARM GAS  /tmp/cczIC8Cx.s 			page 124


 4532              		.loc 2 89 33 is_stmt 1 view .LVU1294
  89:src/console.c ****   case KEY_F5:
 4533              		.loc 2 89 51 is_stmt 0 view .LVU1295
 4534 04da DDE92201 		ldrd	r0, r1, [sp, #136]
 4535 04de 0DF1080A 		add	r10, sp, #8
 4536 04e2 8AE80300 		stm	r10, {r0, r1}
 4537 04e6 9DF88850 		ldrb	r5, [sp, #136]	@ zero_extendqisi2
 4538              	.LVL437:
  89:src/console.c ****   case KEY_F5:
 4539              		.loc 2 89 51 view .LVU1296
 4540 04ea 8946     		mov	r9, r1
 4541              	.LVL438:
  89:src/console.c ****   case KEY_F5:
 4542              		.loc 2 89 51 view .LVU1297
 4543 04ec C1E6     		b	.L333
 4544              	.LVL439:
 4545              	.L406:
  92:src/console.c ****   case KEY_F6:
 4546              		.loc 2 92 33 is_stmt 1 view .LVU1298
  92:src/console.c ****   case KEY_F6:
 4547              		.loc 2 92 51 is_stmt 0 view .LVU1299
 4548 04ee DDE92A01 		ldrd	r0, r1, [sp, #168]
 4549 04f2 0DF1080A 		add	r10, sp, #8
 4550 04f6 8AE80300 		stm	r10, {r0, r1}
 4551 04fa 9DF8A850 		ldrb	r5, [sp, #168]	@ zero_extendqisi2
 4552              	.LVL440:
  92:src/console.c ****   case KEY_F6:
 4553              		.loc 2 92 51 view .LVU1300
 4554 04fe 8946     		mov	r9, r1
 4555              	.LVL441:
  92:src/console.c ****   case KEY_F6:
 4556              		.loc 2 92 51 view .LVU1301
 4557 0500 B7E6     		b	.L333
 4558              	.LVL442:
 4559              	.L402:
  86:src/console.c ****   case KEY_F4:
 4560              		.loc 2 86 33 is_stmt 1 view .LVU1302
  86:src/console.c ****   case KEY_F4:
 4561              		.loc 2 86 51 is_stmt 0 view .LVU1303
 4562 0502 DDE91A01 		ldrd	r0, r1, [sp, #104]
 4563 0506 0DF1080A 		add	r10, sp, #8
 4564 050a 8AE80300 		stm	r10, {r0, r1}
 4565 050e 9DF86850 		ldrb	r5, [sp, #104]	@ zero_extendqisi2
 4566              	.LVL443:
  86:src/console.c ****   case KEY_F4:
 4567              		.loc 2 86 51 view .LVU1304
 4568 0512 8946     		mov	r9, r1
 4569              	.LVL444:
  86:src/console.c ****   case KEY_F4:
 4570              		.loc 2 86 51 view .LVU1305
 4571 0514 ADE6     		b	.L333
 4572              	.LVL445:
 4573              	.L400:
  83:src/console.c ****   case KEY_F3:
 4574              		.loc 2 83 33 is_stmt 1 view .LVU1306
  83:src/console.c ****   case KEY_F3:
 4575              		.loc 2 83 51 is_stmt 0 view .LVU1307
ARM GAS  /tmp/cczIC8Cx.s 			page 125


 4576 0516 DDE91201 		ldrd	r0, r1, [sp, #72]
 4577 051a 0DF1080A 		add	r10, sp, #8
 4578 051e 8AE80300 		stm	r10, {r0, r1}
 4579 0522 9DF84850 		ldrb	r5, [sp, #72]	@ zero_extendqisi2
 4580              	.LVL446:
  83:src/console.c ****   case KEY_F3:
 4581              		.loc 2 83 51 view .LVU1308
 4582 0526 8946     		mov	r9, r1
 4583              	.LVL447:
  83:src/console.c ****   case KEY_F3:
 4584              		.loc 2 83 51 view .LVU1309
 4585 0528 A3E6     		b	.L333
 4586              	.LVL448:
 4587              	.L357:
 122:src/console.c ****   case SHIFT_F:
 4588              		.loc 2 122 5 is_stmt 1 view .LVU1310
 124:src/console.c ****     break;
 4589              		.loc 2 124 5 view .LVU1311
 124:src/console.c ****     break;
 4590              		.loc 2 124 26 is_stmt 0 view .LVU1312
 4591 052a 264B     		ldr	r3, .L417+40
 4592 052c 5EE7     		b	.L394
 4593              	.L413:
 100:src/console.c ****       case SHIFT_N:
 4594              		.loc 2 100 7 is_stmt 1 view .LVU1313
 100:src/console.c ****       case SHIFT_N:
 4595              		.loc 2 100 15 is_stmt 0 view .LVU1314
 4596 052e FFF7FEFF 		bl	cur_shift
 4597              	.LVL449:
 100:src/console.c ****       case SHIFT_N:
 4598              		.loc 2 100 7 view .LVU1315
 4599 0532 0328     		cmp	r0, #3
 4600 0534 28D8     		bhi	.L352
 4601 0536 0128     		cmp	r0, #1
 4602 0538 11D8     		bhi	.L353
 4603 053a E0B1     		cbz	r0, .L414
 103:src/console.c ****       case SHIFT_F:
 4604              		.loc 2 103 2 is_stmt 1 view .LVU1316
 105:src/console.c **** 	break;
 4605              		.loc 2 105 2 view .LVU1317
 105:src/console.c **** 	break;
 4606              		.loc 2 105 23 is_stmt 0 view .LVU1318
 4607 053c 224B     		ldr	r3, .L417+44
 4608 053e 93E80300 		ldm	r3, {r0, r1}
 4609 0542 0DF1080A 		add	r10, sp, #8
 4610 0546 8AE80300 		stm	r10, {r0, r1}
 4611              	.LVL450:
 105:src/console.c **** 	break;
 4612              		.loc 2 105 23 view .LVU1319
 4613              	.LBE150:
 4614              	.LBE165:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4615              		.loc 2 521 7 is_stmt 1 view .LVU1320
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4616              		.loc 2 527 7 view .LVU1321
 535:src/console.c **** 	remapped = do_multi (remapped);
 4617              		.loc 2 535 7 view .LVU1322
ARM GAS  /tmp/cczIC8Cx.s 			page 126


 539:src/console.c ****       process_keycode_with_shift(remapped);
 4618              		.loc 2 539 7 view .LVU1323
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4619              		.loc 2 540 7 view .LVU1324
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4620              		.loc 2 540 7 is_stmt 0 view .LVU1325
 4621 054a 2A22     		movs	r2, #42
 4622 054c 0023     		movs	r3, #0
 4623 054e 8DF80820 		strb	r2, [sp, #8]
 4624 0552 0393     		str	r3, [sp, #12]
 4625 0554 9AE80300 		ldm	r10, {r0, r1}
 4626 0558 FFF7FEFF 		bl	process_keycode_with_shift
 4627              	.LVL451:
 541:src/console.c ****     }
 4628              		.loc 2 541 7 is_stmt 1 view .LVU1326
 4629 055c B8E6     		b	.L356
 4630              	.LVL452:
 4631              	.L353:
 4632              	.LBB166:
 4633              	.LBB151:
 106:src/console.c ****       case SHIFT_G:
 4634              		.loc 2 106 2 view .LVU1327
 108:src/console.c **** 	break;
 4635              		.loc 2 108 2 view .LVU1328
 108:src/console.c **** 	break;
 4636              		.loc 2 108 9 is_stmt 0 view .LVU1329
 4637 055e 1B4B     		ldr	r3, .L417+48
 4638 0560 7FE6     		b	.L395
 4639              	.L398:
  80:src/console.c ****   case KEY_F2:
 4640              		.loc 2 80 33 is_stmt 1 view .LVU1330
  80:src/console.c ****   case KEY_F2:
 4641              		.loc 2 80 51 is_stmt 0 view .LVU1331
 4642 0562 DDE90A01 		ldrd	r0, r1, [sp, #40]
 4643 0566 0DF1080A 		add	r10, sp, #8
 4644 056a 8AE80300 		stm	r10, {r0, r1}
 4645 056e 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 4646              	.LVL453:
  80:src/console.c ****   case KEY_F2:
 4647              		.loc 2 80 51 view .LVU1332
 4648 0572 8946     		mov	r9, r1
 4649              	.LVL454:
  80:src/console.c ****   case KEY_F2:
 4650              		.loc 2 80 51 view .LVU1333
 4651 0574 7DE6     		b	.L333
 4652              	.LVL455:
 4653              	.L414:
 102:src/console.c **** 	break;
 4654              		.loc 2 102 2 is_stmt 1 view .LVU1334
 102:src/console.c **** 	break;
 4655              		.loc 2 102 21 is_stmt 0 view .LVU1335
 4656 0576 164B     		ldr	r3, .L417+52
 4657 0578 93E80300 		ldm	r3, {r0, r1}
 4658 057c 0DF1080A 		add	r10, sp, #8
 4659 0580 8AE80300 		stm	r10, {r0, r1}
 4660              	.LVL456:
 102:src/console.c **** 	break;
ARM GAS  /tmp/cczIC8Cx.s 			page 127


 4661              		.loc 2 102 21 view .LVU1336
 4662              	.LBE151:
 4663              	.LBE166:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4664              		.loc 2 521 7 is_stmt 1 view .LVU1337
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4665              		.loc 2 527 7 view .LVU1338
 535:src/console.c **** 	remapped = do_multi (remapped);
 4666              		.loc 2 535 7 view .LVU1339
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4667              		.loc 2 539 7 view .LVU1340
 4668              	.LBB167:
 4669              	.LBB152:
 102:src/console.c **** 	break;
 4670              		.loc 2 102 21 is_stmt 0 view .LVU1341
 4671 0584 2925     		movs	r5, #41
 4672              	.LVL457:
 102:src/console.c **** 	break;
 4673              		.loc 2 102 21 view .LVU1342
 4674 0586 99E6     		b	.L355
 4675              	.LVL458:
 4676              	.L352:
 102:src/console.c **** 	break;
 4677              		.loc 2 102 21 view .LVU1343
 4678              	.LBE152:
 4679              	.LBE167:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4680              		.loc 2 521 7 is_stmt 1 view .LVU1344
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4681              		.loc 2 527 7 view .LVU1345
 535:src/console.c **** 	remapped = do_multi (remapped);
 4682              		.loc 2 535 7 view .LVU1346
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4683              		.loc 2 539 7 view .LVU1347
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4684              		.loc 2 540 7 view .LVU1348
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4685              		.loc 2 540 7 is_stmt 0 view .LVU1349
 4686 0588 0023     		movs	r3, #0
 4687 058a 8DF80850 		strb	r5, [sp, #8]
 4688 058e 0298     		ldr	r0, [sp, #8]
 4689 0590 0393     		str	r3, [sp, #12]
 4690 0592 1946     		mov	r1, r3
 4691 0594 FFF7FEFF 		bl	process_keycode_with_shift
 4692              	.LVL459:
 541:src/console.c ****     }
 4693              		.loc 2 541 7 is_stmt 1 view .LVU1350
 4694 0598 9AE6     		b	.L356
 4695              	.L418:
 4696 059a 00BF     		.align	2
 4697              	.L417:
 4698 059c 00000000 		.word	StopWatchStatus
 4699 05a0 CDCCCCCC 		.word	-858993459
 4700 05a4 99999919 		.word	429496729
 4701 05a8 00000000 		.word	JustStopped
 4702 05ac 00000000 		.word	.LANCHOR12
 4703 05b0 00000000 		.word	.LANCHOR11
ARM GAS  /tmp/cczIC8Cx.s 			page 128


 4704 05b4 00000000 		.word	.LANCHOR2
 4705 05b8 00000000 		.word	.LANCHOR16
 4706 05bc 00000000 		.word	.LANCHOR17
 4707 05c0 00000000 		.word	.LANCHOR13
 4708 05c4 00000000 		.word	.LANCHOR14
 4709 05c8 E0000000 		.word	.LANCHOR14+224
 4710 05cc 00000000 		.word	.LANCHOR15
 4711 05d0 E0000000 		.word	.LANCHOR13+224
 4712              		.cfi_endproc
 4713              	.LFE34:
 4715              		.global	n_p
 4716              		.comm	print_string,22,4
 4717              		.global	spaces
 4718              		.global	release
 4719              		.global	h_shift
 4720              		.global	g_shift
 4721              		.global	f_shift
 4722              		.global	heartbeat
 4723              		.global	no_key
 4724              		.global	MID_MENU
 4725              		.section	.rodata.str1.4,"aMS",%progbits,1
 4726              		.align	2
 4727              	.LC14:
 4728 0000 53797374 		.ascii	"System!\000"
 4728      656D2100 
 4729              		.global	mid_menu
 4730              		.global	default_menu
 4731              		.global	last_menu
 4732              		.global	current_menu
 4733              		.global	cmplx_key_string
 4734              		.align	2
 4735              	.LC15:
 4736 0008 43505800 		.ascii	"CPX\000"
 4737              		.global	arrow_key_string
 4738              		.align	2
 4739              	.LC16:
 4740 000c 2D2D0D00 		.ascii	"--\015\000"
 4741              		.global	UserMenu
 4742              		.section	.rodata
 4743              		.align	2
 4744              		.set	.LANCHOR5,. + 0
 4745              	.LC0:
 4746 0000 2C       		.byte	44
 4747 0001 000000   		.space	3
 4748 0004 FFFFFFFF 		.word	-1
 4749              	.LC1:
 4750 0008 2D       		.byte	45
 4751 0009 000000   		.space	3
 4752 000c FFFFFFFF 		.word	-1
 4753              	.LC10:
 4754 0010 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4754      2A2B0708 
 4754      091C0B0C 
 4754      0D0E0F
 4755 001f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4755      13141516 
 4755      00121819 
ARM GAS  /tmp/cczIC8Cx.s 			page 129


 4755      1A
 4756 002c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4756      1E1F2000 
 4756      21222324 
 4756      25
 4757              		.section	.bss.current_menu,"aw",%nobits
 4758              		.set	.LANCHOR1,. + 0
 4761              	current_menu:
 4762 0000 00       		.space	1
 4763              		.section	.bss.default_menu,"aw",%nobits
 4764              		.set	.LANCHOR2,. + 0
 4767              	default_menu:
 4768 0000 00       		.space	1
 4769              		.section	.bss.last_menu,"aw",%nobits
 4770              		.set	.LANCHOR3,. + 0
 4773              	last_menu:
 4774 0000 00       		.space	1
 4775              		.section	.bss.mdots,"aw",%nobits
 4776              		.align	2
 4777              		.set	.LANCHOR0,. + 0
 4780              	mdots:
 4781 0000 00000000 		.space	400
 4781      00000000 
 4781      00000000 
 4781      00000000 
 4781      00000000 
 4782              		.section	.bss.n_p,"aw",%nobits
 4783              		.align	2
 4786              	n_p:
 4787 0000 00000000 		.space	4
 4788              		.section	.bss.start_ticks,"aw",%nobits
 4789              		.align	2
 4790              		.set	.LANCHOR8,. + 0
 4793              	start_ticks:
 4794 0000 00000000 		.space	4
 4795              		.section	.data.UserMenu,"aw"
 4796              		.align	2
 4797              		.set	.LANCHOR4,. + 0
 4800              	UserMenu:
 4801 0000 55736572 		.ascii	"User Menu\000"
 4801      204D656E 
 4801      7500
 4802 000a 00000000 		.space	5
 4802      00
 4803 000f 00       		.space	1
 4804 0010 2E       		.byte	46
 4805 0011 000000   		.space	3
 4806 0014 FFFFFFFF 		.word	-1
 4807 0018 2E       		.byte	46
 4808 0019 000000   		.space	3
 4809 001c FFFFFFFF 		.word	-1
 4810 0020 00       		.ascii	"\000"
 4811 0021 00000000 		.space	7
 4811      000000
 4812 0028 00       		.ascii	"\000"
 4813 0029 00000000 		.space	7
 4813      000000
ARM GAS  /tmp/cczIC8Cx.s 			page 130


 4814 0030 2E       		.byte	46
 4815 0031 000000   		.space	3
 4816 0034 FFFFFFFF 		.word	-1
 4817 0038 2E       		.byte	46
 4818 0039 000000   		.space	3
 4819 003c FFFFFFFF 		.word	-1
 4820 0040 00       		.ascii	"\000"
 4821 0041 00000000 		.space	7
 4821      000000
 4822 0048 00       		.ascii	"\000"
 4823 0049 00000000 		.space	7
 4823      000000
 4824 0050 2E       		.byte	46
 4825 0051 000000   		.space	3
 4826 0054 FFFFFFFF 		.word	-1
 4827 0058 2E       		.byte	46
 4828 0059 000000   		.space	3
 4829 005c FFFFFFFF 		.word	-1
 4830 0060 00       		.ascii	"\000"
 4831 0061 00000000 		.space	7
 4831      000000
 4832 0068 00       		.ascii	"\000"
 4833 0069 00000000 		.space	7
 4833      000000
 4834 0070 2E       		.byte	46
 4835 0071 000000   		.space	3
 4836 0074 FFFFFFFF 		.word	-1
 4837 0078 2E       		.byte	46
 4838 0079 000000   		.space	3
 4839 007c FFFFFFFF 		.word	-1
 4840 0080 00       		.ascii	"\000"
 4841 0081 00000000 		.space	7
 4841      000000
 4842 0088 00       		.ascii	"\000"
 4843 0089 00000000 		.space	7
 4843      000000
 4844 0090 2C       		.byte	44
 4845 0091 000000   		.space	3
 4846 0094 FFFFFFFF 		.word	-1
 4847 0098 2E       		.byte	46
 4848 0099 000000   		.space	3
 4849 009c FFFFFFFF 		.word	-1
 4850 00a0 2D2D0D00 		.ascii	"--\015\000"
 4851 00a4 00000000 		.space	4
 4852 00a8 00       		.ascii	"\000"
 4853 00a9 00000000 		.space	7
 4853      000000
 4854 00b0 2D       		.byte	45
 4855 00b1 000000   		.space	3
 4856 00b4 FFFFFFFF 		.word	-1
 4857 00b8 31       		.byte	49
 4858 00b9 000000   		.space	3
 4859 00bc 0B000000 		.word	11
 4860 00c0 43505800 		.ascii	"CPX\000"
 4861 00c4 00000000 		.space	4
 4862 00c8 00       		.ascii	"\000"
 4863 00c9 00000000 		.space	7
ARM GAS  /tmp/cczIC8Cx.s 			page 131


 4863      000000
 4864              		.section	.data.arrow_key_string,"aw"
 4865              		.align	2
 4866              		.set	.LANCHOR6,. + 0
 4869              	arrow_key_string:
 4870 0000 0C000000 		.word	.LC16
 4871              		.section	.data.cmplx_key_string,"aw"
 4872              		.align	2
 4873              		.set	.LANCHOR7,. + 0
 4876              	cmplx_key_string:
 4877 0000 08000000 		.word	.LC15
 4878              		.section	.data.f_shift,"aw"
 4879              		.align	2
 4882              	f_shift:
 4883 0000 29       		.byte	41
 4884 0001 000000   		.space	3
 4885 0004 FFFFFFFF 		.word	-1
 4886              		.section	.data.g_shift,"aw"
 4887              		.align	2
 4890              	g_shift:
 4891 0000 2A       		.byte	42
 4892 0001 000000   		.space	3
 4893 0004 FFFFFFFF 		.word	-1
 4894              		.section	.data.h_shift,"aw"
 4895              		.align	2
 4896              		.set	.LANCHOR15,. + 0
 4899              	h_shift:
 4900 0000 2B       		.byte	43
 4901 0001 000000   		.space	3
 4902 0004 FFFFFFFF 		.word	-1
 4903              		.section	.data.heartbeat,"aw"
 4904              		.align	2
 4905              		.set	.LANCHOR19,. + 0
 4908              	heartbeat:
 4909 0000 62       		.byte	98
 4910 0001 000000   		.space	3
 4911 0004 FFFFFFFF 		.word	-1
 4912              		.section	.data.no_key,"aw"
 4913              		.align	2
 4914              		.set	.LANCHOR10,. + 0
 4917              	no_key:
 4918 0000 2E       		.byte	46
 4919 0001 000000   		.space	3
 4920 0004 00000000 		.word	0
 4921              		.section	.data.release,"aw"
 4922              		.align	2
 4923              		.set	.LANCHOR11,. + 0
 4926              	release:
 4927 0000 63       		.byte	99
 4928 0001 000000   		.space	3
 4929 0004 FFFFFFFF 		.word	-1
 4930              		.section	.data.spaces,"aw"
 4931              		.align	2
 4932              		.set	.LANCHOR9,. + 0
 4935              	spaces:
 4936 0000 20202020 		.ascii	"                     \000"
 4936      20202020 
ARM GAS  /tmp/cczIC8Cx.s 			page 132


 4936      20202020 
 4936      20202020 
 4936      20202020 
 4937              		.section	.rodata.MID_MENU,"a"
 4938              		.align	2
 4939              		.set	.LANCHOR18,. + 0
 4942              	MID_MENU:
 4943 0000 00000000 		.word	.LC14
 4944 0004 00000000 		.word	mid_menu
 4945 0008 00000000 		.word	0
 4946 000c 00000000 		.word	0
 4947              		.section	.rodata.Menus,"a"
 4948              		.align	2
 4951              	Menus:
 4952 0000 4D5F426C 		.ascii	"M_Blank\000"
 4952      616E6B00 
 4953 0008 00000000 		.space	7
 4953      000000
 4954 000f 00       		.space	1
 4955 0010 2E       		.byte	46
 4956 0011 000000   		.space	3
 4957 0014 FFFFFFFF 		.word	-1
 4958 0018 2E       		.byte	46
 4959 0019 000000   		.space	3
 4960 001c FFFFFFFF 		.word	-1
 4961 0020 00       		.ascii	"\000"
 4962 0021 00000000 		.space	7
 4962      000000
 4963 0028 00       		.ascii	"\000"
 4964 0029 00000000 		.space	7
 4964      000000
 4965 0030 2E       		.byte	46
 4966 0031 000000   		.space	3
 4967 0034 FFFFFFFF 		.word	-1
 4968 0038 2E       		.byte	46
 4969 0039 000000   		.space	3
 4970 003c FFFFFFFF 		.word	-1
 4971 0040 00       		.ascii	"\000"
 4972 0041 00000000 		.space	7
 4972      000000
 4973 0048 00       		.ascii	"\000"
 4974 0049 00000000 		.space	7
 4974      000000
 4975 0050 2E       		.byte	46
 4976 0051 000000   		.space	3
 4977 0054 FFFFFFFF 		.word	-1
 4978 0058 2E       		.byte	46
 4979 0059 000000   		.space	3
 4980 005c FFFFFFFF 		.word	-1
 4981 0060 00       		.ascii	"\000"
 4982 0061 00000000 		.space	7
 4982      000000
 4983 0068 00       		.ascii	"\000"
 4984 0069 00000000 		.space	7
 4984      000000
 4985 0070 2E       		.byte	46
 4986 0071 000000   		.space	3
ARM GAS  /tmp/cczIC8Cx.s 			page 133


 4987 0074 FFFFFFFF 		.word	-1
 4988 0078 2E       		.byte	46
 4989 0079 000000   		.space	3
 4990 007c FFFFFFFF 		.word	-1
 4991 0080 00       		.ascii	"\000"
 4992 0081 00000000 		.space	7
 4992      000000
 4993 0088 00       		.ascii	"\000"
 4994 0089 00000000 		.space	7
 4994      000000
 4995 0090 2C       		.byte	44
 4996 0091 000000   		.space	3
 4997 0094 FFFFFFFF 		.word	-1
 4998 0098 2E       		.byte	46
 4999 0099 000000   		.space	3
 5000 009c FFFFFFFF 		.word	-1
 5001 00a0 2D2D0D00 		.ascii	"--\015\000"
 5002 00a4 00000000 		.space	4
 5003 00a8 00       		.ascii	"\000"
 5004 00a9 00000000 		.space	7
 5004      000000
 5005 00b0 2D       		.byte	45
 5006 00b1 000000   		.space	3
 5007 00b4 FFFFFFFF 		.word	-1
 5008 00b8 31       		.byte	49
 5009 00b9 000000   		.space	3
 5010 00bc 0B000000 		.word	11
 5011 00c0 43505800 		.ascii	"CPX\000"
 5012 00c4 00000000 		.space	4
 5013 00c8 00       		.ascii	"\000"
 5014 00c9 00000000 		.space	7
 5014      000000
 5015 00d0 4D5F436C 		.ascii	"M_Clear\000"
 5015      65617200 
 5016 00d8 00000000 		.space	7
 5016      000000
 5017 00df 00       		.space	1
 5018 00e0 10       		.byte	16
 5019 00e1 000000   		.space	3
 5020 00e4 01000000 		.word	1
 5021 00e8 34       		.byte	52
 5022 00e9 000000   		.space	3
 5023 00ec 44010000 		.word	324
 5024 00f0 434C5072 		.ascii	"CLProg\000"
 5024      6F6700
 5025 00f7 00       		.space	1
 5026 00f8 434C5041 		.ascii	"CLPAll\000"
 5026      6C6C00
 5027 00ff 00       		.space	1
 5028 0100 10       		.byte	16
 5029 0101 000000   		.space	3
 5030 0104 02000000 		.word	2
 5031 0108 34       		.byte	52
 5032 0109 000000   		.space	3
 5033 010c 3E010000 		.word	318
 5034 0110 434C9100 		.ascii	"CL\221\000"
 5035 0114 00000000 		.space	4
ARM GAS  /tmp/cczIC8Cx.s 			page 134


 5036 0118 434C5265 		.ascii	"CLReg\000"
 5036      6700
 5037 011e 0000     		.space	2
 5038 0120 10       		.byte	16
 5039 0121 000000   		.space	3
 5040 0124 03000000 		.word	3
 5041 0128 34       		.byte	52
 5042 0129 000000   		.space	3
 5043 012c 74010000 		.word	372
 5044 0130 434C7800 		.ascii	"CLx\000"
 5045 0134 00000000 		.space	4
 5046 0138 434C06A0 		.ascii	"CL\006\240\000"
 5046      00
 5047 013d 000000   		.space	3
 5048 0140 34       		.byte	52
 5049 0141 000000   		.space	3
 5050 0144 40010000 		.word	320
 5051 0148 34       		.byte	52
 5052 0149 000000   		.space	3
 5053 014c 41010000 		.word	321
 5054 0150 434C5374 		.ascii	"CLStk\000"
 5054      6B00
 5055 0156 0000     		.space	2
 5056 0158 434C416C 		.ascii	"CLAll\000"
 5056      6C00
 5057 015e 0000     		.space	2
 5058 0160 2C       		.byte	44
 5059 0161 000000   		.space	3
 5060 0164 FFFFFFFF 		.word	-1
 5061 0168 2E       		.byte	46
 5062 0169 000000   		.space	3
 5063 016c FFFFFFFF 		.word	-1
 5064 0170 2D2D0D00 		.ascii	"--\015\000"
 5065 0174 00000000 		.space	4
 5066 0178 00       		.ascii	"\000"
 5067 0179 00000000 		.space	7
 5067      000000
 5068 0180 2D       		.byte	45
 5069 0181 000000   		.space	3
 5070 0184 FFFFFFFF 		.word	-1
 5071 0188 2E       		.byte	46
 5072 0189 000000   		.space	3
 5073 018c FFFFFFFF 		.word	-1
 5074 0190 43505800 		.ascii	"CPX\000"
 5075 0194 00000000 		.space	4
 5076 0198 00       		.ascii	"\000"
 5077 0199 00000000 		.space	7
 5077      000000
 5078 01a0 4D5F4469 		.ascii	"M_Disp\000"
 5078      737000
 5079 01a7 00000000 		.space	8
 5079      00000000 
 5080 01af 00       		.space	1
 5081 01b0 00       		.byte	0
 5082 01b1 000000   		.space	3
 5083 01b4 03000000 		.word	3
 5084 01b8 05       		.byte	5
ARM GAS  /tmp/cczIC8Cx.s 			page 135


 5085 01b9 000000   		.space	3
 5086 01bc 01000000 		.word	1
 5087 01c0 414C4C00 		.ascii	"ALL\000"
 5088 01c4 00000000 		.space	4
 5089 01c8 6120622F 		.ascii	"a b/c\000"
 5089      6300
 5090 01ce 0000     		.space	2
 5091 01d0 01       		.byte	1
 5092 01d1 000000   		.space	3
 5093 01d4 03000000 		.word	3
 5094 01d8 05       		.byte	5
 5095 01d9 000000   		.space	3
 5096 01dc 02000000 		.word	2
 5097 01e0 46495800 		.ascii	"FIX\000"
 5098 01e4 00000000 		.space	4
 5099 01e8 642F6300 		.ascii	"d/c\000"
 5100 01ec 00000000 		.space	4
 5101 01f0 02       		.byte	2
 5102 01f1 000000   		.space	3
 5103 01f4 03000000 		.word	3
 5104 01f8 06       		.byte	6
 5105 01f9 000000   		.space	3
 5106 01fc 01000000 		.word	1
 5107 0200 53434900 		.ascii	"SCI\000"
 5108 0204 00000000 		.space	4
 5109 0208 482E4D53 		.ascii	"H.MS\000"
 5109      00
 5110 020d 000000   		.space	3
 5111 0210 03       		.byte	3
 5112 0211 000000   		.space	3
 5113 0214 03000000 		.word	3
 5114 0218 07       		.byte	7
 5115 0219 000000   		.space	3
 5116 021c 01000000 		.word	1
 5117 0220 454E4700 		.ascii	"ENG\000"
 5118 0224 00000000 		.space	4
 5119 0228 482E6400 		.ascii	"H.d\000"
 5120 022c 00000000 		.space	4
 5121 0230 2C       		.byte	44
 5122 0231 000000   		.space	3
 5123 0234 FFFFFFFF 		.word	-1
 5124 0238 26       		.byte	38
 5125 0239 000000   		.space	3
 5126 023c 03000000 		.word	3
 5127 0240 2D2D0D00 		.ascii	"--\015\000"
 5128 0244 00000000 		.space	4
 5129 0248 2E2F2C00 		.ascii	"./,\000"
 5130 024c 00000000 		.space	4
 5131 0250 2D       		.byte	45
 5132 0251 000000   		.space	3
 5133 0254 FFFFFFFF 		.word	-1
 5134 0258 2E       		.byte	46
 5135 0259 000000   		.space	3
 5136 025c FFFFFFFF 		.word	-1
 5137 0260 43505800 		.ascii	"CPX\000"
 5138 0264 00000000 		.space	4
 5139 0268 00       		.ascii	"\000"
ARM GAS  /tmp/cczIC8Cx.s 			page 136


 5140 0269 00000000 		.space	7
 5140      000000
 5141 0270 4D5F4261 		.ascii	"M_Base\000"
 5141      736500
 5142 0277 00000000 		.space	8
 5142      00000000 
 5143 027f 00       		.space	1
 5144 0280 0E       		.byte	14
 5145 0281 000000   		.space	3
 5146 0284 01000000 		.word	1
 5147 0288 0E       		.byte	14
 5148 0289 000000   		.space	3
 5149 028c 03000000 		.word	3
 5150 0290 42494E00 		.ascii	"BIN\000"
 5151 0294 00000000 		.space	4
 5152 0298 6E6F7400 		.ascii	"not\000"
 5153 029c 00000000 		.space	4
 5154 02a0 0E       		.byte	14
 5155 02a1 000000   		.space	3
 5156 02a4 02000000 		.word	2
 5157 02a8 13       		.byte	19
 5158 02a9 000000   		.space	3
 5159 02ac 03000000 		.word	3
 5160 02b0 4F435400 		.ascii	"OCT\000"
 5161 02b4 00000000 		.space	4
 5162 02b8 616E6400 		.ascii	"and\000"
 5163 02bc 00000000 		.space	4
 5164 02c0 0F       		.byte	15
 5165 02c1 000000   		.space	3
 5166 02c4 01000000 		.word	1
 5167 02c8 14       		.byte	20
 5168 02c9 000000   		.space	3
 5169 02cc 03000000 		.word	3
 5170 02d0 44454300 		.ascii	"DEC\000"
 5171 02d4 00000000 		.space	4
 5172 02d8 6F7200   		.ascii	"or\000"
 5173 02db 00000000 		.space	5
 5173      00
 5174 02e0 0F       		.byte	15
 5175 02e1 000000   		.space	3
 5176 02e4 02000000 		.word	2
 5177 02e8 15       		.byte	21
 5178 02e9 000000   		.space	3
 5179 02ec 03000000 		.word	3
 5180 02f0 48455800 		.ascii	"HEX\000"
 5181 02f4 00000000 		.space	4
 5182 02f8 786F7200 		.ascii	"xor\000"
 5183 02fc 00000000 		.space	4
 5184 0300 2C       		.byte	44
 5185 0301 000000   		.space	3
 5186 0304 FFFFFFFF 		.word	-1
 5187 0308 16       		.byte	22
 5188 0309 000000   		.space	3
 5189 030c 03000000 		.word	3
 5190 0310 2D2D0D00 		.ascii	"--\015\000"
 5191 0314 00000000 		.space	4
 5192 0318 524D4452 		.ascii	"RMDR\000"
ARM GAS  /tmp/cczIC8Cx.s 			page 137


 5192      00
 5193 031d 000000   		.space	3
 5194 0320 2D       		.byte	45
 5195 0321 000000   		.space	3
 5196 0324 FFFFFFFF 		.word	-1
 5197 0328 07       		.byte	7
 5198 0329 000000   		.space	3
 5199 032c 01000000 		.word	1
 5200 0330 43505800 		.ascii	"CPX\000"
 5201 0334 00000000 		.space	4
 5202 0338 482E6400 		.ascii	"H.d\000"
 5203 033c 00000000 		.space	4
 5204 0340 4D5F416E 		.ascii	"M_Angles\000"
 5204      676C6573 
 5204      00
 5205 0349 00000000 		.space	6
 5205      0000
 5206 034f 00       		.space	1
 5207 0350 06       		.byte	6
 5208 0351 000000   		.space	3
 5209 0354 02000000 		.word	2
 5210 0358 04       		.byte	4
 5211 0359 000000   		.space	3
 5212 035c 01000000 		.word	1
 5213 0360 44454700 		.ascii	"DEG\000"
 5214 0364 00000000 		.space	4
 5215 0368 500D5200 		.ascii	"P\015R\000"
 5216 036c 00000000 		.space	4
 5217 0370 07       		.byte	7
 5218 0371 000000   		.space	3
 5219 0374 02000000 		.word	2
 5220 0378 04       		.byte	4
 5221 0379 000000   		.space	3
 5222 037c 02000000 		.word	2
 5223 0380 52414400 		.ascii	"RAD\000"
 5224 0384 00000000 		.space	4
 5225 0388 520D5000 		.ascii	"R\015P\000"
 5226 038c 00000000 		.space	4
 5227 0390 08       		.byte	8
 5228 0391 000000   		.space	3
 5229 0394 02000000 		.word	2
 5230 0398 00       		.byte	0
 5231 0399 000000   		.space	3
 5232 039c 01000000 		.word	1
 5233 03a0 47524144 		.ascii	"GRAD\000"
 5233      00
 5234 03a5 000000   		.space	3
 5235 03a8 48595000 		.ascii	"HYP\000"
 5236 03ac 00000000 		.space	4
 5237 03b0 06       		.byte	6
 5238 03b1 000000   		.space	3
 5239 03b4 01000000 		.word	1
 5240 03b8 07       		.byte	7
 5241 03b9 000000   		.space	3
 5242 03bc 01000000 		.word	1
 5243 03c0 482E4D53 		.ascii	"H.MS\000"
 5243      00
ARM GAS  /tmp/cczIC8Cx.s 			page 138


 5244 03c5 000000   		.space	3
 5245 03c8 482E6400 		.ascii	"H.d\000"
 5246 03cc 00000000 		.space	4
 5247 03d0 2C       		.byte	44
 5248 03d1 000000   		.space	3
 5249 03d4 FFFFFFFF 		.word	-1
 5250 03d8 00       		.byte	0
 5251 03d9 000000   		.space	3
 5252 03dc 02000000 		.word	2
 5253 03e0 2D2D0D00 		.ascii	"--\015\000"
 5254 03e4 00000000 		.space	4
 5255 03e8 4859509D 		.ascii	"HYP\235\000"
 5255      00
 5256 03ed 000000   		.space	3
 5257 03f0 2D       		.byte	45
 5258 03f1 000000   		.space	3
 5259 03f4 FFFFFFFF 		.word	-1
 5260 03f8 2E       		.byte	46
 5261 03f9 000000   		.space	3
 5262 03fc FFFFFFFF 		.word	-1
 5263 0400 43505800 		.ascii	"CPX\000"
 5264 0404 00000000 		.space	4
 5265 0408 00       		.ascii	"\000"
 5266 0409 00000000 		.space	7
 5266      000000
 5267 0410 4D5F4D69 		.ascii	"M_Misc\000"
 5267      736300
 5268 0417 00000000 		.space	8
 5268      00000000 
 5269 041f 00       		.space	1
 5270 0420 25       		.byte	37
 5271 0421 000000   		.space	3
 5272 0424 01000000 		.word	1
 5273 0428 14       		.byte	20
 5274 0429 000000   		.space	3
 5275 042c 01000000 		.word	1
 5276 0430 7C587C00 		.ascii	"|X|\000"
 5277 0434 00000000 		.space	4
 5278 0438 329C00   		.ascii	"2\234\000"
 5279 043b 00000000 		.space	5
 5279      00
 5280 0440 25       		.byte	37
 5281 0441 000000   		.space	3
 5282 0444 02000000 		.word	2
 5283 0448 14       		.byte	20
 5284 0449 000000   		.space	3
 5285 044c 02000000 		.word	2
 5286 0450 524E4400 		.ascii	"RND\000"
 5287 0454 00000000 		.space	4
 5288 0458 4C6F67BA 		.ascii	"Log\272\000"
 5288      00
 5289 045d 000000   		.space	3
 5290 0460 26       		.byte	38
 5291 0461 000000   		.space	3
 5292 0464 01000000 		.word	1
 5293 0468 15       		.byte	21
 5294 0469 000000   		.space	3
ARM GAS  /tmp/cczIC8Cx.s 			page 139


 5295 046c 02000000 		.word	2
 5296 0470 49506172 		.ascii	"IPart\000"
 5296      7400
 5297 0476 0000     		.space	2
 5298 0478 4C6F678B 		.ascii	"Log\213\000"
 5298      00
 5299 047d 000000   		.space	3
 5300 0480 26       		.byte	38
 5301 0481 000000   		.space	3
 5302 0484 02000000 		.word	2
 5303 0488 16       		.byte	22
 5304 0489 000000   		.space	3
 5305 048c 02000000 		.word	2
 5306 0490 46506172 		.ascii	"FPart\000"
 5306      7400
 5307 0496 0000     		.space	2
 5308 0498 7C7C656C 		.ascii	"||el\000"
 5308      00
 5309 049d 000000   		.space	3
 5310 04a0 2C       		.byte	44
 5311 04a1 000000   		.space	3
 5312 04a4 FFFFFFFF 		.word	-1
 5313 04a8 22       		.byte	34
 5314 04a9 000000   		.space	3
 5315 04ac 02000000 		.word	2
 5316 04b0 2D2D0D00 		.ascii	"--\015\000"
 5317 04b4 00000000 		.space	4
 5318 04b8 832500   		.ascii	"\203%\000"
 5319 04bb 00000000 		.space	5
 5319      00
 5320 04c0 2D       		.byte	45
 5321 04c1 000000   		.space	3
 5322 04c4 FFFFFFFF 		.word	-1
 5323 04c8 2E       		.byte	46
 5324 04c9 000000   		.space	3
 5325 04cc FFFFFFFF 		.word	-1
 5326 04d0 43505800 		.ascii	"CPX\000"
 5327 04d4 00000000 		.space	4
 5328 04d8 00       		.ascii	"\000"
 5329 04d9 00000000 		.space	7
 5329      000000
 5330 04e0 4D5F5377 		.ascii	"M_Swap\000"
 5330      617000
 5331 04e7 00000000 		.space	8
 5331      00000000 
 5332 04ef 00       		.space	1
 5333 04f0 0D       		.byte	13
 5334 04f1 000000   		.space	3
 5335 04f4 01000000 		.word	1
 5336 04f8 34       		.byte	52
 5337 04f9 000000   		.space	3
 5338 04fc 00A60000 		.word	42496
 5339 0500 53686F77 		.ascii	"Show\016\000"
 5339      0E00
 5340 0506 0000     		.space	2
 5341 0508 5B175D00 		.ascii	"[\027]\000"
 5342 050c 00000000 		.space	4
ARM GAS  /tmp/cczIC8Cx.s 			page 140


 5343 0510 0D       		.byte	13
 5344 0511 000000   		.space	3
 5345 0514 02000000 		.word	2
 5346 0518 2E       		.byte	46
 5347 0519 000000   		.space	3
 5348 051c FFFFFFFF 		.word	-1
 5349 0520 53686F77 		.ascii	"Show\015\000"
 5349      0D00
 5350 0526 0000     		.space	2
 5351 0528 00       		.ascii	"\000"
 5352 0529 00000000 		.space	7
 5352      000000
 5353 0530 0D       		.byte	13
 5354 0531 000000   		.space	3
 5355 0534 03000000 		.word	3
 5356 0538 34       		.byte	52
 5357 0539 000000   		.space	3
 5358 053c 00330000 		.word	13056
 5359 0540 78173F00 		.ascii	"x\027?\000"
 5360 0544 00000000 		.space	4
 5361 0548 7A173F00 		.ascii	"z\027?\000"
 5362 054c 00000000 		.space	4
 5363 0550 34       		.byte	52
 5364 0551 000000   		.space	3
 5365 0554 00320000 		.word	12800
 5366 0558 34       		.byte	52
 5367 0559 000000   		.space	3
 5368 055c 00340000 		.word	13312
 5369 0560 79173F00 		.ascii	"y\027?\000"
 5370 0564 00000000 		.space	4
 5371 0568 74173F00 		.ascii	"t\027?\000"
 5372 056c 00000000 		.space	4
 5373 0570 2C       		.byte	44
 5374 0571 000000   		.space	3
 5375 0574 FFFFFFFF 		.word	-1
 5376 0578 2E       		.byte	46
 5377 0579 000000   		.space	3
 5378 057c FFFFFFFF 		.word	-1
 5379 0580 2D2D0D00 		.ascii	"--\015\000"
 5380 0584 00000000 		.space	4
 5381 0588 00       		.ascii	"\000"
 5382 0589 00000000 		.space	7
 5382      000000
 5383 0590 2D       		.byte	45
 5384 0591 000000   		.space	3
 5385 0594 FFFFFFFF 		.word	-1
 5386 0598 2E       		.byte	46
 5387 0599 000000   		.space	3
 5388 059c FFFFFFFF 		.word	-1
 5389 05a0 43505800 		.ascii	"CPX\000"
 5390 05a4 00000000 		.space	4
 5391 05a8 00       		.ascii	"\000"
 5392 05a9 00000000 		.space	7
 5392      000000
 5393 05b0 4D5F5072 		.ascii	"M_Program\000"
 5393      6F677261 
 5393      6D00
ARM GAS  /tmp/cczIC8Cx.s 			page 141


 5394 05ba 00000000 		.space	5
 5394      00
 5395 05bf 00       		.space	1
 5396 05c0 27       		.byte	39
 5397 05c1 000000   		.space	3
 5398 05c4 01000000 		.word	1
 5399 05c8 28       		.byte	40
 5400 05c9 000000   		.space	3
 5401 05cc 01000000 		.word	1
 5402 05d0 4C424C00 		.ascii	"LBL\000"
 5403 05d4 00000000 		.space	4
 5404 05d8 44534500 		.ascii	"DSE\000"
 5405 05dc 00000000 		.space	4
 5406 05e0 27       		.byte	39
 5407 05e1 000000   		.space	3
 5408 05e4 02000000 		.word	2
 5409 05e8 28       		.byte	40
 5410 05e9 000000   		.space	3
 5411 05ec 02000000 		.word	2
 5412 05f0 52544E00 		.ascii	"RTN\000"
 5413 05f4 00000000 		.space	4
 5414 05f8 49534700 		.ascii	"ISG\000"
 5415 05fc 00000000 		.space	4
 5416 0600 25       		.byte	37
 5417 0601 000000   		.space	3
 5418 0604 03000000 		.word	3
 5419 0608 34       		.byte	52
 5420 0609 000000   		.space	3
 5421 060c 00600000 		.word	24576
 5422 0610 50617573 		.ascii	"Pause\000"
 5422      6500
 5423 0616 0000     		.space	2
 5424 0618 44454300 		.ascii	"DEC\000"
 5425 061c 00000000 		.space	4
 5426 0620 12       		.byte	18
 5427 0621 000000   		.space	3
 5428 0624 03000000 		.word	3
 5429 0628 34       		.byte	52
 5430 0629 000000   		.space	3
 5431 062c 00610000 		.word	24832
 5432 0630 47544F00 		.ascii	"GTO\000"
 5433 0634 00000000 		.space	4
 5434 0638 494E4300 		.ascii	"INC\000"
 5435 063c 00000000 		.space	4
 5436 0640 2C       		.byte	44
 5437 0641 000000   		.space	3
 5438 0644 FFFFFFFF 		.word	-1
 5439 0648 34       		.byte	52
 5440 0649 000000   		.space	3
 5441 064c 00570000 		.word	22272
 5442 0650 2D2D0D00 		.ascii	"--\015\000"
 5443 0654 00000000 		.space	4
 5444 0658 4241434B 		.ascii	"BACK\000"
 5444      00
 5445 065d 000000   		.space	3
 5446 0660 2D       		.byte	45
 5447 0661 000000   		.space	3
ARM GAS  /tmp/cczIC8Cx.s 			page 142


 5448 0664 FFFFFFFF 		.word	-1
 5449 0668 34       		.byte	52
 5450 0669 000000   		.space	3
 5451 066c 00560000 		.word	22016
 5452 0670 43505800 		.ascii	"CPX\000"
 5453 0674 00000000 		.space	4
 5454 0678 534B4950 		.ascii	"SKIP\000"
 5454      00
 5455 067d 000000   		.space	3
 5456 0680 4D5F5365 		.ascii	"M_Setup1\000"
 5456      74757031 
 5456      00
 5457 0689 00000000 		.space	6
 5457      0000
 5458 068f 00       		.space	1
 5459 0690 32       		.byte	50
 5460 0691 000000   		.space	3
 5461 0694 00000000 		.word	0
 5462 0698 30       		.byte	48
 5463 0699 000000   		.space	3
 5464 069c 00000000 		.word	0
 5465 06a0 45584954 		.ascii	"EXIT\000"
 5465      00
 5466 06a5 000000   		.space	3
 5467 06a8 53797374 		.ascii	"System\000"
 5467      656D00
 5468 06af 00       		.space	1
 5469 06b0 31       		.byte	49
 5470 06b1 000000   		.space	3
 5471 06b4 09000000 		.word	9
 5472 06b8 2E       		.byte	46
 5473 06b9 000000   		.space	3
 5474 06bc FFFFFFFF 		.word	-1
 5475 06c0 48454C50 		.ascii	"HELP\000"
 5475      00
 5476 06c5 000000   		.space	3
 5477 06c8 00       		.ascii	"\000"
 5478 06c9 00000000 		.space	7
 5478      000000
 5479 06d0 31       		.byte	49
 5480 06d1 000000   		.space	3
 5481 06d4 02000000 		.word	2
 5482 06d8 31       		.byte	49
 5483 06d9 000000   		.space	3
 5484 06dc 06000000 		.word	6
 5485 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5485      4F00
 5486 06e6 0000     		.space	2
 5487 06e8 53765241 		.ascii	"SvRAM\000"
 5487      4D00
 5488 06ee 0000     		.space	2
 5489 06f0 31       		.byte	49
 5490 06f1 000000   		.space	3
 5491 06f4 03000000 		.word	3
 5492 06f8 31       		.byte	49
 5493 06f9 000000   		.space	3
 5494 06fc 07000000 		.word	7
ARM GAS  /tmp/cczIC8Cx.s 			page 143


 5495 0700 4F6E5243 		.ascii	"OnRCL\000"
 5495      4C00
 5496 0706 0000     		.space	2
 5497 0708 4C645241 		.ascii	"LdRAM\000"
 5497      4D00
 5498 070e 0000     		.space	2
 5499 0710 2C       		.byte	44
 5500 0711 000000   		.space	3
 5501 0714 FFFFFFFF 		.word	-1
 5502 0718 2E       		.byte	46
 5503 0719 000000   		.space	3
 5504 071c FFFFFFFF 		.word	-1
 5505 0720 2D2D0D00 		.ascii	"--\015\000"
 5506 0724 00000000 		.space	4
 5507 0728 00       		.ascii	"\000"
 5508 0729 00000000 		.space	7
 5508      000000
 5509 0730 2D       		.byte	45
 5510 0731 000000   		.space	3
 5511 0734 FFFFFFFF 		.word	-1
 5512 0738 2E       		.byte	46
 5513 0739 000000   		.space	3
 5514 073c FFFFFFFF 		.word	-1
 5515 0740 43505800 		.ascii	"CPX\000"
 5516 0744 00000000 		.space	4
 5517 0748 00       		.ascii	"\000"
 5518 0749 00000000 		.space	7
 5518      000000
 5519 0750 4D5F4172 		.ascii	"M_Arrow\000"
 5519      726F7700 
 5520 0758 00000000 		.space	7
 5520      000000
 5521 075f 00       		.space	1
 5522 0760 0E       		.byte	14
 5523 0761 000000   		.space	3
 5524 0764 01000000 		.word	1
 5525 0768 06       		.byte	6
 5526 0769 000000   		.space	3
 5527 076c 02000000 		.word	2
 5528 0770 42696E00 		.ascii	"Bin\000"
 5529 0774 00000000 		.space	4
 5530 0778 44454700 		.ascii	"DEG\000"
 5531 077c 00000000 		.space	4
 5532 0780 0E       		.byte	14
 5533 0781 000000   		.space	3
 5534 0784 02000000 		.word	2
 5535 0788 07       		.byte	7
 5536 0789 000000   		.space	3
 5537 078c 02000000 		.word	2
 5538 0790 4F637400 		.ascii	"Oct\000"
 5539 0794 00000000 		.space	4
 5540 0798 52414400 		.ascii	"RAD\000"
 5541 079c 00000000 		.space	4
 5542 07a0 0F       		.byte	15
 5543 07a1 000000   		.space	3
 5544 07a4 01000000 		.word	1
 5545 07a8 08       		.byte	8
ARM GAS  /tmp/cczIC8Cx.s 			page 144


 5546 07a9 000000   		.space	3
 5547 07ac 02000000 		.word	2
 5548 07b0 44656300 		.ascii	"Dec\000"
 5549 07b4 00000000 		.space	4
 5550 07b8 47726164 		.ascii	"Grad\000"
 5550      00
 5551 07bd 000000   		.space	3
 5552 07c0 0F       		.byte	15
 5553 07c1 000000   		.space	3
 5554 07c4 02000000 		.word	2
 5555 07c8 06       		.byte	6
 5556 07c9 000000   		.space	3
 5557 07cc 01000000 		.word	1
 5558 07d0 48657800 		.ascii	"Hex\000"
 5559 07d4 00000000 		.space	4
 5560 07d8 0D484D53 		.ascii	"\015HMS\000"
 5560      00
 5561 07dd 000000   		.space	3
 5562 07e0 2C       		.byte	44
 5563 07e1 000000   		.space	3
 5564 07e4 FFFFFFFF 		.word	-1
 5565 07e8 07       		.byte	7
 5566 07e9 000000   		.space	3
 5567 07ec 01000000 		.word	1
 5568 07f0 2D2D0D00 		.ascii	"--\015\000"
 5569 07f4 00000000 		.space	4
 5570 07f8 484D530D 		.ascii	"HMS\015\000"
 5570      00
 5571 07fd 000000   		.space	3
 5572 0800 2D       		.byte	45
 5573 0801 000000   		.space	3
 5574 0804 FFFFFFFF 		.word	-1
 5575 0808 2E       		.byte	46
 5576 0809 000000   		.space	3
 5577 080c FFFFFFFF 		.word	-1
 5578 0810 43505800 		.ascii	"CPX\000"
 5579 0814 00000000 		.space	4
 5580 0818 00       		.ascii	"\000"
 5581 0819 00000000 		.space	7
 5581      000000
 5582 0820 4D5F466C 		.ascii	"M_Flags\000"
 5582      61677300 
 5583 0828 00000000 		.space	7
 5583      000000
 5584 082f 00       		.space	1
 5585 0830 1E       		.byte	30
 5586 0831 000000   		.space	3
 5587 0834 01000000 		.word	1
 5588 0838 34       		.byte	52
 5589 0839 000000   		.space	3
 5590 083c 00740000 		.word	29696
 5591 0840 53465F00 		.ascii	"SF_\000"
 5592 0844 00000000 		.space	4
 5593 0848 46533F00 		.ascii	"FS?\000"
 5594 084c 00000000 		.space	4
 5595 0850 1E       		.byte	30
 5596 0851 000000   		.space	3
ARM GAS  /tmp/cczIC8Cx.s 			page 145


 5597 0854 02000000 		.word	2
 5598 0858 34       		.byte	52
 5599 0859 000000   		.space	3
 5600 085c 00750000 		.word	29952
 5601 0860 43465F00 		.ascii	"CF_\000"
 5602 0864 00000000 		.space	4
 5603 0868 46433F00 		.ascii	"FC?\000"
 5604 086c 00000000 		.space	4
 5605 0870 1F       		.byte	31
 5606 0871 000000   		.space	3
 5607 0874 01000000 		.word	1
 5608 0878 34       		.byte	52
 5609 0879 000000   		.space	3
 5610 087c 00500000 		.word	20480
 5611 0880 783D3F00 		.ascii	"x=?\000"
 5612 0884 00000000 		.space	4
 5613 0888 783C3F00 		.ascii	"x<?\000"
 5614 088c 00000000 		.space	4
 5615 0890 1F       		.byte	31
 5616 0891 000000   		.space	3
 5617 0894 02000000 		.word	2
 5618 0898 34       		.byte	52
 5619 0899 000000   		.space	3
 5620 089c 00510000 		.word	20736
 5621 08a0 780B3F00 		.ascii	"x\013?\000"
 5622 08a4 00000000 		.space	4
 5623 08a8 783C3D3F 		.ascii	"x<=?\000"
 5623      00
 5624 08ad 000000   		.space	3
 5625 08b0 2C       		.byte	44
 5626 08b1 000000   		.space	3
 5627 08b4 FFFFFFFF 		.word	-1
 5628 08b8 34       		.byte	52
 5629 08b9 000000   		.space	3
 5630 08bc 00530000 		.word	21248
 5631 08c0 2D2D0D00 		.ascii	"--\015\000"
 5632 08c4 00000000 		.space	4
 5633 08c8 783E3D3F 		.ascii	"x>=?\000"
 5633      00
 5634 08cd 000000   		.space	3
 5635 08d0 2D       		.byte	45
 5636 08d1 000000   		.space	3
 5637 08d4 FFFFFFFF 		.word	-1
 5638 08d8 34       		.byte	52
 5639 08d9 000000   		.space	3
 5640 08dc 00520000 		.word	20992
 5641 08e0 43505800 		.ascii	"CPX\000"
 5642 08e4 00000000 		.space	4
 5643 08e8 783E3F00 		.ascii	"x>?\000"
 5644 08ec 00000000 		.space	4
 5645 08f0 4D5F5072 		.ascii	"M_Prob\000"
 5645      6F6200
 5646 08f7 00000000 		.space	8
 5646      00000000 
 5647 08ff 00       		.space	1
 5648 0900 18       		.byte	24
 5649 0901 000000   		.space	3
ARM GAS  /tmp/cczIC8Cx.s 			page 146


 5650 0904 03000000 		.word	3
 5651 0908 34       		.byte	52
 5652 0909 000000   		.space	3
 5653 090c 31020000 		.word	561
 5654 0910 46616374 		.ascii	"Fact!\000"
 5654      2100
 5655 0916 0000     		.space	2
 5656 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5656      00
 5657 091d 000000   		.space	3
 5658 0920 18       		.byte	24
 5659 0921 000000   		.space	3
 5660 0924 01000000 		.word	1
 5661 0928 19       		.byte	25
 5662 0929 000000   		.space	3
 5663 092c 01000000 		.word	1
 5664 0930 43792C78 		.ascii	"Cy,x\000"
 5664      00
 5665 0935 000000   		.space	3
 5666 0938 9400     		.ascii	"\224\000"
 5667 093a 00000000 		.space	6
 5667      0000
 5668 0940 18       		.byte	24
 5669 0941 000000   		.space	3
 5670 0944 02000000 		.word	2
 5671 0948 19       		.byte	25
 5672 0949 000000   		.space	3
 5673 094c 02000000 		.word	2
 5674 0950 50792C78 		.ascii	"Py,x\000"
 5674      00
 5675 0955 000000   		.space	3
 5676 0958 949D00   		.ascii	"\224\235\000"
 5677 095b 00000000 		.space	5
 5677      00
 5678 0960 08       		.byte	8
 5679 0961 000000   		.space	3
 5680 0964 01000000 		.word	1
 5681 0968 34       		.byte	52
 5682 0969 000000   		.space	3
 5683 096c 34010000 		.word	308
 5684 0970 52414E23 		.ascii	"RAN#\000"
 5684      00
 5685 0975 000000   		.space	3
 5686 0978 53454544 		.ascii	"SEED\000"
 5686      00
 5687 097d 000000   		.space	3
 5688 0980 2C       		.byte	44
 5689 0981 000000   		.space	3
 5690 0984 FFFFFFFF 		.word	-1
 5691 0988 2E       		.byte	46
 5692 0989 000000   		.space	3
 5693 098c FFFFFFFF 		.word	-1
 5694 0990 2D2D0D00 		.ascii	"--\015\000"
 5695 0994 00000000 		.space	4
 5696 0998 00       		.ascii	"\000"
 5697 0999 00000000 		.space	7
 5697      000000
ARM GAS  /tmp/cczIC8Cx.s 			page 147


 5698 09a0 2D       		.byte	45
 5699 09a1 000000   		.space	3
 5700 09a4 FFFFFFFF 		.word	-1
 5701 09a8 2E       		.byte	46
 5702 09a9 000000   		.space	3
 5703 09ac FFFFFFFF 		.word	-1
 5704 09b0 43505800 		.ascii	"CPX\000"
 5705 09b4 00000000 		.space	4
 5706 09b8 00       		.ascii	"\000"
 5707 09b9 00000000 		.space	7
 5707      000000
 5708 09c0 4D5F5374 		.ascii	"M_Stats\000"
 5708      61747300 
 5709 09c8 00000000 		.space	7
 5709      000000
 5710 09cf 00       		.space	1
 5711 09d0 1A       		.byte	26
 5712 09d1 000000   		.space	3
 5713 09d4 01000000 		.word	1
 5714 09d8 1A       		.byte	26
 5715 09d9 000000   		.space	3
 5716 09dc 02000000 		.word	2
 5717 09e0 0100     		.ascii	"\001\000"
 5718 09e2 00000000 		.space	6
 5718      0000
 5719 09e8 532E442E 		.ascii	"S.D.\000"
 5719      00
 5720 09ed 000000   		.space	3
 5721 09f0 1B       		.byte	27
 5722 09f1 000000   		.space	3
 5723 09f4 01000000 		.word	1
 5724 09f8 34       		.byte	52
 5725 09f9 000000   		.space	3
 5726 09fc 74020000 		.word	628
 5727 0a00 792D6861 		.ascii	"y-hat\000"
 5727      7400
 5728 0a06 0000     		.space	2
 5729 0a08 782D6861 		.ascii	"x-hat\000"
 5729      7400
 5730 0a0e 0000     		.space	2
 5731 0a10 34       		.byte	52
 5732 0a11 000000   		.space	3
 5733 0a14 27010000 		.word	295
 5734 0a18 34       		.byte	52
 5735 0a19 000000   		.space	3
 5736 0a1c 28010000 		.word	296
 5737 0a20 434F5252 		.ascii	"CORR\000"
 5737      00
 5738 0a25 000000   		.space	3
 5739 0a28 4C2E522E 		.ascii	"L.R.\000"
 5739      00
 5740 0a2d 000000   		.space	3
 5741 0a30 34       		.byte	52
 5742 0a31 000000   		.space	3
 5743 0a34 32010000 		.word	306
 5744 0a38 34       		.byte	52
 5745 0a39 000000   		.space	3
ARM GAS  /tmp/cczIC8Cx.s 			page 148


 5746 0a3c 31010000 		.word	305
 5747 0a40 42657374 		.ascii	"BestF\000"
 5747      4600
 5748 0a46 0000     		.space	2
 5749 0a48 4C6F6746 		.ascii	"LogFit\000"
 5749      697400
 5750 0a4f 00       		.space	1
 5751 0a50 34       		.byte	52
 5752 0a51 000000   		.space	3
 5753 0a54 2E010000 		.word	302
 5754 0a58 34       		.byte	52
 5755 0a59 000000   		.space	3
 5756 0a5c 2F010000 		.word	303
 5757 0a60 4C696E65 		.ascii	"Linear\000"
 5757      617200
 5758 0a67 00       		.space	1
 5759 0a68 45787046 		.ascii	"ExpFit\000"
 5759      697400
 5760 0a6f 00       		.space	1
 5761 0a70 2D       		.byte	45
 5762 0a71 000000   		.space	3
 5763 0a74 FFFFFFFF 		.word	-1
 5764 0a78 34       		.byte	52
 5765 0a79 000000   		.space	3
 5766 0a7c 30010000 		.word	304
 5767 0a80 43505800 		.ascii	"CPX\000"
 5768 0a84 00000000 		.space	4
 5769 0a88 50777246 		.ascii	"PwrFit\000"
 5769      697400
 5770 0a8f 00       		.space	1
 5771 0a90 4D5F5365 		.ascii	"M_Setup2\000"
 5771      74757032 
 5771      00
 5772 0a99 00000000 		.space	6
 5772      0000
 5773 0a9f 00       		.space	1
 5774 0aa0 31       		.byte	49
 5775 0aa1 000000   		.space	3
 5776 0aa4 04000000 		.word	4
 5777 0aa8 2E       		.byte	46
 5778 0aa9 000000   		.space	3
 5779 0aac FFFFFFFF 		.word	-1
 5780 0ab0 53764C49 		.ascii	"SvLIB\000"
 5780      4200
 5781 0ab6 0000     		.space	2
 5782 0ab8 00       		.ascii	"\000"
 5783 0ab9 00000000 		.space	7
 5783      000000
 5784 0ac0 31       		.byte	49
 5785 0ac1 000000   		.space	3
 5786 0ac4 05000000 		.word	5
 5787 0ac8 2E       		.byte	46
 5788 0ac9 000000   		.space	3
 5789 0acc FFFFFFFF 		.word	-1
 5790 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5790      4200
 5791 0ad6 0000     		.space	2
ARM GAS  /tmp/cczIC8Cx.s 			page 149


 5792 0ad8 00       		.ascii	"\000"
 5793 0ad9 00000000 		.space	7
 5793      000000
 5794 0ae0 31       		.byte	49
 5795 0ae1 000000   		.space	3
 5796 0ae4 0A000000 		.word	10
 5797 0ae8 2E       		.byte	46
 5798 0ae9 000000   		.space	3
 5799 0aec FFFFFFFF 		.word	-1
 5800 0af0 53764350 		.ascii	"SvCPRG\000"
 5800      524700
 5801 0af7 00       		.space	1
 5802 0af8 00       		.ascii	"\000"
 5803 0af9 00000000 		.space	7
 5803      000000
 5804 0b00 31       		.byte	49
 5805 0b01 000000   		.space	3
 5806 0b04 08000000 		.word	8
 5807 0b08 2E       		.byte	46
 5808 0b09 000000   		.space	3
 5809 0b0c FFFFFFFF 		.word	-1
 5810 0b10 4C645052 		.ascii	"LdPRG\000"
 5810      4700
 5811 0b16 0000     		.space	2
 5812 0b18 00       		.ascii	"\000"
 5813 0b19 00000000 		.space	7
 5813      000000
 5814 0b20 2C       		.byte	44
 5815 0b21 000000   		.space	3
 5816 0b24 FFFFFFFF 		.word	-1
 5817 0b28 2E       		.byte	46
 5818 0b29 000000   		.space	3
 5819 0b2c FFFFFFFF 		.word	-1
 5820 0b30 2D2D0D00 		.ascii	"--\015\000"
 5821 0b34 00000000 		.space	4
 5822 0b38 00       		.ascii	"\000"
 5823 0b39 00000000 		.space	7
 5823      000000
 5824 0b40 2D       		.byte	45
 5825 0b41 000000   		.space	3
 5826 0b44 FFFFFFFF 		.word	-1
 5827 0b48 2E       		.byte	46
 5828 0b49 000000   		.space	3
 5829 0b4c FFFFFFFF 		.word	-1
 5830 0b50 43505800 		.ascii	"CPX\000"
 5831 0b54 00000000 		.space	4
 5832 0b58 00       		.ascii	"\000"
 5833 0b59 00000000 		.space	7
 5833      000000
 5834 0b60 4D5F536F 		.ascii	"M_Solve\000"
 5834      6C766500 
 5835 0b68 00000000 		.space	7
 5835      000000
 5836 0b6f 00       		.space	1
 5837 0b70 20       		.byte	32
 5838 0b71 000000   		.space	3
 5839 0b74 01000000 		.word	1
ARM GAS  /tmp/cczIC8Cx.s 			page 150


 5840 0b78 2E       		.byte	46
 5841 0b79 000000   		.space	3
 5842 0b7c FFFFFFFF 		.word	-1
 5843 0b80 534C5600 		.ascii	"SLV\000"
 5844 0b84 00000000 		.space	4
 5845 0b88 00       		.ascii	"\000"
 5846 0b89 00000000 		.space	7
 5846      000000
 5847 0b90 20       		.byte	32
 5848 0b91 000000   		.space	3
 5849 0b94 02000000 		.word	2
 5850 0b98 2E       		.byte	46
 5851 0b99 000000   		.space	3
 5852 0b9c FFFFFFFF 		.word	-1
 5853 0ba0 04206478 		.ascii	"\004 dx\000"
 5853      00
 5854 0ba5 000000   		.space	3
 5855 0ba8 00       		.ascii	"\000"
 5856 0ba9 00000000 		.space	7
 5856      000000
 5857 0bb0 21       		.byte	33
 5858 0bb1 000000   		.space	3
 5859 0bb4 02000000 		.word	2
 5860 0bb8 2E       		.byte	46
 5861 0bb9 000000   		.space	3
 5862 0bbc FFFFFFFF 		.word	-1
 5863 0bc0 53554D00 		.ascii	"SUM\000"
 5864 0bc4 00000000 		.space	4
 5865 0bc8 00       		.ascii	"\000"
 5866 0bc9 00000000 		.space	7
 5866      000000
 5867 0bd0 21       		.byte	33
 5868 0bd1 000000   		.space	3
 5869 0bd4 01000000 		.word	1
 5870 0bd8 2E       		.byte	46
 5871 0bd9 000000   		.space	3
 5872 0bdc FFFFFFFF 		.word	-1
 5873 0be0 50524F44 		.ascii	"PROD\000"
 5873      00
 5874 0be5 000000   		.space	3
 5875 0be8 00       		.ascii	"\000"
 5876 0be9 00000000 		.space	7
 5876      000000
 5877 0bf0 2C       		.byte	44
 5878 0bf1 000000   		.space	3
 5879 0bf4 FFFFFFFF 		.word	-1
 5880 0bf8 2E       		.byte	46
 5881 0bf9 000000   		.space	3
 5882 0bfc FFFFFFFF 		.word	-1
 5883 0c00 2D2D0D00 		.ascii	"--\015\000"
 5884 0c04 00000000 		.space	4
 5885 0c08 00       		.ascii	"\000"
 5886 0c09 00000000 		.space	7
 5886      000000
 5887 0c10 2D       		.byte	45
 5888 0c11 000000   		.space	3
 5889 0c14 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cczIC8Cx.s 			page 151


 5890 0c18 2E       		.byte	46
 5891 0c19 000000   		.space	3
 5892 0c1c FFFFFFFF 		.word	-1
 5893 0c20 43505800 		.ascii	"CPX\000"
 5894 0c24 00000000 		.space	4
 5895 0c28 00       		.ascii	"\000"
 5896 0c29 00000000 		.space	7
 5896      000000
 5897 0c30 4D5F426C 		.ascii	"M_Blank2\000"
 5897      616E6B32 
 5897      00
 5898 0c39 00000000 		.space	6
 5898      0000
 5899 0c3f 00       		.space	1
 5900 0c40 28       		.byte	40
 5901 0c41 000000   		.space	3
 5902 0c44 03000000 		.word	3
 5903 0c48 2E       		.byte	46
 5904 0c49 000000   		.space	3
 5905 0c4c FFFFFFFF 		.word	-1
 5906 0c50 912B00   		.ascii	"\221+\000"
 5907 0c53 00000000 		.space	5
 5907      00
 5908 0c58 00       		.ascii	"\000"
 5909 0c59 00000000 		.space	7
 5909      000000
 5910 0c60 16       		.byte	22
 5911 0c61 000000   		.space	3
 5912 0c64 01000000 		.word	1
 5913 0c68 2E       		.byte	46
 5914 0c69 000000   		.space	3
 5915 0c6c FFFFFFFF 		.word	-1
 5916 0c70 312F5800 		.ascii	"1/X\000"
 5917 0c74 00000000 		.space	4
 5918 0c78 00       		.ascii	"\000"
 5919 0c79 00000000 		.space	7
 5919      000000
 5920 0c80 1C       		.byte	28
 5921 0c81 000000   		.space	3
 5922 0c84 01000000 		.word	1
 5923 0c88 2E       		.byte	46
 5924 0c89 000000   		.space	3
 5925 0c8c FFFFFFFF 		.word	-1
 5926 0c90 035800   		.ascii	"\003X\000"
 5927 0c93 00000000 		.space	5
 5927      00
 5928 0c98 00       		.ascii	"\000"
 5929 0c99 00000000 		.space	7
 5929      000000
 5930 0ca0 13       		.byte	19
 5931 0ca1 000000   		.space	3
 5932 0ca4 02000000 		.word	2
 5933 0ca8 2E       		.byte	46
 5934 0ca9 000000   		.space	3
 5935 0cac FFFFFFFF 		.word	-1
 5936 0cb0 4C4F4700 		.ascii	"LOG\000"
 5937 0cb4 00000000 		.space	4
ARM GAS  /tmp/cczIC8Cx.s 			page 152


 5938 0cb8 00       		.ascii	"\000"
 5939 0cb9 00000000 		.space	7
 5939      000000
 5940 0cc0 2C       		.byte	44
 5941 0cc1 000000   		.space	3
 5942 0cc4 FFFFFFFF 		.word	-1
 5943 0cc8 2E       		.byte	46
 5944 0cc9 000000   		.space	3
 5945 0ccc FFFFFFFF 		.word	-1
 5946 0cd0 2D2D0D00 		.ascii	"--\015\000"
 5947 0cd4 00000000 		.space	4
 5948 0cd8 00       		.ascii	"\000"
 5949 0cd9 00000000 		.space	7
 5949      000000
 5950 0ce0 2D       		.byte	45
 5951 0ce1 000000   		.space	3
 5952 0ce4 FFFFFFFF 		.word	-1
 5953 0ce8 2E       		.byte	46
 5954 0ce9 000000   		.space	3
 5955 0cec FFFFFFFF 		.word	-1
 5956 0cf0 43505800 		.ascii	"CPX\000"
 5957 0cf4 00000000 		.space	4
 5958 0cf8 00       		.ascii	"\000"
 5959 0cf9 00000000 		.space	7
 5959      000000
 5960 0d00 4D5F416C 		.ascii	"M_Alpha\000"
 5960      70686100 
 5961 0d08 00000000 		.space	7
 5961      000000
 5962 0d0f 00       		.space	1
 5963 0d10 34       		.byte	52
 5964 0d11 000000   		.space	3
 5965 0d14 78010000 		.word	376
 5966 0d18 34       		.byte	52
 5967 0d19 000000   		.space	3
 5968 0d1c 6D010000 		.word	365
 5969 0d20 582D3EA0 		.ascii	"X->\240\000"
 5969      00
 5970 0d25 000000   		.space	3
 5971 0d28 A054494D 		.ascii	"\240TIME\000"
 5971      4500
 5972 0d2e 0000     		.space	2
 5973 0d30 34       		.byte	52
 5974 0d31 000000   		.space	3
 5975 0d34 77010000 		.word	375
 5976 0d38 34       		.byte	52
 5977 0d39 000000   		.space	3
 5978 0d3c 6C010000 		.word	364
 5979 0d40 A02D3E58 		.ascii	"\240->X\000"
 5979      00
 5980 0d45 000000   		.space	3
 5981 0d48 A0444154 		.ascii	"\240DATE\000"
 5981      4500
 5982 0d4e 0000     		.space	2
 5983 0d50 34       		.byte	52
 5984 0d51 000000   		.space	3
 5985 0d54 00480000 		.word	18432
ARM GAS  /tmp/cczIC8Cx.s 			page 153


 5986 0d58 34       		.byte	52
 5987 0d59 000000   		.space	3
 5988 0d5c 6A010000 		.word	362
 5989 0d60 A0495000 		.ascii	"\240IP\000"
 5990 0d64 00000000 		.space	4
 5991 0d68 A0444159 		.ascii	"\240DAY\000"
 5991      00
 5992 0d6d 000000   		.space	3
 5993 0d70 34       		.byte	52
 5994 0d71 000000   		.space	3
 5995 0d74 76010000 		.word	374
 5996 0d78 34       		.byte	52
 5997 0d79 000000   		.space	3
 5998 0d7c 6B010000 		.word	363
 5999 0d80 A04C454E 		.ascii	"\240LENG\000"
 5999      4700
 6000 0d86 0000     		.space	2
 6001 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 6001      4800
 6002 0d8e 0000     		.space	2
 6003 0d90 2C       		.byte	44
 6004 0d91 000000   		.space	3
 6005 0d94 FFFFFFFF 		.word	-1
 6006 0d98 2C       		.byte	44
 6007 0d99 000000   		.space	3
 6008 0d9c 01000000 		.word	1
 6009 0da0 2D2D0D00 		.ascii	"--\015\000"
 6010 0da4 00000000 		.space	4
 6011 0da8 00       		.ascii	"\000"
 6012 0da9 00000000 		.space	7
 6012      000000
 6013 0db0 2D       		.byte	45
 6014 0db1 000000   		.space	3
 6015 0db4 FFFFFFFF 		.word	-1
 6016 0db8 2D       		.byte	45
 6017 0db9 000000   		.space	3
 6018 0dbc 01000000 		.word	1
 6019 0dc0 43505800 		.ascii	"CPX\000"
 6020 0dc4 00000000 		.space	4
 6021 0dc8 00       		.ascii	"\000"
 6022 0dc9 00000000 		.space	7
 6022      000000
 6023 0dd0 4D5F435F 		.ascii	"M_C_Lock\000"
 6023      4C6F636B 
 6023      00
 6024 0dd9 00000000 		.space	6
 6024      0000
 6025 0ddf 00       		.space	1
 6026 0de0 18       		.byte	24
 6027 0de1 000000   		.space	3
 6028 0de4 02000000 		.word	2
 6029 0de8 04       		.byte	4
 6030 0de9 000000   		.space	3
 6031 0dec 02000000 		.word	2
 6032 0df0 504F4C41 		.ascii	"POLAR\000"
 6032      5200
 6033 0df6 0000     		.space	2
ARM GAS  /tmp/cczIC8Cx.s 			page 154


 6034 0df8 0D205000 		.ascii	"\015 P\000"
 6035 0dfc 00000000 		.space	4
 6036 0e00 18       		.byte	24
 6037 0e01 000000   		.space	3
 6038 0e04 01000000 		.word	1
 6039 0e08 04       		.byte	4
 6040 0e09 000000   		.space	3
 6041 0e0c 01000000 		.word	1
 6042 0e10 52454354 		.ascii	"RECT\000"
 6042      00
 6043 0e15 000000   		.space	3
 6044 0e18 0D205200 		.ascii	"\015 R\000"
 6045 0e1c 00000000 		.space	4
 6046 0e20 0E       		.byte	14
 6047 0e21 000000   		.space	3
 6048 0e24 01000000 		.word	1
 6049 0e28 0E       		.byte	14
 6050 0e29 000000   		.space	3
 6051 0e2c 03000000 		.word	3
 6052 0e30 2B2F2D06 		.ascii	"+/-\006Im\000"
 6052      496D00
 6053 0e37 00       		.space	1
 6054 0e38 2B2F2D06 		.ascii	"+/-\006Re\000"
 6054      526500
 6055 0e3f 00       		.space	1
 6056 0e40 0D       		.byte	13
 6057 0e41 000000   		.space	3
 6058 0e44 02000000 		.word	2
 6059 0e48 00       		.byte	0
 6060 0e49 000000   		.space	3
 6061 0e4c 01000000 		.word	1
 6062 0e50 52651749 		.ascii	"Re\027Im\000"
 6062      6D00
 6063 0e56 0000     		.space	2
 6064 0e58 48595000 		.ascii	"HYP\000"
 6065 0e5c 00000000 		.space	4
 6066 0e60 2C       		.byte	44
 6067 0e61 000000   		.space	3
 6068 0e64 FFFFFFFF 		.word	-1
 6069 0e68 0F       		.byte	15
 6070 0e69 000000   		.space	3
 6071 0e6c 01000000 		.word	1
 6072 0e70 2D2D0D00 		.ascii	"--\015\000"
 6073 0e74 00000000 		.space	4
 6074 0e78 1106AF00 		.ascii	"\021\006\257\000"
 6075 0e7c 00000000 		.space	4
 6076 0e80 2D       		.byte	45
 6077 0e81 000000   		.space	3
 6078 0e84 FFFFFFFF 		.word	-1
 6079 0e88 0C       		.byte	12
 6080 0e89 000000   		.space	3
 6081 0e8c 01000000 		.word	1
 6082 0e90 43505800 		.ascii	"CPX\000"
 6083 0e94 00000000 		.space	4
 6084 0e98 1106434E 		.ascii	"\021\006CNST\000"
 6084      535400
 6085 0e9f 00       		.space	1
ARM GAS  /tmp/cczIC8Cx.s 			page 155


 6086 0ea0 4D5F436C 		.ascii	"M_Clear_C\000"
 6086      6561725F 
 6086      4300
 6087 0eaa 00000000 		.space	5
 6087      00
 6088 0eaf 00       		.space	1
 6089 0eb0 2E       		.byte	46
 6090 0eb1 000000   		.space	3
 6091 0eb4 FFFFFFFF 		.word	-1
 6092 0eb8 2E       		.byte	46
 6093 0eb9 000000   		.space	3
 6094 0ebc FFFFFFFF 		.word	-1
 6095 0ec0 00       		.ascii	"\000"
 6096 0ec1 00000000 		.space	7
 6096      000000
 6097 0ec8 00       		.ascii	"\000"
 6098 0ec9 00000000 		.space	7
 6098      000000
 6099 0ed0 2E       		.byte	46
 6100 0ed1 000000   		.space	3
 6101 0ed4 FFFFFFFF 		.word	-1
 6102 0ed8 2E       		.byte	46
 6103 0ed9 000000   		.space	3
 6104 0edc FFFFFFFF 		.word	-1
 6105 0ee0 00       		.ascii	"\000"
 6106 0ee1 00000000 		.space	7
 6106      000000
 6107 0ee8 00       		.ascii	"\000"
 6108 0ee9 00000000 		.space	7
 6108      000000
 6109 0ef0 10       		.byte	16
 6110 0ef1 000000   		.space	3
 6111 0ef4 03000000 		.word	3
 6112 0ef8 34       		.byte	52
 6113 0ef9 000000   		.space	3
 6114 0efc 74010000 		.word	372
 6115 0f00 434C7800 		.ascii	"CLx\000"
 6116 0f04 00000000 		.space	4
 6117 0f08 434C06A0 		.ascii	"CL\006\240\000"
 6117      00
 6118 0f0d 000000   		.space	3
 6119 0f10 34       		.byte	52
 6120 0f11 000000   		.space	3
 6121 0f14 40010000 		.word	320
 6122 0f18 2E       		.byte	46
 6123 0f19 000000   		.space	3
 6124 0f1c FFFFFFFF 		.word	-1
 6125 0f20 434C5374 		.ascii	"CLStk\000"
 6125      6B00
 6126 0f26 0000     		.space	2
 6127 0f28 00       		.ascii	"\000"
 6128 0f29 00000000 		.space	7
 6128      000000
 6129 0f30 2C       		.byte	44
 6130 0f31 000000   		.space	3
 6131 0f34 FFFFFFFF 		.word	-1
 6132 0f38 2E       		.byte	46
ARM GAS  /tmp/cczIC8Cx.s 			page 156


 6133 0f39 000000   		.space	3
 6134 0f3c FFFFFFFF 		.word	-1
 6135 0f40 2D2D0D00 		.ascii	"--\015\000"
 6136 0f44 00000000 		.space	4
 6137 0f48 00       		.ascii	"\000"
 6138 0f49 00000000 		.space	7
 6138      000000
 6139 0f50 2D       		.byte	45
 6140 0f51 000000   		.space	3
 6141 0f54 FFFFFFFF 		.word	-1
 6142 0f58 2E       		.byte	46
 6143 0f59 000000   		.space	3
 6144 0f5c FFFFFFFF 		.word	-1
 6145 0f60 43505800 		.ascii	"CPX\000"
 6146 0f64 00000000 		.space	4
 6147 0f68 00       		.ascii	"\000"
 6148 0f69 00000000 		.space	7
 6148      000000
 6149 0f70 4D5F5377 		.ascii	"M_Swap_C\000"
 6149      61705F43 
 6149      00
 6150 0f79 00000000 		.space	6
 6150      0000
 6151 0f7f 00       		.space	1
 6152 0f80 0D       		.byte	13
 6153 0f81 000000   		.space	3
 6154 0f84 01000000 		.word	1
 6155 0f88 2E       		.byte	46
 6156 0f89 000000   		.space	3
 6157 0f8c FFFFFFFF 		.word	-1
 6158 0f90 53686F77 		.ascii	"Show\016\000"
 6158      0E00
 6159 0f96 0000     		.space	2
 6160 0f98 00       		.ascii	"\000"
 6161 0f99 00000000 		.space	7
 6161      000000
 6162 0fa0 0D       		.byte	13
 6163 0fa1 000000   		.space	3
 6164 0fa4 02000000 		.word	2
 6165 0fa8 2E       		.byte	46
 6166 0fa9 000000   		.space	3
 6167 0fac FFFFFFFF 		.word	-1
 6168 0fb0 53686F77 		.ascii	"Show\015\000"
 6168      0D00
 6169 0fb6 0000     		.space	2
 6170 0fb8 00       		.ascii	"\000"
 6171 0fb9 00000000 		.space	7
 6171      000000
 6172 0fc0 0D       		.byte	13
 6173 0fc1 000000   		.space	3
 6174 0fc4 03000000 		.word	3
 6175 0fc8 2E       		.byte	46
 6176 0fc9 000000   		.space	3
 6177 0fcc FFFFFFFF 		.word	-1
 6178 0fd0 78173F00 		.ascii	"x\027?\000"
 6179 0fd4 00000000 		.space	4
 6180 0fd8 00       		.ascii	"\000"
ARM GAS  /tmp/cczIC8Cx.s 			page 157


 6181 0fd9 00000000 		.space	7
 6181      000000
 6182 0fe0 2E       		.byte	46
 6183 0fe1 000000   		.space	3
 6184 0fe4 FFFFFFFF 		.word	-1
 6185 0fe8 2E       		.byte	46
 6186 0fe9 000000   		.space	3
 6187 0fec FFFFFFFF 		.word	-1
 6188 0ff0 00       		.ascii	"\000"
 6189 0ff1 00000000 		.space	7
 6189      000000
 6190 0ff8 00       		.ascii	"\000"
 6191 0ff9 00000000 		.space	7
 6191      000000
 6192 1000 2C       		.byte	44
 6193 1001 000000   		.space	3
 6194 1004 FFFFFFFF 		.word	-1
 6195 1008 2E       		.byte	46
 6196 1009 000000   		.space	3
 6197 100c FFFFFFFF 		.word	-1
 6198 1010 2D2D0D00 		.ascii	"--\015\000"
 6199 1014 00000000 		.space	4
 6200 1018 00       		.ascii	"\000"
 6201 1019 00000000 		.space	7
 6201      000000
 6202 1020 2D       		.byte	45
 6203 1021 000000   		.space	3
 6204 1024 FFFFFFFF 		.word	-1
 6205 1028 2E       		.byte	46
 6206 1029 000000   		.space	3
 6207 102c FFFFFFFF 		.word	-1
 6208 1030 43505800 		.ascii	"CPX\000"
 6209 1034 00000000 		.space	4
 6210 1038 00       		.ascii	"\000"
 6211 1039 00000000 		.space	7
 6211      000000
 6212 1040 4D5F4172 		.ascii	"M_Arrow_C\000"
 6212      726F775F 
 6212      4300
 6213 104a 00000000 		.space	5
 6213      00
 6214 104f 00       		.space	1
 6215 1050 2E       		.byte	46
 6216 1051 000000   		.space	3
 6217 1054 FFFFFFFF 		.word	-1
 6218 1058 06       		.byte	6
 6219 1059 000000   		.space	3
 6220 105c 02000000 		.word	2
 6221 1060 00       		.ascii	"\000"
 6222 1061 00000000 		.space	7
 6222      000000
 6223 1068 44454700 		.ascii	"DEG\000"
 6224 106c 00000000 		.space	4
 6225 1070 2E       		.byte	46
 6226 1071 000000   		.space	3
 6227 1074 FFFFFFFF 		.word	-1
 6228 1078 07       		.byte	7
ARM GAS  /tmp/cczIC8Cx.s 			page 158


 6229 1079 000000   		.space	3
 6230 107c 02000000 		.word	2
 6231 1080 00       		.ascii	"\000"
 6232 1081 00000000 		.space	7
 6232      000000
 6233 1088 52414400 		.ascii	"RAD\000"
 6234 108c 00000000 		.space	4
 6235 1090 2E       		.byte	46
 6236 1091 000000   		.space	3
 6237 1094 FFFFFFFF 		.word	-1
 6238 1098 08       		.byte	8
 6239 1099 000000   		.space	3
 6240 109c 02000000 		.word	2
 6241 10a0 00       		.ascii	"\000"
 6242 10a1 00000000 		.space	7
 6242      000000
 6243 10a8 47726164 		.ascii	"Grad\000"
 6243      00
 6244 10ad 000000   		.space	3
 6245 10b0 2E       		.byte	46
 6246 10b1 000000   		.space	3
 6247 10b4 FFFFFFFF 		.word	-1
 6248 10b8 06       		.byte	6
 6249 10b9 000000   		.space	3
 6250 10bc 01000000 		.word	1
 6251 10c0 00       		.ascii	"\000"
 6252 10c1 00000000 		.space	7
 6252      000000
 6253 10c8 0D484D53 		.ascii	"\015HMS\000"
 6253      00
 6254 10cd 000000   		.space	3
 6255 10d0 2C       		.byte	44
 6256 10d1 000000   		.space	3
 6257 10d4 FFFFFFFF 		.word	-1
 6258 10d8 07       		.byte	7
 6259 10d9 000000   		.space	3
 6260 10dc 01000000 		.word	1
 6261 10e0 2D2D0D00 		.ascii	"--\015\000"
 6262 10e4 00000000 		.space	4
 6263 10e8 484D530D 		.ascii	"HMS\015\000"
 6263      00
 6264 10ed 000000   		.space	3
 6265 10f0 2D       		.byte	45
 6266 10f1 000000   		.space	3
 6267 10f4 FFFFFFFF 		.word	-1
 6268 10f8 2E       		.byte	46
 6269 10f9 000000   		.space	3
 6270 10fc FFFFFFFF 		.word	-1
 6271 1100 43505800 		.ascii	"CPX\000"
 6272 1104 00000000 		.space	4
 6273 1108 00       		.ascii	"\000"
 6274 1109 00000000 		.space	7
 6274      000000
 6275 1110 4D5F5072 		.ascii	"M_Prob_C\000"
 6275      6F625F43 
 6275      00
 6276 1119 00000000 		.space	6
ARM GAS  /tmp/cczIC8Cx.s 			page 159


 6276      0000
 6277 111f 00       		.space	1
 6278 1120 18       		.byte	24
 6279 1121 000000   		.space	3
 6280 1124 03000000 		.word	3
 6281 1128 34       		.byte	52
 6282 1129 000000   		.space	3
 6283 112c 31050000 		.word	1329
 6284 1130 14062100 		.ascii	"\024\006!\000"
 6285 1134 00000000 		.space	4
 6286 1138 14064C6E 		.ascii	"\024\006Ln\006\202\000"
 6286      068200
 6287 113f 00       		.space	1
 6288 1140 34       		.byte	52
 6289 1141 000000   		.space	3
 6290 1144 12060000 		.word	1554
 6291 1148 2E       		.byte	46
 6292 1149 000000   		.space	3
 6293 114c FFFFFFFF 		.word	-1
 6294 1150 14064379 		.ascii	"\024\006Cy,x\000"
 6294      2C7800
 6295 1157 00       		.space	1
 6296 1158 00       		.ascii	"\000"
 6297 1159 00000000 		.space	7
 6297      000000
 6298 1160 34       		.byte	52
 6299 1161 000000   		.space	3
 6300 1164 13060000 		.word	1555
 6301 1168 2E       		.byte	46
 6302 1169 000000   		.space	3
 6303 116c FFFFFFFF 		.word	-1
 6304 1170 14065079 		.ascii	"\024\006Py,x\000"
 6304      2C7800
 6305 1177 00       		.space	1
 6306 1178 00       		.ascii	"\000"
 6307 1179 00000000 		.space	7
 6307      000000
 6308 1180 2E       		.byte	46
 6309 1181 000000   		.space	3
 6310 1184 FFFFFFFF 		.word	-1
 6311 1188 2E       		.byte	46
 6312 1189 000000   		.space	3
 6313 118c FFFFFFFF 		.word	-1
 6314 1190 00       		.ascii	"\000"
 6315 1191 00000000 		.space	7
 6315      000000
 6316 1198 00       		.ascii	"\000"
 6317 1199 00000000 		.space	7
 6317      000000
 6318 11a0 2C       		.byte	44
 6319 11a1 000000   		.space	3
 6320 11a4 FFFFFFFF 		.word	-1
 6321 11a8 2E       		.byte	46
 6322 11a9 000000   		.space	3
 6323 11ac FFFFFFFF 		.word	-1
 6324 11b0 2D2D0D00 		.ascii	"--\015\000"
 6325 11b4 00000000 		.space	4
ARM GAS  /tmp/cczIC8Cx.s 			page 160


 6326 11b8 00       		.ascii	"\000"
 6327 11b9 00000000 		.space	7
 6327      000000
 6328 11c0 2D       		.byte	45
 6329 11c1 000000   		.space	3
 6330 11c4 FFFFFFFF 		.word	-1
 6331 11c8 2E       		.byte	46
 6332 11c9 000000   		.space	3
 6333 11cc FFFFFFFF 		.word	-1
 6334 11d0 43505800 		.ascii	"CPX\000"
 6335 11d4 00000000 		.space	4
 6336 11d8 00       		.ascii	"\000"
 6337 11d9 00000000 		.space	7
 6337      000000
 6338 11e0 4D5F426C 		.ascii	"M_Blank2_C\000"
 6338      616E6B32 
 6338      5F4300
 6339 11eb 00000000 		.space	4
 6340 11ef 00       		.space	1
 6341 11f0 00       		.byte	0
 6342 11f1 000000   		.space	3
 6343 11f4 01000000 		.word	1
 6344 11f8 2E       		.byte	46
 6345 11f9 000000   		.space	3
 6346 11fc FFFFFFFF 		.word	-1
 6347 1200 48595000 		.ascii	"HYP\000"
 6348 1204 00000000 		.space	4
 6349 1208 00       		.ascii	"\000"
 6350 1209 00000000 		.space	7
 6350      000000
 6351 1210 16       		.byte	22
 6352 1211 000000   		.space	3
 6353 1214 01000000 		.word	1
 6354 1218 2E       		.byte	46
 6355 1219 000000   		.space	3
 6356 121c FFFFFFFF 		.word	-1
 6357 1220 312F5800 		.ascii	"1/X\000"
 6358 1224 00000000 		.space	4
 6359 1228 00       		.ascii	"\000"
 6360 1229 00000000 		.space	7
 6360      000000
 6361 1230 1C       		.byte	28
 6362 1231 000000   		.space	3
 6363 1234 01000000 		.word	1
 6364 1238 2E       		.byte	46
 6365 1239 000000   		.space	3
 6366 123c FFFFFFFF 		.word	-1
 6367 1240 035800   		.ascii	"\003X\000"
 6368 1243 00000000 		.space	5
 6368      00
 6369 1248 00       		.ascii	"\000"
 6370 1249 00000000 		.space	7
 6370      000000
 6371 1250 13       		.byte	19
 6372 1251 000000   		.space	3
 6373 1254 02000000 		.word	2
 6374 1258 2E       		.byte	46
ARM GAS  /tmp/cczIC8Cx.s 			page 161


 6375 1259 000000   		.space	3
 6376 125c FFFFFFFF 		.word	-1
 6377 1260 4C4F4700 		.ascii	"LOG\000"
 6378 1264 00000000 		.space	4
 6379 1268 00       		.ascii	"\000"
 6380 1269 00000000 		.space	7
 6380      000000
 6381 1270 2C       		.byte	44
 6382 1271 000000   		.space	3
 6383 1274 FFFFFFFF 		.word	-1
 6384 1278 2E       		.byte	46
 6385 1279 000000   		.space	3
 6386 127c FFFFFFFF 		.word	-1
 6387 1280 2D2D0D00 		.ascii	"--\015\000"
 6388 1284 00000000 		.space	4
 6389 1288 00       		.ascii	"\000"
 6390 1289 00000000 		.space	7
 6390      000000
 6391 1290 2D       		.byte	45
 6392 1291 000000   		.space	3
 6393 1294 FFFFFFFF 		.word	-1
 6394 1298 2E       		.byte	46
 6395 1299 000000   		.space	3
 6396 129c FFFFFFFF 		.word	-1
 6397 12a0 43505800 		.ascii	"CPX\000"
 6398 12a4 00000000 		.space	4
 6399 12a8 00       		.ascii	"\000"
 6400 12a9 00000000 		.space	7
 6400      000000
 6401 12b0 4D5F4D69 		.ascii	"M_Misc_C\000"
 6401      73635F43 
 6401      00
 6402 12b9 00000000 		.space	6
 6402      0000
 6403 12bf 00       		.space	1
 6404 12c0 25       		.byte	37
 6405 12c1 000000   		.space	3
 6406 12c4 01000000 		.word	1
 6407 12c8 14       		.byte	20
 6408 12c9 000000   		.space	3
 6409 12cc 01000000 		.word	1
 6410 12d0 7C7A7C00 		.ascii	"|z|\000"
 6411 12d4 00000000 		.space	4
 6412 12d8 14329C00 		.ascii	"\0242\234\000"
 6413 12dc 00000000 		.space	4
 6414 12e0 25       		.byte	37
 6415 12e1 000000   		.space	3
 6416 12e4 02000000 		.word	2
 6417 12e8 14       		.byte	20
 6418 12e9 000000   		.space	3
 6419 12ec 02000000 		.word	2
 6420 12f0 524E4400 		.ascii	"RND\000"
 6421 12f4 00000000 		.space	4
 6422 12f8 144C6F67 		.ascii	"\024Log\272\000"
 6422      BA00
 6423 12fe 0000     		.space	2
 6424 1300 26       		.byte	38
ARM GAS  /tmp/cczIC8Cx.s 			page 162


 6425 1301 000000   		.space	3
 6426 1304 01000000 		.word	1
 6427 1308 15       		.byte	21
 6428 1309 000000   		.space	3
 6429 130c 02000000 		.word	2
 6430 1310 300D5265 		.ascii	"0\015Re\000"
 6430      00
 6431 1315 000000   		.space	3
 6432 1318 144C6F67 		.ascii	"\024Log\213\000"
 6432      8B00
 6433 131e 0000     		.space	2
 6434 1320 26       		.byte	38
 6435 1321 000000   		.space	3
 6436 1324 02000000 		.word	2
 6437 1328 16       		.byte	22
 6438 1329 000000   		.space	3
 6439 132c 02000000 		.word	2
 6440 1330 300D496D 		.ascii	"0\015Im\000"
 6440      00
 6441 1335 000000   		.space	3
 6442 1338 147C7C65 		.ascii	"\024||el\000"
 6442      6C00
 6443 133e 0000     		.space	2
 6444 1340 2C       		.byte	44
 6445 1341 000000   		.space	3
 6446 1344 FFFFFFFF 		.word	-1
 6447 1348 1C       		.byte	28
 6448 1349 000000   		.space	3
 6449 134c 03000000 		.word	3
 6450 1350 2D2D0D00 		.ascii	"--\015\000"
 6451 1354 00000000 		.space	4
 6452 1358 142E1C00 		.ascii	"\024.\034\000"
 6453 135c 00000000 		.space	4
 6454 1360 2D       		.byte	45
 6455 1361 000000   		.space	3
 6456 1364 FFFFFFFF 		.word	-1
 6457 1368 16       		.byte	22
 6458 1369 000000   		.space	3
 6459 136c 03000000 		.word	3
 6460 1370 43505800 		.ascii	"CPX\000"
 6461 1374 00000000 		.space	4
 6462 1378 142E2F00 		.ascii	"\024./\000"
 6463 137c 00000000 		.space	4
 6464 1380 4D5F5573 		.ascii	"M_Usermenu\000"
 6464      65726D65 
 6464      6E7500
 6465 138b 00000000 		.space	4
 6466 138f 00       		.space	1
 6467 1390 34       		.byte	52
 6468 1391 000000   		.space	3
 6469 1394 00FB0000 		.word	64256
 6470 1398 2E       		.byte	46
 6471 1399 000000   		.space	3
 6472 139c FFFFFFFF 		.word	-1
 6473 13a0 554D454E 		.ascii	"UMEN\000"
 6473      00
 6474 13a5 000000   		.space	3
ARM GAS  /tmp/cczIC8Cx.s 			page 163


 6475 13a8 00       		.ascii	"\000"
 6476 13a9 00000000 		.space	7
 6476      000000
 6477 13b0 34       		.byte	52
 6478 13b1 000000   		.space	3
 6479 13b4 55FB4D31 		.word	827194197
 6480 13b8 34       		.byte	52
 6481 13b9 000000   		.space	3
 6482 13bc 55FB4D34 		.word	877525845
 6483 13c0 554D3100 		.ascii	"UM1\000"
 6484 13c4 00000000 		.space	4
 6485 13c8 554D3400 		.ascii	"UM4\000"
 6486 13cc 00000000 		.space	4
 6487 13d0 34       		.byte	52
 6488 13d1 000000   		.space	3
 6489 13d4 55FB4D32 		.word	843971413
 6490 13d8 34       		.byte	52
 6491 13d9 000000   		.space	3
 6492 13dc 55FB4D35 		.word	894303061
 6493 13e0 554D3200 		.ascii	"UM2\000"
 6494 13e4 00000000 		.space	4
 6495 13e8 554D3500 		.ascii	"UM5\000"
 6496 13ec 00000000 		.space	4
 6497 13f0 34       		.byte	52
 6498 13f1 000000   		.space	3
 6499 13f4 55FB4D33 		.word	860748629
 6500 13f8 34       		.byte	52
 6501 13f9 000000   		.space	3
 6502 13fc 55FB4D36 		.word	911080277
 6503 1400 554D3300 		.ascii	"UM3\000"
 6504 1404 00000000 		.space	4
 6505 1408 554D3600 		.ascii	"UM6\000"
 6506 140c 00000000 		.space	4
 6507 1410 2C       		.byte	44
 6508 1411 000000   		.space	3
 6509 1414 FFFFFFFF 		.word	-1
 6510 1418 1C       		.byte	28
 6511 1419 000000   		.space	3
 6512 141c 03000000 		.word	3
 6513 1420 2D2D0D00 		.ascii	"--\015\000"
 6514 1424 00000000 		.space	4
 6515 1428 00       		.ascii	"\000"
 6516 1429 00000000 		.space	7
 6516      000000
 6517 1430 2D       		.byte	45
 6518 1431 000000   		.space	3
 6519 1434 FFFFFFFF 		.word	-1
 6520 1438 16       		.byte	22
 6521 1439 000000   		.space	3
 6522 143c 03000000 		.word	3
 6523 1440 43505800 		.ascii	"CPX\000"
 6524 1444 00000000 		.space	4
 6525 1448 00       		.ascii	"\000"
 6526 1449 00000000 		.space	7
 6526      000000
 6527 1450 4D5F5072 		.ascii	"M_Print\000"
 6527      696E7400 
ARM GAS  /tmp/cczIC8Cx.s 			page 164


 6528 1458 00000000 		.space	7
 6528      000000
 6529 145f 00       		.space	1
 6530 1460 34       		.byte	52
 6531 1461 000000   		.space	3
 6532 1464 D9010000 		.word	473
 6533 1468 34       		.byte	52
 6534 1469 000000   		.space	3
 6535 146c DA010000 		.word	474
 6536 1470 92064F6E 		.ascii	"\222\006On\000"
 6536      00
 6537 1475 000000   		.space	3
 6538 1478 92064F66 		.ascii	"\222\006Off\000"
 6538      6600
 6539 147e 0000     		.space	2
 6540 1480 34       		.byte	52
 6541 1481 000000   		.space	3
 6542 1484 00AF0000 		.word	44800
 6543 1488 34       		.byte	52
 6544 1489 000000   		.space	3
 6545 148c 00B60000 		.word	46592
 6546 1490 92064D6F 		.ascii	"\222\006Mode\000"
 6546      646500
 6547 1497 00       		.space	1
 6548 1498 92064462 		.ascii	"\222\006DbSp\000"
 6548      537000
 6549 149f 00       		.space	1
 6550 14a0 34       		.byte	52
 6551 14a1 000000   		.space	3
 6552 14a4 BC010000 		.word	444
 6553 14a8 34       		.byte	52
 6554 14a9 000000   		.space	3
 6555 14ac BD010000 		.word	445
 6556 14b0 92065072 		.ascii	"\222\006Prog\000"
 6556      6F6700
 6557 14b7 00       		.space	1
 6558 14b8 92065265 		.ascii	"\222\006Regs\000"
 6558      677300
 6559 14bf 00       		.space	1
 6560 14c0 34       		.byte	52
 6561 14c1 000000   		.space	3
 6562 14c4 BE010000 		.word	446
 6563 14c8 34       		.byte	52
 6564 14c9 000000   		.space	3
 6565 14cc BF010000 		.word	447
 6566 14d0 92065374 		.ascii	"\222\006Stck\000"
 6566      636B00
 6567 14d7 00       		.space	1
 6568 14d8 92069100 		.ascii	"\222\006\221\000"
 6569 14dc 00000000 		.space	4
 6570 14e0 2C       		.byte	44
 6571 14e1 000000   		.space	3
 6572 14e4 FFFFFFFF 		.word	-1
 6573 14e8 34       		.byte	52
 6574 14e9 000000   		.space	3
 6575 14ec C0010000 		.word	448
 6576 14f0 2D2D0D00 		.ascii	"--\015\000"
ARM GAS  /tmp/cczIC8Cx.s 			page 165


 6577 14f4 00000000 		.space	4
 6578 14f8 9206A000 		.ascii	"\222\006\240\000"
 6579 14fc 00000000 		.space	4
 6580 1500 2D       		.byte	45
 6581 1501 000000   		.space	3
 6582 1504 FFFFFFFF 		.word	-1
 6583 1508 34       		.byte	52
 6584 1509 000000   		.space	3
 6585 150c C3010000 		.word	451
 6586 1510 43505800 		.ascii	"CPX\000"
 6587 1514 00000000 		.space	4
 6588 1518 92064144 		.ascii	"\222\006ADV\000"
 6588      5600
 6589 151e 0000     		.space	2
 6590              		.section	.rodata.mapping_alpha.11151,"a"
 6591              		.align	2
 6592              		.set	.LANCHOR16,. + 0
 6595              	mapping_alpha.11151:
 6596 0000 63       		.byte	99
 6597 0001 000000   		.space	3
 6598 0004 FFFFFFFF 		.word	-1
 6599 0008 00       		.byte	0
 6600 0009 000000   		.space	3
 6601 000c FFFFFFFF 		.word	-1
 6602 0010 01       		.byte	1
 6603 0011 000000   		.space	3
 6604 0014 FFFFFFFF 		.word	-1
 6605 0018 02       		.byte	2
 6606 0019 000000   		.space	3
 6607 001c FFFFFFFF 		.word	-1
 6608 0020 03       		.byte	3
 6609 0021 000000   		.space	3
 6610 0024 FFFFFFFF 		.word	-1
 6611 0028 04       		.byte	4
 6612 0029 000000   		.space	3
 6613 002c FFFFFFFF 		.word	-1
 6614 0030 05       		.byte	5
 6615 0031 000000   		.space	3
 6616 0034 FFFFFFFF 		.word	-1
 6617 0038 06       		.byte	6
 6618 0039 000000   		.space	3
 6619 003c FFFFFFFF 		.word	-1
 6620 0040 07       		.byte	7
 6621 0041 000000   		.space	3
 6622 0044 FFFFFFFF 		.word	-1
 6623 0048 08       		.byte	8
 6624 0049 000000   		.space	3
 6625 004c FFFFFFFF 		.word	-1
 6626 0050 09       		.byte	9
 6627 0051 000000   		.space	3
 6628 0054 FFFFFFFF 		.word	-1
 6629 0058 0A       		.byte	10
 6630 0059 000000   		.space	3
 6631 005c FFFFFFFF 		.word	-1
 6632 0060 0B       		.byte	11
 6633 0061 000000   		.space	3
 6634 0064 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cczIC8Cx.s 			page 166


 6635 0068 0C       		.byte	12
 6636 0069 000000   		.space	3
 6637 006c FFFFFFFF 		.word	-1
 6638 0070 0D       		.byte	13
 6639 0071 000000   		.space	3
 6640 0074 FFFFFFFF 		.word	-1
 6641 0078 0E       		.byte	14
 6642 0079 000000   		.space	3
 6643 007c FFFFFFFF 		.word	-1
 6644 0080 0F       		.byte	15
 6645 0081 000000   		.space	3
 6646 0084 FFFFFFFF 		.word	-1
 6647 0088 10       		.byte	16
 6648 0089 000000   		.space	3
 6649 008c FFFFFFFF 		.word	-1
 6650 0090 12       		.byte	18
 6651 0091 000000   		.space	3
 6652 0094 FFFFFFFF 		.word	-1
 6653 0098 13       		.byte	19
 6654 0099 000000   		.space	3
 6655 009c FFFFFFFF 		.word	-1
 6656 00a0 14       		.byte	20
 6657 00a1 000000   		.space	3
 6658 00a4 FFFFFFFF 		.word	-1
 6659 00a8 15       		.byte	21
 6660 00a9 000000   		.space	3
 6661 00ac FFFFFFFF 		.word	-1
 6662 00b0 16       		.byte	22
 6663 00b1 000000   		.space	3
 6664 00b4 FFFFFFFF 		.word	-1
 6665 00b8 18       		.byte	24
 6666 00b9 000000   		.space	3
 6667 00bc FFFFFFFF 		.word	-1
 6668 00c0 19       		.byte	25
 6669 00c1 000000   		.space	3
 6670 00c4 FFFFFFFF 		.word	-1
 6671 00c8 1A       		.byte	26
 6672 00c9 000000   		.space	3
 6673 00cc FFFFFFFF 		.word	-1
 6674 00d0 1B       		.byte	27
 6675 00d1 000000   		.space	3
 6676 00d4 FFFFFFFF 		.word	-1
 6677 00d8 1C       		.byte	28
 6678 00d9 000000   		.space	3
 6679 00dc FFFFFFFF 		.word	-1
 6680 00e0 1E       		.byte	30
 6681 00e1 000000   		.space	3
 6682 00e4 FFFFFFFF 		.word	-1
 6683 00e8 1F       		.byte	31
 6684 00e9 000000   		.space	3
 6685 00ec FFFFFFFF 		.word	-1
 6686 00f0 20       		.byte	32
 6687 00f1 000000   		.space	3
 6688 00f4 FFFFFFFF 		.word	-1
 6689 00f8 21       		.byte	33
 6690 00f9 000000   		.space	3
 6691 00fc FFFFFFFF 		.word	-1
ARM GAS  /tmp/cczIC8Cx.s 			page 167


 6692 0100 22       		.byte	34
 6693 0101 000000   		.space	3
 6694 0104 FFFFFFFF 		.word	-1
 6695 0108 24       		.byte	36
 6696 0109 000000   		.space	3
 6697 010c FFFFFFFF 		.word	-1
 6698 0110 25       		.byte	37
 6699 0111 000000   		.space	3
 6700 0114 FFFFFFFF 		.word	-1
 6701 0118 26       		.byte	38
 6702 0119 000000   		.space	3
 6703 011c FFFFFFFF 		.word	-1
 6704 0120 27       		.byte	39
 6705 0121 000000   		.space	3
 6706 0124 FFFFFFFF 		.word	-1
 6707 0128 28       		.byte	40
 6708 0129 000000   		.space	3
 6709 012c FFFFFFFF 		.word	-1
 6710 0130 2E       		.byte	46
 6711 0131 000000   		.space	3
 6712 0134 FFFFFFFF 		.word	-1
 6713 0138 2E       		.byte	46
 6714 0139 000000   		.space	3
 6715 013c FFFFFFFF 		.word	-1
 6716 0140 2E       		.byte	46
 6717 0141 000000   		.space	3
 6718 0144 FFFFFFFF 		.word	-1
 6719 0148 2E       		.byte	46
 6720 0149 000000   		.space	3
 6721 014c FFFFFFFF 		.word	-1
 6722 0150 2C       		.byte	44
 6723 0151 000000   		.space	3
 6724 0154 FFFFFFFF 		.word	-1
 6725 0158 2D       		.byte	45
 6726 0159 000000   		.space	3
 6727 015c FFFFFFFF 		.word	-1
 6728 0160 2E       		.byte	46
 6729 0161 000000   		.space	3
 6730 0164 FFFFFFFF 		.word	-1
 6731 0168 2E       		.byte	46
 6732 0169 000000   		.space	3
 6733 016c FFFFFFFF 		.word	-1
 6734 0170 2E       		.byte	46
 6735 0171 000000   		.space	3
 6736 0174 FFFFFFFF 		.word	-1
 6737              		.section	.rodata.mapping_fshift.11149,"a"
 6738              		.align	2
 6739              		.set	.LANCHOR14,. + 0
 6742              	mapping_fshift.11149:
 6743 0000 63       		.byte	99
 6744 0001 000000   		.space	3
 6745 0004 FFFFFFFF 		.word	-1
 6746 0008 22       		.byte	34
 6747 0009 000000   		.space	3
 6748 000c 03000000 		.word	3
 6749 0010 15       		.byte	21
 6750 0011 000000   		.space	3
ARM GAS  /tmp/cczIC8Cx.s 			page 168


 6751 0014 01000000 		.word	1
 6752 0018 1C       		.byte	28
 6753 0019 000000   		.space	3
 6754 001c 02000000 		.word	2
 6755 0020 13       		.byte	19
 6756 0021 000000   		.space	3
 6757 0024 01000000 		.word	1
 6758 0028 12       		.byte	18
 6759 0029 000000   		.space	3
 6760 002c 01000000 		.word	1
 6761 0030 12       		.byte	18
 6762 0031 000000   		.space	3
 6763 0034 03000000 		.word	3
 6764 0038 31       		.byte	49
 6765 0039 000000   		.space	3
 6766 003c 0F000000 		.word	15
 6767 0040 22       		.byte	34
 6768 0041 000000   		.space	3
 6769 0044 01000000 		.word	1
 6770 0048 0F       		.byte	15
 6771 0049 000000   		.space	3
 6772 004c 03000000 		.word	3
 6773 0050 01       		.byte	1
 6774 0051 000000   		.space	3
 6775 0054 02000000 		.word	2
 6776 0058 02       		.byte	2
 6777 0059 000000   		.space	3
 6778 005c 02000000 		.word	2
 6779 0060 03       		.byte	3
 6780 0061 000000   		.space	3
 6781 0064 02000000 		.word	2
 6782 0068 0C       		.byte	12
 6783 0069 000000   		.space	3
 6784 006c 01000000 		.word	1
 6785 0070 34       		.byte	52
 6786 0071 000000   		.space	3
 6787 0074 6C2A0000 		.word	10860
 6788 0078 2F       		.byte	47
 6789 0079 000000   		.space	3
 6790 007c 04000000 		.word	4
 6791 0080 2F       		.byte	47
 6792 0081 000000   		.space	3
 6793 0084 02000000 		.word	2
 6794 0088 2F       		.byte	47
 6795 0089 000000   		.space	3
 6796 008c 01000000 		.word	1
 6797 0090 18       		.byte	24
 6798 0091 000000   		.space	3
 6799 0094 00000000 		.word	0
 6800 0098 20       		.byte	32
 6801 0099 000000   		.space	3
 6802 009c 01000000 		.word	1
 6803 00a0 2F       		.byte	47
 6804 00a1 000000   		.space	3
 6805 00a4 0E000000 		.word	14
 6806 00a8 1C       		.byte	28
 6807 00a9 000000   		.space	3
ARM GAS  /tmp/cczIC8Cx.s 			page 169


 6808 00ac 03000000 		.word	3
 6809 00b0 2F       		.byte	47
 6810 00b1 000000   		.space	3
 6811 00b4 0C000000 		.word	12
 6812 00b8 1E       		.byte	30
 6813 00b9 000000   		.space	3
 6814 00bc 00000000 		.word	0
 6815 00c0 2F       		.byte	47
 6816 00c1 000000   		.space	3
 6817 00c4 03000000 		.word	3
 6818 00c8 04       		.byte	4
 6819 00c9 000000   		.space	3
 6820 00cc 03000000 		.word	3
 6821 00d0 2F       		.byte	47
 6822 00d1 000000   		.space	3
 6823 00d4 0A000000 		.word	10
 6824 00d8 2F       		.byte	47
 6825 00d9 000000   		.space	3
 6826 00dc 0B000000 		.word	11
 6827 00e0 2A       		.byte	42
 6828 00e1 000000   		.space	3
 6829 00e4 00000000 		.word	0
 6830 00e8 31       		.byte	49
 6831 00e9 000000   		.space	3
 6832 00ec 0D000000 		.word	13
 6833 00f0 2F       		.byte	47
 6834 00f1 000000   		.space	3
 6835 00f4 63000000 		.word	99
 6836 00f8 20       		.byte	32
 6837 00f9 000000   		.space	3
 6838 00fc 03000000 		.word	3
 6839 0100 2F       		.byte	47
 6840 0101 000000   		.space	3
 6841 0104 19000000 		.word	25
 6842 0108 24       		.byte	36
 6843 0109 000000   		.space	3
 6844 010c 03000000 		.word	3
 6845 0110 2F       		.byte	47
 6846 0111 000000   		.space	3
 6847 0114 08000000 		.word	8
 6848 0118 0D       		.byte	13
 6849 0119 000000   		.space	3
 6850 011c 01000000 		.word	1
 6851 0120 27       		.byte	39
 6852 0121 000000   		.space	3
 6853 0124 03000000 		.word	3
 6854 0128 06       		.byte	6
 6855 0129 000000   		.space	3
 6856 012c 03000000 		.word	3
 6857 0130 2E       		.byte	46
 6858 0131 000000   		.space	3
 6859 0134 00000000 		.word	0
 6860 0138 2E       		.byte	46
 6861 0139 000000   		.space	3
 6862 013c 00000000 		.word	0
 6863 0140 2E       		.byte	46
 6864 0141 000000   		.space	3
ARM GAS  /tmp/cczIC8Cx.s 			page 170


 6865 0144 00000000 		.word	0
 6866 0148 2E       		.byte	46
 6867 0149 000000   		.space	3
 6868 014c 00000000 		.word	0
 6869 0150 2E       		.byte	46
 6870 0151 000000   		.space	3
 6871 0154 00000000 		.word	0
 6872 0158 2E       		.byte	46
 6873 0159 000000   		.space	3
 6874 015c 00000000 		.word	0
 6875 0160 2E       		.byte	46
 6876 0161 000000   		.space	3
 6877 0164 00000000 		.word	0
 6878 0168 2F       		.byte	47
 6879 0169 000000   		.space	3
 6880 016c FFFFFFFF 		.word	-1
 6881 0170 2F       		.byte	47
 6882 0171 000000   		.space	3
 6883 0174 05000000 		.word	5
 6884              		.section	.rodata.mapping_gshift.11150,"a"
 6885              		.align	2
 6886              		.set	.LANCHOR17,. + 0
 6889              	mapping_gshift.11150:
 6890 0000 63       		.byte	99
 6891 0001 000000   		.space	3
 6892 0004 FFFFFFFF 		.word	-1
 6893 0008 28       		.byte	40
 6894 0009 000000   		.space	3
 6895 000c 03000000 		.word	3
 6896 0010 16       		.byte	22
 6897 0011 000000   		.space	3
 6898 0014 01000000 		.word	1
 6899 0018 1C       		.byte	28
 6900 0019 000000   		.space	3
 6901 001c 01000000 		.word	1
 6902 0020 13       		.byte	19
 6903 0021 000000   		.space	3
 6904 0024 02000000 		.word	2
 6905 0028 2E       		.byte	46
 6906 0029 000000   		.space	3
 6907 002c 00000000 		.word	0
 6908 0030 2E       		.byte	46
 6909 0031 000000   		.space	3
 6910 0034 00000000 		.word	0
 6911 0038 2E       		.byte	46
 6912 0039 000000   		.space	3
 6913 003c 00000000 		.word	0
 6914 0040 07       		.byte	7
 6915 0041 000000   		.space	3
 6916 0044 03000000 		.word	3
 6917 0048 08       		.byte	8
 6918 0049 000000   		.space	3
 6919 004c 03000000 		.word	3
 6920 0050 2F       		.byte	47
 6921 0051 000000   		.space	3
 6922 0054 04000000 		.word	4
 6923 0058 2F       		.byte	47
ARM GAS  /tmp/cczIC8Cx.s 			page 171


 6924 0059 000000   		.space	3
 6925 005c 04000000 		.word	4
 6926 0060 2F       		.byte	47
 6927 0061 000000   		.space	3
 6928 0064 04000000 		.word	4
 6929 0068 0C       		.byte	12
 6930 0069 000000   		.space	3
 6931 006c 02000000 		.word	2
 6932 0070 2F       		.byte	47
 6933 0071 000000   		.space	3
 6934 0074 06000000 		.word	6
 6935 0078 05       		.byte	5
 6936 0079 000000   		.space	3
 6937 007c 03000000 		.word	3
 6938 0080 2E       		.byte	46
 6939 0081 000000   		.space	3
 6940 0084 00000000 		.word	0
 6941 0088 2E       		.byte	46
 6942 0089 000000   		.space	3
 6943 008c 00000000 		.word	0
 6944 0090 2E       		.byte	46
 6945 0091 000000   		.space	3
 6946 0094 00000000 		.word	0
 6947 0098 2E       		.byte	46
 6948 0099 000000   		.space	3
 6949 009c 00000000 		.word	0
 6950 00a0 2E       		.byte	46
 6951 00a1 000000   		.space	3
 6952 00a4 00000000 		.word	0
 6953 00a8 1B       		.byte	27
 6954 00a9 000000   		.space	3
 6955 00ac 03000000 		.word	3
 6956 00b0 1A       		.byte	26
 6957 00b1 000000   		.space	3
 6958 00b4 03000000 		.word	3
 6959 00b8 2E       		.byte	46
 6960 00b9 000000   		.space	3
 6961 00bc 00000000 		.word	0
 6962 00c0 2E       		.byte	46
 6963 00c1 000000   		.space	3
 6964 00c4 00000000 		.word	0
 6965 00c8 0C       		.byte	12
 6966 00c9 000000   		.space	3
 6967 00cc 03000000 		.word	3
 6968 00d0 1F       		.byte	31
 6969 00d1 000000   		.space	3
 6970 00d4 03000000 		.word	3
 6971 00d8 19       		.byte	25
 6972 00d9 000000   		.space	3
 6973 00dc 03000000 		.word	3
 6974 00e0 2A       		.byte	42
 6975 00e1 000000   		.space	3
 6976 00e4 FFFFFFFF 		.word	-1
 6977 00e8 2E       		.byte	46
 6978 00e9 000000   		.space	3
 6979 00ec 00000000 		.word	0
 6980 00f0 2F       		.byte	47
ARM GAS  /tmp/cczIC8Cx.s 			page 172


 6981 00f1 000000   		.space	3
 6982 00f4 18000000 		.word	24
 6983 00f8 21       		.byte	33
 6984 00f9 000000   		.space	3
 6985 00fc 03000000 		.word	3
 6986 0100 2E       		.byte	46
 6987 0101 000000   		.space	3
 6988 0104 00000000 		.word	0
 6989 0108 24       		.byte	36
 6990 0109 000000   		.space	3
 6991 010c 02000000 		.word	2
 6992 0110 2F       		.byte	47
 6993 0111 000000   		.space	3
 6994 0114 0D000000 		.word	13
 6995 0118 2E       		.byte	46
 6996 0119 000000   		.space	3
 6997 011c 00000000 		.word	0
 6998 0120 2F       		.byte	47
 6999 0121 000000   		.space	3
 7000 0124 07000000 		.word	7
 7001 0128 1E       		.byte	30
 7002 0129 000000   		.space	3
 7003 012c 03000000 		.word	3
 7004 0130 2E       		.byte	46
 7005 0131 000000   		.space	3
 7006 0134 00000000 		.word	0
 7007 0138 2E       		.byte	46
 7008 0139 000000   		.space	3
 7009 013c 00000000 		.word	0
 7010 0140 2E       		.byte	46
 7011 0141 000000   		.space	3
 7012 0144 00000000 		.word	0
 7013 0148 2E       		.byte	46
 7014 0149 000000   		.space	3
 7015 014c 00000000 		.word	0
 7016 0150 2E       		.byte	46
 7017 0151 000000   		.space	3
 7018 0154 00000000 		.word	0
 7019 0158 2E       		.byte	46
 7020 0159 000000   		.space	3
 7021 015c 00000000 		.word	0
 7022 0160 2E       		.byte	46
 7023 0161 000000   		.space	3
 7024 0164 00000000 		.word	0
 7025 0168 2E       		.byte	46
 7026 0169 000000   		.space	3
 7027 016c 00000000 		.word	0
 7028 0170 2E       		.byte	46
 7029 0171 000000   		.space	3
 7030 0174 00000000 		.word	0
 7031              		.section	.rodata.mapping_none.11148,"a"
 7032              		.align	2
 7033              		.set	.LANCHOR13,. + 0
 7036              	mapping_none.11148:
 7037 0000 63       		.byte	99
 7038 0001 000000   		.space	3
 7039 0004 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cczIC8Cx.s 			page 173


 7040 0008 00       		.byte	0
 7041 0009 000000   		.space	3
 7042 000c 00000000 		.word	0
 7043 0010 01       		.byte	1
 7044 0011 000000   		.space	3
 7045 0014 00000000 		.word	0
 7046 0018 03       		.byte	3
 7047 0019 000000   		.space	3
 7048 001c 00000000 		.word	0
 7049 0020 13       		.byte	19
 7050 0021 000000   		.space	3
 7051 0024 02000000 		.word	2
 7052 0028 12       		.byte	18
 7053 0029 000000   		.space	3
 7054 002c 02000000 		.word	2
 7055 0030 12       		.byte	18
 7056 0031 000000   		.space	3
 7057 0034 00000000 		.word	0
 7058 0038 06       		.byte	6
 7059 0039 000000   		.space	3
 7060 003c 00000000 		.word	0
 7061 0040 07       		.byte	7
 7062 0041 000000   		.space	3
 7063 0044 00000000 		.word	0
 7064 0048 08       		.byte	8
 7065 0049 000000   		.space	3
 7066 004c 00000000 		.word	0
 7067 0050 01       		.byte	1
 7068 0051 000000   		.space	3
 7069 0054 01000000 		.word	1
 7070 0058 02       		.byte	2
 7071 0059 000000   		.space	3
 7072 005c 01000000 		.word	1
 7073 0060 03       		.byte	3
 7074 0061 000000   		.space	3
 7075 0064 01000000 		.word	1
 7076 0068 0C       		.byte	12
 7077 0069 000000   		.space	3
 7078 006c 00000000 		.word	0
 7079 0070 0D       		.byte	13
 7080 0071 000000   		.space	3
 7081 0074 00000000 		.word	0
 7082 0078 0E       		.byte	14
 7083 0079 000000   		.space	3
 7084 007c 00000000 		.word	0
 7085 0080 0F       		.byte	15
 7086 0081 000000   		.space	3
 7087 0084 00000000 		.word	0
 7088 0088 10       		.byte	16
 7089 0089 000000   		.space	3
 7090 008c 00000000 		.word	0
 7091 0090 18       		.byte	24
 7092 0091 000000   		.space	3
 7093 0094 00000000 		.word	0
 7094 0098 13       		.byte	19
 7095 0099 000000   		.space	3
 7096 009c 00000000 		.word	0
ARM GAS  /tmp/cczIC8Cx.s 			page 174


 7097 00a0 14       		.byte	20
 7098 00a1 000000   		.space	3
 7099 00a4 00000000 		.word	0
 7100 00a8 15       		.byte	21
 7101 00a9 000000   		.space	3
 7102 00ac 00000000 		.word	0
 7103 00b0 16       		.byte	22
 7104 00b1 000000   		.space	3
 7105 00b4 00000000 		.word	0
 7106 00b8 1E       		.byte	30
 7107 00b9 000000   		.space	3
 7108 00bc 00000000 		.word	0
 7109 00c0 19       		.byte	25
 7110 00c1 000000   		.space	3
 7111 00c4 00000000 		.word	0
 7112 00c8 1A       		.byte	26
 7113 00c9 000000   		.space	3
 7114 00cc 00000000 		.word	0
 7115 00d0 1B       		.byte	27
 7116 00d1 000000   		.space	3
 7117 00d4 00000000 		.word	0
 7118 00d8 1C       		.byte	28
 7119 00d9 000000   		.space	3
 7120 00dc 00000000 		.word	0
 7121 00e0 29       		.byte	41
 7122 00e1 000000   		.space	3
 7123 00e4 00000000 		.word	0
 7124 00e8 1F       		.byte	31
 7125 00e9 000000   		.space	3
 7126 00ec 00000000 		.word	0
 7127 00f0 20       		.byte	32
 7128 00f1 000000   		.space	3
 7129 00f4 00000000 		.word	0
 7130 00f8 21       		.byte	33
 7131 00f9 000000   		.space	3
 7132 00fc 00000000 		.word	0
 7133 0100 22       		.byte	34
 7134 0101 000000   		.space	3
 7135 0104 00000000 		.word	0
 7136 0108 24       		.byte	36
 7137 0109 000000   		.space	3
 7138 010c 00000000 		.word	0
 7139 0110 25       		.byte	37
 7140 0111 000000   		.space	3
 7141 0114 00000000 		.word	0
 7142 0118 26       		.byte	38
 7143 0119 000000   		.space	3
 7144 011c 00000000 		.word	0
 7145 0120 27       		.byte	39
 7146 0121 000000   		.space	3
 7147 0124 00000000 		.word	0
 7148 0128 28       		.byte	40
 7149 0129 000000   		.space	3
 7150 012c 00000000 		.word	0
 7151 0130 2E       		.byte	46
 7152 0131 000000   		.space	3
 7153 0134 00000000 		.word	0
ARM GAS  /tmp/cczIC8Cx.s 			page 175


 7154 0138 2E       		.byte	46
 7155 0139 000000   		.space	3
 7156 013c 00000000 		.word	0
 7157 0140 2E       		.byte	46
 7158 0141 000000   		.space	3
 7159 0144 00000000 		.word	0
 7160 0148 2E       		.byte	46
 7161 0149 000000   		.space	3
 7162 014c 00000000 		.word	0
 7163 0150 2E       		.byte	46
 7164 0151 000000   		.space	3
 7165 0154 00000000 		.word	0
 7166 0158 2E       		.byte	46
 7167 0159 000000   		.space	3
 7168 015c 00000000 		.word	0
 7169 0160 2E       		.byte	46
 7170 0161 000000   		.space	3
 7171 0164 00000000 		.word	0
 7172 0168 2E       		.byte	46
 7173 0169 000000   		.space	3
 7174 016c 00000000 		.word	0
 7175 0170 2E       		.byte	46
 7176 0171 000000   		.space	3
 7177 0174 00000000 		.word	0
 7178              		.section	.rodata.mapping_running.11152,"a"
 7179              		.align	2
 7180              		.set	.LANCHOR12,. + 0
 7183              	mapping_running.11152:
 7184 0000 63       		.byte	99
 7185 0001 000000   		.space	3
 7186 0004 FFFFFFFF 		.word	-1
 7187 0008 00       		.byte	0
 7188 0009 000000   		.space	3
 7189 000c 00000000 		.word	0
 7190 0010 01       		.byte	1
 7191 0011 000000   		.space	3
 7192 0014 00000000 		.word	0
 7193 0018 02       		.byte	2
 7194 0019 000000   		.space	3
 7195 001c 00000000 		.word	0
 7196 0020 03       		.byte	3
 7197 0021 000000   		.space	3
 7198 0024 00000000 		.word	0
 7199 0028 04       		.byte	4
 7200 0029 000000   		.space	3
 7201 002c 00000000 		.word	0
 7202 0030 12       		.byte	18
 7203 0031 000000   		.space	3
 7204 0034 00000000 		.word	0
 7205 0038 06       		.byte	6
 7206 0039 000000   		.space	3
 7207 003c 00000000 		.word	0
 7208 0040 07       		.byte	7
 7209 0041 000000   		.space	3
 7210 0044 00000000 		.word	0
 7211 0048 08       		.byte	8
 7212 0049 000000   		.space	3
ARM GAS  /tmp/cczIC8Cx.s 			page 176


 7213 004c 00000000 		.word	0
 7214 0050 09       		.byte	9
 7215 0051 000000   		.space	3
 7216 0054 00000000 		.word	0
 7217 0058 0A       		.byte	10
 7218 0059 000000   		.space	3
 7219 005c 00000000 		.word	0
 7220 0060 0B       		.byte	11
 7221 0061 000000   		.space	3
 7222 0064 00000000 		.word	0
 7223 0068 0C       		.byte	12
 7224 0069 000000   		.space	3
 7225 006c 00000000 		.word	0
 7226 0070 0D       		.byte	13
 7227 0071 000000   		.space	3
 7228 0074 00000000 		.word	0
 7229 0078 0E       		.byte	14
 7230 0079 000000   		.space	3
 7231 007c 00000000 		.word	0
 7232 0080 0F       		.byte	15
 7233 0081 000000   		.space	3
 7234 0084 00000000 		.word	0
 7235 0088 10       		.byte	16
 7236 0089 000000   		.space	3
 7237 008c 00000000 		.word	0
 7238 0090 18       		.byte	24
 7239 0091 000000   		.space	3
 7240 0094 00000000 		.word	0
 7241 0098 13       		.byte	19
 7242 0099 000000   		.space	3
 7243 009c 00000000 		.word	0
 7244 00a0 14       		.byte	20
 7245 00a1 000000   		.space	3
 7246 00a4 00000000 		.word	0
 7247 00a8 15       		.byte	21
 7248 00a9 000000   		.space	3
 7249 00ac 00000000 		.word	0
 7250 00b0 16       		.byte	22
 7251 00b1 000000   		.space	3
 7252 00b4 00000000 		.word	0
 7253 00b8 1E       		.byte	30
 7254 00b9 000000   		.space	3
 7255 00bc 00000000 		.word	0
 7256 00c0 19       		.byte	25
 7257 00c1 000000   		.space	3
 7258 00c4 00000000 		.word	0
 7259 00c8 1A       		.byte	26
 7260 00c9 000000   		.space	3
 7261 00cc 00000000 		.word	0
 7262 00d0 1B       		.byte	27
 7263 00d1 000000   		.space	3
 7264 00d4 00000000 		.word	0
 7265 00d8 1C       		.byte	28
 7266 00d9 000000   		.space	3
 7267 00dc 00000000 		.word	0
 7268 00e0 09       		.byte	9
 7269 00e1 000000   		.space	3
ARM GAS  /tmp/cczIC8Cx.s 			page 177


 7270 00e4 00000000 		.word	0
 7271 00e8 1F       		.byte	31
 7272 00e9 000000   		.space	3
 7273 00ec 00000000 		.word	0
 7274 00f0 20       		.byte	32
 7275 00f1 000000   		.space	3
 7276 00f4 00000000 		.word	0
 7277 00f8 21       		.byte	33
 7278 00f9 000000   		.space	3
 7279 00fc 00000000 		.word	0
 7280 0100 22       		.byte	34
 7281 0101 000000   		.space	3
 7282 0104 00000000 		.word	0
 7283 0108 24       		.byte	36
 7284 0109 000000   		.space	3
 7285 010c 00000000 		.word	0
 7286 0110 25       		.byte	37
 7287 0111 000000   		.space	3
 7288 0114 00000000 		.word	0
 7289 0118 26       		.byte	38
 7290 0119 000000   		.space	3
 7291 011c 00000000 		.word	0
 7292 0120 27       		.byte	39
 7293 0121 000000   		.space	3
 7294 0124 00000000 		.word	0
 7295 0128 28       		.byte	40
 7296 0129 000000   		.space	3
 7297 012c 00000000 		.word	0
 7298 0130 2E       		.byte	46
 7299 0131 000000   		.space	3
 7300 0134 00000000 		.word	0
 7301 0138 2E       		.byte	46
 7302 0139 000000   		.space	3
 7303 013c 00000000 		.word	0
 7304 0140 2E       		.byte	46
 7305 0141 000000   		.space	3
 7306 0144 00000000 		.word	0
 7307 0148 2E       		.byte	46
 7308 0149 000000   		.space	3
 7309 014c 00000000 		.word	0
 7310 0150 04       		.byte	4
 7311 0151 000000   		.space	3
 7312 0154 00000000 		.word	0
 7313 0158 05       		.byte	5
 7314 0159 000000   		.space	3
 7315 015c 00000000 		.word	0
 7316 0160 2E       		.byte	46
 7317 0161 000000   		.space	3
 7318 0164 00000000 		.word	0
 7319 0168 2E       		.byte	46
 7320 0169 000000   		.space	3
 7321 016c 00000000 		.word	0
 7322 0170 2E       		.byte	46
 7323 0171 000000   		.space	3
 7324 0174 00000000 		.word	0
 7325              		.section	.rodata.mid_menu,"a"
 7326              		.align	2
ARM GAS  /tmp/cczIC8Cx.s 			page 178


 7329              	mid_menu:
 7330 0000 C8C40B00 		.ascii	"\310\304\013\000"
 7331              		.text
 7332              	.Letext0:
 7333              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 7334              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 7335              		.file 6 "/usr/include/newlib/sys/_types.h"
 7336              		.file 7 "/usr/include/newlib/sys/reent.h"
 7337              		.file 8 "/usr/include/newlib/sys/lock.h"
 7338              		.file 9 "/usr/include/newlib/stdlib.h"
 7339              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 7340              		.file 11 "/usr/include/newlib/ctype.h"
 7341              		.file 12 "dmcp/ff_ifc.h"
 7342              		.file 13 "dmcp/dmcp.h"
 7343              		.file 14 "src/keys.h"
 7344              		.file 15 "src/menu.h"
 7345              		.file 16 "src/decNumber/decContext.h"
 7346              		.file 17 "src/decNumber/decNumber.h"
 7347              		.file 18 "src/decNumber/decimal64.h"
 7348              		.file 19 "src/decNumber/decimal128.h"
 7349              		.file 20 "src/xeq.h"
 7350              		.file 21 "src/data.h"
 7351              		.file 22 "src/display.h"
 7352              		.file 23 "src/consts.h"
 7353              		.file 24 "src/storage.h"
 7354              		.file 25 "src/catalogues.h"
 7355              		.file 26 "src/stopwatch.h"
 7356              		.file 27 "src/lcd.h"
 7357              		.file 28 "/usr/include/newlib/string.h"
 7358              		.file 29 "/usr/include/newlib/stdio.h"
 7359              		.file 30 "<built-in>"
ARM GAS  /tmp/cczIC8Cx.s 			page 179


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/cczIC8Cx.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/cczIC8Cx.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/cczIC8Cx.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/cczIC8Cx.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/cczIC8Cx.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/cczIC8Cx.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/cczIC8Cx.s:433    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/cczIC8Cx.s:441    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/cczIC8Cx.s:460    .text.disp_about:0000000000000000 $t
     /tmp/cczIC8Cx.s:468    .text.disp_about:0000000000000000 disp_about
     /tmp/cczIC8Cx.s:621    .text.disp_about:0000000000000080 $d
     /tmp/cczIC8Cx.s:639    .text.run_menu_item:0000000000000000 $t
     /tmp/cczIC8Cx.s:647    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/cczIC8Cx.s:687    .text.set_menu:0000000000000000 $t
     /tmp/cczIC8Cx.s:695    .text.set_menu:0000000000000000 set_menu
     /tmp/cczIC8Cx.s:750    .text.set_menu:000000000000002c $d
     /tmp/cczIC8Cx.s:757    .text.set_default_menu:0000000000000000 $t
     /tmp/cczIC8Cx.s:765    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/cczIC8Cx.s:839    .text.set_default_menu:000000000000002c $d
     /tmp/cczIC8Cx.s:848    .text.toggle_default_menu:0000000000000000 $t
     /tmp/cczIC8Cx.s:856    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/cczIC8Cx.s:958    .text.toggle_default_menu:0000000000000044 $d
     /tmp/cczIC8Cx.s:969    .text.get_menu:0000000000000000 $t
     /tmp/cczIC8Cx.s:977    .text.get_menu:0000000000000000 get_menu
     /tmp/cczIC8Cx.s:993    .text.get_menu:0000000000000008 $d
     /tmp/cczIC8Cx.s:998    .text.get_last_menu:0000000000000000 $t
     /tmp/cczIC8Cx.s:1006   .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/cczIC8Cx.s:1022   .text.get_last_menu:0000000000000008 $d
     /tmp/cczIC8Cx.s:1027   .text.set_last_menu:0000000000000000 $t
     /tmp/cczIC8Cx.s:1035   .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/cczIC8Cx.s:1110   .text.set_last_menu:000000000000002c $d
     /tmp/cczIC8Cx.s:1119   .text.mdot:0000000000000000 $t
     /tmp/cczIC8Cx.s:1127   .text.mdot:0000000000000000 mdot
     /tmp/cczIC8Cx.s:1218   .text.mdot:000000000000003c $d
     /tmp/cczIC8Cx.s:1223   .text.get_current_menu_ref:0000000000000000 $t
     /tmp/cczIC8Cx.s:1231   .text.get_current_menu_ref:0000000000000000 get_current_menu_ref
     /tmp/cczIC8Cx.s:1298   .text.get_current_menu_ref:0000000000000040 $d
     /tmp/cczIC8Cx.s:1313   .text.get_current_menu_ref:000000000000007c $t
     /tmp/cczIC8Cx.s:1383   .text.get_current_menu_ref:00000000000000a8 $d
     /tmp/cczIC8Cx.s:4951   .rodata.Menus:0000000000000000 Menus
     /tmp/cczIC8Cx.s:1391   .text.display_menu:0000000000000000 $t
     /tmp/cczIC8Cx.s:1399   .text.display_menu:0000000000000000 display_menu
     /tmp/cczIC8Cx.s:1647   .text.display_menu:000000000000010c $d
     /tmp/cczIC8Cx.s:1654   .text.display_current_menu:0000000000000000 $t
     /tmp/cczIC8Cx.s:1662   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/cczIC8Cx.s:1698   .text.all_menu_dots:0000000000000000 $t
     /tmp/cczIC8Cx.s:1706   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/cczIC8Cx.s:1790   .text.all_menu_dots:0000000000000038 $d
     /tmp/cczIC8Cx.s:1795   .text.umen_store:0000000000000000 $t
     /tmp/cczIC8Cx.s:1803   .text.umen_store:0000000000000000 umen_store
     /tmp/cczIC8Cx.s:1904   .text.umen_store:0000000000000050 $d
     /tmp/cczIC8Cx.s:1909   .text.build_user_menu_from_program:0000000000000000 $t
     /tmp/cczIC8Cx.s:1917   .text.build_user_menu_from_program:0000000000000000 build_user_menu_from_program
     /tmp/cczIC8Cx.s:2328   .text.build_user_menu_from_program:0000000000000180 $d
     /tmp/cczIC8Cx.s:2341   .text.build_user_menu:0000000000000000 $t
ARM GAS  /tmp/cczIC8Cx.s 			page 180


     /tmp/cczIC8Cx.s:2349   .text.build_user_menu:0000000000000000 build_user_menu
     /tmp/cczIC8Cx.s:2365   .text.build_user_menu:0000000000000008 $d
     /tmp/cczIC8Cx.s:2370   .text.shutdown:0000000000000000 $t
     /tmp/cczIC8Cx.s:2378   .text.shutdown:0000000000000000 shutdown
     /tmp/cczIC8Cx.s:2396   .text.shutdown:000000000000000c $d
     /tmp/cczIC8Cx.s:2401   .text.is_key_pressed:0000000000000000 $t
     /tmp/cczIC8Cx.s:2409   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/cczIC8Cx.s:2432   .text.is_key_pressed:0000000000000010 $d
     /tmp/cczIC8Cx.s:2437   .text.get_key:0000000000000000 $t
     /tmp/cczIC8Cx.s:2445   .text.get_key:0000000000000000 get_key
     /tmp/cczIC8Cx.s:2460   .text.get_key:0000000000000004 $d
     /tmp/cczIC8Cx.s:2465   .text.put_key:0000000000000000 $t
     /tmp/cczIC8Cx.s:2473   .text.put_key:0000000000000000 put_key
     /tmp/cczIC8Cx.s:2552   .text.put_key:000000000000003c $d
     /tmp/cczIC8Cx.s:2558   .text.shift_down:0000000000000000 $t
     /tmp/cczIC8Cx.s:2566   .text.shift_down:0000000000000000 shift_down
     /tmp/cczIC8Cx.s:2581   .text.start_key_timer:0000000000000000 $t
     /tmp/cczIC8Cx.s:2589   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/cczIC8Cx.s:2613   .text.start_key_timer:000000000000000c $d
     /tmp/cczIC8Cx.s:2619   .text.keyticks:0000000000000000 $t
     /tmp/cczIC8Cx.s:2627   .text.keyticks:0000000000000000 keyticks
     /tmp/cczIC8Cx.s:2658   .text.keyticks:0000000000000018 $d
     /tmp/cczIC8Cx.s:2664   .text.moveto:0000000000000000 $t
     /tmp/cczIC8Cx.s:2672   .text.moveto:0000000000000000 moveto
     /tmp/cczIC8Cx.s:2732   .text.moveto:000000000000002c $d
     /tmp/cczIC8Cx.s:2739   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/cczIC8Cx.s:2743   .text.print_debug:0000000000000000 $t
     /tmp/cczIC8Cx.s:2751   .text.print_debug:0000000000000000 print_debug
     /tmp/cczIC8Cx.s:2853   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/cczIC8Cx.s:2864   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/cczIC8Cx.s:2868   .text.print_debug2:0000000000000000 $t
     /tmp/cczIC8Cx.s:2876   .text.print_debug2:0000000000000000 print_debug2
     /tmp/cczIC8Cx.s:2978   .text.print_debug2:0000000000000064 $d
     /tmp/cczIC8Cx.s:2989   .text.do_now:0000000000000000 $t
     /tmp/cczIC8Cx.s:2997   .text.do_now:0000000000000000 do_now
     /tmp/cczIC8Cx.s:3032   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/cczIC8Cx.s:3036   .text.do_multi:0000000000000000 $t
     /tmp/cczIC8Cx.s:3044   .text.do_multi:0000000000000000 do_multi
     /tmp/cczIC8Cx.s:3074   .text.do_multi:0000000000000016 $d
     /tmp/cczIC8Cx.s:3088   .text.do_multi:0000000000000024 $t
     /tmp/cczIC8Cx.s:3503   .text.do_multi:00000000000001b8 $d
     /tmp/cczIC8Cx.s:3517   .text.program_main:0000000000000000 $t
     /tmp/cczIC8Cx.s:3525   .text.program_main:0000000000000000 program_main
     /tmp/cczIC8Cx.s:3790   .text.program_main:000000000000011c $d
     /tmp/cczIC8Cx.s:3796   .text.program_main:0000000000000128 $t
     /tmp/cczIC8Cx.s:4189   .text.program_main:00000000000002dc $d
     /tmp/cczIC8Cx.s:4230   .text.program_main:0000000000000364 $t
     /tmp/cczIC8Cx.s:4698   .text.program_main:000000000000059c $d
     /tmp/cczIC8Cx.s:4786   .bss.n_p:0000000000000000 n_p
     /tmp/cczIC8Cx.s:4935   .data.spaces:0000000000000000 spaces
     /tmp/cczIC8Cx.s:4926   .data.release:0000000000000000 release
     /tmp/cczIC8Cx.s:4899   .data.h_shift:0000000000000000 h_shift
     /tmp/cczIC8Cx.s:4890   .data.g_shift:0000000000000000 g_shift
     /tmp/cczIC8Cx.s:4882   .data.f_shift:0000000000000000 f_shift
     /tmp/cczIC8Cx.s:4908   .data.heartbeat:0000000000000000 heartbeat
     /tmp/cczIC8Cx.s:4917   .data.no_key:0000000000000000 no_key
ARM GAS  /tmp/cczIC8Cx.s 			page 181


     /tmp/cczIC8Cx.s:4942   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/cczIC8Cx.s:4726   .rodata.str1.4:0000000000000000 $d
     /tmp/cczIC8Cx.s:7329   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/cczIC8Cx.s:4767   .bss.default_menu:0000000000000000 default_menu
     /tmp/cczIC8Cx.s:4773   .bss.last_menu:0000000000000000 last_menu
     /tmp/cczIC8Cx.s:4761   .bss.current_menu:0000000000000000 current_menu
     /tmp/cczIC8Cx.s:4876   .data.cmplx_key_string:0000000000000000 cmplx_key_string
     /tmp/cczIC8Cx.s:4869   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/cczIC8Cx.s:4800   .data.UserMenu:0000000000000000 UserMenu
     /tmp/cczIC8Cx.s:4743   .rodata:0000000000000000 $d
     /tmp/cczIC8Cx.s:4762   .bss.current_menu:0000000000000000 $d
     /tmp/cczIC8Cx.s:4768   .bss.default_menu:0000000000000000 $d
     /tmp/cczIC8Cx.s:4774   .bss.last_menu:0000000000000000 $d
     /tmp/cczIC8Cx.s:4776   .bss.mdots:0000000000000000 $d
     /tmp/cczIC8Cx.s:4780   .bss.mdots:0000000000000000 mdots
     /tmp/cczIC8Cx.s:4783   .bss.n_p:0000000000000000 $d
     /tmp/cczIC8Cx.s:4789   .bss.start_ticks:0000000000000000 $d
     /tmp/cczIC8Cx.s:4793   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/cczIC8Cx.s:4796   .data.UserMenu:0000000000000000 $d
     /tmp/cczIC8Cx.s:4865   .data.arrow_key_string:0000000000000000 $d
     /tmp/cczIC8Cx.s:4872   .data.cmplx_key_string:0000000000000000 $d
     /tmp/cczIC8Cx.s:4879   .data.f_shift:0000000000000000 $d
     /tmp/cczIC8Cx.s:4887   .data.g_shift:0000000000000000 $d
     /tmp/cczIC8Cx.s:4895   .data.h_shift:0000000000000000 $d
     /tmp/cczIC8Cx.s:4904   .data.heartbeat:0000000000000000 $d
     /tmp/cczIC8Cx.s:4913   .data.no_key:0000000000000000 $d
     /tmp/cczIC8Cx.s:4922   .data.release:0000000000000000 $d
     /tmp/cczIC8Cx.s:4931   .data.spaces:0000000000000000 $d
     /tmp/cczIC8Cx.s:4938   .rodata.MID_MENU:0000000000000000 $d
     /tmp/cczIC8Cx.s:4948   .rodata.Menus:0000000000000000 $d
     /tmp/cczIC8Cx.s:6591   .rodata.mapping_alpha.11151:0000000000000000 $d
     /tmp/cczIC8Cx.s:6595   .rodata.mapping_alpha.11151:0000000000000000 mapping_alpha.11151
     /tmp/cczIC8Cx.s:6738   .rodata.mapping_fshift.11149:0000000000000000 $d
     /tmp/cczIC8Cx.s:6742   .rodata.mapping_fshift.11149:0000000000000000 mapping_fshift.11149
     /tmp/cczIC8Cx.s:6885   .rodata.mapping_gshift.11150:0000000000000000 $d
     /tmp/cczIC8Cx.s:6889   .rodata.mapping_gshift.11150:0000000000000000 mapping_gshift.11150
     /tmp/cczIC8Cx.s:7032   .rodata.mapping_none.11148:0000000000000000 $d
     /tmp/cczIC8Cx.s:7036   .rodata.mapping_none.11148:0000000000000000 mapping_none.11148
     /tmp/cczIC8Cx.s:7179   .rodata.mapping_running.11152:0000000000000000 $d
     /tmp/cczIC8Cx.s:7183   .rodata.mapping_running.11152:0000000000000000 mapping_running.11152
     /tmp/cczIC8Cx.s:7326   .rodata.mid_menu:0000000000000000 $d

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
memcpy
main_ram
pixel_length
strncpy
findmultilbl
do_inc
getprog
prt_umen
catcmd
ARM GAS  /tmp/cczIC8Cx.s 			page 182


strcpy
sprintf
process_keycode_with_shift
reset_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
KeyCallback
JustDisplayed
Pause
Running
DM42_Ticker
is_dot
dot
finish_LEQ
get_alpha_state
StopWatchStatus
JustStopped

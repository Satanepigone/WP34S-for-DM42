ARM GAS  /tmp/cc8tUJXt.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC1:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** /* 
   4:src/menu.c    ****  * System menu stuff
   5:src/menu.c    ****  */
   6:src/menu.c    **** 
   7:src/menu.c    **** #define MI_ABOUT_PGM 11
   8:src/menu.c    **** 
   9:src/menu.c    **** const uint8_t mid_menu[] = {
  10:src/menu.c    ****     MI_SYSTEM_ENTER,
  11:src/menu.c    ****     MI_MSC,
  12:src/menu.c    ****     MI_ABOUT_PGM,
  13:src/menu.c    ****     0 }; // Terminator
  14:src/menu.c    **** 
  15:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  16:src/menu.c    **** 
  17:src/menu.c    **** void disp_about(void);
  18:src/menu.c    **** 
  19:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  20:src/menu.c    ****   int ret = 0;
  21:src/menu.c    **** 
  22:src/menu.c    ****   switch(line_id) {
  23:src/menu.c    ****     case MI_ABOUT_PGM:
ARM GAS  /tmp/cc8tUJXt.s 			page 2


  24:src/menu.c    ****       disp_about();
  25:src/menu.c    ****       break;
  26:src/menu.c    **** 
  27:src/menu.c    ****      default:
  28:src/menu.c    ****       ret = MRET_UNIMPL;
  29:src/menu.c    ****       break;
  30:src/menu.c    ****   }
  31:src/menu.c    **** 
  32:src/menu.c    ****   return ret;
  33:src/menu.c    **** }
  34:src/menu.c    **** 
  35:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 35 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  36:src/menu.c    ****   const char * ln;
  40              		.loc 1 36 3 view .LVU1
  37:src/menu.c    **** 
  38:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 38 3 view .LVU2
  39:src/menu.c    **** 
  40:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  41:src/menu.c    **** 
  42:src/menu.c    ****   default:
  43:src/menu.c    ****     ln = NULL;
  42              		.loc 1 43 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  38:src/menu.c    **** 
  44              		.loc 1 38 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
  44:src/menu.c    ****     break;
  45:src/menu.c    ****   }
  46:src/menu.c    **** 
  47:src/menu.c    ****   return ln;
  48:src/menu.c    **** }
  46              		.loc 1 48 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 48 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC1
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc8tUJXt.s 			page 3


  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB30:
  49:src/menu.c    **** 
  50:src/menu.c    **** void disp_about() {
  51:src/menu.c    ****   lcd_clear_buf();
  52:src/menu.c    ****   lcd_writeClr(t24);
  53:src/menu.c    **** 
  54:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  55:src/menu.c    ****   lcd_printR(t24, "WP34s calculator for DM42:");
  56:src/menu.c    ****   t24->y += 5;
  57:src/menu.c    **** #ifdef TOP_ROW
  58:src/menu.c    ****   lcd_print(t24, "with top row for annunciators,");
  59:src/menu.c    ****   lcd_print(t24, "a longer alpha display,");
  60:src/menu.c    ****   lcd_print(t24, "and some annunciators renamed.");
  61:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  62:src/menu.c    ****   lcd_print(t24, "with a longer alpha display");
  63:src/menu.c    ****   lcd_print(t24, "than the original calculator,");
  64:src/menu.c    ****   lcd_print(t24, "and some annunciators renamed.");
  65:src/menu.c    ****   #else
  66:src/menu.c    ****   lcd_print(t24, "Just like the original calculator");
  67:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed.");
  68:src/menu.c    **** #endif
  69:src/menu.c    ****   t24->y += 5;
  70:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
  71:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
  72:src/menu.c    **** 
  73:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
  74:src/menu.c    ****   t24->x = 20;
  75:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
  76:src/menu.c    **** 
  77:src/menu.c    ****   lcd_refresh();
  78:src/menu.c    **** 
  79:src/menu.c    ****   wait_for_key_press();
  80:src/menu.c    **** }
  81:src/menu.c    **** 
  82:src/menu.c    **** /*
  83:src/menu.c    ****  * WP34s menu code
  84:src/menu.c    ****  */
  85:src/menu.c    **** 
  86:src/menu.c    **** void set_menu ( int new_menu ) {
  87:src/menu.c    ****   int m = current_menu;
  88:src/menu.c    ****   if (new_menu == current_menu) { // return to default
  89:src/menu.c    ****     current_menu = default_menu;
  90:src/menu.c    ****   }
  91:src/menu.c    ****   else if (new_menu == -1) { // go to last menu
  92:src/menu.c    ****     current_menu = last_menu;
  93:src/menu.c    ****   }
  94:src/menu.c    ****   else {
  95:src/menu.c    ****     current_menu = new_menu; // change to new menu
  96:src/menu.c    ****   }
  97:src/menu.c    ****   if (m != 9) last_menu = m; // store menu as last menu unless it's arrow!
  98:src/menu.c    **** }
  99:src/menu.c    **** 
 100:src/menu.c    **** void toggle_default_menu () {
 101:src/menu.c    ****   if (current_menu == default_menu) {
 102:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
ARM GAS  /tmp/cc8tUJXt.s 			page 4


 103:src/menu.c    ****   }
 104:src/menu.c    **** }
 105:src/menu.c    **** 
 106:src/menu.c    **** int get_menu () {
 107:src/menu.c    ****   return current_menu;
 108:src/menu.c    **** }
 109:src/menu.c    **** 
 110:src/menu.c    **** void display_current_menu () {
 111:src/menu.c    ****   display_menu (current_menu);
 112:src/menu.c    **** }
 113:src/menu.c    **** 
 114:src/menu.c    **** void set_last_menu () {
 115:src/menu.c    ****   set_menu (last_menu);
 116:src/menu.c    **** }
 117:src/menu.c    **** 
 118:src/menu.c    **** static unsigned char mdots[200][2];
 119:src/menu.c    **** 
 120:src/menu.c    **** static const struct _menu Menus[] = {
 121:src/menu.c    ****   {
 122:src/menu.c    ****     "Blank", // 0
 123:src/menu.c    ****     { 
 124:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 125:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 126:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 127:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 128:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 129:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 130:src/menu.c    ****     }    
 131:src/menu.c    ****   },
 132:src/menu.c    ****   {
 133:src/menu.c    ****     "Clear", // 1
 134:src/menu.c    ****     { 
 135:src/menu.c    ****       { { K24, 1 }, NO_KEY, "CLProg", "" },
 136:src/menu.c    ****       { { K24, 2 }, NO_KEY, "CL\221", "" },
 137:src/menu.c    ****       { { K24, 3 }, NO_KEY, "CL X", "" },
 138:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 139:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 140:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 141:src/menu.c    ****     }    
 142:src/menu.c    ****   },
 143:src/menu.c    ****   {
 144:src/menu.c    ****     "DISP", // 2
 145:src/menu.c    ****     { 
 146:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 147:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 148:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 149:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 150:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 151:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 152:src/menu.c    ****     }
 153:src/menu.c    ****   },
 154:src/menu.c    ****   {
 155:src/menu.c    ****     "BASE", // 3
 156:src/menu.c    ****     { 
 157:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 158:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 159:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
ARM GAS  /tmp/cc8tUJXt.s 			page 5


 160:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 161:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 162:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 163:src/menu.c    ****     }
 164:src/menu.c    ****   },
 165:src/menu.c    ****   {
 166:src/menu.c    ****     "ANGLES", // 4
 167:src/menu.c    ****     { 
 168:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 169:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 170:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 171:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 172:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 173:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 174:src/menu.c    ****     }
 175:src/menu.c    ****       
 176:src/menu.c    ****   },
 177:src/menu.c    ****   {
 178:src/menu.c    ****     "MISC", // 5
 179:src/menu.c    ****     { 
 180:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 181:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 182:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 183:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 184:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 185:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 186:src/menu.c    ****     }
 187:src/menu.c    ****   },
 188:src/menu.c    ****   {
 189:src/menu.c    ****     "X<>Y Key", // 6
 190:src/menu.c    ****     { 
 191:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 192:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 193:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 194:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 195:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 196:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 197:src/menu.c    ****     }    
 198:src/menu.c    ****   },
 199:src/menu.c    ****   {
 200:src/menu.c    ****     "Program", // 7
 201:src/menu.c    ****     { 
 202:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 203:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 204:src/menu.c    ****       { { K61, 3 }, NO_KEY, "Pause", "" },
 205:src/menu.c    ****       { { K30, 3 }, NO_KEY, "GTO", "" },
 206:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 207:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 208:src/menu.c    ****     }
 209:src/menu.c    ****   },
 210:src/menu.c    ****   {
 211:src/menu.c    ****     "Setup 1", // 8
 212:src/menu.c    ****     { 
 213:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 214:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 215:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 216:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
ARM GAS  /tmp/cc8tUJXt.s 			page 6


 217:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 218:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 219:src/menu.c    ****     }
 220:src/menu.c    ****   },
 221:src/menu.c    ****   {
 222:src/menu.c    ****     "Arrow", // 9
 223:src/menu.c    ****     { 
 224:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 225:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 226:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 227:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "\015HMS" },
 228:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 229:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 230:src/menu.c    ****     }
 231:src/menu.c    ****   },
 232:src/menu.c    ****   {
 233:src/menu.c    ****     "Flags", // 10
 234:src/menu.c    ****     { 
 235:src/menu.c    ****       { { K50, 1 }, NO_KEY, "SF_", "" },
 236:src/menu.c    ****       { { K50, 2 }, NO_KEY, "CF_", "" },
 237:src/menu.c    ****       { { K51, 1 }, NO_KEY, "x=?", "" },
 238:src/menu.c    ****       { { K51, 2 }, NO_KEY, "x\013?", "" },
 239:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 240:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 241:src/menu.c    ****     }
 242:src/menu.c    ****   },
 243:src/menu.c    ****   {
 244:src/menu.c    ****     "Probability", // 11
 245:src/menu.c    ****     { 
 246:src/menu.c    ****       { { K40, 3 }, { K41, 1 }, "Fact!", "\224" },
 247:src/menu.c    ****       { { K40, 1 }, { K41, 2 }, "Cy,x", "\224\235" },
 248:src/menu.c    ****       { { K40, 2 }, NO_KEY, "Py,x", "" },
 249:src/menu.c    ****       { { K12, 1 }, NO_KEY, "RAN#", "" },
 250:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 251:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 252:src/menu.c    ****     }
 253:src/menu.c    ****   },
 254:src/menu.c    ****   {
 255:src/menu.c    ****     "Statistics", // 12
 256:src/menu.c    ****     { 
 257:src/menu.c    ****       { { K42, 1 }, { K43, 3 }, "Xbar", "SUMS" },
 258:src/menu.c    ****       { { K43, 1 }, NO_KEY, "Yhat", "" },
 259:src/menu.c    ****       { { K42, 2 }, NO_KEY, "s", "" },
 260:src/menu.c    ****       { { K43, 2 }, NO_KEY, "r", "" },
 261:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 262:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 263:src/menu.c    ****     }
 264:src/menu.c    ****   },
 265:src/menu.c    ****   {
 266:src/menu.c    ****     "Setup 2", // 13
 267:src/menu.c    ****     { 
 268:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 269:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 270:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 271:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 272:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 273:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
ARM GAS  /tmp/cc8tUJXt.s 			page 7


 274:src/menu.c    ****     }
 275:src/menu.c    ****   },
 276:src/menu.c    ****   {
 277:src/menu.c    ****     "Integ/Sum/Prod", // 14
 278:src/menu.c    ****     { 
 279:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 280:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 281:src/menu.c    ****       { { K53, 1 }, NO_KEY, "SUM", "" },
 282:src/menu.c    ****       { { K53, 2 }, NO_KEY, "PROD", "" },
 283:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 284:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 285:src/menu.c    ****     }
 286:src/menu.c    ****   },
 287:src/menu.c    ****   {
 288:src/menu.c    ****     "Blank with A-D", // 15
 289:src/menu.c    ****     { 
 290:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 291:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 292:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 293:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 294:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 295:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 296:src/menu.c    ****     }    
 297:src/menu.c    ****   },
 298:src/menu.c    **** };  
 299:src/menu.c    **** 
 300:src/menu.c    **** /* This code is the set_status_sized code with small changes
 301:src/menu.c    ****  * and non-DM42 code removed.
 302:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 303:src/menu.c    ****  */
 304:src/menu.c    **** #define MENU_WIDTH 32
 305:src/menu.c    **** 
 306:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 306 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 307:src/menu.c    ****   // dotcol is the number of the starting dot column
 308:src/menu.c    ****   // shifted is 1 if shifted
 309:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 309 3 view .LVU8
 310:src/menu.c    **** 
 311:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 312:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 312 3 view .LVU9
 313:src/menu.c    **** 
 314:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 314 3 view .LVU10
 306:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 306 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
ARM GAS  /tmp/cc8tUJXt.s 			page 8


  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 306:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 306 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 315:src/menu.c    ****   int i, j, xmax;
 316:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 316 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
  96 000e B4BF     		ite	lt
  97 0010 01F11F03 		addlt	r3, r1, #31
  98 0014 0B46     		movge	r3, r1
 317:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 318:src/menu.c    **** 
 319:src/menu.c    ****   forceDispPlot=0;
  99              		.loc 1 319 16 view .LVU14
 100 0016 4848     		ldr	r0, .L41
 101              	.LVL3:
 306:src/menu.c    ****   // dotcol is the number of the starting dot column
 102              		.loc 1 306 13 view .LVU15
 103 0018 0F46     		mov	r7, r1
 104              	.LVL4:
 315:src/menu.c    ****   int i, j, xmax;
 105              		.loc 1 315 3 is_stmt 1 view .LVU16
 316:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 106              		.loc 1 316 3 view .LVU17
 320:src/menu.c    **** 
 321:src/menu.c    **** #ifdef RP_PREFIX
 322:src/menu.c    ****   RectPolConv = 0;
 107              		.loc 1 322 15 is_stmt 0 view .LVU18
 108 001a 4849     		ldr	r1, .L41+4
 109              	.LVL5:
 319:src/menu.c    **** 
 110              		.loc 1 319 16 view .LVU19
 111 001c 0022     		movs	r2, #0
 112              	.LVL6:
 319:src/menu.c    **** 
 113              		.loc 1 319 16 view .LVU20
 114 001e 0270     		strb	r2, [r0]
 115              		.loc 1 322 15 view .LVU21
 116 0020 0A60     		str	r2, [r1]
 323:src/menu.c    **** #endif
 324:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 117              		.loc 1 324 10 view .LVU22
 118 0022 019A     		ldr	r2, [sp, #4]
 119 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 316:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 120              		.loc 1 316 30 view .LVU23
 121 0026 23F01F03 		bic	r3, r3, #31
 316:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 122              		.loc 1 316 8 view .LVU24
 123 002a 03F12009 		add	r9, r3, #32
 124              	.LVL7:
ARM GAS  /tmp/cc8tUJXt.s 			page 9


 317:src/menu.c    **** 
 125              		.loc 1 317 3 is_stmt 1 view .LVU25
 319:src/menu.c    **** 
 126              		.loc 1 319 3 view .LVU26
 322:src/menu.c    **** #endif
 127              		.loc 1 322 3 view .LVU27
 128              		.loc 1 324 3 view .LVU28
 129              		.loc 1 324 9 view .LVU29
 130 002e 002D     		cmp	r5, #0
 131 0030 78D0     		beq	.L7
 132              		.loc 1 324 23 is_stmt 0 view .LVU30
 133 0032 4F45     		cmp	r7, r9
 134 0034 76DC     		bgt	.L7
 135              	.LBB39:
 325:src/menu.c    ****     int c;
 326:src/menu.c    ****     int width;
 327:src/menu.c    ****     unsigned char cmap[6];
 328:src/menu.c    **** 
 329:src/menu.c    ****     int real_width;
 330:src/menu.c    ****     int current_smallp;
 331:src/menu.c    **** 
 332:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 333:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 334:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 335:src/menu.c    ****     //           01 -> (not used)
 336:src/menu.c    ****     //           10 -> use big font
 337:src/menu.c    ****     //           11 -> use small font
 338:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 339:src/menu.c    ****     if (str[0] == '\007') {
 136              		.loc 1 339 8 view .LVU31
 137 0036 072D     		cmp	r5, #7
 138              	.LBE39:
 312:src/menu.c    **** 
 139              		.loc 1 312 7 view .LVU32
 140 0038 4FF0FF04 		mov	r4, #255
 141              	.LVL8:
 142              	.LBB56:
 325:src/menu.c    ****     int c;
 143              		.loc 1 325 5 is_stmt 1 view .LVU33
 326:src/menu.c    ****     unsigned char cmap[6];
 144              		.loc 1 326 5 view .LVU34
 327:src/menu.c    **** 
 145              		.loc 1 327 5 view .LVU35
 329:src/menu.c    ****     int current_smallp;
 146              		.loc 1 329 5 view .LVU36
 330:src/menu.c    **** 
 147              		.loc 1 330 5 view .LVU37
 148              		.loc 1 339 5 view .LVU38
 340:src/menu.c    ****       width = str[1] & 0x1F;
 341:src/menu.c    ****       switch (str[1] & 0x60) {
 342:src/menu.c    ****       default:
 343:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 344:src/menu.c    **** 	break;
 345:src/menu.c    ****       case 0x40:	current_smallp = 0;
 346:src/menu.c    **** 	break;
 347:src/menu.c    ****       case 0x60:	current_smallp = 1;
 149              		.loc 1 347 33 is_stmt 0 view .LVU39
ARM GAS  /tmp/cc8tUJXt.s 			page 10


 150 003c 4FF0010A 		mov	r10, #1
 339:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 339 8 view .LVU40
 152 0040 64D1     		bne	.L11
 153              	.LVL9:
 154              	.L39:
 340:src/menu.c    ****       width = str[1] & 0x1F;
 155              		.loc 1 340 7 is_stmt 1 view .LVU41
 340:src/menu.c    ****       width = str[1] & 0x1F;
 156              		.loc 1 340 18 is_stmt 0 view .LVU42
 157 0042 019B     		ldr	r3, [sp, #4]
 158 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 159 0046 06F06003 		and	r3, r6, #96
 341:src/menu.c    ****       default:
 160              		.loc 1 341 7 view .LVU43
 161 004a 402B     		cmp	r3, #64
 340:src/menu.c    ****       width = str[1] & 0x1F;
 162              		.loc 1 340 13 view .LVU44
 163 004c 06F01F06 		and	r6, r6, #31
 164              	.LVL10:
 341:src/menu.c    ****       default:
 165              		.loc 1 341 7 is_stmt 1 view .LVU45
 166 0050 6CD0     		beq	.L34
 167 0052 602B     		cmp	r3, #96
 168 0054 6AD1     		bne	.L34
 169              		.loc 1 347 18 view .LVU46
 170              	.LVL11:
 348:src/menu.c    **** 	break;
 171              		.loc 1 348 2 view .LVU47
 349:src/menu.c    ****       }
 350:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 172              		.loc 1 350 7 view .LVU48
 173              		.loc 1 350 11 is_stmt 0 view .LVU49
 174 0056 019B     		ldr	r3, [sp, #4]
 175 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 347:src/menu.c    **** 	break;
 176              		.loc 1 347 33 view .LVU50
 177 005a 0123     		movs	r3, #1
 178 005c 0093     		str	r3, [sp]
 179 005e 00F58075 		add	r5, r0, #256
 180              	.LVL12:
 181              	.L15:
 351:src/menu.c    ****       str += 3;
 182              		.loc 1 351 7 is_stmt 1 view .LVU51
 352:src/menu.c    **** 
 353:src/menu.c    ****       real_width = charlengths(c);
 183              		.loc 1 353 20 is_stmt 0 view .LVU52
 184 0062 2846     		mov	r0, r5
 185 0064 FFF7FEFF 		bl	charlengths
 186              	.LVL13:
 351:src/menu.c    ****       str += 3;
 187              		.loc 1 351 11 view .LVU53
 188 0068 019B     		ldr	r3, [sp, #4]
 189 006a 0333     		adds	r3, r3, #3
 190 006c 0193     		str	r3, [sp, #4]
 191              	.LVL14:
 192              		.loc 1 353 7 is_stmt 1 view .LVU54
ARM GAS  /tmp/cc8tUJXt.s 			page 11


 354:src/menu.c    ****     } else {
 355:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 356:src/menu.c    ****       real_width = width = charlengths(c);
 357:src/menu.c    ****       current_smallp = smallp;
 358:src/menu.c    ****     }
 359:src/menu.c    **** 
 360:src/menu.c    ****     if (x + real_width > xmax)
 193              		.loc 1 360 5 view .LVU55
 194              		.loc 1 360 11 is_stmt 0 view .LVU56
 195 006e C319     		adds	r3, r0, r7
 196              	.LVL15:
 197              		.loc 1 360 8 view .LVU57
 198 0070 9945     		cmp	r9, r3
 199 0072 57DB     		blt	.L7
 200              	.L40:
 361:src/menu.c    ****       break;
 362:src/menu.c    **** 
 363:src/menu.c    ****     if (posns_state != current_smallp) {
 201              		.loc 1 363 5 is_stmt 1 view .LVU58
 202              		.loc 1 363 8 is_stmt 0 view .LVU59
 203 0074 009B     		ldr	r3, [sp]
 204 0076 A342     		cmp	r3, r4
 364:src/menu.c    ****       findlengths(posns, current_smallp);
 205              		.loc 1 364 7 view .LVU60
 206 0078 07AB     		add	r3, sp, #28
 363:src/menu.c    ****       findlengths(posns, current_smallp);
 207              		.loc 1 363 8 view .LVU61
 208 007a 05D0     		beq	.L18
 209              		.loc 1 364 7 is_stmt 1 view .LVU62
 210 007c 1846     		mov	r0, r3
 211              	.LVL16:
 212              		.loc 1 364 7 is_stmt 0 view .LVU63
 213 007e 0099     		ldr	r1, [sp]
 214 0080 0393     		str	r3, [sp, #12]
 215 0082 FFF7FEFF 		bl	findlengths
 216              	.LVL17:
 217 0086 039B     		ldr	r3, [sp, #12]
 365:src/menu.c    ****       posns_state = current_smallp;
 218              		.loc 1 365 7 is_stmt 1 view .LVU64
 219              	.LVL18:
 220              	.L18:
 366:src/menu.c    ****     }
 367:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 221              		.loc 1 367 5 view .LVU65
 222 0088 009A     		ldr	r2, [sp]
 223 008a 2846     		mov	r0, r5
 224 008c 05A9     		add	r1, sp, #20
 225 008e FFF7FEFF 		bl	unpackchar
 226              	.LVL19:
 368:src/menu.c    **** 
 369:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 227              		.loc 1 369 5 view .LVU66
 228              		.loc 1 369 15 view .LVU67
 229 0092 029B     		ldr	r3, [sp, #8]
 230 0094 03EB4704 		add	r4, r3, r7, lsl #1
 231 0098 294B     		ldr	r3, .L41+8
 232 009a 0DF1140B 		add	fp, sp, #20
ARM GAS  /tmp/cc8tUJXt.s 			page 12


 233 009e 1C44     		add	r4, r4, r3
 367:src/menu.c    **** 
 234              		.loc 1 367 5 is_stmt 0 view .LVU68
 235 00a0 4FF0050E 		mov	lr, #5
 236 00a4 A9EB0705 		sub	r5, r9, r7
 237              	.LVL20:
 238              	.L19:
 370:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 239              		.loc 1 370 17 is_stmt 1 view .LVU69
 240              		.loc 1 370 7 is_stmt 0 view .LVU70
 241 00a8 002E     		cmp	r6, #0
 242 00aa 1FDD     		ble	.L25
 371:src/menu.c    **** 	if (x+j >= xmax)
 243              		.loc 1 371 2 is_stmt 1 view .LVU71
 244              		.loc 1 371 5 is_stmt 0 view .LVU72
 245 00ac B945     		cmp	r9, r7
 246 00ae 1DDD     		ble	.L25
 247              	.LBB40:
 248              	.LBB41:
 249              	.LBB42:
 250              	.LBB43:
 372:src/menu.c    **** 	  break;
 373:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 374:src/menu.c    ****       }
 375:src/menu.c    ****     }
 376:src/menu.c    ****     x += width;
 377:src/menu.c    ****   }
 378:src/menu.c    **** }
 379:src/menu.c    **** 
 380:src/menu.c    **** 
 381:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 382:src/menu.c    **** 
 383:src/menu.c    **** int pixel_length(const char *s, int smallp)
 384:src/menu.c    **** {
 385:src/menu.c    ****   int len = 0;
 386:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 387:src/menu.c    ****   while (*s != '\0') {
 388:src/menu.c    ****     if (s[0] == '\007') {
 389:src/menu.c    ****       len += s[1] & 0x1F;
 390:src/menu.c    ****       s += 3;
 391:src/menu.c    ****       continue;
 392:src/menu.c    ****     }
 393:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 394:src/menu.c    ****   }
 395:src/menu.c    ****   return len;
 396:src/menu.c    **** }
 397:src/menu.c    **** */
 398:src/menu.c    **** 
 399:src/menu.c    **** 
 400:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 401:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 402:src/menu.c    ****   if (on) {
 403:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 404:src/menu.c    ****   }
 405:src/menu.c    ****   else {
 406:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 251              		.loc 1 406 25 view .LVU73
ARM GAS  /tmp/cc8tUJXt.s 			page 13


 252 00b0 0AFA0EFC 		lsl	ip, r10, lr
 253              		.loc 1 406 17 view .LVU74
 254 00b4 4FFA8CFC 		sxtb	ip, ip
 255              	.LBE43:
 256              	.LBE42:
 257              	.LBE41:
 258              	.LBE40:
 373:src/menu.c    ****       }
 259              		.loc 1 373 31 view .LVU75
 260 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 261              	.LBB53:
 262              	.LBB50:
 263              	.LBB47:
 264              	.LBB44:
 265              		.loc 1 406 17 view .LVU76
 266 00bc 6FEA0C08 		mvn	r8, ip
 267              	.LBE44:
 268              	.LBE47:
 269              	.LBE50:
 270              	.LBE53:
 370:src/menu.c    **** 	if (x+j >= xmax)
 271              		.loc 1 370 13 view .LVU77
 272 00c0 0023     		movs	r3, #0
 273 00c2 01E0     		b	.L20
 274              	.LVL21:
 275              	.L24:
 371:src/menu.c    **** 	  break;
 276              		.loc 1 371 5 view .LVU78
 277 00c4 9D42     		cmp	r5, r3
 278 00c6 11D0     		beq	.L25
 279              	.LVL22:
 280              	.L20:
 373:src/menu.c    ****       }
 281              		.loc 1 373 2 is_stmt 1 view .LVU79
 282              	.LBB54:
 283              	.LBI40:
 400:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 400 6 view .LVU80
 285              	.LBB51:
 401:src/menu.c    ****   if (on) {
 286              		.loc 1 401 3 view .LVU81
 287              	.LBB48:
 288              	.LBI42:
 400:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 289              		.loc 1 400 6 view .LVU82
 290              	.LBB45:
 402:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 291              		.loc 1 402 3 view .LVU83
 292              	.LBE45:
 293              	.LBE48:
 401:src/menu.c    ****   if (on) {
 294              		.loc 1 401 6 is_stmt 0 view .LVU84
 295 00c8 DA19     		adds	r2, r3, r7
 296              	.LVL23:
 401:src/menu.c    ****   if (on) {
 297              		.loc 1 401 6 view .LVU85
 298 00ca C72A     		cmp	r2, #199
ARM GAS  /tmp/cc8tUJXt.s 			page 14


 299              	.LBE51:
 300              	.LBE54:
 373:src/menu.c    ****       }
 301              		.loc 1 373 46 view .LVU86
 302 00cc 40FA03F1 		asr	r1, r0, r3
 303              	.LBB55:
 304              	.LBB52:
 401:src/menu.c    ****   if (on) {
 305              		.loc 1 401 6 view .LVU87
 306 00d0 09D8     		bhi	.L22
 307              	.LBB49:
 308              	.LBB46:
 403:src/menu.c    ****   }
 309              		.loc 1 403 5 is_stmt 1 view .LVU88
 310              		.loc 1 406 5 view .LVU89
 403:src/menu.c    ****   }
 311              		.loc 1 403 17 is_stmt 0 view .LVU90
 312 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 313              	.LVL24:
 402:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 314              		.loc 1 402 6 view .LVU91
 315 00d6 C907     		lsls	r1, r1, #31
 403:src/menu.c    ****   }
 316              		.loc 1 403 17 view .LVU92
 317 00d8 4CBF     		ite	mi
 318 00da 4CEA0202 		orrmi	r2, ip, r2
 319              		.loc 1 406 17 view .LVU93
 320 00de 08EA0202 		andpl	r2, r8, r2
 321 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 322              	.L22:
 323              	.LBE46:
 324              	.LBE49:
 325              	.LBE52:
 326              	.LBE55:
 371:src/menu.c    **** 	  break;
 327              		.loc 1 371 2 is_stmt 1 view .LVU94
 328              	.LVL25:
 370:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 370 26 view .LVU95
 370:src/menu.c    **** 	if (x+j >= xmax)
 330              		.loc 1 370 27 is_stmt 0 view .LVU96
 331 00e6 0133     		adds	r3, r3, #1
 332              	.LVL26:
 370:src/menu.c    **** 	if (x+j >= xmax)
 333              		.loc 1 370 17 is_stmt 1 view .LVU97
 370:src/menu.c    **** 	if (x+j >= xmax)
 334              		.loc 1 370 7 is_stmt 0 view .LVU98
 335 00e8 B342     		cmp	r3, r6
 336 00ea EBD1     		bne	.L24
 337              	.LVL27:
 338              	.L25:
 369:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 339              		.loc 1 369 20 is_stmt 1 view .LVU99
 369:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 340              		.loc 1 369 15 view .LVU100
 341 00ec 0EF1FF3E 		add	lr, lr, #-1
 369:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
ARM GAS  /tmp/cc8tUJXt.s 			page 15


 342              		.loc 1 369 5 is_stmt 0 view .LVU101
 343 00f0 BEF1FF3F 		cmp	lr, #-1
 344 00f4 0BF1010B 		add	fp, fp, #1
 345              	.LVL28:
 369:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 346              		.loc 1 369 5 view .LVU102
 347 00f8 D6D1     		bne	.L19
 376:src/menu.c    ****   }
 348              		.loc 1 376 5 is_stmt 1 view .LVU103
 349              	.LBE56:
 324:src/menu.c    ****     int c;
 350              		.loc 1 324 10 is_stmt 0 view .LVU104
 351 00fa 019B     		ldr	r3, [sp, #4]
 352 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 353              	.LBB57:
 376:src/menu.c    ****   }
 354              		.loc 1 376 7 view .LVU105
 355 00fe 3744     		add	r7, r7, r6
 356              	.LVL29:
 376:src/menu.c    ****   }
 357              		.loc 1 376 7 view .LVU106
 358              	.LBE57:
 324:src/menu.c    ****     int c;
 359              		.loc 1 324 9 is_stmt 1 view .LVU107
 360 0100 85B1     		cbz	r5, .L7
 324:src/menu.c    ****     int c;
 361              		.loc 1 324 23 is_stmt 0 view .LVU108
 362 0102 B945     		cmp	r9, r7
 363 0104 0EDB     		blt	.L7
 364              	.LBB58:
 339:src/menu.c    ****       width = str[1] & 0x1F;
 365              		.loc 1 339 8 view .LVU109
 366 0106 072D     		cmp	r5, #7
 367              	.LBE58:
 368 0108 009C     		ldr	r4, [sp]
 369              	.LBB59:
 325:src/menu.c    ****     int width;
 370              		.loc 1 325 5 is_stmt 1 view .LVU110
 326:src/menu.c    ****     unsigned char cmap[6];
 371              		.loc 1 326 5 view .LVU111
 327:src/menu.c    **** 
 372              		.loc 1 327 5 view .LVU112
 329:src/menu.c    ****     int current_smallp;
 373              		.loc 1 329 5 view .LVU113
 330:src/menu.c    **** 
 374              		.loc 1 330 5 view .LVU114
 339:src/menu.c    ****       width = str[1] & 0x1F;
 375              		.loc 1 339 5 view .LVU115
 339:src/menu.c    ****       width = str[1] & 0x1F;
 376              		.loc 1 339 8 is_stmt 0 view .LVU116
 377 010a 9AD0     		beq	.L39
 378              	.LVL30:
 379              	.L11:
 355:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 355 7 is_stmt 1 view .LVU117
 356:src/menu.c    ****       current_smallp = smallp;
 381              		.loc 1 356 28 is_stmt 0 view .LVU118
ARM GAS  /tmp/cc8tUJXt.s 			page 16


 382 010c 2846     		mov	r0, r5
 383 010e FFF7FEFF 		bl	charlengths
 384              	.LVL31:
 355:src/menu.c    ****       real_width = width = charlengths(c);
 385              		.loc 1 355 31 view .LVU119
 386 0112 019B     		ldr	r3, [sp, #4]
 387 0114 0133     		adds	r3, r3, #1
 388 0116 0193     		str	r3, [sp, #4]
 389              	.LVL32:
 356:src/menu.c    ****       current_smallp = smallp;
 390              		.loc 1 356 7 is_stmt 1 view .LVU120
 357:src/menu.c    ****     }
 391              		.loc 1 357 7 view .LVU121
 357:src/menu.c    ****     }
 392              		.loc 1 357 22 is_stmt 0 view .LVU122
 393 0118 0023     		movs	r3, #0
 394              	.LVL33:
 357:src/menu.c    ****     }
 395              		.loc 1 357 22 view .LVU123
 396 011a 0093     		str	r3, [sp]
 397              	.LVL34:
 360:src/menu.c    ****       break;
 398              		.loc 1 360 11 view .LVU124
 399 011c C319     		adds	r3, r0, r7
 400              	.LVL35:
 360:src/menu.c    ****       break;
 401              		.loc 1 360 8 view .LVU125
 402 011e 9945     		cmp	r9, r3
 356:src/menu.c    ****       current_smallp = smallp;
 403              		.loc 1 356 28 view .LVU126
 404 0120 0646     		mov	r6, r0
 360:src/menu.c    ****       break;
 405              		.loc 1 360 5 is_stmt 1 view .LVU127
 360:src/menu.c    ****       break;
 406              		.loc 1 360 8 is_stmt 0 view .LVU128
 407 0122 A7DA     		bge	.L40
 408              	.LVL36:
 409              	.L7:
 360:src/menu.c    ****       break;
 410              		.loc 1 360 8 view .LVU129
 411              	.LBE59:
 378:src/menu.c    **** 
 412              		.loc 1 378 1 view .LVU130
 413 0124 0DF5097D 		add	sp, sp, #548
 414              		.cfi_remember_state
 415              		.cfi_def_cfa_offset 36
 416              		@ sp needed
 417 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 418              	.LVL37:
 419              	.L34:
 420              		.cfi_restore_state
 421              	.LBB60:
 350:src/menu.c    ****       str += 3;
 422              		.loc 1 350 7 is_stmt 1 view .LVU131
 350:src/menu.c    ****       str += 3;
 423              		.loc 1 350 11 is_stmt 0 view .LVU132
 424 012c 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/cc8tUJXt.s 			page 17


 425 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 343:src/menu.c    **** 	break;
 426              		.loc 1 343 33 view .LVU133
 427 0130 0023     		movs	r3, #0
 428 0132 0093     		str	r3, [sp]
 429 0134 95E7     		b	.L15
 430              	.L42:
 431 0136 00BF     		.align	2
 432              	.L41:
 433 0138 00000000 		.word	forceDispPlot
 434 013c 00000000 		.word	RectPolConv
 435 0140 00000000 		.word	.LANCHOR0
 436              	.LBE60:
 437              		.cfi_endproc
 438              	.LFE30:
 440              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 441              		.align	2
 442              	.LC2:
 443 0000 57503334 		.ascii	"WP34s calculator for DM42:\000"
 443      73206361 
 443      6C63756C 
 443      61746F72 
 443      20666F72 
 444 001b 00       		.align	2
 445              	.LC3:
 446 001c 77697468 		.ascii	"with top row for annunciators,\000"
 446      20746F70 
 446      20726F77 
 446      20666F72 
 446      20616E6E 
 447 003b 00       		.align	2
 448              	.LC4:
 449 003c 61206C6F 		.ascii	"a longer alpha display,\000"
 449      6E676572 
 449      20616C70 
 449      68612064 
 449      6973706C 
 450              		.align	2
 451              	.LC5:
 452 0054 616E6420 		.ascii	"and some annunciators renamed.\000"
 452      736F6D65 
 452      20616E6E 
 452      756E6369 
 452      61746F72 
 453 0073 00       		.align	2
 454              	.LC6:
 455 0074 54686973 		.ascii	"This software is neither provided\000"
 455      20736F66 
 455      74776172 
 455      65206973 
 455      206E6569 
 456 0096 0000     		.align	2
 457              	.LC7:
 458 0098 6279206E 		.ascii	"by nor supported by SwissMicros.\000"
 458      6F722073 
 458      7570706F 
 458      72746564 
ARM GAS  /tmp/cc8tUJXt.s 			page 18


 458      20627920 
 459 00b9 000000   		.align	2
 460              	.LC8:
 461 00bc 20202020 		.ascii	"    Press EXIT key to continue...\000"
 461      50726573 
 461      73204558 
 461      4954206B 
 461      65792074 
 462              		.section	.text.disp_about,"ax",%progbits
 463              		.align	1
 464              		.p2align 2,,3
 465              		.global	disp_about
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 469              		.fpu fpv4-sp-d16
 471              	disp_about:
 472              	.LFB5:
  50:src/menu.c    ****   lcd_clear_buf();
 473              		.loc 1 50 19 is_stmt 1 view -0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
  51:src/menu.c    ****   lcd_writeClr(t24);
 477              		.loc 1 51 3 view .LVU135
  50:src/menu.c    ****   lcd_clear_buf();
 478              		.loc 1 50 19 is_stmt 0 view .LVU136
 479 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 480              		.cfi_def_cfa_offset 24
 481              		.cfi_offset 4, -24
 482              		.cfi_offset 5, -20
 483              		.cfi_offset 6, -16
 484              		.cfi_offset 7, -12
 485              		.cfi_offset 8, -8
 486              		.cfi_offset 14, -4
  52:src/menu.c    **** 
 487              		.loc 1 52 3 view .LVU137
 488 0004 1F4C     		ldr	r4, .L45
  51:src/menu.c    ****   lcd_writeClr(t24);
 489              		.loc 1 51 3 view .LVU138
 490 0006 204B     		ldr	r3, .L45+4
  55:src/menu.c    ****   t24->y += 5;
 491              		.loc 1 55 3 view .LVU139
 492 0008 204D     		ldr	r5, .L45+8
  51:src/menu.c    ****   lcd_writeClr(t24);
 493              		.loc 1 51 3 view .LVU140
 494 000a 9847     		blx	r3
 495              	.LVL38:
  52:src/menu.c    **** 
 496              		.loc 1 52 3 is_stmt 1 view .LVU141
 497 000c 606B     		ldr	r0, [r4, #52]
 498 000e 204B     		ldr	r3, .L45+12
 499 0010 9847     		blx	r3
 500              	.LVL39:
  54:src/menu.c    ****   lcd_printR(t24, "WP34s calculator for DM42:");
 501              		.loc 1 54 3 view .LVU142
 502 0012 0522     		movs	r2, #5
ARM GAS  /tmp/cc8tUJXt.s 			page 19


 503 0014 606B     		ldr	r0, [r4, #52]
 504 0016 1F4B     		ldr	r3, .L45+16
 505 0018 0021     		movs	r1, #0
 506 001a 9847     		blx	r3
 507              	.LVL40:
  55:src/menu.c    ****   t24->y += 5;
 508              		.loc 1 55 3 view .LVU143
  55:src/menu.c    ****   t24->y += 5;
 509              		.loc 1 55 3 view .LVU144
 510 001c 606B     		ldr	r0, [r4, #52]
 511 001e 1E49     		ldr	r1, .L45+20
 512 0020 0126     		movs	r6, #1
 513 0022 4674     		strb	r6, [r0, #17]
  55:src/menu.c    ****   t24->y += 5;
 514              		.loc 1 55 3 view .LVU145
 515 0024 A847     		blx	r5
 516              	.LVL41:
  55:src/menu.c    ****   t24->y += 5;
 517              		.loc 1 55 3 view .LVU146
 518 0026 606B     		ldr	r0, [r4, #52]
  58:src/menu.c    ****   lcd_print(t24, "a longer alpha display,");
 519              		.loc 1 58 3 is_stmt 0 view .LVU147
 520 0028 1C49     		ldr	r1, .L45+24
  56:src/menu.c    **** #ifdef TOP_ROW
 521              		.loc 1 56 10 view .LVU148
 522 002a C388     		ldrh	r3, [r0, #6]
  55:src/menu.c    ****   t24->y += 5;
 523              		.loc 1 55 3 view .LVU149
 524 002c 0027     		movs	r7, #0
  56:src/menu.c    **** #ifdef TOP_ROW
 525              		.loc 1 56 10 view .LVU150
 526 002e 0533     		adds	r3, r3, #5
 527 0030 C380     		strh	r3, [r0, #6]	@ movhi
  55:src/menu.c    ****   t24->y += 5;
 528              		.loc 1 55 3 view .LVU151
 529 0032 4774     		strb	r7, [r0, #17]
  55:src/menu.c    ****   t24->y += 5;
 530              		.loc 1 55 3 is_stmt 1 view .LVU152
  56:src/menu.c    **** #ifdef TOP_ROW
 531              		.loc 1 56 3 view .LVU153
  58:src/menu.c    ****   lcd_print(t24, "a longer alpha display,");
 532              		.loc 1 58 3 view .LVU154
 533 0034 A847     		blx	r5
 534              	.LVL42:
  59:src/menu.c    ****   lcd_print(t24, "and some annunciators renamed.");
 535              		.loc 1 59 3 view .LVU155
 536 0036 606B     		ldr	r0, [r4, #52]
 537 0038 1949     		ldr	r1, .L45+28
 538 003a A847     		blx	r5
 539              	.LVL43:
  60:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 540              		.loc 1 60 3 view .LVU156
 541 003c 606B     		ldr	r0, [r4, #52]
 542 003e 1949     		ldr	r1, .L45+32
 543 0040 A847     		blx	r5
 544              	.LVL44:
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
ARM GAS  /tmp/cc8tUJXt.s 			page 20


 545              		.loc 1 69 3 view .LVU157
 546 0042 606B     		ldr	r0, [r4, #52]
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 547              		.loc 1 70 3 is_stmt 0 view .LVU158
 548 0044 1849     		ldr	r1, .L45+36
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 549              		.loc 1 69 10 view .LVU159
 550 0046 C388     		ldrh	r3, [r0, #6]
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 551              		.loc 1 70 3 view .LVU160
 552 0048 4674     		strb	r6, [r0, #17]
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 553              		.loc 1 69 10 view .LVU161
 554 004a 0533     		adds	r3, r3, #5
 555 004c C380     		strh	r3, [r0, #6]	@ movhi
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 556              		.loc 1 70 3 is_stmt 1 view .LVU162
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 557              		.loc 1 70 3 view .LVU163
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 558              		.loc 1 70 3 view .LVU164
 559 004e A847     		blx	r5
 560              	.LVL45:
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 561              		.loc 1 70 3 view .LVU165
 562 0050 606B     		ldr	r0, [r4, #52]
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 563              		.loc 1 70 3 view .LVU166
  71:src/menu.c    **** 
 564              		.loc 1 71 3 view .LVU167
  71:src/menu.c    **** 
 565              		.loc 1 71 3 view .LVU168
 566 0052 1649     		ldr	r1, .L45+40
 567 0054 4674     		strb	r6, [r0, #17]
  71:src/menu.c    **** 
 568              		.loc 1 71 3 view .LVU169
 569 0056 A847     		blx	r5
 570              	.LVL46:
  71:src/menu.c    **** 
 571              		.loc 1 71 3 view .LVU170
 572 0058 606B     		ldr	r0, [r4, #52]
  73:src/menu.c    ****   t24->x = 20;
 573              		.loc 1 73 20 is_stmt 0 view .LVU171
 574 005a 154B     		ldr	r3, .L45+44
  71:src/menu.c    **** 
 575              		.loc 1 71 3 view .LVU172
 576 005c 4774     		strb	r7, [r0, #17]
  71:src/menu.c    **** 
 577              		.loc 1 71 3 is_stmt 1 view .LVU173
  73:src/menu.c    ****   t24->x = 20;
 578              		.loc 1 73 3 view .LVU174
  73:src/menu.c    ****   t24->x = 20;
 579              		.loc 1 73 20 is_stmt 0 view .LVU175
 580 005e 9847     		blx	r3
 581              	.LVL47:
  73:src/menu.c    ****   t24->x = 20;
 582              		.loc 1 73 3 view .LVU176
ARM GAS  /tmp/cc8tUJXt.s 			page 21


 583 0060 636B     		ldr	r3, [r4, #52]
  75:src/menu.c    **** 
 584              		.loc 1 75 3 view .LVU177
 585 0062 1449     		ldr	r1, .L45+48
 586 0064 5E74     		strb	r6, [r3, #17]
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 587              		.loc 1 74 10 view .LVU178
 588 0066 1422     		movs	r2, #20
  73:src/menu.c    ****   t24->x = 20;
 589              		.loc 1 73 39 view .LVU179
 590 0068 C0F1EB00 		rsb	r0, r0, #235
  73:src/menu.c    ****   t24->x = 20;
 591              		.loc 1 73 10 view .LVU180
 592 006c D880     		strh	r0, [r3, #6]	@ movhi
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 593              		.loc 1 74 3 is_stmt 1 view .LVU181
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 594              		.loc 1 74 10 is_stmt 0 view .LVU182
 595 006e 9A80     		strh	r2, [r3, #4]	@ movhi
  75:src/menu.c    **** 
 596              		.loc 1 75 3 is_stmt 1 view .LVU183
  75:src/menu.c    **** 
 597              		.loc 1 75 3 view .LVU184
  75:src/menu.c    **** 
 598              		.loc 1 75 3 view .LVU185
 599 0070 1846     		mov	r0, r3
 600 0072 A847     		blx	r5
 601              	.LVL48:
  75:src/menu.c    **** 
 602              		.loc 1 75 3 view .LVU186
 603 0074 626B     		ldr	r2, [r4, #52]
  77:src/menu.c    **** 
 604              		.loc 1 77 3 is_stmt 0 view .LVU187
 605 0076 104B     		ldr	r3, .L45+52
  75:src/menu.c    **** 
 606              		.loc 1 75 3 view .LVU188
 607 0078 5774     		strb	r7, [r2, #17]
  75:src/menu.c    **** 
 608              		.loc 1 75 3 is_stmt 1 view .LVU189
  77:src/menu.c    **** 
 609              		.loc 1 77 3 view .LVU190
 610 007a 9847     		blx	r3
 611              	.LVL49:
  79:src/menu.c    **** }
 612              		.loc 1 79 3 view .LVU191
  80:src/menu.c    **** 
 613              		.loc 1 80 1 is_stmt 0 view .LVU192
 614 007c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 615              		.cfi_restore 14
 616              		.cfi_restore 8
 617              		.cfi_restore 7
 618              		.cfi_restore 6
 619              		.cfi_restore 5
 620              		.cfi_restore 4
 621              		.cfi_def_cfa_offset 0
  79:src/menu.c    **** }
 622              		.loc 1 79 3 view .LVU193
ARM GAS  /tmp/cc8tUJXt.s 			page 22


 623 0080 0E4B     		ldr	r3, .L45+56
 624 0082 1847     		bx	r3	@ indirect register sibling call
 625              	.LVL50:
 626              	.L46:
 627              		.align	2
 628              	.L45:
 629 0084 00200010 		.word	268443648
 630 0088 2D020008 		.word	134218285
 631 008c B1020008 		.word	134218417
 632 0090 65020008 		.word	134218341
 633 0094 6D020008 		.word	134218349
 634 0098 00000000 		.word	.LC2
 635 009c 1C000000 		.word	.LC3
 636 00a0 3C000000 		.word	.LC4
 637 00a4 54000000 		.word	.LC5
 638 00a8 74000000 		.word	.LC6
 639 00ac 98000000 		.word	.LC7
 640 00b0 71020008 		.word	134218353
 641 00b4 BC000000 		.word	.LC8
 642 00b8 31020008 		.word	134218289
 643 00bc 99030008 		.word	134218649
 644              		.cfi_endproc
 645              	.LFE5:
 647              		.section	.text.run_menu_item,"ax",%progbits
 648              		.align	1
 649              		.p2align 2,,3
 650              		.global	run_menu_item
 651              		.syntax unified
 652              		.thumb
 653              		.thumb_func
 654              		.fpu fpv4-sp-d16
 656              	run_menu_item:
 657              	.LVL51:
 658              	.LFB3:
  19:src/menu.c    ****   int ret = 0;
 659              		.loc 1 19 36 is_stmt 1 view -0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 0
 662              		@ frame_needed = 0, uses_anonymous_args = 0
  20:src/menu.c    **** 
 663              		.loc 1 20 3 view .LVU195
  22:src/menu.c    ****     case MI_ABOUT_PGM:
 664              		.loc 1 22 3 view .LVU196
 665 0000 0B28     		cmp	r0, #11
 666 0002 04D1     		bne	.L49
  24:src/menu.c    ****       break;
 667              		.loc 1 24 7 view .LVU197
  19:src/menu.c    ****   int ret = 0;
 668              		.loc 1 19 36 is_stmt 0 view .LVU198
 669 0004 08B5     		push	{r3, lr}
 670              		.cfi_def_cfa_offset 8
 671              		.cfi_offset 3, -8
 672              		.cfi_offset 14, -4
  24:src/menu.c    ****       break;
 673              		.loc 1 24 7 view .LVU199
 674 0006 FFF7FEFF 		bl	disp_about
 675              	.LVL52:
ARM GAS  /tmp/cc8tUJXt.s 			page 23


  25:src/menu.c    **** 
 676              		.loc 1 25 7 is_stmt 1 view .LVU200
  20:src/menu.c    **** 
 677              		.loc 1 20 7 is_stmt 0 view .LVU201
 678 000a 0020     		movs	r0, #0
  33:src/menu.c    **** 
 679              		.loc 1 33 1 view .LVU202
 680 000c 08BD     		pop	{r3, pc}
 681              	.LVL53:
 682              	.L49:
 683              		.cfi_def_cfa_offset 0
 684              		.cfi_restore 3
 685              		.cfi_restore 14
  28:src/menu.c    ****       break;
 686              		.loc 1 28 11 view .LVU203
 687 000e 4FF0FF30 		mov	r0, #-1
 688              	.LVL54:
  32:src/menu.c    **** }
 689              		.loc 1 32 3 is_stmt 1 view .LVU204
  33:src/menu.c    **** 
 690              		.loc 1 33 1 is_stmt 0 view .LVU205
 691 0012 7047     		bx	lr
 692              		.cfi_endproc
 693              	.LFE3:
 695              		.section	.text.set_menu,"ax",%progbits
 696              		.align	1
 697              		.p2align 2,,3
 698              		.global	set_menu
 699              		.syntax unified
 700              		.thumb
 701              		.thumb_func
 702              		.fpu fpv4-sp-d16
 704              	set_menu:
 705              	.LVL55:
 706              	.LFB6:
  86:src/menu.c    ****   int m = current_menu;
 707              		.loc 1 86 32 is_stmt 1 view -0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              		@ link register save eliminated.
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 712              		.loc 1 87 3 view .LVU207
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 713              		.loc 1 87 7 is_stmt 0 view .LVU208
 714 0000 094A     		ldr	r2, .L63
 715 0002 1368     		ldr	r3, [r2]
 716              	.LVL56:
  88:src/menu.c    ****     current_menu = default_menu;
 717              		.loc 1 88 3 is_stmt 1 view .LVU209
  88:src/menu.c    ****     current_menu = default_menu;
 718              		.loc 1 88 6 is_stmt 0 view .LVU210
 719 0004 8342     		cmp	r3, r0
 720 0006 0AD0     		beq	.L62
  91:src/menu.c    ****     current_menu = last_menu;
 721              		.loc 1 91 8 is_stmt 1 view .LVU211
  91:src/menu.c    ****     current_menu = last_menu;
ARM GAS  /tmp/cc8tUJXt.s 			page 24


 722              		.loc 1 91 11 is_stmt 0 view .LVU212
 723 0008 411C     		adds	r1, r0, #1
  92:src/menu.c    ****   }
 724              		.loc 1 92 5 is_stmt 1 view .LVU213
  92:src/menu.c    ****   }
 725              		.loc 1 92 18 is_stmt 0 view .LVU214
 726 000a 09BF     		itett	eq
 727 000c 0749     		ldreq	r1, .L63+4
  95:src/menu.c    ****   }
 728              		.loc 1 95 18 view .LVU215
 729 000e 1060     		strne	r0, [r2]
  92:src/menu.c    ****   }
 730              		.loc 1 92 18 view .LVU216
 731 0010 0968     		ldreq	r1, [r1]
 732 0012 1160     		streq	r1, [r2]
  95:src/menu.c    ****   }
 733              		.loc 1 95 5 is_stmt 1 view .LVU217
 734              	.L56:
  97:src/menu.c    **** }
 735              		.loc 1 97 3 view .LVU218
  97:src/menu.c    **** }
 736              		.loc 1 97 6 is_stmt 0 view .LVU219
 737 0014 092B     		cmp	r3, #9
  97:src/menu.c    **** }
 738              		.loc 1 97 15 is_stmt 1 view .LVU220
  97:src/menu.c    **** }
 739              		.loc 1 97 25 is_stmt 0 view .LVU221
 740 0016 1CBF     		itt	ne
 741 0018 044A     		ldrne	r2, .L63+4
 742 001a 1360     		strne	r3, [r2]
  98:src/menu.c    **** 
 743              		.loc 1 98 1 view .LVU222
 744 001c 7047     		bx	lr
 745              	.L62:
  89:src/menu.c    ****   }
 746              		.loc 1 89 5 is_stmt 1 view .LVU223
  89:src/menu.c    ****   }
 747              		.loc 1 89 18 is_stmt 0 view .LVU224
 748 001e 0449     		ldr	r1, .L63+8
 749 0020 0968     		ldr	r1, [r1]
 750 0022 1160     		str	r1, [r2]
 751 0024 F6E7     		b	.L56
 752              	.L64:
 753 0026 00BF     		.align	2
 754              	.L63:
 755 0028 00000000 		.word	.LANCHOR1
 756 002c 00000000 		.word	.LANCHOR3
 757 0030 00000000 		.word	.LANCHOR2
 758              		.cfi_endproc
 759              	.LFE6:
 761              		.section	.text.toggle_default_menu,"ax",%progbits
 762              		.align	1
 763              		.p2align 2,,3
 764              		.global	toggle_default_menu
 765              		.syntax unified
 766              		.thumb
 767              		.thumb_func
ARM GAS  /tmp/cc8tUJXt.s 			page 25


 768              		.fpu fpv4-sp-d16
 770              	toggle_default_menu:
 771              	.LFB7:
 100:src/menu.c    ****   if (current_menu == default_menu) {
 772              		.loc 1 100 29 is_stmt 1 view -0
 773              		.cfi_startproc
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 776              		@ link register save eliminated.
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 777              		.loc 1 101 3 view .LVU226
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 778              		.loc 1 101 20 is_stmt 0 view .LVU227
 779 0000 0549     		ldr	r1, .L67
 780 0002 064A     		ldr	r2, .L67+4
 781 0004 0868     		ldr	r0, [r1]
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 782              		.loc 1 101 6 view .LVU228
 783 0006 1368     		ldr	r3, [r2]
 784 0008 8342     		cmp	r3, r0
 785 000a 03D1     		bne	.L65
 102:src/menu.c    ****   }
 786              		.loc 1 102 5 is_stmt 1 view .LVU229
 102:src/menu.c    ****   }
 787              		.loc 1 102 38 is_stmt 0 view .LVU230
 788 000c C3F10F03 		rsb	r3, r3, #15
 102:src/menu.c    ****   }
 789              		.loc 1 102 33 view .LVU231
 790 0010 0B60     		str	r3, [r1]
 102:src/menu.c    ****   }
 791              		.loc 1 102 18 view .LVU232
 792 0012 1360     		str	r3, [r2]
 793              	.L65:
 104:src/menu.c    **** 
 794              		.loc 1 104 1 view .LVU233
 795 0014 7047     		bx	lr
 796              	.L68:
 797 0016 00BF     		.align	2
 798              	.L67:
 799 0018 00000000 		.word	.LANCHOR2
 800 001c 00000000 		.word	.LANCHOR1
 801              		.cfi_endproc
 802              	.LFE7:
 804              		.section	.text.get_menu,"ax",%progbits
 805              		.align	1
 806              		.p2align 2,,3
 807              		.global	get_menu
 808              		.syntax unified
 809              		.thumb
 810              		.thumb_func
 811              		.fpu fpv4-sp-d16
 813              	get_menu:
 814              	.LFB8:
 106:src/menu.c    ****   return current_menu;
 815              		.loc 1 106 17 is_stmt 1 view -0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc8tUJXt.s 			page 26


 818              		@ frame_needed = 0, uses_anonymous_args = 0
 819              		@ link register save eliminated.
 107:src/menu.c    **** }
 820              		.loc 1 107 3 view .LVU235
 107:src/menu.c    **** }
 821              		.loc 1 107 10 is_stmt 0 view .LVU236
 822 0000 014B     		ldr	r3, .L70
 108:src/menu.c    **** 
 823              		.loc 1 108 1 view .LVU237
 824 0002 1868     		ldr	r0, [r3]
 825 0004 7047     		bx	lr
 826              	.L71:
 827 0006 00BF     		.align	2
 828              	.L70:
 829 0008 00000000 		.word	.LANCHOR1
 830              		.cfi_endproc
 831              	.LFE8:
 833              		.section	.text.set_last_menu,"ax",%progbits
 834              		.align	1
 835              		.p2align 2,,3
 836              		.global	set_last_menu
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 840              		.fpu fpv4-sp-d16
 842              	set_last_menu:
 843              	.LFB10:
 114:src/menu.c    ****   set_menu (last_menu);
 844              		.loc 1 114 23 is_stmt 1 view -0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 0
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848              		@ link register save eliminated.
 115:src/menu.c    **** }
 849              		.loc 1 115 3 view .LVU239
 850 0000 0649     		ldr	r1, .L80
 851              	.LBB61:
 852              	.LBB62:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 853              		.loc 1 87 7 is_stmt 0 view .LVU240
 854 0002 074A     		ldr	r2, .L80+4
 855              	.LBE62:
 856              	.LBE61:
 115:src/menu.c    **** }
 857              		.loc 1 115 3 view .LVU241
 858 0004 0868     		ldr	r0, [r1]
 859              	.LVL57:
 860              	.LBB64:
 861              	.LBI61:
  86:src/menu.c    ****   int m = current_menu;
 862              		.loc 1 86 6 is_stmt 1 view .LVU242
 863              	.LBB63:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 864              		.loc 1 87 3 view .LVU243
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 865              		.loc 1 87 7 is_stmt 0 view .LVU244
 866 0006 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cc8tUJXt.s 			page 27


 867              	.LVL58:
  88:src/menu.c    ****     current_menu = default_menu;
 868              		.loc 1 88 3 is_stmt 1 view .LVU245
  88:src/menu.c    ****     current_menu = default_menu;
 869              		.loc 1 88 6 is_stmt 0 view .LVU246
 870 0008 9842     		cmp	r0, r3
  89:src/menu.c    ****   }
 871              		.loc 1 89 5 is_stmt 1 view .LVU247
  89:src/menu.c    ****   }
 872              		.loc 1 89 18 is_stmt 0 view .LVU248
 873 000a 04BF     		itt	eq
 874 000c 0548     		ldreq	r0, .L80+8
 875              	.LVL59:
  89:src/menu.c    ****   }
 876              		.loc 1 89 18 view .LVU249
 877 000e 0068     		ldreq	r0, [r0]
  91:src/menu.c    ****     current_menu = last_menu;
 878              		.loc 1 91 8 is_stmt 1 view .LVU250
  95:src/menu.c    ****   }
 879              		.loc 1 95 18 is_stmt 0 view .LVU251
 880 0010 1060     		str	r0, [r2]
  97:src/menu.c    **** }
 881              		.loc 1 97 3 is_stmt 1 view .LVU252
  97:src/menu.c    **** }
 882              		.loc 1 97 6 is_stmt 0 view .LVU253
 883 0012 092B     		cmp	r3, #9
  97:src/menu.c    **** }
 884              		.loc 1 97 15 is_stmt 1 view .LVU254
  97:src/menu.c    **** }
 885              		.loc 1 97 25 is_stmt 0 view .LVU255
 886 0014 18BF     		it	ne
 887 0016 0B60     		strne	r3, [r1]
 888              	.LVL60:
  97:src/menu.c    **** }
 889              		.loc 1 97 25 view .LVU256
 890              	.LBE63:
 891              	.LBE64:
 116:src/menu.c    **** 
 892              		.loc 1 116 1 view .LVU257
 893 0018 7047     		bx	lr
 894              	.L81:
 895 001a 00BF     		.align	2
 896              	.L80:
 897 001c 00000000 		.word	.LANCHOR3
 898 0020 00000000 		.word	.LANCHOR1
 899 0024 00000000 		.word	.LANCHOR2
 900              		.cfi_endproc
 901              	.LFE10:
 903              		.section	.text.mdot,"ax",%progbits
 904              		.align	1
 905              		.p2align 2,,3
 906              		.global	mdot
 907              		.syntax unified
 908              		.thumb
 909              		.thumb_func
 910              		.fpu fpv4-sp-d16
 912              	mdot:
ARM GAS  /tmp/cc8tUJXt.s 			page 28


 913              	.LVL61:
 914              	.LFB12:
 400:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 915              		.loc 1 400 40 is_stmt 1 view -0
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 0
 918              		@ frame_needed = 0, uses_anonymous_args = 0
 919              		@ link register save eliminated.
 401:src/menu.c    ****   if (on) {
 920              		.loc 1 401 3 view .LVU259
 401:src/menu.c    ****   if (on) {
 921              		.loc 1 401 6 is_stmt 0 view .LVU260
 922 0000 C728     		cmp	r0, #199
 923 0002 1AD8     		bhi	.L86
 924              	.LVL62:
 925              	.LBB67:
 926              	.LBI67:
 400:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 927              		.loc 1 400 6 is_stmt 1 view .LVU261
 928              	.LBB68:
 402:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 929              		.loc 1 402 3 view .LVU262
 930              	.LBE68:
 931              	.LBE67:
 400:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 932              		.loc 1 400 40 is_stmt 0 view .LVU263
 933 0004 10B4     		push	{r4}
 934              		.cfi_def_cfa_offset 4
 935              		.cfi_offset 4, -4
 936              	.LBB71:
 937              	.LBB69:
 402:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 938              		.loc 1 402 6 view .LVU264
 939 0006 63B9     		cbnz	r3, .L89
 940              		.loc 1 406 5 is_stmt 1 view .LVU265
 941              		.loc 1 406 17 is_stmt 0 view .LVU266
 942 0008 0C4B     		ldr	r3, .L90
 943              	.LVL63:
 944              		.loc 1 406 17 view .LVU267
 945 000a 03EB4000 		add	r0, r3, r0, lsl #1
 946              	.LVL64:
 947              		.loc 1 406 25 view .LVU268
 948 000e 0124     		movs	r4, #1
 949              		.loc 1 406 17 view .LVU269
 950 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 951              		.loc 1 406 25 view .LVU270
 952 0012 04FA01F1 		lsl	r1, r4, r1
 953              	.LVL65:
 954              		.loc 1 406 17 view .LVU271
 955 0016 23EA0101 		bic	r1, r3, r1
 956 001a 8154     		strb	r1, [r0, r2]
 957              	.LVL66:
 958              		.loc 1 406 17 view .LVU272
 959              	.LBE69:
 960              	.LBE71:
 407:src/menu.c    ****   }
 408:src/menu.c    **** }
ARM GAS  /tmp/cc8tUJXt.s 			page 29


 961              		.loc 1 408 1 view .LVU273
 962 001c 5DF8044B 		ldr	r4, [sp], #4
 963              		.cfi_remember_state
 964              		.cfi_restore 4
 965              		.cfi_def_cfa_offset 0
 966 0020 7047     		bx	lr
 967              	.LVL67:
 968              	.L89:
 969              		.cfi_restore_state
 970              	.LBB72:
 971              	.LBB70:
 403:src/menu.c    ****   }
 972              		.loc 1 403 5 is_stmt 1 view .LVU274
 403:src/menu.c    ****   }
 973              		.loc 1 403 17 is_stmt 0 view .LVU275
 974 0022 064B     		ldr	r3, .L90
 975              	.LVL68:
 403:src/menu.c    ****   }
 976              		.loc 1 403 17 view .LVU276
 977 0024 03EB4000 		add	r0, r3, r0, lsl #1
 978              	.LVL69:
 403:src/menu.c    ****   }
 979              		.loc 1 403 24 view .LVU277
 980 0028 0124     		movs	r4, #1
 403:src/menu.c    ****   }
 981              		.loc 1 403 17 view .LVU278
 982 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 403:src/menu.c    ****   }
 983              		.loc 1 403 24 view .LVU279
 984 002c 04FA01F1 		lsl	r1, r4, r1
 985              	.LVL70:
 403:src/menu.c    ****   }
 986              		.loc 1 403 17 view .LVU280
 987 0030 1943     		orrs	r1, r1, r3
 988 0032 8154     		strb	r1, [r0, r2]
 989              	.LBE70:
 990              	.LBE72:
 991              		.loc 1 408 1 view .LVU281
 992 0034 5DF8044B 		ldr	r4, [sp], #4
 993              		.cfi_restore 4
 994              		.cfi_def_cfa_offset 0
 995 0038 7047     		bx	lr
 996              	.LVL71:
 997              	.L86:
 998              		.loc 1 408 1 view .LVU282
 999 003a 7047     		bx	lr
 1000              	.L91:
 1001              		.align	2
 1002              	.L90:
 1003 003c 00000000 		.word	.LANCHOR0
 1004              		.cfi_endproc
 1005              	.LFE12:
 1007              		.section	.text.display_menu,"ax",%progbits
 1008              		.align	1
 1009              		.p2align 2,,3
 1010              		.global	display_menu
 1011              		.syntax unified
ARM GAS  /tmp/cc8tUJXt.s 			page 30


 1012              		.thumb
 1013              		.thumb_func
 1014              		.fpu fpv4-sp-d16
 1016              	display_menu:
 1017              	.LVL72:
 1018              	.LFB13:
 409:src/menu.c    **** 
 410:src/menu.c    **** 
 411:src/menu.c    **** void display_menu (int current_menu) {
 1019              		.loc 1 411 38 is_stmt 1 view -0
 1020              		.cfi_startproc
 1021              		@ args = 0, pretend = 0, frame = 0
 1022              		@ frame_needed = 0, uses_anonymous_args = 0
 412:src/menu.c    ****   int len = 0;
 1023              		.loc 1 412 3 view .LVU284
 413:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1024              		.loc 1 413 3 view .LVU285
 411:src/menu.c    ****   int len = 0;
 1025              		.loc 1 411 38 is_stmt 0 view .LVU286
 1026 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1027              		.cfi_def_cfa_offset 36
 1028              		.cfi_offset 4, -36
 1029              		.cfi_offset 5, -32
 1030              		.cfi_offset 6, -28
 1031              		.cfi_offset 7, -24
 1032              		.cfi_offset 8, -20
 1033              		.cfi_offset 9, -16
 1034              		.cfi_offset 10, -12
 1035              		.cfi_offset 11, -8
 1036              		.cfi_offset 14, -4
 1037 0004 83B0     		sub	sp, sp, #12
 1038              		.cfi_def_cfa_offset 48
 1039              		.loc 1 413 3 view .LVU287
 1040 0006 0024     		movs	r4, #0
 1041 0008 404F     		ldr	r7, .L110
 1042 000a 0094     		str	r4, [sp]
 1043 000c 3423     		movs	r3, #52
 1044 000e 4FF4C872 		mov	r2, #400
 1045 0012 BC21     		movs	r1, #188
 411:src/menu.c    ****   int len = 0;
 1046              		.loc 1 411 38 view .LVU288
 1047 0014 0646     		mov	r6, r0
 1048              		.loc 1 413 3 view .LVU289
 1049 0016 2046     		mov	r0, r4
 1050              	.LVL73:
 1051              		.loc 1 413 3 view .LVU290
 1052 0018 B847     		blx	r7
 1053              	.LVL74:
 414:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1054              		.loc 1 414 3 is_stmt 1 view .LVU291
 1055 001a 3D4D     		ldr	r5, .L110+4
 1056 001c FF23     		movs	r3, #255
 1057 001e 0093     		str	r3, [sp]
 1058 0020 4FF4C872 		mov	r2, #400
 1059 0024 0123     		movs	r3, #1
 1060 0026 BC21     		movs	r1, #188
 1061 0028 2046     		mov	r0, r4
ARM GAS  /tmp/cc8tUJXt.s 			page 31


 1062 002a B847     		blx	r7
 1063              	.LVL75:
 415:src/menu.c    ****   //Clear previous menu
 416:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1064              		.loc 1 416 3 view .LVU292
 1065              	.LBB73:
 1066              		.loc 1 416 8 view .LVU293
 1067              		.loc 1 416 21 view .LVU294
 417:src/menu.c    ****     mdots[col][0] = 0;
 1068              		.loc 1 417 19 is_stmt 0 view .LVU295
 1069 002c 2246     		mov	r2, r4
 1070 002e 05F5C871 		add	r1, r5, #400
 1071              	.LBE73:
 414:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1072              		.loc 1 414 3 view .LVU296
 1073 0032 2B46     		mov	r3, r5
 1074              	.LVL76:
 1075              	.L93:
 1076              	.LBB74:
 1077              		.loc 1 417 5 is_stmt 1 discriminator 3 view .LVU297
 1078              		.loc 1 417 19 is_stmt 0 discriminator 3 view .LVU298
 1079 0034 1A70     		strb	r2, [r3]
 418:src/menu.c    ****     mdots[col][1] = 0;
 1080              		.loc 1 418 5 is_stmt 1 discriminator 3 view .LVU299
 1081              		.loc 1 418 19 is_stmt 0 discriminator 3 view .LVU300
 1082 0036 5A70     		strb	r2, [r3, #1]
 416:src/menu.c    ****     mdots[col][0] = 0;
 1083              		.loc 1 416 32 is_stmt 1 discriminator 3 view .LVU301
 416:src/menu.c    ****     mdots[col][0] = 0;
 1084              		.loc 1 416 21 discriminator 3 view .LVU302
 1085 0038 0233     		adds	r3, r3, #2
 416:src/menu.c    ****     mdots[col][0] = 0;
 1086              		.loc 1 416 3 is_stmt 0 discriminator 3 view .LVU303
 1087 003a 9942     		cmp	r1, r3
 1088 003c FAD1     		bne	.L93
 1089 003e 354B     		ldr	r3, .L110+8
 1090 0040 D022     		movs	r2, #208
 1091 0042 02FB0636 		mla	r6, r2, r6, r3
 1092              	.LVL77:
 416:src/menu.c    ****     mdots[col][0] = 0;
 1093              		.loc 1 416 3 discriminator 3 view .LVU304
 1094 0046 2036     		adds	r6, r6, #32
 416:src/menu.c    ****     mdots[col][0] = 0;
 1095              		.loc 1 416 3 view .LVU305
 1096 0048 0024     		movs	r4, #0
 1097              	.LVL78:
 1098              	.L94:
 416:src/menu.c    ****     mdots[col][0] = 0;
 1099              		.loc 1 416 3 view .LVU306
 1100              	.LBE74:
 1101              	.LBB75:
 419:src/menu.c    ****   }
 420:src/menu.c    **** 
 421:src/menu.c    ****   // Draw menu items
 422:src/menu.c    ****   // 
 423:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 424:src/menu.c    ****     /*
ARM GAS  /tmp/cc8tUJXt.s 			page 32


 425:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 426:src/menu.c    ****     */
 427:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 428:src/menu.c    ****     // Unshifted first
 429:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small fo
 1102              		.loc 1 429 5 is_stmt 1 view .LVU307
 1103              		.loc 1 429 11 is_stmt 0 view .LVU308
 1104 004a 0021     		movs	r1, #0
 1105 004c 3046     		mov	r0, r6
 1106 004e FFF7FEFF 		bl	pixel_length
 1107              	.LVL79:
 430:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 )
 1108              		.loc 1 430 5 is_stmt 1 view .LVU309
 1109              		.loc 1 430 87 is_stmt 0 view .LVU310
 1110 0052 C0F12000 		rsb	r0, r0, #32
 1111              	.LVL80:
 1112              		.loc 1 430 93 view .LVU311
 1113 0056 00EBD070 		add	r0, r0, r0, lsr #31
 1114              		.loc 1 430 5 view .LVU312
 1115 005a 04EB6001 		add	r1, r4, r0, asr #1
 1116 005e 0022     		movs	r2, #0
 1117 0060 3046     		mov	r0, r6
 1118 0062 06F10807 		add	r7, r6, #8
 1119 0066 FFF7FEFF 		bl	set_menu_label.constprop.0
 1120              	.LVL81:
 431:src/menu.c    ****     // Now shifted ...	
 432:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small font
 1121              		.loc 1 432 5 is_stmt 1 view .LVU313
 1122              		.loc 1 432 11 is_stmt 0 view .LVU314
 1123 006a 0021     		movs	r1, #0
 1124 006c 3846     		mov	r0, r7
 1125 006e FFF7FEFF 		bl	pixel_length
 1126              	.LVL82:
 433:src/menu.c    ****     len = item*32 + (32-len)/2;
 1127              		.loc 1 433 5 is_stmt 1 view .LVU315
 1128              		.loc 1 433 24 is_stmt 0 view .LVU316
 1129 0072 C0F12000 		rsb	r0, r0, #32
 1130              	.LVL83:
 1131              		.loc 1 433 29 view .LVU317
 1132 0076 00EBD070 		add	r0, r0, r0, lsr #31
 1133              	.LVL84:
 434:src/menu.c    ****     if (len<0) len = 0;
 1134              		.loc 1 434 5 is_stmt 1 view .LVU318
 433:src/menu.c    ****     len = item*32 + (32-len)/2;
 1135              		.loc 1 433 9 is_stmt 0 view .LVU319
 1136 007a 04EB6001 		add	r1, r4, r0, asr #1
 1137              	.LVL85:
 433:src/menu.c    ****     len = item*32 + (32-len)/2;
 1138              		.loc 1 433 9 view .LVU320
 1139 007e C729     		cmp	r1, #199
 1140 0080 A8BF     		it	ge
 1141 0082 C721     		movge	r1, #199
 1142              	.LVL86:
 435:src/menu.c    ****     if (len>199) len = 199;
 436:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 1143              		.loc 1 436 5 is_stmt 1 view .LVU321
 1144 0084 21EAE171 		bic	r1, r1, r1, asr #31
ARM GAS  /tmp/cc8tUJXt.s 			page 33


 1145              	.LVL87:
 1146              		.loc 1 436 5 is_stmt 0 view .LVU322
 1147 0088 3846     		mov	r0, r7
 1148 008a 2034     		adds	r4, r4, #32
 1149 008c 0122     		movs	r2, #1
 1150 008e FFF7FEFF 		bl	set_menu_label.constprop.0
 1151              	.LVL88:
 423:src/menu.c    ****     /*
 1152              		.loc 1 423 32 is_stmt 1 view .LVU323
 423:src/menu.c    ****     /*
 1153              		.loc 1 423 22 view .LVU324
 423:src/menu.c    ****     /*
 1154              		.loc 1 423 3 is_stmt 0 view .LVU325
 1155 0092 C02C     		cmp	r4, #192
 1156 0094 06F12006 		add	r6, r6, #32
 1157 0098 D7D1     		bne	.L94
 1158 009a 1F4E     		ldr	r6, .L110+12
 1159              	.LBE75:
 1160              	.LBB76:
 1161              	.LBB77:
 437:src/menu.c    ****   }
 438:src/menu.c    **** 
 439:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 440:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 441:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 442:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 443:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1162              		.loc 1 443 2 view .LVU326
 1163 009c DFF86C90 		ldr	r9, .L110
 1164 00a0 C5F1040A 		rsb	r10, r5, #4
 1165 00a4 06F5C47B 		add	fp, r6, #392
 1166              	.LBE77:
 1167              	.LBE76:
 1168              	.LBB79:
 423:src/menu.c    ****     /*
 1169              		.loc 1 423 3 view .LVU327
 1170 00a8 771E     		subs	r7, r6, #1
 1171              	.LBE79:
 1172              	.LBB80:
 1173              	.LBB78:
 1174              		.loc 1 443 2 view .LVU328
 1175 00aa 4FF0FF08 		mov	r8, #255
 1176              	.L95:
 1177              	.LVL89:
 440:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1178              		.loc 1 440 23 is_stmt 1 view .LVU329
 1179 00ae 0AEB0705 		add	r5, r10, r7
 440:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1180              		.loc 1 440 14 is_stmt 0 view .LVU330
 1181 00b2 0024     		movs	r4, #0
 1182              	.LVL90:
 1183              	.L98:
 441:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1184              		.loc 1 441 7 is_stmt 1 view .LVU331
 1185              		.loc 1 443 2 view .LVU332
 441:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1186              		.loc 1 441 22 is_stmt 0 view .LVU333
ARM GAS  /tmp/cc8tUJXt.s 			page 34


 1187 00b4 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 441:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1188              		.loc 1 441 40 view .LVU334
 1189 00b8 2241     		asrs	r2, r2, r4
 1190              		.loc 1 443 2 view .LVU335
 1191 00ba A4EB8401 		sub	r1, r4, r4, lsl #2
 1192 00be 0323     		movs	r3, #3
 441:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1193              		.loc 1 441 10 view .LVU336
 1194 00c0 12F0010F 		tst	r2, #1
 1195              		.loc 1 443 2 view .LVU337
 1196 00c4 01F1E901 		add	r1, r1, #233
 1197 00c8 1A46     		mov	r2, r3
 1198 00ca 2846     		mov	r0, r5
 441:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1199              		.loc 1 441 10 view .LVU338
 1200 00cc 02D0     		beq	.L96
 1201              		.loc 1 443 2 view .LVU339
 1202 00ce CDF80080 		str	r8, [sp]
 1203 00d2 C847     		blx	r9
 1204              	.LVL91:
 1205              	.L96:
 444:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1206              		.loc 1 444 7 is_stmt 1 view .LVU340
 445:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 446:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1207              		.loc 1 446 2 view .LVU341
 444:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1208              		.loc 1 444 22 is_stmt 0 view .LVU342
 1209 00d4 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 444:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1210              		.loc 1 444 40 view .LVU343
 1211 00d6 2241     		asrs	r2, r2, r4
 1212              		.loc 1 446 2 view .LVU344
 1213 00d8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1214 00dc 0323     		movs	r3, #3
 444:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1215              		.loc 1 444 10 view .LVU345
 1216 00de 12F0010F 		tst	r2, #1
 1217              		.loc 1 446 2 view .LVU346
 1218 00e2 01F1D001 		add	r1, r1, #208
 1219 00e6 1A46     		mov	r2, r3
 1220 00e8 04F10104 		add	r4, r4, #1
 1221              	.LVL92:
 1222              		.loc 1 446 2 view .LVU347
 1223 00ec 2846     		mov	r0, r5
 444:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1224              		.loc 1 444 10 view .LVU348
 1225 00ee 02D0     		beq	.L97
 1226              		.loc 1 446 2 view .LVU349
 1227 00f0 CDF80080 		str	r8, [sp]
 1228 00f4 C847     		blx	r9
 1229              	.LVL93:
 1230              	.L97:
 440:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1231              		.loc 1 440 32 is_stmt 1 discriminator 2 view .LVU350
 440:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
ARM GAS  /tmp/cc8tUJXt.s 			page 35


 1232              		.loc 1 440 23 discriminator 2 view .LVU351
 440:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1233              		.loc 1 440 5 is_stmt 0 discriminator 2 view .LVU352
 1234 00f6 062C     		cmp	r4, #6
 1235 00f8 DCD1     		bne	.L98
 1236              	.LBE78:
 439:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1237              		.loc 1 439 32 is_stmt 1 discriminator 2 view .LVU353
 439:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1238              		.loc 1 439 21 discriminator 2 view .LVU354
 1239 00fa 0236     		adds	r6, r6, #2
 439:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1240              		.loc 1 439 3 is_stmt 0 discriminator 2 view .LVU355
 1241 00fc B345     		cmp	fp, r6
 1242 00fe 07F10207 		add	r7, r7, #2
 1243 0102 D4D1     		bne	.L95
 1244              	.LBE80:
 447:src/menu.c    ****     }
 448:src/menu.c    ****   }
 449:src/menu.c    **** }
 1245              		.loc 1 449 1 view .LVU356
 1246 0104 03B0     		add	sp, sp, #12
 1247              		.cfi_def_cfa_offset 36
 1248              		@ sp needed
 1249 0106 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1250              	.LVL94:
 1251              	.L111:
 1252              		.loc 1 449 1 view .LVU357
 1253 010a 00BF     		.align	2
 1254              	.L110:
 1255 010c 3D020008 		.word	134218301
 1256 0110 00000000 		.word	.LANCHOR0
 1257 0114 00000000 		.word	.LANCHOR4
 1258 0118 01000000 		.word	.LANCHOR0+1
 1259              		.cfi_endproc
 1260              	.LFE13:
 1262              		.section	.text.display_current_menu,"ax",%progbits
 1263              		.align	1
 1264              		.p2align 2,,3
 1265              		.global	display_current_menu
 1266              		.syntax unified
 1267              		.thumb
 1268              		.thumb_func
 1269              		.fpu fpv4-sp-d16
 1271              	display_current_menu:
 1272              	.LFB9:
 110:src/menu.c    ****   display_menu (current_menu);
 1273              		.loc 1 110 30 is_stmt 1 view -0
 1274              		.cfi_startproc
 1275              		@ args = 0, pretend = 0, frame = 0
 1276              		@ frame_needed = 0, uses_anonymous_args = 0
 1277              		@ link register save eliminated.
 111:src/menu.c    **** }
 1278              		.loc 1 111 3 view .LVU359
 1279 0000 014B     		ldr	r3, .L113
 1280 0002 1868     		ldr	r0, [r3]
 1281 0004 FFF7FEBF 		b	display_menu
ARM GAS  /tmp/cc8tUJXt.s 			page 36


 1282              	.LVL95:
 1283              	.L114:
 1284              		.align	2
 1285              	.L113:
 1286 0008 00000000 		.word	.LANCHOR1
 1287              		.cfi_endproc
 1288              	.LFE9:
 1290              		.section	.text.all_menu_dots,"ax",%progbits
 1291              		.align	1
 1292              		.p2align 2,,3
 1293              		.global	all_menu_dots
 1294              		.syntax unified
 1295              		.thumb
 1296              		.thumb_func
 1297              		.fpu fpv4-sp-d16
 1299              	all_menu_dots:
 1300              	.LFB14:
 450:src/menu.c    **** 
 451:src/menu.c    **** void all_menu_dots () {
 1301              		.loc 1 451 23 view -0
 1302              		.cfi_startproc
 1303              		@ args = 0, pretend = 0, frame = 0
 1304              		@ frame_needed = 0, uses_anonymous_args = 0
 452:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1305              		.loc 1 452 3 view .LVU361
 1306              	.LBB81:
 1307              		.loc 1 452 8 view .LVU362
 1308              	.LVL96:
 1309              		.loc 1 452 21 view .LVU363
 1310              	.LBE81:
 451:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1311              		.loc 1 451 23 is_stmt 0 view .LVU364
 1312 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1313              		.cfi_def_cfa_offset 20
 1314              		.cfi_offset 4, -20
 1315              		.cfi_offset 5, -16
 1316              		.cfi_offset 6, -12
 1317              		.cfi_offset 7, -8
 1318              		.cfi_offset 14, -4
 1319              	.LBB85:
 1320              	.LBB82:
 453:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 454:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1321              		.loc 1 454 2 view .LVU365
 1322 0002 0D4E     		ldr	r6, .L121
 1323              	.LBE82:
 1324              	.LBE85:
 451:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1325              		.loc 1 451 23 view .LVU366
 1326 0004 83B0     		sub	sp, sp, #12
 1327              		.cfi_def_cfa_offset 32
 451:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1328              		.loc 1 451 23 view .LVU367
 1329 0006 0025     		movs	r5, #0
 1330              	.LBB86:
 1331              	.LBB83:
 1332              		.loc 1 454 2 view .LVU368
ARM GAS  /tmp/cc8tUJXt.s 			page 37


 1333 0008 FF27     		movs	r7, #255
 1334              	.LVL97:
 1335              	.L116:
 453:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1336              		.loc 1 453 23 is_stmt 1 view .LVU369
 1337              	.LBE83:
 1338              	.LBE86:
 451:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1339              		.loc 1 451 23 is_stmt 0 view .LVU370
 1340 000a E924     		movs	r4, #233
 1341              	.LVL98:
 1342              	.L117:
 1343              	.LBB87:
 1344              	.LBB84:
 1345              		.loc 1 454 2 is_stmt 1 discriminator 3 view .LVU371
 1346 000c 0323     		movs	r3, #3
 1347 000e 1A46     		mov	r2, r3
 1348 0010 2146     		mov	r1, r4
 1349 0012 2846     		mov	r0, r5
 1350 0014 0097     		str	r7, [sp]
 1351 0016 B047     		blx	r6
 1352              	.LVL99:
 455:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1353              		.loc 1 455 2 discriminator 3 view .LVU372
 1354 0018 0323     		movs	r3, #3
 1355 001a A4F11901 		sub	r1, r4, #25
 1356 001e 0097     		str	r7, [sp]
 1357 0020 1A46     		mov	r2, r3
 1358 0022 2846     		mov	r0, r5
 1359 0024 033C     		subs	r4, r4, #3
 1360 0026 B047     		blx	r6
 1361              	.LVL100:
 453:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1362              		.loc 1 453 32 discriminator 3 view .LVU373
 453:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1363              		.loc 1 453 23 discriminator 3 view .LVU374
 453:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1364              		.loc 1 453 5 is_stmt 0 discriminator 3 view .LVU375
 1365 0028 D72C     		cmp	r4, #215
 1366 002a EFD1     		bne	.L117
 1367              	.LBE84:
 452:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1368              		.loc 1 452 32 is_stmt 1 discriminator 2 view .LVU376
 452:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1369              		.loc 1 452 21 discriminator 2 view .LVU377
 1370 002c 0235     		adds	r5, r5, #2
 452:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1371              		.loc 1 452 3 is_stmt 0 discriminator 2 view .LVU378
 1372 002e B5F5C87F 		cmp	r5, #400
 1373 0032 EAD1     		bne	.L116
 1374              	.LBE87:
 456:src/menu.c    ****     }
 457:src/menu.c    ****   }
 458:src/menu.c    **** }  
 1375              		.loc 1 458 1 view .LVU379
 1376 0034 03B0     		add	sp, sp, #12
 1377              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/cc8tUJXt.s 			page 38


 1378              		@ sp needed
 1379 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1380              	.L122:
 1381              		.align	2
 1382              	.L121:
 1383 0038 3D020008 		.word	134218301
 1384              		.cfi_endproc
 1385              	.LFE14:
 1387              		.section	.text.shutdown,"ax",%progbits
 1388              		.align	1
 1389              		.p2align 2,,3
 1390              		.global	shutdown
 1391              		.syntax unified
 1392              		.thumb
 1393              		.thumb_func
 1394              		.fpu fpv4-sp-d16
 1396              	shutdown:
 1397              	.LFB16:
 1398              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
ARM GAS  /tmp/cc8tUJXt.s 			page 39


  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  46:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  47:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  48:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  49:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  50:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  51:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  52:src/console.c **** 
  53:src/console.c **** static struct _ndmap remap (const int c) {
  54:src/console.c **** 
  55:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  56:src/console.c **** 
  57:src/console.c **** #include "keytran.c"
  58:src/console.c **** 
  59:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  60:src/console.c **** 
  61:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  62:src/console.c **** 
  63:src/console.c ****   if (c == 44 ) {
  64:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  65:src/console.c ****     return sshot;
  66:src/console.c ****   }
  67:src/console.c ****   
  68:src/console.c ****   if ( get_alpha_state() ) {
  69:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  70:src/console.c ****       switch (cur_shift()) { 
  71:src/console.c ****       case SHIFT_N:
  72:src/console.c **** 	return mapping_none[c]; // N -> F
  73:src/console.c **** 	break;
  74:src/console.c ****       case SHIFT_F:
  75:src/console.c **** 	return mapping_fshift[c]; // F -> G
  76:src/console.c **** 	break;
  77:src/console.c ****       case SHIFT_G:
  78:src/console.c **** 	return h_shift; // G -> H
  79:src/console.c **** 	break;
  80:src/console.c ****       case SHIFT_H:
  81:src/console.c **** 	return h_shift; // H -> N
  82:src/console.c ****       default:
  83:src/console.c **** 	return no_change;
  84:src/console.c ****       }
  85:src/console.c ****     }
  86:src/console.c ****     return mapping_alpha [c];
  87:src/console.c ****   }
  88:src/console.c ****     
  89:src/console.c ****   switch (c) {
  90:src/console.c ****   case KEY_F1:
  91:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
  92:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
  93:src/console.c ****   case KEY_F2:
  94:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
ARM GAS  /tmp/cc8tUJXt.s 			page 40


  96:src/console.c ****   case KEY_F3:
  97:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
  99:src/console.c ****   case KEY_F4:
 100:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 102:src/console.c ****   case KEY_F5:
 103:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 105:src/console.c ****   case KEY_F6:
 106:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 108:src/console.c ****   }
 109:src/console.c ****   
 110:src/console.c ****   switch (cur_shift()) {
 111:src/console.c ****   case SHIFT_N:    
 112:src/console.c ****     return mapping_none[c];
 113:src/console.c ****     break;
 114:src/console.c ****   case SHIFT_F:
 115:src/console.c ****     return mapping_fshift[c];
 116:src/console.c ****     break;
 117:src/console.c ****   case SHIFT_G:
 118:src/console.c ****     return mapping_gshift[c];
 119:src/console.c ****     break;
 120:src/console.c ****   default:
 121:src/console.c ****     return no_change;
 122:src/console.c ****   }
 123:src/console.c **** }
 124:src/console.c **** 
 125:src/console.c **** #endif
 126:src/console.c **** 
 127:src/console.c **** void shutdown( void )
 128:src/console.c **** {
 1399              		.loc 2 128 1 is_stmt 1 view -0
 1400              		.cfi_startproc
 1401              		@ args = 0, pretend = 0, frame = 0
 1402              		@ frame_needed = 0, uses_anonymous_args = 0
 1403              		@ link register save eliminated.
 129:src/console.c **** #ifndef DM42
 130:src/console.c ****   checksum_all();
 131:src/console.c ****   setuptty( 1 );
 132:src/console.c ****   save_statefile( NULL );
 133:src/console.c ****   exit( 0 );
 134:src/console.c **** #else
 135:src/console.c ****   //  save_ram_file(0);
 136:src/console.c ****   SET_ST(STAT_PGM_END);
 1404              		.loc 2 136 3 view .LVU381
 1405 0000 024A     		ldr	r2, .L124
 1406 0002 1368     		ldr	r3, [r2]
 1407 0004 43F40073 		orr	r3, r3, #512
 1408 0008 1360     		str	r3, [r2]
 137:src/console.c **** #endif
 138:src/console.c **** }
 1409              		.loc 2 138 1 is_stmt 0 view .LVU382
 1410 000a 7047     		bx	lr
 1411              	.L125:
 1412              		.align	2
ARM GAS  /tmp/cc8tUJXt.s 			page 41


 1413              	.L124:
 1414 000c 00200010 		.word	268443648
 1415              		.cfi_endproc
 1416              	.LFE16:
 1418              		.section	.text.is_key_pressed,"ax",%progbits
 1419              		.align	1
 1420              		.p2align 2,,3
 1421              		.global	is_key_pressed
 1422              		.syntax unified
 1423              		.thumb
 1424              		.thumb_func
 1425              		.fpu fpv4-sp-d16
 1427              	is_key_pressed:
 1428              	.LFB17:
 139:src/console.c **** 
 140:src/console.c **** 
 141:src/console.c **** /*
 142:src/console.c ****  *  Dummies
 143:src/console.c ****  */
 144:src/console.c **** int is_key_pressed(void) 
 145:src/console.c **** {
 1429              		.loc 2 145 1 is_stmt 1 view -0
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 0
 1432              		@ frame_needed = 0, uses_anonymous_args = 0
 146:src/console.c **** #ifdef DM42
 147:src/console.c ****   return !key_empty();
 1433              		.loc 2 147 3 view .LVU384
 145:src/console.c **** #ifdef DM42
 1434              		.loc 2 145 1 is_stmt 0 view .LVU385
 1435 0000 08B5     		push	{r3, lr}
 1436              		.cfi_def_cfa_offset 8
 1437              		.cfi_offset 3, -8
 1438              		.cfi_offset 14, -4
 1439              		.loc 2 147 11 view .LVU386
 1440 0002 034B     		ldr	r3, .L128
 1441 0004 9847     		blx	r3
 1442              	.LVL101:
 148:src/console.c **** #else
 149:src/console.c ****   return 0;
 150:src/console.c **** #endif
 151:src/console.c **** }
 1443              		.loc 2 151 1 view .LVU387
 1444 0006 B0FA80F0 		clz	r0, r0
 1445 000a 4009     		lsrs	r0, r0, #5
 1446 000c 08BD     		pop	{r3, pc}
 1447              	.L129:
 1448 000e 00BF     		.align	2
 1449              	.L128:
 1450 0010 7D030008 		.word	134218621
 1451              		.cfi_endproc
 1452              	.LFE17:
 1454              		.section	.text.get_key,"ax",%progbits
 1455              		.align	1
 1456              		.p2align 2,,3
 1457              		.global	get_key
 1458              		.syntax unified
ARM GAS  /tmp/cc8tUJXt.s 			page 42


 1459              		.thumb
 1460              		.thumb_func
 1461              		.fpu fpv4-sp-d16
 1463              	get_key:
 1464              	.LFB18:
 152:src/console.c **** 
 153:src/console.c **** int get_key(void)
 154:src/console.c **** {
 1465              		.loc 2 154 1 is_stmt 1 view -0
 1466              		.cfi_startproc
 1467              		@ args = 0, pretend = 0, frame = 0
 1468              		@ frame_needed = 0, uses_anonymous_args = 0
 1469              		@ link register save eliminated.
 155:src/console.c ****   #ifdef DM42
 156:src/console.c ****   return key_pop();
 1470              		.loc 2 156 3 view .LVU389
 1471              		.loc 2 156 10 is_stmt 0 view .LVU390
 1472 0000 004B     		ldr	r3, .L131
 1473 0002 1847     		bx	r3
 1474              	.LVL102:
 1475              	.L132:
 1476              		.align	2
 1477              	.L131:
 1478 0004 89030008 		.word	134218633
 1479              		.cfi_endproc
 1480              	.LFE18:
 1482              		.section	.text.put_key,"ax",%progbits
 1483              		.align	1
 1484              		.p2align 2,,3
 1485              		.global	put_key
 1486              		.syntax unified
 1487              		.thumb
 1488              		.thumb_func
 1489              		.fpu fpv4-sp-d16
 1491              	put_key:
 1492              	.LVL103:
 1493              	.LFB19:
 157:src/console.c ****   #else
 158:src/console.c ****   return 0;
 159:src/console.c ****   #endif
 160:src/console.c **** }
 161:src/console.c **** 
 162:src/console.c **** int put_key( int k )
 163:src/console.c **** {
 1494              		.loc 2 163 1 is_stmt 1 view -0
 1495              		.cfi_startproc
 1496              		@ args = 0, pretend = 0, frame = 0
 1497              		@ frame_needed = 0, uses_anonymous_args = 0
 1498              		@ link register save eliminated.
 164:src/console.c ****   #ifdef DM42
 165:src/console.c ****   return key_push(k);
 1499              		.loc 2 165 3 view .LVU392
 1500              		.loc 2 165 10 is_stmt 0 view .LVU393
 1501 0000 004B     		ldr	r3, .L134
 1502 0002 1847     		bx	r3
 1503              	.LVL104:
 1504              	.L135:
ARM GAS  /tmp/cc8tUJXt.s 			page 43


 1505              		.loc 2 165 10 view .LVU394
 1506              		.align	2
 1507              	.L134:
 1508 0004 81030008 		.word	134218625
 1509              		.cfi_endproc
 1510              	.LFE19:
 1512              		.section	.text.shift_down,"ax",%progbits
 1513              		.align	1
 1514              		.p2align 2,,3
 1515              		.global	shift_down
 1516              		.syntax unified
 1517              		.thumb
 1518              		.thumb_func
 1519              		.fpu fpv4-sp-d16
 1521              	shift_down:
 1522              	.LFB20:
 166:src/console.c ****   #else
 167:src/console.c ****   return k;
 168:src/console.c ****   #endif
 169:src/console.c **** }
 170:src/console.c **** 
 171:src/console.c **** enum shifts shift_down(void)
 172:src/console.c **** {
 1523              		.loc 2 172 1 is_stmt 1 view -0
 1524              		.cfi_startproc
 1525              		@ args = 0, pretend = 0, frame = 0
 1526              		@ frame_needed = 0, uses_anonymous_args = 0
 1527              		@ link register save eliminated.
 173:src/console.c **** 	return SHIFT_N;
 1528              		.loc 2 173 2 view .LVU396
 174:src/console.c **** }
 1529              		.loc 2 174 1 is_stmt 0 view .LVU397
 1530 0000 0020     		movs	r0, #0
 1531 0002 7047     		bx	lr
 1532              		.cfi_endproc
 1533              	.LFE20:
 1535              		.section	.text.start_key_timer,"ax",%progbits
 1536              		.align	1
 1537              		.p2align 2,,3
 1538              		.global	start_key_timer
 1539              		.syntax unified
 1540              		.thumb
 1541              		.thumb_func
 1542              		.fpu fpv4-sp-d16
 1544              	start_key_timer:
 1545              	.LFB21:
 175:src/console.c **** 
 176:src/console.c **** #ifndef DM42   // No serial operations for DM42
 177:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 178:src/console.c **** /*
 179:src/console.c ****  *  Open a COM port for transmission
 180:src/console.c ****  */
 181:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 182:src/console.c **** {
 183:src/console.c **** 	return 0;
 184:src/console.c **** }
 185:src/console.c **** 
ARM GAS  /tmp/cc8tUJXt.s 			page 44


 186:src/console.c **** 
 187:src/console.c **** /*
 188:src/console.c ****  *  Close the COM port after transmission is complete
 189:src/console.c ****  */
 190:src/console.c **** extern void close_port( void )
 191:src/console.c **** {
 192:src/console.c **** }
 193:src/console.c **** 
 194:src/console.c **** 
 195:src/console.c **** /*
 196:src/console.c ****  *  Output a single byte to the serial
 197:src/console.c ****  */
 198:src/console.c **** void put_byte( unsigned char byte )
 199:src/console.c **** {
 200:src/console.c **** 	report_err(ERR_PROG_BAD);
 201:src/console.c **** }
 202:src/console.c **** 
 203:src/console.c **** 
 204:src/console.c **** /*
 205:src/console.c ****  *  Force buffer flush
 206:src/console.c ****  */
 207:src/console.c **** void flush_comm( void )
 208:src/console.c **** {
 209:src/console.c **** }
 210:src/console.c **** 
 211:src/console.c **** #endif
 212:src/console.c **** #endif
 213:src/console.c **** 
 214:src/console.c **** 
 215:src/console.c **** /*
 216:src/console.c ****  *  Main loop
 217:src/console.c ****  */
 218:src/console.c **** #ifdef DM42
 219:src/console.c **** void start_key_timer (void);
 220:src/console.c **** long int keyticks (void);
 221:src/console.c **** void moveto (int line, int x);
 222:src/console.c **** 
 223:src/console.c **** static long int start_ticks;
 224:src/console.c **** 
 225:src/console.c **** void start_key_timer() {
 1546              		.loc 2 225 24 is_stmt 1 view -0
 1547              		.cfi_startproc
 1548              		@ args = 0, pretend = 0, frame = 0
 1549              		@ frame_needed = 0, uses_anonymous_args = 0
 226:src/console.c ****     start_ticks = get_rtc_ticks();
 1550              		.loc 2 226 5 view .LVU399
 225:src/console.c ****     start_ticks = get_rtc_ticks();
 1551              		.loc 2 225 24 is_stmt 0 view .LVU400
 1552 0000 08B5     		push	{r3, lr}
 1553              		.cfi_def_cfa_offset 8
 1554              		.cfi_offset 3, -8
 1555              		.cfi_offset 14, -4
 1556              		.loc 2 226 19 view .LVU401
 1557 0002 024B     		ldr	r3, .L139
 1558 0004 9847     		blx	r3
 1559              	.LVL105:
 1560              		.loc 2 226 17 view .LVU402
ARM GAS  /tmp/cc8tUJXt.s 			page 45


 1561 0006 024B     		ldr	r3, .L139+4
 1562 0008 1860     		str	r0, [r3]
 227:src/console.c **** }
 1563              		.loc 2 227 1 view .LVU403
 1564 000a 08BD     		pop	{r3, pc}
 1565              	.L140:
 1566              		.align	2
 1567              	.L139:
 1568 000c B9040008 		.word	134218937
 1569 0010 00000000 		.word	.LANCHOR5
 1570              		.cfi_endproc
 1571              	.LFE21:
 1573              		.section	.text.keyticks,"ax",%progbits
 1574              		.align	1
 1575              		.p2align 2,,3
 1576              		.global	keyticks
 1577              		.syntax unified
 1578              		.thumb
 1579              		.thumb_func
 1580              		.fpu fpv4-sp-d16
 1582              	keyticks:
 1583              	.LFB22:
 228:src/console.c **** 
 229:src/console.c **** long int keyticks () {
 1584              		.loc 2 229 22 is_stmt 1 view -0
 1585              		.cfi_startproc
 1586              		@ args = 0, pretend = 0, frame = 0
 1587              		@ frame_needed = 0, uses_anonymous_args = 0
 230:src/console.c ****   long int i;
 1588              		.loc 2 230 3 view .LVU405
 231:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1589              		.loc 2 231 3 view .LVU406
 229:src/console.c ****   long int i;
 1590              		.loc 2 229 22 is_stmt 0 view .LVU407
 1591 0000 08B5     		push	{r3, lr}
 1592              		.cfi_def_cfa_offset 8
 1593              		.cfi_offset 3, -8
 1594              		.cfi_offset 14, -4
 1595              		.loc 2 231 8 view .LVU408
 1596 0002 054B     		ldr	r3, .L143
 1597 0004 9847     		blx	r3
 1598              	.LVL106:
 232:src/console.c ****   return i >> 8;
 1599              		.loc 2 232 3 is_stmt 1 view .LVU409
 231:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1600              		.loc 2 231 24 is_stmt 0 view .LVU410
 1601 0006 054B     		ldr	r3, .L143+4
 1602 0008 1B68     		ldr	r3, [r3]
 1603 000a C01A     		subs	r0, r0, r3
 1604              	.LVL107:
 231:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1605              		.loc 2 231 38 view .LVU411
 1606 000c 00EB8000 		add	r0, r0, r0, lsl #2
 233:src/console.c **** }
 1607              		.loc 2 233 1 view .LVU412
 1608 0010 40F3D710 		sbfx	r0, r0, #7, #24
 1609 0014 08BD     		pop	{r3, pc}
ARM GAS  /tmp/cc8tUJXt.s 			page 46


 1610              	.L144:
 1611 0016 00BF     		.align	2
 1612              	.L143:
 1613 0018 B9040008 		.word	134218937
 1614 001c 00000000 		.word	.LANCHOR5
 1615              		.cfi_endproc
 1616              	.LFE22:
 1618              		.section	.text.moveto,"ax",%progbits
 1619              		.align	1
 1620              		.p2align 2,,3
 1621              		.global	moveto
 1622              		.syntax unified
 1623              		.thumb
 1624              		.thumb_func
 1625              		.fpu fpv4-sp-d16
 1627              	moveto:
 1628              	.LVL108:
 1629              	.LFB23:
 234:src/console.c **** 
 235:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 236:src/console.c **** char print_string[22];
 237:src/console.c **** int n_p = 0;
 238:src/console.c **** 
 239:src/console.c **** 
 240:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 1630              		.loc 2 240 30 is_stmt 1 view -0
 1631              		.cfi_startproc
 1632              		@ args = 0, pretend = 0, frame = 0
 1633              		@ frame_needed = 0, uses_anonymous_args = 0
 241:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1634              		.loc 2 241 3 view .LVU414
 240:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1635              		.loc 2 240 30 is_stmt 0 view .LVU415
 1636 0000 70B5     		push	{r4, r5, r6, lr}
 1637              		.cfi_def_cfa_offset 16
 1638              		.cfi_offset 4, -16
 1639              		.cfi_offset 5, -12
 1640              		.cfi_offset 6, -8
 1641              		.cfi_offset 14, -4
 1642              		.loc 2 241 3 view .LVU416
 1643 0002 0A4D     		ldr	r5, .L147
 1644 0004 0A4B     		ldr	r3, .L147+4
 240:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1645              		.loc 2 240 30 view .LVU417
 1646 0006 0246     		mov	r2, r0
 1647 0008 0C46     		mov	r4, r1
 1648              		.loc 2 241 3 view .LVU418
 1649 000a A86B     		ldr	r0, [r5, #56]
 1650              	.LVL109:
 1651              		.loc 2 241 3 view .LVU419
 1652 000c 511E     		subs	r1, r2, #1
 1653              	.LVL110:
 1654              		.loc 2 241 3 view .LVU420
 1655 000e 9847     		blx	r3
 1656              	.LVL111:
 242:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1657              		.loc 2 242 3 is_stmt 1 view .LVU421
ARM GAS  /tmp/cc8tUJXt.s 			page 47


 1658 0010 A86B     		ldr	r0, [r5, #56]
 1659 0012 084B     		ldr	r3, .L147+8
 1660              		.loc 2 242 33 is_stmt 0 view .LVU422
 1661 0014 0168     		ldr	r1, [r0]
 1662              		.loc 2 242 3 view .LVU423
 1663 0016 B0F90620 		ldrsh	r2, [r0, #6]
 1664              		.loc 2 242 33 view .LVU424
 1665 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 1666              		.loc 2 242 43 view .LVU425
 1667 001c 013C     		subs	r4, r4, #1
 1668              	.LVL112:
 1669              		.loc 2 242 40 view .LVU426
 1670 001e 04FB01F1 		mul	r1, r4, r1
 1671              		.loc 2 242 3 view .LVU427
 1672 0022 1431     		adds	r1, r1, #20
 243:src/console.c **** }
 1673              		.loc 2 243 1 view .LVU428
 1674 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1675              		.cfi_restore 14
 1676              		.cfi_restore 6
 1677              		.cfi_restore 5
 1678              		.cfi_restore 4
 1679              		.cfi_def_cfa_offset 0
 1680              	.LVL113:
 242:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1681              		.loc 2 242 3 view .LVU429
 1682 0028 1847     		bx	r3	@ indirect register sibling call
 1683              	.LVL114:
 1684              	.L148:
 1685 002a 00BF     		.align	2
 1686              	.L147:
 1687 002c 00200010 		.word	268443648
 1688 0030 69020008 		.word	134218345
 1689 0034 6D020008 		.word	134218349
 1690              		.cfi_endproc
 1691              	.LFE23:
 1693              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 1694              		.align	2
 1695              	.LC9:
 1696 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 1696      673A2025 
 1696      34692C25 
 1696      346900
 1697              		.section	.text.print_debug,"ax",%progbits
 1698              		.align	1
 1699              		.p2align 2,,3
 1700              		.global	print_debug
 1701              		.syntax unified
 1702              		.thumb
 1703              		.thumb_func
 1704              		.fpu fpv4-sp-d16
 1706              	print_debug:
 1707              	.LVL115:
 1708              	.LFB24:
 244:src/console.c **** 
 245:src/console.c **** void print_debug (int i, int j) {
 1709              		.loc 2 245 33 is_stmt 1 view -0
ARM GAS  /tmp/cc8tUJXt.s 			page 48


 1710              		.cfi_startproc
 1711              		@ args = 0, pretend = 0, frame = 8
 1712              		@ frame_needed = 0, uses_anonymous_args = 0
 246:src/console.c ****   strcpy( print_string, spaces );
 1713              		.loc 2 246 3 view .LVU431
 245:src/console.c ****   strcpy( print_string, spaces );
 1714              		.loc 2 245 33 is_stmt 0 view .LVU432
 1715 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1716              		.cfi_def_cfa_offset 24
 1717              		.cfi_offset 4, -24
 1718              		.cfi_offset 5, -20
 1719              		.cfi_offset 6, -16
 1720              		.cfi_offset 7, -12
 1721              		.cfi_offset 8, -8
 1722              		.cfi_offset 14, -4
 1723              		.loc 2 246 3 view .LVU433
 1724 0004 164C     		ldr	r4, .L151
 1725 0006 174F     		ldr	r7, .L151+4
 247:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 248:src/console.c ****   moveto (3, 1);
 249:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1726              		.loc 2 249 3 view .LVU434
 1727 0008 174E     		ldr	r6, .L151+8
 1728 000a 184D     		ldr	r5, .L151+12
 250:src/console.c ****   lcd_refresh();
 1729              		.loc 2 250 3 view .LVU435
 1730 000c DFF86880 		ldr	r8, .L151+24
 245:src/console.c ****   strcpy( print_string, spaces );
 1731              		.loc 2 245 33 view .LVU436
 1732 0010 82B0     		sub	sp, sp, #8
 1733              		.cfi_def_cfa_offset 32
 245:src/console.c ****   strcpy( print_string, spaces );
 1734              		.loc 2 245 33 view .LVU437
 1735 0012 0190     		str	r0, [sp, #4]
 1736 0014 0091     		str	r1, [sp]
 246:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1737              		.loc 2 246 3 view .LVU438
 1738 0016 2046     		mov	r0, r4
 1739              	.LVL116:
 246:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1740              		.loc 2 246 3 view .LVU439
 1741 0018 3946     		mov	r1, r7
 1742              	.LVL117:
 246:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1743              		.loc 2 246 3 view .LVU440
 1744 001a FFF7FEFF 		bl	strcpy
 1745              	.LVL118:
 247:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1746              		.loc 2 247 3 is_stmt 1 view .LVU441
 1747 001e DDE90032 		ldrd	r3, r2, [sp]
 1748 0022 1349     		ldr	r1, .L151+16
 1749 0024 2046     		mov	r0, r4
 1750 0026 FFF7FEFF 		bl	sprintf
 1751              	.LVL119:
 248:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1752              		.loc 2 248 3 view .LVU442
 1753 002a 0121     		movs	r1, #1
ARM GAS  /tmp/cc8tUJXt.s 			page 49


 1754 002c 0320     		movs	r0, #3
 1755 002e FFF7FEFF 		bl	moveto
 1756              	.LVL120:
 249:src/console.c ****   lcd_refresh();
 1757              		.loc 2 249 3 view .LVU443
 1758 0032 2146     		mov	r1, r4
 1759 0034 B06B     		ldr	r0, [r6, #56]
 1760 0036 A847     		blx	r5
 1761              	.LVL121:
 1762              		.loc 2 250 3 view .LVU444
 1763 0038 C047     		blx	r8
 1764              	.LVL122:
 251:src/console.c ****   sys_delay (100);
 1765              		.loc 2 251 3 view .LVU445
 1766 003a 0E4B     		ldr	r3, .L151+20
 1767 003c 6420     		movs	r0, #100
 1768 003e 9847     		blx	r3
 1769              	.LVL123:
 252:src/console.c ****   /* wait_for_key_press(); */
 253:src/console.c ****   //  key_pop_all();
 254:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 255:src/console.c ****   // key_pop_all();
 256:src/console.c ****   strcpy( print_string, spaces );
 1770              		.loc 2 256 3 view .LVU446
 1771 0040 3946     		mov	r1, r7
 1772 0042 2046     		mov	r0, r4
 1773 0044 FFF7FEFF 		bl	strcpy
 1774              	.LVL124:
 257:src/console.c ****   moveto (3, 1);
 1775              		.loc 2 257 3 view .LVU447
 1776 0048 0121     		movs	r1, #1
 1777 004a 0320     		movs	r0, #3
 1778 004c FFF7FEFF 		bl	moveto
 1779              	.LVL125:
 258:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1780              		.loc 2 258 3 view .LVU448
 1781 0050 B06B     		ldr	r0, [r6, #56]
 1782 0052 2146     		mov	r1, r4
 1783 0054 A847     		blx	r5
 1784              	.LVL126:
 259:src/console.c ****   lcd_refresh();
 1785              		.loc 2 259 3 view .LVU449
 1786 0056 4346     		mov	r3, r8
 260:src/console.c ****   // while (key_empty()<=0);; // wait for release
 261:src/console.c ****   // key_pop_all();
 262:src/console.c **** }
 1787              		.loc 2 262 1 is_stmt 0 view .LVU450
 1788 0058 02B0     		add	sp, sp, #8
 1789              		.cfi_def_cfa_offset 24
 1790              	.LVL127:
 1791              		.loc 2 262 1 view .LVU451
 1792              		@ sp needed
 1793 005a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1794              		.cfi_restore 14
 1795              		.cfi_restore 8
 1796              		.cfi_restore 7
 1797              		.cfi_restore 6
ARM GAS  /tmp/cc8tUJXt.s 			page 50


 1798              		.cfi_restore 5
 1799              		.cfi_restore 4
 1800              		.cfi_def_cfa_offset 0
 1801              	.LVL128:
 259:src/console.c ****   lcd_refresh();
 1802              		.loc 2 259 3 view .LVU452
 1803 005e 1847     		bx	r3	@ indirect register sibling call
 1804              	.LVL129:
 1805              	.L152:
 1806              		.align	2
 1807              	.L151:
 1808 0060 00000000 		.word	print_string
 1809 0064 00000000 		.word	.LANCHOR6
 1810 0068 00200010 		.word	268443648
 1811 006c B1020008 		.word	134218417
 1812 0070 00000000 		.word	.LC9
 1813 0074 05040008 		.word	134218757
 1814 0078 31020008 		.word	134218289
 1815              		.cfi_endproc
 1816              	.LFE24:
 1818              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 1819              		.align	2
 1820              	.LC10:
 1821 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 1821      692C2531 
 1821      337300
 1822              		.section	.text.print_debug2,"ax",%progbits
 1823              		.align	1
 1824              		.p2align 2,,3
 1825              		.global	print_debug2
 1826              		.syntax unified
 1827              		.thumb
 1828              		.thumb_func
 1829              		.fpu fpv4-sp-d16
 1831              	print_debug2:
 1832              	.LVL130:
 1833              	.LFB25:
 263:src/console.c **** 
 264:src/console.c **** void print_debug2 (int i, char* j) {
 1834              		.loc 2 264 36 is_stmt 1 view -0
 1835              		.cfi_startproc
 1836              		@ args = 0, pretend = 0, frame = 8
 1837              		@ frame_needed = 0, uses_anonymous_args = 0
 265:src/console.c ****   strcpy( print_string, spaces );
 1838              		.loc 2 265 3 view .LVU454
 264:src/console.c ****   strcpy( print_string, spaces );
 1839              		.loc 2 264 36 is_stmt 0 view .LVU455
 1840 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1841              		.cfi_def_cfa_offset 24
 1842              		.cfi_offset 4, -24
 1843              		.cfi_offset 5, -20
 1844              		.cfi_offset 6, -16
 1845              		.cfi_offset 7, -12
 1846              		.cfi_offset 8, -8
 1847              		.cfi_offset 14, -4
 1848              		.loc 2 265 3 view .LVU456
 1849 0004 174C     		ldr	r4, .L155
ARM GAS  /tmp/cc8tUJXt.s 			page 51


 1850 0006 184F     		ldr	r7, .L155+4
 266:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 267:src/console.c ****   moveto (3, 1);
 268:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1851              		.loc 2 268 3 view .LVU457
 1852 0008 184E     		ldr	r6, .L155+8
 1853 000a 194D     		ldr	r5, .L155+12
 269:src/console.c ****   lcd_refresh();
 1854              		.loc 2 269 3 view .LVU458
 1855 000c DFF86C80 		ldr	r8, .L155+24
 264:src/console.c ****   strcpy( print_string, spaces );
 1856              		.loc 2 264 36 view .LVU459
 1857 0010 82B0     		sub	sp, sp, #8
 1858              		.cfi_def_cfa_offset 32
 264:src/console.c ****   strcpy( print_string, spaces );
 1859              		.loc 2 264 36 view .LVU460
 1860 0012 0190     		str	r0, [sp, #4]
 1861 0014 0091     		str	r1, [sp]
 265:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1862              		.loc 2 265 3 view .LVU461
 1863 0016 2046     		mov	r0, r4
 1864              	.LVL131:
 265:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1865              		.loc 2 265 3 view .LVU462
 1866 0018 3946     		mov	r1, r7
 1867              	.LVL132:
 265:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1868              		.loc 2 265 3 view .LVU463
 1869 001a FFF7FEFF 		bl	strcpy
 1870              	.LVL133:
 266:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1871              		.loc 2 266 3 is_stmt 1 view .LVU464
 1872 001e DDE90032 		ldrd	r3, r2, [sp]
 1873 0022 1449     		ldr	r1, .L155+16
 1874 0024 2046     		mov	r0, r4
 1875 0026 FFF7FEFF 		bl	sprintf
 1876              	.LVL134:
 267:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1877              		.loc 2 267 3 view .LVU465
 1878 002a 0121     		movs	r1, #1
 1879 002c 0320     		movs	r0, #3
 1880 002e FFF7FEFF 		bl	moveto
 1881              	.LVL135:
 268:src/console.c ****   lcd_refresh();
 1882              		.loc 2 268 3 view .LVU466
 1883 0032 2146     		mov	r1, r4
 1884 0034 B06B     		ldr	r0, [r6, #56]
 1885 0036 A847     		blx	r5
 1886              	.LVL136:
 1887              		.loc 2 269 3 view .LVU467
 1888 0038 C047     		blx	r8
 1889              	.LVL137:
 270:src/console.c ****   sys_delay (2500);
 1890              		.loc 2 270 3 view .LVU468
 1891 003a 0F4B     		ldr	r3, .L155+20
 1892 003c 40F6C410 		movw	r0, #2500
 1893 0040 9847     		blx	r3
ARM GAS  /tmp/cc8tUJXt.s 			page 52


 1894              	.LVL138:
 271:src/console.c ****   /* wait_for_key_press(); */
 272:src/console.c ****   //  key_pop_all();
 273:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 274:src/console.c ****   // key_pop_all();
 275:src/console.c ****   strcpy( print_string, spaces );
 1895              		.loc 2 275 3 view .LVU469
 1896 0042 3946     		mov	r1, r7
 1897 0044 2046     		mov	r0, r4
 1898 0046 FFF7FEFF 		bl	strcpy
 1899              	.LVL139:
 276:src/console.c ****   moveto (3, 1);
 1900              		.loc 2 276 3 view .LVU470
 1901 004a 0121     		movs	r1, #1
 1902 004c 0320     		movs	r0, #3
 1903 004e FFF7FEFF 		bl	moveto
 1904              	.LVL140:
 277:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1905              		.loc 2 277 3 view .LVU471
 1906 0052 B06B     		ldr	r0, [r6, #56]
 1907 0054 2146     		mov	r1, r4
 1908 0056 A847     		blx	r5
 1909              	.LVL141:
 278:src/console.c ****   lcd_refresh();
 1910              		.loc 2 278 3 view .LVU472
 1911 0058 4346     		mov	r3, r8
 279:src/console.c ****   // while (key_empty()<=0);; // wait for release
 280:src/console.c ****   // key_pop_all();
 281:src/console.c **** }
 1912              		.loc 2 281 1 is_stmt 0 view .LVU473
 1913 005a 02B0     		add	sp, sp, #8
 1914              		.cfi_def_cfa_offset 24
 1915              	.LVL142:
 1916              		.loc 2 281 1 view .LVU474
 1917              		@ sp needed
 1918 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1919              		.cfi_restore 14
 1920              		.cfi_restore 8
 1921              		.cfi_restore 7
 1922              		.cfi_restore 6
 1923              		.cfi_restore 5
 1924              		.cfi_restore 4
 1925              		.cfi_def_cfa_offset 0
 1926              	.LVL143:
 278:src/console.c ****   lcd_refresh();
 1927              		.loc 2 278 3 view .LVU475
 1928 0060 1847     		bx	r3	@ indirect register sibling call
 1929              	.LVL144:
 1930              	.L156:
 1931 0062 00BF     		.align	2
 1932              	.L155:
 1933 0064 00000000 		.word	print_string
 1934 0068 00000000 		.word	.LANCHOR6
 1935 006c 00200010 		.word	268443648
 1936 0070 B1020008 		.word	134218417
 1937 0074 00000000 		.word	.LC10
 1938 0078 05040008 		.word	134218757
ARM GAS  /tmp/cc8tUJXt.s 			page 53


 1939 007c 31020008 		.word	134218289
 1940              		.cfi_endproc
 1941              	.LFE25:
 1943              		.section	.text.do_now,"ax",%progbits
 1944              		.align	1
 1945              		.p2align 2,,3
 1946              		.global	do_now
 1947              		.syntax unified
 1948              		.thumb
 1949              		.thumb_func
 1950              		.fpu fpv4-sp-d16
 1952              	do_now:
 1953              	.LVL145:
 1954              	.LFB26:
 282:src/console.c **** 
 283:src/console.c **** void do_now (int key, int shift) {
 1955              		.loc 2 283 34 is_stmt 1 view -0
 1956              		.cfi_startproc
 1957              		@ args = 0, pretend = 0, frame = 8
 1958              		@ frame_needed = 0, uses_anonymous_args = 0
 1959              		@ link register save eliminated.
 284:src/console.c ****   struct _ndmap temp;
 1960              		.loc 2 284 3 view .LVU477
 285:src/console.c ****   temp.key_34s = key;
 1961              		.loc 2 285 3 view .LVU478
 283:src/console.c ****   struct _ndmap temp;
 1962              		.loc 2 283 34 is_stmt 0 view .LVU479
 1963 0000 82B0     		sub	sp, sp, #8
 1964              		.cfi_def_cfa_offset 8
 286:src/console.c ****   temp.shift = shift;
 287:src/console.c ****   process_keycode_with_shift (temp);
 1965              		.loc 2 287 3 view .LVU480
 1966 0002 02AB     		add	r3, sp, #8
 285:src/console.c ****   temp.shift = shift;
 1967              		.loc 2 285 16 view .LVU481
 1968 0004 8DF80000 		strb	r0, [sp]
 286:src/console.c ****   temp.shift = shift;
 1969              		.loc 2 286 3 is_stmt 1 view .LVU482
 286:src/console.c ****   temp.shift = shift;
 1970              		.loc 2 286 14 is_stmt 0 view .LVU483
 1971 0008 0191     		str	r1, [sp, #4]
 1972              		.loc 2 287 3 is_stmt 1 view .LVU484
 1973 000a 13E90300 		ldmdb	r3, {r0, r1}
 1974              	.LVL146:
 288:src/console.c **** }
 1975              		.loc 2 288 1 is_stmt 0 view .LVU485
 1976 000e 02B0     		add	sp, sp, #8
 1977              		.cfi_def_cfa_offset 0
 1978              		@ sp needed
 287:src/console.c **** }
 1979              		.loc 2 287 3 view .LVU486
 1980 0010 FFF7FEBF 		b	process_keycode_with_shift
 1981              	.LVL147:
 287:src/console.c **** }
 1982              		.loc 2 287 3 view .LVU487
 1983              		.cfi_endproc
 1984              	.LFE26:
ARM GAS  /tmp/cc8tUJXt.s 			page 54


 1986              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 1987              		.align	2
 1988              	.LC11:
 1989 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 1989      502F7770 
 1989      3334735F 
 1989      68656C70 
 1989      2E68746D 
 1990              		.section	.text.do_multi,"ax",%progbits
 1991              		.align	1
 1992              		.p2align 2,,3
 1993              		.global	do_multi
 1994              		.syntax unified
 1995              		.thumb
 1996              		.thumb_func
 1997              		.fpu fpv4-sp-d16
 1999              	do_multi:
 2000              	.LVL148:
 2001              	.LFB27:
 289:src/console.c **** 
 290:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 2002              		.loc 2 290 42 is_stmt 1 view -0
 2003              		.cfi_startproc
 2004              		@ args = 0, pretend = 0, frame = 16
 2005              		@ frame_needed = 0, uses_anonymous_args = 0
 2006              		.loc 2 290 42 is_stmt 0 view .LVU489
 2007 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2008              		.cfi_def_cfa_offset 24
 2009              		.cfi_offset 4, -24
 2010              		.cfi_offset 5, -20
 2011              		.cfi_offset 6, -16
 2012              		.cfi_offset 7, -12
 2013              		.cfi_offset 8, -8
 2014              		.cfi_offset 14, -4
 2015 0004 84B0     		sub	sp, sp, #16
 2016              		.cfi_def_cfa_offset 40
 2017              	.LVL149:
 291:src/console.c ****   switch(r.shift) {
 2018              		.loc 2 291 3 is_stmt 1 view .LVU490
 290:src/console.c ****   switch(r.shift) {
 2019              		.loc 2 290 42 is_stmt 0 view .LVU491
 2020 0006 6C46     		mov	r4, sp
 2021 0008 531E     		subs	r3, r2, #1
 2022 000a 84E80600 		stm	r4, {r1, r2}
 2023              	.LVL150:
 290:src/console.c ****   switch(r.shift) {
 2024              		.loc 2 290 42 view .LVU492
 2025 000e 0546     		mov	r5, r0
 2026 0010 0C2B     		cmp	r3, #12
 2027 0012 0FD8     		bhi	.L160
 2028 0014 DFE803F0 		tbb	[pc, r3]
 2029              	.L162:
 2030 0018 15       		.byte	(.L174-.L162)/2
 2031 0019 3D       		.byte	(.L173-.L162)/2
 2032 001a 47       		.byte	(.L172-.L162)/2
 2033 001b 51       		.byte	(.L171-.L162)/2
 2034 001c 5B       		.byte	(.L170-.L162)/2
ARM GAS  /tmp/cc8tUJXt.s 			page 55


 2035 001d 65       		.byte	(.L169-.L162)/2
 2036 001e 6F       		.byte	(.L168-.L162)/2
 2037 001f 79       		.byte	(.L167-.L162)/2
 2038 0020 82       		.byte	(.L166-.L162)/2
 2039 0021 8C       		.byte	(.L165-.L162)/2
 2040 0022 95       		.byte	(.L164-.L162)/2
 2041 0023 9E       		.byte	(.L163-.L162)/2
 2042 0024 07       		.byte	(.L161-.L162)/2
 2043 0025 00       		.p2align 1
 2044              	.L161:
 292:src/console.c ****   case LASTX: // Last x via RCL L
 293:src/console.c ****     do_now (K11, 0); // RCL
 294:src/console.c ****     do_now (K_RELEASE,0); // release
 295:src/console.c ****     do_now (K15,0); // TAN key
 296:src/console.c ****     r.key_34s = K_RELEASE;
 297:src/console.c ****     r.shift = 0; // set up for release;
 298:src/console.c ****     break;
 299:src/console.c ****   case ONSTO: // flash_backup()
 300:src/console.c ****     flash_backup(OP_SAVE);
 301:src/console.c ****     r = no_key;
 302:src/console.c ****     break;
 303:src/console.c ****   case ONRCL: // flash_restore()
 304:src/console.c ****     flash_restore(OP_LOAD);
 305:src/console.c ****     r = no_key;
 306:src/console.c ****     break;
 307:src/console.c ****   case WRLIB: // save library file
 308:src/console.c ****     save_lib_file(1);
 309:src/console.c ****     r = no_key;
 310:src/console.c ****     break;
 311:src/console.c ****   case LLIB: // load library file
 312:src/console.c ****     load_lib_file(1);
 313:src/console.c ****     r = no_key;
 314:src/console.c ****     break;
 315:src/console.c ****   case WRTST: // save state file
 316:src/console.c ****     save_ram_file(1);
 317:src/console.c ****     r = no_key;
 318:src/console.c ****     break;
 319:src/console.c ****   case LDST:
 320:src/console.c ****     load_ram_file(1);
 321:src/console.c ****     r = no_key;
 322:src/console.c ****     break;
 323:src/console.c ****   case LDPRG:
 324:src/console.c ****     load_prog_file();
 325:src/console.c ****     r = no_key;
 326:src/console.c ****     break;
 327:src/console.c ****   case SVPRG:
 328:src/console.c ****     save_prog_file();
 329:src/console.c ****     r = no_key;
 330:src/console.c ****     break;
 331:src/console.c ****   case HELP:
 332:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 333:src/console.c ****     r = no_key;
 334:src/console.c ****     break;
 335:src/console.c ****   case DOTS:
 336:src/console.c ****     do_all_dots();
 337:src/console.c ****     r = no_key;
 338:src/console.c ****     break;
ARM GAS  /tmp/cc8tUJXt.s 			page 56


 339:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 340:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 341:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 342:src/console.c ****     r = no_key;
 343:src/console.c ****     break;
 344:src/console.c ****   case DEFMEN:
 345:src/console.c ****     toggle_default_menu();
 2045              		.loc 2 345 5 is_stmt 1 view .LVU493
 2046              	.LBB88:
 2047              	.LBI88:
 100:src/menu.c    ****   if (current_menu == default_menu) {
 2048              		.loc 1 100 6 view .LVU494
 2049              	.LBB89:
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2050              		.loc 1 101 3 view .LVU495
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2051              		.loc 1 101 20 is_stmt 0 view .LVU496
 2052 0026 5A49     		ldr	r1, .L179
 2053 0028 5A4A     		ldr	r2, .L179+4
 2054 002a 0868     		ldr	r0, [r1]
 2055              	.LVL151:
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2056              		.loc 1 101 6 view .LVU497
 2057 002c 1368     		ldr	r3, [r2]
 2058 002e 8342     		cmp	r3, r0
 2059 0030 00F0A980 		beq	.L178
 2060              	.L160:
 2061              	.LBE89:
 2062              	.LBE88:
 346:src/console.c ****     r = no_key;
 347:src/console.c ****     break;
 348:src/console.c ****   default:
 349:src/console.c ****     r = no_key;
 2063              		.loc 2 349 5 is_stmt 1 view .LVU498
 2064              		.loc 2 349 7 is_stmt 0 view .LVU499
 2065 0034 584B     		ldr	r3, .L179+8
 2066 0036 93E80300 		ldm	r3, {r0, r1}
 2067 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2068              	.LVL152:
 2069              		.loc 2 349 7 view .LVU500
 2070 003c 84E80300 		stm	r4, {r0, r1}
 2071 0040 1CE0     		b	.L175
 2072              	.LVL153:
 2073              	.L174:
 293:src/console.c ****     do_now (K_RELEASE,0); // release
 2074              		.loc 2 293 5 is_stmt 1 view .LVU501
 2075              	.LBB91:
 2076              	.LBI91:
 283:src/console.c ****   struct _ndmap temp;
 2077              		.loc 2 283 6 view .LVU502
 2078              	.LBB92:
 284:src/console.c ****   temp.key_34s = key;
 2079              		.loc 2 284 3 view .LVU503
 285:src/console.c ****   temp.shift = shift;
 2080              		.loc 2 285 3 view .LVU504
 285:src/console.c ****   temp.shift = shift;
 2081              		.loc 2 285 16 is_stmt 0 view .LVU505
ARM GAS  /tmp/cc8tUJXt.s 			page 57


 2082 0042 0723     		movs	r3, #7
 286:src/console.c ****   process_keycode_with_shift (temp);
 2083              		.loc 2 286 14 view .LVU506
 2084 0044 0026     		movs	r6, #0
 285:src/console.c ****   temp.shift = shift;
 2085              		.loc 2 285 16 view .LVU507
 2086 0046 8DF80830 		strb	r3, [sp, #8]
 286:src/console.c ****   process_keycode_with_shift (temp);
 2087              		.loc 2 286 3 is_stmt 1 view .LVU508
 287:src/console.c **** }
 2088              		.loc 2 287 3 is_stmt 0 view .LVU509
 2089 004a 0DF10808 		add	r8, sp, #8
 286:src/console.c ****   process_keycode_with_shift (temp);
 2090              		.loc 2 286 14 view .LVU510
 2091 004e 0396     		str	r6, [sp, #12]
 287:src/console.c **** }
 2092              		.loc 2 287 3 is_stmt 1 view .LVU511
 2093 0050 98E80300 		ldm	r8, {r0, r1}
 2094              	.LVL154:
 287:src/console.c **** }
 2095              		.loc 2 287 3 is_stmt 0 view .LVU512
 2096              	.LBE92:
 2097              	.LBE91:
 2098              	.LBB94:
 2099              	.LBB95:
 285:src/console.c ****   temp.shift = shift;
 2100              		.loc 2 285 16 view .LVU513
 2101 0054 6327     		movs	r7, #99
 2102              	.LBE95:
 2103              	.LBE94:
 2104              	.LBB97:
 2105              	.LBB93:
 287:src/console.c **** }
 2106              		.loc 2 287 3 view .LVU514
 2107 0056 FFF7FEFF 		bl	process_keycode_with_shift
 2108              	.LVL155:
 287:src/console.c **** }
 2109              		.loc 2 287 3 view .LVU515
 2110              	.LBE93:
 2111              	.LBE97:
 294:src/console.c ****     do_now (K15,0); // TAN key
 2112              		.loc 2 294 5 is_stmt 1 view .LVU516
 2113              	.LBB98:
 2114              	.LBI94:
 283:src/console.c ****   struct _ndmap temp;
 2115              		.loc 2 283 6 view .LVU517
 2116              	.LBB96:
 284:src/console.c ****   temp.key_34s = key;
 2117              		.loc 2 284 3 view .LVU518
 285:src/console.c ****   temp.shift = shift;
 2118              		.loc 2 285 3 view .LVU519
 286:src/console.c ****   process_keycode_with_shift (temp);
 2119              		.loc 2 286 14 is_stmt 0 view .LVU520
 2120 005a 0396     		str	r6, [sp, #12]
 285:src/console.c ****   temp.shift = shift;
 2121              		.loc 2 285 16 view .LVU521
 2122 005c 8DF80870 		strb	r7, [sp, #8]
ARM GAS  /tmp/cc8tUJXt.s 			page 58


 286:src/console.c ****   process_keycode_with_shift (temp);
 2123              		.loc 2 286 3 is_stmt 1 view .LVU522
 287:src/console.c **** }
 2124              		.loc 2 287 3 view .LVU523
 2125 0060 98E80300 		ldm	r8, {r0, r1}
 2126 0064 FFF7FEFF 		bl	process_keycode_with_shift
 2127              	.LVL156:
 287:src/console.c **** }
 2128              		.loc 2 287 3 is_stmt 0 view .LVU524
 2129              	.LBE96:
 2130              	.LBE98:
 295:src/console.c ****     r.key_34s = K_RELEASE;
 2131              		.loc 2 295 5 is_stmt 1 view .LVU525
 2132              	.LBB99:
 2133              	.LBI99:
 283:src/console.c ****   struct _ndmap temp;
 2134              		.loc 2 283 6 view .LVU526
 2135              	.LBB100:
 284:src/console.c ****   temp.key_34s = key;
 2136              		.loc 2 284 3 view .LVU527
 285:src/console.c ****   temp.shift = shift;
 2137              		.loc 2 285 3 view .LVU528
 285:src/console.c ****   temp.shift = shift;
 2138              		.loc 2 285 16 is_stmt 0 view .LVU529
 2139 0068 0B23     		movs	r3, #11
 2140 006a 8DF80830 		strb	r3, [sp, #8]
 286:src/console.c ****   process_keycode_with_shift (temp);
 2141              		.loc 2 286 3 is_stmt 1 view .LVU530
 287:src/console.c **** }
 2142              		.loc 2 287 3 view .LVU531
 286:src/console.c ****   process_keycode_with_shift (temp);
 2143              		.loc 2 286 14 is_stmt 0 view .LVU532
 2144 006e 0396     		str	r6, [sp, #12]
 287:src/console.c **** }
 2145              		.loc 2 287 3 view .LVU533
 2146 0070 98E80300 		ldm	r8, {r0, r1}
 2147 0074 FFF7FEFF 		bl	process_keycode_with_shift
 2148              	.LVL157:
 287:src/console.c **** }
 2149              		.loc 2 287 3 view .LVU534
 2150              	.LBE100:
 2151              	.LBE99:
 296:src/console.c ****     r.shift = 0; // set up for release;
 2152              		.loc 2 296 5 is_stmt 1 view .LVU535
 297:src/console.c ****     break;
 2153              		.loc 2 297 5 view .LVU536
 298:src/console.c ****   case ONSTO: // flash_backup()
 2154              		.loc 2 298 5 view .LVU537
 297:src/console.c ****     break;
 2155              		.loc 2 297 13 is_stmt 0 view .LVU538
 2156 0078 3146     		mov	r1, r6
 296:src/console.c ****     r.shift = 0; // set up for release;
 2157              		.loc 2 296 15 view .LVU539
 2158 007a 3B46     		mov	r3, r7
 2159              	.LVL158:
 2160              	.L175:
 350:src/console.c ****   }
ARM GAS  /tmp/cc8tUJXt.s 			page 59


 351:src/console.c ****   return r;
 2161              		.loc 2 351 3 is_stmt 1 view .LVU540
 2162              		.loc 2 351 10 is_stmt 0 view .LVU541
 2163 007c 8DF80030 		strb	r3, [sp]
 2164 0080 0191     		str	r1, [sp, #4]
 2165 0082 94E80300 		ldm	r4, {r0, r1}
 2166              	.LVL159:
 2167              		.loc 2 351 10 view .LVU542
 2168 0086 85E80300 		stm	r5, {r0, r1}
 352:src/console.c **** }
 2169              		.loc 2 352 1 view .LVU543
 2170 008a 2846     		mov	r0, r5
 2171 008c 04B0     		add	sp, sp, #16
 2172              		.cfi_remember_state
 2173              		.cfi_def_cfa_offset 24
 2174              		@ sp needed
 2175 008e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2176              	.LVL160:
 2177              	.L173:
 2178              		.cfi_restore_state
 300:src/console.c ****     r = no_key;
 2179              		.loc 2 300 5 is_stmt 1 view .LVU544
 2180 0092 AD20     		movs	r0, #173
 2181              	.LVL161:
 300:src/console.c ****     r = no_key;
 2182              		.loc 2 300 5 is_stmt 0 view .LVU545
 2183 0094 FFF7FEFF 		bl	flash_backup
 2184              	.LVL162:
 301:src/console.c ****     break;
 2185              		.loc 2 301 5 is_stmt 1 view .LVU546
 301:src/console.c ****     break;
 2186              		.loc 2 301 7 is_stmt 0 view .LVU547
 2187 0098 3F4B     		ldr	r3, .L179+8
 2188 009a 93E80300 		ldm	r3, {r0, r1}
 2189 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2190              	.LVL163:
 302:src/console.c ****   case ONRCL: // flash_restore()
 2191              		.loc 2 302 5 is_stmt 1 view .LVU548
 301:src/console.c ****     break;
 2192              		.loc 2 301 7 is_stmt 0 view .LVU549
 2193 00a0 84E80300 		stm	r4, {r0, r1}
 302:src/console.c ****   case ONRCL: // flash_restore()
 2194              		.loc 2 302 5 view .LVU550
 2195 00a4 EAE7     		b	.L175
 2196              	.LVL164:
 2197              	.L172:
 304:src/console.c ****     r = no_key;
 2198              		.loc 2 304 5 is_stmt 1 view .LVU551
 2199 00a6 AE20     		movs	r0, #174
 2200              	.LVL165:
 304:src/console.c ****     r = no_key;
 2201              		.loc 2 304 5 is_stmt 0 view .LVU552
 2202 00a8 FFF7FEFF 		bl	flash_restore
 2203              	.LVL166:
 305:src/console.c ****     break;
 2204              		.loc 2 305 5 is_stmt 1 view .LVU553
 305:src/console.c ****     break;
ARM GAS  /tmp/cc8tUJXt.s 			page 60


 2205              		.loc 2 305 7 is_stmt 0 view .LVU554
 2206 00ac 3A4B     		ldr	r3, .L179+8
 2207 00ae 93E80300 		ldm	r3, {r0, r1}
 2208 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2209              	.LVL167:
 306:src/console.c ****   case WRLIB: // save library file
 2210              		.loc 2 306 5 is_stmt 1 view .LVU555
 305:src/console.c ****     break;
 2211              		.loc 2 305 7 is_stmt 0 view .LVU556
 2212 00b4 84E80300 		stm	r4, {r0, r1}
 306:src/console.c ****   case WRLIB: // save library file
 2213              		.loc 2 306 5 view .LVU557
 2214 00b8 E0E7     		b	.L175
 2215              	.LVL168:
 2216              	.L171:
 308:src/console.c ****     r = no_key;
 2217              		.loc 2 308 5 is_stmt 1 view .LVU558
 2218 00ba 0120     		movs	r0, #1
 2219              	.LVL169:
 308:src/console.c ****     r = no_key;
 2220              		.loc 2 308 5 is_stmt 0 view .LVU559
 2221 00bc FFF7FEFF 		bl	save_lib_file
 2222              	.LVL170:
 309:src/console.c ****     break;
 2223              		.loc 2 309 5 is_stmt 1 view .LVU560
 309:src/console.c ****     break;
 2224              		.loc 2 309 7 is_stmt 0 view .LVU561
 2225 00c0 354B     		ldr	r3, .L179+8
 2226 00c2 93E80300 		ldm	r3, {r0, r1}
 2227 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2228              	.LVL171:
 310:src/console.c ****   case LLIB: // load library file
 2229              		.loc 2 310 5 is_stmt 1 view .LVU562
 309:src/console.c ****     break;
 2230              		.loc 2 309 7 is_stmt 0 view .LVU563
 2231 00c8 84E80300 		stm	r4, {r0, r1}
 310:src/console.c ****   case LLIB: // load library file
 2232              		.loc 2 310 5 view .LVU564
 2233 00cc D6E7     		b	.L175
 2234              	.LVL172:
 2235              	.L170:
 312:src/console.c ****     r = no_key;
 2236              		.loc 2 312 5 is_stmt 1 view .LVU565
 2237 00ce 0120     		movs	r0, #1
 2238              	.LVL173:
 312:src/console.c ****     r = no_key;
 2239              		.loc 2 312 5 is_stmt 0 view .LVU566
 2240 00d0 FFF7FEFF 		bl	load_lib_file
 2241              	.LVL174:
 313:src/console.c ****     break;
 2242              		.loc 2 313 5 is_stmt 1 view .LVU567
 313:src/console.c ****     break;
 2243              		.loc 2 313 7 is_stmt 0 view .LVU568
 2244 00d4 304B     		ldr	r3, .L179+8
 2245 00d6 93E80300 		ldm	r3, {r0, r1}
 2246 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2247              	.LVL175:
ARM GAS  /tmp/cc8tUJXt.s 			page 61


 314:src/console.c ****   case WRTST: // save state file
 2248              		.loc 2 314 5 is_stmt 1 view .LVU569
 313:src/console.c ****     break;
 2249              		.loc 2 313 7 is_stmt 0 view .LVU570
 2250 00dc 84E80300 		stm	r4, {r0, r1}
 314:src/console.c ****   case WRTST: // save state file
 2251              		.loc 2 314 5 view .LVU571
 2252 00e0 CCE7     		b	.L175
 2253              	.LVL176:
 2254              	.L169:
 316:src/console.c ****     r = no_key;
 2255              		.loc 2 316 5 is_stmt 1 view .LVU572
 2256 00e2 0120     		movs	r0, #1
 2257              	.LVL177:
 316:src/console.c ****     r = no_key;
 2258              		.loc 2 316 5 is_stmt 0 view .LVU573
 2259 00e4 FFF7FEFF 		bl	save_ram_file
 2260              	.LVL178:
 317:src/console.c ****     break;
 2261              		.loc 2 317 5 is_stmt 1 view .LVU574
 317:src/console.c ****     break;
 2262              		.loc 2 317 7 is_stmt 0 view .LVU575
 2263 00e8 2B4B     		ldr	r3, .L179+8
 2264 00ea 93E80300 		ldm	r3, {r0, r1}
 2265 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2266              	.LVL179:
 318:src/console.c ****   case LDST:
 2267              		.loc 2 318 5 is_stmt 1 view .LVU576
 317:src/console.c ****     break;
 2268              		.loc 2 317 7 is_stmt 0 view .LVU577
 2269 00f0 84E80300 		stm	r4, {r0, r1}
 318:src/console.c ****   case LDST:
 2270              		.loc 2 318 5 view .LVU578
 2271 00f4 C2E7     		b	.L175
 2272              	.LVL180:
 2273              	.L168:
 320:src/console.c ****     r = no_key;
 2274              		.loc 2 320 5 is_stmt 1 view .LVU579
 2275 00f6 0120     		movs	r0, #1
 2276              	.LVL181:
 320:src/console.c ****     r = no_key;
 2277              		.loc 2 320 5 is_stmt 0 view .LVU580
 2278 00f8 FFF7FEFF 		bl	load_ram_file
 2279              	.LVL182:
 321:src/console.c ****     break;
 2280              		.loc 2 321 5 is_stmt 1 view .LVU581
 321:src/console.c ****     break;
 2281              		.loc 2 321 7 is_stmt 0 view .LVU582
 2282 00fc 264B     		ldr	r3, .L179+8
 2283 00fe 93E80300 		ldm	r3, {r0, r1}
 2284 0102 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2285              	.LVL183:
 322:src/console.c ****   case LDPRG:
 2286              		.loc 2 322 5 is_stmt 1 view .LVU583
 321:src/console.c ****     break;
 2287              		.loc 2 321 7 is_stmt 0 view .LVU584
 2288 0104 84E80300 		stm	r4, {r0, r1}
ARM GAS  /tmp/cc8tUJXt.s 			page 62


 322:src/console.c ****   case LDPRG:
 2289              		.loc 2 322 5 view .LVU585
 2290 0108 B8E7     		b	.L175
 2291              	.LVL184:
 2292              	.L167:
 324:src/console.c ****     r = no_key;
 2293              		.loc 2 324 5 is_stmt 1 view .LVU586
 2294 010a FFF7FEFF 		bl	load_prog_file
 2295              	.LVL185:
 325:src/console.c ****     break;
 2296              		.loc 2 325 5 view .LVU587
 325:src/console.c ****     break;
 2297              		.loc 2 325 7 is_stmt 0 view .LVU588
 2298 010e 224B     		ldr	r3, .L179+8
 2299 0110 93E80300 		ldm	r3, {r0, r1}
 2300 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2301              	.LVL186:
 326:src/console.c ****   case SVPRG:
 2302              		.loc 2 326 5 is_stmt 1 view .LVU589
 325:src/console.c ****     break;
 2303              		.loc 2 325 7 is_stmt 0 view .LVU590
 2304 0116 84E80300 		stm	r4, {r0, r1}
 326:src/console.c ****   case SVPRG:
 2305              		.loc 2 326 5 view .LVU591
 2306 011a AFE7     		b	.L175
 2307              	.LVL187:
 2308              	.L166:
 332:src/console.c ****     r = no_key;
 2309              		.loc 2 332 5 is_stmt 1 view .LVU592
 2310 011c 1F4B     		ldr	r3, .L179+12
 2311 011e 2048     		ldr	r0, .L179+16
 2312              	.LVL188:
 332:src/console.c ****     r = no_key;
 2313              		.loc 2 332 5 is_stmt 0 view .LVU593
 2314 0120 9847     		blx	r3
 2315              	.LVL189:
 333:src/console.c ****     break;
 2316              		.loc 2 333 5 is_stmt 1 view .LVU594
 333:src/console.c ****     break;
 2317              		.loc 2 333 7 is_stmt 0 view .LVU595
 2318 0122 1D4B     		ldr	r3, .L179+8
 2319 0124 93E80300 		ldm	r3, {r0, r1}
 2320 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2321              	.LVL190:
 334:src/console.c ****   case DOTS:
 2322              		.loc 2 334 5 is_stmt 1 view .LVU596
 333:src/console.c ****     break;
 2323              		.loc 2 333 7 is_stmt 0 view .LVU597
 2324 012a 84E80300 		stm	r4, {r0, r1}
 334:src/console.c ****   case DOTS:
 2325              		.loc 2 334 5 view .LVU598
 2326 012e A5E7     		b	.L175
 2327              	.LVL191:
 2328              	.L165:
 328:src/console.c ****     r = no_key;
 2329              		.loc 2 328 5 is_stmt 1 view .LVU599
 2330 0130 FFF7FEFF 		bl	save_prog_file
ARM GAS  /tmp/cc8tUJXt.s 			page 63


 2331              	.LVL192:
 329:src/console.c ****     break;
 2332              		.loc 2 329 5 view .LVU600
 329:src/console.c ****     break;
 2333              		.loc 2 329 7 is_stmt 0 view .LVU601
 2334 0134 184B     		ldr	r3, .L179+8
 2335 0136 93E80300 		ldm	r3, {r0, r1}
 2336 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2337              	.LVL193:
 330:src/console.c ****   case HELP:
 2338              		.loc 2 330 5 is_stmt 1 view .LVU602
 329:src/console.c ****     break;
 2339              		.loc 2 329 7 is_stmt 0 view .LVU603
 2340 013c 84E80300 		stm	r4, {r0, r1}
 330:src/console.c ****   case HELP:
 2341              		.loc 2 330 5 view .LVU604
 2342 0140 9CE7     		b	.L175
 2343              	.LVL194:
 2344              	.L164:
 336:src/console.c ****     r = no_key;
 2345              		.loc 2 336 5 is_stmt 1 view .LVU605
 2346 0142 FFF7FEFF 		bl	do_all_dots
 2347              	.LVL195:
 337:src/console.c ****     break;
 2348              		.loc 2 337 5 view .LVU606
 337:src/console.c ****     break;
 2349              		.loc 2 337 7 is_stmt 0 view .LVU607
 2350 0146 144B     		ldr	r3, .L179+8
 2351 0148 93E80300 		ldm	r3, {r0, r1}
 2352 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2353              	.LVL196:
 338:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 2354              		.loc 2 338 5 is_stmt 1 view .LVU608
 337:src/console.c ****     break;
 2355              		.loc 2 337 7 is_stmt 0 view .LVU609
 2356 014e 84E80300 		stm	r4, {r0, r1}
 338:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 2357              		.loc 2 338 5 view .LVU610
 2358 0152 93E7     		b	.L175
 2359              	.LVL197:
 2360              	.L163:
 340:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 2361              		.loc 2 340 5 is_stmt 1 view .LVU611
 2362              	.LBB101:
 2363              	.LBI101:
 283:src/console.c ****   struct _ndmap temp;
 2364              		.loc 2 283 6 view .LVU612
 2365              	.LBB102:
 284:src/console.c ****   temp.key_34s = key;
 2366              		.loc 2 284 3 view .LVU613
 285:src/console.c ****   temp.shift = shift;
 2367              		.loc 2 285 3 view .LVU614
 285:src/console.c ****   temp.shift = shift;
 2368              		.loc 2 285 16 is_stmt 0 view .LVU615
 2369 0154 6323     		movs	r3, #99
 286:src/console.c ****   process_keycode_with_shift (temp);
 2370              		.loc 2 286 14 view .LVU616
ARM GAS  /tmp/cc8tUJXt.s 			page 64


 2371 0156 0027     		movs	r7, #0
 285:src/console.c ****   temp.shift = shift;
 2372              		.loc 2 285 16 view .LVU617
 2373 0158 8DF80830 		strb	r3, [sp, #8]
 286:src/console.c ****   process_keycode_with_shift (temp);
 2374              		.loc 2 286 3 is_stmt 1 view .LVU618
 286:src/console.c ****   process_keycode_with_shift (temp);
 2375              		.loc 2 286 14 is_stmt 0 view .LVU619
 2376 015c 0397     		str	r7, [sp, #12]
 287:src/console.c **** }
 2377              		.loc 2 287 3 is_stmt 1 view .LVU620
 2378 015e 02AE     		add	r6, sp, #8
 2379 0160 96E80300 		ldm	r6, {r0, r1}
 2380              	.LVL198:
 287:src/console.c **** }
 2381              		.loc 2 287 3 is_stmt 0 view .LVU621
 2382 0164 FFF7FEFF 		bl	process_keycode_with_shift
 2383              	.LVL199:
 287:src/console.c **** }
 2384              		.loc 2 287 3 view .LVU622
 2385              	.LBE102:
 2386              	.LBE101:
 341:src/console.c ****     r = no_key;
 2387              		.loc 2 341 5 is_stmt 1 view .LVU623
 2388              	.LBB103:
 2389              	.LBI103:
 283:src/console.c ****   struct _ndmap temp;
 2390              		.loc 2 283 6 view .LVU624
 2391              	.LBB104:
 284:src/console.c ****   temp.key_34s = key;
 2392              		.loc 2 284 3 view .LVU625
 285:src/console.c ****   temp.shift = shift;
 2393              		.loc 2 285 3 view .LVU626
 285:src/console.c ****   temp.shift = shift;
 2394              		.loc 2 285 16 is_stmt 0 view .LVU627
 2395 0168 3323     		movs	r3, #51
 2396 016a 8DF80830 		strb	r3, [sp, #8]
 286:src/console.c ****   process_keycode_with_shift (temp);
 2397              		.loc 2 286 3 is_stmt 1 view .LVU628
 287:src/console.c **** }
 2398              		.loc 2 287 3 view .LVU629
 286:src/console.c ****   process_keycode_with_shift (temp);
 2399              		.loc 2 286 14 is_stmt 0 view .LVU630
 2400 016e 0397     		str	r7, [sp, #12]
 287:src/console.c **** }
 2401              		.loc 2 287 3 view .LVU631
 2402 0170 96E80300 		ldm	r6, {r0, r1}
 2403 0174 FFF7FEFF 		bl	process_keycode_with_shift
 2404              	.LVL200:
 287:src/console.c **** }
 2405              		.loc 2 287 3 view .LVU632
 2406              	.LBE104:
 2407              	.LBE103:
 342:src/console.c ****     break;
 2408              		.loc 2 342 5 is_stmt 1 view .LVU633
 342:src/console.c ****     break;
 2409              		.loc 2 342 7 is_stmt 0 view .LVU634
ARM GAS  /tmp/cc8tUJXt.s 			page 65


 2410 0178 074B     		ldr	r3, .L179+8
 2411 017a 93E80300 		ldm	r3, {r0, r1}
 2412 017e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2413              	.LVL201:
 343:src/console.c ****   case DEFMEN:
 2414              		.loc 2 343 5 is_stmt 1 view .LVU635
 342:src/console.c ****     break;
 2415              		.loc 2 342 7 is_stmt 0 view .LVU636
 2416 0180 84E80300 		stm	r4, {r0, r1}
 343:src/console.c ****   case DEFMEN:
 2417              		.loc 2 343 5 view .LVU637
 2418 0184 7AE7     		b	.L175
 2419              	.LVL202:
 2420              	.L178:
 2421              	.LBB105:
 2422              	.LBB90:
 102:src/menu.c    ****   }
 2423              		.loc 1 102 5 is_stmt 1 view .LVU638
 102:src/menu.c    ****   }
 2424              		.loc 1 102 38 is_stmt 0 view .LVU639
 2425 0186 C3F10F03 		rsb	r3, r3, #15
 102:src/menu.c    ****   }
 2426              		.loc 1 102 33 view .LVU640
 2427 018a 0B60     		str	r3, [r1]
 102:src/menu.c    ****   }
 2428              		.loc 1 102 18 view .LVU641
 2429 018c 1360     		str	r3, [r2]
 2430              	.LBE90:
 2431              	.LBE105:
 346:src/console.c ****     break;
 2432              		.loc 2 346 5 is_stmt 1 view .LVU642
 2433 018e 51E7     		b	.L160
 2434              	.L180:
 2435              		.align	2
 2436              	.L179:
 2437 0190 00000000 		.word	.LANCHOR2
 2438 0194 00000000 		.word	.LANCHOR1
 2439 0198 00000000 		.word	.LANCHOR7
 2440 019c 49040008 		.word	134218825
 2441 01a0 00000000 		.word	.LC11
 2442              		.cfi_endproc
 2443              	.LFE27:
 2445              		.section	.text.program_main,"ax",%progbits
 2446              		.align	1
 2447              		.p2align 2,,3
 2448              		.global	program_main
 2449              		.syntax unified
 2450              		.thumb
 2451              		.thumb_func
 2452              		.fpu fpv4-sp-d16
 2454              	program_main:
 2455              	.LFB28:
 353:src/console.c **** 
 354:src/console.c **** void program_main(){
 2456              		.loc 2 354 20 view -0
 2457              		.cfi_startproc
 2458              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/cc8tUJXt.s 			page 66


 2459              		@ frame_needed = 0, uses_anonymous_args = 0
 355:src/console.c ****   int c;
 2460              		.loc 2 355 3 view .LVU644
 356:src/console.c ****   struct _ndmap remapped;
 2461              		.loc 2 356 3 view .LVU645
 357:src/console.c **** 
 358:src/console.c ****   init_mem();
 2462              		.loc 2 358 3 view .LVU646
 354:src/console.c ****   int c;
 2463              		.loc 2 354 20 is_stmt 0 view .LVU647
 2464 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2465              		.cfi_def_cfa_offset 32
 2466              		.cfi_offset 4, -32
 2467              		.cfi_offset 5, -28
 2468              		.cfi_offset 6, -24
 2469              		.cfi_offset 7, -20
 2470              		.cfi_offset 8, -16
 2471              		.cfi_offset 9, -12
 2472              		.cfi_offset 10, -8
 2473              		.cfi_offset 14, -4
 2474 0004 84B0     		sub	sp, sp, #16
 2475              		.cfi_def_cfa_offset 48
 2476              		.loc 2 358 3 view .LVU648
 2477 0006 FFF7FEFF 		bl	init_mem
 2478              	.LVL203:
 359:src/console.c ****   init_RegionTab();
 2479              		.loc 2 359 3 is_stmt 1 view .LVU649
 2480 000a FFF7FEFF 		bl	init_RegionTab
 2481              	.LVL204:
 360:src/console.c ****   init_34s();
 2482              		.loc 2 360 3 view .LVU650
 2483 000e FFF7FEFF 		bl	init_34s
 2484              	.LVL205:
 361:src/console.c ****   State2.flags = 1;  
 2485              		.loc 2 361 3 view .LVU651
 2486              		.loc 2 361 16 is_stmt 0 view .LVU652
 2487 0012 AF4A     		ldr	r2, .L278
 2488 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 2489 0016 43F00103 		orr	r3, r3, #1
 2490 001a 1376     		strb	r3, [r2, #24]
 362:src/console.c ****   check_create_wp34sdir();
 2491              		.loc 2 362 3 is_stmt 1 view .LVU653
 2492 001c FFF7FEFF 		bl	check_create_wp34sdir
 2493              	.LVL206:
 363:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 2494              		.loc 2 363 3 view .LVU654
 2495              		.loc 2 363 8 is_stmt 0 view .LVU655
 2496 0020 0020     		movs	r0, #0
 2497 0022 FFF7FEFF 		bl	load_ram_file
 2498              	.LVL207:
 2499              		.loc 2 363 6 view .LVU656
 2500 0026 08B9     		cbnz	r0, .L182
 2501              		.loc 2 363 26 is_stmt 1 discriminator 1 view .LVU657
 2502              		.loc 2 363 34 is_stmt 0 discriminator 1 view .LVU658
 2503 0028 AA4B     		ldr	r3, .L278+4
 2504 002a 1860     		str	r0, [r3]
 2505              	.L182:
ARM GAS  /tmp/cc8tUJXt.s 			page 67


 364:src/console.c ****   load_backup_file(0);
 2506              		.loc 2 364 3 is_stmt 1 view .LVU659
 365:src/console.c ****   load_lib_file(0);
 366:src/console.c ****   t20->newln = 0;
 2507              		.loc 2 366 3 is_stmt 0 view .LVU660
 2508 002c AA4C     		ldr	r4, .L278+8
 2509              	.LBB121:
 2510              	.LBB122:
 111:src/menu.c    **** }
 2511              		.loc 1 111 3 view .LVU661
 2512 002e AB4E     		ldr	r6, .L278+12
 2513              	.LBE122:
 2514              	.LBE121:
 367:src/console.c ****   t20->lnfill = 0;
 368:src/console.c ****   t20->fixed = 1;
 369:src/console.c ****   t20->xspc = -2;
 370:src/console.c ****   t20->bgfill = 0;
 371:src/console.c ****   run_menu_item_app = run_menu_item;
 372:src/console.c ****   menu_line_str_app = menu_line_str;
 373:src/console.c **** 
 374:src/console.c ****   display();
 375:src/console.c ****   display_current_menu();
 376:src/console.c ****   lcd_refresh();
 377:src/console.c ****   JustDisplayed = 0;
 378:src/console.c ****   /*
 379:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 380:src/console.c ****     Sleeps peacefully while waiting for a key.
 381:src/console.c ****     Handles (in principle!) turning off and on.
 382:src/console.c ****     =================
 383:src/console.c ****     Main event loop
 384:src/console.c ****     =================
 385:src/console.c **** 
 386:src/console.c ****     Status flags:
 387:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 388:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 389:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 390:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 391:src/console.c ****   */
 392:src/console.c ****   for(;;) {
 393:src/console.c **** 
 394:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 395:src/console.c ****       {
 396:src/console.c **** 	CLR_ST(STAT_RUNNING);
 397:src/console.c **** 	sys_sleep();
 398:src/console.c ****       }
 399:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 2515              		.loc 2 399 35 view .LVU662
 2516 0030 AB4F     		ldr	r7, .L278+16
 400:src/console.c ****     {
 401:src/console.c ****       CLR_ST(STAT_RUNNING);
 402:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2517              		.loc 2 402 7 view .LVU663
 2518 0032 DFF82C83 		ldr	r8, .L278+144
 364:src/console.c ****   load_lib_file(0);
 2519              		.loc 2 364 3 view .LVU664
 2520 0036 0020     		movs	r0, #0
 2521 0038 FFF7FEFF 		bl	load_backup_file
ARM GAS  /tmp/cc8tUJXt.s 			page 68


 2522              	.LVL208:
 365:src/console.c ****   t20->newln = 0;
 2523              		.loc 2 365 3 is_stmt 1 view .LVU665
 2524 003c 0020     		movs	r0, #0
 2525 003e FFF7FEFF 		bl	load_lib_file
 2526              	.LVL209:
 366:src/console.c ****   t20->lnfill = 0;
 2527              		.loc 2 366 3 view .LVU666
 2528 0042 236B     		ldr	r3, [r4, #48]
 367:src/console.c ****   t20->fixed = 1;
 2529              		.loc 2 367 3 view .LVU667
 368:src/console.c ****   t20->xspc = -2;
 2530              		.loc 2 368 3 view .LVU668
 371:src/console.c ****   menu_line_str_app = menu_line_str;
 2531              		.loc 2 371 21 is_stmt 0 view .LVU669
 2532 0044 A74A     		ldr	r2, .L278+20
 368:src/console.c ****   t20->xspc = -2;
 2533              		.loc 2 368 14 view .LVU670
 2534 0046 0121     		movs	r1, #1
 2535 0048 1974     		strb	r1, [r3, #16]
 369:src/console.c ****   t20->bgfill = 0;
 2536              		.loc 2 369 3 is_stmt 1 view .LVU671
 370:src/console.c ****   run_menu_item_app = run_menu_item;
 2537              		.loc 2 370 15 is_stmt 0 view .LVU672
 2538 004a 0025     		movs	r5, #0
 369:src/console.c ****   t20->bgfill = 0;
 2539              		.loc 2 369 13 view .LVU673
 2540 004c FE21     		movs	r1, #254
 2541 004e 9973     		strb	r1, [r3, #14]
 370:src/console.c ****   run_menu_item_app = run_menu_item;
 2542              		.loc 2 370 3 is_stmt 1 view .LVU674
 370:src/console.c ****   run_menu_item_app = run_menu_item;
 2543              		.loc 2 370 15 is_stmt 0 view .LVU675
 2544 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 366:src/console.c ****   t20->lnfill = 0;
 2545              		.loc 2 366 14 view .LVU676
 2546 0052 1D75     		strb	r5, [r3, #20]
 371:src/console.c ****   menu_line_str_app = menu_line_str;
 2547              		.loc 2 371 3 is_stmt 1 view .LVU677
 372:src/console.c **** 
 2548              		.loc 2 372 21 is_stmt 0 view .LVU678
 2549 0054 A44B     		ldr	r3, .L278+24
 371:src/console.c ****   menu_line_str_app = menu_line_str;
 2550              		.loc 2 371 21 view .LVU679
 2551 0056 E260     		str	r2, [r4, #12]
 372:src/console.c **** 
 2552              		.loc 2 372 3 is_stmt 1 view .LVU680
 372:src/console.c **** 
 2553              		.loc 2 372 21 is_stmt 0 view .LVU681
 2554 0058 2361     		str	r3, [r4, #16]
 374:src/console.c ****   display_current_menu();
 2555              		.loc 2 374 3 is_stmt 1 view .LVU682
 2556 005a FFF7FEFF 		bl	display
 2557              	.LVL210:
 375:src/console.c ****   lcd_refresh();
 2558              		.loc 2 375 3 view .LVU683
 2559              	.LBB124:
ARM GAS  /tmp/cc8tUJXt.s 			page 69


 2560              	.LBI121:
 110:src/menu.c    ****   display_menu (current_menu);
 2561              		.loc 1 110 6 view .LVU684
 2562              	.LBB123:
 111:src/menu.c    **** }
 2563              		.loc 1 111 3 view .LVU685
 2564 005e 3068     		ldr	r0, [r6]
 2565 0060 FFF7FEFF 		bl	display_menu
 2566              	.LVL211:
 2567              	.LBE123:
 2568              	.LBE124:
 376:src/console.c ****   JustDisplayed = 0;
 2569              		.loc 2 376 3 view .LVU686
 2570 0064 A14B     		ldr	r3, .L278+28
 2571 0066 9847     		blx	r3
 2572              	.LVL212:
 377:src/console.c ****   /*
 2573              		.loc 2 377 3 view .LVU687
 377:src/console.c ****   /*
 2574              		.loc 2 377 17 is_stmt 0 view .LVU688
 2575 0068 A14B     		ldr	r3, .L278+32
 2576 006a 1D60     		str	r5, [r3]
 2577              	.L183:
 392:src/console.c **** 
 2578              		.loc 2 392 3 is_stmt 1 view .LVU689
 394:src/console.c ****       {
 2579              		.loc 2 394 5 view .LVU690
 394:src/console.c ****       {
 2580              		.loc 2 394 10 is_stmt 0 view .LVU691
 2581 006c 2368     		ldr	r3, [r4]
 394:src/console.c ****       {
 2582              		.loc 2 394 8 view .LVU692
 2583 006e 9A05     		lsls	r2, r3, #22
 2584 0070 40F18D80 		bpl	.L184
 2585              	.L263:
 394:src/console.c ****       {
 2586              		.loc 2 394 30 discriminator 1 view .LVU693
 2587 0074 2368     		ldr	r3, [r4]
 394:src/console.c ****       {
 2588              		.loc 2 394 27 discriminator 1 view .LVU694
 2589 0076 5B07     		lsls	r3, r3, #29
 2590 0078 40F18980 		bpl	.L184
 396:src/console.c **** 	sys_sleep();
 2591              		.loc 2 396 2 is_stmt 1 view .LVU695
 2592 007c 2368     		ldr	r3, [r4]
 397:src/console.c ****       }
 2593              		.loc 2 397 2 is_stmt 0 view .LVU696
 2594 007e 9D4A     		ldr	r2, .L278+36
 396:src/console.c **** 	sys_sleep();
 2595              		.loc 2 396 2 view .LVU697
 2596 0080 23F00203 		bic	r3, r3, #2
 2597 0084 2360     		str	r3, [r4]
 397:src/console.c ****       }
 2598              		.loc 2 397 2 is_stmt 1 view .LVU698
 2599 0086 9047     		blx	r2
 2600              	.LVL213:
 2601              	.L185:
ARM GAS  /tmp/cc8tUJXt.s 			page 70


 403:src/console.c ****       sys_sleep();
 404:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 405:src/console.c **** 	key_push (K_HEARTBEAT);
 406:src/console.c **** 	if (Pause > 0) Pause--;
 407:src/console.c ****       }
 408:src/console.c ****       sys_timer_disable(0); // stop timer
 409:src/console.c ****     }
 410:src/console.c ****     
 411:src/console.c ****     // Wakeup in off state or going to sleep
 412:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 2602              		.loc 2 412 5 view .LVU699
 2603              		.loc 2 412 9 is_stmt 0 view .LVU700
 2604 0088 2368     		ldr	r3, [r4]
 2605              		.loc 2 412 8 view .LVU701
 2606 008a 9D05     		lsls	r5, r3, #22
 2607 008c 00F1A680 		bmi	.L191
 2608              	.L264:
 2609              		.loc 2 412 29 discriminator 1 view .LVU702
 2610 0090 2368     		ldr	r3, [r4]
 2611              		.loc 2 412 26 discriminator 1 view .LVU703
 2612 0092 5807     		lsls	r0, r3, #29
 2613 0094 00F1A280 		bmi	.L191
 413:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 414:src/console.c ****         // Going to off mode
 415:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 416:src/console.c ****         draw_power_off_image(1);
 417:src/console.c **** 
 418:src/console.c ****         LCD_power_off(0);
 419:src/console.c ****         SET_ST(STAT_SUSPENDED);
 420:src/console.c ****         SET_ST(STAT_OFF);
 421:src/console.c ****       }
 422:src/console.c ****       // Already in OFF -> just continue to sleep above
 423:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 424:src/console.c ****       // thus reaching the sleep()
 425:src/console.c ****     }
 426:src/console.c **** 
 427:src/console.c ****     // Well, we are woken-up
 428:src/console.c ****     SET_ST(STAT_RUNNING);
 2614              		.loc 2 428 5 is_stmt 1 view .LVU704
 2615 0098 2368     		ldr	r3, [r4]
 2616 009a 43F00203 		orr	r3, r3, #2
 2617 009e 2360     		str	r3, [r4]
 429:src/console.c **** 
 430:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 431:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 2618              		.loc 2 431 5 view .LVU705
 2619 00a0 2368     		ldr	r3, [r4]
 2620 00a2 23F00403 		bic	r3, r3, #4
 2621 00a6 2360     		str	r3, [r4]
 432:src/console.c **** 
 433:src/console.c ****     // Get up from OFF state
 434:src/console.c ****     if ( ST(STAT_OFF) ) {
 2622              		.loc 2 434 5 view .LVU706
 2623              		.loc 2 434 10 is_stmt 0 view .LVU707
 2624 00a8 2368     		ldr	r3, [r4]
 2625              		.loc 2 434 8 view .LVU708
 2626 00aa D906     		lsls	r1, r3, #27
ARM GAS  /tmp/cc8tUJXt.s 			page 71


 2627 00ac 0ED5     		bpl	.L196
 435:src/console.c ****       LCD_power_on();
 2628              		.loc 2 435 7 is_stmt 1 view .LVU709
 2629 00ae 924B     		ldr	r3, .L278+40
 2630 00b0 9847     		blx	r3
 2631              	.LVL214:
 436:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 2632              		.loc 2 436 7 view .LVU710
 2633 00b2 924B     		ldr	r3, .L278+44
 2634 00b4 9847     		blx	r3
 2635              	.LVL215:
 437:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 2636              		.loc 2 437 7 view .LVU711
 2637 00b6 924B     		ldr	r3, .L278+48
 2638 00b8 9847     		blx	r3
 2639              	.LVL216:
 438:src/console.c **** 
 439:src/console.c ****       CLR_ST(STAT_OFF);
 2640              		.loc 2 439 7 view .LVU712
 2641 00ba 2368     		ldr	r3, [r4]
 440:src/console.c **** 
 441:src/console.c ****       if ( !lcd_get_buf_cleared() )
 2642              		.loc 2 441 13 is_stmt 0 view .LVU713
 2643 00bc 914A     		ldr	r2, .L278+52
 439:src/console.c **** 
 2644              		.loc 2 439 7 view .LVU714
 2645 00be 23F01003 		bic	r3, r3, #16
 2646 00c2 2360     		str	r3, [r4]
 2647              		.loc 2 441 7 is_stmt 1 view .LVU715
 2648              		.loc 2 441 13 is_stmt 0 view .LVU716
 2649 00c4 9047     		blx	r2
 2650              	.LVL217:
 2651              		.loc 2 441 10 view .LVU717
 2652 00c6 08B9     		cbnz	r0, .L196
 442:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 2653              		.loc 2 442 9 is_stmt 1 view .LVU718
 2654 00c8 8F4B     		ldr	r3, .L278+56
 2655 00ca 9847     		blx	r3
 2656              	.LVL218:
 2657              	.L196:
 443:src/console.c ****     }
 444:src/console.c **** 
 445:src/console.c ****     // Key is ready -> clear auto off timer
 446:src/console.c ****     //    if ( !key_empty() )
 447:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 448:src/console.c ****     // Fetch the key
 449:src/console.c ****     //  < 0 -> No key event
 450:src/console.c ****     //  > 0 -> Key pressed
 451:src/console.c ****     // == 0 -> Key released
 452:src/console.c ****     c = key_pop();
 2658              		.loc 2 452 5 view .LVU719
 2659              		.loc 2 452 9 is_stmt 0 view .LVU720
 2660 00cc 8F4B     		ldr	r3, .L278+60
 2661 00ce 9847     		blx	r3
 2662              	.LVL219:
 453:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2663              		.loc 2 453 8 view .LVU721
ARM GAS  /tmp/cc8tUJXt.s 			page 72


 2664 00d0 6228     		cmp	r0, #98
 452:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2665              		.loc 2 452 9 view .LVU722
 2666 00d2 8246     		mov	r10, r0
 2667              	.LVL220:
 2668              		.loc 2 453 5 is_stmt 1 view .LVU723
 2669              		.loc 2 453 8 is_stmt 0 view .LVU724
 2670 00d4 00F0A980 		beq	.L198
 2671              		.loc 2 453 29 discriminator 1 view .LVU725
 2672 00d8 0028     		cmp	r0, #0
 2673 00da 40F3A380 		ble	.L199
 454:src/console.c ****       reset_auto_off();
 2674              		.loc 2 454 7 is_stmt 1 view .LVU726
 2675 00de 8C4B     		ldr	r3, .L278+64
 2676 00e0 9847     		blx	r3
 2677              	.LVL221:
 455:src/console.c ****       start_key_timer();
 2678              		.loc 2 455 7 view .LVU727
 2679              	.LBB125:
 2680              	.LBI125:
 225:src/console.c ****     start_ticks = get_rtc_ticks();
 2681              		.loc 2 225 6 view .LVU728
 2682              	.LBB126:
 226:src/console.c **** }
 2683              		.loc 2 226 5 view .LVU729
 226:src/console.c **** }
 2684              		.loc 2 226 19 is_stmt 0 view .LVU730
 2685 00e2 8C4B     		ldr	r3, .L278+68
 2686 00e4 9847     		blx	r3
 2687              	.LVL222:
 226:src/console.c **** }
 2688              		.loc 2 226 17 view .LVU731
 2689 00e6 8C4B     		ldr	r3, .L278+72
 2690              	.LBE126:
 2691              	.LBE125:
 2692              	.LBB128:
 2693              	.LBB129:
  61:src/console.c **** 
 2694              		.loc 2 61 6 view .LVU732
 2695 00e8 BAF1630F 		cmp	r10, #99
 2696              	.LBE129:
 2697              	.LBE128:
 2698              	.LBB142:
 2699              	.LBB127:
 226:src/console.c **** }
 2700              		.loc 2 226 17 view .LVU733
 2701 00ec 1860     		str	r0, [r3]
 2702              	.LBE127:
 2703              	.LBE142:
 456:src/console.c ****     }
 457:src/console.c ****     if (c >= 0) {
 2704              		.loc 2 457 5 is_stmt 1 view .LVU734
 458:src/console.c ****       remapped = remap(c);
 2705              		.loc 2 458 7 view .LVU735
 2706              	.LVL223:
 2707              	.LBB143:
 2708              	.LBI128:
ARM GAS  /tmp/cc8tUJXt.s 			page 73


  53:src/console.c **** 
 2709              		.loc 2 53 22 view .LVU736
 2710              	.LBB131:
  55:src/console.c **** 
 2711              		.loc 2 55 3 view .LVU737
 2712              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 2713              		.loc 3 1 1 view .LVU738
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
ARM GAS  /tmp/cc8tUJXt.s 			page 74


  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 2714              		.loc 3 59 3 view .LVU739
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU, 14}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  96:src/keytran.c ****     {K_NOP, 0}, // no function
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
ARM GAS  /tmp/cc8tUJXt.s 			page 75


 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 2715              		.loc 3 117 3 view .LVU740
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
ARM GAS  /tmp/cc8tUJXt.s 			page 76


 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 2716              		.loc 3 175 1 view .LVU741
  59:src/console.c **** 
 2717              		.loc 2 59 3 view .LVU742
  61:src/console.c **** 
 2718              		.loc 2 61 3 view .LVU743
  61:src/console.c **** 
 2719              		.loc 2 61 6 is_stmt 0 view .LVU744
 2720 00ee 00F0E780 		beq	.L260
  63:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 2721              		.loc 2 63 3 is_stmt 1 view .LVU745
  63:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 2722              		.loc 2 63 6 is_stmt 0 view .LVU746
 2723 00f2 BAF12C0F 		cmp	r10, #44
 2724 00f6 00F0C280 		beq	.L236
 2725              	.LVL224:
 2726              	.L235:
  68:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2727              		.loc 2 68 3 is_stmt 1 view .LVU747
  68:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2728              		.loc 2 68 8 is_stmt 0 view .LVU748
 2729 00fa FFF7FEFF 		bl	get_alpha_state
 2730              	.LVL225:
  68:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2731              		.loc 2 68 6 view .LVU749
 2732 00fe 0028     		cmp	r0, #0
 2733 0100 00F08380 		beq	.L203
  69:src/console.c ****       switch (cur_shift()) { 
 2734              		.loc 2 69 5 is_stmt 1 view .LVU750
  69:src/console.c ****       switch (cur_shift()) { 
 2735              		.loc 2 69 8 is_stmt 0 view .LVU751
 2736 0104 BAF11C0F 		cmp	r10, #28
 2737 0108 00F03081 		beq	.L261
  86:src/console.c ****   }
 2738              		.loc 2 86 5 is_stmt 1 view .LVU752
  86:src/console.c ****   }
 2739              		.loc 2 86 26 is_stmt 0 view .LVU753
 2740 010c 834B     		ldr	r3, .L278+76
 2741              	.L257:
 115:src/console.c ****     break;
 2742              		.loc 2 115 26 view .LVU754
 2743 010e 03EBCA02 		add	r2, r3, r10, lsl #3
 2744 0112 92E80300 		ldm	r2, {r0, r1}
 2745 0116 0DF10809 		add	r9, sp, #8
 2746 011a 13F83AA0 		ldrb	r10, [r3, r10, lsl #3]	@ zero_extendqisi2
ARM GAS  /tmp/cc8tUJXt.s 			page 77


 2747              	.LVL226:
 115:src/console.c ****     break;
 2748              		.loc 2 115 26 view .LVU755
 2749 011e 89E80300 		stm	r9, {r0, r1}
 2750 0122 0D46     		mov	r5, r1
 2751              	.LVL227:
 2752              	.L201:
 115:src/console.c ****     break;
 2753              		.loc 2 115 26 view .LVU756
 2754              	.LBE131:
 2755              	.LBE143:
 459:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2756              		.loc 2 459 7 is_stmt 1 view .LVU757
 2757              		.loc 2 459 10 is_stmt 0 view .LVU758
 2758 0124 BAF12F0F 		cmp	r10, #47
 2759 0128 00F08D80 		beq	.L262
 2760              	.LVL228:
 2761              	.L225:
 460:src/console.c **** 	set_menu ( remapped.shift );
 461:src/console.c **** 	display_current_menu ();
 462:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 463:src/console.c **** 	case SHIFT_F:
 464:src/console.c **** 	  remapped = f_shift; // F -> N
 465:src/console.c **** 	  break;
 466:src/console.c **** 	case SHIFT_G:
 467:src/console.c **** 	  remapped = g_shift; // G -> N
 468:src/console.c **** 	  break;
 469:src/console.c **** 	case SHIFT_H:
 470:src/console.c **** 	  remapped = h_shift; // H -> N
 471:src/console.c **** 	default:
 472:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 473:src/console.c **** 	}
 474:src/console.c ****       }
 475:src/console.c ****       if (remapped.key_34s == K_SYS) {
 2762              		.loc 2 475 7 is_stmt 1 view .LVU759
 2763              		.loc 2 475 10 is_stmt 0 view .LVU760
 2764 012c BAF1300F 		cmp	r10, #48
 2765 0130 18D1     		bne	.L232
 476:src/console.c **** 	SET_ST(STAT_MENU);
 2766              		.loc 2 476 2 is_stmt 1 view .LVU761
 2767 0132 2368     		ldr	r3, [r4]
 477:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 2768              		.loc 2 477 2 is_stmt 0 view .LVU762
 2769 0134 7A4D     		ldr	r5, .L278+80
 2770              	.LVL229:
 2771              		.loc 2 477 2 view .LVU763
 2772 0136 7B48     		ldr	r0, .L278+84
 2773 0138 0022     		movs	r2, #0
 476:src/console.c **** 	SET_ST(STAT_MENU);
 2774              		.loc 2 476 2 view .LVU764
 2775 013a 43F04003 		orr	r3, r3, #64
 2776              		.loc 2 477 2 view .LVU765
 2777 013e 1146     		mov	r1, r2
 476:src/console.c **** 	SET_ST(STAT_MENU);
 2778              		.loc 2 476 2 view .LVU766
 2779 0140 2360     		str	r3, [r4]
 2780              		.loc 2 477 2 is_stmt 1 view .LVU767
ARM GAS  /tmp/cc8tUJXt.s 			page 78


 2781 0142 A847     		blx	r5
 2782              	.LVL230:
 478:src/console.c **** 	CLR_ST(STAT_MENU);
 2783              		.loc 2 478 2 view .LVU768
 479:src/console.c **** 	remapped =  no_key;
 2784              		.loc 2 479 11 is_stmt 0 view .LVU769
 2785 0144 784B     		ldr	r3, .L278+88
 478:src/console.c **** 	CLR_ST(STAT_MENU);
 2786              		.loc 2 478 2 view .LVU770
 2787 0146 2268     		ldr	r2, [r4]
 2788              		.loc 2 479 11 view .LVU771
 2789 0148 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2790              	.LVL231:
 2791              		.loc 2 479 11 view .LVU772
 2792 014c 93E80300 		ldm	r3, {r0, r1}
 478:src/console.c **** 	CLR_ST(STAT_MENU);
 2793              		.loc 2 478 2 view .LVU773
 2794 0150 22F04002 		bic	r2, r2, #64
 2795 0154 2260     		str	r2, [r4]
 2796              		.loc 2 479 2 is_stmt 1 view .LVU774
 2797              	.LVL232:
 2798              		.loc 2 479 11 is_stmt 0 view .LVU775
 2799 0156 04AA     		add	r2, sp, #16
 2800 0158 02E90300 		stmdb	r2, {r0, r1}
 2801              	.LBB144:
 2802              	.LBB145:
 111:src/menu.c    **** }
 2803              		.loc 1 111 3 view .LVU776
 2804 015c 3068     		ldr	r0, [r6]
 2805              	.LBE145:
 2806              	.LBE144:
 2807              		.loc 2 479 11 view .LVU777
 2808 015e 0D46     		mov	r5, r1
 2809              	.LVL233:
 480:src/console.c **** 	display_current_menu();
 2810              		.loc 2 480 2 is_stmt 1 view .LVU778
 2811              	.LBB147:
 2812              	.LBI144:
 110:src/menu.c    ****   display_menu (current_menu);
 2813              		.loc 1 110 6 view .LVU779
 2814              	.LBB146:
 111:src/menu.c    **** }
 2815              		.loc 1 111 3 view .LVU780
 2816 0160 FFF7FEFF 		bl	display_menu
 2817              	.LVL234:
 2818              	.L232:
 111:src/menu.c    **** }
 2819              		.loc 1 111 3 is_stmt 0 view .LVU781
 2820              	.LBE146:
 2821              	.LBE147:
 481:src/console.c ****       }
 482:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 2822              		.loc 2 482 7 is_stmt 1 view .LVU782
 2823              		.loc 2 482 10 is_stmt 0 view .LVU783
 2824 0164 BAF1310F 		cmp	r10, #49
 2825 0168 00F08A80 		beq	.L202
 483:src/console.c **** 	remapped = do_multi (remapped);
ARM GAS  /tmp/cc8tUJXt.s 			page 79


 484:src/console.c **** 	display_current_menu();
 485:src/console.c ****       }
 486:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 2826              		.loc 2 486 7 is_stmt 1 view .LVU784
 2827              		.loc 2 486 10 is_stmt 0 view .LVU785
 2828 016c BAF1320F 		cmp	r10, #50
 2829 0170 00F0A080 		beq	.L234
 2830              	.LVL235:
 2831              	.L259:
 2832              		.loc 2 486 10 view .LVU786
 2833 0174 0DF10809 		add	r9, sp, #8
 2834              	.L205:
 2835              	.LVL236:
 487:src/console.c ****       process_keycode_with_shift(remapped);
 2836              		.loc 2 487 7 is_stmt 1 view .LVU787
 2837              		.loc 2 487 7 is_stmt 0 view .LVU788
 2838 0178 8DF808A0 		strb	r10, [sp, #8]
 2839 017c 0395     		str	r5, [sp, #12]
 2840 017e 99E80300 		ldm	r9, {r0, r1}
 2841 0182 FFF7FEFF 		bl	process_keycode_with_shift
 2842              	.LVL237:
 392:src/console.c **** 
 2843              		.loc 2 392 3 is_stmt 1 view .LVU789
 394:src/console.c ****       {
 2844              		.loc 2 394 5 view .LVU790
 394:src/console.c ****       {
 2845              		.loc 2 394 10 is_stmt 0 view .LVU791
 2846 0186 2368     		ldr	r3, [r4]
 394:src/console.c ****       {
 2847              		.loc 2 394 8 view .LVU792
 2848 0188 9A05     		lsls	r2, r3, #22
 2849 018a 3FF573AF 		bmi	.L263
 2850              	.LVL238:
 2851              	.L184:
 399:src/console.c ****     {
 2852              		.loc 2 399 10 is_stmt 1 view .LVU793
 399:src/console.c ****     {
 2853              		.loc 2 399 15 is_stmt 0 view .LVU794
 2854 018e 2568     		ldr	r5, [r4]
 399:src/console.c ****     {
 2855              		.loc 2 399 13 view .LVU795
 2856 0190 15F40075 		ands	r5, r5, #512
 2857 0194 7FF478AF 		bne	.L185
 399:src/console.c ****     {
 2858              		.loc 2 399 35 discriminator 1 view .LVU796
 2859 0198 B847     		blx	r7
 2860              	.LVL239:
 399:src/console.c ****     {
 2861              		.loc 2 399 32 discriminator 1 view .LVU797
 2862 019a 0028     		cmp	r0, #0
 2863 019c 3FF474AF 		beq	.L185
 401:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2864              		.loc 2 401 7 is_stmt 1 view .LVU798
 2865 01a0 2368     		ldr	r3, [r4]
 2866 01a2 23F00203 		bic	r3, r3, #2
 402:src/console.c ****       sys_sleep();
 2867              		.loc 2 402 7 is_stmt 0 view .LVU799
ARM GAS  /tmp/cc8tUJXt.s 			page 80


 2868 01a6 2846     		mov	r0, r5
 2869 01a8 6421     		movs	r1, #100
 401:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2870              		.loc 2 401 7 view .LVU800
 2871 01aa 2360     		str	r3, [r4]
 402:src/console.c ****       sys_sleep();
 2872              		.loc 2 402 7 is_stmt 1 view .LVU801
 2873 01ac C047     		blx	r8
 2874              	.LVL240:
 403:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 2875              		.loc 2 403 7 view .LVU802
 2876 01ae 514B     		ldr	r3, .L278+36
 2877 01b0 9847     		blx	r3
 2878              	.LVL241:
 404:src/console.c **** 	key_push (K_HEARTBEAT);
 2879              		.loc 2 404 7 view .LVU803
 404:src/console.c **** 	key_push (K_HEARTBEAT);
 2880              		.loc 2 404 11 is_stmt 0 view .LVU804
 2881 01b2 5E4B     		ldr	r3, .L278+92
 2882 01b4 2846     		mov	r0, r5
 2883 01b6 9847     		blx	r3
 2884              	.LVL242:
 404:src/console.c **** 	key_push (K_HEARTBEAT);
 2885              		.loc 2 404 10 view .LVU805
 2886 01b8 48B1     		cbz	r0, .L189
 405:src/console.c **** 	if (Pause > 0) Pause--;
 2887              		.loc 2 405 2 is_stmt 1 view .LVU806
 2888 01ba 5D4B     		ldr	r3, .L278+96
 2889 01bc 6220     		movs	r0, #98
 2890 01be 9847     		blx	r3
 2891              	.LVL243:
 406:src/console.c ****       }
 2892              		.loc 2 406 2 view .LVU807
 406:src/console.c ****       }
 2893              		.loc 2 406 12 is_stmt 0 view .LVU808
 2894 01c0 5C4B     		ldr	r3, .L278+100
 2895 01c2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 406:src/console.c ****       }
 2896              		.loc 2 406 5 view .LVU809
 2897 01c4 1AB1     		cbz	r2, .L189
 406:src/console.c ****       }
 2898              		.loc 2 406 17 is_stmt 1 discriminator 1 view .LVU810
 406:src/console.c ****       }
 2899              		.loc 2 406 22 is_stmt 0 discriminator 1 view .LVU811
 2900 01c6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2901 01c8 013A     		subs	r2, r2, #1
 2902 01ca D2B2     		uxtb	r2, r2
 2903 01cc 1A70     		strb	r2, [r3]
 2904              	.L189:
 408:src/console.c ****     }
 2905              		.loc 2 408 7 is_stmt 1 view .LVU812
 2906 01ce 5A4B     		ldr	r3, .L278+104
 2907 01d0 0020     		movs	r0, #0
 2908 01d2 9847     		blx	r3
 2909              	.LVL244:
 412:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2910              		.loc 2 412 5 view .LVU813
ARM GAS  /tmp/cc8tUJXt.s 			page 81


 412:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2911              		.loc 2 412 9 is_stmt 0 view .LVU814
 2912 01d4 2368     		ldr	r3, [r4]
 412:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2913              		.loc 2 412 8 view .LVU815
 2914 01d6 9D05     		lsls	r5, r3, #22
 2915 01d8 7FF55AAF 		bpl	.L264
 2916              	.L191:
 413:src/console.c ****         // Going to off mode
 2917              		.loc 2 413 7 is_stmt 1 view .LVU816
 413:src/console.c ****         // Going to off mode
 2918              		.loc 2 413 12 is_stmt 0 view .LVU817
 2919 01dc 2568     		ldr	r5, [r4]
 413:src/console.c ****         // Going to off mode
 2920              		.loc 2 413 10 view .LVU818
 2921 01de 15F00405 		ands	r5, r5, #4
 2922 01e2 7FF443AF 		bne	.L183
 415:src/console.c ****         draw_power_off_image(1);
 2923              		.loc 2 415 9 is_stmt 1 view .LVU819
 2924 01e6 554B     		ldr	r3, .L278+108
 2925 01e8 2846     		mov	r0, r5
 2926 01ea 9847     		blx	r3
 2927              	.LVL245:
 416:src/console.c **** 
 2928              		.loc 2 416 9 view .LVU820
 2929 01ec 544B     		ldr	r3, .L278+112
 2930 01ee 0120     		movs	r0, #1
 2931 01f0 9847     		blx	r3
 2932              	.LVL246:
 418:src/console.c ****         SET_ST(STAT_SUSPENDED);
 2933              		.loc 2 418 9 view .LVU821
 2934 01f2 544B     		ldr	r3, .L278+116
 2935 01f4 2846     		mov	r0, r5
 2936 01f6 9847     		blx	r3
 2937              	.LVL247:
 419:src/console.c ****         SET_ST(STAT_OFF);
 2938              		.loc 2 419 9 view .LVU822
 2939 01f8 2368     		ldr	r3, [r4]
 2940 01fa 43F00403 		orr	r3, r3, #4
 2941 01fe 2360     		str	r3, [r4]
 420:src/console.c ****       }
 2942              		.loc 2 420 9 view .LVU823
 2943 0200 2368     		ldr	r3, [r4]
 2944 0202 43F01003 		orr	r3, r3, #16
 2945 0206 2360     		str	r3, [r4]
 2946 0208 30E7     		b	.L183
 2947              	.LVL248:
 2948              	.L203:
 2949              	.LBB148:
 2950              	.LBB132:
  89:src/console.c ****   case KEY_F1:
 2951              		.loc 2 89 3 view .LVU824
 2952 020a AAF12603 		sub	r3, r10, #38
 2953 020e 052B     		cmp	r3, #5
 2954 0210 00F22781 		bhi	.L208
 2955 0214 DFE813F0 		tbh	[pc, r3, lsl #1]
 2956              	.L210:
ARM GAS  /tmp/cc8tUJXt.s 			page 82


 2957 0218 0001     		.2byte	(.L215-.L210)/2
 2958 021a 0901     		.2byte	(.L214-.L210)/2
 2959 021c 1101     		.2byte	(.L213-.L210)/2
 2960 021e F200     		.2byte	(.L212-.L210)/2
 2961 0220 DF00     		.2byte	(.L211-.L210)/2
 2962 0222 C400     		.2byte	(.L209-.L210)/2
 2963              	.LVL249:
 2964              		.p2align 1
 2965              	.L199:
  89:src/console.c ****   case KEY_F1:
 2966              		.loc 2 89 3 is_stmt 0 view .LVU825
 2967              	.LBE132:
 2968              	.LBE148:
 457:src/console.c ****       remapped = remap(c);
 2969              		.loc 2 457 5 is_stmt 1 view .LVU826
 457:src/console.c ****       remapped = remap(c);
 2970              		.loc 2 457 8 is_stmt 0 view .LVU827
 2971 0224 7FF422AF 		bne	.L183
 2972 0228 67E7     		b	.L235
 2973              	.L198:
 457:src/console.c ****       remapped = remap(c);
 2974              		.loc 2 457 5 is_stmt 1 view .LVU828
 458:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2975              		.loc 2 458 7 view .LVU829
 2976              	.LVL250:
 2977              	.LBB149:
  53:src/console.c **** 
 2978              		.loc 2 53 22 view .LVU830
 2979              	.LBB133:
  55:src/console.c **** 
 2980              		.loc 2 55 3 view .LVU831
   1:src/keytran.c ****     // Top row of DM42 1--6
 2981              		.loc 3 1 1 view .LVU832
  59:src/keytran.c ****     {K_RELEASE, -1},
 2982              		.loc 3 59 3 view .LVU833
 117:src/keytran.c ****     {K_RELEASE, -1},
 2983              		.loc 3 117 3 view .LVU834
 2984              		.loc 3 175 1 view .LVU835
  59:src/console.c **** 
 2985              		.loc 2 59 3 view .LVU836
  59:src/console.c **** 
 2986              		.loc 2 59 23 view .LVU837
  59:src/console.c **** 
 2987              		.loc 2 59 30 is_stmt 0 view .LVU838
 2988 022a 474B     		ldr	r3, .L278+120
 2989              	.LVL251:
 2990              	.L258:
  59:src/console.c **** 
 2991              		.loc 2 59 30 view .LVU839
 2992 022c 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2993              	.LVL252:
  59:src/console.c **** 
 2994              		.loc 2 59 30 view .LVU840
 2995 0230 93E80300 		ldm	r3, {r0, r1}
 2996 0234 0DF10809 		add	r9, sp, #8
 2997              	.LBE133:
 2998              	.LBE149:
ARM GAS  /tmp/cc8tUJXt.s 			page 83


 459:src/console.c **** 	set_menu ( remapped.shift );
 2999              		.loc 2 459 10 view .LVU841
 3000 0238 BAF12F0F 		cmp	r10, #47
 3001              	.LBB150:
 3002              	.LBB134:
  59:src/console.c **** 
 3003              		.loc 2 59 30 view .LVU842
 3004 023c 89E80300 		stm	r9, {r0, r1}
 3005 0240 0D46     		mov	r5, r1
 3006              	.LVL253:
  59:src/console.c **** 
 3007              		.loc 2 59 30 view .LVU843
 3008              	.LBE134:
 3009              	.LBE150:
 459:src/console.c **** 	set_menu ( remapped.shift );
 3010              		.loc 2 459 7 is_stmt 1 view .LVU844
 459:src/console.c **** 	set_menu ( remapped.shift );
 3011              		.loc 2 459 10 is_stmt 0 view .LVU845
 3012 0242 7FF473AF 		bne	.L225
 3013              	.LVL254:
 3014              	.L262:
 460:src/console.c **** 	display_current_menu ();
 3015              		.loc 2 460 2 is_stmt 1 view .LVU846
 3016              	.LBB151:
 3017              	.LBI151:
  86:src/menu.c    ****   int m = current_menu;
 3018              		.loc 1 86 6 view .LVU847
 3019              	.LBB152:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3020              		.loc 1 87 3 view .LVU848
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3021              		.loc 1 87 7 is_stmt 0 view .LVU849
 3022 0246 3368     		ldr	r3, [r6]
 3023              	.LVL255:
  88:src/menu.c    ****     current_menu = default_menu;
 3024              		.loc 1 88 3 is_stmt 1 view .LVU850
  88:src/menu.c    ****     current_menu = default_menu;
 3025              		.loc 1 88 6 is_stmt 0 view .LVU851
 3026 0248 AB42     		cmp	r3, r5
 3027 024a 3BD0     		beq	.L265
  91:src/menu.c    ****     current_menu = last_menu;
 3028              		.loc 1 91 8 is_stmt 1 view .LVU852
  91:src/menu.c    ****     current_menu = last_menu;
 3029              		.loc 1 91 11 is_stmt 0 view .LVU853
 3030 024c 6A1C     		adds	r2, r5, #1
 3031 024e 00F08980 		beq	.L266
 3032              	.LVL256:
 3033              	.L226:
  95:src/menu.c    ****   }
 3034              		.loc 1 95 5 is_stmt 1 view .LVU854
  95:src/menu.c    ****   }
 3035              		.loc 1 95 18 is_stmt 0 view .LVU855
 3036 0252 3560     		str	r5, [r6]
 3037              	.LVL257:
 3038              	.L229:
  97:src/menu.c    **** }
 3039              		.loc 1 97 3 is_stmt 1 view .LVU856
ARM GAS  /tmp/cc8tUJXt.s 			page 84


  97:src/menu.c    **** }
 3040              		.loc 1 97 6 is_stmt 0 view .LVU857
 3041 0254 092B     		cmp	r3, #9
 3042 0256 01D0     		beq	.L230
 3043              	.L227:
  97:src/menu.c    **** }
 3044              		.loc 1 97 15 is_stmt 1 view .LVU858
  97:src/menu.c    **** }
 3045              		.loc 1 97 25 is_stmt 0 view .LVU859
 3046 0258 3C4A     		ldr	r2, .L278+124
 3047 025a 1360     		str	r3, [r2]
 3048              	.L230:
  97:src/menu.c    **** }
 3049              		.loc 1 97 25 view .LVU860
 3050              	.LBE152:
 3051              	.LBE151:
 461:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 3052              		.loc 2 461 2 is_stmt 1 view .LVU861
 3053              	.LBB156:
 3054              	.LBI156:
 110:src/menu.c    ****   display_menu (current_menu);
 3055              		.loc 1 110 6 view .LVU862
 3056              	.LBB157:
 111:src/menu.c    **** }
 3057              		.loc 1 111 3 view .LVU863
 3058 025c 2846     		mov	r0, r5
 3059 025e FFF7FEFF 		bl	display_menu
 3060              	.LVL258:
 3061              	.LBE157:
 3062              	.LBE156:
 462:src/console.c **** 	case SHIFT_F:
 3063              		.loc 2 462 2 view .LVU864
 462:src/console.c **** 	case SHIFT_F:
 3064              		.loc 2 462 10 is_stmt 0 view .LVU865
 3065 0262 FFF7FEFF 		bl	cur_shift
 3066              	.LVL259:
 462:src/console.c **** 	case SHIFT_F:
 3067              		.loc 2 462 2 view .LVU866
 3068 0266 0228     		cmp	r0, #2
 464:src/console.c **** 	  break;
 3069              		.loc 2 464 4 is_stmt 1 view .LVU867
 464:src/console.c **** 	  break;
 3070              		.loc 2 464 13 is_stmt 0 view .LVU868
 3071 0268 14BF     		ite	ne
 3072 026a 394B     		ldrne	r3, .L278+128
 467:src/console.c **** 	  break;
 3073              		.loc 2 467 4 is_stmt 1 view .LVU869
 467:src/console.c **** 	  break;
 3074              		.loc 2 467 13 is_stmt 0 view .LVU870
 3075 026c 394B     		ldreq	r3, .L278+132
 3076 026e 93E80300 		ldm	r3, {r0, r1}
 3077 0272 89E80300 		stm	r9, {r0, r1}
 3078 0276 0D46     		mov	r5, r1
 3079 0278 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 3080              	.LVL260:
 468:src/console.c **** 	case SHIFT_H:
 3081              		.loc 2 468 4 is_stmt 1 view .LVU871
ARM GAS  /tmp/cc8tUJXt.s 			page 85


 3082 027c 56E7     		b	.L225
 3083              	.LVL261:
 3084              	.L236:
 3085              	.LBB158:
 3086              	.LBB135:
 3087              	.LBB130:
  65:src/console.c ****   }
 3088              		.loc 2 65 12 is_stmt 0 view .LVU872
 3089 027e 0C25     		movs	r5, #12
 3090              	.LVL262:
 3091              	.L202:
  65:src/console.c ****   }
 3092              		.loc 2 65 12 view .LVU873
 3093              	.LBE130:
 3094              	.LBE135:
 3095              	.LBE158:
 483:src/console.c **** 	display_current_menu();
 3096              		.loc 2 483 2 is_stmt 1 view .LVU874
 483:src/console.c **** 	display_current_menu();
 3097              		.loc 2 483 13 is_stmt 0 view .LVU875
 3098 0280 3123     		movs	r3, #49
 3099 0282 0395     		str	r5, [sp, #12]
 3100 0284 8DF80830 		strb	r3, [sp, #8]
 3101 0288 6D46     		mov	r5, sp
 3102              	.LVL263:
 483:src/console.c **** 	display_current_menu();
 3103              		.loc 2 483 13 view .LVU876
 3104 028a 0DF10809 		add	r9, sp, #8
 3105 028e 99E80600 		ldm	r9, {r1, r2}
 3106 0292 2846     		mov	r0, r5
 3107 0294 FFF7FEFF 		bl	do_multi
 3108              	.LVL264:
 3109 0298 95E80300 		ldm	r5, {r0, r1}
 3110 029c 89E80300 		stm	r9, {r0, r1}
 3111              	.LVL265:
 483:src/console.c **** 	display_current_menu();
 3112              		.loc 2 483 13 view .LVU877
 3113 02a0 9DF808A0 		ldrb	r10, [sp, #8]	@ zero_extendqisi2
 3114              	.LVL266:
 3115              	.LBB159:
 3116              	.LBB160:
 111:src/menu.c    **** }
 3117              		.loc 1 111 3 view .LVU878
 3118 02a4 3068     		ldr	r0, [r6]
 3119              	.LBE160:
 3120              	.LBE159:
 483:src/console.c **** 	display_current_menu();
 3121              		.loc 2 483 13 view .LVU879
 3122 02a6 039D     		ldr	r5, [sp, #12]
 3123              	.LVL267:
 484:src/console.c ****       }
 3124              		.loc 2 484 2 is_stmt 1 view .LVU880
 3125              	.LBB162:
 3126              	.LBI159:
 110:src/menu.c    ****   display_menu (current_menu);
 3127              		.loc 1 110 6 view .LVU881
 3128              	.LBB161:
ARM GAS  /tmp/cc8tUJXt.s 			page 86


 111:src/menu.c    **** }
 3129              		.loc 1 111 3 view .LVU882
 3130 02a8 FFF7FEFF 		bl	display_menu
 3131              	.LVL268:
 111:src/menu.c    **** }
 3132              		.loc 1 111 3 is_stmt 0 view .LVU883
 3133              	.LBE161:
 3134              	.LBE162:
 486:src/console.c ****       process_keycode_with_shift(remapped);
 3135              		.loc 2 486 7 is_stmt 1 view .LVU884
 486:src/console.c ****       process_keycode_with_shift(remapped);
 3136              		.loc 2 486 10 is_stmt 0 view .LVU885
 3137 02ac BAF1320F 		cmp	r10, #50
 3138 02b0 7FF460AF 		bne	.L259
 3139              	.LVL269:
 3140              	.L234:
 488:src/console.c ****     }
 489:src/console.c ****   }
 490:src/console.c ****   save_ram_file(0);
 3141              		.loc 2 490 3 is_stmt 1 view .LVU886
 3142 02b4 0020     		movs	r0, #0
 491:src/console.c ****   //  free_storage();
 492:src/console.c ****   return;
 493:src/console.c **** }
 3143              		.loc 2 493 1 is_stmt 0 view .LVU887
 3144 02b6 04B0     		add	sp, sp, #16
 3145              		.cfi_remember_state
 3146              		.cfi_def_cfa_offset 32
 3147              		@ sp needed
 3148 02b8 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 3149              		.cfi_restore 14
 3150              		.cfi_restore 10
 3151              		.cfi_restore 9
 3152              		.cfi_restore 8
 3153              		.cfi_restore 7
 3154              		.cfi_restore 6
 3155              		.cfi_restore 5
 3156              		.cfi_restore 4
 3157              		.cfi_def_cfa_offset 0
 3158              	.LVL270:
 490:src/console.c ****   //  free_storage();
 3159              		.loc 2 490 3 view .LVU888
 3160 02bc FFF7FEBF 		b	save_ram_file
 3161              	.LVL271:
 3162              	.L260:
 3163              		.cfi_restore_state
 3164              	.LBB163:
 3165              	.LBB136:
  61:src/console.c **** 
 3166              		.loc 2 61 16 is_stmt 1 view .LVU889
  61:src/console.c **** 
 3167              		.loc 2 61 23 is_stmt 0 view .LVU890
 3168 02c0 254B     		ldr	r3, .L278+136
 3169 02c2 B3E7     		b	.L258
 3170              	.LVL272:
 3171              	.L265:
  61:src/console.c **** 
ARM GAS  /tmp/cc8tUJXt.s 			page 87


 3172              		.loc 2 61 23 view .LVU891
 3173              	.LBE136:
 3174              	.LBE163:
 3175              	.LBB164:
 3176              	.LBB153:
  89:src/menu.c    ****   }
 3177              		.loc 1 89 5 is_stmt 1 view .LVU892
  89:src/menu.c    ****   }
 3178              		.loc 1 89 18 is_stmt 0 view .LVU893
 3179 02c4 254B     		ldr	r3, .L278+140
 3180              	.LVL273:
  89:src/menu.c    ****   }
 3181              		.loc 1 89 18 view .LVU894
 3182 02c6 1A68     		ldr	r2, [r3]
 3183 02c8 3260     		str	r2, [r6]
 3184              	.LVL274:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3185              		.loc 1 87 7 view .LVU895
 3186 02ca 2B46     		mov	r3, r5
  89:src/menu.c    ****   }
 3187              		.loc 1 89 18 view .LVU896
 3188 02cc 1546     		mov	r5, r2
 3189              	.LVL275:
  89:src/menu.c    ****   }
 3190              		.loc 1 89 18 view .LVU897
 3191 02ce C1E7     		b	.L229
 3192              	.L279:
 3193              		.align	2
 3194              	.L278:
 3195 02d0 00000000 		.word	StateWhileOn
 3196 02d4 00000000 		.word	DispMsg
 3197 02d8 00200010 		.word	268443648
 3198 02dc 00000000 		.word	.LANCHOR1
 3199 02e0 7D030008 		.word	134218621
 3200 02e4 00000000 		.word	run_menu_item
 3201 02e8 00000000 		.word	menu_line_str
 3202 02ec 31020008 		.word	134218289
 3203 02f0 00000000 		.word	JustDisplayed
 3204 02f4 19040008 		.word	134218777
 3205 02f8 19020008 		.word	134218265
 3206 02fc 91030008 		.word	134218641
 3207 0300 E5020008 		.word	134218469
 3208 0304 59020008 		.word	134218329
 3209 0308 35020008 		.word	134218293
 3210 030c 89030008 		.word	134218633
 3211 0310 B9030008 		.word	134218681
 3212 0314 B9040008 		.word	134218937
 3213 0318 00000000 		.word	.LANCHOR5
 3214 031c 00000000 		.word	.LANCHOR12
 3215 0320 59030008 		.word	134218585
 3216 0324 00000000 		.word	.LANCHOR16
 3217 0328 00000000 		.word	.LANCHOR7
 3218 032c 01040008 		.word	134218753
 3219 0330 81030008 		.word	134218625
 3220 0334 00000000 		.word	Pause
 3221 0338 F5030008 		.word	134218741
 3222 033c 55020008 		.word	134218325
ARM GAS  /tmp/cc8tUJXt.s 			page 88


 3223 0340 2D040008 		.word	134218797
 3224 0344 1D020008 		.word	134218269
 3225 0348 00000000 		.word	.LANCHOR17
 3226 034c 00000000 		.word	.LANCHOR3
 3227 0350 00000000 		.word	.LANCHOR14
 3228 0354 00000000 		.word	.LANCHOR15
 3229 0358 00000000 		.word	.LANCHOR8
 3230 035c 00000000 		.word	.LANCHOR2
 3231 0360 F9030008 		.word	134218745
 3232              	.LVL276:
 3233              	.L266:
  92:src/menu.c    ****   }
 3234              		.loc 1 92 5 is_stmt 1 view .LVU898
  92:src/menu.c    ****   }
 3235              		.loc 1 92 18 is_stmt 0 view .LVU899
 3236 0364 834A     		ldr	r2, .L280
 3237 0366 1568     		ldr	r5, [r2]
 3238              	.LVL277:
  92:src/menu.c    ****   }
 3239              		.loc 1 92 18 view .LVU900
 3240 0368 3560     		str	r5, [r6]
 3241 036a 73E7     		b	.L229
 3242              	.LVL278:
 3243              	.L261:
  92:src/menu.c    ****   }
 3244              		.loc 1 92 18 view .LVU901
 3245              	.LBE153:
 3246              	.LBE164:
 3247              	.LBB165:
 3248              	.LBB137:
  70:src/console.c ****       case SHIFT_N:
 3249              		.loc 2 70 7 is_stmt 1 view .LVU902
  70:src/console.c ****       case SHIFT_N:
 3250              		.loc 2 70 15 is_stmt 0 view .LVU903
 3251 036c FFF7FEFF 		bl	cur_shift
 3252              	.LVL279:
  70:src/console.c ****       case SHIFT_N:
 3253              		.loc 2 70 7 view .LVU904
 3254 0370 0328     		cmp	r0, #3
  70:src/console.c ****       case SHIFT_N:
 3255              		.loc 2 70 15 view .LVU905
 3256 0372 0546     		mov	r5, r0
  70:src/console.c ****       case SHIFT_N:
 3257              		.loc 2 70 7 view .LVU906
 3258 0374 00F2B280 		bhi	.L237
 3259 0378 0128     		cmp	r0, #1
 3260 037a 6CD8     		bhi	.L206
 3261 037c 0028     		cmp	r0, #0
 3262 037e 7ED0     		beq	.L267
  73:src/console.c ****       case SHIFT_F:
 3263              		.loc 2 73 2 is_stmt 1 view .LVU907
  75:src/console.c **** 	break;
 3264              		.loc 2 75 2 view .LVU908
  75:src/console.c **** 	break;
 3265              		.loc 2 75 23 is_stmt 0 view .LVU909
 3266 0380 7D4B     		ldr	r3, .L280+4
 3267 0382 93E80300 		ldm	r3, {r0, r1}
ARM GAS  /tmp/cc8tUJXt.s 			page 89


 3268 0386 0DF10809 		add	r9, sp, #8
 3269 038a 89E80300 		stm	r9, {r0, r1}
 3270              	.LVL280:
  75:src/console.c **** 	break;
 3271              		.loc 2 75 23 view .LVU910
 3272              	.LBE137:
 3273              	.LBE165:
 459:src/console.c **** 	set_menu ( remapped.shift );
 3274              		.loc 2 459 7 is_stmt 1 view .LVU911
 475:src/console.c **** 	SET_ST(STAT_MENU);
 3275              		.loc 2 475 7 view .LVU912
 482:src/console.c **** 	remapped = do_multi (remapped);
 3276              		.loc 2 482 7 view .LVU913
 486:src/console.c ****       process_keycode_with_shift(remapped);
 3277              		.loc 2 486 7 view .LVU914
 3278              	.LBB166:
 3279              	.LBB138:
  75:src/console.c **** 	break;
 3280              		.loc 2 75 23 is_stmt 0 view .LVU915
 3281 038e 0025     		movs	r5, #0
 3282 0390 4FF02A0A 		mov	r10, #42
 3283              	.LVL281:
  75:src/console.c **** 	break;
 3284              		.loc 2 75 23 view .LVU916
 3285 0394 F0E6     		b	.L205
 3286              	.LVL282:
 3287              	.L220:
 104:src/console.c ****   case KEY_F6:
 3288              		.loc 2 104 5 is_stmt 1 view .LVU917
 104:src/console.c ****   case KEY_F6:
 3289              		.loc 2 104 9 is_stmt 0 view .LVU918
 3290 0396 FFF7FEFF 		bl	cur_shift
 3291              	.LVL283:
 104:src/console.c ****   case KEY_F6:
 3292              		.loc 2 104 8 view .LVU919
 3293 039a 0128     		cmp	r0, #1
 3294 039c 00F0B180 		beq	.L268
 3295              	.L209:
 106:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3296              		.loc 2 106 5 is_stmt 1 view .LVU920
 106:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3297              		.loc 2 106 9 is_stmt 0 view .LVU921
 3298 03a0 FFF7FEFF 		bl	cur_shift
 3299              	.LVL284:
 106:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3300              		.loc 2 106 8 view .LVU922
 3301 03a4 0028     		cmp	r0, #0
 3302 03a6 58D1     		bne	.L221
 106:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3303              		.loc 2 106 33 is_stmt 1 view .LVU923
 106:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3304              		.loc 2 106 67 is_stmt 0 view .LVU924
 3305 03a8 3168     		ldr	r1, [r6]
 3306 03aa 744A     		ldr	r2, .L280+8
 3307 03ac D023     		movs	r3, #208
 3308 03ae 03FB01F3 		mul	r3, r3, r1
 3309 03b2 D018     		adds	r0, r2, r3
ARM GAS  /tmp/cc8tUJXt.s 			page 90


 3310 03b4 D0E92C01 		ldrd	r0, r1, [r0, #176]
 3311 03b8 B033     		adds	r3, r3, #176
 3312              	.L256:
 3313 03ba 0DF10809 		add	r9, sp, #8
 3314 03be 12F803A0 		ldrb	r10, [r2, r3]	@ zero_extendqisi2
 3315              	.LVL285:
 106:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3316              		.loc 2 106 67 view .LVU925
 3317 03c2 89E80300 		stm	r9, {r0, r1}
 3318 03c6 1344     		add	r3, r3, r2
 3319 03c8 5D68     		ldr	r5, [r3, #4]
 3320              	.LVL286:
 106:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3321              		.loc 2 106 67 view .LVU926
 3322 03ca ABE6     		b	.L201
 3323              	.LVL287:
 3324              	.L219:
 101:src/console.c ****   case KEY_F5:
 3325              		.loc 2 101 5 is_stmt 1 view .LVU927
 101:src/console.c ****   case KEY_F5:
 3326              		.loc 2 101 9 is_stmt 0 view .LVU928
 3327 03cc FFF7FEFF 		bl	cur_shift
 3328              	.LVL288:
 101:src/console.c ****   case KEY_F5:
 3329              		.loc 2 101 8 view .LVU929
 3330 03d0 0128     		cmp	r0, #1
 3331 03d2 00F0A080 		beq	.L269
 3332              	.L211:
 103:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3333              		.loc 2 103 5 is_stmt 1 view .LVU930
 103:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3334              		.loc 2 103 9 is_stmt 0 view .LVU931
 3335 03d6 FFF7FEFF 		bl	cur_shift
 3336              	.LVL289:
 103:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3337              		.loc 2 103 8 view .LVU932
 3338 03da 0028     		cmp	r0, #0
 3339 03dc DBD1     		bne	.L220
 103:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3340              		.loc 2 103 33 is_stmt 1 view .LVU933
 103:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3341              		.loc 2 103 67 is_stmt 0 view .LVU934
 3342 03de 3168     		ldr	r1, [r6]
 3343 03e0 664A     		ldr	r2, .L280+8
 3344 03e2 D023     		movs	r3, #208
 3345 03e4 03FB01F3 		mul	r3, r3, r1
 3346 03e8 D018     		adds	r0, r2, r3
 3347 03ea D0E92401 		ldrd	r0, r1, [r0, #144]
 3348 03ee 9033     		adds	r3, r3, #144
 3349 03f0 E3E7     		b	.L256
 3350              	.L218:
  98:src/console.c ****   case KEY_F4:
 3351              		.loc 2 98 5 is_stmt 1 view .LVU935
  98:src/console.c ****   case KEY_F4:
 3352              		.loc 2 98 9 is_stmt 0 view .LVU936
 3353 03f2 FFF7FEFF 		bl	cur_shift
 3354              	.LVL290:
ARM GAS  /tmp/cc8tUJXt.s 			page 91


  98:src/console.c ****   case KEY_F4:
 3355              		.loc 2 98 8 view .LVU937
 3356 03f6 0128     		cmp	r0, #1
 3357 03f8 00F09780 		beq	.L270
 3358              	.L212:
 100:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3359              		.loc 2 100 5 is_stmt 1 view .LVU938
 100:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3360              		.loc 2 100 9 is_stmt 0 view .LVU939
 3361 03fc FFF7FEFF 		bl	cur_shift
 3362              	.LVL291:
 100:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3363              		.loc 2 100 8 view .LVU940
 3364 0400 0028     		cmp	r0, #0
 3365 0402 E3D1     		bne	.L219
 100:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3366              		.loc 2 100 33 is_stmt 1 view .LVU941
 100:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3367              		.loc 2 100 67 is_stmt 0 view .LVU942
 3368 0404 3168     		ldr	r1, [r6]
 3369 0406 5D4A     		ldr	r2, .L280+8
 3370 0408 D023     		movs	r3, #208
 3371 040a 03FB01F3 		mul	r3, r3, r1
 3372 040e D018     		adds	r0, r2, r3
 3373 0410 D0E91C01 		ldrd	r0, r1, [r0, #112]
 3374 0414 7033     		adds	r3, r3, #112
 3375 0416 D0E7     		b	.L256
 3376              	.L215:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3377              		.loc 2 91 5 is_stmt 1 view .LVU943
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3378              		.loc 2 91 9 is_stmt 0 view .LVU944
 3379 0418 FFF7FEFF 		bl	cur_shift
 3380              	.LVL292:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3381              		.loc 2 91 8 view .LVU945
 3382 041c 0028     		cmp	r0, #0
 3383 041e 42D0     		beq	.L271
  92:src/console.c ****   case KEY_F2:
 3384              		.loc 2 92 5 is_stmt 1 view .LVU946
  92:src/console.c ****   case KEY_F2:
 3385              		.loc 2 92 9 is_stmt 0 view .LVU947
 3386 0420 FFF7FEFF 		bl	cur_shift
 3387              	.LVL293:
  92:src/console.c ****   case KEY_F2:
 3388              		.loc 2 92 8 view .LVU948
 3389 0424 0128     		cmp	r0, #1
 3390 0426 00F09480 		beq	.L272
 3391              	.L214:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3392              		.loc 2 94 5 is_stmt 1 view .LVU949
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3393              		.loc 2 94 9 is_stmt 0 view .LVU950
 3394 042a FFF7FEFF 		bl	cur_shift
 3395              	.LVL294:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3396              		.loc 2 94 8 view .LVU951
ARM GAS  /tmp/cc8tUJXt.s 			page 92


 3397 042e 80B3     		cbz	r0, .L273
  95:src/console.c ****   case KEY_F3:
 3398              		.loc 2 95 5 is_stmt 1 view .LVU952
  95:src/console.c ****   case KEY_F3:
 3399              		.loc 2 95 9 is_stmt 0 view .LVU953
 3400 0430 FFF7FEFF 		bl	cur_shift
 3401              	.LVL295:
  95:src/console.c ****   case KEY_F3:
 3402              		.loc 2 95 8 view .LVU954
 3403 0434 0128     		cmp	r0, #1
 3404 0436 00F08280 		beq	.L274
 3405              	.L213:
  97:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3406              		.loc 2 97 5 is_stmt 1 view .LVU955
  97:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3407              		.loc 2 97 9 is_stmt 0 view .LVU956
 3408 043a FFF7FEFF 		bl	cur_shift
 3409              	.LVL296:
  97:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3410              		.loc 2 97 8 view .LVU957
 3411 043e 0028     		cmp	r0, #0
 3412 0440 D7D1     		bne	.L218
  97:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3413              		.loc 2 97 33 is_stmt 1 view .LVU958
  97:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3414              		.loc 2 97 67 is_stmt 0 view .LVU959
 3415 0442 3168     		ldr	r1, [r6]
 3416 0444 4D4A     		ldr	r2, .L280+8
 3417 0446 D023     		movs	r3, #208
 3418 0448 03FB01F3 		mul	r3, r3, r1
 3419 044c D018     		adds	r0, r2, r3
 3420 044e D0E91401 		ldrd	r0, r1, [r0, #80]
 3421 0452 5033     		adds	r3, r3, #80
 3422 0454 B1E7     		b	.L256
 3423              	.L206:
  76:src/console.c ****       case SHIFT_G:
 3424              		.loc 2 76 2 is_stmt 1 view .LVU960
  78:src/console.c **** 	break;
 3425              		.loc 2 78 2 view .LVU961
  78:src/console.c **** 	break;
 3426              		.loc 2 78 9 is_stmt 0 view .LVU962
 3427 0456 4A4B     		ldr	r3, .L280+12
 3428 0458 E8E6     		b	.L258
 3429              	.L221:
 107:src/console.c ****   }
 3430              		.loc 2 107 5 is_stmt 1 view .LVU963
 107:src/console.c ****   }
 3431              		.loc 2 107 9 is_stmt 0 view .LVU964
 3432 045a FFF7FEFF 		bl	cur_shift
 3433              	.LVL297:
 107:src/console.c ****   }
 3434              		.loc 2 107 8 view .LVU965
 3435 045e 0128     		cmp	r0, #1
 3436 0460 45D0     		beq	.L275
 3437              	.L208:
 110:src/console.c ****   case SHIFT_N:    
 3438              		.loc 2 110 3 is_stmt 1 view .LVU966
ARM GAS  /tmp/cc8tUJXt.s 			page 93


 110:src/console.c ****   case SHIFT_N:    
 3439              		.loc 2 110 11 is_stmt 0 view .LVU967
 3440 0462 FFF7FEFF 		bl	cur_shift
 3441              	.LVL298:
 110:src/console.c ****   case SHIFT_N:    
 3442              		.loc 2 110 3 view .LVU968
 3443 0466 0128     		cmp	r0, #1
 3444 0468 27D0     		beq	.L222
 3445 046a 0228     		cmp	r0, #2
 3446 046c 29D0     		beq	.L223
 3447 046e 30B3     		cbz	r0, .L224
  55:src/console.c **** 
 3448              		.loc 2 55 41 view .LVU969
 3449 0470 5FFA8AFA 		uxtb	r10, r10
 3450              	.LVL299:
  55:src/console.c **** 
 3451              		.loc 2 55 41 view .LVU970
 3452              	.LBE138:
 3453              	.LBE166:
 459:src/console.c **** 	set_menu ( remapped.shift );
 3454              		.loc 2 459 7 is_stmt 1 view .LVU971
 459:src/console.c **** 	set_menu ( remapped.shift );
 3455              		.loc 2 459 10 is_stmt 0 view .LVU972
 3456 0474 BAF12F0F 		cmp	r10, #47
 3457 0478 32D0     		beq	.L276
 3458              	.LBB167:
 3459              	.LBB139:
 121:src/console.c ****   }
 3460              		.loc 2 121 12 view .LVU973
 3461 047a 0025     		movs	r5, #0
 3462 047c 56E6     		b	.L225
 3463              	.LVL300:
 3464              	.L267:
  72:src/console.c **** 	break;
 3465              		.loc 2 72 2 is_stmt 1 view .LVU974
  72:src/console.c **** 	break;
 3466              		.loc 2 72 21 is_stmt 0 view .LVU975
 3467 047e 414A     		ldr	r2, .L280+16
 3468 0480 92E80300 		ldm	r2, {r0, r1}
 3469 0484 0DF10809 		add	r9, sp, #8
 3470 0488 89E80300 		stm	r9, {r0, r1}
 3471              	.LVL301:
  72:src/console.c **** 	break;
 3472              		.loc 2 72 21 view .LVU976
 3473              	.LBE139:
 3474              	.LBE167:
 459:src/console.c **** 	set_menu ( remapped.shift );
 3475              		.loc 2 459 7 is_stmt 1 view .LVU977
 475:src/console.c **** 	SET_ST(STAT_MENU);
 3476              		.loc 2 475 7 view .LVU978
 482:src/console.c **** 	remapped = do_multi (remapped);
 3477              		.loc 2 482 7 view .LVU979
 486:src/console.c ****       process_keycode_with_shift(remapped);
 3478              		.loc 2 486 7 view .LVU980
 3479              	.LBB168:
 3480              	.LBB140:
  72:src/console.c **** 	break;
ARM GAS  /tmp/cc8tUJXt.s 			page 94


 3481              		.loc 2 72 21 is_stmt 0 view .LVU981
 3482 048c 4FF0290A 		mov	r10, #41
 3483              	.LVL302:
  72:src/console.c **** 	break;
 3484              		.loc 2 72 21 view .LVU982
 3485 0490 72E6     		b	.L205
 3486              	.LVL303:
 3487              	.L273:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3488              		.loc 2 94 33 is_stmt 1 view .LVU983
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3489              		.loc 2 94 67 is_stmt 0 view .LVU984
 3490 0492 3168     		ldr	r1, [r6]
 3491 0494 394A     		ldr	r2, .L280+8
 3492 0496 D023     		movs	r3, #208
 3493 0498 03FB01F3 		mul	r3, r3, r1
 3494 049c D018     		adds	r0, r2, r3
 3495 049e D0E90C01 		ldrd	r0, r1, [r0, #48]
 3496 04a2 3033     		adds	r3, r3, #48
 3497 04a4 89E7     		b	.L256
 3498              	.L271:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3499              		.loc 2 91 33 is_stmt 1 view .LVU985
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3500              		.loc 2 91 67 is_stmt 0 view .LVU986
 3501 04a6 3168     		ldr	r1, [r6]
 3502 04a8 344A     		ldr	r2, .L280+8
 3503 04aa D023     		movs	r3, #208
 3504 04ac 03FB01F3 		mul	r3, r3, r1
 3505 04b0 D018     		adds	r0, r2, r3
 3506 04b2 D0E90401 		ldrd	r0, r1, [r0, #16]
 3507 04b6 1033     		adds	r3, r3, #16
 3508 04b8 7FE7     		b	.L256
 3509              	.L222:
 113:src/console.c ****   case SHIFT_F:
 3510              		.loc 2 113 5 is_stmt 1 view .LVU987
 115:src/console.c ****     break;
 3511              		.loc 2 115 5 view .LVU988
 115:src/console.c ****     break;
 3512              		.loc 2 115 26 is_stmt 0 view .LVU989
 3513 04ba 334B     		ldr	r3, .L280+20
 3514 04bc 27E6     		b	.L257
 3515              	.L224:
 112:src/console.c ****     break;
 3516              		.loc 2 112 5 is_stmt 1 view .LVU990
 112:src/console.c ****     break;
 3517              		.loc 2 112 24 is_stmt 0 view .LVU991
 3518 04be 334B     		ldr	r3, .L280+24
 3519 04c0 25E6     		b	.L257
 3520              	.L223:
 116:src/console.c ****   case SHIFT_G:
 3521              		.loc 2 116 5 is_stmt 1 view .LVU992
 118:src/console.c ****     break;
 3522              		.loc 2 118 5 view .LVU993
 118:src/console.c ****     break;
 3523              		.loc 2 118 26 is_stmt 0 view .LVU994
 3524 04c2 334B     		ldr	r3, .L280+28
ARM GAS  /tmp/cc8tUJXt.s 			page 95


 3525 04c4 03EBCA02 		add	r2, r3, r10, lsl #3
 3526 04c8 92E80300 		ldm	r2, {r0, r1}
 3527 04cc 0DF10809 		add	r9, sp, #8
 3528 04d0 89E80300 		stm	r9, {r0, r1}
 3529 04d4 13F83AA0 		ldrb	r10, [r3, r10, lsl #3]	@ zero_extendqisi2
 3530              	.LVL304:
 118:src/console.c ****     break;
 3531              		.loc 2 118 26 view .LVU995
 3532 04d8 0D46     		mov	r5, r1
 3533              	.LVL305:
 118:src/console.c ****     break;
 3534              		.loc 2 118 26 view .LVU996
 3535 04da 23E6     		b	.L201
 3536              	.LVL306:
 3537              	.L237:
  70:src/console.c ****       case SHIFT_N:
 3538              		.loc 2 70 7 view .LVU997
 3539 04dc 0025     		movs	r5, #0
 3540 04de 49E6     		b	.L259
 3541              	.LVL307:
 3542              	.L276:
  70:src/console.c ****       case SHIFT_N:
 3543              		.loc 2 70 7 view .LVU998
 3544              	.LBE140:
 3545              	.LBE168:
 460:src/console.c **** 	display_current_menu ();
 3546              		.loc 2 460 2 is_stmt 1 view .LVU999
 3547              	.LBB169:
  86:src/menu.c    ****   int m = current_menu;
 3548              		.loc 1 86 6 view .LVU1000
 3549              	.LBB154:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3550              		.loc 1 87 3 view .LVU1001
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3551              		.loc 1 87 7 is_stmt 0 view .LVU1002
 3552 04e0 3368     		ldr	r3, [r6]
 3553              	.LVL308:
  88:src/menu.c    ****     current_menu = default_menu;
 3554              		.loc 1 88 3 is_stmt 1 view .LVU1003
  88:src/menu.c    ****     current_menu = default_menu;
 3555              		.loc 1 88 6 is_stmt 0 view .LVU1004
 3556 04e2 002B     		cmp	r3, #0
 3557 04e4 3FD0     		beq	.L277
 3558              	.LBE154:
 3559              	.LBE169:
 3560              	.LBB170:
 3561              	.LBB141:
 121:src/console.c ****   }
 3562              		.loc 2 121 12 view .LVU1005
 3563 04e6 0025     		movs	r5, #0
 3564 04e8 0DF10809 		add	r9, sp, #8
 3565 04ec B1E6     		b	.L226
 3566              	.LVL309:
 3567              	.L275:
 107:src/console.c ****   }
 3568              		.loc 2 107 33 is_stmt 1 view .LVU1006
 107:src/console.c ****   }
ARM GAS  /tmp/cc8tUJXt.s 			page 96


 3569              		.loc 2 107 67 is_stmt 0 view .LVU1007
 3570 04ee 3168     		ldr	r1, [r6]
 3571 04f0 224A     		ldr	r2, .L280+8
 3572 04f2 D023     		movs	r3, #208
 3573 04f4 03FB01F3 		mul	r3, r3, r1
 3574 04f8 D018     		adds	r0, r2, r3
 3575 04fa D0E92E01 		ldrd	r0, r1, [r0, #184]
 3576 04fe B833     		adds	r3, r3, #184
 3577 0500 5BE7     		b	.L256
 3578              	.L268:
 104:src/console.c ****   case KEY_F6:
 3579              		.loc 2 104 33 is_stmt 1 view .LVU1008
 104:src/console.c ****   case KEY_F6:
 3580              		.loc 2 104 67 is_stmt 0 view .LVU1009
 3581 0502 3168     		ldr	r1, [r6]
 3582 0504 1D4A     		ldr	r2, .L280+8
 3583 0506 D023     		movs	r3, #208
 3584 0508 03FB01F3 		mul	r3, r3, r1
 3585 050c D018     		adds	r0, r2, r3
 3586 050e D0E92601 		ldrd	r0, r1, [r0, #152]
 3587 0512 9833     		adds	r3, r3, #152
 3588 0514 51E7     		b	.L256
 3589              	.L269:
 101:src/console.c ****   case KEY_F5:
 3590              		.loc 2 101 33 is_stmt 1 view .LVU1010
 101:src/console.c ****   case KEY_F5:
 3591              		.loc 2 101 67 is_stmt 0 view .LVU1011
 3592 0516 3168     		ldr	r1, [r6]
 3593 0518 184A     		ldr	r2, .L280+8
 3594 051a D023     		movs	r3, #208
 3595 051c 03FB01F3 		mul	r3, r3, r1
 3596 0520 D018     		adds	r0, r2, r3
 3597 0522 D0E91E01 		ldrd	r0, r1, [r0, #120]
 3598 0526 7833     		adds	r3, r3, #120
 3599 0528 47E7     		b	.L256
 3600              	.L270:
  98:src/console.c ****   case KEY_F4:
 3601              		.loc 2 98 33 is_stmt 1 view .LVU1012
  98:src/console.c ****   case KEY_F4:
 3602              		.loc 2 98 67 is_stmt 0 view .LVU1013
 3603 052a 3168     		ldr	r1, [r6]
 3604 052c 134A     		ldr	r2, .L280+8
 3605 052e D023     		movs	r3, #208
 3606 0530 03FB01F3 		mul	r3, r3, r1
 3607 0534 D018     		adds	r0, r2, r3
 3608 0536 D0E91601 		ldrd	r0, r1, [r0, #88]
 3609 053a 5833     		adds	r3, r3, #88
 3610 053c 3DE7     		b	.L256
 3611              	.L274:
  95:src/console.c ****   case KEY_F3:
 3612              		.loc 2 95 33 is_stmt 1 view .LVU1014
  95:src/console.c ****   case KEY_F3:
 3613              		.loc 2 95 67 is_stmt 0 view .LVU1015
 3614 053e 3168     		ldr	r1, [r6]
 3615 0540 0E4A     		ldr	r2, .L280+8
 3616 0542 D023     		movs	r3, #208
 3617 0544 03FB01F3 		mul	r3, r3, r1
ARM GAS  /tmp/cc8tUJXt.s 			page 97


 3618 0548 D018     		adds	r0, r2, r3
 3619 054a D0E90E01 		ldrd	r0, r1, [r0, #56]
 3620 054e 3833     		adds	r3, r3, #56
 3621 0550 33E7     		b	.L256
 3622              	.L272:
  92:src/console.c ****   case KEY_F2:
 3623              		.loc 2 92 33 is_stmt 1 view .LVU1016
  92:src/console.c ****   case KEY_F2:
 3624              		.loc 2 92 67 is_stmt 0 view .LVU1017
 3625 0552 3168     		ldr	r1, [r6]
 3626 0554 094A     		ldr	r2, .L280+8
 3627 0556 D023     		movs	r3, #208
 3628 0558 03FB01F3 		mul	r3, r3, r1
 3629 055c D018     		adds	r0, r2, r3
 3630 055e D0E90601 		ldrd	r0, r1, [r0, #24]
 3631 0562 1833     		adds	r3, r3, #24
 3632 0564 29E7     		b	.L256
 3633              	.LVL310:
 3634              	.L277:
  92:src/console.c ****   case KEY_F2:
 3635              		.loc 2 92 67 view .LVU1018
 3636              	.LBE141:
 3637              	.LBE170:
 3638              	.LBB171:
 3639              	.LBB155:
  89:src/menu.c    ****   }
 3640              		.loc 1 89 5 is_stmt 1 view .LVU1019
  89:src/menu.c    ****   }
 3641              		.loc 1 89 18 is_stmt 0 view .LVU1020
 3642 0566 0B4A     		ldr	r2, .L280+32
 3643 0568 1568     		ldr	r5, [r2]
 3644 056a 3560     		str	r5, [r6]
  97:src/menu.c    **** }
 3645              		.loc 1 97 3 is_stmt 1 view .LVU1021
 3646 056c 0DF10809 		add	r9, sp, #8
 3647 0570 72E6     		b	.L227
 3648              	.L281:
 3649 0572 00BF     		.align	2
 3650              	.L280:
 3651 0574 00000000 		.word	.LANCHOR3
 3652 0578 E0000000 		.word	.LANCHOR10+224
 3653 057c 00000000 		.word	.LANCHOR4
 3654 0580 00000000 		.word	.LANCHOR11
 3655 0584 E0000000 		.word	.LANCHOR9+224
 3656 0588 00000000 		.word	.LANCHOR10
 3657 058c 00000000 		.word	.LANCHOR9
 3658 0590 00000000 		.word	.LANCHOR13
 3659 0594 00000000 		.word	.LANCHOR2
 3660              	.LBE155:
 3661              	.LBE171:
 3662              		.cfi_endproc
 3663              	.LFE28:
 3665              		.global	n_p
 3666              		.comm	print_string,22,4
 3667              		.global	spaces
 3668              		.global	release
 3669              		.global	h_shift
ARM GAS  /tmp/cc8tUJXt.s 			page 98


 3670              		.global	g_shift
 3671              		.global	f_shift
 3672              		.global	heartbeat
 3673              		.global	no_key
 3674              		.global	MID_MENU
 3675              		.section	.rodata.str1.4,"aMS",%progbits,1
 3676              		.align	2
 3677              	.LC12:
 3678 0000 53797374 		.ascii	"System!\000"
 3678      656D2100 
 3679              		.global	mid_menu
 3680              		.section	.bss.current_menu,"aw",%nobits
 3681              		.align	2
 3682              		.set	.LANCHOR1,. + 0
 3685              	current_menu:
 3686 0000 00000000 		.space	4
 3687              		.section	.bss.default_menu,"aw",%nobits
 3688              		.align	2
 3689              		.set	.LANCHOR2,. + 0
 3692              	default_menu:
 3693 0000 00000000 		.space	4
 3694              		.section	.bss.last_menu,"aw",%nobits
 3695              		.align	2
 3696              		.set	.LANCHOR3,. + 0
 3699              	last_menu:
 3700 0000 00000000 		.space	4
 3701              		.section	.bss.mdots,"aw",%nobits
 3702              		.align	2
 3703              		.set	.LANCHOR0,. + 0
 3706              	mdots:
 3707 0000 00000000 		.space	400
 3707      00000000 
 3707      00000000 
 3707      00000000 
 3707      00000000 
 3708              		.section	.bss.n_p,"aw",%nobits
 3709              		.align	2
 3712              	n_p:
 3713 0000 00000000 		.space	4
 3714              		.section	.bss.start_ticks,"aw",%nobits
 3715              		.align	2
 3716              		.set	.LANCHOR5,. + 0
 3719              	start_ticks:
 3720 0000 00000000 		.space	4
 3721              		.section	.data.f_shift,"aw"
 3722              		.align	2
 3723              		.set	.LANCHOR14,. + 0
 3726              	f_shift:
 3727 0000 29       		.byte	41
 3728 0001 000000   		.space	3
 3729 0004 FFFFFFFF 		.word	-1
 3730              		.section	.data.g_shift,"aw"
 3731              		.align	2
 3732              		.set	.LANCHOR15,. + 0
 3735              	g_shift:
 3736 0000 2A       		.byte	42
 3737 0001 000000   		.space	3
ARM GAS  /tmp/cc8tUJXt.s 			page 99


 3738 0004 FFFFFFFF 		.word	-1
 3739              		.section	.data.h_shift,"aw"
 3740              		.align	2
 3741              		.set	.LANCHOR11,. + 0
 3744              	h_shift:
 3745 0000 2B       		.byte	43
 3746 0001 000000   		.space	3
 3747 0004 FFFFFFFF 		.word	-1
 3748              		.section	.data.heartbeat,"aw"
 3749              		.align	2
 3750              		.set	.LANCHOR17,. + 0
 3753              	heartbeat:
 3754 0000 62       		.byte	98
 3755 0001 000000   		.space	3
 3756 0004 FFFFFFFF 		.word	-1
 3757              		.section	.data.no_key,"aw"
 3758              		.align	2
 3759              		.set	.LANCHOR7,. + 0
 3762              	no_key:
 3763 0000 2E       		.byte	46
 3764 0001 000000   		.space	3
 3765 0004 00000000 		.word	0
 3766              		.section	.data.release,"aw"
 3767              		.align	2
 3768              		.set	.LANCHOR8,. + 0
 3771              	release:
 3772 0000 63       		.byte	99
 3773 0001 000000   		.space	3
 3774 0004 FFFFFFFF 		.word	-1
 3775              		.section	.data.spaces,"aw"
 3776              		.align	2
 3777              		.set	.LANCHOR6,. + 0
 3780              	spaces:
 3781 0000 20202020 		.ascii	"                     \000"
 3781      20202020 
 3781      20202020 
 3781      20202020 
 3781      20202020 
 3782              		.section	.rodata.MID_MENU,"a"
 3783              		.align	2
 3784              		.set	.LANCHOR16,. + 0
 3787              	MID_MENU:
 3788 0000 00000000 		.word	.LC12
 3789 0004 00000000 		.word	mid_menu
 3790 0008 00000000 		.word	0
 3791 000c 00000000 		.word	0
 3792              		.section	.rodata.Menus,"a"
 3793              		.align	2
 3794              		.set	.LANCHOR4,. + 0
 3797              	Menus:
 3798 0000 426C616E 		.ascii	"Blank\000"
 3798      6B00
 3799 0006 00000000 		.space	9
 3799      00000000 
 3799      00
 3800 000f 00       		.space	1
 3801 0010 2E       		.byte	46
ARM GAS  /tmp/cc8tUJXt.s 			page 100


 3802 0011 000000   		.space	3
 3803 0014 FFFFFFFF 		.word	-1
 3804 0018 2E       		.byte	46
 3805 0019 000000   		.space	3
 3806 001c FFFFFFFF 		.word	-1
 3807 0020 00       		.ascii	"\000"
 3808 0021 00000000 		.space	7
 3808      000000
 3809 0028 00       		.ascii	"\000"
 3810 0029 00000000 		.space	7
 3810      000000
 3811 0030 2E       		.byte	46
 3812 0031 000000   		.space	3
 3813 0034 FFFFFFFF 		.word	-1
 3814 0038 2E       		.byte	46
 3815 0039 000000   		.space	3
 3816 003c FFFFFFFF 		.word	-1
 3817 0040 00       		.ascii	"\000"
 3818 0041 00000000 		.space	7
 3818      000000
 3819 0048 00       		.ascii	"\000"
 3820 0049 00000000 		.space	7
 3820      000000
 3821 0050 2E       		.byte	46
 3822 0051 000000   		.space	3
 3823 0054 FFFFFFFF 		.word	-1
 3824 0058 2E       		.byte	46
 3825 0059 000000   		.space	3
 3826 005c FFFFFFFF 		.word	-1
 3827 0060 00       		.ascii	"\000"
 3828 0061 00000000 		.space	7
 3828      000000
 3829 0068 00       		.ascii	"\000"
 3830 0069 00000000 		.space	7
 3830      000000
 3831 0070 2E       		.byte	46
 3832 0071 000000   		.space	3
 3833 0074 FFFFFFFF 		.word	-1
 3834 0078 2E       		.byte	46
 3835 0079 000000   		.space	3
 3836 007c FFFFFFFF 		.word	-1
 3837 0080 00       		.ascii	"\000"
 3838 0081 00000000 		.space	7
 3838      000000
 3839 0088 00       		.ascii	"\000"
 3840 0089 00000000 		.space	7
 3840      000000
 3841 0090 2C       		.byte	44
 3842 0091 000000   		.space	3
 3843 0094 FFFFFFFF 		.word	-1
 3844 0098 2E       		.byte	46
 3845 0099 000000   		.space	3
 3846 009c FFFFFFFF 		.word	-1
 3847 00a0 2D2D0D00 		.ascii	"--\015\000"
 3848 00a4 00000000 		.space	4
 3849 00a8 00       		.ascii	"\000"
 3850 00a9 00000000 		.space	7
ARM GAS  /tmp/cc8tUJXt.s 			page 101


 3850      000000
 3851 00b0 2D       		.byte	45
 3852 00b1 000000   		.space	3
 3853 00b4 FFFFFFFF 		.word	-1
 3854 00b8 2E       		.byte	46
 3855 00b9 000000   		.space	3
 3856 00bc FFFFFFFF 		.word	-1
 3857 00c0 43505800 		.ascii	"CPX\000"
 3858 00c4 00000000 		.space	4
 3859 00c8 00       		.ascii	"\000"
 3860 00c9 00000000 		.space	7
 3860      000000
 3861 00d0 436C6561 		.ascii	"Clear\000"
 3861      7200
 3862 00d6 00000000 		.space	9
 3862      00000000 
 3862      00
 3863 00df 00       		.space	1
 3864 00e0 10       		.byte	16
 3865 00e1 000000   		.space	3
 3866 00e4 01000000 		.word	1
 3867 00e8 2E       		.byte	46
 3868 00e9 000000   		.space	3
 3869 00ec FFFFFFFF 		.word	-1
 3870 00f0 434C5072 		.ascii	"CLProg\000"
 3870      6F6700
 3871 00f7 00       		.space	1
 3872 00f8 00       		.ascii	"\000"
 3873 00f9 00000000 		.space	7
 3873      000000
 3874 0100 10       		.byte	16
 3875 0101 000000   		.space	3
 3876 0104 02000000 		.word	2
 3877 0108 2E       		.byte	46
 3878 0109 000000   		.space	3
 3879 010c FFFFFFFF 		.word	-1
 3880 0110 434C9100 		.ascii	"CL\221\000"
 3881 0114 00000000 		.space	4
 3882 0118 00       		.ascii	"\000"
 3883 0119 00000000 		.space	7
 3883      000000
 3884 0120 10       		.byte	16
 3885 0121 000000   		.space	3
 3886 0124 03000000 		.word	3
 3887 0128 2E       		.byte	46
 3888 0129 000000   		.space	3
 3889 012c FFFFFFFF 		.word	-1
 3890 0130 434C2058 		.ascii	"CL X\000"
 3890      00
 3891 0135 000000   		.space	3
 3892 0138 00       		.ascii	"\000"
 3893 0139 00000000 		.space	7
 3893      000000
 3894 0140 2E       		.byte	46
 3895 0141 000000   		.space	3
 3896 0144 FFFFFFFF 		.word	-1
 3897 0148 2E       		.byte	46
ARM GAS  /tmp/cc8tUJXt.s 			page 102


 3898 0149 000000   		.space	3
 3899 014c FFFFFFFF 		.word	-1
 3900 0150 00       		.ascii	"\000"
 3901 0151 00000000 		.space	7
 3901      000000
 3902 0158 00       		.ascii	"\000"
 3903 0159 00000000 		.space	7
 3903      000000
 3904 0160 2C       		.byte	44
 3905 0161 000000   		.space	3
 3906 0164 FFFFFFFF 		.word	-1
 3907 0168 2E       		.byte	46
 3908 0169 000000   		.space	3
 3909 016c FFFFFFFF 		.word	-1
 3910 0170 2D2D0D00 		.ascii	"--\015\000"
 3911 0174 00000000 		.space	4
 3912 0178 00       		.ascii	"\000"
 3913 0179 00000000 		.space	7
 3913      000000
 3914 0180 2D       		.byte	45
 3915 0181 000000   		.space	3
 3916 0184 FFFFFFFF 		.word	-1
 3917 0188 2E       		.byte	46
 3918 0189 000000   		.space	3
 3919 018c FFFFFFFF 		.word	-1
 3920 0190 43505800 		.ascii	"CPX\000"
 3921 0194 00000000 		.space	4
 3922 0198 00       		.ascii	"\000"
 3923 0199 00000000 		.space	7
 3923      000000
 3924 01a0 44495350 		.ascii	"DISP\000"
 3924      00
 3925 01a5 00000000 		.space	10
 3925      00000000 
 3925      0000
 3926 01af 00       		.space	1
 3927 01b0 00       		.byte	0
 3928 01b1 000000   		.space	3
 3929 01b4 03000000 		.word	3
 3930 01b8 05       		.byte	5
 3931 01b9 000000   		.space	3
 3932 01bc 01000000 		.word	1
 3933 01c0 414C4C00 		.ascii	"ALL\000"
 3934 01c4 00000000 		.space	4
 3935 01c8 6120622F 		.ascii	"a b/c\000"
 3935      6300
 3936 01ce 0000     		.space	2
 3937 01d0 01       		.byte	1
 3938 01d1 000000   		.space	3
 3939 01d4 03000000 		.word	3
 3940 01d8 05       		.byte	5
 3941 01d9 000000   		.space	3
 3942 01dc 02000000 		.word	2
 3943 01e0 46495800 		.ascii	"FIX\000"
 3944 01e4 00000000 		.space	4
 3945 01e8 642F6300 		.ascii	"d/c\000"
 3946 01ec 00000000 		.space	4
ARM GAS  /tmp/cc8tUJXt.s 			page 103


 3947 01f0 02       		.byte	2
 3948 01f1 000000   		.space	3
 3949 01f4 03000000 		.word	3
 3950 01f8 06       		.byte	6
 3951 01f9 000000   		.space	3
 3952 01fc 01000000 		.word	1
 3953 0200 53434900 		.ascii	"SCI\000"
 3954 0204 00000000 		.space	4
 3955 0208 482E4D53 		.ascii	"H.MS\000"
 3955      00
 3956 020d 000000   		.space	3
 3957 0210 03       		.byte	3
 3958 0211 000000   		.space	3
 3959 0214 03000000 		.word	3
 3960 0218 07       		.byte	7
 3961 0219 000000   		.space	3
 3962 021c 01000000 		.word	1
 3963 0220 454E4700 		.ascii	"ENG\000"
 3964 0224 00000000 		.space	4
 3965 0228 482E6400 		.ascii	"H.d\000"
 3966 022c 00000000 		.space	4
 3967 0230 2C       		.byte	44
 3968 0231 000000   		.space	3
 3969 0234 FFFFFFFF 		.word	-1
 3970 0238 26       		.byte	38
 3971 0239 000000   		.space	3
 3972 023c 03000000 		.word	3
 3973 0240 2D2D0D00 		.ascii	"--\015\000"
 3974 0244 00000000 		.space	4
 3975 0248 2E2F2C00 		.ascii	"./,\000"
 3976 024c 00000000 		.space	4
 3977 0250 2D       		.byte	45
 3978 0251 000000   		.space	3
 3979 0254 FFFFFFFF 		.word	-1
 3980 0258 2E       		.byte	46
 3981 0259 000000   		.space	3
 3982 025c FFFFFFFF 		.word	-1
 3983 0260 43505800 		.ascii	"CPX\000"
 3984 0264 00000000 		.space	4
 3985 0268 00       		.ascii	"\000"
 3986 0269 00000000 		.space	7
 3986      000000
 3987 0270 42415345 		.ascii	"BASE\000"
 3987      00
 3988 0275 00000000 		.space	10
 3988      00000000 
 3988      0000
 3989 027f 00       		.space	1
 3990 0280 0E       		.byte	14
 3991 0281 000000   		.space	3
 3992 0284 01000000 		.word	1
 3993 0288 0E       		.byte	14
 3994 0289 000000   		.space	3
 3995 028c 03000000 		.word	3
 3996 0290 42494E00 		.ascii	"BIN\000"
 3997 0294 00000000 		.space	4
 3998 0298 6E6F7400 		.ascii	"not\000"
ARM GAS  /tmp/cc8tUJXt.s 			page 104


 3999 029c 00000000 		.space	4
 4000 02a0 0E       		.byte	14
 4001 02a1 000000   		.space	3
 4002 02a4 02000000 		.word	2
 4003 02a8 13       		.byte	19
 4004 02a9 000000   		.space	3
 4005 02ac 03000000 		.word	3
 4006 02b0 4F435400 		.ascii	"OCT\000"
 4007 02b4 00000000 		.space	4
 4008 02b8 616E6400 		.ascii	"and\000"
 4009 02bc 00000000 		.space	4
 4010 02c0 0F       		.byte	15
 4011 02c1 000000   		.space	3
 4012 02c4 01000000 		.word	1
 4013 02c8 14       		.byte	20
 4014 02c9 000000   		.space	3
 4015 02cc 03000000 		.word	3
 4016 02d0 44454300 		.ascii	"DEC\000"
 4017 02d4 00000000 		.space	4
 4018 02d8 6F7200   		.ascii	"or\000"
 4019 02db 00000000 		.space	5
 4019      00
 4020 02e0 0F       		.byte	15
 4021 02e1 000000   		.space	3
 4022 02e4 02000000 		.word	2
 4023 02e8 15       		.byte	21
 4024 02e9 000000   		.space	3
 4025 02ec 03000000 		.word	3
 4026 02f0 48455800 		.ascii	"HEX\000"
 4027 02f4 00000000 		.space	4
 4028 02f8 786F7200 		.ascii	"xor\000"
 4029 02fc 00000000 		.space	4
 4030 0300 2C       		.byte	44
 4031 0301 000000   		.space	3
 4032 0304 FFFFFFFF 		.word	-1
 4033 0308 16       		.byte	22
 4034 0309 000000   		.space	3
 4035 030c 03000000 		.word	3
 4036 0310 2D2D0D00 		.ascii	"--\015\000"
 4037 0314 00000000 		.space	4
 4038 0318 524D4452 		.ascii	"RMDR\000"
 4038      00
 4039 031d 000000   		.space	3
 4040 0320 2D       		.byte	45
 4041 0321 000000   		.space	3
 4042 0324 FFFFFFFF 		.word	-1
 4043 0328 07       		.byte	7
 4044 0329 000000   		.space	3
 4045 032c 01000000 		.word	1
 4046 0330 43505800 		.ascii	"CPX\000"
 4047 0334 00000000 		.space	4
 4048 0338 482E6400 		.ascii	"H.d\000"
 4049 033c 00000000 		.space	4
 4050 0340 414E474C 		.ascii	"ANGLES\000"
 4050      455300
 4051 0347 00000000 		.space	8
 4051      00000000 
ARM GAS  /tmp/cc8tUJXt.s 			page 105


 4052 034f 00       		.space	1
 4053 0350 06       		.byte	6
 4054 0351 000000   		.space	3
 4055 0354 02000000 		.word	2
 4056 0358 04       		.byte	4
 4057 0359 000000   		.space	3
 4058 035c 01000000 		.word	1
 4059 0360 44454700 		.ascii	"DEG\000"
 4060 0364 00000000 		.space	4
 4061 0368 500D5200 		.ascii	"P\015R\000"
 4062 036c 00000000 		.space	4
 4063 0370 07       		.byte	7
 4064 0371 000000   		.space	3
 4065 0374 02000000 		.word	2
 4066 0378 04       		.byte	4
 4067 0379 000000   		.space	3
 4068 037c 02000000 		.word	2
 4069 0380 52414400 		.ascii	"RAD\000"
 4070 0384 00000000 		.space	4
 4071 0388 520D5000 		.ascii	"R\015P\000"
 4072 038c 00000000 		.space	4
 4073 0390 08       		.byte	8
 4074 0391 000000   		.space	3
 4075 0394 02000000 		.word	2
 4076 0398 00       		.byte	0
 4077 0399 000000   		.space	3
 4078 039c 01000000 		.word	1
 4079 03a0 47524144 		.ascii	"GRAD\000"
 4079      00
 4080 03a5 000000   		.space	3
 4081 03a8 48595000 		.ascii	"HYP\000"
 4082 03ac 00000000 		.space	4
 4083 03b0 06       		.byte	6
 4084 03b1 000000   		.space	3
 4085 03b4 01000000 		.word	1
 4086 03b8 07       		.byte	7
 4087 03b9 000000   		.space	3
 4088 03bc 01000000 		.word	1
 4089 03c0 482E4D53 		.ascii	"H.MS\000"
 4089      00
 4090 03c5 000000   		.space	3
 4091 03c8 482E6400 		.ascii	"H.d\000"
 4092 03cc 00000000 		.space	4
 4093 03d0 2C       		.byte	44
 4094 03d1 000000   		.space	3
 4095 03d4 FFFFFFFF 		.word	-1
 4096 03d8 00       		.byte	0
 4097 03d9 000000   		.space	3
 4098 03dc 02000000 		.word	2
 4099 03e0 2D2D0D00 		.ascii	"--\015\000"
 4100 03e4 00000000 		.space	4
 4101 03e8 4859509D 		.ascii	"HYP\235\000"
 4101      00
 4102 03ed 000000   		.space	3
 4103 03f0 2D       		.byte	45
 4104 03f1 000000   		.space	3
 4105 03f4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc8tUJXt.s 			page 106


 4106 03f8 2E       		.byte	46
 4107 03f9 000000   		.space	3
 4108 03fc FFFFFFFF 		.word	-1
 4109 0400 43505800 		.ascii	"CPX\000"
 4110 0404 00000000 		.space	4
 4111 0408 00       		.ascii	"\000"
 4112 0409 00000000 		.space	7
 4112      000000
 4113 0410 4D495343 		.ascii	"MISC\000"
 4113      00
 4114 0415 00000000 		.space	10
 4114      00000000 
 4114      0000
 4115 041f 00       		.space	1
 4116 0420 25       		.byte	37
 4117 0421 000000   		.space	3
 4118 0424 01000000 		.word	1
 4119 0428 14       		.byte	20
 4120 0429 000000   		.space	3
 4121 042c 01000000 		.word	1
 4122 0430 7C587C00 		.ascii	"|X|\000"
 4123 0434 00000000 		.space	4
 4124 0438 329C00   		.ascii	"2\234\000"
 4125 043b 00000000 		.space	5
 4125      00
 4126 0440 25       		.byte	37
 4127 0441 000000   		.space	3
 4128 0444 02000000 		.word	2
 4129 0448 14       		.byte	20
 4130 0449 000000   		.space	3
 4131 044c 02000000 		.word	2
 4132 0450 524E4400 		.ascii	"RND\000"
 4133 0454 00000000 		.space	4
 4134 0458 4C6F67BA 		.ascii	"Log\272\000"
 4134      00
 4135 045d 000000   		.space	3
 4136 0460 26       		.byte	38
 4137 0461 000000   		.space	3
 4138 0464 01000000 		.word	1
 4139 0468 15       		.byte	21
 4140 0469 000000   		.space	3
 4141 046c 02000000 		.word	2
 4142 0470 49506172 		.ascii	"IPart\000"
 4142      7400
 4143 0476 0000     		.space	2
 4144 0478 4C6F678B 		.ascii	"Log\213\000"
 4144      00
 4145 047d 000000   		.space	3
 4146 0480 26       		.byte	38
 4147 0481 000000   		.space	3
 4148 0484 02000000 		.word	2
 4149 0488 16       		.byte	22
 4150 0489 000000   		.space	3
 4151 048c 02000000 		.word	2
 4152 0490 46506172 		.ascii	"FPart\000"
 4152      7400
 4153 0496 0000     		.space	2
ARM GAS  /tmp/cc8tUJXt.s 			page 107


 4154 0498 7C7C656C 		.ascii	"||el\000"
 4154      00
 4155 049d 000000   		.space	3
 4156 04a0 2C       		.byte	44
 4157 04a1 000000   		.space	3
 4158 04a4 FFFFFFFF 		.word	-1
 4159 04a8 22       		.byte	34
 4160 04a9 000000   		.space	3
 4161 04ac 02000000 		.word	2
 4162 04b0 2D2D0D00 		.ascii	"--\015\000"
 4163 04b4 00000000 		.space	4
 4164 04b8 832500   		.ascii	"\203%\000"
 4165 04bb 00000000 		.space	5
 4165      00
 4166 04c0 2D       		.byte	45
 4167 04c1 000000   		.space	3
 4168 04c4 FFFFFFFF 		.word	-1
 4169 04c8 2E       		.byte	46
 4170 04c9 000000   		.space	3
 4171 04cc FFFFFFFF 		.word	-1
 4172 04d0 43505800 		.ascii	"CPX\000"
 4173 04d4 00000000 		.space	4
 4174 04d8 00       		.ascii	"\000"
 4175 04d9 00000000 		.space	7
 4175      000000
 4176 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 4176      204B6579 
 4176      00
 4177 04e9 00000000 		.space	6
 4177      0000
 4178 04ef 00       		.space	1
 4179 04f0 0D       		.byte	13
 4180 04f1 000000   		.space	3
 4181 04f4 01000000 		.word	1
 4182 04f8 2E       		.byte	46
 4183 04f9 000000   		.space	3
 4184 04fc FFFFFFFF 		.word	-1
 4185 0500 53686F77 		.ascii	"Show\016\000"
 4185      0E00
 4186 0506 0000     		.space	2
 4187 0508 00       		.ascii	"\000"
 4188 0509 00000000 		.space	7
 4188      000000
 4189 0510 0D       		.byte	13
 4190 0511 000000   		.space	3
 4191 0514 02000000 		.word	2
 4192 0518 2E       		.byte	46
 4193 0519 000000   		.space	3
 4194 051c FFFFFFFF 		.word	-1
 4195 0520 53686F77 		.ascii	"Show\015\000"
 4195      0D00
 4196 0526 0000     		.space	2
 4197 0528 00       		.ascii	"\000"
 4198 0529 00000000 		.space	7
 4198      000000
 4199 0530 0D       		.byte	13
 4200 0531 000000   		.space	3
ARM GAS  /tmp/cc8tUJXt.s 			page 108


 4201 0534 03000000 		.word	3
 4202 0538 2E       		.byte	46
 4203 0539 000000   		.space	3
 4204 053c FFFFFFFF 		.word	-1
 4205 0540 78173F00 		.ascii	"x\027?\000"
 4206 0544 00000000 		.space	4
 4207 0548 00       		.ascii	"\000"
 4208 0549 00000000 		.space	7
 4208      000000
 4209 0550 2E       		.byte	46
 4210 0551 000000   		.space	3
 4211 0554 FFFFFFFF 		.word	-1
 4212 0558 2E       		.byte	46
 4213 0559 000000   		.space	3
 4214 055c FFFFFFFF 		.word	-1
 4215 0560 00       		.ascii	"\000"
 4216 0561 00000000 		.space	7
 4216      000000
 4217 0568 00       		.ascii	"\000"
 4218 0569 00000000 		.space	7
 4218      000000
 4219 0570 2C       		.byte	44
 4220 0571 000000   		.space	3
 4221 0574 FFFFFFFF 		.word	-1
 4222 0578 2E       		.byte	46
 4223 0579 000000   		.space	3
 4224 057c FFFFFFFF 		.word	-1
 4225 0580 2D2D0D00 		.ascii	"--\015\000"
 4226 0584 00000000 		.space	4
 4227 0588 00       		.ascii	"\000"
 4228 0589 00000000 		.space	7
 4228      000000
 4229 0590 2D       		.byte	45
 4230 0591 000000   		.space	3
 4231 0594 FFFFFFFF 		.word	-1
 4232 0598 2E       		.byte	46
 4233 0599 000000   		.space	3
 4234 059c FFFFFFFF 		.word	-1
 4235 05a0 43505800 		.ascii	"CPX\000"
 4236 05a4 00000000 		.space	4
 4237 05a8 00       		.ascii	"\000"
 4238 05a9 00000000 		.space	7
 4238      000000
 4239 05b0 50726F67 		.ascii	"Program\000"
 4239      72616D00 
 4240 05b8 00000000 		.space	7
 4240      000000
 4241 05bf 00       		.space	1
 4242 05c0 27       		.byte	39
 4243 05c1 000000   		.space	3
 4244 05c4 01000000 		.word	1
 4245 05c8 28       		.byte	40
 4246 05c9 000000   		.space	3
 4247 05cc 01000000 		.word	1
 4248 05d0 4C424C00 		.ascii	"LBL\000"
 4249 05d4 00000000 		.space	4
 4250 05d8 44534500 		.ascii	"DSE\000"
ARM GAS  /tmp/cc8tUJXt.s 			page 109


 4251 05dc 00000000 		.space	4
 4252 05e0 27       		.byte	39
 4253 05e1 000000   		.space	3
 4254 05e4 02000000 		.word	2
 4255 05e8 28       		.byte	40
 4256 05e9 000000   		.space	3
 4257 05ec 02000000 		.word	2
 4258 05f0 52544E00 		.ascii	"RTN\000"
 4259 05f4 00000000 		.space	4
 4260 05f8 49534700 		.ascii	"ISG\000"
 4261 05fc 00000000 		.space	4
 4262 0600 25       		.byte	37
 4263 0601 000000   		.space	3
 4264 0604 03000000 		.word	3
 4265 0608 2E       		.byte	46
 4266 0609 000000   		.space	3
 4267 060c FFFFFFFF 		.word	-1
 4268 0610 50617573 		.ascii	"Pause\000"
 4268      6500
 4269 0616 0000     		.space	2
 4270 0618 00       		.ascii	"\000"
 4271 0619 00000000 		.space	7
 4271      000000
 4272 0620 12       		.byte	18
 4273 0621 000000   		.space	3
 4274 0624 03000000 		.word	3
 4275 0628 2E       		.byte	46
 4276 0629 000000   		.space	3
 4277 062c FFFFFFFF 		.word	-1
 4278 0630 47544F00 		.ascii	"GTO\000"
 4279 0634 00000000 		.space	4
 4280 0638 00       		.ascii	"\000"
 4281 0639 00000000 		.space	7
 4281      000000
 4282 0640 2C       		.byte	44
 4283 0641 000000   		.space	3
 4284 0644 FFFFFFFF 		.word	-1
 4285 0648 2E       		.byte	46
 4286 0649 000000   		.space	3
 4287 064c FFFFFFFF 		.word	-1
 4288 0650 2D2D0D00 		.ascii	"--\015\000"
 4289 0654 00000000 		.space	4
 4290 0658 00       		.ascii	"\000"
 4291 0659 00000000 		.space	7
 4291      000000
 4292 0660 2D       		.byte	45
 4293 0661 000000   		.space	3
 4294 0664 FFFFFFFF 		.word	-1
 4295 0668 2E       		.byte	46
 4296 0669 000000   		.space	3
 4297 066c FFFFFFFF 		.word	-1
 4298 0670 43505800 		.ascii	"CPX\000"
 4299 0674 00000000 		.space	4
 4300 0678 00       		.ascii	"\000"
 4301 0679 00000000 		.space	7
 4301      000000
 4302 0680 53657475 		.ascii	"Setup 1\000"
ARM GAS  /tmp/cc8tUJXt.s 			page 110


 4302      70203100 
 4303 0688 00000000 		.space	7
 4303      000000
 4304 068f 00       		.space	1
 4305 0690 32       		.byte	50
 4306 0691 000000   		.space	3
 4307 0694 00000000 		.word	0
 4308 0698 30       		.byte	48
 4309 0699 000000   		.space	3
 4310 069c 00000000 		.word	0
 4311 06a0 45584954 		.ascii	"EXIT\000"
 4311      00
 4312 06a5 000000   		.space	3
 4313 06a8 53797374 		.ascii	"System\000"
 4313      656D00
 4314 06af 00       		.space	1
 4315 06b0 31       		.byte	49
 4316 06b1 000000   		.space	3
 4317 06b4 09000000 		.word	9
 4318 06b8 2E       		.byte	46
 4319 06b9 000000   		.space	3
 4320 06bc FFFFFFFF 		.word	-1
 4321 06c0 48454C50 		.ascii	"HELP\000"
 4321      00
 4322 06c5 000000   		.space	3
 4323 06c8 00       		.ascii	"\000"
 4324 06c9 00000000 		.space	7
 4324      000000
 4325 06d0 31       		.byte	49
 4326 06d1 000000   		.space	3
 4327 06d4 02000000 		.word	2
 4328 06d8 31       		.byte	49
 4329 06d9 000000   		.space	3
 4330 06dc 06000000 		.word	6
 4331 06e0 4F6E5354 		.ascii	"OnSTO\000"
 4331      4F00
 4332 06e6 0000     		.space	2
 4333 06e8 53765241 		.ascii	"SvRAM\000"
 4333      4D00
 4334 06ee 0000     		.space	2
 4335 06f0 31       		.byte	49
 4336 06f1 000000   		.space	3
 4337 06f4 03000000 		.word	3
 4338 06f8 31       		.byte	49
 4339 06f9 000000   		.space	3
 4340 06fc 07000000 		.word	7
 4341 0700 4F6E5243 		.ascii	"OnRCL\000"
 4341      4C00
 4342 0706 0000     		.space	2
 4343 0708 4C645241 		.ascii	"LdRAM\000"
 4343      4D00
 4344 070e 0000     		.space	2
 4345 0710 2C       		.byte	44
 4346 0711 000000   		.space	3
 4347 0714 FFFFFFFF 		.word	-1
 4348 0718 2E       		.byte	46
 4349 0719 000000   		.space	3
ARM GAS  /tmp/cc8tUJXt.s 			page 111


 4350 071c FFFFFFFF 		.word	-1
 4351 0720 2D2D0D00 		.ascii	"--\015\000"
 4352 0724 00000000 		.space	4
 4353 0728 00       		.ascii	"\000"
 4354 0729 00000000 		.space	7
 4354      000000
 4355 0730 2D       		.byte	45
 4356 0731 000000   		.space	3
 4357 0734 FFFFFFFF 		.word	-1
 4358 0738 2E       		.byte	46
 4359 0739 000000   		.space	3
 4360 073c FFFFFFFF 		.word	-1
 4361 0740 43505800 		.ascii	"CPX\000"
 4362 0744 00000000 		.space	4
 4363 0748 00       		.ascii	"\000"
 4364 0749 00000000 		.space	7
 4364      000000
 4365 0750 4172726F 		.ascii	"Arrow\000"
 4365      7700
 4366 0756 00000000 		.space	9
 4366      00000000 
 4366      00
 4367 075f 00       		.space	1
 4368 0760 0E       		.byte	14
 4369 0761 000000   		.space	3
 4370 0764 01000000 		.word	1
 4371 0768 06       		.byte	6
 4372 0769 000000   		.space	3
 4373 076c 02000000 		.word	2
 4374 0770 42696E00 		.ascii	"Bin\000"
 4375 0774 00000000 		.space	4
 4376 0778 44454700 		.ascii	"DEG\000"
 4377 077c 00000000 		.space	4
 4378 0780 0E       		.byte	14
 4379 0781 000000   		.space	3
 4380 0784 02000000 		.word	2
 4381 0788 07       		.byte	7
 4382 0789 000000   		.space	3
 4383 078c 02000000 		.word	2
 4384 0790 4F637400 		.ascii	"Oct\000"
 4385 0794 00000000 		.space	4
 4386 0798 52414400 		.ascii	"RAD\000"
 4387 079c 00000000 		.space	4
 4388 07a0 0F       		.byte	15
 4389 07a1 000000   		.space	3
 4390 07a4 01000000 		.word	1
 4391 07a8 08       		.byte	8
 4392 07a9 000000   		.space	3
 4393 07ac 02000000 		.word	2
 4394 07b0 44656300 		.ascii	"Dec\000"
 4395 07b4 00000000 		.space	4
 4396 07b8 47726164 		.ascii	"Grad\000"
 4396      00
 4397 07bd 000000   		.space	3
 4398 07c0 0F       		.byte	15
 4399 07c1 000000   		.space	3
 4400 07c4 02000000 		.word	2
ARM GAS  /tmp/cc8tUJXt.s 			page 112


 4401 07c8 06       		.byte	6
 4402 07c9 000000   		.space	3
 4403 07cc 01000000 		.word	1
 4404 07d0 48657800 		.ascii	"Hex\000"
 4405 07d4 00000000 		.space	4
 4406 07d8 0D484D53 		.ascii	"\015HMS\000"
 4406      00
 4407 07dd 000000   		.space	3
 4408 07e0 2C       		.byte	44
 4409 07e1 000000   		.space	3
 4410 07e4 FFFFFFFF 		.word	-1
 4411 07e8 07       		.byte	7
 4412 07e9 000000   		.space	3
 4413 07ec 01000000 		.word	1
 4414 07f0 2D2D0D00 		.ascii	"--\015\000"
 4415 07f4 00000000 		.space	4
 4416 07f8 484D530D 		.ascii	"HMS\015\000"
 4416      00
 4417 07fd 000000   		.space	3
 4418 0800 2D       		.byte	45
 4419 0801 000000   		.space	3
 4420 0804 FFFFFFFF 		.word	-1
 4421 0808 2E       		.byte	46
 4422 0809 000000   		.space	3
 4423 080c FFFFFFFF 		.word	-1
 4424 0810 43505800 		.ascii	"CPX\000"
 4425 0814 00000000 		.space	4
 4426 0818 00       		.ascii	"\000"
 4427 0819 00000000 		.space	7
 4427      000000
 4428 0820 466C6167 		.ascii	"Flags\000"
 4428      7300
 4429 0826 00000000 		.space	9
 4429      00000000 
 4429      00
 4430 082f 00       		.space	1
 4431 0830 1E       		.byte	30
 4432 0831 000000   		.space	3
 4433 0834 01000000 		.word	1
 4434 0838 2E       		.byte	46
 4435 0839 000000   		.space	3
 4436 083c FFFFFFFF 		.word	-1
 4437 0840 53465F00 		.ascii	"SF_\000"
 4438 0844 00000000 		.space	4
 4439 0848 00       		.ascii	"\000"
 4440 0849 00000000 		.space	7
 4440      000000
 4441 0850 1E       		.byte	30
 4442 0851 000000   		.space	3
 4443 0854 02000000 		.word	2
 4444 0858 2E       		.byte	46
 4445 0859 000000   		.space	3
 4446 085c FFFFFFFF 		.word	-1
 4447 0860 43465F00 		.ascii	"CF_\000"
 4448 0864 00000000 		.space	4
 4449 0868 00       		.ascii	"\000"
 4450 0869 00000000 		.space	7
ARM GAS  /tmp/cc8tUJXt.s 			page 113


 4450      000000
 4451 0870 1F       		.byte	31
 4452 0871 000000   		.space	3
 4453 0874 01000000 		.word	1
 4454 0878 2E       		.byte	46
 4455 0879 000000   		.space	3
 4456 087c FFFFFFFF 		.word	-1
 4457 0880 783D3F00 		.ascii	"x=?\000"
 4458 0884 00000000 		.space	4
 4459 0888 00       		.ascii	"\000"
 4460 0889 00000000 		.space	7
 4460      000000
 4461 0890 1F       		.byte	31
 4462 0891 000000   		.space	3
 4463 0894 02000000 		.word	2
 4464 0898 2E       		.byte	46
 4465 0899 000000   		.space	3
 4466 089c FFFFFFFF 		.word	-1
 4467 08a0 780B3F00 		.ascii	"x\013?\000"
 4468 08a4 00000000 		.space	4
 4469 08a8 00       		.ascii	"\000"
 4470 08a9 00000000 		.space	7
 4470      000000
 4471 08b0 2C       		.byte	44
 4472 08b1 000000   		.space	3
 4473 08b4 FFFFFFFF 		.word	-1
 4474 08b8 2E       		.byte	46
 4475 08b9 000000   		.space	3
 4476 08bc FFFFFFFF 		.word	-1
 4477 08c0 2D2D0D00 		.ascii	"--\015\000"
 4478 08c4 00000000 		.space	4
 4479 08c8 00       		.ascii	"\000"
 4480 08c9 00000000 		.space	7
 4480      000000
 4481 08d0 2D       		.byte	45
 4482 08d1 000000   		.space	3
 4483 08d4 FFFFFFFF 		.word	-1
 4484 08d8 2E       		.byte	46
 4485 08d9 000000   		.space	3
 4486 08dc FFFFFFFF 		.word	-1
 4487 08e0 43505800 		.ascii	"CPX\000"
 4488 08e4 00000000 		.space	4
 4489 08e8 00       		.ascii	"\000"
 4490 08e9 00000000 		.space	7
 4490      000000
 4491 08f0 50726F62 		.ascii	"Probability\000"
 4491      6162696C 
 4491      69747900 
 4492 08fc 000000   		.space	3
 4493 08ff 00       		.space	1
 4494 0900 18       		.byte	24
 4495 0901 000000   		.space	3
 4496 0904 03000000 		.word	3
 4497 0908 19       		.byte	25
 4498 0909 000000   		.space	3
 4499 090c 01000000 		.word	1
 4500 0910 46616374 		.ascii	"Fact!\000"
ARM GAS  /tmp/cc8tUJXt.s 			page 114


 4500      2100
 4501 0916 0000     		.space	2
 4502 0918 9400     		.ascii	"\224\000"
 4503 091a 00000000 		.space	6
 4503      0000
 4504 0920 18       		.byte	24
 4505 0921 000000   		.space	3
 4506 0924 01000000 		.word	1
 4507 0928 19       		.byte	25
 4508 0929 000000   		.space	3
 4509 092c 02000000 		.word	2
 4510 0930 43792C78 		.ascii	"Cy,x\000"
 4510      00
 4511 0935 000000   		.space	3
 4512 0938 949D00   		.ascii	"\224\235\000"
 4513 093b 00000000 		.space	5
 4513      00
 4514 0940 18       		.byte	24
 4515 0941 000000   		.space	3
 4516 0944 02000000 		.word	2
 4517 0948 2E       		.byte	46
 4518 0949 000000   		.space	3
 4519 094c FFFFFFFF 		.word	-1
 4520 0950 50792C78 		.ascii	"Py,x\000"
 4520      00
 4521 0955 000000   		.space	3
 4522 0958 00       		.ascii	"\000"
 4523 0959 00000000 		.space	7
 4523      000000
 4524 0960 08       		.byte	8
 4525 0961 000000   		.space	3
 4526 0964 01000000 		.word	1
 4527 0968 2E       		.byte	46
 4528 0969 000000   		.space	3
 4529 096c FFFFFFFF 		.word	-1
 4530 0970 52414E23 		.ascii	"RAN#\000"
 4530      00
 4531 0975 000000   		.space	3
 4532 0978 00       		.ascii	"\000"
 4533 0979 00000000 		.space	7
 4533      000000
 4534 0980 2C       		.byte	44
 4535 0981 000000   		.space	3
 4536 0984 FFFFFFFF 		.word	-1
 4537 0988 2E       		.byte	46
 4538 0989 000000   		.space	3
 4539 098c FFFFFFFF 		.word	-1
 4540 0990 2D2D0D00 		.ascii	"--\015\000"
 4541 0994 00000000 		.space	4
 4542 0998 00       		.ascii	"\000"
 4543 0999 00000000 		.space	7
 4543      000000
 4544 09a0 2D       		.byte	45
 4545 09a1 000000   		.space	3
 4546 09a4 FFFFFFFF 		.word	-1
 4547 09a8 2E       		.byte	46
 4548 09a9 000000   		.space	3
ARM GAS  /tmp/cc8tUJXt.s 			page 115


 4549 09ac FFFFFFFF 		.word	-1
 4550 09b0 43505800 		.ascii	"CPX\000"
 4551 09b4 00000000 		.space	4
 4552 09b8 00       		.ascii	"\000"
 4553 09b9 00000000 		.space	7
 4553      000000
 4554 09c0 53746174 		.ascii	"Statistics\000"
 4554      69737469 
 4554      637300
 4555 09cb 00000000 		.space	4
 4556 09cf 00       		.space	1
 4557 09d0 1A       		.byte	26
 4558 09d1 000000   		.space	3
 4559 09d4 01000000 		.word	1
 4560 09d8 1B       		.byte	27
 4561 09d9 000000   		.space	3
 4562 09dc 03000000 		.word	3
 4563 09e0 58626172 		.ascii	"Xbar\000"
 4563      00
 4564 09e5 000000   		.space	3
 4565 09e8 53554D53 		.ascii	"SUMS\000"
 4565      00
 4566 09ed 000000   		.space	3
 4567 09f0 1B       		.byte	27
 4568 09f1 000000   		.space	3
 4569 09f4 01000000 		.word	1
 4570 09f8 2E       		.byte	46
 4571 09f9 000000   		.space	3
 4572 09fc FFFFFFFF 		.word	-1
 4573 0a00 59686174 		.ascii	"Yhat\000"
 4573      00
 4574 0a05 000000   		.space	3
 4575 0a08 00       		.ascii	"\000"
 4576 0a09 00000000 		.space	7
 4576      000000
 4577 0a10 1A       		.byte	26
 4578 0a11 000000   		.space	3
 4579 0a14 02000000 		.word	2
 4580 0a18 2E       		.byte	46
 4581 0a19 000000   		.space	3
 4582 0a1c FFFFFFFF 		.word	-1
 4583 0a20 7300     		.ascii	"s\000"
 4584 0a22 00000000 		.space	6
 4584      0000
 4585 0a28 00       		.ascii	"\000"
 4586 0a29 00000000 		.space	7
 4586      000000
 4587 0a30 1B       		.byte	27
 4588 0a31 000000   		.space	3
 4589 0a34 02000000 		.word	2
 4590 0a38 2E       		.byte	46
 4591 0a39 000000   		.space	3
 4592 0a3c FFFFFFFF 		.word	-1
 4593 0a40 7200     		.ascii	"r\000"
 4594 0a42 00000000 		.space	6
 4594      0000
 4595 0a48 00       		.ascii	"\000"
ARM GAS  /tmp/cc8tUJXt.s 			page 116


 4596 0a49 00000000 		.space	7
 4596      000000
 4597 0a50 2C       		.byte	44
 4598 0a51 000000   		.space	3
 4599 0a54 FFFFFFFF 		.word	-1
 4600 0a58 2E       		.byte	46
 4601 0a59 000000   		.space	3
 4602 0a5c FFFFFFFF 		.word	-1
 4603 0a60 2D2D0D00 		.ascii	"--\015\000"
 4604 0a64 00000000 		.space	4
 4605 0a68 00       		.ascii	"\000"
 4606 0a69 00000000 		.space	7
 4606      000000
 4607 0a70 2D       		.byte	45
 4608 0a71 000000   		.space	3
 4609 0a74 FFFFFFFF 		.word	-1
 4610 0a78 31       		.byte	49
 4611 0a79 000000   		.space	3
 4612 0a7c 0B000000 		.word	11
 4613 0a80 43505800 		.ascii	"CPX\000"
 4614 0a84 00000000 		.space	4
 4615 0a88 00       		.ascii	"\000"
 4616 0a89 00000000 		.space	7
 4616      000000
 4617 0a90 53657475 		.ascii	"Setup 2\000"
 4617      70203200 
 4618 0a98 00000000 		.space	7
 4618      000000
 4619 0a9f 00       		.space	1
 4620 0aa0 31       		.byte	49
 4621 0aa1 000000   		.space	3
 4622 0aa4 04000000 		.word	4
 4623 0aa8 2E       		.byte	46
 4624 0aa9 000000   		.space	3
 4625 0aac FFFFFFFF 		.word	-1
 4626 0ab0 53764C49 		.ascii	"SvLIB\000"
 4626      4200
 4627 0ab6 0000     		.space	2
 4628 0ab8 00       		.ascii	"\000"
 4629 0ab9 00000000 		.space	7
 4629      000000
 4630 0ac0 31       		.byte	49
 4631 0ac1 000000   		.space	3
 4632 0ac4 05000000 		.word	5
 4633 0ac8 2E       		.byte	46
 4634 0ac9 000000   		.space	3
 4635 0acc FFFFFFFF 		.word	-1
 4636 0ad0 4C644C49 		.ascii	"LdLIB\000"
 4636      4200
 4637 0ad6 0000     		.space	2
 4638 0ad8 00       		.ascii	"\000"
 4639 0ad9 00000000 		.space	7
 4639      000000
 4640 0ae0 31       		.byte	49
 4641 0ae1 000000   		.space	3
 4642 0ae4 0A000000 		.word	10
 4643 0ae8 2E       		.byte	46
ARM GAS  /tmp/cc8tUJXt.s 			page 117


 4644 0ae9 000000   		.space	3
 4645 0aec FFFFFFFF 		.word	-1
 4646 0af0 53764350 		.ascii	"SvCPRG\000"
 4646      524700
 4647 0af7 00       		.space	1
 4648 0af8 00       		.ascii	"\000"
 4649 0af9 00000000 		.space	7
 4649      000000
 4650 0b00 31       		.byte	49
 4651 0b01 000000   		.space	3
 4652 0b04 08000000 		.word	8
 4653 0b08 2E       		.byte	46
 4654 0b09 000000   		.space	3
 4655 0b0c FFFFFFFF 		.word	-1
 4656 0b10 4C645052 		.ascii	"LdPRG\000"
 4656      4700
 4657 0b16 0000     		.space	2
 4658 0b18 00       		.ascii	"\000"
 4659 0b19 00000000 		.space	7
 4659      000000
 4660 0b20 2C       		.byte	44
 4661 0b21 000000   		.space	3
 4662 0b24 FFFFFFFF 		.word	-1
 4663 0b28 2E       		.byte	46
 4664 0b29 000000   		.space	3
 4665 0b2c FFFFFFFF 		.word	-1
 4666 0b30 2D2D0D00 		.ascii	"--\015\000"
 4667 0b34 00000000 		.space	4
 4668 0b38 00       		.ascii	"\000"
 4669 0b39 00000000 		.space	7
 4669      000000
 4670 0b40 2D       		.byte	45
 4671 0b41 000000   		.space	3
 4672 0b44 FFFFFFFF 		.word	-1
 4673 0b48 2E       		.byte	46
 4674 0b49 000000   		.space	3
 4675 0b4c FFFFFFFF 		.word	-1
 4676 0b50 43505800 		.ascii	"CPX\000"
 4677 0b54 00000000 		.space	4
 4678 0b58 00       		.ascii	"\000"
 4679 0b59 00000000 		.space	7
 4679      000000
 4680 0b60 496E7465 		.ascii	"Integ/Sum/Prod\000"
 4680      672F5375 
 4680      6D2F5072 
 4680      6F6400
 4681 0b6f 00       		.space	1
 4682 0b70 20       		.byte	32
 4683 0b71 000000   		.space	3
 4684 0b74 01000000 		.word	1
 4685 0b78 2E       		.byte	46
 4686 0b79 000000   		.space	3
 4687 0b7c FFFFFFFF 		.word	-1
 4688 0b80 534C5600 		.ascii	"SLV\000"
 4689 0b84 00000000 		.space	4
 4690 0b88 00       		.ascii	"\000"
 4691 0b89 00000000 		.space	7
ARM GAS  /tmp/cc8tUJXt.s 			page 118


 4691      000000
 4692 0b90 20       		.byte	32
 4693 0b91 000000   		.space	3
 4694 0b94 02000000 		.word	2
 4695 0b98 2E       		.byte	46
 4696 0b99 000000   		.space	3
 4697 0b9c FFFFFFFF 		.word	-1
 4698 0ba0 04206478 		.ascii	"\004 dx\000"
 4698      00
 4699 0ba5 000000   		.space	3
 4700 0ba8 00       		.ascii	"\000"
 4701 0ba9 00000000 		.space	7
 4701      000000
 4702 0bb0 21       		.byte	33
 4703 0bb1 000000   		.space	3
 4704 0bb4 01000000 		.word	1
 4705 0bb8 2E       		.byte	46
 4706 0bb9 000000   		.space	3
 4707 0bbc FFFFFFFF 		.word	-1
 4708 0bc0 53554D00 		.ascii	"SUM\000"
 4709 0bc4 00000000 		.space	4
 4710 0bc8 00       		.ascii	"\000"
 4711 0bc9 00000000 		.space	7
 4711      000000
 4712 0bd0 21       		.byte	33
 4713 0bd1 000000   		.space	3
 4714 0bd4 02000000 		.word	2
 4715 0bd8 2E       		.byte	46
 4716 0bd9 000000   		.space	3
 4717 0bdc FFFFFFFF 		.word	-1
 4718 0be0 50524F44 		.ascii	"PROD\000"
 4718      00
 4719 0be5 000000   		.space	3
 4720 0be8 00       		.ascii	"\000"
 4721 0be9 00000000 		.space	7
 4721      000000
 4722 0bf0 2C       		.byte	44
 4723 0bf1 000000   		.space	3
 4724 0bf4 FFFFFFFF 		.word	-1
 4725 0bf8 2E       		.byte	46
 4726 0bf9 000000   		.space	3
 4727 0bfc FFFFFFFF 		.word	-1
 4728 0c00 2D2D0D00 		.ascii	"--\015\000"
 4729 0c04 00000000 		.space	4
 4730 0c08 00       		.ascii	"\000"
 4731 0c09 00000000 		.space	7
 4731      000000
 4732 0c10 2D       		.byte	45
 4733 0c11 000000   		.space	3
 4734 0c14 FFFFFFFF 		.word	-1
 4735 0c18 2E       		.byte	46
 4736 0c19 000000   		.space	3
 4737 0c1c FFFFFFFF 		.word	-1
 4738 0c20 43505800 		.ascii	"CPX\000"
 4739 0c24 00000000 		.space	4
 4740 0c28 00       		.ascii	"\000"
 4741 0c29 00000000 		.space	7
ARM GAS  /tmp/cc8tUJXt.s 			page 119


 4741      000000
 4742 0c30 426C616E 		.ascii	"Blank with A-D\000"
 4742      6B207769 
 4742      74682041 
 4742      2D4400
 4743 0c3f 00       		.space	1
 4744 0c40 28       		.byte	40
 4745 0c41 000000   		.space	3
 4746 0c44 03000000 		.word	3
 4747 0c48 2E       		.byte	46
 4748 0c49 000000   		.space	3
 4749 0c4c FFFFFFFF 		.word	-1
 4750 0c50 912B00   		.ascii	"\221+\000"
 4751 0c53 00000000 		.space	5
 4751      00
 4752 0c58 00       		.ascii	"\000"
 4753 0c59 00000000 		.space	7
 4753      000000
 4754 0c60 16       		.byte	22
 4755 0c61 000000   		.space	3
 4756 0c64 01000000 		.word	1
 4757 0c68 2E       		.byte	46
 4758 0c69 000000   		.space	3
 4759 0c6c FFFFFFFF 		.word	-1
 4760 0c70 312F5800 		.ascii	"1/X\000"
 4761 0c74 00000000 		.space	4
 4762 0c78 00       		.ascii	"\000"
 4763 0c79 00000000 		.space	7
 4763      000000
 4764 0c80 1C       		.byte	28
 4765 0c81 000000   		.space	3
 4766 0c84 01000000 		.word	1
 4767 0c88 2E       		.byte	46
 4768 0c89 000000   		.space	3
 4769 0c8c FFFFFFFF 		.word	-1
 4770 0c90 035800   		.ascii	"\003X\000"
 4771 0c93 00000000 		.space	5
 4771      00
 4772 0c98 00       		.ascii	"\000"
 4773 0c99 00000000 		.space	7
 4773      000000
 4774 0ca0 13       		.byte	19
 4775 0ca1 000000   		.space	3
 4776 0ca4 02000000 		.word	2
 4777 0ca8 2E       		.byte	46
 4778 0ca9 000000   		.space	3
 4779 0cac FFFFFFFF 		.word	-1
 4780 0cb0 4C4F4700 		.ascii	"LOG\000"
 4781 0cb4 00000000 		.space	4
 4782 0cb8 00       		.ascii	"\000"
 4783 0cb9 00000000 		.space	7
 4783      000000
 4784 0cc0 2C       		.byte	44
 4785 0cc1 000000   		.space	3
 4786 0cc4 FFFFFFFF 		.word	-1
 4787 0cc8 2E       		.byte	46
 4788 0cc9 000000   		.space	3
ARM GAS  /tmp/cc8tUJXt.s 			page 120


 4789 0ccc FFFFFFFF 		.word	-1
 4790 0cd0 2D2D0D00 		.ascii	"--\015\000"
 4791 0cd4 00000000 		.space	4
 4792 0cd8 00       		.ascii	"\000"
 4793 0cd9 00000000 		.space	7
 4793      000000
 4794 0ce0 2D       		.byte	45
 4795 0ce1 000000   		.space	3
 4796 0ce4 FFFFFFFF 		.word	-1
 4797 0ce8 2E       		.byte	46
 4798 0ce9 000000   		.space	3
 4799 0cec FFFFFFFF 		.word	-1
 4800 0cf0 43505800 		.ascii	"CPX\000"
 4801 0cf4 00000000 		.space	4
 4802 0cf8 00       		.ascii	"\000"
 4803 0cf9 00000000 		.space	7
 4803      000000
 4804              		.section	.rodata.mapping_alpha.10908,"a"
 4805              		.align	2
 4806              		.set	.LANCHOR12,. + 0
 4809              	mapping_alpha.10908:
 4810 0000 63       		.byte	99
 4811 0001 000000   		.space	3
 4812 0004 FFFFFFFF 		.word	-1
 4813 0008 00       		.byte	0
 4814 0009 000000   		.space	3
 4815 000c FFFFFFFF 		.word	-1
 4816 0010 01       		.byte	1
 4817 0011 000000   		.space	3
 4818 0014 FFFFFFFF 		.word	-1
 4819 0018 02       		.byte	2
 4820 0019 000000   		.space	3
 4821 001c FFFFFFFF 		.word	-1
 4822 0020 03       		.byte	3
 4823 0021 000000   		.space	3
 4824 0024 FFFFFFFF 		.word	-1
 4825 0028 04       		.byte	4
 4826 0029 000000   		.space	3
 4827 002c FFFFFFFF 		.word	-1
 4828 0030 05       		.byte	5
 4829 0031 000000   		.space	3
 4830 0034 FFFFFFFF 		.word	-1
 4831 0038 06       		.byte	6
 4832 0039 000000   		.space	3
 4833 003c FFFFFFFF 		.word	-1
 4834 0040 07       		.byte	7
 4835 0041 000000   		.space	3
 4836 0044 FFFFFFFF 		.word	-1
 4837 0048 08       		.byte	8
 4838 0049 000000   		.space	3
 4839 004c FFFFFFFF 		.word	-1
 4840 0050 09       		.byte	9
 4841 0051 000000   		.space	3
 4842 0054 FFFFFFFF 		.word	-1
 4843 0058 0A       		.byte	10
 4844 0059 000000   		.space	3
 4845 005c FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc8tUJXt.s 			page 121


 4846 0060 0B       		.byte	11
 4847 0061 000000   		.space	3
 4848 0064 FFFFFFFF 		.word	-1
 4849 0068 0C       		.byte	12
 4850 0069 000000   		.space	3
 4851 006c FFFFFFFF 		.word	-1
 4852 0070 0D       		.byte	13
 4853 0071 000000   		.space	3
 4854 0074 FFFFFFFF 		.word	-1
 4855 0078 0E       		.byte	14
 4856 0079 000000   		.space	3
 4857 007c FFFFFFFF 		.word	-1
 4858 0080 0F       		.byte	15
 4859 0081 000000   		.space	3
 4860 0084 FFFFFFFF 		.word	-1
 4861 0088 10       		.byte	16
 4862 0089 000000   		.space	3
 4863 008c FFFFFFFF 		.word	-1
 4864 0090 12       		.byte	18
 4865 0091 000000   		.space	3
 4866 0094 FFFFFFFF 		.word	-1
 4867 0098 13       		.byte	19
 4868 0099 000000   		.space	3
 4869 009c FFFFFFFF 		.word	-1
 4870 00a0 14       		.byte	20
 4871 00a1 000000   		.space	3
 4872 00a4 FFFFFFFF 		.word	-1
 4873 00a8 15       		.byte	21
 4874 00a9 000000   		.space	3
 4875 00ac FFFFFFFF 		.word	-1
 4876 00b0 16       		.byte	22
 4877 00b1 000000   		.space	3
 4878 00b4 FFFFFFFF 		.word	-1
 4879 00b8 18       		.byte	24
 4880 00b9 000000   		.space	3
 4881 00bc FFFFFFFF 		.word	-1
 4882 00c0 19       		.byte	25
 4883 00c1 000000   		.space	3
 4884 00c4 FFFFFFFF 		.word	-1
 4885 00c8 1A       		.byte	26
 4886 00c9 000000   		.space	3
 4887 00cc FFFFFFFF 		.word	-1
 4888 00d0 1B       		.byte	27
 4889 00d1 000000   		.space	3
 4890 00d4 FFFFFFFF 		.word	-1
 4891 00d8 1C       		.byte	28
 4892 00d9 000000   		.space	3
 4893 00dc FFFFFFFF 		.word	-1
 4894 00e0 1E       		.byte	30
 4895 00e1 000000   		.space	3
 4896 00e4 FFFFFFFF 		.word	-1
 4897 00e8 1F       		.byte	31
 4898 00e9 000000   		.space	3
 4899 00ec FFFFFFFF 		.word	-1
 4900 00f0 20       		.byte	32
 4901 00f1 000000   		.space	3
 4902 00f4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc8tUJXt.s 			page 122


 4903 00f8 21       		.byte	33
 4904 00f9 000000   		.space	3
 4905 00fc FFFFFFFF 		.word	-1
 4906 0100 22       		.byte	34
 4907 0101 000000   		.space	3
 4908 0104 FFFFFFFF 		.word	-1
 4909 0108 24       		.byte	36
 4910 0109 000000   		.space	3
 4911 010c FFFFFFFF 		.word	-1
 4912 0110 25       		.byte	37
 4913 0111 000000   		.space	3
 4914 0114 FFFFFFFF 		.word	-1
 4915 0118 26       		.byte	38
 4916 0119 000000   		.space	3
 4917 011c FFFFFFFF 		.word	-1
 4918 0120 27       		.byte	39
 4919 0121 000000   		.space	3
 4920 0124 FFFFFFFF 		.word	-1
 4921 0128 28       		.byte	40
 4922 0129 000000   		.space	3
 4923 012c FFFFFFFF 		.word	-1
 4924 0130 2E       		.byte	46
 4925 0131 000000   		.space	3
 4926 0134 FFFFFFFF 		.word	-1
 4927 0138 2E       		.byte	46
 4928 0139 000000   		.space	3
 4929 013c FFFFFFFF 		.word	-1
 4930 0140 2E       		.byte	46
 4931 0141 000000   		.space	3
 4932 0144 FFFFFFFF 		.word	-1
 4933 0148 2E       		.byte	46
 4934 0149 000000   		.space	3
 4935 014c FFFFFFFF 		.word	-1
 4936 0150 2C       		.byte	44
 4937 0151 000000   		.space	3
 4938 0154 FFFFFFFF 		.word	-1
 4939 0158 2E       		.byte	46
 4940 0159 000000   		.space	3
 4941 015c FFFFFFFF 		.word	-1
 4942 0160 2E       		.byte	46
 4943 0161 000000   		.space	3
 4944 0164 FFFFFFFF 		.word	-1
 4945 0168 2E       		.byte	46
 4946 0169 000000   		.space	3
 4947 016c FFFFFFFF 		.word	-1
 4948 0170 2E       		.byte	46
 4949 0171 000000   		.space	3
 4950 0174 FFFFFFFF 		.word	-1
 4951              		.section	.rodata.mapping_fshift.10906,"a"
 4952              		.align	2
 4953              		.set	.LANCHOR10,. + 0
 4956              	mapping_fshift.10906:
 4957 0000 63       		.byte	99
 4958 0001 000000   		.space	3
 4959 0004 FFFFFFFF 		.word	-1
 4960 0008 22       		.byte	34
 4961 0009 000000   		.space	3
ARM GAS  /tmp/cc8tUJXt.s 			page 123


 4962 000c 03000000 		.word	3
 4963 0010 15       		.byte	21
 4964 0011 000000   		.space	3
 4965 0014 01000000 		.word	1
 4966 0018 1C       		.byte	28
 4967 0019 000000   		.space	3
 4968 001c 02000000 		.word	2
 4969 0020 13       		.byte	19
 4970 0021 000000   		.space	3
 4971 0024 01000000 		.word	1
 4972 0028 12       		.byte	18
 4973 0029 000000   		.space	3
 4974 002c 01000000 		.word	1
 4975 0030 12       		.byte	18
 4976 0031 000000   		.space	3
 4977 0034 03000000 		.word	3
 4978 0038 2D       		.byte	45
 4979 0039 000000   		.space	3
 4980 003c 00000000 		.word	0
 4981 0040 22       		.byte	34
 4982 0041 000000   		.space	3
 4983 0044 01000000 		.word	1
 4984 0048 0F       		.byte	15
 4985 0049 000000   		.space	3
 4986 004c 03000000 		.word	3
 4987 0050 01       		.byte	1
 4988 0051 000000   		.space	3
 4989 0054 02000000 		.word	2
 4990 0058 02       		.byte	2
 4991 0059 000000   		.space	3
 4992 005c 02000000 		.word	2
 4993 0060 03       		.byte	3
 4994 0061 000000   		.space	3
 4995 0064 02000000 		.word	2
 4996 0068 0C       		.byte	12
 4997 0069 000000   		.space	3
 4998 006c 01000000 		.word	1
 4999 0070 31       		.byte	49
 5000 0071 000000   		.space	3
 5001 0074 01000000 		.word	1
 5002 0078 2F       		.byte	47
 5003 0079 000000   		.space	3
 5004 007c 04000000 		.word	4
 5005 0080 2F       		.byte	47
 5006 0081 000000   		.space	3
 5007 0084 02000000 		.word	2
 5008 0088 2F       		.byte	47
 5009 0089 000000   		.space	3
 5010 008c 01000000 		.word	1
 5011 0090 18       		.byte	24
 5012 0091 000000   		.space	3
 5013 0094 00000000 		.word	0
 5014 0098 20       		.byte	32
 5015 0099 000000   		.space	3
 5016 009c 01000000 		.word	1
 5017 00a0 2F       		.byte	47
 5018 00a1 000000   		.space	3
ARM GAS  /tmp/cc8tUJXt.s 			page 124


 5019 00a4 0E000000 		.word	14
 5020 00a8 1C       		.byte	28
 5021 00a9 000000   		.space	3
 5022 00ac 03000000 		.word	3
 5023 00b0 2F       		.byte	47
 5024 00b1 000000   		.space	3
 5025 00b4 0C000000 		.word	12
 5026 00b8 1E       		.byte	30
 5027 00b9 000000   		.space	3
 5028 00bc 00000000 		.word	0
 5029 00c0 2F       		.byte	47
 5030 00c1 000000   		.space	3
 5031 00c4 03000000 		.word	3
 5032 00c8 04       		.byte	4
 5033 00c9 000000   		.space	3
 5034 00cc 03000000 		.word	3
 5035 00d0 2F       		.byte	47
 5036 00d1 000000   		.space	3
 5037 00d4 0A000000 		.word	10
 5038 00d8 2F       		.byte	47
 5039 00d9 000000   		.space	3
 5040 00dc 0B000000 		.word	11
 5041 00e0 2A       		.byte	42
 5042 00e1 000000   		.space	3
 5043 00e4 00000000 		.word	0
 5044 00e8 31       		.byte	49
 5045 00e9 000000   		.space	3
 5046 00ec 0D000000 		.word	13
 5047 00f0 2E       		.byte	46
 5048 00f1 000000   		.space	3
 5049 00f4 00000000 		.word	0
 5050 00f8 20       		.byte	32
 5051 00f9 000000   		.space	3
 5052 00fc 03000000 		.word	3
 5053 0100 2E       		.byte	46
 5054 0101 000000   		.space	3
 5055 0104 00000000 		.word	0
 5056 0108 24       		.byte	36
 5057 0109 000000   		.space	3
 5058 010c 03000000 		.word	3
 5059 0110 2F       		.byte	47
 5060 0111 000000   		.space	3
 5061 0114 08000000 		.word	8
 5062 0118 0D       		.byte	13
 5063 0119 000000   		.space	3
 5064 011c 01000000 		.word	1
 5065 0120 27       		.byte	39
 5066 0121 000000   		.space	3
 5067 0124 03000000 		.word	3
 5068 0128 06       		.byte	6
 5069 0129 000000   		.space	3
 5070 012c 03000000 		.word	3
 5071 0130 2E       		.byte	46
 5072 0131 000000   		.space	3
 5073 0134 00000000 		.word	0
 5074 0138 2E       		.byte	46
 5075 0139 000000   		.space	3
ARM GAS  /tmp/cc8tUJXt.s 			page 125


 5076 013c 00000000 		.word	0
 5077 0140 2E       		.byte	46
 5078 0141 000000   		.space	3
 5079 0144 00000000 		.word	0
 5080 0148 2E       		.byte	46
 5081 0149 000000   		.space	3
 5082 014c 00000000 		.word	0
 5083 0150 2E       		.byte	46
 5084 0151 000000   		.space	3
 5085 0154 00000000 		.word	0
 5086 0158 2E       		.byte	46
 5087 0159 000000   		.space	3
 5088 015c 00000000 		.word	0
 5089 0160 2E       		.byte	46
 5090 0161 000000   		.space	3
 5091 0164 00000000 		.word	0
 5092 0168 2F       		.byte	47
 5093 0169 000000   		.space	3
 5094 016c FFFFFFFF 		.word	-1
 5095 0170 2F       		.byte	47
 5096 0171 000000   		.space	3
 5097 0174 05000000 		.word	5
 5098              		.section	.rodata.mapping_gshift.10907,"a"
 5099              		.align	2
 5100              		.set	.LANCHOR13,. + 0
 5103              	mapping_gshift.10907:
 5104 0000 63       		.byte	99
 5105 0001 000000   		.space	3
 5106 0004 FFFFFFFF 		.word	-1
 5107 0008 28       		.byte	40
 5108 0009 000000   		.space	3
 5109 000c 03000000 		.word	3
 5110 0010 16       		.byte	22
 5111 0011 000000   		.space	3
 5112 0014 01000000 		.word	1
 5113 0018 1C       		.byte	28
 5114 0019 000000   		.space	3
 5115 001c 01000000 		.word	1
 5116 0020 13       		.byte	19
 5117 0021 000000   		.space	3
 5118 0024 02000000 		.word	2
 5119 0028 2E       		.byte	46
 5120 0029 000000   		.space	3
 5121 002c 00000000 		.word	0
 5122 0030 2E       		.byte	46
 5123 0031 000000   		.space	3
 5124 0034 00000000 		.word	0
 5125 0038 2E       		.byte	46
 5126 0039 000000   		.space	3
 5127 003c 00000000 		.word	0
 5128 0040 07       		.byte	7
 5129 0041 000000   		.space	3
 5130 0044 03000000 		.word	3
 5131 0048 08       		.byte	8
 5132 0049 000000   		.space	3
 5133 004c 03000000 		.word	3
 5134 0050 2F       		.byte	47
ARM GAS  /tmp/cc8tUJXt.s 			page 126


 5135 0051 000000   		.space	3
 5136 0054 04000000 		.word	4
 5137 0058 2F       		.byte	47
 5138 0059 000000   		.space	3
 5139 005c 04000000 		.word	4
 5140 0060 2F       		.byte	47
 5141 0061 000000   		.space	3
 5142 0064 04000000 		.word	4
 5143 0068 0C       		.byte	12
 5144 0069 000000   		.space	3
 5145 006c 02000000 		.word	2
 5146 0070 2F       		.byte	47
 5147 0071 000000   		.space	3
 5148 0074 06000000 		.word	6
 5149 0078 05       		.byte	5
 5150 0079 000000   		.space	3
 5151 007c 03000000 		.word	3
 5152 0080 2E       		.byte	46
 5153 0081 000000   		.space	3
 5154 0084 00000000 		.word	0
 5155 0088 2E       		.byte	46
 5156 0089 000000   		.space	3
 5157 008c 00000000 		.word	0
 5158 0090 2E       		.byte	46
 5159 0091 000000   		.space	3
 5160 0094 00000000 		.word	0
 5161 0098 2E       		.byte	46
 5162 0099 000000   		.space	3
 5163 009c 00000000 		.word	0
 5164 00a0 2E       		.byte	46
 5165 00a1 000000   		.space	3
 5166 00a4 00000000 		.word	0
 5167 00a8 1B       		.byte	27
 5168 00a9 000000   		.space	3
 5169 00ac 03000000 		.word	3
 5170 00b0 1A       		.byte	26
 5171 00b1 000000   		.space	3
 5172 00b4 03000000 		.word	3
 5173 00b8 2E       		.byte	46
 5174 00b9 000000   		.space	3
 5175 00bc 00000000 		.word	0
 5176 00c0 2E       		.byte	46
 5177 00c1 000000   		.space	3
 5178 00c4 00000000 		.word	0
 5179 00c8 0C       		.byte	12
 5180 00c9 000000   		.space	3
 5181 00cc 03000000 		.word	3
 5182 00d0 1F       		.byte	31
 5183 00d1 000000   		.space	3
 5184 00d4 03000000 		.word	3
 5185 00d8 19       		.byte	25
 5186 00d9 000000   		.space	3
 5187 00dc 03000000 		.word	3
 5188 00e0 2A       		.byte	42
 5189 00e1 000000   		.space	3
 5190 00e4 FFFFFFFF 		.word	-1
 5191 00e8 2E       		.byte	46
ARM GAS  /tmp/cc8tUJXt.s 			page 127


 5192 00e9 000000   		.space	3
 5193 00ec 00000000 		.word	0
 5194 00f0 2E       		.byte	46
 5195 00f1 000000   		.space	3
 5196 00f4 00000000 		.word	0
 5197 00f8 21       		.byte	33
 5198 00f9 000000   		.space	3
 5199 00fc 03000000 		.word	3
 5200 0100 2E       		.byte	46
 5201 0101 000000   		.space	3
 5202 0104 00000000 		.word	0
 5203 0108 24       		.byte	36
 5204 0109 000000   		.space	3
 5205 010c 02000000 		.word	2
 5206 0110 2F       		.byte	47
 5207 0111 000000   		.space	3
 5208 0114 0D000000 		.word	13
 5209 0118 2E       		.byte	46
 5210 0119 000000   		.space	3
 5211 011c 00000000 		.word	0
 5212 0120 2F       		.byte	47
 5213 0121 000000   		.space	3
 5214 0124 07000000 		.word	7
 5215 0128 1E       		.byte	30
 5216 0129 000000   		.space	3
 5217 012c 03000000 		.word	3
 5218 0130 2E       		.byte	46
 5219 0131 000000   		.space	3
 5220 0134 00000000 		.word	0
 5221 0138 2E       		.byte	46
 5222 0139 000000   		.space	3
 5223 013c 00000000 		.word	0
 5224 0140 2E       		.byte	46
 5225 0141 000000   		.space	3
 5226 0144 00000000 		.word	0
 5227 0148 2E       		.byte	46
 5228 0149 000000   		.space	3
 5229 014c 00000000 		.word	0
 5230 0150 2E       		.byte	46
 5231 0151 000000   		.space	3
 5232 0154 00000000 		.word	0
 5233 0158 2E       		.byte	46
 5234 0159 000000   		.space	3
 5235 015c 00000000 		.word	0
 5236 0160 2E       		.byte	46
 5237 0161 000000   		.space	3
 5238 0164 00000000 		.word	0
 5239 0168 2E       		.byte	46
 5240 0169 000000   		.space	3
 5241 016c 00000000 		.word	0
 5242 0170 2E       		.byte	46
 5243 0171 000000   		.space	3
 5244 0174 00000000 		.word	0
 5245              		.section	.rodata.mapping_none.10905,"a"
 5246              		.align	2
 5247              		.set	.LANCHOR9,. + 0
 5250              	mapping_none.10905:
ARM GAS  /tmp/cc8tUJXt.s 			page 128


 5251 0000 63       		.byte	99
 5252 0001 000000   		.space	3
 5253 0004 FFFFFFFF 		.word	-1
 5254 0008 00       		.byte	0
 5255 0009 000000   		.space	3
 5256 000c 00000000 		.word	0
 5257 0010 01       		.byte	1
 5258 0011 000000   		.space	3
 5259 0014 00000000 		.word	0
 5260 0018 03       		.byte	3
 5261 0019 000000   		.space	3
 5262 001c 00000000 		.word	0
 5263 0020 13       		.byte	19
 5264 0021 000000   		.space	3
 5265 0024 02000000 		.word	2
 5266 0028 12       		.byte	18
 5267 0029 000000   		.space	3
 5268 002c 02000000 		.word	2
 5269 0030 12       		.byte	18
 5270 0031 000000   		.space	3
 5271 0034 00000000 		.word	0
 5272 0038 06       		.byte	6
 5273 0039 000000   		.space	3
 5274 003c 00000000 		.word	0
 5275 0040 07       		.byte	7
 5276 0041 000000   		.space	3
 5277 0044 00000000 		.word	0
 5278 0048 08       		.byte	8
 5279 0049 000000   		.space	3
 5280 004c 00000000 		.word	0
 5281 0050 01       		.byte	1
 5282 0051 000000   		.space	3
 5283 0054 01000000 		.word	1
 5284 0058 02       		.byte	2
 5285 0059 000000   		.space	3
 5286 005c 01000000 		.word	1
 5287 0060 03       		.byte	3
 5288 0061 000000   		.space	3
 5289 0064 01000000 		.word	1
 5290 0068 0C       		.byte	12
 5291 0069 000000   		.space	3
 5292 006c 00000000 		.word	0
 5293 0070 0D       		.byte	13
 5294 0071 000000   		.space	3
 5295 0074 00000000 		.word	0
 5296 0078 0E       		.byte	14
 5297 0079 000000   		.space	3
 5298 007c 00000000 		.word	0
 5299 0080 0F       		.byte	15
 5300 0081 000000   		.space	3
 5301 0084 00000000 		.word	0
 5302 0088 10       		.byte	16
 5303 0089 000000   		.space	3
 5304 008c 00000000 		.word	0
 5305 0090 18       		.byte	24
 5306 0091 000000   		.space	3
 5307 0094 00000000 		.word	0
ARM GAS  /tmp/cc8tUJXt.s 			page 129


 5308 0098 13       		.byte	19
 5309 0099 000000   		.space	3
 5310 009c 00000000 		.word	0
 5311 00a0 14       		.byte	20
 5312 00a1 000000   		.space	3
 5313 00a4 00000000 		.word	0
 5314 00a8 15       		.byte	21
 5315 00a9 000000   		.space	3
 5316 00ac 00000000 		.word	0
 5317 00b0 16       		.byte	22
 5318 00b1 000000   		.space	3
 5319 00b4 00000000 		.word	0
 5320 00b8 1E       		.byte	30
 5321 00b9 000000   		.space	3
 5322 00bc 00000000 		.word	0
 5323 00c0 19       		.byte	25
 5324 00c1 000000   		.space	3
 5325 00c4 00000000 		.word	0
 5326 00c8 1A       		.byte	26
 5327 00c9 000000   		.space	3
 5328 00cc 00000000 		.word	0
 5329 00d0 1B       		.byte	27
 5330 00d1 000000   		.space	3
 5331 00d4 00000000 		.word	0
 5332 00d8 1C       		.byte	28
 5333 00d9 000000   		.space	3
 5334 00dc 00000000 		.word	0
 5335 00e0 29       		.byte	41
 5336 00e1 000000   		.space	3
 5337 00e4 00000000 		.word	0
 5338 00e8 1F       		.byte	31
 5339 00e9 000000   		.space	3
 5340 00ec 00000000 		.word	0
 5341 00f0 20       		.byte	32
 5342 00f1 000000   		.space	3
 5343 00f4 00000000 		.word	0
 5344 00f8 21       		.byte	33
 5345 00f9 000000   		.space	3
 5346 00fc 00000000 		.word	0
 5347 0100 22       		.byte	34
 5348 0101 000000   		.space	3
 5349 0104 00000000 		.word	0
 5350 0108 24       		.byte	36
 5351 0109 000000   		.space	3
 5352 010c 00000000 		.word	0
 5353 0110 25       		.byte	37
 5354 0111 000000   		.space	3
 5355 0114 00000000 		.word	0
 5356 0118 26       		.byte	38
 5357 0119 000000   		.space	3
 5358 011c 00000000 		.word	0
 5359 0120 27       		.byte	39
 5360 0121 000000   		.space	3
 5361 0124 00000000 		.word	0
 5362 0128 28       		.byte	40
 5363 0129 000000   		.space	3
 5364 012c 00000000 		.word	0
ARM GAS  /tmp/cc8tUJXt.s 			page 130


 5365 0130 2E       		.byte	46
 5366 0131 000000   		.space	3
 5367 0134 00000000 		.word	0
 5368 0138 2E       		.byte	46
 5369 0139 000000   		.space	3
 5370 013c 00000000 		.word	0
 5371 0140 2E       		.byte	46
 5372 0141 000000   		.space	3
 5373 0144 00000000 		.word	0
 5374 0148 2E       		.byte	46
 5375 0149 000000   		.space	3
 5376 014c 00000000 		.word	0
 5377 0150 2E       		.byte	46
 5378 0151 000000   		.space	3
 5379 0154 00000000 		.word	0
 5380 0158 2E       		.byte	46
 5381 0159 000000   		.space	3
 5382 015c 00000000 		.word	0
 5383 0160 2E       		.byte	46
 5384 0161 000000   		.space	3
 5385 0164 00000000 		.word	0
 5386 0168 2E       		.byte	46
 5387 0169 000000   		.space	3
 5388 016c 00000000 		.word	0
 5389 0170 2E       		.byte	46
 5390 0171 000000   		.space	3
 5391 0174 00000000 		.word	0
 5392              		.section	.rodata.mid_menu,"a"
 5393              		.align	2
 5396              	mid_menu:
 5397 0000 C8C40B00 		.ascii	"\310\304\013\000"
 5398              		.text
 5399              	.Letext0:
 5400              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 5401              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 5402              		.file 6 "/usr/include/newlib/sys/_types.h"
 5403              		.file 7 "/usr/include/newlib/sys/reent.h"
 5404              		.file 8 "/usr/include/newlib/sys/lock.h"
 5405              		.file 9 "/usr/include/newlib/stdlib.h"
 5406              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 5407              		.file 11 "/usr/include/newlib/ctype.h"
 5408              		.file 12 "dmcp/ff_ifc.h"
 5409              		.file 13 "dmcp/dmcp.h"
 5410              		.file 14 "src/keys.h"
 5411              		.file 15 "src/decNumber/decContext.h"
 5412              		.file 16 "src/decNumber/decNumber.h"
 5413              		.file 17 "src/decNumber/decimal64.h"
 5414              		.file 18 "src/decNumber/decimal128.h"
 5415              		.file 19 "src/xeq.h"
 5416              		.file 20 "src/data.h"
 5417              		.file 21 "src/display.h"
 5418              		.file 22 "src/consts.h"
 5419              		.file 23 "src/storage.h"
 5420              		.file 24 "src/catalogues.h"
 5421              		.file 25 "src/menu.h"
 5422              		.file 26 "src/lcd.h"
 5423              		.file 27 "/usr/include/newlib/string.h"
ARM GAS  /tmp/cc8tUJXt.s 			page 131


 5424              		.file 28 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/cc8tUJXt.s 			page 132


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/cc8tUJXt.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/cc8tUJXt.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/cc8tUJXt.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/cc8tUJXt.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/cc8tUJXt.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/cc8tUJXt.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/cc8tUJXt.s:433    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/cc8tUJXt.s:441    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/cc8tUJXt.s:463    .text.disp_about:0000000000000000 $t
     /tmp/cc8tUJXt.s:471    .text.disp_about:0000000000000000 disp_about
     /tmp/cc8tUJXt.s:629    .text.disp_about:0000000000000084 $d
     /tmp/cc8tUJXt.s:648    .text.run_menu_item:0000000000000000 $t
     /tmp/cc8tUJXt.s:656    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/cc8tUJXt.s:696    .text.set_menu:0000000000000000 $t
     /tmp/cc8tUJXt.s:704    .text.set_menu:0000000000000000 set_menu
     /tmp/cc8tUJXt.s:755    .text.set_menu:0000000000000028 $d
     /tmp/cc8tUJXt.s:762    .text.toggle_default_menu:0000000000000000 $t
     /tmp/cc8tUJXt.s:770    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/cc8tUJXt.s:799    .text.toggle_default_menu:0000000000000018 $d
     /tmp/cc8tUJXt.s:805    .text.get_menu:0000000000000000 $t
     /tmp/cc8tUJXt.s:813    .text.get_menu:0000000000000000 get_menu
     /tmp/cc8tUJXt.s:829    .text.get_menu:0000000000000008 $d
     /tmp/cc8tUJXt.s:834    .text.set_last_menu:0000000000000000 $t
     /tmp/cc8tUJXt.s:842    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/cc8tUJXt.s:897    .text.set_last_menu:000000000000001c $d
     /tmp/cc8tUJXt.s:904    .text.mdot:0000000000000000 $t
     /tmp/cc8tUJXt.s:912    .text.mdot:0000000000000000 mdot
     /tmp/cc8tUJXt.s:1003   .text.mdot:000000000000003c $d
     /tmp/cc8tUJXt.s:1008   .text.display_menu:0000000000000000 $t
     /tmp/cc8tUJXt.s:1016   .text.display_menu:0000000000000000 display_menu
     /tmp/cc8tUJXt.s:1255   .text.display_menu:000000000000010c $d
     /tmp/cc8tUJXt.s:1263   .text.display_current_menu:0000000000000000 $t
     /tmp/cc8tUJXt.s:1271   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/cc8tUJXt.s:1286   .text.display_current_menu:0000000000000008 $d
     /tmp/cc8tUJXt.s:1291   .text.all_menu_dots:0000000000000000 $t
     /tmp/cc8tUJXt.s:1299   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/cc8tUJXt.s:1383   .text.all_menu_dots:0000000000000038 $d
     /tmp/cc8tUJXt.s:1388   .text.shutdown:0000000000000000 $t
     /tmp/cc8tUJXt.s:1396   .text.shutdown:0000000000000000 shutdown
     /tmp/cc8tUJXt.s:1414   .text.shutdown:000000000000000c $d
     /tmp/cc8tUJXt.s:1419   .text.is_key_pressed:0000000000000000 $t
     /tmp/cc8tUJXt.s:1427   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/cc8tUJXt.s:1450   .text.is_key_pressed:0000000000000010 $d
     /tmp/cc8tUJXt.s:1455   .text.get_key:0000000000000000 $t
     /tmp/cc8tUJXt.s:1463   .text.get_key:0000000000000000 get_key
     /tmp/cc8tUJXt.s:1478   .text.get_key:0000000000000004 $d
     /tmp/cc8tUJXt.s:1483   .text.put_key:0000000000000000 $t
     /tmp/cc8tUJXt.s:1491   .text.put_key:0000000000000000 put_key
     /tmp/cc8tUJXt.s:1508   .text.put_key:0000000000000004 $d
     /tmp/cc8tUJXt.s:1513   .text.shift_down:0000000000000000 $t
     /tmp/cc8tUJXt.s:1521   .text.shift_down:0000000000000000 shift_down
     /tmp/cc8tUJXt.s:1536   .text.start_key_timer:0000000000000000 $t
     /tmp/cc8tUJXt.s:1544   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/cc8tUJXt.s:1568   .text.start_key_timer:000000000000000c $d
     /tmp/cc8tUJXt.s:1574   .text.keyticks:0000000000000000 $t
ARM GAS  /tmp/cc8tUJXt.s 			page 133


     /tmp/cc8tUJXt.s:1582   .text.keyticks:0000000000000000 keyticks
     /tmp/cc8tUJXt.s:1613   .text.keyticks:0000000000000018 $d
     /tmp/cc8tUJXt.s:1619   .text.moveto:0000000000000000 $t
     /tmp/cc8tUJXt.s:1627   .text.moveto:0000000000000000 moveto
     /tmp/cc8tUJXt.s:1687   .text.moveto:000000000000002c $d
     /tmp/cc8tUJXt.s:1694   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/cc8tUJXt.s:1698   .text.print_debug:0000000000000000 $t
     /tmp/cc8tUJXt.s:1706   .text.print_debug:0000000000000000 print_debug
     /tmp/cc8tUJXt.s:1808   .text.print_debug:0000000000000060 $d
                            *COM*:0000000000000016 print_string
     /tmp/cc8tUJXt.s:1819   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/cc8tUJXt.s:1823   .text.print_debug2:0000000000000000 $t
     /tmp/cc8tUJXt.s:1831   .text.print_debug2:0000000000000000 print_debug2
     /tmp/cc8tUJXt.s:1933   .text.print_debug2:0000000000000064 $d
     /tmp/cc8tUJXt.s:1944   .text.do_now:0000000000000000 $t
     /tmp/cc8tUJXt.s:1952   .text.do_now:0000000000000000 do_now
     /tmp/cc8tUJXt.s:1987   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/cc8tUJXt.s:1991   .text.do_multi:0000000000000000 $t
     /tmp/cc8tUJXt.s:1999   .text.do_multi:0000000000000000 do_multi
     /tmp/cc8tUJXt.s:2030   .text.do_multi:0000000000000018 $d
     /tmp/cc8tUJXt.s:2437   .text.do_multi:0000000000000190 $d
     /tmp/cc8tUJXt.s:2446   .text.program_main:0000000000000000 $t
     /tmp/cc8tUJXt.s:2454   .text.program_main:0000000000000000 program_main
     /tmp/cc8tUJXt.s:2957   .text.program_main:0000000000000218 $d
     /tmp/cc8tUJXt.s:2964   .text.program_main:0000000000000224 $t
     /tmp/cc8tUJXt.s:3195   .text.program_main:00000000000002d0 $d
     /tmp/cc8tUJXt.s:3236   .text.program_main:0000000000000364 $t
     /tmp/cc8tUJXt.s:3651   .text.program_main:0000000000000574 $d
     /tmp/cc8tUJXt.s:3712   .bss.n_p:0000000000000000 n_p
     /tmp/cc8tUJXt.s:3780   .data.spaces:0000000000000000 spaces
     /tmp/cc8tUJXt.s:3771   .data.release:0000000000000000 release
     /tmp/cc8tUJXt.s:3744   .data.h_shift:0000000000000000 h_shift
     /tmp/cc8tUJXt.s:3735   .data.g_shift:0000000000000000 g_shift
     /tmp/cc8tUJXt.s:3726   .data.f_shift:0000000000000000 f_shift
     /tmp/cc8tUJXt.s:3753   .data.heartbeat:0000000000000000 heartbeat
     /tmp/cc8tUJXt.s:3762   .data.no_key:0000000000000000 no_key
     /tmp/cc8tUJXt.s:3787   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/cc8tUJXt.s:3676   .rodata.str1.4:0000000000000000 $d
     /tmp/cc8tUJXt.s:5396   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/cc8tUJXt.s:3681   .bss.current_menu:0000000000000000 $d
     /tmp/cc8tUJXt.s:3685   .bss.current_menu:0000000000000000 current_menu
     /tmp/cc8tUJXt.s:3688   .bss.default_menu:0000000000000000 $d
     /tmp/cc8tUJXt.s:3692   .bss.default_menu:0000000000000000 default_menu
     /tmp/cc8tUJXt.s:3695   .bss.last_menu:0000000000000000 $d
     /tmp/cc8tUJXt.s:3699   .bss.last_menu:0000000000000000 last_menu
     /tmp/cc8tUJXt.s:3702   .bss.mdots:0000000000000000 $d
     /tmp/cc8tUJXt.s:3706   .bss.mdots:0000000000000000 mdots
     /tmp/cc8tUJXt.s:3709   .bss.n_p:0000000000000000 $d
     /tmp/cc8tUJXt.s:3715   .bss.start_ticks:0000000000000000 $d
     /tmp/cc8tUJXt.s:3719   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/cc8tUJXt.s:3722   .data.f_shift:0000000000000000 $d
     /tmp/cc8tUJXt.s:3731   .data.g_shift:0000000000000000 $d
     /tmp/cc8tUJXt.s:3740   .data.h_shift:0000000000000000 $d
     /tmp/cc8tUJXt.s:3749   .data.heartbeat:0000000000000000 $d
     /tmp/cc8tUJXt.s:3758   .data.no_key:0000000000000000 $d
     /tmp/cc8tUJXt.s:3767   .data.release:0000000000000000 $d
     /tmp/cc8tUJXt.s:3776   .data.spaces:0000000000000000 $d
ARM GAS  /tmp/cc8tUJXt.s 			page 134


     /tmp/cc8tUJXt.s:3783   .rodata.MID_MENU:0000000000000000 $d
     /tmp/cc8tUJXt.s:3793   .rodata.Menus:0000000000000000 $d
     /tmp/cc8tUJXt.s:3797   .rodata.Menus:0000000000000000 Menus
     /tmp/cc8tUJXt.s:4805   .rodata.mapping_alpha.10908:0000000000000000 $d
     /tmp/cc8tUJXt.s:4809   .rodata.mapping_alpha.10908:0000000000000000 mapping_alpha.10908
     /tmp/cc8tUJXt.s:4952   .rodata.mapping_fshift.10906:0000000000000000 $d
     /tmp/cc8tUJXt.s:4956   .rodata.mapping_fshift.10906:0000000000000000 mapping_fshift.10906
     /tmp/cc8tUJXt.s:5099   .rodata.mapping_gshift.10907:0000000000000000 $d
     /tmp/cc8tUJXt.s:5103   .rodata.mapping_gshift.10907:0000000000000000 mapping_gshift.10907
     /tmp/cc8tUJXt.s:5246   .rodata.mapping_none.10905:0000000000000000 $d
     /tmp/cc8tUJXt.s:5250   .rodata.mapping_none.10905:0000000000000000 mapping_none.10905
     /tmp/cc8tUJXt.s:5393   .rodata.mid_menu:0000000000000000 $d
     /tmp/cc8tUJXt.s:2043   .text.do_multi:0000000000000025 $d
     /tmp/cc8tUJXt.s:2043   .text.do_multi:0000000000000026 $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
pixel_length
strcpy
sprintf
process_keycode_with_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
get_alpha_state
cur_shift
StateWhileOn
DispMsg
JustDisplayed
Pause

ARM GAS  /tmp/cc2wwr9y.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_menu_label.constprop.0:
  27              	.LVL0:
  28              	.LFB25:
  29              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** void set_menu ( int new_menu ) {
   4:src/menu.c    ****   int m = current_menu;
   5:src/menu.c    ****   if (new_menu == current_menu) {
   6:src/menu.c    ****     current_menu = 0;
   7:src/menu.c    ****   }
   8:src/menu.c    ****   else if (new_menu == -1) {
   9:src/menu.c    ****     current_menu = last_menu;
  10:src/menu.c    ****   }
  11:src/menu.c    ****   else {
  12:src/menu.c    ****     current_menu = new_menu;
  13:src/menu.c    ****   }
  14:src/menu.c    ****   last_menu = m;
  15:src/menu.c    **** }
  16:src/menu.c    **** 
  17:src/menu.c    **** int get_menu () {
  18:src/menu.c    ****   return current_menu;
  19:src/menu.c    **** }
  20:src/menu.c    **** 
  21:src/menu.c    **** void display_current_menu () {
  22:src/menu.c    ****   display_menu (current_menu);
  23:src/menu.c    **** }
  24:src/menu.c    **** 
  25:src/menu.c    **** void set_last_menu () {
  26:src/menu.c    ****   set_menu (last_menu);
  27:src/menu.c    **** }
  28:src/menu.c    **** 
  29:src/menu.c    **** static unsigned char mdots[200][2];
ARM GAS  /tmp/cc2wwr9y.s 			page 2


  30:src/menu.c    **** 
  31:src/menu.c    **** static const struct _menu Menus[] = {
  32:src/menu.c    ****   {
  33:src/menu.c    ****     "Blank", // 0
  34:src/menu.c    ****     { 
  35:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  36:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  37:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  38:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  39:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  40:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  41:src/menu.c    ****     }    
  42:src/menu.c    ****   },
  43:src/menu.c    ****   {
  44:src/menu.c    ****     "Clear", // 1
  45:src/menu.c    ****     { 
  46:src/menu.c    ****       { { K24, 1 }, NO_KEY, "CLProg", "" },
  47:src/menu.c    ****       { { K24, 2 }, NO_KEY, "CL\221", "" },
  48:src/menu.c    ****       { { K24, 3 }, NO_KEY, "CL X", "" },
  49:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  50:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  51:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  52:src/menu.c    ****     }    
  53:src/menu.c    ****   },
  54:src/menu.c    ****   {
  55:src/menu.c    ****     "DISP", // 2
  56:src/menu.c    ****     { 
  57:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
  58:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
  59:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
  60:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
  61:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
  62:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  63:src/menu.c    ****     }
  64:src/menu.c    ****   },
  65:src/menu.c    ****   {
  66:src/menu.c    ****     "BASE", // 3
  67:src/menu.c    ****     { 
  68:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
  69:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
  70:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
  71:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
  72:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
  73:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
  74:src/menu.c    ****     }
  75:src/menu.c    ****   },
  76:src/menu.c    ****   {
  77:src/menu.c    ****     "ANGLES", // 4
  78:src/menu.c    ****     { 
  79:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
  80:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
  81:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
  82:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
  83:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
  84:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  85:src/menu.c    ****     }
  86:src/menu.c    ****       
ARM GAS  /tmp/cc2wwr9y.s 			page 3


  87:src/menu.c    ****   },
  88:src/menu.c    ****   {
  89:src/menu.c    ****     "MISC", // 5
  90:src/menu.c    ****     { 
  91:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
  92:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
  93:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
  94:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
  95:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
  96:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  97:src/menu.c    ****     }
  98:src/menu.c    ****   },
  99:src/menu.c    ****   {
 100:src/menu.c    ****     "X<>Y Key", // 6
 101:src/menu.c    ****     { 
 102:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 103:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 104:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 105:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 106:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 107:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 108:src/menu.c    ****     }    
 109:src/menu.c    ****   },
 110:src/menu.c    ****   {
 111:src/menu.c    ****     "Program", // 7
 112:src/menu.c    ****     { 
 113:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 114:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 115:src/menu.c    ****       { { K61, 3 }, NO_KEY, "Pause", "" },
 116:src/menu.c    ****       { { K30, 3 }, NO_KEY, "GTO", "" },
 117:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 118:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 119:src/menu.c    ****     }
 120:src/menu.c    ****   },
 121:src/menu.c    ****   {
 122:src/menu.c    ****     "Setup 1", // 8
 123:src/menu.c    ****     { 
 124:src/menu.c    ****       { { K_SYS, 0}, NO_KEY, "System", "" },
 125:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 126:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 127:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 128:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 129:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 130:src/menu.c    ****     }
 131:src/menu.c    ****   },
 132:src/menu.c    ****   {
 133:src/menu.c    ****     "Arrow", // 9
 134:src/menu.c    ****     { 
 135:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 136:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 137:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 138:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "2HMS" },
 139:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS2" },
 140:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 141:src/menu.c    ****     }
 142:src/menu.c    ****   },
 143:src/menu.c    ****   {
ARM GAS  /tmp/cc2wwr9y.s 			page 4


 144:src/menu.c    ****     "Flags", // 10
 145:src/menu.c    ****     { 
 146:src/menu.c    ****       { { K50, 1 }, NO_KEY, "SF_", "" },
 147:src/menu.c    ****       { { K50, 2 }, NO_KEY, "CF_", "" },
 148:src/menu.c    ****       { { K51, 1 }, NO_KEY, "x=?", "" },
 149:src/menu.c    ****       { { K51, 2 }, NO_KEY, "x\013?", "" },
 150:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 151:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 152:src/menu.c    ****     }
 153:src/menu.c    ****   },
 154:src/menu.c    ****   {
 155:src/menu.c    ****     "Probability", // 11
 156:src/menu.c    ****     { 
 157:src/menu.c    ****       { { K40, 3 }, { K41, 1 }, "Fact!", "\224" },
 158:src/menu.c    ****       { { K40, 1 }, { K41, 2 }, "Cy,x", "\224\235" },
 159:src/menu.c    ****       { { K40, 2 }, NO_KEY, "Py,x", "" },
 160:src/menu.c    ****       { { K12, 1 }, NO_KEY, "RAN#", "" },
 161:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 162:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 163:src/menu.c    ****     }
 164:src/menu.c    ****   },
 165:src/menu.c    ****   {
 166:src/menu.c    ****     "Statistics", // 12
 167:src/menu.c    ****     { 
 168:src/menu.c    ****       { { K42, 1 }, { K43, 3 }, "Xbar", "SUMS" },
 169:src/menu.c    ****       { { K43, 1 }, NO_KEY, "Yhat", "" },
 170:src/menu.c    ****       { { K42, 2 }, NO_KEY, "s", "" },
 171:src/menu.c    ****       { { K43, 2 }, NO_KEY, "r", "" },
 172:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 173:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 174:src/menu.c    ****     }
 175:src/menu.c    ****   },
 176:src/menu.c    ****   {
 177:src/menu.c    ****     "Setup 2", // 13
 178:src/menu.c    ****     { 
 179:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 180:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 181:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 182:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 183:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 184:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 185:src/menu.c    ****     }
 186:src/menu.c    ****   },
 187:src/menu.c    ****   {
 188:src/menu.c    ****     "Integ/Sum/Prod", // 14
 189:src/menu.c    ****     { 
 190:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 191:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 192:src/menu.c    ****       { { K53, 1 }, NO_KEY, "SUM", "" },
 193:src/menu.c    ****       { { K53, 2 }, NO_KEY, "PROD", "" },
 194:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 195:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 196:src/menu.c    ****     }
 197:src/menu.c    ****   },
 198:src/menu.c    **** };  
 199:src/menu.c    **** 
 200:src/menu.c    **** /* This code is the set_status_sized code with small changes
ARM GAS  /tmp/cc2wwr9y.s 			page 5


 201:src/menu.c    ****  * and non-DM42 code removed.
 202:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 203:src/menu.c    ****  */
 204:src/menu.c    **** #define MENU_WIDTH 32
 205:src/menu.c    **** 
 206:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  30              		.loc 1 206 13 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 544
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 207:src/menu.c    ****   // dotcol is the number of the starting dot column
 208:src/menu.c    ****   // shifted is 1 if shifted
 209:src/menu.c    ****   unsigned short int posns[257];
  34              		.loc 1 209 3 view .LVU1
 210:src/menu.c    **** 
 211:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 212:src/menu.c    ****   int posns_state = 255;
  35              		.loc 1 212 3 view .LVU2
 213:src/menu.c    **** 
 214:src/menu.c    ****   int x = dotcol;
  36              		.loc 1 214 3 view .LVU3
 206:src/menu.c    ****   // dotcol is the number of the starting dot column
  37              		.loc 1 206 13 is_stmt 0 view .LVU4
  38 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  39              		.cfi_def_cfa_offset 36
  40              		.cfi_offset 4, -36
  41              		.cfi_offset 5, -32
  42              		.cfi_offset 6, -28
  43              		.cfi_offset 7, -24
  44              		.cfi_offset 8, -20
  45              		.cfi_offset 9, -16
  46              		.cfi_offset 10, -12
  47              		.cfi_offset 11, -8
  48              		.cfi_offset 14, -4
  49 0004 ADF5097D 		sub	sp, sp, #548
  50              		.cfi_def_cfa_offset 584
 206:src/menu.c    ****   // dotcol is the number of the starting dot column
  51              		.loc 1 206 13 view .LVU5
  52 0008 CDE90102 		strd	r0, r2, [sp, #4]
 215:src/menu.c    ****   int i, j, xmax;
 216:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  53              		.loc 1 216 18 view .LVU6
  54 000c 0029     		cmp	r1, #0
  55 000e B4BF     		ite	lt
  56 0010 01F11F03 		addlt	r3, r1, #31
  57 0014 0B46     		movge	r3, r1
 217:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 218:src/menu.c    **** 
 219:src/menu.c    ****   forceDispPlot=0;
  58              		.loc 1 219 16 view .LVU7
  59 0016 4848     		ldr	r0, .L36
  60              	.LVL1:
 206:src/menu.c    ****   // dotcol is the number of the starting dot column
  61              		.loc 1 206 13 view .LVU8
  62 0018 0F46     		mov	r7, r1
  63              	.LVL2:
 215:src/menu.c    ****   int i, j, xmax;
ARM GAS  /tmp/cc2wwr9y.s 			page 6


  64              		.loc 1 215 3 is_stmt 1 view .LVU9
 216:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  65              		.loc 1 216 3 view .LVU10
 220:src/menu.c    **** 
 221:src/menu.c    **** #ifdef RP_PREFIX
 222:src/menu.c    ****   RectPolConv = 0;
  66              		.loc 1 222 15 is_stmt 0 view .LVU11
  67 001a 4849     		ldr	r1, .L36+4
  68              	.LVL3:
 219:src/menu.c    **** 
  69              		.loc 1 219 16 view .LVU12
  70 001c 0022     		movs	r2, #0
  71              	.LVL4:
 219:src/menu.c    **** 
  72              		.loc 1 219 16 view .LVU13
  73 001e 0270     		strb	r2, [r0]
  74              		.loc 1 222 15 view .LVU14
  75 0020 0A60     		str	r2, [r1]
 223:src/menu.c    **** #endif
 224:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
  76              		.loc 1 224 10 view .LVU15
  77 0022 019A     		ldr	r2, [sp, #4]
  78 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 216:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  79              		.loc 1 216 30 view .LVU16
  80 0026 23F01F03 		bic	r3, r3, #31
 216:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  81              		.loc 1 216 8 view .LVU17
  82 002a 03F12009 		add	r9, r3, #32
  83              	.LVL5:
 217:src/menu.c    **** 
  84              		.loc 1 217 3 is_stmt 1 view .LVU18
 219:src/menu.c    **** 
  85              		.loc 1 219 3 view .LVU19
 222:src/menu.c    **** #endif
  86              		.loc 1 222 3 view .LVU20
  87              		.loc 1 224 3 view .LVU21
  88              		.loc 1 224 9 view .LVU22
  89 002e 002D     		cmp	r5, #0
  90 0030 78D0     		beq	.L1
  91              		.loc 1 224 23 is_stmt 0 view .LVU23
  92 0032 4F45     		cmp	r7, r9
  93 0034 76DC     		bgt	.L1
  94              	.LBB33:
 225:src/menu.c    ****     int c;
 226:src/menu.c    ****     int width;
 227:src/menu.c    ****     unsigned char cmap[6];
 228:src/menu.c    **** 
 229:src/menu.c    ****     int real_width;
 230:src/menu.c    ****     int current_smallp;
 231:src/menu.c    **** 
 232:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 233:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 234:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 235:src/menu.c    ****     //           01 -> (not used)
 236:src/menu.c    ****     //           10 -> use big font
 237:src/menu.c    ****     //           11 -> use small font
ARM GAS  /tmp/cc2wwr9y.s 			page 7


 238:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 239:src/menu.c    ****     if (str[0] == '\007') {
  95              		.loc 1 239 8 view .LVU24
  96 0036 072D     		cmp	r5, #7
  97              	.LBE33:
 212:src/menu.c    **** 
  98              		.loc 1 212 7 view .LVU25
  99 0038 4FF0FF04 		mov	r4, #255
 100              	.LVL6:
 101              	.LBB50:
 225:src/menu.c    ****     int c;
 102              		.loc 1 225 5 is_stmt 1 view .LVU26
 226:src/menu.c    ****     unsigned char cmap[6];
 103              		.loc 1 226 5 view .LVU27
 227:src/menu.c    **** 
 104              		.loc 1 227 5 view .LVU28
 229:src/menu.c    ****     int current_smallp;
 105              		.loc 1 229 5 view .LVU29
 230:src/menu.c    **** 
 106              		.loc 1 230 5 view .LVU30
 107              		.loc 1 239 5 view .LVU31
 240:src/menu.c    ****       width = str[1] & 0x1F;
 241:src/menu.c    ****       switch (str[1] & 0x60) {
 242:src/menu.c    ****       default:
 243:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 244:src/menu.c    **** 	break;
 245:src/menu.c    ****       case 0x40:	current_smallp = 0;
 246:src/menu.c    **** 	break;
 247:src/menu.c    ****       case 0x60:	current_smallp = 1;
 108              		.loc 1 247 33 is_stmt 0 view .LVU32
 109 003c 4FF0010A 		mov	r10, #1
 239:src/menu.c    ****       width = str[1] & 0x1F;
 110              		.loc 1 239 8 view .LVU33
 111 0040 64D1     		bne	.L5
 112              	.LVL7:
 113              	.L34:
 240:src/menu.c    ****       width = str[1] & 0x1F;
 114              		.loc 1 240 7 is_stmt 1 view .LVU34
 240:src/menu.c    ****       width = str[1] & 0x1F;
 115              		.loc 1 240 18 is_stmt 0 view .LVU35
 116 0042 019B     		ldr	r3, [sp, #4]
 117 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 118 0046 06F06003 		and	r3, r6, #96
 241:src/menu.c    ****       default:
 119              		.loc 1 241 7 view .LVU36
 120 004a 402B     		cmp	r3, #64
 240:src/menu.c    ****       width = str[1] & 0x1F;
 121              		.loc 1 240 13 view .LVU37
 122 004c 06F01F06 		and	r6, r6, #31
 123              	.LVL8:
 241:src/menu.c    ****       default:
 124              		.loc 1 241 7 is_stmt 1 view .LVU38
 125 0050 6CD0     		beq	.L28
 126 0052 602B     		cmp	r3, #96
 127 0054 6AD1     		bne	.L28
 128              		.loc 1 247 18 view .LVU39
 129              	.LVL9:
ARM GAS  /tmp/cc2wwr9y.s 			page 8


 248:src/menu.c    **** 	break;
 130              		.loc 1 248 2 view .LVU40
 249:src/menu.c    ****       }
 250:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 131              		.loc 1 250 7 view .LVU41
 132              		.loc 1 250 11 is_stmt 0 view .LVU42
 133 0056 019B     		ldr	r3, [sp, #4]
 134 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 247:src/menu.c    **** 	break;
 135              		.loc 1 247 33 view .LVU43
 136 005a 0123     		movs	r3, #1
 137 005c 0093     		str	r3, [sp]
 138 005e 00F58075 		add	r5, r0, #256
 139              	.LVL10:
 140              	.L9:
 251:src/menu.c    ****       str += 3;
 141              		.loc 1 251 7 is_stmt 1 view .LVU44
 252:src/menu.c    **** 
 253:src/menu.c    ****       real_width = charlengths(c);
 142              		.loc 1 253 20 is_stmt 0 view .LVU45
 143 0062 2846     		mov	r0, r5
 144 0064 FFF7FEFF 		bl	charlengths
 145              	.LVL11:
 251:src/menu.c    ****       str += 3;
 146              		.loc 1 251 11 view .LVU46
 147 0068 019B     		ldr	r3, [sp, #4]
 148 006a 0333     		adds	r3, r3, #3
 149 006c 0193     		str	r3, [sp, #4]
 150              	.LVL12:
 151              		.loc 1 253 7 is_stmt 1 view .LVU47
 254:src/menu.c    ****     } else {
 255:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 256:src/menu.c    ****       real_width = width = charlengths(c);
 257:src/menu.c    ****       current_smallp = smallp;
 258:src/menu.c    ****     }
 259:src/menu.c    **** 
 260:src/menu.c    ****     if (x + real_width > xmax)
 152              		.loc 1 260 5 view .LVU48
 153              		.loc 1 260 11 is_stmt 0 view .LVU49
 154 006e C319     		adds	r3, r0, r7
 155              	.LVL13:
 156              		.loc 1 260 8 view .LVU50
 157 0070 9945     		cmp	r9, r3
 158 0072 57DB     		blt	.L1
 159              	.L35:
 261:src/menu.c    ****       break;
 262:src/menu.c    **** 
 263:src/menu.c    ****     if (posns_state != current_smallp) {
 160              		.loc 1 263 5 is_stmt 1 view .LVU51
 161              		.loc 1 263 8 is_stmt 0 view .LVU52
 162 0074 009B     		ldr	r3, [sp]
 163 0076 A342     		cmp	r3, r4
 264:src/menu.c    ****       findlengths(posns, current_smallp);
 164              		.loc 1 264 7 view .LVU53
 165 0078 07AB     		add	r3, sp, #28
 263:src/menu.c    ****       findlengths(posns, current_smallp);
 166              		.loc 1 263 8 view .LVU54
ARM GAS  /tmp/cc2wwr9y.s 			page 9


 167 007a 05D0     		beq	.L12
 168              		.loc 1 264 7 is_stmt 1 view .LVU55
 169 007c 1846     		mov	r0, r3
 170              	.LVL14:
 171              		.loc 1 264 7 is_stmt 0 view .LVU56
 172 007e 0099     		ldr	r1, [sp]
 173 0080 0393     		str	r3, [sp, #12]
 174 0082 FFF7FEFF 		bl	findlengths
 175              	.LVL15:
 176 0086 039B     		ldr	r3, [sp, #12]
 265:src/menu.c    ****       posns_state = current_smallp;
 177              		.loc 1 265 7 is_stmt 1 view .LVU57
 178              	.LVL16:
 179              	.L12:
 266:src/menu.c    ****     }
 267:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 180              		.loc 1 267 5 view .LVU58
 181 0088 009A     		ldr	r2, [sp]
 182 008a 2846     		mov	r0, r5
 183 008c 05A9     		add	r1, sp, #20
 184 008e FFF7FEFF 		bl	unpackchar
 185              	.LVL17:
 268:src/menu.c    **** 
 269:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 186              		.loc 1 269 5 view .LVU59
 187              		.loc 1 269 15 view .LVU60
 188 0092 029B     		ldr	r3, [sp, #8]
 189 0094 03EB4704 		add	r4, r3, r7, lsl #1
 190 0098 294B     		ldr	r3, .L36+8
 191 009a 0DF1140B 		add	fp, sp, #20
 192 009e 1C44     		add	r4, r4, r3
 267:src/menu.c    **** 
 193              		.loc 1 267 5 is_stmt 0 view .LVU61
 194 00a0 4FF0050E 		mov	lr, #5
 195 00a4 A9EB0705 		sub	r5, r9, r7
 196              	.LVL18:
 197              	.L13:
 270:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 198              		.loc 1 270 17 is_stmt 1 view .LVU62
 199              		.loc 1 270 7 is_stmt 0 view .LVU63
 200 00a8 002E     		cmp	r6, #0
 201 00aa 1FDD     		ble	.L19
 271:src/menu.c    **** 	if (x+j >= xmax)
 202              		.loc 1 271 2 is_stmt 1 view .LVU64
 203              		.loc 1 271 5 is_stmt 0 view .LVU65
 204 00ac B945     		cmp	r9, r7
 205 00ae 1DDD     		ble	.L19
 206              	.LBB34:
 207              	.LBB35:
 208              	.LBB36:
 209              	.LBB37:
 272:src/menu.c    **** 	  break;
 273:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 274:src/menu.c    ****       }
 275:src/menu.c    ****     }
 276:src/menu.c    ****     x += width;
 277:src/menu.c    ****   }
ARM GAS  /tmp/cc2wwr9y.s 			page 10


 278:src/menu.c    **** }
 279:src/menu.c    **** 
 280:src/menu.c    **** 
 281:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 282:src/menu.c    **** 
 283:src/menu.c    **** int pixel_length(const char *s, int smallp)
 284:src/menu.c    **** {
 285:src/menu.c    ****   int len = 0;
 286:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 287:src/menu.c    ****   while (*s != '\0') {
 288:src/menu.c    ****     if (s[0] == '\007') {
 289:src/menu.c    ****       len += s[1] & 0x1F;
 290:src/menu.c    ****       s += 3;
 291:src/menu.c    ****       continue;
 292:src/menu.c    ****     }
 293:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 294:src/menu.c    ****   }
 295:src/menu.c    ****   return len;
 296:src/menu.c    **** }
 297:src/menu.c    **** */
 298:src/menu.c    **** 
 299:src/menu.c    **** 
 300:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 301:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 302:src/menu.c    ****   if (on) {
 303:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 304:src/menu.c    ****   }
 305:src/menu.c    ****   else {
 306:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 210              		.loc 1 306 25 view .LVU66
 211 00b0 0AFA0EFC 		lsl	ip, r10, lr
 212              		.loc 1 306 17 view .LVU67
 213 00b4 4FFA8CFC 		sxtb	ip, ip
 214              	.LBE37:
 215              	.LBE36:
 216              	.LBE35:
 217              	.LBE34:
 273:src/menu.c    ****       }
 218              		.loc 1 273 31 view .LVU68
 219 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 220              	.LBB47:
 221              	.LBB44:
 222              	.LBB41:
 223              	.LBB38:
 224              		.loc 1 306 17 view .LVU69
 225 00bc 6FEA0C08 		mvn	r8, ip
 226              	.LBE38:
 227              	.LBE41:
 228              	.LBE44:
 229              	.LBE47:
 270:src/menu.c    **** 	if (x+j >= xmax)
 230              		.loc 1 270 13 view .LVU70
 231 00c0 0023     		movs	r3, #0
 232 00c2 01E0     		b	.L14
 233              	.LVL19:
 234              	.L18:
 271:src/menu.c    **** 	  break;
ARM GAS  /tmp/cc2wwr9y.s 			page 11


 235              		.loc 1 271 5 view .LVU71
 236 00c4 9D42     		cmp	r5, r3
 237 00c6 11D0     		beq	.L19
 238              	.LVL20:
 239              	.L14:
 273:src/menu.c    ****       }
 240              		.loc 1 273 2 is_stmt 1 view .LVU72
 241              	.LBB48:
 242              	.LBI34:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 243              		.loc 1 300 6 view .LVU73
 244              	.LBB45:
 301:src/menu.c    ****   if (on) {
 245              		.loc 1 301 3 view .LVU74
 246              	.LBB42:
 247              	.LBI36:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 248              		.loc 1 300 6 view .LVU75
 249              	.LBB39:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 250              		.loc 1 302 3 view .LVU76
 251              	.LBE39:
 252              	.LBE42:
 301:src/menu.c    ****   if (on) {
 253              		.loc 1 301 6 is_stmt 0 view .LVU77
 254 00c8 DA19     		adds	r2, r3, r7
 255              	.LVL21:
 301:src/menu.c    ****   if (on) {
 256              		.loc 1 301 6 view .LVU78
 257 00ca C72A     		cmp	r2, #199
 258              	.LBE45:
 259              	.LBE48:
 273:src/menu.c    ****       }
 260              		.loc 1 273 46 view .LVU79
 261 00cc 40FA03F1 		asr	r1, r0, r3
 262              	.LBB49:
 263              	.LBB46:
 301:src/menu.c    ****   if (on) {
 264              		.loc 1 301 6 view .LVU80
 265 00d0 09D8     		bhi	.L16
 266              	.LBB43:
 267              	.LBB40:
 303:src/menu.c    ****   }
 268              		.loc 1 303 5 is_stmt 1 view .LVU81
 269              		.loc 1 306 5 view .LVU82
 303:src/menu.c    ****   }
 270              		.loc 1 303 17 is_stmt 0 view .LVU83
 271 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 272              	.LVL22:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 273              		.loc 1 302 6 view .LVU84
 274 00d6 C907     		lsls	r1, r1, #31
 303:src/menu.c    ****   }
 275              		.loc 1 303 17 view .LVU85
 276 00d8 4CBF     		ite	mi
 277 00da 4CEA0202 		orrmi	r2, ip, r2
 278              		.loc 1 306 17 view .LVU86
ARM GAS  /tmp/cc2wwr9y.s 			page 12


 279 00de 08EA0202 		andpl	r2, r8, r2
 280 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 281              	.L16:
 282              	.LBE40:
 283              	.LBE43:
 284              	.LBE46:
 285              	.LBE49:
 271:src/menu.c    **** 	  break;
 286              		.loc 1 271 2 is_stmt 1 view .LVU87
 287              	.LVL23:
 270:src/menu.c    **** 	if (x+j >= xmax)
 288              		.loc 1 270 26 view .LVU88
 270:src/menu.c    **** 	if (x+j >= xmax)
 289              		.loc 1 270 27 is_stmt 0 view .LVU89
 290 00e6 0133     		adds	r3, r3, #1
 291              	.LVL24:
 270:src/menu.c    **** 	if (x+j >= xmax)
 292              		.loc 1 270 17 is_stmt 1 view .LVU90
 270:src/menu.c    **** 	if (x+j >= xmax)
 293              		.loc 1 270 7 is_stmt 0 view .LVU91
 294 00e8 B342     		cmp	r3, r6
 295 00ea EBD1     		bne	.L18
 296              	.LVL25:
 297              	.L19:
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 298              		.loc 1 269 20 is_stmt 1 view .LVU92
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 299              		.loc 1 269 15 view .LVU93
 300 00ec 0EF1FF3E 		add	lr, lr, #-1
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 301              		.loc 1 269 5 is_stmt 0 view .LVU94
 302 00f0 BEF1FF3F 		cmp	lr, #-1
 303 00f4 0BF1010B 		add	fp, fp, #1
 304              	.LVL26:
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 305              		.loc 1 269 5 view .LVU95
 306 00f8 D6D1     		bne	.L13
 276:src/menu.c    ****   }
 307              		.loc 1 276 5 is_stmt 1 view .LVU96
 308              	.LBE50:
 224:src/menu.c    ****     int c;
 309              		.loc 1 224 10 is_stmt 0 view .LVU97
 310 00fa 019B     		ldr	r3, [sp, #4]
 311 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 312              	.LBB51:
 276:src/menu.c    ****   }
 313              		.loc 1 276 7 view .LVU98
 314 00fe 3744     		add	r7, r7, r6
 315              	.LVL27:
 276:src/menu.c    ****   }
 316              		.loc 1 276 7 view .LVU99
 317              	.LBE51:
 224:src/menu.c    ****     int c;
 318              		.loc 1 224 9 is_stmt 1 view .LVU100
 319 0100 85B1     		cbz	r5, .L1
 224:src/menu.c    ****     int c;
 320              		.loc 1 224 23 is_stmt 0 view .LVU101
ARM GAS  /tmp/cc2wwr9y.s 			page 13


 321 0102 B945     		cmp	r9, r7
 322 0104 0EDB     		blt	.L1
 323              	.LBB52:
 239:src/menu.c    ****       width = str[1] & 0x1F;
 324              		.loc 1 239 8 view .LVU102
 325 0106 072D     		cmp	r5, #7
 326              	.LBE52:
 327 0108 009C     		ldr	r4, [sp]
 328              	.LBB53:
 225:src/menu.c    ****     int width;
 329              		.loc 1 225 5 is_stmt 1 view .LVU103
 226:src/menu.c    ****     unsigned char cmap[6];
 330              		.loc 1 226 5 view .LVU104
 227:src/menu.c    **** 
 331              		.loc 1 227 5 view .LVU105
 229:src/menu.c    ****     int current_smallp;
 332              		.loc 1 229 5 view .LVU106
 230:src/menu.c    **** 
 333              		.loc 1 230 5 view .LVU107
 239:src/menu.c    ****       width = str[1] & 0x1F;
 334              		.loc 1 239 5 view .LVU108
 239:src/menu.c    ****       width = str[1] & 0x1F;
 335              		.loc 1 239 8 is_stmt 0 view .LVU109
 336 010a 9AD0     		beq	.L34
 337              	.LVL28:
 338              	.L5:
 255:src/menu.c    ****       real_width = width = charlengths(c);
 339              		.loc 1 255 7 is_stmt 1 view .LVU110
 256:src/menu.c    ****       current_smallp = smallp;
 340              		.loc 1 256 28 is_stmt 0 view .LVU111
 341 010c 2846     		mov	r0, r5
 342 010e FFF7FEFF 		bl	charlengths
 343              	.LVL29:
 255:src/menu.c    ****       real_width = width = charlengths(c);
 344              		.loc 1 255 31 view .LVU112
 345 0112 019B     		ldr	r3, [sp, #4]
 346 0114 0133     		adds	r3, r3, #1
 347 0116 0193     		str	r3, [sp, #4]
 348              	.LVL30:
 256:src/menu.c    ****       current_smallp = smallp;
 349              		.loc 1 256 7 is_stmt 1 view .LVU113
 257:src/menu.c    ****     }
 350              		.loc 1 257 7 view .LVU114
 257:src/menu.c    ****     }
 351              		.loc 1 257 22 is_stmt 0 view .LVU115
 352 0118 0023     		movs	r3, #0
 353              	.LVL31:
 257:src/menu.c    ****     }
 354              		.loc 1 257 22 view .LVU116
 355 011a 0093     		str	r3, [sp]
 356              	.LVL32:
 260:src/menu.c    ****       break;
 357              		.loc 1 260 11 view .LVU117
 358 011c C319     		adds	r3, r0, r7
 359              	.LVL33:
 260:src/menu.c    ****       break;
 360              		.loc 1 260 8 view .LVU118
ARM GAS  /tmp/cc2wwr9y.s 			page 14


 361 011e 9945     		cmp	r9, r3
 256:src/menu.c    ****       current_smallp = smallp;
 362              		.loc 1 256 28 view .LVU119
 363 0120 0646     		mov	r6, r0
 260:src/menu.c    ****       break;
 364              		.loc 1 260 5 is_stmt 1 view .LVU120
 260:src/menu.c    ****       break;
 365              		.loc 1 260 8 is_stmt 0 view .LVU121
 366 0122 A7DA     		bge	.L35
 367              	.LVL34:
 368              	.L1:
 260:src/menu.c    ****       break;
 369              		.loc 1 260 8 view .LVU122
 370              	.LBE53:
 278:src/menu.c    **** 
 371              		.loc 1 278 1 view .LVU123
 372 0124 0DF5097D 		add	sp, sp, #548
 373              		.cfi_remember_state
 374              		.cfi_def_cfa_offset 36
 375              		@ sp needed
 376 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 377              	.LVL35:
 378              	.L28:
 379              		.cfi_restore_state
 380              	.LBB54:
 250:src/menu.c    ****       str += 3;
 381              		.loc 1 250 7 is_stmt 1 view .LVU124
 250:src/menu.c    ****       str += 3;
 382              		.loc 1 250 11 is_stmt 0 view .LVU125
 383 012c 019B     		ldr	r3, [sp, #4]
 384 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 243:src/menu.c    **** 	break;
 385              		.loc 1 243 33 view .LVU126
 386 0130 0023     		movs	r3, #0
 387 0132 0093     		str	r3, [sp]
 388 0134 95E7     		b	.L9
 389              	.L37:
 390 0136 00BF     		.align	2
 391              	.L36:
 392 0138 00000000 		.word	forceDispPlot
 393 013c 00000000 		.word	RectPolConv
 394 0140 00000000 		.word	.LANCHOR0
 395              	.LBE54:
 396              		.cfi_endproc
 397              	.LFE25:
 399              		.section	.text.set_menu,"ax",%progbits
 400              		.align	1
 401              		.p2align 2,,3
 402              		.global	set_menu
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu fpv4-sp-d16
 408              	set_menu:
 409              	.LVL36:
 410              	.LFB3:
   3:src/menu.c    ****   int m = current_menu;
ARM GAS  /tmp/cc2wwr9y.s 			page 15


 411              		.loc 1 3 32 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              		@ link register save eliminated.
   4:src/menu.c    ****   if (new_menu == current_menu) {
 416              		.loc 1 4 3 view .LVU128
   4:src/menu.c    ****   if (new_menu == current_menu) {
 417              		.loc 1 4 7 is_stmt 0 view .LVU129
 418 0000 084A     		ldr	r2, .L43
 419 0002 1368     		ldr	r3, [r2]
 420              	.LVL37:
   5:src/menu.c    ****     current_menu = 0;
 421              		.loc 1 5 3 is_stmt 1 view .LVU130
   5:src/menu.c    ****     current_menu = 0;
 422              		.loc 1 5 6 is_stmt 0 view .LVU131
 423 0004 8342     		cmp	r3, r0
 424 0006 07D0     		beq	.L42
   8:src/menu.c    ****     current_menu = last_menu;
 425              		.loc 1 8 8 is_stmt 1 view .LVU132
   9:src/menu.c    ****   }
 426              		.loc 1 9 18 is_stmt 0 view .LVU133
 427 0008 0749     		ldr	r1, .L43+4
   8:src/menu.c    ****     current_menu = last_menu;
 428              		.loc 1 8 11 view .LVU134
 429 000a B0F1FF3F 		cmp	r0, #-1
   9:src/menu.c    ****   }
 430              		.loc 1 9 5 is_stmt 1 view .LVU135
   9:src/menu.c    ****   }
 431              		.loc 1 9 18 is_stmt 0 view .LVU136
 432 000e 08BF     		it	eq
 433 0010 0868     		ldreq	r0, [r1]
 434              	.LVL38:
  12:src/menu.c    ****   }
 435              		.loc 1 12 5 is_stmt 1 view .LVU137
  12:src/menu.c    ****   }
 436              		.loc 1 12 18 is_stmt 0 view .LVU138
 437 0012 1060     		str	r0, [r2]
  14:src/menu.c    **** }
 438              		.loc 1 14 3 is_stmt 1 view .LVU139
  14:src/menu.c    **** }
 439              		.loc 1 14 13 is_stmt 0 view .LVU140
 440 0014 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 441              		.loc 1 15 1 view .LVU141
 442 0016 7047     		bx	lr
 443              	.LVL39:
 444              	.L42:
   6:src/menu.c    ****   }
 445              		.loc 1 6 5 is_stmt 1 view .LVU142
   6:src/menu.c    ****   }
 446              		.loc 1 6 18 is_stmt 0 view .LVU143
 447 0018 0021     		movs	r1, #0
 448 001a 1160     		str	r1, [r2]
 449 001c 0249     		ldr	r1, .L43+4
  14:src/menu.c    **** }
 450              		.loc 1 14 3 is_stmt 1 view .LVU144
ARM GAS  /tmp/cc2wwr9y.s 			page 16


  14:src/menu.c    **** }
 451              		.loc 1 14 13 is_stmt 0 view .LVU145
 452 001e 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 453              		.loc 1 15 1 view .LVU146
 454 0020 7047     		bx	lr
 455              	.L44:
 456 0022 00BF     		.align	2
 457              	.L43:
 458 0024 00000000 		.word	.LANCHOR1
 459 0028 00000000 		.word	.LANCHOR2
 460              		.cfi_endproc
 461              	.LFE3:
 463              		.section	.text.get_menu,"ax",%progbits
 464              		.align	1
 465              		.p2align 2,,3
 466              		.global	get_menu
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv4-sp-d16
 472              	get_menu:
 473              	.LFB4:
  17:src/menu.c    ****   return current_menu;
 474              		.loc 1 17 17 is_stmt 1 view -0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
  18:src/menu.c    **** }
 479              		.loc 1 18 3 view .LVU148
  18:src/menu.c    **** }
 480              		.loc 1 18 10 is_stmt 0 view .LVU149
 481 0000 014B     		ldr	r3, .L46
  19:src/menu.c    **** 
 482              		.loc 1 19 1 view .LVU150
 483 0002 1868     		ldr	r0, [r3]
 484 0004 7047     		bx	lr
 485              	.L47:
 486 0006 00BF     		.align	2
 487              	.L46:
 488 0008 00000000 		.word	.LANCHOR1
 489              		.cfi_endproc
 490              	.LFE4:
 492              		.section	.text.set_last_menu,"ax",%progbits
 493              		.align	1
 494              		.p2align 2,,3
 495              		.global	set_last_menu
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu fpv4-sp-d16
 501              	set_last_menu:
 502              	.LFB6:
  25:src/menu.c    ****   set_menu (last_menu);
 503              		.loc 1 25 23 is_stmt 1 view -0
 504              		.cfi_startproc
ARM GAS  /tmp/cc2wwr9y.s 			page 17


 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
  26:src/menu.c    **** }
 508              		.loc 1 26 3 view .LVU152
 509 0000 044B     		ldr	r3, .L52
 510              	.LBB55:
 511              	.LBB56:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 512              		.loc 1 4 7 is_stmt 0 view .LVU153
 513 0002 0549     		ldr	r1, .L52+4
 514              	.LBE56:
 515              	.LBE55:
  26:src/menu.c    **** }
 516              		.loc 1 26 3 view .LVU154
 517 0004 1868     		ldr	r0, [r3]
 518              	.LVL40:
 519              	.LBB58:
 520              	.LBI55:
   3:src/menu.c    ****   int m = current_menu;
 521              		.loc 1 3 6 is_stmt 1 view .LVU155
 522              	.LBB57:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 523              		.loc 1 4 3 view .LVU156
   4:src/menu.c    ****   if (new_menu == current_menu) {
 524              		.loc 1 4 7 is_stmt 0 view .LVU157
 525 0006 0A68     		ldr	r2, [r1]
 526              	.LVL41:
   5:src/menu.c    ****     current_menu = 0;
 527              		.loc 1 5 3 is_stmt 1 view .LVU158
  14:src/menu.c    **** }
 528              		.loc 1 14 13 is_stmt 0 view .LVU159
 529 0008 1A60     		str	r2, [r3]
   5:src/menu.c    ****     current_menu = 0;
 530              		.loc 1 5 6 view .LVU160
 531 000a 9042     		cmp	r0, r2
   6:src/menu.c    ****   }
 532              		.loc 1 6 5 is_stmt 1 view .LVU161
   6:src/menu.c    ****   }
 533              		.loc 1 6 18 is_stmt 0 view .LVU162
 534 000c 08BF     		it	eq
 535 000e 0020     		moveq	r0, #0
 536              	.LVL42:
   8:src/menu.c    ****     current_menu = last_menu;
 537              		.loc 1 8 8 is_stmt 1 view .LVU163
  12:src/menu.c    ****   }
 538              		.loc 1 12 18 is_stmt 0 view .LVU164
 539 0010 0860     		str	r0, [r1]
  14:src/menu.c    **** }
 540              		.loc 1 14 3 is_stmt 1 view .LVU165
 541              	.LVL43:
  14:src/menu.c    **** }
 542              		.loc 1 14 3 is_stmt 0 view .LVU166
 543              	.LBE57:
 544              	.LBE58:
  27:src/menu.c    **** 
 545              		.loc 1 27 1 view .LVU167
ARM GAS  /tmp/cc2wwr9y.s 			page 18


 546 0012 7047     		bx	lr
 547              	.L53:
 548              		.align	2
 549              	.L52:
 550 0014 00000000 		.word	.LANCHOR2
 551 0018 00000000 		.word	.LANCHOR1
 552              		.cfi_endproc
 553              	.LFE6:
 555              		.section	.text.mdot,"ax",%progbits
 556              		.align	1
 557              		.p2align 2,,3
 558              		.global	mdot
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu fpv4-sp-d16
 564              	mdot:
 565              	.LVL44:
 566              	.LFB8:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 567              		.loc 1 300 40 is_stmt 1 view -0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 301:src/menu.c    ****   if (on) {
 572              		.loc 1 301 3 view .LVU169
 301:src/menu.c    ****   if (on) {
 573              		.loc 1 301 6 is_stmt 0 view .LVU170
 574 0000 C728     		cmp	r0, #199
 575 0002 1AD8     		bhi	.L58
 576              	.LVL45:
 577              	.LBB61:
 578              	.LBI61:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 579              		.loc 1 300 6 is_stmt 1 view .LVU171
 580              	.LBB62:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 581              		.loc 1 302 3 view .LVU172
 582              	.LBE62:
 583              	.LBE61:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 584              		.loc 1 300 40 is_stmt 0 view .LVU173
 585 0004 10B4     		push	{r4}
 586              		.cfi_def_cfa_offset 4
 587              		.cfi_offset 4, -4
 588              	.LBB65:
 589              	.LBB63:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 590              		.loc 1 302 6 view .LVU174
 591 0006 63B9     		cbnz	r3, .L61
 592              		.loc 1 306 5 is_stmt 1 view .LVU175
 593              		.loc 1 306 17 is_stmt 0 view .LVU176
 594 0008 0C4B     		ldr	r3, .L62
 595              	.LVL46:
 596              		.loc 1 306 17 view .LVU177
 597 000a 03EB4000 		add	r0, r3, r0, lsl #1
ARM GAS  /tmp/cc2wwr9y.s 			page 19


 598              	.LVL47:
 599              		.loc 1 306 25 view .LVU178
 600 000e 0124     		movs	r4, #1
 601              		.loc 1 306 17 view .LVU179
 602 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 603              		.loc 1 306 25 view .LVU180
 604 0012 04FA01F1 		lsl	r1, r4, r1
 605              	.LVL48:
 606              		.loc 1 306 17 view .LVU181
 607 0016 23EA0101 		bic	r1, r3, r1
 608 001a 8154     		strb	r1, [r0, r2]
 609              	.LVL49:
 610              		.loc 1 306 17 view .LVU182
 611              	.LBE63:
 612              	.LBE65:
 307:src/menu.c    ****   }
 308:src/menu.c    **** }
 613              		.loc 1 308 1 view .LVU183
 614 001c 5DF8044B 		ldr	r4, [sp], #4
 615              		.cfi_remember_state
 616              		.cfi_restore 4
 617              		.cfi_def_cfa_offset 0
 618 0020 7047     		bx	lr
 619              	.LVL50:
 620              	.L61:
 621              		.cfi_restore_state
 622              	.LBB66:
 623              	.LBB64:
 303:src/menu.c    ****   }
 624              		.loc 1 303 5 is_stmt 1 view .LVU184
 303:src/menu.c    ****   }
 625              		.loc 1 303 17 is_stmt 0 view .LVU185
 626 0022 064B     		ldr	r3, .L62
 627              	.LVL51:
 303:src/menu.c    ****   }
 628              		.loc 1 303 17 view .LVU186
 629 0024 03EB4000 		add	r0, r3, r0, lsl #1
 630              	.LVL52:
 303:src/menu.c    ****   }
 631              		.loc 1 303 24 view .LVU187
 632 0028 0124     		movs	r4, #1
 303:src/menu.c    ****   }
 633              		.loc 1 303 17 view .LVU188
 634 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 303:src/menu.c    ****   }
 635              		.loc 1 303 24 view .LVU189
 636 002c 04FA01F1 		lsl	r1, r4, r1
 637              	.LVL53:
 303:src/menu.c    ****   }
 638              		.loc 1 303 17 view .LVU190
 639 0030 1943     		orrs	r1, r1, r3
 640 0032 8154     		strb	r1, [r0, r2]
 641              	.LBE64:
 642              	.LBE66:
 643              		.loc 1 308 1 view .LVU191
 644 0034 5DF8044B 		ldr	r4, [sp], #4
 645              		.cfi_restore 4
ARM GAS  /tmp/cc2wwr9y.s 			page 20


 646              		.cfi_def_cfa_offset 0
 647 0038 7047     		bx	lr
 648              	.LVL54:
 649              	.L58:
 650              		.loc 1 308 1 view .LVU192
 651 003a 7047     		bx	lr
 652              	.L63:
 653              		.align	2
 654              	.L62:
 655 003c 00000000 		.word	.LANCHOR0
 656              		.cfi_endproc
 657              	.LFE8:
 659              		.section	.text.display_menu,"ax",%progbits
 660              		.align	1
 661              		.p2align 2,,3
 662              		.global	display_menu
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu fpv4-sp-d16
 668              	display_menu:
 669              	.LVL55:
 670              	.LFB9:
 309:src/menu.c    **** 
 310:src/menu.c    **** 
 311:src/menu.c    **** void display_menu (int current_menu) {
 671              		.loc 1 311 38 is_stmt 1 view -0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 312:src/menu.c    ****   int len = 0;
 675              		.loc 1 312 3 view .LVU194
 313:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 676              		.loc 1 313 3 view .LVU195
 311:src/menu.c    ****   int len = 0;
 677              		.loc 1 311 38 is_stmt 0 view .LVU196
 678 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 679              		.cfi_def_cfa_offset 36
 680              		.cfi_offset 4, -36
 681              		.cfi_offset 5, -32
 682              		.cfi_offset 6, -28
 683              		.cfi_offset 7, -24
 684              		.cfi_offset 8, -20
 685              		.cfi_offset 9, -16
 686              		.cfi_offset 10, -12
 687              		.cfi_offset 11, -8
 688              		.cfi_offset 14, -4
 689 0004 83B0     		sub	sp, sp, #12
 690              		.cfi_def_cfa_offset 48
 691              		.loc 1 313 3 view .LVU197
 692 0006 0024     		movs	r4, #0
 693 0008 404F     		ldr	r7, .L82
 694 000a 0094     		str	r4, [sp]
 695 000c 3423     		movs	r3, #52
 696 000e 4FF4C872 		mov	r2, #400
 697 0012 BC21     		movs	r1, #188
 311:src/menu.c    ****   int len = 0;
ARM GAS  /tmp/cc2wwr9y.s 			page 21


 698              		.loc 1 311 38 view .LVU198
 699 0014 0646     		mov	r6, r0
 700              		.loc 1 313 3 view .LVU199
 701 0016 2046     		mov	r0, r4
 702              	.LVL56:
 703              		.loc 1 313 3 view .LVU200
 704 0018 B847     		blx	r7
 705              	.LVL57:
 314:src/menu.c    ****   //  if (current_menu == 0) return; // Menu 0 is blank
 315:src/menu.c    ****   // Not blank now - includes arrow and cmplx like all the others.
 316:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 706              		.loc 1 316 3 is_stmt 1 view .LVU201
 707 001a 3D4D     		ldr	r5, .L82+4
 708 001c FF23     		movs	r3, #255
 709 001e 0093     		str	r3, [sp]
 710 0020 4FF4C872 		mov	r2, #400
 711 0024 0123     		movs	r3, #1
 712 0026 BC21     		movs	r1, #188
 713 0028 2046     		mov	r0, r4
 714 002a B847     		blx	r7
 715              	.LVL58:
 317:src/menu.c    ****   //Clear previous menu
 318:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 716              		.loc 1 318 3 view .LVU202
 717              	.LBB67:
 718              		.loc 1 318 8 view .LVU203
 719              		.loc 1 318 21 view .LVU204
 319:src/menu.c    ****     mdots[col][0] = 0;
 720              		.loc 1 319 19 is_stmt 0 view .LVU205
 721 002c 2246     		mov	r2, r4
 722 002e 05F5C871 		add	r1, r5, #400
 723              	.LBE67:
 316:src/menu.c    ****   //Clear previous menu
 724              		.loc 1 316 3 view .LVU206
 725 0032 2B46     		mov	r3, r5
 726              	.LVL59:
 727              	.L65:
 728              	.LBB68:
 729              		.loc 1 319 5 is_stmt 1 discriminator 3 view .LVU207
 730              		.loc 1 319 19 is_stmt 0 discriminator 3 view .LVU208
 731 0034 1A70     		strb	r2, [r3]
 320:src/menu.c    ****     mdots[col][1] = 0;
 732              		.loc 1 320 5 is_stmt 1 discriminator 3 view .LVU209
 733              		.loc 1 320 19 is_stmt 0 discriminator 3 view .LVU210
 734 0036 5A70     		strb	r2, [r3, #1]
 318:src/menu.c    ****     mdots[col][0] = 0;
 735              		.loc 1 318 32 is_stmt 1 discriminator 3 view .LVU211
 318:src/menu.c    ****     mdots[col][0] = 0;
 736              		.loc 1 318 21 discriminator 3 view .LVU212
 737 0038 0233     		adds	r3, r3, #2
 318:src/menu.c    ****     mdots[col][0] = 0;
 738              		.loc 1 318 3 is_stmt 0 discriminator 3 view .LVU213
 739 003a 9942     		cmp	r1, r3
 740 003c FAD1     		bne	.L65
 741 003e 354B     		ldr	r3, .L82+8
 742 0040 D022     		movs	r2, #208
 743 0042 02FB0636 		mla	r6, r2, r6, r3
ARM GAS  /tmp/cc2wwr9y.s 			page 22


 744              	.LVL60:
 318:src/menu.c    ****     mdots[col][0] = 0;
 745              		.loc 1 318 3 discriminator 3 view .LVU214
 746 0046 2036     		adds	r6, r6, #32
 318:src/menu.c    ****     mdots[col][0] = 0;
 747              		.loc 1 318 3 view .LVU215
 748 0048 0024     		movs	r4, #0
 749              	.LVL61:
 750              	.L66:
 318:src/menu.c    ****     mdots[col][0] = 0;
 751              		.loc 1 318 3 view .LVU216
 752              	.LBE68:
 753              	.LBB69:
 321:src/menu.c    ****   }
 322:src/menu.c    **** 
 323:src/menu.c    ****   // Draw menu items
 324:src/menu.c    ****   // 
 325:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 326:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 327:src/menu.c    ****     // Unshifted first
 328:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small fo
 754              		.loc 1 328 5 is_stmt 1 view .LVU217
 755              		.loc 1 328 11 is_stmt 0 view .LVU218
 756 004a 0021     		movs	r1, #0
 757 004c 3046     		mov	r0, r6
 758 004e FFF7FEFF 		bl	pixel_length
 759              	.LVL62:
 329:src/menu.c    ****     /*
 330:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 331:src/menu.c    ****     */
 332:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 )
 760              		.loc 1 332 5 is_stmt 1 view .LVU219
 761              		.loc 1 332 87 is_stmt 0 view .LVU220
 762 0052 C0F12000 		rsb	r0, r0, #32
 763              	.LVL63:
 764              		.loc 1 332 93 view .LVU221
 765 0056 00EBD070 		add	r0, r0, r0, lsr #31
 766              		.loc 1 332 5 view .LVU222
 767 005a 04EB6001 		add	r1, r4, r0, asr #1
 768 005e 0022     		movs	r2, #0
 769 0060 3046     		mov	r0, r6
 770 0062 06F10807 		add	r7, r6, #8
 771 0066 FFF7FEFF 		bl	set_menu_label.constprop.0
 772              	.LVL64:
 333:src/menu.c    ****     // Now shifted ...	
 334:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small font
 773              		.loc 1 334 5 is_stmt 1 view .LVU223
 774              		.loc 1 334 11 is_stmt 0 view .LVU224
 775 006a 0021     		movs	r1, #0
 776 006c 3846     		mov	r0, r7
 777 006e FFF7FEFF 		bl	pixel_length
 778              	.LVL65:
 335:src/menu.c    ****     len = item*32 + (32-len)/2;
 779              		.loc 1 335 5 is_stmt 1 view .LVU225
 780              		.loc 1 335 24 is_stmt 0 view .LVU226
 781 0072 C0F12000 		rsb	r0, r0, #32
 782              	.LVL66:
ARM GAS  /tmp/cc2wwr9y.s 			page 23


 783              		.loc 1 335 29 view .LVU227
 784 0076 00EBD070 		add	r0, r0, r0, lsr #31
 785              	.LVL67:
 336:src/menu.c    ****     if (len<0) len = 0;
 786              		.loc 1 336 5 is_stmt 1 view .LVU228
 335:src/menu.c    ****     len = item*32 + (32-len)/2;
 787              		.loc 1 335 9 is_stmt 0 view .LVU229
 788 007a 04EB6001 		add	r1, r4, r0, asr #1
 789              	.LVL68:
 335:src/menu.c    ****     len = item*32 + (32-len)/2;
 790              		.loc 1 335 9 view .LVU230
 791 007e C729     		cmp	r1, #199
 792 0080 A8BF     		it	ge
 793 0082 C721     		movge	r1, #199
 794              	.LVL69:
 337:src/menu.c    ****     if (len>199) len = 199;
 338:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 795              		.loc 1 338 5 is_stmt 1 view .LVU231
 796 0084 21EAE171 		bic	r1, r1, r1, asr #31
 797              	.LVL70:
 798              		.loc 1 338 5 is_stmt 0 view .LVU232
 799 0088 3846     		mov	r0, r7
 800 008a 2034     		adds	r4, r4, #32
 801 008c 0122     		movs	r2, #1
 802 008e FFF7FEFF 		bl	set_menu_label.constprop.0
 803              	.LVL71:
 325:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 804              		.loc 1 325 32 is_stmt 1 view .LVU233
 325:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 805              		.loc 1 325 22 view .LVU234
 325:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 806              		.loc 1 325 3 is_stmt 0 view .LVU235
 807 0092 C02C     		cmp	r4, #192
 808 0094 06F12006 		add	r6, r6, #32
 809 0098 D7D1     		bne	.L66
 810 009a 1F4E     		ldr	r6, .L82+12
 811              	.LBE69:
 812              	.LBB70:
 813              	.LBB71:
 339:src/menu.c    ****   }
 340:src/menu.c    **** 
 341:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 342:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 343:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 344:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 345:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 814              		.loc 1 345 2 view .LVU236
 815 009c DFF86C90 		ldr	r9, .L82
 816 00a0 6FEA050A 		mvn	r10, r5
 817 00a4 06F5C87B 		add	fp, r6, #400
 818              	.LBE71:
 819              	.LBE70:
 820              	.LBB73:
 325:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 821              		.loc 1 325 3 view .LVU237
 822 00a8 771E     		subs	r7, r6, #1
 823              	.LBE73:
ARM GAS  /tmp/cc2wwr9y.s 			page 24


 824              	.LBB74:
 825              	.LBB72:
 826              		.loc 1 345 2 view .LVU238
 827 00aa 4FF0FF08 		mov	r8, #255
 828              	.L67:
 829              	.LVL72:
 342:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 830              		.loc 1 342 23 is_stmt 1 view .LVU239
 831 00ae 0AEB0605 		add	r5, r10, r6
 342:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 832              		.loc 1 342 14 is_stmt 0 view .LVU240
 833 00b2 0024     		movs	r4, #0
 834              	.LVL73:
 835              	.L70:
 343:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 836              		.loc 1 343 7 is_stmt 1 view .LVU241
 837              		.loc 1 345 2 view .LVU242
 343:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 838              		.loc 1 343 22 is_stmt 0 view .LVU243
 839 00b4 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 343:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 840              		.loc 1 343 40 view .LVU244
 841 00b8 2241     		asrs	r2, r2, r4
 842              		.loc 1 345 2 view .LVU245
 843 00ba A4EB8401 		sub	r1, r4, r4, lsl #2
 844 00be 0323     		movs	r3, #3
 343:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 845              		.loc 1 343 10 view .LVU246
 846 00c0 12F0010F 		tst	r2, #1
 847              		.loc 1 345 2 view .LVU247
 848 00c4 01F1E901 		add	r1, r1, #233
 849 00c8 1A46     		mov	r2, r3
 850 00ca 2846     		mov	r0, r5
 343:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 851              		.loc 1 343 10 view .LVU248
 852 00cc 02D0     		beq	.L68
 853              		.loc 1 345 2 view .LVU249
 854 00ce CDF80080 		str	r8, [sp]
 855 00d2 C847     		blx	r9
 856              	.LVL74:
 857              	.L68:
 346:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 858              		.loc 1 346 7 is_stmt 1 view .LVU250
 347:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 348:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 859              		.loc 1 348 2 view .LVU251
 346:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 860              		.loc 1 346 22 is_stmt 0 view .LVU252
 861 00d4 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 346:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 862              		.loc 1 346 40 view .LVU253
 863 00d6 2241     		asrs	r2, r2, r4
 864              		.loc 1 348 2 view .LVU254
 865 00d8 A4EB8401 		sub	r1, r4, r4, lsl #2
 866 00dc 0323     		movs	r3, #3
 346:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 867              		.loc 1 346 10 view .LVU255
ARM GAS  /tmp/cc2wwr9y.s 			page 25


 868 00de 12F0010F 		tst	r2, #1
 869              		.loc 1 348 2 view .LVU256
 870 00e2 01F1D001 		add	r1, r1, #208
 871 00e6 1A46     		mov	r2, r3
 872 00e8 04F10104 		add	r4, r4, #1
 873              	.LVL75:
 874              		.loc 1 348 2 view .LVU257
 875 00ec 2846     		mov	r0, r5
 346:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 876              		.loc 1 346 10 view .LVU258
 877 00ee 02D0     		beq	.L69
 878              		.loc 1 348 2 view .LVU259
 879 00f0 CDF80080 		str	r8, [sp]
 880 00f4 C847     		blx	r9
 881              	.LVL76:
 882              	.L69:
 342:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 883              		.loc 1 342 32 is_stmt 1 discriminator 2 view .LVU260
 342:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 884              		.loc 1 342 23 discriminator 2 view .LVU261
 342:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 885              		.loc 1 342 5 is_stmt 0 discriminator 2 view .LVU262
 886 00f6 062C     		cmp	r4, #6
 887 00f8 DCD1     		bne	.L70
 888              	.LBE72:
 341:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 889              		.loc 1 341 32 is_stmt 1 discriminator 2 view .LVU263
 341:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 890              		.loc 1 341 21 discriminator 2 view .LVU264
 891 00fa 0236     		adds	r6, r6, #2
 341:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 892              		.loc 1 341 3 is_stmt 0 discriminator 2 view .LVU265
 893 00fc B345     		cmp	fp, r6
 894 00fe 07F10207 		add	r7, r7, #2
 895 0102 D4D1     		bne	.L67
 896              	.LBE74:
 349:src/menu.c    ****     }
 350:src/menu.c    ****   }
 351:src/menu.c    **** }
 897              		.loc 1 351 1 view .LVU266
 898 0104 03B0     		add	sp, sp, #12
 899              		.cfi_def_cfa_offset 36
 900              		@ sp needed
 901 0106 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 902              	.LVL77:
 903              	.L83:
 904              		.loc 1 351 1 view .LVU267
 905 010a 00BF     		.align	2
 906              	.L82:
 907 010c 3D020008 		.word	134218301
 908 0110 00000000 		.word	.LANCHOR0
 909 0114 00000000 		.word	.LANCHOR3
 910 0118 01000000 		.word	.LANCHOR0+1
 911              		.cfi_endproc
 912              	.LFE9:
 914              		.section	.text.display_current_menu,"ax",%progbits
 915              		.align	1
ARM GAS  /tmp/cc2wwr9y.s 			page 26


 916              		.p2align 2,,3
 917              		.global	display_current_menu
 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu fpv4-sp-d16
 923              	display_current_menu:
 924              	.LFB5:
  21:src/menu.c    ****   display_menu (current_menu);
 925              		.loc 1 21 30 is_stmt 1 view -0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
  22:src/menu.c    **** }
 930              		.loc 1 22 3 view .LVU269
 931 0000 014B     		ldr	r3, .L85
 932 0002 1868     		ldr	r0, [r3]
 933 0004 FFF7FEBF 		b	display_menu
 934              	.LVL78:
 935              	.L86:
 936              		.align	2
 937              	.L85:
 938 0008 00000000 		.word	.LANCHOR1
 939              		.cfi_endproc
 940              	.LFE5:
 942              		.section	.text.shutdown,"ax",%progbits
 943              		.align	1
 944              		.p2align 2,,3
 945              		.global	shutdown
 946              		.syntax unified
 947              		.thumb
 948              		.thumb_func
 949              		.fpu fpv4-sp-d16
 951              	shutdown:
 952              	.LFB11:
 953              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
ARM GAS  /tmp/cc2wwr9y.s 			page 27


  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** const uint8_t mid_menu[] = {
  46:src/console.c ****     MI_SYSTEM_ENTER,
  47:src/console.c ****     MI_MSC,
  48:src/console.c ****     0 }; // Terminator
  49:src/console.c **** 
  50:src/console.c **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  51:src/console.c **** 
  52:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  53:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  54:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  55:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  56:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  57:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  58:src/console.c **** 
  59:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  60:src/console.c **** 
  61:src/console.c **** static struct _ndmap remap (const int c) {
  62:src/console.c **** 
  63:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  64:src/console.c **** 
  65:src/console.c **** #include "keytran.c"
  66:src/console.c **** 
  67:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  68:src/console.c **** 
  69:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  70:src/console.c **** 
  71:src/console.c ****   if (c == 44 ) {
  72:src/console.c ****     // Start click 
  73:src/console.c ****     start_buzzer_freq(4400); sys_delay(10); stop_buzzer();
  74:src/console.c ****     // Make screenshot - allow to report errors
  75:src/console.c ****     if ( create_screenshot(1) == 2 ) {
  76:src/console.c ****       // Was error just wait for confirmation
  77:src/console.c ****       wait_for_key_press();
ARM GAS  /tmp/cc2wwr9y.s 			page 28


  78:src/console.c ****     }
  79:src/console.c ****     // End click
  80:src/console.c ****     start_buzzer_freq(8800); sys_delay(10); stop_buzzer();
  81:src/console.c ****     return no_key;
  82:src/console.c ****   }
  83:src/console.c **** 
  84:src/console.c ****   
  85:src/console.c ****   if ( get_alpha_state() ) {
  86:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  87:src/console.c ****       switch (cur_shift()) { 
  88:src/console.c ****       case SHIFT_N:
  89:src/console.c **** 	return mapping_none[c]; // N -> F
  90:src/console.c **** 	break;
  91:src/console.c ****       case SHIFT_F:
  92:src/console.c **** 	return mapping_fshift[c]; // F -> G
  93:src/console.c **** 	break;
  94:src/console.c ****       case SHIFT_G:
  95:src/console.c **** 	return h_shift; // G -> H
  96:src/console.c **** 	break;
  97:src/console.c ****       case SHIFT_H:
  98:src/console.c **** 	return h_shift; // H -> N
  99:src/console.c ****       default:
 100:src/console.c **** 	return no_change;
 101:src/console.c ****       }
 102:src/console.c ****     }
 103:src/console.c ****     return mapping_alpha [c];
 104:src/console.c ****   }
 105:src/console.c ****     
 106:src/console.c ****   switch (c) {
 107:src/console.c ****   case KEY_F1:
 108:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
 109:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 110:src/console.c ****   case KEY_F2:
 111:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
 112:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 113:src/console.c ****   case KEY_F3:
 114:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 115:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 116:src/console.c ****   case KEY_F4:
 117:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 118:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 119:src/console.c ****   case KEY_F5:
 120:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 121:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 122:src/console.c ****   case KEY_F6:
 123:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 124:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 125:src/console.c ****   }
 126:src/console.c ****   
 127:src/console.c ****   switch (cur_shift()) {
 128:src/console.c ****   case SHIFT_N:    
 129:src/console.c ****     return mapping_none[c];
 130:src/console.c ****     break;
 131:src/console.c ****   case SHIFT_F:
 132:src/console.c ****     return mapping_fshift[c];
 133:src/console.c ****     break;
 134:src/console.c ****   case SHIFT_G:
ARM GAS  /tmp/cc2wwr9y.s 			page 29


 135:src/console.c ****     return mapping_gshift[c];
 136:src/console.c ****     break;
 137:src/console.c ****   default:
 138:src/console.c ****     return no_change;
 139:src/console.c ****   }
 140:src/console.c **** }
 141:src/console.c **** 
 142:src/console.c **** #endif
 143:src/console.c **** 
 144:src/console.c **** void shutdown( void )
 145:src/console.c **** {
 954              		.loc 2 145 1 view -0
 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 0
 957              		@ frame_needed = 0, uses_anonymous_args = 0
 146:src/console.c **** #ifndef DM42
 147:src/console.c ****   checksum_all();
 148:src/console.c ****   setuptty( 1 );
 149:src/console.c ****   save_statefile( NULL );
 150:src/console.c ****   exit( 0 );
 151:src/console.c **** #else
 152:src/console.c ****   save_ram_file(0);
 958              		.loc 2 152 3 view .LVU271
 145:src/console.c **** #ifndef DM42
 959              		.loc 2 145 1 is_stmt 0 view .LVU272
 960 0000 08B5     		push	{r3, lr}
 961              		.cfi_def_cfa_offset 8
 962              		.cfi_offset 3, -8
 963              		.cfi_offset 14, -4
 964              		.loc 2 152 3 view .LVU273
 965 0002 0020     		movs	r0, #0
 966 0004 FFF7FEFF 		bl	save_ram_file
 967              	.LVL79:
 153:src/console.c ****   SET_ST(STAT_PGM_END);
 968              		.loc 2 153 3 is_stmt 1 view .LVU274
 969 0008 024A     		ldr	r2, .L89
 970 000a 1368     		ldr	r3, [r2]
 971 000c 43F40073 		orr	r3, r3, #512
 972 0010 1360     		str	r3, [r2]
 154:src/console.c **** #endif
 155:src/console.c **** }
 973              		.loc 2 155 1 is_stmt 0 view .LVU275
 974 0012 08BD     		pop	{r3, pc}
 975              	.L90:
 976              		.align	2
 977              	.L89:
 978 0014 00200010 		.word	268443648
 979              		.cfi_endproc
 980              	.LFE11:
 982              		.section	.text.is_key_pressed,"ax",%progbits
 983              		.align	1
 984              		.p2align 2,,3
 985              		.global	is_key_pressed
 986              		.syntax unified
 987              		.thumb
 988              		.thumb_func
 989              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc2wwr9y.s 			page 30


 991              	is_key_pressed:
 992              	.LFB12:
 156:src/console.c **** 
 157:src/console.c **** 
 158:src/console.c **** /*
 159:src/console.c ****  *  Dummies
 160:src/console.c ****  */
 161:src/console.c **** int is_key_pressed(void) 
 162:src/console.c **** {
 993              		.loc 2 162 1 is_stmt 1 view -0
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 0
 996              		@ frame_needed = 0, uses_anonymous_args = 0
 163:src/console.c **** #ifdef DM42
 164:src/console.c ****   return !key_empty();
 997              		.loc 2 164 3 view .LVU277
 162:src/console.c **** #ifdef DM42
 998              		.loc 2 162 1 is_stmt 0 view .LVU278
 999 0000 08B5     		push	{r3, lr}
 1000              		.cfi_def_cfa_offset 8
 1001              		.cfi_offset 3, -8
 1002              		.cfi_offset 14, -4
 1003              		.loc 2 164 11 view .LVU279
 1004 0002 034B     		ldr	r3, .L93
 1005 0004 9847     		blx	r3
 1006              	.LVL80:
 165:src/console.c **** #else
 166:src/console.c ****   return 0;
 167:src/console.c **** #endif
 168:src/console.c **** }
 1007              		.loc 2 168 1 view .LVU280
 1008 0006 B0FA80F0 		clz	r0, r0
 1009 000a 4009     		lsrs	r0, r0, #5
 1010 000c 08BD     		pop	{r3, pc}
 1011              	.L94:
 1012 000e 00BF     		.align	2
 1013              	.L93:
 1014 0010 7D030008 		.word	134218621
 1015              		.cfi_endproc
 1016              	.LFE12:
 1018              		.section	.text.get_key,"ax",%progbits
 1019              		.align	1
 1020              		.p2align 2,,3
 1021              		.global	get_key
 1022              		.syntax unified
 1023              		.thumb
 1024              		.thumb_func
 1025              		.fpu fpv4-sp-d16
 1027              	get_key:
 1028              	.LFB13:
 169:src/console.c **** 
 170:src/console.c **** int get_key(void)
 171:src/console.c **** {
 1029              		.loc 2 171 1 is_stmt 1 view -0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 0
 1032              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc2wwr9y.s 			page 31


 1033              		@ link register save eliminated.
 172:src/console.c ****   #ifdef DM42
 173:src/console.c ****   return key_pop();
 1034              		.loc 2 173 3 view .LVU282
 1035              		.loc 2 173 10 is_stmt 0 view .LVU283
 1036 0000 004B     		ldr	r3, .L96
 1037 0002 1847     		bx	r3
 1038              	.LVL81:
 1039              	.L97:
 1040              		.align	2
 1041              	.L96:
 1042 0004 89030008 		.word	134218633
 1043              		.cfi_endproc
 1044              	.LFE13:
 1046              		.section	.text.put_key,"ax",%progbits
 1047              		.align	1
 1048              		.p2align 2,,3
 1049              		.global	put_key
 1050              		.syntax unified
 1051              		.thumb
 1052              		.thumb_func
 1053              		.fpu fpv4-sp-d16
 1055              	put_key:
 1056              	.LVL82:
 1057              	.LFB14:
 174:src/console.c ****   #else
 175:src/console.c ****   return 0;
 176:src/console.c ****   #endif
 177:src/console.c **** }
 178:src/console.c **** 
 179:src/console.c **** int put_key( int k )
 180:src/console.c **** {
 1058              		.loc 2 180 1 is_stmt 1 view -0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062              		@ link register save eliminated.
 181:src/console.c ****   #ifdef DM42
 182:src/console.c ****   return key_push(k);
 1063              		.loc 2 182 3 view .LVU285
 1064              		.loc 2 182 10 is_stmt 0 view .LVU286
 1065 0000 004B     		ldr	r3, .L99
 1066 0002 1847     		bx	r3
 1067              	.LVL83:
 1068              	.L100:
 1069              		.loc 2 182 10 view .LVU287
 1070              		.align	2
 1071              	.L99:
 1072 0004 81030008 		.word	134218625
 1073              		.cfi_endproc
 1074              	.LFE14:
 1076              		.section	.text.shift_down,"ax",%progbits
 1077              		.align	1
 1078              		.p2align 2,,3
 1079              		.global	shift_down
 1080              		.syntax unified
 1081              		.thumb
ARM GAS  /tmp/cc2wwr9y.s 			page 32


 1082              		.thumb_func
 1083              		.fpu fpv4-sp-d16
 1085              	shift_down:
 1086              	.LFB15:
 183:src/console.c ****   #else
 184:src/console.c ****   return k;
 185:src/console.c ****   #endif
 186:src/console.c **** }
 187:src/console.c **** 
 188:src/console.c **** enum shifts shift_down(void)
 189:src/console.c **** {
 1087              		.loc 2 189 1 is_stmt 1 view -0
 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 0
 1090              		@ frame_needed = 0, uses_anonymous_args = 0
 1091              		@ link register save eliminated.
 190:src/console.c **** 	return SHIFT_N;
 1092              		.loc 2 190 2 view .LVU289
 191:src/console.c **** }
 1093              		.loc 2 191 1 is_stmt 0 view .LVU290
 1094 0000 0020     		movs	r0, #0
 1095 0002 7047     		bx	lr
 1096              		.cfi_endproc
 1097              	.LFE15:
 1099              		.section	.text.start_key_timer,"ax",%progbits
 1100              		.align	1
 1101              		.p2align 2,,3
 1102              		.global	start_key_timer
 1103              		.syntax unified
 1104              		.thumb
 1105              		.thumb_func
 1106              		.fpu fpv4-sp-d16
 1108              	start_key_timer:
 1109              	.LFB16:
 192:src/console.c **** 
 193:src/console.c **** #ifndef DM42   // No serial operations for DM42
 194:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 195:src/console.c **** /*
 196:src/console.c ****  *  Open a COM port for transmission
 197:src/console.c ****  */
 198:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 199:src/console.c **** {
 200:src/console.c **** 	return 0;
 201:src/console.c **** }
 202:src/console.c **** 
 203:src/console.c **** 
 204:src/console.c **** /*
 205:src/console.c ****  *  Close the COM port after transmission is complete
 206:src/console.c ****  */
 207:src/console.c **** extern void close_port( void )
 208:src/console.c **** {
 209:src/console.c **** }
 210:src/console.c **** 
 211:src/console.c **** 
 212:src/console.c **** /*
 213:src/console.c ****  *  Output a single byte to the serial
 214:src/console.c ****  */
ARM GAS  /tmp/cc2wwr9y.s 			page 33


 215:src/console.c **** void put_byte( unsigned char byte )
 216:src/console.c **** {
 217:src/console.c **** 	report_err(ERR_PROG_BAD);
 218:src/console.c **** }
 219:src/console.c **** 
 220:src/console.c **** 
 221:src/console.c **** /*
 222:src/console.c ****  *  Force buffer flush
 223:src/console.c ****  */
 224:src/console.c **** void flush_comm( void )
 225:src/console.c **** {
 226:src/console.c **** }
 227:src/console.c **** 
 228:src/console.c **** #endif
 229:src/console.c **** #endif
 230:src/console.c **** 
 231:src/console.c **** 
 232:src/console.c **** /*
 233:src/console.c ****  *  Main loop
 234:src/console.c ****  */
 235:src/console.c **** #ifdef DM42
 236:src/console.c **** void start_key_timer (void);
 237:src/console.c **** int keyticks (void);
 238:src/console.c **** void moveto (int line, int x);
 239:src/console.c **** 
 240:src/console.c **** static int start_ticks;
 241:src/console.c **** 
 242:src/console.c **** void start_key_timer() {
 1110              		.loc 2 242 24 is_stmt 1 view -0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 243:src/console.c ****     start_ticks = get_rtc_ticks();
 1114              		.loc 2 243 5 view .LVU292
 242:src/console.c ****     start_ticks = get_rtc_ticks();
 1115              		.loc 2 242 24 is_stmt 0 view .LVU293
 1116 0000 08B5     		push	{r3, lr}
 1117              		.cfi_def_cfa_offset 8
 1118              		.cfi_offset 3, -8
 1119              		.cfi_offset 14, -4
 1120              		.loc 2 243 19 view .LVU294
 1121 0002 024B     		ldr	r3, .L104
 1122 0004 9847     		blx	r3
 1123              	.LVL84:
 1124              		.loc 2 243 17 view .LVU295
 1125 0006 024B     		ldr	r3, .L104+4
 1126 0008 1860     		str	r0, [r3]
 244:src/console.c **** }
 1127              		.loc 2 244 1 view .LVU296
 1128 000a 08BD     		pop	{r3, pc}
 1129              	.L105:
 1130              		.align	2
 1131              	.L104:
 1132 000c B9040008 		.word	134218937
 1133 0010 00000000 		.word	.LANCHOR4
 1134              		.cfi_endproc
 1135              	.LFE16:
ARM GAS  /tmp/cc2wwr9y.s 			page 34


 1137              		.section	.text.keyticks,"ax",%progbits
 1138              		.align	1
 1139              		.p2align 2,,3
 1140              		.global	keyticks
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1144              		.fpu fpv4-sp-d16
 1146              	keyticks:
 1147              	.LFB17:
 245:src/console.c **** 
 246:src/console.c **** int keyticks () {
 1148              		.loc 2 246 17 is_stmt 1 view -0
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 0
 1151              		@ frame_needed = 0, uses_anonymous_args = 0
 247:src/console.c ****   int i;
 1152              		.loc 2 247 3 view .LVU298
 248:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1153              		.loc 2 248 3 view .LVU299
 246:src/console.c ****   int i;
 1154              		.loc 2 246 17 is_stmt 0 view .LVU300
 1155 0000 08B5     		push	{r3, lr}
 1156              		.cfi_def_cfa_offset 8
 1157              		.cfi_offset 3, -8
 1158              		.cfi_offset 14, -4
 1159              		.loc 2 248 8 view .LVU301
 1160 0002 054B     		ldr	r3, .L108
 1161 0004 9847     		blx	r3
 1162              	.LVL85:
 249:src/console.c ****   return i >> 8;
 1163              		.loc 2 249 3 is_stmt 1 view .LVU302
 248:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1164              		.loc 2 248 24 is_stmt 0 view .LVU303
 1165 0006 054B     		ldr	r3, .L108+4
 1166 0008 1B68     		ldr	r3, [r3]
 1167 000a C01A     		subs	r0, r0, r3
 1168              	.LVL86:
 248:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1169              		.loc 2 248 38 view .LVU304
 1170 000c 00EB8000 		add	r0, r0, r0, lsl #2
 250:src/console.c **** }
 1171              		.loc 2 250 1 view .LVU305
 1172 0010 40F3D710 		sbfx	r0, r0, #7, #24
 1173 0014 08BD     		pop	{r3, pc}
 1174              	.L109:
 1175 0016 00BF     		.align	2
 1176              	.L108:
 1177 0018 B9040008 		.word	134218937
 1178 001c 00000000 		.word	.LANCHOR4
 1179              		.cfi_endproc
 1180              	.LFE17:
 1182              		.section	.text.moveto,"ax",%progbits
 1183              		.align	1
 1184              		.p2align 2,,3
 1185              		.global	moveto
 1186              		.syntax unified
ARM GAS  /tmp/cc2wwr9y.s 			page 35


 1187              		.thumb
 1188              		.thumb_func
 1189              		.fpu fpv4-sp-d16
 1191              	moveto:
 1192              	.LVL87:
 1193              	.LFB18:
 251:src/console.c **** 
 252:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 253:src/console.c **** char print_string[22];
 254:src/console.c **** int n_p = 0;
 255:src/console.c **** 
 256:src/console.c **** 
 257:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 1194              		.loc 2 257 30 is_stmt 1 view -0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 0
 1197              		@ frame_needed = 0, uses_anonymous_args = 0
 258:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1198              		.loc 2 258 3 view .LVU307
 257:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1199              		.loc 2 257 30 is_stmt 0 view .LVU308
 1200 0000 70B5     		push	{r4, r5, r6, lr}
 1201              		.cfi_def_cfa_offset 16
 1202              		.cfi_offset 4, -16
 1203              		.cfi_offset 5, -12
 1204              		.cfi_offset 6, -8
 1205              		.cfi_offset 14, -4
 1206              		.loc 2 258 3 view .LVU309
 1207 0002 0A4D     		ldr	r5, .L112
 1208 0004 0A4B     		ldr	r3, .L112+4
 257:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1209              		.loc 2 257 30 view .LVU310
 1210 0006 0246     		mov	r2, r0
 1211 0008 0C46     		mov	r4, r1
 1212              		.loc 2 258 3 view .LVU311
 1213 000a A86B     		ldr	r0, [r5, #56]
 1214              	.LVL88:
 1215              		.loc 2 258 3 view .LVU312
 1216 000c 511E     		subs	r1, r2, #1
 1217              	.LVL89:
 1218              		.loc 2 258 3 view .LVU313
 1219 000e 9847     		blx	r3
 1220              	.LVL90:
 259:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1221              		.loc 2 259 3 is_stmt 1 view .LVU314
 1222 0010 A86B     		ldr	r0, [r5, #56]
 1223 0012 084B     		ldr	r3, .L112+8
 1224              		.loc 2 259 33 is_stmt 0 view .LVU315
 1225 0014 0168     		ldr	r1, [r0]
 1226              		.loc 2 259 3 view .LVU316
 1227 0016 B0F90620 		ldrsh	r2, [r0, #6]
 1228              		.loc 2 259 33 view .LVU317
 1229 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 1230              		.loc 2 259 43 view .LVU318
 1231 001c 013C     		subs	r4, r4, #1
 1232              	.LVL91:
 1233              		.loc 2 259 40 view .LVU319
ARM GAS  /tmp/cc2wwr9y.s 			page 36


 1234 001e 04FB01F1 		mul	r1, r4, r1
 1235              		.loc 2 259 3 view .LVU320
 1236 0022 1431     		adds	r1, r1, #20
 260:src/console.c **** }
 1237              		.loc 2 260 1 view .LVU321
 1238 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1239              		.cfi_restore 14
 1240              		.cfi_restore 6
 1241              		.cfi_restore 5
 1242              		.cfi_restore 4
 1243              		.cfi_def_cfa_offset 0
 1244              	.LVL92:
 259:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1245              		.loc 2 259 3 view .LVU322
 1246 0028 1847     		bx	r3	@ indirect register sibling call
 1247              	.LVL93:
 1248              	.L113:
 1249 002a 00BF     		.align	2
 1250              	.L112:
 1251 002c 00200010 		.word	268443648
 1252 0030 69020008 		.word	134218345
 1253 0034 6D020008 		.word	134218349
 1254              		.cfi_endproc
 1255              	.LFE18:
 1257              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 1258              		.align	2
 1259              	.LC0:
 1260 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 1260      673A2025 
 1260      34692C25 
 1260      346900
 1261              		.section	.text.print_debug,"ax",%progbits
 1262              		.align	1
 1263              		.p2align 2,,3
 1264              		.global	print_debug
 1265              		.syntax unified
 1266              		.thumb
 1267              		.thumb_func
 1268              		.fpu fpv4-sp-d16
 1270              	print_debug:
 1271              	.LVL94:
 1272              	.LFB19:
 261:src/console.c **** 
 262:src/console.c **** void print_debug (int i, int j) {
 1273              		.loc 2 262 33 is_stmt 1 view -0
 1274              		.cfi_startproc
 1275              		@ args = 0, pretend = 0, frame = 8
 1276              		@ frame_needed = 0, uses_anonymous_args = 0
 263:src/console.c ****   strcpy( print_string, spaces );
 1277              		.loc 2 263 3 view .LVU324
 262:src/console.c ****   strcpy( print_string, spaces );
 1278              		.loc 2 262 33 is_stmt 0 view .LVU325
 1279 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1280              		.cfi_def_cfa_offset 24
 1281              		.cfi_offset 4, -24
 1282              		.cfi_offset 5, -20
 1283              		.cfi_offset 6, -16
ARM GAS  /tmp/cc2wwr9y.s 			page 37


 1284              		.cfi_offset 7, -12
 1285              		.cfi_offset 8, -8
 1286              		.cfi_offset 14, -4
 1287              		.loc 2 263 3 view .LVU326
 1288 0004 174C     		ldr	r4, .L116
 1289 0006 184F     		ldr	r7, .L116+4
 264:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 265:src/console.c ****   moveto (3, 1);
 266:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1290              		.loc 2 266 3 view .LVU327
 1291 0008 184E     		ldr	r6, .L116+8
 1292 000a 194D     		ldr	r5, .L116+12
 267:src/console.c ****   lcd_refresh();
 1293              		.loc 2 267 3 view .LVU328
 1294 000c DFF86C80 		ldr	r8, .L116+24
 262:src/console.c ****   strcpy( print_string, spaces );
 1295              		.loc 2 262 33 view .LVU329
 1296 0010 82B0     		sub	sp, sp, #8
 1297              		.cfi_def_cfa_offset 32
 262:src/console.c ****   strcpy( print_string, spaces );
 1298              		.loc 2 262 33 view .LVU330
 1299 0012 0190     		str	r0, [sp, #4]
 1300 0014 0091     		str	r1, [sp]
 263:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1301              		.loc 2 263 3 view .LVU331
 1302 0016 2046     		mov	r0, r4
 1303              	.LVL95:
 263:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1304              		.loc 2 263 3 view .LVU332
 1305 0018 3946     		mov	r1, r7
 1306              	.LVL96:
 263:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1307              		.loc 2 263 3 view .LVU333
 1308 001a FFF7FEFF 		bl	strcpy
 1309              	.LVL97:
 264:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1310              		.loc 2 264 3 is_stmt 1 view .LVU334
 1311 001e DDE90032 		ldrd	r3, r2, [sp]
 1312 0022 1449     		ldr	r1, .L116+16
 1313 0024 2046     		mov	r0, r4
 1314 0026 FFF7FEFF 		bl	sprintf
 1315              	.LVL98:
 265:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1316              		.loc 2 265 3 view .LVU335
 1317 002a 0121     		movs	r1, #1
 1318 002c 0320     		movs	r0, #3
 1319 002e FFF7FEFF 		bl	moveto
 1320              	.LVL99:
 266:src/console.c ****   lcd_refresh();
 1321              		.loc 2 266 3 view .LVU336
 1322 0032 2146     		mov	r1, r4
 1323 0034 B06B     		ldr	r0, [r6, #56]
 1324 0036 A847     		blx	r5
 1325              	.LVL100:
 1326              		.loc 2 267 3 view .LVU337
 1327 0038 C047     		blx	r8
 1328              	.LVL101:
ARM GAS  /tmp/cc2wwr9y.s 			page 38


 268:src/console.c ****   sys_delay (2500);
 1329              		.loc 2 268 3 view .LVU338
 1330 003a 0F4B     		ldr	r3, .L116+20
 1331 003c 40F6C410 		movw	r0, #2500
 1332 0040 9847     		blx	r3
 1333              	.LVL102:
 269:src/console.c ****   /* wait_for_key_press(); */
 270:src/console.c ****   //  key_pop_all();
 271:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 272:src/console.c ****   // key_pop_all();
 273:src/console.c ****   strcpy( print_string, spaces );
 1334              		.loc 2 273 3 view .LVU339
 1335 0042 3946     		mov	r1, r7
 1336 0044 2046     		mov	r0, r4
 1337 0046 FFF7FEFF 		bl	strcpy
 1338              	.LVL103:
 274:src/console.c ****   moveto (3, 1);
 1339              		.loc 2 274 3 view .LVU340
 1340 004a 0121     		movs	r1, #1
 1341 004c 0320     		movs	r0, #3
 1342 004e FFF7FEFF 		bl	moveto
 1343              	.LVL104:
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1344              		.loc 2 275 3 view .LVU341
 1345 0052 B06B     		ldr	r0, [r6, #56]
 1346 0054 2146     		mov	r1, r4
 1347 0056 A847     		blx	r5
 1348              	.LVL105:
 276:src/console.c ****   lcd_refresh();
 1349              		.loc 2 276 3 view .LVU342
 1350 0058 4346     		mov	r3, r8
 277:src/console.c ****   // while (key_empty()<=0);; // wait for release
 278:src/console.c ****   // key_pop_all();
 279:src/console.c **** }
 1351              		.loc 2 279 1 is_stmt 0 view .LVU343
 1352 005a 02B0     		add	sp, sp, #8
 1353              		.cfi_def_cfa_offset 24
 1354              	.LVL106:
 1355              		.loc 2 279 1 view .LVU344
 1356              		@ sp needed
 1357 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1358              		.cfi_restore 14
 1359              		.cfi_restore 8
 1360              		.cfi_restore 7
 1361              		.cfi_restore 6
 1362              		.cfi_restore 5
 1363              		.cfi_restore 4
 1364              		.cfi_def_cfa_offset 0
 1365              	.LVL107:
 276:src/console.c ****   lcd_refresh();
 1366              		.loc 2 276 3 view .LVU345
 1367 0060 1847     		bx	r3	@ indirect register sibling call
 1368              	.LVL108:
 1369              	.L117:
 1370 0062 00BF     		.align	2
 1371              	.L116:
 1372 0064 00000000 		.word	print_string
ARM GAS  /tmp/cc2wwr9y.s 			page 39


 1373 0068 00000000 		.word	.LANCHOR5
 1374 006c 00200010 		.word	268443648
 1375 0070 B1020008 		.word	134218417
 1376 0074 00000000 		.word	.LC0
 1377 0078 05040008 		.word	134218757
 1378 007c 31020008 		.word	134218289
 1379              		.cfi_endproc
 1380              	.LFE19:
 1382              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 1383              		.align	2
 1384              	.LC1:
 1385 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 1385      692C2531 
 1385      337300
 1386              		.section	.text.print_debug2,"ax",%progbits
 1387              		.align	1
 1388              		.p2align 2,,3
 1389              		.global	print_debug2
 1390              		.syntax unified
 1391              		.thumb
 1392              		.thumb_func
 1393              		.fpu fpv4-sp-d16
 1395              	print_debug2:
 1396              	.LVL109:
 1397              	.LFB20:
 280:src/console.c **** 
 281:src/console.c **** void print_debug2 (int i, char* j) {
 1398              		.loc 2 281 36 is_stmt 1 view -0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 8
 1401              		@ frame_needed = 0, uses_anonymous_args = 0
 282:src/console.c ****   strcpy( print_string, spaces );
 1402              		.loc 2 282 3 view .LVU347
 281:src/console.c ****   strcpy( print_string, spaces );
 1403              		.loc 2 281 36 is_stmt 0 view .LVU348
 1404 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1405              		.cfi_def_cfa_offset 24
 1406              		.cfi_offset 4, -24
 1407              		.cfi_offset 5, -20
 1408              		.cfi_offset 6, -16
 1409              		.cfi_offset 7, -12
 1410              		.cfi_offset 8, -8
 1411              		.cfi_offset 14, -4
 1412              		.loc 2 282 3 view .LVU349
 1413 0004 174C     		ldr	r4, .L120
 1414 0006 184F     		ldr	r7, .L120+4
 283:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 284:src/console.c ****   moveto (3, 1);
 285:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1415              		.loc 2 285 3 view .LVU350
 1416 0008 184E     		ldr	r6, .L120+8
 1417 000a 194D     		ldr	r5, .L120+12
 286:src/console.c ****   lcd_refresh();
 1418              		.loc 2 286 3 view .LVU351
 1419 000c DFF86C80 		ldr	r8, .L120+24
 281:src/console.c ****   strcpy( print_string, spaces );
 1420              		.loc 2 281 36 view .LVU352
ARM GAS  /tmp/cc2wwr9y.s 			page 40


 1421 0010 82B0     		sub	sp, sp, #8
 1422              		.cfi_def_cfa_offset 32
 281:src/console.c ****   strcpy( print_string, spaces );
 1423              		.loc 2 281 36 view .LVU353
 1424 0012 0190     		str	r0, [sp, #4]
 1425 0014 0091     		str	r1, [sp]
 282:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1426              		.loc 2 282 3 view .LVU354
 1427 0016 2046     		mov	r0, r4
 1428              	.LVL110:
 282:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1429              		.loc 2 282 3 view .LVU355
 1430 0018 3946     		mov	r1, r7
 1431              	.LVL111:
 282:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1432              		.loc 2 282 3 view .LVU356
 1433 001a FFF7FEFF 		bl	strcpy
 1434              	.LVL112:
 283:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1435              		.loc 2 283 3 is_stmt 1 view .LVU357
 1436 001e DDE90032 		ldrd	r3, r2, [sp]
 1437 0022 1449     		ldr	r1, .L120+16
 1438 0024 2046     		mov	r0, r4
 1439 0026 FFF7FEFF 		bl	sprintf
 1440              	.LVL113:
 284:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1441              		.loc 2 284 3 view .LVU358
 1442 002a 0121     		movs	r1, #1
 1443 002c 0320     		movs	r0, #3
 1444 002e FFF7FEFF 		bl	moveto
 1445              	.LVL114:
 285:src/console.c ****   lcd_refresh();
 1446              		.loc 2 285 3 view .LVU359
 1447 0032 2146     		mov	r1, r4
 1448 0034 B06B     		ldr	r0, [r6, #56]
 1449 0036 A847     		blx	r5
 1450              	.LVL115:
 1451              		.loc 2 286 3 view .LVU360
 1452 0038 C047     		blx	r8
 1453              	.LVL116:
 287:src/console.c ****   sys_delay (2500);
 1454              		.loc 2 287 3 view .LVU361
 1455 003a 0F4B     		ldr	r3, .L120+20
 1456 003c 40F6C410 		movw	r0, #2500
 1457 0040 9847     		blx	r3
 1458              	.LVL117:
 288:src/console.c ****   /* wait_for_key_press(); */
 289:src/console.c ****   //  key_pop_all();
 290:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 291:src/console.c ****   // key_pop_all();
 292:src/console.c ****   strcpy( print_string, spaces );
 1459              		.loc 2 292 3 view .LVU362
 1460 0042 3946     		mov	r1, r7
 1461 0044 2046     		mov	r0, r4
 1462 0046 FFF7FEFF 		bl	strcpy
 1463              	.LVL118:
 293:src/console.c ****   moveto (3, 1);
ARM GAS  /tmp/cc2wwr9y.s 			page 41


 1464              		.loc 2 293 3 view .LVU363
 1465 004a 0121     		movs	r1, #1
 1466 004c 0320     		movs	r0, #3
 1467 004e FFF7FEFF 		bl	moveto
 1468              	.LVL119:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1469              		.loc 2 294 3 view .LVU364
 1470 0052 B06B     		ldr	r0, [r6, #56]
 1471 0054 2146     		mov	r1, r4
 1472 0056 A847     		blx	r5
 1473              	.LVL120:
 295:src/console.c ****   lcd_refresh();
 1474              		.loc 2 295 3 view .LVU365
 1475 0058 4346     		mov	r3, r8
 296:src/console.c ****   // while (key_empty()<=0);; // wait for release
 297:src/console.c ****   // key_pop_all();
 298:src/console.c **** }
 1476              		.loc 2 298 1 is_stmt 0 view .LVU366
 1477 005a 02B0     		add	sp, sp, #8
 1478              		.cfi_def_cfa_offset 24
 1479              	.LVL121:
 1480              		.loc 2 298 1 view .LVU367
 1481              		@ sp needed
 1482 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1483              		.cfi_restore 14
 1484              		.cfi_restore 8
 1485              		.cfi_restore 7
 1486              		.cfi_restore 6
 1487              		.cfi_restore 5
 1488              		.cfi_restore 4
 1489              		.cfi_def_cfa_offset 0
 1490              	.LVL122:
 295:src/console.c ****   lcd_refresh();
 1491              		.loc 2 295 3 view .LVU368
 1492 0060 1847     		bx	r3	@ indirect register sibling call
 1493              	.LVL123:
 1494              	.L121:
 1495 0062 00BF     		.align	2
 1496              	.L120:
 1497 0064 00000000 		.word	print_string
 1498 0068 00000000 		.word	.LANCHOR5
 1499 006c 00200010 		.word	268443648
 1500 0070 B1020008 		.word	134218417
 1501 0074 00000000 		.word	.LC1
 1502 0078 05040008 		.word	134218757
 1503 007c 31020008 		.word	134218289
 1504              		.cfi_endproc
 1505              	.LFE20:
 1507              		.section	.text.do_now,"ax",%progbits
 1508              		.align	1
 1509              		.p2align 2,,3
 1510              		.global	do_now
 1511              		.syntax unified
 1512              		.thumb
 1513              		.thumb_func
 1514              		.fpu fpv4-sp-d16
 1516              	do_now:
ARM GAS  /tmp/cc2wwr9y.s 			page 42


 1517              	.LVL124:
 1518              	.LFB21:
 299:src/console.c **** 
 300:src/console.c **** void do_now (int key, int shift) {
 1519              		.loc 2 300 34 is_stmt 1 view -0
 1520              		.cfi_startproc
 1521              		@ args = 0, pretend = 0, frame = 8
 1522              		@ frame_needed = 0, uses_anonymous_args = 0
 1523              		@ link register save eliminated.
 301:src/console.c ****   struct _ndmap temp;
 1524              		.loc 2 301 3 view .LVU370
 302:src/console.c ****   temp.key_34s = key;
 1525              		.loc 2 302 3 view .LVU371
 300:src/console.c ****   struct _ndmap temp;
 1526              		.loc 2 300 34 is_stmt 0 view .LVU372
 1527 0000 82B0     		sub	sp, sp, #8
 1528              		.cfi_def_cfa_offset 8
 303:src/console.c ****   temp.shift = shift;
 304:src/console.c ****   process_keycode_with_shift (temp);
 1529              		.loc 2 304 3 view .LVU373
 1530 0002 02AB     		add	r3, sp, #8
 302:src/console.c ****   temp.shift = shift;
 1531              		.loc 2 302 16 view .LVU374
 1532 0004 8DF80000 		strb	r0, [sp]
 303:src/console.c ****   temp.shift = shift;
 1533              		.loc 2 303 3 is_stmt 1 view .LVU375
 303:src/console.c ****   temp.shift = shift;
 1534              		.loc 2 303 14 is_stmt 0 view .LVU376
 1535 0008 0191     		str	r1, [sp, #4]
 1536              		.loc 2 304 3 is_stmt 1 view .LVU377
 1537 000a 13E90300 		ldmdb	r3, {r0, r1}
 1538              	.LVL125:
 305:src/console.c **** }
 1539              		.loc 2 305 1 is_stmt 0 view .LVU378
 1540 000e 02B0     		add	sp, sp, #8
 1541              		.cfi_def_cfa_offset 0
 1542              		@ sp needed
 304:src/console.c **** }
 1543              		.loc 2 304 3 view .LVU379
 1544 0010 FFF7FEBF 		b	process_keycode_with_shift
 1545              	.LVL126:
 304:src/console.c **** }
 1546              		.loc 2 304 3 view .LVU380
 1547              		.cfi_endproc
 1548              	.LFE21:
 1550              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 1551              		.align	2
 1552              	.LC2:
 1553 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 1553      502F7770 
 1553      3334735F 
 1553      68656C70 
 1553      2E68746D 
 1554              		.section	.text.do_multi,"ax",%progbits
 1555              		.align	1
 1556              		.p2align 2,,3
 1557              		.global	do_multi
ARM GAS  /tmp/cc2wwr9y.s 			page 43


 1558              		.syntax unified
 1559              		.thumb
 1560              		.thumb_func
 1561              		.fpu fpv4-sp-d16
 1563              	do_multi:
 1564              	.LVL127:
 1565              	.LFB22:
 306:src/console.c **** 
 307:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 1566              		.loc 2 307 42 is_stmt 1 view -0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 16
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 1570              		.loc 2 307 42 is_stmt 0 view .LVU382
 1571 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1572              		.cfi_def_cfa_offset 24
 1573              		.cfi_offset 4, -24
 1574              		.cfi_offset 5, -20
 1575              		.cfi_offset 6, -16
 1576              		.cfi_offset 7, -12
 1577              		.cfi_offset 8, -8
 1578              		.cfi_offset 14, -4
 1579 0004 84B0     		sub	sp, sp, #16
 1580              		.cfi_def_cfa_offset 40
 1581              	.LVL128:
 308:src/console.c ****   switch(r.shift) {
 1582              		.loc 2 308 3 is_stmt 1 view .LVU383
 307:src/console.c ****   switch(r.shift) {
 1583              		.loc 2 307 42 is_stmt 0 view .LVU384
 1584 0006 6C46     		mov	r4, sp
 1585 0008 531E     		subs	r3, r2, #1
 1586 000a 84E80600 		stm	r4, {r1, r2}
 1587              	.LVL129:
 307:src/console.c ****   switch(r.shift) {
 1588              		.loc 2 307 42 view .LVU385
 1589 000e 0546     		mov	r5, r0
 1590 0010 092B     		cmp	r3, #9
 1591 0012 00F28780 		bhi	.L125
 1592 0016 DFE803F0 		tbb	[pc, r3]
 1593              	.L127:
 1594 001a 18       		.byte	(.L136-.L127)/2
 1595 001b 36       		.byte	(.L135-.L127)/2
 1596 001c 40       		.byte	(.L134-.L127)/2
 1597 001d 4A       		.byte	(.L133-.L127)/2
 1598 001e 54       		.byte	(.L132-.L127)/2
 1599 001f 5E       		.byte	(.L131-.L127)/2
 1600 0020 68       		.byte	(.L130-.L127)/2
 1601 0021 72       		.byte	(.L129-.L127)/2
 1602 0022 7B       		.byte	(.L128-.L127)/2
 1603 0023 05       		.byte	(.L126-.L127)/2
 1604              		.p2align 1
 1605              	.L126:
 309:src/console.c ****   case LASTX: // Last x via RCL L
 310:src/console.c ****     do_now (K11, 0); // RCL
 311:src/console.c ****     do_now (K_RELEASE,0); // release
 312:src/console.c ****     do_now (K15,0); // TAN key
 313:src/console.c ****     r.key_34s = K_RELEASE;
ARM GAS  /tmp/cc2wwr9y.s 			page 44


 314:src/console.c ****     r.shift = 0; // set up for release;
 315:src/console.c ****     break;
 316:src/console.c ****   case ONSTO: // flash_backup()
 317:src/console.c ****     flash_backup(OP_SAVE);
 318:src/console.c ****     r = no_key;
 319:src/console.c ****     break;
 320:src/console.c ****   case ONRCL: // flash_restore()
 321:src/console.c ****     flash_restore(OP_LOAD);
 322:src/console.c ****     r = no_key;
 323:src/console.c ****     break;
 324:src/console.c ****   case WRLIB: // save library file
 325:src/console.c ****     save_lib_file(1);
 326:src/console.c ****     r = no_key;
 327:src/console.c ****     break;
 328:src/console.c ****   case LLIB: // load library file
 329:src/console.c ****     load_lib_file(1);
 330:src/console.c ****     r = no_key;
 331:src/console.c ****     break;
 332:src/console.c ****   case WRTST: // save state file
 333:src/console.c ****     save_ram_file(1);
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
 336:src/console.c ****   case LDST:
 337:src/console.c ****     load_ram_file(1);
 338:src/console.c ****     r = no_key;
 339:src/console.c ****     break;
 340:src/console.c ****   case LDPRG:
 341:src/console.c ****     load_prog_file();
 342:src/console.c ****     r = no_key;
 343:src/console.c ****     break;
 344:src/console.c ****   case SVPRG:
 345:src/console.c ****     save_prog_file();
 1606              		.loc 2 345 5 is_stmt 1 view .LVU386
 1607 0024 FFF7FEFF 		bl	save_prog_file
 1608              	.LVL130:
 346:src/console.c ****     r = no_key;
 1609              		.loc 2 346 5 view .LVU387
 1610              		.loc 2 346 7 is_stmt 0 view .LVU388
 1611 0028 424B     		ldr	r3, .L139
 1612 002a 93E80300 		ldm	r3, {r0, r1}
 1613 002e 84E80300 		stm	r4, {r0, r1}
 1614 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1615              	.LVL131:
 347:src/console.c ****     break;
 1616              		.loc 2 347 5 is_stmt 1 view .LVU389
 1617              	.L137:
 348:src/console.c ****   case HELP:
 349:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 350:src/console.c ****     r = no_key;
 351:src/console.c ****     break;
 352:src/console.c ****   default:
 353:src/console.c ****     r = no_key;
 354:src/console.c ****   }
 355:src/console.c ****   return r;
 1618              		.loc 2 355 3 view .LVU390
 1619              		.loc 2 355 10 is_stmt 0 view .LVU391
 1620 0034 8DF80030 		strb	r3, [sp]
ARM GAS  /tmp/cc2wwr9y.s 			page 45


 1621 0038 0191     		str	r1, [sp, #4]
 1622 003a 94E80300 		ldm	r4, {r0, r1}
 1623              	.LVL132:
 1624              		.loc 2 355 10 view .LVU392
 1625 003e 85E80300 		stm	r5, {r0, r1}
 356:src/console.c **** }
 1626              		.loc 2 356 1 view .LVU393
 1627 0042 2846     		mov	r0, r5
 1628 0044 04B0     		add	sp, sp, #16
 1629              		.cfi_remember_state
 1630              		.cfi_def_cfa_offset 24
 1631              		@ sp needed
 1632 0046 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1633              	.LVL133:
 1634              	.L136:
 1635              		.cfi_restore_state
 310:src/console.c ****     do_now (K_RELEASE,0); // release
 1636              		.loc 2 310 5 is_stmt 1 view .LVU394
 1637              	.LBB75:
 1638              	.LBI75:
 300:src/console.c ****   struct _ndmap temp;
 1639              		.loc 2 300 6 view .LVU395
 1640              	.LBB76:
 301:src/console.c ****   temp.key_34s = key;
 1641              		.loc 2 301 3 view .LVU396
 302:src/console.c ****   temp.shift = shift;
 1642              		.loc 2 302 3 view .LVU397
 302:src/console.c ****   temp.shift = shift;
 1643              		.loc 2 302 16 is_stmt 0 view .LVU398
 1644 004a 0723     		movs	r3, #7
 303:src/console.c ****   process_keycode_with_shift (temp);
 1645              		.loc 2 303 14 view .LVU399
 1646 004c 0026     		movs	r6, #0
 302:src/console.c ****   temp.shift = shift;
 1647              		.loc 2 302 16 view .LVU400
 1648 004e 8DF80830 		strb	r3, [sp, #8]
 303:src/console.c ****   process_keycode_with_shift (temp);
 1649              		.loc 2 303 3 is_stmt 1 view .LVU401
 304:src/console.c **** }
 1650              		.loc 2 304 3 is_stmt 0 view .LVU402
 1651 0052 0DF10808 		add	r8, sp, #8
 303:src/console.c ****   process_keycode_with_shift (temp);
 1652              		.loc 2 303 14 view .LVU403
 1653 0056 0396     		str	r6, [sp, #12]
 304:src/console.c **** }
 1654              		.loc 2 304 3 is_stmt 1 view .LVU404
 1655 0058 98E80300 		ldm	r8, {r0, r1}
 1656              	.LVL134:
 304:src/console.c **** }
 1657              		.loc 2 304 3 is_stmt 0 view .LVU405
 1658              	.LBE76:
 1659              	.LBE75:
 1660              	.LBB78:
 1661              	.LBB79:
 302:src/console.c ****   temp.shift = shift;
 1662              		.loc 2 302 16 view .LVU406
 1663 005c 6327     		movs	r7, #99
ARM GAS  /tmp/cc2wwr9y.s 			page 46


 1664              	.LBE79:
 1665              	.LBE78:
 1666              	.LBB81:
 1667              	.LBB77:
 304:src/console.c **** }
 1668              		.loc 2 304 3 view .LVU407
 1669 005e FFF7FEFF 		bl	process_keycode_with_shift
 1670              	.LVL135:
 304:src/console.c **** }
 1671              		.loc 2 304 3 view .LVU408
 1672              	.LBE77:
 1673              	.LBE81:
 311:src/console.c ****     do_now (K15,0); // TAN key
 1674              		.loc 2 311 5 is_stmt 1 view .LVU409
 1675              	.LBB82:
 1676              	.LBI78:
 300:src/console.c ****   struct _ndmap temp;
 1677              		.loc 2 300 6 view .LVU410
 1678              	.LBB80:
 301:src/console.c ****   temp.key_34s = key;
 1679              		.loc 2 301 3 view .LVU411
 302:src/console.c ****   temp.shift = shift;
 1680              		.loc 2 302 3 view .LVU412
 303:src/console.c ****   process_keycode_with_shift (temp);
 1681              		.loc 2 303 14 is_stmt 0 view .LVU413
 1682 0062 0396     		str	r6, [sp, #12]
 302:src/console.c ****   temp.shift = shift;
 1683              		.loc 2 302 16 view .LVU414
 1684 0064 8DF80870 		strb	r7, [sp, #8]
 303:src/console.c ****   process_keycode_with_shift (temp);
 1685              		.loc 2 303 3 is_stmt 1 view .LVU415
 304:src/console.c **** }
 1686              		.loc 2 304 3 view .LVU416
 1687 0068 98E80300 		ldm	r8, {r0, r1}
 1688 006c FFF7FEFF 		bl	process_keycode_with_shift
 1689              	.LVL136:
 304:src/console.c **** }
 1690              		.loc 2 304 3 is_stmt 0 view .LVU417
 1691              	.LBE80:
 1692              	.LBE82:
 312:src/console.c ****     r.key_34s = K_RELEASE;
 1693              		.loc 2 312 5 is_stmt 1 view .LVU418
 1694              	.LBB83:
 1695              	.LBI83:
 300:src/console.c ****   struct _ndmap temp;
 1696              		.loc 2 300 6 view .LVU419
 1697              	.LBB84:
 301:src/console.c ****   temp.key_34s = key;
 1698              		.loc 2 301 3 view .LVU420
 302:src/console.c ****   temp.shift = shift;
 1699              		.loc 2 302 3 view .LVU421
 302:src/console.c ****   temp.shift = shift;
 1700              		.loc 2 302 16 is_stmt 0 view .LVU422
 1701 0070 0B23     		movs	r3, #11
 1702 0072 8DF80830 		strb	r3, [sp, #8]
 303:src/console.c ****   process_keycode_with_shift (temp);
 1703              		.loc 2 303 3 is_stmt 1 view .LVU423
ARM GAS  /tmp/cc2wwr9y.s 			page 47


 304:src/console.c **** }
 1704              		.loc 2 304 3 view .LVU424
 303:src/console.c ****   process_keycode_with_shift (temp);
 1705              		.loc 2 303 14 is_stmt 0 view .LVU425
 1706 0076 0396     		str	r6, [sp, #12]
 304:src/console.c **** }
 1707              		.loc 2 304 3 view .LVU426
 1708 0078 98E80300 		ldm	r8, {r0, r1}
 1709 007c FFF7FEFF 		bl	process_keycode_with_shift
 1710              	.LVL137:
 304:src/console.c **** }
 1711              		.loc 2 304 3 view .LVU427
 1712              	.LBE84:
 1713              	.LBE83:
 313:src/console.c ****     r.shift = 0; // set up for release;
 1714              		.loc 2 313 5 is_stmt 1 view .LVU428
 314:src/console.c ****     break;
 1715              		.loc 2 314 5 view .LVU429
 315:src/console.c ****   case ONSTO: // flash_backup()
 1716              		.loc 2 315 5 view .LVU430
 314:src/console.c ****     break;
 1717              		.loc 2 314 13 is_stmt 0 view .LVU431
 1718 0080 3146     		mov	r1, r6
 313:src/console.c ****     r.shift = 0; // set up for release;
 1719              		.loc 2 313 15 view .LVU432
 1720 0082 3B46     		mov	r3, r7
 315:src/console.c ****   case ONSTO: // flash_backup()
 1721              		.loc 2 315 5 view .LVU433
 1722 0084 D6E7     		b	.L137
 1723              	.LVL138:
 1724              	.L135:
 317:src/console.c ****     r = no_key;
 1725              		.loc 2 317 5 is_stmt 1 view .LVU434
 1726 0086 AD20     		movs	r0, #173
 1727              	.LVL139:
 317:src/console.c ****     r = no_key;
 1728              		.loc 2 317 5 is_stmt 0 view .LVU435
 1729 0088 FFF7FEFF 		bl	flash_backup
 1730              	.LVL140:
 318:src/console.c ****     break;
 1731              		.loc 2 318 5 is_stmt 1 view .LVU436
 318:src/console.c ****     break;
 1732              		.loc 2 318 7 is_stmt 0 view .LVU437
 1733 008c 294B     		ldr	r3, .L139
 1734 008e 93E80300 		ldm	r3, {r0, r1}
 1735 0092 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1736              	.LVL141:
 319:src/console.c ****   case ONRCL: // flash_restore()
 1737              		.loc 2 319 5 is_stmt 1 view .LVU438
 318:src/console.c ****     break;
 1738              		.loc 2 318 7 is_stmt 0 view .LVU439
 1739 0094 84E80300 		stm	r4, {r0, r1}
 319:src/console.c ****   case ONRCL: // flash_restore()
 1740              		.loc 2 319 5 view .LVU440
 1741 0098 CCE7     		b	.L137
 1742              	.LVL142:
 1743              	.L134:
ARM GAS  /tmp/cc2wwr9y.s 			page 48


 321:src/console.c ****     r = no_key;
 1744              		.loc 2 321 5 is_stmt 1 view .LVU441
 1745 009a AE20     		movs	r0, #174
 1746              	.LVL143:
 321:src/console.c ****     r = no_key;
 1747              		.loc 2 321 5 is_stmt 0 view .LVU442
 1748 009c FFF7FEFF 		bl	flash_restore
 1749              	.LVL144:
 322:src/console.c ****     break;
 1750              		.loc 2 322 5 is_stmt 1 view .LVU443
 322:src/console.c ****     break;
 1751              		.loc 2 322 7 is_stmt 0 view .LVU444
 1752 00a0 244B     		ldr	r3, .L139
 1753 00a2 93E80300 		ldm	r3, {r0, r1}
 1754 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1755              	.LVL145:
 323:src/console.c ****   case WRLIB: // save library file
 1756              		.loc 2 323 5 is_stmt 1 view .LVU445
 322:src/console.c ****     break;
 1757              		.loc 2 322 7 is_stmt 0 view .LVU446
 1758 00a8 84E80300 		stm	r4, {r0, r1}
 323:src/console.c ****   case WRLIB: // save library file
 1759              		.loc 2 323 5 view .LVU447
 1760 00ac C2E7     		b	.L137
 1761              	.LVL146:
 1762              	.L133:
 325:src/console.c ****     r = no_key;
 1763              		.loc 2 325 5 is_stmt 1 view .LVU448
 1764 00ae 0120     		movs	r0, #1
 1765              	.LVL147:
 325:src/console.c ****     r = no_key;
 1766              		.loc 2 325 5 is_stmt 0 view .LVU449
 1767 00b0 FFF7FEFF 		bl	save_lib_file
 1768              	.LVL148:
 326:src/console.c ****     break;
 1769              		.loc 2 326 5 is_stmt 1 view .LVU450
 326:src/console.c ****     break;
 1770              		.loc 2 326 7 is_stmt 0 view .LVU451
 1771 00b4 1F4B     		ldr	r3, .L139
 1772 00b6 93E80300 		ldm	r3, {r0, r1}
 1773 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1774              	.LVL149:
 327:src/console.c ****   case LLIB: // load library file
 1775              		.loc 2 327 5 is_stmt 1 view .LVU452
 326:src/console.c ****     break;
 1776              		.loc 2 326 7 is_stmt 0 view .LVU453
 1777 00bc 84E80300 		stm	r4, {r0, r1}
 327:src/console.c ****   case LLIB: // load library file
 1778              		.loc 2 327 5 view .LVU454
 1779 00c0 B8E7     		b	.L137
 1780              	.LVL150:
 1781              	.L132:
 329:src/console.c ****     r = no_key;
 1782              		.loc 2 329 5 is_stmt 1 view .LVU455
 1783 00c2 0120     		movs	r0, #1
 1784              	.LVL151:
 329:src/console.c ****     r = no_key;
ARM GAS  /tmp/cc2wwr9y.s 			page 49


 1785              		.loc 2 329 5 is_stmt 0 view .LVU456
 1786 00c4 FFF7FEFF 		bl	load_lib_file
 1787              	.LVL152:
 330:src/console.c ****     break;
 1788              		.loc 2 330 5 is_stmt 1 view .LVU457
 330:src/console.c ****     break;
 1789              		.loc 2 330 7 is_stmt 0 view .LVU458
 1790 00c8 1A4B     		ldr	r3, .L139
 1791 00ca 93E80300 		ldm	r3, {r0, r1}
 1792 00ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1793              	.LVL153:
 331:src/console.c ****   case WRTST: // save state file
 1794              		.loc 2 331 5 is_stmt 1 view .LVU459
 330:src/console.c ****     break;
 1795              		.loc 2 330 7 is_stmt 0 view .LVU460
 1796 00d0 84E80300 		stm	r4, {r0, r1}
 331:src/console.c ****   case WRTST: // save state file
 1797              		.loc 2 331 5 view .LVU461
 1798 00d4 AEE7     		b	.L137
 1799              	.LVL154:
 1800              	.L131:
 333:src/console.c ****     r = no_key;
 1801              		.loc 2 333 5 is_stmt 1 view .LVU462
 1802 00d6 0120     		movs	r0, #1
 1803              	.LVL155:
 333:src/console.c ****     r = no_key;
 1804              		.loc 2 333 5 is_stmt 0 view .LVU463
 1805 00d8 FFF7FEFF 		bl	save_ram_file
 1806              	.LVL156:
 334:src/console.c ****     break;
 1807              		.loc 2 334 5 is_stmt 1 view .LVU464
 334:src/console.c ****     break;
 1808              		.loc 2 334 7 is_stmt 0 view .LVU465
 1809 00dc 154B     		ldr	r3, .L139
 1810 00de 93E80300 		ldm	r3, {r0, r1}
 1811 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1812              	.LVL157:
 335:src/console.c ****   case LDST:
 1813              		.loc 2 335 5 is_stmt 1 view .LVU466
 334:src/console.c ****     break;
 1814              		.loc 2 334 7 is_stmt 0 view .LVU467
 1815 00e4 84E80300 		stm	r4, {r0, r1}
 335:src/console.c ****   case LDST:
 1816              		.loc 2 335 5 view .LVU468
 1817 00e8 A4E7     		b	.L137
 1818              	.LVL158:
 1819              	.L130:
 337:src/console.c ****     r = no_key;
 1820              		.loc 2 337 5 is_stmt 1 view .LVU469
 1821 00ea 0120     		movs	r0, #1
 1822              	.LVL159:
 337:src/console.c ****     r = no_key;
 1823              		.loc 2 337 5 is_stmt 0 view .LVU470
 1824 00ec FFF7FEFF 		bl	load_ram_file
 1825              	.LVL160:
 338:src/console.c ****     break;
 1826              		.loc 2 338 5 is_stmt 1 view .LVU471
ARM GAS  /tmp/cc2wwr9y.s 			page 50


 338:src/console.c ****     break;
 1827              		.loc 2 338 7 is_stmt 0 view .LVU472
 1828 00f0 104B     		ldr	r3, .L139
 1829 00f2 93E80300 		ldm	r3, {r0, r1}
 1830 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1831              	.LVL161:
 339:src/console.c ****   case LDPRG:
 1832              		.loc 2 339 5 is_stmt 1 view .LVU473
 338:src/console.c ****     break;
 1833              		.loc 2 338 7 is_stmt 0 view .LVU474
 1834 00f8 84E80300 		stm	r4, {r0, r1}
 339:src/console.c ****   case LDPRG:
 1835              		.loc 2 339 5 view .LVU475
 1836 00fc 9AE7     		b	.L137
 1837              	.LVL162:
 1838              	.L129:
 341:src/console.c ****     r = no_key;
 1839              		.loc 2 341 5 is_stmt 1 view .LVU476
 1840 00fe FFF7FEFF 		bl	load_prog_file
 1841              	.LVL163:
 342:src/console.c ****     break;
 1842              		.loc 2 342 5 view .LVU477
 342:src/console.c ****     break;
 1843              		.loc 2 342 7 is_stmt 0 view .LVU478
 1844 0102 0C4B     		ldr	r3, .L139
 1845 0104 93E80300 		ldm	r3, {r0, r1}
 1846 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1847              	.LVL164:
 343:src/console.c ****   case SVPRG:
 1848              		.loc 2 343 5 is_stmt 1 view .LVU479
 342:src/console.c ****     break;
 1849              		.loc 2 342 7 is_stmt 0 view .LVU480
 1850 010a 84E80300 		stm	r4, {r0, r1}
 343:src/console.c ****   case SVPRG:
 1851              		.loc 2 343 5 view .LVU481
 1852 010e 91E7     		b	.L137
 1853              	.LVL165:
 1854              	.L128:
 349:src/console.c ****     r = no_key;
 1855              		.loc 2 349 5 is_stmt 1 view .LVU482
 1856 0110 094B     		ldr	r3, .L139+4
 1857 0112 0A48     		ldr	r0, .L139+8
 1858              	.LVL166:
 349:src/console.c ****     r = no_key;
 1859              		.loc 2 349 5 is_stmt 0 view .LVU483
 1860 0114 9847     		blx	r3
 1861              	.LVL167:
 350:src/console.c ****     break;
 1862              		.loc 2 350 5 is_stmt 1 view .LVU484
 350:src/console.c ****     break;
 1863              		.loc 2 350 7 is_stmt 0 view .LVU485
 1864 0116 074B     		ldr	r3, .L139
 1865 0118 93E80300 		ldm	r3, {r0, r1}
 1866 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1867              	.LVL168:
 351:src/console.c ****   default:
 1868              		.loc 2 351 5 is_stmt 1 view .LVU486
ARM GAS  /tmp/cc2wwr9y.s 			page 51


 350:src/console.c ****     break;
 1869              		.loc 2 350 7 is_stmt 0 view .LVU487
 1870 011e 84E80300 		stm	r4, {r0, r1}
 351:src/console.c ****   default:
 1871              		.loc 2 351 5 view .LVU488
 1872 0122 87E7     		b	.L137
 1873              	.LVL169:
 1874              	.L125:
 353:src/console.c ****   }
 1875              		.loc 2 353 5 is_stmt 1 view .LVU489
 353:src/console.c ****   }
 1876              		.loc 2 353 7 is_stmt 0 view .LVU490
 1877 0124 034B     		ldr	r3, .L139
 1878 0126 93E80300 		ldm	r3, {r0, r1}
 1879              	.LVL170:
 353:src/console.c ****   }
 1880              		.loc 2 353 7 view .LVU491
 1881 012a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1882              	.LVL171:
 353:src/console.c ****   }
 1883              		.loc 2 353 7 view .LVU492
 1884 012c 84E80300 		stm	r4, {r0, r1}
 1885 0130 80E7     		b	.L137
 1886              	.L140:
 1887 0132 00BF     		.align	2
 1888              	.L139:
 1889 0134 00000000 		.word	.LANCHOR6
 1890 0138 49040008 		.word	134218825
 1891 013c 00000000 		.word	.LC2
 1892              		.cfi_endproc
 1893              	.LFE22:
 1895              		.section	.text.program_main,"ax",%progbits
 1896              		.align	1
 1897              		.p2align 2,,3
 1898              		.global	program_main
 1899              		.syntax unified
 1900              		.thumb
 1901              		.thumb_func
 1902              		.fpu fpv4-sp-d16
 1904              	program_main:
 1905              	.LFB23:
 357:src/console.c **** 
 358:src/console.c **** void program_main(){
 1906              		.loc 2 358 20 is_stmt 1 view -0
 1907              		.cfi_startproc
 1908              		@ args = 0, pretend = 0, frame = 24
 1909              		@ frame_needed = 0, uses_anonymous_args = 0
 359:src/console.c ****   int c;
 1910              		.loc 2 359 3 view .LVU494
 360:src/console.c ****   struct _ndmap remapped;
 1911              		.loc 2 360 3 view .LVU495
 361:src/console.c **** 
 362:src/console.c ****   init_mem();
 1912              		.loc 2 362 3 view .LVU496
 358:src/console.c ****   int c;
 1913              		.loc 2 358 20 is_stmt 0 view .LVU497
 1914 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
ARM GAS  /tmp/cc2wwr9y.s 			page 52


 1915              		.cfi_def_cfa_offset 36
 1916              		.cfi_offset 4, -36
 1917              		.cfi_offset 5, -32
 1918              		.cfi_offset 6, -28
 1919              		.cfi_offset 7, -24
 1920              		.cfi_offset 8, -20
 1921              		.cfi_offset 9, -16
 1922              		.cfi_offset 10, -12
 1923              		.cfi_offset 11, -8
 1924              		.cfi_offset 14, -4
 1925 0004 87B0     		sub	sp, sp, #28
 1926              		.cfi_def_cfa_offset 64
 1927              		.loc 2 362 3 view .LVU498
 1928 0006 FFF7FEFF 		bl	init_mem
 1929              	.LVL172:
 363:src/console.c ****   init_RegionTab();
 1930              		.loc 2 363 3 is_stmt 1 view .LVU499
 1931 000a FFF7FEFF 		bl	init_RegionTab
 1932              	.LVL173:
 364:src/console.c ****   init_34s();
 1933              		.loc 2 364 3 view .LVU500
 1934 000e FFF7FEFF 		bl	init_34s
 1935              	.LVL174:
 365:src/console.c ****   State2.flags = 1;  
 1936              		.loc 2 365 3 view .LVU501
 1937              		.loc 2 365 16 is_stmt 0 view .LVU502
 1938 0012 B64A     		ldr	r2, .L226
 1939 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 1940 0016 43F00103 		orr	r3, r3, #1
 1941 001a 1376     		strb	r3, [r2, #24]
 366:src/console.c ****   check_create_wp34sdir();
 1942              		.loc 2 366 3 is_stmt 1 view .LVU503
 1943 001c FFF7FEFF 		bl	check_create_wp34sdir
 1944              	.LVL175:
 367:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 1945              		.loc 2 367 3 view .LVU504
 1946              		.loc 2 367 8 is_stmt 0 view .LVU505
 1947 0020 0020     		movs	r0, #0
 1948 0022 FFF7FEFF 		bl	load_ram_file
 1949              	.LVL176:
 1950              		.loc 2 367 6 view .LVU506
 1951 0026 08B9     		cbnz	r0, .L142
 1952              		.loc 2 367 26 is_stmt 1 discriminator 1 view .LVU507
 1953              		.loc 2 367 34 is_stmt 0 discriminator 1 view .LVU508
 1954 0028 B14B     		ldr	r3, .L226+4
 1955 002a 1860     		str	r0, [r3]
 1956              	.L142:
 368:src/console.c ****   load_backup_file(0);
 1957              		.loc 2 368 3 is_stmt 1 view .LVU509
 1958 002c 0020     		movs	r0, #0
 369:src/console.c ****   load_lib_file(0);
 370:src/console.c ****   t20->newln = 0;
 1959              		.loc 2 370 3 is_stmt 0 view .LVU510
 1960 002e B14C     		ldr	r4, .L226+8
 1961              	.LBB99:
 1962              	.LBB100:
  22:src/menu.c    **** }
ARM GAS  /tmp/cc2wwr9y.s 			page 53


 1963              		.loc 1 22 3 view .LVU511
 1964 0030 DFF828B3 		ldr	fp, .L226+112
 1965 0034 DFF82893 		ldr	r9, .L226+116
 1966              	.LBE100:
 1967              	.LBE99:
 371:src/console.c ****   t20->lnfill = 0;
 372:src/console.c ****   t20->fixed = 1;
 373:src/console.c ****   t20->xspc = -2;
 374:src/console.c ****   t20->bgfill = 0;
 375:src/console.c ****   
 376:src/console.c ****   display();
 377:src/console.c ****   display_current_menu();
 378:src/console.c ****   lcd_refresh();
 379:src/console.c ****   JustDisplayed = 0;
 380:src/console.c ****   /*
 381:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 382:src/console.c ****     Sleeps peacefully while waiting for a key.
 383:src/console.c ****     Handles (in principle!) turning off and on.
 384:src/console.c ****     =================
 385:src/console.c ****     Main event loop
 386:src/console.c ****     =================
 387:src/console.c **** 
 388:src/console.c ****     Status flags:
 389:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 390:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 391:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 392:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 393:src/console.c ****   */
 394:src/console.c ****   for(;;) {
 395:src/console.c **** 
 396:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 397:src/console.c ****       {
 398:src/console.c **** 	CLR_ST(STAT_RUNNING);
 399:src/console.c **** 	sys_sleep();
 400:src/console.c ****       }
 401:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 1968              		.loc 2 401 35 view .LVU512
 1969 0038 AF4E     		ldr	r6, .L226+12
 402:src/console.c ****     {
 403:src/console.c ****       CLR_ST(STAT_RUNNING);
 404:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 1970              		.loc 2 404 7 view .LVU513
 1971 003a DFF82883 		ldr	r8, .L226+120
 368:src/console.c ****   load_lib_file(0);
 1972              		.loc 2 368 3 view .LVU514
 1973 003e FFF7FEFF 		bl	load_backup_file
 1974              	.LVL177:
 369:src/console.c ****   t20->newln = 0;
 1975              		.loc 2 369 3 is_stmt 1 view .LVU515
 1976 0042 0020     		movs	r0, #0
 1977 0044 FFF7FEFF 		bl	load_lib_file
 1978              	.LVL178:
 370:src/console.c ****   t20->lnfill = 0;
 1979              		.loc 2 370 3 view .LVU516
 1980 0048 236B     		ldr	r3, [r4, #48]
 371:src/console.c ****   t20->fixed = 1;
 1981              		.loc 2 371 3 view .LVU517
ARM GAS  /tmp/cc2wwr9y.s 			page 54


 372:src/console.c ****   t20->xspc = -2;
 1982              		.loc 2 372 3 view .LVU518
 372:src/console.c ****   t20->xspc = -2;
 1983              		.loc 2 372 14 is_stmt 0 view .LVU519
 1984 004a 0121     		movs	r1, #1
 373:src/console.c ****   t20->bgfill = 0;
 1985              		.loc 2 373 13 view .LVU520
 1986 004c FE22     		movs	r2, #254
 374:src/console.c ****   
 1987              		.loc 2 374 15 view .LVU521
 1988 004e 0025     		movs	r5, #0
 372:src/console.c ****   t20->xspc = -2;
 1989              		.loc 2 372 14 view .LVU522
 1990 0050 1974     		strb	r1, [r3, #16]
 373:src/console.c ****   t20->bgfill = 0;
 1991              		.loc 2 373 3 is_stmt 1 view .LVU523
 373:src/console.c ****   t20->bgfill = 0;
 1992              		.loc 2 373 13 is_stmt 0 view .LVU524
 1993 0052 9A73     		strb	r2, [r3, #14]
 374:src/console.c ****   
 1994              		.loc 2 374 3 is_stmt 1 view .LVU525
 374:src/console.c ****   
 1995              		.loc 2 374 15 is_stmt 0 view .LVU526
 1996 0054 5D82     		strh	r5, [r3, #18]	@ movhi
 370:src/console.c ****   t20->lnfill = 0;
 1997              		.loc 2 370 14 view .LVU527
 1998 0056 1D75     		strb	r5, [r3, #20]
 376:src/console.c ****   display_current_menu();
 1999              		.loc 2 376 3 is_stmt 1 view .LVU528
 2000 0058 FFF7FEFF 		bl	display
 2001              	.LVL179:
 377:src/console.c ****   lcd_refresh();
 2002              		.loc 2 377 3 view .LVU529
 2003              	.LBB102:
 2004              	.LBI99:
  21:src/menu.c    ****   display_menu (current_menu);
 2005              		.loc 1 21 6 view .LVU530
 2006              	.LBB101:
  22:src/menu.c    **** }
 2007              		.loc 1 22 3 view .LVU531
 2008 005c DBF80000 		ldr	r0, [fp]
 2009 0060 FFF7FEFF 		bl	display_menu
 2010              	.LVL180:
 2011              	.LBE101:
 2012              	.LBE102:
 378:src/console.c ****   JustDisplayed = 0;
 2013              		.loc 2 378 3 view .LVU532
 2014 0064 A54B     		ldr	r3, .L226+16
 2015 0066 9847     		blx	r3
 2016              	.LVL181:
 379:src/console.c ****   /*
 2017              		.loc 2 379 3 view .LVU533
 379:src/console.c ****   /*
 2018              		.loc 2 379 17 is_stmt 0 view .LVU534
 2019 0068 A54B     		ldr	r3, .L226+20
 2020 006a 1D60     		str	r5, [r3]
 2021 006c 04AD     		add	r5, sp, #16
ARM GAS  /tmp/cc2wwr9y.s 			page 55


 2022              	.L143:
 394:src/console.c **** 
 2023              		.loc 2 394 3 is_stmt 1 view .LVU535
 396:src/console.c ****       {
 2024              		.loc 2 396 5 view .LVU536
 396:src/console.c ****       {
 2025              		.loc 2 396 10 is_stmt 0 view .LVU537
 2026 006e 2368     		ldr	r3, [r4]
 396:src/console.c ****       {
 2027              		.loc 2 396 8 view .LVU538
 2028 0070 9F05     		lsls	r7, r3, #22
 2029 0072 40F18180 		bpl	.L144
 2030              	.L215:
 396:src/console.c ****       {
 2031              		.loc 2 396 30 discriminator 1 view .LVU539
 2032 0076 2368     		ldr	r3, [r4]
 396:src/console.c ****       {
 2033              		.loc 2 396 27 discriminator 1 view .LVU540
 2034 0078 5807     		lsls	r0, r3, #29
 2035 007a 7DD5     		bpl	.L144
 398:src/console.c **** 	sys_sleep();
 2036              		.loc 2 398 2 is_stmt 1 view .LVU541
 2037 007c 2368     		ldr	r3, [r4]
 399:src/console.c ****       }
 2038              		.loc 2 399 2 is_stmt 0 view .LVU542
 2039 007e A14A     		ldr	r2, .L226+24
 398:src/console.c **** 	sys_sleep();
 2040              		.loc 2 398 2 view .LVU543
 2041 0080 23F00203 		bic	r3, r3, #2
 2042 0084 2360     		str	r3, [r4]
 399:src/console.c ****       }
 2043              		.loc 2 399 2 is_stmt 1 view .LVU544
 2044 0086 9047     		blx	r2
 2045              	.LVL182:
 2046              	.L145:
 405:src/console.c ****       sys_sleep();
 406:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 407:src/console.c **** 	key_push (K_HEARTBEAT);
 408:src/console.c **** 	if (Pause > 0) Pause--;
 409:src/console.c ****       }
 410:src/console.c ****       sys_timer_disable(0); // stop timer
 411:src/console.c ****     }
 412:src/console.c ****     
 413:src/console.c ****     // Wakeup in off state or going to sleep
 414:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 2047              		.loc 2 414 5 view .LVU545
 2048              		.loc 2 414 9 is_stmt 0 view .LVU546
 2049 0088 2368     		ldr	r3, [r4]
 2050              		.loc 2 414 8 view .LVU547
 2051 008a 9905     		lsls	r1, r3, #22
 2052 008c 00F19B80 		bmi	.L151
 2053              	.L216:
 2054              		.loc 2 414 29 discriminator 1 view .LVU548
 2055 0090 2368     		ldr	r3, [r4]
 2056              		.loc 2 414 26 discriminator 1 view .LVU549
 2057 0092 5A07     		lsls	r2, r3, #29
 2058 0094 00F19780 		bmi	.L151
ARM GAS  /tmp/cc2wwr9y.s 			page 56


 415:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 416:src/console.c ****         // Going to off mode
 417:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 418:src/console.c ****         draw_power_off_image(1);
 419:src/console.c **** 
 420:src/console.c ****         LCD_power_off(0);
 421:src/console.c ****         SET_ST(STAT_SUSPENDED);
 422:src/console.c ****         SET_ST(STAT_OFF);
 423:src/console.c ****       }
 424:src/console.c ****       // Already in OFF -> just continue to sleep above
 425:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 426:src/console.c ****       // thus reaching the sleep()
 427:src/console.c ****     }
 428:src/console.c **** 
 429:src/console.c ****     // Well, we are woken-up
 430:src/console.c ****     SET_ST(STAT_RUNNING);
 2059              		.loc 2 430 5 is_stmt 1 view .LVU550
 2060 0098 2368     		ldr	r3, [r4]
 2061 009a 43F00203 		orr	r3, r3, #2
 2062 009e 2360     		str	r3, [r4]
 431:src/console.c **** 
 432:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 433:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 2063              		.loc 2 433 5 view .LVU551
 2064 00a0 2368     		ldr	r3, [r4]
 2065 00a2 23F00403 		bic	r3, r3, #4
 2066 00a6 2360     		str	r3, [r4]
 434:src/console.c **** 
 435:src/console.c ****     // Get up from OFF state
 436:src/console.c ****     if ( ST(STAT_OFF) ) {
 2067              		.loc 2 436 5 view .LVU552
 2068              		.loc 2 436 10 is_stmt 0 view .LVU553
 2069 00a8 2368     		ldr	r3, [r4]
 2070              		.loc 2 436 8 view .LVU554
 2071 00aa DB06     		lsls	r3, r3, #27
 2072 00ac 0CD5     		bpl	.L156
 437:src/console.c ****       LCD_power_on();
 2073              		.loc 2 437 7 is_stmt 1 view .LVU555
 2074 00ae 964B     		ldr	r3, .L226+28
 2075 00b0 9847     		blx	r3
 2076              	.LVL183:
 438:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 2077              		.loc 2 438 7 view .LVU556
 2078 00b2 964B     		ldr	r3, .L226+32
 2079 00b4 9847     		blx	r3
 2080              	.LVL184:
 439:src/console.c **** 
 440:src/console.c ****       CLR_ST(STAT_OFF);
 2081              		.loc 2 440 7 view .LVU557
 2082 00b6 2368     		ldr	r3, [r4]
 441:src/console.c **** 
 442:src/console.c ****       if ( !lcd_get_buf_cleared() )
 2083              		.loc 2 442 13 is_stmt 0 view .LVU558
 2084 00b8 954A     		ldr	r2, .L226+36
 440:src/console.c **** 
 2085              		.loc 2 440 7 view .LVU559
 2086 00ba 23F01003 		bic	r3, r3, #16
ARM GAS  /tmp/cc2wwr9y.s 			page 57


 2087 00be 2360     		str	r3, [r4]
 2088              		.loc 2 442 7 is_stmt 1 view .LVU560
 2089              		.loc 2 442 13 is_stmt 0 view .LVU561
 2090 00c0 9047     		blx	r2
 2091              	.LVL185:
 2092              		.loc 2 442 10 view .LVU562
 2093 00c2 08B9     		cbnz	r0, .L156
 443:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 2094              		.loc 2 443 9 is_stmt 1 view .LVU563
 2095 00c4 934B     		ldr	r3, .L226+40
 2096 00c6 9847     		blx	r3
 2097              	.LVL186:
 2098              	.L156:
 444:src/console.c ****     }
 445:src/console.c **** 
 446:src/console.c ****     // Key is ready -> clear auto off timer
 447:src/console.c ****     //    if ( !key_empty() )
 448:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 449:src/console.c ****     // Fetch the key
 450:src/console.c ****     //  < 0 -> No key event
 451:src/console.c ****     //  > 0 -> Key pressed
 452:src/console.c ****     // == 0 -> Key released
 453:src/console.c ****     c = key_pop();
 2099              		.loc 2 453 5 view .LVU564
 2100              		.loc 2 453 9 is_stmt 0 view .LVU565
 2101 00c8 934B     		ldr	r3, .L226+44
 2102 00ca 9847     		blx	r3
 2103              	.LVL187:
 454:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2104              		.loc 2 454 8 view .LVU566
 2105 00cc 6228     		cmp	r0, #98
 453:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2106              		.loc 2 453 9 view .LVU567
 2107 00ce 8246     		mov	r10, r0
 2108              	.LVL188:
 2109              		.loc 2 454 5 is_stmt 1 view .LVU568
 2110              		.loc 2 454 8 is_stmt 0 view .LVU569
 2111 00d0 00F09981 		beq	.L158
 2112              		.loc 2 454 29 discriminator 1 view .LVU570
 2113 00d4 0028     		cmp	r0, #0
 2114 00d6 40F39381 		ble	.L159
 455:src/console.c ****       reset_auto_off();
 2115              		.loc 2 455 7 is_stmt 1 view .LVU571
 2116 00da 904B     		ldr	r3, .L226+48
 2117 00dc 9847     		blx	r3
 2118              	.LVL189:
 456:src/console.c ****       start_key_timer();
 2119              		.loc 2 456 7 view .LVU572
 2120              	.LBB103:
 2121              	.LBI103:
 242:src/console.c ****     start_ticks = get_rtc_ticks();
 2122              		.loc 2 242 6 view .LVU573
 2123              	.LBB104:
 243:src/console.c **** }
 2124              		.loc 2 243 5 view .LVU574
 243:src/console.c **** }
 2125              		.loc 2 243 19 is_stmt 0 view .LVU575
ARM GAS  /tmp/cc2wwr9y.s 			page 58


 2126 00de 904B     		ldr	r3, .L226+52
 2127 00e0 9847     		blx	r3
 2128              	.LVL190:
 243:src/console.c **** }
 2129              		.loc 2 243 17 view .LVU576
 2130 00e2 904B     		ldr	r3, .L226+56
 2131              	.LBE104:
 2132              	.LBE103:
 2133              	.LBB106:
 2134              	.LBB107:
  69:src/console.c **** 
 2135              		.loc 2 69 6 view .LVU577
 2136 00e4 BAF1630F 		cmp	r10, #99
 2137              	.LBE107:
 2138              	.LBE106:
 2139              	.LBB119:
 2140              	.LBB105:
 243:src/console.c **** }
 2141              		.loc 2 243 17 view .LVU578
 2142 00e8 1860     		str	r0, [r3]
 2143              	.LBE105:
 2144              	.LBE119:
 457:src/console.c ****     }
 458:src/console.c ****     if (c >= 0) {
 2145              		.loc 2 458 5 is_stmt 1 view .LVU579
 459:src/console.c ****       remapped = remap(c);
 2146              		.loc 2 459 7 view .LVU580
 2147              	.LVL191:
 2148              	.LBB120:
 2149              	.LBI106:
  61:src/console.c **** 
 2150              		.loc 2 61 22 view .LVU581
 2151              	.LBB108:
  63:src/console.c **** 
 2152              		.loc 2 63 3 view .LVU582
 2153              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 2154              		.loc 3 1 1 view .LVU583
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
ARM GAS  /tmp/cc2wwr9y.s 			page 59


  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 2155              		.loc 3 59 3 view .LVU584
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
ARM GAS  /tmp/cc2wwr9y.s 			page 60


  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU, 14}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_NOP, 0}, // no function
  96:src/keytran.c ****     {K_NOP, 0}, // no function
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 2156              		.loc 3 117 3 view .LVU585
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
ARM GAS  /tmp/cc2wwr9y.s 			page 61


 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 0}, // Exit
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 2157              		.loc 3 175 1 view .LVU586
  67:src/console.c **** 
 2158              		.loc 2 67 3 view .LVU587
  69:src/console.c **** 
 2159              		.loc 2 69 3 view .LVU588
  69:src/console.c **** 
 2160              		.loc 2 69 6 is_stmt 0 view .LVU589
 2161 00ea 00F0CE81 		beq	.L210
  71:src/console.c ****     // Start click 
 2162              		.loc 2 71 3 is_stmt 1 view .LVU590
  71:src/console.c ****     // Start click 
 2163              		.loc 2 71 6 is_stmt 0 view .LVU591
 2164 00ee BAF12C0F 		cmp	r10, #44
 2165 00f2 00F09081 		beq	.L211
ARM GAS  /tmp/cc2wwr9y.s 			page 62


 2166              	.LVL192:
 2167              	.L162:
  85:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2168              		.loc 2 85 3 is_stmt 1 view .LVU592
  85:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2169              		.loc 2 85 8 is_stmt 0 view .LVU593
 2170 00f6 FFF7FEFF 		bl	get_alpha_state
 2171              	.LVL193:
  85:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2172              		.loc 2 85 6 view .LVU594
 2173 00fa 0028     		cmp	r0, #0
 2174 00fc 7AD0     		beq	.L164
  86:src/console.c ****       switch (cur_shift()) { 
 2175              		.loc 2 86 5 is_stmt 1 view .LVU595
  86:src/console.c ****       switch (cur_shift()) { 
 2176              		.loc 2 86 8 is_stmt 0 view .LVU596
 2177 00fe BAF11C0F 		cmp	r10, #28
 2178 0102 00F0D781 		beq	.L212
 103:src/console.c ****   }
 2179              		.loc 2 103 5 is_stmt 1 view .LVU597
 103:src/console.c ****   }
 2180              		.loc 2 103 26 is_stmt 0 view .LVU598
 2181 0106 884A     		ldr	r2, .L226+60
 2182              	.L209:
 132:src/console.c ****     break;
 2183              		.loc 2 132 26 view .LVU599
 2184 0108 02EBCA03 		add	r3, r2, r10, lsl #3
 2185 010c 93E80300 		ldm	r3, {r0, r1}
 2186 0110 12F83A30 		ldrb	r3, [r2, r10, lsl #3]	@ zero_extendqisi2
 2187              	.LVL194:
 132:src/console.c ****     break;
 2188              		.loc 2 132 26 view .LVU600
 2189 0114 85E80300 		stm	r5, {r0, r1}
 2190 0118 8A46     		mov	r10, r1
 2191              	.LVL195:
 2192              	.L161:
 132:src/console.c ****     break;
 2193              		.loc 2 132 26 view .LVU601
 2194              	.LBE108:
 2195              	.LBE120:
 460:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2196              		.loc 2 460 7 is_stmt 1 view .LVU602
 2197              		.loc 2 460 10 is_stmt 0 view .LVU603
 2198 011a 2F2B     		cmp	r3, #47
 2199 011c 00F09480 		beq	.L213
 2200              	.LVL196:
 2201              	.L186:
 461:src/console.c **** 	set_menu ( remapped.shift );
 462:src/console.c **** 	display_current_menu ();
 463:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 464:src/console.c **** 	case SHIFT_F:
 465:src/console.c **** 	  remapped = f_shift; // F -> N
 466:src/console.c **** 	  break;
 467:src/console.c **** 	case SHIFT_G:
 468:src/console.c **** 	  remapped = g_shift; // G -> N
 469:src/console.c **** 	  break;
 470:src/console.c **** 	case SHIFT_H:
ARM GAS  /tmp/cc2wwr9y.s 			page 63


 471:src/console.c **** 	  remapped = h_shift; // H -> N
 472:src/console.c **** 	default:
 473:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 474:src/console.c **** 	}
 475:src/console.c ****       }
 476:src/console.c ****       if (remapped.key_34s == K_SYS) {
 2202              		.loc 2 476 7 is_stmt 1 view .LVU604
 2203              		.loc 2 476 10 is_stmt 0 view .LVU605
 2204 0120 302B     		cmp	r3, #48
 2205 0122 1AD1     		bne	.L192
 477:src/console.c **** 	SET_ST(STAT_MENU);
 2206              		.loc 2 477 2 is_stmt 1 view .LVU606
 2207 0124 2368     		ldr	r3, [r4]
 2208              	.LVL197:
 478:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 2209              		.loc 2 478 2 is_stmt 0 view .LVU607
 2210 0126 DFF840A2 		ldr	r10, .L226+124
 2211              	.LVL198:
 2212              		.loc 2 478 2 view .LVU608
 2213 012a 8048     		ldr	r0, .L226+64
 2214 012c 0022     		movs	r2, #0
 477:src/console.c **** 	SET_ST(STAT_MENU);
 2215              		.loc 2 477 2 view .LVU609
 2216 012e 43F04003 		orr	r3, r3, #64
 2217              		.loc 2 478 2 view .LVU610
 2218 0132 1146     		mov	r1, r2
 477:src/console.c **** 	SET_ST(STAT_MENU);
 2219              		.loc 2 477 2 view .LVU611
 2220 0134 2360     		str	r3, [r4]
 2221              		.loc 2 478 2 is_stmt 1 view .LVU612
 2222 0136 D047     		blx	r10
 2223              	.LVL199:
 479:src/console.c **** 	CLR_ST(STAT_MENU);
 2224              		.loc 2 479 2 view .LVU613
 2225 0138 2368     		ldr	r3, [r4]
 2226 013a 23F04003 		bic	r3, r3, #64
 2227 013e 2360     		str	r3, [r4]
 480:src/console.c **** 	remapped =  no_key;
 2228              		.loc 2 480 2 view .LVU614
 2229              		.loc 2 480 11 is_stmt 0 view .LVU615
 2230 0140 7B4B     		ldr	r3, .L226+68
 2231 0142 93E80300 		ldm	r3, {r0, r1}
 2232 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2233 0148 0193     		str	r3, [sp, #4]
 2234              	.LVL200:
 2235              		.loc 2 480 11 view .LVU616
 2236 014a 85E80300 		stm	r5, {r0, r1}
 2237              	.LBB121:
 2238              	.LBB122:
  22:src/menu.c    **** }
 2239              		.loc 1 22 3 view .LVU617
 2240 014e DBF80000 		ldr	r0, [fp]
 2241              	.LBE122:
 2242              	.LBE121:
 2243              		.loc 2 480 11 view .LVU618
 2244 0152 8A46     		mov	r10, r1
 2245              	.LVL201:
ARM GAS  /tmp/cc2wwr9y.s 			page 64


 481:src/console.c **** 	display_current_menu();
 2246              		.loc 2 481 2 is_stmt 1 view .LVU619
 2247              	.LBB124:
 2248              	.LBI121:
  21:src/menu.c    ****   display_menu (current_menu);
 2249              		.loc 1 21 6 view .LVU620
 2250              	.LBB123:
  22:src/menu.c    **** }
 2251              		.loc 1 22 3 view .LVU621
 2252 0154 FFF7FEFF 		bl	display_menu
 2253              	.LVL202:
  22:src/menu.c    **** }
 2254              		.loc 1 22 3 is_stmt 0 view .LVU622
 2255 0158 019B     		ldr	r3, [sp, #4]
 2256              	.LVL203:
 2257              	.L192:
  22:src/menu.c    **** }
 2258              		.loc 1 22 3 view .LVU623
 2259              	.LBE123:
 2260              	.LBE124:
 482:src/console.c ****       }
 483:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 2261              		.loc 2 483 7 is_stmt 1 view .LVU624
 2262              		.loc 2 483 10 is_stmt 0 view .LVU625
 2263 015a 312B     		cmp	r3, #49
 2264 015c 00F07C81 		beq	.L214
 2265              	.LVL204:
 2266              	.L166:
 484:src/console.c **** 	remapped = do_multi (remapped);
 485:src/console.c **** 	display_current_menu();
 486:src/console.c ****       }
 487:src/console.c ****       process_keycode_with_shift(remapped);
 2267              		.loc 2 487 7 is_stmt 1 view .LVU626
 2268              		.loc 2 487 7 is_stmt 0 view .LVU627
 2269 0160 8DF81030 		strb	r3, [sp, #16]
 2270 0164 CDF814A0 		str	r10, [sp, #20]
 2271 0168 95E80300 		ldm	r5, {r0, r1}
 2272 016c FFF7FEFF 		bl	process_keycode_with_shift
 2273              	.LVL205:
 394:src/console.c **** 
 2274              		.loc 2 394 3 is_stmt 1 view .LVU628
 396:src/console.c ****       {
 2275              		.loc 2 396 5 view .LVU629
 396:src/console.c ****       {
 2276              		.loc 2 396 10 is_stmt 0 view .LVU630
 2277 0170 2368     		ldr	r3, [r4]
 396:src/console.c ****       {
 2278              		.loc 2 396 8 view .LVU631
 2279 0172 9F05     		lsls	r7, r3, #22
 2280 0174 3FF57FAF 		bmi	.L215
 2281              	.LVL206:
 2282              	.L144:
 401:src/console.c ****     {
 2283              		.loc 2 401 10 is_stmt 1 view .LVU632
 401:src/console.c ****     {
 2284              		.loc 2 401 15 is_stmt 0 view .LVU633
 2285 0178 2068     		ldr	r0, [r4]
ARM GAS  /tmp/cc2wwr9y.s 			page 65


 401:src/console.c ****     {
 2286              		.loc 2 401 13 view .LVU634
 2287 017a 10F4007A 		ands	r10, r0, #512
 2288 017e 83D1     		bne	.L145
 401:src/console.c ****     {
 2289              		.loc 2 401 35 discriminator 1 view .LVU635
 2290 0180 B047     		blx	r6
 2291              	.LVL207:
 401:src/console.c ****     {
 2292              		.loc 2 401 32 discriminator 1 view .LVU636
 2293 0182 0028     		cmp	r0, #0
 2294 0184 80D0     		beq	.L145
 403:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2295              		.loc 2 403 7 is_stmt 1 view .LVU637
 2296 0186 2368     		ldr	r3, [r4]
 2297 0188 23F00203 		bic	r3, r3, #2
 404:src/console.c ****       sys_sleep();
 2298              		.loc 2 404 7 is_stmt 0 view .LVU638
 2299 018c 5046     		mov	r0, r10
 2300 018e 6421     		movs	r1, #100
 403:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2301              		.loc 2 403 7 view .LVU639
 2302 0190 2360     		str	r3, [r4]
 404:src/console.c ****       sys_sleep();
 2303              		.loc 2 404 7 is_stmt 1 view .LVU640
 2304 0192 C047     		blx	r8
 2305              	.LVL208:
 405:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 2306              		.loc 2 405 7 view .LVU641
 2307 0194 5B4B     		ldr	r3, .L226+24
 2308 0196 9847     		blx	r3
 2309              	.LVL209:
 406:src/console.c **** 	key_push (K_HEARTBEAT);
 2310              		.loc 2 406 7 view .LVU642
 406:src/console.c **** 	key_push (K_HEARTBEAT);
 2311              		.loc 2 406 11 is_stmt 0 view .LVU643
 2312 0198 664B     		ldr	r3, .L226+72
 2313 019a 5046     		mov	r0, r10
 2314 019c 9847     		blx	r3
 2315              	.LVL210:
 406:src/console.c **** 	key_push (K_HEARTBEAT);
 2316              		.loc 2 406 10 view .LVU644
 2317 019e 58B1     		cbz	r0, .L149
 407:src/console.c **** 	if (Pause > 0) Pause--;
 2318              		.loc 2 407 2 is_stmt 1 view .LVU645
 2319 01a0 654B     		ldr	r3, .L226+76
 2320 01a2 6220     		movs	r0, #98
 2321 01a4 9847     		blx	r3
 2322              	.LVL211:
 408:src/console.c ****       }
 2323              		.loc 2 408 2 view .LVU646
 408:src/console.c ****       }
 2324              		.loc 2 408 12 is_stmt 0 view .LVU647
 2325 01a6 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 408:src/console.c ****       }
 2326              		.loc 2 408 5 view .LVU648
 2327 01aa 2BB1     		cbz	r3, .L149
ARM GAS  /tmp/cc2wwr9y.s 			page 66


 408:src/console.c ****       }
 2328              		.loc 2 408 17 is_stmt 1 discriminator 1 view .LVU649
 408:src/console.c ****       }
 2329              		.loc 2 408 22 is_stmt 0 discriminator 1 view .LVU650
 2330 01ac 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 2331 01b0 013B     		subs	r3, r3, #1
 2332 01b2 DBB2     		uxtb	r3, r3
 2333 01b4 89F80030 		strb	r3, [r9]
 2334              	.L149:
 410:src/console.c ****     }
 2335              		.loc 2 410 7 is_stmt 1 view .LVU651
 2336 01b8 604B     		ldr	r3, .L226+80
 2337 01ba 0020     		movs	r0, #0
 2338 01bc 9847     		blx	r3
 2339              	.LVL212:
 414:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2340              		.loc 2 414 5 view .LVU652
 414:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2341              		.loc 2 414 9 is_stmt 0 view .LVU653
 2342 01be 2368     		ldr	r3, [r4]
 414:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2343              		.loc 2 414 8 view .LVU654
 2344 01c0 9905     		lsls	r1, r3, #22
 2345 01c2 7FF565AF 		bpl	.L216
 2346              	.L151:
 415:src/console.c ****         // Going to off mode
 2347              		.loc 2 415 7 is_stmt 1 view .LVU655
 415:src/console.c ****         // Going to off mode
 2348              		.loc 2 415 12 is_stmt 0 view .LVU656
 2349 01c6 2068     		ldr	r0, [r4]
 415:src/console.c ****         // Going to off mode
 2350              		.loc 2 415 10 view .LVU657
 2351 01c8 10F0040A 		ands	r10, r0, #4
 2352 01cc 7FF44FAF 		bne	.L143
 417:src/console.c ****         draw_power_off_image(1);
 2353              		.loc 2 417 9 is_stmt 1 view .LVU658
 2354 01d0 5B4B     		ldr	r3, .L226+84
 2355 01d2 5046     		mov	r0, r10
 2356 01d4 9847     		blx	r3
 2357              	.LVL213:
 418:src/console.c **** 
 2358              		.loc 2 418 9 view .LVU659
 2359 01d6 5B4B     		ldr	r3, .L226+88
 2360 01d8 0120     		movs	r0, #1
 2361 01da 9847     		blx	r3
 2362              	.LVL214:
 420:src/console.c ****         SET_ST(STAT_SUSPENDED);
 2363              		.loc 2 420 9 view .LVU660
 2364 01dc 5A4B     		ldr	r3, .L226+92
 2365 01de 5046     		mov	r0, r10
 2366 01e0 9847     		blx	r3
 2367              	.LVL215:
 421:src/console.c ****         SET_ST(STAT_OFF);
 2368              		.loc 2 421 9 view .LVU661
 2369 01e2 2368     		ldr	r3, [r4]
 2370 01e4 43F00403 		orr	r3, r3, #4
 2371 01e8 2360     		str	r3, [r4]
ARM GAS  /tmp/cc2wwr9y.s 			page 67


 422:src/console.c ****       }
 2372              		.loc 2 422 9 view .LVU662
 2373 01ea 2368     		ldr	r3, [r4]
 2374 01ec 43F01003 		orr	r3, r3, #16
 2375 01f0 2360     		str	r3, [r4]
 2376 01f2 3CE7     		b	.L143
 2377              	.LVL216:
 2378              	.L164:
 2379              	.LBB125:
 2380              	.LBB109:
 106:src/console.c ****   case KEY_F1:
 2381              		.loc 2 106 3 view .LVU663
 2382 01f4 AAF12603 		sub	r3, r10, #38
 2383 01f8 052B     		cmp	r3, #5
 2384 01fa 00F27381 		bhi	.L169
 2385 01fe DFE813F0 		tbh	[pc, r3, lsl #1]
 2386              	.L171:
 2387 0202 EA00     		.2byte	(.L176-.L171)/2
 2388 0204 D400     		.2byte	(.L175-.L171)/2
 2389 0206 BA00     		.2byte	(.L174-.L171)/2
 2390 0208 5F00     		.2byte	(.L173-.L171)/2
 2391 020a 4500     		.2byte	(.L172-.L171)/2
 2392 020c 0B00     		.2byte	(.L170-.L171)/2
 2393              		.p2align 1
 2394              	.L181:
 121:src/console.c ****   case KEY_F6:
 2395              		.loc 2 121 5 view .LVU664
 121:src/console.c ****   case KEY_F6:
 2396              		.loc 2 121 9 is_stmt 0 view .LVU665
 2397 020e FFF7FEFF 		bl	cur_shift
 2398              	.LVL217:
 121:src/console.c ****   case KEY_F6:
 2399              		.loc 2 121 8 view .LVU666
 2400 0212 0128     		cmp	r0, #1
 2401 0214 00F09181 		beq	.L217
 2402              	.L170:
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2403              		.loc 2 123 5 is_stmt 1 view .LVU667
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2404              		.loc 2 123 9 is_stmt 0 view .LVU668
 2405 0218 FFF7FEFF 		bl	cur_shift
 2406              	.LVL218:
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2407              		.loc 2 123 8 view .LVU669
 2408 021c 0028     		cmp	r0, #0
 2409 021e 40F05D81 		bne	.L182
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2410              		.loc 2 123 33 is_stmt 1 view .LVU670
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2411              		.loc 2 123 67 is_stmt 0 view .LVU671
 2412 0222 DBF80030 		ldr	r3, [fp]
 2413 0226 494F     		ldr	r7, .L226+96
 2414 0228 D022     		movs	r2, #208
 2415 022a 02FB03F2 		mul	r2, r2, r3
 2416 022e BB18     		adds	r3, r7, r2
 2417 0230 D3E92C01 		ldrd	r0, r1, [r3, #176]
 2418 0234 B032     		adds	r2, r2, #176
ARM GAS  /tmp/cc2wwr9y.s 			page 68


 2419 0236 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2420              	.LVL219:
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2421              		.loc 2 123 67 view .LVU672
 2422 0238 85E80300 		stm	r5, {r0, r1}
 2423 023c 3A44     		add	r2, r2, r7
 2424              	.LBE109:
 2425              	.LBE125:
 460:src/console.c **** 	set_menu ( remapped.shift );
 2426              		.loc 2 460 10 view .LVU673
 2427 023e 2F2B     		cmp	r3, #47
 2428              	.LBB126:
 2429              	.LBB110:
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2430              		.loc 2 123 67 view .LVU674
 2431 0240 D2F804A0 		ldr	r10, [r2, #4]
 2432              	.LVL220:
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2433              		.loc 2 123 67 view .LVU675
 2434              	.LBE110:
 2435              	.LBE126:
 460:src/console.c **** 	set_menu ( remapped.shift );
 2436              		.loc 2 460 7 is_stmt 1 view .LVU676
 460:src/console.c **** 	set_menu ( remapped.shift );
 2437              		.loc 2 460 10 is_stmt 0 view .LVU677
 2438 0244 7FF46CAF 		bne	.L186
 2439              	.L213:
 461:src/console.c **** 	display_current_menu ();
 2440              		.loc 2 461 2 is_stmt 1 view .LVU678
 2441              	.LVL221:
 2442              	.LBB127:
 2443              	.LBI127:
   3:src/menu.c    ****   int m = current_menu;
 2444              		.loc 1 3 6 view .LVU679
 2445              	.LBB128:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2446              		.loc 1 4 3 view .LVU680
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2447              		.loc 1 4 7 is_stmt 0 view .LVU681
 2448 0248 DBF80030 		ldr	r3, [fp]
 2449              	.LVL222:
   5:src/menu.c    ****     current_menu = 0;
 2450              		.loc 1 5 3 is_stmt 1 view .LVU682
   5:src/menu.c    ****     current_menu = 0;
 2451              		.loc 1 5 6 is_stmt 0 view .LVU683
 2452 024c 5345     		cmp	r3, r10
 2453 024e 00F02581 		beq	.L187
   8:src/menu.c    ****     current_menu = last_menu;
 2454              		.loc 1 8 8 is_stmt 1 view .LVU684
   8:src/menu.c    ****     current_menu = last_menu;
 2455              		.loc 1 8 11 is_stmt 0 view .LVU685
 2456 0252 BAF1FF3F 		cmp	r10, #-1
 2457 0256 00F02781 		beq	.L218
 2458              	.LVL223:
 2459              	.L188:
  12:src/menu.c    ****   }
 2460              		.loc 1 12 5 is_stmt 1 view .LVU686
ARM GAS  /tmp/cc2wwr9y.s 			page 69


  12:src/menu.c    ****   }
 2461              		.loc 1 12 18 is_stmt 0 view .LVU687
 2462 025a CBF800A0 		str	r10, [fp]
 2463              	.LVL224:
 2464              	.L190:
  14:src/menu.c    **** }
 2465              		.loc 1 14 3 is_stmt 1 view .LVU688
  14:src/menu.c    **** }
 2466              		.loc 1 14 13 is_stmt 0 view .LVU689
 2467 025e 3C4A     		ldr	r2, .L226+100
 2468              	.LBE128:
 2469              	.LBE127:
 2470              	.LBB132:
 2471              	.LBB133:
  22:src/menu.c    **** }
 2472              		.loc 1 22 3 view .LVU690
 2473 0260 5046     		mov	r0, r10
 2474              	.LBE133:
 2475              	.LBE132:
 2476              	.LBB135:
 2477              	.LBB129:
  14:src/menu.c    **** }
 2478              		.loc 1 14 13 view .LVU691
 2479 0262 1360     		str	r3, [r2]
 2480              	.LBE129:
 2481              	.LBE135:
 462:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 2482              		.loc 2 462 2 is_stmt 1 view .LVU692
 2483              	.LBB136:
 2484              	.LBI132:
  21:src/menu.c    ****   display_menu (current_menu);
 2485              		.loc 1 21 6 view .LVU693
 2486              	.LBB134:
  22:src/menu.c    **** }
 2487              		.loc 1 22 3 view .LVU694
 2488 0264 FFF7FEFF 		bl	display_menu
 2489              	.LVL225:
 2490              	.LBE134:
 2491              	.LBE136:
 463:src/console.c **** 	case SHIFT_F:
 2492              		.loc 2 463 2 view .LVU695
 463:src/console.c **** 	case SHIFT_F:
 2493              		.loc 2 463 10 is_stmt 0 view .LVU696
 2494 0268 FFF7FEFF 		bl	cur_shift
 2495              	.LVL226:
 463:src/console.c **** 	case SHIFT_F:
 2496              		.loc 2 463 2 view .LVU697
 2497 026c 0228     		cmp	r0, #2
 465:src/console.c **** 	  break;
 2498              		.loc 2 465 4 is_stmt 1 view .LVU698
 465:src/console.c **** 	  break;
 2499              		.loc 2 465 13 is_stmt 0 view .LVU699
 2500 026e 14BF     		ite	ne
 2501 0270 384B     		ldrne	r3, .L226+104
 468:src/console.c **** 	  break;
 2502              		.loc 2 468 4 is_stmt 1 view .LVU700
 468:src/console.c **** 	  break;
ARM GAS  /tmp/cc2wwr9y.s 			page 70


 2503              		.loc 2 468 13 is_stmt 0 view .LVU701
 2504 0272 394B     		ldreq	r3, .L226+108
 2505 0274 93E80300 		ldm	r3, {r0, r1}
 2506 0278 85E80300 		stm	r5, {r0, r1}
 2507 027c 8A46     		mov	r10, r1
 2508 027e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2509              	.LVL227:
 469:src/console.c **** 	case SHIFT_H:
 2510              		.loc 2 469 4 is_stmt 1 view .LVU702
 2511 0280 4EE7     		b	.L186
 2512              	.LVL228:
 2513              	.L180:
 2514              	.LBB137:
 2515              	.LBB111:
 118:src/console.c ****   case KEY_F5:
 2516              		.loc 2 118 5 view .LVU703
 118:src/console.c ****   case KEY_F5:
 2517              		.loc 2 118 9 is_stmt 0 view .LVU704
 2518 0282 FFF7FEFF 		bl	cur_shift
 2519              	.LVL229:
 118:src/console.c ****   case KEY_F5:
 2520              		.loc 2 118 8 view .LVU705
 2521 0286 0128     		cmp	r0, #1
 2522 0288 00F06881 		beq	.L219
 2523              	.L172:
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2524              		.loc 2 120 5 is_stmt 1 view .LVU706
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2525              		.loc 2 120 9 is_stmt 0 view .LVU707
 2526 028c FFF7FEFF 		bl	cur_shift
 2527              	.LVL230:
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2528              		.loc 2 120 8 view .LVU708
 2529 0290 0028     		cmp	r0, #0
 2530 0292 BCD1     		bne	.L181
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2531              		.loc 2 120 33 is_stmt 1 view .LVU709
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2532              		.loc 2 120 67 is_stmt 0 view .LVU710
 2533 0294 DBF80030 		ldr	r3, [fp]
 2534 0298 2C4F     		ldr	r7, .L226+96
 2535 029a D022     		movs	r2, #208
 2536 029c 02FB03F2 		mul	r2, r2, r3
 2537 02a0 BB18     		adds	r3, r7, r2
 2538 02a2 D3E92401 		ldrd	r0, r1, [r3, #144]
 2539 02a6 9032     		adds	r2, r2, #144
 2540 02a8 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2541              	.LVL231:
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2542              		.loc 2 120 67 view .LVU711
 2543 02aa 85E80300 		stm	r5, {r0, r1}
 2544 02ae 3A44     		add	r2, r2, r7
 2545 02b0 D2F804A0 		ldr	r10, [r2, #4]
 2546              	.LVL232:
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2547              		.loc 2 120 67 view .LVU712
 2548 02b4 31E7     		b	.L161
ARM GAS  /tmp/cc2wwr9y.s 			page 71


 2549              	.LVL233:
 2550              	.L179:
 115:src/console.c ****   case KEY_F4:
 2551              		.loc 2 115 5 is_stmt 1 view .LVU713
 115:src/console.c ****   case KEY_F4:
 2552              		.loc 2 115 9 is_stmt 0 view .LVU714
 2553 02b6 FFF7FEFF 		bl	cur_shift
 2554              	.LVL234:
 115:src/console.c ****   case KEY_F4:
 2555              		.loc 2 115 8 view .LVU715
 2556 02ba 0128     		cmp	r0, #1
 2557 02bc 00F05F81 		beq	.L220
 2558              	.L173:
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2559              		.loc 2 117 5 is_stmt 1 view .LVU716
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2560              		.loc 2 117 9 is_stmt 0 view .LVU717
 2561 02c0 FFF7FEFF 		bl	cur_shift
 2562              	.LVL235:
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2563              		.loc 2 117 8 view .LVU718
 2564 02c4 0028     		cmp	r0, #0
 2565 02c6 DCD1     		bne	.L180
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2566              		.loc 2 117 33 is_stmt 1 view .LVU719
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2567              		.loc 2 117 67 is_stmt 0 view .LVU720
 2568 02c8 DBF80030 		ldr	r3, [fp]
 2569 02cc 1F4F     		ldr	r7, .L226+96
 2570 02ce D022     		movs	r2, #208
 2571 02d0 02FB03F2 		mul	r2, r2, r3
 2572 02d4 BB18     		adds	r3, r7, r2
 2573 02d6 D3E91C01 		ldrd	r0, r1, [r3, #112]
 2574 02da 7032     		adds	r2, r2, #112
 2575 02dc BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2576              	.LVL236:
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2577              		.loc 2 117 67 view .LVU721
 2578 02de 85E80300 		stm	r5, {r0, r1}
 2579 02e2 3A44     		add	r2, r2, r7
 2580 02e4 D2F804A0 		ldr	r10, [r2, #4]
 2581              	.LVL237:
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2582              		.loc 2 117 67 view .LVU722
 2583 02e8 17E7     		b	.L161
 2584              	.L227:
 2585 02ea 00BF     		.align	2
 2586              	.L226:
 2587 02ec 00000000 		.word	StateWhileOn
 2588 02f0 00000000 		.word	DispMsg
 2589 02f4 00200010 		.word	268443648
 2590 02f8 7D030008 		.word	134218621
 2591 02fc 31020008 		.word	134218289
 2592 0300 00000000 		.word	JustDisplayed
 2593 0304 19040008 		.word	134218777
 2594 0308 19020008 		.word	134218265
 2595 030c E5020008 		.word	134218469
ARM GAS  /tmp/cc2wwr9y.s 			page 72


 2596 0310 59020008 		.word	134218329
 2597 0314 35020008 		.word	134218293
 2598 0318 89030008 		.word	134218633
 2599 031c B9030008 		.word	134218681
 2600 0320 B9040008 		.word	134218937
 2601 0324 00000000 		.word	.LANCHOR4
 2602 0328 00000000 		.word	.LANCHOR11
 2603 032c 00000000 		.word	.LANCHOR15
 2604 0330 00000000 		.word	.LANCHOR6
 2605 0334 01040008 		.word	134218753
 2606 0338 81030008 		.word	134218625
 2607 033c F5030008 		.word	134218741
 2608 0340 55020008 		.word	134218325
 2609 0344 2D040008 		.word	134218797
 2610 0348 1D020008 		.word	134218269
 2611 034c 00000000 		.word	.LANCHOR3
 2612 0350 00000000 		.word	.LANCHOR2
 2613 0354 00000000 		.word	.LANCHOR13
 2614 0358 00000000 		.word	.LANCHOR14
 2615 035c 00000000 		.word	.LANCHOR1
 2616 0360 00000000 		.word	Pause
 2617 0364 F9030008 		.word	134218745
 2618 0368 59030008 		.word	134218585
 2619              	.LVL238:
 2620              	.L178:
 112:src/console.c ****   case KEY_F3:
 2621              		.loc 2 112 5 is_stmt 1 view .LVU723
 112:src/console.c ****   case KEY_F3:
 2622              		.loc 2 112 9 is_stmt 0 view .LVU724
 2623 036c FFF7FEFF 		bl	cur_shift
 2624              	.LVL239:
 112:src/console.c ****   case KEY_F3:
 2625              		.loc 2 112 8 view .LVU725
 2626 0370 0128     		cmp	r0, #1
 2627 0372 00F01581 		beq	.L221
 2628              	.L174:
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2629              		.loc 2 114 5 is_stmt 1 view .LVU726
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2630              		.loc 2 114 9 is_stmt 0 view .LVU727
 2631 0376 FFF7FEFF 		bl	cur_shift
 2632              	.LVL240:
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2633              		.loc 2 114 8 view .LVU728
 2634 037a 0028     		cmp	r0, #0
 2635 037c 9BD1     		bne	.L179
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2636              		.loc 2 114 33 is_stmt 1 view .LVU729
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2637              		.loc 2 114 67 is_stmt 0 view .LVU730
 2638 037e DBF80030 		ldr	r3, [fp]
 2639 0382 AA4F     		ldr	r7, .L228
 2640 0384 D022     		movs	r2, #208
 2641 0386 02FB03F2 		mul	r2, r2, r3
 2642 038a BB18     		adds	r3, r7, r2
 2643 038c D3E91401 		ldrd	r0, r1, [r3, #80]
 2644 0390 5032     		adds	r2, r2, #80
ARM GAS  /tmp/cc2wwr9y.s 			page 73


 2645 0392 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2646              	.LVL241:
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2647              		.loc 2 114 67 view .LVU731
 2648 0394 85E80300 		stm	r5, {r0, r1}
 2649 0398 3A44     		add	r2, r2, r7
 2650 039a D2F804A0 		ldr	r10, [r2, #4]
 2651              	.LVL242:
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2652              		.loc 2 114 67 view .LVU732
 2653 039e BCE6     		b	.L161
 2654              	.LVL243:
 2655              	.L177:
 109:src/console.c ****   case KEY_F2:
 2656              		.loc 2 109 5 is_stmt 1 view .LVU733
 109:src/console.c ****   case KEY_F2:
 2657              		.loc 2 109 9 is_stmt 0 view .LVU734
 2658 03a0 FFF7FEFF 		bl	cur_shift
 2659              	.LVL244:
 109:src/console.c ****   case KEY_F2:
 2660              		.loc 2 109 8 view .LVU735
 2661 03a4 0128     		cmp	r0, #1
 2662 03a6 00F00C81 		beq	.L222
 2663              	.L175:
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2664              		.loc 2 111 5 is_stmt 1 view .LVU736
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2665              		.loc 2 111 9 is_stmt 0 view .LVU737
 2666 03aa FFF7FEFF 		bl	cur_shift
 2667              	.LVL245:
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2668              		.loc 2 111 8 view .LVU738
 2669 03ae 0028     		cmp	r0, #0
 2670 03b0 DCD1     		bne	.L178
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2671              		.loc 2 111 33 is_stmt 1 view .LVU739
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2672              		.loc 2 111 67 is_stmt 0 view .LVU740
 2673 03b2 DBF80030 		ldr	r3, [fp]
 2674 03b6 D022     		movs	r2, #208
 2675 03b8 02FB03F2 		mul	r2, r2, r3
 2676 03bc 9B4B     		ldr	r3, .L228
 2677 03be 1F46     		mov	r7, r3
 2678 03c0 1344     		add	r3, r3, r2
 2679 03c2 D3E90C01 		ldrd	r0, r1, [r3, #48]
 2680 03c6 3032     		adds	r2, r2, #48
 2681 03c8 85E80300 		stm	r5, {r0, r1}
 2682 03cc BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2683              	.LVL246:
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2684              		.loc 2 111 67 view .LVU741
 2685 03ce 3A44     		add	r2, r2, r7
 2686 03d0 D2F804A0 		ldr	r10, [r2, #4]
 2687              	.LVL247:
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2688              		.loc 2 111 67 view .LVU742
 2689 03d4 A1E6     		b	.L161
ARM GAS  /tmp/cc2wwr9y.s 			page 74


 2690              	.LVL248:
 2691              	.L176:
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2692              		.loc 2 108 5 is_stmt 1 view .LVU743
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2693              		.loc 2 108 9 is_stmt 0 view .LVU744
 2694 03d6 FFF7FEFF 		bl	cur_shift
 2695              	.LVL249:
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2696              		.loc 2 108 8 view .LVU745
 2697 03da 0028     		cmp	r0, #0
 2698 03dc E0D1     		bne	.L177
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2699              		.loc 2 108 33 is_stmt 1 view .LVU746
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2700              		.loc 2 108 67 is_stmt 0 view .LVU747
 2701 03de DBF80030 		ldr	r3, [fp]
 2702 03e2 924F     		ldr	r7, .L228
 2703 03e4 D022     		movs	r2, #208
 2704 03e6 02FB03F2 		mul	r2, r2, r3
 2705 03ea BB18     		adds	r3, r7, r2
 2706 03ec D3E90401 		ldrd	r0, r1, [r3, #16]
 2707 03f0 1032     		adds	r2, r2, #16
 2708 03f2 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2709              	.LVL250:
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2710              		.loc 2 108 67 view .LVU748
 2711 03f4 85E80300 		stm	r5, {r0, r1}
 2712 03f8 3A44     		add	r2, r2, r7
 2713 03fa D2F804A0 		ldr	r10, [r2, #4]
 2714              	.LVL251:
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2715              		.loc 2 108 67 view .LVU749
 2716 03fe 8CE6     		b	.L161
 2717              	.LVL252:
 2718              	.L159:
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2719              		.loc 2 108 67 view .LVU750
 2720              	.LBE111:
 2721              	.LBE137:
 458:src/console.c ****       remapped = remap(c);
 2722              		.loc 2 458 5 is_stmt 1 view .LVU751
 458:src/console.c ****       remapped = remap(c);
 2723              		.loc 2 458 8 is_stmt 0 view .LVU752
 2724 0400 7FF435AE 		bne	.L143
 2725 0404 77E6     		b	.L162
 2726              	.L158:
 458:src/console.c ****       remapped = remap(c);
 2727              		.loc 2 458 5 is_stmt 1 view .LVU753
 459:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2728              		.loc 2 459 7 view .LVU754
 2729              	.LVL253:
 2730              	.LBB138:
  61:src/console.c **** 
 2731              		.loc 2 61 22 view .LVU755
 2732              	.LBB112:
  63:src/console.c **** 
ARM GAS  /tmp/cc2wwr9y.s 			page 75


 2733              		.loc 2 63 3 view .LVU756
   1:src/keytran.c ****     {K_RELEASE, -1},
 2734              		.loc 3 1 1 view .LVU757
  59:src/keytran.c ****     {K_RELEASE, -1},
 2735              		.loc 3 59 3 view .LVU758
 117:src/keytran.c ****     {K_RELEASE, -1},
 2736              		.loc 3 117 3 view .LVU759
 2737              		.loc 3 175 1 view .LVU760
  67:src/console.c **** 
 2738              		.loc 2 67 3 view .LVU761
  67:src/console.c **** 
 2739              		.loc 2 67 23 view .LVU762
  67:src/console.c **** 
 2740              		.loc 2 67 30 is_stmt 0 view .LVU763
 2741 0406 8A4B     		ldr	r3, .L228+4
 2742 0408 93E80300 		ldm	r3, {r0, r1}
 2743              	.LVL254:
  67:src/console.c **** 
 2744              		.loc 2 67 30 view .LVU764
 2745 040c 85E80300 		stm	r5, {r0, r1}
 2746 0410 8A46     		mov	r10, r1
 2747              	.LVL255:
  67:src/console.c **** 
 2748              		.loc 2 67 30 view .LVU765
 2749 0412 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2750              	.LVL256:
  67:src/console.c **** 
 2751              		.loc 2 67 30 view .LVU766
 2752 0414 81E6     		b	.L161
 2753              	.LVL257:
 2754              	.L211:
  73:src/console.c ****     // Make screenshot - allow to report errors
 2755              		.loc 2 73 5 is_stmt 1 view .LVU767
 2756 0416 874B     		ldr	r3, .L228+8
 2757 0418 41F23010 		movw	r0, #4400
 2758 041c 9847     		blx	r3
 2759              	.LVL258:
  73:src/console.c ****     // Make screenshot - allow to report errors
 2760              		.loc 2 73 30 view .LVU768
 2761 041e 0A20     		movs	r0, #10
 2762 0420 854B     		ldr	r3, .L228+12
 2763 0422 9847     		blx	r3
 2764              	.LVL259:
  73:src/console.c ****     // Make screenshot - allow to report errors
 2765              		.loc 2 73 45 view .LVU769
 2766 0424 854B     		ldr	r3, .L228+16
 2767 0426 9847     		blx	r3
 2768              	.LVL260:
  75:src/console.c ****       // Was error just wait for confirmation
 2769              		.loc 2 75 5 view .LVU770
  75:src/console.c ****       // Was error just wait for confirmation
 2770              		.loc 2 75 10 is_stmt 0 view .LVU771
 2771 0428 854B     		ldr	r3, .L228+20
 2772 042a 0120     		movs	r0, #1
 2773 042c 9847     		blx	r3
 2774              	.LVL261:
  75:src/console.c ****       // Was error just wait for confirmation
ARM GAS  /tmp/cc2wwr9y.s 			page 76


 2775              		.loc 2 75 8 view .LVU772
 2776 042e 0228     		cmp	r0, #2
 2777 0430 01D1     		bne	.L163
  77:src/console.c ****     }
 2778              		.loc 2 77 7 is_stmt 1 view .LVU773
 2779 0432 844B     		ldr	r3, .L228+24
 2780 0434 9847     		blx	r3
 2781              	.LVL262:
 2782              	.L163:
  80:src/console.c ****     return no_key;
 2783              		.loc 2 80 5 view .LVU774
 2784 0436 7F4B     		ldr	r3, .L228+8
 2785 0438 42F26020 		movw	r0, #8800
 2786 043c 9847     		blx	r3
 2787              	.LVL263:
  80:src/console.c ****     return no_key;
 2788              		.loc 2 80 30 view .LVU775
 2789 043e 0A20     		movs	r0, #10
 2790 0440 7D4B     		ldr	r3, .L228+12
 2791 0442 9847     		blx	r3
 2792              	.LVL264:
  80:src/console.c ****     return no_key;
 2793              		.loc 2 80 45 view .LVU776
 2794 0444 7D4B     		ldr	r3, .L228+16
 2795 0446 9847     		blx	r3
 2796              	.LVL265:
  81:src/console.c ****   }
 2797              		.loc 2 81 5 view .LVU777
  81:src/console.c ****   }
 2798              		.loc 2 81 12 is_stmt 0 view .LVU778
 2799 0448 7F4B     		ldr	r3, .L228+28
 2800 044a 93E80300 		ldm	r3, {r0, r1}
 2801 044e 85E80300 		stm	r5, {r0, r1}
 2802 0452 8A46     		mov	r10, r1
 2803              	.LVL266:
  81:src/console.c ****   }
 2804              		.loc 2 81 12 view .LVU779
 2805 0454 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2806              	.LVL267:
  81:src/console.c ****   }
 2807              		.loc 2 81 12 view .LVU780
 2808 0456 60E6     		b	.L161
 2809              	.LVL268:
 2810              	.L214:
  81:src/console.c ****   }
 2811              		.loc 2 81 12 view .LVU781
 2812              	.LBE112:
 2813              	.LBE138:
 484:src/console.c **** 	display_current_menu();
 2814              		.loc 2 484 2 is_stmt 1 view .LVU782
 484:src/console.c **** 	display_current_menu();
 2815              		.loc 2 484 13 is_stmt 0 view .LVU783
 2816 0458 8DF81030 		strb	r3, [sp, #16]
 2817 045c CDF814A0 		str	r10, [sp, #20]
 2818 0460 95E80600 		ldm	r5, {r1, r2}
 2819 0464 02A8     		add	r0, sp, #8
 2820 0466 FFF7FEFF 		bl	do_multi
ARM GAS  /tmp/cc2wwr9y.s 			page 77


 2821              	.LVL269:
 484:src/console.c **** 	display_current_menu();
 2822              		.loc 2 484 13 view .LVU784
 2823 046a 02AB     		add	r3, sp, #8
 2824 046c 93E80300 		ldm	r3, {r0, r1}
 2825 0470 85E80300 		stm	r5, {r0, r1}
 2826              	.LVL270:
 2827              	.LBB139:
 2828              	.LBB140:
  22:src/menu.c    **** }
 2829              		.loc 1 22 3 view .LVU785
 2830 0474 DBF80000 		ldr	r0, [fp]
 2831              	.LBE140:
 2832              	.LBE139:
 484:src/console.c **** 	display_current_menu();
 2833              		.loc 2 484 13 view .LVU786
 2834 0478 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 2835 047c 0193     		str	r3, [sp, #4]
 2836              	.LVL271:
 484:src/console.c **** 	display_current_menu();
 2837              		.loc 2 484 13 view .LVU787
 2838 047e DDF814A0 		ldr	r10, [sp, #20]
 2839              	.LVL272:
 485:src/console.c ****       }
 2840              		.loc 2 485 2 is_stmt 1 view .LVU788
 2841              	.LBB142:
 2842              	.LBI139:
  21:src/menu.c    ****   display_menu (current_menu);
 2843              		.loc 1 21 6 view .LVU789
 2844              	.LBB141:
  22:src/menu.c    **** }
 2845              		.loc 1 22 3 view .LVU790
 2846 0482 FFF7FEFF 		bl	display_menu
 2847              	.LVL273:
  23:src/menu.c    **** 
 2848              		.loc 1 23 1 is_stmt 0 view .LVU791
 2849 0486 019B     		ldr	r3, [sp, #4]
 2850 0488 6AE6     		b	.L166
 2851              	.LVL274:
 2852              	.L210:
  23:src/menu.c    **** 
 2853              		.loc 1 23 1 view .LVU792
 2854              	.LBE141:
 2855              	.LBE142:
 2856              	.LBB143:
 2857              	.LBB113:
  69:src/console.c **** 
 2858              		.loc 2 69 16 is_stmt 1 view .LVU793
  69:src/console.c **** 
 2859              		.loc 2 69 23 is_stmt 0 view .LVU794
 2860 048a 704B     		ldr	r3, .L228+32
 2861 048c 93E80300 		ldm	r3, {r0, r1}
 2862 0490 85E80300 		stm	r5, {r0, r1}
 2863 0494 8A46     		mov	r10, r1
 2864              	.LVL275:
  69:src/console.c **** 
 2865              		.loc 2 69 23 view .LVU795
ARM GAS  /tmp/cc2wwr9y.s 			page 78


 2866 0496 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2867              	.LVL276:
  69:src/console.c **** 
 2868              		.loc 2 69 23 view .LVU796
 2869 0498 3FE6     		b	.L161
 2870              	.LVL277:
 2871              	.L195:
  69:src/console.c **** 
 2872              		.loc 2 69 23 view .LVU797
 2873              	.LBE113:
 2874              	.LBE143:
 2875              	.LBB144:
 2876              	.LBB130:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2877              		.loc 1 4 7 view .LVU798
 2878 049a 9A46     		mov	r10, r3
 2879              	.LVL278:
 2880              	.L187:
   6:src/menu.c    ****   }
 2881              		.loc 1 6 5 is_stmt 1 view .LVU799
   6:src/menu.c    ****   }
 2882              		.loc 1 6 18 is_stmt 0 view .LVU800
 2883 049c 0022     		movs	r2, #0
 2884 049e 5346     		mov	r3, r10
 2885              	.LVL279:
   6:src/menu.c    ****   }
 2886              		.loc 1 6 18 view .LVU801
 2887 04a0 CBF80020 		str	r2, [fp]
 2888              	.LVL280:
   6:src/menu.c    ****   }
 2889              		.loc 1 6 18 view .LVU802
 2890 04a4 9246     		mov	r10, r2
 2891 04a6 DAE6     		b	.L190
 2892              	.LVL281:
 2893              	.L218:
   9:src/menu.c    ****   }
 2894              		.loc 1 9 5 is_stmt 1 view .LVU803
   9:src/menu.c    ****   }
 2895              		.loc 1 9 18 is_stmt 0 view .LVU804
 2896 04a8 694A     		ldr	r2, .L228+36
 2897 04aa D2F800A0 		ldr	r10, [r2]
 2898              	.LVL282:
   9:src/menu.c    ****   }
 2899              		.loc 1 9 18 view .LVU805
 2900 04ae CBF800A0 		str	r10, [fp]
 2901 04b2 D4E6     		b	.L190
 2902              	.LVL283:
 2903              	.L212:
   9:src/menu.c    ****   }
 2904              		.loc 1 9 18 view .LVU806
 2905              	.LBE130:
 2906              	.LBE144:
 2907              	.LBB145:
 2908              	.LBB114:
  87:src/console.c ****       case SHIFT_N:
 2909              		.loc 2 87 7 is_stmt 1 view .LVU807
  87:src/console.c ****       case SHIFT_N:
ARM GAS  /tmp/cc2wwr9y.s 			page 79


 2910              		.loc 2 87 15 is_stmt 0 view .LVU808
 2911 04b4 FFF7FEFF 		bl	cur_shift
 2912              	.LVL284:
  87:src/console.c ****       case SHIFT_N:
 2913              		.loc 2 87 7 view .LVU809
 2914 04b8 0328     		cmp	r0, #3
  87:src/console.c ****       case SHIFT_N:
 2915              		.loc 2 87 15 view .LVU810
 2916 04ba 0346     		mov	r3, r0
  87:src/console.c ****       case SHIFT_N:
 2917              		.loc 2 87 7 view .LVU811
 2918 04bc 00F2A980 		bhi	.L193
 2919 04c0 0128     		cmp	r0, #1
 2920 04c2 21D8     		bhi	.L167
 2921 04c4 0028     		cmp	r0, #0
 2922 04c6 00F08D80 		beq	.L223
  90:src/console.c ****       case SHIFT_F:
 2923              		.loc 2 90 2 is_stmt 1 view .LVU812
  92:src/console.c **** 	break;
 2924              		.loc 2 92 2 view .LVU813
  92:src/console.c **** 	break;
 2925              		.loc 2 92 23 is_stmt 0 view .LVU814
 2926 04ca 624B     		ldr	r3, .L228+40
 2927 04cc 93E80300 		ldm	r3, {r0, r1}
 2928 04d0 4FF0000A 		mov	r10, #0
 2929              	.LVL285:
  92:src/console.c **** 	break;
 2930              		.loc 2 92 23 view .LVU815
 2931 04d4 85E80300 		stm	r5, {r0, r1}
 2932              	.LVL286:
  92:src/console.c **** 	break;
 2933              		.loc 2 92 23 view .LVU816
 2934              	.LBE114:
 2935              	.LBE145:
 460:src/console.c **** 	set_menu ( remapped.shift );
 2936              		.loc 2 460 7 is_stmt 1 view .LVU817
 476:src/console.c **** 	SET_ST(STAT_MENU);
 2937              		.loc 2 476 7 view .LVU818
 483:src/console.c **** 	remapped = do_multi (remapped);
 2938              		.loc 2 483 7 view .LVU819
 2939              	.LBB146:
 2940              	.LBB115:
  92:src/console.c **** 	break;
 2941              		.loc 2 92 23 is_stmt 0 view .LVU820
 2942 04d8 2A23     		movs	r3, #42
 2943 04da 41E6     		b	.L166
 2944              	.LVL287:
 2945              	.L182:
 124:src/console.c ****   }
 2946              		.loc 2 124 5 is_stmt 1 view .LVU821
 124:src/console.c ****   }
 2947              		.loc 2 124 9 is_stmt 0 view .LVU822
 2948 04dc FFF7FEFF 		bl	cur_shift
 2949              	.LVL288:
 124:src/console.c ****   }
 2950              		.loc 2 124 8 view .LVU823
 2951 04e0 0128     		cmp	r0, #1
ARM GAS  /tmp/cc2wwr9y.s 			page 80


 2952 04e2 19D0     		beq	.L224
 2953              	.L169:
 127:src/console.c ****   case SHIFT_N:    
 2954              		.loc 2 127 3 is_stmt 1 view .LVU824
 127:src/console.c ****   case SHIFT_N:    
 2955              		.loc 2 127 11 is_stmt 0 view .LVU825
 2956 04e4 FFF7FEFF 		bl	cur_shift
 2957              	.LVL289:
 127:src/console.c ****   case SHIFT_N:    
 2958              		.loc 2 127 3 view .LVU826
 2959 04e8 0128     		cmp	r0, #1
 2960 04ea 00F09080 		beq	.L183
 2961 04ee 0228     		cmp	r0, #2
 2962 04f0 00F08280 		beq	.L184
 2963 04f4 0028     		cmp	r0, #0
 2964 04f6 7DD0     		beq	.L185
  63:src/console.c **** 
 2965              		.loc 2 63 41 view .LVU827
 2966 04f8 5FFA8AF3 		uxtb	r3, r10
 2967              	.LVL290:
  63:src/console.c **** 
 2968              		.loc 2 63 41 view .LVU828
 2969              	.LBE115:
 2970              	.LBE146:
 460:src/console.c **** 	set_menu ( remapped.shift );
 2971              		.loc 2 460 7 is_stmt 1 view .LVU829
 460:src/console.c **** 	set_menu ( remapped.shift );
 2972              		.loc 2 460 10 is_stmt 0 view .LVU830
 2973 04fc 2F2B     		cmp	r3, #47
 2974 04fe 00F08C80 		beq	.L225
 2975              	.LBB147:
 2976              	.LBB116:
 138:src/console.c ****   }
 2977              		.loc 2 138 12 view .LVU831
 2978 0502 4FF0000A 		mov	r10, #0
 2979              	.LVL291:
 138:src/console.c ****   }
 2980              		.loc 2 138 12 view .LVU832
 2981 0506 0BE6     		b	.L186
 2982              	.LVL292:
 2983              	.L167:
  93:src/console.c ****       case SHIFT_G:
 2984              		.loc 2 93 2 is_stmt 1 view .LVU833
  95:src/console.c **** 	break;
 2985              		.loc 2 95 2 view .LVU834
  95:src/console.c **** 	break;
 2986              		.loc 2 95 9 is_stmt 0 view .LVU835
 2987 0508 534B     		ldr	r3, .L228+44
 2988 050a 93E80300 		ldm	r3, {r0, r1}
 2989 050e 85E80300 		stm	r5, {r0, r1}
 2990 0512 8A46     		mov	r10, r1
 2991              	.LVL293:
  95:src/console.c **** 	break;
 2992              		.loc 2 95 9 view .LVU836
 2993 0514 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2994              	.LVL294:
  95:src/console.c **** 	break;
ARM GAS  /tmp/cc2wwr9y.s 			page 81


 2995              		.loc 2 95 9 view .LVU837
 2996 0516 00E6     		b	.L161
 2997              	.LVL295:
 2998              	.L224:
 124:src/console.c ****   }
 2999              		.loc 2 124 33 is_stmt 1 view .LVU838
 124:src/console.c ****   }
 3000              		.loc 2 124 67 is_stmt 0 view .LVU839
 3001 0518 DBF80030 		ldr	r3, [fp]
 3002 051c 434F     		ldr	r7, .L228
 3003 051e D022     		movs	r2, #208
 3004 0520 02FB03F2 		mul	r2, r2, r3
 3005 0524 BB18     		adds	r3, r7, r2
 3006 0526 D3E92E01 		ldrd	r0, r1, [r3, #184]
 3007 052a B832     		adds	r2, r2, #184
 3008 052c BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3009              	.LVL296:
 124:src/console.c ****   }
 3010              		.loc 2 124 67 view .LVU840
 3011 052e 85E80300 		stm	r5, {r0, r1}
 3012 0532 3A44     		add	r2, r2, r7
 3013 0534 D2F804A0 		ldr	r10, [r2, #4]
 3014              	.LVL297:
 124:src/console.c ****   }
 3015              		.loc 2 124 67 view .LVU841
 3016 0538 EFE5     		b	.L161
 3017              	.LVL298:
 3018              	.L217:
 121:src/console.c ****   case KEY_F6:
 3019              		.loc 2 121 33 is_stmt 1 view .LVU842
 121:src/console.c ****   case KEY_F6:
 3020              		.loc 2 121 67 is_stmt 0 view .LVU843
 3021 053a DBF80030 		ldr	r3, [fp]
 3022 053e 3B4F     		ldr	r7, .L228
 3023 0540 D022     		movs	r2, #208
 3024 0542 02FB03F2 		mul	r2, r2, r3
 3025 0546 BB18     		adds	r3, r7, r2
 3026 0548 D3E92601 		ldrd	r0, r1, [r3, #152]
 3027 054c 9832     		adds	r2, r2, #152
 3028 054e BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3029              	.LVL299:
 121:src/console.c ****   case KEY_F6:
 3030              		.loc 2 121 67 view .LVU844
 3031 0550 85E80300 		stm	r5, {r0, r1}
 3032 0554 3A44     		add	r2, r2, r7
 3033 0556 D2F804A0 		ldr	r10, [r2, #4]
 3034              	.LVL300:
 121:src/console.c ****   case KEY_F6:
 3035              		.loc 2 121 67 view .LVU845
 3036 055a DEE5     		b	.L161
 3037              	.LVL301:
 3038              	.L219:
 118:src/console.c ****   case KEY_F5:
 3039              		.loc 2 118 33 is_stmt 1 view .LVU846
 118:src/console.c ****   case KEY_F5:
 3040              		.loc 2 118 67 is_stmt 0 view .LVU847
 3041 055c DBF80030 		ldr	r3, [fp]
ARM GAS  /tmp/cc2wwr9y.s 			page 82


 3042 0560 324F     		ldr	r7, .L228
 3043 0562 D022     		movs	r2, #208
 3044 0564 02FB03F2 		mul	r2, r2, r3
 3045 0568 BB18     		adds	r3, r7, r2
 3046 056a D3E91E01 		ldrd	r0, r1, [r3, #120]
 3047 056e 7832     		adds	r2, r2, #120
 3048 0570 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3049              	.LVL302:
 118:src/console.c ****   case KEY_F5:
 3050              		.loc 2 118 67 view .LVU848
 3051 0572 85E80300 		stm	r5, {r0, r1}
 3052 0576 3A44     		add	r2, r2, r7
 3053 0578 D2F804A0 		ldr	r10, [r2, #4]
 3054              	.LVL303:
 118:src/console.c ****   case KEY_F5:
 3055              		.loc 2 118 67 view .LVU849
 3056 057c CDE5     		b	.L161
 3057              	.LVL304:
 3058              	.L220:
 115:src/console.c ****   case KEY_F4:
 3059              		.loc 2 115 33 is_stmt 1 view .LVU850
 115:src/console.c ****   case KEY_F4:
 3060              		.loc 2 115 67 is_stmt 0 view .LVU851
 3061 057e DBF80030 		ldr	r3, [fp]
 3062 0582 2A4F     		ldr	r7, .L228
 3063 0584 D022     		movs	r2, #208
 3064 0586 02FB03F2 		mul	r2, r2, r3
 3065 058a BB18     		adds	r3, r7, r2
 3066 058c D3E91601 		ldrd	r0, r1, [r3, #88]
 3067 0590 5832     		adds	r2, r2, #88
 3068 0592 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3069              	.LVL305:
 115:src/console.c ****   case KEY_F4:
 3070              		.loc 2 115 67 view .LVU852
 3071 0594 85E80300 		stm	r5, {r0, r1}
 3072 0598 3A44     		add	r2, r2, r7
 3073 059a D2F804A0 		ldr	r10, [r2, #4]
 3074              	.LVL306:
 115:src/console.c ****   case KEY_F4:
 3075              		.loc 2 115 67 view .LVU853
 3076 059e BCE5     		b	.L161
 3077              	.LVL307:
 3078              	.L221:
 112:src/console.c ****   case KEY_F3:
 3079              		.loc 2 112 33 is_stmt 1 view .LVU854
 112:src/console.c ****   case KEY_F3:
 3080              		.loc 2 112 67 is_stmt 0 view .LVU855
 3081 05a0 DBF80030 		ldr	r3, [fp]
 3082 05a4 214F     		ldr	r7, .L228
 3083 05a6 D022     		movs	r2, #208
 3084 05a8 02FB03F2 		mul	r2, r2, r3
 3085 05ac BB18     		adds	r3, r7, r2
 3086 05ae D3E90E01 		ldrd	r0, r1, [r3, #56]
 3087 05b2 3832     		adds	r2, r2, #56
 3088 05b4 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3089              	.LVL308:
 112:src/console.c ****   case KEY_F3:
ARM GAS  /tmp/cc2wwr9y.s 			page 83


 3090              		.loc 2 112 67 view .LVU856
 3091 05b6 85E80300 		stm	r5, {r0, r1}
 3092 05ba 3A44     		add	r2, r2, r7
 3093 05bc D2F804A0 		ldr	r10, [r2, #4]
 3094              	.LVL309:
 112:src/console.c ****   case KEY_F3:
 3095              		.loc 2 112 67 view .LVU857
 3096 05c0 ABE5     		b	.L161
 3097              	.LVL310:
 3098              	.L222:
 109:src/console.c ****   case KEY_F2:
 3099              		.loc 2 109 33 is_stmt 1 view .LVU858
 109:src/console.c ****   case KEY_F2:
 3100              		.loc 2 109 67 is_stmt 0 view .LVU859
 3101 05c2 DBF80030 		ldr	r3, [fp]
 3102 05c6 194F     		ldr	r7, .L228
 3103 05c8 D022     		movs	r2, #208
 3104 05ca 02FB03F2 		mul	r2, r2, r3
 3105 05ce BB18     		adds	r3, r7, r2
 3106 05d0 D3E90601 		ldrd	r0, r1, [r3, #24]
 3107 05d4 1832     		adds	r2, r2, #24
 3108 05d6 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3109              	.LVL311:
 109:src/console.c ****   case KEY_F2:
 3110              		.loc 2 109 67 view .LVU860
 3111 05d8 85E80300 		stm	r5, {r0, r1}
 3112 05dc 3A44     		add	r2, r2, r7
 3113 05de D2F804A0 		ldr	r10, [r2, #4]
 3114              	.LVL312:
 109:src/console.c ****   case KEY_F2:
 3115              		.loc 2 109 67 view .LVU861
 3116 05e2 9AE5     		b	.L161
 3117              	.LVL313:
 3118              	.L223:
  89:src/console.c **** 	break;
 3119              		.loc 2 89 2 is_stmt 1 view .LVU862
  89:src/console.c **** 	break;
 3120              		.loc 2 89 21 is_stmt 0 view .LVU863
 3121 05e4 1D4A     		ldr	r2, .L228+48
 3122 05e6 92E80300 		ldm	r2, {r0, r1}
 3123 05ea 9A46     		mov	r10, r3
 3124              	.LVL314:
  89:src/console.c **** 	break;
 3125              		.loc 2 89 21 view .LVU864
 3126 05ec 85E80300 		stm	r5, {r0, r1}
 3127              	.LVL315:
  89:src/console.c **** 	break;
 3128              		.loc 2 89 21 view .LVU865
 3129              	.LBE116:
 3130              	.LBE147:
 460:src/console.c **** 	set_menu ( remapped.shift );
 3131              		.loc 2 460 7 is_stmt 1 view .LVU866
 476:src/console.c **** 	SET_ST(STAT_MENU);
 3132              		.loc 2 476 7 view .LVU867
 483:src/console.c **** 	remapped = do_multi (remapped);
 3133              		.loc 2 483 7 view .LVU868
 3134              	.LBB148:
ARM GAS  /tmp/cc2wwr9y.s 			page 84


 3135              	.LBB117:
  89:src/console.c **** 	break;
 3136              		.loc 2 89 21 is_stmt 0 view .LVU869
 3137 05f0 2923     		movs	r3, #41
 3138 05f2 B5E5     		b	.L166
 3139              	.LVL316:
 3140              	.L185:
 129:src/console.c ****     break;
 3141              		.loc 2 129 5 is_stmt 1 view .LVU870
 129:src/console.c ****     break;
 3142              		.loc 2 129 24 is_stmt 0 view .LVU871
 3143 05f4 1A4A     		ldr	r2, .L228+52
 3144 05f6 87E5     		b	.L209
 3145              	.L184:
 133:src/console.c ****   case SHIFT_G:
 3146              		.loc 2 133 5 is_stmt 1 view .LVU872
 135:src/console.c ****     break;
 3147              		.loc 2 135 5 view .LVU873
 135:src/console.c ****     break;
 3148              		.loc 2 135 26 is_stmt 0 view .LVU874
 3149 05f8 1A4A     		ldr	r2, .L228+56
 3150 05fa 02EBCA03 		add	r3, r2, r10, lsl #3
 3151 05fe 93E80300 		ldm	r3, {r0, r1}
 3152 0602 12F83A30 		ldrb	r3, [r2, r10, lsl #3]	@ zero_extendqisi2
 3153              	.LVL317:
 135:src/console.c ****     break;
 3154              		.loc 2 135 26 view .LVU875
 3155 0606 85E80300 		stm	r5, {r0, r1}
 3156 060a 8A46     		mov	r10, r1
 3157              	.LVL318:
 135:src/console.c ****     break;
 3158              		.loc 2 135 26 view .LVU876
 3159 060c 85E5     		b	.L161
 3160              	.LVL319:
 3161              	.L183:
 130:src/console.c ****   case SHIFT_F:
 3162              		.loc 2 130 5 is_stmt 1 view .LVU877
 132:src/console.c ****     break;
 3163              		.loc 2 132 5 view .LVU878
 132:src/console.c ****     break;
 3164              		.loc 2 132 26 is_stmt 0 view .LVU879
 3165 060e 164A     		ldr	r2, .L228+60
 3166 0610 7AE5     		b	.L209
 3167              	.L193:
  87:src/console.c ****       case SHIFT_N:
 3168              		.loc 2 87 7 view .LVU880
 3169 0612 5346     		mov	r3, r10
 3170 0614 4FF0000A 		mov	r10, #0
 3171              	.LVL320:
  87:src/console.c ****       case SHIFT_N:
 3172              		.loc 2 87 7 view .LVU881
 3173 0618 A2E5     		b	.L166
 3174              	.LVL321:
 3175              	.L225:
  87:src/console.c ****       case SHIFT_N:
 3176              		.loc 2 87 7 view .LVU882
 3177              	.LBE117:
ARM GAS  /tmp/cc2wwr9y.s 			page 85


 3178              	.LBE148:
 461:src/console.c **** 	display_current_menu ();
 3179              		.loc 2 461 2 is_stmt 1 view .LVU883
 3180              	.LBB149:
   3:src/menu.c    ****   int m = current_menu;
 3181              		.loc 1 3 6 view .LVU884
 3182              	.LBB131:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3183              		.loc 1 4 3 view .LVU885
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3184              		.loc 1 4 7 is_stmt 0 view .LVU886
 3185 061a DBF80030 		ldr	r3, [fp]
 3186              	.LVL322:
   5:src/menu.c    ****     current_menu = 0;
 3187              		.loc 1 5 3 is_stmt 1 view .LVU887
   5:src/menu.c    ****     current_menu = 0;
 3188              		.loc 1 5 6 is_stmt 0 view .LVU888
 3189 061e 002B     		cmp	r3, #0
 3190 0620 3FF43BAF 		beq	.L195
 3191              	.LBE131:
 3192              	.LBE149:
 3193              	.LBB150:
 3194              	.LBB118:
 138:src/console.c ****   }
 3195              		.loc 2 138 12 view .LVU889
 3196 0624 4FF0000A 		mov	r10, #0
 3197              	.LVL323:
 138:src/console.c ****   }
 3198              		.loc 2 138 12 view .LVU890
 3199 0628 17E6     		b	.L188
 3200              	.L229:
 3201 062a 00BF     		.align	2
 3202              	.L228:
 3203 062c 00000000 		.word	.LANCHOR3
 3204 0630 00000000 		.word	.LANCHOR16
 3205 0634 F5020008 		.word	134218485
 3206 0638 05040008 		.word	134218757
 3207 063c F9020008 		.word	134218489
 3208 0640 79030008 		.word	134218617
 3209 0644 99030008 		.word	134218649
 3210 0648 00000000 		.word	.LANCHOR6
 3211 064c 00000000 		.word	.LANCHOR7
 3212 0650 00000000 		.word	.LANCHOR2
 3213 0654 E0000000 		.word	.LANCHOR9+224
 3214 0658 00000000 		.word	.LANCHOR10
 3215 065c E0000000 		.word	.LANCHOR8+224
 3216 0660 00000000 		.word	.LANCHOR8
 3217 0664 00000000 		.word	.LANCHOR12
 3218 0668 00000000 		.word	.LANCHOR9
 3219              	.LBE118:
 3220              	.LBE150:
 3221              		.cfi_endproc
 3222              	.LFE23:
 3224              		.global	n_p
 3225              		.comm	print_string,22,4
 3226              		.global	spaces
 3227              		.global	release
ARM GAS  /tmp/cc2wwr9y.s 			page 86


 3228              		.global	h_shift
 3229              		.global	g_shift
 3230              		.global	f_shift
 3231              		.global	heartbeat
 3232              		.global	no_key
 3233              		.global	MID_MENU
 3234              		.section	.rodata.str1.4,"aMS",%progbits,1
 3235              		.align	2
 3236              	.LC3:
 3237 0000 53797374 		.ascii	"System!\000"
 3237      656D2100 
 3238              		.global	mid_menu
 3239              		.section	.bss.current_menu,"aw",%nobits
 3240              		.align	2
 3241              		.set	.LANCHOR1,. + 0
 3244              	current_menu:
 3245 0000 00000000 		.space	4
 3246              		.section	.bss.last_menu,"aw",%nobits
 3247              		.align	2
 3248              		.set	.LANCHOR2,. + 0
 3251              	last_menu:
 3252 0000 00000000 		.space	4
 3253              		.section	.bss.mdots,"aw",%nobits
 3254              		.align	2
 3255              		.set	.LANCHOR0,. + 0
 3258              	mdots:
 3259 0000 00000000 		.space	400
 3259      00000000 
 3259      00000000 
 3259      00000000 
 3259      00000000 
 3260              		.section	.bss.n_p,"aw",%nobits
 3261              		.align	2
 3264              	n_p:
 3265 0000 00000000 		.space	4
 3266              		.section	.bss.start_ticks,"aw",%nobits
 3267              		.align	2
 3268              		.set	.LANCHOR4,. + 0
 3271              	start_ticks:
 3272 0000 00000000 		.space	4
 3273              		.section	.data.f_shift,"aw"
 3274              		.align	2
 3275              		.set	.LANCHOR13,. + 0
 3278              	f_shift:
 3279 0000 29       		.byte	41
 3280 0001 000000   		.space	3
 3281 0004 FFFFFFFF 		.word	-1
 3282              		.section	.data.g_shift,"aw"
 3283              		.align	2
 3284              		.set	.LANCHOR14,. + 0
 3287              	g_shift:
 3288 0000 2A       		.byte	42
 3289 0001 000000   		.space	3
 3290 0004 FFFFFFFF 		.word	-1
 3291              		.section	.data.h_shift,"aw"
 3292              		.align	2
 3293              		.set	.LANCHOR10,. + 0
ARM GAS  /tmp/cc2wwr9y.s 			page 87


 3296              	h_shift:
 3297 0000 2B       		.byte	43
 3298 0001 000000   		.space	3
 3299 0004 FFFFFFFF 		.word	-1
 3300              		.section	.data.heartbeat,"aw"
 3301              		.align	2
 3302              		.set	.LANCHOR16,. + 0
 3305              	heartbeat:
 3306 0000 62       		.byte	98
 3307 0001 000000   		.space	3
 3308 0004 FFFFFFFF 		.word	-1
 3309              		.section	.data.no_key,"aw"
 3310              		.align	2
 3311              		.set	.LANCHOR6,. + 0
 3314              	no_key:
 3315 0000 2E       		.byte	46
 3316 0001 000000   		.space	3
 3317 0004 00000000 		.word	0
 3318              		.section	.data.release,"aw"
 3319              		.align	2
 3320              		.set	.LANCHOR7,. + 0
 3323              	release:
 3324 0000 63       		.byte	99
 3325 0001 000000   		.space	3
 3326 0004 FFFFFFFF 		.word	-1
 3327              		.section	.data.spaces,"aw"
 3328              		.align	2
 3329              		.set	.LANCHOR5,. + 0
 3332              	spaces:
 3333 0000 20202020 		.ascii	"                     \000"
 3333      20202020 
 3333      20202020 
 3333      20202020 
 3333      20202020 
 3334              		.section	.rodata.MID_MENU,"a"
 3335              		.align	2
 3336              		.set	.LANCHOR15,. + 0
 3339              	MID_MENU:
 3340 0000 00000000 		.word	.LC3
 3341 0004 00000000 		.word	mid_menu
 3342 0008 00000000 		.word	0
 3343 000c 00000000 		.word	0
 3344              		.section	.rodata.Menus,"a"
 3345              		.align	2
 3346              		.set	.LANCHOR3,. + 0
 3349              	Menus:
 3350 0000 426C616E 		.ascii	"Blank\000"
 3350      6B00
 3351 0006 00000000 		.space	9
 3351      00000000 
 3351      00
 3352 000f 00       		.space	1
 3353 0010 2E       		.byte	46
 3354 0011 000000   		.space	3
 3355 0014 FFFFFFFF 		.word	-1
 3356 0018 2E       		.byte	46
 3357 0019 000000   		.space	3
ARM GAS  /tmp/cc2wwr9y.s 			page 88


 3358 001c FFFFFFFF 		.word	-1
 3359 0020 00       		.ascii	"\000"
 3360 0021 00000000 		.space	7
 3360      000000
 3361 0028 00       		.ascii	"\000"
 3362 0029 00000000 		.space	7
 3362      000000
 3363 0030 2E       		.byte	46
 3364 0031 000000   		.space	3
 3365 0034 FFFFFFFF 		.word	-1
 3366 0038 2E       		.byte	46
 3367 0039 000000   		.space	3
 3368 003c FFFFFFFF 		.word	-1
 3369 0040 00       		.ascii	"\000"
 3370 0041 00000000 		.space	7
 3370      000000
 3371 0048 00       		.ascii	"\000"
 3372 0049 00000000 		.space	7
 3372      000000
 3373 0050 2E       		.byte	46
 3374 0051 000000   		.space	3
 3375 0054 FFFFFFFF 		.word	-1
 3376 0058 2E       		.byte	46
 3377 0059 000000   		.space	3
 3378 005c FFFFFFFF 		.word	-1
 3379 0060 00       		.ascii	"\000"
 3380 0061 00000000 		.space	7
 3380      000000
 3381 0068 00       		.ascii	"\000"
 3382 0069 00000000 		.space	7
 3382      000000
 3383 0070 2E       		.byte	46
 3384 0071 000000   		.space	3
 3385 0074 FFFFFFFF 		.word	-1
 3386 0078 2E       		.byte	46
 3387 0079 000000   		.space	3
 3388 007c FFFFFFFF 		.word	-1
 3389 0080 00       		.ascii	"\000"
 3390 0081 00000000 		.space	7
 3390      000000
 3391 0088 00       		.ascii	"\000"
 3392 0089 00000000 		.space	7
 3392      000000
 3393 0090 2C       		.byte	44
 3394 0091 000000   		.space	3
 3395 0094 FFFFFFFF 		.word	-1
 3396 0098 2E       		.byte	46
 3397 0099 000000   		.space	3
 3398 009c FFFFFFFF 		.word	-1
 3399 00a0 2D2D0D00 		.ascii	"--\015\000"
 3400 00a4 00000000 		.space	4
 3401 00a8 00       		.ascii	"\000"
 3402 00a9 00000000 		.space	7
 3402      000000
 3403 00b0 2D       		.byte	45
 3404 00b1 000000   		.space	3
 3405 00b4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc2wwr9y.s 			page 89


 3406 00b8 2E       		.byte	46
 3407 00b9 000000   		.space	3
 3408 00bc FFFFFFFF 		.word	-1
 3409 00c0 43505800 		.ascii	"CPX\000"
 3410 00c4 00000000 		.space	4
 3411 00c8 00       		.ascii	"\000"
 3412 00c9 00000000 		.space	7
 3412      000000
 3413 00d0 436C6561 		.ascii	"Clear\000"
 3413      7200
 3414 00d6 00000000 		.space	9
 3414      00000000 
 3414      00
 3415 00df 00       		.space	1
 3416 00e0 10       		.byte	16
 3417 00e1 000000   		.space	3
 3418 00e4 01000000 		.word	1
 3419 00e8 2E       		.byte	46
 3420 00e9 000000   		.space	3
 3421 00ec FFFFFFFF 		.word	-1
 3422 00f0 434C5072 		.ascii	"CLProg\000"
 3422      6F6700
 3423 00f7 00       		.space	1
 3424 00f8 00       		.ascii	"\000"
 3425 00f9 00000000 		.space	7
 3425      000000
 3426 0100 10       		.byte	16
 3427 0101 000000   		.space	3
 3428 0104 02000000 		.word	2
 3429 0108 2E       		.byte	46
 3430 0109 000000   		.space	3
 3431 010c FFFFFFFF 		.word	-1
 3432 0110 434C9100 		.ascii	"CL\221\000"
 3433 0114 00000000 		.space	4
 3434 0118 00       		.ascii	"\000"
 3435 0119 00000000 		.space	7
 3435      000000
 3436 0120 10       		.byte	16
 3437 0121 000000   		.space	3
 3438 0124 03000000 		.word	3
 3439 0128 2E       		.byte	46
 3440 0129 000000   		.space	3
 3441 012c FFFFFFFF 		.word	-1
 3442 0130 434C2058 		.ascii	"CL X\000"
 3442      00
 3443 0135 000000   		.space	3
 3444 0138 00       		.ascii	"\000"
 3445 0139 00000000 		.space	7
 3445      000000
 3446 0140 2E       		.byte	46
 3447 0141 000000   		.space	3
 3448 0144 FFFFFFFF 		.word	-1
 3449 0148 2E       		.byte	46
 3450 0149 000000   		.space	3
 3451 014c FFFFFFFF 		.word	-1
 3452 0150 00       		.ascii	"\000"
 3453 0151 00000000 		.space	7
ARM GAS  /tmp/cc2wwr9y.s 			page 90


 3453      000000
 3454 0158 00       		.ascii	"\000"
 3455 0159 00000000 		.space	7
 3455      000000
 3456 0160 2C       		.byte	44
 3457 0161 000000   		.space	3
 3458 0164 FFFFFFFF 		.word	-1
 3459 0168 2E       		.byte	46
 3460 0169 000000   		.space	3
 3461 016c FFFFFFFF 		.word	-1
 3462 0170 2D2D0D00 		.ascii	"--\015\000"
 3463 0174 00000000 		.space	4
 3464 0178 00       		.ascii	"\000"
 3465 0179 00000000 		.space	7
 3465      000000
 3466 0180 2D       		.byte	45
 3467 0181 000000   		.space	3
 3468 0184 FFFFFFFF 		.word	-1
 3469 0188 2E       		.byte	46
 3470 0189 000000   		.space	3
 3471 018c FFFFFFFF 		.word	-1
 3472 0190 43505800 		.ascii	"CPX\000"
 3473 0194 00000000 		.space	4
 3474 0198 00       		.ascii	"\000"
 3475 0199 00000000 		.space	7
 3475      000000
 3476 01a0 44495350 		.ascii	"DISP\000"
 3476      00
 3477 01a5 00000000 		.space	10
 3477      00000000 
 3477      0000
 3478 01af 00       		.space	1
 3479 01b0 00       		.byte	0
 3480 01b1 000000   		.space	3
 3481 01b4 03000000 		.word	3
 3482 01b8 05       		.byte	5
 3483 01b9 000000   		.space	3
 3484 01bc 01000000 		.word	1
 3485 01c0 414C4C00 		.ascii	"ALL\000"
 3486 01c4 00000000 		.space	4
 3487 01c8 6120622F 		.ascii	"a b/c\000"
 3487      6300
 3488 01ce 0000     		.space	2
 3489 01d0 01       		.byte	1
 3490 01d1 000000   		.space	3
 3491 01d4 03000000 		.word	3
 3492 01d8 05       		.byte	5
 3493 01d9 000000   		.space	3
 3494 01dc 02000000 		.word	2
 3495 01e0 46495800 		.ascii	"FIX\000"
 3496 01e4 00000000 		.space	4
 3497 01e8 642F6300 		.ascii	"d/c\000"
 3498 01ec 00000000 		.space	4
 3499 01f0 02       		.byte	2
 3500 01f1 000000   		.space	3
 3501 01f4 03000000 		.word	3
 3502 01f8 06       		.byte	6
ARM GAS  /tmp/cc2wwr9y.s 			page 91


 3503 01f9 000000   		.space	3
 3504 01fc 01000000 		.word	1
 3505 0200 53434900 		.ascii	"SCI\000"
 3506 0204 00000000 		.space	4
 3507 0208 482E4D53 		.ascii	"H.MS\000"
 3507      00
 3508 020d 000000   		.space	3
 3509 0210 03       		.byte	3
 3510 0211 000000   		.space	3
 3511 0214 03000000 		.word	3
 3512 0218 07       		.byte	7
 3513 0219 000000   		.space	3
 3514 021c 01000000 		.word	1
 3515 0220 454E4700 		.ascii	"ENG\000"
 3516 0224 00000000 		.space	4
 3517 0228 482E6400 		.ascii	"H.d\000"
 3518 022c 00000000 		.space	4
 3519 0230 2C       		.byte	44
 3520 0231 000000   		.space	3
 3521 0234 FFFFFFFF 		.word	-1
 3522 0238 26       		.byte	38
 3523 0239 000000   		.space	3
 3524 023c 03000000 		.word	3
 3525 0240 2D2D0D00 		.ascii	"--\015\000"
 3526 0244 00000000 		.space	4
 3527 0248 2E2F2C00 		.ascii	"./,\000"
 3528 024c 00000000 		.space	4
 3529 0250 2D       		.byte	45
 3530 0251 000000   		.space	3
 3531 0254 FFFFFFFF 		.word	-1
 3532 0258 2E       		.byte	46
 3533 0259 000000   		.space	3
 3534 025c FFFFFFFF 		.word	-1
 3535 0260 43505800 		.ascii	"CPX\000"
 3536 0264 00000000 		.space	4
 3537 0268 00       		.ascii	"\000"
 3538 0269 00000000 		.space	7
 3538      000000
 3539 0270 42415345 		.ascii	"BASE\000"
 3539      00
 3540 0275 00000000 		.space	10
 3540      00000000 
 3540      0000
 3541 027f 00       		.space	1
 3542 0280 0E       		.byte	14
 3543 0281 000000   		.space	3
 3544 0284 01000000 		.word	1
 3545 0288 0E       		.byte	14
 3546 0289 000000   		.space	3
 3547 028c 03000000 		.word	3
 3548 0290 42494E00 		.ascii	"BIN\000"
 3549 0294 00000000 		.space	4
 3550 0298 6E6F7400 		.ascii	"not\000"
 3551 029c 00000000 		.space	4
 3552 02a0 0E       		.byte	14
 3553 02a1 000000   		.space	3
 3554 02a4 02000000 		.word	2
ARM GAS  /tmp/cc2wwr9y.s 			page 92


 3555 02a8 13       		.byte	19
 3556 02a9 000000   		.space	3
 3557 02ac 03000000 		.word	3
 3558 02b0 4F435400 		.ascii	"OCT\000"
 3559 02b4 00000000 		.space	4
 3560 02b8 616E6400 		.ascii	"and\000"
 3561 02bc 00000000 		.space	4
 3562 02c0 0F       		.byte	15
 3563 02c1 000000   		.space	3
 3564 02c4 01000000 		.word	1
 3565 02c8 14       		.byte	20
 3566 02c9 000000   		.space	3
 3567 02cc 03000000 		.word	3
 3568 02d0 44454300 		.ascii	"DEC\000"
 3569 02d4 00000000 		.space	4
 3570 02d8 6F7200   		.ascii	"or\000"
 3571 02db 00000000 		.space	5
 3571      00
 3572 02e0 0F       		.byte	15
 3573 02e1 000000   		.space	3
 3574 02e4 02000000 		.word	2
 3575 02e8 15       		.byte	21
 3576 02e9 000000   		.space	3
 3577 02ec 03000000 		.word	3
 3578 02f0 48455800 		.ascii	"HEX\000"
 3579 02f4 00000000 		.space	4
 3580 02f8 786F7200 		.ascii	"xor\000"
 3581 02fc 00000000 		.space	4
 3582 0300 2C       		.byte	44
 3583 0301 000000   		.space	3
 3584 0304 FFFFFFFF 		.word	-1
 3585 0308 16       		.byte	22
 3586 0309 000000   		.space	3
 3587 030c 03000000 		.word	3
 3588 0310 2D2D0D00 		.ascii	"--\015\000"
 3589 0314 00000000 		.space	4
 3590 0318 524D4452 		.ascii	"RMDR\000"
 3590      00
 3591 031d 000000   		.space	3
 3592 0320 2D       		.byte	45
 3593 0321 000000   		.space	3
 3594 0324 FFFFFFFF 		.word	-1
 3595 0328 07       		.byte	7
 3596 0329 000000   		.space	3
 3597 032c 01000000 		.word	1
 3598 0330 43505800 		.ascii	"CPX\000"
 3599 0334 00000000 		.space	4
 3600 0338 482E6400 		.ascii	"H.d\000"
 3601 033c 00000000 		.space	4
 3602 0340 414E474C 		.ascii	"ANGLES\000"
 3602      455300
 3603 0347 00000000 		.space	8
 3603      00000000 
 3604 034f 00       		.space	1
 3605 0350 06       		.byte	6
 3606 0351 000000   		.space	3
 3607 0354 02000000 		.word	2
ARM GAS  /tmp/cc2wwr9y.s 			page 93


 3608 0358 04       		.byte	4
 3609 0359 000000   		.space	3
 3610 035c 01000000 		.word	1
 3611 0360 44454700 		.ascii	"DEG\000"
 3612 0364 00000000 		.space	4
 3613 0368 500D5200 		.ascii	"P\015R\000"
 3614 036c 00000000 		.space	4
 3615 0370 07       		.byte	7
 3616 0371 000000   		.space	3
 3617 0374 02000000 		.word	2
 3618 0378 04       		.byte	4
 3619 0379 000000   		.space	3
 3620 037c 02000000 		.word	2
 3621 0380 52414400 		.ascii	"RAD\000"
 3622 0384 00000000 		.space	4
 3623 0388 520D5000 		.ascii	"R\015P\000"
 3624 038c 00000000 		.space	4
 3625 0390 08       		.byte	8
 3626 0391 000000   		.space	3
 3627 0394 02000000 		.word	2
 3628 0398 00       		.byte	0
 3629 0399 000000   		.space	3
 3630 039c 01000000 		.word	1
 3631 03a0 47524144 		.ascii	"GRAD\000"
 3631      00
 3632 03a5 000000   		.space	3
 3633 03a8 48595000 		.ascii	"HYP\000"
 3634 03ac 00000000 		.space	4
 3635 03b0 06       		.byte	6
 3636 03b1 000000   		.space	3
 3637 03b4 01000000 		.word	1
 3638 03b8 07       		.byte	7
 3639 03b9 000000   		.space	3
 3640 03bc 01000000 		.word	1
 3641 03c0 482E4D53 		.ascii	"H.MS\000"
 3641      00
 3642 03c5 000000   		.space	3
 3643 03c8 482E6400 		.ascii	"H.d\000"
 3644 03cc 00000000 		.space	4
 3645 03d0 2C       		.byte	44
 3646 03d1 000000   		.space	3
 3647 03d4 FFFFFFFF 		.word	-1
 3648 03d8 00       		.byte	0
 3649 03d9 000000   		.space	3
 3650 03dc 02000000 		.word	2
 3651 03e0 2D2D0D00 		.ascii	"--\015\000"
 3652 03e4 00000000 		.space	4
 3653 03e8 4859509D 		.ascii	"HYP\235\000"
 3653      00
 3654 03ed 000000   		.space	3
 3655 03f0 2D       		.byte	45
 3656 03f1 000000   		.space	3
 3657 03f4 FFFFFFFF 		.word	-1
 3658 03f8 2E       		.byte	46
 3659 03f9 000000   		.space	3
 3660 03fc FFFFFFFF 		.word	-1
 3661 0400 43505800 		.ascii	"CPX\000"
ARM GAS  /tmp/cc2wwr9y.s 			page 94


 3662 0404 00000000 		.space	4
 3663 0408 00       		.ascii	"\000"
 3664 0409 00000000 		.space	7
 3664      000000
 3665 0410 4D495343 		.ascii	"MISC\000"
 3665      00
 3666 0415 00000000 		.space	10
 3666      00000000 
 3666      0000
 3667 041f 00       		.space	1
 3668 0420 25       		.byte	37
 3669 0421 000000   		.space	3
 3670 0424 01000000 		.word	1
 3671 0428 14       		.byte	20
 3672 0429 000000   		.space	3
 3673 042c 01000000 		.word	1
 3674 0430 7C587C00 		.ascii	"|X|\000"
 3675 0434 00000000 		.space	4
 3676 0438 329C00   		.ascii	"2\234\000"
 3677 043b 00000000 		.space	5
 3677      00
 3678 0440 25       		.byte	37
 3679 0441 000000   		.space	3
 3680 0444 02000000 		.word	2
 3681 0448 14       		.byte	20
 3682 0449 000000   		.space	3
 3683 044c 02000000 		.word	2
 3684 0450 524E4400 		.ascii	"RND\000"
 3685 0454 00000000 		.space	4
 3686 0458 4C6F67BA 		.ascii	"Log\272\000"
 3686      00
 3687 045d 000000   		.space	3
 3688 0460 26       		.byte	38
 3689 0461 000000   		.space	3
 3690 0464 01000000 		.word	1
 3691 0468 15       		.byte	21
 3692 0469 000000   		.space	3
 3693 046c 02000000 		.word	2
 3694 0470 49506172 		.ascii	"IPart\000"
 3694      7400
 3695 0476 0000     		.space	2
 3696 0478 4C6F678B 		.ascii	"Log\213\000"
 3696      00
 3697 047d 000000   		.space	3
 3698 0480 26       		.byte	38
 3699 0481 000000   		.space	3
 3700 0484 02000000 		.word	2
 3701 0488 16       		.byte	22
 3702 0489 000000   		.space	3
 3703 048c 02000000 		.word	2
 3704 0490 46506172 		.ascii	"FPart\000"
 3704      7400
 3705 0496 0000     		.space	2
 3706 0498 7C7C656C 		.ascii	"||el\000"
 3706      00
 3707 049d 000000   		.space	3
 3708 04a0 2C       		.byte	44
ARM GAS  /tmp/cc2wwr9y.s 			page 95


 3709 04a1 000000   		.space	3
 3710 04a4 FFFFFFFF 		.word	-1
 3711 04a8 22       		.byte	34
 3712 04a9 000000   		.space	3
 3713 04ac 02000000 		.word	2
 3714 04b0 2D2D0D00 		.ascii	"--\015\000"
 3715 04b4 00000000 		.space	4
 3716 04b8 832500   		.ascii	"\203%\000"
 3717 04bb 00000000 		.space	5
 3717      00
 3718 04c0 2D       		.byte	45
 3719 04c1 000000   		.space	3
 3720 04c4 FFFFFFFF 		.word	-1
 3721 04c8 2E       		.byte	46
 3722 04c9 000000   		.space	3
 3723 04cc FFFFFFFF 		.word	-1
 3724 04d0 43505800 		.ascii	"CPX\000"
 3725 04d4 00000000 		.space	4
 3726 04d8 00       		.ascii	"\000"
 3727 04d9 00000000 		.space	7
 3727      000000
 3728 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 3728      204B6579 
 3728      00
 3729 04e9 00000000 		.space	6
 3729      0000
 3730 04ef 00       		.space	1
 3731 04f0 0D       		.byte	13
 3732 04f1 000000   		.space	3
 3733 04f4 01000000 		.word	1
 3734 04f8 2E       		.byte	46
 3735 04f9 000000   		.space	3
 3736 04fc FFFFFFFF 		.word	-1
 3737 0500 53686F77 		.ascii	"Show\016\000"
 3737      0E00
 3738 0506 0000     		.space	2
 3739 0508 00       		.ascii	"\000"
 3740 0509 00000000 		.space	7
 3740      000000
 3741 0510 0D       		.byte	13
 3742 0511 000000   		.space	3
 3743 0514 02000000 		.word	2
 3744 0518 2E       		.byte	46
 3745 0519 000000   		.space	3
 3746 051c FFFFFFFF 		.word	-1
 3747 0520 53686F77 		.ascii	"Show\015\000"
 3747      0D00
 3748 0526 0000     		.space	2
 3749 0528 00       		.ascii	"\000"
 3750 0529 00000000 		.space	7
 3750      000000
 3751 0530 0D       		.byte	13
 3752 0531 000000   		.space	3
 3753 0534 03000000 		.word	3
 3754 0538 2E       		.byte	46
 3755 0539 000000   		.space	3
 3756 053c FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc2wwr9y.s 			page 96


 3757 0540 78173F00 		.ascii	"x\027?\000"
 3758 0544 00000000 		.space	4
 3759 0548 00       		.ascii	"\000"
 3760 0549 00000000 		.space	7
 3760      000000
 3761 0550 2E       		.byte	46
 3762 0551 000000   		.space	3
 3763 0554 FFFFFFFF 		.word	-1
 3764 0558 2E       		.byte	46
 3765 0559 000000   		.space	3
 3766 055c FFFFFFFF 		.word	-1
 3767 0560 00       		.ascii	"\000"
 3768 0561 00000000 		.space	7
 3768      000000
 3769 0568 00       		.ascii	"\000"
 3770 0569 00000000 		.space	7
 3770      000000
 3771 0570 2C       		.byte	44
 3772 0571 000000   		.space	3
 3773 0574 FFFFFFFF 		.word	-1
 3774 0578 2E       		.byte	46
 3775 0579 000000   		.space	3
 3776 057c FFFFFFFF 		.word	-1
 3777 0580 2D2D0D00 		.ascii	"--\015\000"
 3778 0584 00000000 		.space	4
 3779 0588 00       		.ascii	"\000"
 3780 0589 00000000 		.space	7
 3780      000000
 3781 0590 2D       		.byte	45
 3782 0591 000000   		.space	3
 3783 0594 FFFFFFFF 		.word	-1
 3784 0598 2E       		.byte	46
 3785 0599 000000   		.space	3
 3786 059c FFFFFFFF 		.word	-1
 3787 05a0 43505800 		.ascii	"CPX\000"
 3788 05a4 00000000 		.space	4
 3789 05a8 00       		.ascii	"\000"
 3790 05a9 00000000 		.space	7
 3790      000000
 3791 05b0 50726F67 		.ascii	"Program\000"
 3791      72616D00 
 3792 05b8 00000000 		.space	7
 3792      000000
 3793 05bf 00       		.space	1
 3794 05c0 27       		.byte	39
 3795 05c1 000000   		.space	3
 3796 05c4 01000000 		.word	1
 3797 05c8 28       		.byte	40
 3798 05c9 000000   		.space	3
 3799 05cc 01000000 		.word	1
 3800 05d0 4C424C00 		.ascii	"LBL\000"
 3801 05d4 00000000 		.space	4
 3802 05d8 44534500 		.ascii	"DSE\000"
 3803 05dc 00000000 		.space	4
 3804 05e0 27       		.byte	39
 3805 05e1 000000   		.space	3
 3806 05e4 02000000 		.word	2
ARM GAS  /tmp/cc2wwr9y.s 			page 97


 3807 05e8 28       		.byte	40
 3808 05e9 000000   		.space	3
 3809 05ec 02000000 		.word	2
 3810 05f0 52544E00 		.ascii	"RTN\000"
 3811 05f4 00000000 		.space	4
 3812 05f8 49534700 		.ascii	"ISG\000"
 3813 05fc 00000000 		.space	4
 3814 0600 25       		.byte	37
 3815 0601 000000   		.space	3
 3816 0604 03000000 		.word	3
 3817 0608 2E       		.byte	46
 3818 0609 000000   		.space	3
 3819 060c FFFFFFFF 		.word	-1
 3820 0610 50617573 		.ascii	"Pause\000"
 3820      6500
 3821 0616 0000     		.space	2
 3822 0618 00       		.ascii	"\000"
 3823 0619 00000000 		.space	7
 3823      000000
 3824 0620 12       		.byte	18
 3825 0621 000000   		.space	3
 3826 0624 03000000 		.word	3
 3827 0628 2E       		.byte	46
 3828 0629 000000   		.space	3
 3829 062c FFFFFFFF 		.word	-1
 3830 0630 47544F00 		.ascii	"GTO\000"
 3831 0634 00000000 		.space	4
 3832 0638 00       		.ascii	"\000"
 3833 0639 00000000 		.space	7
 3833      000000
 3834 0640 2C       		.byte	44
 3835 0641 000000   		.space	3
 3836 0644 FFFFFFFF 		.word	-1
 3837 0648 2E       		.byte	46
 3838 0649 000000   		.space	3
 3839 064c FFFFFFFF 		.word	-1
 3840 0650 2D2D0D00 		.ascii	"--\015\000"
 3841 0654 00000000 		.space	4
 3842 0658 00       		.ascii	"\000"
 3843 0659 00000000 		.space	7
 3843      000000
 3844 0660 2D       		.byte	45
 3845 0661 000000   		.space	3
 3846 0664 FFFFFFFF 		.word	-1
 3847 0668 2E       		.byte	46
 3848 0669 000000   		.space	3
 3849 066c FFFFFFFF 		.word	-1
 3850 0670 43505800 		.ascii	"CPX\000"
 3851 0674 00000000 		.space	4
 3852 0678 00       		.ascii	"\000"
 3853 0679 00000000 		.space	7
 3853      000000
 3854 0680 53657475 		.ascii	"Setup 1\000"
 3854      70203100 
 3855 0688 00000000 		.space	7
 3855      000000
 3856 068f 00       		.space	1
ARM GAS  /tmp/cc2wwr9y.s 			page 98


 3857 0690 30       		.byte	48
 3858 0691 000000   		.space	3
 3859 0694 00000000 		.word	0
 3860 0698 2E       		.byte	46
 3861 0699 000000   		.space	3
 3862 069c FFFFFFFF 		.word	-1
 3863 06a0 53797374 		.ascii	"System\000"
 3863      656D00
 3864 06a7 00       		.space	1
 3865 06a8 00       		.ascii	"\000"
 3866 06a9 00000000 		.space	7
 3866      000000
 3867 06b0 31       		.byte	49
 3868 06b1 000000   		.space	3
 3869 06b4 09000000 		.word	9
 3870 06b8 2E       		.byte	46
 3871 06b9 000000   		.space	3
 3872 06bc FFFFFFFF 		.word	-1
 3873 06c0 48454C50 		.ascii	"HELP\000"
 3873      00
 3874 06c5 000000   		.space	3
 3875 06c8 00       		.ascii	"\000"
 3876 06c9 00000000 		.space	7
 3876      000000
 3877 06d0 31       		.byte	49
 3878 06d1 000000   		.space	3
 3879 06d4 02000000 		.word	2
 3880 06d8 31       		.byte	49
 3881 06d9 000000   		.space	3
 3882 06dc 06000000 		.word	6
 3883 06e0 4F6E5354 		.ascii	"OnSTO\000"
 3883      4F00
 3884 06e6 0000     		.space	2
 3885 06e8 53765241 		.ascii	"SvRAM\000"
 3885      4D00
 3886 06ee 0000     		.space	2
 3887 06f0 31       		.byte	49
 3888 06f1 000000   		.space	3
 3889 06f4 03000000 		.word	3
 3890 06f8 31       		.byte	49
 3891 06f9 000000   		.space	3
 3892 06fc 07000000 		.word	7
 3893 0700 4F6E5243 		.ascii	"OnRCL\000"
 3893      4C00
 3894 0706 0000     		.space	2
 3895 0708 4C645241 		.ascii	"LdRAM\000"
 3895      4D00
 3896 070e 0000     		.space	2
 3897 0710 2C       		.byte	44
 3898 0711 000000   		.space	3
 3899 0714 FFFFFFFF 		.word	-1
 3900 0718 2E       		.byte	46
 3901 0719 000000   		.space	3
 3902 071c FFFFFFFF 		.word	-1
 3903 0720 2D2D0D00 		.ascii	"--\015\000"
 3904 0724 00000000 		.space	4
 3905 0728 00       		.ascii	"\000"
ARM GAS  /tmp/cc2wwr9y.s 			page 99


 3906 0729 00000000 		.space	7
 3906      000000
 3907 0730 2D       		.byte	45
 3908 0731 000000   		.space	3
 3909 0734 FFFFFFFF 		.word	-1
 3910 0738 2E       		.byte	46
 3911 0739 000000   		.space	3
 3912 073c FFFFFFFF 		.word	-1
 3913 0740 43505800 		.ascii	"CPX\000"
 3914 0744 00000000 		.space	4
 3915 0748 00       		.ascii	"\000"
 3916 0749 00000000 		.space	7
 3916      000000
 3917 0750 4172726F 		.ascii	"Arrow\000"
 3917      7700
 3918 0756 00000000 		.space	9
 3918      00000000 
 3918      00
 3919 075f 00       		.space	1
 3920 0760 0E       		.byte	14
 3921 0761 000000   		.space	3
 3922 0764 01000000 		.word	1
 3923 0768 06       		.byte	6
 3924 0769 000000   		.space	3
 3925 076c 02000000 		.word	2
 3926 0770 42696E00 		.ascii	"Bin\000"
 3927 0774 00000000 		.space	4
 3928 0778 44454700 		.ascii	"DEG\000"
 3929 077c 00000000 		.space	4
 3930 0780 0E       		.byte	14
 3931 0781 000000   		.space	3
 3932 0784 02000000 		.word	2
 3933 0788 07       		.byte	7
 3934 0789 000000   		.space	3
 3935 078c 02000000 		.word	2
 3936 0790 4F637400 		.ascii	"Oct\000"
 3937 0794 00000000 		.space	4
 3938 0798 52414400 		.ascii	"RAD\000"
 3939 079c 00000000 		.space	4
 3940 07a0 0F       		.byte	15
 3941 07a1 000000   		.space	3
 3942 07a4 01000000 		.word	1
 3943 07a8 08       		.byte	8
 3944 07a9 000000   		.space	3
 3945 07ac 02000000 		.word	2
 3946 07b0 44656300 		.ascii	"Dec\000"
 3947 07b4 00000000 		.space	4
 3948 07b8 47726164 		.ascii	"Grad\000"
 3948      00
 3949 07bd 000000   		.space	3
 3950 07c0 0F       		.byte	15
 3951 07c1 000000   		.space	3
 3952 07c4 02000000 		.word	2
 3953 07c8 06       		.byte	6
 3954 07c9 000000   		.space	3
 3955 07cc 01000000 		.word	1
 3956 07d0 48657800 		.ascii	"Hex\000"
ARM GAS  /tmp/cc2wwr9y.s 			page 100


 3957 07d4 00000000 		.space	4
 3958 07d8 32484D53 		.ascii	"2HMS\000"
 3958      00
 3959 07dd 000000   		.space	3
 3960 07e0 2C       		.byte	44
 3961 07e1 000000   		.space	3
 3962 07e4 FFFFFFFF 		.word	-1
 3963 07e8 07       		.byte	7
 3964 07e9 000000   		.space	3
 3965 07ec 01000000 		.word	1
 3966 07f0 2D2D0D00 		.ascii	"--\015\000"
 3967 07f4 00000000 		.space	4
 3968 07f8 484D5332 		.ascii	"HMS2\000"
 3968      00
 3969 07fd 000000   		.space	3
 3970 0800 2D       		.byte	45
 3971 0801 000000   		.space	3
 3972 0804 FFFFFFFF 		.word	-1
 3973 0808 2E       		.byte	46
 3974 0809 000000   		.space	3
 3975 080c FFFFFFFF 		.word	-1
 3976 0810 43505800 		.ascii	"CPX\000"
 3977 0814 00000000 		.space	4
 3978 0818 00       		.ascii	"\000"
 3979 0819 00000000 		.space	7
 3979      000000
 3980 0820 466C6167 		.ascii	"Flags\000"
 3980      7300
 3981 0826 00000000 		.space	9
 3981      00000000 
 3981      00
 3982 082f 00       		.space	1
 3983 0830 1E       		.byte	30
 3984 0831 000000   		.space	3
 3985 0834 01000000 		.word	1
 3986 0838 2E       		.byte	46
 3987 0839 000000   		.space	3
 3988 083c FFFFFFFF 		.word	-1
 3989 0840 53465F00 		.ascii	"SF_\000"
 3990 0844 00000000 		.space	4
 3991 0848 00       		.ascii	"\000"
 3992 0849 00000000 		.space	7
 3992      000000
 3993 0850 1E       		.byte	30
 3994 0851 000000   		.space	3
 3995 0854 02000000 		.word	2
 3996 0858 2E       		.byte	46
 3997 0859 000000   		.space	3
 3998 085c FFFFFFFF 		.word	-1
 3999 0860 43465F00 		.ascii	"CF_\000"
 4000 0864 00000000 		.space	4
 4001 0868 00       		.ascii	"\000"
 4002 0869 00000000 		.space	7
 4002      000000
 4003 0870 1F       		.byte	31
 4004 0871 000000   		.space	3
 4005 0874 01000000 		.word	1
ARM GAS  /tmp/cc2wwr9y.s 			page 101


 4006 0878 2E       		.byte	46
 4007 0879 000000   		.space	3
 4008 087c FFFFFFFF 		.word	-1
 4009 0880 783D3F00 		.ascii	"x=?\000"
 4010 0884 00000000 		.space	4
 4011 0888 00       		.ascii	"\000"
 4012 0889 00000000 		.space	7
 4012      000000
 4013 0890 1F       		.byte	31
 4014 0891 000000   		.space	3
 4015 0894 02000000 		.word	2
 4016 0898 2E       		.byte	46
 4017 0899 000000   		.space	3
 4018 089c FFFFFFFF 		.word	-1
 4019 08a0 780B3F00 		.ascii	"x\013?\000"
 4020 08a4 00000000 		.space	4
 4021 08a8 00       		.ascii	"\000"
 4022 08a9 00000000 		.space	7
 4022      000000
 4023 08b0 2C       		.byte	44
 4024 08b1 000000   		.space	3
 4025 08b4 FFFFFFFF 		.word	-1
 4026 08b8 2E       		.byte	46
 4027 08b9 000000   		.space	3
 4028 08bc FFFFFFFF 		.word	-1
 4029 08c0 2D2D0D00 		.ascii	"--\015\000"
 4030 08c4 00000000 		.space	4
 4031 08c8 00       		.ascii	"\000"
 4032 08c9 00000000 		.space	7
 4032      000000
 4033 08d0 2D       		.byte	45
 4034 08d1 000000   		.space	3
 4035 08d4 FFFFFFFF 		.word	-1
 4036 08d8 2E       		.byte	46
 4037 08d9 000000   		.space	3
 4038 08dc FFFFFFFF 		.word	-1
 4039 08e0 43505800 		.ascii	"CPX\000"
 4040 08e4 00000000 		.space	4
 4041 08e8 00       		.ascii	"\000"
 4042 08e9 00000000 		.space	7
 4042      000000
 4043 08f0 50726F62 		.ascii	"Probability\000"
 4043      6162696C 
 4043      69747900 
 4044 08fc 000000   		.space	3
 4045 08ff 00       		.space	1
 4046 0900 18       		.byte	24
 4047 0901 000000   		.space	3
 4048 0904 03000000 		.word	3
 4049 0908 19       		.byte	25
 4050 0909 000000   		.space	3
 4051 090c 01000000 		.word	1
 4052 0910 46616374 		.ascii	"Fact!\000"
 4052      2100
 4053 0916 0000     		.space	2
 4054 0918 9400     		.ascii	"\224\000"
 4055 091a 00000000 		.space	6
ARM GAS  /tmp/cc2wwr9y.s 			page 102


 4055      0000
 4056 0920 18       		.byte	24
 4057 0921 000000   		.space	3
 4058 0924 01000000 		.word	1
 4059 0928 19       		.byte	25
 4060 0929 000000   		.space	3
 4061 092c 02000000 		.word	2
 4062 0930 43792C78 		.ascii	"Cy,x\000"
 4062      00
 4063 0935 000000   		.space	3
 4064 0938 949D00   		.ascii	"\224\235\000"
 4065 093b 00000000 		.space	5
 4065      00
 4066 0940 18       		.byte	24
 4067 0941 000000   		.space	3
 4068 0944 02000000 		.word	2
 4069 0948 2E       		.byte	46
 4070 0949 000000   		.space	3
 4071 094c FFFFFFFF 		.word	-1
 4072 0950 50792C78 		.ascii	"Py,x\000"
 4072      00
 4073 0955 000000   		.space	3
 4074 0958 00       		.ascii	"\000"
 4075 0959 00000000 		.space	7
 4075      000000
 4076 0960 08       		.byte	8
 4077 0961 000000   		.space	3
 4078 0964 01000000 		.word	1
 4079 0968 2E       		.byte	46
 4080 0969 000000   		.space	3
 4081 096c FFFFFFFF 		.word	-1
 4082 0970 52414E23 		.ascii	"RAN#\000"
 4082      00
 4083 0975 000000   		.space	3
 4084 0978 00       		.ascii	"\000"
 4085 0979 00000000 		.space	7
 4085      000000
 4086 0980 2C       		.byte	44
 4087 0981 000000   		.space	3
 4088 0984 FFFFFFFF 		.word	-1
 4089 0988 2E       		.byte	46
 4090 0989 000000   		.space	3
 4091 098c FFFFFFFF 		.word	-1
 4092 0990 2D2D0D00 		.ascii	"--\015\000"
 4093 0994 00000000 		.space	4
 4094 0998 00       		.ascii	"\000"
 4095 0999 00000000 		.space	7
 4095      000000
 4096 09a0 2D       		.byte	45
 4097 09a1 000000   		.space	3
 4098 09a4 FFFFFFFF 		.word	-1
 4099 09a8 2E       		.byte	46
 4100 09a9 000000   		.space	3
 4101 09ac FFFFFFFF 		.word	-1
 4102 09b0 43505800 		.ascii	"CPX\000"
 4103 09b4 00000000 		.space	4
 4104 09b8 00       		.ascii	"\000"
ARM GAS  /tmp/cc2wwr9y.s 			page 103


 4105 09b9 00000000 		.space	7
 4105      000000
 4106 09c0 53746174 		.ascii	"Statistics\000"
 4106      69737469 
 4106      637300
 4107 09cb 00000000 		.space	4
 4108 09cf 00       		.space	1
 4109 09d0 1A       		.byte	26
 4110 09d1 000000   		.space	3
 4111 09d4 01000000 		.word	1
 4112 09d8 1B       		.byte	27
 4113 09d9 000000   		.space	3
 4114 09dc 03000000 		.word	3
 4115 09e0 58626172 		.ascii	"Xbar\000"
 4115      00
 4116 09e5 000000   		.space	3
 4117 09e8 53554D53 		.ascii	"SUMS\000"
 4117      00
 4118 09ed 000000   		.space	3
 4119 09f0 1B       		.byte	27
 4120 09f1 000000   		.space	3
 4121 09f4 01000000 		.word	1
 4122 09f8 2E       		.byte	46
 4123 09f9 000000   		.space	3
 4124 09fc FFFFFFFF 		.word	-1
 4125 0a00 59686174 		.ascii	"Yhat\000"
 4125      00
 4126 0a05 000000   		.space	3
 4127 0a08 00       		.ascii	"\000"
 4128 0a09 00000000 		.space	7
 4128      000000
 4129 0a10 1A       		.byte	26
 4130 0a11 000000   		.space	3
 4131 0a14 02000000 		.word	2
 4132 0a18 2E       		.byte	46
 4133 0a19 000000   		.space	3
 4134 0a1c FFFFFFFF 		.word	-1
 4135 0a20 7300     		.ascii	"s\000"
 4136 0a22 00000000 		.space	6
 4136      0000
 4137 0a28 00       		.ascii	"\000"
 4138 0a29 00000000 		.space	7
 4138      000000
 4139 0a30 1B       		.byte	27
 4140 0a31 000000   		.space	3
 4141 0a34 02000000 		.word	2
 4142 0a38 2E       		.byte	46
 4143 0a39 000000   		.space	3
 4144 0a3c FFFFFFFF 		.word	-1
 4145 0a40 7200     		.ascii	"r\000"
 4146 0a42 00000000 		.space	6
 4146      0000
 4147 0a48 00       		.ascii	"\000"
 4148 0a49 00000000 		.space	7
 4148      000000
 4149 0a50 2C       		.byte	44
 4150 0a51 000000   		.space	3
ARM GAS  /tmp/cc2wwr9y.s 			page 104


 4151 0a54 FFFFFFFF 		.word	-1
 4152 0a58 2E       		.byte	46
 4153 0a59 000000   		.space	3
 4154 0a5c FFFFFFFF 		.word	-1
 4155 0a60 2D2D0D00 		.ascii	"--\015\000"
 4156 0a64 00000000 		.space	4
 4157 0a68 00       		.ascii	"\000"
 4158 0a69 00000000 		.space	7
 4158      000000
 4159 0a70 2D       		.byte	45
 4160 0a71 000000   		.space	3
 4161 0a74 FFFFFFFF 		.word	-1
 4162 0a78 2E       		.byte	46
 4163 0a79 000000   		.space	3
 4164 0a7c FFFFFFFF 		.word	-1
 4165 0a80 43505800 		.ascii	"CPX\000"
 4166 0a84 00000000 		.space	4
 4167 0a88 00       		.ascii	"\000"
 4168 0a89 00000000 		.space	7
 4168      000000
 4169 0a90 53657475 		.ascii	"Setup 2\000"
 4169      70203200 
 4170 0a98 00000000 		.space	7
 4170      000000
 4171 0a9f 00       		.space	1
 4172 0aa0 31       		.byte	49
 4173 0aa1 000000   		.space	3
 4174 0aa4 04000000 		.word	4
 4175 0aa8 2E       		.byte	46
 4176 0aa9 000000   		.space	3
 4177 0aac FFFFFFFF 		.word	-1
 4178 0ab0 53764C49 		.ascii	"SvLIB\000"
 4178      4200
 4179 0ab6 0000     		.space	2
 4180 0ab8 00       		.ascii	"\000"
 4181 0ab9 00000000 		.space	7
 4181      000000
 4182 0ac0 31       		.byte	49
 4183 0ac1 000000   		.space	3
 4184 0ac4 05000000 		.word	5
 4185 0ac8 2E       		.byte	46
 4186 0ac9 000000   		.space	3
 4187 0acc FFFFFFFF 		.word	-1
 4188 0ad0 4C644C49 		.ascii	"LdLIB\000"
 4188      4200
 4189 0ad6 0000     		.space	2
 4190 0ad8 00       		.ascii	"\000"
 4191 0ad9 00000000 		.space	7
 4191      000000
 4192 0ae0 31       		.byte	49
 4193 0ae1 000000   		.space	3
 4194 0ae4 0A000000 		.word	10
 4195 0ae8 2E       		.byte	46
 4196 0ae9 000000   		.space	3
 4197 0aec FFFFFFFF 		.word	-1
 4198 0af0 53764350 		.ascii	"SvCPRG\000"
 4198      524700
ARM GAS  /tmp/cc2wwr9y.s 			page 105


 4199 0af7 00       		.space	1
 4200 0af8 00       		.ascii	"\000"
 4201 0af9 00000000 		.space	7
 4201      000000
 4202 0b00 31       		.byte	49
 4203 0b01 000000   		.space	3
 4204 0b04 08000000 		.word	8
 4205 0b08 2E       		.byte	46
 4206 0b09 000000   		.space	3
 4207 0b0c FFFFFFFF 		.word	-1
 4208 0b10 4C645052 		.ascii	"LdPRG\000"
 4208      4700
 4209 0b16 0000     		.space	2
 4210 0b18 00       		.ascii	"\000"
 4211 0b19 00000000 		.space	7
 4211      000000
 4212 0b20 2C       		.byte	44
 4213 0b21 000000   		.space	3
 4214 0b24 FFFFFFFF 		.word	-1
 4215 0b28 2E       		.byte	46
 4216 0b29 000000   		.space	3
 4217 0b2c FFFFFFFF 		.word	-1
 4218 0b30 2D2D0D00 		.ascii	"--\015\000"
 4219 0b34 00000000 		.space	4
 4220 0b38 00       		.ascii	"\000"
 4221 0b39 00000000 		.space	7
 4221      000000
 4222 0b40 2D       		.byte	45
 4223 0b41 000000   		.space	3
 4224 0b44 FFFFFFFF 		.word	-1
 4225 0b48 2E       		.byte	46
 4226 0b49 000000   		.space	3
 4227 0b4c FFFFFFFF 		.word	-1
 4228 0b50 43505800 		.ascii	"CPX\000"
 4229 0b54 00000000 		.space	4
 4230 0b58 00       		.ascii	"\000"
 4231 0b59 00000000 		.space	7
 4231      000000
 4232 0b60 496E7465 		.ascii	"Integ/Sum/Prod\000"
 4232      672F5375 
 4232      6D2F5072 
 4232      6F6400
 4233 0b6f 00       		.space	1
 4234 0b70 20       		.byte	32
 4235 0b71 000000   		.space	3
 4236 0b74 01000000 		.word	1
 4237 0b78 2E       		.byte	46
 4238 0b79 000000   		.space	3
 4239 0b7c FFFFFFFF 		.word	-1
 4240 0b80 534C5600 		.ascii	"SLV\000"
 4241 0b84 00000000 		.space	4
 4242 0b88 00       		.ascii	"\000"
 4243 0b89 00000000 		.space	7
 4243      000000
 4244 0b90 20       		.byte	32
 4245 0b91 000000   		.space	3
 4246 0b94 02000000 		.word	2
ARM GAS  /tmp/cc2wwr9y.s 			page 106


 4247 0b98 2E       		.byte	46
 4248 0b99 000000   		.space	3
 4249 0b9c FFFFFFFF 		.word	-1
 4250 0ba0 04206478 		.ascii	"\004 dx\000"
 4250      00
 4251 0ba5 000000   		.space	3
 4252 0ba8 00       		.ascii	"\000"
 4253 0ba9 00000000 		.space	7
 4253      000000
 4254 0bb0 21       		.byte	33
 4255 0bb1 000000   		.space	3
 4256 0bb4 01000000 		.word	1
 4257 0bb8 2E       		.byte	46
 4258 0bb9 000000   		.space	3
 4259 0bbc FFFFFFFF 		.word	-1
 4260 0bc0 53554D00 		.ascii	"SUM\000"
 4261 0bc4 00000000 		.space	4
 4262 0bc8 00       		.ascii	"\000"
 4263 0bc9 00000000 		.space	7
 4263      000000
 4264 0bd0 21       		.byte	33
 4265 0bd1 000000   		.space	3
 4266 0bd4 02000000 		.word	2
 4267 0bd8 2E       		.byte	46
 4268 0bd9 000000   		.space	3
 4269 0bdc FFFFFFFF 		.word	-1
 4270 0be0 50524F44 		.ascii	"PROD\000"
 4270      00
 4271 0be5 000000   		.space	3
 4272 0be8 00       		.ascii	"\000"
 4273 0be9 00000000 		.space	7
 4273      000000
 4274 0bf0 2C       		.byte	44
 4275 0bf1 000000   		.space	3
 4276 0bf4 FFFFFFFF 		.word	-1
 4277 0bf8 2E       		.byte	46
 4278 0bf9 000000   		.space	3
 4279 0bfc FFFFFFFF 		.word	-1
 4280 0c00 2D2D0D00 		.ascii	"--\015\000"
 4281 0c04 00000000 		.space	4
 4282 0c08 00       		.ascii	"\000"
 4283 0c09 00000000 		.space	7
 4283      000000
 4284 0c10 2D       		.byte	45
 4285 0c11 000000   		.space	3
 4286 0c14 FFFFFFFF 		.word	-1
 4287 0c18 2E       		.byte	46
 4288 0c19 000000   		.space	3
 4289 0c1c FFFFFFFF 		.word	-1
 4290 0c20 43505800 		.ascii	"CPX\000"
 4291 0c24 00000000 		.space	4
 4292 0c28 00       		.ascii	"\000"
 4293 0c29 00000000 		.space	7
 4293      000000
 4294              		.section	.rodata.mapping_alpha.10869,"a"
 4295              		.align	2
 4296              		.set	.LANCHOR11,. + 0
ARM GAS  /tmp/cc2wwr9y.s 			page 107


 4299              	mapping_alpha.10869:
 4300 0000 63       		.byte	99
 4301 0001 000000   		.space	3
 4302 0004 FFFFFFFF 		.word	-1
 4303 0008 00       		.byte	0
 4304 0009 000000   		.space	3
 4305 000c FFFFFFFF 		.word	-1
 4306 0010 01       		.byte	1
 4307 0011 000000   		.space	3
 4308 0014 FFFFFFFF 		.word	-1
 4309 0018 02       		.byte	2
 4310 0019 000000   		.space	3
 4311 001c FFFFFFFF 		.word	-1
 4312 0020 03       		.byte	3
 4313 0021 000000   		.space	3
 4314 0024 FFFFFFFF 		.word	-1
 4315 0028 04       		.byte	4
 4316 0029 000000   		.space	3
 4317 002c FFFFFFFF 		.word	-1
 4318 0030 05       		.byte	5
 4319 0031 000000   		.space	3
 4320 0034 FFFFFFFF 		.word	-1
 4321 0038 06       		.byte	6
 4322 0039 000000   		.space	3
 4323 003c FFFFFFFF 		.word	-1
 4324 0040 07       		.byte	7
 4325 0041 000000   		.space	3
 4326 0044 FFFFFFFF 		.word	-1
 4327 0048 08       		.byte	8
 4328 0049 000000   		.space	3
 4329 004c FFFFFFFF 		.word	-1
 4330 0050 09       		.byte	9
 4331 0051 000000   		.space	3
 4332 0054 FFFFFFFF 		.word	-1
 4333 0058 0A       		.byte	10
 4334 0059 000000   		.space	3
 4335 005c FFFFFFFF 		.word	-1
 4336 0060 0B       		.byte	11
 4337 0061 000000   		.space	3
 4338 0064 FFFFFFFF 		.word	-1
 4339 0068 0C       		.byte	12
 4340 0069 000000   		.space	3
 4341 006c FFFFFFFF 		.word	-1
 4342 0070 0D       		.byte	13
 4343 0071 000000   		.space	3
 4344 0074 FFFFFFFF 		.word	-1
 4345 0078 0E       		.byte	14
 4346 0079 000000   		.space	3
 4347 007c FFFFFFFF 		.word	-1
 4348 0080 0F       		.byte	15
 4349 0081 000000   		.space	3
 4350 0084 FFFFFFFF 		.word	-1
 4351 0088 10       		.byte	16
 4352 0089 000000   		.space	3
 4353 008c FFFFFFFF 		.word	-1
 4354 0090 12       		.byte	18
 4355 0091 000000   		.space	3
ARM GAS  /tmp/cc2wwr9y.s 			page 108


 4356 0094 FFFFFFFF 		.word	-1
 4357 0098 13       		.byte	19
 4358 0099 000000   		.space	3
 4359 009c FFFFFFFF 		.word	-1
 4360 00a0 14       		.byte	20
 4361 00a1 000000   		.space	3
 4362 00a4 FFFFFFFF 		.word	-1
 4363 00a8 15       		.byte	21
 4364 00a9 000000   		.space	3
 4365 00ac FFFFFFFF 		.word	-1
 4366 00b0 16       		.byte	22
 4367 00b1 000000   		.space	3
 4368 00b4 FFFFFFFF 		.word	-1
 4369 00b8 18       		.byte	24
 4370 00b9 000000   		.space	3
 4371 00bc FFFFFFFF 		.word	-1
 4372 00c0 19       		.byte	25
 4373 00c1 000000   		.space	3
 4374 00c4 FFFFFFFF 		.word	-1
 4375 00c8 1A       		.byte	26
 4376 00c9 000000   		.space	3
 4377 00cc FFFFFFFF 		.word	-1
 4378 00d0 1B       		.byte	27
 4379 00d1 000000   		.space	3
 4380 00d4 FFFFFFFF 		.word	-1
 4381 00d8 1C       		.byte	28
 4382 00d9 000000   		.space	3
 4383 00dc FFFFFFFF 		.word	-1
 4384 00e0 1E       		.byte	30
 4385 00e1 000000   		.space	3
 4386 00e4 FFFFFFFF 		.word	-1
 4387 00e8 1F       		.byte	31
 4388 00e9 000000   		.space	3
 4389 00ec FFFFFFFF 		.word	-1
 4390 00f0 20       		.byte	32
 4391 00f1 000000   		.space	3
 4392 00f4 FFFFFFFF 		.word	-1
 4393 00f8 21       		.byte	33
 4394 00f9 000000   		.space	3
 4395 00fc FFFFFFFF 		.word	-1
 4396 0100 22       		.byte	34
 4397 0101 000000   		.space	3
 4398 0104 FFFFFFFF 		.word	-1
 4399 0108 24       		.byte	36
 4400 0109 000000   		.space	3
 4401 010c FFFFFFFF 		.word	-1
 4402 0110 25       		.byte	37
 4403 0111 000000   		.space	3
 4404 0114 FFFFFFFF 		.word	-1
 4405 0118 26       		.byte	38
 4406 0119 000000   		.space	3
 4407 011c FFFFFFFF 		.word	-1
 4408 0120 27       		.byte	39
 4409 0121 000000   		.space	3
 4410 0124 FFFFFFFF 		.word	-1
 4411 0128 28       		.byte	40
 4412 0129 000000   		.space	3
ARM GAS  /tmp/cc2wwr9y.s 			page 109


 4413 012c FFFFFFFF 		.word	-1
 4414 0130 2E       		.byte	46
 4415 0131 000000   		.space	3
 4416 0134 FFFFFFFF 		.word	-1
 4417 0138 2E       		.byte	46
 4418 0139 000000   		.space	3
 4419 013c FFFFFFFF 		.word	-1
 4420 0140 2E       		.byte	46
 4421 0141 000000   		.space	3
 4422 0144 FFFFFFFF 		.word	-1
 4423 0148 2E       		.byte	46
 4424 0149 000000   		.space	3
 4425 014c FFFFFFFF 		.word	-1
 4426 0150 2C       		.byte	44
 4427 0151 000000   		.space	3
 4428 0154 FFFFFFFF 		.word	-1
 4429 0158 2E       		.byte	46
 4430 0159 000000   		.space	3
 4431 015c FFFFFFFF 		.word	-1
 4432 0160 2E       		.byte	46
 4433 0161 000000   		.space	3
 4434 0164 FFFFFFFF 		.word	-1
 4435 0168 2E       		.byte	46
 4436 0169 000000   		.space	3
 4437 016c FFFFFFFF 		.word	-1
 4438 0170 2E       		.byte	46
 4439 0171 000000   		.space	3
 4440 0174 FFFFFFFF 		.word	-1
 4441              		.section	.rodata.mapping_fshift.10867,"a"
 4442              		.align	2
 4443              		.set	.LANCHOR9,. + 0
 4446              	mapping_fshift.10867:
 4447 0000 63       		.byte	99
 4448 0001 000000   		.space	3
 4449 0004 FFFFFFFF 		.word	-1
 4450 0008 22       		.byte	34
 4451 0009 000000   		.space	3
 4452 000c 03000000 		.word	3
 4453 0010 15       		.byte	21
 4454 0011 000000   		.space	3
 4455 0014 01000000 		.word	1
 4456 0018 1C       		.byte	28
 4457 0019 000000   		.space	3
 4458 001c 02000000 		.word	2
 4459 0020 13       		.byte	19
 4460 0021 000000   		.space	3
 4461 0024 01000000 		.word	1
 4462 0028 12       		.byte	18
 4463 0029 000000   		.space	3
 4464 002c 01000000 		.word	1
 4465 0030 12       		.byte	18
 4466 0031 000000   		.space	3
 4467 0034 03000000 		.word	3
 4468 0038 2D       		.byte	45
 4469 0039 000000   		.space	3
 4470 003c 00000000 		.word	0
 4471 0040 22       		.byte	34
ARM GAS  /tmp/cc2wwr9y.s 			page 110


 4472 0041 000000   		.space	3
 4473 0044 01000000 		.word	1
 4474 0048 0F       		.byte	15
 4475 0049 000000   		.space	3
 4476 004c 03000000 		.word	3
 4477 0050 01       		.byte	1
 4478 0051 000000   		.space	3
 4479 0054 02000000 		.word	2
 4480 0058 02       		.byte	2
 4481 0059 000000   		.space	3
 4482 005c 02000000 		.word	2
 4483 0060 03       		.byte	3
 4484 0061 000000   		.space	3
 4485 0064 02000000 		.word	2
 4486 0068 0C       		.byte	12
 4487 0069 000000   		.space	3
 4488 006c 01000000 		.word	1
 4489 0070 31       		.byte	49
 4490 0071 000000   		.space	3
 4491 0074 01000000 		.word	1
 4492 0078 2F       		.byte	47
 4493 0079 000000   		.space	3
 4494 007c 04000000 		.word	4
 4495 0080 2F       		.byte	47
 4496 0081 000000   		.space	3
 4497 0084 02000000 		.word	2
 4498 0088 2F       		.byte	47
 4499 0089 000000   		.space	3
 4500 008c 01000000 		.word	1
 4501 0090 18       		.byte	24
 4502 0091 000000   		.space	3
 4503 0094 00000000 		.word	0
 4504 0098 20       		.byte	32
 4505 0099 000000   		.space	3
 4506 009c 01000000 		.word	1
 4507 00a0 2F       		.byte	47
 4508 00a1 000000   		.space	3
 4509 00a4 0E000000 		.word	14
 4510 00a8 1C       		.byte	28
 4511 00a9 000000   		.space	3
 4512 00ac 03000000 		.word	3
 4513 00b0 2F       		.byte	47
 4514 00b1 000000   		.space	3
 4515 00b4 0C000000 		.word	12
 4516 00b8 1E       		.byte	30
 4517 00b9 000000   		.space	3
 4518 00bc 00000000 		.word	0
 4519 00c0 2F       		.byte	47
 4520 00c1 000000   		.space	3
 4521 00c4 03000000 		.word	3
 4522 00c8 04       		.byte	4
 4523 00c9 000000   		.space	3
 4524 00cc 03000000 		.word	3
 4525 00d0 2F       		.byte	47
 4526 00d1 000000   		.space	3
 4527 00d4 0A000000 		.word	10
 4528 00d8 2F       		.byte	47
ARM GAS  /tmp/cc2wwr9y.s 			page 111


 4529 00d9 000000   		.space	3
 4530 00dc 0B000000 		.word	11
 4531 00e0 2A       		.byte	42
 4532 00e1 000000   		.space	3
 4533 00e4 00000000 		.word	0
 4534 00e8 2E       		.byte	46
 4535 00e9 000000   		.space	3
 4536 00ec 00000000 		.word	0
 4537 00f0 2E       		.byte	46
 4538 00f1 000000   		.space	3
 4539 00f4 00000000 		.word	0
 4540 00f8 20       		.byte	32
 4541 00f9 000000   		.space	3
 4542 00fc 03000000 		.word	3
 4543 0100 2E       		.byte	46
 4544 0101 000000   		.space	3
 4545 0104 00000000 		.word	0
 4546 0108 24       		.byte	36
 4547 0109 000000   		.space	3
 4548 010c 03000000 		.word	3
 4549 0110 2F       		.byte	47
 4550 0111 000000   		.space	3
 4551 0114 08000000 		.word	8
 4552 0118 0D       		.byte	13
 4553 0119 000000   		.space	3
 4554 011c 01000000 		.word	1
 4555 0120 27       		.byte	39
 4556 0121 000000   		.space	3
 4557 0124 03000000 		.word	3
 4558 0128 06       		.byte	6
 4559 0129 000000   		.space	3
 4560 012c 03000000 		.word	3
 4561 0130 2E       		.byte	46
 4562 0131 000000   		.space	3
 4563 0134 00000000 		.word	0
 4564 0138 2E       		.byte	46
 4565 0139 000000   		.space	3
 4566 013c 00000000 		.word	0
 4567 0140 2E       		.byte	46
 4568 0141 000000   		.space	3
 4569 0144 00000000 		.word	0
 4570 0148 2E       		.byte	46
 4571 0149 000000   		.space	3
 4572 014c 00000000 		.word	0
 4573 0150 2E       		.byte	46
 4574 0151 000000   		.space	3
 4575 0154 00000000 		.word	0
 4576 0158 2E       		.byte	46
 4577 0159 000000   		.space	3
 4578 015c 00000000 		.word	0
 4579 0160 2E       		.byte	46
 4580 0161 000000   		.space	3
 4581 0164 00000000 		.word	0
 4582 0168 2F       		.byte	47
 4583 0169 000000   		.space	3
 4584 016c FFFFFFFF 		.word	-1
 4585 0170 2F       		.byte	47
ARM GAS  /tmp/cc2wwr9y.s 			page 112


 4586 0171 000000   		.space	3
 4587 0174 05000000 		.word	5
 4588              		.section	.rodata.mapping_gshift.10868,"a"
 4589              		.align	2
 4590              		.set	.LANCHOR12,. + 0
 4593              	mapping_gshift.10868:
 4594 0000 63       		.byte	99
 4595 0001 000000   		.space	3
 4596 0004 FFFFFFFF 		.word	-1
 4597 0008 28       		.byte	40
 4598 0009 000000   		.space	3
 4599 000c 03000000 		.word	3
 4600 0010 16       		.byte	22
 4601 0011 000000   		.space	3
 4602 0014 01000000 		.word	1
 4603 0018 1C       		.byte	28
 4604 0019 000000   		.space	3
 4605 001c 01000000 		.word	1
 4606 0020 13       		.byte	19
 4607 0021 000000   		.space	3
 4608 0024 02000000 		.word	2
 4609 0028 2E       		.byte	46
 4610 0029 000000   		.space	3
 4611 002c 00000000 		.word	0
 4612 0030 2E       		.byte	46
 4613 0031 000000   		.space	3
 4614 0034 00000000 		.word	0
 4615 0038 2E       		.byte	46
 4616 0039 000000   		.space	3
 4617 003c 00000000 		.word	0
 4618 0040 07       		.byte	7
 4619 0041 000000   		.space	3
 4620 0044 03000000 		.word	3
 4621 0048 08       		.byte	8
 4622 0049 000000   		.space	3
 4623 004c 03000000 		.word	3
 4624 0050 2F       		.byte	47
 4625 0051 000000   		.space	3
 4626 0054 04000000 		.word	4
 4627 0058 2F       		.byte	47
 4628 0059 000000   		.space	3
 4629 005c 04000000 		.word	4
 4630 0060 2F       		.byte	47
 4631 0061 000000   		.space	3
 4632 0064 04000000 		.word	4
 4633 0068 0C       		.byte	12
 4634 0069 000000   		.space	3
 4635 006c 02000000 		.word	2
 4636 0070 2F       		.byte	47
 4637 0071 000000   		.space	3
 4638 0074 06000000 		.word	6
 4639 0078 05       		.byte	5
 4640 0079 000000   		.space	3
 4641 007c 03000000 		.word	3
 4642 0080 2E       		.byte	46
 4643 0081 000000   		.space	3
 4644 0084 00000000 		.word	0
ARM GAS  /tmp/cc2wwr9y.s 			page 113


 4645 0088 2E       		.byte	46
 4646 0089 000000   		.space	3
 4647 008c 00000000 		.word	0
 4648 0090 2E       		.byte	46
 4649 0091 000000   		.space	3
 4650 0094 00000000 		.word	0
 4651 0098 2E       		.byte	46
 4652 0099 000000   		.space	3
 4653 009c 00000000 		.word	0
 4654 00a0 2E       		.byte	46
 4655 00a1 000000   		.space	3
 4656 00a4 00000000 		.word	0
 4657 00a8 1B       		.byte	27
 4658 00a9 000000   		.space	3
 4659 00ac 03000000 		.word	3
 4660 00b0 1A       		.byte	26
 4661 00b1 000000   		.space	3
 4662 00b4 03000000 		.word	3
 4663 00b8 2E       		.byte	46
 4664 00b9 000000   		.space	3
 4665 00bc 00000000 		.word	0
 4666 00c0 2E       		.byte	46
 4667 00c1 000000   		.space	3
 4668 00c4 00000000 		.word	0
 4669 00c8 0C       		.byte	12
 4670 00c9 000000   		.space	3
 4671 00cc 03000000 		.word	3
 4672 00d0 1F       		.byte	31
 4673 00d1 000000   		.space	3
 4674 00d4 03000000 		.word	3
 4675 00d8 19       		.byte	25
 4676 00d9 000000   		.space	3
 4677 00dc 03000000 		.word	3
 4678 00e0 2A       		.byte	42
 4679 00e1 000000   		.space	3
 4680 00e4 FFFFFFFF 		.word	-1
 4681 00e8 2E       		.byte	46
 4682 00e9 000000   		.space	3
 4683 00ec 00000000 		.word	0
 4684 00f0 2E       		.byte	46
 4685 00f1 000000   		.space	3
 4686 00f4 00000000 		.word	0
 4687 00f8 21       		.byte	33
 4688 00f9 000000   		.space	3
 4689 00fc 03000000 		.word	3
 4690 0100 2E       		.byte	46
 4691 0101 000000   		.space	3
 4692 0104 00000000 		.word	0
 4693 0108 24       		.byte	36
 4694 0109 000000   		.space	3
 4695 010c 00000000 		.word	0
 4696 0110 2F       		.byte	47
 4697 0111 000000   		.space	3
 4698 0114 0D000000 		.word	13
 4699 0118 2E       		.byte	46
 4700 0119 000000   		.space	3
 4701 011c 00000000 		.word	0
ARM GAS  /tmp/cc2wwr9y.s 			page 114


 4702 0120 2F       		.byte	47
 4703 0121 000000   		.space	3
 4704 0124 07000000 		.word	7
 4705 0128 1E       		.byte	30
 4706 0129 000000   		.space	3
 4707 012c 03000000 		.word	3
 4708 0130 2E       		.byte	46
 4709 0131 000000   		.space	3
 4710 0134 00000000 		.word	0
 4711 0138 2E       		.byte	46
 4712 0139 000000   		.space	3
 4713 013c 00000000 		.word	0
 4714 0140 2E       		.byte	46
 4715 0141 000000   		.space	3
 4716 0144 00000000 		.word	0
 4717 0148 2E       		.byte	46
 4718 0149 000000   		.space	3
 4719 014c 00000000 		.word	0
 4720 0150 2E       		.byte	46
 4721 0151 000000   		.space	3
 4722 0154 00000000 		.word	0
 4723 0158 2E       		.byte	46
 4724 0159 000000   		.space	3
 4725 015c 00000000 		.word	0
 4726 0160 2E       		.byte	46
 4727 0161 000000   		.space	3
 4728 0164 00000000 		.word	0
 4729 0168 2E       		.byte	46
 4730 0169 000000   		.space	3
 4731 016c 00000000 		.word	0
 4732 0170 2E       		.byte	46
 4733 0171 000000   		.space	3
 4734 0174 00000000 		.word	0
 4735              		.section	.rodata.mapping_none.10866,"a"
 4736              		.align	2
 4737              		.set	.LANCHOR8,. + 0
 4740              	mapping_none.10866:
 4741 0000 63       		.byte	99
 4742 0001 000000   		.space	3
 4743 0004 FFFFFFFF 		.word	-1
 4744 0008 00       		.byte	0
 4745 0009 000000   		.space	3
 4746 000c 00000000 		.word	0
 4747 0010 01       		.byte	1
 4748 0011 000000   		.space	3
 4749 0014 00000000 		.word	0
 4750 0018 03       		.byte	3
 4751 0019 000000   		.space	3
 4752 001c 00000000 		.word	0
 4753 0020 13       		.byte	19
 4754 0021 000000   		.space	3
 4755 0024 02000000 		.word	2
 4756 0028 12       		.byte	18
 4757 0029 000000   		.space	3
 4758 002c 02000000 		.word	2
 4759 0030 12       		.byte	18
 4760 0031 000000   		.space	3
ARM GAS  /tmp/cc2wwr9y.s 			page 115


 4761 0034 00000000 		.word	0
 4762 0038 06       		.byte	6
 4763 0039 000000   		.space	3
 4764 003c 00000000 		.word	0
 4765 0040 07       		.byte	7
 4766 0041 000000   		.space	3
 4767 0044 00000000 		.word	0
 4768 0048 08       		.byte	8
 4769 0049 000000   		.space	3
 4770 004c 00000000 		.word	0
 4771 0050 01       		.byte	1
 4772 0051 000000   		.space	3
 4773 0054 01000000 		.word	1
 4774 0058 02       		.byte	2
 4775 0059 000000   		.space	3
 4776 005c 01000000 		.word	1
 4777 0060 03       		.byte	3
 4778 0061 000000   		.space	3
 4779 0064 01000000 		.word	1
 4780 0068 0C       		.byte	12
 4781 0069 000000   		.space	3
 4782 006c 00000000 		.word	0
 4783 0070 0D       		.byte	13
 4784 0071 000000   		.space	3
 4785 0074 00000000 		.word	0
 4786 0078 0E       		.byte	14
 4787 0079 000000   		.space	3
 4788 007c 00000000 		.word	0
 4789 0080 0F       		.byte	15
 4790 0081 000000   		.space	3
 4791 0084 00000000 		.word	0
 4792 0088 10       		.byte	16
 4793 0089 000000   		.space	3
 4794 008c 00000000 		.word	0
 4795 0090 18       		.byte	24
 4796 0091 000000   		.space	3
 4797 0094 00000000 		.word	0
 4798 0098 13       		.byte	19
 4799 0099 000000   		.space	3
 4800 009c 00000000 		.word	0
 4801 00a0 14       		.byte	20
 4802 00a1 000000   		.space	3
 4803 00a4 00000000 		.word	0
 4804 00a8 15       		.byte	21
 4805 00a9 000000   		.space	3
 4806 00ac 00000000 		.word	0
 4807 00b0 16       		.byte	22
 4808 00b1 000000   		.space	3
 4809 00b4 00000000 		.word	0
 4810 00b8 1E       		.byte	30
 4811 00b9 000000   		.space	3
 4812 00bc 00000000 		.word	0
 4813 00c0 19       		.byte	25
 4814 00c1 000000   		.space	3
 4815 00c4 00000000 		.word	0
 4816 00c8 1A       		.byte	26
 4817 00c9 000000   		.space	3
ARM GAS  /tmp/cc2wwr9y.s 			page 116


 4818 00cc 00000000 		.word	0
 4819 00d0 1B       		.byte	27
 4820 00d1 000000   		.space	3
 4821 00d4 00000000 		.word	0
 4822 00d8 1C       		.byte	28
 4823 00d9 000000   		.space	3
 4824 00dc 00000000 		.word	0
 4825 00e0 29       		.byte	41
 4826 00e1 000000   		.space	3
 4827 00e4 00000000 		.word	0
 4828 00e8 1F       		.byte	31
 4829 00e9 000000   		.space	3
 4830 00ec 00000000 		.word	0
 4831 00f0 20       		.byte	32
 4832 00f1 000000   		.space	3
 4833 00f4 00000000 		.word	0
 4834 00f8 21       		.byte	33
 4835 00f9 000000   		.space	3
 4836 00fc 00000000 		.word	0
 4837 0100 22       		.byte	34
 4838 0101 000000   		.space	3
 4839 0104 00000000 		.word	0
 4840 0108 24       		.byte	36
 4841 0109 000000   		.space	3
 4842 010c 00000000 		.word	0
 4843 0110 25       		.byte	37
 4844 0111 000000   		.space	3
 4845 0114 00000000 		.word	0
 4846 0118 26       		.byte	38
 4847 0119 000000   		.space	3
 4848 011c 00000000 		.word	0
 4849 0120 27       		.byte	39
 4850 0121 000000   		.space	3
 4851 0124 00000000 		.word	0
 4852 0128 28       		.byte	40
 4853 0129 000000   		.space	3
 4854 012c 00000000 		.word	0
 4855 0130 2E       		.byte	46
 4856 0131 000000   		.space	3
 4857 0134 00000000 		.word	0
 4858 0138 2E       		.byte	46
 4859 0139 000000   		.space	3
 4860 013c 00000000 		.word	0
 4861 0140 2E       		.byte	46
 4862 0141 000000   		.space	3
 4863 0144 00000000 		.word	0
 4864 0148 2E       		.byte	46
 4865 0149 000000   		.space	3
 4866 014c 00000000 		.word	0
 4867 0150 2E       		.byte	46
 4868 0151 000000   		.space	3
 4869 0154 00000000 		.word	0
 4870 0158 2E       		.byte	46
 4871 0159 000000   		.space	3
 4872 015c 00000000 		.word	0
 4873 0160 2E       		.byte	46
 4874 0161 000000   		.space	3
ARM GAS  /tmp/cc2wwr9y.s 			page 117


 4875 0164 00000000 		.word	0
 4876 0168 2E       		.byte	46
 4877 0169 000000   		.space	3
 4878 016c 00000000 		.word	0
 4879 0170 2E       		.byte	46
 4880 0171 000000   		.space	3
 4881 0174 00000000 		.word	0
 4882              		.section	.rodata.mid_menu,"a"
 4883              		.align	2
 4886              	mid_menu:
 4887 0000 C8C400   		.ascii	"\310\304\000"
 4888              		.text
 4889              	.Letext0:
 4890              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 4891              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 4892              		.file 6 "/usr/include/newlib/sys/_types.h"
 4893              		.file 7 "/usr/include/newlib/sys/reent.h"
 4894              		.file 8 "/usr/include/newlib/sys/lock.h"
 4895              		.file 9 "/usr/include/newlib/stdlib.h"
 4896              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 4897              		.file 11 "/usr/include/newlib/ctype.h"
 4898              		.file 12 "dmcp/ff_ifc.h"
 4899              		.file 13 "dmcp/dmcp.h"
 4900              		.file 14 "src/keys.h"
 4901              		.file 15 "src/decNumber/decContext.h"
 4902              		.file 16 "src/decNumber/decNumber.h"
 4903              		.file 17 "src/decNumber/decimal64.h"
 4904              		.file 18 "src/decNumber/decimal128.h"
 4905              		.file 19 "src/xeq.h"
 4906              		.file 20 "src/data.h"
 4907              		.file 21 "src/display.h"
 4908              		.file 22 "src/consts.h"
 4909              		.file 23 "src/storage.h"
 4910              		.file 24 "src/catalogues.h"
 4911              		.file 25 "src/menu.h"
 4912              		.file 26 "/usr/include/newlib/string.h"
 4913              		.file 27 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/cc2wwr9y.s 			page 118


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/cc2wwr9y.s:18     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/cc2wwr9y.s:26     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/cc2wwr9y.s:392    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/cc2wwr9y.s:400    .text.set_menu:0000000000000000 $t
     /tmp/cc2wwr9y.s:408    .text.set_menu:0000000000000000 set_menu
     /tmp/cc2wwr9y.s:458    .text.set_menu:0000000000000024 $d
     /tmp/cc2wwr9y.s:464    .text.get_menu:0000000000000000 $t
     /tmp/cc2wwr9y.s:472    .text.get_menu:0000000000000000 get_menu
     /tmp/cc2wwr9y.s:488    .text.get_menu:0000000000000008 $d
     /tmp/cc2wwr9y.s:493    .text.set_last_menu:0000000000000000 $t
     /tmp/cc2wwr9y.s:501    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/cc2wwr9y.s:550    .text.set_last_menu:0000000000000014 $d
     /tmp/cc2wwr9y.s:556    .text.mdot:0000000000000000 $t
     /tmp/cc2wwr9y.s:564    .text.mdot:0000000000000000 mdot
     /tmp/cc2wwr9y.s:655    .text.mdot:000000000000003c $d
     /tmp/cc2wwr9y.s:660    .text.display_menu:0000000000000000 $t
     /tmp/cc2wwr9y.s:668    .text.display_menu:0000000000000000 display_menu
     /tmp/cc2wwr9y.s:907    .text.display_menu:000000000000010c $d
     /tmp/cc2wwr9y.s:915    .text.display_current_menu:0000000000000000 $t
     /tmp/cc2wwr9y.s:923    .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/cc2wwr9y.s:938    .text.display_current_menu:0000000000000008 $d
     /tmp/cc2wwr9y.s:943    .text.shutdown:0000000000000000 $t
     /tmp/cc2wwr9y.s:951    .text.shutdown:0000000000000000 shutdown
     /tmp/cc2wwr9y.s:978    .text.shutdown:0000000000000014 $d
     /tmp/cc2wwr9y.s:983    .text.is_key_pressed:0000000000000000 $t
     /tmp/cc2wwr9y.s:991    .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/cc2wwr9y.s:1014   .text.is_key_pressed:0000000000000010 $d
     /tmp/cc2wwr9y.s:1019   .text.get_key:0000000000000000 $t
     /tmp/cc2wwr9y.s:1027   .text.get_key:0000000000000000 get_key
     /tmp/cc2wwr9y.s:1042   .text.get_key:0000000000000004 $d
     /tmp/cc2wwr9y.s:1047   .text.put_key:0000000000000000 $t
     /tmp/cc2wwr9y.s:1055   .text.put_key:0000000000000000 put_key
     /tmp/cc2wwr9y.s:1072   .text.put_key:0000000000000004 $d
     /tmp/cc2wwr9y.s:1077   .text.shift_down:0000000000000000 $t
     /tmp/cc2wwr9y.s:1085   .text.shift_down:0000000000000000 shift_down
     /tmp/cc2wwr9y.s:1100   .text.start_key_timer:0000000000000000 $t
     /tmp/cc2wwr9y.s:1108   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/cc2wwr9y.s:1132   .text.start_key_timer:000000000000000c $d
     /tmp/cc2wwr9y.s:1138   .text.keyticks:0000000000000000 $t
     /tmp/cc2wwr9y.s:1146   .text.keyticks:0000000000000000 keyticks
     /tmp/cc2wwr9y.s:1177   .text.keyticks:0000000000000018 $d
     /tmp/cc2wwr9y.s:1183   .text.moveto:0000000000000000 $t
     /tmp/cc2wwr9y.s:1191   .text.moveto:0000000000000000 moveto
     /tmp/cc2wwr9y.s:1251   .text.moveto:000000000000002c $d
     /tmp/cc2wwr9y.s:1258   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/cc2wwr9y.s:1262   .text.print_debug:0000000000000000 $t
     /tmp/cc2wwr9y.s:1270   .text.print_debug:0000000000000000 print_debug
     /tmp/cc2wwr9y.s:1372   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/cc2wwr9y.s:1383   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/cc2wwr9y.s:1387   .text.print_debug2:0000000000000000 $t
     /tmp/cc2wwr9y.s:1395   .text.print_debug2:0000000000000000 print_debug2
     /tmp/cc2wwr9y.s:1497   .text.print_debug2:0000000000000064 $d
     /tmp/cc2wwr9y.s:1508   .text.do_now:0000000000000000 $t
     /tmp/cc2wwr9y.s:1516   .text.do_now:0000000000000000 do_now
ARM GAS  /tmp/cc2wwr9y.s 			page 119


     /tmp/cc2wwr9y.s:1551   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/cc2wwr9y.s:1555   .text.do_multi:0000000000000000 $t
     /tmp/cc2wwr9y.s:1563   .text.do_multi:0000000000000000 do_multi
     /tmp/cc2wwr9y.s:1594   .text.do_multi:000000000000001a $d
     /tmp/cc2wwr9y.s:1604   .text.do_multi:0000000000000024 $t
     /tmp/cc2wwr9y.s:1889   .text.do_multi:0000000000000134 $d
     /tmp/cc2wwr9y.s:1896   .text.program_main:0000000000000000 $t
     /tmp/cc2wwr9y.s:1904   .text.program_main:0000000000000000 program_main
     /tmp/cc2wwr9y.s:2387   .text.program_main:0000000000000202 $d
     /tmp/cc2wwr9y.s:2393   .text.program_main:000000000000020e $t
     /tmp/cc2wwr9y.s:2587   .text.program_main:00000000000002ec $d
     /tmp/cc2wwr9y.s:2623   .text.program_main:000000000000036c $t
     /tmp/cc2wwr9y.s:3203   .text.program_main:000000000000062c $d
     /tmp/cc2wwr9y.s:3264   .bss.n_p:0000000000000000 n_p
     /tmp/cc2wwr9y.s:3332   .data.spaces:0000000000000000 spaces
     /tmp/cc2wwr9y.s:3323   .data.release:0000000000000000 release
     /tmp/cc2wwr9y.s:3296   .data.h_shift:0000000000000000 h_shift
     /tmp/cc2wwr9y.s:3287   .data.g_shift:0000000000000000 g_shift
     /tmp/cc2wwr9y.s:3278   .data.f_shift:0000000000000000 f_shift
     /tmp/cc2wwr9y.s:3305   .data.heartbeat:0000000000000000 heartbeat
     /tmp/cc2wwr9y.s:3314   .data.no_key:0000000000000000 no_key
     /tmp/cc2wwr9y.s:3339   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/cc2wwr9y.s:3235   .rodata.str1.4:0000000000000000 $d
     /tmp/cc2wwr9y.s:4886   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/cc2wwr9y.s:3240   .bss.current_menu:0000000000000000 $d
     /tmp/cc2wwr9y.s:3244   .bss.current_menu:0000000000000000 current_menu
     /tmp/cc2wwr9y.s:3247   .bss.last_menu:0000000000000000 $d
     /tmp/cc2wwr9y.s:3251   .bss.last_menu:0000000000000000 last_menu
     /tmp/cc2wwr9y.s:3254   .bss.mdots:0000000000000000 $d
     /tmp/cc2wwr9y.s:3258   .bss.mdots:0000000000000000 mdots
     /tmp/cc2wwr9y.s:3261   .bss.n_p:0000000000000000 $d
     /tmp/cc2wwr9y.s:3267   .bss.start_ticks:0000000000000000 $d
     /tmp/cc2wwr9y.s:3271   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/cc2wwr9y.s:3274   .data.f_shift:0000000000000000 $d
     /tmp/cc2wwr9y.s:3283   .data.g_shift:0000000000000000 $d
     /tmp/cc2wwr9y.s:3292   .data.h_shift:0000000000000000 $d
     /tmp/cc2wwr9y.s:3301   .data.heartbeat:0000000000000000 $d
     /tmp/cc2wwr9y.s:3310   .data.no_key:0000000000000000 $d
     /tmp/cc2wwr9y.s:3319   .data.release:0000000000000000 $d
     /tmp/cc2wwr9y.s:3328   .data.spaces:0000000000000000 $d
     /tmp/cc2wwr9y.s:3335   .rodata.MID_MENU:0000000000000000 $d
     /tmp/cc2wwr9y.s:3345   .rodata.Menus:0000000000000000 $d
     /tmp/cc2wwr9y.s:3349   .rodata.Menus:0000000000000000 Menus
     /tmp/cc2wwr9y.s:4295   .rodata.mapping_alpha.10869:0000000000000000 $d
     /tmp/cc2wwr9y.s:4299   .rodata.mapping_alpha.10869:0000000000000000 mapping_alpha.10869
     /tmp/cc2wwr9y.s:4442   .rodata.mapping_fshift.10867:0000000000000000 $d
     /tmp/cc2wwr9y.s:4446   .rodata.mapping_fshift.10867:0000000000000000 mapping_fshift.10867
     /tmp/cc2wwr9y.s:4589   .rodata.mapping_gshift.10868:0000000000000000 $d
     /tmp/cc2wwr9y.s:4593   .rodata.mapping_gshift.10868:0000000000000000 mapping_gshift.10868
     /tmp/cc2wwr9y.s:4736   .rodata.mapping_none.10866:0000000000000000 $d
     /tmp/cc2wwr9y.s:4740   .rodata.mapping_none.10866:0000000000000000 mapping_none.10866
     /tmp/cc2wwr9y.s:4883   .rodata.mid_menu:0000000000000000 $d

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
ARM GAS  /tmp/cc2wwr9y.s 			page 120


forceDispPlot
RectPolConv
pixel_length
save_ram_file
strcpy
sprintf
process_keycode_with_shift
save_prog_file
flash_backup
flash_restore
save_lib_file
load_lib_file
load_ram_file
load_prog_file
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
get_alpha_state
cur_shift
StateWhileOn
DispMsg
JustDisplayed
Pause

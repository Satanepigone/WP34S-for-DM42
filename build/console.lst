ARM GAS  /tmp/ccj9eXy0.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_menu_label.constprop.0:
  27              	.LVL0:
  28              	.LFB27:
  29              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** void set_menu ( int new_menu ) {
   4:src/menu.c    ****   int m = current_menu;
   5:src/menu.c    ****   if (new_menu == current_menu) {
   6:src/menu.c    ****     current_menu = 0;
   7:src/menu.c    ****   }
   8:src/menu.c    ****   else if (new_menu == -1) {
   9:src/menu.c    ****     current_menu = last_menu;
  10:src/menu.c    ****   }
  11:src/menu.c    ****   else {
  12:src/menu.c    ****     current_menu = new_menu;
  13:src/menu.c    ****   }
  14:src/menu.c    ****   last_menu = m;
  15:src/menu.c    **** }
  16:src/menu.c    **** 
  17:src/menu.c    **** int get_menu () {
  18:src/menu.c    ****   return current_menu;
  19:src/menu.c    **** }
  20:src/menu.c    **** 
  21:src/menu.c    **** void display_current_menu () {
  22:src/menu.c    ****   display_menu (current_menu);
  23:src/menu.c    **** }
  24:src/menu.c    **** 
  25:src/menu.c    **** void set_last_menu () {
  26:src/menu.c    ****   set_menu (last_menu);
  27:src/menu.c    **** }
  28:src/menu.c    **** 
  29:src/menu.c    **** static unsigned char mdots[200][2];
ARM GAS  /tmp/ccj9eXy0.s 			page 2


  30:src/menu.c    **** 
  31:src/menu.c    **** static const struct _menu Menus[] = {
  32:src/menu.c    ****   {
  33:src/menu.c    ****     "Blank", // 0
  34:src/menu.c    ****     { 
  35:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  36:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  37:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  38:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  39:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  40:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  41:src/menu.c    ****     }    
  42:src/menu.c    ****   },
  43:src/menu.c    ****   {
  44:src/menu.c    ****     "Clear", // 1
  45:src/menu.c    ****     { 
  46:src/menu.c    ****       { { K24, 1 }, NO_KEY, "CLProg", "" },
  47:src/menu.c    ****       { { K24, 2 }, NO_KEY, "CL\221", "" },
  48:src/menu.c    ****       { { K24, 3 }, NO_KEY, "CLx", "" },
  49:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  50:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  51:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  52:src/menu.c    ****     }    
  53:src/menu.c    ****   },
  54:src/menu.c    ****   {
  55:src/menu.c    ****     "DISP", // 2
  56:src/menu.c    ****     { 
  57:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
  58:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
  59:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.M.S." },
  60:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
  61:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
  62:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  63:src/menu.c    ****     }
  64:src/menu.c    ****   },
  65:src/menu.c    ****   {
  66:src/menu.c    ****     "BASE", // 3
  67:src/menu.c    ****     { 
  68:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
  69:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
  70:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
  71:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
  72:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
  73:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  74:src/menu.c    ****     }
  75:src/menu.c    ****   },
  76:src/menu.c    ****   {
  77:src/menu.c    ****     "ANGLES", // 4
  78:src/menu.c    ****     { 
  79:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
  80:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
  81:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
  82:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
  83:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
  84:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  85:src/menu.c    ****     }
  86:src/menu.c    ****       
ARM GAS  /tmp/ccj9eXy0.s 			page 3


  87:src/menu.c    ****   },
  88:src/menu.c    ****   {
  89:src/menu.c    ****     "MISC", // 5
  90:src/menu.c    ****     { 
  91:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
  92:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
  93:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
  94:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
  95:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
  96:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  97:src/menu.c    ****     }
  98:src/menu.c    ****   },
  99:src/menu.c    ****   {
 100:src/menu.c    ****     "X<>Y Key", // 6
 101:src/menu.c    ****     { 
 102:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 103:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 104:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 105:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 106:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 107:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 108:src/menu.c    ****     }    
 109:src/menu.c    ****   },
 110:src/menu.c    ****   {
 111:src/menu.c    ****     "Program", // 7
 112:src/menu.c    ****     { 
 113:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 114:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 115:src/menu.c    ****       { { K61, 3 }, NO_KEY, "Pause", "" },
 116:src/menu.c    ****       { { K30, 3 }, NO_KEY, "GTO", "" },
 117:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 118:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 119:src/menu.c    ****     }
 120:src/menu.c    ****   },
 121:src/menu.c    ****   {
 122:src/menu.c    ****     "Setup 1", // 8
 123:src/menu.c    ****     { 
 124:src/menu.c    ****       { { K_SYS, 0}, NO_KEY, "System", "" },
 125:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 126:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "WrtSt" },
 127:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdSt" },
 128:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 129:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 130:src/menu.c    ****     }
 131:src/menu.c    ****   },
 132:src/menu.c    ****   {
 133:src/menu.c    ****     "Arrow", // 9
 134:src/menu.c    ****     { 
 135:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 136:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 137:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 138:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "2HMS" },
 139:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS2" },
 140:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 141:src/menu.c    ****     }
 142:src/menu.c    ****   },
 143:src/menu.c    ****   {
ARM GAS  /tmp/ccj9eXy0.s 			page 4


 144:src/menu.c    ****     "Flags", // 10
 145:src/menu.c    ****     { 
 146:src/menu.c    ****       { { K50, 1 }, NO_KEY, "SF_", "" },
 147:src/menu.c    ****       { { K50, 2 }, NO_KEY, "CF_", "" },
 148:src/menu.c    ****       { { K51, 1 }, NO_KEY, "x=?", "" },
 149:src/menu.c    ****       { { K51, 2 }, NO_KEY, "x\013?", "" },
 150:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 151:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 152:src/menu.c    ****     }
 153:src/menu.c    ****   },
 154:src/menu.c    ****   {
 155:src/menu.c    ****     "Probability", // 11
 156:src/menu.c    ****     { 
 157:src/menu.c    ****       { { K40, 3 }, { K41, 1 }, "Fact!", "\224" },
 158:src/menu.c    ****       { { K40, 1 }, { K41, 2 }, "Cy,x", "\224\235" },
 159:src/menu.c    ****       { { K40, 2 }, NO_KEY, "Py,x", "" },
 160:src/menu.c    ****       { { K12, 1 }, NO_KEY, "RAN#", "" },
 161:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 162:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 163:src/menu.c    ****     }
 164:src/menu.c    ****   },
 165:src/menu.c    ****   {
 166:src/menu.c    ****     "Statistics", // 12
 167:src/menu.c    ****     { 
 168:src/menu.c    ****       { { K42, 1 }, { K43, 3 }, "Xbar", "SUMS" },
 169:src/menu.c    ****       { { K43, 1 }, NO_KEY, "Yhat", "" },
 170:src/menu.c    ****       { { K42, 2 }, NO_KEY, "s", "" },
 171:src/menu.c    ****       { { K43, 2 }, NO_KEY, "r", "" },
 172:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 173:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 174:src/menu.c    ****     }
 175:src/menu.c    ****   },
 176:src/menu.c    ****   {
 177:src/menu.c    ****     "Setup 2", // 13
 178:src/menu.c    ****     { 
 179:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "WrtLib", "" },
 180:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdSt", "" },
 181:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 182:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPrg", "" },
 183:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 184:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 185:src/menu.c    ****     }
 186:src/menu.c    ****   },
 187:src/menu.c    **** };  
 188:src/menu.c    **** 
 189:src/menu.c    **** /* This code is the set_status_sized code with small changes
 190:src/menu.c    ****  * and non-DM42 code removed.
 191:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 192:src/menu.c    ****  */
 193:src/menu.c    **** #define MENU_WIDTH 32
 194:src/menu.c    **** 
 195:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  30              		.loc 1 195 13 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 544
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 196:src/menu.c    ****   // dotcol is the number of the starting dot column
ARM GAS  /tmp/ccj9eXy0.s 			page 5


 197:src/menu.c    ****   // shifted is 1 if shifted
 198:src/menu.c    ****   unsigned short int posns[257];
  34              		.loc 1 198 3 view .LVU1
 199:src/menu.c    **** 
 200:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 201:src/menu.c    ****   int posns_state = 255;
  35              		.loc 1 201 3 view .LVU2
 202:src/menu.c    **** 
 203:src/menu.c    ****   int x = dotcol;
  36              		.loc 1 203 3 view .LVU3
 195:src/menu.c    ****   // dotcol is the number of the starting dot column
  37              		.loc 1 195 13 is_stmt 0 view .LVU4
  38 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  39              		.cfi_def_cfa_offset 36
  40              		.cfi_offset 4, -36
  41              		.cfi_offset 5, -32
  42              		.cfi_offset 6, -28
  43              		.cfi_offset 7, -24
  44              		.cfi_offset 8, -20
  45              		.cfi_offset 9, -16
  46              		.cfi_offset 10, -12
  47              		.cfi_offset 11, -8
  48              		.cfi_offset 14, -4
  49 0004 ADF5097D 		sub	sp, sp, #548
  50              		.cfi_def_cfa_offset 584
 195:src/menu.c    ****   // dotcol is the number of the starting dot column
  51              		.loc 1 195 13 view .LVU5
  52 0008 CDE90102 		strd	r0, r2, [sp, #4]
 204:src/menu.c    ****   int i, j, xmax;
 205:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  53              		.loc 1 205 18 view .LVU6
  54 000c 0029     		cmp	r1, #0
  55 000e B4BF     		ite	lt
  56 0010 01F11F03 		addlt	r3, r1, #31
  57 0014 0B46     		movge	r3, r1
 206:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 207:src/menu.c    **** 
 208:src/menu.c    ****   forceDispPlot=0;
  58              		.loc 1 208 16 view .LVU7
  59 0016 4848     		ldr	r0, .L36
  60              	.LVL1:
 195:src/menu.c    ****   // dotcol is the number of the starting dot column
  61              		.loc 1 195 13 view .LVU8
  62 0018 0F46     		mov	r7, r1
  63              	.LVL2:
 204:src/menu.c    ****   int i, j, xmax;
  64              		.loc 1 204 3 is_stmt 1 view .LVU9
 205:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  65              		.loc 1 205 3 view .LVU10
 209:src/menu.c    **** 
 210:src/menu.c    **** #ifdef RP_PREFIX
 211:src/menu.c    ****   RectPolConv = 0;
  66              		.loc 1 211 15 is_stmt 0 view .LVU11
  67 001a 4849     		ldr	r1, .L36+4
  68              	.LVL3:
 208:src/menu.c    **** 
  69              		.loc 1 208 16 view .LVU12
ARM GAS  /tmp/ccj9eXy0.s 			page 6


  70 001c 0022     		movs	r2, #0
  71              	.LVL4:
 208:src/menu.c    **** 
  72              		.loc 1 208 16 view .LVU13
  73 001e 0270     		strb	r2, [r0]
  74              		.loc 1 211 15 view .LVU14
  75 0020 0A60     		str	r2, [r1]
 212:src/menu.c    **** #endif
 213:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
  76              		.loc 1 213 10 view .LVU15
  77 0022 019A     		ldr	r2, [sp, #4]
  78 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 205:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  79              		.loc 1 205 30 view .LVU16
  80 0026 23F01F03 		bic	r3, r3, #31
 205:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  81              		.loc 1 205 8 view .LVU17
  82 002a 03F12009 		add	r9, r3, #32
  83              	.LVL5:
 206:src/menu.c    **** 
  84              		.loc 1 206 3 is_stmt 1 view .LVU18
 208:src/menu.c    **** 
  85              		.loc 1 208 3 view .LVU19
 211:src/menu.c    **** #endif
  86              		.loc 1 211 3 view .LVU20
  87              		.loc 1 213 3 view .LVU21
  88              		.loc 1 213 9 view .LVU22
  89 002e 002D     		cmp	r5, #0
  90 0030 78D0     		beq	.L1
  91              		.loc 1 213 23 is_stmt 0 view .LVU23
  92 0032 4F45     		cmp	r7, r9
  93 0034 76DC     		bgt	.L1
  94              	.LBB29:
 214:src/menu.c    ****     int c;
 215:src/menu.c    ****     int width;
 216:src/menu.c    ****     unsigned char cmap[6];
 217:src/menu.c    **** 
 218:src/menu.c    ****     int real_width;
 219:src/menu.c    ****     int current_smallp;
 220:src/menu.c    **** 
 221:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 222:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 223:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 224:src/menu.c    ****     //           01 -> (not used)
 225:src/menu.c    ****     //           10 -> use big font
 226:src/menu.c    ****     //           11 -> use small font
 227:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 228:src/menu.c    ****     if (str[0] == '\007') {
  95              		.loc 1 228 8 view .LVU24
  96 0036 072D     		cmp	r5, #7
  97              	.LBE29:
 201:src/menu.c    **** 
  98              		.loc 1 201 7 view .LVU25
  99 0038 4FF0FF04 		mov	r4, #255
 100              	.LVL6:
 101              	.LBB46:
 214:src/menu.c    ****     int c;
ARM GAS  /tmp/ccj9eXy0.s 			page 7


 102              		.loc 1 214 5 is_stmt 1 view .LVU26
 215:src/menu.c    ****     unsigned char cmap[6];
 103              		.loc 1 215 5 view .LVU27
 216:src/menu.c    **** 
 104              		.loc 1 216 5 view .LVU28
 218:src/menu.c    ****     int current_smallp;
 105              		.loc 1 218 5 view .LVU29
 219:src/menu.c    **** 
 106              		.loc 1 219 5 view .LVU30
 107              		.loc 1 228 5 view .LVU31
 229:src/menu.c    ****       width = str[1] & 0x1F;
 230:src/menu.c    ****       switch (str[1] & 0x60) {
 231:src/menu.c    ****       default:
 232:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 233:src/menu.c    **** 	break;
 234:src/menu.c    ****       case 0x40:	current_smallp = 0;
 235:src/menu.c    **** 	break;
 236:src/menu.c    ****       case 0x60:	current_smallp = 1;
 108              		.loc 1 236 33 is_stmt 0 view .LVU32
 109 003c 4FF0010A 		mov	r10, #1
 228:src/menu.c    ****       width = str[1] & 0x1F;
 110              		.loc 1 228 8 view .LVU33
 111 0040 64D1     		bne	.L5
 112              	.LVL7:
 113              	.L34:
 229:src/menu.c    ****       width = str[1] & 0x1F;
 114              		.loc 1 229 7 is_stmt 1 view .LVU34
 229:src/menu.c    ****       width = str[1] & 0x1F;
 115              		.loc 1 229 18 is_stmt 0 view .LVU35
 116 0042 019B     		ldr	r3, [sp, #4]
 117 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 118 0046 06F06003 		and	r3, r6, #96
 230:src/menu.c    ****       default:
 119              		.loc 1 230 7 view .LVU36
 120 004a 402B     		cmp	r3, #64
 229:src/menu.c    ****       width = str[1] & 0x1F;
 121              		.loc 1 229 13 view .LVU37
 122 004c 06F01F06 		and	r6, r6, #31
 123              	.LVL8:
 230:src/menu.c    ****       default:
 124              		.loc 1 230 7 is_stmt 1 view .LVU38
 125 0050 6CD0     		beq	.L28
 126 0052 602B     		cmp	r3, #96
 127 0054 6AD1     		bne	.L28
 128              		.loc 1 236 18 view .LVU39
 129              	.LVL9:
 237:src/menu.c    **** 	break;
 130              		.loc 1 237 2 view .LVU40
 238:src/menu.c    ****       }
 239:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 131              		.loc 1 239 7 view .LVU41
 132              		.loc 1 239 11 is_stmt 0 view .LVU42
 133 0056 019B     		ldr	r3, [sp, #4]
 134 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 236:src/menu.c    **** 	break;
 135              		.loc 1 236 33 view .LVU43
 136 005a 0123     		movs	r3, #1
ARM GAS  /tmp/ccj9eXy0.s 			page 8


 137 005c 0093     		str	r3, [sp]
 138 005e 00F58075 		add	r5, r0, #256
 139              	.LVL10:
 140              	.L9:
 240:src/menu.c    ****       str += 3;
 141              		.loc 1 240 7 is_stmt 1 view .LVU44
 241:src/menu.c    **** 
 242:src/menu.c    ****       real_width = charlengths(c);
 142              		.loc 1 242 20 is_stmt 0 view .LVU45
 143 0062 2846     		mov	r0, r5
 144 0064 FFF7FEFF 		bl	charlengths
 145              	.LVL11:
 240:src/menu.c    ****       str += 3;
 146              		.loc 1 240 11 view .LVU46
 147 0068 019B     		ldr	r3, [sp, #4]
 148 006a 0333     		adds	r3, r3, #3
 149 006c 0193     		str	r3, [sp, #4]
 150              	.LVL12:
 151              		.loc 1 242 7 is_stmt 1 view .LVU47
 243:src/menu.c    ****     } else {
 244:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 245:src/menu.c    ****       real_width = width = charlengths(c);
 246:src/menu.c    ****       current_smallp = smallp;
 247:src/menu.c    ****     }
 248:src/menu.c    **** 
 249:src/menu.c    ****     if (x + real_width > xmax)
 152              		.loc 1 249 5 view .LVU48
 153              		.loc 1 249 11 is_stmt 0 view .LVU49
 154 006e C319     		adds	r3, r0, r7
 155              	.LVL13:
 156              		.loc 1 249 8 view .LVU50
 157 0070 9945     		cmp	r9, r3
 158 0072 57DB     		blt	.L1
 159              	.L35:
 250:src/menu.c    ****       break;
 251:src/menu.c    **** 
 252:src/menu.c    ****     if (posns_state != current_smallp) {
 160              		.loc 1 252 5 is_stmt 1 view .LVU51
 161              		.loc 1 252 8 is_stmt 0 view .LVU52
 162 0074 009B     		ldr	r3, [sp]
 163 0076 A342     		cmp	r3, r4
 253:src/menu.c    ****       findlengths(posns, current_smallp);
 164              		.loc 1 253 7 view .LVU53
 165 0078 07AB     		add	r3, sp, #28
 252:src/menu.c    ****       findlengths(posns, current_smallp);
 166              		.loc 1 252 8 view .LVU54
 167 007a 05D0     		beq	.L12
 168              		.loc 1 253 7 is_stmt 1 view .LVU55
 169 007c 1846     		mov	r0, r3
 170              	.LVL14:
 171              		.loc 1 253 7 is_stmt 0 view .LVU56
 172 007e 0099     		ldr	r1, [sp]
 173 0080 0393     		str	r3, [sp, #12]
 174 0082 FFF7FEFF 		bl	findlengths
 175              	.LVL15:
 176 0086 039B     		ldr	r3, [sp, #12]
 254:src/menu.c    ****       posns_state = current_smallp;
ARM GAS  /tmp/ccj9eXy0.s 			page 9


 177              		.loc 1 254 7 is_stmt 1 view .LVU57
 178              	.LVL16:
 179              	.L12:
 255:src/menu.c    ****     }
 256:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 180              		.loc 1 256 5 view .LVU58
 181 0088 009A     		ldr	r2, [sp]
 182 008a 2846     		mov	r0, r5
 183 008c 05A9     		add	r1, sp, #20
 184 008e FFF7FEFF 		bl	unpackchar
 185              	.LVL17:
 257:src/menu.c    **** 
 258:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 186              		.loc 1 258 5 view .LVU59
 187              		.loc 1 258 15 view .LVU60
 188 0092 029B     		ldr	r3, [sp, #8]
 189 0094 03EB4704 		add	r4, r3, r7, lsl #1
 190 0098 294B     		ldr	r3, .L36+8
 191 009a 0DF1140B 		add	fp, sp, #20
 192 009e 1C44     		add	r4, r4, r3
 256:src/menu.c    **** 
 193              		.loc 1 256 5 is_stmt 0 view .LVU61
 194 00a0 4FF0050E 		mov	lr, #5
 195 00a4 A9EB0705 		sub	r5, r9, r7
 196              	.LVL18:
 197              	.L13:
 259:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 198              		.loc 1 259 17 is_stmt 1 view .LVU62
 199              		.loc 1 259 7 is_stmt 0 view .LVU63
 200 00a8 002E     		cmp	r6, #0
 201 00aa 1FDD     		ble	.L19
 260:src/menu.c    **** 	if (x+j >= xmax)
 202              		.loc 1 260 2 is_stmt 1 view .LVU64
 203              		.loc 1 260 5 is_stmt 0 view .LVU65
 204 00ac B945     		cmp	r9, r7
 205 00ae 1DDD     		ble	.L19
 206              	.LBB30:
 207              	.LBB31:
 208              	.LBB32:
 209              	.LBB33:
 261:src/menu.c    **** 	  break;
 262:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 263:src/menu.c    ****       }
 264:src/menu.c    ****     }
 265:src/menu.c    ****     x += width;
 266:src/menu.c    ****   }
 267:src/menu.c    **** }
 268:src/menu.c    **** 
 269:src/menu.c    **** 
 270:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 271:src/menu.c    **** 
 272:src/menu.c    **** int pixel_length(const char *s, int smallp)
 273:src/menu.c    **** {
 274:src/menu.c    ****   int len = 0;
 275:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 276:src/menu.c    ****   while (*s != '\0') {
 277:src/menu.c    ****     if (s[0] == '\007') {
ARM GAS  /tmp/ccj9eXy0.s 			page 10


 278:src/menu.c    ****       len += s[1] & 0x1F;
 279:src/menu.c    ****       s += 3;
 280:src/menu.c    ****       continue;
 281:src/menu.c    ****     }
 282:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 283:src/menu.c    ****   }
 284:src/menu.c    ****   return len;
 285:src/menu.c    **** }
 286:src/menu.c    **** */
 287:src/menu.c    **** 
 288:src/menu.c    **** 
 289:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 290:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 291:src/menu.c    ****   if (on) {
 292:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 293:src/menu.c    ****   }
 294:src/menu.c    ****   else {
 295:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 210              		.loc 1 295 25 view .LVU66
 211 00b0 0AFA0EFC 		lsl	ip, r10, lr
 212              		.loc 1 295 17 view .LVU67
 213 00b4 4FFA8CFC 		sxtb	ip, ip
 214              	.LBE33:
 215              	.LBE32:
 216              	.LBE31:
 217              	.LBE30:
 262:src/menu.c    ****       }
 218              		.loc 1 262 31 view .LVU68
 219 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 220              	.LBB43:
 221              	.LBB40:
 222              	.LBB37:
 223              	.LBB34:
 224              		.loc 1 295 17 view .LVU69
 225 00bc 6FEA0C08 		mvn	r8, ip
 226              	.LBE34:
 227              	.LBE37:
 228              	.LBE40:
 229              	.LBE43:
 259:src/menu.c    **** 	if (x+j >= xmax)
 230              		.loc 1 259 13 view .LVU70
 231 00c0 0023     		movs	r3, #0
 232 00c2 01E0     		b	.L14
 233              	.LVL19:
 234              	.L18:
 260:src/menu.c    **** 	  break;
 235              		.loc 1 260 5 view .LVU71
 236 00c4 9D42     		cmp	r5, r3
 237 00c6 11D0     		beq	.L19
 238              	.LVL20:
 239              	.L14:
 262:src/menu.c    ****       }
 240              		.loc 1 262 2 is_stmt 1 view .LVU72
 241              	.LBB44:
 242              	.LBI30:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 243              		.loc 1 289 6 view .LVU73
ARM GAS  /tmp/ccj9eXy0.s 			page 11


 244              	.LBB41:
 290:src/menu.c    ****   if (on) {
 245              		.loc 1 290 3 view .LVU74
 246              	.LBB38:
 247              	.LBI32:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 248              		.loc 1 289 6 view .LVU75
 249              	.LBB35:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 250              		.loc 1 291 3 view .LVU76
 251              	.LBE35:
 252              	.LBE38:
 290:src/menu.c    ****   if (on) {
 253              		.loc 1 290 6 is_stmt 0 view .LVU77
 254 00c8 DA19     		adds	r2, r3, r7
 255              	.LVL21:
 290:src/menu.c    ****   if (on) {
 256              		.loc 1 290 6 view .LVU78
 257 00ca C72A     		cmp	r2, #199
 258              	.LBE41:
 259              	.LBE44:
 262:src/menu.c    ****       }
 260              		.loc 1 262 46 view .LVU79
 261 00cc 40FA03F1 		asr	r1, r0, r3
 262              	.LBB45:
 263              	.LBB42:
 290:src/menu.c    ****   if (on) {
 264              		.loc 1 290 6 view .LVU80
 265 00d0 09D8     		bhi	.L16
 266              	.LBB39:
 267              	.LBB36:
 292:src/menu.c    ****   }
 268              		.loc 1 292 5 is_stmt 1 view .LVU81
 269              		.loc 1 295 5 view .LVU82
 292:src/menu.c    ****   }
 270              		.loc 1 292 17 is_stmt 0 view .LVU83
 271 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 272              	.LVL22:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 273              		.loc 1 291 6 view .LVU84
 274 00d6 C907     		lsls	r1, r1, #31
 292:src/menu.c    ****   }
 275              		.loc 1 292 17 view .LVU85
 276 00d8 4CBF     		ite	mi
 277 00da 4CEA0202 		orrmi	r2, ip, r2
 278              		.loc 1 295 17 view .LVU86
 279 00de 08EA0202 		andpl	r2, r8, r2
 280 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 281              	.L16:
 282              	.LBE36:
 283              	.LBE39:
 284              	.LBE42:
 285              	.LBE45:
 260:src/menu.c    **** 	  break;
 286              		.loc 1 260 2 is_stmt 1 view .LVU87
 287              	.LVL23:
 259:src/menu.c    **** 	if (x+j >= xmax)
ARM GAS  /tmp/ccj9eXy0.s 			page 12


 288              		.loc 1 259 26 view .LVU88
 259:src/menu.c    **** 	if (x+j >= xmax)
 289              		.loc 1 259 27 is_stmt 0 view .LVU89
 290 00e6 0133     		adds	r3, r3, #1
 291              	.LVL24:
 259:src/menu.c    **** 	if (x+j >= xmax)
 292              		.loc 1 259 17 is_stmt 1 view .LVU90
 259:src/menu.c    **** 	if (x+j >= xmax)
 293              		.loc 1 259 7 is_stmt 0 view .LVU91
 294 00e8 B342     		cmp	r3, r6
 295 00ea EBD1     		bne	.L18
 296              	.LVL25:
 297              	.L19:
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 298              		.loc 1 258 20 is_stmt 1 view .LVU92
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 299              		.loc 1 258 15 view .LVU93
 300 00ec 0EF1FF3E 		add	lr, lr, #-1
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 301              		.loc 1 258 5 is_stmt 0 view .LVU94
 302 00f0 BEF1FF3F 		cmp	lr, #-1
 303 00f4 0BF1010B 		add	fp, fp, #1
 304              	.LVL26:
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 305              		.loc 1 258 5 view .LVU95
 306 00f8 D6D1     		bne	.L13
 265:src/menu.c    ****   }
 307              		.loc 1 265 5 is_stmt 1 view .LVU96
 308              	.LBE46:
 213:src/menu.c    ****     int c;
 309              		.loc 1 213 10 is_stmt 0 view .LVU97
 310 00fa 019B     		ldr	r3, [sp, #4]
 311 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 312              	.LBB47:
 265:src/menu.c    ****   }
 313              		.loc 1 265 7 view .LVU98
 314 00fe 3744     		add	r7, r7, r6
 315              	.LVL27:
 265:src/menu.c    ****   }
 316              		.loc 1 265 7 view .LVU99
 317              	.LBE47:
 213:src/menu.c    ****     int c;
 318              		.loc 1 213 9 is_stmt 1 view .LVU100
 319 0100 85B1     		cbz	r5, .L1
 213:src/menu.c    ****     int c;
 320              		.loc 1 213 23 is_stmt 0 view .LVU101
 321 0102 B945     		cmp	r9, r7
 322 0104 0EDB     		blt	.L1
 323              	.LBB48:
 228:src/menu.c    ****       width = str[1] & 0x1F;
 324              		.loc 1 228 8 view .LVU102
 325 0106 072D     		cmp	r5, #7
 326              	.LBE48:
 327 0108 009C     		ldr	r4, [sp]
 328              	.LBB49:
 214:src/menu.c    ****     int width;
 329              		.loc 1 214 5 is_stmt 1 view .LVU103
ARM GAS  /tmp/ccj9eXy0.s 			page 13


 215:src/menu.c    ****     unsigned char cmap[6];
 330              		.loc 1 215 5 view .LVU104
 216:src/menu.c    **** 
 331              		.loc 1 216 5 view .LVU105
 218:src/menu.c    ****     int current_smallp;
 332              		.loc 1 218 5 view .LVU106
 219:src/menu.c    **** 
 333              		.loc 1 219 5 view .LVU107
 228:src/menu.c    ****       width = str[1] & 0x1F;
 334              		.loc 1 228 5 view .LVU108
 228:src/menu.c    ****       width = str[1] & 0x1F;
 335              		.loc 1 228 8 is_stmt 0 view .LVU109
 336 010a 9AD0     		beq	.L34
 337              	.LVL28:
 338              	.L5:
 244:src/menu.c    ****       real_width = width = charlengths(c);
 339              		.loc 1 244 7 is_stmt 1 view .LVU110
 245:src/menu.c    ****       current_smallp = smallp;
 340              		.loc 1 245 28 is_stmt 0 view .LVU111
 341 010c 2846     		mov	r0, r5
 342 010e FFF7FEFF 		bl	charlengths
 343              	.LVL29:
 244:src/menu.c    ****       real_width = width = charlengths(c);
 344              		.loc 1 244 31 view .LVU112
 345 0112 019B     		ldr	r3, [sp, #4]
 346 0114 0133     		adds	r3, r3, #1
 347 0116 0193     		str	r3, [sp, #4]
 348              	.LVL30:
 245:src/menu.c    ****       current_smallp = smallp;
 349              		.loc 1 245 7 is_stmt 1 view .LVU113
 246:src/menu.c    ****     }
 350              		.loc 1 246 7 view .LVU114
 246:src/menu.c    ****     }
 351              		.loc 1 246 22 is_stmt 0 view .LVU115
 352 0118 0023     		movs	r3, #0
 353              	.LVL31:
 246:src/menu.c    ****     }
 354              		.loc 1 246 22 view .LVU116
 355 011a 0093     		str	r3, [sp]
 356              	.LVL32:
 249:src/menu.c    ****       break;
 357              		.loc 1 249 11 view .LVU117
 358 011c C319     		adds	r3, r0, r7
 359              	.LVL33:
 249:src/menu.c    ****       break;
 360              		.loc 1 249 8 view .LVU118
 361 011e 9945     		cmp	r9, r3
 245:src/menu.c    ****       current_smallp = smallp;
 362              		.loc 1 245 28 view .LVU119
 363 0120 0646     		mov	r6, r0
 249:src/menu.c    ****       break;
 364              		.loc 1 249 5 is_stmt 1 view .LVU120
 249:src/menu.c    ****       break;
 365              		.loc 1 249 8 is_stmt 0 view .LVU121
 366 0122 A7DA     		bge	.L35
 367              	.LVL34:
 368              	.L1:
ARM GAS  /tmp/ccj9eXy0.s 			page 14


 249:src/menu.c    ****       break;
 369              		.loc 1 249 8 view .LVU122
 370              	.LBE49:
 267:src/menu.c    **** 
 371              		.loc 1 267 1 view .LVU123
 372 0124 0DF5097D 		add	sp, sp, #548
 373              		.cfi_remember_state
 374              		.cfi_def_cfa_offset 36
 375              		@ sp needed
 376 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 377              	.LVL35:
 378              	.L28:
 379              		.cfi_restore_state
 380              	.LBB50:
 239:src/menu.c    ****       str += 3;
 381              		.loc 1 239 7 is_stmt 1 view .LVU124
 239:src/menu.c    ****       str += 3;
 382              		.loc 1 239 11 is_stmt 0 view .LVU125
 383 012c 019B     		ldr	r3, [sp, #4]
 384 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 232:src/menu.c    **** 	break;
 385              		.loc 1 232 33 view .LVU126
 386 0130 0023     		movs	r3, #0
 387 0132 0093     		str	r3, [sp]
 388 0134 95E7     		b	.L9
 389              	.L37:
 390 0136 00BF     		.align	2
 391              	.L36:
 392 0138 00000000 		.word	forceDispPlot
 393 013c 00000000 		.word	RectPolConv
 394 0140 00000000 		.word	.LANCHOR0
 395              	.LBE50:
 396              		.cfi_endproc
 397              	.LFE27:
 399              		.section	.text.set_menu,"ax",%progbits
 400              		.align	1
 401              		.p2align 2,,3
 402              		.global	set_menu
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu fpv4-sp-d16
 408              	set_menu:
 409              	.LVL36:
 410              	.LFB3:
   3:src/menu.c    ****   int m = current_menu;
 411              		.loc 1 3 32 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              		@ link register save eliminated.
   4:src/menu.c    ****   if (new_menu == current_menu) {
 416              		.loc 1 4 3 view .LVU128
   4:src/menu.c    ****   if (new_menu == current_menu) {
 417              		.loc 1 4 7 is_stmt 0 view .LVU129
 418 0000 084A     		ldr	r2, .L43
 419 0002 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccj9eXy0.s 			page 15


 420              	.LVL37:
   5:src/menu.c    ****     current_menu = 0;
 421              		.loc 1 5 3 is_stmt 1 view .LVU130
   5:src/menu.c    ****     current_menu = 0;
 422              		.loc 1 5 6 is_stmt 0 view .LVU131
 423 0004 8342     		cmp	r3, r0
 424 0006 07D0     		beq	.L42
   8:src/menu.c    ****     current_menu = last_menu;
 425              		.loc 1 8 8 is_stmt 1 view .LVU132
   9:src/menu.c    ****   }
 426              		.loc 1 9 18 is_stmt 0 view .LVU133
 427 0008 0749     		ldr	r1, .L43+4
   8:src/menu.c    ****     current_menu = last_menu;
 428              		.loc 1 8 11 view .LVU134
 429 000a B0F1FF3F 		cmp	r0, #-1
   9:src/menu.c    ****   }
 430              		.loc 1 9 5 is_stmt 1 view .LVU135
   9:src/menu.c    ****   }
 431              		.loc 1 9 18 is_stmt 0 view .LVU136
 432 000e 08BF     		it	eq
 433 0010 0868     		ldreq	r0, [r1]
 434              	.LVL38:
  12:src/menu.c    ****   }
 435              		.loc 1 12 5 is_stmt 1 view .LVU137
  12:src/menu.c    ****   }
 436              		.loc 1 12 18 is_stmt 0 view .LVU138
 437 0012 1060     		str	r0, [r2]
  14:src/menu.c    **** }
 438              		.loc 1 14 3 is_stmt 1 view .LVU139
  14:src/menu.c    **** }
 439              		.loc 1 14 13 is_stmt 0 view .LVU140
 440 0014 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 441              		.loc 1 15 1 view .LVU141
 442 0016 7047     		bx	lr
 443              	.LVL39:
 444              	.L42:
   6:src/menu.c    ****   }
 445              		.loc 1 6 5 is_stmt 1 view .LVU142
   6:src/menu.c    ****   }
 446              		.loc 1 6 18 is_stmt 0 view .LVU143
 447 0018 0021     		movs	r1, #0
 448 001a 1160     		str	r1, [r2]
 449 001c 0249     		ldr	r1, .L43+4
  14:src/menu.c    **** }
 450              		.loc 1 14 3 is_stmt 1 view .LVU144
  14:src/menu.c    **** }
 451              		.loc 1 14 13 is_stmt 0 view .LVU145
 452 001e 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 453              		.loc 1 15 1 view .LVU146
 454 0020 7047     		bx	lr
 455              	.L44:
 456 0022 00BF     		.align	2
 457              	.L43:
 458 0024 00000000 		.word	.LANCHOR1
 459 0028 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/ccj9eXy0.s 			page 16


 460              		.cfi_endproc
 461              	.LFE3:
 463              		.section	.text.get_menu,"ax",%progbits
 464              		.align	1
 465              		.p2align 2,,3
 466              		.global	get_menu
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv4-sp-d16
 472              	get_menu:
 473              	.LFB4:
  17:src/menu.c    ****   return current_menu;
 474              		.loc 1 17 17 is_stmt 1 view -0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
  18:src/menu.c    **** }
 479              		.loc 1 18 3 view .LVU148
  18:src/menu.c    **** }
 480              		.loc 1 18 10 is_stmt 0 view .LVU149
 481 0000 014B     		ldr	r3, .L46
  19:src/menu.c    **** 
 482              		.loc 1 19 1 view .LVU150
 483 0002 1868     		ldr	r0, [r3]
 484 0004 7047     		bx	lr
 485              	.L47:
 486 0006 00BF     		.align	2
 487              	.L46:
 488 0008 00000000 		.word	.LANCHOR1
 489              		.cfi_endproc
 490              	.LFE4:
 492              		.section	.text.set_last_menu,"ax",%progbits
 493              		.align	1
 494              		.p2align 2,,3
 495              		.global	set_last_menu
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu fpv4-sp-d16
 501              	set_last_menu:
 502              	.LFB6:
  25:src/menu.c    ****   set_menu (last_menu);
 503              		.loc 1 25 23 is_stmt 1 view -0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
  26:src/menu.c    **** }
 508              		.loc 1 26 3 view .LVU152
 509 0000 044B     		ldr	r3, .L52
 510              	.LBB51:
 511              	.LBB52:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 512              		.loc 1 4 7 is_stmt 0 view .LVU153
 513 0002 0549     		ldr	r1, .L52+4
ARM GAS  /tmp/ccj9eXy0.s 			page 17


 514              	.LBE52:
 515              	.LBE51:
  26:src/menu.c    **** }
 516              		.loc 1 26 3 view .LVU154
 517 0004 1868     		ldr	r0, [r3]
 518              	.LVL40:
 519              	.LBB54:
 520              	.LBI51:
   3:src/menu.c    ****   int m = current_menu;
 521              		.loc 1 3 6 is_stmt 1 view .LVU155
 522              	.LBB53:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 523              		.loc 1 4 3 view .LVU156
   4:src/menu.c    ****   if (new_menu == current_menu) {
 524              		.loc 1 4 7 is_stmt 0 view .LVU157
 525 0006 0A68     		ldr	r2, [r1]
 526              	.LVL41:
   5:src/menu.c    ****     current_menu = 0;
 527              		.loc 1 5 3 is_stmt 1 view .LVU158
  14:src/menu.c    **** }
 528              		.loc 1 14 13 is_stmt 0 view .LVU159
 529 0008 1A60     		str	r2, [r3]
   5:src/menu.c    ****     current_menu = 0;
 530              		.loc 1 5 6 view .LVU160
 531 000a 9042     		cmp	r0, r2
   6:src/menu.c    ****   }
 532              		.loc 1 6 5 is_stmt 1 view .LVU161
   6:src/menu.c    ****   }
 533              		.loc 1 6 18 is_stmt 0 view .LVU162
 534 000c 08BF     		it	eq
 535 000e 0020     		moveq	r0, #0
 536              	.LVL42:
   8:src/menu.c    ****     current_menu = last_menu;
 537              		.loc 1 8 8 is_stmt 1 view .LVU163
  12:src/menu.c    ****   }
 538              		.loc 1 12 18 is_stmt 0 view .LVU164
 539 0010 0860     		str	r0, [r1]
  14:src/menu.c    **** }
 540              		.loc 1 14 3 is_stmt 1 view .LVU165
 541              	.LVL43:
  14:src/menu.c    **** }
 542              		.loc 1 14 3 is_stmt 0 view .LVU166
 543              	.LBE53:
 544              	.LBE54:
  27:src/menu.c    **** 
 545              		.loc 1 27 1 view .LVU167
 546 0012 7047     		bx	lr
 547              	.L53:
 548              		.align	2
 549              	.L52:
 550 0014 00000000 		.word	.LANCHOR2
 551 0018 00000000 		.word	.LANCHOR1
 552              		.cfi_endproc
 553              	.LFE6:
 555              		.section	.text.mdot,"ax",%progbits
 556              		.align	1
 557              		.p2align 2,,3
ARM GAS  /tmp/ccj9eXy0.s 			page 18


 558              		.global	mdot
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu fpv4-sp-d16
 564              	mdot:
 565              	.LVL44:
 566              	.LFB8:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 567              		.loc 1 289 40 is_stmt 1 view -0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 290:src/menu.c    ****   if (on) {
 572              		.loc 1 290 3 view .LVU169
 290:src/menu.c    ****   if (on) {
 573              		.loc 1 290 6 is_stmt 0 view .LVU170
 574 0000 C728     		cmp	r0, #199
 575 0002 1AD8     		bhi	.L58
 576              	.LVL45:
 577              	.LBB57:
 578              	.LBI57:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 579              		.loc 1 289 6 is_stmt 1 view .LVU171
 580              	.LBB58:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 581              		.loc 1 291 3 view .LVU172
 582              	.LBE58:
 583              	.LBE57:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 584              		.loc 1 289 40 is_stmt 0 view .LVU173
 585 0004 10B4     		push	{r4}
 586              		.cfi_def_cfa_offset 4
 587              		.cfi_offset 4, -4
 588              	.LBB61:
 589              	.LBB59:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 590              		.loc 1 291 6 view .LVU174
 591 0006 63B9     		cbnz	r3, .L61
 592              		.loc 1 295 5 is_stmt 1 view .LVU175
 593              		.loc 1 295 17 is_stmt 0 view .LVU176
 594 0008 0C4B     		ldr	r3, .L62
 595              	.LVL46:
 596              		.loc 1 295 17 view .LVU177
 597 000a 03EB4000 		add	r0, r3, r0, lsl #1
 598              	.LVL47:
 599              		.loc 1 295 25 view .LVU178
 600 000e 0124     		movs	r4, #1
 601              		.loc 1 295 17 view .LVU179
 602 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 603              		.loc 1 295 25 view .LVU180
 604 0012 04FA01F1 		lsl	r1, r4, r1
 605              	.LVL48:
 606              		.loc 1 295 17 view .LVU181
 607 0016 23EA0101 		bic	r1, r3, r1
 608 001a 8154     		strb	r1, [r0, r2]
ARM GAS  /tmp/ccj9eXy0.s 			page 19


 609              	.LVL49:
 610              		.loc 1 295 17 view .LVU182
 611              	.LBE59:
 612              	.LBE61:
 296:src/menu.c    ****   }
 297:src/menu.c    **** }
 613              		.loc 1 297 1 view .LVU183
 614 001c 5DF8044B 		ldr	r4, [sp], #4
 615              		.cfi_remember_state
 616              		.cfi_restore 4
 617              		.cfi_def_cfa_offset 0
 618 0020 7047     		bx	lr
 619              	.LVL50:
 620              	.L61:
 621              		.cfi_restore_state
 622              	.LBB62:
 623              	.LBB60:
 292:src/menu.c    ****   }
 624              		.loc 1 292 5 is_stmt 1 view .LVU184
 292:src/menu.c    ****   }
 625              		.loc 1 292 17 is_stmt 0 view .LVU185
 626 0022 064B     		ldr	r3, .L62
 627              	.LVL51:
 292:src/menu.c    ****   }
 628              		.loc 1 292 17 view .LVU186
 629 0024 03EB4000 		add	r0, r3, r0, lsl #1
 630              	.LVL52:
 292:src/menu.c    ****   }
 631              		.loc 1 292 24 view .LVU187
 632 0028 0124     		movs	r4, #1
 292:src/menu.c    ****   }
 633              		.loc 1 292 17 view .LVU188
 634 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 292:src/menu.c    ****   }
 635              		.loc 1 292 24 view .LVU189
 636 002c 04FA01F1 		lsl	r1, r4, r1
 637              	.LVL53:
 292:src/menu.c    ****   }
 638              		.loc 1 292 17 view .LVU190
 639 0030 1943     		orrs	r1, r1, r3
 640 0032 8154     		strb	r1, [r0, r2]
 641              	.LBE60:
 642              	.LBE62:
 643              		.loc 1 297 1 view .LVU191
 644 0034 5DF8044B 		ldr	r4, [sp], #4
 645              		.cfi_restore 4
 646              		.cfi_def_cfa_offset 0
 647 0038 7047     		bx	lr
 648              	.LVL54:
 649              	.L58:
 650              		.loc 1 297 1 view .LVU192
 651 003a 7047     		bx	lr
 652              	.L63:
 653              		.align	2
 654              	.L62:
 655 003c 00000000 		.word	.LANCHOR0
 656              		.cfi_endproc
ARM GAS  /tmp/ccj9eXy0.s 			page 20


 657              	.LFE8:
 659              		.section	.text.display_menu,"ax",%progbits
 660              		.align	1
 661              		.p2align 2,,3
 662              		.global	display_menu
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu fpv4-sp-d16
 668              	display_menu:
 669              	.LVL55:
 670              	.LFB9:
 298:src/menu.c    **** 
 299:src/menu.c    **** 
 300:src/menu.c    **** void display_menu (int current_menu) {
 671              		.loc 1 300 38 is_stmt 1 view -0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 301:src/menu.c    ****   int len = 0;
 675              		.loc 1 301 3 view .LVU194
 302:src/menu.c    ****   lcd_fill_rect (0, 189, 400, 51, 0); // clear bottom 51 rows for menu 
 676              		.loc 1 302 3 view .LVU195
 300:src/menu.c    ****   int len = 0;
 677              		.loc 1 300 38 is_stmt 0 view .LVU196
 678 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 679              		.cfi_def_cfa_offset 36
 680              		.cfi_offset 4, -36
 681              		.cfi_offset 5, -32
 682              		.cfi_offset 6, -28
 683              		.cfi_offset 7, -24
 684              		.cfi_offset 8, -20
 685              		.cfi_offset 9, -16
 686              		.cfi_offset 10, -12
 687              		.cfi_offset 11, -8
 688              		.cfi_offset 14, -4
 689 0004 83B0     		sub	sp, sp, #12
 690              		.cfi_def_cfa_offset 48
 691              		.loc 1 302 3 view .LVU197
 692 0006 0024     		movs	r4, #0
 693 0008 4FF4C872 		mov	r2, #400
 694 000c 3D4D     		ldr	r5, .L82
 695 000e 3E4F     		ldr	r7, .L82+4
 696 0010 0094     		str	r4, [sp]
 697 0012 3323     		movs	r3, #51
 698 0014 BD21     		movs	r1, #189
 300:src/menu.c    ****   int len = 0;
 699              		.loc 1 300 38 view .LVU198
 700 0016 0646     		mov	r6, r0
 701              		.loc 1 302 3 view .LVU199
 702 0018 2046     		mov	r0, r4
 703              	.LVL56:
 704              		.loc 1 302 3 view .LVU200
 705 001a B847     		blx	r7
 706              	.LVL57:
 303:src/menu.c    ****   //  if (current_menu == 0) return; // Menu 0 is blank
 304:src/menu.c    ****   // Not blank now - includes arrow and cmplx like all the others.
ARM GAS  /tmp/ccj9eXy0.s 			page 21


 305:src/menu.c    ****   lcd_fillLine (189, 0xff); // lines count from line 1?
 707              		.loc 1 305 3 is_stmt 1 view .LVU201
 708 001c 3B4B     		ldr	r3, .L82+8
 709 001e FF21     		movs	r1, #255
 710 0020 BD20     		movs	r0, #189
 711 0022 9847     		blx	r3
 712              	.LVL58:
 306:src/menu.c    ****   //Clear previous menu
 307:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 713              		.loc 1 307 3 view .LVU202
 714              	.LBB63:
 715              		.loc 1 307 8 view .LVU203
 716              		.loc 1 307 21 view .LVU204
 308:src/menu.c    ****     mdots[col][0] = 0;
 717              		.loc 1 308 19 is_stmt 0 view .LVU205
 718 0024 2246     		mov	r2, r4
 719 0026 05F5C871 		add	r1, r5, #400
 720              	.LBE63:
 305:src/menu.c    ****   //Clear previous menu
 721              		.loc 1 305 3 view .LVU206
 722 002a 2B46     		mov	r3, r5
 723              	.LVL59:
 724              	.L65:
 725              	.LBB64:
 726              		.loc 1 308 5 is_stmt 1 discriminator 3 view .LVU207
 727              		.loc 1 308 19 is_stmt 0 discriminator 3 view .LVU208
 728 002c 1A70     		strb	r2, [r3]
 309:src/menu.c    ****     mdots[col][1] = 0;
 729              		.loc 1 309 5 is_stmt 1 discriminator 3 view .LVU209
 730              		.loc 1 309 19 is_stmt 0 discriminator 3 view .LVU210
 731 002e 5A70     		strb	r2, [r3, #1]
 307:src/menu.c    ****     mdots[col][0] = 0;
 732              		.loc 1 307 32 is_stmt 1 discriminator 3 view .LVU211
 307:src/menu.c    ****     mdots[col][0] = 0;
 733              		.loc 1 307 21 discriminator 3 view .LVU212
 734 0030 0233     		adds	r3, r3, #2
 307:src/menu.c    ****     mdots[col][0] = 0;
 735              		.loc 1 307 3 is_stmt 0 discriminator 3 view .LVU213
 736 0032 9942     		cmp	r1, r3
 737 0034 FAD1     		bne	.L65
 738 0036 364B     		ldr	r3, .L82+12
 739 0038 D022     		movs	r2, #208
 740 003a 02FB0636 		mla	r6, r2, r6, r3
 741              	.LVL60:
 307:src/menu.c    ****     mdots[col][0] = 0;
 742              		.loc 1 307 3 discriminator 3 view .LVU214
 743 003e 2036     		adds	r6, r6, #32
 307:src/menu.c    ****     mdots[col][0] = 0;
 744              		.loc 1 307 3 view .LVU215
 745 0040 0024     		movs	r4, #0
 746              	.LVL61:
 747              	.L66:
 307:src/menu.c    ****     mdots[col][0] = 0;
 748              		.loc 1 307 3 view .LVU216
 749              	.LBE64:
 750              	.LBB65:
 310:src/menu.c    ****   }
ARM GAS  /tmp/ccj9eXy0.s 			page 22


 311:src/menu.c    **** 
 312:src/menu.c    ****   // Draw menu items
 313:src/menu.c    ****   // 
 314:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 315:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 316:src/menu.c    ****     // Unshifted first
 317:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small fo
 751              		.loc 1 317 5 is_stmt 1 view .LVU217
 752              		.loc 1 317 11 is_stmt 0 view .LVU218
 753 0042 0021     		movs	r1, #0
 754 0044 3046     		mov	r0, r6
 755 0046 FFF7FEFF 		bl	pixel_length
 756              	.LVL62:
 318:src/menu.c    ****     /*
 319:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 320:src/menu.c    ****     */
 321:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 )
 757              		.loc 1 321 5 is_stmt 1 view .LVU219
 758              		.loc 1 321 87 is_stmt 0 view .LVU220
 759 004a C0F12000 		rsb	r0, r0, #32
 760              	.LVL63:
 761              		.loc 1 321 93 view .LVU221
 762 004e 00EBD070 		add	r0, r0, r0, lsr #31
 763              		.loc 1 321 5 view .LVU222
 764 0052 04EB6001 		add	r1, r4, r0, asr #1
 765 0056 0022     		movs	r2, #0
 766 0058 3046     		mov	r0, r6
 767 005a 06F10807 		add	r7, r6, #8
 768 005e FFF7FEFF 		bl	set_menu_label.constprop.0
 769              	.LVL64:
 322:src/menu.c    ****     // Now shifted ...	
 323:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small font
 770              		.loc 1 323 5 is_stmt 1 view .LVU223
 771              		.loc 1 323 11 is_stmt 0 view .LVU224
 772 0062 0021     		movs	r1, #0
 773 0064 3846     		mov	r0, r7
 774 0066 FFF7FEFF 		bl	pixel_length
 775              	.LVL65:
 324:src/menu.c    ****     len = item*32 + (32-len)/2;
 776              		.loc 1 324 5 is_stmt 1 view .LVU225
 777              		.loc 1 324 24 is_stmt 0 view .LVU226
 778 006a C0F12000 		rsb	r0, r0, #32
 779              	.LVL66:
 780              		.loc 1 324 29 view .LVU227
 781 006e 00EBD070 		add	r0, r0, r0, lsr #31
 782              	.LVL67:
 325:src/menu.c    ****     if (len<0) len = 0;
 783              		.loc 1 325 5 is_stmt 1 view .LVU228
 324:src/menu.c    ****     len = item*32 + (32-len)/2;
 784              		.loc 1 324 9 is_stmt 0 view .LVU229
 785 0072 04EB6001 		add	r1, r4, r0, asr #1
 786              	.LVL68:
 324:src/menu.c    ****     len = item*32 + (32-len)/2;
 787              		.loc 1 324 9 view .LVU230
 788 0076 C729     		cmp	r1, #199
 789 0078 A8BF     		it	ge
 790 007a C721     		movge	r1, #199
ARM GAS  /tmp/ccj9eXy0.s 			page 23


 791              	.LVL69:
 326:src/menu.c    ****     if (len>199) len = 199;
 327:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 792              		.loc 1 327 5 is_stmt 1 view .LVU231
 793 007c 21EAE171 		bic	r1, r1, r1, asr #31
 794              	.LVL70:
 795              		.loc 1 327 5 is_stmt 0 view .LVU232
 796 0080 3846     		mov	r0, r7
 797 0082 2034     		adds	r4, r4, #32
 798 0084 0122     		movs	r2, #1
 799 0086 FFF7FEFF 		bl	set_menu_label.constprop.0
 800              	.LVL71:
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 801              		.loc 1 314 32 is_stmt 1 view .LVU233
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 802              		.loc 1 314 22 view .LVU234
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 803              		.loc 1 314 3 is_stmt 0 view .LVU235
 804 008a C02C     		cmp	r4, #192
 805 008c 06F12006 		add	r6, r6, #32
 806 0090 D7D1     		bne	.L66
 807 0092 204E     		ldr	r6, .L82+16
 808              	.LBE65:
 809              	.LBB66:
 810              	.LBB67:
 328:src/menu.c    ****   }
 329:src/menu.c    **** 
 330:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 331:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 332:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 333:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 334:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 811              		.loc 1 334 2 view .LVU236
 812 0094 DFF87090 		ldr	r9, .L82+4
 813 0098 6FEA050A 		mvn	r10, r5
 814 009c 06F5C87B 		add	fp, r6, #400
 815              	.LBE67:
 816              	.LBE66:
 817              	.LBB69:
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 818              		.loc 1 314 3 view .LVU237
 819 00a0 771E     		subs	r7, r6, #1
 820              	.LBE69:
 821              	.LBB70:
 822              	.LBB68:
 823              		.loc 1 334 2 view .LVU238
 824 00a2 4FF0FF08 		mov	r8, #255
 825              	.L67:
 826              	.LVL72:
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 827              		.loc 1 331 23 is_stmt 1 view .LVU239
 828 00a6 0AEB0605 		add	r5, r10, r6
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 829              		.loc 1 331 14 is_stmt 0 view .LVU240
 830 00aa 0024     		movs	r4, #0
 831              	.LVL73:
 832              	.L70:
ARM GAS  /tmp/ccj9eXy0.s 			page 24


 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 833              		.loc 1 332 7 is_stmt 1 view .LVU241
 834              		.loc 1 334 2 view .LVU242
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 835              		.loc 1 332 22 is_stmt 0 view .LVU243
 836 00ac 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 837              		.loc 1 332 40 view .LVU244
 838 00b0 2241     		asrs	r2, r2, r4
 839              		.loc 1 334 2 view .LVU245
 840 00b2 A4EB8401 		sub	r1, r4, r4, lsl #2
 841 00b6 0323     		movs	r3, #3
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 842              		.loc 1 332 10 view .LVU246
 843 00b8 12F0010F 		tst	r2, #1
 844              		.loc 1 334 2 view .LVU247
 845 00bc 01F1E901 		add	r1, r1, #233
 846 00c0 1A46     		mov	r2, r3
 847 00c2 2846     		mov	r0, r5
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 848              		.loc 1 332 10 view .LVU248
 849 00c4 02D0     		beq	.L68
 850              		.loc 1 334 2 view .LVU249
 851 00c6 CDF80080 		str	r8, [sp]
 852 00ca C847     		blx	r9
 853              	.LVL74:
 854              	.L68:
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 855              		.loc 1 335 7 is_stmt 1 view .LVU250
 336:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 337:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 856              		.loc 1 337 2 view .LVU251
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 857              		.loc 1 335 22 is_stmt 0 view .LVU252
 858 00cc 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 859              		.loc 1 335 40 view .LVU253
 860 00ce 2241     		asrs	r2, r2, r4
 861              		.loc 1 337 2 view .LVU254
 862 00d0 A4EB8401 		sub	r1, r4, r4, lsl #2
 863 00d4 0323     		movs	r3, #3
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 864              		.loc 1 335 10 view .LVU255
 865 00d6 12F0010F 		tst	r2, #1
 866              		.loc 1 337 2 view .LVU256
 867 00da 01F1D001 		add	r1, r1, #208
 868 00de 1A46     		mov	r2, r3
 869 00e0 04F10104 		add	r4, r4, #1
 870              	.LVL75:
 871              		.loc 1 337 2 view .LVU257
 872 00e4 2846     		mov	r0, r5
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 873              		.loc 1 335 10 view .LVU258
 874 00e6 02D0     		beq	.L69
 875              		.loc 1 337 2 view .LVU259
 876 00e8 CDF80080 		str	r8, [sp]
 877 00ec C847     		blx	r9
ARM GAS  /tmp/ccj9eXy0.s 			page 25


 878              	.LVL76:
 879              	.L69:
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 880              		.loc 1 331 32 is_stmt 1 discriminator 2 view .LVU260
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 881              		.loc 1 331 23 discriminator 2 view .LVU261
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 882              		.loc 1 331 5 is_stmt 0 discriminator 2 view .LVU262
 883 00ee 062C     		cmp	r4, #6
 884 00f0 DCD1     		bne	.L70
 885              	.LBE68:
 330:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 886              		.loc 1 330 32 is_stmt 1 discriminator 2 view .LVU263
 330:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 887              		.loc 1 330 21 discriminator 2 view .LVU264
 888 00f2 0236     		adds	r6, r6, #2
 330:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 889              		.loc 1 330 3 is_stmt 0 discriminator 2 view .LVU265
 890 00f4 B345     		cmp	fp, r6
 891 00f6 07F10207 		add	r7, r7, #2
 892 00fa D4D1     		bne	.L67
 893              	.LBE70:
 338:src/menu.c    ****     }
 339:src/menu.c    ****   }
 340:src/menu.c    **** }
 894              		.loc 1 340 1 view .LVU266
 895 00fc 03B0     		add	sp, sp, #12
 896              		.cfi_def_cfa_offset 36
 897              		@ sp needed
 898 00fe BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 899              	.LVL77:
 900              	.L83:
 901              		.loc 1 340 1 view .LVU267
 902 0102 00BF     		.align	2
 903              	.L82:
 904 0104 00000000 		.word	.LANCHOR0
 905 0108 3D020008 		.word	134218301
 906 010c 4D020008 		.word	134218317
 907 0110 00000000 		.word	.LANCHOR3
 908 0114 01000000 		.word	.LANCHOR0+1
 909              		.cfi_endproc
 910              	.LFE9:
 912              		.section	.text.display_current_menu,"ax",%progbits
 913              		.align	1
 914              		.p2align 2,,3
 915              		.global	display_current_menu
 916              		.syntax unified
 917              		.thumb
 918              		.thumb_func
 919              		.fpu fpv4-sp-d16
 921              	display_current_menu:
 922              	.LFB5:
  21:src/menu.c    ****   display_menu (current_menu);
 923              		.loc 1 21 30 is_stmt 1 view -0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 0
 926              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccj9eXy0.s 			page 26


 927              		@ link register save eliminated.
  22:src/menu.c    **** }
 928              		.loc 1 22 3 view .LVU269
 929 0000 014B     		ldr	r3, .L85
 930 0002 1868     		ldr	r0, [r3]
 931 0004 FFF7FEBF 		b	display_menu
 932              	.LVL78:
 933              	.L86:
 934              		.align	2
 935              	.L85:
 936 0008 00000000 		.word	.LANCHOR1
 937              		.cfi_endproc
 938              	.LFE5:
 940              		.section	.text.shutdown,"ax",%progbits
 941              		.align	1
 942              		.p2align 2,,3
 943              		.global	shutdown
 944              		.syntax unified
 945              		.thumb
 946              		.thumb_func
 947              		.fpu fpv4-sp-d16
 949              	shutdown:
 950              	.LFB11:
 951              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
ARM GAS  /tmp/ccj9eXy0.s 			page 27


  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** const uint8_t mid_menu[] = {
  46:src/console.c ****     MI_SYSTEM_ENTER,
  47:src/console.c ****     0 }; // Terminator
  48:src/console.c **** 
  49:src/console.c **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  50:src/console.c **** 
  51:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  52:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  53:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  54:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  55:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  56:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  57:src/console.c **** 
  58:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  59:src/console.c **** 
  60:src/console.c **** static struct _ndmap remap (const int c) {
  61:src/console.c **** 
  62:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  63:src/console.c **** 
  64:src/console.c **** #include "keytran.c"
  65:src/console.c **** 
  66:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  67:src/console.c **** 
  68:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  69:src/console.c **** 
  70:src/console.c ****   if (c == 44 ) {
  71:src/console.c ****     // Start click 
  72:src/console.c ****     start_buzzer_freq(4400); sys_delay(10); stop_buzzer();
  73:src/console.c ****     // Make screenshot - allow to report errors
  74:src/console.c ****     if ( create_screenshot(1) == 2 ) {
  75:src/console.c ****       // Was error just wait for confirmation
  76:src/console.c ****       wait_for_key_press();
  77:src/console.c ****     }
  78:src/console.c ****     // End click
  79:src/console.c ****     start_buzzer_freq(8800); sys_delay(10); stop_buzzer();
  80:src/console.c ****     return no_key;
  81:src/console.c ****   }
  82:src/console.c **** 
  83:src/console.c ****   
  84:src/console.c ****   if ( get_alpha_state() ) {
  85:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  86:src/console.c ****       switch (cur_shift()) { 
  87:src/console.c ****       case SHIFT_N:
  88:src/console.c **** 	return mapping_none[c]; // N -> F
  89:src/console.c **** 	break;
  90:src/console.c ****       case SHIFT_F:
ARM GAS  /tmp/ccj9eXy0.s 			page 28


  91:src/console.c **** 	return mapping_fshift[c]; // F -> G
  92:src/console.c **** 	break;
  93:src/console.c ****       case SHIFT_G:
  94:src/console.c **** 	return h_shift; // G -> H
  95:src/console.c **** 	break;
  96:src/console.c ****       case SHIFT_H:
  97:src/console.c **** 	return h_shift; // H -> N
  98:src/console.c ****       default:
  99:src/console.c **** 	return no_change;
 100:src/console.c ****       }
 101:src/console.c ****     }
 102:src/console.c ****     return mapping_alpha [c];
 103:src/console.c ****   }
 104:src/console.c ****     
 105:src/console.c ****   switch (c) {
 106:src/console.c ****   case KEY_F1:
 107:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 109:src/console.c ****   case KEY_F2:
 110:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 112:src/console.c ****   case KEY_F3:
 113:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 115:src/console.c ****   case KEY_F4:
 116:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 118:src/console.c ****   case KEY_F5:
 119:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 121:src/console.c ****   case KEY_F6:
 122:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 124:src/console.c ****   }
 125:src/console.c ****   
 126:src/console.c ****   switch (cur_shift()) {
 127:src/console.c ****   case SHIFT_N:    
 128:src/console.c ****     return mapping_none[c];
 129:src/console.c ****     break;
 130:src/console.c ****   case SHIFT_F:
 131:src/console.c ****     return mapping_fshift[c];
 132:src/console.c ****     break;
 133:src/console.c ****   case SHIFT_G:
 134:src/console.c ****     return mapping_gshift[c];
 135:src/console.c ****     break;
 136:src/console.c ****   default:
 137:src/console.c ****     return no_change;
 138:src/console.c ****   }
 139:src/console.c **** }
 140:src/console.c **** 
 141:src/console.c **** #endif
 142:src/console.c **** 
 143:src/console.c **** void shutdown( void )
 144:src/console.c **** {
 952              		.loc 2 144 1 view -0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccj9eXy0.s 			page 29


 955              		@ frame_needed = 0, uses_anonymous_args = 0
 145:src/console.c **** #ifndef DM42
 146:src/console.c ****   checksum_all();
 147:src/console.c ****   setuptty( 1 );
 148:src/console.c ****   save_statefile( NULL );
 149:src/console.c ****   exit( 0 );
 150:src/console.c **** #else
 151:src/console.c ****   save_statefile(1);
 956              		.loc 2 151 3 view .LVU271
 144:src/console.c **** #ifndef DM42
 957              		.loc 2 144 1 is_stmt 0 view .LVU272
 958 0000 08B5     		push	{r3, lr}
 959              		.cfi_def_cfa_offset 8
 960              		.cfi_offset 3, -8
 961              		.cfi_offset 14, -4
 962              		.loc 2 151 3 view .LVU273
 963 0002 0120     		movs	r0, #1
 964 0004 FFF7FEFF 		bl	save_statefile
 965              	.LVL79:
 152:src/console.c ****   SET_ST(STAT_PGM_END);
 966              		.loc 2 152 3 is_stmt 1 view .LVU274
 967 0008 024A     		ldr	r2, .L89
 968 000a 1368     		ldr	r3, [r2]
 969 000c 43F40073 		orr	r3, r3, #512
 970 0010 1360     		str	r3, [r2]
 153:src/console.c **** #endif
 154:src/console.c **** }
 971              		.loc 2 154 1 is_stmt 0 view .LVU275
 972 0012 08BD     		pop	{r3, pc}
 973              	.L90:
 974              		.align	2
 975              	.L89:
 976 0014 00200010 		.word	268443648
 977              		.cfi_endproc
 978              	.LFE11:
 980              		.section	.text.is_key_pressed,"ax",%progbits
 981              		.align	1
 982              		.p2align 2,,3
 983              		.global	is_key_pressed
 984              		.syntax unified
 985              		.thumb
 986              		.thumb_func
 987              		.fpu fpv4-sp-d16
 989              	is_key_pressed:
 990              	.LFB12:
 155:src/console.c **** 
 156:src/console.c **** 
 157:src/console.c **** /*
 158:src/console.c ****  *  Dummies
 159:src/console.c ****  */
 160:src/console.c **** int is_key_pressed(void) 
 161:src/console.c **** {
 991              		.loc 2 161 1 is_stmt 1 view -0
 992              		.cfi_startproc
 993              		@ args = 0, pretend = 0, frame = 0
 994              		@ frame_needed = 0, uses_anonymous_args = 0
 162:src/console.c **** #ifdef DM42
ARM GAS  /tmp/ccj9eXy0.s 			page 30


 163:src/console.c ****   return !key_empty();
 995              		.loc 2 163 3 view .LVU277
 161:src/console.c **** #ifdef DM42
 996              		.loc 2 161 1 is_stmt 0 view .LVU278
 997 0000 08B5     		push	{r3, lr}
 998              		.cfi_def_cfa_offset 8
 999              		.cfi_offset 3, -8
 1000              		.cfi_offset 14, -4
 1001              		.loc 2 163 11 view .LVU279
 1002 0002 034B     		ldr	r3, .L93
 1003 0004 9847     		blx	r3
 1004              	.LVL80:
 164:src/console.c **** #else
 165:src/console.c ****   return 0;
 166:src/console.c **** #endif
 167:src/console.c **** }
 1005              		.loc 2 167 1 view .LVU280
 1006 0006 B0FA80F0 		clz	r0, r0
 1007 000a 4009     		lsrs	r0, r0, #5
 1008 000c 08BD     		pop	{r3, pc}
 1009              	.L94:
 1010 000e 00BF     		.align	2
 1011              	.L93:
 1012 0010 7D030008 		.word	134218621
 1013              		.cfi_endproc
 1014              	.LFE12:
 1016              		.section	.text.get_key,"ax",%progbits
 1017              		.align	1
 1018              		.p2align 2,,3
 1019              		.global	get_key
 1020              		.syntax unified
 1021              		.thumb
 1022              		.thumb_func
 1023              		.fpu fpv4-sp-d16
 1025              	get_key:
 1026              	.LFB13:
 168:src/console.c **** 
 169:src/console.c **** int get_key(void)
 170:src/console.c **** {
 1027              		.loc 2 170 1 is_stmt 1 view -0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 0
 1030              		@ frame_needed = 0, uses_anonymous_args = 0
 1031              		@ link register save eliminated.
 171:src/console.c ****   #ifdef DM42
 172:src/console.c ****   return key_pop();
 1032              		.loc 2 172 3 view .LVU282
 1033              		.loc 2 172 10 is_stmt 0 view .LVU283
 1034 0000 004B     		ldr	r3, .L96
 1035 0002 1847     		bx	r3
 1036              	.LVL81:
 1037              	.L97:
 1038              		.align	2
 1039              	.L96:
 1040 0004 89030008 		.word	134218633
 1041              		.cfi_endproc
 1042              	.LFE13:
ARM GAS  /tmp/ccj9eXy0.s 			page 31


 1044              		.section	.text.put_key,"ax",%progbits
 1045              		.align	1
 1046              		.p2align 2,,3
 1047              		.global	put_key
 1048              		.syntax unified
 1049              		.thumb
 1050              		.thumb_func
 1051              		.fpu fpv4-sp-d16
 1053              	put_key:
 1054              	.LVL82:
 1055              	.LFB14:
 173:src/console.c ****   #else
 174:src/console.c ****   return 0;
 175:src/console.c ****   #endif
 176:src/console.c **** }
 177:src/console.c **** 
 178:src/console.c **** int put_key( int k )
 179:src/console.c **** {
 1056              		.loc 2 179 1 is_stmt 1 view -0
 1057              		.cfi_startproc
 1058              		@ args = 0, pretend = 0, frame = 0
 1059              		@ frame_needed = 0, uses_anonymous_args = 0
 1060              		@ link register save eliminated.
 180:src/console.c ****   #ifdef DM42
 181:src/console.c ****   return key_push(k);
 1061              		.loc 2 181 3 view .LVU285
 1062              		.loc 2 181 10 is_stmt 0 view .LVU286
 1063 0000 004B     		ldr	r3, .L99
 1064 0002 1847     		bx	r3
 1065              	.LVL83:
 1066              	.L100:
 1067              		.loc 2 181 10 view .LVU287
 1068              		.align	2
 1069              	.L99:
 1070 0004 81030008 		.word	134218625
 1071              		.cfi_endproc
 1072              	.LFE14:
 1074              		.section	.text.shift_down,"ax",%progbits
 1075              		.align	1
 1076              		.p2align 2,,3
 1077              		.global	shift_down
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1081              		.fpu fpv4-sp-d16
 1083              	shift_down:
 1084              	.LFB15:
 182:src/console.c ****   #else
 183:src/console.c ****   return k;
 184:src/console.c ****   #endif
 185:src/console.c **** }
 186:src/console.c **** 
 187:src/console.c **** enum shifts shift_down(void)
 188:src/console.c **** {
 1085              		.loc 2 188 1 is_stmt 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccj9eXy0.s 			page 32


 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089              		@ link register save eliminated.
 189:src/console.c **** 	return SHIFT_N;
 1090              		.loc 2 189 2 view .LVU289
 190:src/console.c **** }
 1091              		.loc 2 190 1 is_stmt 0 view .LVU290
 1092 0000 0020     		movs	r0, #0
 1093 0002 7047     		bx	lr
 1094              		.cfi_endproc
 1095              	.LFE15:
 1097              		.section	.text.start_key_timer,"ax",%progbits
 1098              		.align	1
 1099              		.p2align 2,,3
 1100              		.global	start_key_timer
 1101              		.syntax unified
 1102              		.thumb
 1103              		.thumb_func
 1104              		.fpu fpv4-sp-d16
 1106              	start_key_timer:
 1107              	.LFB16:
 191:src/console.c **** 
 192:src/console.c **** #ifndef DM42   // No serial operations for DM42
 193:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 194:src/console.c **** /*
 195:src/console.c ****  *  Open a COM port for transmission
 196:src/console.c ****  */
 197:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 198:src/console.c **** {
 199:src/console.c **** 	return 0;
 200:src/console.c **** }
 201:src/console.c **** 
 202:src/console.c **** 
 203:src/console.c **** /*
 204:src/console.c ****  *  Close the COM port after transmission is complete
 205:src/console.c ****  */
 206:src/console.c **** extern void close_port( void )
 207:src/console.c **** {
 208:src/console.c **** }
 209:src/console.c **** 
 210:src/console.c **** 
 211:src/console.c **** /*
 212:src/console.c ****  *  Output a single byte to the serial
 213:src/console.c ****  */
 214:src/console.c **** void put_byte( unsigned char byte )
 215:src/console.c **** {
 216:src/console.c **** 	report_err(ERR_PROG_BAD);
 217:src/console.c **** }
 218:src/console.c **** 
 219:src/console.c **** 
 220:src/console.c **** /*
 221:src/console.c ****  *  Force buffer flush
 222:src/console.c ****  */
 223:src/console.c **** void flush_comm( void )
 224:src/console.c **** {
 225:src/console.c **** }
 226:src/console.c **** 
 227:src/console.c **** #endif
ARM GAS  /tmp/ccj9eXy0.s 			page 33


 228:src/console.c **** #endif
 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Main loop
 233:src/console.c ****  */
 234:src/console.c **** #ifdef DM42
 235:src/console.c **** void start_key_timer (void);
 236:src/console.c **** int keyticks (void);
 237:src/console.c **** 
 238:src/console.c **** static int start_ticks;
 239:src/console.c **** 
 240:src/console.c **** void start_key_timer() {
 1108              		.loc 2 240 24 is_stmt 1 view -0
 1109              		.cfi_startproc
 1110              		@ args = 0, pretend = 0, frame = 0
 1111              		@ frame_needed = 0, uses_anonymous_args = 0
 241:src/console.c ****     start_ticks = get_rtc_ticks();
 1112              		.loc 2 241 5 view .LVU292
 240:src/console.c ****     start_ticks = get_rtc_ticks();
 1113              		.loc 2 240 24 is_stmt 0 view .LVU293
 1114 0000 08B5     		push	{r3, lr}
 1115              		.cfi_def_cfa_offset 8
 1116              		.cfi_offset 3, -8
 1117              		.cfi_offset 14, -4
 1118              		.loc 2 241 19 view .LVU294
 1119 0002 024B     		ldr	r3, .L104
 1120 0004 9847     		blx	r3
 1121              	.LVL84:
 1122              		.loc 2 241 17 view .LVU295
 1123 0006 024B     		ldr	r3, .L104+4
 1124 0008 1860     		str	r0, [r3]
 242:src/console.c **** }
 1125              		.loc 2 242 1 view .LVU296
 1126 000a 08BD     		pop	{r3, pc}
 1127              	.L105:
 1128              		.align	2
 1129              	.L104:
 1130 000c B9040008 		.word	134218937
 1131 0010 00000000 		.word	.LANCHOR4
 1132              		.cfi_endproc
 1133              	.LFE16:
 1135              		.section	.text.keyticks,"ax",%progbits
 1136              		.align	1
 1137              		.p2align 2,,3
 1138              		.global	keyticks
 1139              		.syntax unified
 1140              		.thumb
 1141              		.thumb_func
 1142              		.fpu fpv4-sp-d16
 1144              	keyticks:
 1145              	.LFB17:
 243:src/console.c **** 
 244:src/console.c **** int keyticks () {
 1146              		.loc 2 244 17 is_stmt 1 view -0
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccj9eXy0.s 			page 34


 1149              		@ frame_needed = 0, uses_anonymous_args = 0
 245:src/console.c ****   int i;
 1150              		.loc 2 245 3 view .LVU298
 246:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1151              		.loc 2 246 3 view .LVU299
 244:src/console.c ****   int i;
 1152              		.loc 2 244 17 is_stmt 0 view .LVU300
 1153 0000 08B5     		push	{r3, lr}
 1154              		.cfi_def_cfa_offset 8
 1155              		.cfi_offset 3, -8
 1156              		.cfi_offset 14, -4
 1157              		.loc 2 246 8 view .LVU301
 1158 0002 054B     		ldr	r3, .L108
 1159 0004 9847     		blx	r3
 1160              	.LVL85:
 247:src/console.c ****   return i >> 8;
 1161              		.loc 2 247 3 is_stmt 1 view .LVU302
 246:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1162              		.loc 2 246 24 is_stmt 0 view .LVU303
 1163 0006 054B     		ldr	r3, .L108+4
 1164 0008 1B68     		ldr	r3, [r3]
 1165 000a C01A     		subs	r0, r0, r3
 1166              	.LVL86:
 246:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1167              		.loc 2 246 38 view .LVU304
 1168 000c 00EB8000 		add	r0, r0, r0, lsl #2
 248:src/console.c **** }
 1169              		.loc 2 248 1 view .LVU305
 1170 0010 40F3D710 		sbfx	r0, r0, #7, #24
 1171 0014 08BD     		pop	{r3, pc}
 1172              	.L109:
 1173 0016 00BF     		.align	2
 1174              	.L108:
 1175 0018 B9040008 		.word	134218937
 1176 001c 00000000 		.word	.LANCHOR4
 1177              		.cfi_endproc
 1178              	.LFE17:
 1180              		.section	.text.is_paused,"ax",%progbits
 1181              		.align	1
 1182              		.p2align 2,,3
 1183              		.global	is_paused
 1184              		.syntax unified
 1185              		.thumb
 1186              		.thumb_func
 1187              		.fpu fpv4-sp-d16
 1189              	is_paused:
 1190              	.LFB18:
 249:src/console.c **** 
 250:src/console.c **** int is_paused () {
 1191              		.loc 2 250 18 is_stmt 1 view -0
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 0
 1194              		@ frame_needed = 0, uses_anonymous_args = 0
 1195              		@ link register save eliminated.
 251:src/console.c ****   return sys_timer_active(1);
 1196              		.loc 2 251 3 view .LVU307
 1197              		.loc 2 251 10 is_stmt 0 view .LVU308
ARM GAS  /tmp/ccj9eXy0.s 			page 35


 1198 0000 014B     		ldr	r3, .L111
 1199 0002 0120     		movs	r0, #1
 1200 0004 1847     		bx	r3
 1201              	.LVL87:
 1202              	.L112:
 1203 0006 00BF     		.align	2
 1204              	.L111:
 1205 0008 FD030008 		.word	134218749
 1206              		.cfi_endproc
 1207              	.LFE18:
 1209              		.section	.text.start_pause,"ax",%progbits
 1210              		.align	1
 1211              		.p2align 2,,3
 1212              		.global	start_pause
 1213              		.syntax unified
 1214              		.thumb
 1215              		.thumb_func
 1216              		.fpu fpv4-sp-d16
 1218              	start_pause:
 1219              	.LVL88:
 1220              	.LFB19:
 252:src/console.c **** }
 253:src/console.c **** 
 254:src/console.c **** void start_pause (int i) {
 1221              		.loc 2 254 26 is_stmt 1 view -0
 1222              		.cfi_startproc
 1223              		@ args = 0, pretend = 0, frame = 0
 1224              		@ frame_needed = 0, uses_anonymous_args = 0
 1225              		@ link register save eliminated.
 255:src/console.c ****   if ( i >= 0 ) {
 1226              		.loc 2 255 3 view .LVU310
 1227              		.loc 2 255 6 is_stmt 0 view .LVU311
 1228 0000 0028     		cmp	r0, #0
 1229              		.loc 2 255 6 view .LVU312
 1230 0002 02DB     		blt	.L113
 256:src/console.c ****     Pause = i;
 1231              		.loc 2 256 5 is_stmt 1 view .LVU313
 1232              		.loc 2 256 11 is_stmt 0 view .LVU314
 1233 0004 014B     		ldr	r3, .L115
 1234 0006 C0B2     		uxtb	r0, r0
 1235              	.LVL89:
 1236              		.loc 2 256 11 view .LVU315
 1237 0008 1870     		strb	r0, [r3]
 257:src/console.c ****   }
 258:src/console.c ****   return;
 1238              		.loc 2 258 3 is_stmt 1 view .LVU316
 1239              	.L113:
 259:src/console.c **** }
 1240              		.loc 2 259 1 is_stmt 0 view .LVU317
 1241 000a 7047     		bx	lr
 1242              	.L116:
 1243              		.align	2
 1244              	.L115:
 1245 000c 00000000 		.word	Pause
 1246              		.cfi_endproc
 1247              	.LFE19:
 1249              		.section	.text.init_graphics,"ax",%progbits
ARM GAS  /tmp/ccj9eXy0.s 			page 36


 1250              		.align	1
 1251              		.p2align 2,,3
 1252              		.global	init_graphics
 1253              		.syntax unified
 1254              		.thumb
 1255              		.thumb_func
 1256              		.fpu fpv4-sp-d16
 1258              	init_graphics:
 1259              	.LFB20:
 260:src/console.c ****     
 261:src/console.c ****   
 262:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 263:src/console.c **** char print_string[22];
 264:src/console.c **** int n_p = 0;
 265:src/console.c **** 
 266:src/console.c **** void init_graphics() {
 1260              		.loc 2 266 22 is_stmt 1 view -0
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 0
 1263              		@ frame_needed = 0, uses_anonymous_args = 0
 267:src/console.c ****   lcd_switchFont(fReg,3); //Font number 3
 1264              		.loc 2 267 3 view .LVU319
 266:src/console.c ****   lcd_switchFont(fReg,3); //Font number 3
 1265              		.loc 2 266 22 is_stmt 0 view .LVU320
 1266 0000 10B5     		push	{r4, lr}
 1267              		.cfi_def_cfa_offset 8
 1268              		.cfi_offset 4, -8
 1269              		.cfi_offset 14, -4
 1270              		.loc 2 267 3 view .LVU321
 1271 0002 094C     		ldr	r4, .L119
 1272 0004 094B     		ldr	r3, .L119+4
 1273 0006 A06B     		ldr	r0, [r4, #56]
 1274 0008 0321     		movs	r1, #3
 1275 000a 9847     		blx	r3
 1276              	.LVL90:
 268:src/console.c ****   fReg->newln = 0;//no newline after printing
 1277              		.loc 2 268 3 is_stmt 1 view .LVU322
 1278 000c A36B     		ldr	r3, [r4, #56]
 269:src/console.c ****   fReg->fixed = 1;//fixed width characters
 270:src/console.c ****   strcpy (print_string,spaces);
 1279              		.loc 2 270 3 is_stmt 0 view .LVU323
 1280 000e 0849     		ldr	r1, .L119+8
 1281 0010 0848     		ldr	r0, .L119+12
 268:src/console.c ****   fReg->newln = 0;//no newline after printing
 1282              		.loc 2 268 15 view .LVU324
 1283 0012 0024     		movs	r4, #0
 269:src/console.c ****   fReg->fixed = 1;//fixed width characters
 1284              		.loc 2 269 15 view .LVU325
 1285 0014 0122     		movs	r2, #1
 268:src/console.c ****   fReg->newln = 0;//no newline after printing
 1286              		.loc 2 268 15 view .LVU326
 1287 0016 1C75     		strb	r4, [r3, #20]
 269:src/console.c ****   fReg->fixed = 1;//fixed width characters
 1288              		.loc 2 269 3 is_stmt 1 view .LVU327
 269:src/console.c ****   fReg->fixed = 1;//fixed width characters
 1289              		.loc 2 269 15 is_stmt 0 view .LVU328
 1290 0018 1A74     		strb	r2, [r3, #16]
ARM GAS  /tmp/ccj9eXy0.s 			page 37


 1291              		.loc 2 270 3 is_stmt 1 view .LVU329
 1292 001a FFF7FEFF 		bl	strcpy
 1293              	.LVL91:
 271:src/console.c ****   //  lcd_clear_buf();//clear buffer
 272:src/console.c ****   lcd_refresh();
 1294              		.loc 2 272 3 view .LVU330
 273:src/console.c **** }
 1295              		.loc 2 273 1 is_stmt 0 view .LVU331
 1296 001e BDE81040 		pop	{r4, lr}
 1297              		.cfi_restore 14
 1298              		.cfi_restore 4
 1299              		.cfi_def_cfa_offset 0
 272:src/console.c **** }
 1300              		.loc 2 272 3 view .LVU332
 1301 0022 054B     		ldr	r3, .L119+16
 1302 0024 1847     		bx	r3	@ indirect register sibling call
 1303              	.LVL92:
 1304              	.L120:
 1305 0026 00BF     		.align	2
 1306              	.L119:
 1307 0028 00200010 		.word	268443648
 1308 002c 9D020008 		.word	134218397
 1309 0030 00000000 		.word	.LANCHOR5
 1310 0034 00000000 		.word	print_string
 1311 0038 31020008 		.word	134218289
 1312              		.cfi_endproc
 1313              	.LFE20:
 1315              		.section	.text.moveto,"ax",%progbits
 1316              		.align	1
 1317              		.p2align 2,,3
 1318              		.global	moveto
 1319              		.syntax unified
 1320              		.thumb
 1321              		.thumb_func
 1322              		.fpu fpv4-sp-d16
 1324              	moveto:
 1325              	.LVL93:
 1326              	.LFB21:
 274:src/console.c **** 
 275:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 1327              		.loc 2 275 30 is_stmt 1 view -0
 1328              		.cfi_startproc
 1329              		@ args = 0, pretend = 0, frame = 0
 1330              		@ frame_needed = 0, uses_anonymous_args = 0
 276:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1331              		.loc 2 276 3 view .LVU334
 275:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1332              		.loc 2 275 30 is_stmt 0 view .LVU335
 1333 0000 70B5     		push	{r4, r5, r6, lr}
 1334              		.cfi_def_cfa_offset 16
 1335              		.cfi_offset 4, -16
 1336              		.cfi_offset 5, -12
 1337              		.cfi_offset 6, -8
 1338              		.cfi_offset 14, -4
 1339              		.loc 2 276 3 view .LVU336
 1340 0002 0A4D     		ldr	r5, .L123
 1341 0004 0A4B     		ldr	r3, .L123+4
ARM GAS  /tmp/ccj9eXy0.s 			page 38


 275:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1342              		.loc 2 275 30 view .LVU337
 1343 0006 0246     		mov	r2, r0
 1344 0008 0C46     		mov	r4, r1
 1345              		.loc 2 276 3 view .LVU338
 1346 000a A86B     		ldr	r0, [r5, #56]
 1347              	.LVL94:
 1348              		.loc 2 276 3 view .LVU339
 1349 000c 511E     		subs	r1, r2, #1
 1350              	.LVL95:
 1351              		.loc 2 276 3 view .LVU340
 1352 000e 9847     		blx	r3
 1353              	.LVL96:
 277:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1354              		.loc 2 277 3 is_stmt 1 view .LVU341
 1355 0010 A86B     		ldr	r0, [r5, #56]
 1356 0012 084B     		ldr	r3, .L123+8
 1357              		.loc 2 277 33 is_stmt 0 view .LVU342
 1358 0014 0168     		ldr	r1, [r0]
 1359              		.loc 2 277 3 view .LVU343
 1360 0016 B0F90620 		ldrsh	r2, [r0, #6]
 1361              		.loc 2 277 33 view .LVU344
 1362 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 1363              		.loc 2 277 43 view .LVU345
 1364 001c 013C     		subs	r4, r4, #1
 1365              	.LVL97:
 1366              		.loc 2 277 40 view .LVU346
 1367 001e 04FB01F1 		mul	r1, r4, r1
 1368              		.loc 2 277 3 view .LVU347
 1369 0022 1431     		adds	r1, r1, #20
 278:src/console.c **** }
 1370              		.loc 2 278 1 view .LVU348
 1371 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1372              		.cfi_restore 14
 1373              		.cfi_restore 6
 1374              		.cfi_restore 5
 1375              		.cfi_restore 4
 1376              		.cfi_def_cfa_offset 0
 1377              	.LVL98:
 277:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1378              		.loc 2 277 3 view .LVU349
 1379 0028 1847     		bx	r3	@ indirect register sibling call
 1380              	.LVL99:
 1381              	.L124:
 1382 002a 00BF     		.align	2
 1383              	.L123:
 1384 002c 00200010 		.word	268443648
 1385 0030 69020008 		.word	134218345
 1386 0034 6D020008 		.word	134218349
 1387              		.cfi_endproc
 1388              	.LFE21:
 1390              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 1391              		.align	2
 1392              	.LC0:
 1393 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 1393      673A2025 
 1393      34692C25 
ARM GAS  /tmp/ccj9eXy0.s 			page 39


 1393      346900
 1394              		.section	.text.print_debug,"ax",%progbits
 1395              		.align	1
 1396              		.p2align 2,,3
 1397              		.global	print_debug
 1398              		.syntax unified
 1399              		.thumb
 1400              		.thumb_func
 1401              		.fpu fpv4-sp-d16
 1403              	print_debug:
 1404              	.LVL100:
 1405              	.LFB22:
 279:src/console.c **** 
 280:src/console.c **** //print_debug(is_dot(RPN) ? 'X' : 'x');
 281:src/console.c **** 
 282:src/console.c **** //void print_debug (char i) {
 283:src/console.c **** //  if (n_p < 21) {
 284:src/console.c **** //    print_string[n_p] = i;
 285:src/console.c **** //    n_p++;
 286:src/console.c **** //  }
 287:src/console.c **** //}
 288:src/console.c **** 
 289:src/console.c **** void print_debug (int i, int j) {
 1406              		.loc 2 289 33 is_stmt 1 view -0
 1407              		.cfi_startproc
 1408              		@ args = 0, pretend = 0, frame = 8
 1409              		@ frame_needed = 0, uses_anonymous_args = 0
 290:src/console.c ****   strcpy( print_string, spaces );
 1410              		.loc 2 290 3 view .LVU351
 289:src/console.c ****   strcpy( print_string, spaces );
 1411              		.loc 2 289 33 is_stmt 0 view .LVU352
 1412 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1413              		.cfi_def_cfa_offset 24
 1414              		.cfi_offset 4, -24
 1415              		.cfi_offset 5, -20
 1416              		.cfi_offset 6, -16
 1417              		.cfi_offset 7, -12
 1418              		.cfi_offset 8, -8
 1419              		.cfi_offset 14, -4
 1420              		.loc 2 290 3 view .LVU353
 1421 0004 174C     		ldr	r4, .L127
 1422 0006 184F     		ldr	r7, .L127+4
 291:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 292:src/console.c ****   moveto (3, 1);
 293:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1423              		.loc 2 293 3 view .LVU354
 1424 0008 184E     		ldr	r6, .L127+8
 1425 000a 194D     		ldr	r5, .L127+12
 294:src/console.c ****   lcd_refresh();
 1426              		.loc 2 294 3 view .LVU355
 1427 000c DFF86C80 		ldr	r8, .L127+24
 289:src/console.c ****   strcpy( print_string, spaces );
 1428              		.loc 2 289 33 view .LVU356
 1429 0010 82B0     		sub	sp, sp, #8
 1430              		.cfi_def_cfa_offset 32
 289:src/console.c ****   strcpy( print_string, spaces );
 1431              		.loc 2 289 33 view .LVU357
ARM GAS  /tmp/ccj9eXy0.s 			page 40


 1432 0012 0190     		str	r0, [sp, #4]
 1433 0014 0091     		str	r1, [sp]
 290:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1434              		.loc 2 290 3 view .LVU358
 1435 0016 2046     		mov	r0, r4
 1436              	.LVL101:
 290:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1437              		.loc 2 290 3 view .LVU359
 1438 0018 3946     		mov	r1, r7
 1439              	.LVL102:
 290:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1440              		.loc 2 290 3 view .LVU360
 1441 001a FFF7FEFF 		bl	strcpy
 1442              	.LVL103:
 291:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1443              		.loc 2 291 3 is_stmt 1 view .LVU361
 1444 001e DDE90032 		ldrd	r3, r2, [sp]
 1445 0022 1449     		ldr	r1, .L127+16
 1446 0024 2046     		mov	r0, r4
 1447 0026 FFF7FEFF 		bl	sprintf
 1448              	.LVL104:
 292:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1449              		.loc 2 292 3 view .LVU362
 1450 002a 0121     		movs	r1, #1
 1451 002c 0320     		movs	r0, #3
 1452 002e FFF7FEFF 		bl	moveto
 1453              	.LVL105:
 293:src/console.c ****   lcd_refresh();
 1454              		.loc 2 293 3 view .LVU363
 1455 0032 2146     		mov	r1, r4
 1456 0034 B06B     		ldr	r0, [r6, #56]
 1457 0036 A847     		blx	r5
 1458              	.LVL106:
 1459              		.loc 2 294 3 view .LVU364
 1460 0038 C047     		blx	r8
 1461              	.LVL107:
 295:src/console.c ****   sys_delay (1500);
 1462              		.loc 2 295 3 view .LVU365
 1463 003a 0F4B     		ldr	r3, .L127+20
 1464 003c 40F2DC50 		movw	r0, #1500
 1465 0040 9847     		blx	r3
 1466              	.LVL108:
 296:src/console.c ****   /* wait_for_key_press(); */
 297:src/console.c ****   //  key_pop_all();
 298:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 299:src/console.c ****   // key_pop_all();
 300:src/console.c ****   strcpy( print_string, spaces );
 1467              		.loc 2 300 3 view .LVU366
 1468 0042 3946     		mov	r1, r7
 1469 0044 2046     		mov	r0, r4
 1470 0046 FFF7FEFF 		bl	strcpy
 1471              	.LVL109:
 301:src/console.c ****   moveto (3, 1);
 1472              		.loc 2 301 3 view .LVU367
 1473 004a 0121     		movs	r1, #1
 1474 004c 0320     		movs	r0, #3
 1475 004e FFF7FEFF 		bl	moveto
ARM GAS  /tmp/ccj9eXy0.s 			page 41


 1476              	.LVL110:
 302:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1477              		.loc 2 302 3 view .LVU368
 1478 0052 B06B     		ldr	r0, [r6, #56]
 1479 0054 2146     		mov	r1, r4
 1480 0056 A847     		blx	r5
 1481              	.LVL111:
 303:src/console.c ****   lcd_refresh();
 1482              		.loc 2 303 3 view .LVU369
 1483 0058 4346     		mov	r3, r8
 304:src/console.c ****   // while (key_empty()<=0);; // wait for release
 305:src/console.c ****   // key_pop_all();
 306:src/console.c **** }
 1484              		.loc 2 306 1 is_stmt 0 view .LVU370
 1485 005a 02B0     		add	sp, sp, #8
 1486              		.cfi_def_cfa_offset 24
 1487              	.LVL112:
 1488              		.loc 2 306 1 view .LVU371
 1489              		@ sp needed
 1490 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1491              		.cfi_restore 14
 1492              		.cfi_restore 8
 1493              		.cfi_restore 7
 1494              		.cfi_restore 6
 1495              		.cfi_restore 5
 1496              		.cfi_restore 4
 1497              		.cfi_def_cfa_offset 0
 1498              	.LVL113:
 303:src/console.c ****   lcd_refresh();
 1499              		.loc 2 303 3 view .LVU372
 1500 0060 1847     		bx	r3	@ indirect register sibling call
 1501              	.LVL114:
 1502              	.L128:
 1503 0062 00BF     		.align	2
 1504              	.L127:
 1505 0064 00000000 		.word	print_string
 1506 0068 00000000 		.word	.LANCHOR5
 1507 006c 00200010 		.word	268443648
 1508 0070 B1020008 		.word	134218417
 1509 0074 00000000 		.word	.LC0
 1510 0078 05040008 		.word	134218757
 1511 007c 31020008 		.word	134218289
 1512              		.cfi_endproc
 1513              	.LFE22:
 1515              		.section	.text.do_now,"ax",%progbits
 1516              		.align	1
 1517              		.p2align 2,,3
 1518              		.global	do_now
 1519              		.syntax unified
 1520              		.thumb
 1521              		.thumb_func
 1522              		.fpu fpv4-sp-d16
 1524              	do_now:
 1525              	.LVL115:
 1526              	.LFB23:
 307:src/console.c **** 
 308:src/console.c **** void do_now (int key, int shift) {
ARM GAS  /tmp/ccj9eXy0.s 			page 42


 1527              		.loc 2 308 34 is_stmt 1 view -0
 1528              		.cfi_startproc
 1529              		@ args = 0, pretend = 0, frame = 8
 1530              		@ frame_needed = 0, uses_anonymous_args = 0
 1531              		@ link register save eliminated.
 309:src/console.c ****   struct _ndmap temp;
 1532              		.loc 2 309 3 view .LVU374
 310:src/console.c ****   temp.key_34s = key;
 1533              		.loc 2 310 3 view .LVU375
 308:src/console.c ****   struct _ndmap temp;
 1534              		.loc 2 308 34 is_stmt 0 view .LVU376
 1535 0000 82B0     		sub	sp, sp, #8
 1536              		.cfi_def_cfa_offset 8
 311:src/console.c ****   temp.shift = shift;
 312:src/console.c ****   process_keycode_with_shift (temp);
 1537              		.loc 2 312 3 view .LVU377
 1538 0002 02AB     		add	r3, sp, #8
 310:src/console.c ****   temp.shift = shift;
 1539              		.loc 2 310 16 view .LVU378
 1540 0004 8DF80000 		strb	r0, [sp]
 311:src/console.c ****   temp.shift = shift;
 1541              		.loc 2 311 3 is_stmt 1 view .LVU379
 311:src/console.c ****   temp.shift = shift;
 1542              		.loc 2 311 14 is_stmt 0 view .LVU380
 1543 0008 0191     		str	r1, [sp, #4]
 1544              		.loc 2 312 3 is_stmt 1 view .LVU381
 1545 000a 13E90300 		ldmdb	r3, {r0, r1}
 1546              	.LVL116:
 313:src/console.c **** }
 1547              		.loc 2 313 1 is_stmt 0 view .LVU382
 1548 000e 02B0     		add	sp, sp, #8
 1549              		.cfi_def_cfa_offset 0
 1550              		@ sp needed
 312:src/console.c **** }
 1551              		.loc 2 312 3 view .LVU383
 1552 0010 FFF7FEBF 		b	process_keycode_with_shift
 1553              	.LVL117:
 312:src/console.c **** }
 1554              		.loc 2 312 3 view .LVU384
 1555              		.cfi_endproc
 1556              	.LFE23:
 1558              		.section	.text.do_multi,"ax",%progbits
 1559              		.align	1
 1560              		.p2align 2,,3
 1561              		.global	do_multi
 1562              		.syntax unified
 1563              		.thumb
 1564              		.thumb_func
 1565              		.fpu fpv4-sp-d16
 1567              	do_multi:
 1568              	.LVL118:
 1569              	.LFB24:
 314:src/console.c **** 
 315:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 1570              		.loc 2 315 42 is_stmt 1 view -0
 1571              		.cfi_startproc
 1572              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccj9eXy0.s 			page 43


 1573              		@ frame_needed = 0, uses_anonymous_args = 0
 1574              		.loc 2 315 42 is_stmt 0 view .LVU386
 1575 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1576              		.cfi_def_cfa_offset 24
 1577              		.cfi_offset 4, -24
 1578              		.cfi_offset 5, -20
 1579              		.cfi_offset 6, -16
 1580              		.cfi_offset 7, -12
 1581              		.cfi_offset 8, -8
 1582              		.cfi_offset 14, -4
 1583 0004 84B0     		sub	sp, sp, #16
 1584              		.cfi_def_cfa_offset 40
 1585              	.LVL119:
 316:src/console.c ****   switch(r.shift) {
 1586              		.loc 2 316 3 is_stmt 1 view .LVU387
 315:src/console.c ****   switch(r.shift) {
 1587              		.loc 2 315 42 is_stmt 0 view .LVU388
 1588 0006 6C46     		mov	r4, sp
 1589 0008 531E     		subs	r3, r2, #1
 1590 000a 84E80600 		stm	r4, {r1, r2}
 1591              	.LVL120:
 315:src/console.c ****   switch(r.shift) {
 1592              		.loc 2 315 42 view .LVU389
 1593 000e 0546     		mov	r5, r0
 1594 0010 072B     		cmp	r3, #7
 1595 0012 70D8     		bhi	.L132
 1596 0014 DFE803F0 		tbb	[pc, r3]
 1597              	.L134:
 1598 0018 17       		.byte	(.L141-.L134)/2
 1599 0019 35       		.byte	(.L140-.L134)/2
 1600 001a 3F       		.byte	(.L139-.L134)/2
 1601 001b 49       		.byte	(.L138-.L134)/2
 1602 001c 52       		.byte	(.L137-.L134)/2
 1603 001d 5B       		.byte	(.L136-.L134)/2
 1604 001e 65       		.byte	(.L135-.L134)/2
 1605 001f 04       		.byte	(.L133-.L134)/2
 1606              		.p2align 1
 1607              	.L133:
 317:src/console.c ****   case LASTX: // Last x via RCL L
 318:src/console.c ****     do_now (K11, 0); // RCL
 319:src/console.c ****     do_now (K_RELEASE,0); // release
 320:src/console.c ****     do_now (K15,0); // TAN key
 321:src/console.c ****     r.key_34s = K_RELEASE;
 322:src/console.c ****     r.shift = 0; // set up for release;
 323:src/console.c ****     break;
 324:src/console.c ****   case ONSTO: // flash_backup()
 325:src/console.c ****     flash_backup(OP_SAVE);
 326:src/console.c ****     r = no_key;
 327:src/console.c ****     break;
 328:src/console.c ****   case ONRCL: // flash_restore()
 329:src/console.c ****     flash_restore(OP_LOAD);
 330:src/console.c ****     r = no_key;
 331:src/console.c ****     break;
 332:src/console.c ****   case WRLIB: // save library file
 333:src/console.c ****     save_libraryfile();
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
ARM GAS  /tmp/ccj9eXy0.s 			page 44


 336:src/console.c ****   case LLIB: // load library file
 337:src/console.c ****     load_statefile_library();
 338:src/console.c ****     r = no_key;
 339:src/console.c ****     break;
 340:src/console.c ****   case WRTST: // save state file
 341:src/console.c ****     save_statefile(0);
 342:src/console.c ****     r = no_key;
 343:src/console.c ****     break;
 344:src/console.c ****   case LDST:
 345:src/console.c ****     load_statefile_state(0);
 346:src/console.c ****     r = no_key;
 347:src/console.c ****     break;
 348:src/console.c ****   case LDPRG:
 349:src/console.c ****     import_program();
 1608              		.loc 2 349 5 is_stmt 1 view .LVU390
 1609 0020 FFF7FEFF 		bl	import_program
 1610              	.LVL121:
 350:src/console.c ****     r = no_key;
 1611              		.loc 2 350 5 view .LVU391
 1612              		.loc 2 350 7 is_stmt 0 view .LVU392
 1613 0024 374B     		ldr	r3, .L144
 1614 0026 93E80300 		ldm	r3, {r0, r1}
 1615 002a 84E80300 		stm	r4, {r0, r1}
 1616 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1617              	.LVL122:
 351:src/console.c ****     break;
 1618              		.loc 2 351 5 is_stmt 1 view .LVU393
 1619              	.L142:
 352:src/console.c ****   default:
 353:src/console.c ****     r = no_key;
 354:src/console.c ****   }
 355:src/console.c ****   return r;
 1620              		.loc 2 355 3 view .LVU394
 1621              		.loc 2 355 10 is_stmt 0 view .LVU395
 1622 0030 8DF80030 		strb	r3, [sp]
 1623 0034 0191     		str	r1, [sp, #4]
 1624 0036 94E80300 		ldm	r4, {r0, r1}
 1625              	.LVL123:
 1626              		.loc 2 355 10 view .LVU396
 1627 003a 85E80300 		stm	r5, {r0, r1}
 356:src/console.c **** }
 1628              		.loc 2 356 1 view .LVU397
 1629 003e 2846     		mov	r0, r5
 1630 0040 04B0     		add	sp, sp, #16
 1631              		.cfi_remember_state
 1632              		.cfi_def_cfa_offset 24
 1633              		@ sp needed
 1634 0042 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1635              	.LVL124:
 1636              	.L141:
 1637              		.cfi_restore_state
 318:src/console.c ****     do_now (K_RELEASE,0); // release
 1638              		.loc 2 318 5 is_stmt 1 view .LVU398
 1639              	.LBB71:
 1640              	.LBI71:
 308:src/console.c ****   struct _ndmap temp;
 1641              		.loc 2 308 6 view .LVU399
ARM GAS  /tmp/ccj9eXy0.s 			page 45


 1642              	.LBB72:
 309:src/console.c ****   temp.key_34s = key;
 1643              		.loc 2 309 3 view .LVU400
 310:src/console.c ****   temp.shift = shift;
 1644              		.loc 2 310 3 view .LVU401
 310:src/console.c ****   temp.shift = shift;
 1645              		.loc 2 310 16 is_stmt 0 view .LVU402
 1646 0046 0723     		movs	r3, #7
 311:src/console.c ****   process_keycode_with_shift (temp);
 1647              		.loc 2 311 14 view .LVU403
 1648 0048 0026     		movs	r6, #0
 310:src/console.c ****   temp.shift = shift;
 1649              		.loc 2 310 16 view .LVU404
 1650 004a 8DF80830 		strb	r3, [sp, #8]
 311:src/console.c ****   process_keycode_with_shift (temp);
 1651              		.loc 2 311 3 is_stmt 1 view .LVU405
 312:src/console.c **** }
 1652              		.loc 2 312 3 is_stmt 0 view .LVU406
 1653 004e 0DF10808 		add	r8, sp, #8
 311:src/console.c ****   process_keycode_with_shift (temp);
 1654              		.loc 2 311 14 view .LVU407
 1655 0052 0396     		str	r6, [sp, #12]
 312:src/console.c **** }
 1656              		.loc 2 312 3 is_stmt 1 view .LVU408
 1657 0054 98E80300 		ldm	r8, {r0, r1}
 1658              	.LVL125:
 312:src/console.c **** }
 1659              		.loc 2 312 3 is_stmt 0 view .LVU409
 1660              	.LBE72:
 1661              	.LBE71:
 1662              	.LBB74:
 1663              	.LBB75:
 310:src/console.c ****   temp.shift = shift;
 1664              		.loc 2 310 16 view .LVU410
 1665 0058 6327     		movs	r7, #99
 1666              	.LBE75:
 1667              	.LBE74:
 1668              	.LBB77:
 1669              	.LBB73:
 312:src/console.c **** }
 1670              		.loc 2 312 3 view .LVU411
 1671 005a FFF7FEFF 		bl	process_keycode_with_shift
 1672              	.LVL126:
 312:src/console.c **** }
 1673              		.loc 2 312 3 view .LVU412
 1674              	.LBE73:
 1675              	.LBE77:
 319:src/console.c ****     do_now (K15,0); // TAN key
 1676              		.loc 2 319 5 is_stmt 1 view .LVU413
 1677              	.LBB78:
 1678              	.LBI74:
 308:src/console.c ****   struct _ndmap temp;
 1679              		.loc 2 308 6 view .LVU414
 1680              	.LBB76:
 309:src/console.c ****   temp.key_34s = key;
 1681              		.loc 2 309 3 view .LVU415
 310:src/console.c ****   temp.shift = shift;
ARM GAS  /tmp/ccj9eXy0.s 			page 46


 1682              		.loc 2 310 3 view .LVU416
 311:src/console.c ****   process_keycode_with_shift (temp);
 1683              		.loc 2 311 14 is_stmt 0 view .LVU417
 1684 005e 0396     		str	r6, [sp, #12]
 310:src/console.c ****   temp.shift = shift;
 1685              		.loc 2 310 16 view .LVU418
 1686 0060 8DF80870 		strb	r7, [sp, #8]
 311:src/console.c ****   process_keycode_with_shift (temp);
 1687              		.loc 2 311 3 is_stmt 1 view .LVU419
 312:src/console.c **** }
 1688              		.loc 2 312 3 view .LVU420
 1689 0064 98E80300 		ldm	r8, {r0, r1}
 1690 0068 FFF7FEFF 		bl	process_keycode_with_shift
 1691              	.LVL127:
 312:src/console.c **** }
 1692              		.loc 2 312 3 is_stmt 0 view .LVU421
 1693              	.LBE76:
 1694              	.LBE78:
 320:src/console.c ****     r.key_34s = K_RELEASE;
 1695              		.loc 2 320 5 is_stmt 1 view .LVU422
 1696              	.LBB79:
 1697              	.LBI79:
 308:src/console.c ****   struct _ndmap temp;
 1698              		.loc 2 308 6 view .LVU423
 1699              	.LBB80:
 309:src/console.c ****   temp.key_34s = key;
 1700              		.loc 2 309 3 view .LVU424
 310:src/console.c ****   temp.shift = shift;
 1701              		.loc 2 310 3 view .LVU425
 310:src/console.c ****   temp.shift = shift;
 1702              		.loc 2 310 16 is_stmt 0 view .LVU426
 1703 006c 0B23     		movs	r3, #11
 1704 006e 8DF80830 		strb	r3, [sp, #8]
 311:src/console.c ****   process_keycode_with_shift (temp);
 1705              		.loc 2 311 3 is_stmt 1 view .LVU427
 312:src/console.c **** }
 1706              		.loc 2 312 3 view .LVU428
 311:src/console.c ****   process_keycode_with_shift (temp);
 1707              		.loc 2 311 14 is_stmt 0 view .LVU429
 1708 0072 0396     		str	r6, [sp, #12]
 312:src/console.c **** }
 1709              		.loc 2 312 3 view .LVU430
 1710 0074 98E80300 		ldm	r8, {r0, r1}
 1711 0078 FFF7FEFF 		bl	process_keycode_with_shift
 1712              	.LVL128:
 312:src/console.c **** }
 1713              		.loc 2 312 3 view .LVU431
 1714              	.LBE80:
 1715              	.LBE79:
 321:src/console.c ****     r.shift = 0; // set up for release;
 1716              		.loc 2 321 5 is_stmt 1 view .LVU432
 322:src/console.c ****     break;
 1717              		.loc 2 322 5 view .LVU433
 323:src/console.c ****   case ONSTO: // flash_backup()
 1718              		.loc 2 323 5 view .LVU434
 322:src/console.c ****     break;
 1719              		.loc 2 322 13 is_stmt 0 view .LVU435
ARM GAS  /tmp/ccj9eXy0.s 			page 47


 1720 007c 3146     		mov	r1, r6
 321:src/console.c ****     r.shift = 0; // set up for release;
 1721              		.loc 2 321 15 view .LVU436
 1722 007e 3B46     		mov	r3, r7
 323:src/console.c ****   case ONSTO: // flash_backup()
 1723              		.loc 2 323 5 view .LVU437
 1724 0080 D6E7     		b	.L142
 1725              	.LVL129:
 1726              	.L140:
 325:src/console.c ****     r = no_key;
 1727              		.loc 2 325 5 is_stmt 1 view .LVU438
 1728 0082 AD20     		movs	r0, #173
 1729              	.LVL130:
 325:src/console.c ****     r = no_key;
 1730              		.loc 2 325 5 is_stmt 0 view .LVU439
 1731 0084 FFF7FEFF 		bl	flash_backup
 1732              	.LVL131:
 326:src/console.c ****     break;
 1733              		.loc 2 326 5 is_stmt 1 view .LVU440
 326:src/console.c ****     break;
 1734              		.loc 2 326 7 is_stmt 0 view .LVU441
 1735 0088 1E4B     		ldr	r3, .L144
 1736 008a 93E80300 		ldm	r3, {r0, r1}
 1737 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1738              	.LVL132:
 327:src/console.c ****   case ONRCL: // flash_restore()
 1739              		.loc 2 327 5 is_stmt 1 view .LVU442
 326:src/console.c ****     break;
 1740              		.loc 2 326 7 is_stmt 0 view .LVU443
 1741 0090 84E80300 		stm	r4, {r0, r1}
 327:src/console.c ****   case ONRCL: // flash_restore()
 1742              		.loc 2 327 5 view .LVU444
 1743 0094 CCE7     		b	.L142
 1744              	.LVL133:
 1745              	.L139:
 329:src/console.c ****     r = no_key;
 1746              		.loc 2 329 5 is_stmt 1 view .LVU445
 1747 0096 AE20     		movs	r0, #174
 1748              	.LVL134:
 329:src/console.c ****     r = no_key;
 1749              		.loc 2 329 5 is_stmt 0 view .LVU446
 1750 0098 FFF7FEFF 		bl	flash_restore
 1751              	.LVL135:
 330:src/console.c ****     break;
 1752              		.loc 2 330 5 is_stmt 1 view .LVU447
 330:src/console.c ****     break;
 1753              		.loc 2 330 7 is_stmt 0 view .LVU448
 1754 009c 194B     		ldr	r3, .L144
 1755 009e 93E80300 		ldm	r3, {r0, r1}
 1756 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1757              	.LVL136:
 331:src/console.c ****   case WRLIB: // save library file
 1758              		.loc 2 331 5 is_stmt 1 view .LVU449
 330:src/console.c ****     break;
 1759              		.loc 2 330 7 is_stmt 0 view .LVU450
 1760 00a4 84E80300 		stm	r4, {r0, r1}
 331:src/console.c ****   case WRLIB: // save library file
ARM GAS  /tmp/ccj9eXy0.s 			page 48


 1761              		.loc 2 331 5 view .LVU451
 1762 00a8 C2E7     		b	.L142
 1763              	.LVL137:
 1764              	.L138:
 333:src/console.c ****     r = no_key;
 1765              		.loc 2 333 5 is_stmt 1 view .LVU452
 1766 00aa FFF7FEFF 		bl	save_libraryfile
 1767              	.LVL138:
 334:src/console.c ****     break;
 1768              		.loc 2 334 5 view .LVU453
 334:src/console.c ****     break;
 1769              		.loc 2 334 7 is_stmt 0 view .LVU454
 1770 00ae 154B     		ldr	r3, .L144
 1771 00b0 93E80300 		ldm	r3, {r0, r1}
 1772 00b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1773              	.LVL139:
 335:src/console.c ****   case LLIB: // load library file
 1774              		.loc 2 335 5 is_stmt 1 view .LVU455
 334:src/console.c ****     break;
 1775              		.loc 2 334 7 is_stmt 0 view .LVU456
 1776 00b6 84E80300 		stm	r4, {r0, r1}
 335:src/console.c ****   case LLIB: // load library file
 1777              		.loc 2 335 5 view .LVU457
 1778 00ba B9E7     		b	.L142
 1779              	.LVL140:
 1780              	.L137:
 337:src/console.c ****     r = no_key;
 1781              		.loc 2 337 5 is_stmt 1 view .LVU458
 1782 00bc FFF7FEFF 		bl	load_statefile_library
 1783              	.LVL141:
 338:src/console.c ****     break;
 1784              		.loc 2 338 5 view .LVU459
 338:src/console.c ****     break;
 1785              		.loc 2 338 7 is_stmt 0 view .LVU460
 1786 00c0 104B     		ldr	r3, .L144
 1787 00c2 93E80300 		ldm	r3, {r0, r1}
 1788 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1789              	.LVL142:
 339:src/console.c ****   case WRTST: // save state file
 1790              		.loc 2 339 5 is_stmt 1 view .LVU461
 338:src/console.c ****     break;
 1791              		.loc 2 338 7 is_stmt 0 view .LVU462
 1792 00c8 84E80300 		stm	r4, {r0, r1}
 339:src/console.c ****   case WRTST: // save state file
 1793              		.loc 2 339 5 view .LVU463
 1794 00cc B0E7     		b	.L142
 1795              	.LVL143:
 1796              	.L136:
 341:src/console.c ****     r = no_key;
 1797              		.loc 2 341 5 is_stmt 1 view .LVU464
 1798 00ce 0020     		movs	r0, #0
 1799              	.LVL144:
 341:src/console.c ****     r = no_key;
 1800              		.loc 2 341 5 is_stmt 0 view .LVU465
 1801 00d0 FFF7FEFF 		bl	save_statefile
 1802              	.LVL145:
 342:src/console.c ****     break;
ARM GAS  /tmp/ccj9eXy0.s 			page 49


 1803              		.loc 2 342 5 is_stmt 1 view .LVU466
 342:src/console.c ****     break;
 1804              		.loc 2 342 7 is_stmt 0 view .LVU467
 1805 00d4 0B4B     		ldr	r3, .L144
 1806 00d6 93E80300 		ldm	r3, {r0, r1}
 1807 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1808              	.LVL146:
 343:src/console.c ****   case LDST:
 1809              		.loc 2 343 5 is_stmt 1 view .LVU468
 342:src/console.c ****     break;
 1810              		.loc 2 342 7 is_stmt 0 view .LVU469
 1811 00dc 84E80300 		stm	r4, {r0, r1}
 343:src/console.c ****   case LDST:
 1812              		.loc 2 343 5 view .LVU470
 1813 00e0 A6E7     		b	.L142
 1814              	.LVL147:
 1815              	.L135:
 345:src/console.c ****     r = no_key;
 1816              		.loc 2 345 5 is_stmt 1 view .LVU471
 1817 00e2 0020     		movs	r0, #0
 1818              	.LVL148:
 345:src/console.c ****     r = no_key;
 1819              		.loc 2 345 5 is_stmt 0 view .LVU472
 1820 00e4 FFF7FEFF 		bl	load_statefile_state
 1821              	.LVL149:
 346:src/console.c ****     break;
 1822              		.loc 2 346 5 is_stmt 1 view .LVU473
 346:src/console.c ****     break;
 1823              		.loc 2 346 7 is_stmt 0 view .LVU474
 1824 00e8 064B     		ldr	r3, .L144
 1825 00ea 93E80300 		ldm	r3, {r0, r1}
 1826 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1827              	.LVL150:
 347:src/console.c ****   case LDPRG:
 1828              		.loc 2 347 5 is_stmt 1 view .LVU475
 346:src/console.c ****     break;
 1829              		.loc 2 346 7 is_stmt 0 view .LVU476
 1830 00f0 84E80300 		stm	r4, {r0, r1}
 347:src/console.c ****   case LDPRG:
 1831              		.loc 2 347 5 view .LVU477
 1832 00f4 9CE7     		b	.L142
 1833              	.LVL151:
 1834              	.L132:
 353:src/console.c ****   }
 1835              		.loc 2 353 5 is_stmt 1 view .LVU478
 353:src/console.c ****   }
 1836              		.loc 2 353 7 is_stmt 0 view .LVU479
 1837 00f6 034B     		ldr	r3, .L144
 1838 00f8 93E80300 		ldm	r3, {r0, r1}
 1839              	.LVL152:
 353:src/console.c ****   }
 1840              		.loc 2 353 7 view .LVU480
 1841 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1842              	.LVL153:
 353:src/console.c ****   }
 1843              		.loc 2 353 7 view .LVU481
 1844 00fe 84E80300 		stm	r4, {r0, r1}
ARM GAS  /tmp/ccj9eXy0.s 			page 50


 1845 0102 95E7     		b	.L142
 1846              	.L145:
 1847              		.align	2
 1848              	.L144:
 1849 0104 00000000 		.word	.LANCHOR6
 1850              		.cfi_endproc
 1851              	.LFE24:
 1853              		.section	.rodata.program_main.str1.4,"aMS",%progbits,1
 1854              		.align	2
 1855              	.LC1:
 1856 0000 00       		.ascii	"\000"
 1857              		.section	.text.program_main,"ax",%progbits
 1858              		.align	1
 1859              		.p2align 2,,3
 1860              		.global	program_main
 1861              		.syntax unified
 1862              		.thumb
 1863              		.thumb_func
 1864              		.fpu fpv4-sp-d16
 1866              	program_main:
 1867              	.LFB25:
 357:src/console.c **** 
 358:src/console.c **** void program_main(){
 1868              		.loc 2 358 20 is_stmt 1 view -0
 1869              		.cfi_startproc
 1870              		@ args = 0, pretend = 0, frame = 24
 1871              		@ frame_needed = 0, uses_anonymous_args = 0
 359:src/console.c ****   int c;
 1872              		.loc 2 359 3 view .LVU483
 360:src/console.c ****   struct _ndmap remapped;
 1873              		.loc 2 360 3 view .LVU484
 361:src/console.c **** 
 362:src/console.c ****   //  init_graphics();
 363:src/console.c ****   //  xeq_init_contexts();
 364:src/console.c ****   init_34s();
 1874              		.loc 2 364 3 view .LVU485
 358:src/console.c ****   int c;
 1875              		.loc 2 358 20 is_stmt 0 view .LVU486
 1876 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1877              		.cfi_def_cfa_offset 36
 1878              		.cfi_offset 4, -36
 1879              		.cfi_offset 5, -32
 1880              		.cfi_offset 6, -28
 1881              		.cfi_offset 7, -24
 1882              		.cfi_offset 8, -20
 1883              		.cfi_offset 9, -16
 1884              		.cfi_offset 10, -12
 1885              		.cfi_offset 11, -8
 1886              		.cfi_offset 14, -4
 1887 0004 87B0     		sub	sp, sp, #28
 1888              		.cfi_def_cfa_offset 64
 1889              		.loc 2 364 3 view .LVU487
 1890 0006 FFF7FEFF 		bl	init_34s
 1891              	.LVL154:
 365:src/console.c ****   DispMsg = "";
 1892              		.loc 2 365 3 is_stmt 1 view .LVU488
 366:src/console.c ****   State2.flags = 1;
ARM GAS  /tmp/ccj9eXy0.s 			page 51


 1893              		.loc 2 366 16 is_stmt 0 view .LVU489
 1894 000a AE4A     		ldr	r2, .L230
 365:src/console.c ****   DispMsg = "";
 1895              		.loc 2 365 11 view .LVU490
 1896 000c AE49     		ldr	r1, .L230+4
 1897              		.loc 2 366 16 view .LVU491
 1898 000e 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 365:src/console.c ****   DispMsg = "";
 1899              		.loc 2 365 11 view .LVU492
 1900 0010 AE48     		ldr	r0, .L230+8
 1901              	.LBB91:
 1902              	.LBB92:
  22:src/menu.c    **** }
 1903              		.loc 1 22 3 view .LVU493
 1904 0012 DFF824B3 		ldr	fp, .L230+116
 1905              	.LBE92:
 1906              	.LBE91:
 365:src/console.c ****   DispMsg = "";
 1907              		.loc 2 365 11 view .LVU494
 1908 0016 0860     		str	r0, [r1]
 1909              		.loc 2 366 3 is_stmt 1 view .LVU495
 1910              		.loc 2 366 16 is_stmt 0 view .LVU496
 1911 0018 43F00103 		orr	r3, r3, #1
 1912 001c 1376     		strb	r3, [r2, #24]
 367:src/console.c ****   load_statefile_state(1);
 1913              		.loc 2 367 3 is_stmt 1 view .LVU497
 1914 001e 0120     		movs	r0, #1
 1915 0020 FFF7FEFF 		bl	load_statefile_state
 1916              	.LVL155:
 368:src/console.c ****   display();
 1917              		.loc 2 368 3 view .LVU498
 1918 0024 FFF7FEFF 		bl	display
 1919              	.LVL156:
 369:src/console.c ****   display_current_menu();
 1920              		.loc 2 369 3 view .LVU499
 1921              	.LBB95:
 1922              	.LBI91:
  21:src/menu.c    ****   display_menu (current_menu);
 1923              		.loc 1 21 6 view .LVU500
 1924              	.LBB93:
  22:src/menu.c    **** }
 1925              		.loc 1 22 3 view .LVU501
 1926 0028 DBF80000 		ldr	r0, [fp]
 1927 002c DFF80C93 		ldr	r9, .L230+120
 1928              	.LBE93:
 1929              	.LBE95:
 370:src/console.c ****   lcd_refresh();
 371:src/console.c ****   JustDisplayed = 0;
 372:src/console.c ****   /*
 373:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 374:src/console.c ****     Sleeps peacefully while waiting for a key.
 375:src/console.c ****     Handles (in principle!) turning off and on.
 376:src/console.c ****     =================
 377:src/console.c ****     Main event loop
 378:src/console.c ****     =================
 379:src/console.c **** 
 380:src/console.c ****     Status flags:
ARM GAS  /tmp/ccj9eXy0.s 			page 52


 381:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 382:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 383:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 384:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 385:src/console.c ****   */
 386:src/console.c ****   for(;;) {
 387:src/console.c **** 
 388:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 1930              		.loc 2 388 10 is_stmt 0 view .LVU502
 1931 0030 A74C     		ldr	r4, .L230+12
 389:src/console.c ****       {
 390:src/console.c **** 	CLR_ST(STAT_RUNNING);
 391:src/console.c **** 	sys_sleep();
 392:src/console.c ****       }
 393:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 1932              		.loc 2 393 35 view .LVU503
 1933 0032 A84E     		ldr	r6, .L230+16
 394:src/console.c ****     {
 395:src/console.c ****       CLR_ST(STAT_RUNNING);
 396:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 1934              		.loc 2 396 7 view .LVU504
 1935 0034 DFF80883 		ldr	r8, .L230+124
 1936              	.LBB96:
 1937              	.LBB94:
  22:src/menu.c    **** }
 1938              		.loc 1 22 3 view .LVU505
 1939 0038 FFF7FEFF 		bl	display_menu
 1940              	.LVL157:
 1941              	.LBE94:
 1942              	.LBE96:
 370:src/console.c ****   JustDisplayed = 0;
 1943              		.loc 2 370 3 is_stmt 1 view .LVU506
 1944 003c A64B     		ldr	r3, .L230+20
 1945 003e 9847     		blx	r3
 1946              	.LVL158:
 371:src/console.c ****   /*
 1947              		.loc 2 371 3 view .LVU507
 371:src/console.c ****   /*
 1948              		.loc 2 371 17 is_stmt 0 view .LVU508
 1949 0040 A64B     		ldr	r3, .L230+24
 1950 0042 0022     		movs	r2, #0
 1951 0044 1A60     		str	r2, [r3]
 1952 0046 04AD     		add	r5, sp, #16
 1953              	.L147:
 386:src/console.c **** 
 1954              		.loc 2 386 3 is_stmt 1 view .LVU509
 388:src/console.c ****       {
 1955              		.loc 2 388 5 view .LVU510
 388:src/console.c ****       {
 1956              		.loc 2 388 10 is_stmt 0 view .LVU511
 1957 0048 2368     		ldr	r3, [r4]
 388:src/console.c ****       {
 1958              		.loc 2 388 8 view .LVU512
 1959 004a 9F05     		lsls	r7, r3, #22
 1960 004c 40F18180 		bpl	.L148
 1961              	.L219:
 388:src/console.c ****       {
ARM GAS  /tmp/ccj9eXy0.s 			page 53


 1962              		.loc 2 388 30 discriminator 1 view .LVU513
 1963 0050 2368     		ldr	r3, [r4]
 388:src/console.c ****       {
 1964              		.loc 2 388 27 discriminator 1 view .LVU514
 1965 0052 5807     		lsls	r0, r3, #29
 1966 0054 7DD5     		bpl	.L148
 390:src/console.c **** 	sys_sleep();
 1967              		.loc 2 390 2 is_stmt 1 view .LVU515
 1968 0056 2368     		ldr	r3, [r4]
 391:src/console.c ****       }
 1969              		.loc 2 391 2 is_stmt 0 view .LVU516
 1970 0058 A14A     		ldr	r2, .L230+28
 390:src/console.c **** 	sys_sleep();
 1971              		.loc 2 390 2 view .LVU517
 1972 005a 23F00203 		bic	r3, r3, #2
 1973 005e 2360     		str	r3, [r4]
 391:src/console.c ****       }
 1974              		.loc 2 391 2 is_stmt 1 view .LVU518
 1975 0060 9047     		blx	r2
 1976              	.LVL159:
 1977              	.L149:
 397:src/console.c ****       sys_sleep();
 398:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 399:src/console.c **** 	key_push (K_HEARTBEAT);
 400:src/console.c **** 	if (Pause > 0) Pause--;
 401:src/console.c ****       }
 402:src/console.c ****       sys_timer_disable(0); // stop timer
 403:src/console.c ****     }
 404:src/console.c ****     
 405:src/console.c ****     // Wakeup in off state or going to sleep
 406:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 1978              		.loc 2 406 5 view .LVU519
 1979              		.loc 2 406 9 is_stmt 0 view .LVU520
 1980 0062 2368     		ldr	r3, [r4]
 1981              		.loc 2 406 8 view .LVU521
 1982 0064 9905     		lsls	r1, r3, #22
 1983 0066 00F19B80 		bmi	.L155
 1984              	.L220:
 1985              		.loc 2 406 29 discriminator 1 view .LVU522
 1986 006a 2368     		ldr	r3, [r4]
 1987              		.loc 2 406 26 discriminator 1 view .LVU523
 1988 006c 5A07     		lsls	r2, r3, #29
 1989 006e 00F19780 		bmi	.L155
 407:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 408:src/console.c ****         // Going to off mode
 409:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 410:src/console.c ****         draw_power_off_image(1);
 411:src/console.c **** 
 412:src/console.c ****         LCD_power_off(0);
 413:src/console.c ****         SET_ST(STAT_SUSPENDED);
 414:src/console.c ****         SET_ST(STAT_OFF);
 415:src/console.c ****       }
 416:src/console.c ****       // Already in OFF -> just continue to sleep above
 417:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 418:src/console.c ****       // thus reaching the sleep()
 419:src/console.c ****     }
 420:src/console.c **** 
ARM GAS  /tmp/ccj9eXy0.s 			page 54


 421:src/console.c ****     // Well, we are woken-up
 422:src/console.c ****     SET_ST(STAT_RUNNING);
 1990              		.loc 2 422 5 is_stmt 1 view .LVU524
 1991 0072 2368     		ldr	r3, [r4]
 1992 0074 43F00203 		orr	r3, r3, #2
 1993 0078 2360     		str	r3, [r4]
 423:src/console.c **** 
 424:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 425:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 1994              		.loc 2 425 5 view .LVU525
 1995 007a 2368     		ldr	r3, [r4]
 1996 007c 23F00403 		bic	r3, r3, #4
 1997 0080 2360     		str	r3, [r4]
 426:src/console.c **** 
 427:src/console.c ****     // Get up from OFF state
 428:src/console.c ****     if ( ST(STAT_OFF) ) {
 1998              		.loc 2 428 5 view .LVU526
 1999              		.loc 2 428 10 is_stmt 0 view .LVU527
 2000 0082 2368     		ldr	r3, [r4]
 2001              		.loc 2 428 8 view .LVU528
 2002 0084 DB06     		lsls	r3, r3, #27
 2003 0086 0CD5     		bpl	.L160
 429:src/console.c ****       LCD_power_on();
 2004              		.loc 2 429 7 is_stmt 1 view .LVU529
 2005 0088 964B     		ldr	r3, .L230+32
 2006 008a 9847     		blx	r3
 2007              	.LVL160:
 430:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 2008              		.loc 2 430 7 view .LVU530
 2009 008c 964B     		ldr	r3, .L230+36
 2010 008e 9847     		blx	r3
 2011              	.LVL161:
 431:src/console.c **** 
 432:src/console.c ****       CLR_ST(STAT_OFF);
 2012              		.loc 2 432 7 view .LVU531
 2013 0090 2368     		ldr	r3, [r4]
 433:src/console.c **** 
 434:src/console.c ****       if ( !lcd_get_buf_cleared() )
 2014              		.loc 2 434 13 is_stmt 0 view .LVU532
 2015 0092 964A     		ldr	r2, .L230+40
 432:src/console.c **** 
 2016              		.loc 2 432 7 view .LVU533
 2017 0094 23F01003 		bic	r3, r3, #16
 2018 0098 2360     		str	r3, [r4]
 2019              		.loc 2 434 7 is_stmt 1 view .LVU534
 2020              		.loc 2 434 13 is_stmt 0 view .LVU535
 2021 009a 9047     		blx	r2
 2022              	.LVL162:
 2023              		.loc 2 434 10 view .LVU536
 2024 009c 08B9     		cbnz	r0, .L160
 435:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 2025              		.loc 2 435 9 is_stmt 1 view .LVU537
 2026 009e 944B     		ldr	r3, .L230+44
 2027 00a0 9847     		blx	r3
 2028              	.LVL163:
 2029              	.L160:
 436:src/console.c ****     }
ARM GAS  /tmp/ccj9eXy0.s 			page 55


 437:src/console.c **** 
 438:src/console.c ****     // Key is ready -> clear auto off timer
 439:src/console.c ****     //    if ( !key_empty() )
 440:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 441:src/console.c ****     // Fetch the key
 442:src/console.c ****     //  < 0 -> No key event
 443:src/console.c ****     //  > 0 -> Key pressed
 444:src/console.c ****     // == 0 -> Key released
 445:src/console.c ****     c = key_pop();
 2030              		.loc 2 445 5 view .LVU538
 2031              		.loc 2 445 9 is_stmt 0 view .LVU539
 2032 00a2 944B     		ldr	r3, .L230+48
 2033 00a4 9847     		blx	r3
 2034              	.LVL164:
 446:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2035              		.loc 2 446 8 view .LVU540
 2036 00a6 6228     		cmp	r0, #98
 445:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2037              		.loc 2 445 9 view .LVU541
 2038 00a8 8246     		mov	r10, r0
 2039              	.LVL165:
 2040              		.loc 2 446 5 is_stmt 1 view .LVU542
 2041              		.loc 2 446 8 is_stmt 0 view .LVU543
 2042 00aa 00F09A81 		beq	.L162
 2043              		.loc 2 446 29 discriminator 1 view .LVU544
 2044 00ae 0028     		cmp	r0, #0
 2045 00b0 40F39481 		ble	.L163
 447:src/console.c ****       reset_auto_off();
 2046              		.loc 2 447 7 is_stmt 1 view .LVU545
 2047 00b4 904B     		ldr	r3, .L230+52
 2048 00b6 9847     		blx	r3
 2049              	.LVL166:
 448:src/console.c ****       start_key_timer();
 2050              		.loc 2 448 7 view .LVU546
 2051              	.LBB97:
 2052              	.LBI97:
 240:src/console.c ****     start_ticks = get_rtc_ticks();
 2053              		.loc 2 240 6 view .LVU547
 2054              	.LBB98:
 241:src/console.c **** }
 2055              		.loc 2 241 5 view .LVU548
 241:src/console.c **** }
 2056              		.loc 2 241 19 is_stmt 0 view .LVU549
 2057 00b8 904B     		ldr	r3, .L230+56
 2058 00ba 9847     		blx	r3
 2059              	.LVL167:
 241:src/console.c **** }
 2060              		.loc 2 241 17 view .LVU550
 2061 00bc 904B     		ldr	r3, .L230+60
 2062              	.LBE98:
 2063              	.LBE97:
 2064              	.LBB100:
 2065              	.LBB101:
  68:src/console.c **** 
 2066              		.loc 2 68 6 view .LVU551
 2067 00be BAF1630F 		cmp	r10, #99
 2068              	.LBE101:
ARM GAS  /tmp/ccj9eXy0.s 			page 56


 2069              	.LBE100:
 2070              	.LBB113:
 2071              	.LBB99:
 241:src/console.c **** }
 2072              		.loc 2 241 17 view .LVU552
 2073 00c2 1860     		str	r0, [r3]
 2074              	.LBE99:
 2075              	.LBE113:
 449:src/console.c ****     }
 450:src/console.c ****     if (c >= 0) {
 2076              		.loc 2 450 5 is_stmt 1 view .LVU553
 451:src/console.c ****       remapped = remap(c);
 2077              		.loc 2 451 7 view .LVU554
 2078              	.LVL168:
 2079              	.LBB114:
 2080              	.LBI100:
  60:src/console.c **** 
 2081              		.loc 2 60 22 view .LVU555
 2082              	.LBB102:
  62:src/console.c **** 
 2083              		.loc 2 62 3 view .LVU556
 2084              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 2085              		.loc 3 1 1 view .LVU557
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
ARM GAS  /tmp/ccj9eXy0.s 			page 57


  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 2086              		.loc 3 59 3 view .LVU558
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K52, 2}, // Integral
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
ARM GAS  /tmp/ccj9eXy0.s 			page 58


  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_NOP, 0}, // no function
  96:src/keytran.c ****     {K_NOP, 0}, // no function
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 2087              		.loc 3 117 3 view .LVU559
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K20, 2}, // Fill
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K_NOP, 0}, // no function
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
ARM GAS  /tmp/ccj9eXy0.s 			page 59


 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     {K53, 3}, // X.FCN
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 0}, // Exit
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K_NOP, 0}, // no function
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 2088              		.loc 3 175 1 view .LVU560
  66:src/console.c **** 
 2089              		.loc 2 66 3 view .LVU561
  68:src/console.c **** 
 2090              		.loc 2 68 3 view .LVU562
  68:src/console.c **** 
 2091              		.loc 2 68 6 is_stmt 0 view .LVU563
 2092 00c4 00F0C981 		beq	.L214
  70:src/console.c ****     // Start click 
 2093              		.loc 2 70 3 is_stmt 1 view .LVU564
  70:src/console.c ****     // Start click 
 2094              		.loc 2 70 6 is_stmt 0 view .LVU565
 2095 00c8 BAF12C0F 		cmp	r10, #44
 2096 00cc 00F09181 		beq	.L215
 2097              	.LVL169:
 2098              	.L166:
  84:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2099              		.loc 2 84 3 is_stmt 1 view .LVU566
  84:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2100              		.loc 2 84 8 is_stmt 0 view .LVU567
 2101 00d0 FFF7FEFF 		bl	get_alpha_state
 2102              	.LVL170:
  84:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2103              		.loc 2 84 6 view .LVU568
 2104 00d4 0028     		cmp	r0, #0
 2105 00d6 7AD0     		beq	.L168
  85:src/console.c ****       switch (cur_shift()) { 
 2106              		.loc 2 85 5 is_stmt 1 view .LVU569
ARM GAS  /tmp/ccj9eXy0.s 			page 60


  85:src/console.c ****       switch (cur_shift()) { 
 2107              		.loc 2 85 8 is_stmt 0 view .LVU570
 2108 00d8 BAF11C0F 		cmp	r10, #28
 2109 00dc 00F0D281 		beq	.L216
 102:src/console.c ****   }
 2110              		.loc 2 102 5 is_stmt 1 view .LVU571
 102:src/console.c ****   }
 2111              		.loc 2 102 26 is_stmt 0 view .LVU572
 2112 00e0 884A     		ldr	r2, .L230+64
 2113              	.L213:
 131:src/console.c ****     break;
 2114              		.loc 2 131 26 view .LVU573
 2115 00e2 02EBCA03 		add	r3, r2, r10, lsl #3
 2116 00e6 93E80300 		ldm	r3, {r0, r1}
 2117 00ea 12F83A30 		ldrb	r3, [r2, r10, lsl #3]	@ zero_extendqisi2
 2118              	.LVL171:
 131:src/console.c ****     break;
 2119              		.loc 2 131 26 view .LVU574
 2120 00ee 85E80300 		stm	r5, {r0, r1}
 2121 00f2 8A46     		mov	r10, r1
 2122              	.LVL172:
 2123              	.L165:
 131:src/console.c ****     break;
 2124              		.loc 2 131 26 view .LVU575
 2125              	.LBE102:
 2126              	.LBE114:
 452:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2127              		.loc 2 452 7 is_stmt 1 view .LVU576
 2128              		.loc 2 452 10 is_stmt 0 view .LVU577
 2129 00f4 2F2B     		cmp	r3, #47
 2130 00f6 00F09480 		beq	.L217
 2131              	.LVL173:
 2132              	.L190:
 453:src/console.c **** 	set_menu ( remapped.shift );
 454:src/console.c **** 	display_current_menu ();
 455:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 456:src/console.c **** 	case SHIFT_F:
 457:src/console.c **** 	  remapped = f_shift; // F -> N
 458:src/console.c **** 	  break;
 459:src/console.c **** 	case SHIFT_G:
 460:src/console.c **** 	  remapped = g_shift; // G -> N
 461:src/console.c **** 	  break;
 462:src/console.c **** 	case SHIFT_H:
 463:src/console.c **** 	  remapped = h_shift; // H -> N
 464:src/console.c **** 	default:
 465:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 466:src/console.c **** 	}
 467:src/console.c ****       }
 468:src/console.c ****       if (remapped.key_34s == K_SYS) {
 2133              		.loc 2 468 7 is_stmt 1 view .LVU578
 2134              		.loc 2 468 10 is_stmt 0 view .LVU579
 2135 00fa 302B     		cmp	r3, #48
 2136 00fc 1AD1     		bne	.L196
 469:src/console.c **** 	SET_ST(STAT_MENU);
 2137              		.loc 2 469 2 is_stmt 1 view .LVU580
 2138 00fe 2368     		ldr	r3, [r4]
 2139              	.LVL174:
ARM GAS  /tmp/ccj9eXy0.s 			page 61


 470:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 2140              		.loc 2 470 2 is_stmt 0 view .LVU581
 2141 0100 DFF840A2 		ldr	r10, .L230+128
 2142              	.LVL175:
 2143              		.loc 2 470 2 view .LVU582
 2144 0104 8048     		ldr	r0, .L230+68
 2145 0106 0022     		movs	r2, #0
 469:src/console.c **** 	SET_ST(STAT_MENU);
 2146              		.loc 2 469 2 view .LVU583
 2147 0108 43F04003 		orr	r3, r3, #64
 2148              		.loc 2 470 2 view .LVU584
 2149 010c 1146     		mov	r1, r2
 469:src/console.c **** 	SET_ST(STAT_MENU);
 2150              		.loc 2 469 2 view .LVU585
 2151 010e 2360     		str	r3, [r4]
 2152              		.loc 2 470 2 is_stmt 1 view .LVU586
 2153 0110 D047     		blx	r10
 2154              	.LVL176:
 471:src/console.c **** 	CLR_ST(STAT_MENU);
 2155              		.loc 2 471 2 view .LVU587
 2156 0112 2368     		ldr	r3, [r4]
 2157 0114 23F04003 		bic	r3, r3, #64
 2158 0118 2360     		str	r3, [r4]
 472:src/console.c **** 	remapped =  no_key;
 2159              		.loc 2 472 2 view .LVU588
 2160              		.loc 2 472 11 is_stmt 0 view .LVU589
 2161 011a 7C4B     		ldr	r3, .L230+72
 2162 011c 93E80300 		ldm	r3, {r0, r1}
 2163 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2164 0122 0193     		str	r3, [sp, #4]
 2165              	.LVL177:
 2166              		.loc 2 472 11 view .LVU590
 2167 0124 85E80300 		stm	r5, {r0, r1}
 473:src/console.c **** 	display_menu (current_menu);
 2168              		.loc 2 473 2 view .LVU591
 2169 0128 DBF80000 		ldr	r0, [fp]
 472:src/console.c **** 	remapped =  no_key;
 2170              		.loc 2 472 11 view .LVU592
 2171 012c 8A46     		mov	r10, r1
 2172              	.LVL178:
 2173              		.loc 2 473 2 is_stmt 1 view .LVU593
 2174 012e FFF7FEFF 		bl	display_menu
 2175              	.LVL179:
 2176              		.loc 2 473 2 is_stmt 0 view .LVU594
 2177 0132 019B     		ldr	r3, [sp, #4]
 2178              	.LVL180:
 2179              	.L196:
 474:src/console.c ****       }
 475:src/console.c ****       if (remapped.key_34s == K_MULTI) remapped = do_multi (remapped);
 2180              		.loc 2 475 7 is_stmt 1 view .LVU595
 2181              		.loc 2 475 10 is_stmt 0 view .LVU596
 2182 0134 312B     		cmp	r3, #49
 2183 0136 00F07D81 		beq	.L218
 2184              	.LVL181:
 2185              	.L170:
 476:src/console.c **** 
 477:src/console.c ****       process_keycode_with_shift(remapped);
ARM GAS  /tmp/ccj9eXy0.s 			page 62


 2186              		.loc 2 477 7 is_stmt 1 view .LVU597
 2187              		.loc 2 477 7 is_stmt 0 view .LVU598
 2188 013a 8DF81030 		strb	r3, [sp, #16]
 2189 013e CDF814A0 		str	r10, [sp, #20]
 2190 0142 95E80300 		ldm	r5, {r0, r1}
 2191 0146 FFF7FEFF 		bl	process_keycode_with_shift
 2192              	.LVL182:
 386:src/console.c **** 
 2193              		.loc 2 386 3 is_stmt 1 view .LVU599
 388:src/console.c ****       {
 2194              		.loc 2 388 5 view .LVU600
 388:src/console.c ****       {
 2195              		.loc 2 388 10 is_stmt 0 view .LVU601
 2196 014a 2368     		ldr	r3, [r4]
 388:src/console.c ****       {
 2197              		.loc 2 388 8 view .LVU602
 2198 014c 9F05     		lsls	r7, r3, #22
 2199 014e 3FF57FAF 		bmi	.L219
 2200              	.LVL183:
 2201              	.L148:
 393:src/console.c ****     {
 2202              		.loc 2 393 10 is_stmt 1 view .LVU603
 393:src/console.c ****     {
 2203              		.loc 2 393 15 is_stmt 0 view .LVU604
 2204 0152 2068     		ldr	r0, [r4]
 393:src/console.c ****     {
 2205              		.loc 2 393 13 view .LVU605
 2206 0154 10F4007A 		ands	r10, r0, #512
 2207 0158 83D1     		bne	.L149
 393:src/console.c ****     {
 2208              		.loc 2 393 35 discriminator 1 view .LVU606
 2209 015a B047     		blx	r6
 2210              	.LVL184:
 393:src/console.c ****     {
 2211              		.loc 2 393 32 discriminator 1 view .LVU607
 2212 015c 0028     		cmp	r0, #0
 2213 015e 80D0     		beq	.L149
 395:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2214              		.loc 2 395 7 is_stmt 1 view .LVU608
 2215 0160 2368     		ldr	r3, [r4]
 2216 0162 23F00203 		bic	r3, r3, #2
 396:src/console.c ****       sys_sleep();
 2217              		.loc 2 396 7 is_stmt 0 view .LVU609
 2218 0166 5046     		mov	r0, r10
 2219 0168 6421     		movs	r1, #100
 395:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2220              		.loc 2 395 7 view .LVU610
 2221 016a 2360     		str	r3, [r4]
 396:src/console.c ****       sys_sleep();
 2222              		.loc 2 396 7 is_stmt 1 view .LVU611
 2223 016c C047     		blx	r8
 2224              	.LVL185:
 397:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 2225              		.loc 2 397 7 view .LVU612
 2226 016e 5C4B     		ldr	r3, .L230+28
 2227 0170 9847     		blx	r3
 2228              	.LVL186:
ARM GAS  /tmp/ccj9eXy0.s 			page 63


 398:src/console.c **** 	key_push (K_HEARTBEAT);
 2229              		.loc 2 398 7 view .LVU613
 398:src/console.c **** 	key_push (K_HEARTBEAT);
 2230              		.loc 2 398 11 is_stmt 0 view .LVU614
 2231 0172 674B     		ldr	r3, .L230+76
 2232 0174 5046     		mov	r0, r10
 2233 0176 9847     		blx	r3
 2234              	.LVL187:
 398:src/console.c **** 	key_push (K_HEARTBEAT);
 2235              		.loc 2 398 10 view .LVU615
 2236 0178 58B1     		cbz	r0, .L153
 399:src/console.c **** 	if (Pause > 0) Pause--;
 2237              		.loc 2 399 2 is_stmt 1 view .LVU616
 2238 017a 664B     		ldr	r3, .L230+80
 2239 017c 6220     		movs	r0, #98
 2240 017e 9847     		blx	r3
 2241              	.LVL188:
 400:src/console.c ****       }
 2242              		.loc 2 400 2 view .LVU617
 400:src/console.c ****       }
 2243              		.loc 2 400 12 is_stmt 0 view .LVU618
 2244 0180 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 400:src/console.c ****       }
 2245              		.loc 2 400 5 view .LVU619
 2246 0184 2BB1     		cbz	r3, .L153
 400:src/console.c ****       }
 2247              		.loc 2 400 17 is_stmt 1 discriminator 1 view .LVU620
 400:src/console.c ****       }
 2248              		.loc 2 400 22 is_stmt 0 discriminator 1 view .LVU621
 2249 0186 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 2250 018a 013B     		subs	r3, r3, #1
 2251 018c DBB2     		uxtb	r3, r3
 2252 018e 89F80030 		strb	r3, [r9]
 2253              	.L153:
 402:src/console.c ****     }
 2254              		.loc 2 402 7 is_stmt 1 view .LVU622
 2255 0192 614B     		ldr	r3, .L230+84
 2256 0194 0020     		movs	r0, #0
 2257 0196 9847     		blx	r3
 2258              	.LVL189:
 406:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2259              		.loc 2 406 5 view .LVU623
 406:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2260              		.loc 2 406 9 is_stmt 0 view .LVU624
 2261 0198 2368     		ldr	r3, [r4]
 406:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2262              		.loc 2 406 8 view .LVU625
 2263 019a 9905     		lsls	r1, r3, #22
 2264 019c 7FF565AF 		bpl	.L220
 2265              	.L155:
 407:src/console.c ****         // Going to off mode
 2266              		.loc 2 407 7 is_stmt 1 view .LVU626
 407:src/console.c ****         // Going to off mode
 2267              		.loc 2 407 12 is_stmt 0 view .LVU627
 2268 01a0 2068     		ldr	r0, [r4]
 407:src/console.c ****         // Going to off mode
 2269              		.loc 2 407 10 view .LVU628
ARM GAS  /tmp/ccj9eXy0.s 			page 64


 2270 01a2 10F0040A 		ands	r10, r0, #4
 2271 01a6 7FF44FAF 		bne	.L147
 409:src/console.c ****         draw_power_off_image(1);
 2272              		.loc 2 409 9 is_stmt 1 view .LVU629
 2273 01aa 5C4B     		ldr	r3, .L230+88
 2274 01ac 5046     		mov	r0, r10
 2275 01ae 9847     		blx	r3
 2276              	.LVL190:
 410:src/console.c **** 
 2277              		.loc 2 410 9 view .LVU630
 2278 01b0 5B4B     		ldr	r3, .L230+92
 2279 01b2 0120     		movs	r0, #1
 2280 01b4 9847     		blx	r3
 2281              	.LVL191:
 412:src/console.c ****         SET_ST(STAT_SUSPENDED);
 2282              		.loc 2 412 9 view .LVU631
 2283 01b6 5B4B     		ldr	r3, .L230+96
 2284 01b8 5046     		mov	r0, r10
 2285 01ba 9847     		blx	r3
 2286              	.LVL192:
 413:src/console.c ****         SET_ST(STAT_OFF);
 2287              		.loc 2 413 9 view .LVU632
 2288 01bc 2368     		ldr	r3, [r4]
 2289 01be 43F00403 		orr	r3, r3, #4
 2290 01c2 2360     		str	r3, [r4]
 414:src/console.c ****       }
 2291              		.loc 2 414 9 view .LVU633
 2292 01c4 2368     		ldr	r3, [r4]
 2293 01c6 43F01003 		orr	r3, r3, #16
 2294 01ca 2360     		str	r3, [r4]
 2295 01cc 3CE7     		b	.L147
 2296              	.LVL193:
 2297              	.L168:
 2298              	.LBB115:
 2299              	.LBB103:
 105:src/console.c ****   case KEY_F1:
 2300              		.loc 2 105 3 view .LVU634
 2301 01ce AAF12603 		sub	r3, r10, #38
 2302 01d2 052B     		cmp	r3, #5
 2303 01d4 00F26E81 		bhi	.L173
 2304 01d8 DFE813F0 		tbh	[pc, r3, lsl #1]
 2305              	.L175:
 2306 01dc EB00     		.2byte	(.L180-.L175)/2
 2307 01de D500     		.2byte	(.L179-.L175)/2
 2308 01e0 BB00     		.2byte	(.L178-.L175)/2
 2309 01e2 5F00     		.2byte	(.L177-.L175)/2
 2310 01e4 4500     		.2byte	(.L176-.L175)/2
 2311 01e6 0B00     		.2byte	(.L174-.L175)/2
 2312              		.p2align 1
 2313              	.L185:
 120:src/console.c ****   case KEY_F6:
 2314              		.loc 2 120 5 view .LVU635
 120:src/console.c ****   case KEY_F6:
 2315              		.loc 2 120 9 is_stmt 0 view .LVU636
 2316 01e8 FFF7FEFF 		bl	cur_shift
 2317              	.LVL194:
 120:src/console.c ****   case KEY_F6:
ARM GAS  /tmp/ccj9eXy0.s 			page 65


 2318              		.loc 2 120 8 view .LVU637
 2319 01ec 0128     		cmp	r0, #1
 2320 01ee 00F08C81 		beq	.L221
 2321              	.L174:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2322              		.loc 2 122 5 is_stmt 1 view .LVU638
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2323              		.loc 2 122 9 is_stmt 0 view .LVU639
 2324 01f2 FFF7FEFF 		bl	cur_shift
 2325              	.LVL195:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2326              		.loc 2 122 8 view .LVU640
 2327 01f6 0028     		cmp	r0, #0
 2328 01f8 40F05881 		bne	.L186
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2329              		.loc 2 122 33 is_stmt 1 view .LVU641
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2330              		.loc 2 122 67 is_stmt 0 view .LVU642
 2331 01fc DBF80030 		ldr	r3, [fp]
 2332 0200 494F     		ldr	r7, .L230+100
 2333 0202 D022     		movs	r2, #208
 2334 0204 02FB03F2 		mul	r2, r2, r3
 2335 0208 BB18     		adds	r3, r7, r2
 2336 020a D3E92C01 		ldrd	r0, r1, [r3, #176]
 2337 020e B032     		adds	r2, r2, #176
 2338 0210 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2339              	.LVL196:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2340              		.loc 2 122 67 view .LVU643
 2341 0212 85E80300 		stm	r5, {r0, r1}
 2342 0216 3A44     		add	r2, r2, r7
 2343              	.LBE103:
 2344              	.LBE115:
 452:src/console.c **** 	set_menu ( remapped.shift );
 2345              		.loc 2 452 10 view .LVU644
 2346 0218 2F2B     		cmp	r3, #47
 2347              	.LBB116:
 2348              	.LBB104:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2349              		.loc 2 122 67 view .LVU645
 2350 021a D2F804A0 		ldr	r10, [r2, #4]
 2351              	.LVL197:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2352              		.loc 2 122 67 view .LVU646
 2353              	.LBE104:
 2354              	.LBE116:
 452:src/console.c **** 	set_menu ( remapped.shift );
 2355              		.loc 2 452 7 is_stmt 1 view .LVU647
 452:src/console.c **** 	set_menu ( remapped.shift );
 2356              		.loc 2 452 10 is_stmt 0 view .LVU648
 2357 021e 7FF46CAF 		bne	.L190
 2358              	.L217:
 453:src/console.c **** 	display_current_menu ();
 2359              		.loc 2 453 2 is_stmt 1 view .LVU649
 2360              	.LVL198:
 2361              	.LBB117:
 2362              	.LBI117:
ARM GAS  /tmp/ccj9eXy0.s 			page 66


   3:src/menu.c    ****   int m = current_menu;
 2363              		.loc 1 3 6 view .LVU650
 2364              	.LBB118:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2365              		.loc 1 4 3 view .LVU651
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2366              		.loc 1 4 7 is_stmt 0 view .LVU652
 2367 0222 DBF80030 		ldr	r3, [fp]
 2368              	.LVL199:
   5:src/menu.c    ****     current_menu = 0;
 2369              		.loc 1 5 3 is_stmt 1 view .LVU653
   5:src/menu.c    ****     current_menu = 0;
 2370              		.loc 1 5 6 is_stmt 0 view .LVU654
 2371 0226 5345     		cmp	r3, r10
 2372 0228 00F02081 		beq	.L191
   8:src/menu.c    ****     current_menu = last_menu;
 2373              		.loc 1 8 8 is_stmt 1 view .LVU655
   8:src/menu.c    ****     current_menu = last_menu;
 2374              		.loc 1 8 11 is_stmt 0 view .LVU656
 2375 022c BAF1FF3F 		cmp	r10, #-1
 2376 0230 00F02281 		beq	.L222
 2377              	.LVL200:
 2378              	.L192:
  12:src/menu.c    ****   }
 2379              		.loc 1 12 5 is_stmt 1 view .LVU657
  12:src/menu.c    ****   }
 2380              		.loc 1 12 18 is_stmt 0 view .LVU658
 2381 0234 CBF800A0 		str	r10, [fp]
 2382              	.LVL201:
 2383              	.L194:
  14:src/menu.c    **** }
 2384              		.loc 1 14 3 is_stmt 1 view .LVU659
  14:src/menu.c    **** }
 2385              		.loc 1 14 13 is_stmt 0 view .LVU660
 2386 0238 3C4A     		ldr	r2, .L230+104
 2387              	.LBE118:
 2388              	.LBE117:
 2389              	.LBB122:
 2390              	.LBB123:
  22:src/menu.c    **** }
 2391              		.loc 1 22 3 view .LVU661
 2392 023a 5046     		mov	r0, r10
 2393              	.LBE123:
 2394              	.LBE122:
 2395              	.LBB125:
 2396              	.LBB119:
  14:src/menu.c    **** }
 2397              		.loc 1 14 13 view .LVU662
 2398 023c 1360     		str	r3, [r2]
 2399              	.LBE119:
 2400              	.LBE125:
 454:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 2401              		.loc 2 454 2 is_stmt 1 view .LVU663
 2402              	.LBB126:
 2403              	.LBI122:
  21:src/menu.c    ****   display_menu (current_menu);
 2404              		.loc 1 21 6 view .LVU664
ARM GAS  /tmp/ccj9eXy0.s 			page 67


 2405              	.LBB124:
  22:src/menu.c    **** }
 2406              		.loc 1 22 3 view .LVU665
 2407 023e FFF7FEFF 		bl	display_menu
 2408              	.LVL202:
 2409              	.LBE124:
 2410              	.LBE126:
 455:src/console.c **** 	case SHIFT_F:
 2411              		.loc 2 455 2 view .LVU666
 455:src/console.c **** 	case SHIFT_F:
 2412              		.loc 2 455 10 is_stmt 0 view .LVU667
 2413 0242 FFF7FEFF 		bl	cur_shift
 2414              	.LVL203:
 455:src/console.c **** 	case SHIFT_F:
 2415              		.loc 2 455 2 view .LVU668
 2416 0246 0228     		cmp	r0, #2
 457:src/console.c **** 	  break;
 2417              		.loc 2 457 4 is_stmt 1 view .LVU669
 457:src/console.c **** 	  break;
 2418              		.loc 2 457 13 is_stmt 0 view .LVU670
 2419 0248 14BF     		ite	ne
 2420 024a 394B     		ldrne	r3, .L230+108
 460:src/console.c **** 	  break;
 2421              		.loc 2 460 4 is_stmt 1 view .LVU671
 460:src/console.c **** 	  break;
 2422              		.loc 2 460 13 is_stmt 0 view .LVU672
 2423 024c 394B     		ldreq	r3, .L230+112
 2424 024e 93E80300 		ldm	r3, {r0, r1}
 2425 0252 85E80300 		stm	r5, {r0, r1}
 2426 0256 8A46     		mov	r10, r1
 2427 0258 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2428              	.LVL204:
 461:src/console.c **** 	case SHIFT_H:
 2429              		.loc 2 461 4 is_stmt 1 view .LVU673
 2430 025a 4EE7     		b	.L190
 2431              	.LVL205:
 2432              	.L184:
 2433              	.LBB127:
 2434              	.LBB105:
 117:src/console.c ****   case KEY_F5:
 2435              		.loc 2 117 5 view .LVU674
 117:src/console.c ****   case KEY_F5:
 2436              		.loc 2 117 9 is_stmt 0 view .LVU675
 2437 025c FFF7FEFF 		bl	cur_shift
 2438              	.LVL206:
 117:src/console.c ****   case KEY_F5:
 2439              		.loc 2 117 8 view .LVU676
 2440 0260 0128     		cmp	r0, #1
 2441 0262 00F06381 		beq	.L223
 2442              	.L176:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2443              		.loc 2 119 5 is_stmt 1 view .LVU677
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2444              		.loc 2 119 9 is_stmt 0 view .LVU678
 2445 0266 FFF7FEFF 		bl	cur_shift
 2446              	.LVL207:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
ARM GAS  /tmp/ccj9eXy0.s 			page 68


 2447              		.loc 2 119 8 view .LVU679
 2448 026a 0028     		cmp	r0, #0
 2449 026c BCD1     		bne	.L185
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2450              		.loc 2 119 33 is_stmt 1 view .LVU680
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2451              		.loc 2 119 67 is_stmt 0 view .LVU681
 2452 026e DBF80030 		ldr	r3, [fp]
 2453 0272 2D4F     		ldr	r7, .L230+100
 2454 0274 D022     		movs	r2, #208
 2455 0276 02FB03F2 		mul	r2, r2, r3
 2456 027a BB18     		adds	r3, r7, r2
 2457 027c D3E92401 		ldrd	r0, r1, [r3, #144]
 2458 0280 9032     		adds	r2, r2, #144
 2459 0282 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2460              	.LVL208:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2461              		.loc 2 119 67 view .LVU682
 2462 0284 85E80300 		stm	r5, {r0, r1}
 2463 0288 3A44     		add	r2, r2, r7
 2464 028a D2F804A0 		ldr	r10, [r2, #4]
 2465              	.LVL209:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2466              		.loc 2 119 67 view .LVU683
 2467 028e 31E7     		b	.L165
 2468              	.LVL210:
 2469              	.L183:
 114:src/console.c ****   case KEY_F4:
 2470              		.loc 2 114 5 is_stmt 1 view .LVU684
 114:src/console.c ****   case KEY_F4:
 2471              		.loc 2 114 9 is_stmt 0 view .LVU685
 2472 0290 FFF7FEFF 		bl	cur_shift
 2473              	.LVL211:
 114:src/console.c ****   case KEY_F4:
 2474              		.loc 2 114 8 view .LVU686
 2475 0294 0128     		cmp	r0, #1
 2476 0296 00F05A81 		beq	.L224
 2477              	.L177:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2478              		.loc 2 116 5 is_stmt 1 view .LVU687
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2479              		.loc 2 116 9 is_stmt 0 view .LVU688
 2480 029a FFF7FEFF 		bl	cur_shift
 2481              	.LVL212:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2482              		.loc 2 116 8 view .LVU689
 2483 029e 0028     		cmp	r0, #0
 2484 02a0 DCD1     		bne	.L184
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2485              		.loc 2 116 33 is_stmt 1 view .LVU690
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2486              		.loc 2 116 67 is_stmt 0 view .LVU691
 2487 02a2 DBF80030 		ldr	r3, [fp]
 2488 02a6 204F     		ldr	r7, .L230+100
 2489 02a8 D022     		movs	r2, #208
 2490 02aa 02FB03F2 		mul	r2, r2, r3
 2491 02ae BB18     		adds	r3, r7, r2
ARM GAS  /tmp/ccj9eXy0.s 			page 69


 2492 02b0 D3E91C01 		ldrd	r0, r1, [r3, #112]
 2493 02b4 7032     		adds	r2, r2, #112
 2494 02b6 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2495              	.LVL213:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2496              		.loc 2 116 67 view .LVU692
 2497 02b8 85E80300 		stm	r5, {r0, r1}
 2498 02bc 3A44     		add	r2, r2, r7
 2499 02be D2F804A0 		ldr	r10, [r2, #4]
 2500              	.LVL214:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2501              		.loc 2 116 67 view .LVU693
 2502 02c2 17E7     		b	.L165
 2503              	.L231:
 2504              		.align	2
 2505              	.L230:
 2506 02c4 00000000 		.word	StateWhileOn
 2507 02c8 00000000 		.word	DispMsg
 2508 02cc 00000000 		.word	.LC1
 2509 02d0 00200010 		.word	268443648
 2510 02d4 7D030008 		.word	134218621
 2511 02d8 31020008 		.word	134218289
 2512 02dc 00000000 		.word	JustDisplayed
 2513 02e0 19040008 		.word	134218777
 2514 02e4 19020008 		.word	134218265
 2515 02e8 E5020008 		.word	134218469
 2516 02ec 59020008 		.word	134218329
 2517 02f0 35020008 		.word	134218293
 2518 02f4 89030008 		.word	134218633
 2519 02f8 B9030008 		.word	134218681
 2520 02fc B9040008 		.word	134218937
 2521 0300 00000000 		.word	.LANCHOR4
 2522 0304 00000000 		.word	.LANCHOR11
 2523 0308 00000000 		.word	.LANCHOR15
 2524 030c 00000000 		.word	.LANCHOR6
 2525 0310 01040008 		.word	134218753
 2526 0314 81030008 		.word	134218625
 2527 0318 F5030008 		.word	134218741
 2528 031c 55020008 		.word	134218325
 2529 0320 2D040008 		.word	134218797
 2530 0324 1D020008 		.word	134218269
 2531 0328 00000000 		.word	.LANCHOR3
 2532 032c 00000000 		.word	.LANCHOR2
 2533 0330 00000000 		.word	.LANCHOR13
 2534 0334 00000000 		.word	.LANCHOR14
 2535 0338 00000000 		.word	.LANCHOR1
 2536 033c 00000000 		.word	Pause
 2537 0340 F9030008 		.word	134218745
 2538 0344 59030008 		.word	134218585
 2539              	.LVL215:
 2540              	.L182:
 111:src/console.c ****   case KEY_F3:
 2541              		.loc 2 111 5 is_stmt 1 view .LVU694
 111:src/console.c ****   case KEY_F3:
 2542              		.loc 2 111 9 is_stmt 0 view .LVU695
 2543 0348 FFF7FEFF 		bl	cur_shift
 2544              	.LVL216:
ARM GAS  /tmp/ccj9eXy0.s 			page 70


 111:src/console.c ****   case KEY_F3:
 2545              		.loc 2 111 8 view .LVU696
 2546 034c 0128     		cmp	r0, #1
 2547 034e 00F00F81 		beq	.L225
 2548              	.L178:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2549              		.loc 2 113 5 is_stmt 1 view .LVU697
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2550              		.loc 2 113 9 is_stmt 0 view .LVU698
 2551 0352 FFF7FEFF 		bl	cur_shift
 2552              	.LVL217:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2553              		.loc 2 113 8 view .LVU699
 2554 0356 0028     		cmp	r0, #0
 2555 0358 9AD1     		bne	.L183
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2556              		.loc 2 113 33 is_stmt 1 view .LVU700
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2557              		.loc 2 113 67 is_stmt 0 view .LVU701
 2558 035a DBF80030 		ldr	r3, [fp]
 2559 035e A74F     		ldr	r7, .L232
 2560 0360 D022     		movs	r2, #208
 2561 0362 02FB03F2 		mul	r2, r2, r3
 2562 0366 BB18     		adds	r3, r7, r2
 2563 0368 D3E91401 		ldrd	r0, r1, [r3, #80]
 2564 036c 5032     		adds	r2, r2, #80
 2565 036e BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2566              	.LVL218:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2567              		.loc 2 113 67 view .LVU702
 2568 0370 85E80300 		stm	r5, {r0, r1}
 2569 0374 3A44     		add	r2, r2, r7
 2570 0376 D2F804A0 		ldr	r10, [r2, #4]
 2571              	.LVL219:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2572              		.loc 2 113 67 view .LVU703
 2573 037a BBE6     		b	.L165
 2574              	.LVL220:
 2575              	.L181:
 108:src/console.c ****   case KEY_F2:
 2576              		.loc 2 108 5 is_stmt 1 view .LVU704
 108:src/console.c ****   case KEY_F2:
 2577              		.loc 2 108 9 is_stmt 0 view .LVU705
 2578 037c FFF7FEFF 		bl	cur_shift
 2579              	.LVL221:
 108:src/console.c ****   case KEY_F2:
 2580              		.loc 2 108 8 view .LVU706
 2581 0380 0128     		cmp	r0, #1
 2582 0382 00F00681 		beq	.L226
 2583              	.L179:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2584              		.loc 2 110 5 is_stmt 1 view .LVU707
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2585              		.loc 2 110 9 is_stmt 0 view .LVU708
 2586 0386 FFF7FEFF 		bl	cur_shift
 2587              	.LVL222:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
ARM GAS  /tmp/ccj9eXy0.s 			page 71


 2588              		.loc 2 110 8 view .LVU709
 2589 038a 0028     		cmp	r0, #0
 2590 038c DCD1     		bne	.L182
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2591              		.loc 2 110 33 is_stmt 1 view .LVU710
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2592              		.loc 2 110 67 is_stmt 0 view .LVU711
 2593 038e DBF80030 		ldr	r3, [fp]
 2594 0392 D022     		movs	r2, #208
 2595 0394 02FB03F2 		mul	r2, r2, r3
 2596 0398 984B     		ldr	r3, .L232
 2597 039a 1F46     		mov	r7, r3
 2598 039c 1344     		add	r3, r3, r2
 2599 039e D3E90C01 		ldrd	r0, r1, [r3, #48]
 2600 03a2 3032     		adds	r2, r2, #48
 2601 03a4 85E80300 		stm	r5, {r0, r1}
 2602 03a8 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2603              	.LVL223:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2604              		.loc 2 110 67 view .LVU712
 2605 03aa 3A44     		add	r2, r2, r7
 2606 03ac D2F804A0 		ldr	r10, [r2, #4]
 2607              	.LVL224:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2608              		.loc 2 110 67 view .LVU713
 2609 03b0 A0E6     		b	.L165
 2610              	.LVL225:
 2611              	.L180:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2612              		.loc 2 107 5 is_stmt 1 view .LVU714
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2613              		.loc 2 107 9 is_stmt 0 view .LVU715
 2614 03b2 FFF7FEFF 		bl	cur_shift
 2615              	.LVL226:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2616              		.loc 2 107 8 view .LVU716
 2617 03b6 0028     		cmp	r0, #0
 2618 03b8 E0D1     		bne	.L181
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2619              		.loc 2 107 33 is_stmt 1 view .LVU717
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2620              		.loc 2 107 67 is_stmt 0 view .LVU718
 2621 03ba DBF80030 		ldr	r3, [fp]
 2622 03be 8F4F     		ldr	r7, .L232
 2623 03c0 D022     		movs	r2, #208
 2624 03c2 02FB03F2 		mul	r2, r2, r3
 2625 03c6 BB18     		adds	r3, r7, r2
 2626 03c8 D3E90401 		ldrd	r0, r1, [r3, #16]
 2627 03cc 1032     		adds	r2, r2, #16
 2628 03ce BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2629              	.LVL227:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2630              		.loc 2 107 67 view .LVU719
 2631 03d0 85E80300 		stm	r5, {r0, r1}
 2632 03d4 3A44     		add	r2, r2, r7
 2633 03d6 D2F804A0 		ldr	r10, [r2, #4]
 2634              	.LVL228:
ARM GAS  /tmp/ccj9eXy0.s 			page 72


 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2635              		.loc 2 107 67 view .LVU720
 2636 03da 8BE6     		b	.L165
 2637              	.LVL229:
 2638              	.L163:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2639              		.loc 2 107 67 view .LVU721
 2640              	.LBE105:
 2641              	.LBE127:
 450:src/console.c ****       remapped = remap(c);
 2642              		.loc 2 450 5 is_stmt 1 view .LVU722
 450:src/console.c ****       remapped = remap(c);
 2643              		.loc 2 450 8 is_stmt 0 view .LVU723
 2644 03dc 7FF434AE 		bne	.L147
 2645 03e0 76E6     		b	.L166
 2646              	.L162:
 450:src/console.c ****       remapped = remap(c);
 2647              		.loc 2 450 5 is_stmt 1 view .LVU724
 451:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2648              		.loc 2 451 7 view .LVU725
 2649              	.LVL230:
 2650              	.LBB128:
  60:src/console.c **** 
 2651              		.loc 2 60 22 view .LVU726
 2652              	.LBB106:
  62:src/console.c **** 
 2653              		.loc 2 62 3 view .LVU727
   1:src/keytran.c ****     {K_RELEASE, -1},
 2654              		.loc 3 1 1 view .LVU728
  59:src/keytran.c ****     {K_RELEASE, -1},
 2655              		.loc 3 59 3 view .LVU729
 117:src/keytran.c ****     {K_RELEASE, -1},
 2656              		.loc 3 117 3 view .LVU730
 2657              		.loc 3 175 1 view .LVU731
  66:src/console.c **** 
 2658              		.loc 2 66 3 view .LVU732
  66:src/console.c **** 
 2659              		.loc 2 66 23 view .LVU733
  66:src/console.c **** 
 2660              		.loc 2 66 30 is_stmt 0 view .LVU734
 2661 03e2 874B     		ldr	r3, .L232+4
 2662 03e4 93E80300 		ldm	r3, {r0, r1}
 2663              	.LVL231:
  66:src/console.c **** 
 2664              		.loc 2 66 30 view .LVU735
 2665 03e8 85E80300 		stm	r5, {r0, r1}
 2666 03ec 8A46     		mov	r10, r1
 2667              	.LVL232:
  66:src/console.c **** 
 2668              		.loc 2 66 30 view .LVU736
 2669 03ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2670              	.LVL233:
  66:src/console.c **** 
 2671              		.loc 2 66 30 view .LVU737
 2672 03f0 80E6     		b	.L165
 2673              	.LVL234:
 2674              	.L215:
ARM GAS  /tmp/ccj9eXy0.s 			page 73


  72:src/console.c ****     // Make screenshot - allow to report errors
 2675              		.loc 2 72 5 is_stmt 1 view .LVU738
 2676 03f2 844B     		ldr	r3, .L232+8
 2677 03f4 41F23010 		movw	r0, #4400
 2678 03f8 9847     		blx	r3
 2679              	.LVL235:
  72:src/console.c ****     // Make screenshot - allow to report errors
 2680              		.loc 2 72 30 view .LVU739
 2681 03fa 0A20     		movs	r0, #10
 2682 03fc 824B     		ldr	r3, .L232+12
 2683 03fe 9847     		blx	r3
 2684              	.LVL236:
  72:src/console.c ****     // Make screenshot - allow to report errors
 2685              		.loc 2 72 45 view .LVU740
 2686 0400 824B     		ldr	r3, .L232+16
 2687 0402 9847     		blx	r3
 2688              	.LVL237:
  74:src/console.c ****       // Was error just wait for confirmation
 2689              		.loc 2 74 5 view .LVU741
  74:src/console.c ****       // Was error just wait for confirmation
 2690              		.loc 2 74 10 is_stmt 0 view .LVU742
 2691 0404 824B     		ldr	r3, .L232+20
 2692 0406 0120     		movs	r0, #1
 2693 0408 9847     		blx	r3
 2694              	.LVL238:
  74:src/console.c ****       // Was error just wait for confirmation
 2695              		.loc 2 74 8 view .LVU743
 2696 040a 0228     		cmp	r0, #2
 2697 040c 01D1     		bne	.L167
  76:src/console.c ****     }
 2698              		.loc 2 76 7 is_stmt 1 view .LVU744
 2699 040e 814B     		ldr	r3, .L232+24
 2700 0410 9847     		blx	r3
 2701              	.LVL239:
 2702              	.L167:
  79:src/console.c ****     return no_key;
 2703              		.loc 2 79 5 view .LVU745
 2704 0412 7C4B     		ldr	r3, .L232+8
 2705 0414 42F26020 		movw	r0, #8800
 2706 0418 9847     		blx	r3
 2707              	.LVL240:
  79:src/console.c ****     return no_key;
 2708              		.loc 2 79 30 view .LVU746
 2709 041a 0A20     		movs	r0, #10
 2710 041c 7A4B     		ldr	r3, .L232+12
 2711 041e 9847     		blx	r3
 2712              	.LVL241:
  79:src/console.c ****     return no_key;
 2713              		.loc 2 79 45 view .LVU747
 2714 0420 7A4B     		ldr	r3, .L232+16
 2715 0422 9847     		blx	r3
 2716              	.LVL242:
  80:src/console.c ****   }
 2717              		.loc 2 80 5 view .LVU748
  80:src/console.c ****   }
 2718              		.loc 2 80 12 is_stmt 0 view .LVU749
 2719 0424 7C4B     		ldr	r3, .L232+28
ARM GAS  /tmp/ccj9eXy0.s 			page 74


 2720 0426 93E80300 		ldm	r3, {r0, r1}
 2721 042a 85E80300 		stm	r5, {r0, r1}
 2722 042e 8A46     		mov	r10, r1
 2723              	.LVL243:
  80:src/console.c ****   }
 2724              		.loc 2 80 12 view .LVU750
 2725 0430 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2726              	.LVL244:
  80:src/console.c ****   }
 2727              		.loc 2 80 12 view .LVU751
 2728 0432 5FE6     		b	.L165
 2729              	.LVL245:
 2730              	.L218:
  80:src/console.c ****   }
 2731              		.loc 2 80 12 view .LVU752
 2732              	.LBE106:
 2733              	.LBE128:
 475:src/console.c **** 
 2734              		.loc 2 475 40 is_stmt 1 discriminator 1 view .LVU753
 475:src/console.c **** 
 2735              		.loc 2 475 51 is_stmt 0 discriminator 1 view .LVU754
 2736 0434 8DF81030 		strb	r3, [sp, #16]
 2737 0438 CDF814A0 		str	r10, [sp, #20]
 2738 043c 95E80600 		ldm	r5, {r1, r2}
 2739 0440 02A8     		add	r0, sp, #8
 2740 0442 FFF7FEFF 		bl	do_multi
 2741              	.LVL246:
 475:src/console.c **** 
 2742              		.loc 2 475 51 discriminator 1 view .LVU755
 2743 0446 02AB     		add	r3, sp, #8
 2744 0448 93E80300 		ldm	r3, {r0, r1}
 2745 044c 85E80300 		stm	r5, {r0, r1}
 2746              	.LVL247:
 475:src/console.c **** 
 2747              		.loc 2 475 51 discriminator 1 view .LVU756
 2748 0450 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 2749              	.LVL248:
 475:src/console.c **** 
 2750              		.loc 2 475 51 discriminator 1 view .LVU757
 2751 0454 DDF814A0 		ldr	r10, [sp, #20]
 2752              	.LVL249:
 475:src/console.c **** 
 2753              		.loc 2 475 51 discriminator 1 view .LVU758
 2754 0458 6FE6     		b	.L170
 2755              	.LVL250:
 2756              	.L214:
 2757              	.LBB129:
 2758              	.LBB107:
  68:src/console.c **** 
 2759              		.loc 2 68 16 is_stmt 1 view .LVU759
  68:src/console.c **** 
 2760              		.loc 2 68 23 is_stmt 0 view .LVU760
 2761 045a 704B     		ldr	r3, .L232+32
 2762 045c 93E80300 		ldm	r3, {r0, r1}
 2763 0460 85E80300 		stm	r5, {r0, r1}
 2764 0464 8A46     		mov	r10, r1
 2765              	.LVL251:
ARM GAS  /tmp/ccj9eXy0.s 			page 75


  68:src/console.c **** 
 2766              		.loc 2 68 23 view .LVU761
 2767 0466 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2768              	.LVL252:
  68:src/console.c **** 
 2769              		.loc 2 68 23 view .LVU762
 2770 0468 44E6     		b	.L165
 2771              	.LVL253:
 2772              	.L199:
  68:src/console.c **** 
 2773              		.loc 2 68 23 view .LVU763
 2774              	.LBE107:
 2775              	.LBE129:
 2776              	.LBB130:
 2777              	.LBB120:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2778              		.loc 1 4 7 view .LVU764
 2779 046a 9A46     		mov	r10, r3
 2780              	.LVL254:
 2781              	.L191:
   6:src/menu.c    ****   }
 2782              		.loc 1 6 5 is_stmt 1 view .LVU765
   6:src/menu.c    ****   }
 2783              		.loc 1 6 18 is_stmt 0 view .LVU766
 2784 046c 0022     		movs	r2, #0
 2785 046e 5346     		mov	r3, r10
 2786              	.LVL255:
   6:src/menu.c    ****   }
 2787              		.loc 1 6 18 view .LVU767
 2788 0470 CBF80020 		str	r2, [fp]
 2789              	.LVL256:
   6:src/menu.c    ****   }
 2790              		.loc 1 6 18 view .LVU768
 2791 0474 9246     		mov	r10, r2
 2792 0476 DFE6     		b	.L194
 2793              	.LVL257:
 2794              	.L222:
   9:src/menu.c    ****   }
 2795              		.loc 1 9 5 is_stmt 1 view .LVU769
   9:src/menu.c    ****   }
 2796              		.loc 1 9 18 is_stmt 0 view .LVU770
 2797 0478 694A     		ldr	r2, .L232+36
 2798 047a D2F800A0 		ldr	r10, [r2]
 2799              	.LVL258:
   9:src/menu.c    ****   }
 2800              		.loc 1 9 18 view .LVU771
 2801 047e CBF800A0 		str	r10, [fp]
 2802 0482 D9E6     		b	.L194
 2803              	.LVL259:
 2804              	.L216:
   9:src/menu.c    ****   }
 2805              		.loc 1 9 18 view .LVU772
 2806              	.LBE120:
 2807              	.LBE130:
 2808              	.LBB131:
 2809              	.LBB108:
  86:src/console.c ****       case SHIFT_N:
ARM GAS  /tmp/ccj9eXy0.s 			page 76


 2810              		.loc 2 86 7 is_stmt 1 view .LVU773
  86:src/console.c ****       case SHIFT_N:
 2811              		.loc 2 86 15 is_stmt 0 view .LVU774
 2812 0484 FFF7FEFF 		bl	cur_shift
 2813              	.LVL260:
  86:src/console.c ****       case SHIFT_N:
 2814              		.loc 2 86 7 view .LVU775
 2815 0488 0328     		cmp	r0, #3
  86:src/console.c ****       case SHIFT_N:
 2816              		.loc 2 86 15 view .LVU776
 2817 048a 0346     		mov	r3, r0
  86:src/console.c ****       case SHIFT_N:
 2818              		.loc 2 86 7 view .LVU777
 2819 048c 00F2A980 		bhi	.L197
 2820 0490 0128     		cmp	r0, #1
 2821 0492 21D8     		bhi	.L171
 2822 0494 0028     		cmp	r0, #0
 2823 0496 00F08D80 		beq	.L227
  89:src/console.c ****       case SHIFT_F:
 2824              		.loc 2 89 2 is_stmt 1 view .LVU778
  91:src/console.c **** 	break;
 2825              		.loc 2 91 2 view .LVU779
  91:src/console.c **** 	break;
 2826              		.loc 2 91 23 is_stmt 0 view .LVU780
 2827 049a 624B     		ldr	r3, .L232+40
 2828 049c 93E80300 		ldm	r3, {r0, r1}
 2829 04a0 4FF0000A 		mov	r10, #0
 2830              	.LVL261:
  91:src/console.c **** 	break;
 2831              		.loc 2 91 23 view .LVU781
 2832 04a4 85E80300 		stm	r5, {r0, r1}
 2833              	.LVL262:
  91:src/console.c **** 	break;
 2834              		.loc 2 91 23 view .LVU782
 2835              	.LBE108:
 2836              	.LBE131:
 452:src/console.c **** 	set_menu ( remapped.shift );
 2837              		.loc 2 452 7 is_stmt 1 view .LVU783
 468:src/console.c **** 	SET_ST(STAT_MENU);
 2838              		.loc 2 468 7 view .LVU784
 475:src/console.c **** 
 2839              		.loc 2 475 7 view .LVU785
 2840              	.LBB132:
 2841              	.LBB109:
  91:src/console.c **** 	break;
 2842              		.loc 2 91 23 is_stmt 0 view .LVU786
 2843 04a8 2A23     		movs	r3, #42
 2844 04aa 46E6     		b	.L170
 2845              	.LVL263:
 2846              	.L186:
 123:src/console.c ****   }
 2847              		.loc 2 123 5 is_stmt 1 view .LVU787
 123:src/console.c ****   }
 2848              		.loc 2 123 9 is_stmt 0 view .LVU788
 2849 04ac FFF7FEFF 		bl	cur_shift
 2850              	.LVL264:
 123:src/console.c ****   }
ARM GAS  /tmp/ccj9eXy0.s 			page 77


 2851              		.loc 2 123 8 view .LVU789
 2852 04b0 0128     		cmp	r0, #1
 2853 04b2 19D0     		beq	.L228
 2854              	.L173:
 126:src/console.c ****   case SHIFT_N:    
 2855              		.loc 2 126 3 is_stmt 1 view .LVU790
 126:src/console.c ****   case SHIFT_N:    
 2856              		.loc 2 126 11 is_stmt 0 view .LVU791
 2857 04b4 FFF7FEFF 		bl	cur_shift
 2858              	.LVL265:
 126:src/console.c ****   case SHIFT_N:    
 2859              		.loc 2 126 3 view .LVU792
 2860 04b8 0128     		cmp	r0, #1
 2861 04ba 00F09080 		beq	.L187
 2862 04be 0228     		cmp	r0, #2
 2863 04c0 00F08280 		beq	.L188
 2864 04c4 0028     		cmp	r0, #0
 2865 04c6 7DD0     		beq	.L189
  62:src/console.c **** 
 2866              		.loc 2 62 41 view .LVU793
 2867 04c8 5FFA8AF3 		uxtb	r3, r10
 2868              	.LVL266:
  62:src/console.c **** 
 2869              		.loc 2 62 41 view .LVU794
 2870              	.LBE109:
 2871              	.LBE132:
 452:src/console.c **** 	set_menu ( remapped.shift );
 2872              		.loc 2 452 7 is_stmt 1 view .LVU795
 452:src/console.c **** 	set_menu ( remapped.shift );
 2873              		.loc 2 452 10 is_stmt 0 view .LVU796
 2874 04cc 2F2B     		cmp	r3, #47
 2875 04ce 00F08C80 		beq	.L229
 2876              	.LBB133:
 2877              	.LBB110:
 137:src/console.c ****   }
 2878              		.loc 2 137 12 view .LVU797
 2879 04d2 4FF0000A 		mov	r10, #0
 2880              	.LVL267:
 137:src/console.c ****   }
 2881              		.loc 2 137 12 view .LVU798
 2882 04d6 10E6     		b	.L190
 2883              	.LVL268:
 2884              	.L171:
  92:src/console.c ****       case SHIFT_G:
 2885              		.loc 2 92 2 is_stmt 1 view .LVU799
  94:src/console.c **** 	break;
 2886              		.loc 2 94 2 view .LVU800
  94:src/console.c **** 	break;
 2887              		.loc 2 94 9 is_stmt 0 view .LVU801
 2888 04d8 534B     		ldr	r3, .L232+44
 2889 04da 93E80300 		ldm	r3, {r0, r1}
 2890 04de 85E80300 		stm	r5, {r0, r1}
 2891 04e2 8A46     		mov	r10, r1
 2892              	.LVL269:
  94:src/console.c **** 	break;
 2893              		.loc 2 94 9 view .LVU802
 2894 04e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccj9eXy0.s 			page 78


 2895              	.LVL270:
  94:src/console.c **** 	break;
 2896              		.loc 2 94 9 view .LVU803
 2897 04e6 05E6     		b	.L165
 2898              	.LVL271:
 2899              	.L228:
 123:src/console.c ****   }
 2900              		.loc 2 123 33 is_stmt 1 view .LVU804
 123:src/console.c ****   }
 2901              		.loc 2 123 67 is_stmt 0 view .LVU805
 2902 04e8 DBF80030 		ldr	r3, [fp]
 2903 04ec 434F     		ldr	r7, .L232
 2904 04ee D022     		movs	r2, #208
 2905 04f0 02FB03F2 		mul	r2, r2, r3
 2906 04f4 BB18     		adds	r3, r7, r2
 2907 04f6 D3E92E01 		ldrd	r0, r1, [r3, #184]
 2908 04fa B832     		adds	r2, r2, #184
 2909 04fc BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2910              	.LVL272:
 123:src/console.c ****   }
 2911              		.loc 2 123 67 view .LVU806
 2912 04fe 85E80300 		stm	r5, {r0, r1}
 2913 0502 3A44     		add	r2, r2, r7
 2914 0504 D2F804A0 		ldr	r10, [r2, #4]
 2915              	.LVL273:
 123:src/console.c ****   }
 2916              		.loc 2 123 67 view .LVU807
 2917 0508 F4E5     		b	.L165
 2918              	.LVL274:
 2919              	.L221:
 120:src/console.c ****   case KEY_F6:
 2920              		.loc 2 120 33 is_stmt 1 view .LVU808
 120:src/console.c ****   case KEY_F6:
 2921              		.loc 2 120 67 is_stmt 0 view .LVU809
 2922 050a DBF80030 		ldr	r3, [fp]
 2923 050e 3B4F     		ldr	r7, .L232
 2924 0510 D022     		movs	r2, #208
 2925 0512 02FB03F2 		mul	r2, r2, r3
 2926 0516 BB18     		adds	r3, r7, r2
 2927 0518 D3E92601 		ldrd	r0, r1, [r3, #152]
 2928 051c 9832     		adds	r2, r2, #152
 2929 051e BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2930              	.LVL275:
 120:src/console.c ****   case KEY_F6:
 2931              		.loc 2 120 67 view .LVU810
 2932 0520 85E80300 		stm	r5, {r0, r1}
 2933 0524 3A44     		add	r2, r2, r7
 2934 0526 D2F804A0 		ldr	r10, [r2, #4]
 2935              	.LVL276:
 120:src/console.c ****   case KEY_F6:
 2936              		.loc 2 120 67 view .LVU811
 2937 052a E3E5     		b	.L165
 2938              	.LVL277:
 2939              	.L223:
 117:src/console.c ****   case KEY_F5:
 2940              		.loc 2 117 33 is_stmt 1 view .LVU812
 117:src/console.c ****   case KEY_F5:
ARM GAS  /tmp/ccj9eXy0.s 			page 79


 2941              		.loc 2 117 67 is_stmt 0 view .LVU813
 2942 052c DBF80030 		ldr	r3, [fp]
 2943 0530 324F     		ldr	r7, .L232
 2944 0532 D022     		movs	r2, #208
 2945 0534 02FB03F2 		mul	r2, r2, r3
 2946 0538 BB18     		adds	r3, r7, r2
 2947 053a D3E91E01 		ldrd	r0, r1, [r3, #120]
 2948 053e 7832     		adds	r2, r2, #120
 2949 0540 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2950              	.LVL278:
 117:src/console.c ****   case KEY_F5:
 2951              		.loc 2 117 67 view .LVU814
 2952 0542 85E80300 		stm	r5, {r0, r1}
 2953 0546 3A44     		add	r2, r2, r7
 2954 0548 D2F804A0 		ldr	r10, [r2, #4]
 2955              	.LVL279:
 117:src/console.c ****   case KEY_F5:
 2956              		.loc 2 117 67 view .LVU815
 2957 054c D2E5     		b	.L165
 2958              	.LVL280:
 2959              	.L224:
 114:src/console.c ****   case KEY_F4:
 2960              		.loc 2 114 33 is_stmt 1 view .LVU816
 114:src/console.c ****   case KEY_F4:
 2961              		.loc 2 114 67 is_stmt 0 view .LVU817
 2962 054e DBF80030 		ldr	r3, [fp]
 2963 0552 2A4F     		ldr	r7, .L232
 2964 0554 D022     		movs	r2, #208
 2965 0556 02FB03F2 		mul	r2, r2, r3
 2966 055a BB18     		adds	r3, r7, r2
 2967 055c D3E91601 		ldrd	r0, r1, [r3, #88]
 2968 0560 5832     		adds	r2, r2, #88
 2969 0562 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2970              	.LVL281:
 114:src/console.c ****   case KEY_F4:
 2971              		.loc 2 114 67 view .LVU818
 2972 0564 85E80300 		stm	r5, {r0, r1}
 2973 0568 3A44     		add	r2, r2, r7
 2974 056a D2F804A0 		ldr	r10, [r2, #4]
 2975              	.LVL282:
 114:src/console.c ****   case KEY_F4:
 2976              		.loc 2 114 67 view .LVU819
 2977 056e C1E5     		b	.L165
 2978              	.LVL283:
 2979              	.L225:
 111:src/console.c ****   case KEY_F3:
 2980              		.loc 2 111 33 is_stmt 1 view .LVU820
 111:src/console.c ****   case KEY_F3:
 2981              		.loc 2 111 67 is_stmt 0 view .LVU821
 2982 0570 DBF80030 		ldr	r3, [fp]
 2983 0574 214F     		ldr	r7, .L232
 2984 0576 D022     		movs	r2, #208
 2985 0578 02FB03F2 		mul	r2, r2, r3
 2986 057c BB18     		adds	r3, r7, r2
 2987 057e D3E90E01 		ldrd	r0, r1, [r3, #56]
 2988 0582 3832     		adds	r2, r2, #56
 2989 0584 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
ARM GAS  /tmp/ccj9eXy0.s 			page 80


 2990              	.LVL284:
 111:src/console.c ****   case KEY_F3:
 2991              		.loc 2 111 67 view .LVU822
 2992 0586 85E80300 		stm	r5, {r0, r1}
 2993 058a 3A44     		add	r2, r2, r7
 2994 058c D2F804A0 		ldr	r10, [r2, #4]
 2995              	.LVL285:
 111:src/console.c ****   case KEY_F3:
 2996              		.loc 2 111 67 view .LVU823
 2997 0590 B0E5     		b	.L165
 2998              	.LVL286:
 2999              	.L226:
 108:src/console.c ****   case KEY_F2:
 3000              		.loc 2 108 33 is_stmt 1 view .LVU824
 108:src/console.c ****   case KEY_F2:
 3001              		.loc 2 108 67 is_stmt 0 view .LVU825
 3002 0592 DBF80030 		ldr	r3, [fp]
 3003 0596 194F     		ldr	r7, .L232
 3004 0598 D022     		movs	r2, #208
 3005 059a 02FB03F2 		mul	r2, r2, r3
 3006 059e BB18     		adds	r3, r7, r2
 3007 05a0 D3E90601 		ldrd	r0, r1, [r3, #24]
 3008 05a4 1832     		adds	r2, r2, #24
 3009 05a6 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3010              	.LVL287:
 108:src/console.c ****   case KEY_F2:
 3011              		.loc 2 108 67 view .LVU826
 3012 05a8 85E80300 		stm	r5, {r0, r1}
 3013 05ac 3A44     		add	r2, r2, r7
 3014 05ae D2F804A0 		ldr	r10, [r2, #4]
 3015              	.LVL288:
 108:src/console.c ****   case KEY_F2:
 3016              		.loc 2 108 67 view .LVU827
 3017 05b2 9FE5     		b	.L165
 3018              	.LVL289:
 3019              	.L227:
  88:src/console.c **** 	break;
 3020              		.loc 2 88 2 is_stmt 1 view .LVU828
  88:src/console.c **** 	break;
 3021              		.loc 2 88 21 is_stmt 0 view .LVU829
 3022 05b4 1D4A     		ldr	r2, .L232+48
 3023 05b6 92E80300 		ldm	r2, {r0, r1}
 3024 05ba 9A46     		mov	r10, r3
 3025              	.LVL290:
  88:src/console.c **** 	break;
 3026              		.loc 2 88 21 view .LVU830
 3027 05bc 85E80300 		stm	r5, {r0, r1}
 3028              	.LVL291:
  88:src/console.c **** 	break;
 3029              		.loc 2 88 21 view .LVU831
 3030              	.LBE110:
 3031              	.LBE133:
 452:src/console.c **** 	set_menu ( remapped.shift );
 3032              		.loc 2 452 7 is_stmt 1 view .LVU832
 468:src/console.c **** 	SET_ST(STAT_MENU);
 3033              		.loc 2 468 7 view .LVU833
 475:src/console.c **** 
ARM GAS  /tmp/ccj9eXy0.s 			page 81


 3034              		.loc 2 475 7 view .LVU834
 3035              	.LBB134:
 3036              	.LBB111:
  88:src/console.c **** 	break;
 3037              		.loc 2 88 21 is_stmt 0 view .LVU835
 3038 05c0 2923     		movs	r3, #41
 3039 05c2 BAE5     		b	.L170
 3040              	.LVL292:
 3041              	.L189:
 128:src/console.c ****     break;
 3042              		.loc 2 128 5 is_stmt 1 view .LVU836
 128:src/console.c ****     break;
 3043              		.loc 2 128 24 is_stmt 0 view .LVU837
 3044 05c4 1A4A     		ldr	r2, .L232+52
 3045 05c6 8CE5     		b	.L213
 3046              	.L188:
 132:src/console.c ****   case SHIFT_G:
 3047              		.loc 2 132 5 is_stmt 1 view .LVU838
 134:src/console.c ****     break;
 3048              		.loc 2 134 5 view .LVU839
 134:src/console.c ****     break;
 3049              		.loc 2 134 26 is_stmt 0 view .LVU840
 3050 05c8 1A4A     		ldr	r2, .L232+56
 3051 05ca 02EBCA03 		add	r3, r2, r10, lsl #3
 3052 05ce 93E80300 		ldm	r3, {r0, r1}
 3053 05d2 12F83A30 		ldrb	r3, [r2, r10, lsl #3]	@ zero_extendqisi2
 3054              	.LVL293:
 134:src/console.c ****     break;
 3055              		.loc 2 134 26 view .LVU841
 3056 05d6 85E80300 		stm	r5, {r0, r1}
 3057 05da 8A46     		mov	r10, r1
 3058              	.LVL294:
 134:src/console.c ****     break;
 3059              		.loc 2 134 26 view .LVU842
 3060 05dc 8AE5     		b	.L165
 3061              	.LVL295:
 3062              	.L187:
 129:src/console.c ****   case SHIFT_F:
 3063              		.loc 2 129 5 is_stmt 1 view .LVU843
 131:src/console.c ****     break;
 3064              		.loc 2 131 5 view .LVU844
 131:src/console.c ****     break;
 3065              		.loc 2 131 26 is_stmt 0 view .LVU845
 3066 05de 164A     		ldr	r2, .L232+60
 3067 05e0 7FE5     		b	.L213
 3068              	.L197:
  86:src/console.c ****       case SHIFT_N:
 3069              		.loc 2 86 7 view .LVU846
 3070 05e2 5346     		mov	r3, r10
 3071 05e4 4FF0000A 		mov	r10, #0
 3072              	.LVL296:
  86:src/console.c ****       case SHIFT_N:
 3073              		.loc 2 86 7 view .LVU847
 3074 05e8 A7E5     		b	.L170
 3075              	.LVL297:
 3076              	.L229:
  86:src/console.c ****       case SHIFT_N:
ARM GAS  /tmp/ccj9eXy0.s 			page 82


 3077              		.loc 2 86 7 view .LVU848
 3078              	.LBE111:
 3079              	.LBE134:
 453:src/console.c **** 	display_current_menu ();
 3080              		.loc 2 453 2 is_stmt 1 view .LVU849
 3081              	.LBB135:
   3:src/menu.c    ****   int m = current_menu;
 3082              		.loc 1 3 6 view .LVU850
 3083              	.LBB121:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3084              		.loc 1 4 3 view .LVU851
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3085              		.loc 1 4 7 is_stmt 0 view .LVU852
 3086 05ea DBF80030 		ldr	r3, [fp]
 3087              	.LVL298:
   5:src/menu.c    ****     current_menu = 0;
 3088              		.loc 1 5 3 is_stmt 1 view .LVU853
   5:src/menu.c    ****     current_menu = 0;
 3089              		.loc 1 5 6 is_stmt 0 view .LVU854
 3090 05ee 002B     		cmp	r3, #0
 3091 05f0 3FF43BAF 		beq	.L199
 3092              	.LBE121:
 3093              	.LBE135:
 3094              	.LBB136:
 3095              	.LBB112:
 137:src/console.c ****   }
 3096              		.loc 2 137 12 view .LVU855
 3097 05f4 4FF0000A 		mov	r10, #0
 3098              	.LVL299:
 137:src/console.c ****   }
 3099              		.loc 2 137 12 view .LVU856
 3100 05f8 1CE6     		b	.L192
 3101              	.L233:
 3102 05fa 00BF     		.align	2
 3103              	.L232:
 3104 05fc 00000000 		.word	.LANCHOR3
 3105 0600 00000000 		.word	.LANCHOR16
 3106 0604 F5020008 		.word	134218485
 3107 0608 05040008 		.word	134218757
 3108 060c F9020008 		.word	134218489
 3109 0610 79030008 		.word	134218617
 3110 0614 99030008 		.word	134218649
 3111 0618 00000000 		.word	.LANCHOR6
 3112 061c 00000000 		.word	.LANCHOR7
 3113 0620 00000000 		.word	.LANCHOR2
 3114 0624 E0000000 		.word	.LANCHOR9+224
 3115 0628 00000000 		.word	.LANCHOR10
 3116 062c E0000000 		.word	.LANCHOR8+224
 3117 0630 00000000 		.word	.LANCHOR8
 3118 0634 00000000 		.word	.LANCHOR12
 3119 0638 00000000 		.word	.LANCHOR9
 3120              	.LBE112:
 3121              	.LBE136:
 3122              		.cfi_endproc
 3123              	.LFE25:
 3125              		.global	n_p
 3126              		.comm	print_string,22,4
ARM GAS  /tmp/ccj9eXy0.s 			page 83


 3127              		.global	spaces
 3128              		.global	release
 3129              		.global	h_shift
 3130              		.global	g_shift
 3131              		.global	f_shift
 3132              		.global	heartbeat
 3133              		.global	no_key
 3134              		.global	MID_MENU
 3135              		.section	.rodata.str1.4,"aMS",%progbits,1
 3136              		.align	2
 3137              	.LC2:
 3138 0000 53797374 		.ascii	"System!\000"
 3138      656D2100 
 3139              		.global	mid_menu
 3140              		.section	.bss.current_menu,"aw",%nobits
 3141              		.align	2
 3142              		.set	.LANCHOR1,. + 0
 3145              	current_menu:
 3146 0000 00000000 		.space	4
 3147              		.section	.bss.last_menu,"aw",%nobits
 3148              		.align	2
 3149              		.set	.LANCHOR2,. + 0
 3152              	last_menu:
 3153 0000 00000000 		.space	4
 3154              		.section	.bss.mdots,"aw",%nobits
 3155              		.align	2
 3156              		.set	.LANCHOR0,. + 0
 3159              	mdots:
 3160 0000 00000000 		.space	400
 3160      00000000 
 3160      00000000 
 3160      00000000 
 3160      00000000 
 3161              		.section	.bss.n_p,"aw",%nobits
 3162              		.align	2
 3165              	n_p:
 3166 0000 00000000 		.space	4
 3167              		.section	.bss.start_ticks,"aw",%nobits
 3168              		.align	2
 3169              		.set	.LANCHOR4,. + 0
 3172              	start_ticks:
 3173 0000 00000000 		.space	4
 3174              		.section	.data.f_shift,"aw"
 3175              		.align	2
 3176              		.set	.LANCHOR13,. + 0
 3179              	f_shift:
 3180 0000 29       		.byte	41
 3181 0001 000000   		.space	3
 3182 0004 FFFFFFFF 		.word	-1
 3183              		.section	.data.g_shift,"aw"
 3184              		.align	2
 3185              		.set	.LANCHOR14,. + 0
 3188              	g_shift:
 3189 0000 2A       		.byte	42
 3190 0001 000000   		.space	3
 3191 0004 FFFFFFFF 		.word	-1
 3192              		.section	.data.h_shift,"aw"
ARM GAS  /tmp/ccj9eXy0.s 			page 84


 3193              		.align	2
 3194              		.set	.LANCHOR10,. + 0
 3197              	h_shift:
 3198 0000 2B       		.byte	43
 3199 0001 000000   		.space	3
 3200 0004 FFFFFFFF 		.word	-1
 3201              		.section	.data.heartbeat,"aw"
 3202              		.align	2
 3203              		.set	.LANCHOR16,. + 0
 3206              	heartbeat:
 3207 0000 62       		.byte	98
 3208 0001 000000   		.space	3
 3209 0004 FFFFFFFF 		.word	-1
 3210              		.section	.data.no_key,"aw"
 3211              		.align	2
 3212              		.set	.LANCHOR6,. + 0
 3215              	no_key:
 3216 0000 2E       		.byte	46
 3217 0001 000000   		.space	3
 3218 0004 00000000 		.word	0
 3219              		.section	.data.release,"aw"
 3220              		.align	2
 3221              		.set	.LANCHOR7,. + 0
 3224              	release:
 3225 0000 63       		.byte	99
 3226 0001 000000   		.space	3
 3227 0004 FFFFFFFF 		.word	-1
 3228              		.section	.data.spaces,"aw"
 3229              		.align	2
 3230              		.set	.LANCHOR5,. + 0
 3233              	spaces:
 3234 0000 20202020 		.ascii	"                     \000"
 3234      20202020 
 3234      20202020 
 3234      20202020 
 3234      20202020 
 3235              		.section	.rodata.MID_MENU,"a"
 3236              		.align	2
 3237              		.set	.LANCHOR15,. + 0
 3240              	MID_MENU:
 3241 0000 00000000 		.word	.LC2
 3242 0004 00000000 		.word	mid_menu
 3243 0008 00000000 		.word	0
 3244 000c 00000000 		.word	0
 3245              		.section	.rodata.Menus,"a"
 3246              		.align	2
 3247              		.set	.LANCHOR3,. + 0
 3250              	Menus:
 3251 0000 426C616E 		.ascii	"Blank\000"
 3251      6B00
 3252 0006 00000000 		.space	9
 3252      00000000 
 3252      00
 3253 000f 00       		.space	1
 3254 0010 2E       		.byte	46
 3255 0011 000000   		.space	3
 3256 0014 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccj9eXy0.s 			page 85


 3257 0018 2E       		.byte	46
 3258 0019 000000   		.space	3
 3259 001c FFFFFFFF 		.word	-1
 3260 0020 00       		.ascii	"\000"
 3261 0021 00000000 		.space	7
 3261      000000
 3262 0028 00       		.ascii	"\000"
 3263 0029 00000000 		.space	7
 3263      000000
 3264 0030 2E       		.byte	46
 3265 0031 000000   		.space	3
 3266 0034 FFFFFFFF 		.word	-1
 3267 0038 2E       		.byte	46
 3268 0039 000000   		.space	3
 3269 003c FFFFFFFF 		.word	-1
 3270 0040 00       		.ascii	"\000"
 3271 0041 00000000 		.space	7
 3271      000000
 3272 0048 00       		.ascii	"\000"
 3273 0049 00000000 		.space	7
 3273      000000
 3274 0050 2E       		.byte	46
 3275 0051 000000   		.space	3
 3276 0054 FFFFFFFF 		.word	-1
 3277 0058 2E       		.byte	46
 3278 0059 000000   		.space	3
 3279 005c FFFFFFFF 		.word	-1
 3280 0060 00       		.ascii	"\000"
 3281 0061 00000000 		.space	7
 3281      000000
 3282 0068 00       		.ascii	"\000"
 3283 0069 00000000 		.space	7
 3283      000000
 3284 0070 2E       		.byte	46
 3285 0071 000000   		.space	3
 3286 0074 FFFFFFFF 		.word	-1
 3287 0078 2E       		.byte	46
 3288 0079 000000   		.space	3
 3289 007c FFFFFFFF 		.word	-1
 3290 0080 00       		.ascii	"\000"
 3291 0081 00000000 		.space	7
 3291      000000
 3292 0088 00       		.ascii	"\000"
 3293 0089 00000000 		.space	7
 3293      000000
 3294 0090 2C       		.byte	44
 3295 0091 000000   		.space	3
 3296 0094 FFFFFFFF 		.word	-1
 3297 0098 2E       		.byte	46
 3298 0099 000000   		.space	3
 3299 009c FFFFFFFF 		.word	-1
 3300 00a0 2D2D0D00 		.ascii	"--\015\000"
 3301 00a4 00000000 		.space	4
 3302 00a8 00       		.ascii	"\000"
 3303 00a9 00000000 		.space	7
 3303      000000
 3304 00b0 2D       		.byte	45
ARM GAS  /tmp/ccj9eXy0.s 			page 86


 3305 00b1 000000   		.space	3
 3306 00b4 FFFFFFFF 		.word	-1
 3307 00b8 2E       		.byte	46
 3308 00b9 000000   		.space	3
 3309 00bc FFFFFFFF 		.word	-1
 3310 00c0 43505800 		.ascii	"CPX\000"
 3311 00c4 00000000 		.space	4
 3312 00c8 00       		.ascii	"\000"
 3313 00c9 00000000 		.space	7
 3313      000000
 3314 00d0 436C6561 		.ascii	"Clear\000"
 3314      7200
 3315 00d6 00000000 		.space	9
 3315      00000000 
 3315      00
 3316 00df 00       		.space	1
 3317 00e0 10       		.byte	16
 3318 00e1 000000   		.space	3
 3319 00e4 01000000 		.word	1
 3320 00e8 2E       		.byte	46
 3321 00e9 000000   		.space	3
 3322 00ec FFFFFFFF 		.word	-1
 3323 00f0 434C5072 		.ascii	"CLProg\000"
 3323      6F6700
 3324 00f7 00       		.space	1
 3325 00f8 00       		.ascii	"\000"
 3326 00f9 00000000 		.space	7
 3326      000000
 3327 0100 10       		.byte	16
 3328 0101 000000   		.space	3
 3329 0104 02000000 		.word	2
 3330 0108 2E       		.byte	46
 3331 0109 000000   		.space	3
 3332 010c FFFFFFFF 		.word	-1
 3333 0110 434C9100 		.ascii	"CL\221\000"
 3334 0114 00000000 		.space	4
 3335 0118 00       		.ascii	"\000"
 3336 0119 00000000 		.space	7
 3336      000000
 3337 0120 10       		.byte	16
 3338 0121 000000   		.space	3
 3339 0124 03000000 		.word	3
 3340 0128 2E       		.byte	46
 3341 0129 000000   		.space	3
 3342 012c FFFFFFFF 		.word	-1
 3343 0130 434C7800 		.ascii	"CLx\000"
 3344 0134 00000000 		.space	4
 3345 0138 00       		.ascii	"\000"
 3346 0139 00000000 		.space	7
 3346      000000
 3347 0140 2E       		.byte	46
 3348 0141 000000   		.space	3
 3349 0144 FFFFFFFF 		.word	-1
 3350 0148 2E       		.byte	46
 3351 0149 000000   		.space	3
 3352 014c FFFFFFFF 		.word	-1
 3353 0150 00       		.ascii	"\000"
ARM GAS  /tmp/ccj9eXy0.s 			page 87


 3354 0151 00000000 		.space	7
 3354      000000
 3355 0158 00       		.ascii	"\000"
 3356 0159 00000000 		.space	7
 3356      000000
 3357 0160 2C       		.byte	44
 3358 0161 000000   		.space	3
 3359 0164 FFFFFFFF 		.word	-1
 3360 0168 2E       		.byte	46
 3361 0169 000000   		.space	3
 3362 016c FFFFFFFF 		.word	-1
 3363 0170 2D2D0D00 		.ascii	"--\015\000"
 3364 0174 00000000 		.space	4
 3365 0178 00       		.ascii	"\000"
 3366 0179 00000000 		.space	7
 3366      000000
 3367 0180 2D       		.byte	45
 3368 0181 000000   		.space	3
 3369 0184 FFFFFFFF 		.word	-1
 3370 0188 2E       		.byte	46
 3371 0189 000000   		.space	3
 3372 018c FFFFFFFF 		.word	-1
 3373 0190 43505800 		.ascii	"CPX\000"
 3374 0194 00000000 		.space	4
 3375 0198 00       		.ascii	"\000"
 3376 0199 00000000 		.space	7
 3376      000000
 3377 01a0 44495350 		.ascii	"DISP\000"
 3377      00
 3378 01a5 00000000 		.space	10
 3378      00000000 
 3378      0000
 3379 01af 00       		.space	1
 3380 01b0 00       		.byte	0
 3381 01b1 000000   		.space	3
 3382 01b4 03000000 		.word	3
 3383 01b8 05       		.byte	5
 3384 01b9 000000   		.space	3
 3385 01bc 01000000 		.word	1
 3386 01c0 414C4C00 		.ascii	"ALL\000"
 3387 01c4 00000000 		.space	4
 3388 01c8 6120622F 		.ascii	"a b/c\000"
 3388      6300
 3389 01ce 0000     		.space	2
 3390 01d0 01       		.byte	1
 3391 01d1 000000   		.space	3
 3392 01d4 03000000 		.word	3
 3393 01d8 05       		.byte	5
 3394 01d9 000000   		.space	3
 3395 01dc 02000000 		.word	2
 3396 01e0 46495800 		.ascii	"FIX\000"
 3397 01e4 00000000 		.space	4
 3398 01e8 642F6300 		.ascii	"d/c\000"
 3399 01ec 00000000 		.space	4
 3400 01f0 02       		.byte	2
 3401 01f1 000000   		.space	3
 3402 01f4 03000000 		.word	3
ARM GAS  /tmp/ccj9eXy0.s 			page 88


 3403 01f8 06       		.byte	6
 3404 01f9 000000   		.space	3
 3405 01fc 01000000 		.word	1
 3406 0200 53434900 		.ascii	"SCI\000"
 3407 0204 00000000 		.space	4
 3408 0208 482E4D2E 		.ascii	"H.M.S.\000"
 3408      532E00
 3409 020f 00       		.space	1
 3410 0210 03       		.byte	3
 3411 0211 000000   		.space	3
 3412 0214 03000000 		.word	3
 3413 0218 07       		.byte	7
 3414 0219 000000   		.space	3
 3415 021c 01000000 		.word	1
 3416 0220 454E4700 		.ascii	"ENG\000"
 3417 0224 00000000 		.space	4
 3418 0228 482E6400 		.ascii	"H.d\000"
 3419 022c 00000000 		.space	4
 3420 0230 2C       		.byte	44
 3421 0231 000000   		.space	3
 3422 0234 FFFFFFFF 		.word	-1
 3423 0238 26       		.byte	38
 3424 0239 000000   		.space	3
 3425 023c 03000000 		.word	3
 3426 0240 2D2D0D00 		.ascii	"--\015\000"
 3427 0244 00000000 		.space	4
 3428 0248 2E2F2C00 		.ascii	"./,\000"
 3429 024c 00000000 		.space	4
 3430 0250 2D       		.byte	45
 3431 0251 000000   		.space	3
 3432 0254 FFFFFFFF 		.word	-1
 3433 0258 2E       		.byte	46
 3434 0259 000000   		.space	3
 3435 025c FFFFFFFF 		.word	-1
 3436 0260 43505800 		.ascii	"CPX\000"
 3437 0264 00000000 		.space	4
 3438 0268 00       		.ascii	"\000"
 3439 0269 00000000 		.space	7
 3439      000000
 3440 0270 42415345 		.ascii	"BASE\000"
 3440      00
 3441 0275 00000000 		.space	10
 3441      00000000 
 3441      0000
 3442 027f 00       		.space	1
 3443 0280 0E       		.byte	14
 3444 0281 000000   		.space	3
 3445 0284 01000000 		.word	1
 3446 0288 0E       		.byte	14
 3447 0289 000000   		.space	3
 3448 028c 03000000 		.word	3
 3449 0290 42494E00 		.ascii	"BIN\000"
 3450 0294 00000000 		.space	4
 3451 0298 6E6F7400 		.ascii	"not\000"
 3452 029c 00000000 		.space	4
 3453 02a0 0E       		.byte	14
 3454 02a1 000000   		.space	3
ARM GAS  /tmp/ccj9eXy0.s 			page 89


 3455 02a4 02000000 		.word	2
 3456 02a8 13       		.byte	19
 3457 02a9 000000   		.space	3
 3458 02ac 03000000 		.word	3
 3459 02b0 4F435400 		.ascii	"OCT\000"
 3460 02b4 00000000 		.space	4
 3461 02b8 616E6400 		.ascii	"and\000"
 3462 02bc 00000000 		.space	4
 3463 02c0 0F       		.byte	15
 3464 02c1 000000   		.space	3
 3465 02c4 01000000 		.word	1
 3466 02c8 14       		.byte	20
 3467 02c9 000000   		.space	3
 3468 02cc 03000000 		.word	3
 3469 02d0 44454300 		.ascii	"DEC\000"
 3470 02d4 00000000 		.space	4
 3471 02d8 6F7200   		.ascii	"or\000"
 3472 02db 00000000 		.space	5
 3472      00
 3473 02e0 0F       		.byte	15
 3474 02e1 000000   		.space	3
 3475 02e4 02000000 		.word	2
 3476 02e8 15       		.byte	21
 3477 02e9 000000   		.space	3
 3478 02ec 03000000 		.word	3
 3479 02f0 48455800 		.ascii	"HEX\000"
 3480 02f4 00000000 		.space	4
 3481 02f8 786F7200 		.ascii	"xor\000"
 3482 02fc 00000000 		.space	4
 3483 0300 2C       		.byte	44
 3484 0301 000000   		.space	3
 3485 0304 FFFFFFFF 		.word	-1
 3486 0308 16       		.byte	22
 3487 0309 000000   		.space	3
 3488 030c 03000000 		.word	3
 3489 0310 2D2D0D00 		.ascii	"--\015\000"
 3490 0314 00000000 		.space	4
 3491 0318 524D4452 		.ascii	"RMDR\000"
 3491      00
 3492 031d 000000   		.space	3
 3493 0320 2D       		.byte	45
 3494 0321 000000   		.space	3
 3495 0324 FFFFFFFF 		.word	-1
 3496 0328 2E       		.byte	46
 3497 0329 000000   		.space	3
 3498 032c FFFFFFFF 		.word	-1
 3499 0330 43505800 		.ascii	"CPX\000"
 3500 0334 00000000 		.space	4
 3501 0338 00       		.ascii	"\000"
 3502 0339 00000000 		.space	7
 3502      000000
 3503 0340 414E474C 		.ascii	"ANGLES\000"
 3503      455300
 3504 0347 00000000 		.space	8
 3504      00000000 
 3505 034f 00       		.space	1
 3506 0350 06       		.byte	6
ARM GAS  /tmp/ccj9eXy0.s 			page 90


 3507 0351 000000   		.space	3
 3508 0354 02000000 		.word	2
 3509 0358 04       		.byte	4
 3510 0359 000000   		.space	3
 3511 035c 01000000 		.word	1
 3512 0360 44454700 		.ascii	"DEG\000"
 3513 0364 00000000 		.space	4
 3514 0368 500D5200 		.ascii	"P\015R\000"
 3515 036c 00000000 		.space	4
 3516 0370 07       		.byte	7
 3517 0371 000000   		.space	3
 3518 0374 02000000 		.word	2
 3519 0378 04       		.byte	4
 3520 0379 000000   		.space	3
 3521 037c 02000000 		.word	2
 3522 0380 52414400 		.ascii	"RAD\000"
 3523 0384 00000000 		.space	4
 3524 0388 520D5000 		.ascii	"R\015P\000"
 3525 038c 00000000 		.space	4
 3526 0390 08       		.byte	8
 3527 0391 000000   		.space	3
 3528 0394 02000000 		.word	2
 3529 0398 00       		.byte	0
 3530 0399 000000   		.space	3
 3531 039c 01000000 		.word	1
 3532 03a0 47524144 		.ascii	"GRAD\000"
 3532      00
 3533 03a5 000000   		.space	3
 3534 03a8 48595000 		.ascii	"HYP\000"
 3535 03ac 00000000 		.space	4
 3536 03b0 06       		.byte	6
 3537 03b1 000000   		.space	3
 3538 03b4 01000000 		.word	1
 3539 03b8 07       		.byte	7
 3540 03b9 000000   		.space	3
 3541 03bc 01000000 		.word	1
 3542 03c0 482E4D53 		.ascii	"H.MS\000"
 3542      00
 3543 03c5 000000   		.space	3
 3544 03c8 482E6400 		.ascii	"H.d\000"
 3545 03cc 00000000 		.space	4
 3546 03d0 2C       		.byte	44
 3547 03d1 000000   		.space	3
 3548 03d4 FFFFFFFF 		.word	-1
 3549 03d8 00       		.byte	0
 3550 03d9 000000   		.space	3
 3551 03dc 02000000 		.word	2
 3552 03e0 2D2D0D00 		.ascii	"--\015\000"
 3553 03e4 00000000 		.space	4
 3554 03e8 4859509D 		.ascii	"HYP\235\000"
 3554      00
 3555 03ed 000000   		.space	3
 3556 03f0 2D       		.byte	45
 3557 03f1 000000   		.space	3
 3558 03f4 FFFFFFFF 		.word	-1
 3559 03f8 2E       		.byte	46
 3560 03f9 000000   		.space	3
ARM GAS  /tmp/ccj9eXy0.s 			page 91


 3561 03fc FFFFFFFF 		.word	-1
 3562 0400 43505800 		.ascii	"CPX\000"
 3563 0404 00000000 		.space	4
 3564 0408 00       		.ascii	"\000"
 3565 0409 00000000 		.space	7
 3565      000000
 3566 0410 4D495343 		.ascii	"MISC\000"
 3566      00
 3567 0415 00000000 		.space	10
 3567      00000000 
 3567      0000
 3568 041f 00       		.space	1
 3569 0420 25       		.byte	37
 3570 0421 000000   		.space	3
 3571 0424 01000000 		.word	1
 3572 0428 14       		.byte	20
 3573 0429 000000   		.space	3
 3574 042c 01000000 		.word	1
 3575 0430 7C587C00 		.ascii	"|X|\000"
 3576 0434 00000000 		.space	4
 3577 0438 329C00   		.ascii	"2\234\000"
 3578 043b 00000000 		.space	5
 3578      00
 3579 0440 25       		.byte	37
 3580 0441 000000   		.space	3
 3581 0444 02000000 		.word	2
 3582 0448 14       		.byte	20
 3583 0449 000000   		.space	3
 3584 044c 02000000 		.word	2
 3585 0450 524E4400 		.ascii	"RND\000"
 3586 0454 00000000 		.space	4
 3587 0458 4C6F67BA 		.ascii	"Log\272\000"
 3587      00
 3588 045d 000000   		.space	3
 3589 0460 26       		.byte	38
 3590 0461 000000   		.space	3
 3591 0464 01000000 		.word	1
 3592 0468 15       		.byte	21
 3593 0469 000000   		.space	3
 3594 046c 02000000 		.word	2
 3595 0470 49506172 		.ascii	"IPart\000"
 3595      7400
 3596 0476 0000     		.space	2
 3597 0478 4C6F678B 		.ascii	"Log\213\000"
 3597      00
 3598 047d 000000   		.space	3
 3599 0480 26       		.byte	38
 3600 0481 000000   		.space	3
 3601 0484 02000000 		.word	2
 3602 0488 16       		.byte	22
 3603 0489 000000   		.space	3
 3604 048c 02000000 		.word	2
 3605 0490 46506172 		.ascii	"FPart\000"
 3605      7400
 3606 0496 0000     		.space	2
 3607 0498 7C7C656C 		.ascii	"||el\000"
 3607      00
ARM GAS  /tmp/ccj9eXy0.s 			page 92


 3608 049d 000000   		.space	3
 3609 04a0 2C       		.byte	44
 3610 04a1 000000   		.space	3
 3611 04a4 FFFFFFFF 		.word	-1
 3612 04a8 22       		.byte	34
 3613 04a9 000000   		.space	3
 3614 04ac 02000000 		.word	2
 3615 04b0 2D2D0D00 		.ascii	"--\015\000"
 3616 04b4 00000000 		.space	4
 3617 04b8 832500   		.ascii	"\203%\000"
 3618 04bb 00000000 		.space	5
 3618      00
 3619 04c0 2D       		.byte	45
 3620 04c1 000000   		.space	3
 3621 04c4 FFFFFFFF 		.word	-1
 3622 04c8 2E       		.byte	46
 3623 04c9 000000   		.space	3
 3624 04cc FFFFFFFF 		.word	-1
 3625 04d0 43505800 		.ascii	"CPX\000"
 3626 04d4 00000000 		.space	4
 3627 04d8 00       		.ascii	"\000"
 3628 04d9 00000000 		.space	7
 3628      000000
 3629 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 3629      204B6579 
 3629      00
 3630 04e9 00000000 		.space	6
 3630      0000
 3631 04ef 00       		.space	1
 3632 04f0 0D       		.byte	13
 3633 04f1 000000   		.space	3
 3634 04f4 01000000 		.word	1
 3635 04f8 2E       		.byte	46
 3636 04f9 000000   		.space	3
 3637 04fc FFFFFFFF 		.word	-1
 3638 0500 53686F77 		.ascii	"Show\016\000"
 3638      0E00
 3639 0506 0000     		.space	2
 3640 0508 00       		.ascii	"\000"
 3641 0509 00000000 		.space	7
 3641      000000
 3642 0510 0D       		.byte	13
 3643 0511 000000   		.space	3
 3644 0514 02000000 		.word	2
 3645 0518 2E       		.byte	46
 3646 0519 000000   		.space	3
 3647 051c FFFFFFFF 		.word	-1
 3648 0520 53686F77 		.ascii	"Show\015\000"
 3648      0D00
 3649 0526 0000     		.space	2
 3650 0528 00       		.ascii	"\000"
 3651 0529 00000000 		.space	7
 3651      000000
 3652 0530 0D       		.byte	13
 3653 0531 000000   		.space	3
 3654 0534 03000000 		.word	3
 3655 0538 2E       		.byte	46
ARM GAS  /tmp/ccj9eXy0.s 			page 93


 3656 0539 000000   		.space	3
 3657 053c FFFFFFFF 		.word	-1
 3658 0540 78173F00 		.ascii	"x\027?\000"
 3659 0544 00000000 		.space	4
 3660 0548 00       		.ascii	"\000"
 3661 0549 00000000 		.space	7
 3661      000000
 3662 0550 2E       		.byte	46
 3663 0551 000000   		.space	3
 3664 0554 FFFFFFFF 		.word	-1
 3665 0558 2E       		.byte	46
 3666 0559 000000   		.space	3
 3667 055c FFFFFFFF 		.word	-1
 3668 0560 00       		.ascii	"\000"
 3669 0561 00000000 		.space	7
 3669      000000
 3670 0568 00       		.ascii	"\000"
 3671 0569 00000000 		.space	7
 3671      000000
 3672 0570 2C       		.byte	44
 3673 0571 000000   		.space	3
 3674 0574 FFFFFFFF 		.word	-1
 3675 0578 2E       		.byte	46
 3676 0579 000000   		.space	3
 3677 057c FFFFFFFF 		.word	-1
 3678 0580 2D2D0D00 		.ascii	"--\015\000"
 3679 0584 00000000 		.space	4
 3680 0588 00       		.ascii	"\000"
 3681 0589 00000000 		.space	7
 3681      000000
 3682 0590 2D       		.byte	45
 3683 0591 000000   		.space	3
 3684 0594 FFFFFFFF 		.word	-1
 3685 0598 2E       		.byte	46
 3686 0599 000000   		.space	3
 3687 059c FFFFFFFF 		.word	-1
 3688 05a0 43505800 		.ascii	"CPX\000"
 3689 05a4 00000000 		.space	4
 3690 05a8 00       		.ascii	"\000"
 3691 05a9 00000000 		.space	7
 3691      000000
 3692 05b0 50726F67 		.ascii	"Program\000"
 3692      72616D00 
 3693 05b8 00000000 		.space	7
 3693      000000
 3694 05bf 00       		.space	1
 3695 05c0 27       		.byte	39
 3696 05c1 000000   		.space	3
 3697 05c4 01000000 		.word	1
 3698 05c8 28       		.byte	40
 3699 05c9 000000   		.space	3
 3700 05cc 01000000 		.word	1
 3701 05d0 4C424C00 		.ascii	"LBL\000"
 3702 05d4 00000000 		.space	4
 3703 05d8 44534500 		.ascii	"DSE\000"
 3704 05dc 00000000 		.space	4
 3705 05e0 27       		.byte	39
ARM GAS  /tmp/ccj9eXy0.s 			page 94


 3706 05e1 000000   		.space	3
 3707 05e4 02000000 		.word	2
 3708 05e8 28       		.byte	40
 3709 05e9 000000   		.space	3
 3710 05ec 02000000 		.word	2
 3711 05f0 52544E00 		.ascii	"RTN\000"
 3712 05f4 00000000 		.space	4
 3713 05f8 49534700 		.ascii	"ISG\000"
 3714 05fc 00000000 		.space	4
 3715 0600 25       		.byte	37
 3716 0601 000000   		.space	3
 3717 0604 03000000 		.word	3
 3718 0608 2E       		.byte	46
 3719 0609 000000   		.space	3
 3720 060c FFFFFFFF 		.word	-1
 3721 0610 50617573 		.ascii	"Pause\000"
 3721      6500
 3722 0616 0000     		.space	2
 3723 0618 00       		.ascii	"\000"
 3724 0619 00000000 		.space	7
 3724      000000
 3725 0620 12       		.byte	18
 3726 0621 000000   		.space	3
 3727 0624 03000000 		.word	3
 3728 0628 2E       		.byte	46
 3729 0629 000000   		.space	3
 3730 062c FFFFFFFF 		.word	-1
 3731 0630 47544F00 		.ascii	"GTO\000"
 3732 0634 00000000 		.space	4
 3733 0638 00       		.ascii	"\000"
 3734 0639 00000000 		.space	7
 3734      000000
 3735 0640 2C       		.byte	44
 3736 0641 000000   		.space	3
 3737 0644 FFFFFFFF 		.word	-1
 3738 0648 2E       		.byte	46
 3739 0649 000000   		.space	3
 3740 064c FFFFFFFF 		.word	-1
 3741 0650 2D2D0D00 		.ascii	"--\015\000"
 3742 0654 00000000 		.space	4
 3743 0658 00       		.ascii	"\000"
 3744 0659 00000000 		.space	7
 3744      000000
 3745 0660 2D       		.byte	45
 3746 0661 000000   		.space	3
 3747 0664 FFFFFFFF 		.word	-1
 3748 0668 2E       		.byte	46
 3749 0669 000000   		.space	3
 3750 066c FFFFFFFF 		.word	-1
 3751 0670 43505800 		.ascii	"CPX\000"
 3752 0674 00000000 		.space	4
 3753 0678 00       		.ascii	"\000"
 3754 0679 00000000 		.space	7
 3754      000000
 3755 0680 53657475 		.ascii	"Setup 1\000"
 3755      70203100 
 3756 0688 00000000 		.space	7
ARM GAS  /tmp/ccj9eXy0.s 			page 95


 3756      000000
 3757 068f 00       		.space	1
 3758 0690 30       		.byte	48
 3759 0691 000000   		.space	3
 3760 0694 00000000 		.word	0
 3761 0698 2E       		.byte	46
 3762 0699 000000   		.space	3
 3763 069c FFFFFFFF 		.word	-1
 3764 06a0 53797374 		.ascii	"System\000"
 3764      656D00
 3765 06a7 00       		.space	1
 3766 06a8 00       		.ascii	"\000"
 3767 06a9 00000000 		.space	7
 3767      000000
 3768 06b0 31       		.byte	49
 3769 06b1 000000   		.space	3
 3770 06b4 09000000 		.word	9
 3771 06b8 2E       		.byte	46
 3772 06b9 000000   		.space	3
 3773 06bc FFFFFFFF 		.word	-1
 3774 06c0 48454C50 		.ascii	"HELP\000"
 3774      00
 3775 06c5 000000   		.space	3
 3776 06c8 00       		.ascii	"\000"
 3777 06c9 00000000 		.space	7
 3777      000000
 3778 06d0 31       		.byte	49
 3779 06d1 000000   		.space	3
 3780 06d4 02000000 		.word	2
 3781 06d8 31       		.byte	49
 3782 06d9 000000   		.space	3
 3783 06dc 06000000 		.word	6
 3784 06e0 4F6E5354 		.ascii	"OnSTO\000"
 3784      4F00
 3785 06e6 0000     		.space	2
 3786 06e8 57727453 		.ascii	"WrtSt\000"
 3786      7400
 3787 06ee 0000     		.space	2
 3788 06f0 31       		.byte	49
 3789 06f1 000000   		.space	3
 3790 06f4 03000000 		.word	3
 3791 06f8 31       		.byte	49
 3792 06f9 000000   		.space	3
 3793 06fc 07000000 		.word	7
 3794 0700 4F6E5243 		.ascii	"OnRCL\000"
 3794      4C00
 3795 0706 0000     		.space	2
 3796 0708 4C645374 		.ascii	"LdSt\000"
 3796      00
 3797 070d 000000   		.space	3
 3798 0710 2C       		.byte	44
 3799 0711 000000   		.space	3
 3800 0714 FFFFFFFF 		.word	-1
 3801 0718 2E       		.byte	46
 3802 0719 000000   		.space	3
 3803 071c FFFFFFFF 		.word	-1
 3804 0720 2D2D0D00 		.ascii	"--\015\000"
ARM GAS  /tmp/ccj9eXy0.s 			page 96


 3805 0724 00000000 		.space	4
 3806 0728 00       		.ascii	"\000"
 3807 0729 00000000 		.space	7
 3807      000000
 3808 0730 2D       		.byte	45
 3809 0731 000000   		.space	3
 3810 0734 FFFFFFFF 		.word	-1
 3811 0738 2E       		.byte	46
 3812 0739 000000   		.space	3
 3813 073c FFFFFFFF 		.word	-1
 3814 0740 43505800 		.ascii	"CPX\000"
 3815 0744 00000000 		.space	4
 3816 0748 00       		.ascii	"\000"
 3817 0749 00000000 		.space	7
 3817      000000
 3818 0750 4172726F 		.ascii	"Arrow\000"
 3818      7700
 3819 0756 00000000 		.space	9
 3819      00000000 
 3819      00
 3820 075f 00       		.space	1
 3821 0760 0E       		.byte	14
 3822 0761 000000   		.space	3
 3823 0764 01000000 		.word	1
 3824 0768 06       		.byte	6
 3825 0769 000000   		.space	3
 3826 076c 02000000 		.word	2
 3827 0770 42696E00 		.ascii	"Bin\000"
 3828 0774 00000000 		.space	4
 3829 0778 44454700 		.ascii	"DEG\000"
 3830 077c 00000000 		.space	4
 3831 0780 0E       		.byte	14
 3832 0781 000000   		.space	3
 3833 0784 02000000 		.word	2
 3834 0788 07       		.byte	7
 3835 0789 000000   		.space	3
 3836 078c 02000000 		.word	2
 3837 0790 4F637400 		.ascii	"Oct\000"
 3838 0794 00000000 		.space	4
 3839 0798 52414400 		.ascii	"RAD\000"
 3840 079c 00000000 		.space	4
 3841 07a0 0F       		.byte	15
 3842 07a1 000000   		.space	3
 3843 07a4 01000000 		.word	1
 3844 07a8 08       		.byte	8
 3845 07a9 000000   		.space	3
 3846 07ac 02000000 		.word	2
 3847 07b0 44656300 		.ascii	"Dec\000"
 3848 07b4 00000000 		.space	4
 3849 07b8 47726164 		.ascii	"Grad\000"
 3849      00
 3850 07bd 000000   		.space	3
 3851 07c0 0F       		.byte	15
 3852 07c1 000000   		.space	3
 3853 07c4 02000000 		.word	2
 3854 07c8 06       		.byte	6
 3855 07c9 000000   		.space	3
ARM GAS  /tmp/ccj9eXy0.s 			page 97


 3856 07cc 01000000 		.word	1
 3857 07d0 48657800 		.ascii	"Hex\000"
 3858 07d4 00000000 		.space	4
 3859 07d8 32484D53 		.ascii	"2HMS\000"
 3859      00
 3860 07dd 000000   		.space	3
 3861 07e0 2C       		.byte	44
 3862 07e1 000000   		.space	3
 3863 07e4 FFFFFFFF 		.word	-1
 3864 07e8 07       		.byte	7
 3865 07e9 000000   		.space	3
 3866 07ec 01000000 		.word	1
 3867 07f0 2D2D0D00 		.ascii	"--\015\000"
 3868 07f4 00000000 		.space	4
 3869 07f8 484D5332 		.ascii	"HMS2\000"
 3869      00
 3870 07fd 000000   		.space	3
 3871 0800 2D       		.byte	45
 3872 0801 000000   		.space	3
 3873 0804 FFFFFFFF 		.word	-1
 3874 0808 2E       		.byte	46
 3875 0809 000000   		.space	3
 3876 080c FFFFFFFF 		.word	-1
 3877 0810 43505800 		.ascii	"CPX\000"
 3878 0814 00000000 		.space	4
 3879 0818 00       		.ascii	"\000"
 3880 0819 00000000 		.space	7
 3880      000000
 3881 0820 466C6167 		.ascii	"Flags\000"
 3881      7300
 3882 0826 00000000 		.space	9
 3882      00000000 
 3882      00
 3883 082f 00       		.space	1
 3884 0830 1E       		.byte	30
 3885 0831 000000   		.space	3
 3886 0834 01000000 		.word	1
 3887 0838 2E       		.byte	46
 3888 0839 000000   		.space	3
 3889 083c FFFFFFFF 		.word	-1
 3890 0840 53465F00 		.ascii	"SF_\000"
 3891 0844 00000000 		.space	4
 3892 0848 00       		.ascii	"\000"
 3893 0849 00000000 		.space	7
 3893      000000
 3894 0850 1E       		.byte	30
 3895 0851 000000   		.space	3
 3896 0854 02000000 		.word	2
 3897 0858 2E       		.byte	46
 3898 0859 000000   		.space	3
 3899 085c FFFFFFFF 		.word	-1
 3900 0860 43465F00 		.ascii	"CF_\000"
 3901 0864 00000000 		.space	4
 3902 0868 00       		.ascii	"\000"
 3903 0869 00000000 		.space	7
 3903      000000
 3904 0870 1F       		.byte	31
ARM GAS  /tmp/ccj9eXy0.s 			page 98


 3905 0871 000000   		.space	3
 3906 0874 01000000 		.word	1
 3907 0878 2E       		.byte	46
 3908 0879 000000   		.space	3
 3909 087c FFFFFFFF 		.word	-1
 3910 0880 783D3F00 		.ascii	"x=?\000"
 3911 0884 00000000 		.space	4
 3912 0888 00       		.ascii	"\000"
 3913 0889 00000000 		.space	7
 3913      000000
 3914 0890 1F       		.byte	31
 3915 0891 000000   		.space	3
 3916 0894 02000000 		.word	2
 3917 0898 2E       		.byte	46
 3918 0899 000000   		.space	3
 3919 089c FFFFFFFF 		.word	-1
 3920 08a0 780B3F00 		.ascii	"x\013?\000"
 3921 08a4 00000000 		.space	4
 3922 08a8 00       		.ascii	"\000"
 3923 08a9 00000000 		.space	7
 3923      000000
 3924 08b0 2C       		.byte	44
 3925 08b1 000000   		.space	3
 3926 08b4 FFFFFFFF 		.word	-1
 3927 08b8 2E       		.byte	46
 3928 08b9 000000   		.space	3
 3929 08bc FFFFFFFF 		.word	-1
 3930 08c0 2D2D0D00 		.ascii	"--\015\000"
 3931 08c4 00000000 		.space	4
 3932 08c8 00       		.ascii	"\000"
 3933 08c9 00000000 		.space	7
 3933      000000
 3934 08d0 2D       		.byte	45
 3935 08d1 000000   		.space	3
 3936 08d4 FFFFFFFF 		.word	-1
 3937 08d8 2E       		.byte	46
 3938 08d9 000000   		.space	3
 3939 08dc FFFFFFFF 		.word	-1
 3940 08e0 43505800 		.ascii	"CPX\000"
 3941 08e4 00000000 		.space	4
 3942 08e8 00       		.ascii	"\000"
 3943 08e9 00000000 		.space	7
 3943      000000
 3944 08f0 50726F62 		.ascii	"Probability\000"
 3944      6162696C 
 3944      69747900 
 3945 08fc 000000   		.space	3
 3946 08ff 00       		.space	1
 3947 0900 18       		.byte	24
 3948 0901 000000   		.space	3
 3949 0904 03000000 		.word	3
 3950 0908 19       		.byte	25
 3951 0909 000000   		.space	3
 3952 090c 01000000 		.word	1
 3953 0910 46616374 		.ascii	"Fact!\000"
 3953      2100
 3954 0916 0000     		.space	2
ARM GAS  /tmp/ccj9eXy0.s 			page 99


 3955 0918 9400     		.ascii	"\224\000"
 3956 091a 00000000 		.space	6
 3956      0000
 3957 0920 18       		.byte	24
 3958 0921 000000   		.space	3
 3959 0924 01000000 		.word	1
 3960 0928 19       		.byte	25
 3961 0929 000000   		.space	3
 3962 092c 02000000 		.word	2
 3963 0930 43792C78 		.ascii	"Cy,x\000"
 3963      00
 3964 0935 000000   		.space	3
 3965 0938 949D00   		.ascii	"\224\235\000"
 3966 093b 00000000 		.space	5
 3966      00
 3967 0940 18       		.byte	24
 3968 0941 000000   		.space	3
 3969 0944 02000000 		.word	2
 3970 0948 2E       		.byte	46
 3971 0949 000000   		.space	3
 3972 094c FFFFFFFF 		.word	-1
 3973 0950 50792C78 		.ascii	"Py,x\000"
 3973      00
 3974 0955 000000   		.space	3
 3975 0958 00       		.ascii	"\000"
 3976 0959 00000000 		.space	7
 3976      000000
 3977 0960 08       		.byte	8
 3978 0961 000000   		.space	3
 3979 0964 01000000 		.word	1
 3980 0968 2E       		.byte	46
 3981 0969 000000   		.space	3
 3982 096c FFFFFFFF 		.word	-1
 3983 0970 52414E23 		.ascii	"RAN#\000"
 3983      00
 3984 0975 000000   		.space	3
 3985 0978 00       		.ascii	"\000"
 3986 0979 00000000 		.space	7
 3986      000000
 3987 0980 2C       		.byte	44
 3988 0981 000000   		.space	3
 3989 0984 FFFFFFFF 		.word	-1
 3990 0988 2E       		.byte	46
 3991 0989 000000   		.space	3
 3992 098c FFFFFFFF 		.word	-1
 3993 0990 2D2D0D00 		.ascii	"--\015\000"
 3994 0994 00000000 		.space	4
 3995 0998 00       		.ascii	"\000"
 3996 0999 00000000 		.space	7
 3996      000000
 3997 09a0 2D       		.byte	45
 3998 09a1 000000   		.space	3
 3999 09a4 FFFFFFFF 		.word	-1
 4000 09a8 2E       		.byte	46
 4001 09a9 000000   		.space	3
 4002 09ac FFFFFFFF 		.word	-1
 4003 09b0 43505800 		.ascii	"CPX\000"
ARM GAS  /tmp/ccj9eXy0.s 			page 100


 4004 09b4 00000000 		.space	4
 4005 09b8 00       		.ascii	"\000"
 4006 09b9 00000000 		.space	7
 4006      000000
 4007 09c0 53746174 		.ascii	"Statistics\000"
 4007      69737469 
 4007      637300
 4008 09cb 00000000 		.space	4
 4009 09cf 00       		.space	1
 4010 09d0 1A       		.byte	26
 4011 09d1 000000   		.space	3
 4012 09d4 01000000 		.word	1
 4013 09d8 1B       		.byte	27
 4014 09d9 000000   		.space	3
 4015 09dc 03000000 		.word	3
 4016 09e0 58626172 		.ascii	"Xbar\000"
 4016      00
 4017 09e5 000000   		.space	3
 4018 09e8 53554D53 		.ascii	"SUMS\000"
 4018      00
 4019 09ed 000000   		.space	3
 4020 09f0 1B       		.byte	27
 4021 09f1 000000   		.space	3
 4022 09f4 01000000 		.word	1
 4023 09f8 2E       		.byte	46
 4024 09f9 000000   		.space	3
 4025 09fc FFFFFFFF 		.word	-1
 4026 0a00 59686174 		.ascii	"Yhat\000"
 4026      00
 4027 0a05 000000   		.space	3
 4028 0a08 00       		.ascii	"\000"
 4029 0a09 00000000 		.space	7
 4029      000000
 4030 0a10 1A       		.byte	26
 4031 0a11 000000   		.space	3
 4032 0a14 02000000 		.word	2
 4033 0a18 2E       		.byte	46
 4034 0a19 000000   		.space	3
 4035 0a1c FFFFFFFF 		.word	-1
 4036 0a20 7300     		.ascii	"s\000"
 4037 0a22 00000000 		.space	6
 4037      0000
 4038 0a28 00       		.ascii	"\000"
 4039 0a29 00000000 		.space	7
 4039      000000
 4040 0a30 1B       		.byte	27
 4041 0a31 000000   		.space	3
 4042 0a34 02000000 		.word	2
 4043 0a38 2E       		.byte	46
 4044 0a39 000000   		.space	3
 4045 0a3c FFFFFFFF 		.word	-1
 4046 0a40 7200     		.ascii	"r\000"
 4047 0a42 00000000 		.space	6
 4047      0000
 4048 0a48 00       		.ascii	"\000"
 4049 0a49 00000000 		.space	7
 4049      000000
ARM GAS  /tmp/ccj9eXy0.s 			page 101


 4050 0a50 2C       		.byte	44
 4051 0a51 000000   		.space	3
 4052 0a54 FFFFFFFF 		.word	-1
 4053 0a58 2E       		.byte	46
 4054 0a59 000000   		.space	3
 4055 0a5c FFFFFFFF 		.word	-1
 4056 0a60 2D2D0D00 		.ascii	"--\015\000"
 4057 0a64 00000000 		.space	4
 4058 0a68 00       		.ascii	"\000"
 4059 0a69 00000000 		.space	7
 4059      000000
 4060 0a70 2D       		.byte	45
 4061 0a71 000000   		.space	3
 4062 0a74 FFFFFFFF 		.word	-1
 4063 0a78 2E       		.byte	46
 4064 0a79 000000   		.space	3
 4065 0a7c FFFFFFFF 		.word	-1
 4066 0a80 43505800 		.ascii	"CPX\000"
 4067 0a84 00000000 		.space	4
 4068 0a88 00       		.ascii	"\000"
 4069 0a89 00000000 		.space	7
 4069      000000
 4070 0a90 53657475 		.ascii	"Setup 2\000"
 4070      70203200 
 4071 0a98 00000000 		.space	7
 4071      000000
 4072 0a9f 00       		.space	1
 4073 0aa0 31       		.byte	49
 4074 0aa1 000000   		.space	3
 4075 0aa4 04000000 		.word	4
 4076 0aa8 2E       		.byte	46
 4077 0aa9 000000   		.space	3
 4078 0aac FFFFFFFF 		.word	-1
 4079 0ab0 5772744C 		.ascii	"WrtLib\000"
 4079      696200
 4080 0ab7 00       		.space	1
 4081 0ab8 00       		.ascii	"\000"
 4082 0ab9 00000000 		.space	7
 4082      000000
 4083 0ac0 31       		.byte	49
 4084 0ac1 000000   		.space	3
 4085 0ac4 05000000 		.word	5
 4086 0ac8 2E       		.byte	46
 4087 0ac9 000000   		.space	3
 4088 0acc FFFFFFFF 		.word	-1
 4089 0ad0 4C645374 		.ascii	"LdSt\000"
 4089      00
 4090 0ad5 000000   		.space	3
 4091 0ad8 00       		.ascii	"\000"
 4092 0ad9 00000000 		.space	7
 4092      000000
 4093 0ae0 2E       		.byte	46
 4094 0ae1 000000   		.space	3
 4095 0ae4 FFFFFFFF 		.word	-1
 4096 0ae8 2E       		.byte	46
 4097 0ae9 000000   		.space	3
 4098 0aec FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccj9eXy0.s 			page 102


 4099 0af0 00       		.ascii	"\000"
 4100 0af1 00000000 		.space	7
 4100      000000
 4101 0af8 00       		.ascii	"\000"
 4102 0af9 00000000 		.space	7
 4102      000000
 4103 0b00 31       		.byte	49
 4104 0b01 000000   		.space	3
 4105 0b04 08000000 		.word	8
 4106 0b08 2E       		.byte	46
 4107 0b09 000000   		.space	3
 4108 0b0c FFFFFFFF 		.word	-1
 4109 0b10 4C645072 		.ascii	"LdPrg\000"
 4109      6700
 4110 0b16 0000     		.space	2
 4111 0b18 00       		.ascii	"\000"
 4112 0b19 00000000 		.space	7
 4112      000000
 4113 0b20 2C       		.byte	44
 4114 0b21 000000   		.space	3
 4115 0b24 FFFFFFFF 		.word	-1
 4116 0b28 2E       		.byte	46
 4117 0b29 000000   		.space	3
 4118 0b2c FFFFFFFF 		.word	-1
 4119 0b30 2D2D0D00 		.ascii	"--\015\000"
 4120 0b34 00000000 		.space	4
 4121 0b38 00       		.ascii	"\000"
 4122 0b39 00000000 		.space	7
 4122      000000
 4123 0b40 2D       		.byte	45
 4124 0b41 000000   		.space	3
 4125 0b44 FFFFFFFF 		.word	-1
 4126 0b48 2E       		.byte	46
 4127 0b49 000000   		.space	3
 4128 0b4c FFFFFFFF 		.word	-1
 4129 0b50 43505800 		.ascii	"CPX\000"
 4130 0b54 00000000 		.space	4
 4131 0b58 00       		.ascii	"\000"
 4132 0b59 00000000 		.space	7
 4132      000000
 4133              		.section	.rodata.mapping_alpha.10882,"a"
 4134              		.align	2
 4135              		.set	.LANCHOR11,. + 0
 4138              	mapping_alpha.10882:
 4139 0000 63       		.byte	99
 4140 0001 000000   		.space	3
 4141 0004 FFFFFFFF 		.word	-1
 4142 0008 00       		.byte	0
 4143 0009 000000   		.space	3
 4144 000c FFFFFFFF 		.word	-1
 4145 0010 01       		.byte	1
 4146 0011 000000   		.space	3
 4147 0014 FFFFFFFF 		.word	-1
 4148 0018 02       		.byte	2
 4149 0019 000000   		.space	3
 4150 001c FFFFFFFF 		.word	-1
 4151 0020 03       		.byte	3
ARM GAS  /tmp/ccj9eXy0.s 			page 103


 4152 0021 000000   		.space	3
 4153 0024 FFFFFFFF 		.word	-1
 4154 0028 04       		.byte	4
 4155 0029 000000   		.space	3
 4156 002c FFFFFFFF 		.word	-1
 4157 0030 05       		.byte	5
 4158 0031 000000   		.space	3
 4159 0034 FFFFFFFF 		.word	-1
 4160 0038 06       		.byte	6
 4161 0039 000000   		.space	3
 4162 003c FFFFFFFF 		.word	-1
 4163 0040 07       		.byte	7
 4164 0041 000000   		.space	3
 4165 0044 FFFFFFFF 		.word	-1
 4166 0048 08       		.byte	8
 4167 0049 000000   		.space	3
 4168 004c FFFFFFFF 		.word	-1
 4169 0050 09       		.byte	9
 4170 0051 000000   		.space	3
 4171 0054 FFFFFFFF 		.word	-1
 4172 0058 0A       		.byte	10
 4173 0059 000000   		.space	3
 4174 005c FFFFFFFF 		.word	-1
 4175 0060 0B       		.byte	11
 4176 0061 000000   		.space	3
 4177 0064 FFFFFFFF 		.word	-1
 4178 0068 0C       		.byte	12
 4179 0069 000000   		.space	3
 4180 006c FFFFFFFF 		.word	-1
 4181 0070 0D       		.byte	13
 4182 0071 000000   		.space	3
 4183 0074 FFFFFFFF 		.word	-1
 4184 0078 0E       		.byte	14
 4185 0079 000000   		.space	3
 4186 007c FFFFFFFF 		.word	-1
 4187 0080 0F       		.byte	15
 4188 0081 000000   		.space	3
 4189 0084 FFFFFFFF 		.word	-1
 4190 0088 10       		.byte	16
 4191 0089 000000   		.space	3
 4192 008c FFFFFFFF 		.word	-1
 4193 0090 12       		.byte	18
 4194 0091 000000   		.space	3
 4195 0094 FFFFFFFF 		.word	-1
 4196 0098 13       		.byte	19
 4197 0099 000000   		.space	3
 4198 009c FFFFFFFF 		.word	-1
 4199 00a0 14       		.byte	20
 4200 00a1 000000   		.space	3
 4201 00a4 FFFFFFFF 		.word	-1
 4202 00a8 15       		.byte	21
 4203 00a9 000000   		.space	3
 4204 00ac FFFFFFFF 		.word	-1
 4205 00b0 16       		.byte	22
 4206 00b1 000000   		.space	3
 4207 00b4 FFFFFFFF 		.word	-1
 4208 00b8 18       		.byte	24
ARM GAS  /tmp/ccj9eXy0.s 			page 104


 4209 00b9 000000   		.space	3
 4210 00bc FFFFFFFF 		.word	-1
 4211 00c0 19       		.byte	25
 4212 00c1 000000   		.space	3
 4213 00c4 FFFFFFFF 		.word	-1
 4214 00c8 1A       		.byte	26
 4215 00c9 000000   		.space	3
 4216 00cc FFFFFFFF 		.word	-1
 4217 00d0 1B       		.byte	27
 4218 00d1 000000   		.space	3
 4219 00d4 FFFFFFFF 		.word	-1
 4220 00d8 1C       		.byte	28
 4221 00d9 000000   		.space	3
 4222 00dc FFFFFFFF 		.word	-1
 4223 00e0 1E       		.byte	30
 4224 00e1 000000   		.space	3
 4225 00e4 FFFFFFFF 		.word	-1
 4226 00e8 1F       		.byte	31
 4227 00e9 000000   		.space	3
 4228 00ec FFFFFFFF 		.word	-1
 4229 00f0 20       		.byte	32
 4230 00f1 000000   		.space	3
 4231 00f4 FFFFFFFF 		.word	-1
 4232 00f8 21       		.byte	33
 4233 00f9 000000   		.space	3
 4234 00fc FFFFFFFF 		.word	-1
 4235 0100 22       		.byte	34
 4236 0101 000000   		.space	3
 4237 0104 FFFFFFFF 		.word	-1
 4238 0108 24       		.byte	36
 4239 0109 000000   		.space	3
 4240 010c FFFFFFFF 		.word	-1
 4241 0110 25       		.byte	37
 4242 0111 000000   		.space	3
 4243 0114 FFFFFFFF 		.word	-1
 4244 0118 26       		.byte	38
 4245 0119 000000   		.space	3
 4246 011c FFFFFFFF 		.word	-1
 4247 0120 27       		.byte	39
 4248 0121 000000   		.space	3
 4249 0124 FFFFFFFF 		.word	-1
 4250 0128 28       		.byte	40
 4251 0129 000000   		.space	3
 4252 012c FFFFFFFF 		.word	-1
 4253 0130 2E       		.byte	46
 4254 0131 000000   		.space	3
 4255 0134 FFFFFFFF 		.word	-1
 4256 0138 2E       		.byte	46
 4257 0139 000000   		.space	3
 4258 013c FFFFFFFF 		.word	-1
 4259 0140 2E       		.byte	46
 4260 0141 000000   		.space	3
 4261 0144 FFFFFFFF 		.word	-1
 4262 0148 2E       		.byte	46
 4263 0149 000000   		.space	3
 4264 014c FFFFFFFF 		.word	-1
 4265 0150 2C       		.byte	44
ARM GAS  /tmp/ccj9eXy0.s 			page 105


 4266 0151 000000   		.space	3
 4267 0154 FFFFFFFF 		.word	-1
 4268 0158 2E       		.byte	46
 4269 0159 000000   		.space	3
 4270 015c FFFFFFFF 		.word	-1
 4271 0160 2E       		.byte	46
 4272 0161 000000   		.space	3
 4273 0164 FFFFFFFF 		.word	-1
 4274 0168 2E       		.byte	46
 4275 0169 000000   		.space	3
 4276 016c FFFFFFFF 		.word	-1
 4277 0170 2E       		.byte	46
 4278 0171 000000   		.space	3
 4279 0174 FFFFFFFF 		.word	-1
 4280              		.section	.rodata.mapping_fshift.10880,"a"
 4281              		.align	2
 4282              		.set	.LANCHOR9,. + 0
 4285              	mapping_fshift.10880:
 4286 0000 63       		.byte	99
 4287 0001 000000   		.space	3
 4288 0004 FFFFFFFF 		.word	-1
 4289 0008 22       		.byte	34
 4290 0009 000000   		.space	3
 4291 000c 03000000 		.word	3
 4292 0010 15       		.byte	21
 4293 0011 000000   		.space	3
 4294 0014 01000000 		.word	1
 4295 0018 1C       		.byte	28
 4296 0019 000000   		.space	3
 4297 001c 02000000 		.word	2
 4298 0020 13       		.byte	19
 4299 0021 000000   		.space	3
 4300 0024 01000000 		.word	1
 4301 0028 12       		.byte	18
 4302 0029 000000   		.space	3
 4303 002c 01000000 		.word	1
 4304 0030 12       		.byte	18
 4305 0031 000000   		.space	3
 4306 0034 03000000 		.word	3
 4307 0038 2D       		.byte	45
 4308 0039 000000   		.space	3
 4309 003c 00000000 		.word	0
 4310 0040 22       		.byte	34
 4311 0041 000000   		.space	3
 4312 0044 01000000 		.word	1
 4313 0048 0F       		.byte	15
 4314 0049 000000   		.space	3
 4315 004c 03000000 		.word	3
 4316 0050 01       		.byte	1
 4317 0051 000000   		.space	3
 4318 0054 02000000 		.word	2
 4319 0058 02       		.byte	2
 4320 0059 000000   		.space	3
 4321 005c 02000000 		.word	2
 4322 0060 03       		.byte	3
 4323 0061 000000   		.space	3
 4324 0064 02000000 		.word	2
ARM GAS  /tmp/ccj9eXy0.s 			page 106


 4325 0068 0C       		.byte	12
 4326 0069 000000   		.space	3
 4327 006c 01000000 		.word	1
 4328 0070 31       		.byte	49
 4329 0071 000000   		.space	3
 4330 0074 01000000 		.word	1
 4331 0078 2F       		.byte	47
 4332 0079 000000   		.space	3
 4333 007c 04000000 		.word	4
 4334 0080 2F       		.byte	47
 4335 0081 000000   		.space	3
 4336 0084 02000000 		.word	2
 4337 0088 2F       		.byte	47
 4338 0089 000000   		.space	3
 4339 008c 01000000 		.word	1
 4340 0090 18       		.byte	24
 4341 0091 000000   		.space	3
 4342 0094 00000000 		.word	0
 4343 0098 20       		.byte	32
 4344 0099 000000   		.space	3
 4345 009c 01000000 		.word	1
 4346 00a0 20       		.byte	32
 4347 00a1 000000   		.space	3
 4348 00a4 02000000 		.word	2
 4349 00a8 1C       		.byte	28
 4350 00a9 000000   		.space	3
 4351 00ac 03000000 		.word	3
 4352 00b0 2F       		.byte	47
 4353 00b1 000000   		.space	3
 4354 00b4 0C000000 		.word	12
 4355 00b8 1E       		.byte	30
 4356 00b9 000000   		.space	3
 4357 00bc 00000000 		.word	0
 4358 00c0 2F       		.byte	47
 4359 00c1 000000   		.space	3
 4360 00c4 03000000 		.word	3
 4361 00c8 04       		.byte	4
 4362 00c9 000000   		.space	3
 4363 00cc 03000000 		.word	3
 4364 00d0 2F       		.byte	47
 4365 00d1 000000   		.space	3
 4366 00d4 0A000000 		.word	10
 4367 00d8 2F       		.byte	47
 4368 00d9 000000   		.space	3
 4369 00dc 0B000000 		.word	11
 4370 00e0 2A       		.byte	42
 4371 00e1 000000   		.space	3
 4372 00e4 00000000 		.word	0
 4373 00e8 2E       		.byte	46
 4374 00e9 000000   		.space	3
 4375 00ec 00000000 		.word	0
 4376 00f0 2E       		.byte	46
 4377 00f1 000000   		.space	3
 4378 00f4 00000000 		.word	0
 4379 00f8 20       		.byte	32
 4380 00f9 000000   		.space	3
 4381 00fc 03000000 		.word	3
ARM GAS  /tmp/ccj9eXy0.s 			page 107


 4382 0100 2E       		.byte	46
 4383 0101 000000   		.space	3
 4384 0104 00000000 		.word	0
 4385 0108 24       		.byte	36
 4386 0109 000000   		.space	3
 4387 010c 03000000 		.word	3
 4388 0110 2F       		.byte	47
 4389 0111 000000   		.space	3
 4390 0114 08000000 		.word	8
 4391 0118 0D       		.byte	13
 4392 0119 000000   		.space	3
 4393 011c 01000000 		.word	1
 4394 0120 27       		.byte	39
 4395 0121 000000   		.space	3
 4396 0124 03000000 		.word	3
 4397 0128 06       		.byte	6
 4398 0129 000000   		.space	3
 4399 012c 03000000 		.word	3
 4400 0130 2E       		.byte	46
 4401 0131 000000   		.space	3
 4402 0134 00000000 		.word	0
 4403 0138 2E       		.byte	46
 4404 0139 000000   		.space	3
 4405 013c 00000000 		.word	0
 4406 0140 2E       		.byte	46
 4407 0141 000000   		.space	3
 4408 0144 00000000 		.word	0
 4409 0148 2E       		.byte	46
 4410 0149 000000   		.space	3
 4411 014c 00000000 		.word	0
 4412 0150 2E       		.byte	46
 4413 0151 000000   		.space	3
 4414 0154 00000000 		.word	0
 4415 0158 2E       		.byte	46
 4416 0159 000000   		.space	3
 4417 015c 00000000 		.word	0
 4418 0160 2E       		.byte	46
 4419 0161 000000   		.space	3
 4420 0164 00000000 		.word	0
 4421 0168 2F       		.byte	47
 4422 0169 000000   		.space	3
 4423 016c FFFFFFFF 		.word	-1
 4424 0170 2F       		.byte	47
 4425 0171 000000   		.space	3
 4426 0174 05000000 		.word	5
 4427              		.section	.rodata.mapping_gshift.10881,"a"
 4428              		.align	2
 4429              		.set	.LANCHOR12,. + 0
 4432              	mapping_gshift.10881:
 4433 0000 63       		.byte	99
 4434 0001 000000   		.space	3
 4435 0004 FFFFFFFF 		.word	-1
 4436 0008 28       		.byte	40
 4437 0009 000000   		.space	3
 4438 000c 03000000 		.word	3
 4439 0010 16       		.byte	22
 4440 0011 000000   		.space	3
ARM GAS  /tmp/ccj9eXy0.s 			page 108


 4441 0014 01000000 		.word	1
 4442 0018 1C       		.byte	28
 4443 0019 000000   		.space	3
 4444 001c 01000000 		.word	1
 4445 0020 13       		.byte	19
 4446 0021 000000   		.space	3
 4447 0024 02000000 		.word	2
 4448 0028 2E       		.byte	46
 4449 0029 000000   		.space	3
 4450 002c 00000000 		.word	0
 4451 0030 2E       		.byte	46
 4452 0031 000000   		.space	3
 4453 0034 00000000 		.word	0
 4454 0038 0C       		.byte	12
 4455 0039 000000   		.space	3
 4456 003c 02000000 		.word	2
 4457 0040 07       		.byte	7
 4458 0041 000000   		.space	3
 4459 0044 03000000 		.word	3
 4460 0048 08       		.byte	8
 4461 0049 000000   		.space	3
 4462 004c 03000000 		.word	3
 4463 0050 2F       		.byte	47
 4464 0051 000000   		.space	3
 4465 0054 04000000 		.word	4
 4466 0058 2F       		.byte	47
 4467 0059 000000   		.space	3
 4468 005c 04000000 		.word	4
 4469 0060 2F       		.byte	47
 4470 0061 000000   		.space	3
 4471 0064 04000000 		.word	4
 4472 0068 2E       		.byte	46
 4473 0069 000000   		.space	3
 4474 006c 00000000 		.word	0
 4475 0070 2F       		.byte	47
 4476 0071 000000   		.space	3
 4477 0074 06000000 		.word	6
 4478 0078 05       		.byte	5
 4479 0079 000000   		.space	3
 4480 007c 03000000 		.word	3
 4481 0080 2E       		.byte	46
 4482 0081 000000   		.space	3
 4483 0084 00000000 		.word	0
 4484 0088 2E       		.byte	46
 4485 0089 000000   		.space	3
 4486 008c 00000000 		.word	0
 4487 0090 2E       		.byte	46
 4488 0091 000000   		.space	3
 4489 0094 00000000 		.word	0
 4490 0098 2E       		.byte	46
 4491 0099 000000   		.space	3
 4492 009c 00000000 		.word	0
 4493 00a0 2E       		.byte	46
 4494 00a1 000000   		.space	3
 4495 00a4 00000000 		.word	0
 4496 00a8 1B       		.byte	27
 4497 00a9 000000   		.space	3
ARM GAS  /tmp/ccj9eXy0.s 			page 109


 4498 00ac 03000000 		.word	3
 4499 00b0 1A       		.byte	26
 4500 00b1 000000   		.space	3
 4501 00b4 03000000 		.word	3
 4502 00b8 2E       		.byte	46
 4503 00b9 000000   		.space	3
 4504 00bc 00000000 		.word	0
 4505 00c0 2E       		.byte	46
 4506 00c1 000000   		.space	3
 4507 00c4 00000000 		.word	0
 4508 00c8 0C       		.byte	12
 4509 00c9 000000   		.space	3
 4510 00cc 03000000 		.word	3
 4511 00d0 1F       		.byte	31
 4512 00d1 000000   		.space	3
 4513 00d4 03000000 		.word	3
 4514 00d8 19       		.byte	25
 4515 00d9 000000   		.space	3
 4516 00dc 03000000 		.word	3
 4517 00e0 2A       		.byte	42
 4518 00e1 000000   		.space	3
 4519 00e4 FFFFFFFF 		.word	-1
 4520 00e8 2E       		.byte	46
 4521 00e9 000000   		.space	3
 4522 00ec 00000000 		.word	0
 4523 00f0 2E       		.byte	46
 4524 00f1 000000   		.space	3
 4525 00f4 00000000 		.word	0
 4526 00f8 21       		.byte	33
 4527 00f9 000000   		.space	3
 4528 00fc 03000000 		.word	3
 4529 0100 2E       		.byte	46
 4530 0101 000000   		.space	3
 4531 0104 00000000 		.word	0
 4532 0108 24       		.byte	36
 4533 0109 000000   		.space	3
 4534 010c 00000000 		.word	0
 4535 0110 2F       		.byte	47
 4536 0111 000000   		.space	3
 4537 0114 0D000000 		.word	13
 4538 0118 2E       		.byte	46
 4539 0119 000000   		.space	3
 4540 011c 00000000 		.word	0
 4541 0120 2F       		.byte	47
 4542 0121 000000   		.space	3
 4543 0124 07000000 		.word	7
 4544 0128 2E       		.byte	46
 4545 0129 000000   		.space	3
 4546 012c 00000000 		.word	0
 4547 0130 2E       		.byte	46
 4548 0131 000000   		.space	3
 4549 0134 00000000 		.word	0
 4550 0138 2E       		.byte	46
 4551 0139 000000   		.space	3
 4552 013c 00000000 		.word	0
 4553 0140 2E       		.byte	46
 4554 0141 000000   		.space	3
ARM GAS  /tmp/ccj9eXy0.s 			page 110


 4555 0144 00000000 		.word	0
 4556 0148 2E       		.byte	46
 4557 0149 000000   		.space	3
 4558 014c 00000000 		.word	0
 4559 0150 2E       		.byte	46
 4560 0151 000000   		.space	3
 4561 0154 00000000 		.word	0
 4562 0158 2E       		.byte	46
 4563 0159 000000   		.space	3
 4564 015c 00000000 		.word	0
 4565 0160 2E       		.byte	46
 4566 0161 000000   		.space	3
 4567 0164 00000000 		.word	0
 4568 0168 2E       		.byte	46
 4569 0169 000000   		.space	3
 4570 016c 00000000 		.word	0
 4571 0170 2E       		.byte	46
 4572 0171 000000   		.space	3
 4573 0174 00000000 		.word	0
 4574              		.section	.rodata.mapping_none.10879,"a"
 4575              		.align	2
 4576              		.set	.LANCHOR8,. + 0
 4579              	mapping_none.10879:
 4580 0000 63       		.byte	99
 4581 0001 000000   		.space	3
 4582 0004 FFFFFFFF 		.word	-1
 4583 0008 00       		.byte	0
 4584 0009 000000   		.space	3
 4585 000c 00000000 		.word	0
 4586 0010 01       		.byte	1
 4587 0011 000000   		.space	3
 4588 0014 00000000 		.word	0
 4589 0018 03       		.byte	3
 4590 0019 000000   		.space	3
 4591 001c 00000000 		.word	0
 4592 0020 13       		.byte	19
 4593 0021 000000   		.space	3
 4594 0024 02000000 		.word	2
 4595 0028 12       		.byte	18
 4596 0029 000000   		.space	3
 4597 002c 02000000 		.word	2
 4598 0030 12       		.byte	18
 4599 0031 000000   		.space	3
 4600 0034 00000000 		.word	0
 4601 0038 06       		.byte	6
 4602 0039 000000   		.space	3
 4603 003c 00000000 		.word	0
 4604 0040 07       		.byte	7
 4605 0041 000000   		.space	3
 4606 0044 00000000 		.word	0
 4607 0048 08       		.byte	8
 4608 0049 000000   		.space	3
 4609 004c 00000000 		.word	0
 4610 0050 01       		.byte	1
 4611 0051 000000   		.space	3
 4612 0054 01000000 		.word	1
 4613 0058 02       		.byte	2
ARM GAS  /tmp/ccj9eXy0.s 			page 111


 4614 0059 000000   		.space	3
 4615 005c 01000000 		.word	1
 4616 0060 03       		.byte	3
 4617 0061 000000   		.space	3
 4618 0064 01000000 		.word	1
 4619 0068 0C       		.byte	12
 4620 0069 000000   		.space	3
 4621 006c 00000000 		.word	0
 4622 0070 0D       		.byte	13
 4623 0071 000000   		.space	3
 4624 0074 00000000 		.word	0
 4625 0078 0E       		.byte	14
 4626 0079 000000   		.space	3
 4627 007c 00000000 		.word	0
 4628 0080 0F       		.byte	15
 4629 0081 000000   		.space	3
 4630 0084 00000000 		.word	0
 4631 0088 10       		.byte	16
 4632 0089 000000   		.space	3
 4633 008c 00000000 		.word	0
 4634 0090 18       		.byte	24
 4635 0091 000000   		.space	3
 4636 0094 00000000 		.word	0
 4637 0098 13       		.byte	19
 4638 0099 000000   		.space	3
 4639 009c 00000000 		.word	0
 4640 00a0 14       		.byte	20
 4641 00a1 000000   		.space	3
 4642 00a4 00000000 		.word	0
 4643 00a8 15       		.byte	21
 4644 00a9 000000   		.space	3
 4645 00ac 00000000 		.word	0
 4646 00b0 16       		.byte	22
 4647 00b1 000000   		.space	3
 4648 00b4 00000000 		.word	0
 4649 00b8 1E       		.byte	30
 4650 00b9 000000   		.space	3
 4651 00bc 00000000 		.word	0
 4652 00c0 19       		.byte	25
 4653 00c1 000000   		.space	3
 4654 00c4 00000000 		.word	0
 4655 00c8 1A       		.byte	26
 4656 00c9 000000   		.space	3
 4657 00cc 00000000 		.word	0
 4658 00d0 1B       		.byte	27
 4659 00d1 000000   		.space	3
 4660 00d4 00000000 		.word	0
 4661 00d8 1C       		.byte	28
 4662 00d9 000000   		.space	3
 4663 00dc 00000000 		.word	0
 4664 00e0 29       		.byte	41
 4665 00e1 000000   		.space	3
 4666 00e4 00000000 		.word	0
 4667 00e8 1F       		.byte	31
 4668 00e9 000000   		.space	3
 4669 00ec 00000000 		.word	0
 4670 00f0 20       		.byte	32
ARM GAS  /tmp/ccj9eXy0.s 			page 112


 4671 00f1 000000   		.space	3
 4672 00f4 00000000 		.word	0
 4673 00f8 21       		.byte	33
 4674 00f9 000000   		.space	3
 4675 00fc 00000000 		.word	0
 4676 0100 22       		.byte	34
 4677 0101 000000   		.space	3
 4678 0104 00000000 		.word	0
 4679 0108 24       		.byte	36
 4680 0109 000000   		.space	3
 4681 010c 00000000 		.word	0
 4682 0110 25       		.byte	37
 4683 0111 000000   		.space	3
 4684 0114 00000000 		.word	0
 4685 0118 26       		.byte	38
 4686 0119 000000   		.space	3
 4687 011c 00000000 		.word	0
 4688 0120 27       		.byte	39
 4689 0121 000000   		.space	3
 4690 0124 00000000 		.word	0
 4691 0128 28       		.byte	40
 4692 0129 000000   		.space	3
 4693 012c 00000000 		.word	0
 4694 0130 2E       		.byte	46
 4695 0131 000000   		.space	3
 4696 0134 00000000 		.word	0
 4697 0138 2E       		.byte	46
 4698 0139 000000   		.space	3
 4699 013c 00000000 		.word	0
 4700 0140 2E       		.byte	46
 4701 0141 000000   		.space	3
 4702 0144 00000000 		.word	0
 4703 0148 2E       		.byte	46
 4704 0149 000000   		.space	3
 4705 014c 00000000 		.word	0
 4706 0150 2E       		.byte	46
 4707 0151 000000   		.space	3
 4708 0154 00000000 		.word	0
 4709 0158 2E       		.byte	46
 4710 0159 000000   		.space	3
 4711 015c 00000000 		.word	0
 4712 0160 2E       		.byte	46
 4713 0161 000000   		.space	3
 4714 0164 00000000 		.word	0
 4715 0168 2E       		.byte	46
 4716 0169 000000   		.space	3
 4717 016c 00000000 		.word	0
 4718 0170 2E       		.byte	46
 4719 0171 000000   		.space	3
 4720 0174 00000000 		.word	0
 4721              		.section	.rodata.mid_menu,"a"
 4722              		.align	2
 4725              	mid_menu:
 4726 0000 C800     		.ascii	"\310\000"
 4727              		.text
 4728              	.Letext0:
 4729              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
ARM GAS  /tmp/ccj9eXy0.s 			page 113


 4730              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 4731              		.file 6 "/usr/include/newlib/sys/_types.h"
 4732              		.file 7 "/usr/include/newlib/sys/reent.h"
 4733              		.file 8 "/usr/include/newlib/sys/lock.h"
 4734              		.file 9 "/usr/include/newlib/stdlib.h"
 4735              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 4736              		.file 11 "/usr/include/newlib/ctype.h"
 4737              		.file 12 "dmcp/ff_ifc.h"
 4738              		.file 13 "dmcp/dmcp.h"
 4739              		.file 14 "src/keys.h"
 4740              		.file 15 "src/decNumber/decContext.h"
 4741              		.file 16 "src/decNumber/decNumber.h"
 4742              		.file 17 "src/decNumber/decimal64.h"
 4743              		.file 18 "src/decNumber/decimal128.h"
 4744              		.file 19 "src/xeq.h"
 4745              		.file 20 "src/data.h"
 4746              		.file 21 "src/display.h"
 4747              		.file 22 "src/consts.h"
 4748              		.file 23 "src/storage.h"
 4749              		.file 24 "src/catalogues.h"
 4750              		.file 25 "src/menu.h"
 4751              		.file 26 "/usr/include/newlib/string.h"
 4752              		.file 27 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccj9eXy0.s 			page 114


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccj9eXy0.s:18     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccj9eXy0.s:26     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccj9eXy0.s:392    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/ccj9eXy0.s:400    .text.set_menu:0000000000000000 $t
     /tmp/ccj9eXy0.s:408    .text.set_menu:0000000000000000 set_menu
     /tmp/ccj9eXy0.s:458    .text.set_menu:0000000000000024 $d
     /tmp/ccj9eXy0.s:464    .text.get_menu:0000000000000000 $t
     /tmp/ccj9eXy0.s:472    .text.get_menu:0000000000000000 get_menu
     /tmp/ccj9eXy0.s:488    .text.get_menu:0000000000000008 $d
     /tmp/ccj9eXy0.s:493    .text.set_last_menu:0000000000000000 $t
     /tmp/ccj9eXy0.s:501    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccj9eXy0.s:550    .text.set_last_menu:0000000000000014 $d
     /tmp/ccj9eXy0.s:556    .text.mdot:0000000000000000 $t
     /tmp/ccj9eXy0.s:564    .text.mdot:0000000000000000 mdot
     /tmp/ccj9eXy0.s:655    .text.mdot:000000000000003c $d
     /tmp/ccj9eXy0.s:660    .text.display_menu:0000000000000000 $t
     /tmp/ccj9eXy0.s:668    .text.display_menu:0000000000000000 display_menu
     /tmp/ccj9eXy0.s:904    .text.display_menu:0000000000000104 $d
     /tmp/ccj9eXy0.s:913    .text.display_current_menu:0000000000000000 $t
     /tmp/ccj9eXy0.s:921    .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccj9eXy0.s:936    .text.display_current_menu:0000000000000008 $d
     /tmp/ccj9eXy0.s:941    .text.shutdown:0000000000000000 $t
     /tmp/ccj9eXy0.s:949    .text.shutdown:0000000000000000 shutdown
     /tmp/ccj9eXy0.s:976    .text.shutdown:0000000000000014 $d
     /tmp/ccj9eXy0.s:981    .text.is_key_pressed:0000000000000000 $t
     /tmp/ccj9eXy0.s:989    .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccj9eXy0.s:1012   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccj9eXy0.s:1017   .text.get_key:0000000000000000 $t
     /tmp/ccj9eXy0.s:1025   .text.get_key:0000000000000000 get_key
     /tmp/ccj9eXy0.s:1040   .text.get_key:0000000000000004 $d
     /tmp/ccj9eXy0.s:1045   .text.put_key:0000000000000000 $t
     /tmp/ccj9eXy0.s:1053   .text.put_key:0000000000000000 put_key
     /tmp/ccj9eXy0.s:1070   .text.put_key:0000000000000004 $d
     /tmp/ccj9eXy0.s:1075   .text.shift_down:0000000000000000 $t
     /tmp/ccj9eXy0.s:1083   .text.shift_down:0000000000000000 shift_down
     /tmp/ccj9eXy0.s:1098   .text.start_key_timer:0000000000000000 $t
     /tmp/ccj9eXy0.s:1106   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccj9eXy0.s:1130   .text.start_key_timer:000000000000000c $d
     /tmp/ccj9eXy0.s:1136   .text.keyticks:0000000000000000 $t
     /tmp/ccj9eXy0.s:1144   .text.keyticks:0000000000000000 keyticks
     /tmp/ccj9eXy0.s:1175   .text.keyticks:0000000000000018 $d
     /tmp/ccj9eXy0.s:1181   .text.is_paused:0000000000000000 $t
     /tmp/ccj9eXy0.s:1189   .text.is_paused:0000000000000000 is_paused
     /tmp/ccj9eXy0.s:1205   .text.is_paused:0000000000000008 $d
     /tmp/ccj9eXy0.s:1210   .text.start_pause:0000000000000000 $t
     /tmp/ccj9eXy0.s:1218   .text.start_pause:0000000000000000 start_pause
     /tmp/ccj9eXy0.s:1245   .text.start_pause:000000000000000c $d
     /tmp/ccj9eXy0.s:1250   .text.init_graphics:0000000000000000 $t
     /tmp/ccj9eXy0.s:1258   .text.init_graphics:0000000000000000 init_graphics
     /tmp/ccj9eXy0.s:1307   .text.init_graphics:0000000000000028 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccj9eXy0.s:1316   .text.moveto:0000000000000000 $t
     /tmp/ccj9eXy0.s:1324   .text.moveto:0000000000000000 moveto
     /tmp/ccj9eXy0.s:1384   .text.moveto:000000000000002c $d
     /tmp/ccj9eXy0.s:1391   .rodata.print_debug.str1.4:0000000000000000 $d
ARM GAS  /tmp/ccj9eXy0.s 			page 115


     /tmp/ccj9eXy0.s:1395   .text.print_debug:0000000000000000 $t
     /tmp/ccj9eXy0.s:1403   .text.print_debug:0000000000000000 print_debug
     /tmp/ccj9eXy0.s:1505   .text.print_debug:0000000000000064 $d
     /tmp/ccj9eXy0.s:1516   .text.do_now:0000000000000000 $t
     /tmp/ccj9eXy0.s:1524   .text.do_now:0000000000000000 do_now
     /tmp/ccj9eXy0.s:1559   .text.do_multi:0000000000000000 $t
     /tmp/ccj9eXy0.s:1567   .text.do_multi:0000000000000000 do_multi
     /tmp/ccj9eXy0.s:1598   .text.do_multi:0000000000000018 $d
     /tmp/ccj9eXy0.s:1606   .text.do_multi:0000000000000020 $t
     /tmp/ccj9eXy0.s:1849   .text.do_multi:0000000000000104 $d
     /tmp/ccj9eXy0.s:1854   .rodata.program_main.str1.4:0000000000000000 $d
     /tmp/ccj9eXy0.s:1858   .text.program_main:0000000000000000 $t
     /tmp/ccj9eXy0.s:1866   .text.program_main:0000000000000000 program_main
     /tmp/ccj9eXy0.s:2306   .text.program_main:00000000000001dc $d
     /tmp/ccj9eXy0.s:2312   .text.program_main:00000000000001e8 $t
     /tmp/ccj9eXy0.s:2506   .text.program_main:00000000000002c4 $d
     /tmp/ccj9eXy0.s:2543   .text.program_main:0000000000000348 $t
     /tmp/ccj9eXy0.s:3104   .text.program_main:00000000000005fc $d
     /tmp/ccj9eXy0.s:3165   .bss.n_p:0000000000000000 n_p
     /tmp/ccj9eXy0.s:3233   .data.spaces:0000000000000000 spaces
     /tmp/ccj9eXy0.s:3224   .data.release:0000000000000000 release
     /tmp/ccj9eXy0.s:3197   .data.h_shift:0000000000000000 h_shift
     /tmp/ccj9eXy0.s:3188   .data.g_shift:0000000000000000 g_shift
     /tmp/ccj9eXy0.s:3179   .data.f_shift:0000000000000000 f_shift
     /tmp/ccj9eXy0.s:3206   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccj9eXy0.s:3215   .data.no_key:0000000000000000 no_key
     /tmp/ccj9eXy0.s:3240   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccj9eXy0.s:3136   .rodata.str1.4:0000000000000000 $d
     /tmp/ccj9eXy0.s:4725   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccj9eXy0.s:3141   .bss.current_menu:0000000000000000 $d
     /tmp/ccj9eXy0.s:3145   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccj9eXy0.s:3148   .bss.last_menu:0000000000000000 $d
     /tmp/ccj9eXy0.s:3152   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccj9eXy0.s:3155   .bss.mdots:0000000000000000 $d
     /tmp/ccj9eXy0.s:3159   .bss.mdots:0000000000000000 mdots
     /tmp/ccj9eXy0.s:3162   .bss.n_p:0000000000000000 $d
     /tmp/ccj9eXy0.s:3168   .bss.start_ticks:0000000000000000 $d
     /tmp/ccj9eXy0.s:3172   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccj9eXy0.s:3175   .data.f_shift:0000000000000000 $d
     /tmp/ccj9eXy0.s:3184   .data.g_shift:0000000000000000 $d
     /tmp/ccj9eXy0.s:3193   .data.h_shift:0000000000000000 $d
     /tmp/ccj9eXy0.s:3202   .data.heartbeat:0000000000000000 $d
     /tmp/ccj9eXy0.s:3211   .data.no_key:0000000000000000 $d
     /tmp/ccj9eXy0.s:3220   .data.release:0000000000000000 $d
     /tmp/ccj9eXy0.s:3229   .data.spaces:0000000000000000 $d
     /tmp/ccj9eXy0.s:3236   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccj9eXy0.s:3246   .rodata.Menus:0000000000000000 $d
     /tmp/ccj9eXy0.s:3250   .rodata.Menus:0000000000000000 Menus
     /tmp/ccj9eXy0.s:4134   .rodata.mapping_alpha.10882:0000000000000000 $d
     /tmp/ccj9eXy0.s:4138   .rodata.mapping_alpha.10882:0000000000000000 mapping_alpha.10882
     /tmp/ccj9eXy0.s:4281   .rodata.mapping_fshift.10880:0000000000000000 $d
     /tmp/ccj9eXy0.s:4285   .rodata.mapping_fshift.10880:0000000000000000 mapping_fshift.10880
     /tmp/ccj9eXy0.s:4428   .rodata.mapping_gshift.10881:0000000000000000 $d
     /tmp/ccj9eXy0.s:4432   .rodata.mapping_gshift.10881:0000000000000000 mapping_gshift.10881
     /tmp/ccj9eXy0.s:4575   .rodata.mapping_none.10879:0000000000000000 $d
     /tmp/ccj9eXy0.s:4579   .rodata.mapping_none.10879:0000000000000000 mapping_none.10879
     /tmp/ccj9eXy0.s:4722   .rodata.mid_menu:0000000000000000 $d
ARM GAS  /tmp/ccj9eXy0.s 			page 116



UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
pixel_length
save_statefile
Pause
strcpy
sprintf
process_keycode_with_shift
import_program
flash_backup
flash_restore
save_libraryfile
load_statefile_library
load_statefile_state
init_34s
display
get_alpha_state
cur_shift
StateWhileOn
DispMsg
JustDisplayed

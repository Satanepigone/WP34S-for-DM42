ARM GAS  /tmp/ccBI4G28.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_menu_label.constprop.0:
  27              	.LVL0:
  28              	.LFB28:
  29              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** void set_menu ( int new_menu ) {
   4:src/menu.c    ****   int m = current_menu;
   5:src/menu.c    ****   if (new_menu == current_menu) {
   6:src/menu.c    ****     current_menu = 0;
   7:src/menu.c    ****   }
   8:src/menu.c    ****   else if (new_menu == -1) {
   9:src/menu.c    ****     current_menu = last_menu;
  10:src/menu.c    ****   }
  11:src/menu.c    ****   else {
  12:src/menu.c    ****     current_menu = new_menu;
  13:src/menu.c    ****   }
  14:src/menu.c    ****   last_menu = m;
  15:src/menu.c    **** }
  16:src/menu.c    **** 
  17:src/menu.c    **** int get_menu () {
  18:src/menu.c    ****   return current_menu;
  19:src/menu.c    **** }
  20:src/menu.c    **** 
  21:src/menu.c    **** void display_current_menu () {
  22:src/menu.c    ****   display_menu (current_menu);
  23:src/menu.c    **** }
  24:src/menu.c    **** 
  25:src/menu.c    **** void set_last_menu () {
  26:src/menu.c    ****   set_menu (last_menu);
  27:src/menu.c    **** }
  28:src/menu.c    **** 
  29:src/menu.c    **** static unsigned char mdots[200][2];
ARM GAS  /tmp/ccBI4G28.s 			page 2


  30:src/menu.c    **** 
  31:src/menu.c    **** static const struct _menu Menus[] = {
  32:src/menu.c    ****   {
  33:src/menu.c    ****     "Blank", // 0
  34:src/menu.c    ****     { 
  35:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  36:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  37:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  38:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  39:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  40:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  41:src/menu.c    ****     }    
  42:src/menu.c    ****   },
  43:src/menu.c    ****   {
  44:src/menu.c    ****     "Clear", // 1
  45:src/menu.c    ****     { 
  46:src/menu.c    ****       { { K24, 1 }, NO_KEY, "CLProg", "" },
  47:src/menu.c    ****       { { K24, 2 }, NO_KEY, "CL\221", "" },
  48:src/menu.c    ****       { { K24, 3 }, NO_KEY, "CLx", "" },
  49:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  50:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  51:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  52:src/menu.c    ****     }    
  53:src/menu.c    ****   },
  54:src/menu.c    ****   {
  55:src/menu.c    ****     "DISP", // 2
  56:src/menu.c    ****     { 
  57:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
  58:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
  59:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.M.S." },
  60:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
  61:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
  62:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  63:src/menu.c    ****     }
  64:src/menu.c    ****   },
  65:src/menu.c    ****   {
  66:src/menu.c    ****     "BASE", // 3
  67:src/menu.c    ****     { 
  68:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
  69:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
  70:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
  71:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
  72:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
  73:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  74:src/menu.c    ****     }
  75:src/menu.c    ****   },
  76:src/menu.c    ****   {
  77:src/menu.c    ****     "ANGLES", // 4
  78:src/menu.c    ****     { 
  79:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
  80:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
  81:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
  82:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
  83:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
  84:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  85:src/menu.c    ****     }
  86:src/menu.c    ****       
ARM GAS  /tmp/ccBI4G28.s 			page 3


  87:src/menu.c    ****   },
  88:src/menu.c    ****   {
  89:src/menu.c    ****     "MISC", // 5
  90:src/menu.c    ****     { 
  91:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
  92:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
  93:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
  94:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
  95:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
  96:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  97:src/menu.c    ****     }
  98:src/menu.c    ****   },
  99:src/menu.c    ****   {
 100:src/menu.c    ****     "X<>Y Key", // 6
 101:src/menu.c    ****     { 
 102:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 103:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 104:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 105:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 106:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 107:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 108:src/menu.c    ****     }    
 109:src/menu.c    ****   },
 110:src/menu.c    ****   {
 111:src/menu.c    ****     "Program", // 7
 112:src/menu.c    ****     { 
 113:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 114:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 115:src/menu.c    ****       { { K61, 3 }, NO_KEY, "Pause", "" },
 116:src/menu.c    ****       { { K30, 3 }, NO_KEY, "GTO", "" },
 117:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 118:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 119:src/menu.c    ****     }
 120:src/menu.c    ****   },
 121:src/menu.c    ****   {
 122:src/menu.c    ****     "Setup 1", // 8
 123:src/menu.c    ****     { 
 124:src/menu.c    ****       { { K_SYS, 0}, NO_KEY, "System", "" },
 125:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 126:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SaveS" },
 127:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LoadS" },
 128:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 129:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 130:src/menu.c    ****     }
 131:src/menu.c    ****   },
 132:src/menu.c    ****   {
 133:src/menu.c    ****     "Arrow", // 9
 134:src/menu.c    ****     { 
 135:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 136:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 137:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 138:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "2HMS" },
 139:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS2" },
 140:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 141:src/menu.c    ****     }
 142:src/menu.c    ****   },
 143:src/menu.c    ****   {
ARM GAS  /tmp/ccBI4G28.s 			page 4


 144:src/menu.c    ****     "Flags", // 10
 145:src/menu.c    ****     { 
 146:src/menu.c    ****       { { K50, 1 }, NO_KEY, "SF_", "" },
 147:src/menu.c    ****       { { K50, 2 }, NO_KEY, "CF_", "" },
 148:src/menu.c    ****       { { K51, 1 }, NO_KEY, "x=?", "" },
 149:src/menu.c    ****       { { K51, 2 }, NO_KEY, "x\013?", "" },
 150:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 151:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 152:src/menu.c    ****     }
 153:src/menu.c    ****   },
 154:src/menu.c    ****   {
 155:src/menu.c    ****     "Probability", // 11
 156:src/menu.c    ****     { 
 157:src/menu.c    ****       { { K40, 3 }, { K41, 1 }, "Fact!", "\224" },
 158:src/menu.c    ****       { { K40, 1 }, { K41, 2 }, "Cy,x", "\224\235" },
 159:src/menu.c    ****       { { K40, 2 }, NO_KEY, "Py,x", "" },
 160:src/menu.c    ****       { { K12, 1 }, NO_KEY, "RAN#", "" },
 161:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 162:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 163:src/menu.c    ****     }
 164:src/menu.c    ****   },
 165:src/menu.c    ****   {
 166:src/menu.c    ****     "Statistics", // 12
 167:src/menu.c    ****     { 
 168:src/menu.c    ****       { { K42, 1 }, { K43, 3 }, "Xbar", "SUMS" },
 169:src/menu.c    ****       { { K43, 1 }, NO_KEY, "Yhat", "" },
 170:src/menu.c    ****       { { K42, 2 }, NO_KEY, "s", "" },
 171:src/menu.c    ****       { { K43, 2 }, NO_KEY, "r", "" },
 172:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 173:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 174:src/menu.c    ****     }
 175:src/menu.c    ****   },
 176:src/menu.c    ****   {
 177:src/menu.c    ****     "Setup 2", // 13
 178:src/menu.c    ****     { 
 179:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SaveL", "" },
 180:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LoadL", "" },
 181:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SaveP", "" },
 182:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LoadP", "" },
 183:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 184:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 185:src/menu.c    ****     }
 186:src/menu.c    ****   },
 187:src/menu.c    **** };  
 188:src/menu.c    **** 
 189:src/menu.c    **** /* This code is the set_status_sized code with small changes
 190:src/menu.c    ****  * and non-DM42 code removed.
 191:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 192:src/menu.c    ****  */
 193:src/menu.c    **** #define MENU_WIDTH 32
 194:src/menu.c    **** 
 195:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  30              		.loc 1 195 13 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 544
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 196:src/menu.c    ****   // dotcol is the number of the starting dot column
ARM GAS  /tmp/ccBI4G28.s 			page 5


 197:src/menu.c    ****   // shifted is 1 if shifted
 198:src/menu.c    ****   unsigned short int posns[257];
  34              		.loc 1 198 3 view .LVU1
 199:src/menu.c    **** 
 200:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 201:src/menu.c    ****   int posns_state = 255;
  35              		.loc 1 201 3 view .LVU2
 202:src/menu.c    **** 
 203:src/menu.c    ****   int x = dotcol;
  36              		.loc 1 203 3 view .LVU3
 195:src/menu.c    ****   // dotcol is the number of the starting dot column
  37              		.loc 1 195 13 is_stmt 0 view .LVU4
  38 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  39              		.cfi_def_cfa_offset 36
  40              		.cfi_offset 4, -36
  41              		.cfi_offset 5, -32
  42              		.cfi_offset 6, -28
  43              		.cfi_offset 7, -24
  44              		.cfi_offset 8, -20
  45              		.cfi_offset 9, -16
  46              		.cfi_offset 10, -12
  47              		.cfi_offset 11, -8
  48              		.cfi_offset 14, -4
  49 0004 ADF5097D 		sub	sp, sp, #548
  50              		.cfi_def_cfa_offset 584
 195:src/menu.c    ****   // dotcol is the number of the starting dot column
  51              		.loc 1 195 13 view .LVU5
  52 0008 CDE90102 		strd	r0, r2, [sp, #4]
 204:src/menu.c    ****   int i, j, xmax;
 205:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  53              		.loc 1 205 18 view .LVU6
  54 000c 0029     		cmp	r1, #0
  55 000e B4BF     		ite	lt
  56 0010 01F11F03 		addlt	r3, r1, #31
  57 0014 0B46     		movge	r3, r1
 206:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 207:src/menu.c    **** 
 208:src/menu.c    ****   forceDispPlot=0;
  58              		.loc 1 208 16 view .LVU7
  59 0016 4848     		ldr	r0, .L36
  60              	.LVL1:
 195:src/menu.c    ****   // dotcol is the number of the starting dot column
  61              		.loc 1 195 13 view .LVU8
  62 0018 0F46     		mov	r7, r1
  63              	.LVL2:
 204:src/menu.c    ****   int i, j, xmax;
  64              		.loc 1 204 3 is_stmt 1 view .LVU9
 205:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  65              		.loc 1 205 3 view .LVU10
 209:src/menu.c    **** 
 210:src/menu.c    **** #ifdef RP_PREFIX
 211:src/menu.c    ****   RectPolConv = 0;
  66              		.loc 1 211 15 is_stmt 0 view .LVU11
  67 001a 4849     		ldr	r1, .L36+4
  68              	.LVL3:
 208:src/menu.c    **** 
  69              		.loc 1 208 16 view .LVU12
ARM GAS  /tmp/ccBI4G28.s 			page 6


  70 001c 0022     		movs	r2, #0
  71              	.LVL4:
 208:src/menu.c    **** 
  72              		.loc 1 208 16 view .LVU13
  73 001e 0270     		strb	r2, [r0]
  74              		.loc 1 211 15 view .LVU14
  75 0020 0A60     		str	r2, [r1]
 212:src/menu.c    **** #endif
 213:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
  76              		.loc 1 213 10 view .LVU15
  77 0022 019A     		ldr	r2, [sp, #4]
  78 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 205:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  79              		.loc 1 205 30 view .LVU16
  80 0026 23F01F03 		bic	r3, r3, #31
 205:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  81              		.loc 1 205 8 view .LVU17
  82 002a 03F12009 		add	r9, r3, #32
  83              	.LVL5:
 206:src/menu.c    **** 
  84              		.loc 1 206 3 is_stmt 1 view .LVU18
 208:src/menu.c    **** 
  85              		.loc 1 208 3 view .LVU19
 211:src/menu.c    **** #endif
  86              		.loc 1 211 3 view .LVU20
  87              		.loc 1 213 3 view .LVU21
  88              		.loc 1 213 9 view .LVU22
  89 002e 002D     		cmp	r5, #0
  90 0030 78D0     		beq	.L1
  91              		.loc 1 213 23 is_stmt 0 view .LVU23
  92 0032 4F45     		cmp	r7, r9
  93 0034 76DC     		bgt	.L1
  94              	.LBB33:
 214:src/menu.c    ****     int c;
 215:src/menu.c    ****     int width;
 216:src/menu.c    ****     unsigned char cmap[6];
 217:src/menu.c    **** 
 218:src/menu.c    ****     int real_width;
 219:src/menu.c    ****     int current_smallp;
 220:src/menu.c    **** 
 221:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 222:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 223:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 224:src/menu.c    ****     //           01 -> (not used)
 225:src/menu.c    ****     //           10 -> use big font
 226:src/menu.c    ****     //           11 -> use small font
 227:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 228:src/menu.c    ****     if (str[0] == '\007') {
  95              		.loc 1 228 8 view .LVU24
  96 0036 072D     		cmp	r5, #7
  97              	.LBE33:
 201:src/menu.c    **** 
  98              		.loc 1 201 7 view .LVU25
  99 0038 4FF0FF04 		mov	r4, #255
 100              	.LVL6:
 101              	.LBB50:
 214:src/menu.c    ****     int c;
ARM GAS  /tmp/ccBI4G28.s 			page 7


 102              		.loc 1 214 5 is_stmt 1 view .LVU26
 215:src/menu.c    ****     unsigned char cmap[6];
 103              		.loc 1 215 5 view .LVU27
 216:src/menu.c    **** 
 104              		.loc 1 216 5 view .LVU28
 218:src/menu.c    ****     int current_smallp;
 105              		.loc 1 218 5 view .LVU29
 219:src/menu.c    **** 
 106              		.loc 1 219 5 view .LVU30
 107              		.loc 1 228 5 view .LVU31
 229:src/menu.c    ****       width = str[1] & 0x1F;
 230:src/menu.c    ****       switch (str[1] & 0x60) {
 231:src/menu.c    ****       default:
 232:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 233:src/menu.c    **** 	break;
 234:src/menu.c    ****       case 0x40:	current_smallp = 0;
 235:src/menu.c    **** 	break;
 236:src/menu.c    ****       case 0x60:	current_smallp = 1;
 108              		.loc 1 236 33 is_stmt 0 view .LVU32
 109 003c 4FF0010A 		mov	r10, #1
 228:src/menu.c    ****       width = str[1] & 0x1F;
 110              		.loc 1 228 8 view .LVU33
 111 0040 64D1     		bne	.L5
 112              	.LVL7:
 113              	.L34:
 229:src/menu.c    ****       width = str[1] & 0x1F;
 114              		.loc 1 229 7 is_stmt 1 view .LVU34
 229:src/menu.c    ****       width = str[1] & 0x1F;
 115              		.loc 1 229 18 is_stmt 0 view .LVU35
 116 0042 019B     		ldr	r3, [sp, #4]
 117 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 118 0046 06F06003 		and	r3, r6, #96
 230:src/menu.c    ****       default:
 119              		.loc 1 230 7 view .LVU36
 120 004a 402B     		cmp	r3, #64
 229:src/menu.c    ****       width = str[1] & 0x1F;
 121              		.loc 1 229 13 view .LVU37
 122 004c 06F01F06 		and	r6, r6, #31
 123              	.LVL8:
 230:src/menu.c    ****       default:
 124              		.loc 1 230 7 is_stmt 1 view .LVU38
 125 0050 6CD0     		beq	.L28
 126 0052 602B     		cmp	r3, #96
 127 0054 6AD1     		bne	.L28
 128              		.loc 1 236 18 view .LVU39
 129              	.LVL9:
 237:src/menu.c    **** 	break;
 130              		.loc 1 237 2 view .LVU40
 238:src/menu.c    ****       }
 239:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 131              		.loc 1 239 7 view .LVU41
 132              		.loc 1 239 11 is_stmt 0 view .LVU42
 133 0056 019B     		ldr	r3, [sp, #4]
 134 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 236:src/menu.c    **** 	break;
 135              		.loc 1 236 33 view .LVU43
 136 005a 0123     		movs	r3, #1
ARM GAS  /tmp/ccBI4G28.s 			page 8


 137 005c 0093     		str	r3, [sp]
 138 005e 00F58075 		add	r5, r0, #256
 139              	.LVL10:
 140              	.L9:
 240:src/menu.c    ****       str += 3;
 141              		.loc 1 240 7 is_stmt 1 view .LVU44
 241:src/menu.c    **** 
 242:src/menu.c    ****       real_width = charlengths(c);
 142              		.loc 1 242 20 is_stmt 0 view .LVU45
 143 0062 2846     		mov	r0, r5
 144 0064 FFF7FEFF 		bl	charlengths
 145              	.LVL11:
 240:src/menu.c    ****       str += 3;
 146              		.loc 1 240 11 view .LVU46
 147 0068 019B     		ldr	r3, [sp, #4]
 148 006a 0333     		adds	r3, r3, #3
 149 006c 0193     		str	r3, [sp, #4]
 150              	.LVL12:
 151              		.loc 1 242 7 is_stmt 1 view .LVU47
 243:src/menu.c    ****     } else {
 244:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 245:src/menu.c    ****       real_width = width = charlengths(c);
 246:src/menu.c    ****       current_smallp = smallp;
 247:src/menu.c    ****     }
 248:src/menu.c    **** 
 249:src/menu.c    ****     if (x + real_width > xmax)
 152              		.loc 1 249 5 view .LVU48
 153              		.loc 1 249 11 is_stmt 0 view .LVU49
 154 006e C319     		adds	r3, r0, r7
 155              	.LVL13:
 156              		.loc 1 249 8 view .LVU50
 157 0070 9945     		cmp	r9, r3
 158 0072 57DB     		blt	.L1
 159              	.L35:
 250:src/menu.c    ****       break;
 251:src/menu.c    **** 
 252:src/menu.c    ****     if (posns_state != current_smallp) {
 160              		.loc 1 252 5 is_stmt 1 view .LVU51
 161              		.loc 1 252 8 is_stmt 0 view .LVU52
 162 0074 009B     		ldr	r3, [sp]
 163 0076 A342     		cmp	r3, r4
 253:src/menu.c    ****       findlengths(posns, current_smallp);
 164              		.loc 1 253 7 view .LVU53
 165 0078 07AB     		add	r3, sp, #28
 252:src/menu.c    ****       findlengths(posns, current_smallp);
 166              		.loc 1 252 8 view .LVU54
 167 007a 05D0     		beq	.L12
 168              		.loc 1 253 7 is_stmt 1 view .LVU55
 169 007c 1846     		mov	r0, r3
 170              	.LVL14:
 171              		.loc 1 253 7 is_stmt 0 view .LVU56
 172 007e 0099     		ldr	r1, [sp]
 173 0080 0393     		str	r3, [sp, #12]
 174 0082 FFF7FEFF 		bl	findlengths
 175              	.LVL15:
 176 0086 039B     		ldr	r3, [sp, #12]
 254:src/menu.c    ****       posns_state = current_smallp;
ARM GAS  /tmp/ccBI4G28.s 			page 9


 177              		.loc 1 254 7 is_stmt 1 view .LVU57
 178              	.LVL16:
 179              	.L12:
 255:src/menu.c    ****     }
 256:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 180              		.loc 1 256 5 view .LVU58
 181 0088 009A     		ldr	r2, [sp]
 182 008a 2846     		mov	r0, r5
 183 008c 05A9     		add	r1, sp, #20
 184 008e FFF7FEFF 		bl	unpackchar
 185              	.LVL17:
 257:src/menu.c    **** 
 258:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 186              		.loc 1 258 5 view .LVU59
 187              		.loc 1 258 15 view .LVU60
 188 0092 029B     		ldr	r3, [sp, #8]
 189 0094 03EB4704 		add	r4, r3, r7, lsl #1
 190 0098 294B     		ldr	r3, .L36+8
 191 009a 0DF1140B 		add	fp, sp, #20
 192 009e 1C44     		add	r4, r4, r3
 256:src/menu.c    **** 
 193              		.loc 1 256 5 is_stmt 0 view .LVU61
 194 00a0 4FF0050E 		mov	lr, #5
 195 00a4 A9EB0705 		sub	r5, r9, r7
 196              	.LVL18:
 197              	.L13:
 259:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 198              		.loc 1 259 17 is_stmt 1 view .LVU62
 199              		.loc 1 259 7 is_stmt 0 view .LVU63
 200 00a8 002E     		cmp	r6, #0
 201 00aa 1FDD     		ble	.L19
 260:src/menu.c    **** 	if (x+j >= xmax)
 202              		.loc 1 260 2 is_stmt 1 view .LVU64
 203              		.loc 1 260 5 is_stmt 0 view .LVU65
 204 00ac B945     		cmp	r9, r7
 205 00ae 1DDD     		ble	.L19
 206              	.LBB34:
 207              	.LBB35:
 208              	.LBB36:
 209              	.LBB37:
 261:src/menu.c    **** 	  break;
 262:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 263:src/menu.c    ****       }
 264:src/menu.c    ****     }
 265:src/menu.c    ****     x += width;
 266:src/menu.c    ****   }
 267:src/menu.c    **** }
 268:src/menu.c    **** 
 269:src/menu.c    **** 
 270:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 271:src/menu.c    **** 
 272:src/menu.c    **** int pixel_length(const char *s, int smallp)
 273:src/menu.c    **** {
 274:src/menu.c    ****   int len = 0;
 275:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 276:src/menu.c    ****   while (*s != '\0') {
 277:src/menu.c    ****     if (s[0] == '\007') {
ARM GAS  /tmp/ccBI4G28.s 			page 10


 278:src/menu.c    ****       len += s[1] & 0x1F;
 279:src/menu.c    ****       s += 3;
 280:src/menu.c    ****       continue;
 281:src/menu.c    ****     }
 282:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 283:src/menu.c    ****   }
 284:src/menu.c    ****   return len;
 285:src/menu.c    **** }
 286:src/menu.c    **** */
 287:src/menu.c    **** 
 288:src/menu.c    **** 
 289:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 290:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 291:src/menu.c    ****   if (on) {
 292:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 293:src/menu.c    ****   }
 294:src/menu.c    ****   else {
 295:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 210              		.loc 1 295 25 view .LVU66
 211 00b0 0AFA0EFC 		lsl	ip, r10, lr
 212              		.loc 1 295 17 view .LVU67
 213 00b4 4FFA8CFC 		sxtb	ip, ip
 214              	.LBE37:
 215              	.LBE36:
 216              	.LBE35:
 217              	.LBE34:
 262:src/menu.c    ****       }
 218              		.loc 1 262 31 view .LVU68
 219 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 220              	.LBB47:
 221              	.LBB44:
 222              	.LBB41:
 223              	.LBB38:
 224              		.loc 1 295 17 view .LVU69
 225 00bc 6FEA0C08 		mvn	r8, ip
 226              	.LBE38:
 227              	.LBE41:
 228              	.LBE44:
 229              	.LBE47:
 259:src/menu.c    **** 	if (x+j >= xmax)
 230              		.loc 1 259 13 view .LVU70
 231 00c0 0023     		movs	r3, #0
 232 00c2 01E0     		b	.L14
 233              	.LVL19:
 234              	.L18:
 260:src/menu.c    **** 	  break;
 235              		.loc 1 260 5 view .LVU71
 236 00c4 9D42     		cmp	r5, r3
 237 00c6 11D0     		beq	.L19
 238              	.LVL20:
 239              	.L14:
 262:src/menu.c    ****       }
 240              		.loc 1 262 2 is_stmt 1 view .LVU72
 241              	.LBB48:
 242              	.LBI34:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 243              		.loc 1 289 6 view .LVU73
ARM GAS  /tmp/ccBI4G28.s 			page 11


 244              	.LBB45:
 290:src/menu.c    ****   if (on) {
 245              		.loc 1 290 3 view .LVU74
 246              	.LBB42:
 247              	.LBI36:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 248              		.loc 1 289 6 view .LVU75
 249              	.LBB39:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 250              		.loc 1 291 3 view .LVU76
 251              	.LBE39:
 252              	.LBE42:
 290:src/menu.c    ****   if (on) {
 253              		.loc 1 290 6 is_stmt 0 view .LVU77
 254 00c8 DA19     		adds	r2, r3, r7
 255              	.LVL21:
 290:src/menu.c    ****   if (on) {
 256              		.loc 1 290 6 view .LVU78
 257 00ca C72A     		cmp	r2, #199
 258              	.LBE45:
 259              	.LBE48:
 262:src/menu.c    ****       }
 260              		.loc 1 262 46 view .LVU79
 261 00cc 40FA03F1 		asr	r1, r0, r3
 262              	.LBB49:
 263              	.LBB46:
 290:src/menu.c    ****   if (on) {
 264              		.loc 1 290 6 view .LVU80
 265 00d0 09D8     		bhi	.L16
 266              	.LBB43:
 267              	.LBB40:
 292:src/menu.c    ****   }
 268              		.loc 1 292 5 is_stmt 1 view .LVU81
 269              		.loc 1 295 5 view .LVU82
 292:src/menu.c    ****   }
 270              		.loc 1 292 17 is_stmt 0 view .LVU83
 271 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 272              	.LVL22:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 273              		.loc 1 291 6 view .LVU84
 274 00d6 C907     		lsls	r1, r1, #31
 292:src/menu.c    ****   }
 275              		.loc 1 292 17 view .LVU85
 276 00d8 4CBF     		ite	mi
 277 00da 4CEA0202 		orrmi	r2, ip, r2
 278              		.loc 1 295 17 view .LVU86
 279 00de 08EA0202 		andpl	r2, r8, r2
 280 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 281              	.L16:
 282              	.LBE40:
 283              	.LBE43:
 284              	.LBE46:
 285              	.LBE49:
 260:src/menu.c    **** 	  break;
 286              		.loc 1 260 2 is_stmt 1 view .LVU87
 287              	.LVL23:
 259:src/menu.c    **** 	if (x+j >= xmax)
ARM GAS  /tmp/ccBI4G28.s 			page 12


 288              		.loc 1 259 26 view .LVU88
 259:src/menu.c    **** 	if (x+j >= xmax)
 289              		.loc 1 259 27 is_stmt 0 view .LVU89
 290 00e6 0133     		adds	r3, r3, #1
 291              	.LVL24:
 259:src/menu.c    **** 	if (x+j >= xmax)
 292              		.loc 1 259 17 is_stmt 1 view .LVU90
 259:src/menu.c    **** 	if (x+j >= xmax)
 293              		.loc 1 259 7 is_stmt 0 view .LVU91
 294 00e8 B342     		cmp	r3, r6
 295 00ea EBD1     		bne	.L18
 296              	.LVL25:
 297              	.L19:
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 298              		.loc 1 258 20 is_stmt 1 view .LVU92
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 299              		.loc 1 258 15 view .LVU93
 300 00ec 0EF1FF3E 		add	lr, lr, #-1
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 301              		.loc 1 258 5 is_stmt 0 view .LVU94
 302 00f0 BEF1FF3F 		cmp	lr, #-1
 303 00f4 0BF1010B 		add	fp, fp, #1
 304              	.LVL26:
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 305              		.loc 1 258 5 view .LVU95
 306 00f8 D6D1     		bne	.L13
 265:src/menu.c    ****   }
 307              		.loc 1 265 5 is_stmt 1 view .LVU96
 308              	.LBE50:
 213:src/menu.c    ****     int c;
 309              		.loc 1 213 10 is_stmt 0 view .LVU97
 310 00fa 019B     		ldr	r3, [sp, #4]
 311 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 312              	.LBB51:
 265:src/menu.c    ****   }
 313              		.loc 1 265 7 view .LVU98
 314 00fe 3744     		add	r7, r7, r6
 315              	.LVL27:
 265:src/menu.c    ****   }
 316              		.loc 1 265 7 view .LVU99
 317              	.LBE51:
 213:src/menu.c    ****     int c;
 318              		.loc 1 213 9 is_stmt 1 view .LVU100
 319 0100 85B1     		cbz	r5, .L1
 213:src/menu.c    ****     int c;
 320              		.loc 1 213 23 is_stmt 0 view .LVU101
 321 0102 B945     		cmp	r9, r7
 322 0104 0EDB     		blt	.L1
 323              	.LBB52:
 228:src/menu.c    ****       width = str[1] & 0x1F;
 324              		.loc 1 228 8 view .LVU102
 325 0106 072D     		cmp	r5, #7
 326              	.LBE52:
 327 0108 009C     		ldr	r4, [sp]
 328              	.LBB53:
 214:src/menu.c    ****     int width;
 329              		.loc 1 214 5 is_stmt 1 view .LVU103
ARM GAS  /tmp/ccBI4G28.s 			page 13


 215:src/menu.c    ****     unsigned char cmap[6];
 330              		.loc 1 215 5 view .LVU104
 216:src/menu.c    **** 
 331              		.loc 1 216 5 view .LVU105
 218:src/menu.c    ****     int current_smallp;
 332              		.loc 1 218 5 view .LVU106
 219:src/menu.c    **** 
 333              		.loc 1 219 5 view .LVU107
 228:src/menu.c    ****       width = str[1] & 0x1F;
 334              		.loc 1 228 5 view .LVU108
 228:src/menu.c    ****       width = str[1] & 0x1F;
 335              		.loc 1 228 8 is_stmt 0 view .LVU109
 336 010a 9AD0     		beq	.L34
 337              	.LVL28:
 338              	.L5:
 244:src/menu.c    ****       real_width = width = charlengths(c);
 339              		.loc 1 244 7 is_stmt 1 view .LVU110
 245:src/menu.c    ****       current_smallp = smallp;
 340              		.loc 1 245 28 is_stmt 0 view .LVU111
 341 010c 2846     		mov	r0, r5
 342 010e FFF7FEFF 		bl	charlengths
 343              	.LVL29:
 244:src/menu.c    ****       real_width = width = charlengths(c);
 344              		.loc 1 244 31 view .LVU112
 345 0112 019B     		ldr	r3, [sp, #4]
 346 0114 0133     		adds	r3, r3, #1
 347 0116 0193     		str	r3, [sp, #4]
 348              	.LVL30:
 245:src/menu.c    ****       current_smallp = smallp;
 349              		.loc 1 245 7 is_stmt 1 view .LVU113
 246:src/menu.c    ****     }
 350              		.loc 1 246 7 view .LVU114
 246:src/menu.c    ****     }
 351              		.loc 1 246 22 is_stmt 0 view .LVU115
 352 0118 0023     		movs	r3, #0
 353              	.LVL31:
 246:src/menu.c    ****     }
 354              		.loc 1 246 22 view .LVU116
 355 011a 0093     		str	r3, [sp]
 356              	.LVL32:
 249:src/menu.c    ****       break;
 357              		.loc 1 249 11 view .LVU117
 358 011c C319     		adds	r3, r0, r7
 359              	.LVL33:
 249:src/menu.c    ****       break;
 360              		.loc 1 249 8 view .LVU118
 361 011e 9945     		cmp	r9, r3
 245:src/menu.c    ****       current_smallp = smallp;
 362              		.loc 1 245 28 view .LVU119
 363 0120 0646     		mov	r6, r0
 249:src/menu.c    ****       break;
 364              		.loc 1 249 5 is_stmt 1 view .LVU120
 249:src/menu.c    ****       break;
 365              		.loc 1 249 8 is_stmt 0 view .LVU121
 366 0122 A7DA     		bge	.L35
 367              	.LVL34:
 368              	.L1:
ARM GAS  /tmp/ccBI4G28.s 			page 14


 249:src/menu.c    ****       break;
 369              		.loc 1 249 8 view .LVU122
 370              	.LBE53:
 267:src/menu.c    **** 
 371              		.loc 1 267 1 view .LVU123
 372 0124 0DF5097D 		add	sp, sp, #548
 373              		.cfi_remember_state
 374              		.cfi_def_cfa_offset 36
 375              		@ sp needed
 376 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 377              	.LVL35:
 378              	.L28:
 379              		.cfi_restore_state
 380              	.LBB54:
 239:src/menu.c    ****       str += 3;
 381              		.loc 1 239 7 is_stmt 1 view .LVU124
 239:src/menu.c    ****       str += 3;
 382              		.loc 1 239 11 is_stmt 0 view .LVU125
 383 012c 019B     		ldr	r3, [sp, #4]
 384 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 232:src/menu.c    **** 	break;
 385              		.loc 1 232 33 view .LVU126
 386 0130 0023     		movs	r3, #0
 387 0132 0093     		str	r3, [sp]
 388 0134 95E7     		b	.L9
 389              	.L37:
 390 0136 00BF     		.align	2
 391              	.L36:
 392 0138 00000000 		.word	forceDispPlot
 393 013c 00000000 		.word	RectPolConv
 394 0140 00000000 		.word	.LANCHOR0
 395              	.LBE54:
 396              		.cfi_endproc
 397              	.LFE28:
 399              		.section	.text.set_menu,"ax",%progbits
 400              		.align	1
 401              		.p2align 2,,3
 402              		.global	set_menu
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu fpv4-sp-d16
 408              	set_menu:
 409              	.LVL36:
 410              	.LFB3:
   3:src/menu.c    ****   int m = current_menu;
 411              		.loc 1 3 32 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              		@ link register save eliminated.
   4:src/menu.c    ****   if (new_menu == current_menu) {
 416              		.loc 1 4 3 view .LVU128
   4:src/menu.c    ****   if (new_menu == current_menu) {
 417              		.loc 1 4 7 is_stmt 0 view .LVU129
 418 0000 084A     		ldr	r2, .L43
 419 0002 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccBI4G28.s 			page 15


 420              	.LVL37:
   5:src/menu.c    ****     current_menu = 0;
 421              		.loc 1 5 3 is_stmt 1 view .LVU130
   5:src/menu.c    ****     current_menu = 0;
 422              		.loc 1 5 6 is_stmt 0 view .LVU131
 423 0004 8342     		cmp	r3, r0
 424 0006 07D0     		beq	.L42
   8:src/menu.c    ****     current_menu = last_menu;
 425              		.loc 1 8 8 is_stmt 1 view .LVU132
   9:src/menu.c    ****   }
 426              		.loc 1 9 18 is_stmt 0 view .LVU133
 427 0008 0749     		ldr	r1, .L43+4
   8:src/menu.c    ****     current_menu = last_menu;
 428              		.loc 1 8 11 view .LVU134
 429 000a B0F1FF3F 		cmp	r0, #-1
   9:src/menu.c    ****   }
 430              		.loc 1 9 5 is_stmt 1 view .LVU135
   9:src/menu.c    ****   }
 431              		.loc 1 9 18 is_stmt 0 view .LVU136
 432 000e 08BF     		it	eq
 433 0010 0868     		ldreq	r0, [r1]
 434              	.LVL38:
  12:src/menu.c    ****   }
 435              		.loc 1 12 5 is_stmt 1 view .LVU137
  12:src/menu.c    ****   }
 436              		.loc 1 12 18 is_stmt 0 view .LVU138
 437 0012 1060     		str	r0, [r2]
  14:src/menu.c    **** }
 438              		.loc 1 14 3 is_stmt 1 view .LVU139
  14:src/menu.c    **** }
 439              		.loc 1 14 13 is_stmt 0 view .LVU140
 440 0014 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 441              		.loc 1 15 1 view .LVU141
 442 0016 7047     		bx	lr
 443              	.LVL39:
 444              	.L42:
   6:src/menu.c    ****   }
 445              		.loc 1 6 5 is_stmt 1 view .LVU142
   6:src/menu.c    ****   }
 446              		.loc 1 6 18 is_stmt 0 view .LVU143
 447 0018 0021     		movs	r1, #0
 448 001a 1160     		str	r1, [r2]
 449 001c 0249     		ldr	r1, .L43+4
  14:src/menu.c    **** }
 450              		.loc 1 14 3 is_stmt 1 view .LVU144
  14:src/menu.c    **** }
 451              		.loc 1 14 13 is_stmt 0 view .LVU145
 452 001e 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 453              		.loc 1 15 1 view .LVU146
 454 0020 7047     		bx	lr
 455              	.L44:
 456 0022 00BF     		.align	2
 457              	.L43:
 458 0024 00000000 		.word	.LANCHOR1
 459 0028 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/ccBI4G28.s 			page 16


 460              		.cfi_endproc
 461              	.LFE3:
 463              		.section	.text.get_menu,"ax",%progbits
 464              		.align	1
 465              		.p2align 2,,3
 466              		.global	get_menu
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv4-sp-d16
 472              	get_menu:
 473              	.LFB4:
  17:src/menu.c    ****   return current_menu;
 474              		.loc 1 17 17 is_stmt 1 view -0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
  18:src/menu.c    **** }
 479              		.loc 1 18 3 view .LVU148
  18:src/menu.c    **** }
 480              		.loc 1 18 10 is_stmt 0 view .LVU149
 481 0000 014B     		ldr	r3, .L46
  19:src/menu.c    **** 
 482              		.loc 1 19 1 view .LVU150
 483 0002 1868     		ldr	r0, [r3]
 484 0004 7047     		bx	lr
 485              	.L47:
 486 0006 00BF     		.align	2
 487              	.L46:
 488 0008 00000000 		.word	.LANCHOR1
 489              		.cfi_endproc
 490              	.LFE4:
 492              		.section	.text.set_last_menu,"ax",%progbits
 493              		.align	1
 494              		.p2align 2,,3
 495              		.global	set_last_menu
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu fpv4-sp-d16
 501              	set_last_menu:
 502              	.LFB6:
  25:src/menu.c    ****   set_menu (last_menu);
 503              		.loc 1 25 23 is_stmt 1 view -0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
  26:src/menu.c    **** }
 508              		.loc 1 26 3 view .LVU152
 509 0000 044B     		ldr	r3, .L52
 510              	.LBB55:
 511              	.LBB56:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 512              		.loc 1 4 7 is_stmt 0 view .LVU153
 513 0002 0549     		ldr	r1, .L52+4
ARM GAS  /tmp/ccBI4G28.s 			page 17


 514              	.LBE56:
 515              	.LBE55:
  26:src/menu.c    **** }
 516              		.loc 1 26 3 view .LVU154
 517 0004 1868     		ldr	r0, [r3]
 518              	.LVL40:
 519              	.LBB58:
 520              	.LBI55:
   3:src/menu.c    ****   int m = current_menu;
 521              		.loc 1 3 6 is_stmt 1 view .LVU155
 522              	.LBB57:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 523              		.loc 1 4 3 view .LVU156
   4:src/menu.c    ****   if (new_menu == current_menu) {
 524              		.loc 1 4 7 is_stmt 0 view .LVU157
 525 0006 0A68     		ldr	r2, [r1]
 526              	.LVL41:
   5:src/menu.c    ****     current_menu = 0;
 527              		.loc 1 5 3 is_stmt 1 view .LVU158
  14:src/menu.c    **** }
 528              		.loc 1 14 13 is_stmt 0 view .LVU159
 529 0008 1A60     		str	r2, [r3]
   5:src/menu.c    ****     current_menu = 0;
 530              		.loc 1 5 6 view .LVU160
 531 000a 9042     		cmp	r0, r2
   6:src/menu.c    ****   }
 532              		.loc 1 6 5 is_stmt 1 view .LVU161
   6:src/menu.c    ****   }
 533              		.loc 1 6 18 is_stmt 0 view .LVU162
 534 000c 08BF     		it	eq
 535 000e 0020     		moveq	r0, #0
 536              	.LVL42:
   8:src/menu.c    ****     current_menu = last_menu;
 537              		.loc 1 8 8 is_stmt 1 view .LVU163
  12:src/menu.c    ****   }
 538              		.loc 1 12 18 is_stmt 0 view .LVU164
 539 0010 0860     		str	r0, [r1]
  14:src/menu.c    **** }
 540              		.loc 1 14 3 is_stmt 1 view .LVU165
 541              	.LVL43:
  14:src/menu.c    **** }
 542              		.loc 1 14 3 is_stmt 0 view .LVU166
 543              	.LBE57:
 544              	.LBE58:
  27:src/menu.c    **** 
 545              		.loc 1 27 1 view .LVU167
 546 0012 7047     		bx	lr
 547              	.L53:
 548              		.align	2
 549              	.L52:
 550 0014 00000000 		.word	.LANCHOR2
 551 0018 00000000 		.word	.LANCHOR1
 552              		.cfi_endproc
 553              	.LFE6:
 555              		.section	.text.mdot,"ax",%progbits
 556              		.align	1
 557              		.p2align 2,,3
ARM GAS  /tmp/ccBI4G28.s 			page 18


 558              		.global	mdot
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu fpv4-sp-d16
 564              	mdot:
 565              	.LVL44:
 566              	.LFB8:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 567              		.loc 1 289 40 is_stmt 1 view -0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 290:src/menu.c    ****   if (on) {
 572              		.loc 1 290 3 view .LVU169
 290:src/menu.c    ****   if (on) {
 573              		.loc 1 290 6 is_stmt 0 view .LVU170
 574 0000 C728     		cmp	r0, #199
 575 0002 1AD8     		bhi	.L58
 576              	.LVL45:
 577              	.LBB61:
 578              	.LBI61:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 579              		.loc 1 289 6 is_stmt 1 view .LVU171
 580              	.LBB62:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 581              		.loc 1 291 3 view .LVU172
 582              	.LBE62:
 583              	.LBE61:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 584              		.loc 1 289 40 is_stmt 0 view .LVU173
 585 0004 10B4     		push	{r4}
 586              		.cfi_def_cfa_offset 4
 587              		.cfi_offset 4, -4
 588              	.LBB65:
 589              	.LBB63:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 590              		.loc 1 291 6 view .LVU174
 591 0006 63B9     		cbnz	r3, .L61
 592              		.loc 1 295 5 is_stmt 1 view .LVU175
 593              		.loc 1 295 17 is_stmt 0 view .LVU176
 594 0008 0C4B     		ldr	r3, .L62
 595              	.LVL46:
 596              		.loc 1 295 17 view .LVU177
 597 000a 03EB4000 		add	r0, r3, r0, lsl #1
 598              	.LVL47:
 599              		.loc 1 295 25 view .LVU178
 600 000e 0124     		movs	r4, #1
 601              		.loc 1 295 17 view .LVU179
 602 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 603              		.loc 1 295 25 view .LVU180
 604 0012 04FA01F1 		lsl	r1, r4, r1
 605              	.LVL48:
 606              		.loc 1 295 17 view .LVU181
 607 0016 23EA0101 		bic	r1, r3, r1
 608 001a 8154     		strb	r1, [r0, r2]
ARM GAS  /tmp/ccBI4G28.s 			page 19


 609              	.LVL49:
 610              		.loc 1 295 17 view .LVU182
 611              	.LBE63:
 612              	.LBE65:
 296:src/menu.c    ****   }
 297:src/menu.c    **** }
 613              		.loc 1 297 1 view .LVU183
 614 001c 5DF8044B 		ldr	r4, [sp], #4
 615              		.cfi_remember_state
 616              		.cfi_restore 4
 617              		.cfi_def_cfa_offset 0
 618 0020 7047     		bx	lr
 619              	.LVL50:
 620              	.L61:
 621              		.cfi_restore_state
 622              	.LBB66:
 623              	.LBB64:
 292:src/menu.c    ****   }
 624              		.loc 1 292 5 is_stmt 1 view .LVU184
 292:src/menu.c    ****   }
 625              		.loc 1 292 17 is_stmt 0 view .LVU185
 626 0022 064B     		ldr	r3, .L62
 627              	.LVL51:
 292:src/menu.c    ****   }
 628              		.loc 1 292 17 view .LVU186
 629 0024 03EB4000 		add	r0, r3, r0, lsl #1
 630              	.LVL52:
 292:src/menu.c    ****   }
 631              		.loc 1 292 24 view .LVU187
 632 0028 0124     		movs	r4, #1
 292:src/menu.c    ****   }
 633              		.loc 1 292 17 view .LVU188
 634 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 292:src/menu.c    ****   }
 635              		.loc 1 292 24 view .LVU189
 636 002c 04FA01F1 		lsl	r1, r4, r1
 637              	.LVL53:
 292:src/menu.c    ****   }
 638              		.loc 1 292 17 view .LVU190
 639 0030 1943     		orrs	r1, r1, r3
 640 0032 8154     		strb	r1, [r0, r2]
 641              	.LBE64:
 642              	.LBE66:
 643              		.loc 1 297 1 view .LVU191
 644 0034 5DF8044B 		ldr	r4, [sp], #4
 645              		.cfi_restore 4
 646              		.cfi_def_cfa_offset 0
 647 0038 7047     		bx	lr
 648              	.LVL54:
 649              	.L58:
 650              		.loc 1 297 1 view .LVU192
 651 003a 7047     		bx	lr
 652              	.L63:
 653              		.align	2
 654              	.L62:
 655 003c 00000000 		.word	.LANCHOR0
 656              		.cfi_endproc
ARM GAS  /tmp/ccBI4G28.s 			page 20


 657              	.LFE8:
 659              		.section	.text.display_menu,"ax",%progbits
 660              		.align	1
 661              		.p2align 2,,3
 662              		.global	display_menu
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu fpv4-sp-d16
 668              	display_menu:
 669              	.LVL55:
 670              	.LFB9:
 298:src/menu.c    **** 
 299:src/menu.c    **** 
 300:src/menu.c    **** void display_menu (int current_menu) {
 671              		.loc 1 300 38 is_stmt 1 view -0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 301:src/menu.c    ****   int len = 0;
 675              		.loc 1 301 3 view .LVU194
 302:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 676              		.loc 1 302 3 view .LVU195
 300:src/menu.c    ****   int len = 0;
 677              		.loc 1 300 38 is_stmt 0 view .LVU196
 678 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 679              		.cfi_def_cfa_offset 36
 680              		.cfi_offset 4, -36
 681              		.cfi_offset 5, -32
 682              		.cfi_offset 6, -28
 683              		.cfi_offset 7, -24
 684              		.cfi_offset 8, -20
 685              		.cfi_offset 9, -16
 686              		.cfi_offset 10, -12
 687              		.cfi_offset 11, -8
 688              		.cfi_offset 14, -4
 689 0004 83B0     		sub	sp, sp, #12
 690              		.cfi_def_cfa_offset 48
 691              		.loc 1 302 3 view .LVU197
 692 0006 0024     		movs	r4, #0
 693 0008 404F     		ldr	r7, .L82
 694 000a 0094     		str	r4, [sp]
 695 000c 3423     		movs	r3, #52
 696 000e 4FF4C872 		mov	r2, #400
 697 0012 BC21     		movs	r1, #188
 300:src/menu.c    ****   int len = 0;
 698              		.loc 1 300 38 view .LVU198
 699 0014 0646     		mov	r6, r0
 700              		.loc 1 302 3 view .LVU199
 701 0016 2046     		mov	r0, r4
 702              	.LVL56:
 703              		.loc 1 302 3 view .LVU200
 704 0018 B847     		blx	r7
 705              	.LVL57:
 303:src/menu.c    ****   //  if (current_menu == 0) return; // Menu 0 is blank
 304:src/menu.c    ****   // Not blank now - includes arrow and cmplx like all the others.
 305:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
ARM GAS  /tmp/ccBI4G28.s 			page 21


 706              		.loc 1 305 3 is_stmt 1 view .LVU201
 707 001a 3D4D     		ldr	r5, .L82+4
 708 001c FF23     		movs	r3, #255
 709 001e 0093     		str	r3, [sp]
 710 0020 4FF4C872 		mov	r2, #400
 711 0024 0123     		movs	r3, #1
 712 0026 BC21     		movs	r1, #188
 713 0028 2046     		mov	r0, r4
 714 002a B847     		blx	r7
 715              	.LVL58:
 306:src/menu.c    ****   //Clear previous menu
 307:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 716              		.loc 1 307 3 view .LVU202
 717              	.LBB67:
 718              		.loc 1 307 8 view .LVU203
 719              		.loc 1 307 21 view .LVU204
 308:src/menu.c    ****     mdots[col][0] = 0;
 720              		.loc 1 308 19 is_stmt 0 view .LVU205
 721 002c 2246     		mov	r2, r4
 722 002e 05F5C871 		add	r1, r5, #400
 723              	.LBE67:
 305:src/menu.c    ****   //Clear previous menu
 724              		.loc 1 305 3 view .LVU206
 725 0032 2B46     		mov	r3, r5
 726              	.LVL59:
 727              	.L65:
 728              	.LBB68:
 729              		.loc 1 308 5 is_stmt 1 discriminator 3 view .LVU207
 730              		.loc 1 308 19 is_stmt 0 discriminator 3 view .LVU208
 731 0034 1A70     		strb	r2, [r3]
 309:src/menu.c    ****     mdots[col][1] = 0;
 732              		.loc 1 309 5 is_stmt 1 discriminator 3 view .LVU209
 733              		.loc 1 309 19 is_stmt 0 discriminator 3 view .LVU210
 734 0036 5A70     		strb	r2, [r3, #1]
 307:src/menu.c    ****     mdots[col][0] = 0;
 735              		.loc 1 307 32 is_stmt 1 discriminator 3 view .LVU211
 307:src/menu.c    ****     mdots[col][0] = 0;
 736              		.loc 1 307 21 discriminator 3 view .LVU212
 737 0038 0233     		adds	r3, r3, #2
 307:src/menu.c    ****     mdots[col][0] = 0;
 738              		.loc 1 307 3 is_stmt 0 discriminator 3 view .LVU213
 739 003a 9942     		cmp	r1, r3
 740 003c FAD1     		bne	.L65
 741 003e 354B     		ldr	r3, .L82+8
 742 0040 D022     		movs	r2, #208
 743 0042 02FB0636 		mla	r6, r2, r6, r3
 744              	.LVL60:
 307:src/menu.c    ****     mdots[col][0] = 0;
 745              		.loc 1 307 3 discriminator 3 view .LVU214
 746 0046 2036     		adds	r6, r6, #32
 307:src/menu.c    ****     mdots[col][0] = 0;
 747              		.loc 1 307 3 view .LVU215
 748 0048 0024     		movs	r4, #0
 749              	.LVL61:
 750              	.L66:
 307:src/menu.c    ****     mdots[col][0] = 0;
 751              		.loc 1 307 3 view .LVU216
ARM GAS  /tmp/ccBI4G28.s 			page 22


 752              	.LBE68:
 753              	.LBB69:
 310:src/menu.c    ****   }
 311:src/menu.c    **** 
 312:src/menu.c    ****   // Draw menu items
 313:src/menu.c    ****   // 
 314:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 315:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 316:src/menu.c    ****     // Unshifted first
 317:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small fo
 754              		.loc 1 317 5 is_stmt 1 view .LVU217
 755              		.loc 1 317 11 is_stmt 0 view .LVU218
 756 004a 0021     		movs	r1, #0
 757 004c 3046     		mov	r0, r6
 758 004e FFF7FEFF 		bl	pixel_length
 759              	.LVL62:
 318:src/menu.c    ****     /*
 319:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 320:src/menu.c    ****     */
 321:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 )
 760              		.loc 1 321 5 is_stmt 1 view .LVU219
 761              		.loc 1 321 87 is_stmt 0 view .LVU220
 762 0052 C0F12000 		rsb	r0, r0, #32
 763              	.LVL63:
 764              		.loc 1 321 93 view .LVU221
 765 0056 00EBD070 		add	r0, r0, r0, lsr #31
 766              		.loc 1 321 5 view .LVU222
 767 005a 04EB6001 		add	r1, r4, r0, asr #1
 768 005e 0022     		movs	r2, #0
 769 0060 3046     		mov	r0, r6
 770 0062 06F10807 		add	r7, r6, #8
 771 0066 FFF7FEFF 		bl	set_menu_label.constprop.0
 772              	.LVL64:
 322:src/menu.c    ****     // Now shifted ...	
 323:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small font
 773              		.loc 1 323 5 is_stmt 1 view .LVU223
 774              		.loc 1 323 11 is_stmt 0 view .LVU224
 775 006a 0021     		movs	r1, #0
 776 006c 3846     		mov	r0, r7
 777 006e FFF7FEFF 		bl	pixel_length
 778              	.LVL65:
 324:src/menu.c    ****     len = item*32 + (32-len)/2;
 779              		.loc 1 324 5 is_stmt 1 view .LVU225
 780              		.loc 1 324 24 is_stmt 0 view .LVU226
 781 0072 C0F12000 		rsb	r0, r0, #32
 782              	.LVL66:
 783              		.loc 1 324 29 view .LVU227
 784 0076 00EBD070 		add	r0, r0, r0, lsr #31
 785              	.LVL67:
 325:src/menu.c    ****     if (len<0) len = 0;
 786              		.loc 1 325 5 is_stmt 1 view .LVU228
 324:src/menu.c    ****     len = item*32 + (32-len)/2;
 787              		.loc 1 324 9 is_stmt 0 view .LVU229
 788 007a 04EB6001 		add	r1, r4, r0, asr #1
 789              	.LVL68:
 324:src/menu.c    ****     len = item*32 + (32-len)/2;
 790              		.loc 1 324 9 view .LVU230
ARM GAS  /tmp/ccBI4G28.s 			page 23


 791 007e C729     		cmp	r1, #199
 792 0080 A8BF     		it	ge
 793 0082 C721     		movge	r1, #199
 794              	.LVL69:
 326:src/menu.c    ****     if (len>199) len = 199;
 327:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 795              		.loc 1 327 5 is_stmt 1 view .LVU231
 796 0084 21EAE171 		bic	r1, r1, r1, asr #31
 797              	.LVL70:
 798              		.loc 1 327 5 is_stmt 0 view .LVU232
 799 0088 3846     		mov	r0, r7
 800 008a 2034     		adds	r4, r4, #32
 801 008c 0122     		movs	r2, #1
 802 008e FFF7FEFF 		bl	set_menu_label.constprop.0
 803              	.LVL71:
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 804              		.loc 1 314 32 is_stmt 1 view .LVU233
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 805              		.loc 1 314 22 view .LVU234
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 806              		.loc 1 314 3 is_stmt 0 view .LVU235
 807 0092 C02C     		cmp	r4, #192
 808 0094 06F12006 		add	r6, r6, #32
 809 0098 D7D1     		bne	.L66
 810 009a 1F4E     		ldr	r6, .L82+12
 811              	.LBE69:
 812              	.LBB70:
 813              	.LBB71:
 328:src/menu.c    ****   }
 329:src/menu.c    **** 
 330:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 331:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 332:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 333:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 334:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 814              		.loc 1 334 2 view .LVU236
 815 009c DFF86C90 		ldr	r9, .L82
 816 00a0 6FEA050A 		mvn	r10, r5
 817 00a4 06F5C87B 		add	fp, r6, #400
 818              	.LBE71:
 819              	.LBE70:
 820              	.LBB73:
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 821              		.loc 1 314 3 view .LVU237
 822 00a8 771E     		subs	r7, r6, #1
 823              	.LBE73:
 824              	.LBB74:
 825              	.LBB72:
 826              		.loc 1 334 2 view .LVU238
 827 00aa 4FF0FF08 		mov	r8, #255
 828              	.L67:
 829              	.LVL72:
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 830              		.loc 1 331 23 is_stmt 1 view .LVU239
 831 00ae 0AEB0605 		add	r5, r10, r6
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 832              		.loc 1 331 14 is_stmt 0 view .LVU240
ARM GAS  /tmp/ccBI4G28.s 			page 24


 833 00b2 0024     		movs	r4, #0
 834              	.LVL73:
 835              	.L70:
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 836              		.loc 1 332 7 is_stmt 1 view .LVU241
 837              		.loc 1 334 2 view .LVU242
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 838              		.loc 1 332 22 is_stmt 0 view .LVU243
 839 00b4 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 840              		.loc 1 332 40 view .LVU244
 841 00b8 2241     		asrs	r2, r2, r4
 842              		.loc 1 334 2 view .LVU245
 843 00ba A4EB8401 		sub	r1, r4, r4, lsl #2
 844 00be 0323     		movs	r3, #3
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 845              		.loc 1 332 10 view .LVU246
 846 00c0 12F0010F 		tst	r2, #1
 847              		.loc 1 334 2 view .LVU247
 848 00c4 01F1E901 		add	r1, r1, #233
 849 00c8 1A46     		mov	r2, r3
 850 00ca 2846     		mov	r0, r5
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 851              		.loc 1 332 10 view .LVU248
 852 00cc 02D0     		beq	.L68
 853              		.loc 1 334 2 view .LVU249
 854 00ce CDF80080 		str	r8, [sp]
 855 00d2 C847     		blx	r9
 856              	.LVL74:
 857              	.L68:
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 858              		.loc 1 335 7 is_stmt 1 view .LVU250
 336:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 337:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 859              		.loc 1 337 2 view .LVU251
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 860              		.loc 1 335 22 is_stmt 0 view .LVU252
 861 00d4 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 862              		.loc 1 335 40 view .LVU253
 863 00d6 2241     		asrs	r2, r2, r4
 864              		.loc 1 337 2 view .LVU254
 865 00d8 A4EB8401 		sub	r1, r4, r4, lsl #2
 866 00dc 0323     		movs	r3, #3
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 867              		.loc 1 335 10 view .LVU255
 868 00de 12F0010F 		tst	r2, #1
 869              		.loc 1 337 2 view .LVU256
 870 00e2 01F1D001 		add	r1, r1, #208
 871 00e6 1A46     		mov	r2, r3
 872 00e8 04F10104 		add	r4, r4, #1
 873              	.LVL75:
 874              		.loc 1 337 2 view .LVU257
 875 00ec 2846     		mov	r0, r5
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 876              		.loc 1 335 10 view .LVU258
 877 00ee 02D0     		beq	.L69
ARM GAS  /tmp/ccBI4G28.s 			page 25


 878              		.loc 1 337 2 view .LVU259
 879 00f0 CDF80080 		str	r8, [sp]
 880 00f4 C847     		blx	r9
 881              	.LVL76:
 882              	.L69:
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 883              		.loc 1 331 32 is_stmt 1 discriminator 2 view .LVU260
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 884              		.loc 1 331 23 discriminator 2 view .LVU261
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 885              		.loc 1 331 5 is_stmt 0 discriminator 2 view .LVU262
 886 00f6 062C     		cmp	r4, #6
 887 00f8 DCD1     		bne	.L70
 888              	.LBE72:
 330:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 889              		.loc 1 330 32 is_stmt 1 discriminator 2 view .LVU263
 330:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 890              		.loc 1 330 21 discriminator 2 view .LVU264
 891 00fa 0236     		adds	r6, r6, #2
 330:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 892              		.loc 1 330 3 is_stmt 0 discriminator 2 view .LVU265
 893 00fc B345     		cmp	fp, r6
 894 00fe 07F10207 		add	r7, r7, #2
 895 0102 D4D1     		bne	.L67
 896              	.LBE74:
 338:src/menu.c    ****     }
 339:src/menu.c    ****   }
 340:src/menu.c    **** }
 897              		.loc 1 340 1 view .LVU266
 898 0104 03B0     		add	sp, sp, #12
 899              		.cfi_def_cfa_offset 36
 900              		@ sp needed
 901 0106 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 902              	.LVL77:
 903              	.L83:
 904              		.loc 1 340 1 view .LVU267
 905 010a 00BF     		.align	2
 906              	.L82:
 907 010c 3D020008 		.word	134218301
 908 0110 00000000 		.word	.LANCHOR0
 909 0114 00000000 		.word	.LANCHOR3
 910 0118 01000000 		.word	.LANCHOR0+1
 911              		.cfi_endproc
 912              	.LFE9:
 914              		.section	.text.display_current_menu,"ax",%progbits
 915              		.align	1
 916              		.p2align 2,,3
 917              		.global	display_current_menu
 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu fpv4-sp-d16
 923              	display_current_menu:
 924              	.LFB5:
  21:src/menu.c    ****   display_menu (current_menu);
 925              		.loc 1 21 30 is_stmt 1 view -0
 926              		.cfi_startproc
ARM GAS  /tmp/ccBI4G28.s 			page 26


 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
  22:src/menu.c    **** }
 930              		.loc 1 22 3 view .LVU269
 931 0000 014B     		ldr	r3, .L85
 932 0002 1868     		ldr	r0, [r3]
 933 0004 FFF7FEBF 		b	display_menu
 934              	.LVL78:
 935              	.L86:
 936              		.align	2
 937              	.L85:
 938 0008 00000000 		.word	.LANCHOR1
 939              		.cfi_endproc
 940              	.LFE5:
 942              		.section	.text.shutdown,"ax",%progbits
 943              		.align	1
 944              		.p2align 2,,3
 945              		.global	shutdown
 946              		.syntax unified
 947              		.thumb
 948              		.thumb_func
 949              		.fpu fpv4-sp-d16
 951              	shutdown:
 952              	.LFB11:
 953              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
ARM GAS  /tmp/ccBI4G28.s 			page 27


  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** const uint8_t mid_menu[] = {
  46:src/console.c ****     MI_SYSTEM_ENTER,
  47:src/console.c ****     0 }; // Terminator
  48:src/console.c **** 
  49:src/console.c **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  50:src/console.c **** 
  51:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  52:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  53:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  54:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  55:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  56:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  57:src/console.c **** 
  58:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  59:src/console.c **** 
  60:src/console.c **** static struct _ndmap remap (const int c) {
  61:src/console.c **** 
  62:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  63:src/console.c **** 
  64:src/console.c **** #include "keytran.c"
  65:src/console.c **** 
  66:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  67:src/console.c **** 
  68:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  69:src/console.c **** 
  70:src/console.c ****   if (c == 44 ) {
  71:src/console.c ****     // Start click 
  72:src/console.c ****     start_buzzer_freq(4400); sys_delay(10); stop_buzzer();
  73:src/console.c ****     // Make screenshot - allow to report errors
  74:src/console.c ****     if ( create_screenshot(1) == 2 ) {
  75:src/console.c ****       // Was error just wait for confirmation
  76:src/console.c ****       wait_for_key_press();
  77:src/console.c ****     }
  78:src/console.c ****     // End click
  79:src/console.c ****     start_buzzer_freq(8800); sys_delay(10); stop_buzzer();
  80:src/console.c ****     return no_key;
  81:src/console.c ****   }
  82:src/console.c **** 
  83:src/console.c ****   
  84:src/console.c ****   if ( get_alpha_state() ) {
  85:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  86:src/console.c ****       switch (cur_shift()) { 
  87:src/console.c ****       case SHIFT_N:
  88:src/console.c **** 	return mapping_none[c]; // N -> F
ARM GAS  /tmp/ccBI4G28.s 			page 28


  89:src/console.c **** 	break;
  90:src/console.c ****       case SHIFT_F:
  91:src/console.c **** 	return mapping_fshift[c]; // F -> G
  92:src/console.c **** 	break;
  93:src/console.c ****       case SHIFT_G:
  94:src/console.c **** 	return h_shift; // G -> H
  95:src/console.c **** 	break;
  96:src/console.c ****       case SHIFT_H:
  97:src/console.c **** 	return h_shift; // H -> N
  98:src/console.c ****       default:
  99:src/console.c **** 	return no_change;
 100:src/console.c ****       }
 101:src/console.c ****     }
 102:src/console.c ****     return mapping_alpha [c];
 103:src/console.c ****   }
 104:src/console.c ****     
 105:src/console.c ****   switch (c) {
 106:src/console.c ****   case KEY_F1:
 107:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 109:src/console.c ****   case KEY_F2:
 110:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 112:src/console.c ****   case KEY_F3:
 113:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 115:src/console.c ****   case KEY_F4:
 116:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 118:src/console.c ****   case KEY_F5:
 119:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 121:src/console.c ****   case KEY_F6:
 122:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 124:src/console.c ****   }
 125:src/console.c ****   
 126:src/console.c ****   switch (cur_shift()) {
 127:src/console.c ****   case SHIFT_N:    
 128:src/console.c ****     return mapping_none[c];
 129:src/console.c ****     break;
 130:src/console.c ****   case SHIFT_F:
 131:src/console.c ****     return mapping_fshift[c];
 132:src/console.c ****     break;
 133:src/console.c ****   case SHIFT_G:
 134:src/console.c ****     return mapping_gshift[c];
 135:src/console.c ****     break;
 136:src/console.c ****   default:
 137:src/console.c ****     return no_change;
 138:src/console.c ****   }
 139:src/console.c **** }
 140:src/console.c **** 
 141:src/console.c **** #endif
 142:src/console.c **** 
 143:src/console.c **** void shutdown( void )
 144:src/console.c **** {
 954              		.loc 2 144 1 view -0
ARM GAS  /tmp/ccBI4G28.s 			page 29


 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 0
 957              		@ frame_needed = 0, uses_anonymous_args = 0
 145:src/console.c **** #ifndef DM42
 146:src/console.c ****   checksum_all();
 147:src/console.c ****   setuptty( 1 );
 148:src/console.c ****   save_statefile( NULL );
 149:src/console.c ****   exit( 0 );
 150:src/console.c **** #else
 151:src/console.c ****   save_ram_file(0);
 958              		.loc 2 151 3 view .LVU271
 144:src/console.c **** #ifndef DM42
 959              		.loc 2 144 1 is_stmt 0 view .LVU272
 960 0000 08B5     		push	{r3, lr}
 961              		.cfi_def_cfa_offset 8
 962              		.cfi_offset 3, -8
 963              		.cfi_offset 14, -4
 964              		.loc 2 151 3 view .LVU273
 965 0002 0020     		movs	r0, #0
 966 0004 FFF7FEFF 		bl	save_ram_file
 967              	.LVL79:
 152:src/console.c ****   SET_ST(STAT_PGM_END);
 968              		.loc 2 152 3 is_stmt 1 view .LVU274
 969 0008 024A     		ldr	r2, .L89
 970 000a 1368     		ldr	r3, [r2]
 971 000c 43F40073 		orr	r3, r3, #512
 972 0010 1360     		str	r3, [r2]
 153:src/console.c **** #endif
 154:src/console.c **** }
 973              		.loc 2 154 1 is_stmt 0 view .LVU275
 974 0012 08BD     		pop	{r3, pc}
 975              	.L90:
 976              		.align	2
 977              	.L89:
 978 0014 00200010 		.word	268443648
 979              		.cfi_endproc
 980              	.LFE11:
 982              		.section	.text.is_key_pressed,"ax",%progbits
 983              		.align	1
 984              		.p2align 2,,3
 985              		.global	is_key_pressed
 986              		.syntax unified
 987              		.thumb
 988              		.thumb_func
 989              		.fpu fpv4-sp-d16
 991              	is_key_pressed:
 992              	.LFB12:
 155:src/console.c **** 
 156:src/console.c **** 
 157:src/console.c **** /*
 158:src/console.c ****  *  Dummies
 159:src/console.c ****  */
 160:src/console.c **** int is_key_pressed(void) 
 161:src/console.c **** {
 993              		.loc 2 161 1 is_stmt 1 view -0
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccBI4G28.s 			page 30


 996              		@ frame_needed = 0, uses_anonymous_args = 0
 162:src/console.c **** #ifdef DM42
 163:src/console.c ****   return !key_empty();
 997              		.loc 2 163 3 view .LVU277
 161:src/console.c **** #ifdef DM42
 998              		.loc 2 161 1 is_stmt 0 view .LVU278
 999 0000 08B5     		push	{r3, lr}
 1000              		.cfi_def_cfa_offset 8
 1001              		.cfi_offset 3, -8
 1002              		.cfi_offset 14, -4
 1003              		.loc 2 163 11 view .LVU279
 1004 0002 034B     		ldr	r3, .L93
 1005 0004 9847     		blx	r3
 1006              	.LVL80:
 164:src/console.c **** #else
 165:src/console.c ****   return 0;
 166:src/console.c **** #endif
 167:src/console.c **** }
 1007              		.loc 2 167 1 view .LVU280
 1008 0006 B0FA80F0 		clz	r0, r0
 1009 000a 4009     		lsrs	r0, r0, #5
 1010 000c 08BD     		pop	{r3, pc}
 1011              	.L94:
 1012 000e 00BF     		.align	2
 1013              	.L93:
 1014 0010 7D030008 		.word	134218621
 1015              		.cfi_endproc
 1016              	.LFE12:
 1018              		.section	.text.get_key,"ax",%progbits
 1019              		.align	1
 1020              		.p2align 2,,3
 1021              		.global	get_key
 1022              		.syntax unified
 1023              		.thumb
 1024              		.thumb_func
 1025              		.fpu fpv4-sp-d16
 1027              	get_key:
 1028              	.LFB13:
 168:src/console.c **** 
 169:src/console.c **** int get_key(void)
 170:src/console.c **** {
 1029              		.loc 2 170 1 is_stmt 1 view -0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 0
 1032              		@ frame_needed = 0, uses_anonymous_args = 0
 1033              		@ link register save eliminated.
 171:src/console.c ****   #ifdef DM42
 172:src/console.c ****   return key_pop();
 1034              		.loc 2 172 3 view .LVU282
 1035              		.loc 2 172 10 is_stmt 0 view .LVU283
 1036 0000 004B     		ldr	r3, .L96
 1037 0002 1847     		bx	r3
 1038              	.LVL81:
 1039              	.L97:
 1040              		.align	2
 1041              	.L96:
 1042 0004 89030008 		.word	134218633
ARM GAS  /tmp/ccBI4G28.s 			page 31


 1043              		.cfi_endproc
 1044              	.LFE13:
 1046              		.section	.text.put_key,"ax",%progbits
 1047              		.align	1
 1048              		.p2align 2,,3
 1049              		.global	put_key
 1050              		.syntax unified
 1051              		.thumb
 1052              		.thumb_func
 1053              		.fpu fpv4-sp-d16
 1055              	put_key:
 1056              	.LVL82:
 1057              	.LFB14:
 173:src/console.c ****   #else
 174:src/console.c ****   return 0;
 175:src/console.c ****   #endif
 176:src/console.c **** }
 177:src/console.c **** 
 178:src/console.c **** int put_key( int k )
 179:src/console.c **** {
 1058              		.loc 2 179 1 is_stmt 1 view -0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062              		@ link register save eliminated.
 180:src/console.c ****   #ifdef DM42
 181:src/console.c ****   return key_push(k);
 1063              		.loc 2 181 3 view .LVU285
 1064              		.loc 2 181 10 is_stmt 0 view .LVU286
 1065 0000 004B     		ldr	r3, .L99
 1066 0002 1847     		bx	r3
 1067              	.LVL83:
 1068              	.L100:
 1069              		.loc 2 181 10 view .LVU287
 1070              		.align	2
 1071              	.L99:
 1072 0004 81030008 		.word	134218625
 1073              		.cfi_endproc
 1074              	.LFE14:
 1076              		.section	.text.shift_down,"ax",%progbits
 1077              		.align	1
 1078              		.p2align 2,,3
 1079              		.global	shift_down
 1080              		.syntax unified
 1081              		.thumb
 1082              		.thumb_func
 1083              		.fpu fpv4-sp-d16
 1085              	shift_down:
 1086              	.LFB15:
 182:src/console.c ****   #else
 183:src/console.c ****   return k;
 184:src/console.c ****   #endif
 185:src/console.c **** }
 186:src/console.c **** 
 187:src/console.c **** enum shifts shift_down(void)
 188:src/console.c **** {
 1087              		.loc 2 188 1 is_stmt 1 view -0
ARM GAS  /tmp/ccBI4G28.s 			page 32


 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 0
 1090              		@ frame_needed = 0, uses_anonymous_args = 0
 1091              		@ link register save eliminated.
 189:src/console.c **** 	return SHIFT_N;
 1092              		.loc 2 189 2 view .LVU289
 190:src/console.c **** }
 1093              		.loc 2 190 1 is_stmt 0 view .LVU290
 1094 0000 0020     		movs	r0, #0
 1095 0002 7047     		bx	lr
 1096              		.cfi_endproc
 1097              	.LFE15:
 1099              		.section	.text.start_key_timer,"ax",%progbits
 1100              		.align	1
 1101              		.p2align 2,,3
 1102              		.global	start_key_timer
 1103              		.syntax unified
 1104              		.thumb
 1105              		.thumb_func
 1106              		.fpu fpv4-sp-d16
 1108              	start_key_timer:
 1109              	.LFB16:
 191:src/console.c **** 
 192:src/console.c **** #ifndef DM42   // No serial operations for DM42
 193:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 194:src/console.c **** /*
 195:src/console.c ****  *  Open a COM port for transmission
 196:src/console.c ****  */
 197:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 198:src/console.c **** {
 199:src/console.c **** 	return 0;
 200:src/console.c **** }
 201:src/console.c **** 
 202:src/console.c **** 
 203:src/console.c **** /*
 204:src/console.c ****  *  Close the COM port after transmission is complete
 205:src/console.c ****  */
 206:src/console.c **** extern void close_port( void )
 207:src/console.c **** {
 208:src/console.c **** }
 209:src/console.c **** 
 210:src/console.c **** 
 211:src/console.c **** /*
 212:src/console.c ****  *  Output a single byte to the serial
 213:src/console.c ****  */
 214:src/console.c **** void put_byte( unsigned char byte )
 215:src/console.c **** {
 216:src/console.c **** 	report_err(ERR_PROG_BAD);
 217:src/console.c **** }
 218:src/console.c **** 
 219:src/console.c **** 
 220:src/console.c **** /*
 221:src/console.c ****  *  Force buffer flush
 222:src/console.c ****  */
 223:src/console.c **** void flush_comm( void )
 224:src/console.c **** {
 225:src/console.c **** }
ARM GAS  /tmp/ccBI4G28.s 			page 33


 226:src/console.c **** 
 227:src/console.c **** #endif
 228:src/console.c **** #endif
 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Main loop
 233:src/console.c ****  */
 234:src/console.c **** #ifdef DM42
 235:src/console.c **** void start_key_timer (void);
 236:src/console.c **** int keyticks (void);
 237:src/console.c **** 
 238:src/console.c **** static int start_ticks;
 239:src/console.c **** 
 240:src/console.c **** void start_key_timer() {
 1110              		.loc 2 240 24 is_stmt 1 view -0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 241:src/console.c ****     start_ticks = get_rtc_ticks();
 1114              		.loc 2 241 5 view .LVU292
 240:src/console.c ****     start_ticks = get_rtc_ticks();
 1115              		.loc 2 240 24 is_stmt 0 view .LVU293
 1116 0000 08B5     		push	{r3, lr}
 1117              		.cfi_def_cfa_offset 8
 1118              		.cfi_offset 3, -8
 1119              		.cfi_offset 14, -4
 1120              		.loc 2 241 19 view .LVU294
 1121 0002 024B     		ldr	r3, .L104
 1122 0004 9847     		blx	r3
 1123              	.LVL84:
 1124              		.loc 2 241 17 view .LVU295
 1125 0006 024B     		ldr	r3, .L104+4
 1126 0008 1860     		str	r0, [r3]
 242:src/console.c **** }
 1127              		.loc 2 242 1 view .LVU296
 1128 000a 08BD     		pop	{r3, pc}
 1129              	.L105:
 1130              		.align	2
 1131              	.L104:
 1132 000c B9040008 		.word	134218937
 1133 0010 00000000 		.word	.LANCHOR4
 1134              		.cfi_endproc
 1135              	.LFE16:
 1137              		.section	.text.keyticks,"ax",%progbits
 1138              		.align	1
 1139              		.p2align 2,,3
 1140              		.global	keyticks
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1144              		.fpu fpv4-sp-d16
 1146              	keyticks:
 1147              	.LFB17:
 243:src/console.c **** 
 244:src/console.c **** int keyticks () {
 1148              		.loc 2 244 17 is_stmt 1 view -0
ARM GAS  /tmp/ccBI4G28.s 			page 34


 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 0
 1151              		@ frame_needed = 0, uses_anonymous_args = 0
 245:src/console.c ****   int i;
 1152              		.loc 2 245 3 view .LVU298
 246:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1153              		.loc 2 246 3 view .LVU299
 244:src/console.c ****   int i;
 1154              		.loc 2 244 17 is_stmt 0 view .LVU300
 1155 0000 08B5     		push	{r3, lr}
 1156              		.cfi_def_cfa_offset 8
 1157              		.cfi_offset 3, -8
 1158              		.cfi_offset 14, -4
 1159              		.loc 2 246 8 view .LVU301
 1160 0002 054B     		ldr	r3, .L108
 1161 0004 9847     		blx	r3
 1162              	.LVL85:
 247:src/console.c ****   return i >> 8;
 1163              		.loc 2 247 3 is_stmt 1 view .LVU302
 246:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1164              		.loc 2 246 24 is_stmt 0 view .LVU303
 1165 0006 054B     		ldr	r3, .L108+4
 1166 0008 1B68     		ldr	r3, [r3]
 1167 000a C01A     		subs	r0, r0, r3
 1168              	.LVL86:
 246:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1169              		.loc 2 246 38 view .LVU304
 1170 000c 00EB8000 		add	r0, r0, r0, lsl #2
 248:src/console.c **** }
 1171              		.loc 2 248 1 view .LVU305
 1172 0010 40F3D710 		sbfx	r0, r0, #7, #24
 1173 0014 08BD     		pop	{r3, pc}
 1174              	.L109:
 1175 0016 00BF     		.align	2
 1176              	.L108:
 1177 0018 B9040008 		.word	134218937
 1178 001c 00000000 		.word	.LANCHOR4
 1179              		.cfi_endproc
 1180              	.LFE17:
 1182              		.section	.text.is_paused,"ax",%progbits
 1183              		.align	1
 1184              		.p2align 2,,3
 1185              		.global	is_paused
 1186              		.syntax unified
 1187              		.thumb
 1188              		.thumb_func
 1189              		.fpu fpv4-sp-d16
 1191              	is_paused:
 1192              	.LFB18:
 249:src/console.c **** 
 250:src/console.c **** int is_paused () {
 1193              		.loc 2 250 18 is_stmt 1 view -0
 1194              		.cfi_startproc
 1195              		@ args = 0, pretend = 0, frame = 0
 1196              		@ frame_needed = 0, uses_anonymous_args = 0
 1197              		@ link register save eliminated.
 251:src/console.c ****   return sys_timer_active(1);
ARM GAS  /tmp/ccBI4G28.s 			page 35


 1198              		.loc 2 251 3 view .LVU307
 1199              		.loc 2 251 10 is_stmt 0 view .LVU308
 1200 0000 014B     		ldr	r3, .L111
 1201 0002 0120     		movs	r0, #1
 1202 0004 1847     		bx	r3
 1203              	.LVL87:
 1204              	.L112:
 1205 0006 00BF     		.align	2
 1206              	.L111:
 1207 0008 FD030008 		.word	134218749
 1208              		.cfi_endproc
 1209              	.LFE18:
 1211              		.section	.text.start_pause,"ax",%progbits
 1212              		.align	1
 1213              		.p2align 2,,3
 1214              		.global	start_pause
 1215              		.syntax unified
 1216              		.thumb
 1217              		.thumb_func
 1218              		.fpu fpv4-sp-d16
 1220              	start_pause:
 1221              	.LVL88:
 1222              	.LFB19:
 252:src/console.c **** }
 253:src/console.c **** 
 254:src/console.c **** void start_pause (int i) {
 1223              		.loc 2 254 26 is_stmt 1 view -0
 1224              		.cfi_startproc
 1225              		@ args = 0, pretend = 0, frame = 0
 1226              		@ frame_needed = 0, uses_anonymous_args = 0
 1227              		@ link register save eliminated.
 255:src/console.c ****   if ( i >= 0 ) {
 1228              		.loc 2 255 3 view .LVU310
 1229              		.loc 2 255 6 is_stmt 0 view .LVU311
 1230 0000 0028     		cmp	r0, #0
 1231              		.loc 2 255 6 view .LVU312
 1232 0002 02DB     		blt	.L113
 256:src/console.c ****     Pause = i;
 1233              		.loc 2 256 5 is_stmt 1 view .LVU313
 1234              		.loc 2 256 11 is_stmt 0 view .LVU314
 1235 0004 014B     		ldr	r3, .L115
 1236 0006 C0B2     		uxtb	r0, r0
 1237              	.LVL89:
 1238              		.loc 2 256 11 view .LVU315
 1239 0008 1870     		strb	r0, [r3]
 257:src/console.c ****   }
 258:src/console.c ****   return;
 1240              		.loc 2 258 3 is_stmt 1 view .LVU316
 1241              	.L113:
 259:src/console.c **** }
 1242              		.loc 2 259 1 is_stmt 0 view .LVU317
 1243 000a 7047     		bx	lr
 1244              	.L116:
 1245              		.align	2
 1246              	.L115:
 1247 000c 00000000 		.word	Pause
 1248              		.cfi_endproc
ARM GAS  /tmp/ccBI4G28.s 			page 36


 1249              	.LFE19:
 1251              		.section	.text.init_graphics,"ax",%progbits
 1252              		.align	1
 1253              		.p2align 2,,3
 1254              		.global	init_graphics
 1255              		.syntax unified
 1256              		.thumb
 1257              		.thumb_func
 1258              		.fpu fpv4-sp-d16
 1260              	init_graphics:
 1261              	.LFB20:
 260:src/console.c ****     
 261:src/console.c ****   
 262:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 263:src/console.c **** char print_string[22];
 264:src/console.c **** int n_p = 0;
 265:src/console.c **** 
 266:src/console.c **** void init_graphics() {
 1262              		.loc 2 266 22 is_stmt 1 view -0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 0
 1265              		@ frame_needed = 0, uses_anonymous_args = 0
 267:src/console.c ****   lcd_switchFont(fReg,3); //Font number 3
 1266              		.loc 2 267 3 view .LVU319
 266:src/console.c ****   lcd_switchFont(fReg,3); //Font number 3
 1267              		.loc 2 266 22 is_stmt 0 view .LVU320
 1268 0000 10B5     		push	{r4, lr}
 1269              		.cfi_def_cfa_offset 8
 1270              		.cfi_offset 4, -8
 1271              		.cfi_offset 14, -4
 1272              		.loc 2 267 3 view .LVU321
 1273 0002 094C     		ldr	r4, .L119
 1274 0004 094B     		ldr	r3, .L119+4
 1275 0006 A06B     		ldr	r0, [r4, #56]
 1276 0008 0321     		movs	r1, #3
 1277 000a 9847     		blx	r3
 1278              	.LVL90:
 268:src/console.c ****   fReg->newln = 0;//no newline after printing
 1279              		.loc 2 268 3 is_stmt 1 view .LVU322
 1280 000c A36B     		ldr	r3, [r4, #56]
 269:src/console.c ****   fReg->fixed = 1;//fixed width characters
 270:src/console.c ****   strcpy (print_string,spaces);
 1281              		.loc 2 270 3 is_stmt 0 view .LVU323
 1282 000e 0849     		ldr	r1, .L119+8
 1283 0010 0848     		ldr	r0, .L119+12
 268:src/console.c ****   fReg->newln = 0;//no newline after printing
 1284              		.loc 2 268 15 view .LVU324
 1285 0012 0024     		movs	r4, #0
 269:src/console.c ****   fReg->fixed = 1;//fixed width characters
 1286              		.loc 2 269 15 view .LVU325
 1287 0014 0122     		movs	r2, #1
 268:src/console.c ****   fReg->newln = 0;//no newline after printing
 1288              		.loc 2 268 15 view .LVU326
 1289 0016 1C75     		strb	r4, [r3, #20]
 269:src/console.c ****   fReg->fixed = 1;//fixed width characters
 1290              		.loc 2 269 3 is_stmt 1 view .LVU327
 269:src/console.c ****   fReg->fixed = 1;//fixed width characters
ARM GAS  /tmp/ccBI4G28.s 			page 37


 1291              		.loc 2 269 15 is_stmt 0 view .LVU328
 1292 0018 1A74     		strb	r2, [r3, #16]
 1293              		.loc 2 270 3 is_stmt 1 view .LVU329
 1294 001a FFF7FEFF 		bl	strcpy
 1295              	.LVL91:
 271:src/console.c ****   //  lcd_clear_buf();//clear buffer
 272:src/console.c ****   lcd_refresh();
 1296              		.loc 2 272 3 view .LVU330
 273:src/console.c **** }
 1297              		.loc 2 273 1 is_stmt 0 view .LVU331
 1298 001e BDE81040 		pop	{r4, lr}
 1299              		.cfi_restore 14
 1300              		.cfi_restore 4
 1301              		.cfi_def_cfa_offset 0
 272:src/console.c **** }
 1302              		.loc 2 272 3 view .LVU332
 1303 0022 054B     		ldr	r3, .L119+16
 1304 0024 1847     		bx	r3	@ indirect register sibling call
 1305              	.LVL92:
 1306              	.L120:
 1307 0026 00BF     		.align	2
 1308              	.L119:
 1309 0028 00200010 		.word	268443648
 1310 002c 9D020008 		.word	134218397
 1311 0030 00000000 		.word	.LANCHOR5
 1312 0034 00000000 		.word	print_string
 1313 0038 31020008 		.word	134218289
 1314              		.cfi_endproc
 1315              	.LFE20:
 1317              		.section	.text.moveto,"ax",%progbits
 1318              		.align	1
 1319              		.p2align 2,,3
 1320              		.global	moveto
 1321              		.syntax unified
 1322              		.thumb
 1323              		.thumb_func
 1324              		.fpu fpv4-sp-d16
 1326              	moveto:
 1327              	.LVL93:
 1328              	.LFB21:
 274:src/console.c **** 
 275:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 1329              		.loc 2 275 30 is_stmt 1 view -0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 0
 1332              		@ frame_needed = 0, uses_anonymous_args = 0
 276:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1333              		.loc 2 276 3 view .LVU334
 275:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1334              		.loc 2 275 30 is_stmt 0 view .LVU335
 1335 0000 70B5     		push	{r4, r5, r6, lr}
 1336              		.cfi_def_cfa_offset 16
 1337              		.cfi_offset 4, -16
 1338              		.cfi_offset 5, -12
 1339              		.cfi_offset 6, -8
 1340              		.cfi_offset 14, -4
 1341              		.loc 2 276 3 view .LVU336
ARM GAS  /tmp/ccBI4G28.s 			page 38


 1342 0002 0A4D     		ldr	r5, .L123
 1343 0004 0A4B     		ldr	r3, .L123+4
 275:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1344              		.loc 2 275 30 view .LVU337
 1345 0006 0246     		mov	r2, r0
 1346 0008 0C46     		mov	r4, r1
 1347              		.loc 2 276 3 view .LVU338
 1348 000a A86B     		ldr	r0, [r5, #56]
 1349              	.LVL94:
 1350              		.loc 2 276 3 view .LVU339
 1351 000c 511E     		subs	r1, r2, #1
 1352              	.LVL95:
 1353              		.loc 2 276 3 view .LVU340
 1354 000e 9847     		blx	r3
 1355              	.LVL96:
 277:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1356              		.loc 2 277 3 is_stmt 1 view .LVU341
 1357 0010 A86B     		ldr	r0, [r5, #56]
 1358 0012 084B     		ldr	r3, .L123+8
 1359              		.loc 2 277 33 is_stmt 0 view .LVU342
 1360 0014 0168     		ldr	r1, [r0]
 1361              		.loc 2 277 3 view .LVU343
 1362 0016 B0F90620 		ldrsh	r2, [r0, #6]
 1363              		.loc 2 277 33 view .LVU344
 1364 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 1365              		.loc 2 277 43 view .LVU345
 1366 001c 013C     		subs	r4, r4, #1
 1367              	.LVL97:
 1368              		.loc 2 277 40 view .LVU346
 1369 001e 04FB01F1 		mul	r1, r4, r1
 1370              		.loc 2 277 3 view .LVU347
 1371 0022 1431     		adds	r1, r1, #20
 278:src/console.c **** }
 1372              		.loc 2 278 1 view .LVU348
 1373 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1374              		.cfi_restore 14
 1375              		.cfi_restore 6
 1376              		.cfi_restore 5
 1377              		.cfi_restore 4
 1378              		.cfi_def_cfa_offset 0
 1379              	.LVL98:
 277:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1380              		.loc 2 277 3 view .LVU349
 1381 0028 1847     		bx	r3	@ indirect register sibling call
 1382              	.LVL99:
 1383              	.L124:
 1384 002a 00BF     		.align	2
 1385              	.L123:
 1386 002c 00200010 		.word	268443648
 1387 0030 69020008 		.word	134218345
 1388 0034 6D020008 		.word	134218349
 1389              		.cfi_endproc
 1390              	.LFE21:
 1392              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 1393              		.align	2
 1394              	.LC0:
 1395 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
ARM GAS  /tmp/ccBI4G28.s 			page 39


 1395      673A2025 
 1395      34692C25 
 1395      346900
 1396              		.section	.text.print_debug,"ax",%progbits
 1397              		.align	1
 1398              		.p2align 2,,3
 1399              		.global	print_debug
 1400              		.syntax unified
 1401              		.thumb
 1402              		.thumb_func
 1403              		.fpu fpv4-sp-d16
 1405              	print_debug:
 1406              	.LVL100:
 1407              	.LFB22:
 279:src/console.c **** 
 280:src/console.c **** //print_debug(is_dot(RPN) ? 'X' : 'x');
 281:src/console.c **** 
 282:src/console.c **** //void print_debug (char i) {
 283:src/console.c **** //  if (n_p < 21) {
 284:src/console.c **** //    print_string[n_p] = i;
 285:src/console.c **** //    n_p++;
 286:src/console.c **** //  }
 287:src/console.c **** //}
 288:src/console.c **** 
 289:src/console.c **** void print_debug (int i, int j) {
 1408              		.loc 2 289 33 is_stmt 1 view -0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 8
 1411              		@ frame_needed = 0, uses_anonymous_args = 0
 290:src/console.c ****   strcpy( print_string, spaces );
 1412              		.loc 2 290 3 view .LVU351
 289:src/console.c ****   strcpy( print_string, spaces );
 1413              		.loc 2 289 33 is_stmt 0 view .LVU352
 1414 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1415              		.cfi_def_cfa_offset 24
 1416              		.cfi_offset 4, -24
 1417              		.cfi_offset 5, -20
 1418              		.cfi_offset 6, -16
 1419              		.cfi_offset 7, -12
 1420              		.cfi_offset 8, -8
 1421              		.cfi_offset 14, -4
 1422              		.loc 2 290 3 view .LVU353
 1423 0004 174C     		ldr	r4, .L127
 1424 0006 184F     		ldr	r7, .L127+4
 291:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 292:src/console.c ****   moveto (3, 1);
 293:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1425              		.loc 2 293 3 view .LVU354
 1426 0008 184E     		ldr	r6, .L127+8
 1427 000a 194D     		ldr	r5, .L127+12
 294:src/console.c ****   lcd_refresh();
 1428              		.loc 2 294 3 view .LVU355
 1429 000c DFF86C80 		ldr	r8, .L127+24
 289:src/console.c ****   strcpy( print_string, spaces );
 1430              		.loc 2 289 33 view .LVU356
 1431 0010 82B0     		sub	sp, sp, #8
 1432              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccBI4G28.s 			page 40


 289:src/console.c ****   strcpy( print_string, spaces );
 1433              		.loc 2 289 33 view .LVU357
 1434 0012 0190     		str	r0, [sp, #4]
 1435 0014 0091     		str	r1, [sp]
 290:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1436              		.loc 2 290 3 view .LVU358
 1437 0016 2046     		mov	r0, r4
 1438              	.LVL101:
 290:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1439              		.loc 2 290 3 view .LVU359
 1440 0018 3946     		mov	r1, r7
 1441              	.LVL102:
 290:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1442              		.loc 2 290 3 view .LVU360
 1443 001a FFF7FEFF 		bl	strcpy
 1444              	.LVL103:
 291:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1445              		.loc 2 291 3 is_stmt 1 view .LVU361
 1446 001e DDE90032 		ldrd	r3, r2, [sp]
 1447 0022 1449     		ldr	r1, .L127+16
 1448 0024 2046     		mov	r0, r4
 1449 0026 FFF7FEFF 		bl	sprintf
 1450              	.LVL104:
 292:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1451              		.loc 2 292 3 view .LVU362
 1452 002a 0121     		movs	r1, #1
 1453 002c 0320     		movs	r0, #3
 1454 002e FFF7FEFF 		bl	moveto
 1455              	.LVL105:
 293:src/console.c ****   lcd_refresh();
 1456              		.loc 2 293 3 view .LVU363
 1457 0032 2146     		mov	r1, r4
 1458 0034 B06B     		ldr	r0, [r6, #56]
 1459 0036 A847     		blx	r5
 1460              	.LVL106:
 1461              		.loc 2 294 3 view .LVU364
 1462 0038 C047     		blx	r8
 1463              	.LVL107:
 295:src/console.c ****   sys_delay (2500);
 1464              		.loc 2 295 3 view .LVU365
 1465 003a 0F4B     		ldr	r3, .L127+20
 1466 003c 40F6C410 		movw	r0, #2500
 1467 0040 9847     		blx	r3
 1468              	.LVL108:
 296:src/console.c ****   /* wait_for_key_press(); */
 297:src/console.c ****   //  key_pop_all();
 298:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 299:src/console.c ****   // key_pop_all();
 300:src/console.c ****   strcpy( print_string, spaces );
 1469              		.loc 2 300 3 view .LVU366
 1470 0042 3946     		mov	r1, r7
 1471 0044 2046     		mov	r0, r4
 1472 0046 FFF7FEFF 		bl	strcpy
 1473              	.LVL109:
 301:src/console.c ****   moveto (3, 1);
 1474              		.loc 2 301 3 view .LVU367
 1475 004a 0121     		movs	r1, #1
ARM GAS  /tmp/ccBI4G28.s 			page 41


 1476 004c 0320     		movs	r0, #3
 1477 004e FFF7FEFF 		bl	moveto
 1478              	.LVL110:
 302:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1479              		.loc 2 302 3 view .LVU368
 1480 0052 B06B     		ldr	r0, [r6, #56]
 1481 0054 2146     		mov	r1, r4
 1482 0056 A847     		blx	r5
 1483              	.LVL111:
 303:src/console.c ****   lcd_refresh();
 1484              		.loc 2 303 3 view .LVU369
 1485 0058 4346     		mov	r3, r8
 304:src/console.c ****   // while (key_empty()<=0);; // wait for release
 305:src/console.c ****   // key_pop_all();
 306:src/console.c **** }
 1486              		.loc 2 306 1 is_stmt 0 view .LVU370
 1487 005a 02B0     		add	sp, sp, #8
 1488              		.cfi_def_cfa_offset 24
 1489              	.LVL112:
 1490              		.loc 2 306 1 view .LVU371
 1491              		@ sp needed
 1492 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1493              		.cfi_restore 14
 1494              		.cfi_restore 8
 1495              		.cfi_restore 7
 1496              		.cfi_restore 6
 1497              		.cfi_restore 5
 1498              		.cfi_restore 4
 1499              		.cfi_def_cfa_offset 0
 1500              	.LVL113:
 303:src/console.c ****   lcd_refresh();
 1501              		.loc 2 303 3 view .LVU372
 1502 0060 1847     		bx	r3	@ indirect register sibling call
 1503              	.LVL114:
 1504              	.L128:
 1505 0062 00BF     		.align	2
 1506              	.L127:
 1507 0064 00000000 		.word	print_string
 1508 0068 00000000 		.word	.LANCHOR5
 1509 006c 00200010 		.word	268443648
 1510 0070 B1020008 		.word	134218417
 1511 0074 00000000 		.word	.LC0
 1512 0078 05040008 		.word	134218757
 1513 007c 31020008 		.word	134218289
 1514              		.cfi_endproc
 1515              	.LFE22:
 1517              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 1518              		.align	2
 1519              	.LC1:
 1520 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 1520      692C2531 
 1520      337300
 1521              		.section	.text.print_debug2,"ax",%progbits
 1522              		.align	1
 1523              		.p2align 2,,3
 1524              		.global	print_debug2
 1525              		.syntax unified
ARM GAS  /tmp/ccBI4G28.s 			page 42


 1526              		.thumb
 1527              		.thumb_func
 1528              		.fpu fpv4-sp-d16
 1530              	print_debug2:
 1531              	.LVL115:
 1532              	.LFB23:
 307:src/console.c **** 
 308:src/console.c **** void print_debug2 (int i, char* j) {
 1533              		.loc 2 308 36 is_stmt 1 view -0
 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 8
 1536              		@ frame_needed = 0, uses_anonymous_args = 0
 309:src/console.c ****   strcpy( print_string, spaces );
 1537              		.loc 2 309 3 view .LVU374
 308:src/console.c ****   strcpy( print_string, spaces );
 1538              		.loc 2 308 36 is_stmt 0 view .LVU375
 1539 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1540              		.cfi_def_cfa_offset 24
 1541              		.cfi_offset 4, -24
 1542              		.cfi_offset 5, -20
 1543              		.cfi_offset 6, -16
 1544              		.cfi_offset 7, -12
 1545              		.cfi_offset 8, -8
 1546              		.cfi_offset 14, -4
 1547              		.loc 2 309 3 view .LVU376
 1548 0004 174C     		ldr	r4, .L131
 1549 0006 184F     		ldr	r7, .L131+4
 310:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 311:src/console.c ****   moveto (3, 1);
 312:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1550              		.loc 2 312 3 view .LVU377
 1551 0008 184E     		ldr	r6, .L131+8
 1552 000a 194D     		ldr	r5, .L131+12
 313:src/console.c ****   lcd_refresh();
 1553              		.loc 2 313 3 view .LVU378
 1554 000c DFF86C80 		ldr	r8, .L131+24
 308:src/console.c ****   strcpy( print_string, spaces );
 1555              		.loc 2 308 36 view .LVU379
 1556 0010 82B0     		sub	sp, sp, #8
 1557              		.cfi_def_cfa_offset 32
 308:src/console.c ****   strcpy( print_string, spaces );
 1558              		.loc 2 308 36 view .LVU380
 1559 0012 0190     		str	r0, [sp, #4]
 1560 0014 0091     		str	r1, [sp]
 309:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1561              		.loc 2 309 3 view .LVU381
 1562 0016 2046     		mov	r0, r4
 1563              	.LVL116:
 309:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1564              		.loc 2 309 3 view .LVU382
 1565 0018 3946     		mov	r1, r7
 1566              	.LVL117:
 309:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1567              		.loc 2 309 3 view .LVU383
 1568 001a FFF7FEFF 		bl	strcpy
 1569              	.LVL118:
 310:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
ARM GAS  /tmp/ccBI4G28.s 			page 43


 1570              		.loc 2 310 3 is_stmt 1 view .LVU384
 1571 001e DDE90032 		ldrd	r3, r2, [sp]
 1572 0022 1449     		ldr	r1, .L131+16
 1573 0024 2046     		mov	r0, r4
 1574 0026 FFF7FEFF 		bl	sprintf
 1575              	.LVL119:
 311:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1576              		.loc 2 311 3 view .LVU385
 1577 002a 0121     		movs	r1, #1
 1578 002c 0320     		movs	r0, #3
 1579 002e FFF7FEFF 		bl	moveto
 1580              	.LVL120:
 312:src/console.c ****   lcd_refresh();
 1581              		.loc 2 312 3 view .LVU386
 1582 0032 2146     		mov	r1, r4
 1583 0034 B06B     		ldr	r0, [r6, #56]
 1584 0036 A847     		blx	r5
 1585              	.LVL121:
 1586              		.loc 2 313 3 view .LVU387
 1587 0038 C047     		blx	r8
 1588              	.LVL122:
 314:src/console.c ****   sys_delay (2500);
 1589              		.loc 2 314 3 view .LVU388
 1590 003a 0F4B     		ldr	r3, .L131+20
 1591 003c 40F6C410 		movw	r0, #2500
 1592 0040 9847     		blx	r3
 1593              	.LVL123:
 315:src/console.c ****   /* wait_for_key_press(); */
 316:src/console.c ****   //  key_pop_all();
 317:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 318:src/console.c ****   // key_pop_all();
 319:src/console.c ****   strcpy( print_string, spaces );
 1594              		.loc 2 319 3 view .LVU389
 1595 0042 3946     		mov	r1, r7
 1596 0044 2046     		mov	r0, r4
 1597 0046 FFF7FEFF 		bl	strcpy
 1598              	.LVL124:
 320:src/console.c ****   moveto (3, 1);
 1599              		.loc 2 320 3 view .LVU390
 1600 004a 0121     		movs	r1, #1
 1601 004c 0320     		movs	r0, #3
 1602 004e FFF7FEFF 		bl	moveto
 1603              	.LVL125:
 321:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1604              		.loc 2 321 3 view .LVU391
 1605 0052 B06B     		ldr	r0, [r6, #56]
 1606 0054 2146     		mov	r1, r4
 1607 0056 A847     		blx	r5
 1608              	.LVL126:
 322:src/console.c ****   lcd_refresh();
 1609              		.loc 2 322 3 view .LVU392
 1610 0058 4346     		mov	r3, r8
 323:src/console.c ****   // while (key_empty()<=0);; // wait for release
 324:src/console.c ****   // key_pop_all();
 325:src/console.c **** }
 1611              		.loc 2 325 1 is_stmt 0 view .LVU393
 1612 005a 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccBI4G28.s 			page 44


 1613              		.cfi_def_cfa_offset 24
 1614              	.LVL127:
 1615              		.loc 2 325 1 view .LVU394
 1616              		@ sp needed
 1617 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1618              		.cfi_restore 14
 1619              		.cfi_restore 8
 1620              		.cfi_restore 7
 1621              		.cfi_restore 6
 1622              		.cfi_restore 5
 1623              		.cfi_restore 4
 1624              		.cfi_def_cfa_offset 0
 1625              	.LVL128:
 322:src/console.c ****   lcd_refresh();
 1626              		.loc 2 322 3 view .LVU395
 1627 0060 1847     		bx	r3	@ indirect register sibling call
 1628              	.LVL129:
 1629              	.L132:
 1630 0062 00BF     		.align	2
 1631              	.L131:
 1632 0064 00000000 		.word	print_string
 1633 0068 00000000 		.word	.LANCHOR5
 1634 006c 00200010 		.word	268443648
 1635 0070 B1020008 		.word	134218417
 1636 0074 00000000 		.word	.LC1
 1637 0078 05040008 		.word	134218757
 1638 007c 31020008 		.word	134218289
 1639              		.cfi_endproc
 1640              	.LFE23:
 1642              		.section	.text.do_now,"ax",%progbits
 1643              		.align	1
 1644              		.p2align 2,,3
 1645              		.global	do_now
 1646              		.syntax unified
 1647              		.thumb
 1648              		.thumb_func
 1649              		.fpu fpv4-sp-d16
 1651              	do_now:
 1652              	.LVL130:
 1653              	.LFB24:
 326:src/console.c **** 
 327:src/console.c **** void do_now (int key, int shift) {
 1654              		.loc 2 327 34 is_stmt 1 view -0
 1655              		.cfi_startproc
 1656              		@ args = 0, pretend = 0, frame = 8
 1657              		@ frame_needed = 0, uses_anonymous_args = 0
 1658              		@ link register save eliminated.
 328:src/console.c ****   struct _ndmap temp;
 1659              		.loc 2 328 3 view .LVU397
 329:src/console.c ****   temp.key_34s = key;
 1660              		.loc 2 329 3 view .LVU398
 327:src/console.c ****   struct _ndmap temp;
 1661              		.loc 2 327 34 is_stmt 0 view .LVU399
 1662 0000 82B0     		sub	sp, sp, #8
 1663              		.cfi_def_cfa_offset 8
 330:src/console.c ****   temp.shift = shift;
 331:src/console.c ****   process_keycode_with_shift (temp);
ARM GAS  /tmp/ccBI4G28.s 			page 45


 1664              		.loc 2 331 3 view .LVU400
 1665 0002 02AB     		add	r3, sp, #8
 329:src/console.c ****   temp.shift = shift;
 1666              		.loc 2 329 16 view .LVU401
 1667 0004 8DF80000 		strb	r0, [sp]
 330:src/console.c ****   temp.shift = shift;
 1668              		.loc 2 330 3 is_stmt 1 view .LVU402
 330:src/console.c ****   temp.shift = shift;
 1669              		.loc 2 330 14 is_stmt 0 view .LVU403
 1670 0008 0191     		str	r1, [sp, #4]
 1671              		.loc 2 331 3 is_stmt 1 view .LVU404
 1672 000a 13E90300 		ldmdb	r3, {r0, r1}
 1673              	.LVL131:
 332:src/console.c **** }
 1674              		.loc 2 332 1 is_stmt 0 view .LVU405
 1675 000e 02B0     		add	sp, sp, #8
 1676              		.cfi_def_cfa_offset 0
 1677              		@ sp needed
 331:src/console.c **** }
 1678              		.loc 2 331 3 view .LVU406
 1679 0010 FFF7FEBF 		b	process_keycode_with_shift
 1680              	.LVL132:
 331:src/console.c **** }
 1681              		.loc 2 331 3 view .LVU407
 1682              		.cfi_endproc
 1683              	.LFE24:
 1685              		.section	.text.do_multi,"ax",%progbits
 1686              		.align	1
 1687              		.p2align 2,,3
 1688              		.global	do_multi
 1689              		.syntax unified
 1690              		.thumb
 1691              		.thumb_func
 1692              		.fpu fpv4-sp-d16
 1694              	do_multi:
 1695              	.LVL133:
 1696              	.LFB25:
 333:src/console.c **** 
 334:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 1697              		.loc 2 334 42 is_stmt 1 view -0
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 16
 1700              		@ frame_needed = 0, uses_anonymous_args = 0
 1701              		.loc 2 334 42 is_stmt 0 view .LVU409
 1702 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1703              		.cfi_def_cfa_offset 24
 1704              		.cfi_offset 4, -24
 1705              		.cfi_offset 5, -20
 1706              		.cfi_offset 6, -16
 1707              		.cfi_offset 7, -12
 1708              		.cfi_offset 8, -8
 1709              		.cfi_offset 14, -4
 1710 0004 84B0     		sub	sp, sp, #16
 1711              		.cfi_def_cfa_offset 40
 1712              	.LVL134:
 335:src/console.c ****   switch(r.shift) {
 1713              		.loc 2 335 3 is_stmt 1 view .LVU410
ARM GAS  /tmp/ccBI4G28.s 			page 46


 334:src/console.c ****   switch(r.shift) {
 1714              		.loc 2 334 42 is_stmt 0 view .LVU411
 1715 0006 6C46     		mov	r4, sp
 1716 0008 531E     		subs	r3, r2, #1
 1717 000a 84E80600 		stm	r4, {r1, r2}
 1718              	.LVL135:
 334:src/console.c ****   switch(r.shift) {
 1719              		.loc 2 334 42 view .LVU412
 1720 000e 0546     		mov	r5, r0
 1721 0010 092B     		cmp	r3, #9
 1722 0012 7CD8     		bhi	.L136
 1723 0014 DFE803F0 		tbb	[pc, r3]
 1724              	.L138:
 1725 0018 18       		.byte	(.L146-.L138)/2
 1726 0019 36       		.byte	(.L145-.L138)/2
 1727 001a 40       		.byte	(.L144-.L138)/2
 1728 001b 4A       		.byte	(.L143-.L138)/2
 1729 001c 54       		.byte	(.L142-.L138)/2
 1730 001d 5E       		.byte	(.L141-.L138)/2
 1731 001e 68       		.byte	(.L140-.L138)/2
 1732 001f 72       		.byte	(.L139-.L138)/2
 1733 0020 7B       		.byte	(.L136-.L138)/2
 1734 0021 05       		.byte	(.L137-.L138)/2
 1735              		.p2align 1
 1736              	.L137:
 336:src/console.c ****   case LASTX: // Last x via RCL L
 337:src/console.c ****     do_now (K11, 0); // RCL
 338:src/console.c ****     do_now (K_RELEASE,0); // release
 339:src/console.c ****     do_now (K15,0); // TAN key
 340:src/console.c ****     r.key_34s = K_RELEASE;
 341:src/console.c ****     r.shift = 0; // set up for release;
 342:src/console.c ****     break;
 343:src/console.c ****   case ONSTO: // flash_backup()
 344:src/console.c ****     flash_backup(OP_SAVE);
 345:src/console.c ****     r = no_key;
 346:src/console.c ****     break;
 347:src/console.c ****   case ONRCL: // flash_restore()
 348:src/console.c ****     flash_restore(OP_LOAD);
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case WRLIB: // save library file
 352:src/console.c ****     save_lib_file(1);
 353:src/console.c ****     r = no_key;
 354:src/console.c ****     break;
 355:src/console.c ****   case LLIB: // load library file
 356:src/console.c ****     load_lib_file(1);
 357:src/console.c ****     r = no_key;
 358:src/console.c ****     break;
 359:src/console.c ****   case WRTST: // save state file
 360:src/console.c ****     save_ram_file(1);
 361:src/console.c ****     r = no_key;
 362:src/console.c ****     break;
 363:src/console.c ****   case LDST:
 364:src/console.c ****     load_ram_file(1);
 365:src/console.c ****     r = no_key;
 366:src/console.c ****     break;
 367:src/console.c ****   case LDPRG:
ARM GAS  /tmp/ccBI4G28.s 			page 47


 368:src/console.c ****     load_prog_file();
 369:src/console.c ****     r = no_key;
 370:src/console.c ****     break;
 371:src/console.c ****   case SVPRG:
 372:src/console.c ****     save_prog_file();
 1737              		.loc 2 372 5 is_stmt 1 view .LVU413
 1738 0022 FFF7FEFF 		bl	save_prog_file
 1739              	.LVL136:
 373:src/console.c ****     r = no_key;
 1740              		.loc 2 373 5 view .LVU414
 1741              		.loc 2 373 7 is_stmt 0 view .LVU415
 1742 0026 3D4B     		ldr	r3, .L149
 1743 0028 93E80300 		ldm	r3, {r0, r1}
 1744 002c 84E80300 		stm	r4, {r0, r1}
 1745 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1746              	.LVL137:
 374:src/console.c ****     break;
 1747              		.loc 2 374 5 is_stmt 1 view .LVU416
 1748              	.L147:
 375:src/console.c ****   default:
 376:src/console.c ****     r = no_key;
 377:src/console.c ****   }
 378:src/console.c ****   return r;
 1749              		.loc 2 378 3 view .LVU417
 1750              		.loc 2 378 10 is_stmt 0 view .LVU418
 1751 0032 8DF80030 		strb	r3, [sp]
 1752 0036 0191     		str	r1, [sp, #4]
 1753 0038 94E80300 		ldm	r4, {r0, r1}
 1754              	.LVL138:
 1755              		.loc 2 378 10 view .LVU419
 1756 003c 85E80300 		stm	r5, {r0, r1}
 379:src/console.c **** }
 1757              		.loc 2 379 1 view .LVU420
 1758 0040 2846     		mov	r0, r5
 1759 0042 04B0     		add	sp, sp, #16
 1760              		.cfi_remember_state
 1761              		.cfi_def_cfa_offset 24
 1762              		@ sp needed
 1763 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1764              	.LVL139:
 1765              	.L146:
 1766              		.cfi_restore_state
 337:src/console.c ****     do_now (K_RELEASE,0); // release
 1767              		.loc 2 337 5 is_stmt 1 view .LVU421
 1768              	.LBB75:
 1769              	.LBI75:
 327:src/console.c ****   struct _ndmap temp;
 1770              		.loc 2 327 6 view .LVU422
 1771              	.LBB76:
 328:src/console.c ****   temp.key_34s = key;
 1772              		.loc 2 328 3 view .LVU423
 329:src/console.c ****   temp.shift = shift;
 1773              		.loc 2 329 3 view .LVU424
 329:src/console.c ****   temp.shift = shift;
 1774              		.loc 2 329 16 is_stmt 0 view .LVU425
 1775 0048 0723     		movs	r3, #7
 330:src/console.c ****   process_keycode_with_shift (temp);
ARM GAS  /tmp/ccBI4G28.s 			page 48


 1776              		.loc 2 330 14 view .LVU426
 1777 004a 0026     		movs	r6, #0
 329:src/console.c ****   temp.shift = shift;
 1778              		.loc 2 329 16 view .LVU427
 1779 004c 8DF80830 		strb	r3, [sp, #8]
 330:src/console.c ****   process_keycode_with_shift (temp);
 1780              		.loc 2 330 3 is_stmt 1 view .LVU428
 331:src/console.c **** }
 1781              		.loc 2 331 3 is_stmt 0 view .LVU429
 1782 0050 0DF10808 		add	r8, sp, #8
 330:src/console.c ****   process_keycode_with_shift (temp);
 1783              		.loc 2 330 14 view .LVU430
 1784 0054 0396     		str	r6, [sp, #12]
 331:src/console.c **** }
 1785              		.loc 2 331 3 is_stmt 1 view .LVU431
 1786 0056 98E80300 		ldm	r8, {r0, r1}
 1787              	.LVL140:
 331:src/console.c **** }
 1788              		.loc 2 331 3 is_stmt 0 view .LVU432
 1789              	.LBE76:
 1790              	.LBE75:
 1791              	.LBB78:
 1792              	.LBB79:
 329:src/console.c ****   temp.shift = shift;
 1793              		.loc 2 329 16 view .LVU433
 1794 005a 6327     		movs	r7, #99
 1795              	.LBE79:
 1796              	.LBE78:
 1797              	.LBB81:
 1798              	.LBB77:
 331:src/console.c **** }
 1799              		.loc 2 331 3 view .LVU434
 1800 005c FFF7FEFF 		bl	process_keycode_with_shift
 1801              	.LVL141:
 331:src/console.c **** }
 1802              		.loc 2 331 3 view .LVU435
 1803              	.LBE77:
 1804              	.LBE81:
 338:src/console.c ****     do_now (K15,0); // TAN key
 1805              		.loc 2 338 5 is_stmt 1 view .LVU436
 1806              	.LBB82:
 1807              	.LBI78:
 327:src/console.c ****   struct _ndmap temp;
 1808              		.loc 2 327 6 view .LVU437
 1809              	.LBB80:
 328:src/console.c ****   temp.key_34s = key;
 1810              		.loc 2 328 3 view .LVU438
 329:src/console.c ****   temp.shift = shift;
 1811              		.loc 2 329 3 view .LVU439
 330:src/console.c ****   process_keycode_with_shift (temp);
 1812              		.loc 2 330 14 is_stmt 0 view .LVU440
 1813 0060 0396     		str	r6, [sp, #12]
 329:src/console.c ****   temp.shift = shift;
 1814              		.loc 2 329 16 view .LVU441
 1815 0062 8DF80870 		strb	r7, [sp, #8]
 330:src/console.c ****   process_keycode_with_shift (temp);
 1816              		.loc 2 330 3 is_stmt 1 view .LVU442
ARM GAS  /tmp/ccBI4G28.s 			page 49


 331:src/console.c **** }
 1817              		.loc 2 331 3 view .LVU443
 1818 0066 98E80300 		ldm	r8, {r0, r1}
 1819 006a FFF7FEFF 		bl	process_keycode_with_shift
 1820              	.LVL142:
 331:src/console.c **** }
 1821              		.loc 2 331 3 is_stmt 0 view .LVU444
 1822              	.LBE80:
 1823              	.LBE82:
 339:src/console.c ****     r.key_34s = K_RELEASE;
 1824              		.loc 2 339 5 is_stmt 1 view .LVU445
 1825              	.LBB83:
 1826              	.LBI83:
 327:src/console.c ****   struct _ndmap temp;
 1827              		.loc 2 327 6 view .LVU446
 1828              	.LBB84:
 328:src/console.c ****   temp.key_34s = key;
 1829              		.loc 2 328 3 view .LVU447
 329:src/console.c ****   temp.shift = shift;
 1830              		.loc 2 329 3 view .LVU448
 329:src/console.c ****   temp.shift = shift;
 1831              		.loc 2 329 16 is_stmt 0 view .LVU449
 1832 006e 0B23     		movs	r3, #11
 1833 0070 8DF80830 		strb	r3, [sp, #8]
 330:src/console.c ****   process_keycode_with_shift (temp);
 1834              		.loc 2 330 3 is_stmt 1 view .LVU450
 331:src/console.c **** }
 1835              		.loc 2 331 3 view .LVU451
 330:src/console.c ****   process_keycode_with_shift (temp);
 1836              		.loc 2 330 14 is_stmt 0 view .LVU452
 1837 0074 0396     		str	r6, [sp, #12]
 331:src/console.c **** }
 1838              		.loc 2 331 3 view .LVU453
 1839 0076 98E80300 		ldm	r8, {r0, r1}
 1840 007a FFF7FEFF 		bl	process_keycode_with_shift
 1841              	.LVL143:
 331:src/console.c **** }
 1842              		.loc 2 331 3 view .LVU454
 1843              	.LBE84:
 1844              	.LBE83:
 340:src/console.c ****     r.shift = 0; // set up for release;
 1845              		.loc 2 340 5 is_stmt 1 view .LVU455
 341:src/console.c ****     break;
 1846              		.loc 2 341 5 view .LVU456
 342:src/console.c ****   case ONSTO: // flash_backup()
 1847              		.loc 2 342 5 view .LVU457
 341:src/console.c ****     break;
 1848              		.loc 2 341 13 is_stmt 0 view .LVU458
 1849 007e 3146     		mov	r1, r6
 340:src/console.c ****     r.shift = 0; // set up for release;
 1850              		.loc 2 340 15 view .LVU459
 1851 0080 3B46     		mov	r3, r7
 342:src/console.c ****   case ONSTO: // flash_backup()
 1852              		.loc 2 342 5 view .LVU460
 1853 0082 D6E7     		b	.L147
 1854              	.LVL144:
 1855              	.L145:
ARM GAS  /tmp/ccBI4G28.s 			page 50


 344:src/console.c ****     r = no_key;
 1856              		.loc 2 344 5 is_stmt 1 view .LVU461
 1857 0084 AD20     		movs	r0, #173
 1858              	.LVL145:
 344:src/console.c ****     r = no_key;
 1859              		.loc 2 344 5 is_stmt 0 view .LVU462
 1860 0086 FFF7FEFF 		bl	flash_backup
 1861              	.LVL146:
 345:src/console.c ****     break;
 1862              		.loc 2 345 5 is_stmt 1 view .LVU463
 345:src/console.c ****     break;
 1863              		.loc 2 345 7 is_stmt 0 view .LVU464
 1864 008a 244B     		ldr	r3, .L149
 1865 008c 93E80300 		ldm	r3, {r0, r1}
 1866 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1867              	.LVL147:
 346:src/console.c ****   case ONRCL: // flash_restore()
 1868              		.loc 2 346 5 is_stmt 1 view .LVU465
 345:src/console.c ****     break;
 1869              		.loc 2 345 7 is_stmt 0 view .LVU466
 1870 0092 84E80300 		stm	r4, {r0, r1}
 346:src/console.c ****   case ONRCL: // flash_restore()
 1871              		.loc 2 346 5 view .LVU467
 1872 0096 CCE7     		b	.L147
 1873              	.LVL148:
 1874              	.L144:
 348:src/console.c ****     r = no_key;
 1875              		.loc 2 348 5 is_stmt 1 view .LVU468
 1876 0098 AE20     		movs	r0, #174
 1877              	.LVL149:
 348:src/console.c ****     r = no_key;
 1878              		.loc 2 348 5 is_stmt 0 view .LVU469
 1879 009a FFF7FEFF 		bl	flash_restore
 1880              	.LVL150:
 349:src/console.c ****     break;
 1881              		.loc 2 349 5 is_stmt 1 view .LVU470
 349:src/console.c ****     break;
 1882              		.loc 2 349 7 is_stmt 0 view .LVU471
 1883 009e 1F4B     		ldr	r3, .L149
 1884 00a0 93E80300 		ldm	r3, {r0, r1}
 1885 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1886              	.LVL151:
 350:src/console.c ****   case WRLIB: // save library file
 1887              		.loc 2 350 5 is_stmt 1 view .LVU472
 349:src/console.c ****     break;
 1888              		.loc 2 349 7 is_stmt 0 view .LVU473
 1889 00a6 84E80300 		stm	r4, {r0, r1}
 350:src/console.c ****   case WRLIB: // save library file
 1890              		.loc 2 350 5 view .LVU474
 1891 00aa C2E7     		b	.L147
 1892              	.LVL152:
 1893              	.L143:
 352:src/console.c ****     r = no_key;
 1894              		.loc 2 352 5 is_stmt 1 view .LVU475
 1895 00ac 0120     		movs	r0, #1
 1896              	.LVL153:
 352:src/console.c ****     r = no_key;
ARM GAS  /tmp/ccBI4G28.s 			page 51


 1897              		.loc 2 352 5 is_stmt 0 view .LVU476
 1898 00ae FFF7FEFF 		bl	save_lib_file
 1899              	.LVL154:
 353:src/console.c ****     break;
 1900              		.loc 2 353 5 is_stmt 1 view .LVU477
 353:src/console.c ****     break;
 1901              		.loc 2 353 7 is_stmt 0 view .LVU478
 1902 00b2 1A4B     		ldr	r3, .L149
 1903 00b4 93E80300 		ldm	r3, {r0, r1}
 1904 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1905              	.LVL155:
 354:src/console.c ****   case LLIB: // load library file
 1906              		.loc 2 354 5 is_stmt 1 view .LVU479
 353:src/console.c ****     break;
 1907              		.loc 2 353 7 is_stmt 0 view .LVU480
 1908 00ba 84E80300 		stm	r4, {r0, r1}
 354:src/console.c ****   case LLIB: // load library file
 1909              		.loc 2 354 5 view .LVU481
 1910 00be B8E7     		b	.L147
 1911              	.LVL156:
 1912              	.L142:
 356:src/console.c ****     r = no_key;
 1913              		.loc 2 356 5 is_stmt 1 view .LVU482
 1914 00c0 0120     		movs	r0, #1
 1915              	.LVL157:
 356:src/console.c ****     r = no_key;
 1916              		.loc 2 356 5 is_stmt 0 view .LVU483
 1917 00c2 FFF7FEFF 		bl	load_lib_file
 1918              	.LVL158:
 357:src/console.c ****     break;
 1919              		.loc 2 357 5 is_stmt 1 view .LVU484
 357:src/console.c ****     break;
 1920              		.loc 2 357 7 is_stmt 0 view .LVU485
 1921 00c6 154B     		ldr	r3, .L149
 1922 00c8 93E80300 		ldm	r3, {r0, r1}
 1923 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1924              	.LVL159:
 358:src/console.c ****   case WRTST: // save state file
 1925              		.loc 2 358 5 is_stmt 1 view .LVU486
 357:src/console.c ****     break;
 1926              		.loc 2 357 7 is_stmt 0 view .LVU487
 1927 00ce 84E80300 		stm	r4, {r0, r1}
 358:src/console.c ****   case WRTST: // save state file
 1928              		.loc 2 358 5 view .LVU488
 1929 00d2 AEE7     		b	.L147
 1930              	.LVL160:
 1931              	.L141:
 360:src/console.c ****     r = no_key;
 1932              		.loc 2 360 5 is_stmt 1 view .LVU489
 1933 00d4 0120     		movs	r0, #1
 1934              	.LVL161:
 360:src/console.c ****     r = no_key;
 1935              		.loc 2 360 5 is_stmt 0 view .LVU490
 1936 00d6 FFF7FEFF 		bl	save_ram_file
 1937              	.LVL162:
 361:src/console.c ****     break;
 1938              		.loc 2 361 5 is_stmt 1 view .LVU491
ARM GAS  /tmp/ccBI4G28.s 			page 52


 361:src/console.c ****     break;
 1939              		.loc 2 361 7 is_stmt 0 view .LVU492
 1940 00da 104B     		ldr	r3, .L149
 1941 00dc 93E80300 		ldm	r3, {r0, r1}
 1942 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1943              	.LVL163:
 362:src/console.c ****   case LDST:
 1944              		.loc 2 362 5 is_stmt 1 view .LVU493
 361:src/console.c ****     break;
 1945              		.loc 2 361 7 is_stmt 0 view .LVU494
 1946 00e2 84E80300 		stm	r4, {r0, r1}
 362:src/console.c ****   case LDST:
 1947              		.loc 2 362 5 view .LVU495
 1948 00e6 A4E7     		b	.L147
 1949              	.LVL164:
 1950              	.L140:
 364:src/console.c ****     r = no_key;
 1951              		.loc 2 364 5 is_stmt 1 view .LVU496
 1952 00e8 0120     		movs	r0, #1
 1953              	.LVL165:
 364:src/console.c ****     r = no_key;
 1954              		.loc 2 364 5 is_stmt 0 view .LVU497
 1955 00ea FFF7FEFF 		bl	load_ram_file
 1956              	.LVL166:
 365:src/console.c ****     break;
 1957              		.loc 2 365 5 is_stmt 1 view .LVU498
 365:src/console.c ****     break;
 1958              		.loc 2 365 7 is_stmt 0 view .LVU499
 1959 00ee 0B4B     		ldr	r3, .L149
 1960 00f0 93E80300 		ldm	r3, {r0, r1}
 1961 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1962              	.LVL167:
 366:src/console.c ****   case LDPRG:
 1963              		.loc 2 366 5 is_stmt 1 view .LVU500
 365:src/console.c ****     break;
 1964              		.loc 2 365 7 is_stmt 0 view .LVU501
 1965 00f6 84E80300 		stm	r4, {r0, r1}
 366:src/console.c ****   case LDPRG:
 1966              		.loc 2 366 5 view .LVU502
 1967 00fa 9AE7     		b	.L147
 1968              	.LVL168:
 1969              	.L139:
 368:src/console.c ****     r = no_key;
 1970              		.loc 2 368 5 is_stmt 1 view .LVU503
 1971 00fc FFF7FEFF 		bl	load_prog_file
 1972              	.LVL169:
 369:src/console.c ****     break;
 1973              		.loc 2 369 5 view .LVU504
 369:src/console.c ****     break;
 1974              		.loc 2 369 7 is_stmt 0 view .LVU505
 1975 0100 064B     		ldr	r3, .L149
 1976 0102 93E80300 		ldm	r3, {r0, r1}
 1977 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1978              	.LVL170:
 370:src/console.c ****   case SVPRG:
 1979              		.loc 2 370 5 is_stmt 1 view .LVU506
 369:src/console.c ****     break;
ARM GAS  /tmp/ccBI4G28.s 			page 53


 1980              		.loc 2 369 7 is_stmt 0 view .LVU507
 1981 0108 84E80300 		stm	r4, {r0, r1}
 370:src/console.c ****   case SVPRG:
 1982              		.loc 2 370 5 view .LVU508
 1983 010c 91E7     		b	.L147
 1984              	.LVL171:
 1985              	.L136:
 376:src/console.c ****   }
 1986              		.loc 2 376 5 is_stmt 1 view .LVU509
 376:src/console.c ****   }
 1987              		.loc 2 376 7 is_stmt 0 view .LVU510
 1988 010e 034B     		ldr	r3, .L149
 1989 0110 93E80300 		ldm	r3, {r0, r1}
 1990              	.LVL172:
 376:src/console.c ****   }
 1991              		.loc 2 376 7 view .LVU511
 1992 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1993              	.LVL173:
 376:src/console.c ****   }
 1994              		.loc 2 376 7 view .LVU512
 1995 0116 84E80300 		stm	r4, {r0, r1}
 1996 011a 8AE7     		b	.L147
 1997              	.L150:
 1998              		.align	2
 1999              	.L149:
 2000 011c 00000000 		.word	.LANCHOR6
 2001              		.cfi_endproc
 2002              	.LFE25:
 2004              		.section	.rodata.program_main.str1.4,"aMS",%progbits,1
 2005              		.align	2
 2006              	.LC2:
 2007 0000 00       		.ascii	"\000"
 2008              		.section	.text.program_main,"ax",%progbits
 2009              		.align	1
 2010              		.p2align 2,,3
 2011              		.global	program_main
 2012              		.syntax unified
 2013              		.thumb
 2014              		.thumb_func
 2015              		.fpu fpv4-sp-d16
 2017              	program_main:
 2018              	.LFB26:
 380:src/console.c **** 
 381:src/console.c **** void program_main(){
 2019              		.loc 2 381 20 is_stmt 1 view -0
 2020              		.cfi_startproc
 2021              		@ args = 0, pretend = 0, frame = 24
 2022              		@ frame_needed = 0, uses_anonymous_args = 0
 382:src/console.c ****   int c;
 2023              		.loc 2 382 3 view .LVU514
 383:src/console.c ****   struct _ndmap remapped;
 2024              		.loc 2 383 3 view .LVU515
 384:src/console.c **** 
 385:src/console.c **** 
 386:src/console.c ****   init_mem();
 2025              		.loc 2 386 3 view .LVU516
 381:src/console.c ****   int c;
ARM GAS  /tmp/ccBI4G28.s 			page 54


 2026              		.loc 2 381 20 is_stmt 0 view .LVU517
 2027 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2028              		.cfi_def_cfa_offset 36
 2029              		.cfi_offset 4, -36
 2030              		.cfi_offset 5, -32
 2031              		.cfi_offset 6, -28
 2032              		.cfi_offset 7, -24
 2033              		.cfi_offset 8, -20
 2034              		.cfi_offset 9, -16
 2035              		.cfi_offset 10, -12
 2036              		.cfi_offset 11, -8
 2037              		.cfi_offset 14, -4
 2038 0004 87B0     		sub	sp, sp, #28
 2039              		.cfi_def_cfa_offset 64
 2040              		.loc 2 386 3 view .LVU518
 2041 0006 FFF7FEFF 		bl	init_mem
 2042              	.LVL174:
 387:src/console.c ****   init_RegionTab();
 2043              		.loc 2 387 3 is_stmt 1 view .LVU519
 2044 000a FFF7FEFF 		bl	init_RegionTab
 2045              	.LVL175:
 388:src/console.c ****   init_34s();
 2046              		.loc 2 388 3 view .LVU520
 2047 000e FFF7FEFF 		bl	init_34s
 2048              	.LVL176:
 389:src/console.c ****   DispMsg = "";
 2049              		.loc 2 389 3 view .LVU521
 390:src/console.c ****   State2.flags = 1;
 2050              		.loc 2 390 16 is_stmt 0 view .LVU522
 2051 0012 B54A     		ldr	r2, .L235
 389:src/console.c ****   DispMsg = "";
 2052              		.loc 2 389 11 view .LVU523
 2053 0014 B549     		ldr	r1, .L235+4
 2054              		.loc 2 390 16 view .LVU524
 2055 0016 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 389:src/console.c ****   DispMsg = "";
 2056              		.loc 2 389 11 view .LVU525
 2057 0018 B548     		ldr	r0, .L235+8
 2058 001a 0860     		str	r0, [r1]
 2059              		.loc 2 390 3 is_stmt 1 view .LVU526
 2060              		.loc 2 390 16 is_stmt 0 view .LVU527
 2061 001c 43F00103 		orr	r3, r3, #1
 2062 0020 1376     		strb	r3, [r2, #24]
 391:src/console.c ****   load_ram_file(0);
 2063              		.loc 2 391 3 is_stmt 1 view .LVU528
 2064 0022 0020     		movs	r0, #0
 2065 0024 FFF7FEFF 		bl	load_ram_file
 2066              	.LVL177:
 392:src/console.c ****   load_backup_file(0);
 2067              		.loc 2 392 3 view .LVU529
 393:src/console.c ****   load_lib_file(0);
 394:src/console.c **** 
 395:src/console.c ****   t20->newln = 0;
 2068              		.loc 2 395 3 is_stmt 0 view .LVU530
 2069 0028 B24C     		ldr	r4, .L235+12
 2070              	.LBB99:
 2071              	.LBB100:
ARM GAS  /tmp/ccBI4G28.s 			page 55


  22:src/menu.c    **** }
 2072              		.loc 1 22 3 view .LVU531
 2073 002a DFF830B3 		ldr	fp, .L235+116
 2074 002e DFF83093 		ldr	r9, .L235+120
 2075              	.LBE100:
 2076              	.LBE99:
 396:src/console.c ****   t20->lnfill = 0;
 397:src/console.c ****   t20->fixed = 1;
 398:src/console.c ****   t20->xspc = -2;
 399:src/console.c ****   t20->bgfill = 0;
 400:src/console.c ****   
 401:src/console.c ****   display();
 402:src/console.c ****   display_current_menu();
 403:src/console.c ****   lcd_refresh();
 404:src/console.c ****   JustDisplayed = 0;
 405:src/console.c ****   /*
 406:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 407:src/console.c ****     Sleeps peacefully while waiting for a key.
 408:src/console.c ****     Handles (in principle!) turning off and on.
 409:src/console.c ****     =================
 410:src/console.c ****     Main event loop
 411:src/console.c ****     =================
 412:src/console.c **** 
 413:src/console.c ****     Status flags:
 414:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 415:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 416:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 417:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 418:src/console.c ****   */
 419:src/console.c ****   for(;;) {
 420:src/console.c **** 
 421:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 422:src/console.c ****       {
 423:src/console.c **** 	CLR_ST(STAT_RUNNING);
 424:src/console.c **** 	sys_sleep();
 425:src/console.c ****       }
 426:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 2077              		.loc 2 426 35 view .LVU532
 2078 0032 B14E     		ldr	r6, .L235+16
 427:src/console.c ****     {
 428:src/console.c ****       CLR_ST(STAT_RUNNING);
 429:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2079              		.loc 2 429 7 view .LVU533
 2080 0034 DFF82C83 		ldr	r8, .L235+124
 392:src/console.c ****   load_lib_file(0);
 2081              		.loc 2 392 3 view .LVU534
 2082 0038 0020     		movs	r0, #0
 2083 003a FFF7FEFF 		bl	load_backup_file
 2084              	.LVL178:
 393:src/console.c **** 
 2085              		.loc 2 393 3 is_stmt 1 view .LVU535
 2086 003e 0020     		movs	r0, #0
 2087 0040 FFF7FEFF 		bl	load_lib_file
 2088              	.LVL179:
 395:src/console.c ****   t20->lnfill = 0;
 2089              		.loc 2 395 3 view .LVU536
 2090 0044 236B     		ldr	r3, [r4, #48]
ARM GAS  /tmp/ccBI4G28.s 			page 56


 396:src/console.c ****   t20->fixed = 1;
 2091              		.loc 2 396 3 view .LVU537
 397:src/console.c ****   t20->xspc = -2;
 2092              		.loc 2 397 3 view .LVU538
 397:src/console.c ****   t20->xspc = -2;
 2093              		.loc 2 397 14 is_stmt 0 view .LVU539
 2094 0046 0121     		movs	r1, #1
 398:src/console.c ****   t20->bgfill = 0;
 2095              		.loc 2 398 13 view .LVU540
 2096 0048 FE22     		movs	r2, #254
 399:src/console.c ****   
 2097              		.loc 2 399 15 view .LVU541
 2098 004a 0025     		movs	r5, #0
 397:src/console.c ****   t20->xspc = -2;
 2099              		.loc 2 397 14 view .LVU542
 2100 004c 1974     		strb	r1, [r3, #16]
 398:src/console.c ****   t20->bgfill = 0;
 2101              		.loc 2 398 3 is_stmt 1 view .LVU543
 398:src/console.c ****   t20->bgfill = 0;
 2102              		.loc 2 398 13 is_stmt 0 view .LVU544
 2103 004e 9A73     		strb	r2, [r3, #14]
 399:src/console.c ****   
 2104              		.loc 2 399 3 is_stmt 1 view .LVU545
 399:src/console.c ****   
 2105              		.loc 2 399 15 is_stmt 0 view .LVU546
 2106 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 395:src/console.c ****   t20->lnfill = 0;
 2107              		.loc 2 395 14 view .LVU547
 2108 0052 1D75     		strb	r5, [r3, #20]
 401:src/console.c ****   display_current_menu();
 2109              		.loc 2 401 3 is_stmt 1 view .LVU548
 2110 0054 FFF7FEFF 		bl	display
 2111              	.LVL180:
 402:src/console.c ****   lcd_refresh();
 2112              		.loc 2 402 3 view .LVU549
 2113              	.LBB102:
 2114              	.LBI99:
  21:src/menu.c    ****   display_menu (current_menu);
 2115              		.loc 1 21 6 view .LVU550
 2116              	.LBB101:
  22:src/menu.c    **** }
 2117              		.loc 1 22 3 view .LVU551
 2118 0058 DBF80000 		ldr	r0, [fp]
 2119 005c FFF7FEFF 		bl	display_menu
 2120              	.LVL181:
 2121              	.LBE101:
 2122              	.LBE102:
 403:src/console.c ****   JustDisplayed = 0;
 2123              		.loc 2 403 3 view .LVU552
 2124 0060 A64B     		ldr	r3, .L235+20
 2125 0062 9847     		blx	r3
 2126              	.LVL182:
 404:src/console.c ****   /*
 2127              		.loc 2 404 3 view .LVU553
 404:src/console.c ****   /*
 2128              		.loc 2 404 17 is_stmt 0 view .LVU554
 2129 0064 A64B     		ldr	r3, .L235+24
ARM GAS  /tmp/ccBI4G28.s 			page 57


 2130 0066 1D60     		str	r5, [r3]
 2131 0068 04AD     		add	r5, sp, #16
 2132              	.L152:
 419:src/console.c **** 
 2133              		.loc 2 419 3 is_stmt 1 view .LVU555
 421:src/console.c ****       {
 2134              		.loc 2 421 5 view .LVU556
 421:src/console.c ****       {
 2135              		.loc 2 421 10 is_stmt 0 view .LVU557
 2136 006a 2368     		ldr	r3, [r4]
 421:src/console.c ****       {
 2137              		.loc 2 421 8 view .LVU558
 2138 006c 9F05     		lsls	r7, r3, #22
 2139 006e 40F18180 		bpl	.L153
 2140              	.L224:
 421:src/console.c ****       {
 2141              		.loc 2 421 30 discriminator 1 view .LVU559
 2142 0072 2368     		ldr	r3, [r4]
 421:src/console.c ****       {
 2143              		.loc 2 421 27 discriminator 1 view .LVU560
 2144 0074 5807     		lsls	r0, r3, #29
 2145 0076 7DD5     		bpl	.L153
 423:src/console.c **** 	sys_sleep();
 2146              		.loc 2 423 2 is_stmt 1 view .LVU561
 2147 0078 2368     		ldr	r3, [r4]
 424:src/console.c ****       }
 2148              		.loc 2 424 2 is_stmt 0 view .LVU562
 2149 007a A24A     		ldr	r2, .L235+28
 423:src/console.c **** 	sys_sleep();
 2150              		.loc 2 423 2 view .LVU563
 2151 007c 23F00203 		bic	r3, r3, #2
 2152 0080 2360     		str	r3, [r4]
 424:src/console.c ****       }
 2153              		.loc 2 424 2 is_stmt 1 view .LVU564
 2154 0082 9047     		blx	r2
 2155              	.LVL183:
 2156              	.L154:
 430:src/console.c ****       sys_sleep();
 431:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 432:src/console.c **** 	key_push (K_HEARTBEAT);
 433:src/console.c **** 	if (Pause > 0) Pause--;
 434:src/console.c ****       }
 435:src/console.c ****       sys_timer_disable(0); // stop timer
 436:src/console.c ****     }
 437:src/console.c ****     
 438:src/console.c ****     // Wakeup in off state or going to sleep
 439:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 2157              		.loc 2 439 5 view .LVU565
 2158              		.loc 2 439 9 is_stmt 0 view .LVU566
 2159 0084 2368     		ldr	r3, [r4]
 2160              		.loc 2 439 8 view .LVU567
 2161 0086 9905     		lsls	r1, r3, #22
 2162 0088 00F19B80 		bmi	.L160
 2163              	.L225:
 2164              		.loc 2 439 29 discriminator 1 view .LVU568
 2165 008c 2368     		ldr	r3, [r4]
 2166              		.loc 2 439 26 discriminator 1 view .LVU569
ARM GAS  /tmp/ccBI4G28.s 			page 58


 2167 008e 5A07     		lsls	r2, r3, #29
 2168 0090 00F19780 		bmi	.L160
 440:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 441:src/console.c ****         // Going to off mode
 442:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 443:src/console.c ****         draw_power_off_image(1);
 444:src/console.c **** 
 445:src/console.c ****         LCD_power_off(0);
 446:src/console.c ****         SET_ST(STAT_SUSPENDED);
 447:src/console.c ****         SET_ST(STAT_OFF);
 448:src/console.c ****       }
 449:src/console.c ****       // Already in OFF -> just continue to sleep above
 450:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 451:src/console.c ****       // thus reaching the sleep()
 452:src/console.c ****     }
 453:src/console.c **** 
 454:src/console.c ****     // Well, we are woken-up
 455:src/console.c ****     SET_ST(STAT_RUNNING);
 2169              		.loc 2 455 5 is_stmt 1 view .LVU570
 2170 0094 2368     		ldr	r3, [r4]
 2171 0096 43F00203 		orr	r3, r3, #2
 2172 009a 2360     		str	r3, [r4]
 456:src/console.c **** 
 457:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 458:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 2173              		.loc 2 458 5 view .LVU571
 2174 009c 2368     		ldr	r3, [r4]
 2175 009e 23F00403 		bic	r3, r3, #4
 2176 00a2 2360     		str	r3, [r4]
 459:src/console.c **** 
 460:src/console.c ****     // Get up from OFF state
 461:src/console.c ****     if ( ST(STAT_OFF) ) {
 2177              		.loc 2 461 5 view .LVU572
 2178              		.loc 2 461 10 is_stmt 0 view .LVU573
 2179 00a4 2368     		ldr	r3, [r4]
 2180              		.loc 2 461 8 view .LVU574
 2181 00a6 DB06     		lsls	r3, r3, #27
 2182 00a8 0CD5     		bpl	.L165
 462:src/console.c ****       LCD_power_on();
 2183              		.loc 2 462 7 is_stmt 1 view .LVU575
 2184 00aa 974B     		ldr	r3, .L235+32
 2185 00ac 9847     		blx	r3
 2186              	.LVL184:
 463:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 2187              		.loc 2 463 7 view .LVU576
 2188 00ae 974B     		ldr	r3, .L235+36
 2189 00b0 9847     		blx	r3
 2190              	.LVL185:
 464:src/console.c **** 
 465:src/console.c ****       CLR_ST(STAT_OFF);
 2191              		.loc 2 465 7 view .LVU577
 2192 00b2 2368     		ldr	r3, [r4]
 466:src/console.c **** 
 467:src/console.c ****       if ( !lcd_get_buf_cleared() )
 2193              		.loc 2 467 13 is_stmt 0 view .LVU578
 2194 00b4 964A     		ldr	r2, .L235+40
 465:src/console.c **** 
ARM GAS  /tmp/ccBI4G28.s 			page 59


 2195              		.loc 2 465 7 view .LVU579
 2196 00b6 23F01003 		bic	r3, r3, #16
 2197 00ba 2360     		str	r3, [r4]
 2198              		.loc 2 467 7 is_stmt 1 view .LVU580
 2199              		.loc 2 467 13 is_stmt 0 view .LVU581
 2200 00bc 9047     		blx	r2
 2201              	.LVL186:
 2202              		.loc 2 467 10 view .LVU582
 2203 00be 08B9     		cbnz	r0, .L165
 468:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 2204              		.loc 2 468 9 is_stmt 1 view .LVU583
 2205 00c0 944B     		ldr	r3, .L235+44
 2206 00c2 9847     		blx	r3
 2207              	.LVL187:
 2208              	.L165:
 469:src/console.c ****     }
 470:src/console.c **** 
 471:src/console.c ****     // Key is ready -> clear auto off timer
 472:src/console.c ****     //    if ( !key_empty() )
 473:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 474:src/console.c ****     // Fetch the key
 475:src/console.c ****     //  < 0 -> No key event
 476:src/console.c ****     //  > 0 -> Key pressed
 477:src/console.c ****     // == 0 -> Key released
 478:src/console.c ****     c = key_pop();
 2209              		.loc 2 478 5 view .LVU584
 2210              		.loc 2 478 9 is_stmt 0 view .LVU585
 2211 00c4 944B     		ldr	r3, .L235+48
 2212 00c6 9847     		blx	r3
 2213              	.LVL188:
 479:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2214              		.loc 2 479 8 view .LVU586
 2215 00c8 6228     		cmp	r0, #98
 478:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2216              		.loc 2 478 9 view .LVU587
 2217 00ca 8246     		mov	r10, r0
 2218              	.LVL189:
 2219              		.loc 2 479 5 is_stmt 1 view .LVU588
 2220              		.loc 2 479 8 is_stmt 0 view .LVU589
 2221 00cc 00F09B81 		beq	.L167
 2222              		.loc 2 479 29 discriminator 1 view .LVU590
 2223 00d0 0028     		cmp	r0, #0
 2224 00d2 40F39581 		ble	.L168
 480:src/console.c ****       reset_auto_off();
 2225              		.loc 2 480 7 is_stmt 1 view .LVU591
 2226 00d6 914B     		ldr	r3, .L235+52
 2227 00d8 9847     		blx	r3
 2228              	.LVL190:
 481:src/console.c ****       start_key_timer();
 2229              		.loc 2 481 7 view .LVU592
 2230              	.LBB103:
 2231              	.LBI103:
 240:src/console.c ****     start_ticks = get_rtc_ticks();
 2232              		.loc 2 240 6 view .LVU593
 2233              	.LBB104:
 241:src/console.c **** }
 2234              		.loc 2 241 5 view .LVU594
ARM GAS  /tmp/ccBI4G28.s 			page 60


 241:src/console.c **** }
 2235              		.loc 2 241 19 is_stmt 0 view .LVU595
 2236 00da 914B     		ldr	r3, .L235+56
 2237 00dc 9847     		blx	r3
 2238              	.LVL191:
 241:src/console.c **** }
 2239              		.loc 2 241 17 view .LVU596
 2240 00de 914B     		ldr	r3, .L235+60
 2241              	.LBE104:
 2242              	.LBE103:
 2243              	.LBB106:
 2244              	.LBB107:
  68:src/console.c **** 
 2245              		.loc 2 68 6 view .LVU597
 2246 00e0 BAF1630F 		cmp	r10, #99
 2247              	.LBE107:
 2248              	.LBE106:
 2249              	.LBB119:
 2250              	.LBB105:
 241:src/console.c **** }
 2251              		.loc 2 241 17 view .LVU598
 2252 00e4 1860     		str	r0, [r3]
 2253              	.LBE105:
 2254              	.LBE119:
 482:src/console.c ****     }
 483:src/console.c ****     if (c >= 0) {
 2255              		.loc 2 483 5 is_stmt 1 view .LVU599
 484:src/console.c ****       remapped = remap(c);
 2256              		.loc 2 484 7 view .LVU600
 2257              	.LVL192:
 2258              	.LBB120:
 2259              	.LBI106:
  60:src/console.c **** 
 2260              		.loc 2 60 22 view .LVU601
 2261              	.LBB108:
  62:src/console.c **** 
 2262              		.loc 2 62 3 view .LVU602
 2263              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 2264              		.loc 3 1 1 view .LVU603
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
ARM GAS  /tmp/ccBI4G28.s 			page 61


  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 2265              		.loc 3 59 3 view .LVU604
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
ARM GAS  /tmp/ccBI4G28.s 			page 62


  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K52, 2}, // Integral
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_NOP, 0}, // no function
  96:src/keytran.c ****     {K_NOP, 0}, // no function
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 2266              		.loc 3 117 3 view .LVU605
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K20, 2}, // Fill
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
ARM GAS  /tmp/ccBI4G28.s 			page 63


 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K_NOP, 0}, // no function
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     {K53, 3}, // X.FCN
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 0}, // Exit
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K_NOP, 0}, // no function
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 2267              		.loc 3 175 1 view .LVU606
  66:src/console.c **** 
 2268              		.loc 2 66 3 view .LVU607
  68:src/console.c **** 
 2269              		.loc 2 68 3 view .LVU608
  68:src/console.c **** 
 2270              		.loc 2 68 6 is_stmt 0 view .LVU609
 2271 00e6 00F0D081 		beq	.L219
  70:src/console.c ****     // Start click 
 2272              		.loc 2 70 3 is_stmt 1 view .LVU610
  70:src/console.c ****     // Start click 
 2273              		.loc 2 70 6 is_stmt 0 view .LVU611
ARM GAS  /tmp/ccBI4G28.s 			page 64


 2274 00ea BAF12C0F 		cmp	r10, #44
 2275 00ee 00F09281 		beq	.L220
 2276              	.LVL193:
 2277              	.L171:
  84:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2278              		.loc 2 84 3 is_stmt 1 view .LVU612
  84:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2279              		.loc 2 84 8 is_stmt 0 view .LVU613
 2280 00f2 FFF7FEFF 		bl	get_alpha_state
 2281              	.LVL194:
  84:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2282              		.loc 2 84 6 view .LVU614
 2283 00f6 0028     		cmp	r0, #0
 2284 00f8 7AD0     		beq	.L173
  85:src/console.c ****       switch (cur_shift()) { 
 2285              		.loc 2 85 5 is_stmt 1 view .LVU615
  85:src/console.c ****       switch (cur_shift()) { 
 2286              		.loc 2 85 8 is_stmt 0 view .LVU616
 2287 00fa BAF11C0F 		cmp	r10, #28
 2288 00fe 00F0D981 		beq	.L221
 102:src/console.c ****   }
 2289              		.loc 2 102 5 is_stmt 1 view .LVU617
 102:src/console.c ****   }
 2290              		.loc 2 102 26 is_stmt 0 view .LVU618
 2291 0102 894A     		ldr	r2, .L235+64
 2292              	.L218:
 131:src/console.c ****     break;
 2293              		.loc 2 131 26 view .LVU619
 2294 0104 02EBCA03 		add	r3, r2, r10, lsl #3
 2295 0108 93E80300 		ldm	r3, {r0, r1}
 2296 010c 12F83A30 		ldrb	r3, [r2, r10, lsl #3]	@ zero_extendqisi2
 2297              	.LVL195:
 131:src/console.c ****     break;
 2298              		.loc 2 131 26 view .LVU620
 2299 0110 85E80300 		stm	r5, {r0, r1}
 2300 0114 8A46     		mov	r10, r1
 2301              	.LVL196:
 2302              	.L170:
 131:src/console.c ****     break;
 2303              		.loc 2 131 26 view .LVU621
 2304              	.LBE108:
 2305              	.LBE120:
 485:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2306              		.loc 2 485 7 is_stmt 1 view .LVU622
 2307              		.loc 2 485 10 is_stmt 0 view .LVU623
 2308 0116 2F2B     		cmp	r3, #47
 2309 0118 00F09480 		beq	.L222
 2310              	.LVL197:
 2311              	.L195:
 486:src/console.c **** 	set_menu ( remapped.shift );
 487:src/console.c **** 	display_current_menu ();
 488:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 489:src/console.c **** 	case SHIFT_F:
 490:src/console.c **** 	  remapped = f_shift; // F -> N
 491:src/console.c **** 	  break;
 492:src/console.c **** 	case SHIFT_G:
 493:src/console.c **** 	  remapped = g_shift; // G -> N
ARM GAS  /tmp/ccBI4G28.s 			page 65


 494:src/console.c **** 	  break;
 495:src/console.c **** 	case SHIFT_H:
 496:src/console.c **** 	  remapped = h_shift; // H -> N
 497:src/console.c **** 	default:
 498:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 499:src/console.c **** 	}
 500:src/console.c ****       }
 501:src/console.c ****       if (remapped.key_34s == K_SYS) {
 2312              		.loc 2 501 7 is_stmt 1 view .LVU624
 2313              		.loc 2 501 10 is_stmt 0 view .LVU625
 2314 011c 302B     		cmp	r3, #48
 2315 011e 1AD1     		bne	.L201
 502:src/console.c **** 	SET_ST(STAT_MENU);
 2316              		.loc 2 502 2 is_stmt 1 view .LVU626
 2317 0120 2368     		ldr	r3, [r4]
 2318              	.LVL198:
 503:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 2319              		.loc 2 503 2 is_stmt 0 view .LVU627
 2320 0122 DFF844A2 		ldr	r10, .L235+128
 2321              	.LVL199:
 2322              		.loc 2 503 2 view .LVU628
 2323 0126 8148     		ldr	r0, .L235+68
 2324 0128 0022     		movs	r2, #0
 502:src/console.c **** 	SET_ST(STAT_MENU);
 2325              		.loc 2 502 2 view .LVU629
 2326 012a 43F04003 		orr	r3, r3, #64
 2327              		.loc 2 503 2 view .LVU630
 2328 012e 1146     		mov	r1, r2
 502:src/console.c **** 	SET_ST(STAT_MENU);
 2329              		.loc 2 502 2 view .LVU631
 2330 0130 2360     		str	r3, [r4]
 2331              		.loc 2 503 2 is_stmt 1 view .LVU632
 2332 0132 D047     		blx	r10
 2333              	.LVL200:
 504:src/console.c **** 	CLR_ST(STAT_MENU);
 2334              		.loc 2 504 2 view .LVU633
 2335 0134 2368     		ldr	r3, [r4]
 2336 0136 23F04003 		bic	r3, r3, #64
 2337 013a 2360     		str	r3, [r4]
 505:src/console.c **** 	remapped =  no_key;
 2338              		.loc 2 505 2 view .LVU634
 2339              		.loc 2 505 11 is_stmt 0 view .LVU635
 2340 013c 7C4B     		ldr	r3, .L235+72
 2341 013e 93E80300 		ldm	r3, {r0, r1}
 2342 0142 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2343 0144 0193     		str	r3, [sp, #4]
 2344              	.LVL201:
 2345              		.loc 2 505 11 view .LVU636
 2346 0146 85E80300 		stm	r5, {r0, r1}
 2347              	.LBB121:
 2348              	.LBB122:
  22:src/menu.c    **** }
 2349              		.loc 1 22 3 view .LVU637
 2350 014a DBF80000 		ldr	r0, [fp]
 2351              	.LBE122:
 2352              	.LBE121:
 2353              		.loc 2 505 11 view .LVU638
ARM GAS  /tmp/ccBI4G28.s 			page 66


 2354 014e 8A46     		mov	r10, r1
 2355              	.LVL202:
 506:src/console.c **** 	display_current_menu();
 2356              		.loc 2 506 2 is_stmt 1 view .LVU639
 2357              	.LBB124:
 2358              	.LBI121:
  21:src/menu.c    ****   display_menu (current_menu);
 2359              		.loc 1 21 6 view .LVU640
 2360              	.LBB123:
  22:src/menu.c    **** }
 2361              		.loc 1 22 3 view .LVU641
 2362 0150 FFF7FEFF 		bl	display_menu
 2363              	.LVL203:
  22:src/menu.c    **** }
 2364              		.loc 1 22 3 is_stmt 0 view .LVU642
 2365 0154 019B     		ldr	r3, [sp, #4]
 2366              	.LVL204:
 2367              	.L201:
  22:src/menu.c    **** }
 2368              		.loc 1 22 3 view .LVU643
 2369              	.LBE123:
 2370              	.LBE124:
 507:src/console.c ****       }
 508:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 2371              		.loc 2 508 7 is_stmt 1 view .LVU644
 2372              		.loc 2 508 10 is_stmt 0 view .LVU645
 2373 0156 312B     		cmp	r3, #49
 2374 0158 00F07E81 		beq	.L223
 2375              	.LVL205:
 2376              	.L175:
 509:src/console.c **** 	remapped = do_multi (remapped);
 510:src/console.c **** 	display_current_menu();
 511:src/console.c ****       }
 512:src/console.c ****       process_keycode_with_shift(remapped);
 2377              		.loc 2 512 7 is_stmt 1 view .LVU646
 2378              		.loc 2 512 7 is_stmt 0 view .LVU647
 2379 015c 8DF81030 		strb	r3, [sp, #16]
 2380 0160 CDF814A0 		str	r10, [sp, #20]
 2381 0164 95E80300 		ldm	r5, {r0, r1}
 2382 0168 FFF7FEFF 		bl	process_keycode_with_shift
 2383              	.LVL206:
 419:src/console.c **** 
 2384              		.loc 2 419 3 is_stmt 1 view .LVU648
 421:src/console.c ****       {
 2385              		.loc 2 421 5 view .LVU649
 421:src/console.c ****       {
 2386              		.loc 2 421 10 is_stmt 0 view .LVU650
 2387 016c 2368     		ldr	r3, [r4]
 421:src/console.c ****       {
 2388              		.loc 2 421 8 view .LVU651
 2389 016e 9F05     		lsls	r7, r3, #22
 2390 0170 3FF57FAF 		bmi	.L224
 2391              	.LVL207:
 2392              	.L153:
 426:src/console.c ****     {
 2393              		.loc 2 426 10 is_stmt 1 view .LVU652
 426:src/console.c ****     {
ARM GAS  /tmp/ccBI4G28.s 			page 67


 2394              		.loc 2 426 15 is_stmt 0 view .LVU653
 2395 0174 2068     		ldr	r0, [r4]
 426:src/console.c ****     {
 2396              		.loc 2 426 13 view .LVU654
 2397 0176 10F4007A 		ands	r10, r0, #512
 2398 017a 83D1     		bne	.L154
 426:src/console.c ****     {
 2399              		.loc 2 426 35 discriminator 1 view .LVU655
 2400 017c B047     		blx	r6
 2401              	.LVL208:
 426:src/console.c ****     {
 2402              		.loc 2 426 32 discriminator 1 view .LVU656
 2403 017e 0028     		cmp	r0, #0
 2404 0180 80D0     		beq	.L154
 428:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2405              		.loc 2 428 7 is_stmt 1 view .LVU657
 2406 0182 2368     		ldr	r3, [r4]
 2407 0184 23F00203 		bic	r3, r3, #2
 429:src/console.c ****       sys_sleep();
 2408              		.loc 2 429 7 is_stmt 0 view .LVU658
 2409 0188 5046     		mov	r0, r10
 2410 018a 6421     		movs	r1, #100
 428:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2411              		.loc 2 428 7 view .LVU659
 2412 018c 2360     		str	r3, [r4]
 429:src/console.c ****       sys_sleep();
 2413              		.loc 2 429 7 is_stmt 1 view .LVU660
 2414 018e C047     		blx	r8
 2415              	.LVL209:
 430:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 2416              		.loc 2 430 7 view .LVU661
 2417 0190 5C4B     		ldr	r3, .L235+28
 2418 0192 9847     		blx	r3
 2419              	.LVL210:
 431:src/console.c **** 	key_push (K_HEARTBEAT);
 2420              		.loc 2 431 7 view .LVU662
 431:src/console.c **** 	key_push (K_HEARTBEAT);
 2421              		.loc 2 431 11 is_stmt 0 view .LVU663
 2422 0194 674B     		ldr	r3, .L235+76
 2423 0196 5046     		mov	r0, r10
 2424 0198 9847     		blx	r3
 2425              	.LVL211:
 431:src/console.c **** 	key_push (K_HEARTBEAT);
 2426              		.loc 2 431 10 view .LVU664
 2427 019a 58B1     		cbz	r0, .L158
 432:src/console.c **** 	if (Pause > 0) Pause--;
 2428              		.loc 2 432 2 is_stmt 1 view .LVU665
 2429 019c 664B     		ldr	r3, .L235+80
 2430 019e 6220     		movs	r0, #98
 2431 01a0 9847     		blx	r3
 2432              	.LVL212:
 433:src/console.c ****       }
 2433              		.loc 2 433 2 view .LVU666
 433:src/console.c ****       }
 2434              		.loc 2 433 12 is_stmt 0 view .LVU667
 2435 01a2 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 433:src/console.c ****       }
ARM GAS  /tmp/ccBI4G28.s 			page 68


 2436              		.loc 2 433 5 view .LVU668
 2437 01a6 2BB1     		cbz	r3, .L158
 433:src/console.c ****       }
 2438              		.loc 2 433 17 is_stmt 1 discriminator 1 view .LVU669
 433:src/console.c ****       }
 2439              		.loc 2 433 22 is_stmt 0 discriminator 1 view .LVU670
 2440 01a8 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 2441 01ac 013B     		subs	r3, r3, #1
 2442 01ae DBB2     		uxtb	r3, r3
 2443 01b0 89F80030 		strb	r3, [r9]
 2444              	.L158:
 435:src/console.c ****     }
 2445              		.loc 2 435 7 is_stmt 1 view .LVU671
 2446 01b4 614B     		ldr	r3, .L235+84
 2447 01b6 0020     		movs	r0, #0
 2448 01b8 9847     		blx	r3
 2449              	.LVL213:
 439:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2450              		.loc 2 439 5 view .LVU672
 439:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2451              		.loc 2 439 9 is_stmt 0 view .LVU673
 2452 01ba 2368     		ldr	r3, [r4]
 439:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2453              		.loc 2 439 8 view .LVU674
 2454 01bc 9905     		lsls	r1, r3, #22
 2455 01be 7FF565AF 		bpl	.L225
 2456              	.L160:
 440:src/console.c ****         // Going to off mode
 2457              		.loc 2 440 7 is_stmt 1 view .LVU675
 440:src/console.c ****         // Going to off mode
 2458              		.loc 2 440 12 is_stmt 0 view .LVU676
 2459 01c2 2068     		ldr	r0, [r4]
 440:src/console.c ****         // Going to off mode
 2460              		.loc 2 440 10 view .LVU677
 2461 01c4 10F0040A 		ands	r10, r0, #4
 2462 01c8 7FF44FAF 		bne	.L152
 442:src/console.c ****         draw_power_off_image(1);
 2463              		.loc 2 442 9 is_stmt 1 view .LVU678
 2464 01cc 5C4B     		ldr	r3, .L235+88
 2465 01ce 5046     		mov	r0, r10
 2466 01d0 9847     		blx	r3
 2467              	.LVL214:
 443:src/console.c **** 
 2468              		.loc 2 443 9 view .LVU679
 2469 01d2 5C4B     		ldr	r3, .L235+92
 2470 01d4 0120     		movs	r0, #1
 2471 01d6 9847     		blx	r3
 2472              	.LVL215:
 445:src/console.c ****         SET_ST(STAT_SUSPENDED);
 2473              		.loc 2 445 9 view .LVU680
 2474 01d8 5B4B     		ldr	r3, .L235+96
 2475 01da 5046     		mov	r0, r10
 2476 01dc 9847     		blx	r3
 2477              	.LVL216:
 446:src/console.c ****         SET_ST(STAT_OFF);
 2478              		.loc 2 446 9 view .LVU681
 2479 01de 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccBI4G28.s 			page 69


 2480 01e0 43F00403 		orr	r3, r3, #4
 2481 01e4 2360     		str	r3, [r4]
 447:src/console.c ****       }
 2482              		.loc 2 447 9 view .LVU682
 2483 01e6 2368     		ldr	r3, [r4]
 2484 01e8 43F01003 		orr	r3, r3, #16
 2485 01ec 2360     		str	r3, [r4]
 2486 01ee 3CE7     		b	.L152
 2487              	.LVL217:
 2488              	.L173:
 2489              	.LBB125:
 2490              	.LBB109:
 105:src/console.c ****   case KEY_F1:
 2491              		.loc 2 105 3 view .LVU683
 2492 01f0 AAF12603 		sub	r3, r10, #38
 2493 01f4 052B     		cmp	r3, #5
 2494 01f6 00F27581 		bhi	.L178
 2495 01fa DFE813F0 		tbh	[pc, r3, lsl #1]
 2496              	.L180:
 2497 01fe EC00     		.2byte	(.L185-.L180)/2
 2498 0200 D600     		.2byte	(.L184-.L180)/2
 2499 0202 BC00     		.2byte	(.L183-.L180)/2
 2500 0204 5F00     		.2byte	(.L182-.L180)/2
 2501 0206 4500     		.2byte	(.L181-.L180)/2
 2502 0208 0B00     		.2byte	(.L179-.L180)/2
 2503              		.p2align 1
 2504              	.L190:
 120:src/console.c ****   case KEY_F6:
 2505              		.loc 2 120 5 view .LVU684
 120:src/console.c ****   case KEY_F6:
 2506              		.loc 2 120 9 is_stmt 0 view .LVU685
 2507 020a FFF7FEFF 		bl	cur_shift
 2508              	.LVL218:
 120:src/console.c ****   case KEY_F6:
 2509              		.loc 2 120 8 view .LVU686
 2510 020e 0128     		cmp	r0, #1
 2511 0210 00F09381 		beq	.L226
 2512              	.L179:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2513              		.loc 2 122 5 is_stmt 1 view .LVU687
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2514              		.loc 2 122 9 is_stmt 0 view .LVU688
 2515 0214 FFF7FEFF 		bl	cur_shift
 2516              	.LVL219:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2517              		.loc 2 122 8 view .LVU689
 2518 0218 0028     		cmp	r0, #0
 2519 021a 40F05F81 		bne	.L191
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2520              		.loc 2 122 33 is_stmt 1 view .LVU690
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2521              		.loc 2 122 67 is_stmt 0 view .LVU691
 2522 021e DBF80030 		ldr	r3, [fp]
 2523 0222 4A4F     		ldr	r7, .L235+100
 2524 0224 D022     		movs	r2, #208
 2525 0226 02FB03F2 		mul	r2, r2, r3
 2526 022a BB18     		adds	r3, r7, r2
ARM GAS  /tmp/ccBI4G28.s 			page 70


 2527 022c D3E92C01 		ldrd	r0, r1, [r3, #176]
 2528 0230 B032     		adds	r2, r2, #176
 2529 0232 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2530              	.LVL220:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2531              		.loc 2 122 67 view .LVU692
 2532 0234 85E80300 		stm	r5, {r0, r1}
 2533 0238 3A44     		add	r2, r2, r7
 2534              	.LBE109:
 2535              	.LBE125:
 485:src/console.c **** 	set_menu ( remapped.shift );
 2536              		.loc 2 485 10 view .LVU693
 2537 023a 2F2B     		cmp	r3, #47
 2538              	.LBB126:
 2539              	.LBB110:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2540              		.loc 2 122 67 view .LVU694
 2541 023c D2F804A0 		ldr	r10, [r2, #4]
 2542              	.LVL221:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2543              		.loc 2 122 67 view .LVU695
 2544              	.LBE110:
 2545              	.LBE126:
 485:src/console.c **** 	set_menu ( remapped.shift );
 2546              		.loc 2 485 7 is_stmt 1 view .LVU696
 485:src/console.c **** 	set_menu ( remapped.shift );
 2547              		.loc 2 485 10 is_stmt 0 view .LVU697
 2548 0240 7FF46CAF 		bne	.L195
 2549              	.L222:
 486:src/console.c **** 	display_current_menu ();
 2550              		.loc 2 486 2 is_stmt 1 view .LVU698
 2551              	.LVL222:
 2552              	.LBB127:
 2553              	.LBI127:
   3:src/menu.c    ****   if (new_menu == current_menu) {
 2554              		.loc 1 3 6 view .LVU699
 2555              	.LBB128:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2556              		.loc 1 4 3 view .LVU700
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2557              		.loc 1 4 7 is_stmt 0 view .LVU701
 2558 0244 DBF80030 		ldr	r3, [fp]
 2559              	.LVL223:
   5:src/menu.c    ****     current_menu = 0;
 2560              		.loc 1 5 3 is_stmt 1 view .LVU702
   5:src/menu.c    ****     current_menu = 0;
 2561              		.loc 1 5 6 is_stmt 0 view .LVU703
 2562 0248 5345     		cmp	r3, r10
 2563 024a 00F02781 		beq	.L196
   8:src/menu.c    ****     current_menu = last_menu;
 2564              		.loc 1 8 8 is_stmt 1 view .LVU704
   8:src/menu.c    ****     current_menu = last_menu;
 2565              		.loc 1 8 11 is_stmt 0 view .LVU705
 2566 024e BAF1FF3F 		cmp	r10, #-1
 2567 0252 00F02981 		beq	.L227
 2568              	.LVL224:
 2569              	.L197:
ARM GAS  /tmp/ccBI4G28.s 			page 71


  12:src/menu.c    ****   }
 2570              		.loc 1 12 5 is_stmt 1 view .LVU706
  12:src/menu.c    ****   }
 2571              		.loc 1 12 18 is_stmt 0 view .LVU707
 2572 0256 CBF800A0 		str	r10, [fp]
 2573              	.LVL225:
 2574              	.L199:
  14:src/menu.c    **** }
 2575              		.loc 1 14 3 is_stmt 1 view .LVU708
  14:src/menu.c    **** }
 2576              		.loc 1 14 13 is_stmt 0 view .LVU709
 2577 025a 3D4A     		ldr	r2, .L235+104
 2578              	.LBE128:
 2579              	.LBE127:
 2580              	.LBB132:
 2581              	.LBB133:
  22:src/menu.c    **** }
 2582              		.loc 1 22 3 view .LVU710
 2583 025c 5046     		mov	r0, r10
 2584              	.LBE133:
 2585              	.LBE132:
 2586              	.LBB135:
 2587              	.LBB129:
  14:src/menu.c    **** }
 2588              		.loc 1 14 13 view .LVU711
 2589 025e 1360     		str	r3, [r2]
 2590              	.LBE129:
 2591              	.LBE135:
 487:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 2592              		.loc 2 487 2 is_stmt 1 view .LVU712
 2593              	.LBB136:
 2594              	.LBI132:
  21:src/menu.c    ****   display_menu (current_menu);
 2595              		.loc 1 21 6 view .LVU713
 2596              	.LBB134:
  22:src/menu.c    **** }
 2597              		.loc 1 22 3 view .LVU714
 2598 0260 FFF7FEFF 		bl	display_menu
 2599              	.LVL226:
 2600              	.LBE134:
 2601              	.LBE136:
 488:src/console.c **** 	case SHIFT_F:
 2602              		.loc 2 488 2 view .LVU715
 488:src/console.c **** 	case SHIFT_F:
 2603              		.loc 2 488 10 is_stmt 0 view .LVU716
 2604 0264 FFF7FEFF 		bl	cur_shift
 2605              	.LVL227:
 488:src/console.c **** 	case SHIFT_F:
 2606              		.loc 2 488 2 view .LVU717
 2607 0268 0228     		cmp	r0, #2
 490:src/console.c **** 	  break;
 2608              		.loc 2 490 4 is_stmt 1 view .LVU718
 490:src/console.c **** 	  break;
 2609              		.loc 2 490 13 is_stmt 0 view .LVU719
 2610 026a 14BF     		ite	ne
 2611 026c 394B     		ldrne	r3, .L235+108
 493:src/console.c **** 	  break;
ARM GAS  /tmp/ccBI4G28.s 			page 72


 2612              		.loc 2 493 4 is_stmt 1 view .LVU720
 493:src/console.c **** 	  break;
 2613              		.loc 2 493 13 is_stmt 0 view .LVU721
 2614 026e 3A4B     		ldreq	r3, .L235+112
 2615 0270 93E80300 		ldm	r3, {r0, r1}
 2616 0274 85E80300 		stm	r5, {r0, r1}
 2617 0278 8A46     		mov	r10, r1
 2618 027a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2619              	.LVL228:
 494:src/console.c **** 	case SHIFT_H:
 2620              		.loc 2 494 4 is_stmt 1 view .LVU722
 2621 027c 4EE7     		b	.L195
 2622              	.LVL229:
 2623              	.L189:
 2624              	.LBB137:
 2625              	.LBB111:
 117:src/console.c ****   case KEY_F5:
 2626              		.loc 2 117 5 view .LVU723
 117:src/console.c ****   case KEY_F5:
 2627              		.loc 2 117 9 is_stmt 0 view .LVU724
 2628 027e FFF7FEFF 		bl	cur_shift
 2629              	.LVL230:
 117:src/console.c ****   case KEY_F5:
 2630              		.loc 2 117 8 view .LVU725
 2631 0282 0128     		cmp	r0, #1
 2632 0284 00F06A81 		beq	.L228
 2633              	.L181:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2634              		.loc 2 119 5 is_stmt 1 view .LVU726
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2635              		.loc 2 119 9 is_stmt 0 view .LVU727
 2636 0288 FFF7FEFF 		bl	cur_shift
 2637              	.LVL231:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2638              		.loc 2 119 8 view .LVU728
 2639 028c 0028     		cmp	r0, #0
 2640 028e BCD1     		bne	.L190
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2641              		.loc 2 119 33 is_stmt 1 view .LVU729
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2642              		.loc 2 119 67 is_stmt 0 view .LVU730
 2643 0290 DBF80030 		ldr	r3, [fp]
 2644 0294 2D4F     		ldr	r7, .L235+100
 2645 0296 D022     		movs	r2, #208
 2646 0298 02FB03F2 		mul	r2, r2, r3
 2647 029c BB18     		adds	r3, r7, r2
 2648 029e D3E92401 		ldrd	r0, r1, [r3, #144]
 2649 02a2 9032     		adds	r2, r2, #144
 2650 02a4 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2651              	.LVL232:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2652              		.loc 2 119 67 view .LVU731
 2653 02a6 85E80300 		stm	r5, {r0, r1}
 2654 02aa 3A44     		add	r2, r2, r7
 2655 02ac D2F804A0 		ldr	r10, [r2, #4]
 2656              	.LVL233:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
ARM GAS  /tmp/ccBI4G28.s 			page 73


 2657              		.loc 2 119 67 view .LVU732
 2658 02b0 31E7     		b	.L170
 2659              	.LVL234:
 2660              	.L188:
 114:src/console.c ****   case KEY_F4:
 2661              		.loc 2 114 5 is_stmt 1 view .LVU733
 114:src/console.c ****   case KEY_F4:
 2662              		.loc 2 114 9 is_stmt 0 view .LVU734
 2663 02b2 FFF7FEFF 		bl	cur_shift
 2664              	.LVL235:
 114:src/console.c ****   case KEY_F4:
 2665              		.loc 2 114 8 view .LVU735
 2666 02b6 0128     		cmp	r0, #1
 2667 02b8 00F06181 		beq	.L229
 2668              	.L182:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2669              		.loc 2 116 5 is_stmt 1 view .LVU736
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2670              		.loc 2 116 9 is_stmt 0 view .LVU737
 2671 02bc FFF7FEFF 		bl	cur_shift
 2672              	.LVL236:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2673              		.loc 2 116 8 view .LVU738
 2674 02c0 0028     		cmp	r0, #0
 2675 02c2 DCD1     		bne	.L189
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2676              		.loc 2 116 33 is_stmt 1 view .LVU739
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2677              		.loc 2 116 67 is_stmt 0 view .LVU740
 2678 02c4 DBF80030 		ldr	r3, [fp]
 2679 02c8 204F     		ldr	r7, .L235+100
 2680 02ca D022     		movs	r2, #208
 2681 02cc 02FB03F2 		mul	r2, r2, r3
 2682 02d0 BB18     		adds	r3, r7, r2
 2683 02d2 D3E91C01 		ldrd	r0, r1, [r3, #112]
 2684 02d6 7032     		adds	r2, r2, #112
 2685 02d8 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2686              	.LVL237:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2687              		.loc 2 116 67 view .LVU741
 2688 02da 85E80300 		stm	r5, {r0, r1}
 2689 02de 3A44     		add	r2, r2, r7
 2690 02e0 D2F804A0 		ldr	r10, [r2, #4]
 2691              	.LVL238:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2692              		.loc 2 116 67 view .LVU742
 2693 02e4 17E7     		b	.L170
 2694              	.L236:
 2695 02e6 00BF     		.align	2
 2696              	.L235:
 2697 02e8 00000000 		.word	StateWhileOn
 2698 02ec 00000000 		.word	DispMsg
 2699 02f0 00000000 		.word	.LC2
 2700 02f4 00200010 		.word	268443648
 2701 02f8 7D030008 		.word	134218621
 2702 02fc 31020008 		.word	134218289
 2703 0300 00000000 		.word	JustDisplayed
ARM GAS  /tmp/ccBI4G28.s 			page 74


 2704 0304 19040008 		.word	134218777
 2705 0308 19020008 		.word	134218265
 2706 030c E5020008 		.word	134218469
 2707 0310 59020008 		.word	134218329
 2708 0314 35020008 		.word	134218293
 2709 0318 89030008 		.word	134218633
 2710 031c B9030008 		.word	134218681
 2711 0320 B9040008 		.word	134218937
 2712 0324 00000000 		.word	.LANCHOR4
 2713 0328 00000000 		.word	.LANCHOR11
 2714 032c 00000000 		.word	.LANCHOR15
 2715 0330 00000000 		.word	.LANCHOR6
 2716 0334 01040008 		.word	134218753
 2717 0338 81030008 		.word	134218625
 2718 033c F5030008 		.word	134218741
 2719 0340 55020008 		.word	134218325
 2720 0344 2D040008 		.word	134218797
 2721 0348 1D020008 		.word	134218269
 2722 034c 00000000 		.word	.LANCHOR3
 2723 0350 00000000 		.word	.LANCHOR2
 2724 0354 00000000 		.word	.LANCHOR13
 2725 0358 00000000 		.word	.LANCHOR14
 2726 035c 00000000 		.word	.LANCHOR1
 2727 0360 00000000 		.word	Pause
 2728 0364 F9030008 		.word	134218745
 2729 0368 59030008 		.word	134218585
 2730              	.LVL239:
 2731              	.L187:
 111:src/console.c ****   case KEY_F3:
 2732              		.loc 2 111 5 is_stmt 1 view .LVU743
 111:src/console.c ****   case KEY_F3:
 2733              		.loc 2 111 9 is_stmt 0 view .LVU744
 2734 036c FFF7FEFF 		bl	cur_shift
 2735              	.LVL240:
 111:src/console.c ****   case KEY_F3:
 2736              		.loc 2 111 8 view .LVU745
 2737 0370 0128     		cmp	r0, #1
 2738 0372 00F01581 		beq	.L230
 2739              	.L183:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2740              		.loc 2 113 5 is_stmt 1 view .LVU746
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2741              		.loc 2 113 9 is_stmt 0 view .LVU747
 2742 0376 FFF7FEFF 		bl	cur_shift
 2743              	.LVL241:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2744              		.loc 2 113 8 view .LVU748
 2745 037a 0028     		cmp	r0, #0
 2746 037c 99D1     		bne	.L188
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2747              		.loc 2 113 33 is_stmt 1 view .LVU749
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2748              		.loc 2 113 67 is_stmt 0 view .LVU750
 2749 037e DBF80030 		ldr	r3, [fp]
 2750 0382 AA4F     		ldr	r7, .L237
 2751 0384 D022     		movs	r2, #208
 2752 0386 02FB03F2 		mul	r2, r2, r3
ARM GAS  /tmp/ccBI4G28.s 			page 75


 2753 038a BB18     		adds	r3, r7, r2
 2754 038c D3E91401 		ldrd	r0, r1, [r3, #80]
 2755 0390 5032     		adds	r2, r2, #80
 2756 0392 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2757              	.LVL242:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2758              		.loc 2 113 67 view .LVU751
 2759 0394 85E80300 		stm	r5, {r0, r1}
 2760 0398 3A44     		add	r2, r2, r7
 2761 039a D2F804A0 		ldr	r10, [r2, #4]
 2762              	.LVL243:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2763              		.loc 2 113 67 view .LVU752
 2764 039e BAE6     		b	.L170
 2765              	.LVL244:
 2766              	.L186:
 108:src/console.c ****   case KEY_F2:
 2767              		.loc 2 108 5 is_stmt 1 view .LVU753
 108:src/console.c ****   case KEY_F2:
 2768              		.loc 2 108 9 is_stmt 0 view .LVU754
 2769 03a0 FFF7FEFF 		bl	cur_shift
 2770              	.LVL245:
 108:src/console.c ****   case KEY_F2:
 2771              		.loc 2 108 8 view .LVU755
 2772 03a4 0128     		cmp	r0, #1
 2773 03a6 00F00C81 		beq	.L231
 2774              	.L184:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2775              		.loc 2 110 5 is_stmt 1 view .LVU756
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2776              		.loc 2 110 9 is_stmt 0 view .LVU757
 2777 03aa FFF7FEFF 		bl	cur_shift
 2778              	.LVL246:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2779              		.loc 2 110 8 view .LVU758
 2780 03ae 0028     		cmp	r0, #0
 2781 03b0 DCD1     		bne	.L187
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2782              		.loc 2 110 33 is_stmt 1 view .LVU759
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2783              		.loc 2 110 67 is_stmt 0 view .LVU760
 2784 03b2 DBF80030 		ldr	r3, [fp]
 2785 03b6 D022     		movs	r2, #208
 2786 03b8 02FB03F2 		mul	r2, r2, r3
 2787 03bc 9B4B     		ldr	r3, .L237
 2788 03be 1F46     		mov	r7, r3
 2789 03c0 1344     		add	r3, r3, r2
 2790 03c2 D3E90C01 		ldrd	r0, r1, [r3, #48]
 2791 03c6 3032     		adds	r2, r2, #48
 2792 03c8 85E80300 		stm	r5, {r0, r1}
 2793 03cc BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2794              	.LVL247:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2795              		.loc 2 110 67 view .LVU761
 2796 03ce 3A44     		add	r2, r2, r7
 2797 03d0 D2F804A0 		ldr	r10, [r2, #4]
 2798              	.LVL248:
ARM GAS  /tmp/ccBI4G28.s 			page 76


 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2799              		.loc 2 110 67 view .LVU762
 2800 03d4 9FE6     		b	.L170
 2801              	.LVL249:
 2802              	.L185:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2803              		.loc 2 107 5 is_stmt 1 view .LVU763
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2804              		.loc 2 107 9 is_stmt 0 view .LVU764
 2805 03d6 FFF7FEFF 		bl	cur_shift
 2806              	.LVL250:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2807              		.loc 2 107 8 view .LVU765
 2808 03da 0028     		cmp	r0, #0
 2809 03dc E0D1     		bne	.L186
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2810              		.loc 2 107 33 is_stmt 1 view .LVU766
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2811              		.loc 2 107 67 is_stmt 0 view .LVU767
 2812 03de DBF80030 		ldr	r3, [fp]
 2813 03e2 924F     		ldr	r7, .L237
 2814 03e4 D022     		movs	r2, #208
 2815 03e6 02FB03F2 		mul	r2, r2, r3
 2816 03ea BB18     		adds	r3, r7, r2
 2817 03ec D3E90401 		ldrd	r0, r1, [r3, #16]
 2818 03f0 1032     		adds	r2, r2, #16
 2819 03f2 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2820              	.LVL251:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2821              		.loc 2 107 67 view .LVU768
 2822 03f4 85E80300 		stm	r5, {r0, r1}
 2823 03f8 3A44     		add	r2, r2, r7
 2824 03fa D2F804A0 		ldr	r10, [r2, #4]
 2825              	.LVL252:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2826              		.loc 2 107 67 view .LVU769
 2827 03fe 8AE6     		b	.L170
 2828              	.LVL253:
 2829              	.L168:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2830              		.loc 2 107 67 view .LVU770
 2831              	.LBE111:
 2832              	.LBE137:
 483:src/console.c ****       remapped = remap(c);
 2833              		.loc 2 483 5 is_stmt 1 view .LVU771
 483:src/console.c ****       remapped = remap(c);
 2834              		.loc 2 483 8 is_stmt 0 view .LVU772
 2835 0400 7FF433AE 		bne	.L152
 2836 0404 75E6     		b	.L171
 2837              	.L167:
 483:src/console.c ****       remapped = remap(c);
 2838              		.loc 2 483 5 is_stmt 1 view .LVU773
 484:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2839              		.loc 2 484 7 view .LVU774
 2840              	.LVL254:
 2841              	.LBB138:
  60:src/console.c **** 
ARM GAS  /tmp/ccBI4G28.s 			page 77


 2842              		.loc 2 60 22 view .LVU775
 2843              	.LBB112:
  62:src/console.c **** 
 2844              		.loc 2 62 3 view .LVU776
   1:src/keytran.c ****     {K_RELEASE, -1},
 2845              		.loc 3 1 1 view .LVU777
  59:src/keytran.c ****     {K_RELEASE, -1},
 2846              		.loc 3 59 3 view .LVU778
 117:src/keytran.c ****     {K_RELEASE, -1},
 2847              		.loc 3 117 3 view .LVU779
 2848              		.loc 3 175 1 view .LVU780
  66:src/console.c **** 
 2849              		.loc 2 66 3 view .LVU781
  66:src/console.c **** 
 2850              		.loc 2 66 23 view .LVU782
  66:src/console.c **** 
 2851              		.loc 2 66 30 is_stmt 0 view .LVU783
 2852 0406 8A4B     		ldr	r3, .L237+4
 2853 0408 93E80300 		ldm	r3, {r0, r1}
 2854              	.LVL255:
  66:src/console.c **** 
 2855              		.loc 2 66 30 view .LVU784
 2856 040c 85E80300 		stm	r5, {r0, r1}
 2857 0410 8A46     		mov	r10, r1
 2858              	.LVL256:
  66:src/console.c **** 
 2859              		.loc 2 66 30 view .LVU785
 2860 0412 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2861              	.LVL257:
  66:src/console.c **** 
 2862              		.loc 2 66 30 view .LVU786
 2863 0414 7FE6     		b	.L170
 2864              	.LVL258:
 2865              	.L220:
  72:src/console.c ****     // Make screenshot - allow to report errors
 2866              		.loc 2 72 5 is_stmt 1 view .LVU787
 2867 0416 874B     		ldr	r3, .L237+8
 2868 0418 41F23010 		movw	r0, #4400
 2869 041c 9847     		blx	r3
 2870              	.LVL259:
  72:src/console.c ****     // Make screenshot - allow to report errors
 2871              		.loc 2 72 30 view .LVU788
 2872 041e 0A20     		movs	r0, #10
 2873 0420 854B     		ldr	r3, .L237+12
 2874 0422 9847     		blx	r3
 2875              	.LVL260:
  72:src/console.c ****     // Make screenshot - allow to report errors
 2876              		.loc 2 72 45 view .LVU789
 2877 0424 854B     		ldr	r3, .L237+16
 2878 0426 9847     		blx	r3
 2879              	.LVL261:
  74:src/console.c ****       // Was error just wait for confirmation
 2880              		.loc 2 74 5 view .LVU790
  74:src/console.c ****       // Was error just wait for confirmation
 2881              		.loc 2 74 10 is_stmt 0 view .LVU791
 2882 0428 854B     		ldr	r3, .L237+20
 2883 042a 0120     		movs	r0, #1
ARM GAS  /tmp/ccBI4G28.s 			page 78


 2884 042c 9847     		blx	r3
 2885              	.LVL262:
  74:src/console.c ****       // Was error just wait for confirmation
 2886              		.loc 2 74 8 view .LVU792
 2887 042e 0228     		cmp	r0, #2
 2888 0430 01D1     		bne	.L172
  76:src/console.c ****     }
 2889              		.loc 2 76 7 is_stmt 1 view .LVU793
 2890 0432 844B     		ldr	r3, .L237+24
 2891 0434 9847     		blx	r3
 2892              	.LVL263:
 2893              	.L172:
  79:src/console.c ****     return no_key;
 2894              		.loc 2 79 5 view .LVU794
 2895 0436 7F4B     		ldr	r3, .L237+8
 2896 0438 42F26020 		movw	r0, #8800
 2897 043c 9847     		blx	r3
 2898              	.LVL264:
  79:src/console.c ****     return no_key;
 2899              		.loc 2 79 30 view .LVU795
 2900 043e 0A20     		movs	r0, #10
 2901 0440 7D4B     		ldr	r3, .L237+12
 2902 0442 9847     		blx	r3
 2903              	.LVL265:
  79:src/console.c ****     return no_key;
 2904              		.loc 2 79 45 view .LVU796
 2905 0444 7D4B     		ldr	r3, .L237+16
 2906 0446 9847     		blx	r3
 2907              	.LVL266:
  80:src/console.c ****   }
 2908              		.loc 2 80 5 view .LVU797
  80:src/console.c ****   }
 2909              		.loc 2 80 12 is_stmt 0 view .LVU798
 2910 0448 7F4B     		ldr	r3, .L237+28
 2911 044a 93E80300 		ldm	r3, {r0, r1}
 2912 044e 85E80300 		stm	r5, {r0, r1}
 2913 0452 8A46     		mov	r10, r1
 2914              	.LVL267:
  80:src/console.c ****   }
 2915              		.loc 2 80 12 view .LVU799
 2916 0454 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2917              	.LVL268:
  80:src/console.c ****   }
 2918              		.loc 2 80 12 view .LVU800
 2919 0456 5EE6     		b	.L170
 2920              	.LVL269:
 2921              	.L223:
  80:src/console.c ****   }
 2922              		.loc 2 80 12 view .LVU801
 2923              	.LBE112:
 2924              	.LBE138:
 509:src/console.c **** 	display_current_menu();
 2925              		.loc 2 509 2 is_stmt 1 view .LVU802
 509:src/console.c **** 	display_current_menu();
 2926              		.loc 2 509 13 is_stmt 0 view .LVU803
 2927 0458 8DF81030 		strb	r3, [sp, #16]
 2928 045c CDF814A0 		str	r10, [sp, #20]
ARM GAS  /tmp/ccBI4G28.s 			page 79


 2929 0460 95E80600 		ldm	r5, {r1, r2}
 2930 0464 02A8     		add	r0, sp, #8
 2931 0466 FFF7FEFF 		bl	do_multi
 2932              	.LVL270:
 509:src/console.c **** 	display_current_menu();
 2933              		.loc 2 509 13 view .LVU804
 2934 046a 02AB     		add	r3, sp, #8
 2935 046c 93E80300 		ldm	r3, {r0, r1}
 2936 0470 85E80300 		stm	r5, {r0, r1}
 2937              	.LVL271:
 2938              	.LBB139:
 2939              	.LBB140:
  22:src/menu.c    **** }
 2940              		.loc 1 22 3 view .LVU805
 2941 0474 DBF80000 		ldr	r0, [fp]
 2942              	.LBE140:
 2943              	.LBE139:
 509:src/console.c **** 	display_current_menu();
 2944              		.loc 2 509 13 view .LVU806
 2945 0478 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 2946 047c 0193     		str	r3, [sp, #4]
 2947              	.LVL272:
 509:src/console.c **** 	display_current_menu();
 2948              		.loc 2 509 13 view .LVU807
 2949 047e DDF814A0 		ldr	r10, [sp, #20]
 2950              	.LVL273:
 510:src/console.c ****       }
 2951              		.loc 2 510 2 is_stmt 1 view .LVU808
 2952              	.LBB142:
 2953              	.LBI139:
  21:src/menu.c    ****   display_menu (current_menu);
 2954              		.loc 1 21 6 view .LVU809
 2955              	.LBB141:
  22:src/menu.c    **** }
 2956              		.loc 1 22 3 view .LVU810
 2957 0482 FFF7FEFF 		bl	display_menu
 2958              	.LVL274:
  23:src/menu.c    **** 
 2959              		.loc 1 23 1 is_stmt 0 view .LVU811
 2960 0486 019B     		ldr	r3, [sp, #4]
 2961 0488 68E6     		b	.L175
 2962              	.LVL275:
 2963              	.L219:
  23:src/menu.c    **** 
 2964              		.loc 1 23 1 view .LVU812
 2965              	.LBE141:
 2966              	.LBE142:
 2967              	.LBB143:
 2968              	.LBB113:
  68:src/console.c **** 
 2969              		.loc 2 68 16 is_stmt 1 view .LVU813
  68:src/console.c **** 
 2970              		.loc 2 68 23 is_stmt 0 view .LVU814
 2971 048a 704B     		ldr	r3, .L237+32
 2972 048c 93E80300 		ldm	r3, {r0, r1}
 2973 0490 85E80300 		stm	r5, {r0, r1}
 2974 0494 8A46     		mov	r10, r1
ARM GAS  /tmp/ccBI4G28.s 			page 80


 2975              	.LVL276:
  68:src/console.c **** 
 2976              		.loc 2 68 23 view .LVU815
 2977 0496 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2978              	.LVL277:
  68:src/console.c **** 
 2979              		.loc 2 68 23 view .LVU816
 2980 0498 3DE6     		b	.L170
 2981              	.LVL278:
 2982              	.L204:
  68:src/console.c **** 
 2983              		.loc 2 68 23 view .LVU817
 2984              	.LBE113:
 2985              	.LBE143:
 2986              	.LBB144:
 2987              	.LBB130:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2988              		.loc 1 4 7 view .LVU818
 2989 049a 9A46     		mov	r10, r3
 2990              	.LVL279:
 2991              	.L196:
   6:src/menu.c    ****   }
 2992              		.loc 1 6 5 is_stmt 1 view .LVU819
   6:src/menu.c    ****   }
 2993              		.loc 1 6 18 is_stmt 0 view .LVU820
 2994 049c 0022     		movs	r2, #0
 2995 049e 5346     		mov	r3, r10
 2996              	.LVL280:
   6:src/menu.c    ****   }
 2997              		.loc 1 6 18 view .LVU821
 2998 04a0 CBF80020 		str	r2, [fp]
 2999              	.LVL281:
   6:src/menu.c    ****   }
 3000              		.loc 1 6 18 view .LVU822
 3001 04a4 9246     		mov	r10, r2
 3002 04a6 D8E6     		b	.L199
 3003              	.LVL282:
 3004              	.L227:
   9:src/menu.c    ****   }
 3005              		.loc 1 9 5 is_stmt 1 view .LVU823
   9:src/menu.c    ****   }
 3006              		.loc 1 9 18 is_stmt 0 view .LVU824
 3007 04a8 694A     		ldr	r2, .L237+36
 3008 04aa D2F800A0 		ldr	r10, [r2]
 3009              	.LVL283:
   9:src/menu.c    ****   }
 3010              		.loc 1 9 18 view .LVU825
 3011 04ae CBF800A0 		str	r10, [fp]
 3012 04b2 D2E6     		b	.L199
 3013              	.LVL284:
 3014              	.L221:
   9:src/menu.c    ****   }
 3015              		.loc 1 9 18 view .LVU826
 3016              	.LBE130:
 3017              	.LBE144:
 3018              	.LBB145:
 3019              	.LBB114:
ARM GAS  /tmp/ccBI4G28.s 			page 81


  86:src/console.c ****       case SHIFT_N:
 3020              		.loc 2 86 7 is_stmt 1 view .LVU827
  86:src/console.c ****       case SHIFT_N:
 3021              		.loc 2 86 15 is_stmt 0 view .LVU828
 3022 04b4 FFF7FEFF 		bl	cur_shift
 3023              	.LVL285:
  86:src/console.c ****       case SHIFT_N:
 3024              		.loc 2 86 7 view .LVU829
 3025 04b8 0328     		cmp	r0, #3
  86:src/console.c ****       case SHIFT_N:
 3026              		.loc 2 86 15 view .LVU830
 3027 04ba 0346     		mov	r3, r0
  86:src/console.c ****       case SHIFT_N:
 3028              		.loc 2 86 7 view .LVU831
 3029 04bc 00F2A980 		bhi	.L202
 3030 04c0 0128     		cmp	r0, #1
 3031 04c2 21D8     		bhi	.L176
 3032 04c4 0028     		cmp	r0, #0
 3033 04c6 00F08D80 		beq	.L232
  89:src/console.c ****       case SHIFT_F:
 3034              		.loc 2 89 2 is_stmt 1 view .LVU832
  91:src/console.c **** 	break;
 3035              		.loc 2 91 2 view .LVU833
  91:src/console.c **** 	break;
 3036              		.loc 2 91 23 is_stmt 0 view .LVU834
 3037 04ca 624B     		ldr	r3, .L237+40
 3038 04cc 93E80300 		ldm	r3, {r0, r1}
 3039 04d0 4FF0000A 		mov	r10, #0
 3040              	.LVL286:
  91:src/console.c **** 	break;
 3041              		.loc 2 91 23 view .LVU835
 3042 04d4 85E80300 		stm	r5, {r0, r1}
 3043              	.LVL287:
  91:src/console.c **** 	break;
 3044              		.loc 2 91 23 view .LVU836
 3045              	.LBE114:
 3046              	.LBE145:
 485:src/console.c **** 	set_menu ( remapped.shift );
 3047              		.loc 2 485 7 is_stmt 1 view .LVU837
 501:src/console.c **** 	SET_ST(STAT_MENU);
 3048              		.loc 2 501 7 view .LVU838
 508:src/console.c **** 	remapped = do_multi (remapped);
 3049              		.loc 2 508 7 view .LVU839
 3050              	.LBB146:
 3051              	.LBB115:
  91:src/console.c **** 	break;
 3052              		.loc 2 91 23 is_stmt 0 view .LVU840
 3053 04d8 2A23     		movs	r3, #42
 3054 04da 3FE6     		b	.L175
 3055              	.LVL288:
 3056              	.L191:
 123:src/console.c ****   }
 3057              		.loc 2 123 5 is_stmt 1 view .LVU841
 123:src/console.c ****   }
 3058              		.loc 2 123 9 is_stmt 0 view .LVU842
 3059 04dc FFF7FEFF 		bl	cur_shift
 3060              	.LVL289:
ARM GAS  /tmp/ccBI4G28.s 			page 82


 123:src/console.c ****   }
 3061              		.loc 2 123 8 view .LVU843
 3062 04e0 0128     		cmp	r0, #1
 3063 04e2 19D0     		beq	.L233
 3064              	.L178:
 126:src/console.c ****   case SHIFT_N:    
 3065              		.loc 2 126 3 is_stmt 1 view .LVU844
 126:src/console.c ****   case SHIFT_N:    
 3066              		.loc 2 126 11 is_stmt 0 view .LVU845
 3067 04e4 FFF7FEFF 		bl	cur_shift
 3068              	.LVL290:
 126:src/console.c ****   case SHIFT_N:    
 3069              		.loc 2 126 3 view .LVU846
 3070 04e8 0128     		cmp	r0, #1
 3071 04ea 00F09080 		beq	.L192
 3072 04ee 0228     		cmp	r0, #2
 3073 04f0 00F08280 		beq	.L193
 3074 04f4 0028     		cmp	r0, #0
 3075 04f6 7DD0     		beq	.L194
  62:src/console.c **** 
 3076              		.loc 2 62 41 view .LVU847
 3077 04f8 5FFA8AF3 		uxtb	r3, r10
 3078              	.LVL291:
  62:src/console.c **** 
 3079              		.loc 2 62 41 view .LVU848
 3080              	.LBE115:
 3081              	.LBE146:
 485:src/console.c **** 	set_menu ( remapped.shift );
 3082              		.loc 2 485 7 is_stmt 1 view .LVU849
 485:src/console.c **** 	set_menu ( remapped.shift );
 3083              		.loc 2 485 10 is_stmt 0 view .LVU850
 3084 04fc 2F2B     		cmp	r3, #47
 3085 04fe 00F08C80 		beq	.L234
 3086              	.LBB147:
 3087              	.LBB116:
 137:src/console.c ****   }
 3088              		.loc 2 137 12 view .LVU851
 3089 0502 4FF0000A 		mov	r10, #0
 3090              	.LVL292:
 137:src/console.c ****   }
 3091              		.loc 2 137 12 view .LVU852
 3092 0506 09E6     		b	.L195
 3093              	.LVL293:
 3094              	.L176:
  92:src/console.c ****       case SHIFT_G:
 3095              		.loc 2 92 2 is_stmt 1 view .LVU853
  94:src/console.c **** 	break;
 3096              		.loc 2 94 2 view .LVU854
  94:src/console.c **** 	break;
 3097              		.loc 2 94 9 is_stmt 0 view .LVU855
 3098 0508 534B     		ldr	r3, .L237+44
 3099 050a 93E80300 		ldm	r3, {r0, r1}
 3100 050e 85E80300 		stm	r5, {r0, r1}
 3101 0512 8A46     		mov	r10, r1
 3102              	.LVL294:
  94:src/console.c **** 	break;
 3103              		.loc 2 94 9 view .LVU856
ARM GAS  /tmp/ccBI4G28.s 			page 83


 3104 0514 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3105              	.LVL295:
  94:src/console.c **** 	break;
 3106              		.loc 2 94 9 view .LVU857
 3107 0516 FEE5     		b	.L170
 3108              	.LVL296:
 3109              	.L233:
 123:src/console.c ****   }
 3110              		.loc 2 123 33 is_stmt 1 view .LVU858
 123:src/console.c ****   }
 3111              		.loc 2 123 67 is_stmt 0 view .LVU859
 3112 0518 DBF80030 		ldr	r3, [fp]
 3113 051c 434F     		ldr	r7, .L237
 3114 051e D022     		movs	r2, #208
 3115 0520 02FB03F2 		mul	r2, r2, r3
 3116 0524 BB18     		adds	r3, r7, r2
 3117 0526 D3E92E01 		ldrd	r0, r1, [r3, #184]
 3118 052a B832     		adds	r2, r2, #184
 3119 052c BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3120              	.LVL297:
 123:src/console.c ****   }
 3121              		.loc 2 123 67 view .LVU860
 3122 052e 85E80300 		stm	r5, {r0, r1}
 3123 0532 3A44     		add	r2, r2, r7
 3124 0534 D2F804A0 		ldr	r10, [r2, #4]
 3125              	.LVL298:
 123:src/console.c ****   }
 3126              		.loc 2 123 67 view .LVU861
 3127 0538 EDE5     		b	.L170
 3128              	.LVL299:
 3129              	.L226:
 120:src/console.c ****   case KEY_F6:
 3130              		.loc 2 120 33 is_stmt 1 view .LVU862
 120:src/console.c ****   case KEY_F6:
 3131              		.loc 2 120 67 is_stmt 0 view .LVU863
 3132 053a DBF80030 		ldr	r3, [fp]
 3133 053e 3B4F     		ldr	r7, .L237
 3134 0540 D022     		movs	r2, #208
 3135 0542 02FB03F2 		mul	r2, r2, r3
 3136 0546 BB18     		adds	r3, r7, r2
 3137 0548 D3E92601 		ldrd	r0, r1, [r3, #152]
 3138 054c 9832     		adds	r2, r2, #152
 3139 054e BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3140              	.LVL300:
 120:src/console.c ****   case KEY_F6:
 3141              		.loc 2 120 67 view .LVU864
 3142 0550 85E80300 		stm	r5, {r0, r1}
 3143 0554 3A44     		add	r2, r2, r7
 3144 0556 D2F804A0 		ldr	r10, [r2, #4]
 3145              	.LVL301:
 120:src/console.c ****   case KEY_F6:
 3146              		.loc 2 120 67 view .LVU865
 3147 055a DCE5     		b	.L170
 3148              	.LVL302:
 3149              	.L228:
 117:src/console.c ****   case KEY_F5:
 3150              		.loc 2 117 33 is_stmt 1 view .LVU866
ARM GAS  /tmp/ccBI4G28.s 			page 84


 117:src/console.c ****   case KEY_F5:
 3151              		.loc 2 117 67 is_stmt 0 view .LVU867
 3152 055c DBF80030 		ldr	r3, [fp]
 3153 0560 324F     		ldr	r7, .L237
 3154 0562 D022     		movs	r2, #208
 3155 0564 02FB03F2 		mul	r2, r2, r3
 3156 0568 BB18     		adds	r3, r7, r2
 3157 056a D3E91E01 		ldrd	r0, r1, [r3, #120]
 3158 056e 7832     		adds	r2, r2, #120
 3159 0570 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3160              	.LVL303:
 117:src/console.c ****   case KEY_F5:
 3161              		.loc 2 117 67 view .LVU868
 3162 0572 85E80300 		stm	r5, {r0, r1}
 3163 0576 3A44     		add	r2, r2, r7
 3164 0578 D2F804A0 		ldr	r10, [r2, #4]
 3165              	.LVL304:
 117:src/console.c ****   case KEY_F5:
 3166              		.loc 2 117 67 view .LVU869
 3167 057c CBE5     		b	.L170
 3168              	.LVL305:
 3169              	.L229:
 114:src/console.c ****   case KEY_F4:
 3170              		.loc 2 114 33 is_stmt 1 view .LVU870
 114:src/console.c ****   case KEY_F4:
 3171              		.loc 2 114 67 is_stmt 0 view .LVU871
 3172 057e DBF80030 		ldr	r3, [fp]
 3173 0582 2A4F     		ldr	r7, .L237
 3174 0584 D022     		movs	r2, #208
 3175 0586 02FB03F2 		mul	r2, r2, r3
 3176 058a BB18     		adds	r3, r7, r2
 3177 058c D3E91601 		ldrd	r0, r1, [r3, #88]
 3178 0590 5832     		adds	r2, r2, #88
 3179 0592 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3180              	.LVL306:
 114:src/console.c ****   case KEY_F4:
 3181              		.loc 2 114 67 view .LVU872
 3182 0594 85E80300 		stm	r5, {r0, r1}
 3183 0598 3A44     		add	r2, r2, r7
 3184 059a D2F804A0 		ldr	r10, [r2, #4]
 3185              	.LVL307:
 114:src/console.c ****   case KEY_F4:
 3186              		.loc 2 114 67 view .LVU873
 3187 059e BAE5     		b	.L170
 3188              	.LVL308:
 3189              	.L230:
 111:src/console.c ****   case KEY_F3:
 3190              		.loc 2 111 33 is_stmt 1 view .LVU874
 111:src/console.c ****   case KEY_F3:
 3191              		.loc 2 111 67 is_stmt 0 view .LVU875
 3192 05a0 DBF80030 		ldr	r3, [fp]
 3193 05a4 214F     		ldr	r7, .L237
 3194 05a6 D022     		movs	r2, #208
 3195 05a8 02FB03F2 		mul	r2, r2, r3
 3196 05ac BB18     		adds	r3, r7, r2
 3197 05ae D3E90E01 		ldrd	r0, r1, [r3, #56]
 3198 05b2 3832     		adds	r2, r2, #56
ARM GAS  /tmp/ccBI4G28.s 			page 85


 3199 05b4 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3200              	.LVL309:
 111:src/console.c ****   case KEY_F3:
 3201              		.loc 2 111 67 view .LVU876
 3202 05b6 85E80300 		stm	r5, {r0, r1}
 3203 05ba 3A44     		add	r2, r2, r7
 3204 05bc D2F804A0 		ldr	r10, [r2, #4]
 3205              	.LVL310:
 111:src/console.c ****   case KEY_F3:
 3206              		.loc 2 111 67 view .LVU877
 3207 05c0 A9E5     		b	.L170
 3208              	.LVL311:
 3209              	.L231:
 108:src/console.c ****   case KEY_F2:
 3210              		.loc 2 108 33 is_stmt 1 view .LVU878
 108:src/console.c ****   case KEY_F2:
 3211              		.loc 2 108 67 is_stmt 0 view .LVU879
 3212 05c2 DBF80030 		ldr	r3, [fp]
 3213 05c6 194F     		ldr	r7, .L237
 3214 05c8 D022     		movs	r2, #208
 3215 05ca 02FB03F2 		mul	r2, r2, r3
 3216 05ce BB18     		adds	r3, r7, r2
 3217 05d0 D3E90601 		ldrd	r0, r1, [r3, #24]
 3218 05d4 1832     		adds	r2, r2, #24
 3219 05d6 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3220              	.LVL312:
 108:src/console.c ****   case KEY_F2:
 3221              		.loc 2 108 67 view .LVU880
 3222 05d8 85E80300 		stm	r5, {r0, r1}
 3223 05dc 3A44     		add	r2, r2, r7
 3224 05de D2F804A0 		ldr	r10, [r2, #4]
 3225              	.LVL313:
 108:src/console.c ****   case KEY_F2:
 3226              		.loc 2 108 67 view .LVU881
 3227 05e2 98E5     		b	.L170
 3228              	.LVL314:
 3229              	.L232:
  88:src/console.c **** 	break;
 3230              		.loc 2 88 2 is_stmt 1 view .LVU882
  88:src/console.c **** 	break;
 3231              		.loc 2 88 21 is_stmt 0 view .LVU883
 3232 05e4 1D4A     		ldr	r2, .L237+48
 3233 05e6 92E80300 		ldm	r2, {r0, r1}
 3234 05ea 9A46     		mov	r10, r3
 3235              	.LVL315:
  88:src/console.c **** 	break;
 3236              		.loc 2 88 21 view .LVU884
 3237 05ec 85E80300 		stm	r5, {r0, r1}
 3238              	.LVL316:
  88:src/console.c **** 	break;
 3239              		.loc 2 88 21 view .LVU885
 3240              	.LBE116:
 3241              	.LBE147:
 485:src/console.c **** 	set_menu ( remapped.shift );
 3242              		.loc 2 485 7 is_stmt 1 view .LVU886
 501:src/console.c **** 	SET_ST(STAT_MENU);
 3243              		.loc 2 501 7 view .LVU887
ARM GAS  /tmp/ccBI4G28.s 			page 86


 508:src/console.c **** 	remapped = do_multi (remapped);
 3244              		.loc 2 508 7 view .LVU888
 3245              	.LBB148:
 3246              	.LBB117:
  88:src/console.c **** 	break;
 3247              		.loc 2 88 21 is_stmt 0 view .LVU889
 3248 05f0 2923     		movs	r3, #41
 3249 05f2 B3E5     		b	.L175
 3250              	.LVL317:
 3251              	.L194:
 128:src/console.c ****     break;
 3252              		.loc 2 128 5 is_stmt 1 view .LVU890
 128:src/console.c ****     break;
 3253              		.loc 2 128 24 is_stmt 0 view .LVU891
 3254 05f4 1A4A     		ldr	r2, .L237+52
 3255 05f6 85E5     		b	.L218
 3256              	.L193:
 132:src/console.c ****   case SHIFT_G:
 3257              		.loc 2 132 5 is_stmt 1 view .LVU892
 134:src/console.c ****     break;
 3258              		.loc 2 134 5 view .LVU893
 134:src/console.c ****     break;
 3259              		.loc 2 134 26 is_stmt 0 view .LVU894
 3260 05f8 1A4A     		ldr	r2, .L237+56
 3261 05fa 02EBCA03 		add	r3, r2, r10, lsl #3
 3262 05fe 93E80300 		ldm	r3, {r0, r1}
 3263 0602 12F83A30 		ldrb	r3, [r2, r10, lsl #3]	@ zero_extendqisi2
 3264              	.LVL318:
 134:src/console.c ****     break;
 3265              		.loc 2 134 26 view .LVU895
 3266 0606 85E80300 		stm	r5, {r0, r1}
 3267 060a 8A46     		mov	r10, r1
 3268              	.LVL319:
 134:src/console.c ****     break;
 3269              		.loc 2 134 26 view .LVU896
 3270 060c 83E5     		b	.L170
 3271              	.LVL320:
 3272              	.L192:
 129:src/console.c ****   case SHIFT_F:
 3273              		.loc 2 129 5 is_stmt 1 view .LVU897
 131:src/console.c ****     break;
 3274              		.loc 2 131 5 view .LVU898
 131:src/console.c ****     break;
 3275              		.loc 2 131 26 is_stmt 0 view .LVU899
 3276 060e 164A     		ldr	r2, .L237+60
 3277 0610 78E5     		b	.L218
 3278              	.L202:
  86:src/console.c ****       case SHIFT_N:
 3279              		.loc 2 86 7 view .LVU900
 3280 0612 5346     		mov	r3, r10
 3281 0614 4FF0000A 		mov	r10, #0
 3282              	.LVL321:
  86:src/console.c ****       case SHIFT_N:
 3283              		.loc 2 86 7 view .LVU901
 3284 0618 A0E5     		b	.L175
 3285              	.LVL322:
 3286              	.L234:
ARM GAS  /tmp/ccBI4G28.s 			page 87


  86:src/console.c ****       case SHIFT_N:
 3287              		.loc 2 86 7 view .LVU902
 3288              	.LBE117:
 3289              	.LBE148:
 486:src/console.c **** 	display_current_menu ();
 3290              		.loc 2 486 2 is_stmt 1 view .LVU903
 3291              	.LBB149:
   3:src/menu.c    ****   if (new_menu == current_menu) {
 3292              		.loc 1 3 6 view .LVU904
 3293              	.LBB131:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3294              		.loc 1 4 3 view .LVU905
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3295              		.loc 1 4 7 is_stmt 0 view .LVU906
 3296 061a DBF80030 		ldr	r3, [fp]
 3297              	.LVL323:
   5:src/menu.c    ****     current_menu = 0;
 3298              		.loc 1 5 3 is_stmt 1 view .LVU907
   5:src/menu.c    ****     current_menu = 0;
 3299              		.loc 1 5 6 is_stmt 0 view .LVU908
 3300 061e 002B     		cmp	r3, #0
 3301 0620 3FF43BAF 		beq	.L204
 3302              	.LBE131:
 3303              	.LBE149:
 3304              	.LBB150:
 3305              	.LBB118:
 137:src/console.c ****   }
 3306              		.loc 2 137 12 view .LVU909
 3307 0624 4FF0000A 		mov	r10, #0
 3308              	.LVL324:
 137:src/console.c ****   }
 3309              		.loc 2 137 12 view .LVU910
 3310 0628 15E6     		b	.L197
 3311              	.L238:
 3312 062a 00BF     		.align	2
 3313              	.L237:
 3314 062c 00000000 		.word	.LANCHOR3
 3315 0630 00000000 		.word	.LANCHOR16
 3316 0634 F5020008 		.word	134218485
 3317 0638 05040008 		.word	134218757
 3318 063c F9020008 		.word	134218489
 3319 0640 79030008 		.word	134218617
 3320 0644 99030008 		.word	134218649
 3321 0648 00000000 		.word	.LANCHOR6
 3322 064c 00000000 		.word	.LANCHOR7
 3323 0650 00000000 		.word	.LANCHOR2
 3324 0654 E0000000 		.word	.LANCHOR9+224
 3325 0658 00000000 		.word	.LANCHOR10
 3326 065c E0000000 		.word	.LANCHOR8+224
 3327 0660 00000000 		.word	.LANCHOR8
 3328 0664 00000000 		.word	.LANCHOR12
 3329 0668 00000000 		.word	.LANCHOR9
 3330              	.LBE118:
 3331              	.LBE150:
 3332              		.cfi_endproc
 3333              	.LFE26:
 3335              		.global	n_p
ARM GAS  /tmp/ccBI4G28.s 			page 88


 3336              		.comm	print_string,22,4
 3337              		.global	spaces
 3338              		.global	release
 3339              		.global	h_shift
 3340              		.global	g_shift
 3341              		.global	f_shift
 3342              		.global	heartbeat
 3343              		.global	no_key
 3344              		.global	MID_MENU
 3345              		.section	.rodata.str1.4,"aMS",%progbits,1
 3346              		.align	2
 3347              	.LC3:
 3348 0000 53797374 		.ascii	"System!\000"
 3348      656D2100 
 3349              		.global	mid_menu
 3350              		.section	.bss.current_menu,"aw",%nobits
 3351              		.align	2
 3352              		.set	.LANCHOR1,. + 0
 3355              	current_menu:
 3356 0000 00000000 		.space	4
 3357              		.section	.bss.last_menu,"aw",%nobits
 3358              		.align	2
 3359              		.set	.LANCHOR2,. + 0
 3362              	last_menu:
 3363 0000 00000000 		.space	4
 3364              		.section	.bss.mdots,"aw",%nobits
 3365              		.align	2
 3366              		.set	.LANCHOR0,. + 0
 3369              	mdots:
 3370 0000 00000000 		.space	400
 3370      00000000 
 3370      00000000 
 3370      00000000 
 3370      00000000 
 3371              		.section	.bss.n_p,"aw",%nobits
 3372              		.align	2
 3375              	n_p:
 3376 0000 00000000 		.space	4
 3377              		.section	.bss.start_ticks,"aw",%nobits
 3378              		.align	2
 3379              		.set	.LANCHOR4,. + 0
 3382              	start_ticks:
 3383 0000 00000000 		.space	4
 3384              		.section	.data.f_shift,"aw"
 3385              		.align	2
 3386              		.set	.LANCHOR13,. + 0
 3389              	f_shift:
 3390 0000 29       		.byte	41
 3391 0001 000000   		.space	3
 3392 0004 FFFFFFFF 		.word	-1
 3393              		.section	.data.g_shift,"aw"
 3394              		.align	2
 3395              		.set	.LANCHOR14,. + 0
 3398              	g_shift:
 3399 0000 2A       		.byte	42
 3400 0001 000000   		.space	3
 3401 0004 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccBI4G28.s 			page 89


 3402              		.section	.data.h_shift,"aw"
 3403              		.align	2
 3404              		.set	.LANCHOR10,. + 0
 3407              	h_shift:
 3408 0000 2B       		.byte	43
 3409 0001 000000   		.space	3
 3410 0004 FFFFFFFF 		.word	-1
 3411              		.section	.data.heartbeat,"aw"
 3412              		.align	2
 3413              		.set	.LANCHOR16,. + 0
 3416              	heartbeat:
 3417 0000 62       		.byte	98
 3418 0001 000000   		.space	3
 3419 0004 FFFFFFFF 		.word	-1
 3420              		.section	.data.no_key,"aw"
 3421              		.align	2
 3422              		.set	.LANCHOR6,. + 0
 3425              	no_key:
 3426 0000 2E       		.byte	46
 3427 0001 000000   		.space	3
 3428 0004 00000000 		.word	0
 3429              		.section	.data.release,"aw"
 3430              		.align	2
 3431              		.set	.LANCHOR7,. + 0
 3434              	release:
 3435 0000 63       		.byte	99
 3436 0001 000000   		.space	3
 3437 0004 FFFFFFFF 		.word	-1
 3438              		.section	.data.spaces,"aw"
 3439              		.align	2
 3440              		.set	.LANCHOR5,. + 0
 3443              	spaces:
 3444 0000 20202020 		.ascii	"                     \000"
 3444      20202020 
 3444      20202020 
 3444      20202020 
 3444      20202020 
 3445              		.section	.rodata.MID_MENU,"a"
 3446              		.align	2
 3447              		.set	.LANCHOR15,. + 0
 3450              	MID_MENU:
 3451 0000 00000000 		.word	.LC3
 3452 0004 00000000 		.word	mid_menu
 3453 0008 00000000 		.word	0
 3454 000c 00000000 		.word	0
 3455              		.section	.rodata.Menus,"a"
 3456              		.align	2
 3457              		.set	.LANCHOR3,. + 0
 3460              	Menus:
 3461 0000 426C616E 		.ascii	"Blank\000"
 3461      6B00
 3462 0006 00000000 		.space	9
 3462      00000000 
 3462      00
 3463 000f 00       		.space	1
 3464 0010 2E       		.byte	46
 3465 0011 000000   		.space	3
ARM GAS  /tmp/ccBI4G28.s 			page 90


 3466 0014 FFFFFFFF 		.word	-1
 3467 0018 2E       		.byte	46
 3468 0019 000000   		.space	3
 3469 001c FFFFFFFF 		.word	-1
 3470 0020 00       		.ascii	"\000"
 3471 0021 00000000 		.space	7
 3471      000000
 3472 0028 00       		.ascii	"\000"
 3473 0029 00000000 		.space	7
 3473      000000
 3474 0030 2E       		.byte	46
 3475 0031 000000   		.space	3
 3476 0034 FFFFFFFF 		.word	-1
 3477 0038 2E       		.byte	46
 3478 0039 000000   		.space	3
 3479 003c FFFFFFFF 		.word	-1
 3480 0040 00       		.ascii	"\000"
 3481 0041 00000000 		.space	7
 3481      000000
 3482 0048 00       		.ascii	"\000"
 3483 0049 00000000 		.space	7
 3483      000000
 3484 0050 2E       		.byte	46
 3485 0051 000000   		.space	3
 3486 0054 FFFFFFFF 		.word	-1
 3487 0058 2E       		.byte	46
 3488 0059 000000   		.space	3
 3489 005c FFFFFFFF 		.word	-1
 3490 0060 00       		.ascii	"\000"
 3491 0061 00000000 		.space	7
 3491      000000
 3492 0068 00       		.ascii	"\000"
 3493 0069 00000000 		.space	7
 3493      000000
 3494 0070 2E       		.byte	46
 3495 0071 000000   		.space	3
 3496 0074 FFFFFFFF 		.word	-1
 3497 0078 2E       		.byte	46
 3498 0079 000000   		.space	3
 3499 007c FFFFFFFF 		.word	-1
 3500 0080 00       		.ascii	"\000"
 3501 0081 00000000 		.space	7
 3501      000000
 3502 0088 00       		.ascii	"\000"
 3503 0089 00000000 		.space	7
 3503      000000
 3504 0090 2C       		.byte	44
 3505 0091 000000   		.space	3
 3506 0094 FFFFFFFF 		.word	-1
 3507 0098 2E       		.byte	46
 3508 0099 000000   		.space	3
 3509 009c FFFFFFFF 		.word	-1
 3510 00a0 2D2D0D00 		.ascii	"--\015\000"
 3511 00a4 00000000 		.space	4
 3512 00a8 00       		.ascii	"\000"
 3513 00a9 00000000 		.space	7
 3513      000000
ARM GAS  /tmp/ccBI4G28.s 			page 91


 3514 00b0 2D       		.byte	45
 3515 00b1 000000   		.space	3
 3516 00b4 FFFFFFFF 		.word	-1
 3517 00b8 2E       		.byte	46
 3518 00b9 000000   		.space	3
 3519 00bc FFFFFFFF 		.word	-1
 3520 00c0 43505800 		.ascii	"CPX\000"
 3521 00c4 00000000 		.space	4
 3522 00c8 00       		.ascii	"\000"
 3523 00c9 00000000 		.space	7
 3523      000000
 3524 00d0 436C6561 		.ascii	"Clear\000"
 3524      7200
 3525 00d6 00000000 		.space	9
 3525      00000000 
 3525      00
 3526 00df 00       		.space	1
 3527 00e0 10       		.byte	16
 3528 00e1 000000   		.space	3
 3529 00e4 01000000 		.word	1
 3530 00e8 2E       		.byte	46
 3531 00e9 000000   		.space	3
 3532 00ec FFFFFFFF 		.word	-1
 3533 00f0 434C5072 		.ascii	"CLProg\000"
 3533      6F6700
 3534 00f7 00       		.space	1
 3535 00f8 00       		.ascii	"\000"
 3536 00f9 00000000 		.space	7
 3536      000000
 3537 0100 10       		.byte	16
 3538 0101 000000   		.space	3
 3539 0104 02000000 		.word	2
 3540 0108 2E       		.byte	46
 3541 0109 000000   		.space	3
 3542 010c FFFFFFFF 		.word	-1
 3543 0110 434C9100 		.ascii	"CL\221\000"
 3544 0114 00000000 		.space	4
 3545 0118 00       		.ascii	"\000"
 3546 0119 00000000 		.space	7
 3546      000000
 3547 0120 10       		.byte	16
 3548 0121 000000   		.space	3
 3549 0124 03000000 		.word	3
 3550 0128 2E       		.byte	46
 3551 0129 000000   		.space	3
 3552 012c FFFFFFFF 		.word	-1
 3553 0130 434C7800 		.ascii	"CLx\000"
 3554 0134 00000000 		.space	4
 3555 0138 00       		.ascii	"\000"
 3556 0139 00000000 		.space	7
 3556      000000
 3557 0140 2E       		.byte	46
 3558 0141 000000   		.space	3
 3559 0144 FFFFFFFF 		.word	-1
 3560 0148 2E       		.byte	46
 3561 0149 000000   		.space	3
 3562 014c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccBI4G28.s 			page 92


 3563 0150 00       		.ascii	"\000"
 3564 0151 00000000 		.space	7
 3564      000000
 3565 0158 00       		.ascii	"\000"
 3566 0159 00000000 		.space	7
 3566      000000
 3567 0160 2C       		.byte	44
 3568 0161 000000   		.space	3
 3569 0164 FFFFFFFF 		.word	-1
 3570 0168 2E       		.byte	46
 3571 0169 000000   		.space	3
 3572 016c FFFFFFFF 		.word	-1
 3573 0170 2D2D0D00 		.ascii	"--\015\000"
 3574 0174 00000000 		.space	4
 3575 0178 00       		.ascii	"\000"
 3576 0179 00000000 		.space	7
 3576      000000
 3577 0180 2D       		.byte	45
 3578 0181 000000   		.space	3
 3579 0184 FFFFFFFF 		.word	-1
 3580 0188 2E       		.byte	46
 3581 0189 000000   		.space	3
 3582 018c FFFFFFFF 		.word	-1
 3583 0190 43505800 		.ascii	"CPX\000"
 3584 0194 00000000 		.space	4
 3585 0198 00       		.ascii	"\000"
 3586 0199 00000000 		.space	7
 3586      000000
 3587 01a0 44495350 		.ascii	"DISP\000"
 3587      00
 3588 01a5 00000000 		.space	10
 3588      00000000 
 3588      0000
 3589 01af 00       		.space	1
 3590 01b0 00       		.byte	0
 3591 01b1 000000   		.space	3
 3592 01b4 03000000 		.word	3
 3593 01b8 05       		.byte	5
 3594 01b9 000000   		.space	3
 3595 01bc 01000000 		.word	1
 3596 01c0 414C4C00 		.ascii	"ALL\000"
 3597 01c4 00000000 		.space	4
 3598 01c8 6120622F 		.ascii	"a b/c\000"
 3598      6300
 3599 01ce 0000     		.space	2
 3600 01d0 01       		.byte	1
 3601 01d1 000000   		.space	3
 3602 01d4 03000000 		.word	3
 3603 01d8 05       		.byte	5
 3604 01d9 000000   		.space	3
 3605 01dc 02000000 		.word	2
 3606 01e0 46495800 		.ascii	"FIX\000"
 3607 01e4 00000000 		.space	4
 3608 01e8 642F6300 		.ascii	"d/c\000"
 3609 01ec 00000000 		.space	4
 3610 01f0 02       		.byte	2
 3611 01f1 000000   		.space	3
ARM GAS  /tmp/ccBI4G28.s 			page 93


 3612 01f4 03000000 		.word	3
 3613 01f8 06       		.byte	6
 3614 01f9 000000   		.space	3
 3615 01fc 01000000 		.word	1
 3616 0200 53434900 		.ascii	"SCI\000"
 3617 0204 00000000 		.space	4
 3618 0208 482E4D2E 		.ascii	"H.M.S.\000"
 3618      532E00
 3619 020f 00       		.space	1
 3620 0210 03       		.byte	3
 3621 0211 000000   		.space	3
 3622 0214 03000000 		.word	3
 3623 0218 07       		.byte	7
 3624 0219 000000   		.space	3
 3625 021c 01000000 		.word	1
 3626 0220 454E4700 		.ascii	"ENG\000"
 3627 0224 00000000 		.space	4
 3628 0228 482E6400 		.ascii	"H.d\000"
 3629 022c 00000000 		.space	4
 3630 0230 2C       		.byte	44
 3631 0231 000000   		.space	3
 3632 0234 FFFFFFFF 		.word	-1
 3633 0238 26       		.byte	38
 3634 0239 000000   		.space	3
 3635 023c 03000000 		.word	3
 3636 0240 2D2D0D00 		.ascii	"--\015\000"
 3637 0244 00000000 		.space	4
 3638 0248 2E2F2C00 		.ascii	"./,\000"
 3639 024c 00000000 		.space	4
 3640 0250 2D       		.byte	45
 3641 0251 000000   		.space	3
 3642 0254 FFFFFFFF 		.word	-1
 3643 0258 2E       		.byte	46
 3644 0259 000000   		.space	3
 3645 025c FFFFFFFF 		.word	-1
 3646 0260 43505800 		.ascii	"CPX\000"
 3647 0264 00000000 		.space	4
 3648 0268 00       		.ascii	"\000"
 3649 0269 00000000 		.space	7
 3649      000000
 3650 0270 42415345 		.ascii	"BASE\000"
 3650      00
 3651 0275 00000000 		.space	10
 3651      00000000 
 3651      0000
 3652 027f 00       		.space	1
 3653 0280 0E       		.byte	14
 3654 0281 000000   		.space	3
 3655 0284 01000000 		.word	1
 3656 0288 0E       		.byte	14
 3657 0289 000000   		.space	3
 3658 028c 03000000 		.word	3
 3659 0290 42494E00 		.ascii	"BIN\000"
 3660 0294 00000000 		.space	4
 3661 0298 6E6F7400 		.ascii	"not\000"
 3662 029c 00000000 		.space	4
 3663 02a0 0E       		.byte	14
ARM GAS  /tmp/ccBI4G28.s 			page 94


 3664 02a1 000000   		.space	3
 3665 02a4 02000000 		.word	2
 3666 02a8 13       		.byte	19
 3667 02a9 000000   		.space	3
 3668 02ac 03000000 		.word	3
 3669 02b0 4F435400 		.ascii	"OCT\000"
 3670 02b4 00000000 		.space	4
 3671 02b8 616E6400 		.ascii	"and\000"
 3672 02bc 00000000 		.space	4
 3673 02c0 0F       		.byte	15
 3674 02c1 000000   		.space	3
 3675 02c4 01000000 		.word	1
 3676 02c8 14       		.byte	20
 3677 02c9 000000   		.space	3
 3678 02cc 03000000 		.word	3
 3679 02d0 44454300 		.ascii	"DEC\000"
 3680 02d4 00000000 		.space	4
 3681 02d8 6F7200   		.ascii	"or\000"
 3682 02db 00000000 		.space	5
 3682      00
 3683 02e0 0F       		.byte	15
 3684 02e1 000000   		.space	3
 3685 02e4 02000000 		.word	2
 3686 02e8 15       		.byte	21
 3687 02e9 000000   		.space	3
 3688 02ec 03000000 		.word	3
 3689 02f0 48455800 		.ascii	"HEX\000"
 3690 02f4 00000000 		.space	4
 3691 02f8 786F7200 		.ascii	"xor\000"
 3692 02fc 00000000 		.space	4
 3693 0300 2C       		.byte	44
 3694 0301 000000   		.space	3
 3695 0304 FFFFFFFF 		.word	-1
 3696 0308 16       		.byte	22
 3697 0309 000000   		.space	3
 3698 030c 03000000 		.word	3
 3699 0310 2D2D0D00 		.ascii	"--\015\000"
 3700 0314 00000000 		.space	4
 3701 0318 524D4452 		.ascii	"RMDR\000"
 3701      00
 3702 031d 000000   		.space	3
 3703 0320 2D       		.byte	45
 3704 0321 000000   		.space	3
 3705 0324 FFFFFFFF 		.word	-1
 3706 0328 2E       		.byte	46
 3707 0329 000000   		.space	3
 3708 032c FFFFFFFF 		.word	-1
 3709 0330 43505800 		.ascii	"CPX\000"
 3710 0334 00000000 		.space	4
 3711 0338 00       		.ascii	"\000"
 3712 0339 00000000 		.space	7
 3712      000000
 3713 0340 414E474C 		.ascii	"ANGLES\000"
 3713      455300
 3714 0347 00000000 		.space	8
 3714      00000000 
 3715 034f 00       		.space	1
ARM GAS  /tmp/ccBI4G28.s 			page 95


 3716 0350 06       		.byte	6
 3717 0351 000000   		.space	3
 3718 0354 02000000 		.word	2
 3719 0358 04       		.byte	4
 3720 0359 000000   		.space	3
 3721 035c 01000000 		.word	1
 3722 0360 44454700 		.ascii	"DEG\000"
 3723 0364 00000000 		.space	4
 3724 0368 500D5200 		.ascii	"P\015R\000"
 3725 036c 00000000 		.space	4
 3726 0370 07       		.byte	7
 3727 0371 000000   		.space	3
 3728 0374 02000000 		.word	2
 3729 0378 04       		.byte	4
 3730 0379 000000   		.space	3
 3731 037c 02000000 		.word	2
 3732 0380 52414400 		.ascii	"RAD\000"
 3733 0384 00000000 		.space	4
 3734 0388 520D5000 		.ascii	"R\015P\000"
 3735 038c 00000000 		.space	4
 3736 0390 08       		.byte	8
 3737 0391 000000   		.space	3
 3738 0394 02000000 		.word	2
 3739 0398 00       		.byte	0
 3740 0399 000000   		.space	3
 3741 039c 01000000 		.word	1
 3742 03a0 47524144 		.ascii	"GRAD\000"
 3742      00
 3743 03a5 000000   		.space	3
 3744 03a8 48595000 		.ascii	"HYP\000"
 3745 03ac 00000000 		.space	4
 3746 03b0 06       		.byte	6
 3747 03b1 000000   		.space	3
 3748 03b4 01000000 		.word	1
 3749 03b8 07       		.byte	7
 3750 03b9 000000   		.space	3
 3751 03bc 01000000 		.word	1
 3752 03c0 482E4D53 		.ascii	"H.MS\000"
 3752      00
 3753 03c5 000000   		.space	3
 3754 03c8 482E6400 		.ascii	"H.d\000"
 3755 03cc 00000000 		.space	4
 3756 03d0 2C       		.byte	44
 3757 03d1 000000   		.space	3
 3758 03d4 FFFFFFFF 		.word	-1
 3759 03d8 00       		.byte	0
 3760 03d9 000000   		.space	3
 3761 03dc 02000000 		.word	2
 3762 03e0 2D2D0D00 		.ascii	"--\015\000"
 3763 03e4 00000000 		.space	4
 3764 03e8 4859509D 		.ascii	"HYP\235\000"
 3764      00
 3765 03ed 000000   		.space	3
 3766 03f0 2D       		.byte	45
 3767 03f1 000000   		.space	3
 3768 03f4 FFFFFFFF 		.word	-1
 3769 03f8 2E       		.byte	46
ARM GAS  /tmp/ccBI4G28.s 			page 96


 3770 03f9 000000   		.space	3
 3771 03fc FFFFFFFF 		.word	-1
 3772 0400 43505800 		.ascii	"CPX\000"
 3773 0404 00000000 		.space	4
 3774 0408 00       		.ascii	"\000"
 3775 0409 00000000 		.space	7
 3775      000000
 3776 0410 4D495343 		.ascii	"MISC\000"
 3776      00
 3777 0415 00000000 		.space	10
 3777      00000000 
 3777      0000
 3778 041f 00       		.space	1
 3779 0420 25       		.byte	37
 3780 0421 000000   		.space	3
 3781 0424 01000000 		.word	1
 3782 0428 14       		.byte	20
 3783 0429 000000   		.space	3
 3784 042c 01000000 		.word	1
 3785 0430 7C587C00 		.ascii	"|X|\000"
 3786 0434 00000000 		.space	4
 3787 0438 329C00   		.ascii	"2\234\000"
 3788 043b 00000000 		.space	5
 3788      00
 3789 0440 25       		.byte	37
 3790 0441 000000   		.space	3
 3791 0444 02000000 		.word	2
 3792 0448 14       		.byte	20
 3793 0449 000000   		.space	3
 3794 044c 02000000 		.word	2
 3795 0450 524E4400 		.ascii	"RND\000"
 3796 0454 00000000 		.space	4
 3797 0458 4C6F67BA 		.ascii	"Log\272\000"
 3797      00
 3798 045d 000000   		.space	3
 3799 0460 26       		.byte	38
 3800 0461 000000   		.space	3
 3801 0464 01000000 		.word	1
 3802 0468 15       		.byte	21
 3803 0469 000000   		.space	3
 3804 046c 02000000 		.word	2
 3805 0470 49506172 		.ascii	"IPart\000"
 3805      7400
 3806 0476 0000     		.space	2
 3807 0478 4C6F678B 		.ascii	"Log\213\000"
 3807      00
 3808 047d 000000   		.space	3
 3809 0480 26       		.byte	38
 3810 0481 000000   		.space	3
 3811 0484 02000000 		.word	2
 3812 0488 16       		.byte	22
 3813 0489 000000   		.space	3
 3814 048c 02000000 		.word	2
 3815 0490 46506172 		.ascii	"FPart\000"
 3815      7400
 3816 0496 0000     		.space	2
 3817 0498 7C7C656C 		.ascii	"||el\000"
ARM GAS  /tmp/ccBI4G28.s 			page 97


 3817      00
 3818 049d 000000   		.space	3
 3819 04a0 2C       		.byte	44
 3820 04a1 000000   		.space	3
 3821 04a4 FFFFFFFF 		.word	-1
 3822 04a8 22       		.byte	34
 3823 04a9 000000   		.space	3
 3824 04ac 02000000 		.word	2
 3825 04b0 2D2D0D00 		.ascii	"--\015\000"
 3826 04b4 00000000 		.space	4
 3827 04b8 832500   		.ascii	"\203%\000"
 3828 04bb 00000000 		.space	5
 3828      00
 3829 04c0 2D       		.byte	45
 3830 04c1 000000   		.space	3
 3831 04c4 FFFFFFFF 		.word	-1
 3832 04c8 2E       		.byte	46
 3833 04c9 000000   		.space	3
 3834 04cc FFFFFFFF 		.word	-1
 3835 04d0 43505800 		.ascii	"CPX\000"
 3836 04d4 00000000 		.space	4
 3837 04d8 00       		.ascii	"\000"
 3838 04d9 00000000 		.space	7
 3838      000000
 3839 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 3839      204B6579 
 3839      00
 3840 04e9 00000000 		.space	6
 3840      0000
 3841 04ef 00       		.space	1
 3842 04f0 0D       		.byte	13
 3843 04f1 000000   		.space	3
 3844 04f4 01000000 		.word	1
 3845 04f8 2E       		.byte	46
 3846 04f9 000000   		.space	3
 3847 04fc FFFFFFFF 		.word	-1
 3848 0500 53686F77 		.ascii	"Show\016\000"
 3848      0E00
 3849 0506 0000     		.space	2
 3850 0508 00       		.ascii	"\000"
 3851 0509 00000000 		.space	7
 3851      000000
 3852 0510 0D       		.byte	13
 3853 0511 000000   		.space	3
 3854 0514 02000000 		.word	2
 3855 0518 2E       		.byte	46
 3856 0519 000000   		.space	3
 3857 051c FFFFFFFF 		.word	-1
 3858 0520 53686F77 		.ascii	"Show\015\000"
 3858      0D00
 3859 0526 0000     		.space	2
 3860 0528 00       		.ascii	"\000"
 3861 0529 00000000 		.space	7
 3861      000000
 3862 0530 0D       		.byte	13
 3863 0531 000000   		.space	3
 3864 0534 03000000 		.word	3
ARM GAS  /tmp/ccBI4G28.s 			page 98


 3865 0538 2E       		.byte	46
 3866 0539 000000   		.space	3
 3867 053c FFFFFFFF 		.word	-1
 3868 0540 78173F00 		.ascii	"x\027?\000"
 3869 0544 00000000 		.space	4
 3870 0548 00       		.ascii	"\000"
 3871 0549 00000000 		.space	7
 3871      000000
 3872 0550 2E       		.byte	46
 3873 0551 000000   		.space	3
 3874 0554 FFFFFFFF 		.word	-1
 3875 0558 2E       		.byte	46
 3876 0559 000000   		.space	3
 3877 055c FFFFFFFF 		.word	-1
 3878 0560 00       		.ascii	"\000"
 3879 0561 00000000 		.space	7
 3879      000000
 3880 0568 00       		.ascii	"\000"
 3881 0569 00000000 		.space	7
 3881      000000
 3882 0570 2C       		.byte	44
 3883 0571 000000   		.space	3
 3884 0574 FFFFFFFF 		.word	-1
 3885 0578 2E       		.byte	46
 3886 0579 000000   		.space	3
 3887 057c FFFFFFFF 		.word	-1
 3888 0580 2D2D0D00 		.ascii	"--\015\000"
 3889 0584 00000000 		.space	4
 3890 0588 00       		.ascii	"\000"
 3891 0589 00000000 		.space	7
 3891      000000
 3892 0590 2D       		.byte	45
 3893 0591 000000   		.space	3
 3894 0594 FFFFFFFF 		.word	-1
 3895 0598 2E       		.byte	46
 3896 0599 000000   		.space	3
 3897 059c FFFFFFFF 		.word	-1
 3898 05a0 43505800 		.ascii	"CPX\000"
 3899 05a4 00000000 		.space	4
 3900 05a8 00       		.ascii	"\000"
 3901 05a9 00000000 		.space	7
 3901      000000
 3902 05b0 50726F67 		.ascii	"Program\000"
 3902      72616D00 
 3903 05b8 00000000 		.space	7
 3903      000000
 3904 05bf 00       		.space	1
 3905 05c0 27       		.byte	39
 3906 05c1 000000   		.space	3
 3907 05c4 01000000 		.word	1
 3908 05c8 28       		.byte	40
 3909 05c9 000000   		.space	3
 3910 05cc 01000000 		.word	1
 3911 05d0 4C424C00 		.ascii	"LBL\000"
 3912 05d4 00000000 		.space	4
 3913 05d8 44534500 		.ascii	"DSE\000"
 3914 05dc 00000000 		.space	4
ARM GAS  /tmp/ccBI4G28.s 			page 99


 3915 05e0 27       		.byte	39
 3916 05e1 000000   		.space	3
 3917 05e4 02000000 		.word	2
 3918 05e8 28       		.byte	40
 3919 05e9 000000   		.space	3
 3920 05ec 02000000 		.word	2
 3921 05f0 52544E00 		.ascii	"RTN\000"
 3922 05f4 00000000 		.space	4
 3923 05f8 49534700 		.ascii	"ISG\000"
 3924 05fc 00000000 		.space	4
 3925 0600 25       		.byte	37
 3926 0601 000000   		.space	3
 3927 0604 03000000 		.word	3
 3928 0608 2E       		.byte	46
 3929 0609 000000   		.space	3
 3930 060c FFFFFFFF 		.word	-1
 3931 0610 50617573 		.ascii	"Pause\000"
 3931      6500
 3932 0616 0000     		.space	2
 3933 0618 00       		.ascii	"\000"
 3934 0619 00000000 		.space	7
 3934      000000
 3935 0620 12       		.byte	18
 3936 0621 000000   		.space	3
 3937 0624 03000000 		.word	3
 3938 0628 2E       		.byte	46
 3939 0629 000000   		.space	3
 3940 062c FFFFFFFF 		.word	-1
 3941 0630 47544F00 		.ascii	"GTO\000"
 3942 0634 00000000 		.space	4
 3943 0638 00       		.ascii	"\000"
 3944 0639 00000000 		.space	7
 3944      000000
 3945 0640 2C       		.byte	44
 3946 0641 000000   		.space	3
 3947 0644 FFFFFFFF 		.word	-1
 3948 0648 2E       		.byte	46
 3949 0649 000000   		.space	3
 3950 064c FFFFFFFF 		.word	-1
 3951 0650 2D2D0D00 		.ascii	"--\015\000"
 3952 0654 00000000 		.space	4
 3953 0658 00       		.ascii	"\000"
 3954 0659 00000000 		.space	7
 3954      000000
 3955 0660 2D       		.byte	45
 3956 0661 000000   		.space	3
 3957 0664 FFFFFFFF 		.word	-1
 3958 0668 2E       		.byte	46
 3959 0669 000000   		.space	3
 3960 066c FFFFFFFF 		.word	-1
 3961 0670 43505800 		.ascii	"CPX\000"
 3962 0674 00000000 		.space	4
 3963 0678 00       		.ascii	"\000"
 3964 0679 00000000 		.space	7
 3964      000000
 3965 0680 53657475 		.ascii	"Setup 1\000"
 3965      70203100 
ARM GAS  /tmp/ccBI4G28.s 			page 100


 3966 0688 00000000 		.space	7
 3966      000000
 3967 068f 00       		.space	1
 3968 0690 30       		.byte	48
 3969 0691 000000   		.space	3
 3970 0694 00000000 		.word	0
 3971 0698 2E       		.byte	46
 3972 0699 000000   		.space	3
 3973 069c FFFFFFFF 		.word	-1
 3974 06a0 53797374 		.ascii	"System\000"
 3974      656D00
 3975 06a7 00       		.space	1
 3976 06a8 00       		.ascii	"\000"
 3977 06a9 00000000 		.space	7
 3977      000000
 3978 06b0 31       		.byte	49
 3979 06b1 000000   		.space	3
 3980 06b4 09000000 		.word	9
 3981 06b8 2E       		.byte	46
 3982 06b9 000000   		.space	3
 3983 06bc FFFFFFFF 		.word	-1
 3984 06c0 48454C50 		.ascii	"HELP\000"
 3984      00
 3985 06c5 000000   		.space	3
 3986 06c8 00       		.ascii	"\000"
 3987 06c9 00000000 		.space	7
 3987      000000
 3988 06d0 31       		.byte	49
 3989 06d1 000000   		.space	3
 3990 06d4 02000000 		.word	2
 3991 06d8 31       		.byte	49
 3992 06d9 000000   		.space	3
 3993 06dc 06000000 		.word	6
 3994 06e0 4F6E5354 		.ascii	"OnSTO\000"
 3994      4F00
 3995 06e6 0000     		.space	2
 3996 06e8 53617665 		.ascii	"SaveS\000"
 3996      5300
 3997 06ee 0000     		.space	2
 3998 06f0 31       		.byte	49
 3999 06f1 000000   		.space	3
 4000 06f4 03000000 		.word	3
 4001 06f8 31       		.byte	49
 4002 06f9 000000   		.space	3
 4003 06fc 07000000 		.word	7
 4004 0700 4F6E5243 		.ascii	"OnRCL\000"
 4004      4C00
 4005 0706 0000     		.space	2
 4006 0708 4C6F6164 		.ascii	"LoadS\000"
 4006      5300
 4007 070e 0000     		.space	2
 4008 0710 2C       		.byte	44
 4009 0711 000000   		.space	3
 4010 0714 FFFFFFFF 		.word	-1
 4011 0718 2E       		.byte	46
 4012 0719 000000   		.space	3
 4013 071c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccBI4G28.s 			page 101


 4014 0720 2D2D0D00 		.ascii	"--\015\000"
 4015 0724 00000000 		.space	4
 4016 0728 00       		.ascii	"\000"
 4017 0729 00000000 		.space	7
 4017      000000
 4018 0730 2D       		.byte	45
 4019 0731 000000   		.space	3
 4020 0734 FFFFFFFF 		.word	-1
 4021 0738 2E       		.byte	46
 4022 0739 000000   		.space	3
 4023 073c FFFFFFFF 		.word	-1
 4024 0740 43505800 		.ascii	"CPX\000"
 4025 0744 00000000 		.space	4
 4026 0748 00       		.ascii	"\000"
 4027 0749 00000000 		.space	7
 4027      000000
 4028 0750 4172726F 		.ascii	"Arrow\000"
 4028      7700
 4029 0756 00000000 		.space	9
 4029      00000000 
 4029      00
 4030 075f 00       		.space	1
 4031 0760 0E       		.byte	14
 4032 0761 000000   		.space	3
 4033 0764 01000000 		.word	1
 4034 0768 06       		.byte	6
 4035 0769 000000   		.space	3
 4036 076c 02000000 		.word	2
 4037 0770 42696E00 		.ascii	"Bin\000"
 4038 0774 00000000 		.space	4
 4039 0778 44454700 		.ascii	"DEG\000"
 4040 077c 00000000 		.space	4
 4041 0780 0E       		.byte	14
 4042 0781 000000   		.space	3
 4043 0784 02000000 		.word	2
 4044 0788 07       		.byte	7
 4045 0789 000000   		.space	3
 4046 078c 02000000 		.word	2
 4047 0790 4F637400 		.ascii	"Oct\000"
 4048 0794 00000000 		.space	4
 4049 0798 52414400 		.ascii	"RAD\000"
 4050 079c 00000000 		.space	4
 4051 07a0 0F       		.byte	15
 4052 07a1 000000   		.space	3
 4053 07a4 01000000 		.word	1
 4054 07a8 08       		.byte	8
 4055 07a9 000000   		.space	3
 4056 07ac 02000000 		.word	2
 4057 07b0 44656300 		.ascii	"Dec\000"
 4058 07b4 00000000 		.space	4
 4059 07b8 47726164 		.ascii	"Grad\000"
 4059      00
 4060 07bd 000000   		.space	3
 4061 07c0 0F       		.byte	15
 4062 07c1 000000   		.space	3
 4063 07c4 02000000 		.word	2
 4064 07c8 06       		.byte	6
ARM GAS  /tmp/ccBI4G28.s 			page 102


 4065 07c9 000000   		.space	3
 4066 07cc 01000000 		.word	1
 4067 07d0 48657800 		.ascii	"Hex\000"
 4068 07d4 00000000 		.space	4
 4069 07d8 32484D53 		.ascii	"2HMS\000"
 4069      00
 4070 07dd 000000   		.space	3
 4071 07e0 2C       		.byte	44
 4072 07e1 000000   		.space	3
 4073 07e4 FFFFFFFF 		.word	-1
 4074 07e8 07       		.byte	7
 4075 07e9 000000   		.space	3
 4076 07ec 01000000 		.word	1
 4077 07f0 2D2D0D00 		.ascii	"--\015\000"
 4078 07f4 00000000 		.space	4
 4079 07f8 484D5332 		.ascii	"HMS2\000"
 4079      00
 4080 07fd 000000   		.space	3
 4081 0800 2D       		.byte	45
 4082 0801 000000   		.space	3
 4083 0804 FFFFFFFF 		.word	-1
 4084 0808 2E       		.byte	46
 4085 0809 000000   		.space	3
 4086 080c FFFFFFFF 		.word	-1
 4087 0810 43505800 		.ascii	"CPX\000"
 4088 0814 00000000 		.space	4
 4089 0818 00       		.ascii	"\000"
 4090 0819 00000000 		.space	7
 4090      000000
 4091 0820 466C6167 		.ascii	"Flags\000"
 4091      7300
 4092 0826 00000000 		.space	9
 4092      00000000 
 4092      00
 4093 082f 00       		.space	1
 4094 0830 1E       		.byte	30
 4095 0831 000000   		.space	3
 4096 0834 01000000 		.word	1
 4097 0838 2E       		.byte	46
 4098 0839 000000   		.space	3
 4099 083c FFFFFFFF 		.word	-1
 4100 0840 53465F00 		.ascii	"SF_\000"
 4101 0844 00000000 		.space	4
 4102 0848 00       		.ascii	"\000"
 4103 0849 00000000 		.space	7
 4103      000000
 4104 0850 1E       		.byte	30
 4105 0851 000000   		.space	3
 4106 0854 02000000 		.word	2
 4107 0858 2E       		.byte	46
 4108 0859 000000   		.space	3
 4109 085c FFFFFFFF 		.word	-1
 4110 0860 43465F00 		.ascii	"CF_\000"
 4111 0864 00000000 		.space	4
 4112 0868 00       		.ascii	"\000"
 4113 0869 00000000 		.space	7
 4113      000000
ARM GAS  /tmp/ccBI4G28.s 			page 103


 4114 0870 1F       		.byte	31
 4115 0871 000000   		.space	3
 4116 0874 01000000 		.word	1
 4117 0878 2E       		.byte	46
 4118 0879 000000   		.space	3
 4119 087c FFFFFFFF 		.word	-1
 4120 0880 783D3F00 		.ascii	"x=?\000"
 4121 0884 00000000 		.space	4
 4122 0888 00       		.ascii	"\000"
 4123 0889 00000000 		.space	7
 4123      000000
 4124 0890 1F       		.byte	31
 4125 0891 000000   		.space	3
 4126 0894 02000000 		.word	2
 4127 0898 2E       		.byte	46
 4128 0899 000000   		.space	3
 4129 089c FFFFFFFF 		.word	-1
 4130 08a0 780B3F00 		.ascii	"x\013?\000"
 4131 08a4 00000000 		.space	4
 4132 08a8 00       		.ascii	"\000"
 4133 08a9 00000000 		.space	7
 4133      000000
 4134 08b0 2C       		.byte	44
 4135 08b1 000000   		.space	3
 4136 08b4 FFFFFFFF 		.word	-1
 4137 08b8 2E       		.byte	46
 4138 08b9 000000   		.space	3
 4139 08bc FFFFFFFF 		.word	-1
 4140 08c0 2D2D0D00 		.ascii	"--\015\000"
 4141 08c4 00000000 		.space	4
 4142 08c8 00       		.ascii	"\000"
 4143 08c9 00000000 		.space	7
 4143      000000
 4144 08d0 2D       		.byte	45
 4145 08d1 000000   		.space	3
 4146 08d4 FFFFFFFF 		.word	-1
 4147 08d8 2E       		.byte	46
 4148 08d9 000000   		.space	3
 4149 08dc FFFFFFFF 		.word	-1
 4150 08e0 43505800 		.ascii	"CPX\000"
 4151 08e4 00000000 		.space	4
 4152 08e8 00       		.ascii	"\000"
 4153 08e9 00000000 		.space	7
 4153      000000
 4154 08f0 50726F62 		.ascii	"Probability\000"
 4154      6162696C 
 4154      69747900 
 4155 08fc 000000   		.space	3
 4156 08ff 00       		.space	1
 4157 0900 18       		.byte	24
 4158 0901 000000   		.space	3
 4159 0904 03000000 		.word	3
 4160 0908 19       		.byte	25
 4161 0909 000000   		.space	3
 4162 090c 01000000 		.word	1
 4163 0910 46616374 		.ascii	"Fact!\000"
 4163      2100
ARM GAS  /tmp/ccBI4G28.s 			page 104


 4164 0916 0000     		.space	2
 4165 0918 9400     		.ascii	"\224\000"
 4166 091a 00000000 		.space	6
 4166      0000
 4167 0920 18       		.byte	24
 4168 0921 000000   		.space	3
 4169 0924 01000000 		.word	1
 4170 0928 19       		.byte	25
 4171 0929 000000   		.space	3
 4172 092c 02000000 		.word	2
 4173 0930 43792C78 		.ascii	"Cy,x\000"
 4173      00
 4174 0935 000000   		.space	3
 4175 0938 949D00   		.ascii	"\224\235\000"
 4176 093b 00000000 		.space	5
 4176      00
 4177 0940 18       		.byte	24
 4178 0941 000000   		.space	3
 4179 0944 02000000 		.word	2
 4180 0948 2E       		.byte	46
 4181 0949 000000   		.space	3
 4182 094c FFFFFFFF 		.word	-1
 4183 0950 50792C78 		.ascii	"Py,x\000"
 4183      00
 4184 0955 000000   		.space	3
 4185 0958 00       		.ascii	"\000"
 4186 0959 00000000 		.space	7
 4186      000000
 4187 0960 08       		.byte	8
 4188 0961 000000   		.space	3
 4189 0964 01000000 		.word	1
 4190 0968 2E       		.byte	46
 4191 0969 000000   		.space	3
 4192 096c FFFFFFFF 		.word	-1
 4193 0970 52414E23 		.ascii	"RAN#\000"
 4193      00
 4194 0975 000000   		.space	3
 4195 0978 00       		.ascii	"\000"
 4196 0979 00000000 		.space	7
 4196      000000
 4197 0980 2C       		.byte	44
 4198 0981 000000   		.space	3
 4199 0984 FFFFFFFF 		.word	-1
 4200 0988 2E       		.byte	46
 4201 0989 000000   		.space	3
 4202 098c FFFFFFFF 		.word	-1
 4203 0990 2D2D0D00 		.ascii	"--\015\000"
 4204 0994 00000000 		.space	4
 4205 0998 00       		.ascii	"\000"
 4206 0999 00000000 		.space	7
 4206      000000
 4207 09a0 2D       		.byte	45
 4208 09a1 000000   		.space	3
 4209 09a4 FFFFFFFF 		.word	-1
 4210 09a8 2E       		.byte	46
 4211 09a9 000000   		.space	3
 4212 09ac FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccBI4G28.s 			page 105


 4213 09b0 43505800 		.ascii	"CPX\000"
 4214 09b4 00000000 		.space	4
 4215 09b8 00       		.ascii	"\000"
 4216 09b9 00000000 		.space	7
 4216      000000
 4217 09c0 53746174 		.ascii	"Statistics\000"
 4217      69737469 
 4217      637300
 4218 09cb 00000000 		.space	4
 4219 09cf 00       		.space	1
 4220 09d0 1A       		.byte	26
 4221 09d1 000000   		.space	3
 4222 09d4 01000000 		.word	1
 4223 09d8 1B       		.byte	27
 4224 09d9 000000   		.space	3
 4225 09dc 03000000 		.word	3
 4226 09e0 58626172 		.ascii	"Xbar\000"
 4226      00
 4227 09e5 000000   		.space	3
 4228 09e8 53554D53 		.ascii	"SUMS\000"
 4228      00
 4229 09ed 000000   		.space	3
 4230 09f0 1B       		.byte	27
 4231 09f1 000000   		.space	3
 4232 09f4 01000000 		.word	1
 4233 09f8 2E       		.byte	46
 4234 09f9 000000   		.space	3
 4235 09fc FFFFFFFF 		.word	-1
 4236 0a00 59686174 		.ascii	"Yhat\000"
 4236      00
 4237 0a05 000000   		.space	3
 4238 0a08 00       		.ascii	"\000"
 4239 0a09 00000000 		.space	7
 4239      000000
 4240 0a10 1A       		.byte	26
 4241 0a11 000000   		.space	3
 4242 0a14 02000000 		.word	2
 4243 0a18 2E       		.byte	46
 4244 0a19 000000   		.space	3
 4245 0a1c FFFFFFFF 		.word	-1
 4246 0a20 7300     		.ascii	"s\000"
 4247 0a22 00000000 		.space	6
 4247      0000
 4248 0a28 00       		.ascii	"\000"
 4249 0a29 00000000 		.space	7
 4249      000000
 4250 0a30 1B       		.byte	27
 4251 0a31 000000   		.space	3
 4252 0a34 02000000 		.word	2
 4253 0a38 2E       		.byte	46
 4254 0a39 000000   		.space	3
 4255 0a3c FFFFFFFF 		.word	-1
 4256 0a40 7200     		.ascii	"r\000"
 4257 0a42 00000000 		.space	6
 4257      0000
 4258 0a48 00       		.ascii	"\000"
 4259 0a49 00000000 		.space	7
ARM GAS  /tmp/ccBI4G28.s 			page 106


 4259      000000
 4260 0a50 2C       		.byte	44
 4261 0a51 000000   		.space	3
 4262 0a54 FFFFFFFF 		.word	-1
 4263 0a58 2E       		.byte	46
 4264 0a59 000000   		.space	3
 4265 0a5c FFFFFFFF 		.word	-1
 4266 0a60 2D2D0D00 		.ascii	"--\015\000"
 4267 0a64 00000000 		.space	4
 4268 0a68 00       		.ascii	"\000"
 4269 0a69 00000000 		.space	7
 4269      000000
 4270 0a70 2D       		.byte	45
 4271 0a71 000000   		.space	3
 4272 0a74 FFFFFFFF 		.word	-1
 4273 0a78 2E       		.byte	46
 4274 0a79 000000   		.space	3
 4275 0a7c FFFFFFFF 		.word	-1
 4276 0a80 43505800 		.ascii	"CPX\000"
 4277 0a84 00000000 		.space	4
 4278 0a88 00       		.ascii	"\000"
 4279 0a89 00000000 		.space	7
 4279      000000
 4280 0a90 53657475 		.ascii	"Setup 2\000"
 4280      70203200 
 4281 0a98 00000000 		.space	7
 4281      000000
 4282 0a9f 00       		.space	1
 4283 0aa0 31       		.byte	49
 4284 0aa1 000000   		.space	3
 4285 0aa4 04000000 		.word	4
 4286 0aa8 2E       		.byte	46
 4287 0aa9 000000   		.space	3
 4288 0aac FFFFFFFF 		.word	-1
 4289 0ab0 53617665 		.ascii	"SaveL\000"
 4289      4C00
 4290 0ab6 0000     		.space	2
 4291 0ab8 00       		.ascii	"\000"
 4292 0ab9 00000000 		.space	7
 4292      000000
 4293 0ac0 31       		.byte	49
 4294 0ac1 000000   		.space	3
 4295 0ac4 05000000 		.word	5
 4296 0ac8 2E       		.byte	46
 4297 0ac9 000000   		.space	3
 4298 0acc FFFFFFFF 		.word	-1
 4299 0ad0 4C6F6164 		.ascii	"LoadL\000"
 4299      4C00
 4300 0ad6 0000     		.space	2
 4301 0ad8 00       		.ascii	"\000"
 4302 0ad9 00000000 		.space	7
 4302      000000
 4303 0ae0 31       		.byte	49
 4304 0ae1 000000   		.space	3
 4305 0ae4 0A000000 		.word	10
 4306 0ae8 2E       		.byte	46
 4307 0ae9 000000   		.space	3
ARM GAS  /tmp/ccBI4G28.s 			page 107


 4308 0aec FFFFFFFF 		.word	-1
 4309 0af0 53617665 		.ascii	"SaveP\000"
 4309      5000
 4310 0af6 0000     		.space	2
 4311 0af8 00       		.ascii	"\000"
 4312 0af9 00000000 		.space	7
 4312      000000
 4313 0b00 31       		.byte	49
 4314 0b01 000000   		.space	3
 4315 0b04 08000000 		.word	8
 4316 0b08 2E       		.byte	46
 4317 0b09 000000   		.space	3
 4318 0b0c FFFFFFFF 		.word	-1
 4319 0b10 4C6F6164 		.ascii	"LoadP\000"
 4319      5000
 4320 0b16 0000     		.space	2
 4321 0b18 00       		.ascii	"\000"
 4322 0b19 00000000 		.space	7
 4322      000000
 4323 0b20 2C       		.byte	44
 4324 0b21 000000   		.space	3
 4325 0b24 FFFFFFFF 		.word	-1
 4326 0b28 2E       		.byte	46
 4327 0b29 000000   		.space	3
 4328 0b2c FFFFFFFF 		.word	-1
 4329 0b30 2D2D0D00 		.ascii	"--\015\000"
 4330 0b34 00000000 		.space	4
 4331 0b38 00       		.ascii	"\000"
 4332 0b39 00000000 		.space	7
 4332      000000
 4333 0b40 2D       		.byte	45
 4334 0b41 000000   		.space	3
 4335 0b44 FFFFFFFF 		.word	-1
 4336 0b48 2E       		.byte	46
 4337 0b49 000000   		.space	3
 4338 0b4c FFFFFFFF 		.word	-1
 4339 0b50 43505800 		.ascii	"CPX\000"
 4340 0b54 00000000 		.space	4
 4341 0b58 00       		.ascii	"\000"
 4342 0b59 00000000 		.space	7
 4342      000000
 4343              		.section	.rodata.mapping_alpha.10876,"a"
 4344              		.align	2
 4345              		.set	.LANCHOR11,. + 0
 4348              	mapping_alpha.10876:
 4349 0000 63       		.byte	99
 4350 0001 000000   		.space	3
 4351 0004 FFFFFFFF 		.word	-1
 4352 0008 00       		.byte	0
 4353 0009 000000   		.space	3
 4354 000c FFFFFFFF 		.word	-1
 4355 0010 01       		.byte	1
 4356 0011 000000   		.space	3
 4357 0014 FFFFFFFF 		.word	-1
 4358 0018 02       		.byte	2
 4359 0019 000000   		.space	3
 4360 001c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccBI4G28.s 			page 108


 4361 0020 03       		.byte	3
 4362 0021 000000   		.space	3
 4363 0024 FFFFFFFF 		.word	-1
 4364 0028 04       		.byte	4
 4365 0029 000000   		.space	3
 4366 002c FFFFFFFF 		.word	-1
 4367 0030 05       		.byte	5
 4368 0031 000000   		.space	3
 4369 0034 FFFFFFFF 		.word	-1
 4370 0038 06       		.byte	6
 4371 0039 000000   		.space	3
 4372 003c FFFFFFFF 		.word	-1
 4373 0040 07       		.byte	7
 4374 0041 000000   		.space	3
 4375 0044 FFFFFFFF 		.word	-1
 4376 0048 08       		.byte	8
 4377 0049 000000   		.space	3
 4378 004c FFFFFFFF 		.word	-1
 4379 0050 09       		.byte	9
 4380 0051 000000   		.space	3
 4381 0054 FFFFFFFF 		.word	-1
 4382 0058 0A       		.byte	10
 4383 0059 000000   		.space	3
 4384 005c FFFFFFFF 		.word	-1
 4385 0060 0B       		.byte	11
 4386 0061 000000   		.space	3
 4387 0064 FFFFFFFF 		.word	-1
 4388 0068 0C       		.byte	12
 4389 0069 000000   		.space	3
 4390 006c FFFFFFFF 		.word	-1
 4391 0070 0D       		.byte	13
 4392 0071 000000   		.space	3
 4393 0074 FFFFFFFF 		.word	-1
 4394 0078 0E       		.byte	14
 4395 0079 000000   		.space	3
 4396 007c FFFFFFFF 		.word	-1
 4397 0080 0F       		.byte	15
 4398 0081 000000   		.space	3
 4399 0084 FFFFFFFF 		.word	-1
 4400 0088 10       		.byte	16
 4401 0089 000000   		.space	3
 4402 008c FFFFFFFF 		.word	-1
 4403 0090 12       		.byte	18
 4404 0091 000000   		.space	3
 4405 0094 FFFFFFFF 		.word	-1
 4406 0098 13       		.byte	19
 4407 0099 000000   		.space	3
 4408 009c FFFFFFFF 		.word	-1
 4409 00a0 14       		.byte	20
 4410 00a1 000000   		.space	3
 4411 00a4 FFFFFFFF 		.word	-1
 4412 00a8 15       		.byte	21
 4413 00a9 000000   		.space	3
 4414 00ac FFFFFFFF 		.word	-1
 4415 00b0 16       		.byte	22
 4416 00b1 000000   		.space	3
 4417 00b4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccBI4G28.s 			page 109


 4418 00b8 18       		.byte	24
 4419 00b9 000000   		.space	3
 4420 00bc FFFFFFFF 		.word	-1
 4421 00c0 19       		.byte	25
 4422 00c1 000000   		.space	3
 4423 00c4 FFFFFFFF 		.word	-1
 4424 00c8 1A       		.byte	26
 4425 00c9 000000   		.space	3
 4426 00cc FFFFFFFF 		.word	-1
 4427 00d0 1B       		.byte	27
 4428 00d1 000000   		.space	3
 4429 00d4 FFFFFFFF 		.word	-1
 4430 00d8 1C       		.byte	28
 4431 00d9 000000   		.space	3
 4432 00dc FFFFFFFF 		.word	-1
 4433 00e0 1E       		.byte	30
 4434 00e1 000000   		.space	3
 4435 00e4 FFFFFFFF 		.word	-1
 4436 00e8 1F       		.byte	31
 4437 00e9 000000   		.space	3
 4438 00ec FFFFFFFF 		.word	-1
 4439 00f0 20       		.byte	32
 4440 00f1 000000   		.space	3
 4441 00f4 FFFFFFFF 		.word	-1
 4442 00f8 21       		.byte	33
 4443 00f9 000000   		.space	3
 4444 00fc FFFFFFFF 		.word	-1
 4445 0100 22       		.byte	34
 4446 0101 000000   		.space	3
 4447 0104 FFFFFFFF 		.word	-1
 4448 0108 24       		.byte	36
 4449 0109 000000   		.space	3
 4450 010c FFFFFFFF 		.word	-1
 4451 0110 25       		.byte	37
 4452 0111 000000   		.space	3
 4453 0114 FFFFFFFF 		.word	-1
 4454 0118 26       		.byte	38
 4455 0119 000000   		.space	3
 4456 011c FFFFFFFF 		.word	-1
 4457 0120 27       		.byte	39
 4458 0121 000000   		.space	3
 4459 0124 FFFFFFFF 		.word	-1
 4460 0128 28       		.byte	40
 4461 0129 000000   		.space	3
 4462 012c FFFFFFFF 		.word	-1
 4463 0130 2E       		.byte	46
 4464 0131 000000   		.space	3
 4465 0134 FFFFFFFF 		.word	-1
 4466 0138 2E       		.byte	46
 4467 0139 000000   		.space	3
 4468 013c FFFFFFFF 		.word	-1
 4469 0140 2E       		.byte	46
 4470 0141 000000   		.space	3
 4471 0144 FFFFFFFF 		.word	-1
 4472 0148 2E       		.byte	46
 4473 0149 000000   		.space	3
 4474 014c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccBI4G28.s 			page 110


 4475 0150 2C       		.byte	44
 4476 0151 000000   		.space	3
 4477 0154 FFFFFFFF 		.word	-1
 4478 0158 2E       		.byte	46
 4479 0159 000000   		.space	3
 4480 015c FFFFFFFF 		.word	-1
 4481 0160 2E       		.byte	46
 4482 0161 000000   		.space	3
 4483 0164 FFFFFFFF 		.word	-1
 4484 0168 2E       		.byte	46
 4485 0169 000000   		.space	3
 4486 016c FFFFFFFF 		.word	-1
 4487 0170 2E       		.byte	46
 4488 0171 000000   		.space	3
 4489 0174 FFFFFFFF 		.word	-1
 4490              		.section	.rodata.mapping_fshift.10874,"a"
 4491              		.align	2
 4492              		.set	.LANCHOR9,. + 0
 4495              	mapping_fshift.10874:
 4496 0000 63       		.byte	99
 4497 0001 000000   		.space	3
 4498 0004 FFFFFFFF 		.word	-1
 4499 0008 22       		.byte	34
 4500 0009 000000   		.space	3
 4501 000c 03000000 		.word	3
 4502 0010 15       		.byte	21
 4503 0011 000000   		.space	3
 4504 0014 01000000 		.word	1
 4505 0018 1C       		.byte	28
 4506 0019 000000   		.space	3
 4507 001c 02000000 		.word	2
 4508 0020 13       		.byte	19
 4509 0021 000000   		.space	3
 4510 0024 01000000 		.word	1
 4511 0028 12       		.byte	18
 4512 0029 000000   		.space	3
 4513 002c 01000000 		.word	1
 4514 0030 12       		.byte	18
 4515 0031 000000   		.space	3
 4516 0034 03000000 		.word	3
 4517 0038 2D       		.byte	45
 4518 0039 000000   		.space	3
 4519 003c 00000000 		.word	0
 4520 0040 22       		.byte	34
 4521 0041 000000   		.space	3
 4522 0044 01000000 		.word	1
 4523 0048 0F       		.byte	15
 4524 0049 000000   		.space	3
 4525 004c 03000000 		.word	3
 4526 0050 01       		.byte	1
 4527 0051 000000   		.space	3
 4528 0054 02000000 		.word	2
 4529 0058 02       		.byte	2
 4530 0059 000000   		.space	3
 4531 005c 02000000 		.word	2
 4532 0060 03       		.byte	3
 4533 0061 000000   		.space	3
ARM GAS  /tmp/ccBI4G28.s 			page 111


 4534 0064 02000000 		.word	2
 4535 0068 0C       		.byte	12
 4536 0069 000000   		.space	3
 4537 006c 01000000 		.word	1
 4538 0070 31       		.byte	49
 4539 0071 000000   		.space	3
 4540 0074 01000000 		.word	1
 4541 0078 2F       		.byte	47
 4542 0079 000000   		.space	3
 4543 007c 04000000 		.word	4
 4544 0080 2F       		.byte	47
 4545 0081 000000   		.space	3
 4546 0084 02000000 		.word	2
 4547 0088 2F       		.byte	47
 4548 0089 000000   		.space	3
 4549 008c 01000000 		.word	1
 4550 0090 18       		.byte	24
 4551 0091 000000   		.space	3
 4552 0094 00000000 		.word	0
 4553 0098 20       		.byte	32
 4554 0099 000000   		.space	3
 4555 009c 01000000 		.word	1
 4556 00a0 20       		.byte	32
 4557 00a1 000000   		.space	3
 4558 00a4 02000000 		.word	2
 4559 00a8 1C       		.byte	28
 4560 00a9 000000   		.space	3
 4561 00ac 03000000 		.word	3
 4562 00b0 2F       		.byte	47
 4563 00b1 000000   		.space	3
 4564 00b4 0C000000 		.word	12
 4565 00b8 1E       		.byte	30
 4566 00b9 000000   		.space	3
 4567 00bc 00000000 		.word	0
 4568 00c0 2F       		.byte	47
 4569 00c1 000000   		.space	3
 4570 00c4 03000000 		.word	3
 4571 00c8 04       		.byte	4
 4572 00c9 000000   		.space	3
 4573 00cc 03000000 		.word	3
 4574 00d0 2F       		.byte	47
 4575 00d1 000000   		.space	3
 4576 00d4 0A000000 		.word	10
 4577 00d8 2F       		.byte	47
 4578 00d9 000000   		.space	3
 4579 00dc 0B000000 		.word	11
 4580 00e0 2A       		.byte	42
 4581 00e1 000000   		.space	3
 4582 00e4 00000000 		.word	0
 4583 00e8 2E       		.byte	46
 4584 00e9 000000   		.space	3
 4585 00ec 00000000 		.word	0
 4586 00f0 2E       		.byte	46
 4587 00f1 000000   		.space	3
 4588 00f4 00000000 		.word	0
 4589 00f8 20       		.byte	32
 4590 00f9 000000   		.space	3
ARM GAS  /tmp/ccBI4G28.s 			page 112


 4591 00fc 03000000 		.word	3
 4592 0100 2E       		.byte	46
 4593 0101 000000   		.space	3
 4594 0104 00000000 		.word	0
 4595 0108 24       		.byte	36
 4596 0109 000000   		.space	3
 4597 010c 03000000 		.word	3
 4598 0110 2F       		.byte	47
 4599 0111 000000   		.space	3
 4600 0114 08000000 		.word	8
 4601 0118 0D       		.byte	13
 4602 0119 000000   		.space	3
 4603 011c 01000000 		.word	1
 4604 0120 27       		.byte	39
 4605 0121 000000   		.space	3
 4606 0124 03000000 		.word	3
 4607 0128 06       		.byte	6
 4608 0129 000000   		.space	3
 4609 012c 03000000 		.word	3
 4610 0130 2E       		.byte	46
 4611 0131 000000   		.space	3
 4612 0134 00000000 		.word	0
 4613 0138 2E       		.byte	46
 4614 0139 000000   		.space	3
 4615 013c 00000000 		.word	0
 4616 0140 2E       		.byte	46
 4617 0141 000000   		.space	3
 4618 0144 00000000 		.word	0
 4619 0148 2E       		.byte	46
 4620 0149 000000   		.space	3
 4621 014c 00000000 		.word	0
 4622 0150 2E       		.byte	46
 4623 0151 000000   		.space	3
 4624 0154 00000000 		.word	0
 4625 0158 2E       		.byte	46
 4626 0159 000000   		.space	3
 4627 015c 00000000 		.word	0
 4628 0160 2E       		.byte	46
 4629 0161 000000   		.space	3
 4630 0164 00000000 		.word	0
 4631 0168 2F       		.byte	47
 4632 0169 000000   		.space	3
 4633 016c FFFFFFFF 		.word	-1
 4634 0170 2F       		.byte	47
 4635 0171 000000   		.space	3
 4636 0174 05000000 		.word	5
 4637              		.section	.rodata.mapping_gshift.10875,"a"
 4638              		.align	2
 4639              		.set	.LANCHOR12,. + 0
 4642              	mapping_gshift.10875:
 4643 0000 63       		.byte	99
 4644 0001 000000   		.space	3
 4645 0004 FFFFFFFF 		.word	-1
 4646 0008 28       		.byte	40
 4647 0009 000000   		.space	3
 4648 000c 03000000 		.word	3
 4649 0010 16       		.byte	22
ARM GAS  /tmp/ccBI4G28.s 			page 113


 4650 0011 000000   		.space	3
 4651 0014 01000000 		.word	1
 4652 0018 1C       		.byte	28
 4653 0019 000000   		.space	3
 4654 001c 01000000 		.word	1
 4655 0020 13       		.byte	19
 4656 0021 000000   		.space	3
 4657 0024 02000000 		.word	2
 4658 0028 2E       		.byte	46
 4659 0029 000000   		.space	3
 4660 002c 00000000 		.word	0
 4661 0030 2E       		.byte	46
 4662 0031 000000   		.space	3
 4663 0034 00000000 		.word	0
 4664 0038 0C       		.byte	12
 4665 0039 000000   		.space	3
 4666 003c 02000000 		.word	2
 4667 0040 07       		.byte	7
 4668 0041 000000   		.space	3
 4669 0044 03000000 		.word	3
 4670 0048 08       		.byte	8
 4671 0049 000000   		.space	3
 4672 004c 03000000 		.word	3
 4673 0050 2F       		.byte	47
 4674 0051 000000   		.space	3
 4675 0054 04000000 		.word	4
 4676 0058 2F       		.byte	47
 4677 0059 000000   		.space	3
 4678 005c 04000000 		.word	4
 4679 0060 2F       		.byte	47
 4680 0061 000000   		.space	3
 4681 0064 04000000 		.word	4
 4682 0068 2E       		.byte	46
 4683 0069 000000   		.space	3
 4684 006c 00000000 		.word	0
 4685 0070 2F       		.byte	47
 4686 0071 000000   		.space	3
 4687 0074 06000000 		.word	6
 4688 0078 05       		.byte	5
 4689 0079 000000   		.space	3
 4690 007c 03000000 		.word	3
 4691 0080 2E       		.byte	46
 4692 0081 000000   		.space	3
 4693 0084 00000000 		.word	0
 4694 0088 2E       		.byte	46
 4695 0089 000000   		.space	3
 4696 008c 00000000 		.word	0
 4697 0090 2E       		.byte	46
 4698 0091 000000   		.space	3
 4699 0094 00000000 		.word	0
 4700 0098 2E       		.byte	46
 4701 0099 000000   		.space	3
 4702 009c 00000000 		.word	0
 4703 00a0 2E       		.byte	46
 4704 00a1 000000   		.space	3
 4705 00a4 00000000 		.word	0
 4706 00a8 1B       		.byte	27
ARM GAS  /tmp/ccBI4G28.s 			page 114


 4707 00a9 000000   		.space	3
 4708 00ac 03000000 		.word	3
 4709 00b0 1A       		.byte	26
 4710 00b1 000000   		.space	3
 4711 00b4 03000000 		.word	3
 4712 00b8 2E       		.byte	46
 4713 00b9 000000   		.space	3
 4714 00bc 00000000 		.word	0
 4715 00c0 2E       		.byte	46
 4716 00c1 000000   		.space	3
 4717 00c4 00000000 		.word	0
 4718 00c8 0C       		.byte	12
 4719 00c9 000000   		.space	3
 4720 00cc 03000000 		.word	3
 4721 00d0 1F       		.byte	31
 4722 00d1 000000   		.space	3
 4723 00d4 03000000 		.word	3
 4724 00d8 19       		.byte	25
 4725 00d9 000000   		.space	3
 4726 00dc 03000000 		.word	3
 4727 00e0 2A       		.byte	42
 4728 00e1 000000   		.space	3
 4729 00e4 FFFFFFFF 		.word	-1
 4730 00e8 2E       		.byte	46
 4731 00e9 000000   		.space	3
 4732 00ec 00000000 		.word	0
 4733 00f0 2E       		.byte	46
 4734 00f1 000000   		.space	3
 4735 00f4 00000000 		.word	0
 4736 00f8 21       		.byte	33
 4737 00f9 000000   		.space	3
 4738 00fc 03000000 		.word	3
 4739 0100 2E       		.byte	46
 4740 0101 000000   		.space	3
 4741 0104 00000000 		.word	0
 4742 0108 24       		.byte	36
 4743 0109 000000   		.space	3
 4744 010c 00000000 		.word	0
 4745 0110 2F       		.byte	47
 4746 0111 000000   		.space	3
 4747 0114 0D000000 		.word	13
 4748 0118 2E       		.byte	46
 4749 0119 000000   		.space	3
 4750 011c 00000000 		.word	0
 4751 0120 2F       		.byte	47
 4752 0121 000000   		.space	3
 4753 0124 07000000 		.word	7
 4754 0128 2E       		.byte	46
 4755 0129 000000   		.space	3
 4756 012c 00000000 		.word	0
 4757 0130 2E       		.byte	46
 4758 0131 000000   		.space	3
 4759 0134 00000000 		.word	0
 4760 0138 2E       		.byte	46
 4761 0139 000000   		.space	3
 4762 013c 00000000 		.word	0
 4763 0140 2E       		.byte	46
ARM GAS  /tmp/ccBI4G28.s 			page 115


 4764 0141 000000   		.space	3
 4765 0144 00000000 		.word	0
 4766 0148 2E       		.byte	46
 4767 0149 000000   		.space	3
 4768 014c 00000000 		.word	0
 4769 0150 2E       		.byte	46
 4770 0151 000000   		.space	3
 4771 0154 00000000 		.word	0
 4772 0158 2E       		.byte	46
 4773 0159 000000   		.space	3
 4774 015c 00000000 		.word	0
 4775 0160 2E       		.byte	46
 4776 0161 000000   		.space	3
 4777 0164 00000000 		.word	0
 4778 0168 2E       		.byte	46
 4779 0169 000000   		.space	3
 4780 016c 00000000 		.word	0
 4781 0170 2E       		.byte	46
 4782 0171 000000   		.space	3
 4783 0174 00000000 		.word	0
 4784              		.section	.rodata.mapping_none.10873,"a"
 4785              		.align	2
 4786              		.set	.LANCHOR8,. + 0
 4789              	mapping_none.10873:
 4790 0000 63       		.byte	99
 4791 0001 000000   		.space	3
 4792 0004 FFFFFFFF 		.word	-1
 4793 0008 00       		.byte	0
 4794 0009 000000   		.space	3
 4795 000c 00000000 		.word	0
 4796 0010 01       		.byte	1
 4797 0011 000000   		.space	3
 4798 0014 00000000 		.word	0
 4799 0018 03       		.byte	3
 4800 0019 000000   		.space	3
 4801 001c 00000000 		.word	0
 4802 0020 13       		.byte	19
 4803 0021 000000   		.space	3
 4804 0024 02000000 		.word	2
 4805 0028 12       		.byte	18
 4806 0029 000000   		.space	3
 4807 002c 02000000 		.word	2
 4808 0030 12       		.byte	18
 4809 0031 000000   		.space	3
 4810 0034 00000000 		.word	0
 4811 0038 06       		.byte	6
 4812 0039 000000   		.space	3
 4813 003c 00000000 		.word	0
 4814 0040 07       		.byte	7
 4815 0041 000000   		.space	3
 4816 0044 00000000 		.word	0
 4817 0048 08       		.byte	8
 4818 0049 000000   		.space	3
 4819 004c 00000000 		.word	0
 4820 0050 01       		.byte	1
 4821 0051 000000   		.space	3
 4822 0054 01000000 		.word	1
ARM GAS  /tmp/ccBI4G28.s 			page 116


 4823 0058 02       		.byte	2
 4824 0059 000000   		.space	3
 4825 005c 01000000 		.word	1
 4826 0060 03       		.byte	3
 4827 0061 000000   		.space	3
 4828 0064 01000000 		.word	1
 4829 0068 0C       		.byte	12
 4830 0069 000000   		.space	3
 4831 006c 00000000 		.word	0
 4832 0070 0D       		.byte	13
 4833 0071 000000   		.space	3
 4834 0074 00000000 		.word	0
 4835 0078 0E       		.byte	14
 4836 0079 000000   		.space	3
 4837 007c 00000000 		.word	0
 4838 0080 0F       		.byte	15
 4839 0081 000000   		.space	3
 4840 0084 00000000 		.word	0
 4841 0088 10       		.byte	16
 4842 0089 000000   		.space	3
 4843 008c 00000000 		.word	0
 4844 0090 18       		.byte	24
 4845 0091 000000   		.space	3
 4846 0094 00000000 		.word	0
 4847 0098 13       		.byte	19
 4848 0099 000000   		.space	3
 4849 009c 00000000 		.word	0
 4850 00a0 14       		.byte	20
 4851 00a1 000000   		.space	3
 4852 00a4 00000000 		.word	0
 4853 00a8 15       		.byte	21
 4854 00a9 000000   		.space	3
 4855 00ac 00000000 		.word	0
 4856 00b0 16       		.byte	22
 4857 00b1 000000   		.space	3
 4858 00b4 00000000 		.word	0
 4859 00b8 1E       		.byte	30
 4860 00b9 000000   		.space	3
 4861 00bc 00000000 		.word	0
 4862 00c0 19       		.byte	25
 4863 00c1 000000   		.space	3
 4864 00c4 00000000 		.word	0
 4865 00c8 1A       		.byte	26
 4866 00c9 000000   		.space	3
 4867 00cc 00000000 		.word	0
 4868 00d0 1B       		.byte	27
 4869 00d1 000000   		.space	3
 4870 00d4 00000000 		.word	0
 4871 00d8 1C       		.byte	28
 4872 00d9 000000   		.space	3
 4873 00dc 00000000 		.word	0
 4874 00e0 29       		.byte	41
 4875 00e1 000000   		.space	3
 4876 00e4 00000000 		.word	0
 4877 00e8 1F       		.byte	31
 4878 00e9 000000   		.space	3
 4879 00ec 00000000 		.word	0
ARM GAS  /tmp/ccBI4G28.s 			page 117


 4880 00f0 20       		.byte	32
 4881 00f1 000000   		.space	3
 4882 00f4 00000000 		.word	0
 4883 00f8 21       		.byte	33
 4884 00f9 000000   		.space	3
 4885 00fc 00000000 		.word	0
 4886 0100 22       		.byte	34
 4887 0101 000000   		.space	3
 4888 0104 00000000 		.word	0
 4889 0108 24       		.byte	36
 4890 0109 000000   		.space	3
 4891 010c 00000000 		.word	0
 4892 0110 25       		.byte	37
 4893 0111 000000   		.space	3
 4894 0114 00000000 		.word	0
 4895 0118 26       		.byte	38
 4896 0119 000000   		.space	3
 4897 011c 00000000 		.word	0
 4898 0120 27       		.byte	39
 4899 0121 000000   		.space	3
 4900 0124 00000000 		.word	0
 4901 0128 28       		.byte	40
 4902 0129 000000   		.space	3
 4903 012c 00000000 		.word	0
 4904 0130 2E       		.byte	46
 4905 0131 000000   		.space	3
 4906 0134 00000000 		.word	0
 4907 0138 2E       		.byte	46
 4908 0139 000000   		.space	3
 4909 013c 00000000 		.word	0
 4910 0140 2E       		.byte	46
 4911 0141 000000   		.space	3
 4912 0144 00000000 		.word	0
 4913 0148 2E       		.byte	46
 4914 0149 000000   		.space	3
 4915 014c 00000000 		.word	0
 4916 0150 2E       		.byte	46
 4917 0151 000000   		.space	3
 4918 0154 00000000 		.word	0
 4919 0158 2E       		.byte	46
 4920 0159 000000   		.space	3
 4921 015c 00000000 		.word	0
 4922 0160 2E       		.byte	46
 4923 0161 000000   		.space	3
 4924 0164 00000000 		.word	0
 4925 0168 2E       		.byte	46
 4926 0169 000000   		.space	3
 4927 016c 00000000 		.word	0
 4928 0170 2E       		.byte	46
 4929 0171 000000   		.space	3
 4930 0174 00000000 		.word	0
 4931              		.section	.rodata.mid_menu,"a"
 4932              		.align	2
 4935              	mid_menu:
 4936 0000 C800     		.ascii	"\310\000"
 4937              		.text
 4938              	.Letext0:
ARM GAS  /tmp/ccBI4G28.s 			page 118


 4939              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 4940              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 4941              		.file 6 "/usr/include/newlib/sys/_types.h"
 4942              		.file 7 "/usr/include/newlib/sys/reent.h"
 4943              		.file 8 "/usr/include/newlib/sys/lock.h"
 4944              		.file 9 "/usr/include/newlib/stdlib.h"
 4945              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 4946              		.file 11 "/usr/include/newlib/ctype.h"
 4947              		.file 12 "dmcp/ff_ifc.h"
 4948              		.file 13 "dmcp/dmcp.h"
 4949              		.file 14 "src/keys.h"
 4950              		.file 15 "src/decNumber/decContext.h"
 4951              		.file 16 "src/decNumber/decNumber.h"
 4952              		.file 17 "src/decNumber/decimal64.h"
 4953              		.file 18 "src/decNumber/decimal128.h"
 4954              		.file 19 "src/xeq.h"
 4955              		.file 20 "src/data.h"
 4956              		.file 21 "src/display.h"
 4957              		.file 22 "src/consts.h"
 4958              		.file 23 "src/storage.h"
 4959              		.file 24 "src/catalogues.h"
 4960              		.file 25 "src/menu.h"
 4961              		.file 26 "/usr/include/newlib/string.h"
 4962              		.file 27 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccBI4G28.s 			page 119


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccBI4G28.s:18     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccBI4G28.s:26     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccBI4G28.s:392    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/ccBI4G28.s:400    .text.set_menu:0000000000000000 $t
     /tmp/ccBI4G28.s:408    .text.set_menu:0000000000000000 set_menu
     /tmp/ccBI4G28.s:458    .text.set_menu:0000000000000024 $d
     /tmp/ccBI4G28.s:464    .text.get_menu:0000000000000000 $t
     /tmp/ccBI4G28.s:472    .text.get_menu:0000000000000000 get_menu
     /tmp/ccBI4G28.s:488    .text.get_menu:0000000000000008 $d
     /tmp/ccBI4G28.s:493    .text.set_last_menu:0000000000000000 $t
     /tmp/ccBI4G28.s:501    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccBI4G28.s:550    .text.set_last_menu:0000000000000014 $d
     /tmp/ccBI4G28.s:556    .text.mdot:0000000000000000 $t
     /tmp/ccBI4G28.s:564    .text.mdot:0000000000000000 mdot
     /tmp/ccBI4G28.s:655    .text.mdot:000000000000003c $d
     /tmp/ccBI4G28.s:660    .text.display_menu:0000000000000000 $t
     /tmp/ccBI4G28.s:668    .text.display_menu:0000000000000000 display_menu
     /tmp/ccBI4G28.s:907    .text.display_menu:000000000000010c $d
     /tmp/ccBI4G28.s:915    .text.display_current_menu:0000000000000000 $t
     /tmp/ccBI4G28.s:923    .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccBI4G28.s:938    .text.display_current_menu:0000000000000008 $d
     /tmp/ccBI4G28.s:943    .text.shutdown:0000000000000000 $t
     /tmp/ccBI4G28.s:951    .text.shutdown:0000000000000000 shutdown
     /tmp/ccBI4G28.s:978    .text.shutdown:0000000000000014 $d
     /tmp/ccBI4G28.s:983    .text.is_key_pressed:0000000000000000 $t
     /tmp/ccBI4G28.s:991    .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccBI4G28.s:1014   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccBI4G28.s:1019   .text.get_key:0000000000000000 $t
     /tmp/ccBI4G28.s:1027   .text.get_key:0000000000000000 get_key
     /tmp/ccBI4G28.s:1042   .text.get_key:0000000000000004 $d
     /tmp/ccBI4G28.s:1047   .text.put_key:0000000000000000 $t
     /tmp/ccBI4G28.s:1055   .text.put_key:0000000000000000 put_key
     /tmp/ccBI4G28.s:1072   .text.put_key:0000000000000004 $d
     /tmp/ccBI4G28.s:1077   .text.shift_down:0000000000000000 $t
     /tmp/ccBI4G28.s:1085   .text.shift_down:0000000000000000 shift_down
     /tmp/ccBI4G28.s:1100   .text.start_key_timer:0000000000000000 $t
     /tmp/ccBI4G28.s:1108   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccBI4G28.s:1132   .text.start_key_timer:000000000000000c $d
     /tmp/ccBI4G28.s:1138   .text.keyticks:0000000000000000 $t
     /tmp/ccBI4G28.s:1146   .text.keyticks:0000000000000000 keyticks
     /tmp/ccBI4G28.s:1177   .text.keyticks:0000000000000018 $d
     /tmp/ccBI4G28.s:1183   .text.is_paused:0000000000000000 $t
     /tmp/ccBI4G28.s:1191   .text.is_paused:0000000000000000 is_paused
     /tmp/ccBI4G28.s:1207   .text.is_paused:0000000000000008 $d
     /tmp/ccBI4G28.s:1212   .text.start_pause:0000000000000000 $t
     /tmp/ccBI4G28.s:1220   .text.start_pause:0000000000000000 start_pause
     /tmp/ccBI4G28.s:1247   .text.start_pause:000000000000000c $d
     /tmp/ccBI4G28.s:1252   .text.init_graphics:0000000000000000 $t
     /tmp/ccBI4G28.s:1260   .text.init_graphics:0000000000000000 init_graphics
     /tmp/ccBI4G28.s:1309   .text.init_graphics:0000000000000028 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccBI4G28.s:1318   .text.moveto:0000000000000000 $t
     /tmp/ccBI4G28.s:1326   .text.moveto:0000000000000000 moveto
     /tmp/ccBI4G28.s:1386   .text.moveto:000000000000002c $d
     /tmp/ccBI4G28.s:1393   .rodata.print_debug.str1.4:0000000000000000 $d
ARM GAS  /tmp/ccBI4G28.s 			page 120


     /tmp/ccBI4G28.s:1397   .text.print_debug:0000000000000000 $t
     /tmp/ccBI4G28.s:1405   .text.print_debug:0000000000000000 print_debug
     /tmp/ccBI4G28.s:1507   .text.print_debug:0000000000000064 $d
     /tmp/ccBI4G28.s:1518   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccBI4G28.s:1522   .text.print_debug2:0000000000000000 $t
     /tmp/ccBI4G28.s:1530   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccBI4G28.s:1632   .text.print_debug2:0000000000000064 $d
     /tmp/ccBI4G28.s:1643   .text.do_now:0000000000000000 $t
     /tmp/ccBI4G28.s:1651   .text.do_now:0000000000000000 do_now
     /tmp/ccBI4G28.s:1686   .text.do_multi:0000000000000000 $t
     /tmp/ccBI4G28.s:1694   .text.do_multi:0000000000000000 do_multi
     /tmp/ccBI4G28.s:1725   .text.do_multi:0000000000000018 $d
     /tmp/ccBI4G28.s:1735   .text.do_multi:0000000000000022 $t
     /tmp/ccBI4G28.s:2000   .text.do_multi:000000000000011c $d
     /tmp/ccBI4G28.s:2005   .rodata.program_main.str1.4:0000000000000000 $d
     /tmp/ccBI4G28.s:2009   .text.program_main:0000000000000000 $t
     /tmp/ccBI4G28.s:2017   .text.program_main:0000000000000000 program_main
     /tmp/ccBI4G28.s:2497   .text.program_main:00000000000001fe $d
     /tmp/ccBI4G28.s:2503   .text.program_main:000000000000020a $t
     /tmp/ccBI4G28.s:2697   .text.program_main:00000000000002e8 $d
     /tmp/ccBI4G28.s:2734   .text.program_main:000000000000036c $t
     /tmp/ccBI4G28.s:3314   .text.program_main:000000000000062c $d
     /tmp/ccBI4G28.s:3375   .bss.n_p:0000000000000000 n_p
     /tmp/ccBI4G28.s:3443   .data.spaces:0000000000000000 spaces
     /tmp/ccBI4G28.s:3434   .data.release:0000000000000000 release
     /tmp/ccBI4G28.s:3407   .data.h_shift:0000000000000000 h_shift
     /tmp/ccBI4G28.s:3398   .data.g_shift:0000000000000000 g_shift
     /tmp/ccBI4G28.s:3389   .data.f_shift:0000000000000000 f_shift
     /tmp/ccBI4G28.s:3416   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccBI4G28.s:3425   .data.no_key:0000000000000000 no_key
     /tmp/ccBI4G28.s:3450   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccBI4G28.s:3346   .rodata.str1.4:0000000000000000 $d
     /tmp/ccBI4G28.s:4935   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccBI4G28.s:3351   .bss.current_menu:0000000000000000 $d
     /tmp/ccBI4G28.s:3355   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccBI4G28.s:3358   .bss.last_menu:0000000000000000 $d
     /tmp/ccBI4G28.s:3362   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccBI4G28.s:3365   .bss.mdots:0000000000000000 $d
     /tmp/ccBI4G28.s:3369   .bss.mdots:0000000000000000 mdots
     /tmp/ccBI4G28.s:3372   .bss.n_p:0000000000000000 $d
     /tmp/ccBI4G28.s:3378   .bss.start_ticks:0000000000000000 $d
     /tmp/ccBI4G28.s:3382   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccBI4G28.s:3385   .data.f_shift:0000000000000000 $d
     /tmp/ccBI4G28.s:3394   .data.g_shift:0000000000000000 $d
     /tmp/ccBI4G28.s:3403   .data.h_shift:0000000000000000 $d
     /tmp/ccBI4G28.s:3412   .data.heartbeat:0000000000000000 $d
     /tmp/ccBI4G28.s:3421   .data.no_key:0000000000000000 $d
     /tmp/ccBI4G28.s:3430   .data.release:0000000000000000 $d
     /tmp/ccBI4G28.s:3439   .data.spaces:0000000000000000 $d
     /tmp/ccBI4G28.s:3446   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccBI4G28.s:3456   .rodata.Menus:0000000000000000 $d
     /tmp/ccBI4G28.s:3460   .rodata.Menus:0000000000000000 Menus
     /tmp/ccBI4G28.s:4344   .rodata.mapping_alpha.10876:0000000000000000 $d
     /tmp/ccBI4G28.s:4348   .rodata.mapping_alpha.10876:0000000000000000 mapping_alpha.10876
     /tmp/ccBI4G28.s:4491   .rodata.mapping_fshift.10874:0000000000000000 $d
     /tmp/ccBI4G28.s:4495   .rodata.mapping_fshift.10874:0000000000000000 mapping_fshift.10874
     /tmp/ccBI4G28.s:4638   .rodata.mapping_gshift.10875:0000000000000000 $d
ARM GAS  /tmp/ccBI4G28.s 			page 121


     /tmp/ccBI4G28.s:4642   .rodata.mapping_gshift.10875:0000000000000000 mapping_gshift.10875
     /tmp/ccBI4G28.s:4785   .rodata.mapping_none.10873:0000000000000000 $d
     /tmp/ccBI4G28.s:4789   .rodata.mapping_none.10873:0000000000000000 mapping_none.10873
     /tmp/ccBI4G28.s:4932   .rodata.mid_menu:0000000000000000 $d

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
pixel_length
save_ram_file
Pause
strcpy
sprintf
process_keycode_with_shift
save_prog_file
flash_backup
flash_restore
save_lib_file
load_lib_file
load_ram_file
load_prog_file
init_mem
init_RegionTab
init_34s
load_backup_file
display
get_alpha_state
cur_shift
StateWhileOn
DispMsg
JustDisplayed

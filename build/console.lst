ARM GAS  /tmp/ccuwCXMe.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC3:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** //#include <menu.h>
   2:src/menu.c    **** struct _menu UserMenu =
   3:src/menu.c    ****   {
   4:src/menu.c    ****     "User Menu", 
   5:src/menu.c    ****     {
   6:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   7:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   8:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   9:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  10:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  11:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
  12:src/menu.c    ****     }
  13:src/menu.c    ****   };
  14:src/menu.c    **** 
  15:src/menu.c    **** const char* arrow_key_string = "--\015";
  16:src/menu.c    **** const char* cmplx_key_string = "CPX";
  17:src/menu.c    **** 
  18:src/menu.c    **** menu_name current_menu = 0;
  19:src/menu.c    **** menu_name last_menu = 0;
  20:src/menu.c    **** menu_name default_menu = 0;
  21:src/menu.c    **** 
  22:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted);
  23:src/menu.c    **** 
ARM GAS  /tmp/ccuwCXMe.s 			page 2


  24:src/menu.c    **** 
  25:src/menu.c    **** 
  26:src/menu.c    **** /* 
  27:src/menu.c    ****  * System menu stuff
  28:src/menu.c    ****  */
  29:src/menu.c    **** 
  30:src/menu.c    **** #define MI_ABOUT_PGM 11
  31:src/menu.c    **** 
  32:src/menu.c    **** const uint8_t mid_menu[] = {
  33:src/menu.c    ****     MI_SYSTEM_ENTER,
  34:src/menu.c    ****     MI_MSC,
  35:src/menu.c    ****     MI_ABOUT_PGM,
  36:src/menu.c    ****     0 }; // Terminator
  37:src/menu.c    **** 
  38:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  39:src/menu.c    **** 
  40:src/menu.c    **** void disp_about(void);
  41:src/menu.c    **** 
  42:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  43:src/menu.c    ****   int ret = 0;
  44:src/menu.c    **** 
  45:src/menu.c    ****   switch(line_id) {
  46:src/menu.c    ****     case MI_ABOUT_PGM:
  47:src/menu.c    ****       disp_about();
  48:src/menu.c    ****       break;
  49:src/menu.c    **** 
  50:src/menu.c    ****      default:
  51:src/menu.c    ****       ret = MRET_UNIMPL;
  52:src/menu.c    ****       break;
  53:src/menu.c    ****   }
  54:src/menu.c    **** 
  55:src/menu.c    ****   return ret;
  56:src/menu.c    **** }
  57:src/menu.c    **** 
  58:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 58 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  59:src/menu.c    ****   const char * ln;
  40              		.loc 1 59 3 view .LVU1
  60:src/menu.c    **** 
  61:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 61 3 view .LVU2
  62:src/menu.c    **** 
  63:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  64:src/menu.c    **** 
  65:src/menu.c    ****   default:
  66:src/menu.c    ****     ln = NULL;
  42              		.loc 1 66 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  61:src/menu.c    **** 
  44              		.loc 1 61 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
  67:src/menu.c    ****     break;
  68:src/menu.c    ****   }
ARM GAS  /tmp/ccuwCXMe.s 			page 3


  69:src/menu.c    **** 
  70:src/menu.c    ****   return ln;
  71:src/menu.c    **** }
  46              		.loc 1 71 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 71 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC3
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB37:
  72:src/menu.c    **** 
  73:src/menu.c    **** void disp_about() {
  74:src/menu.c    ****   lcd_clear_buf();
  75:src/menu.c    ****   lcd_writeClr(t24);
  76:src/menu.c    **** 
  77:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  78:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
  79:src/menu.c    ****   t24->y += 5;
  80:src/menu.c    **** #ifdef TOP_ROW
  81:src/menu.c    ****   lcd_print(t24, "top row version,");
  82:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
  83:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  84:src/menu.c    ****   lcd_print(t24, "with a longer alpha display,");
  85:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  86:src/menu.c    ****   #else
  87:src/menu.c    ****   lcd_print(t24, "Just like the original calculator");
  88:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed,");
  89:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  90:src/menu.c    **** #endif
  91:src/menu.c    ****   t24->y += 5;
  92:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
  93:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
  94:src/menu.c    **** 
  95:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
  96:src/menu.c    ****   t24->x = 20;
  97:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
  98:src/menu.c    **** 
  99:src/menu.c    ****   lcd_refresh();
 100:src/menu.c    **** 
 101:src/menu.c    ****   wait_for_key_press();
 102:src/menu.c    **** }
ARM GAS  /tmp/ccuwCXMe.s 			page 4


 103:src/menu.c    **** 
 104:src/menu.c    **** /*
 105:src/menu.c    ****  * WP34s menu code
 106:src/menu.c    ****  */
 107:src/menu.c    **** 
 108:src/menu.c    **** void set_menu ( menu_name new_menu ) {
 109:src/menu.c    ****   menu_name m = current_menu;
 110:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 111:src/menu.c    ****     current_menu = default_menu;
 112:src/menu.c    ****   }
 113:src/menu.c    ****   else if (new_menu == M_Last) { // go to last menu
 114:src/menu.c    ****     current_menu = last_menu;
 115:src/menu.c    ****   }
 116:src/menu.c    ****   else {
 117:src/menu.c    ****     current_menu = new_menu; // change to new menu
 118:src/menu.c    ****   }
 119:src/menu.c    ****   if ( (m != M_Arrow) && (m != M_Alpha) ) last_menu = m;
 120:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 121:src/menu.c    **** }
 122:src/menu.c    **** 
 123:src/menu.c    **** void set_default_menu () {
 124:src/menu.c    ****   set_menu (default_menu);
 125:src/menu.c    **** }
 126:src/menu.c    **** 
 127:src/menu.c    **** void toggle_default_menu () {
 128:src/menu.c    ****   if (current_menu == M_Blank) {
 129:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 130:src/menu.c    ****     return;
 131:src/menu.c    ****   }
 132:src/menu.c    ****   else if (current_menu == M_Blank2) {
 133:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 134:src/menu.c    ****   }
 135:src/menu.c    ****   else {
 136:src/menu.c    ****     set_default_menu();
 137:src/menu.c    ****   }
 138:src/menu.c    **** }
 139:src/menu.c    **** 
 140:src/menu.c    **** menu_name get_menu () {
 141:src/menu.c    ****   return current_menu;
 142:src/menu.c    **** }
 143:src/menu.c    **** 
 144:src/menu.c    **** menu_name get_last_menu () {
 145:src/menu.c    ****   return last_menu;
 146:src/menu.c    **** }
 147:src/menu.c    **** 
 148:src/menu.c    **** void display_current_menu () {
 149:src/menu.c    ****   display_menu (get_current_menu_ref());
 150:src/menu.c    **** }
 151:src/menu.c    **** 
 152:src/menu.c    **** void set_last_menu () {
 153:src/menu.c    ****   set_menu (M_Last);
 154:src/menu.c    **** }
 155:src/menu.c    **** 
 156:src/menu.c    **** static unsigned char mdots[200][2];
 157:src/menu.c    **** 
 158:src/menu.c    **** static const struct _menu Menus[] = {
 159:src/menu.c    ****   {
ARM GAS  /tmp/ccuwCXMe.s 			page 5


 160:src/menu.c    ****     "M_Blank", // 0
 161:src/menu.c    ****     { 
 162:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 163:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 164:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 165:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 166:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 167:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 168:src/menu.c    ****     }    
 169:src/menu.c    ****   },
 170:src/menu.c    ****   {
 171:src/menu.c    ****     "M_Clear", // 1
 172:src/menu.c    ****     { 
 173:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 174:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 175:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 176:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 177:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 178:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 179:src/menu.c    ****     }    
 180:src/menu.c    ****   },
 181:src/menu.c    ****   {
 182:src/menu.c    ****     "M_Disp", // 2
 183:src/menu.c    ****     { 
 184:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 185:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 186:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 187:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 188:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 189:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 190:src/menu.c    ****     }
 191:src/menu.c    ****   },
 192:src/menu.c    ****   {
 193:src/menu.c    ****     "M_Base", // 3
 194:src/menu.c    ****     { 
 195:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 196:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 197:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 198:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 199:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 200:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 201:src/menu.c    ****     }
 202:src/menu.c    ****   },
 203:src/menu.c    ****   {
 204:src/menu.c    ****     "M_Angles", // 4
 205:src/menu.c    ****     { 
 206:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 207:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 208:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 209:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 210:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 211:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 212:src/menu.c    ****     }
 213:src/menu.c    ****       
 214:src/menu.c    ****   },
 215:src/menu.c    ****   {
 216:src/menu.c    ****     "M_Misc", // 5
ARM GAS  /tmp/ccuwCXMe.s 			page 6


 217:src/menu.c    ****     { 
 218:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 219:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 220:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 221:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 222:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 223:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 224:src/menu.c    ****     }
 225:src/menu.c    ****   },
 226:src/menu.c    ****   {
 227:src/menu.c    ****     "M_Swap", // 6
 228:src/menu.c    ****     { 
 229:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 230:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 231:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 232:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 233:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 234:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 235:src/menu.c    ****     }    
 236:src/menu.c    ****   },
 237:src/menu.c    ****   {
 238:src/menu.c    ****     "M_Program", // 7
 239:src/menu.c    ****     { 
 240:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 241:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 242:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 243:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 244:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 245:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 246:src/menu.c    ****     }
 247:src/menu.c    ****   },
 248:src/menu.c    ****   {
 249:src/menu.c    ****     "M_Setup1", // 8
 250:src/menu.c    ****     { 
 251:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 252:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 253:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 254:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 255:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 256:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 257:src/menu.c    ****     }
 258:src/menu.c    ****   },
 259:src/menu.c    ****   {
 260:src/menu.c    ****     "M_Arrow", // 9
 261:src/menu.c    ****     { 
 262:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 263:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 264:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 265:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "\015HMS" },
 266:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 267:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 268:src/menu.c    ****     }
 269:src/menu.c    ****   },
 270:src/menu.c    ****   {
 271:src/menu.c    ****     "M_Flags", // 10
 272:src/menu.c    ****     { 
 273:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
ARM GAS  /tmp/ccuwCXMe.s 			page 7


 274:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 275:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 276:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 277:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 278:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 279:src/menu.c    ****     }
 280:src/menu.c    ****   },
 281:src/menu.c    ****   {
 282:src/menu.c    ****     "M_Prob", // 11
 283:src/menu.c    ****     { 
 284:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 285:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 286:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 287:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 288:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 289:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 290:src/menu.c    ****     }
 291:src/menu.c    ****   },
 292:src/menu.c    ****   {
 293:src/menu.c    ****     "M_Stats", // 12
 294:src/menu.c    ****     /*
 295:src/menu.c    ****      *xbar, sd;
 296:src/menu.c    ****      *yhat, xhat;
 297:src/menu.c    ****      *corr, L.R.;
 298:src/menu.c    ****      *best, linear;
 299:src/menu.c    ****      *ln, exp;
 300:src/menu.c    ****      *cmplx, power;
 301:src/menu.c    ****      *No, sums is already on g9.
 302:src/menu.c    ****      */
 303:src/menu.c    ****     { 
 304:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 305:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 306:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 307:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 308:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 309:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 310:src/menu.c    ****     }
 311:src/menu.c    ****   },
 312:src/menu.c    ****   {
 313:src/menu.c    ****     "M_Setup2", // 13
 314:src/menu.c    ****     { 
 315:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 316:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 317:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 318:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 319:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 320:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 321:src/menu.c    ****     }
 322:src/menu.c    ****   },
 323:src/menu.c    ****   {
 324:src/menu.c    ****     "M_Solve", // 14
 325:src/menu.c    ****     { 
 326:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 327:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 328:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 329:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 330:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
ARM GAS  /tmp/ccuwCXMe.s 			page 8


 331:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 332:src/menu.c    ****     }
 333:src/menu.c    ****   },
 334:src/menu.c    ****   {
 335:src/menu.c    ****     "M_Blank2", // 15
 336:src/menu.c    ****     { 
 337:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 338:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 339:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 340:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 341:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 342:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 343:src/menu.c    ****     }    
 344:src/menu.c    ****   },
 345:src/menu.c    ****   {
 346:src/menu.c    ****     "M_Alpha", // 16
 347:src/menu.c    ****     { 
 348:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 349:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 350:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 351:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 352:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 353:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 354:src/menu.c    ****     }    
 355:src/menu.c    ****   },
 356:src/menu.c    ****   {
 357:src/menu.c    ****     "M_C_Lock", // 17
 358:src/menu.c    ****     { 
 359:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 360:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 361:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "CHS\006y", "CHS\006x" },
 362:src/menu.c    ****       { { K21, 1 }, { K00, 1 }, "x\027y", "HYP" },
 363:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 364:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 365:src/menu.c    ****     }    
 366:src/menu.c    ****   },
 367:src/menu.c    ****   {
 368:src/menu.c    ****     "M_Clear_C", // 18
 369:src/menu.c    ****     { 
 370:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 371:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 372:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 373:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, NO_KEY, "CLStk", "" },
 374:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 375:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 376:src/menu.c    ****     }    
 377:src/menu.c    ****   },
 378:src/menu.c    ****   {
 379:src/menu.c    ****     "M_Swap_C", // 19
 380:src/menu.c    ****     { 
 381:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 382:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 383:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 384:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 385:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 386:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 387:src/menu.c    ****     }    
ARM GAS  /tmp/ccuwCXMe.s 			page 9


 388:src/menu.c    ****   },
 389:src/menu.c    ****   {
 390:src/menu.c    ****     "M_Arrow_C", // 20
 391:src/menu.c    ****     { 
 392:src/menu.c    ****       { NO_KEY, { K10, 2 }, "", "DEG" },
 393:src/menu.c    ****       { NO_KEY, { K11, 2 }, "", "RAD" },
 394:src/menu.c    ****       { NO_KEY, { K12, 2 }, "", "Grad" },
 395:src/menu.c    ****       { NO_KEY, { K10, 1 }, "", "\015HMS" },
 396:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 397:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 398:src/menu.c    ****     }
 399:src/menu.c    ****   },
 400:src/menu.c    ****   {
 401:src/menu.c    ****     "M_Prob_C", // 21
 402:src/menu.c    ****     { 
 403:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_CMON | OP_LNGAMMA }, "\024\006!", "\024\006Ln\006\202" },
 404:src/menu.c    ****       { { K_OP, OP_CDYA | OP_COMB }, NO_KEY, "\024\006Cy,x", "" },
 405:src/menu.c    ****       { { K_OP, OP_CDYA | OP_PERM }, NO_KEY, "\024\006Py,x", "" },
 406:src/menu.c    ****       { NO_KEY, NO_KEY , "", "" },
 407:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 408:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 409:src/menu.c    ****     }
 410:src/menu.c    ****   },
 411:src/menu.c    ****   {
 412:src/menu.c    ****     "M_Blank2_C", // 22
 413:src/menu.c    ****     { 
 414:src/menu.c    ****       { { K00, 1 }, NO_KEY, "HYP", "" },
 415:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 416:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 417:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 418:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 419:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 420:src/menu.c    ****     }    
 421:src/menu.c    ****   },
 422:src/menu.c    ****   {
 423:src/menu.c    ****     "M_Misc_C", // 23
 424:src/menu.c    ****     { 
 425:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 426:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 427:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "0\015Re", "Log\213" },
 428:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "0\015Im", "||el" },
 429:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", ".\034" },
 430:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "./" },
 431:src/menu.c    ****     }
 432:src/menu.c    ****   },
 433:src/menu.c    ****   {
 434:src/menu.c    ****     "M_Usermenu", // 24
 435:src/menu.c    ****     { 
 436:src/menu.c    ****       { { K_OP, 0x0000fb00  }, NO_KEY, "UMEN", "" },
 437:src/menu.c    ****       { { K_OP, 0x314dfb55 }, { K_OP, 0x344dfb55 }, "UM1", "UM4" },
 438:src/menu.c    ****       { { K_OP, 0x324dfb55 }, { K_OP, 0x354dfb55 }, "UM2", "UM5" },
 439:src/menu.c    ****       { { K_OP, 0x334dfb55 }, { K_OP, 0x364dfb55 }, "UM3", "UM6" },
 440:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "" },
 441:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "" },
 442:src/menu.c    ****     }
 443:src/menu.c    ****   },
 444:src/menu.c    ****   {
ARM GAS  /tmp/ccuwCXMe.s 			page 10


 445:src/menu.c    ****     "M_Print", // 25
 446:src/menu.c    ****     { 
 447:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_ON  }, { K_OP, OP_NIL | OP_PRINT_OFF }, "\222\006On", "\222\006Of
 448:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_PMODE) }, { K_OP, RARG_BASEOP(RARG_DBLSP) }, "\222\006Mode", "\222
 449:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_PGM }, { K_OP, OP_NIL | OP_PRINT_REGS }, "\222\006Prog", "\222\00
 450:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_STACK }, { K_OP, OP_NIL | OP_PRINT_SIGMA }, "\222\006Stck", "\222
 451:src/menu.c    ****       { ARROW_KEY, { K_OP, OP_NIL | OP_PRINT_ALPHA }, "--\015", "\222\006\240" },
 452:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PRINT_ADV }, "CPX", "\222\006ADV" },
 453:src/menu.c    ****     }
 454:src/menu.c    ****   },
 455:src/menu.c    **** 
 456:src/menu.c    **** };  
 457:src/menu.c    **** 
 458:src/menu.c    **** /* This code is the set_status_sized code with small changes
 459:src/menu.c    ****  * and non-DM42 code removed.
 460:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 461:src/menu.c    ****  */
 462:src/menu.c    **** #define MENU_WIDTH 32
 463:src/menu.c    **** 
 464:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 464 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 465:src/menu.c    ****   // dotcol is the number of the starting dot column
 466:src/menu.c    ****   // shifted is 1 if shifted
 467:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 467 3 view .LVU8
 468:src/menu.c    **** 
 469:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 470:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 470 3 view .LVU9
 471:src/menu.c    **** 
 472:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 472 3 view .LVU10
 464:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 464 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 464:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 464 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 473:src/menu.c    ****   int i, j, xmax;
 474:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 474 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
ARM GAS  /tmp/ccuwCXMe.s 			page 11


 475:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 476:src/menu.c    **** 
 477:src/menu.c    ****   //  forceDispPlot=0;
 478:src/menu.c    **** 
 479:src/menu.c    **** #ifdef RP_PREFIX
 480:src/menu.c    ****   RectPolConv = 0;
  96              		.loc 1 480 15 view .LVU14
  97 000e 494A     		ldr	r2, .L41
  98              	.LVL3:
 474:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  99              		.loc 1 474 18 view .LVU15
 100 0010 B4BF     		ite	lt
 101 0012 01F11F03 		addlt	r3, r1, #31
 102 0016 0B46     		movge	r3, r1
 464:src/menu.c    ****   // dotcol is the number of the starting dot column
 103              		.loc 1 464 13 view .LVU16
 104 0018 0F46     		mov	r7, r1
 105              	.LVL4:
 473:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
 106              		.loc 1 473 3 is_stmt 1 view .LVU17
 474:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 107              		.loc 1 474 3 view .LVU18
 108              		.loc 1 480 15 is_stmt 0 view .LVU19
 109 001a 0021     		movs	r1, #0
 110              	.LVL5:
 111              		.loc 1 480 15 view .LVU20
 112 001c 1160     		str	r1, [r2]
 481:src/menu.c    **** #endif
 482:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 113              		.loc 1 482 10 view .LVU21
 114 001e 019A     		ldr	r2, [sp, #4]
 115 0020 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 474:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 116              		.loc 1 474 30 view .LVU22
 117 0022 23F01F03 		bic	r3, r3, #31
 474:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 118              		.loc 1 474 8 view .LVU23
 119 0026 03F12009 		add	r9, r3, #32
 120              	.LVL6:
 475:src/menu.c    **** 
 121              		.loc 1 475 3 is_stmt 1 view .LVU24
 480:src/menu.c    **** #endif
 122              		.loc 1 480 3 view .LVU25
 123              		.loc 1 482 3 view .LVU26
 124              		.loc 1 482 9 view .LVU27
 125 002a 002D     		cmp	r5, #0
 126 002c 78D0     		beq	.L7
 127              		.loc 1 482 23 is_stmt 0 view .LVU28
 128 002e 4F45     		cmp	r7, r9
 129 0030 76DC     		bgt	.L7
 130              	.LBB39:
 483:src/menu.c    ****     int c;
 484:src/menu.c    ****     int width;
 485:src/menu.c    ****     unsigned char cmap[6];
 486:src/menu.c    **** 
 487:src/menu.c    ****     int real_width;
 488:src/menu.c    ****     int current_smallp;
ARM GAS  /tmp/ccuwCXMe.s 			page 12


 489:src/menu.c    **** 
 490:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 491:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 492:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 493:src/menu.c    ****     //           01 -> (not used)
 494:src/menu.c    ****     //           10 -> use big font
 495:src/menu.c    ****     //           11 -> use small font
 496:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 497:src/menu.c    ****     if (str[0] == '\007') {
 131              		.loc 1 497 8 view .LVU29
 132 0032 072D     		cmp	r5, #7
 133              	.LBE39:
 470:src/menu.c    **** 
 134              		.loc 1 470 7 view .LVU30
 135 0034 4FF0FF04 		mov	r4, #255
 136              	.LVL7:
 137              	.LBB56:
 483:src/menu.c    ****     int c;
 138              		.loc 1 483 5 is_stmt 1 view .LVU31
 484:src/menu.c    ****     unsigned char cmap[6];
 139              		.loc 1 484 5 view .LVU32
 485:src/menu.c    **** 
 140              		.loc 1 485 5 view .LVU33
 487:src/menu.c    ****     int current_smallp;
 141              		.loc 1 487 5 view .LVU34
 488:src/menu.c    **** 
 142              		.loc 1 488 5 view .LVU35
 143              		.loc 1 497 5 view .LVU36
 498:src/menu.c    ****       width = str[1] & 0x1F;
 499:src/menu.c    ****       switch (str[1] & 0x60) {
 500:src/menu.c    ****       default:
 501:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 502:src/menu.c    **** 	break;
 503:src/menu.c    ****       case 0x40:	current_smallp = 0;
 504:src/menu.c    **** 	break;
 505:src/menu.c    ****       case 0x60:	current_smallp = 1;
 144              		.loc 1 505 33 is_stmt 0 view .LVU37
 145 0038 4FF0010A 		mov	r10, #1
 497:src/menu.c    ****       width = str[1] & 0x1F;
 146              		.loc 1 497 8 view .LVU38
 147 003c 64D1     		bne	.L11
 148              	.LVL8:
 149              	.L39:
 498:src/menu.c    ****       width = str[1] & 0x1F;
 150              		.loc 1 498 7 is_stmt 1 view .LVU39
 498:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 498 18 is_stmt 0 view .LVU40
 152 003e 019B     		ldr	r3, [sp, #4]
 153 0040 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 154 0042 06F06003 		and	r3, r6, #96
 499:src/menu.c    ****       default:
 155              		.loc 1 499 7 view .LVU41
 156 0046 402B     		cmp	r3, #64
 498:src/menu.c    ****       width = str[1] & 0x1F;
 157              		.loc 1 498 13 view .LVU42
 158 0048 06F01F06 		and	r6, r6, #31
 159              	.LVL9:
ARM GAS  /tmp/ccuwCXMe.s 			page 13


 499:src/menu.c    ****       default:
 160              		.loc 1 499 7 is_stmt 1 view .LVU43
 161 004c 6CD0     		beq	.L34
 162 004e 602B     		cmp	r3, #96
 163 0050 6AD1     		bne	.L34
 164              		.loc 1 505 18 view .LVU44
 165              	.LVL10:
 506:src/menu.c    **** 	break;
 166              		.loc 1 506 2 view .LVU45
 507:src/menu.c    ****       }
 508:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 167              		.loc 1 508 7 view .LVU46
 168              		.loc 1 508 11 is_stmt 0 view .LVU47
 169 0052 019B     		ldr	r3, [sp, #4]
 170 0054 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 505:src/menu.c    **** 	break;
 171              		.loc 1 505 33 view .LVU48
 172 0056 0123     		movs	r3, #1
 173 0058 0093     		str	r3, [sp]
 174 005a 00F58075 		add	r5, r0, #256
 175              	.LVL11:
 176              	.L15:
 509:src/menu.c    ****       str += 3;
 177              		.loc 1 509 7 is_stmt 1 view .LVU49
 510:src/menu.c    **** 
 511:src/menu.c    ****       real_width = charlengths(c);
 178              		.loc 1 511 20 is_stmt 0 view .LVU50
 179 005e 2846     		mov	r0, r5
 180 0060 FFF7FEFF 		bl	charlengths
 181              	.LVL12:
 509:src/menu.c    ****       str += 3;
 182              		.loc 1 509 11 view .LVU51
 183 0064 019B     		ldr	r3, [sp, #4]
 184 0066 0333     		adds	r3, r3, #3
 185 0068 0193     		str	r3, [sp, #4]
 186              	.LVL13:
 187              		.loc 1 511 7 is_stmt 1 view .LVU52
 512:src/menu.c    ****     } else {
 513:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 514:src/menu.c    ****       real_width = width = charlengths(c);
 515:src/menu.c    ****       current_smallp = smallp;
 516:src/menu.c    ****     }
 517:src/menu.c    **** 
 518:src/menu.c    ****     if (x + real_width > xmax)
 188              		.loc 1 518 5 view .LVU53
 189              		.loc 1 518 11 is_stmt 0 view .LVU54
 190 006a C319     		adds	r3, r0, r7
 191              	.LVL14:
 192              		.loc 1 518 8 view .LVU55
 193 006c 9945     		cmp	r9, r3
 194 006e 57DB     		blt	.L7
 195              	.L40:
 519:src/menu.c    ****       break;
 520:src/menu.c    **** 
 521:src/menu.c    ****     if (posns_state != current_smallp) {
 196              		.loc 1 521 5 is_stmt 1 view .LVU56
 197              		.loc 1 521 8 is_stmt 0 view .LVU57
ARM GAS  /tmp/ccuwCXMe.s 			page 14


 198 0070 009B     		ldr	r3, [sp]
 199 0072 A342     		cmp	r3, r4
 522:src/menu.c    ****       findlengths(posns, current_smallp);
 200              		.loc 1 522 7 view .LVU58
 201 0074 07AB     		add	r3, sp, #28
 521:src/menu.c    ****       findlengths(posns, current_smallp);
 202              		.loc 1 521 8 view .LVU59
 203 0076 05D0     		beq	.L18
 204              		.loc 1 522 7 is_stmt 1 view .LVU60
 205 0078 1846     		mov	r0, r3
 206              	.LVL15:
 207              		.loc 1 522 7 is_stmt 0 view .LVU61
 208 007a 0099     		ldr	r1, [sp]
 209 007c 0393     		str	r3, [sp, #12]
 210 007e FFF7FEFF 		bl	findlengths
 211              	.LVL16:
 212 0082 039B     		ldr	r3, [sp, #12]
 523:src/menu.c    ****       posns_state = current_smallp;
 213              		.loc 1 523 7 is_stmt 1 view .LVU62
 214              	.LVL17:
 215              	.L18:
 524:src/menu.c    ****     }
 525:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 216              		.loc 1 525 5 view .LVU63
 217 0084 009A     		ldr	r2, [sp]
 218 0086 2846     		mov	r0, r5
 219 0088 05A9     		add	r1, sp, #20
 220 008a FFF7FEFF 		bl	unpackchar
 221              	.LVL18:
 526:src/menu.c    **** 
 527:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 222              		.loc 1 527 5 view .LVU64
 223              		.loc 1 527 15 view .LVU65
 224 008e 029B     		ldr	r3, [sp, #8]
 225 0090 03EB4704 		add	r4, r3, r7, lsl #1
 226 0094 284B     		ldr	r3, .L41+4
 227 0096 0DF1140B 		add	fp, sp, #20
 228 009a 1C44     		add	r4, r4, r3
 525:src/menu.c    **** 
 229              		.loc 1 525 5 is_stmt 0 view .LVU66
 230 009c 4FF0050E 		mov	lr, #5
 231 00a0 A9EB0705 		sub	r5, r9, r7
 232              	.LVL19:
 233              	.L19:
 528:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 234              		.loc 1 528 17 is_stmt 1 view .LVU67
 235              		.loc 1 528 7 is_stmt 0 view .LVU68
 236 00a4 002E     		cmp	r6, #0
 237 00a6 1FDD     		ble	.L25
 529:src/menu.c    **** 	if (x+j >= xmax)
 238              		.loc 1 529 2 is_stmt 1 view .LVU69
 239              		.loc 1 529 5 is_stmt 0 view .LVU70
 240 00a8 B945     		cmp	r9, r7
 241 00aa 1DDD     		ble	.L25
 242              	.LBB40:
 243              	.LBB41:
 244              	.LBB42:
ARM GAS  /tmp/ccuwCXMe.s 			page 15


 245              	.LBB43:
 530:src/menu.c    **** 	  break;
 531:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 532:src/menu.c    ****       }
 533:src/menu.c    ****     }
 534:src/menu.c    ****     x += width;
 535:src/menu.c    ****   }
 536:src/menu.c    **** }
 537:src/menu.c    **** 
 538:src/menu.c    **** 
 539:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 540:src/menu.c    **** 
 541:src/menu.c    **** int pixel_length(const char *s, int smallp)
 542:src/menu.c    **** {
 543:src/menu.c    ****   int len = 0;
 544:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 545:src/menu.c    ****   while (*s != '\0') {
 546:src/menu.c    ****     if (s[0] == '\007') {
 547:src/menu.c    ****       len += s[1] & 0x1F;
 548:src/menu.c    ****       s += 3;
 549:src/menu.c    ****       continue;
 550:src/menu.c    ****     }
 551:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 552:src/menu.c    ****   }
 553:src/menu.c    ****   return len;
 554:src/menu.c    **** }
 555:src/menu.c    **** */
 556:src/menu.c    **** 
 557:src/menu.c    **** 
 558:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 559:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 560:src/menu.c    ****   if (on) {
 561:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 562:src/menu.c    ****   }
 563:src/menu.c    ****   else {
 564:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 246              		.loc 1 564 25 view .LVU71
 247 00ac 0AFA0EFC 		lsl	ip, r10, lr
 248              		.loc 1 564 17 view .LVU72
 249 00b0 4FFA8CFC 		sxtb	ip, ip
 250              	.LBE43:
 251              	.LBE42:
 252              	.LBE41:
 253              	.LBE40:
 531:src/menu.c    ****       }
 254              		.loc 1 531 31 view .LVU73
 255 00b4 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 256              	.LBB53:
 257              	.LBB50:
 258              	.LBB47:
 259              	.LBB44:
 260              		.loc 1 564 17 view .LVU74
 261 00b8 6FEA0C08 		mvn	r8, ip
 262              	.LBE44:
 263              	.LBE47:
 264              	.LBE50:
 265              	.LBE53:
ARM GAS  /tmp/ccuwCXMe.s 			page 16


 528:src/menu.c    **** 	if (x+j >= xmax)
 266              		.loc 1 528 13 view .LVU75
 267 00bc 0023     		movs	r3, #0
 268 00be 01E0     		b	.L20
 269              	.LVL20:
 270              	.L24:
 529:src/menu.c    **** 	  break;
 271              		.loc 1 529 5 view .LVU76
 272 00c0 9D42     		cmp	r5, r3
 273 00c2 11D0     		beq	.L25
 274              	.LVL21:
 275              	.L20:
 531:src/menu.c    ****       }
 276              		.loc 1 531 2 is_stmt 1 view .LVU77
 277              	.LBB54:
 278              	.LBI40:
 558:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 279              		.loc 1 558 6 view .LVU78
 280              	.LBB51:
 559:src/menu.c    ****   if (on) {
 281              		.loc 1 559 3 view .LVU79
 282              	.LBB48:
 283              	.LBI42:
 558:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 558 6 view .LVU80
 285              	.LBB45:
 560:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 286              		.loc 1 560 3 view .LVU81
 287              	.LBE45:
 288              	.LBE48:
 559:src/menu.c    ****   if (on) {
 289              		.loc 1 559 6 is_stmt 0 view .LVU82
 290 00c4 DA19     		adds	r2, r3, r7
 291              	.LVL22:
 559:src/menu.c    ****   if (on) {
 292              		.loc 1 559 6 view .LVU83
 293 00c6 C72A     		cmp	r2, #199
 294              	.LBE51:
 295              	.LBE54:
 531:src/menu.c    ****       }
 296              		.loc 1 531 46 view .LVU84
 297 00c8 40FA03F1 		asr	r1, r0, r3
 298              	.LBB55:
 299              	.LBB52:
 559:src/menu.c    ****   if (on) {
 300              		.loc 1 559 6 view .LVU85
 301 00cc 09D8     		bhi	.L22
 302              	.LBB49:
 303              	.LBB46:
 561:src/menu.c    ****   }
 304              		.loc 1 561 5 is_stmt 1 view .LVU86
 305              		.loc 1 564 5 view .LVU87
 561:src/menu.c    ****   }
 306              		.loc 1 561 17 is_stmt 0 view .LVU88
 307 00ce 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 308              	.LVL23:
 560:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
ARM GAS  /tmp/ccuwCXMe.s 			page 17


 309              		.loc 1 560 6 view .LVU89
 310 00d2 C907     		lsls	r1, r1, #31
 561:src/menu.c    ****   }
 311              		.loc 1 561 17 view .LVU90
 312 00d4 4CBF     		ite	mi
 313 00d6 4CEA0202 		orrmi	r2, ip, r2
 314              		.loc 1 564 17 view .LVU91
 315 00da 08EA0202 		andpl	r2, r8, r2
 316 00de 04F81320 		strb	r2, [r4, r3, lsl #1]
 317              	.L22:
 318              	.LBE46:
 319              	.LBE49:
 320              	.LBE52:
 321              	.LBE55:
 529:src/menu.c    **** 	  break;
 322              		.loc 1 529 2 is_stmt 1 view .LVU92
 323              	.LVL24:
 528:src/menu.c    **** 	if (x+j >= xmax)
 324              		.loc 1 528 26 view .LVU93
 528:src/menu.c    **** 	if (x+j >= xmax)
 325              		.loc 1 528 27 is_stmt 0 view .LVU94
 326 00e2 0133     		adds	r3, r3, #1
 327              	.LVL25:
 528:src/menu.c    **** 	if (x+j >= xmax)
 328              		.loc 1 528 17 is_stmt 1 view .LVU95
 528:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 528 7 is_stmt 0 view .LVU96
 330 00e4 B342     		cmp	r3, r6
 331 00e6 EBD1     		bne	.L24
 332              	.LVL26:
 333              	.L25:
 527:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 334              		.loc 1 527 20 is_stmt 1 view .LVU97
 527:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 335              		.loc 1 527 15 view .LVU98
 336 00e8 0EF1FF3E 		add	lr, lr, #-1
 527:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 337              		.loc 1 527 5 is_stmt 0 view .LVU99
 338 00ec BEF1FF3F 		cmp	lr, #-1
 339 00f0 0BF1010B 		add	fp, fp, #1
 340              	.LVL27:
 527:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 341              		.loc 1 527 5 view .LVU100
 342 00f4 D6D1     		bne	.L19
 534:src/menu.c    ****   }
 343              		.loc 1 534 5 is_stmt 1 view .LVU101
 344              	.LBE56:
 482:src/menu.c    ****     int c;
 345              		.loc 1 482 10 is_stmt 0 view .LVU102
 346 00f6 019B     		ldr	r3, [sp, #4]
 347 00f8 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 348              	.LBB57:
 534:src/menu.c    ****   }
 349              		.loc 1 534 7 view .LVU103
 350 00fa 3744     		add	r7, r7, r6
 351              	.LVL28:
 534:src/menu.c    ****   }
ARM GAS  /tmp/ccuwCXMe.s 			page 18


 352              		.loc 1 534 7 view .LVU104
 353              	.LBE57:
 482:src/menu.c    ****     int c;
 354              		.loc 1 482 9 is_stmt 1 view .LVU105
 355 00fc 85B1     		cbz	r5, .L7
 482:src/menu.c    ****     int c;
 356              		.loc 1 482 23 is_stmt 0 view .LVU106
 357 00fe B945     		cmp	r9, r7
 358 0100 0EDB     		blt	.L7
 359              	.LBB58:
 497:src/menu.c    ****       width = str[1] & 0x1F;
 360              		.loc 1 497 8 view .LVU107
 361 0102 072D     		cmp	r5, #7
 362              	.LBE58:
 363 0104 009C     		ldr	r4, [sp]
 364              	.LBB59:
 483:src/menu.c    ****     int width;
 365              		.loc 1 483 5 is_stmt 1 view .LVU108
 484:src/menu.c    ****     unsigned char cmap[6];
 366              		.loc 1 484 5 view .LVU109
 485:src/menu.c    **** 
 367              		.loc 1 485 5 view .LVU110
 487:src/menu.c    ****     int current_smallp;
 368              		.loc 1 487 5 view .LVU111
 488:src/menu.c    **** 
 369              		.loc 1 488 5 view .LVU112
 497:src/menu.c    ****       width = str[1] & 0x1F;
 370              		.loc 1 497 5 view .LVU113
 497:src/menu.c    ****       width = str[1] & 0x1F;
 371              		.loc 1 497 8 is_stmt 0 view .LVU114
 372 0106 9AD0     		beq	.L39
 373              	.LVL29:
 374              	.L11:
 513:src/menu.c    ****       real_width = width = charlengths(c);
 375              		.loc 1 513 7 is_stmt 1 view .LVU115
 514:src/menu.c    ****       current_smallp = smallp;
 376              		.loc 1 514 28 is_stmt 0 view .LVU116
 377 0108 2846     		mov	r0, r5
 378 010a FFF7FEFF 		bl	charlengths
 379              	.LVL30:
 513:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 513 31 view .LVU117
 381 010e 019B     		ldr	r3, [sp, #4]
 382 0110 0133     		adds	r3, r3, #1
 383 0112 0193     		str	r3, [sp, #4]
 384              	.LVL31:
 514:src/menu.c    ****       current_smallp = smallp;
 385              		.loc 1 514 7 is_stmt 1 view .LVU118
 515:src/menu.c    ****     }
 386              		.loc 1 515 7 view .LVU119
 515:src/menu.c    ****     }
 387              		.loc 1 515 22 is_stmt 0 view .LVU120
 388 0114 0023     		movs	r3, #0
 389              	.LVL32:
 515:src/menu.c    ****     }
 390              		.loc 1 515 22 view .LVU121
 391 0116 0093     		str	r3, [sp]
ARM GAS  /tmp/ccuwCXMe.s 			page 19


 392              	.LVL33:
 518:src/menu.c    ****       break;
 393              		.loc 1 518 11 view .LVU122
 394 0118 C319     		adds	r3, r0, r7
 395              	.LVL34:
 518:src/menu.c    ****       break;
 396              		.loc 1 518 8 view .LVU123
 397 011a 9945     		cmp	r9, r3
 514:src/menu.c    ****       current_smallp = smallp;
 398              		.loc 1 514 28 view .LVU124
 399 011c 0646     		mov	r6, r0
 518:src/menu.c    ****       break;
 400              		.loc 1 518 5 is_stmt 1 view .LVU125
 518:src/menu.c    ****       break;
 401              		.loc 1 518 8 is_stmt 0 view .LVU126
 402 011e A7DA     		bge	.L40
 403              	.LVL35:
 404              	.L7:
 518:src/menu.c    ****       break;
 405              		.loc 1 518 8 view .LVU127
 406              	.LBE59:
 536:src/menu.c    **** 
 407              		.loc 1 536 1 view .LVU128
 408 0120 0DF5097D 		add	sp, sp, #548
 409              		.cfi_remember_state
 410              		.cfi_def_cfa_offset 36
 411              		@ sp needed
 412 0124 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 413              	.LVL36:
 414              	.L34:
 415              		.cfi_restore_state
 416              	.LBB60:
 508:src/menu.c    ****       str += 3;
 417              		.loc 1 508 7 is_stmt 1 view .LVU129
 508:src/menu.c    ****       str += 3;
 418              		.loc 1 508 11 is_stmt 0 view .LVU130
 419 0128 019B     		ldr	r3, [sp, #4]
 420 012a 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 501:src/menu.c    **** 	break;
 421              		.loc 1 501 33 view .LVU131
 422 012c 0023     		movs	r3, #0
 423 012e 0093     		str	r3, [sp]
 424 0130 95E7     		b	.L15
 425              	.L42:
 426 0132 00BF     		.align	2
 427              	.L41:
 428 0134 00000000 		.word	RectPolConv
 429 0138 00000000 		.word	.LANCHOR0
 430              	.LBE60:
 431              		.cfi_endproc
 432              	.LFE37:
 434              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 435              		.align	2
 436              	.LC4:
 437 0000 57503334 		.ascii	"WP34C calculator for DM42:\000"
 437      43206361 
 437      6C63756C 
ARM GAS  /tmp/ccuwCXMe.s 			page 20


 437      61746F72 
 437      20666F72 
 438 001b 00       		.align	2
 439              	.LC5:
 440 001c 746F7020 		.ascii	"top row version,\000"
 440      726F7720 
 440      76657273 
 440      696F6E2C 
 440      00
 441 002d 000000   		.align	2
 442              	.LC6:
 443 0030 696E636C 		.ascii	"including COMPLEX LOCK mode!\000"
 443      7564696E 
 443      6720434F 
 443      4D504C45 
 443      58204C4F 
 444 004d 000000   		.align	2
 445              	.LC7:
 446 0050 54686973 		.ascii	"This software is neither provided\000"
 446      20736F66 
 446      74776172 
 446      65206973 
 446      206E6569 
 447 0072 0000     		.align	2
 448              	.LC8:
 449 0074 6279206E 		.ascii	"by nor supported by SwissMicros.\000"
 449      6F722073 
 449      7570706F 
 449      72746564 
 449      20627920 
 450 0095 000000   		.align	2
 451              	.LC9:
 452 0098 20202020 		.ascii	"    Press EXIT key to continue...\000"
 452      50726573 
 452      73204558 
 452      4954206B 
 452      65792074 
 453              		.section	.text.disp_about,"ax",%progbits
 454              		.align	1
 455              		.p2align 2,,3
 456              		.global	disp_about
 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 460              		.fpu fpv4-sp-d16
 462              	disp_about:
 463              	.LFB5:
  73:src/menu.c    ****   lcd_clear_buf();
 464              		.loc 1 73 19 is_stmt 1 view -0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 0, uses_anonymous_args = 0
  74:src/menu.c    ****   lcd_writeClr(t24);
 468              		.loc 1 74 3 view .LVU133
  73:src/menu.c    ****   lcd_clear_buf();
 469              		.loc 1 73 19 is_stmt 0 view .LVU134
 470 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/ccuwCXMe.s 			page 21


 471              		.cfi_def_cfa_offset 24
 472              		.cfi_offset 4, -24
 473              		.cfi_offset 5, -20
 474              		.cfi_offset 6, -16
 475              		.cfi_offset 7, -12
 476              		.cfi_offset 8, -8
 477              		.cfi_offset 14, -4
  75:src/menu.c    **** 
 478              		.loc 1 75 3 view .LVU135
 479 0004 1E4C     		ldr	r4, .L45
  74:src/menu.c    ****   lcd_writeClr(t24);
 480              		.loc 1 74 3 view .LVU136
 481 0006 1F4B     		ldr	r3, .L45+4
  78:src/menu.c    ****   t24->y += 5;
 482              		.loc 1 78 3 view .LVU137
 483 0008 1F4D     		ldr	r5, .L45+8
  74:src/menu.c    ****   lcd_writeClr(t24);
 484              		.loc 1 74 3 view .LVU138
 485 000a 9847     		blx	r3
 486              	.LVL37:
  75:src/menu.c    **** 
 487              		.loc 1 75 3 is_stmt 1 view .LVU139
 488 000c 606B     		ldr	r0, [r4, #52]
 489 000e 1F4B     		ldr	r3, .L45+12
 490 0010 9847     		blx	r3
 491              	.LVL38:
  77:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
 492              		.loc 1 77 3 view .LVU140
 493 0012 0522     		movs	r2, #5
 494 0014 606B     		ldr	r0, [r4, #52]
 495 0016 1E4B     		ldr	r3, .L45+16
 496 0018 0021     		movs	r1, #0
 497 001a 9847     		blx	r3
 498              	.LVL39:
  78:src/menu.c    ****   t24->y += 5;
 499              		.loc 1 78 3 view .LVU141
  78:src/menu.c    ****   t24->y += 5;
 500              		.loc 1 78 3 view .LVU142
 501 001c 606B     		ldr	r0, [r4, #52]
 502 001e 1D49     		ldr	r1, .L45+20
 503 0020 0126     		movs	r6, #1
 504 0022 4674     		strb	r6, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 505              		.loc 1 78 3 view .LVU143
 506 0024 A847     		blx	r5
 507              	.LVL40:
  78:src/menu.c    ****   t24->y += 5;
 508              		.loc 1 78 3 view .LVU144
 509 0026 606B     		ldr	r0, [r4, #52]
  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 510              		.loc 1 81 3 is_stmt 0 view .LVU145
 511 0028 1B49     		ldr	r1, .L45+24
  79:src/menu.c    **** #ifdef TOP_ROW
 512              		.loc 1 79 10 view .LVU146
 513 002a C388     		ldrh	r3, [r0, #6]
  78:src/menu.c    ****   t24->y += 5;
 514              		.loc 1 78 3 view .LVU147
ARM GAS  /tmp/ccuwCXMe.s 			page 22


 515 002c 0027     		movs	r7, #0
  79:src/menu.c    **** #ifdef TOP_ROW
 516              		.loc 1 79 10 view .LVU148
 517 002e 0533     		adds	r3, r3, #5
 518 0030 C380     		strh	r3, [r0, #6]	@ movhi
  78:src/menu.c    ****   t24->y += 5;
 519              		.loc 1 78 3 view .LVU149
 520 0032 4774     		strb	r7, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 521              		.loc 1 78 3 is_stmt 1 view .LVU150
  79:src/menu.c    **** #ifdef TOP_ROW
 522              		.loc 1 79 3 view .LVU151
  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 523              		.loc 1 81 3 view .LVU152
 524 0034 A847     		blx	r5
 525              	.LVL41:
  82:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 526              		.loc 1 82 3 view .LVU153
 527 0036 606B     		ldr	r0, [r4, #52]
 528 0038 1849     		ldr	r1, .L45+28
 529 003a A847     		blx	r5
 530              	.LVL42:
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 531              		.loc 1 91 3 view .LVU154
 532 003c 606B     		ldr	r0, [r4, #52]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 533              		.loc 1 92 3 is_stmt 0 view .LVU155
 534 003e 1849     		ldr	r1, .L45+32
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 535              		.loc 1 91 10 view .LVU156
 536 0040 C388     		ldrh	r3, [r0, #6]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 537              		.loc 1 92 3 view .LVU157
 538 0042 4674     		strb	r6, [r0, #17]
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 539              		.loc 1 91 10 view .LVU158
 540 0044 0533     		adds	r3, r3, #5
 541 0046 C380     		strh	r3, [r0, #6]	@ movhi
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 542              		.loc 1 92 3 is_stmt 1 view .LVU159
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 543              		.loc 1 92 3 view .LVU160
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 544              		.loc 1 92 3 view .LVU161
 545 0048 A847     		blx	r5
 546              	.LVL43:
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 547              		.loc 1 92 3 view .LVU162
 548 004a 606B     		ldr	r0, [r4, #52]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 549              		.loc 1 92 3 view .LVU163
  93:src/menu.c    **** 
 550              		.loc 1 93 3 view .LVU164
  93:src/menu.c    **** 
 551              		.loc 1 93 3 view .LVU165
 552 004c 1549     		ldr	r1, .L45+36
 553 004e 4674     		strb	r6, [r0, #17]
ARM GAS  /tmp/ccuwCXMe.s 			page 23


  93:src/menu.c    **** 
 554              		.loc 1 93 3 view .LVU166
 555 0050 A847     		blx	r5
 556              	.LVL44:
  93:src/menu.c    **** 
 557              		.loc 1 93 3 view .LVU167
 558 0052 606B     		ldr	r0, [r4, #52]
  95:src/menu.c    ****   t24->x = 20;
 559              		.loc 1 95 20 is_stmt 0 view .LVU168
 560 0054 144B     		ldr	r3, .L45+40
  93:src/menu.c    **** 
 561              		.loc 1 93 3 view .LVU169
 562 0056 4774     		strb	r7, [r0, #17]
  93:src/menu.c    **** 
 563              		.loc 1 93 3 is_stmt 1 view .LVU170
  95:src/menu.c    ****   t24->x = 20;
 564              		.loc 1 95 3 view .LVU171
  95:src/menu.c    ****   t24->x = 20;
 565              		.loc 1 95 20 is_stmt 0 view .LVU172
 566 0058 9847     		blx	r3
 567              	.LVL45:
  95:src/menu.c    ****   t24->x = 20;
 568              		.loc 1 95 3 view .LVU173
 569 005a 636B     		ldr	r3, [r4, #52]
  97:src/menu.c    **** 
 570              		.loc 1 97 3 view .LVU174
 571 005c 1349     		ldr	r1, .L45+44
 572 005e 5E74     		strb	r6, [r3, #17]
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 573              		.loc 1 96 10 view .LVU175
 574 0060 1422     		movs	r2, #20
  95:src/menu.c    ****   t24->x = 20;
 575              		.loc 1 95 39 view .LVU176
 576 0062 C0F1EB00 		rsb	r0, r0, #235
  95:src/menu.c    ****   t24->x = 20;
 577              		.loc 1 95 10 view .LVU177
 578 0066 D880     		strh	r0, [r3, #6]	@ movhi
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 579              		.loc 1 96 3 is_stmt 1 view .LVU178
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 580              		.loc 1 96 10 is_stmt 0 view .LVU179
 581 0068 9A80     		strh	r2, [r3, #4]	@ movhi
  97:src/menu.c    **** 
 582              		.loc 1 97 3 is_stmt 1 view .LVU180
  97:src/menu.c    **** 
 583              		.loc 1 97 3 view .LVU181
  97:src/menu.c    **** 
 584              		.loc 1 97 3 view .LVU182
 585 006a 1846     		mov	r0, r3
 586 006c A847     		blx	r5
 587              	.LVL46:
  97:src/menu.c    **** 
 588              		.loc 1 97 3 view .LVU183
 589 006e 626B     		ldr	r2, [r4, #52]
  99:src/menu.c    **** 
 590              		.loc 1 99 3 is_stmt 0 view .LVU184
 591 0070 0F4B     		ldr	r3, .L45+48
ARM GAS  /tmp/ccuwCXMe.s 			page 24


  97:src/menu.c    **** 
 592              		.loc 1 97 3 view .LVU185
 593 0072 5774     		strb	r7, [r2, #17]
  97:src/menu.c    **** 
 594              		.loc 1 97 3 is_stmt 1 view .LVU186
  99:src/menu.c    **** 
 595              		.loc 1 99 3 view .LVU187
 596 0074 9847     		blx	r3
 597              	.LVL47:
 101:src/menu.c    **** }
 598              		.loc 1 101 3 view .LVU188
 102:src/menu.c    **** 
 599              		.loc 1 102 1 is_stmt 0 view .LVU189
 600 0076 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 601              		.cfi_restore 14
 602              		.cfi_restore 8
 603              		.cfi_restore 7
 604              		.cfi_restore 6
 605              		.cfi_restore 5
 606              		.cfi_restore 4
 607              		.cfi_def_cfa_offset 0
 101:src/menu.c    **** }
 608              		.loc 1 101 3 view .LVU190
 609 007a 0E4B     		ldr	r3, .L45+52
 610 007c 1847     		bx	r3	@ indirect register sibling call
 611              	.LVL48:
 612              	.L46:
 613 007e 00BF     		.align	2
 614              	.L45:
 615 0080 00200010 		.word	268443648
 616 0084 2D020008 		.word	134218285
 617 0088 B1020008 		.word	134218417
 618 008c 65020008 		.word	134218341
 619 0090 6D020008 		.word	134218349
 620 0094 00000000 		.word	.LC4
 621 0098 1C000000 		.word	.LC5
 622 009c 30000000 		.word	.LC6
 623 00a0 50000000 		.word	.LC7
 624 00a4 74000000 		.word	.LC8
 625 00a8 71020008 		.word	134218353
 626 00ac 98000000 		.word	.LC9
 627 00b0 31020008 		.word	134218289
 628 00b4 99030008 		.word	134218649
 629              		.cfi_endproc
 630              	.LFE5:
 632              		.section	.text.run_menu_item,"ax",%progbits
 633              		.align	1
 634              		.p2align 2,,3
 635              		.global	run_menu_item
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
 639              		.fpu fpv4-sp-d16
 641              	run_menu_item:
 642              	.LVL49:
 643              	.LFB3:
  42:src/menu.c    ****   int ret = 0;
ARM GAS  /tmp/ccuwCXMe.s 			page 25


 644              		.loc 1 42 36 is_stmt 1 view -0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 0
 647              		@ frame_needed = 0, uses_anonymous_args = 0
  43:src/menu.c    **** 
 648              		.loc 1 43 3 view .LVU192
  45:src/menu.c    ****     case MI_ABOUT_PGM:
 649              		.loc 1 45 3 view .LVU193
 650 0000 0B28     		cmp	r0, #11
 651 0002 04D1     		bne	.L49
  47:src/menu.c    ****       break;
 652              		.loc 1 47 7 view .LVU194
  42:src/menu.c    ****   int ret = 0;
 653              		.loc 1 42 36 is_stmt 0 view .LVU195
 654 0004 08B5     		push	{r3, lr}
 655              		.cfi_def_cfa_offset 8
 656              		.cfi_offset 3, -8
 657              		.cfi_offset 14, -4
  47:src/menu.c    ****       break;
 658              		.loc 1 47 7 view .LVU196
 659 0006 FFF7FEFF 		bl	disp_about
 660              	.LVL50:
  48:src/menu.c    **** 
 661              		.loc 1 48 7 is_stmt 1 view .LVU197
  43:src/menu.c    **** 
 662              		.loc 1 43 7 is_stmt 0 view .LVU198
 663 000a 0020     		movs	r0, #0
  56:src/menu.c    **** 
 664              		.loc 1 56 1 view .LVU199
 665 000c 08BD     		pop	{r3, pc}
 666              	.LVL51:
 667              	.L49:
 668              		.cfi_def_cfa_offset 0
 669              		.cfi_restore 3
 670              		.cfi_restore 14
  51:src/menu.c    ****       break;
 671              		.loc 1 51 11 view .LVU200
 672 000e 4FF0FF30 		mov	r0, #-1
 673              	.LVL52:
  55:src/menu.c    **** }
 674              		.loc 1 55 3 is_stmt 1 view .LVU201
  56:src/menu.c    **** 
 675              		.loc 1 56 1 is_stmt 0 view .LVU202
 676 0012 7047     		bx	lr
 677              		.cfi_endproc
 678              	.LFE3:
 680              		.section	.text.set_menu,"ax",%progbits
 681              		.align	1
 682              		.p2align 2,,3
 683              		.global	set_menu
 684              		.syntax unified
 685              		.thumb
 686              		.thumb_func
 687              		.fpu fpv4-sp-d16
 689              	set_menu:
 690              	.LVL53:
 691              	.LFB6:
ARM GAS  /tmp/ccuwCXMe.s 			page 26


 108:src/menu.c    ****   menu_name m = current_menu;
 692              		.loc 1 108 38 is_stmt 1 view -0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 0
 695              		@ frame_needed = 0, uses_anonymous_args = 0
 696              		@ link register save eliminated.
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 697              		.loc 1 109 3 view .LVU204
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 698              		.loc 1 109 13 is_stmt 0 view .LVU205
 699 0000 0A4A     		ldr	r2, .L66
 700 0002 92F90030 		ldrsb	r3, [r2]
 701              	.LVL54:
 110:src/menu.c    ****     current_menu = default_menu;
 702              		.loc 1 110 3 is_stmt 1 view .LVU206
 110:src/menu.c    ****     current_menu = default_menu;
 703              		.loc 1 110 6 is_stmt 0 view .LVU207
 704 0006 8342     		cmp	r3, r0
 705 0008 0CD0     		beq	.L65
 113:src/menu.c    ****     current_menu = last_menu;
 706              		.loc 1 113 8 is_stmt 1 view .LVU208
 113:src/menu.c    ****     current_menu = last_menu;
 707              		.loc 1 113 11 is_stmt 0 view .LVU209
 708 000a 411C     		adds	r1, r0, #1
 114:src/menu.c    ****   }
 709              		.loc 1 114 5 is_stmt 1 view .LVU210
 114:src/menu.c    ****   }
 710              		.loc 1 114 18 is_stmt 0 view .LVU211
 711 000c 09BF     		itett	eq
 712 000e 0849     		ldreq	r1, .L66+4
 117:src/menu.c    ****   }
 713              		.loc 1 117 18 view .LVU212
 714 0010 1070     		strbne	r0, [r2]
 114:src/menu.c    ****   }
 715              		.loc 1 114 18 view .LVU213
 716 0012 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 717 0014 1170     		strbeq	r1, [r2]
 117:src/menu.c    ****   }
 718              		.loc 1 117 5 is_stmt 1 view .LVU214
 719              	.L56:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 720              		.loc 1 119 3 view .LVU215
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 721              		.loc 1 119 6 is_stmt 0 view .LVU216
 722 0016 092B     		cmp	r3, #9
 723 0018 03D0     		beq	.L54
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 724              		.loc 1 119 23 discriminator 1 view .LVU217
 725 001a 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 726              		.loc 1 119 43 is_stmt 1 discriminator 1 view .LVU218
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 727              		.loc 1 119 53 is_stmt 0 discriminator 1 view .LVU219
 728 001c 1CBF     		itt	ne
 729 001e 044A     		ldrne	r2, .L66+4
 730 0020 1370     		strbne	r3, [r2]
 731              	.L54:
ARM GAS  /tmp/ccuwCXMe.s 			page 27


 121:src/menu.c    **** 
 732              		.loc 1 121 1 view .LVU220
 733 0022 7047     		bx	lr
 734              	.L65:
 111:src/menu.c    ****   }
 735              		.loc 1 111 5 is_stmt 1 view .LVU221
 111:src/menu.c    ****   }
 736              		.loc 1 111 18 is_stmt 0 view .LVU222
 737 0024 0349     		ldr	r1, .L66+8
 738 0026 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 739 0028 1170     		strb	r1, [r2]
 740 002a F4E7     		b	.L56
 741              	.L67:
 742              		.align	2
 743              	.L66:
 744 002c 00000000 		.word	.LANCHOR1
 745 0030 00000000 		.word	.LANCHOR3
 746 0034 00000000 		.word	.LANCHOR2
 747              		.cfi_endproc
 748              	.LFE6:
 750              		.section	.text.set_default_menu,"ax",%progbits
 751              		.align	1
 752              		.p2align 2,,3
 753              		.global	set_default_menu
 754              		.syntax unified
 755              		.thumb
 756              		.thumb_func
 757              		.fpu fpv4-sp-d16
 759              	set_default_menu:
 760              	.LFB7:
 123:src/menu.c    ****   set_menu (default_menu);
 761              		.loc 1 123 26 is_stmt 1 view -0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 0
 764              		@ frame_needed = 0, uses_anonymous_args = 0
 765              		@ link register save eliminated.
 124:src/menu.c    **** }
 766              		.loc 1 124 3 view .LVU224
 767 0000 0A4B     		ldr	r3, .L80
 768              	.LBB61:
 769              	.LBB62:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 770              		.loc 1 109 13 is_stmt 0 view .LVU225
 771 0002 0B49     		ldr	r1, .L80+4
 772              	.LBE62:
 773              	.LBE61:
 124:src/menu.c    **** }
 774              		.loc 1 124 3 view .LVU226
 775 0004 93F90020 		ldrsb	r2, [r3]
 776              	.LVL55:
 777              	.LBB65:
 778              	.LBI61:
 108:src/menu.c    ****   menu_name m = current_menu;
 779              		.loc 1 108 6 is_stmt 1 view .LVU227
 780              	.LBB63:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 781              		.loc 1 109 3 view .LVU228
ARM GAS  /tmp/ccuwCXMe.s 			page 28


 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 782              		.loc 1 109 13 is_stmt 0 view .LVU229
 783 0008 91F90030 		ldrsb	r3, [r1]
 784              	.LVL56:
 110:src/menu.c    ****     current_menu = default_menu;
 785              		.loc 1 110 3 is_stmt 1 view .LVU230
 110:src/menu.c    ****     current_menu = default_menu;
 786              		.loc 1 110 6 is_stmt 0 view .LVU231
 787 000c 9A42     		cmp	r2, r3
 788 000e 0BD0     		beq	.L79
 113:src/menu.c    ****     current_menu = last_menu;
 789              		.loc 1 113 8 is_stmt 1 view .LVU232
 113:src/menu.c    ****     current_menu = last_menu;
 790              		.loc 1 113 11 is_stmt 0 view .LVU233
 791 0010 501C     		adds	r0, r2, #1
 114:src/menu.c    ****   }
 792              		.loc 1 114 5 is_stmt 1 view .LVU234
 114:src/menu.c    ****   }
 793              		.loc 1 114 18 is_stmt 0 view .LVU235
 794 0012 04BF     		itt	eq
 795 0014 074A     		ldreq	r2, .L80+8
 796              	.LVL57:
 114:src/menu.c    ****   }
 797              		.loc 1 114 18 view .LVU236
 798 0016 1278     		ldrbeq	r2, [r2]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 799              		.loc 1 117 5 is_stmt 1 view .LVU237
 117:src/menu.c    ****   }
 800              		.loc 1 117 18 is_stmt 0 view .LVU238
 801 0018 0A70     		strb	r2, [r1]
 802              	.LVL58:
 803              	.L70:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 804              		.loc 1 119 3 is_stmt 1 view .LVU239
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 805              		.loc 1 119 6 is_stmt 0 view .LVU240
 806 001a 092B     		cmp	r3, #9
 807 001c 03D0     		beq	.L68
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 808              		.loc 1 119 23 view .LVU241
 809 001e 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 810              		.loc 1 119 43 is_stmt 1 view .LVU242
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 811              		.loc 1 119 53 is_stmt 0 view .LVU243
 812 0020 1CBF     		itt	ne
 813 0022 044A     		ldrne	r2, .L80+8
 814 0024 1370     		strbne	r3, [r2]
 815              	.LVL59:
 816              	.L68:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 817              		.loc 1 119 53 view .LVU244
 818              	.LBE63:
 819              	.LBE65:
 125:src/menu.c    **** 
 820              		.loc 1 125 1 view .LVU245
 821 0026 7047     		bx	lr
ARM GAS  /tmp/ccuwCXMe.s 			page 29


 822              	.LVL60:
 823              	.L79:
 824              	.LBB66:
 825              	.LBB64:
 111:src/menu.c    ****   }
 826              		.loc 1 111 5 is_stmt 1 view .LVU246
 111:src/menu.c    ****   }
 827              		.loc 1 111 18 is_stmt 0 view .LVU247
 828 0028 0B70     		strb	r3, [r1]
 829 002a F6E7     		b	.L70
 830              	.L81:
 831              		.align	2
 832              	.L80:
 833 002c 00000000 		.word	.LANCHOR2
 834 0030 00000000 		.word	.LANCHOR1
 835 0034 00000000 		.word	.LANCHOR3
 836              	.LBE64:
 837              	.LBE66:
 838              		.cfi_endproc
 839              	.LFE7:
 841              		.section	.text.toggle_default_menu,"ax",%progbits
 842              		.align	1
 843              		.p2align 2,,3
 844              		.global	toggle_default_menu
 845              		.syntax unified
 846              		.thumb
 847              		.thumb_func
 848              		.fpu fpv4-sp-d16
 850              	toggle_default_menu:
 851              	.LFB8:
 127:src/menu.c    ****   if (current_menu == M_Blank) {
 852              		.loc 1 127 29 is_stmt 1 view -0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 0
 855              		@ frame_needed = 0, uses_anonymous_args = 0
 856              		@ link register save eliminated.
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 857              		.loc 1 128 3 view .LVU249
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 858              		.loc 1 128 20 is_stmt 0 view .LVU250
 859 0000 104A     		ldr	r2, .L98
 129:src/menu.c    ****     return;
 860              		.loc 1 129 33 view .LVU251
 861 0002 1149     		ldr	r1, .L98+4
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 862              		.loc 1 128 20 view .LVU252
 863 0004 92F90030 		ldrsb	r3, [r2]
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 864              		.loc 1 128 6 view .LVU253
 865 0008 ABB1     		cbz	r3, .L95
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 866              		.loc 1 132 8 is_stmt 1 view .LVU254
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 867              		.loc 1 132 11 is_stmt 0 view .LVU255
 868 000a 0F2B     		cmp	r3, #15
 869 000c 0FD0     		beq	.L96
 136:src/menu.c    ****   }
ARM GAS  /tmp/ccuwCXMe.s 			page 30


 870              		.loc 1 136 5 is_stmt 1 view .LVU256
 871              	.LBB67:
 872              	.LBI67:
 123:src/menu.c    ****   set_menu (default_menu);
 873              		.loc 1 123 6 view .LVU257
 874              	.LBB68:
 124:src/menu.c    **** }
 875              		.loc 1 124 3 view .LVU258
 876 000e 91F90010 		ldrsb	r1, [r1]
 877              	.LVL61:
 878              	.LBB69:
 879              	.LBI69:
 108:src/menu.c    ****   menu_name m = current_menu;
 880              		.loc 1 108 6 view .LVU259
 881              	.LBB70:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 882              		.loc 1 109 3 view .LVU260
 110:src/menu.c    ****     current_menu = default_menu;
 883              		.loc 1 110 3 view .LVU261
 110:src/menu.c    ****     current_menu = default_menu;
 884              		.loc 1 110 6 is_stmt 0 view .LVU262
 885 0012 8B42     		cmp	r3, r1
 886 0014 13D0     		beq	.L97
 113:src/menu.c    ****     current_menu = last_menu;
 887              		.loc 1 113 8 is_stmt 1 view .LVU263
 113:src/menu.c    ****     current_menu = last_menu;
 888              		.loc 1 113 11 is_stmt 0 view .LVU264
 889 0016 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 890              		.loc 1 114 5 is_stmt 1 view .LVU265
 114:src/menu.c    ****   }
 891              		.loc 1 114 18 is_stmt 0 view .LVU266
 892 0018 04BF     		itt	eq
 893 001a 0C49     		ldreq	r1, .L98+8
 894              	.LVL62:
 114:src/menu.c    ****   }
 895              		.loc 1 114 18 view .LVU267
 896 001c 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 897              		.loc 1 117 5 is_stmt 1 view .LVU268
 117:src/menu.c    ****   }
 898              		.loc 1 117 18 is_stmt 0 view .LVU269
 899 001e 1170     		strb	r1, [r2]
 900              	.LVL63:
 901              	.L87:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 902              		.loc 1 119 3 is_stmt 1 view .LVU270
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 903              		.loc 1 119 6 is_stmt 0 view .LVU271
 904 0020 092B     		cmp	r3, #9
 905 0022 03D0     		beq	.L82
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 906              		.loc 1 119 23 view .LVU272
 907 0024 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 908              		.loc 1 119 43 is_stmt 1 view .LVU273
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
ARM GAS  /tmp/ccuwCXMe.s 			page 31


 909              		.loc 1 119 53 is_stmt 0 view .LVU274
 910 0026 1CBF     		itt	ne
 911 0028 084A     		ldrne	r2, .L98+8
 912 002a 1370     		strbne	r3, [r2]
 913              	.LVL64:
 914              	.L82:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 915              		.loc 1 119 53 view .LVU275
 916              	.LBE70:
 917              	.LBE69:
 918              	.LBE68:
 919              	.LBE67:
 138:src/menu.c    **** 
 920              		.loc 1 138 1 view .LVU276
 921 002c 7047     		bx	lr
 922              	.L96:
 133:src/menu.c    ****   }
 923              		.loc 1 133 5 is_stmt 1 view .LVU277
 133:src/menu.c    ****   }
 924              		.loc 1 133 33 is_stmt 0 view .LVU278
 925 002e 0023     		movs	r3, #0
 926 0030 0B70     		strb	r3, [r1]
 133:src/menu.c    ****   }
 927              		.loc 1 133 18 view .LVU279
 928 0032 1370     		strb	r3, [r2]
 929 0034 7047     		bx	lr
 930              	.L95:
 129:src/menu.c    ****     return;
 931              		.loc 1 129 5 is_stmt 1 view .LVU280
 129:src/menu.c    ****     return;
 932              		.loc 1 129 33 is_stmt 0 view .LVU281
 933 0036 0F23     		movs	r3, #15
 934 0038 0B70     		strb	r3, [r1]
 129:src/menu.c    ****     return;
 935              		.loc 1 129 18 view .LVU282
 936 003a 1370     		strb	r3, [r2]
 130:src/menu.c    ****   }
 937              		.loc 1 130 5 is_stmt 1 view .LVU283
 938 003c 7047     		bx	lr
 939              	.LVL65:
 940              	.L97:
 941              	.LBB74:
 942              	.LBB73:
 943              	.LBB72:
 944              	.LBB71:
 111:src/menu.c    ****   }
 945              		.loc 1 111 5 view .LVU284
 111:src/menu.c    ****   }
 946              		.loc 1 111 18 is_stmt 0 view .LVU285
 947 003e 1370     		strb	r3, [r2]
 948 0040 EEE7     		b	.L87
 949              	.L99:
 950 0042 00BF     		.align	2
 951              	.L98:
 952 0044 00000000 		.word	.LANCHOR1
 953 0048 00000000 		.word	.LANCHOR2
 954 004c 00000000 		.word	.LANCHOR3
ARM GAS  /tmp/ccuwCXMe.s 			page 32


 955              	.LBE71:
 956              	.LBE72:
 957              	.LBE73:
 958              	.LBE74:
 959              		.cfi_endproc
 960              	.LFE8:
 962              		.section	.text.get_menu,"ax",%progbits
 963              		.align	1
 964              		.p2align 2,,3
 965              		.global	get_menu
 966              		.syntax unified
 967              		.thumb
 968              		.thumb_func
 969              		.fpu fpv4-sp-d16
 971              	get_menu:
 972              	.LFB9:
 140:src/menu.c    ****   return current_menu;
 973              		.loc 1 140 23 is_stmt 1 view -0
 974              		.cfi_startproc
 975              		@ args = 0, pretend = 0, frame = 0
 976              		@ frame_needed = 0, uses_anonymous_args = 0
 977              		@ link register save eliminated.
 141:src/menu.c    **** }
 978              		.loc 1 141 3 view .LVU287
 141:src/menu.c    **** }
 979              		.loc 1 141 10 is_stmt 0 view .LVU288
 980 0000 014B     		ldr	r3, .L101
 142:src/menu.c    **** 
 981              		.loc 1 142 1 view .LVU289
 982 0002 93F90000 		ldrsb	r0, [r3]
 983 0006 7047     		bx	lr
 984              	.L102:
 985              		.align	2
 986              	.L101:
 987 0008 00000000 		.word	.LANCHOR1
 988              		.cfi_endproc
 989              	.LFE9:
 991              		.section	.text.get_last_menu,"ax",%progbits
 992              		.align	1
 993              		.p2align 2,,3
 994              		.global	get_last_menu
 995              		.syntax unified
 996              		.thumb
 997              		.thumb_func
 998              		.fpu fpv4-sp-d16
 1000              	get_last_menu:
 1001              	.LFB10:
 144:src/menu.c    ****   return last_menu;
 1002              		.loc 1 144 28 is_stmt 1 view -0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 0
 1005              		@ frame_needed = 0, uses_anonymous_args = 0
 1006              		@ link register save eliminated.
 145:src/menu.c    **** }
 1007              		.loc 1 145 3 view .LVU291
 145:src/menu.c    **** }
 1008              		.loc 1 145 10 is_stmt 0 view .LVU292
ARM GAS  /tmp/ccuwCXMe.s 			page 33


 1009 0000 014B     		ldr	r3, .L104
 146:src/menu.c    **** 
 1010              		.loc 1 146 1 view .LVU293
 1011 0002 93F90000 		ldrsb	r0, [r3]
 1012 0006 7047     		bx	lr
 1013              	.L105:
 1014              		.align	2
 1015              	.L104:
 1016 0008 00000000 		.word	.LANCHOR3
 1017              		.cfi_endproc
 1018              	.LFE10:
 1020              		.section	.text.set_last_menu,"ax",%progbits
 1021              		.align	1
 1022              		.p2align 2,,3
 1023              		.global	set_last_menu
 1024              		.syntax unified
 1025              		.thumb
 1026              		.thumb_func
 1027              		.fpu fpv4-sp-d16
 1029              	set_last_menu:
 1030              	.LFB12:
 152:src/menu.c    ****   set_menu (M_Last);
 1031              		.loc 1 152 23 is_stmt 1 view -0
 1032              		.cfi_startproc
 1033              		@ args = 0, pretend = 0, frame = 0
 1034              		@ frame_needed = 0, uses_anonymous_args = 0
 1035              		@ link register save eliminated.
 153:src/menu.c    **** }
 1036              		.loc 1 153 3 view .LVU295
 1037              	.LVL66:
 1038              	.LBB75:
 1039              	.LBI75:
 108:src/menu.c    ****   menu_name m = current_menu;
 1040              		.loc 1 108 6 view .LVU296
 1041              	.LBB76:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1042              		.loc 1 109 3 view .LVU297
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1043              		.loc 1 109 13 is_stmt 0 view .LVU298
 1044 0000 0A4A     		ldr	r2, .L119
 1045 0002 92F90030 		ldrsb	r3, [r2]
 1046              	.LVL67:
 110:src/menu.c    ****     current_menu = default_menu;
 1047              		.loc 1 110 3 is_stmt 1 view .LVU299
 110:src/menu.c    ****     current_menu = default_menu;
 1048              		.loc 1 110 6 is_stmt 0 view .LVU300
 1049 0006 591C     		adds	r1, r3, #1
 1050 0008 09D0     		beq	.L116
 113:src/menu.c    ****     current_menu = last_menu;
 1051              		.loc 1 113 8 is_stmt 1 view .LVU301
 114:src/menu.c    ****   }
 1052              		.loc 1 114 5 view .LVU302
 114:src/menu.c    ****   }
 1053              		.loc 1 114 18 is_stmt 0 view .LVU303
 1054 000a 0949     		ldr	r1, .L119+4
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1055              		.loc 1 119 6 view .LVU304
ARM GAS  /tmp/ccuwCXMe.s 			page 34


 1056 000c 092B     		cmp	r3, #9
 114:src/menu.c    ****   }
 1057              		.loc 1 114 18 view .LVU305
 1058 000e 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1059 0010 1070     		strb	r0, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1060              		.loc 1 119 3 is_stmt 1 view .LVU306
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1061              		.loc 1 119 6 is_stmt 0 view .LVU307
 1062 0012 00D1     		bne	.L117
 1063              	.L106:
 1064              	.LBE76:
 1065              	.LBE75:
 154:src/menu.c    **** 
 1066              		.loc 1 154 1 view .LVU308
 1067 0014 7047     		bx	lr
 1068              	.L117:
 1069              	.LBB79:
 1070              	.LBB77:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1071              		.loc 1 119 23 view .LVU309
 1072 0016 102B     		cmp	r3, #16
 1073 0018 FCD0     		beq	.L106
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1074              		.loc 1 119 43 is_stmt 1 view .LVU310
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1075              		.loc 1 119 53 is_stmt 0 view .LVU311
 1076 001a 0B70     		strb	r3, [r1]
 1077              	.LVL68:
 1078              	.L118:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1079              		.loc 1 119 53 view .LVU312
 1080              	.LBE77:
 1081              	.LBE79:
 154:src/menu.c    **** 
 1082              		.loc 1 154 1 view .LVU313
 1083 001c 7047     		bx	lr
 1084              	.LVL69:
 1085              	.L116:
 1086              	.LBB80:
 1087              	.LBB78:
 111:src/menu.c    ****   }
 1088              		.loc 1 111 5 is_stmt 1 view .LVU314
 111:src/menu.c    ****   }
 1089              		.loc 1 111 18 is_stmt 0 view .LVU315
 1090 001e 0548     		ldr	r0, .L119+8
 1091 0020 0349     		ldr	r1, .L119+4
 1092 0022 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1093 0024 1070     		strb	r0, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1094              		.loc 1 119 3 is_stmt 1 view .LVU316
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1095              		.loc 1 119 43 view .LVU317
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1096              		.loc 1 119 53 is_stmt 0 view .LVU318
 1097 0026 0B70     		strb	r3, [r1]
 1098              	.LVL70:
ARM GAS  /tmp/ccuwCXMe.s 			page 35


 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1099              		.loc 1 119 53 view .LVU319
 1100 0028 F8E7     		b	.L118
 1101              	.L120:
 1102 002a 00BF     		.align	2
 1103              	.L119:
 1104 002c 00000000 		.word	.LANCHOR1
 1105 0030 00000000 		.word	.LANCHOR3
 1106 0034 00000000 		.word	.LANCHOR2
 1107              	.LBE78:
 1108              	.LBE80:
 1109              		.cfi_endproc
 1110              	.LFE12:
 1112              		.section	.text.mdot,"ax",%progbits
 1113              		.align	1
 1114              		.p2align 2,,3
 1115              		.global	mdot
 1116              		.syntax unified
 1117              		.thumb
 1118              		.thumb_func
 1119              		.fpu fpv4-sp-d16
 1121              	mdot:
 1122              	.LVL71:
 1123              	.LFB14:
 558:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1124              		.loc 1 558 40 is_stmt 1 view -0
 1125              		.cfi_startproc
 1126              		@ args = 0, pretend = 0, frame = 0
 1127              		@ frame_needed = 0, uses_anonymous_args = 0
 1128              		@ link register save eliminated.
 559:src/menu.c    ****   if (on) {
 1129              		.loc 1 559 3 view .LVU321
 559:src/menu.c    ****   if (on) {
 1130              		.loc 1 559 6 is_stmt 0 view .LVU322
 1131 0000 C728     		cmp	r0, #199
 1132 0002 1AD8     		bhi	.L125
 1133              	.LVL72:
 1134              	.LBB83:
 1135              	.LBI83:
 558:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1136              		.loc 1 558 6 is_stmt 1 view .LVU323
 1137              	.LBB84:
 560:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1138              		.loc 1 560 3 view .LVU324
 1139              	.LBE84:
 1140              	.LBE83:
 558:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1141              		.loc 1 558 40 is_stmt 0 view .LVU325
 1142 0004 10B4     		push	{r4}
 1143              		.cfi_def_cfa_offset 4
 1144              		.cfi_offset 4, -4
 1145              	.LBB87:
 1146              	.LBB85:
 560:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1147              		.loc 1 560 6 view .LVU326
 1148 0006 63B9     		cbnz	r3, .L128
 1149              		.loc 1 564 5 is_stmt 1 view .LVU327
ARM GAS  /tmp/ccuwCXMe.s 			page 36


 1150              		.loc 1 564 17 is_stmt 0 view .LVU328
 1151 0008 0C4B     		ldr	r3, .L129
 1152              	.LVL73:
 1153              		.loc 1 564 17 view .LVU329
 1154 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1155              	.LVL74:
 1156              		.loc 1 564 25 view .LVU330
 1157 000e 0124     		movs	r4, #1
 1158              		.loc 1 564 17 view .LVU331
 1159 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1160              		.loc 1 564 25 view .LVU332
 1161 0012 04FA01F1 		lsl	r1, r4, r1
 1162              	.LVL75:
 1163              		.loc 1 564 17 view .LVU333
 1164 0016 23EA0101 		bic	r1, r3, r1
 1165 001a 8154     		strb	r1, [r0, r2]
 1166              	.LVL76:
 1167              		.loc 1 564 17 view .LVU334
 1168              	.LBE85:
 1169              	.LBE87:
 565:src/menu.c    ****   }
 566:src/menu.c    **** }
 1170              		.loc 1 566 1 view .LVU335
 1171 001c 5DF8044B 		ldr	r4, [sp], #4
 1172              		.cfi_remember_state
 1173              		.cfi_restore 4
 1174              		.cfi_def_cfa_offset 0
 1175 0020 7047     		bx	lr
 1176              	.LVL77:
 1177              	.L128:
 1178              		.cfi_restore_state
 1179              	.LBB88:
 1180              	.LBB86:
 561:src/menu.c    ****   }
 1181              		.loc 1 561 5 is_stmt 1 view .LVU336
 561:src/menu.c    ****   }
 1182              		.loc 1 561 17 is_stmt 0 view .LVU337
 1183 0022 064B     		ldr	r3, .L129
 1184              	.LVL78:
 561:src/menu.c    ****   }
 1185              		.loc 1 561 17 view .LVU338
 1186 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1187              	.LVL79:
 561:src/menu.c    ****   }
 1188              		.loc 1 561 24 view .LVU339
 1189 0028 0124     		movs	r4, #1
 561:src/menu.c    ****   }
 1190              		.loc 1 561 17 view .LVU340
 1191 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 561:src/menu.c    ****   }
 1192              		.loc 1 561 24 view .LVU341
 1193 002c 04FA01F1 		lsl	r1, r4, r1
 1194              	.LVL80:
 561:src/menu.c    ****   }
 1195              		.loc 1 561 17 view .LVU342
 1196 0030 1943     		orrs	r1, r1, r3
 1197 0032 8154     		strb	r1, [r0, r2]
ARM GAS  /tmp/ccuwCXMe.s 			page 37


 1198              	.LBE86:
 1199              	.LBE88:
 1200              		.loc 1 566 1 view .LVU343
 1201 0034 5DF8044B 		ldr	r4, [sp], #4
 1202              		.cfi_restore 4
 1203              		.cfi_def_cfa_offset 0
 1204 0038 7047     		bx	lr
 1205              	.LVL81:
 1206              	.L125:
 1207              		.loc 1 566 1 view .LVU344
 1208 003a 7047     		bx	lr
 1209              	.L130:
 1210              		.align	2
 1211              	.L129:
 1212 003c 00000000 		.word	.LANCHOR0
 1213              		.cfi_endproc
 1214              	.LFE14:
 1216              		.section	.text.get_current_menu_ref,"ax",%progbits
 1217              		.align	1
 1218              		.p2align 2,,3
 1219              		.global	get_current_menu_ref
 1220              		.syntax unified
 1221              		.thumb
 1222              		.thumb_func
 1223              		.fpu fpv4-sp-d16
 1225              	get_current_menu_ref:
 1226              	.LVL82:
 1227              	.LFB15:
 567:src/menu.c    **** 
 568:src/menu.c    **** struct _menu get_current_menu_ref() {
 1228              		.loc 1 568 37 is_stmt 1 view -0
 1229              		.cfi_startproc
 1230              		@ args = 0, pretend = 0, frame = 0
 1231              		@ frame_needed = 0, uses_anonymous_args = 0
 569:src/menu.c    ****   int i = current_menu;
 1232              		.loc 1 569 3 view .LVU346
 568:src/menu.c    ****   int i = current_menu;
 1233              		.loc 1 568 37 is_stmt 0 view .LVU347
 1234 0000 08B5     		push	{r3, lr}
 1235              		.cfi_def_cfa_offset 8
 1236              		.cfi_offset 3, -8
 1237              		.cfi_offset 14, -4
 570:src/menu.c    ****   if (C_LOCKED)
 1238              		.loc 1 570 7 view .LVU348
 1239 0002 294B     		ldr	r3, .L147
 569:src/menu.c    ****   int i = current_menu;
 1240              		.loc 1 569 7 view .LVU349
 1241 0004 294A     		ldr	r2, .L147+4
 1242              		.loc 1 570 7 view .LVU350
 1243 0006 1B68     		ldr	r3, [r3]
 569:src/menu.c    ****   int i = current_menu;
 1244              		.loc 1 569 7 view .LVU351
 1245 0008 92F90010 		ldrsb	r1, [r2]
 1246              	.LVL83:
 1247              		.loc 1 570 3 is_stmt 1 view .LVU352
 1248              		.loc 1 570 7 is_stmt 0 view .LVU353
 1249 000c 93F8AC3F 		ldrb	r3, [r3, #4012]	@ zero_extendqisi2
ARM GAS  /tmp/ccuwCXMe.s 			page 38


 1250              		.loc 1 570 6 view .LVU354
 1251 0010 03F04102 		and	r2, r3, #65
 1252 0014 412A     		cmp	r2, #65
 568:src/menu.c    ****   int i = current_menu;
 1253              		.loc 1 568 37 view .LVU355
 1254 0016 0346     		mov	r3, r0
 1255              		.loc 1 570 6 view .LVU356
 1256 0018 0BD0     		beq	.L145
 1257              	.LVL84:
 1258              	.L132:
 571:src/menu.c    ****     switch (current_menu) {
 572:src/menu.c    ****     case (M_Clear):
 573:src/menu.c    ****       i = M_Clear_C;
 574:src/menu.c    ****       break;
 575:src/menu.c    ****     case (M_Swap):
 576:src/menu.c    ****       i = M_Swap_C;
 577:src/menu.c    ****       break;
 578:src/menu.c    ****     case (M_Arrow):
 579:src/menu.c    ****       i = M_Arrow_C;
 580:src/menu.c    ****       break;
 581:src/menu.c    ****     case (M_Prob):
 582:src/menu.c    ****       i = M_Prob_C;
 583:src/menu.c    ****       break;
 584:src/menu.c    ****     case (M_Blank2):
 585:src/menu.c    ****       i = M_Blank2_C;
 586:src/menu.c    ****       break;
 587:src/menu.c    ****     case (M_Misc):
 588:src/menu.c    ****       i = M_Misc_C;
 589:src/menu.c    ****       break;
 590:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 591:src/menu.c    ****     case (M_Flags):// so don't display them.
 592:src/menu.c    ****     case (M_Stats):
 593:src/menu.c    ****     case (M_Setup2):
 594:src/menu.c    ****     case (M_Solve):
 595:src/menu.c    ****     case (M_Program):
 596:src/menu.c    ****       i = M_C_Lock;
 597:src/menu.c    ****     default:;
 1259              		.loc 1 597 13 is_stmt 1 view .LVU357
 598:src/menu.c    ****     }
 599:src/menu.c    ****   if (current_menu == M_User) {
 1260              		.loc 1 599 3 view .LVU358
 1261              		.loc 1 599 6 is_stmt 0 view .LVU359
 1262 001a 6329     		cmp	r1, #99
 1263 001c 32D0     		beq	.L146
 1264              	.LVL85:
 1265              	.L137:
 600:src/menu.c    ****     return UserMenu;
 601:src/menu.c    ****   }
 602:src/menu.c    ****   else {
 603:src/menu.c    ****     return Menus[i];
 1266              		.loc 1 603 5 is_stmt 1 view .LVU360
 1267              		.loc 1 603 17 is_stmt 0 view .LVU361
 1268 001e 2448     		ldr	r0, .L147+8
 1269 0020 D022     		movs	r2, #208
 1270 0022 02FB0101 		mla	r1, r2, r1, r0
 1271              	.LVL86:
 1272              		.loc 1 603 17 view .LVU362
ARM GAS  /tmp/ccuwCXMe.s 			page 39


 1273 0026 1846     		mov	r0, r3
 1274 0028 FFF7FEFF 		bl	memcpy
 1275              	.LVL87:
 1276              		.loc 1 603 17 view .LVU363
 1277 002c 0346     		mov	r3, r0
 604:src/menu.c    ****   }
 605:src/menu.c    **** }
 1278              		.loc 1 605 1 view .LVU364
 1279 002e 1846     		mov	r0, r3
 1280 0030 08BD     		pop	{r3, pc}
 1281              	.LVL88:
 1282              	.L145:
 571:src/menu.c    ****     case (M_Clear):
 1283              		.loc 1 571 5 is_stmt 1 view .LVU365
 1284 0032 4A1E     		subs	r2, r1, #1
 1285 0034 0E2A     		cmp	r2, #14
 1286 0036 F0D8     		bhi	.L132
 1287 0038 01A0     		adr	r0, .L134
 1288 003a 50F822F0 		ldr	pc, [r0, r2, lsl #2]
 1289              	.LVL89:
 1290 003e 00BF     		.p2align 2
 1291              	.L134:
 1292 0040 A5000000 		.word	.L140+1
 1293 0044 1B000000 		.word	.L132+1
 1294 0048 A1000000 		.word	.L135+1
 1295 004c 1B000000 		.word	.L132+1
 1296 0050 9D000000 		.word	.L139+1
 1297 0054 81000000 		.word	.L138+1
 1298 0058 A1000000 		.word	.L135+1
 1299 005c 1B000000 		.word	.L132+1
 1300 0060 7D000000 		.word	.L143+1
 1301 0064 A1000000 		.word	.L135+1
 1302 0068 99000000 		.word	.L136+1
 1303 006c A1000000 		.word	.L135+1
 1304 0070 A1000000 		.word	.L135+1
 1305 0074 A1000000 		.word	.L135+1
 1306 0078 95000000 		.word	.L133+1
 1307              		.p2align 1
 1308              	.L143:
 579:src/menu.c    ****       break;
 1309              		.loc 1 579 9 is_stmt 0 view .LVU366
 1310 007c 1421     		movs	r1, #20
 1311              	.LVL90:
 579:src/menu.c    ****       break;
 1312              		.loc 1 579 9 view .LVU367
 1313 007e CEE7     		b	.L137
 1314              	.LVL91:
 1315              	.L138:
 570:src/menu.c    ****     switch (current_menu) {
 1316              		.loc 1 570 6 view .LVU368
 1317 0080 1321     		movs	r1, #19
 1318              	.LVL92:
 570:src/menu.c    ****     switch (current_menu) {
 1319              		.loc 1 570 6 view .LVU369
 1320 0082 CCE7     		b	.L137
 1321              	.LVL93:
 1322              	.L146:
ARM GAS  /tmp/ccuwCXMe.s 			page 40


 600:src/menu.c    ****   }
 1323              		.loc 1 600 5 is_stmt 1 view .LVU370
 600:src/menu.c    ****   }
 1324              		.loc 1 600 12 is_stmt 0 view .LVU371
 1325 0084 0B49     		ldr	r1, .L147+12
 1326              	.LVL94:
 600:src/menu.c    ****   }
 1327              		.loc 1 600 12 view .LVU372
 1328 0086 D022     		movs	r2, #208
 1329 0088 1846     		mov	r0, r3
 1330 008a FFF7FEFF 		bl	memcpy
 1331              	.LVL95:
 600:src/menu.c    ****   }
 1332              		.loc 1 600 12 view .LVU373
 1333 008e 0346     		mov	r3, r0
 1334              		.loc 1 605 1 view .LVU374
 1335 0090 1846     		mov	r0, r3
 1336 0092 08BD     		pop	{r3, pc}
 1337              	.LVL96:
 1338              	.L133:
 585:src/menu.c    ****       break;
 1339              		.loc 1 585 7 is_stmt 1 view .LVU375
 586:src/menu.c    ****     case (M_Misc):
 1340              		.loc 1 586 7 view .LVU376
 585:src/menu.c    ****       break;
 1341              		.loc 1 585 9 is_stmt 0 view .LVU377
 1342 0094 1621     		movs	r1, #22
 586:src/menu.c    ****     case (M_Misc):
 1343              		.loc 1 586 7 view .LVU378
 1344 0096 C2E7     		b	.L137
 1345              	.LVL97:
 1346              	.L136:
 582:src/menu.c    ****       break;
 1347              		.loc 1 582 7 is_stmt 1 view .LVU379
 583:src/menu.c    ****     case (M_Blank2):
 1348              		.loc 1 583 7 view .LVU380
 582:src/menu.c    ****       break;
 1349              		.loc 1 582 9 is_stmt 0 view .LVU381
 1350 0098 1521     		movs	r1, #21
 583:src/menu.c    ****     case (M_Blank2):
 1351              		.loc 1 583 7 view .LVU382
 1352 009a C0E7     		b	.L137
 1353              	.LVL98:
 1354              	.L139:
 588:src/menu.c    ****       break;
 1355              		.loc 1 588 7 is_stmt 1 view .LVU383
 589:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1356              		.loc 1 589 7 view .LVU384
 588:src/menu.c    ****       break;
 1357              		.loc 1 588 9 is_stmt 0 view .LVU385
 1358 009c 1721     		movs	r1, #23
 589:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1359              		.loc 1 589 7 view .LVU386
 1360 009e BEE7     		b	.L137
 1361              	.LVL99:
 1362              	.L135:
 596:src/menu.c    ****     default:;
ARM GAS  /tmp/ccuwCXMe.s 			page 41


 1363              		.loc 1 596 7 is_stmt 1 view .LVU387
 596:src/menu.c    ****     default:;
 1364              		.loc 1 596 9 is_stmt 0 view .LVU388
 1365 00a0 1121     		movs	r1, #17
 1366 00a2 BCE7     		b	.L137
 1367              	.LVL100:
 1368              	.L140:
 573:src/menu.c    ****       break;
 1369              		.loc 1 573 9 view .LVU389
 1370 00a4 1221     		movs	r1, #18
 1371              	.LVL101:
 573:src/menu.c    ****       break;
 1372              		.loc 1 573 9 view .LVU390
 1373 00a6 BAE7     		b	.L137
 1374              	.L148:
 1375              		.align	2
 1376              	.L147:
 1377 00a8 00000000 		.word	main_ram
 1378 00ac 00000000 		.word	.LANCHOR1
 1379 00b0 00000000 		.word	Menus
 1380 00b4 00000000 		.word	.LANCHOR4
 1381              		.cfi_endproc
 1382              	.LFE15:
 1384              		.section	.text.display_menu,"ax",%progbits
 1385              		.align	1
 1386              		.p2align 2,,3
 1387              		.global	display_menu
 1388              		.syntax unified
 1389              		.thumb
 1390              		.thumb_func
 1391              		.fpu fpv4-sp-d16
 1393              	display_menu:
 1394              	.LFB16:
 606:src/menu.c    **** 
 607:src/menu.c    **** void display_menu (struct _menu Ref) {
 1395              		.loc 1 607 38 is_stmt 1 view -0
 1396              		.cfi_startproc
 1397              		@ args = 208, pretend = 16, frame = 0
 1398              		@ frame_needed = 0, uses_anonymous_args = 0
 608:src/menu.c    ****   int len = 0;
 1399              		.loc 1 608 3 view .LVU392
 1400              	.LVL102:
 609:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1401              		.loc 1 609 3 view .LVU393
 607:src/menu.c    ****   int len = 0;
 1402              		.loc 1 607 38 is_stmt 0 view .LVU394
 1403 0000 84B0     		sub	sp, sp, #16
 1404              		.cfi_def_cfa_offset 16
 1405 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1406              		.cfi_def_cfa_offset 52
 1407              		.cfi_offset 4, -52
 1408              		.cfi_offset 5, -48
 1409              		.cfi_offset 6, -44
 1410              		.cfi_offset 7, -40
 1411              		.cfi_offset 8, -36
 1412              		.cfi_offset 9, -32
 1413              		.cfi_offset 10, -28
ARM GAS  /tmp/ccuwCXMe.s 			page 42


 1414              		.cfi_offset 11, -24
 1415              		.cfi_offset 14, -20
 1416 0006 83B0     		sub	sp, sp, #12
 1417              		.cfi_def_cfa_offset 64
 1418              		.loc 1 609 3 view .LVU395
 1419 0008 0024     		movs	r4, #0
 607:src/menu.c    ****   int len = 0;
 1420              		.loc 1 607 38 view .LVU396
 1421 000a 0CAD     		add	r5, sp, #48
 1422 000c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1423              		.loc 1 609 3 view .LVU397
 1424 0010 3E4E     		ldr	r6, .L167
 1425 0012 0094     		str	r4, [sp]
 1426 0014 2046     		mov	r0, r4
 1427 0016 3423     		movs	r3, #52
 1428 0018 4FF4C872 		mov	r2, #400
 1429 001c BC21     		movs	r1, #188
 1430 001e B047     		blx	r6
 1431              	.LVL103:
 610:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1432              		.loc 1 610 3 is_stmt 1 view .LVU398
 1433 0020 3B4D     		ldr	r5, .L167+4
 1434 0022 FF23     		movs	r3, #255
 1435 0024 0093     		str	r3, [sp]
 1436 0026 4FF4C872 		mov	r2, #400
 1437 002a 0123     		movs	r3, #1
 1438 002c BC21     		movs	r1, #188
 1439 002e 2046     		mov	r0, r4
 1440 0030 B047     		blx	r6
 1441              	.LVL104:
 611:src/menu.c    ****   //Clear previous menu
 612:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1442              		.loc 1 612 3 view .LVU399
 1443              	.LBB89:
 1444              		.loc 1 612 8 view .LVU400
 1445              		.loc 1 612 21 view .LVU401
 613:src/menu.c    ****     mdots[col][0] = 0;
 1446              		.loc 1 613 19 is_stmt 0 view .LVU402
 1447 0032 2246     		mov	r2, r4
 1448 0034 05F5C871 		add	r1, r5, #400
 1449              	.LBE89:
 610:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1450              		.loc 1 610 3 view .LVU403
 1451 0038 2B46     		mov	r3, r5
 1452              	.LVL105:
 1453              	.L150:
 1454              	.LBB90:
 1455              		.loc 1 613 5 is_stmt 1 discriminator 3 view .LVU404
 1456              		.loc 1 613 19 is_stmt 0 discriminator 3 view .LVU405
 1457 003a 1A70     		strb	r2, [r3]
 614:src/menu.c    ****     mdots[col][1] = 0;
 1458              		.loc 1 614 5 is_stmt 1 discriminator 3 view .LVU406
 1459              		.loc 1 614 19 is_stmt 0 discriminator 3 view .LVU407
 1460 003c 5A70     		strb	r2, [r3, #1]
 612:src/menu.c    ****     mdots[col][0] = 0;
 1461              		.loc 1 612 32 is_stmt 1 discriminator 3 view .LVU408
 612:src/menu.c    ****     mdots[col][0] = 0;
ARM GAS  /tmp/ccuwCXMe.s 			page 43


 1462              		.loc 1 612 21 discriminator 3 view .LVU409
 1463 003e 0233     		adds	r3, r3, #2
 612:src/menu.c    ****     mdots[col][0] = 0;
 1464              		.loc 1 612 3 is_stmt 0 discriminator 3 view .LVU410
 1465 0040 9942     		cmp	r1, r3
 1466 0042 FAD1     		bne	.L150
 1467 0044 14AE     		add	r6, sp, #80
 612:src/menu.c    ****     mdots[col][0] = 0;
 1468              		.loc 1 612 3 view .LVU411
 1469 0046 0024     		movs	r4, #0
 1470              	.LVL106:
 1471              	.L151:
 612:src/menu.c    ****     mdots[col][0] = 0;
 1472              		.loc 1 612 3 view .LVU412
 1473              	.LBE90:
 1474              	.LBB91:
 615:src/menu.c    ****   }
 616:src/menu.c    **** 
 617:src/menu.c    ****   // Draw menu items
 618:src/menu.c    ****   // 
 619:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 620:src/menu.c    ****     /*
 621:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 622:src/menu.c    ****     */
 623:src/menu.c    ****     // Label is Ref.keys[item].unshifted_label
 624:src/menu.c    ****     // Unshifted first
 625:src/menu.c    ****       len = pixel_length (Ref.keys[item].unshifted_label, 0); // 0 means not small font
 1475              		.loc 1 625 7 is_stmt 1 view .LVU413
 1476              		.loc 1 625 13 is_stmt 0 view .LVU414
 1477 0048 0021     		movs	r1, #0
 1478 004a 3046     		mov	r0, r6
 1479 004c FFF7FEFF 		bl	pixel_length
 1480              	.LVL107:
 626:src/menu.c    ****       set_menu_label ( Ref.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1481              		.loc 1 626 7 is_stmt 1 view .LVU415
 1482              		.loc 1 626 73 is_stmt 0 view .LVU416
 1483 0050 C0F12000 		rsb	r0, r0, #32
 1484              	.LVL108:
 1485              		.loc 1 626 79 view .LVU417
 1486 0054 00EBD070 		add	r0, r0, r0, lsr #31
 1487              		.loc 1 626 7 view .LVU418
 1488 0058 04EB6001 		add	r1, r4, r0, asr #1
 1489 005c 0022     		movs	r2, #0
 1490 005e 3046     		mov	r0, r6
 1491 0060 06F10807 		add	r7, r6, #8
 1492 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1493              	.LVL109:
 627:src/menu.c    ****       // Now shifted ...	
 628:src/menu.c    ****       len = pixel_length (Ref.keys[item].shifted_label, 0); // 0 means not small font
 1494              		.loc 1 628 7 is_stmt 1 view .LVU419
 1495              		.loc 1 628 13 is_stmt 0 view .LVU420
 1496 0068 0021     		movs	r1, #0
 1497 006a 3846     		mov	r0, r7
 1498 006c FFF7FEFF 		bl	pixel_length
 1499              	.LVL110:
 629:src/menu.c    ****       len = item*32 + (32-len)/2;
 1500              		.loc 1 629 7 is_stmt 1 view .LVU421
ARM GAS  /tmp/ccuwCXMe.s 			page 44


 1501              		.loc 1 629 26 is_stmt 0 view .LVU422
 1502 0070 C0F12000 		rsb	r0, r0, #32
 1503              	.LVL111:
 1504              		.loc 1 629 31 view .LVU423
 1505 0074 00EBD070 		add	r0, r0, r0, lsr #31
 1506              	.LVL112:
 630:src/menu.c    ****       if (len<0) len = 0;
 1507              		.loc 1 630 7 is_stmt 1 view .LVU424
 629:src/menu.c    ****       len = item*32 + (32-len)/2;
 1508              		.loc 1 629 11 is_stmt 0 view .LVU425
 1509 0078 04EB6001 		add	r1, r4, r0, asr #1
 1510              	.LVL113:
 629:src/menu.c    ****       len = item*32 + (32-len)/2;
 1511              		.loc 1 629 11 view .LVU426
 1512 007c C729     		cmp	r1, #199
 1513 007e A8BF     		it	ge
 1514 0080 C721     		movge	r1, #199
 1515              	.LVL114:
 631:src/menu.c    ****       if (len>199) len = 199;
 632:src/menu.c    ****       set_menu_label ( Ref.keys[item].shifted_label, 0, len, 1 );
 1516              		.loc 1 632 7 is_stmt 1 view .LVU427
 1517 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1518              	.LVL115:
 1519              		.loc 1 632 7 is_stmt 0 view .LVU428
 1520 0086 3846     		mov	r0, r7
 1521 0088 2034     		adds	r4, r4, #32
 1522 008a 0122     		movs	r2, #1
 1523 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1524              	.LVL116:
 619:src/menu.c    ****     /*
 1525              		.loc 1 619 32 is_stmt 1 view .LVU429
 619:src/menu.c    ****     /*
 1526              		.loc 1 619 22 view .LVU430
 619:src/menu.c    ****     /*
 1527              		.loc 1 619 3 is_stmt 0 view .LVU431
 1528 0090 C02C     		cmp	r4, #192
 1529 0092 06F12006 		add	r6, r6, #32
 1530 0096 D7D1     		bne	.L151
 1531 0098 1E4E     		ldr	r6, .L167+8
 1532              	.LBE91:
 1533              	.LBB92:
 1534              	.LBB93:
 633:src/menu.c    ****   }
 634:src/menu.c    **** 
 635:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 636:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 637:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 638:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 639:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1535              		.loc 1 639 2 view .LVU432
 1536 009a DFF87090 		ldr	r9, .L167
 1537 009e C5F1040A 		rsb	r10, r5, #4
 1538 00a2 06F5C47B 		add	fp, r6, #392
 1539              	.LBE93:
 1540              	.LBE92:
 1541              	.LBB95:
 619:src/menu.c    ****     /*
ARM GAS  /tmp/ccuwCXMe.s 			page 45


 1542              		.loc 1 619 3 view .LVU433
 1543 00a6 771E     		subs	r7, r6, #1
 1544              	.LBE95:
 1545              	.LBB96:
 1546              	.LBB94:
 1547              		.loc 1 639 2 view .LVU434
 1548 00a8 4FF0FF08 		mov	r8, #255
 1549              	.L152:
 1550              	.LVL117:
 636:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1551              		.loc 1 636 23 is_stmt 1 view .LVU435
 1552 00ac 0AEB0705 		add	r5, r10, r7
 636:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1553              		.loc 1 636 14 is_stmt 0 view .LVU436
 1554 00b0 0024     		movs	r4, #0
 1555              	.LVL118:
 1556              	.L155:
 637:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1557              		.loc 1 637 7 is_stmt 1 view .LVU437
 1558              		.loc 1 639 2 view .LVU438
 637:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1559              		.loc 1 637 22 is_stmt 0 view .LVU439
 1560 00b2 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 637:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1561              		.loc 1 637 40 view .LVU440
 1562 00b6 2241     		asrs	r2, r2, r4
 1563              		.loc 1 639 2 view .LVU441
 1564 00b8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1565 00bc 0323     		movs	r3, #3
 637:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1566              		.loc 1 637 10 view .LVU442
 1567 00be 12F0010F 		tst	r2, #1
 1568              		.loc 1 639 2 view .LVU443
 1569 00c2 01F1E901 		add	r1, r1, #233
 1570 00c6 1A46     		mov	r2, r3
 1571 00c8 2846     		mov	r0, r5
 637:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1572              		.loc 1 637 10 view .LVU444
 1573 00ca 02D0     		beq	.L153
 1574              		.loc 1 639 2 view .LVU445
 1575 00cc CDF80080 		str	r8, [sp]
 1576 00d0 C847     		blx	r9
 1577              	.LVL119:
 1578              	.L153:
 640:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1579              		.loc 1 640 7 is_stmt 1 view .LVU446
 641:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 642:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1580              		.loc 1 642 2 view .LVU447
 640:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1581              		.loc 1 640 22 is_stmt 0 view .LVU448
 1582 00d2 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 640:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1583              		.loc 1 640 40 view .LVU449
 1584 00d4 2241     		asrs	r2, r2, r4
 1585              		.loc 1 642 2 view .LVU450
 1586 00d6 A4EB8401 		sub	r1, r4, r4, lsl #2
ARM GAS  /tmp/ccuwCXMe.s 			page 46


 1587 00da 0323     		movs	r3, #3
 640:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1588              		.loc 1 640 10 view .LVU451
 1589 00dc 12F0010F 		tst	r2, #1
 1590              		.loc 1 642 2 view .LVU452
 1591 00e0 01F1D001 		add	r1, r1, #208
 1592 00e4 1A46     		mov	r2, r3
 1593 00e6 04F10104 		add	r4, r4, #1
 1594              	.LVL120:
 1595              		.loc 1 642 2 view .LVU453
 1596 00ea 2846     		mov	r0, r5
 640:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1597              		.loc 1 640 10 view .LVU454
 1598 00ec 02D0     		beq	.L154
 1599              		.loc 1 642 2 view .LVU455
 1600 00ee CDF80080 		str	r8, [sp]
 1601 00f2 C847     		blx	r9
 1602              	.LVL121:
 1603              	.L154:
 636:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1604              		.loc 1 636 32 is_stmt 1 discriminator 2 view .LVU456
 636:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1605              		.loc 1 636 23 discriminator 2 view .LVU457
 636:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1606              		.loc 1 636 5 is_stmt 0 discriminator 2 view .LVU458
 1607 00f4 062C     		cmp	r4, #6
 1608 00f6 DCD1     		bne	.L155
 1609              	.LBE94:
 635:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1610              		.loc 1 635 32 is_stmt 1 discriminator 2 view .LVU459
 635:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1611              		.loc 1 635 21 discriminator 2 view .LVU460
 1612 00f8 0236     		adds	r6, r6, #2
 635:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1613              		.loc 1 635 3 is_stmt 0 discriminator 2 view .LVU461
 1614 00fa B345     		cmp	fp, r6
 1615 00fc 07F10207 		add	r7, r7, #2
 1616 0100 D4D1     		bne	.L152
 1617              	.LBE96:
 643:src/menu.c    ****     }
 644:src/menu.c    ****   }
 645:src/menu.c    **** }
 1618              		.loc 1 645 1 view .LVU462
 1619 0102 03B0     		add	sp, sp, #12
 1620              		.cfi_def_cfa_offset 52
 1621              		@ sp needed
 1622 0104 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1623              		.cfi_restore 14
 1624              		.cfi_restore 11
 1625              		.cfi_restore 10
 1626              		.cfi_restore 9
 1627              		.cfi_restore 8
 1628              		.cfi_restore 7
 1629              		.cfi_restore 6
 1630              		.cfi_restore 5
 1631              		.cfi_restore 4
 1632              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccuwCXMe.s 			page 47


 1633              	.LVL122:
 1634              		.loc 1 645 1 view .LVU463
 1635 0108 04B0     		add	sp, sp, #16
 1636              		.cfi_def_cfa_offset 0
 1637 010a 7047     		bx	lr
 1638              	.L168:
 1639              		.align	2
 1640              	.L167:
 1641 010c 3D020008 		.word	134218301
 1642 0110 00000000 		.word	.LANCHOR0
 1643 0114 01000000 		.word	.LANCHOR0+1
 1644              		.cfi_endproc
 1645              	.LFE16:
 1647              		.section	.text.display_current_menu,"ax",%progbits
 1648              		.align	1
 1649              		.p2align 2,,3
 1650              		.global	display_current_menu
 1651              		.syntax unified
 1652              		.thumb
 1653              		.thumb_func
 1654              		.fpu fpv4-sp-d16
 1656              	display_current_menu:
 1657              	.LFB11:
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1658              		.loc 1 148 30 is_stmt 1 view -0
 1659              		.cfi_startproc
 1660              		@ args = 0, pretend = 0, frame = 208
 1661              		@ frame_needed = 0, uses_anonymous_args = 0
 149:src/menu.c    **** }
 1662              		.loc 1 149 3 view .LVU465
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1663              		.loc 1 148 30 is_stmt 0 view .LVU466
 1664 0000 10B5     		push	{r4, lr}
 1665              		.cfi_def_cfa_offset 8
 1666              		.cfi_offset 4, -8
 1667              		.cfi_offset 14, -4
 1668 0002 E4B0     		sub	sp, sp, #400
 1669              		.cfi_def_cfa_offset 408
 149:src/menu.c    **** }
 1670              		.loc 1 149 3 view .LVU467
 1671 0004 30AC     		add	r4, sp, #192
 1672 0006 2046     		mov	r0, r4
 1673 0008 FFF7FEFF 		bl	get_current_menu_ref
 1674              	.LVL123:
 1675 000c 34A9     		add	r1, sp, #208
 1676 000e C022     		movs	r2, #192
 1677 0010 6846     		mov	r0, sp
 1678 0012 FFF7FEFF 		bl	memcpy
 1679              	.LVL124:
 1680 0016 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1681 001a FFF7FEFF 		bl	display_menu
 1682              	.LVL125:
 150:src/menu.c    **** 
 1683              		.loc 1 150 1 view .LVU468
 1684 001e 64B0     		add	sp, sp, #400
 1685              		.cfi_def_cfa_offset 8
 1686              		@ sp needed
ARM GAS  /tmp/ccuwCXMe.s 			page 48


 1687 0020 10BD     		pop	{r4, pc}
 1688              		.cfi_endproc
 1689              	.LFE11:
 1691 0022 00BF     		.section	.text.all_menu_dots,"ax",%progbits
 1692              		.align	1
 1693              		.p2align 2,,3
 1694              		.global	all_menu_dots
 1695              		.syntax unified
 1696              		.thumb
 1697              		.thumb_func
 1698              		.fpu fpv4-sp-d16
 1700              	all_menu_dots:
 1701              	.LFB17:
 646:src/menu.c    **** 
 647:src/menu.c    **** void all_menu_dots () {
 1702              		.loc 1 647 23 is_stmt 1 view -0
 1703              		.cfi_startproc
 1704              		@ args = 0, pretend = 0, frame = 0
 1705              		@ frame_needed = 0, uses_anonymous_args = 0
 648:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1706              		.loc 1 648 3 view .LVU470
 1707              	.LBB97:
 1708              		.loc 1 648 8 view .LVU471
 1709              	.LVL126:
 1710              		.loc 1 648 21 view .LVU472
 1711              	.LBE97:
 647:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1712              		.loc 1 647 23 is_stmt 0 view .LVU473
 1713 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1714              		.cfi_def_cfa_offset 20
 1715              		.cfi_offset 4, -20
 1716              		.cfi_offset 5, -16
 1717              		.cfi_offset 6, -12
 1718              		.cfi_offset 7, -8
 1719              		.cfi_offset 14, -4
 1720              	.LBB101:
 1721              	.LBB98:
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 650:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1722              		.loc 1 650 2 view .LVU474
 1723 0002 0D4E     		ldr	r6, .L177
 1724              	.LBE98:
 1725              	.LBE101:
 647:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1726              		.loc 1 647 23 view .LVU475
 1727 0004 83B0     		sub	sp, sp, #12
 1728              		.cfi_def_cfa_offset 32
 647:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1729              		.loc 1 647 23 view .LVU476
 1730 0006 0025     		movs	r5, #0
 1731              	.LBB102:
 1732              	.LBB99:
 1733              		.loc 1 650 2 view .LVU477
 1734 0008 FF27     		movs	r7, #255
 1735              	.LVL127:
 1736              	.L172:
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
ARM GAS  /tmp/ccuwCXMe.s 			page 49


 1737              		.loc 1 649 23 is_stmt 1 view .LVU478
 1738              	.LBE99:
 1739              	.LBE102:
 647:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1740              		.loc 1 647 23 is_stmt 0 view .LVU479
 1741 000a E924     		movs	r4, #233
 1742              	.LVL128:
 1743              	.L173:
 1744              	.LBB103:
 1745              	.LBB100:
 1746              		.loc 1 650 2 is_stmt 1 discriminator 3 view .LVU480
 1747 000c 0323     		movs	r3, #3
 1748 000e 1A46     		mov	r2, r3
 1749 0010 2146     		mov	r1, r4
 1750 0012 2846     		mov	r0, r5
 1751 0014 0097     		str	r7, [sp]
 1752 0016 B047     		blx	r6
 1753              	.LVL129:
 651:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1754              		.loc 1 651 2 discriminator 3 view .LVU481
 1755 0018 0323     		movs	r3, #3
 1756 001a A4F11901 		sub	r1, r4, #25
 1757 001e 0097     		str	r7, [sp]
 1758 0020 1A46     		mov	r2, r3
 1759 0022 2846     		mov	r0, r5
 1760 0024 033C     		subs	r4, r4, #3
 1761 0026 B047     		blx	r6
 1762              	.LVL130:
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1763              		.loc 1 649 32 discriminator 3 view .LVU482
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1764              		.loc 1 649 23 discriminator 3 view .LVU483
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1765              		.loc 1 649 5 is_stmt 0 discriminator 3 view .LVU484
 1766 0028 D72C     		cmp	r4, #215
 1767 002a EFD1     		bne	.L173
 1768              	.LBE100:
 648:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1769              		.loc 1 648 32 is_stmt 1 discriminator 2 view .LVU485
 648:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1770              		.loc 1 648 21 discriminator 2 view .LVU486
 1771 002c 0235     		adds	r5, r5, #2
 648:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1772              		.loc 1 648 3 is_stmt 0 discriminator 2 view .LVU487
 1773 002e B5F5C87F 		cmp	r5, #400
 1774 0032 EAD1     		bne	.L172
 1775              	.LBE103:
 652:src/menu.c    ****     }
 653:src/menu.c    ****   }
 654:src/menu.c    **** }  
 1776              		.loc 1 654 1 view .LVU488
 1777 0034 03B0     		add	sp, sp, #12
 1778              		.cfi_def_cfa_offset 20
 1779              		@ sp needed
 1780 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1781              	.L178:
 1782              		.align	2
ARM GAS  /tmp/ccuwCXMe.s 			page 50


 1783              	.L177:
 1784 0038 3D020008 		.word	134218301
 1785              		.cfi_endproc
 1786              	.LFE17:
 1788              		.section	.text.umen_store,"ax",%progbits
 1789              		.align	1
 1790              		.p2align 2,,3
 1791              		.global	umen_store
 1792              		.syntax unified
 1793              		.thumb
 1794              		.thumb_func
 1795              		.fpu fpv4-sp-d16
 1797              	umen_store:
 1798              	.LVL131:
 1799              	.LFB20:
 655:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1);
 656:src/menu.c    **** 
 657:src/menu.c    **** void build_user_menu(void){
 658:src/menu.c    ****   // find the label 'MNU'
 659:src/menu.c    ****    const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 660:src/menu.c    ****    build_user_menu_from_program (lbl);
 661:src/menu.c    **** }
 662:src/menu.c    **** 
 663:src/menu.c    **** void build_user_menu_from_program(int lbl)
 664:src/menu.c    **** {
 665:src/menu.c    ****   // find the label 'MNU'
 666:src/menu.c    ****   // const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 667:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 668:src/menu.c    ****   int i=0;
 669:src/menu.c    ****   s_opcode op;
 670:src/menu.c    ****   opcode opc;
 671:src/menu.c    ****   char buf1[16];
 672:src/menu.c    ****   char *p = buf1;
 673:src/menu.c    ****   char c;
 674:src/menu.c    ****   int finished = 0;
 675:src/menu.c    **** 
 676:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 677:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 678:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 679:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 680:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 681:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 682:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 683:src/menu.c    ****   }
 684:src/menu.c    ****   while (pc && i < 12) {
 685:src/menu.c    **** 
 686:src/menu.c    ****     pc = do_inc(pc, 0);
 687:src/menu.c    ****     opc = getprog(pc);
 688:src/menu.c    ****     op = (s_opcode) opc;
 689:src/menu.c    **** 
 690:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 691:src/menu.c    ****       break;
 692:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 693:src/menu.c    ****       if (i==4) {
 694:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 695:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 696:src/menu.c    ****       }
ARM GAS  /tmp/ccuwCXMe.s 			page 51


 697:src/menu.c    ****       else if (i==5) {
 698:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 699:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 700:src/menu.c    ****       }
 701:src/menu.c    ****       i += 1;
 702:src/menu.c    ****       continue;
 703:src/menu.c    ****     }
 704:src/menu.c    **** 
 705:src/menu.c    ****     if (isDBL(opc) && (opDBL(opc) == DBL_ALPHA)) { // is it double alpha?
 706:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 707:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 708:src/menu.c    **** 	i++;
 709:src/menu.c    ****     	p = buf1;
 710:src/menu.c    **** 	finished = 0;
 711:src/menu.c    ****       } // ..and start reading the new alpha
 712:src/menu.c    ****       *p++ = opc & 0xff; // character 1
 713:src/menu.c    ****       c = (opc >> 16) & 0xff;
 714:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 715:src/menu.c    **** 	*p++ = c;
 716:src/menu.c    **** 	c = opc>>24;
 717:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 718:src/menu.c    **** 	  *p++ = c;
 719:src/menu.c    ****       }
 720:src/menu.c    ****       *p = '\0'; // no ++: next character can overwrite the 0.
 721:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 722:src/menu.c    **** 	finished = 1;
 723:src/menu.c    ****       }
 724:src/menu.c    ****     }
 725:src/menu.c    ****     else { // Not a DBL_ALPHA op - the usual case
 726:src/menu.c    ****       if ( p == buf1 ) { // no alpha label to use
 727:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 728:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 729:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 730:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 731:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 732:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 733:src/menu.c    **** 	  }
 734:src/menu.c    **** 	  else {
 735:src/menu.c    **** 	    prt_umen(opc, buf1); // display rarg with argument
 736:src/menu.c    **** 	  }
 737:src/menu.c    **** 	}
 738:src/menu.c    **** 	else {
 739:src/menu.c    **** 	  prt_umen(opc, buf1); // display non-rarg thing
 740:src/menu.c    **** 	}
 741:src/menu.c    ****       }
 742:src/menu.c    ****       else { // there is an alpha label to use, so reset
 743:src/menu.c    **** 	p = buf1;
 744:src/menu.c    **** 	finished = 0;
 745:src/menu.c    ****       }
 746:src/menu.c    ****       umen_store (i, opc, buf1);
 747:src/menu.c    ****       i++;
 748:src/menu.c    ****     }
 749:src/menu.c    ****   }
 750:src/menu.c    **** }
 751:src/menu.c    **** 
 752:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1) {
 1800              		.loc 1 752 49 is_stmt 1 view -0
ARM GAS  /tmp/ccuwCXMe.s 			page 52


 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 0
 1803              		@ frame_needed = 0, uses_anonymous_args = 0
 753:src/menu.c    **** #pragma GCC diagnostic push
 754:src/menu.c    **** #pragma GCC diagnostic ignored "-Wstringop-truncation"
 755:src/menu.c    ****     if (i<6) {
 1804              		.loc 1 755 5 view .LVU490
 1805              		.loc 1 755 8 is_stmt 0 view .LVU491
 1806 0000 0528     		cmp	r0, #5
 752:src/menu.c    **** #pragma GCC diagnostic push
 1807              		.loc 1 752 49 view .LVU492
 1808 0002 70B5     		push	{r4, r5, r6, lr}
 1809              		.cfi_def_cfa_offset 16
 1810              		.cfi_offset 4, -16
 1811              		.cfi_offset 5, -12
 1812              		.cfi_offset 6, -8
 1813              		.cfi_offset 14, -4
 752:src/menu.c    **** #pragma GCC diagnostic push
 1814              		.loc 1 752 49 view .LVU493
 1815 0004 0D46     		mov	r5, r1
 1816 0006 0446     		mov	r4, r0
 1817 0008 1146     		mov	r1, r2
 1818              	.LVL132:
 1819              		.loc 1 755 8 view .LVU494
 1820 000a 0FDC     		bgt	.L180
 1821              	.LBB109:
 756:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1822              		.loc 1 756 7 is_stmt 1 view .LVU495
 1823              		.loc 1 756 31 is_stmt 0 view .LVU496
 1824 000c 104E     		ldr	r6, .L183
 1825 000e 0130     		adds	r0, r0, #1
 1826              	.LVL133:
 757:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1827              		.loc 1 757 42 view .LVU497
 1828 0010 06EB4414 		add	r4, r6, r4, lsl #5
 1829              	.LVL134:
 756:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1830              		.loc 1 756 7 view .LVU498
 1831 0014 0722     		movs	r2, #7
 1832              	.LVL135:
 756:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1833              		.loc 1 756 7 view .LVU499
 1834 0016 06EB4010 		add	r0, r6, r0, lsl #5
 1835              	.LVL136:
 756:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1836              		.loc 1 756 7 view .LVU500
 1837 001a FFF7FEFF 		bl	strncpy
 1838              	.LVL137:
 1839              		.loc 1 757 7 is_stmt 1 view .LVU501
 1840              		.loc 1 757 42 is_stmt 0 view .LVU502
 1841 001e 0022     		movs	r2, #0
 758:src/menu.c    ****       UserMenu.keys[i].unshifted = (struct _ndmap) {K_OP, opc};
 1842              		.loc 1 758 34 view .LVU503
 1843 0020 3423     		movs	r3, #52
 757:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1844              		.loc 1 757 42 view .LVU504
 1845 0022 84F82720 		strb	r2, [r4, #39]
ARM GAS  /tmp/ccuwCXMe.s 			page 53


 1846              		.loc 1 758 7 is_stmt 1 view .LVU505
 1847              		.loc 1 758 34 is_stmt 0 view .LVU506
 1848 0026 2374     		strb	r3, [r4, #16]
 1849 0028 6561     		str	r5, [r4, #20]
 1850              	.LBE109:
 759:src/menu.c    ****     }
 760:src/menu.c    ****     else {
 761:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 762:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 763:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 764:src/menu.c    ****     }
 765:src/menu.c    **** #pragma GCC diagnostic pop
 766:src/menu.c    **** }  
 1851              		.loc 1 766 1 view .LVU507
 1852 002a 70BD     		pop	{r4, r5, r6, pc}
 1853              	.LVL138:
 1854              	.L180:
 1855              	.LBB110:
 1856              	.LBI110:
 752:src/menu.c    **** #pragma GCC diagnostic push
 1857              		.loc 1 752 6 is_stmt 1 view .LVU508
 1858              	.LBB111:
 1859              	.LBB112:
 761:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1860              		.loc 1 761 7 view .LVU509
 761:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1861              		.loc 1 761 30 is_stmt 0 view .LVU510
 1862 002c 841F     		subs	r4, r0, #6
 761:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1863              		.loc 1 761 33 view .LVU511
 1864 002e 084E     		ldr	r6, .L183
 1865 0030 6401     		lsls	r4, r4, #5
 1866 0032 04F12800 		add	r0, r4, #40
 1867              	.LVL139:
 761:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1868              		.loc 1 761 7 view .LVU512
 1869 0036 0722     		movs	r2, #7
 762:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1870              		.loc 1 762 42 view .LVU513
 1871 0038 3444     		add	r4, r4, r6
 761:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1872              		.loc 1 761 7 view .LVU514
 1873 003a 3044     		add	r0, r0, r6
 1874 003c FFF7FEFF 		bl	strncpy
 1875              	.LVL140:
 762:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1876              		.loc 1 762 7 is_stmt 1 view .LVU515
 762:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1877              		.loc 1 762 42 is_stmt 0 view .LVU516
 1878 0040 0022     		movs	r2, #0
 763:src/menu.c    ****     }
 1879              		.loc 1 763 34 view .LVU517
 1880 0042 3423     		movs	r3, #52
 762:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1881              		.loc 1 762 42 view .LVU518
 1882 0044 84F82F20 		strb	r2, [r4, #47]
 763:src/menu.c    ****     }
ARM GAS  /tmp/ccuwCXMe.s 			page 54


 1883              		.loc 1 763 7 is_stmt 1 view .LVU519
 1884              	.LVL141:
 763:src/menu.c    ****     }
 1885              		.loc 1 763 34 is_stmt 0 view .LVU520
 1886 0048 2376     		strb	r3, [r4, #24]
 1887 004a E561     		str	r5, [r4, #28]
 1888              	.LBE112:
 1889              	.LBE111:
 1890              	.LBE110:
 1891              		.loc 1 766 1 view .LVU521
 1892 004c 70BD     		pop	{r4, r5, r6, pc}
 1893              	.LVL142:
 1894              	.L184:
 1895              		.loc 1 766 1 view .LVU522
 1896 004e 00BF     		.align	2
 1897              	.L183:
 1898 0050 00000000 		.word	.LANCHOR4
 1899              		.cfi_endproc
 1900              	.LFE20:
 1902              		.section	.text.build_user_menu_from_program,"ax",%progbits
 1903              		.align	1
 1904              		.p2align 2,,3
 1905              		.global	build_user_menu_from_program
 1906              		.syntax unified
 1907              		.thumb
 1908              		.thumb_func
 1909              		.fpu fpv4-sp-d16
 1911              	build_user_menu_from_program:
 1912              	.LVL143:
 1913              	.LFB19:
 664:src/menu.c    ****   // find the label 'MNU'
 1914              		.loc 1 664 1 is_stmt 1 view -0
 1915              		.cfi_startproc
 1916              		@ args = 0, pretend = 0, frame = 16
 1917              		@ frame_needed = 0, uses_anonymous_args = 0
 667:src/menu.c    ****   int i=0;
 1918              		.loc 1 667 3 view .LVU524
 664:src/menu.c    ****   // find the label 'MNU'
 1919              		.loc 1 664 1 is_stmt 0 view .LVU525
 1920 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1921              		.cfi_def_cfa_offset 36
 1922              		.cfi_offset 4, -36
 1923              		.cfi_offset 5, -32
 1924              		.cfi_offset 6, -28
 1925              		.cfi_offset 7, -24
 1926              		.cfi_offset 8, -20
 1927              		.cfi_offset 9, -16
 1928              		.cfi_offset 10, -12
 1929              		.cfi_offset 11, -8
 1930              		.cfi_offset 14, -4
 667:src/menu.c    ****   int i=0;
 1931              		.loc 1 667 21 view .LVU526
 1932 0004 0021     		movs	r1, #0
 664:src/menu.c    ****   // find the label 'MNU'
 1933              		.loc 1 664 1 view .LVU527
 1934 0006 85B0     		sub	sp, sp, #20
 1935              		.cfi_def_cfa_offset 56
ARM GAS  /tmp/ccuwCXMe.s 			page 55


 667:src/menu.c    ****   int i=0;
 1936              		.loc 1 667 21 view .LVU528
 1937 0008 FFF7FEFF 		bl	findmultilbl
 1938              	.LVL144:
 667:src/menu.c    ****   int i=0;
 1939              		.loc 1 667 21 view .LVU529
 1940 000c 5C4B     		ldr	r3, .L236
 1941 000e 0546     		mov	r5, r0
 1942              	.LVL145:
 668:src/menu.c    ****   s_opcode op;
 1943              		.loc 1 668 3 is_stmt 1 view .LVU530
 669:src/menu.c    ****   opcode opc;
 1944              		.loc 1 669 3 view .LVU531
 670:src/menu.c    ****   char buf1[16];
 1945              		.loc 1 670 3 view .LVU532
 671:src/menu.c    ****   char *p = buf1;
 1946              		.loc 1 671 3 view .LVU533
 672:src/menu.c    ****   char c;
 1947              		.loc 1 672 3 view .LVU534
 673:src/menu.c    ****   int finished = 0;
 1948              		.loc 1 673 3 view .LVU535
 674:src/menu.c    **** 
 1949              		.loc 1 674 3 view .LVU536
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1950              		.loc 1 676 3 view .LVU537
 1951              	.LBB113:
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1952              		.loc 1 676 8 view .LVU538
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1953              		.loc 1 676 19 view .LVU539
 677:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1954              		.loc 1 677 43 is_stmt 0 view .LVU540
 1955 0010 0022     		movs	r2, #0
 1956 0012 03F1C000 		add	r0, r3, #192
 1957              	.LVL146:
 679:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1958              		.loc 1 679 42 view .LVU541
 1959 0016 2E21     		movs	r1, #46
 1960              	.LVL147:
 1961              	.L186:
 677:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1962              		.loc 1 677 7 is_stmt 1 discriminator 3 view .LVU542
 677:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1963              		.loc 1 677 43 is_stmt 0 discriminator 3 view .LVU543
 1964 0018 83F82020 		strb	r2, [r3, #32]
 678:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1965              		.loc 1 678 7 is_stmt 1 discriminator 3 view .LVU544
 678:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1966              		.loc 1 678 40 is_stmt 0 discriminator 3 view .LVU545
 1967 001c 5A61     		str	r2, [r3, #20]
 679:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1968              		.loc 1 679 7 is_stmt 1 discriminator 3 view .LVU546
 679:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1969              		.loc 1 679 42 is_stmt 0 discriminator 3 view .LVU547
 1970 001e 1974     		strb	r1, [r3, #16]
 680:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1971              		.loc 1 680 7 is_stmt 1 discriminator 3 view .LVU548
ARM GAS  /tmp/ccuwCXMe.s 			page 56


 680:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1972              		.loc 1 680 41 is_stmt 0 discriminator 3 view .LVU549
 1973 0020 83F82820 		strb	r2, [r3, #40]
 681:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1974              		.loc 1 681 7 is_stmt 1 discriminator 3 view .LVU550
 681:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1975              		.loc 1 681 38 is_stmt 0 discriminator 3 view .LVU551
 1976 0024 DA61     		str	r2, [r3, #28]
 682:src/menu.c    ****   }
 1977              		.loc 1 682 7 is_stmt 1 discriminator 3 view .LVU552
 682:src/menu.c    ****   }
 1978              		.loc 1 682 40 is_stmt 0 discriminator 3 view .LVU553
 1979 0026 1976     		strb	r1, [r3, #24]
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1980              		.loc 1 676 24 is_stmt 1 discriminator 3 view .LVU554
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1981              		.loc 1 676 19 discriminator 3 view .LVU555
 1982 0028 2033     		adds	r3, r3, #32
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1983              		.loc 1 676 3 is_stmt 0 discriminator 3 view .LVU556
 1984 002a 8342     		cmp	r3, r0
 1985 002c F4D1     		bne	.L186
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1986              		.loc 1 676 3 discriminator 3 view .LVU557
 1987              	.LBE113:
 684:src/menu.c    **** 
 1988              		.loc 1 684 9 is_stmt 1 view .LVU558
 1989 002e 65B3     		cbz	r5, .L185
 1990              	.LBB114:
 698:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1991              		.loc 1 698 29 is_stmt 0 view .LVU559
 1992 0030 DFF86891 		ldr	r9, .L236+28
 1993              	.LBE114:
 674:src/menu.c    **** 
 1994              		.loc 1 674 7 view .LVU560
 1995 0034 4FF00008 		mov	r8, #0
 672:src/menu.c    ****   char c;
 1996              		.loc 1 672 9 view .LVU561
 1997 0038 6E46     		mov	r6, sp
 1998              	.LBB115:
 695:src/menu.c    ****       }
 1999              		.loc 1 695 2 view .LVU562
 2000 003a A9F1100A 		sub	r10, r9, #16
 2001              	.LBE115:
 668:src/menu.c    ****   s_opcode op;
 2002              		.loc 1 668 7 view .LVU563
 2003 003e C346     		mov	fp, r8
 672:src/menu.c    ****   char c;
 2004              		.loc 1 672 9 view .LVU564
 2005 0040 3746     		mov	r7, r6
 2006              	.LVL148:
 2007              	.L187:
 686:src/menu.c    ****     opc = getprog(pc);
 2008              		.loc 1 686 5 is_stmt 1 view .LVU565
 686:src/menu.c    ****     opc = getprog(pc);
 2009              		.loc 1 686 10 is_stmt 0 view .LVU566
 2010 0042 2846     		mov	r0, r5
ARM GAS  /tmp/ccuwCXMe.s 			page 57


 2011 0044 0021     		movs	r1, #0
 2012 0046 FFF7FEFF 		bl	do_inc
 2013              	.LVL149:
 2014 004a 0546     		mov	r5, r0
 2015              	.LVL150:
 687:src/menu.c    ****     op = (s_opcode) opc;
 2016              		.loc 1 687 5 is_stmt 1 view .LVU567
 687:src/menu.c    ****     op = (s_opcode) opc;
 2017              		.loc 1 687 11 is_stmt 0 view .LVU568
 2018 004c FFF7FEFF 		bl	getprog
 2019              	.LVL151:
 688:src/menu.c    **** 
 2020              		.loc 1 688 8 view .LVU569
 2021 0050 83B2     		uxth	r3, r0
 690:src/menu.c    ****       break;
 2022              		.loc 1 690 8 view .LVU570
 2023 0052 B3F59D7F 		cmp	r3, #314
 687:src/menu.c    ****     op = (s_opcode) opc;
 2024              		.loc 1 687 11 view .LVU571
 2025 0056 0446     		mov	r4, r0
 2026              	.LVL152:
 688:src/menu.c    **** 
 2027              		.loc 1 688 5 is_stmt 1 view .LVU572
 690:src/menu.c    ****       break;
 2028              		.loc 1 690 5 view .LVU573
 690:src/menu.c    ****       break;
 2029              		.loc 1 690 8 is_stmt 0 view .LVU574
 2030 0058 17D0     		beq	.L185
 692:src/menu.c    ****       if (i==4) {
 2031              		.loc 1 692 5 is_stmt 1 view .LVU575
 692:src/menu.c    ****       if (i==4) {
 2032              		.loc 1 692 8 is_stmt 0 view .LVU576
 2033 005a B3F5807F 		cmp	r3, #256
 2034 005e 43D0     		beq	.L228
 705:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2035              		.loc 1 705 5 is_stmt 1 view .LVU577
 705:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2036              		.loc 1 705 9 is_stmt 0 view .LVU578
 2037 0060 00F47042 		and	r2, r0, #61440
 705:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2038              		.loc 1 705 8 view .LVU579
 2039 0064 B2F5704F 		cmp	r2, #61440
 2040 0068 12D0     		beq	.L229
 2041              	.L193:
 726:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2042              		.loc 1 726 7 is_stmt 1 view .LVU580
 726:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2043              		.loc 1 726 10 is_stmt 0 view .LVU581
 2044 006a B742     		cmp	r7, r6
 2045 006c 26D0     		beq	.L230
 744:src/menu.c    ****       }
 2046              		.loc 1 744 11 view .LVU582
 2047 006e 4FF00008 		mov	r8, #0
 2048              	.LVL153:
 2049              	.L199:
 746:src/menu.c    ****       i++;
 2050              		.loc 1 746 7 is_stmt 1 view .LVU583
ARM GAS  /tmp/ccuwCXMe.s 			page 58


 2051 0072 5846     		mov	r0, fp
 2052 0074 2146     		mov	r1, r4
 2053 0076 3246     		mov	r2, r6
 2054 0078 FFF7FEFF 		bl	umen_store
 2055              	.LVL154:
 747:src/menu.c    ****     }
 2056              		.loc 1 747 7 view .LVU584
 747:src/menu.c    ****     }
 2057              		.loc 1 747 8 is_stmt 0 view .LVU585
 2058 007c 0BF1010B 		add	fp, fp, #1
 2059              	.LVL155:
 747:src/menu.c    ****     }
 2060              		.loc 1 747 8 view .LVU586
 2061 0080 3746     		mov	r7, r6
 2062              	.LVL156:
 2063              	.L192:
 684:src/menu.c    **** 
 2064              		.loc 1 684 9 is_stmt 1 view .LVU587
 2065 0082 15B1     		cbz	r5, .L185
 684:src/menu.c    **** 
 2066              		.loc 1 684 13 is_stmt 0 discriminator 1 view .LVU588
 2067 0084 BBF10C0F 		cmp	fp, #12
 2068 0088 DBD1     		bne	.L187
 2069              	.LVL157:
 2070              	.L185:
 750:src/menu.c    **** 
 2071              		.loc 1 750 1 view .LVU589
 2072 008a 05B0     		add	sp, sp, #20
 2073              		.cfi_remember_state
 2074              		.cfi_def_cfa_offset 36
 2075              		@ sp needed
 2076 008c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2077              	.LVL158:
 2078              	.L229:
 2079              		.cfi_restore_state
 705:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2080              		.loc 1 705 24 discriminator 1 view .LVU590
 2081 0090 C0F30321 		ubfx	r1, r0, #8, #4
 705:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2082              		.loc 1 705 20 discriminator 1 view .LVU591
 2083 0094 0A29     		cmp	r1, #10
 2084 0096 E8D1     		bne	.L193
 706:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2085              		.loc 1 706 7 is_stmt 1 view .LVU592
 706:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2086              		.loc 1 706 10 is_stmt 0 view .LVU593
 2087 0098 B8F1000F 		cmp	r8, #0
 2088 009c 40D1     		bne	.L194
 706:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2089              		.loc 1 706 29 discriminator 1 view .LVU594
 2090 009e BB1B     		subs	r3, r7, r6
 2091              	.LVL159:
 706:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2092              		.loc 1 706 24 discriminator 1 view .LVU595
 2093 00a0 062B     		cmp	r3, #6
 2094 00a2 3DD0     		beq	.L194
 2095              	.LVL160:
ARM GAS  /tmp/ccuwCXMe.s 			page 59


 712:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2096              		.loc 1 712 7 is_stmt 1 view .LVU596
 714:src/menu.c    **** 	*p++ = c;
 2097              		.loc 1 714 10 is_stmt 0 view .LVU597
 2098 00a4 14F47F0F 		tst	r4, #16711680
 712:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2099              		.loc 1 712 12 view .LVU598
 2100 00a8 3C70     		strb	r4, [r7]
 713:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2101              		.loc 1 713 7 is_stmt 1 view .LVU599
 713:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2102              		.loc 1 713 9 is_stmt 0 view .LVU600
 2103 00aa C4F30743 		ubfx	r3, r4, #16, #8
 2104              	.LVL161:
 714:src/menu.c    **** 	*p++ = c;
 2105              		.loc 1 714 7 is_stmt 1 view .LVU601
 714:src/menu.c    **** 	*p++ = c;
 2106              		.loc 1 714 10 is_stmt 0 view .LVU602
 2107 00ae 24D1     		bne	.L231
 2108              	.LVL162:
 2109              	.L196:
 712:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2110              		.loc 1 712 9 view .LVU603
 2111 00b0 0137     		adds	r7, r7, #1
 2112              	.LVL163:
 2113              	.L198:
 720:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2114              		.loc 1 720 7 is_stmt 1 view .LVU604
 720:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2115              		.loc 1 720 10 is_stmt 0 view .LVU605
 2116 00b2 0023     		movs	r3, #0
 2117 00b4 3B70     		strb	r3, [r7]
 721:src/menu.c    **** 	finished = 1;
 2118              		.loc 1 721 7 is_stmt 1 view .LVU606
 722:src/menu.c    ****       }
 2119              		.loc 1 722 11 is_stmt 0 view .LVU607
 2120 00b6 4FF00108 		mov	r8, #1
 2121 00ba E2E7     		b	.L192
 2122              	.LVL164:
 2123              	.L230:
 727:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2124              		.loc 1 727 2 is_stmt 1 view .LVU608
 2125 00bc A0B2     		uxth	r0, r4
 2126              	.LVL165:
 727:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2127              		.loc 1 727 5 is_stmt 0 view .LVU609
 2128 00be 72B1     		cbz	r2, .L200
 727:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2129              		.loc 1 727 6 discriminator 1 view .LVU610
 2130 00c0 B2F5704F 		cmp	r2, #61440
 2131 00c4 0BD0     		beq	.L200
 2132              	.LBB116:
 728:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2133              		.loc 1 728 4 is_stmt 1 view .LVU611
 728:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2134              		.loc 1 728 26 is_stmt 0 view .LVU612
 2135 00c6 1B0A     		lsrs	r3, r3, #8
ARM GAS  /tmp/ccuwCXMe.s 			page 60


 2136              	.LVL166:
 728:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2137              		.loc 1 728 26 view .LVU613
 2138 00c8 203B     		subs	r3, r3, #32
 2139 00ca DBB2     		uxtb	r3, r3
 2140              	.LVL167:
 729:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2141              		.loc 1 729 4 is_stmt 1 view .LVU614
 729:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2142              		.loc 1 729 7 is_stmt 0 view .LVU615
 2143 00cc 242B     		cmp	r3, #36
 2144 00ce 06D0     		beq	.L200
 729:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2145              		.loc 1 729 28 discriminator 1 view .LVU616
 2146 00d0 6C2B     		cmp	r3, #108
 2147 00d2 04D0     		beq	.L200
 730:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 2148              		.loc 1 730 9 view .LVU617
 2149 00d4 012B     		cmp	r3, #1
 2150 00d6 02D9     		bls	.L200
 731:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2151              		.loc 1 731 9 view .LVU618
 2152 00d8 10F0FF0F 		tst	r0, #255
 2153 00dc 4BD0     		beq	.L232
 2154              	.LVL168:
 2155              	.L200:
 731:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2156              		.loc 1 731 9 view .LVU619
 2157              	.LBE116:
 739:src/menu.c    **** 	}
 2158              		.loc 1 739 4 is_stmt 1 view .LVU620
 2159 00de 3146     		mov	r1, r6
 2160 00e0 2046     		mov	r0, r4
 2161 00e2 FFF7FEFF 		bl	prt_umen
 2162              	.LVL169:
 2163 00e6 C4E7     		b	.L199
 2164              	.LVL170:
 2165              	.L228:
 693:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2166              		.loc 1 693 7 view .LVU621
 693:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2167              		.loc 1 693 10 is_stmt 0 view .LVU622
 2168 00e8 BBF1040F 		cmp	fp, #4
 2169 00ec 28D0     		beq	.L233
 697:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2170              		.loc 1 697 12 is_stmt 1 view .LVU623
 697:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2171              		.loc 1 697 15 is_stmt 0 view .LVU624
 2172 00ee BBF1050F 		cmp	fp, #5
 2173 00f2 32D0     		beq	.L234
 2174              	.LVL171:
 2175              	.L191:
 701:src/menu.c    ****       continue;
 2176              		.loc 1 701 7 is_stmt 1 view .LVU625
 701:src/menu.c    ****       continue;
 2177              		.loc 1 701 9 is_stmt 0 view .LVU626
 2178 00f4 0BF1010B 		add	fp, fp, #1
ARM GAS  /tmp/ccuwCXMe.s 			page 61


 2179              	.LVL172:
 702:src/menu.c    ****     }
 2180              		.loc 1 702 7 is_stmt 1 view .LVU627
 2181 00f8 C3E7     		b	.L192
 2182              	.LVL173:
 2183              	.L231:
 715:src/menu.c    **** 	c = opc>>24;
 2184              		.loc 1 715 2 view .LVU628
 715:src/menu.c    **** 	c = opc>>24;
 2185              		.loc 1 715 7 is_stmt 0 view .LVU629
 2186 00fa 7B70     		strb	r3, [r7, #1]
 716:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2187              		.loc 1 716 2 is_stmt 1 view .LVU630
 717:src/menu.c    **** 	  *p++ = c;
 2188              		.loc 1 717 5 is_stmt 0 view .LVU631
 2189 00fc 230E     		lsrs	r3, r4, #24
 2190              	.LVL174:
 716:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2191              		.loc 1 716 4 view .LVU632
 2192 00fe 4FEA1461 		lsr	r1, r4, #24
 2193              	.LVL175:
 717:src/menu.c    **** 	  *p++ = c;
 2194              		.loc 1 717 2 is_stmt 1 view .LVU633
 717:src/menu.c    **** 	  *p++ = c;
 2195              		.loc 1 717 5 is_stmt 0 view .LVU634
 2196 0102 36D0     		beq	.L235
 718:src/menu.c    ****       }
 2197              		.loc 1 718 4 is_stmt 1 view .LVU635
 718:src/menu.c    ****       }
 2198              		.loc 1 718 6 is_stmt 0 view .LVU636
 2199 0104 FB1C     		adds	r3, r7, #3
 2200              	.LVL176:
 721:src/menu.c    **** 	finished = 1;
 2201              		.loc 1 721 26 view .LVU637
 2202 0106 A3EB0608 		sub	r8, r3, r6
 721:src/menu.c    **** 	finished = 1;
 2203              		.loc 1 721 21 view .LVU638
 2204 010a A8F10608 		sub	r8, r8, #6
 720:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2205              		.loc 1 720 10 view .LVU639
 2206 010e 0022     		movs	r2, #0
 721:src/menu.c    **** 	finished = 1;
 2207              		.loc 1 721 21 view .LVU640
 2208 0110 B8FA88F8 		clz	r8, r8
 718:src/menu.c    ****       }
 2209              		.loc 1 718 9 view .LVU641
 2210 0114 B970     		strb	r1, [r7, #2]
 720:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2211              		.loc 1 720 7 is_stmt 1 view .LVU642
 720:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2212              		.loc 1 720 10 is_stmt 0 view .LVU643
 2213 0116 FA70     		strb	r2, [r7, #3]
 721:src/menu.c    **** 	finished = 1;
 2214              		.loc 1 721 7 is_stmt 1 view .LVU644
 721:src/menu.c    **** 	finished = 1;
 2215              		.loc 1 721 21 is_stmt 0 view .LVU645
 2216 0118 4FEA5818 		lsr	r8, r8, #5
ARM GAS  /tmp/ccuwCXMe.s 			page 62


 718:src/menu.c    ****       }
 2217              		.loc 1 718 6 view .LVU646
 2218 011c 1F46     		mov	r7, r3
 2219 011e B0E7     		b	.L192
 2220              	.LVL177:
 2221              	.L194:
 707:src/menu.c    **** 	i++;
 2222              		.loc 1 707 2 is_stmt 1 view .LVU647
 2223 0120 5846     		mov	r0, fp
 2224              	.LVL178:
 707:src/menu.c    **** 	i++;
 2225              		.loc 1 707 2 is_stmt 0 view .LVU648
 2226 0122 3246     		mov	r2, r6
 2227 0124 4FF48071 		mov	r1, #256
 709:src/menu.c    **** 	finished = 0;
 2228              		.loc 1 709 8 view .LVU649
 2229 0128 3746     		mov	r7, r6
 2230              	.LVL179:
 707:src/menu.c    **** 	i++;
 2231              		.loc 1 707 2 view .LVU650
 2232 012a FFF7FEFF 		bl	umen_store
 2233              	.LVL180:
 708:src/menu.c    ****     	p = buf1;
 2234              		.loc 1 708 2 is_stmt 1 view .LVU651
 714:src/menu.c    **** 	*p++ = c;
 2235              		.loc 1 714 10 is_stmt 0 view .LVU652
 2236 012e 14F47F0F 		tst	r4, #16711680
 708:src/menu.c    ****     	p = buf1;
 2237              		.loc 1 708 3 view .LVU653
 2238 0132 0BF1010B 		add	fp, fp, #1
 2239              	.LVL181:
 709:src/menu.c    **** 	finished = 0;
 2240              		.loc 1 709 6 is_stmt 1 view .LVU654
 710:src/menu.c    ****       } // ..and start reading the new alpha
 2241              		.loc 1 710 2 view .LVU655
 712:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2242              		.loc 1 712 7 view .LVU656
 712:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2243              		.loc 1 712 12 is_stmt 0 view .LVU657
 2244 0136 3C70     		strb	r4, [r7]
 713:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2245              		.loc 1 713 7 is_stmt 1 view .LVU658
 713:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2246              		.loc 1 713 9 is_stmt 0 view .LVU659
 2247 0138 C4F30743 		ubfx	r3, r4, #16, #8
 2248              	.LVL182:
 714:src/menu.c    **** 	*p++ = c;
 2249              		.loc 1 714 7 is_stmt 1 view .LVU660
 714:src/menu.c    **** 	*p++ = c;
 2250              		.loc 1 714 10 is_stmt 0 view .LVU661
 2251 013c B8D0     		beq	.L196
 2252              	.LVL183:
 714:src/menu.c    **** 	*p++ = c;
 2253              		.loc 1 714 10 view .LVU662
 2254 013e DCE7     		b	.L231
 2255              	.LVL184:
 2256              	.L233:
ARM GAS  /tmp/ccuwCXMe.s 			page 63


 2257              	.LBB117:
 694:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2258              		.loc 1 694 2 is_stmt 1 view .LVU663
 694:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2259              		.loc 1 694 29 is_stmt 0 view .LVU664
 2260 0140 104B     		ldr	r3, .L236+4
 2261              	.LVL185:
 695:src/menu.c    ****       }
 2262              		.loc 1 695 2 view .LVU665
 2263 0142 114C     		ldr	r4, .L236+8
 694:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2264              		.loc 1 694 29 view .LVU666
 2265 0144 93E80300 		ldm	r3, {r0, r1}
 2266              	.LVL186:
 694:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2267              		.loc 1 694 29 view .LVU667
 2268 0148 104B     		ldr	r3, .L236+12
 695:src/menu.c    ****       }
 2269              		.loc 1 695 2 view .LVU668
 2270 014a 0522     		movs	r2, #5
 694:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2271              		.loc 1 694 29 view .LVU669
 2272 014c 83E80300 		stm	r3, {r0, r1}
 695:src/menu.c    ****       }
 2273              		.loc 1 695 2 is_stmt 1 view .LVU670
 2274 0150 2168     		ldr	r1, [r4]
 2275 0152 5046     		mov	r0, r10
 2276 0154 FFF7FEFF 		bl	strncpy
 2277              	.LVL187:
 2278              	.LBE117:
 2279 0158 CCE7     		b	.L191
 2280              	.LVL188:
 2281              	.L234:
 2282              	.LBB118:
 698:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2283              		.loc 1 698 2 view .LVU671
 698:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2284              		.loc 1 698 29 is_stmt 0 view .LVU672
 2285 015a 0D4B     		ldr	r3, .L236+16
 2286              	.LVL189:
 698:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2287              		.loc 1 698 29 view .LVU673
 2288 015c 93E80300 		ldm	r3, {r0, r1}
 2289              	.LVL190:
 699:src/menu.c    ****       }
 2290              		.loc 1 699 2 view .LVU674
 2291 0160 0C4B     		ldr	r3, .L236+20
 698:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2292              		.loc 1 698 29 view .LVU675
 2293 0162 89E80300 		stm	r9, {r0, r1}
 699:src/menu.c    ****       }
 2294              		.loc 1 699 2 is_stmt 1 view .LVU676
 2295 0166 5A46     		mov	r2, fp
 2296 0168 1968     		ldr	r1, [r3]
 2297 016a 0B48     		ldr	r0, .L236+24
 2298 016c FFF7FEFF 		bl	strncpy
 2299              	.LVL191:
ARM GAS  /tmp/ccuwCXMe.s 			page 64


 2300 0170 C0E7     		b	.L191
 2301              	.LVL192:
 2302              	.L235:
 699:src/menu.c    ****       }
 2303              		.loc 1 699 2 is_stmt 0 view .LVU677
 2304              	.LBE118:
 715:src/menu.c    **** 	c = opc>>24;
 2305              		.loc 1 715 4 view .LVU678
 2306 0172 0237     		adds	r7, r7, #2
 2307              	.LVL193:
 715:src/menu.c    **** 	c = opc>>24;
 2308              		.loc 1 715 4 view .LVU679
 2309 0174 9DE7     		b	.L198
 2310              	.LVL194:
 2311              	.L232:
 2312              	.LBB119:
 732:src/menu.c    **** 	  }
 2313              		.loc 1 732 6 is_stmt 1 view .LVU680
 2314 0176 3146     		mov	r1, r6
 2315 0178 FFF7FEFF 		bl	catcmd
 2316              	.LVL195:
 732:src/menu.c    **** 	  }
 2317              		.loc 1 732 6 is_stmt 0 view .LVU681
 2318 017c 79E7     		b	.L199
 2319              	.L237:
 2320 017e 00BF     		.align	2
 2321              	.L236:
 2322 0180 00000000 		.word	.LANCHOR4
 2323 0184 00000000 		.word	.LANCHOR5
 2324 0188 00000000 		.word	.LANCHOR6
 2325 018c 90000000 		.word	.LANCHOR4+144
 2326 0190 08000000 		.word	.LANCHOR5+8
 2327 0194 00000000 		.word	.LANCHOR7
 2328 0198 C0000000 		.word	.LANCHOR4+192
 2329 019c B0000000 		.word	.LANCHOR4+176
 2330              	.LBE119:
 2331              		.cfi_endproc
 2332              	.LFE19:
 2334              		.section	.text.build_user_menu,"ax",%progbits
 2335              		.align	1
 2336              		.p2align 2,,3
 2337              		.global	build_user_menu
 2338              		.syntax unified
 2339              		.thumb
 2340              		.thumb_func
 2341              		.fpu fpv4-sp-d16
 2343              	build_user_menu:
 2344              	.LFB18:
 657:src/menu.c    ****   // find the label 'MNU'
 2345              		.loc 1 657 27 is_stmt 1 view -0
 2346              		.cfi_startproc
 2347              		@ args = 0, pretend = 0, frame = 0
 2348              		@ frame_needed = 0, uses_anonymous_args = 0
 2349              		@ link register save eliminated.
 659:src/menu.c    ****    build_user_menu_from_program (lbl);
 2350              		.loc 1 659 4 view .LVU683
 2351              	.LVL196:
ARM GAS  /tmp/ccuwCXMe.s 			page 65


 660:src/menu.c    **** }
 2352              		.loc 1 660 4 view .LVU684
 2353 0000 0148     		ldr	r0, .L239
 2354 0002 FFF7FEBF 		b	build_user_menu_from_program
 2355              	.LVL197:
 2356              	.L240:
 2357 0006 00BF     		.align	2
 2358              	.L239:
 2359 0008 4DF04E55 		.word	1431236685
 2360              		.cfi_endproc
 2361              	.LFE18:
 2363              		.section	.text.shutdown,"ax",%progbits
 2364              		.align	1
 2365              		.p2align 2,,3
 2366              		.global	shutdown
 2367              		.syntax unified
 2368              		.thumb
 2369              		.thumb_func
 2370              		.fpu fpv4-sp-d16
 2372              	shutdown:
 2373              	.LFB22:
 2374              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
ARM GAS  /tmp/ccuwCXMe.s 			page 66


  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #ifdef INCLUDE_STOPWATCH
  39:src/console.c **** #include "stopwatch.h"
  40:src/console.c **** #endif
  41:src/console.c **** #undef DM42SAFE
  42:src/console.c **** 
  43:src/console.c **** 
  44:src/console.c **** #ifdef DM42
  45:src/console.c **** 
  46:src/console.c **** #include <menu.c>
  47:src/console.c **** 
  48:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  49:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  50:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  51:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  52:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  53:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  54:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  55:src/console.c **** 
  56:src/console.c **** static struct _ndmap remap (const int c) {
  57:src/console.c **** 
  58:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  59:src/console.c **** 
  60:src/console.c **** #include "keytran.c"
  61:src/console.c **** 
  62:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  63:src/console.c **** 
  64:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  65:src/console.c **** 
  66:src/console.c ****   if (c == 44 ) {
  67:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  68:src/console.c ****     return sshot;
  69:src/console.c ****   }
  70:src/console.c ****   
  71:src/console.c ****   if (Running | Pause) {
  72:src/console.c ****     return mapping_running[c];
  73:src/console.c ****   }
  74:src/console.c **** 
  75:src/console.c ****   struct _menu Ref = get_current_menu_ref();
  76:src/console.c ****   
  77:src/console.c ****   switch (c) {
  78:src/console.c ****   case KEY_F1:
  79:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[0].unshifted;
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
  81:src/console.c ****   case KEY_F2:
  82:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[1].unshifted;
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
  84:src/console.c ****   case KEY_F3:
  85:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[2].unshifted;
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
  87:src/console.c ****   case KEY_F4:
  88:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[3].unshifted;
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
  90:src/console.c ****   case KEY_F5:
  91:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[4].unshifted;
  92:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
ARM GAS  /tmp/ccuwCXMe.s 			page 67


  93:src/console.c ****   case KEY_F6:
  94:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[5].unshifted;
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
  96:src/console.c ****   }
  97:src/console.c **** 
  98:src/console.c ****   if ( get_alpha_state() ) {
  99:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 100:src/console.c ****       switch (cur_shift()) { 
 101:src/console.c ****       case SHIFT_N:
 102:src/console.c **** 	return mapping_none[c]; // N -> F
 103:src/console.c **** 	break;
 104:src/console.c ****       case SHIFT_F:
 105:src/console.c **** 	return mapping_fshift[c]; // F -> G
 106:src/console.c **** 	break;
 107:src/console.c ****       case SHIFT_G:
 108:src/console.c **** 	return h_shift; // G -> H
 109:src/console.c **** 	break;
 110:src/console.c ****       case SHIFT_H:
 111:src/console.c **** 	return h_shift; // H -> N
 112:src/console.c ****       default:
 113:src/console.c **** 	return no_change;
 114:src/console.c ****       }
 115:src/console.c ****     }
 116:src/console.c ****     return mapping_alpha [c];
 117:src/console.c ****   }
 118:src/console.c **** 
 119:src/console.c ****   switch (cur_shift()) {
 120:src/console.c ****   case SHIFT_N:    
 121:src/console.c ****     return mapping_none[c];
 122:src/console.c ****     break;
 123:src/console.c ****   case SHIFT_F:
 124:src/console.c ****     return mapping_fshift[c];
 125:src/console.c ****     break;
 126:src/console.c ****   case SHIFT_G:
 127:src/console.c ****     return mapping_gshift[c];
 128:src/console.c ****     break;
 129:src/console.c ****   default:
 130:src/console.c ****     return no_change;
 131:src/console.c ****   }
 132:src/console.c **** }
 133:src/console.c **** 
 134:src/console.c **** #endif
 135:src/console.c **** 
 136:src/console.c **** void shutdown( void )
 137:src/console.c **** {
 2375              		.loc 2 137 1 view -0
 2376              		.cfi_startproc
 2377              		@ args = 0, pretend = 0, frame = 0
 2378              		@ frame_needed = 0, uses_anonymous_args = 0
 2379              		@ link register save eliminated.
 138:src/console.c **** #ifndef DM42
 139:src/console.c ****   checksum_all();
 140:src/console.c ****   setuptty( 1 );
 141:src/console.c ****   save_statefile( NULL );
 142:src/console.c ****   exit( 0 );
 143:src/console.c **** #else
 144:src/console.c ****   //  save_ram_file(0);
ARM GAS  /tmp/ccuwCXMe.s 			page 68


 145:src/console.c ****   SET_ST(STAT_PGM_END);
 2380              		.loc 2 145 3 view .LVU686
 2381 0000 024A     		ldr	r2, .L242
 2382 0002 1368     		ldr	r3, [r2]
 2383 0004 43F40073 		orr	r3, r3, #512
 2384 0008 1360     		str	r3, [r2]
 146:src/console.c **** #endif
 147:src/console.c **** }
 2385              		.loc 2 147 1 is_stmt 0 view .LVU687
 2386 000a 7047     		bx	lr
 2387              	.L243:
 2388              		.align	2
 2389              	.L242:
 2390 000c 00200010 		.word	268443648
 2391              		.cfi_endproc
 2392              	.LFE22:
 2394              		.section	.text.is_key_pressed,"ax",%progbits
 2395              		.align	1
 2396              		.p2align 2,,3
 2397              		.global	is_key_pressed
 2398              		.syntax unified
 2399              		.thumb
 2400              		.thumb_func
 2401              		.fpu fpv4-sp-d16
 2403              	is_key_pressed:
 2404              	.LFB23:
 148:src/console.c **** 
 149:src/console.c **** 
 150:src/console.c **** /*
 151:src/console.c ****  *  Dummies
 152:src/console.c ****  */
 153:src/console.c **** int is_key_pressed(void) 
 154:src/console.c **** {
 2405              		.loc 2 154 1 is_stmt 1 view -0
 2406              		.cfi_startproc
 2407              		@ args = 0, pretend = 0, frame = 0
 2408              		@ frame_needed = 0, uses_anonymous_args = 0
 155:src/console.c **** #ifdef DM42
 156:src/console.c ****   return !key_empty();
 2409              		.loc 2 156 3 view .LVU689
 154:src/console.c **** #ifdef DM42
 2410              		.loc 2 154 1 is_stmt 0 view .LVU690
 2411 0000 08B5     		push	{r3, lr}
 2412              		.cfi_def_cfa_offset 8
 2413              		.cfi_offset 3, -8
 2414              		.cfi_offset 14, -4
 2415              		.loc 2 156 11 view .LVU691
 2416 0002 034B     		ldr	r3, .L246
 2417 0004 9847     		blx	r3
 2418              	.LVL198:
 157:src/console.c **** #else
 158:src/console.c ****   return 0;
 159:src/console.c **** #endif
 160:src/console.c **** }
 2419              		.loc 2 160 1 view .LVU692
 2420 0006 B0FA80F0 		clz	r0, r0
 2421 000a 4009     		lsrs	r0, r0, #5
ARM GAS  /tmp/ccuwCXMe.s 			page 69


 2422 000c 08BD     		pop	{r3, pc}
 2423              	.L247:
 2424 000e 00BF     		.align	2
 2425              	.L246:
 2426 0010 7D030008 		.word	134218621
 2427              		.cfi_endproc
 2428              	.LFE23:
 2430              		.section	.text.get_key,"ax",%progbits
 2431              		.align	1
 2432              		.p2align 2,,3
 2433              		.global	get_key
 2434              		.syntax unified
 2435              		.thumb
 2436              		.thumb_func
 2437              		.fpu fpv4-sp-d16
 2439              	get_key:
 2440              	.LFB24:
 161:src/console.c **** 
 162:src/console.c **** int get_key(void)
 163:src/console.c **** {
 2441              		.loc 2 163 1 is_stmt 1 view -0
 2442              		.cfi_startproc
 2443              		@ args = 0, pretend = 0, frame = 0
 2444              		@ frame_needed = 0, uses_anonymous_args = 0
 2445              		@ link register save eliminated.
 164:src/console.c ****   #ifdef DM42
 165:src/console.c ****   return key_pop();
 2446              		.loc 2 165 3 view .LVU694
 2447              		.loc 2 165 10 is_stmt 0 view .LVU695
 2448 0000 004B     		ldr	r3, .L249
 2449 0002 1847     		bx	r3
 2450              	.LVL199:
 2451              	.L250:
 2452              		.align	2
 2453              	.L249:
 2454 0004 89030008 		.word	134218633
 2455              		.cfi_endproc
 2456              	.LFE24:
 2458              		.section	.text.put_key,"ax",%progbits
 2459              		.align	1
 2460              		.p2align 2,,3
 2461              		.global	put_key
 2462              		.syntax unified
 2463              		.thumb
 2464              		.thumb_func
 2465              		.fpu fpv4-sp-d16
 2467              	put_key:
 2468              	.LVL200:
 2469              	.LFB25:
 166:src/console.c ****   #else
 167:src/console.c ****   return 0;
 168:src/console.c ****   #endif
 169:src/console.c **** }
 170:src/console.c **** 
 171:src/console.c **** /*
 172:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 173:src/console.c ****  * 
ARM GAS  /tmp/ccuwCXMe.s 			page 70


 174:src/console.c ****  */
 175:src/console.c **** int put_key( int k )
 176:src/console.c **** {
 2470              		.loc 2 176 1 is_stmt 1 view -0
 2471              		.cfi_startproc
 2472              		@ args = 0, pretend = 0, frame = 48
 2473              		@ frame_needed = 0, uses_anonymous_args = 0
 2474              		@ link register save eliminated.
 177:src/console.c ****   #ifdef DM42
 178:src/console.c ****   const char wp34s_to_DM42[] = {
 2475              		.loc 2 178 3 view .LVU697
 176:src/console.c ****   #ifdef DM42
 2476              		.loc 2 176 1 is_stmt 0 view .LVU698
 2477 0000 70B4     		push	{r4, r5, r6}
 2478              		.cfi_def_cfa_offset 12
 2479              		.cfi_offset 4, -12
 2480              		.cfi_offset 5, -8
 2481              		.cfi_offset 6, -4
 2482              		.loc 2 178 14 view .LVU699
 2483 0002 0E4D     		ldr	r5, .L254
 176:src/console.c ****   #ifdef DM42
 2484              		.loc 2 176 1 view .LVU700
 2485 0004 0646     		mov	r6, r0
 2486              		.loc 2 178 14 view .LVU701
 2487 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2488              	.LVL201:
 176:src/console.c ****   #ifdef DM42
 2489              		.loc 2 176 1 view .LVU702
 2490 0008 8DB0     		sub	sp, sp, #52
 2491              		.cfi_def_cfa_offset 64
 2492              		.loc 2 178 14 view .LVU703
 2493 000a 01AC     		add	r4, sp, #4
 2494 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2495 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2496 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2497 0012 95E80700 		ldm	r5, {r0, r1, r2}
 2498 0016 03C4     		stmia	r4!, {r0, r1}
 179:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 180:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 181:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 182:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 183:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 184:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 185:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 186:src/console.c ****   
 187:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 2499              		.loc 2 187 6 view .LVU704
 2500 0018 282E     		cmp	r6, #40
 178:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 2501              		.loc 2 178 14 view .LVU705
 2502 001a 2270     		strb	r2, [r4]
 2503              		.loc 2 187 3 is_stmt 1 view .LVU706
 2504              		.loc 2 187 6 is_stmt 0 view .LVU707
 2505 001c 08D8     		bhi	.L252
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2506              		.loc 2 188 5 is_stmt 1 view .LVU708
 2507              		.loc 2 188 36 is_stmt 0 view .LVU709
ARM GAS  /tmp/ccuwCXMe.s 			page 71


 2508 001e 0CAB     		add	r3, sp, #48
 2509 0020 3046     		mov	r0, r6
 2510 0022 1844     		add	r0, r0, r3
 2511              		.loc 2 188 12 view .LVU710
 2512 0024 064B     		ldr	r3, .L254+4
 2513 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 189:src/console.c ****   }
 190:src/console.c ****   else {
 191:src/console.c ****     return -1;
 192:src/console.c ****   }
 193:src/console.c ****   #else
 194:src/console.c ****   return k;
 195:src/console.c ****   #endif
 196:src/console.c **** }
 2514              		.loc 2 196 1 view .LVU711
 2515 002a 0DB0     		add	sp, sp, #52
 2516              		.cfi_remember_state
 2517              		.cfi_def_cfa_offset 12
 2518              		@ sp needed
 2519 002c 70BC     		pop	{r4, r5, r6}
 2520              		.cfi_restore 6
 2521              		.cfi_restore 5
 2522              		.cfi_restore 4
 2523              		.cfi_def_cfa_offset 0
 2524              	.LVL202:
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2525              		.loc 2 188 12 view .LVU712
 2526 002e 1847     		bx	r3
 2527              	.LVL203:
 2528              	.L252:
 2529              		.cfi_restore_state
 2530              		.loc 2 196 1 view .LVU713
 2531 0030 4FF0FF30 		mov	r0, #-1
 2532 0034 0DB0     		add	sp, sp, #52
 2533              		.cfi_def_cfa_offset 12
 2534              		@ sp needed
 2535 0036 70BC     		pop	{r4, r5, r6}
 2536              		.cfi_restore 6
 2537              		.cfi_restore 5
 2538              		.cfi_restore 4
 2539              		.cfi_def_cfa_offset 0
 2540              	.LVL204:
 2541              		.loc 2 196 1 view .LVU714
 2542 0038 7047     		bx	lr
 2543              	.L255:
 2544 003a 00BF     		.align	2
 2545              	.L254:
 2546 003c 10000000 		.word	.LANCHOR5+16
 2547 0040 81030008 		.word	134218625
 2548              		.cfi_endproc
 2549              	.LFE25:
 2551              		.section	.text.shift_down,"ax",%progbits
 2552              		.align	1
 2553              		.p2align 2,,3
 2554              		.global	shift_down
 2555              		.syntax unified
 2556              		.thumb
ARM GAS  /tmp/ccuwCXMe.s 			page 72


 2557              		.thumb_func
 2558              		.fpu fpv4-sp-d16
 2560              	shift_down:
 2561              	.LFB26:
 197:src/console.c **** 
 198:src/console.c **** enum shifts shift_down(void)
 199:src/console.c **** {
 2562              		.loc 2 199 1 is_stmt 1 view -0
 2563              		.cfi_startproc
 2564              		@ args = 0, pretend = 0, frame = 0
 2565              		@ frame_needed = 0, uses_anonymous_args = 0
 2566              		@ link register save eliminated.
 200:src/console.c **** 	return SHIFT_N;
 2567              		.loc 2 200 2 view .LVU716
 201:src/console.c **** }
 2568              		.loc 2 201 1 is_stmt 0 view .LVU717
 2569 0000 0020     		movs	r0, #0
 2570 0002 7047     		bx	lr
 2571              		.cfi_endproc
 2572              	.LFE26:
 2574              		.section	.text.start_key_timer,"ax",%progbits
 2575              		.align	1
 2576              		.p2align 2,,3
 2577              		.global	start_key_timer
 2578              		.syntax unified
 2579              		.thumb
 2580              		.thumb_func
 2581              		.fpu fpv4-sp-d16
 2583              	start_key_timer:
 2584              	.LFB27:
 202:src/console.c **** 
 203:src/console.c **** #ifndef DM42   // No serial operations for DM42
 204:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 205:src/console.c **** /*
 206:src/console.c ****  *  Open a COM port for transmission
 207:src/console.c ****  */
 208:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 209:src/console.c **** {
 210:src/console.c **** 	return 0;
 211:src/console.c **** }
 212:src/console.c **** 
 213:src/console.c **** 
 214:src/console.c **** /*
 215:src/console.c ****  *  Close the COM port after transmission is complete
 216:src/console.c ****  */
 217:src/console.c **** extern void close_port( void )
 218:src/console.c **** {
 219:src/console.c **** }
 220:src/console.c **** 
 221:src/console.c **** 
 222:src/console.c **** /*
 223:src/console.c ****  *  Output a single byte to the serial
 224:src/console.c ****  */
 225:src/console.c **** void put_byte( unsigned char byte )
 226:src/console.c **** {
 227:src/console.c **** 	report_err(ERR_PROG_BAD);
 228:src/console.c **** }
ARM GAS  /tmp/ccuwCXMe.s 			page 73


 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Force buffer flush
 233:src/console.c ****  */
 234:src/console.c **** void flush_comm( void )
 235:src/console.c **** {
 236:src/console.c **** }
 237:src/console.c **** 
 238:src/console.c **** #endif
 239:src/console.c **** #endif
 240:src/console.c **** 
 241:src/console.c **** 
 242:src/console.c **** /*
 243:src/console.c ****  *  Main loop
 244:src/console.c ****  */
 245:src/console.c **** #ifdef DM42
 246:src/console.c **** void start_key_timer (void);
 247:src/console.c **** long int keyticks (void);
 248:src/console.c **** void moveto (int line, int x);
 249:src/console.c **** 
 250:src/console.c **** static long int start_ticks;
 251:src/console.c **** 
 252:src/console.c **** void start_key_timer() {
 2585              		.loc 2 252 24 is_stmt 1 view -0
 2586              		.cfi_startproc
 2587              		@ args = 0, pretend = 0, frame = 0
 2588              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/console.c ****     start_ticks = get_rtc_ticks();
 2589              		.loc 2 253 5 view .LVU719
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 2590              		.loc 2 252 24 is_stmt 0 view .LVU720
 2591 0000 08B5     		push	{r3, lr}
 2592              		.cfi_def_cfa_offset 8
 2593              		.cfi_offset 3, -8
 2594              		.cfi_offset 14, -4
 2595              		.loc 2 253 19 view .LVU721
 2596 0002 024B     		ldr	r3, .L259
 2597 0004 9847     		blx	r3
 2598              	.LVL205:
 2599              		.loc 2 253 17 view .LVU722
 2600 0006 024B     		ldr	r3, .L259+4
 2601 0008 1860     		str	r0, [r3]
 254:src/console.c **** }
 2602              		.loc 2 254 1 view .LVU723
 2603 000a 08BD     		pop	{r3, pc}
 2604              	.L260:
 2605              		.align	2
 2606              	.L259:
 2607 000c B9040008 		.word	134218937
 2608 0010 00000000 		.word	.LANCHOR8
 2609              		.cfi_endproc
 2610              	.LFE27:
 2612              		.section	.text.keyticks,"ax",%progbits
 2613              		.align	1
 2614              		.p2align 2,,3
 2615              		.global	keyticks
ARM GAS  /tmp/ccuwCXMe.s 			page 74


 2616              		.syntax unified
 2617              		.thumb
 2618              		.thumb_func
 2619              		.fpu fpv4-sp-d16
 2621              	keyticks:
 2622              	.LFB28:
 255:src/console.c **** 
 256:src/console.c **** long int keyticks () {
 2623              		.loc 2 256 22 is_stmt 1 view -0
 2624              		.cfi_startproc
 2625              		@ args = 0, pretend = 0, frame = 0
 2626              		@ frame_needed = 0, uses_anonymous_args = 0
 257:src/console.c ****   long int i;
 2627              		.loc 2 257 3 view .LVU725
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2628              		.loc 2 258 3 view .LVU726
 256:src/console.c ****   long int i;
 2629              		.loc 2 256 22 is_stmt 0 view .LVU727
 2630 0000 08B5     		push	{r3, lr}
 2631              		.cfi_def_cfa_offset 8
 2632              		.cfi_offset 3, -8
 2633              		.cfi_offset 14, -4
 2634              		.loc 2 258 8 view .LVU728
 2635 0002 054B     		ldr	r3, .L263
 2636 0004 9847     		blx	r3
 2637              	.LVL206:
 259:src/console.c ****   return i >> 8;
 2638              		.loc 2 259 3 is_stmt 1 view .LVU729
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2639              		.loc 2 258 24 is_stmt 0 view .LVU730
 2640 0006 054B     		ldr	r3, .L263+4
 2641 0008 1B68     		ldr	r3, [r3]
 2642 000a C01A     		subs	r0, r0, r3
 2643              	.LVL207:
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2644              		.loc 2 258 38 view .LVU731
 2645 000c 00EB8000 		add	r0, r0, r0, lsl #2
 260:src/console.c **** }
 2646              		.loc 2 260 1 view .LVU732
 2647 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2648 0014 08BD     		pop	{r3, pc}
 2649              	.L264:
 2650 0016 00BF     		.align	2
 2651              	.L263:
 2652 0018 B9040008 		.word	134218937
 2653 001c 00000000 		.word	.LANCHOR8
 2654              		.cfi_endproc
 2655              	.LFE28:
 2657              		.section	.text.moveto,"ax",%progbits
 2658              		.align	1
 2659              		.p2align 2,,3
 2660              		.global	moveto
 2661              		.syntax unified
 2662              		.thumb
 2663              		.thumb_func
 2664              		.fpu fpv4-sp-d16
 2666              	moveto:
ARM GAS  /tmp/ccuwCXMe.s 			page 75


 2667              	.LVL208:
 2668              	.LFB29:
 261:src/console.c **** 
 262:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 263:src/console.c **** char print_string[22];
 264:src/console.c **** int n_p = 0;
 265:src/console.c **** 
 266:src/console.c **** 
 267:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2669              		.loc 2 267 30 is_stmt 1 view -0
 2670              		.cfi_startproc
 2671              		@ args = 0, pretend = 0, frame = 0
 2672              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2673              		.loc 2 268 3 view .LVU734
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2674              		.loc 2 267 30 is_stmt 0 view .LVU735
 2675 0000 70B5     		push	{r4, r5, r6, lr}
 2676              		.cfi_def_cfa_offset 16
 2677              		.cfi_offset 4, -16
 2678              		.cfi_offset 5, -12
 2679              		.cfi_offset 6, -8
 2680              		.cfi_offset 14, -4
 2681              		.loc 2 268 3 view .LVU736
 2682 0002 0A4D     		ldr	r5, .L267
 2683 0004 0A4B     		ldr	r3, .L267+4
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2684              		.loc 2 267 30 view .LVU737
 2685 0006 0246     		mov	r2, r0
 2686 0008 0C46     		mov	r4, r1
 2687              		.loc 2 268 3 view .LVU738
 2688 000a A86B     		ldr	r0, [r5, #56]
 2689              	.LVL209:
 2690              		.loc 2 268 3 view .LVU739
 2691 000c 511E     		subs	r1, r2, #1
 2692              	.LVL210:
 2693              		.loc 2 268 3 view .LVU740
 2694 000e 9847     		blx	r3
 2695              	.LVL211:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2696              		.loc 2 269 3 is_stmt 1 view .LVU741
 2697 0010 A86B     		ldr	r0, [r5, #56]
 2698 0012 084B     		ldr	r3, .L267+8
 2699              		.loc 2 269 33 is_stmt 0 view .LVU742
 2700 0014 0168     		ldr	r1, [r0]
 2701              		.loc 2 269 3 view .LVU743
 2702 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2703              		.loc 2 269 33 view .LVU744
 2704 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2705              		.loc 2 269 43 view .LVU745
 2706 001c 013C     		subs	r4, r4, #1
 2707              	.LVL212:
 2708              		.loc 2 269 40 view .LVU746
 2709 001e 04FB01F1 		mul	r1, r4, r1
 2710              		.loc 2 269 3 view .LVU747
 2711 0022 1431     		adds	r1, r1, #20
 270:src/console.c **** }
ARM GAS  /tmp/ccuwCXMe.s 			page 76


 2712              		.loc 2 270 1 view .LVU748
 2713 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2714              		.cfi_restore 14
 2715              		.cfi_restore 6
 2716              		.cfi_restore 5
 2717              		.cfi_restore 4
 2718              		.cfi_def_cfa_offset 0
 2719              	.LVL213:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2720              		.loc 2 269 3 view .LVU749
 2721 0028 1847     		bx	r3	@ indirect register sibling call
 2722              	.LVL214:
 2723              	.L268:
 2724 002a 00BF     		.align	2
 2725              	.L267:
 2726 002c 00200010 		.word	268443648
 2727 0030 69020008 		.word	134218345
 2728 0034 6D020008 		.word	134218349
 2729              		.cfi_endproc
 2730              	.LFE29:
 2732              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2733              		.align	2
 2734              	.LC11:
 2735 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2735      673A2025 
 2735      34692C25 
 2735      346900
 2736              		.section	.text.print_debug,"ax",%progbits
 2737              		.align	1
 2738              		.p2align 2,,3
 2739              		.global	print_debug
 2740              		.syntax unified
 2741              		.thumb
 2742              		.thumb_func
 2743              		.fpu fpv4-sp-d16
 2745              	print_debug:
 2746              	.LVL215:
 2747              	.LFB30:
 271:src/console.c **** 
 272:src/console.c **** void print_debug (int i, int j) {
 2748              		.loc 2 272 33 is_stmt 1 view -0
 2749              		.cfi_startproc
 2750              		@ args = 0, pretend = 0, frame = 8
 2751              		@ frame_needed = 0, uses_anonymous_args = 0
 273:src/console.c ****   strcpy( print_string, spaces );
 2752              		.loc 2 273 3 view .LVU751
 272:src/console.c ****   strcpy( print_string, spaces );
 2753              		.loc 2 272 33 is_stmt 0 view .LVU752
 2754 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2755              		.cfi_def_cfa_offset 24
 2756              		.cfi_offset 4, -24
 2757              		.cfi_offset 5, -20
 2758              		.cfi_offset 6, -16
 2759              		.cfi_offset 7, -12
 2760              		.cfi_offset 8, -8
 2761              		.cfi_offset 14, -4
 2762              		.loc 2 273 3 view .LVU753
ARM GAS  /tmp/ccuwCXMe.s 			page 77


 2763 0004 174C     		ldr	r4, .L271
 2764 0006 184F     		ldr	r7, .L271+4
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 275:src/console.c ****   moveto (3, 1);
 276:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2765              		.loc 2 276 3 view .LVU754
 2766 0008 184E     		ldr	r6, .L271+8
 2767 000a 194D     		ldr	r5, .L271+12
 277:src/console.c ****   lcd_refresh();
 2768              		.loc 2 277 3 view .LVU755
 2769 000c DFF86C80 		ldr	r8, .L271+24
 272:src/console.c ****   strcpy( print_string, spaces );
 2770              		.loc 2 272 33 view .LVU756
 2771 0010 82B0     		sub	sp, sp, #8
 2772              		.cfi_def_cfa_offset 32
 272:src/console.c ****   strcpy( print_string, spaces );
 2773              		.loc 2 272 33 view .LVU757
 2774 0012 0190     		str	r0, [sp, #4]
 2775 0014 0091     		str	r1, [sp]
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2776              		.loc 2 273 3 view .LVU758
 2777 0016 2046     		mov	r0, r4
 2778              	.LVL216:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2779              		.loc 2 273 3 view .LVU759
 2780 0018 3946     		mov	r1, r7
 2781              	.LVL217:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2782              		.loc 2 273 3 view .LVU760
 2783 001a FFF7FEFF 		bl	strcpy
 2784              	.LVL218:
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2785              		.loc 2 274 3 is_stmt 1 view .LVU761
 2786 001e DDE90032 		ldrd	r3, r2, [sp]
 2787 0022 1449     		ldr	r1, .L271+16
 2788 0024 2046     		mov	r0, r4
 2789 0026 FFF7FEFF 		bl	sprintf
 2790              	.LVL219:
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2791              		.loc 2 275 3 view .LVU762
 2792 002a 0121     		movs	r1, #1
 2793 002c 0320     		movs	r0, #3
 2794 002e FFF7FEFF 		bl	moveto
 2795              	.LVL220:
 276:src/console.c ****   lcd_refresh();
 2796              		.loc 2 276 3 view .LVU763
 2797 0032 2146     		mov	r1, r4
 2798 0034 B06B     		ldr	r0, [r6, #56]
 2799 0036 A847     		blx	r5
 2800              	.LVL221:
 2801              		.loc 2 277 3 view .LVU764
 2802 0038 C047     		blx	r8
 2803              	.LVL222:
 278:src/console.c ****   sys_delay (1000);
 2804              		.loc 2 278 3 view .LVU765
 2805 003a 0F4B     		ldr	r3, .L271+20
 2806 003c 4FF47A70 		mov	r0, #1000
ARM GAS  /tmp/ccuwCXMe.s 			page 78


 2807 0040 9847     		blx	r3
 2808              	.LVL223:
 279:src/console.c ****   /* wait_for_key_press(); */
 280:src/console.c ****   //  key_pop_all();
 281:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 282:src/console.c ****   // key_pop_all();
 283:src/console.c ****   strcpy( print_string, spaces );
 2809              		.loc 2 283 3 view .LVU766
 2810 0042 3946     		mov	r1, r7
 2811 0044 2046     		mov	r0, r4
 2812 0046 FFF7FEFF 		bl	strcpy
 2813              	.LVL224:
 284:src/console.c ****   moveto (3, 1);
 2814              		.loc 2 284 3 view .LVU767
 2815 004a 0121     		movs	r1, #1
 2816 004c 0320     		movs	r0, #3
 2817 004e FFF7FEFF 		bl	moveto
 2818              	.LVL225:
 285:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2819              		.loc 2 285 3 view .LVU768
 2820 0052 B06B     		ldr	r0, [r6, #56]
 2821 0054 2146     		mov	r1, r4
 2822 0056 A847     		blx	r5
 2823              	.LVL226:
 286:src/console.c ****   lcd_refresh();
 2824              		.loc 2 286 3 view .LVU769
 2825 0058 4346     		mov	r3, r8
 287:src/console.c ****   // while (key_empty()<=0);; // wait for release
 288:src/console.c ****   // key_pop_all();
 289:src/console.c **** }
 2826              		.loc 2 289 1 is_stmt 0 view .LVU770
 2827 005a 02B0     		add	sp, sp, #8
 2828              		.cfi_def_cfa_offset 24
 2829              	.LVL227:
 2830              		.loc 2 289 1 view .LVU771
 2831              		@ sp needed
 2832 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2833              		.cfi_restore 14
 2834              		.cfi_restore 8
 2835              		.cfi_restore 7
 2836              		.cfi_restore 6
 2837              		.cfi_restore 5
 2838              		.cfi_restore 4
 2839              		.cfi_def_cfa_offset 0
 2840              	.LVL228:
 286:src/console.c ****   lcd_refresh();
 2841              		.loc 2 286 3 view .LVU772
 2842 0060 1847     		bx	r3	@ indirect register sibling call
 2843              	.LVL229:
 2844              	.L272:
 2845 0062 00BF     		.align	2
 2846              	.L271:
 2847 0064 00000000 		.word	print_string
 2848 0068 00000000 		.word	.LANCHOR9
 2849 006c 00200010 		.word	268443648
 2850 0070 B1020008 		.word	134218417
 2851 0074 00000000 		.word	.LC11
ARM GAS  /tmp/ccuwCXMe.s 			page 79


 2852 0078 05040008 		.word	134218757
 2853 007c 31020008 		.word	134218289
 2854              		.cfi_endproc
 2855              	.LFE30:
 2857              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2858              		.align	2
 2859              	.LC12:
 2860 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2860      692C2531 
 2860      337300
 2861              		.section	.text.print_debug2,"ax",%progbits
 2862              		.align	1
 2863              		.p2align 2,,3
 2864              		.global	print_debug2
 2865              		.syntax unified
 2866              		.thumb
 2867              		.thumb_func
 2868              		.fpu fpv4-sp-d16
 2870              	print_debug2:
 2871              	.LVL230:
 2872              	.LFB31:
 290:src/console.c **** 
 291:src/console.c **** void print_debug2 (int i, char* j) {
 2873              		.loc 2 291 36 is_stmt 1 view -0
 2874              		.cfi_startproc
 2875              		@ args = 0, pretend = 0, frame = 8
 2876              		@ frame_needed = 0, uses_anonymous_args = 0
 292:src/console.c ****   strcpy( print_string, spaces );
 2877              		.loc 2 292 3 view .LVU774
 291:src/console.c ****   strcpy( print_string, spaces );
 2878              		.loc 2 291 36 is_stmt 0 view .LVU775
 2879 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2880              		.cfi_def_cfa_offset 24
 2881              		.cfi_offset 4, -24
 2882              		.cfi_offset 5, -20
 2883              		.cfi_offset 6, -16
 2884              		.cfi_offset 7, -12
 2885              		.cfi_offset 8, -8
 2886              		.cfi_offset 14, -4
 2887              		.loc 2 292 3 view .LVU776
 2888 0004 174C     		ldr	r4, .L275
 2889 0006 184F     		ldr	r7, .L275+4
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 294:src/console.c ****   moveto (3, 1);
 295:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2890              		.loc 2 295 3 view .LVU777
 2891 0008 184E     		ldr	r6, .L275+8
 2892 000a 194D     		ldr	r5, .L275+12
 296:src/console.c ****   lcd_refresh();
 2893              		.loc 2 296 3 view .LVU778
 2894 000c DFF86C80 		ldr	r8, .L275+24
 291:src/console.c ****   strcpy( print_string, spaces );
 2895              		.loc 2 291 36 view .LVU779
 2896 0010 82B0     		sub	sp, sp, #8
 2897              		.cfi_def_cfa_offset 32
 291:src/console.c ****   strcpy( print_string, spaces );
 2898              		.loc 2 291 36 view .LVU780
ARM GAS  /tmp/ccuwCXMe.s 			page 80


 2899 0012 0190     		str	r0, [sp, #4]
 2900 0014 0091     		str	r1, [sp]
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2901              		.loc 2 292 3 view .LVU781
 2902 0016 2046     		mov	r0, r4
 2903              	.LVL231:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2904              		.loc 2 292 3 view .LVU782
 2905 0018 3946     		mov	r1, r7
 2906              	.LVL232:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2907              		.loc 2 292 3 view .LVU783
 2908 001a FFF7FEFF 		bl	strcpy
 2909              	.LVL233:
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2910              		.loc 2 293 3 is_stmt 1 view .LVU784
 2911 001e DDE90032 		ldrd	r3, r2, [sp]
 2912 0022 1449     		ldr	r1, .L275+16
 2913 0024 2046     		mov	r0, r4
 2914 0026 FFF7FEFF 		bl	sprintf
 2915              	.LVL234:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2916              		.loc 2 294 3 view .LVU785
 2917 002a 0121     		movs	r1, #1
 2918 002c 0320     		movs	r0, #3
 2919 002e FFF7FEFF 		bl	moveto
 2920              	.LVL235:
 295:src/console.c ****   lcd_refresh();
 2921              		.loc 2 295 3 view .LVU786
 2922 0032 2146     		mov	r1, r4
 2923 0034 B06B     		ldr	r0, [r6, #56]
 2924 0036 A847     		blx	r5
 2925              	.LVL236:
 2926              		.loc 2 296 3 view .LVU787
 2927 0038 C047     		blx	r8
 2928              	.LVL237:
 297:src/console.c ****   sys_delay (2500);
 2929              		.loc 2 297 3 view .LVU788
 2930 003a 0F4B     		ldr	r3, .L275+20
 2931 003c 40F6C410 		movw	r0, #2500
 2932 0040 9847     		blx	r3
 2933              	.LVL238:
 298:src/console.c ****   /* wait_for_key_press(); */
 299:src/console.c ****   //  key_pop_all();
 300:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 301:src/console.c ****   // key_pop_all();
 302:src/console.c ****   strcpy( print_string, spaces );
 2934              		.loc 2 302 3 view .LVU789
 2935 0042 3946     		mov	r1, r7
 2936 0044 2046     		mov	r0, r4
 2937 0046 FFF7FEFF 		bl	strcpy
 2938              	.LVL239:
 303:src/console.c ****   moveto (3, 1);
 2939              		.loc 2 303 3 view .LVU790
 2940 004a 0121     		movs	r1, #1
 2941 004c 0320     		movs	r0, #3
 2942 004e FFF7FEFF 		bl	moveto
ARM GAS  /tmp/ccuwCXMe.s 			page 81


 2943              	.LVL240:
 304:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2944              		.loc 2 304 3 view .LVU791
 2945 0052 B06B     		ldr	r0, [r6, #56]
 2946 0054 2146     		mov	r1, r4
 2947 0056 A847     		blx	r5
 2948              	.LVL241:
 305:src/console.c ****   lcd_refresh();
 2949              		.loc 2 305 3 view .LVU792
 2950 0058 4346     		mov	r3, r8
 306:src/console.c ****   // while (key_empty()<=0);; // wait for release
 307:src/console.c ****   // key_pop_all();
 308:src/console.c **** }
 2951              		.loc 2 308 1 is_stmt 0 view .LVU793
 2952 005a 02B0     		add	sp, sp, #8
 2953              		.cfi_def_cfa_offset 24
 2954              	.LVL242:
 2955              		.loc 2 308 1 view .LVU794
 2956              		@ sp needed
 2957 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2958              		.cfi_restore 14
 2959              		.cfi_restore 8
 2960              		.cfi_restore 7
 2961              		.cfi_restore 6
 2962              		.cfi_restore 5
 2963              		.cfi_restore 4
 2964              		.cfi_def_cfa_offset 0
 2965              	.LVL243:
 305:src/console.c ****   lcd_refresh();
 2966              		.loc 2 305 3 view .LVU795
 2967 0060 1847     		bx	r3	@ indirect register sibling call
 2968              	.LVL244:
 2969              	.L276:
 2970 0062 00BF     		.align	2
 2971              	.L275:
 2972 0064 00000000 		.word	print_string
 2973 0068 00000000 		.word	.LANCHOR9
 2974 006c 00200010 		.word	268443648
 2975 0070 B1020008 		.word	134218417
 2976 0074 00000000 		.word	.LC12
 2977 0078 05040008 		.word	134218757
 2978 007c 31020008 		.word	134218289
 2979              		.cfi_endproc
 2980              	.LFE31:
 2982              		.section	.text.do_now,"ax",%progbits
 2983              		.align	1
 2984              		.p2align 2,,3
 2985              		.global	do_now
 2986              		.syntax unified
 2987              		.thumb
 2988              		.thumb_func
 2989              		.fpu fpv4-sp-d16
 2991              	do_now:
 2992              	.LVL245:
 2993              	.LFB32:
 309:src/console.c **** 
 310:src/console.c **** void do_now (int key, int shift) { // key and shift are like the output of remapped
ARM GAS  /tmp/ccuwCXMe.s 			page 82


 2994              		.loc 2 310 34 is_stmt 1 view -0
 2995              		.cfi_startproc
 2996              		@ args = 0, pretend = 0, frame = 8
 2997              		@ frame_needed = 0, uses_anonymous_args = 0
 2998              		@ link register save eliminated.
 311:src/console.c ****   struct _ndmap temp;
 2999              		.loc 2 311 3 view .LVU797
 312:src/console.c ****   temp.key_34s = key;
 3000              		.loc 2 312 3 view .LVU798
 310:src/console.c ****   struct _ndmap temp;
 3001              		.loc 2 310 34 is_stmt 0 view .LVU799
 3002 0000 82B0     		sub	sp, sp, #8
 3003              		.cfi_def_cfa_offset 8
 313:src/console.c ****   temp.shift = shift;
 314:src/console.c ****   process_keycode_with_shift (temp);
 3004              		.loc 2 314 3 view .LVU800
 3005 0002 02AB     		add	r3, sp, #8
 312:src/console.c ****   temp.shift = shift;
 3006              		.loc 2 312 16 view .LVU801
 3007 0004 8DF80000 		strb	r0, [sp]
 313:src/console.c ****   temp.shift = shift;
 3008              		.loc 2 313 3 is_stmt 1 view .LVU802
 313:src/console.c ****   temp.shift = shift;
 3009              		.loc 2 313 14 is_stmt 0 view .LVU803
 3010 0008 0191     		str	r1, [sp, #4]
 3011              		.loc 2 314 3 is_stmt 1 view .LVU804
 3012 000a 13E90300 		ldmdb	r3, {r0, r1}
 3013              	.LVL246:
 315:src/console.c **** }
 3014              		.loc 2 315 1 is_stmt 0 view .LVU805
 3015 000e 02B0     		add	sp, sp, #8
 3016              		.cfi_def_cfa_offset 0
 3017              		@ sp needed
 314:src/console.c **** }
 3018              		.loc 2 314 3 view .LVU806
 3019 0010 FFF7FEBF 		b	process_keycode_with_shift
 3020              	.LVL247:
 314:src/console.c **** }
 3021              		.loc 2 314 3 view .LVU807
 3022              		.cfi_endproc
 3023              	.LFE32:
 3025              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 3026              		.align	2
 3027              	.LC13:
 3028 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 3028      502F7770 
 3028      3334735F 
 3028      68656C70 
 3028      2E68746D 
 3029              		.section	.text.do_multi,"ax",%progbits
 3030              		.align	1
 3031              		.p2align 2,,3
 3032              		.global	do_multi
 3033              		.syntax unified
 3034              		.thumb
 3035              		.thumb_func
 3036              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccuwCXMe.s 			page 83


 3038              	do_multi:
 3039              	.LVL248:
 3040              	.LFB33:
 316:src/console.c **** 
 317:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 3041              		.loc 2 317 42 is_stmt 1 view -0
 3042              		.cfi_startproc
 3043              		@ args = 0, pretend = 0, frame = 16
 3044              		@ frame_needed = 0, uses_anonymous_args = 0
 3045              		.loc 2 317 42 is_stmt 0 view .LVU809
 3046 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3047              		.cfi_def_cfa_offset 20
 3048              		.cfi_offset 4, -20
 3049              		.cfi_offset 5, -16
 3050              		.cfi_offset 6, -12
 3051              		.cfi_offset 7, -8
 3052              		.cfi_offset 14, -4
 3053 0002 85B0     		sub	sp, sp, #20
 3054              		.cfi_def_cfa_offset 40
 3055              	.LVL249:
 318:src/console.c ****   switch(r.shift) {
 3056              		.loc 2 318 3 is_stmt 1 view .LVU810
 317:src/console.c ****   switch(r.shift) {
 3057              		.loc 2 317 42 is_stmt 0 view .LVU811
 3058 0004 6C46     		mov	r4, sp
 3059 0006 931E     		subs	r3, r2, #2
 3060 0008 84E80600 		stm	r4, {r1, r2}
 3061              	.LVL250:
 317:src/console.c ****   switch(r.shift) {
 3062              		.loc 2 317 42 view .LVU812
 3063 000c 0546     		mov	r5, r0
 3064 000e 0D2B     		cmp	r3, #13
 3065 0010 20D8     		bhi	.L280
 3066 0012 DFE803F0 		tbb	[pc, r3]
 3067              	.L282:
 3068 0016 2C       		.byte	(.L295-.L282)/2
 3069 0017 37       		.byte	(.L294-.L282)/2
 3070 0018 42       		.byte	(.L293-.L282)/2
 3071 0019 4D       		.byte	(.L292-.L282)/2
 3072 001a 58       		.byte	(.L291-.L282)/2
 3073 001b 63       		.byte	(.L290-.L282)/2
 3074 001c 6E       		.byte	(.L289-.L282)/2
 3075 001d 78       		.byte	(.L288-.L282)/2
 3076 001e 83       		.byte	(.L287-.L282)/2
 3077 001f 8D       		.byte	(.L286-.L282)/2
 3078 0020 97       		.byte	(.L285-.L282)/2
 3079 0021 AA       		.byte	(.L284-.L282)/2
 3080 0022 B4       		.byte	(.L283-.L282)/2
 3081 0023 07       		.byte	(.L281-.L282)/2
 3082              		.p2align 1
 3083              	.L281:
 319:src/console.c ****   /* case LASTX: // Last x via RCL L */
 320:src/console.c ****   /*   do_now (K11, 0); // RCL */
 321:src/console.c ****   /*   do_now (K_RELEASE,0); // release */
 322:src/console.c ****   /*   do_now (K15,0); // TAN key */
 323:src/console.c ****   /*   r.key_34s = K_RELEASE; */
 324:src/console.c ****   /*   r.shift = 0; // set up for release; */
ARM GAS  /tmp/ccuwCXMe.s 			page 84


 325:src/console.c ****   /*   break; */
 326:src/console.c ****   case ONSTO: // flash_backup()
 327:src/console.c ****     flash_backup(OP_SAVE);
 328:src/console.c ****     reset_shift();
 329:src/console.c ****     r = no_key;
 330:src/console.c ****     break;
 331:src/console.c ****   case ONRCL: // flash_restore()
 332:src/console.c ****     flash_restore(OP_LOAD);
 333:src/console.c ****     reset_shift();
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
 336:src/console.c ****   case WRLIB: // save library file
 337:src/console.c ****     save_lib_file(1);
 338:src/console.c ****     reset_shift();
 339:src/console.c ****     r = no_key;
 340:src/console.c ****     break;
 341:src/console.c ****   case LLIB: // load library file
 342:src/console.c ****     load_lib_file(1);
 343:src/console.c ****     reset_shift();
 344:src/console.c ****     r = no_key;
 345:src/console.c ****     break;
 346:src/console.c ****   case WRTST: // save state file
 347:src/console.c ****     save_ram_file(1);
 348:src/console.c ****     reset_shift();
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case LDST:
 352:src/console.c ****     load_ram_file(1);
 353:src/console.c ****     reset_shift();
 354:src/console.c ****     r = no_key;
 355:src/console.c ****     break;
 356:src/console.c ****   case LDPRG:
 357:src/console.c ****     load_prog_file();
 358:src/console.c ****     reset_shift();
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case SVPRG:
 362:src/console.c ****     save_prog_file();
 363:src/console.c ****     reset_shift();
 364:src/console.c ****     r = no_key;
 365:src/console.c ****     break;
 366:src/console.c ****   case HELP:
 367:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 368:src/console.c ****     reset_shift();
 369:src/console.c ****     r = no_key;
 370:src/console.c ****     break;
 371:src/console.c ****   case DOTS:
 372:src/console.c ****     do_all_dots();
 373:src/console.c ****     reset_shift();
 374:src/console.c ****     r = no_key;
 375:src/console.c ****     break;
 376:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 377:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 378:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 379:src/console.c ****     r = no_key;
 380:src/console.c ****     break;
 381:src/console.c ****   case DEFMEN:
ARM GAS  /tmp/ccuwCXMe.s 			page 85


 382:src/console.c ****     toggle_default_menu();
 383:src/console.c ****     reset_shift();
 384:src/console.c ****     r = no_key;
 385:src/console.c ****     break;
 386:src/console.c ****   case SETUMEN:
 387:src/console.c ****     build_user_menu();
 388:src/console.c ****     reset_shift();
 389:src/console.c ****     r = no_key;;
 390:src/console.c ****     break;
 391:src/console.c ****   case KCPX:
 392:src/console.c ****     if (C_LOCKED) {
 3084              		.loc 2 392 5 is_stmt 1 view .LVU813
 3085              		.loc 2 392 9 is_stmt 0 view .LVU814
 3086 0024 644B     		ldr	r3, .L310
 3087 0026 1B68     		ldr	r3, [r3]
 3088 0028 93F8AC3F 		ldrb	r3, [r3, #4012]	@ zero_extendqisi2
 3089              		.loc 2 392 8 view .LVU815
 3090 002c 03F04103 		and	r3, r3, #65
 3091 0030 412B     		cmp	r3, #65
 3092 0032 40F0AF80 		bne	.L297
 393:src/console.c ****       set_menu(M_C_Lock);
 3093              		.loc 2 393 7 is_stmt 1 view .LVU816
 3094              	.LVL251:
 3095              	.LBB120:
 3096              	.LBI120:
 108:src/menu.c    ****   menu_name m = current_menu;
 3097              		.loc 1 108 6 view .LVU817
 3098              	.LBB121:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3099              		.loc 1 109 3 view .LVU818
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3100              		.loc 1 109 13 is_stmt 0 view .LVU819
 3101 0036 614A     		ldr	r2, .L310+4
 3102 0038 92F90030 		ldrsb	r3, [r2]
 3103              	.LVL252:
 110:src/menu.c    ****     current_menu = default_menu;
 3104              		.loc 1 110 3 is_stmt 1 view .LVU820
 110:src/menu.c    ****     current_menu = default_menu;
 3105              		.loc 1 110 6 is_stmt 0 view .LVU821
 3106 003c 112B     		cmp	r3, #17
 3107 003e 00F0B580 		beq	.L309
 113:src/menu.c    ****     current_menu = last_menu;
 3108              		.loc 1 113 8 is_stmt 1 view .LVU822
 117:src/menu.c    ****   }
 3109              		.loc 1 117 5 view .LVU823
 117:src/menu.c    ****   }
 3110              		.loc 1 117 18 is_stmt 0 view .LVU824
 3111 0042 1121     		movs	r1, #17
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3112              		.loc 1 119 6 view .LVU825
 3113 0044 092B     		cmp	r3, #9
 117:src/menu.c    ****   }
 3114              		.loc 1 117 18 view .LVU826
 3115 0046 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3116              		.loc 1 119 3 is_stmt 1 view .LVU827
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
ARM GAS  /tmp/ccuwCXMe.s 			page 86


 3117              		.loc 1 119 6 is_stmt 0 view .LVU828
 3118 0048 02D0     		beq	.L300
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3119              		.loc 1 119 23 view .LVU829
 3120 004a 102B     		cmp	r3, #16
 3121 004c 40F0B180 		bne	.L299
 3122              	.L300:
 3123              	.LVL253:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3124              		.loc 1 119 23 view .LVU830
 3125              	.LBE121:
 3126              	.LBE120:
 394:src/console.c ****       reset_shift();
 3127              		.loc 2 394 7 is_stmt 1 view .LVU831
 3128 0050 FFF7FEFF 		bl	reset_shift
 3129              	.LVL254:
 3130              	.L280:
 395:src/console.c ****     }
 396:src/console.c ****     else {
 397:src/console.c ****       do_now (K_CMPLX, 0);
 398:src/console.c ****       do_now (K_RELEASE, 0);
 399:src/console.c ****       r = no_key;
 400:src/console.c ****     }
 401:src/console.c ****   default:
 402:src/console.c ****     r = no_key;
 3131              		.loc 2 402 5 view .LVU832
 3132              		.loc 2 402 7 is_stmt 0 view .LVU833
 3133 0054 5A4B     		ldr	r3, .L310+8
 3134 0056 93E80300 		ldm	r3, {r0, r1}
 3135 005a 84E80300 		stm	r4, {r0, r1}
 3136              	.LVL255:
 3137              	.L296:
 403:src/console.c ****   }
 404:src/console.c ****   return r;
 3138              		.loc 2 404 3 is_stmt 1 view .LVU834
 3139              		.loc 2 404 10 is_stmt 0 view .LVU835
 3140 005e 0191     		str	r1, [sp, #4]
 3141 0060 94E80300 		ldm	r4, {r0, r1}
 3142              	.LVL256:
 3143              		.loc 2 404 10 view .LVU836
 3144 0064 85E80300 		stm	r5, {r0, r1}
 405:src/console.c **** }
 3145              		.loc 2 405 1 view .LVU837
 3146 0068 2846     		mov	r0, r5
 3147 006a 05B0     		add	sp, sp, #20
 3148              		.cfi_remember_state
 3149              		.cfi_def_cfa_offset 20
 3150              		@ sp needed
 3151 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 3152              	.LVL257:
 3153              	.L295:
 3154              		.cfi_restore_state
 327:src/console.c ****     reset_shift();
 3155              		.loc 2 327 5 is_stmt 1 view .LVU838
 3156 006e AD20     		movs	r0, #173
 3157              	.LVL258:
 327:src/console.c ****     reset_shift();
ARM GAS  /tmp/ccuwCXMe.s 			page 87


 3158              		.loc 2 327 5 is_stmt 0 view .LVU839
 3159 0070 FFF7FEFF 		bl	flash_backup
 3160              	.LVL259:
 328:src/console.c ****     r = no_key;
 3161              		.loc 2 328 5 is_stmt 1 view .LVU840
 3162 0074 FFF7FEFF 		bl	reset_shift
 3163              	.LVL260:
 329:src/console.c ****     break;
 3164              		.loc 2 329 5 view .LVU841
 329:src/console.c ****     break;
 3165              		.loc 2 329 7 is_stmt 0 view .LVU842
 3166 0078 514B     		ldr	r3, .L310+8
 3167 007a 93E80300 		ldm	r3, {r0, r1}
 3168 007e 84E80300 		stm	r4, {r0, r1}
 3169              	.LVL261:
 330:src/console.c ****   case ONRCL: // flash_restore()
 3170              		.loc 2 330 5 is_stmt 1 view .LVU843
 3171 0082 ECE7     		b	.L296
 3172              	.LVL262:
 3173              	.L294:
 332:src/console.c ****     reset_shift();
 3174              		.loc 2 332 5 view .LVU844
 3175 0084 AE20     		movs	r0, #174
 3176              	.LVL263:
 332:src/console.c ****     reset_shift();
 3177              		.loc 2 332 5 is_stmt 0 view .LVU845
 3178 0086 FFF7FEFF 		bl	flash_restore
 3179              	.LVL264:
 333:src/console.c ****     r = no_key;
 3180              		.loc 2 333 5 is_stmt 1 view .LVU846
 3181 008a FFF7FEFF 		bl	reset_shift
 3182              	.LVL265:
 334:src/console.c ****     break;
 3183              		.loc 2 334 5 view .LVU847
 334:src/console.c ****     break;
 3184              		.loc 2 334 7 is_stmt 0 view .LVU848
 3185 008e 4C4B     		ldr	r3, .L310+8
 3186 0090 93E80300 		ldm	r3, {r0, r1}
 3187 0094 84E80300 		stm	r4, {r0, r1}
 3188              	.LVL266:
 335:src/console.c ****   case WRLIB: // save library file
 3189              		.loc 2 335 5 is_stmt 1 view .LVU849
 3190 0098 E1E7     		b	.L296
 3191              	.LVL267:
 3192              	.L293:
 337:src/console.c ****     reset_shift();
 3193              		.loc 2 337 5 view .LVU850
 3194 009a 0120     		movs	r0, #1
 3195              	.LVL268:
 337:src/console.c ****     reset_shift();
 3196              		.loc 2 337 5 is_stmt 0 view .LVU851
 3197 009c FFF7FEFF 		bl	save_lib_file
 3198              	.LVL269:
 338:src/console.c ****     r = no_key;
 3199              		.loc 2 338 5 is_stmt 1 view .LVU852
 3200 00a0 FFF7FEFF 		bl	reset_shift
 3201              	.LVL270:
ARM GAS  /tmp/ccuwCXMe.s 			page 88


 339:src/console.c ****     break;
 3202              		.loc 2 339 5 view .LVU853
 339:src/console.c ****     break;
 3203              		.loc 2 339 7 is_stmt 0 view .LVU854
 3204 00a4 464B     		ldr	r3, .L310+8
 3205 00a6 93E80300 		ldm	r3, {r0, r1}
 3206 00aa 84E80300 		stm	r4, {r0, r1}
 3207              	.LVL271:
 340:src/console.c ****   case LLIB: // load library file
 3208              		.loc 2 340 5 is_stmt 1 view .LVU855
 3209 00ae D6E7     		b	.L296
 3210              	.LVL272:
 3211              	.L292:
 342:src/console.c ****     reset_shift();
 3212              		.loc 2 342 5 view .LVU856
 3213 00b0 0120     		movs	r0, #1
 3214              	.LVL273:
 342:src/console.c ****     reset_shift();
 3215              		.loc 2 342 5 is_stmt 0 view .LVU857
 3216 00b2 FFF7FEFF 		bl	load_lib_file
 3217              	.LVL274:
 343:src/console.c ****     r = no_key;
 3218              		.loc 2 343 5 is_stmt 1 view .LVU858
 3219 00b6 FFF7FEFF 		bl	reset_shift
 3220              	.LVL275:
 344:src/console.c ****     break;
 3221              		.loc 2 344 5 view .LVU859
 344:src/console.c ****     break;
 3222              		.loc 2 344 7 is_stmt 0 view .LVU860
 3223 00ba 414B     		ldr	r3, .L310+8
 3224 00bc 93E80300 		ldm	r3, {r0, r1}
 3225 00c0 84E80300 		stm	r4, {r0, r1}
 3226              	.LVL276:
 345:src/console.c ****   case WRTST: // save state file
 3227              		.loc 2 345 5 is_stmt 1 view .LVU861
 3228 00c4 CBE7     		b	.L296
 3229              	.LVL277:
 3230              	.L291:
 347:src/console.c ****     reset_shift();
 3231              		.loc 2 347 5 view .LVU862
 3232 00c6 0120     		movs	r0, #1
 3233              	.LVL278:
 347:src/console.c ****     reset_shift();
 3234              		.loc 2 347 5 is_stmt 0 view .LVU863
 3235 00c8 FFF7FEFF 		bl	save_ram_file
 3236              	.LVL279:
 348:src/console.c ****     r = no_key;
 3237              		.loc 2 348 5 is_stmt 1 view .LVU864
 3238 00cc FFF7FEFF 		bl	reset_shift
 3239              	.LVL280:
 349:src/console.c ****     break;
 3240              		.loc 2 349 5 view .LVU865
 349:src/console.c ****     break;
 3241              		.loc 2 349 7 is_stmt 0 view .LVU866
 3242 00d0 3B4B     		ldr	r3, .L310+8
 3243 00d2 93E80300 		ldm	r3, {r0, r1}
 3244 00d6 84E80300 		stm	r4, {r0, r1}
ARM GAS  /tmp/ccuwCXMe.s 			page 89


 3245              	.LVL281:
 350:src/console.c ****   case LDST:
 3246              		.loc 2 350 5 is_stmt 1 view .LVU867
 3247 00da C0E7     		b	.L296
 3248              	.LVL282:
 3249              	.L290:
 352:src/console.c ****     reset_shift();
 3250              		.loc 2 352 5 view .LVU868
 3251 00dc 0120     		movs	r0, #1
 3252              	.LVL283:
 352:src/console.c ****     reset_shift();
 3253              		.loc 2 352 5 is_stmt 0 view .LVU869
 3254 00de FFF7FEFF 		bl	load_ram_file
 3255              	.LVL284:
 353:src/console.c ****     r = no_key;
 3256              		.loc 2 353 5 is_stmt 1 view .LVU870
 3257 00e2 FFF7FEFF 		bl	reset_shift
 3258              	.LVL285:
 354:src/console.c ****     break;
 3259              		.loc 2 354 5 view .LVU871
 354:src/console.c ****     break;
 3260              		.loc 2 354 7 is_stmt 0 view .LVU872
 3261 00e6 364B     		ldr	r3, .L310+8
 3262 00e8 93E80300 		ldm	r3, {r0, r1}
 3263 00ec 84E80300 		stm	r4, {r0, r1}
 3264              	.LVL286:
 355:src/console.c ****   case LDPRG:
 3265              		.loc 2 355 5 is_stmt 1 view .LVU873
 3266 00f0 B5E7     		b	.L296
 3267              	.LVL287:
 3268              	.L289:
 357:src/console.c ****     reset_shift();
 3269              		.loc 2 357 5 view .LVU874
 3270 00f2 FFF7FEFF 		bl	load_prog_file
 3271              	.LVL288:
 358:src/console.c ****     r = no_key;
 3272              		.loc 2 358 5 view .LVU875
 3273 00f6 FFF7FEFF 		bl	reset_shift
 3274              	.LVL289:
 359:src/console.c ****     break;
 3275              		.loc 2 359 5 view .LVU876
 359:src/console.c ****     break;
 3276              		.loc 2 359 7 is_stmt 0 view .LVU877
 3277 00fa 314B     		ldr	r3, .L310+8
 3278 00fc 93E80300 		ldm	r3, {r0, r1}
 3279 0100 84E80300 		stm	r4, {r0, r1}
 3280              	.LVL290:
 360:src/console.c ****   case SVPRG:
 3281              		.loc 2 360 5 is_stmt 1 view .LVU878
 3282 0104 ABE7     		b	.L296
 3283              	.LVL291:
 3284              	.L288:
 367:src/console.c ****     reset_shift();
 3285              		.loc 2 367 5 view .LVU879
 3286 0106 2F4B     		ldr	r3, .L310+12
 3287 0108 2F48     		ldr	r0, .L310+16
 3288              	.LVL292:
ARM GAS  /tmp/ccuwCXMe.s 			page 90


 367:src/console.c ****     reset_shift();
 3289              		.loc 2 367 5 is_stmt 0 view .LVU880
 3290 010a 9847     		blx	r3
 3291              	.LVL293:
 368:src/console.c ****     r = no_key;
 3292              		.loc 2 368 5 is_stmt 1 view .LVU881
 3293 010c FFF7FEFF 		bl	reset_shift
 3294              	.LVL294:
 369:src/console.c ****     break;
 3295              		.loc 2 369 5 view .LVU882
 369:src/console.c ****     break;
 3296              		.loc 2 369 7 is_stmt 0 view .LVU883
 3297 0110 2B4B     		ldr	r3, .L310+8
 3298 0112 93E80300 		ldm	r3, {r0, r1}
 3299 0116 84E80300 		stm	r4, {r0, r1}
 3300              	.LVL295:
 370:src/console.c ****   case DOTS:
 3301              		.loc 2 370 5 is_stmt 1 view .LVU884
 3302 011a A0E7     		b	.L296
 3303              	.LVL296:
 3304              	.L287:
 362:src/console.c ****     reset_shift();
 3305              		.loc 2 362 5 view .LVU885
 3306 011c FFF7FEFF 		bl	save_prog_file
 3307              	.LVL297:
 363:src/console.c ****     r = no_key;
 3308              		.loc 2 363 5 view .LVU886
 3309 0120 FFF7FEFF 		bl	reset_shift
 3310              	.LVL298:
 364:src/console.c ****     break;
 3311              		.loc 2 364 5 view .LVU887
 364:src/console.c ****     break;
 3312              		.loc 2 364 7 is_stmt 0 view .LVU888
 3313 0124 264B     		ldr	r3, .L310+8
 3314 0126 93E80300 		ldm	r3, {r0, r1}
 3315 012a 84E80300 		stm	r4, {r0, r1}
 3316              	.LVL299:
 365:src/console.c ****   case HELP:
 3317              		.loc 2 365 5 is_stmt 1 view .LVU889
 3318 012e 96E7     		b	.L296
 3319              	.LVL300:
 3320              	.L286:
 372:src/console.c ****     reset_shift();
 3321              		.loc 2 372 5 view .LVU890
 3322 0130 FFF7FEFF 		bl	do_all_dots
 3323              	.LVL301:
 373:src/console.c ****     r = no_key;
 3324              		.loc 2 373 5 view .LVU891
 3325 0134 FFF7FEFF 		bl	reset_shift
 3326              	.LVL302:
 374:src/console.c ****     break;
 3327              		.loc 2 374 5 view .LVU892
 374:src/console.c ****     break;
 3328              		.loc 2 374 7 is_stmt 0 view .LVU893
 3329 0138 214B     		ldr	r3, .L310+8
 3330 013a 93E80300 		ldm	r3, {r0, r1}
 3331 013e 84E80300 		stm	r4, {r0, r1}
ARM GAS  /tmp/ccuwCXMe.s 			page 91


 3332              	.LVL303:
 375:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 3333              		.loc 2 375 5 is_stmt 1 view .LVU894
 3334 0142 8CE7     		b	.L296
 3335              	.LVL304:
 3336              	.L285:
 377:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 3337              		.loc 2 377 5 view .LVU895
 3338              	.LBB123:
 3339              	.LBI123:
 310:src/console.c ****   struct _ndmap temp;
 3340              		.loc 2 310 6 view .LVU896
 3341              	.LBB124:
 311:src/console.c ****   temp.key_34s = key;
 3342              		.loc 2 311 3 view .LVU897
 312:src/console.c ****   temp.shift = shift;
 3343              		.loc 2 312 3 view .LVU898
 312:src/console.c ****   temp.shift = shift;
 3344              		.loc 2 312 16 is_stmt 0 view .LVU899
 3345 0144 6323     		movs	r3, #99
 313:src/console.c ****   process_keycode_with_shift (temp);
 3346              		.loc 2 313 14 view .LVU900
 3347 0146 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3348              		.loc 2 312 16 view .LVU901
 3349 0148 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3350              		.loc 2 313 3 is_stmt 1 view .LVU902
 313:src/console.c ****   process_keycode_with_shift (temp);
 3351              		.loc 2 313 14 is_stmt 0 view .LVU903
 3352 014c 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3353              		.loc 2 314 3 is_stmt 1 view .LVU904
 3354 014e 02AE     		add	r6, sp, #8
 3355 0150 96E80300 		ldm	r6, {r0, r1}
 3356              	.LVL305:
 314:src/console.c **** }
 3357              		.loc 2 314 3 is_stmt 0 view .LVU905
 3358 0154 FFF7FEFF 		bl	process_keycode_with_shift
 3359              	.LVL306:
 314:src/console.c **** }
 3360              		.loc 2 314 3 view .LVU906
 3361              	.LBE124:
 3362              	.LBE123:
 378:src/console.c ****     r = no_key;
 3363              		.loc 2 378 5 is_stmt 1 view .LVU907
 3364              	.LBB125:
 3365              	.LBI125:
 310:src/console.c ****   struct _ndmap temp;
 3366              		.loc 2 310 6 view .LVU908
 3367              	.LBB126:
 311:src/console.c ****   temp.key_34s = key;
 3368              		.loc 2 311 3 view .LVU909
 312:src/console.c ****   temp.shift = shift;
 3369              		.loc 2 312 3 view .LVU910
 312:src/console.c ****   temp.shift = shift;
 3370              		.loc 2 312 16 is_stmt 0 view .LVU911
ARM GAS  /tmp/ccuwCXMe.s 			page 92


 3371 0158 3323     		movs	r3, #51
 3372              	.LVL307:
 3373              	.L308:
 312:src/console.c ****   temp.shift = shift;
 3374              		.loc 2 312 16 view .LVU912
 3375              	.LBE126:
 3376              	.LBE125:
 3377              	.LBB127:
 3378              	.LBB128:
 313:src/console.c ****   process_keycode_with_shift (temp);
 3379              		.loc 2 313 14 view .LVU913
 3380 015a 0397     		str	r7, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 3381              		.loc 2 312 16 view .LVU914
 3382 015c 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3383              		.loc 2 313 3 is_stmt 1 view .LVU915
 314:src/console.c **** }
 3384              		.loc 2 314 3 view .LVU916
 3385 0160 96E80300 		ldm	r6, {r0, r1}
 3386 0164 FFF7FEFF 		bl	process_keycode_with_shift
 3387              	.LVL308:
 3388              	.LBE128:
 3389              	.LBE127:
 399:src/console.c ****     }
 3390              		.loc 2 399 7 view .LVU917
 399:src/console.c ****     }
 3391              		.loc 2 399 7 is_stmt 0 view .LVU918
 3392 0168 74E7     		b	.L280
 3393              	.LVL309:
 3394              	.L284:
 382:src/console.c ****     reset_shift();
 3395              		.loc 2 382 5 is_stmt 1 view .LVU919
 3396 016a FFF7FEFF 		bl	toggle_default_menu
 3397              	.LVL310:
 383:src/console.c ****     r = no_key;
 3398              		.loc 2 383 5 view .LVU920
 3399 016e FFF7FEFF 		bl	reset_shift
 3400              	.LVL311:
 384:src/console.c ****     break;
 3401              		.loc 2 384 5 view .LVU921
 384:src/console.c ****     break;
 3402              		.loc 2 384 7 is_stmt 0 view .LVU922
 3403 0172 134B     		ldr	r3, .L310+8
 3404 0174 93E80300 		ldm	r3, {r0, r1}
 3405 0178 84E80300 		stm	r4, {r0, r1}
 3406              	.LVL312:
 385:src/console.c ****   case SETUMEN:
 3407              		.loc 2 385 5 is_stmt 1 view .LVU923
 3408 017c 6FE7     		b	.L296
 3409              	.LVL313:
 3410              	.L283:
 387:src/console.c ****     reset_shift();
 3411              		.loc 2 387 5 view .LVU924
 3412              	.LBB130:
 3413              	.LBI130:
 657:src/menu.c    ****   // find the label 'MNU'
ARM GAS  /tmp/ccuwCXMe.s 			page 93


 3414              		.loc 1 657 6 view .LVU925
 3415              	.LBB131:
 659:src/menu.c    ****    build_user_menu_from_program (lbl);
 3416              		.loc 1 659 4 view .LVU926
 660:src/menu.c    **** }
 3417              		.loc 1 660 4 view .LVU927
 3418 017e 1348     		ldr	r0, .L310+20
 3419              	.LVL314:
 660:src/menu.c    **** }
 3420              		.loc 1 660 4 is_stmt 0 view .LVU928
 3421 0180 FFF7FEFF 		bl	build_user_menu_from_program
 3422              	.LVL315:
 3423              	.LBE131:
 3424              	.LBE130:
 388:src/console.c ****     r = no_key;;
 3425              		.loc 2 388 5 is_stmt 1 view .LVU929
 3426 0184 FFF7FEFF 		bl	reset_shift
 3427              	.LVL316:
 389:src/console.c ****     break;
 3428              		.loc 2 389 5 view .LVU930
 389:src/console.c ****     break;
 3429              		.loc 2 389 7 is_stmt 0 view .LVU931
 3430 0188 0D4B     		ldr	r3, .L310+8
 3431 018a 93E80300 		ldm	r3, {r0, r1}
 3432 018e 84E80300 		stm	r4, {r0, r1}
 3433              	.LVL317:
 389:src/console.c ****     break;
 3434              		.loc 2 389 16 is_stmt 1 view .LVU932
 390:src/console.c ****   case KCPX:
 3435              		.loc 2 390 5 view .LVU933
 3436 0192 64E7     		b	.L296
 3437              	.LVL318:
 3438              	.L297:
 397:src/console.c ****       do_now (K_RELEASE, 0);
 3439              		.loc 2 397 7 view .LVU934
 3440              	.LBB132:
 3441              	.LBI132:
 310:src/console.c ****   struct _ndmap temp;
 3442              		.loc 2 310 6 view .LVU935
 3443              	.LBB133:
 311:src/console.c ****   temp.key_34s = key;
 3444              		.loc 2 311 3 view .LVU936
 312:src/console.c ****   temp.shift = shift;
 3445              		.loc 2 312 3 view .LVU937
 312:src/console.c ****   temp.shift = shift;
 3446              		.loc 2 312 16 is_stmt 0 view .LVU938
 3447 0194 2D23     		movs	r3, #45
 313:src/console.c ****   process_keycode_with_shift (temp);
 3448              		.loc 2 313 14 view .LVU939
 3449 0196 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3450              		.loc 2 312 16 view .LVU940
 3451 0198 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3452              		.loc 2 313 3 is_stmt 1 view .LVU941
 313:src/console.c ****   process_keycode_with_shift (temp);
 3453              		.loc 2 313 14 is_stmt 0 view .LVU942
ARM GAS  /tmp/ccuwCXMe.s 			page 94


 3454 019c 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3455              		.loc 2 314 3 is_stmt 1 view .LVU943
 3456 019e 02AE     		add	r6, sp, #8
 3457 01a0 96E80300 		ldm	r6, {r0, r1}
 3458              	.LVL319:
 314:src/console.c **** }
 3459              		.loc 2 314 3 is_stmt 0 view .LVU944
 3460 01a4 FFF7FEFF 		bl	process_keycode_with_shift
 3461              	.LVL320:
 314:src/console.c **** }
 3462              		.loc 2 314 3 view .LVU945
 3463              	.LBE133:
 3464              	.LBE132:
 398:src/console.c ****       r = no_key;
 3465              		.loc 2 398 7 is_stmt 1 view .LVU946
 3466              	.LBB134:
 3467              	.LBI127:
 310:src/console.c ****   struct _ndmap temp;
 3468              		.loc 2 310 6 view .LVU947
 3469              	.LBB129:
 311:src/console.c ****   temp.key_34s = key;
 3470              		.loc 2 311 3 view .LVU948
 312:src/console.c ****   temp.shift = shift;
 3471              		.loc 2 312 3 view .LVU949
 312:src/console.c ****   temp.shift = shift;
 3472              		.loc 2 312 16 is_stmt 0 view .LVU950
 3473 01a8 6323     		movs	r3, #99
 3474 01aa D6E7     		b	.L308
 3475              	.LVL321:
 3476              	.L309:
 312:src/console.c ****   temp.shift = shift;
 3477              		.loc 2 312 16 view .LVU951
 3478              	.LBE129:
 3479              	.LBE134:
 3480              	.LBB135:
 3481              	.LBB122:
 111:src/menu.c    ****   }
 3482              		.loc 1 111 5 is_stmt 1 view .LVU952
 111:src/menu.c    ****   }
 3483              		.loc 1 111 18 is_stmt 0 view .LVU953
 3484 01ac 0849     		ldr	r1, .L310+24
 3485 01ae 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3486 01b0 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3487              		.loc 1 119 3 is_stmt 1 view .LVU954
 3488              	.L299:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3489              		.loc 1 119 43 view .LVU955
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3490              		.loc 1 119 53 is_stmt 0 view .LVU956
 3491 01b2 084A     		ldr	r2, .L310+28
 3492 01b4 1370     		strb	r3, [r2]
 3493 01b6 4BE7     		b	.L300
 3494              	.L311:
 3495              		.align	2
 3496              	.L310:
ARM GAS  /tmp/ccuwCXMe.s 			page 95


 3497 01b8 00000000 		.word	main_ram
 3498 01bc 00000000 		.word	.LANCHOR1
 3499 01c0 00000000 		.word	.LANCHOR10
 3500 01c4 49040008 		.word	134218825
 3501 01c8 00000000 		.word	.LC13
 3502 01cc 4DF04E55 		.word	1431236685
 3503 01d0 00000000 		.word	.LANCHOR2
 3504 01d4 00000000 		.word	.LANCHOR3
 3505              	.LBE122:
 3506              	.LBE135:
 3507              		.cfi_endproc
 3508              	.LFE33:
 3510              		.section	.text.program_main,"ax",%progbits
 3511              		.align	1
 3512              		.p2align 2,,3
 3513              		.global	program_main
 3514              		.syntax unified
 3515              		.thumb
 3516              		.thumb_func
 3517              		.fpu fpv4-sp-d16
 3519              	program_main:
 3520              	.LFB34:
 406:src/console.c **** 
 407:src/console.c **** void program_main(){
 3521              		.loc 2 407 20 is_stmt 1 view -0
 3522              		.cfi_startproc
 3523              		@ args = 0, pretend = 0, frame = 224
 3524              		@ frame_needed = 0, uses_anonymous_args = 0
 408:src/console.c ****   int c;
 3525              		.loc 2 408 3 view .LVU958
 409:src/console.c ****   struct _ndmap remapped;
 3526              		.loc 2 409 3 view .LVU959
 410:src/console.c **** 
 411:src/console.c ****   init_mem();
 3527              		.loc 2 411 3 view .LVU960
 407:src/console.c ****   int c;
 3528              		.loc 2 407 20 is_stmt 0 view .LVU961
 3529 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3530              		.cfi_def_cfa_offset 32
 3531              		.cfi_offset 4, -32
 3532              		.cfi_offset 5, -28
 3533              		.cfi_offset 6, -24
 3534              		.cfi_offset 7, -20
 3535              		.cfi_offset 8, -16
 3536              		.cfi_offset 9, -12
 3537              		.cfi_offset 10, -8
 3538              		.cfi_offset 14, -4
 3539 0004 B8B0     		sub	sp, sp, #224
 3540              		.cfi_def_cfa_offset 256
 3541              		.loc 2 411 3 view .LVU962
 3542 0006 FFF7FEFF 		bl	init_mem
 3543              	.LVL322:
 412:src/console.c ****   init_RegionTab();
 3544              		.loc 2 412 3 is_stmt 1 view .LVU963
 3545 000a FFF7FEFF 		bl	init_RegionTab
 3546              	.LVL323:
 413:src/console.c ****   init_34s();
ARM GAS  /tmp/ccuwCXMe.s 			page 96


 3547              		.loc 2 413 3 view .LVU964
 3548 000e FFF7FEFF 		bl	init_34s
 3549              	.LVL324:
 414:src/console.c ****   State2.flags = 1;  
 3550              		.loc 2 414 3 view .LVU965
 3551              		.loc 2 414 16 is_stmt 0 view .LVU966
 3552 0012 B34A     		ldr	r2, .L413
 3553 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3554 0016 43F00103 		orr	r3, r3, #1
 3555 001a 1376     		strb	r3, [r2, #24]
 415:src/console.c ****   check_create_wp34sdir();
 3556              		.loc 2 415 3 is_stmt 1 view .LVU967
 3557 001c FFF7FEFF 		bl	check_create_wp34sdir
 3558              	.LVL325:
 416:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3559              		.loc 2 416 3 view .LVU968
 3560              		.loc 2 416 8 is_stmt 0 view .LVU969
 3561 0020 0020     		movs	r0, #0
 3562 0022 FFF7FEFF 		bl	load_ram_file
 3563              	.LVL326:
 3564              		.loc 2 416 6 view .LVU970
 3565 0026 08B9     		cbnz	r0, .L313
 3566              		.loc 2 416 26 is_stmt 1 discriminator 1 view .LVU971
 3567              		.loc 2 416 34 is_stmt 0 discriminator 1 view .LVU972
 3568 0028 AE4B     		ldr	r3, .L413+4
 3569 002a 1860     		str	r0, [r3]
 3570              	.L313:
 417:src/console.c ****   load_backup_file(0);
 3571              		.loc 2 417 3 is_stmt 1 view .LVU973
 418:src/console.c ****   load_lib_file(0);
 419:src/console.c ****   t20->newln = 0;
 3572              		.loc 2 419 3 is_stmt 0 view .LVU974
 3573 002c AE4C     		ldr	r4, .L413+8
 3574 002e AF4E     		ldr	r6, .L413+12
 420:src/console.c ****   t20->lnfill = 0;
 421:src/console.c ****   t20->fixed = 1;
 422:src/console.c ****   t20->xspc = -2;
 423:src/console.c ****   t20->bgfill = 0;
 424:src/console.c ****   run_menu_item_app = run_menu_item;
 425:src/console.c ****   menu_line_str_app = menu_line_str;
 426:src/console.c **** 
 427:src/console.c ****   display();
 428:src/console.c ****   display_current_menu();
 429:src/console.c ****   lcd_refresh();
 430:src/console.c ****   JustDisplayed = 0;
 431:src/console.c ****   /*
 432:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 433:src/console.c ****     Sleeps peacefully while waiting for a key.
 434:src/console.c ****     Handles (in principle!) turning off and on.
 435:src/console.c ****     =================
 436:src/console.c ****     Main event loop
 437:src/console.c ****     =================
 438:src/console.c **** 
 439:src/console.c ****     Status flags:
 440:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 441:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 442:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
ARM GAS  /tmp/ccuwCXMe.s 			page 97


 443:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 444:src/console.c ****   */
 445:src/console.c ****   for(;;) {
 446:src/console.c **** 
 447:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 448:src/console.c ****       {
 449:src/console.c **** 	CLR_ST(STAT_RUNNING);
 450:src/console.c **** 	sys_sleep();
 451:src/console.c ****       }
 452:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 3575              		.loc 2 452 35 view .LVU975
 3576 0030 AF4F     		ldr	r7, .L413+16
 453:src/console.c ****     {
 454:src/console.c ****       CLR_ST(STAT_RUNNING);
 455:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3577              		.loc 2 455 7 view .LVU976
 3578 0032 DFF83083 		ldr	r8, .L413+132
 417:src/console.c ****   load_lib_file(0);
 3579              		.loc 2 417 3 view .LVU977
 3580 0036 0020     		movs	r0, #0
 3581 0038 FFF7FEFF 		bl	load_backup_file
 3582              	.LVL327:
 418:src/console.c ****   t20->newln = 0;
 3583              		.loc 2 418 3 is_stmt 1 view .LVU978
 3584 003c 0020     		movs	r0, #0
 3585 003e FFF7FEFF 		bl	load_lib_file
 3586              	.LVL328:
 419:src/console.c ****   t20->lnfill = 0;
 3587              		.loc 2 419 3 view .LVU979
 3588 0042 236B     		ldr	r3, [r4, #48]
 420:src/console.c ****   t20->fixed = 1;
 3589              		.loc 2 420 3 view .LVU980
 421:src/console.c ****   t20->xspc = -2;
 3590              		.loc 2 421 3 view .LVU981
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3591              		.loc 2 424 21 is_stmt 0 view .LVU982
 3592 0044 AB4A     		ldr	r2, .L413+20
 421:src/console.c ****   t20->xspc = -2;
 3593              		.loc 2 421 14 view .LVU983
 3594 0046 0121     		movs	r1, #1
 3595 0048 1974     		strb	r1, [r3, #16]
 422:src/console.c ****   t20->bgfill = 0;
 3596              		.loc 2 422 3 is_stmt 1 view .LVU984
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3597              		.loc 2 423 15 is_stmt 0 view .LVU985
 3598 004a 0025     		movs	r5, #0
 422:src/console.c ****   t20->bgfill = 0;
 3599              		.loc 2 422 13 view .LVU986
 3600 004c FE21     		movs	r1, #254
 3601 004e 9973     		strb	r1, [r3, #14]
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3602              		.loc 2 423 3 is_stmt 1 view .LVU987
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3603              		.loc 2 423 15 is_stmt 0 view .LVU988
 3604 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 419:src/console.c ****   t20->lnfill = 0;
 3605              		.loc 2 419 14 view .LVU989
ARM GAS  /tmp/ccuwCXMe.s 			page 98


 3606 0052 1D75     		strb	r5, [r3, #20]
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3607              		.loc 2 424 3 is_stmt 1 view .LVU990
 425:src/console.c **** 
 3608              		.loc 2 425 21 is_stmt 0 view .LVU991
 3609 0054 A84B     		ldr	r3, .L413+24
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3610              		.loc 2 424 21 view .LVU992
 3611 0056 E260     		str	r2, [r4, #12]
 425:src/console.c **** 
 3612              		.loc 2 425 3 is_stmt 1 view .LVU993
 425:src/console.c **** 
 3613              		.loc 2 425 21 is_stmt 0 view .LVU994
 3614 0058 2361     		str	r3, [r4, #16]
 427:src/console.c ****   display_current_menu();
 3615              		.loc 2 427 3 is_stmt 1 view .LVU995
 3616 005a FFF7FEFF 		bl	display
 3617              	.LVL329:
 428:src/console.c ****   lcd_refresh();
 3618              		.loc 2 428 3 view .LVU996
 3619 005e FFF7FEFF 		bl	display_current_menu
 3620              	.LVL330:
 429:src/console.c ****   JustDisplayed = 0;
 3621              		.loc 2 429 3 view .LVU997
 3622 0062 A64B     		ldr	r3, .L413+28
 3623 0064 9847     		blx	r3
 3624              	.LVL331:
 430:src/console.c ****   /*
 3625              		.loc 2 430 3 view .LVU998
 430:src/console.c ****   /*
 3626              		.loc 2 430 17 is_stmt 0 view .LVU999
 3627 0066 A64B     		ldr	r3, .L413+32
 3628 0068 1D60     		str	r5, [r3]
 3629              	.L314:
 445:src/console.c **** 
 3630              		.loc 2 445 3 is_stmt 1 view .LVU1000
 447:src/console.c ****       {
 3631              		.loc 2 447 5 view .LVU1001
 447:src/console.c ****       {
 3632              		.loc 2 447 10 is_stmt 0 view .LVU1002
 3633 006a 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3634              		.loc 2 447 8 view .LVU1003
 3635 006c 9B05     		lsls	r3, r3, #22
 3636 006e 40F1BE80 		bpl	.L315
 447:src/console.c ****       {
 3637              		.loc 2 447 30 discriminator 1 view .LVU1004
 3638 0072 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3639              		.loc 2 447 27 discriminator 1 view .LVU1005
 3640 0074 5D07     		lsls	r5, r3, #29
 3641 0076 40F1BA80 		bpl	.L315
 449:src/console.c **** 	sys_sleep();
 3642              		.loc 2 449 2 is_stmt 1 view .LVU1006
 3643 007a 2368     		ldr	r3, [r4]
 450:src/console.c ****       }
 3644              		.loc 2 450 2 is_stmt 0 view .LVU1007
ARM GAS  /tmp/ccuwCXMe.s 			page 99


 3645 007c A14A     		ldr	r2, .L413+36
 449:src/console.c **** 	sys_sleep();
 3646              		.loc 2 449 2 view .LVU1008
 3647 007e 23F00203 		bic	r3, r3, #2
 3648 0082 2360     		str	r3, [r4]
 450:src/console.c ****       }
 3649              		.loc 2 450 2 is_stmt 1 view .LVU1009
 3650 0084 9047     		blx	r2
 3651              	.LVL332:
 3652              	.L316:
 456:src/console.c ****       sys_sleep();
 457:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 458:src/console.c **** 	key_push (K_HEARTBEAT);
 459:src/console.c **** 	if (Pause > 0) Pause--;
 460:src/console.c ****       }
 461:src/console.c ****       sys_timer_disable(0); // stop timer
 462:src/console.c ****     }
 463:src/console.c ****     
 464:src/console.c ****     // Wakeup in off state or going to sleep
 465:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3653              		.loc 2 465 5 view .LVU1010
 3654              		.loc 2 465 9 is_stmt 0 view .LVU1011
 3655 0086 2368     		ldr	r3, [r4]
 3656              		.loc 2 465 8 view .LVU1012
 3657 0088 9805     		lsls	r0, r3, #22
 3658 008a 00F1D780 		bmi	.L322
 3659              	.L408:
 3660              		.loc 2 465 29 discriminator 1 view .LVU1013
 3661 008e 2368     		ldr	r3, [r4]
 3662              		.loc 2 465 26 discriminator 1 view .LVU1014
 3663 0090 5907     		lsls	r1, r3, #29
 3664 0092 00F1D380 		bmi	.L322
 466:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 467:src/console.c ****         // Going to off mode
 468:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 469:src/console.c ****         draw_power_off_image(1);
 470:src/console.c **** 
 471:src/console.c ****         LCD_power_off(0);
 472:src/console.c ****         SET_ST(STAT_SUSPENDED);
 473:src/console.c ****         SET_ST(STAT_OFF);
 474:src/console.c ****       }
 475:src/console.c ****       // Already in OFF -> just continue to sleep above
 476:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 477:src/console.c ****       // thus reaching the sleep()
 478:src/console.c ****     }
 479:src/console.c **** 
 480:src/console.c ****     // Well, we are woken-up
 481:src/console.c ****     SET_ST(STAT_RUNNING);
 3665              		.loc 2 481 5 is_stmt 1 view .LVU1015
 3666 0096 2368     		ldr	r3, [r4]
 3667 0098 43F00203 		orr	r3, r3, #2
 3668 009c 2360     		str	r3, [r4]
 482:src/console.c **** 
 483:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 484:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3669              		.loc 2 484 5 view .LVU1016
 3670 009e 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccuwCXMe.s 			page 100


 3671 00a0 23F00403 		bic	r3, r3, #4
 3672 00a4 2360     		str	r3, [r4]
 485:src/console.c **** 
 486:src/console.c ****     // Get up from OFF state
 487:src/console.c ****     if ( ST(STAT_OFF) ) {
 3673              		.loc 2 487 5 view .LVU1017
 3674              		.loc 2 487 10 is_stmt 0 view .LVU1018
 3675 00a6 2368     		ldr	r3, [r4]
 3676              		.loc 2 487 8 view .LVU1019
 3677 00a8 DA06     		lsls	r2, r3, #27
 3678 00aa 0ED5     		bpl	.L327
 488:src/console.c ****       LCD_power_on();
 3679              		.loc 2 488 7 is_stmt 1 view .LVU1020
 3680 00ac 964B     		ldr	r3, .L413+40
 3681 00ae 9847     		blx	r3
 3682              	.LVL333:
 489:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3683              		.loc 2 489 7 view .LVU1021
 3684 00b0 964B     		ldr	r3, .L413+44
 3685 00b2 9847     		blx	r3
 3686              	.LVL334:
 490:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3687              		.loc 2 490 7 view .LVU1022
 3688 00b4 964B     		ldr	r3, .L413+48
 3689 00b6 9847     		blx	r3
 3690              	.LVL335:
 491:src/console.c **** 
 492:src/console.c ****       CLR_ST(STAT_OFF);
 3691              		.loc 2 492 7 view .LVU1023
 3692 00b8 2368     		ldr	r3, [r4]
 493:src/console.c **** 
 494:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3693              		.loc 2 494 13 is_stmt 0 view .LVU1024
 3694 00ba 964A     		ldr	r2, .L413+52
 492:src/console.c **** 
 3695              		.loc 2 492 7 view .LVU1025
 3696 00bc 23F01003 		bic	r3, r3, #16
 3697 00c0 2360     		str	r3, [r4]
 3698              		.loc 2 494 7 is_stmt 1 view .LVU1026
 3699              		.loc 2 494 13 is_stmt 0 view .LVU1027
 3700 00c2 9047     		blx	r2
 3701              	.LVL336:
 3702              		.loc 2 494 10 view .LVU1028
 3703 00c4 08B9     		cbnz	r0, .L327
 495:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3704              		.loc 2 495 9 is_stmt 1 view .LVU1029
 3705 00c6 944B     		ldr	r3, .L413+56
 3706 00c8 9847     		blx	r3
 3707              	.LVL337:
 3708              	.L327:
 496:src/console.c ****     }
 497:src/console.c **** 
 498:src/console.c ****     // Key is ready -> clear auto off timer
 499:src/console.c ****     //    if ( !key_empty() )
 500:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 501:src/console.c ****     // Fetch the key
 502:src/console.c ****     //  < 0 -> No key event
ARM GAS  /tmp/ccuwCXMe.s 			page 101


 503:src/console.c ****     //  > 0 -> Key pressed
 504:src/console.c ****     // == 0 -> Key released
 505:src/console.c ****     c = key_pop();
 3709              		.loc 2 505 5 view .LVU1030
 3710              		.loc 2 505 9 is_stmt 0 view .LVU1031
 3711 00ca 944B     		ldr	r3, .L413+60
 3712 00cc 9847     		blx	r3
 3713              	.LVL338:
 506:src/console.c **** #ifdef INCLUDE_STOPWATCH
 507:src/console.c ****     if ( KeyCallback != NULL ) {
 3714              		.loc 2 507 22 view .LVU1032
 3715 00ce 3368     		ldr	r3, [r6]
 505:src/console.c **** #ifdef INCLUDE_STOPWATCH
 3716              		.loc 2 505 9 view .LVU1033
 3717 00d0 0546     		mov	r5, r0
 3718              	.LVL339:
 3719              		.loc 2 507 5 is_stmt 1 view .LVU1034
 3720              		.loc 2 507 8 is_stmt 0 view .LVU1035
 3721 00d2 002B     		cmp	r3, #0
 3722 00d4 00F04881 		beq	.L329
 508:src/console.c ****       c = (*KeyCallback)( c );
 3723              		.loc 2 508 7 is_stmt 1 view .LVU1036
 3724              		.loc 2 508 12 is_stmt 0 view .LVU1037
 3725 00d8 9847     		blx	r3
 3726              	.LVL340:
 3727              		.loc 2 508 12 view .LVU1038
 3728 00da 0546     		mov	r5, r0
 3729              	.LVL341:
 3730              	.L330:
 509:src/console.c ****     }
 510:src/console.c ****     else if ( StopWatchRunning && ( Ticker % STOPWATCH_BLINK ) == 0 ) {
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 512:src/console.c ****       finish_LEQ();
 513:src/console.c ****     }
 514:src/console.c **** #endif
 515:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 3731              		.loc 2 515 5 is_stmt 1 view .LVU1039
 3732              		.loc 2 515 8 is_stmt 0 view .LVU1040
 3733 00dc 622D     		cmp	r5, #98
 3734 00de 00F0C780 		beq	.L331
 3735              		.loc 2 515 29 discriminator 1 view .LVU1041
 3736 00e2 002D     		cmp	r5, #0
 3737 00e4 40F3C180 		ble	.L332
 516:src/console.c ****       reset_auto_off();
 3738              		.loc 2 516 7 is_stmt 1 view .LVU1042
 3739 00e8 8D4B     		ldr	r3, .L413+64
 3740 00ea 9847     		blx	r3
 3741              	.LVL342:
 517:src/console.c ****       start_key_timer();
 3742              		.loc 2 517 7 view .LVU1043
 3743              	.LBB143:
 3744              	.LBI143:
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 3745              		.loc 2 252 6 view .LVU1044
 3746              	.LBB144:
 253:src/console.c **** }
 3747              		.loc 2 253 5 view .LVU1045
ARM GAS  /tmp/ccuwCXMe.s 			page 102


 253:src/console.c **** }
 3748              		.loc 2 253 19 is_stmt 0 view .LVU1046
 3749 00ec 8D4B     		ldr	r3, .L413+68
 3750 00ee 9847     		blx	r3
 3751              	.LVL343:
 253:src/console.c **** }
 3752              		.loc 2 253 17 view .LVU1047
 3753 00f0 8D4B     		ldr	r3, .L413+72
 3754              	.LBE144:
 3755              	.LBE143:
 3756              	.LBB146:
 3757              	.LBB147:
  64:src/console.c **** 
 3758              		.loc 2 64 6 view .LVU1048
 3759 00f2 632D     		cmp	r5, #99
 3760              	.LBE147:
 3761              	.LBE146:
 3762              	.LBB157:
 3763              	.LBB145:
 253:src/console.c **** }
 3764              		.loc 2 253 17 view .LVU1049
 3765 00f4 1860     		str	r0, [r3]
 3766              	.LBE145:
 3767              	.LBE157:
 518:src/console.c ****     }
 519:src/console.c ****     if (c >= 0) {
 3768              		.loc 2 519 5 is_stmt 1 view .LVU1050
 520:src/console.c ****       remapped = remap(c);
 3769              		.loc 2 520 7 view .LVU1051
 3770              	.LVL344:
 3771              	.LBB158:
 3772              	.LBI146:
  56:src/console.c **** 
 3773              		.loc 2 56 22 view .LVU1052
 3774              	.LBB149:
  58:src/console.c **** 
 3775              		.loc 2 58 3 view .LVU1053
 3776              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3777              		.loc 3 1 1 view .LVU1054
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
ARM GAS  /tmp/ccuwCXMe.s 			page 103


  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3778              		.loc 3 59 3 view .LVU1055
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX}, // Complex
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
ARM GAS  /tmp/ccuwCXMe.s 			page 104


  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     //    {K_MULTI, 1}, // lastX 
  78:src/keytran.c ****     {K_OP, RARG( RARG_RCL, regL_idx )}, // lastX 
  79:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
  80:src/keytran.c ****     {K_SETMENU,  M_Disp}, // DISP menu
  81:src/keytran.c ****     {K_SETMENU,  M_Clear}, // CLR menu
  82:src/keytran.c ****     // Fourth row of DM42 18--22
  83:src/keytran.c ****     {K40, 0}, // up-arrow
  84:src/keytran.c ****     {K52, 1}, // SLV
  85:src/keytran.c ****     {K_SETMENU,  M_Solve}, // Integral/sum/product menu
  86:src/keytran.c ****     {K44, 3}, // MATRIX cat
  87:src/keytran.c ****     {K_SETMENU,  M_Stats}, // STATS menu
  88:src/keytran.c ****     // Fifth row of DM42 23--27
  89:src/keytran.c ****     {K50, 0}, // down-arrow
  90:src/keytran.c ****     {K_SETMENU,  M_Base}, // BASE menu 
  91:src/keytran.c ****     {K04, 3}, // CONV cat
  92:src/keytran.c ****     {K_SETMENU,  M_Flags}, // FLAGS menu
  93:src/keytran.c ****     {K_SETMENU,  M_Prob}, // PROBS menu
  94:src/keytran.c ****     // Sixth row of DM42 28--32
  95:src/keytran.c ****     {K_G, 0}, // gshift
  96:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  97:src/keytran.c ****     {K_SETMENU,  M_User}, // select user menu
  98:src/keytran.c ****     {K52, 3}, // P.FCN cat
  99:src/keytran.c ****     {K_SETMENU, M_Print}, // Print menu
 100:src/keytran.c ****     // Last row of DM42 33--37
 101:src/keytran.c ****     {K60, 3}, // off
 102:src/keytran.c ****     {K_SETMENU,  M_Setup1}, // SETUP menu
 103:src/keytran.c ****     {K21, 1}, // <(
 104:src/keytran.c ****     {K63, 3}, // P/R
 105:src/keytran.c ****     {K10, 3}, // CAT cat
 106:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_NOP, 0},
 114:src/keytran.c ****     {K_SETMENU,  M_Last}, // last menu
 115:src/keytran.c ****     {K_SETMENU,  M_Misc}, // MISC menu!
 116:src/keytran.c ****   };
 117:src/keytran.c **** 
 118:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3779              		.loc 3 118 3 view .LVU1056
 119:src/keytran.c ****     {K_RELEASE, -1},
 120:src/keytran.c ****     // Top row of DM42 1--6
 121:src/keytran.c ****     {K64, 3}, // sig+
 122:src/keytran.c ****     {K34, 1}, // 1/x
 123:src/keytran.c ****     {K44, 1}, // sqrt x
 124:src/keytran.c ****     {K31, 2}, // 10^x
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     {K_NOP, 0}, // no function
 127:src/keytran.c ****     // Next row of DM42 7--12
 128:src/keytran.c ****     {K_NOP, 0}, // no function
 129:src/keytran.c ****     {K11, 3}, // View
 130:src/keytran.c ****     {K12, 3}, // Rup
ARM GAS  /tmp/ccuwCXMe.s 			page 105


 131:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 133:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 134:src/keytran.c ****     // Third row of DM42 13--17
 135:src/keytran.c ****     {K20, 2}, // fill
 136:src/keytran.c ****     {K_SETMENU,  M_Swap}, // X<>Y menu
 137:src/keytran.c ****     {K05, 3}, // MODE cat
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     {K_NOP, 0}, // no function
 140:src/keytran.c ****     // Fourth row of DM42 18--22
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K_NOP, 0}, // no function
 144:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 145:src/keytran.c ****     {K42, 3}, // STAT catalogue
 146:src/keytran.c ****     // Fifth row of DM42 23--27
 147:src/keytran.c ****     {K_NOP, 0}, // no function 
 148:src/keytran.c ****     {K_NOP, 0}, // no function
 149:src/keytran.c ****     {K20, 3}, // CONST catalogue
 150:src/keytran.c ****     {K51, 3}, // TEST catalogue
 151:src/keytran.c ****     {K41, 3}, // PROB catalogue
 152:src/keytran.c ****     // Sixth row of DM42 28--32
 153:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     //    {K_MULTI, SETUMEN}, // Set up user menu
 156:src/keytran.c ****     {K_SETMENU, M_Usermenu}, //User menu create
 157:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 158:src/keytran.c ****     {K_NOP, 0}, // no function
 159:src/keytran.c ****     // Last row of DM42 33--37
 160:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 161:src/keytran.c ****     {K_SETMENU,  M_Setup2}, // SETUP2 menu
 162:src/keytran.c ****     {K_NOP, 0}, // no function
 163:src/keytran.c ****     {K_SETMENU,  M_Program}, // P.FCN menu
 164:src/keytran.c ****     {K50, 3}, // Status
 165:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****     {K_NOP, 0},
 174:src/keytran.c ****     {K_NOP, 0},
 175:src/keytran.c ****   };
 176:src/keytran.c **** 
 177:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3780              		.loc 3 177 1 view .LVU1057
 178:src/keytran.c ****     {K_RELEASE, -1},
 179:src/keytran.c ****     // Top row of DM42 1--6
 180:src/keytran.c ****     {K00, -1},
 181:src/keytran.c ****     {K01, -1},
 182:src/keytran.c ****     {K02, -1},
 183:src/keytran.c ****     {K03, -1},
 184:src/keytran.c ****     {K04, -1},
 185:src/keytran.c ****     {K05, -1},
 186:src/keytran.c ****     // Next row of DM42 7--12
ARM GAS  /tmp/ccuwCXMe.s 			page 106


 187:src/keytran.c ****     {K10, -1},
 188:src/keytran.c ****     {K11, -1},
 189:src/keytran.c ****     {K12, -1},
 190:src/keytran.c ****     {K13, -1},
 191:src/keytran.c ****     {K14, -1},
 192:src/keytran.c ****     {K15, -1},
 193:src/keytran.c ****     // Third row of DM42 13--17
 194:src/keytran.c ****     {K20, -1},
 195:src/keytran.c ****     {K21, -1},
 196:src/keytran.c ****     {K22, -1},
 197:src/keytran.c ****     {K23, -1},
 198:src/keytran.c ****     {K24, -1},
 199:src/keytran.c ****     // Fourth row of DM42 18--22
 200:src/keytran.c ****     {K30, -1},
 201:src/keytran.c ****     {K31, -1},
 202:src/keytran.c ****     {K32, -1},
 203:src/keytran.c ****     {K33, -1},
 204:src/keytran.c ****     {K34, -1},
 205:src/keytran.c ****     // Fifth row of DM42 23--27
 206:src/keytran.c ****     {K40, -1},
 207:src/keytran.c ****     {K41, -1},
 208:src/keytran.c ****     {K42, -1},
 209:src/keytran.c ****     {K43, -1},
 210:src/keytran.c ****     {K44, -1},
 211:src/keytran.c ****     // Sixth row of DM42 28--32
 212:src/keytran.c ****     {K50, -1},
 213:src/keytran.c ****     {K51, -1},
 214:src/keytran.c ****     {K52, -1},
 215:src/keytran.c ****     {K53, -1},
 216:src/keytran.c ****     {K54, -1},
 217:src/keytran.c ****     // Last row of DM42 33--37
 218:src/keytran.c ****     {K60, -1},
 219:src/keytran.c ****     {K61, -1},
 220:src/keytran.c ****     {K62, -1},
 221:src/keytran.c ****     {K63, -1},
 222:src/keytran.c ****     {K64, -1},
 223:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_NOP, -1},
 227:src/keytran.c ****     {K_NOP, -1},
 228:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 229:src/keytran.c ****     {K_CMPLX, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c ****     {K_NOP, -1},
 232:src/keytran.c ****     {K_NOP, -1},
 233:src/keytran.c **** };
 234:src/keytran.c **** 
 235:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3781              		.loc 3 235 1 view .LVU1058
  62:src/console.c **** 
 3782              		.loc 2 62 3 view .LVU1059
  64:src/console.c **** 
 3783              		.loc 2 64 3 view .LVU1060
  64:src/console.c **** 
 3784              		.loc 2 64 6 is_stmt 0 view .LVU1061
 3785 00f6 00F08181 		beq	.L396
ARM GAS  /tmp/ccuwCXMe.s 			page 107


  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3786              		.loc 2 66 3 is_stmt 1 view .LVU1062
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3787              		.loc 2 66 6 is_stmt 0 view .LVU1063
 3788 00fa 2C2D     		cmp	r5, #44
 3789 00fc 00F04F81 		beq	.L335
 3790              	.LVL345:
 3791              	.L369:
  71:src/console.c ****     return mapping_running[c];
 3792              		.loc 2 71 3 is_stmt 1 view .LVU1064
  71:src/console.c ****     return mapping_running[c];
 3793              		.loc 2 71 15 is_stmt 0 view .LVU1065
 3794 0100 8A4A     		ldr	r2, .L413+76
 3795 0102 8B4B     		ldr	r3, .L413+80
 3796 0104 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3797 0108 1968     		ldr	r1, [r3]
  71:src/console.c ****     return mapping_running[c];
 3798              		.loc 2 71 6 view .LVU1066
 3799 010a 59EA0109 		orrs	r9, r9, r1
 3800 010e 40F06881 		bne	.L397
  75:src/console.c ****   
 3801              		.loc 2 75 3 is_stmt 1 view .LVU1067
  75:src/console.c ****   
 3802              		.loc 2 75 22 is_stmt 0 view .LVU1068
 3803 0112 04A8     		add	r0, sp, #16
 3804 0114 FFF7FEFF 		bl	get_current_menu_ref
 3805              	.LVL346:
  77:src/console.c ****   case KEY_F1:
 3806              		.loc 2 77 3 is_stmt 1 view .LVU1069
 3807 0118 A5F12603 		sub	r3, r5, #38
 3808 011c 052B     		cmp	r3, #5
 3809 011e 00F27781 		bhi	.L337
 3810 0122 DFE813F0 		tbh	[pc, r3, lsl #1]
 3811              	.L339:
 3812 0126 7D01     		.2byte	(.L344-.L339)/2
 3813 0128 0B00     		.2byte	(.L343-.L339)/2
 3814 012a 1500     		.2byte	(.L342-.L339)/2
 3815 012c 1F00     		.2byte	(.L341-.L339)/2
 3816 012e 2900     		.2byte	(.L340-.L339)/2
 3817 0130 3300     		.2byte	(.L338-.L339)/2
 3818              		.p2align 1
 3819              	.L345:
  80:src/console.c ****   case KEY_F2:
 3820              		.loc 2 80 5 view .LVU1070
  80:src/console.c ****   case KEY_F2:
 3821              		.loc 2 80 9 is_stmt 0 view .LVU1071
 3822 0132 FFF7FEFF 		bl	cur_shift
 3823              	.LVL347:
  80:src/console.c ****   case KEY_F2:
 3824              		.loc 2 80 8 view .LVU1072
 3825 0136 0128     		cmp	r0, #1
 3826 0138 00F00882 		beq	.L398
 3827              	.L343:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3828              		.loc 2 82 5 is_stmt 1 view .LVU1073
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3829              		.loc 2 82 9 is_stmt 0 view .LVU1074
ARM GAS  /tmp/ccuwCXMe.s 			page 108


 3830 013c FFF7FEFF 		bl	cur_shift
 3831              	.LVL348:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3832              		.loc 2 82 8 view .LVU1075
 3833 0140 0028     		cmp	r0, #0
 3834 0142 00F09A81 		beq	.L399
  83:src/console.c ****   case KEY_F3:
 3835              		.loc 2 83 5 is_stmt 1 view .LVU1076
  83:src/console.c ****   case KEY_F3:
 3836              		.loc 2 83 9 is_stmt 0 view .LVU1077
 3837 0146 FFF7FEFF 		bl	cur_shift
 3838              	.LVL349:
  83:src/console.c ****   case KEY_F3:
 3839              		.loc 2 83 8 view .LVU1078
 3840 014a 0128     		cmp	r0, #1
 3841 014c 00F0DF81 		beq	.L400
 3842              	.L342:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3843              		.loc 2 85 5 is_stmt 1 view .LVU1079
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3844              		.loc 2 85 9 is_stmt 0 view .LVU1080
 3845 0150 FFF7FEFF 		bl	cur_shift
 3846              	.LVL350:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3847              		.loc 2 85 8 view .LVU1081
 3848 0154 0028     		cmp	r0, #0
 3849 0156 00F08681 		beq	.L401
  86:src/console.c ****   case KEY_F4:
 3850              		.loc 2 86 5 is_stmt 1 view .LVU1082
  86:src/console.c ****   case KEY_F4:
 3851              		.loc 2 86 9 is_stmt 0 view .LVU1083
 3852 015a FFF7FEFF 		bl	cur_shift
 3853              	.LVL351:
  86:src/console.c ****   case KEY_F4:
 3854              		.loc 2 86 8 view .LVU1084
 3855 015e 0128     		cmp	r0, #1
 3856 0160 00F0CB81 		beq	.L402
 3857              	.L341:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3858              		.loc 2 88 5 is_stmt 1 view .LVU1085
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3859              		.loc 2 88 9 is_stmt 0 view .LVU1086
 3860 0164 FFF7FEFF 		bl	cur_shift
 3861              	.LVL352:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3862              		.loc 2 88 8 view .LVU1087
 3863 0168 0028     		cmp	r0, #0
 3864 016a 00F07281 		beq	.L403
  89:src/console.c ****   case KEY_F5:
 3865              		.loc 2 89 5 is_stmt 1 view .LVU1088
  89:src/console.c ****   case KEY_F5:
 3866              		.loc 2 89 9 is_stmt 0 view .LVU1089
 3867 016e FFF7FEFF 		bl	cur_shift
 3868              	.LVL353:
  89:src/console.c ****   case KEY_F5:
 3869              		.loc 2 89 8 view .LVU1090
 3870 0172 0128     		cmp	r0, #1
ARM GAS  /tmp/ccuwCXMe.s 			page 109


 3871 0174 00F0AD81 		beq	.L404
 3872              	.L340:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3873              		.loc 2 91 5 is_stmt 1 view .LVU1091
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3874              		.loc 2 91 9 is_stmt 0 view .LVU1092
 3875 0178 FFF7FEFF 		bl	cur_shift
 3876              	.LVL354:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3877              		.loc 2 91 8 view .LVU1093
 3878 017c 0028     		cmp	r0, #0
 3879 017e 00F05E81 		beq	.L405
  92:src/console.c ****   case KEY_F6:
 3880              		.loc 2 92 5 is_stmt 1 view .LVU1094
  92:src/console.c ****   case KEY_F6:
 3881              		.loc 2 92 9 is_stmt 0 view .LVU1095
 3882 0182 FFF7FEFF 		bl	cur_shift
 3883              	.LVL355:
  92:src/console.c ****   case KEY_F6:
 3884              		.loc 2 92 8 view .LVU1096
 3885 0186 0128     		cmp	r0, #1
 3886 0188 00F0AD81 		beq	.L406
 3887              	.L338:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3888              		.loc 2 94 5 is_stmt 1 view .LVU1097
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3889              		.loc 2 94 9 is_stmt 0 view .LVU1098
 3890 018c FFF7FEFF 		bl	cur_shift
 3891              	.LVL356:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3892              		.loc 2 94 8 view .LVU1099
 3893 0190 0028     		cmp	r0, #0
 3894 0192 40F03981 		bne	.L350
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3895              		.loc 2 94 33 is_stmt 1 view .LVU1100
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3896              		.loc 2 94 51 is_stmt 0 view .LVU1101
 3897 0196 DDE93001 		ldrd	r0, r1, [sp, #192]
 3898 019a 9DF8C050 		ldrb	r5, [sp, #192]	@ zero_extendqisi2
 3899              	.LVL357:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3900              		.loc 2 94 51 view .LVU1102
 3901 019e 0DF1080A 		add	r10, sp, #8
 3902              	.LBE149:
 3903              	.LBE158:
 521:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3904              		.loc 2 521 10 view .LVU1103
 3905 01a2 2F2D     		cmp	r5, #47
 3906              	.LBB159:
 3907              	.LBB150:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3908              		.loc 2 94 51 view .LVU1104
 3909 01a4 8AE80300 		stm	r10, {r0, r1}
 3910 01a8 8946     		mov	r9, r1
 3911              	.LVL358:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3912              		.loc 2 94 51 view .LVU1105
ARM GAS  /tmp/ccuwCXMe.s 			page 110


 3913              	.LBE150:
 3914              	.LBE159:
 3915              		.loc 2 521 7 is_stmt 1 view .LVU1106
 3916              		.loc 2 521 10 is_stmt 0 view .LVU1107
 3917 01aa 6CD1     		bne	.L361
 3918              	.LVL359:
 3919              	.L409:
 522:src/console.c **** 	set_menu ( remapped.shift );
 3920              		.loc 2 522 2 is_stmt 1 view .LVU1108
 3921              	.LBB160:
 3922              	.LBB161:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3923              		.loc 1 109 13 is_stmt 0 view .LVU1109
 3924 01ac 614A     		ldr	r2, .L413+84
 3925 01ae 92F90030 		ldrsb	r3, [r2]
 3926              	.LBE161:
 3927              	.LBE160:
 3928              		.loc 2 522 2 view .LVU1110
 3929 01b2 4FFA89F1 		sxtb	r1, r9
 3930              	.LVL360:
 3931              	.LBB164:
 3932              	.LBI160:
 108:src/menu.c    ****   menu_name m = current_menu;
 3933              		.loc 1 108 6 is_stmt 1 view .LVU1111
 3934              	.LBB162:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3935              		.loc 1 109 3 view .LVU1112
 110:src/menu.c    ****     current_menu = default_menu;
 3936              		.loc 1 110 3 view .LVU1113
 110:src/menu.c    ****     current_menu = default_menu;
 3937              		.loc 1 110 6 is_stmt 0 view .LVU1114
 3938 01b6 9942     		cmp	r1, r3
 3939 01b8 00F02281 		beq	.L407
 113:src/menu.c    ****     current_menu = last_menu;
 3940              		.loc 1 113 8 is_stmt 1 view .LVU1115
 113:src/menu.c    ****     current_menu = last_menu;
 3941              		.loc 1 113 11 is_stmt 0 view .LVU1116
 3942 01bc 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 3943              		.loc 1 114 5 is_stmt 1 view .LVU1117
 114:src/menu.c    ****   }
 3944              		.loc 1 114 18 is_stmt 0 view .LVU1118
 3945 01be 04BF     		itt	eq
 3946 01c0 5D49     		ldreq	r1, .L413+88
 3947              	.LVL361:
 114:src/menu.c    ****   }
 3948              		.loc 1 114 18 view .LVU1119
 3949 01c2 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 3950              		.loc 1 117 5 is_stmt 1 view .LVU1120
 117:src/menu.c    ****   }
 3951              		.loc 1 117 18 is_stmt 0 view .LVU1121
 3952 01c4 1170     		strb	r1, [r2]
 3953              	.LVL362:
 3954              	.L363:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3955              		.loc 1 119 3 is_stmt 1 view .LVU1122
ARM GAS  /tmp/ccuwCXMe.s 			page 111


 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3956              		.loc 1 119 6 is_stmt 0 view .LVU1123
 3957 01c6 092B     		cmp	r3, #9
 3958 01c8 03D0     		beq	.L365
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3959              		.loc 1 119 23 view .LVU1124
 3960 01ca 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3961              		.loc 1 119 43 is_stmt 1 view .LVU1125
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3962              		.loc 1 119 53 is_stmt 0 view .LVU1126
 3963 01cc 1CBF     		itt	ne
 3964 01ce 5A4A     		ldrne	r2, .L413+88
 3965 01d0 1370     		strbne	r3, [r2]
 3966              	.L365:
 3967              	.LVL363:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3968              		.loc 1 119 53 view .LVU1127
 3969              	.LBE162:
 3970              	.LBE164:
 523:src/console.c **** 	display_current_menu ();
 3971              		.loc 2 523 2 is_stmt 1 view .LVU1128
 3972 01d2 FFF7FEFF 		bl	display_current_menu
 3973              	.LVL364:
 524:src/console.c **** 	reset_shift();
 3974              		.loc 2 524 2 view .LVU1129
 3975 01d6 FFF7FEFF 		bl	reset_shift
 3976              	.LVL365:
 525:src/console.c **** 	remapped = no_key;
 3977              		.loc 2 525 2 view .LVU1130
 3978              		.loc 2 525 11 is_stmt 0 view .LVU1131
 3979 01da 584B     		ldr	r3, .L413+92
 3980 01dc 93E80300 		ldm	r3, {r0, r1}
 3981 01e0 0DF1080A 		add	r10, sp, #8
 3982 01e4 8AE80300 		stm	r10, {r0, r1}
 3983 01e8 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3984              	.LVL366:
 3985              		.loc 2 525 11 view .LVU1132
 3986 01ea 8946     		mov	r9, r1
 3987              	.LVL367:
 3988              		.loc 2 525 11 view .LVU1133
 3989 01ec 4BE0     		b	.L361
 3990              	.LVL368:
 3991              	.L315:
 452:src/console.c ****     {
 3992              		.loc 2 452 10 is_stmt 1 view .LVU1134
 452:src/console.c ****     {
 3993              		.loc 2 452 15 is_stmt 0 view .LVU1135
 3994 01ee 2568     		ldr	r5, [r4]
 452:src/console.c ****     {
 3995              		.loc 2 452 13 view .LVU1136
 3996 01f0 15F40075 		ands	r5, r5, #512
 3997 01f4 7FF447AF 		bne	.L316
 452:src/console.c ****     {
 3998              		.loc 2 452 35 discriminator 1 view .LVU1137
 3999 01f8 B847     		blx	r7
 4000              	.LVL369:
ARM GAS  /tmp/ccuwCXMe.s 			page 112


 452:src/console.c ****     {
 4001              		.loc 2 452 32 discriminator 1 view .LVU1138
 4002 01fa 0028     		cmp	r0, #0
 4003 01fc 3FF443AF 		beq	.L316
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 4004              		.loc 2 454 7 is_stmt 1 view .LVU1139
 4005 0200 2368     		ldr	r3, [r4]
 4006 0202 23F00203 		bic	r3, r3, #2
 455:src/console.c ****       sys_sleep();
 4007              		.loc 2 455 7 is_stmt 0 view .LVU1140
 4008 0206 2846     		mov	r0, r5
 4009 0208 6421     		movs	r1, #100
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 4010              		.loc 2 454 7 view .LVU1141
 4011 020a 2360     		str	r3, [r4]
 455:src/console.c ****       sys_sleep();
 4012              		.loc 2 455 7 is_stmt 1 view .LVU1142
 4013 020c C047     		blx	r8
 4014              	.LVL370:
 456:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 4015              		.loc 2 456 7 view .LVU1143
 4016 020e 3D4B     		ldr	r3, .L413+36
 4017 0210 9847     		blx	r3
 4018              	.LVL371:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4019              		.loc 2 457 7 view .LVU1144
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4020              		.loc 2 457 11 is_stmt 0 view .LVU1145
 4021 0212 4B4B     		ldr	r3, .L413+96
 4022 0214 2846     		mov	r0, r5
 4023 0216 9847     		blx	r3
 4024              	.LVL372:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4025              		.loc 2 457 10 view .LVU1146
 4026 0218 48B1     		cbz	r0, .L320
 458:src/console.c **** 	if (Pause > 0) Pause--;
 4027              		.loc 2 458 2 is_stmt 1 view .LVU1147
 4028 021a 4A4B     		ldr	r3, .L413+100
 4029 021c 6220     		movs	r0, #98
 4030 021e 9847     		blx	r3
 4031              	.LVL373:
 459:src/console.c ****       }
 4032              		.loc 2 459 2 view .LVU1148
 459:src/console.c ****       }
 4033              		.loc 2 459 12 is_stmt 0 view .LVU1149
 4034 0220 424B     		ldr	r3, .L413+76
 4035 0222 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 459:src/console.c ****       }
 4036              		.loc 2 459 5 view .LVU1150
 4037 0224 1AB1     		cbz	r2, .L320
 459:src/console.c ****       }
 4038              		.loc 2 459 17 is_stmt 1 discriminator 1 view .LVU1151
 459:src/console.c ****       }
 4039              		.loc 2 459 22 is_stmt 0 discriminator 1 view .LVU1152
 4040 0226 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4041 0228 013A     		subs	r2, r2, #1
 4042 022a D2B2     		uxtb	r2, r2
ARM GAS  /tmp/ccuwCXMe.s 			page 113


 4043 022c 1A70     		strb	r2, [r3]
 4044              	.L320:
 461:src/console.c ****     }
 4045              		.loc 2 461 7 is_stmt 1 view .LVU1153
 4046 022e 464B     		ldr	r3, .L413+104
 4047 0230 0020     		movs	r0, #0
 4048 0232 9847     		blx	r3
 4049              	.LVL374:
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4050              		.loc 2 465 5 view .LVU1154
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4051              		.loc 2 465 9 is_stmt 0 view .LVU1155
 4052 0234 2368     		ldr	r3, [r4]
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4053              		.loc 2 465 8 view .LVU1156
 4054 0236 9805     		lsls	r0, r3, #22
 4055 0238 7FF529AF 		bpl	.L408
 4056              	.L322:
 466:src/console.c ****         // Going to off mode
 4057              		.loc 2 466 7 is_stmt 1 view .LVU1157
 466:src/console.c ****         // Going to off mode
 4058              		.loc 2 466 12 is_stmt 0 view .LVU1158
 4059 023c 2568     		ldr	r5, [r4]
 466:src/console.c ****         // Going to off mode
 4060              		.loc 2 466 10 view .LVU1159
 4061 023e 15F00405 		ands	r5, r5, #4
 4062 0242 7FF412AF 		bne	.L314
 468:src/console.c ****         draw_power_off_image(1);
 4063              		.loc 2 468 9 is_stmt 1 view .LVU1160
 4064 0246 414B     		ldr	r3, .L413+108
 4065 0248 2846     		mov	r0, r5
 4066 024a 9847     		blx	r3
 4067              	.LVL375:
 469:src/console.c **** 
 4068              		.loc 2 469 9 view .LVU1161
 4069 024c 404B     		ldr	r3, .L413+112
 4070 024e 0120     		movs	r0, #1
 4071 0250 9847     		blx	r3
 4072              	.LVL376:
 471:src/console.c ****         SET_ST(STAT_SUSPENDED);
 4073              		.loc 2 471 9 view .LVU1162
 4074 0252 404B     		ldr	r3, .L413+116
 4075 0254 2846     		mov	r0, r5
 4076 0256 9847     		blx	r3
 4077              	.LVL377:
 472:src/console.c ****         SET_ST(STAT_OFF);
 4078              		.loc 2 472 9 view .LVU1163
 4079 0258 2368     		ldr	r3, [r4]
 4080 025a 43F00403 		orr	r3, r3, #4
 4081 025e 2360     		str	r3, [r4]
 473:src/console.c ****       }
 4082              		.loc 2 473 9 view .LVU1164
 4083 0260 2368     		ldr	r3, [r4]
 4084 0262 43F01003 		orr	r3, r3, #16
 4085 0266 2360     		str	r3, [r4]
 4086 0268 FFE6     		b	.L314
 4087              	.LVL378:
ARM GAS  /tmp/ccuwCXMe.s 			page 114


 4088              	.L332:
 519:src/console.c ****       remapped = remap(c);
 4089              		.loc 2 519 5 view .LVU1165
 519:src/console.c ****       remapped = remap(c);
 4090              		.loc 2 519 8 is_stmt 0 view .LVU1166
 4091 026a 7FF4FEAE 		bne	.L314
 4092 026e 47E7     		b	.L369
 4093              	.L331:
 519:src/console.c ****       remapped = remap(c);
 4094              		.loc 2 519 5 is_stmt 1 view .LVU1167
 520:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 4095              		.loc 2 520 7 view .LVU1168
 4096              	.LVL379:
 4097              	.LBB165:
  56:src/console.c **** 
 4098              		.loc 2 56 22 view .LVU1169
 4099              	.LBB151:
  58:src/console.c **** 
 4100              		.loc 2 58 3 view .LVU1170
   1:src/keytran.c ****     {K_RELEASE, -1},
 4101              		.loc 3 1 1 view .LVU1171
  59:src/keytran.c ****     {K_RELEASE, -1},
 4102              		.loc 3 59 3 view .LVU1172
 118:src/keytran.c ****     {K_RELEASE, -1},
 4103              		.loc 3 118 3 view .LVU1173
 177:src/keytran.c ****     {K_RELEASE, -1},
 4104              		.loc 3 177 1 view .LVU1174
 4105              		.loc 3 235 1 view .LVU1175
  62:src/console.c **** 
 4106              		.loc 2 62 3 view .LVU1176
  62:src/console.c **** 
 4107              		.loc 2 62 23 view .LVU1177
  62:src/console.c **** 
 4108              		.loc 2 62 30 is_stmt 0 view .LVU1178
 4109 0270 394B     		ldr	r3, .L413+120
 4110              	.LVL380:
 4111              	.L394:
  62:src/console.c **** 
 4112              		.loc 2 62 30 view .LVU1179
 4113 0272 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4114              	.LVL381:
  62:src/console.c **** 
 4115              		.loc 2 62 30 view .LVU1180
 4116 0274 93E80300 		ldm	r3, {r0, r1}
 4117 0278 0DF1080A 		add	r10, sp, #8
 4118 027c 8AE80300 		stm	r10, {r0, r1}
 4119 0280 8946     		mov	r9, r1
 4120              	.LVL382:
 4121              	.L334:
  62:src/console.c **** 
 4122              		.loc 2 62 30 view .LVU1181
 4123              	.LBE151:
 4124              	.LBE165:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4125              		.loc 2 521 7 is_stmt 1 view .LVU1182
 521:src/console.c **** 	set_menu ( remapped.shift );
 4126              		.loc 2 521 10 is_stmt 0 view .LVU1183
ARM GAS  /tmp/ccuwCXMe.s 			page 115


 4127 0282 2F2D     		cmp	r5, #47
 4128 0284 92D0     		beq	.L409
 4129              	.L361:
 526:src/console.c ****       }
 527:src/console.c ****       if (remapped.key_34s == K_SYS) {
 4130              		.loc 2 527 7 is_stmt 1 view .LVU1184
 4131              		.loc 2 527 10 is_stmt 0 view .LVU1185
 4132 0286 302D     		cmp	r5, #48
 4133 0288 19D1     		bne	.L366
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4134              		.loc 2 528 2 is_stmt 1 view .LVU1186
 4135 028a 2368     		ldr	r3, [r4]
 529:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 4136              		.loc 2 529 2 is_stmt 0 view .LVU1187
 4137 028c 334D     		ldr	r5, .L413+124
 4138              	.LVL383:
 4139              		.loc 2 529 2 view .LVU1188
 4140 028e 3448     		ldr	r0, .L413+128
 4141 0290 0022     		movs	r2, #0
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4142              		.loc 2 528 2 view .LVU1189
 4143 0292 43F04003 		orr	r3, r3, #64
 4144              		.loc 2 529 2 view .LVU1190
 4145 0296 1146     		mov	r1, r2
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4146              		.loc 2 528 2 view .LVU1191
 4147 0298 2360     		str	r3, [r4]
 4148              		.loc 2 529 2 is_stmt 1 view .LVU1192
 4149 029a A847     		blx	r5
 4150              	.LVL384:
 530:src/console.c **** 	CLR_ST(STAT_MENU);
 4151              		.loc 2 530 2 view .LVU1193
 4152 029c 2368     		ldr	r3, [r4]
 4153 029e 23F04003 		bic	r3, r3, #64
 4154 02a2 2360     		str	r3, [r4]
 531:src/console.c **** 	reset_shift();
 4155              		.loc 2 531 2 view .LVU1194
 4156 02a4 FFF7FEFF 		bl	reset_shift
 4157              	.LVL385:
 532:src/console.c **** 	remapped =  no_key;
 4158              		.loc 2 532 2 view .LVU1195
 4159              		.loc 2 532 11 is_stmt 0 view .LVU1196
 4160 02a8 244B     		ldr	r3, .L413+92
 4161 02aa 93E80300 		ldm	r3, {r0, r1}
 4162 02ae 0DF1080A 		add	r10, sp, #8
 4163 02b2 8AE80300 		stm	r10, {r0, r1}
 4164 02b6 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4165              	.LVL386:
 4166              		.loc 2 532 11 view .LVU1197
 4167 02b8 8946     		mov	r9, r1
 4168              	.LVL387:
 533:src/console.c **** 	display_current_menu();
 4169              		.loc 2 533 2 is_stmt 1 view .LVU1198
 4170 02ba FFF7FEFF 		bl	display_current_menu
 4171              	.LVL388:
 4172              	.L366:
 534:src/console.c ****       }
ARM GAS  /tmp/ccuwCXMe.s 			page 116


 535:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 4173              		.loc 2 535 7 view .LVU1199
 4174              		.loc 2 535 10 is_stmt 0 view .LVU1200
 4175 02be 312D     		cmp	r5, #49
 4176 02c0 6FD0     		beq	.L370
 536:src/console.c **** 	remapped = do_multi (remapped);
 537:src/console.c **** 	display_current_menu();
 538:src/console.c ****       }
 539:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 4177              		.loc 2 539 7 is_stmt 1 view .LVU1201
 4178              		.loc 2 539 10 is_stmt 0 view .LVU1202
 4179 02c2 322D     		cmp	r5, #50
 4180 02c4 00F08780 		beq	.L368
 4181              	.LVL389:
 4182              	.L395:
 4183              		.loc 2 539 10 view .LVU1203
 4184 02c8 0DF1080A 		add	r10, sp, #8
 4185              	.L357:
 4186              	.LVL390:
 540:src/console.c ****       process_keycode_with_shift(remapped);
 4187              		.loc 2 540 7 is_stmt 1 view .LVU1204
 4188              		.loc 2 540 7 is_stmt 0 view .LVU1205
 4189 02cc 8DF80850 		strb	r5, [sp, #8]
 4190 02d0 CDF80C90 		str	r9, [sp, #12]
 4191 02d4 9AE80300 		ldm	r10, {r0, r1}
 4192 02d8 FFF7FEFF 		bl	process_keycode_with_shift
 4193              	.LVL391:
 4194 02dc C5E6     		b	.L314
 4195              	.L414:
 4196 02de 00BF     		.align	2
 4197              	.L413:
 4198 02e0 00000000 		.word	StateWhileOn
 4199 02e4 00000000 		.word	DispMsg
 4200 02e8 00200010 		.word	268443648
 4201 02ec 00000000 		.word	KeyCallback
 4202 02f0 7D030008 		.word	134218621
 4203 02f4 00000000 		.word	run_menu_item
 4204 02f8 00000000 		.word	menu_line_str
 4205 02fc 31020008 		.word	134218289
 4206 0300 00000000 		.word	JustDisplayed
 4207 0304 19040008 		.word	134218777
 4208 0308 19020008 		.word	134218265
 4209 030c 91030008 		.word	134218641
 4210 0310 E5020008 		.word	134218469
 4211 0314 59020008 		.word	134218329
 4212 0318 35020008 		.word	134218293
 4213 031c 89030008 		.word	134218633
 4214 0320 B9030008 		.word	134218681
 4215 0324 B9040008 		.word	134218937
 4216 0328 00000000 		.word	.LANCHOR8
 4217 032c 00000000 		.word	Pause
 4218 0330 00000000 		.word	Running
 4219 0334 00000000 		.word	.LANCHOR1
 4220 0338 00000000 		.word	.LANCHOR3
 4221 033c 00000000 		.word	.LANCHOR10
 4222 0340 01040008 		.word	134218753
 4223 0344 81030008 		.word	134218625
ARM GAS  /tmp/ccuwCXMe.s 			page 117


 4224 0348 F5030008 		.word	134218741
 4225 034c 55020008 		.word	134218325
 4226 0350 2D040008 		.word	134218797
 4227 0354 1D020008 		.word	134218269
 4228 0358 00000000 		.word	.LANCHOR19
 4229 035c 59030008 		.word	134218585
 4230 0360 00000000 		.word	.LANCHOR18
 4231 0364 F9030008 		.word	134218745
 4232              	.LVL392:
 4233              	.L329:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4234              		.loc 2 510 10 is_stmt 1 view .LVU1206
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4235              		.loc 2 510 15 is_stmt 0 view .LVU1207
 4236 0368 824B     		ldr	r3, .L415
 4237 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4238              		.loc 2 510 13 view .LVU1208
 4239 036c DB07     		lsls	r3, r3, #31
 4240 036e 7FF5B5AE 		bpl	.L330
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4241              		.loc 2 510 37 discriminator 1 view .LVU1209
 4242 0372 FFF7FEFF 		bl	DM42_Ticker
 4243              	.LVL393:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4244              		.loc 2 510 37 discriminator 1 view .LVU1210
 4245 0376 804A     		ldr	r2, .L415+4
 4246 0378 804B     		ldr	r3, .L415+8
 4247 037a 02FB0030 		mla	r0, r2, r0, r3
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4248              		.loc 2 510 32 discriminator 1 view .LVU1211
 4249 037e B0F1333F 		cmp	r0, #858993459
 4250 0382 BFF4ABAE 		bcs	.L330
 511:src/console.c ****       finish_LEQ();
 4251              		.loc 2 511 7 is_stmt 1 view .LVU1212
 511:src/console.c ****       finish_LEQ();
 4252              		.loc 2 511 21 is_stmt 0 view .LVU1213
 4253 0386 8420     		movs	r0, #132
 4254 0388 FFF7FEFF 		bl	is_dot
 4255              	.LVL394:
 511:src/console.c ****       finish_LEQ();
 4256              		.loc 2 511 7 view .LVU1214
 4257 038c B0FA80F1 		clz	r1, r0
 4258 0390 4909     		lsrs	r1, r1, #5
 4259 0392 8420     		movs	r0, #132
 4260 0394 FFF7FEFF 		bl	dot
 4261              	.LVL395:
 512:src/console.c ****     }
 4262              		.loc 2 512 7 is_stmt 1 view .LVU1215
 4263 0398 FFF7FEFF 		bl	finish_LEQ
 4264              	.LVL396:
 4265 039c 9EE6     		b	.L330
 4266              	.LVL397:
 4267              	.L335:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4268              		.loc 2 521 7 view .LVU1216
 527:src/console.c **** 	SET_ST(STAT_MENU);
ARM GAS  /tmp/ccuwCXMe.s 			page 118


 4269              		.loc 2 527 7 view .LVU1217
 535:src/console.c **** 	remapped = do_multi (remapped);
 4270              		.loc 2 535 7 view .LVU1218
 4271              	.LBB166:
 4272              	.LBB152:
 4273              	.LBB148:
  68:src/console.c ****   }
 4274              		.loc 2 68 12 is_stmt 0 view .LVU1219
 4275 039e 4FF00C09 		mov	r9, #12
 4276              	.LVL398:
 4277              	.L370:
  68:src/console.c ****   }
 4278              		.loc 2 68 12 view .LVU1220
 4279              	.LBE148:
 4280              	.LBE152:
 4281              	.LBE166:
 536:src/console.c **** 	display_current_menu();
 4282              		.loc 2 536 2 is_stmt 1 view .LVU1221
 536:src/console.c **** 	display_current_menu();
 4283              		.loc 2 536 13 is_stmt 0 view .LVU1222
 4284 03a2 3123     		movs	r3, #49
 4285 03a4 CDF80C90 		str	r9, [sp, #12]
 4286 03a8 8DF80830 		strb	r3, [sp, #8]
 4287 03ac 6D46     		mov	r5, sp
 4288 03ae 0DF1080A 		add	r10, sp, #8
 4289 03b2 9AE80600 		ldm	r10, {r1, r2}
 4290 03b6 2846     		mov	r0, r5
 4291 03b8 FFF7FEFF 		bl	do_multi
 4292              	.LVL399:
 4293 03bc 95E80300 		ldm	r5, {r0, r1}
 4294 03c0 8AE80300 		stm	r10, {r0, r1}
 4295 03c4 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 4296              	.LVL400:
 536:src/console.c **** 	display_current_menu();
 4297              		.loc 2 536 13 view .LVU1223
 4298 03c8 DDF80C90 		ldr	r9, [sp, #12]
 4299              	.LVL401:
 537:src/console.c ****       }
 4300              		.loc 2 537 2 is_stmt 1 view .LVU1224
 4301 03cc FFF7FEFF 		bl	display_current_menu
 4302              	.LVL402:
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4303              		.loc 2 539 7 view .LVU1225
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4304              		.loc 2 539 10 is_stmt 0 view .LVU1226
 4305 03d0 322D     		cmp	r5, #50
 4306 03d2 7FF479AF 		bne	.L395
 4307              	.L368:
 541:src/console.c ****     }
 542:src/console.c ****   }
 543:src/console.c ****   save_ram_file(0);
 4308              		.loc 2 543 3 is_stmt 1 view .LVU1227
 4309 03d6 0020     		movs	r0, #0
 544:src/console.c ****   //  free_storage();
 545:src/console.c ****   return;
 546:src/console.c **** }
 4310              		.loc 2 546 1 is_stmt 0 view .LVU1228
ARM GAS  /tmp/ccuwCXMe.s 			page 119


 4311 03d8 38B0     		add	sp, sp, #224
 4312              		.cfi_remember_state
 4313              		.cfi_def_cfa_offset 32
 4314              		@ sp needed
 4315 03da BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 4316              		.cfi_restore 14
 4317              		.cfi_restore 10
 4318              		.cfi_restore 9
 4319              		.cfi_restore 8
 4320              		.cfi_restore 7
 4321              		.cfi_restore 6
 4322              		.cfi_restore 5
 4323              		.cfi_restore 4
 4324              		.cfi_def_cfa_offset 0
 4325              	.LVL403:
 543:src/console.c ****   //  free_storage();
 4326              		.loc 2 543 3 view .LVU1229
 4327 03de FFF7FEBF 		b	save_ram_file
 4328              	.LVL404:
 4329              	.L397:
 4330              		.cfi_restore_state
 4331              	.LBB167:
 4332              	.LBB153:
  72:src/console.c ****   }
 4333              		.loc 2 72 5 is_stmt 1 view .LVU1230
  72:src/console.c ****   }
 4334              		.loc 2 72 27 is_stmt 0 view .LVU1231
 4335 03e2 674B     		ldr	r3, .L415+12
 4336              	.L393:
 124:src/console.c ****     break;
 4337              		.loc 2 124 26 view .LVU1232
 4338 03e4 03EBC502 		add	r2, r3, r5, lsl #3
 4339 03e8 92E80300 		ldm	r2, {r0, r1}
 4340 03ec 0DF1080A 		add	r10, sp, #8
 4341 03f0 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4342              	.LVL405:
 124:src/console.c ****     break;
 4343              		.loc 2 124 26 view .LVU1233
 4344 03f4 8946     		mov	r9, r1
 4345              	.LVL406:
 124:src/console.c ****     break;
 4346              		.loc 2 124 26 view .LVU1234
 4347 03f6 8AE80300 		stm	r10, {r0, r1}
 4348 03fa 42E7     		b	.L334
 4349              	.LVL407:
 4350              	.L396:
  64:src/console.c **** 
 4351              		.loc 2 64 16 is_stmt 1 view .LVU1235
  64:src/console.c **** 
 4352              		.loc 2 64 23 is_stmt 0 view .LVU1236
 4353 03fc 614B     		ldr	r3, .L415+16
 4354 03fe 38E7     		b	.L394
 4355              	.LVL408:
 4356              	.L407:
  64:src/console.c **** 
 4357              		.loc 2 64 23 view .LVU1237
 4358              	.LBE153:
ARM GAS  /tmp/ccuwCXMe.s 			page 120


 4359              	.LBE167:
 4360              	.LBB168:
 4361              	.LBB163:
 111:src/menu.c    ****   }
 4362              		.loc 1 111 5 is_stmt 1 view .LVU1238
 111:src/menu.c    ****   }
 4363              		.loc 1 111 18 is_stmt 0 view .LVU1239
 4364 0400 6149     		ldr	r1, .L415+20
 4365              	.LVL409:
 111:src/menu.c    ****   }
 4366              		.loc 1 111 18 view .LVU1240
 4367 0402 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4368 0404 1170     		strb	r1, [r2]
 4369 0406 DEE6     		b	.L363
 4370              	.LVL410:
 4371              	.L350:
 111:src/menu.c    ****   }
 4372              		.loc 1 111 18 view .LVU1241
 4373              	.LBE163:
 4374              	.LBE168:
 4375              	.LBB169:
 4376              	.LBB154:
  95:src/console.c ****   }
 4377              		.loc 2 95 5 is_stmt 1 view .LVU1242
  95:src/console.c ****   }
 4378              		.loc 2 95 9 is_stmt 0 view .LVU1243
 4379 0408 FFF7FEFF 		bl	cur_shift
 4380              	.LVL411:
  95:src/console.c ****   }
 4381              		.loc 2 95 8 view .LVU1244
 4382 040c 0128     		cmp	r0, #1
 4383 040e 56D0     		beq	.L410
 4384              	.L337:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4385              		.loc 2 98 3 is_stmt 1 view .LVU1245
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4386              		.loc 2 98 8 is_stmt 0 view .LVU1246
 4387 0410 FFF7FEFF 		bl	get_alpha_state
 4388              	.LVL412:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4389              		.loc 2 98 6 view .LVU1247
 4390 0414 D8B3     		cbz	r0, .L351
  99:src/console.c ****       switch (cur_shift()) { 
 4391              		.loc 2 99 5 is_stmt 1 view .LVU1248
  99:src/console.c ****       switch (cur_shift()) { 
 4392              		.loc 2 99 8 is_stmt 0 view .LVU1249
 4393 0416 1C2D     		cmp	r5, #28
 4394 0418 00F08580 		beq	.L411
 116:src/console.c ****   }
 4395              		.loc 2 116 5 is_stmt 1 view .LVU1250
 116:src/console.c ****   }
 4396              		.loc 2 116 26 is_stmt 0 view .LVU1251
 4397 041c 5B4B     		ldr	r3, .L415+24
 4398 041e E1E7     		b	.L393
 4399              	.L344:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4400              		.loc 2 79 5 is_stmt 1 view .LVU1252
ARM GAS  /tmp/ccuwCXMe.s 			page 121


  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4401              		.loc 2 79 9 is_stmt 0 view .LVU1253
 4402 0420 FFF7FEFF 		bl	cur_shift
 4403              	.LVL413:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4404              		.loc 2 79 8 view .LVU1254
 4405 0424 0028     		cmp	r0, #0
 4406 0426 7FF484AE 		bne	.L345
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4407              		.loc 2 79 33 is_stmt 1 view .LVU1255
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4408              		.loc 2 79 51 is_stmt 0 view .LVU1256
 4409 042a DDE90801 		ldrd	r0, r1, [sp, #32]
 4410 042e 0DF1080A 		add	r10, sp, #8
 4411 0432 8AE80300 		stm	r10, {r0, r1}
 4412 0436 9DF82050 		ldrb	r5, [sp, #32]	@ zero_extendqisi2
 4413              	.LVL414:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4414              		.loc 2 79 51 view .LVU1257
 4415 043a 8946     		mov	r9, r1
 4416              	.LVL415:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4417              		.loc 2 79 51 view .LVU1258
 4418 043c 21E7     		b	.L334
 4419              	.LVL416:
 4420              	.L405:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4421              		.loc 2 91 33 is_stmt 1 view .LVU1259
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4422              		.loc 2 91 51 is_stmt 0 view .LVU1260
 4423 043e DDE92801 		ldrd	r0, r1, [sp, #160]
 4424 0442 0DF1080A 		add	r10, sp, #8
 4425 0446 8AE80300 		stm	r10, {r0, r1}
 4426 044a 9DF8A050 		ldrb	r5, [sp, #160]	@ zero_extendqisi2
 4427              	.LVL417:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4428              		.loc 2 91 51 view .LVU1261
 4429 044e 8946     		mov	r9, r1
 4430              	.LVL418:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4431              		.loc 2 91 51 view .LVU1262
 4432 0450 17E7     		b	.L334
 4433              	.LVL419:
 4434              	.L403:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4435              		.loc 2 88 33 is_stmt 1 view .LVU1263
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4436              		.loc 2 88 51 is_stmt 0 view .LVU1264
 4437 0452 DDE92001 		ldrd	r0, r1, [sp, #128]
 4438 0456 0DF1080A 		add	r10, sp, #8
 4439 045a 8AE80300 		stm	r10, {r0, r1}
 4440 045e 9DF88050 		ldrb	r5, [sp, #128]	@ zero_extendqisi2
 4441              	.LVL420:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4442              		.loc 2 88 51 view .LVU1265
 4443 0462 8946     		mov	r9, r1
 4444              	.LVL421:
ARM GAS  /tmp/ccuwCXMe.s 			page 122


  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4445              		.loc 2 88 51 view .LVU1266
 4446 0464 0DE7     		b	.L334
 4447              	.LVL422:
 4448              	.L401:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4449              		.loc 2 85 33 is_stmt 1 view .LVU1267
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4450              		.loc 2 85 51 is_stmt 0 view .LVU1268
 4451 0466 DDE91801 		ldrd	r0, r1, [sp, #96]
 4452 046a 0DF1080A 		add	r10, sp, #8
 4453 046e 8AE80300 		stm	r10, {r0, r1}
 4454 0472 9DF86050 		ldrb	r5, [sp, #96]	@ zero_extendqisi2
 4455              	.LVL423:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4456              		.loc 2 85 51 view .LVU1269
 4457 0476 8946     		mov	r9, r1
 4458              	.LVL424:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4459              		.loc 2 85 51 view .LVU1270
 4460 0478 03E7     		b	.L334
 4461              	.LVL425:
 4462              	.L399:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4463              		.loc 2 82 33 is_stmt 1 view .LVU1271
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4464              		.loc 2 82 51 is_stmt 0 view .LVU1272
 4465 047a DDE91001 		ldrd	r0, r1, [sp, #64]
 4466 047e 0DF1080A 		add	r10, sp, #8
 4467 0482 8AE80300 		stm	r10, {r0, r1}
 4468 0486 9DF84050 		ldrb	r5, [sp, #64]	@ zero_extendqisi2
 4469              	.LVL426:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4470              		.loc 2 82 51 view .LVU1273
 4471 048a 8946     		mov	r9, r1
 4472              	.LVL427:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4473              		.loc 2 82 51 view .LVU1274
 4474 048c F9E6     		b	.L334
 4475              	.LVL428:
 4476              	.L351:
 119:src/console.c ****   case SHIFT_N:    
 4477              		.loc 2 119 3 is_stmt 1 view .LVU1275
 119:src/console.c ****   case SHIFT_N:    
 4478              		.loc 2 119 11 is_stmt 0 view .LVU1276
 4479 048e FFF7FEFF 		bl	cur_shift
 4480              	.LVL429:
 119:src/console.c ****   case SHIFT_N:    
 4481              		.loc 2 119 3 view .LVU1277
 4482 0492 0128     		cmp	r0, #1
 4483 0494 45D0     		beq	.L358
 4484 0496 0228     		cmp	r0, #2
 4485 0498 02D0     		beq	.L359
 4486 049a 70B1     		cbz	r0, .L360
  58:src/console.c **** 
 4487              		.loc 2 58 41 view .LVU1278
 4488 049c EDB2     		uxtb	r5, r5
ARM GAS  /tmp/ccuwCXMe.s 			page 123


 4489              	.LVL430:
  58:src/console.c **** 
 4490              		.loc 2 58 41 view .LVU1279
 4491 049e F0E6     		b	.L334
 4492              	.LVL431:
 4493              	.L359:
 125:src/console.c ****   case SHIFT_G:
 4494              		.loc 2 125 5 is_stmt 1 view .LVU1280
 127:src/console.c ****     break;
 4495              		.loc 2 127 5 view .LVU1281
 127:src/console.c ****     break;
 4496              		.loc 2 127 26 is_stmt 0 view .LVU1282
 4497 04a0 3B4B     		ldr	r3, .L415+28
 4498 04a2 03EBC502 		add	r2, r3, r5, lsl #3
 4499 04a6 92E80300 		ldm	r2, {r0, r1}
 4500 04aa 0DF1080A 		add	r10, sp, #8
 4501 04ae 8AE80300 		stm	r10, {r0, r1}
 4502 04b2 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4503              	.LVL432:
 127:src/console.c ****     break;
 4504              		.loc 2 127 26 view .LVU1283
 4505 04b6 8946     		mov	r9, r1
 4506              	.LVL433:
 127:src/console.c ****     break;
 4507              		.loc 2 127 26 view .LVU1284
 4508 04b8 E3E6     		b	.L334
 4509              	.LVL434:
 4510              	.L360:
 121:src/console.c ****     break;
 4511              		.loc 2 121 5 is_stmt 1 view .LVU1285
 121:src/console.c ****     break;
 4512              		.loc 2 121 24 is_stmt 0 view .LVU1286
 4513 04ba 364B     		ldr	r3, .L415+32
 4514 04bc 92E7     		b	.L393
 4515              	.L410:
  95:src/console.c ****   }
 4516              		.loc 2 95 33 is_stmt 1 view .LVU1287
  95:src/console.c ****   }
 4517              		.loc 2 95 51 is_stmt 0 view .LVU1288
 4518 04be DDE93201 		ldrd	r0, r1, [sp, #200]
 4519 04c2 0DF1080A 		add	r10, sp, #8
 4520 04c6 8AE80300 		stm	r10, {r0, r1}
 4521 04ca 9DF8C850 		ldrb	r5, [sp, #200]	@ zero_extendqisi2
 4522              	.LVL435:
  95:src/console.c ****   }
 4523              		.loc 2 95 51 view .LVU1289
 4524 04ce 8946     		mov	r9, r1
 4525              	.LVL436:
  95:src/console.c ****   }
 4526              		.loc 2 95 51 view .LVU1290
 4527 04d0 D7E6     		b	.L334
 4528              	.LVL437:
 4529              	.L404:
  89:src/console.c ****   case KEY_F5:
 4530              		.loc 2 89 33 is_stmt 1 view .LVU1291
  89:src/console.c ****   case KEY_F5:
 4531              		.loc 2 89 51 is_stmt 0 view .LVU1292
ARM GAS  /tmp/ccuwCXMe.s 			page 124


 4532 04d2 DDE92201 		ldrd	r0, r1, [sp, #136]
 4533 04d6 0DF1080A 		add	r10, sp, #8
 4534 04da 8AE80300 		stm	r10, {r0, r1}
 4535 04de 9DF88850 		ldrb	r5, [sp, #136]	@ zero_extendqisi2
 4536              	.LVL438:
  89:src/console.c ****   case KEY_F5:
 4537              		.loc 2 89 51 view .LVU1293
 4538 04e2 8946     		mov	r9, r1
 4539              	.LVL439:
  89:src/console.c ****   case KEY_F5:
 4540              		.loc 2 89 51 view .LVU1294
 4541 04e4 CDE6     		b	.L334
 4542              	.LVL440:
 4543              	.L406:
  92:src/console.c ****   case KEY_F6:
 4544              		.loc 2 92 33 is_stmt 1 view .LVU1295
  92:src/console.c ****   case KEY_F6:
 4545              		.loc 2 92 51 is_stmt 0 view .LVU1296
 4546 04e6 DDE92A01 		ldrd	r0, r1, [sp, #168]
 4547 04ea 0DF1080A 		add	r10, sp, #8
 4548 04ee 8AE80300 		stm	r10, {r0, r1}
 4549 04f2 9DF8A850 		ldrb	r5, [sp, #168]	@ zero_extendqisi2
 4550              	.LVL441:
  92:src/console.c ****   case KEY_F6:
 4551              		.loc 2 92 51 view .LVU1297
 4552 04f6 8946     		mov	r9, r1
 4553              	.LVL442:
  92:src/console.c ****   case KEY_F6:
 4554              		.loc 2 92 51 view .LVU1298
 4555 04f8 C3E6     		b	.L334
 4556              	.LVL443:
 4557              	.L402:
  86:src/console.c ****   case KEY_F4:
 4558              		.loc 2 86 33 is_stmt 1 view .LVU1299
  86:src/console.c ****   case KEY_F4:
 4559              		.loc 2 86 51 is_stmt 0 view .LVU1300
 4560 04fa DDE91A01 		ldrd	r0, r1, [sp, #104]
 4561 04fe 0DF1080A 		add	r10, sp, #8
 4562 0502 8AE80300 		stm	r10, {r0, r1}
 4563 0506 9DF86850 		ldrb	r5, [sp, #104]	@ zero_extendqisi2
 4564              	.LVL444:
  86:src/console.c ****   case KEY_F4:
 4565              		.loc 2 86 51 view .LVU1301
 4566 050a 8946     		mov	r9, r1
 4567              	.LVL445:
  86:src/console.c ****   case KEY_F4:
 4568              		.loc 2 86 51 view .LVU1302
 4569 050c B9E6     		b	.L334
 4570              	.LVL446:
 4571              	.L400:
  83:src/console.c ****   case KEY_F3:
 4572              		.loc 2 83 33 is_stmt 1 view .LVU1303
  83:src/console.c ****   case KEY_F3:
 4573              		.loc 2 83 51 is_stmt 0 view .LVU1304
 4574 050e DDE91201 		ldrd	r0, r1, [sp, #72]
 4575 0512 0DF1080A 		add	r10, sp, #8
 4576 0516 8AE80300 		stm	r10, {r0, r1}
ARM GAS  /tmp/ccuwCXMe.s 			page 125


 4577 051a 9DF84850 		ldrb	r5, [sp, #72]	@ zero_extendqisi2
 4578              	.LVL447:
  83:src/console.c ****   case KEY_F3:
 4579              		.loc 2 83 51 view .LVU1305
 4580 051e 8946     		mov	r9, r1
 4581              	.LVL448:
  83:src/console.c ****   case KEY_F3:
 4582              		.loc 2 83 51 view .LVU1306
 4583 0520 AFE6     		b	.L334
 4584              	.LVL449:
 4585              	.L358:
 122:src/console.c ****   case SHIFT_F:
 4586              		.loc 2 122 5 is_stmt 1 view .LVU1307
 124:src/console.c ****     break;
 4587              		.loc 2 124 5 view .LVU1308
 124:src/console.c ****     break;
 4588              		.loc 2 124 26 is_stmt 0 view .LVU1309
 4589 0522 1D4B     		ldr	r3, .L415+36
 4590 0524 5EE7     		b	.L393
 4591              	.L411:
 100:src/console.c ****       case SHIFT_N:
 4592              		.loc 2 100 7 is_stmt 1 view .LVU1310
 100:src/console.c ****       case SHIFT_N:
 4593              		.loc 2 100 15 is_stmt 0 view .LVU1311
 4594 0526 FFF7FEFF 		bl	cur_shift
 4595              	.LVL450:
 100:src/console.c ****       case SHIFT_N:
 4596              		.loc 2 100 7 view .LVU1312
 4597 052a 0328     		cmp	r0, #3
 4598 052c 3FF6CCAE 		bhi	.L395
 4599 0530 0128     		cmp	r0, #1
 4600 0532 09D8     		bhi	.L354
 4601 0534 A0B1     		cbz	r0, .L412
 103:src/console.c ****       case SHIFT_F:
 4602              		.loc 2 103 2 is_stmt 1 view .LVU1313
 105:src/console.c **** 	break;
 4603              		.loc 2 105 2 view .LVU1314
 105:src/console.c **** 	break;
 4604              		.loc 2 105 23 is_stmt 0 view .LVU1315
 4605 0536 194B     		ldr	r3, .L415+40
 4606 0538 93E80300 		ldm	r3, {r0, r1}
 4607 053c 0DF1080A 		add	r10, sp, #8
 4608 0540 8AE80300 		stm	r10, {r0, r1}
 4609              	.LVL451:
 105:src/console.c **** 	break;
 4610              		.loc 2 105 23 view .LVU1316
 4611              	.LBE154:
 4612              	.LBE169:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4613              		.loc 2 521 7 is_stmt 1 view .LVU1317
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4614              		.loc 2 527 7 view .LVU1318
 535:src/console.c **** 	remapped = do_multi (remapped);
 4615              		.loc 2 535 7 view .LVU1319
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4616              		.loc 2 539 7 view .LVU1320
 4617              	.LBB170:
ARM GAS  /tmp/ccuwCXMe.s 			page 126


 4618              	.LBB155:
 105:src/console.c **** 	break;
 4619              		.loc 2 105 23 is_stmt 0 view .LVU1321
 4620 0544 2A25     		movs	r5, #42
 4621              	.LVL452:
 105:src/console.c **** 	break;
 4622              		.loc 2 105 23 view .LVU1322
 4623 0546 C1E6     		b	.L357
 4624              	.LVL453:
 4625              	.L354:
 106:src/console.c ****       case SHIFT_G:
 4626              		.loc 2 106 2 is_stmt 1 view .LVU1323
 108:src/console.c **** 	break;
 4627              		.loc 2 108 2 view .LVU1324
 108:src/console.c **** 	break;
 4628              		.loc 2 108 9 is_stmt 0 view .LVU1325
 4629 0548 154B     		ldr	r3, .L415+44
 4630 054a 92E6     		b	.L394
 4631              	.L398:
  80:src/console.c ****   case KEY_F2:
 4632              		.loc 2 80 33 is_stmt 1 view .LVU1326
  80:src/console.c ****   case KEY_F2:
 4633              		.loc 2 80 51 is_stmt 0 view .LVU1327
 4634 054c DDE90A01 		ldrd	r0, r1, [sp, #40]
 4635 0550 0DF1080A 		add	r10, sp, #8
 4636 0554 8AE80300 		stm	r10, {r0, r1}
 4637 0558 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 4638              	.LVL454:
  80:src/console.c ****   case KEY_F2:
 4639              		.loc 2 80 51 view .LVU1328
 4640 055c 8946     		mov	r9, r1
 4641              	.LVL455:
  80:src/console.c ****   case KEY_F2:
 4642              		.loc 2 80 51 view .LVU1329
 4643 055e 90E6     		b	.L334
 4644              	.LVL456:
 4645              	.L412:
 102:src/console.c **** 	break;
 4646              		.loc 2 102 2 is_stmt 1 view .LVU1330
 102:src/console.c **** 	break;
 4647              		.loc 2 102 21 is_stmt 0 view .LVU1331
 4648 0560 104B     		ldr	r3, .L415+48
 4649 0562 93E80300 		ldm	r3, {r0, r1}
 4650 0566 0DF1080A 		add	r10, sp, #8
 4651 056a 8AE80300 		stm	r10, {r0, r1}
 4652              	.LVL457:
 102:src/console.c **** 	break;
 4653              		.loc 2 102 21 view .LVU1332
 4654              	.LBE155:
 4655              	.LBE170:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4656              		.loc 2 521 7 is_stmt 1 view .LVU1333
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4657              		.loc 2 527 7 view .LVU1334
 535:src/console.c **** 	remapped = do_multi (remapped);
 4658              		.loc 2 535 7 view .LVU1335
 539:src/console.c ****       process_keycode_with_shift(remapped);
ARM GAS  /tmp/ccuwCXMe.s 			page 127


 4659              		.loc 2 539 7 view .LVU1336
 4660              	.LBB171:
 4661              	.LBB156:
 102:src/console.c **** 	break;
 4662              		.loc 2 102 21 is_stmt 0 view .LVU1337
 4663 056e 2925     		movs	r5, #41
 4664              	.LVL458:
 102:src/console.c **** 	break;
 4665              		.loc 2 102 21 view .LVU1338
 4666 0570 ACE6     		b	.L357
 4667              	.L416:
 4668 0572 00BF     		.align	2
 4669              	.L415:
 4670 0574 00000000 		.word	StopWatchStatus
 4671 0578 CDCCCCCC 		.word	-858993459
 4672 057c 99999919 		.word	429496729
 4673 0580 00000000 		.word	.LANCHOR12
 4674 0584 00000000 		.word	.LANCHOR11
 4675 0588 00000000 		.word	.LANCHOR2
 4676 058c 00000000 		.word	.LANCHOR16
 4677 0590 00000000 		.word	.LANCHOR17
 4678 0594 00000000 		.word	.LANCHOR13
 4679 0598 00000000 		.word	.LANCHOR14
 4680 059c E0000000 		.word	.LANCHOR14+224
 4681 05a0 00000000 		.word	.LANCHOR15
 4682 05a4 E0000000 		.word	.LANCHOR13+224
 4683              	.LBE156:
 4684              	.LBE171:
 4685              		.cfi_endproc
 4686              	.LFE34:
 4688              		.global	n_p
 4689              		.comm	print_string,22,4
 4690              		.global	spaces
 4691              		.global	release
 4692              		.global	h_shift
 4693              		.global	g_shift
 4694              		.global	f_shift
 4695              		.global	heartbeat
 4696              		.global	no_key
 4697              		.global	MID_MENU
 4698              		.section	.rodata.str1.4,"aMS",%progbits,1
 4699              		.align	2
 4700              	.LC14:
 4701 0000 53797374 		.ascii	"System!\000"
 4701      656D2100 
 4702              		.global	mid_menu
 4703              		.global	default_menu
 4704              		.global	last_menu
 4705              		.global	current_menu
 4706              		.global	cmplx_key_string
 4707              		.align	2
 4708              	.LC15:
 4709 0008 43505800 		.ascii	"CPX\000"
 4710              		.global	arrow_key_string
 4711              		.align	2
 4712              	.LC16:
 4713 000c 2D2D0D00 		.ascii	"--\015\000"
ARM GAS  /tmp/ccuwCXMe.s 			page 128


 4714              		.global	UserMenu
 4715              		.section	.rodata
 4716              		.align	2
 4717              		.set	.LANCHOR5,. + 0
 4718              	.LC0:
 4719 0000 2C       		.byte	44
 4720 0001 000000   		.space	3
 4721 0004 FFFFFFFF 		.word	-1
 4722              	.LC1:
 4723 0008 2D       		.byte	45
 4724 0009 000000   		.space	3
 4725 000c FFFFFFFF 		.word	-1
 4726              	.LC10:
 4727 0010 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4727      2A2B0708 
 4727      091C0B0C 
 4727      0D0E0F
 4728 001f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4728      13141516 
 4728      00121819 
 4728      1A
 4729 002c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4729      1E1F2000 
 4729      21222324 
 4729      25
 4730              		.section	.bss.current_menu,"aw",%nobits
 4731              		.set	.LANCHOR1,. + 0
 4734              	current_menu:
 4735 0000 00       		.space	1
 4736              		.section	.bss.default_menu,"aw",%nobits
 4737              		.set	.LANCHOR2,. + 0
 4740              	default_menu:
 4741 0000 00       		.space	1
 4742              		.section	.bss.last_menu,"aw",%nobits
 4743              		.set	.LANCHOR3,. + 0
 4746              	last_menu:
 4747 0000 00       		.space	1
 4748              		.section	.bss.mdots,"aw",%nobits
 4749              		.align	2
 4750              		.set	.LANCHOR0,. + 0
 4753              	mdots:
 4754 0000 00000000 		.space	400
 4754      00000000 
 4754      00000000 
 4754      00000000 
 4754      00000000 
 4755              		.section	.bss.n_p,"aw",%nobits
 4756              		.align	2
 4759              	n_p:
 4760 0000 00000000 		.space	4
 4761              		.section	.bss.start_ticks,"aw",%nobits
 4762              		.align	2
 4763              		.set	.LANCHOR8,. + 0
 4766              	start_ticks:
 4767 0000 00000000 		.space	4
 4768              		.section	.data.UserMenu,"aw"
 4769              		.align	2
ARM GAS  /tmp/ccuwCXMe.s 			page 129


 4770              		.set	.LANCHOR4,. + 0
 4773              	UserMenu:
 4774 0000 55736572 		.ascii	"User Menu\000"
 4774      204D656E 
 4774      7500
 4775 000a 00000000 		.space	5
 4775      00
 4776 000f 00       		.space	1
 4777 0010 2E       		.byte	46
 4778 0011 000000   		.space	3
 4779 0014 FFFFFFFF 		.word	-1
 4780 0018 2E       		.byte	46
 4781 0019 000000   		.space	3
 4782 001c FFFFFFFF 		.word	-1
 4783 0020 00       		.ascii	"\000"
 4784 0021 00000000 		.space	7
 4784      000000
 4785 0028 00       		.ascii	"\000"
 4786 0029 00000000 		.space	7
 4786      000000
 4787 0030 2E       		.byte	46
 4788 0031 000000   		.space	3
 4789 0034 FFFFFFFF 		.word	-1
 4790 0038 2E       		.byte	46
 4791 0039 000000   		.space	3
 4792 003c FFFFFFFF 		.word	-1
 4793 0040 00       		.ascii	"\000"
 4794 0041 00000000 		.space	7
 4794      000000
 4795 0048 00       		.ascii	"\000"
 4796 0049 00000000 		.space	7
 4796      000000
 4797 0050 2E       		.byte	46
 4798 0051 000000   		.space	3
 4799 0054 FFFFFFFF 		.word	-1
 4800 0058 2E       		.byte	46
 4801 0059 000000   		.space	3
 4802 005c FFFFFFFF 		.word	-1
 4803 0060 00       		.ascii	"\000"
 4804 0061 00000000 		.space	7
 4804      000000
 4805 0068 00       		.ascii	"\000"
 4806 0069 00000000 		.space	7
 4806      000000
 4807 0070 2E       		.byte	46
 4808 0071 000000   		.space	3
 4809 0074 FFFFFFFF 		.word	-1
 4810 0078 2E       		.byte	46
 4811 0079 000000   		.space	3
 4812 007c FFFFFFFF 		.word	-1
 4813 0080 00       		.ascii	"\000"
 4814 0081 00000000 		.space	7
 4814      000000
 4815 0088 00       		.ascii	"\000"
 4816 0089 00000000 		.space	7
 4816      000000
 4817 0090 2C       		.byte	44
ARM GAS  /tmp/ccuwCXMe.s 			page 130


 4818 0091 000000   		.space	3
 4819 0094 FFFFFFFF 		.word	-1
 4820 0098 2E       		.byte	46
 4821 0099 000000   		.space	3
 4822 009c FFFFFFFF 		.word	-1
 4823 00a0 2D2D0D00 		.ascii	"--\015\000"
 4824 00a4 00000000 		.space	4
 4825 00a8 00       		.ascii	"\000"
 4826 00a9 00000000 		.space	7
 4826      000000
 4827 00b0 2D       		.byte	45
 4828 00b1 000000   		.space	3
 4829 00b4 FFFFFFFF 		.word	-1
 4830 00b8 31       		.byte	49
 4831 00b9 000000   		.space	3
 4832 00bc 0B000000 		.word	11
 4833 00c0 43505800 		.ascii	"CPX\000"
 4834 00c4 00000000 		.space	4
 4835 00c8 00       		.ascii	"\000"
 4836 00c9 00000000 		.space	7
 4836      000000
 4837              		.section	.data.arrow_key_string,"aw"
 4838              		.align	2
 4839              		.set	.LANCHOR6,. + 0
 4842              	arrow_key_string:
 4843 0000 0C000000 		.word	.LC16
 4844              		.section	.data.cmplx_key_string,"aw"
 4845              		.align	2
 4846              		.set	.LANCHOR7,. + 0
 4849              	cmplx_key_string:
 4850 0000 08000000 		.word	.LC15
 4851              		.section	.data.f_shift,"aw"
 4852              		.align	2
 4855              	f_shift:
 4856 0000 29       		.byte	41
 4857 0001 000000   		.space	3
 4858 0004 FFFFFFFF 		.word	-1
 4859              		.section	.data.g_shift,"aw"
 4860              		.align	2
 4863              	g_shift:
 4864 0000 2A       		.byte	42
 4865 0001 000000   		.space	3
 4866 0004 FFFFFFFF 		.word	-1
 4867              		.section	.data.h_shift,"aw"
 4868              		.align	2
 4869              		.set	.LANCHOR15,. + 0
 4872              	h_shift:
 4873 0000 2B       		.byte	43
 4874 0001 000000   		.space	3
 4875 0004 FFFFFFFF 		.word	-1
 4876              		.section	.data.heartbeat,"aw"
 4877              		.align	2
 4878              		.set	.LANCHOR19,. + 0
 4881              	heartbeat:
 4882 0000 62       		.byte	98
 4883 0001 000000   		.space	3
 4884 0004 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccuwCXMe.s 			page 131


 4885              		.section	.data.no_key,"aw"
 4886              		.align	2
 4887              		.set	.LANCHOR10,. + 0
 4890              	no_key:
 4891 0000 2E       		.byte	46
 4892 0001 000000   		.space	3
 4893 0004 00000000 		.word	0
 4894              		.section	.data.release,"aw"
 4895              		.align	2
 4896              		.set	.LANCHOR11,. + 0
 4899              	release:
 4900 0000 63       		.byte	99
 4901 0001 000000   		.space	3
 4902 0004 FFFFFFFF 		.word	-1
 4903              		.section	.data.spaces,"aw"
 4904              		.align	2
 4905              		.set	.LANCHOR9,. + 0
 4908              	spaces:
 4909 0000 20202020 		.ascii	"                     \000"
 4909      20202020 
 4909      20202020 
 4909      20202020 
 4909      20202020 
 4910              		.section	.rodata.MID_MENU,"a"
 4911              		.align	2
 4912              		.set	.LANCHOR18,. + 0
 4915              	MID_MENU:
 4916 0000 00000000 		.word	.LC14
 4917 0004 00000000 		.word	mid_menu
 4918 0008 00000000 		.word	0
 4919 000c 00000000 		.word	0
 4920              		.section	.rodata.Menus,"a"
 4921              		.align	2
 4924              	Menus:
 4925 0000 4D5F426C 		.ascii	"M_Blank\000"
 4925      616E6B00 
 4926 0008 00000000 		.space	7
 4926      000000
 4927 000f 00       		.space	1
 4928 0010 2E       		.byte	46
 4929 0011 000000   		.space	3
 4930 0014 FFFFFFFF 		.word	-1
 4931 0018 2E       		.byte	46
 4932 0019 000000   		.space	3
 4933 001c FFFFFFFF 		.word	-1
 4934 0020 00       		.ascii	"\000"
 4935 0021 00000000 		.space	7
 4935      000000
 4936 0028 00       		.ascii	"\000"
 4937 0029 00000000 		.space	7
 4937      000000
 4938 0030 2E       		.byte	46
 4939 0031 000000   		.space	3
 4940 0034 FFFFFFFF 		.word	-1
 4941 0038 2E       		.byte	46
 4942 0039 000000   		.space	3
 4943 003c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccuwCXMe.s 			page 132


 4944 0040 00       		.ascii	"\000"
 4945 0041 00000000 		.space	7
 4945      000000
 4946 0048 00       		.ascii	"\000"
 4947 0049 00000000 		.space	7
 4947      000000
 4948 0050 2E       		.byte	46
 4949 0051 000000   		.space	3
 4950 0054 FFFFFFFF 		.word	-1
 4951 0058 2E       		.byte	46
 4952 0059 000000   		.space	3
 4953 005c FFFFFFFF 		.word	-1
 4954 0060 00       		.ascii	"\000"
 4955 0061 00000000 		.space	7
 4955      000000
 4956 0068 00       		.ascii	"\000"
 4957 0069 00000000 		.space	7
 4957      000000
 4958 0070 2E       		.byte	46
 4959 0071 000000   		.space	3
 4960 0074 FFFFFFFF 		.word	-1
 4961 0078 2E       		.byte	46
 4962 0079 000000   		.space	3
 4963 007c FFFFFFFF 		.word	-1
 4964 0080 00       		.ascii	"\000"
 4965 0081 00000000 		.space	7
 4965      000000
 4966 0088 00       		.ascii	"\000"
 4967 0089 00000000 		.space	7
 4967      000000
 4968 0090 2C       		.byte	44
 4969 0091 000000   		.space	3
 4970 0094 FFFFFFFF 		.word	-1
 4971 0098 2E       		.byte	46
 4972 0099 000000   		.space	3
 4973 009c FFFFFFFF 		.word	-1
 4974 00a0 2D2D0D00 		.ascii	"--\015\000"
 4975 00a4 00000000 		.space	4
 4976 00a8 00       		.ascii	"\000"
 4977 00a9 00000000 		.space	7
 4977      000000
 4978 00b0 2D       		.byte	45
 4979 00b1 000000   		.space	3
 4980 00b4 FFFFFFFF 		.word	-1
 4981 00b8 31       		.byte	49
 4982 00b9 000000   		.space	3
 4983 00bc 0B000000 		.word	11
 4984 00c0 43505800 		.ascii	"CPX\000"
 4985 00c4 00000000 		.space	4
 4986 00c8 00       		.ascii	"\000"
 4987 00c9 00000000 		.space	7
 4987      000000
 4988 00d0 4D5F436C 		.ascii	"M_Clear\000"
 4988      65617200 
 4989 00d8 00000000 		.space	7
 4989      000000
 4990 00df 00       		.space	1
ARM GAS  /tmp/ccuwCXMe.s 			page 133


 4991 00e0 10       		.byte	16
 4992 00e1 000000   		.space	3
 4993 00e4 01000000 		.word	1
 4994 00e8 34       		.byte	52
 4995 00e9 000000   		.space	3
 4996 00ec 44010000 		.word	324
 4997 00f0 434C5072 		.ascii	"CLProg\000"
 4997      6F6700
 4998 00f7 00       		.space	1
 4999 00f8 434C5041 		.ascii	"CLPAll\000"
 4999      6C6C00
 5000 00ff 00       		.space	1
 5001 0100 10       		.byte	16
 5002 0101 000000   		.space	3
 5003 0104 02000000 		.word	2
 5004 0108 34       		.byte	52
 5005 0109 000000   		.space	3
 5006 010c 3E010000 		.word	318
 5007 0110 434C9100 		.ascii	"CL\221\000"
 5008 0114 00000000 		.space	4
 5009 0118 434C5265 		.ascii	"CLReg\000"
 5009      6700
 5010 011e 0000     		.space	2
 5011 0120 10       		.byte	16
 5012 0121 000000   		.space	3
 5013 0124 03000000 		.word	3
 5014 0128 34       		.byte	52
 5015 0129 000000   		.space	3
 5016 012c 74010000 		.word	372
 5017 0130 434C7800 		.ascii	"CLx\000"
 5018 0134 00000000 		.space	4
 5019 0138 434C06A0 		.ascii	"CL\006\240\000"
 5019      00
 5020 013d 000000   		.space	3
 5021 0140 34       		.byte	52
 5022 0141 000000   		.space	3
 5023 0144 40010000 		.word	320
 5024 0148 34       		.byte	52
 5025 0149 000000   		.space	3
 5026 014c 41010000 		.word	321
 5027 0150 434C5374 		.ascii	"CLStk\000"
 5027      6B00
 5028 0156 0000     		.space	2
 5029 0158 434C416C 		.ascii	"CLAll\000"
 5029      6C00
 5030 015e 0000     		.space	2
 5031 0160 2C       		.byte	44
 5032 0161 000000   		.space	3
 5033 0164 FFFFFFFF 		.word	-1
 5034 0168 2E       		.byte	46
 5035 0169 000000   		.space	3
 5036 016c FFFFFFFF 		.word	-1
 5037 0170 2D2D0D00 		.ascii	"--\015\000"
 5038 0174 00000000 		.space	4
 5039 0178 00       		.ascii	"\000"
 5040 0179 00000000 		.space	7
 5040      000000
ARM GAS  /tmp/ccuwCXMe.s 			page 134


 5041 0180 2D       		.byte	45
 5042 0181 000000   		.space	3
 5043 0184 FFFFFFFF 		.word	-1
 5044 0188 2E       		.byte	46
 5045 0189 000000   		.space	3
 5046 018c FFFFFFFF 		.word	-1
 5047 0190 43505800 		.ascii	"CPX\000"
 5048 0194 00000000 		.space	4
 5049 0198 00       		.ascii	"\000"
 5050 0199 00000000 		.space	7
 5050      000000
 5051 01a0 4D5F4469 		.ascii	"M_Disp\000"
 5051      737000
 5052 01a7 00000000 		.space	8
 5052      00000000 
 5053 01af 00       		.space	1
 5054 01b0 00       		.byte	0
 5055 01b1 000000   		.space	3
 5056 01b4 03000000 		.word	3
 5057 01b8 05       		.byte	5
 5058 01b9 000000   		.space	3
 5059 01bc 01000000 		.word	1
 5060 01c0 414C4C00 		.ascii	"ALL\000"
 5061 01c4 00000000 		.space	4
 5062 01c8 6120622F 		.ascii	"a b/c\000"
 5062      6300
 5063 01ce 0000     		.space	2
 5064 01d0 01       		.byte	1
 5065 01d1 000000   		.space	3
 5066 01d4 03000000 		.word	3
 5067 01d8 05       		.byte	5
 5068 01d9 000000   		.space	3
 5069 01dc 02000000 		.word	2
 5070 01e0 46495800 		.ascii	"FIX\000"
 5071 01e4 00000000 		.space	4
 5072 01e8 642F6300 		.ascii	"d/c\000"
 5073 01ec 00000000 		.space	4
 5074 01f0 02       		.byte	2
 5075 01f1 000000   		.space	3
 5076 01f4 03000000 		.word	3
 5077 01f8 06       		.byte	6
 5078 01f9 000000   		.space	3
 5079 01fc 01000000 		.word	1
 5080 0200 53434900 		.ascii	"SCI\000"
 5081 0204 00000000 		.space	4
 5082 0208 482E4D53 		.ascii	"H.MS\000"
 5082      00
 5083 020d 000000   		.space	3
 5084 0210 03       		.byte	3
 5085 0211 000000   		.space	3
 5086 0214 03000000 		.word	3
 5087 0218 07       		.byte	7
 5088 0219 000000   		.space	3
 5089 021c 01000000 		.word	1
 5090 0220 454E4700 		.ascii	"ENG\000"
 5091 0224 00000000 		.space	4
 5092 0228 482E6400 		.ascii	"H.d\000"
ARM GAS  /tmp/ccuwCXMe.s 			page 135


 5093 022c 00000000 		.space	4
 5094 0230 2C       		.byte	44
 5095 0231 000000   		.space	3
 5096 0234 FFFFFFFF 		.word	-1
 5097 0238 26       		.byte	38
 5098 0239 000000   		.space	3
 5099 023c 03000000 		.word	3
 5100 0240 2D2D0D00 		.ascii	"--\015\000"
 5101 0244 00000000 		.space	4
 5102 0248 2E2F2C00 		.ascii	"./,\000"
 5103 024c 00000000 		.space	4
 5104 0250 2D       		.byte	45
 5105 0251 000000   		.space	3
 5106 0254 FFFFFFFF 		.word	-1
 5107 0258 2E       		.byte	46
 5108 0259 000000   		.space	3
 5109 025c FFFFFFFF 		.word	-1
 5110 0260 43505800 		.ascii	"CPX\000"
 5111 0264 00000000 		.space	4
 5112 0268 00       		.ascii	"\000"
 5113 0269 00000000 		.space	7
 5113      000000
 5114 0270 4D5F4261 		.ascii	"M_Base\000"
 5114      736500
 5115 0277 00000000 		.space	8
 5115      00000000 
 5116 027f 00       		.space	1
 5117 0280 0E       		.byte	14
 5118 0281 000000   		.space	3
 5119 0284 01000000 		.word	1
 5120 0288 0E       		.byte	14
 5121 0289 000000   		.space	3
 5122 028c 03000000 		.word	3
 5123 0290 42494E00 		.ascii	"BIN\000"
 5124 0294 00000000 		.space	4
 5125 0298 6E6F7400 		.ascii	"not\000"
 5126 029c 00000000 		.space	4
 5127 02a0 0E       		.byte	14
 5128 02a1 000000   		.space	3
 5129 02a4 02000000 		.word	2
 5130 02a8 13       		.byte	19
 5131 02a9 000000   		.space	3
 5132 02ac 03000000 		.word	3
 5133 02b0 4F435400 		.ascii	"OCT\000"
 5134 02b4 00000000 		.space	4
 5135 02b8 616E6400 		.ascii	"and\000"
 5136 02bc 00000000 		.space	4
 5137 02c0 0F       		.byte	15
 5138 02c1 000000   		.space	3
 5139 02c4 01000000 		.word	1
 5140 02c8 14       		.byte	20
 5141 02c9 000000   		.space	3
 5142 02cc 03000000 		.word	3
 5143 02d0 44454300 		.ascii	"DEC\000"
 5144 02d4 00000000 		.space	4
 5145 02d8 6F7200   		.ascii	"or\000"
 5146 02db 00000000 		.space	5
ARM GAS  /tmp/ccuwCXMe.s 			page 136


 5146      00
 5147 02e0 0F       		.byte	15
 5148 02e1 000000   		.space	3
 5149 02e4 02000000 		.word	2
 5150 02e8 15       		.byte	21
 5151 02e9 000000   		.space	3
 5152 02ec 03000000 		.word	3
 5153 02f0 48455800 		.ascii	"HEX\000"
 5154 02f4 00000000 		.space	4
 5155 02f8 786F7200 		.ascii	"xor\000"
 5156 02fc 00000000 		.space	4
 5157 0300 2C       		.byte	44
 5158 0301 000000   		.space	3
 5159 0304 FFFFFFFF 		.word	-1
 5160 0308 16       		.byte	22
 5161 0309 000000   		.space	3
 5162 030c 03000000 		.word	3
 5163 0310 2D2D0D00 		.ascii	"--\015\000"
 5164 0314 00000000 		.space	4
 5165 0318 524D4452 		.ascii	"RMDR\000"
 5165      00
 5166 031d 000000   		.space	3
 5167 0320 2D       		.byte	45
 5168 0321 000000   		.space	3
 5169 0324 FFFFFFFF 		.word	-1
 5170 0328 07       		.byte	7
 5171 0329 000000   		.space	3
 5172 032c 01000000 		.word	1
 5173 0330 43505800 		.ascii	"CPX\000"
 5174 0334 00000000 		.space	4
 5175 0338 482E6400 		.ascii	"H.d\000"
 5176 033c 00000000 		.space	4
 5177 0340 4D5F416E 		.ascii	"M_Angles\000"
 5177      676C6573 
 5177      00
 5178 0349 00000000 		.space	6
 5178      0000
 5179 034f 00       		.space	1
 5180 0350 06       		.byte	6
 5181 0351 000000   		.space	3
 5182 0354 02000000 		.word	2
 5183 0358 04       		.byte	4
 5184 0359 000000   		.space	3
 5185 035c 01000000 		.word	1
 5186 0360 44454700 		.ascii	"DEG\000"
 5187 0364 00000000 		.space	4
 5188 0368 500D5200 		.ascii	"P\015R\000"
 5189 036c 00000000 		.space	4
 5190 0370 07       		.byte	7
 5191 0371 000000   		.space	3
 5192 0374 02000000 		.word	2
 5193 0378 04       		.byte	4
 5194 0379 000000   		.space	3
 5195 037c 02000000 		.word	2
 5196 0380 52414400 		.ascii	"RAD\000"
 5197 0384 00000000 		.space	4
 5198 0388 520D5000 		.ascii	"R\015P\000"
ARM GAS  /tmp/ccuwCXMe.s 			page 137


 5199 038c 00000000 		.space	4
 5200 0390 08       		.byte	8
 5201 0391 000000   		.space	3
 5202 0394 02000000 		.word	2
 5203 0398 00       		.byte	0
 5204 0399 000000   		.space	3
 5205 039c 01000000 		.word	1
 5206 03a0 47524144 		.ascii	"GRAD\000"
 5206      00
 5207 03a5 000000   		.space	3
 5208 03a8 48595000 		.ascii	"HYP\000"
 5209 03ac 00000000 		.space	4
 5210 03b0 06       		.byte	6
 5211 03b1 000000   		.space	3
 5212 03b4 01000000 		.word	1
 5213 03b8 07       		.byte	7
 5214 03b9 000000   		.space	3
 5215 03bc 01000000 		.word	1
 5216 03c0 482E4D53 		.ascii	"H.MS\000"
 5216      00
 5217 03c5 000000   		.space	3
 5218 03c8 482E6400 		.ascii	"H.d\000"
 5219 03cc 00000000 		.space	4
 5220 03d0 2C       		.byte	44
 5221 03d1 000000   		.space	3
 5222 03d4 FFFFFFFF 		.word	-1
 5223 03d8 00       		.byte	0
 5224 03d9 000000   		.space	3
 5225 03dc 02000000 		.word	2
 5226 03e0 2D2D0D00 		.ascii	"--\015\000"
 5227 03e4 00000000 		.space	4
 5228 03e8 4859509D 		.ascii	"HYP\235\000"
 5228      00
 5229 03ed 000000   		.space	3
 5230 03f0 2D       		.byte	45
 5231 03f1 000000   		.space	3
 5232 03f4 FFFFFFFF 		.word	-1
 5233 03f8 2E       		.byte	46
 5234 03f9 000000   		.space	3
 5235 03fc FFFFFFFF 		.word	-1
 5236 0400 43505800 		.ascii	"CPX\000"
 5237 0404 00000000 		.space	4
 5238 0408 00       		.ascii	"\000"
 5239 0409 00000000 		.space	7
 5239      000000
 5240 0410 4D5F4D69 		.ascii	"M_Misc\000"
 5240      736300
 5241 0417 00000000 		.space	8
 5241      00000000 
 5242 041f 00       		.space	1
 5243 0420 25       		.byte	37
 5244 0421 000000   		.space	3
 5245 0424 01000000 		.word	1
 5246 0428 14       		.byte	20
 5247 0429 000000   		.space	3
 5248 042c 01000000 		.word	1
 5249 0430 7C587C00 		.ascii	"|X|\000"
ARM GAS  /tmp/ccuwCXMe.s 			page 138


 5250 0434 00000000 		.space	4
 5251 0438 329C00   		.ascii	"2\234\000"
 5252 043b 00000000 		.space	5
 5252      00
 5253 0440 25       		.byte	37
 5254 0441 000000   		.space	3
 5255 0444 02000000 		.word	2
 5256 0448 14       		.byte	20
 5257 0449 000000   		.space	3
 5258 044c 02000000 		.word	2
 5259 0450 524E4400 		.ascii	"RND\000"
 5260 0454 00000000 		.space	4
 5261 0458 4C6F67BA 		.ascii	"Log\272\000"
 5261      00
 5262 045d 000000   		.space	3
 5263 0460 26       		.byte	38
 5264 0461 000000   		.space	3
 5265 0464 01000000 		.word	1
 5266 0468 15       		.byte	21
 5267 0469 000000   		.space	3
 5268 046c 02000000 		.word	2
 5269 0470 49506172 		.ascii	"IPart\000"
 5269      7400
 5270 0476 0000     		.space	2
 5271 0478 4C6F678B 		.ascii	"Log\213\000"
 5271      00
 5272 047d 000000   		.space	3
 5273 0480 26       		.byte	38
 5274 0481 000000   		.space	3
 5275 0484 02000000 		.word	2
 5276 0488 16       		.byte	22
 5277 0489 000000   		.space	3
 5278 048c 02000000 		.word	2
 5279 0490 46506172 		.ascii	"FPart\000"
 5279      7400
 5280 0496 0000     		.space	2
 5281 0498 7C7C656C 		.ascii	"||el\000"
 5281      00
 5282 049d 000000   		.space	3
 5283 04a0 2C       		.byte	44
 5284 04a1 000000   		.space	3
 5285 04a4 FFFFFFFF 		.word	-1
 5286 04a8 22       		.byte	34
 5287 04a9 000000   		.space	3
 5288 04ac 02000000 		.word	2
 5289 04b0 2D2D0D00 		.ascii	"--\015\000"
 5290 04b4 00000000 		.space	4
 5291 04b8 832500   		.ascii	"\203%\000"
 5292 04bb 00000000 		.space	5
 5292      00
 5293 04c0 2D       		.byte	45
 5294 04c1 000000   		.space	3
 5295 04c4 FFFFFFFF 		.word	-1
 5296 04c8 2E       		.byte	46
 5297 04c9 000000   		.space	3
 5298 04cc FFFFFFFF 		.word	-1
 5299 04d0 43505800 		.ascii	"CPX\000"
ARM GAS  /tmp/ccuwCXMe.s 			page 139


 5300 04d4 00000000 		.space	4
 5301 04d8 00       		.ascii	"\000"
 5302 04d9 00000000 		.space	7
 5302      000000
 5303 04e0 4D5F5377 		.ascii	"M_Swap\000"
 5303      617000
 5304 04e7 00000000 		.space	8
 5304      00000000 
 5305 04ef 00       		.space	1
 5306 04f0 0D       		.byte	13
 5307 04f1 000000   		.space	3
 5308 04f4 01000000 		.word	1
 5309 04f8 34       		.byte	52
 5310 04f9 000000   		.space	3
 5311 04fc 00A60000 		.word	42496
 5312 0500 53686F77 		.ascii	"Show\016\000"
 5312      0E00
 5313 0506 0000     		.space	2
 5314 0508 5B175D00 		.ascii	"[\027]\000"
 5315 050c 00000000 		.space	4
 5316 0510 0D       		.byte	13
 5317 0511 000000   		.space	3
 5318 0514 02000000 		.word	2
 5319 0518 2E       		.byte	46
 5320 0519 000000   		.space	3
 5321 051c FFFFFFFF 		.word	-1
 5322 0520 53686F77 		.ascii	"Show\015\000"
 5322      0D00
 5323 0526 0000     		.space	2
 5324 0528 00       		.ascii	"\000"
 5325 0529 00000000 		.space	7
 5325      000000
 5326 0530 0D       		.byte	13
 5327 0531 000000   		.space	3
 5328 0534 03000000 		.word	3
 5329 0538 34       		.byte	52
 5330 0539 000000   		.space	3
 5331 053c 00330000 		.word	13056
 5332 0540 78173F00 		.ascii	"x\027?\000"
 5333 0544 00000000 		.space	4
 5334 0548 7A173F00 		.ascii	"z\027?\000"
 5335 054c 00000000 		.space	4
 5336 0550 34       		.byte	52
 5337 0551 000000   		.space	3
 5338 0554 00320000 		.word	12800
 5339 0558 34       		.byte	52
 5340 0559 000000   		.space	3
 5341 055c 00340000 		.word	13312
 5342 0560 79173F00 		.ascii	"y\027?\000"
 5343 0564 00000000 		.space	4
 5344 0568 74173F00 		.ascii	"t\027?\000"
 5345 056c 00000000 		.space	4
 5346 0570 2C       		.byte	44
 5347 0571 000000   		.space	3
 5348 0574 FFFFFFFF 		.word	-1
 5349 0578 2E       		.byte	46
 5350 0579 000000   		.space	3
ARM GAS  /tmp/ccuwCXMe.s 			page 140


 5351 057c FFFFFFFF 		.word	-1
 5352 0580 2D2D0D00 		.ascii	"--\015\000"
 5353 0584 00000000 		.space	4
 5354 0588 00       		.ascii	"\000"
 5355 0589 00000000 		.space	7
 5355      000000
 5356 0590 2D       		.byte	45
 5357 0591 000000   		.space	3
 5358 0594 FFFFFFFF 		.word	-1
 5359 0598 2E       		.byte	46
 5360 0599 000000   		.space	3
 5361 059c FFFFFFFF 		.word	-1
 5362 05a0 43505800 		.ascii	"CPX\000"
 5363 05a4 00000000 		.space	4
 5364 05a8 00       		.ascii	"\000"
 5365 05a9 00000000 		.space	7
 5365      000000
 5366 05b0 4D5F5072 		.ascii	"M_Program\000"
 5366      6F677261 
 5366      6D00
 5367 05ba 00000000 		.space	5
 5367      00
 5368 05bf 00       		.space	1
 5369 05c0 27       		.byte	39
 5370 05c1 000000   		.space	3
 5371 05c4 01000000 		.word	1
 5372 05c8 28       		.byte	40
 5373 05c9 000000   		.space	3
 5374 05cc 01000000 		.word	1
 5375 05d0 4C424C00 		.ascii	"LBL\000"
 5376 05d4 00000000 		.space	4
 5377 05d8 44534500 		.ascii	"DSE\000"
 5378 05dc 00000000 		.space	4
 5379 05e0 27       		.byte	39
 5380 05e1 000000   		.space	3
 5381 05e4 02000000 		.word	2
 5382 05e8 28       		.byte	40
 5383 05e9 000000   		.space	3
 5384 05ec 02000000 		.word	2
 5385 05f0 52544E00 		.ascii	"RTN\000"
 5386 05f4 00000000 		.space	4
 5387 05f8 49534700 		.ascii	"ISG\000"
 5388 05fc 00000000 		.space	4
 5389 0600 25       		.byte	37
 5390 0601 000000   		.space	3
 5391 0604 03000000 		.word	3
 5392 0608 34       		.byte	52
 5393 0609 000000   		.space	3
 5394 060c 00600000 		.word	24576
 5395 0610 50617573 		.ascii	"Pause\000"
 5395      6500
 5396 0616 0000     		.space	2
 5397 0618 44454300 		.ascii	"DEC\000"
 5398 061c 00000000 		.space	4
 5399 0620 12       		.byte	18
 5400 0621 000000   		.space	3
 5401 0624 03000000 		.word	3
ARM GAS  /tmp/ccuwCXMe.s 			page 141


 5402 0628 34       		.byte	52
 5403 0629 000000   		.space	3
 5404 062c 00610000 		.word	24832
 5405 0630 47544F00 		.ascii	"GTO\000"
 5406 0634 00000000 		.space	4
 5407 0638 494E4300 		.ascii	"INC\000"
 5408 063c 00000000 		.space	4
 5409 0640 2C       		.byte	44
 5410 0641 000000   		.space	3
 5411 0644 FFFFFFFF 		.word	-1
 5412 0648 34       		.byte	52
 5413 0649 000000   		.space	3
 5414 064c 00570000 		.word	22272
 5415 0650 2D2D0D00 		.ascii	"--\015\000"
 5416 0654 00000000 		.space	4
 5417 0658 4241434B 		.ascii	"BACK\000"
 5417      00
 5418 065d 000000   		.space	3
 5419 0660 2D       		.byte	45
 5420 0661 000000   		.space	3
 5421 0664 FFFFFFFF 		.word	-1
 5422 0668 34       		.byte	52
 5423 0669 000000   		.space	3
 5424 066c 00560000 		.word	22016
 5425 0670 43505800 		.ascii	"CPX\000"
 5426 0674 00000000 		.space	4
 5427 0678 534B4950 		.ascii	"SKIP\000"
 5427      00
 5428 067d 000000   		.space	3
 5429 0680 4D5F5365 		.ascii	"M_Setup1\000"
 5429      74757031 
 5429      00
 5430 0689 00000000 		.space	6
 5430      0000
 5431 068f 00       		.space	1
 5432 0690 32       		.byte	50
 5433 0691 000000   		.space	3
 5434 0694 00000000 		.word	0
 5435 0698 30       		.byte	48
 5436 0699 000000   		.space	3
 5437 069c 00000000 		.word	0
 5438 06a0 45584954 		.ascii	"EXIT\000"
 5438      00
 5439 06a5 000000   		.space	3
 5440 06a8 53797374 		.ascii	"System\000"
 5440      656D00
 5441 06af 00       		.space	1
 5442 06b0 31       		.byte	49
 5443 06b1 000000   		.space	3
 5444 06b4 09000000 		.word	9
 5445 06b8 2E       		.byte	46
 5446 06b9 000000   		.space	3
 5447 06bc FFFFFFFF 		.word	-1
 5448 06c0 48454C50 		.ascii	"HELP\000"
 5448      00
 5449 06c5 000000   		.space	3
 5450 06c8 00       		.ascii	"\000"
ARM GAS  /tmp/ccuwCXMe.s 			page 142


 5451 06c9 00000000 		.space	7
 5451      000000
 5452 06d0 31       		.byte	49
 5453 06d1 000000   		.space	3
 5454 06d4 02000000 		.word	2
 5455 06d8 31       		.byte	49
 5456 06d9 000000   		.space	3
 5457 06dc 06000000 		.word	6
 5458 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5458      4F00
 5459 06e6 0000     		.space	2
 5460 06e8 53765241 		.ascii	"SvRAM\000"
 5460      4D00
 5461 06ee 0000     		.space	2
 5462 06f0 31       		.byte	49
 5463 06f1 000000   		.space	3
 5464 06f4 03000000 		.word	3
 5465 06f8 31       		.byte	49
 5466 06f9 000000   		.space	3
 5467 06fc 07000000 		.word	7
 5468 0700 4F6E5243 		.ascii	"OnRCL\000"
 5468      4C00
 5469 0706 0000     		.space	2
 5470 0708 4C645241 		.ascii	"LdRAM\000"
 5470      4D00
 5471 070e 0000     		.space	2
 5472 0710 2C       		.byte	44
 5473 0711 000000   		.space	3
 5474 0714 FFFFFFFF 		.word	-1
 5475 0718 2E       		.byte	46
 5476 0719 000000   		.space	3
 5477 071c FFFFFFFF 		.word	-1
 5478 0720 2D2D0D00 		.ascii	"--\015\000"
 5479 0724 00000000 		.space	4
 5480 0728 00       		.ascii	"\000"
 5481 0729 00000000 		.space	7
 5481      000000
 5482 0730 2D       		.byte	45
 5483 0731 000000   		.space	3
 5484 0734 FFFFFFFF 		.word	-1
 5485 0738 2E       		.byte	46
 5486 0739 000000   		.space	3
 5487 073c FFFFFFFF 		.word	-1
 5488 0740 43505800 		.ascii	"CPX\000"
 5489 0744 00000000 		.space	4
 5490 0748 00       		.ascii	"\000"
 5491 0749 00000000 		.space	7
 5491      000000
 5492 0750 4D5F4172 		.ascii	"M_Arrow\000"
 5492      726F7700 
 5493 0758 00000000 		.space	7
 5493      000000
 5494 075f 00       		.space	1
 5495 0760 0E       		.byte	14
 5496 0761 000000   		.space	3
 5497 0764 01000000 		.word	1
 5498 0768 06       		.byte	6
ARM GAS  /tmp/ccuwCXMe.s 			page 143


 5499 0769 000000   		.space	3
 5500 076c 02000000 		.word	2
 5501 0770 42696E00 		.ascii	"Bin\000"
 5502 0774 00000000 		.space	4
 5503 0778 44454700 		.ascii	"DEG\000"
 5504 077c 00000000 		.space	4
 5505 0780 0E       		.byte	14
 5506 0781 000000   		.space	3
 5507 0784 02000000 		.word	2
 5508 0788 07       		.byte	7
 5509 0789 000000   		.space	3
 5510 078c 02000000 		.word	2
 5511 0790 4F637400 		.ascii	"Oct\000"
 5512 0794 00000000 		.space	4
 5513 0798 52414400 		.ascii	"RAD\000"
 5514 079c 00000000 		.space	4
 5515 07a0 0F       		.byte	15
 5516 07a1 000000   		.space	3
 5517 07a4 01000000 		.word	1
 5518 07a8 08       		.byte	8
 5519 07a9 000000   		.space	3
 5520 07ac 02000000 		.word	2
 5521 07b0 44656300 		.ascii	"Dec\000"
 5522 07b4 00000000 		.space	4
 5523 07b8 47726164 		.ascii	"Grad\000"
 5523      00
 5524 07bd 000000   		.space	3
 5525 07c0 0F       		.byte	15
 5526 07c1 000000   		.space	3
 5527 07c4 02000000 		.word	2
 5528 07c8 06       		.byte	6
 5529 07c9 000000   		.space	3
 5530 07cc 01000000 		.word	1
 5531 07d0 48657800 		.ascii	"Hex\000"
 5532 07d4 00000000 		.space	4
 5533 07d8 0D484D53 		.ascii	"\015HMS\000"
 5533      00
 5534 07dd 000000   		.space	3
 5535 07e0 2C       		.byte	44
 5536 07e1 000000   		.space	3
 5537 07e4 FFFFFFFF 		.word	-1
 5538 07e8 07       		.byte	7
 5539 07e9 000000   		.space	3
 5540 07ec 01000000 		.word	1
 5541 07f0 2D2D0D00 		.ascii	"--\015\000"
 5542 07f4 00000000 		.space	4
 5543 07f8 484D530D 		.ascii	"HMS\015\000"
 5543      00
 5544 07fd 000000   		.space	3
 5545 0800 2D       		.byte	45
 5546 0801 000000   		.space	3
 5547 0804 FFFFFFFF 		.word	-1
 5548 0808 2E       		.byte	46
 5549 0809 000000   		.space	3
 5550 080c FFFFFFFF 		.word	-1
 5551 0810 43505800 		.ascii	"CPX\000"
 5552 0814 00000000 		.space	4
ARM GAS  /tmp/ccuwCXMe.s 			page 144


 5553 0818 00       		.ascii	"\000"
 5554 0819 00000000 		.space	7
 5554      000000
 5555 0820 4D5F466C 		.ascii	"M_Flags\000"
 5555      61677300 
 5556 0828 00000000 		.space	7
 5556      000000
 5557 082f 00       		.space	1
 5558 0830 1E       		.byte	30
 5559 0831 000000   		.space	3
 5560 0834 01000000 		.word	1
 5561 0838 34       		.byte	52
 5562 0839 000000   		.space	3
 5563 083c 00740000 		.word	29696
 5564 0840 53465F00 		.ascii	"SF_\000"
 5565 0844 00000000 		.space	4
 5566 0848 46533F00 		.ascii	"FS?\000"
 5567 084c 00000000 		.space	4
 5568 0850 1E       		.byte	30
 5569 0851 000000   		.space	3
 5570 0854 02000000 		.word	2
 5571 0858 34       		.byte	52
 5572 0859 000000   		.space	3
 5573 085c 00750000 		.word	29952
 5574 0860 43465F00 		.ascii	"CF_\000"
 5575 0864 00000000 		.space	4
 5576 0868 46433F00 		.ascii	"FC?\000"
 5577 086c 00000000 		.space	4
 5578 0870 1F       		.byte	31
 5579 0871 000000   		.space	3
 5580 0874 01000000 		.word	1
 5581 0878 34       		.byte	52
 5582 0879 000000   		.space	3
 5583 087c 00500000 		.word	20480
 5584 0880 783D3F00 		.ascii	"x=?\000"
 5585 0884 00000000 		.space	4
 5586 0888 783C3F00 		.ascii	"x<?\000"
 5587 088c 00000000 		.space	4
 5588 0890 1F       		.byte	31
 5589 0891 000000   		.space	3
 5590 0894 02000000 		.word	2
 5591 0898 34       		.byte	52
 5592 0899 000000   		.space	3
 5593 089c 00510000 		.word	20736
 5594 08a0 780B3F00 		.ascii	"x\013?\000"
 5595 08a4 00000000 		.space	4
 5596 08a8 783C3D3F 		.ascii	"x<=?\000"
 5596      00
 5597 08ad 000000   		.space	3
 5598 08b0 2C       		.byte	44
 5599 08b1 000000   		.space	3
 5600 08b4 FFFFFFFF 		.word	-1
 5601 08b8 34       		.byte	52
 5602 08b9 000000   		.space	3
 5603 08bc 00530000 		.word	21248
 5604 08c0 2D2D0D00 		.ascii	"--\015\000"
 5605 08c4 00000000 		.space	4
ARM GAS  /tmp/ccuwCXMe.s 			page 145


 5606 08c8 783E3D3F 		.ascii	"x>=?\000"
 5606      00
 5607 08cd 000000   		.space	3
 5608 08d0 2D       		.byte	45
 5609 08d1 000000   		.space	3
 5610 08d4 FFFFFFFF 		.word	-1
 5611 08d8 34       		.byte	52
 5612 08d9 000000   		.space	3
 5613 08dc 00520000 		.word	20992
 5614 08e0 43505800 		.ascii	"CPX\000"
 5615 08e4 00000000 		.space	4
 5616 08e8 783E3F00 		.ascii	"x>?\000"
 5617 08ec 00000000 		.space	4
 5618 08f0 4D5F5072 		.ascii	"M_Prob\000"
 5618      6F6200
 5619 08f7 00000000 		.space	8
 5619      00000000 
 5620 08ff 00       		.space	1
 5621 0900 18       		.byte	24
 5622 0901 000000   		.space	3
 5623 0904 03000000 		.word	3
 5624 0908 34       		.byte	52
 5625 0909 000000   		.space	3
 5626 090c 31020000 		.word	561
 5627 0910 46616374 		.ascii	"Fact!\000"
 5627      2100
 5628 0916 0000     		.space	2
 5629 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5629      00
 5630 091d 000000   		.space	3
 5631 0920 18       		.byte	24
 5632 0921 000000   		.space	3
 5633 0924 01000000 		.word	1
 5634 0928 19       		.byte	25
 5635 0929 000000   		.space	3
 5636 092c 01000000 		.word	1
 5637 0930 43792C78 		.ascii	"Cy,x\000"
 5637      00
 5638 0935 000000   		.space	3
 5639 0938 9400     		.ascii	"\224\000"
 5640 093a 00000000 		.space	6
 5640      0000
 5641 0940 18       		.byte	24
 5642 0941 000000   		.space	3
 5643 0944 02000000 		.word	2
 5644 0948 19       		.byte	25
 5645 0949 000000   		.space	3
 5646 094c 02000000 		.word	2
 5647 0950 50792C78 		.ascii	"Py,x\000"
 5647      00
 5648 0955 000000   		.space	3
 5649 0958 949D00   		.ascii	"\224\235\000"
 5650 095b 00000000 		.space	5
 5650      00
 5651 0960 08       		.byte	8
 5652 0961 000000   		.space	3
 5653 0964 01000000 		.word	1
ARM GAS  /tmp/ccuwCXMe.s 			page 146


 5654 0968 34       		.byte	52
 5655 0969 000000   		.space	3
 5656 096c 34010000 		.word	308
 5657 0970 52414E23 		.ascii	"RAN#\000"
 5657      00
 5658 0975 000000   		.space	3
 5659 0978 53454544 		.ascii	"SEED\000"
 5659      00
 5660 097d 000000   		.space	3
 5661 0980 2C       		.byte	44
 5662 0981 000000   		.space	3
 5663 0984 FFFFFFFF 		.word	-1
 5664 0988 2E       		.byte	46
 5665 0989 000000   		.space	3
 5666 098c FFFFFFFF 		.word	-1
 5667 0990 2D2D0D00 		.ascii	"--\015\000"
 5668 0994 00000000 		.space	4
 5669 0998 00       		.ascii	"\000"
 5670 0999 00000000 		.space	7
 5670      000000
 5671 09a0 2D       		.byte	45
 5672 09a1 000000   		.space	3
 5673 09a4 FFFFFFFF 		.word	-1
 5674 09a8 2E       		.byte	46
 5675 09a9 000000   		.space	3
 5676 09ac FFFFFFFF 		.word	-1
 5677 09b0 43505800 		.ascii	"CPX\000"
 5678 09b4 00000000 		.space	4
 5679 09b8 00       		.ascii	"\000"
 5680 09b9 00000000 		.space	7
 5680      000000
 5681 09c0 4D5F5374 		.ascii	"M_Stats\000"
 5681      61747300 
 5682 09c8 00000000 		.space	7
 5682      000000
 5683 09cf 00       		.space	1
 5684 09d0 1A       		.byte	26
 5685 09d1 000000   		.space	3
 5686 09d4 01000000 		.word	1
 5687 09d8 1A       		.byte	26
 5688 09d9 000000   		.space	3
 5689 09dc 02000000 		.word	2
 5690 09e0 0100     		.ascii	"\001\000"
 5691 09e2 00000000 		.space	6
 5691      0000
 5692 09e8 532E442E 		.ascii	"S.D.\000"
 5692      00
 5693 09ed 000000   		.space	3
 5694 09f0 1B       		.byte	27
 5695 09f1 000000   		.space	3
 5696 09f4 01000000 		.word	1
 5697 09f8 34       		.byte	52
 5698 09f9 000000   		.space	3
 5699 09fc 74020000 		.word	628
 5700 0a00 792D6861 		.ascii	"y-hat\000"
 5700      7400
 5701 0a06 0000     		.space	2
ARM GAS  /tmp/ccuwCXMe.s 			page 147


 5702 0a08 782D6861 		.ascii	"x-hat\000"
 5702      7400
 5703 0a0e 0000     		.space	2
 5704 0a10 34       		.byte	52
 5705 0a11 000000   		.space	3
 5706 0a14 27010000 		.word	295
 5707 0a18 34       		.byte	52
 5708 0a19 000000   		.space	3
 5709 0a1c 28010000 		.word	296
 5710 0a20 434F5252 		.ascii	"CORR\000"
 5710      00
 5711 0a25 000000   		.space	3
 5712 0a28 4C2E522E 		.ascii	"L.R.\000"
 5712      00
 5713 0a2d 000000   		.space	3
 5714 0a30 34       		.byte	52
 5715 0a31 000000   		.space	3
 5716 0a34 32010000 		.word	306
 5717 0a38 34       		.byte	52
 5718 0a39 000000   		.space	3
 5719 0a3c 31010000 		.word	305
 5720 0a40 42657374 		.ascii	"BestF\000"
 5720      4600
 5721 0a46 0000     		.space	2
 5722 0a48 4C6F6746 		.ascii	"LogFit\000"
 5722      697400
 5723 0a4f 00       		.space	1
 5724 0a50 34       		.byte	52
 5725 0a51 000000   		.space	3
 5726 0a54 2E010000 		.word	302
 5727 0a58 34       		.byte	52
 5728 0a59 000000   		.space	3
 5729 0a5c 2F010000 		.word	303
 5730 0a60 4C696E65 		.ascii	"Linear\000"
 5730      617200
 5731 0a67 00       		.space	1
 5732 0a68 45787046 		.ascii	"ExpFit\000"
 5732      697400
 5733 0a6f 00       		.space	1
 5734 0a70 2D       		.byte	45
 5735 0a71 000000   		.space	3
 5736 0a74 FFFFFFFF 		.word	-1
 5737 0a78 34       		.byte	52
 5738 0a79 000000   		.space	3
 5739 0a7c 30010000 		.word	304
 5740 0a80 43505800 		.ascii	"CPX\000"
 5741 0a84 00000000 		.space	4
 5742 0a88 50777246 		.ascii	"PwrFit\000"
 5742      697400
 5743 0a8f 00       		.space	1
 5744 0a90 4D5F5365 		.ascii	"M_Setup2\000"
 5744      74757032 
 5744      00
 5745 0a99 00000000 		.space	6
 5745      0000
 5746 0a9f 00       		.space	1
 5747 0aa0 31       		.byte	49
ARM GAS  /tmp/ccuwCXMe.s 			page 148


 5748 0aa1 000000   		.space	3
 5749 0aa4 04000000 		.word	4
 5750 0aa8 2E       		.byte	46
 5751 0aa9 000000   		.space	3
 5752 0aac FFFFFFFF 		.word	-1
 5753 0ab0 53764C49 		.ascii	"SvLIB\000"
 5753      4200
 5754 0ab6 0000     		.space	2
 5755 0ab8 00       		.ascii	"\000"
 5756 0ab9 00000000 		.space	7
 5756      000000
 5757 0ac0 31       		.byte	49
 5758 0ac1 000000   		.space	3
 5759 0ac4 05000000 		.word	5
 5760 0ac8 2E       		.byte	46
 5761 0ac9 000000   		.space	3
 5762 0acc FFFFFFFF 		.word	-1
 5763 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5763      4200
 5764 0ad6 0000     		.space	2
 5765 0ad8 00       		.ascii	"\000"
 5766 0ad9 00000000 		.space	7
 5766      000000
 5767 0ae0 31       		.byte	49
 5768 0ae1 000000   		.space	3
 5769 0ae4 0A000000 		.word	10
 5770 0ae8 2E       		.byte	46
 5771 0ae9 000000   		.space	3
 5772 0aec FFFFFFFF 		.word	-1
 5773 0af0 53764350 		.ascii	"SvCPRG\000"
 5773      524700
 5774 0af7 00       		.space	1
 5775 0af8 00       		.ascii	"\000"
 5776 0af9 00000000 		.space	7
 5776      000000
 5777 0b00 31       		.byte	49
 5778 0b01 000000   		.space	3
 5779 0b04 08000000 		.word	8
 5780 0b08 2E       		.byte	46
 5781 0b09 000000   		.space	3
 5782 0b0c FFFFFFFF 		.word	-1
 5783 0b10 4C645052 		.ascii	"LdPRG\000"
 5783      4700
 5784 0b16 0000     		.space	2
 5785 0b18 00       		.ascii	"\000"
 5786 0b19 00000000 		.space	7
 5786      000000
 5787 0b20 2C       		.byte	44
 5788 0b21 000000   		.space	3
 5789 0b24 FFFFFFFF 		.word	-1
 5790 0b28 2E       		.byte	46
 5791 0b29 000000   		.space	3
 5792 0b2c FFFFFFFF 		.word	-1
 5793 0b30 2D2D0D00 		.ascii	"--\015\000"
 5794 0b34 00000000 		.space	4
 5795 0b38 00       		.ascii	"\000"
 5796 0b39 00000000 		.space	7
ARM GAS  /tmp/ccuwCXMe.s 			page 149


 5796      000000
 5797 0b40 2D       		.byte	45
 5798 0b41 000000   		.space	3
 5799 0b44 FFFFFFFF 		.word	-1
 5800 0b48 2E       		.byte	46
 5801 0b49 000000   		.space	3
 5802 0b4c FFFFFFFF 		.word	-1
 5803 0b50 43505800 		.ascii	"CPX\000"
 5804 0b54 00000000 		.space	4
 5805 0b58 00       		.ascii	"\000"
 5806 0b59 00000000 		.space	7
 5806      000000
 5807 0b60 4D5F536F 		.ascii	"M_Solve\000"
 5807      6C766500 
 5808 0b68 00000000 		.space	7
 5808      000000
 5809 0b6f 00       		.space	1
 5810 0b70 20       		.byte	32
 5811 0b71 000000   		.space	3
 5812 0b74 01000000 		.word	1
 5813 0b78 2E       		.byte	46
 5814 0b79 000000   		.space	3
 5815 0b7c FFFFFFFF 		.word	-1
 5816 0b80 534C5600 		.ascii	"SLV\000"
 5817 0b84 00000000 		.space	4
 5818 0b88 00       		.ascii	"\000"
 5819 0b89 00000000 		.space	7
 5819      000000
 5820 0b90 20       		.byte	32
 5821 0b91 000000   		.space	3
 5822 0b94 02000000 		.word	2
 5823 0b98 2E       		.byte	46
 5824 0b99 000000   		.space	3
 5825 0b9c FFFFFFFF 		.word	-1
 5826 0ba0 04206478 		.ascii	"\004 dx\000"
 5826      00
 5827 0ba5 000000   		.space	3
 5828 0ba8 00       		.ascii	"\000"
 5829 0ba9 00000000 		.space	7
 5829      000000
 5830 0bb0 21       		.byte	33
 5831 0bb1 000000   		.space	3
 5832 0bb4 02000000 		.word	2
 5833 0bb8 2E       		.byte	46
 5834 0bb9 000000   		.space	3
 5835 0bbc FFFFFFFF 		.word	-1
 5836 0bc0 53554D00 		.ascii	"SUM\000"
 5837 0bc4 00000000 		.space	4
 5838 0bc8 00       		.ascii	"\000"
 5839 0bc9 00000000 		.space	7
 5839      000000
 5840 0bd0 21       		.byte	33
 5841 0bd1 000000   		.space	3
 5842 0bd4 01000000 		.word	1
 5843 0bd8 2E       		.byte	46
 5844 0bd9 000000   		.space	3
 5845 0bdc FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccuwCXMe.s 			page 150


 5846 0be0 50524F44 		.ascii	"PROD\000"
 5846      00
 5847 0be5 000000   		.space	3
 5848 0be8 00       		.ascii	"\000"
 5849 0be9 00000000 		.space	7
 5849      000000
 5850 0bf0 2C       		.byte	44
 5851 0bf1 000000   		.space	3
 5852 0bf4 FFFFFFFF 		.word	-1
 5853 0bf8 2E       		.byte	46
 5854 0bf9 000000   		.space	3
 5855 0bfc FFFFFFFF 		.word	-1
 5856 0c00 2D2D0D00 		.ascii	"--\015\000"
 5857 0c04 00000000 		.space	4
 5858 0c08 00       		.ascii	"\000"
 5859 0c09 00000000 		.space	7
 5859      000000
 5860 0c10 2D       		.byte	45
 5861 0c11 000000   		.space	3
 5862 0c14 FFFFFFFF 		.word	-1
 5863 0c18 2E       		.byte	46
 5864 0c19 000000   		.space	3
 5865 0c1c FFFFFFFF 		.word	-1
 5866 0c20 43505800 		.ascii	"CPX\000"
 5867 0c24 00000000 		.space	4
 5868 0c28 00       		.ascii	"\000"
 5869 0c29 00000000 		.space	7
 5869      000000
 5870 0c30 4D5F426C 		.ascii	"M_Blank2\000"
 5870      616E6B32 
 5870      00
 5871 0c39 00000000 		.space	6
 5871      0000
 5872 0c3f 00       		.space	1
 5873 0c40 28       		.byte	40
 5874 0c41 000000   		.space	3
 5875 0c44 03000000 		.word	3
 5876 0c48 2E       		.byte	46
 5877 0c49 000000   		.space	3
 5878 0c4c FFFFFFFF 		.word	-1
 5879 0c50 912B00   		.ascii	"\221+\000"
 5880 0c53 00000000 		.space	5
 5880      00
 5881 0c58 00       		.ascii	"\000"
 5882 0c59 00000000 		.space	7
 5882      000000
 5883 0c60 16       		.byte	22
 5884 0c61 000000   		.space	3
 5885 0c64 01000000 		.word	1
 5886 0c68 2E       		.byte	46
 5887 0c69 000000   		.space	3
 5888 0c6c FFFFFFFF 		.word	-1
 5889 0c70 312F5800 		.ascii	"1/X\000"
 5890 0c74 00000000 		.space	4
 5891 0c78 00       		.ascii	"\000"
 5892 0c79 00000000 		.space	7
 5892      000000
ARM GAS  /tmp/ccuwCXMe.s 			page 151


 5893 0c80 1C       		.byte	28
 5894 0c81 000000   		.space	3
 5895 0c84 01000000 		.word	1
 5896 0c88 2E       		.byte	46
 5897 0c89 000000   		.space	3
 5898 0c8c FFFFFFFF 		.word	-1
 5899 0c90 035800   		.ascii	"\003X\000"
 5900 0c93 00000000 		.space	5
 5900      00
 5901 0c98 00       		.ascii	"\000"
 5902 0c99 00000000 		.space	7
 5902      000000
 5903 0ca0 13       		.byte	19
 5904 0ca1 000000   		.space	3
 5905 0ca4 02000000 		.word	2
 5906 0ca8 2E       		.byte	46
 5907 0ca9 000000   		.space	3
 5908 0cac FFFFFFFF 		.word	-1
 5909 0cb0 4C4F4700 		.ascii	"LOG\000"
 5910 0cb4 00000000 		.space	4
 5911 0cb8 00       		.ascii	"\000"
 5912 0cb9 00000000 		.space	7
 5912      000000
 5913 0cc0 2C       		.byte	44
 5914 0cc1 000000   		.space	3
 5915 0cc4 FFFFFFFF 		.word	-1
 5916 0cc8 2E       		.byte	46
 5917 0cc9 000000   		.space	3
 5918 0ccc FFFFFFFF 		.word	-1
 5919 0cd0 2D2D0D00 		.ascii	"--\015\000"
 5920 0cd4 00000000 		.space	4
 5921 0cd8 00       		.ascii	"\000"
 5922 0cd9 00000000 		.space	7
 5922      000000
 5923 0ce0 2D       		.byte	45
 5924 0ce1 000000   		.space	3
 5925 0ce4 FFFFFFFF 		.word	-1
 5926 0ce8 2E       		.byte	46
 5927 0ce9 000000   		.space	3
 5928 0cec FFFFFFFF 		.word	-1
 5929 0cf0 43505800 		.ascii	"CPX\000"
 5930 0cf4 00000000 		.space	4
 5931 0cf8 00       		.ascii	"\000"
 5932 0cf9 00000000 		.space	7
 5932      000000
 5933 0d00 4D5F416C 		.ascii	"M_Alpha\000"
 5933      70686100 
 5934 0d08 00000000 		.space	7
 5934      000000
 5935 0d0f 00       		.space	1
 5936 0d10 34       		.byte	52
 5937 0d11 000000   		.space	3
 5938 0d14 78010000 		.word	376
 5939 0d18 34       		.byte	52
 5940 0d19 000000   		.space	3
 5941 0d1c 6D010000 		.word	365
 5942 0d20 582D3EA0 		.ascii	"X->\240\000"
ARM GAS  /tmp/ccuwCXMe.s 			page 152


 5942      00
 5943 0d25 000000   		.space	3
 5944 0d28 A054494D 		.ascii	"\240TIME\000"
 5944      4500
 5945 0d2e 0000     		.space	2
 5946 0d30 34       		.byte	52
 5947 0d31 000000   		.space	3
 5948 0d34 77010000 		.word	375
 5949 0d38 34       		.byte	52
 5950 0d39 000000   		.space	3
 5951 0d3c 6C010000 		.word	364
 5952 0d40 A02D3E58 		.ascii	"\240->X\000"
 5952      00
 5953 0d45 000000   		.space	3
 5954 0d48 A0444154 		.ascii	"\240DATE\000"
 5954      4500
 5955 0d4e 0000     		.space	2
 5956 0d50 34       		.byte	52
 5957 0d51 000000   		.space	3
 5958 0d54 00480000 		.word	18432
 5959 0d58 34       		.byte	52
 5960 0d59 000000   		.space	3
 5961 0d5c 6A010000 		.word	362
 5962 0d60 A0495000 		.ascii	"\240IP\000"
 5963 0d64 00000000 		.space	4
 5964 0d68 A0444159 		.ascii	"\240DAY\000"
 5964      00
 5965 0d6d 000000   		.space	3
 5966 0d70 34       		.byte	52
 5967 0d71 000000   		.space	3
 5968 0d74 76010000 		.word	374
 5969 0d78 34       		.byte	52
 5970 0d79 000000   		.space	3
 5971 0d7c 6B010000 		.word	363
 5972 0d80 A04C454E 		.ascii	"\240LENG\000"
 5972      4700
 5973 0d86 0000     		.space	2
 5974 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 5974      4800
 5975 0d8e 0000     		.space	2
 5976 0d90 2C       		.byte	44
 5977 0d91 000000   		.space	3
 5978 0d94 FFFFFFFF 		.word	-1
 5979 0d98 2C       		.byte	44
 5980 0d99 000000   		.space	3
 5981 0d9c 01000000 		.word	1
 5982 0da0 2D2D0D00 		.ascii	"--\015\000"
 5983 0da4 00000000 		.space	4
 5984 0da8 00       		.ascii	"\000"
 5985 0da9 00000000 		.space	7
 5985      000000
 5986 0db0 2D       		.byte	45
 5987 0db1 000000   		.space	3
 5988 0db4 FFFFFFFF 		.word	-1
 5989 0db8 2D       		.byte	45
 5990 0db9 000000   		.space	3
 5991 0dbc 01000000 		.word	1
ARM GAS  /tmp/ccuwCXMe.s 			page 153


 5992 0dc0 43505800 		.ascii	"CPX\000"
 5993 0dc4 00000000 		.space	4
 5994 0dc8 00       		.ascii	"\000"
 5995 0dc9 00000000 		.space	7
 5995      000000
 5996 0dd0 4D5F435F 		.ascii	"M_C_Lock\000"
 5996      4C6F636B 
 5996      00
 5997 0dd9 00000000 		.space	6
 5997      0000
 5998 0ddf 00       		.space	1
 5999 0de0 18       		.byte	24
 6000 0de1 000000   		.space	3
 6001 0de4 02000000 		.word	2
 6002 0de8 04       		.byte	4
 6003 0de9 000000   		.space	3
 6004 0dec 02000000 		.word	2
 6005 0df0 504F4C41 		.ascii	"POLAR\000"
 6005      5200
 6006 0df6 0000     		.space	2
 6007 0df8 0D205000 		.ascii	"\015 P\000"
 6008 0dfc 00000000 		.space	4
 6009 0e00 18       		.byte	24
 6010 0e01 000000   		.space	3
 6011 0e04 01000000 		.word	1
 6012 0e08 04       		.byte	4
 6013 0e09 000000   		.space	3
 6014 0e0c 01000000 		.word	1
 6015 0e10 52454354 		.ascii	"RECT\000"
 6015      00
 6016 0e15 000000   		.space	3
 6017 0e18 0D205200 		.ascii	"\015 R\000"
 6018 0e1c 00000000 		.space	4
 6019 0e20 0E       		.byte	14
 6020 0e21 000000   		.space	3
 6021 0e24 01000000 		.word	1
 6022 0e28 0E       		.byte	14
 6023 0e29 000000   		.space	3
 6024 0e2c 03000000 		.word	3
 6025 0e30 43485306 		.ascii	"CHS\006y\000"
 6025      7900
 6026 0e36 0000     		.space	2
 6027 0e38 43485306 		.ascii	"CHS\006x\000"
 6027      7800
 6028 0e3e 0000     		.space	2
 6029 0e40 0D       		.byte	13
 6030 0e41 000000   		.space	3
 6031 0e44 01000000 		.word	1
 6032 0e48 00       		.byte	0
 6033 0e49 000000   		.space	3
 6034 0e4c 01000000 		.word	1
 6035 0e50 78177900 		.ascii	"x\027y\000"
 6036 0e54 00000000 		.space	4
 6037 0e58 48595000 		.ascii	"HYP\000"
 6038 0e5c 00000000 		.space	4
 6039 0e60 2C       		.byte	44
 6040 0e61 000000   		.space	3
ARM GAS  /tmp/ccuwCXMe.s 			page 154


 6041 0e64 FFFFFFFF 		.word	-1
 6042 0e68 0F       		.byte	15
 6043 0e69 000000   		.space	3
 6044 0e6c 01000000 		.word	1
 6045 0e70 2D2D0D00 		.ascii	"--\015\000"
 6046 0e74 00000000 		.space	4
 6047 0e78 1106AF00 		.ascii	"\021\006\257\000"
 6048 0e7c 00000000 		.space	4
 6049 0e80 2D       		.byte	45
 6050 0e81 000000   		.space	3
 6051 0e84 FFFFFFFF 		.word	-1
 6052 0e88 0C       		.byte	12
 6053 0e89 000000   		.space	3
 6054 0e8c 01000000 		.word	1
 6055 0e90 43505800 		.ascii	"CPX\000"
 6056 0e94 00000000 		.space	4
 6057 0e98 1106434E 		.ascii	"\021\006CNST\000"
 6057      535400
 6058 0e9f 00       		.space	1
 6059 0ea0 4D5F436C 		.ascii	"M_Clear_C\000"
 6059      6561725F 
 6059      4300
 6060 0eaa 00000000 		.space	5
 6060      00
 6061 0eaf 00       		.space	1
 6062 0eb0 2E       		.byte	46
 6063 0eb1 000000   		.space	3
 6064 0eb4 FFFFFFFF 		.word	-1
 6065 0eb8 2E       		.byte	46
 6066 0eb9 000000   		.space	3
 6067 0ebc FFFFFFFF 		.word	-1
 6068 0ec0 00       		.ascii	"\000"
 6069 0ec1 00000000 		.space	7
 6069      000000
 6070 0ec8 00       		.ascii	"\000"
 6071 0ec9 00000000 		.space	7
 6071      000000
 6072 0ed0 2E       		.byte	46
 6073 0ed1 000000   		.space	3
 6074 0ed4 FFFFFFFF 		.word	-1
 6075 0ed8 2E       		.byte	46
 6076 0ed9 000000   		.space	3
 6077 0edc FFFFFFFF 		.word	-1
 6078 0ee0 00       		.ascii	"\000"
 6079 0ee1 00000000 		.space	7
 6079      000000
 6080 0ee8 00       		.ascii	"\000"
 6081 0ee9 00000000 		.space	7
 6081      000000
 6082 0ef0 10       		.byte	16
 6083 0ef1 000000   		.space	3
 6084 0ef4 03000000 		.word	3
 6085 0ef8 34       		.byte	52
 6086 0ef9 000000   		.space	3
 6087 0efc 74010000 		.word	372
 6088 0f00 434C7800 		.ascii	"CLx\000"
 6089 0f04 00000000 		.space	4
ARM GAS  /tmp/ccuwCXMe.s 			page 155


 6090 0f08 434C06A0 		.ascii	"CL\006\240\000"
 6090      00
 6091 0f0d 000000   		.space	3
 6092 0f10 34       		.byte	52
 6093 0f11 000000   		.space	3
 6094 0f14 40010000 		.word	320
 6095 0f18 2E       		.byte	46
 6096 0f19 000000   		.space	3
 6097 0f1c FFFFFFFF 		.word	-1
 6098 0f20 434C5374 		.ascii	"CLStk\000"
 6098      6B00
 6099 0f26 0000     		.space	2
 6100 0f28 00       		.ascii	"\000"
 6101 0f29 00000000 		.space	7
 6101      000000
 6102 0f30 2C       		.byte	44
 6103 0f31 000000   		.space	3
 6104 0f34 FFFFFFFF 		.word	-1
 6105 0f38 2E       		.byte	46
 6106 0f39 000000   		.space	3
 6107 0f3c FFFFFFFF 		.word	-1
 6108 0f40 2D2D0D00 		.ascii	"--\015\000"
 6109 0f44 00000000 		.space	4
 6110 0f48 00       		.ascii	"\000"
 6111 0f49 00000000 		.space	7
 6111      000000
 6112 0f50 2D       		.byte	45
 6113 0f51 000000   		.space	3
 6114 0f54 FFFFFFFF 		.word	-1
 6115 0f58 2E       		.byte	46
 6116 0f59 000000   		.space	3
 6117 0f5c FFFFFFFF 		.word	-1
 6118 0f60 43505800 		.ascii	"CPX\000"
 6119 0f64 00000000 		.space	4
 6120 0f68 00       		.ascii	"\000"
 6121 0f69 00000000 		.space	7
 6121      000000
 6122 0f70 4D5F5377 		.ascii	"M_Swap_C\000"
 6122      61705F43 
 6122      00
 6123 0f79 00000000 		.space	6
 6123      0000
 6124 0f7f 00       		.space	1
 6125 0f80 0D       		.byte	13
 6126 0f81 000000   		.space	3
 6127 0f84 01000000 		.word	1
 6128 0f88 2E       		.byte	46
 6129 0f89 000000   		.space	3
 6130 0f8c FFFFFFFF 		.word	-1
 6131 0f90 53686F77 		.ascii	"Show\016\000"
 6131      0E00
 6132 0f96 0000     		.space	2
 6133 0f98 00       		.ascii	"\000"
 6134 0f99 00000000 		.space	7
 6134      000000
 6135 0fa0 0D       		.byte	13
 6136 0fa1 000000   		.space	3
ARM GAS  /tmp/ccuwCXMe.s 			page 156


 6137 0fa4 02000000 		.word	2
 6138 0fa8 2E       		.byte	46
 6139 0fa9 000000   		.space	3
 6140 0fac FFFFFFFF 		.word	-1
 6141 0fb0 53686F77 		.ascii	"Show\015\000"
 6141      0D00
 6142 0fb6 0000     		.space	2
 6143 0fb8 00       		.ascii	"\000"
 6144 0fb9 00000000 		.space	7
 6144      000000
 6145 0fc0 0D       		.byte	13
 6146 0fc1 000000   		.space	3
 6147 0fc4 03000000 		.word	3
 6148 0fc8 2E       		.byte	46
 6149 0fc9 000000   		.space	3
 6150 0fcc FFFFFFFF 		.word	-1
 6151 0fd0 78173F00 		.ascii	"x\027?\000"
 6152 0fd4 00000000 		.space	4
 6153 0fd8 00       		.ascii	"\000"
 6154 0fd9 00000000 		.space	7
 6154      000000
 6155 0fe0 2E       		.byte	46
 6156 0fe1 000000   		.space	3
 6157 0fe4 FFFFFFFF 		.word	-1
 6158 0fe8 2E       		.byte	46
 6159 0fe9 000000   		.space	3
 6160 0fec FFFFFFFF 		.word	-1
 6161 0ff0 00       		.ascii	"\000"
 6162 0ff1 00000000 		.space	7
 6162      000000
 6163 0ff8 00       		.ascii	"\000"
 6164 0ff9 00000000 		.space	7
 6164      000000
 6165 1000 2C       		.byte	44
 6166 1001 000000   		.space	3
 6167 1004 FFFFFFFF 		.word	-1
 6168 1008 2E       		.byte	46
 6169 1009 000000   		.space	3
 6170 100c FFFFFFFF 		.word	-1
 6171 1010 2D2D0D00 		.ascii	"--\015\000"
 6172 1014 00000000 		.space	4
 6173 1018 00       		.ascii	"\000"
 6174 1019 00000000 		.space	7
 6174      000000
 6175 1020 2D       		.byte	45
 6176 1021 000000   		.space	3
 6177 1024 FFFFFFFF 		.word	-1
 6178 1028 2E       		.byte	46
 6179 1029 000000   		.space	3
 6180 102c FFFFFFFF 		.word	-1
 6181 1030 43505800 		.ascii	"CPX\000"
 6182 1034 00000000 		.space	4
 6183 1038 00       		.ascii	"\000"
 6184 1039 00000000 		.space	7
 6184      000000
 6185 1040 4D5F4172 		.ascii	"M_Arrow_C\000"
 6185      726F775F 
ARM GAS  /tmp/ccuwCXMe.s 			page 157


 6185      4300
 6186 104a 00000000 		.space	5
 6186      00
 6187 104f 00       		.space	1
 6188 1050 2E       		.byte	46
 6189 1051 000000   		.space	3
 6190 1054 FFFFFFFF 		.word	-1
 6191 1058 06       		.byte	6
 6192 1059 000000   		.space	3
 6193 105c 02000000 		.word	2
 6194 1060 00       		.ascii	"\000"
 6195 1061 00000000 		.space	7
 6195      000000
 6196 1068 44454700 		.ascii	"DEG\000"
 6197 106c 00000000 		.space	4
 6198 1070 2E       		.byte	46
 6199 1071 000000   		.space	3
 6200 1074 FFFFFFFF 		.word	-1
 6201 1078 07       		.byte	7
 6202 1079 000000   		.space	3
 6203 107c 02000000 		.word	2
 6204 1080 00       		.ascii	"\000"
 6205 1081 00000000 		.space	7
 6205      000000
 6206 1088 52414400 		.ascii	"RAD\000"
 6207 108c 00000000 		.space	4
 6208 1090 2E       		.byte	46
 6209 1091 000000   		.space	3
 6210 1094 FFFFFFFF 		.word	-1
 6211 1098 08       		.byte	8
 6212 1099 000000   		.space	3
 6213 109c 02000000 		.word	2
 6214 10a0 00       		.ascii	"\000"
 6215 10a1 00000000 		.space	7
 6215      000000
 6216 10a8 47726164 		.ascii	"Grad\000"
 6216      00
 6217 10ad 000000   		.space	3
 6218 10b0 2E       		.byte	46
 6219 10b1 000000   		.space	3
 6220 10b4 FFFFFFFF 		.word	-1
 6221 10b8 06       		.byte	6
 6222 10b9 000000   		.space	3
 6223 10bc 01000000 		.word	1
 6224 10c0 00       		.ascii	"\000"
 6225 10c1 00000000 		.space	7
 6225      000000
 6226 10c8 0D484D53 		.ascii	"\015HMS\000"
 6226      00
 6227 10cd 000000   		.space	3
 6228 10d0 2C       		.byte	44
 6229 10d1 000000   		.space	3
 6230 10d4 FFFFFFFF 		.word	-1
 6231 10d8 07       		.byte	7
 6232 10d9 000000   		.space	3
 6233 10dc 01000000 		.word	1
 6234 10e0 2D2D0D00 		.ascii	"--\015\000"
ARM GAS  /tmp/ccuwCXMe.s 			page 158


 6235 10e4 00000000 		.space	4
 6236 10e8 484D530D 		.ascii	"HMS\015\000"
 6236      00
 6237 10ed 000000   		.space	3
 6238 10f0 2D       		.byte	45
 6239 10f1 000000   		.space	3
 6240 10f4 FFFFFFFF 		.word	-1
 6241 10f8 2E       		.byte	46
 6242 10f9 000000   		.space	3
 6243 10fc FFFFFFFF 		.word	-1
 6244 1100 43505800 		.ascii	"CPX\000"
 6245 1104 00000000 		.space	4
 6246 1108 00       		.ascii	"\000"
 6247 1109 00000000 		.space	7
 6247      000000
 6248 1110 4D5F5072 		.ascii	"M_Prob_C\000"
 6248      6F625F43 
 6248      00
 6249 1119 00000000 		.space	6
 6249      0000
 6250 111f 00       		.space	1
 6251 1120 18       		.byte	24
 6252 1121 000000   		.space	3
 6253 1124 03000000 		.word	3
 6254 1128 34       		.byte	52
 6255 1129 000000   		.space	3
 6256 112c 31050000 		.word	1329
 6257 1130 14062100 		.ascii	"\024\006!\000"
 6258 1134 00000000 		.space	4
 6259 1138 14064C6E 		.ascii	"\024\006Ln\006\202\000"
 6259      068200
 6260 113f 00       		.space	1
 6261 1140 34       		.byte	52
 6262 1141 000000   		.space	3
 6263 1144 12060000 		.word	1554
 6264 1148 2E       		.byte	46
 6265 1149 000000   		.space	3
 6266 114c FFFFFFFF 		.word	-1
 6267 1150 14064379 		.ascii	"\024\006Cy,x\000"
 6267      2C7800
 6268 1157 00       		.space	1
 6269 1158 00       		.ascii	"\000"
 6270 1159 00000000 		.space	7
 6270      000000
 6271 1160 34       		.byte	52
 6272 1161 000000   		.space	3
 6273 1164 13060000 		.word	1555
 6274 1168 2E       		.byte	46
 6275 1169 000000   		.space	3
 6276 116c FFFFFFFF 		.word	-1
 6277 1170 14065079 		.ascii	"\024\006Py,x\000"
 6277      2C7800
 6278 1177 00       		.space	1
 6279 1178 00       		.ascii	"\000"
 6280 1179 00000000 		.space	7
 6280      000000
 6281 1180 2E       		.byte	46
ARM GAS  /tmp/ccuwCXMe.s 			page 159


 6282 1181 000000   		.space	3
 6283 1184 FFFFFFFF 		.word	-1
 6284 1188 2E       		.byte	46
 6285 1189 000000   		.space	3
 6286 118c FFFFFFFF 		.word	-1
 6287 1190 00       		.ascii	"\000"
 6288 1191 00000000 		.space	7
 6288      000000
 6289 1198 00       		.ascii	"\000"
 6290 1199 00000000 		.space	7
 6290      000000
 6291 11a0 2C       		.byte	44
 6292 11a1 000000   		.space	3
 6293 11a4 FFFFFFFF 		.word	-1
 6294 11a8 2E       		.byte	46
 6295 11a9 000000   		.space	3
 6296 11ac FFFFFFFF 		.word	-1
 6297 11b0 2D2D0D00 		.ascii	"--\015\000"
 6298 11b4 00000000 		.space	4
 6299 11b8 00       		.ascii	"\000"
 6300 11b9 00000000 		.space	7
 6300      000000
 6301 11c0 2D       		.byte	45
 6302 11c1 000000   		.space	3
 6303 11c4 FFFFFFFF 		.word	-1
 6304 11c8 2E       		.byte	46
 6305 11c9 000000   		.space	3
 6306 11cc FFFFFFFF 		.word	-1
 6307 11d0 43505800 		.ascii	"CPX\000"
 6308 11d4 00000000 		.space	4
 6309 11d8 00       		.ascii	"\000"
 6310 11d9 00000000 		.space	7
 6310      000000
 6311 11e0 4D5F426C 		.ascii	"M_Blank2_C\000"
 6311      616E6B32 
 6311      5F4300
 6312 11eb 00000000 		.space	4
 6313 11ef 00       		.space	1
 6314 11f0 00       		.byte	0
 6315 11f1 000000   		.space	3
 6316 11f4 01000000 		.word	1
 6317 11f8 2E       		.byte	46
 6318 11f9 000000   		.space	3
 6319 11fc FFFFFFFF 		.word	-1
 6320 1200 48595000 		.ascii	"HYP\000"
 6321 1204 00000000 		.space	4
 6322 1208 00       		.ascii	"\000"
 6323 1209 00000000 		.space	7
 6323      000000
 6324 1210 16       		.byte	22
 6325 1211 000000   		.space	3
 6326 1214 01000000 		.word	1
 6327 1218 2E       		.byte	46
 6328 1219 000000   		.space	3
 6329 121c FFFFFFFF 		.word	-1
 6330 1220 312F5800 		.ascii	"1/X\000"
 6331 1224 00000000 		.space	4
ARM GAS  /tmp/ccuwCXMe.s 			page 160


 6332 1228 00       		.ascii	"\000"
 6333 1229 00000000 		.space	7
 6333      000000
 6334 1230 1C       		.byte	28
 6335 1231 000000   		.space	3
 6336 1234 01000000 		.word	1
 6337 1238 2E       		.byte	46
 6338 1239 000000   		.space	3
 6339 123c FFFFFFFF 		.word	-1
 6340 1240 035800   		.ascii	"\003X\000"
 6341 1243 00000000 		.space	5
 6341      00
 6342 1248 00       		.ascii	"\000"
 6343 1249 00000000 		.space	7
 6343      000000
 6344 1250 13       		.byte	19
 6345 1251 000000   		.space	3
 6346 1254 02000000 		.word	2
 6347 1258 2E       		.byte	46
 6348 1259 000000   		.space	3
 6349 125c FFFFFFFF 		.word	-1
 6350 1260 4C4F4700 		.ascii	"LOG\000"
 6351 1264 00000000 		.space	4
 6352 1268 00       		.ascii	"\000"
 6353 1269 00000000 		.space	7
 6353      000000
 6354 1270 2C       		.byte	44
 6355 1271 000000   		.space	3
 6356 1274 FFFFFFFF 		.word	-1
 6357 1278 2E       		.byte	46
 6358 1279 000000   		.space	3
 6359 127c FFFFFFFF 		.word	-1
 6360 1280 2D2D0D00 		.ascii	"--\015\000"
 6361 1284 00000000 		.space	4
 6362 1288 00       		.ascii	"\000"
 6363 1289 00000000 		.space	7
 6363      000000
 6364 1290 2D       		.byte	45
 6365 1291 000000   		.space	3
 6366 1294 FFFFFFFF 		.word	-1
 6367 1298 2E       		.byte	46
 6368 1299 000000   		.space	3
 6369 129c FFFFFFFF 		.word	-1
 6370 12a0 43505800 		.ascii	"CPX\000"
 6371 12a4 00000000 		.space	4
 6372 12a8 00       		.ascii	"\000"
 6373 12a9 00000000 		.space	7
 6373      000000
 6374 12b0 4D5F4D69 		.ascii	"M_Misc_C\000"
 6374      73635F43 
 6374      00
 6375 12b9 00000000 		.space	6
 6375      0000
 6376 12bf 00       		.space	1
 6377 12c0 25       		.byte	37
 6378 12c1 000000   		.space	3
 6379 12c4 01000000 		.word	1
ARM GAS  /tmp/ccuwCXMe.s 			page 161


 6380 12c8 14       		.byte	20
 6381 12c9 000000   		.space	3
 6382 12cc 01000000 		.word	1
 6383 12d0 7C587C00 		.ascii	"|X|\000"
 6384 12d4 00000000 		.space	4
 6385 12d8 329C00   		.ascii	"2\234\000"
 6386 12db 00000000 		.space	5
 6386      00
 6387 12e0 25       		.byte	37
 6388 12e1 000000   		.space	3
 6389 12e4 02000000 		.word	2
 6390 12e8 14       		.byte	20
 6391 12e9 000000   		.space	3
 6392 12ec 02000000 		.word	2
 6393 12f0 524E4400 		.ascii	"RND\000"
 6394 12f4 00000000 		.space	4
 6395 12f8 4C6F67BA 		.ascii	"Log\272\000"
 6395      00
 6396 12fd 000000   		.space	3
 6397 1300 26       		.byte	38
 6398 1301 000000   		.space	3
 6399 1304 01000000 		.word	1
 6400 1308 15       		.byte	21
 6401 1309 000000   		.space	3
 6402 130c 02000000 		.word	2
 6403 1310 300D5265 		.ascii	"0\015Re\000"
 6403      00
 6404 1315 000000   		.space	3
 6405 1318 4C6F678B 		.ascii	"Log\213\000"
 6405      00
 6406 131d 000000   		.space	3
 6407 1320 26       		.byte	38
 6408 1321 000000   		.space	3
 6409 1324 02000000 		.word	2
 6410 1328 16       		.byte	22
 6411 1329 000000   		.space	3
 6412 132c 02000000 		.word	2
 6413 1330 300D496D 		.ascii	"0\015Im\000"
 6413      00
 6414 1335 000000   		.space	3
 6415 1338 7C7C656C 		.ascii	"||el\000"
 6415      00
 6416 133d 000000   		.space	3
 6417 1340 2C       		.byte	44
 6418 1341 000000   		.space	3
 6419 1344 FFFFFFFF 		.word	-1
 6420 1348 1C       		.byte	28
 6421 1349 000000   		.space	3
 6422 134c 03000000 		.word	3
 6423 1350 2D2D0D00 		.ascii	"--\015\000"
 6424 1354 00000000 		.space	4
 6425 1358 2E1C00   		.ascii	".\034\000"
 6426 135b 00000000 		.space	5
 6426      00
 6427 1360 2D       		.byte	45
 6428 1361 000000   		.space	3
 6429 1364 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccuwCXMe.s 			page 162


 6430 1368 16       		.byte	22
 6431 1369 000000   		.space	3
 6432 136c 03000000 		.word	3
 6433 1370 43505800 		.ascii	"CPX\000"
 6434 1374 00000000 		.space	4
 6435 1378 2E2F00   		.ascii	"./\000"
 6436 137b 00000000 		.space	5
 6436      00
 6437 1380 4D5F5573 		.ascii	"M_Usermenu\000"
 6437      65726D65 
 6437      6E7500
 6438 138b 00000000 		.space	4
 6439 138f 00       		.space	1
 6440 1390 34       		.byte	52
 6441 1391 000000   		.space	3
 6442 1394 00FB0000 		.word	64256
 6443 1398 2E       		.byte	46
 6444 1399 000000   		.space	3
 6445 139c FFFFFFFF 		.word	-1
 6446 13a0 554D454E 		.ascii	"UMEN\000"
 6446      00
 6447 13a5 000000   		.space	3
 6448 13a8 00       		.ascii	"\000"
 6449 13a9 00000000 		.space	7
 6449      000000
 6450 13b0 34       		.byte	52
 6451 13b1 000000   		.space	3
 6452 13b4 55FB4D31 		.word	827194197
 6453 13b8 34       		.byte	52
 6454 13b9 000000   		.space	3
 6455 13bc 55FB4D34 		.word	877525845
 6456 13c0 554D3100 		.ascii	"UM1\000"
 6457 13c4 00000000 		.space	4
 6458 13c8 554D3400 		.ascii	"UM4\000"
 6459 13cc 00000000 		.space	4
 6460 13d0 34       		.byte	52
 6461 13d1 000000   		.space	3
 6462 13d4 55FB4D32 		.word	843971413
 6463 13d8 34       		.byte	52
 6464 13d9 000000   		.space	3
 6465 13dc 55FB4D35 		.word	894303061
 6466 13e0 554D3200 		.ascii	"UM2\000"
 6467 13e4 00000000 		.space	4
 6468 13e8 554D3500 		.ascii	"UM5\000"
 6469 13ec 00000000 		.space	4
 6470 13f0 34       		.byte	52
 6471 13f1 000000   		.space	3
 6472 13f4 55FB4D33 		.word	860748629
 6473 13f8 34       		.byte	52
 6474 13f9 000000   		.space	3
 6475 13fc 55FB4D36 		.word	911080277
 6476 1400 554D3300 		.ascii	"UM3\000"
 6477 1404 00000000 		.space	4
 6478 1408 554D3600 		.ascii	"UM6\000"
 6479 140c 00000000 		.space	4
 6480 1410 2C       		.byte	44
 6481 1411 000000   		.space	3
ARM GAS  /tmp/ccuwCXMe.s 			page 163


 6482 1414 FFFFFFFF 		.word	-1
 6483 1418 1C       		.byte	28
 6484 1419 000000   		.space	3
 6485 141c 03000000 		.word	3
 6486 1420 2D2D0D00 		.ascii	"--\015\000"
 6487 1424 00000000 		.space	4
 6488 1428 00       		.ascii	"\000"
 6489 1429 00000000 		.space	7
 6489      000000
 6490 1430 2D       		.byte	45
 6491 1431 000000   		.space	3
 6492 1434 FFFFFFFF 		.word	-1
 6493 1438 16       		.byte	22
 6494 1439 000000   		.space	3
 6495 143c 03000000 		.word	3
 6496 1440 43505800 		.ascii	"CPX\000"
 6497 1444 00000000 		.space	4
 6498 1448 00       		.ascii	"\000"
 6499 1449 00000000 		.space	7
 6499      000000
 6500 1450 4D5F5072 		.ascii	"M_Print\000"
 6500      696E7400 
 6501 1458 00000000 		.space	7
 6501      000000
 6502 145f 00       		.space	1
 6503 1460 34       		.byte	52
 6504 1461 000000   		.space	3
 6505 1464 D9010000 		.word	473
 6506 1468 34       		.byte	52
 6507 1469 000000   		.space	3
 6508 146c DA010000 		.word	474
 6509 1470 92064F6E 		.ascii	"\222\006On\000"
 6509      00
 6510 1475 000000   		.space	3
 6511 1478 92064F66 		.ascii	"\222\006Off\000"
 6511      6600
 6512 147e 0000     		.space	2
 6513 1480 34       		.byte	52
 6514 1481 000000   		.space	3
 6515 1484 00AF0000 		.word	44800
 6516 1488 34       		.byte	52
 6517 1489 000000   		.space	3
 6518 148c 00B60000 		.word	46592
 6519 1490 92064D6F 		.ascii	"\222\006Mode\000"
 6519      646500
 6520 1497 00       		.space	1
 6521 1498 92064462 		.ascii	"\222\006DbSp\000"
 6521      537000
 6522 149f 00       		.space	1
 6523 14a0 34       		.byte	52
 6524 14a1 000000   		.space	3
 6525 14a4 BC010000 		.word	444
 6526 14a8 34       		.byte	52
 6527 14a9 000000   		.space	3
 6528 14ac BD010000 		.word	445
 6529 14b0 92065072 		.ascii	"\222\006Prog\000"
 6529      6F6700
ARM GAS  /tmp/ccuwCXMe.s 			page 164


 6530 14b7 00       		.space	1
 6531 14b8 92065265 		.ascii	"\222\006Regs\000"
 6531      677300
 6532 14bf 00       		.space	1
 6533 14c0 34       		.byte	52
 6534 14c1 000000   		.space	3
 6535 14c4 BE010000 		.word	446
 6536 14c8 34       		.byte	52
 6537 14c9 000000   		.space	3
 6538 14cc BF010000 		.word	447
 6539 14d0 92065374 		.ascii	"\222\006Stck\000"
 6539      636B00
 6540 14d7 00       		.space	1
 6541 14d8 92069100 		.ascii	"\222\006\221\000"
 6542 14dc 00000000 		.space	4
 6543 14e0 2C       		.byte	44
 6544 14e1 000000   		.space	3
 6545 14e4 FFFFFFFF 		.word	-1
 6546 14e8 34       		.byte	52
 6547 14e9 000000   		.space	3
 6548 14ec C0010000 		.word	448
 6549 14f0 2D2D0D00 		.ascii	"--\015\000"
 6550 14f4 00000000 		.space	4
 6551 14f8 9206A000 		.ascii	"\222\006\240\000"
 6552 14fc 00000000 		.space	4
 6553 1500 2D       		.byte	45
 6554 1501 000000   		.space	3
 6555 1504 FFFFFFFF 		.word	-1
 6556 1508 34       		.byte	52
 6557 1509 000000   		.space	3
 6558 150c C3010000 		.word	451
 6559 1510 43505800 		.ascii	"CPX\000"
 6560 1514 00000000 		.space	4
 6561 1518 92064144 		.ascii	"\222\006ADV\000"
 6561      5600
 6562 151e 0000     		.space	2
 6563              		.section	.rodata.mapping_alpha.11148,"a"
 6564              		.align	2
 6565              		.set	.LANCHOR16,. + 0
 6568              	mapping_alpha.11148:
 6569 0000 63       		.byte	99
 6570 0001 000000   		.space	3
 6571 0004 FFFFFFFF 		.word	-1
 6572 0008 00       		.byte	0
 6573 0009 000000   		.space	3
 6574 000c FFFFFFFF 		.word	-1
 6575 0010 01       		.byte	1
 6576 0011 000000   		.space	3
 6577 0014 FFFFFFFF 		.word	-1
 6578 0018 02       		.byte	2
 6579 0019 000000   		.space	3
 6580 001c FFFFFFFF 		.word	-1
 6581 0020 03       		.byte	3
 6582 0021 000000   		.space	3
 6583 0024 FFFFFFFF 		.word	-1
 6584 0028 04       		.byte	4
 6585 0029 000000   		.space	3
ARM GAS  /tmp/ccuwCXMe.s 			page 165


 6586 002c FFFFFFFF 		.word	-1
 6587 0030 05       		.byte	5
 6588 0031 000000   		.space	3
 6589 0034 FFFFFFFF 		.word	-1
 6590 0038 06       		.byte	6
 6591 0039 000000   		.space	3
 6592 003c FFFFFFFF 		.word	-1
 6593 0040 07       		.byte	7
 6594 0041 000000   		.space	3
 6595 0044 FFFFFFFF 		.word	-1
 6596 0048 08       		.byte	8
 6597 0049 000000   		.space	3
 6598 004c FFFFFFFF 		.word	-1
 6599 0050 09       		.byte	9
 6600 0051 000000   		.space	3
 6601 0054 FFFFFFFF 		.word	-1
 6602 0058 0A       		.byte	10
 6603 0059 000000   		.space	3
 6604 005c FFFFFFFF 		.word	-1
 6605 0060 0B       		.byte	11
 6606 0061 000000   		.space	3
 6607 0064 FFFFFFFF 		.word	-1
 6608 0068 0C       		.byte	12
 6609 0069 000000   		.space	3
 6610 006c FFFFFFFF 		.word	-1
 6611 0070 0D       		.byte	13
 6612 0071 000000   		.space	3
 6613 0074 FFFFFFFF 		.word	-1
 6614 0078 0E       		.byte	14
 6615 0079 000000   		.space	3
 6616 007c FFFFFFFF 		.word	-1
 6617 0080 0F       		.byte	15
 6618 0081 000000   		.space	3
 6619 0084 FFFFFFFF 		.word	-1
 6620 0088 10       		.byte	16
 6621 0089 000000   		.space	3
 6622 008c FFFFFFFF 		.word	-1
 6623 0090 12       		.byte	18
 6624 0091 000000   		.space	3
 6625 0094 FFFFFFFF 		.word	-1
 6626 0098 13       		.byte	19
 6627 0099 000000   		.space	3
 6628 009c FFFFFFFF 		.word	-1
 6629 00a0 14       		.byte	20
 6630 00a1 000000   		.space	3
 6631 00a4 FFFFFFFF 		.word	-1
 6632 00a8 15       		.byte	21
 6633 00a9 000000   		.space	3
 6634 00ac FFFFFFFF 		.word	-1
 6635 00b0 16       		.byte	22
 6636 00b1 000000   		.space	3
 6637 00b4 FFFFFFFF 		.word	-1
 6638 00b8 18       		.byte	24
 6639 00b9 000000   		.space	3
 6640 00bc FFFFFFFF 		.word	-1
 6641 00c0 19       		.byte	25
 6642 00c1 000000   		.space	3
ARM GAS  /tmp/ccuwCXMe.s 			page 166


 6643 00c4 FFFFFFFF 		.word	-1
 6644 00c8 1A       		.byte	26
 6645 00c9 000000   		.space	3
 6646 00cc FFFFFFFF 		.word	-1
 6647 00d0 1B       		.byte	27
 6648 00d1 000000   		.space	3
 6649 00d4 FFFFFFFF 		.word	-1
 6650 00d8 1C       		.byte	28
 6651 00d9 000000   		.space	3
 6652 00dc FFFFFFFF 		.word	-1
 6653 00e0 1E       		.byte	30
 6654 00e1 000000   		.space	3
 6655 00e4 FFFFFFFF 		.word	-1
 6656 00e8 1F       		.byte	31
 6657 00e9 000000   		.space	3
 6658 00ec FFFFFFFF 		.word	-1
 6659 00f0 20       		.byte	32
 6660 00f1 000000   		.space	3
 6661 00f4 FFFFFFFF 		.word	-1
 6662 00f8 21       		.byte	33
 6663 00f9 000000   		.space	3
 6664 00fc FFFFFFFF 		.word	-1
 6665 0100 22       		.byte	34
 6666 0101 000000   		.space	3
 6667 0104 FFFFFFFF 		.word	-1
 6668 0108 24       		.byte	36
 6669 0109 000000   		.space	3
 6670 010c FFFFFFFF 		.word	-1
 6671 0110 25       		.byte	37
 6672 0111 000000   		.space	3
 6673 0114 FFFFFFFF 		.word	-1
 6674 0118 26       		.byte	38
 6675 0119 000000   		.space	3
 6676 011c FFFFFFFF 		.word	-1
 6677 0120 27       		.byte	39
 6678 0121 000000   		.space	3
 6679 0124 FFFFFFFF 		.word	-1
 6680 0128 28       		.byte	40
 6681 0129 000000   		.space	3
 6682 012c FFFFFFFF 		.word	-1
 6683 0130 2E       		.byte	46
 6684 0131 000000   		.space	3
 6685 0134 FFFFFFFF 		.word	-1
 6686 0138 2E       		.byte	46
 6687 0139 000000   		.space	3
 6688 013c FFFFFFFF 		.word	-1
 6689 0140 2E       		.byte	46
 6690 0141 000000   		.space	3
 6691 0144 FFFFFFFF 		.word	-1
 6692 0148 2E       		.byte	46
 6693 0149 000000   		.space	3
 6694 014c FFFFFFFF 		.word	-1
 6695 0150 2C       		.byte	44
 6696 0151 000000   		.space	3
 6697 0154 FFFFFFFF 		.word	-1
 6698 0158 2D       		.byte	45
 6699 0159 000000   		.space	3
ARM GAS  /tmp/ccuwCXMe.s 			page 167


 6700 015c FFFFFFFF 		.word	-1
 6701 0160 2E       		.byte	46
 6702 0161 000000   		.space	3
 6703 0164 FFFFFFFF 		.word	-1
 6704 0168 2E       		.byte	46
 6705 0169 000000   		.space	3
 6706 016c FFFFFFFF 		.word	-1
 6707 0170 2E       		.byte	46
 6708 0171 000000   		.space	3
 6709 0174 FFFFFFFF 		.word	-1
 6710              		.section	.rodata.mapping_fshift.11146,"a"
 6711              		.align	2
 6712              		.set	.LANCHOR14,. + 0
 6715              	mapping_fshift.11146:
 6716 0000 63       		.byte	99
 6717 0001 000000   		.space	3
 6718 0004 FFFFFFFF 		.word	-1
 6719 0008 22       		.byte	34
 6720 0009 000000   		.space	3
 6721 000c 03000000 		.word	3
 6722 0010 15       		.byte	21
 6723 0011 000000   		.space	3
 6724 0014 01000000 		.word	1
 6725 0018 1C       		.byte	28
 6726 0019 000000   		.space	3
 6727 001c 02000000 		.word	2
 6728 0020 13       		.byte	19
 6729 0021 000000   		.space	3
 6730 0024 01000000 		.word	1
 6731 0028 12       		.byte	18
 6732 0029 000000   		.space	3
 6733 002c 01000000 		.word	1
 6734 0030 12       		.byte	18
 6735 0031 000000   		.space	3
 6736 0034 03000000 		.word	3
 6737 0038 31       		.byte	49
 6738 0039 000000   		.space	3
 6739 003c 0F000000 		.word	15
 6740 0040 22       		.byte	34
 6741 0041 000000   		.space	3
 6742 0044 01000000 		.word	1
 6743 0048 0F       		.byte	15
 6744 0049 000000   		.space	3
 6745 004c 03000000 		.word	3
 6746 0050 01       		.byte	1
 6747 0051 000000   		.space	3
 6748 0054 02000000 		.word	2
 6749 0058 02       		.byte	2
 6750 0059 000000   		.space	3
 6751 005c 02000000 		.word	2
 6752 0060 03       		.byte	3
 6753 0061 000000   		.space	3
 6754 0064 02000000 		.word	2
 6755 0068 0C       		.byte	12
 6756 0069 000000   		.space	3
 6757 006c 01000000 		.word	1
 6758 0070 34       		.byte	52
ARM GAS  /tmp/ccuwCXMe.s 			page 168


 6759 0071 000000   		.space	3
 6760 0074 6C2A0000 		.word	10860
 6761 0078 2F       		.byte	47
 6762 0079 000000   		.space	3
 6763 007c 04000000 		.word	4
 6764 0080 2F       		.byte	47
 6765 0081 000000   		.space	3
 6766 0084 02000000 		.word	2
 6767 0088 2F       		.byte	47
 6768 0089 000000   		.space	3
 6769 008c 01000000 		.word	1
 6770 0090 18       		.byte	24
 6771 0091 000000   		.space	3
 6772 0094 00000000 		.word	0
 6773 0098 20       		.byte	32
 6774 0099 000000   		.space	3
 6775 009c 01000000 		.word	1
 6776 00a0 2F       		.byte	47
 6777 00a1 000000   		.space	3
 6778 00a4 0E000000 		.word	14
 6779 00a8 1C       		.byte	28
 6780 00a9 000000   		.space	3
 6781 00ac 03000000 		.word	3
 6782 00b0 2F       		.byte	47
 6783 00b1 000000   		.space	3
 6784 00b4 0C000000 		.word	12
 6785 00b8 1E       		.byte	30
 6786 00b9 000000   		.space	3
 6787 00bc 00000000 		.word	0
 6788 00c0 2F       		.byte	47
 6789 00c1 000000   		.space	3
 6790 00c4 03000000 		.word	3
 6791 00c8 04       		.byte	4
 6792 00c9 000000   		.space	3
 6793 00cc 03000000 		.word	3
 6794 00d0 2F       		.byte	47
 6795 00d1 000000   		.space	3
 6796 00d4 0A000000 		.word	10
 6797 00d8 2F       		.byte	47
 6798 00d9 000000   		.space	3
 6799 00dc 0B000000 		.word	11
 6800 00e0 2A       		.byte	42
 6801 00e1 000000   		.space	3
 6802 00e4 00000000 		.word	0
 6803 00e8 31       		.byte	49
 6804 00e9 000000   		.space	3
 6805 00ec 0D000000 		.word	13
 6806 00f0 2F       		.byte	47
 6807 00f1 000000   		.space	3
 6808 00f4 63000000 		.word	99
 6809 00f8 20       		.byte	32
 6810 00f9 000000   		.space	3
 6811 00fc 03000000 		.word	3
 6812 0100 2F       		.byte	47
 6813 0101 000000   		.space	3
 6814 0104 19000000 		.word	25
 6815 0108 24       		.byte	36
ARM GAS  /tmp/ccuwCXMe.s 			page 169


 6816 0109 000000   		.space	3
 6817 010c 03000000 		.word	3
 6818 0110 2F       		.byte	47
 6819 0111 000000   		.space	3
 6820 0114 08000000 		.word	8
 6821 0118 0D       		.byte	13
 6822 0119 000000   		.space	3
 6823 011c 01000000 		.word	1
 6824 0120 27       		.byte	39
 6825 0121 000000   		.space	3
 6826 0124 03000000 		.word	3
 6827 0128 06       		.byte	6
 6828 0129 000000   		.space	3
 6829 012c 03000000 		.word	3
 6830 0130 2E       		.byte	46
 6831 0131 000000   		.space	3
 6832 0134 00000000 		.word	0
 6833 0138 2E       		.byte	46
 6834 0139 000000   		.space	3
 6835 013c 00000000 		.word	0
 6836 0140 2E       		.byte	46
 6837 0141 000000   		.space	3
 6838 0144 00000000 		.word	0
 6839 0148 2E       		.byte	46
 6840 0149 000000   		.space	3
 6841 014c 00000000 		.word	0
 6842 0150 2E       		.byte	46
 6843 0151 000000   		.space	3
 6844 0154 00000000 		.word	0
 6845 0158 2E       		.byte	46
 6846 0159 000000   		.space	3
 6847 015c 00000000 		.word	0
 6848 0160 2E       		.byte	46
 6849 0161 000000   		.space	3
 6850 0164 00000000 		.word	0
 6851 0168 2F       		.byte	47
 6852 0169 000000   		.space	3
 6853 016c FFFFFFFF 		.word	-1
 6854 0170 2F       		.byte	47
 6855 0171 000000   		.space	3
 6856 0174 05000000 		.word	5
 6857              		.section	.rodata.mapping_gshift.11147,"a"
 6858              		.align	2
 6859              		.set	.LANCHOR17,. + 0
 6862              	mapping_gshift.11147:
 6863 0000 63       		.byte	99
 6864 0001 000000   		.space	3
 6865 0004 FFFFFFFF 		.word	-1
 6866 0008 28       		.byte	40
 6867 0009 000000   		.space	3
 6868 000c 03000000 		.word	3
 6869 0010 16       		.byte	22
 6870 0011 000000   		.space	3
 6871 0014 01000000 		.word	1
 6872 0018 1C       		.byte	28
 6873 0019 000000   		.space	3
 6874 001c 01000000 		.word	1
ARM GAS  /tmp/ccuwCXMe.s 			page 170


 6875 0020 13       		.byte	19
 6876 0021 000000   		.space	3
 6877 0024 02000000 		.word	2
 6878 0028 2E       		.byte	46
 6879 0029 000000   		.space	3
 6880 002c 00000000 		.word	0
 6881 0030 2E       		.byte	46
 6882 0031 000000   		.space	3
 6883 0034 00000000 		.word	0
 6884 0038 2E       		.byte	46
 6885 0039 000000   		.space	3
 6886 003c 00000000 		.word	0
 6887 0040 07       		.byte	7
 6888 0041 000000   		.space	3
 6889 0044 03000000 		.word	3
 6890 0048 08       		.byte	8
 6891 0049 000000   		.space	3
 6892 004c 03000000 		.word	3
 6893 0050 2F       		.byte	47
 6894 0051 000000   		.space	3
 6895 0054 04000000 		.word	4
 6896 0058 2F       		.byte	47
 6897 0059 000000   		.space	3
 6898 005c 04000000 		.word	4
 6899 0060 2F       		.byte	47
 6900 0061 000000   		.space	3
 6901 0064 04000000 		.word	4
 6902 0068 0C       		.byte	12
 6903 0069 000000   		.space	3
 6904 006c 02000000 		.word	2
 6905 0070 2F       		.byte	47
 6906 0071 000000   		.space	3
 6907 0074 06000000 		.word	6
 6908 0078 05       		.byte	5
 6909 0079 000000   		.space	3
 6910 007c 03000000 		.word	3
 6911 0080 2E       		.byte	46
 6912 0081 000000   		.space	3
 6913 0084 00000000 		.word	0
 6914 0088 2E       		.byte	46
 6915 0089 000000   		.space	3
 6916 008c 00000000 		.word	0
 6917 0090 2E       		.byte	46
 6918 0091 000000   		.space	3
 6919 0094 00000000 		.word	0
 6920 0098 2E       		.byte	46
 6921 0099 000000   		.space	3
 6922 009c 00000000 		.word	0
 6923 00a0 2E       		.byte	46
 6924 00a1 000000   		.space	3
 6925 00a4 00000000 		.word	0
 6926 00a8 1B       		.byte	27
 6927 00a9 000000   		.space	3
 6928 00ac 03000000 		.word	3
 6929 00b0 1A       		.byte	26
 6930 00b1 000000   		.space	3
 6931 00b4 03000000 		.word	3
ARM GAS  /tmp/ccuwCXMe.s 			page 171


 6932 00b8 2E       		.byte	46
 6933 00b9 000000   		.space	3
 6934 00bc 00000000 		.word	0
 6935 00c0 2E       		.byte	46
 6936 00c1 000000   		.space	3
 6937 00c4 00000000 		.word	0
 6938 00c8 0C       		.byte	12
 6939 00c9 000000   		.space	3
 6940 00cc 03000000 		.word	3
 6941 00d0 1F       		.byte	31
 6942 00d1 000000   		.space	3
 6943 00d4 03000000 		.word	3
 6944 00d8 19       		.byte	25
 6945 00d9 000000   		.space	3
 6946 00dc 03000000 		.word	3
 6947 00e0 2A       		.byte	42
 6948 00e1 000000   		.space	3
 6949 00e4 FFFFFFFF 		.word	-1
 6950 00e8 2E       		.byte	46
 6951 00e9 000000   		.space	3
 6952 00ec 00000000 		.word	0
 6953 00f0 2F       		.byte	47
 6954 00f1 000000   		.space	3
 6955 00f4 18000000 		.word	24
 6956 00f8 21       		.byte	33
 6957 00f9 000000   		.space	3
 6958 00fc 03000000 		.word	3
 6959 0100 2E       		.byte	46
 6960 0101 000000   		.space	3
 6961 0104 00000000 		.word	0
 6962 0108 24       		.byte	36
 6963 0109 000000   		.space	3
 6964 010c 02000000 		.word	2
 6965 0110 2F       		.byte	47
 6966 0111 000000   		.space	3
 6967 0114 0D000000 		.word	13
 6968 0118 2E       		.byte	46
 6969 0119 000000   		.space	3
 6970 011c 00000000 		.word	0
 6971 0120 2F       		.byte	47
 6972 0121 000000   		.space	3
 6973 0124 07000000 		.word	7
 6974 0128 1E       		.byte	30
 6975 0129 000000   		.space	3
 6976 012c 03000000 		.word	3
 6977 0130 2E       		.byte	46
 6978 0131 000000   		.space	3
 6979 0134 00000000 		.word	0
 6980 0138 2E       		.byte	46
 6981 0139 000000   		.space	3
 6982 013c 00000000 		.word	0
 6983 0140 2E       		.byte	46
 6984 0141 000000   		.space	3
 6985 0144 00000000 		.word	0
 6986 0148 2E       		.byte	46
 6987 0149 000000   		.space	3
 6988 014c 00000000 		.word	0
ARM GAS  /tmp/ccuwCXMe.s 			page 172


 6989 0150 2E       		.byte	46
 6990 0151 000000   		.space	3
 6991 0154 00000000 		.word	0
 6992 0158 2E       		.byte	46
 6993 0159 000000   		.space	3
 6994 015c 00000000 		.word	0
 6995 0160 2E       		.byte	46
 6996 0161 000000   		.space	3
 6997 0164 00000000 		.word	0
 6998 0168 2E       		.byte	46
 6999 0169 000000   		.space	3
 7000 016c 00000000 		.word	0
 7001 0170 2E       		.byte	46
 7002 0171 000000   		.space	3
 7003 0174 00000000 		.word	0
 7004              		.section	.rodata.mapping_none.11145,"a"
 7005              		.align	2
 7006              		.set	.LANCHOR13,. + 0
 7009              	mapping_none.11145:
 7010 0000 63       		.byte	99
 7011 0001 000000   		.space	3
 7012 0004 FFFFFFFF 		.word	-1
 7013 0008 00       		.byte	0
 7014 0009 000000   		.space	3
 7015 000c 00000000 		.word	0
 7016 0010 01       		.byte	1
 7017 0011 000000   		.space	3
 7018 0014 00000000 		.word	0
 7019 0018 03       		.byte	3
 7020 0019 000000   		.space	3
 7021 001c 00000000 		.word	0
 7022 0020 13       		.byte	19
 7023 0021 000000   		.space	3
 7024 0024 02000000 		.word	2
 7025 0028 12       		.byte	18
 7026 0029 000000   		.space	3
 7027 002c 02000000 		.word	2
 7028 0030 12       		.byte	18
 7029 0031 000000   		.space	3
 7030 0034 00000000 		.word	0
 7031 0038 06       		.byte	6
 7032 0039 000000   		.space	3
 7033 003c 00000000 		.word	0
 7034 0040 07       		.byte	7
 7035 0041 000000   		.space	3
 7036 0044 00000000 		.word	0
 7037 0048 08       		.byte	8
 7038 0049 000000   		.space	3
 7039 004c 00000000 		.word	0
 7040 0050 01       		.byte	1
 7041 0051 000000   		.space	3
 7042 0054 01000000 		.word	1
 7043 0058 02       		.byte	2
 7044 0059 000000   		.space	3
 7045 005c 01000000 		.word	1
 7046 0060 03       		.byte	3
 7047 0061 000000   		.space	3
ARM GAS  /tmp/ccuwCXMe.s 			page 173


 7048 0064 01000000 		.word	1
 7049 0068 0C       		.byte	12
 7050 0069 000000   		.space	3
 7051 006c 00000000 		.word	0
 7052 0070 0D       		.byte	13
 7053 0071 000000   		.space	3
 7054 0074 00000000 		.word	0
 7055 0078 0E       		.byte	14
 7056 0079 000000   		.space	3
 7057 007c 00000000 		.word	0
 7058 0080 0F       		.byte	15
 7059 0081 000000   		.space	3
 7060 0084 00000000 		.word	0
 7061 0088 10       		.byte	16
 7062 0089 000000   		.space	3
 7063 008c 00000000 		.word	0
 7064 0090 18       		.byte	24
 7065 0091 000000   		.space	3
 7066 0094 00000000 		.word	0
 7067 0098 13       		.byte	19
 7068 0099 000000   		.space	3
 7069 009c 00000000 		.word	0
 7070 00a0 14       		.byte	20
 7071 00a1 000000   		.space	3
 7072 00a4 00000000 		.word	0
 7073 00a8 15       		.byte	21
 7074 00a9 000000   		.space	3
 7075 00ac 00000000 		.word	0
 7076 00b0 16       		.byte	22
 7077 00b1 000000   		.space	3
 7078 00b4 00000000 		.word	0
 7079 00b8 1E       		.byte	30
 7080 00b9 000000   		.space	3
 7081 00bc 00000000 		.word	0
 7082 00c0 19       		.byte	25
 7083 00c1 000000   		.space	3
 7084 00c4 00000000 		.word	0
 7085 00c8 1A       		.byte	26
 7086 00c9 000000   		.space	3
 7087 00cc 00000000 		.word	0
 7088 00d0 1B       		.byte	27
 7089 00d1 000000   		.space	3
 7090 00d4 00000000 		.word	0
 7091 00d8 1C       		.byte	28
 7092 00d9 000000   		.space	3
 7093 00dc 00000000 		.word	0
 7094 00e0 29       		.byte	41
 7095 00e1 000000   		.space	3
 7096 00e4 00000000 		.word	0
 7097 00e8 1F       		.byte	31
 7098 00e9 000000   		.space	3
 7099 00ec 00000000 		.word	0
 7100 00f0 20       		.byte	32
 7101 00f1 000000   		.space	3
 7102 00f4 00000000 		.word	0
 7103 00f8 21       		.byte	33
 7104 00f9 000000   		.space	3
ARM GAS  /tmp/ccuwCXMe.s 			page 174


 7105 00fc 00000000 		.word	0
 7106 0100 22       		.byte	34
 7107 0101 000000   		.space	3
 7108 0104 00000000 		.word	0
 7109 0108 24       		.byte	36
 7110 0109 000000   		.space	3
 7111 010c 00000000 		.word	0
 7112 0110 25       		.byte	37
 7113 0111 000000   		.space	3
 7114 0114 00000000 		.word	0
 7115 0118 26       		.byte	38
 7116 0119 000000   		.space	3
 7117 011c 00000000 		.word	0
 7118 0120 27       		.byte	39
 7119 0121 000000   		.space	3
 7120 0124 00000000 		.word	0
 7121 0128 28       		.byte	40
 7122 0129 000000   		.space	3
 7123 012c 00000000 		.word	0
 7124 0130 2E       		.byte	46
 7125 0131 000000   		.space	3
 7126 0134 00000000 		.word	0
 7127 0138 2E       		.byte	46
 7128 0139 000000   		.space	3
 7129 013c 00000000 		.word	0
 7130 0140 2E       		.byte	46
 7131 0141 000000   		.space	3
 7132 0144 00000000 		.word	0
 7133 0148 2E       		.byte	46
 7134 0149 000000   		.space	3
 7135 014c 00000000 		.word	0
 7136 0150 2E       		.byte	46
 7137 0151 000000   		.space	3
 7138 0154 00000000 		.word	0
 7139 0158 2E       		.byte	46
 7140 0159 000000   		.space	3
 7141 015c 00000000 		.word	0
 7142 0160 2E       		.byte	46
 7143 0161 000000   		.space	3
 7144 0164 00000000 		.word	0
 7145 0168 2E       		.byte	46
 7146 0169 000000   		.space	3
 7147 016c 00000000 		.word	0
 7148 0170 2E       		.byte	46
 7149 0171 000000   		.space	3
 7150 0174 00000000 		.word	0
 7151              		.section	.rodata.mapping_running.11149,"a"
 7152              		.align	2
 7153              		.set	.LANCHOR12,. + 0
 7156              	mapping_running.11149:
 7157 0000 63       		.byte	99
 7158 0001 000000   		.space	3
 7159 0004 FFFFFFFF 		.word	-1
 7160 0008 00       		.byte	0
 7161 0009 000000   		.space	3
 7162 000c 00000000 		.word	0
 7163 0010 01       		.byte	1
ARM GAS  /tmp/ccuwCXMe.s 			page 175


 7164 0011 000000   		.space	3
 7165 0014 00000000 		.word	0
 7166 0018 02       		.byte	2
 7167 0019 000000   		.space	3
 7168 001c 00000000 		.word	0
 7169 0020 03       		.byte	3
 7170 0021 000000   		.space	3
 7171 0024 00000000 		.word	0
 7172 0028 04       		.byte	4
 7173 0029 000000   		.space	3
 7174 002c 00000000 		.word	0
 7175 0030 12       		.byte	18
 7176 0031 000000   		.space	3
 7177 0034 00000000 		.word	0
 7178 0038 06       		.byte	6
 7179 0039 000000   		.space	3
 7180 003c 00000000 		.word	0
 7181 0040 07       		.byte	7
 7182 0041 000000   		.space	3
 7183 0044 00000000 		.word	0
 7184 0048 08       		.byte	8
 7185 0049 000000   		.space	3
 7186 004c 00000000 		.word	0
 7187 0050 09       		.byte	9
 7188 0051 000000   		.space	3
 7189 0054 00000000 		.word	0
 7190 0058 0A       		.byte	10
 7191 0059 000000   		.space	3
 7192 005c 00000000 		.word	0
 7193 0060 0B       		.byte	11
 7194 0061 000000   		.space	3
 7195 0064 00000000 		.word	0
 7196 0068 0C       		.byte	12
 7197 0069 000000   		.space	3
 7198 006c 00000000 		.word	0
 7199 0070 0D       		.byte	13
 7200 0071 000000   		.space	3
 7201 0074 00000000 		.word	0
 7202 0078 0E       		.byte	14
 7203 0079 000000   		.space	3
 7204 007c 00000000 		.word	0
 7205 0080 0F       		.byte	15
 7206 0081 000000   		.space	3
 7207 0084 00000000 		.word	0
 7208 0088 10       		.byte	16
 7209 0089 000000   		.space	3
 7210 008c 00000000 		.word	0
 7211 0090 18       		.byte	24
 7212 0091 000000   		.space	3
 7213 0094 00000000 		.word	0
 7214 0098 13       		.byte	19
 7215 0099 000000   		.space	3
 7216 009c 00000000 		.word	0
 7217 00a0 14       		.byte	20
 7218 00a1 000000   		.space	3
 7219 00a4 00000000 		.word	0
 7220 00a8 15       		.byte	21
ARM GAS  /tmp/ccuwCXMe.s 			page 176


 7221 00a9 000000   		.space	3
 7222 00ac 00000000 		.word	0
 7223 00b0 16       		.byte	22
 7224 00b1 000000   		.space	3
 7225 00b4 00000000 		.word	0
 7226 00b8 1E       		.byte	30
 7227 00b9 000000   		.space	3
 7228 00bc 00000000 		.word	0
 7229 00c0 19       		.byte	25
 7230 00c1 000000   		.space	3
 7231 00c4 00000000 		.word	0
 7232 00c8 1A       		.byte	26
 7233 00c9 000000   		.space	3
 7234 00cc 00000000 		.word	0
 7235 00d0 1B       		.byte	27
 7236 00d1 000000   		.space	3
 7237 00d4 00000000 		.word	0
 7238 00d8 1C       		.byte	28
 7239 00d9 000000   		.space	3
 7240 00dc 00000000 		.word	0
 7241 00e0 09       		.byte	9
 7242 00e1 000000   		.space	3
 7243 00e4 00000000 		.word	0
 7244 00e8 1F       		.byte	31
 7245 00e9 000000   		.space	3
 7246 00ec 00000000 		.word	0
 7247 00f0 20       		.byte	32
 7248 00f1 000000   		.space	3
 7249 00f4 00000000 		.word	0
 7250 00f8 21       		.byte	33
 7251 00f9 000000   		.space	3
 7252 00fc 00000000 		.word	0
 7253 0100 22       		.byte	34
 7254 0101 000000   		.space	3
 7255 0104 00000000 		.word	0
 7256 0108 24       		.byte	36
 7257 0109 000000   		.space	3
 7258 010c 00000000 		.word	0
 7259 0110 25       		.byte	37
 7260 0111 000000   		.space	3
 7261 0114 00000000 		.word	0
 7262 0118 26       		.byte	38
 7263 0119 000000   		.space	3
 7264 011c 00000000 		.word	0
 7265 0120 27       		.byte	39
 7266 0121 000000   		.space	3
 7267 0124 00000000 		.word	0
 7268 0128 28       		.byte	40
 7269 0129 000000   		.space	3
 7270 012c 00000000 		.word	0
 7271 0130 2E       		.byte	46
 7272 0131 000000   		.space	3
 7273 0134 00000000 		.word	0
 7274 0138 2E       		.byte	46
 7275 0139 000000   		.space	3
 7276 013c 00000000 		.word	0
 7277 0140 2E       		.byte	46
ARM GAS  /tmp/ccuwCXMe.s 			page 177


 7278 0141 000000   		.space	3
 7279 0144 00000000 		.word	0
 7280 0148 2E       		.byte	46
 7281 0149 000000   		.space	3
 7282 014c 00000000 		.word	0
 7283 0150 04       		.byte	4
 7284 0151 000000   		.space	3
 7285 0154 00000000 		.word	0
 7286 0158 05       		.byte	5
 7287 0159 000000   		.space	3
 7288 015c 00000000 		.word	0
 7289 0160 2E       		.byte	46
 7290 0161 000000   		.space	3
 7291 0164 00000000 		.word	0
 7292 0168 2E       		.byte	46
 7293 0169 000000   		.space	3
 7294 016c 00000000 		.word	0
 7295 0170 2E       		.byte	46
 7296 0171 000000   		.space	3
 7297 0174 00000000 		.word	0
 7298              		.section	.rodata.mid_menu,"a"
 7299              		.align	2
 7302              	mid_menu:
 7303 0000 C8C40B00 		.ascii	"\310\304\013\000"
 7304              		.text
 7305              	.Letext0:
 7306              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 7307              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 7308              		.file 6 "/usr/include/newlib/sys/_types.h"
 7309              		.file 7 "/usr/include/newlib/sys/reent.h"
 7310              		.file 8 "/usr/include/newlib/sys/lock.h"
 7311              		.file 9 "/usr/include/newlib/stdlib.h"
 7312              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 7313              		.file 11 "/usr/include/newlib/ctype.h"
 7314              		.file 12 "dmcp/ff_ifc.h"
 7315              		.file 13 "dmcp/dmcp.h"
 7316              		.file 14 "src/keys.h"
 7317              		.file 15 "src/menu.h"
 7318              		.file 16 "src/decNumber/decContext.h"
 7319              		.file 17 "src/decNumber/decNumber.h"
 7320              		.file 18 "src/decNumber/decimal64.h"
 7321              		.file 19 "src/decNumber/decimal128.h"
 7322              		.file 20 "src/xeq.h"
 7323              		.file 21 "src/data.h"
 7324              		.file 22 "src/display.h"
 7325              		.file 23 "src/consts.h"
 7326              		.file 24 "src/storage.h"
 7327              		.file 25 "src/catalogues.h"
 7328              		.file 26 "src/stopwatch.h"
 7329              		.file 27 "src/lcd.h"
 7330              		.file 28 "/usr/include/newlib/string.h"
 7331              		.file 29 "/usr/include/newlib/stdio.h"
 7332              		.file 30 "<built-in>"
ARM GAS  /tmp/ccuwCXMe.s 			page 178


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccuwCXMe.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/ccuwCXMe.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/ccuwCXMe.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/ccuwCXMe.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/ccuwCXMe.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccuwCXMe.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccuwCXMe.s:428    .text.set_menu_label.constprop.0:0000000000000134 $d
     /tmp/ccuwCXMe.s:435    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/ccuwCXMe.s:454    .text.disp_about:0000000000000000 $t
     /tmp/ccuwCXMe.s:462    .text.disp_about:0000000000000000 disp_about
     /tmp/ccuwCXMe.s:615    .text.disp_about:0000000000000080 $d
     /tmp/ccuwCXMe.s:633    .text.run_menu_item:0000000000000000 $t
     /tmp/ccuwCXMe.s:641    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/ccuwCXMe.s:681    .text.set_menu:0000000000000000 $t
     /tmp/ccuwCXMe.s:689    .text.set_menu:0000000000000000 set_menu
     /tmp/ccuwCXMe.s:744    .text.set_menu:000000000000002c $d
     /tmp/ccuwCXMe.s:751    .text.set_default_menu:0000000000000000 $t
     /tmp/ccuwCXMe.s:759    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/ccuwCXMe.s:833    .text.set_default_menu:000000000000002c $d
     /tmp/ccuwCXMe.s:842    .text.toggle_default_menu:0000000000000000 $t
     /tmp/ccuwCXMe.s:850    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/ccuwCXMe.s:952    .text.toggle_default_menu:0000000000000044 $d
     /tmp/ccuwCXMe.s:963    .text.get_menu:0000000000000000 $t
     /tmp/ccuwCXMe.s:971    .text.get_menu:0000000000000000 get_menu
     /tmp/ccuwCXMe.s:987    .text.get_menu:0000000000000008 $d
     /tmp/ccuwCXMe.s:992    .text.get_last_menu:0000000000000000 $t
     /tmp/ccuwCXMe.s:1000   .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/ccuwCXMe.s:1016   .text.get_last_menu:0000000000000008 $d
     /tmp/ccuwCXMe.s:1021   .text.set_last_menu:0000000000000000 $t
     /tmp/ccuwCXMe.s:1029   .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccuwCXMe.s:1104   .text.set_last_menu:000000000000002c $d
     /tmp/ccuwCXMe.s:1113   .text.mdot:0000000000000000 $t
     /tmp/ccuwCXMe.s:1121   .text.mdot:0000000000000000 mdot
     /tmp/ccuwCXMe.s:1212   .text.mdot:000000000000003c $d
     /tmp/ccuwCXMe.s:1217   .text.get_current_menu_ref:0000000000000000 $t
     /tmp/ccuwCXMe.s:1225   .text.get_current_menu_ref:0000000000000000 get_current_menu_ref
     /tmp/ccuwCXMe.s:1292   .text.get_current_menu_ref:0000000000000040 $d
     /tmp/ccuwCXMe.s:1307   .text.get_current_menu_ref:000000000000007c $t
     /tmp/ccuwCXMe.s:1377   .text.get_current_menu_ref:00000000000000a8 $d
     /tmp/ccuwCXMe.s:4924   .rodata.Menus:0000000000000000 Menus
     /tmp/ccuwCXMe.s:1385   .text.display_menu:0000000000000000 $t
     /tmp/ccuwCXMe.s:1393   .text.display_menu:0000000000000000 display_menu
     /tmp/ccuwCXMe.s:1641   .text.display_menu:000000000000010c $d
     /tmp/ccuwCXMe.s:1648   .text.display_current_menu:0000000000000000 $t
     /tmp/ccuwCXMe.s:1656   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccuwCXMe.s:1692   .text.all_menu_dots:0000000000000000 $t
     /tmp/ccuwCXMe.s:1700   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccuwCXMe.s:1784   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccuwCXMe.s:1789   .text.umen_store:0000000000000000 $t
     /tmp/ccuwCXMe.s:1797   .text.umen_store:0000000000000000 umen_store
     /tmp/ccuwCXMe.s:1898   .text.umen_store:0000000000000050 $d
     /tmp/ccuwCXMe.s:1903   .text.build_user_menu_from_program:0000000000000000 $t
     /tmp/ccuwCXMe.s:1911   .text.build_user_menu_from_program:0000000000000000 build_user_menu_from_program
     /tmp/ccuwCXMe.s:2322   .text.build_user_menu_from_program:0000000000000180 $d
     /tmp/ccuwCXMe.s:2335   .text.build_user_menu:0000000000000000 $t
ARM GAS  /tmp/ccuwCXMe.s 			page 179


     /tmp/ccuwCXMe.s:2343   .text.build_user_menu:0000000000000000 build_user_menu
     /tmp/ccuwCXMe.s:2359   .text.build_user_menu:0000000000000008 $d
     /tmp/ccuwCXMe.s:2364   .text.shutdown:0000000000000000 $t
     /tmp/ccuwCXMe.s:2372   .text.shutdown:0000000000000000 shutdown
     /tmp/ccuwCXMe.s:2390   .text.shutdown:000000000000000c $d
     /tmp/ccuwCXMe.s:2395   .text.is_key_pressed:0000000000000000 $t
     /tmp/ccuwCXMe.s:2403   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccuwCXMe.s:2426   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccuwCXMe.s:2431   .text.get_key:0000000000000000 $t
     /tmp/ccuwCXMe.s:2439   .text.get_key:0000000000000000 get_key
     /tmp/ccuwCXMe.s:2454   .text.get_key:0000000000000004 $d
     /tmp/ccuwCXMe.s:2459   .text.put_key:0000000000000000 $t
     /tmp/ccuwCXMe.s:2467   .text.put_key:0000000000000000 put_key
     /tmp/ccuwCXMe.s:2546   .text.put_key:000000000000003c $d
     /tmp/ccuwCXMe.s:2552   .text.shift_down:0000000000000000 $t
     /tmp/ccuwCXMe.s:2560   .text.shift_down:0000000000000000 shift_down
     /tmp/ccuwCXMe.s:2575   .text.start_key_timer:0000000000000000 $t
     /tmp/ccuwCXMe.s:2583   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccuwCXMe.s:2607   .text.start_key_timer:000000000000000c $d
     /tmp/ccuwCXMe.s:2613   .text.keyticks:0000000000000000 $t
     /tmp/ccuwCXMe.s:2621   .text.keyticks:0000000000000000 keyticks
     /tmp/ccuwCXMe.s:2652   .text.keyticks:0000000000000018 $d
     /tmp/ccuwCXMe.s:2658   .text.moveto:0000000000000000 $t
     /tmp/ccuwCXMe.s:2666   .text.moveto:0000000000000000 moveto
     /tmp/ccuwCXMe.s:2726   .text.moveto:000000000000002c $d
     /tmp/ccuwCXMe.s:2733   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccuwCXMe.s:2737   .text.print_debug:0000000000000000 $t
     /tmp/ccuwCXMe.s:2745   .text.print_debug:0000000000000000 print_debug
     /tmp/ccuwCXMe.s:2847   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccuwCXMe.s:2858   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccuwCXMe.s:2862   .text.print_debug2:0000000000000000 $t
     /tmp/ccuwCXMe.s:2870   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccuwCXMe.s:2972   .text.print_debug2:0000000000000064 $d
     /tmp/ccuwCXMe.s:2983   .text.do_now:0000000000000000 $t
     /tmp/ccuwCXMe.s:2991   .text.do_now:0000000000000000 do_now
     /tmp/ccuwCXMe.s:3026   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccuwCXMe.s:3030   .text.do_multi:0000000000000000 $t
     /tmp/ccuwCXMe.s:3038   .text.do_multi:0000000000000000 do_multi
     /tmp/ccuwCXMe.s:3068   .text.do_multi:0000000000000016 $d
     /tmp/ccuwCXMe.s:3082   .text.do_multi:0000000000000024 $t
     /tmp/ccuwCXMe.s:3497   .text.do_multi:00000000000001b8 $d
     /tmp/ccuwCXMe.s:3511   .text.program_main:0000000000000000 $t
     /tmp/ccuwCXMe.s:3519   .text.program_main:0000000000000000 program_main
     /tmp/ccuwCXMe.s:3812   .text.program_main:0000000000000126 $d
     /tmp/ccuwCXMe.s:3818   .text.program_main:0000000000000132 $t
     /tmp/ccuwCXMe.s:4198   .text.program_main:00000000000002e0 $d
     /tmp/ccuwCXMe.s:4236   .text.program_main:0000000000000368 $t
     /tmp/ccuwCXMe.s:4670   .text.program_main:0000000000000574 $d
     /tmp/ccuwCXMe.s:4759   .bss.n_p:0000000000000000 n_p
     /tmp/ccuwCXMe.s:4908   .data.spaces:0000000000000000 spaces
     /tmp/ccuwCXMe.s:4899   .data.release:0000000000000000 release
     /tmp/ccuwCXMe.s:4872   .data.h_shift:0000000000000000 h_shift
     /tmp/ccuwCXMe.s:4863   .data.g_shift:0000000000000000 g_shift
     /tmp/ccuwCXMe.s:4855   .data.f_shift:0000000000000000 f_shift
     /tmp/ccuwCXMe.s:4881   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccuwCXMe.s:4890   .data.no_key:0000000000000000 no_key
ARM GAS  /tmp/ccuwCXMe.s 			page 180


     /tmp/ccuwCXMe.s:4915   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccuwCXMe.s:4699   .rodata.str1.4:0000000000000000 $d
     /tmp/ccuwCXMe.s:7302   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccuwCXMe.s:4740   .bss.default_menu:0000000000000000 default_menu
     /tmp/ccuwCXMe.s:4746   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccuwCXMe.s:4734   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccuwCXMe.s:4849   .data.cmplx_key_string:0000000000000000 cmplx_key_string
     /tmp/ccuwCXMe.s:4842   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/ccuwCXMe.s:4773   .data.UserMenu:0000000000000000 UserMenu
     /tmp/ccuwCXMe.s:4716   .rodata:0000000000000000 $d
     /tmp/ccuwCXMe.s:4735   .bss.current_menu:0000000000000000 $d
     /tmp/ccuwCXMe.s:4741   .bss.default_menu:0000000000000000 $d
     /tmp/ccuwCXMe.s:4747   .bss.last_menu:0000000000000000 $d
     /tmp/ccuwCXMe.s:4749   .bss.mdots:0000000000000000 $d
     /tmp/ccuwCXMe.s:4753   .bss.mdots:0000000000000000 mdots
     /tmp/ccuwCXMe.s:4756   .bss.n_p:0000000000000000 $d
     /tmp/ccuwCXMe.s:4762   .bss.start_ticks:0000000000000000 $d
     /tmp/ccuwCXMe.s:4766   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccuwCXMe.s:4769   .data.UserMenu:0000000000000000 $d
     /tmp/ccuwCXMe.s:4838   .data.arrow_key_string:0000000000000000 $d
     /tmp/ccuwCXMe.s:4845   .data.cmplx_key_string:0000000000000000 $d
     /tmp/ccuwCXMe.s:4852   .data.f_shift:0000000000000000 $d
     /tmp/ccuwCXMe.s:4860   .data.g_shift:0000000000000000 $d
     /tmp/ccuwCXMe.s:4868   .data.h_shift:0000000000000000 $d
     /tmp/ccuwCXMe.s:4877   .data.heartbeat:0000000000000000 $d
     /tmp/ccuwCXMe.s:4886   .data.no_key:0000000000000000 $d
     /tmp/ccuwCXMe.s:4895   .data.release:0000000000000000 $d
     /tmp/ccuwCXMe.s:4904   .data.spaces:0000000000000000 $d
     /tmp/ccuwCXMe.s:4911   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccuwCXMe.s:4921   .rodata.Menus:0000000000000000 $d
     /tmp/ccuwCXMe.s:6564   .rodata.mapping_alpha.11148:0000000000000000 $d
     /tmp/ccuwCXMe.s:6568   .rodata.mapping_alpha.11148:0000000000000000 mapping_alpha.11148
     /tmp/ccuwCXMe.s:6711   .rodata.mapping_fshift.11146:0000000000000000 $d
     /tmp/ccuwCXMe.s:6715   .rodata.mapping_fshift.11146:0000000000000000 mapping_fshift.11146
     /tmp/ccuwCXMe.s:6858   .rodata.mapping_gshift.11147:0000000000000000 $d
     /tmp/ccuwCXMe.s:6862   .rodata.mapping_gshift.11147:0000000000000000 mapping_gshift.11147
     /tmp/ccuwCXMe.s:7005   .rodata.mapping_none.11145:0000000000000000 $d
     /tmp/ccuwCXMe.s:7009   .rodata.mapping_none.11145:0000000000000000 mapping_none.11145
     /tmp/ccuwCXMe.s:7152   .rodata.mapping_running.11149:0000000000000000 $d
     /tmp/ccuwCXMe.s:7156   .rodata.mapping_running.11149:0000000000000000 mapping_running.11149
     /tmp/ccuwCXMe.s:7299   .rodata.mid_menu:0000000000000000 $d

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
RectPolConv
memcpy
main_ram
pixel_length
strncpy
findmultilbl
do_inc
getprog
prt_umen
catcmd
strcpy
ARM GAS  /tmp/ccuwCXMe.s 			page 181


sprintf
process_keycode_with_shift
reset_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
KeyCallback
JustDisplayed
Pause
Running
DM42_Ticker
is_dot
dot
finish_LEQ
get_alpha_state
StopWatchStatus

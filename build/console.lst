ARM GAS  /tmp/cc0ERj20.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC1:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** /* 
   4:src/menu.c    ****  * System menu stuff
   5:src/menu.c    ****  */
   6:src/menu.c    **** 
   7:src/menu.c    **** #define MI_ABOUT_PGM 11
   8:src/menu.c    **** 
   9:src/menu.c    **** const uint8_t mid_menu[] = {
  10:src/menu.c    ****     MI_SYSTEM_ENTER,
  11:src/menu.c    ****     MI_MSC,
  12:src/menu.c    ****     MI_ABOUT_PGM,
  13:src/menu.c    ****     0 }; // Terminator
  14:src/menu.c    **** 
  15:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  16:src/menu.c    **** 
  17:src/menu.c    **** void disp_about(void);
  18:src/menu.c    **** 
  19:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  20:src/menu.c    ****   int ret = 0;
  21:src/menu.c    **** 
  22:src/menu.c    ****   switch(line_id) {
  23:src/menu.c    ****     case MI_ABOUT_PGM:
ARM GAS  /tmp/cc0ERj20.s 			page 2


  24:src/menu.c    ****       disp_about();
  25:src/menu.c    ****       break;
  26:src/menu.c    **** 
  27:src/menu.c    ****      default:
  28:src/menu.c    ****       ret = MRET_UNIMPL;
  29:src/menu.c    ****       break;
  30:src/menu.c    ****   }
  31:src/menu.c    **** 
  32:src/menu.c    ****   return ret;
  33:src/menu.c    **** }
  34:src/menu.c    **** 
  35:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 35 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  36:src/menu.c    ****   const char * ln;
  40              		.loc 1 36 3 view .LVU1
  37:src/menu.c    **** 
  38:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 38 3 view .LVU2
  39:src/menu.c    **** 
  40:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  41:src/menu.c    **** 
  42:src/menu.c    ****   default:
  43:src/menu.c    ****     ln = NULL;
  42              		.loc 1 43 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  38:src/menu.c    **** 
  44              		.loc 1 38 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
  44:src/menu.c    ****     break;
  45:src/menu.c    ****   }
  46:src/menu.c    **** 
  47:src/menu.c    ****   return ln;
  48:src/menu.c    **** }
  46              		.loc 1 48 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 48 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC1
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc0ERj20.s 			page 3


  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB33:
  49:src/menu.c    **** 
  50:src/menu.c    **** void disp_about() {
  51:src/menu.c    ****   lcd_clear_buf();
  52:src/menu.c    ****   lcd_writeClr(t24);
  53:src/menu.c    **** 
  54:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  55:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
  56:src/menu.c    ****   t24->y += 5;
  57:src/menu.c    **** #ifdef TOP_ROW
  58:src/menu.c    ****   lcd_print(t24, "top row version,");
  59:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
  60:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  61:src/menu.c    ****   lcd_print(t24, "with a longer alpha display,");
  62:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  63:src/menu.c    ****   #else
  64:src/menu.c    ****   lcd_print(t24, "Just like the original calculator");
  65:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed,");
  66:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  67:src/menu.c    **** #endif
  68:src/menu.c    ****   t24->y += 5;
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
  71:src/menu.c    **** 
  72:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
  73:src/menu.c    ****   t24->x = 20;
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
  75:src/menu.c    **** 
  76:src/menu.c    ****   lcd_refresh();
  77:src/menu.c    **** 
  78:src/menu.c    ****   wait_for_key_press();
  79:src/menu.c    **** }
  80:src/menu.c    **** 
  81:src/menu.c    **** /*
  82:src/menu.c    ****  * WP34s menu code
  83:src/menu.c    ****  */
  84:src/menu.c    **** 
  85:src/menu.c    **** void set_menu ( int new_menu ) {
  86:src/menu.c    ****   int m = current_menu;
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
  88:src/menu.c    ****     current_menu = default_menu;
  89:src/menu.c    ****   }
  90:src/menu.c    ****   else if (new_menu == -1) { // go to last menu
  91:src/menu.c    ****     current_menu = last_menu;
  92:src/menu.c    ****   }
  93:src/menu.c    ****   else {
  94:src/menu.c    ****     current_menu = new_menu; // change to new menu
  95:src/menu.c    ****   }
  96:src/menu.c    ****   if ( (m != 9) && (m != 16) ) last_menu = m; // store menu as last menu unless arrow or alpha
  97:src/menu.c    **** }
  98:src/menu.c    **** 
  99:src/menu.c    **** void set_default_menu () {
 100:src/menu.c    ****   set_menu (default_menu);
 101:src/menu.c    **** }
 102:src/menu.c    **** 
ARM GAS  /tmp/cc0ERj20.s 			page 4


 103:src/menu.c    **** void toggle_default_menu () {
 104:src/menu.c    ****   if (current_menu == default_menu) {
 105:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 106:src/menu.c    ****   }
 107:src/menu.c    **** }
 108:src/menu.c    **** 
 109:src/menu.c    **** int get_menu () {
 110:src/menu.c    ****   return current_menu;
 111:src/menu.c    **** }
 112:src/menu.c    **** 
 113:src/menu.c    **** int get_last_menu () {
 114:src/menu.c    ****   return last_menu;
 115:src/menu.c    **** }
 116:src/menu.c    **** 
 117:src/menu.c    **** void display_current_menu () {
 118:src/menu.c    ****   display_menu (current_menu);
 119:src/menu.c    **** }
 120:src/menu.c    **** 
 121:src/menu.c    **** void set_last_menu () {
 122:src/menu.c    ****   set_menu (last_menu);
 123:src/menu.c    **** }
 124:src/menu.c    **** 
 125:src/menu.c    **** static unsigned char mdots[200][2];
 126:src/menu.c    **** 
 127:src/menu.c    **** static const struct _menu Menus[] = {
 128:src/menu.c    ****   {
 129:src/menu.c    ****     "Blank", // 0
 130:src/menu.c    ****     { 
 131:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 132:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 133:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 134:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 135:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 136:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 137:src/menu.c    ****     }    
 138:src/menu.c    ****   },
 139:src/menu.c    ****   {
 140:src/menu.c    ****     "Clear", // 1
 141:src/menu.c    ****     { 
 142:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 143:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 144:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 145:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 146:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 147:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 148:src/menu.c    ****     }    
 149:src/menu.c    ****   },
 150:src/menu.c    ****   {
 151:src/menu.c    ****     "DISP", // 2
 152:src/menu.c    ****     { 
 153:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 154:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 155:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 156:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 157:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 158:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 159:src/menu.c    ****     }
ARM GAS  /tmp/cc0ERj20.s 			page 5


 160:src/menu.c    ****   },
 161:src/menu.c    ****   {
 162:src/menu.c    ****     "BASE", // 3
 163:src/menu.c    ****     { 
 164:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 165:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 166:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 167:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 168:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 169:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 170:src/menu.c    ****     }
 171:src/menu.c    ****   },
 172:src/menu.c    ****   {
 173:src/menu.c    ****     "ANGLES", // 4
 174:src/menu.c    ****     { 
 175:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 176:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 177:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 178:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 179:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 180:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 181:src/menu.c    ****     }
 182:src/menu.c    ****       
 183:src/menu.c    ****   },
 184:src/menu.c    ****   {
 185:src/menu.c    ****     "MISC", // 5
 186:src/menu.c    ****     { 
 187:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 188:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 189:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 190:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 191:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 192:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 193:src/menu.c    ****     }
 194:src/menu.c    ****   },
 195:src/menu.c    ****   {
 196:src/menu.c    ****     "X<>Y Key", // 6
 197:src/menu.c    ****     { 
 198:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 199:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 200:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 201:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 202:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 203:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 204:src/menu.c    ****     }    
 205:src/menu.c    ****   },
 206:src/menu.c    ****   {
 207:src/menu.c    ****     "Program", // 7
 208:src/menu.c    ****     { 
 209:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 210:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 211:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 212:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 213:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 214:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 215:src/menu.c    ****     }
 216:src/menu.c    ****   },
ARM GAS  /tmp/cc0ERj20.s 			page 6


 217:src/menu.c    ****   {
 218:src/menu.c    ****     "Setup 1", // 8
 219:src/menu.c    ****     { 
 220:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 221:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 222:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 223:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 224:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 225:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 226:src/menu.c    ****     }
 227:src/menu.c    ****   },
 228:src/menu.c    ****   {
 229:src/menu.c    ****     "Arrow", // 9
 230:src/menu.c    ****     { 
 231:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 232:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 233:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 234:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "\015HMS" },
 235:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 236:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 237:src/menu.c    ****     }
 238:src/menu.c    ****   },
 239:src/menu.c    ****   {
 240:src/menu.c    ****     "Flags", // 10
 241:src/menu.c    ****     { 
 242:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
 243:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 244:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 245:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 246:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 247:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 248:src/menu.c    ****     }
 249:src/menu.c    ****   },
 250:src/menu.c    ****   {
 251:src/menu.c    ****     "Probability", // 11
 252:src/menu.c    ****     { 
 253:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 254:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 255:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 256:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 257:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 258:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 259:src/menu.c    ****     }
 260:src/menu.c    ****   },
 261:src/menu.c    ****   {
 262:src/menu.c    ****     "Statistics", // 12
 263:src/menu.c    ****     /*
 264:src/menu.c    ****      *xbar, sd;
 265:src/menu.c    ****      *yhat, xhat;
 266:src/menu.c    ****      *corr, L.R.;
 267:src/menu.c    ****      *best, linear;
 268:src/menu.c    ****      *ln, exp;
 269:src/menu.c    ****      *cmplx, power;
 270:src/menu.c    ****      *No, sums is already on g9.
 271:src/menu.c    ****      */
 272:src/menu.c    ****     { 
 273:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
ARM GAS  /tmp/cc0ERj20.s 			page 7


 274:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 275:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 276:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 277:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 278:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 279:src/menu.c    ****     }
 280:src/menu.c    ****   },
 281:src/menu.c    ****   {
 282:src/menu.c    ****     "Setup 2", // 13
 283:src/menu.c    ****     { 
 284:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 285:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 286:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 287:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 288:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 289:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 290:src/menu.c    ****     }
 291:src/menu.c    ****   },
 292:src/menu.c    ****   {
 293:src/menu.c    ****     "Integ/Sum/Prod", // 14
 294:src/menu.c    ****     { 
 295:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 296:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 297:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 298:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 299:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 300:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 301:src/menu.c    ****     }
 302:src/menu.c    ****   },
 303:src/menu.c    ****   {
 304:src/menu.c    ****     "Blank with A-D", // 15
 305:src/menu.c    ****     { 
 306:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 307:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 308:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 309:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 310:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 311:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 312:src/menu.c    ****     }    
 313:src/menu.c    ****   },
 314:src/menu.c    ****   {
 315:src/menu.c    ****     "Alpha", // 16
 316:src/menu.c    ****     { 
 317:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 318:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 319:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 320:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 321:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 322:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 323:src/menu.c    ****     }    
 324:src/menu.c    ****   },
 325:src/menu.c    ****   {
 326:src/menu.c    ****     "C_LOCK", // 17
 327:src/menu.c    ****     { 
 328:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 329:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 330:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "CHS\006y", "CHS\006x" },
ARM GAS  /tmp/cc0ERj20.s 			page 8


 331:src/menu.c    ****       { { K21, 1 }, { K00, 1 }, "x\027y", "HYP" },
 332:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 333:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 334:src/menu.c    ****     }    
 335:src/menu.c    ****   },
 336:src/menu.c    **** };  
 337:src/menu.c    **** 
 338:src/menu.c    **** /* This code is the set_status_sized code with small changes
 339:src/menu.c    ****  * and non-DM42 code removed.
 340:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 341:src/menu.c    ****  */
 342:src/menu.c    **** #define MENU_WIDTH 32
 343:src/menu.c    **** 
 344:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 344 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 345:src/menu.c    ****   // dotcol is the number of the starting dot column
 346:src/menu.c    ****   // shifted is 1 if shifted
 347:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 347 3 view .LVU8
 348:src/menu.c    **** 
 349:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 350:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 350 3 view .LVU9
 351:src/menu.c    **** 
 352:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 352 3 view .LVU10
 344:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 344 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 344:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 344 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 353:src/menu.c    ****   int i, j, xmax;
 354:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 354 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
  96 000e B4BF     		ite	lt
  97 0010 01F11F03 		addlt	r3, r1, #31
  98 0014 0B46     		movge	r3, r1
 355:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 356:src/menu.c    **** 
 357:src/menu.c    ****   forceDispPlot=0;
ARM GAS  /tmp/cc0ERj20.s 			page 9


  99              		.loc 1 357 16 view .LVU14
 100 0016 4848     		ldr	r0, .L41
 101              	.LVL3:
 344:src/menu.c    ****   // dotcol is the number of the starting dot column
 102              		.loc 1 344 13 view .LVU15
 103 0018 0F46     		mov	r7, r1
 104              	.LVL4:
 353:src/menu.c    ****   int i, j, xmax;
 105              		.loc 1 353 3 is_stmt 1 view .LVU16
 354:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 106              		.loc 1 354 3 view .LVU17
 358:src/menu.c    **** 
 359:src/menu.c    **** #ifdef RP_PREFIX
 360:src/menu.c    ****   RectPolConv = 0;
 107              		.loc 1 360 15 is_stmt 0 view .LVU18
 108 001a 4849     		ldr	r1, .L41+4
 109              	.LVL5:
 357:src/menu.c    **** 
 110              		.loc 1 357 16 view .LVU19
 111 001c 0022     		movs	r2, #0
 112              	.LVL6:
 357:src/menu.c    **** 
 113              		.loc 1 357 16 view .LVU20
 114 001e 0270     		strb	r2, [r0]
 115              		.loc 1 360 15 view .LVU21
 116 0020 0A60     		str	r2, [r1]
 361:src/menu.c    **** #endif
 362:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 117              		.loc 1 362 10 view .LVU22
 118 0022 019A     		ldr	r2, [sp, #4]
 119 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 354:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 120              		.loc 1 354 30 view .LVU23
 121 0026 23F01F03 		bic	r3, r3, #31
 354:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 122              		.loc 1 354 8 view .LVU24
 123 002a 03F12009 		add	r9, r3, #32
 124              	.LVL7:
 355:src/menu.c    **** 
 125              		.loc 1 355 3 is_stmt 1 view .LVU25
 357:src/menu.c    **** 
 126              		.loc 1 357 3 view .LVU26
 360:src/menu.c    **** #endif
 127              		.loc 1 360 3 view .LVU27
 128              		.loc 1 362 3 view .LVU28
 129              		.loc 1 362 9 view .LVU29
 130 002e 002D     		cmp	r5, #0
 131 0030 78D0     		beq	.L7
 132              		.loc 1 362 23 is_stmt 0 view .LVU30
 133 0032 4F45     		cmp	r7, r9
 134 0034 76DC     		bgt	.L7
 135              	.LBB47:
 363:src/menu.c    ****     int c;
 364:src/menu.c    ****     int width;
 365:src/menu.c    ****     unsigned char cmap[6];
 366:src/menu.c    **** 
 367:src/menu.c    ****     int real_width;
ARM GAS  /tmp/cc0ERj20.s 			page 10


 368:src/menu.c    ****     int current_smallp;
 369:src/menu.c    **** 
 370:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 371:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 372:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 373:src/menu.c    ****     //           01 -> (not used)
 374:src/menu.c    ****     //           10 -> use big font
 375:src/menu.c    ****     //           11 -> use small font
 376:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 377:src/menu.c    ****     if (str[0] == '\007') {
 136              		.loc 1 377 8 view .LVU31
 137 0036 072D     		cmp	r5, #7
 138              	.LBE47:
 350:src/menu.c    **** 
 139              		.loc 1 350 7 view .LVU32
 140 0038 4FF0FF04 		mov	r4, #255
 141              	.LVL8:
 142              	.LBB64:
 363:src/menu.c    ****     int c;
 143              		.loc 1 363 5 is_stmt 1 view .LVU33
 364:src/menu.c    ****     unsigned char cmap[6];
 144              		.loc 1 364 5 view .LVU34
 365:src/menu.c    **** 
 145              		.loc 1 365 5 view .LVU35
 367:src/menu.c    ****     int current_smallp;
 146              		.loc 1 367 5 view .LVU36
 368:src/menu.c    **** 
 147              		.loc 1 368 5 view .LVU37
 148              		.loc 1 377 5 view .LVU38
 378:src/menu.c    ****       width = str[1] & 0x1F;
 379:src/menu.c    ****       switch (str[1] & 0x60) {
 380:src/menu.c    ****       default:
 381:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 382:src/menu.c    **** 	break;
 383:src/menu.c    ****       case 0x40:	current_smallp = 0;
 384:src/menu.c    **** 	break;
 385:src/menu.c    ****       case 0x60:	current_smallp = 1;
 149              		.loc 1 385 33 is_stmt 0 view .LVU39
 150 003c 4FF0010A 		mov	r10, #1
 377:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 377 8 view .LVU40
 152 0040 64D1     		bne	.L11
 153              	.LVL9:
 154              	.L39:
 378:src/menu.c    ****       width = str[1] & 0x1F;
 155              		.loc 1 378 7 is_stmt 1 view .LVU41
 378:src/menu.c    ****       width = str[1] & 0x1F;
 156              		.loc 1 378 18 is_stmt 0 view .LVU42
 157 0042 019B     		ldr	r3, [sp, #4]
 158 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 159 0046 06F06003 		and	r3, r6, #96
 379:src/menu.c    ****       default:
 160              		.loc 1 379 7 view .LVU43
 161 004a 402B     		cmp	r3, #64
 378:src/menu.c    ****       width = str[1] & 0x1F;
 162              		.loc 1 378 13 view .LVU44
 163 004c 06F01F06 		and	r6, r6, #31
ARM GAS  /tmp/cc0ERj20.s 			page 11


 164              	.LVL10:
 379:src/menu.c    ****       default:
 165              		.loc 1 379 7 is_stmt 1 view .LVU45
 166 0050 6CD0     		beq	.L34
 167 0052 602B     		cmp	r3, #96
 168 0054 6AD1     		bne	.L34
 169              		.loc 1 385 18 view .LVU46
 170              	.LVL11:
 386:src/menu.c    **** 	break;
 171              		.loc 1 386 2 view .LVU47
 387:src/menu.c    ****       }
 388:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 172              		.loc 1 388 7 view .LVU48
 173              		.loc 1 388 11 is_stmt 0 view .LVU49
 174 0056 019B     		ldr	r3, [sp, #4]
 175 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 385:src/menu.c    **** 	break;
 176              		.loc 1 385 33 view .LVU50
 177 005a 0123     		movs	r3, #1
 178 005c 0093     		str	r3, [sp]
 179 005e 00F58075 		add	r5, r0, #256
 180              	.LVL12:
 181              	.L15:
 389:src/menu.c    ****       str += 3;
 182              		.loc 1 389 7 is_stmt 1 view .LVU51
 390:src/menu.c    **** 
 391:src/menu.c    ****       real_width = charlengths(c);
 183              		.loc 1 391 20 is_stmt 0 view .LVU52
 184 0062 2846     		mov	r0, r5
 185 0064 FFF7FEFF 		bl	charlengths
 186              	.LVL13:
 389:src/menu.c    ****       str += 3;
 187              		.loc 1 389 11 view .LVU53
 188 0068 019B     		ldr	r3, [sp, #4]
 189 006a 0333     		adds	r3, r3, #3
 190 006c 0193     		str	r3, [sp, #4]
 191              	.LVL14:
 192              		.loc 1 391 7 is_stmt 1 view .LVU54
 392:src/menu.c    ****     } else {
 393:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 394:src/menu.c    ****       real_width = width = charlengths(c);
 395:src/menu.c    ****       current_smallp = smallp;
 396:src/menu.c    ****     }
 397:src/menu.c    **** 
 398:src/menu.c    ****     if (x + real_width > xmax)
 193              		.loc 1 398 5 view .LVU55
 194              		.loc 1 398 11 is_stmt 0 view .LVU56
 195 006e C319     		adds	r3, r0, r7
 196              	.LVL15:
 197              		.loc 1 398 8 view .LVU57
 198 0070 9945     		cmp	r9, r3
 199 0072 57DB     		blt	.L7
 200              	.L40:
 399:src/menu.c    ****       break;
 400:src/menu.c    **** 
 401:src/menu.c    ****     if (posns_state != current_smallp) {
 201              		.loc 1 401 5 is_stmt 1 view .LVU58
ARM GAS  /tmp/cc0ERj20.s 			page 12


 202              		.loc 1 401 8 is_stmt 0 view .LVU59
 203 0074 009B     		ldr	r3, [sp]
 204 0076 A342     		cmp	r3, r4
 402:src/menu.c    ****       findlengths(posns, current_smallp);
 205              		.loc 1 402 7 view .LVU60
 206 0078 07AB     		add	r3, sp, #28
 401:src/menu.c    ****       findlengths(posns, current_smallp);
 207              		.loc 1 401 8 view .LVU61
 208 007a 05D0     		beq	.L18
 209              		.loc 1 402 7 is_stmt 1 view .LVU62
 210 007c 1846     		mov	r0, r3
 211              	.LVL16:
 212              		.loc 1 402 7 is_stmt 0 view .LVU63
 213 007e 0099     		ldr	r1, [sp]
 214 0080 0393     		str	r3, [sp, #12]
 215 0082 FFF7FEFF 		bl	findlengths
 216              	.LVL17:
 217 0086 039B     		ldr	r3, [sp, #12]
 403:src/menu.c    ****       posns_state = current_smallp;
 218              		.loc 1 403 7 is_stmt 1 view .LVU64
 219              	.LVL18:
 220              	.L18:
 404:src/menu.c    ****     }
 405:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 221              		.loc 1 405 5 view .LVU65
 222 0088 009A     		ldr	r2, [sp]
 223 008a 2846     		mov	r0, r5
 224 008c 05A9     		add	r1, sp, #20
 225 008e FFF7FEFF 		bl	unpackchar
 226              	.LVL19:
 406:src/menu.c    **** 
 407:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 227              		.loc 1 407 5 view .LVU66
 228              		.loc 1 407 15 view .LVU67
 229 0092 029B     		ldr	r3, [sp, #8]
 230 0094 03EB4704 		add	r4, r3, r7, lsl #1
 231 0098 294B     		ldr	r3, .L41+8
 232 009a 0DF1140B 		add	fp, sp, #20
 233 009e 1C44     		add	r4, r4, r3
 405:src/menu.c    **** 
 234              		.loc 1 405 5 is_stmt 0 view .LVU68
 235 00a0 4FF0050E 		mov	lr, #5
 236 00a4 A9EB0705 		sub	r5, r9, r7
 237              	.LVL20:
 238              	.L19:
 408:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 239              		.loc 1 408 17 is_stmt 1 view .LVU69
 240              		.loc 1 408 7 is_stmt 0 view .LVU70
 241 00a8 002E     		cmp	r6, #0
 242 00aa 1FDD     		ble	.L25
 409:src/menu.c    **** 	if (x+j >= xmax)
 243              		.loc 1 409 2 is_stmt 1 view .LVU71
 244              		.loc 1 409 5 is_stmt 0 view .LVU72
 245 00ac B945     		cmp	r9, r7
 246 00ae 1DDD     		ble	.L25
 247              	.LBB48:
 248              	.LBB49:
ARM GAS  /tmp/cc0ERj20.s 			page 13


 249              	.LBB50:
 250              	.LBB51:
 410:src/menu.c    **** 	  break;
 411:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 412:src/menu.c    ****       }
 413:src/menu.c    ****     }
 414:src/menu.c    ****     x += width;
 415:src/menu.c    ****   }
 416:src/menu.c    **** }
 417:src/menu.c    **** 
 418:src/menu.c    **** 
 419:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 420:src/menu.c    **** 
 421:src/menu.c    **** int pixel_length(const char *s, int smallp)
 422:src/menu.c    **** {
 423:src/menu.c    ****   int len = 0;
 424:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 425:src/menu.c    ****   while (*s != '\0') {
 426:src/menu.c    ****     if (s[0] == '\007') {
 427:src/menu.c    ****       len += s[1] & 0x1F;
 428:src/menu.c    ****       s += 3;
 429:src/menu.c    ****       continue;
 430:src/menu.c    ****     }
 431:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 432:src/menu.c    ****   }
 433:src/menu.c    ****   return len;
 434:src/menu.c    **** }
 435:src/menu.c    **** */
 436:src/menu.c    **** 
 437:src/menu.c    **** 
 438:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 439:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 440:src/menu.c    ****   if (on) {
 441:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 442:src/menu.c    ****   }
 443:src/menu.c    ****   else {
 444:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 251              		.loc 1 444 25 view .LVU73
 252 00b0 0AFA0EFC 		lsl	ip, r10, lr
 253              		.loc 1 444 17 view .LVU74
 254 00b4 4FFA8CFC 		sxtb	ip, ip
 255              	.LBE51:
 256              	.LBE50:
 257              	.LBE49:
 258              	.LBE48:
 411:src/menu.c    ****       }
 259              		.loc 1 411 31 view .LVU75
 260 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 261              	.LBB61:
 262              	.LBB58:
 263              	.LBB55:
 264              	.LBB52:
 265              		.loc 1 444 17 view .LVU76
 266 00bc 6FEA0C08 		mvn	r8, ip
 267              	.LBE52:
 268              	.LBE55:
 269              	.LBE58:
ARM GAS  /tmp/cc0ERj20.s 			page 14


 270              	.LBE61:
 408:src/menu.c    **** 	if (x+j >= xmax)
 271              		.loc 1 408 13 view .LVU77
 272 00c0 0023     		movs	r3, #0
 273 00c2 01E0     		b	.L20
 274              	.LVL21:
 275              	.L24:
 409:src/menu.c    **** 	  break;
 276              		.loc 1 409 5 view .LVU78
 277 00c4 9D42     		cmp	r5, r3
 278 00c6 11D0     		beq	.L25
 279              	.LVL22:
 280              	.L20:
 411:src/menu.c    ****       }
 281              		.loc 1 411 2 is_stmt 1 view .LVU79
 282              	.LBB62:
 283              	.LBI48:
 438:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 438 6 view .LVU80
 285              	.LBB59:
 439:src/menu.c    ****   if (on) {
 286              		.loc 1 439 3 view .LVU81
 287              	.LBB56:
 288              	.LBI50:
 438:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 289              		.loc 1 438 6 view .LVU82
 290              	.LBB53:
 440:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 291              		.loc 1 440 3 view .LVU83
 292              	.LBE53:
 293              	.LBE56:
 439:src/menu.c    ****   if (on) {
 294              		.loc 1 439 6 is_stmt 0 view .LVU84
 295 00c8 DA19     		adds	r2, r3, r7
 296              	.LVL23:
 439:src/menu.c    ****   if (on) {
 297              		.loc 1 439 6 view .LVU85
 298 00ca C72A     		cmp	r2, #199
 299              	.LBE59:
 300              	.LBE62:
 411:src/menu.c    ****       }
 301              		.loc 1 411 46 view .LVU86
 302 00cc 40FA03F1 		asr	r1, r0, r3
 303              	.LBB63:
 304              	.LBB60:
 439:src/menu.c    ****   if (on) {
 305              		.loc 1 439 6 view .LVU87
 306 00d0 09D8     		bhi	.L22
 307              	.LBB57:
 308              	.LBB54:
 441:src/menu.c    ****   }
 309              		.loc 1 441 5 is_stmt 1 view .LVU88
 310              		.loc 1 444 5 view .LVU89
 441:src/menu.c    ****   }
 311              		.loc 1 441 17 is_stmt 0 view .LVU90
 312 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 313              	.LVL24:
ARM GAS  /tmp/cc0ERj20.s 			page 15


 440:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 314              		.loc 1 440 6 view .LVU91
 315 00d6 C907     		lsls	r1, r1, #31
 441:src/menu.c    ****   }
 316              		.loc 1 441 17 view .LVU92
 317 00d8 4CBF     		ite	mi
 318 00da 4CEA0202 		orrmi	r2, ip, r2
 319              		.loc 1 444 17 view .LVU93
 320 00de 08EA0202 		andpl	r2, r8, r2
 321 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 322              	.L22:
 323              	.LBE54:
 324              	.LBE57:
 325              	.LBE60:
 326              	.LBE63:
 409:src/menu.c    **** 	  break;
 327              		.loc 1 409 2 is_stmt 1 view .LVU94
 328              	.LVL25:
 408:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 408 26 view .LVU95
 408:src/menu.c    **** 	if (x+j >= xmax)
 330              		.loc 1 408 27 is_stmt 0 view .LVU96
 331 00e6 0133     		adds	r3, r3, #1
 332              	.LVL26:
 408:src/menu.c    **** 	if (x+j >= xmax)
 333              		.loc 1 408 17 is_stmt 1 view .LVU97
 408:src/menu.c    **** 	if (x+j >= xmax)
 334              		.loc 1 408 7 is_stmt 0 view .LVU98
 335 00e8 B342     		cmp	r3, r6
 336 00ea EBD1     		bne	.L24
 337              	.LVL27:
 338              	.L25:
 407:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 339              		.loc 1 407 20 is_stmt 1 view .LVU99
 407:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 340              		.loc 1 407 15 view .LVU100
 341 00ec 0EF1FF3E 		add	lr, lr, #-1
 407:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 342              		.loc 1 407 5 is_stmt 0 view .LVU101
 343 00f0 BEF1FF3F 		cmp	lr, #-1
 344 00f4 0BF1010B 		add	fp, fp, #1
 345              	.LVL28:
 407:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 346              		.loc 1 407 5 view .LVU102
 347 00f8 D6D1     		bne	.L19
 414:src/menu.c    ****   }
 348              		.loc 1 414 5 is_stmt 1 view .LVU103
 349              	.LBE64:
 362:src/menu.c    ****     int c;
 350              		.loc 1 362 10 is_stmt 0 view .LVU104
 351 00fa 019B     		ldr	r3, [sp, #4]
 352 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 353              	.LBB65:
 414:src/menu.c    ****   }
 354              		.loc 1 414 7 view .LVU105
 355 00fe 3744     		add	r7, r7, r6
 356              	.LVL29:
ARM GAS  /tmp/cc0ERj20.s 			page 16


 414:src/menu.c    ****   }
 357              		.loc 1 414 7 view .LVU106
 358              	.LBE65:
 362:src/menu.c    ****     int c;
 359              		.loc 1 362 9 is_stmt 1 view .LVU107
 360 0100 85B1     		cbz	r5, .L7
 362:src/menu.c    ****     int c;
 361              		.loc 1 362 23 is_stmt 0 view .LVU108
 362 0102 B945     		cmp	r9, r7
 363 0104 0EDB     		blt	.L7
 364              	.LBB66:
 377:src/menu.c    ****       width = str[1] & 0x1F;
 365              		.loc 1 377 8 view .LVU109
 366 0106 072D     		cmp	r5, #7
 367              	.LBE66:
 368 0108 009C     		ldr	r4, [sp]
 369              	.LBB67:
 363:src/menu.c    ****     int width;
 370              		.loc 1 363 5 is_stmt 1 view .LVU110
 364:src/menu.c    ****     unsigned char cmap[6];
 371              		.loc 1 364 5 view .LVU111
 365:src/menu.c    **** 
 372              		.loc 1 365 5 view .LVU112
 367:src/menu.c    ****     int current_smallp;
 373              		.loc 1 367 5 view .LVU113
 368:src/menu.c    **** 
 374              		.loc 1 368 5 view .LVU114
 377:src/menu.c    ****       width = str[1] & 0x1F;
 375              		.loc 1 377 5 view .LVU115
 377:src/menu.c    ****       width = str[1] & 0x1F;
 376              		.loc 1 377 8 is_stmt 0 view .LVU116
 377 010a 9AD0     		beq	.L39
 378              	.LVL30:
 379              	.L11:
 393:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 393 7 is_stmt 1 view .LVU117
 394:src/menu.c    ****       current_smallp = smallp;
 381              		.loc 1 394 28 is_stmt 0 view .LVU118
 382 010c 2846     		mov	r0, r5
 383 010e FFF7FEFF 		bl	charlengths
 384              	.LVL31:
 393:src/menu.c    ****       real_width = width = charlengths(c);
 385              		.loc 1 393 31 view .LVU119
 386 0112 019B     		ldr	r3, [sp, #4]
 387 0114 0133     		adds	r3, r3, #1
 388 0116 0193     		str	r3, [sp, #4]
 389              	.LVL32:
 394:src/menu.c    ****       current_smallp = smallp;
 390              		.loc 1 394 7 is_stmt 1 view .LVU120
 395:src/menu.c    ****     }
 391              		.loc 1 395 7 view .LVU121
 395:src/menu.c    ****     }
 392              		.loc 1 395 22 is_stmt 0 view .LVU122
 393 0118 0023     		movs	r3, #0
 394              	.LVL33:
 395:src/menu.c    ****     }
 395              		.loc 1 395 22 view .LVU123
ARM GAS  /tmp/cc0ERj20.s 			page 17


 396 011a 0093     		str	r3, [sp]
 397              	.LVL34:
 398:src/menu.c    ****       break;
 398              		.loc 1 398 11 view .LVU124
 399 011c C319     		adds	r3, r0, r7
 400              	.LVL35:
 398:src/menu.c    ****       break;
 401              		.loc 1 398 8 view .LVU125
 402 011e 9945     		cmp	r9, r3
 394:src/menu.c    ****       current_smallp = smallp;
 403              		.loc 1 394 28 view .LVU126
 404 0120 0646     		mov	r6, r0
 398:src/menu.c    ****       break;
 405              		.loc 1 398 5 is_stmt 1 view .LVU127
 398:src/menu.c    ****       break;
 406              		.loc 1 398 8 is_stmt 0 view .LVU128
 407 0122 A7DA     		bge	.L40
 408              	.LVL36:
 409              	.L7:
 398:src/menu.c    ****       break;
 410              		.loc 1 398 8 view .LVU129
 411              	.LBE67:
 416:src/menu.c    **** 
 412              		.loc 1 416 1 view .LVU130
 413 0124 0DF5097D 		add	sp, sp, #548
 414              		.cfi_remember_state
 415              		.cfi_def_cfa_offset 36
 416              		@ sp needed
 417 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 418              	.LVL37:
 419              	.L34:
 420              		.cfi_restore_state
 421              	.LBB68:
 388:src/menu.c    ****       str += 3;
 422              		.loc 1 388 7 is_stmt 1 view .LVU131
 388:src/menu.c    ****       str += 3;
 423              		.loc 1 388 11 is_stmt 0 view .LVU132
 424 012c 019B     		ldr	r3, [sp, #4]
 425 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 381:src/menu.c    **** 	break;
 426              		.loc 1 381 33 view .LVU133
 427 0130 0023     		movs	r3, #0
 428 0132 0093     		str	r3, [sp]
 429 0134 95E7     		b	.L15
 430              	.L42:
 431 0136 00BF     		.align	2
 432              	.L41:
 433 0138 00000000 		.word	forceDispPlot
 434 013c 00000000 		.word	RectPolConv
 435 0140 00000000 		.word	.LANCHOR0
 436              	.LBE68:
 437              		.cfi_endproc
 438              	.LFE33:
 440              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 441              		.align	2
 442              	.LC2:
 443 0000 57503334 		.ascii	"WP34C calculator for DM42:\000"
ARM GAS  /tmp/cc0ERj20.s 			page 18


 443      43206361 
 443      6C63756C 
 443      61746F72 
 443      20666F72 
 444 001b 00       		.align	2
 445              	.LC3:
 446 001c 746F7020 		.ascii	"top row version,\000"
 446      726F7720 
 446      76657273 
 446      696F6E2C 
 446      00
 447 002d 000000   		.align	2
 448              	.LC4:
 449 0030 696E636C 		.ascii	"including COMPLEX LOCK mode!\000"
 449      7564696E 
 449      6720434F 
 449      4D504C45 
 449      58204C4F 
 450 004d 000000   		.align	2
 451              	.LC5:
 452 0050 54686973 		.ascii	"This software is neither provided\000"
 452      20736F66 
 452      74776172 
 452      65206973 
 452      206E6569 
 453 0072 0000     		.align	2
 454              	.LC6:
 455 0074 6279206E 		.ascii	"by nor supported by SwissMicros.\000"
 455      6F722073 
 455      7570706F 
 455      72746564 
 455      20627920 
 456 0095 000000   		.align	2
 457              	.LC7:
 458 0098 20202020 		.ascii	"    Press EXIT key to continue...\000"
 458      50726573 
 458      73204558 
 458      4954206B 
 458      65792074 
 459              		.section	.text.disp_about,"ax",%progbits
 460              		.align	1
 461              		.p2align 2,,3
 462              		.global	disp_about
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv4-sp-d16
 468              	disp_about:
 469              	.LFB5:
  50:src/menu.c    ****   lcd_clear_buf();
 470              		.loc 1 50 19 is_stmt 1 view -0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
  51:src/menu.c    ****   lcd_writeClr(t24);
 474              		.loc 1 51 3 view .LVU135
  50:src/menu.c    ****   lcd_clear_buf();
ARM GAS  /tmp/cc0ERj20.s 			page 19


 475              		.loc 1 50 19 is_stmt 0 view .LVU136
 476 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 477              		.cfi_def_cfa_offset 24
 478              		.cfi_offset 4, -24
 479              		.cfi_offset 5, -20
 480              		.cfi_offset 6, -16
 481              		.cfi_offset 7, -12
 482              		.cfi_offset 8, -8
 483              		.cfi_offset 14, -4
  52:src/menu.c    **** 
 484              		.loc 1 52 3 view .LVU137
 485 0004 1E4C     		ldr	r4, .L45
  51:src/menu.c    ****   lcd_writeClr(t24);
 486              		.loc 1 51 3 view .LVU138
 487 0006 1F4B     		ldr	r3, .L45+4
  55:src/menu.c    ****   t24->y += 5;
 488              		.loc 1 55 3 view .LVU139
 489 0008 1F4D     		ldr	r5, .L45+8
  51:src/menu.c    ****   lcd_writeClr(t24);
 490              		.loc 1 51 3 view .LVU140
 491 000a 9847     		blx	r3
 492              	.LVL38:
  52:src/menu.c    **** 
 493              		.loc 1 52 3 is_stmt 1 view .LVU141
 494 000c 606B     		ldr	r0, [r4, #52]
 495 000e 1F4B     		ldr	r3, .L45+12
 496 0010 9847     		blx	r3
 497              	.LVL39:
  54:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
 498              		.loc 1 54 3 view .LVU142
 499 0012 0522     		movs	r2, #5
 500 0014 606B     		ldr	r0, [r4, #52]
 501 0016 1E4B     		ldr	r3, .L45+16
 502 0018 0021     		movs	r1, #0
 503 001a 9847     		blx	r3
 504              	.LVL40:
  55:src/menu.c    ****   t24->y += 5;
 505              		.loc 1 55 3 view .LVU143
  55:src/menu.c    ****   t24->y += 5;
 506              		.loc 1 55 3 view .LVU144
 507 001c 606B     		ldr	r0, [r4, #52]
 508 001e 1D49     		ldr	r1, .L45+20
 509 0020 0126     		movs	r6, #1
 510 0022 4674     		strb	r6, [r0, #17]
  55:src/menu.c    ****   t24->y += 5;
 511              		.loc 1 55 3 view .LVU145
 512 0024 A847     		blx	r5
 513              	.LVL41:
  55:src/menu.c    ****   t24->y += 5;
 514              		.loc 1 55 3 view .LVU146
 515 0026 606B     		ldr	r0, [r4, #52]
  58:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 516              		.loc 1 58 3 is_stmt 0 view .LVU147
 517 0028 1B49     		ldr	r1, .L45+24
  56:src/menu.c    **** #ifdef TOP_ROW
 518              		.loc 1 56 10 view .LVU148
 519 002a C388     		ldrh	r3, [r0, #6]
ARM GAS  /tmp/cc0ERj20.s 			page 20


  55:src/menu.c    ****   t24->y += 5;
 520              		.loc 1 55 3 view .LVU149
 521 002c 0027     		movs	r7, #0
  56:src/menu.c    **** #ifdef TOP_ROW
 522              		.loc 1 56 10 view .LVU150
 523 002e 0533     		adds	r3, r3, #5
 524 0030 C380     		strh	r3, [r0, #6]	@ movhi
  55:src/menu.c    ****   t24->y += 5;
 525              		.loc 1 55 3 view .LVU151
 526 0032 4774     		strb	r7, [r0, #17]
  55:src/menu.c    ****   t24->y += 5;
 527              		.loc 1 55 3 is_stmt 1 view .LVU152
  56:src/menu.c    **** #ifdef TOP_ROW
 528              		.loc 1 56 3 view .LVU153
  58:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 529              		.loc 1 58 3 view .LVU154
 530 0034 A847     		blx	r5
 531              	.LVL42:
  59:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 532              		.loc 1 59 3 view .LVU155
 533 0036 606B     		ldr	r0, [r4, #52]
 534 0038 1849     		ldr	r1, .L45+28
 535 003a A847     		blx	r5
 536              	.LVL43:
  68:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 537              		.loc 1 68 3 view .LVU156
 538 003c 606B     		ldr	r0, [r4, #52]
  69:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 539              		.loc 1 69 3 is_stmt 0 view .LVU157
 540 003e 1849     		ldr	r1, .L45+32
  68:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 541              		.loc 1 68 10 view .LVU158
 542 0040 C388     		ldrh	r3, [r0, #6]
  69:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 543              		.loc 1 69 3 view .LVU159
 544 0042 4674     		strb	r6, [r0, #17]
  68:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 545              		.loc 1 68 10 view .LVU160
 546 0044 0533     		adds	r3, r3, #5
 547 0046 C380     		strh	r3, [r0, #6]	@ movhi
  69:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 548              		.loc 1 69 3 is_stmt 1 view .LVU161
  69:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 549              		.loc 1 69 3 view .LVU162
  69:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 550              		.loc 1 69 3 view .LVU163
 551 0048 A847     		blx	r5
 552              	.LVL44:
  69:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 553              		.loc 1 69 3 view .LVU164
 554 004a 606B     		ldr	r0, [r4, #52]
  69:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 555              		.loc 1 69 3 view .LVU165
  70:src/menu.c    **** 
 556              		.loc 1 70 3 view .LVU166
  70:src/menu.c    **** 
 557              		.loc 1 70 3 view .LVU167
ARM GAS  /tmp/cc0ERj20.s 			page 21


 558 004c 1549     		ldr	r1, .L45+36
 559 004e 4674     		strb	r6, [r0, #17]
  70:src/menu.c    **** 
 560              		.loc 1 70 3 view .LVU168
 561 0050 A847     		blx	r5
 562              	.LVL45:
  70:src/menu.c    **** 
 563              		.loc 1 70 3 view .LVU169
 564 0052 606B     		ldr	r0, [r4, #52]
  72:src/menu.c    ****   t24->x = 20;
 565              		.loc 1 72 20 is_stmt 0 view .LVU170
 566 0054 144B     		ldr	r3, .L45+40
  70:src/menu.c    **** 
 567              		.loc 1 70 3 view .LVU171
 568 0056 4774     		strb	r7, [r0, #17]
  70:src/menu.c    **** 
 569              		.loc 1 70 3 is_stmt 1 view .LVU172
  72:src/menu.c    ****   t24->x = 20;
 570              		.loc 1 72 3 view .LVU173
  72:src/menu.c    ****   t24->x = 20;
 571              		.loc 1 72 20 is_stmt 0 view .LVU174
 572 0058 9847     		blx	r3
 573              	.LVL46:
  72:src/menu.c    ****   t24->x = 20;
 574              		.loc 1 72 3 view .LVU175
 575 005a 636B     		ldr	r3, [r4, #52]
  74:src/menu.c    **** 
 576              		.loc 1 74 3 view .LVU176
 577 005c 1349     		ldr	r1, .L45+44
 578 005e 5E74     		strb	r6, [r3, #17]
  73:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 579              		.loc 1 73 10 view .LVU177
 580 0060 1422     		movs	r2, #20
  72:src/menu.c    ****   t24->x = 20;
 581              		.loc 1 72 39 view .LVU178
 582 0062 C0F1EB00 		rsb	r0, r0, #235
  72:src/menu.c    ****   t24->x = 20;
 583              		.loc 1 72 10 view .LVU179
 584 0066 D880     		strh	r0, [r3, #6]	@ movhi
  73:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 585              		.loc 1 73 3 is_stmt 1 view .LVU180
  73:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 586              		.loc 1 73 10 is_stmt 0 view .LVU181
 587 0068 9A80     		strh	r2, [r3, #4]	@ movhi
  74:src/menu.c    **** 
 588              		.loc 1 74 3 is_stmt 1 view .LVU182
  74:src/menu.c    **** 
 589              		.loc 1 74 3 view .LVU183
  74:src/menu.c    **** 
 590              		.loc 1 74 3 view .LVU184
 591 006a 1846     		mov	r0, r3
 592 006c A847     		blx	r5
 593              	.LVL47:
  74:src/menu.c    **** 
 594              		.loc 1 74 3 view .LVU185
 595 006e 626B     		ldr	r2, [r4, #52]
  76:src/menu.c    **** 
ARM GAS  /tmp/cc0ERj20.s 			page 22


 596              		.loc 1 76 3 is_stmt 0 view .LVU186
 597 0070 0F4B     		ldr	r3, .L45+48
  74:src/menu.c    **** 
 598              		.loc 1 74 3 view .LVU187
 599 0072 5774     		strb	r7, [r2, #17]
  74:src/menu.c    **** 
 600              		.loc 1 74 3 is_stmt 1 view .LVU188
  76:src/menu.c    **** 
 601              		.loc 1 76 3 view .LVU189
 602 0074 9847     		blx	r3
 603              	.LVL48:
  78:src/menu.c    **** }
 604              		.loc 1 78 3 view .LVU190
  79:src/menu.c    **** 
 605              		.loc 1 79 1 is_stmt 0 view .LVU191
 606 0076 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 607              		.cfi_restore 14
 608              		.cfi_restore 8
 609              		.cfi_restore 7
 610              		.cfi_restore 6
 611              		.cfi_restore 5
 612              		.cfi_restore 4
 613              		.cfi_def_cfa_offset 0
  78:src/menu.c    **** }
 614              		.loc 1 78 3 view .LVU192
 615 007a 0E4B     		ldr	r3, .L45+52
 616 007c 1847     		bx	r3	@ indirect register sibling call
 617              	.LVL49:
 618              	.L46:
 619 007e 00BF     		.align	2
 620              	.L45:
 621 0080 00200010 		.word	268443648
 622 0084 2D020008 		.word	134218285
 623 0088 B1020008 		.word	134218417
 624 008c 65020008 		.word	134218341
 625 0090 6D020008 		.word	134218349
 626 0094 00000000 		.word	.LC2
 627 0098 1C000000 		.word	.LC3
 628 009c 30000000 		.word	.LC4
 629 00a0 50000000 		.word	.LC5
 630 00a4 74000000 		.word	.LC6
 631 00a8 71020008 		.word	134218353
 632 00ac 98000000 		.word	.LC7
 633 00b0 31020008 		.word	134218289
 634 00b4 99030008 		.word	134218649
 635              		.cfi_endproc
 636              	.LFE5:
 638              		.section	.text.run_menu_item,"ax",%progbits
 639              		.align	1
 640              		.p2align 2,,3
 641              		.global	run_menu_item
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	run_menu_item:
 648              	.LVL50:
ARM GAS  /tmp/cc0ERj20.s 			page 23


 649              	.LFB3:
  19:src/menu.c    ****   int ret = 0;
 650              		.loc 1 19 36 is_stmt 1 view -0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
  20:src/menu.c    **** 
 654              		.loc 1 20 3 view .LVU194
  22:src/menu.c    ****     case MI_ABOUT_PGM:
 655              		.loc 1 22 3 view .LVU195
 656 0000 0B28     		cmp	r0, #11
 657 0002 04D1     		bne	.L49
  24:src/menu.c    ****       break;
 658              		.loc 1 24 7 view .LVU196
  19:src/menu.c    ****   int ret = 0;
 659              		.loc 1 19 36 is_stmt 0 view .LVU197
 660 0004 08B5     		push	{r3, lr}
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 3, -8
 663              		.cfi_offset 14, -4
  24:src/menu.c    ****       break;
 664              		.loc 1 24 7 view .LVU198
 665 0006 FFF7FEFF 		bl	disp_about
 666              	.LVL51:
  25:src/menu.c    **** 
 667              		.loc 1 25 7 is_stmt 1 view .LVU199
  20:src/menu.c    **** 
 668              		.loc 1 20 7 is_stmt 0 view .LVU200
 669 000a 0020     		movs	r0, #0
  33:src/menu.c    **** 
 670              		.loc 1 33 1 view .LVU201
 671 000c 08BD     		pop	{r3, pc}
 672              	.LVL52:
 673              	.L49:
 674              		.cfi_def_cfa_offset 0
 675              		.cfi_restore 3
 676              		.cfi_restore 14
  28:src/menu.c    ****       break;
 677              		.loc 1 28 11 view .LVU202
 678 000e 4FF0FF30 		mov	r0, #-1
 679              	.LVL53:
  32:src/menu.c    **** }
 680              		.loc 1 32 3 is_stmt 1 view .LVU203
  33:src/menu.c    **** 
 681              		.loc 1 33 1 is_stmt 0 view .LVU204
 682 0012 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE3:
 686              		.section	.text.set_menu,"ax",%progbits
 687              		.align	1
 688              		.p2align 2,,3
 689              		.global	set_menu
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu fpv4-sp-d16
 695              	set_menu:
ARM GAS  /tmp/cc0ERj20.s 			page 24


 696              	.LVL54:
 697              	.LFB6:
  85:src/menu.c    ****   int m = current_menu;
 698              		.loc 1 85 32 is_stmt 1 view -0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 703              		.loc 1 86 3 view .LVU206
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 704              		.loc 1 86 7 is_stmt 0 view .LVU207
 705 0000 0A4A     		ldr	r2, .L66
 706 0002 1368     		ldr	r3, [r2]
 707              	.LVL55:
  87:src/menu.c    ****     current_menu = default_menu;
 708              		.loc 1 87 3 is_stmt 1 view .LVU208
  87:src/menu.c    ****     current_menu = default_menu;
 709              		.loc 1 87 6 is_stmt 0 view .LVU209
 710 0004 8342     		cmp	r3, r0
 711 0006 0CD0     		beq	.L65
  90:src/menu.c    ****     current_menu = last_menu;
 712              		.loc 1 90 8 is_stmt 1 view .LVU210
  90:src/menu.c    ****     current_menu = last_menu;
 713              		.loc 1 90 11 is_stmt 0 view .LVU211
 714 0008 411C     		adds	r1, r0, #1
  91:src/menu.c    ****   }
 715              		.loc 1 91 5 is_stmt 1 view .LVU212
  91:src/menu.c    ****   }
 716              		.loc 1 91 18 is_stmt 0 view .LVU213
 717 000a 09BF     		itett	eq
 718 000c 0849     		ldreq	r1, .L66+4
  94:src/menu.c    ****   }
 719              		.loc 1 94 18 view .LVU214
 720 000e 1060     		strne	r0, [r2]
  91:src/menu.c    ****   }
 721              		.loc 1 91 18 view .LVU215
 722 0010 0968     		ldreq	r1, [r1]
 723 0012 1160     		streq	r1, [r2]
  94:src/menu.c    ****   }
 724              		.loc 1 94 5 is_stmt 1 view .LVU216
 725              	.L56:
  96:src/menu.c    **** }
 726              		.loc 1 96 3 view .LVU217
  96:src/menu.c    **** }
 727              		.loc 1 96 6 is_stmt 0 view .LVU218
 728 0014 092B     		cmp	r3, #9
 729 0016 03D0     		beq	.L54
  96:src/menu.c    **** }
 730              		.loc 1 96 17 discriminator 1 view .LVU219
 731 0018 102B     		cmp	r3, #16
  96:src/menu.c    **** }
 732              		.loc 1 96 32 is_stmt 1 discriminator 1 view .LVU220
  96:src/menu.c    **** }
 733              		.loc 1 96 42 is_stmt 0 discriminator 1 view .LVU221
 734 001a 1CBF     		itt	ne
 735 001c 044A     		ldrne	r2, .L66+4
ARM GAS  /tmp/cc0ERj20.s 			page 25


 736 001e 1360     		strne	r3, [r2]
 737              	.L54:
  97:src/menu.c    **** 
 738              		.loc 1 97 1 view .LVU222
 739 0020 7047     		bx	lr
 740              	.L65:
  88:src/menu.c    ****   }
 741              		.loc 1 88 5 is_stmt 1 view .LVU223
  88:src/menu.c    ****   }
 742              		.loc 1 88 18 is_stmt 0 view .LVU224
 743 0022 0449     		ldr	r1, .L66+8
 744 0024 0968     		ldr	r1, [r1]
 745 0026 1160     		str	r1, [r2]
 746 0028 F4E7     		b	.L56
 747              	.L67:
 748 002a 00BF     		.align	2
 749              	.L66:
 750 002c 00000000 		.word	.LANCHOR1
 751 0030 00000000 		.word	.LANCHOR3
 752 0034 00000000 		.word	.LANCHOR2
 753              		.cfi_endproc
 754              	.LFE6:
 756              		.section	.text.set_default_menu,"ax",%progbits
 757              		.align	1
 758              		.p2align 2,,3
 759              		.global	set_default_menu
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 763              		.fpu fpv4-sp-d16
 765              	set_default_menu:
 766              	.LFB7:
  99:src/menu.c    ****   set_menu (default_menu);
 767              		.loc 1 99 26 is_stmt 1 view -0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 100:src/menu.c    **** }
 772              		.loc 1 100 3 view .LVU226
 773 0000 084B     		ldr	r3, .L79
 774              	.LBB69:
 775              	.LBB70:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 776              		.loc 1 86 7 is_stmt 0 view .LVU227
 777 0002 0949     		ldr	r1, .L79+4
 778              	.LBE70:
 779              	.LBE69:
 100:src/menu.c    **** }
 780              		.loc 1 100 3 view .LVU228
 781 0004 1A68     		ldr	r2, [r3]
 782              	.LVL56:
 783              	.LBB72:
 784              	.LBI69:
  85:src/menu.c    ****   int m = current_menu;
 785              		.loc 1 85 6 is_stmt 1 view .LVU229
 786              	.LBB71:
ARM GAS  /tmp/cc0ERj20.s 			page 26


  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 787              		.loc 1 86 3 view .LVU230
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 788              		.loc 1 86 7 is_stmt 0 view .LVU231
 789 0006 0B68     		ldr	r3, [r1]
 790              	.LVL57:
  87:src/menu.c    ****     current_menu = default_menu;
 791              		.loc 1 87 3 is_stmt 1 view .LVU232
  87:src/menu.c    ****     current_menu = default_menu;
 792              		.loc 1 87 6 is_stmt 0 view .LVU233
 793 0008 9A42     		cmp	r2, r3
 794 000a 04D0     		beq	.L70
  90:src/menu.c    ****     current_menu = last_menu;
 795              		.loc 1 90 8 is_stmt 1 view .LVU234
  90:src/menu.c    ****     current_menu = last_menu;
 796              		.loc 1 90 11 is_stmt 0 view .LVU235
 797 000c 501C     		adds	r0, r2, #1
  91:src/menu.c    ****   }
 798              		.loc 1 91 5 is_stmt 1 view .LVU236
  91:src/menu.c    ****   }
 799              		.loc 1 91 18 is_stmt 0 view .LVU237
 800 000e 04BF     		itt	eq
 801 0010 064A     		ldreq	r2, .L79+8
 802              	.LVL58:
  91:src/menu.c    ****   }
 803              		.loc 1 91 18 view .LVU238
 804 0012 1268     		ldreq	r2, [r2]
  94:src/menu.c    ****   }
 805              		.loc 1 94 5 is_stmt 1 view .LVU239
  94:src/menu.c    ****   }
 806              		.loc 1 94 18 is_stmt 0 view .LVU240
 807 0014 0A60     		str	r2, [r1]
 808              	.L70:
  96:src/menu.c    **** }
 809              		.loc 1 96 3 is_stmt 1 view .LVU241
  96:src/menu.c    **** }
 810              		.loc 1 96 6 is_stmt 0 view .LVU242
 811 0016 092B     		cmp	r3, #9
 812 0018 03D0     		beq	.L68
  96:src/menu.c    **** }
 813              		.loc 1 96 17 view .LVU243
 814 001a 102B     		cmp	r3, #16
  96:src/menu.c    **** }
 815              		.loc 1 96 32 is_stmt 1 view .LVU244
  96:src/menu.c    **** }
 816              		.loc 1 96 42 is_stmt 0 view .LVU245
 817 001c 1CBF     		itt	ne
 818 001e 034A     		ldrne	r2, .L79+8
 819 0020 1360     		strne	r3, [r2]
 820              	.LVL59:
 821              	.L68:
  96:src/menu.c    **** }
 822              		.loc 1 96 42 view .LVU246
 823              	.LBE71:
 824              	.LBE72:
 101:src/menu.c    **** 
 825              		.loc 1 101 1 view .LVU247
ARM GAS  /tmp/cc0ERj20.s 			page 27


 826 0022 7047     		bx	lr
 827              	.L80:
 828              		.align	2
 829              	.L79:
 830 0024 00000000 		.word	.LANCHOR2
 831 0028 00000000 		.word	.LANCHOR1
 832 002c 00000000 		.word	.LANCHOR3
 833              		.cfi_endproc
 834              	.LFE7:
 836              		.section	.text.toggle_default_menu,"ax",%progbits
 837              		.align	1
 838              		.p2align 2,,3
 839              		.global	toggle_default_menu
 840              		.syntax unified
 841              		.thumb
 842              		.thumb_func
 843              		.fpu fpv4-sp-d16
 845              	toggle_default_menu:
 846              	.LFB8:
 103:src/menu.c    ****   if (current_menu == default_menu) {
 847              		.loc 1 103 29 is_stmt 1 view -0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 0
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 851              		@ link register save eliminated.
 104:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 852              		.loc 1 104 3 view .LVU249
 104:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 853              		.loc 1 104 20 is_stmt 0 view .LVU250
 854 0000 0549     		ldr	r1, .L83
 855 0002 064A     		ldr	r2, .L83+4
 856 0004 0868     		ldr	r0, [r1]
 104:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 857              		.loc 1 104 6 view .LVU251
 858 0006 1368     		ldr	r3, [r2]
 859 0008 8342     		cmp	r3, r0
 860 000a 03D1     		bne	.L81
 105:src/menu.c    ****   }
 861              		.loc 1 105 5 is_stmt 1 view .LVU252
 105:src/menu.c    ****   }
 862              		.loc 1 105 38 is_stmt 0 view .LVU253
 863 000c C3F10F03 		rsb	r3, r3, #15
 105:src/menu.c    ****   }
 864              		.loc 1 105 33 view .LVU254
 865 0010 0B60     		str	r3, [r1]
 105:src/menu.c    ****   }
 866              		.loc 1 105 18 view .LVU255
 867 0012 1360     		str	r3, [r2]
 868              	.L81:
 107:src/menu.c    **** 
 869              		.loc 1 107 1 view .LVU256
 870 0014 7047     		bx	lr
 871              	.L84:
 872 0016 00BF     		.align	2
 873              	.L83:
 874 0018 00000000 		.word	.LANCHOR2
 875 001c 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/cc0ERj20.s 			page 28


 876              		.cfi_endproc
 877              	.LFE8:
 879              		.section	.text.get_menu,"ax",%progbits
 880              		.align	1
 881              		.p2align 2,,3
 882              		.global	get_menu
 883              		.syntax unified
 884              		.thumb
 885              		.thumb_func
 886              		.fpu fpv4-sp-d16
 888              	get_menu:
 889              	.LFB9:
 109:src/menu.c    ****   return current_menu;
 890              		.loc 1 109 17 is_stmt 1 view -0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 0
 893              		@ frame_needed = 0, uses_anonymous_args = 0
 894              		@ link register save eliminated.
 110:src/menu.c    **** }
 895              		.loc 1 110 3 view .LVU258
 110:src/menu.c    **** }
 896              		.loc 1 110 10 is_stmt 0 view .LVU259
 897 0000 014B     		ldr	r3, .L86
 111:src/menu.c    **** 
 898              		.loc 1 111 1 view .LVU260
 899 0002 1868     		ldr	r0, [r3]
 900 0004 7047     		bx	lr
 901              	.L87:
 902 0006 00BF     		.align	2
 903              	.L86:
 904 0008 00000000 		.word	.LANCHOR1
 905              		.cfi_endproc
 906              	.LFE9:
 908              		.section	.text.get_last_menu,"ax",%progbits
 909              		.align	1
 910              		.p2align 2,,3
 911              		.global	get_last_menu
 912              		.syntax unified
 913              		.thumb
 914              		.thumb_func
 915              		.fpu fpv4-sp-d16
 917              	get_last_menu:
 918              	.LFB10:
 113:src/menu.c    ****   return last_menu;
 919              		.loc 1 113 22 is_stmt 1 view -0
 920              		.cfi_startproc
 921              		@ args = 0, pretend = 0, frame = 0
 922              		@ frame_needed = 0, uses_anonymous_args = 0
 923              		@ link register save eliminated.
 114:src/menu.c    **** }
 924              		.loc 1 114 3 view .LVU262
 114:src/menu.c    **** }
 925              		.loc 1 114 10 is_stmt 0 view .LVU263
 926 0000 014B     		ldr	r3, .L89
 115:src/menu.c    **** 
 927              		.loc 1 115 1 view .LVU264
 928 0002 1868     		ldr	r0, [r3]
ARM GAS  /tmp/cc0ERj20.s 			page 29


 929 0004 7047     		bx	lr
 930              	.L90:
 931 0006 00BF     		.align	2
 932              	.L89:
 933 0008 00000000 		.word	.LANCHOR3
 934              		.cfi_endproc
 935              	.LFE10:
 937              		.section	.text.set_last_menu,"ax",%progbits
 938              		.align	1
 939              		.p2align 2,,3
 940              		.global	set_last_menu
 941              		.syntax unified
 942              		.thumb
 943              		.thumb_func
 944              		.fpu fpv4-sp-d16
 946              	set_last_menu:
 947              	.LFB12:
 121:src/menu.c    ****   set_menu (last_menu);
 948              		.loc 1 121 23 is_stmt 1 view -0
 949              		.cfi_startproc
 950              		@ args = 0, pretend = 0, frame = 0
 951              		@ frame_needed = 0, uses_anonymous_args = 0
 952              		@ link register save eliminated.
 122:src/menu.c    **** }
 953              		.loc 1 122 3 view .LVU266
 954              	.LBB73:
 955              	.LBB74:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 956              		.loc 1 86 7 is_stmt 0 view .LVU267
 957 0000 074A     		ldr	r2, .L102
 958              	.LBE74:
 959              	.LBE73:
 122:src/menu.c    **** }
 960              		.loc 1 122 3 view .LVU268
 961 0002 0848     		ldr	r0, .L102+4
 962              	.LBB77:
 963              	.LBB75:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 964              		.loc 1 86 7 view .LVU269
 965 0004 1368     		ldr	r3, [r2]
 966              	.LBE75:
 967              	.LBE77:
 122:src/menu.c    **** }
 968              		.loc 1 122 3 view .LVU270
 969 0006 0168     		ldr	r1, [r0]
 970              	.LVL60:
 971              	.LBB78:
 972              	.LBI73:
  85:src/menu.c    ****   int m = current_menu;
 973              		.loc 1 85 6 is_stmt 1 view .LVU271
 974              	.LBB76:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 975              		.loc 1 86 3 view .LVU272
  87:src/menu.c    ****     current_menu = default_menu;
 976              		.loc 1 87 3 view .LVU273
  87:src/menu.c    ****     current_menu = default_menu;
 977              		.loc 1 87 6 is_stmt 0 view .LVU274
ARM GAS  /tmp/cc0ERj20.s 			page 30


 978 0008 9942     		cmp	r1, r3
  88:src/menu.c    ****   }
 979              		.loc 1 88 5 is_stmt 1 view .LVU275
  88:src/menu.c    ****   }
 980              		.loc 1 88 18 is_stmt 0 view .LVU276
 981 000a 04BF     		itt	eq
 982 000c 0649     		ldreq	r1, .L102+8
 983              	.LVL61:
  88:src/menu.c    ****   }
 984              		.loc 1 88 18 view .LVU277
 985 000e 0968     		ldreq	r1, [r1]
  90:src/menu.c    ****     current_menu = last_menu;
 986              		.loc 1 90 8 is_stmt 1 view .LVU278
  94:src/menu.c    ****   }
 987              		.loc 1 94 18 is_stmt 0 view .LVU279
 988 0010 1160     		str	r1, [r2]
  96:src/menu.c    **** }
 989              		.loc 1 96 3 is_stmt 1 view .LVU280
  96:src/menu.c    **** }
 990              		.loc 1 96 6 is_stmt 0 view .LVU281
 991 0012 092B     		cmp	r3, #9
 992 0014 02D0     		beq	.L91
  96:src/menu.c    **** }
 993              		.loc 1 96 17 view .LVU282
 994 0016 102B     		cmp	r3, #16
  96:src/menu.c    **** }
 995              		.loc 1 96 32 is_stmt 1 view .LVU283
  96:src/menu.c    **** }
 996              		.loc 1 96 42 is_stmt 0 view .LVU284
 997 0018 18BF     		it	ne
 998 001a 0360     		strne	r3, [r0]
 999              	.LVL62:
 1000              	.L91:
  96:src/menu.c    **** }
 1001              		.loc 1 96 42 view .LVU285
 1002              	.LBE76:
 1003              	.LBE78:
 123:src/menu.c    **** 
 1004              		.loc 1 123 1 view .LVU286
 1005 001c 7047     		bx	lr
 1006              	.L103:
 1007 001e 00BF     		.align	2
 1008              	.L102:
 1009 0020 00000000 		.word	.LANCHOR1
 1010 0024 00000000 		.word	.LANCHOR3
 1011 0028 00000000 		.word	.LANCHOR2
 1012              		.cfi_endproc
 1013              	.LFE12:
 1015              		.section	.text.mdot,"ax",%progbits
 1016              		.align	1
 1017              		.p2align 2,,3
 1018              		.global	mdot
 1019              		.syntax unified
 1020              		.thumb
 1021              		.thumb_func
 1022              		.fpu fpv4-sp-d16
 1024              	mdot:
ARM GAS  /tmp/cc0ERj20.s 			page 31


 1025              	.LVL63:
 1026              	.LFB14:
 438:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1027              		.loc 1 438 40 is_stmt 1 view -0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 0
 1030              		@ frame_needed = 0, uses_anonymous_args = 0
 1031              		@ link register save eliminated.
 439:src/menu.c    ****   if (on) {
 1032              		.loc 1 439 3 view .LVU288
 439:src/menu.c    ****   if (on) {
 1033              		.loc 1 439 6 is_stmt 0 view .LVU289
 1034 0000 C728     		cmp	r0, #199
 1035 0002 1AD8     		bhi	.L108
 1036              	.LVL64:
 1037              	.LBB81:
 1038              	.LBI81:
 438:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1039              		.loc 1 438 6 is_stmt 1 view .LVU290
 1040              	.LBB82:
 440:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1041              		.loc 1 440 3 view .LVU291
 1042              	.LBE82:
 1043              	.LBE81:
 438:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1044              		.loc 1 438 40 is_stmt 0 view .LVU292
 1045 0004 10B4     		push	{r4}
 1046              		.cfi_def_cfa_offset 4
 1047              		.cfi_offset 4, -4
 1048              	.LBB85:
 1049              	.LBB83:
 440:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1050              		.loc 1 440 6 view .LVU293
 1051 0006 63B9     		cbnz	r3, .L111
 1052              		.loc 1 444 5 is_stmt 1 view .LVU294
 1053              		.loc 1 444 17 is_stmt 0 view .LVU295
 1054 0008 0C4B     		ldr	r3, .L112
 1055              	.LVL65:
 1056              		.loc 1 444 17 view .LVU296
 1057 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1058              	.LVL66:
 1059              		.loc 1 444 25 view .LVU297
 1060 000e 0124     		movs	r4, #1
 1061              		.loc 1 444 17 view .LVU298
 1062 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1063              		.loc 1 444 25 view .LVU299
 1064 0012 04FA01F1 		lsl	r1, r4, r1
 1065              	.LVL67:
 1066              		.loc 1 444 17 view .LVU300
 1067 0016 23EA0101 		bic	r1, r3, r1
 1068 001a 8154     		strb	r1, [r0, r2]
 1069              	.LVL68:
 1070              		.loc 1 444 17 view .LVU301
 1071              	.LBE83:
 1072              	.LBE85:
 445:src/menu.c    ****   }
 446:src/menu.c    **** }
ARM GAS  /tmp/cc0ERj20.s 			page 32


 1073              		.loc 1 446 1 view .LVU302
 1074 001c 5DF8044B 		ldr	r4, [sp], #4
 1075              		.cfi_remember_state
 1076              		.cfi_restore 4
 1077              		.cfi_def_cfa_offset 0
 1078 0020 7047     		bx	lr
 1079              	.LVL69:
 1080              	.L111:
 1081              		.cfi_restore_state
 1082              	.LBB86:
 1083              	.LBB84:
 441:src/menu.c    ****   }
 1084              		.loc 1 441 5 is_stmt 1 view .LVU303
 441:src/menu.c    ****   }
 1085              		.loc 1 441 17 is_stmt 0 view .LVU304
 1086 0022 064B     		ldr	r3, .L112
 1087              	.LVL70:
 441:src/menu.c    ****   }
 1088              		.loc 1 441 17 view .LVU305
 1089 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1090              	.LVL71:
 441:src/menu.c    ****   }
 1091              		.loc 1 441 24 view .LVU306
 1092 0028 0124     		movs	r4, #1
 441:src/menu.c    ****   }
 1093              		.loc 1 441 17 view .LVU307
 1094 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 441:src/menu.c    ****   }
 1095              		.loc 1 441 24 view .LVU308
 1096 002c 04FA01F1 		lsl	r1, r4, r1
 1097              	.LVL72:
 441:src/menu.c    ****   }
 1098              		.loc 1 441 17 view .LVU309
 1099 0030 1943     		orrs	r1, r1, r3
 1100 0032 8154     		strb	r1, [r0, r2]
 1101              	.LBE84:
 1102              	.LBE86:
 1103              		.loc 1 446 1 view .LVU310
 1104 0034 5DF8044B 		ldr	r4, [sp], #4
 1105              		.cfi_restore 4
 1106              		.cfi_def_cfa_offset 0
 1107 0038 7047     		bx	lr
 1108              	.LVL73:
 1109              	.L108:
 1110              		.loc 1 446 1 view .LVU311
 1111 003a 7047     		bx	lr
 1112              	.L113:
 1113              		.align	2
 1114              	.L112:
 1115 003c 00000000 		.word	.LANCHOR0
 1116              		.cfi_endproc
 1117              	.LFE14:
 1119              		.section	.text.display_menu,"ax",%progbits
 1120              		.align	1
 1121              		.p2align 2,,3
 1122              		.global	display_menu
 1123              		.syntax unified
ARM GAS  /tmp/cc0ERj20.s 			page 33


 1124              		.thumb
 1125              		.thumb_func
 1126              		.fpu fpv4-sp-d16
 1128              	display_menu:
 1129              	.LVL74:
 1130              	.LFB15:
 447:src/menu.c    **** 
 448:src/menu.c    **** 
 449:src/menu.c    **** void display_menu (int current_menu) {
 1131              		.loc 1 449 38 is_stmt 1 view -0
 1132              		.cfi_startproc
 1133              		@ args = 0, pretend = 0, frame = 0
 1134              		@ frame_needed = 0, uses_anonymous_args = 0
 450:src/menu.c    ****   int len = 0;
 1135              		.loc 1 450 3 view .LVU313
 451:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1136              		.loc 1 451 3 view .LVU314
 449:src/menu.c    ****   int len = 0;
 1137              		.loc 1 449 38 is_stmt 0 view .LVU315
 1138 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1139              		.cfi_def_cfa_offset 36
 1140              		.cfi_offset 4, -36
 1141              		.cfi_offset 5, -32
 1142              		.cfi_offset 6, -28
 1143              		.cfi_offset 7, -24
 1144              		.cfi_offset 8, -20
 1145              		.cfi_offset 9, -16
 1146              		.cfi_offset 10, -12
 1147              		.cfi_offset 11, -8
 1148              		.cfi_offset 14, -4
 1149 0004 83B0     		sub	sp, sp, #12
 1150              		.cfi_def_cfa_offset 48
 1151              		.loc 1 451 3 view .LVU316
 1152 0006 0024     		movs	r4, #0
 1153 0008 514F     		ldr	r7, .L136
 1154 000a 0094     		str	r4, [sp]
 1155 000c 3423     		movs	r3, #52
 1156 000e 4FF4C872 		mov	r2, #400
 1157 0012 BC21     		movs	r1, #188
 449:src/menu.c    ****   int len = 0;
 1158              		.loc 1 449 38 view .LVU317
 1159 0014 0646     		mov	r6, r0
 1160              		.loc 1 451 3 view .LVU318
 1161 0016 2046     		mov	r0, r4
 1162              	.LVL75:
 1163              		.loc 1 451 3 view .LVU319
 1164 0018 B847     		blx	r7
 1165              	.LVL76:
 452:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1166              		.loc 1 452 3 is_stmt 1 view .LVU320
 1167 001a 4E4D     		ldr	r5, .L136+4
 1168 001c FF23     		movs	r3, #255
 1169 001e 0093     		str	r3, [sp]
 1170 0020 4FF4C872 		mov	r2, #400
 1171 0024 0123     		movs	r3, #1
 1172 0026 BC21     		movs	r1, #188
 1173 0028 2046     		mov	r0, r4
ARM GAS  /tmp/cc0ERj20.s 			page 34


 1174 002a B847     		blx	r7
 1175              	.LVL77:
 453:src/menu.c    ****   //Clear previous menu
 454:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1176              		.loc 1 454 3 view .LVU321
 1177              	.LBB87:
 1178              		.loc 1 454 8 view .LVU322
 1179              		.loc 1 454 21 view .LVU323
 455:src/menu.c    ****     mdots[col][0] = 0;
 1180              		.loc 1 455 19 is_stmt 0 view .LVU324
 1181 002c 2246     		mov	r2, r4
 1182 002e 05F5C871 		add	r1, r5, #400
 1183              	.LBE87:
 452:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1184              		.loc 1 452 3 view .LVU325
 1185 0032 2B46     		mov	r3, r5
 1186              	.LVL78:
 1187              	.L115:
 1188              	.LBB88:
 1189              		.loc 1 455 5 is_stmt 1 discriminator 3 view .LVU326
 1190              		.loc 1 455 19 is_stmt 0 discriminator 3 view .LVU327
 1191 0034 1A70     		strb	r2, [r3]
 456:src/menu.c    ****     mdots[col][1] = 0;
 1192              		.loc 1 456 5 is_stmt 1 discriminator 3 view .LVU328
 1193              		.loc 1 456 19 is_stmt 0 discriminator 3 view .LVU329
 1194 0036 5A70     		strb	r2, [r3, #1]
 454:src/menu.c    ****     mdots[col][0] = 0;
 1195              		.loc 1 454 32 is_stmt 1 discriminator 3 view .LVU330
 454:src/menu.c    ****     mdots[col][0] = 0;
 1196              		.loc 1 454 21 discriminator 3 view .LVU331
 1197 0038 0233     		adds	r3, r3, #2
 454:src/menu.c    ****     mdots[col][0] = 0;
 1198              		.loc 1 454 3 is_stmt 0 discriminator 3 view .LVU332
 1199 003a 9942     		cmp	r1, r3
 1200 003c FAD1     		bne	.L115
 1201 003e 464B     		ldr	r3, .L136+8
 1202 0040 DFF81C81 		ldr	r8, .L136+16
 1203 0044 D024     		movs	r4, #208
 1204 0046 04FB0634 		mla	r4, r4, r6, r3
 1205 004a 2034     		adds	r4, r4, #32
 454:src/menu.c    ****     mdots[col][0] = 0;
 1206              		.loc 1 454 3 view .LVU333
 1207 004c 0027     		movs	r7, #0
 1208 004e 25E0     		b	.L118
 1209              	.LVL79:
 1210              	.L116:
 454:src/menu.c    ****     mdots[col][0] = 0;
 1211              		.loc 1 454 3 view .LVU334
 1212              	.LBE88:
 1213              	.LBB89:
 457:src/menu.c    ****   }
 458:src/menu.c    **** 
 459:src/menu.c    ****   // Draw menu items
 460:src/menu.c    ****   // 
 461:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 462:src/menu.c    ****     /*
 463:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
ARM GAS  /tmp/cc0ERj20.s 			page 35


 464:src/menu.c    ****     */
 465:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 466:src/menu.c    ****     // Unshifted first
 467:src/menu.c    ****     if (current_menu == USER_MENU) {
 468:src/menu.c    ****       len = pixel_length (UserMenu.keys[item].unshifted_label, 0); // 0 means not small font
 469:src/menu.c    ****       set_menu_label ( UserMenu.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 470:src/menu.c    ****       // Now shifted ...	
 471:src/menu.c    ****       len = pixel_length (UserMenu.keys[item].shifted_label, 0); // 0 means not small font
 472:src/menu.c    ****       len = item*32 + (32-len)/2;
 473:src/menu.c    ****       if (len<0) len = 0;
 474:src/menu.c    ****       if (len>199) len = 199;
 475:src/menu.c    ****       set_menu_label ( UserMenu.keys[item].shifted_label, 0, len, 1 );
 476:src/menu.c    ****     }
 477:src/menu.c    ****     else {
 478:src/menu.c    ****       len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small 
 1214              		.loc 1 478 13 view .LVU335
 1215 0050 FFF7FEFF 		bl	pixel_length
 1216              	.LVL80:
 479:src/menu.c    ****       set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0
 1217              		.loc 1 479 7 is_stmt 1 view .LVU336
 1218              		.loc 1 479 89 is_stmt 0 view .LVU337
 1219 0054 C0F12000 		rsb	r0, r0, #32
 1220              	.LVL81:
 1221              		.loc 1 479 95 view .LVU338
 1222 0058 00EBD070 		add	r0, r0, r0, lsr #31
 1223              		.loc 1 479 7 view .LVU339
 1224 005c 07EB6001 		add	r1, r7, r0, asr #1
 1225 0060 0022     		movs	r2, #0
 1226 0062 2046     		mov	r0, r4
 1227 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1228              	.LVL82:
 480:src/menu.c    ****       // Now shifted ...	
 481:src/menu.c    ****       len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small fo
 1229              		.loc 1 481 7 is_stmt 1 view .LVU340
 1230              		.loc 1 481 13 is_stmt 0 view .LVU341
 1231 0068 0021     		movs	r1, #0
 1232 006a 4846     		mov	r0, r9
 1233 006c FFF7FEFF 		bl	pixel_length
 1234              	.LVL83:
 482:src/menu.c    ****       len = item*32 + (32-len)/2;
 1235              		.loc 1 482 7 is_stmt 1 view .LVU342
 1236              		.loc 1 482 26 is_stmt 0 view .LVU343
 1237 0070 C0F12001 		rsb	r1, r0, #32
 1238              		.loc 1 482 31 view .LVU344
 1239 0074 01EBD171 		add	r1, r1, r1, lsr #31
 1240              	.LVL84:
 483:src/menu.c    ****       if (len<0) len = 0;
 1241              		.loc 1 483 7 is_stmt 1 view .LVU345
 482:src/menu.c    ****       len = item*32 + (32-len)/2;
 1242              		.loc 1 482 11 is_stmt 0 view .LVU346
 1243 0078 07EB6101 		add	r1, r7, r1, asr #1
 1244              	.LVL85:
 1245              	.L134:
 482:src/menu.c    ****       len = item*32 + (32-len)/2;
 1246              		.loc 1 482 11 view .LVU347
 1247 007c C729     		cmp	r1, #199
 1248 007e A8BF     		it	ge
ARM GAS  /tmp/cc0ERj20.s 			page 36


 1249 0080 C721     		movge	r1, #199
 1250              	.LVL86:
 484:src/menu.c    ****       if (len>199) len = 199;
 485:src/menu.c    ****       set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 1251              		.loc 1 485 7 is_stmt 1 view .LVU348
 1252 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1253              	.LVL87:
 1254              		.loc 1 485 7 is_stmt 0 view .LVU349
 1255 0086 4846     		mov	r0, r9
 1256 0088 0122     		movs	r2, #1
 1257 008a 2037     		adds	r7, r7, #32
 1258 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1259              	.LVL88:
 461:src/menu.c    ****     /*
 1260              		.loc 1 461 32 is_stmt 1 view .LVU350
 461:src/menu.c    ****     /*
 1261              		.loc 1 461 22 view .LVU351
 461:src/menu.c    ****     /*
 1262              		.loc 1 461 3 is_stmt 0 view .LVU352
 1263 0090 C02F     		cmp	r7, #192
 1264 0092 08F12008 		add	r8, r8, #32
 1265 0096 04F12004 		add	r4, r4, #32
 1266 009a 20D0     		beq	.L135
 1267              	.L118:
 467:src/menu.c    ****       len = pixel_length (UserMenu.keys[item].unshifted_label, 0); // 0 means not small font
 1268              		.loc 1 467 5 is_stmt 1 view .LVU353
 478:src/menu.c    ****       set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0
 1269              		.loc 1 478 7 view .LVU354
 467:src/menu.c    ****       len = pixel_length (UserMenu.keys[item].unshifted_label, 0); // 0 means not small font
 1270              		.loc 1 467 8 is_stmt 0 view .LVU355
 1271 009c 632E     		cmp	r6, #99
 478:src/menu.c    ****       set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0
 1272              		.loc 1 478 13 view .LVU356
 1273 009e 4FF00001 		mov	r1, #0
 1274 00a2 2046     		mov	r0, r4
 1275 00a4 04F10809 		add	r9, r4, #8
 467:src/menu.c    ****       len = pixel_length (UserMenu.keys[item].unshifted_label, 0); // 0 means not small font
 1276              		.loc 1 467 8 view .LVU357
 1277 00a8 D2D1     		bne	.L116
 468:src/menu.c    ****       set_menu_label ( UserMenu.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1278              		.loc 1 468 7 is_stmt 1 view .LVU358
 468:src/menu.c    ****       set_menu_label ( UserMenu.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1279              		.loc 1 468 13 is_stmt 0 view .LVU359
 1280 00aa 4046     		mov	r0, r8
 1281 00ac FFF7FEFF 		bl	pixel_length
 1282              	.LVL89:
 469:src/menu.c    ****       // Now shifted ...	
 1283              		.loc 1 469 7 is_stmt 1 view .LVU360
 469:src/menu.c    ****       // Now shifted ...	
 1284              		.loc 1 469 78 is_stmt 0 view .LVU361
 1285 00b0 C0F12000 		rsb	r0, r0, #32
 1286              	.LVL90:
 469:src/menu.c    ****       // Now shifted ...	
 1287              		.loc 1 469 84 view .LVU362
 1288 00b4 00EBD070 		add	r0, r0, r0, lsr #31
 469:src/menu.c    ****       // Now shifted ...	
 1289              		.loc 1 469 7 view .LVU363
ARM GAS  /tmp/cc0ERj20.s 			page 37


 1290 00b8 07EB6001 		add	r1, r7, r0, asr #1
 1291 00bc 0022     		movs	r2, #0
 1292 00be 4046     		mov	r0, r8
 1293 00c0 08F10809 		add	r9, r8, #8
 1294 00c4 FFF7FEFF 		bl	set_menu_label.constprop.0
 1295              	.LVL91:
 471:src/menu.c    ****       len = item*32 + (32-len)/2;
 1296              		.loc 1 471 7 is_stmt 1 view .LVU364
 471:src/menu.c    ****       len = item*32 + (32-len)/2;
 1297              		.loc 1 471 13 is_stmt 0 view .LVU365
 1298 00c8 0021     		movs	r1, #0
 1299 00ca 4846     		mov	r0, r9
 1300 00cc FFF7FEFF 		bl	pixel_length
 1301              	.LVL92:
 472:src/menu.c    ****       if (len<0) len = 0;
 1302              		.loc 1 472 7 is_stmt 1 view .LVU366
 472:src/menu.c    ****       if (len<0) len = 0;
 1303              		.loc 1 472 26 is_stmt 0 view .LVU367
 1304 00d0 C0F12000 		rsb	r0, r0, #32
 1305              	.LVL93:
 472:src/menu.c    ****       if (len<0) len = 0;
 1306              		.loc 1 472 31 view .LVU368
 1307 00d4 00EBD070 		add	r0, r0, r0, lsr #31
 1308              	.LVL94:
 473:src/menu.c    ****       if (len>199) len = 199;
 1309              		.loc 1 473 7 is_stmt 1 view .LVU369
 472:src/menu.c    ****       if (len<0) len = 0;
 1310              		.loc 1 472 11 is_stmt 0 view .LVU370
 1311 00d8 07EB6001 		add	r1, r7, r0, asr #1
 1312              	.LVL95:
 472:src/menu.c    ****       if (len<0) len = 0;
 1313              		.loc 1 472 11 view .LVU371
 1314 00dc CEE7     		b	.L134
 1315              	.LVL96:
 1316              	.L135:
 472:src/menu.c    ****       if (len<0) len = 0;
 1317              		.loc 1 472 11 view .LVU372
 1318 00de 1F4E     		ldr	r6, .L136+12
 1319              	.LVL97:
 472:src/menu.c    ****       if (len<0) len = 0;
 1320              		.loc 1 472 11 view .LVU373
 1321              	.LBE89:
 1322              	.LBB90:
 1323              	.LBB91:
 486:src/menu.c    ****     }      
 487:src/menu.c    ****   }
 488:src/menu.c    **** 
 489:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 490:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 491:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 492:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 493:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1324              		.loc 1 493 2 view .LVU374
 1325 00e0 DFF86C90 		ldr	r9, .L136
 1326 00e4 C5F1040A 		rsb	r10, r5, #4
 1327 00e8 06F5C47B 		add	fp, r6, #392
 1328              	.LBE91:
ARM GAS  /tmp/cc0ERj20.s 			page 38


 1329              	.LBE90:
 1330              	.LBB93:
 461:src/menu.c    ****     /*
 1331              		.loc 1 461 3 view .LVU375
 1332 00ec 771E     		subs	r7, r6, #1
 1333              	.LBE93:
 1334              	.LBB94:
 1335              	.LBB92:
 1336              		.loc 1 493 2 view .LVU376
 1337 00ee 4FF0FF08 		mov	r8, #255
 1338              	.L119:
 1339              	.LVL98:
 490:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1340              		.loc 1 490 23 is_stmt 1 view .LVU377
 1341 00f2 0AEB0705 		add	r5, r10, r7
 490:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1342              		.loc 1 490 14 is_stmt 0 view .LVU378
 1343 00f6 0024     		movs	r4, #0
 1344              	.LVL99:
 1345              	.L122:
 491:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1346              		.loc 1 491 7 is_stmt 1 view .LVU379
 1347              		.loc 1 493 2 view .LVU380
 491:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1348              		.loc 1 491 22 is_stmt 0 view .LVU381
 1349 00f8 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 491:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1350              		.loc 1 491 40 view .LVU382
 1351 00fc 2241     		asrs	r2, r2, r4
 1352              		.loc 1 493 2 view .LVU383
 1353 00fe A4EB8401 		sub	r1, r4, r4, lsl #2
 1354 0102 0323     		movs	r3, #3
 491:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1355              		.loc 1 491 10 view .LVU384
 1356 0104 12F0010F 		tst	r2, #1
 1357              		.loc 1 493 2 view .LVU385
 1358 0108 01F1E901 		add	r1, r1, #233
 1359 010c 1A46     		mov	r2, r3
 1360 010e 2846     		mov	r0, r5
 491:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1361              		.loc 1 491 10 view .LVU386
 1362 0110 02D0     		beq	.L120
 1363              		.loc 1 493 2 view .LVU387
 1364 0112 CDF80080 		str	r8, [sp]
 1365 0116 C847     		blx	r9
 1366              	.LVL100:
 1367              	.L120:
 494:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1368              		.loc 1 494 7 is_stmt 1 view .LVU388
 495:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 496:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1369              		.loc 1 496 2 view .LVU389
 494:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1370              		.loc 1 494 22 is_stmt 0 view .LVU390
 1371 0118 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 494:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1372              		.loc 1 494 40 view .LVU391
ARM GAS  /tmp/cc0ERj20.s 			page 39


 1373 011a 2241     		asrs	r2, r2, r4
 1374              		.loc 1 496 2 view .LVU392
 1375 011c A4EB8401 		sub	r1, r4, r4, lsl #2
 1376 0120 0323     		movs	r3, #3
 494:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1377              		.loc 1 494 10 view .LVU393
 1378 0122 12F0010F 		tst	r2, #1
 1379              		.loc 1 496 2 view .LVU394
 1380 0126 01F1D001 		add	r1, r1, #208
 1381 012a 1A46     		mov	r2, r3
 1382 012c 04F10104 		add	r4, r4, #1
 1383              	.LVL101:
 1384              		.loc 1 496 2 view .LVU395
 1385 0130 2846     		mov	r0, r5
 494:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1386              		.loc 1 494 10 view .LVU396
 1387 0132 02D0     		beq	.L121
 1388              		.loc 1 496 2 view .LVU397
 1389 0134 CDF80080 		str	r8, [sp]
 1390 0138 C847     		blx	r9
 1391              	.LVL102:
 1392              	.L121:
 490:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1393              		.loc 1 490 32 is_stmt 1 discriminator 2 view .LVU398
 490:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1394              		.loc 1 490 23 discriminator 2 view .LVU399
 490:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1395              		.loc 1 490 5 is_stmt 0 discriminator 2 view .LVU400
 1396 013a 062C     		cmp	r4, #6
 1397 013c DCD1     		bne	.L122
 1398              	.LBE92:
 489:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1399              		.loc 1 489 32 is_stmt 1 discriminator 2 view .LVU401
 489:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1400              		.loc 1 489 21 discriminator 2 view .LVU402
 1401 013e 0236     		adds	r6, r6, #2
 489:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1402              		.loc 1 489 3 is_stmt 0 discriminator 2 view .LVU403
 1403 0140 B345     		cmp	fp, r6
 1404 0142 07F10207 		add	r7, r7, #2
 1405 0146 D4D1     		bne	.L119
 1406              	.LBE94:
 497:src/menu.c    ****     }
 498:src/menu.c    ****   }
 499:src/menu.c    **** }
 1407              		.loc 1 499 1 view .LVU404
 1408 0148 03B0     		add	sp, sp, #12
 1409              		.cfi_def_cfa_offset 36
 1410              		@ sp needed
 1411 014a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1412              	.LVL103:
 1413              	.L137:
 1414              		.loc 1 499 1 view .LVU405
 1415 014e 00BF     		.align	2
 1416              	.L136:
 1417 0150 3D020008 		.word	134218301
 1418 0154 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/cc0ERj20.s 			page 40


 1419 0158 00000000 		.word	.LANCHOR5
 1420 015c 01000000 		.word	.LANCHOR0+1
 1421 0160 20000000 		.word	.LANCHOR4+32
 1422              		.cfi_endproc
 1423              	.LFE15:
 1425              		.section	.text.display_current_menu,"ax",%progbits
 1426              		.align	1
 1427              		.p2align 2,,3
 1428              		.global	display_current_menu
 1429              		.syntax unified
 1430              		.thumb
 1431              		.thumb_func
 1432              		.fpu fpv4-sp-d16
 1434              	display_current_menu:
 1435              	.LFB11:
 117:src/menu.c    ****   display_menu (current_menu);
 1436              		.loc 1 117 30 is_stmt 1 view -0
 1437              		.cfi_startproc
 1438              		@ args = 0, pretend = 0, frame = 0
 1439              		@ frame_needed = 0, uses_anonymous_args = 0
 1440              		@ link register save eliminated.
 118:src/menu.c    **** }
 1441              		.loc 1 118 3 view .LVU407
 1442 0000 014B     		ldr	r3, .L139
 1443 0002 1868     		ldr	r0, [r3]
 1444 0004 FFF7FEBF 		b	display_menu
 1445              	.LVL104:
 1446              	.L140:
 1447              		.align	2
 1448              	.L139:
 1449 0008 00000000 		.word	.LANCHOR1
 1450              		.cfi_endproc
 1451              	.LFE11:
 1453              		.section	.text.all_menu_dots,"ax",%progbits
 1454              		.align	1
 1455              		.p2align 2,,3
 1456              		.global	all_menu_dots
 1457              		.syntax unified
 1458              		.thumb
 1459              		.thumb_func
 1460              		.fpu fpv4-sp-d16
 1462              	all_menu_dots:
 1463              	.LFB16:
 500:src/menu.c    **** 
 501:src/menu.c    **** void all_menu_dots () {
 1464              		.loc 1 501 23 view -0
 1465              		.cfi_startproc
 1466              		@ args = 0, pretend = 0, frame = 0
 1467              		@ frame_needed = 0, uses_anonymous_args = 0
 502:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1468              		.loc 1 502 3 view .LVU409
 1469              	.LBB95:
 1470              		.loc 1 502 8 view .LVU410
 1471              	.LVL105:
 1472              		.loc 1 502 21 view .LVU411
 1473              	.LBE95:
 501:src/menu.c    ****   for (int col = 0; col < 200; col++) {
ARM GAS  /tmp/cc0ERj20.s 			page 41


 1474              		.loc 1 501 23 is_stmt 0 view .LVU412
 1475 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1476              		.cfi_def_cfa_offset 20
 1477              		.cfi_offset 4, -20
 1478              		.cfi_offset 5, -16
 1479              		.cfi_offset 6, -12
 1480              		.cfi_offset 7, -8
 1481              		.cfi_offset 14, -4
 1482              	.LBB99:
 1483              	.LBB96:
 503:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 504:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1484              		.loc 1 504 2 view .LVU413
 1485 0002 0D4E     		ldr	r6, .L147
 1486              	.LBE96:
 1487              	.LBE99:
 501:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1488              		.loc 1 501 23 view .LVU414
 1489 0004 83B0     		sub	sp, sp, #12
 1490              		.cfi_def_cfa_offset 32
 501:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1491              		.loc 1 501 23 view .LVU415
 1492 0006 0025     		movs	r5, #0
 1493              	.LBB100:
 1494              	.LBB97:
 1495              		.loc 1 504 2 view .LVU416
 1496 0008 FF27     		movs	r7, #255
 1497              	.LVL106:
 1498              	.L142:
 503:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1499              		.loc 1 503 23 is_stmt 1 view .LVU417
 1500              	.LBE97:
 1501              	.LBE100:
 501:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1502              		.loc 1 501 23 is_stmt 0 view .LVU418
 1503 000a E924     		movs	r4, #233
 1504              	.LVL107:
 1505              	.L143:
 1506              	.LBB101:
 1507              	.LBB98:
 1508              		.loc 1 504 2 is_stmt 1 discriminator 3 view .LVU419
 1509 000c 0323     		movs	r3, #3
 1510 000e 1A46     		mov	r2, r3
 1511 0010 2146     		mov	r1, r4
 1512 0012 2846     		mov	r0, r5
 1513 0014 0097     		str	r7, [sp]
 1514 0016 B047     		blx	r6
 1515              	.LVL108:
 505:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1516              		.loc 1 505 2 discriminator 3 view .LVU420
 1517 0018 0323     		movs	r3, #3
 1518 001a A4F11901 		sub	r1, r4, #25
 1519 001e 0097     		str	r7, [sp]
 1520 0020 1A46     		mov	r2, r3
 1521 0022 2846     		mov	r0, r5
 1522 0024 033C     		subs	r4, r4, #3
 1523 0026 B047     		blx	r6
ARM GAS  /tmp/cc0ERj20.s 			page 42


 1524              	.LVL109:
 503:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1525              		.loc 1 503 32 discriminator 3 view .LVU421
 503:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1526              		.loc 1 503 23 discriminator 3 view .LVU422
 503:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1527              		.loc 1 503 5 is_stmt 0 discriminator 3 view .LVU423
 1528 0028 D72C     		cmp	r4, #215
 1529 002a EFD1     		bne	.L143
 1530              	.LBE98:
 502:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1531              		.loc 1 502 32 is_stmt 1 discriminator 2 view .LVU424
 502:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1532              		.loc 1 502 21 discriminator 2 view .LVU425
 1533 002c 0235     		adds	r5, r5, #2
 502:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1534              		.loc 1 502 3 is_stmt 0 discriminator 2 view .LVU426
 1535 002e B5F5C87F 		cmp	r5, #400
 1536 0032 EAD1     		bne	.L142
 1537              	.LBE101:
 506:src/menu.c    ****     }
 507:src/menu.c    ****   }
 508:src/menu.c    **** }  
 1538              		.loc 1 508 1 view .LVU427
 1539 0034 03B0     		add	sp, sp, #12
 1540              		.cfi_def_cfa_offset 20
 1541              		@ sp needed
 1542 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1543              	.L148:
 1544              		.align	2
 1545              	.L147:
 1546 0038 3D020008 		.word	134218301
 1547              		.cfi_endproc
 1548              	.LFE16:
 1550              		.section	.text.build_user_menu,"ax",%progbits
 1551              		.align	1
 1552              		.p2align 2,,3
 1553              		.global	build_user_menu
 1554              		.syntax unified
 1555              		.thumb
 1556              		.thumb_func
 1557              		.fpu fpv4-sp-d16
 1559              	build_user_menu:
 1560              	.LFB17:
 509:src/menu.c    **** 
 510:src/menu.c    **** void build_user_menu(void)
 511:src/menu.c    **** {
 1561              		.loc 1 511 1 is_stmt 1 view -0
 1562              		.cfi_startproc
 1563              		@ args = 0, pretend = 0, frame = 16
 1564              		@ frame_needed = 0, uses_anonymous_args = 0
 512:src/menu.c    ****   // find the label 'MNU'
 513:src/menu.c    ****   const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 1565              		.loc 1 513 3 view .LVU429
 1566              	.LVL110:
 514:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 1567              		.loc 1 514 3 view .LVU430
ARM GAS  /tmp/cc0ERj20.s 			page 43


 511:src/menu.c    ****   // find the label 'MNU'
 1568              		.loc 1 511 1 is_stmt 0 view .LVU431
 1569 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1570              		.cfi_def_cfa_offset 36
 1571              		.cfi_offset 4, -36
 1572              		.cfi_offset 5, -32
 1573              		.cfi_offset 6, -28
 1574              		.cfi_offset 7, -24
 1575              		.cfi_offset 8, -20
 1576              		.cfi_offset 9, -16
 1577              		.cfi_offset 10, -12
 1578              		.cfi_offset 11, -8
 1579              		.cfi_offset 14, -4
 1580              		.loc 1 514 21 view .LVU432
 1581 0004 0021     		movs	r1, #0
 1582 0006 4748     		ldr	r0, .L188
 1583 0008 DFF82881 		ldr	r8, .L188+16
 511:src/menu.c    ****   // find the label 'MNU'
 1584              		.loc 1 511 1 view .LVU433
 1585 000c 85B0     		sub	sp, sp, #20
 1586              		.cfi_def_cfa_offset 56
 1587              		.loc 1 514 21 view .LVU434
 1588 000e FFF7FEFF 		bl	findmultilbl
 1589              	.LVL111:
 1590 0012 4346     		mov	r3, r8
 1591 0014 0446     		mov	r4, r0
 1592              	.LVL112:
 515:src/menu.c    ****   int i=0;
 1593              		.loc 1 515 3 is_stmt 1 view .LVU435
 516:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 1594              		.loc 1 516 3 view .LVU436
 1595              	.LBB102:
 1596              		.loc 1 516 8 view .LVU437
 1597              		.loc 1 516 19 view .LVU438
 517:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1598              		.loc 1 517 43 is_stmt 0 view .LVU439
 1599 0016 0022     		movs	r2, #0
 1600 0018 08F1C000 		add	r0, r8, #192
 1601              	.LVL113:
 518:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 519:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1602              		.loc 1 519 42 view .LVU440
 1603 001c 2E21     		movs	r1, #46
 1604              	.LVL114:
 1605              	.L150:
 517:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1606              		.loc 1 517 7 is_stmt 1 discriminator 3 view .LVU441
 517:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1607              		.loc 1 517 43 is_stmt 0 discriminator 3 view .LVU442
 1608 001e 83F82020 		strb	r2, [r3, #32]
 518:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1609              		.loc 1 518 7 is_stmt 1 discriminator 3 view .LVU443
 518:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1610              		.loc 1 518 40 is_stmt 0 discriminator 3 view .LVU444
 1611 0022 5A61     		str	r2, [r3, #20]
 1612              		.loc 1 519 7 is_stmt 1 discriminator 3 view .LVU445
 1613              		.loc 1 519 42 is_stmt 0 discriminator 3 view .LVU446
ARM GAS  /tmp/cc0ERj20.s 			page 44


 1614 0024 1974     		strb	r1, [r3, #16]
 520:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1615              		.loc 1 520 7 is_stmt 1 discriminator 3 view .LVU447
 1616              		.loc 1 520 41 is_stmt 0 discriminator 3 view .LVU448
 1617 0026 83F82820 		strb	r2, [r3, #40]
 521:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1618              		.loc 1 521 7 is_stmt 1 discriminator 3 view .LVU449
 1619              		.loc 1 521 38 is_stmt 0 discriminator 3 view .LVU450
 1620 002a DA61     		str	r2, [r3, #28]
 522:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1621              		.loc 1 522 7 is_stmt 1 discriminator 3 view .LVU451
 1622              		.loc 1 522 40 is_stmt 0 discriminator 3 view .LVU452
 1623 002c 1976     		strb	r1, [r3, #24]
 516:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1624              		.loc 1 516 24 is_stmt 1 discriminator 3 view .LVU453
 516:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1625              		.loc 1 516 19 discriminator 3 view .LVU454
 1626 002e 2033     		adds	r3, r3, #32
 516:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1627              		.loc 1 516 3 is_stmt 0 discriminator 3 view .LVU455
 1628 0030 8342     		cmp	r3, r0
 1629 0032 F4D1     		bne	.L150
 516:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1630              		.loc 1 516 3 discriminator 3 view .LVU456
 1631              	.LBE102:
 523:src/menu.c    ****   }
 524:src/menu.c    ****   while (pc && i < 12) {
 1632              		.loc 1 524 9 is_stmt 1 view .LVU457
 1633 0034 002C     		cmp	r4, #0
 1634 0036 3FD0     		beq	.L149
 1635 0038 3B4D     		ldr	r5, .L188+4
 1636              	.LBB103:
 525:src/menu.c    ****     s_opcode op;
 526:src/menu.c    ****     char buf1[16];
 527:src/menu.c    **** 
 528:src/menu.c    ****     pc = do_inc(pc, 0);
 529:src/menu.c    ****     op = (s_opcode) getprog(pc);
 530:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 531:src/menu.c    ****       break;
 532:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 533:src/menu.c    ****       if (i==4) {
 534:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 535:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 536:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 1637              		.loc 1 536 2 is_stmt 0 view .LVU458
 1638 003a DFF8FC90 		ldr	r9, .L188+20
 537:src/menu.c    ****       }
 538:src/menu.c    ****       else if (i==5) {
 539:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 540:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 541:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1639              		.loc 1 541 2 view .LVU459
 1640 003e 05F1A00A 		add	r10, r5, #160
 1641              	.LBE103:
 524:src/menu.c    ****     s_opcode op;
 1642              		.loc 1 524 9 view .LVU460
 1643 0042 0026     		movs	r6, #0
ARM GAS  /tmp/cc0ERj20.s 			page 45


 1644              	.LVL115:
 1645              	.L163:
 1646              	.LBB106:
 525:src/menu.c    ****     s_opcode op;
 1647              		.loc 1 525 5 is_stmt 1 view .LVU461
 526:src/menu.c    **** 
 1648              		.loc 1 526 5 view .LVU462
 528:src/menu.c    ****     op = (s_opcode) getprog(pc);
 1649              		.loc 1 528 5 view .LVU463
 528:src/menu.c    ****     op = (s_opcode) getprog(pc);
 1650              		.loc 1 528 10 is_stmt 0 view .LVU464
 1651 0044 2046     		mov	r0, r4
 1652 0046 0021     		movs	r1, #0
 1653 0048 FFF7FEFF 		bl	do_inc
 1654              	.LVL116:
 1655 004c 0446     		mov	r4, r0
 1656              	.LVL117:
 529:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1657              		.loc 1 529 5 is_stmt 1 view .LVU465
 529:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1658              		.loc 1 529 21 is_stmt 0 view .LVU466
 1659 004e FFF7FEFF 		bl	getprog
 1660              	.LVL118:
 529:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1661              		.loc 1 529 8 view .LVU467
 1662 0052 1FFA80FB 		uxth	fp, r0
 1663              	.LVL119:
 530:src/menu.c    ****       break;
 1664              		.loc 1 530 5 is_stmt 1 view .LVU468
 530:src/menu.c    ****       break;
 1665              		.loc 1 530 8 is_stmt 0 view .LVU469
 1666 0056 BBF59D7F 		cmp	fp, #314
 1667 005a 2DD0     		beq	.L149
 532:src/menu.c    ****       if (i==4) {
 1668              		.loc 1 532 5 is_stmt 1 view .LVU470
 532:src/menu.c    ****       if (i==4) {
 1669              		.loc 1 532 8 is_stmt 0 view .LVU471
 1670 005c BBF5807F 		cmp	fp, #256
 1671 0060 3AD0     		beq	.L185
 542:src/menu.c    ****       }
 543:src/menu.c    ****       i += 1;
 544:src/menu.c    ****       continue;
 545:src/menu.c    ****     }
 546:src/menu.c    ****     if (isDBL(op)) {
 1672              		.loc 1 546 5 is_stmt 1 view .LVU472
 1673 0062 81B2     		uxth	r1, r0
 1674              		.loc 1 546 9 is_stmt 0 view .LVU473
 1675 0064 00F47040 		and	r0, r0, #61440
 1676              		.loc 1 546 8 view .LVU474
 1677 0068 B0F5704F 		cmp	r0, #61440
 1678              		.loc 1 546 9 view .LVU475
 1679 006c 0F46     		mov	r7, r1
 1680              		.loc 1 546 8 view .LVU476
 1681 006e 1DD0     		beq	.L161
 547:src/menu.c    ****       i += 1;
 548:src/menu.c    ****       continue;
 549:src/menu.c    ****     }
ARM GAS  /tmp/cc0ERj20.s 			page 46


 550:src/menu.c    ****     if (isRARG(op)) {
 1682              		.loc 1 550 5 is_stmt 1 view .LVU477
 1683              		.loc 1 550 8 is_stmt 0 view .LVU478
 1684 0070 48B1     		cbz	r0, .L158
 1685              	.LBB104:
 551:src/menu.c    ****       const s_opcode rarg = RARG_CMD(op);
 1686              		.loc 1 551 7 is_stmt 1 view .LVU479
 1687              		.loc 1 551 29 is_stmt 0 view .LVU480
 1688 0072 4FEA1B22 		lsr	r2, fp, #8
 1689 0076 203A     		subs	r2, r2, #32
 1690 0078 D2B2     		uxtb	r2, r2
 1691              	.LVL120:
 552:src/menu.c    ****       if (rarg != RARG_ALPHA && rarg != RARG_CONV
 1692              		.loc 1 552 7 is_stmt 1 view .LVU481
 1693              		.loc 1 552 10 is_stmt 0 view .LVU482
 1694 007a 242A     		cmp	r2, #36
 1695 007c 03D0     		beq	.L158
 1696              		.loc 1 552 30 discriminator 1 view .LVU483
 1697 007e 6C2A     		cmp	r2, #108
 1698 0080 01D0     		beq	.L158
 553:src/menu.c    **** 	  && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX)
 1699              		.loc 1 553 4 view .LVU484
 1700 0082 012A     		cmp	r2, #1
 1701 0084 3AD8     		bhi	.L186
 1702              	.LVL121:
 1703              	.L158:
 1704              		.loc 1 553 4 view .LVU485
 1705              	.LBE104:
 554:src/menu.c    **** 	op = op & 0xff00;	// remove argument
 555:src/menu.c    ****     }
 556:src/menu.c    ****     catcmd(op, buf1);
 1706              		.loc 1 556 5 is_stmt 1 view .LVU486
 1707 0086 0846     		mov	r0, r1
 1708 0088 6946     		mov	r1, sp
 1709 008a FFF7FEFF 		bl	catcmd
 1710              	.LVL122:
 557:src/menu.c    ****     if (i<6) {
 1711              		.loc 1 557 5 view .LVU487
 1712              		.loc 1 557 8 is_stmt 0 view .LVU488
 1713 008e 052E     		cmp	r6, #5
 558:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1714              		.loc 1 558 7 view .LVU489
 1715 0090 6946     		mov	r1, sp
 1716 0092 4FF00702 		mov	r2, #7
 557:src/menu.c    ****     if (i<6) {
 1717              		.loc 1 557 8 view .LVU490
 1718 0096 12D8     		bhi	.L159
 1719              		.loc 1 558 7 is_stmt 1 view .LVU491
 1720 0098 2846     		mov	r0, r5
 1721 009a FFF7FEFF 		bl	strncpy
 1722              	.LVL123:
 559:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1723              		.loc 1 559 7 view .LVU492
 1724              		.loc 1 559 42 is_stmt 0 view .LVU493
 1725 009e 0021     		movs	r1, #0
 560:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = op;
 561:src/menu.c    ****       UserMenu.keys[i].unshifted.key_34s = K_OP;
ARM GAS  /tmp/cc0ERj20.s 			page 47


 1726              		.loc 1 561 42 view .LVU494
 1727 00a0 3422     		movs	r2, #52
 560:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = op;
 1728              		.loc 1 560 40 view .LVU495
 1729 00a2 45F80CBC 		str	fp, [r5, #-12]
 559:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1730              		.loc 1 559 42 view .LVU496
 1731 00a6 E971     		strb	r1, [r5, #7]
 560:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = op;
 1732              		.loc 1 560 7 is_stmt 1 view .LVU497
 1733              		.loc 1 561 7 view .LVU498
 1734              		.loc 1 561 42 is_stmt 0 view .LVU499
 1735 00a8 05F8102C 		strb	r2, [r5, #-16]
 1736              	.LVL124:
 1737              	.L161:
 1738              		.loc 1 561 42 view .LVU500
 1739              	.LBE106:
 524:src/menu.c    ****     s_opcode op;
 1740              		.loc 1 524 9 is_stmt 1 view .LVU501
 1741 00ac 24B1     		cbz	r4, .L149
 1742 00ae 0136     		adds	r6, r6, #1
 524:src/menu.c    ****     s_opcode op;
 1743              		.loc 1 524 13 is_stmt 0 discriminator 1 view .LVU502
 1744 00b0 0C2E     		cmp	r6, #12
 1745 00b2 05F12005 		add	r5, r5, #32
 1746 00b6 C5D1     		bne	.L163
 1747              	.LVL125:
 1748              	.L149:
 562:src/menu.c    ****     }
 563:src/menu.c    ****     else {
 564:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 565:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 566:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 567:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 568:src/menu.c    ****     }
 569:src/menu.c    ****     i++;
 570:src/menu.c    ****   }
 571:src/menu.c    **** }
 1749              		.loc 1 571 1 view .LVU503
 1750 00b8 05B0     		add	sp, sp, #20
 1751              		.cfi_remember_state
 1752              		.cfi_def_cfa_offset 36
 1753              		@ sp needed
 1754 00ba BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1755              	.LVL126:
 1756              	.L159:
 1757              		.cfi_restore_state
 1758              	.LBB107:
 564:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1759              		.loc 1 564 7 is_stmt 1 view .LVU504
 1760 00be A5F1B800 		sub	r0, r5, #184
 1761 00c2 FFF7FEFF 		bl	strncpy
 1762              	.LVL127:
 565:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 1763              		.loc 1 565 7 view .LVU505
 565:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 1764              		.loc 1 565 42 is_stmt 0 view .LVU506
ARM GAS  /tmp/cc0ERj20.s 			page 48


 1765 00c6 0022     		movs	r2, #0
 567:src/menu.c    ****     }
 1766              		.loc 1 567 42 view .LVU507
 1767 00c8 3423     		movs	r3, #52
 566:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 1768              		.loc 1 566 40 view .LVU508
 1769 00ca 45F8C47C 		str	r7, [r5, #-196]
 565:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 1770              		.loc 1 565 42 view .LVU509
 1771 00ce 05F8B12C 		strb	r2, [r5, #-177]
 566:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 1772              		.loc 1 566 7 is_stmt 1 view .LVU510
 567:src/menu.c    ****     }
 1773              		.loc 1 567 7 view .LVU511
 567:src/menu.c    ****     }
 1774              		.loc 1 567 42 is_stmt 0 view .LVU512
 1775 00d2 05F8C83C 		strb	r3, [r5, #-200]
 569:src/menu.c    ****   }
 1776              		.loc 1 569 5 is_stmt 1 view .LVU513
 1777              	.LVL128:
 569:src/menu.c    ****   }
 1778              		.loc 1 569 5 is_stmt 0 view .LVU514
 1779 00d6 E9E7     		b	.L161
 1780              	.LVL129:
 1781              	.L185:
 533:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 1782              		.loc 1 533 7 is_stmt 1 view .LVU515
 533:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 1783              		.loc 1 533 10 is_stmt 0 view .LVU516
 1784 00d8 042E     		cmp	r6, #4
 1785 00da 14D0     		beq	.L187
 538:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 1786              		.loc 1 538 12 is_stmt 1 view .LVU517
 538:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 1787              		.loc 1 538 15 is_stmt 0 view .LVU518
 1788 00dc 052E     		cmp	r6, #5
 1789 00de E5D1     		bne	.L161
 539:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 1790              		.loc 1 539 2 is_stmt 1 view .LVU519
 541:src/menu.c    ****       }
 1791              		.loc 1 541 2 is_stmt 0 view .LVU520
 1792 00e0 1249     		ldr	r1, .L188+8
 539:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 1793              		.loc 1 539 35 view .LVU521
 1794 00e2 4FF0FF30 		mov	r0, #-1
 540:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1795              		.loc 1 540 37 view .LVU522
 1796 00e6 2D23     		movs	r3, #45
 539:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 1797              		.loc 1 539 35 view .LVU523
 1798 00e8 C8F8B400 		str	r0, [r8, #180]
 540:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1799              		.loc 1 540 2 is_stmt 1 view .LVU524
 541:src/menu.c    ****       }
 1800              		.loc 1 541 2 is_stmt 0 view .LVU525
 1801 00ec 0968     		ldr	r1, [r1]
 540:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
ARM GAS  /tmp/cc0ERj20.s 			page 49


 1802              		.loc 1 540 37 view .LVU526
 1803 00ee 88F8B030 		strb	r3, [r8, #176]
 541:src/menu.c    ****       }
 1804              		.loc 1 541 2 is_stmt 1 view .LVU527
 1805 00f2 3246     		mov	r2, r6
 1806 00f4 5046     		mov	r0, r10
 1807 00f6 FFF7FEFF 		bl	strncpy
 1808              	.LVL130:
 543:src/menu.c    ****       continue;
 1809              		.loc 1 543 7 view .LVU528
 544:src/menu.c    ****     }
 1810              		.loc 1 544 7 view .LVU529
 1811 00fa D7E7     		b	.L161
 1812              	.LVL131:
 1813              	.L186:
 1814              	.LBB105:
 554:src/menu.c    ****     }
 1815              		.loc 1 554 2 view .LVU530
 554:src/menu.c    ****     }
 1816              		.loc 1 554 5 is_stmt 0 view .LVU531
 1817 00fc 0BF47F4B 		and	fp, fp, #65280
 1818              	.LVL132:
 554:src/menu.c    ****     }
 1819              		.loc 1 554 5 view .LVU532
 1820 0100 5946     		mov	r1, fp
 1821 0102 5F46     		mov	r7, fp
 1822 0104 BFE7     		b	.L158
 1823              	.LVL133:
 1824              	.L187:
 554:src/menu.c    ****     }
 1825              		.loc 1 554 5 view .LVU533
 1826              	.LBE105:
 534:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 1827              		.loc 1 534 2 is_stmt 1 view .LVU534
 534:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 1828              		.loc 1 534 35 is_stmt 0 view .LVU535
 1829 0106 4FF0FF30 		mov	r0, #-1
 535:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 1830              		.loc 1 535 37 view .LVU536
 1831 010a 2C23     		movs	r3, #44
 534:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 1832              		.loc 1 534 35 view .LVU537
 1833 010c C8F89400 		str	r0, [r8, #148]
 535:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 1834              		.loc 1 535 2 is_stmt 1 view .LVU538
 536:src/menu.c    ****       }
 1835              		.loc 1 536 2 is_stmt 0 view .LVU539
 1836 0110 D9F80010 		ldr	r1, [r9]
 1837 0114 0648     		ldr	r0, .L188+12
 535:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 1838              		.loc 1 535 37 view .LVU540
 1839 0116 88F89030 		strb	r3, [r8, #144]
 536:src/menu.c    ****       }
 1840              		.loc 1 536 2 is_stmt 1 view .LVU541
 1841 011a 0522     		movs	r2, #5
 1842 011c FFF7FEFF 		bl	strncpy
 1843              	.LVL134:
ARM GAS  /tmp/cc0ERj20.s 			page 50


 1844 0120 C4E7     		b	.L161
 1845              	.L189:
 1846 0122 00BF     		.align	2
 1847              	.L188:
 1848 0124 4DF04E55 		.word	1431236685
 1849 0128 20000000 		.word	.LANCHOR4+32
 1850 012c 00000000 		.word	.LANCHOR7
 1851 0130 A0000000 		.word	.LANCHOR4+160
 1852 0134 00000000 		.word	.LANCHOR4
 1853 0138 00000000 		.word	.LANCHOR6
 1854              	.LBE107:
 1855              		.cfi_endproc
 1856              	.LFE17:
 1858              		.section	.text.shutdown,"ax",%progbits
 1859              		.align	1
 1860              		.p2align 2,,3
 1861              		.global	shutdown
 1862              		.syntax unified
 1863              		.thumb
 1864              		.thumb_func
 1865              		.fpu fpv4-sp-d16
 1867              	shutdown:
 1868              	.LFB19:
 1869              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
ARM GAS  /tmp/cc0ERj20.s 			page 51


  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  46:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  47:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  48:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  49:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  50:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  51:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  52:src/console.c **** 
  53:src/console.c **** static struct _ndmap remap (const int c) {
  54:src/console.c **** 
  55:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  56:src/console.c **** 
  57:src/console.c **** #include "keytran.c"
  58:src/console.c **** 
  59:src/console.c ****   //  print_debug(40,c);
  60:src/console.c ****   //  print_debug(41,current_menu);
  61:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  62:src/console.c **** 
  63:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  64:src/console.c **** 
  65:src/console.c ****   if (c == 44 ) {
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  67:src/console.c ****     return sshot;
  68:src/console.c ****   }
  69:src/console.c ****   
  70:src/console.c ****   if (Running | Pause) {
  71:src/console.c ****     return mapping_running[c];
  72:src/console.c ****   }
  73:src/console.c ****   //  print_debug(42,0);
  74:src/console.c ****   if (current_menu == USER_MENU) {
  75:src/console.c ****     switch (c) {
  76:src/console.c ****     case KEY_F1:
  77:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[0].unshifted;
  78:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
  79:src/console.c ****     case KEY_F2:
  80:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[1].unshifted;
  81:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
  82:src/console.c ****     case KEY_F3:
  83:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[2].unshifted;
  84:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
  85:src/console.c ****     case KEY_F4:
  86:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[3].unshifted;
  87:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
  88:src/console.c ****     case KEY_F5:
  89:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[4].unshifted;
  90:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
ARM GAS  /tmp/cc0ERj20.s 			page 52


  91:src/console.c ****     case KEY_F6:
  92:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[5].unshifted;
  93:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
  94:src/console.c ****     }
  95:src/console.c ****   }
  96:src/console.c ****   else {
  97:src/console.c ****     switch (c) {
  98:src/console.c ****     case KEY_F1:
  99:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
 100:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 101:src/console.c ****     case KEY_F2:
 102:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
 103:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 104:src/console.c ****     case KEY_F3:
 105:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 106:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 107:src/console.c ****     case KEY_F4:
 108:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 109:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 110:src/console.c ****     case KEY_F5:
 111:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 112:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 113:src/console.c ****     case KEY_F6:
 114:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 115:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 116:src/console.c ****     }
 117:src/console.c ****   }    
 118:src/console.c ****   //  print_debug(44, get_alpha_state());  
 119:src/console.c ****   if ( get_alpha_state() ) {
 120:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 121:src/console.c ****       switch (cur_shift()) { 
 122:src/console.c ****       case SHIFT_N:
 123:src/console.c **** 	return mapping_none[c]; // N -> F
 124:src/console.c **** 	break;
 125:src/console.c ****       case SHIFT_F:
 126:src/console.c **** 	return mapping_fshift[c]; // F -> G
 127:src/console.c **** 	break;
 128:src/console.c ****       case SHIFT_G:
 129:src/console.c **** 	return h_shift; // G -> H
 130:src/console.c **** 	break;
 131:src/console.c ****       case SHIFT_H:
 132:src/console.c **** 	return h_shift; // H -> N
 133:src/console.c ****       default:
 134:src/console.c **** 	return no_change;
 135:src/console.c ****       }
 136:src/console.c ****     }
 137:src/console.c ****     return mapping_alpha [c];
 138:src/console.c ****   }
 139:src/console.c ****   //  print_debug(54,cur_shift());
 140:src/console.c ****   switch (cur_shift()) {
 141:src/console.c ****   case SHIFT_N:    
 142:src/console.c ****     return mapping_none[c];
 143:src/console.c ****     break;
 144:src/console.c ****   case SHIFT_F:
 145:src/console.c ****     return mapping_fshift[c];
 146:src/console.c ****     break;
 147:src/console.c ****   case SHIFT_G:
ARM GAS  /tmp/cc0ERj20.s 			page 53


 148:src/console.c ****     return mapping_gshift[c];
 149:src/console.c ****     break;
 150:src/console.c ****   default:
 151:src/console.c ****     return no_change;
 152:src/console.c ****   }
 153:src/console.c **** }
 154:src/console.c **** 
 155:src/console.c **** #endif
 156:src/console.c **** 
 157:src/console.c **** void shutdown( void )
 158:src/console.c **** {
 1870              		.loc 2 158 1 view -0
 1871              		.cfi_startproc
 1872              		@ args = 0, pretend = 0, frame = 0
 1873              		@ frame_needed = 0, uses_anonymous_args = 0
 1874              		@ link register save eliminated.
 159:src/console.c **** #ifndef DM42
 160:src/console.c ****   checksum_all();
 161:src/console.c ****   setuptty( 1 );
 162:src/console.c ****   save_statefile( NULL );
 163:src/console.c ****   exit( 0 );
 164:src/console.c **** #else
 165:src/console.c ****   //  save_ram_file(0);
 166:src/console.c ****   SET_ST(STAT_PGM_END);
 1875              		.loc 2 166 3 view .LVU543
 1876 0000 024A     		ldr	r2, .L191
 1877 0002 1368     		ldr	r3, [r2]
 1878 0004 43F40073 		orr	r3, r3, #512
 1879 0008 1360     		str	r3, [r2]
 167:src/console.c **** #endif
 168:src/console.c **** }
 1880              		.loc 2 168 1 is_stmt 0 view .LVU544
 1881 000a 7047     		bx	lr
 1882              	.L192:
 1883              		.align	2
 1884              	.L191:
 1885 000c 00200010 		.word	268443648
 1886              		.cfi_endproc
 1887              	.LFE19:
 1889              		.section	.text.is_key_pressed,"ax",%progbits
 1890              		.align	1
 1891              		.p2align 2,,3
 1892              		.global	is_key_pressed
 1893              		.syntax unified
 1894              		.thumb
 1895              		.thumb_func
 1896              		.fpu fpv4-sp-d16
 1898              	is_key_pressed:
 1899              	.LFB20:
 169:src/console.c **** 
 170:src/console.c **** 
 171:src/console.c **** /*
 172:src/console.c ****  *  Dummies
 173:src/console.c ****  */
 174:src/console.c **** int is_key_pressed(void) 
 175:src/console.c **** {
 1900              		.loc 2 175 1 is_stmt 1 view -0
ARM GAS  /tmp/cc0ERj20.s 			page 54


 1901              		.cfi_startproc
 1902              		@ args = 0, pretend = 0, frame = 0
 1903              		@ frame_needed = 0, uses_anonymous_args = 0
 176:src/console.c **** #ifdef DM42
 177:src/console.c ****   return !key_empty();
 1904              		.loc 2 177 3 view .LVU546
 175:src/console.c **** #ifdef DM42
 1905              		.loc 2 175 1 is_stmt 0 view .LVU547
 1906 0000 08B5     		push	{r3, lr}
 1907              		.cfi_def_cfa_offset 8
 1908              		.cfi_offset 3, -8
 1909              		.cfi_offset 14, -4
 1910              		.loc 2 177 11 view .LVU548
 1911 0002 034B     		ldr	r3, .L195
 1912 0004 9847     		blx	r3
 1913              	.LVL135:
 178:src/console.c **** #else
 179:src/console.c ****   return 0;
 180:src/console.c **** #endif
 181:src/console.c **** }
 1914              		.loc 2 181 1 view .LVU549
 1915 0006 B0FA80F0 		clz	r0, r0
 1916 000a 4009     		lsrs	r0, r0, #5
 1917 000c 08BD     		pop	{r3, pc}
 1918              	.L196:
 1919 000e 00BF     		.align	2
 1920              	.L195:
 1921 0010 7D030008 		.word	134218621
 1922              		.cfi_endproc
 1923              	.LFE20:
 1925              		.section	.text.get_key,"ax",%progbits
 1926              		.align	1
 1927              		.p2align 2,,3
 1928              		.global	get_key
 1929              		.syntax unified
 1930              		.thumb
 1931              		.thumb_func
 1932              		.fpu fpv4-sp-d16
 1934              	get_key:
 1935              	.LFB21:
 182:src/console.c **** 
 183:src/console.c **** int get_key(void)
 184:src/console.c **** {
 1936              		.loc 2 184 1 is_stmt 1 view -0
 1937              		.cfi_startproc
 1938              		@ args = 0, pretend = 0, frame = 0
 1939              		@ frame_needed = 0, uses_anonymous_args = 0
 1940              		@ link register save eliminated.
 185:src/console.c ****   #ifdef DM42
 186:src/console.c ****   return key_pop();
 1941              		.loc 2 186 3 view .LVU551
 1942              		.loc 2 186 10 is_stmt 0 view .LVU552
 1943 0000 004B     		ldr	r3, .L198
 1944 0002 1847     		bx	r3
 1945              	.LVL136:
 1946              	.L199:
 1947              		.align	2
ARM GAS  /tmp/cc0ERj20.s 			page 55


 1948              	.L198:
 1949 0004 89030008 		.word	134218633
 1950              		.cfi_endproc
 1951              	.LFE21:
 1953              		.section	.text.put_key,"ax",%progbits
 1954              		.align	1
 1955              		.p2align 2,,3
 1956              		.global	put_key
 1957              		.syntax unified
 1958              		.thumb
 1959              		.thumb_func
 1960              		.fpu fpv4-sp-d16
 1962              	put_key:
 1963              	.LVL137:
 1964              	.LFB22:
 187:src/console.c ****   #else
 188:src/console.c ****   return 0;
 189:src/console.c ****   #endif
 190:src/console.c **** }
 191:src/console.c **** 
 192:src/console.c **** /*
 193:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 194:src/console.c ****  * 
 195:src/console.c ****  */
 196:src/console.c **** int put_key( int k )
 197:src/console.c **** {
 1965              		.loc 2 197 1 is_stmt 1 view -0
 1966              		.cfi_startproc
 1967              		@ args = 0, pretend = 0, frame = 48
 1968              		@ frame_needed = 0, uses_anonymous_args = 0
 1969              		@ link register save eliminated.
 198:src/console.c ****   #ifdef DM42
 199:src/console.c ****   const char wp34s_to_DM42[] = {
 1970              		.loc 2 199 3 view .LVU554
 197:src/console.c ****   #ifdef DM42
 1971              		.loc 2 197 1 is_stmt 0 view .LVU555
 1972 0000 70B4     		push	{r4, r5, r6}
 1973              		.cfi_def_cfa_offset 12
 1974              		.cfi_offset 4, -12
 1975              		.cfi_offset 5, -8
 1976              		.cfi_offset 6, -4
 1977              		.loc 2 199 14 view .LVU556
 1978 0002 0E4D     		ldr	r5, .L203
 197:src/console.c ****   #ifdef DM42
 1979              		.loc 2 197 1 view .LVU557
 1980 0004 0646     		mov	r6, r0
 1981              		.loc 2 199 14 view .LVU558
 1982 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1983              	.LVL138:
 197:src/console.c ****   #ifdef DM42
 1984              		.loc 2 197 1 view .LVU559
 1985 0008 8DB0     		sub	sp, sp, #52
 1986              		.cfi_def_cfa_offset 64
 1987              		.loc 2 199 14 view .LVU560
 1988 000a 01AC     		add	r4, sp, #4
 1989 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1990 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
ARM GAS  /tmp/cc0ERj20.s 			page 56


 1991 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1992 0012 95E80700 		ldm	r5, {r0, r1, r2}
 1993 0016 03C4     		stmia	r4!, {r0, r1}
 200:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 201:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 202:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 203:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 204:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 205:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 206:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 207:src/console.c ****   
 208:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 1994              		.loc 2 208 6 view .LVU561
 1995 0018 282E     		cmp	r6, #40
 199:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 1996              		.loc 2 199 14 view .LVU562
 1997 001a 2270     		strb	r2, [r4]
 1998              		.loc 2 208 3 is_stmt 1 view .LVU563
 1999              		.loc 2 208 6 is_stmt 0 view .LVU564
 2000 001c 08D8     		bhi	.L201
 209:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2001              		.loc 2 209 5 is_stmt 1 view .LVU565
 2002              		.loc 2 209 36 is_stmt 0 view .LVU566
 2003 001e 0CAB     		add	r3, sp, #48
 2004 0020 3046     		mov	r0, r6
 2005 0022 1844     		add	r0, r0, r3
 2006              		.loc 2 209 12 view .LVU567
 2007 0024 064B     		ldr	r3, .L203+4
 2008 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 210:src/console.c ****   }
 211:src/console.c ****   else {
 212:src/console.c ****     return -1;
 213:src/console.c ****   }
 214:src/console.c ****   #else
 215:src/console.c ****   return k;
 216:src/console.c ****   #endif
 217:src/console.c **** }
 2009              		.loc 2 217 1 view .LVU568
 2010 002a 0DB0     		add	sp, sp, #52
 2011              		.cfi_remember_state
 2012              		.cfi_def_cfa_offset 12
 2013              		@ sp needed
 2014 002c 70BC     		pop	{r4, r5, r6}
 2015              		.cfi_restore 6
 2016              		.cfi_restore 5
 2017              		.cfi_restore 4
 2018              		.cfi_def_cfa_offset 0
 2019              	.LVL139:
 209:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2020              		.loc 2 209 12 view .LVU569
 2021 002e 1847     		bx	r3
 2022              	.LVL140:
 2023              	.L201:
 2024              		.cfi_restore_state
 2025              		.loc 2 217 1 view .LVU570
 2026 0030 4FF0FF30 		mov	r0, #-1
 2027 0034 0DB0     		add	sp, sp, #52
ARM GAS  /tmp/cc0ERj20.s 			page 57


 2028              		.cfi_def_cfa_offset 12
 2029              		@ sp needed
 2030 0036 70BC     		pop	{r4, r5, r6}
 2031              		.cfi_restore 6
 2032              		.cfi_restore 5
 2033              		.cfi_restore 4
 2034              		.cfi_def_cfa_offset 0
 2035              	.LVL141:
 2036              		.loc 2 217 1 view .LVU571
 2037 0038 7047     		bx	lr
 2038              	.L204:
 2039 003a 00BF     		.align	2
 2040              	.L203:
 2041 003c 00000000 		.word	.LANCHOR8
 2042 0040 81030008 		.word	134218625
 2043              		.cfi_endproc
 2044              	.LFE22:
 2046              		.section	.text.shift_down,"ax",%progbits
 2047              		.align	1
 2048              		.p2align 2,,3
 2049              		.global	shift_down
 2050              		.syntax unified
 2051              		.thumb
 2052              		.thumb_func
 2053              		.fpu fpv4-sp-d16
 2055              	shift_down:
 2056              	.LFB23:
 218:src/console.c **** 
 219:src/console.c **** enum shifts shift_down(void)
 220:src/console.c **** {
 2057              		.loc 2 220 1 is_stmt 1 view -0
 2058              		.cfi_startproc
 2059              		@ args = 0, pretend = 0, frame = 0
 2060              		@ frame_needed = 0, uses_anonymous_args = 0
 2061              		@ link register save eliminated.
 221:src/console.c **** 	return SHIFT_N;
 2062              		.loc 2 221 2 view .LVU573
 222:src/console.c **** }
 2063              		.loc 2 222 1 is_stmt 0 view .LVU574
 2064 0000 0020     		movs	r0, #0
 2065 0002 7047     		bx	lr
 2066              		.cfi_endproc
 2067              	.LFE23:
 2069              		.section	.text.start_key_timer,"ax",%progbits
 2070              		.align	1
 2071              		.p2align 2,,3
 2072              		.global	start_key_timer
 2073              		.syntax unified
 2074              		.thumb
 2075              		.thumb_func
 2076              		.fpu fpv4-sp-d16
 2078              	start_key_timer:
 2079              	.LFB24:
 223:src/console.c **** 
 224:src/console.c **** #ifndef DM42   // No serial operations for DM42
 225:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 226:src/console.c **** /*
ARM GAS  /tmp/cc0ERj20.s 			page 58


 227:src/console.c ****  *  Open a COM port for transmission
 228:src/console.c ****  */
 229:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 230:src/console.c **** {
 231:src/console.c **** 	return 0;
 232:src/console.c **** }
 233:src/console.c **** 
 234:src/console.c **** 
 235:src/console.c **** /*
 236:src/console.c ****  *  Close the COM port after transmission is complete
 237:src/console.c ****  */
 238:src/console.c **** extern void close_port( void )
 239:src/console.c **** {
 240:src/console.c **** }
 241:src/console.c **** 
 242:src/console.c **** 
 243:src/console.c **** /*
 244:src/console.c ****  *  Output a single byte to the serial
 245:src/console.c ****  */
 246:src/console.c **** void put_byte( unsigned char byte )
 247:src/console.c **** {
 248:src/console.c **** 	report_err(ERR_PROG_BAD);
 249:src/console.c **** }
 250:src/console.c **** 
 251:src/console.c **** 
 252:src/console.c **** /*
 253:src/console.c ****  *  Force buffer flush
 254:src/console.c ****  */
 255:src/console.c **** void flush_comm( void )
 256:src/console.c **** {
 257:src/console.c **** }
 258:src/console.c **** 
 259:src/console.c **** #endif
 260:src/console.c **** #endif
 261:src/console.c **** 
 262:src/console.c **** 
 263:src/console.c **** /*
 264:src/console.c ****  *  Main loop
 265:src/console.c ****  */
 266:src/console.c **** #ifdef DM42
 267:src/console.c **** void start_key_timer (void);
 268:src/console.c **** long int keyticks (void);
 269:src/console.c **** void moveto (int line, int x);
 270:src/console.c **** 
 271:src/console.c **** static long int start_ticks;
 272:src/console.c **** 
 273:src/console.c **** void start_key_timer() {
 2080              		.loc 2 273 24 is_stmt 1 view -0
 2081              		.cfi_startproc
 2082              		@ args = 0, pretend = 0, frame = 0
 2083              		@ frame_needed = 0, uses_anonymous_args = 0
 274:src/console.c ****     start_ticks = get_rtc_ticks();
 2084              		.loc 2 274 5 view .LVU576
 273:src/console.c ****     start_ticks = get_rtc_ticks();
 2085              		.loc 2 273 24 is_stmt 0 view .LVU577
 2086 0000 08B5     		push	{r3, lr}
 2087              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc0ERj20.s 			page 59


 2088              		.cfi_offset 3, -8
 2089              		.cfi_offset 14, -4
 2090              		.loc 2 274 19 view .LVU578
 2091 0002 024B     		ldr	r3, .L208
 2092 0004 9847     		blx	r3
 2093              	.LVL142:
 2094              		.loc 2 274 17 view .LVU579
 2095 0006 024B     		ldr	r3, .L208+4
 2096 0008 1860     		str	r0, [r3]
 275:src/console.c **** }
 2097              		.loc 2 275 1 view .LVU580
 2098 000a 08BD     		pop	{r3, pc}
 2099              	.L209:
 2100              		.align	2
 2101              	.L208:
 2102 000c B9040008 		.word	134218937
 2103 0010 00000000 		.word	.LANCHOR9
 2104              		.cfi_endproc
 2105              	.LFE24:
 2107              		.section	.text.keyticks,"ax",%progbits
 2108              		.align	1
 2109              		.p2align 2,,3
 2110              		.global	keyticks
 2111              		.syntax unified
 2112              		.thumb
 2113              		.thumb_func
 2114              		.fpu fpv4-sp-d16
 2116              	keyticks:
 2117              	.LFB25:
 276:src/console.c **** 
 277:src/console.c **** long int keyticks () {
 2118              		.loc 2 277 22 is_stmt 1 view -0
 2119              		.cfi_startproc
 2120              		@ args = 0, pretend = 0, frame = 0
 2121              		@ frame_needed = 0, uses_anonymous_args = 0
 278:src/console.c ****   long int i;
 2122              		.loc 2 278 3 view .LVU582
 279:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2123              		.loc 2 279 3 view .LVU583
 277:src/console.c ****   long int i;
 2124              		.loc 2 277 22 is_stmt 0 view .LVU584
 2125 0000 08B5     		push	{r3, lr}
 2126              		.cfi_def_cfa_offset 8
 2127              		.cfi_offset 3, -8
 2128              		.cfi_offset 14, -4
 2129              		.loc 2 279 8 view .LVU585
 2130 0002 054B     		ldr	r3, .L212
 2131 0004 9847     		blx	r3
 2132              	.LVL143:
 280:src/console.c ****   return i >> 8;
 2133              		.loc 2 280 3 is_stmt 1 view .LVU586
 279:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2134              		.loc 2 279 24 is_stmt 0 view .LVU587
 2135 0006 054B     		ldr	r3, .L212+4
 2136 0008 1B68     		ldr	r3, [r3]
 2137 000a C01A     		subs	r0, r0, r3
 2138              	.LVL144:
ARM GAS  /tmp/cc0ERj20.s 			page 60


 279:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2139              		.loc 2 279 38 view .LVU588
 2140 000c 00EB8000 		add	r0, r0, r0, lsl #2
 281:src/console.c **** }
 2141              		.loc 2 281 1 view .LVU589
 2142 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2143 0014 08BD     		pop	{r3, pc}
 2144              	.L213:
 2145 0016 00BF     		.align	2
 2146              	.L212:
 2147 0018 B9040008 		.word	134218937
 2148 001c 00000000 		.word	.LANCHOR9
 2149              		.cfi_endproc
 2150              	.LFE25:
 2152              		.section	.text.moveto,"ax",%progbits
 2153              		.align	1
 2154              		.p2align 2,,3
 2155              		.global	moveto
 2156              		.syntax unified
 2157              		.thumb
 2158              		.thumb_func
 2159              		.fpu fpv4-sp-d16
 2161              	moveto:
 2162              	.LVL145:
 2163              	.LFB26:
 282:src/console.c **** 
 283:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 284:src/console.c **** char print_string[22];
 285:src/console.c **** int n_p = 0;
 286:src/console.c **** 
 287:src/console.c **** 
 288:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2164              		.loc 2 288 30 is_stmt 1 view -0
 2165              		.cfi_startproc
 2166              		@ args = 0, pretend = 0, frame = 0
 2167              		@ frame_needed = 0, uses_anonymous_args = 0
 289:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2168              		.loc 2 289 3 view .LVU591
 288:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2169              		.loc 2 288 30 is_stmt 0 view .LVU592
 2170 0000 70B5     		push	{r4, r5, r6, lr}
 2171              		.cfi_def_cfa_offset 16
 2172              		.cfi_offset 4, -16
 2173              		.cfi_offset 5, -12
 2174              		.cfi_offset 6, -8
 2175              		.cfi_offset 14, -4
 2176              		.loc 2 289 3 view .LVU593
 2177 0002 0A4D     		ldr	r5, .L216
 2178 0004 0A4B     		ldr	r3, .L216+4
 288:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2179              		.loc 2 288 30 view .LVU594
 2180 0006 0246     		mov	r2, r0
 2181 0008 0C46     		mov	r4, r1
 2182              		.loc 2 289 3 view .LVU595
 2183 000a A86B     		ldr	r0, [r5, #56]
 2184              	.LVL146:
 2185              		.loc 2 289 3 view .LVU596
ARM GAS  /tmp/cc0ERj20.s 			page 61


 2186 000c 511E     		subs	r1, r2, #1
 2187              	.LVL147:
 2188              		.loc 2 289 3 view .LVU597
 2189 000e 9847     		blx	r3
 2190              	.LVL148:
 290:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2191              		.loc 2 290 3 is_stmt 1 view .LVU598
 2192 0010 A86B     		ldr	r0, [r5, #56]
 2193 0012 084B     		ldr	r3, .L216+8
 2194              		.loc 2 290 33 is_stmt 0 view .LVU599
 2195 0014 0168     		ldr	r1, [r0]
 2196              		.loc 2 290 3 view .LVU600
 2197 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2198              		.loc 2 290 33 view .LVU601
 2199 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2200              		.loc 2 290 43 view .LVU602
 2201 001c 013C     		subs	r4, r4, #1
 2202              	.LVL149:
 2203              		.loc 2 290 40 view .LVU603
 2204 001e 04FB01F1 		mul	r1, r4, r1
 2205              		.loc 2 290 3 view .LVU604
 2206 0022 1431     		adds	r1, r1, #20
 291:src/console.c **** }
 2207              		.loc 2 291 1 view .LVU605
 2208 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2209              		.cfi_restore 14
 2210              		.cfi_restore 6
 2211              		.cfi_restore 5
 2212              		.cfi_restore 4
 2213              		.cfi_def_cfa_offset 0
 2214              	.LVL150:
 290:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2215              		.loc 2 290 3 view .LVU606
 2216 0028 1847     		bx	r3	@ indirect register sibling call
 2217              	.LVL151:
 2218              	.L217:
 2219 002a 00BF     		.align	2
 2220              	.L216:
 2221 002c 00200010 		.word	268443648
 2222 0030 69020008 		.word	134218345
 2223 0034 6D020008 		.word	134218349
 2224              		.cfi_endproc
 2225              	.LFE26:
 2227              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2228              		.align	2
 2229              	.LC9:
 2230 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2230      673A2025 
 2230      34692C25 
 2230      346900
 2231              		.section	.text.print_debug,"ax",%progbits
 2232              		.align	1
 2233              		.p2align 2,,3
 2234              		.global	print_debug
 2235              		.syntax unified
 2236              		.thumb
 2237              		.thumb_func
ARM GAS  /tmp/cc0ERj20.s 			page 62


 2238              		.fpu fpv4-sp-d16
 2240              	print_debug:
 2241              	.LVL152:
 2242              	.LFB27:
 292:src/console.c **** 
 293:src/console.c **** void print_debug (int i, int j) {
 2243              		.loc 2 293 33 is_stmt 1 view -0
 2244              		.cfi_startproc
 2245              		@ args = 0, pretend = 0, frame = 8
 2246              		@ frame_needed = 0, uses_anonymous_args = 0
 294:src/console.c ****   strcpy( print_string, spaces );
 2247              		.loc 2 294 3 view .LVU608
 293:src/console.c ****   strcpy( print_string, spaces );
 2248              		.loc 2 293 33 is_stmt 0 view .LVU609
 2249 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2250              		.cfi_def_cfa_offset 24
 2251              		.cfi_offset 4, -24
 2252              		.cfi_offset 5, -20
 2253              		.cfi_offset 6, -16
 2254              		.cfi_offset 7, -12
 2255              		.cfi_offset 8, -8
 2256              		.cfi_offset 14, -4
 2257              		.loc 2 294 3 view .LVU610
 2258 0004 174C     		ldr	r4, .L220
 2259 0006 184F     		ldr	r7, .L220+4
 295:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 296:src/console.c ****   moveto (3, 1);
 297:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2260              		.loc 2 297 3 view .LVU611
 2261 0008 184E     		ldr	r6, .L220+8
 2262 000a 194D     		ldr	r5, .L220+12
 298:src/console.c ****   lcd_refresh();
 2263              		.loc 2 298 3 view .LVU612
 2264 000c DFF86C80 		ldr	r8, .L220+24
 293:src/console.c ****   strcpy( print_string, spaces );
 2265              		.loc 2 293 33 view .LVU613
 2266 0010 82B0     		sub	sp, sp, #8
 2267              		.cfi_def_cfa_offset 32
 293:src/console.c ****   strcpy( print_string, spaces );
 2268              		.loc 2 293 33 view .LVU614
 2269 0012 0190     		str	r0, [sp, #4]
 2270 0014 0091     		str	r1, [sp]
 294:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2271              		.loc 2 294 3 view .LVU615
 2272 0016 2046     		mov	r0, r4
 2273              	.LVL153:
 294:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2274              		.loc 2 294 3 view .LVU616
 2275 0018 3946     		mov	r1, r7
 2276              	.LVL154:
 294:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2277              		.loc 2 294 3 view .LVU617
 2278 001a FFF7FEFF 		bl	strcpy
 2279              	.LVL155:
 295:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2280              		.loc 2 295 3 is_stmt 1 view .LVU618
 2281 001e DDE90032 		ldrd	r3, r2, [sp]
ARM GAS  /tmp/cc0ERj20.s 			page 63


 2282 0022 1449     		ldr	r1, .L220+16
 2283 0024 2046     		mov	r0, r4
 2284 0026 FFF7FEFF 		bl	sprintf
 2285              	.LVL156:
 296:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2286              		.loc 2 296 3 view .LVU619
 2287 002a 0121     		movs	r1, #1
 2288 002c 0320     		movs	r0, #3
 2289 002e FFF7FEFF 		bl	moveto
 2290              	.LVL157:
 297:src/console.c ****   lcd_refresh();
 2291              		.loc 2 297 3 view .LVU620
 2292 0032 2146     		mov	r1, r4
 2293 0034 B06B     		ldr	r0, [r6, #56]
 2294 0036 A847     		blx	r5
 2295              	.LVL158:
 2296              		.loc 2 298 3 view .LVU621
 2297 0038 C047     		blx	r8
 2298              	.LVL159:
 299:src/console.c ****   sys_delay (1000);
 2299              		.loc 2 299 3 view .LVU622
 2300 003a 0F4B     		ldr	r3, .L220+20
 2301 003c 4FF47A70 		mov	r0, #1000
 2302 0040 9847     		blx	r3
 2303              	.LVL160:
 300:src/console.c ****   /* wait_for_key_press(); */
 301:src/console.c ****   //  key_pop_all();
 302:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 303:src/console.c ****   // key_pop_all();
 304:src/console.c ****   strcpy( print_string, spaces );
 2304              		.loc 2 304 3 view .LVU623
 2305 0042 3946     		mov	r1, r7
 2306 0044 2046     		mov	r0, r4
 2307 0046 FFF7FEFF 		bl	strcpy
 2308              	.LVL161:
 305:src/console.c ****   moveto (3, 1);
 2309              		.loc 2 305 3 view .LVU624
 2310 004a 0121     		movs	r1, #1
 2311 004c 0320     		movs	r0, #3
 2312 004e FFF7FEFF 		bl	moveto
 2313              	.LVL162:
 306:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2314              		.loc 2 306 3 view .LVU625
 2315 0052 B06B     		ldr	r0, [r6, #56]
 2316 0054 2146     		mov	r1, r4
 2317 0056 A847     		blx	r5
 2318              	.LVL163:
 307:src/console.c ****   lcd_refresh();
 2319              		.loc 2 307 3 view .LVU626
 2320 0058 4346     		mov	r3, r8
 308:src/console.c ****   // while (key_empty()<=0);; // wait for release
 309:src/console.c ****   // key_pop_all();
 310:src/console.c **** }
 2321              		.loc 2 310 1 is_stmt 0 view .LVU627
 2322 005a 02B0     		add	sp, sp, #8
 2323              		.cfi_def_cfa_offset 24
 2324              	.LVL164:
ARM GAS  /tmp/cc0ERj20.s 			page 64


 2325              		.loc 2 310 1 view .LVU628
 2326              		@ sp needed
 2327 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2328              		.cfi_restore 14
 2329              		.cfi_restore 8
 2330              		.cfi_restore 7
 2331              		.cfi_restore 6
 2332              		.cfi_restore 5
 2333              		.cfi_restore 4
 2334              		.cfi_def_cfa_offset 0
 2335              	.LVL165:
 307:src/console.c ****   lcd_refresh();
 2336              		.loc 2 307 3 view .LVU629
 2337 0060 1847     		bx	r3	@ indirect register sibling call
 2338              	.LVL166:
 2339              	.L221:
 2340 0062 00BF     		.align	2
 2341              	.L220:
 2342 0064 00000000 		.word	print_string
 2343 0068 00000000 		.word	.LANCHOR10
 2344 006c 00200010 		.word	268443648
 2345 0070 B1020008 		.word	134218417
 2346 0074 00000000 		.word	.LC9
 2347 0078 05040008 		.word	134218757
 2348 007c 31020008 		.word	134218289
 2349              		.cfi_endproc
 2350              	.LFE27:
 2352              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2353              		.align	2
 2354              	.LC10:
 2355 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2355      692C2531 
 2355      337300
 2356              		.section	.text.print_debug2,"ax",%progbits
 2357              		.align	1
 2358              		.p2align 2,,3
 2359              		.global	print_debug2
 2360              		.syntax unified
 2361              		.thumb
 2362              		.thumb_func
 2363              		.fpu fpv4-sp-d16
 2365              	print_debug2:
 2366              	.LVL167:
 2367              	.LFB28:
 311:src/console.c **** 
 312:src/console.c **** void print_debug2 (int i, char* j) {
 2368              		.loc 2 312 36 is_stmt 1 view -0
 2369              		.cfi_startproc
 2370              		@ args = 0, pretend = 0, frame = 8
 2371              		@ frame_needed = 0, uses_anonymous_args = 0
 313:src/console.c ****   strcpy( print_string, spaces );
 2372              		.loc 2 313 3 view .LVU631
 312:src/console.c ****   strcpy( print_string, spaces );
 2373              		.loc 2 312 36 is_stmt 0 view .LVU632
 2374 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2375              		.cfi_def_cfa_offset 24
 2376              		.cfi_offset 4, -24
ARM GAS  /tmp/cc0ERj20.s 			page 65


 2377              		.cfi_offset 5, -20
 2378              		.cfi_offset 6, -16
 2379              		.cfi_offset 7, -12
 2380              		.cfi_offset 8, -8
 2381              		.cfi_offset 14, -4
 2382              		.loc 2 313 3 view .LVU633
 2383 0004 174C     		ldr	r4, .L224
 2384 0006 184F     		ldr	r7, .L224+4
 314:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 315:src/console.c ****   moveto (3, 1);
 316:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2385              		.loc 2 316 3 view .LVU634
 2386 0008 184E     		ldr	r6, .L224+8
 2387 000a 194D     		ldr	r5, .L224+12
 317:src/console.c ****   lcd_refresh();
 2388              		.loc 2 317 3 view .LVU635
 2389 000c DFF86C80 		ldr	r8, .L224+24
 312:src/console.c ****   strcpy( print_string, spaces );
 2390              		.loc 2 312 36 view .LVU636
 2391 0010 82B0     		sub	sp, sp, #8
 2392              		.cfi_def_cfa_offset 32
 312:src/console.c ****   strcpy( print_string, spaces );
 2393              		.loc 2 312 36 view .LVU637
 2394 0012 0190     		str	r0, [sp, #4]
 2395 0014 0091     		str	r1, [sp]
 313:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2396              		.loc 2 313 3 view .LVU638
 2397 0016 2046     		mov	r0, r4
 2398              	.LVL168:
 313:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2399              		.loc 2 313 3 view .LVU639
 2400 0018 3946     		mov	r1, r7
 2401              	.LVL169:
 313:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2402              		.loc 2 313 3 view .LVU640
 2403 001a FFF7FEFF 		bl	strcpy
 2404              	.LVL170:
 314:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2405              		.loc 2 314 3 is_stmt 1 view .LVU641
 2406 001e DDE90032 		ldrd	r3, r2, [sp]
 2407 0022 1449     		ldr	r1, .L224+16
 2408 0024 2046     		mov	r0, r4
 2409 0026 FFF7FEFF 		bl	sprintf
 2410              	.LVL171:
 315:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2411              		.loc 2 315 3 view .LVU642
 2412 002a 0121     		movs	r1, #1
 2413 002c 0320     		movs	r0, #3
 2414 002e FFF7FEFF 		bl	moveto
 2415              	.LVL172:
 316:src/console.c ****   lcd_refresh();
 2416              		.loc 2 316 3 view .LVU643
 2417 0032 2146     		mov	r1, r4
 2418 0034 B06B     		ldr	r0, [r6, #56]
 2419 0036 A847     		blx	r5
 2420              	.LVL173:
 2421              		.loc 2 317 3 view .LVU644
ARM GAS  /tmp/cc0ERj20.s 			page 66


 2422 0038 C047     		blx	r8
 2423              	.LVL174:
 318:src/console.c ****   sys_delay (2500);
 2424              		.loc 2 318 3 view .LVU645
 2425 003a 0F4B     		ldr	r3, .L224+20
 2426 003c 40F6C410 		movw	r0, #2500
 2427 0040 9847     		blx	r3
 2428              	.LVL175:
 319:src/console.c ****   /* wait_for_key_press(); */
 320:src/console.c ****   //  key_pop_all();
 321:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 322:src/console.c ****   // key_pop_all();
 323:src/console.c ****   strcpy( print_string, spaces );
 2429              		.loc 2 323 3 view .LVU646
 2430 0042 3946     		mov	r1, r7
 2431 0044 2046     		mov	r0, r4
 2432 0046 FFF7FEFF 		bl	strcpy
 2433              	.LVL176:
 324:src/console.c ****   moveto (3, 1);
 2434              		.loc 2 324 3 view .LVU647
 2435 004a 0121     		movs	r1, #1
 2436 004c 0320     		movs	r0, #3
 2437 004e FFF7FEFF 		bl	moveto
 2438              	.LVL177:
 325:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2439              		.loc 2 325 3 view .LVU648
 2440 0052 B06B     		ldr	r0, [r6, #56]
 2441 0054 2146     		mov	r1, r4
 2442 0056 A847     		blx	r5
 2443              	.LVL178:
 326:src/console.c ****   lcd_refresh();
 2444              		.loc 2 326 3 view .LVU649
 2445 0058 4346     		mov	r3, r8
 327:src/console.c ****   // while (key_empty()<=0);; // wait for release
 328:src/console.c ****   // key_pop_all();
 329:src/console.c **** }
 2446              		.loc 2 329 1 is_stmt 0 view .LVU650
 2447 005a 02B0     		add	sp, sp, #8
 2448              		.cfi_def_cfa_offset 24
 2449              	.LVL179:
 2450              		.loc 2 329 1 view .LVU651
 2451              		@ sp needed
 2452 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2453              		.cfi_restore 14
 2454              		.cfi_restore 8
 2455              		.cfi_restore 7
 2456              		.cfi_restore 6
 2457              		.cfi_restore 5
 2458              		.cfi_restore 4
 2459              		.cfi_def_cfa_offset 0
 2460              	.LVL180:
 326:src/console.c ****   lcd_refresh();
 2461              		.loc 2 326 3 view .LVU652
 2462 0060 1847     		bx	r3	@ indirect register sibling call
 2463              	.LVL181:
 2464              	.L225:
 2465 0062 00BF     		.align	2
ARM GAS  /tmp/cc0ERj20.s 			page 67


 2466              	.L224:
 2467 0064 00000000 		.word	print_string
 2468 0068 00000000 		.word	.LANCHOR10
 2469 006c 00200010 		.word	268443648
 2470 0070 B1020008 		.word	134218417
 2471 0074 00000000 		.word	.LC10
 2472 0078 05040008 		.word	134218757
 2473 007c 31020008 		.word	134218289
 2474              		.cfi_endproc
 2475              	.LFE28:
 2477              		.section	.text.do_now,"ax",%progbits
 2478              		.align	1
 2479              		.p2align 2,,3
 2480              		.global	do_now
 2481              		.syntax unified
 2482              		.thumb
 2483              		.thumb_func
 2484              		.fpu fpv4-sp-d16
 2486              	do_now:
 2487              	.LVL182:
 2488              	.LFB29:
 330:src/console.c **** 
 331:src/console.c **** void do_now (int key, int shift) {
 2489              		.loc 2 331 34 is_stmt 1 view -0
 2490              		.cfi_startproc
 2491              		@ args = 0, pretend = 0, frame = 8
 2492              		@ frame_needed = 0, uses_anonymous_args = 0
 2493              		@ link register save eliminated.
 332:src/console.c ****   struct _ndmap temp;
 2494              		.loc 2 332 3 view .LVU654
 333:src/console.c ****   temp.key_34s = key;
 2495              		.loc 2 333 3 view .LVU655
 331:src/console.c ****   struct _ndmap temp;
 2496              		.loc 2 331 34 is_stmt 0 view .LVU656
 2497 0000 82B0     		sub	sp, sp, #8
 2498              		.cfi_def_cfa_offset 8
 334:src/console.c ****   temp.shift = shift;
 335:src/console.c ****   process_keycode_with_shift (temp);
 2499              		.loc 2 335 3 view .LVU657
 2500 0002 02AB     		add	r3, sp, #8
 333:src/console.c ****   temp.shift = shift;
 2501              		.loc 2 333 16 view .LVU658
 2502 0004 8DF80000 		strb	r0, [sp]
 334:src/console.c ****   temp.shift = shift;
 2503              		.loc 2 334 3 is_stmt 1 view .LVU659
 334:src/console.c ****   temp.shift = shift;
 2504              		.loc 2 334 14 is_stmt 0 view .LVU660
 2505 0008 0191     		str	r1, [sp, #4]
 2506              		.loc 2 335 3 is_stmt 1 view .LVU661
 2507 000a 13E90300 		ldmdb	r3, {r0, r1}
 2508              	.LVL183:
 336:src/console.c **** }
 2509              		.loc 2 336 1 is_stmt 0 view .LVU662
 2510 000e 02B0     		add	sp, sp, #8
 2511              		.cfi_def_cfa_offset 0
 2512              		@ sp needed
 335:src/console.c **** }
ARM GAS  /tmp/cc0ERj20.s 			page 68


 2513              		.loc 2 335 3 view .LVU663
 2514 0010 FFF7FEBF 		b	process_keycode_with_shift
 2515              	.LVL184:
 335:src/console.c **** }
 2516              		.loc 2 335 3 view .LVU664
 2517              		.cfi_endproc
 2518              	.LFE29:
 2520              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 2521              		.align	2
 2522              	.LC11:
 2523 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 2523      502F7770 
 2523      3334735F 
 2523      68656C70 
 2523      2E68746D 
 2524              		.section	.text.do_multi,"ax",%progbits
 2525              		.align	1
 2526              		.p2align 2,,3
 2527              		.global	do_multi
 2528              		.syntax unified
 2529              		.thumb
 2530              		.thumb_func
 2531              		.fpu fpv4-sp-d16
 2533              	do_multi:
 2534              	.LVL185:
 2535              	.LFB30:
 337:src/console.c **** 
 338:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 2536              		.loc 2 338 42 is_stmt 1 view -0
 2537              		.cfi_startproc
 2538              		@ args = 0, pretend = 0, frame = 16
 2539              		@ frame_needed = 0, uses_anonymous_args = 0
 2540              		.loc 2 338 42 is_stmt 0 view .LVU666
 2541 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2542              		.cfi_def_cfa_offset 24
 2543              		.cfi_offset 4, -24
 2544              		.cfi_offset 5, -20
 2545              		.cfi_offset 6, -16
 2546              		.cfi_offset 7, -12
 2547              		.cfi_offset 8, -8
 2548              		.cfi_offset 14, -4
 2549 0004 84B0     		sub	sp, sp, #16
 2550              		.cfi_def_cfa_offset 40
 2551              	.LVL186:
 339:src/console.c ****   switch(r.shift) {
 2552              		.loc 2 339 3 is_stmt 1 view .LVU667
 338:src/console.c ****   switch(r.shift) {
 2553              		.loc 2 338 42 is_stmt 0 view .LVU668
 2554 0006 6C46     		mov	r4, sp
 2555 0008 531E     		subs	r3, r2, #1
 2556 000a 84E80600 		stm	r4, {r1, r2}
 2557              	.LVL187:
 338:src/console.c ****   switch(r.shift) {
 2558              		.loc 2 338 42 view .LVU669
 2559 000e 0546     		mov	r5, r0
 2560 0010 0E2B     		cmp	r3, #14
 2561 0012 00F2BC80 		bhi	.L229
ARM GAS  /tmp/cc0ERj20.s 			page 69


 2562 0016 DFE803F0 		tbb	[pc, r3]
 2563              	.L231:
 2564 001a 1F       		.byte	(.L245-.L231)/2
 2565 001b 47       		.byte	(.L244-.L231)/2
 2566 001c 51       		.byte	(.L243-.L231)/2
 2567 001d 5B       		.byte	(.L242-.L231)/2
 2568 001e 65       		.byte	(.L241-.L231)/2
 2569 001f 6F       		.byte	(.L240-.L231)/2
 2570 0020 79       		.byte	(.L239-.L231)/2
 2571 0021 83       		.byte	(.L238-.L231)/2
 2572 0022 8C       		.byte	(.L237-.L231)/2
 2573 0023 96       		.byte	(.L236-.L231)/2
 2574 0024 9F       		.byte	(.L235-.L231)/2
 2575 0025 A8       		.byte	(.L234-.L231)/2
 2576 0026 C1       		.byte	(.L233-.L231)/2
 2577 0027 CE       		.byte	(.L232-.L231)/2
 2578 0028 08       		.byte	(.L230-.L231)/2
 2579 0029 00       		.p2align 1
 2580              	.L230:
 340:src/console.c ****   case LASTX: // Last x via RCL L
 341:src/console.c ****     do_now (K11, 0); // RCL
 342:src/console.c ****     do_now (K_RELEASE,0); // release
 343:src/console.c ****     do_now (K15,0); // TAN key
 344:src/console.c ****     r.key_34s = K_RELEASE;
 345:src/console.c ****     r.shift = 0; // set up for release;
 346:src/console.c ****     break;
 347:src/console.c ****   case ONSTO: // flash_backup()
 348:src/console.c ****     flash_backup(OP_SAVE);
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case ONRCL: // flash_restore()
 352:src/console.c ****     flash_restore(OP_LOAD);
 353:src/console.c ****     r = no_key;
 354:src/console.c ****     break;
 355:src/console.c ****   case WRLIB: // save library file
 356:src/console.c ****     save_lib_file(1);
 357:src/console.c ****     r = no_key;
 358:src/console.c ****     break;
 359:src/console.c ****   case LLIB: // load library file
 360:src/console.c ****     load_lib_file(1);
 361:src/console.c ****     r = no_key;
 362:src/console.c ****     break;
 363:src/console.c ****   case WRTST: // save state file
 364:src/console.c ****     save_ram_file(1);
 365:src/console.c ****     r = no_key;
 366:src/console.c ****     break;
 367:src/console.c ****   case LDST:
 368:src/console.c ****     load_ram_file(1);
 369:src/console.c ****     r = no_key;
 370:src/console.c ****     break;
 371:src/console.c ****   case LDPRG:
 372:src/console.c ****     load_prog_file();
 373:src/console.c ****     r = no_key;
 374:src/console.c ****     break;
 375:src/console.c ****   case SVPRG:
 376:src/console.c ****     save_prog_file();
 377:src/console.c ****     r = no_key;
ARM GAS  /tmp/cc0ERj20.s 			page 70


 378:src/console.c ****     break;
 379:src/console.c ****   case HELP:
 380:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 381:src/console.c ****     r = no_key;
 382:src/console.c ****     break;
 383:src/console.c ****   case DOTS:
 384:src/console.c ****     do_all_dots();
 385:src/console.c ****     r = no_key;
 386:src/console.c ****     break;
 387:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 388:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 389:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 390:src/console.c ****     r = no_key;
 391:src/console.c ****     break;
 392:src/console.c ****   case DEFMEN:
 393:src/console.c ****     toggle_default_menu();
 394:src/console.c ****     r = f_shift; // clears f-shift that called this function
 395:src/console.c ****     break;
 396:src/console.c ****   case SETUMEN:
 397:src/console.c ****     build_user_menu();
 398:src/console.c ****     r = g_shift;
 399:src/console.c ****     break;
 400:src/console.c ****   case KCPX:
 401:src/console.c ****     if (CPX_ENABLED) {
 2581              		.loc 2 401 5 is_stmt 1 view .LVU670
 2582              		.loc 2 401 9 is_stmt 0 view .LVU671
 2583 002a 754B     		ldr	r3, .L262
 2584 002c 1B68     		ldr	r3, [r3]
 2585 002e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 2586              		.loc 2 401 8 view .LVU672
 2587 0032 13F04006 		ands	r6, r3, #64
 2588 0036 00F0CC80 		beq	.L248
 402:src/console.c ****       set_menu(17);
 2589              		.loc 2 402 7 is_stmt 1 view .LVU673
 2590              	.LVL188:
 2591              	.LBB108:
 2592              	.LBI108:
  85:src/menu.c    ****   int m = current_menu;
 2593              		.loc 1 85 6 view .LVU674
 2594              	.LBB109:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 2595              		.loc 1 86 3 view .LVU675
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 2596              		.loc 1 86 7 is_stmt 0 view .LVU676
 2597 003a 724A     		ldr	r2, .L262+4
 2598 003c 1368     		ldr	r3, [r2]
 2599              	.LVL189:
  87:src/menu.c    ****     current_menu = default_menu;
 2600              		.loc 1 87 3 is_stmt 1 view .LVU677
  87:src/menu.c    ****     current_menu = default_menu;
 2601              		.loc 1 87 6 is_stmt 0 view .LVU678
 2602 003e 112B     		cmp	r3, #17
 2603 0040 00F0D880 		beq	.L260
  90:src/menu.c    ****     current_menu = last_menu;
 2604              		.loc 1 90 8 is_stmt 1 view .LVU679
  94:src/menu.c    ****   }
 2605              		.loc 1 94 5 view .LVU680
ARM GAS  /tmp/cc0ERj20.s 			page 71


  94:src/menu.c    ****   }
 2606              		.loc 1 94 18 is_stmt 0 view .LVU681
 2607 0044 1121     		movs	r1, #17
  96:src/menu.c    **** }
 2608              		.loc 1 96 6 view .LVU682
 2609 0046 092B     		cmp	r3, #9
  94:src/menu.c    ****   }
 2610              		.loc 1 94 18 view .LVU683
 2611 0048 1160     		str	r1, [r2]
  96:src/menu.c    **** }
 2612              		.loc 1 96 3 is_stmt 1 view .LVU684
  96:src/menu.c    **** }
 2613              		.loc 1 96 6 is_stmt 0 view .LVU685
 2614 004a 02D0     		beq	.L251
  96:src/menu.c    **** }
 2615              		.loc 1 96 17 view .LVU686
 2616 004c 102B     		cmp	r3, #16
 2617 004e 40F0D480 		bne	.L250
 2618              	.L251:
 2619              	.LVL190:
  96:src/menu.c    **** }
 2620              		.loc 1 96 17 view .LVU687
 2621              	.LBE109:
 2622              	.LBE108:
 403:src/console.c ****       reset_shift();
 2623              		.loc 2 403 7 is_stmt 1 view .LVU688
 2624 0052 FFF7FEFF 		bl	reset_shift
 2625              	.LVL191:
 2626              		.loc 2 403 7 is_stmt 0 view .LVU689
 2627 0056 9AE0     		b	.L229
 2628              	.LVL192:
 2629              	.L245:
 341:src/console.c ****     do_now (K_RELEASE,0); // release
 2630              		.loc 2 341 5 is_stmt 1 view .LVU690
 2631              	.LBB111:
 2632              	.LBI111:
 331:src/console.c ****   struct _ndmap temp;
 2633              		.loc 2 331 6 view .LVU691
 2634              	.LBB112:
 332:src/console.c ****   temp.key_34s = key;
 2635              		.loc 2 332 3 view .LVU692
 333:src/console.c ****   temp.shift = shift;
 2636              		.loc 2 333 3 view .LVU693
 333:src/console.c ****   temp.shift = shift;
 2637              		.loc 2 333 16 is_stmt 0 view .LVU694
 2638 0058 0723     		movs	r3, #7
 334:src/console.c ****   process_keycode_with_shift (temp);
 2639              		.loc 2 334 14 view .LVU695
 2640 005a 0026     		movs	r6, #0
 333:src/console.c ****   temp.shift = shift;
 2641              		.loc 2 333 16 view .LVU696
 2642 005c 8DF80830 		strb	r3, [sp, #8]
 334:src/console.c ****   process_keycode_with_shift (temp);
 2643              		.loc 2 334 3 is_stmt 1 view .LVU697
 335:src/console.c **** }
 2644              		.loc 2 335 3 is_stmt 0 view .LVU698
 2645 0060 0DF10808 		add	r8, sp, #8
ARM GAS  /tmp/cc0ERj20.s 			page 72


 334:src/console.c ****   process_keycode_with_shift (temp);
 2646              		.loc 2 334 14 view .LVU699
 2647 0064 0396     		str	r6, [sp, #12]
 335:src/console.c **** }
 2648              		.loc 2 335 3 is_stmt 1 view .LVU700
 2649 0066 98E80300 		ldm	r8, {r0, r1}
 2650              	.LVL193:
 335:src/console.c **** }
 2651              		.loc 2 335 3 is_stmt 0 view .LVU701
 2652              	.LBE112:
 2653              	.LBE111:
 2654              	.LBB114:
 2655              	.LBB115:
 333:src/console.c ****   temp.shift = shift;
 2656              		.loc 2 333 16 view .LVU702
 2657 006a 6327     		movs	r7, #99
 2658              	.LBE115:
 2659              	.LBE114:
 2660              	.LBB117:
 2661              	.LBB113:
 335:src/console.c **** }
 2662              		.loc 2 335 3 view .LVU703
 2663 006c FFF7FEFF 		bl	process_keycode_with_shift
 2664              	.LVL194:
 335:src/console.c **** }
 2665              		.loc 2 335 3 view .LVU704
 2666              	.LBE113:
 2667              	.LBE117:
 342:src/console.c ****     do_now (K15,0); // TAN key
 2668              		.loc 2 342 5 is_stmt 1 view .LVU705
 2669              	.LBB118:
 2670              	.LBI114:
 331:src/console.c ****   struct _ndmap temp;
 2671              		.loc 2 331 6 view .LVU706
 2672              	.LBB116:
 332:src/console.c ****   temp.key_34s = key;
 2673              		.loc 2 332 3 view .LVU707
 333:src/console.c ****   temp.shift = shift;
 2674              		.loc 2 333 3 view .LVU708
 334:src/console.c ****   process_keycode_with_shift (temp);
 2675              		.loc 2 334 14 is_stmt 0 view .LVU709
 2676 0070 0396     		str	r6, [sp, #12]
 333:src/console.c ****   temp.shift = shift;
 2677              		.loc 2 333 16 view .LVU710
 2678 0072 8DF80870 		strb	r7, [sp, #8]
 334:src/console.c ****   process_keycode_with_shift (temp);
 2679              		.loc 2 334 3 is_stmt 1 view .LVU711
 335:src/console.c **** }
 2680              		.loc 2 335 3 view .LVU712
 2681 0076 98E80300 		ldm	r8, {r0, r1}
 2682 007a FFF7FEFF 		bl	process_keycode_with_shift
 2683              	.LVL195:
 335:src/console.c **** }
 2684              		.loc 2 335 3 is_stmt 0 view .LVU713
 2685              	.LBE116:
 2686              	.LBE118:
 343:src/console.c ****     r.key_34s = K_RELEASE;
ARM GAS  /tmp/cc0ERj20.s 			page 73


 2687              		.loc 2 343 5 is_stmt 1 view .LVU714
 2688              	.LBB119:
 2689              	.LBI119:
 331:src/console.c ****   struct _ndmap temp;
 2690              		.loc 2 331 6 view .LVU715
 2691              	.LBB120:
 332:src/console.c ****   temp.key_34s = key;
 2692              		.loc 2 332 3 view .LVU716
 333:src/console.c ****   temp.shift = shift;
 2693              		.loc 2 333 3 view .LVU717
 333:src/console.c ****   temp.shift = shift;
 2694              		.loc 2 333 16 is_stmt 0 view .LVU718
 2695 007e 0B23     		movs	r3, #11
 2696 0080 8DF80830 		strb	r3, [sp, #8]
 334:src/console.c ****   process_keycode_with_shift (temp);
 2697              		.loc 2 334 3 is_stmt 1 view .LVU719
 335:src/console.c **** }
 2698              		.loc 2 335 3 view .LVU720
 334:src/console.c ****   process_keycode_with_shift (temp);
 2699              		.loc 2 334 14 is_stmt 0 view .LVU721
 2700 0084 0396     		str	r6, [sp, #12]
 335:src/console.c **** }
 2701              		.loc 2 335 3 view .LVU722
 2702 0086 98E80300 		ldm	r8, {r0, r1}
 2703 008a FFF7FEFF 		bl	process_keycode_with_shift
 2704              	.LVL196:
 335:src/console.c **** }
 2705              		.loc 2 335 3 view .LVU723
 2706              	.LBE120:
 2707              	.LBE119:
 344:src/console.c ****     r.shift = 0; // set up for release;
 2708              		.loc 2 344 5 is_stmt 1 view .LVU724
 345:src/console.c ****     break;
 2709              		.loc 2 345 5 view .LVU725
 346:src/console.c ****   case ONSTO: // flash_backup()
 2710              		.loc 2 346 5 view .LVU726
 345:src/console.c ****     break;
 2711              		.loc 2 345 13 is_stmt 0 view .LVU727
 2712 008e 3146     		mov	r1, r6
 344:src/console.c ****     r.shift = 0; // set up for release;
 2713              		.loc 2 344 15 view .LVU728
 2714 0090 3B46     		mov	r3, r7
 2715              	.LVL197:
 2716              	.L246:
 404:src/console.c ****     }
 405:src/console.c ****     else {
 406:src/console.c ****       do_now (K10, 1);
 407:src/console.c ****       do_now (K_RELEASE, 0);
 408:src/console.c ****       r = no_key;
 409:src/console.c ****     }
 410:src/console.c ****   default:
 411:src/console.c ****     r = no_key;
 412:src/console.c ****   }
 413:src/console.c ****   return r;
 2717              		.loc 2 413 3 is_stmt 1 view .LVU729
 2718              		.loc 2 413 10 is_stmt 0 view .LVU730
 2719 0092 8DF80030 		strb	r3, [sp]
ARM GAS  /tmp/cc0ERj20.s 			page 74


 2720 0096 0191     		str	r1, [sp, #4]
 2721 0098 94E80300 		ldm	r4, {r0, r1}
 2722              	.LVL198:
 2723              		.loc 2 413 10 view .LVU731
 2724 009c 85E80300 		stm	r5, {r0, r1}
 414:src/console.c **** }
 2725              		.loc 2 414 1 view .LVU732
 2726 00a0 2846     		mov	r0, r5
 2727 00a2 04B0     		add	sp, sp, #16
 2728              		.cfi_remember_state
 2729              		.cfi_def_cfa_offset 24
 2730              		@ sp needed
 2731 00a4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2732              	.LVL199:
 2733              	.L244:
 2734              		.cfi_restore_state
 348:src/console.c ****     r = no_key;
 2735              		.loc 2 348 5 is_stmt 1 view .LVU733
 2736 00a8 AD20     		movs	r0, #173
 2737              	.LVL200:
 348:src/console.c ****     r = no_key;
 2738              		.loc 2 348 5 is_stmt 0 view .LVU734
 2739 00aa FFF7FEFF 		bl	flash_backup
 2740              	.LVL201:
 349:src/console.c ****     break;
 2741              		.loc 2 349 5 is_stmt 1 view .LVU735
 349:src/console.c ****     break;
 2742              		.loc 2 349 7 is_stmt 0 view .LVU736
 2743 00ae 564B     		ldr	r3, .L262+8
 2744 00b0 93E80300 		ldm	r3, {r0, r1}
 2745 00b4 84E80300 		stm	r4, {r0, r1}
 2746 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2747              	.LVL202:
 350:src/console.c ****   case ONRCL: // flash_restore()
 2748              		.loc 2 350 5 is_stmt 1 view .LVU737
 2749 00ba EAE7     		b	.L246
 2750              	.LVL203:
 2751              	.L243:
 352:src/console.c ****     r = no_key;
 2752              		.loc 2 352 5 view .LVU738
 2753 00bc AE20     		movs	r0, #174
 2754              	.LVL204:
 352:src/console.c ****     r = no_key;
 2755              		.loc 2 352 5 is_stmt 0 view .LVU739
 2756 00be FFF7FEFF 		bl	flash_restore
 2757              	.LVL205:
 353:src/console.c ****     break;
 2758              		.loc 2 353 5 is_stmt 1 view .LVU740
 353:src/console.c ****     break;
 2759              		.loc 2 353 7 is_stmt 0 view .LVU741
 2760 00c2 514B     		ldr	r3, .L262+8
 2761 00c4 93E80300 		ldm	r3, {r0, r1}
 2762 00c8 84E80300 		stm	r4, {r0, r1}
 2763 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2764              	.LVL206:
 354:src/console.c ****   case WRLIB: // save library file
 2765              		.loc 2 354 5 is_stmt 1 view .LVU742
ARM GAS  /tmp/cc0ERj20.s 			page 75


 2766 00ce E0E7     		b	.L246
 2767              	.LVL207:
 2768              	.L242:
 356:src/console.c ****     r = no_key;
 2769              		.loc 2 356 5 view .LVU743
 2770 00d0 0120     		movs	r0, #1
 2771              	.LVL208:
 356:src/console.c ****     r = no_key;
 2772              		.loc 2 356 5 is_stmt 0 view .LVU744
 2773 00d2 FFF7FEFF 		bl	save_lib_file
 2774              	.LVL209:
 357:src/console.c ****     break;
 2775              		.loc 2 357 5 is_stmt 1 view .LVU745
 357:src/console.c ****     break;
 2776              		.loc 2 357 7 is_stmt 0 view .LVU746
 2777 00d6 4C4B     		ldr	r3, .L262+8
 2778 00d8 93E80300 		ldm	r3, {r0, r1}
 2779 00dc 84E80300 		stm	r4, {r0, r1}
 2780 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2781              	.LVL210:
 358:src/console.c ****   case LLIB: // load library file
 2782              		.loc 2 358 5 is_stmt 1 view .LVU747
 2783 00e2 D6E7     		b	.L246
 2784              	.LVL211:
 2785              	.L241:
 360:src/console.c ****     r = no_key;
 2786              		.loc 2 360 5 view .LVU748
 2787 00e4 0120     		movs	r0, #1
 2788              	.LVL212:
 360:src/console.c ****     r = no_key;
 2789              		.loc 2 360 5 is_stmt 0 view .LVU749
 2790 00e6 FFF7FEFF 		bl	load_lib_file
 2791              	.LVL213:
 361:src/console.c ****     break;
 2792              		.loc 2 361 5 is_stmt 1 view .LVU750
 361:src/console.c ****     break;
 2793              		.loc 2 361 7 is_stmt 0 view .LVU751
 2794 00ea 474B     		ldr	r3, .L262+8
 2795 00ec 93E80300 		ldm	r3, {r0, r1}
 2796 00f0 84E80300 		stm	r4, {r0, r1}
 2797 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2798              	.LVL214:
 362:src/console.c ****   case WRTST: // save state file
 2799              		.loc 2 362 5 is_stmt 1 view .LVU752
 2800 00f6 CCE7     		b	.L246
 2801              	.LVL215:
 2802              	.L240:
 364:src/console.c ****     r = no_key;
 2803              		.loc 2 364 5 view .LVU753
 2804 00f8 0120     		movs	r0, #1
 2805              	.LVL216:
 364:src/console.c ****     r = no_key;
 2806              		.loc 2 364 5 is_stmt 0 view .LVU754
 2807 00fa FFF7FEFF 		bl	save_ram_file
 2808              	.LVL217:
 365:src/console.c ****     break;
 2809              		.loc 2 365 5 is_stmt 1 view .LVU755
ARM GAS  /tmp/cc0ERj20.s 			page 76


 365:src/console.c ****     break;
 2810              		.loc 2 365 7 is_stmt 0 view .LVU756
 2811 00fe 424B     		ldr	r3, .L262+8
 2812 0100 93E80300 		ldm	r3, {r0, r1}
 2813 0104 84E80300 		stm	r4, {r0, r1}
 2814 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2815              	.LVL218:
 366:src/console.c ****   case LDST:
 2816              		.loc 2 366 5 is_stmt 1 view .LVU757
 2817 010a C2E7     		b	.L246
 2818              	.LVL219:
 2819              	.L239:
 368:src/console.c ****     r = no_key;
 2820              		.loc 2 368 5 view .LVU758
 2821 010c 0120     		movs	r0, #1
 2822              	.LVL220:
 368:src/console.c ****     r = no_key;
 2823              		.loc 2 368 5 is_stmt 0 view .LVU759
 2824 010e FFF7FEFF 		bl	load_ram_file
 2825              	.LVL221:
 369:src/console.c ****     break;
 2826              		.loc 2 369 5 is_stmt 1 view .LVU760
 369:src/console.c ****     break;
 2827              		.loc 2 369 7 is_stmt 0 view .LVU761
 2828 0112 3D4B     		ldr	r3, .L262+8
 2829 0114 93E80300 		ldm	r3, {r0, r1}
 2830 0118 84E80300 		stm	r4, {r0, r1}
 2831 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2832              	.LVL222:
 370:src/console.c ****   case LDPRG:
 2833              		.loc 2 370 5 is_stmt 1 view .LVU762
 2834 011e B8E7     		b	.L246
 2835              	.LVL223:
 2836              	.L238:
 372:src/console.c ****     r = no_key;
 2837              		.loc 2 372 5 view .LVU763
 2838 0120 FFF7FEFF 		bl	load_prog_file
 2839              	.LVL224:
 373:src/console.c ****     break;
 2840              		.loc 2 373 5 view .LVU764
 373:src/console.c ****     break;
 2841              		.loc 2 373 7 is_stmt 0 view .LVU765
 2842 0124 384B     		ldr	r3, .L262+8
 2843 0126 93E80300 		ldm	r3, {r0, r1}
 2844 012a 84E80300 		stm	r4, {r0, r1}
 2845 012e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2846              	.LVL225:
 374:src/console.c ****   case SVPRG:
 2847              		.loc 2 374 5 is_stmt 1 view .LVU766
 2848 0130 AFE7     		b	.L246
 2849              	.LVL226:
 2850              	.L237:
 380:src/console.c ****     r = no_key;
 2851              		.loc 2 380 5 view .LVU767
 2852 0132 364B     		ldr	r3, .L262+12
 2853 0134 3648     		ldr	r0, .L262+16
 2854              	.LVL227:
ARM GAS  /tmp/cc0ERj20.s 			page 77


 380:src/console.c ****     r = no_key;
 2855              		.loc 2 380 5 is_stmt 0 view .LVU768
 2856 0136 9847     		blx	r3
 2857              	.LVL228:
 381:src/console.c ****     break;
 2858              		.loc 2 381 5 is_stmt 1 view .LVU769
 381:src/console.c ****     break;
 2859              		.loc 2 381 7 is_stmt 0 view .LVU770
 2860 0138 334B     		ldr	r3, .L262+8
 2861 013a 93E80300 		ldm	r3, {r0, r1}
 2862 013e 84E80300 		stm	r4, {r0, r1}
 2863 0142 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2864              	.LVL229:
 382:src/console.c ****   case DOTS:
 2865              		.loc 2 382 5 is_stmt 1 view .LVU771
 2866 0144 A5E7     		b	.L246
 2867              	.LVL230:
 2868              	.L236:
 376:src/console.c ****     r = no_key;
 2869              		.loc 2 376 5 view .LVU772
 2870 0146 FFF7FEFF 		bl	save_prog_file
 2871              	.LVL231:
 377:src/console.c ****     break;
 2872              		.loc 2 377 5 view .LVU773
 377:src/console.c ****     break;
 2873              		.loc 2 377 7 is_stmt 0 view .LVU774
 2874 014a 2F4B     		ldr	r3, .L262+8
 2875 014c 93E80300 		ldm	r3, {r0, r1}
 2876 0150 84E80300 		stm	r4, {r0, r1}
 2877 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2878              	.LVL232:
 378:src/console.c ****   case HELP:
 2879              		.loc 2 378 5 is_stmt 1 view .LVU775
 2880 0156 9CE7     		b	.L246
 2881              	.LVL233:
 2882              	.L235:
 384:src/console.c ****     r = no_key;
 2883              		.loc 2 384 5 view .LVU776
 2884 0158 FFF7FEFF 		bl	do_all_dots
 2885              	.LVL234:
 385:src/console.c ****     break;
 2886              		.loc 2 385 5 view .LVU777
 385:src/console.c ****     break;
 2887              		.loc 2 385 7 is_stmt 0 view .LVU778
 2888 015c 2A4B     		ldr	r3, .L262+8
 2889 015e 93E80300 		ldm	r3, {r0, r1}
 2890 0162 84E80300 		stm	r4, {r0, r1}
 2891 0166 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2892              	.LVL235:
 386:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 2893              		.loc 2 386 5 is_stmt 1 view .LVU779
 2894 0168 93E7     		b	.L246
 2895              	.LVL236:
 2896              	.L234:
 388:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 2897              		.loc 2 388 5 view .LVU780
 2898              	.LBB121:
ARM GAS  /tmp/cc0ERj20.s 			page 78


 2899              	.LBI121:
 331:src/console.c ****   struct _ndmap temp;
 2900              		.loc 2 331 6 view .LVU781
 2901              	.LBB122:
 332:src/console.c ****   temp.key_34s = key;
 2902              		.loc 2 332 3 view .LVU782
 333:src/console.c ****   temp.shift = shift;
 2903              		.loc 2 333 3 view .LVU783
 333:src/console.c ****   temp.shift = shift;
 2904              		.loc 2 333 16 is_stmt 0 view .LVU784
 2905 016a 6323     		movs	r3, #99
 334:src/console.c ****   process_keycode_with_shift (temp);
 2906              		.loc 2 334 14 view .LVU785
 2907 016c 0027     		movs	r7, #0
 333:src/console.c ****   temp.shift = shift;
 2908              		.loc 2 333 16 view .LVU786
 2909 016e 8DF80830 		strb	r3, [sp, #8]
 334:src/console.c ****   process_keycode_with_shift (temp);
 2910              		.loc 2 334 3 is_stmt 1 view .LVU787
 334:src/console.c ****   process_keycode_with_shift (temp);
 2911              		.loc 2 334 14 is_stmt 0 view .LVU788
 2912 0172 0397     		str	r7, [sp, #12]
 335:src/console.c **** }
 2913              		.loc 2 335 3 is_stmt 1 view .LVU789
 2914 0174 02AE     		add	r6, sp, #8
 2915 0176 96E80300 		ldm	r6, {r0, r1}
 2916              	.LVL237:
 335:src/console.c **** }
 2917              		.loc 2 335 3 is_stmt 0 view .LVU790
 2918 017a FFF7FEFF 		bl	process_keycode_with_shift
 2919              	.LVL238:
 335:src/console.c **** }
 2920              		.loc 2 335 3 view .LVU791
 2921              	.LBE122:
 2922              	.LBE121:
 389:src/console.c ****     r = no_key;
 2923              		.loc 2 389 5 is_stmt 1 view .LVU792
 2924              	.LBB123:
 2925              	.LBI123:
 331:src/console.c ****   struct _ndmap temp;
 2926              		.loc 2 331 6 view .LVU793
 2927              	.LBB124:
 332:src/console.c ****   temp.key_34s = key;
 2928              		.loc 2 332 3 view .LVU794
 333:src/console.c ****   temp.shift = shift;
 2929              		.loc 2 333 3 view .LVU795
 333:src/console.c ****   temp.shift = shift;
 2930              		.loc 2 333 16 is_stmt 0 view .LVU796
 2931 017e 3323     		movs	r3, #51
 334:src/console.c ****   process_keycode_with_shift (temp);
 2932              		.loc 2 334 14 view .LVU797
 2933 0180 0397     		str	r7, [sp, #12]
 333:src/console.c ****   temp.shift = shift;
 2934              		.loc 2 333 16 view .LVU798
 2935 0182 8DF80830 		strb	r3, [sp, #8]
 334:src/console.c ****   process_keycode_with_shift (temp);
 2936              		.loc 2 334 3 is_stmt 1 view .LVU799
ARM GAS  /tmp/cc0ERj20.s 			page 79


 335:src/console.c **** }
 2937              		.loc 2 335 3 view .LVU800
 2938 0186 96E80300 		ldm	r6, {r0, r1}
 2939              	.LVL239:
 2940              	.L259:
 335:src/console.c **** }
 2941              		.loc 2 335 3 is_stmt 0 view .LVU801
 2942              	.LBE124:
 2943              	.LBE123:
 2944              	.LBB125:
 2945              	.LBB126:
 2946 018a FFF7FEFF 		bl	process_keycode_with_shift
 2947              	.LVL240:
 2948              	.LBE126:
 2949              	.LBE125:
 408:src/console.c ****     }
 2950              		.loc 2 408 7 is_stmt 1 view .LVU802
 2951              	.L229:
 411:src/console.c ****   }
 2952              		.loc 2 411 5 view .LVU803
 411:src/console.c ****   }
 2953              		.loc 2 411 7 is_stmt 0 view .LVU804
 2954 018e 1E4B     		ldr	r3, .L262+8
 2955 0190 93E80300 		ldm	r3, {r0, r1}
 2956 0194 84E80300 		stm	r4, {r0, r1}
 2957 0198 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2958              	.LVL241:
 411:src/console.c ****   }
 2959              		.loc 2 411 7 view .LVU805
 2960 019a 7AE7     		b	.L246
 2961              	.LVL242:
 2962              	.L233:
 393:src/console.c ****     r = f_shift; // clears f-shift that called this function
 2963              		.loc 2 393 5 is_stmt 1 view .LVU806
 2964              	.LBB128:
 2965              	.LBI128:
 103:src/menu.c    ****   if (current_menu == default_menu) {
 2966              		.loc 1 103 6 view .LVU807
 2967              	.LBB129:
 104:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2968              		.loc 1 104 3 view .LVU808
 104:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2969              		.loc 1 104 20 is_stmt 0 view .LVU809
 2970 019c 1D49     		ldr	r1, .L262+20
 2971 019e 194A     		ldr	r2, .L262+4
 2972 01a0 0868     		ldr	r0, [r1]
 2973              	.LVL243:
 104:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2974              		.loc 1 104 6 view .LVU810
 2975 01a2 1368     		ldr	r3, [r2]
 2976 01a4 8342     		cmp	r3, r0
 2977 01a6 0FD0     		beq	.L261
 2978              	.L247:
 2979              	.LBE129:
 2980              	.LBE128:
 394:src/console.c ****     break;
 2981              		.loc 2 394 5 is_stmt 1 view .LVU811
ARM GAS  /tmp/cc0ERj20.s 			page 80


 394:src/console.c ****     break;
 2982              		.loc 2 394 7 is_stmt 0 view .LVU812
 2983 01a8 1B4B     		ldr	r3, .L262+24
 2984 01aa 93E80300 		ldm	r3, {r0, r1}
 2985 01ae 84E80300 		stm	r4, {r0, r1}
 2986 01b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2987              	.LVL244:
 395:src/console.c ****   case SETUMEN:
 2988              		.loc 2 395 5 is_stmt 1 view .LVU813
 2989 01b4 6DE7     		b	.L246
 2990              	.LVL245:
 2991              	.L232:
 397:src/console.c ****     r = g_shift;
 2992              		.loc 2 397 5 view .LVU814
 2993 01b6 FFF7FEFF 		bl	build_user_menu
 2994              	.LVL246:
 398:src/console.c ****     break;
 2995              		.loc 2 398 5 view .LVU815
 398:src/console.c ****     break;
 2996              		.loc 2 398 7 is_stmt 0 view .LVU816
 2997 01ba 184B     		ldr	r3, .L262+28
 2998 01bc 93E80300 		ldm	r3, {r0, r1}
 2999 01c0 84E80300 		stm	r4, {r0, r1}
 3000 01c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3001              	.LVL247:
 399:src/console.c ****   case KCPX:
 3002              		.loc 2 399 5 is_stmt 1 view .LVU817
 3003 01c6 64E7     		b	.L246
 3004              	.LVL248:
 3005              	.L261:
 3006              	.LBB131:
 3007              	.LBB130:
 105:src/menu.c    ****   }
 3008              		.loc 1 105 5 view .LVU818
 105:src/menu.c    ****   }
 3009              		.loc 1 105 38 is_stmt 0 view .LVU819
 3010 01c8 C3F10F03 		rsb	r3, r3, #15
 105:src/menu.c    ****   }
 3011              		.loc 1 105 33 view .LVU820
 3012 01cc 0B60     		str	r3, [r1]
 105:src/menu.c    ****   }
 3013              		.loc 1 105 18 view .LVU821
 3014 01ce 1360     		str	r3, [r2]
 3015 01d0 EAE7     		b	.L247
 3016              	.LVL249:
 3017              	.L248:
 105:src/menu.c    ****   }
 3018              		.loc 1 105 18 view .LVU822
 3019              	.LBE130:
 3020              	.LBE131:
 406:src/console.c ****       do_now (K_RELEASE, 0);
 3021              		.loc 2 406 7 is_stmt 1 view .LVU823
 3022              	.LBB132:
 3023              	.LBI132:
 331:src/console.c ****   struct _ndmap temp;
 3024              		.loc 2 331 6 view .LVU824
 3025              	.LBB133:
ARM GAS  /tmp/cc0ERj20.s 			page 81


 332:src/console.c ****   temp.key_34s = key;
 3026              		.loc 2 332 3 view .LVU825
 333:src/console.c ****   temp.shift = shift;
 3027              		.loc 2 333 3 view .LVU826
 334:src/console.c ****   process_keycode_with_shift (temp);
 3028              		.loc 2 334 14 is_stmt 0 view .LVU827
 3029 01d2 0123     		movs	r3, #1
 333:src/console.c ****   temp.shift = shift;
 3030              		.loc 2 333 16 view .LVU828
 3031 01d4 0622     		movs	r2, #6
 334:src/console.c ****   process_keycode_with_shift (temp);
 3032              		.loc 2 334 14 view .LVU829
 3033 01d6 0393     		str	r3, [sp, #12]
 333:src/console.c ****   temp.shift = shift;
 3034              		.loc 2 333 16 view .LVU830
 3035 01d8 8DF80820 		strb	r2, [sp, #8]
 334:src/console.c ****   process_keycode_with_shift (temp);
 3036              		.loc 2 334 3 is_stmt 1 view .LVU831
 335:src/console.c **** }
 3037              		.loc 2 335 3 view .LVU832
 3038 01dc 02AF     		add	r7, sp, #8
 3039 01de 97E80300 		ldm	r7, {r0, r1}
 3040              	.LVL250:
 335:src/console.c **** }
 3041              		.loc 2 335 3 is_stmt 0 view .LVU833
 3042 01e2 FFF7FEFF 		bl	process_keycode_with_shift
 3043              	.LVL251:
 335:src/console.c **** }
 3044              		.loc 2 335 3 view .LVU834
 3045              	.LBE133:
 3046              	.LBE132:
 407:src/console.c ****       r = no_key;
 3047              		.loc 2 407 7 is_stmt 1 view .LVU835
 3048              	.LBB134:
 3049              	.LBI125:
 331:src/console.c ****   struct _ndmap temp;
 3050              		.loc 2 331 6 view .LVU836
 3051              	.LBB127:
 332:src/console.c ****   temp.key_34s = key;
 3052              		.loc 2 332 3 view .LVU837
 333:src/console.c ****   temp.shift = shift;
 3053              		.loc 2 333 3 view .LVU838
 333:src/console.c ****   temp.shift = shift;
 3054              		.loc 2 333 16 is_stmt 0 view .LVU839
 3055 01e6 6323     		movs	r3, #99
 334:src/console.c ****   process_keycode_with_shift (temp);
 3056              		.loc 2 334 14 view .LVU840
 3057 01e8 0396     		str	r6, [sp, #12]
 333:src/console.c ****   temp.shift = shift;
 3058              		.loc 2 333 16 view .LVU841
 3059 01ea 8DF80830 		strb	r3, [sp, #8]
 334:src/console.c ****   process_keycode_with_shift (temp);
 3060              		.loc 2 334 3 is_stmt 1 view .LVU842
 335:src/console.c **** }
 3061              		.loc 2 335 3 view .LVU843
 3062 01ee 97E80300 		ldm	r7, {r0, r1}
 3063 01f2 CAE7     		b	.L259
ARM GAS  /tmp/cc0ERj20.s 			page 82


 3064              	.LVL252:
 3065              	.L260:
 335:src/console.c **** }
 3066              		.loc 2 335 3 is_stmt 0 view .LVU844
 3067              	.LBE127:
 3068              	.LBE134:
 3069              	.LBB135:
 3070              	.LBB110:
  88:src/menu.c    ****   }
 3071              		.loc 1 88 5 is_stmt 1 view .LVU845
  88:src/menu.c    ****   }
 3072              		.loc 1 88 18 is_stmt 0 view .LVU846
 3073 01f4 0749     		ldr	r1, .L262+20
 3074 01f6 0968     		ldr	r1, [r1]
 3075 01f8 1160     		str	r1, [r2]
  96:src/menu.c    **** }
 3076              		.loc 1 96 3 is_stmt 1 view .LVU847
 3077              	.L250:
  96:src/menu.c    **** }
 3078              		.loc 1 96 32 view .LVU848
  96:src/menu.c    **** }
 3079              		.loc 1 96 42 is_stmt 0 view .LVU849
 3080 01fa 094A     		ldr	r2, .L262+32
 3081 01fc 1360     		str	r3, [r2]
 3082 01fe 28E7     		b	.L251
 3083              	.L263:
 3084              		.align	2
 3085              	.L262:
 3086 0200 00000000 		.word	main_ram
 3087 0204 00000000 		.word	.LANCHOR1
 3088 0208 00000000 		.word	.LANCHOR11
 3089 020c 49040008 		.word	134218825
 3090 0210 00000000 		.word	.LC11
 3091 0214 00000000 		.word	.LANCHOR2
 3092 0218 00000000 		.word	.LANCHOR12
 3093 021c 00000000 		.word	.LANCHOR13
 3094 0220 00000000 		.word	.LANCHOR3
 3095              	.LBE110:
 3096              	.LBE135:
 3097              		.cfi_endproc
 3098              	.LFE30:
 3100              		.section	.text.program_main,"ax",%progbits
 3101              		.align	1
 3102              		.p2align 2,,3
 3103              		.global	program_main
 3104              		.syntax unified
 3105              		.thumb
 3106              		.thumb_func
 3107              		.fpu fpv4-sp-d16
 3109              	program_main:
 3110              	.LFB31:
 415:src/console.c **** 
 416:src/console.c **** void program_main(){
 3111              		.loc 2 416 20 is_stmt 1 view -0
 3112              		.cfi_startproc
 3113              		@ args = 0, pretend = 0, frame = 16
 3114              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc0ERj20.s 			page 83


 417:src/console.c ****   int c;
 3115              		.loc 2 417 3 view .LVU851
 418:src/console.c ****   struct _ndmap remapped;
 3116              		.loc 2 418 3 view .LVU852
 419:src/console.c **** 
 420:src/console.c ****   init_mem();
 3117              		.loc 2 420 3 view .LVU853
 416:src/console.c ****   int c;
 3118              		.loc 2 416 20 is_stmt 0 view .LVU854
 3119 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3120              		.cfi_def_cfa_offset 36
 3121              		.cfi_offset 4, -36
 3122              		.cfi_offset 5, -32
 3123              		.cfi_offset 6, -28
 3124              		.cfi_offset 7, -24
 3125              		.cfi_offset 8, -20
 3126              		.cfi_offset 9, -16
 3127              		.cfi_offset 10, -12
 3128              		.cfi_offset 11, -8
 3129              		.cfi_offset 14, -4
 3130 0004 85B0     		sub	sp, sp, #20
 3131              		.cfi_def_cfa_offset 56
 3132              		.loc 2 420 3 view .LVU855
 3133 0006 FFF7FEFF 		bl	init_mem
 3134              	.LVL253:
 421:src/console.c ****   init_RegionTab();
 3135              		.loc 2 421 3 is_stmt 1 view .LVU856
 3136 000a FFF7FEFF 		bl	init_RegionTab
 3137              	.LVL254:
 422:src/console.c ****   init_34s();
 3138              		.loc 2 422 3 view .LVU857
 3139 000e FFF7FEFF 		bl	init_34s
 3140              	.LVL255:
 423:src/console.c ****   State2.flags = 1;  
 3141              		.loc 2 423 3 view .LVU858
 3142              		.loc 2 423 16 is_stmt 0 view .LVU859
 3143 0012 A74A     		ldr	r2, .L388
 3144 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3145 0016 43F00103 		orr	r3, r3, #1
 3146 001a 1376     		strb	r3, [r2, #24]
 424:src/console.c ****   check_create_wp34sdir();
 3147              		.loc 2 424 3 is_stmt 1 view .LVU860
 3148 001c FFF7FEFF 		bl	check_create_wp34sdir
 3149              	.LVL256:
 425:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3150              		.loc 2 425 3 view .LVU861
 3151              		.loc 2 425 8 is_stmt 0 view .LVU862
 3152 0020 0020     		movs	r0, #0
 3153 0022 FFF7FEFF 		bl	load_ram_file
 3154              	.LVL257:
 3155              		.loc 2 425 6 view .LVU863
 3156 0026 08B9     		cbnz	r0, .L265
 3157              		.loc 2 425 26 is_stmt 1 discriminator 1 view .LVU864
 3158              		.loc 2 425 34 is_stmt 0 discriminator 1 view .LVU865
 3159 0028 A24B     		ldr	r3, .L388+4
 3160 002a 1860     		str	r0, [r3]
 3161              	.L265:
ARM GAS  /tmp/cc0ERj20.s 			page 84


 426:src/console.c ****   load_backup_file(0);
 3162              		.loc 2 426 3 is_stmt 1 view .LVU866
 427:src/console.c ****   load_lib_file(0);
 428:src/console.c ****   t20->newln = 0;
 3163              		.loc 2 428 3 is_stmt 0 view .LVU867
 3164 002c A24C     		ldr	r4, .L388+8
 3165              	.LBB151:
 3166              	.LBB152:
 118:src/menu.c    **** }
 3167              		.loc 1 118 3 view .LVU868
 3168 002e A34E     		ldr	r6, .L388+12
 3169              	.LBE152:
 3170              	.LBE151:
 3171              	.LBB154:
 3172              	.LBB155:
  93:src/console.c ****     }
 3173              		.loc 2 93 58 view .LVU869
 3174 0030 DFF808B3 		ldr	fp, .L388+140
 3175              	.LBE155:
 3176              	.LBE154:
 426:src/console.c ****   load_lib_file(0);
 3177              		.loc 2 426 3 view .LVU870
 3178 0034 0020     		movs	r0, #0
 3179 0036 FFF7FEFF 		bl	load_backup_file
 3180              	.LVL258:
 427:src/console.c ****   t20->newln = 0;
 3181              		.loc 2 427 3 is_stmt 1 view .LVU871
 3182 003a 0020     		movs	r0, #0
 3183 003c FFF7FEFF 		bl	load_lib_file
 3184              	.LVL259:
 3185              		.loc 2 428 3 view .LVU872
 3186 0040 236B     		ldr	r3, [r4, #48]
 429:src/console.c ****   t20->lnfill = 0;
 3187              		.loc 2 429 3 view .LVU873
 430:src/console.c ****   t20->fixed = 1;
 3188              		.loc 2 430 3 view .LVU874
 431:src/console.c ****   t20->xspc = -2;
 432:src/console.c ****   t20->bgfill = 0;
 433:src/console.c ****   run_menu_item_app = run_menu_item;
 3189              		.loc 2 433 21 is_stmt 0 view .LVU875
 3190 0042 9F49     		ldr	r1, .L388+16
 434:src/console.c ****   menu_line_str_app = menu_line_str;
 3191              		.loc 2 434 21 view .LVU876
 3192 0044 9F4A     		ldr	r2, .L388+20
 430:src/console.c ****   t20->fixed = 1;
 3193              		.loc 2 430 14 view .LVU877
 3194 0046 0120     		movs	r0, #1
 3195 0048 1874     		strb	r0, [r3, #16]
 431:src/console.c ****   t20->xspc = -2;
 3196              		.loc 2 431 3 is_stmt 1 view .LVU878
 432:src/console.c ****   run_menu_item_app = run_menu_item;
 3197              		.loc 2 432 15 is_stmt 0 view .LVU879
 3198 004a 0025     		movs	r5, #0
 431:src/console.c ****   t20->xspc = -2;
 3199              		.loc 2 431 13 view .LVU880
 3200 004c FE20     		movs	r0, #254
 3201 004e 9873     		strb	r0, [r3, #14]
ARM GAS  /tmp/cc0ERj20.s 			page 85


 432:src/console.c ****   run_menu_item_app = run_menu_item;
 3202              		.loc 2 432 3 is_stmt 1 view .LVU881
 432:src/console.c ****   run_menu_item_app = run_menu_item;
 3203              		.loc 2 432 15 is_stmt 0 view .LVU882
 3204 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 428:src/console.c ****   t20->lnfill = 0;
 3205              		.loc 2 428 14 view .LVU883
 3206 0052 1D75     		strb	r5, [r3, #20]
 433:src/console.c ****   menu_line_str_app = menu_line_str;
 3207              		.loc 2 433 3 is_stmt 1 view .LVU884
 3208              		.loc 2 434 21 is_stmt 0 view .LVU885
 3209 0054 C4E90312 		strd	r1, r2, [r4, #12]
 435:src/console.c **** 
 436:src/console.c ****   display();
 3210              		.loc 2 436 3 is_stmt 1 view .LVU886
 3211 0058 FFF7FEFF 		bl	display
 3212              	.LVL260:
 437:src/console.c ****   display_current_menu();
 3213              		.loc 2 437 3 view .LVU887
 3214              	.LBB167:
 3215              	.LBI151:
 117:src/menu.c    ****   display_menu (current_menu);
 3216              		.loc 1 117 6 view .LVU888
 3217              	.LBB153:
 118:src/menu.c    **** }
 3218              		.loc 1 118 3 view .LVU889
 3219 005c 3068     		ldr	r0, [r6]
 3220 005e FFF7FEFF 		bl	display_menu
 3221              	.LVL261:
 3222              	.LBE153:
 3223              	.LBE167:
 438:src/console.c ****   lcd_refresh();
 3224              		.loc 2 438 3 view .LVU890
 3225 0062 994B     		ldr	r3, .L388+24
 3226 0064 9847     		blx	r3
 3227              	.LVL262:
 439:src/console.c ****   JustDisplayed = 0;
 3228              		.loc 2 439 3 view .LVU891
 3229              		.loc 2 439 17 is_stmt 0 view .LVU892
 3230 0066 994B     		ldr	r3, .L388+28
 3231              	.LBB168:
 3232              	.LBB157:
  93:src/console.c ****     }
 3233              		.loc 2 93 58 view .LVU893
 3234 0068 0BF1B808 		add	r8, fp, #184
 3235              	.LBE157:
 3236              	.LBE168:
 3237              		.loc 2 439 17 view .LVU894
 3238 006c 1D60     		str	r5, [r3]
 3239              	.L266:
 440:src/console.c ****   /*
 441:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 442:src/console.c ****     Sleeps peacefully while waiting for a key.
 443:src/console.c ****     Handles (in principle!) turning off and on.
 444:src/console.c ****     =================
 445:src/console.c ****     Main event loop
 446:src/console.c ****     =================
ARM GAS  /tmp/cc0ERj20.s 			page 86


 447:src/console.c **** 
 448:src/console.c ****     Status flags:
 449:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 450:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 451:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 452:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 453:src/console.c ****   */
 454:src/console.c ****   for(;;) {
 3240              		.loc 2 454 3 is_stmt 1 view .LVU895
 455:src/console.c **** 
 456:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 3241              		.loc 2 456 5 view .LVU896
 3242              		.loc 2 456 10 is_stmt 0 view .LVU897
 3243 006e 2368     		ldr	r3, [r4]
 3244              		.loc 2 456 8 view .LVU898
 3245 0070 9B05     		lsls	r3, r3, #22
 3246 0072 5FD5     		bpl	.L267
 3247              		.loc 2 456 30 discriminator 1 view .LVU899
 3248 0074 2368     		ldr	r3, [r4]
 3249              		.loc 2 456 27 discriminator 1 view .LVU900
 3250 0076 5F07     		lsls	r7, r3, #29
 3251 0078 5CD5     		bpl	.L267
 457:src/console.c ****       {
 458:src/console.c **** 	CLR_ST(STAT_RUNNING);
 3252              		.loc 2 458 2 is_stmt 1 view .LVU901
 3253 007a 2368     		ldr	r3, [r4]
 459:src/console.c **** 	sys_sleep();
 3254              		.loc 2 459 2 is_stmt 0 view .LVU902
 3255 007c 944A     		ldr	r2, .L388+32
 458:src/console.c **** 	sys_sleep();
 3256              		.loc 2 458 2 view .LVU903
 3257 007e 23F00203 		bic	r3, r3, #2
 3258 0082 2360     		str	r3, [r4]
 3259              		.loc 2 459 2 is_stmt 1 view .LVU904
 3260 0084 9047     		blx	r2
 3261              	.LVL263:
 3262              	.L268:
 460:src/console.c ****       }
 461:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 462:src/console.c ****     {
 463:src/console.c ****       CLR_ST(STAT_RUNNING);
 464:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 465:src/console.c ****       sys_sleep();
 466:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 467:src/console.c **** 	key_push (K_HEARTBEAT);
 468:src/console.c **** 	if (Pause > 0) Pause--;
 469:src/console.c ****       }
 470:src/console.c ****       sys_timer_disable(0); // stop timer
 471:src/console.c ****     }
 472:src/console.c ****     
 473:src/console.c ****     // Wakeup in off state or going to sleep
 474:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3263              		.loc 2 474 5 view .LVU905
 3264              		.loc 2 474 9 is_stmt 0 view .LVU906
 3265 0086 2368     		ldr	r3, [r4]
 3266              		.loc 2 474 8 view .LVU907
 3267 0088 9D05     		lsls	r5, r3, #22
ARM GAS  /tmp/cc0ERj20.s 			page 87


 3268 008a 79D4     		bmi	.L274
 3269              	.L365:
 3270              		.loc 2 474 29 discriminator 1 view .LVU908
 3271 008c 2368     		ldr	r3, [r4]
 3272              		.loc 2 474 26 discriminator 1 view .LVU909
 3273 008e 5807     		lsls	r0, r3, #29
 3274 0090 76D4     		bmi	.L274
 475:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 476:src/console.c ****         // Going to off mode
 477:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 478:src/console.c ****         draw_power_off_image(1);
 479:src/console.c **** 
 480:src/console.c ****         LCD_power_off(0);
 481:src/console.c ****         SET_ST(STAT_SUSPENDED);
 482:src/console.c ****         SET_ST(STAT_OFF);
 483:src/console.c ****       }
 484:src/console.c ****       // Already in OFF -> just continue to sleep above
 485:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 486:src/console.c ****       // thus reaching the sleep()
 487:src/console.c ****     }
 488:src/console.c **** 
 489:src/console.c ****     // Well, we are woken-up
 490:src/console.c ****     SET_ST(STAT_RUNNING);
 3275              		.loc 2 490 5 is_stmt 1 view .LVU910
 3276 0092 2368     		ldr	r3, [r4]
 3277 0094 43F00203 		orr	r3, r3, #2
 3278 0098 2360     		str	r3, [r4]
 491:src/console.c **** 
 492:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 493:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3279              		.loc 2 493 5 view .LVU911
 3280 009a 2368     		ldr	r3, [r4]
 3281 009c 23F00403 		bic	r3, r3, #4
 3282 00a0 2360     		str	r3, [r4]
 494:src/console.c **** 
 495:src/console.c ****     // Get up from OFF state
 496:src/console.c ****     if ( ST(STAT_OFF) ) {
 3283              		.loc 2 496 5 view .LVU912
 3284              		.loc 2 496 10 is_stmt 0 view .LVU913
 3285 00a2 2368     		ldr	r3, [r4]
 3286              		.loc 2 496 8 view .LVU914
 3287 00a4 D906     		lsls	r1, r3, #27
 3288 00a6 0ED5     		bpl	.L279
 497:src/console.c ****       LCD_power_on();
 3289              		.loc 2 497 7 is_stmt 1 view .LVU915
 3290 00a8 8A4B     		ldr	r3, .L388+36
 3291 00aa 9847     		blx	r3
 3292              	.LVL264:
 498:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3293              		.loc 2 498 7 view .LVU916
 3294 00ac 8A4B     		ldr	r3, .L388+40
 3295 00ae 9847     		blx	r3
 3296              	.LVL265:
 499:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3297              		.loc 2 499 7 view .LVU917
 3298 00b0 8A4B     		ldr	r3, .L388+44
 3299 00b2 9847     		blx	r3
ARM GAS  /tmp/cc0ERj20.s 			page 88


 3300              	.LVL266:
 500:src/console.c **** 
 501:src/console.c ****       CLR_ST(STAT_OFF);
 3301              		.loc 2 501 7 view .LVU918
 3302 00b4 2368     		ldr	r3, [r4]
 502:src/console.c **** 
 503:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3303              		.loc 2 503 13 is_stmt 0 view .LVU919
 3304 00b6 8A4A     		ldr	r2, .L388+48
 501:src/console.c **** 
 3305              		.loc 2 501 7 view .LVU920
 3306 00b8 23F01003 		bic	r3, r3, #16
 3307 00bc 2360     		str	r3, [r4]
 3308              		.loc 2 503 7 is_stmt 1 view .LVU921
 3309              		.loc 2 503 13 is_stmt 0 view .LVU922
 3310 00be 9047     		blx	r2
 3311              	.LVL267:
 3312              		.loc 2 503 10 view .LVU923
 3313 00c0 08B9     		cbnz	r0, .L279
 504:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3314              		.loc 2 504 9 is_stmt 1 view .LVU924
 3315 00c2 884B     		ldr	r3, .L388+52
 3316 00c4 9847     		blx	r3
 3317              	.LVL268:
 3318              	.L279:
 505:src/console.c ****     }
 506:src/console.c **** 
 507:src/console.c ****     // Key is ready -> clear auto off timer
 508:src/console.c ****     //    if ( !key_empty() )
 509:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 510:src/console.c ****     // Fetch the key
 511:src/console.c ****     //  < 0 -> No key event
 512:src/console.c ****     //  > 0 -> Key pressed
 513:src/console.c ****     // == 0 -> Key released
 514:src/console.c ****     c = key_pop();
 3319              		.loc 2 514 5 view .LVU925
 3320              		.loc 2 514 9 is_stmt 0 view .LVU926
 3321 00c6 884B     		ldr	r3, .L388+56
 3322 00c8 9847     		blx	r3
 3323              	.LVL269:
 515:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 3324              		.loc 2 515 8 view .LVU927
 3325 00ca 6228     		cmp	r0, #98
 514:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 3326              		.loc 2 514 9 view .LVU928
 3327 00cc 0546     		mov	r5, r0
 3328              	.LVL270:
 3329              		.loc 2 515 5 is_stmt 1 view .LVU929
 3330              		.loc 2 515 8 is_stmt 0 view .LVU930
 3331 00ce 71D0     		beq	.L281
 3332              		.loc 2 515 29 discriminator 1 view .LVU931
 3333 00d0 0028     		cmp	r0, #0
 3334 00d2 6CDD     		ble	.L282
 516:src/console.c ****       reset_auto_off();
 3335              		.loc 2 516 7 is_stmt 1 view .LVU932
 3336 00d4 854B     		ldr	r3, .L388+60
 3337 00d6 9847     		blx	r3
ARM GAS  /tmp/cc0ERj20.s 			page 89


 3338              	.LVL271:
 517:src/console.c ****       start_key_timer();
 3339              		.loc 2 517 7 view .LVU933
 3340              	.LBB169:
 3341              	.LBI169:
 273:src/console.c ****     start_ticks = get_rtc_ticks();
 3342              		.loc 2 273 6 view .LVU934
 3343              	.LBB170:
 274:src/console.c **** }
 3344              		.loc 2 274 5 view .LVU935
 274:src/console.c **** }
 3345              		.loc 2 274 19 is_stmt 0 view .LVU936
 3346 00d8 854B     		ldr	r3, .L388+64
 3347 00da 9847     		blx	r3
 3348              	.LVL272:
 274:src/console.c **** }
 3349              		.loc 2 274 17 view .LVU937
 3350 00dc 854B     		ldr	r3, .L388+68
 3351              	.LBE170:
 3352              	.LBE169:
 3353              	.LBB172:
 3354              	.LBB158:
  63:src/console.c **** 
 3355              		.loc 2 63 6 view .LVU938
 3356 00de 632D     		cmp	r5, #99
 3357              	.LBE158:
 3358              	.LBE172:
 3359              	.LBB173:
 3360              	.LBB171:
 274:src/console.c **** }
 3361              		.loc 2 274 17 view .LVU939
 3362 00e0 1860     		str	r0, [r3]
 3363              	.LBE171:
 3364              	.LBE173:
 518:src/console.c ****     }
 519:src/console.c ****     if (c >= 0) {
 3365              		.loc 2 519 5 is_stmt 1 view .LVU940
 520:src/console.c ****       //      print_debug(49,c);
 521:src/console.c ****       remapped = remap(c);
 3366              		.loc 2 521 7 view .LVU941
 3367              	.LVL273:
 3368              	.LBB174:
 3369              	.LBI154:
  53:src/console.c **** 
 3370              		.loc 2 53 22 view .LVU942
 3371              	.LBB159:
  55:src/console.c **** 
 3372              		.loc 2 55 3 view .LVU943
 3373              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3374              		.loc 3 1 1 view .LVU944
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
ARM GAS  /tmp/cc0ERj20.s 			page 90


   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3375              		.loc 3 59 3 view .LVU945
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
ARM GAS  /tmp/cc0ERj20.s 			page 91


  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU, 14}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  96:src/keytran.c ****     {K_SETMENU, USER_MENU}, // select user menu
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3376              		.loc 3 117 3 view .LVU946
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
ARM GAS  /tmp/cc0ERj20.s 			page 92


 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_MULTI, SETUMEN}, // Set up user menu
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3377              		.loc 3 175 1 view .LVU947
ARM GAS  /tmp/cc0ERj20.s 			page 93


 176:src/keytran.c ****     {K_RELEASE, -1},
 177:src/keytran.c ****     // Top row of DM42 1--6
 178:src/keytran.c ****     {K00, -1},
 179:src/keytran.c ****     {K01, -1},
 180:src/keytran.c ****     {K02, -1},
 181:src/keytran.c ****     {K03, -1},
 182:src/keytran.c ****     {K04, -1},
 183:src/keytran.c ****     {K05, -1},
 184:src/keytran.c ****     // Next row of DM42 7--12
 185:src/keytran.c ****     {K10, -1},
 186:src/keytran.c ****     {K11, -1},
 187:src/keytran.c ****     {K12, -1},
 188:src/keytran.c ****     {K13, -1},
 189:src/keytran.c ****     {K14, -1},
 190:src/keytran.c ****     {K15, -1},
 191:src/keytran.c ****     // Third row of DM42 13--17
 192:src/keytran.c ****     {K20, -1},
 193:src/keytran.c ****     {K21, -1},
 194:src/keytran.c ****     {K22, -1},
 195:src/keytran.c ****     {K23, -1},
 196:src/keytran.c ****     {K24, -1},
 197:src/keytran.c ****     // Fourth row of DM42 18--22
 198:src/keytran.c ****     {K30, -1},
 199:src/keytran.c ****     {K31, -1},
 200:src/keytran.c ****     {K32, -1},
 201:src/keytran.c ****     {K33, -1},
 202:src/keytran.c ****     {K34, -1},
 203:src/keytran.c ****     // Fifth row of DM42 23--27
 204:src/keytran.c ****     {K40, -1},
 205:src/keytran.c ****     {K41, -1},
 206:src/keytran.c ****     {K42, -1},
 207:src/keytran.c ****     {K43, -1},
 208:src/keytran.c ****     {K44, -1},
 209:src/keytran.c ****     // Sixth row of DM42 28--32
 210:src/keytran.c ****     {K50, -1},
 211:src/keytran.c ****     {K51, -1},
 212:src/keytran.c ****     {K52, -1},
 213:src/keytran.c ****     {K53, -1},
 214:src/keytran.c ****     {K54, -1},
 215:src/keytran.c ****     // Last row of DM42 33--37
 216:src/keytran.c ****     {K60, -1},
 217:src/keytran.c ****     {K61, -1},
 218:src/keytran.c ****     {K62, -1},
 219:src/keytran.c ****     {K63, -1},
 220:src/keytran.c ****     {K64, -1},
 221:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 222:src/keytran.c ****     {K_NOP, -1},
 223:src/keytran.c ****     {K_NOP, -1},
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 227:src/keytran.c ****     {K_CMPLX, -1},
 228:src/keytran.c ****     {K_NOP, -1},
 229:src/keytran.c ****     {K_NOP, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c **** };
 232:src/keytran.c **** 
ARM GAS  /tmp/cc0ERj20.s 			page 94


 233:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3378              		.loc 3 233 1 view .LVU948
  61:src/console.c **** 
 3379              		.loc 2 61 3 view .LVU949
  63:src/console.c **** 
 3380              		.loc 2 63 3 view .LVU950
  63:src/console.c **** 
 3381              		.loc 2 63 6 is_stmt 0 view .LVU951
 3382 00e2 00F02D81 		beq	.L362
  65:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3383              		.loc 2 65 3 is_stmt 1 view .LVU952
  65:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3384              		.loc 2 65 6 is_stmt 0 view .LVU953
 3385 00e6 2C2D     		cmp	r5, #44
 3386 00e8 00F0B580 		beq	.L336
 3387              	.LVL274:
 3388              	.L335:
  70:src/console.c ****     return mapping_running[c];
 3389              		.loc 2 70 3 is_stmt 1 view .LVU954
  70:src/console.c ****     return mapping_running[c];
 3390              		.loc 2 70 15 is_stmt 0 view .LVU955
 3391 00ec 824A     		ldr	r2, .L388+72
 3392 00ee 834B     		ldr	r3, .L388+76
 3393 00f0 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3394 00f4 1F68     		ldr	r7, [r3]
  70:src/console.c ****     return mapping_running[c];
 3395              		.loc 2 70 6 view .LVU956
 3396 00f6 59EA0707 		orrs	r7, r9, r7
 3397 00fa 40F0CB80 		bne	.L363
  74:src/console.c ****     switch (c) {
 3398              		.loc 2 74 3 is_stmt 1 view .LVU957
  74:src/console.c ****     switch (c) {
 3399              		.loc 2 74 6 is_stmt 0 view .LVU958
 3400 00fe 3368     		ldr	r3, [r6]
 3401 0100 632B     		cmp	r3, #99
 3402 0102 A5F12603 		sub	r3, r5, #38
 3403 0106 0AD0     		beq	.L364
  97:src/console.c ****     case KEY_F1:
 3404              		.loc 2 97 5 is_stmt 1 view .LVU959
 3405 0108 052B     		cmp	r3, #5
 3406 010a 00F25A81 		bhi	.L288
 3407 010e DFE813F0 		tbh	[pc, r3, lsl #1]
 3408              	.L304:
 3409 0112 A101     		.2byte	(.L309-.L304)/2
 3410 0114 AA01     		.2byte	(.L308-.L304)/2
 3411 0116 B301     		.2byte	(.L307-.L304)/2
 3412 0118 9301     		.2byte	(.L306-.L304)/2
 3413 011a 8001     		.2byte	(.L305-.L304)/2
 3414 011c 6601     		.2byte	(.L303-.L304)/2
 3415              		.p2align 1
 3416              	.L364:
  75:src/console.c ****     case KEY_F1:
 3417              		.loc 2 75 5 view .LVU960
 3418 011e 052B     		cmp	r3, #5
 3419 0120 00F24F81 		bhi	.L288
 3420 0124 DFE813F0 		tbh	[pc, r3, lsl #1]
 3421              	.L290:
ARM GAS  /tmp/cc0ERj20.s 			page 95


 3422 0128 F101     		.2byte	(.L295-.L290)/2
 3423 012a E001     		.2byte	(.L294-.L290)/2
 3424 012c 2501     		.2byte	(.L293-.L290)/2
 3425 012e 2F01     		.2byte	(.L292-.L290)/2
 3426 0130 3901     		.2byte	(.L291-.L290)/2
 3427 0132 4301     		.2byte	(.L289-.L290)/2
 3428              	.LVL275:
 3429              		.p2align 1
 3430              	.L267:
  75:src/console.c ****     case KEY_F1:
 3431              		.loc 2 75 5 is_stmt 0 view .LVU961
 3432              	.LBE159:
 3433              	.LBE174:
 461:src/console.c ****     {
 3434              		.loc 2 461 10 is_stmt 1 view .LVU962
 461:src/console.c ****     {
 3435              		.loc 2 461 15 is_stmt 0 view .LVU963
 3436 0134 2568     		ldr	r5, [r4]
 461:src/console.c ****     {
 3437              		.loc 2 461 13 view .LVU964
 3438 0136 15F40075 		ands	r5, r5, #512
 3439 013a A4D1     		bne	.L268
 461:src/console.c ****     {
 3440              		.loc 2 461 35 discriminator 1 view .LVU965
 3441 013c 704B     		ldr	r3, .L388+80
 3442 013e 9847     		blx	r3
 3443              	.LVL276:
 461:src/console.c ****     {
 3444              		.loc 2 461 32 discriminator 1 view .LVU966
 3445 0140 0028     		cmp	r0, #0
 3446 0142 A0D0     		beq	.L268
 463:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3447              		.loc 2 463 7 is_stmt 1 view .LVU967
 3448 0144 2368     		ldr	r3, [r4]
 464:src/console.c ****       sys_sleep();
 3449              		.loc 2 464 7 is_stmt 0 view .LVU968
 3450 0146 6F4A     		ldr	r2, .L388+84
 463:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3451              		.loc 2 463 7 view .LVU969
 3452 0148 23F00203 		bic	r3, r3, #2
 464:src/console.c ****       sys_sleep();
 3453              		.loc 2 464 7 view .LVU970
 3454 014c 2846     		mov	r0, r5
 3455 014e 6421     		movs	r1, #100
 463:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3456              		.loc 2 463 7 view .LVU971
 3457 0150 2360     		str	r3, [r4]
 464:src/console.c ****       sys_sleep();
 3458              		.loc 2 464 7 is_stmt 1 view .LVU972
 3459 0152 9047     		blx	r2
 3460              	.LVL277:
 465:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 3461              		.loc 2 465 7 view .LVU973
 3462 0154 5E4B     		ldr	r3, .L388+32
 3463 0156 9847     		blx	r3
 3464              	.LVL278:
 466:src/console.c **** 	key_push (K_HEARTBEAT);
ARM GAS  /tmp/cc0ERj20.s 			page 96


 3465              		.loc 2 466 7 view .LVU974
 466:src/console.c **** 	key_push (K_HEARTBEAT);
 3466              		.loc 2 466 11 is_stmt 0 view .LVU975
 3467 0158 6B4B     		ldr	r3, .L388+88
 3468 015a 2846     		mov	r0, r5
 3469 015c 9847     		blx	r3
 3470              	.LVL279:
 466:src/console.c **** 	key_push (K_HEARTBEAT);
 3471              		.loc 2 466 10 view .LVU976
 3472 015e 48B1     		cbz	r0, .L272
 467:src/console.c **** 	if (Pause > 0) Pause--;
 3473              		.loc 2 467 2 is_stmt 1 view .LVU977
 3474 0160 6A4B     		ldr	r3, .L388+92
 3475 0162 6220     		movs	r0, #98
 3476 0164 9847     		blx	r3
 3477              	.LVL280:
 468:src/console.c ****       }
 3478              		.loc 2 468 2 view .LVU978
 468:src/console.c ****       }
 3479              		.loc 2 468 12 is_stmt 0 view .LVU979
 3480 0166 644B     		ldr	r3, .L388+72
 3481 0168 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 468:src/console.c ****       }
 3482              		.loc 2 468 5 view .LVU980
 3483 016a 1AB1     		cbz	r2, .L272
 468:src/console.c ****       }
 3484              		.loc 2 468 17 is_stmt 1 discriminator 1 view .LVU981
 468:src/console.c ****       }
 3485              		.loc 2 468 22 is_stmt 0 discriminator 1 view .LVU982
 3486 016c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3487 016e 013A     		subs	r2, r2, #1
 3488 0170 D2B2     		uxtb	r2, r2
 3489 0172 1A70     		strb	r2, [r3]
 3490              	.L272:
 470:src/console.c ****     }
 3491              		.loc 2 470 7 is_stmt 1 view .LVU983
 3492 0174 664B     		ldr	r3, .L388+96
 3493 0176 0020     		movs	r0, #0
 3494 0178 9847     		blx	r3
 3495              	.LVL281:
 474:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3496              		.loc 2 474 5 view .LVU984
 474:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3497              		.loc 2 474 9 is_stmt 0 view .LVU985
 3498 017a 2368     		ldr	r3, [r4]
 474:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3499              		.loc 2 474 8 view .LVU986
 3500 017c 9D05     		lsls	r5, r3, #22
 3501 017e 85D5     		bpl	.L365
 3502              	.L274:
 475:src/console.c ****         // Going to off mode
 3503              		.loc 2 475 7 is_stmt 1 view .LVU987
 475:src/console.c ****         // Going to off mode
 3504              		.loc 2 475 12 is_stmt 0 view .LVU988
 3505 0180 2568     		ldr	r5, [r4]
 475:src/console.c ****         // Going to off mode
 3506              		.loc 2 475 10 view .LVU989
ARM GAS  /tmp/cc0ERj20.s 			page 97


 3507 0182 15F00405 		ands	r5, r5, #4
 3508 0186 7FF472AF 		bne	.L266
 477:src/console.c ****         draw_power_off_image(1);
 3509              		.loc 2 477 9 is_stmt 1 view .LVU990
 3510 018a 624B     		ldr	r3, .L388+100
 3511 018c 2846     		mov	r0, r5
 3512 018e 9847     		blx	r3
 3513              	.LVL282:
 478:src/console.c **** 
 3514              		.loc 2 478 9 view .LVU991
 3515 0190 614B     		ldr	r3, .L388+104
 3516 0192 0120     		movs	r0, #1
 3517 0194 9847     		blx	r3
 3518              	.LVL283:
 480:src/console.c ****         SET_ST(STAT_SUSPENDED);
 3519              		.loc 2 480 9 view .LVU992
 3520 0196 614B     		ldr	r3, .L388+108
 3521 0198 2846     		mov	r0, r5
 3522 019a 9847     		blx	r3
 3523              	.LVL284:
 481:src/console.c ****         SET_ST(STAT_OFF);
 3524              		.loc 2 481 9 view .LVU993
 3525 019c 2368     		ldr	r3, [r4]
 3526 019e 43F00403 		orr	r3, r3, #4
 3527 01a2 2360     		str	r3, [r4]
 482:src/console.c ****       }
 3528              		.loc 2 482 9 view .LVU994
 3529 01a4 2368     		ldr	r3, [r4]
 3530 01a6 43F01003 		orr	r3, r3, #16
 3531 01aa 2360     		str	r3, [r4]
 3532 01ac 5FE7     		b	.L266
 3533              	.LVL285:
 3534              	.L282:
 519:src/console.c ****       //      print_debug(49,c);
 3535              		.loc 2 519 5 view .LVU995
 519:src/console.c ****       //      print_debug(49,c);
 3536              		.loc 2 519 8 is_stmt 0 view .LVU996
 3537 01ae 7FF45EAF 		bne	.L266
 3538 01b2 9BE7     		b	.L335
 3539              	.L281:
 519:src/console.c ****       //      print_debug(49,c);
 3540              		.loc 2 519 5 is_stmt 1 view .LVU997
 3541              		.loc 2 521 7 view .LVU998
 3542              	.LVL286:
 3543              	.LBB175:
  53:src/console.c **** 
 3544              		.loc 2 53 22 view .LVU999
 3545              	.LBB160:
  55:src/console.c **** 
 3546              		.loc 2 55 3 view .LVU1000
   1:src/keytran.c ****     {K_RELEASE, -1},
 3547              		.loc 3 1 1 view .LVU1001
  59:src/keytran.c ****     {K_RELEASE, -1},
 3548              		.loc 3 59 3 view .LVU1002
 117:src/keytran.c ****     {K_RELEASE, -1},
 3549              		.loc 3 117 3 view .LVU1003
 175:src/keytran.c ****     {K_RELEASE, -1},
ARM GAS  /tmp/cc0ERj20.s 			page 98


 3550              		.loc 3 175 1 view .LVU1004
 3551              		.loc 3 233 1 view .LVU1005
  61:src/console.c **** 
 3552              		.loc 2 61 3 view .LVU1006
  61:src/console.c **** 
 3553              		.loc 2 61 23 view .LVU1007
  61:src/console.c **** 
 3554              		.loc 2 61 30 is_stmt 0 view .LVU1008
 3555 01b4 5A4B     		ldr	r3, .L388+112
 3556              	.LVL287:
 3557              	.L360:
  61:src/console.c **** 
 3558              		.loc 2 61 30 view .LVU1009
 3559 01b6 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3560              	.LVL288:
  61:src/console.c **** 
 3561              		.loc 2 61 30 view .LVU1010
 3562 01b8 93E80300 		ldm	r3, {r0, r1}
 3563 01bc 0DF1080A 		add	r10, sp, #8
 3564 01c0 8AE80300 		stm	r10, {r0, r1}
 3565 01c4 0F46     		mov	r7, r1
 3566              	.LVL289:
 3567              	.L284:
  61:src/console.c **** 
 3568              		.loc 2 61 30 view .LVU1011
 3569              	.LBE160:
 3570              	.LBE175:
 522:src/console.c ****       //      print_debug(50,remapped.key_34s);
 523:src/console.c ****       //      print_debug(51,remapped.shift);
 524:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3571              		.loc 2 524 7 is_stmt 1 view .LVU1012
 3572              		.loc 2 524 10 is_stmt 0 view .LVU1013
 3573 01c6 2F2D     		cmp	r5, #47
 3574 01c8 27D0     		beq	.L366
 3575              	.LVL290:
 3576              	.L325:
 525:src/console.c **** 	set_menu ( remapped.shift );
 526:src/console.c **** 	display_current_menu ();
 527:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 528:src/console.c **** 	case SHIFT_F:
 529:src/console.c **** 	  remapped = f_shift; // F -> N
 530:src/console.c **** 	  break;
 531:src/console.c **** 	case SHIFT_G:
 532:src/console.c **** 	  remapped = g_shift; // G -> N
 533:src/console.c **** 	  break;
 534:src/console.c **** 	case SHIFT_H:
 535:src/console.c **** 	  remapped = h_shift; // H -> N
 536:src/console.c **** 	default:
 537:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 538:src/console.c **** 	}
 539:src/console.c ****       }
 540:src/console.c ****       if (remapped.key_34s == K_SYS) {
 3577              		.loc 2 540 7 is_stmt 1 view .LVU1014
 3578              		.loc 2 540 10 is_stmt 0 view .LVU1015
 3579 01ca 302D     		cmp	r5, #48
 3580 01cc 17D1     		bne	.L332
 541:src/console.c **** 	SET_ST(STAT_MENU);
ARM GAS  /tmp/cc0ERj20.s 			page 99


 3581              		.loc 2 541 2 is_stmt 1 view .LVU1016
 3582 01ce 2368     		ldr	r3, [r4]
 542:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 3583              		.loc 2 542 2 is_stmt 0 view .LVU1017
 3584 01d0 544D     		ldr	r5, .L388+116
 3585              	.LVL291:
 3586              		.loc 2 542 2 view .LVU1018
 3587 01d2 5548     		ldr	r0, .L388+120
 3588 01d4 0022     		movs	r2, #0
 541:src/console.c **** 	SET_ST(STAT_MENU);
 3589              		.loc 2 541 2 view .LVU1019
 3590 01d6 43F04003 		orr	r3, r3, #64
 3591              		.loc 2 542 2 view .LVU1020
 3592 01da 1146     		mov	r1, r2
 541:src/console.c **** 	SET_ST(STAT_MENU);
 3593              		.loc 2 541 2 view .LVU1021
 3594 01dc 2360     		str	r3, [r4]
 3595              		.loc 2 542 2 is_stmt 1 view .LVU1022
 3596 01de A847     		blx	r5
 3597              	.LVL292:
 543:src/console.c **** 	CLR_ST(STAT_MENU);
 3598              		.loc 2 543 2 view .LVU1023
 544:src/console.c **** 	remapped =  no_key;
 3599              		.loc 2 544 11 is_stmt 0 view .LVU1024
 3600 01e0 524B     		ldr	r3, .L388+124
 543:src/console.c **** 	CLR_ST(STAT_MENU);
 3601              		.loc 2 543 2 view .LVU1025
 3602 01e2 2268     		ldr	r2, [r4]
 3603              		.loc 2 544 11 view .LVU1026
 3604 01e4 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3605 01e6 93E80300 		ldm	r3, {r0, r1}
 543:src/console.c **** 	CLR_ST(STAT_MENU);
 3606              		.loc 2 543 2 view .LVU1027
 3607 01ea 22F04002 		bic	r2, r2, #64
 3608 01ee 2260     		str	r2, [r4]
 3609              		.loc 2 544 2 is_stmt 1 view .LVU1028
 3610              	.LVL293:
 3611              		.loc 2 544 11 is_stmt 0 view .LVU1029
 3612 01f0 04AA     		add	r2, sp, #16
 3613 01f2 02E90300 		stmdb	r2, {r0, r1}
 3614              	.LBB176:
 3615              	.LBB177:
 118:src/menu.c    **** }
 3616              		.loc 1 118 3 view .LVU1030
 3617 01f6 3068     		ldr	r0, [r6]
 3618              	.LBE177:
 3619              	.LBE176:
 3620              		.loc 2 544 11 view .LVU1031
 3621 01f8 0F46     		mov	r7, r1
 3622              	.LVL294:
 545:src/console.c **** 	display_current_menu();
 3623              		.loc 2 545 2 is_stmt 1 view .LVU1032
 3624              	.LBB179:
 3625              	.LBI176:
 117:src/menu.c    ****   display_menu (current_menu);
 3626              		.loc 1 117 6 view .LVU1033
 3627              	.LBB178:
ARM GAS  /tmp/cc0ERj20.s 			page 100


 118:src/menu.c    **** }
 3628              		.loc 1 118 3 view .LVU1034
 3629 01fa FFF7FEFF 		bl	display_menu
 3630              	.LVL295:
 3631              	.L332:
 118:src/menu.c    **** }
 3632              		.loc 1 118 3 is_stmt 0 view .LVU1035
 3633              	.LBE178:
 3634              	.LBE179:
 546:src/console.c ****       }
 547:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 3635              		.loc 2 547 7 is_stmt 1 view .LVU1036
 3636              		.loc 2 547 10 is_stmt 0 view .LVU1037
 3637 01fe 312D     		cmp	r5, #49
 3638 0200 2AD0     		beq	.L285
 548:src/console.c **** 	remapped = do_multi (remapped);
 549:src/console.c **** 	display_current_menu();
 550:src/console.c ****       }
 551:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 3639              		.loc 2 551 7 is_stmt 1 view .LVU1038
 3640              		.loc 2 551 10 is_stmt 0 view .LVU1039
 3641 0202 322D     		cmp	r5, #50
 3642 0204 40D0     		beq	.L334
 3643              	.LVL296:
 3644              	.L337:
 3645              		.loc 2 551 10 view .LVU1040
 3646 0206 0DF1080A 		add	r10, sp, #8
 3647              	.L319:
 3648              	.LVL297:
 552:src/console.c ****       process_keycode_with_shift(remapped);
 3649              		.loc 2 552 7 is_stmt 1 view .LVU1041
 3650              		.loc 2 552 7 is_stmt 0 view .LVU1042
 3651 020a 8DF80850 		strb	r5, [sp, #8]
 3652 020e 0397     		str	r7, [sp, #12]
 3653 0210 9AE80300 		ldm	r10, {r0, r1}
 3654 0214 FFF7FEFF 		bl	process_keycode_with_shift
 3655              	.LVL298:
 3656 0218 29E7     		b	.L266
 3657              	.L366:
 525:src/console.c **** 	display_current_menu ();
 3658              		.loc 2 525 2 is_stmt 1 view .LVU1043
 3659              	.LVL299:
 3660              	.LBB180:
 3661              	.LBI180:
  85:src/menu.c    ****   int m = current_menu;
 3662              		.loc 1 85 6 view .LVU1044
 3663              	.LBB181:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3664              		.loc 1 86 3 view .LVU1045
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3665              		.loc 1 86 7 is_stmt 0 view .LVU1046
 3666 021a 3368     		ldr	r3, [r6]
 3667              	.LVL300:
  87:src/menu.c    ****     current_menu = default_menu;
 3668              		.loc 1 87 3 is_stmt 1 view .LVU1047
  87:src/menu.c    ****     current_menu = default_menu;
 3669              		.loc 1 87 6 is_stmt 0 view .LVU1048
ARM GAS  /tmp/cc0ERj20.s 			page 101


 3670 021c BB42     		cmp	r3, r7
 3671 021e 00F09180 		beq	.L367
  90:src/menu.c    ****     current_menu = last_menu;
 3672              		.loc 1 90 8 is_stmt 1 view .LVU1049
  90:src/menu.c    ****     current_menu = last_menu;
 3673              		.loc 1 90 11 is_stmt 0 view .LVU1050
 3674 0222 7A1C     		adds	r2, r7, #1
 3675 0224 00F09C80 		beq	.L368
 3676              	.LVL301:
 3677              	.L326:
  94:src/menu.c    ****   }
 3678              		.loc 1 94 5 is_stmt 1 view .LVU1051
  94:src/menu.c    ****   }
 3679              		.loc 1 94 18 is_stmt 0 view .LVU1052
 3680 0228 3760     		str	r7, [r6]
 3681              	.LVL302:
 3682              	.L329:
  96:src/menu.c    **** }
 3683              		.loc 1 96 3 is_stmt 1 view .LVU1053
  96:src/menu.c    **** }
 3684              		.loc 1 96 6 is_stmt 0 view .LVU1054
 3685 022a 092B     		cmp	r3, #9
 3686 022c 03D0     		beq	.L330
  96:src/menu.c    **** }
 3687              		.loc 1 96 17 view .LVU1055
 3688 022e 102B     		cmp	r3, #16
 3689 0230 01D0     		beq	.L330
 3690              	.L327:
  96:src/menu.c    **** }
 3691              		.loc 1 96 32 is_stmt 1 view .LVU1056
  96:src/menu.c    **** }
 3692              		.loc 1 96 42 is_stmt 0 view .LVU1057
 3693 0232 3F4A     		ldr	r2, .L388+128
 3694 0234 1360     		str	r3, [r2]
 3695              	.L330:
  96:src/menu.c    **** }
 3696              		.loc 1 96 42 view .LVU1058
 3697              	.LBE181:
 3698              	.LBE180:
 526:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 3699              		.loc 2 526 2 is_stmt 1 view .LVU1059
 3700              	.LBB186:
 3701              	.LBI186:
 117:src/menu.c    ****   display_menu (current_menu);
 3702              		.loc 1 117 6 view .LVU1060
 3703              	.LBB187:
 118:src/menu.c    **** }
 3704              		.loc 1 118 3 view .LVU1061
 3705 0236 3846     		mov	r0, r7
 3706 0238 FFF7FEFF 		bl	display_menu
 3707              	.LVL303:
 3708              	.LBE187:
 3709              	.LBE186:
 527:src/console.c **** 	case SHIFT_F:
 3710              		.loc 2 527 2 view .LVU1062
 527:src/console.c **** 	case SHIFT_F:
 3711              		.loc 2 527 10 is_stmt 0 view .LVU1063
ARM GAS  /tmp/cc0ERj20.s 			page 102


 3712 023c FFF7FEFF 		bl	cur_shift
 3713              	.LVL304:
 527:src/console.c **** 	case SHIFT_F:
 3714              		.loc 2 527 2 view .LVU1064
 3715 0240 0228     		cmp	r0, #2
 3716 0242 00F08580 		beq	.L331
 529:src/console.c **** 	  break;
 3717              		.loc 2 529 4 is_stmt 1 view .LVU1065
 529:src/console.c **** 	  break;
 3718              		.loc 2 529 13 is_stmt 0 view .LVU1066
 3719 0246 3B4B     		ldr	r3, .L388+132
 3720 0248 93E80300 		ldm	r3, {r0, r1}
 3721 024c 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3722              	.LVL305:
 529:src/console.c **** 	  break;
 3723              		.loc 2 529 13 view .LVU1067
 3724 024e 8AE80300 		stm	r10, {r0, r1}
 3725 0252 0F46     		mov	r7, r1
 3726              	.LVL306:
 530:src/console.c **** 	case SHIFT_G:
 3727              		.loc 2 530 4 is_stmt 1 view .LVU1068
 3728 0254 B9E7     		b	.L325
 3729              	.LVL307:
 3730              	.L336:
 3731              	.LBB188:
 3732              	.LBB161:
 3733              	.LBB156:
  67:src/console.c ****   }
 3734              		.loc 2 67 12 is_stmt 0 view .LVU1069
 3735 0256 0C27     		movs	r7, #12
 3736              	.LVL308:
 3737              	.L285:
  67:src/console.c ****   }
 3738              		.loc 2 67 12 view .LVU1070
 3739              	.LBE156:
 3740              	.LBE161:
 3741              	.LBE188:
 548:src/console.c **** 	display_current_menu();
 3742              		.loc 2 548 2 is_stmt 1 view .LVU1071
 548:src/console.c **** 	display_current_menu();
 3743              		.loc 2 548 13 is_stmt 0 view .LVU1072
 3744 0258 3123     		movs	r3, #49
 3745 025a 0397     		str	r7, [sp, #12]
 3746 025c 8DF80830 		strb	r3, [sp, #8]
 3747 0260 6D46     		mov	r5, sp
 3748 0262 0DF1080A 		add	r10, sp, #8
 3749 0266 9AE80600 		ldm	r10, {r1, r2}
 3750 026a 2846     		mov	r0, r5
 3751 026c FFF7FEFF 		bl	do_multi
 3752              	.LVL309:
 3753 0270 95E80300 		ldm	r5, {r0, r1}
 3754 0274 8AE80300 		stm	r10, {r0, r1}
 3755 0278 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 3756              	.LVL310:
 3757              	.LBB189:
 3758              	.LBB190:
 118:src/menu.c    **** }
ARM GAS  /tmp/cc0ERj20.s 			page 103


 3759              		.loc 1 118 3 view .LVU1073
 3760 027c 3068     		ldr	r0, [r6]
 3761              	.LBE190:
 3762              	.LBE189:
 548:src/console.c **** 	display_current_menu();
 3763              		.loc 2 548 13 view .LVU1074
 3764 027e 039F     		ldr	r7, [sp, #12]
 3765              	.LVL311:
 549:src/console.c ****       }
 3766              		.loc 2 549 2 is_stmt 1 view .LVU1075
 3767              	.LBB192:
 3768              	.LBI189:
 117:src/menu.c    ****   display_menu (current_menu);
 3769              		.loc 1 117 6 view .LVU1076
 3770              	.LBB191:
 118:src/menu.c    **** }
 3771              		.loc 1 118 3 view .LVU1077
 3772 0280 FFF7FEFF 		bl	display_menu
 3773              	.LVL312:
 118:src/menu.c    **** }
 3774              		.loc 1 118 3 is_stmt 0 view .LVU1078
 3775              	.LBE191:
 3776              	.LBE192:
 551:src/console.c ****       process_keycode_with_shift(remapped);
 3777              		.loc 2 551 7 is_stmt 1 view .LVU1079
 551:src/console.c ****       process_keycode_with_shift(remapped);
 3778              		.loc 2 551 10 is_stmt 0 view .LVU1080
 3779 0284 322D     		cmp	r5, #50
 3780 0286 BED1     		bne	.L337
 3781              	.LVL313:
 3782              	.L334:
 553:src/console.c ****     }
 554:src/console.c ****   }
 555:src/console.c ****   save_ram_file(0);
 3783              		.loc 2 555 3 is_stmt 1 view .LVU1081
 3784 0288 0020     		movs	r0, #0
 556:src/console.c ****   //  free_storage();
 557:src/console.c ****   return;
 558:src/console.c **** }
 3785              		.loc 2 558 1 is_stmt 0 view .LVU1082
 3786 028a 05B0     		add	sp, sp, #20
 3787              		.cfi_remember_state
 3788              		.cfi_def_cfa_offset 36
 3789              		@ sp needed
 3790 028c BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3791              		.cfi_restore 14
 3792              		.cfi_restore 11
 3793              		.cfi_restore 10
 3794              		.cfi_restore 9
 3795              		.cfi_restore 8
 3796              		.cfi_restore 7
 3797              		.cfi_restore 6
 3798              		.cfi_restore 5
 3799              		.cfi_restore 4
 3800              		.cfi_def_cfa_offset 0
 3801              	.LVL314:
 555:src/console.c ****   //  free_storage();
ARM GAS  /tmp/cc0ERj20.s 			page 104


 3802              		.loc 2 555 3 view .LVU1083
 3803 0290 FFF7FEBF 		b	save_ram_file
 3804              	.LVL315:
 3805              	.L363:
 3806              		.cfi_restore_state
 3807              	.LBB193:
 3808              	.LBB162:
  71:src/console.c ****   }
 3809              		.loc 2 71 5 is_stmt 1 view .LVU1084
  71:src/console.c ****   }
 3810              		.loc 2 71 27 is_stmt 0 view .LVU1085
 3811 0294 284B     		ldr	r3, .L388+136
 3812              	.L359:
 145:src/console.c ****     break;
 3813              		.loc 2 145 26 view .LVU1086
 3814 0296 03EBC502 		add	r2, r3, r5, lsl #3
 3815 029a 92E80300 		ldm	r2, {r0, r1}
 3816 029e 0DF1080A 		add	r10, sp, #8
 3817 02a2 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 3818              	.LVL316:
 145:src/console.c ****     break;
 3819              		.loc 2 145 26 view .LVU1087
 3820 02a6 0F46     		mov	r7, r1
 3821              	.LVL317:
 145:src/console.c ****     break;
 3822              		.loc 2 145 26 view .LVU1088
 3823 02a8 8AE80300 		stm	r10, {r0, r1}
 3824 02ac 8BE7     		b	.L284
 3825              	.L389:
 3826 02ae 00BF     		.align	2
 3827              	.L388:
 3828 02b0 00000000 		.word	StateWhileOn
 3829 02b4 00000000 		.word	DispMsg
 3830 02b8 00200010 		.word	268443648
 3831 02bc 00000000 		.word	.LANCHOR1
 3832 02c0 00000000 		.word	run_menu_item
 3833 02c4 00000000 		.word	menu_line_str
 3834 02c8 31020008 		.word	134218289
 3835 02cc 00000000 		.word	JustDisplayed
 3836 02d0 19040008 		.word	134218777
 3837 02d4 19020008 		.word	134218265
 3838 02d8 91030008 		.word	134218641
 3839 02dc E5020008 		.word	134218469
 3840 02e0 59020008 		.word	134218329
 3841 02e4 35020008 		.word	134218293
 3842 02e8 89030008 		.word	134218633
 3843 02ec B9030008 		.word	134218681
 3844 02f0 B9040008 		.word	134218937
 3845 02f4 00000000 		.word	.LANCHOR9
 3846 02f8 00000000 		.word	Pause
 3847 02fc 00000000 		.word	Running
 3848 0300 7D030008 		.word	134218621
 3849 0304 F9030008 		.word	134218745
 3850 0308 01040008 		.word	134218753
 3851 030c 81030008 		.word	134218625
 3852 0310 F5030008 		.word	134218741
 3853 0314 55020008 		.word	134218325
ARM GAS  /tmp/cc0ERj20.s 			page 105


 3854 0318 2D040008 		.word	134218797
 3855 031c 1D020008 		.word	134218269
 3856 0320 00000000 		.word	.LANCHOR22
 3857 0324 59030008 		.word	134218585
 3858 0328 00000000 		.word	.LANCHOR21
 3859 032c 00000000 		.word	.LANCHOR11
 3860 0330 00000000 		.word	.LANCHOR3
 3861 0334 00000000 		.word	.LANCHOR12
 3862 0338 00000000 		.word	.LANCHOR15
 3863 033c 00000000 		.word	.LANCHOR4
 3864              	.LVL318:
 3865              	.L362:
  63:src/console.c **** 
 3866              		.loc 2 63 16 is_stmt 1 view .LVU1089
  63:src/console.c **** 
 3867              		.loc 2 63 23 is_stmt 0 view .LVU1090
 3868 0340 C84B     		ldr	r3, .L390
 3869 0342 38E7     		b	.L360
 3870              	.LVL319:
 3871              	.L367:
  63:src/console.c **** 
 3872              		.loc 2 63 23 view .LVU1091
 3873              	.LBE162:
 3874              	.LBE193:
 3875              	.LBB194:
 3876              	.LBB182:
  88:src/menu.c    ****   }
 3877              		.loc 1 88 5 is_stmt 1 view .LVU1092
  88:src/menu.c    ****   }
 3878              		.loc 1 88 18 is_stmt 0 view .LVU1093
 3879 0344 C84B     		ldr	r3, .L390+4
 3880              	.LVL320:
  88:src/menu.c    ****   }
 3881              		.loc 1 88 18 view .LVU1094
 3882 0346 1A68     		ldr	r2, [r3]
 3883 0348 3260     		str	r2, [r6]
 3884              	.LVL321:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3885              		.loc 1 86 7 view .LVU1095
 3886 034a 3B46     		mov	r3, r7
  88:src/menu.c    ****   }
 3887              		.loc 1 88 18 view .LVU1096
 3888 034c 1746     		mov	r7, r2
 3889              	.LVL322:
  88:src/menu.c    ****   }
 3890              		.loc 1 88 18 view .LVU1097
 3891 034e 6CE7     		b	.L329
 3892              	.LVL323:
 3893              	.L331:
  88:src/menu.c    ****   }
 3894              		.loc 1 88 18 view .LVU1098
 3895              	.LBE182:
 3896              	.LBE194:
 532:src/console.c **** 	  break;
 3897              		.loc 2 532 4 is_stmt 1 view .LVU1099
 532:src/console.c **** 	  break;
 3898              		.loc 2 532 13 is_stmt 0 view .LVU1100
ARM GAS  /tmp/cc0ERj20.s 			page 106


 3899 0350 C64B     		ldr	r3, .L390+8
 3900 0352 93E80300 		ldm	r3, {r0, r1}
 3901 0356 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3902              	.LVL324:
 532:src/console.c **** 	  break;
 3903              		.loc 2 532 13 view .LVU1101
 3904 0358 8AE80300 		stm	r10, {r0, r1}
 3905 035c 0F46     		mov	r7, r1
 3906              	.LVL325:
 533:src/console.c **** 	case SHIFT_H:
 3907              		.loc 2 533 4 is_stmt 1 view .LVU1102
 3908 035e 34E7     		b	.L325
 3909              	.LVL326:
 3910              	.L368:
 3911              	.LBB195:
 3912              	.LBB183:
  91:src/menu.c    ****   }
 3913              		.loc 1 91 5 view .LVU1103
  91:src/menu.c    ****   }
 3914              		.loc 1 91 18 is_stmt 0 view .LVU1104
 3915 0360 C34A     		ldr	r2, .L390+12
 3916 0362 1768     		ldr	r7, [r2]
 3917              	.LVL327:
  91:src/menu.c    ****   }
 3918              		.loc 1 91 18 view .LVU1105
 3919 0364 3760     		str	r7, [r6]
 3920 0366 60E7     		b	.L329
 3921              	.LVL328:
 3922              	.L297:
  91:src/menu.c    ****   }
 3923              		.loc 1 91 18 view .LVU1106
 3924              	.LBE183:
 3925              	.LBE195:
 3926              	.LBB196:
 3927              	.LBB163:
  81:src/console.c ****     case KEY_F3:
 3928              		.loc 2 81 7 is_stmt 1 view .LVU1107
  81:src/console.c ****     case KEY_F3:
 3929              		.loc 2 81 11 is_stmt 0 view .LVU1108
 3930 0368 FFF7FEFF 		bl	cur_shift
 3931              	.LVL329:
  81:src/console.c ****     case KEY_F3:
 3932              		.loc 2 81 10 view .LVU1109
 3933 036c 0128     		cmp	r0, #1
 3934 036e 00F0CA81 		beq	.L369
 3935              	.L293:
  83:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 3936              		.loc 2 83 7 is_stmt 1 view .LVU1110
  83:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 3937              		.loc 2 83 11 is_stmt 0 view .LVU1111
 3938 0372 FFF7FEFF 		bl	cur_shift
 3939              	.LVL330:
  83:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 3940              		.loc 2 83 10 view .LVU1112
 3941 0376 0028     		cmp	r0, #0
 3942 0378 00F00F81 		beq	.L370
  84:src/console.c ****     case KEY_F4:
ARM GAS  /tmp/cc0ERj20.s 			page 107


 3943              		.loc 2 84 7 is_stmt 1 view .LVU1113
  84:src/console.c ****     case KEY_F4:
 3944              		.loc 2 84 11 is_stmt 0 view .LVU1114
 3945 037c FFF7FEFF 		bl	cur_shift
 3946              	.LVL331:
  84:src/console.c ****     case KEY_F4:
 3947              		.loc 2 84 10 view .LVU1115
 3948 0380 0128     		cmp	r0, #1
 3949 0382 00F0B481 		beq	.L371
 3950              	.L292:
  86:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 3951              		.loc 2 86 7 is_stmt 1 view .LVU1116
  86:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 3952              		.loc 2 86 11 is_stmt 0 view .LVU1117
 3953 0386 FFF7FEFF 		bl	cur_shift
 3954              	.LVL332:
  86:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 3955              		.loc 2 86 10 view .LVU1118
 3956 038a 0028     		cmp	r0, #0
 3957 038c 00F0F980 		beq	.L372
  87:src/console.c ****     case KEY_F5:
 3958              		.loc 2 87 7 is_stmt 1 view .LVU1119
  87:src/console.c ****     case KEY_F5:
 3959              		.loc 2 87 11 is_stmt 0 view .LVU1120
 3960 0390 FFF7FEFF 		bl	cur_shift
 3961              	.LVL333:
  87:src/console.c ****     case KEY_F5:
 3962              		.loc 2 87 10 view .LVU1121
 3963 0394 0128     		cmp	r0, #1
 3964 0396 00F08781 		beq	.L373
 3965              	.L291:
  89:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 3966              		.loc 2 89 7 is_stmt 1 view .LVU1122
  89:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 3967              		.loc 2 89 11 is_stmt 0 view .LVU1123
 3968 039a FFF7FEFF 		bl	cur_shift
 3969              	.LVL334:
  89:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 3970              		.loc 2 89 10 view .LVU1124
 3971 039e 0028     		cmp	r0, #0
 3972 03a0 00F0E380 		beq	.L374
  90:src/console.c ****     case KEY_F6:
 3973              		.loc 2 90 7 is_stmt 1 view .LVU1125
  90:src/console.c ****     case KEY_F6:
 3974              		.loc 2 90 11 is_stmt 0 view .LVU1126
 3975 03a4 FFF7FEFF 		bl	cur_shift
 3976              	.LVL335:
  90:src/console.c ****     case KEY_F6:
 3977              		.loc 2 90 10 view .LVU1127
 3978 03a8 0128     		cmp	r0, #1
 3979 03aa 00F08981 		beq	.L375
 3980              	.L289:
  92:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 3981              		.loc 2 92 7 is_stmt 1 view .LVU1128
  92:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 3982              		.loc 2 92 11 is_stmt 0 view .LVU1129
 3983 03ae FFF7FEFF 		bl	cur_shift
ARM GAS  /tmp/cc0ERj20.s 			page 108


 3984              	.LVL336:
  92:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 3985              		.loc 2 92 10 view .LVU1130
 3986 03b2 0028     		cmp	r0, #0
 3987 03b4 00F0CD80 		beq	.L376
  93:src/console.c ****     }
 3988              		.loc 2 93 7 is_stmt 1 view .LVU1131
  93:src/console.c ****     }
 3989              		.loc 2 93 11 is_stmt 0 view .LVU1132
 3990 03b8 FFF7FEFF 		bl	cur_shift
 3991              	.LVL337:
  93:src/console.c ****     }
 3992              		.loc 2 93 10 view .LVU1133
 3993 03bc 0128     		cmp	r0, #1
 3994 03be 00F08B81 		beq	.L377
 3995              	.L288:
 119:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 3996              		.loc 2 119 3 is_stmt 1 view .LVU1134
 119:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 3997              		.loc 2 119 8 is_stmt 0 view .LVU1135
 3998 03c2 FFF7FEFF 		bl	get_alpha_state
 3999              	.LVL338:
 119:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4000              		.loc 2 119 6 view .LVU1136
 4001 03c6 0028     		cmp	r0, #0
 4002 03c8 64D0     		beq	.L317
 120:src/console.c ****       switch (cur_shift()) { 
 4003              		.loc 2 120 5 is_stmt 1 view .LVU1137
 120:src/console.c ****       switch (cur_shift()) { 
 4004              		.loc 2 120 8 is_stmt 0 view .LVU1138
 4005 03ca 1C2D     		cmp	r5, #28
 4006 03cc 00F00281 		beq	.L378
 137:src/console.c ****   }
 4007              		.loc 2 137 5 is_stmt 1 view .LVU1139
 137:src/console.c ****   }
 4008              		.loc 2 137 26 is_stmt 0 view .LVU1140
 4009 03d0 A84B     		ldr	r3, .L390+16
 4010 03d2 60E7     		b	.L359
 4011              	.L314:
 112:src/console.c ****     case KEY_F6:
 4012              		.loc 2 112 7 is_stmt 1 view .LVU1141
 112:src/console.c ****     case KEY_F6:
 4013              		.loc 2 112 11 is_stmt 0 view .LVU1142
 4014 03d4 FFF7FEFF 		bl	cur_shift
 4015              	.LVL339:
 112:src/console.c ****     case KEY_F6:
 4016              		.loc 2 112 10 view .LVU1143
 4017 03d8 0128     		cmp	r0, #1
 4018 03da 00F02481 		beq	.L379
 4019              	.L303:
 114:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 4020              		.loc 2 114 7 is_stmt 1 view .LVU1144
 114:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 4021              		.loc 2 114 11 is_stmt 0 view .LVU1145
 4022 03de FFF7FEFF 		bl	cur_shift
 4023              	.LVL340:
 114:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
ARM GAS  /tmp/cc0ERj20.s 			page 109


 4024              		.loc 2 114 10 view .LVU1146
 4025 03e2 0028     		cmp	r0, #0
 4026 03e4 6CD1     		bne	.L315
 114:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 4027              		.loc 2 114 35 is_stmt 1 view .LVU1147
 114:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 4028              		.loc 2 114 69 is_stmt 0 view .LVU1148
 4029 03e6 3168     		ldr	r1, [r6]
 4030 03e8 A34A     		ldr	r2, .L390+20
 4031 03ea D023     		movs	r3, #208
 4032 03ec 03FB01F3 		mul	r3, r3, r1
 4033 03f0 D018     		adds	r0, r2, r3
 4034 03f2 D0E92C01 		ldrd	r0, r1, [r0, #176]
 4035 03f6 B033     		adds	r3, r3, #176
 4036              	.L361:
 115:src/console.c ****     }
 4037              		.loc 2 115 69 view .LVU1149
 4038 03f8 0DF1080A 		add	r10, sp, #8
 4039 03fc D55C     		ldrb	r5, [r2, r3]	@ zero_extendqisi2
 4040              	.LVL341:
 115:src/console.c ****     }
 4041              		.loc 2 115 69 view .LVU1150
 4042 03fe 8AE80300 		stm	r10, {r0, r1}
 4043 0402 1344     		add	r3, r3, r2
 4044 0404 5F68     		ldr	r7, [r3, #4]
 4045              	.LVL342:
 115:src/console.c ****     }
 4046              		.loc 2 115 69 view .LVU1151
 4047 0406 DEE6     		b	.L284
 4048              	.LVL343:
 4049              	.L313:
 109:src/console.c ****     case KEY_F5:
 4050              		.loc 2 109 7 is_stmt 1 view .LVU1152
 109:src/console.c ****     case KEY_F5:
 4051              		.loc 2 109 11 is_stmt 0 view .LVU1153
 4052 0408 FFF7FEFF 		bl	cur_shift
 4053              	.LVL344:
 109:src/console.c ****     case KEY_F5:
 4054              		.loc 2 109 10 view .LVU1154
 4055 040c 0128     		cmp	r0, #1
 4056 040e 00F0F680 		beq	.L380
 4057              	.L305:
 111:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 4058              		.loc 2 111 7 is_stmt 1 view .LVU1155
 111:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 4059              		.loc 2 111 11 is_stmt 0 view .LVU1156
 4060 0412 FFF7FEFF 		bl	cur_shift
 4061              	.LVL345:
 111:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 4062              		.loc 2 111 10 view .LVU1157
 4063 0416 0028     		cmp	r0, #0
 4064 0418 DCD1     		bne	.L314
 111:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 4065              		.loc 2 111 35 is_stmt 1 view .LVU1158
 111:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 4066              		.loc 2 111 69 is_stmt 0 view .LVU1159
 4067 041a 3168     		ldr	r1, [r6]
ARM GAS  /tmp/cc0ERj20.s 			page 110


 4068 041c 964A     		ldr	r2, .L390+20
 4069 041e D023     		movs	r3, #208
 4070 0420 03FB01F3 		mul	r3, r3, r1
 4071 0424 D018     		adds	r0, r2, r3
 4072 0426 D0E92401 		ldrd	r0, r1, [r0, #144]
 4073 042a 9033     		adds	r3, r3, #144
 4074 042c E4E7     		b	.L361
 4075              	.L312:
 106:src/console.c ****     case KEY_F4:
 4076              		.loc 2 106 7 is_stmt 1 view .LVU1160
 106:src/console.c ****     case KEY_F4:
 4077              		.loc 2 106 11 is_stmt 0 view .LVU1161
 4078 042e FFF7FEFF 		bl	cur_shift
 4079              	.LVL346:
 106:src/console.c ****     case KEY_F4:
 4080              		.loc 2 106 10 view .LVU1162
 4081 0432 0128     		cmp	r0, #1
 4082 0434 00F0ED80 		beq	.L381
 4083              	.L306:
 108:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 4084              		.loc 2 108 7 is_stmt 1 view .LVU1163
 108:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 4085              		.loc 2 108 11 is_stmt 0 view .LVU1164
 4086 0438 FFF7FEFF 		bl	cur_shift
 4087              	.LVL347:
 108:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 4088              		.loc 2 108 10 view .LVU1165
 4089 043c 0028     		cmp	r0, #0
 4090 043e E3D1     		bne	.L313
 108:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 4091              		.loc 2 108 35 is_stmt 1 view .LVU1166
 108:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 4092              		.loc 2 108 69 is_stmt 0 view .LVU1167
 4093 0440 3168     		ldr	r1, [r6]
 4094 0442 8D4A     		ldr	r2, .L390+20
 4095 0444 D023     		movs	r3, #208
 4096 0446 03FB01F3 		mul	r3, r3, r1
 4097 044a D018     		adds	r0, r2, r3
 4098 044c D0E91C01 		ldrd	r0, r1, [r0, #112]
 4099 0450 7033     		adds	r3, r3, #112
 4100 0452 D1E7     		b	.L361
 4101              	.L309:
  99:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 4102              		.loc 2 99 7 is_stmt 1 view .LVU1168
  99:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 4103              		.loc 2 99 11 is_stmt 0 view .LVU1169
 4104 0454 FFF7FEFF 		bl	cur_shift
 4105              	.LVL348:
  99:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 4106              		.loc 2 99 10 view .LVU1170
 4107 0458 0028     		cmp	r0, #0
 4108 045a 70D0     		beq	.L382
 100:src/console.c ****     case KEY_F2:
 4109              		.loc 2 100 7 is_stmt 1 view .LVU1171
 100:src/console.c ****     case KEY_F2:
 4110              		.loc 2 100 11 is_stmt 0 view .LVU1172
 4111 045c FFF7FEFF 		bl	cur_shift
ARM GAS  /tmp/cc0ERj20.s 			page 111


 4112              	.LVL349:
 100:src/console.c ****     case KEY_F2:
 4113              		.loc 2 100 10 view .LVU1173
 4114 0460 0128     		cmp	r0, #1
 4115 0462 00F0F480 		beq	.L383
 4116              	.L308:
 102:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 4117              		.loc 2 102 7 is_stmt 1 view .LVU1174
 102:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 4118              		.loc 2 102 11 is_stmt 0 view .LVU1175
 4119 0466 FFF7FEFF 		bl	cur_shift
 4120              	.LVL350:
 102:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 4121              		.loc 2 102 10 view .LVU1176
 4122 046a 0028     		cmp	r0, #0
 4123 046c 5DD0     		beq	.L384
 103:src/console.c ****     case KEY_F3:
 4124              		.loc 2 103 7 is_stmt 1 view .LVU1177
 103:src/console.c ****     case KEY_F3:
 4125              		.loc 2 103 11 is_stmt 0 view .LVU1178
 4126 046e FFF7FEFF 		bl	cur_shift
 4127              	.LVL351:
 103:src/console.c ****     case KEY_F3:
 4128              		.loc 2 103 10 view .LVU1179
 4129 0472 0128     		cmp	r0, #1
 4130 0474 00F0E180 		beq	.L385
 4131              	.L307:
 105:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 4132              		.loc 2 105 7 is_stmt 1 view .LVU1180
 105:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 4133              		.loc 2 105 11 is_stmt 0 view .LVU1181
 4134 0478 FFF7FEFF 		bl	cur_shift
 4135              	.LVL352:
 105:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 4136              		.loc 2 105 10 view .LVU1182
 4137 047c 0028     		cmp	r0, #0
 4138 047e D6D1     		bne	.L312
 105:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 4139              		.loc 2 105 35 is_stmt 1 view .LVU1183
 105:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 4140              		.loc 2 105 69 is_stmt 0 view .LVU1184
 4141 0480 3168     		ldr	r1, [r6]
 4142 0482 7D4A     		ldr	r2, .L390+20
 4143 0484 D023     		movs	r3, #208
 4144 0486 03FB01F3 		mul	r3, r3, r1
 4145 048a D018     		adds	r0, r2, r3
 4146 048c D0E91401 		ldrd	r0, r1, [r0, #80]
 4147 0490 5033     		adds	r3, r3, #80
 4148 0492 B1E7     		b	.L361
 4149              	.L317:
 140:src/console.c ****   case SHIFT_N:    
 4150              		.loc 2 140 3 is_stmt 1 view .LVU1185
 140:src/console.c ****   case SHIFT_N:    
 4151              		.loc 2 140 11 is_stmt 0 view .LVU1186
 4152 0494 FFF7FEFF 		bl	cur_shift
 4153              	.LVL353:
 140:src/console.c ****   case SHIFT_N:    
ARM GAS  /tmp/cc0ERj20.s 			page 112


 4154              		.loc 2 140 3 view .LVU1187
 4155 0498 0128     		cmp	r0, #1
 4156 049a 00F09980 		beq	.L322
 4157 049e 0228     		cmp	r0, #2
 4158 04a0 00F08980 		beq	.L323
 4159 04a4 0028     		cmp	r0, #0
 4160 04a6 00F08480 		beq	.L324
  55:src/console.c **** 
 4161              		.loc 2 55 41 view .LVU1188
 4162 04aa EDB2     		uxtb	r5, r5
 4163              	.LVL354:
  55:src/console.c **** 
 4164              		.loc 2 55 41 view .LVU1189
 4165              	.LBE163:
 4166              	.LBE196:
 524:src/console.c **** 	set_menu ( remapped.shift );
 4167              		.loc 2 524 7 is_stmt 1 view .LVU1190
 524:src/console.c **** 	set_menu ( remapped.shift );
 4168              		.loc 2 524 10 is_stmt 0 view .LVU1191
 4169 04ac 2F2D     		cmp	r5, #47
 4170 04ae 7FF48CAE 		bne	.L325
 525:src/console.c **** 	display_current_menu ();
 4171              		.loc 2 525 2 is_stmt 1 view .LVU1192
 4172              	.LVL355:
 4173              	.LBB197:
  85:src/menu.c    ****   int m = current_menu;
 4174              		.loc 1 85 6 view .LVU1193
 4175              	.LBB184:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 4176              		.loc 1 86 3 view .LVU1194
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 4177              		.loc 1 86 7 is_stmt 0 view .LVU1195
 4178 04b2 3368     		ldr	r3, [r6]
 4179              	.LVL356:
  87:src/menu.c    ****     current_menu = default_menu;
 4180              		.loc 1 87 3 is_stmt 1 view .LVU1196
  87:src/menu.c    ****     current_menu = default_menu;
 4181              		.loc 1 87 6 is_stmt 0 view .LVU1197
 4182 04b4 002B     		cmp	r3, #0
 4183 04b6 00F04781 		beq	.L357
 4184 04ba 0DF1080A 		add	r10, sp, #8
 4185 04be B3E6     		b	.L326
 4186              	.LVL357:
 4187              	.L315:
  87:src/menu.c    ****     current_menu = default_menu;
 4188              		.loc 1 87 6 view .LVU1198
 4189              	.LBE184:
 4190              	.LBE197:
 4191              	.LBB198:
 4192              	.LBB164:
 115:src/console.c ****     }
 4193              		.loc 2 115 7 is_stmt 1 view .LVU1199
 115:src/console.c ****     }
 4194              		.loc 2 115 11 is_stmt 0 view .LVU1200
 4195 04c0 FFF7FEFF 		bl	cur_shift
 4196              	.LVL358:
 115:src/console.c ****     }
ARM GAS  /tmp/cc0ERj20.s 			page 113


 4197              		.loc 2 115 10 view .LVU1201
 4198 04c4 0128     		cmp	r0, #1
 4199 04c6 7FF47CAF 		bne	.L288
 115:src/console.c ****     }
 4200              		.loc 2 115 35 is_stmt 1 view .LVU1202
 115:src/console.c ****     }
 4201              		.loc 2 115 69 is_stmt 0 view .LVU1203
 4202 04ca 3168     		ldr	r1, [r6]
 4203 04cc 6A4A     		ldr	r2, .L390+20
 4204 04ce D023     		movs	r3, #208
 4205 04d0 03FB01F3 		mul	r3, r3, r1
 4206 04d4 D018     		adds	r0, r2, r3
 4207 04d6 D0E92E01 		ldrd	r0, r1, [r0, #184]
 4208 04da B833     		adds	r3, r3, #184
 4209 04dc 8CE7     		b	.L361
 4210              	.L296:
  78:src/console.c ****     case KEY_F2:
 4211              		.loc 2 78 7 is_stmt 1 view .LVU1204
  78:src/console.c ****     case KEY_F2:
 4212              		.loc 2 78 11 is_stmt 0 view .LVU1205
 4213 04de FFF7FEFF 		bl	cur_shift
 4214              	.LVL359:
  78:src/console.c ****     case KEY_F2:
 4215              		.loc 2 78 10 view .LVU1206
 4216 04e2 0128     		cmp	r0, #1
 4217 04e4 00F01B81 		beq	.L386
 4218              	.L294:
  80:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4219              		.loc 2 80 7 is_stmt 1 view .LVU1207
  80:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4220              		.loc 2 80 11 is_stmt 0 view .LVU1208
 4221 04e8 FFF7FEFF 		bl	cur_shift
 4222              	.LVL360:
  80:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4223              		.loc 2 80 10 view .LVU1209
 4224 04ec 0028     		cmp	r0, #0
 4225 04ee 7FF43BAF 		bne	.L297
  80:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4226              		.loc 2 80 35 is_stmt 1 view .LVU1210
  80:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4227              		.loc 2 80 58 is_stmt 0 view .LVU1211
 4228 04f2 624B     		ldr	r3, .L390+24
 4229 04f4 9BF83050 		ldrb	r5, [fp, #48]	@ zero_extendqisi2
 4230              	.LVL361:
  80:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4231              		.loc 2 80 58 view .LVU1212
 4232 04f8 DBF83470 		ldr	r7, [fp, #52]
 4233              	.LVL362:
  80:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4234              		.loc 2 80 58 view .LVU1213
 4235 04fc 93E80300 		ldm	r3, {r0, r1}
 4236 0500 0DF1080A 		add	r10, sp, #8
 4237 0504 8AE80300 		stm	r10, {r0, r1}
 4238 0508 5DE6     		b	.L284
 4239              	.LVL363:
 4240              	.L295:
  77:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
ARM GAS  /tmp/cc0ERj20.s 			page 114


 4241              		.loc 2 77 7 is_stmt 1 view .LVU1214
  77:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4242              		.loc 2 77 11 is_stmt 0 view .LVU1215
 4243 050a FFF7FEFF 		bl	cur_shift
 4244              	.LVL364:
  77:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4245              		.loc 2 77 10 view .LVU1216
 4246 050e 0028     		cmp	r0, #0
 4247 0510 E5D1     		bne	.L296
  77:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4248              		.loc 2 77 35 is_stmt 1 view .LVU1217
  77:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4249              		.loc 2 77 58 is_stmt 0 view .LVU1218
 4250 0512 5B4B     		ldr	r3, .L390+28
 4251 0514 9BF81050 		ldrb	r5, [fp, #16]	@ zero_extendqisi2
 4252              	.LVL365:
  77:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4253              		.loc 2 77 58 view .LVU1219
 4254 0518 DBF81470 		ldr	r7, [fp, #20]
 4255              	.LVL366:
  77:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4256              		.loc 2 77 58 view .LVU1220
 4257 051c 93E80300 		ldm	r3, {r0, r1}
 4258 0520 0DF1080A 		add	r10, sp, #8
 4259 0524 8AE80300 		stm	r10, {r0, r1}
 4260 0528 4DE6     		b	.L284
 4261              	.LVL367:
 4262              	.L384:
 102:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 4263              		.loc 2 102 35 is_stmt 1 view .LVU1221
 102:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 4264              		.loc 2 102 69 is_stmt 0 view .LVU1222
 4265 052a 3168     		ldr	r1, [r6]
 4266 052c 524A     		ldr	r2, .L390+20
 4267 052e D023     		movs	r3, #208
 4268 0530 03FB01F3 		mul	r3, r3, r1
 4269 0534 D018     		adds	r0, r2, r3
 4270 0536 D0E90C01 		ldrd	r0, r1, [r0, #48]
 4271 053a 3033     		adds	r3, r3, #48
 4272 053c 5CE7     		b	.L361
 4273              	.L382:
  99:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 4274              		.loc 2 99 35 is_stmt 1 view .LVU1223
  99:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 4275              		.loc 2 99 69 is_stmt 0 view .LVU1224
 4276 053e 3168     		ldr	r1, [r6]
 4277 0540 4D4A     		ldr	r2, .L390+20
 4278 0542 D023     		movs	r3, #208
 4279 0544 03FB01F3 		mul	r3, r3, r1
 4280 0548 D018     		adds	r0, r2, r3
 4281 054a D0E90401 		ldrd	r0, r1, [r0, #16]
 4282 054e 1033     		adds	r3, r3, #16
 4283 0550 52E7     		b	.L361
 4284              	.L376:
  92:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 4285              		.loc 2 92 35 is_stmt 1 view .LVU1225
  92:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
ARM GAS  /tmp/cc0ERj20.s 			page 115


 4286              		.loc 2 92 58 is_stmt 0 view .LVU1226
 4287 0552 4C4B     		ldr	r3, .L390+32
 4288 0554 9BF8B050 		ldrb	r5, [fp, #176]	@ zero_extendqisi2
 4289              	.LVL368:
  92:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 4290              		.loc 2 92 58 view .LVU1227
 4291 0558 DBF8B470 		ldr	r7, [fp, #180]
 4292              	.LVL369:
  92:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 4293              		.loc 2 92 58 view .LVU1228
 4294 055c 93E80300 		ldm	r3, {r0, r1}
 4295 0560 0DF1080A 		add	r10, sp, #8
 4296 0564 8AE80300 		stm	r10, {r0, r1}
 4297 0568 2DE6     		b	.L284
 4298              	.LVL370:
 4299              	.L374:
  89:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 4300              		.loc 2 89 35 is_stmt 1 view .LVU1229
  89:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 4301              		.loc 2 89 58 is_stmt 0 view .LVU1230
 4302 056a 474B     		ldr	r3, .L390+36
 4303 056c 9BF89050 		ldrb	r5, [fp, #144]	@ zero_extendqisi2
 4304              	.LVL371:
  89:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 4305              		.loc 2 89 58 view .LVU1231
 4306 0570 DBF89470 		ldr	r7, [fp, #148]
 4307              	.LVL372:
  89:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 4308              		.loc 2 89 58 view .LVU1232
 4309 0574 93E80300 		ldm	r3, {r0, r1}
 4310 0578 0DF1080A 		add	r10, sp, #8
 4311 057c 8AE80300 		stm	r10, {r0, r1}
 4312 0580 21E6     		b	.L284
 4313              	.LVL373:
 4314              	.L372:
  86:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 4315              		.loc 2 86 35 is_stmt 1 view .LVU1233
  86:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 4316              		.loc 2 86 58 is_stmt 0 view .LVU1234
 4317 0582 424B     		ldr	r3, .L390+40
 4318 0584 9BF87050 		ldrb	r5, [fp, #112]	@ zero_extendqisi2
 4319              	.LVL374:
  86:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 4320              		.loc 2 86 58 view .LVU1235
 4321 0588 DBF87470 		ldr	r7, [fp, #116]
 4322              	.LVL375:
  86:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 4323              		.loc 2 86 58 view .LVU1236
 4324 058c 93E80300 		ldm	r3, {r0, r1}
 4325 0590 0DF1080A 		add	r10, sp, #8
 4326 0594 8AE80300 		stm	r10, {r0, r1}
 4327 0598 15E6     		b	.L284
 4328              	.LVL376:
 4329              	.L370:
  83:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 4330              		.loc 2 83 35 is_stmt 1 view .LVU1237
  83:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
ARM GAS  /tmp/cc0ERj20.s 			page 116


 4331              		.loc 2 83 58 is_stmt 0 view .LVU1238
 4332 059a 3D4B     		ldr	r3, .L390+44
 4333 059c 9BF85050 		ldrb	r5, [fp, #80]	@ zero_extendqisi2
 4334              	.LVL377:
  83:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 4335              		.loc 2 83 58 view .LVU1239
 4336 05a0 DBF85470 		ldr	r7, [fp, #84]
 4337              	.LVL378:
  83:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 4338              		.loc 2 83 58 view .LVU1240
 4339 05a4 93E80300 		ldm	r3, {r0, r1}
 4340 05a8 0DF1080A 		add	r10, sp, #8
 4341 05ac 8AE80300 		stm	r10, {r0, r1}
 4342 05b0 09E6     		b	.L284
 4343              	.LVL379:
 4344              	.L324:
 142:src/console.c ****     break;
 4345              		.loc 2 142 5 is_stmt 1 view .LVU1241
 142:src/console.c ****     break;
 4346              		.loc 2 142 24 is_stmt 0 view .LVU1242
 4347 05b2 384B     		ldr	r3, .L390+48
 4348 05b4 6FE6     		b	.L359
 4349              	.L323:
 146:src/console.c ****   case SHIFT_G:
 4350              		.loc 2 146 5 is_stmt 1 view .LVU1243
 148:src/console.c ****     break;
 4351              		.loc 2 148 5 view .LVU1244
 148:src/console.c ****     break;
 4352              		.loc 2 148 26 is_stmt 0 view .LVU1245
 4353 05b6 384B     		ldr	r3, .L390+52
 4354 05b8 03EBC502 		add	r2, r3, r5, lsl #3
 4355 05bc 92E80300 		ldm	r2, {r0, r1}
 4356 05c0 0DF1080A 		add	r10, sp, #8
 4357 05c4 8AE80300 		stm	r10, {r0, r1}
 4358 05c8 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4359              	.LVL380:
 148:src/console.c ****     break;
 4360              		.loc 2 148 26 view .LVU1246
 4361 05cc 0F46     		mov	r7, r1
 4362              	.LVL381:
 148:src/console.c ****     break;
 4363              		.loc 2 148 26 view .LVU1247
 4364 05ce FAE5     		b	.L284
 4365              	.LVL382:
 4366              	.L322:
 143:src/console.c ****   case SHIFT_F:
 4367              		.loc 2 143 5 is_stmt 1 view .LVU1248
 145:src/console.c ****     break;
 4368              		.loc 2 145 5 view .LVU1249
 145:src/console.c ****     break;
 4369              		.loc 2 145 26 is_stmt 0 view .LVU1250
 4370 05d0 324B     		ldr	r3, .L390+56
 4371 05d2 60E6     		b	.L359
 4372              	.L378:
 121:src/console.c ****       case SHIFT_N:
 4373              		.loc 2 121 7 is_stmt 1 view .LVU1251
 121:src/console.c ****       case SHIFT_N:
ARM GAS  /tmp/cc0ERj20.s 			page 117


 4374              		.loc 2 121 15 is_stmt 0 view .LVU1252
 4375 05d4 FFF7FEFF 		bl	cur_shift
 4376              	.LVL383:
 121:src/console.c ****       case SHIFT_N:
 4377              		.loc 2 121 7 view .LVU1253
 4378 05d8 0328     		cmp	r0, #3
 4379 05da 3FF614AE 		bhi	.L337
 4380 05de 0128     		cmp	r0, #1
 4381 05e0 0BD8     		bhi	.L320
 4382 05e2 0028     		cmp	r0, #0
 4383 05e4 00F0A780 		beq	.L387
 124:src/console.c ****       case SHIFT_F:
 4384              		.loc 2 124 2 is_stmt 1 view .LVU1254
 126:src/console.c **** 	break;
 4385              		.loc 2 126 2 view .LVU1255
 126:src/console.c **** 	break;
 4386              		.loc 2 126 23 is_stmt 0 view .LVU1256
 4387 05e8 2D4B     		ldr	r3, .L390+60
 4388 05ea 93E80300 		ldm	r3, {r0, r1}
 4389 05ee 0DF1080A 		add	r10, sp, #8
 4390 05f2 8AE80300 		stm	r10, {r0, r1}
 4391              	.LVL384:
 126:src/console.c **** 	break;
 4392              		.loc 2 126 23 view .LVU1257
 4393              	.LBE164:
 4394              	.LBE198:
 524:src/console.c **** 	set_menu ( remapped.shift );
 4395              		.loc 2 524 7 is_stmt 1 view .LVU1258
 540:src/console.c **** 	SET_ST(STAT_MENU);
 4396              		.loc 2 540 7 view .LVU1259
 547:src/console.c **** 	remapped = do_multi (remapped);
 4397              		.loc 2 547 7 view .LVU1260
 551:src/console.c ****       process_keycode_with_shift(remapped);
 4398              		.loc 2 551 7 view .LVU1261
 4399              	.LBB199:
 4400              	.LBB165:
 126:src/console.c **** 	break;
 4401              		.loc 2 126 23 is_stmt 0 view .LVU1262
 4402 05f6 2A25     		movs	r5, #42
 4403              	.LVL385:
 126:src/console.c **** 	break;
 4404              		.loc 2 126 23 view .LVU1263
 4405 05f8 07E6     		b	.L319
 4406              	.LVL386:
 4407              	.L320:
 127:src/console.c ****       case SHIFT_G:
 4408              		.loc 2 127 2 is_stmt 1 view .LVU1264
 129:src/console.c **** 	break;
 4409              		.loc 2 129 2 view .LVU1265
 129:src/console.c **** 	break;
 4410              		.loc 2 129 9 is_stmt 0 view .LVU1266
 4411 05fa 2A4B     		ldr	r3, .L390+64
 4412 05fc DBE5     		b	.L360
 4413              	.L380:
 109:src/console.c ****     case KEY_F5:
 4414              		.loc 2 109 35 is_stmt 1 view .LVU1267
 109:src/console.c ****     case KEY_F5:
ARM GAS  /tmp/cc0ERj20.s 			page 118


 4415              		.loc 2 109 69 is_stmt 0 view .LVU1268
 4416 05fe 3168     		ldr	r1, [r6]
 4417 0600 1D4A     		ldr	r2, .L390+20
 4418 0602 D023     		movs	r3, #208
 4419 0604 03FB01F3 		mul	r3, r3, r1
 4420 0608 D018     		adds	r0, r2, r3
 4421 060a D0E91E01 		ldrd	r0, r1, [r0, #120]
 4422 060e 7833     		adds	r3, r3, #120
 4423 0610 F2E6     		b	.L361
 4424              	.L381:
 106:src/console.c ****     case KEY_F4:
 4425              		.loc 2 106 35 is_stmt 1 view .LVU1269
 106:src/console.c ****     case KEY_F4:
 4426              		.loc 2 106 69 is_stmt 0 view .LVU1270
 4427 0612 3168     		ldr	r1, [r6]
 4428 0614 184A     		ldr	r2, .L390+20
 4429 0616 D023     		movs	r3, #208
 4430 0618 03FB01F3 		mul	r3, r3, r1
 4431 061c D018     		adds	r0, r2, r3
 4432 061e D0E91601 		ldrd	r0, r1, [r0, #88]
 4433 0622 5833     		adds	r3, r3, #88
 4434 0624 E8E6     		b	.L361
 4435              	.L379:
 112:src/console.c ****     case KEY_F6:
 4436              		.loc 2 112 35 is_stmt 1 view .LVU1271
 112:src/console.c ****     case KEY_F6:
 4437              		.loc 2 112 69 is_stmt 0 view .LVU1272
 4438 0626 3168     		ldr	r1, [r6]
 4439 0628 134A     		ldr	r2, .L390+20
 4440 062a D023     		movs	r3, #208
 4441 062c 03FB01F3 		mul	r3, r3, r1
 4442 0630 D018     		adds	r0, r2, r3
 4443 0632 D0E92601 		ldrd	r0, r1, [r0, #152]
 4444 0636 9833     		adds	r3, r3, #152
 4445 0638 DEE6     		b	.L361
 4446              	.L385:
 103:src/console.c ****     case KEY_F3:
 4447              		.loc 2 103 35 is_stmt 1 view .LVU1273
 103:src/console.c ****     case KEY_F3:
 4448              		.loc 2 103 69 is_stmt 0 view .LVU1274
 4449 063a 3168     		ldr	r1, [r6]
 4450 063c 0E4A     		ldr	r2, .L390+20
 4451 063e D023     		movs	r3, #208
 4452 0640 03FB01F3 		mul	r3, r3, r1
 4453 0644 D018     		adds	r0, r2, r3
 4454 0646 D0E90E01 		ldrd	r0, r1, [r0, #56]
 4455 064a 3833     		adds	r3, r3, #56
 4456 064c D4E6     		b	.L361
 4457              	.L383:
 100:src/console.c ****     case KEY_F2:
 4458              		.loc 2 100 35 is_stmt 1 view .LVU1275
 100:src/console.c ****     case KEY_F2:
 4459              		.loc 2 100 69 is_stmt 0 view .LVU1276
 4460 064e 3168     		ldr	r1, [r6]
 4461 0650 094A     		ldr	r2, .L390+20
 4462 0652 D023     		movs	r3, #208
 4463 0654 03FB01F3 		mul	r3, r3, r1
ARM GAS  /tmp/cc0ERj20.s 			page 119


 4464 0658 D018     		adds	r0, r2, r3
 4465 065a D0E90601 		ldrd	r0, r1, [r0, #24]
 4466 065e 1833     		adds	r3, r3, #24
 4467 0660 CAE6     		b	.L361
 4468              	.L391:
 4469 0662 00BF     		.align	2
 4470              	.L390:
 4471 0664 00000000 		.word	.LANCHOR14
 4472 0668 00000000 		.word	.LANCHOR2
 4473 066c 00000000 		.word	.LANCHOR13
 4474 0670 00000000 		.word	.LANCHOR3
 4475 0674 00000000 		.word	.LANCHOR19
 4476 0678 00000000 		.word	.LANCHOR5
 4477 067c 30000000 		.word	.LANCHOR4+48
 4478 0680 10000000 		.word	.LANCHOR4+16
 4479 0684 B0000000 		.word	.LANCHOR4+176
 4480 0688 90000000 		.word	.LANCHOR4+144
 4481 068c 70000000 		.word	.LANCHOR4+112
 4482 0690 50000000 		.word	.LANCHOR4+80
 4483 0694 00000000 		.word	.LANCHOR16
 4484 0698 00000000 		.word	.LANCHOR20
 4485 069c 00000000 		.word	.LANCHOR17
 4486 06a0 E0000000 		.word	.LANCHOR17+224
 4487 06a4 00000000 		.word	.LANCHOR18
 4488              	.L373:
  87:src/console.c ****     case KEY_F5:
 4489              		.loc 2 87 35 is_stmt 1 view .LVU1277
  87:src/console.c ****     case KEY_F5:
 4490              		.loc 2 87 58 is_stmt 0 view .LVU1278
 4491 06a8 2A4B     		ldr	r3, .L392
 4492 06aa 9BF87850 		ldrb	r5, [fp, #120]	@ zero_extendqisi2
 4493              	.LVL387:
  87:src/console.c ****     case KEY_F5:
 4494              		.loc 2 87 58 view .LVU1279
 4495 06ae DBF87C70 		ldr	r7, [fp, #124]
 4496              	.LVL388:
  87:src/console.c ****     case KEY_F5:
 4497              		.loc 2 87 58 view .LVU1280
 4498 06b2 93E80300 		ldm	r3, {r0, r1}
 4499 06b6 0DF1080A 		add	r10, sp, #8
 4500 06ba 8AE80300 		stm	r10, {r0, r1}
 4501 06be 82E5     		b	.L284
 4502              	.LVL389:
 4503              	.L375:
  90:src/console.c ****     case KEY_F6:
 4504              		.loc 2 90 35 is_stmt 1 view .LVU1281
  90:src/console.c ****     case KEY_F6:
 4505              		.loc 2 90 58 is_stmt 0 view .LVU1282
 4506 06c0 254B     		ldr	r3, .L392+4
 4507 06c2 9BF89850 		ldrb	r5, [fp, #152]	@ zero_extendqisi2
 4508              	.LVL390:
  90:src/console.c ****     case KEY_F6:
 4509              		.loc 2 90 58 view .LVU1283
 4510 06c6 DBF89C70 		ldr	r7, [fp, #156]
 4511              	.LVL391:
  90:src/console.c ****     case KEY_F6:
 4512              		.loc 2 90 58 view .LVU1284
ARM GAS  /tmp/cc0ERj20.s 			page 120


 4513 06ca 93E80300 		ldm	r3, {r0, r1}
 4514 06ce 0DF1080A 		add	r10, sp, #8
 4515 06d2 8AE80300 		stm	r10, {r0, r1}
 4516 06d6 76E5     		b	.L284
 4517              	.LVL392:
 4518              	.L377:
  93:src/console.c ****     }
 4519              		.loc 2 93 35 is_stmt 1 view .LVU1285
  93:src/console.c ****     }
 4520              		.loc 2 93 58 is_stmt 0 view .LVU1286
 4521 06d8 98E80300 		ldm	r8, {r0, r1}
 4522 06dc 0DF1080A 		add	r10, sp, #8
 4523 06e0 8AE80300 		stm	r10, {r0, r1}
 4524 06e4 9BF8B850 		ldrb	r5, [fp, #184]	@ zero_extendqisi2
 4525              	.LVL393:
  93:src/console.c ****     }
 4526              		.loc 2 93 58 view .LVU1287
 4527 06e8 DBF8BC70 		ldr	r7, [fp, #188]
 4528              	.LVL394:
  93:src/console.c ****     }
 4529              		.loc 2 93 58 view .LVU1288
 4530 06ec 6BE5     		b	.L284
 4531              	.LVL395:
 4532              	.L371:
  84:src/console.c ****     case KEY_F4:
 4533              		.loc 2 84 35 is_stmt 1 view .LVU1289
  84:src/console.c ****     case KEY_F4:
 4534              		.loc 2 84 58 is_stmt 0 view .LVU1290
 4535 06ee 1B4B     		ldr	r3, .L392+8
 4536 06f0 9BF85850 		ldrb	r5, [fp, #88]	@ zero_extendqisi2
 4537              	.LVL396:
  84:src/console.c ****     case KEY_F4:
 4538              		.loc 2 84 58 view .LVU1291
 4539 06f4 DBF85C70 		ldr	r7, [fp, #92]
 4540              	.LVL397:
  84:src/console.c ****     case KEY_F4:
 4541              		.loc 2 84 58 view .LVU1292
 4542 06f8 93E80300 		ldm	r3, {r0, r1}
 4543 06fc 0DF1080A 		add	r10, sp, #8
 4544 0700 8AE80300 		stm	r10, {r0, r1}
 4545 0704 5FE5     		b	.L284
 4546              	.LVL398:
 4547              	.L369:
  81:src/console.c ****     case KEY_F3:
 4548              		.loc 2 81 35 is_stmt 1 view .LVU1293
  81:src/console.c ****     case KEY_F3:
 4549              		.loc 2 81 58 is_stmt 0 view .LVU1294
 4550 0706 164B     		ldr	r3, .L392+12
 4551 0708 9BF83850 		ldrb	r5, [fp, #56]	@ zero_extendqisi2
 4552              	.LVL399:
  81:src/console.c ****     case KEY_F3:
 4553              		.loc 2 81 58 view .LVU1295
 4554 070c DBF83C70 		ldr	r7, [fp, #60]
 4555              	.LVL400:
  81:src/console.c ****     case KEY_F3:
 4556              		.loc 2 81 58 view .LVU1296
 4557 0710 93E80300 		ldm	r3, {r0, r1}
ARM GAS  /tmp/cc0ERj20.s 			page 121


 4558 0714 0DF1080A 		add	r10, sp, #8
 4559 0718 8AE80300 		stm	r10, {r0, r1}
 4560 071c 53E5     		b	.L284
 4561              	.LVL401:
 4562              	.L386:
  78:src/console.c ****     case KEY_F2:
 4563              		.loc 2 78 35 is_stmt 1 view .LVU1297
  78:src/console.c ****     case KEY_F2:
 4564              		.loc 2 78 58 is_stmt 0 view .LVU1298
 4565 071e 114B     		ldr	r3, .L392+16
 4566 0720 9BF81850 		ldrb	r5, [fp, #24]	@ zero_extendqisi2
 4567              	.LVL402:
  78:src/console.c ****     case KEY_F2:
 4568              		.loc 2 78 58 view .LVU1299
 4569 0724 DBF81C70 		ldr	r7, [fp, #28]
 4570              	.LVL403:
  78:src/console.c ****     case KEY_F2:
 4571              		.loc 2 78 58 view .LVU1300
 4572 0728 93E80300 		ldm	r3, {r0, r1}
 4573 072c 0DF1080A 		add	r10, sp, #8
 4574 0730 8AE80300 		stm	r10, {r0, r1}
 4575 0734 47E5     		b	.L284
 4576              	.LVL404:
 4577              	.L387:
 123:src/console.c **** 	break;
 4578              		.loc 2 123 2 is_stmt 1 view .LVU1301
 123:src/console.c **** 	break;
 4579              		.loc 2 123 21 is_stmt 0 view .LVU1302
 4580 0736 0C4B     		ldr	r3, .L392+20
 4581 0738 93E80300 		ldm	r3, {r0, r1}
 4582 073c 0DF1080A 		add	r10, sp, #8
 4583 0740 8AE80300 		stm	r10, {r0, r1}
 4584              	.LVL405:
 123:src/console.c **** 	break;
 4585              		.loc 2 123 21 view .LVU1303
 4586              	.LBE165:
 4587              	.LBE199:
 524:src/console.c **** 	set_menu ( remapped.shift );
 4588              		.loc 2 524 7 is_stmt 1 view .LVU1304
 540:src/console.c **** 	SET_ST(STAT_MENU);
 4589              		.loc 2 540 7 view .LVU1305
 547:src/console.c **** 	remapped = do_multi (remapped);
 4590              		.loc 2 547 7 view .LVU1306
 551:src/console.c ****       process_keycode_with_shift(remapped);
 4591              		.loc 2 551 7 view .LVU1307
 4592              	.LBB200:
 4593              	.LBB166:
 123:src/console.c **** 	break;
 4594              		.loc 2 123 21 is_stmt 0 view .LVU1308
 4595 0744 2925     		movs	r5, #41
 4596              	.LVL406:
 123:src/console.c **** 	break;
 4597              		.loc 2 123 21 view .LVU1309
 4598 0746 60E5     		b	.L319
 4599              	.LVL407:
 4600              	.L357:
 123:src/console.c **** 	break;
ARM GAS  /tmp/cc0ERj20.s 			page 122


 4601              		.loc 2 123 21 view .LVU1310
 4602              	.LBE166:
 4603              	.LBE200:
 4604              	.LBB201:
 4605              	.LBB185:
  88:src/menu.c    ****   }
 4606              		.loc 1 88 5 is_stmt 1 view .LVU1311
  88:src/menu.c    ****   }
 4607              		.loc 1 88 18 is_stmt 0 view .LVU1312
 4608 0748 084A     		ldr	r2, .L392+24
 4609 074a 1768     		ldr	r7, [r2]
 4610 074c 3760     		str	r7, [r6]
  96:src/menu.c    **** }
 4611              		.loc 1 96 3 is_stmt 1 view .LVU1313
 4612 074e 0DF1080A 		add	r10, sp, #8
 4613 0752 6EE5     		b	.L327
 4614              	.L393:
 4615              		.align	2
 4616              	.L392:
 4617 0754 78000000 		.word	.LANCHOR4+120
 4618 0758 98000000 		.word	.LANCHOR4+152
 4619 075c 58000000 		.word	.LANCHOR4+88
 4620 0760 38000000 		.word	.LANCHOR4+56
 4621 0764 18000000 		.word	.LANCHOR4+24
 4622 0768 E0000000 		.word	.LANCHOR16+224
 4623 076c 00000000 		.word	.LANCHOR2
 4624              	.LBE185:
 4625              	.LBE201:
 4626              		.cfi_endproc
 4627              	.LFE31:
 4629              		.global	n_p
 4630              		.comm	print_string,22,4
 4631              		.global	spaces
 4632              		.global	release
 4633              		.global	h_shift
 4634              		.global	g_shift
 4635              		.global	f_shift
 4636              		.global	heartbeat
 4637              		.global	no_key
 4638              		.global	MID_MENU
 4639              		.section	.rodata.str1.4,"aMS",%progbits,1
 4640              		.align	2
 4641              	.LC12:
 4642 0000 53797374 		.ascii	"System!\000"
 4642      656D2100 
 4643              		.global	mid_menu
 4644              		.global	cmplx_key_string
 4645              		.align	2
 4646              	.LC13:
 4647 0008 43505800 		.ascii	"CPX\000"
 4648              		.global	arrow_key_string
 4649              		.align	2
 4650              	.LC14:
 4651 000c 2D2D0D00 		.ascii	"--\015\000"
 4652              		.global	UserMenu
 4653              		.section	.rodata
 4654              		.align	2
ARM GAS  /tmp/cc0ERj20.s 			page 123


 4655              		.set	.LANCHOR8,. + 0
 4656              	.LC8:
 4657 0000 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4657      2A2B0708 
 4657      091C0B0C 
 4657      0D0E0F
 4658 000f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4658      13141516 
 4658      00121819 
 4658      1A
 4659 001c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4659      1E1F2000 
 4659      21222324 
 4659      25
 4660              		.section	.bss.current_menu,"aw",%nobits
 4661              		.align	2
 4662              		.set	.LANCHOR1,. + 0
 4665              	current_menu:
 4666 0000 00000000 		.space	4
 4667              		.section	.bss.default_menu,"aw",%nobits
 4668              		.align	2
 4669              		.set	.LANCHOR2,. + 0
 4672              	default_menu:
 4673 0000 00000000 		.space	4
 4674              		.section	.bss.last_menu,"aw",%nobits
 4675              		.align	2
 4676              		.set	.LANCHOR3,. + 0
 4679              	last_menu:
 4680 0000 00000000 		.space	4
 4681              		.section	.bss.mdots,"aw",%nobits
 4682              		.align	2
 4683              		.set	.LANCHOR0,. + 0
 4686              	mdots:
 4687 0000 00000000 		.space	400
 4687      00000000 
 4687      00000000 
 4687      00000000 
 4687      00000000 
 4688              		.section	.bss.n_p,"aw",%nobits
 4689              		.align	2
 4692              	n_p:
 4693 0000 00000000 		.space	4
 4694              		.section	.bss.start_ticks,"aw",%nobits
 4695              		.align	2
 4696              		.set	.LANCHOR9,. + 0
 4699              	start_ticks:
 4700 0000 00000000 		.space	4
 4701              		.section	.data.UserMenu,"aw"
 4702              		.align	2
 4703              		.set	.LANCHOR4,. + 0
 4706              	UserMenu:
 4707 0000 55736572 		.ascii	"User Menu\000"
 4707      204D656E 
 4707      7500
 4708 000a 00000000 		.space	5
 4708      00
 4709 000f 00       		.space	1
ARM GAS  /tmp/cc0ERj20.s 			page 124


 4710 0010 2E       		.byte	46
 4711 0011 000000   		.space	3
 4712 0014 FFFFFFFF 		.word	-1
 4713 0018 2E       		.byte	46
 4714 0019 000000   		.space	3
 4715 001c FFFFFFFF 		.word	-1
 4716 0020 00       		.ascii	"\000"
 4717 0021 00000000 		.space	7
 4717      000000
 4718 0028 00       		.ascii	"\000"
 4719 0029 00000000 		.space	7
 4719      000000
 4720 0030 2E       		.byte	46
 4721 0031 000000   		.space	3
 4722 0034 FFFFFFFF 		.word	-1
 4723 0038 2E       		.byte	46
 4724 0039 000000   		.space	3
 4725 003c FFFFFFFF 		.word	-1
 4726 0040 00       		.ascii	"\000"
 4727 0041 00000000 		.space	7
 4727      000000
 4728 0048 00       		.ascii	"\000"
 4729 0049 00000000 		.space	7
 4729      000000
 4730 0050 2E       		.byte	46
 4731 0051 000000   		.space	3
 4732 0054 FFFFFFFF 		.word	-1
 4733 0058 2E       		.byte	46
 4734 0059 000000   		.space	3
 4735 005c FFFFFFFF 		.word	-1
 4736 0060 00       		.ascii	"\000"
 4737 0061 00000000 		.space	7
 4737      000000
 4738 0068 00       		.ascii	"\000"
 4739 0069 00000000 		.space	7
 4739      000000
 4740 0070 2E       		.byte	46
 4741 0071 000000   		.space	3
 4742 0074 FFFFFFFF 		.word	-1
 4743 0078 2E       		.byte	46
 4744 0079 000000   		.space	3
 4745 007c FFFFFFFF 		.word	-1
 4746 0080 00       		.ascii	"\000"
 4747 0081 00000000 		.space	7
 4747      000000
 4748 0088 00       		.ascii	"\000"
 4749 0089 00000000 		.space	7
 4749      000000
 4750 0090 2C       		.byte	44
 4751 0091 000000   		.space	3
 4752 0094 FFFFFFFF 		.word	-1
 4753 0098 2E       		.byte	46
 4754 0099 000000   		.space	3
 4755 009c FFFFFFFF 		.word	-1
 4756 00a0 2D2D0D00 		.ascii	"--\015\000"
 4757 00a4 00000000 		.space	4
 4758 00a8 00       		.ascii	"\000"
ARM GAS  /tmp/cc0ERj20.s 			page 125


 4759 00a9 00000000 		.space	7
 4759      000000
 4760 00b0 2D       		.byte	45
 4761 00b1 000000   		.space	3
 4762 00b4 FFFFFFFF 		.word	-1
 4763 00b8 31       		.byte	49
 4764 00b9 000000   		.space	3
 4765 00bc 0B000000 		.word	11
 4766 00c0 43505800 		.ascii	"CPX\000"
 4767 00c4 00000000 		.space	4
 4768 00c8 00       		.ascii	"\000"
 4769 00c9 00000000 		.space	7
 4769      000000
 4770              		.section	.data.arrow_key_string,"aw"
 4771              		.align	2
 4772              		.set	.LANCHOR6,. + 0
 4775              	arrow_key_string:
 4776 0000 0C000000 		.word	.LC14
 4777              		.section	.data.cmplx_key_string,"aw"
 4778              		.align	2
 4779              		.set	.LANCHOR7,. + 0
 4782              	cmplx_key_string:
 4783 0000 08000000 		.word	.LC13
 4784              		.section	.data.f_shift,"aw"
 4785              		.align	2
 4786              		.set	.LANCHOR12,. + 0
 4789              	f_shift:
 4790 0000 29       		.byte	41
 4791 0001 000000   		.space	3
 4792 0004 FFFFFFFF 		.word	-1
 4793              		.section	.data.g_shift,"aw"
 4794              		.align	2
 4795              		.set	.LANCHOR13,. + 0
 4798              	g_shift:
 4799 0000 2A       		.byte	42
 4800 0001 000000   		.space	3
 4801 0004 FFFFFFFF 		.word	-1
 4802              		.section	.data.h_shift,"aw"
 4803              		.align	2
 4804              		.set	.LANCHOR18,. + 0
 4807              	h_shift:
 4808 0000 2B       		.byte	43
 4809 0001 000000   		.space	3
 4810 0004 FFFFFFFF 		.word	-1
 4811              		.section	.data.heartbeat,"aw"
 4812              		.align	2
 4813              		.set	.LANCHOR22,. + 0
 4816              	heartbeat:
 4817 0000 62       		.byte	98
 4818 0001 000000   		.space	3
 4819 0004 FFFFFFFF 		.word	-1
 4820              		.section	.data.no_key,"aw"
 4821              		.align	2
 4822              		.set	.LANCHOR11,. + 0
 4825              	no_key:
 4826 0000 2E       		.byte	46
 4827 0001 000000   		.space	3
ARM GAS  /tmp/cc0ERj20.s 			page 126


 4828 0004 00000000 		.word	0
 4829              		.section	.data.release,"aw"
 4830              		.align	2
 4831              		.set	.LANCHOR14,. + 0
 4834              	release:
 4835 0000 63       		.byte	99
 4836 0001 000000   		.space	3
 4837 0004 FFFFFFFF 		.word	-1
 4838              		.section	.data.spaces,"aw"
 4839              		.align	2
 4840              		.set	.LANCHOR10,. + 0
 4843              	spaces:
 4844 0000 20202020 		.ascii	"                     \000"
 4844      20202020 
 4844      20202020 
 4844      20202020 
 4844      20202020 
 4845              		.section	.rodata.MID_MENU,"a"
 4846              		.align	2
 4847              		.set	.LANCHOR21,. + 0
 4850              	MID_MENU:
 4851 0000 00000000 		.word	.LC12
 4852 0004 00000000 		.word	mid_menu
 4853 0008 00000000 		.word	0
 4854 000c 00000000 		.word	0
 4855              		.section	.rodata.Menus,"a"
 4856              		.align	2
 4857              		.set	.LANCHOR5,. + 0
 4860              	Menus:
 4861 0000 426C616E 		.ascii	"Blank\000"
 4861      6B00
 4862 0006 00000000 		.space	9
 4862      00000000 
 4862      00
 4863 000f 00       		.space	1
 4864 0010 2E       		.byte	46
 4865 0011 000000   		.space	3
 4866 0014 FFFFFFFF 		.word	-1
 4867 0018 2E       		.byte	46
 4868 0019 000000   		.space	3
 4869 001c FFFFFFFF 		.word	-1
 4870 0020 00       		.ascii	"\000"
 4871 0021 00000000 		.space	7
 4871      000000
 4872 0028 00       		.ascii	"\000"
 4873 0029 00000000 		.space	7
 4873      000000
 4874 0030 2E       		.byte	46
 4875 0031 000000   		.space	3
 4876 0034 FFFFFFFF 		.word	-1
 4877 0038 2E       		.byte	46
 4878 0039 000000   		.space	3
 4879 003c FFFFFFFF 		.word	-1
 4880 0040 00       		.ascii	"\000"
 4881 0041 00000000 		.space	7
 4881      000000
 4882 0048 00       		.ascii	"\000"
ARM GAS  /tmp/cc0ERj20.s 			page 127


 4883 0049 00000000 		.space	7
 4883      000000
 4884 0050 2E       		.byte	46
 4885 0051 000000   		.space	3
 4886 0054 FFFFFFFF 		.word	-1
 4887 0058 2E       		.byte	46
 4888 0059 000000   		.space	3
 4889 005c FFFFFFFF 		.word	-1
 4890 0060 00       		.ascii	"\000"
 4891 0061 00000000 		.space	7
 4891      000000
 4892 0068 00       		.ascii	"\000"
 4893 0069 00000000 		.space	7
 4893      000000
 4894 0070 2E       		.byte	46
 4895 0071 000000   		.space	3
 4896 0074 FFFFFFFF 		.word	-1
 4897 0078 2E       		.byte	46
 4898 0079 000000   		.space	3
 4899 007c FFFFFFFF 		.word	-1
 4900 0080 00       		.ascii	"\000"
 4901 0081 00000000 		.space	7
 4901      000000
 4902 0088 00       		.ascii	"\000"
 4903 0089 00000000 		.space	7
 4903      000000
 4904 0090 2C       		.byte	44
 4905 0091 000000   		.space	3
 4906 0094 FFFFFFFF 		.word	-1
 4907 0098 2E       		.byte	46
 4908 0099 000000   		.space	3
 4909 009c FFFFFFFF 		.word	-1
 4910 00a0 2D2D0D00 		.ascii	"--\015\000"
 4911 00a4 00000000 		.space	4
 4912 00a8 00       		.ascii	"\000"
 4913 00a9 00000000 		.space	7
 4913      000000
 4914 00b0 2D       		.byte	45
 4915 00b1 000000   		.space	3
 4916 00b4 FFFFFFFF 		.word	-1
 4917 00b8 31       		.byte	49
 4918 00b9 000000   		.space	3
 4919 00bc 0B000000 		.word	11
 4920 00c0 43505800 		.ascii	"CPX\000"
 4921 00c4 00000000 		.space	4
 4922 00c8 00       		.ascii	"\000"
 4923 00c9 00000000 		.space	7
 4923      000000
 4924 00d0 436C6561 		.ascii	"Clear\000"
 4924      7200
 4925 00d6 00000000 		.space	9
 4925      00000000 
 4925      00
 4926 00df 00       		.space	1
 4927 00e0 10       		.byte	16
 4928 00e1 000000   		.space	3
 4929 00e4 01000000 		.word	1
ARM GAS  /tmp/cc0ERj20.s 			page 128


 4930 00e8 34       		.byte	52
 4931 00e9 000000   		.space	3
 4932 00ec 44010000 		.word	324
 4933 00f0 434C5072 		.ascii	"CLProg\000"
 4933      6F6700
 4934 00f7 00       		.space	1
 4935 00f8 434C5041 		.ascii	"CLPAll\000"
 4935      6C6C00
 4936 00ff 00       		.space	1
 4937 0100 10       		.byte	16
 4938 0101 000000   		.space	3
 4939 0104 02000000 		.word	2
 4940 0108 34       		.byte	52
 4941 0109 000000   		.space	3
 4942 010c 3E010000 		.word	318
 4943 0110 434C9100 		.ascii	"CL\221\000"
 4944 0114 00000000 		.space	4
 4945 0118 434C5265 		.ascii	"CLReg\000"
 4945      6700
 4946 011e 0000     		.space	2
 4947 0120 10       		.byte	16
 4948 0121 000000   		.space	3
 4949 0124 03000000 		.word	3
 4950 0128 34       		.byte	52
 4951 0129 000000   		.space	3
 4952 012c 74010000 		.word	372
 4953 0130 434C7800 		.ascii	"CLx\000"
 4954 0134 00000000 		.space	4
 4955 0138 434C06A0 		.ascii	"CL\006\240\000"
 4955      00
 4956 013d 000000   		.space	3
 4957 0140 34       		.byte	52
 4958 0141 000000   		.space	3
 4959 0144 40010000 		.word	320
 4960 0148 34       		.byte	52
 4961 0149 000000   		.space	3
 4962 014c 41010000 		.word	321
 4963 0150 434C5374 		.ascii	"CLStk\000"
 4963      6B00
 4964 0156 0000     		.space	2
 4965 0158 434C416C 		.ascii	"CLAll\000"
 4965      6C00
 4966 015e 0000     		.space	2
 4967 0160 2C       		.byte	44
 4968 0161 000000   		.space	3
 4969 0164 FFFFFFFF 		.word	-1
 4970 0168 2E       		.byte	46
 4971 0169 000000   		.space	3
 4972 016c FFFFFFFF 		.word	-1
 4973 0170 2D2D0D00 		.ascii	"--\015\000"
 4974 0174 00000000 		.space	4
 4975 0178 00       		.ascii	"\000"
 4976 0179 00000000 		.space	7
 4976      000000
 4977 0180 2D       		.byte	45
 4978 0181 000000   		.space	3
 4979 0184 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc0ERj20.s 			page 129


 4980 0188 2E       		.byte	46
 4981 0189 000000   		.space	3
 4982 018c FFFFFFFF 		.word	-1
 4983 0190 43505800 		.ascii	"CPX\000"
 4984 0194 00000000 		.space	4
 4985 0198 00       		.ascii	"\000"
 4986 0199 00000000 		.space	7
 4986      000000
 4987 01a0 44495350 		.ascii	"DISP\000"
 4987      00
 4988 01a5 00000000 		.space	10
 4988      00000000 
 4988      0000
 4989 01af 00       		.space	1
 4990 01b0 00       		.byte	0
 4991 01b1 000000   		.space	3
 4992 01b4 03000000 		.word	3
 4993 01b8 05       		.byte	5
 4994 01b9 000000   		.space	3
 4995 01bc 01000000 		.word	1
 4996 01c0 414C4C00 		.ascii	"ALL\000"
 4997 01c4 00000000 		.space	4
 4998 01c8 6120622F 		.ascii	"a b/c\000"
 4998      6300
 4999 01ce 0000     		.space	2
 5000 01d0 01       		.byte	1
 5001 01d1 000000   		.space	3
 5002 01d4 03000000 		.word	3
 5003 01d8 05       		.byte	5
 5004 01d9 000000   		.space	3
 5005 01dc 02000000 		.word	2
 5006 01e0 46495800 		.ascii	"FIX\000"
 5007 01e4 00000000 		.space	4
 5008 01e8 642F6300 		.ascii	"d/c\000"
 5009 01ec 00000000 		.space	4
 5010 01f0 02       		.byte	2
 5011 01f1 000000   		.space	3
 5012 01f4 03000000 		.word	3
 5013 01f8 06       		.byte	6
 5014 01f9 000000   		.space	3
 5015 01fc 01000000 		.word	1
 5016 0200 53434900 		.ascii	"SCI\000"
 5017 0204 00000000 		.space	4
 5018 0208 482E4D53 		.ascii	"H.MS\000"
 5018      00
 5019 020d 000000   		.space	3
 5020 0210 03       		.byte	3
 5021 0211 000000   		.space	3
 5022 0214 03000000 		.word	3
 5023 0218 07       		.byte	7
 5024 0219 000000   		.space	3
 5025 021c 01000000 		.word	1
 5026 0220 454E4700 		.ascii	"ENG\000"
 5027 0224 00000000 		.space	4
 5028 0228 482E6400 		.ascii	"H.d\000"
 5029 022c 00000000 		.space	4
 5030 0230 2C       		.byte	44
ARM GAS  /tmp/cc0ERj20.s 			page 130


 5031 0231 000000   		.space	3
 5032 0234 FFFFFFFF 		.word	-1
 5033 0238 26       		.byte	38
 5034 0239 000000   		.space	3
 5035 023c 03000000 		.word	3
 5036 0240 2D2D0D00 		.ascii	"--\015\000"
 5037 0244 00000000 		.space	4
 5038 0248 2E2F2C00 		.ascii	"./,\000"
 5039 024c 00000000 		.space	4
 5040 0250 2D       		.byte	45
 5041 0251 000000   		.space	3
 5042 0254 FFFFFFFF 		.word	-1
 5043 0258 2E       		.byte	46
 5044 0259 000000   		.space	3
 5045 025c FFFFFFFF 		.word	-1
 5046 0260 43505800 		.ascii	"CPX\000"
 5047 0264 00000000 		.space	4
 5048 0268 00       		.ascii	"\000"
 5049 0269 00000000 		.space	7
 5049      000000
 5050 0270 42415345 		.ascii	"BASE\000"
 5050      00
 5051 0275 00000000 		.space	10
 5051      00000000 
 5051      0000
 5052 027f 00       		.space	1
 5053 0280 0E       		.byte	14
 5054 0281 000000   		.space	3
 5055 0284 01000000 		.word	1
 5056 0288 0E       		.byte	14
 5057 0289 000000   		.space	3
 5058 028c 03000000 		.word	3
 5059 0290 42494E00 		.ascii	"BIN\000"
 5060 0294 00000000 		.space	4
 5061 0298 6E6F7400 		.ascii	"not\000"
 5062 029c 00000000 		.space	4
 5063 02a0 0E       		.byte	14
 5064 02a1 000000   		.space	3
 5065 02a4 02000000 		.word	2
 5066 02a8 13       		.byte	19
 5067 02a9 000000   		.space	3
 5068 02ac 03000000 		.word	3
 5069 02b0 4F435400 		.ascii	"OCT\000"
 5070 02b4 00000000 		.space	4
 5071 02b8 616E6400 		.ascii	"and\000"
 5072 02bc 00000000 		.space	4
 5073 02c0 0F       		.byte	15
 5074 02c1 000000   		.space	3
 5075 02c4 01000000 		.word	1
 5076 02c8 14       		.byte	20
 5077 02c9 000000   		.space	3
 5078 02cc 03000000 		.word	3
 5079 02d0 44454300 		.ascii	"DEC\000"
 5080 02d4 00000000 		.space	4
 5081 02d8 6F7200   		.ascii	"or\000"
 5082 02db 00000000 		.space	5
 5082      00
ARM GAS  /tmp/cc0ERj20.s 			page 131


 5083 02e0 0F       		.byte	15
 5084 02e1 000000   		.space	3
 5085 02e4 02000000 		.word	2
 5086 02e8 15       		.byte	21
 5087 02e9 000000   		.space	3
 5088 02ec 03000000 		.word	3
 5089 02f0 48455800 		.ascii	"HEX\000"
 5090 02f4 00000000 		.space	4
 5091 02f8 786F7200 		.ascii	"xor\000"
 5092 02fc 00000000 		.space	4
 5093 0300 2C       		.byte	44
 5094 0301 000000   		.space	3
 5095 0304 FFFFFFFF 		.word	-1
 5096 0308 16       		.byte	22
 5097 0309 000000   		.space	3
 5098 030c 03000000 		.word	3
 5099 0310 2D2D0D00 		.ascii	"--\015\000"
 5100 0314 00000000 		.space	4
 5101 0318 524D4452 		.ascii	"RMDR\000"
 5101      00
 5102 031d 000000   		.space	3
 5103 0320 2D       		.byte	45
 5104 0321 000000   		.space	3
 5105 0324 FFFFFFFF 		.word	-1
 5106 0328 07       		.byte	7
 5107 0329 000000   		.space	3
 5108 032c 01000000 		.word	1
 5109 0330 43505800 		.ascii	"CPX\000"
 5110 0334 00000000 		.space	4
 5111 0338 482E6400 		.ascii	"H.d\000"
 5112 033c 00000000 		.space	4
 5113 0340 414E474C 		.ascii	"ANGLES\000"
 5113      455300
 5114 0347 00000000 		.space	8
 5114      00000000 
 5115 034f 00       		.space	1
 5116 0350 06       		.byte	6
 5117 0351 000000   		.space	3
 5118 0354 02000000 		.word	2
 5119 0358 04       		.byte	4
 5120 0359 000000   		.space	3
 5121 035c 01000000 		.word	1
 5122 0360 44454700 		.ascii	"DEG\000"
 5123 0364 00000000 		.space	4
 5124 0368 500D5200 		.ascii	"P\015R\000"
 5125 036c 00000000 		.space	4
 5126 0370 07       		.byte	7
 5127 0371 000000   		.space	3
 5128 0374 02000000 		.word	2
 5129 0378 04       		.byte	4
 5130 0379 000000   		.space	3
 5131 037c 02000000 		.word	2
 5132 0380 52414400 		.ascii	"RAD\000"
 5133 0384 00000000 		.space	4
 5134 0388 520D5000 		.ascii	"R\015P\000"
 5135 038c 00000000 		.space	4
 5136 0390 08       		.byte	8
ARM GAS  /tmp/cc0ERj20.s 			page 132


 5137 0391 000000   		.space	3
 5138 0394 02000000 		.word	2
 5139 0398 00       		.byte	0
 5140 0399 000000   		.space	3
 5141 039c 01000000 		.word	1
 5142 03a0 47524144 		.ascii	"GRAD\000"
 5142      00
 5143 03a5 000000   		.space	3
 5144 03a8 48595000 		.ascii	"HYP\000"
 5145 03ac 00000000 		.space	4
 5146 03b0 06       		.byte	6
 5147 03b1 000000   		.space	3
 5148 03b4 01000000 		.word	1
 5149 03b8 07       		.byte	7
 5150 03b9 000000   		.space	3
 5151 03bc 01000000 		.word	1
 5152 03c0 482E4D53 		.ascii	"H.MS\000"
 5152      00
 5153 03c5 000000   		.space	3
 5154 03c8 482E6400 		.ascii	"H.d\000"
 5155 03cc 00000000 		.space	4
 5156 03d0 2C       		.byte	44
 5157 03d1 000000   		.space	3
 5158 03d4 FFFFFFFF 		.word	-1
 5159 03d8 00       		.byte	0
 5160 03d9 000000   		.space	3
 5161 03dc 02000000 		.word	2
 5162 03e0 2D2D0D00 		.ascii	"--\015\000"
 5163 03e4 00000000 		.space	4
 5164 03e8 4859509D 		.ascii	"HYP\235\000"
 5164      00
 5165 03ed 000000   		.space	3
 5166 03f0 2D       		.byte	45
 5167 03f1 000000   		.space	3
 5168 03f4 FFFFFFFF 		.word	-1
 5169 03f8 2E       		.byte	46
 5170 03f9 000000   		.space	3
 5171 03fc FFFFFFFF 		.word	-1
 5172 0400 43505800 		.ascii	"CPX\000"
 5173 0404 00000000 		.space	4
 5174 0408 00       		.ascii	"\000"
 5175 0409 00000000 		.space	7
 5175      000000
 5176 0410 4D495343 		.ascii	"MISC\000"
 5176      00
 5177 0415 00000000 		.space	10
 5177      00000000 
 5177      0000
 5178 041f 00       		.space	1
 5179 0420 25       		.byte	37
 5180 0421 000000   		.space	3
 5181 0424 01000000 		.word	1
 5182 0428 14       		.byte	20
 5183 0429 000000   		.space	3
 5184 042c 01000000 		.word	1
 5185 0430 7C587C00 		.ascii	"|X|\000"
 5186 0434 00000000 		.space	4
ARM GAS  /tmp/cc0ERj20.s 			page 133


 5187 0438 329C00   		.ascii	"2\234\000"
 5188 043b 00000000 		.space	5
 5188      00
 5189 0440 25       		.byte	37
 5190 0441 000000   		.space	3
 5191 0444 02000000 		.word	2
 5192 0448 14       		.byte	20
 5193 0449 000000   		.space	3
 5194 044c 02000000 		.word	2
 5195 0450 524E4400 		.ascii	"RND\000"
 5196 0454 00000000 		.space	4
 5197 0458 4C6F67BA 		.ascii	"Log\272\000"
 5197      00
 5198 045d 000000   		.space	3
 5199 0460 26       		.byte	38
 5200 0461 000000   		.space	3
 5201 0464 01000000 		.word	1
 5202 0468 15       		.byte	21
 5203 0469 000000   		.space	3
 5204 046c 02000000 		.word	2
 5205 0470 49506172 		.ascii	"IPart\000"
 5205      7400
 5206 0476 0000     		.space	2
 5207 0478 4C6F678B 		.ascii	"Log\213\000"
 5207      00
 5208 047d 000000   		.space	3
 5209 0480 26       		.byte	38
 5210 0481 000000   		.space	3
 5211 0484 02000000 		.word	2
 5212 0488 16       		.byte	22
 5213 0489 000000   		.space	3
 5214 048c 02000000 		.word	2
 5215 0490 46506172 		.ascii	"FPart\000"
 5215      7400
 5216 0496 0000     		.space	2
 5217 0498 7C7C656C 		.ascii	"||el\000"
 5217      00
 5218 049d 000000   		.space	3
 5219 04a0 2C       		.byte	44
 5220 04a1 000000   		.space	3
 5221 04a4 FFFFFFFF 		.word	-1
 5222 04a8 22       		.byte	34
 5223 04a9 000000   		.space	3
 5224 04ac 02000000 		.word	2
 5225 04b0 2D2D0D00 		.ascii	"--\015\000"
 5226 04b4 00000000 		.space	4
 5227 04b8 832500   		.ascii	"\203%\000"
 5228 04bb 00000000 		.space	5
 5228      00
 5229 04c0 2D       		.byte	45
 5230 04c1 000000   		.space	3
 5231 04c4 FFFFFFFF 		.word	-1
 5232 04c8 2E       		.byte	46
 5233 04c9 000000   		.space	3
 5234 04cc FFFFFFFF 		.word	-1
 5235 04d0 43505800 		.ascii	"CPX\000"
 5236 04d4 00000000 		.space	4
ARM GAS  /tmp/cc0ERj20.s 			page 134


 5237 04d8 00       		.ascii	"\000"
 5238 04d9 00000000 		.space	7
 5238      000000
 5239 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 5239      204B6579 
 5239      00
 5240 04e9 00000000 		.space	6
 5240      0000
 5241 04ef 00       		.space	1
 5242 04f0 0D       		.byte	13
 5243 04f1 000000   		.space	3
 5244 04f4 01000000 		.word	1
 5245 04f8 34       		.byte	52
 5246 04f9 000000   		.space	3
 5247 04fc 00A60000 		.word	42496
 5248 0500 53686F77 		.ascii	"Show\016\000"
 5248      0E00
 5249 0506 0000     		.space	2
 5250 0508 5B175D00 		.ascii	"[\027]\000"
 5251 050c 00000000 		.space	4
 5252 0510 0D       		.byte	13
 5253 0511 000000   		.space	3
 5254 0514 02000000 		.word	2
 5255 0518 2E       		.byte	46
 5256 0519 000000   		.space	3
 5257 051c FFFFFFFF 		.word	-1
 5258 0520 53686F77 		.ascii	"Show\015\000"
 5258      0D00
 5259 0526 0000     		.space	2
 5260 0528 00       		.ascii	"\000"
 5261 0529 00000000 		.space	7
 5261      000000
 5262 0530 0D       		.byte	13
 5263 0531 000000   		.space	3
 5264 0534 03000000 		.word	3
 5265 0538 34       		.byte	52
 5266 0539 000000   		.space	3
 5267 053c 00330000 		.word	13056
 5268 0540 78173F00 		.ascii	"x\027?\000"
 5269 0544 00000000 		.space	4
 5270 0548 7A173F00 		.ascii	"z\027?\000"
 5271 054c 00000000 		.space	4
 5272 0550 34       		.byte	52
 5273 0551 000000   		.space	3
 5274 0554 00320000 		.word	12800
 5275 0558 34       		.byte	52
 5276 0559 000000   		.space	3
 5277 055c 00340000 		.word	13312
 5278 0560 79173F00 		.ascii	"y\027?\000"
 5279 0564 00000000 		.space	4
 5280 0568 74173F00 		.ascii	"t\027?\000"
 5281 056c 00000000 		.space	4
 5282 0570 2C       		.byte	44
 5283 0571 000000   		.space	3
 5284 0574 FFFFFFFF 		.word	-1
 5285 0578 2E       		.byte	46
 5286 0579 000000   		.space	3
ARM GAS  /tmp/cc0ERj20.s 			page 135


 5287 057c FFFFFFFF 		.word	-1
 5288 0580 2D2D0D00 		.ascii	"--\015\000"
 5289 0584 00000000 		.space	4
 5290 0588 00       		.ascii	"\000"
 5291 0589 00000000 		.space	7
 5291      000000
 5292 0590 2D       		.byte	45
 5293 0591 000000   		.space	3
 5294 0594 FFFFFFFF 		.word	-1
 5295 0598 2E       		.byte	46
 5296 0599 000000   		.space	3
 5297 059c FFFFFFFF 		.word	-1
 5298 05a0 43505800 		.ascii	"CPX\000"
 5299 05a4 00000000 		.space	4
 5300 05a8 00       		.ascii	"\000"
 5301 05a9 00000000 		.space	7
 5301      000000
 5302 05b0 50726F67 		.ascii	"Program\000"
 5302      72616D00 
 5303 05b8 00000000 		.space	7
 5303      000000
 5304 05bf 00       		.space	1
 5305 05c0 27       		.byte	39
 5306 05c1 000000   		.space	3
 5307 05c4 01000000 		.word	1
 5308 05c8 28       		.byte	40
 5309 05c9 000000   		.space	3
 5310 05cc 01000000 		.word	1
 5311 05d0 4C424C00 		.ascii	"LBL\000"
 5312 05d4 00000000 		.space	4
 5313 05d8 44534500 		.ascii	"DSE\000"
 5314 05dc 00000000 		.space	4
 5315 05e0 27       		.byte	39
 5316 05e1 000000   		.space	3
 5317 05e4 02000000 		.word	2
 5318 05e8 28       		.byte	40
 5319 05e9 000000   		.space	3
 5320 05ec 02000000 		.word	2
 5321 05f0 52544E00 		.ascii	"RTN\000"
 5322 05f4 00000000 		.space	4
 5323 05f8 49534700 		.ascii	"ISG\000"
 5324 05fc 00000000 		.space	4
 5325 0600 25       		.byte	37
 5326 0601 000000   		.space	3
 5327 0604 03000000 		.word	3
 5328 0608 34       		.byte	52
 5329 0609 000000   		.space	3
 5330 060c 00600000 		.word	24576
 5331 0610 50617573 		.ascii	"Pause\000"
 5331      6500
 5332 0616 0000     		.space	2
 5333 0618 44454300 		.ascii	"DEC\000"
 5334 061c 00000000 		.space	4
 5335 0620 12       		.byte	18
 5336 0621 000000   		.space	3
 5337 0624 03000000 		.word	3
 5338 0628 34       		.byte	52
ARM GAS  /tmp/cc0ERj20.s 			page 136


 5339 0629 000000   		.space	3
 5340 062c 00610000 		.word	24832
 5341 0630 47544F00 		.ascii	"GTO\000"
 5342 0634 00000000 		.space	4
 5343 0638 494E4300 		.ascii	"INC\000"
 5344 063c 00000000 		.space	4
 5345 0640 2C       		.byte	44
 5346 0641 000000   		.space	3
 5347 0644 FFFFFFFF 		.word	-1
 5348 0648 34       		.byte	52
 5349 0649 000000   		.space	3
 5350 064c 00570000 		.word	22272
 5351 0650 2D2D0D00 		.ascii	"--\015\000"
 5352 0654 00000000 		.space	4
 5353 0658 4241434B 		.ascii	"BACK\000"
 5353      00
 5354 065d 000000   		.space	3
 5355 0660 2D       		.byte	45
 5356 0661 000000   		.space	3
 5357 0664 FFFFFFFF 		.word	-1
 5358 0668 34       		.byte	52
 5359 0669 000000   		.space	3
 5360 066c 00560000 		.word	22016
 5361 0670 43505800 		.ascii	"CPX\000"
 5362 0674 00000000 		.space	4
 5363 0678 534B4950 		.ascii	"SKIP\000"
 5363      00
 5364 067d 000000   		.space	3
 5365 0680 53657475 		.ascii	"Setup 1\000"
 5365      70203100 
 5366 0688 00000000 		.space	7
 5366      000000
 5367 068f 00       		.space	1
 5368 0690 32       		.byte	50
 5369 0691 000000   		.space	3
 5370 0694 00000000 		.word	0
 5371 0698 30       		.byte	48
 5372 0699 000000   		.space	3
 5373 069c 00000000 		.word	0
 5374 06a0 45584954 		.ascii	"EXIT\000"
 5374      00
 5375 06a5 000000   		.space	3
 5376 06a8 53797374 		.ascii	"System\000"
 5376      656D00
 5377 06af 00       		.space	1
 5378 06b0 31       		.byte	49
 5379 06b1 000000   		.space	3
 5380 06b4 09000000 		.word	9
 5381 06b8 2E       		.byte	46
 5382 06b9 000000   		.space	3
 5383 06bc FFFFFFFF 		.word	-1
 5384 06c0 48454C50 		.ascii	"HELP\000"
 5384      00
 5385 06c5 000000   		.space	3
 5386 06c8 00       		.ascii	"\000"
 5387 06c9 00000000 		.space	7
 5387      000000
ARM GAS  /tmp/cc0ERj20.s 			page 137


 5388 06d0 31       		.byte	49
 5389 06d1 000000   		.space	3
 5390 06d4 02000000 		.word	2
 5391 06d8 31       		.byte	49
 5392 06d9 000000   		.space	3
 5393 06dc 06000000 		.word	6
 5394 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5394      4F00
 5395 06e6 0000     		.space	2
 5396 06e8 53765241 		.ascii	"SvRAM\000"
 5396      4D00
 5397 06ee 0000     		.space	2
 5398 06f0 31       		.byte	49
 5399 06f1 000000   		.space	3
 5400 06f4 03000000 		.word	3
 5401 06f8 31       		.byte	49
 5402 06f9 000000   		.space	3
 5403 06fc 07000000 		.word	7
 5404 0700 4F6E5243 		.ascii	"OnRCL\000"
 5404      4C00
 5405 0706 0000     		.space	2
 5406 0708 4C645241 		.ascii	"LdRAM\000"
 5406      4D00
 5407 070e 0000     		.space	2
 5408 0710 2C       		.byte	44
 5409 0711 000000   		.space	3
 5410 0714 FFFFFFFF 		.word	-1
 5411 0718 2E       		.byte	46
 5412 0719 000000   		.space	3
 5413 071c FFFFFFFF 		.word	-1
 5414 0720 2D2D0D00 		.ascii	"--\015\000"
 5415 0724 00000000 		.space	4
 5416 0728 00       		.ascii	"\000"
 5417 0729 00000000 		.space	7
 5417      000000
 5418 0730 2D       		.byte	45
 5419 0731 000000   		.space	3
 5420 0734 FFFFFFFF 		.word	-1
 5421 0738 2E       		.byte	46
 5422 0739 000000   		.space	3
 5423 073c FFFFFFFF 		.word	-1
 5424 0740 43505800 		.ascii	"CPX\000"
 5425 0744 00000000 		.space	4
 5426 0748 00       		.ascii	"\000"
 5427 0749 00000000 		.space	7
 5427      000000
 5428 0750 4172726F 		.ascii	"Arrow\000"
 5428      7700
 5429 0756 00000000 		.space	9
 5429      00000000 
 5429      00
 5430 075f 00       		.space	1
 5431 0760 0E       		.byte	14
 5432 0761 000000   		.space	3
 5433 0764 01000000 		.word	1
 5434 0768 06       		.byte	6
 5435 0769 000000   		.space	3
ARM GAS  /tmp/cc0ERj20.s 			page 138


 5436 076c 02000000 		.word	2
 5437 0770 42696E00 		.ascii	"Bin\000"
 5438 0774 00000000 		.space	4
 5439 0778 44454700 		.ascii	"DEG\000"
 5440 077c 00000000 		.space	4
 5441 0780 0E       		.byte	14
 5442 0781 000000   		.space	3
 5443 0784 02000000 		.word	2
 5444 0788 07       		.byte	7
 5445 0789 000000   		.space	3
 5446 078c 02000000 		.word	2
 5447 0790 4F637400 		.ascii	"Oct\000"
 5448 0794 00000000 		.space	4
 5449 0798 52414400 		.ascii	"RAD\000"
 5450 079c 00000000 		.space	4
 5451 07a0 0F       		.byte	15
 5452 07a1 000000   		.space	3
 5453 07a4 01000000 		.word	1
 5454 07a8 08       		.byte	8
 5455 07a9 000000   		.space	3
 5456 07ac 02000000 		.word	2
 5457 07b0 44656300 		.ascii	"Dec\000"
 5458 07b4 00000000 		.space	4
 5459 07b8 47726164 		.ascii	"Grad\000"
 5459      00
 5460 07bd 000000   		.space	3
 5461 07c0 0F       		.byte	15
 5462 07c1 000000   		.space	3
 5463 07c4 02000000 		.word	2
 5464 07c8 06       		.byte	6
 5465 07c9 000000   		.space	3
 5466 07cc 01000000 		.word	1
 5467 07d0 48657800 		.ascii	"Hex\000"
 5468 07d4 00000000 		.space	4
 5469 07d8 0D484D53 		.ascii	"\015HMS\000"
 5469      00
 5470 07dd 000000   		.space	3
 5471 07e0 2C       		.byte	44
 5472 07e1 000000   		.space	3
 5473 07e4 FFFFFFFF 		.word	-1
 5474 07e8 07       		.byte	7
 5475 07e9 000000   		.space	3
 5476 07ec 01000000 		.word	1
 5477 07f0 2D2D0D00 		.ascii	"--\015\000"
 5478 07f4 00000000 		.space	4
 5479 07f8 484D530D 		.ascii	"HMS\015\000"
 5479      00
 5480 07fd 000000   		.space	3
 5481 0800 2D       		.byte	45
 5482 0801 000000   		.space	3
 5483 0804 FFFFFFFF 		.word	-1
 5484 0808 2E       		.byte	46
 5485 0809 000000   		.space	3
 5486 080c FFFFFFFF 		.word	-1
 5487 0810 43505800 		.ascii	"CPX\000"
 5488 0814 00000000 		.space	4
 5489 0818 00       		.ascii	"\000"
ARM GAS  /tmp/cc0ERj20.s 			page 139


 5490 0819 00000000 		.space	7
 5490      000000
 5491 0820 466C6167 		.ascii	"Flags\000"
 5491      7300
 5492 0826 00000000 		.space	9
 5492      00000000 
 5492      00
 5493 082f 00       		.space	1
 5494 0830 1E       		.byte	30
 5495 0831 000000   		.space	3
 5496 0834 01000000 		.word	1
 5497 0838 34       		.byte	52
 5498 0839 000000   		.space	3
 5499 083c 00740000 		.word	29696
 5500 0840 53465F00 		.ascii	"SF_\000"
 5501 0844 00000000 		.space	4
 5502 0848 46533F00 		.ascii	"FS?\000"
 5503 084c 00000000 		.space	4
 5504 0850 1E       		.byte	30
 5505 0851 000000   		.space	3
 5506 0854 02000000 		.word	2
 5507 0858 34       		.byte	52
 5508 0859 000000   		.space	3
 5509 085c 00750000 		.word	29952
 5510 0860 43465F00 		.ascii	"CF_\000"
 5511 0864 00000000 		.space	4
 5512 0868 46433F00 		.ascii	"FC?\000"
 5513 086c 00000000 		.space	4
 5514 0870 1F       		.byte	31
 5515 0871 000000   		.space	3
 5516 0874 01000000 		.word	1
 5517 0878 34       		.byte	52
 5518 0879 000000   		.space	3
 5519 087c 00500000 		.word	20480
 5520 0880 783D3F00 		.ascii	"x=?\000"
 5521 0884 00000000 		.space	4
 5522 0888 783C3F00 		.ascii	"x<?\000"
 5523 088c 00000000 		.space	4
 5524 0890 1F       		.byte	31
 5525 0891 000000   		.space	3
 5526 0894 02000000 		.word	2
 5527 0898 34       		.byte	52
 5528 0899 000000   		.space	3
 5529 089c 00510000 		.word	20736
 5530 08a0 780B3F00 		.ascii	"x\013?\000"
 5531 08a4 00000000 		.space	4
 5532 08a8 783C3D3F 		.ascii	"x<=?\000"
 5532      00
 5533 08ad 000000   		.space	3
 5534 08b0 2C       		.byte	44
 5535 08b1 000000   		.space	3
 5536 08b4 FFFFFFFF 		.word	-1
 5537 08b8 34       		.byte	52
 5538 08b9 000000   		.space	3
 5539 08bc 00530000 		.word	21248
 5540 08c0 2D2D0D00 		.ascii	"--\015\000"
 5541 08c4 00000000 		.space	4
ARM GAS  /tmp/cc0ERj20.s 			page 140


 5542 08c8 783E3D3F 		.ascii	"x>=?\000"
 5542      00
 5543 08cd 000000   		.space	3
 5544 08d0 2D       		.byte	45
 5545 08d1 000000   		.space	3
 5546 08d4 FFFFFFFF 		.word	-1
 5547 08d8 34       		.byte	52
 5548 08d9 000000   		.space	3
 5549 08dc 00520000 		.word	20992
 5550 08e0 43505800 		.ascii	"CPX\000"
 5551 08e4 00000000 		.space	4
 5552 08e8 783E3F00 		.ascii	"x>?\000"
 5553 08ec 00000000 		.space	4
 5554 08f0 50726F62 		.ascii	"Probability\000"
 5554      6162696C 
 5554      69747900 
 5555 08fc 000000   		.space	3
 5556 08ff 00       		.space	1
 5557 0900 18       		.byte	24
 5558 0901 000000   		.space	3
 5559 0904 03000000 		.word	3
 5560 0908 34       		.byte	52
 5561 0909 000000   		.space	3
 5562 090c 31020000 		.word	561
 5563 0910 46616374 		.ascii	"Fact!\000"
 5563      2100
 5564 0916 0000     		.space	2
 5565 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5565      00
 5566 091d 000000   		.space	3
 5567 0920 18       		.byte	24
 5568 0921 000000   		.space	3
 5569 0924 01000000 		.word	1
 5570 0928 19       		.byte	25
 5571 0929 000000   		.space	3
 5572 092c 01000000 		.word	1
 5573 0930 43792C78 		.ascii	"Cy,x\000"
 5573      00
 5574 0935 000000   		.space	3
 5575 0938 9400     		.ascii	"\224\000"
 5576 093a 00000000 		.space	6
 5576      0000
 5577 0940 18       		.byte	24
 5578 0941 000000   		.space	3
 5579 0944 02000000 		.word	2
 5580 0948 19       		.byte	25
 5581 0949 000000   		.space	3
 5582 094c 02000000 		.word	2
 5583 0950 50792C78 		.ascii	"Py,x\000"
 5583      00
 5584 0955 000000   		.space	3
 5585 0958 949D00   		.ascii	"\224\235\000"
 5586 095b 00000000 		.space	5
 5586      00
 5587 0960 08       		.byte	8
 5588 0961 000000   		.space	3
 5589 0964 01000000 		.word	1
ARM GAS  /tmp/cc0ERj20.s 			page 141


 5590 0968 34       		.byte	52
 5591 0969 000000   		.space	3
 5592 096c 34010000 		.word	308
 5593 0970 52414E23 		.ascii	"RAN#\000"
 5593      00
 5594 0975 000000   		.space	3
 5595 0978 53454544 		.ascii	"SEED\000"
 5595      00
 5596 097d 000000   		.space	3
 5597 0980 2C       		.byte	44
 5598 0981 000000   		.space	3
 5599 0984 FFFFFFFF 		.word	-1
 5600 0988 2E       		.byte	46
 5601 0989 000000   		.space	3
 5602 098c FFFFFFFF 		.word	-1
 5603 0990 2D2D0D00 		.ascii	"--\015\000"
 5604 0994 00000000 		.space	4
 5605 0998 00       		.ascii	"\000"
 5606 0999 00000000 		.space	7
 5606      000000
 5607 09a0 2D       		.byte	45
 5608 09a1 000000   		.space	3
 5609 09a4 FFFFFFFF 		.word	-1
 5610 09a8 2E       		.byte	46
 5611 09a9 000000   		.space	3
 5612 09ac FFFFFFFF 		.word	-1
 5613 09b0 43505800 		.ascii	"CPX\000"
 5614 09b4 00000000 		.space	4
 5615 09b8 00       		.ascii	"\000"
 5616 09b9 00000000 		.space	7
 5616      000000
 5617 09c0 53746174 		.ascii	"Statistics\000"
 5617      69737469 
 5617      637300
 5618 09cb 00000000 		.space	4
 5619 09cf 00       		.space	1
 5620 09d0 1A       		.byte	26
 5621 09d1 000000   		.space	3
 5622 09d4 01000000 		.word	1
 5623 09d8 1A       		.byte	26
 5624 09d9 000000   		.space	3
 5625 09dc 02000000 		.word	2
 5626 09e0 0100     		.ascii	"\001\000"
 5627 09e2 00000000 		.space	6
 5627      0000
 5628 09e8 532E442E 		.ascii	"S.D.\000"
 5628      00
 5629 09ed 000000   		.space	3
 5630 09f0 1B       		.byte	27
 5631 09f1 000000   		.space	3
 5632 09f4 01000000 		.word	1
 5633 09f8 34       		.byte	52
 5634 09f9 000000   		.space	3
 5635 09fc 74020000 		.word	628
 5636 0a00 792D6861 		.ascii	"y-hat\000"
 5636      7400
 5637 0a06 0000     		.space	2
ARM GAS  /tmp/cc0ERj20.s 			page 142


 5638 0a08 782D6861 		.ascii	"x-hat\000"
 5638      7400
 5639 0a0e 0000     		.space	2
 5640 0a10 34       		.byte	52
 5641 0a11 000000   		.space	3
 5642 0a14 27010000 		.word	295
 5643 0a18 34       		.byte	52
 5644 0a19 000000   		.space	3
 5645 0a1c 28010000 		.word	296
 5646 0a20 434F5252 		.ascii	"CORR\000"
 5646      00
 5647 0a25 000000   		.space	3
 5648 0a28 4C2E522E 		.ascii	"L.R.\000"
 5648      00
 5649 0a2d 000000   		.space	3
 5650 0a30 34       		.byte	52
 5651 0a31 000000   		.space	3
 5652 0a34 32010000 		.word	306
 5653 0a38 34       		.byte	52
 5654 0a39 000000   		.space	3
 5655 0a3c 31010000 		.word	305
 5656 0a40 42657374 		.ascii	"BestF\000"
 5656      4600
 5657 0a46 0000     		.space	2
 5658 0a48 4C6F6746 		.ascii	"LogFit\000"
 5658      697400
 5659 0a4f 00       		.space	1
 5660 0a50 34       		.byte	52
 5661 0a51 000000   		.space	3
 5662 0a54 2E010000 		.word	302
 5663 0a58 34       		.byte	52
 5664 0a59 000000   		.space	3
 5665 0a5c 2F010000 		.word	303
 5666 0a60 4C696E65 		.ascii	"Linear\000"
 5666      617200
 5667 0a67 00       		.space	1
 5668 0a68 45787046 		.ascii	"ExpFit\000"
 5668      697400
 5669 0a6f 00       		.space	1
 5670 0a70 2D       		.byte	45
 5671 0a71 000000   		.space	3
 5672 0a74 FFFFFFFF 		.word	-1
 5673 0a78 34       		.byte	52
 5674 0a79 000000   		.space	3
 5675 0a7c 30010000 		.word	304
 5676 0a80 43505800 		.ascii	"CPX\000"
 5677 0a84 00000000 		.space	4
 5678 0a88 50777246 		.ascii	"PwrFit\000"
 5678      697400
 5679 0a8f 00       		.space	1
 5680 0a90 53657475 		.ascii	"Setup 2\000"
 5680      70203200 
 5681 0a98 00000000 		.space	7
 5681      000000
 5682 0a9f 00       		.space	1
 5683 0aa0 31       		.byte	49
 5684 0aa1 000000   		.space	3
ARM GAS  /tmp/cc0ERj20.s 			page 143


 5685 0aa4 04000000 		.word	4
 5686 0aa8 2E       		.byte	46
 5687 0aa9 000000   		.space	3
 5688 0aac FFFFFFFF 		.word	-1
 5689 0ab0 53764C49 		.ascii	"SvLIB\000"
 5689      4200
 5690 0ab6 0000     		.space	2
 5691 0ab8 00       		.ascii	"\000"
 5692 0ab9 00000000 		.space	7
 5692      000000
 5693 0ac0 31       		.byte	49
 5694 0ac1 000000   		.space	3
 5695 0ac4 05000000 		.word	5
 5696 0ac8 2E       		.byte	46
 5697 0ac9 000000   		.space	3
 5698 0acc FFFFFFFF 		.word	-1
 5699 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5699      4200
 5700 0ad6 0000     		.space	2
 5701 0ad8 00       		.ascii	"\000"
 5702 0ad9 00000000 		.space	7
 5702      000000
 5703 0ae0 31       		.byte	49
 5704 0ae1 000000   		.space	3
 5705 0ae4 0A000000 		.word	10
 5706 0ae8 2E       		.byte	46
 5707 0ae9 000000   		.space	3
 5708 0aec FFFFFFFF 		.word	-1
 5709 0af0 53764350 		.ascii	"SvCPRG\000"
 5709      524700
 5710 0af7 00       		.space	1
 5711 0af8 00       		.ascii	"\000"
 5712 0af9 00000000 		.space	7
 5712      000000
 5713 0b00 31       		.byte	49
 5714 0b01 000000   		.space	3
 5715 0b04 08000000 		.word	8
 5716 0b08 2E       		.byte	46
 5717 0b09 000000   		.space	3
 5718 0b0c FFFFFFFF 		.word	-1
 5719 0b10 4C645052 		.ascii	"LdPRG\000"
 5719      4700
 5720 0b16 0000     		.space	2
 5721 0b18 00       		.ascii	"\000"
 5722 0b19 00000000 		.space	7
 5722      000000
 5723 0b20 2C       		.byte	44
 5724 0b21 000000   		.space	3
 5725 0b24 FFFFFFFF 		.word	-1
 5726 0b28 2E       		.byte	46
 5727 0b29 000000   		.space	3
 5728 0b2c FFFFFFFF 		.word	-1
 5729 0b30 2D2D0D00 		.ascii	"--\015\000"
 5730 0b34 00000000 		.space	4
 5731 0b38 00       		.ascii	"\000"
 5732 0b39 00000000 		.space	7
 5732      000000
ARM GAS  /tmp/cc0ERj20.s 			page 144


 5733 0b40 2D       		.byte	45
 5734 0b41 000000   		.space	3
 5735 0b44 FFFFFFFF 		.word	-1
 5736 0b48 2E       		.byte	46
 5737 0b49 000000   		.space	3
 5738 0b4c FFFFFFFF 		.word	-1
 5739 0b50 43505800 		.ascii	"CPX\000"
 5740 0b54 00000000 		.space	4
 5741 0b58 00       		.ascii	"\000"
 5742 0b59 00000000 		.space	7
 5742      000000
 5743 0b60 496E7465 		.ascii	"Integ/Sum/Prod\000"
 5743      672F5375 
 5743      6D2F5072 
 5743      6F6400
 5744 0b6f 00       		.space	1
 5745 0b70 20       		.byte	32
 5746 0b71 000000   		.space	3
 5747 0b74 01000000 		.word	1
 5748 0b78 2E       		.byte	46
 5749 0b79 000000   		.space	3
 5750 0b7c FFFFFFFF 		.word	-1
 5751 0b80 534C5600 		.ascii	"SLV\000"
 5752 0b84 00000000 		.space	4
 5753 0b88 00       		.ascii	"\000"
 5754 0b89 00000000 		.space	7
 5754      000000
 5755 0b90 20       		.byte	32
 5756 0b91 000000   		.space	3
 5757 0b94 02000000 		.word	2
 5758 0b98 2E       		.byte	46
 5759 0b99 000000   		.space	3
 5760 0b9c FFFFFFFF 		.word	-1
 5761 0ba0 04206478 		.ascii	"\004 dx\000"
 5761      00
 5762 0ba5 000000   		.space	3
 5763 0ba8 00       		.ascii	"\000"
 5764 0ba9 00000000 		.space	7
 5764      000000
 5765 0bb0 21       		.byte	33
 5766 0bb1 000000   		.space	3
 5767 0bb4 02000000 		.word	2
 5768 0bb8 2E       		.byte	46
 5769 0bb9 000000   		.space	3
 5770 0bbc FFFFFFFF 		.word	-1
 5771 0bc0 53554D00 		.ascii	"SUM\000"
 5772 0bc4 00000000 		.space	4
 5773 0bc8 00       		.ascii	"\000"
 5774 0bc9 00000000 		.space	7
 5774      000000
 5775 0bd0 21       		.byte	33
 5776 0bd1 000000   		.space	3
 5777 0bd4 01000000 		.word	1
 5778 0bd8 2E       		.byte	46
 5779 0bd9 000000   		.space	3
 5780 0bdc FFFFFFFF 		.word	-1
 5781 0be0 50524F44 		.ascii	"PROD\000"
ARM GAS  /tmp/cc0ERj20.s 			page 145


 5781      00
 5782 0be5 000000   		.space	3
 5783 0be8 00       		.ascii	"\000"
 5784 0be9 00000000 		.space	7
 5784      000000
 5785 0bf0 2C       		.byte	44
 5786 0bf1 000000   		.space	3
 5787 0bf4 FFFFFFFF 		.word	-1
 5788 0bf8 2E       		.byte	46
 5789 0bf9 000000   		.space	3
 5790 0bfc FFFFFFFF 		.word	-1
 5791 0c00 2D2D0D00 		.ascii	"--\015\000"
 5792 0c04 00000000 		.space	4
 5793 0c08 00       		.ascii	"\000"
 5794 0c09 00000000 		.space	7
 5794      000000
 5795 0c10 2D       		.byte	45
 5796 0c11 000000   		.space	3
 5797 0c14 FFFFFFFF 		.word	-1
 5798 0c18 2E       		.byte	46
 5799 0c19 000000   		.space	3
 5800 0c1c FFFFFFFF 		.word	-1
 5801 0c20 43505800 		.ascii	"CPX\000"
 5802 0c24 00000000 		.space	4
 5803 0c28 00       		.ascii	"\000"
 5804 0c29 00000000 		.space	7
 5804      000000
 5805 0c30 426C616E 		.ascii	"Blank with A-D\000"
 5805      6B207769 
 5805      74682041 
 5805      2D4400
 5806 0c3f 00       		.space	1
 5807 0c40 28       		.byte	40
 5808 0c41 000000   		.space	3
 5809 0c44 03000000 		.word	3
 5810 0c48 2E       		.byte	46
 5811 0c49 000000   		.space	3
 5812 0c4c FFFFFFFF 		.word	-1
 5813 0c50 912B00   		.ascii	"\221+\000"
 5814 0c53 00000000 		.space	5
 5814      00
 5815 0c58 00       		.ascii	"\000"
 5816 0c59 00000000 		.space	7
 5816      000000
 5817 0c60 16       		.byte	22
 5818 0c61 000000   		.space	3
 5819 0c64 01000000 		.word	1
 5820 0c68 2E       		.byte	46
 5821 0c69 000000   		.space	3
 5822 0c6c FFFFFFFF 		.word	-1
 5823 0c70 312F5800 		.ascii	"1/X\000"
 5824 0c74 00000000 		.space	4
 5825 0c78 00       		.ascii	"\000"
 5826 0c79 00000000 		.space	7
 5826      000000
 5827 0c80 1C       		.byte	28
 5828 0c81 000000   		.space	3
ARM GAS  /tmp/cc0ERj20.s 			page 146


 5829 0c84 01000000 		.word	1
 5830 0c88 2E       		.byte	46
 5831 0c89 000000   		.space	3
 5832 0c8c FFFFFFFF 		.word	-1
 5833 0c90 035800   		.ascii	"\003X\000"
 5834 0c93 00000000 		.space	5
 5834      00
 5835 0c98 00       		.ascii	"\000"
 5836 0c99 00000000 		.space	7
 5836      000000
 5837 0ca0 13       		.byte	19
 5838 0ca1 000000   		.space	3
 5839 0ca4 02000000 		.word	2
 5840 0ca8 2E       		.byte	46
 5841 0ca9 000000   		.space	3
 5842 0cac FFFFFFFF 		.word	-1
 5843 0cb0 4C4F4700 		.ascii	"LOG\000"
 5844 0cb4 00000000 		.space	4
 5845 0cb8 00       		.ascii	"\000"
 5846 0cb9 00000000 		.space	7
 5846      000000
 5847 0cc0 2C       		.byte	44
 5848 0cc1 000000   		.space	3
 5849 0cc4 FFFFFFFF 		.word	-1
 5850 0cc8 2E       		.byte	46
 5851 0cc9 000000   		.space	3
 5852 0ccc FFFFFFFF 		.word	-1
 5853 0cd0 2D2D0D00 		.ascii	"--\015\000"
 5854 0cd4 00000000 		.space	4
 5855 0cd8 00       		.ascii	"\000"
 5856 0cd9 00000000 		.space	7
 5856      000000
 5857 0ce0 2D       		.byte	45
 5858 0ce1 000000   		.space	3
 5859 0ce4 FFFFFFFF 		.word	-1
 5860 0ce8 2E       		.byte	46
 5861 0ce9 000000   		.space	3
 5862 0cec FFFFFFFF 		.word	-1
 5863 0cf0 43505800 		.ascii	"CPX\000"
 5864 0cf4 00000000 		.space	4
 5865 0cf8 00       		.ascii	"\000"
 5866 0cf9 00000000 		.space	7
 5866      000000
 5867 0d00 416C7068 		.ascii	"Alpha\000"
 5867      6100
 5868 0d06 00000000 		.space	9
 5868      00000000 
 5868      00
 5869 0d0f 00       		.space	1
 5870 0d10 34       		.byte	52
 5871 0d11 000000   		.space	3
 5872 0d14 78010000 		.word	376
 5873 0d18 34       		.byte	52
 5874 0d19 000000   		.space	3
 5875 0d1c 6D010000 		.word	365
 5876 0d20 582D3EA0 		.ascii	"X->\240\000"
 5876      00
ARM GAS  /tmp/cc0ERj20.s 			page 147


 5877 0d25 000000   		.space	3
 5878 0d28 A054494D 		.ascii	"\240TIME\000"
 5878      4500
 5879 0d2e 0000     		.space	2
 5880 0d30 34       		.byte	52
 5881 0d31 000000   		.space	3
 5882 0d34 77010000 		.word	375
 5883 0d38 34       		.byte	52
 5884 0d39 000000   		.space	3
 5885 0d3c 6C010000 		.word	364
 5886 0d40 A02D3E58 		.ascii	"\240->X\000"
 5886      00
 5887 0d45 000000   		.space	3
 5888 0d48 A0444154 		.ascii	"\240DATE\000"
 5888      4500
 5889 0d4e 0000     		.space	2
 5890 0d50 34       		.byte	52
 5891 0d51 000000   		.space	3
 5892 0d54 00480000 		.word	18432
 5893 0d58 34       		.byte	52
 5894 0d59 000000   		.space	3
 5895 0d5c 6A010000 		.word	362
 5896 0d60 A0495000 		.ascii	"\240IP\000"
 5897 0d64 00000000 		.space	4
 5898 0d68 A0444159 		.ascii	"\240DAY\000"
 5898      00
 5899 0d6d 000000   		.space	3
 5900 0d70 34       		.byte	52
 5901 0d71 000000   		.space	3
 5902 0d74 76010000 		.word	374
 5903 0d78 34       		.byte	52
 5904 0d79 000000   		.space	3
 5905 0d7c 6B010000 		.word	363
 5906 0d80 A04C454E 		.ascii	"\240LENG\000"
 5906      4700
 5907 0d86 0000     		.space	2
 5908 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 5908      4800
 5909 0d8e 0000     		.space	2
 5910 0d90 2C       		.byte	44
 5911 0d91 000000   		.space	3
 5912 0d94 FFFFFFFF 		.word	-1
 5913 0d98 2C       		.byte	44
 5914 0d99 000000   		.space	3
 5915 0d9c 01000000 		.word	1
 5916 0da0 2D2D0D00 		.ascii	"--\015\000"
 5917 0da4 00000000 		.space	4
 5918 0da8 00       		.ascii	"\000"
 5919 0da9 00000000 		.space	7
 5919      000000
 5920 0db0 2D       		.byte	45
 5921 0db1 000000   		.space	3
 5922 0db4 FFFFFFFF 		.word	-1
 5923 0db8 2D       		.byte	45
 5924 0db9 000000   		.space	3
 5925 0dbc 01000000 		.word	1
 5926 0dc0 43505800 		.ascii	"CPX\000"
ARM GAS  /tmp/cc0ERj20.s 			page 148


 5927 0dc4 00000000 		.space	4
 5928 0dc8 00       		.ascii	"\000"
 5929 0dc9 00000000 		.space	7
 5929      000000
 5930 0dd0 435F4C4F 		.ascii	"C_LOCK\000"
 5930      434B00
 5931 0dd7 00000000 		.space	8
 5931      00000000 
 5932 0ddf 00       		.space	1
 5933 0de0 18       		.byte	24
 5934 0de1 000000   		.space	3
 5935 0de4 02000000 		.word	2
 5936 0de8 04       		.byte	4
 5937 0de9 000000   		.space	3
 5938 0dec 02000000 		.word	2
 5939 0df0 504F4C41 		.ascii	"POLAR\000"
 5939      5200
 5940 0df6 0000     		.space	2
 5941 0df8 0D205000 		.ascii	"\015 P\000"
 5942 0dfc 00000000 		.space	4
 5943 0e00 18       		.byte	24
 5944 0e01 000000   		.space	3
 5945 0e04 01000000 		.word	1
 5946 0e08 04       		.byte	4
 5947 0e09 000000   		.space	3
 5948 0e0c 01000000 		.word	1
 5949 0e10 52454354 		.ascii	"RECT\000"
 5949      00
 5950 0e15 000000   		.space	3
 5951 0e18 0D205200 		.ascii	"\015 R\000"
 5952 0e1c 00000000 		.space	4
 5953 0e20 0E       		.byte	14
 5954 0e21 000000   		.space	3
 5955 0e24 01000000 		.word	1
 5956 0e28 0E       		.byte	14
 5957 0e29 000000   		.space	3
 5958 0e2c 03000000 		.word	3
 5959 0e30 43485306 		.ascii	"CHS\006y\000"
 5959      7900
 5960 0e36 0000     		.space	2
 5961 0e38 43485306 		.ascii	"CHS\006x\000"
 5961      7800
 5962 0e3e 0000     		.space	2
 5963 0e40 0D       		.byte	13
 5964 0e41 000000   		.space	3
 5965 0e44 01000000 		.word	1
 5966 0e48 00       		.byte	0
 5967 0e49 000000   		.space	3
 5968 0e4c 01000000 		.word	1
 5969 0e50 78177900 		.ascii	"x\027y\000"
 5970 0e54 00000000 		.space	4
 5971 0e58 48595000 		.ascii	"HYP\000"
 5972 0e5c 00000000 		.space	4
 5973 0e60 2C       		.byte	44
 5974 0e61 000000   		.space	3
 5975 0e64 FFFFFFFF 		.word	-1
 5976 0e68 0F       		.byte	15
ARM GAS  /tmp/cc0ERj20.s 			page 149


 5977 0e69 000000   		.space	3
 5978 0e6c 01000000 		.word	1
 5979 0e70 2D2D0D00 		.ascii	"--\015\000"
 5980 0e74 00000000 		.space	4
 5981 0e78 1106AF00 		.ascii	"\021\006\257\000"
 5982 0e7c 00000000 		.space	4
 5983 0e80 2D       		.byte	45
 5984 0e81 000000   		.space	3
 5985 0e84 FFFFFFFF 		.word	-1
 5986 0e88 0C       		.byte	12
 5987 0e89 000000   		.space	3
 5988 0e8c 01000000 		.word	1
 5989 0e90 43505800 		.ascii	"CPX\000"
 5990 0e94 00000000 		.space	4
 5991 0e98 1106434E 		.ascii	"\021\006CNST\000"
 5991      535400
 5992 0e9f 00       		.space	1
 5993              		.section	.rodata.mapping_alpha.11014,"a"
 5994              		.align	2
 5995              		.set	.LANCHOR19,. + 0
 5998              	mapping_alpha.11014:
 5999 0000 63       		.byte	99
 6000 0001 000000   		.space	3
 6001 0004 FFFFFFFF 		.word	-1
 6002 0008 00       		.byte	0
 6003 0009 000000   		.space	3
 6004 000c FFFFFFFF 		.word	-1
 6005 0010 01       		.byte	1
 6006 0011 000000   		.space	3
 6007 0014 FFFFFFFF 		.word	-1
 6008 0018 02       		.byte	2
 6009 0019 000000   		.space	3
 6010 001c FFFFFFFF 		.word	-1
 6011 0020 03       		.byte	3
 6012 0021 000000   		.space	3
 6013 0024 FFFFFFFF 		.word	-1
 6014 0028 04       		.byte	4
 6015 0029 000000   		.space	3
 6016 002c FFFFFFFF 		.word	-1
 6017 0030 05       		.byte	5
 6018 0031 000000   		.space	3
 6019 0034 FFFFFFFF 		.word	-1
 6020 0038 06       		.byte	6
 6021 0039 000000   		.space	3
 6022 003c FFFFFFFF 		.word	-1
 6023 0040 07       		.byte	7
 6024 0041 000000   		.space	3
 6025 0044 FFFFFFFF 		.word	-1
 6026 0048 08       		.byte	8
 6027 0049 000000   		.space	3
 6028 004c FFFFFFFF 		.word	-1
 6029 0050 09       		.byte	9
 6030 0051 000000   		.space	3
 6031 0054 FFFFFFFF 		.word	-1
 6032 0058 0A       		.byte	10
 6033 0059 000000   		.space	3
 6034 005c FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc0ERj20.s 			page 150


 6035 0060 0B       		.byte	11
 6036 0061 000000   		.space	3
 6037 0064 FFFFFFFF 		.word	-1
 6038 0068 0C       		.byte	12
 6039 0069 000000   		.space	3
 6040 006c FFFFFFFF 		.word	-1
 6041 0070 0D       		.byte	13
 6042 0071 000000   		.space	3
 6043 0074 FFFFFFFF 		.word	-1
 6044 0078 0E       		.byte	14
 6045 0079 000000   		.space	3
 6046 007c FFFFFFFF 		.word	-1
 6047 0080 0F       		.byte	15
 6048 0081 000000   		.space	3
 6049 0084 FFFFFFFF 		.word	-1
 6050 0088 10       		.byte	16
 6051 0089 000000   		.space	3
 6052 008c FFFFFFFF 		.word	-1
 6053 0090 12       		.byte	18
 6054 0091 000000   		.space	3
 6055 0094 FFFFFFFF 		.word	-1
 6056 0098 13       		.byte	19
 6057 0099 000000   		.space	3
 6058 009c FFFFFFFF 		.word	-1
 6059 00a0 14       		.byte	20
 6060 00a1 000000   		.space	3
 6061 00a4 FFFFFFFF 		.word	-1
 6062 00a8 15       		.byte	21
 6063 00a9 000000   		.space	3
 6064 00ac FFFFFFFF 		.word	-1
 6065 00b0 16       		.byte	22
 6066 00b1 000000   		.space	3
 6067 00b4 FFFFFFFF 		.word	-1
 6068 00b8 18       		.byte	24
 6069 00b9 000000   		.space	3
 6070 00bc FFFFFFFF 		.word	-1
 6071 00c0 19       		.byte	25
 6072 00c1 000000   		.space	3
 6073 00c4 FFFFFFFF 		.word	-1
 6074 00c8 1A       		.byte	26
 6075 00c9 000000   		.space	3
 6076 00cc FFFFFFFF 		.word	-1
 6077 00d0 1B       		.byte	27
 6078 00d1 000000   		.space	3
 6079 00d4 FFFFFFFF 		.word	-1
 6080 00d8 1C       		.byte	28
 6081 00d9 000000   		.space	3
 6082 00dc FFFFFFFF 		.word	-1
 6083 00e0 1E       		.byte	30
 6084 00e1 000000   		.space	3
 6085 00e4 FFFFFFFF 		.word	-1
 6086 00e8 1F       		.byte	31
 6087 00e9 000000   		.space	3
 6088 00ec FFFFFFFF 		.word	-1
 6089 00f0 20       		.byte	32
 6090 00f1 000000   		.space	3
 6091 00f4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc0ERj20.s 			page 151


 6092 00f8 21       		.byte	33
 6093 00f9 000000   		.space	3
 6094 00fc FFFFFFFF 		.word	-1
 6095 0100 22       		.byte	34
 6096 0101 000000   		.space	3
 6097 0104 FFFFFFFF 		.word	-1
 6098 0108 24       		.byte	36
 6099 0109 000000   		.space	3
 6100 010c FFFFFFFF 		.word	-1
 6101 0110 25       		.byte	37
 6102 0111 000000   		.space	3
 6103 0114 FFFFFFFF 		.word	-1
 6104 0118 26       		.byte	38
 6105 0119 000000   		.space	3
 6106 011c FFFFFFFF 		.word	-1
 6107 0120 27       		.byte	39
 6108 0121 000000   		.space	3
 6109 0124 FFFFFFFF 		.word	-1
 6110 0128 28       		.byte	40
 6111 0129 000000   		.space	3
 6112 012c FFFFFFFF 		.word	-1
 6113 0130 2E       		.byte	46
 6114 0131 000000   		.space	3
 6115 0134 FFFFFFFF 		.word	-1
 6116 0138 2E       		.byte	46
 6117 0139 000000   		.space	3
 6118 013c FFFFFFFF 		.word	-1
 6119 0140 2E       		.byte	46
 6120 0141 000000   		.space	3
 6121 0144 FFFFFFFF 		.word	-1
 6122 0148 2E       		.byte	46
 6123 0149 000000   		.space	3
 6124 014c FFFFFFFF 		.word	-1
 6125 0150 2C       		.byte	44
 6126 0151 000000   		.space	3
 6127 0154 FFFFFFFF 		.word	-1
 6128 0158 2D       		.byte	45
 6129 0159 000000   		.space	3
 6130 015c FFFFFFFF 		.word	-1
 6131 0160 2E       		.byte	46
 6132 0161 000000   		.space	3
 6133 0164 FFFFFFFF 		.word	-1
 6134 0168 2E       		.byte	46
 6135 0169 000000   		.space	3
 6136 016c FFFFFFFF 		.word	-1
 6137 0170 2E       		.byte	46
 6138 0171 000000   		.space	3
 6139 0174 FFFFFFFF 		.word	-1
 6140              		.section	.rodata.mapping_fshift.11012,"a"
 6141              		.align	2
 6142              		.set	.LANCHOR17,. + 0
 6145              	mapping_fshift.11012:
 6146 0000 63       		.byte	99
 6147 0001 000000   		.space	3
 6148 0004 FFFFFFFF 		.word	-1
 6149 0008 22       		.byte	34
 6150 0009 000000   		.space	3
ARM GAS  /tmp/cc0ERj20.s 			page 152


 6151 000c 03000000 		.word	3
 6152 0010 15       		.byte	21
 6153 0011 000000   		.space	3
 6154 0014 01000000 		.word	1
 6155 0018 1C       		.byte	28
 6156 0019 000000   		.space	3
 6157 001c 02000000 		.word	2
 6158 0020 13       		.byte	19
 6159 0021 000000   		.space	3
 6160 0024 01000000 		.word	1
 6161 0028 12       		.byte	18
 6162 0029 000000   		.space	3
 6163 002c 01000000 		.word	1
 6164 0030 12       		.byte	18
 6165 0031 000000   		.space	3
 6166 0034 03000000 		.word	3
 6167 0038 31       		.byte	49
 6168 0039 000000   		.space	3
 6169 003c 0F000000 		.word	15
 6170 0040 22       		.byte	34
 6171 0041 000000   		.space	3
 6172 0044 01000000 		.word	1
 6173 0048 0F       		.byte	15
 6174 0049 000000   		.space	3
 6175 004c 03000000 		.word	3
 6176 0050 01       		.byte	1
 6177 0051 000000   		.space	3
 6178 0054 02000000 		.word	2
 6179 0058 02       		.byte	2
 6180 0059 000000   		.space	3
 6181 005c 02000000 		.word	2
 6182 0060 03       		.byte	3
 6183 0061 000000   		.space	3
 6184 0064 02000000 		.word	2
 6185 0068 0C       		.byte	12
 6186 0069 000000   		.space	3
 6187 006c 01000000 		.word	1
 6188 0070 31       		.byte	49
 6189 0071 000000   		.space	3
 6190 0074 01000000 		.word	1
 6191 0078 2F       		.byte	47
 6192 0079 000000   		.space	3
 6193 007c 04000000 		.word	4
 6194 0080 2F       		.byte	47
 6195 0081 000000   		.space	3
 6196 0084 02000000 		.word	2
 6197 0088 2F       		.byte	47
 6198 0089 000000   		.space	3
 6199 008c 01000000 		.word	1
 6200 0090 18       		.byte	24
 6201 0091 000000   		.space	3
 6202 0094 00000000 		.word	0
 6203 0098 20       		.byte	32
 6204 0099 000000   		.space	3
 6205 009c 01000000 		.word	1
 6206 00a0 2F       		.byte	47
 6207 00a1 000000   		.space	3
ARM GAS  /tmp/cc0ERj20.s 			page 153


 6208 00a4 0E000000 		.word	14
 6209 00a8 1C       		.byte	28
 6210 00a9 000000   		.space	3
 6211 00ac 03000000 		.word	3
 6212 00b0 2F       		.byte	47
 6213 00b1 000000   		.space	3
 6214 00b4 0C000000 		.word	12
 6215 00b8 1E       		.byte	30
 6216 00b9 000000   		.space	3
 6217 00bc 00000000 		.word	0
 6218 00c0 2F       		.byte	47
 6219 00c1 000000   		.space	3
 6220 00c4 03000000 		.word	3
 6221 00c8 04       		.byte	4
 6222 00c9 000000   		.space	3
 6223 00cc 03000000 		.word	3
 6224 00d0 2F       		.byte	47
 6225 00d1 000000   		.space	3
 6226 00d4 0A000000 		.word	10
 6227 00d8 2F       		.byte	47
 6228 00d9 000000   		.space	3
 6229 00dc 0B000000 		.word	11
 6230 00e0 2A       		.byte	42
 6231 00e1 000000   		.space	3
 6232 00e4 00000000 		.word	0
 6233 00e8 31       		.byte	49
 6234 00e9 000000   		.space	3
 6235 00ec 0D000000 		.word	13
 6236 00f0 2F       		.byte	47
 6237 00f1 000000   		.space	3
 6238 00f4 63000000 		.word	99
 6239 00f8 20       		.byte	32
 6240 00f9 000000   		.space	3
 6241 00fc 03000000 		.word	3
 6242 0100 2E       		.byte	46
 6243 0101 000000   		.space	3
 6244 0104 00000000 		.word	0
 6245 0108 24       		.byte	36
 6246 0109 000000   		.space	3
 6247 010c 03000000 		.word	3
 6248 0110 2F       		.byte	47
 6249 0111 000000   		.space	3
 6250 0114 08000000 		.word	8
 6251 0118 0D       		.byte	13
 6252 0119 000000   		.space	3
 6253 011c 01000000 		.word	1
 6254 0120 27       		.byte	39
 6255 0121 000000   		.space	3
 6256 0124 03000000 		.word	3
 6257 0128 06       		.byte	6
 6258 0129 000000   		.space	3
 6259 012c 03000000 		.word	3
 6260 0130 2E       		.byte	46
 6261 0131 000000   		.space	3
 6262 0134 00000000 		.word	0
 6263 0138 2E       		.byte	46
 6264 0139 000000   		.space	3
ARM GAS  /tmp/cc0ERj20.s 			page 154


 6265 013c 00000000 		.word	0
 6266 0140 2E       		.byte	46
 6267 0141 000000   		.space	3
 6268 0144 00000000 		.word	0
 6269 0148 2E       		.byte	46
 6270 0149 000000   		.space	3
 6271 014c 00000000 		.word	0
 6272 0150 2E       		.byte	46
 6273 0151 000000   		.space	3
 6274 0154 00000000 		.word	0
 6275 0158 2E       		.byte	46
 6276 0159 000000   		.space	3
 6277 015c 00000000 		.word	0
 6278 0160 2E       		.byte	46
 6279 0161 000000   		.space	3
 6280 0164 00000000 		.word	0
 6281 0168 2F       		.byte	47
 6282 0169 000000   		.space	3
 6283 016c FFFFFFFF 		.word	-1
 6284 0170 2F       		.byte	47
 6285 0171 000000   		.space	3
 6286 0174 05000000 		.word	5
 6287              		.section	.rodata.mapping_gshift.11013,"a"
 6288              		.align	2
 6289              		.set	.LANCHOR20,. + 0
 6292              	mapping_gshift.11013:
 6293 0000 63       		.byte	99
 6294 0001 000000   		.space	3
 6295 0004 FFFFFFFF 		.word	-1
 6296 0008 28       		.byte	40
 6297 0009 000000   		.space	3
 6298 000c 03000000 		.word	3
 6299 0010 16       		.byte	22
 6300 0011 000000   		.space	3
 6301 0014 01000000 		.word	1
 6302 0018 1C       		.byte	28
 6303 0019 000000   		.space	3
 6304 001c 01000000 		.word	1
 6305 0020 13       		.byte	19
 6306 0021 000000   		.space	3
 6307 0024 02000000 		.word	2
 6308 0028 2E       		.byte	46
 6309 0029 000000   		.space	3
 6310 002c 00000000 		.word	0
 6311 0030 2E       		.byte	46
 6312 0031 000000   		.space	3
 6313 0034 00000000 		.word	0
 6314 0038 2E       		.byte	46
 6315 0039 000000   		.space	3
 6316 003c 00000000 		.word	0
 6317 0040 07       		.byte	7
 6318 0041 000000   		.space	3
 6319 0044 03000000 		.word	3
 6320 0048 08       		.byte	8
 6321 0049 000000   		.space	3
 6322 004c 03000000 		.word	3
 6323 0050 2F       		.byte	47
ARM GAS  /tmp/cc0ERj20.s 			page 155


 6324 0051 000000   		.space	3
 6325 0054 04000000 		.word	4
 6326 0058 2F       		.byte	47
 6327 0059 000000   		.space	3
 6328 005c 04000000 		.word	4
 6329 0060 2F       		.byte	47
 6330 0061 000000   		.space	3
 6331 0064 04000000 		.word	4
 6332 0068 0C       		.byte	12
 6333 0069 000000   		.space	3
 6334 006c 02000000 		.word	2
 6335 0070 2F       		.byte	47
 6336 0071 000000   		.space	3
 6337 0074 06000000 		.word	6
 6338 0078 05       		.byte	5
 6339 0079 000000   		.space	3
 6340 007c 03000000 		.word	3
 6341 0080 2E       		.byte	46
 6342 0081 000000   		.space	3
 6343 0084 00000000 		.word	0
 6344 0088 2E       		.byte	46
 6345 0089 000000   		.space	3
 6346 008c 00000000 		.word	0
 6347 0090 2E       		.byte	46
 6348 0091 000000   		.space	3
 6349 0094 00000000 		.word	0
 6350 0098 2E       		.byte	46
 6351 0099 000000   		.space	3
 6352 009c 00000000 		.word	0
 6353 00a0 2E       		.byte	46
 6354 00a1 000000   		.space	3
 6355 00a4 00000000 		.word	0
 6356 00a8 1B       		.byte	27
 6357 00a9 000000   		.space	3
 6358 00ac 03000000 		.word	3
 6359 00b0 1A       		.byte	26
 6360 00b1 000000   		.space	3
 6361 00b4 03000000 		.word	3
 6362 00b8 2E       		.byte	46
 6363 00b9 000000   		.space	3
 6364 00bc 00000000 		.word	0
 6365 00c0 2E       		.byte	46
 6366 00c1 000000   		.space	3
 6367 00c4 00000000 		.word	0
 6368 00c8 0C       		.byte	12
 6369 00c9 000000   		.space	3
 6370 00cc 03000000 		.word	3
 6371 00d0 1F       		.byte	31
 6372 00d1 000000   		.space	3
 6373 00d4 03000000 		.word	3
 6374 00d8 19       		.byte	25
 6375 00d9 000000   		.space	3
 6376 00dc 03000000 		.word	3
 6377 00e0 2A       		.byte	42
 6378 00e1 000000   		.space	3
 6379 00e4 FFFFFFFF 		.word	-1
 6380 00e8 2E       		.byte	46
ARM GAS  /tmp/cc0ERj20.s 			page 156


 6381 00e9 000000   		.space	3
 6382 00ec 00000000 		.word	0
 6383 00f0 31       		.byte	49
 6384 00f1 000000   		.space	3
 6385 00f4 0E000000 		.word	14
 6386 00f8 21       		.byte	33
 6387 00f9 000000   		.space	3
 6388 00fc 03000000 		.word	3
 6389 0100 2E       		.byte	46
 6390 0101 000000   		.space	3
 6391 0104 00000000 		.word	0
 6392 0108 24       		.byte	36
 6393 0109 000000   		.space	3
 6394 010c 02000000 		.word	2
 6395 0110 2F       		.byte	47
 6396 0111 000000   		.space	3
 6397 0114 0D000000 		.word	13
 6398 0118 2E       		.byte	46
 6399 0119 000000   		.space	3
 6400 011c 00000000 		.word	0
 6401 0120 2F       		.byte	47
 6402 0121 000000   		.space	3
 6403 0124 07000000 		.word	7
 6404 0128 1E       		.byte	30
 6405 0129 000000   		.space	3
 6406 012c 03000000 		.word	3
 6407 0130 2E       		.byte	46
 6408 0131 000000   		.space	3
 6409 0134 00000000 		.word	0
 6410 0138 2E       		.byte	46
 6411 0139 000000   		.space	3
 6412 013c 00000000 		.word	0
 6413 0140 2E       		.byte	46
 6414 0141 000000   		.space	3
 6415 0144 00000000 		.word	0
 6416 0148 2E       		.byte	46
 6417 0149 000000   		.space	3
 6418 014c 00000000 		.word	0
 6419 0150 2E       		.byte	46
 6420 0151 000000   		.space	3
 6421 0154 00000000 		.word	0
 6422 0158 2E       		.byte	46
 6423 0159 000000   		.space	3
 6424 015c 00000000 		.word	0
 6425 0160 2E       		.byte	46
 6426 0161 000000   		.space	3
 6427 0164 00000000 		.word	0
 6428 0168 2E       		.byte	46
 6429 0169 000000   		.space	3
 6430 016c 00000000 		.word	0
 6431 0170 2E       		.byte	46
 6432 0171 000000   		.space	3
 6433 0174 00000000 		.word	0
 6434              		.section	.rodata.mapping_none.11011,"a"
 6435              		.align	2
 6436              		.set	.LANCHOR16,. + 0
 6439              	mapping_none.11011:
ARM GAS  /tmp/cc0ERj20.s 			page 157


 6440 0000 63       		.byte	99
 6441 0001 000000   		.space	3
 6442 0004 FFFFFFFF 		.word	-1
 6443 0008 00       		.byte	0
 6444 0009 000000   		.space	3
 6445 000c 00000000 		.word	0
 6446 0010 01       		.byte	1
 6447 0011 000000   		.space	3
 6448 0014 00000000 		.word	0
 6449 0018 03       		.byte	3
 6450 0019 000000   		.space	3
 6451 001c 00000000 		.word	0
 6452 0020 13       		.byte	19
 6453 0021 000000   		.space	3
 6454 0024 02000000 		.word	2
 6455 0028 12       		.byte	18
 6456 0029 000000   		.space	3
 6457 002c 02000000 		.word	2
 6458 0030 12       		.byte	18
 6459 0031 000000   		.space	3
 6460 0034 00000000 		.word	0
 6461 0038 06       		.byte	6
 6462 0039 000000   		.space	3
 6463 003c 00000000 		.word	0
 6464 0040 07       		.byte	7
 6465 0041 000000   		.space	3
 6466 0044 00000000 		.word	0
 6467 0048 08       		.byte	8
 6468 0049 000000   		.space	3
 6469 004c 00000000 		.word	0
 6470 0050 01       		.byte	1
 6471 0051 000000   		.space	3
 6472 0054 01000000 		.word	1
 6473 0058 02       		.byte	2
 6474 0059 000000   		.space	3
 6475 005c 01000000 		.word	1
 6476 0060 03       		.byte	3
 6477 0061 000000   		.space	3
 6478 0064 01000000 		.word	1
 6479 0068 0C       		.byte	12
 6480 0069 000000   		.space	3
 6481 006c 00000000 		.word	0
 6482 0070 0D       		.byte	13
 6483 0071 000000   		.space	3
 6484 0074 00000000 		.word	0
 6485 0078 0E       		.byte	14
 6486 0079 000000   		.space	3
 6487 007c 00000000 		.word	0
 6488 0080 0F       		.byte	15
 6489 0081 000000   		.space	3
 6490 0084 00000000 		.word	0
 6491 0088 10       		.byte	16
 6492 0089 000000   		.space	3
 6493 008c 00000000 		.word	0
 6494 0090 18       		.byte	24
 6495 0091 000000   		.space	3
 6496 0094 00000000 		.word	0
ARM GAS  /tmp/cc0ERj20.s 			page 158


 6497 0098 13       		.byte	19
 6498 0099 000000   		.space	3
 6499 009c 00000000 		.word	0
 6500 00a0 14       		.byte	20
 6501 00a1 000000   		.space	3
 6502 00a4 00000000 		.word	0
 6503 00a8 15       		.byte	21
 6504 00a9 000000   		.space	3
 6505 00ac 00000000 		.word	0
 6506 00b0 16       		.byte	22
 6507 00b1 000000   		.space	3
 6508 00b4 00000000 		.word	0
 6509 00b8 1E       		.byte	30
 6510 00b9 000000   		.space	3
 6511 00bc 00000000 		.word	0
 6512 00c0 19       		.byte	25
 6513 00c1 000000   		.space	3
 6514 00c4 00000000 		.word	0
 6515 00c8 1A       		.byte	26
 6516 00c9 000000   		.space	3
 6517 00cc 00000000 		.word	0
 6518 00d0 1B       		.byte	27
 6519 00d1 000000   		.space	3
 6520 00d4 00000000 		.word	0
 6521 00d8 1C       		.byte	28
 6522 00d9 000000   		.space	3
 6523 00dc 00000000 		.word	0
 6524 00e0 29       		.byte	41
 6525 00e1 000000   		.space	3
 6526 00e4 00000000 		.word	0
 6527 00e8 1F       		.byte	31
 6528 00e9 000000   		.space	3
 6529 00ec 00000000 		.word	0
 6530 00f0 20       		.byte	32
 6531 00f1 000000   		.space	3
 6532 00f4 00000000 		.word	0
 6533 00f8 21       		.byte	33
 6534 00f9 000000   		.space	3
 6535 00fc 00000000 		.word	0
 6536 0100 22       		.byte	34
 6537 0101 000000   		.space	3
 6538 0104 00000000 		.word	0
 6539 0108 24       		.byte	36
 6540 0109 000000   		.space	3
 6541 010c 00000000 		.word	0
 6542 0110 25       		.byte	37
 6543 0111 000000   		.space	3
 6544 0114 00000000 		.word	0
 6545 0118 26       		.byte	38
 6546 0119 000000   		.space	3
 6547 011c 00000000 		.word	0
 6548 0120 27       		.byte	39
 6549 0121 000000   		.space	3
 6550 0124 00000000 		.word	0
 6551 0128 28       		.byte	40
 6552 0129 000000   		.space	3
 6553 012c 00000000 		.word	0
ARM GAS  /tmp/cc0ERj20.s 			page 159


 6554 0130 2E       		.byte	46
 6555 0131 000000   		.space	3
 6556 0134 00000000 		.word	0
 6557 0138 2E       		.byte	46
 6558 0139 000000   		.space	3
 6559 013c 00000000 		.word	0
 6560 0140 2E       		.byte	46
 6561 0141 000000   		.space	3
 6562 0144 00000000 		.word	0
 6563 0148 2E       		.byte	46
 6564 0149 000000   		.space	3
 6565 014c 00000000 		.word	0
 6566 0150 2E       		.byte	46
 6567 0151 000000   		.space	3
 6568 0154 00000000 		.word	0
 6569 0158 2E       		.byte	46
 6570 0159 000000   		.space	3
 6571 015c 00000000 		.word	0
 6572 0160 2E       		.byte	46
 6573 0161 000000   		.space	3
 6574 0164 00000000 		.word	0
 6575 0168 2E       		.byte	46
 6576 0169 000000   		.space	3
 6577 016c 00000000 		.word	0
 6578 0170 2E       		.byte	46
 6579 0171 000000   		.space	3
 6580 0174 00000000 		.word	0
 6581              		.section	.rodata.mapping_running.11015,"a"
 6582              		.align	2
 6583              		.set	.LANCHOR15,. + 0
 6586              	mapping_running.11015:
 6587 0000 63       		.byte	99
 6588 0001 000000   		.space	3
 6589 0004 FFFFFFFF 		.word	-1
 6590 0008 00       		.byte	0
 6591 0009 000000   		.space	3
 6592 000c 00000000 		.word	0
 6593 0010 01       		.byte	1
 6594 0011 000000   		.space	3
 6595 0014 00000000 		.word	0
 6596 0018 02       		.byte	2
 6597 0019 000000   		.space	3
 6598 001c 00000000 		.word	0
 6599 0020 03       		.byte	3
 6600 0021 000000   		.space	3
 6601 0024 00000000 		.word	0
 6602 0028 04       		.byte	4
 6603 0029 000000   		.space	3
 6604 002c 00000000 		.word	0
 6605 0030 12       		.byte	18
 6606 0031 000000   		.space	3
 6607 0034 00000000 		.word	0
 6608 0038 06       		.byte	6
 6609 0039 000000   		.space	3
 6610 003c 00000000 		.word	0
 6611 0040 07       		.byte	7
 6612 0041 000000   		.space	3
ARM GAS  /tmp/cc0ERj20.s 			page 160


 6613 0044 00000000 		.word	0
 6614 0048 08       		.byte	8
 6615 0049 000000   		.space	3
 6616 004c 00000000 		.word	0
 6617 0050 09       		.byte	9
 6618 0051 000000   		.space	3
 6619 0054 00000000 		.word	0
 6620 0058 0A       		.byte	10
 6621 0059 000000   		.space	3
 6622 005c 00000000 		.word	0
 6623 0060 0B       		.byte	11
 6624 0061 000000   		.space	3
 6625 0064 00000000 		.word	0
 6626 0068 0C       		.byte	12
 6627 0069 000000   		.space	3
 6628 006c 00000000 		.word	0
 6629 0070 0D       		.byte	13
 6630 0071 000000   		.space	3
 6631 0074 00000000 		.word	0
 6632 0078 0E       		.byte	14
 6633 0079 000000   		.space	3
 6634 007c 00000000 		.word	0
 6635 0080 0F       		.byte	15
 6636 0081 000000   		.space	3
 6637 0084 00000000 		.word	0
 6638 0088 10       		.byte	16
 6639 0089 000000   		.space	3
 6640 008c 00000000 		.word	0
 6641 0090 18       		.byte	24
 6642 0091 000000   		.space	3
 6643 0094 00000000 		.word	0
 6644 0098 13       		.byte	19
 6645 0099 000000   		.space	3
 6646 009c 00000000 		.word	0
 6647 00a0 14       		.byte	20
 6648 00a1 000000   		.space	3
 6649 00a4 00000000 		.word	0
 6650 00a8 15       		.byte	21
 6651 00a9 000000   		.space	3
 6652 00ac 00000000 		.word	0
 6653 00b0 16       		.byte	22
 6654 00b1 000000   		.space	3
 6655 00b4 00000000 		.word	0
 6656 00b8 1E       		.byte	30
 6657 00b9 000000   		.space	3
 6658 00bc 00000000 		.word	0
 6659 00c0 19       		.byte	25
 6660 00c1 000000   		.space	3
 6661 00c4 00000000 		.word	0
 6662 00c8 1A       		.byte	26
 6663 00c9 000000   		.space	3
 6664 00cc 00000000 		.word	0
 6665 00d0 1B       		.byte	27
 6666 00d1 000000   		.space	3
 6667 00d4 00000000 		.word	0
 6668 00d8 1C       		.byte	28
 6669 00d9 000000   		.space	3
ARM GAS  /tmp/cc0ERj20.s 			page 161


 6670 00dc 00000000 		.word	0
 6671 00e0 09       		.byte	9
 6672 00e1 000000   		.space	3
 6673 00e4 00000000 		.word	0
 6674 00e8 1F       		.byte	31
 6675 00e9 000000   		.space	3
 6676 00ec 00000000 		.word	0
 6677 00f0 20       		.byte	32
 6678 00f1 000000   		.space	3
 6679 00f4 00000000 		.word	0
 6680 00f8 21       		.byte	33
 6681 00f9 000000   		.space	3
 6682 00fc 00000000 		.word	0
 6683 0100 22       		.byte	34
 6684 0101 000000   		.space	3
 6685 0104 00000000 		.word	0
 6686 0108 24       		.byte	36
 6687 0109 000000   		.space	3
 6688 010c 00000000 		.word	0
 6689 0110 25       		.byte	37
 6690 0111 000000   		.space	3
 6691 0114 00000000 		.word	0
 6692 0118 26       		.byte	38
 6693 0119 000000   		.space	3
 6694 011c 00000000 		.word	0
 6695 0120 27       		.byte	39
 6696 0121 000000   		.space	3
 6697 0124 00000000 		.word	0
 6698 0128 28       		.byte	40
 6699 0129 000000   		.space	3
 6700 012c 00000000 		.word	0
 6701 0130 2E       		.byte	46
 6702 0131 000000   		.space	3
 6703 0134 00000000 		.word	0
 6704 0138 2E       		.byte	46
 6705 0139 000000   		.space	3
 6706 013c 00000000 		.word	0
 6707 0140 2E       		.byte	46
 6708 0141 000000   		.space	3
 6709 0144 00000000 		.word	0
 6710 0148 2E       		.byte	46
 6711 0149 000000   		.space	3
 6712 014c 00000000 		.word	0
 6713 0150 04       		.byte	4
 6714 0151 000000   		.space	3
 6715 0154 00000000 		.word	0
 6716 0158 05       		.byte	5
 6717 0159 000000   		.space	3
 6718 015c 00000000 		.word	0
 6719 0160 2E       		.byte	46
 6720 0161 000000   		.space	3
 6721 0164 00000000 		.word	0
 6722 0168 2E       		.byte	46
 6723 0169 000000   		.space	3
 6724 016c 00000000 		.word	0
 6725 0170 2E       		.byte	46
 6726 0171 000000   		.space	3
ARM GAS  /tmp/cc0ERj20.s 			page 162


 6727 0174 00000000 		.word	0
 6728              		.section	.rodata.mid_menu,"a"
 6729              		.align	2
 6732              	mid_menu:
 6733 0000 C8C40B00 		.ascii	"\310\304\013\000"
 6734              		.text
 6735              	.Letext0:
 6736              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 6737              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 6738              		.file 6 "/usr/include/newlib/sys/_types.h"
 6739              		.file 7 "/usr/include/newlib/sys/reent.h"
 6740              		.file 8 "/usr/include/newlib/sys/lock.h"
 6741              		.file 9 "/usr/include/newlib/stdlib.h"
 6742              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 6743              		.file 11 "/usr/include/newlib/ctype.h"
 6744              		.file 12 "dmcp/ff_ifc.h"
 6745              		.file 13 "dmcp/dmcp.h"
 6746              		.file 14 "src/keys.h"
 6747              		.file 15 "src/decNumber/decContext.h"
 6748              		.file 16 "src/decNumber/decNumber.h"
 6749              		.file 17 "src/decNumber/decimal64.h"
 6750              		.file 18 "src/decNumber/decimal128.h"
 6751              		.file 19 "src/xeq.h"
 6752              		.file 20 "src/data.h"
 6753              		.file 21 "src/display.h"
 6754              		.file 22 "src/consts.h"
 6755              		.file 23 "src/storage.h"
 6756              		.file 24 "src/catalogues.h"
 6757              		.file 25 "src/menu.h"
 6758              		.file 26 "src/lcd.h"
 6759              		.file 27 "/usr/include/newlib/string.h"
 6760              		.file 28 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/cc0ERj20.s 			page 163


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/cc0ERj20.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/cc0ERj20.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/cc0ERj20.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/cc0ERj20.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/cc0ERj20.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/cc0ERj20.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/cc0ERj20.s:433    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/cc0ERj20.s:441    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/cc0ERj20.s:460    .text.disp_about:0000000000000000 $t
     /tmp/cc0ERj20.s:468    .text.disp_about:0000000000000000 disp_about
     /tmp/cc0ERj20.s:621    .text.disp_about:0000000000000080 $d
     /tmp/cc0ERj20.s:639    .text.run_menu_item:0000000000000000 $t
     /tmp/cc0ERj20.s:647    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/cc0ERj20.s:687    .text.set_menu:0000000000000000 $t
     /tmp/cc0ERj20.s:695    .text.set_menu:0000000000000000 set_menu
     /tmp/cc0ERj20.s:750    .text.set_menu:000000000000002c $d
     /tmp/cc0ERj20.s:757    .text.set_default_menu:0000000000000000 $t
     /tmp/cc0ERj20.s:765    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/cc0ERj20.s:830    .text.set_default_menu:0000000000000024 $d
     /tmp/cc0ERj20.s:837    .text.toggle_default_menu:0000000000000000 $t
     /tmp/cc0ERj20.s:845    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/cc0ERj20.s:874    .text.toggle_default_menu:0000000000000018 $d
     /tmp/cc0ERj20.s:880    .text.get_menu:0000000000000000 $t
     /tmp/cc0ERj20.s:888    .text.get_menu:0000000000000000 get_menu
     /tmp/cc0ERj20.s:904    .text.get_menu:0000000000000008 $d
     /tmp/cc0ERj20.s:909    .text.get_last_menu:0000000000000000 $t
     /tmp/cc0ERj20.s:917    .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/cc0ERj20.s:933    .text.get_last_menu:0000000000000008 $d
     /tmp/cc0ERj20.s:938    .text.set_last_menu:0000000000000000 $t
     /tmp/cc0ERj20.s:946    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/cc0ERj20.s:1009   .text.set_last_menu:0000000000000020 $d
     /tmp/cc0ERj20.s:1016   .text.mdot:0000000000000000 $t
     /tmp/cc0ERj20.s:1024   .text.mdot:0000000000000000 mdot
     /tmp/cc0ERj20.s:1115   .text.mdot:000000000000003c $d
     /tmp/cc0ERj20.s:1120   .text.display_menu:0000000000000000 $t
     /tmp/cc0ERj20.s:1128   .text.display_menu:0000000000000000 display_menu
     /tmp/cc0ERj20.s:1417   .text.display_menu:0000000000000150 $d
     /tmp/cc0ERj20.s:1426   .text.display_current_menu:0000000000000000 $t
     /tmp/cc0ERj20.s:1434   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/cc0ERj20.s:1449   .text.display_current_menu:0000000000000008 $d
     /tmp/cc0ERj20.s:1454   .text.all_menu_dots:0000000000000000 $t
     /tmp/cc0ERj20.s:1462   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/cc0ERj20.s:1546   .text.all_menu_dots:0000000000000038 $d
     /tmp/cc0ERj20.s:1551   .text.build_user_menu:0000000000000000 $t
     /tmp/cc0ERj20.s:1559   .text.build_user_menu:0000000000000000 build_user_menu
     /tmp/cc0ERj20.s:1848   .text.build_user_menu:0000000000000124 $d
     /tmp/cc0ERj20.s:1859   .text.shutdown:0000000000000000 $t
     /tmp/cc0ERj20.s:1867   .text.shutdown:0000000000000000 shutdown
     /tmp/cc0ERj20.s:1885   .text.shutdown:000000000000000c $d
     /tmp/cc0ERj20.s:1890   .text.is_key_pressed:0000000000000000 $t
     /tmp/cc0ERj20.s:1898   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/cc0ERj20.s:1921   .text.is_key_pressed:0000000000000010 $d
     /tmp/cc0ERj20.s:1926   .text.get_key:0000000000000000 $t
     /tmp/cc0ERj20.s:1934   .text.get_key:0000000000000000 get_key
     /tmp/cc0ERj20.s:1949   .text.get_key:0000000000000004 $d
ARM GAS  /tmp/cc0ERj20.s 			page 164


     /tmp/cc0ERj20.s:1954   .text.put_key:0000000000000000 $t
     /tmp/cc0ERj20.s:1962   .text.put_key:0000000000000000 put_key
     /tmp/cc0ERj20.s:2041   .text.put_key:000000000000003c $d
     /tmp/cc0ERj20.s:2047   .text.shift_down:0000000000000000 $t
     /tmp/cc0ERj20.s:2055   .text.shift_down:0000000000000000 shift_down
     /tmp/cc0ERj20.s:2070   .text.start_key_timer:0000000000000000 $t
     /tmp/cc0ERj20.s:2078   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/cc0ERj20.s:2102   .text.start_key_timer:000000000000000c $d
     /tmp/cc0ERj20.s:2108   .text.keyticks:0000000000000000 $t
     /tmp/cc0ERj20.s:2116   .text.keyticks:0000000000000000 keyticks
     /tmp/cc0ERj20.s:2147   .text.keyticks:0000000000000018 $d
     /tmp/cc0ERj20.s:2153   .text.moveto:0000000000000000 $t
     /tmp/cc0ERj20.s:2161   .text.moveto:0000000000000000 moveto
     /tmp/cc0ERj20.s:2221   .text.moveto:000000000000002c $d
     /tmp/cc0ERj20.s:2228   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/cc0ERj20.s:2232   .text.print_debug:0000000000000000 $t
     /tmp/cc0ERj20.s:2240   .text.print_debug:0000000000000000 print_debug
     /tmp/cc0ERj20.s:2342   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/cc0ERj20.s:2353   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/cc0ERj20.s:2357   .text.print_debug2:0000000000000000 $t
     /tmp/cc0ERj20.s:2365   .text.print_debug2:0000000000000000 print_debug2
     /tmp/cc0ERj20.s:2467   .text.print_debug2:0000000000000064 $d
     /tmp/cc0ERj20.s:2478   .text.do_now:0000000000000000 $t
     /tmp/cc0ERj20.s:2486   .text.do_now:0000000000000000 do_now
     /tmp/cc0ERj20.s:2521   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/cc0ERj20.s:2525   .text.do_multi:0000000000000000 $t
     /tmp/cc0ERj20.s:2533   .text.do_multi:0000000000000000 do_multi
     /tmp/cc0ERj20.s:2564   .text.do_multi:000000000000001a $d
     /tmp/cc0ERj20.s:3086   .text.do_multi:0000000000000200 $d
     /tmp/cc0ERj20.s:3101   .text.program_main:0000000000000000 $t
     /tmp/cc0ERj20.s:3109   .text.program_main:0000000000000000 program_main
     /tmp/cc0ERj20.s:3409   .text.program_main:0000000000000112 $d
     /tmp/cc0ERj20.s:3415   .text.program_main:000000000000011e $t
     /tmp/cc0ERj20.s:3422   .text.program_main:0000000000000128 $d
     /tmp/cc0ERj20.s:3429   .text.program_main:0000000000000134 $t
     /tmp/cc0ERj20.s:3828   .text.program_main:00000000000002b0 $d
     /tmp/cc0ERj20.s:3868   .text.program_main:0000000000000340 $t
     /tmp/cc0ERj20.s:4471   .text.program_main:0000000000000664 $d
     /tmp/cc0ERj20.s:4491   .text.program_main:00000000000006a8 $t
     /tmp/cc0ERj20.s:4617   .text.program_main:0000000000000754 $d
     /tmp/cc0ERj20.s:4692   .bss.n_p:0000000000000000 n_p
     /tmp/cc0ERj20.s:4843   .data.spaces:0000000000000000 spaces
     /tmp/cc0ERj20.s:4834   .data.release:0000000000000000 release
     /tmp/cc0ERj20.s:4807   .data.h_shift:0000000000000000 h_shift
     /tmp/cc0ERj20.s:4798   .data.g_shift:0000000000000000 g_shift
     /tmp/cc0ERj20.s:4789   .data.f_shift:0000000000000000 f_shift
     /tmp/cc0ERj20.s:4816   .data.heartbeat:0000000000000000 heartbeat
     /tmp/cc0ERj20.s:4825   .data.no_key:0000000000000000 no_key
     /tmp/cc0ERj20.s:4850   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/cc0ERj20.s:4640   .rodata.str1.4:0000000000000000 $d
     /tmp/cc0ERj20.s:6732   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/cc0ERj20.s:4782   .data.cmplx_key_string:0000000000000000 cmplx_key_string
     /tmp/cc0ERj20.s:4775   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/cc0ERj20.s:4706   .data.UserMenu:0000000000000000 UserMenu
     /tmp/cc0ERj20.s:4654   .rodata:0000000000000000 $d
     /tmp/cc0ERj20.s:4661   .bss.current_menu:0000000000000000 $d
ARM GAS  /tmp/cc0ERj20.s 			page 165


     /tmp/cc0ERj20.s:4665   .bss.current_menu:0000000000000000 current_menu
     /tmp/cc0ERj20.s:4668   .bss.default_menu:0000000000000000 $d
     /tmp/cc0ERj20.s:4672   .bss.default_menu:0000000000000000 default_menu
     /tmp/cc0ERj20.s:4675   .bss.last_menu:0000000000000000 $d
     /tmp/cc0ERj20.s:4679   .bss.last_menu:0000000000000000 last_menu
     /tmp/cc0ERj20.s:4682   .bss.mdots:0000000000000000 $d
     /tmp/cc0ERj20.s:4686   .bss.mdots:0000000000000000 mdots
     /tmp/cc0ERj20.s:4689   .bss.n_p:0000000000000000 $d
     /tmp/cc0ERj20.s:4695   .bss.start_ticks:0000000000000000 $d
     /tmp/cc0ERj20.s:4699   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/cc0ERj20.s:4702   .data.UserMenu:0000000000000000 $d
     /tmp/cc0ERj20.s:4771   .data.arrow_key_string:0000000000000000 $d
     /tmp/cc0ERj20.s:4778   .data.cmplx_key_string:0000000000000000 $d
     /tmp/cc0ERj20.s:4785   .data.f_shift:0000000000000000 $d
     /tmp/cc0ERj20.s:4794   .data.g_shift:0000000000000000 $d
     /tmp/cc0ERj20.s:4803   .data.h_shift:0000000000000000 $d
     /tmp/cc0ERj20.s:4812   .data.heartbeat:0000000000000000 $d
     /tmp/cc0ERj20.s:4821   .data.no_key:0000000000000000 $d
     /tmp/cc0ERj20.s:4830   .data.release:0000000000000000 $d
     /tmp/cc0ERj20.s:4839   .data.spaces:0000000000000000 $d
     /tmp/cc0ERj20.s:4846   .rodata.MID_MENU:0000000000000000 $d
     /tmp/cc0ERj20.s:4856   .rodata.Menus:0000000000000000 $d
     /tmp/cc0ERj20.s:4860   .rodata.Menus:0000000000000000 Menus
     /tmp/cc0ERj20.s:5994   .rodata.mapping_alpha.11014:0000000000000000 $d
     /tmp/cc0ERj20.s:5998   .rodata.mapping_alpha.11014:0000000000000000 mapping_alpha.11014
     /tmp/cc0ERj20.s:6141   .rodata.mapping_fshift.11012:0000000000000000 $d
     /tmp/cc0ERj20.s:6145   .rodata.mapping_fshift.11012:0000000000000000 mapping_fshift.11012
     /tmp/cc0ERj20.s:6288   .rodata.mapping_gshift.11013:0000000000000000 $d
     /tmp/cc0ERj20.s:6292   .rodata.mapping_gshift.11013:0000000000000000 mapping_gshift.11013
     /tmp/cc0ERj20.s:6435   .rodata.mapping_none.11011:0000000000000000 $d
     /tmp/cc0ERj20.s:6439   .rodata.mapping_none.11011:0000000000000000 mapping_none.11011
     /tmp/cc0ERj20.s:6582   .rodata.mapping_running.11015:0000000000000000 $d
     /tmp/cc0ERj20.s:6586   .rodata.mapping_running.11015:0000000000000000 mapping_running.11015
     /tmp/cc0ERj20.s:6729   .rodata.mid_menu:0000000000000000 $d
     /tmp/cc0ERj20.s:2579   .text.do_multi:0000000000000029 $d
     /tmp/cc0ERj20.s:2579   .text.do_multi:000000000000002a $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
pixel_length
findmultilbl
do_inc
getprog
catcmd
strncpy
strcpy
sprintf
process_keycode_with_shift
reset_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
ARM GAS  /tmp/cc0ERj20.s 			page 166


save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
main_ram
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
JustDisplayed
Pause
Running
get_alpha_state

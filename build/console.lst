ARM GAS  /tmp/cc1cke1v.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC1:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** /* 
   4:src/menu.c    ****  * System menu stuff
   5:src/menu.c    ****  */
   6:src/menu.c    **** 
   7:src/menu.c    **** #define MI_ABOUT_PGM 11
   8:src/menu.c    **** 
   9:src/menu.c    **** const uint8_t mid_menu[] = {
  10:src/menu.c    ****     MI_SYSTEM_ENTER,
  11:src/menu.c    ****     MI_MSC,
  12:src/menu.c    ****     MI_ABOUT_PGM,
  13:src/menu.c    ****     0 }; // Terminator
  14:src/menu.c    **** 
  15:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  16:src/menu.c    **** 
  17:src/menu.c    **** void disp_about(void);
  18:src/menu.c    **** 
  19:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  20:src/menu.c    ****   int ret = 0;
  21:src/menu.c    **** 
  22:src/menu.c    ****   switch(line_id) {
  23:src/menu.c    ****     case MI_ABOUT_PGM:
ARM GAS  /tmp/cc1cke1v.s 			page 2


  24:src/menu.c    ****       disp_about();
  25:src/menu.c    ****       break;
  26:src/menu.c    **** 
  27:src/menu.c    ****      default:
  28:src/menu.c    ****       ret = MRET_UNIMPL;
  29:src/menu.c    ****       break;
  30:src/menu.c    ****   }
  31:src/menu.c    **** 
  32:src/menu.c    ****   return ret;
  33:src/menu.c    **** }
  34:src/menu.c    **** 
  35:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 35 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  36:src/menu.c    ****   const char * ln;
  40              		.loc 1 36 3 view .LVU1
  37:src/menu.c    **** 
  38:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 38 3 view .LVU2
  39:src/menu.c    **** 
  40:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  41:src/menu.c    **** 
  42:src/menu.c    ****   default:
  43:src/menu.c    ****     ln = NULL;
  42              		.loc 1 43 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  38:src/menu.c    **** 
  44              		.loc 1 38 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
  44:src/menu.c    ****     break;
  45:src/menu.c    ****   }
  46:src/menu.c    **** 
  47:src/menu.c    ****   return ln;
  48:src/menu.c    **** }
  46              		.loc 1 48 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 48 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC1
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc1cke1v.s 			page 3


  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB33:
  49:src/menu.c    **** 
  50:src/menu.c    **** void disp_about() {
  51:src/menu.c    ****   lcd_clear_buf();
  52:src/menu.c    ****   lcd_writeClr(t24);
  53:src/menu.c    **** 
  54:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  55:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
  56:src/menu.c    ****   t24->y += 5;
  57:src/menu.c    **** #ifdef TOP_ROW
  58:src/menu.c    ****   lcd_print(t24, "top row version,");
  59:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
  60:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  61:src/menu.c    ****   lcd_print(t24, "with a longer alpha display,");
  62:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  63:src/menu.c    ****   #else
  64:src/menu.c    ****   lcd_print(t24, "Just like the original calculator");
  65:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed,");
  66:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  67:src/menu.c    **** #endif
  68:src/menu.c    ****   t24->y += 5;
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
  71:src/menu.c    **** 
  72:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
  73:src/menu.c    ****   t24->x = 20;
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
  75:src/menu.c    **** 
  76:src/menu.c    ****   lcd_refresh();
  77:src/menu.c    **** 
  78:src/menu.c    ****   wait_for_key_press();
  79:src/menu.c    **** }
  80:src/menu.c    **** 
  81:src/menu.c    **** /*
  82:src/menu.c    ****  * WP34s menu code
  83:src/menu.c    ****  */
  84:src/menu.c    **** 
  85:src/menu.c    **** void set_menu ( int new_menu ) {
  86:src/menu.c    ****   int m = current_menu;
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
  88:src/menu.c    ****     current_menu = default_menu;
  89:src/menu.c    ****   }
  90:src/menu.c    ****   else if (new_menu == -1) { // go to last menu
  91:src/menu.c    ****     current_menu = last_menu;
  92:src/menu.c    ****   }
  93:src/menu.c    ****   else {
  94:src/menu.c    ****     current_menu = new_menu; // change to new menu
  95:src/menu.c    ****   }
  96:src/menu.c    ****   if ( (m != 9) && (m != 16) ) last_menu = m; // store menu as last menu unless arrow or alpha
  97:src/menu.c    **** }
  98:src/menu.c    **** 
  99:src/menu.c    **** void set_default_menu () {
 100:src/menu.c    ****   set_menu (default_menu);
 101:src/menu.c    **** }
 102:src/menu.c    **** 
ARM GAS  /tmp/cc1cke1v.s 			page 4


 103:src/menu.c    **** void toggle_default_menu () {
 104:src/menu.c    ****   if (current_menu == default_menu) {
 105:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 106:src/menu.c    ****   }
 107:src/menu.c    **** }
 108:src/menu.c    **** 
 109:src/menu.c    **** int get_menu () {
 110:src/menu.c    ****   return current_menu;
 111:src/menu.c    **** }
 112:src/menu.c    **** 
 113:src/menu.c    **** int get_last_menu () {
 114:src/menu.c    ****   return last_menu;
 115:src/menu.c    **** }
 116:src/menu.c    **** 
 117:src/menu.c    **** void display_current_menu () {
 118:src/menu.c    ****   display_menu (current_menu);
 119:src/menu.c    **** }
 120:src/menu.c    **** 
 121:src/menu.c    **** void set_last_menu () {
 122:src/menu.c    ****   set_menu (last_menu);
 123:src/menu.c    **** }
 124:src/menu.c    **** 
 125:src/menu.c    **** static unsigned char mdots[200][2];
 126:src/menu.c    **** 
 127:src/menu.c    **** static const struct _menu Menus[] = {
 128:src/menu.c    ****   {
 129:src/menu.c    ****     "Blank", // 0
 130:src/menu.c    ****     { 
 131:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 132:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 133:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 134:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 135:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 136:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 137:src/menu.c    ****     }    
 138:src/menu.c    ****   },
 139:src/menu.c    ****   {
 140:src/menu.c    ****     "Clear", // 1
 141:src/menu.c    ****     { 
 142:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 143:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 144:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 145:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 146:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 147:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 148:src/menu.c    ****     }    
 149:src/menu.c    ****   },
 150:src/menu.c    ****   {
 151:src/menu.c    ****     "DISP", // 2
 152:src/menu.c    ****     { 
 153:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 154:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 155:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 156:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 157:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 158:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 159:src/menu.c    ****     }
ARM GAS  /tmp/cc1cke1v.s 			page 5


 160:src/menu.c    ****   },
 161:src/menu.c    ****   {
 162:src/menu.c    ****     "BASE", // 3
 163:src/menu.c    ****     { 
 164:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 165:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 166:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 167:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 168:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 169:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 170:src/menu.c    ****     }
 171:src/menu.c    ****   },
 172:src/menu.c    ****   {
 173:src/menu.c    ****     "ANGLES", // 4
 174:src/menu.c    ****     { 
 175:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 176:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 177:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 178:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 179:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 180:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 181:src/menu.c    ****     }
 182:src/menu.c    ****       
 183:src/menu.c    ****   },
 184:src/menu.c    ****   {
 185:src/menu.c    ****     "MISC", // 5
 186:src/menu.c    ****     { 
 187:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 188:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 189:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 190:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 191:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 192:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 193:src/menu.c    ****     }
 194:src/menu.c    ****   },
 195:src/menu.c    ****   {
 196:src/menu.c    ****     "X<>Y Key", // 6
 197:src/menu.c    ****     { 
 198:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 199:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 200:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 201:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 202:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 203:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 204:src/menu.c    ****     }    
 205:src/menu.c    ****   },
 206:src/menu.c    ****   {
 207:src/menu.c    ****     "Program", // 7
 208:src/menu.c    ****     { 
 209:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 210:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 211:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 212:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 213:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 214:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 215:src/menu.c    ****     }
 216:src/menu.c    ****   },
ARM GAS  /tmp/cc1cke1v.s 			page 6


 217:src/menu.c    ****   {
 218:src/menu.c    ****     "Setup 1", // 8
 219:src/menu.c    ****     { 
 220:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 221:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 222:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 223:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 224:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 225:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 226:src/menu.c    ****     }
 227:src/menu.c    ****   },
 228:src/menu.c    ****   {
 229:src/menu.c    ****     "Arrow", // 9
 230:src/menu.c    ****     { 
 231:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 232:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 233:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 234:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "\015HMS" },
 235:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 236:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 237:src/menu.c    ****     }
 238:src/menu.c    ****   },
 239:src/menu.c    ****   {
 240:src/menu.c    ****     "Flags", // 10
 241:src/menu.c    ****     { 
 242:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
 243:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 244:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 245:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 246:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 247:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 248:src/menu.c    ****     }
 249:src/menu.c    ****   },
 250:src/menu.c    ****   {
 251:src/menu.c    ****     "Probability", // 11
 252:src/menu.c    ****     { 
 253:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 254:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 255:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 256:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 257:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 258:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 259:src/menu.c    ****     }
 260:src/menu.c    ****   },
 261:src/menu.c    ****   {
 262:src/menu.c    ****     "Statistics", // 12
 263:src/menu.c    ****     /*
 264:src/menu.c    ****      *xbar, sd;
 265:src/menu.c    ****      *yhat, xhat;
 266:src/menu.c    ****      *corr, L.R.;
 267:src/menu.c    ****      *best, linear;
 268:src/menu.c    ****      *ln, exp;
 269:src/menu.c    ****      *cmplx, power;
 270:src/menu.c    ****      *No, sums is already on g9.
 271:src/menu.c    ****      */
 272:src/menu.c    ****     { 
 273:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
ARM GAS  /tmp/cc1cke1v.s 			page 7


 274:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 275:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 276:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 277:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 278:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 279:src/menu.c    ****     }
 280:src/menu.c    ****   },
 281:src/menu.c    ****   {
 282:src/menu.c    ****     "Setup 2", // 13
 283:src/menu.c    ****     { 
 284:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 285:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 286:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 287:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 288:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 289:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 290:src/menu.c    ****     }
 291:src/menu.c    ****   },
 292:src/menu.c    ****   {
 293:src/menu.c    ****     "Integ/Sum/Prod", // 14
 294:src/menu.c    ****     { 
 295:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 296:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 297:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 298:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 299:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 300:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 301:src/menu.c    ****     }
 302:src/menu.c    ****   },
 303:src/menu.c    ****   {
 304:src/menu.c    ****     "Blank with A-D", // 15
 305:src/menu.c    ****     { 
 306:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 307:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 308:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 309:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 310:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 311:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 312:src/menu.c    ****     }    
 313:src/menu.c    ****   },
 314:src/menu.c    ****   {
 315:src/menu.c    ****     "Alpha", // 16
 316:src/menu.c    ****     { 
 317:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 318:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 319:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 320:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 321:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 322:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 323:src/menu.c    ****     }    
 324:src/menu.c    ****   },
 325:src/menu.c    ****   {
 326:src/menu.c    ****     "C_LOCK", // 17
 327:src/menu.c    ****     { 
 328:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 329:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 330:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "CHS\006y", "CHS\006x" },
ARM GAS  /tmp/cc1cke1v.s 			page 8


 331:src/menu.c    ****       { { K21, 1 }, { K00, 1 }, "x\027y", "HYP" },
 332:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 333:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 334:src/menu.c    ****     }    
 335:src/menu.c    ****   },
 336:src/menu.c    **** };  
 337:src/menu.c    **** 
 338:src/menu.c    **** /* This code is the set_status_sized code with small changes
 339:src/menu.c    ****  * and non-DM42 code removed.
 340:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 341:src/menu.c    ****  */
 342:src/menu.c    **** #define MENU_WIDTH 32
 343:src/menu.c    **** 
 344:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 344 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 345:src/menu.c    ****   // dotcol is the number of the starting dot column
 346:src/menu.c    ****   // shifted is 1 if shifted
 347:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 347 3 view .LVU8
 348:src/menu.c    **** 
 349:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 350:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 350 3 view .LVU9
 351:src/menu.c    **** 
 352:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 352 3 view .LVU10
 344:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 344 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 344:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 344 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 353:src/menu.c    ****   int i, j, xmax;
 354:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 354 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
  96 000e B4BF     		ite	lt
  97 0010 01F11F03 		addlt	r3, r1, #31
  98 0014 0B46     		movge	r3, r1
 355:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 356:src/menu.c    **** 
 357:src/menu.c    ****   forceDispPlot=0;
ARM GAS  /tmp/cc1cke1v.s 			page 9


  99              		.loc 1 357 16 view .LVU14
 100 0016 4848     		ldr	r0, .L41
 101              	.LVL3:
 344:src/menu.c    ****   // dotcol is the number of the starting dot column
 102              		.loc 1 344 13 view .LVU15
 103 0018 0F46     		mov	r7, r1
 104              	.LVL4:
 353:src/menu.c    ****   int i, j, xmax;
 105              		.loc 1 353 3 is_stmt 1 view .LVU16
 354:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 106              		.loc 1 354 3 view .LVU17
 358:src/menu.c    **** 
 359:src/menu.c    **** #ifdef RP_PREFIX
 360:src/menu.c    ****   RectPolConv = 0;
 107              		.loc 1 360 15 is_stmt 0 view .LVU18
 108 001a 4849     		ldr	r1, .L41+4
 109              	.LVL5:
 357:src/menu.c    **** 
 110              		.loc 1 357 16 view .LVU19
 111 001c 0022     		movs	r2, #0
 112              	.LVL6:
 357:src/menu.c    **** 
 113              		.loc 1 357 16 view .LVU20
 114 001e 0270     		strb	r2, [r0]
 115              		.loc 1 360 15 view .LVU21
 116 0020 0A60     		str	r2, [r1]
 361:src/menu.c    **** #endif
 362:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 117              		.loc 1 362 10 view .LVU22
 118 0022 019A     		ldr	r2, [sp, #4]
 119 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 354:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 120              		.loc 1 354 30 view .LVU23
 121 0026 23F01F03 		bic	r3, r3, #31
 354:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 122              		.loc 1 354 8 view .LVU24
 123 002a 03F12009 		add	r9, r3, #32
 124              	.LVL7:
 355:src/menu.c    **** 
 125              		.loc 1 355 3 is_stmt 1 view .LVU25
 357:src/menu.c    **** 
 126              		.loc 1 357 3 view .LVU26
 360:src/menu.c    **** #endif
 127              		.loc 1 360 3 view .LVU27
 128              		.loc 1 362 3 view .LVU28
 129              		.loc 1 362 9 view .LVU29
 130 002e 002D     		cmp	r5, #0
 131 0030 78D0     		beq	.L7
 132              		.loc 1 362 23 is_stmt 0 view .LVU30
 133 0032 4F45     		cmp	r7, r9
 134 0034 76DC     		bgt	.L7
 135              	.LBB47:
 363:src/menu.c    ****     int c;
 364:src/menu.c    ****     int width;
 365:src/menu.c    ****     unsigned char cmap[6];
 366:src/menu.c    **** 
 367:src/menu.c    ****     int real_width;
ARM GAS  /tmp/cc1cke1v.s 			page 10


 368:src/menu.c    ****     int current_smallp;
 369:src/menu.c    **** 
 370:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 371:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 372:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 373:src/menu.c    ****     //           01 -> (not used)
 374:src/menu.c    ****     //           10 -> use big font
 375:src/menu.c    ****     //           11 -> use small font
 376:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 377:src/menu.c    ****     if (str[0] == '\007') {
 136              		.loc 1 377 8 view .LVU31
 137 0036 072D     		cmp	r5, #7
 138              	.LBE47:
 350:src/menu.c    **** 
 139              		.loc 1 350 7 view .LVU32
 140 0038 4FF0FF04 		mov	r4, #255
 141              	.LVL8:
 142              	.LBB64:
 363:src/menu.c    ****     int c;
 143              		.loc 1 363 5 is_stmt 1 view .LVU33
 364:src/menu.c    ****     unsigned char cmap[6];
 144              		.loc 1 364 5 view .LVU34
 365:src/menu.c    **** 
 145              		.loc 1 365 5 view .LVU35
 367:src/menu.c    ****     int current_smallp;
 146              		.loc 1 367 5 view .LVU36
 368:src/menu.c    **** 
 147              		.loc 1 368 5 view .LVU37
 148              		.loc 1 377 5 view .LVU38
 378:src/menu.c    ****       width = str[1] & 0x1F;
 379:src/menu.c    ****       switch (str[1] & 0x60) {
 380:src/menu.c    ****       default:
 381:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 382:src/menu.c    **** 	break;
 383:src/menu.c    ****       case 0x40:	current_smallp = 0;
 384:src/menu.c    **** 	break;
 385:src/menu.c    ****       case 0x60:	current_smallp = 1;
 149              		.loc 1 385 33 is_stmt 0 view .LVU39
 150 003c 4FF0010A 		mov	r10, #1
 377:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 377 8 view .LVU40
 152 0040 64D1     		bne	.L11
 153              	.LVL9:
 154              	.L39:
 378:src/menu.c    ****       width = str[1] & 0x1F;
 155              		.loc 1 378 7 is_stmt 1 view .LVU41
 378:src/menu.c    ****       width = str[1] & 0x1F;
 156              		.loc 1 378 18 is_stmt 0 view .LVU42
 157 0042 019B     		ldr	r3, [sp, #4]
 158 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 159 0046 06F06003 		and	r3, r6, #96
 379:src/menu.c    ****       default:
 160              		.loc 1 379 7 view .LVU43
 161 004a 402B     		cmp	r3, #64
 378:src/menu.c    ****       width = str[1] & 0x1F;
 162              		.loc 1 378 13 view .LVU44
 163 004c 06F01F06 		and	r6, r6, #31
ARM GAS  /tmp/cc1cke1v.s 			page 11


 164              	.LVL10:
 379:src/menu.c    ****       default:
 165              		.loc 1 379 7 is_stmt 1 view .LVU45
 166 0050 6CD0     		beq	.L34
 167 0052 602B     		cmp	r3, #96
 168 0054 6AD1     		bne	.L34
 169              		.loc 1 385 18 view .LVU46
 170              	.LVL11:
 386:src/menu.c    **** 	break;
 171              		.loc 1 386 2 view .LVU47
 387:src/menu.c    ****       }
 388:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 172              		.loc 1 388 7 view .LVU48
 173              		.loc 1 388 11 is_stmt 0 view .LVU49
 174 0056 019B     		ldr	r3, [sp, #4]
 175 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 385:src/menu.c    **** 	break;
 176              		.loc 1 385 33 view .LVU50
 177 005a 0123     		movs	r3, #1
 178 005c 0093     		str	r3, [sp]
 179 005e 00F58075 		add	r5, r0, #256
 180              	.LVL12:
 181              	.L15:
 389:src/menu.c    ****       str += 3;
 182              		.loc 1 389 7 is_stmt 1 view .LVU51
 390:src/menu.c    **** 
 391:src/menu.c    ****       real_width = charlengths(c);
 183              		.loc 1 391 20 is_stmt 0 view .LVU52
 184 0062 2846     		mov	r0, r5
 185 0064 FFF7FEFF 		bl	charlengths
 186              	.LVL13:
 389:src/menu.c    ****       str += 3;
 187              		.loc 1 389 11 view .LVU53
 188 0068 019B     		ldr	r3, [sp, #4]
 189 006a 0333     		adds	r3, r3, #3
 190 006c 0193     		str	r3, [sp, #4]
 191              	.LVL14:
 192              		.loc 1 391 7 is_stmt 1 view .LVU54
 392:src/menu.c    ****     } else {
 393:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 394:src/menu.c    ****       real_width = width = charlengths(c);
 395:src/menu.c    ****       current_smallp = smallp;
 396:src/menu.c    ****     }
 397:src/menu.c    **** 
 398:src/menu.c    ****     if (x + real_width > xmax)
 193              		.loc 1 398 5 view .LVU55
 194              		.loc 1 398 11 is_stmt 0 view .LVU56
 195 006e C319     		adds	r3, r0, r7
 196              	.LVL15:
 197              		.loc 1 398 8 view .LVU57
 198 0070 9945     		cmp	r9, r3
 199 0072 57DB     		blt	.L7
 200              	.L40:
 399:src/menu.c    ****       break;
 400:src/menu.c    **** 
 401:src/menu.c    ****     if (posns_state != current_smallp) {
 201              		.loc 1 401 5 is_stmt 1 view .LVU58
ARM GAS  /tmp/cc1cke1v.s 			page 12


 202              		.loc 1 401 8 is_stmt 0 view .LVU59
 203 0074 009B     		ldr	r3, [sp]
 204 0076 A342     		cmp	r3, r4
 402:src/menu.c    ****       findlengths(posns, current_smallp);
 205              		.loc 1 402 7 view .LVU60
 206 0078 07AB     		add	r3, sp, #28
 401:src/menu.c    ****       findlengths(posns, current_smallp);
 207              		.loc 1 401 8 view .LVU61
 208 007a 05D0     		beq	.L18
 209              		.loc 1 402 7 is_stmt 1 view .LVU62
 210 007c 1846     		mov	r0, r3
 211              	.LVL16:
 212              		.loc 1 402 7 is_stmt 0 view .LVU63
 213 007e 0099     		ldr	r1, [sp]
 214 0080 0393     		str	r3, [sp, #12]
 215 0082 FFF7FEFF 		bl	findlengths
 216              	.LVL17:
 217 0086 039B     		ldr	r3, [sp, #12]
 403:src/menu.c    ****       posns_state = current_smallp;
 218              		.loc 1 403 7 is_stmt 1 view .LVU64
 219              	.LVL18:
 220              	.L18:
 404:src/menu.c    ****     }
 405:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 221              		.loc 1 405 5 view .LVU65
 222 0088 009A     		ldr	r2, [sp]
 223 008a 2846     		mov	r0, r5
 224 008c 05A9     		add	r1, sp, #20
 225 008e FFF7FEFF 		bl	unpackchar
 226              	.LVL19:
 406:src/menu.c    **** 
 407:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 227              		.loc 1 407 5 view .LVU66
 228              		.loc 1 407 15 view .LVU67
 229 0092 029B     		ldr	r3, [sp, #8]
 230 0094 03EB4704 		add	r4, r3, r7, lsl #1
 231 0098 294B     		ldr	r3, .L41+8
 232 009a 0DF1140B 		add	fp, sp, #20
 233 009e 1C44     		add	r4, r4, r3
 405:src/menu.c    **** 
 234              		.loc 1 405 5 is_stmt 0 view .LVU68
 235 00a0 4FF0050E 		mov	lr, #5
 236 00a4 A9EB0705 		sub	r5, r9, r7
 237              	.LVL20:
 238              	.L19:
 408:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 239              		.loc 1 408 17 is_stmt 1 view .LVU69
 240              		.loc 1 408 7 is_stmt 0 view .LVU70
 241 00a8 002E     		cmp	r6, #0
 242 00aa 1FDD     		ble	.L25
 409:src/menu.c    **** 	if (x+j >= xmax)
 243              		.loc 1 409 2 is_stmt 1 view .LVU71
 244              		.loc 1 409 5 is_stmt 0 view .LVU72
 245 00ac B945     		cmp	r9, r7
 246 00ae 1DDD     		ble	.L25
 247              	.LBB48:
 248              	.LBB49:
ARM GAS  /tmp/cc1cke1v.s 			page 13


 249              	.LBB50:
 250              	.LBB51:
 410:src/menu.c    **** 	  break;
 411:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 412:src/menu.c    ****       }
 413:src/menu.c    ****     }
 414:src/menu.c    ****     x += width;
 415:src/menu.c    ****   }
 416:src/menu.c    **** }
 417:src/menu.c    **** 
 418:src/menu.c    **** 
 419:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 420:src/menu.c    **** 
 421:src/menu.c    **** int pixel_length(const char *s, int smallp)
 422:src/menu.c    **** {
 423:src/menu.c    ****   int len = 0;
 424:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 425:src/menu.c    ****   while (*s != '\0') {
 426:src/menu.c    ****     if (s[0] == '\007') {
 427:src/menu.c    ****       len += s[1] & 0x1F;
 428:src/menu.c    ****       s += 3;
 429:src/menu.c    ****       continue;
 430:src/menu.c    ****     }
 431:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 432:src/menu.c    ****   }
 433:src/menu.c    ****   return len;
 434:src/menu.c    **** }
 435:src/menu.c    **** */
 436:src/menu.c    **** 
 437:src/menu.c    **** 
 438:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 439:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 440:src/menu.c    ****   if (on) {
 441:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 442:src/menu.c    ****   }
 443:src/menu.c    ****   else {
 444:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 251              		.loc 1 444 25 view .LVU73
 252 00b0 0AFA0EFC 		lsl	ip, r10, lr
 253              		.loc 1 444 17 view .LVU74
 254 00b4 4FFA8CFC 		sxtb	ip, ip
 255              	.LBE51:
 256              	.LBE50:
 257              	.LBE49:
 258              	.LBE48:
 411:src/menu.c    ****       }
 259              		.loc 1 411 31 view .LVU75
 260 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 261              	.LBB61:
 262              	.LBB58:
 263              	.LBB55:
 264              	.LBB52:
 265              		.loc 1 444 17 view .LVU76
 266 00bc 6FEA0C08 		mvn	r8, ip
 267              	.LBE52:
 268              	.LBE55:
 269              	.LBE58:
ARM GAS  /tmp/cc1cke1v.s 			page 14


 270              	.LBE61:
 408:src/menu.c    **** 	if (x+j >= xmax)
 271              		.loc 1 408 13 view .LVU77
 272 00c0 0023     		movs	r3, #0
 273 00c2 01E0     		b	.L20
 274              	.LVL21:
 275              	.L24:
 409:src/menu.c    **** 	  break;
 276              		.loc 1 409 5 view .LVU78
 277 00c4 9D42     		cmp	r5, r3
 278 00c6 11D0     		beq	.L25
 279              	.LVL22:
 280              	.L20:
 411:src/menu.c    ****       }
 281              		.loc 1 411 2 is_stmt 1 view .LVU79
 282              	.LBB62:
 283              	.LBI48:
 438:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 438 6 view .LVU80
 285              	.LBB59:
 439:src/menu.c    ****   if (on) {
 286              		.loc 1 439 3 view .LVU81
 287              	.LBB56:
 288              	.LBI50:
 438:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 289              		.loc 1 438 6 view .LVU82
 290              	.LBB53:
 440:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 291              		.loc 1 440 3 view .LVU83
 292              	.LBE53:
 293              	.LBE56:
 439:src/menu.c    ****   if (on) {
 294              		.loc 1 439 6 is_stmt 0 view .LVU84
 295 00c8 DA19     		adds	r2, r3, r7
 296              	.LVL23:
 439:src/menu.c    ****   if (on) {
 297              		.loc 1 439 6 view .LVU85
 298 00ca C72A     		cmp	r2, #199
 299              	.LBE59:
 300              	.LBE62:
 411:src/menu.c    ****       }
 301              		.loc 1 411 46 view .LVU86
 302 00cc 40FA03F1 		asr	r1, r0, r3
 303              	.LBB63:
 304              	.LBB60:
 439:src/menu.c    ****   if (on) {
 305              		.loc 1 439 6 view .LVU87
 306 00d0 09D8     		bhi	.L22
 307              	.LBB57:
 308              	.LBB54:
 441:src/menu.c    ****   }
 309              		.loc 1 441 5 is_stmt 1 view .LVU88
 310              		.loc 1 444 5 view .LVU89
 441:src/menu.c    ****   }
 311              		.loc 1 441 17 is_stmt 0 view .LVU90
 312 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 313              	.LVL24:
ARM GAS  /tmp/cc1cke1v.s 			page 15


 440:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 314              		.loc 1 440 6 view .LVU91
 315 00d6 C907     		lsls	r1, r1, #31
 441:src/menu.c    ****   }
 316              		.loc 1 441 17 view .LVU92
 317 00d8 4CBF     		ite	mi
 318 00da 4CEA0202 		orrmi	r2, ip, r2
 319              		.loc 1 444 17 view .LVU93
 320 00de 08EA0202 		andpl	r2, r8, r2
 321 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 322              	.L22:
 323              	.LBE54:
 324              	.LBE57:
 325              	.LBE60:
 326              	.LBE63:
 409:src/menu.c    **** 	  break;
 327              		.loc 1 409 2 is_stmt 1 view .LVU94
 328              	.LVL25:
 408:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 408 26 view .LVU95
 408:src/menu.c    **** 	if (x+j >= xmax)
 330              		.loc 1 408 27 is_stmt 0 view .LVU96
 331 00e6 0133     		adds	r3, r3, #1
 332              	.LVL26:
 408:src/menu.c    **** 	if (x+j >= xmax)
 333              		.loc 1 408 17 is_stmt 1 view .LVU97
 408:src/menu.c    **** 	if (x+j >= xmax)
 334              		.loc 1 408 7 is_stmt 0 view .LVU98
 335 00e8 B342     		cmp	r3, r6
 336 00ea EBD1     		bne	.L24
 337              	.LVL27:
 338              	.L25:
 407:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 339              		.loc 1 407 20 is_stmt 1 view .LVU99
 407:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 340              		.loc 1 407 15 view .LVU100
 341 00ec 0EF1FF3E 		add	lr, lr, #-1
 407:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 342              		.loc 1 407 5 is_stmt 0 view .LVU101
 343 00f0 BEF1FF3F 		cmp	lr, #-1
 344 00f4 0BF1010B 		add	fp, fp, #1
 345              	.LVL28:
 407:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 346              		.loc 1 407 5 view .LVU102
 347 00f8 D6D1     		bne	.L19
 414:src/menu.c    ****   }
 348              		.loc 1 414 5 is_stmt 1 view .LVU103
 349              	.LBE64:
 362:src/menu.c    ****     int c;
 350              		.loc 1 362 10 is_stmt 0 view .LVU104
 351 00fa 019B     		ldr	r3, [sp, #4]
 352 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 353              	.LBB65:
 414:src/menu.c    ****   }
 354              		.loc 1 414 7 view .LVU105
 355 00fe 3744     		add	r7, r7, r6
 356              	.LVL29:
ARM GAS  /tmp/cc1cke1v.s 			page 16


 414:src/menu.c    ****   }
 357              		.loc 1 414 7 view .LVU106
 358              	.LBE65:
 362:src/menu.c    ****     int c;
 359              		.loc 1 362 9 is_stmt 1 view .LVU107
 360 0100 85B1     		cbz	r5, .L7
 362:src/menu.c    ****     int c;
 361              		.loc 1 362 23 is_stmt 0 view .LVU108
 362 0102 B945     		cmp	r9, r7
 363 0104 0EDB     		blt	.L7
 364              	.LBB66:
 377:src/menu.c    ****       width = str[1] & 0x1F;
 365              		.loc 1 377 8 view .LVU109
 366 0106 072D     		cmp	r5, #7
 367              	.LBE66:
 368 0108 009C     		ldr	r4, [sp]
 369              	.LBB67:
 363:src/menu.c    ****     int width;
 370              		.loc 1 363 5 is_stmt 1 view .LVU110
 364:src/menu.c    ****     unsigned char cmap[6];
 371              		.loc 1 364 5 view .LVU111
 365:src/menu.c    **** 
 372              		.loc 1 365 5 view .LVU112
 367:src/menu.c    ****     int current_smallp;
 373              		.loc 1 367 5 view .LVU113
 368:src/menu.c    **** 
 374              		.loc 1 368 5 view .LVU114
 377:src/menu.c    ****       width = str[1] & 0x1F;
 375              		.loc 1 377 5 view .LVU115
 377:src/menu.c    ****       width = str[1] & 0x1F;
 376              		.loc 1 377 8 is_stmt 0 view .LVU116
 377 010a 9AD0     		beq	.L39
 378              	.LVL30:
 379              	.L11:
 393:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 393 7 is_stmt 1 view .LVU117
 394:src/menu.c    ****       current_smallp = smallp;
 381              		.loc 1 394 28 is_stmt 0 view .LVU118
 382 010c 2846     		mov	r0, r5
 383 010e FFF7FEFF 		bl	charlengths
 384              	.LVL31:
 393:src/menu.c    ****       real_width = width = charlengths(c);
 385              		.loc 1 393 31 view .LVU119
 386 0112 019B     		ldr	r3, [sp, #4]
 387 0114 0133     		adds	r3, r3, #1
 388 0116 0193     		str	r3, [sp, #4]
 389              	.LVL32:
 394:src/menu.c    ****       current_smallp = smallp;
 390              		.loc 1 394 7 is_stmt 1 view .LVU120
 395:src/menu.c    ****     }
 391              		.loc 1 395 7 view .LVU121
 395:src/menu.c    ****     }
 392              		.loc 1 395 22 is_stmt 0 view .LVU122
 393 0118 0023     		movs	r3, #0
 394              	.LVL33:
 395:src/menu.c    ****     }
 395              		.loc 1 395 22 view .LVU123
ARM GAS  /tmp/cc1cke1v.s 			page 17


 396 011a 0093     		str	r3, [sp]
 397              	.LVL34:
 398:src/menu.c    ****       break;
 398              		.loc 1 398 11 view .LVU124
 399 011c C319     		adds	r3, r0, r7
 400              	.LVL35:
 398:src/menu.c    ****       break;
 401              		.loc 1 398 8 view .LVU125
 402 011e 9945     		cmp	r9, r3
 394:src/menu.c    ****       current_smallp = smallp;
 403              		.loc 1 394 28 view .LVU126
 404 0120 0646     		mov	r6, r0
 398:src/menu.c    ****       break;
 405              		.loc 1 398 5 is_stmt 1 view .LVU127
 398:src/menu.c    ****       break;
 406              		.loc 1 398 8 is_stmt 0 view .LVU128
 407 0122 A7DA     		bge	.L40
 408              	.LVL36:
 409              	.L7:
 398:src/menu.c    ****       break;
 410              		.loc 1 398 8 view .LVU129
 411              	.LBE67:
 416:src/menu.c    **** 
 412              		.loc 1 416 1 view .LVU130
 413 0124 0DF5097D 		add	sp, sp, #548
 414              		.cfi_remember_state
 415              		.cfi_def_cfa_offset 36
 416              		@ sp needed
 417 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 418              	.LVL37:
 419              	.L34:
 420              		.cfi_restore_state
 421              	.LBB68:
 388:src/menu.c    ****       str += 3;
 422              		.loc 1 388 7 is_stmt 1 view .LVU131
 388:src/menu.c    ****       str += 3;
 423              		.loc 1 388 11 is_stmt 0 view .LVU132
 424 012c 019B     		ldr	r3, [sp, #4]
 425 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 381:src/menu.c    **** 	break;
 426              		.loc 1 381 33 view .LVU133
 427 0130 0023     		movs	r3, #0
 428 0132 0093     		str	r3, [sp]
 429 0134 95E7     		b	.L15
 430              	.L42:
 431 0136 00BF     		.align	2
 432              	.L41:
 433 0138 00000000 		.word	forceDispPlot
 434 013c 00000000 		.word	RectPolConv
 435 0140 00000000 		.word	.LANCHOR0
 436              	.LBE68:
 437              		.cfi_endproc
 438              	.LFE33:
 440              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 441              		.align	2
 442              	.LC2:
 443 0000 57503334 		.ascii	"WP34C calculator for DM42:\000"
ARM GAS  /tmp/cc1cke1v.s 			page 18


 443      43206361 
 443      6C63756C 
 443      61746F72 
 443      20666F72 
 444 001b 00       		.align	2
 445              	.LC3:
 446 001c 746F7020 		.ascii	"top row version,\000"
 446      726F7720 
 446      76657273 
 446      696F6E2C 
 446      00
 447 002d 000000   		.align	2
 448              	.LC4:
 449 0030 696E636C 		.ascii	"including COMPLEX LOCK mode!\000"
 449      7564696E 
 449      6720434F 
 449      4D504C45 
 449      58204C4F 
 450 004d 000000   		.align	2
 451              	.LC5:
 452 0050 54686973 		.ascii	"This software is neither provided\000"
 452      20736F66 
 452      74776172 
 452      65206973 
 452      206E6569 
 453 0072 0000     		.align	2
 454              	.LC6:
 455 0074 6279206E 		.ascii	"by nor supported by SwissMicros.\000"
 455      6F722073 
 455      7570706F 
 455      72746564 
 455      20627920 
 456 0095 000000   		.align	2
 457              	.LC7:
 458 0098 20202020 		.ascii	"    Press EXIT key to continue...\000"
 458      50726573 
 458      73204558 
 458      4954206B 
 458      65792074 
 459              		.section	.text.disp_about,"ax",%progbits
 460              		.align	1
 461              		.p2align 2,,3
 462              		.global	disp_about
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv4-sp-d16
 468              	disp_about:
 469              	.LFB5:
  50:src/menu.c    ****   lcd_clear_buf();
 470              		.loc 1 50 19 is_stmt 1 view -0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
  51:src/menu.c    ****   lcd_writeClr(t24);
 474              		.loc 1 51 3 view .LVU135
  50:src/menu.c    ****   lcd_clear_buf();
ARM GAS  /tmp/cc1cke1v.s 			page 19


 475              		.loc 1 50 19 is_stmt 0 view .LVU136
 476 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 477              		.cfi_def_cfa_offset 24
 478              		.cfi_offset 4, -24
 479              		.cfi_offset 5, -20
 480              		.cfi_offset 6, -16
 481              		.cfi_offset 7, -12
 482              		.cfi_offset 8, -8
 483              		.cfi_offset 14, -4
  52:src/menu.c    **** 
 484              		.loc 1 52 3 view .LVU137
 485 0004 1E4C     		ldr	r4, .L45
  51:src/menu.c    ****   lcd_writeClr(t24);
 486              		.loc 1 51 3 view .LVU138
 487 0006 1F4B     		ldr	r3, .L45+4
  55:src/menu.c    ****   t24->y += 5;
 488              		.loc 1 55 3 view .LVU139
 489 0008 1F4D     		ldr	r5, .L45+8
  51:src/menu.c    ****   lcd_writeClr(t24);
 490              		.loc 1 51 3 view .LVU140
 491 000a 9847     		blx	r3
 492              	.LVL38:
  52:src/menu.c    **** 
 493              		.loc 1 52 3 is_stmt 1 view .LVU141
 494 000c 606B     		ldr	r0, [r4, #52]
 495 000e 1F4B     		ldr	r3, .L45+12
 496 0010 9847     		blx	r3
 497              	.LVL39:
  54:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
 498              		.loc 1 54 3 view .LVU142
 499 0012 0522     		movs	r2, #5
 500 0014 606B     		ldr	r0, [r4, #52]
 501 0016 1E4B     		ldr	r3, .L45+16
 502 0018 0021     		movs	r1, #0
 503 001a 9847     		blx	r3
 504              	.LVL40:
  55:src/menu.c    ****   t24->y += 5;
 505              		.loc 1 55 3 view .LVU143
  55:src/menu.c    ****   t24->y += 5;
 506              		.loc 1 55 3 view .LVU144
 507 001c 606B     		ldr	r0, [r4, #52]
 508 001e 1D49     		ldr	r1, .L45+20
 509 0020 0126     		movs	r6, #1
 510 0022 4674     		strb	r6, [r0, #17]
  55:src/menu.c    ****   t24->y += 5;
 511              		.loc 1 55 3 view .LVU145
 512 0024 A847     		blx	r5
 513              	.LVL41:
  55:src/menu.c    ****   t24->y += 5;
 514              		.loc 1 55 3 view .LVU146
 515 0026 606B     		ldr	r0, [r4, #52]
  58:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 516              		.loc 1 58 3 is_stmt 0 view .LVU147
 517 0028 1B49     		ldr	r1, .L45+24
  56:src/menu.c    **** #ifdef TOP_ROW
 518              		.loc 1 56 10 view .LVU148
 519 002a C388     		ldrh	r3, [r0, #6]
ARM GAS  /tmp/cc1cke1v.s 			page 20


  55:src/menu.c    ****   t24->y += 5;
 520              		.loc 1 55 3 view .LVU149
 521 002c 0027     		movs	r7, #0
  56:src/menu.c    **** #ifdef TOP_ROW
 522              		.loc 1 56 10 view .LVU150
 523 002e 0533     		adds	r3, r3, #5
 524 0030 C380     		strh	r3, [r0, #6]	@ movhi
  55:src/menu.c    ****   t24->y += 5;
 525              		.loc 1 55 3 view .LVU151
 526 0032 4774     		strb	r7, [r0, #17]
  55:src/menu.c    ****   t24->y += 5;
 527              		.loc 1 55 3 is_stmt 1 view .LVU152
  56:src/menu.c    **** #ifdef TOP_ROW
 528              		.loc 1 56 3 view .LVU153
  58:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 529              		.loc 1 58 3 view .LVU154
 530 0034 A847     		blx	r5
 531              	.LVL42:
  59:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 532              		.loc 1 59 3 view .LVU155
 533 0036 606B     		ldr	r0, [r4, #52]
 534 0038 1849     		ldr	r1, .L45+28
 535 003a A847     		blx	r5
 536              	.LVL43:
  68:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 537              		.loc 1 68 3 view .LVU156
 538 003c 606B     		ldr	r0, [r4, #52]
  69:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 539              		.loc 1 69 3 is_stmt 0 view .LVU157
 540 003e 1849     		ldr	r1, .L45+32
  68:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 541              		.loc 1 68 10 view .LVU158
 542 0040 C388     		ldrh	r3, [r0, #6]
  69:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 543              		.loc 1 69 3 view .LVU159
 544 0042 4674     		strb	r6, [r0, #17]
  68:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 545              		.loc 1 68 10 view .LVU160
 546 0044 0533     		adds	r3, r3, #5
 547 0046 C380     		strh	r3, [r0, #6]	@ movhi
  69:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 548              		.loc 1 69 3 is_stmt 1 view .LVU161
  69:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 549              		.loc 1 69 3 view .LVU162
  69:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 550              		.loc 1 69 3 view .LVU163
 551 0048 A847     		blx	r5
 552              	.LVL44:
  69:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 553              		.loc 1 69 3 view .LVU164
 554 004a 606B     		ldr	r0, [r4, #52]
  69:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 555              		.loc 1 69 3 view .LVU165
  70:src/menu.c    **** 
 556              		.loc 1 70 3 view .LVU166
  70:src/menu.c    **** 
 557              		.loc 1 70 3 view .LVU167
ARM GAS  /tmp/cc1cke1v.s 			page 21


 558 004c 1549     		ldr	r1, .L45+36
 559 004e 4674     		strb	r6, [r0, #17]
  70:src/menu.c    **** 
 560              		.loc 1 70 3 view .LVU168
 561 0050 A847     		blx	r5
 562              	.LVL45:
  70:src/menu.c    **** 
 563              		.loc 1 70 3 view .LVU169
 564 0052 606B     		ldr	r0, [r4, #52]
  72:src/menu.c    ****   t24->x = 20;
 565              		.loc 1 72 20 is_stmt 0 view .LVU170
 566 0054 144B     		ldr	r3, .L45+40
  70:src/menu.c    **** 
 567              		.loc 1 70 3 view .LVU171
 568 0056 4774     		strb	r7, [r0, #17]
  70:src/menu.c    **** 
 569              		.loc 1 70 3 is_stmt 1 view .LVU172
  72:src/menu.c    ****   t24->x = 20;
 570              		.loc 1 72 3 view .LVU173
  72:src/menu.c    ****   t24->x = 20;
 571              		.loc 1 72 20 is_stmt 0 view .LVU174
 572 0058 9847     		blx	r3
 573              	.LVL46:
  72:src/menu.c    ****   t24->x = 20;
 574              		.loc 1 72 3 view .LVU175
 575 005a 636B     		ldr	r3, [r4, #52]
  74:src/menu.c    **** 
 576              		.loc 1 74 3 view .LVU176
 577 005c 1349     		ldr	r1, .L45+44
 578 005e 5E74     		strb	r6, [r3, #17]
  73:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 579              		.loc 1 73 10 view .LVU177
 580 0060 1422     		movs	r2, #20
  72:src/menu.c    ****   t24->x = 20;
 581              		.loc 1 72 39 view .LVU178
 582 0062 C0F1EB00 		rsb	r0, r0, #235
  72:src/menu.c    ****   t24->x = 20;
 583              		.loc 1 72 10 view .LVU179
 584 0066 D880     		strh	r0, [r3, #6]	@ movhi
  73:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 585              		.loc 1 73 3 is_stmt 1 view .LVU180
  73:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 586              		.loc 1 73 10 is_stmt 0 view .LVU181
 587 0068 9A80     		strh	r2, [r3, #4]	@ movhi
  74:src/menu.c    **** 
 588              		.loc 1 74 3 is_stmt 1 view .LVU182
  74:src/menu.c    **** 
 589              		.loc 1 74 3 view .LVU183
  74:src/menu.c    **** 
 590              		.loc 1 74 3 view .LVU184
 591 006a 1846     		mov	r0, r3
 592 006c A847     		blx	r5
 593              	.LVL47:
  74:src/menu.c    **** 
 594              		.loc 1 74 3 view .LVU185
 595 006e 626B     		ldr	r2, [r4, #52]
  76:src/menu.c    **** 
ARM GAS  /tmp/cc1cke1v.s 			page 22


 596              		.loc 1 76 3 is_stmt 0 view .LVU186
 597 0070 0F4B     		ldr	r3, .L45+48
  74:src/menu.c    **** 
 598              		.loc 1 74 3 view .LVU187
 599 0072 5774     		strb	r7, [r2, #17]
  74:src/menu.c    **** 
 600              		.loc 1 74 3 is_stmt 1 view .LVU188
  76:src/menu.c    **** 
 601              		.loc 1 76 3 view .LVU189
 602 0074 9847     		blx	r3
 603              	.LVL48:
  78:src/menu.c    **** }
 604              		.loc 1 78 3 view .LVU190
  79:src/menu.c    **** 
 605              		.loc 1 79 1 is_stmt 0 view .LVU191
 606 0076 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 607              		.cfi_restore 14
 608              		.cfi_restore 8
 609              		.cfi_restore 7
 610              		.cfi_restore 6
 611              		.cfi_restore 5
 612              		.cfi_restore 4
 613              		.cfi_def_cfa_offset 0
  78:src/menu.c    **** }
 614              		.loc 1 78 3 view .LVU192
 615 007a 0E4B     		ldr	r3, .L45+52
 616 007c 1847     		bx	r3	@ indirect register sibling call
 617              	.LVL49:
 618              	.L46:
 619 007e 00BF     		.align	2
 620              	.L45:
 621 0080 00200010 		.word	268443648
 622 0084 2D020008 		.word	134218285
 623 0088 B1020008 		.word	134218417
 624 008c 65020008 		.word	134218341
 625 0090 6D020008 		.word	134218349
 626 0094 00000000 		.word	.LC2
 627 0098 1C000000 		.word	.LC3
 628 009c 30000000 		.word	.LC4
 629 00a0 50000000 		.word	.LC5
 630 00a4 74000000 		.word	.LC6
 631 00a8 71020008 		.word	134218353
 632 00ac 98000000 		.word	.LC7
 633 00b0 31020008 		.word	134218289
 634 00b4 99030008 		.word	134218649
 635              		.cfi_endproc
 636              	.LFE5:
 638              		.section	.text.run_menu_item,"ax",%progbits
 639              		.align	1
 640              		.p2align 2,,3
 641              		.global	run_menu_item
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	run_menu_item:
 648              	.LVL50:
ARM GAS  /tmp/cc1cke1v.s 			page 23


 649              	.LFB3:
  19:src/menu.c    ****   int ret = 0;
 650              		.loc 1 19 36 is_stmt 1 view -0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
  20:src/menu.c    **** 
 654              		.loc 1 20 3 view .LVU194
  22:src/menu.c    ****     case MI_ABOUT_PGM:
 655              		.loc 1 22 3 view .LVU195
 656 0000 0B28     		cmp	r0, #11
 657 0002 04D1     		bne	.L49
  24:src/menu.c    ****       break;
 658              		.loc 1 24 7 view .LVU196
  19:src/menu.c    ****   int ret = 0;
 659              		.loc 1 19 36 is_stmt 0 view .LVU197
 660 0004 08B5     		push	{r3, lr}
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 3, -8
 663              		.cfi_offset 14, -4
  24:src/menu.c    ****       break;
 664              		.loc 1 24 7 view .LVU198
 665 0006 FFF7FEFF 		bl	disp_about
 666              	.LVL51:
  25:src/menu.c    **** 
 667              		.loc 1 25 7 is_stmt 1 view .LVU199
  20:src/menu.c    **** 
 668              		.loc 1 20 7 is_stmt 0 view .LVU200
 669 000a 0020     		movs	r0, #0
  33:src/menu.c    **** 
 670              		.loc 1 33 1 view .LVU201
 671 000c 08BD     		pop	{r3, pc}
 672              	.LVL52:
 673              	.L49:
 674              		.cfi_def_cfa_offset 0
 675              		.cfi_restore 3
 676              		.cfi_restore 14
  28:src/menu.c    ****       break;
 677              		.loc 1 28 11 view .LVU202
 678 000e 4FF0FF30 		mov	r0, #-1
 679              	.LVL53:
  32:src/menu.c    **** }
 680              		.loc 1 32 3 is_stmt 1 view .LVU203
  33:src/menu.c    **** 
 681              		.loc 1 33 1 is_stmt 0 view .LVU204
 682 0012 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE3:
 686              		.section	.text.set_menu,"ax",%progbits
 687              		.align	1
 688              		.p2align 2,,3
 689              		.global	set_menu
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu fpv4-sp-d16
 695              	set_menu:
ARM GAS  /tmp/cc1cke1v.s 			page 24


 696              	.LVL54:
 697              	.LFB6:
  85:src/menu.c    ****   int m = current_menu;
 698              		.loc 1 85 32 is_stmt 1 view -0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 703              		.loc 1 86 3 view .LVU206
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 704              		.loc 1 86 7 is_stmt 0 view .LVU207
 705 0000 0A4A     		ldr	r2, .L66
 706 0002 1368     		ldr	r3, [r2]
 707              	.LVL55:
  87:src/menu.c    ****     current_menu = default_menu;
 708              		.loc 1 87 3 is_stmt 1 view .LVU208
  87:src/menu.c    ****     current_menu = default_menu;
 709              		.loc 1 87 6 is_stmt 0 view .LVU209
 710 0004 8342     		cmp	r3, r0
 711 0006 0CD0     		beq	.L65
  90:src/menu.c    ****     current_menu = last_menu;
 712              		.loc 1 90 8 is_stmt 1 view .LVU210
  90:src/menu.c    ****     current_menu = last_menu;
 713              		.loc 1 90 11 is_stmt 0 view .LVU211
 714 0008 411C     		adds	r1, r0, #1
  91:src/menu.c    ****   }
 715              		.loc 1 91 5 is_stmt 1 view .LVU212
  91:src/menu.c    ****   }
 716              		.loc 1 91 18 is_stmt 0 view .LVU213
 717 000a 09BF     		itett	eq
 718 000c 0849     		ldreq	r1, .L66+4
  94:src/menu.c    ****   }
 719              		.loc 1 94 18 view .LVU214
 720 000e 1060     		strne	r0, [r2]
  91:src/menu.c    ****   }
 721              		.loc 1 91 18 view .LVU215
 722 0010 0968     		ldreq	r1, [r1]
 723 0012 1160     		streq	r1, [r2]
  94:src/menu.c    ****   }
 724              		.loc 1 94 5 is_stmt 1 view .LVU216
 725              	.L56:
  96:src/menu.c    **** }
 726              		.loc 1 96 3 view .LVU217
  96:src/menu.c    **** }
 727              		.loc 1 96 6 is_stmt 0 view .LVU218
 728 0014 092B     		cmp	r3, #9
 729 0016 03D0     		beq	.L54
  96:src/menu.c    **** }
 730              		.loc 1 96 17 discriminator 1 view .LVU219
 731 0018 102B     		cmp	r3, #16
  96:src/menu.c    **** }
 732              		.loc 1 96 32 is_stmt 1 discriminator 1 view .LVU220
  96:src/menu.c    **** }
 733              		.loc 1 96 42 is_stmt 0 discriminator 1 view .LVU221
 734 001a 1CBF     		itt	ne
 735 001c 044A     		ldrne	r2, .L66+4
ARM GAS  /tmp/cc1cke1v.s 			page 25


 736 001e 1360     		strne	r3, [r2]
 737              	.L54:
  97:src/menu.c    **** 
 738              		.loc 1 97 1 view .LVU222
 739 0020 7047     		bx	lr
 740              	.L65:
  88:src/menu.c    ****   }
 741              		.loc 1 88 5 is_stmt 1 view .LVU223
  88:src/menu.c    ****   }
 742              		.loc 1 88 18 is_stmt 0 view .LVU224
 743 0022 0449     		ldr	r1, .L66+8
 744 0024 0968     		ldr	r1, [r1]
 745 0026 1160     		str	r1, [r2]
 746 0028 F4E7     		b	.L56
 747              	.L67:
 748 002a 00BF     		.align	2
 749              	.L66:
 750 002c 00000000 		.word	.LANCHOR1
 751 0030 00000000 		.word	.LANCHOR3
 752 0034 00000000 		.word	.LANCHOR2
 753              		.cfi_endproc
 754              	.LFE6:
 756              		.section	.text.set_default_menu,"ax",%progbits
 757              		.align	1
 758              		.p2align 2,,3
 759              		.global	set_default_menu
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 763              		.fpu fpv4-sp-d16
 765              	set_default_menu:
 766              	.LFB7:
  99:src/menu.c    ****   set_menu (default_menu);
 767              		.loc 1 99 26 is_stmt 1 view -0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 100:src/menu.c    **** }
 772              		.loc 1 100 3 view .LVU226
 773 0000 084B     		ldr	r3, .L79
 774              	.LBB69:
 775              	.LBB70:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 776              		.loc 1 86 7 is_stmt 0 view .LVU227
 777 0002 0949     		ldr	r1, .L79+4
 778              	.LBE70:
 779              	.LBE69:
 100:src/menu.c    **** }
 780              		.loc 1 100 3 view .LVU228
 781 0004 1A68     		ldr	r2, [r3]
 782              	.LVL56:
 783              	.LBB72:
 784              	.LBI69:
  85:src/menu.c    ****   int m = current_menu;
 785              		.loc 1 85 6 is_stmt 1 view .LVU229
 786              	.LBB71:
ARM GAS  /tmp/cc1cke1v.s 			page 26


  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 787              		.loc 1 86 3 view .LVU230
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 788              		.loc 1 86 7 is_stmt 0 view .LVU231
 789 0006 0B68     		ldr	r3, [r1]
 790              	.LVL57:
  87:src/menu.c    ****     current_menu = default_menu;
 791              		.loc 1 87 3 is_stmt 1 view .LVU232
  87:src/menu.c    ****     current_menu = default_menu;
 792              		.loc 1 87 6 is_stmt 0 view .LVU233
 793 0008 9A42     		cmp	r2, r3
 794 000a 04D0     		beq	.L70
  90:src/menu.c    ****     current_menu = last_menu;
 795              		.loc 1 90 8 is_stmt 1 view .LVU234
  90:src/menu.c    ****     current_menu = last_menu;
 796              		.loc 1 90 11 is_stmt 0 view .LVU235
 797 000c 501C     		adds	r0, r2, #1
  91:src/menu.c    ****   }
 798              		.loc 1 91 5 is_stmt 1 view .LVU236
  91:src/menu.c    ****   }
 799              		.loc 1 91 18 is_stmt 0 view .LVU237
 800 000e 04BF     		itt	eq
 801 0010 064A     		ldreq	r2, .L79+8
 802              	.LVL58:
  91:src/menu.c    ****   }
 803              		.loc 1 91 18 view .LVU238
 804 0012 1268     		ldreq	r2, [r2]
  94:src/menu.c    ****   }
 805              		.loc 1 94 5 is_stmt 1 view .LVU239
  94:src/menu.c    ****   }
 806              		.loc 1 94 18 is_stmt 0 view .LVU240
 807 0014 0A60     		str	r2, [r1]
 808              	.L70:
  96:src/menu.c    **** }
 809              		.loc 1 96 3 is_stmt 1 view .LVU241
  96:src/menu.c    **** }
 810              		.loc 1 96 6 is_stmt 0 view .LVU242
 811 0016 092B     		cmp	r3, #9
 812 0018 03D0     		beq	.L68
  96:src/menu.c    **** }
 813              		.loc 1 96 17 view .LVU243
 814 001a 102B     		cmp	r3, #16
  96:src/menu.c    **** }
 815              		.loc 1 96 32 is_stmt 1 view .LVU244
  96:src/menu.c    **** }
 816              		.loc 1 96 42 is_stmt 0 view .LVU245
 817 001c 1CBF     		itt	ne
 818 001e 034A     		ldrne	r2, .L79+8
 819 0020 1360     		strne	r3, [r2]
 820              	.LVL59:
 821              	.L68:
  96:src/menu.c    **** }
 822              		.loc 1 96 42 view .LVU246
 823              	.LBE71:
 824              	.LBE72:
 101:src/menu.c    **** 
 825              		.loc 1 101 1 view .LVU247
ARM GAS  /tmp/cc1cke1v.s 			page 27


 826 0022 7047     		bx	lr
 827              	.L80:
 828              		.align	2
 829              	.L79:
 830 0024 00000000 		.word	.LANCHOR2
 831 0028 00000000 		.word	.LANCHOR1
 832 002c 00000000 		.word	.LANCHOR3
 833              		.cfi_endproc
 834              	.LFE7:
 836              		.section	.text.toggle_default_menu,"ax",%progbits
 837              		.align	1
 838              		.p2align 2,,3
 839              		.global	toggle_default_menu
 840              		.syntax unified
 841              		.thumb
 842              		.thumb_func
 843              		.fpu fpv4-sp-d16
 845              	toggle_default_menu:
 846              	.LFB8:
 103:src/menu.c    ****   if (current_menu == default_menu) {
 847              		.loc 1 103 29 is_stmt 1 view -0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 0
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 851              		@ link register save eliminated.
 104:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 852              		.loc 1 104 3 view .LVU249
 104:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 853              		.loc 1 104 20 is_stmt 0 view .LVU250
 854 0000 0549     		ldr	r1, .L83
 855 0002 064A     		ldr	r2, .L83+4
 856 0004 0868     		ldr	r0, [r1]
 104:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 857              		.loc 1 104 6 view .LVU251
 858 0006 1368     		ldr	r3, [r2]
 859 0008 8342     		cmp	r3, r0
 860 000a 03D1     		bne	.L81
 105:src/menu.c    ****   }
 861              		.loc 1 105 5 is_stmt 1 view .LVU252
 105:src/menu.c    ****   }
 862              		.loc 1 105 38 is_stmt 0 view .LVU253
 863 000c C3F10F03 		rsb	r3, r3, #15
 105:src/menu.c    ****   }
 864              		.loc 1 105 33 view .LVU254
 865 0010 0B60     		str	r3, [r1]
 105:src/menu.c    ****   }
 866              		.loc 1 105 18 view .LVU255
 867 0012 1360     		str	r3, [r2]
 868              	.L81:
 107:src/menu.c    **** 
 869              		.loc 1 107 1 view .LVU256
 870 0014 7047     		bx	lr
 871              	.L84:
 872 0016 00BF     		.align	2
 873              	.L83:
 874 0018 00000000 		.word	.LANCHOR2
 875 001c 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/cc1cke1v.s 			page 28


 876              		.cfi_endproc
 877              	.LFE8:
 879              		.section	.text.get_menu,"ax",%progbits
 880              		.align	1
 881              		.p2align 2,,3
 882              		.global	get_menu
 883              		.syntax unified
 884              		.thumb
 885              		.thumb_func
 886              		.fpu fpv4-sp-d16
 888              	get_menu:
 889              	.LFB9:
 109:src/menu.c    ****   return current_menu;
 890              		.loc 1 109 17 is_stmt 1 view -0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 0
 893              		@ frame_needed = 0, uses_anonymous_args = 0
 894              		@ link register save eliminated.
 110:src/menu.c    **** }
 895              		.loc 1 110 3 view .LVU258
 110:src/menu.c    **** }
 896              		.loc 1 110 10 is_stmt 0 view .LVU259
 897 0000 014B     		ldr	r3, .L86
 111:src/menu.c    **** 
 898              		.loc 1 111 1 view .LVU260
 899 0002 1868     		ldr	r0, [r3]
 900 0004 7047     		bx	lr
 901              	.L87:
 902 0006 00BF     		.align	2
 903              	.L86:
 904 0008 00000000 		.word	.LANCHOR1
 905              		.cfi_endproc
 906              	.LFE9:
 908              		.section	.text.get_last_menu,"ax",%progbits
 909              		.align	1
 910              		.p2align 2,,3
 911              		.global	get_last_menu
 912              		.syntax unified
 913              		.thumb
 914              		.thumb_func
 915              		.fpu fpv4-sp-d16
 917              	get_last_menu:
 918              	.LFB10:
 113:src/menu.c    ****   return last_menu;
 919              		.loc 1 113 22 is_stmt 1 view -0
 920              		.cfi_startproc
 921              		@ args = 0, pretend = 0, frame = 0
 922              		@ frame_needed = 0, uses_anonymous_args = 0
 923              		@ link register save eliminated.
 114:src/menu.c    **** }
 924              		.loc 1 114 3 view .LVU262
 114:src/menu.c    **** }
 925              		.loc 1 114 10 is_stmt 0 view .LVU263
 926 0000 014B     		ldr	r3, .L89
 115:src/menu.c    **** 
 927              		.loc 1 115 1 view .LVU264
 928 0002 1868     		ldr	r0, [r3]
ARM GAS  /tmp/cc1cke1v.s 			page 29


 929 0004 7047     		bx	lr
 930              	.L90:
 931 0006 00BF     		.align	2
 932              	.L89:
 933 0008 00000000 		.word	.LANCHOR3
 934              		.cfi_endproc
 935              	.LFE10:
 937              		.section	.text.set_last_menu,"ax",%progbits
 938              		.align	1
 939              		.p2align 2,,3
 940              		.global	set_last_menu
 941              		.syntax unified
 942              		.thumb
 943              		.thumb_func
 944              		.fpu fpv4-sp-d16
 946              	set_last_menu:
 947              	.LFB12:
 121:src/menu.c    ****   set_menu (last_menu);
 948              		.loc 1 121 23 is_stmt 1 view -0
 949              		.cfi_startproc
 950              		@ args = 0, pretend = 0, frame = 0
 951              		@ frame_needed = 0, uses_anonymous_args = 0
 952              		@ link register save eliminated.
 122:src/menu.c    **** }
 953              		.loc 1 122 3 view .LVU266
 954              	.LBB73:
 955              	.LBB74:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 956              		.loc 1 86 7 is_stmt 0 view .LVU267
 957 0000 074A     		ldr	r2, .L102
 958              	.LBE74:
 959              	.LBE73:
 122:src/menu.c    **** }
 960              		.loc 1 122 3 view .LVU268
 961 0002 0848     		ldr	r0, .L102+4
 962              	.LBB77:
 963              	.LBB75:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 964              		.loc 1 86 7 view .LVU269
 965 0004 1368     		ldr	r3, [r2]
 966              	.LBE75:
 967              	.LBE77:
 122:src/menu.c    **** }
 968              		.loc 1 122 3 view .LVU270
 969 0006 0168     		ldr	r1, [r0]
 970              	.LVL60:
 971              	.LBB78:
 972              	.LBI73:
  85:src/menu.c    ****   int m = current_menu;
 973              		.loc 1 85 6 is_stmt 1 view .LVU271
 974              	.LBB76:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 975              		.loc 1 86 3 view .LVU272
  87:src/menu.c    ****     current_menu = default_menu;
 976              		.loc 1 87 3 view .LVU273
  87:src/menu.c    ****     current_menu = default_menu;
 977              		.loc 1 87 6 is_stmt 0 view .LVU274
ARM GAS  /tmp/cc1cke1v.s 			page 30


 978 0008 9942     		cmp	r1, r3
  88:src/menu.c    ****   }
 979              		.loc 1 88 5 is_stmt 1 view .LVU275
  88:src/menu.c    ****   }
 980              		.loc 1 88 18 is_stmt 0 view .LVU276
 981 000a 04BF     		itt	eq
 982 000c 0649     		ldreq	r1, .L102+8
 983              	.LVL61:
  88:src/menu.c    ****   }
 984              		.loc 1 88 18 view .LVU277
 985 000e 0968     		ldreq	r1, [r1]
  90:src/menu.c    ****     current_menu = last_menu;
 986              		.loc 1 90 8 is_stmt 1 view .LVU278
  94:src/menu.c    ****   }
 987              		.loc 1 94 18 is_stmt 0 view .LVU279
 988 0010 1160     		str	r1, [r2]
  96:src/menu.c    **** }
 989              		.loc 1 96 3 is_stmt 1 view .LVU280
  96:src/menu.c    **** }
 990              		.loc 1 96 6 is_stmt 0 view .LVU281
 991 0012 092B     		cmp	r3, #9
 992 0014 02D0     		beq	.L91
  96:src/menu.c    **** }
 993              		.loc 1 96 17 view .LVU282
 994 0016 102B     		cmp	r3, #16
  96:src/menu.c    **** }
 995              		.loc 1 96 32 is_stmt 1 view .LVU283
  96:src/menu.c    **** }
 996              		.loc 1 96 42 is_stmt 0 view .LVU284
 997 0018 18BF     		it	ne
 998 001a 0360     		strne	r3, [r0]
 999              	.LVL62:
 1000              	.L91:
  96:src/menu.c    **** }
 1001              		.loc 1 96 42 view .LVU285
 1002              	.LBE76:
 1003              	.LBE78:
 123:src/menu.c    **** 
 1004              		.loc 1 123 1 view .LVU286
 1005 001c 7047     		bx	lr
 1006              	.L103:
 1007 001e 00BF     		.align	2
 1008              	.L102:
 1009 0020 00000000 		.word	.LANCHOR1
 1010 0024 00000000 		.word	.LANCHOR3
 1011 0028 00000000 		.word	.LANCHOR2
 1012              		.cfi_endproc
 1013              	.LFE12:
 1015              		.section	.text.mdot,"ax",%progbits
 1016              		.align	1
 1017              		.p2align 2,,3
 1018              		.global	mdot
 1019              		.syntax unified
 1020              		.thumb
 1021              		.thumb_func
 1022              		.fpu fpv4-sp-d16
 1024              	mdot:
ARM GAS  /tmp/cc1cke1v.s 			page 31


 1025              	.LVL63:
 1026              	.LFB14:
 438:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1027              		.loc 1 438 40 is_stmt 1 view -0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 0
 1030              		@ frame_needed = 0, uses_anonymous_args = 0
 1031              		@ link register save eliminated.
 439:src/menu.c    ****   if (on) {
 1032              		.loc 1 439 3 view .LVU288
 439:src/menu.c    ****   if (on) {
 1033              		.loc 1 439 6 is_stmt 0 view .LVU289
 1034 0000 C728     		cmp	r0, #199
 1035 0002 1AD8     		bhi	.L108
 1036              	.LVL64:
 1037              	.LBB81:
 1038              	.LBI81:
 438:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1039              		.loc 1 438 6 is_stmt 1 view .LVU290
 1040              	.LBB82:
 440:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1041              		.loc 1 440 3 view .LVU291
 1042              	.LBE82:
 1043              	.LBE81:
 438:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1044              		.loc 1 438 40 is_stmt 0 view .LVU292
 1045 0004 10B4     		push	{r4}
 1046              		.cfi_def_cfa_offset 4
 1047              		.cfi_offset 4, -4
 1048              	.LBB85:
 1049              	.LBB83:
 440:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1050              		.loc 1 440 6 view .LVU293
 1051 0006 63B9     		cbnz	r3, .L111
 1052              		.loc 1 444 5 is_stmt 1 view .LVU294
 1053              		.loc 1 444 17 is_stmt 0 view .LVU295
 1054 0008 0C4B     		ldr	r3, .L112
 1055              	.LVL65:
 1056              		.loc 1 444 17 view .LVU296
 1057 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1058              	.LVL66:
 1059              		.loc 1 444 25 view .LVU297
 1060 000e 0124     		movs	r4, #1
 1061              		.loc 1 444 17 view .LVU298
 1062 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1063              		.loc 1 444 25 view .LVU299
 1064 0012 04FA01F1 		lsl	r1, r4, r1
 1065              	.LVL67:
 1066              		.loc 1 444 17 view .LVU300
 1067 0016 23EA0101 		bic	r1, r3, r1
 1068 001a 8154     		strb	r1, [r0, r2]
 1069              	.LVL68:
 1070              		.loc 1 444 17 view .LVU301
 1071              	.LBE83:
 1072              	.LBE85:
 445:src/menu.c    ****   }
 446:src/menu.c    **** }
ARM GAS  /tmp/cc1cke1v.s 			page 32


 1073              		.loc 1 446 1 view .LVU302
 1074 001c 5DF8044B 		ldr	r4, [sp], #4
 1075              		.cfi_remember_state
 1076              		.cfi_restore 4
 1077              		.cfi_def_cfa_offset 0
 1078 0020 7047     		bx	lr
 1079              	.LVL69:
 1080              	.L111:
 1081              		.cfi_restore_state
 1082              	.LBB86:
 1083              	.LBB84:
 441:src/menu.c    ****   }
 1084              		.loc 1 441 5 is_stmt 1 view .LVU303
 441:src/menu.c    ****   }
 1085              		.loc 1 441 17 is_stmt 0 view .LVU304
 1086 0022 064B     		ldr	r3, .L112
 1087              	.LVL70:
 441:src/menu.c    ****   }
 1088              		.loc 1 441 17 view .LVU305
 1089 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1090              	.LVL71:
 441:src/menu.c    ****   }
 1091              		.loc 1 441 24 view .LVU306
 1092 0028 0124     		movs	r4, #1
 441:src/menu.c    ****   }
 1093              		.loc 1 441 17 view .LVU307
 1094 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 441:src/menu.c    ****   }
 1095              		.loc 1 441 24 view .LVU308
 1096 002c 04FA01F1 		lsl	r1, r4, r1
 1097              	.LVL72:
 441:src/menu.c    ****   }
 1098              		.loc 1 441 17 view .LVU309
 1099 0030 1943     		orrs	r1, r1, r3
 1100 0032 8154     		strb	r1, [r0, r2]
 1101              	.LBE84:
 1102              	.LBE86:
 1103              		.loc 1 446 1 view .LVU310
 1104 0034 5DF8044B 		ldr	r4, [sp], #4
 1105              		.cfi_restore 4
 1106              		.cfi_def_cfa_offset 0
 1107 0038 7047     		bx	lr
 1108              	.LVL73:
 1109              	.L108:
 1110              		.loc 1 446 1 view .LVU311
 1111 003a 7047     		bx	lr
 1112              	.L113:
 1113              		.align	2
 1114              	.L112:
 1115 003c 00000000 		.word	.LANCHOR0
 1116              		.cfi_endproc
 1117              	.LFE14:
 1119              		.section	.text.display_menu,"ax",%progbits
 1120              		.align	1
 1121              		.p2align 2,,3
 1122              		.global	display_menu
 1123              		.syntax unified
ARM GAS  /tmp/cc1cke1v.s 			page 33


 1124              		.thumb
 1125              		.thumb_func
 1126              		.fpu fpv4-sp-d16
 1128              	display_menu:
 1129              	.LVL74:
 1130              	.LFB15:
 447:src/menu.c    **** 
 448:src/menu.c    **** 
 449:src/menu.c    **** void display_menu (int current_menu) {
 1131              		.loc 1 449 38 is_stmt 1 view -0
 1132              		.cfi_startproc
 1133              		@ args = 0, pretend = 0, frame = 0
 1134              		@ frame_needed = 0, uses_anonymous_args = 0
 450:src/menu.c    ****   int len = 0;
 1135              		.loc 1 450 3 view .LVU313
 451:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1136              		.loc 1 451 3 view .LVU314
 449:src/menu.c    ****   int len = 0;
 1137              		.loc 1 449 38 is_stmt 0 view .LVU315
 1138 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1139              		.cfi_def_cfa_offset 36
 1140              		.cfi_offset 4, -36
 1141              		.cfi_offset 5, -32
 1142              		.cfi_offset 6, -28
 1143              		.cfi_offset 7, -24
 1144              		.cfi_offset 8, -20
 1145              		.cfi_offset 9, -16
 1146              		.cfi_offset 10, -12
 1147              		.cfi_offset 11, -8
 1148              		.cfi_offset 14, -4
 1149 0004 83B0     		sub	sp, sp, #12
 1150              		.cfi_def_cfa_offset 48
 1151              		.loc 1 451 3 view .LVU316
 1152 0006 0024     		movs	r4, #0
 1153 0008 514F     		ldr	r7, .L136
 1154 000a 0094     		str	r4, [sp]
 1155 000c 3423     		movs	r3, #52
 1156 000e 4FF4C872 		mov	r2, #400
 1157 0012 BC21     		movs	r1, #188
 449:src/menu.c    ****   int len = 0;
 1158              		.loc 1 449 38 view .LVU317
 1159 0014 0646     		mov	r6, r0
 1160              		.loc 1 451 3 view .LVU318
 1161 0016 2046     		mov	r0, r4
 1162              	.LVL75:
 1163              		.loc 1 451 3 view .LVU319
 1164 0018 B847     		blx	r7
 1165              	.LVL76:
 452:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1166              		.loc 1 452 3 is_stmt 1 view .LVU320
 1167 001a 4E4D     		ldr	r5, .L136+4
 1168 001c FF23     		movs	r3, #255
 1169 001e 0093     		str	r3, [sp]
 1170 0020 4FF4C872 		mov	r2, #400
 1171 0024 0123     		movs	r3, #1
 1172 0026 BC21     		movs	r1, #188
 1173 0028 2046     		mov	r0, r4
ARM GAS  /tmp/cc1cke1v.s 			page 34


 1174 002a B847     		blx	r7
 1175              	.LVL77:
 453:src/menu.c    ****   //Clear previous menu
 454:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1176              		.loc 1 454 3 view .LVU321
 1177              	.LBB87:
 1178              		.loc 1 454 8 view .LVU322
 1179              		.loc 1 454 21 view .LVU323
 455:src/menu.c    ****     mdots[col][0] = 0;
 1180              		.loc 1 455 19 is_stmt 0 view .LVU324
 1181 002c 2246     		mov	r2, r4
 1182 002e 05F5C871 		add	r1, r5, #400
 1183              	.LBE87:
 452:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1184              		.loc 1 452 3 view .LVU325
 1185 0032 2B46     		mov	r3, r5
 1186              	.LVL78:
 1187              	.L115:
 1188              	.LBB88:
 1189              		.loc 1 455 5 is_stmt 1 discriminator 3 view .LVU326
 1190              		.loc 1 455 19 is_stmt 0 discriminator 3 view .LVU327
 1191 0034 1A70     		strb	r2, [r3]
 456:src/menu.c    ****     mdots[col][1] = 0;
 1192              		.loc 1 456 5 is_stmt 1 discriminator 3 view .LVU328
 1193              		.loc 1 456 19 is_stmt 0 discriminator 3 view .LVU329
 1194 0036 5A70     		strb	r2, [r3, #1]
 454:src/menu.c    ****     mdots[col][0] = 0;
 1195              		.loc 1 454 32 is_stmt 1 discriminator 3 view .LVU330
 454:src/menu.c    ****     mdots[col][0] = 0;
 1196              		.loc 1 454 21 discriminator 3 view .LVU331
 1197 0038 0233     		adds	r3, r3, #2
 454:src/menu.c    ****     mdots[col][0] = 0;
 1198              		.loc 1 454 3 is_stmt 0 discriminator 3 view .LVU332
 1199 003a 9942     		cmp	r1, r3
 1200 003c FAD1     		bne	.L115
 1201 003e 464B     		ldr	r3, .L136+8
 1202 0040 DFF81C81 		ldr	r8, .L136+16
 1203 0044 D024     		movs	r4, #208
 1204 0046 04FB0634 		mla	r4, r4, r6, r3
 1205 004a 2034     		adds	r4, r4, #32
 454:src/menu.c    ****     mdots[col][0] = 0;
 1206              		.loc 1 454 3 view .LVU333
 1207 004c 0027     		movs	r7, #0
 1208 004e 25E0     		b	.L118
 1209              	.LVL79:
 1210              	.L116:
 454:src/menu.c    ****     mdots[col][0] = 0;
 1211              		.loc 1 454 3 view .LVU334
 1212              	.LBE88:
 1213              	.LBB89:
 457:src/menu.c    ****   }
 458:src/menu.c    **** 
 459:src/menu.c    ****   // Draw menu items
 460:src/menu.c    ****   // 
 461:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 462:src/menu.c    ****     /*
 463:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
ARM GAS  /tmp/cc1cke1v.s 			page 35


 464:src/menu.c    ****     */
 465:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 466:src/menu.c    ****     // Unshifted first
 467:src/menu.c    ****     if (current_menu == USER_MENU) {
 468:src/menu.c    ****       len = pixel_length (UserMenu.keys[item].unshifted_label, 0); // 0 means not small font
 469:src/menu.c    ****       set_menu_label ( UserMenu.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 470:src/menu.c    ****       // Now shifted ...	
 471:src/menu.c    ****       len = pixel_length (UserMenu.keys[item].shifted_label, 0); // 0 means not small font
 472:src/menu.c    ****       len = item*32 + (32-len)/2;
 473:src/menu.c    ****       if (len<0) len = 0;
 474:src/menu.c    ****       if (len>199) len = 199;
 475:src/menu.c    ****       set_menu_label ( UserMenu.keys[item].shifted_label, 0, len, 1 );
 476:src/menu.c    ****     }
 477:src/menu.c    ****     else {
 478:src/menu.c    ****       len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small 
 1214              		.loc 1 478 13 view .LVU335
 1215 0050 FFF7FEFF 		bl	pixel_length
 1216              	.LVL80:
 479:src/menu.c    ****       set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0
 1217              		.loc 1 479 7 is_stmt 1 view .LVU336
 1218              		.loc 1 479 89 is_stmt 0 view .LVU337
 1219 0054 C0F12000 		rsb	r0, r0, #32
 1220              	.LVL81:
 1221              		.loc 1 479 95 view .LVU338
 1222 0058 00EBD070 		add	r0, r0, r0, lsr #31
 1223              		.loc 1 479 7 view .LVU339
 1224 005c 07EB6001 		add	r1, r7, r0, asr #1
 1225 0060 0022     		movs	r2, #0
 1226 0062 2046     		mov	r0, r4
 1227 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1228              	.LVL82:
 480:src/menu.c    ****       // Now shifted ...	
 481:src/menu.c    ****       len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small fo
 1229              		.loc 1 481 7 is_stmt 1 view .LVU340
 1230              		.loc 1 481 13 is_stmt 0 view .LVU341
 1231 0068 0021     		movs	r1, #0
 1232 006a 4846     		mov	r0, r9
 1233 006c FFF7FEFF 		bl	pixel_length
 1234              	.LVL83:
 482:src/menu.c    ****       len = item*32 + (32-len)/2;
 1235              		.loc 1 482 7 is_stmt 1 view .LVU342
 1236              		.loc 1 482 26 is_stmt 0 view .LVU343
 1237 0070 C0F12001 		rsb	r1, r0, #32
 1238              		.loc 1 482 31 view .LVU344
 1239 0074 01EBD171 		add	r1, r1, r1, lsr #31
 1240              	.LVL84:
 483:src/menu.c    ****       if (len<0) len = 0;
 1241              		.loc 1 483 7 is_stmt 1 view .LVU345
 482:src/menu.c    ****       len = item*32 + (32-len)/2;
 1242              		.loc 1 482 11 is_stmt 0 view .LVU346
 1243 0078 07EB6101 		add	r1, r7, r1, asr #1
 1244              	.LVL85:
 1245              	.L134:
 482:src/menu.c    ****       len = item*32 + (32-len)/2;
 1246              		.loc 1 482 11 view .LVU347
 1247 007c C729     		cmp	r1, #199
 1248 007e A8BF     		it	ge
ARM GAS  /tmp/cc1cke1v.s 			page 36


 1249 0080 C721     		movge	r1, #199
 1250              	.LVL86:
 484:src/menu.c    ****       if (len>199) len = 199;
 485:src/menu.c    ****       set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 1251              		.loc 1 485 7 is_stmt 1 view .LVU348
 1252 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1253              	.LVL87:
 1254              		.loc 1 485 7 is_stmt 0 view .LVU349
 1255 0086 4846     		mov	r0, r9
 1256 0088 0122     		movs	r2, #1
 1257 008a 2037     		adds	r7, r7, #32
 1258 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1259              	.LVL88:
 461:src/menu.c    ****     /*
 1260              		.loc 1 461 32 is_stmt 1 view .LVU350
 461:src/menu.c    ****     /*
 1261              		.loc 1 461 22 view .LVU351
 461:src/menu.c    ****     /*
 1262              		.loc 1 461 3 is_stmt 0 view .LVU352
 1263 0090 C02F     		cmp	r7, #192
 1264 0092 08F12008 		add	r8, r8, #32
 1265 0096 04F12004 		add	r4, r4, #32
 1266 009a 20D0     		beq	.L135
 1267              	.L118:
 467:src/menu.c    ****       len = pixel_length (UserMenu.keys[item].unshifted_label, 0); // 0 means not small font
 1268              		.loc 1 467 5 is_stmt 1 view .LVU353
 478:src/menu.c    ****       set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0
 1269              		.loc 1 478 7 view .LVU354
 467:src/menu.c    ****       len = pixel_length (UserMenu.keys[item].unshifted_label, 0); // 0 means not small font
 1270              		.loc 1 467 8 is_stmt 0 view .LVU355
 1271 009c 632E     		cmp	r6, #99
 478:src/menu.c    ****       set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0
 1272              		.loc 1 478 13 view .LVU356
 1273 009e 4FF00001 		mov	r1, #0
 1274 00a2 2046     		mov	r0, r4
 1275 00a4 04F10809 		add	r9, r4, #8
 467:src/menu.c    ****       len = pixel_length (UserMenu.keys[item].unshifted_label, 0); // 0 means not small font
 1276              		.loc 1 467 8 view .LVU357
 1277 00a8 D2D1     		bne	.L116
 468:src/menu.c    ****       set_menu_label ( UserMenu.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1278              		.loc 1 468 7 is_stmt 1 view .LVU358
 468:src/menu.c    ****       set_menu_label ( UserMenu.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1279              		.loc 1 468 13 is_stmt 0 view .LVU359
 1280 00aa 4046     		mov	r0, r8
 1281 00ac FFF7FEFF 		bl	pixel_length
 1282              	.LVL89:
 469:src/menu.c    ****       // Now shifted ...	
 1283              		.loc 1 469 7 is_stmt 1 view .LVU360
 469:src/menu.c    ****       // Now shifted ...	
 1284              		.loc 1 469 78 is_stmt 0 view .LVU361
 1285 00b0 C0F12000 		rsb	r0, r0, #32
 1286              	.LVL90:
 469:src/menu.c    ****       // Now shifted ...	
 1287              		.loc 1 469 84 view .LVU362
 1288 00b4 00EBD070 		add	r0, r0, r0, lsr #31
 469:src/menu.c    ****       // Now shifted ...	
 1289              		.loc 1 469 7 view .LVU363
ARM GAS  /tmp/cc1cke1v.s 			page 37


 1290 00b8 07EB6001 		add	r1, r7, r0, asr #1
 1291 00bc 0022     		movs	r2, #0
 1292 00be 4046     		mov	r0, r8
 1293 00c0 08F10809 		add	r9, r8, #8
 1294 00c4 FFF7FEFF 		bl	set_menu_label.constprop.0
 1295              	.LVL91:
 471:src/menu.c    ****       len = item*32 + (32-len)/2;
 1296              		.loc 1 471 7 is_stmt 1 view .LVU364
 471:src/menu.c    ****       len = item*32 + (32-len)/2;
 1297              		.loc 1 471 13 is_stmt 0 view .LVU365
 1298 00c8 0021     		movs	r1, #0
 1299 00ca 4846     		mov	r0, r9
 1300 00cc FFF7FEFF 		bl	pixel_length
 1301              	.LVL92:
 472:src/menu.c    ****       if (len<0) len = 0;
 1302              		.loc 1 472 7 is_stmt 1 view .LVU366
 472:src/menu.c    ****       if (len<0) len = 0;
 1303              		.loc 1 472 26 is_stmt 0 view .LVU367
 1304 00d0 C0F12000 		rsb	r0, r0, #32
 1305              	.LVL93:
 472:src/menu.c    ****       if (len<0) len = 0;
 1306              		.loc 1 472 31 view .LVU368
 1307 00d4 00EBD070 		add	r0, r0, r0, lsr #31
 1308              	.LVL94:
 473:src/menu.c    ****       if (len>199) len = 199;
 1309              		.loc 1 473 7 is_stmt 1 view .LVU369
 472:src/menu.c    ****       if (len<0) len = 0;
 1310              		.loc 1 472 11 is_stmt 0 view .LVU370
 1311 00d8 07EB6001 		add	r1, r7, r0, asr #1
 1312              	.LVL95:
 472:src/menu.c    ****       if (len<0) len = 0;
 1313              		.loc 1 472 11 view .LVU371
 1314 00dc CEE7     		b	.L134
 1315              	.LVL96:
 1316              	.L135:
 472:src/menu.c    ****       if (len<0) len = 0;
 1317              		.loc 1 472 11 view .LVU372
 1318 00de 1F4E     		ldr	r6, .L136+12
 1319              	.LVL97:
 472:src/menu.c    ****       if (len<0) len = 0;
 1320              		.loc 1 472 11 view .LVU373
 1321              	.LBE89:
 1322              	.LBB90:
 1323              	.LBB91:
 486:src/menu.c    ****     }      
 487:src/menu.c    ****   }
 488:src/menu.c    **** 
 489:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 490:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 491:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 492:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 493:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1324              		.loc 1 493 2 view .LVU374
 1325 00e0 DFF86C90 		ldr	r9, .L136
 1326 00e4 C5F1040A 		rsb	r10, r5, #4
 1327 00e8 06F5C47B 		add	fp, r6, #392
 1328              	.LBE91:
ARM GAS  /tmp/cc1cke1v.s 			page 38


 1329              	.LBE90:
 1330              	.LBB93:
 461:src/menu.c    ****     /*
 1331              		.loc 1 461 3 view .LVU375
 1332 00ec 771E     		subs	r7, r6, #1
 1333              	.LBE93:
 1334              	.LBB94:
 1335              	.LBB92:
 1336              		.loc 1 493 2 view .LVU376
 1337 00ee 4FF0FF08 		mov	r8, #255
 1338              	.L119:
 1339              	.LVL98:
 490:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1340              		.loc 1 490 23 is_stmt 1 view .LVU377
 1341 00f2 0AEB0705 		add	r5, r10, r7
 490:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1342              		.loc 1 490 14 is_stmt 0 view .LVU378
 1343 00f6 0024     		movs	r4, #0
 1344              	.LVL99:
 1345              	.L122:
 491:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1346              		.loc 1 491 7 is_stmt 1 view .LVU379
 1347              		.loc 1 493 2 view .LVU380
 491:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1348              		.loc 1 491 22 is_stmt 0 view .LVU381
 1349 00f8 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 491:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1350              		.loc 1 491 40 view .LVU382
 1351 00fc 2241     		asrs	r2, r2, r4
 1352              		.loc 1 493 2 view .LVU383
 1353 00fe A4EB8401 		sub	r1, r4, r4, lsl #2
 1354 0102 0323     		movs	r3, #3
 491:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1355              		.loc 1 491 10 view .LVU384
 1356 0104 12F0010F 		tst	r2, #1
 1357              		.loc 1 493 2 view .LVU385
 1358 0108 01F1E901 		add	r1, r1, #233
 1359 010c 1A46     		mov	r2, r3
 1360 010e 2846     		mov	r0, r5
 491:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1361              		.loc 1 491 10 view .LVU386
 1362 0110 02D0     		beq	.L120
 1363              		.loc 1 493 2 view .LVU387
 1364 0112 CDF80080 		str	r8, [sp]
 1365 0116 C847     		blx	r9
 1366              	.LVL100:
 1367              	.L120:
 494:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1368              		.loc 1 494 7 is_stmt 1 view .LVU388
 495:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 496:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1369              		.loc 1 496 2 view .LVU389
 494:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1370              		.loc 1 494 22 is_stmt 0 view .LVU390
 1371 0118 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 494:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1372              		.loc 1 494 40 view .LVU391
ARM GAS  /tmp/cc1cke1v.s 			page 39


 1373 011a 2241     		asrs	r2, r2, r4
 1374              		.loc 1 496 2 view .LVU392
 1375 011c A4EB8401 		sub	r1, r4, r4, lsl #2
 1376 0120 0323     		movs	r3, #3
 494:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1377              		.loc 1 494 10 view .LVU393
 1378 0122 12F0010F 		tst	r2, #1
 1379              		.loc 1 496 2 view .LVU394
 1380 0126 01F1D001 		add	r1, r1, #208
 1381 012a 1A46     		mov	r2, r3
 1382 012c 04F10104 		add	r4, r4, #1
 1383              	.LVL101:
 1384              		.loc 1 496 2 view .LVU395
 1385 0130 2846     		mov	r0, r5
 494:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1386              		.loc 1 494 10 view .LVU396
 1387 0132 02D0     		beq	.L121
 1388              		.loc 1 496 2 view .LVU397
 1389 0134 CDF80080 		str	r8, [sp]
 1390 0138 C847     		blx	r9
 1391              	.LVL102:
 1392              	.L121:
 490:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1393              		.loc 1 490 32 is_stmt 1 discriminator 2 view .LVU398
 490:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1394              		.loc 1 490 23 discriminator 2 view .LVU399
 490:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1395              		.loc 1 490 5 is_stmt 0 discriminator 2 view .LVU400
 1396 013a 062C     		cmp	r4, #6
 1397 013c DCD1     		bne	.L122
 1398              	.LBE92:
 489:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1399              		.loc 1 489 32 is_stmt 1 discriminator 2 view .LVU401
 489:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1400              		.loc 1 489 21 discriminator 2 view .LVU402
 1401 013e 0236     		adds	r6, r6, #2
 489:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1402              		.loc 1 489 3 is_stmt 0 discriminator 2 view .LVU403
 1403 0140 B345     		cmp	fp, r6
 1404 0142 07F10207 		add	r7, r7, #2
 1405 0146 D4D1     		bne	.L119
 1406              	.LBE94:
 497:src/menu.c    ****     }
 498:src/menu.c    ****   }
 499:src/menu.c    **** }
 1407              		.loc 1 499 1 view .LVU404
 1408 0148 03B0     		add	sp, sp, #12
 1409              		.cfi_def_cfa_offset 36
 1410              		@ sp needed
 1411 014a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1412              	.LVL103:
 1413              	.L137:
 1414              		.loc 1 499 1 view .LVU405
 1415 014e 00BF     		.align	2
 1416              	.L136:
 1417 0150 3D020008 		.word	134218301
 1418 0154 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/cc1cke1v.s 			page 40


 1419 0158 00000000 		.word	.LANCHOR5
 1420 015c 01000000 		.word	.LANCHOR0+1
 1421 0160 20000000 		.word	.LANCHOR4+32
 1422              		.cfi_endproc
 1423              	.LFE15:
 1425              		.section	.text.display_current_menu,"ax",%progbits
 1426              		.align	1
 1427              		.p2align 2,,3
 1428              		.global	display_current_menu
 1429              		.syntax unified
 1430              		.thumb
 1431              		.thumb_func
 1432              		.fpu fpv4-sp-d16
 1434              	display_current_menu:
 1435              	.LFB11:
 117:src/menu.c    ****   display_menu (current_menu);
 1436              		.loc 1 117 30 is_stmt 1 view -0
 1437              		.cfi_startproc
 1438              		@ args = 0, pretend = 0, frame = 0
 1439              		@ frame_needed = 0, uses_anonymous_args = 0
 1440              		@ link register save eliminated.
 118:src/menu.c    **** }
 1441              		.loc 1 118 3 view .LVU407
 1442 0000 014B     		ldr	r3, .L139
 1443 0002 1868     		ldr	r0, [r3]
 1444 0004 FFF7FEBF 		b	display_menu
 1445              	.LVL104:
 1446              	.L140:
 1447              		.align	2
 1448              	.L139:
 1449 0008 00000000 		.word	.LANCHOR1
 1450              		.cfi_endproc
 1451              	.LFE11:
 1453              		.section	.text.all_menu_dots,"ax",%progbits
 1454              		.align	1
 1455              		.p2align 2,,3
 1456              		.global	all_menu_dots
 1457              		.syntax unified
 1458              		.thumb
 1459              		.thumb_func
 1460              		.fpu fpv4-sp-d16
 1462              	all_menu_dots:
 1463              	.LFB16:
 500:src/menu.c    **** 
 501:src/menu.c    **** void all_menu_dots () {
 1464              		.loc 1 501 23 view -0
 1465              		.cfi_startproc
 1466              		@ args = 0, pretend = 0, frame = 0
 1467              		@ frame_needed = 0, uses_anonymous_args = 0
 502:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1468              		.loc 1 502 3 view .LVU409
 1469              	.LBB95:
 1470              		.loc 1 502 8 view .LVU410
 1471              	.LVL105:
 1472              		.loc 1 502 21 view .LVU411
 1473              	.LBE95:
 501:src/menu.c    ****   for (int col = 0; col < 200; col++) {
ARM GAS  /tmp/cc1cke1v.s 			page 41


 1474              		.loc 1 501 23 is_stmt 0 view .LVU412
 1475 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1476              		.cfi_def_cfa_offset 20
 1477              		.cfi_offset 4, -20
 1478              		.cfi_offset 5, -16
 1479              		.cfi_offset 6, -12
 1480              		.cfi_offset 7, -8
 1481              		.cfi_offset 14, -4
 1482              	.LBB99:
 1483              	.LBB96:
 503:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 504:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1484              		.loc 1 504 2 view .LVU413
 1485 0002 0D4E     		ldr	r6, .L147
 1486              	.LBE96:
 1487              	.LBE99:
 501:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1488              		.loc 1 501 23 view .LVU414
 1489 0004 83B0     		sub	sp, sp, #12
 1490              		.cfi_def_cfa_offset 32
 501:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1491              		.loc 1 501 23 view .LVU415
 1492 0006 0025     		movs	r5, #0
 1493              	.LBB100:
 1494              	.LBB97:
 1495              		.loc 1 504 2 view .LVU416
 1496 0008 FF27     		movs	r7, #255
 1497              	.LVL106:
 1498              	.L142:
 503:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1499              		.loc 1 503 23 is_stmt 1 view .LVU417
 1500              	.LBE97:
 1501              	.LBE100:
 501:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1502              		.loc 1 501 23 is_stmt 0 view .LVU418
 1503 000a E924     		movs	r4, #233
 1504              	.LVL107:
 1505              	.L143:
 1506              	.LBB101:
 1507              	.LBB98:
 1508              		.loc 1 504 2 is_stmt 1 discriminator 3 view .LVU419
 1509 000c 0323     		movs	r3, #3
 1510 000e 1A46     		mov	r2, r3
 1511 0010 2146     		mov	r1, r4
 1512 0012 2846     		mov	r0, r5
 1513 0014 0097     		str	r7, [sp]
 1514 0016 B047     		blx	r6
 1515              	.LVL108:
 505:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1516              		.loc 1 505 2 discriminator 3 view .LVU420
 1517 0018 0323     		movs	r3, #3
 1518 001a A4F11901 		sub	r1, r4, #25
 1519 001e 0097     		str	r7, [sp]
 1520 0020 1A46     		mov	r2, r3
 1521 0022 2846     		mov	r0, r5
 1522 0024 033C     		subs	r4, r4, #3
 1523 0026 B047     		blx	r6
ARM GAS  /tmp/cc1cke1v.s 			page 42


 1524              	.LVL109:
 503:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1525              		.loc 1 503 32 discriminator 3 view .LVU421
 503:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1526              		.loc 1 503 23 discriminator 3 view .LVU422
 503:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1527              		.loc 1 503 5 is_stmt 0 discriminator 3 view .LVU423
 1528 0028 D72C     		cmp	r4, #215
 1529 002a EFD1     		bne	.L143
 1530              	.LBE98:
 502:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1531              		.loc 1 502 32 is_stmt 1 discriminator 2 view .LVU424
 502:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1532              		.loc 1 502 21 discriminator 2 view .LVU425
 1533 002c 0235     		adds	r5, r5, #2
 502:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1534              		.loc 1 502 3 is_stmt 0 discriminator 2 view .LVU426
 1535 002e B5F5C87F 		cmp	r5, #400
 1536 0032 EAD1     		bne	.L142
 1537              	.LBE101:
 506:src/menu.c    ****     }
 507:src/menu.c    ****   }
 508:src/menu.c    **** }  
 1538              		.loc 1 508 1 view .LVU427
 1539 0034 03B0     		add	sp, sp, #12
 1540              		.cfi_def_cfa_offset 20
 1541              		@ sp needed
 1542 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1543              	.L148:
 1544              		.align	2
 1545              	.L147:
 1546 0038 3D020008 		.word	134218301
 1547              		.cfi_endproc
 1548              	.LFE16:
 1550              		.section	.text.build_user_menu,"ax",%progbits
 1551              		.align	1
 1552              		.p2align 2,,3
 1553              		.global	build_user_menu
 1554              		.syntax unified
 1555              		.thumb
 1556              		.thumb_func
 1557              		.fpu fpv4-sp-d16
 1559              	build_user_menu:
 1560              	.LFB17:
 509:src/menu.c    **** 
 510:src/menu.c    **** void build_user_menu(void)
 511:src/menu.c    **** {
 1561              		.loc 1 511 1 is_stmt 1 view -0
 1562              		.cfi_startproc
 1563              		@ args = 0, pretend = 0, frame = 16
 1564              		@ frame_needed = 0, uses_anonymous_args = 0
 512:src/menu.c    ****   // find the label 'MNU'
 513:src/menu.c    ****   const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 1565              		.loc 1 513 3 view .LVU429
 1566              	.LVL110:
 514:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 1567              		.loc 1 514 3 view .LVU430
ARM GAS  /tmp/cc1cke1v.s 			page 43


 511:src/menu.c    ****   // find the label 'MNU'
 1568              		.loc 1 511 1 is_stmt 0 view .LVU431
 1569 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1570              		.cfi_def_cfa_offset 36
 1571              		.cfi_offset 4, -36
 1572              		.cfi_offset 5, -32
 1573              		.cfi_offset 6, -28
 1574              		.cfi_offset 7, -24
 1575              		.cfi_offset 8, -20
 1576              		.cfi_offset 9, -16
 1577              		.cfi_offset 10, -12
 1578              		.cfi_offset 11, -8
 1579              		.cfi_offset 14, -4
 1580              		.loc 1 514 21 view .LVU432
 1581 0004 0021     		movs	r1, #0
 1582 0006 4748     		ldr	r0, .L188
 1583 0008 DFF82881 		ldr	r8, .L188+16
 511:src/menu.c    ****   // find the label 'MNU'
 1584              		.loc 1 511 1 view .LVU433
 1585 000c 85B0     		sub	sp, sp, #20
 1586              		.cfi_def_cfa_offset 56
 1587              		.loc 1 514 21 view .LVU434
 1588 000e FFF7FEFF 		bl	findmultilbl
 1589              	.LVL111:
 1590 0012 4346     		mov	r3, r8
 1591 0014 0446     		mov	r4, r0
 1592              	.LVL112:
 515:src/menu.c    ****   int i=0;
 1593              		.loc 1 515 3 is_stmt 1 view .LVU435
 516:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 1594              		.loc 1 516 3 view .LVU436
 1595              	.LBB102:
 1596              		.loc 1 516 8 view .LVU437
 1597              		.loc 1 516 19 view .LVU438
 517:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1598              		.loc 1 517 43 is_stmt 0 view .LVU439
 1599 0016 0022     		movs	r2, #0
 1600 0018 08F1C000 		add	r0, r8, #192
 1601              	.LVL113:
 518:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 519:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1602              		.loc 1 519 42 view .LVU440
 1603 001c 2E21     		movs	r1, #46
 1604              	.LVL114:
 1605              	.L150:
 517:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1606              		.loc 1 517 7 is_stmt 1 discriminator 3 view .LVU441
 517:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1607              		.loc 1 517 43 is_stmt 0 discriminator 3 view .LVU442
 1608 001e 83F82020 		strb	r2, [r3, #32]
 518:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1609              		.loc 1 518 7 is_stmt 1 discriminator 3 view .LVU443
 518:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1610              		.loc 1 518 40 is_stmt 0 discriminator 3 view .LVU444
 1611 0022 5A61     		str	r2, [r3, #20]
 1612              		.loc 1 519 7 is_stmt 1 discriminator 3 view .LVU445
 1613              		.loc 1 519 42 is_stmt 0 discriminator 3 view .LVU446
ARM GAS  /tmp/cc1cke1v.s 			page 44


 1614 0024 1974     		strb	r1, [r3, #16]
 520:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1615              		.loc 1 520 7 is_stmt 1 discriminator 3 view .LVU447
 1616              		.loc 1 520 41 is_stmt 0 discriminator 3 view .LVU448
 1617 0026 83F82820 		strb	r2, [r3, #40]
 521:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1618              		.loc 1 521 7 is_stmt 1 discriminator 3 view .LVU449
 1619              		.loc 1 521 38 is_stmt 0 discriminator 3 view .LVU450
 1620 002a DA61     		str	r2, [r3, #28]
 522:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1621              		.loc 1 522 7 is_stmt 1 discriminator 3 view .LVU451
 1622              		.loc 1 522 40 is_stmt 0 discriminator 3 view .LVU452
 1623 002c 1976     		strb	r1, [r3, #24]
 516:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1624              		.loc 1 516 24 is_stmt 1 discriminator 3 view .LVU453
 516:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1625              		.loc 1 516 19 discriminator 3 view .LVU454
 1626 002e 2033     		adds	r3, r3, #32
 516:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1627              		.loc 1 516 3 is_stmt 0 discriminator 3 view .LVU455
 1628 0030 8342     		cmp	r3, r0
 1629 0032 F4D1     		bne	.L150
 516:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1630              		.loc 1 516 3 discriminator 3 view .LVU456
 1631              	.LBE102:
 523:src/menu.c    ****   }
 524:src/menu.c    ****   while (pc && i < 12) {
 1632              		.loc 1 524 9 is_stmt 1 view .LVU457
 1633 0034 002C     		cmp	r4, #0
 1634 0036 3FD0     		beq	.L149
 1635 0038 3B4D     		ldr	r5, .L188+4
 1636              	.LBB103:
 525:src/menu.c    ****     s_opcode op;
 526:src/menu.c    ****     char buf1[16];
 527:src/menu.c    **** 
 528:src/menu.c    ****     pc = do_inc(pc, 0);
 529:src/menu.c    ****     op = (s_opcode) getprog(pc);
 530:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 531:src/menu.c    ****       break;
 532:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 533:src/menu.c    ****       if (i==4) {
 534:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 535:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 536:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 1637              		.loc 1 536 2 is_stmt 0 view .LVU458
 1638 003a DFF8FC90 		ldr	r9, .L188+20
 537:src/menu.c    ****       }
 538:src/menu.c    ****       else if (i==5) {
 539:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 540:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 541:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1639              		.loc 1 541 2 view .LVU459
 1640 003e 05F1A00A 		add	r10, r5, #160
 1641              	.LBE103:
 524:src/menu.c    ****     s_opcode op;
 1642              		.loc 1 524 9 view .LVU460
 1643 0042 0026     		movs	r6, #0
ARM GAS  /tmp/cc1cke1v.s 			page 45


 1644              	.LVL115:
 1645              	.L163:
 1646              	.LBB106:
 525:src/menu.c    ****     s_opcode op;
 1647              		.loc 1 525 5 is_stmt 1 view .LVU461
 526:src/menu.c    **** 
 1648              		.loc 1 526 5 view .LVU462
 528:src/menu.c    ****     op = (s_opcode) getprog(pc);
 1649              		.loc 1 528 5 view .LVU463
 528:src/menu.c    ****     op = (s_opcode) getprog(pc);
 1650              		.loc 1 528 10 is_stmt 0 view .LVU464
 1651 0044 2046     		mov	r0, r4
 1652 0046 0021     		movs	r1, #0
 1653 0048 FFF7FEFF 		bl	do_inc
 1654              	.LVL116:
 1655 004c 0446     		mov	r4, r0
 1656              	.LVL117:
 529:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1657              		.loc 1 529 5 is_stmt 1 view .LVU465
 529:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1658              		.loc 1 529 21 is_stmt 0 view .LVU466
 1659 004e FFF7FEFF 		bl	getprog
 1660              	.LVL118:
 529:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1661              		.loc 1 529 8 view .LVU467
 1662 0052 1FFA80FB 		uxth	fp, r0
 1663              	.LVL119:
 530:src/menu.c    ****       break;
 1664              		.loc 1 530 5 is_stmt 1 view .LVU468
 530:src/menu.c    ****       break;
 1665              		.loc 1 530 8 is_stmt 0 view .LVU469
 1666 0056 BBF59D7F 		cmp	fp, #314
 1667 005a 2DD0     		beq	.L149
 532:src/menu.c    ****       if (i==4) {
 1668              		.loc 1 532 5 is_stmt 1 view .LVU470
 532:src/menu.c    ****       if (i==4) {
 1669              		.loc 1 532 8 is_stmt 0 view .LVU471
 1670 005c BBF5807F 		cmp	fp, #256
 1671 0060 3AD0     		beq	.L185
 542:src/menu.c    ****       }
 543:src/menu.c    ****       i += 1;
 544:src/menu.c    ****       continue;
 545:src/menu.c    ****     }
 546:src/menu.c    ****     if (isDBL(op)) {
 1672              		.loc 1 546 5 is_stmt 1 view .LVU472
 1673 0062 81B2     		uxth	r1, r0
 1674              		.loc 1 546 9 is_stmt 0 view .LVU473
 1675 0064 00F47040 		and	r0, r0, #61440
 1676              		.loc 1 546 8 view .LVU474
 1677 0068 B0F5704F 		cmp	r0, #61440
 1678              		.loc 1 546 9 view .LVU475
 1679 006c 0F46     		mov	r7, r1
 1680              		.loc 1 546 8 view .LVU476
 1681 006e 1DD0     		beq	.L161
 547:src/menu.c    ****       i += 1;
 548:src/menu.c    ****       continue;
 549:src/menu.c    ****     }
ARM GAS  /tmp/cc1cke1v.s 			page 46


 550:src/menu.c    ****     if (isRARG(op)) {
 1682              		.loc 1 550 5 is_stmt 1 view .LVU477
 1683              		.loc 1 550 8 is_stmt 0 view .LVU478
 1684 0070 48B1     		cbz	r0, .L158
 1685              	.LBB104:
 551:src/menu.c    ****       const s_opcode rarg = RARG_CMD(op);
 1686              		.loc 1 551 7 is_stmt 1 view .LVU479
 1687              		.loc 1 551 29 is_stmt 0 view .LVU480
 1688 0072 4FEA1B22 		lsr	r2, fp, #8
 1689 0076 203A     		subs	r2, r2, #32
 1690 0078 D2B2     		uxtb	r2, r2
 1691              	.LVL120:
 552:src/menu.c    ****       if (rarg != RARG_ALPHA && rarg != RARG_CONV
 1692              		.loc 1 552 7 is_stmt 1 view .LVU481
 1693              		.loc 1 552 10 is_stmt 0 view .LVU482
 1694 007a 242A     		cmp	r2, #36
 1695 007c 03D0     		beq	.L158
 1696              		.loc 1 552 30 discriminator 1 view .LVU483
 1697 007e 6C2A     		cmp	r2, #108
 1698 0080 01D0     		beq	.L158
 553:src/menu.c    **** 	  && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX)
 1699              		.loc 1 553 4 view .LVU484
 1700 0082 012A     		cmp	r2, #1
 1701 0084 3AD8     		bhi	.L186
 1702              	.LVL121:
 1703              	.L158:
 1704              		.loc 1 553 4 view .LVU485
 1705              	.LBE104:
 554:src/menu.c    **** 	op = op & 0xff00;	// remove argument
 555:src/menu.c    ****     }
 556:src/menu.c    ****     catcmd(op, buf1);
 1706              		.loc 1 556 5 is_stmt 1 view .LVU486
 1707 0086 0846     		mov	r0, r1
 1708 0088 6946     		mov	r1, sp
 1709 008a FFF7FEFF 		bl	catcmd
 1710              	.LVL122:
 557:src/menu.c    **** #pragma GCC diagnostic push
 558:src/menu.c    **** #pragma GCC diagnostic ignored "-Wstringop-truncation"
 559:src/menu.c    ****     if (i<6) {
 1711              		.loc 1 559 5 view .LVU487
 1712              		.loc 1 559 8 is_stmt 0 view .LVU488
 1713 008e 052E     		cmp	r6, #5
 560:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1714              		.loc 1 560 7 view .LVU489
 1715 0090 6946     		mov	r1, sp
 1716 0092 4FF00702 		mov	r2, #7
 559:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1717              		.loc 1 559 8 view .LVU490
 1718 0096 12D8     		bhi	.L159
 1719              		.loc 1 560 7 is_stmt 1 view .LVU491
 1720 0098 2846     		mov	r0, r5
 1721 009a FFF7FEFF 		bl	strncpy
 1722              	.LVL123:
 561:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1723              		.loc 1 561 7 view .LVU492
 1724              		.loc 1 561 42 is_stmt 0 view .LVU493
 1725 009e 0021     		movs	r1, #0
ARM GAS  /tmp/cc1cke1v.s 			page 47


 562:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = op;
 563:src/menu.c    ****       UserMenu.keys[i].unshifted.key_34s = K_OP;
 1726              		.loc 1 563 42 view .LVU494
 1727 00a0 3422     		movs	r2, #52
 562:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = op;
 1728              		.loc 1 562 40 view .LVU495
 1729 00a2 45F80CBC 		str	fp, [r5, #-12]
 561:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1730              		.loc 1 561 42 view .LVU496
 1731 00a6 E971     		strb	r1, [r5, #7]
 562:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = op;
 1732              		.loc 1 562 7 is_stmt 1 view .LVU497
 1733              		.loc 1 563 7 view .LVU498
 1734              		.loc 1 563 42 is_stmt 0 view .LVU499
 1735 00a8 05F8102C 		strb	r2, [r5, #-16]
 1736              	.LVL124:
 1737              	.L161:
 1738              		.loc 1 563 42 view .LVU500
 1739              	.LBE106:
 524:src/menu.c    ****     s_opcode op;
 1740              		.loc 1 524 9 is_stmt 1 view .LVU501
 1741 00ac 24B1     		cbz	r4, .L149
 1742 00ae 0136     		adds	r6, r6, #1
 524:src/menu.c    ****     s_opcode op;
 1743              		.loc 1 524 13 is_stmt 0 discriminator 1 view .LVU502
 1744 00b0 0C2E     		cmp	r6, #12
 1745 00b2 05F12005 		add	r5, r5, #32
 1746 00b6 C5D1     		bne	.L163
 1747              	.LVL125:
 1748              	.L149:
 564:src/menu.c    ****     }
 565:src/menu.c    ****     else {
 566:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 567:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 568:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 569:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 570:src/menu.c    ****     }
 571:src/menu.c    **** #pragma GCC diagnostic pop
 572:src/menu.c    ****     i++;
 573:src/menu.c    ****   }
 574:src/menu.c    **** }
 1749              		.loc 1 574 1 view .LVU503
 1750 00b8 05B0     		add	sp, sp, #20
 1751              		.cfi_remember_state
 1752              		.cfi_def_cfa_offset 36
 1753              		@ sp needed
 1754 00ba BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1755              	.LVL126:
 1756              	.L159:
 1757              		.cfi_restore_state
 1758              	.LBB107:
 566:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1759              		.loc 1 566 7 is_stmt 1 view .LVU504
 1760 00be A5F1B800 		sub	r0, r5, #184
 1761 00c2 FFF7FEFF 		bl	strncpy
 1762              	.LVL127:
 567:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
ARM GAS  /tmp/cc1cke1v.s 			page 48


 1763              		.loc 1 567 7 view .LVU505
 567:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 1764              		.loc 1 567 42 is_stmt 0 view .LVU506
 1765 00c6 0022     		movs	r2, #0
 569:src/menu.c    ****     }
 1766              		.loc 1 569 42 view .LVU507
 1767 00c8 3423     		movs	r3, #52
 568:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 1768              		.loc 1 568 40 view .LVU508
 1769 00ca 45F8C47C 		str	r7, [r5, #-196]
 567:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 1770              		.loc 1 567 42 view .LVU509
 1771 00ce 05F8B12C 		strb	r2, [r5, #-177]
 568:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 1772              		.loc 1 568 7 is_stmt 1 view .LVU510
 569:src/menu.c    ****     }
 1773              		.loc 1 569 7 view .LVU511
 569:src/menu.c    ****     }
 1774              		.loc 1 569 42 is_stmt 0 view .LVU512
 1775 00d2 05F8C83C 		strb	r3, [r5, #-200]
 572:src/menu.c    ****   }
 1776              		.loc 1 572 5 is_stmt 1 view .LVU513
 1777              	.LVL128:
 572:src/menu.c    ****   }
 1778              		.loc 1 572 5 is_stmt 0 view .LVU514
 1779 00d6 E9E7     		b	.L161
 1780              	.LVL129:
 1781              	.L185:
 533:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 1782              		.loc 1 533 7 is_stmt 1 view .LVU515
 533:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 1783              		.loc 1 533 10 is_stmt 0 view .LVU516
 1784 00d8 042E     		cmp	r6, #4
 1785 00da 14D0     		beq	.L187
 538:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 1786              		.loc 1 538 12 is_stmt 1 view .LVU517
 538:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 1787              		.loc 1 538 15 is_stmt 0 view .LVU518
 1788 00dc 052E     		cmp	r6, #5
 1789 00de E5D1     		bne	.L161
 539:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 1790              		.loc 1 539 2 is_stmt 1 view .LVU519
 541:src/menu.c    ****       }
 1791              		.loc 1 541 2 is_stmt 0 view .LVU520
 1792 00e0 1249     		ldr	r1, .L188+8
 539:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 1793              		.loc 1 539 35 view .LVU521
 1794 00e2 4FF0FF30 		mov	r0, #-1
 540:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1795              		.loc 1 540 37 view .LVU522
 1796 00e6 2D23     		movs	r3, #45
 539:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 1797              		.loc 1 539 35 view .LVU523
 1798 00e8 C8F8B400 		str	r0, [r8, #180]
 540:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1799              		.loc 1 540 2 is_stmt 1 view .LVU524
 541:src/menu.c    ****       }
ARM GAS  /tmp/cc1cke1v.s 			page 49


 1800              		.loc 1 541 2 is_stmt 0 view .LVU525
 1801 00ec 0968     		ldr	r1, [r1]
 540:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1802              		.loc 1 540 37 view .LVU526
 1803 00ee 88F8B030 		strb	r3, [r8, #176]
 541:src/menu.c    ****       }
 1804              		.loc 1 541 2 is_stmt 1 view .LVU527
 1805 00f2 3246     		mov	r2, r6
 1806 00f4 5046     		mov	r0, r10
 1807 00f6 FFF7FEFF 		bl	strncpy
 1808              	.LVL130:
 543:src/menu.c    ****       continue;
 1809              		.loc 1 543 7 view .LVU528
 544:src/menu.c    ****     }
 1810              		.loc 1 544 7 view .LVU529
 1811 00fa D7E7     		b	.L161
 1812              	.LVL131:
 1813              	.L186:
 1814              	.LBB105:
 554:src/menu.c    ****     }
 1815              		.loc 1 554 2 view .LVU530
 554:src/menu.c    ****     }
 1816              		.loc 1 554 5 is_stmt 0 view .LVU531
 1817 00fc 0BF47F4B 		and	fp, fp, #65280
 1818              	.LVL132:
 554:src/menu.c    ****     }
 1819              		.loc 1 554 5 view .LVU532
 1820 0100 5946     		mov	r1, fp
 1821 0102 5F46     		mov	r7, fp
 1822 0104 BFE7     		b	.L158
 1823              	.LVL133:
 1824              	.L187:
 554:src/menu.c    ****     }
 1825              		.loc 1 554 5 view .LVU533
 1826              	.LBE105:
 534:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 1827              		.loc 1 534 2 is_stmt 1 view .LVU534
 534:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 1828              		.loc 1 534 35 is_stmt 0 view .LVU535
 1829 0106 4FF0FF30 		mov	r0, #-1
 535:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 1830              		.loc 1 535 37 view .LVU536
 1831 010a 2C23     		movs	r3, #44
 534:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 1832              		.loc 1 534 35 view .LVU537
 1833 010c C8F89400 		str	r0, [r8, #148]
 535:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 1834              		.loc 1 535 2 is_stmt 1 view .LVU538
 536:src/menu.c    ****       }
 1835              		.loc 1 536 2 is_stmt 0 view .LVU539
 1836 0110 D9F80010 		ldr	r1, [r9]
 1837 0114 0648     		ldr	r0, .L188+12
 535:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 1838              		.loc 1 535 37 view .LVU540
 1839 0116 88F89030 		strb	r3, [r8, #144]
 536:src/menu.c    ****       }
 1840              		.loc 1 536 2 is_stmt 1 view .LVU541
ARM GAS  /tmp/cc1cke1v.s 			page 50


 1841 011a 0522     		movs	r2, #5
 1842 011c FFF7FEFF 		bl	strncpy
 1843              	.LVL134:
 1844 0120 C4E7     		b	.L161
 1845              	.L189:
 1846 0122 00BF     		.align	2
 1847              	.L188:
 1848 0124 4DF04E55 		.word	1431236685
 1849 0128 20000000 		.word	.LANCHOR4+32
 1850 012c 00000000 		.word	.LANCHOR7
 1851 0130 A0000000 		.word	.LANCHOR4+160
 1852 0134 00000000 		.word	.LANCHOR4
 1853 0138 00000000 		.word	.LANCHOR6
 1854              	.LBE107:
 1855              		.cfi_endproc
 1856              	.LFE17:
 1858              		.section	.text.shutdown,"ax",%progbits
 1859              		.align	1
 1860              		.p2align 2,,3
 1861              		.global	shutdown
 1862              		.syntax unified
 1863              		.thumb
 1864              		.thumb_func
 1865              		.fpu fpv4-sp-d16
 1867              	shutdown:
 1868              	.LFB19:
 1869              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
ARM GAS  /tmp/cc1cke1v.s 			page 51


  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  46:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  47:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  48:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  49:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  50:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  51:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  52:src/console.c **** 
  53:src/console.c **** static struct _ndmap remap (const int c) {
  54:src/console.c **** 
  55:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  56:src/console.c **** 
  57:src/console.c **** #include "keytran.c"
  58:src/console.c **** 
  59:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  60:src/console.c **** 
  61:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  62:src/console.c **** 
  63:src/console.c ****   if (c == 44 ) {
  64:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  65:src/console.c ****     return sshot;
  66:src/console.c ****   }
  67:src/console.c ****   
  68:src/console.c ****   if (Running | Pause) {
  69:src/console.c ****     return mapping_running[c];
  70:src/console.c ****   }
  71:src/console.c **** 
  72:src/console.c ****   if (current_menu == USER_MENU) {
  73:src/console.c ****     switch (c) {
  74:src/console.c ****     case KEY_F1:
  75:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[0].unshifted;
  76:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
  77:src/console.c ****     case KEY_F2:
  78:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[1].unshifted;
  79:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
  80:src/console.c ****     case KEY_F3:
  81:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[2].unshifted;
  82:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
  83:src/console.c ****     case KEY_F4:
  84:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[3].unshifted;
  85:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
  86:src/console.c ****     case KEY_F5:
  87:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[4].unshifted;
ARM GAS  /tmp/cc1cke1v.s 			page 52


  88:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
  89:src/console.c ****     case KEY_F6:
  90:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[5].unshifted;
  91:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
  92:src/console.c ****     }
  93:src/console.c ****   }
  94:src/console.c ****   else {
  95:src/console.c ****     switch (c) {
  96:src/console.c ****     case KEY_F1:
  97:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
  98:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
  99:src/console.c ****     case KEY_F2:
 100:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
 101:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 102:src/console.c ****     case KEY_F3:
 103:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 104:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 105:src/console.c ****     case KEY_F4:
 106:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 107:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 108:src/console.c ****     case KEY_F5:
 109:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 110:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 111:src/console.c ****     case KEY_F6:
 112:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 113:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 114:src/console.c ****     }
 115:src/console.c ****   }    
 116:src/console.c **** 
 117:src/console.c ****   if ( get_alpha_state() ) {
 118:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 119:src/console.c ****       switch (cur_shift()) { 
 120:src/console.c ****       case SHIFT_N:
 121:src/console.c **** 	return mapping_none[c]; // N -> F
 122:src/console.c **** 	break;
 123:src/console.c ****       case SHIFT_F:
 124:src/console.c **** 	return mapping_fshift[c]; // F -> G
 125:src/console.c **** 	break;
 126:src/console.c ****       case SHIFT_G:
 127:src/console.c **** 	return h_shift; // G -> H
 128:src/console.c **** 	break;
 129:src/console.c ****       case SHIFT_H:
 130:src/console.c **** 	return h_shift; // H -> N
 131:src/console.c ****       default:
 132:src/console.c **** 	return no_change;
 133:src/console.c ****       }
 134:src/console.c ****     }
 135:src/console.c ****     return mapping_alpha [c];
 136:src/console.c ****   }
 137:src/console.c **** 
 138:src/console.c ****   switch (cur_shift()) {
 139:src/console.c ****   case SHIFT_N:    
 140:src/console.c ****     return mapping_none[c];
 141:src/console.c ****     break;
 142:src/console.c ****   case SHIFT_F:
 143:src/console.c ****     return mapping_fshift[c];
 144:src/console.c ****     break;
ARM GAS  /tmp/cc1cke1v.s 			page 53


 145:src/console.c ****   case SHIFT_G:
 146:src/console.c ****     return mapping_gshift[c];
 147:src/console.c ****     break;
 148:src/console.c ****   default:
 149:src/console.c ****     return no_change;
 150:src/console.c ****   }
 151:src/console.c **** }
 152:src/console.c **** 
 153:src/console.c **** #endif
 154:src/console.c **** 
 155:src/console.c **** void shutdown( void )
 156:src/console.c **** {
 1870              		.loc 2 156 1 view -0
 1871              		.cfi_startproc
 1872              		@ args = 0, pretend = 0, frame = 0
 1873              		@ frame_needed = 0, uses_anonymous_args = 0
 1874              		@ link register save eliminated.
 157:src/console.c **** #ifndef DM42
 158:src/console.c ****   checksum_all();
 159:src/console.c ****   setuptty( 1 );
 160:src/console.c ****   save_statefile( NULL );
 161:src/console.c ****   exit( 0 );
 162:src/console.c **** #else
 163:src/console.c ****   //  save_ram_file(0);
 164:src/console.c ****   SET_ST(STAT_PGM_END);
 1875              		.loc 2 164 3 view .LVU543
 1876 0000 024A     		ldr	r2, .L191
 1877 0002 1368     		ldr	r3, [r2]
 1878 0004 43F40073 		orr	r3, r3, #512
 1879 0008 1360     		str	r3, [r2]
 165:src/console.c **** #endif
 166:src/console.c **** }
 1880              		.loc 2 166 1 is_stmt 0 view .LVU544
 1881 000a 7047     		bx	lr
 1882              	.L192:
 1883              		.align	2
 1884              	.L191:
 1885 000c 00200010 		.word	268443648
 1886              		.cfi_endproc
 1887              	.LFE19:
 1889              		.section	.text.is_key_pressed,"ax",%progbits
 1890              		.align	1
 1891              		.p2align 2,,3
 1892              		.global	is_key_pressed
 1893              		.syntax unified
 1894              		.thumb
 1895              		.thumb_func
 1896              		.fpu fpv4-sp-d16
 1898              	is_key_pressed:
 1899              	.LFB20:
 167:src/console.c **** 
 168:src/console.c **** 
 169:src/console.c **** /*
 170:src/console.c ****  *  Dummies
 171:src/console.c ****  */
 172:src/console.c **** int is_key_pressed(void) 
 173:src/console.c **** {
ARM GAS  /tmp/cc1cke1v.s 			page 54


 1900              		.loc 2 173 1 is_stmt 1 view -0
 1901              		.cfi_startproc
 1902              		@ args = 0, pretend = 0, frame = 0
 1903              		@ frame_needed = 0, uses_anonymous_args = 0
 174:src/console.c **** #ifdef DM42
 175:src/console.c ****   return !key_empty();
 1904              		.loc 2 175 3 view .LVU546
 173:src/console.c **** #ifdef DM42
 1905              		.loc 2 173 1 is_stmt 0 view .LVU547
 1906 0000 08B5     		push	{r3, lr}
 1907              		.cfi_def_cfa_offset 8
 1908              		.cfi_offset 3, -8
 1909              		.cfi_offset 14, -4
 1910              		.loc 2 175 11 view .LVU548
 1911 0002 034B     		ldr	r3, .L195
 1912 0004 9847     		blx	r3
 1913              	.LVL135:
 176:src/console.c **** #else
 177:src/console.c ****   return 0;
 178:src/console.c **** #endif
 179:src/console.c **** }
 1914              		.loc 2 179 1 view .LVU549
 1915 0006 B0FA80F0 		clz	r0, r0
 1916 000a 4009     		lsrs	r0, r0, #5
 1917 000c 08BD     		pop	{r3, pc}
 1918              	.L196:
 1919 000e 00BF     		.align	2
 1920              	.L195:
 1921 0010 7D030008 		.word	134218621
 1922              		.cfi_endproc
 1923              	.LFE20:
 1925              		.section	.text.get_key,"ax",%progbits
 1926              		.align	1
 1927              		.p2align 2,,3
 1928              		.global	get_key
 1929              		.syntax unified
 1930              		.thumb
 1931              		.thumb_func
 1932              		.fpu fpv4-sp-d16
 1934              	get_key:
 1935              	.LFB21:
 180:src/console.c **** 
 181:src/console.c **** int get_key(void)
 182:src/console.c **** {
 1936              		.loc 2 182 1 is_stmt 1 view -0
 1937              		.cfi_startproc
 1938              		@ args = 0, pretend = 0, frame = 0
 1939              		@ frame_needed = 0, uses_anonymous_args = 0
 1940              		@ link register save eliminated.
 183:src/console.c ****   #ifdef DM42
 184:src/console.c ****   return key_pop();
 1941              		.loc 2 184 3 view .LVU551
 1942              		.loc 2 184 10 is_stmt 0 view .LVU552
 1943 0000 004B     		ldr	r3, .L198
 1944 0002 1847     		bx	r3
 1945              	.LVL136:
 1946              	.L199:
ARM GAS  /tmp/cc1cke1v.s 			page 55


 1947              		.align	2
 1948              	.L198:
 1949 0004 89030008 		.word	134218633
 1950              		.cfi_endproc
 1951              	.LFE21:
 1953              		.section	.text.put_key,"ax",%progbits
 1954              		.align	1
 1955              		.p2align 2,,3
 1956              		.global	put_key
 1957              		.syntax unified
 1958              		.thumb
 1959              		.thumb_func
 1960              		.fpu fpv4-sp-d16
 1962              	put_key:
 1963              	.LVL137:
 1964              	.LFB22:
 185:src/console.c ****   #else
 186:src/console.c ****   return 0;
 187:src/console.c ****   #endif
 188:src/console.c **** }
 189:src/console.c **** 
 190:src/console.c **** /*
 191:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 192:src/console.c ****  * 
 193:src/console.c ****  */
 194:src/console.c **** int put_key( int k )
 195:src/console.c **** {
 1965              		.loc 2 195 1 is_stmt 1 view -0
 1966              		.cfi_startproc
 1967              		@ args = 0, pretend = 0, frame = 48
 1968              		@ frame_needed = 0, uses_anonymous_args = 0
 1969              		@ link register save eliminated.
 196:src/console.c ****   #ifdef DM42
 197:src/console.c ****   const char wp34s_to_DM42[] = {
 1970              		.loc 2 197 3 view .LVU554
 195:src/console.c ****   #ifdef DM42
 1971              		.loc 2 195 1 is_stmt 0 view .LVU555
 1972 0000 70B4     		push	{r4, r5, r6}
 1973              		.cfi_def_cfa_offset 12
 1974              		.cfi_offset 4, -12
 1975              		.cfi_offset 5, -8
 1976              		.cfi_offset 6, -4
 1977              		.loc 2 197 14 view .LVU556
 1978 0002 0E4D     		ldr	r5, .L203
 195:src/console.c ****   #ifdef DM42
 1979              		.loc 2 195 1 view .LVU557
 1980 0004 0646     		mov	r6, r0
 1981              		.loc 2 197 14 view .LVU558
 1982 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1983              	.LVL138:
 195:src/console.c ****   #ifdef DM42
 1984              		.loc 2 195 1 view .LVU559
 1985 0008 8DB0     		sub	sp, sp, #52
 1986              		.cfi_def_cfa_offset 64
 1987              		.loc 2 197 14 view .LVU560
 1988 000a 01AC     		add	r4, sp, #4
 1989 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
ARM GAS  /tmp/cc1cke1v.s 			page 56


 1990 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1991 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1992 0012 95E80700 		ldm	r5, {r0, r1, r2}
 1993 0016 03C4     		stmia	r4!, {r0, r1}
 198:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 199:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 200:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 201:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 202:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 203:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 204:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 205:src/console.c ****   
 206:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 1994              		.loc 2 206 6 view .LVU561
 1995 0018 282E     		cmp	r6, #40
 197:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 1996              		.loc 2 197 14 view .LVU562
 1997 001a 2270     		strb	r2, [r4]
 1998              		.loc 2 206 3 is_stmt 1 view .LVU563
 1999              		.loc 2 206 6 is_stmt 0 view .LVU564
 2000 001c 08D8     		bhi	.L201
 207:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2001              		.loc 2 207 5 is_stmt 1 view .LVU565
 2002              		.loc 2 207 36 is_stmt 0 view .LVU566
 2003 001e 0CAB     		add	r3, sp, #48
 2004 0020 3046     		mov	r0, r6
 2005 0022 1844     		add	r0, r0, r3
 2006              		.loc 2 207 12 view .LVU567
 2007 0024 064B     		ldr	r3, .L203+4
 2008 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 208:src/console.c ****   }
 209:src/console.c ****   else {
 210:src/console.c ****     return -1;
 211:src/console.c ****   }
 212:src/console.c ****   #else
 213:src/console.c ****   return k;
 214:src/console.c ****   #endif
 215:src/console.c **** }
 2009              		.loc 2 215 1 view .LVU568
 2010 002a 0DB0     		add	sp, sp, #52
 2011              		.cfi_remember_state
 2012              		.cfi_def_cfa_offset 12
 2013              		@ sp needed
 2014 002c 70BC     		pop	{r4, r5, r6}
 2015              		.cfi_restore 6
 2016              		.cfi_restore 5
 2017              		.cfi_restore 4
 2018              		.cfi_def_cfa_offset 0
 2019              	.LVL139:
 207:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2020              		.loc 2 207 12 view .LVU569
 2021 002e 1847     		bx	r3
 2022              	.LVL140:
 2023              	.L201:
 2024              		.cfi_restore_state
 2025              		.loc 2 215 1 view .LVU570
 2026 0030 4FF0FF30 		mov	r0, #-1
ARM GAS  /tmp/cc1cke1v.s 			page 57


 2027 0034 0DB0     		add	sp, sp, #52
 2028              		.cfi_def_cfa_offset 12
 2029              		@ sp needed
 2030 0036 70BC     		pop	{r4, r5, r6}
 2031              		.cfi_restore 6
 2032              		.cfi_restore 5
 2033              		.cfi_restore 4
 2034              		.cfi_def_cfa_offset 0
 2035              	.LVL141:
 2036              		.loc 2 215 1 view .LVU571
 2037 0038 7047     		bx	lr
 2038              	.L204:
 2039 003a 00BF     		.align	2
 2040              	.L203:
 2041 003c 00000000 		.word	.LANCHOR8
 2042 0040 81030008 		.word	134218625
 2043              		.cfi_endproc
 2044              	.LFE22:
 2046              		.section	.text.shift_down,"ax",%progbits
 2047              		.align	1
 2048              		.p2align 2,,3
 2049              		.global	shift_down
 2050              		.syntax unified
 2051              		.thumb
 2052              		.thumb_func
 2053              		.fpu fpv4-sp-d16
 2055              	shift_down:
 2056              	.LFB23:
 216:src/console.c **** 
 217:src/console.c **** enum shifts shift_down(void)
 218:src/console.c **** {
 2057              		.loc 2 218 1 is_stmt 1 view -0
 2058              		.cfi_startproc
 2059              		@ args = 0, pretend = 0, frame = 0
 2060              		@ frame_needed = 0, uses_anonymous_args = 0
 2061              		@ link register save eliminated.
 219:src/console.c **** 	return SHIFT_N;
 2062              		.loc 2 219 2 view .LVU573
 220:src/console.c **** }
 2063              		.loc 2 220 1 is_stmt 0 view .LVU574
 2064 0000 0020     		movs	r0, #0
 2065 0002 7047     		bx	lr
 2066              		.cfi_endproc
 2067              	.LFE23:
 2069              		.section	.text.start_key_timer,"ax",%progbits
 2070              		.align	1
 2071              		.p2align 2,,3
 2072              		.global	start_key_timer
 2073              		.syntax unified
 2074              		.thumb
 2075              		.thumb_func
 2076              		.fpu fpv4-sp-d16
 2078              	start_key_timer:
 2079              	.LFB24:
 221:src/console.c **** 
 222:src/console.c **** #ifndef DM42   // No serial operations for DM42
 223:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
ARM GAS  /tmp/cc1cke1v.s 			page 58


 224:src/console.c **** /*
 225:src/console.c ****  *  Open a COM port for transmission
 226:src/console.c ****  */
 227:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 228:src/console.c **** {
 229:src/console.c **** 	return 0;
 230:src/console.c **** }
 231:src/console.c **** 
 232:src/console.c **** 
 233:src/console.c **** /*
 234:src/console.c ****  *  Close the COM port after transmission is complete
 235:src/console.c ****  */
 236:src/console.c **** extern void close_port( void )
 237:src/console.c **** {
 238:src/console.c **** }
 239:src/console.c **** 
 240:src/console.c **** 
 241:src/console.c **** /*
 242:src/console.c ****  *  Output a single byte to the serial
 243:src/console.c ****  */
 244:src/console.c **** void put_byte( unsigned char byte )
 245:src/console.c **** {
 246:src/console.c **** 	report_err(ERR_PROG_BAD);
 247:src/console.c **** }
 248:src/console.c **** 
 249:src/console.c **** 
 250:src/console.c **** /*
 251:src/console.c ****  *  Force buffer flush
 252:src/console.c ****  */
 253:src/console.c **** void flush_comm( void )
 254:src/console.c **** {
 255:src/console.c **** }
 256:src/console.c **** 
 257:src/console.c **** #endif
 258:src/console.c **** #endif
 259:src/console.c **** 
 260:src/console.c **** 
 261:src/console.c **** /*
 262:src/console.c ****  *  Main loop
 263:src/console.c ****  */
 264:src/console.c **** #ifdef DM42
 265:src/console.c **** void start_key_timer (void);
 266:src/console.c **** long int keyticks (void);
 267:src/console.c **** void moveto (int line, int x);
 268:src/console.c **** 
 269:src/console.c **** static long int start_ticks;
 270:src/console.c **** 
 271:src/console.c **** void start_key_timer() {
 2080              		.loc 2 271 24 is_stmt 1 view -0
 2081              		.cfi_startproc
 2082              		@ args = 0, pretend = 0, frame = 0
 2083              		@ frame_needed = 0, uses_anonymous_args = 0
 272:src/console.c ****     start_ticks = get_rtc_ticks();
 2084              		.loc 2 272 5 view .LVU576
 271:src/console.c ****     start_ticks = get_rtc_ticks();
 2085              		.loc 2 271 24 is_stmt 0 view .LVU577
 2086 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cc1cke1v.s 			page 59


 2087              		.cfi_def_cfa_offset 8
 2088              		.cfi_offset 3, -8
 2089              		.cfi_offset 14, -4
 2090              		.loc 2 272 19 view .LVU578
 2091 0002 024B     		ldr	r3, .L208
 2092 0004 9847     		blx	r3
 2093              	.LVL142:
 2094              		.loc 2 272 17 view .LVU579
 2095 0006 024B     		ldr	r3, .L208+4
 2096 0008 1860     		str	r0, [r3]
 273:src/console.c **** }
 2097              		.loc 2 273 1 view .LVU580
 2098 000a 08BD     		pop	{r3, pc}
 2099              	.L209:
 2100              		.align	2
 2101              	.L208:
 2102 000c B9040008 		.word	134218937
 2103 0010 00000000 		.word	.LANCHOR9
 2104              		.cfi_endproc
 2105              	.LFE24:
 2107              		.section	.text.keyticks,"ax",%progbits
 2108              		.align	1
 2109              		.p2align 2,,3
 2110              		.global	keyticks
 2111              		.syntax unified
 2112              		.thumb
 2113              		.thumb_func
 2114              		.fpu fpv4-sp-d16
 2116              	keyticks:
 2117              	.LFB25:
 274:src/console.c **** 
 275:src/console.c **** long int keyticks () {
 2118              		.loc 2 275 22 is_stmt 1 view -0
 2119              		.cfi_startproc
 2120              		@ args = 0, pretend = 0, frame = 0
 2121              		@ frame_needed = 0, uses_anonymous_args = 0
 276:src/console.c ****   long int i;
 2122              		.loc 2 276 3 view .LVU582
 277:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2123              		.loc 2 277 3 view .LVU583
 275:src/console.c ****   long int i;
 2124              		.loc 2 275 22 is_stmt 0 view .LVU584
 2125 0000 08B5     		push	{r3, lr}
 2126              		.cfi_def_cfa_offset 8
 2127              		.cfi_offset 3, -8
 2128              		.cfi_offset 14, -4
 2129              		.loc 2 277 8 view .LVU585
 2130 0002 054B     		ldr	r3, .L212
 2131 0004 9847     		blx	r3
 2132              	.LVL143:
 278:src/console.c ****   return i >> 8;
 2133              		.loc 2 278 3 is_stmt 1 view .LVU586
 277:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2134              		.loc 2 277 24 is_stmt 0 view .LVU587
 2135 0006 054B     		ldr	r3, .L212+4
 2136 0008 1B68     		ldr	r3, [r3]
 2137 000a C01A     		subs	r0, r0, r3
ARM GAS  /tmp/cc1cke1v.s 			page 60


 2138              	.LVL144:
 277:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2139              		.loc 2 277 38 view .LVU588
 2140 000c 00EB8000 		add	r0, r0, r0, lsl #2
 279:src/console.c **** }
 2141              		.loc 2 279 1 view .LVU589
 2142 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2143 0014 08BD     		pop	{r3, pc}
 2144              	.L213:
 2145 0016 00BF     		.align	2
 2146              	.L212:
 2147 0018 B9040008 		.word	134218937
 2148 001c 00000000 		.word	.LANCHOR9
 2149              		.cfi_endproc
 2150              	.LFE25:
 2152              		.section	.text.moveto,"ax",%progbits
 2153              		.align	1
 2154              		.p2align 2,,3
 2155              		.global	moveto
 2156              		.syntax unified
 2157              		.thumb
 2158              		.thumb_func
 2159              		.fpu fpv4-sp-d16
 2161              	moveto:
 2162              	.LVL145:
 2163              	.LFB26:
 280:src/console.c **** 
 281:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 282:src/console.c **** char print_string[22];
 283:src/console.c **** int n_p = 0;
 284:src/console.c **** 
 285:src/console.c **** 
 286:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2164              		.loc 2 286 30 is_stmt 1 view -0
 2165              		.cfi_startproc
 2166              		@ args = 0, pretend = 0, frame = 0
 2167              		@ frame_needed = 0, uses_anonymous_args = 0
 287:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2168              		.loc 2 287 3 view .LVU591
 286:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2169              		.loc 2 286 30 is_stmt 0 view .LVU592
 2170 0000 70B5     		push	{r4, r5, r6, lr}
 2171              		.cfi_def_cfa_offset 16
 2172              		.cfi_offset 4, -16
 2173              		.cfi_offset 5, -12
 2174              		.cfi_offset 6, -8
 2175              		.cfi_offset 14, -4
 2176              		.loc 2 287 3 view .LVU593
 2177 0002 0A4D     		ldr	r5, .L216
 2178 0004 0A4B     		ldr	r3, .L216+4
 286:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2179              		.loc 2 286 30 view .LVU594
 2180 0006 0246     		mov	r2, r0
 2181 0008 0C46     		mov	r4, r1
 2182              		.loc 2 287 3 view .LVU595
 2183 000a A86B     		ldr	r0, [r5, #56]
 2184              	.LVL146:
ARM GAS  /tmp/cc1cke1v.s 			page 61


 2185              		.loc 2 287 3 view .LVU596
 2186 000c 511E     		subs	r1, r2, #1
 2187              	.LVL147:
 2188              		.loc 2 287 3 view .LVU597
 2189 000e 9847     		blx	r3
 2190              	.LVL148:
 288:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2191              		.loc 2 288 3 is_stmt 1 view .LVU598
 2192 0010 A86B     		ldr	r0, [r5, #56]
 2193 0012 084B     		ldr	r3, .L216+8
 2194              		.loc 2 288 33 is_stmt 0 view .LVU599
 2195 0014 0168     		ldr	r1, [r0]
 2196              		.loc 2 288 3 view .LVU600
 2197 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2198              		.loc 2 288 33 view .LVU601
 2199 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2200              		.loc 2 288 43 view .LVU602
 2201 001c 013C     		subs	r4, r4, #1
 2202              	.LVL149:
 2203              		.loc 2 288 40 view .LVU603
 2204 001e 04FB01F1 		mul	r1, r4, r1
 2205              		.loc 2 288 3 view .LVU604
 2206 0022 1431     		adds	r1, r1, #20
 289:src/console.c **** }
 2207              		.loc 2 289 1 view .LVU605
 2208 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2209              		.cfi_restore 14
 2210              		.cfi_restore 6
 2211              		.cfi_restore 5
 2212              		.cfi_restore 4
 2213              		.cfi_def_cfa_offset 0
 2214              	.LVL150:
 288:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2215              		.loc 2 288 3 view .LVU606
 2216 0028 1847     		bx	r3	@ indirect register sibling call
 2217              	.LVL151:
 2218              	.L217:
 2219 002a 00BF     		.align	2
 2220              	.L216:
 2221 002c 00200010 		.word	268443648
 2222 0030 69020008 		.word	134218345
 2223 0034 6D020008 		.word	134218349
 2224              		.cfi_endproc
 2225              	.LFE26:
 2227              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2228              		.align	2
 2229              	.LC9:
 2230 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2230      673A2025 
 2230      34692C25 
 2230      346900
 2231              		.section	.text.print_debug,"ax",%progbits
 2232              		.align	1
 2233              		.p2align 2,,3
 2234              		.global	print_debug
 2235              		.syntax unified
 2236              		.thumb
ARM GAS  /tmp/cc1cke1v.s 			page 62


 2237              		.thumb_func
 2238              		.fpu fpv4-sp-d16
 2240              	print_debug:
 2241              	.LVL152:
 2242              	.LFB27:
 290:src/console.c **** 
 291:src/console.c **** void print_debug (int i, int j) {
 2243              		.loc 2 291 33 is_stmt 1 view -0
 2244              		.cfi_startproc
 2245              		@ args = 0, pretend = 0, frame = 8
 2246              		@ frame_needed = 0, uses_anonymous_args = 0
 292:src/console.c ****   strcpy( print_string, spaces );
 2247              		.loc 2 292 3 view .LVU608
 291:src/console.c ****   strcpy( print_string, spaces );
 2248              		.loc 2 291 33 is_stmt 0 view .LVU609
 2249 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2250              		.cfi_def_cfa_offset 24
 2251              		.cfi_offset 4, -24
 2252              		.cfi_offset 5, -20
 2253              		.cfi_offset 6, -16
 2254              		.cfi_offset 7, -12
 2255              		.cfi_offset 8, -8
 2256              		.cfi_offset 14, -4
 2257              		.loc 2 292 3 view .LVU610
 2258 0004 174C     		ldr	r4, .L220
 2259 0006 184F     		ldr	r7, .L220+4
 293:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 294:src/console.c ****   moveto (3, 1);
 295:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2260              		.loc 2 295 3 view .LVU611
 2261 0008 184E     		ldr	r6, .L220+8
 2262 000a 194D     		ldr	r5, .L220+12
 296:src/console.c ****   lcd_refresh();
 2263              		.loc 2 296 3 view .LVU612
 2264 000c DFF86C80 		ldr	r8, .L220+24
 291:src/console.c ****   strcpy( print_string, spaces );
 2265              		.loc 2 291 33 view .LVU613
 2266 0010 82B0     		sub	sp, sp, #8
 2267              		.cfi_def_cfa_offset 32
 291:src/console.c ****   strcpy( print_string, spaces );
 2268              		.loc 2 291 33 view .LVU614
 2269 0012 0190     		str	r0, [sp, #4]
 2270 0014 0091     		str	r1, [sp]
 292:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2271              		.loc 2 292 3 view .LVU615
 2272 0016 2046     		mov	r0, r4
 2273              	.LVL153:
 292:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2274              		.loc 2 292 3 view .LVU616
 2275 0018 3946     		mov	r1, r7
 2276              	.LVL154:
 292:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2277              		.loc 2 292 3 view .LVU617
 2278 001a FFF7FEFF 		bl	strcpy
 2279              	.LVL155:
 293:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2280              		.loc 2 293 3 is_stmt 1 view .LVU618
ARM GAS  /tmp/cc1cke1v.s 			page 63


 2281 001e DDE90032 		ldrd	r3, r2, [sp]
 2282 0022 1449     		ldr	r1, .L220+16
 2283 0024 2046     		mov	r0, r4
 2284 0026 FFF7FEFF 		bl	sprintf
 2285              	.LVL156:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2286              		.loc 2 294 3 view .LVU619
 2287 002a 0121     		movs	r1, #1
 2288 002c 0320     		movs	r0, #3
 2289 002e FFF7FEFF 		bl	moveto
 2290              	.LVL157:
 295:src/console.c ****   lcd_refresh();
 2291              		.loc 2 295 3 view .LVU620
 2292 0032 2146     		mov	r1, r4
 2293 0034 B06B     		ldr	r0, [r6, #56]
 2294 0036 A847     		blx	r5
 2295              	.LVL158:
 2296              		.loc 2 296 3 view .LVU621
 2297 0038 C047     		blx	r8
 2298              	.LVL159:
 297:src/console.c ****   sys_delay (1000);
 2299              		.loc 2 297 3 view .LVU622
 2300 003a 0F4B     		ldr	r3, .L220+20
 2301 003c 4FF47A70 		mov	r0, #1000
 2302 0040 9847     		blx	r3
 2303              	.LVL160:
 298:src/console.c ****   /* wait_for_key_press(); */
 299:src/console.c ****   //  key_pop_all();
 300:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 301:src/console.c ****   // key_pop_all();
 302:src/console.c ****   strcpy( print_string, spaces );
 2304              		.loc 2 302 3 view .LVU623
 2305 0042 3946     		mov	r1, r7
 2306 0044 2046     		mov	r0, r4
 2307 0046 FFF7FEFF 		bl	strcpy
 2308              	.LVL161:
 303:src/console.c ****   moveto (3, 1);
 2309              		.loc 2 303 3 view .LVU624
 2310 004a 0121     		movs	r1, #1
 2311 004c 0320     		movs	r0, #3
 2312 004e FFF7FEFF 		bl	moveto
 2313              	.LVL162:
 304:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2314              		.loc 2 304 3 view .LVU625
 2315 0052 B06B     		ldr	r0, [r6, #56]
 2316 0054 2146     		mov	r1, r4
 2317 0056 A847     		blx	r5
 2318              	.LVL163:
 305:src/console.c ****   lcd_refresh();
 2319              		.loc 2 305 3 view .LVU626
 2320 0058 4346     		mov	r3, r8
 306:src/console.c ****   // while (key_empty()<=0);; // wait for release
 307:src/console.c ****   // key_pop_all();
 308:src/console.c **** }
 2321              		.loc 2 308 1 is_stmt 0 view .LVU627
 2322 005a 02B0     		add	sp, sp, #8
 2323              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc1cke1v.s 			page 64


 2324              	.LVL164:
 2325              		.loc 2 308 1 view .LVU628
 2326              		@ sp needed
 2327 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2328              		.cfi_restore 14
 2329              		.cfi_restore 8
 2330              		.cfi_restore 7
 2331              		.cfi_restore 6
 2332              		.cfi_restore 5
 2333              		.cfi_restore 4
 2334              		.cfi_def_cfa_offset 0
 2335              	.LVL165:
 305:src/console.c ****   lcd_refresh();
 2336              		.loc 2 305 3 view .LVU629
 2337 0060 1847     		bx	r3	@ indirect register sibling call
 2338              	.LVL166:
 2339              	.L221:
 2340 0062 00BF     		.align	2
 2341              	.L220:
 2342 0064 00000000 		.word	print_string
 2343 0068 00000000 		.word	.LANCHOR10
 2344 006c 00200010 		.word	268443648
 2345 0070 B1020008 		.word	134218417
 2346 0074 00000000 		.word	.LC9
 2347 0078 05040008 		.word	134218757
 2348 007c 31020008 		.word	134218289
 2349              		.cfi_endproc
 2350              	.LFE27:
 2352              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2353              		.align	2
 2354              	.LC10:
 2355 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2355      692C2531 
 2355      337300
 2356              		.section	.text.print_debug2,"ax",%progbits
 2357              		.align	1
 2358              		.p2align 2,,3
 2359              		.global	print_debug2
 2360              		.syntax unified
 2361              		.thumb
 2362              		.thumb_func
 2363              		.fpu fpv4-sp-d16
 2365              	print_debug2:
 2366              	.LVL167:
 2367              	.LFB28:
 309:src/console.c **** 
 310:src/console.c **** void print_debug2 (int i, char* j) {
 2368              		.loc 2 310 36 is_stmt 1 view -0
 2369              		.cfi_startproc
 2370              		@ args = 0, pretend = 0, frame = 8
 2371              		@ frame_needed = 0, uses_anonymous_args = 0
 311:src/console.c ****   strcpy( print_string, spaces );
 2372              		.loc 2 311 3 view .LVU631
 310:src/console.c ****   strcpy( print_string, spaces );
 2373              		.loc 2 310 36 is_stmt 0 view .LVU632
 2374 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2375              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc1cke1v.s 			page 65


 2376              		.cfi_offset 4, -24
 2377              		.cfi_offset 5, -20
 2378              		.cfi_offset 6, -16
 2379              		.cfi_offset 7, -12
 2380              		.cfi_offset 8, -8
 2381              		.cfi_offset 14, -4
 2382              		.loc 2 311 3 view .LVU633
 2383 0004 174C     		ldr	r4, .L224
 2384 0006 184F     		ldr	r7, .L224+4
 312:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 313:src/console.c ****   moveto (3, 1);
 314:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2385              		.loc 2 314 3 view .LVU634
 2386 0008 184E     		ldr	r6, .L224+8
 2387 000a 194D     		ldr	r5, .L224+12
 315:src/console.c ****   lcd_refresh();
 2388              		.loc 2 315 3 view .LVU635
 2389 000c DFF86C80 		ldr	r8, .L224+24
 310:src/console.c ****   strcpy( print_string, spaces );
 2390              		.loc 2 310 36 view .LVU636
 2391 0010 82B0     		sub	sp, sp, #8
 2392              		.cfi_def_cfa_offset 32
 310:src/console.c ****   strcpy( print_string, spaces );
 2393              		.loc 2 310 36 view .LVU637
 2394 0012 0190     		str	r0, [sp, #4]
 2395 0014 0091     		str	r1, [sp]
 311:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2396              		.loc 2 311 3 view .LVU638
 2397 0016 2046     		mov	r0, r4
 2398              	.LVL168:
 311:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2399              		.loc 2 311 3 view .LVU639
 2400 0018 3946     		mov	r1, r7
 2401              	.LVL169:
 311:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2402              		.loc 2 311 3 view .LVU640
 2403 001a FFF7FEFF 		bl	strcpy
 2404              	.LVL170:
 312:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2405              		.loc 2 312 3 is_stmt 1 view .LVU641
 2406 001e DDE90032 		ldrd	r3, r2, [sp]
 2407 0022 1449     		ldr	r1, .L224+16
 2408 0024 2046     		mov	r0, r4
 2409 0026 FFF7FEFF 		bl	sprintf
 2410              	.LVL171:
 313:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2411              		.loc 2 313 3 view .LVU642
 2412 002a 0121     		movs	r1, #1
 2413 002c 0320     		movs	r0, #3
 2414 002e FFF7FEFF 		bl	moveto
 2415              	.LVL172:
 314:src/console.c ****   lcd_refresh();
 2416              		.loc 2 314 3 view .LVU643
 2417 0032 2146     		mov	r1, r4
 2418 0034 B06B     		ldr	r0, [r6, #56]
 2419 0036 A847     		blx	r5
 2420              	.LVL173:
ARM GAS  /tmp/cc1cke1v.s 			page 66


 2421              		.loc 2 315 3 view .LVU644
 2422 0038 C047     		blx	r8
 2423              	.LVL174:
 316:src/console.c ****   sys_delay (2500);
 2424              		.loc 2 316 3 view .LVU645
 2425 003a 0F4B     		ldr	r3, .L224+20
 2426 003c 40F6C410 		movw	r0, #2500
 2427 0040 9847     		blx	r3
 2428              	.LVL175:
 317:src/console.c ****   /* wait_for_key_press(); */
 318:src/console.c ****   //  key_pop_all();
 319:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 320:src/console.c ****   // key_pop_all();
 321:src/console.c ****   strcpy( print_string, spaces );
 2429              		.loc 2 321 3 view .LVU646
 2430 0042 3946     		mov	r1, r7
 2431 0044 2046     		mov	r0, r4
 2432 0046 FFF7FEFF 		bl	strcpy
 2433              	.LVL176:
 322:src/console.c ****   moveto (3, 1);
 2434              		.loc 2 322 3 view .LVU647
 2435 004a 0121     		movs	r1, #1
 2436 004c 0320     		movs	r0, #3
 2437 004e FFF7FEFF 		bl	moveto
 2438              	.LVL177:
 323:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2439              		.loc 2 323 3 view .LVU648
 2440 0052 B06B     		ldr	r0, [r6, #56]
 2441 0054 2146     		mov	r1, r4
 2442 0056 A847     		blx	r5
 2443              	.LVL178:
 324:src/console.c ****   lcd_refresh();
 2444              		.loc 2 324 3 view .LVU649
 2445 0058 4346     		mov	r3, r8
 325:src/console.c ****   // while (key_empty()<=0);; // wait for release
 326:src/console.c ****   // key_pop_all();
 327:src/console.c **** }
 2446              		.loc 2 327 1 is_stmt 0 view .LVU650
 2447 005a 02B0     		add	sp, sp, #8
 2448              		.cfi_def_cfa_offset 24
 2449              	.LVL179:
 2450              		.loc 2 327 1 view .LVU651
 2451              		@ sp needed
 2452 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2453              		.cfi_restore 14
 2454              		.cfi_restore 8
 2455              		.cfi_restore 7
 2456              		.cfi_restore 6
 2457              		.cfi_restore 5
 2458              		.cfi_restore 4
 2459              		.cfi_def_cfa_offset 0
 2460              	.LVL180:
 324:src/console.c ****   lcd_refresh();
 2461              		.loc 2 324 3 view .LVU652
 2462 0060 1847     		bx	r3	@ indirect register sibling call
 2463              	.LVL181:
 2464              	.L225:
ARM GAS  /tmp/cc1cke1v.s 			page 67


 2465 0062 00BF     		.align	2
 2466              	.L224:
 2467 0064 00000000 		.word	print_string
 2468 0068 00000000 		.word	.LANCHOR10
 2469 006c 00200010 		.word	268443648
 2470 0070 B1020008 		.word	134218417
 2471 0074 00000000 		.word	.LC10
 2472 0078 05040008 		.word	134218757
 2473 007c 31020008 		.word	134218289
 2474              		.cfi_endproc
 2475              	.LFE28:
 2477              		.section	.text.do_now,"ax",%progbits
 2478              		.align	1
 2479              		.p2align 2,,3
 2480              		.global	do_now
 2481              		.syntax unified
 2482              		.thumb
 2483              		.thumb_func
 2484              		.fpu fpv4-sp-d16
 2486              	do_now:
 2487              	.LVL182:
 2488              	.LFB29:
 328:src/console.c **** 
 329:src/console.c **** void do_now (int key, int shift) {
 2489              		.loc 2 329 34 is_stmt 1 view -0
 2490              		.cfi_startproc
 2491              		@ args = 0, pretend = 0, frame = 8
 2492              		@ frame_needed = 0, uses_anonymous_args = 0
 2493              		@ link register save eliminated.
 330:src/console.c ****   struct _ndmap temp;
 2494              		.loc 2 330 3 view .LVU654
 331:src/console.c ****   temp.key_34s = key;
 2495              		.loc 2 331 3 view .LVU655
 329:src/console.c ****   struct _ndmap temp;
 2496              		.loc 2 329 34 is_stmt 0 view .LVU656
 2497 0000 82B0     		sub	sp, sp, #8
 2498              		.cfi_def_cfa_offset 8
 332:src/console.c ****   temp.shift = shift;
 333:src/console.c ****   process_keycode_with_shift (temp);
 2499              		.loc 2 333 3 view .LVU657
 2500 0002 02AB     		add	r3, sp, #8
 331:src/console.c ****   temp.shift = shift;
 2501              		.loc 2 331 16 view .LVU658
 2502 0004 8DF80000 		strb	r0, [sp]
 332:src/console.c ****   temp.shift = shift;
 2503              		.loc 2 332 3 is_stmt 1 view .LVU659
 332:src/console.c ****   temp.shift = shift;
 2504              		.loc 2 332 14 is_stmt 0 view .LVU660
 2505 0008 0191     		str	r1, [sp, #4]
 2506              		.loc 2 333 3 is_stmt 1 view .LVU661
 2507 000a 13E90300 		ldmdb	r3, {r0, r1}
 2508              	.LVL183:
 334:src/console.c **** }
 2509              		.loc 2 334 1 is_stmt 0 view .LVU662
 2510 000e 02B0     		add	sp, sp, #8
 2511              		.cfi_def_cfa_offset 0
 2512              		@ sp needed
ARM GAS  /tmp/cc1cke1v.s 			page 68


 333:src/console.c **** }
 2513              		.loc 2 333 3 view .LVU663
 2514 0010 FFF7FEBF 		b	process_keycode_with_shift
 2515              	.LVL184:
 333:src/console.c **** }
 2516              		.loc 2 333 3 view .LVU664
 2517              		.cfi_endproc
 2518              	.LFE29:
 2520              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 2521              		.align	2
 2522              	.LC11:
 2523 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 2523      502F7770 
 2523      3334735F 
 2523      68656C70 
 2523      2E68746D 
 2524              		.section	.text.do_multi,"ax",%progbits
 2525              		.align	1
 2526              		.p2align 2,,3
 2527              		.global	do_multi
 2528              		.syntax unified
 2529              		.thumb
 2530              		.thumb_func
 2531              		.fpu fpv4-sp-d16
 2533              	do_multi:
 2534              	.LVL185:
 2535              	.LFB30:
 335:src/console.c **** 
 336:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 2536              		.loc 2 336 42 is_stmt 1 view -0
 2537              		.cfi_startproc
 2538              		@ args = 0, pretend = 0, frame = 16
 2539              		@ frame_needed = 0, uses_anonymous_args = 0
 2540              		.loc 2 336 42 is_stmt 0 view .LVU666
 2541 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2542              		.cfi_def_cfa_offset 24
 2543              		.cfi_offset 4, -24
 2544              		.cfi_offset 5, -20
 2545              		.cfi_offset 6, -16
 2546              		.cfi_offset 7, -12
 2547              		.cfi_offset 8, -8
 2548              		.cfi_offset 14, -4
 2549 0004 84B0     		sub	sp, sp, #16
 2550              		.cfi_def_cfa_offset 40
 2551              	.LVL186:
 337:src/console.c ****   switch(r.shift) {
 2552              		.loc 2 337 3 is_stmt 1 view .LVU667
 336:src/console.c ****   switch(r.shift) {
 2553              		.loc 2 336 42 is_stmt 0 view .LVU668
 2554 0006 6C46     		mov	r4, sp
 2555 0008 531E     		subs	r3, r2, #1
 2556 000a 84E80600 		stm	r4, {r1, r2}
 2557              	.LVL187:
 336:src/console.c ****   switch(r.shift) {
 2558              		.loc 2 336 42 view .LVU669
 2559 000e 0546     		mov	r5, r0
 2560 0010 0E2B     		cmp	r3, #14
ARM GAS  /tmp/cc1cke1v.s 			page 69


 2561 0012 00F28880 		bhi	.L229
 2562 0016 DFE803F0 		tbb	[pc, r3]
 2563              	.L231:
 2564 001a 1F       		.byte	(.L245-.L231)/2
 2565 001b 47       		.byte	(.L244-.L231)/2
 2566 001c 53       		.byte	(.L243-.L231)/2
 2567 001d 57       		.byte	(.L242-.L231)/2
 2568 001e 5B       		.byte	(.L241-.L231)/2
 2569 001f 5F       		.byte	(.L240-.L231)/2
 2570 0020 63       		.byte	(.L239-.L231)/2
 2571 0021 67       		.byte	(.L238-.L231)/2
 2572 0022 6A       		.byte	(.L237-.L231)/2
 2573 0023 6E       		.byte	(.L236-.L231)/2
 2574 0024 71       		.byte	(.L235-.L231)/2
 2575 0025 74       		.byte	(.L234-.L231)/2
 2576 0026 8D       		.byte	(.L233-.L231)/2
 2577 0027 98       		.byte	(.L232-.L231)/2
 2578 0028 08       		.byte	(.L230-.L231)/2
 2579 0029 00       		.p2align 1
 2580              	.L230:
 338:src/console.c ****   case LASTX: // Last x via RCL L
 339:src/console.c ****     do_now (K11, 0); // RCL
 340:src/console.c ****     do_now (K_RELEASE,0); // release
 341:src/console.c ****     do_now (K15,0); // TAN key
 342:src/console.c ****     r.key_34s = K_RELEASE;
 343:src/console.c ****     r.shift = 0; // set up for release;
 344:src/console.c ****     break;
 345:src/console.c ****   case ONSTO: // flash_backup()
 346:src/console.c ****     flash_backup(OP_SAVE);
 347:src/console.c ****     reset_shift();
 348:src/console.c ****     r = no_key;
 349:src/console.c ****     break;
 350:src/console.c ****   case ONRCL: // flash_restore()
 351:src/console.c ****     flash_restore(OP_LOAD);
 352:src/console.c ****     reset_shift();
 353:src/console.c ****     r = no_key;
 354:src/console.c ****     break;
 355:src/console.c ****   case WRLIB: // save library file
 356:src/console.c ****     save_lib_file(1);
 357:src/console.c ****     reset_shift();
 358:src/console.c ****     r = no_key;
 359:src/console.c ****     break;
 360:src/console.c ****   case LLIB: // load library file
 361:src/console.c ****     load_lib_file(1);
 362:src/console.c ****     reset_shift();
 363:src/console.c ****     r = no_key;
 364:src/console.c ****     break;
 365:src/console.c ****   case WRTST: // save state file
 366:src/console.c ****     save_ram_file(1);
 367:src/console.c ****     reset_shift();
 368:src/console.c ****     r = no_key;
 369:src/console.c ****     break;
 370:src/console.c ****   case LDST:
 371:src/console.c ****     load_ram_file(1);
 372:src/console.c ****     reset_shift();
 373:src/console.c ****     r = no_key;
 374:src/console.c ****     break;
ARM GAS  /tmp/cc1cke1v.s 			page 70


 375:src/console.c ****   case LDPRG:
 376:src/console.c ****     load_prog_file();
 377:src/console.c ****     reset_shift();
 378:src/console.c ****     r = no_key;
 379:src/console.c ****     break;
 380:src/console.c ****   case SVPRG:
 381:src/console.c ****     save_prog_file();
 382:src/console.c ****     reset_shift();
 383:src/console.c ****     r = no_key;
 384:src/console.c ****     break;
 385:src/console.c ****   case HELP:
 386:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 387:src/console.c ****     reset_shift();
 388:src/console.c ****     r = no_key;
 389:src/console.c ****     break;
 390:src/console.c ****   case DOTS:
 391:src/console.c ****     do_all_dots();
 392:src/console.c ****     reset_shift();
 393:src/console.c ****     r = no_key;
 394:src/console.c ****     break;
 395:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 396:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 397:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 398:src/console.c ****     r = no_key;
 399:src/console.c ****     break;
 400:src/console.c ****   case DEFMEN:
 401:src/console.c ****     toggle_default_menu();
 402:src/console.c ****     reset_shift();
 403:src/console.c ****     r = no_key;
 404:src/console.c ****     break;
 405:src/console.c ****   case SETUMEN:
 406:src/console.c ****     build_user_menu();
 407:src/console.c ****     reset_shift();
 408:src/console.c ****     r = no_key;;
 409:src/console.c ****     break;
 410:src/console.c ****   case KCPX:
 411:src/console.c ****     if (CPX_ENABLED) {
 2581              		.loc 2 411 5 is_stmt 1 view .LVU670
 2582              		.loc 2 411 9 is_stmt 0 view .LVU671
 2583 002a 554B     		ldr	r3, .L262
 2584 002c 1B68     		ldr	r3, [r3]
 2585 002e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 2586              		.loc 2 411 8 view .LVU672
 2587 0032 13F04006 		ands	r6, r3, #64
 2588 0036 00F08B80 		beq	.L248
 412:src/console.c ****       set_menu(17);
 2589              		.loc 2 412 7 is_stmt 1 view .LVU673
 2590              	.LVL188:
 2591              	.LBB108:
 2592              	.LBI108:
  85:src/menu.c    ****   int m = current_menu;
 2593              		.loc 1 85 6 view .LVU674
 2594              	.LBB109:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 2595              		.loc 1 86 3 view .LVU675
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 2596              		.loc 1 86 7 is_stmt 0 view .LVU676
ARM GAS  /tmp/cc1cke1v.s 			page 71


 2597 003a 524A     		ldr	r2, .L262+4
 2598 003c 1368     		ldr	r3, [r2]
 2599              	.LVL189:
  87:src/menu.c    ****     current_menu = default_menu;
 2600              		.loc 1 87 3 is_stmt 1 view .LVU677
  87:src/menu.c    ****     current_menu = default_menu;
 2601              		.loc 1 87 6 is_stmt 0 view .LVU678
 2602 003e 112B     		cmp	r3, #17
 2603 0040 00F09780 		beq	.L261
  90:src/menu.c    ****     current_menu = last_menu;
 2604              		.loc 1 90 8 is_stmt 1 view .LVU679
  94:src/menu.c    ****   }
 2605              		.loc 1 94 5 view .LVU680
  94:src/menu.c    ****   }
 2606              		.loc 1 94 18 is_stmt 0 view .LVU681
 2607 0044 1121     		movs	r1, #17
  96:src/menu.c    **** }
 2608              		.loc 1 96 6 view .LVU682
 2609 0046 092B     		cmp	r3, #9
  94:src/menu.c    ****   }
 2610              		.loc 1 94 18 view .LVU683
 2611 0048 1160     		str	r1, [r2]
  96:src/menu.c    **** }
 2612              		.loc 1 96 3 is_stmt 1 view .LVU684
  96:src/menu.c    **** }
 2613              		.loc 1 96 6 is_stmt 0 view .LVU685
 2614 004a 02D0     		beq	.L251
  96:src/menu.c    **** }
 2615              		.loc 1 96 17 view .LVU686
 2616 004c 102B     		cmp	r3, #16
 2617 004e 40F09380 		bne	.L250
 2618              	.L251:
 2619              	.LVL190:
  96:src/menu.c    **** }
 2620              		.loc 1 96 17 view .LVU687
 2621              	.LBE109:
 2622              	.LBE108:
 413:src/console.c ****       reset_shift();
 2623              		.loc 2 413 7 is_stmt 1 view .LVU688
 2624 0052 FFF7FEFF 		bl	reset_shift
 2625              	.LVL191:
 2626              		.loc 2 413 7 is_stmt 0 view .LVU689
 2627 0056 66E0     		b	.L229
 2628              	.LVL192:
 2629              	.L245:
 339:src/console.c ****     do_now (K_RELEASE,0); // release
 2630              		.loc 2 339 5 is_stmt 1 view .LVU690
 2631              	.LBB111:
 2632              	.LBI111:
 329:src/console.c ****   struct _ndmap temp;
 2633              		.loc 2 329 6 view .LVU691
 2634              	.LBB112:
 330:src/console.c ****   temp.key_34s = key;
 2635              		.loc 2 330 3 view .LVU692
 331:src/console.c ****   temp.shift = shift;
 2636              		.loc 2 331 3 view .LVU693
 331:src/console.c ****   temp.shift = shift;
ARM GAS  /tmp/cc1cke1v.s 			page 72


 2637              		.loc 2 331 16 is_stmt 0 view .LVU694
 2638 0058 0723     		movs	r3, #7
 332:src/console.c ****   process_keycode_with_shift (temp);
 2639              		.loc 2 332 14 view .LVU695
 2640 005a 0026     		movs	r6, #0
 331:src/console.c ****   temp.shift = shift;
 2641              		.loc 2 331 16 view .LVU696
 2642 005c 8DF80830 		strb	r3, [sp, #8]
 332:src/console.c ****   process_keycode_with_shift (temp);
 2643              		.loc 2 332 3 is_stmt 1 view .LVU697
 333:src/console.c **** }
 2644              		.loc 2 333 3 is_stmt 0 view .LVU698
 2645 0060 0DF10808 		add	r8, sp, #8
 332:src/console.c ****   process_keycode_with_shift (temp);
 2646              		.loc 2 332 14 view .LVU699
 2647 0064 0396     		str	r6, [sp, #12]
 333:src/console.c **** }
 2648              		.loc 2 333 3 is_stmt 1 view .LVU700
 2649 0066 98E80300 		ldm	r8, {r0, r1}
 2650              	.LVL193:
 333:src/console.c **** }
 2651              		.loc 2 333 3 is_stmt 0 view .LVU701
 2652              	.LBE112:
 2653              	.LBE111:
 2654              	.LBB114:
 2655              	.LBB115:
 331:src/console.c ****   temp.shift = shift;
 2656              		.loc 2 331 16 view .LVU702
 2657 006a 6327     		movs	r7, #99
 2658              	.LBE115:
 2659              	.LBE114:
 2660              	.LBB117:
 2661              	.LBB113:
 333:src/console.c **** }
 2662              		.loc 2 333 3 view .LVU703
 2663 006c FFF7FEFF 		bl	process_keycode_with_shift
 2664              	.LVL194:
 333:src/console.c **** }
 2665              		.loc 2 333 3 view .LVU704
 2666              	.LBE113:
 2667              	.LBE117:
 340:src/console.c ****     do_now (K15,0); // TAN key
 2668              		.loc 2 340 5 is_stmt 1 view .LVU705
 2669              	.LBB118:
 2670              	.LBI114:
 329:src/console.c ****   struct _ndmap temp;
 2671              		.loc 2 329 6 view .LVU706
 2672              	.LBB116:
 330:src/console.c ****   temp.key_34s = key;
 2673              		.loc 2 330 3 view .LVU707
 331:src/console.c ****   temp.shift = shift;
 2674              		.loc 2 331 3 view .LVU708
 332:src/console.c ****   process_keycode_with_shift (temp);
 2675              		.loc 2 332 14 is_stmt 0 view .LVU709
 2676 0070 0396     		str	r6, [sp, #12]
 331:src/console.c ****   temp.shift = shift;
 2677              		.loc 2 331 16 view .LVU710
ARM GAS  /tmp/cc1cke1v.s 			page 73


 2678 0072 8DF80870 		strb	r7, [sp, #8]
 332:src/console.c ****   process_keycode_with_shift (temp);
 2679              		.loc 2 332 3 is_stmt 1 view .LVU711
 333:src/console.c **** }
 2680              		.loc 2 333 3 view .LVU712
 2681 0076 98E80300 		ldm	r8, {r0, r1}
 2682 007a FFF7FEFF 		bl	process_keycode_with_shift
 2683              	.LVL195:
 333:src/console.c **** }
 2684              		.loc 2 333 3 is_stmt 0 view .LVU713
 2685              	.LBE116:
 2686              	.LBE118:
 341:src/console.c ****     r.key_34s = K_RELEASE;
 2687              		.loc 2 341 5 is_stmt 1 view .LVU714
 2688              	.LBB119:
 2689              	.LBI119:
 329:src/console.c ****   struct _ndmap temp;
 2690              		.loc 2 329 6 view .LVU715
 2691              	.LBB120:
 330:src/console.c ****   temp.key_34s = key;
 2692              		.loc 2 330 3 view .LVU716
 331:src/console.c ****   temp.shift = shift;
 2693              		.loc 2 331 3 view .LVU717
 331:src/console.c ****   temp.shift = shift;
 2694              		.loc 2 331 16 is_stmt 0 view .LVU718
 2695 007e 0B23     		movs	r3, #11
 2696 0080 8DF80830 		strb	r3, [sp, #8]
 332:src/console.c ****   process_keycode_with_shift (temp);
 2697              		.loc 2 332 3 is_stmt 1 view .LVU719
 333:src/console.c **** }
 2698              		.loc 2 333 3 view .LVU720
 332:src/console.c ****   process_keycode_with_shift (temp);
 2699              		.loc 2 332 14 is_stmt 0 view .LVU721
 2700 0084 0396     		str	r6, [sp, #12]
 333:src/console.c **** }
 2701              		.loc 2 333 3 view .LVU722
 2702 0086 98E80300 		ldm	r8, {r0, r1}
 2703 008a FFF7FEFF 		bl	process_keycode_with_shift
 2704              	.LVL196:
 333:src/console.c **** }
 2705              		.loc 2 333 3 view .LVU723
 2706              	.LBE120:
 2707              	.LBE119:
 342:src/console.c ****     r.shift = 0; // set up for release;
 2708              		.loc 2 342 5 is_stmt 1 view .LVU724
 343:src/console.c ****     break;
 2709              		.loc 2 343 5 view .LVU725
 344:src/console.c ****   case ONSTO: // flash_backup()
 2710              		.loc 2 344 5 view .LVU726
 343:src/console.c ****     break;
 2711              		.loc 2 343 13 is_stmt 0 view .LVU727
 2712 008e 3146     		mov	r1, r6
 342:src/console.c ****     r.shift = 0; // set up for release;
 2713              		.loc 2 342 15 view .LVU728
 2714 0090 3B46     		mov	r3, r7
 2715              	.LVL197:
 2716              	.L246:
ARM GAS  /tmp/cc1cke1v.s 			page 74


 414:src/console.c ****     }
 415:src/console.c ****     else {
 416:src/console.c ****       do_now (K10, 1);
 417:src/console.c ****       do_now (K_RELEASE, 0);
 418:src/console.c ****       r = no_key;
 419:src/console.c ****     }
 420:src/console.c ****   default:
 421:src/console.c ****     r = no_key;
 422:src/console.c ****   }
 423:src/console.c ****   return r;
 2717              		.loc 2 423 3 is_stmt 1 view .LVU729
 2718              		.loc 2 423 10 is_stmt 0 view .LVU730
 2719 0092 8DF80030 		strb	r3, [sp]
 2720 0096 0191     		str	r1, [sp, #4]
 2721 0098 94E80300 		ldm	r4, {r0, r1}
 2722              	.LVL198:
 2723              		.loc 2 423 10 view .LVU731
 2724 009c 85E80300 		stm	r5, {r0, r1}
 424:src/console.c **** }
 2725              		.loc 2 424 1 view .LVU732
 2726 00a0 2846     		mov	r0, r5
 2727 00a2 04B0     		add	sp, sp, #16
 2728              		.cfi_remember_state
 2729              		.cfi_def_cfa_offset 24
 2730              		@ sp needed
 2731 00a4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2732              	.LVL199:
 2733              	.L244:
 2734              		.cfi_restore_state
 346:src/console.c ****     reset_shift();
 2735              		.loc 2 346 5 is_stmt 1 view .LVU733
 2736 00a8 AD20     		movs	r0, #173
 2737              	.LVL200:
 346:src/console.c ****     reset_shift();
 2738              		.loc 2 346 5 is_stmt 0 view .LVU734
 2739 00aa FFF7FEFF 		bl	flash_backup
 2740              	.LVL201:
 347:src/console.c ****     r = no_key;
 2741              		.loc 2 347 5 is_stmt 1 view .LVU735
 2742              	.L259:
 352:src/console.c ****     r = no_key;
 2743              		.loc 2 352 5 view .LVU736
 2744 00ae FFF7FEFF 		bl	reset_shift
 2745              	.LVL202:
 353:src/console.c ****     break;
 2746              		.loc 2 353 5 view .LVU737
 353:src/console.c ****     break;
 2747              		.loc 2 353 7 is_stmt 0 view .LVU738
 2748 00b2 354B     		ldr	r3, .L262+8
 2749 00b4 93E80300 		ldm	r3, {r0, r1}
 2750 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2751              	.LVL203:
 354:src/console.c ****   case WRLIB: // save library file
 2752              		.loc 2 354 5 is_stmt 1 view .LVU739
 353:src/console.c ****     break;
 2753              		.loc 2 353 7 is_stmt 0 view .LVU740
 2754 00ba 84E80300 		stm	r4, {r0, r1}
ARM GAS  /tmp/cc1cke1v.s 			page 75


 354:src/console.c ****   case WRLIB: // save library file
 2755              		.loc 2 354 5 view .LVU741
 2756 00be E8E7     		b	.L246
 2757              	.LVL204:
 2758              	.L243:
 351:src/console.c ****     reset_shift();
 2759              		.loc 2 351 5 is_stmt 1 view .LVU742
 2760 00c0 AE20     		movs	r0, #174
 2761              	.LVL205:
 351:src/console.c ****     reset_shift();
 2762              		.loc 2 351 5 is_stmt 0 view .LVU743
 2763 00c2 FFF7FEFF 		bl	flash_restore
 2764              	.LVL206:
 2765 00c6 F2E7     		b	.L259
 2766              	.LVL207:
 2767              	.L242:
 356:src/console.c ****     reset_shift();
 2768              		.loc 2 356 5 is_stmt 1 view .LVU744
 2769 00c8 0120     		movs	r0, #1
 2770              	.LVL208:
 356:src/console.c ****     reset_shift();
 2771              		.loc 2 356 5 is_stmt 0 view .LVU745
 2772 00ca FFF7FEFF 		bl	save_lib_file
 2773              	.LVL209:
 357:src/console.c ****     r = no_key;
 2774              		.loc 2 357 5 is_stmt 1 view .LVU746
 2775 00ce EEE7     		b	.L259
 2776              	.LVL210:
 2777              	.L241:
 361:src/console.c ****     reset_shift();
 2778              		.loc 2 361 5 view .LVU747
 2779 00d0 0120     		movs	r0, #1
 2780              	.LVL211:
 361:src/console.c ****     reset_shift();
 2781              		.loc 2 361 5 is_stmt 0 view .LVU748
 2782 00d2 FFF7FEFF 		bl	load_lib_file
 2783              	.LVL212:
 362:src/console.c ****     r = no_key;
 2784              		.loc 2 362 5 is_stmt 1 view .LVU749
 2785 00d6 EAE7     		b	.L259
 2786              	.LVL213:
 2787              	.L240:
 366:src/console.c ****     reset_shift();
 2788              		.loc 2 366 5 view .LVU750
 2789 00d8 0120     		movs	r0, #1
 2790              	.LVL214:
 366:src/console.c ****     reset_shift();
 2791              		.loc 2 366 5 is_stmt 0 view .LVU751
 2792 00da FFF7FEFF 		bl	save_ram_file
 2793              	.LVL215:
 367:src/console.c ****     r = no_key;
 2794              		.loc 2 367 5 is_stmt 1 view .LVU752
 2795 00de E6E7     		b	.L259
 2796              	.LVL216:
 2797              	.L239:
 371:src/console.c ****     reset_shift();
 2798              		.loc 2 371 5 view .LVU753
ARM GAS  /tmp/cc1cke1v.s 			page 76


 2799 00e0 0120     		movs	r0, #1
 2800              	.LVL217:
 371:src/console.c ****     reset_shift();
 2801              		.loc 2 371 5 is_stmt 0 view .LVU754
 2802 00e2 FFF7FEFF 		bl	load_ram_file
 2803              	.LVL218:
 372:src/console.c ****     r = no_key;
 2804              		.loc 2 372 5 is_stmt 1 view .LVU755
 2805 00e6 E2E7     		b	.L259
 2806              	.LVL219:
 2807              	.L238:
 376:src/console.c ****     reset_shift();
 2808              		.loc 2 376 5 view .LVU756
 2809 00e8 FFF7FEFF 		bl	load_prog_file
 2810              	.LVL220:
 377:src/console.c ****     r = no_key;
 2811              		.loc 2 377 5 view .LVU757
 2812 00ec DFE7     		b	.L259
 2813              	.LVL221:
 2814              	.L237:
 386:src/console.c ****     reset_shift();
 2815              		.loc 2 386 5 view .LVU758
 2816 00ee 274B     		ldr	r3, .L262+12
 2817 00f0 2748     		ldr	r0, .L262+16
 2818              	.LVL222:
 386:src/console.c ****     reset_shift();
 2819              		.loc 2 386 5 is_stmt 0 view .LVU759
 2820 00f2 9847     		blx	r3
 2821              	.LVL223:
 387:src/console.c ****     r = no_key;
 2822              		.loc 2 387 5 is_stmt 1 view .LVU760
 2823 00f4 DBE7     		b	.L259
 2824              	.LVL224:
 2825              	.L236:
 381:src/console.c ****     reset_shift();
 2826              		.loc 2 381 5 view .LVU761
 2827 00f6 FFF7FEFF 		bl	save_prog_file
 2828              	.LVL225:
 382:src/console.c ****     r = no_key;
 2829              		.loc 2 382 5 view .LVU762
 2830 00fa D8E7     		b	.L259
 2831              	.LVL226:
 2832              	.L235:
 391:src/console.c ****     reset_shift();
 2833              		.loc 2 391 5 view .LVU763
 2834 00fc FFF7FEFF 		bl	do_all_dots
 2835              	.LVL227:
 392:src/console.c ****     r = no_key;
 2836              		.loc 2 392 5 view .LVU764
 2837 0100 D5E7     		b	.L259
 2838              	.LVL228:
 2839              	.L234:
 396:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 2840              		.loc 2 396 5 view .LVU765
 2841              	.LBB121:
 2842              	.LBI121:
 329:src/console.c ****   struct _ndmap temp;
ARM GAS  /tmp/cc1cke1v.s 			page 77


 2843              		.loc 2 329 6 view .LVU766
 2844              	.LBB122:
 330:src/console.c ****   temp.key_34s = key;
 2845              		.loc 2 330 3 view .LVU767
 331:src/console.c ****   temp.shift = shift;
 2846              		.loc 2 331 3 view .LVU768
 331:src/console.c ****   temp.shift = shift;
 2847              		.loc 2 331 16 is_stmt 0 view .LVU769
 2848 0102 6323     		movs	r3, #99
 332:src/console.c ****   process_keycode_with_shift (temp);
 2849              		.loc 2 332 14 view .LVU770
 2850 0104 0027     		movs	r7, #0
 331:src/console.c ****   temp.shift = shift;
 2851              		.loc 2 331 16 view .LVU771
 2852 0106 8DF80830 		strb	r3, [sp, #8]
 332:src/console.c ****   process_keycode_with_shift (temp);
 2853              		.loc 2 332 3 is_stmt 1 view .LVU772
 332:src/console.c ****   process_keycode_with_shift (temp);
 2854              		.loc 2 332 14 is_stmt 0 view .LVU773
 2855 010a 0397     		str	r7, [sp, #12]
 333:src/console.c **** }
 2856              		.loc 2 333 3 is_stmt 1 view .LVU774
 2857 010c 02AE     		add	r6, sp, #8
 2858 010e 96E80300 		ldm	r6, {r0, r1}
 2859              	.LVL229:
 333:src/console.c **** }
 2860              		.loc 2 333 3 is_stmt 0 view .LVU775
 2861 0112 FFF7FEFF 		bl	process_keycode_with_shift
 2862              	.LVL230:
 333:src/console.c **** }
 2863              		.loc 2 333 3 view .LVU776
 2864              	.LBE122:
 2865              	.LBE121:
 397:src/console.c ****     r = no_key;
 2866              		.loc 2 397 5 is_stmt 1 view .LVU777
 2867              	.LBB123:
 2868              	.LBI123:
 329:src/console.c ****   struct _ndmap temp;
 2869              		.loc 2 329 6 view .LVU778
 2870              	.LBB124:
 330:src/console.c ****   temp.key_34s = key;
 2871              		.loc 2 330 3 view .LVU779
 331:src/console.c ****   temp.shift = shift;
 2872              		.loc 2 331 3 view .LVU780
 331:src/console.c ****   temp.shift = shift;
 2873              		.loc 2 331 16 is_stmt 0 view .LVU781
 2874 0116 3323     		movs	r3, #51
 332:src/console.c ****   process_keycode_with_shift (temp);
 2875              		.loc 2 332 14 view .LVU782
 2876 0118 0397     		str	r7, [sp, #12]
 331:src/console.c ****   temp.shift = shift;
 2877              		.loc 2 331 16 view .LVU783
 2878 011a 8DF80830 		strb	r3, [sp, #8]
 332:src/console.c ****   process_keycode_with_shift (temp);
 2879              		.loc 2 332 3 is_stmt 1 view .LVU784
 333:src/console.c **** }
 2880              		.loc 2 333 3 view .LVU785
ARM GAS  /tmp/cc1cke1v.s 			page 78


 2881 011e 96E80300 		ldm	r6, {r0, r1}
 2882              	.LVL231:
 2883              	.L260:
 333:src/console.c **** }
 2884              		.loc 2 333 3 is_stmt 0 view .LVU786
 2885              	.LBE124:
 2886              	.LBE123:
 2887              	.LBB125:
 2888              	.LBB126:
 2889 0122 FFF7FEFF 		bl	process_keycode_with_shift
 2890              	.LVL232:
 2891              	.LBE126:
 2892              	.LBE125:
 418:src/console.c ****     }
 2893              		.loc 2 418 7 is_stmt 1 view .LVU787
 2894              	.L229:
 421:src/console.c ****   }
 2895              		.loc 2 421 5 view .LVU788
 421:src/console.c ****   }
 2896              		.loc 2 421 7 is_stmt 0 view .LVU789
 2897 0126 184B     		ldr	r3, .L262+8
 2898 0128 93E80300 		ldm	r3, {r0, r1}
 2899 012c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2900              	.LVL233:
 421:src/console.c ****   }
 2901              		.loc 2 421 7 view .LVU790
 2902 012e 84E80300 		stm	r4, {r0, r1}
 2903 0132 AEE7     		b	.L246
 2904              	.LVL234:
 2905              	.L233:
 401:src/console.c ****     reset_shift();
 2906              		.loc 2 401 5 is_stmt 1 view .LVU791
 2907              	.LBB128:
 2908              	.LBI128:
 103:src/menu.c    ****   if (current_menu == default_menu) {
 2909              		.loc 1 103 6 view .LVU792
 2910              	.LBB129:
 104:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2911              		.loc 1 104 3 view .LVU793
 104:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2912              		.loc 1 104 20 is_stmt 0 view .LVU794
 2913 0134 1749     		ldr	r1, .L262+20
 2914 0136 134A     		ldr	r2, .L262+4
 2915 0138 0868     		ldr	r0, [r1]
 2916              	.LVL235:
 104:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2917              		.loc 1 104 6 view .LVU795
 2918 013a 1368     		ldr	r3, [r2]
 2919 013c 8342     		cmp	r3, r0
 2920 013e B6D1     		bne	.L259
 105:src/menu.c    ****   }
 2921              		.loc 1 105 5 is_stmt 1 view .LVU796
 105:src/menu.c    ****   }
 2922              		.loc 1 105 38 is_stmt 0 view .LVU797
 2923 0140 C3F10F03 		rsb	r3, r3, #15
 105:src/menu.c    ****   }
 2924              		.loc 1 105 33 view .LVU798
ARM GAS  /tmp/cc1cke1v.s 			page 79


 2925 0144 0B60     		str	r3, [r1]
 105:src/menu.c    ****   }
 2926              		.loc 1 105 18 view .LVU799
 2927 0146 1360     		str	r3, [r2]
 2928              	.LBE129:
 2929              	.LBE128:
 402:src/console.c ****     r = no_key;
 2930              		.loc 2 402 5 is_stmt 1 view .LVU800
 2931 0148 B1E7     		b	.L259
 2932              	.LVL236:
 2933              	.L232:
 406:src/console.c ****     reset_shift();
 2934              		.loc 2 406 5 view .LVU801
 2935 014a FFF7FEFF 		bl	build_user_menu
 2936              	.LVL237:
 407:src/console.c ****     r = no_key;;
 2937              		.loc 2 407 5 view .LVU802
 2938 014e AEE7     		b	.L259
 2939              	.LVL238:
 2940              	.L248:
 416:src/console.c ****       do_now (K_RELEASE, 0);
 2941              		.loc 2 416 7 view .LVU803
 2942              	.LBB130:
 2943              	.LBI130:
 329:src/console.c ****   struct _ndmap temp;
 2944              		.loc 2 329 6 view .LVU804
 2945              	.LBB131:
 330:src/console.c ****   temp.key_34s = key;
 2946              		.loc 2 330 3 view .LVU805
 331:src/console.c ****   temp.shift = shift;
 2947              		.loc 2 331 3 view .LVU806
 332:src/console.c ****   process_keycode_with_shift (temp);
 2948              		.loc 2 332 14 is_stmt 0 view .LVU807
 2949 0150 0123     		movs	r3, #1
 331:src/console.c ****   temp.shift = shift;
 2950              		.loc 2 331 16 view .LVU808
 2951 0152 0622     		movs	r2, #6
 332:src/console.c ****   process_keycode_with_shift (temp);
 2952              		.loc 2 332 14 view .LVU809
 2953 0154 0393     		str	r3, [sp, #12]
 331:src/console.c ****   temp.shift = shift;
 2954              		.loc 2 331 16 view .LVU810
 2955 0156 8DF80820 		strb	r2, [sp, #8]
 332:src/console.c ****   process_keycode_with_shift (temp);
 2956              		.loc 2 332 3 is_stmt 1 view .LVU811
 333:src/console.c **** }
 2957              		.loc 2 333 3 view .LVU812
 2958 015a 02AF     		add	r7, sp, #8
 2959 015c 97E80300 		ldm	r7, {r0, r1}
 2960              	.LVL239:
 333:src/console.c **** }
 2961              		.loc 2 333 3 is_stmt 0 view .LVU813
 2962 0160 FFF7FEFF 		bl	process_keycode_with_shift
 2963              	.LVL240:
 333:src/console.c **** }
 2964              		.loc 2 333 3 view .LVU814
 2965              	.LBE131:
ARM GAS  /tmp/cc1cke1v.s 			page 80


 2966              	.LBE130:
 417:src/console.c ****       r = no_key;
 2967              		.loc 2 417 7 is_stmt 1 view .LVU815
 2968              	.LBB132:
 2969              	.LBI125:
 329:src/console.c ****   struct _ndmap temp;
 2970              		.loc 2 329 6 view .LVU816
 2971              	.LBB127:
 330:src/console.c ****   temp.key_34s = key;
 2972              		.loc 2 330 3 view .LVU817
 331:src/console.c ****   temp.shift = shift;
 2973              		.loc 2 331 3 view .LVU818
 331:src/console.c ****   temp.shift = shift;
 2974              		.loc 2 331 16 is_stmt 0 view .LVU819
 2975 0164 6323     		movs	r3, #99
 332:src/console.c ****   process_keycode_with_shift (temp);
 2976              		.loc 2 332 14 view .LVU820
 2977 0166 0396     		str	r6, [sp, #12]
 331:src/console.c ****   temp.shift = shift;
 2978              		.loc 2 331 16 view .LVU821
 2979 0168 8DF80830 		strb	r3, [sp, #8]
 332:src/console.c ****   process_keycode_with_shift (temp);
 2980              		.loc 2 332 3 is_stmt 1 view .LVU822
 333:src/console.c **** }
 2981              		.loc 2 333 3 view .LVU823
 2982 016c 97E80300 		ldm	r7, {r0, r1}
 2983 0170 D7E7     		b	.L260
 2984              	.LVL241:
 2985              	.L261:
 333:src/console.c **** }
 2986              		.loc 2 333 3 is_stmt 0 view .LVU824
 2987              	.LBE127:
 2988              	.LBE132:
 2989              	.LBB133:
 2990              	.LBB110:
  88:src/menu.c    ****   }
 2991              		.loc 1 88 5 is_stmt 1 view .LVU825
  88:src/menu.c    ****   }
 2992              		.loc 1 88 18 is_stmt 0 view .LVU826
 2993 0172 0849     		ldr	r1, .L262+20
 2994 0174 0968     		ldr	r1, [r1]
 2995 0176 1160     		str	r1, [r2]
  96:src/menu.c    **** }
 2996              		.loc 1 96 3 is_stmt 1 view .LVU827
 2997              	.L250:
  96:src/menu.c    **** }
 2998              		.loc 1 96 32 view .LVU828
  96:src/menu.c    **** }
 2999              		.loc 1 96 42 is_stmt 0 view .LVU829
 3000 0178 074A     		ldr	r2, .L262+24
 3001 017a 1360     		str	r3, [r2]
 3002 017c 69E7     		b	.L251
 3003              	.L263:
 3004 017e 00BF     		.align	2
 3005              	.L262:
 3006 0180 00000000 		.word	main_ram
 3007 0184 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/cc1cke1v.s 			page 81


 3008 0188 00000000 		.word	.LANCHOR11
 3009 018c 49040008 		.word	134218825
 3010 0190 00000000 		.word	.LC11
 3011 0194 00000000 		.word	.LANCHOR2
 3012 0198 00000000 		.word	.LANCHOR3
 3013              	.LBE110:
 3014              	.LBE133:
 3015              		.cfi_endproc
 3016              	.LFE30:
 3018              		.section	.text.program_main,"ax",%progbits
 3019              		.align	1
 3020              		.p2align 2,,3
 3021              		.global	program_main
 3022              		.syntax unified
 3023              		.thumb
 3024              		.thumb_func
 3025              		.fpu fpv4-sp-d16
 3027              	program_main:
 3028              	.LFB31:
 425:src/console.c **** 
 426:src/console.c **** void program_main(){
 3029              		.loc 2 426 20 is_stmt 1 view -0
 3030              		.cfi_startproc
 3031              		@ args = 0, pretend = 0, frame = 16
 3032              		@ frame_needed = 0, uses_anonymous_args = 0
 427:src/console.c ****   int c;
 3033              		.loc 2 427 3 view .LVU831
 428:src/console.c ****   struct _ndmap remapped;
 3034              		.loc 2 428 3 view .LVU832
 429:src/console.c **** 
 430:src/console.c ****   init_mem();
 3035              		.loc 2 430 3 view .LVU833
 426:src/console.c ****   int c;
 3036              		.loc 2 426 20 is_stmt 0 view .LVU834
 3037 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3038              		.cfi_def_cfa_offset 36
 3039              		.cfi_offset 4, -36
 3040              		.cfi_offset 5, -32
 3041              		.cfi_offset 6, -28
 3042              		.cfi_offset 7, -24
 3043              		.cfi_offset 8, -20
 3044              		.cfi_offset 9, -16
 3045              		.cfi_offset 10, -12
 3046              		.cfi_offset 11, -8
 3047              		.cfi_offset 14, -4
 3048 0004 85B0     		sub	sp, sp, #20
 3049              		.cfi_def_cfa_offset 56
 3050              		.loc 2 430 3 view .LVU835
 3051 0006 FFF7FEFF 		bl	init_mem
 3052              	.LVL242:
 431:src/console.c ****   init_RegionTab();
 3053              		.loc 2 431 3 is_stmt 1 view .LVU836
 3054 000a FFF7FEFF 		bl	init_RegionTab
 3055              	.LVL243:
 432:src/console.c ****   init_34s();
 3056              		.loc 2 432 3 view .LVU837
 3057 000e FFF7FEFF 		bl	init_34s
ARM GAS  /tmp/cc1cke1v.s 			page 82


 3058              	.LVL244:
 433:src/console.c ****   State2.flags = 1;  
 3059              		.loc 2 433 3 view .LVU838
 3060              		.loc 2 433 16 is_stmt 0 view .LVU839
 3061 0012 A74A     		ldr	r2, .L387
 3062 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3063 0016 43F00103 		orr	r3, r3, #1
 3064 001a 1376     		strb	r3, [r2, #24]
 434:src/console.c ****   check_create_wp34sdir();
 3065              		.loc 2 434 3 is_stmt 1 view .LVU840
 3066 001c FFF7FEFF 		bl	check_create_wp34sdir
 3067              	.LVL245:
 435:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3068              		.loc 2 435 3 view .LVU841
 3069              		.loc 2 435 8 is_stmt 0 view .LVU842
 3070 0020 0020     		movs	r0, #0
 3071 0022 FFF7FEFF 		bl	load_ram_file
 3072              	.LVL246:
 3073              		.loc 2 435 6 view .LVU843
 3074 0026 08B9     		cbnz	r0, .L265
 3075              		.loc 2 435 26 is_stmt 1 discriminator 1 view .LVU844
 3076              		.loc 2 435 34 is_stmt 0 discriminator 1 view .LVU845
 3077 0028 A24B     		ldr	r3, .L387+4
 3078 002a 1860     		str	r0, [r3]
 3079              	.L265:
 436:src/console.c ****   load_backup_file(0);
 3080              		.loc 2 436 3 is_stmt 1 view .LVU846
 437:src/console.c ****   load_lib_file(0);
 438:src/console.c ****   t20->newln = 0;
 3081              		.loc 2 438 3 is_stmt 0 view .LVU847
 3082 002c A24C     		ldr	r4, .L387+8
 3083              	.LBB149:
 3084              	.LBB150:
 118:src/menu.c    **** }
 3085              		.loc 1 118 3 view .LVU848
 3086 002e A34E     		ldr	r6, .L387+12
 3087              	.LBE150:
 3088              	.LBE149:
 3089              	.LBB152:
 3090              	.LBB153:
  91:src/console.c ****     }
 3091              		.loc 2 91 58 view .LVU849
 3092 0030 DFF808B3 		ldr	fp, .L387+140
 3093              	.LBE153:
 3094              	.LBE152:
 436:src/console.c ****   load_lib_file(0);
 3095              		.loc 2 436 3 view .LVU850
 3096 0034 0020     		movs	r0, #0
 3097 0036 FFF7FEFF 		bl	load_backup_file
 3098              	.LVL247:
 437:src/console.c ****   t20->newln = 0;
 3099              		.loc 2 437 3 is_stmt 1 view .LVU851
 3100 003a 0020     		movs	r0, #0
 3101 003c FFF7FEFF 		bl	load_lib_file
 3102              	.LVL248:
 3103              		.loc 2 438 3 view .LVU852
 3104 0040 236B     		ldr	r3, [r4, #48]
ARM GAS  /tmp/cc1cke1v.s 			page 83


 439:src/console.c ****   t20->lnfill = 0;
 3105              		.loc 2 439 3 view .LVU853
 440:src/console.c ****   t20->fixed = 1;
 3106              		.loc 2 440 3 view .LVU854
 441:src/console.c ****   t20->xspc = -2;
 442:src/console.c ****   t20->bgfill = 0;
 443:src/console.c ****   run_menu_item_app = run_menu_item;
 3107              		.loc 2 443 21 is_stmt 0 view .LVU855
 3108 0042 9F49     		ldr	r1, .L387+16
 444:src/console.c ****   menu_line_str_app = menu_line_str;
 3109              		.loc 2 444 21 view .LVU856
 3110 0044 9F4A     		ldr	r2, .L387+20
 440:src/console.c ****   t20->fixed = 1;
 3111              		.loc 2 440 14 view .LVU857
 3112 0046 0120     		movs	r0, #1
 3113 0048 1874     		strb	r0, [r3, #16]
 441:src/console.c ****   t20->xspc = -2;
 3114              		.loc 2 441 3 is_stmt 1 view .LVU858
 442:src/console.c ****   run_menu_item_app = run_menu_item;
 3115              		.loc 2 442 15 is_stmt 0 view .LVU859
 3116 004a 0025     		movs	r5, #0
 441:src/console.c ****   t20->xspc = -2;
 3117              		.loc 2 441 13 view .LVU860
 3118 004c FE20     		movs	r0, #254
 3119 004e 9873     		strb	r0, [r3, #14]
 442:src/console.c ****   run_menu_item_app = run_menu_item;
 3120              		.loc 2 442 3 is_stmt 1 view .LVU861
 442:src/console.c ****   run_menu_item_app = run_menu_item;
 3121              		.loc 2 442 15 is_stmt 0 view .LVU862
 3122 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 438:src/console.c ****   t20->lnfill = 0;
 3123              		.loc 2 438 14 view .LVU863
 3124 0052 1D75     		strb	r5, [r3, #20]
 443:src/console.c ****   menu_line_str_app = menu_line_str;
 3125              		.loc 2 443 3 is_stmt 1 view .LVU864
 3126              		.loc 2 444 21 is_stmt 0 view .LVU865
 3127 0054 C4E90312 		strd	r1, r2, [r4, #12]
 445:src/console.c **** 
 446:src/console.c ****   display();
 3128              		.loc 2 446 3 is_stmt 1 view .LVU866
 3129 0058 FFF7FEFF 		bl	display
 3130              	.LVL249:
 447:src/console.c ****   display_current_menu();
 3131              		.loc 2 447 3 view .LVU867
 3132              	.LBB165:
 3133              	.LBI149:
 117:src/menu.c    ****   display_menu (current_menu);
 3134              		.loc 1 117 6 view .LVU868
 3135              	.LBB151:
 118:src/menu.c    **** }
 3136              		.loc 1 118 3 view .LVU869
 3137 005c 3068     		ldr	r0, [r6]
 3138 005e FFF7FEFF 		bl	display_menu
 3139              	.LVL250:
 3140              	.LBE151:
 3141              	.LBE165:
 448:src/console.c ****   lcd_refresh();
ARM GAS  /tmp/cc1cke1v.s 			page 84


 3142              		.loc 2 448 3 view .LVU870
 3143 0062 994B     		ldr	r3, .L387+24
 3144 0064 9847     		blx	r3
 3145              	.LVL251:
 449:src/console.c ****   JustDisplayed = 0;
 3146              		.loc 2 449 3 view .LVU871
 3147              		.loc 2 449 17 is_stmt 0 view .LVU872
 3148 0066 994B     		ldr	r3, .L387+28
 3149              	.LBB166:
 3150              	.LBB155:
  91:src/console.c ****     }
 3151              		.loc 2 91 58 view .LVU873
 3152 0068 0BF1B808 		add	r8, fp, #184
 3153              	.LBE155:
 3154              	.LBE166:
 3155              		.loc 2 449 17 view .LVU874
 3156 006c 1D60     		str	r5, [r3]
 3157              	.L266:
 450:src/console.c ****   /*
 451:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 452:src/console.c ****     Sleeps peacefully while waiting for a key.
 453:src/console.c ****     Handles (in principle!) turning off and on.
 454:src/console.c ****     =================
 455:src/console.c ****     Main event loop
 456:src/console.c ****     =================
 457:src/console.c **** 
 458:src/console.c ****     Status flags:
 459:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 460:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 461:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 462:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 463:src/console.c ****   */
 464:src/console.c ****   for(;;) {
 3158              		.loc 2 464 3 is_stmt 1 view .LVU875
 465:src/console.c **** 
 466:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 3159              		.loc 2 466 5 view .LVU876
 3160              		.loc 2 466 10 is_stmt 0 view .LVU877
 3161 006e 2368     		ldr	r3, [r4]
 3162              		.loc 2 466 8 view .LVU878
 3163 0070 9B05     		lsls	r3, r3, #22
 3164 0072 5FD5     		bpl	.L267
 3165              		.loc 2 466 30 discriminator 1 view .LVU879
 3166 0074 2368     		ldr	r3, [r4]
 3167              		.loc 2 466 27 discriminator 1 view .LVU880
 3168 0076 5F07     		lsls	r7, r3, #29
 3169 0078 5CD5     		bpl	.L267
 467:src/console.c ****       {
 468:src/console.c **** 	CLR_ST(STAT_RUNNING);
 3170              		.loc 2 468 2 is_stmt 1 view .LVU881
 3171 007a 2368     		ldr	r3, [r4]
 469:src/console.c **** 	sys_sleep();
 3172              		.loc 2 469 2 is_stmt 0 view .LVU882
 3173 007c 944A     		ldr	r2, .L387+32
 468:src/console.c **** 	sys_sleep();
 3174              		.loc 2 468 2 view .LVU883
 3175 007e 23F00203 		bic	r3, r3, #2
ARM GAS  /tmp/cc1cke1v.s 			page 85


 3176 0082 2360     		str	r3, [r4]
 3177              		.loc 2 469 2 is_stmt 1 view .LVU884
 3178 0084 9047     		blx	r2
 3179              	.LVL252:
 3180              	.L268:
 470:src/console.c ****       }
 471:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 472:src/console.c ****     {
 473:src/console.c ****       CLR_ST(STAT_RUNNING);
 474:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 475:src/console.c ****       sys_sleep();
 476:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 477:src/console.c **** 	key_push (K_HEARTBEAT);
 478:src/console.c **** 	if (Pause > 0) Pause--;
 479:src/console.c ****       }
 480:src/console.c ****       sys_timer_disable(0); // stop timer
 481:src/console.c ****     }
 482:src/console.c ****     
 483:src/console.c ****     // Wakeup in off state or going to sleep
 484:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3181              		.loc 2 484 5 view .LVU885
 3182              		.loc 2 484 9 is_stmt 0 view .LVU886
 3183 0086 2368     		ldr	r3, [r4]
 3184              		.loc 2 484 8 view .LVU887
 3185 0088 9D05     		lsls	r5, r3, #22
 3186 008a 79D4     		bmi	.L274
 3187              	.L364:
 3188              		.loc 2 484 29 discriminator 1 view .LVU888
 3189 008c 2368     		ldr	r3, [r4]
 3190              		.loc 2 484 26 discriminator 1 view .LVU889
 3191 008e 5807     		lsls	r0, r3, #29
 3192 0090 76D4     		bmi	.L274
 485:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 486:src/console.c ****         // Going to off mode
 487:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 488:src/console.c ****         draw_power_off_image(1);
 489:src/console.c **** 
 490:src/console.c ****         LCD_power_off(0);
 491:src/console.c ****         SET_ST(STAT_SUSPENDED);
 492:src/console.c ****         SET_ST(STAT_OFF);
 493:src/console.c ****       }
 494:src/console.c ****       // Already in OFF -> just continue to sleep above
 495:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 496:src/console.c ****       // thus reaching the sleep()
 497:src/console.c ****     }
 498:src/console.c **** 
 499:src/console.c ****     // Well, we are woken-up
 500:src/console.c ****     SET_ST(STAT_RUNNING);
 3193              		.loc 2 500 5 is_stmt 1 view .LVU890
 3194 0092 2368     		ldr	r3, [r4]
 3195 0094 43F00203 		orr	r3, r3, #2
 3196 0098 2360     		str	r3, [r4]
 501:src/console.c **** 
 502:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 503:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3197              		.loc 2 503 5 view .LVU891
 3198 009a 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cc1cke1v.s 			page 86


 3199 009c 23F00403 		bic	r3, r3, #4
 3200 00a0 2360     		str	r3, [r4]
 504:src/console.c **** 
 505:src/console.c ****     // Get up from OFF state
 506:src/console.c ****     if ( ST(STAT_OFF) ) {
 3201              		.loc 2 506 5 view .LVU892
 3202              		.loc 2 506 10 is_stmt 0 view .LVU893
 3203 00a2 2368     		ldr	r3, [r4]
 3204              		.loc 2 506 8 view .LVU894
 3205 00a4 D906     		lsls	r1, r3, #27
 3206 00a6 0ED5     		bpl	.L279
 507:src/console.c ****       LCD_power_on();
 3207              		.loc 2 507 7 is_stmt 1 view .LVU895
 3208 00a8 8A4B     		ldr	r3, .L387+36
 3209 00aa 9847     		blx	r3
 3210              	.LVL253:
 508:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3211              		.loc 2 508 7 view .LVU896
 3212 00ac 8A4B     		ldr	r3, .L387+40
 3213 00ae 9847     		blx	r3
 3214              	.LVL254:
 509:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3215              		.loc 2 509 7 view .LVU897
 3216 00b0 8A4B     		ldr	r3, .L387+44
 3217 00b2 9847     		blx	r3
 3218              	.LVL255:
 510:src/console.c **** 
 511:src/console.c ****       CLR_ST(STAT_OFF);
 3219              		.loc 2 511 7 view .LVU898
 3220 00b4 2368     		ldr	r3, [r4]
 512:src/console.c **** 
 513:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3221              		.loc 2 513 13 is_stmt 0 view .LVU899
 3222 00b6 8A4A     		ldr	r2, .L387+48
 511:src/console.c **** 
 3223              		.loc 2 511 7 view .LVU900
 3224 00b8 23F01003 		bic	r3, r3, #16
 3225 00bc 2360     		str	r3, [r4]
 3226              		.loc 2 513 7 is_stmt 1 view .LVU901
 3227              		.loc 2 513 13 is_stmt 0 view .LVU902
 3228 00be 9047     		blx	r2
 3229              	.LVL256:
 3230              		.loc 2 513 10 view .LVU903
 3231 00c0 08B9     		cbnz	r0, .L279
 514:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3232              		.loc 2 514 9 is_stmt 1 view .LVU904
 3233 00c2 884B     		ldr	r3, .L387+52
 3234 00c4 9847     		blx	r3
 3235              	.LVL257:
 3236              	.L279:
 515:src/console.c ****     }
 516:src/console.c **** 
 517:src/console.c ****     // Key is ready -> clear auto off timer
 518:src/console.c ****     //    if ( !key_empty() )
 519:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 520:src/console.c ****     // Fetch the key
 521:src/console.c ****     //  < 0 -> No key event
ARM GAS  /tmp/cc1cke1v.s 			page 87


 522:src/console.c ****     //  > 0 -> Key pressed
 523:src/console.c ****     // == 0 -> Key released
 524:src/console.c ****     c = key_pop();
 3237              		.loc 2 524 5 view .LVU905
 3238              		.loc 2 524 9 is_stmt 0 view .LVU906
 3239 00c6 884B     		ldr	r3, .L387+56
 3240 00c8 9847     		blx	r3
 3241              	.LVL258:
 525:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 3242              		.loc 2 525 8 view .LVU907
 3243 00ca 6228     		cmp	r0, #98
 524:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 3244              		.loc 2 524 9 view .LVU908
 3245 00cc 0546     		mov	r5, r0
 3246              	.LVL259:
 3247              		.loc 2 525 5 is_stmt 1 view .LVU909
 3248              		.loc 2 525 8 is_stmt 0 view .LVU910
 3249 00ce 71D0     		beq	.L281
 3250              		.loc 2 525 29 discriminator 1 view .LVU911
 3251 00d0 0028     		cmp	r0, #0
 3252 00d2 6CDD     		ble	.L282
 526:src/console.c ****       reset_auto_off();
 3253              		.loc 2 526 7 is_stmt 1 view .LVU912
 3254 00d4 854B     		ldr	r3, .L387+60
 3255 00d6 9847     		blx	r3
 3256              	.LVL260:
 527:src/console.c ****       start_key_timer();
 3257              		.loc 2 527 7 view .LVU913
 3258              	.LBB167:
 3259              	.LBI167:
 271:src/console.c ****     start_ticks = get_rtc_ticks();
 3260              		.loc 2 271 6 view .LVU914
 3261              	.LBB168:
 272:src/console.c **** }
 3262              		.loc 2 272 5 view .LVU915
 272:src/console.c **** }
 3263              		.loc 2 272 19 is_stmt 0 view .LVU916
 3264 00d8 854B     		ldr	r3, .L387+64
 3265 00da 9847     		blx	r3
 3266              	.LVL261:
 272:src/console.c **** }
 3267              		.loc 2 272 17 view .LVU917
 3268 00dc 854B     		ldr	r3, .L387+68
 3269              	.LBE168:
 3270              	.LBE167:
 3271              	.LBB170:
 3272              	.LBB156:
  61:src/console.c **** 
 3273              		.loc 2 61 6 view .LVU918
 3274 00de 632D     		cmp	r5, #99
 3275              	.LBE156:
 3276              	.LBE170:
 3277              	.LBB171:
 3278              	.LBB169:
 272:src/console.c **** }
 3279              		.loc 2 272 17 view .LVU919
 3280 00e0 1860     		str	r0, [r3]
ARM GAS  /tmp/cc1cke1v.s 			page 88


 3281              	.LBE169:
 3282              	.LBE171:
 528:src/console.c ****     }
 529:src/console.c ****     if (c >= 0) {
 3283              		.loc 2 529 5 is_stmt 1 view .LVU920
 530:src/console.c ****       remapped = remap(c);
 3284              		.loc 2 530 7 view .LVU921
 3285              	.LVL262:
 3286              	.LBB172:
 3287              	.LBI152:
  53:src/console.c **** 
 3288              		.loc 2 53 22 view .LVU922
 3289              	.LBB157:
  55:src/console.c **** 
 3290              		.loc 2 55 3 view .LVU923
 3291              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3292              		.loc 3 1 1 view .LVU924
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
ARM GAS  /tmp/cc1cke1v.s 			page 89


  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3293              		.loc 3 59 3 view .LVU925
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU, 14}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  96:src/keytran.c ****     {K_SETMENU, USER_MENU}, // select user menu
ARM GAS  /tmp/cc1cke1v.s 			page 90


  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3294              		.loc 3 117 3 view .LVU926
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
ARM GAS  /tmp/cc1cke1v.s 			page 91


 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_MULTI, SETUMEN}, // Set up user menu
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3295              		.loc 3 175 1 view .LVU927
 176:src/keytran.c ****     {K_RELEASE, -1},
 177:src/keytran.c ****     // Top row of DM42 1--6
 178:src/keytran.c ****     {K00, -1},
 179:src/keytran.c ****     {K01, -1},
 180:src/keytran.c ****     {K02, -1},
 181:src/keytran.c ****     {K03, -1},
 182:src/keytran.c ****     {K04, -1},
 183:src/keytran.c ****     {K05, -1},
 184:src/keytran.c ****     // Next row of DM42 7--12
 185:src/keytran.c ****     {K10, -1},
 186:src/keytran.c ****     {K11, -1},
 187:src/keytran.c ****     {K12, -1},
 188:src/keytran.c ****     {K13, -1},
 189:src/keytran.c ****     {K14, -1},
 190:src/keytran.c ****     {K15, -1},
 191:src/keytran.c ****     // Third row of DM42 13--17
 192:src/keytran.c ****     {K20, -1},
 193:src/keytran.c ****     {K21, -1},
 194:src/keytran.c ****     {K22, -1},
 195:src/keytran.c ****     {K23, -1},
 196:src/keytran.c ****     {K24, -1},
 197:src/keytran.c ****     // Fourth row of DM42 18--22
 198:src/keytran.c ****     {K30, -1},
 199:src/keytran.c ****     {K31, -1},
 200:src/keytran.c ****     {K32, -1},
 201:src/keytran.c ****     {K33, -1},
 202:src/keytran.c ****     {K34, -1},
 203:src/keytran.c ****     // Fifth row of DM42 23--27
 204:src/keytran.c ****     {K40, -1},
 205:src/keytran.c ****     {K41, -1},
 206:src/keytran.c ****     {K42, -1},
 207:src/keytran.c ****     {K43, -1},
 208:src/keytran.c ****     {K44, -1},
ARM GAS  /tmp/cc1cke1v.s 			page 92


 209:src/keytran.c ****     // Sixth row of DM42 28--32
 210:src/keytran.c ****     {K50, -1},
 211:src/keytran.c ****     {K51, -1},
 212:src/keytran.c ****     {K52, -1},
 213:src/keytran.c ****     {K53, -1},
 214:src/keytran.c ****     {K54, -1},
 215:src/keytran.c ****     // Last row of DM42 33--37
 216:src/keytran.c ****     {K60, -1},
 217:src/keytran.c ****     {K61, -1},
 218:src/keytran.c ****     {K62, -1},
 219:src/keytran.c ****     {K63, -1},
 220:src/keytran.c ****     {K64, -1},
 221:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 222:src/keytran.c ****     {K_NOP, -1},
 223:src/keytran.c ****     {K_NOP, -1},
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 227:src/keytran.c ****     {K_CMPLX, -1},
 228:src/keytran.c ****     {K_NOP, -1},
 229:src/keytran.c ****     {K_NOP, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c **** };
 232:src/keytran.c **** 
 233:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3296              		.loc 3 233 1 view .LVU928
  59:src/console.c **** 
 3297              		.loc 2 59 3 view .LVU929
  61:src/console.c **** 
 3298              		.loc 2 61 3 view .LVU930
  61:src/console.c **** 
 3299              		.loc 2 61 6 is_stmt 0 view .LVU931
 3300 00e2 00F0E380 		beq	.L361
  63:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3301              		.loc 2 63 3 is_stmt 1 view .LVU932
  63:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3302              		.loc 2 63 6 is_stmt 0 view .LVU933
 3303 00e6 2C2D     		cmp	r5, #44
 3304 00e8 00F0B480 		beq	.L335
 3305              	.LVL263:
 3306              	.L334:
  68:src/console.c ****     return mapping_running[c];
 3307              		.loc 2 68 3 is_stmt 1 view .LVU934
  68:src/console.c ****     return mapping_running[c];
 3308              		.loc 2 68 15 is_stmt 0 view .LVU935
 3309 00ec 824A     		ldr	r2, .L387+72
 3310 00ee 834B     		ldr	r3, .L387+76
 3311 00f0 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3312 00f4 1F68     		ldr	r7, [r3]
  68:src/console.c ****     return mapping_running[c];
 3313              		.loc 2 68 6 view .LVU936
 3314 00f6 59EA0707 		orrs	r7, r9, r7
 3315 00fa 40F0CA80 		bne	.L362
  72:src/console.c ****     switch (c) {
 3316              		.loc 2 72 3 is_stmt 1 view .LVU937
  72:src/console.c ****     switch (c) {
 3317              		.loc 2 72 6 is_stmt 0 view .LVU938
ARM GAS  /tmp/cc1cke1v.s 			page 93


 3318 00fe 3368     		ldr	r3, [r6]
 3319 0100 632B     		cmp	r3, #99
 3320 0102 A5F12603 		sub	r3, r5, #38
 3321 0106 0AD0     		beq	.L363
  95:src/console.c ****     case KEY_F1:
 3322              		.loc 2 95 5 is_stmt 1 view .LVU939
 3323 0108 052B     		cmp	r3, #5
 3324 010a 00F25081 		bhi	.L288
 3325 010e DFE813F0 		tbh	[pc, r3, lsl #1]
 3326              	.L304:
 3327 0112 9701     		.2byte	(.L309-.L304)/2
 3328 0114 A001     		.2byte	(.L308-.L304)/2
 3329 0116 A901     		.2byte	(.L307-.L304)/2
 3330 0118 8901     		.2byte	(.L306-.L304)/2
 3331 011a 7601     		.2byte	(.L305-.L304)/2
 3332 011c 5C01     		.2byte	(.L303-.L304)/2
 3333              		.p2align 1
 3334              	.L363:
  73:src/console.c ****     case KEY_F1:
 3335              		.loc 2 73 5 view .LVU940
 3336 011e 052B     		cmp	r3, #5
 3337 0120 00F24581 		bhi	.L288
 3338 0124 DFE813F0 		tbh	[pc, r3, lsl #1]
 3339              	.L290:
 3340 0128 E701     		.2byte	(.L295-.L290)/2
 3341 012a D601     		.2byte	(.L294-.L290)/2
 3342 012c 1B01     		.2byte	(.L293-.L290)/2
 3343 012e 2501     		.2byte	(.L292-.L290)/2
 3344 0130 2F01     		.2byte	(.L291-.L290)/2
 3345 0132 3901     		.2byte	(.L289-.L290)/2
 3346              	.LVL264:
 3347              		.p2align 1
 3348              	.L267:
  73:src/console.c ****     case KEY_F1:
 3349              		.loc 2 73 5 is_stmt 0 view .LVU941
 3350              	.LBE157:
 3351              	.LBE172:
 471:src/console.c ****     {
 3352              		.loc 2 471 10 is_stmt 1 view .LVU942
 471:src/console.c ****     {
 3353              		.loc 2 471 15 is_stmt 0 view .LVU943
 3354 0134 2568     		ldr	r5, [r4]
 471:src/console.c ****     {
 3355              		.loc 2 471 13 view .LVU944
 3356 0136 15F40075 		ands	r5, r5, #512
 3357 013a A4D1     		bne	.L268
 471:src/console.c ****     {
 3358              		.loc 2 471 35 discriminator 1 view .LVU945
 3359 013c 704B     		ldr	r3, .L387+80
 3360 013e 9847     		blx	r3
 3361              	.LVL265:
 471:src/console.c ****     {
 3362              		.loc 2 471 32 discriminator 1 view .LVU946
 3363 0140 0028     		cmp	r0, #0
 3364 0142 A0D0     		beq	.L268
 473:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3365              		.loc 2 473 7 is_stmt 1 view .LVU947
ARM GAS  /tmp/cc1cke1v.s 			page 94


 3366 0144 2368     		ldr	r3, [r4]
 474:src/console.c ****       sys_sleep();
 3367              		.loc 2 474 7 is_stmt 0 view .LVU948
 3368 0146 6F4A     		ldr	r2, .L387+84
 473:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3369              		.loc 2 473 7 view .LVU949
 3370 0148 23F00203 		bic	r3, r3, #2
 474:src/console.c ****       sys_sleep();
 3371              		.loc 2 474 7 view .LVU950
 3372 014c 2846     		mov	r0, r5
 3373 014e 6421     		movs	r1, #100
 473:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3374              		.loc 2 473 7 view .LVU951
 3375 0150 2360     		str	r3, [r4]
 474:src/console.c ****       sys_sleep();
 3376              		.loc 2 474 7 is_stmt 1 view .LVU952
 3377 0152 9047     		blx	r2
 3378              	.LVL266:
 475:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 3379              		.loc 2 475 7 view .LVU953
 3380 0154 5E4B     		ldr	r3, .L387+32
 3381 0156 9847     		blx	r3
 3382              	.LVL267:
 476:src/console.c **** 	key_push (K_HEARTBEAT);
 3383              		.loc 2 476 7 view .LVU954
 476:src/console.c **** 	key_push (K_HEARTBEAT);
 3384              		.loc 2 476 11 is_stmt 0 view .LVU955
 3385 0158 6B4B     		ldr	r3, .L387+88
 3386 015a 2846     		mov	r0, r5
 3387 015c 9847     		blx	r3
 3388              	.LVL268:
 476:src/console.c **** 	key_push (K_HEARTBEAT);
 3389              		.loc 2 476 10 view .LVU956
 3390 015e 48B1     		cbz	r0, .L272
 477:src/console.c **** 	if (Pause > 0) Pause--;
 3391              		.loc 2 477 2 is_stmt 1 view .LVU957
 3392 0160 6A4B     		ldr	r3, .L387+92
 3393 0162 6220     		movs	r0, #98
 3394 0164 9847     		blx	r3
 3395              	.LVL269:
 478:src/console.c ****       }
 3396              		.loc 2 478 2 view .LVU958
 478:src/console.c ****       }
 3397              		.loc 2 478 12 is_stmt 0 view .LVU959
 3398 0166 644B     		ldr	r3, .L387+72
 3399 0168 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 478:src/console.c ****       }
 3400              		.loc 2 478 5 view .LVU960
 3401 016a 1AB1     		cbz	r2, .L272
 478:src/console.c ****       }
 3402              		.loc 2 478 17 is_stmt 1 discriminator 1 view .LVU961
 478:src/console.c ****       }
 3403              		.loc 2 478 22 is_stmt 0 discriminator 1 view .LVU962
 3404 016c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3405 016e 013A     		subs	r2, r2, #1
 3406 0170 D2B2     		uxtb	r2, r2
 3407 0172 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cc1cke1v.s 			page 95


 3408              	.L272:
 480:src/console.c ****     }
 3409              		.loc 2 480 7 is_stmt 1 view .LVU963
 3410 0174 664B     		ldr	r3, .L387+96
 3411 0176 0020     		movs	r0, #0
 3412 0178 9847     		blx	r3
 3413              	.LVL270:
 484:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3414              		.loc 2 484 5 view .LVU964
 484:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3415              		.loc 2 484 9 is_stmt 0 view .LVU965
 3416 017a 2368     		ldr	r3, [r4]
 484:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3417              		.loc 2 484 8 view .LVU966
 3418 017c 9D05     		lsls	r5, r3, #22
 3419 017e 85D5     		bpl	.L364
 3420              	.L274:
 485:src/console.c ****         // Going to off mode
 3421              		.loc 2 485 7 is_stmt 1 view .LVU967
 485:src/console.c ****         // Going to off mode
 3422              		.loc 2 485 12 is_stmt 0 view .LVU968
 3423 0180 2568     		ldr	r5, [r4]
 485:src/console.c ****         // Going to off mode
 3424              		.loc 2 485 10 view .LVU969
 3425 0182 15F00405 		ands	r5, r5, #4
 3426 0186 7FF472AF 		bne	.L266
 487:src/console.c ****         draw_power_off_image(1);
 3427              		.loc 2 487 9 is_stmt 1 view .LVU970
 3428 018a 624B     		ldr	r3, .L387+100
 3429 018c 2846     		mov	r0, r5
 3430 018e 9847     		blx	r3
 3431              	.LVL271:
 488:src/console.c **** 
 3432              		.loc 2 488 9 view .LVU971
 3433 0190 614B     		ldr	r3, .L387+104
 3434 0192 0120     		movs	r0, #1
 3435 0194 9847     		blx	r3
 3436              	.LVL272:
 490:src/console.c ****         SET_ST(STAT_SUSPENDED);
 3437              		.loc 2 490 9 view .LVU972
 3438 0196 614B     		ldr	r3, .L387+108
 3439 0198 2846     		mov	r0, r5
 3440 019a 9847     		blx	r3
 3441              	.LVL273:
 491:src/console.c ****         SET_ST(STAT_OFF);
 3442              		.loc 2 491 9 view .LVU973
 3443 019c 2368     		ldr	r3, [r4]
 3444 019e 43F00403 		orr	r3, r3, #4
 3445 01a2 2360     		str	r3, [r4]
 492:src/console.c ****       }
 3446              		.loc 2 492 9 view .LVU974
 3447 01a4 2368     		ldr	r3, [r4]
 3448 01a6 43F01003 		orr	r3, r3, #16
 3449 01aa 2360     		str	r3, [r4]
 3450 01ac 5FE7     		b	.L266
 3451              	.LVL274:
 3452              	.L282:
ARM GAS  /tmp/cc1cke1v.s 			page 96


 529:src/console.c ****       remapped = remap(c);
 3453              		.loc 2 529 5 view .LVU975
 529:src/console.c ****       remapped = remap(c);
 3454              		.loc 2 529 8 is_stmt 0 view .LVU976
 3455 01ae 7FF45EAF 		bne	.L266
 3456 01b2 9BE7     		b	.L334
 3457              	.L281:
 529:src/console.c ****       remapped = remap(c);
 3458              		.loc 2 529 5 is_stmt 1 view .LVU977
 3459              		.loc 2 530 7 view .LVU978
 3460              	.LVL275:
 3461              	.LBB173:
  53:src/console.c **** 
 3462              		.loc 2 53 22 view .LVU979
 3463              	.LBB158:
  55:src/console.c **** 
 3464              		.loc 2 55 3 view .LVU980
   1:src/keytran.c ****     {K_RELEASE, -1},
 3465              		.loc 3 1 1 view .LVU981
  59:src/keytran.c ****     {K_RELEASE, -1},
 3466              		.loc 3 59 3 view .LVU982
 117:src/keytran.c ****     {K_RELEASE, -1},
 3467              		.loc 3 117 3 view .LVU983
 175:src/keytran.c ****     {K_RELEASE, -1},
 3468              		.loc 3 175 1 view .LVU984
 3469              		.loc 3 233 1 view .LVU985
  59:src/console.c **** 
 3470              		.loc 2 59 3 view .LVU986
  59:src/console.c **** 
 3471              		.loc 2 59 23 view .LVU987
  59:src/console.c **** 
 3472              		.loc 2 59 30 is_stmt 0 view .LVU988
 3473 01b4 5A4B     		ldr	r3, .L387+112
 3474              	.LVL276:
 3475              	.L359:
  59:src/console.c **** 
 3476              		.loc 2 59 30 view .LVU989
 3477 01b6 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3478              	.LVL277:
  59:src/console.c **** 
 3479              		.loc 2 59 30 view .LVU990
 3480 01b8 93E80300 		ldm	r3, {r0, r1}
 3481 01bc 0DF1080A 		add	r10, sp, #8
 3482 01c0 8AE80300 		stm	r10, {r0, r1}
 3483 01c4 0F46     		mov	r7, r1
 3484              	.LVL278:
 3485              	.L284:
  59:src/console.c **** 
 3486              		.loc 2 59 30 view .LVU991
 3487              	.LBE158:
 3488              	.LBE173:
 531:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3489              		.loc 2 531 7 is_stmt 1 view .LVU992
 3490              		.loc 2 531 10 is_stmt 0 view .LVU993
 3491 01c6 2F2D     		cmp	r5, #47
 3492 01c8 29D0     		beq	.L365
 3493              	.LVL279:
ARM GAS  /tmp/cc1cke1v.s 			page 97


 3494              	.L325:
 532:src/console.c **** 	set_menu ( remapped.shift );
 533:src/console.c **** 	display_current_menu ();
 534:src/console.c **** 	reset_shift();
 535:src/console.c **** 	remapped = no_key;
 536:src/console.c ****       }
 537:src/console.c ****       if (remapped.key_34s == K_SYS) {
 3495              		.loc 2 537 7 is_stmt 1 view .LVU994
 3496              		.loc 2 537 10 is_stmt 0 view .LVU995
 3497 01ca 302D     		cmp	r5, #48
 3498 01cc 19D1     		bne	.L331
 538:src/console.c **** 	SET_ST(STAT_MENU);
 3499              		.loc 2 538 2 is_stmt 1 view .LVU996
 3500 01ce 2368     		ldr	r3, [r4]
 539:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 3501              		.loc 2 539 2 is_stmt 0 view .LVU997
 3502 01d0 544D     		ldr	r5, .L387+116
 3503              	.LVL280:
 3504              		.loc 2 539 2 view .LVU998
 3505 01d2 5548     		ldr	r0, .L387+120
 3506 01d4 0022     		movs	r2, #0
 538:src/console.c **** 	SET_ST(STAT_MENU);
 3507              		.loc 2 538 2 view .LVU999
 3508 01d6 43F04003 		orr	r3, r3, #64
 3509              		.loc 2 539 2 view .LVU1000
 3510 01da 1146     		mov	r1, r2
 538:src/console.c **** 	SET_ST(STAT_MENU);
 3511              		.loc 2 538 2 view .LVU1001
 3512 01dc 2360     		str	r3, [r4]
 3513              		.loc 2 539 2 is_stmt 1 view .LVU1002
 3514 01de A847     		blx	r5
 3515              	.LVL281:
 540:src/console.c **** 	CLR_ST(STAT_MENU);
 3516              		.loc 2 540 2 view .LVU1003
 3517 01e0 2368     		ldr	r3, [r4]
 3518 01e2 23F04003 		bic	r3, r3, #64
 3519 01e6 2360     		str	r3, [r4]
 541:src/console.c **** 	reset_shift();
 3520              		.loc 2 541 2 view .LVU1004
 3521 01e8 FFF7FEFF 		bl	reset_shift
 3522              	.LVL282:
 542:src/console.c **** 	remapped =  no_key;
 3523              		.loc 2 542 2 view .LVU1005
 3524              		.loc 2 542 11 is_stmt 0 view .LVU1006
 3525 01ec 4F4B     		ldr	r3, .L387+124
 3526 01ee 93E80300 		ldm	r3, {r0, r1}
 3527 01f2 04AA     		add	r2, sp, #16
 3528 01f4 02E90300 		stmdb	r2, {r0, r1}
 3529              	.LBB174:
 3530              	.LBB175:
 118:src/menu.c    **** }
 3531              		.loc 1 118 3 view .LVU1007
 3532 01f8 3068     		ldr	r0, [r6]
 3533              	.LBE175:
 3534              	.LBE174:
 3535              		.loc 2 542 11 view .LVU1008
 3536 01fa 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/cc1cke1v.s 			page 98


 3537              	.LVL283:
 3538              		.loc 2 542 11 view .LVU1009
 3539 01fc 0F46     		mov	r7, r1
 3540              	.LVL284:
 543:src/console.c **** 	display_current_menu();
 3541              		.loc 2 543 2 is_stmt 1 view .LVU1010
 3542              	.LBB177:
 3543              	.LBI174:
 117:src/menu.c    ****   display_menu (current_menu);
 3544              		.loc 1 117 6 view .LVU1011
 3545              	.LBB176:
 118:src/menu.c    **** }
 3546              		.loc 1 118 3 view .LVU1012
 3547 01fe FFF7FEFF 		bl	display_menu
 3548              	.LVL285:
 3549              	.L331:
 118:src/menu.c    **** }
 3550              		.loc 1 118 3 is_stmt 0 view .LVU1013
 3551              	.LBE176:
 3552              	.LBE177:
 544:src/console.c ****       }
 545:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 3553              		.loc 2 545 7 is_stmt 1 view .LVU1014
 3554              		.loc 2 545 10 is_stmt 0 view .LVU1015
 3555 0202 312D     		cmp	r5, #49
 3556 0204 27D0     		beq	.L285
 546:src/console.c **** 	remapped = do_multi (remapped);
 547:src/console.c **** 	display_current_menu();
 548:src/console.c ****       }
 549:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 3557              		.loc 2 549 7 is_stmt 1 view .LVU1016
 3558              		.loc 2 549 10 is_stmt 0 view .LVU1017
 3559 0206 322D     		cmp	r5, #50
 3560 0208 3DD0     		beq	.L333
 3561              	.LVL286:
 3562              	.L336:
 3563              		.loc 2 549 10 view .LVU1018
 3564 020a 0DF1080A 		add	r10, sp, #8
 3565              	.L319:
 3566              	.LVL287:
 550:src/console.c ****       process_keycode_with_shift(remapped);
 3567              		.loc 2 550 7 is_stmt 1 view .LVU1019
 3568              		.loc 2 550 7 is_stmt 0 view .LVU1020
 3569 020e 8DF80850 		strb	r5, [sp, #8]
 3570 0212 0397     		str	r7, [sp, #12]
 3571 0214 9AE80300 		ldm	r10, {r0, r1}
 3572 0218 FFF7FEFF 		bl	process_keycode_with_shift
 3573              	.LVL288:
 3574 021c 27E7     		b	.L266
 3575              	.L365:
 532:src/console.c **** 	display_current_menu ();
 3576              		.loc 2 532 2 is_stmt 1 view .LVU1021
 3577              	.LVL289:
 3578              	.LBB178:
 3579              	.LBI178:
  85:src/menu.c    ****   int m = current_menu;
 3580              		.loc 1 85 6 view .LVU1022
ARM GAS  /tmp/cc1cke1v.s 			page 99


 3581              	.LBB179:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3582              		.loc 1 86 3 view .LVU1023
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3583              		.loc 1 86 7 is_stmt 0 view .LVU1024
 3584 021e 3368     		ldr	r3, [r6]
 3585              	.LVL290:
  87:src/menu.c    ****     current_menu = default_menu;
 3586              		.loc 1 87 3 is_stmt 1 view .LVU1025
  87:src/menu.c    ****     current_menu = default_menu;
 3587              		.loc 1 87 6 is_stmt 0 view .LVU1026
 3588 0220 BB42     		cmp	r3, r7
 3589 0222 00F08D80 		beq	.L366
  90:src/menu.c    ****     current_menu = last_menu;
 3590              		.loc 1 90 8 is_stmt 1 view .LVU1027
  90:src/menu.c    ****     current_menu = last_menu;
 3591              		.loc 1 90 11 is_stmt 0 view .LVU1028
 3592 0226 7A1C     		adds	r2, r7, #1
 3593 0228 00F09080 		beq	.L367
 3594              	.LVL291:
 3595              	.L326:
  94:src/menu.c    ****   }
 3596              		.loc 1 94 5 is_stmt 1 view .LVU1029
  94:src/menu.c    ****   }
 3597              		.loc 1 94 18 is_stmt 0 view .LVU1030
 3598 022c 3760     		str	r7, [r6]
 3599              	.LVL292:
 3600              	.L329:
  96:src/menu.c    **** }
 3601              		.loc 1 96 3 is_stmt 1 view .LVU1031
  96:src/menu.c    **** }
 3602              		.loc 1 96 6 is_stmt 0 view .LVU1032
 3603 022e 092B     		cmp	r3, #9
 3604 0230 03D0     		beq	.L330
  96:src/menu.c    **** }
 3605              		.loc 1 96 17 view .LVU1033
 3606 0232 102B     		cmp	r3, #16
 3607 0234 01D0     		beq	.L330
 3608              	.L327:
  96:src/menu.c    **** }
 3609              		.loc 1 96 32 is_stmt 1 view .LVU1034
  96:src/menu.c    **** }
 3610              		.loc 1 96 42 is_stmt 0 view .LVU1035
 3611 0236 3E4A     		ldr	r2, .L387+128
 3612 0238 1360     		str	r3, [r2]
 3613              	.L330:
  96:src/menu.c    **** }
 3614              		.loc 1 96 42 view .LVU1036
 3615              	.LBE179:
 3616              	.LBE178:
 533:src/console.c **** 	reset_shift();
 3617              		.loc 2 533 2 is_stmt 1 view .LVU1037
 3618              	.LBB183:
 3619              	.LBI183:
 117:src/menu.c    ****   display_menu (current_menu);
 3620              		.loc 1 117 6 view .LVU1038
 3621              	.LBB184:
ARM GAS  /tmp/cc1cke1v.s 			page 100


 118:src/menu.c    **** }
 3622              		.loc 1 118 3 view .LVU1039
 3623 023a 3846     		mov	r0, r7
 3624 023c FFF7FEFF 		bl	display_menu
 3625              	.LVL293:
 3626              	.LBE184:
 3627              	.LBE183:
 534:src/console.c **** 	remapped = no_key;
 3628              		.loc 2 534 2 view .LVU1040
 3629 0240 FFF7FEFF 		bl	reset_shift
 3630              	.LVL294:
 535:src/console.c ****       }
 3631              		.loc 2 535 2 view .LVU1041
 535:src/console.c ****       }
 3632              		.loc 2 535 11 is_stmt 0 view .LVU1042
 3633 0244 394B     		ldr	r3, .L387+124
 3634 0246 93E80300 		ldm	r3, {r0, r1}
 3635 024a 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3636              	.LVL295:
 535:src/console.c ****       }
 3637              		.loc 2 535 11 view .LVU1043
 3638 024c 8AE80300 		stm	r10, {r0, r1}
 3639 0250 0F46     		mov	r7, r1
 3640              	.LVL296:
 535:src/console.c ****       }
 3641              		.loc 2 535 11 view .LVU1044
 3642 0252 BAE7     		b	.L325
 3643              	.LVL297:
 3644              	.L335:
 3645              	.LBB185:
 3646              	.LBB159:
 3647              	.LBB154:
  65:src/console.c ****   }
 3648              		.loc 2 65 12 view .LVU1045
 3649 0254 0C27     		movs	r7, #12
 3650              	.LVL298:
 3651              	.L285:
  65:src/console.c ****   }
 3652              		.loc 2 65 12 view .LVU1046
 3653              	.LBE154:
 3654              	.LBE159:
 3655              	.LBE185:
 546:src/console.c **** 	display_current_menu();
 3656              		.loc 2 546 2 is_stmt 1 view .LVU1047
 546:src/console.c **** 	display_current_menu();
 3657              		.loc 2 546 13 is_stmt 0 view .LVU1048
 3658 0256 3123     		movs	r3, #49
 3659 0258 0397     		str	r7, [sp, #12]
 3660 025a 8DF80830 		strb	r3, [sp, #8]
 3661 025e 6D46     		mov	r5, sp
 3662 0260 0DF1080A 		add	r10, sp, #8
 3663 0264 9AE80600 		ldm	r10, {r1, r2}
 3664 0268 2846     		mov	r0, r5
 3665 026a FFF7FEFF 		bl	do_multi
 3666              	.LVL299:
 3667 026e 95E80300 		ldm	r5, {r0, r1}
 3668 0272 8AE80300 		stm	r10, {r0, r1}
ARM GAS  /tmp/cc1cke1v.s 			page 101


 3669 0276 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 3670              	.LVL300:
 3671              	.LBB186:
 3672              	.LBB187:
 118:src/menu.c    **** }
 3673              		.loc 1 118 3 view .LVU1049
 3674 027a 3068     		ldr	r0, [r6]
 3675              	.LBE187:
 3676              	.LBE186:
 546:src/console.c **** 	display_current_menu();
 3677              		.loc 2 546 13 view .LVU1050
 3678 027c 039F     		ldr	r7, [sp, #12]
 3679              	.LVL301:
 547:src/console.c ****       }
 3680              		.loc 2 547 2 is_stmt 1 view .LVU1051
 3681              	.LBB189:
 3682              	.LBI186:
 117:src/menu.c    ****   display_menu (current_menu);
 3683              		.loc 1 117 6 view .LVU1052
 3684              	.LBB188:
 118:src/menu.c    **** }
 3685              		.loc 1 118 3 view .LVU1053
 3686 027e FFF7FEFF 		bl	display_menu
 3687              	.LVL302:
 118:src/menu.c    **** }
 3688              		.loc 1 118 3 is_stmt 0 view .LVU1054
 3689              	.LBE188:
 3690              	.LBE189:
 549:src/console.c ****       process_keycode_with_shift(remapped);
 3691              		.loc 2 549 7 is_stmt 1 view .LVU1055
 549:src/console.c ****       process_keycode_with_shift(remapped);
 3692              		.loc 2 549 10 is_stmt 0 view .LVU1056
 3693 0282 322D     		cmp	r5, #50
 3694 0284 C1D1     		bne	.L336
 3695              	.LVL303:
 3696              	.L333:
 551:src/console.c ****     }
 552:src/console.c ****   }
 553:src/console.c ****   save_ram_file(0);
 3697              		.loc 2 553 3 is_stmt 1 view .LVU1057
 3698 0286 0020     		movs	r0, #0
 554:src/console.c ****   //  free_storage();
 555:src/console.c ****   return;
 556:src/console.c **** }
 3699              		.loc 2 556 1 is_stmt 0 view .LVU1058
 3700 0288 05B0     		add	sp, sp, #20
 3701              		.cfi_remember_state
 3702              		.cfi_def_cfa_offset 36
 3703              		@ sp needed
 3704 028a BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3705              		.cfi_restore 14
 3706              		.cfi_restore 11
 3707              		.cfi_restore 10
 3708              		.cfi_restore 9
 3709              		.cfi_restore 8
 3710              		.cfi_restore 7
 3711              		.cfi_restore 6
ARM GAS  /tmp/cc1cke1v.s 			page 102


 3712              		.cfi_restore 5
 3713              		.cfi_restore 4
 3714              		.cfi_def_cfa_offset 0
 3715              	.LVL304:
 553:src/console.c ****   //  free_storage();
 3716              		.loc 2 553 3 view .LVU1059
 3717 028e FFF7FEBF 		b	save_ram_file
 3718              	.LVL305:
 3719              	.L362:
 3720              		.cfi_restore_state
 3721              	.LBB190:
 3722              	.LBB160:
  69:src/console.c ****   }
 3723              		.loc 2 69 5 is_stmt 1 view .LVU1060
  69:src/console.c ****   }
 3724              		.loc 2 69 27 is_stmt 0 view .LVU1061
 3725 0292 284B     		ldr	r3, .L387+132
 3726              	.L358:
 143:src/console.c ****     break;
 3727              		.loc 2 143 26 view .LVU1062
 3728 0294 03EBC502 		add	r2, r3, r5, lsl #3
 3729 0298 92E80300 		ldm	r2, {r0, r1}
 3730 029c 0DF1080A 		add	r10, sp, #8
 3731 02a0 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 3732              	.LVL306:
 143:src/console.c ****     break;
 3733              		.loc 2 143 26 view .LVU1063
 3734 02a4 0F46     		mov	r7, r1
 3735              	.LVL307:
 143:src/console.c ****     break;
 3736              		.loc 2 143 26 view .LVU1064
 3737 02a6 8AE80300 		stm	r10, {r0, r1}
 3738 02aa 8CE7     		b	.L284
 3739              	.LVL308:
 3740              	.L361:
  61:src/console.c **** 
 3741              		.loc 2 61 16 is_stmt 1 view .LVU1065
  61:src/console.c **** 
 3742              		.loc 2 61 23 is_stmt 0 view .LVU1066
 3743 02ac 224B     		ldr	r3, .L387+136
 3744 02ae 82E7     		b	.L359
 3745              	.L388:
 3746              		.align	2
 3747              	.L387:
 3748 02b0 00000000 		.word	StateWhileOn
 3749 02b4 00000000 		.word	DispMsg
 3750 02b8 00200010 		.word	268443648
 3751 02bc 00000000 		.word	.LANCHOR1
 3752 02c0 00000000 		.word	run_menu_item
 3753 02c4 00000000 		.word	menu_line_str
 3754 02c8 31020008 		.word	134218289
 3755 02cc 00000000 		.word	JustDisplayed
 3756 02d0 19040008 		.word	134218777
 3757 02d4 19020008 		.word	134218265
 3758 02d8 91030008 		.word	134218641
 3759 02dc E5020008 		.word	134218469
 3760 02e0 59020008 		.word	134218329
ARM GAS  /tmp/cc1cke1v.s 			page 103


 3761 02e4 35020008 		.word	134218293
 3762 02e8 89030008 		.word	134218633
 3763 02ec B9030008 		.word	134218681
 3764 02f0 B9040008 		.word	134218937
 3765 02f4 00000000 		.word	.LANCHOR9
 3766 02f8 00000000 		.word	Pause
 3767 02fc 00000000 		.word	Running
 3768 0300 7D030008 		.word	134218621
 3769 0304 F9030008 		.word	134218745
 3770 0308 01040008 		.word	134218753
 3771 030c 81030008 		.word	134218625
 3772 0310 F5030008 		.word	134218741
 3773 0314 55020008 		.word	134218325
 3774 0318 2D040008 		.word	134218797
 3775 031c 1D020008 		.word	134218269
 3776 0320 00000000 		.word	.LANCHOR20
 3777 0324 59030008 		.word	134218585
 3778 0328 00000000 		.word	.LANCHOR19
 3779 032c 00000000 		.word	.LANCHOR11
 3780 0330 00000000 		.word	.LANCHOR3
 3781 0334 00000000 		.word	.LANCHOR13
 3782 0338 00000000 		.word	.LANCHOR12
 3783 033c 00000000 		.word	.LANCHOR4
 3784              	.LVL309:
 3785              	.L366:
  61:src/console.c **** 
 3786              		.loc 2 61 23 view .LVU1067
 3787              	.LBE160:
 3788              	.LBE190:
 3789              	.LBB191:
 3790              	.LBB180:
  88:src/menu.c    ****   }
 3791              		.loc 1 88 5 is_stmt 1 view .LVU1068
  88:src/menu.c    ****   }
 3792              		.loc 1 88 18 is_stmt 0 view .LVU1069
 3793 0340 C94B     		ldr	r3, .L389
 3794              	.LVL310:
  88:src/menu.c    ****   }
 3795              		.loc 1 88 18 view .LVU1070
 3796 0342 1A68     		ldr	r2, [r3]
 3797 0344 3260     		str	r2, [r6]
 3798              	.LVL311:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3799              		.loc 1 86 7 view .LVU1071
 3800 0346 3B46     		mov	r3, r7
  88:src/menu.c    ****   }
 3801              		.loc 1 88 18 view .LVU1072
 3802 0348 1746     		mov	r7, r2
 3803              	.LVL312:
  88:src/menu.c    ****   }
 3804              		.loc 1 88 18 view .LVU1073
 3805 034a 70E7     		b	.L329
 3806              	.LVL313:
 3807              	.L367:
  91:src/menu.c    ****   }
 3808              		.loc 1 91 5 is_stmt 1 view .LVU1074
  91:src/menu.c    ****   }
ARM GAS  /tmp/cc1cke1v.s 			page 104


 3809              		.loc 1 91 18 is_stmt 0 view .LVU1075
 3810 034c C74A     		ldr	r2, .L389+4
 3811 034e 1768     		ldr	r7, [r2]
 3812              	.LVL314:
  91:src/menu.c    ****   }
 3813              		.loc 1 91 18 view .LVU1076
 3814 0350 3760     		str	r7, [r6]
 3815 0352 6CE7     		b	.L329
 3816              	.LVL315:
 3817              	.L297:
  91:src/menu.c    ****   }
 3818              		.loc 1 91 18 view .LVU1077
 3819              	.LBE180:
 3820              	.LBE191:
 3821              	.LBB192:
 3822              	.LBB161:
  79:src/console.c ****     case KEY_F3:
 3823              		.loc 2 79 7 is_stmt 1 view .LVU1078
  79:src/console.c ****     case KEY_F3:
 3824              		.loc 2 79 11 is_stmt 0 view .LVU1079
 3825 0354 FFF7FEFF 		bl	cur_shift
 3826              	.LVL316:
  79:src/console.c ****     case KEY_F3:
 3827              		.loc 2 79 10 view .LVU1080
 3828 0358 0128     		cmp	r0, #1
 3829 035a 00F0C881 		beq	.L368
 3830              	.L293:
  81:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 3831              		.loc 2 81 7 is_stmt 1 view .LVU1081
  81:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 3832              		.loc 2 81 11 is_stmt 0 view .LVU1082
 3833 035e FFF7FEFF 		bl	cur_shift
 3834              	.LVL317:
  81:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 3835              		.loc 2 81 10 view .LVU1083
 3836 0362 0028     		cmp	r0, #0
 3837 0364 00F00F81 		beq	.L369
  82:src/console.c ****     case KEY_F4:
 3838              		.loc 2 82 7 is_stmt 1 view .LVU1084
  82:src/console.c ****     case KEY_F4:
 3839              		.loc 2 82 11 is_stmt 0 view .LVU1085
 3840 0368 FFF7FEFF 		bl	cur_shift
 3841              	.LVL318:
  82:src/console.c ****     case KEY_F4:
 3842              		.loc 2 82 10 view .LVU1086
 3843 036c 0128     		cmp	r0, #1
 3844 036e 00F0B281 		beq	.L370
 3845              	.L292:
  84:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 3846              		.loc 2 84 7 is_stmt 1 view .LVU1087
  84:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 3847              		.loc 2 84 11 is_stmt 0 view .LVU1088
 3848 0372 FFF7FEFF 		bl	cur_shift
 3849              	.LVL319:
  84:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 3850              		.loc 2 84 10 view .LVU1089
 3851 0376 0028     		cmp	r0, #0
ARM GAS  /tmp/cc1cke1v.s 			page 105


 3852 0378 00F0F980 		beq	.L371
  85:src/console.c ****     case KEY_F5:
 3853              		.loc 2 85 7 is_stmt 1 view .LVU1090
  85:src/console.c ****     case KEY_F5:
 3854              		.loc 2 85 11 is_stmt 0 view .LVU1091
 3855 037c FFF7FEFF 		bl	cur_shift
 3856              	.LVL320:
  85:src/console.c ****     case KEY_F5:
 3857              		.loc 2 85 10 view .LVU1092
 3858 0380 0128     		cmp	r0, #1
 3859 0382 00F06481 		beq	.L372
 3860              	.L291:
  87:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 3861              		.loc 2 87 7 is_stmt 1 view .LVU1093
  87:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 3862              		.loc 2 87 11 is_stmt 0 view .LVU1094
 3863 0386 FFF7FEFF 		bl	cur_shift
 3864              	.LVL321:
  87:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 3865              		.loc 2 87 10 view .LVU1095
 3866 038a 0028     		cmp	r0, #0
 3867 038c 00F0E380 		beq	.L373
  88:src/console.c ****     case KEY_F6:
 3868              		.loc 2 88 7 is_stmt 1 view .LVU1096
  88:src/console.c ****     case KEY_F6:
 3869              		.loc 2 88 11 is_stmt 0 view .LVU1097
 3870 0390 FFF7FEFF 		bl	cur_shift
 3871              	.LVL322:
  88:src/console.c ****     case KEY_F6:
 3872              		.loc 2 88 10 view .LVU1098
 3873 0394 0128     		cmp	r0, #1
 3874 0396 00F08781 		beq	.L374
 3875              	.L289:
  90:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 3876              		.loc 2 90 7 is_stmt 1 view .LVU1099
  90:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 3877              		.loc 2 90 11 is_stmt 0 view .LVU1100
 3878 039a FFF7FEFF 		bl	cur_shift
 3879              	.LVL323:
  90:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 3880              		.loc 2 90 10 view .LVU1101
 3881 039e 0028     		cmp	r0, #0
 3882 03a0 00F0CD80 		beq	.L375
  91:src/console.c ****     }
 3883              		.loc 2 91 7 is_stmt 1 view .LVU1102
  91:src/console.c ****     }
 3884              		.loc 2 91 11 is_stmt 0 view .LVU1103
 3885 03a4 FFF7FEFF 		bl	cur_shift
 3886              	.LVL324:
  91:src/console.c ****     }
 3887              		.loc 2 91 10 view .LVU1104
 3888 03a8 0128     		cmp	r0, #1
 3889 03aa 00F08981 		beq	.L376
 3890              	.L288:
 117:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 3891              		.loc 2 117 3 is_stmt 1 view .LVU1105
 117:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
ARM GAS  /tmp/cc1cke1v.s 			page 106


 3892              		.loc 2 117 8 is_stmt 0 view .LVU1106
 3893 03ae FFF7FEFF 		bl	get_alpha_state
 3894              	.LVL325:
 117:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 3895              		.loc 2 117 6 view .LVU1107
 3896 03b2 0028     		cmp	r0, #0
 3897 03b4 64D0     		beq	.L317
 118:src/console.c ****       switch (cur_shift()) { 
 3898              		.loc 2 118 5 is_stmt 1 view .LVU1108
 118:src/console.c ****       switch (cur_shift()) { 
 3899              		.loc 2 118 8 is_stmt 0 view .LVU1109
 3900 03b6 1C2D     		cmp	r5, #28
 3901 03b8 00F00281 		beq	.L377
 135:src/console.c ****   }
 3902              		.loc 2 135 5 is_stmt 1 view .LVU1110
 135:src/console.c ****   }
 3903              		.loc 2 135 26 is_stmt 0 view .LVU1111
 3904 03bc AC4B     		ldr	r3, .L389+8
 3905 03be 69E7     		b	.L358
 3906              	.L314:
 110:src/console.c ****     case KEY_F6:
 3907              		.loc 2 110 7 is_stmt 1 view .LVU1112
 110:src/console.c ****     case KEY_F6:
 3908              		.loc 2 110 11 is_stmt 0 view .LVU1113
 3909 03c0 FFF7FEFF 		bl	cur_shift
 3910              	.LVL326:
 110:src/console.c ****     case KEY_F6:
 3911              		.loc 2 110 10 view .LVU1114
 3912 03c4 0128     		cmp	r0, #1
 3913 03c6 00F02481 		beq	.L378
 3914              	.L303:
 112:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3915              		.loc 2 112 7 is_stmt 1 view .LVU1115
 112:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3916              		.loc 2 112 11 is_stmt 0 view .LVU1116
 3917 03ca FFF7FEFF 		bl	cur_shift
 3918              	.LVL327:
 112:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3919              		.loc 2 112 10 view .LVU1117
 3920 03ce 0028     		cmp	r0, #0
 3921 03d0 6CD1     		bne	.L315
 112:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3922              		.loc 2 112 35 is_stmt 1 view .LVU1118
 112:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3923              		.loc 2 112 69 is_stmt 0 view .LVU1119
 3924 03d2 3168     		ldr	r1, [r6]
 3925 03d4 A74A     		ldr	r2, .L389+12
 3926 03d6 D023     		movs	r3, #208
 3927 03d8 03FB01F3 		mul	r3, r3, r1
 3928 03dc D018     		adds	r0, r2, r3
 3929 03de D0E92C01 		ldrd	r0, r1, [r0, #176]
 3930 03e2 B033     		adds	r3, r3, #176
 3931              	.L360:
 113:src/console.c ****     }
 3932              		.loc 2 113 69 view .LVU1120
 3933 03e4 0DF1080A 		add	r10, sp, #8
 3934 03e8 D55C     		ldrb	r5, [r2, r3]	@ zero_extendqisi2
ARM GAS  /tmp/cc1cke1v.s 			page 107


 3935              	.LVL328:
 113:src/console.c ****     }
 3936              		.loc 2 113 69 view .LVU1121
 3937 03ea 8AE80300 		stm	r10, {r0, r1}
 3938 03ee 1344     		add	r3, r3, r2
 3939 03f0 5F68     		ldr	r7, [r3, #4]
 3940              	.LVL329:
 113:src/console.c ****     }
 3941              		.loc 2 113 69 view .LVU1122
 3942 03f2 E8E6     		b	.L284
 3943              	.LVL330:
 3944              	.L313:
 107:src/console.c ****     case KEY_F5:
 3945              		.loc 2 107 7 is_stmt 1 view .LVU1123
 107:src/console.c ****     case KEY_F5:
 3946              		.loc 2 107 11 is_stmt 0 view .LVU1124
 3947 03f4 FFF7FEFF 		bl	cur_shift
 3948              	.LVL331:
 107:src/console.c ****     case KEY_F5:
 3949              		.loc 2 107 10 view .LVU1125
 3950 03f8 0128     		cmp	r0, #1
 3951 03fa 00F0F680 		beq	.L379
 3952              	.L305:
 109:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3953              		.loc 2 109 7 is_stmt 1 view .LVU1126
 109:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3954              		.loc 2 109 11 is_stmt 0 view .LVU1127
 3955 03fe FFF7FEFF 		bl	cur_shift
 3956              	.LVL332:
 109:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3957              		.loc 2 109 10 view .LVU1128
 3958 0402 0028     		cmp	r0, #0
 3959 0404 DCD1     		bne	.L314
 109:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3960              		.loc 2 109 35 is_stmt 1 view .LVU1129
 109:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3961              		.loc 2 109 69 is_stmt 0 view .LVU1130
 3962 0406 3168     		ldr	r1, [r6]
 3963 0408 9A4A     		ldr	r2, .L389+12
 3964 040a D023     		movs	r3, #208
 3965 040c 03FB01F3 		mul	r3, r3, r1
 3966 0410 D018     		adds	r0, r2, r3
 3967 0412 D0E92401 		ldrd	r0, r1, [r0, #144]
 3968 0416 9033     		adds	r3, r3, #144
 3969 0418 E4E7     		b	.L360
 3970              	.L312:
 104:src/console.c ****     case KEY_F4:
 3971              		.loc 2 104 7 is_stmt 1 view .LVU1131
 104:src/console.c ****     case KEY_F4:
 3972              		.loc 2 104 11 is_stmt 0 view .LVU1132
 3973 041a FFF7FEFF 		bl	cur_shift
 3974              	.LVL333:
 104:src/console.c ****     case KEY_F4:
 3975              		.loc 2 104 10 view .LVU1133
 3976 041e 0128     		cmp	r0, #1
 3977 0420 00F0ED80 		beq	.L380
 3978              	.L306:
ARM GAS  /tmp/cc1cke1v.s 			page 108


 106:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3979              		.loc 2 106 7 is_stmt 1 view .LVU1134
 106:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3980              		.loc 2 106 11 is_stmt 0 view .LVU1135
 3981 0424 FFF7FEFF 		bl	cur_shift
 3982              	.LVL334:
 106:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3983              		.loc 2 106 10 view .LVU1136
 3984 0428 0028     		cmp	r0, #0
 3985 042a E3D1     		bne	.L313
 106:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3986              		.loc 2 106 35 is_stmt 1 view .LVU1137
 106:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3987              		.loc 2 106 69 is_stmt 0 view .LVU1138
 3988 042c 3168     		ldr	r1, [r6]
 3989 042e 914A     		ldr	r2, .L389+12
 3990 0430 D023     		movs	r3, #208
 3991 0432 03FB01F3 		mul	r3, r3, r1
 3992 0436 D018     		adds	r0, r2, r3
 3993 0438 D0E91C01 		ldrd	r0, r1, [r0, #112]
 3994 043c 7033     		adds	r3, r3, #112
 3995 043e D1E7     		b	.L360
 3996              	.L309:
  97:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3997              		.loc 2 97 7 is_stmt 1 view .LVU1139
  97:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3998              		.loc 2 97 11 is_stmt 0 view .LVU1140
 3999 0440 FFF7FEFF 		bl	cur_shift
 4000              	.LVL335:
  97:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 4001              		.loc 2 97 10 view .LVU1141
 4002 0444 0028     		cmp	r0, #0
 4003 0446 70D0     		beq	.L381
  98:src/console.c ****     case KEY_F2:
 4004              		.loc 2 98 7 is_stmt 1 view .LVU1142
  98:src/console.c ****     case KEY_F2:
 4005              		.loc 2 98 11 is_stmt 0 view .LVU1143
 4006 0448 FFF7FEFF 		bl	cur_shift
 4007              	.LVL336:
  98:src/console.c ****     case KEY_F2:
 4008              		.loc 2 98 10 view .LVU1144
 4009 044c 0128     		cmp	r0, #1
 4010 044e 00F0F480 		beq	.L382
 4011              	.L308:
 100:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 4012              		.loc 2 100 7 is_stmt 1 view .LVU1145
 100:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 4013              		.loc 2 100 11 is_stmt 0 view .LVU1146
 4014 0452 FFF7FEFF 		bl	cur_shift
 4015              	.LVL337:
 100:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 4016              		.loc 2 100 10 view .LVU1147
 4017 0456 0028     		cmp	r0, #0
 4018 0458 5DD0     		beq	.L383
 101:src/console.c ****     case KEY_F3:
 4019              		.loc 2 101 7 is_stmt 1 view .LVU1148
 101:src/console.c ****     case KEY_F3:
ARM GAS  /tmp/cc1cke1v.s 			page 109


 4020              		.loc 2 101 11 is_stmt 0 view .LVU1149
 4021 045a FFF7FEFF 		bl	cur_shift
 4022              	.LVL338:
 101:src/console.c ****     case KEY_F3:
 4023              		.loc 2 101 10 view .LVU1150
 4024 045e 0128     		cmp	r0, #1
 4025 0460 00F0E180 		beq	.L384
 4026              	.L307:
 103:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 4027              		.loc 2 103 7 is_stmt 1 view .LVU1151
 103:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 4028              		.loc 2 103 11 is_stmt 0 view .LVU1152
 4029 0464 FFF7FEFF 		bl	cur_shift
 4030              	.LVL339:
 103:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 4031              		.loc 2 103 10 view .LVU1153
 4032 0468 0028     		cmp	r0, #0
 4033 046a D6D1     		bne	.L312
 103:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 4034              		.loc 2 103 35 is_stmt 1 view .LVU1154
 103:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 4035              		.loc 2 103 69 is_stmt 0 view .LVU1155
 4036 046c 3168     		ldr	r1, [r6]
 4037 046e 814A     		ldr	r2, .L389+12
 4038 0470 D023     		movs	r3, #208
 4039 0472 03FB01F3 		mul	r3, r3, r1
 4040 0476 D018     		adds	r0, r2, r3
 4041 0478 D0E91401 		ldrd	r0, r1, [r0, #80]
 4042 047c 5033     		adds	r3, r3, #80
 4043 047e B1E7     		b	.L360
 4044              	.L317:
 138:src/console.c ****   case SHIFT_N:    
 4045              		.loc 2 138 3 is_stmt 1 view .LVU1156
 138:src/console.c ****   case SHIFT_N:    
 4046              		.loc 2 138 11 is_stmt 0 view .LVU1157
 4047 0480 FFF7FEFF 		bl	cur_shift
 4048              	.LVL340:
 138:src/console.c ****   case SHIFT_N:    
 4049              		.loc 2 138 3 view .LVU1158
 4050 0484 0128     		cmp	r0, #1
 4051 0486 00F09980 		beq	.L322
 4052 048a 0228     		cmp	r0, #2
 4053 048c 00F08980 		beq	.L323
 4054 0490 0028     		cmp	r0, #0
 4055 0492 00F08480 		beq	.L324
  55:src/console.c **** 
 4056              		.loc 2 55 41 view .LVU1159
 4057 0496 EDB2     		uxtb	r5, r5
 4058              	.LVL341:
  55:src/console.c **** 
 4059              		.loc 2 55 41 view .LVU1160
 4060              	.LBE161:
 4061              	.LBE192:
 531:src/console.c **** 	set_menu ( remapped.shift );
 4062              		.loc 2 531 7 is_stmt 1 view .LVU1161
 531:src/console.c **** 	set_menu ( remapped.shift );
 4063              		.loc 2 531 10 is_stmt 0 view .LVU1162
ARM GAS  /tmp/cc1cke1v.s 			page 110


 4064 0498 2F2D     		cmp	r5, #47
 4065 049a 7FF496AE 		bne	.L325
 532:src/console.c **** 	display_current_menu ();
 4066              		.loc 2 532 2 is_stmt 1 view .LVU1163
 4067              	.LVL342:
 4068              	.LBB193:
  85:src/menu.c    ****   int m = current_menu;
 4069              		.loc 1 85 6 view .LVU1164
 4070              	.LBB181:
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 4071              		.loc 1 86 3 view .LVU1165
  86:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 4072              		.loc 1 86 7 is_stmt 0 view .LVU1166
 4073 049e 3368     		ldr	r3, [r6]
 4074              	.LVL343:
  87:src/menu.c    ****     current_menu = default_menu;
 4075              		.loc 1 87 3 is_stmt 1 view .LVU1167
  87:src/menu.c    ****     current_menu = default_menu;
 4076              		.loc 1 87 6 is_stmt 0 view .LVU1168
 4077 04a0 002B     		cmp	r3, #0
 4078 04a2 00F04581 		beq	.L356
 4079 04a6 0DF1080A 		add	r10, sp, #8
 4080 04aa BFE6     		b	.L326
 4081              	.LVL344:
 4082              	.L315:
  87:src/menu.c    ****     current_menu = default_menu;
 4083              		.loc 1 87 6 view .LVU1169
 4084              	.LBE181:
 4085              	.LBE193:
 4086              	.LBB194:
 4087              	.LBB162:
 113:src/console.c ****     }
 4088              		.loc 2 113 7 is_stmt 1 view .LVU1170
 113:src/console.c ****     }
 4089              		.loc 2 113 11 is_stmt 0 view .LVU1171
 4090 04ac FFF7FEFF 		bl	cur_shift
 4091              	.LVL345:
 113:src/console.c ****     }
 4092              		.loc 2 113 10 view .LVU1172
 4093 04b0 0128     		cmp	r0, #1
 4094 04b2 7FF47CAF 		bne	.L288
 113:src/console.c ****     }
 4095              		.loc 2 113 35 is_stmt 1 view .LVU1173
 113:src/console.c ****     }
 4096              		.loc 2 113 69 is_stmt 0 view .LVU1174
 4097 04b6 3168     		ldr	r1, [r6]
 4098 04b8 6E4A     		ldr	r2, .L389+12
 4099 04ba D023     		movs	r3, #208
 4100 04bc 03FB01F3 		mul	r3, r3, r1
 4101 04c0 D018     		adds	r0, r2, r3
 4102 04c2 D0E92E01 		ldrd	r0, r1, [r0, #184]
 4103 04c6 B833     		adds	r3, r3, #184
 4104 04c8 8CE7     		b	.L360
 4105              	.L296:
  76:src/console.c ****     case KEY_F2:
 4106              		.loc 2 76 7 is_stmt 1 view .LVU1175
  76:src/console.c ****     case KEY_F2:
ARM GAS  /tmp/cc1cke1v.s 			page 111


 4107              		.loc 2 76 11 is_stmt 0 view .LVU1176
 4108 04ca FFF7FEFF 		bl	cur_shift
 4109              	.LVL346:
  76:src/console.c ****     case KEY_F2:
 4110              		.loc 2 76 10 view .LVU1177
 4111 04ce 0128     		cmp	r0, #1
 4112 04d0 00F01981 		beq	.L385
 4113              	.L294:
  78:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4114              		.loc 2 78 7 is_stmt 1 view .LVU1178
  78:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4115              		.loc 2 78 11 is_stmt 0 view .LVU1179
 4116 04d4 FFF7FEFF 		bl	cur_shift
 4117              	.LVL347:
  78:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4118              		.loc 2 78 10 view .LVU1180
 4119 04d8 0028     		cmp	r0, #0
 4120 04da 7FF43BAF 		bne	.L297
  78:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4121              		.loc 2 78 35 is_stmt 1 view .LVU1181
  78:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4122              		.loc 2 78 58 is_stmt 0 view .LVU1182
 4123 04de 664B     		ldr	r3, .L389+16
 4124 04e0 9BF83050 		ldrb	r5, [fp, #48]	@ zero_extendqisi2
 4125              	.LVL348:
  78:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4126              		.loc 2 78 58 view .LVU1183
 4127 04e4 DBF83470 		ldr	r7, [fp, #52]
 4128              	.LVL349:
  78:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4129              		.loc 2 78 58 view .LVU1184
 4130 04e8 93E80300 		ldm	r3, {r0, r1}
 4131 04ec 0DF1080A 		add	r10, sp, #8
 4132 04f0 8AE80300 		stm	r10, {r0, r1}
 4133 04f4 67E6     		b	.L284
 4134              	.LVL350:
 4135              	.L295:
  75:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4136              		.loc 2 75 7 is_stmt 1 view .LVU1185
  75:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4137              		.loc 2 75 11 is_stmt 0 view .LVU1186
 4138 04f6 FFF7FEFF 		bl	cur_shift
 4139              	.LVL351:
  75:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4140              		.loc 2 75 10 view .LVU1187
 4141 04fa 0028     		cmp	r0, #0
 4142 04fc E5D1     		bne	.L296
  75:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4143              		.loc 2 75 35 is_stmt 1 view .LVU1188
  75:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4144              		.loc 2 75 58 is_stmt 0 view .LVU1189
 4145 04fe 5F4B     		ldr	r3, .L389+20
 4146 0500 9BF81050 		ldrb	r5, [fp, #16]	@ zero_extendqisi2
 4147              	.LVL352:
  75:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4148              		.loc 2 75 58 view .LVU1190
 4149 0504 DBF81470 		ldr	r7, [fp, #20]
ARM GAS  /tmp/cc1cke1v.s 			page 112


 4150              	.LVL353:
  75:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4151              		.loc 2 75 58 view .LVU1191
 4152 0508 93E80300 		ldm	r3, {r0, r1}
 4153 050c 0DF1080A 		add	r10, sp, #8
 4154 0510 8AE80300 		stm	r10, {r0, r1}
 4155 0514 57E6     		b	.L284
 4156              	.LVL354:
 4157              	.L383:
 100:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 4158              		.loc 2 100 35 is_stmt 1 view .LVU1192
 100:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 4159              		.loc 2 100 69 is_stmt 0 view .LVU1193
 4160 0516 3168     		ldr	r1, [r6]
 4161 0518 564A     		ldr	r2, .L389+12
 4162 051a D023     		movs	r3, #208
 4163 051c 03FB01F3 		mul	r3, r3, r1
 4164 0520 D018     		adds	r0, r2, r3
 4165 0522 D0E90C01 		ldrd	r0, r1, [r0, #48]
 4166 0526 3033     		adds	r3, r3, #48
 4167 0528 5CE7     		b	.L360
 4168              	.L381:
  97:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 4169              		.loc 2 97 35 is_stmt 1 view .LVU1194
  97:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 4170              		.loc 2 97 69 is_stmt 0 view .LVU1195
 4171 052a 3168     		ldr	r1, [r6]
 4172 052c 514A     		ldr	r2, .L389+12
 4173 052e D023     		movs	r3, #208
 4174 0530 03FB01F3 		mul	r3, r3, r1
 4175 0534 D018     		adds	r0, r2, r3
 4176 0536 D0E90401 		ldrd	r0, r1, [r0, #16]
 4177 053a 1033     		adds	r3, r3, #16
 4178 053c 52E7     		b	.L360
 4179              	.L375:
  90:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 4180              		.loc 2 90 35 is_stmt 1 view .LVU1196
  90:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 4181              		.loc 2 90 58 is_stmt 0 view .LVU1197
 4182 053e 504B     		ldr	r3, .L389+24
 4183 0540 9BF8B050 		ldrb	r5, [fp, #176]	@ zero_extendqisi2
 4184              	.LVL355:
  90:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 4185              		.loc 2 90 58 view .LVU1198
 4186 0544 DBF8B470 		ldr	r7, [fp, #180]
 4187              	.LVL356:
  90:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 4188              		.loc 2 90 58 view .LVU1199
 4189 0548 93E80300 		ldm	r3, {r0, r1}
 4190 054c 0DF1080A 		add	r10, sp, #8
 4191 0550 8AE80300 		stm	r10, {r0, r1}
 4192 0554 37E6     		b	.L284
 4193              	.LVL357:
 4194              	.L373:
  87:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 4195              		.loc 2 87 35 is_stmt 1 view .LVU1200
  87:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
ARM GAS  /tmp/cc1cke1v.s 			page 113


 4196              		.loc 2 87 58 is_stmt 0 view .LVU1201
 4197 0556 4B4B     		ldr	r3, .L389+28
 4198 0558 9BF89050 		ldrb	r5, [fp, #144]	@ zero_extendqisi2
 4199              	.LVL358:
  87:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 4200              		.loc 2 87 58 view .LVU1202
 4201 055c DBF89470 		ldr	r7, [fp, #148]
 4202              	.LVL359:
  87:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 4203              		.loc 2 87 58 view .LVU1203
 4204 0560 93E80300 		ldm	r3, {r0, r1}
 4205 0564 0DF1080A 		add	r10, sp, #8
 4206 0568 8AE80300 		stm	r10, {r0, r1}
 4207 056c 2BE6     		b	.L284
 4208              	.LVL360:
 4209              	.L371:
  84:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 4210              		.loc 2 84 35 is_stmt 1 view .LVU1204
  84:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 4211              		.loc 2 84 58 is_stmt 0 view .LVU1205
 4212 056e 464B     		ldr	r3, .L389+32
 4213 0570 9BF87050 		ldrb	r5, [fp, #112]	@ zero_extendqisi2
 4214              	.LVL361:
  84:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 4215              		.loc 2 84 58 view .LVU1206
 4216 0574 DBF87470 		ldr	r7, [fp, #116]
 4217              	.LVL362:
  84:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 4218              		.loc 2 84 58 view .LVU1207
 4219 0578 93E80300 		ldm	r3, {r0, r1}
 4220 057c 0DF1080A 		add	r10, sp, #8
 4221 0580 8AE80300 		stm	r10, {r0, r1}
 4222 0584 1FE6     		b	.L284
 4223              	.LVL363:
 4224              	.L369:
  81:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 4225              		.loc 2 81 35 is_stmt 1 view .LVU1208
  81:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 4226              		.loc 2 81 58 is_stmt 0 view .LVU1209
 4227 0586 414B     		ldr	r3, .L389+36
 4228 0588 9BF85050 		ldrb	r5, [fp, #80]	@ zero_extendqisi2
 4229              	.LVL364:
  81:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 4230              		.loc 2 81 58 view .LVU1210
 4231 058c DBF85470 		ldr	r7, [fp, #84]
 4232              	.LVL365:
  81:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 4233              		.loc 2 81 58 view .LVU1211
 4234 0590 93E80300 		ldm	r3, {r0, r1}
 4235 0594 0DF1080A 		add	r10, sp, #8
 4236 0598 8AE80300 		stm	r10, {r0, r1}
 4237 059c 13E6     		b	.L284
 4238              	.LVL366:
 4239              	.L324:
 140:src/console.c ****     break;
 4240              		.loc 2 140 5 is_stmt 1 view .LVU1212
 140:src/console.c ****     break;
ARM GAS  /tmp/cc1cke1v.s 			page 114


 4241              		.loc 2 140 24 is_stmt 0 view .LVU1213
 4242 059e 3C4B     		ldr	r3, .L389+40
 4243 05a0 78E6     		b	.L358
 4244              	.L323:
 144:src/console.c ****   case SHIFT_G:
 4245              		.loc 2 144 5 is_stmt 1 view .LVU1214
 146:src/console.c ****     break;
 4246              		.loc 2 146 5 view .LVU1215
 146:src/console.c ****     break;
 4247              		.loc 2 146 26 is_stmt 0 view .LVU1216
 4248 05a2 3C4B     		ldr	r3, .L389+44
 4249 05a4 03EBC502 		add	r2, r3, r5, lsl #3
 4250 05a8 92E80300 		ldm	r2, {r0, r1}
 4251 05ac 0DF1080A 		add	r10, sp, #8
 4252 05b0 8AE80300 		stm	r10, {r0, r1}
 4253 05b4 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4254              	.LVL367:
 146:src/console.c ****     break;
 4255              		.loc 2 146 26 view .LVU1217
 4256 05b8 0F46     		mov	r7, r1
 4257              	.LVL368:
 146:src/console.c ****     break;
 4258              		.loc 2 146 26 view .LVU1218
 4259 05ba 04E6     		b	.L284
 4260              	.LVL369:
 4261              	.L322:
 141:src/console.c ****   case SHIFT_F:
 4262              		.loc 2 141 5 is_stmt 1 view .LVU1219
 143:src/console.c ****     break;
 4263              		.loc 2 143 5 view .LVU1220
 143:src/console.c ****     break;
 4264              		.loc 2 143 26 is_stmt 0 view .LVU1221
 4265 05bc 364B     		ldr	r3, .L389+48
 4266 05be 69E6     		b	.L358
 4267              	.L377:
 119:src/console.c ****       case SHIFT_N:
 4268              		.loc 2 119 7 is_stmt 1 view .LVU1222
 119:src/console.c ****       case SHIFT_N:
 4269              		.loc 2 119 15 is_stmt 0 view .LVU1223
 4270 05c0 FFF7FEFF 		bl	cur_shift
 4271              	.LVL370:
 119:src/console.c ****       case SHIFT_N:
 4272              		.loc 2 119 7 view .LVU1224
 4273 05c4 0328     		cmp	r0, #3
 4274 05c6 3FF620AE 		bhi	.L336
 4275 05ca 0128     		cmp	r0, #1
 4276 05cc 0BD8     		bhi	.L320
 4277 05ce 0028     		cmp	r0, #0
 4278 05d0 00F0A580 		beq	.L386
 122:src/console.c ****       case SHIFT_F:
 4279              		.loc 2 122 2 is_stmt 1 view .LVU1225
 124:src/console.c **** 	break;
 4280              		.loc 2 124 2 view .LVU1226
 124:src/console.c **** 	break;
 4281              		.loc 2 124 23 is_stmt 0 view .LVU1227
 4282 05d4 314B     		ldr	r3, .L389+52
 4283 05d6 93E80300 		ldm	r3, {r0, r1}
ARM GAS  /tmp/cc1cke1v.s 			page 115


 4284 05da 0DF1080A 		add	r10, sp, #8
 4285 05de 8AE80300 		stm	r10, {r0, r1}
 4286              	.LVL371:
 124:src/console.c **** 	break;
 4287              		.loc 2 124 23 view .LVU1228
 4288              	.LBE162:
 4289              	.LBE194:
 531:src/console.c **** 	set_menu ( remapped.shift );
 4290              		.loc 2 531 7 is_stmt 1 view .LVU1229
 537:src/console.c **** 	SET_ST(STAT_MENU);
 4291              		.loc 2 537 7 view .LVU1230
 545:src/console.c **** 	remapped = do_multi (remapped);
 4292              		.loc 2 545 7 view .LVU1231
 549:src/console.c ****       process_keycode_with_shift(remapped);
 4293              		.loc 2 549 7 view .LVU1232
 4294              	.LBB195:
 4295              	.LBB163:
 124:src/console.c **** 	break;
 4296              		.loc 2 124 23 is_stmt 0 view .LVU1233
 4297 05e2 2A25     		movs	r5, #42
 4298              	.LVL372:
 124:src/console.c **** 	break;
 4299              		.loc 2 124 23 view .LVU1234
 4300 05e4 13E6     		b	.L319
 4301              	.LVL373:
 4302              	.L320:
 125:src/console.c ****       case SHIFT_G:
 4303              		.loc 2 125 2 is_stmt 1 view .LVU1235
 127:src/console.c **** 	break;
 4304              		.loc 2 127 2 view .LVU1236
 127:src/console.c **** 	break;
 4305              		.loc 2 127 9 is_stmt 0 view .LVU1237
 4306 05e6 2E4B     		ldr	r3, .L389+56
 4307 05e8 E5E5     		b	.L359
 4308              	.L379:
 107:src/console.c ****     case KEY_F5:
 4309              		.loc 2 107 35 is_stmt 1 view .LVU1238
 107:src/console.c ****     case KEY_F5:
 4310              		.loc 2 107 69 is_stmt 0 view .LVU1239
 4311 05ea 3168     		ldr	r1, [r6]
 4312 05ec 214A     		ldr	r2, .L389+12
 4313 05ee D023     		movs	r3, #208
 4314 05f0 03FB01F3 		mul	r3, r3, r1
 4315 05f4 D018     		adds	r0, r2, r3
 4316 05f6 D0E91E01 		ldrd	r0, r1, [r0, #120]
 4317 05fa 7833     		adds	r3, r3, #120
 4318 05fc F2E6     		b	.L360
 4319              	.L380:
 104:src/console.c ****     case KEY_F4:
 4320              		.loc 2 104 35 is_stmt 1 view .LVU1240
 104:src/console.c ****     case KEY_F4:
 4321              		.loc 2 104 69 is_stmt 0 view .LVU1241
 4322 05fe 3168     		ldr	r1, [r6]
 4323 0600 1C4A     		ldr	r2, .L389+12
 4324 0602 D023     		movs	r3, #208
 4325 0604 03FB01F3 		mul	r3, r3, r1
 4326 0608 D018     		adds	r0, r2, r3
ARM GAS  /tmp/cc1cke1v.s 			page 116


 4327 060a D0E91601 		ldrd	r0, r1, [r0, #88]
 4328 060e 5833     		adds	r3, r3, #88
 4329 0610 E8E6     		b	.L360
 4330              	.L378:
 110:src/console.c ****     case KEY_F6:
 4331              		.loc 2 110 35 is_stmt 1 view .LVU1242
 110:src/console.c ****     case KEY_F6:
 4332              		.loc 2 110 69 is_stmt 0 view .LVU1243
 4333 0612 3168     		ldr	r1, [r6]
 4334 0614 174A     		ldr	r2, .L389+12
 4335 0616 D023     		movs	r3, #208
 4336 0618 03FB01F3 		mul	r3, r3, r1
 4337 061c D018     		adds	r0, r2, r3
 4338 061e D0E92601 		ldrd	r0, r1, [r0, #152]
 4339 0622 9833     		adds	r3, r3, #152
 4340 0624 DEE6     		b	.L360
 4341              	.L384:
 101:src/console.c ****     case KEY_F3:
 4342              		.loc 2 101 35 is_stmt 1 view .LVU1244
 101:src/console.c ****     case KEY_F3:
 4343              		.loc 2 101 69 is_stmt 0 view .LVU1245
 4344 0626 3168     		ldr	r1, [r6]
 4345 0628 124A     		ldr	r2, .L389+12
 4346 062a D023     		movs	r3, #208
 4347 062c 03FB01F3 		mul	r3, r3, r1
 4348 0630 D018     		adds	r0, r2, r3
 4349 0632 D0E90E01 		ldrd	r0, r1, [r0, #56]
 4350 0636 3833     		adds	r3, r3, #56
 4351 0638 D4E6     		b	.L360
 4352              	.L382:
  98:src/console.c ****     case KEY_F2:
 4353              		.loc 2 98 35 is_stmt 1 view .LVU1246
  98:src/console.c ****     case KEY_F2:
 4354              		.loc 2 98 69 is_stmt 0 view .LVU1247
 4355 063a 3168     		ldr	r1, [r6]
 4356 063c 0D4A     		ldr	r2, .L389+12
 4357 063e D023     		movs	r3, #208
 4358 0640 03FB01F3 		mul	r3, r3, r1
 4359 0644 D018     		adds	r0, r2, r3
 4360 0646 D0E90601 		ldrd	r0, r1, [r0, #24]
 4361 064a 1833     		adds	r3, r3, #24
 4362 064c CAE6     		b	.L360
 4363              	.L372:
  85:src/console.c ****     case KEY_F5:
 4364              		.loc 2 85 35 is_stmt 1 view .LVU1248
  85:src/console.c ****     case KEY_F5:
 4365              		.loc 2 85 58 is_stmt 0 view .LVU1249
 4366 064e 154B     		ldr	r3, .L389+60
 4367 0650 9BF87850 		ldrb	r5, [fp, #120]	@ zero_extendqisi2
 4368              	.LVL374:
  85:src/console.c ****     case KEY_F5:
 4369              		.loc 2 85 58 view .LVU1250
 4370 0654 DBF87C70 		ldr	r7, [fp, #124]
 4371              	.LVL375:
  85:src/console.c ****     case KEY_F5:
 4372              		.loc 2 85 58 view .LVU1251
 4373 0658 93E80300 		ldm	r3, {r0, r1}
ARM GAS  /tmp/cc1cke1v.s 			page 117


 4374 065c 0DF1080A 		add	r10, sp, #8
 4375 0660 8AE80300 		stm	r10, {r0, r1}
 4376 0664 AFE5     		b	.L284
 4377              	.L390:
 4378 0666 00BF     		.align	2
 4379              	.L389:
 4380 0668 00000000 		.word	.LANCHOR2
 4381 066c 00000000 		.word	.LANCHOR3
 4382 0670 00000000 		.word	.LANCHOR17
 4383 0674 00000000 		.word	.LANCHOR5
 4384 0678 30000000 		.word	.LANCHOR4+48
 4385 067c 10000000 		.word	.LANCHOR4+16
 4386 0680 B0000000 		.word	.LANCHOR4+176
 4387 0684 90000000 		.word	.LANCHOR4+144
 4388 0688 70000000 		.word	.LANCHOR4+112
 4389 068c 50000000 		.word	.LANCHOR4+80
 4390 0690 00000000 		.word	.LANCHOR14
 4391 0694 00000000 		.word	.LANCHOR18
 4392 0698 00000000 		.word	.LANCHOR15
 4393 069c E0000000 		.word	.LANCHOR15+224
 4394 06a0 00000000 		.word	.LANCHOR16
 4395 06a4 78000000 		.word	.LANCHOR4+120
 4396              	.LVL376:
 4397              	.L374:
  88:src/console.c ****     case KEY_F6:
 4398              		.loc 2 88 35 is_stmt 1 view .LVU1252
  88:src/console.c ****     case KEY_F6:
 4399              		.loc 2 88 58 is_stmt 0 view .LVU1253
 4400 06a8 244B     		ldr	r3, .L391
 4401 06aa 9BF89850 		ldrb	r5, [fp, #152]	@ zero_extendqisi2
 4402              	.LVL377:
  88:src/console.c ****     case KEY_F6:
 4403              		.loc 2 88 58 view .LVU1254
 4404 06ae DBF89C70 		ldr	r7, [fp, #156]
 4405              	.LVL378:
  88:src/console.c ****     case KEY_F6:
 4406              		.loc 2 88 58 view .LVU1255
 4407 06b2 93E80300 		ldm	r3, {r0, r1}
 4408 06b6 0DF1080A 		add	r10, sp, #8
 4409 06ba 8AE80300 		stm	r10, {r0, r1}
 4410 06be 82E5     		b	.L284
 4411              	.LVL379:
 4412              	.L376:
  91:src/console.c ****     }
 4413              		.loc 2 91 35 is_stmt 1 view .LVU1256
  91:src/console.c ****     }
 4414              		.loc 2 91 58 is_stmt 0 view .LVU1257
 4415 06c0 98E80300 		ldm	r8, {r0, r1}
 4416 06c4 0DF1080A 		add	r10, sp, #8
 4417 06c8 8AE80300 		stm	r10, {r0, r1}
 4418 06cc 9BF8B850 		ldrb	r5, [fp, #184]	@ zero_extendqisi2
 4419              	.LVL380:
  91:src/console.c ****     }
 4420              		.loc 2 91 58 view .LVU1258
 4421 06d0 DBF8BC70 		ldr	r7, [fp, #188]
 4422              	.LVL381:
  91:src/console.c ****     }
ARM GAS  /tmp/cc1cke1v.s 			page 118


 4423              		.loc 2 91 58 view .LVU1259
 4424 06d4 77E5     		b	.L284
 4425              	.LVL382:
 4426              	.L370:
  82:src/console.c ****     case KEY_F4:
 4427              		.loc 2 82 35 is_stmt 1 view .LVU1260
  82:src/console.c ****     case KEY_F4:
 4428              		.loc 2 82 58 is_stmt 0 view .LVU1261
 4429 06d6 1A4B     		ldr	r3, .L391+4
 4430 06d8 9BF85850 		ldrb	r5, [fp, #88]	@ zero_extendqisi2
 4431              	.LVL383:
  82:src/console.c ****     case KEY_F4:
 4432              		.loc 2 82 58 view .LVU1262
 4433 06dc DBF85C70 		ldr	r7, [fp, #92]
 4434              	.LVL384:
  82:src/console.c ****     case KEY_F4:
 4435              		.loc 2 82 58 view .LVU1263
 4436 06e0 93E80300 		ldm	r3, {r0, r1}
 4437 06e4 0DF1080A 		add	r10, sp, #8
 4438 06e8 8AE80300 		stm	r10, {r0, r1}
 4439 06ec 6BE5     		b	.L284
 4440              	.LVL385:
 4441              	.L368:
  79:src/console.c ****     case KEY_F3:
 4442              		.loc 2 79 35 is_stmt 1 view .LVU1264
  79:src/console.c ****     case KEY_F3:
 4443              		.loc 2 79 58 is_stmt 0 view .LVU1265
 4444 06ee 154B     		ldr	r3, .L391+8
 4445 06f0 9BF83850 		ldrb	r5, [fp, #56]	@ zero_extendqisi2
 4446              	.LVL386:
  79:src/console.c ****     case KEY_F3:
 4447              		.loc 2 79 58 view .LVU1266
 4448 06f4 DBF83C70 		ldr	r7, [fp, #60]
 4449              	.LVL387:
  79:src/console.c ****     case KEY_F3:
 4450              		.loc 2 79 58 view .LVU1267
 4451 06f8 93E80300 		ldm	r3, {r0, r1}
 4452 06fc 0DF1080A 		add	r10, sp, #8
 4453 0700 8AE80300 		stm	r10, {r0, r1}
 4454 0704 5FE5     		b	.L284
 4455              	.LVL388:
 4456              	.L385:
  76:src/console.c ****     case KEY_F2:
 4457              		.loc 2 76 35 is_stmt 1 view .LVU1268
  76:src/console.c ****     case KEY_F2:
 4458              		.loc 2 76 58 is_stmt 0 view .LVU1269
 4459 0706 104B     		ldr	r3, .L391+12
 4460 0708 9BF81850 		ldrb	r5, [fp, #24]	@ zero_extendqisi2
 4461              	.LVL389:
  76:src/console.c ****     case KEY_F2:
 4462              		.loc 2 76 58 view .LVU1270
 4463 070c DBF81C70 		ldr	r7, [fp, #28]
 4464              	.LVL390:
  76:src/console.c ****     case KEY_F2:
 4465              		.loc 2 76 58 view .LVU1271
 4466 0710 93E80300 		ldm	r3, {r0, r1}
 4467 0714 0DF1080A 		add	r10, sp, #8
ARM GAS  /tmp/cc1cke1v.s 			page 119


 4468 0718 8AE80300 		stm	r10, {r0, r1}
 4469 071c 53E5     		b	.L284
 4470              	.LVL391:
 4471              	.L386:
 121:src/console.c **** 	break;
 4472              		.loc 2 121 2 is_stmt 1 view .LVU1272
 121:src/console.c **** 	break;
 4473              		.loc 2 121 21 is_stmt 0 view .LVU1273
 4474 071e 0B4B     		ldr	r3, .L391+16
 4475 0720 93E80300 		ldm	r3, {r0, r1}
 4476 0724 0DF1080A 		add	r10, sp, #8
 4477 0728 8AE80300 		stm	r10, {r0, r1}
 4478              	.LVL392:
 121:src/console.c **** 	break;
 4479              		.loc 2 121 21 view .LVU1274
 4480              	.LBE163:
 4481              	.LBE195:
 531:src/console.c **** 	set_menu ( remapped.shift );
 4482              		.loc 2 531 7 is_stmt 1 view .LVU1275
 537:src/console.c **** 	SET_ST(STAT_MENU);
 4483              		.loc 2 537 7 view .LVU1276
 545:src/console.c **** 	remapped = do_multi (remapped);
 4484              		.loc 2 545 7 view .LVU1277
 549:src/console.c ****       process_keycode_with_shift(remapped);
 4485              		.loc 2 549 7 view .LVU1278
 4486              	.LBB196:
 4487              	.LBB164:
 121:src/console.c **** 	break;
 4488              		.loc 2 121 21 is_stmt 0 view .LVU1279
 4489 072c 2925     		movs	r5, #41
 4490              	.LVL393:
 121:src/console.c **** 	break;
 4491              		.loc 2 121 21 view .LVU1280
 4492 072e 6EE5     		b	.L319
 4493              	.LVL394:
 4494              	.L356:
 121:src/console.c **** 	break;
 4495              		.loc 2 121 21 view .LVU1281
 4496              	.LBE164:
 4497              	.LBE196:
 4498              	.LBB197:
 4499              	.LBB182:
  88:src/menu.c    ****   }
 4500              		.loc 1 88 5 is_stmt 1 view .LVU1282
  88:src/menu.c    ****   }
 4501              		.loc 1 88 18 is_stmt 0 view .LVU1283
 4502 0730 074A     		ldr	r2, .L391+20
 4503 0732 1768     		ldr	r7, [r2]
 4504 0734 3760     		str	r7, [r6]
  96:src/menu.c    **** }
 4505              		.loc 1 96 3 is_stmt 1 view .LVU1284
 4506 0736 0DF1080A 		add	r10, sp, #8
 4507 073a 7CE5     		b	.L327
 4508              	.L392:
 4509              		.align	2
 4510              	.L391:
 4511 073c 98000000 		.word	.LANCHOR4+152
ARM GAS  /tmp/cc1cke1v.s 			page 120


 4512 0740 58000000 		.word	.LANCHOR4+88
 4513 0744 38000000 		.word	.LANCHOR4+56
 4514 0748 18000000 		.word	.LANCHOR4+24
 4515 074c E0000000 		.word	.LANCHOR14+224
 4516 0750 00000000 		.word	.LANCHOR2
 4517              	.LBE182:
 4518              	.LBE197:
 4519              		.cfi_endproc
 4520              	.LFE31:
 4522              		.global	n_p
 4523              		.comm	print_string,22,4
 4524              		.global	spaces
 4525              		.global	release
 4526              		.global	h_shift
 4527              		.global	g_shift
 4528              		.global	f_shift
 4529              		.global	heartbeat
 4530              		.global	no_key
 4531              		.global	MID_MENU
 4532              		.section	.rodata.str1.4,"aMS",%progbits,1
 4533              		.align	2
 4534              	.LC12:
 4535 0000 53797374 		.ascii	"System!\000"
 4535      656D2100 
 4536              		.global	mid_menu
 4537              		.global	cmplx_key_string
 4538              		.align	2
 4539              	.LC13:
 4540 0008 43505800 		.ascii	"CPX\000"
 4541              		.global	arrow_key_string
 4542              		.align	2
 4543              	.LC14:
 4544 000c 2D2D0D00 		.ascii	"--\015\000"
 4545              		.global	UserMenu
 4546              		.section	.rodata
 4547              		.align	2
 4548              		.set	.LANCHOR8,. + 0
 4549              	.LC8:
 4550 0000 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4550      2A2B0708 
 4550      091C0B0C 
 4550      0D0E0F
 4551 000f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4551      13141516 
 4551      00121819 
 4551      1A
 4552 001c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4552      1E1F2000 
 4552      21222324 
 4552      25
 4553              		.section	.bss.current_menu,"aw",%nobits
 4554              		.align	2
 4555              		.set	.LANCHOR1,. + 0
 4558              	current_menu:
 4559 0000 00000000 		.space	4
 4560              		.section	.bss.default_menu,"aw",%nobits
 4561              		.align	2
ARM GAS  /tmp/cc1cke1v.s 			page 121


 4562              		.set	.LANCHOR2,. + 0
 4565              	default_menu:
 4566 0000 00000000 		.space	4
 4567              		.section	.bss.last_menu,"aw",%nobits
 4568              		.align	2
 4569              		.set	.LANCHOR3,. + 0
 4572              	last_menu:
 4573 0000 00000000 		.space	4
 4574              		.section	.bss.mdots,"aw",%nobits
 4575              		.align	2
 4576              		.set	.LANCHOR0,. + 0
 4579              	mdots:
 4580 0000 00000000 		.space	400
 4580      00000000 
 4580      00000000 
 4580      00000000 
 4580      00000000 
 4581              		.section	.bss.n_p,"aw",%nobits
 4582              		.align	2
 4585              	n_p:
 4586 0000 00000000 		.space	4
 4587              		.section	.bss.start_ticks,"aw",%nobits
 4588              		.align	2
 4589              		.set	.LANCHOR9,. + 0
 4592              	start_ticks:
 4593 0000 00000000 		.space	4
 4594              		.section	.data.UserMenu,"aw"
 4595              		.align	2
 4596              		.set	.LANCHOR4,. + 0
 4599              	UserMenu:
 4600 0000 55736572 		.ascii	"User Menu\000"
 4600      204D656E 
 4600      7500
 4601 000a 00000000 		.space	5
 4601      00
 4602 000f 00       		.space	1
 4603 0010 2E       		.byte	46
 4604 0011 000000   		.space	3
 4605 0014 FFFFFFFF 		.word	-1
 4606 0018 2E       		.byte	46
 4607 0019 000000   		.space	3
 4608 001c FFFFFFFF 		.word	-1
 4609 0020 00       		.ascii	"\000"
 4610 0021 00000000 		.space	7
 4610      000000
 4611 0028 00       		.ascii	"\000"
 4612 0029 00000000 		.space	7
 4612      000000
 4613 0030 2E       		.byte	46
 4614 0031 000000   		.space	3
 4615 0034 FFFFFFFF 		.word	-1
 4616 0038 2E       		.byte	46
 4617 0039 000000   		.space	3
 4618 003c FFFFFFFF 		.word	-1
 4619 0040 00       		.ascii	"\000"
 4620 0041 00000000 		.space	7
 4620      000000
ARM GAS  /tmp/cc1cke1v.s 			page 122


 4621 0048 00       		.ascii	"\000"
 4622 0049 00000000 		.space	7
 4622      000000
 4623 0050 2E       		.byte	46
 4624 0051 000000   		.space	3
 4625 0054 FFFFFFFF 		.word	-1
 4626 0058 2E       		.byte	46
 4627 0059 000000   		.space	3
 4628 005c FFFFFFFF 		.word	-1
 4629 0060 00       		.ascii	"\000"
 4630 0061 00000000 		.space	7
 4630      000000
 4631 0068 00       		.ascii	"\000"
 4632 0069 00000000 		.space	7
 4632      000000
 4633 0070 2E       		.byte	46
 4634 0071 000000   		.space	3
 4635 0074 FFFFFFFF 		.word	-1
 4636 0078 2E       		.byte	46
 4637 0079 000000   		.space	3
 4638 007c FFFFFFFF 		.word	-1
 4639 0080 00       		.ascii	"\000"
 4640 0081 00000000 		.space	7
 4640      000000
 4641 0088 00       		.ascii	"\000"
 4642 0089 00000000 		.space	7
 4642      000000
 4643 0090 2C       		.byte	44
 4644 0091 000000   		.space	3
 4645 0094 FFFFFFFF 		.word	-1
 4646 0098 2E       		.byte	46
 4647 0099 000000   		.space	3
 4648 009c FFFFFFFF 		.word	-1
 4649 00a0 2D2D0D00 		.ascii	"--\015\000"
 4650 00a4 00000000 		.space	4
 4651 00a8 00       		.ascii	"\000"
 4652 00a9 00000000 		.space	7
 4652      000000
 4653 00b0 2D       		.byte	45
 4654 00b1 000000   		.space	3
 4655 00b4 FFFFFFFF 		.word	-1
 4656 00b8 31       		.byte	49
 4657 00b9 000000   		.space	3
 4658 00bc 0B000000 		.word	11
 4659 00c0 43505800 		.ascii	"CPX\000"
 4660 00c4 00000000 		.space	4
 4661 00c8 00       		.ascii	"\000"
 4662 00c9 00000000 		.space	7
 4662      000000
 4663              		.section	.data.arrow_key_string,"aw"
 4664              		.align	2
 4665              		.set	.LANCHOR6,. + 0
 4668              	arrow_key_string:
 4669 0000 0C000000 		.word	.LC14
 4670              		.section	.data.cmplx_key_string,"aw"
 4671              		.align	2
 4672              		.set	.LANCHOR7,. + 0
ARM GAS  /tmp/cc1cke1v.s 			page 123


 4675              	cmplx_key_string:
 4676 0000 08000000 		.word	.LC13
 4677              		.section	.data.f_shift,"aw"
 4678              		.align	2
 4681              	f_shift:
 4682 0000 29       		.byte	41
 4683 0001 000000   		.space	3
 4684 0004 FFFFFFFF 		.word	-1
 4685              		.section	.data.g_shift,"aw"
 4686              		.align	2
 4689              	g_shift:
 4690 0000 2A       		.byte	42
 4691 0001 000000   		.space	3
 4692 0004 FFFFFFFF 		.word	-1
 4693              		.section	.data.h_shift,"aw"
 4694              		.align	2
 4695              		.set	.LANCHOR16,. + 0
 4698              	h_shift:
 4699 0000 2B       		.byte	43
 4700 0001 000000   		.space	3
 4701 0004 FFFFFFFF 		.word	-1
 4702              		.section	.data.heartbeat,"aw"
 4703              		.align	2
 4704              		.set	.LANCHOR20,. + 0
 4707              	heartbeat:
 4708 0000 62       		.byte	98
 4709 0001 000000   		.space	3
 4710 0004 FFFFFFFF 		.word	-1
 4711              		.section	.data.no_key,"aw"
 4712              		.align	2
 4713              		.set	.LANCHOR11,. + 0
 4716              	no_key:
 4717 0000 2E       		.byte	46
 4718 0001 000000   		.space	3
 4719 0004 00000000 		.word	0
 4720              		.section	.data.release,"aw"
 4721              		.align	2
 4722              		.set	.LANCHOR12,. + 0
 4725              	release:
 4726 0000 63       		.byte	99
 4727 0001 000000   		.space	3
 4728 0004 FFFFFFFF 		.word	-1
 4729              		.section	.data.spaces,"aw"
 4730              		.align	2
 4731              		.set	.LANCHOR10,. + 0
 4734              	spaces:
 4735 0000 20202020 		.ascii	"                     \000"
 4735      20202020 
 4735      20202020 
 4735      20202020 
 4735      20202020 
 4736              		.section	.rodata.MID_MENU,"a"
 4737              		.align	2
 4738              		.set	.LANCHOR19,. + 0
 4741              	MID_MENU:
 4742 0000 00000000 		.word	.LC12
 4743 0004 00000000 		.word	mid_menu
ARM GAS  /tmp/cc1cke1v.s 			page 124


 4744 0008 00000000 		.word	0
 4745 000c 00000000 		.word	0
 4746              		.section	.rodata.Menus,"a"
 4747              		.align	2
 4748              		.set	.LANCHOR5,. + 0
 4751              	Menus:
 4752 0000 426C616E 		.ascii	"Blank\000"
 4752      6B00
 4753 0006 00000000 		.space	9
 4753      00000000 
 4753      00
 4754 000f 00       		.space	1
 4755 0010 2E       		.byte	46
 4756 0011 000000   		.space	3
 4757 0014 FFFFFFFF 		.word	-1
 4758 0018 2E       		.byte	46
 4759 0019 000000   		.space	3
 4760 001c FFFFFFFF 		.word	-1
 4761 0020 00       		.ascii	"\000"
 4762 0021 00000000 		.space	7
 4762      000000
 4763 0028 00       		.ascii	"\000"
 4764 0029 00000000 		.space	7
 4764      000000
 4765 0030 2E       		.byte	46
 4766 0031 000000   		.space	3
 4767 0034 FFFFFFFF 		.word	-1
 4768 0038 2E       		.byte	46
 4769 0039 000000   		.space	3
 4770 003c FFFFFFFF 		.word	-1
 4771 0040 00       		.ascii	"\000"
 4772 0041 00000000 		.space	7
 4772      000000
 4773 0048 00       		.ascii	"\000"
 4774 0049 00000000 		.space	7
 4774      000000
 4775 0050 2E       		.byte	46
 4776 0051 000000   		.space	3
 4777 0054 FFFFFFFF 		.word	-1
 4778 0058 2E       		.byte	46
 4779 0059 000000   		.space	3
 4780 005c FFFFFFFF 		.word	-1
 4781 0060 00       		.ascii	"\000"
 4782 0061 00000000 		.space	7
 4782      000000
 4783 0068 00       		.ascii	"\000"
 4784 0069 00000000 		.space	7
 4784      000000
 4785 0070 2E       		.byte	46
 4786 0071 000000   		.space	3
 4787 0074 FFFFFFFF 		.word	-1
 4788 0078 2E       		.byte	46
 4789 0079 000000   		.space	3
 4790 007c FFFFFFFF 		.word	-1
 4791 0080 00       		.ascii	"\000"
 4792 0081 00000000 		.space	7
 4792      000000
ARM GAS  /tmp/cc1cke1v.s 			page 125


 4793 0088 00       		.ascii	"\000"
 4794 0089 00000000 		.space	7
 4794      000000
 4795 0090 2C       		.byte	44
 4796 0091 000000   		.space	3
 4797 0094 FFFFFFFF 		.word	-1
 4798 0098 2E       		.byte	46
 4799 0099 000000   		.space	3
 4800 009c FFFFFFFF 		.word	-1
 4801 00a0 2D2D0D00 		.ascii	"--\015\000"
 4802 00a4 00000000 		.space	4
 4803 00a8 00       		.ascii	"\000"
 4804 00a9 00000000 		.space	7
 4804      000000
 4805 00b0 2D       		.byte	45
 4806 00b1 000000   		.space	3
 4807 00b4 FFFFFFFF 		.word	-1
 4808 00b8 31       		.byte	49
 4809 00b9 000000   		.space	3
 4810 00bc 0B000000 		.word	11
 4811 00c0 43505800 		.ascii	"CPX\000"
 4812 00c4 00000000 		.space	4
 4813 00c8 00       		.ascii	"\000"
 4814 00c9 00000000 		.space	7
 4814      000000
 4815 00d0 436C6561 		.ascii	"Clear\000"
 4815      7200
 4816 00d6 00000000 		.space	9
 4816      00000000 
 4816      00
 4817 00df 00       		.space	1
 4818 00e0 10       		.byte	16
 4819 00e1 000000   		.space	3
 4820 00e4 01000000 		.word	1
 4821 00e8 34       		.byte	52
 4822 00e9 000000   		.space	3
 4823 00ec 44010000 		.word	324
 4824 00f0 434C5072 		.ascii	"CLProg\000"
 4824      6F6700
 4825 00f7 00       		.space	1
 4826 00f8 434C5041 		.ascii	"CLPAll\000"
 4826      6C6C00
 4827 00ff 00       		.space	1
 4828 0100 10       		.byte	16
 4829 0101 000000   		.space	3
 4830 0104 02000000 		.word	2
 4831 0108 34       		.byte	52
 4832 0109 000000   		.space	3
 4833 010c 3E010000 		.word	318
 4834 0110 434C9100 		.ascii	"CL\221\000"
 4835 0114 00000000 		.space	4
 4836 0118 434C5265 		.ascii	"CLReg\000"
 4836      6700
 4837 011e 0000     		.space	2
 4838 0120 10       		.byte	16
 4839 0121 000000   		.space	3
 4840 0124 03000000 		.word	3
ARM GAS  /tmp/cc1cke1v.s 			page 126


 4841 0128 34       		.byte	52
 4842 0129 000000   		.space	3
 4843 012c 74010000 		.word	372
 4844 0130 434C7800 		.ascii	"CLx\000"
 4845 0134 00000000 		.space	4
 4846 0138 434C06A0 		.ascii	"CL\006\240\000"
 4846      00
 4847 013d 000000   		.space	3
 4848 0140 34       		.byte	52
 4849 0141 000000   		.space	3
 4850 0144 40010000 		.word	320
 4851 0148 34       		.byte	52
 4852 0149 000000   		.space	3
 4853 014c 41010000 		.word	321
 4854 0150 434C5374 		.ascii	"CLStk\000"
 4854      6B00
 4855 0156 0000     		.space	2
 4856 0158 434C416C 		.ascii	"CLAll\000"
 4856      6C00
 4857 015e 0000     		.space	2
 4858 0160 2C       		.byte	44
 4859 0161 000000   		.space	3
 4860 0164 FFFFFFFF 		.word	-1
 4861 0168 2E       		.byte	46
 4862 0169 000000   		.space	3
 4863 016c FFFFFFFF 		.word	-1
 4864 0170 2D2D0D00 		.ascii	"--\015\000"
 4865 0174 00000000 		.space	4
 4866 0178 00       		.ascii	"\000"
 4867 0179 00000000 		.space	7
 4867      000000
 4868 0180 2D       		.byte	45
 4869 0181 000000   		.space	3
 4870 0184 FFFFFFFF 		.word	-1
 4871 0188 2E       		.byte	46
 4872 0189 000000   		.space	3
 4873 018c FFFFFFFF 		.word	-1
 4874 0190 43505800 		.ascii	"CPX\000"
 4875 0194 00000000 		.space	4
 4876 0198 00       		.ascii	"\000"
 4877 0199 00000000 		.space	7
 4877      000000
 4878 01a0 44495350 		.ascii	"DISP\000"
 4878      00
 4879 01a5 00000000 		.space	10
 4879      00000000 
 4879      0000
 4880 01af 00       		.space	1
 4881 01b0 00       		.byte	0
 4882 01b1 000000   		.space	3
 4883 01b4 03000000 		.word	3
 4884 01b8 05       		.byte	5
 4885 01b9 000000   		.space	3
 4886 01bc 01000000 		.word	1
 4887 01c0 414C4C00 		.ascii	"ALL\000"
 4888 01c4 00000000 		.space	4
 4889 01c8 6120622F 		.ascii	"a b/c\000"
ARM GAS  /tmp/cc1cke1v.s 			page 127


 4889      6300
 4890 01ce 0000     		.space	2
 4891 01d0 01       		.byte	1
 4892 01d1 000000   		.space	3
 4893 01d4 03000000 		.word	3
 4894 01d8 05       		.byte	5
 4895 01d9 000000   		.space	3
 4896 01dc 02000000 		.word	2
 4897 01e0 46495800 		.ascii	"FIX\000"
 4898 01e4 00000000 		.space	4
 4899 01e8 642F6300 		.ascii	"d/c\000"
 4900 01ec 00000000 		.space	4
 4901 01f0 02       		.byte	2
 4902 01f1 000000   		.space	3
 4903 01f4 03000000 		.word	3
 4904 01f8 06       		.byte	6
 4905 01f9 000000   		.space	3
 4906 01fc 01000000 		.word	1
 4907 0200 53434900 		.ascii	"SCI\000"
 4908 0204 00000000 		.space	4
 4909 0208 482E4D53 		.ascii	"H.MS\000"
 4909      00
 4910 020d 000000   		.space	3
 4911 0210 03       		.byte	3
 4912 0211 000000   		.space	3
 4913 0214 03000000 		.word	3
 4914 0218 07       		.byte	7
 4915 0219 000000   		.space	3
 4916 021c 01000000 		.word	1
 4917 0220 454E4700 		.ascii	"ENG\000"
 4918 0224 00000000 		.space	4
 4919 0228 482E6400 		.ascii	"H.d\000"
 4920 022c 00000000 		.space	4
 4921 0230 2C       		.byte	44
 4922 0231 000000   		.space	3
 4923 0234 FFFFFFFF 		.word	-1
 4924 0238 26       		.byte	38
 4925 0239 000000   		.space	3
 4926 023c 03000000 		.word	3
 4927 0240 2D2D0D00 		.ascii	"--\015\000"
 4928 0244 00000000 		.space	4
 4929 0248 2E2F2C00 		.ascii	"./,\000"
 4930 024c 00000000 		.space	4
 4931 0250 2D       		.byte	45
 4932 0251 000000   		.space	3
 4933 0254 FFFFFFFF 		.word	-1
 4934 0258 2E       		.byte	46
 4935 0259 000000   		.space	3
 4936 025c FFFFFFFF 		.word	-1
 4937 0260 43505800 		.ascii	"CPX\000"
 4938 0264 00000000 		.space	4
 4939 0268 00       		.ascii	"\000"
 4940 0269 00000000 		.space	7
 4940      000000
 4941 0270 42415345 		.ascii	"BASE\000"
 4941      00
 4942 0275 00000000 		.space	10
ARM GAS  /tmp/cc1cke1v.s 			page 128


 4942      00000000 
 4942      0000
 4943 027f 00       		.space	1
 4944 0280 0E       		.byte	14
 4945 0281 000000   		.space	3
 4946 0284 01000000 		.word	1
 4947 0288 0E       		.byte	14
 4948 0289 000000   		.space	3
 4949 028c 03000000 		.word	3
 4950 0290 42494E00 		.ascii	"BIN\000"
 4951 0294 00000000 		.space	4
 4952 0298 6E6F7400 		.ascii	"not\000"
 4953 029c 00000000 		.space	4
 4954 02a0 0E       		.byte	14
 4955 02a1 000000   		.space	3
 4956 02a4 02000000 		.word	2
 4957 02a8 13       		.byte	19
 4958 02a9 000000   		.space	3
 4959 02ac 03000000 		.word	3
 4960 02b0 4F435400 		.ascii	"OCT\000"
 4961 02b4 00000000 		.space	4
 4962 02b8 616E6400 		.ascii	"and\000"
 4963 02bc 00000000 		.space	4
 4964 02c0 0F       		.byte	15
 4965 02c1 000000   		.space	3
 4966 02c4 01000000 		.word	1
 4967 02c8 14       		.byte	20
 4968 02c9 000000   		.space	3
 4969 02cc 03000000 		.word	3
 4970 02d0 44454300 		.ascii	"DEC\000"
 4971 02d4 00000000 		.space	4
 4972 02d8 6F7200   		.ascii	"or\000"
 4973 02db 00000000 		.space	5
 4973      00
 4974 02e0 0F       		.byte	15
 4975 02e1 000000   		.space	3
 4976 02e4 02000000 		.word	2
 4977 02e8 15       		.byte	21
 4978 02e9 000000   		.space	3
 4979 02ec 03000000 		.word	3
 4980 02f0 48455800 		.ascii	"HEX\000"
 4981 02f4 00000000 		.space	4
 4982 02f8 786F7200 		.ascii	"xor\000"
 4983 02fc 00000000 		.space	4
 4984 0300 2C       		.byte	44
 4985 0301 000000   		.space	3
 4986 0304 FFFFFFFF 		.word	-1
 4987 0308 16       		.byte	22
 4988 0309 000000   		.space	3
 4989 030c 03000000 		.word	3
 4990 0310 2D2D0D00 		.ascii	"--\015\000"
 4991 0314 00000000 		.space	4
 4992 0318 524D4452 		.ascii	"RMDR\000"
 4992      00
 4993 031d 000000   		.space	3
 4994 0320 2D       		.byte	45
 4995 0321 000000   		.space	3
ARM GAS  /tmp/cc1cke1v.s 			page 129


 4996 0324 FFFFFFFF 		.word	-1
 4997 0328 07       		.byte	7
 4998 0329 000000   		.space	3
 4999 032c 01000000 		.word	1
 5000 0330 43505800 		.ascii	"CPX\000"
 5001 0334 00000000 		.space	4
 5002 0338 482E6400 		.ascii	"H.d\000"
 5003 033c 00000000 		.space	4
 5004 0340 414E474C 		.ascii	"ANGLES\000"
 5004      455300
 5005 0347 00000000 		.space	8
 5005      00000000 
 5006 034f 00       		.space	1
 5007 0350 06       		.byte	6
 5008 0351 000000   		.space	3
 5009 0354 02000000 		.word	2
 5010 0358 04       		.byte	4
 5011 0359 000000   		.space	3
 5012 035c 01000000 		.word	1
 5013 0360 44454700 		.ascii	"DEG\000"
 5014 0364 00000000 		.space	4
 5015 0368 500D5200 		.ascii	"P\015R\000"
 5016 036c 00000000 		.space	4
 5017 0370 07       		.byte	7
 5018 0371 000000   		.space	3
 5019 0374 02000000 		.word	2
 5020 0378 04       		.byte	4
 5021 0379 000000   		.space	3
 5022 037c 02000000 		.word	2
 5023 0380 52414400 		.ascii	"RAD\000"
 5024 0384 00000000 		.space	4
 5025 0388 520D5000 		.ascii	"R\015P\000"
 5026 038c 00000000 		.space	4
 5027 0390 08       		.byte	8
 5028 0391 000000   		.space	3
 5029 0394 02000000 		.word	2
 5030 0398 00       		.byte	0
 5031 0399 000000   		.space	3
 5032 039c 01000000 		.word	1
 5033 03a0 47524144 		.ascii	"GRAD\000"
 5033      00
 5034 03a5 000000   		.space	3
 5035 03a8 48595000 		.ascii	"HYP\000"
 5036 03ac 00000000 		.space	4
 5037 03b0 06       		.byte	6
 5038 03b1 000000   		.space	3
 5039 03b4 01000000 		.word	1
 5040 03b8 07       		.byte	7
 5041 03b9 000000   		.space	3
 5042 03bc 01000000 		.word	1
 5043 03c0 482E4D53 		.ascii	"H.MS\000"
 5043      00
 5044 03c5 000000   		.space	3
 5045 03c8 482E6400 		.ascii	"H.d\000"
 5046 03cc 00000000 		.space	4
 5047 03d0 2C       		.byte	44
 5048 03d1 000000   		.space	3
ARM GAS  /tmp/cc1cke1v.s 			page 130


 5049 03d4 FFFFFFFF 		.word	-1
 5050 03d8 00       		.byte	0
 5051 03d9 000000   		.space	3
 5052 03dc 02000000 		.word	2
 5053 03e0 2D2D0D00 		.ascii	"--\015\000"
 5054 03e4 00000000 		.space	4
 5055 03e8 4859509D 		.ascii	"HYP\235\000"
 5055      00
 5056 03ed 000000   		.space	3
 5057 03f0 2D       		.byte	45
 5058 03f1 000000   		.space	3
 5059 03f4 FFFFFFFF 		.word	-1
 5060 03f8 2E       		.byte	46
 5061 03f9 000000   		.space	3
 5062 03fc FFFFFFFF 		.word	-1
 5063 0400 43505800 		.ascii	"CPX\000"
 5064 0404 00000000 		.space	4
 5065 0408 00       		.ascii	"\000"
 5066 0409 00000000 		.space	7
 5066      000000
 5067 0410 4D495343 		.ascii	"MISC\000"
 5067      00
 5068 0415 00000000 		.space	10
 5068      00000000 
 5068      0000
 5069 041f 00       		.space	1
 5070 0420 25       		.byte	37
 5071 0421 000000   		.space	3
 5072 0424 01000000 		.word	1
 5073 0428 14       		.byte	20
 5074 0429 000000   		.space	3
 5075 042c 01000000 		.word	1
 5076 0430 7C587C00 		.ascii	"|X|\000"
 5077 0434 00000000 		.space	4
 5078 0438 329C00   		.ascii	"2\234\000"
 5079 043b 00000000 		.space	5
 5079      00
 5080 0440 25       		.byte	37
 5081 0441 000000   		.space	3
 5082 0444 02000000 		.word	2
 5083 0448 14       		.byte	20
 5084 0449 000000   		.space	3
 5085 044c 02000000 		.word	2
 5086 0450 524E4400 		.ascii	"RND\000"
 5087 0454 00000000 		.space	4
 5088 0458 4C6F67BA 		.ascii	"Log\272\000"
 5088      00
 5089 045d 000000   		.space	3
 5090 0460 26       		.byte	38
 5091 0461 000000   		.space	3
 5092 0464 01000000 		.word	1
 5093 0468 15       		.byte	21
 5094 0469 000000   		.space	3
 5095 046c 02000000 		.word	2
 5096 0470 49506172 		.ascii	"IPart\000"
 5096      7400
 5097 0476 0000     		.space	2
ARM GAS  /tmp/cc1cke1v.s 			page 131


 5098 0478 4C6F678B 		.ascii	"Log\213\000"
 5098      00
 5099 047d 000000   		.space	3
 5100 0480 26       		.byte	38
 5101 0481 000000   		.space	3
 5102 0484 02000000 		.word	2
 5103 0488 16       		.byte	22
 5104 0489 000000   		.space	3
 5105 048c 02000000 		.word	2
 5106 0490 46506172 		.ascii	"FPart\000"
 5106      7400
 5107 0496 0000     		.space	2
 5108 0498 7C7C656C 		.ascii	"||el\000"
 5108      00
 5109 049d 000000   		.space	3
 5110 04a0 2C       		.byte	44
 5111 04a1 000000   		.space	3
 5112 04a4 FFFFFFFF 		.word	-1
 5113 04a8 22       		.byte	34
 5114 04a9 000000   		.space	3
 5115 04ac 02000000 		.word	2
 5116 04b0 2D2D0D00 		.ascii	"--\015\000"
 5117 04b4 00000000 		.space	4
 5118 04b8 832500   		.ascii	"\203%\000"
 5119 04bb 00000000 		.space	5
 5119      00
 5120 04c0 2D       		.byte	45
 5121 04c1 000000   		.space	3
 5122 04c4 FFFFFFFF 		.word	-1
 5123 04c8 2E       		.byte	46
 5124 04c9 000000   		.space	3
 5125 04cc FFFFFFFF 		.word	-1
 5126 04d0 43505800 		.ascii	"CPX\000"
 5127 04d4 00000000 		.space	4
 5128 04d8 00       		.ascii	"\000"
 5129 04d9 00000000 		.space	7
 5129      000000
 5130 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 5130      204B6579 
 5130      00
 5131 04e9 00000000 		.space	6
 5131      0000
 5132 04ef 00       		.space	1
 5133 04f0 0D       		.byte	13
 5134 04f1 000000   		.space	3
 5135 04f4 01000000 		.word	1
 5136 04f8 34       		.byte	52
 5137 04f9 000000   		.space	3
 5138 04fc 00A60000 		.word	42496
 5139 0500 53686F77 		.ascii	"Show\016\000"
 5139      0E00
 5140 0506 0000     		.space	2
 5141 0508 5B175D00 		.ascii	"[\027]\000"
 5142 050c 00000000 		.space	4
 5143 0510 0D       		.byte	13
 5144 0511 000000   		.space	3
 5145 0514 02000000 		.word	2
ARM GAS  /tmp/cc1cke1v.s 			page 132


 5146 0518 2E       		.byte	46
 5147 0519 000000   		.space	3
 5148 051c FFFFFFFF 		.word	-1
 5149 0520 53686F77 		.ascii	"Show\015\000"
 5149      0D00
 5150 0526 0000     		.space	2
 5151 0528 00       		.ascii	"\000"
 5152 0529 00000000 		.space	7
 5152      000000
 5153 0530 0D       		.byte	13
 5154 0531 000000   		.space	3
 5155 0534 03000000 		.word	3
 5156 0538 34       		.byte	52
 5157 0539 000000   		.space	3
 5158 053c 00330000 		.word	13056
 5159 0540 78173F00 		.ascii	"x\027?\000"
 5160 0544 00000000 		.space	4
 5161 0548 7A173F00 		.ascii	"z\027?\000"
 5162 054c 00000000 		.space	4
 5163 0550 34       		.byte	52
 5164 0551 000000   		.space	3
 5165 0554 00320000 		.word	12800
 5166 0558 34       		.byte	52
 5167 0559 000000   		.space	3
 5168 055c 00340000 		.word	13312
 5169 0560 79173F00 		.ascii	"y\027?\000"
 5170 0564 00000000 		.space	4
 5171 0568 74173F00 		.ascii	"t\027?\000"
 5172 056c 00000000 		.space	4
 5173 0570 2C       		.byte	44
 5174 0571 000000   		.space	3
 5175 0574 FFFFFFFF 		.word	-1
 5176 0578 2E       		.byte	46
 5177 0579 000000   		.space	3
 5178 057c FFFFFFFF 		.word	-1
 5179 0580 2D2D0D00 		.ascii	"--\015\000"
 5180 0584 00000000 		.space	4
 5181 0588 00       		.ascii	"\000"
 5182 0589 00000000 		.space	7
 5182      000000
 5183 0590 2D       		.byte	45
 5184 0591 000000   		.space	3
 5185 0594 FFFFFFFF 		.word	-1
 5186 0598 2E       		.byte	46
 5187 0599 000000   		.space	3
 5188 059c FFFFFFFF 		.word	-1
 5189 05a0 43505800 		.ascii	"CPX\000"
 5190 05a4 00000000 		.space	4
 5191 05a8 00       		.ascii	"\000"
 5192 05a9 00000000 		.space	7
 5192      000000
 5193 05b0 50726F67 		.ascii	"Program\000"
 5193      72616D00 
 5194 05b8 00000000 		.space	7
 5194      000000
 5195 05bf 00       		.space	1
 5196 05c0 27       		.byte	39
ARM GAS  /tmp/cc1cke1v.s 			page 133


 5197 05c1 000000   		.space	3
 5198 05c4 01000000 		.word	1
 5199 05c8 28       		.byte	40
 5200 05c9 000000   		.space	3
 5201 05cc 01000000 		.word	1
 5202 05d0 4C424C00 		.ascii	"LBL\000"
 5203 05d4 00000000 		.space	4
 5204 05d8 44534500 		.ascii	"DSE\000"
 5205 05dc 00000000 		.space	4
 5206 05e0 27       		.byte	39
 5207 05e1 000000   		.space	3
 5208 05e4 02000000 		.word	2
 5209 05e8 28       		.byte	40
 5210 05e9 000000   		.space	3
 5211 05ec 02000000 		.word	2
 5212 05f0 52544E00 		.ascii	"RTN\000"
 5213 05f4 00000000 		.space	4
 5214 05f8 49534700 		.ascii	"ISG\000"
 5215 05fc 00000000 		.space	4
 5216 0600 25       		.byte	37
 5217 0601 000000   		.space	3
 5218 0604 03000000 		.word	3
 5219 0608 34       		.byte	52
 5220 0609 000000   		.space	3
 5221 060c 00600000 		.word	24576
 5222 0610 50617573 		.ascii	"Pause\000"
 5222      6500
 5223 0616 0000     		.space	2
 5224 0618 44454300 		.ascii	"DEC\000"
 5225 061c 00000000 		.space	4
 5226 0620 12       		.byte	18
 5227 0621 000000   		.space	3
 5228 0624 03000000 		.word	3
 5229 0628 34       		.byte	52
 5230 0629 000000   		.space	3
 5231 062c 00610000 		.word	24832
 5232 0630 47544F00 		.ascii	"GTO\000"
 5233 0634 00000000 		.space	4
 5234 0638 494E4300 		.ascii	"INC\000"
 5235 063c 00000000 		.space	4
 5236 0640 2C       		.byte	44
 5237 0641 000000   		.space	3
 5238 0644 FFFFFFFF 		.word	-1
 5239 0648 34       		.byte	52
 5240 0649 000000   		.space	3
 5241 064c 00570000 		.word	22272
 5242 0650 2D2D0D00 		.ascii	"--\015\000"
 5243 0654 00000000 		.space	4
 5244 0658 4241434B 		.ascii	"BACK\000"
 5244      00
 5245 065d 000000   		.space	3
 5246 0660 2D       		.byte	45
 5247 0661 000000   		.space	3
 5248 0664 FFFFFFFF 		.word	-1
 5249 0668 34       		.byte	52
 5250 0669 000000   		.space	3
 5251 066c 00560000 		.word	22016
ARM GAS  /tmp/cc1cke1v.s 			page 134


 5252 0670 43505800 		.ascii	"CPX\000"
 5253 0674 00000000 		.space	4
 5254 0678 534B4950 		.ascii	"SKIP\000"
 5254      00
 5255 067d 000000   		.space	3
 5256 0680 53657475 		.ascii	"Setup 1\000"
 5256      70203100 
 5257 0688 00000000 		.space	7
 5257      000000
 5258 068f 00       		.space	1
 5259 0690 32       		.byte	50
 5260 0691 000000   		.space	3
 5261 0694 00000000 		.word	0
 5262 0698 30       		.byte	48
 5263 0699 000000   		.space	3
 5264 069c 00000000 		.word	0
 5265 06a0 45584954 		.ascii	"EXIT\000"
 5265      00
 5266 06a5 000000   		.space	3
 5267 06a8 53797374 		.ascii	"System\000"
 5267      656D00
 5268 06af 00       		.space	1
 5269 06b0 31       		.byte	49
 5270 06b1 000000   		.space	3
 5271 06b4 09000000 		.word	9
 5272 06b8 2E       		.byte	46
 5273 06b9 000000   		.space	3
 5274 06bc FFFFFFFF 		.word	-1
 5275 06c0 48454C50 		.ascii	"HELP\000"
 5275      00
 5276 06c5 000000   		.space	3
 5277 06c8 00       		.ascii	"\000"
 5278 06c9 00000000 		.space	7
 5278      000000
 5279 06d0 31       		.byte	49
 5280 06d1 000000   		.space	3
 5281 06d4 02000000 		.word	2
 5282 06d8 31       		.byte	49
 5283 06d9 000000   		.space	3
 5284 06dc 06000000 		.word	6
 5285 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5285      4F00
 5286 06e6 0000     		.space	2
 5287 06e8 53765241 		.ascii	"SvRAM\000"
 5287      4D00
 5288 06ee 0000     		.space	2
 5289 06f0 31       		.byte	49
 5290 06f1 000000   		.space	3
 5291 06f4 03000000 		.word	3
 5292 06f8 31       		.byte	49
 5293 06f9 000000   		.space	3
 5294 06fc 07000000 		.word	7
 5295 0700 4F6E5243 		.ascii	"OnRCL\000"
 5295      4C00
 5296 0706 0000     		.space	2
 5297 0708 4C645241 		.ascii	"LdRAM\000"
 5297      4D00
ARM GAS  /tmp/cc1cke1v.s 			page 135


 5298 070e 0000     		.space	2
 5299 0710 2C       		.byte	44
 5300 0711 000000   		.space	3
 5301 0714 FFFFFFFF 		.word	-1
 5302 0718 2E       		.byte	46
 5303 0719 000000   		.space	3
 5304 071c FFFFFFFF 		.word	-1
 5305 0720 2D2D0D00 		.ascii	"--\015\000"
 5306 0724 00000000 		.space	4
 5307 0728 00       		.ascii	"\000"
 5308 0729 00000000 		.space	7
 5308      000000
 5309 0730 2D       		.byte	45
 5310 0731 000000   		.space	3
 5311 0734 FFFFFFFF 		.word	-1
 5312 0738 2E       		.byte	46
 5313 0739 000000   		.space	3
 5314 073c FFFFFFFF 		.word	-1
 5315 0740 43505800 		.ascii	"CPX\000"
 5316 0744 00000000 		.space	4
 5317 0748 00       		.ascii	"\000"
 5318 0749 00000000 		.space	7
 5318      000000
 5319 0750 4172726F 		.ascii	"Arrow\000"
 5319      7700
 5320 0756 00000000 		.space	9
 5320      00000000 
 5320      00
 5321 075f 00       		.space	1
 5322 0760 0E       		.byte	14
 5323 0761 000000   		.space	3
 5324 0764 01000000 		.word	1
 5325 0768 06       		.byte	6
 5326 0769 000000   		.space	3
 5327 076c 02000000 		.word	2
 5328 0770 42696E00 		.ascii	"Bin\000"
 5329 0774 00000000 		.space	4
 5330 0778 44454700 		.ascii	"DEG\000"
 5331 077c 00000000 		.space	4
 5332 0780 0E       		.byte	14
 5333 0781 000000   		.space	3
 5334 0784 02000000 		.word	2
 5335 0788 07       		.byte	7
 5336 0789 000000   		.space	3
 5337 078c 02000000 		.word	2
 5338 0790 4F637400 		.ascii	"Oct\000"
 5339 0794 00000000 		.space	4
 5340 0798 52414400 		.ascii	"RAD\000"
 5341 079c 00000000 		.space	4
 5342 07a0 0F       		.byte	15
 5343 07a1 000000   		.space	3
 5344 07a4 01000000 		.word	1
 5345 07a8 08       		.byte	8
 5346 07a9 000000   		.space	3
 5347 07ac 02000000 		.word	2
 5348 07b0 44656300 		.ascii	"Dec\000"
 5349 07b4 00000000 		.space	4
ARM GAS  /tmp/cc1cke1v.s 			page 136


 5350 07b8 47726164 		.ascii	"Grad\000"
 5350      00
 5351 07bd 000000   		.space	3
 5352 07c0 0F       		.byte	15
 5353 07c1 000000   		.space	3
 5354 07c4 02000000 		.word	2
 5355 07c8 06       		.byte	6
 5356 07c9 000000   		.space	3
 5357 07cc 01000000 		.word	1
 5358 07d0 48657800 		.ascii	"Hex\000"
 5359 07d4 00000000 		.space	4
 5360 07d8 0D484D53 		.ascii	"\015HMS\000"
 5360      00
 5361 07dd 000000   		.space	3
 5362 07e0 2C       		.byte	44
 5363 07e1 000000   		.space	3
 5364 07e4 FFFFFFFF 		.word	-1
 5365 07e8 07       		.byte	7
 5366 07e9 000000   		.space	3
 5367 07ec 01000000 		.word	1
 5368 07f0 2D2D0D00 		.ascii	"--\015\000"
 5369 07f4 00000000 		.space	4
 5370 07f8 484D530D 		.ascii	"HMS\015\000"
 5370      00
 5371 07fd 000000   		.space	3
 5372 0800 2D       		.byte	45
 5373 0801 000000   		.space	3
 5374 0804 FFFFFFFF 		.word	-1
 5375 0808 2E       		.byte	46
 5376 0809 000000   		.space	3
 5377 080c FFFFFFFF 		.word	-1
 5378 0810 43505800 		.ascii	"CPX\000"
 5379 0814 00000000 		.space	4
 5380 0818 00       		.ascii	"\000"
 5381 0819 00000000 		.space	7
 5381      000000
 5382 0820 466C6167 		.ascii	"Flags\000"
 5382      7300
 5383 0826 00000000 		.space	9
 5383      00000000 
 5383      00
 5384 082f 00       		.space	1
 5385 0830 1E       		.byte	30
 5386 0831 000000   		.space	3
 5387 0834 01000000 		.word	1
 5388 0838 34       		.byte	52
 5389 0839 000000   		.space	3
 5390 083c 00740000 		.word	29696
 5391 0840 53465F00 		.ascii	"SF_\000"
 5392 0844 00000000 		.space	4
 5393 0848 46533F00 		.ascii	"FS?\000"
 5394 084c 00000000 		.space	4
 5395 0850 1E       		.byte	30
 5396 0851 000000   		.space	3
 5397 0854 02000000 		.word	2
 5398 0858 34       		.byte	52
 5399 0859 000000   		.space	3
ARM GAS  /tmp/cc1cke1v.s 			page 137


 5400 085c 00750000 		.word	29952
 5401 0860 43465F00 		.ascii	"CF_\000"
 5402 0864 00000000 		.space	4
 5403 0868 46433F00 		.ascii	"FC?\000"
 5404 086c 00000000 		.space	4
 5405 0870 1F       		.byte	31
 5406 0871 000000   		.space	3
 5407 0874 01000000 		.word	1
 5408 0878 34       		.byte	52
 5409 0879 000000   		.space	3
 5410 087c 00500000 		.word	20480
 5411 0880 783D3F00 		.ascii	"x=?\000"
 5412 0884 00000000 		.space	4
 5413 0888 783C3F00 		.ascii	"x<?\000"
 5414 088c 00000000 		.space	4
 5415 0890 1F       		.byte	31
 5416 0891 000000   		.space	3
 5417 0894 02000000 		.word	2
 5418 0898 34       		.byte	52
 5419 0899 000000   		.space	3
 5420 089c 00510000 		.word	20736
 5421 08a0 780B3F00 		.ascii	"x\013?\000"
 5422 08a4 00000000 		.space	4
 5423 08a8 783C3D3F 		.ascii	"x<=?\000"
 5423      00
 5424 08ad 000000   		.space	3
 5425 08b0 2C       		.byte	44
 5426 08b1 000000   		.space	3
 5427 08b4 FFFFFFFF 		.word	-1
 5428 08b8 34       		.byte	52
 5429 08b9 000000   		.space	3
 5430 08bc 00530000 		.word	21248
 5431 08c0 2D2D0D00 		.ascii	"--\015\000"
 5432 08c4 00000000 		.space	4
 5433 08c8 783E3D3F 		.ascii	"x>=?\000"
 5433      00
 5434 08cd 000000   		.space	3
 5435 08d0 2D       		.byte	45
 5436 08d1 000000   		.space	3
 5437 08d4 FFFFFFFF 		.word	-1
 5438 08d8 34       		.byte	52
 5439 08d9 000000   		.space	3
 5440 08dc 00520000 		.word	20992
 5441 08e0 43505800 		.ascii	"CPX\000"
 5442 08e4 00000000 		.space	4
 5443 08e8 783E3F00 		.ascii	"x>?\000"
 5444 08ec 00000000 		.space	4
 5445 08f0 50726F62 		.ascii	"Probability\000"
 5445      6162696C 
 5445      69747900 
 5446 08fc 000000   		.space	3
 5447 08ff 00       		.space	1
 5448 0900 18       		.byte	24
 5449 0901 000000   		.space	3
 5450 0904 03000000 		.word	3
 5451 0908 34       		.byte	52
 5452 0909 000000   		.space	3
ARM GAS  /tmp/cc1cke1v.s 			page 138


 5453 090c 31020000 		.word	561
 5454 0910 46616374 		.ascii	"Fact!\000"
 5454      2100
 5455 0916 0000     		.space	2
 5456 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5456      00
 5457 091d 000000   		.space	3
 5458 0920 18       		.byte	24
 5459 0921 000000   		.space	3
 5460 0924 01000000 		.word	1
 5461 0928 19       		.byte	25
 5462 0929 000000   		.space	3
 5463 092c 01000000 		.word	1
 5464 0930 43792C78 		.ascii	"Cy,x\000"
 5464      00
 5465 0935 000000   		.space	3
 5466 0938 9400     		.ascii	"\224\000"
 5467 093a 00000000 		.space	6
 5467      0000
 5468 0940 18       		.byte	24
 5469 0941 000000   		.space	3
 5470 0944 02000000 		.word	2
 5471 0948 19       		.byte	25
 5472 0949 000000   		.space	3
 5473 094c 02000000 		.word	2
 5474 0950 50792C78 		.ascii	"Py,x\000"
 5474      00
 5475 0955 000000   		.space	3
 5476 0958 949D00   		.ascii	"\224\235\000"
 5477 095b 00000000 		.space	5
 5477      00
 5478 0960 08       		.byte	8
 5479 0961 000000   		.space	3
 5480 0964 01000000 		.word	1
 5481 0968 34       		.byte	52
 5482 0969 000000   		.space	3
 5483 096c 34010000 		.word	308
 5484 0970 52414E23 		.ascii	"RAN#\000"
 5484      00
 5485 0975 000000   		.space	3
 5486 0978 53454544 		.ascii	"SEED\000"
 5486      00
 5487 097d 000000   		.space	3
 5488 0980 2C       		.byte	44
 5489 0981 000000   		.space	3
 5490 0984 FFFFFFFF 		.word	-1
 5491 0988 2E       		.byte	46
 5492 0989 000000   		.space	3
 5493 098c FFFFFFFF 		.word	-1
 5494 0990 2D2D0D00 		.ascii	"--\015\000"
 5495 0994 00000000 		.space	4
 5496 0998 00       		.ascii	"\000"
 5497 0999 00000000 		.space	7
 5497      000000
 5498 09a0 2D       		.byte	45
 5499 09a1 000000   		.space	3
 5500 09a4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc1cke1v.s 			page 139


 5501 09a8 2E       		.byte	46
 5502 09a9 000000   		.space	3
 5503 09ac FFFFFFFF 		.word	-1
 5504 09b0 43505800 		.ascii	"CPX\000"
 5505 09b4 00000000 		.space	4
 5506 09b8 00       		.ascii	"\000"
 5507 09b9 00000000 		.space	7
 5507      000000
 5508 09c0 53746174 		.ascii	"Statistics\000"
 5508      69737469 
 5508      637300
 5509 09cb 00000000 		.space	4
 5510 09cf 00       		.space	1
 5511 09d0 1A       		.byte	26
 5512 09d1 000000   		.space	3
 5513 09d4 01000000 		.word	1
 5514 09d8 1A       		.byte	26
 5515 09d9 000000   		.space	3
 5516 09dc 02000000 		.word	2
 5517 09e0 0100     		.ascii	"\001\000"
 5518 09e2 00000000 		.space	6
 5518      0000
 5519 09e8 532E442E 		.ascii	"S.D.\000"
 5519      00
 5520 09ed 000000   		.space	3
 5521 09f0 1B       		.byte	27
 5522 09f1 000000   		.space	3
 5523 09f4 01000000 		.word	1
 5524 09f8 34       		.byte	52
 5525 09f9 000000   		.space	3
 5526 09fc 74020000 		.word	628
 5527 0a00 792D6861 		.ascii	"y-hat\000"
 5527      7400
 5528 0a06 0000     		.space	2
 5529 0a08 782D6861 		.ascii	"x-hat\000"
 5529      7400
 5530 0a0e 0000     		.space	2
 5531 0a10 34       		.byte	52
 5532 0a11 000000   		.space	3
 5533 0a14 27010000 		.word	295
 5534 0a18 34       		.byte	52
 5535 0a19 000000   		.space	3
 5536 0a1c 28010000 		.word	296
 5537 0a20 434F5252 		.ascii	"CORR\000"
 5537      00
 5538 0a25 000000   		.space	3
 5539 0a28 4C2E522E 		.ascii	"L.R.\000"
 5539      00
 5540 0a2d 000000   		.space	3
 5541 0a30 34       		.byte	52
 5542 0a31 000000   		.space	3
 5543 0a34 32010000 		.word	306
 5544 0a38 34       		.byte	52
 5545 0a39 000000   		.space	3
 5546 0a3c 31010000 		.word	305
 5547 0a40 42657374 		.ascii	"BestF\000"
 5547      4600
ARM GAS  /tmp/cc1cke1v.s 			page 140


 5548 0a46 0000     		.space	2
 5549 0a48 4C6F6746 		.ascii	"LogFit\000"
 5549      697400
 5550 0a4f 00       		.space	1
 5551 0a50 34       		.byte	52
 5552 0a51 000000   		.space	3
 5553 0a54 2E010000 		.word	302
 5554 0a58 34       		.byte	52
 5555 0a59 000000   		.space	3
 5556 0a5c 2F010000 		.word	303
 5557 0a60 4C696E65 		.ascii	"Linear\000"
 5557      617200
 5558 0a67 00       		.space	1
 5559 0a68 45787046 		.ascii	"ExpFit\000"
 5559      697400
 5560 0a6f 00       		.space	1
 5561 0a70 2D       		.byte	45
 5562 0a71 000000   		.space	3
 5563 0a74 FFFFFFFF 		.word	-1
 5564 0a78 34       		.byte	52
 5565 0a79 000000   		.space	3
 5566 0a7c 30010000 		.word	304
 5567 0a80 43505800 		.ascii	"CPX\000"
 5568 0a84 00000000 		.space	4
 5569 0a88 50777246 		.ascii	"PwrFit\000"
 5569      697400
 5570 0a8f 00       		.space	1
 5571 0a90 53657475 		.ascii	"Setup 2\000"
 5571      70203200 
 5572 0a98 00000000 		.space	7
 5572      000000
 5573 0a9f 00       		.space	1
 5574 0aa0 31       		.byte	49
 5575 0aa1 000000   		.space	3
 5576 0aa4 04000000 		.word	4
 5577 0aa8 2E       		.byte	46
 5578 0aa9 000000   		.space	3
 5579 0aac FFFFFFFF 		.word	-1
 5580 0ab0 53764C49 		.ascii	"SvLIB\000"
 5580      4200
 5581 0ab6 0000     		.space	2
 5582 0ab8 00       		.ascii	"\000"
 5583 0ab9 00000000 		.space	7
 5583      000000
 5584 0ac0 31       		.byte	49
 5585 0ac1 000000   		.space	3
 5586 0ac4 05000000 		.word	5
 5587 0ac8 2E       		.byte	46
 5588 0ac9 000000   		.space	3
 5589 0acc FFFFFFFF 		.word	-1
 5590 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5590      4200
 5591 0ad6 0000     		.space	2
 5592 0ad8 00       		.ascii	"\000"
 5593 0ad9 00000000 		.space	7
 5593      000000
 5594 0ae0 31       		.byte	49
ARM GAS  /tmp/cc1cke1v.s 			page 141


 5595 0ae1 000000   		.space	3
 5596 0ae4 0A000000 		.word	10
 5597 0ae8 2E       		.byte	46
 5598 0ae9 000000   		.space	3
 5599 0aec FFFFFFFF 		.word	-1
 5600 0af0 53764350 		.ascii	"SvCPRG\000"
 5600      524700
 5601 0af7 00       		.space	1
 5602 0af8 00       		.ascii	"\000"
 5603 0af9 00000000 		.space	7
 5603      000000
 5604 0b00 31       		.byte	49
 5605 0b01 000000   		.space	3
 5606 0b04 08000000 		.word	8
 5607 0b08 2E       		.byte	46
 5608 0b09 000000   		.space	3
 5609 0b0c FFFFFFFF 		.word	-1
 5610 0b10 4C645052 		.ascii	"LdPRG\000"
 5610      4700
 5611 0b16 0000     		.space	2
 5612 0b18 00       		.ascii	"\000"
 5613 0b19 00000000 		.space	7
 5613      000000
 5614 0b20 2C       		.byte	44
 5615 0b21 000000   		.space	3
 5616 0b24 FFFFFFFF 		.word	-1
 5617 0b28 2E       		.byte	46
 5618 0b29 000000   		.space	3
 5619 0b2c FFFFFFFF 		.word	-1
 5620 0b30 2D2D0D00 		.ascii	"--\015\000"
 5621 0b34 00000000 		.space	4
 5622 0b38 00       		.ascii	"\000"
 5623 0b39 00000000 		.space	7
 5623      000000
 5624 0b40 2D       		.byte	45
 5625 0b41 000000   		.space	3
 5626 0b44 FFFFFFFF 		.word	-1
 5627 0b48 2E       		.byte	46
 5628 0b49 000000   		.space	3
 5629 0b4c FFFFFFFF 		.word	-1
 5630 0b50 43505800 		.ascii	"CPX\000"
 5631 0b54 00000000 		.space	4
 5632 0b58 00       		.ascii	"\000"
 5633 0b59 00000000 		.space	7
 5633      000000
 5634 0b60 496E7465 		.ascii	"Integ/Sum/Prod\000"
 5634      672F5375 
 5634      6D2F5072 
 5634      6F6400
 5635 0b6f 00       		.space	1
 5636 0b70 20       		.byte	32
 5637 0b71 000000   		.space	3
 5638 0b74 01000000 		.word	1
 5639 0b78 2E       		.byte	46
 5640 0b79 000000   		.space	3
 5641 0b7c FFFFFFFF 		.word	-1
 5642 0b80 534C5600 		.ascii	"SLV\000"
ARM GAS  /tmp/cc1cke1v.s 			page 142


 5643 0b84 00000000 		.space	4
 5644 0b88 00       		.ascii	"\000"
 5645 0b89 00000000 		.space	7
 5645      000000
 5646 0b90 20       		.byte	32
 5647 0b91 000000   		.space	3
 5648 0b94 02000000 		.word	2
 5649 0b98 2E       		.byte	46
 5650 0b99 000000   		.space	3
 5651 0b9c FFFFFFFF 		.word	-1
 5652 0ba0 04206478 		.ascii	"\004 dx\000"
 5652      00
 5653 0ba5 000000   		.space	3
 5654 0ba8 00       		.ascii	"\000"
 5655 0ba9 00000000 		.space	7
 5655      000000
 5656 0bb0 21       		.byte	33
 5657 0bb1 000000   		.space	3
 5658 0bb4 02000000 		.word	2
 5659 0bb8 2E       		.byte	46
 5660 0bb9 000000   		.space	3
 5661 0bbc FFFFFFFF 		.word	-1
 5662 0bc0 53554D00 		.ascii	"SUM\000"
 5663 0bc4 00000000 		.space	4
 5664 0bc8 00       		.ascii	"\000"
 5665 0bc9 00000000 		.space	7
 5665      000000
 5666 0bd0 21       		.byte	33
 5667 0bd1 000000   		.space	3
 5668 0bd4 01000000 		.word	1
 5669 0bd8 2E       		.byte	46
 5670 0bd9 000000   		.space	3
 5671 0bdc FFFFFFFF 		.word	-1
 5672 0be0 50524F44 		.ascii	"PROD\000"
 5672      00
 5673 0be5 000000   		.space	3
 5674 0be8 00       		.ascii	"\000"
 5675 0be9 00000000 		.space	7
 5675      000000
 5676 0bf0 2C       		.byte	44
 5677 0bf1 000000   		.space	3
 5678 0bf4 FFFFFFFF 		.word	-1
 5679 0bf8 2E       		.byte	46
 5680 0bf9 000000   		.space	3
 5681 0bfc FFFFFFFF 		.word	-1
 5682 0c00 2D2D0D00 		.ascii	"--\015\000"
 5683 0c04 00000000 		.space	4
 5684 0c08 00       		.ascii	"\000"
 5685 0c09 00000000 		.space	7
 5685      000000
 5686 0c10 2D       		.byte	45
 5687 0c11 000000   		.space	3
 5688 0c14 FFFFFFFF 		.word	-1
 5689 0c18 2E       		.byte	46
 5690 0c19 000000   		.space	3
 5691 0c1c FFFFFFFF 		.word	-1
 5692 0c20 43505800 		.ascii	"CPX\000"
ARM GAS  /tmp/cc1cke1v.s 			page 143


 5693 0c24 00000000 		.space	4
 5694 0c28 00       		.ascii	"\000"
 5695 0c29 00000000 		.space	7
 5695      000000
 5696 0c30 426C616E 		.ascii	"Blank with A-D\000"
 5696      6B207769 
 5696      74682041 
 5696      2D4400
 5697 0c3f 00       		.space	1
 5698 0c40 28       		.byte	40
 5699 0c41 000000   		.space	3
 5700 0c44 03000000 		.word	3
 5701 0c48 2E       		.byte	46
 5702 0c49 000000   		.space	3
 5703 0c4c FFFFFFFF 		.word	-1
 5704 0c50 912B00   		.ascii	"\221+\000"
 5705 0c53 00000000 		.space	5
 5705      00
 5706 0c58 00       		.ascii	"\000"
 5707 0c59 00000000 		.space	7
 5707      000000
 5708 0c60 16       		.byte	22
 5709 0c61 000000   		.space	3
 5710 0c64 01000000 		.word	1
 5711 0c68 2E       		.byte	46
 5712 0c69 000000   		.space	3
 5713 0c6c FFFFFFFF 		.word	-1
 5714 0c70 312F5800 		.ascii	"1/X\000"
 5715 0c74 00000000 		.space	4
 5716 0c78 00       		.ascii	"\000"
 5717 0c79 00000000 		.space	7
 5717      000000
 5718 0c80 1C       		.byte	28
 5719 0c81 000000   		.space	3
 5720 0c84 01000000 		.word	1
 5721 0c88 2E       		.byte	46
 5722 0c89 000000   		.space	3
 5723 0c8c FFFFFFFF 		.word	-1
 5724 0c90 035800   		.ascii	"\003X\000"
 5725 0c93 00000000 		.space	5
 5725      00
 5726 0c98 00       		.ascii	"\000"
 5727 0c99 00000000 		.space	7
 5727      000000
 5728 0ca0 13       		.byte	19
 5729 0ca1 000000   		.space	3
 5730 0ca4 02000000 		.word	2
 5731 0ca8 2E       		.byte	46
 5732 0ca9 000000   		.space	3
 5733 0cac FFFFFFFF 		.word	-1
 5734 0cb0 4C4F4700 		.ascii	"LOG\000"
 5735 0cb4 00000000 		.space	4
 5736 0cb8 00       		.ascii	"\000"
 5737 0cb9 00000000 		.space	7
 5737      000000
 5738 0cc0 2C       		.byte	44
 5739 0cc1 000000   		.space	3
ARM GAS  /tmp/cc1cke1v.s 			page 144


 5740 0cc4 FFFFFFFF 		.word	-1
 5741 0cc8 2E       		.byte	46
 5742 0cc9 000000   		.space	3
 5743 0ccc FFFFFFFF 		.word	-1
 5744 0cd0 2D2D0D00 		.ascii	"--\015\000"
 5745 0cd4 00000000 		.space	4
 5746 0cd8 00       		.ascii	"\000"
 5747 0cd9 00000000 		.space	7
 5747      000000
 5748 0ce0 2D       		.byte	45
 5749 0ce1 000000   		.space	3
 5750 0ce4 FFFFFFFF 		.word	-1
 5751 0ce8 2E       		.byte	46
 5752 0ce9 000000   		.space	3
 5753 0cec FFFFFFFF 		.word	-1
 5754 0cf0 43505800 		.ascii	"CPX\000"
 5755 0cf4 00000000 		.space	4
 5756 0cf8 00       		.ascii	"\000"
 5757 0cf9 00000000 		.space	7
 5757      000000
 5758 0d00 416C7068 		.ascii	"Alpha\000"
 5758      6100
 5759 0d06 00000000 		.space	9
 5759      00000000 
 5759      00
 5760 0d0f 00       		.space	1
 5761 0d10 34       		.byte	52
 5762 0d11 000000   		.space	3
 5763 0d14 78010000 		.word	376
 5764 0d18 34       		.byte	52
 5765 0d19 000000   		.space	3
 5766 0d1c 6D010000 		.word	365
 5767 0d20 582D3EA0 		.ascii	"X->\240\000"
 5767      00
 5768 0d25 000000   		.space	3
 5769 0d28 A054494D 		.ascii	"\240TIME\000"
 5769      4500
 5770 0d2e 0000     		.space	2
 5771 0d30 34       		.byte	52
 5772 0d31 000000   		.space	3
 5773 0d34 77010000 		.word	375
 5774 0d38 34       		.byte	52
 5775 0d39 000000   		.space	3
 5776 0d3c 6C010000 		.word	364
 5777 0d40 A02D3E58 		.ascii	"\240->X\000"
 5777      00
 5778 0d45 000000   		.space	3
 5779 0d48 A0444154 		.ascii	"\240DATE\000"
 5779      4500
 5780 0d4e 0000     		.space	2
 5781 0d50 34       		.byte	52
 5782 0d51 000000   		.space	3
 5783 0d54 00480000 		.word	18432
 5784 0d58 34       		.byte	52
 5785 0d59 000000   		.space	3
 5786 0d5c 6A010000 		.word	362
 5787 0d60 A0495000 		.ascii	"\240IP\000"
ARM GAS  /tmp/cc1cke1v.s 			page 145


 5788 0d64 00000000 		.space	4
 5789 0d68 A0444159 		.ascii	"\240DAY\000"
 5789      00
 5790 0d6d 000000   		.space	3
 5791 0d70 34       		.byte	52
 5792 0d71 000000   		.space	3
 5793 0d74 76010000 		.word	374
 5794 0d78 34       		.byte	52
 5795 0d79 000000   		.space	3
 5796 0d7c 6B010000 		.word	363
 5797 0d80 A04C454E 		.ascii	"\240LENG\000"
 5797      4700
 5798 0d86 0000     		.space	2
 5799 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 5799      4800
 5800 0d8e 0000     		.space	2
 5801 0d90 2C       		.byte	44
 5802 0d91 000000   		.space	3
 5803 0d94 FFFFFFFF 		.word	-1
 5804 0d98 2C       		.byte	44
 5805 0d99 000000   		.space	3
 5806 0d9c 01000000 		.word	1
 5807 0da0 2D2D0D00 		.ascii	"--\015\000"
 5808 0da4 00000000 		.space	4
 5809 0da8 00       		.ascii	"\000"
 5810 0da9 00000000 		.space	7
 5810      000000
 5811 0db0 2D       		.byte	45
 5812 0db1 000000   		.space	3
 5813 0db4 FFFFFFFF 		.word	-1
 5814 0db8 2D       		.byte	45
 5815 0db9 000000   		.space	3
 5816 0dbc 01000000 		.word	1
 5817 0dc0 43505800 		.ascii	"CPX\000"
 5818 0dc4 00000000 		.space	4
 5819 0dc8 00       		.ascii	"\000"
 5820 0dc9 00000000 		.space	7
 5820      000000
 5821 0dd0 435F4C4F 		.ascii	"C_LOCK\000"
 5821      434B00
 5822 0dd7 00000000 		.space	8
 5822      00000000 
 5823 0ddf 00       		.space	1
 5824 0de0 18       		.byte	24
 5825 0de1 000000   		.space	3
 5826 0de4 02000000 		.word	2
 5827 0de8 04       		.byte	4
 5828 0de9 000000   		.space	3
 5829 0dec 02000000 		.word	2
 5830 0df0 504F4C41 		.ascii	"POLAR\000"
 5830      5200
 5831 0df6 0000     		.space	2
 5832 0df8 0D205000 		.ascii	"\015 P\000"
 5833 0dfc 00000000 		.space	4
 5834 0e00 18       		.byte	24
 5835 0e01 000000   		.space	3
 5836 0e04 01000000 		.word	1
ARM GAS  /tmp/cc1cke1v.s 			page 146


 5837 0e08 04       		.byte	4
 5838 0e09 000000   		.space	3
 5839 0e0c 01000000 		.word	1
 5840 0e10 52454354 		.ascii	"RECT\000"
 5840      00
 5841 0e15 000000   		.space	3
 5842 0e18 0D205200 		.ascii	"\015 R\000"
 5843 0e1c 00000000 		.space	4
 5844 0e20 0E       		.byte	14
 5845 0e21 000000   		.space	3
 5846 0e24 01000000 		.word	1
 5847 0e28 0E       		.byte	14
 5848 0e29 000000   		.space	3
 5849 0e2c 03000000 		.word	3
 5850 0e30 43485306 		.ascii	"CHS\006y\000"
 5850      7900
 5851 0e36 0000     		.space	2
 5852 0e38 43485306 		.ascii	"CHS\006x\000"
 5852      7800
 5853 0e3e 0000     		.space	2
 5854 0e40 0D       		.byte	13
 5855 0e41 000000   		.space	3
 5856 0e44 01000000 		.word	1
 5857 0e48 00       		.byte	0
 5858 0e49 000000   		.space	3
 5859 0e4c 01000000 		.word	1
 5860 0e50 78177900 		.ascii	"x\027y\000"
 5861 0e54 00000000 		.space	4
 5862 0e58 48595000 		.ascii	"HYP\000"
 5863 0e5c 00000000 		.space	4
 5864 0e60 2C       		.byte	44
 5865 0e61 000000   		.space	3
 5866 0e64 FFFFFFFF 		.word	-1
 5867 0e68 0F       		.byte	15
 5868 0e69 000000   		.space	3
 5869 0e6c 01000000 		.word	1
 5870 0e70 2D2D0D00 		.ascii	"--\015\000"
 5871 0e74 00000000 		.space	4
 5872 0e78 1106AF00 		.ascii	"\021\006\257\000"
 5873 0e7c 00000000 		.space	4
 5874 0e80 2D       		.byte	45
 5875 0e81 000000   		.space	3
 5876 0e84 FFFFFFFF 		.word	-1
 5877 0e88 0C       		.byte	12
 5878 0e89 000000   		.space	3
 5879 0e8c 01000000 		.word	1
 5880 0e90 43505800 		.ascii	"CPX\000"
 5881 0e94 00000000 		.space	4
 5882 0e98 1106434E 		.ascii	"\021\006CNST\000"
 5882      535400
 5883 0e9f 00       		.space	1
 5884              		.section	.rodata.mapping_alpha.11014,"a"
 5885              		.align	2
 5886              		.set	.LANCHOR17,. + 0
 5889              	mapping_alpha.11014:
 5890 0000 63       		.byte	99
 5891 0001 000000   		.space	3
ARM GAS  /tmp/cc1cke1v.s 			page 147


 5892 0004 FFFFFFFF 		.word	-1
 5893 0008 00       		.byte	0
 5894 0009 000000   		.space	3
 5895 000c FFFFFFFF 		.word	-1
 5896 0010 01       		.byte	1
 5897 0011 000000   		.space	3
 5898 0014 FFFFFFFF 		.word	-1
 5899 0018 02       		.byte	2
 5900 0019 000000   		.space	3
 5901 001c FFFFFFFF 		.word	-1
 5902 0020 03       		.byte	3
 5903 0021 000000   		.space	3
 5904 0024 FFFFFFFF 		.word	-1
 5905 0028 04       		.byte	4
 5906 0029 000000   		.space	3
 5907 002c FFFFFFFF 		.word	-1
 5908 0030 05       		.byte	5
 5909 0031 000000   		.space	3
 5910 0034 FFFFFFFF 		.word	-1
 5911 0038 06       		.byte	6
 5912 0039 000000   		.space	3
 5913 003c FFFFFFFF 		.word	-1
 5914 0040 07       		.byte	7
 5915 0041 000000   		.space	3
 5916 0044 FFFFFFFF 		.word	-1
 5917 0048 08       		.byte	8
 5918 0049 000000   		.space	3
 5919 004c FFFFFFFF 		.word	-1
 5920 0050 09       		.byte	9
 5921 0051 000000   		.space	3
 5922 0054 FFFFFFFF 		.word	-1
 5923 0058 0A       		.byte	10
 5924 0059 000000   		.space	3
 5925 005c FFFFFFFF 		.word	-1
 5926 0060 0B       		.byte	11
 5927 0061 000000   		.space	3
 5928 0064 FFFFFFFF 		.word	-1
 5929 0068 0C       		.byte	12
 5930 0069 000000   		.space	3
 5931 006c FFFFFFFF 		.word	-1
 5932 0070 0D       		.byte	13
 5933 0071 000000   		.space	3
 5934 0074 FFFFFFFF 		.word	-1
 5935 0078 0E       		.byte	14
 5936 0079 000000   		.space	3
 5937 007c FFFFFFFF 		.word	-1
 5938 0080 0F       		.byte	15
 5939 0081 000000   		.space	3
 5940 0084 FFFFFFFF 		.word	-1
 5941 0088 10       		.byte	16
 5942 0089 000000   		.space	3
 5943 008c FFFFFFFF 		.word	-1
 5944 0090 12       		.byte	18
 5945 0091 000000   		.space	3
 5946 0094 FFFFFFFF 		.word	-1
 5947 0098 13       		.byte	19
 5948 0099 000000   		.space	3
ARM GAS  /tmp/cc1cke1v.s 			page 148


 5949 009c FFFFFFFF 		.word	-1
 5950 00a0 14       		.byte	20
 5951 00a1 000000   		.space	3
 5952 00a4 FFFFFFFF 		.word	-1
 5953 00a8 15       		.byte	21
 5954 00a9 000000   		.space	3
 5955 00ac FFFFFFFF 		.word	-1
 5956 00b0 16       		.byte	22
 5957 00b1 000000   		.space	3
 5958 00b4 FFFFFFFF 		.word	-1
 5959 00b8 18       		.byte	24
 5960 00b9 000000   		.space	3
 5961 00bc FFFFFFFF 		.word	-1
 5962 00c0 19       		.byte	25
 5963 00c1 000000   		.space	3
 5964 00c4 FFFFFFFF 		.word	-1
 5965 00c8 1A       		.byte	26
 5966 00c9 000000   		.space	3
 5967 00cc FFFFFFFF 		.word	-1
 5968 00d0 1B       		.byte	27
 5969 00d1 000000   		.space	3
 5970 00d4 FFFFFFFF 		.word	-1
 5971 00d8 1C       		.byte	28
 5972 00d9 000000   		.space	3
 5973 00dc FFFFFFFF 		.word	-1
 5974 00e0 1E       		.byte	30
 5975 00e1 000000   		.space	3
 5976 00e4 FFFFFFFF 		.word	-1
 5977 00e8 1F       		.byte	31
 5978 00e9 000000   		.space	3
 5979 00ec FFFFFFFF 		.word	-1
 5980 00f0 20       		.byte	32
 5981 00f1 000000   		.space	3
 5982 00f4 FFFFFFFF 		.word	-1
 5983 00f8 21       		.byte	33
 5984 00f9 000000   		.space	3
 5985 00fc FFFFFFFF 		.word	-1
 5986 0100 22       		.byte	34
 5987 0101 000000   		.space	3
 5988 0104 FFFFFFFF 		.word	-1
 5989 0108 24       		.byte	36
 5990 0109 000000   		.space	3
 5991 010c FFFFFFFF 		.word	-1
 5992 0110 25       		.byte	37
 5993 0111 000000   		.space	3
 5994 0114 FFFFFFFF 		.word	-1
 5995 0118 26       		.byte	38
 5996 0119 000000   		.space	3
 5997 011c FFFFFFFF 		.word	-1
 5998 0120 27       		.byte	39
 5999 0121 000000   		.space	3
 6000 0124 FFFFFFFF 		.word	-1
 6001 0128 28       		.byte	40
 6002 0129 000000   		.space	3
 6003 012c FFFFFFFF 		.word	-1
 6004 0130 2E       		.byte	46
 6005 0131 000000   		.space	3
ARM GAS  /tmp/cc1cke1v.s 			page 149


 6006 0134 FFFFFFFF 		.word	-1
 6007 0138 2E       		.byte	46
 6008 0139 000000   		.space	3
 6009 013c FFFFFFFF 		.word	-1
 6010 0140 2E       		.byte	46
 6011 0141 000000   		.space	3
 6012 0144 FFFFFFFF 		.word	-1
 6013 0148 2E       		.byte	46
 6014 0149 000000   		.space	3
 6015 014c FFFFFFFF 		.word	-1
 6016 0150 2C       		.byte	44
 6017 0151 000000   		.space	3
 6018 0154 FFFFFFFF 		.word	-1
 6019 0158 2D       		.byte	45
 6020 0159 000000   		.space	3
 6021 015c FFFFFFFF 		.word	-1
 6022 0160 2E       		.byte	46
 6023 0161 000000   		.space	3
 6024 0164 FFFFFFFF 		.word	-1
 6025 0168 2E       		.byte	46
 6026 0169 000000   		.space	3
 6027 016c FFFFFFFF 		.word	-1
 6028 0170 2E       		.byte	46
 6029 0171 000000   		.space	3
 6030 0174 FFFFFFFF 		.word	-1
 6031              		.section	.rodata.mapping_fshift.11012,"a"
 6032              		.align	2
 6033              		.set	.LANCHOR15,. + 0
 6036              	mapping_fshift.11012:
 6037 0000 63       		.byte	99
 6038 0001 000000   		.space	3
 6039 0004 FFFFFFFF 		.word	-1
 6040 0008 22       		.byte	34
 6041 0009 000000   		.space	3
 6042 000c 03000000 		.word	3
 6043 0010 15       		.byte	21
 6044 0011 000000   		.space	3
 6045 0014 01000000 		.word	1
 6046 0018 1C       		.byte	28
 6047 0019 000000   		.space	3
 6048 001c 02000000 		.word	2
 6049 0020 13       		.byte	19
 6050 0021 000000   		.space	3
 6051 0024 01000000 		.word	1
 6052 0028 12       		.byte	18
 6053 0029 000000   		.space	3
 6054 002c 01000000 		.word	1
 6055 0030 12       		.byte	18
 6056 0031 000000   		.space	3
 6057 0034 03000000 		.word	3
 6058 0038 31       		.byte	49
 6059 0039 000000   		.space	3
 6060 003c 0F000000 		.word	15
 6061 0040 22       		.byte	34
 6062 0041 000000   		.space	3
 6063 0044 01000000 		.word	1
 6064 0048 0F       		.byte	15
ARM GAS  /tmp/cc1cke1v.s 			page 150


 6065 0049 000000   		.space	3
 6066 004c 03000000 		.word	3
 6067 0050 01       		.byte	1
 6068 0051 000000   		.space	3
 6069 0054 02000000 		.word	2
 6070 0058 02       		.byte	2
 6071 0059 000000   		.space	3
 6072 005c 02000000 		.word	2
 6073 0060 03       		.byte	3
 6074 0061 000000   		.space	3
 6075 0064 02000000 		.word	2
 6076 0068 0C       		.byte	12
 6077 0069 000000   		.space	3
 6078 006c 01000000 		.word	1
 6079 0070 31       		.byte	49
 6080 0071 000000   		.space	3
 6081 0074 01000000 		.word	1
 6082 0078 2F       		.byte	47
 6083 0079 000000   		.space	3
 6084 007c 04000000 		.word	4
 6085 0080 2F       		.byte	47
 6086 0081 000000   		.space	3
 6087 0084 02000000 		.word	2
 6088 0088 2F       		.byte	47
 6089 0089 000000   		.space	3
 6090 008c 01000000 		.word	1
 6091 0090 18       		.byte	24
 6092 0091 000000   		.space	3
 6093 0094 00000000 		.word	0
 6094 0098 20       		.byte	32
 6095 0099 000000   		.space	3
 6096 009c 01000000 		.word	1
 6097 00a0 2F       		.byte	47
 6098 00a1 000000   		.space	3
 6099 00a4 0E000000 		.word	14
 6100 00a8 1C       		.byte	28
 6101 00a9 000000   		.space	3
 6102 00ac 03000000 		.word	3
 6103 00b0 2F       		.byte	47
 6104 00b1 000000   		.space	3
 6105 00b4 0C000000 		.word	12
 6106 00b8 1E       		.byte	30
 6107 00b9 000000   		.space	3
 6108 00bc 00000000 		.word	0
 6109 00c0 2F       		.byte	47
 6110 00c1 000000   		.space	3
 6111 00c4 03000000 		.word	3
 6112 00c8 04       		.byte	4
 6113 00c9 000000   		.space	3
 6114 00cc 03000000 		.word	3
 6115 00d0 2F       		.byte	47
 6116 00d1 000000   		.space	3
 6117 00d4 0A000000 		.word	10
 6118 00d8 2F       		.byte	47
 6119 00d9 000000   		.space	3
 6120 00dc 0B000000 		.word	11
 6121 00e0 2A       		.byte	42
ARM GAS  /tmp/cc1cke1v.s 			page 151


 6122 00e1 000000   		.space	3
 6123 00e4 00000000 		.word	0
 6124 00e8 31       		.byte	49
 6125 00e9 000000   		.space	3
 6126 00ec 0D000000 		.word	13
 6127 00f0 2F       		.byte	47
 6128 00f1 000000   		.space	3
 6129 00f4 63000000 		.word	99
 6130 00f8 20       		.byte	32
 6131 00f9 000000   		.space	3
 6132 00fc 03000000 		.word	3
 6133 0100 2E       		.byte	46
 6134 0101 000000   		.space	3
 6135 0104 00000000 		.word	0
 6136 0108 24       		.byte	36
 6137 0109 000000   		.space	3
 6138 010c 03000000 		.word	3
 6139 0110 2F       		.byte	47
 6140 0111 000000   		.space	3
 6141 0114 08000000 		.word	8
 6142 0118 0D       		.byte	13
 6143 0119 000000   		.space	3
 6144 011c 01000000 		.word	1
 6145 0120 27       		.byte	39
 6146 0121 000000   		.space	3
 6147 0124 03000000 		.word	3
 6148 0128 06       		.byte	6
 6149 0129 000000   		.space	3
 6150 012c 03000000 		.word	3
 6151 0130 2E       		.byte	46
 6152 0131 000000   		.space	3
 6153 0134 00000000 		.word	0
 6154 0138 2E       		.byte	46
 6155 0139 000000   		.space	3
 6156 013c 00000000 		.word	0
 6157 0140 2E       		.byte	46
 6158 0141 000000   		.space	3
 6159 0144 00000000 		.word	0
 6160 0148 2E       		.byte	46
 6161 0149 000000   		.space	3
 6162 014c 00000000 		.word	0
 6163 0150 2E       		.byte	46
 6164 0151 000000   		.space	3
 6165 0154 00000000 		.word	0
 6166 0158 2E       		.byte	46
 6167 0159 000000   		.space	3
 6168 015c 00000000 		.word	0
 6169 0160 2E       		.byte	46
 6170 0161 000000   		.space	3
 6171 0164 00000000 		.word	0
 6172 0168 2F       		.byte	47
 6173 0169 000000   		.space	3
 6174 016c FFFFFFFF 		.word	-1
 6175 0170 2F       		.byte	47
 6176 0171 000000   		.space	3
 6177 0174 05000000 		.word	5
 6178              		.section	.rodata.mapping_gshift.11013,"a"
ARM GAS  /tmp/cc1cke1v.s 			page 152


 6179              		.align	2
 6180              		.set	.LANCHOR18,. + 0
 6183              	mapping_gshift.11013:
 6184 0000 63       		.byte	99
 6185 0001 000000   		.space	3
 6186 0004 FFFFFFFF 		.word	-1
 6187 0008 28       		.byte	40
 6188 0009 000000   		.space	3
 6189 000c 03000000 		.word	3
 6190 0010 16       		.byte	22
 6191 0011 000000   		.space	3
 6192 0014 01000000 		.word	1
 6193 0018 1C       		.byte	28
 6194 0019 000000   		.space	3
 6195 001c 01000000 		.word	1
 6196 0020 13       		.byte	19
 6197 0021 000000   		.space	3
 6198 0024 02000000 		.word	2
 6199 0028 2E       		.byte	46
 6200 0029 000000   		.space	3
 6201 002c 00000000 		.word	0
 6202 0030 2E       		.byte	46
 6203 0031 000000   		.space	3
 6204 0034 00000000 		.word	0
 6205 0038 2E       		.byte	46
 6206 0039 000000   		.space	3
 6207 003c 00000000 		.word	0
 6208 0040 07       		.byte	7
 6209 0041 000000   		.space	3
 6210 0044 03000000 		.word	3
 6211 0048 08       		.byte	8
 6212 0049 000000   		.space	3
 6213 004c 03000000 		.word	3
 6214 0050 2F       		.byte	47
 6215 0051 000000   		.space	3
 6216 0054 04000000 		.word	4
 6217 0058 2F       		.byte	47
 6218 0059 000000   		.space	3
 6219 005c 04000000 		.word	4
 6220 0060 2F       		.byte	47
 6221 0061 000000   		.space	3
 6222 0064 04000000 		.word	4
 6223 0068 0C       		.byte	12
 6224 0069 000000   		.space	3
 6225 006c 02000000 		.word	2
 6226 0070 2F       		.byte	47
 6227 0071 000000   		.space	3
 6228 0074 06000000 		.word	6
 6229 0078 05       		.byte	5
 6230 0079 000000   		.space	3
 6231 007c 03000000 		.word	3
 6232 0080 2E       		.byte	46
 6233 0081 000000   		.space	3
 6234 0084 00000000 		.word	0
 6235 0088 2E       		.byte	46
 6236 0089 000000   		.space	3
 6237 008c 00000000 		.word	0
ARM GAS  /tmp/cc1cke1v.s 			page 153


 6238 0090 2E       		.byte	46
 6239 0091 000000   		.space	3
 6240 0094 00000000 		.word	0
 6241 0098 2E       		.byte	46
 6242 0099 000000   		.space	3
 6243 009c 00000000 		.word	0
 6244 00a0 2E       		.byte	46
 6245 00a1 000000   		.space	3
 6246 00a4 00000000 		.word	0
 6247 00a8 1B       		.byte	27
 6248 00a9 000000   		.space	3
 6249 00ac 03000000 		.word	3
 6250 00b0 1A       		.byte	26
 6251 00b1 000000   		.space	3
 6252 00b4 03000000 		.word	3
 6253 00b8 2E       		.byte	46
 6254 00b9 000000   		.space	3
 6255 00bc 00000000 		.word	0
 6256 00c0 2E       		.byte	46
 6257 00c1 000000   		.space	3
 6258 00c4 00000000 		.word	0
 6259 00c8 0C       		.byte	12
 6260 00c9 000000   		.space	3
 6261 00cc 03000000 		.word	3
 6262 00d0 1F       		.byte	31
 6263 00d1 000000   		.space	3
 6264 00d4 03000000 		.word	3
 6265 00d8 19       		.byte	25
 6266 00d9 000000   		.space	3
 6267 00dc 03000000 		.word	3
 6268 00e0 2A       		.byte	42
 6269 00e1 000000   		.space	3
 6270 00e4 FFFFFFFF 		.word	-1
 6271 00e8 2E       		.byte	46
 6272 00e9 000000   		.space	3
 6273 00ec 00000000 		.word	0
 6274 00f0 31       		.byte	49
 6275 00f1 000000   		.space	3
 6276 00f4 0E000000 		.word	14
 6277 00f8 21       		.byte	33
 6278 00f9 000000   		.space	3
 6279 00fc 03000000 		.word	3
 6280 0100 2E       		.byte	46
 6281 0101 000000   		.space	3
 6282 0104 00000000 		.word	0
 6283 0108 24       		.byte	36
 6284 0109 000000   		.space	3
 6285 010c 02000000 		.word	2
 6286 0110 2F       		.byte	47
 6287 0111 000000   		.space	3
 6288 0114 0D000000 		.word	13
 6289 0118 2E       		.byte	46
 6290 0119 000000   		.space	3
 6291 011c 00000000 		.word	0
 6292 0120 2F       		.byte	47
 6293 0121 000000   		.space	3
 6294 0124 07000000 		.word	7
ARM GAS  /tmp/cc1cke1v.s 			page 154


 6295 0128 1E       		.byte	30
 6296 0129 000000   		.space	3
 6297 012c 03000000 		.word	3
 6298 0130 2E       		.byte	46
 6299 0131 000000   		.space	3
 6300 0134 00000000 		.word	0
 6301 0138 2E       		.byte	46
 6302 0139 000000   		.space	3
 6303 013c 00000000 		.word	0
 6304 0140 2E       		.byte	46
 6305 0141 000000   		.space	3
 6306 0144 00000000 		.word	0
 6307 0148 2E       		.byte	46
 6308 0149 000000   		.space	3
 6309 014c 00000000 		.word	0
 6310 0150 2E       		.byte	46
 6311 0151 000000   		.space	3
 6312 0154 00000000 		.word	0
 6313 0158 2E       		.byte	46
 6314 0159 000000   		.space	3
 6315 015c 00000000 		.word	0
 6316 0160 2E       		.byte	46
 6317 0161 000000   		.space	3
 6318 0164 00000000 		.word	0
 6319 0168 2E       		.byte	46
 6320 0169 000000   		.space	3
 6321 016c 00000000 		.word	0
 6322 0170 2E       		.byte	46
 6323 0171 000000   		.space	3
 6324 0174 00000000 		.word	0
 6325              		.section	.rodata.mapping_none.11011,"a"
 6326              		.align	2
 6327              		.set	.LANCHOR14,. + 0
 6330              	mapping_none.11011:
 6331 0000 63       		.byte	99
 6332 0001 000000   		.space	3
 6333 0004 FFFFFFFF 		.word	-1
 6334 0008 00       		.byte	0
 6335 0009 000000   		.space	3
 6336 000c 00000000 		.word	0
 6337 0010 01       		.byte	1
 6338 0011 000000   		.space	3
 6339 0014 00000000 		.word	0
 6340 0018 03       		.byte	3
 6341 0019 000000   		.space	3
 6342 001c 00000000 		.word	0
 6343 0020 13       		.byte	19
 6344 0021 000000   		.space	3
 6345 0024 02000000 		.word	2
 6346 0028 12       		.byte	18
 6347 0029 000000   		.space	3
 6348 002c 02000000 		.word	2
 6349 0030 12       		.byte	18
 6350 0031 000000   		.space	3
 6351 0034 00000000 		.word	0
 6352 0038 06       		.byte	6
 6353 0039 000000   		.space	3
ARM GAS  /tmp/cc1cke1v.s 			page 155


 6354 003c 00000000 		.word	0
 6355 0040 07       		.byte	7
 6356 0041 000000   		.space	3
 6357 0044 00000000 		.word	0
 6358 0048 08       		.byte	8
 6359 0049 000000   		.space	3
 6360 004c 00000000 		.word	0
 6361 0050 01       		.byte	1
 6362 0051 000000   		.space	3
 6363 0054 01000000 		.word	1
 6364 0058 02       		.byte	2
 6365 0059 000000   		.space	3
 6366 005c 01000000 		.word	1
 6367 0060 03       		.byte	3
 6368 0061 000000   		.space	3
 6369 0064 01000000 		.word	1
 6370 0068 0C       		.byte	12
 6371 0069 000000   		.space	3
 6372 006c 00000000 		.word	0
 6373 0070 0D       		.byte	13
 6374 0071 000000   		.space	3
 6375 0074 00000000 		.word	0
 6376 0078 0E       		.byte	14
 6377 0079 000000   		.space	3
 6378 007c 00000000 		.word	0
 6379 0080 0F       		.byte	15
 6380 0081 000000   		.space	3
 6381 0084 00000000 		.word	0
 6382 0088 10       		.byte	16
 6383 0089 000000   		.space	3
 6384 008c 00000000 		.word	0
 6385 0090 18       		.byte	24
 6386 0091 000000   		.space	3
 6387 0094 00000000 		.word	0
 6388 0098 13       		.byte	19
 6389 0099 000000   		.space	3
 6390 009c 00000000 		.word	0
 6391 00a0 14       		.byte	20
 6392 00a1 000000   		.space	3
 6393 00a4 00000000 		.word	0
 6394 00a8 15       		.byte	21
 6395 00a9 000000   		.space	3
 6396 00ac 00000000 		.word	0
 6397 00b0 16       		.byte	22
 6398 00b1 000000   		.space	3
 6399 00b4 00000000 		.word	0
 6400 00b8 1E       		.byte	30
 6401 00b9 000000   		.space	3
 6402 00bc 00000000 		.word	0
 6403 00c0 19       		.byte	25
 6404 00c1 000000   		.space	3
 6405 00c4 00000000 		.word	0
 6406 00c8 1A       		.byte	26
 6407 00c9 000000   		.space	3
 6408 00cc 00000000 		.word	0
 6409 00d0 1B       		.byte	27
 6410 00d1 000000   		.space	3
ARM GAS  /tmp/cc1cke1v.s 			page 156


 6411 00d4 00000000 		.word	0
 6412 00d8 1C       		.byte	28
 6413 00d9 000000   		.space	3
 6414 00dc 00000000 		.word	0
 6415 00e0 29       		.byte	41
 6416 00e1 000000   		.space	3
 6417 00e4 00000000 		.word	0
 6418 00e8 1F       		.byte	31
 6419 00e9 000000   		.space	3
 6420 00ec 00000000 		.word	0
 6421 00f0 20       		.byte	32
 6422 00f1 000000   		.space	3
 6423 00f4 00000000 		.word	0
 6424 00f8 21       		.byte	33
 6425 00f9 000000   		.space	3
 6426 00fc 00000000 		.word	0
 6427 0100 22       		.byte	34
 6428 0101 000000   		.space	3
 6429 0104 00000000 		.word	0
 6430 0108 24       		.byte	36
 6431 0109 000000   		.space	3
 6432 010c 00000000 		.word	0
 6433 0110 25       		.byte	37
 6434 0111 000000   		.space	3
 6435 0114 00000000 		.word	0
 6436 0118 26       		.byte	38
 6437 0119 000000   		.space	3
 6438 011c 00000000 		.word	0
 6439 0120 27       		.byte	39
 6440 0121 000000   		.space	3
 6441 0124 00000000 		.word	0
 6442 0128 28       		.byte	40
 6443 0129 000000   		.space	3
 6444 012c 00000000 		.word	0
 6445 0130 2E       		.byte	46
 6446 0131 000000   		.space	3
 6447 0134 00000000 		.word	0
 6448 0138 2E       		.byte	46
 6449 0139 000000   		.space	3
 6450 013c 00000000 		.word	0
 6451 0140 2E       		.byte	46
 6452 0141 000000   		.space	3
 6453 0144 00000000 		.word	0
 6454 0148 2E       		.byte	46
 6455 0149 000000   		.space	3
 6456 014c 00000000 		.word	0
 6457 0150 2E       		.byte	46
 6458 0151 000000   		.space	3
 6459 0154 00000000 		.word	0
 6460 0158 2E       		.byte	46
 6461 0159 000000   		.space	3
 6462 015c 00000000 		.word	0
 6463 0160 2E       		.byte	46
 6464 0161 000000   		.space	3
 6465 0164 00000000 		.word	0
 6466 0168 2E       		.byte	46
 6467 0169 000000   		.space	3
ARM GAS  /tmp/cc1cke1v.s 			page 157


 6468 016c 00000000 		.word	0
 6469 0170 2E       		.byte	46
 6470 0171 000000   		.space	3
 6471 0174 00000000 		.word	0
 6472              		.section	.rodata.mapping_running.11015,"a"
 6473              		.align	2
 6474              		.set	.LANCHOR13,. + 0
 6477              	mapping_running.11015:
 6478 0000 63       		.byte	99
 6479 0001 000000   		.space	3
 6480 0004 FFFFFFFF 		.word	-1
 6481 0008 00       		.byte	0
 6482 0009 000000   		.space	3
 6483 000c 00000000 		.word	0
 6484 0010 01       		.byte	1
 6485 0011 000000   		.space	3
 6486 0014 00000000 		.word	0
 6487 0018 02       		.byte	2
 6488 0019 000000   		.space	3
 6489 001c 00000000 		.word	0
 6490 0020 03       		.byte	3
 6491 0021 000000   		.space	3
 6492 0024 00000000 		.word	0
 6493 0028 04       		.byte	4
 6494 0029 000000   		.space	3
 6495 002c 00000000 		.word	0
 6496 0030 12       		.byte	18
 6497 0031 000000   		.space	3
 6498 0034 00000000 		.word	0
 6499 0038 06       		.byte	6
 6500 0039 000000   		.space	3
 6501 003c 00000000 		.word	0
 6502 0040 07       		.byte	7
 6503 0041 000000   		.space	3
 6504 0044 00000000 		.word	0
 6505 0048 08       		.byte	8
 6506 0049 000000   		.space	3
 6507 004c 00000000 		.word	0
 6508 0050 09       		.byte	9
 6509 0051 000000   		.space	3
 6510 0054 00000000 		.word	0
 6511 0058 0A       		.byte	10
 6512 0059 000000   		.space	3
 6513 005c 00000000 		.word	0
 6514 0060 0B       		.byte	11
 6515 0061 000000   		.space	3
 6516 0064 00000000 		.word	0
 6517 0068 0C       		.byte	12
 6518 0069 000000   		.space	3
 6519 006c 00000000 		.word	0
 6520 0070 0D       		.byte	13
 6521 0071 000000   		.space	3
 6522 0074 00000000 		.word	0
 6523 0078 0E       		.byte	14
 6524 0079 000000   		.space	3
 6525 007c 00000000 		.word	0
 6526 0080 0F       		.byte	15
ARM GAS  /tmp/cc1cke1v.s 			page 158


 6527 0081 000000   		.space	3
 6528 0084 00000000 		.word	0
 6529 0088 10       		.byte	16
 6530 0089 000000   		.space	3
 6531 008c 00000000 		.word	0
 6532 0090 18       		.byte	24
 6533 0091 000000   		.space	3
 6534 0094 00000000 		.word	0
 6535 0098 13       		.byte	19
 6536 0099 000000   		.space	3
 6537 009c 00000000 		.word	0
 6538 00a0 14       		.byte	20
 6539 00a1 000000   		.space	3
 6540 00a4 00000000 		.word	0
 6541 00a8 15       		.byte	21
 6542 00a9 000000   		.space	3
 6543 00ac 00000000 		.word	0
 6544 00b0 16       		.byte	22
 6545 00b1 000000   		.space	3
 6546 00b4 00000000 		.word	0
 6547 00b8 1E       		.byte	30
 6548 00b9 000000   		.space	3
 6549 00bc 00000000 		.word	0
 6550 00c0 19       		.byte	25
 6551 00c1 000000   		.space	3
 6552 00c4 00000000 		.word	0
 6553 00c8 1A       		.byte	26
 6554 00c9 000000   		.space	3
 6555 00cc 00000000 		.word	0
 6556 00d0 1B       		.byte	27
 6557 00d1 000000   		.space	3
 6558 00d4 00000000 		.word	0
 6559 00d8 1C       		.byte	28
 6560 00d9 000000   		.space	3
 6561 00dc 00000000 		.word	0
 6562 00e0 09       		.byte	9
 6563 00e1 000000   		.space	3
 6564 00e4 00000000 		.word	0
 6565 00e8 1F       		.byte	31
 6566 00e9 000000   		.space	3
 6567 00ec 00000000 		.word	0
 6568 00f0 20       		.byte	32
 6569 00f1 000000   		.space	3
 6570 00f4 00000000 		.word	0
 6571 00f8 21       		.byte	33
 6572 00f9 000000   		.space	3
 6573 00fc 00000000 		.word	0
 6574 0100 22       		.byte	34
 6575 0101 000000   		.space	3
 6576 0104 00000000 		.word	0
 6577 0108 24       		.byte	36
 6578 0109 000000   		.space	3
 6579 010c 00000000 		.word	0
 6580 0110 25       		.byte	37
 6581 0111 000000   		.space	3
 6582 0114 00000000 		.word	0
 6583 0118 26       		.byte	38
ARM GAS  /tmp/cc1cke1v.s 			page 159


 6584 0119 000000   		.space	3
 6585 011c 00000000 		.word	0
 6586 0120 27       		.byte	39
 6587 0121 000000   		.space	3
 6588 0124 00000000 		.word	0
 6589 0128 28       		.byte	40
 6590 0129 000000   		.space	3
 6591 012c 00000000 		.word	0
 6592 0130 2E       		.byte	46
 6593 0131 000000   		.space	3
 6594 0134 00000000 		.word	0
 6595 0138 2E       		.byte	46
 6596 0139 000000   		.space	3
 6597 013c 00000000 		.word	0
 6598 0140 2E       		.byte	46
 6599 0141 000000   		.space	3
 6600 0144 00000000 		.word	0
 6601 0148 2E       		.byte	46
 6602 0149 000000   		.space	3
 6603 014c 00000000 		.word	0
 6604 0150 04       		.byte	4
 6605 0151 000000   		.space	3
 6606 0154 00000000 		.word	0
 6607 0158 05       		.byte	5
 6608 0159 000000   		.space	3
 6609 015c 00000000 		.word	0
 6610 0160 2E       		.byte	46
 6611 0161 000000   		.space	3
 6612 0164 00000000 		.word	0
 6613 0168 2E       		.byte	46
 6614 0169 000000   		.space	3
 6615 016c 00000000 		.word	0
 6616 0170 2E       		.byte	46
 6617 0171 000000   		.space	3
 6618 0174 00000000 		.word	0
 6619              		.section	.rodata.mid_menu,"a"
 6620              		.align	2
 6623              	mid_menu:
 6624 0000 C8C40B00 		.ascii	"\310\304\013\000"
 6625              		.text
 6626              	.Letext0:
 6627              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 6628              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 6629              		.file 6 "/usr/include/newlib/sys/_types.h"
 6630              		.file 7 "/usr/include/newlib/sys/reent.h"
 6631              		.file 8 "/usr/include/newlib/sys/lock.h"
 6632              		.file 9 "/usr/include/newlib/stdlib.h"
 6633              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 6634              		.file 11 "/usr/include/newlib/ctype.h"
 6635              		.file 12 "dmcp/ff_ifc.h"
 6636              		.file 13 "dmcp/dmcp.h"
 6637              		.file 14 "src/keys.h"
 6638              		.file 15 "src/decNumber/decContext.h"
 6639              		.file 16 "src/decNumber/decNumber.h"
 6640              		.file 17 "src/decNumber/decimal64.h"
 6641              		.file 18 "src/decNumber/decimal128.h"
 6642              		.file 19 "src/xeq.h"
ARM GAS  /tmp/cc1cke1v.s 			page 160


 6643              		.file 20 "src/data.h"
 6644              		.file 21 "src/display.h"
 6645              		.file 22 "src/consts.h"
 6646              		.file 23 "src/storage.h"
 6647              		.file 24 "src/catalogues.h"
 6648              		.file 25 "src/menu.h"
 6649              		.file 26 "src/lcd.h"
 6650              		.file 27 "/usr/include/newlib/string.h"
 6651              		.file 28 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/cc1cke1v.s 			page 161


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/cc1cke1v.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/cc1cke1v.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/cc1cke1v.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/cc1cke1v.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/cc1cke1v.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/cc1cke1v.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/cc1cke1v.s:433    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/cc1cke1v.s:441    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/cc1cke1v.s:460    .text.disp_about:0000000000000000 $t
     /tmp/cc1cke1v.s:468    .text.disp_about:0000000000000000 disp_about
     /tmp/cc1cke1v.s:621    .text.disp_about:0000000000000080 $d
     /tmp/cc1cke1v.s:639    .text.run_menu_item:0000000000000000 $t
     /tmp/cc1cke1v.s:647    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/cc1cke1v.s:687    .text.set_menu:0000000000000000 $t
     /tmp/cc1cke1v.s:695    .text.set_menu:0000000000000000 set_menu
     /tmp/cc1cke1v.s:750    .text.set_menu:000000000000002c $d
     /tmp/cc1cke1v.s:757    .text.set_default_menu:0000000000000000 $t
     /tmp/cc1cke1v.s:765    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/cc1cke1v.s:830    .text.set_default_menu:0000000000000024 $d
     /tmp/cc1cke1v.s:837    .text.toggle_default_menu:0000000000000000 $t
     /tmp/cc1cke1v.s:845    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/cc1cke1v.s:874    .text.toggle_default_menu:0000000000000018 $d
     /tmp/cc1cke1v.s:880    .text.get_menu:0000000000000000 $t
     /tmp/cc1cke1v.s:888    .text.get_menu:0000000000000000 get_menu
     /tmp/cc1cke1v.s:904    .text.get_menu:0000000000000008 $d
     /tmp/cc1cke1v.s:909    .text.get_last_menu:0000000000000000 $t
     /tmp/cc1cke1v.s:917    .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/cc1cke1v.s:933    .text.get_last_menu:0000000000000008 $d
     /tmp/cc1cke1v.s:938    .text.set_last_menu:0000000000000000 $t
     /tmp/cc1cke1v.s:946    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/cc1cke1v.s:1009   .text.set_last_menu:0000000000000020 $d
     /tmp/cc1cke1v.s:1016   .text.mdot:0000000000000000 $t
     /tmp/cc1cke1v.s:1024   .text.mdot:0000000000000000 mdot
     /tmp/cc1cke1v.s:1115   .text.mdot:000000000000003c $d
     /tmp/cc1cke1v.s:1120   .text.display_menu:0000000000000000 $t
     /tmp/cc1cke1v.s:1128   .text.display_menu:0000000000000000 display_menu
     /tmp/cc1cke1v.s:1417   .text.display_menu:0000000000000150 $d
     /tmp/cc1cke1v.s:1426   .text.display_current_menu:0000000000000000 $t
     /tmp/cc1cke1v.s:1434   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/cc1cke1v.s:1449   .text.display_current_menu:0000000000000008 $d
     /tmp/cc1cke1v.s:1454   .text.all_menu_dots:0000000000000000 $t
     /tmp/cc1cke1v.s:1462   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/cc1cke1v.s:1546   .text.all_menu_dots:0000000000000038 $d
     /tmp/cc1cke1v.s:1551   .text.build_user_menu:0000000000000000 $t
     /tmp/cc1cke1v.s:1559   .text.build_user_menu:0000000000000000 build_user_menu
     /tmp/cc1cke1v.s:1848   .text.build_user_menu:0000000000000124 $d
     /tmp/cc1cke1v.s:1859   .text.shutdown:0000000000000000 $t
     /tmp/cc1cke1v.s:1867   .text.shutdown:0000000000000000 shutdown
     /tmp/cc1cke1v.s:1885   .text.shutdown:000000000000000c $d
     /tmp/cc1cke1v.s:1890   .text.is_key_pressed:0000000000000000 $t
     /tmp/cc1cke1v.s:1898   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/cc1cke1v.s:1921   .text.is_key_pressed:0000000000000010 $d
     /tmp/cc1cke1v.s:1926   .text.get_key:0000000000000000 $t
     /tmp/cc1cke1v.s:1934   .text.get_key:0000000000000000 get_key
     /tmp/cc1cke1v.s:1949   .text.get_key:0000000000000004 $d
ARM GAS  /tmp/cc1cke1v.s 			page 162


     /tmp/cc1cke1v.s:1954   .text.put_key:0000000000000000 $t
     /tmp/cc1cke1v.s:1962   .text.put_key:0000000000000000 put_key
     /tmp/cc1cke1v.s:2041   .text.put_key:000000000000003c $d
     /tmp/cc1cke1v.s:2047   .text.shift_down:0000000000000000 $t
     /tmp/cc1cke1v.s:2055   .text.shift_down:0000000000000000 shift_down
     /tmp/cc1cke1v.s:2070   .text.start_key_timer:0000000000000000 $t
     /tmp/cc1cke1v.s:2078   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/cc1cke1v.s:2102   .text.start_key_timer:000000000000000c $d
     /tmp/cc1cke1v.s:2108   .text.keyticks:0000000000000000 $t
     /tmp/cc1cke1v.s:2116   .text.keyticks:0000000000000000 keyticks
     /tmp/cc1cke1v.s:2147   .text.keyticks:0000000000000018 $d
     /tmp/cc1cke1v.s:2153   .text.moveto:0000000000000000 $t
     /tmp/cc1cke1v.s:2161   .text.moveto:0000000000000000 moveto
     /tmp/cc1cke1v.s:2221   .text.moveto:000000000000002c $d
     /tmp/cc1cke1v.s:2228   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/cc1cke1v.s:2232   .text.print_debug:0000000000000000 $t
     /tmp/cc1cke1v.s:2240   .text.print_debug:0000000000000000 print_debug
     /tmp/cc1cke1v.s:2342   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/cc1cke1v.s:2353   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/cc1cke1v.s:2357   .text.print_debug2:0000000000000000 $t
     /tmp/cc1cke1v.s:2365   .text.print_debug2:0000000000000000 print_debug2
     /tmp/cc1cke1v.s:2467   .text.print_debug2:0000000000000064 $d
     /tmp/cc1cke1v.s:2478   .text.do_now:0000000000000000 $t
     /tmp/cc1cke1v.s:2486   .text.do_now:0000000000000000 do_now
     /tmp/cc1cke1v.s:2521   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/cc1cke1v.s:2525   .text.do_multi:0000000000000000 $t
     /tmp/cc1cke1v.s:2533   .text.do_multi:0000000000000000 do_multi
     /tmp/cc1cke1v.s:2564   .text.do_multi:000000000000001a $d
     /tmp/cc1cke1v.s:3006   .text.do_multi:0000000000000180 $d
     /tmp/cc1cke1v.s:3019   .text.program_main:0000000000000000 $t
     /tmp/cc1cke1v.s:3027   .text.program_main:0000000000000000 program_main
     /tmp/cc1cke1v.s:3327   .text.program_main:0000000000000112 $d
     /tmp/cc1cke1v.s:3333   .text.program_main:000000000000011e $t
     /tmp/cc1cke1v.s:3340   .text.program_main:0000000000000128 $d
     /tmp/cc1cke1v.s:3347   .text.program_main:0000000000000134 $t
     /tmp/cc1cke1v.s:3748   .text.program_main:00000000000002b0 $d
     /tmp/cc1cke1v.s:3793   .text.program_main:0000000000000340 $t
     /tmp/cc1cke1v.s:4380   .text.program_main:0000000000000668 $d
     /tmp/cc1cke1v.s:4400   .text.program_main:00000000000006a8 $t
     /tmp/cc1cke1v.s:4511   .text.program_main:000000000000073c $d
     /tmp/cc1cke1v.s:4585   .bss.n_p:0000000000000000 n_p
     /tmp/cc1cke1v.s:4734   .data.spaces:0000000000000000 spaces
     /tmp/cc1cke1v.s:4725   .data.release:0000000000000000 release
     /tmp/cc1cke1v.s:4698   .data.h_shift:0000000000000000 h_shift
     /tmp/cc1cke1v.s:4689   .data.g_shift:0000000000000000 g_shift
     /tmp/cc1cke1v.s:4681   .data.f_shift:0000000000000000 f_shift
     /tmp/cc1cke1v.s:4707   .data.heartbeat:0000000000000000 heartbeat
     /tmp/cc1cke1v.s:4716   .data.no_key:0000000000000000 no_key
     /tmp/cc1cke1v.s:4741   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/cc1cke1v.s:4533   .rodata.str1.4:0000000000000000 $d
     /tmp/cc1cke1v.s:6623   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/cc1cke1v.s:4675   .data.cmplx_key_string:0000000000000000 cmplx_key_string
     /tmp/cc1cke1v.s:4668   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/cc1cke1v.s:4599   .data.UserMenu:0000000000000000 UserMenu
     /tmp/cc1cke1v.s:4547   .rodata:0000000000000000 $d
     /tmp/cc1cke1v.s:4554   .bss.current_menu:0000000000000000 $d
ARM GAS  /tmp/cc1cke1v.s 			page 163


     /tmp/cc1cke1v.s:4558   .bss.current_menu:0000000000000000 current_menu
     /tmp/cc1cke1v.s:4561   .bss.default_menu:0000000000000000 $d
     /tmp/cc1cke1v.s:4565   .bss.default_menu:0000000000000000 default_menu
     /tmp/cc1cke1v.s:4568   .bss.last_menu:0000000000000000 $d
     /tmp/cc1cke1v.s:4572   .bss.last_menu:0000000000000000 last_menu
     /tmp/cc1cke1v.s:4575   .bss.mdots:0000000000000000 $d
     /tmp/cc1cke1v.s:4579   .bss.mdots:0000000000000000 mdots
     /tmp/cc1cke1v.s:4582   .bss.n_p:0000000000000000 $d
     /tmp/cc1cke1v.s:4588   .bss.start_ticks:0000000000000000 $d
     /tmp/cc1cke1v.s:4592   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/cc1cke1v.s:4595   .data.UserMenu:0000000000000000 $d
     /tmp/cc1cke1v.s:4664   .data.arrow_key_string:0000000000000000 $d
     /tmp/cc1cke1v.s:4671   .data.cmplx_key_string:0000000000000000 $d
     /tmp/cc1cke1v.s:4678   .data.f_shift:0000000000000000 $d
     /tmp/cc1cke1v.s:4686   .data.g_shift:0000000000000000 $d
     /tmp/cc1cke1v.s:4694   .data.h_shift:0000000000000000 $d
     /tmp/cc1cke1v.s:4703   .data.heartbeat:0000000000000000 $d
     /tmp/cc1cke1v.s:4712   .data.no_key:0000000000000000 $d
     /tmp/cc1cke1v.s:4721   .data.release:0000000000000000 $d
     /tmp/cc1cke1v.s:4730   .data.spaces:0000000000000000 $d
     /tmp/cc1cke1v.s:4737   .rodata.MID_MENU:0000000000000000 $d
     /tmp/cc1cke1v.s:4747   .rodata.Menus:0000000000000000 $d
     /tmp/cc1cke1v.s:4751   .rodata.Menus:0000000000000000 Menus
     /tmp/cc1cke1v.s:5885   .rodata.mapping_alpha.11014:0000000000000000 $d
     /tmp/cc1cke1v.s:5889   .rodata.mapping_alpha.11014:0000000000000000 mapping_alpha.11014
     /tmp/cc1cke1v.s:6032   .rodata.mapping_fshift.11012:0000000000000000 $d
     /tmp/cc1cke1v.s:6036   .rodata.mapping_fshift.11012:0000000000000000 mapping_fshift.11012
     /tmp/cc1cke1v.s:6179   .rodata.mapping_gshift.11013:0000000000000000 $d
     /tmp/cc1cke1v.s:6183   .rodata.mapping_gshift.11013:0000000000000000 mapping_gshift.11013
     /tmp/cc1cke1v.s:6326   .rodata.mapping_none.11011:0000000000000000 $d
     /tmp/cc1cke1v.s:6330   .rodata.mapping_none.11011:0000000000000000 mapping_none.11011
     /tmp/cc1cke1v.s:6473   .rodata.mapping_running.11015:0000000000000000 $d
     /tmp/cc1cke1v.s:6477   .rodata.mapping_running.11015:0000000000000000 mapping_running.11015
     /tmp/cc1cke1v.s:6620   .rodata.mid_menu:0000000000000000 $d
     /tmp/cc1cke1v.s:2579   .text.do_multi:0000000000000029 $d
     /tmp/cc1cke1v.s:2579   .text.do_multi:000000000000002a $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
pixel_length
findmultilbl
do_inc
getprog
catcmd
strncpy
strcpy
sprintf
process_keycode_with_shift
reset_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
ARM GAS  /tmp/cc1cke1v.s 			page 164


save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
main_ram
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
StateWhileOn
DispMsg
JustDisplayed
Pause
Running
cur_shift
get_alpha_state

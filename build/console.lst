ARM GAS  /tmp/ccTMmuhz.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC3:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** //#include <menu.h>
   2:src/menu.c    **** struct _menu UserMenu =
   3:src/menu.c    ****   {
   4:src/menu.c    ****     "User Menu", 
   5:src/menu.c    ****     {
   6:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   7:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   8:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   9:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  10:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  11:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
  12:src/menu.c    ****     }
  13:src/menu.c    ****   };
  14:src/menu.c    **** 
  15:src/menu.c    **** const char* arrow_key_string = "--\015";
  16:src/menu.c    **** const char* cmplx_key_string = "CPX";
  17:src/menu.c    **** 
  18:src/menu.c    **** menu_name current_menu = 0;
  19:src/menu.c    **** menu_name last_menu = 0;
  20:src/menu.c    **** menu_name default_menu = 0;
  21:src/menu.c    **** 
  22:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted);
  23:src/menu.c    **** 
ARM GAS  /tmp/ccTMmuhz.s 			page 2


  24:src/menu.c    **** 
  25:src/menu.c    **** 
  26:src/menu.c    **** /* 
  27:src/menu.c    ****  * System menu stuff
  28:src/menu.c    ****  */
  29:src/menu.c    **** 
  30:src/menu.c    **** #define MI_ABOUT_PGM 11
  31:src/menu.c    **** 
  32:src/menu.c    **** const uint8_t mid_menu[] = {
  33:src/menu.c    ****     MI_SYSTEM_ENTER,
  34:src/menu.c    ****     MI_MSC,
  35:src/menu.c    ****     MI_ABOUT_PGM,
  36:src/menu.c    ****     0 }; // Terminator
  37:src/menu.c    **** 
  38:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  39:src/menu.c    **** 
  40:src/menu.c    **** void disp_about(void);
  41:src/menu.c    **** 
  42:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  43:src/menu.c    ****   int ret = 0;
  44:src/menu.c    **** 
  45:src/menu.c    ****   switch(line_id) {
  46:src/menu.c    ****     case MI_ABOUT_PGM:
  47:src/menu.c    ****       disp_about();
  48:src/menu.c    ****       break;
  49:src/menu.c    **** 
  50:src/menu.c    ****      default:
  51:src/menu.c    ****       ret = MRET_UNIMPL;
  52:src/menu.c    ****       break;
  53:src/menu.c    ****   }
  54:src/menu.c    **** 
  55:src/menu.c    ****   return ret;
  56:src/menu.c    **** }
  57:src/menu.c    **** 
  58:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 58 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  59:src/menu.c    ****   const char * ln;
  40              		.loc 1 59 3 view .LVU1
  60:src/menu.c    **** 
  61:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 61 3 view .LVU2
  62:src/menu.c    **** 
  63:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  64:src/menu.c    **** 
  65:src/menu.c    ****   default:
  66:src/menu.c    ****     ln = NULL;
  42              		.loc 1 66 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  61:src/menu.c    **** 
  44              		.loc 1 61 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
  67:src/menu.c    ****     break;
  68:src/menu.c    ****   }
ARM GAS  /tmp/ccTMmuhz.s 			page 3


  69:src/menu.c    **** 
  70:src/menu.c    ****   return ln;
  71:src/menu.c    **** }
  46              		.loc 1 71 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 71 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC3
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB36:
  72:src/menu.c    **** 
  73:src/menu.c    **** void disp_about() {
  74:src/menu.c    ****   lcd_clear_buf();
  75:src/menu.c    ****   lcd_writeClr(t24);
  76:src/menu.c    **** 
  77:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  78:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
  79:src/menu.c    ****   t24->y += 5;
  80:src/menu.c    **** #ifdef TOP_ROW
  81:src/menu.c    ****   lcd_print(t24, "top row version,");
  82:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
  83:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  84:src/menu.c    ****   lcd_print(t24, "with a longer alpha display,");
  85:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  86:src/menu.c    ****   #else
  87:src/menu.c    ****   lcd_print(t24, "Just like the original calculator");
  88:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed,");
  89:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  90:src/menu.c    **** #endif
  91:src/menu.c    ****   t24->y += 5;
  92:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
  93:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
  94:src/menu.c    **** 
  95:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
  96:src/menu.c    ****   t24->x = 20;
  97:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
  98:src/menu.c    **** 
  99:src/menu.c    ****   lcd_refresh();
 100:src/menu.c    **** 
 101:src/menu.c    ****   wait_for_key_press();
 102:src/menu.c    **** }
ARM GAS  /tmp/ccTMmuhz.s 			page 4


 103:src/menu.c    **** 
 104:src/menu.c    **** /*
 105:src/menu.c    ****  * WP34s menu code
 106:src/menu.c    ****  */
 107:src/menu.c    **** 
 108:src/menu.c    **** void set_menu ( menu_name new_menu ) {
 109:src/menu.c    ****   menu_name m = current_menu;
 110:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 111:src/menu.c    ****     current_menu = default_menu;
 112:src/menu.c    ****   }
 113:src/menu.c    ****   else if (new_menu == M_Last) { // go to last menu
 114:src/menu.c    ****     current_menu = last_menu;
 115:src/menu.c    ****   }
 116:src/menu.c    ****   else {
 117:src/menu.c    ****     current_menu = new_menu; // change to new menu
 118:src/menu.c    ****   }
 119:src/menu.c    ****   if ( (m != M_Arrow) && (m != M_Alpha) ) last_menu = m;
 120:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 121:src/menu.c    **** }
 122:src/menu.c    **** 
 123:src/menu.c    **** void set_default_menu () {
 124:src/menu.c    ****   set_menu (default_menu);
 125:src/menu.c    **** }
 126:src/menu.c    **** 
 127:src/menu.c    **** void toggle_default_menu () {
 128:src/menu.c    ****   if (current_menu == M_Blank) {
 129:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 130:src/menu.c    ****     return;
 131:src/menu.c    ****   }
 132:src/menu.c    ****   else if (current_menu == M_Blank2) {
 133:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 134:src/menu.c    ****   }
 135:src/menu.c    ****   else {
 136:src/menu.c    ****     set_default_menu();
 137:src/menu.c    ****   }
 138:src/menu.c    **** }
 139:src/menu.c    **** 
 140:src/menu.c    **** menu_name get_menu () {
 141:src/menu.c    ****   return current_menu;
 142:src/menu.c    **** }
 143:src/menu.c    **** 
 144:src/menu.c    **** menu_name get_last_menu () {
 145:src/menu.c    ****   return last_menu;
 146:src/menu.c    **** }
 147:src/menu.c    **** 
 148:src/menu.c    **** void display_current_menu () {
 149:src/menu.c    ****   display_menu (get_current_menu_ref());
 150:src/menu.c    **** }
 151:src/menu.c    **** 
 152:src/menu.c    **** void set_last_menu () {
 153:src/menu.c    ****   set_menu (M_Last);
 154:src/menu.c    **** }
 155:src/menu.c    **** 
 156:src/menu.c    **** static unsigned char mdots[200][2];
 157:src/menu.c    **** 
 158:src/menu.c    **** static const struct _menu Menus[] = {
 159:src/menu.c    ****   {
ARM GAS  /tmp/ccTMmuhz.s 			page 5


 160:src/menu.c    ****     "M_Blank", // 0
 161:src/menu.c    ****     { 
 162:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 163:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 164:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 165:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 166:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 167:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 168:src/menu.c    ****     }    
 169:src/menu.c    ****   },
 170:src/menu.c    ****   {
 171:src/menu.c    ****     "M_Clear", // 1
 172:src/menu.c    ****     { 
 173:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 174:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 175:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 176:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 177:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 178:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 179:src/menu.c    ****     }    
 180:src/menu.c    ****   },
 181:src/menu.c    ****   {
 182:src/menu.c    ****     "M_Disp", // 2
 183:src/menu.c    ****     { 
 184:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 185:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 186:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 187:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 188:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 189:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 190:src/menu.c    ****     }
 191:src/menu.c    ****   },
 192:src/menu.c    ****   {
 193:src/menu.c    ****     "M_Base", // 3
 194:src/menu.c    ****     { 
 195:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 196:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 197:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 198:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 199:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 200:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 201:src/menu.c    ****     }
 202:src/menu.c    ****   },
 203:src/menu.c    ****   {
 204:src/menu.c    ****     "M_Angles", // 4
 205:src/menu.c    ****     { 
 206:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 207:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 208:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 209:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 210:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 211:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 212:src/menu.c    ****     }
 213:src/menu.c    ****       
 214:src/menu.c    ****   },
 215:src/menu.c    ****   {
 216:src/menu.c    ****     "M_Misc", // 5
ARM GAS  /tmp/ccTMmuhz.s 			page 6


 217:src/menu.c    ****     { 
 218:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 219:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 220:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 221:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 222:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 223:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 224:src/menu.c    ****     }
 225:src/menu.c    ****   },
 226:src/menu.c    ****   {
 227:src/menu.c    ****     "M_Swap", // 6
 228:src/menu.c    ****     { 
 229:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 230:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 231:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 232:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 233:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 234:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 235:src/menu.c    ****     }    
 236:src/menu.c    ****   },
 237:src/menu.c    ****   {
 238:src/menu.c    ****     "M_Program", // 7
 239:src/menu.c    ****     { 
 240:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 241:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 242:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 243:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 244:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 245:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 246:src/menu.c    ****     }
 247:src/menu.c    ****   },
 248:src/menu.c    ****   {
 249:src/menu.c    ****     "M_Setup1", // 8
 250:src/menu.c    ****     { 
 251:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 252:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 253:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 254:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 255:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 256:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 257:src/menu.c    ****     }
 258:src/menu.c    ****   },
 259:src/menu.c    ****   {
 260:src/menu.c    ****     "M_Arrow", // 9
 261:src/menu.c    ****     { 
 262:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 263:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 264:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 265:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "\015HMS" },
 266:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 267:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 268:src/menu.c    ****     }
 269:src/menu.c    ****   },
 270:src/menu.c    ****   {
 271:src/menu.c    ****     "M_Flags", // 10
 272:src/menu.c    ****     { 
 273:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
ARM GAS  /tmp/ccTMmuhz.s 			page 7


 274:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 275:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 276:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 277:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 278:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 279:src/menu.c    ****     }
 280:src/menu.c    ****   },
 281:src/menu.c    ****   {
 282:src/menu.c    ****     "M_Prob", // 11
 283:src/menu.c    ****     { 
 284:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 285:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 286:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 287:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 288:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 289:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 290:src/menu.c    ****     }
 291:src/menu.c    ****   },
 292:src/menu.c    ****   {
 293:src/menu.c    ****     "M_Stats", // 12
 294:src/menu.c    ****     /*
 295:src/menu.c    ****      *xbar, sd;
 296:src/menu.c    ****      *yhat, xhat;
 297:src/menu.c    ****      *corr, L.R.;
 298:src/menu.c    ****      *best, linear;
 299:src/menu.c    ****      *ln, exp;
 300:src/menu.c    ****      *cmplx, power;
 301:src/menu.c    ****      *No, sums is already on g9.
 302:src/menu.c    ****      */
 303:src/menu.c    ****     { 
 304:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 305:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 306:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 307:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 308:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 309:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 310:src/menu.c    ****     }
 311:src/menu.c    ****   },
 312:src/menu.c    ****   {
 313:src/menu.c    ****     "M_Setup2", // 13
 314:src/menu.c    ****     { 
 315:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 316:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 317:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 318:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 319:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 320:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 321:src/menu.c    ****     }
 322:src/menu.c    ****   },
 323:src/menu.c    ****   {
 324:src/menu.c    ****     "M_Solve", // 14
 325:src/menu.c    ****     { 
 326:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 327:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 328:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 329:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 330:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
ARM GAS  /tmp/ccTMmuhz.s 			page 8


 331:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 332:src/menu.c    ****     }
 333:src/menu.c    ****   },
 334:src/menu.c    ****   {
 335:src/menu.c    ****     "M_Blank2", // 15
 336:src/menu.c    ****     { 
 337:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 338:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 339:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 340:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 341:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 342:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 343:src/menu.c    ****     }    
 344:src/menu.c    ****   },
 345:src/menu.c    ****   {
 346:src/menu.c    ****     "M_Alpha", // 16
 347:src/menu.c    ****     { 
 348:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 349:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 350:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 351:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 352:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 353:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 354:src/menu.c    ****     }    
 355:src/menu.c    ****   },
 356:src/menu.c    ****   {
 357:src/menu.c    ****     "M_C_Lock", // 17
 358:src/menu.c    ****     { 
 359:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 360:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 361:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "CHS\006y", "CHS\006x" },
 362:src/menu.c    ****       { { K21, 1 }, { K00, 1 }, "x\027y", "HYP" },
 363:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 364:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 365:src/menu.c    ****     }    
 366:src/menu.c    ****   },
 367:src/menu.c    ****   {
 368:src/menu.c    ****     "M_Clear_C", // 18
 369:src/menu.c    ****     { 
 370:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 371:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 372:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 373:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, NO_KEY, "CLStk", "" },
 374:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 375:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 376:src/menu.c    ****     }    
 377:src/menu.c    ****   },
 378:src/menu.c    ****   {
 379:src/menu.c    ****     "M_Swap_C", // 19
 380:src/menu.c    ****     { 
 381:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 382:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 383:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 384:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 385:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 386:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 387:src/menu.c    ****     }    
ARM GAS  /tmp/ccTMmuhz.s 			page 9


 388:src/menu.c    ****   },
 389:src/menu.c    ****   {
 390:src/menu.c    ****     "M_Arrow_C", // 20
 391:src/menu.c    ****     { 
 392:src/menu.c    ****       { NO_KEY, { K10, 2 }, "", "DEG" },
 393:src/menu.c    ****       { NO_KEY, { K11, 2 }, "", "RAD" },
 394:src/menu.c    ****       { NO_KEY, { K12, 2 }, "", "Grad" },
 395:src/menu.c    ****       { NO_KEY, { K10, 1 }, "", "\015HMS" },
 396:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 397:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 398:src/menu.c    ****     }
 399:src/menu.c    ****   },
 400:src/menu.c    ****   {
 401:src/menu.c    ****     "M_Prob_C", // 21
 402:src/menu.c    ****     { 
 403:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_CMON | OP_LNGAMMA }, "\024\006!", "\024\006Ln\006\202" },
 404:src/menu.c    ****       { { K_OP, OP_CDYA | OP_COMB }, NO_KEY, "\024\006Cy,x", "" },
 405:src/menu.c    ****       { { K_OP, OP_CDYA | OP_PERM }, NO_KEY, "\024\006Py,x", "" },
 406:src/menu.c    ****       { NO_KEY, NO_KEY , "", "" },
 407:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 408:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 409:src/menu.c    ****     }
 410:src/menu.c    ****   },
 411:src/menu.c    ****   {
 412:src/menu.c    ****     "M_Blank2_C", // 22
 413:src/menu.c    ****     { 
 414:src/menu.c    ****       { { K00, 1 }, NO_KEY, "HYP", "" },
 415:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 416:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 417:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 418:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 419:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 420:src/menu.c    ****     }    
 421:src/menu.c    ****   },
 422:src/menu.c    ****   {
 423:src/menu.c    ****     "M_Misc_C", // 23
 424:src/menu.c    ****     { 
 425:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 426:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 427:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "0\015Re", "Log\213" },
 428:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "0\015Im", "||el" },
 429:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", ".\034" },
 430:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "./" },
 431:src/menu.c    ****     }
 432:src/menu.c    ****   },
 433:src/menu.c    **** 
 434:src/menu.c    **** };  
 435:src/menu.c    **** 
 436:src/menu.c    **** /* This code is the set_status_sized code with small changes
 437:src/menu.c    ****  * and non-DM42 code removed.
 438:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 439:src/menu.c    ****  */
 440:src/menu.c    **** #define MENU_WIDTH 32
 441:src/menu.c    **** 
 442:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 442 13 is_stmt 1 view -0
  72              		.cfi_startproc
ARM GAS  /tmp/ccTMmuhz.s 			page 10


  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 443:src/menu.c    ****   // dotcol is the number of the starting dot column
 444:src/menu.c    ****   // shifted is 1 if shifted
 445:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 445 3 view .LVU8
 446:src/menu.c    **** 
 447:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 448:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 448 3 view .LVU9
 449:src/menu.c    **** 
 450:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 450 3 view .LVU10
 442:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 442 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 442:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 442 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 451:src/menu.c    ****   int i, j, xmax;
 452:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 452 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
  96 000e B4BF     		ite	lt
  97 0010 01F11F03 		addlt	r3, r1, #31
  98 0014 0B46     		movge	r3, r1
 453:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 454:src/menu.c    **** 
 455:src/menu.c    ****   forceDispPlot=0;
  99              		.loc 1 455 16 view .LVU14
 100 0016 4848     		ldr	r0, .L41
 101              	.LVL3:
 442:src/menu.c    ****   // dotcol is the number of the starting dot column
 102              		.loc 1 442 13 view .LVU15
 103 0018 0F46     		mov	r7, r1
 104              	.LVL4:
 451:src/menu.c    ****   int i, j, xmax;
 105              		.loc 1 451 3 is_stmt 1 view .LVU16
 452:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 106              		.loc 1 452 3 view .LVU17
 456:src/menu.c    **** 
 457:src/menu.c    **** #ifdef RP_PREFIX
 458:src/menu.c    ****   RectPolConv = 0;
 107              		.loc 1 458 15 is_stmt 0 view .LVU18
 108 001a 4849     		ldr	r1, .L41+4
ARM GAS  /tmp/ccTMmuhz.s 			page 11


 109              	.LVL5:
 455:src/menu.c    **** 
 110              		.loc 1 455 16 view .LVU19
 111 001c 0022     		movs	r2, #0
 112              	.LVL6:
 455:src/menu.c    **** 
 113              		.loc 1 455 16 view .LVU20
 114 001e 0270     		strb	r2, [r0]
 115              		.loc 1 458 15 view .LVU21
 116 0020 0A60     		str	r2, [r1]
 459:src/menu.c    **** #endif
 460:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 117              		.loc 1 460 10 view .LVU22
 118 0022 019A     		ldr	r2, [sp, #4]
 119 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 452:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 120              		.loc 1 452 30 view .LVU23
 121 0026 23F01F03 		bic	r3, r3, #31
 452:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 122              		.loc 1 452 8 view .LVU24
 123 002a 03F12009 		add	r9, r3, #32
 124              	.LVL7:
 453:src/menu.c    **** 
 125              		.loc 1 453 3 is_stmt 1 view .LVU25
 455:src/menu.c    **** 
 126              		.loc 1 455 3 view .LVU26
 458:src/menu.c    **** #endif
 127              		.loc 1 458 3 view .LVU27
 128              		.loc 1 460 3 view .LVU28
 129              		.loc 1 460 9 view .LVU29
 130 002e 002D     		cmp	r5, #0
 131 0030 78D0     		beq	.L7
 132              		.loc 1 460 23 is_stmt 0 view .LVU30
 133 0032 4F45     		cmp	r7, r9
 134 0034 76DC     		bgt	.L7
 135              	.LBB43:
 461:src/menu.c    ****     int c;
 462:src/menu.c    ****     int width;
 463:src/menu.c    ****     unsigned char cmap[6];
 464:src/menu.c    **** 
 465:src/menu.c    ****     int real_width;
 466:src/menu.c    ****     int current_smallp;
 467:src/menu.c    **** 
 468:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 469:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 470:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 471:src/menu.c    ****     //           01 -> (not used)
 472:src/menu.c    ****     //           10 -> use big font
 473:src/menu.c    ****     //           11 -> use small font
 474:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 475:src/menu.c    ****     if (str[0] == '\007') {
 136              		.loc 1 475 8 view .LVU31
 137 0036 072D     		cmp	r5, #7
 138              	.LBE43:
 448:src/menu.c    **** 
 139              		.loc 1 448 7 view .LVU32
 140 0038 4FF0FF04 		mov	r4, #255
ARM GAS  /tmp/ccTMmuhz.s 			page 12


 141              	.LVL8:
 142              	.LBB60:
 461:src/menu.c    ****     int c;
 143              		.loc 1 461 5 is_stmt 1 view .LVU33
 462:src/menu.c    ****     unsigned char cmap[6];
 144              		.loc 1 462 5 view .LVU34
 463:src/menu.c    **** 
 145              		.loc 1 463 5 view .LVU35
 465:src/menu.c    ****     int current_smallp;
 146              		.loc 1 465 5 view .LVU36
 466:src/menu.c    **** 
 147              		.loc 1 466 5 view .LVU37
 148              		.loc 1 475 5 view .LVU38
 476:src/menu.c    ****       width = str[1] & 0x1F;
 477:src/menu.c    ****       switch (str[1] & 0x60) {
 478:src/menu.c    ****       default:
 479:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 480:src/menu.c    **** 	break;
 481:src/menu.c    ****       case 0x40:	current_smallp = 0;
 482:src/menu.c    **** 	break;
 483:src/menu.c    ****       case 0x60:	current_smallp = 1;
 149              		.loc 1 483 33 is_stmt 0 view .LVU39
 150 003c 4FF0010A 		mov	r10, #1
 475:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 475 8 view .LVU40
 152 0040 64D1     		bne	.L11
 153              	.LVL9:
 154              	.L39:
 476:src/menu.c    ****       width = str[1] & 0x1F;
 155              		.loc 1 476 7 is_stmt 1 view .LVU41
 476:src/menu.c    ****       width = str[1] & 0x1F;
 156              		.loc 1 476 18 is_stmt 0 view .LVU42
 157 0042 019B     		ldr	r3, [sp, #4]
 158 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 159 0046 06F06003 		and	r3, r6, #96
 477:src/menu.c    ****       default:
 160              		.loc 1 477 7 view .LVU43
 161 004a 402B     		cmp	r3, #64
 476:src/menu.c    ****       width = str[1] & 0x1F;
 162              		.loc 1 476 13 view .LVU44
 163 004c 06F01F06 		and	r6, r6, #31
 164              	.LVL10:
 477:src/menu.c    ****       default:
 165              		.loc 1 477 7 is_stmt 1 view .LVU45
 166 0050 6CD0     		beq	.L34
 167 0052 602B     		cmp	r3, #96
 168 0054 6AD1     		bne	.L34
 169              		.loc 1 483 18 view .LVU46
 170              	.LVL11:
 484:src/menu.c    **** 	break;
 171              		.loc 1 484 2 view .LVU47
 485:src/menu.c    ****       }
 486:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 172              		.loc 1 486 7 view .LVU48
 173              		.loc 1 486 11 is_stmt 0 view .LVU49
 174 0056 019B     		ldr	r3, [sp, #4]
 175 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
ARM GAS  /tmp/ccTMmuhz.s 			page 13


 483:src/menu.c    **** 	break;
 176              		.loc 1 483 33 view .LVU50
 177 005a 0123     		movs	r3, #1
 178 005c 0093     		str	r3, [sp]
 179 005e 00F58075 		add	r5, r0, #256
 180              	.LVL12:
 181              	.L15:
 487:src/menu.c    ****       str += 3;
 182              		.loc 1 487 7 is_stmt 1 view .LVU51
 488:src/menu.c    **** 
 489:src/menu.c    ****       real_width = charlengths(c);
 183              		.loc 1 489 20 is_stmt 0 view .LVU52
 184 0062 2846     		mov	r0, r5
 185 0064 FFF7FEFF 		bl	charlengths
 186              	.LVL13:
 487:src/menu.c    ****       str += 3;
 187              		.loc 1 487 11 view .LVU53
 188 0068 019B     		ldr	r3, [sp, #4]
 189 006a 0333     		adds	r3, r3, #3
 190 006c 0193     		str	r3, [sp, #4]
 191              	.LVL14:
 192              		.loc 1 489 7 is_stmt 1 view .LVU54
 490:src/menu.c    ****     } else {
 491:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 492:src/menu.c    ****       real_width = width = charlengths(c);
 493:src/menu.c    ****       current_smallp = smallp;
 494:src/menu.c    ****     }
 495:src/menu.c    **** 
 496:src/menu.c    ****     if (x + real_width > xmax)
 193              		.loc 1 496 5 view .LVU55
 194              		.loc 1 496 11 is_stmt 0 view .LVU56
 195 006e C319     		adds	r3, r0, r7
 196              	.LVL15:
 197              		.loc 1 496 8 view .LVU57
 198 0070 9945     		cmp	r9, r3
 199 0072 57DB     		blt	.L7
 200              	.L40:
 497:src/menu.c    ****       break;
 498:src/menu.c    **** 
 499:src/menu.c    ****     if (posns_state != current_smallp) {
 201              		.loc 1 499 5 is_stmt 1 view .LVU58
 202              		.loc 1 499 8 is_stmt 0 view .LVU59
 203 0074 009B     		ldr	r3, [sp]
 204 0076 A342     		cmp	r3, r4
 500:src/menu.c    ****       findlengths(posns, current_smallp);
 205              		.loc 1 500 7 view .LVU60
 206 0078 07AB     		add	r3, sp, #28
 499:src/menu.c    ****       findlengths(posns, current_smallp);
 207              		.loc 1 499 8 view .LVU61
 208 007a 05D0     		beq	.L18
 209              		.loc 1 500 7 is_stmt 1 view .LVU62
 210 007c 1846     		mov	r0, r3
 211              	.LVL16:
 212              		.loc 1 500 7 is_stmt 0 view .LVU63
 213 007e 0099     		ldr	r1, [sp]
 214 0080 0393     		str	r3, [sp, #12]
 215 0082 FFF7FEFF 		bl	findlengths
ARM GAS  /tmp/ccTMmuhz.s 			page 14


 216              	.LVL17:
 217 0086 039B     		ldr	r3, [sp, #12]
 501:src/menu.c    ****       posns_state = current_smallp;
 218              		.loc 1 501 7 is_stmt 1 view .LVU64
 219              	.LVL18:
 220              	.L18:
 502:src/menu.c    ****     }
 503:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 221              		.loc 1 503 5 view .LVU65
 222 0088 009A     		ldr	r2, [sp]
 223 008a 2846     		mov	r0, r5
 224 008c 05A9     		add	r1, sp, #20
 225 008e FFF7FEFF 		bl	unpackchar
 226              	.LVL19:
 504:src/menu.c    **** 
 505:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 227              		.loc 1 505 5 view .LVU66
 228              		.loc 1 505 15 view .LVU67
 229 0092 029B     		ldr	r3, [sp, #8]
 230 0094 03EB4704 		add	r4, r3, r7, lsl #1
 231 0098 294B     		ldr	r3, .L41+8
 232 009a 0DF1140B 		add	fp, sp, #20
 233 009e 1C44     		add	r4, r4, r3
 503:src/menu.c    **** 
 234              		.loc 1 503 5 is_stmt 0 view .LVU68
 235 00a0 4FF0050E 		mov	lr, #5
 236 00a4 A9EB0705 		sub	r5, r9, r7
 237              	.LVL20:
 238              	.L19:
 506:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 239              		.loc 1 506 17 is_stmt 1 view .LVU69
 240              		.loc 1 506 7 is_stmt 0 view .LVU70
 241 00a8 002E     		cmp	r6, #0
 242 00aa 1FDD     		ble	.L25
 507:src/menu.c    **** 	if (x+j >= xmax)
 243              		.loc 1 507 2 is_stmt 1 view .LVU71
 244              		.loc 1 507 5 is_stmt 0 view .LVU72
 245 00ac B945     		cmp	r9, r7
 246 00ae 1DDD     		ble	.L25
 247              	.LBB44:
 248              	.LBB45:
 249              	.LBB46:
 250              	.LBB47:
 508:src/menu.c    **** 	  break;
 509:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 510:src/menu.c    ****       }
 511:src/menu.c    ****     }
 512:src/menu.c    ****     x += width;
 513:src/menu.c    ****   }
 514:src/menu.c    **** }
 515:src/menu.c    **** 
 516:src/menu.c    **** 
 517:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 518:src/menu.c    **** 
 519:src/menu.c    **** int pixel_length(const char *s, int smallp)
 520:src/menu.c    **** {
 521:src/menu.c    ****   int len = 0;
ARM GAS  /tmp/ccTMmuhz.s 			page 15


 522:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 523:src/menu.c    ****   while (*s != '\0') {
 524:src/menu.c    ****     if (s[0] == '\007') {
 525:src/menu.c    ****       len += s[1] & 0x1F;
 526:src/menu.c    ****       s += 3;
 527:src/menu.c    ****       continue;
 528:src/menu.c    ****     }
 529:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 530:src/menu.c    ****   }
 531:src/menu.c    ****   return len;
 532:src/menu.c    **** }
 533:src/menu.c    **** */
 534:src/menu.c    **** 
 535:src/menu.c    **** 
 536:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 537:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 538:src/menu.c    ****   if (on) {
 539:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 540:src/menu.c    ****   }
 541:src/menu.c    ****   else {
 542:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 251              		.loc 1 542 25 view .LVU73
 252 00b0 0AFA0EFC 		lsl	ip, r10, lr
 253              		.loc 1 542 17 view .LVU74
 254 00b4 4FFA8CFC 		sxtb	ip, ip
 255              	.LBE47:
 256              	.LBE46:
 257              	.LBE45:
 258              	.LBE44:
 509:src/menu.c    ****       }
 259              		.loc 1 509 31 view .LVU75
 260 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 261              	.LBB57:
 262              	.LBB54:
 263              	.LBB51:
 264              	.LBB48:
 265              		.loc 1 542 17 view .LVU76
 266 00bc 6FEA0C08 		mvn	r8, ip
 267              	.LBE48:
 268              	.LBE51:
 269              	.LBE54:
 270              	.LBE57:
 506:src/menu.c    **** 	if (x+j >= xmax)
 271              		.loc 1 506 13 view .LVU77
 272 00c0 0023     		movs	r3, #0
 273 00c2 01E0     		b	.L20
 274              	.LVL21:
 275              	.L24:
 507:src/menu.c    **** 	  break;
 276              		.loc 1 507 5 view .LVU78
 277 00c4 9D42     		cmp	r5, r3
 278 00c6 11D0     		beq	.L25
 279              	.LVL22:
 280              	.L20:
 509:src/menu.c    ****       }
 281              		.loc 1 509 2 is_stmt 1 view .LVU79
 282              	.LBB58:
ARM GAS  /tmp/ccTMmuhz.s 			page 16


 283              	.LBI44:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 536 6 view .LVU80
 285              	.LBB55:
 537:src/menu.c    ****   if (on) {
 286              		.loc 1 537 3 view .LVU81
 287              	.LBB52:
 288              	.LBI46:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 289              		.loc 1 536 6 view .LVU82
 290              	.LBB49:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 291              		.loc 1 538 3 view .LVU83
 292              	.LBE49:
 293              	.LBE52:
 537:src/menu.c    ****   if (on) {
 294              		.loc 1 537 6 is_stmt 0 view .LVU84
 295 00c8 DA19     		adds	r2, r3, r7
 296              	.LVL23:
 537:src/menu.c    ****   if (on) {
 297              		.loc 1 537 6 view .LVU85
 298 00ca C72A     		cmp	r2, #199
 299              	.LBE55:
 300              	.LBE58:
 509:src/menu.c    ****       }
 301              		.loc 1 509 46 view .LVU86
 302 00cc 40FA03F1 		asr	r1, r0, r3
 303              	.LBB59:
 304              	.LBB56:
 537:src/menu.c    ****   if (on) {
 305              		.loc 1 537 6 view .LVU87
 306 00d0 09D8     		bhi	.L22
 307              	.LBB53:
 308              	.LBB50:
 539:src/menu.c    ****   }
 309              		.loc 1 539 5 is_stmt 1 view .LVU88
 310              		.loc 1 542 5 view .LVU89
 539:src/menu.c    ****   }
 311              		.loc 1 539 17 is_stmt 0 view .LVU90
 312 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 313              	.LVL24:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 314              		.loc 1 538 6 view .LVU91
 315 00d6 C907     		lsls	r1, r1, #31
 539:src/menu.c    ****   }
 316              		.loc 1 539 17 view .LVU92
 317 00d8 4CBF     		ite	mi
 318 00da 4CEA0202 		orrmi	r2, ip, r2
 319              		.loc 1 542 17 view .LVU93
 320 00de 08EA0202 		andpl	r2, r8, r2
 321 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 322              	.L22:
 323              	.LBE50:
 324              	.LBE53:
 325              	.LBE56:
 326              	.LBE59:
 507:src/menu.c    **** 	  break;
ARM GAS  /tmp/ccTMmuhz.s 			page 17


 327              		.loc 1 507 2 is_stmt 1 view .LVU94
 328              	.LVL25:
 506:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 506 26 view .LVU95
 506:src/menu.c    **** 	if (x+j >= xmax)
 330              		.loc 1 506 27 is_stmt 0 view .LVU96
 331 00e6 0133     		adds	r3, r3, #1
 332              	.LVL26:
 506:src/menu.c    **** 	if (x+j >= xmax)
 333              		.loc 1 506 17 is_stmt 1 view .LVU97
 506:src/menu.c    **** 	if (x+j >= xmax)
 334              		.loc 1 506 7 is_stmt 0 view .LVU98
 335 00e8 B342     		cmp	r3, r6
 336 00ea EBD1     		bne	.L24
 337              	.LVL27:
 338              	.L25:
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 339              		.loc 1 505 20 is_stmt 1 view .LVU99
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 340              		.loc 1 505 15 view .LVU100
 341 00ec 0EF1FF3E 		add	lr, lr, #-1
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 342              		.loc 1 505 5 is_stmt 0 view .LVU101
 343 00f0 BEF1FF3F 		cmp	lr, #-1
 344 00f4 0BF1010B 		add	fp, fp, #1
 345              	.LVL28:
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 346              		.loc 1 505 5 view .LVU102
 347 00f8 D6D1     		bne	.L19
 512:src/menu.c    ****   }
 348              		.loc 1 512 5 is_stmt 1 view .LVU103
 349              	.LBE60:
 460:src/menu.c    ****     int c;
 350              		.loc 1 460 10 is_stmt 0 view .LVU104
 351 00fa 019B     		ldr	r3, [sp, #4]
 352 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 353              	.LBB61:
 512:src/menu.c    ****   }
 354              		.loc 1 512 7 view .LVU105
 355 00fe 3744     		add	r7, r7, r6
 356              	.LVL29:
 512:src/menu.c    ****   }
 357              		.loc 1 512 7 view .LVU106
 358              	.LBE61:
 460:src/menu.c    ****     int c;
 359              		.loc 1 460 9 is_stmt 1 view .LVU107
 360 0100 85B1     		cbz	r5, .L7
 460:src/menu.c    ****     int c;
 361              		.loc 1 460 23 is_stmt 0 view .LVU108
 362 0102 B945     		cmp	r9, r7
 363 0104 0EDB     		blt	.L7
 364              	.LBB62:
 475:src/menu.c    ****       width = str[1] & 0x1F;
 365              		.loc 1 475 8 view .LVU109
 366 0106 072D     		cmp	r5, #7
 367              	.LBE62:
 368 0108 009C     		ldr	r4, [sp]
ARM GAS  /tmp/ccTMmuhz.s 			page 18


 369              	.LBB63:
 461:src/menu.c    ****     int width;
 370              		.loc 1 461 5 is_stmt 1 view .LVU110
 462:src/menu.c    ****     unsigned char cmap[6];
 371              		.loc 1 462 5 view .LVU111
 463:src/menu.c    **** 
 372              		.loc 1 463 5 view .LVU112
 465:src/menu.c    ****     int current_smallp;
 373              		.loc 1 465 5 view .LVU113
 466:src/menu.c    **** 
 374              		.loc 1 466 5 view .LVU114
 475:src/menu.c    ****       width = str[1] & 0x1F;
 375              		.loc 1 475 5 view .LVU115
 475:src/menu.c    ****       width = str[1] & 0x1F;
 376              		.loc 1 475 8 is_stmt 0 view .LVU116
 377 010a 9AD0     		beq	.L39
 378              	.LVL30:
 379              	.L11:
 491:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 491 7 is_stmt 1 view .LVU117
 492:src/menu.c    ****       current_smallp = smallp;
 381              		.loc 1 492 28 is_stmt 0 view .LVU118
 382 010c 2846     		mov	r0, r5
 383 010e FFF7FEFF 		bl	charlengths
 384              	.LVL31:
 491:src/menu.c    ****       real_width = width = charlengths(c);
 385              		.loc 1 491 31 view .LVU119
 386 0112 019B     		ldr	r3, [sp, #4]
 387 0114 0133     		adds	r3, r3, #1
 388 0116 0193     		str	r3, [sp, #4]
 389              	.LVL32:
 492:src/menu.c    ****       current_smallp = smallp;
 390              		.loc 1 492 7 is_stmt 1 view .LVU120
 493:src/menu.c    ****     }
 391              		.loc 1 493 7 view .LVU121
 493:src/menu.c    ****     }
 392              		.loc 1 493 22 is_stmt 0 view .LVU122
 393 0118 0023     		movs	r3, #0
 394              	.LVL33:
 493:src/menu.c    ****     }
 395              		.loc 1 493 22 view .LVU123
 396 011a 0093     		str	r3, [sp]
 397              	.LVL34:
 496:src/menu.c    ****       break;
 398              		.loc 1 496 11 view .LVU124
 399 011c C319     		adds	r3, r0, r7
 400              	.LVL35:
 496:src/menu.c    ****       break;
 401              		.loc 1 496 8 view .LVU125
 402 011e 9945     		cmp	r9, r3
 492:src/menu.c    ****       current_smallp = smallp;
 403              		.loc 1 492 28 view .LVU126
 404 0120 0646     		mov	r6, r0
 496:src/menu.c    ****       break;
 405              		.loc 1 496 5 is_stmt 1 view .LVU127
 496:src/menu.c    ****       break;
 406              		.loc 1 496 8 is_stmt 0 view .LVU128
ARM GAS  /tmp/ccTMmuhz.s 			page 19


 407 0122 A7DA     		bge	.L40
 408              	.LVL36:
 409              	.L7:
 496:src/menu.c    ****       break;
 410              		.loc 1 496 8 view .LVU129
 411              	.LBE63:
 514:src/menu.c    **** 
 412              		.loc 1 514 1 view .LVU130
 413 0124 0DF5097D 		add	sp, sp, #548
 414              		.cfi_remember_state
 415              		.cfi_def_cfa_offset 36
 416              		@ sp needed
 417 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 418              	.LVL37:
 419              	.L34:
 420              		.cfi_restore_state
 421              	.LBB64:
 486:src/menu.c    ****       str += 3;
 422              		.loc 1 486 7 is_stmt 1 view .LVU131
 486:src/menu.c    ****       str += 3;
 423              		.loc 1 486 11 is_stmt 0 view .LVU132
 424 012c 019B     		ldr	r3, [sp, #4]
 425 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 479:src/menu.c    **** 	break;
 426              		.loc 1 479 33 view .LVU133
 427 0130 0023     		movs	r3, #0
 428 0132 0093     		str	r3, [sp]
 429 0134 95E7     		b	.L15
 430              	.L42:
 431 0136 00BF     		.align	2
 432              	.L41:
 433 0138 00000000 		.word	forceDispPlot
 434 013c 00000000 		.word	RectPolConv
 435 0140 00000000 		.word	.LANCHOR0
 436              	.LBE64:
 437              		.cfi_endproc
 438              	.LFE36:
 440              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 441              		.align	2
 442              	.LC4:
 443 0000 57503334 		.ascii	"WP34C calculator for DM42:\000"
 443      43206361 
 443      6C63756C 
 443      61746F72 
 443      20666F72 
 444 001b 00       		.align	2
 445              	.LC5:
 446 001c 746F7020 		.ascii	"top row version,\000"
 446      726F7720 
 446      76657273 
 446      696F6E2C 
 446      00
 447 002d 000000   		.align	2
 448              	.LC6:
 449 0030 696E636C 		.ascii	"including COMPLEX LOCK mode!\000"
 449      7564696E 
 449      6720434F 
ARM GAS  /tmp/ccTMmuhz.s 			page 20


 449      4D504C45 
 449      58204C4F 
 450 004d 000000   		.align	2
 451              	.LC7:
 452 0050 54686973 		.ascii	"This software is neither provided\000"
 452      20736F66 
 452      74776172 
 452      65206973 
 452      206E6569 
 453 0072 0000     		.align	2
 454              	.LC8:
 455 0074 6279206E 		.ascii	"by nor supported by SwissMicros.\000"
 455      6F722073 
 455      7570706F 
 455      72746564 
 455      20627920 
 456 0095 000000   		.align	2
 457              	.LC9:
 458 0098 20202020 		.ascii	"    Press EXIT key to continue...\000"
 458      50726573 
 458      73204558 
 458      4954206B 
 458      65792074 
 459              		.section	.text.disp_about,"ax",%progbits
 460              		.align	1
 461              		.p2align 2,,3
 462              		.global	disp_about
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv4-sp-d16
 468              	disp_about:
 469              	.LFB5:
  73:src/menu.c    ****   lcd_clear_buf();
 470              		.loc 1 73 19 is_stmt 1 view -0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
  74:src/menu.c    ****   lcd_writeClr(t24);
 474              		.loc 1 74 3 view .LVU135
  73:src/menu.c    ****   lcd_clear_buf();
 475              		.loc 1 73 19 is_stmt 0 view .LVU136
 476 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 477              		.cfi_def_cfa_offset 24
 478              		.cfi_offset 4, -24
 479              		.cfi_offset 5, -20
 480              		.cfi_offset 6, -16
 481              		.cfi_offset 7, -12
 482              		.cfi_offset 8, -8
 483              		.cfi_offset 14, -4
  75:src/menu.c    **** 
 484              		.loc 1 75 3 view .LVU137
 485 0004 1E4C     		ldr	r4, .L45
  74:src/menu.c    ****   lcd_writeClr(t24);
 486              		.loc 1 74 3 view .LVU138
 487 0006 1F4B     		ldr	r3, .L45+4
  78:src/menu.c    ****   t24->y += 5;
ARM GAS  /tmp/ccTMmuhz.s 			page 21


 488              		.loc 1 78 3 view .LVU139
 489 0008 1F4D     		ldr	r5, .L45+8
  74:src/menu.c    ****   lcd_writeClr(t24);
 490              		.loc 1 74 3 view .LVU140
 491 000a 9847     		blx	r3
 492              	.LVL38:
  75:src/menu.c    **** 
 493              		.loc 1 75 3 is_stmt 1 view .LVU141
 494 000c 606B     		ldr	r0, [r4, #52]
 495 000e 1F4B     		ldr	r3, .L45+12
 496 0010 9847     		blx	r3
 497              	.LVL39:
  77:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
 498              		.loc 1 77 3 view .LVU142
 499 0012 0522     		movs	r2, #5
 500 0014 606B     		ldr	r0, [r4, #52]
 501 0016 1E4B     		ldr	r3, .L45+16
 502 0018 0021     		movs	r1, #0
 503 001a 9847     		blx	r3
 504              	.LVL40:
  78:src/menu.c    ****   t24->y += 5;
 505              		.loc 1 78 3 view .LVU143
  78:src/menu.c    ****   t24->y += 5;
 506              		.loc 1 78 3 view .LVU144
 507 001c 606B     		ldr	r0, [r4, #52]
 508 001e 1D49     		ldr	r1, .L45+20
 509 0020 0126     		movs	r6, #1
 510 0022 4674     		strb	r6, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 511              		.loc 1 78 3 view .LVU145
 512 0024 A847     		blx	r5
 513              	.LVL41:
  78:src/menu.c    ****   t24->y += 5;
 514              		.loc 1 78 3 view .LVU146
 515 0026 606B     		ldr	r0, [r4, #52]
  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 516              		.loc 1 81 3 is_stmt 0 view .LVU147
 517 0028 1B49     		ldr	r1, .L45+24
  79:src/menu.c    **** #ifdef TOP_ROW
 518              		.loc 1 79 10 view .LVU148
 519 002a C388     		ldrh	r3, [r0, #6]
  78:src/menu.c    ****   t24->y += 5;
 520              		.loc 1 78 3 view .LVU149
 521 002c 0027     		movs	r7, #0
  79:src/menu.c    **** #ifdef TOP_ROW
 522              		.loc 1 79 10 view .LVU150
 523 002e 0533     		adds	r3, r3, #5
 524 0030 C380     		strh	r3, [r0, #6]	@ movhi
  78:src/menu.c    ****   t24->y += 5;
 525              		.loc 1 78 3 view .LVU151
 526 0032 4774     		strb	r7, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 527              		.loc 1 78 3 is_stmt 1 view .LVU152
  79:src/menu.c    **** #ifdef TOP_ROW
 528              		.loc 1 79 3 view .LVU153
  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 529              		.loc 1 81 3 view .LVU154
ARM GAS  /tmp/ccTMmuhz.s 			page 22


 530 0034 A847     		blx	r5
 531              	.LVL42:
  82:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 532              		.loc 1 82 3 view .LVU155
 533 0036 606B     		ldr	r0, [r4, #52]
 534 0038 1849     		ldr	r1, .L45+28
 535 003a A847     		blx	r5
 536              	.LVL43:
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 537              		.loc 1 91 3 view .LVU156
 538 003c 606B     		ldr	r0, [r4, #52]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 539              		.loc 1 92 3 is_stmt 0 view .LVU157
 540 003e 1849     		ldr	r1, .L45+32
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 541              		.loc 1 91 10 view .LVU158
 542 0040 C388     		ldrh	r3, [r0, #6]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 543              		.loc 1 92 3 view .LVU159
 544 0042 4674     		strb	r6, [r0, #17]
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 545              		.loc 1 91 10 view .LVU160
 546 0044 0533     		adds	r3, r3, #5
 547 0046 C380     		strh	r3, [r0, #6]	@ movhi
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 548              		.loc 1 92 3 is_stmt 1 view .LVU161
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 549              		.loc 1 92 3 view .LVU162
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 550              		.loc 1 92 3 view .LVU163
 551 0048 A847     		blx	r5
 552              	.LVL44:
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 553              		.loc 1 92 3 view .LVU164
 554 004a 606B     		ldr	r0, [r4, #52]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 555              		.loc 1 92 3 view .LVU165
  93:src/menu.c    **** 
 556              		.loc 1 93 3 view .LVU166
  93:src/menu.c    **** 
 557              		.loc 1 93 3 view .LVU167
 558 004c 1549     		ldr	r1, .L45+36
 559 004e 4674     		strb	r6, [r0, #17]
  93:src/menu.c    **** 
 560              		.loc 1 93 3 view .LVU168
 561 0050 A847     		blx	r5
 562              	.LVL45:
  93:src/menu.c    **** 
 563              		.loc 1 93 3 view .LVU169
 564 0052 606B     		ldr	r0, [r4, #52]
  95:src/menu.c    ****   t24->x = 20;
 565              		.loc 1 95 20 is_stmt 0 view .LVU170
 566 0054 144B     		ldr	r3, .L45+40
  93:src/menu.c    **** 
 567              		.loc 1 93 3 view .LVU171
 568 0056 4774     		strb	r7, [r0, #17]
  93:src/menu.c    **** 
ARM GAS  /tmp/ccTMmuhz.s 			page 23


 569              		.loc 1 93 3 is_stmt 1 view .LVU172
  95:src/menu.c    ****   t24->x = 20;
 570              		.loc 1 95 3 view .LVU173
  95:src/menu.c    ****   t24->x = 20;
 571              		.loc 1 95 20 is_stmt 0 view .LVU174
 572 0058 9847     		blx	r3
 573              	.LVL46:
  95:src/menu.c    ****   t24->x = 20;
 574              		.loc 1 95 3 view .LVU175
 575 005a 636B     		ldr	r3, [r4, #52]
  97:src/menu.c    **** 
 576              		.loc 1 97 3 view .LVU176
 577 005c 1349     		ldr	r1, .L45+44
 578 005e 5E74     		strb	r6, [r3, #17]
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 579              		.loc 1 96 10 view .LVU177
 580 0060 1422     		movs	r2, #20
  95:src/menu.c    ****   t24->x = 20;
 581              		.loc 1 95 39 view .LVU178
 582 0062 C0F1EB00 		rsb	r0, r0, #235
  95:src/menu.c    ****   t24->x = 20;
 583              		.loc 1 95 10 view .LVU179
 584 0066 D880     		strh	r0, [r3, #6]	@ movhi
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 585              		.loc 1 96 3 is_stmt 1 view .LVU180
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 586              		.loc 1 96 10 is_stmt 0 view .LVU181
 587 0068 9A80     		strh	r2, [r3, #4]	@ movhi
  97:src/menu.c    **** 
 588              		.loc 1 97 3 is_stmt 1 view .LVU182
  97:src/menu.c    **** 
 589              		.loc 1 97 3 view .LVU183
  97:src/menu.c    **** 
 590              		.loc 1 97 3 view .LVU184
 591 006a 1846     		mov	r0, r3
 592 006c A847     		blx	r5
 593              	.LVL47:
  97:src/menu.c    **** 
 594              		.loc 1 97 3 view .LVU185
 595 006e 626B     		ldr	r2, [r4, #52]
  99:src/menu.c    **** 
 596              		.loc 1 99 3 is_stmt 0 view .LVU186
 597 0070 0F4B     		ldr	r3, .L45+48
  97:src/menu.c    **** 
 598              		.loc 1 97 3 view .LVU187
 599 0072 5774     		strb	r7, [r2, #17]
  97:src/menu.c    **** 
 600              		.loc 1 97 3 is_stmt 1 view .LVU188
  99:src/menu.c    **** 
 601              		.loc 1 99 3 view .LVU189
 602 0074 9847     		blx	r3
 603              	.LVL48:
 101:src/menu.c    **** }
 604              		.loc 1 101 3 view .LVU190
 102:src/menu.c    **** 
 605              		.loc 1 102 1 is_stmt 0 view .LVU191
 606 0076 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/ccTMmuhz.s 			page 24


 607              		.cfi_restore 14
 608              		.cfi_restore 8
 609              		.cfi_restore 7
 610              		.cfi_restore 6
 611              		.cfi_restore 5
 612              		.cfi_restore 4
 613              		.cfi_def_cfa_offset 0
 101:src/menu.c    **** }
 614              		.loc 1 101 3 view .LVU192
 615 007a 0E4B     		ldr	r3, .L45+52
 616 007c 1847     		bx	r3	@ indirect register sibling call
 617              	.LVL49:
 618              	.L46:
 619 007e 00BF     		.align	2
 620              	.L45:
 621 0080 00200010 		.word	268443648
 622 0084 2D020008 		.word	134218285
 623 0088 B1020008 		.word	134218417
 624 008c 65020008 		.word	134218341
 625 0090 6D020008 		.word	134218349
 626 0094 00000000 		.word	.LC4
 627 0098 1C000000 		.word	.LC5
 628 009c 30000000 		.word	.LC6
 629 00a0 50000000 		.word	.LC7
 630 00a4 74000000 		.word	.LC8
 631 00a8 71020008 		.word	134218353
 632 00ac 98000000 		.word	.LC9
 633 00b0 31020008 		.word	134218289
 634 00b4 99030008 		.word	134218649
 635              		.cfi_endproc
 636              	.LFE5:
 638              		.section	.text.run_menu_item,"ax",%progbits
 639              		.align	1
 640              		.p2align 2,,3
 641              		.global	run_menu_item
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	run_menu_item:
 648              	.LVL50:
 649              	.LFB3:
  42:src/menu.c    ****   int ret = 0;
 650              		.loc 1 42 36 is_stmt 1 view -0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
  43:src/menu.c    **** 
 654              		.loc 1 43 3 view .LVU194
  45:src/menu.c    ****     case MI_ABOUT_PGM:
 655              		.loc 1 45 3 view .LVU195
 656 0000 0B28     		cmp	r0, #11
 657 0002 04D1     		bne	.L49
  47:src/menu.c    ****       break;
 658              		.loc 1 47 7 view .LVU196
  42:src/menu.c    ****   int ret = 0;
 659              		.loc 1 42 36 is_stmt 0 view .LVU197
ARM GAS  /tmp/ccTMmuhz.s 			page 25


 660 0004 08B5     		push	{r3, lr}
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 3, -8
 663              		.cfi_offset 14, -4
  47:src/menu.c    ****       break;
 664              		.loc 1 47 7 view .LVU198
 665 0006 FFF7FEFF 		bl	disp_about
 666              	.LVL51:
  48:src/menu.c    **** 
 667              		.loc 1 48 7 is_stmt 1 view .LVU199
  43:src/menu.c    **** 
 668              		.loc 1 43 7 is_stmt 0 view .LVU200
 669 000a 0020     		movs	r0, #0
  56:src/menu.c    **** 
 670              		.loc 1 56 1 view .LVU201
 671 000c 08BD     		pop	{r3, pc}
 672              	.LVL52:
 673              	.L49:
 674              		.cfi_def_cfa_offset 0
 675              		.cfi_restore 3
 676              		.cfi_restore 14
  51:src/menu.c    ****       break;
 677              		.loc 1 51 11 view .LVU202
 678 000e 4FF0FF30 		mov	r0, #-1
 679              	.LVL53:
  55:src/menu.c    **** }
 680              		.loc 1 55 3 is_stmt 1 view .LVU203
  56:src/menu.c    **** 
 681              		.loc 1 56 1 is_stmt 0 view .LVU204
 682 0012 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE3:
 686              		.section	.text.set_menu,"ax",%progbits
 687              		.align	1
 688              		.p2align 2,,3
 689              		.global	set_menu
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu fpv4-sp-d16
 695              	set_menu:
 696              	.LVL54:
 697              	.LFB6:
 108:src/menu.c    ****   menu_name m = current_menu;
 698              		.loc 1 108 38 is_stmt 1 view -0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 703              		.loc 1 109 3 view .LVU206
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 704              		.loc 1 109 13 is_stmt 0 view .LVU207
 705 0000 0A4A     		ldr	r2, .L66
 706 0002 92F90030 		ldrsb	r3, [r2]
 707              	.LVL55:
 110:src/menu.c    ****     current_menu = default_menu;
ARM GAS  /tmp/ccTMmuhz.s 			page 26


 708              		.loc 1 110 3 is_stmt 1 view .LVU208
 110:src/menu.c    ****     current_menu = default_menu;
 709              		.loc 1 110 6 is_stmt 0 view .LVU209
 710 0006 8342     		cmp	r3, r0
 711 0008 0CD0     		beq	.L65
 113:src/menu.c    ****     current_menu = last_menu;
 712              		.loc 1 113 8 is_stmt 1 view .LVU210
 113:src/menu.c    ****     current_menu = last_menu;
 713              		.loc 1 113 11 is_stmt 0 view .LVU211
 714 000a 411C     		adds	r1, r0, #1
 114:src/menu.c    ****   }
 715              		.loc 1 114 5 is_stmt 1 view .LVU212
 114:src/menu.c    ****   }
 716              		.loc 1 114 18 is_stmt 0 view .LVU213
 717 000c 09BF     		itett	eq
 718 000e 0849     		ldreq	r1, .L66+4
 117:src/menu.c    ****   }
 719              		.loc 1 117 18 view .LVU214
 720 0010 1070     		strbne	r0, [r2]
 114:src/menu.c    ****   }
 721              		.loc 1 114 18 view .LVU215
 722 0012 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 723 0014 1170     		strbeq	r1, [r2]
 117:src/menu.c    ****   }
 724              		.loc 1 117 5 is_stmt 1 view .LVU216
 725              	.L56:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 726              		.loc 1 119 3 view .LVU217
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 727              		.loc 1 119 6 is_stmt 0 view .LVU218
 728 0016 092B     		cmp	r3, #9
 729 0018 03D0     		beq	.L54
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 730              		.loc 1 119 23 discriminator 1 view .LVU219
 731 001a 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 732              		.loc 1 119 43 is_stmt 1 discriminator 1 view .LVU220
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 733              		.loc 1 119 53 is_stmt 0 discriminator 1 view .LVU221
 734 001c 1CBF     		itt	ne
 735 001e 044A     		ldrne	r2, .L66+4
 736 0020 1370     		strbne	r3, [r2]
 737              	.L54:
 121:src/menu.c    **** 
 738              		.loc 1 121 1 view .LVU222
 739 0022 7047     		bx	lr
 740              	.L65:
 111:src/menu.c    ****   }
 741              		.loc 1 111 5 is_stmt 1 view .LVU223
 111:src/menu.c    ****   }
 742              		.loc 1 111 18 is_stmt 0 view .LVU224
 743 0024 0349     		ldr	r1, .L66+8
 744 0026 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 745 0028 1170     		strb	r1, [r2]
 746 002a F4E7     		b	.L56
 747              	.L67:
 748              		.align	2
ARM GAS  /tmp/ccTMmuhz.s 			page 27


 749              	.L66:
 750 002c 00000000 		.word	.LANCHOR1
 751 0030 00000000 		.word	.LANCHOR3
 752 0034 00000000 		.word	.LANCHOR2
 753              		.cfi_endproc
 754              	.LFE6:
 756              		.section	.text.set_default_menu,"ax",%progbits
 757              		.align	1
 758              		.p2align 2,,3
 759              		.global	set_default_menu
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 763              		.fpu fpv4-sp-d16
 765              	set_default_menu:
 766              	.LFB7:
 123:src/menu.c    ****   set_menu (default_menu);
 767              		.loc 1 123 26 is_stmt 1 view -0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 124:src/menu.c    **** }
 772              		.loc 1 124 3 view .LVU226
 773 0000 0A4B     		ldr	r3, .L80
 774              	.LBB65:
 775              	.LBB66:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 776              		.loc 1 109 13 is_stmt 0 view .LVU227
 777 0002 0B49     		ldr	r1, .L80+4
 778              	.LBE66:
 779              	.LBE65:
 124:src/menu.c    **** }
 780              		.loc 1 124 3 view .LVU228
 781 0004 93F90020 		ldrsb	r2, [r3]
 782              	.LVL56:
 783              	.LBB69:
 784              	.LBI65:
 108:src/menu.c    ****   menu_name m = current_menu;
 785              		.loc 1 108 6 is_stmt 1 view .LVU229
 786              	.LBB67:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 787              		.loc 1 109 3 view .LVU230
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 788              		.loc 1 109 13 is_stmt 0 view .LVU231
 789 0008 91F90030 		ldrsb	r3, [r1]
 790              	.LVL57:
 110:src/menu.c    ****     current_menu = default_menu;
 791              		.loc 1 110 3 is_stmt 1 view .LVU232
 110:src/menu.c    ****     current_menu = default_menu;
 792              		.loc 1 110 6 is_stmt 0 view .LVU233
 793 000c 9A42     		cmp	r2, r3
 794 000e 0BD0     		beq	.L79
 113:src/menu.c    ****     current_menu = last_menu;
 795              		.loc 1 113 8 is_stmt 1 view .LVU234
 113:src/menu.c    ****     current_menu = last_menu;
 796              		.loc 1 113 11 is_stmt 0 view .LVU235
ARM GAS  /tmp/ccTMmuhz.s 			page 28


 797 0010 501C     		adds	r0, r2, #1
 114:src/menu.c    ****   }
 798              		.loc 1 114 5 is_stmt 1 view .LVU236
 114:src/menu.c    ****   }
 799              		.loc 1 114 18 is_stmt 0 view .LVU237
 800 0012 04BF     		itt	eq
 801 0014 074A     		ldreq	r2, .L80+8
 802              	.LVL58:
 114:src/menu.c    ****   }
 803              		.loc 1 114 18 view .LVU238
 804 0016 1278     		ldrbeq	r2, [r2]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 805              		.loc 1 117 5 is_stmt 1 view .LVU239
 117:src/menu.c    ****   }
 806              		.loc 1 117 18 is_stmt 0 view .LVU240
 807 0018 0A70     		strb	r2, [r1]
 808              	.LVL59:
 809              	.L70:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 810              		.loc 1 119 3 is_stmt 1 view .LVU241
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 811              		.loc 1 119 6 is_stmt 0 view .LVU242
 812 001a 092B     		cmp	r3, #9
 813 001c 03D0     		beq	.L68
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 814              		.loc 1 119 23 view .LVU243
 815 001e 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 816              		.loc 1 119 43 is_stmt 1 view .LVU244
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 817              		.loc 1 119 53 is_stmt 0 view .LVU245
 818 0020 1CBF     		itt	ne
 819 0022 044A     		ldrne	r2, .L80+8
 820 0024 1370     		strbne	r3, [r2]
 821              	.LVL60:
 822              	.L68:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 823              		.loc 1 119 53 view .LVU246
 824              	.LBE67:
 825              	.LBE69:
 125:src/menu.c    **** 
 826              		.loc 1 125 1 view .LVU247
 827 0026 7047     		bx	lr
 828              	.LVL61:
 829              	.L79:
 830              	.LBB70:
 831              	.LBB68:
 111:src/menu.c    ****   }
 832              		.loc 1 111 5 is_stmt 1 view .LVU248
 111:src/menu.c    ****   }
 833              		.loc 1 111 18 is_stmt 0 view .LVU249
 834 0028 0B70     		strb	r3, [r1]
 835 002a F6E7     		b	.L70
 836              	.L81:
 837              		.align	2
 838              	.L80:
 839 002c 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/ccTMmuhz.s 			page 29


 840 0030 00000000 		.word	.LANCHOR1
 841 0034 00000000 		.word	.LANCHOR3
 842              	.LBE68:
 843              	.LBE70:
 844              		.cfi_endproc
 845              	.LFE7:
 847              		.section	.text.toggle_default_menu,"ax",%progbits
 848              		.align	1
 849              		.p2align 2,,3
 850              		.global	toggle_default_menu
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 854              		.fpu fpv4-sp-d16
 856              	toggle_default_menu:
 857              	.LFB8:
 127:src/menu.c    ****   if (current_menu == M_Blank) {
 858              		.loc 1 127 29 is_stmt 1 view -0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 0
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862              		@ link register save eliminated.
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 863              		.loc 1 128 3 view .LVU251
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 864              		.loc 1 128 20 is_stmt 0 view .LVU252
 865 0000 104A     		ldr	r2, .L98
 129:src/menu.c    ****     return;
 866              		.loc 1 129 33 view .LVU253
 867 0002 1149     		ldr	r1, .L98+4
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 868              		.loc 1 128 20 view .LVU254
 869 0004 92F90030 		ldrsb	r3, [r2]
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 870              		.loc 1 128 6 view .LVU255
 871 0008 ABB1     		cbz	r3, .L95
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 872              		.loc 1 132 8 is_stmt 1 view .LVU256
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 873              		.loc 1 132 11 is_stmt 0 view .LVU257
 874 000a 0F2B     		cmp	r3, #15
 875 000c 0FD0     		beq	.L96
 136:src/menu.c    ****   }
 876              		.loc 1 136 5 is_stmt 1 view .LVU258
 877              	.LBB71:
 878              	.LBI71:
 123:src/menu.c    ****   set_menu (default_menu);
 879              		.loc 1 123 6 view .LVU259
 880              	.LBB72:
 124:src/menu.c    **** }
 881              		.loc 1 124 3 view .LVU260
 882 000e 91F90010 		ldrsb	r1, [r1]
 883              	.LVL62:
 884              	.LBB73:
 885              	.LBI73:
 108:src/menu.c    ****   menu_name m = current_menu;
 886              		.loc 1 108 6 view .LVU261
ARM GAS  /tmp/ccTMmuhz.s 			page 30


 887              	.LBB74:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 888              		.loc 1 109 3 view .LVU262
 110:src/menu.c    ****     current_menu = default_menu;
 889              		.loc 1 110 3 view .LVU263
 110:src/menu.c    ****     current_menu = default_menu;
 890              		.loc 1 110 6 is_stmt 0 view .LVU264
 891 0012 8B42     		cmp	r3, r1
 892 0014 13D0     		beq	.L97
 113:src/menu.c    ****     current_menu = last_menu;
 893              		.loc 1 113 8 is_stmt 1 view .LVU265
 113:src/menu.c    ****     current_menu = last_menu;
 894              		.loc 1 113 11 is_stmt 0 view .LVU266
 895 0016 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 896              		.loc 1 114 5 is_stmt 1 view .LVU267
 114:src/menu.c    ****   }
 897              		.loc 1 114 18 is_stmt 0 view .LVU268
 898 0018 04BF     		itt	eq
 899 001a 0C49     		ldreq	r1, .L98+8
 900              	.LVL63:
 114:src/menu.c    ****   }
 901              		.loc 1 114 18 view .LVU269
 902 001c 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 903              		.loc 1 117 5 is_stmt 1 view .LVU270
 117:src/menu.c    ****   }
 904              		.loc 1 117 18 is_stmt 0 view .LVU271
 905 001e 1170     		strb	r1, [r2]
 906              	.LVL64:
 907              	.L87:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 908              		.loc 1 119 3 is_stmt 1 view .LVU272
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 909              		.loc 1 119 6 is_stmt 0 view .LVU273
 910 0020 092B     		cmp	r3, #9
 911 0022 03D0     		beq	.L82
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 912              		.loc 1 119 23 view .LVU274
 913 0024 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 914              		.loc 1 119 43 is_stmt 1 view .LVU275
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 915              		.loc 1 119 53 is_stmt 0 view .LVU276
 916 0026 1CBF     		itt	ne
 917 0028 084A     		ldrne	r2, .L98+8
 918 002a 1370     		strbne	r3, [r2]
 919              	.LVL65:
 920              	.L82:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 921              		.loc 1 119 53 view .LVU277
 922              	.LBE74:
 923              	.LBE73:
 924              	.LBE72:
 925              	.LBE71:
 138:src/menu.c    **** 
 926              		.loc 1 138 1 view .LVU278
ARM GAS  /tmp/ccTMmuhz.s 			page 31


 927 002c 7047     		bx	lr
 928              	.L96:
 133:src/menu.c    ****   }
 929              		.loc 1 133 5 is_stmt 1 view .LVU279
 133:src/menu.c    ****   }
 930              		.loc 1 133 33 is_stmt 0 view .LVU280
 931 002e 0023     		movs	r3, #0
 932 0030 0B70     		strb	r3, [r1]
 133:src/menu.c    ****   }
 933              		.loc 1 133 18 view .LVU281
 934 0032 1370     		strb	r3, [r2]
 935 0034 7047     		bx	lr
 936              	.L95:
 129:src/menu.c    ****     return;
 937              		.loc 1 129 5 is_stmt 1 view .LVU282
 129:src/menu.c    ****     return;
 938              		.loc 1 129 33 is_stmt 0 view .LVU283
 939 0036 0F23     		movs	r3, #15
 940 0038 0B70     		strb	r3, [r1]
 129:src/menu.c    ****     return;
 941              		.loc 1 129 18 view .LVU284
 942 003a 1370     		strb	r3, [r2]
 130:src/menu.c    ****   }
 943              		.loc 1 130 5 is_stmt 1 view .LVU285
 944 003c 7047     		bx	lr
 945              	.LVL66:
 946              	.L97:
 947              	.LBB78:
 948              	.LBB77:
 949              	.LBB76:
 950              	.LBB75:
 111:src/menu.c    ****   }
 951              		.loc 1 111 5 view .LVU286
 111:src/menu.c    ****   }
 952              		.loc 1 111 18 is_stmt 0 view .LVU287
 953 003e 1370     		strb	r3, [r2]
 954 0040 EEE7     		b	.L87
 955              	.L99:
 956 0042 00BF     		.align	2
 957              	.L98:
 958 0044 00000000 		.word	.LANCHOR1
 959 0048 00000000 		.word	.LANCHOR2
 960 004c 00000000 		.word	.LANCHOR3
 961              	.LBE75:
 962              	.LBE76:
 963              	.LBE77:
 964              	.LBE78:
 965              		.cfi_endproc
 966              	.LFE8:
 968              		.section	.text.get_menu,"ax",%progbits
 969              		.align	1
 970              		.p2align 2,,3
 971              		.global	get_menu
 972              		.syntax unified
 973              		.thumb
 974              		.thumb_func
 975              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccTMmuhz.s 			page 32


 977              	get_menu:
 978              	.LFB9:
 140:src/menu.c    ****   return current_menu;
 979              		.loc 1 140 23 is_stmt 1 view -0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 0
 982              		@ frame_needed = 0, uses_anonymous_args = 0
 983              		@ link register save eliminated.
 141:src/menu.c    **** }
 984              		.loc 1 141 3 view .LVU289
 141:src/menu.c    **** }
 985              		.loc 1 141 10 is_stmt 0 view .LVU290
 986 0000 014B     		ldr	r3, .L101
 142:src/menu.c    **** 
 987              		.loc 1 142 1 view .LVU291
 988 0002 93F90000 		ldrsb	r0, [r3]
 989 0006 7047     		bx	lr
 990              	.L102:
 991              		.align	2
 992              	.L101:
 993 0008 00000000 		.word	.LANCHOR1
 994              		.cfi_endproc
 995              	.LFE9:
 997              		.section	.text.get_last_menu,"ax",%progbits
 998              		.align	1
 999              		.p2align 2,,3
 1000              		.global	get_last_menu
 1001              		.syntax unified
 1002              		.thumb
 1003              		.thumb_func
 1004              		.fpu fpv4-sp-d16
 1006              	get_last_menu:
 1007              	.LFB10:
 144:src/menu.c    ****   return last_menu;
 1008              		.loc 1 144 28 is_stmt 1 view -0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 0
 1011              		@ frame_needed = 0, uses_anonymous_args = 0
 1012              		@ link register save eliminated.
 145:src/menu.c    **** }
 1013              		.loc 1 145 3 view .LVU293
 145:src/menu.c    **** }
 1014              		.loc 1 145 10 is_stmt 0 view .LVU294
 1015 0000 014B     		ldr	r3, .L104
 146:src/menu.c    **** 
 1016              		.loc 1 146 1 view .LVU295
 1017 0002 93F90000 		ldrsb	r0, [r3]
 1018 0006 7047     		bx	lr
 1019              	.L105:
 1020              		.align	2
 1021              	.L104:
 1022 0008 00000000 		.word	.LANCHOR3
 1023              		.cfi_endproc
 1024              	.LFE10:
 1026              		.section	.text.set_last_menu,"ax",%progbits
 1027              		.align	1
 1028              		.p2align 2,,3
ARM GAS  /tmp/ccTMmuhz.s 			page 33


 1029              		.global	set_last_menu
 1030              		.syntax unified
 1031              		.thumb
 1032              		.thumb_func
 1033              		.fpu fpv4-sp-d16
 1035              	set_last_menu:
 1036              	.LFB12:
 152:src/menu.c    ****   set_menu (M_Last);
 1037              		.loc 1 152 23 is_stmt 1 view -0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 0
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041              		@ link register save eliminated.
 153:src/menu.c    **** }
 1042              		.loc 1 153 3 view .LVU297
 1043              	.LVL67:
 1044              	.LBB79:
 1045              	.LBI79:
 108:src/menu.c    ****   menu_name m = current_menu;
 1046              		.loc 1 108 6 view .LVU298
 1047              	.LBB80:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1048              		.loc 1 109 3 view .LVU299
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1049              		.loc 1 109 13 is_stmt 0 view .LVU300
 1050 0000 0A4A     		ldr	r2, .L119
 1051 0002 92F90030 		ldrsb	r3, [r2]
 1052              	.LVL68:
 110:src/menu.c    ****     current_menu = default_menu;
 1053              		.loc 1 110 3 is_stmt 1 view .LVU301
 110:src/menu.c    ****     current_menu = default_menu;
 1054              		.loc 1 110 6 is_stmt 0 view .LVU302
 1055 0006 591C     		adds	r1, r3, #1
 1056 0008 09D0     		beq	.L116
 113:src/menu.c    ****     current_menu = last_menu;
 1057              		.loc 1 113 8 is_stmt 1 view .LVU303
 114:src/menu.c    ****   }
 1058              		.loc 1 114 5 view .LVU304
 114:src/menu.c    ****   }
 1059              		.loc 1 114 18 is_stmt 0 view .LVU305
 1060 000a 0949     		ldr	r1, .L119+4
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1061              		.loc 1 119 6 view .LVU306
 1062 000c 092B     		cmp	r3, #9
 114:src/menu.c    ****   }
 1063              		.loc 1 114 18 view .LVU307
 1064 000e 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1065 0010 1070     		strb	r0, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1066              		.loc 1 119 3 is_stmt 1 view .LVU308
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1067              		.loc 1 119 6 is_stmt 0 view .LVU309
 1068 0012 00D1     		bne	.L117
 1069              	.L106:
 1070              	.LBE80:
 1071              	.LBE79:
 154:src/menu.c    **** 
ARM GAS  /tmp/ccTMmuhz.s 			page 34


 1072              		.loc 1 154 1 view .LVU310
 1073 0014 7047     		bx	lr
 1074              	.L117:
 1075              	.LBB83:
 1076              	.LBB81:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1077              		.loc 1 119 23 view .LVU311
 1078 0016 102B     		cmp	r3, #16
 1079 0018 FCD0     		beq	.L106
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1080              		.loc 1 119 43 is_stmt 1 view .LVU312
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1081              		.loc 1 119 53 is_stmt 0 view .LVU313
 1082 001a 0B70     		strb	r3, [r1]
 1083              	.LVL69:
 1084              	.L118:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1085              		.loc 1 119 53 view .LVU314
 1086              	.LBE81:
 1087              	.LBE83:
 154:src/menu.c    **** 
 1088              		.loc 1 154 1 view .LVU315
 1089 001c 7047     		bx	lr
 1090              	.LVL70:
 1091              	.L116:
 1092              	.LBB84:
 1093              	.LBB82:
 111:src/menu.c    ****   }
 1094              		.loc 1 111 5 is_stmt 1 view .LVU316
 111:src/menu.c    ****   }
 1095              		.loc 1 111 18 is_stmt 0 view .LVU317
 1096 001e 0548     		ldr	r0, .L119+8
 1097 0020 0349     		ldr	r1, .L119+4
 1098 0022 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1099 0024 1070     		strb	r0, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1100              		.loc 1 119 3 is_stmt 1 view .LVU318
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1101              		.loc 1 119 43 view .LVU319
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1102              		.loc 1 119 53 is_stmt 0 view .LVU320
 1103 0026 0B70     		strb	r3, [r1]
 1104              	.LVL71:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1105              		.loc 1 119 53 view .LVU321
 1106 0028 F8E7     		b	.L118
 1107              	.L120:
 1108 002a 00BF     		.align	2
 1109              	.L119:
 1110 002c 00000000 		.word	.LANCHOR1
 1111 0030 00000000 		.word	.LANCHOR3
 1112 0034 00000000 		.word	.LANCHOR2
 1113              	.LBE82:
 1114              	.LBE84:
 1115              		.cfi_endproc
 1116              	.LFE12:
 1118              		.section	.text.mdot,"ax",%progbits
ARM GAS  /tmp/ccTMmuhz.s 			page 35


 1119              		.align	1
 1120              		.p2align 2,,3
 1121              		.global	mdot
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu fpv4-sp-d16
 1127              	mdot:
 1128              	.LVL72:
 1129              	.LFB14:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1130              		.loc 1 536 40 is_stmt 1 view -0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 1134              		@ link register save eliminated.
 537:src/menu.c    ****   if (on) {
 1135              		.loc 1 537 3 view .LVU323
 537:src/menu.c    ****   if (on) {
 1136              		.loc 1 537 6 is_stmt 0 view .LVU324
 1137 0000 C728     		cmp	r0, #199
 1138 0002 1AD8     		bhi	.L125
 1139              	.LVL73:
 1140              	.LBB87:
 1141              	.LBI87:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1142              		.loc 1 536 6 is_stmt 1 view .LVU325
 1143              	.LBB88:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1144              		.loc 1 538 3 view .LVU326
 1145              	.LBE88:
 1146              	.LBE87:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1147              		.loc 1 536 40 is_stmt 0 view .LVU327
 1148 0004 10B4     		push	{r4}
 1149              		.cfi_def_cfa_offset 4
 1150              		.cfi_offset 4, -4
 1151              	.LBB91:
 1152              	.LBB89:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1153              		.loc 1 538 6 view .LVU328
 1154 0006 63B9     		cbnz	r3, .L128
 1155              		.loc 1 542 5 is_stmt 1 view .LVU329
 1156              		.loc 1 542 17 is_stmt 0 view .LVU330
 1157 0008 0C4B     		ldr	r3, .L129
 1158              	.LVL74:
 1159              		.loc 1 542 17 view .LVU331
 1160 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1161              	.LVL75:
 1162              		.loc 1 542 25 view .LVU332
 1163 000e 0124     		movs	r4, #1
 1164              		.loc 1 542 17 view .LVU333
 1165 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1166              		.loc 1 542 25 view .LVU334
 1167 0012 04FA01F1 		lsl	r1, r4, r1
 1168              	.LVL76:
 1169              		.loc 1 542 17 view .LVU335
ARM GAS  /tmp/ccTMmuhz.s 			page 36


 1170 0016 23EA0101 		bic	r1, r3, r1
 1171 001a 8154     		strb	r1, [r0, r2]
 1172              	.LVL77:
 1173              		.loc 1 542 17 view .LVU336
 1174              	.LBE89:
 1175              	.LBE91:
 543:src/menu.c    ****   }
 544:src/menu.c    **** }
 1176              		.loc 1 544 1 view .LVU337
 1177 001c 5DF8044B 		ldr	r4, [sp], #4
 1178              		.cfi_remember_state
 1179              		.cfi_restore 4
 1180              		.cfi_def_cfa_offset 0
 1181 0020 7047     		bx	lr
 1182              	.LVL78:
 1183              	.L128:
 1184              		.cfi_restore_state
 1185              	.LBB92:
 1186              	.LBB90:
 539:src/menu.c    ****   }
 1187              		.loc 1 539 5 is_stmt 1 view .LVU338
 539:src/menu.c    ****   }
 1188              		.loc 1 539 17 is_stmt 0 view .LVU339
 1189 0022 064B     		ldr	r3, .L129
 1190              	.LVL79:
 539:src/menu.c    ****   }
 1191              		.loc 1 539 17 view .LVU340
 1192 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1193              	.LVL80:
 539:src/menu.c    ****   }
 1194              		.loc 1 539 24 view .LVU341
 1195 0028 0124     		movs	r4, #1
 539:src/menu.c    ****   }
 1196              		.loc 1 539 17 view .LVU342
 1197 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 539:src/menu.c    ****   }
 1198              		.loc 1 539 24 view .LVU343
 1199 002c 04FA01F1 		lsl	r1, r4, r1
 1200              	.LVL81:
 539:src/menu.c    ****   }
 1201              		.loc 1 539 17 view .LVU344
 1202 0030 1943     		orrs	r1, r1, r3
 1203 0032 8154     		strb	r1, [r0, r2]
 1204              	.LBE90:
 1205              	.LBE92:
 1206              		.loc 1 544 1 view .LVU345
 1207 0034 5DF8044B 		ldr	r4, [sp], #4
 1208              		.cfi_restore 4
 1209              		.cfi_def_cfa_offset 0
 1210 0038 7047     		bx	lr
 1211              	.LVL82:
 1212              	.L125:
 1213              		.loc 1 544 1 view .LVU346
 1214 003a 7047     		bx	lr
 1215              	.L130:
 1216              		.align	2
 1217              	.L129:
ARM GAS  /tmp/ccTMmuhz.s 			page 37


 1218 003c 00000000 		.word	.LANCHOR0
 1219              		.cfi_endproc
 1220              	.LFE14:
 1222              		.section	.text.get_current_menu_ref,"ax",%progbits
 1223              		.align	1
 1224              		.p2align 2,,3
 1225              		.global	get_current_menu_ref
 1226              		.syntax unified
 1227              		.thumb
 1228              		.thumb_func
 1229              		.fpu fpv4-sp-d16
 1231              	get_current_menu_ref:
 1232              	.LVL83:
 1233              	.LFB15:
 545:src/menu.c    **** 
 546:src/menu.c    **** struct _menu get_current_menu_ref() {
 1234              		.loc 1 546 37 is_stmt 1 view -0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 0
 1237              		@ frame_needed = 0, uses_anonymous_args = 0
 547:src/menu.c    ****   int i = current_menu;
 1238              		.loc 1 547 3 view .LVU348
 546:src/menu.c    ****   int i = current_menu;
 1239              		.loc 1 546 37 is_stmt 0 view .LVU349
 1240 0000 08B5     		push	{r3, lr}
 1241              		.cfi_def_cfa_offset 8
 1242              		.cfi_offset 3, -8
 1243              		.cfi_offset 14, -4
 548:src/menu.c    ****   if (C_LOCKED)
 1244              		.loc 1 548 7 view .LVU350
 1245 0002 294B     		ldr	r3, .L147
 547:src/menu.c    ****   int i = current_menu;
 1246              		.loc 1 547 7 view .LVU351
 1247 0004 294A     		ldr	r2, .L147+4
 1248              		.loc 1 548 7 view .LVU352
 1249 0006 1B68     		ldr	r3, [r3]
 547:src/menu.c    ****   int i = current_menu;
 1250              		.loc 1 547 7 view .LVU353
 1251 0008 92F90010 		ldrsb	r1, [r2]
 1252              	.LVL84:
 1253              		.loc 1 548 3 is_stmt 1 view .LVU354
 1254              		.loc 1 548 7 is_stmt 0 view .LVU355
 1255 000c 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 1256              		.loc 1 548 6 view .LVU356
 1257 0010 03F04102 		and	r2, r3, #65
 1258 0014 412A     		cmp	r2, #65
 546:src/menu.c    ****   int i = current_menu;
 1259              		.loc 1 546 37 view .LVU357
 1260 0016 0346     		mov	r3, r0
 1261              		.loc 1 548 6 view .LVU358
 1262 0018 0BD0     		beq	.L145
 1263              	.LVL85:
 1264              	.L132:
 549:src/menu.c    ****     switch (current_menu) {
 550:src/menu.c    ****     case (M_Clear):
 551:src/menu.c    ****       i = M_Clear_C;
 552:src/menu.c    ****       break;
ARM GAS  /tmp/ccTMmuhz.s 			page 38


 553:src/menu.c    ****     case (M_Swap):
 554:src/menu.c    ****       i = M_Swap_C;
 555:src/menu.c    ****       break;
 556:src/menu.c    ****     case (M_Arrow):
 557:src/menu.c    ****       i = M_Arrow_C;
 558:src/menu.c    ****       break;
 559:src/menu.c    ****     case (M_Prob):
 560:src/menu.c    ****       i = M_Prob_C;
 561:src/menu.c    ****       break;
 562:src/menu.c    ****     case (M_Blank2):
 563:src/menu.c    ****       i = M_Blank2_C;
 564:src/menu.c    ****       break;
 565:src/menu.c    ****     case (M_Misc):
 566:src/menu.c    ****       i = M_Misc_C;
 567:src/menu.c    ****       break;
 568:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 569:src/menu.c    ****     case (M_Flags):// so don't display them.
 570:src/menu.c    ****     case (M_Stats):
 571:src/menu.c    ****     case (M_Setup2):
 572:src/menu.c    ****     case (M_Solve):
 573:src/menu.c    ****     case (M_Program):
 574:src/menu.c    ****       i = M_C_Lock;
 575:src/menu.c    ****     default:;
 1265              		.loc 1 575 13 is_stmt 1 view .LVU359
 576:src/menu.c    ****     }
 577:src/menu.c    ****   if (current_menu == M_User) {
 1266              		.loc 1 577 3 view .LVU360
 1267              		.loc 1 577 6 is_stmt 0 view .LVU361
 1268 001a 6329     		cmp	r1, #99
 1269 001c 32D0     		beq	.L146
 1270              	.LVL86:
 1271              	.L137:
 578:src/menu.c    ****     return UserMenu;
 579:src/menu.c    ****   }
 580:src/menu.c    ****   else {
 581:src/menu.c    ****     return Menus[i];
 1272              		.loc 1 581 5 is_stmt 1 view .LVU362
 1273              		.loc 1 581 17 is_stmt 0 view .LVU363
 1274 001e 2448     		ldr	r0, .L147+8
 1275 0020 D022     		movs	r2, #208
 1276 0022 02FB0101 		mla	r1, r2, r1, r0
 1277              	.LVL87:
 1278              		.loc 1 581 17 view .LVU364
 1279 0026 1846     		mov	r0, r3
 1280 0028 FFF7FEFF 		bl	memcpy
 1281              	.LVL88:
 1282              		.loc 1 581 17 view .LVU365
 1283 002c 0346     		mov	r3, r0
 582:src/menu.c    ****   }
 583:src/menu.c    **** }
 1284              		.loc 1 583 1 view .LVU366
 1285 002e 1846     		mov	r0, r3
 1286 0030 08BD     		pop	{r3, pc}
 1287              	.LVL89:
 1288              	.L145:
 549:src/menu.c    ****     case (M_Clear):
 1289              		.loc 1 549 5 is_stmt 1 view .LVU367
ARM GAS  /tmp/ccTMmuhz.s 			page 39


 1290 0032 4A1E     		subs	r2, r1, #1
 1291 0034 0E2A     		cmp	r2, #14
 1292 0036 F0D8     		bhi	.L132
 1293 0038 01A0     		adr	r0, .L134
 1294 003a 50F822F0 		ldr	pc, [r0, r2, lsl #2]
 1295              	.LVL90:
 1296 003e 00BF     		.p2align 2
 1297              	.L134:
 1298 0040 A5000000 		.word	.L140+1
 1299 0044 1B000000 		.word	.L132+1
 1300 0048 A1000000 		.word	.L135+1
 1301 004c 1B000000 		.word	.L132+1
 1302 0050 9D000000 		.word	.L139+1
 1303 0054 81000000 		.word	.L138+1
 1304 0058 A1000000 		.word	.L135+1
 1305 005c 1B000000 		.word	.L132+1
 1306 0060 7D000000 		.word	.L143+1
 1307 0064 A1000000 		.word	.L135+1
 1308 0068 99000000 		.word	.L136+1
 1309 006c A1000000 		.word	.L135+1
 1310 0070 A1000000 		.word	.L135+1
 1311 0074 A1000000 		.word	.L135+1
 1312 0078 95000000 		.word	.L133+1
 1313              		.p2align 1
 1314              	.L143:
 557:src/menu.c    ****       break;
 1315              		.loc 1 557 9 is_stmt 0 view .LVU368
 1316 007c 1421     		movs	r1, #20
 1317              	.LVL91:
 557:src/menu.c    ****       break;
 1318              		.loc 1 557 9 view .LVU369
 1319 007e CEE7     		b	.L137
 1320              	.LVL92:
 1321              	.L138:
 548:src/menu.c    ****     switch (current_menu) {
 1322              		.loc 1 548 6 view .LVU370
 1323 0080 1321     		movs	r1, #19
 1324              	.LVL93:
 548:src/menu.c    ****     switch (current_menu) {
 1325              		.loc 1 548 6 view .LVU371
 1326 0082 CCE7     		b	.L137
 1327              	.LVL94:
 1328              	.L146:
 578:src/menu.c    ****   }
 1329              		.loc 1 578 5 is_stmt 1 view .LVU372
 578:src/menu.c    ****   }
 1330              		.loc 1 578 12 is_stmt 0 view .LVU373
 1331 0084 0B49     		ldr	r1, .L147+12
 1332              	.LVL95:
 578:src/menu.c    ****   }
 1333              		.loc 1 578 12 view .LVU374
 1334 0086 D022     		movs	r2, #208
 1335 0088 1846     		mov	r0, r3
 1336 008a FFF7FEFF 		bl	memcpy
 1337              	.LVL96:
 578:src/menu.c    ****   }
 1338              		.loc 1 578 12 view .LVU375
ARM GAS  /tmp/ccTMmuhz.s 			page 40


 1339 008e 0346     		mov	r3, r0
 1340              		.loc 1 583 1 view .LVU376
 1341 0090 1846     		mov	r0, r3
 1342 0092 08BD     		pop	{r3, pc}
 1343              	.LVL97:
 1344              	.L133:
 563:src/menu.c    ****       break;
 1345              		.loc 1 563 7 is_stmt 1 view .LVU377
 564:src/menu.c    ****     case (M_Misc):
 1346              		.loc 1 564 7 view .LVU378
 563:src/menu.c    ****       break;
 1347              		.loc 1 563 9 is_stmt 0 view .LVU379
 1348 0094 1621     		movs	r1, #22
 564:src/menu.c    ****     case (M_Misc):
 1349              		.loc 1 564 7 view .LVU380
 1350 0096 C2E7     		b	.L137
 1351              	.LVL98:
 1352              	.L136:
 560:src/menu.c    ****       break;
 1353              		.loc 1 560 7 is_stmt 1 view .LVU381
 561:src/menu.c    ****     case (M_Blank2):
 1354              		.loc 1 561 7 view .LVU382
 560:src/menu.c    ****       break;
 1355              		.loc 1 560 9 is_stmt 0 view .LVU383
 1356 0098 1521     		movs	r1, #21
 561:src/menu.c    ****     case (M_Blank2):
 1357              		.loc 1 561 7 view .LVU384
 1358 009a C0E7     		b	.L137
 1359              	.LVL99:
 1360              	.L139:
 566:src/menu.c    ****       break;
 1361              		.loc 1 566 7 is_stmt 1 view .LVU385
 567:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1362              		.loc 1 567 7 view .LVU386
 566:src/menu.c    ****       break;
 1363              		.loc 1 566 9 is_stmt 0 view .LVU387
 1364 009c 1721     		movs	r1, #23
 567:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1365              		.loc 1 567 7 view .LVU388
 1366 009e BEE7     		b	.L137
 1367              	.LVL100:
 1368              	.L135:
 574:src/menu.c    ****     default:;
 1369              		.loc 1 574 7 is_stmt 1 view .LVU389
 574:src/menu.c    ****     default:;
 1370              		.loc 1 574 9 is_stmt 0 view .LVU390
 1371 00a0 1121     		movs	r1, #17
 1372 00a2 BCE7     		b	.L137
 1373              	.LVL101:
 1374              	.L140:
 551:src/menu.c    ****       break;
 1375              		.loc 1 551 9 view .LVU391
 1376 00a4 1221     		movs	r1, #18
 1377              	.LVL102:
 551:src/menu.c    ****       break;
 1378              		.loc 1 551 9 view .LVU392
 1379 00a6 BAE7     		b	.L137
ARM GAS  /tmp/ccTMmuhz.s 			page 41


 1380              	.L148:
 1381              		.align	2
 1382              	.L147:
 1383 00a8 00000000 		.word	main_ram
 1384 00ac 00000000 		.word	.LANCHOR1
 1385 00b0 00000000 		.word	Menus
 1386 00b4 00000000 		.word	.LANCHOR4
 1387              		.cfi_endproc
 1388              	.LFE15:
 1390              		.section	.text.display_menu,"ax",%progbits
 1391              		.align	1
 1392              		.p2align 2,,3
 1393              		.global	display_menu
 1394              		.syntax unified
 1395              		.thumb
 1396              		.thumb_func
 1397              		.fpu fpv4-sp-d16
 1399              	display_menu:
 1400              	.LFB16:
 584:src/menu.c    **** 
 585:src/menu.c    **** void display_menu (struct _menu Ref) {
 1401              		.loc 1 585 38 is_stmt 1 view -0
 1402              		.cfi_startproc
 1403              		@ args = 208, pretend = 16, frame = 0
 1404              		@ frame_needed = 0, uses_anonymous_args = 0
 586:src/menu.c    ****   int len = 0;
 1405              		.loc 1 586 3 view .LVU394
 1406              	.LVL103:
 587:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1407              		.loc 1 587 3 view .LVU395
 585:src/menu.c    ****   int len = 0;
 1408              		.loc 1 585 38 is_stmt 0 view .LVU396
 1409 0000 84B0     		sub	sp, sp, #16
 1410              		.cfi_def_cfa_offset 16
 1411 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1412              		.cfi_def_cfa_offset 52
 1413              		.cfi_offset 4, -52
 1414              		.cfi_offset 5, -48
 1415              		.cfi_offset 6, -44
 1416              		.cfi_offset 7, -40
 1417              		.cfi_offset 8, -36
 1418              		.cfi_offset 9, -32
 1419              		.cfi_offset 10, -28
 1420              		.cfi_offset 11, -24
 1421              		.cfi_offset 14, -20
 1422 0006 83B0     		sub	sp, sp, #12
 1423              		.cfi_def_cfa_offset 64
 1424              		.loc 1 587 3 view .LVU397
 1425 0008 0024     		movs	r4, #0
 585:src/menu.c    ****   int len = 0;
 1426              		.loc 1 585 38 view .LVU398
 1427 000a 0CAD     		add	r5, sp, #48
 1428 000c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1429              		.loc 1 587 3 view .LVU399
 1430 0010 3E4E     		ldr	r6, .L167
 1431 0012 0094     		str	r4, [sp]
 1432 0014 2046     		mov	r0, r4
ARM GAS  /tmp/ccTMmuhz.s 			page 42


 1433 0016 3423     		movs	r3, #52
 1434 0018 4FF4C872 		mov	r2, #400
 1435 001c BC21     		movs	r1, #188
 1436 001e B047     		blx	r6
 1437              	.LVL104:
 588:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1438              		.loc 1 588 3 is_stmt 1 view .LVU400
 1439 0020 3B4D     		ldr	r5, .L167+4
 1440 0022 FF23     		movs	r3, #255
 1441 0024 0093     		str	r3, [sp]
 1442 0026 4FF4C872 		mov	r2, #400
 1443 002a 0123     		movs	r3, #1
 1444 002c BC21     		movs	r1, #188
 1445 002e 2046     		mov	r0, r4
 1446 0030 B047     		blx	r6
 1447              	.LVL105:
 589:src/menu.c    ****   //Clear previous menu
 590:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1448              		.loc 1 590 3 view .LVU401
 1449              	.LBB93:
 1450              		.loc 1 590 8 view .LVU402
 1451              		.loc 1 590 21 view .LVU403
 591:src/menu.c    ****     mdots[col][0] = 0;
 1452              		.loc 1 591 19 is_stmt 0 view .LVU404
 1453 0032 2246     		mov	r2, r4
 1454 0034 05F5C871 		add	r1, r5, #400
 1455              	.LBE93:
 588:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1456              		.loc 1 588 3 view .LVU405
 1457 0038 2B46     		mov	r3, r5
 1458              	.LVL106:
 1459              	.L150:
 1460              	.LBB94:
 1461              		.loc 1 591 5 is_stmt 1 discriminator 3 view .LVU406
 1462              		.loc 1 591 19 is_stmt 0 discriminator 3 view .LVU407
 1463 003a 1A70     		strb	r2, [r3]
 592:src/menu.c    ****     mdots[col][1] = 0;
 1464              		.loc 1 592 5 is_stmt 1 discriminator 3 view .LVU408
 1465              		.loc 1 592 19 is_stmt 0 discriminator 3 view .LVU409
 1466 003c 5A70     		strb	r2, [r3, #1]
 590:src/menu.c    ****     mdots[col][0] = 0;
 1467              		.loc 1 590 32 is_stmt 1 discriminator 3 view .LVU410
 590:src/menu.c    ****     mdots[col][0] = 0;
 1468              		.loc 1 590 21 discriminator 3 view .LVU411
 1469 003e 0233     		adds	r3, r3, #2
 590:src/menu.c    ****     mdots[col][0] = 0;
 1470              		.loc 1 590 3 is_stmt 0 discriminator 3 view .LVU412
 1471 0040 9942     		cmp	r1, r3
 1472 0042 FAD1     		bne	.L150
 1473 0044 14AE     		add	r6, sp, #80
 590:src/menu.c    ****     mdots[col][0] = 0;
 1474              		.loc 1 590 3 view .LVU413
 1475 0046 0024     		movs	r4, #0
 1476              	.LVL107:
 1477              	.L151:
 590:src/menu.c    ****     mdots[col][0] = 0;
 1478              		.loc 1 590 3 view .LVU414
ARM GAS  /tmp/ccTMmuhz.s 			page 43


 1479              	.LBE94:
 1480              	.LBB95:
 593:src/menu.c    ****   }
 594:src/menu.c    **** 
 595:src/menu.c    ****   // Draw menu items
 596:src/menu.c    ****   // 
 597:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 598:src/menu.c    ****     /*
 599:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 600:src/menu.c    ****     */
 601:src/menu.c    ****     // Label is Ref.keys[item].unshifted_label
 602:src/menu.c    ****     // Unshifted first
 603:src/menu.c    ****       len = pixel_length (Ref.keys[item].unshifted_label, 0); // 0 means not small font
 1481              		.loc 1 603 7 is_stmt 1 view .LVU415
 1482              		.loc 1 603 13 is_stmt 0 view .LVU416
 1483 0048 0021     		movs	r1, #0
 1484 004a 3046     		mov	r0, r6
 1485 004c FFF7FEFF 		bl	pixel_length
 1486              	.LVL108:
 604:src/menu.c    ****       set_menu_label ( Ref.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1487              		.loc 1 604 7 is_stmt 1 view .LVU417
 1488              		.loc 1 604 73 is_stmt 0 view .LVU418
 1489 0050 C0F12000 		rsb	r0, r0, #32
 1490              	.LVL109:
 1491              		.loc 1 604 79 view .LVU419
 1492 0054 00EBD070 		add	r0, r0, r0, lsr #31
 1493              		.loc 1 604 7 view .LVU420
 1494 0058 04EB6001 		add	r1, r4, r0, asr #1
 1495 005c 0022     		movs	r2, #0
 1496 005e 3046     		mov	r0, r6
 1497 0060 06F10807 		add	r7, r6, #8
 1498 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1499              	.LVL110:
 605:src/menu.c    ****       // Now shifted ...	
 606:src/menu.c    ****       len = pixel_length (Ref.keys[item].shifted_label, 0); // 0 means not small font
 1500              		.loc 1 606 7 is_stmt 1 view .LVU421
 1501              		.loc 1 606 13 is_stmt 0 view .LVU422
 1502 0068 0021     		movs	r1, #0
 1503 006a 3846     		mov	r0, r7
 1504 006c FFF7FEFF 		bl	pixel_length
 1505              	.LVL111:
 607:src/menu.c    ****       len = item*32 + (32-len)/2;
 1506              		.loc 1 607 7 is_stmt 1 view .LVU423
 1507              		.loc 1 607 26 is_stmt 0 view .LVU424
 1508 0070 C0F12000 		rsb	r0, r0, #32
 1509              	.LVL112:
 1510              		.loc 1 607 31 view .LVU425
 1511 0074 00EBD070 		add	r0, r0, r0, lsr #31
 1512              	.LVL113:
 608:src/menu.c    ****       if (len<0) len = 0;
 1513              		.loc 1 608 7 is_stmt 1 view .LVU426
 607:src/menu.c    ****       len = item*32 + (32-len)/2;
 1514              		.loc 1 607 11 is_stmt 0 view .LVU427
 1515 0078 04EB6001 		add	r1, r4, r0, asr #1
 1516              	.LVL114:
 607:src/menu.c    ****       len = item*32 + (32-len)/2;
 1517              		.loc 1 607 11 view .LVU428
ARM GAS  /tmp/ccTMmuhz.s 			page 44


 1518 007c C729     		cmp	r1, #199
 1519 007e A8BF     		it	ge
 1520 0080 C721     		movge	r1, #199
 1521              	.LVL115:
 609:src/menu.c    ****       if (len>199) len = 199;
 610:src/menu.c    ****       set_menu_label ( Ref.keys[item].shifted_label, 0, len, 1 );
 1522              		.loc 1 610 7 is_stmt 1 view .LVU429
 1523 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1524              	.LVL116:
 1525              		.loc 1 610 7 is_stmt 0 view .LVU430
 1526 0086 3846     		mov	r0, r7
 1527 0088 2034     		adds	r4, r4, #32
 1528 008a 0122     		movs	r2, #1
 1529 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1530              	.LVL117:
 597:src/menu.c    ****     /*
 1531              		.loc 1 597 32 is_stmt 1 view .LVU431
 597:src/menu.c    ****     /*
 1532              		.loc 1 597 22 view .LVU432
 597:src/menu.c    ****     /*
 1533              		.loc 1 597 3 is_stmt 0 view .LVU433
 1534 0090 C02C     		cmp	r4, #192
 1535 0092 06F12006 		add	r6, r6, #32
 1536 0096 D7D1     		bne	.L151
 1537 0098 1E4E     		ldr	r6, .L167+8
 1538              	.LBE95:
 1539              	.LBB96:
 1540              	.LBB97:
 611:src/menu.c    ****   }
 612:src/menu.c    **** 
 613:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 614:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 615:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 616:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 617:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1541              		.loc 1 617 2 view .LVU434
 1542 009a DFF87090 		ldr	r9, .L167
 1543 009e C5F1040A 		rsb	r10, r5, #4
 1544 00a2 06F5C47B 		add	fp, r6, #392
 1545              	.LBE97:
 1546              	.LBE96:
 1547              	.LBB99:
 597:src/menu.c    ****     /*
 1548              		.loc 1 597 3 view .LVU435
 1549 00a6 771E     		subs	r7, r6, #1
 1550              	.LBE99:
 1551              	.LBB100:
 1552              	.LBB98:
 1553              		.loc 1 617 2 view .LVU436
 1554 00a8 4FF0FF08 		mov	r8, #255
 1555              	.L152:
 1556              	.LVL118:
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1557              		.loc 1 614 23 is_stmt 1 view .LVU437
 1558 00ac 0AEB0705 		add	r5, r10, r7
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1559              		.loc 1 614 14 is_stmt 0 view .LVU438
ARM GAS  /tmp/ccTMmuhz.s 			page 45


 1560 00b0 0024     		movs	r4, #0
 1561              	.LVL119:
 1562              	.L155:
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1563              		.loc 1 615 7 is_stmt 1 view .LVU439
 1564              		.loc 1 617 2 view .LVU440
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1565              		.loc 1 615 22 is_stmt 0 view .LVU441
 1566 00b2 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1567              		.loc 1 615 40 view .LVU442
 1568 00b6 2241     		asrs	r2, r2, r4
 1569              		.loc 1 617 2 view .LVU443
 1570 00b8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1571 00bc 0323     		movs	r3, #3
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1572              		.loc 1 615 10 view .LVU444
 1573 00be 12F0010F 		tst	r2, #1
 1574              		.loc 1 617 2 view .LVU445
 1575 00c2 01F1E901 		add	r1, r1, #233
 1576 00c6 1A46     		mov	r2, r3
 1577 00c8 2846     		mov	r0, r5
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1578              		.loc 1 615 10 view .LVU446
 1579 00ca 02D0     		beq	.L153
 1580              		.loc 1 617 2 view .LVU447
 1581 00cc CDF80080 		str	r8, [sp]
 1582 00d0 C847     		blx	r9
 1583              	.LVL120:
 1584              	.L153:
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1585              		.loc 1 618 7 is_stmt 1 view .LVU448
 619:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 620:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1586              		.loc 1 620 2 view .LVU449
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1587              		.loc 1 618 22 is_stmt 0 view .LVU450
 1588 00d2 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1589              		.loc 1 618 40 view .LVU451
 1590 00d4 2241     		asrs	r2, r2, r4
 1591              		.loc 1 620 2 view .LVU452
 1592 00d6 A4EB8401 		sub	r1, r4, r4, lsl #2
 1593 00da 0323     		movs	r3, #3
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1594              		.loc 1 618 10 view .LVU453
 1595 00dc 12F0010F 		tst	r2, #1
 1596              		.loc 1 620 2 view .LVU454
 1597 00e0 01F1D001 		add	r1, r1, #208
 1598 00e4 1A46     		mov	r2, r3
 1599 00e6 04F10104 		add	r4, r4, #1
 1600              	.LVL121:
 1601              		.loc 1 620 2 view .LVU455
 1602 00ea 2846     		mov	r0, r5
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1603              		.loc 1 618 10 view .LVU456
 1604 00ec 02D0     		beq	.L154
ARM GAS  /tmp/ccTMmuhz.s 			page 46


 1605              		.loc 1 620 2 view .LVU457
 1606 00ee CDF80080 		str	r8, [sp]
 1607 00f2 C847     		blx	r9
 1608              	.LVL122:
 1609              	.L154:
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1610              		.loc 1 614 32 is_stmt 1 discriminator 2 view .LVU458
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1611              		.loc 1 614 23 discriminator 2 view .LVU459
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1612              		.loc 1 614 5 is_stmt 0 discriminator 2 view .LVU460
 1613 00f4 062C     		cmp	r4, #6
 1614 00f6 DCD1     		bne	.L155
 1615              	.LBE98:
 613:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1616              		.loc 1 613 32 is_stmt 1 discriminator 2 view .LVU461
 613:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1617              		.loc 1 613 21 discriminator 2 view .LVU462
 1618 00f8 0236     		adds	r6, r6, #2
 613:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1619              		.loc 1 613 3 is_stmt 0 discriminator 2 view .LVU463
 1620 00fa B345     		cmp	fp, r6
 1621 00fc 07F10207 		add	r7, r7, #2
 1622 0100 D4D1     		bne	.L152
 1623              	.LBE100:
 621:src/menu.c    ****     }
 622:src/menu.c    ****   }
 623:src/menu.c    **** }
 1624              		.loc 1 623 1 view .LVU464
 1625 0102 03B0     		add	sp, sp, #12
 1626              		.cfi_def_cfa_offset 52
 1627              		@ sp needed
 1628 0104 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1629              		.cfi_restore 14
 1630              		.cfi_restore 11
 1631              		.cfi_restore 10
 1632              		.cfi_restore 9
 1633              		.cfi_restore 8
 1634              		.cfi_restore 7
 1635              		.cfi_restore 6
 1636              		.cfi_restore 5
 1637              		.cfi_restore 4
 1638              		.cfi_def_cfa_offset 16
 1639              	.LVL123:
 1640              		.loc 1 623 1 view .LVU465
 1641 0108 04B0     		add	sp, sp, #16
 1642              		.cfi_def_cfa_offset 0
 1643 010a 7047     		bx	lr
 1644              	.L168:
 1645              		.align	2
 1646              	.L167:
 1647 010c 3D020008 		.word	134218301
 1648 0110 00000000 		.word	.LANCHOR0
 1649 0114 01000000 		.word	.LANCHOR0+1
 1650              		.cfi_endproc
 1651              	.LFE16:
 1653              		.section	.text.display_current_menu,"ax",%progbits
ARM GAS  /tmp/ccTMmuhz.s 			page 47


 1654              		.align	1
 1655              		.p2align 2,,3
 1656              		.global	display_current_menu
 1657              		.syntax unified
 1658              		.thumb
 1659              		.thumb_func
 1660              		.fpu fpv4-sp-d16
 1662              	display_current_menu:
 1663              	.LFB11:
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1664              		.loc 1 148 30 is_stmt 1 view -0
 1665              		.cfi_startproc
 1666              		@ args = 0, pretend = 0, frame = 208
 1667              		@ frame_needed = 0, uses_anonymous_args = 0
 149:src/menu.c    **** }
 1668              		.loc 1 149 3 view .LVU467
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1669              		.loc 1 148 30 is_stmt 0 view .LVU468
 1670 0000 10B5     		push	{r4, lr}
 1671              		.cfi_def_cfa_offset 8
 1672              		.cfi_offset 4, -8
 1673              		.cfi_offset 14, -4
 1674 0002 E4B0     		sub	sp, sp, #400
 1675              		.cfi_def_cfa_offset 408
 149:src/menu.c    **** }
 1676              		.loc 1 149 3 view .LVU469
 1677 0004 30AC     		add	r4, sp, #192
 1678 0006 2046     		mov	r0, r4
 1679 0008 FFF7FEFF 		bl	get_current_menu_ref
 1680              	.LVL124:
 1681 000c 34A9     		add	r1, sp, #208
 1682 000e C022     		movs	r2, #192
 1683 0010 6846     		mov	r0, sp
 1684 0012 FFF7FEFF 		bl	memcpy
 1685              	.LVL125:
 1686 0016 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1687 001a FFF7FEFF 		bl	display_menu
 1688              	.LVL126:
 150:src/menu.c    **** 
 1689              		.loc 1 150 1 view .LVU470
 1690 001e 64B0     		add	sp, sp, #400
 1691              		.cfi_def_cfa_offset 8
 1692              		@ sp needed
 1693 0020 10BD     		pop	{r4, pc}
 1694              		.cfi_endproc
 1695              	.LFE11:
 1697 0022 00BF     		.section	.text.all_menu_dots,"ax",%progbits
 1698              		.align	1
 1699              		.p2align 2,,3
 1700              		.global	all_menu_dots
 1701              		.syntax unified
 1702              		.thumb
 1703              		.thumb_func
 1704              		.fpu fpv4-sp-d16
 1706              	all_menu_dots:
 1707              	.LFB17:
 624:src/menu.c    **** 
ARM GAS  /tmp/ccTMmuhz.s 			page 48


 625:src/menu.c    **** void all_menu_dots () {
 1708              		.loc 1 625 23 is_stmt 1 view -0
 1709              		.cfi_startproc
 1710              		@ args = 0, pretend = 0, frame = 0
 1711              		@ frame_needed = 0, uses_anonymous_args = 0
 626:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1712              		.loc 1 626 3 view .LVU472
 1713              	.LBB101:
 1714              		.loc 1 626 8 view .LVU473
 1715              	.LVL127:
 1716              		.loc 1 626 21 view .LVU474
 1717              	.LBE101:
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1718              		.loc 1 625 23 is_stmt 0 view .LVU475
 1719 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1720              		.cfi_def_cfa_offset 20
 1721              		.cfi_offset 4, -20
 1722              		.cfi_offset 5, -16
 1723              		.cfi_offset 6, -12
 1724              		.cfi_offset 7, -8
 1725              		.cfi_offset 14, -4
 1726              	.LBB105:
 1727              	.LBB102:
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 628:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1728              		.loc 1 628 2 view .LVU476
 1729 0002 0D4E     		ldr	r6, .L177
 1730              	.LBE102:
 1731              	.LBE105:
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1732              		.loc 1 625 23 view .LVU477
 1733 0004 83B0     		sub	sp, sp, #12
 1734              		.cfi_def_cfa_offset 32
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1735              		.loc 1 625 23 view .LVU478
 1736 0006 0025     		movs	r5, #0
 1737              	.LBB106:
 1738              	.LBB103:
 1739              		.loc 1 628 2 view .LVU479
 1740 0008 FF27     		movs	r7, #255
 1741              	.LVL128:
 1742              	.L172:
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1743              		.loc 1 627 23 is_stmt 1 view .LVU480
 1744              	.LBE103:
 1745              	.LBE106:
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1746              		.loc 1 625 23 is_stmt 0 view .LVU481
 1747 000a E924     		movs	r4, #233
 1748              	.LVL129:
 1749              	.L173:
 1750              	.LBB107:
 1751              	.LBB104:
 1752              		.loc 1 628 2 is_stmt 1 discriminator 3 view .LVU482
 1753 000c 0323     		movs	r3, #3
 1754 000e 1A46     		mov	r2, r3
 1755 0010 2146     		mov	r1, r4
ARM GAS  /tmp/ccTMmuhz.s 			page 49


 1756 0012 2846     		mov	r0, r5
 1757 0014 0097     		str	r7, [sp]
 1758 0016 B047     		blx	r6
 1759              	.LVL130:
 629:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1760              		.loc 1 629 2 discriminator 3 view .LVU483
 1761 0018 0323     		movs	r3, #3
 1762 001a A4F11901 		sub	r1, r4, #25
 1763 001e 0097     		str	r7, [sp]
 1764 0020 1A46     		mov	r2, r3
 1765 0022 2846     		mov	r0, r5
 1766 0024 033C     		subs	r4, r4, #3
 1767 0026 B047     		blx	r6
 1768              	.LVL131:
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1769              		.loc 1 627 32 discriminator 3 view .LVU484
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1770              		.loc 1 627 23 discriminator 3 view .LVU485
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1771              		.loc 1 627 5 is_stmt 0 discriminator 3 view .LVU486
 1772 0028 D72C     		cmp	r4, #215
 1773 002a EFD1     		bne	.L173
 1774              	.LBE104:
 626:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1775              		.loc 1 626 32 is_stmt 1 discriminator 2 view .LVU487
 626:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1776              		.loc 1 626 21 discriminator 2 view .LVU488
 1777 002c 0235     		adds	r5, r5, #2
 626:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1778              		.loc 1 626 3 is_stmt 0 discriminator 2 view .LVU489
 1779 002e B5F5C87F 		cmp	r5, #400
 1780 0032 EAD1     		bne	.L172
 1781              	.LBE107:
 630:src/menu.c    ****     }
 631:src/menu.c    ****   }
 632:src/menu.c    **** }  
 1782              		.loc 1 632 1 view .LVU490
 1783 0034 03B0     		add	sp, sp, #12
 1784              		.cfi_def_cfa_offset 20
 1785              		@ sp needed
 1786 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1787              	.L178:
 1788              		.align	2
 1789              	.L177:
 1790 0038 3D020008 		.word	134218301
 1791              		.cfi_endproc
 1792              	.LFE17:
 1794              		.section	.text.umen_store,"ax",%progbits
 1795              		.align	1
 1796              		.p2align 2,,3
 1797              		.global	umen_store
 1798              		.syntax unified
 1799              		.thumb
 1800              		.thumb_func
 1801              		.fpu fpv4-sp-d16
 1803              	umen_store:
 1804              	.LVL132:
ARM GAS  /tmp/ccTMmuhz.s 			page 50


 1805              	.LFB19:
 633:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1);
 634:src/menu.c    **** 
 635:src/menu.c    **** void build_user_menu(void)
 636:src/menu.c    **** {
 637:src/menu.c    ****   // find the label 'MNU'
 638:src/menu.c    ****   const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 639:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 640:src/menu.c    ****   int i=0;
 641:src/menu.c    ****   s_opcode op;
 642:src/menu.c    ****   opcode opc;
 643:src/menu.c    ****   char buf1[16];
 644:src/menu.c    ****   char *p = buf1;
 645:src/menu.c    ****   char c;
 646:src/menu.c    ****   int finished = 0;
 647:src/menu.c    **** 
 648:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 649:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 650:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 651:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 652:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 653:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 654:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 655:src/menu.c    ****   }
 656:src/menu.c    ****   while (pc && i < 12) {
 657:src/menu.c    **** 
 658:src/menu.c    ****     pc = do_inc(pc, 0);
 659:src/menu.c    ****     opc = getprog(pc);
 660:src/menu.c    ****     op = (s_opcode) opc;
 661:src/menu.c    **** 
 662:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 663:src/menu.c    ****       break;
 664:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 665:src/menu.c    ****       if (i==4) {
 666:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 667:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 668:src/menu.c    ****       }
 669:src/menu.c    ****       else if (i==5) {
 670:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 671:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 672:src/menu.c    ****       }
 673:src/menu.c    ****       i += 1;
 674:src/menu.c    ****       continue;
 675:src/menu.c    ****     }
 676:src/menu.c    **** 
 677:src/menu.c    ****     if (isDBL(opc) && (opDBL(opc) == DBL_ALPHA)) { // is it double alpha?
 678:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 679:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 680:src/menu.c    **** 	i++;
 681:src/menu.c    ****     	p = buf1;
 682:src/menu.c    **** 	finished = 0;
 683:src/menu.c    ****       } // ..and start reading the new alpha
 684:src/menu.c    ****       *p++ = opc & 0xff; // character 1
 685:src/menu.c    ****       c = (opc >> 16) & 0xff;
 686:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 687:src/menu.c    **** 	*p++ = c;
 688:src/menu.c    **** 	c = opc>>24;
ARM GAS  /tmp/ccTMmuhz.s 			page 51


 689:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 690:src/menu.c    **** 	  *p++ = c;
 691:src/menu.c    ****       }
 692:src/menu.c    ****       *p = '\0'; // no ++: next character can overwrite the 0.
 693:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 694:src/menu.c    **** 	finished = 1;
 695:src/menu.c    ****       }
 696:src/menu.c    ****     }
 697:src/menu.c    ****     else { // Not a DBL_ALPHA op - the usual case
 698:src/menu.c    ****       if ( p == buf1 ) { // no alpha label to use
 699:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 700:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 701:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 702:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 703:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 704:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 705:src/menu.c    **** 	  }
 706:src/menu.c    **** 	  else {
 707:src/menu.c    **** 	    prt_umen(opc, buf1); // display rarg with argument
 708:src/menu.c    **** 	  }
 709:src/menu.c    **** 	}
 710:src/menu.c    **** 	else {
 711:src/menu.c    **** 	  prt_umen(opc, buf1); // display non-rarg thing
 712:src/menu.c    **** 	}
 713:src/menu.c    ****       }
 714:src/menu.c    ****       else { // there is an alpha label to use, so reset
 715:src/menu.c    **** 	p = buf1;
 716:src/menu.c    **** 	finished = 0;
 717:src/menu.c    ****       }
 718:src/menu.c    ****       umen_store (i, opc, buf1);
 719:src/menu.c    ****       i++;
 720:src/menu.c    ****     }
 721:src/menu.c    ****   }
 722:src/menu.c    **** }
 723:src/menu.c    **** 
 724:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1) {
 1806              		.loc 1 724 49 is_stmt 1 view -0
 1807              		.cfi_startproc
 1808              		@ args = 0, pretend = 0, frame = 0
 1809              		@ frame_needed = 0, uses_anonymous_args = 0
 725:src/menu.c    **** #pragma GCC diagnostic push
 726:src/menu.c    **** #pragma GCC diagnostic ignored "-Wstringop-truncation"
 727:src/menu.c    ****     if (i<6) {
 1810              		.loc 1 727 5 view .LVU492
 1811              		.loc 1 727 8 is_stmt 0 view .LVU493
 1812 0000 0528     		cmp	r0, #5
 724:src/menu.c    **** #pragma GCC diagnostic push
 1813              		.loc 1 724 49 view .LVU494
 1814 0002 70B5     		push	{r4, r5, r6, lr}
 1815              		.cfi_def_cfa_offset 16
 1816              		.cfi_offset 4, -16
 1817              		.cfi_offset 5, -12
 1818              		.cfi_offset 6, -8
 1819              		.cfi_offset 14, -4
 724:src/menu.c    **** #pragma GCC diagnostic push
 1820              		.loc 1 724 49 view .LVU495
 1821 0004 0D46     		mov	r5, r1
ARM GAS  /tmp/ccTMmuhz.s 			page 52


 1822 0006 0446     		mov	r4, r0
 1823 0008 1146     		mov	r1, r2
 1824              	.LVL133:
 1825              		.loc 1 727 8 view .LVU496
 1826 000a 0FDC     		bgt	.L180
 1827              	.LBB113:
 728:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1828              		.loc 1 728 7 is_stmt 1 view .LVU497
 1829              		.loc 1 728 31 is_stmt 0 view .LVU498
 1830 000c 104E     		ldr	r6, .L183
 1831 000e 0130     		adds	r0, r0, #1
 1832              	.LVL134:
 729:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1833              		.loc 1 729 42 view .LVU499
 1834 0010 06EB4414 		add	r4, r6, r4, lsl #5
 1835              	.LVL135:
 728:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1836              		.loc 1 728 7 view .LVU500
 1837 0014 0722     		movs	r2, #7
 1838              	.LVL136:
 728:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1839              		.loc 1 728 7 view .LVU501
 1840 0016 06EB4010 		add	r0, r6, r0, lsl #5
 1841              	.LVL137:
 728:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1842              		.loc 1 728 7 view .LVU502
 1843 001a FFF7FEFF 		bl	strncpy
 1844              	.LVL138:
 1845              		.loc 1 729 7 is_stmt 1 view .LVU503
 1846              		.loc 1 729 42 is_stmt 0 view .LVU504
 1847 001e 0022     		movs	r2, #0
 730:src/menu.c    ****       UserMenu.keys[i].unshifted = (struct _ndmap) {K_OP, opc};
 1848              		.loc 1 730 34 view .LVU505
 1849 0020 3423     		movs	r3, #52
 729:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1850              		.loc 1 729 42 view .LVU506
 1851 0022 84F82720 		strb	r2, [r4, #39]
 1852              		.loc 1 730 7 is_stmt 1 view .LVU507
 1853              		.loc 1 730 34 is_stmt 0 view .LVU508
 1854 0026 2374     		strb	r3, [r4, #16]
 1855 0028 6561     		str	r5, [r4, #20]
 1856              	.LBE113:
 731:src/menu.c    ****     }
 732:src/menu.c    ****     else {
 733:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 734:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 735:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 736:src/menu.c    ****     }
 737:src/menu.c    **** #pragma GCC diagnostic pop
 738:src/menu.c    **** }  
 1857              		.loc 1 738 1 view .LVU509
 1858 002a 70BD     		pop	{r4, r5, r6, pc}
 1859              	.LVL139:
 1860              	.L180:
 1861              	.LBB114:
 1862              	.LBI114:
 724:src/menu.c    **** #pragma GCC diagnostic push
ARM GAS  /tmp/ccTMmuhz.s 			page 53


 1863              		.loc 1 724 6 is_stmt 1 view .LVU510
 1864              	.LBB115:
 1865              	.LBB116:
 733:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1866              		.loc 1 733 7 view .LVU511
 733:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1867              		.loc 1 733 30 is_stmt 0 view .LVU512
 1868 002c 841F     		subs	r4, r0, #6
 733:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1869              		.loc 1 733 33 view .LVU513
 1870 002e 084E     		ldr	r6, .L183
 1871 0030 6401     		lsls	r4, r4, #5
 1872 0032 04F12800 		add	r0, r4, #40
 1873              	.LVL140:
 733:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1874              		.loc 1 733 7 view .LVU514
 1875 0036 0722     		movs	r2, #7
 734:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1876              		.loc 1 734 42 view .LVU515
 1877 0038 3444     		add	r4, r4, r6
 733:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1878              		.loc 1 733 7 view .LVU516
 1879 003a 3044     		add	r0, r0, r6
 1880 003c FFF7FEFF 		bl	strncpy
 1881              	.LVL141:
 734:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1882              		.loc 1 734 7 is_stmt 1 view .LVU517
 734:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1883              		.loc 1 734 42 is_stmt 0 view .LVU518
 1884 0040 0022     		movs	r2, #0
 735:src/menu.c    ****     }
 1885              		.loc 1 735 34 view .LVU519
 1886 0042 3423     		movs	r3, #52
 734:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1887              		.loc 1 734 42 view .LVU520
 1888 0044 84F82F20 		strb	r2, [r4, #47]
 735:src/menu.c    ****     }
 1889              		.loc 1 735 7 is_stmt 1 view .LVU521
 1890              	.LVL142:
 735:src/menu.c    ****     }
 1891              		.loc 1 735 34 is_stmt 0 view .LVU522
 1892 0048 2376     		strb	r3, [r4, #24]
 1893 004a E561     		str	r5, [r4, #28]
 1894              	.LBE116:
 1895              	.LBE115:
 1896              	.LBE114:
 1897              		.loc 1 738 1 view .LVU523
 1898 004c 70BD     		pop	{r4, r5, r6, pc}
 1899              	.LVL143:
 1900              	.L184:
 1901              		.loc 1 738 1 view .LVU524
 1902 004e 00BF     		.align	2
 1903              	.L183:
 1904 0050 00000000 		.word	.LANCHOR4
 1905              		.cfi_endproc
 1906              	.LFE19:
 1908              		.section	.text.build_user_menu,"ax",%progbits
ARM GAS  /tmp/ccTMmuhz.s 			page 54


 1909              		.align	1
 1910              		.p2align 2,,3
 1911              		.global	build_user_menu
 1912              		.syntax unified
 1913              		.thumb
 1914              		.thumb_func
 1915              		.fpu fpv4-sp-d16
 1917              	build_user_menu:
 1918              	.LFB18:
 636:src/menu.c    ****   // find the label 'MNU'
 1919              		.loc 1 636 1 is_stmt 1 view -0
 1920              		.cfi_startproc
 1921              		@ args = 0, pretend = 0, frame = 16
 1922              		@ frame_needed = 0, uses_anonymous_args = 0
 638:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 1923              		.loc 1 638 3 view .LVU526
 1924              	.LVL144:
 639:src/menu.c    ****   int i=0;
 1925              		.loc 1 639 3 view .LVU527
 636:src/menu.c    ****   // find the label 'MNU'
 1926              		.loc 1 636 1 is_stmt 0 view .LVU528
 1927 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1928              		.cfi_def_cfa_offset 36
 1929              		.cfi_offset 4, -36
 1930              		.cfi_offset 5, -32
 1931              		.cfi_offset 6, -28
 1932              		.cfi_offset 7, -24
 1933              		.cfi_offset 8, -20
 1934              		.cfi_offset 9, -16
 1935              		.cfi_offset 10, -12
 1936              		.cfi_offset 11, -8
 1937              		.cfi_offset 14, -4
 639:src/menu.c    ****   int i=0;
 1938              		.loc 1 639 21 view .LVU529
 1939 0004 0021     		movs	r1, #0
 1940 0006 5E48     		ldr	r0, .L236
 636:src/menu.c    ****   // find the label 'MNU'
 1941              		.loc 1 636 1 view .LVU530
 1942 0008 85B0     		sub	sp, sp, #20
 1943              		.cfi_def_cfa_offset 56
 639:src/menu.c    ****   int i=0;
 1944              		.loc 1 639 21 view .LVU531
 1945 000a FFF7FEFF 		bl	findmultilbl
 1946              	.LVL145:
 1947 000e 5D4B     		ldr	r3, .L236+4
 1948 0010 0546     		mov	r5, r0
 1949              	.LVL146:
 640:src/menu.c    ****   s_opcode op;
 1950              		.loc 1 640 3 is_stmt 1 view .LVU532
 641:src/menu.c    ****   opcode opc;
 1951              		.loc 1 641 3 view .LVU533
 642:src/menu.c    ****   char buf1[16];
 1952              		.loc 1 642 3 view .LVU534
 643:src/menu.c    ****   char *p = buf1;
 1953              		.loc 1 643 3 view .LVU535
 644:src/menu.c    ****   char c;
 1954              		.loc 1 644 3 view .LVU536
ARM GAS  /tmp/ccTMmuhz.s 			page 55


 645:src/menu.c    ****   int finished = 0;
 1955              		.loc 1 645 3 view .LVU537
 646:src/menu.c    **** 
 1956              		.loc 1 646 3 view .LVU538
 648:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1957              		.loc 1 648 3 view .LVU539
 1958              	.LBB117:
 648:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1959              		.loc 1 648 8 view .LVU540
 648:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1960              		.loc 1 648 19 view .LVU541
 649:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1961              		.loc 1 649 43 is_stmt 0 view .LVU542
 1962 0012 0022     		movs	r2, #0
 1963 0014 03F1C000 		add	r0, r3, #192
 1964              	.LVL147:
 651:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1965              		.loc 1 651 42 view .LVU543
 1966 0018 2E21     		movs	r1, #46
 1967              	.LVL148:
 1968              	.L186:
 649:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1969              		.loc 1 649 7 is_stmt 1 discriminator 3 view .LVU544
 649:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1970              		.loc 1 649 43 is_stmt 0 discriminator 3 view .LVU545
 1971 001a 83F82020 		strb	r2, [r3, #32]
 650:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1972              		.loc 1 650 7 is_stmt 1 discriminator 3 view .LVU546
 650:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1973              		.loc 1 650 40 is_stmt 0 discriminator 3 view .LVU547
 1974 001e 5A61     		str	r2, [r3, #20]
 651:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1975              		.loc 1 651 7 is_stmt 1 discriminator 3 view .LVU548
 651:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1976              		.loc 1 651 42 is_stmt 0 discriminator 3 view .LVU549
 1977 0020 1974     		strb	r1, [r3, #16]
 652:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1978              		.loc 1 652 7 is_stmt 1 discriminator 3 view .LVU550
 652:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1979              		.loc 1 652 41 is_stmt 0 discriminator 3 view .LVU551
 1980 0022 83F82820 		strb	r2, [r3, #40]
 653:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1981              		.loc 1 653 7 is_stmt 1 discriminator 3 view .LVU552
 653:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1982              		.loc 1 653 38 is_stmt 0 discriminator 3 view .LVU553
 1983 0026 DA61     		str	r2, [r3, #28]
 654:src/menu.c    ****   }
 1984              		.loc 1 654 7 is_stmt 1 discriminator 3 view .LVU554
 654:src/menu.c    ****   }
 1985              		.loc 1 654 40 is_stmt 0 discriminator 3 view .LVU555
 1986 0028 1976     		strb	r1, [r3, #24]
 648:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1987              		.loc 1 648 24 is_stmt 1 discriminator 3 view .LVU556
 648:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1988              		.loc 1 648 19 discriminator 3 view .LVU557
 1989 002a 2033     		adds	r3, r3, #32
 648:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
ARM GAS  /tmp/ccTMmuhz.s 			page 56


 1990              		.loc 1 648 3 is_stmt 0 discriminator 3 view .LVU558
 1991 002c 8342     		cmp	r3, r0
 1992 002e F4D1     		bne	.L186
 648:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1993              		.loc 1 648 3 discriminator 3 view .LVU559
 1994              	.LBE117:
 656:src/menu.c    **** 
 1995              		.loc 1 656 9 is_stmt 1 view .LVU560
 1996 0030 65B3     		cbz	r5, .L185
 1997              	.LBB118:
 670:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1998              		.loc 1 670 29 is_stmt 0 view .LVU561
 1999 0032 DFF86C91 		ldr	r9, .L236+32
 2000              	.LBE118:
 646:src/menu.c    **** 
 2001              		.loc 1 646 7 view .LVU562
 2002 0036 4FF00008 		mov	r8, #0
 644:src/menu.c    ****   char c;
 2003              		.loc 1 644 9 view .LVU563
 2004 003a 6E46     		mov	r6, sp
 2005              	.LBB119:
 667:src/menu.c    ****       }
 2006              		.loc 1 667 2 view .LVU564
 2007 003c A9F1100A 		sub	r10, r9, #16
 2008              	.LBE119:
 640:src/menu.c    ****   s_opcode op;
 2009              		.loc 1 640 7 view .LVU565
 2010 0040 C346     		mov	fp, r8
 644:src/menu.c    ****   char c;
 2011              		.loc 1 644 9 view .LVU566
 2012 0042 3746     		mov	r7, r6
 2013              	.LVL149:
 2014              	.L187:
 658:src/menu.c    ****     opc = getprog(pc);
 2015              		.loc 1 658 5 is_stmt 1 view .LVU567
 658:src/menu.c    ****     opc = getprog(pc);
 2016              		.loc 1 658 10 is_stmt 0 view .LVU568
 2017 0044 2846     		mov	r0, r5
 2018 0046 0021     		movs	r1, #0
 2019 0048 FFF7FEFF 		bl	do_inc
 2020              	.LVL150:
 2021 004c 0546     		mov	r5, r0
 2022              	.LVL151:
 659:src/menu.c    ****     op = (s_opcode) opc;
 2023              		.loc 1 659 5 is_stmt 1 view .LVU569
 659:src/menu.c    ****     op = (s_opcode) opc;
 2024              		.loc 1 659 11 is_stmt 0 view .LVU570
 2025 004e FFF7FEFF 		bl	getprog
 2026              	.LVL152:
 660:src/menu.c    **** 
 2027              		.loc 1 660 8 view .LVU571
 2028 0052 83B2     		uxth	r3, r0
 662:src/menu.c    ****       break;
 2029              		.loc 1 662 8 view .LVU572
 2030 0054 B3F59D7F 		cmp	r3, #314
 659:src/menu.c    ****     op = (s_opcode) opc;
 2031              		.loc 1 659 11 view .LVU573
ARM GAS  /tmp/ccTMmuhz.s 			page 57


 2032 0058 0446     		mov	r4, r0
 2033              	.LVL153:
 660:src/menu.c    **** 
 2034              		.loc 1 660 5 is_stmt 1 view .LVU574
 662:src/menu.c    ****       break;
 2035              		.loc 1 662 5 view .LVU575
 662:src/menu.c    ****       break;
 2036              		.loc 1 662 8 is_stmt 0 view .LVU576
 2037 005a 17D0     		beq	.L185
 664:src/menu.c    ****       if (i==4) {
 2038              		.loc 1 664 5 is_stmt 1 view .LVU577
 664:src/menu.c    ****       if (i==4) {
 2039              		.loc 1 664 8 is_stmt 0 view .LVU578
 2040 005c B3F5807F 		cmp	r3, #256
 2041 0060 43D0     		beq	.L228
 677:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2042              		.loc 1 677 5 is_stmt 1 view .LVU579
 677:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2043              		.loc 1 677 9 is_stmt 0 view .LVU580
 2044 0062 00F47042 		and	r2, r0, #61440
 677:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2045              		.loc 1 677 8 view .LVU581
 2046 0066 B2F5704F 		cmp	r2, #61440
 2047 006a 12D0     		beq	.L229
 2048              	.L193:
 698:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2049              		.loc 1 698 7 is_stmt 1 view .LVU582
 698:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2050              		.loc 1 698 10 is_stmt 0 view .LVU583
 2051 006c B742     		cmp	r7, r6
 2052 006e 26D0     		beq	.L230
 716:src/menu.c    ****       }
 2053              		.loc 1 716 11 view .LVU584
 2054 0070 4FF00008 		mov	r8, #0
 2055              	.LVL154:
 2056              	.L199:
 718:src/menu.c    ****       i++;
 2057              		.loc 1 718 7 is_stmt 1 view .LVU585
 2058 0074 5846     		mov	r0, fp
 2059 0076 2146     		mov	r1, r4
 2060 0078 3246     		mov	r2, r6
 2061 007a FFF7FEFF 		bl	umen_store
 2062              	.LVL155:
 719:src/menu.c    ****     }
 2063              		.loc 1 719 7 view .LVU586
 719:src/menu.c    ****     }
 2064              		.loc 1 719 8 is_stmt 0 view .LVU587
 2065 007e 0BF1010B 		add	fp, fp, #1
 2066              	.LVL156:
 719:src/menu.c    ****     }
 2067              		.loc 1 719 8 view .LVU588
 2068 0082 3746     		mov	r7, r6
 2069              	.LVL157:
 2070              	.L192:
 656:src/menu.c    **** 
 2071              		.loc 1 656 9 is_stmt 1 view .LVU589
 2072 0084 15B1     		cbz	r5, .L185
ARM GAS  /tmp/ccTMmuhz.s 			page 58


 656:src/menu.c    **** 
 2073              		.loc 1 656 13 is_stmt 0 discriminator 1 view .LVU590
 2074 0086 BBF10C0F 		cmp	fp, #12
 2075 008a DBD1     		bne	.L187
 2076              	.LVL158:
 2077              	.L185:
 722:src/menu.c    **** 
 2078              		.loc 1 722 1 view .LVU591
 2079 008c 05B0     		add	sp, sp, #20
 2080              		.cfi_remember_state
 2081              		.cfi_def_cfa_offset 36
 2082              		@ sp needed
 2083 008e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2084              	.LVL159:
 2085              	.L229:
 2086              		.cfi_restore_state
 677:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2087              		.loc 1 677 24 discriminator 1 view .LVU592
 2088 0092 C0F30321 		ubfx	r1, r0, #8, #4
 677:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2089              		.loc 1 677 20 discriminator 1 view .LVU593
 2090 0096 0A29     		cmp	r1, #10
 2091 0098 E8D1     		bne	.L193
 678:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2092              		.loc 1 678 7 is_stmt 1 view .LVU594
 678:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2093              		.loc 1 678 10 is_stmt 0 view .LVU595
 2094 009a B8F1000F 		cmp	r8, #0
 2095 009e 40D1     		bne	.L194
 678:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2096              		.loc 1 678 29 discriminator 1 view .LVU596
 2097 00a0 BB1B     		subs	r3, r7, r6
 2098              	.LVL160:
 678:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2099              		.loc 1 678 24 discriminator 1 view .LVU597
 2100 00a2 062B     		cmp	r3, #6
 2101 00a4 3DD0     		beq	.L194
 2102              	.LVL161:
 684:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2103              		.loc 1 684 7 is_stmt 1 view .LVU598
 686:src/menu.c    **** 	*p++ = c;
 2104              		.loc 1 686 10 is_stmt 0 view .LVU599
 2105 00a6 14F47F0F 		tst	r4, #16711680
 684:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2106              		.loc 1 684 12 view .LVU600
 2107 00aa 3C70     		strb	r4, [r7]
 685:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2108              		.loc 1 685 7 is_stmt 1 view .LVU601
 685:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2109              		.loc 1 685 9 is_stmt 0 view .LVU602
 2110 00ac C4F30743 		ubfx	r3, r4, #16, #8
 2111              	.LVL162:
 686:src/menu.c    **** 	*p++ = c;
 2112              		.loc 1 686 7 is_stmt 1 view .LVU603
 686:src/menu.c    **** 	*p++ = c;
 2113              		.loc 1 686 10 is_stmt 0 view .LVU604
 2114 00b0 24D1     		bne	.L231
ARM GAS  /tmp/ccTMmuhz.s 			page 59


 2115              	.LVL163:
 2116              	.L196:
 684:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2117              		.loc 1 684 9 view .LVU605
 2118 00b2 0137     		adds	r7, r7, #1
 2119              	.LVL164:
 2120              	.L198:
 692:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2121              		.loc 1 692 7 is_stmt 1 view .LVU606
 692:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2122              		.loc 1 692 10 is_stmt 0 view .LVU607
 2123 00b4 0023     		movs	r3, #0
 2124 00b6 3B70     		strb	r3, [r7]
 693:src/menu.c    **** 	finished = 1;
 2125              		.loc 1 693 7 is_stmt 1 view .LVU608
 694:src/menu.c    ****       }
 2126              		.loc 1 694 11 is_stmt 0 view .LVU609
 2127 00b8 4FF00108 		mov	r8, #1
 2128 00bc E2E7     		b	.L192
 2129              	.LVL165:
 2130              	.L230:
 699:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2131              		.loc 1 699 2 is_stmt 1 view .LVU610
 2132 00be A0B2     		uxth	r0, r4
 2133              	.LVL166:
 699:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2134              		.loc 1 699 5 is_stmt 0 view .LVU611
 2135 00c0 72B1     		cbz	r2, .L200
 699:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2136              		.loc 1 699 6 discriminator 1 view .LVU612
 2137 00c2 B2F5704F 		cmp	r2, #61440
 2138 00c6 0BD0     		beq	.L200
 2139              	.LBB120:
 700:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2140              		.loc 1 700 4 is_stmt 1 view .LVU613
 700:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2141              		.loc 1 700 26 is_stmt 0 view .LVU614
 2142 00c8 1B0A     		lsrs	r3, r3, #8
 2143              	.LVL167:
 700:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2144              		.loc 1 700 26 view .LVU615
 2145 00ca 203B     		subs	r3, r3, #32
 2146 00cc DBB2     		uxtb	r3, r3
 2147              	.LVL168:
 701:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2148              		.loc 1 701 4 is_stmt 1 view .LVU616
 701:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2149              		.loc 1 701 7 is_stmt 0 view .LVU617
 2150 00ce 242B     		cmp	r3, #36
 2151 00d0 06D0     		beq	.L200
 701:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2152              		.loc 1 701 28 discriminator 1 view .LVU618
 2153 00d2 6C2B     		cmp	r3, #108
 2154 00d4 04D0     		beq	.L200
 702:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 2155              		.loc 1 702 9 view .LVU619
 2156 00d6 012B     		cmp	r3, #1
ARM GAS  /tmp/ccTMmuhz.s 			page 60


 2157 00d8 02D9     		bls	.L200
 703:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2158              		.loc 1 703 9 view .LVU620
 2159 00da 10F0FF0F 		tst	r0, #255
 2160 00de 4BD0     		beq	.L232
 2161              	.LVL169:
 2162              	.L200:
 703:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2163              		.loc 1 703 9 view .LVU621
 2164              	.LBE120:
 711:src/menu.c    **** 	}
 2165              		.loc 1 711 4 is_stmt 1 view .LVU622
 2166 00e0 3146     		mov	r1, r6
 2167 00e2 2046     		mov	r0, r4
 2168 00e4 FFF7FEFF 		bl	prt_umen
 2169              	.LVL170:
 2170 00e8 C4E7     		b	.L199
 2171              	.LVL171:
 2172              	.L228:
 665:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2173              		.loc 1 665 7 view .LVU623
 665:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2174              		.loc 1 665 10 is_stmt 0 view .LVU624
 2175 00ea BBF1040F 		cmp	fp, #4
 2176 00ee 28D0     		beq	.L233
 669:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2177              		.loc 1 669 12 is_stmt 1 view .LVU625
 669:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2178              		.loc 1 669 15 is_stmt 0 view .LVU626
 2179 00f0 BBF1050F 		cmp	fp, #5
 2180 00f4 32D0     		beq	.L234
 2181              	.LVL172:
 2182              	.L191:
 673:src/menu.c    ****       continue;
 2183              		.loc 1 673 7 is_stmt 1 view .LVU627
 673:src/menu.c    ****       continue;
 2184              		.loc 1 673 9 is_stmt 0 view .LVU628
 2185 00f6 0BF1010B 		add	fp, fp, #1
 2186              	.LVL173:
 674:src/menu.c    ****     }
 2187              		.loc 1 674 7 is_stmt 1 view .LVU629
 2188 00fa C3E7     		b	.L192
 2189              	.LVL174:
 2190              	.L231:
 687:src/menu.c    **** 	c = opc>>24;
 2191              		.loc 1 687 2 view .LVU630
 687:src/menu.c    **** 	c = opc>>24;
 2192              		.loc 1 687 7 is_stmt 0 view .LVU631
 2193 00fc 7B70     		strb	r3, [r7, #1]
 688:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2194              		.loc 1 688 2 is_stmt 1 view .LVU632
 689:src/menu.c    **** 	  *p++ = c;
 2195              		.loc 1 689 5 is_stmt 0 view .LVU633
 2196 00fe 230E     		lsrs	r3, r4, #24
 2197              	.LVL175:
 688:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2198              		.loc 1 688 4 view .LVU634
ARM GAS  /tmp/ccTMmuhz.s 			page 61


 2199 0100 4FEA1461 		lsr	r1, r4, #24
 2200              	.LVL176:
 689:src/menu.c    **** 	  *p++ = c;
 2201              		.loc 1 689 2 is_stmt 1 view .LVU635
 689:src/menu.c    **** 	  *p++ = c;
 2202              		.loc 1 689 5 is_stmt 0 view .LVU636
 2203 0104 36D0     		beq	.L235
 690:src/menu.c    ****       }
 2204              		.loc 1 690 4 is_stmt 1 view .LVU637
 690:src/menu.c    ****       }
 2205              		.loc 1 690 6 is_stmt 0 view .LVU638
 2206 0106 FB1C     		adds	r3, r7, #3
 2207              	.LVL177:
 693:src/menu.c    **** 	finished = 1;
 2208              		.loc 1 693 26 view .LVU639
 2209 0108 A3EB0608 		sub	r8, r3, r6
 693:src/menu.c    **** 	finished = 1;
 2210              		.loc 1 693 21 view .LVU640
 2211 010c A8F10608 		sub	r8, r8, #6
 692:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2212              		.loc 1 692 10 view .LVU641
 2213 0110 0022     		movs	r2, #0
 693:src/menu.c    **** 	finished = 1;
 2214              		.loc 1 693 21 view .LVU642
 2215 0112 B8FA88F8 		clz	r8, r8
 690:src/menu.c    ****       }
 2216              		.loc 1 690 9 view .LVU643
 2217 0116 B970     		strb	r1, [r7, #2]
 692:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2218              		.loc 1 692 7 is_stmt 1 view .LVU644
 692:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2219              		.loc 1 692 10 is_stmt 0 view .LVU645
 2220 0118 FA70     		strb	r2, [r7, #3]
 693:src/menu.c    **** 	finished = 1;
 2221              		.loc 1 693 7 is_stmt 1 view .LVU646
 693:src/menu.c    **** 	finished = 1;
 2222              		.loc 1 693 21 is_stmt 0 view .LVU647
 2223 011a 4FEA5818 		lsr	r8, r8, #5
 690:src/menu.c    ****       }
 2224              		.loc 1 690 6 view .LVU648
 2225 011e 1F46     		mov	r7, r3
 2226 0120 B0E7     		b	.L192
 2227              	.LVL178:
 2228              	.L194:
 679:src/menu.c    **** 	i++;
 2229              		.loc 1 679 2 is_stmt 1 view .LVU649
 2230 0122 5846     		mov	r0, fp
 2231              	.LVL179:
 679:src/menu.c    **** 	i++;
 2232              		.loc 1 679 2 is_stmt 0 view .LVU650
 2233 0124 3246     		mov	r2, r6
 2234 0126 4FF48071 		mov	r1, #256
 681:src/menu.c    **** 	finished = 0;
 2235              		.loc 1 681 8 view .LVU651
 2236 012a 3746     		mov	r7, r6
 2237              	.LVL180:
 679:src/menu.c    **** 	i++;
ARM GAS  /tmp/ccTMmuhz.s 			page 62


 2238              		.loc 1 679 2 view .LVU652
 2239 012c FFF7FEFF 		bl	umen_store
 2240              	.LVL181:
 680:src/menu.c    ****     	p = buf1;
 2241              		.loc 1 680 2 is_stmt 1 view .LVU653
 686:src/menu.c    **** 	*p++ = c;
 2242              		.loc 1 686 10 is_stmt 0 view .LVU654
 2243 0130 14F47F0F 		tst	r4, #16711680
 680:src/menu.c    ****     	p = buf1;
 2244              		.loc 1 680 3 view .LVU655
 2245 0134 0BF1010B 		add	fp, fp, #1
 2246              	.LVL182:
 681:src/menu.c    **** 	finished = 0;
 2247              		.loc 1 681 6 is_stmt 1 view .LVU656
 682:src/menu.c    ****       } // ..and start reading the new alpha
 2248              		.loc 1 682 2 view .LVU657
 684:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2249              		.loc 1 684 7 view .LVU658
 684:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2250              		.loc 1 684 12 is_stmt 0 view .LVU659
 2251 0138 3C70     		strb	r4, [r7]
 685:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2252              		.loc 1 685 7 is_stmt 1 view .LVU660
 685:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2253              		.loc 1 685 9 is_stmt 0 view .LVU661
 2254 013a C4F30743 		ubfx	r3, r4, #16, #8
 2255              	.LVL183:
 686:src/menu.c    **** 	*p++ = c;
 2256              		.loc 1 686 7 is_stmt 1 view .LVU662
 686:src/menu.c    **** 	*p++ = c;
 2257              		.loc 1 686 10 is_stmt 0 view .LVU663
 2258 013e B8D0     		beq	.L196
 2259              	.LVL184:
 686:src/menu.c    **** 	*p++ = c;
 2260              		.loc 1 686 10 view .LVU664
 2261 0140 DCE7     		b	.L231
 2262              	.LVL185:
 2263              	.L233:
 2264              	.LBB121:
 666:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2265              		.loc 1 666 2 is_stmt 1 view .LVU665
 666:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2266              		.loc 1 666 29 is_stmt 0 view .LVU666
 2267 0142 114B     		ldr	r3, .L236+8
 2268              	.LVL186:
 667:src/menu.c    ****       }
 2269              		.loc 1 667 2 view .LVU667
 2270 0144 114C     		ldr	r4, .L236+12
 666:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2271              		.loc 1 666 29 view .LVU668
 2272 0146 93E80300 		ldm	r3, {r0, r1}
 2273              	.LVL187:
 666:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2274              		.loc 1 666 29 view .LVU669
 2275 014a 114B     		ldr	r3, .L236+16
 667:src/menu.c    ****       }
 2276              		.loc 1 667 2 view .LVU670
ARM GAS  /tmp/ccTMmuhz.s 			page 63


 2277 014c 0522     		movs	r2, #5
 666:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2278              		.loc 1 666 29 view .LVU671
 2279 014e 83E80300 		stm	r3, {r0, r1}
 667:src/menu.c    ****       }
 2280              		.loc 1 667 2 is_stmt 1 view .LVU672
 2281 0152 2168     		ldr	r1, [r4]
 2282 0154 5046     		mov	r0, r10
 2283 0156 FFF7FEFF 		bl	strncpy
 2284              	.LVL188:
 2285              	.LBE121:
 2286 015a CCE7     		b	.L191
 2287              	.LVL189:
 2288              	.L234:
 2289              	.LBB122:
 670:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2290              		.loc 1 670 2 view .LVU673
 670:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2291              		.loc 1 670 29 is_stmt 0 view .LVU674
 2292 015c 0D4B     		ldr	r3, .L236+20
 2293              	.LVL190:
 670:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2294              		.loc 1 670 29 view .LVU675
 2295 015e 93E80300 		ldm	r3, {r0, r1}
 2296              	.LVL191:
 671:src/menu.c    ****       }
 2297              		.loc 1 671 2 view .LVU676
 2298 0162 0D4B     		ldr	r3, .L236+24
 670:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2299              		.loc 1 670 29 view .LVU677
 2300 0164 89E80300 		stm	r9, {r0, r1}
 671:src/menu.c    ****       }
 2301              		.loc 1 671 2 is_stmt 1 view .LVU678
 2302 0168 5A46     		mov	r2, fp
 2303 016a 1968     		ldr	r1, [r3]
 2304 016c 0B48     		ldr	r0, .L236+28
 2305 016e FFF7FEFF 		bl	strncpy
 2306              	.LVL192:
 2307 0172 C0E7     		b	.L191
 2308              	.LVL193:
 2309              	.L235:
 671:src/menu.c    ****       }
 2310              		.loc 1 671 2 is_stmt 0 view .LVU679
 2311              	.LBE122:
 687:src/menu.c    **** 	c = opc>>24;
 2312              		.loc 1 687 4 view .LVU680
 2313 0174 0237     		adds	r7, r7, #2
 2314              	.LVL194:
 687:src/menu.c    **** 	c = opc>>24;
 2315              		.loc 1 687 4 view .LVU681
 2316 0176 9DE7     		b	.L198
 2317              	.LVL195:
 2318              	.L232:
 2319              	.LBB123:
 704:src/menu.c    **** 	  }
 2320              		.loc 1 704 6 is_stmt 1 view .LVU682
 2321 0178 3146     		mov	r1, r6
ARM GAS  /tmp/ccTMmuhz.s 			page 64


 2322 017a FFF7FEFF 		bl	catcmd
 2323              	.LVL196:
 704:src/menu.c    **** 	  }
 2324              		.loc 1 704 6 is_stmt 0 view .LVU683
 2325 017e 79E7     		b	.L199
 2326              	.L237:
 2327              		.align	2
 2328              	.L236:
 2329 0180 4DF04E55 		.word	1431236685
 2330 0184 00000000 		.word	.LANCHOR4
 2331 0188 00000000 		.word	.LANCHOR5
 2332 018c 00000000 		.word	.LANCHOR6
 2333 0190 90000000 		.word	.LANCHOR4+144
 2334 0194 08000000 		.word	.LANCHOR5+8
 2335 0198 00000000 		.word	.LANCHOR7
 2336 019c C0000000 		.word	.LANCHOR4+192
 2337 01a0 B0000000 		.word	.LANCHOR4+176
 2338              	.LBE123:
 2339              		.cfi_endproc
 2340              	.LFE18:
 2342              		.section	.text.shutdown,"ax",%progbits
 2343              		.align	1
 2344              		.p2align 2,,3
 2345              		.global	shutdown
 2346              		.syntax unified
 2347              		.thumb
 2348              		.thumb_func
 2349              		.fpu fpv4-sp-d16
 2351              	shutdown:
 2352              	.LFB21:
 2353              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
ARM GAS  /tmp/ccTMmuhz.s 			page 65


  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #ifdef INCLUDE_STOPWATCH
  39:src/console.c **** #include "stopwatch.h"
  40:src/console.c **** #endif
  41:src/console.c **** #undef DM42SAFE
  42:src/console.c **** 
  43:src/console.c **** 
  44:src/console.c **** #ifdef DM42
  45:src/console.c **** 
  46:src/console.c **** #include <menu.c>
  47:src/console.c **** 
  48:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  49:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  50:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  51:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  52:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  53:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  54:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  55:src/console.c **** 
  56:src/console.c **** static struct _ndmap remap (const int c) {
  57:src/console.c **** 
  58:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  59:src/console.c **** 
  60:src/console.c **** #include "keytran.c"
  61:src/console.c **** 
  62:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  63:src/console.c **** 
  64:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  65:src/console.c **** 
  66:src/console.c ****   if (c == 44 ) {
  67:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  68:src/console.c ****     return sshot;
  69:src/console.c ****   }
  70:src/console.c ****   
  71:src/console.c ****   if (Running | Pause) {
  72:src/console.c ****     return mapping_running[c];
  73:src/console.c ****   }
  74:src/console.c **** 
  75:src/console.c ****   struct _menu Ref = get_current_menu_ref();
  76:src/console.c ****   
  77:src/console.c ****   switch (c) {
  78:src/console.c ****   case KEY_F1:
  79:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[0].unshifted;
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
  81:src/console.c ****   case KEY_F2:
  82:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[1].unshifted;
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
ARM GAS  /tmp/ccTMmuhz.s 			page 66


  84:src/console.c ****   case KEY_F3:
  85:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[2].unshifted;
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
  87:src/console.c ****   case KEY_F4:
  88:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[3].unshifted;
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
  90:src/console.c ****   case KEY_F5:
  91:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[4].unshifted;
  92:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
  93:src/console.c ****   case KEY_F6:
  94:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[5].unshifted;
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
  96:src/console.c ****   }
  97:src/console.c **** 
  98:src/console.c ****   if ( get_alpha_state() ) {
  99:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 100:src/console.c ****       switch (cur_shift()) { 
 101:src/console.c ****       case SHIFT_N:
 102:src/console.c **** 	return mapping_none[c]; // N -> F
 103:src/console.c **** 	break;
 104:src/console.c ****       case SHIFT_F:
 105:src/console.c **** 	return mapping_fshift[c]; // F -> G
 106:src/console.c **** 	break;
 107:src/console.c ****       case SHIFT_G:
 108:src/console.c **** 	return h_shift; // G -> H
 109:src/console.c **** 	break;
 110:src/console.c ****       case SHIFT_H:
 111:src/console.c **** 	return h_shift; // H -> N
 112:src/console.c ****       default:
 113:src/console.c **** 	return no_change;
 114:src/console.c ****       }
 115:src/console.c ****     }
 116:src/console.c ****     return mapping_alpha [c];
 117:src/console.c ****   }
 118:src/console.c **** 
 119:src/console.c ****   switch (cur_shift()) {
 120:src/console.c ****   case SHIFT_N:    
 121:src/console.c ****     return mapping_none[c];
 122:src/console.c ****     break;
 123:src/console.c ****   case SHIFT_F:
 124:src/console.c ****     return mapping_fshift[c];
 125:src/console.c ****     break;
 126:src/console.c ****   case SHIFT_G:
 127:src/console.c ****     return mapping_gshift[c];
 128:src/console.c ****     break;
 129:src/console.c ****   default:
 130:src/console.c ****     return no_change;
 131:src/console.c ****   }
 132:src/console.c **** }
 133:src/console.c **** 
 134:src/console.c **** #endif
 135:src/console.c **** 
 136:src/console.c **** void shutdown( void )
 137:src/console.c **** {
 2354              		.loc 2 137 1 is_stmt 1 view -0
 2355              		.cfi_startproc
 2356              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccTMmuhz.s 			page 67


 2357              		@ frame_needed = 0, uses_anonymous_args = 0
 2358              		@ link register save eliminated.
 138:src/console.c **** #ifndef DM42
 139:src/console.c ****   checksum_all();
 140:src/console.c ****   setuptty( 1 );
 141:src/console.c ****   save_statefile( NULL );
 142:src/console.c ****   exit( 0 );
 143:src/console.c **** #else
 144:src/console.c ****   //  save_ram_file(0);
 145:src/console.c ****   SET_ST(STAT_PGM_END);
 2359              		.loc 2 145 3 view .LVU685
 2360 0000 024A     		ldr	r2, .L239
 2361 0002 1368     		ldr	r3, [r2]
 2362 0004 43F40073 		orr	r3, r3, #512
 2363 0008 1360     		str	r3, [r2]
 146:src/console.c **** #endif
 147:src/console.c **** }
 2364              		.loc 2 147 1 is_stmt 0 view .LVU686
 2365 000a 7047     		bx	lr
 2366              	.L240:
 2367              		.align	2
 2368              	.L239:
 2369 000c 00200010 		.word	268443648
 2370              		.cfi_endproc
 2371              	.LFE21:
 2373              		.section	.text.is_key_pressed,"ax",%progbits
 2374              		.align	1
 2375              		.p2align 2,,3
 2376              		.global	is_key_pressed
 2377              		.syntax unified
 2378              		.thumb
 2379              		.thumb_func
 2380              		.fpu fpv4-sp-d16
 2382              	is_key_pressed:
 2383              	.LFB22:
 148:src/console.c **** 
 149:src/console.c **** 
 150:src/console.c **** /*
 151:src/console.c ****  *  Dummies
 152:src/console.c ****  */
 153:src/console.c **** int is_key_pressed(void) 
 154:src/console.c **** {
 2384              		.loc 2 154 1 is_stmt 1 view -0
 2385              		.cfi_startproc
 2386              		@ args = 0, pretend = 0, frame = 0
 2387              		@ frame_needed = 0, uses_anonymous_args = 0
 155:src/console.c **** #ifdef DM42
 156:src/console.c ****   return !key_empty();
 2388              		.loc 2 156 3 view .LVU688
 154:src/console.c **** #ifdef DM42
 2389              		.loc 2 154 1 is_stmt 0 view .LVU689
 2390 0000 08B5     		push	{r3, lr}
 2391              		.cfi_def_cfa_offset 8
 2392              		.cfi_offset 3, -8
 2393              		.cfi_offset 14, -4
 2394              		.loc 2 156 11 view .LVU690
 2395 0002 034B     		ldr	r3, .L243
ARM GAS  /tmp/ccTMmuhz.s 			page 68


 2396 0004 9847     		blx	r3
 2397              	.LVL197:
 157:src/console.c **** #else
 158:src/console.c ****   return 0;
 159:src/console.c **** #endif
 160:src/console.c **** }
 2398              		.loc 2 160 1 view .LVU691
 2399 0006 B0FA80F0 		clz	r0, r0
 2400 000a 4009     		lsrs	r0, r0, #5
 2401 000c 08BD     		pop	{r3, pc}
 2402              	.L244:
 2403 000e 00BF     		.align	2
 2404              	.L243:
 2405 0010 7D030008 		.word	134218621
 2406              		.cfi_endproc
 2407              	.LFE22:
 2409              		.section	.text.get_key,"ax",%progbits
 2410              		.align	1
 2411              		.p2align 2,,3
 2412              		.global	get_key
 2413              		.syntax unified
 2414              		.thumb
 2415              		.thumb_func
 2416              		.fpu fpv4-sp-d16
 2418              	get_key:
 2419              	.LFB23:
 161:src/console.c **** 
 162:src/console.c **** int get_key(void)
 163:src/console.c **** {
 2420              		.loc 2 163 1 is_stmt 1 view -0
 2421              		.cfi_startproc
 2422              		@ args = 0, pretend = 0, frame = 0
 2423              		@ frame_needed = 0, uses_anonymous_args = 0
 2424              		@ link register save eliminated.
 164:src/console.c ****   #ifdef DM42
 165:src/console.c ****   return key_pop();
 2425              		.loc 2 165 3 view .LVU693
 2426              		.loc 2 165 10 is_stmt 0 view .LVU694
 2427 0000 004B     		ldr	r3, .L246
 2428 0002 1847     		bx	r3
 2429              	.LVL198:
 2430              	.L247:
 2431              		.align	2
 2432              	.L246:
 2433 0004 89030008 		.word	134218633
 2434              		.cfi_endproc
 2435              	.LFE23:
 2437              		.section	.text.put_key,"ax",%progbits
 2438              		.align	1
 2439              		.p2align 2,,3
 2440              		.global	put_key
 2441              		.syntax unified
 2442              		.thumb
 2443              		.thumb_func
 2444              		.fpu fpv4-sp-d16
 2446              	put_key:
 2447              	.LVL199:
ARM GAS  /tmp/ccTMmuhz.s 			page 69


 2448              	.LFB24:
 166:src/console.c ****   #else
 167:src/console.c ****   return 0;
 168:src/console.c ****   #endif
 169:src/console.c **** }
 170:src/console.c **** 
 171:src/console.c **** /*
 172:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 173:src/console.c ****  * 
 174:src/console.c ****  */
 175:src/console.c **** int put_key( int k )
 176:src/console.c **** {
 2449              		.loc 2 176 1 is_stmt 1 view -0
 2450              		.cfi_startproc
 2451              		@ args = 0, pretend = 0, frame = 48
 2452              		@ frame_needed = 0, uses_anonymous_args = 0
 2453              		@ link register save eliminated.
 177:src/console.c ****   #ifdef DM42
 178:src/console.c ****   const char wp34s_to_DM42[] = {
 2454              		.loc 2 178 3 view .LVU696
 176:src/console.c ****   #ifdef DM42
 2455              		.loc 2 176 1 is_stmt 0 view .LVU697
 2456 0000 70B4     		push	{r4, r5, r6}
 2457              		.cfi_def_cfa_offset 12
 2458              		.cfi_offset 4, -12
 2459              		.cfi_offset 5, -8
 2460              		.cfi_offset 6, -4
 2461              		.loc 2 178 14 view .LVU698
 2462 0002 0E4D     		ldr	r5, .L251
 176:src/console.c ****   #ifdef DM42
 2463              		.loc 2 176 1 view .LVU699
 2464 0004 0646     		mov	r6, r0
 2465              		.loc 2 178 14 view .LVU700
 2466 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2467              	.LVL200:
 176:src/console.c ****   #ifdef DM42
 2468              		.loc 2 176 1 view .LVU701
 2469 0008 8DB0     		sub	sp, sp, #52
 2470              		.cfi_def_cfa_offset 64
 2471              		.loc 2 178 14 view .LVU702
 2472 000a 01AC     		add	r4, sp, #4
 2473 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2474 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2475 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2476 0012 95E80700 		ldm	r5, {r0, r1, r2}
 2477 0016 03C4     		stmia	r4!, {r0, r1}
 179:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 180:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 181:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 182:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 183:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 184:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 185:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 186:src/console.c ****   
 187:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 2478              		.loc 2 187 6 view .LVU703
 2479 0018 282E     		cmp	r6, #40
ARM GAS  /tmp/ccTMmuhz.s 			page 70


 178:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 2480              		.loc 2 178 14 view .LVU704
 2481 001a 2270     		strb	r2, [r4]
 2482              		.loc 2 187 3 is_stmt 1 view .LVU705
 2483              		.loc 2 187 6 is_stmt 0 view .LVU706
 2484 001c 08D8     		bhi	.L249
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2485              		.loc 2 188 5 is_stmt 1 view .LVU707
 2486              		.loc 2 188 36 is_stmt 0 view .LVU708
 2487 001e 0CAB     		add	r3, sp, #48
 2488 0020 3046     		mov	r0, r6
 2489 0022 1844     		add	r0, r0, r3
 2490              		.loc 2 188 12 view .LVU709
 2491 0024 064B     		ldr	r3, .L251+4
 2492 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 189:src/console.c ****   }
 190:src/console.c ****   else {
 191:src/console.c ****     return -1;
 192:src/console.c ****   }
 193:src/console.c ****   #else
 194:src/console.c ****   return k;
 195:src/console.c ****   #endif
 196:src/console.c **** }
 2493              		.loc 2 196 1 view .LVU710
 2494 002a 0DB0     		add	sp, sp, #52
 2495              		.cfi_remember_state
 2496              		.cfi_def_cfa_offset 12
 2497              		@ sp needed
 2498 002c 70BC     		pop	{r4, r5, r6}
 2499              		.cfi_restore 6
 2500              		.cfi_restore 5
 2501              		.cfi_restore 4
 2502              		.cfi_def_cfa_offset 0
 2503              	.LVL201:
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2504              		.loc 2 188 12 view .LVU711
 2505 002e 1847     		bx	r3
 2506              	.LVL202:
 2507              	.L249:
 2508              		.cfi_restore_state
 2509              		.loc 2 196 1 view .LVU712
 2510 0030 4FF0FF30 		mov	r0, #-1
 2511 0034 0DB0     		add	sp, sp, #52
 2512              		.cfi_def_cfa_offset 12
 2513              		@ sp needed
 2514 0036 70BC     		pop	{r4, r5, r6}
 2515              		.cfi_restore 6
 2516              		.cfi_restore 5
 2517              		.cfi_restore 4
 2518              		.cfi_def_cfa_offset 0
 2519              	.LVL203:
 2520              		.loc 2 196 1 view .LVU713
 2521 0038 7047     		bx	lr
 2522              	.L252:
 2523 003a 00BF     		.align	2
 2524              	.L251:
 2525 003c 10000000 		.word	.LANCHOR5+16
ARM GAS  /tmp/ccTMmuhz.s 			page 71


 2526 0040 81030008 		.word	134218625
 2527              		.cfi_endproc
 2528              	.LFE24:
 2530              		.section	.text.shift_down,"ax",%progbits
 2531              		.align	1
 2532              		.p2align 2,,3
 2533              		.global	shift_down
 2534              		.syntax unified
 2535              		.thumb
 2536              		.thumb_func
 2537              		.fpu fpv4-sp-d16
 2539              	shift_down:
 2540              	.LFB25:
 197:src/console.c **** 
 198:src/console.c **** enum shifts shift_down(void)
 199:src/console.c **** {
 2541              		.loc 2 199 1 is_stmt 1 view -0
 2542              		.cfi_startproc
 2543              		@ args = 0, pretend = 0, frame = 0
 2544              		@ frame_needed = 0, uses_anonymous_args = 0
 2545              		@ link register save eliminated.
 200:src/console.c **** 	return SHIFT_N;
 2546              		.loc 2 200 2 view .LVU715
 201:src/console.c **** }
 2547              		.loc 2 201 1 is_stmt 0 view .LVU716
 2548 0000 0020     		movs	r0, #0
 2549 0002 7047     		bx	lr
 2550              		.cfi_endproc
 2551              	.LFE25:
 2553              		.section	.text.start_key_timer,"ax",%progbits
 2554              		.align	1
 2555              		.p2align 2,,3
 2556              		.global	start_key_timer
 2557              		.syntax unified
 2558              		.thumb
 2559              		.thumb_func
 2560              		.fpu fpv4-sp-d16
 2562              	start_key_timer:
 2563              	.LFB26:
 202:src/console.c **** 
 203:src/console.c **** #ifndef DM42   // No serial operations for DM42
 204:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 205:src/console.c **** /*
 206:src/console.c ****  *  Open a COM port for transmission
 207:src/console.c ****  */
 208:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 209:src/console.c **** {
 210:src/console.c **** 	return 0;
 211:src/console.c **** }
 212:src/console.c **** 
 213:src/console.c **** 
 214:src/console.c **** /*
 215:src/console.c ****  *  Close the COM port after transmission is complete
 216:src/console.c ****  */
 217:src/console.c **** extern void close_port( void )
 218:src/console.c **** {
 219:src/console.c **** }
ARM GAS  /tmp/ccTMmuhz.s 			page 72


 220:src/console.c **** 
 221:src/console.c **** 
 222:src/console.c **** /*
 223:src/console.c ****  *  Output a single byte to the serial
 224:src/console.c ****  */
 225:src/console.c **** void put_byte( unsigned char byte )
 226:src/console.c **** {
 227:src/console.c **** 	report_err(ERR_PROG_BAD);
 228:src/console.c **** }
 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Force buffer flush
 233:src/console.c ****  */
 234:src/console.c **** void flush_comm( void )
 235:src/console.c **** {
 236:src/console.c **** }
 237:src/console.c **** 
 238:src/console.c **** #endif
 239:src/console.c **** #endif
 240:src/console.c **** 
 241:src/console.c **** 
 242:src/console.c **** /*
 243:src/console.c ****  *  Main loop
 244:src/console.c ****  */
 245:src/console.c **** #ifdef DM42
 246:src/console.c **** void start_key_timer (void);
 247:src/console.c **** long int keyticks (void);
 248:src/console.c **** void moveto (int line, int x);
 249:src/console.c **** 
 250:src/console.c **** static long int start_ticks;
 251:src/console.c **** 
 252:src/console.c **** void start_key_timer() {
 2564              		.loc 2 252 24 is_stmt 1 view -0
 2565              		.cfi_startproc
 2566              		@ args = 0, pretend = 0, frame = 0
 2567              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/console.c ****     start_ticks = get_rtc_ticks();
 2568              		.loc 2 253 5 view .LVU718
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 2569              		.loc 2 252 24 is_stmt 0 view .LVU719
 2570 0000 08B5     		push	{r3, lr}
 2571              		.cfi_def_cfa_offset 8
 2572              		.cfi_offset 3, -8
 2573              		.cfi_offset 14, -4
 2574              		.loc 2 253 19 view .LVU720
 2575 0002 024B     		ldr	r3, .L256
 2576 0004 9847     		blx	r3
 2577              	.LVL204:
 2578              		.loc 2 253 17 view .LVU721
 2579 0006 024B     		ldr	r3, .L256+4
 2580 0008 1860     		str	r0, [r3]
 254:src/console.c **** }
 2581              		.loc 2 254 1 view .LVU722
 2582 000a 08BD     		pop	{r3, pc}
 2583              	.L257:
 2584              		.align	2
ARM GAS  /tmp/ccTMmuhz.s 			page 73


 2585              	.L256:
 2586 000c B9040008 		.word	134218937
 2587 0010 00000000 		.word	.LANCHOR8
 2588              		.cfi_endproc
 2589              	.LFE26:
 2591              		.section	.text.keyticks,"ax",%progbits
 2592              		.align	1
 2593              		.p2align 2,,3
 2594              		.global	keyticks
 2595              		.syntax unified
 2596              		.thumb
 2597              		.thumb_func
 2598              		.fpu fpv4-sp-d16
 2600              	keyticks:
 2601              	.LFB27:
 255:src/console.c **** 
 256:src/console.c **** long int keyticks () {
 2602              		.loc 2 256 22 is_stmt 1 view -0
 2603              		.cfi_startproc
 2604              		@ args = 0, pretend = 0, frame = 0
 2605              		@ frame_needed = 0, uses_anonymous_args = 0
 257:src/console.c ****   long int i;
 2606              		.loc 2 257 3 view .LVU724
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2607              		.loc 2 258 3 view .LVU725
 256:src/console.c ****   long int i;
 2608              		.loc 2 256 22 is_stmt 0 view .LVU726
 2609 0000 08B5     		push	{r3, lr}
 2610              		.cfi_def_cfa_offset 8
 2611              		.cfi_offset 3, -8
 2612              		.cfi_offset 14, -4
 2613              		.loc 2 258 8 view .LVU727
 2614 0002 054B     		ldr	r3, .L260
 2615 0004 9847     		blx	r3
 2616              	.LVL205:
 259:src/console.c ****   return i >> 8;
 2617              		.loc 2 259 3 is_stmt 1 view .LVU728
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2618              		.loc 2 258 24 is_stmt 0 view .LVU729
 2619 0006 054B     		ldr	r3, .L260+4
 2620 0008 1B68     		ldr	r3, [r3]
 2621 000a C01A     		subs	r0, r0, r3
 2622              	.LVL206:
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2623              		.loc 2 258 38 view .LVU730
 2624 000c 00EB8000 		add	r0, r0, r0, lsl #2
 260:src/console.c **** }
 2625              		.loc 2 260 1 view .LVU731
 2626 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2627 0014 08BD     		pop	{r3, pc}
 2628              	.L261:
 2629 0016 00BF     		.align	2
 2630              	.L260:
 2631 0018 B9040008 		.word	134218937
 2632 001c 00000000 		.word	.LANCHOR8
 2633              		.cfi_endproc
 2634              	.LFE27:
ARM GAS  /tmp/ccTMmuhz.s 			page 74


 2636              		.section	.text.moveto,"ax",%progbits
 2637              		.align	1
 2638              		.p2align 2,,3
 2639              		.global	moveto
 2640              		.syntax unified
 2641              		.thumb
 2642              		.thumb_func
 2643              		.fpu fpv4-sp-d16
 2645              	moveto:
 2646              	.LVL207:
 2647              	.LFB28:
 261:src/console.c **** 
 262:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 263:src/console.c **** char print_string[22];
 264:src/console.c **** int n_p = 0;
 265:src/console.c **** 
 266:src/console.c **** 
 267:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2648              		.loc 2 267 30 is_stmt 1 view -0
 2649              		.cfi_startproc
 2650              		@ args = 0, pretend = 0, frame = 0
 2651              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2652              		.loc 2 268 3 view .LVU733
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2653              		.loc 2 267 30 is_stmt 0 view .LVU734
 2654 0000 70B5     		push	{r4, r5, r6, lr}
 2655              		.cfi_def_cfa_offset 16
 2656              		.cfi_offset 4, -16
 2657              		.cfi_offset 5, -12
 2658              		.cfi_offset 6, -8
 2659              		.cfi_offset 14, -4
 2660              		.loc 2 268 3 view .LVU735
 2661 0002 0A4D     		ldr	r5, .L264
 2662 0004 0A4B     		ldr	r3, .L264+4
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2663              		.loc 2 267 30 view .LVU736
 2664 0006 0246     		mov	r2, r0
 2665 0008 0C46     		mov	r4, r1
 2666              		.loc 2 268 3 view .LVU737
 2667 000a A86B     		ldr	r0, [r5, #56]
 2668              	.LVL208:
 2669              		.loc 2 268 3 view .LVU738
 2670 000c 511E     		subs	r1, r2, #1
 2671              	.LVL209:
 2672              		.loc 2 268 3 view .LVU739
 2673 000e 9847     		blx	r3
 2674              	.LVL210:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2675              		.loc 2 269 3 is_stmt 1 view .LVU740
 2676 0010 A86B     		ldr	r0, [r5, #56]
 2677 0012 084B     		ldr	r3, .L264+8
 2678              		.loc 2 269 33 is_stmt 0 view .LVU741
 2679 0014 0168     		ldr	r1, [r0]
 2680              		.loc 2 269 3 view .LVU742
 2681 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2682              		.loc 2 269 33 view .LVU743
ARM GAS  /tmp/ccTMmuhz.s 			page 75


 2683 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2684              		.loc 2 269 43 view .LVU744
 2685 001c 013C     		subs	r4, r4, #1
 2686              	.LVL211:
 2687              		.loc 2 269 40 view .LVU745
 2688 001e 04FB01F1 		mul	r1, r4, r1
 2689              		.loc 2 269 3 view .LVU746
 2690 0022 1431     		adds	r1, r1, #20
 270:src/console.c **** }
 2691              		.loc 2 270 1 view .LVU747
 2692 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2693              		.cfi_restore 14
 2694              		.cfi_restore 6
 2695              		.cfi_restore 5
 2696              		.cfi_restore 4
 2697              		.cfi_def_cfa_offset 0
 2698              	.LVL212:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2699              		.loc 2 269 3 view .LVU748
 2700 0028 1847     		bx	r3	@ indirect register sibling call
 2701              	.LVL213:
 2702              	.L265:
 2703 002a 00BF     		.align	2
 2704              	.L264:
 2705 002c 00200010 		.word	268443648
 2706 0030 69020008 		.word	134218345
 2707 0034 6D020008 		.word	134218349
 2708              		.cfi_endproc
 2709              	.LFE28:
 2711              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2712              		.align	2
 2713              	.LC11:
 2714 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2714      673A2025 
 2714      34692C25 
 2714      346900
 2715              		.section	.text.print_debug,"ax",%progbits
 2716              		.align	1
 2717              		.p2align 2,,3
 2718              		.global	print_debug
 2719              		.syntax unified
 2720              		.thumb
 2721              		.thumb_func
 2722              		.fpu fpv4-sp-d16
 2724              	print_debug:
 2725              	.LVL214:
 2726              	.LFB29:
 271:src/console.c **** 
 272:src/console.c **** void print_debug (int i, int j) {
 2727              		.loc 2 272 33 is_stmt 1 view -0
 2728              		.cfi_startproc
 2729              		@ args = 0, pretend = 0, frame = 8
 2730              		@ frame_needed = 0, uses_anonymous_args = 0
 273:src/console.c ****   strcpy( print_string, spaces );
 2731              		.loc 2 273 3 view .LVU750
 272:src/console.c ****   strcpy( print_string, spaces );
 2732              		.loc 2 272 33 is_stmt 0 view .LVU751
ARM GAS  /tmp/ccTMmuhz.s 			page 76


 2733 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2734              		.cfi_def_cfa_offset 24
 2735              		.cfi_offset 4, -24
 2736              		.cfi_offset 5, -20
 2737              		.cfi_offset 6, -16
 2738              		.cfi_offset 7, -12
 2739              		.cfi_offset 8, -8
 2740              		.cfi_offset 14, -4
 2741              		.loc 2 273 3 view .LVU752
 2742 0004 174C     		ldr	r4, .L268
 2743 0006 184F     		ldr	r7, .L268+4
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 275:src/console.c ****   moveto (3, 1);
 276:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2744              		.loc 2 276 3 view .LVU753
 2745 0008 184E     		ldr	r6, .L268+8
 2746 000a 194D     		ldr	r5, .L268+12
 277:src/console.c ****   lcd_refresh();
 2747              		.loc 2 277 3 view .LVU754
 2748 000c DFF86C80 		ldr	r8, .L268+24
 272:src/console.c ****   strcpy( print_string, spaces );
 2749              		.loc 2 272 33 view .LVU755
 2750 0010 82B0     		sub	sp, sp, #8
 2751              		.cfi_def_cfa_offset 32
 272:src/console.c ****   strcpy( print_string, spaces );
 2752              		.loc 2 272 33 view .LVU756
 2753 0012 0190     		str	r0, [sp, #4]
 2754 0014 0091     		str	r1, [sp]
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2755              		.loc 2 273 3 view .LVU757
 2756 0016 2046     		mov	r0, r4
 2757              	.LVL215:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2758              		.loc 2 273 3 view .LVU758
 2759 0018 3946     		mov	r1, r7
 2760              	.LVL216:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2761              		.loc 2 273 3 view .LVU759
 2762 001a FFF7FEFF 		bl	strcpy
 2763              	.LVL217:
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2764              		.loc 2 274 3 is_stmt 1 view .LVU760
 2765 001e DDE90032 		ldrd	r3, r2, [sp]
 2766 0022 1449     		ldr	r1, .L268+16
 2767 0024 2046     		mov	r0, r4
 2768 0026 FFF7FEFF 		bl	sprintf
 2769              	.LVL218:
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2770              		.loc 2 275 3 view .LVU761
 2771 002a 0121     		movs	r1, #1
 2772 002c 0320     		movs	r0, #3
 2773 002e FFF7FEFF 		bl	moveto
 2774              	.LVL219:
 276:src/console.c ****   lcd_refresh();
 2775              		.loc 2 276 3 view .LVU762
 2776 0032 2146     		mov	r1, r4
 2777 0034 B06B     		ldr	r0, [r6, #56]
ARM GAS  /tmp/ccTMmuhz.s 			page 77


 2778 0036 A847     		blx	r5
 2779              	.LVL220:
 2780              		.loc 2 277 3 view .LVU763
 2781 0038 C047     		blx	r8
 2782              	.LVL221:
 278:src/console.c ****   sys_delay (1000);
 2783              		.loc 2 278 3 view .LVU764
 2784 003a 0F4B     		ldr	r3, .L268+20
 2785 003c 4FF47A70 		mov	r0, #1000
 2786 0040 9847     		blx	r3
 2787              	.LVL222:
 279:src/console.c ****   /* wait_for_key_press(); */
 280:src/console.c ****   //  key_pop_all();
 281:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 282:src/console.c ****   // key_pop_all();
 283:src/console.c ****   strcpy( print_string, spaces );
 2788              		.loc 2 283 3 view .LVU765
 2789 0042 3946     		mov	r1, r7
 2790 0044 2046     		mov	r0, r4
 2791 0046 FFF7FEFF 		bl	strcpy
 2792              	.LVL223:
 284:src/console.c ****   moveto (3, 1);
 2793              		.loc 2 284 3 view .LVU766
 2794 004a 0121     		movs	r1, #1
 2795 004c 0320     		movs	r0, #3
 2796 004e FFF7FEFF 		bl	moveto
 2797              	.LVL224:
 285:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2798              		.loc 2 285 3 view .LVU767
 2799 0052 B06B     		ldr	r0, [r6, #56]
 2800 0054 2146     		mov	r1, r4
 2801 0056 A847     		blx	r5
 2802              	.LVL225:
 286:src/console.c ****   lcd_refresh();
 2803              		.loc 2 286 3 view .LVU768
 2804 0058 4346     		mov	r3, r8
 287:src/console.c ****   // while (key_empty()<=0);; // wait for release
 288:src/console.c ****   // key_pop_all();
 289:src/console.c **** }
 2805              		.loc 2 289 1 is_stmt 0 view .LVU769
 2806 005a 02B0     		add	sp, sp, #8
 2807              		.cfi_def_cfa_offset 24
 2808              	.LVL226:
 2809              		.loc 2 289 1 view .LVU770
 2810              		@ sp needed
 2811 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2812              		.cfi_restore 14
 2813              		.cfi_restore 8
 2814              		.cfi_restore 7
 2815              		.cfi_restore 6
 2816              		.cfi_restore 5
 2817              		.cfi_restore 4
 2818              		.cfi_def_cfa_offset 0
 2819              	.LVL227:
 286:src/console.c ****   lcd_refresh();
 2820              		.loc 2 286 3 view .LVU771
 2821 0060 1847     		bx	r3	@ indirect register sibling call
ARM GAS  /tmp/ccTMmuhz.s 			page 78


 2822              	.LVL228:
 2823              	.L269:
 2824 0062 00BF     		.align	2
 2825              	.L268:
 2826 0064 00000000 		.word	print_string
 2827 0068 00000000 		.word	.LANCHOR9
 2828 006c 00200010 		.word	268443648
 2829 0070 B1020008 		.word	134218417
 2830 0074 00000000 		.word	.LC11
 2831 0078 05040008 		.word	134218757
 2832 007c 31020008 		.word	134218289
 2833              		.cfi_endproc
 2834              	.LFE29:
 2836              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2837              		.align	2
 2838              	.LC12:
 2839 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2839      692C2531 
 2839      337300
 2840              		.section	.text.print_debug2,"ax",%progbits
 2841              		.align	1
 2842              		.p2align 2,,3
 2843              		.global	print_debug2
 2844              		.syntax unified
 2845              		.thumb
 2846              		.thumb_func
 2847              		.fpu fpv4-sp-d16
 2849              	print_debug2:
 2850              	.LVL229:
 2851              	.LFB30:
 290:src/console.c **** 
 291:src/console.c **** void print_debug2 (int i, char* j) {
 2852              		.loc 2 291 36 is_stmt 1 view -0
 2853              		.cfi_startproc
 2854              		@ args = 0, pretend = 0, frame = 8
 2855              		@ frame_needed = 0, uses_anonymous_args = 0
 292:src/console.c ****   strcpy( print_string, spaces );
 2856              		.loc 2 292 3 view .LVU773
 291:src/console.c ****   strcpy( print_string, spaces );
 2857              		.loc 2 291 36 is_stmt 0 view .LVU774
 2858 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2859              		.cfi_def_cfa_offset 24
 2860              		.cfi_offset 4, -24
 2861              		.cfi_offset 5, -20
 2862              		.cfi_offset 6, -16
 2863              		.cfi_offset 7, -12
 2864              		.cfi_offset 8, -8
 2865              		.cfi_offset 14, -4
 2866              		.loc 2 292 3 view .LVU775
 2867 0004 174C     		ldr	r4, .L272
 2868 0006 184F     		ldr	r7, .L272+4
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 294:src/console.c ****   moveto (3, 1);
 295:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2869              		.loc 2 295 3 view .LVU776
 2870 0008 184E     		ldr	r6, .L272+8
 2871 000a 194D     		ldr	r5, .L272+12
ARM GAS  /tmp/ccTMmuhz.s 			page 79


 296:src/console.c ****   lcd_refresh();
 2872              		.loc 2 296 3 view .LVU777
 2873 000c DFF86C80 		ldr	r8, .L272+24
 291:src/console.c ****   strcpy( print_string, spaces );
 2874              		.loc 2 291 36 view .LVU778
 2875 0010 82B0     		sub	sp, sp, #8
 2876              		.cfi_def_cfa_offset 32
 291:src/console.c ****   strcpy( print_string, spaces );
 2877              		.loc 2 291 36 view .LVU779
 2878 0012 0190     		str	r0, [sp, #4]
 2879 0014 0091     		str	r1, [sp]
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2880              		.loc 2 292 3 view .LVU780
 2881 0016 2046     		mov	r0, r4
 2882              	.LVL230:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2883              		.loc 2 292 3 view .LVU781
 2884 0018 3946     		mov	r1, r7
 2885              	.LVL231:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2886              		.loc 2 292 3 view .LVU782
 2887 001a FFF7FEFF 		bl	strcpy
 2888              	.LVL232:
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2889              		.loc 2 293 3 is_stmt 1 view .LVU783
 2890 001e DDE90032 		ldrd	r3, r2, [sp]
 2891 0022 1449     		ldr	r1, .L272+16
 2892 0024 2046     		mov	r0, r4
 2893 0026 FFF7FEFF 		bl	sprintf
 2894              	.LVL233:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2895              		.loc 2 294 3 view .LVU784
 2896 002a 0121     		movs	r1, #1
 2897 002c 0320     		movs	r0, #3
 2898 002e FFF7FEFF 		bl	moveto
 2899              	.LVL234:
 295:src/console.c ****   lcd_refresh();
 2900              		.loc 2 295 3 view .LVU785
 2901 0032 2146     		mov	r1, r4
 2902 0034 B06B     		ldr	r0, [r6, #56]
 2903 0036 A847     		blx	r5
 2904              	.LVL235:
 2905              		.loc 2 296 3 view .LVU786
 2906 0038 C047     		blx	r8
 2907              	.LVL236:
 297:src/console.c ****   sys_delay (2500);
 2908              		.loc 2 297 3 view .LVU787
 2909 003a 0F4B     		ldr	r3, .L272+20
 2910 003c 40F6C410 		movw	r0, #2500
 2911 0040 9847     		blx	r3
 2912              	.LVL237:
 298:src/console.c ****   /* wait_for_key_press(); */
 299:src/console.c ****   //  key_pop_all();
 300:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 301:src/console.c ****   // key_pop_all();
 302:src/console.c ****   strcpy( print_string, spaces );
 2913              		.loc 2 302 3 view .LVU788
ARM GAS  /tmp/ccTMmuhz.s 			page 80


 2914 0042 3946     		mov	r1, r7
 2915 0044 2046     		mov	r0, r4
 2916 0046 FFF7FEFF 		bl	strcpy
 2917              	.LVL238:
 303:src/console.c ****   moveto (3, 1);
 2918              		.loc 2 303 3 view .LVU789
 2919 004a 0121     		movs	r1, #1
 2920 004c 0320     		movs	r0, #3
 2921 004e FFF7FEFF 		bl	moveto
 2922              	.LVL239:
 304:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2923              		.loc 2 304 3 view .LVU790
 2924 0052 B06B     		ldr	r0, [r6, #56]
 2925 0054 2146     		mov	r1, r4
 2926 0056 A847     		blx	r5
 2927              	.LVL240:
 305:src/console.c ****   lcd_refresh();
 2928              		.loc 2 305 3 view .LVU791
 2929 0058 4346     		mov	r3, r8
 306:src/console.c ****   // while (key_empty()<=0);; // wait for release
 307:src/console.c ****   // key_pop_all();
 308:src/console.c **** }
 2930              		.loc 2 308 1 is_stmt 0 view .LVU792
 2931 005a 02B0     		add	sp, sp, #8
 2932              		.cfi_def_cfa_offset 24
 2933              	.LVL241:
 2934              		.loc 2 308 1 view .LVU793
 2935              		@ sp needed
 2936 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2937              		.cfi_restore 14
 2938              		.cfi_restore 8
 2939              		.cfi_restore 7
 2940              		.cfi_restore 6
 2941              		.cfi_restore 5
 2942              		.cfi_restore 4
 2943              		.cfi_def_cfa_offset 0
 2944              	.LVL242:
 305:src/console.c ****   lcd_refresh();
 2945              		.loc 2 305 3 view .LVU794
 2946 0060 1847     		bx	r3	@ indirect register sibling call
 2947              	.LVL243:
 2948              	.L273:
 2949 0062 00BF     		.align	2
 2950              	.L272:
 2951 0064 00000000 		.word	print_string
 2952 0068 00000000 		.word	.LANCHOR9
 2953 006c 00200010 		.word	268443648
 2954 0070 B1020008 		.word	134218417
 2955 0074 00000000 		.word	.LC12
 2956 0078 05040008 		.word	134218757
 2957 007c 31020008 		.word	134218289
 2958              		.cfi_endproc
 2959              	.LFE30:
 2961              		.section	.text.do_now,"ax",%progbits
 2962              		.align	1
 2963              		.p2align 2,,3
 2964              		.global	do_now
ARM GAS  /tmp/ccTMmuhz.s 			page 81


 2965              		.syntax unified
 2966              		.thumb
 2967              		.thumb_func
 2968              		.fpu fpv4-sp-d16
 2970              	do_now:
 2971              	.LVL244:
 2972              	.LFB31:
 309:src/console.c **** 
 310:src/console.c **** void do_now (int key, int shift) { // key and shift are like the output of remapped
 2973              		.loc 2 310 34 is_stmt 1 view -0
 2974              		.cfi_startproc
 2975              		@ args = 0, pretend = 0, frame = 8
 2976              		@ frame_needed = 0, uses_anonymous_args = 0
 2977              		@ link register save eliminated.
 311:src/console.c ****   struct _ndmap temp;
 2978              		.loc 2 311 3 view .LVU796
 312:src/console.c ****   temp.key_34s = key;
 2979              		.loc 2 312 3 view .LVU797
 310:src/console.c ****   struct _ndmap temp;
 2980              		.loc 2 310 34 is_stmt 0 view .LVU798
 2981 0000 82B0     		sub	sp, sp, #8
 2982              		.cfi_def_cfa_offset 8
 313:src/console.c ****   temp.shift = shift;
 314:src/console.c ****   process_keycode_with_shift (temp);
 2983              		.loc 2 314 3 view .LVU799
 2984 0002 02AB     		add	r3, sp, #8
 312:src/console.c ****   temp.shift = shift;
 2985              		.loc 2 312 16 view .LVU800
 2986 0004 8DF80000 		strb	r0, [sp]
 313:src/console.c ****   temp.shift = shift;
 2987              		.loc 2 313 3 is_stmt 1 view .LVU801
 313:src/console.c ****   temp.shift = shift;
 2988              		.loc 2 313 14 is_stmt 0 view .LVU802
 2989 0008 0191     		str	r1, [sp, #4]
 2990              		.loc 2 314 3 is_stmt 1 view .LVU803
 2991 000a 13E90300 		ldmdb	r3, {r0, r1}
 2992              	.LVL245:
 315:src/console.c **** }
 2993              		.loc 2 315 1 is_stmt 0 view .LVU804
 2994 000e 02B0     		add	sp, sp, #8
 2995              		.cfi_def_cfa_offset 0
 2996              		@ sp needed
 314:src/console.c **** }
 2997              		.loc 2 314 3 view .LVU805
 2998 0010 FFF7FEBF 		b	process_keycode_with_shift
 2999              	.LVL246:
 314:src/console.c **** }
 3000              		.loc 2 314 3 view .LVU806
 3001              		.cfi_endproc
 3002              	.LFE31:
 3004              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 3005              		.align	2
 3006              	.LC13:
 3007 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 3007      502F7770 
 3007      3334735F 
 3007      68656C70 
ARM GAS  /tmp/ccTMmuhz.s 			page 82


 3007      2E68746D 
 3008              		.section	.text.do_multi,"ax",%progbits
 3009              		.align	1
 3010              		.p2align 2,,3
 3011              		.global	do_multi
 3012              		.syntax unified
 3013              		.thumb
 3014              		.thumb_func
 3015              		.fpu fpv4-sp-d16
 3017              	do_multi:
 3018              	.LVL247:
 3019              	.LFB32:
 316:src/console.c **** 
 317:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 3020              		.loc 2 317 42 is_stmt 1 view -0
 3021              		.cfi_startproc
 3022              		@ args = 0, pretend = 0, frame = 16
 3023              		@ frame_needed = 0, uses_anonymous_args = 0
 3024              		.loc 2 317 42 is_stmt 0 view .LVU808
 3025 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3026              		.cfi_def_cfa_offset 24
 3027              		.cfi_offset 4, -24
 3028              		.cfi_offset 5, -20
 3029              		.cfi_offset 6, -16
 3030              		.cfi_offset 7, -12
 3031              		.cfi_offset 8, -8
 3032              		.cfi_offset 14, -4
 3033 0004 84B0     		sub	sp, sp, #16
 3034              		.cfi_def_cfa_offset 40
 3035              	.LVL248:
 318:src/console.c ****   switch(r.shift) {
 3036              		.loc 2 318 3 is_stmt 1 view .LVU809
 317:src/console.c ****   switch(r.shift) {
 3037              		.loc 2 317 42 is_stmt 0 view .LVU810
 3038 0006 6C46     		mov	r4, sp
 3039 0008 531E     		subs	r3, r2, #1
 3040 000a 84E80600 		stm	r4, {r1, r2}
 3041              	.LVL249:
 317:src/console.c ****   switch(r.shift) {
 3042              		.loc 2 317 42 view .LVU811
 3043 000e 0546     		mov	r5, r0
 3044 0010 0E2B     		cmp	r3, #14
 3045 0012 00F28A80 		bhi	.L277
 3046 0016 DFE803F0 		tbb	[pc, r3]
 3047              	.L279:
 3048 001a 21       		.byte	(.L293-.L279)/2
 3049 001b 49       		.byte	(.L292-.L279)/2
 3050 001c 55       		.byte	(.L291-.L279)/2
 3051 001d 59       		.byte	(.L290-.L279)/2
 3052 001e 5D       		.byte	(.L289-.L279)/2
 3053 001f 61       		.byte	(.L288-.L279)/2
 3054 0020 65       		.byte	(.L287-.L279)/2
 3055 0021 69       		.byte	(.L286-.L279)/2
 3056 0022 6C       		.byte	(.L285-.L279)/2
 3057 0023 70       		.byte	(.L284-.L279)/2
 3058 0024 73       		.byte	(.L283-.L279)/2
 3059 0025 76       		.byte	(.L282-.L279)/2
ARM GAS  /tmp/ccTMmuhz.s 			page 83


 3060 0026 8F       		.byte	(.L281-.L279)/2
 3061 0027 92       		.byte	(.L280-.L279)/2
 3062 0028 08       		.byte	(.L278-.L279)/2
 3063 0029 00       		.p2align 1
 3064              	.L278:
 319:src/console.c ****   case LASTX: // Last x via RCL L
 320:src/console.c ****     do_now (K11, 0); // RCL
 321:src/console.c ****     do_now (K_RELEASE,0); // release
 322:src/console.c ****     do_now (K15,0); // TAN key
 323:src/console.c ****     r.key_34s = K_RELEASE;
 324:src/console.c ****     r.shift = 0; // set up for release;
 325:src/console.c ****     break;
 326:src/console.c ****   case ONSTO: // flash_backup()
 327:src/console.c ****     flash_backup(OP_SAVE);
 328:src/console.c ****     reset_shift();
 329:src/console.c ****     r = no_key;
 330:src/console.c ****     break;
 331:src/console.c ****   case ONRCL: // flash_restore()
 332:src/console.c ****     flash_restore(OP_LOAD);
 333:src/console.c ****     reset_shift();
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
 336:src/console.c ****   case WRLIB: // save library file
 337:src/console.c ****     save_lib_file(1);
 338:src/console.c ****     reset_shift();
 339:src/console.c ****     r = no_key;
 340:src/console.c ****     break;
 341:src/console.c ****   case LLIB: // load library file
 342:src/console.c ****     load_lib_file(1);
 343:src/console.c ****     reset_shift();
 344:src/console.c ****     r = no_key;
 345:src/console.c ****     break;
 346:src/console.c ****   case WRTST: // save state file
 347:src/console.c ****     save_ram_file(1);
 348:src/console.c ****     reset_shift();
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case LDST:
 352:src/console.c ****     load_ram_file(1);
 353:src/console.c ****     reset_shift();
 354:src/console.c ****     r = no_key;
 355:src/console.c ****     break;
 356:src/console.c ****   case LDPRG:
 357:src/console.c ****     load_prog_file();
 358:src/console.c ****     reset_shift();
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case SVPRG:
 362:src/console.c ****     save_prog_file();
 363:src/console.c ****     reset_shift();
 364:src/console.c ****     r = no_key;
 365:src/console.c ****     break;
 366:src/console.c ****   case HELP:
 367:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 368:src/console.c ****     reset_shift();
 369:src/console.c ****     r = no_key;
 370:src/console.c ****     break;
ARM GAS  /tmp/ccTMmuhz.s 			page 84


 371:src/console.c ****   case DOTS:
 372:src/console.c ****     do_all_dots();
 373:src/console.c ****     reset_shift();
 374:src/console.c ****     r = no_key;
 375:src/console.c ****     break;
 376:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 377:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 378:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 379:src/console.c ****     r = no_key;
 380:src/console.c ****     break;
 381:src/console.c ****   case DEFMEN:
 382:src/console.c ****     toggle_default_menu();
 383:src/console.c ****     reset_shift();
 384:src/console.c ****     r = no_key;
 385:src/console.c ****     break;
 386:src/console.c ****   case SETUMEN:
 387:src/console.c ****     build_user_menu();
 388:src/console.c ****     reset_shift();
 389:src/console.c ****     r = no_key;;
 390:src/console.c ****     break;
 391:src/console.c ****   case KCPX:
 392:src/console.c ****     if (C_LOCKED) {
 3065              		.loc 2 392 5 is_stmt 1 view .LVU812
 3066              		.loc 2 392 9 is_stmt 0 view .LVU813
 3067 002a 4F4B     		ldr	r3, .L309
 3068 002c 1B68     		ldr	r3, [r3]
 3069 002e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 3070              		.loc 2 392 8 view .LVU814
 3071 0032 03F04103 		and	r3, r3, #65
 3072 0036 412B     		cmp	r3, #65
 3073 0038 40F08480 		bne	.L295
 393:src/console.c ****       set_menu(M_C_Lock);
 3074              		.loc 2 393 7 is_stmt 1 view .LVU815
 3075              	.LVL250:
 3076              	.LBB124:
 3077              	.LBI124:
 108:src/menu.c    ****   menu_name m = current_menu;
 3078              		.loc 1 108 6 view .LVU816
 3079              	.LBB125:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3080              		.loc 1 109 3 view .LVU817
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3081              		.loc 1 109 13 is_stmt 0 view .LVU818
 3082 003c 4B4A     		ldr	r2, .L309+4
 3083 003e 92F90030 		ldrsb	r3, [r2]
 3084              	.LVL251:
 110:src/menu.c    ****     current_menu = default_menu;
 3085              		.loc 1 110 3 is_stmt 1 view .LVU819
 110:src/menu.c    ****     current_menu = default_menu;
 3086              		.loc 1 110 6 is_stmt 0 view .LVU820
 3087 0042 112B     		cmp	r3, #17
 3088 0044 00F08A80 		beq	.L308
 113:src/menu.c    ****     current_menu = last_menu;
 3089              		.loc 1 113 8 is_stmt 1 view .LVU821
 117:src/menu.c    ****   }
 3090              		.loc 1 117 5 view .LVU822
 117:src/menu.c    ****   }
ARM GAS  /tmp/ccTMmuhz.s 			page 85


 3091              		.loc 1 117 18 is_stmt 0 view .LVU823
 3092 0048 1121     		movs	r1, #17
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3093              		.loc 1 119 6 view .LVU824
 3094 004a 092B     		cmp	r3, #9
 117:src/menu.c    ****   }
 3095              		.loc 1 117 18 view .LVU825
 3096 004c 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3097              		.loc 1 119 3 is_stmt 1 view .LVU826
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3098              		.loc 1 119 6 is_stmt 0 view .LVU827
 3099 004e 02D0     		beq	.L298
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3100              		.loc 1 119 23 view .LVU828
 3101 0050 102B     		cmp	r3, #16
 3102 0052 40F08680 		bne	.L297
 3103              	.L298:
 3104              	.LVL252:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3105              		.loc 1 119 23 view .LVU829
 3106              	.LBE125:
 3107              	.LBE124:
 394:src/console.c ****       reset_shift();
 3108              		.loc 2 394 7 is_stmt 1 view .LVU830
 3109 0056 FFF7FEFF 		bl	reset_shift
 3110              	.LVL253:
 3111              		.loc 2 394 7 is_stmt 0 view .LVU831
 3112 005a 66E0     		b	.L277
 3113              	.LVL254:
 3114              	.L293:
 320:src/console.c ****     do_now (K_RELEASE,0); // release
 3115              		.loc 2 320 5 is_stmt 1 view .LVU832
 3116              	.LBB127:
 3117              	.LBI127:
 310:src/console.c ****   struct _ndmap temp;
 3118              		.loc 2 310 6 view .LVU833
 3119              	.LBB128:
 311:src/console.c ****   temp.key_34s = key;
 3120              		.loc 2 311 3 view .LVU834
 312:src/console.c ****   temp.shift = shift;
 3121              		.loc 2 312 3 view .LVU835
 312:src/console.c ****   temp.shift = shift;
 3122              		.loc 2 312 16 is_stmt 0 view .LVU836
 3123 005c 0723     		movs	r3, #7
 313:src/console.c ****   process_keycode_with_shift (temp);
 3124              		.loc 2 313 14 view .LVU837
 3125 005e 0026     		movs	r6, #0
 312:src/console.c ****   temp.shift = shift;
 3126              		.loc 2 312 16 view .LVU838
 3127 0060 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3128              		.loc 2 313 3 is_stmt 1 view .LVU839
 314:src/console.c **** }
 3129              		.loc 2 314 3 is_stmt 0 view .LVU840
 3130 0064 0DF10808 		add	r8, sp, #8
 313:src/console.c ****   process_keycode_with_shift (temp);
ARM GAS  /tmp/ccTMmuhz.s 			page 86


 3131              		.loc 2 313 14 view .LVU841
 3132 0068 0396     		str	r6, [sp, #12]
 314:src/console.c **** }
 3133              		.loc 2 314 3 is_stmt 1 view .LVU842
 3134 006a 98E80300 		ldm	r8, {r0, r1}
 3135              	.LVL255:
 314:src/console.c **** }
 3136              		.loc 2 314 3 is_stmt 0 view .LVU843
 3137              	.LBE128:
 3138              	.LBE127:
 3139              	.LBB130:
 3140              	.LBB131:
 312:src/console.c ****   temp.shift = shift;
 3141              		.loc 2 312 16 view .LVU844
 3142 006e 6327     		movs	r7, #99
 3143              	.LBE131:
 3144              	.LBE130:
 3145              	.LBB133:
 3146              	.LBB129:
 314:src/console.c **** }
 3147              		.loc 2 314 3 view .LVU845
 3148 0070 FFF7FEFF 		bl	process_keycode_with_shift
 3149              	.LVL256:
 314:src/console.c **** }
 3150              		.loc 2 314 3 view .LVU846
 3151              	.LBE129:
 3152              	.LBE133:
 321:src/console.c ****     do_now (K15,0); // TAN key
 3153              		.loc 2 321 5 is_stmt 1 view .LVU847
 3154              	.LBB134:
 3155              	.LBI130:
 310:src/console.c ****   struct _ndmap temp;
 3156              		.loc 2 310 6 view .LVU848
 3157              	.LBB132:
 311:src/console.c ****   temp.key_34s = key;
 3158              		.loc 2 311 3 view .LVU849
 312:src/console.c ****   temp.shift = shift;
 3159              		.loc 2 312 3 view .LVU850
 313:src/console.c ****   process_keycode_with_shift (temp);
 3160              		.loc 2 313 14 is_stmt 0 view .LVU851
 3161 0074 0396     		str	r6, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 3162              		.loc 2 312 16 view .LVU852
 3163 0076 8DF80870 		strb	r7, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3164              		.loc 2 313 3 is_stmt 1 view .LVU853
 314:src/console.c **** }
 3165              		.loc 2 314 3 view .LVU854
 3166 007a 98E80300 		ldm	r8, {r0, r1}
 3167 007e FFF7FEFF 		bl	process_keycode_with_shift
 3168              	.LVL257:
 314:src/console.c **** }
 3169              		.loc 2 314 3 is_stmt 0 view .LVU855
 3170              	.LBE132:
 3171              	.LBE134:
 322:src/console.c ****     r.key_34s = K_RELEASE;
 3172              		.loc 2 322 5 is_stmt 1 view .LVU856
ARM GAS  /tmp/ccTMmuhz.s 			page 87


 3173              	.LBB135:
 3174              	.LBI135:
 310:src/console.c ****   struct _ndmap temp;
 3175              		.loc 2 310 6 view .LVU857
 3176              	.LBB136:
 311:src/console.c ****   temp.key_34s = key;
 3177              		.loc 2 311 3 view .LVU858
 312:src/console.c ****   temp.shift = shift;
 3178              		.loc 2 312 3 view .LVU859
 312:src/console.c ****   temp.shift = shift;
 3179              		.loc 2 312 16 is_stmt 0 view .LVU860
 3180 0082 0B23     		movs	r3, #11
 3181 0084 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3182              		.loc 2 313 3 is_stmt 1 view .LVU861
 314:src/console.c **** }
 3183              		.loc 2 314 3 view .LVU862
 313:src/console.c ****   process_keycode_with_shift (temp);
 3184              		.loc 2 313 14 is_stmt 0 view .LVU863
 3185 0088 0396     		str	r6, [sp, #12]
 314:src/console.c **** }
 3186              		.loc 2 314 3 view .LVU864
 3187 008a 98E80300 		ldm	r8, {r0, r1}
 3188 008e FFF7FEFF 		bl	process_keycode_with_shift
 3189              	.LVL258:
 314:src/console.c **** }
 3190              		.loc 2 314 3 view .LVU865
 3191              	.LBE136:
 3192              	.LBE135:
 323:src/console.c ****     r.shift = 0; // set up for release;
 3193              		.loc 2 323 5 is_stmt 1 view .LVU866
 324:src/console.c ****     break;
 3194              		.loc 2 324 5 view .LVU867
 325:src/console.c ****   case ONSTO: // flash_backup()
 3195              		.loc 2 325 5 view .LVU868
 324:src/console.c ****     break;
 3196              		.loc 2 324 13 is_stmt 0 view .LVU869
 3197 0092 3146     		mov	r1, r6
 323:src/console.c ****     r.shift = 0; // set up for release;
 3198              		.loc 2 323 15 view .LVU870
 3199 0094 3B46     		mov	r3, r7
 3200              	.LVL259:
 3201              	.L294:
 395:src/console.c ****     }
 396:src/console.c ****     else {
 397:src/console.c ****       do_now (K_CMPLX, 0);
 398:src/console.c ****       do_now (K_RELEASE, 0);
 399:src/console.c ****       r = no_key;
 400:src/console.c ****     }
 401:src/console.c ****   default:
 402:src/console.c ****     r = no_key;
 403:src/console.c ****   }
 404:src/console.c ****   return r;
 3202              		.loc 2 404 3 is_stmt 1 view .LVU871
 3203              		.loc 2 404 10 is_stmt 0 view .LVU872
 3204 0096 8DF80030 		strb	r3, [sp]
 3205 009a 0191     		str	r1, [sp, #4]
ARM GAS  /tmp/ccTMmuhz.s 			page 88


 3206 009c 94E80300 		ldm	r4, {r0, r1}
 3207              	.LVL260:
 3208              		.loc 2 404 10 view .LVU873
 3209 00a0 85E80300 		stm	r5, {r0, r1}
 405:src/console.c **** }
 3210              		.loc 2 405 1 view .LVU874
 3211 00a4 2846     		mov	r0, r5
 3212 00a6 04B0     		add	sp, sp, #16
 3213              		.cfi_remember_state
 3214              		.cfi_def_cfa_offset 24
 3215              		@ sp needed
 3216 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3217              	.LVL261:
 3218              	.L292:
 3219              		.cfi_restore_state
 327:src/console.c ****     reset_shift();
 3220              		.loc 2 327 5 is_stmt 1 view .LVU875
 3221 00ac AD20     		movs	r0, #173
 3222              	.LVL262:
 327:src/console.c ****     reset_shift();
 3223              		.loc 2 327 5 is_stmt 0 view .LVU876
 3224 00ae FFF7FEFF 		bl	flash_backup
 3225              	.LVL263:
 328:src/console.c ****     r = no_key;
 3226              		.loc 2 328 5 is_stmt 1 view .LVU877
 3227              	.L306:
 333:src/console.c ****     r = no_key;
 3228              		.loc 2 333 5 view .LVU878
 3229 00b2 FFF7FEFF 		bl	reset_shift
 3230              	.LVL264:
 334:src/console.c ****     break;
 3231              		.loc 2 334 5 view .LVU879
 334:src/console.c ****     break;
 3232              		.loc 2 334 7 is_stmt 0 view .LVU880
 3233 00b6 2E4B     		ldr	r3, .L309+8
 3234 00b8 93E80300 		ldm	r3, {r0, r1}
 3235 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3236              	.LVL265:
 335:src/console.c ****   case WRLIB: // save library file
 3237              		.loc 2 335 5 is_stmt 1 view .LVU881
 334:src/console.c ****     break;
 3238              		.loc 2 334 7 is_stmt 0 view .LVU882
 3239 00be 84E80300 		stm	r4, {r0, r1}
 335:src/console.c ****   case WRLIB: // save library file
 3240              		.loc 2 335 5 view .LVU883
 3241 00c2 E8E7     		b	.L294
 3242              	.LVL266:
 3243              	.L291:
 332:src/console.c ****     reset_shift();
 3244              		.loc 2 332 5 is_stmt 1 view .LVU884
 3245 00c4 AE20     		movs	r0, #174
 3246              	.LVL267:
 332:src/console.c ****     reset_shift();
 3247              		.loc 2 332 5 is_stmt 0 view .LVU885
 3248 00c6 FFF7FEFF 		bl	flash_restore
 3249              	.LVL268:
 3250 00ca F2E7     		b	.L306
ARM GAS  /tmp/ccTMmuhz.s 			page 89


 3251              	.LVL269:
 3252              	.L290:
 337:src/console.c ****     reset_shift();
 3253              		.loc 2 337 5 is_stmt 1 view .LVU886
 3254 00cc 0120     		movs	r0, #1
 3255              	.LVL270:
 337:src/console.c ****     reset_shift();
 3256              		.loc 2 337 5 is_stmt 0 view .LVU887
 3257 00ce FFF7FEFF 		bl	save_lib_file
 3258              	.LVL271:
 338:src/console.c ****     r = no_key;
 3259              		.loc 2 338 5 is_stmt 1 view .LVU888
 3260 00d2 EEE7     		b	.L306
 3261              	.LVL272:
 3262              	.L289:
 342:src/console.c ****     reset_shift();
 3263              		.loc 2 342 5 view .LVU889
 3264 00d4 0120     		movs	r0, #1
 3265              	.LVL273:
 342:src/console.c ****     reset_shift();
 3266              		.loc 2 342 5 is_stmt 0 view .LVU890
 3267 00d6 FFF7FEFF 		bl	load_lib_file
 3268              	.LVL274:
 343:src/console.c ****     r = no_key;
 3269              		.loc 2 343 5 is_stmt 1 view .LVU891
 3270 00da EAE7     		b	.L306
 3271              	.LVL275:
 3272              	.L288:
 347:src/console.c ****     reset_shift();
 3273              		.loc 2 347 5 view .LVU892
 3274 00dc 0120     		movs	r0, #1
 3275              	.LVL276:
 347:src/console.c ****     reset_shift();
 3276              		.loc 2 347 5 is_stmt 0 view .LVU893
 3277 00de FFF7FEFF 		bl	save_ram_file
 3278              	.LVL277:
 348:src/console.c ****     r = no_key;
 3279              		.loc 2 348 5 is_stmt 1 view .LVU894
 3280 00e2 E6E7     		b	.L306
 3281              	.LVL278:
 3282              	.L287:
 352:src/console.c ****     reset_shift();
 3283              		.loc 2 352 5 view .LVU895
 3284 00e4 0120     		movs	r0, #1
 3285              	.LVL279:
 352:src/console.c ****     reset_shift();
 3286              		.loc 2 352 5 is_stmt 0 view .LVU896
 3287 00e6 FFF7FEFF 		bl	load_ram_file
 3288              	.LVL280:
 353:src/console.c ****     r = no_key;
 3289              		.loc 2 353 5 is_stmt 1 view .LVU897
 3290 00ea E2E7     		b	.L306
 3291              	.LVL281:
 3292              	.L286:
 357:src/console.c ****     reset_shift();
 3293              		.loc 2 357 5 view .LVU898
 3294 00ec FFF7FEFF 		bl	load_prog_file
ARM GAS  /tmp/ccTMmuhz.s 			page 90


 3295              	.LVL282:
 358:src/console.c ****     r = no_key;
 3296              		.loc 2 358 5 view .LVU899
 3297 00f0 DFE7     		b	.L306
 3298              	.LVL283:
 3299              	.L285:
 367:src/console.c ****     reset_shift();
 3300              		.loc 2 367 5 view .LVU900
 3301 00f2 204B     		ldr	r3, .L309+12
 3302 00f4 2048     		ldr	r0, .L309+16
 3303              	.LVL284:
 367:src/console.c ****     reset_shift();
 3304              		.loc 2 367 5 is_stmt 0 view .LVU901
 3305 00f6 9847     		blx	r3
 3306              	.LVL285:
 368:src/console.c ****     r = no_key;
 3307              		.loc 2 368 5 is_stmt 1 view .LVU902
 3308 00f8 DBE7     		b	.L306
 3309              	.LVL286:
 3310              	.L284:
 362:src/console.c ****     reset_shift();
 3311              		.loc 2 362 5 view .LVU903
 3312 00fa FFF7FEFF 		bl	save_prog_file
 3313              	.LVL287:
 363:src/console.c ****     r = no_key;
 3314              		.loc 2 363 5 view .LVU904
 3315 00fe D8E7     		b	.L306
 3316              	.LVL288:
 3317              	.L283:
 372:src/console.c ****     reset_shift();
 3318              		.loc 2 372 5 view .LVU905
 3319 0100 FFF7FEFF 		bl	do_all_dots
 3320              	.LVL289:
 373:src/console.c ****     r = no_key;
 3321              		.loc 2 373 5 view .LVU906
 3322 0104 D5E7     		b	.L306
 3323              	.LVL290:
 3324              	.L282:
 377:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 3325              		.loc 2 377 5 view .LVU907
 3326              	.LBB137:
 3327              	.LBI137:
 310:src/console.c ****   struct _ndmap temp;
 3328              		.loc 2 310 6 view .LVU908
 3329              	.LBB138:
 311:src/console.c ****   temp.key_34s = key;
 3330              		.loc 2 311 3 view .LVU909
 312:src/console.c ****   temp.shift = shift;
 3331              		.loc 2 312 3 view .LVU910
 312:src/console.c ****   temp.shift = shift;
 3332              		.loc 2 312 16 is_stmt 0 view .LVU911
 3333 0106 6323     		movs	r3, #99
 313:src/console.c ****   process_keycode_with_shift (temp);
 3334              		.loc 2 313 14 view .LVU912
 3335 0108 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3336              		.loc 2 312 16 view .LVU913
ARM GAS  /tmp/ccTMmuhz.s 			page 91


 3337 010a 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3338              		.loc 2 313 3 is_stmt 1 view .LVU914
 313:src/console.c ****   process_keycode_with_shift (temp);
 3339              		.loc 2 313 14 is_stmt 0 view .LVU915
 3340 010e 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3341              		.loc 2 314 3 is_stmt 1 view .LVU916
 3342 0110 02AE     		add	r6, sp, #8
 3343 0112 96E80300 		ldm	r6, {r0, r1}
 3344              	.LVL291:
 314:src/console.c **** }
 3345              		.loc 2 314 3 is_stmt 0 view .LVU917
 3346 0116 FFF7FEFF 		bl	process_keycode_with_shift
 3347              	.LVL292:
 314:src/console.c **** }
 3348              		.loc 2 314 3 view .LVU918
 3349              	.LBE138:
 3350              	.LBE137:
 378:src/console.c ****     r = no_key;
 3351              		.loc 2 378 5 is_stmt 1 view .LVU919
 3352              	.LBB139:
 3353              	.LBI139:
 310:src/console.c ****   struct _ndmap temp;
 3354              		.loc 2 310 6 view .LVU920
 3355              	.LBB140:
 311:src/console.c ****   temp.key_34s = key;
 3356              		.loc 2 311 3 view .LVU921
 312:src/console.c ****   temp.shift = shift;
 3357              		.loc 2 312 3 view .LVU922
 312:src/console.c ****   temp.shift = shift;
 3358              		.loc 2 312 16 is_stmt 0 view .LVU923
 3359 011a 3323     		movs	r3, #51
 3360              	.LVL293:
 3361              	.L307:
 312:src/console.c ****   temp.shift = shift;
 3362              		.loc 2 312 16 view .LVU924
 3363              	.LBE140:
 3364              	.LBE139:
 3365              	.LBB141:
 3366              	.LBB142:
 313:src/console.c ****   process_keycode_with_shift (temp);
 3367              		.loc 2 313 14 view .LVU925
 3368 011c 0397     		str	r7, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 3369              		.loc 2 312 16 view .LVU926
 3370 011e 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3371              		.loc 2 313 3 is_stmt 1 view .LVU927
 314:src/console.c **** }
 3372              		.loc 2 314 3 view .LVU928
 3373 0122 96E80300 		ldm	r6, {r0, r1}
 3374 0126 FFF7FEFF 		bl	process_keycode_with_shift
 3375              	.LVL294:
 3376              	.LBE142:
 3377              	.LBE141:
 399:src/console.c ****     }
ARM GAS  /tmp/ccTMmuhz.s 			page 92


 3378              		.loc 2 399 7 view .LVU929
 3379              	.L277:
 402:src/console.c ****   }
 3380              		.loc 2 402 5 view .LVU930
 402:src/console.c ****   }
 3381              		.loc 2 402 7 is_stmt 0 view .LVU931
 3382 012a 114B     		ldr	r3, .L309+8
 3383 012c 93E80300 		ldm	r3, {r0, r1}
 3384 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3385              	.LVL295:
 402:src/console.c ****   }
 3386              		.loc 2 402 7 view .LVU932
 3387 0132 84E80300 		stm	r4, {r0, r1}
 3388 0136 AEE7     		b	.L294
 3389              	.LVL296:
 3390              	.L281:
 382:src/console.c ****     reset_shift();
 3391              		.loc 2 382 5 is_stmt 1 view .LVU933
 3392 0138 FFF7FEFF 		bl	toggle_default_menu
 3393              	.LVL297:
 383:src/console.c ****     r = no_key;
 3394              		.loc 2 383 5 view .LVU934
 3395 013c B9E7     		b	.L306
 3396              	.LVL298:
 3397              	.L280:
 387:src/console.c ****     reset_shift();
 3398              		.loc 2 387 5 view .LVU935
 3399 013e FFF7FEFF 		bl	build_user_menu
 3400              	.LVL299:
 388:src/console.c ****     r = no_key;;
 3401              		.loc 2 388 5 view .LVU936
 3402 0142 B6E7     		b	.L306
 3403              	.LVL300:
 3404              	.L295:
 397:src/console.c ****       do_now (K_RELEASE, 0);
 3405              		.loc 2 397 7 view .LVU937
 3406              	.LBB144:
 3407              	.LBI144:
 310:src/console.c ****   struct _ndmap temp;
 3408              		.loc 2 310 6 view .LVU938
 3409              	.LBB145:
 311:src/console.c ****   temp.key_34s = key;
 3410              		.loc 2 311 3 view .LVU939
 312:src/console.c ****   temp.shift = shift;
 3411              		.loc 2 312 3 view .LVU940
 312:src/console.c ****   temp.shift = shift;
 3412              		.loc 2 312 16 is_stmt 0 view .LVU941
 3413 0144 2D23     		movs	r3, #45
 313:src/console.c ****   process_keycode_with_shift (temp);
 3414              		.loc 2 313 14 view .LVU942
 3415 0146 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3416              		.loc 2 312 16 view .LVU943
 3417 0148 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3418              		.loc 2 313 3 is_stmt 1 view .LVU944
 313:src/console.c ****   process_keycode_with_shift (temp);
ARM GAS  /tmp/ccTMmuhz.s 			page 93


 3419              		.loc 2 313 14 is_stmt 0 view .LVU945
 3420 014c 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3421              		.loc 2 314 3 is_stmt 1 view .LVU946
 3422 014e 02AE     		add	r6, sp, #8
 3423 0150 96E80300 		ldm	r6, {r0, r1}
 3424              	.LVL301:
 314:src/console.c **** }
 3425              		.loc 2 314 3 is_stmt 0 view .LVU947
 3426 0154 FFF7FEFF 		bl	process_keycode_with_shift
 3427              	.LVL302:
 314:src/console.c **** }
 3428              		.loc 2 314 3 view .LVU948
 3429              	.LBE145:
 3430              	.LBE144:
 398:src/console.c ****       r = no_key;
 3431              		.loc 2 398 7 is_stmt 1 view .LVU949
 3432              	.LBB146:
 3433              	.LBI141:
 310:src/console.c ****   struct _ndmap temp;
 3434              		.loc 2 310 6 view .LVU950
 3435              	.LBB143:
 311:src/console.c ****   temp.key_34s = key;
 3436              		.loc 2 311 3 view .LVU951
 312:src/console.c ****   temp.shift = shift;
 3437              		.loc 2 312 3 view .LVU952
 312:src/console.c ****   temp.shift = shift;
 3438              		.loc 2 312 16 is_stmt 0 view .LVU953
 3439 0158 6323     		movs	r3, #99
 3440 015a DFE7     		b	.L307
 3441              	.LVL303:
 3442              	.L308:
 312:src/console.c ****   temp.shift = shift;
 3443              		.loc 2 312 16 view .LVU954
 3444              	.LBE143:
 3445              	.LBE146:
 3446              	.LBB147:
 3447              	.LBB126:
 111:src/menu.c    ****   }
 3448              		.loc 1 111 5 is_stmt 1 view .LVU955
 111:src/menu.c    ****   }
 3449              		.loc 1 111 18 is_stmt 0 view .LVU956
 3450 015c 0749     		ldr	r1, .L309+20
 3451 015e 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3452 0160 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3453              		.loc 1 119 3 is_stmt 1 view .LVU957
 3454              	.L297:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3455              		.loc 1 119 43 view .LVU958
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3456              		.loc 1 119 53 is_stmt 0 view .LVU959
 3457 0162 074A     		ldr	r2, .L309+24
 3458 0164 1370     		strb	r3, [r2]
 3459 0166 76E7     		b	.L298
 3460              	.L310:
 3461              		.align	2
ARM GAS  /tmp/ccTMmuhz.s 			page 94


 3462              	.L309:
 3463 0168 00000000 		.word	main_ram
 3464 016c 00000000 		.word	.LANCHOR1
 3465 0170 00000000 		.word	.LANCHOR10
 3466 0174 49040008 		.word	134218825
 3467 0178 00000000 		.word	.LC13
 3468 017c 00000000 		.word	.LANCHOR2
 3469 0180 00000000 		.word	.LANCHOR3
 3470              	.LBE126:
 3471              	.LBE147:
 3472              		.cfi_endproc
 3473              	.LFE32:
 3475              		.section	.text.program_main,"ax",%progbits
 3476              		.align	1
 3477              		.p2align 2,,3
 3478              		.global	program_main
 3479              		.syntax unified
 3480              		.thumb
 3481              		.thumb_func
 3482              		.fpu fpv4-sp-d16
 3484              	program_main:
 3485              	.LFB33:
 406:src/console.c **** 
 407:src/console.c **** void program_main(){
 3486              		.loc 2 407 20 is_stmt 1 view -0
 3487              		.cfi_startproc
 3488              		@ args = 0, pretend = 0, frame = 224
 3489              		@ frame_needed = 0, uses_anonymous_args = 0
 408:src/console.c ****   int c;
 3490              		.loc 2 408 3 view .LVU961
 409:src/console.c ****   struct _ndmap remapped;
 3491              		.loc 2 409 3 view .LVU962
 410:src/console.c **** 
 411:src/console.c ****   init_mem();
 3492              		.loc 2 411 3 view .LVU963
 407:src/console.c ****   int c;
 3493              		.loc 2 407 20 is_stmt 0 view .LVU964
 3494 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3495              		.cfi_def_cfa_offset 32
 3496              		.cfi_offset 4, -32
 3497              		.cfi_offset 5, -28
 3498              		.cfi_offset 6, -24
 3499              		.cfi_offset 7, -20
 3500              		.cfi_offset 8, -16
 3501              		.cfi_offset 9, -12
 3502              		.cfi_offset 10, -8
 3503              		.cfi_offset 14, -4
 3504 0004 B8B0     		sub	sp, sp, #224
 3505              		.cfi_def_cfa_offset 256
 3506              		.loc 2 411 3 view .LVU965
 3507 0006 FFF7FEFF 		bl	init_mem
 3508              	.LVL304:
 412:src/console.c ****   init_RegionTab();
 3509              		.loc 2 412 3 is_stmt 1 view .LVU966
 3510 000a FFF7FEFF 		bl	init_RegionTab
 3511              	.LVL305:
 413:src/console.c ****   init_34s();
ARM GAS  /tmp/ccTMmuhz.s 			page 95


 3512              		.loc 2 413 3 view .LVU967
 3513 000e FFF7FEFF 		bl	init_34s
 3514              	.LVL306:
 414:src/console.c ****   State2.flags = 1;  
 3515              		.loc 2 414 3 view .LVU968
 3516              		.loc 2 414 16 is_stmt 0 view .LVU969
 3517 0012 B34A     		ldr	r2, .L412
 3518 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3519 0016 43F00103 		orr	r3, r3, #1
 3520 001a 1376     		strb	r3, [r2, #24]
 415:src/console.c ****   check_create_wp34sdir();
 3521              		.loc 2 415 3 is_stmt 1 view .LVU970
 3522 001c FFF7FEFF 		bl	check_create_wp34sdir
 3523              	.LVL307:
 416:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3524              		.loc 2 416 3 view .LVU971
 3525              		.loc 2 416 8 is_stmt 0 view .LVU972
 3526 0020 0020     		movs	r0, #0
 3527 0022 FFF7FEFF 		bl	load_ram_file
 3528              	.LVL308:
 3529              		.loc 2 416 6 view .LVU973
 3530 0026 08B9     		cbnz	r0, .L312
 3531              		.loc 2 416 26 is_stmt 1 discriminator 1 view .LVU974
 3532              		.loc 2 416 34 is_stmt 0 discriminator 1 view .LVU975
 3533 0028 AE4B     		ldr	r3, .L412+4
 3534 002a 1860     		str	r0, [r3]
 3535              	.L312:
 417:src/console.c ****   load_backup_file(0);
 3536              		.loc 2 417 3 is_stmt 1 view .LVU976
 418:src/console.c ****   load_lib_file(0);
 419:src/console.c ****   t20->newln = 0;
 3537              		.loc 2 419 3 is_stmt 0 view .LVU977
 3538 002c AE4C     		ldr	r4, .L412+8
 3539 002e AF4E     		ldr	r6, .L412+12
 420:src/console.c ****   t20->lnfill = 0;
 421:src/console.c ****   t20->fixed = 1;
 422:src/console.c ****   t20->xspc = -2;
 423:src/console.c ****   t20->bgfill = 0;
 424:src/console.c ****   run_menu_item_app = run_menu_item;
 425:src/console.c ****   menu_line_str_app = menu_line_str;
 426:src/console.c **** 
 427:src/console.c ****   display();
 428:src/console.c ****   display_current_menu();
 429:src/console.c ****   lcd_refresh();
 430:src/console.c ****   JustDisplayed = 0;
 431:src/console.c ****   /*
 432:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 433:src/console.c ****     Sleeps peacefully while waiting for a key.
 434:src/console.c ****     Handles (in principle!) turning off and on.
 435:src/console.c ****     =================
 436:src/console.c ****     Main event loop
 437:src/console.c ****     =================
 438:src/console.c **** 
 439:src/console.c ****     Status flags:
 440:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 441:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 442:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
ARM GAS  /tmp/ccTMmuhz.s 			page 96


 443:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 444:src/console.c ****   */
 445:src/console.c ****   for(;;) {
 446:src/console.c **** 
 447:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 448:src/console.c ****       {
 449:src/console.c **** 	CLR_ST(STAT_RUNNING);
 450:src/console.c **** 	sys_sleep();
 451:src/console.c ****       }
 452:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 3540              		.loc 2 452 35 view .LVU978
 3541 0030 AF4F     		ldr	r7, .L412+16
 453:src/console.c ****     {
 454:src/console.c ****       CLR_ST(STAT_RUNNING);
 455:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3542              		.loc 2 455 7 view .LVU979
 3543 0032 DFF83083 		ldr	r8, .L412+132
 417:src/console.c ****   load_lib_file(0);
 3544              		.loc 2 417 3 view .LVU980
 3545 0036 0020     		movs	r0, #0
 3546 0038 FFF7FEFF 		bl	load_backup_file
 3547              	.LVL309:
 418:src/console.c ****   t20->newln = 0;
 3548              		.loc 2 418 3 is_stmt 1 view .LVU981
 3549 003c 0020     		movs	r0, #0
 3550 003e FFF7FEFF 		bl	load_lib_file
 3551              	.LVL310:
 419:src/console.c ****   t20->lnfill = 0;
 3552              		.loc 2 419 3 view .LVU982
 3553 0042 236B     		ldr	r3, [r4, #48]
 420:src/console.c ****   t20->fixed = 1;
 3554              		.loc 2 420 3 view .LVU983
 421:src/console.c ****   t20->xspc = -2;
 3555              		.loc 2 421 3 view .LVU984
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3556              		.loc 2 424 21 is_stmt 0 view .LVU985
 3557 0044 AB4A     		ldr	r2, .L412+20
 421:src/console.c ****   t20->xspc = -2;
 3558              		.loc 2 421 14 view .LVU986
 3559 0046 0121     		movs	r1, #1
 3560 0048 1974     		strb	r1, [r3, #16]
 422:src/console.c ****   t20->bgfill = 0;
 3561              		.loc 2 422 3 is_stmt 1 view .LVU987
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3562              		.loc 2 423 15 is_stmt 0 view .LVU988
 3563 004a 0025     		movs	r5, #0
 422:src/console.c ****   t20->bgfill = 0;
 3564              		.loc 2 422 13 view .LVU989
 3565 004c FE21     		movs	r1, #254
 3566 004e 9973     		strb	r1, [r3, #14]
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3567              		.loc 2 423 3 is_stmt 1 view .LVU990
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3568              		.loc 2 423 15 is_stmt 0 view .LVU991
 3569 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 419:src/console.c ****   t20->lnfill = 0;
 3570              		.loc 2 419 14 view .LVU992
ARM GAS  /tmp/ccTMmuhz.s 			page 97


 3571 0052 1D75     		strb	r5, [r3, #20]
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3572              		.loc 2 424 3 is_stmt 1 view .LVU993
 425:src/console.c **** 
 3573              		.loc 2 425 21 is_stmt 0 view .LVU994
 3574 0054 A84B     		ldr	r3, .L412+24
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3575              		.loc 2 424 21 view .LVU995
 3576 0056 E260     		str	r2, [r4, #12]
 425:src/console.c **** 
 3577              		.loc 2 425 3 is_stmt 1 view .LVU996
 425:src/console.c **** 
 3578              		.loc 2 425 21 is_stmt 0 view .LVU997
 3579 0058 2361     		str	r3, [r4, #16]
 427:src/console.c ****   display_current_menu();
 3580              		.loc 2 427 3 is_stmt 1 view .LVU998
 3581 005a FFF7FEFF 		bl	display
 3582              	.LVL311:
 428:src/console.c ****   lcd_refresh();
 3583              		.loc 2 428 3 view .LVU999
 3584 005e FFF7FEFF 		bl	display_current_menu
 3585              	.LVL312:
 429:src/console.c ****   JustDisplayed = 0;
 3586              		.loc 2 429 3 view .LVU1000
 3587 0062 A64B     		ldr	r3, .L412+28
 3588 0064 9847     		blx	r3
 3589              	.LVL313:
 430:src/console.c ****   /*
 3590              		.loc 2 430 3 view .LVU1001
 430:src/console.c ****   /*
 3591              		.loc 2 430 17 is_stmt 0 view .LVU1002
 3592 0066 A64B     		ldr	r3, .L412+32
 3593 0068 1D60     		str	r5, [r3]
 3594              	.L313:
 445:src/console.c **** 
 3595              		.loc 2 445 3 is_stmt 1 view .LVU1003
 447:src/console.c ****       {
 3596              		.loc 2 447 5 view .LVU1004
 447:src/console.c ****       {
 3597              		.loc 2 447 10 is_stmt 0 view .LVU1005
 3598 006a 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3599              		.loc 2 447 8 view .LVU1006
 3600 006c 9B05     		lsls	r3, r3, #22
 3601 006e 40F1BE80 		bpl	.L314
 447:src/console.c ****       {
 3602              		.loc 2 447 30 discriminator 1 view .LVU1007
 3603 0072 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3604              		.loc 2 447 27 discriminator 1 view .LVU1008
 3605 0074 5D07     		lsls	r5, r3, #29
 3606 0076 40F1BA80 		bpl	.L314
 449:src/console.c **** 	sys_sleep();
 3607              		.loc 2 449 2 is_stmt 1 view .LVU1009
 3608 007a 2368     		ldr	r3, [r4]
 450:src/console.c ****       }
 3609              		.loc 2 450 2 is_stmt 0 view .LVU1010
ARM GAS  /tmp/ccTMmuhz.s 			page 98


 3610 007c A14A     		ldr	r2, .L412+36
 449:src/console.c **** 	sys_sleep();
 3611              		.loc 2 449 2 view .LVU1011
 3612 007e 23F00203 		bic	r3, r3, #2
 3613 0082 2360     		str	r3, [r4]
 450:src/console.c ****       }
 3614              		.loc 2 450 2 is_stmt 1 view .LVU1012
 3615 0084 9047     		blx	r2
 3616              	.LVL314:
 3617              	.L315:
 456:src/console.c ****       sys_sleep();
 457:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 458:src/console.c **** 	key_push (K_HEARTBEAT);
 459:src/console.c **** 	if (Pause > 0) Pause--;
 460:src/console.c ****       }
 461:src/console.c ****       sys_timer_disable(0); // stop timer
 462:src/console.c ****     }
 463:src/console.c ****     
 464:src/console.c ****     // Wakeup in off state or going to sleep
 465:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3618              		.loc 2 465 5 view .LVU1013
 3619              		.loc 2 465 9 is_stmt 0 view .LVU1014
 3620 0086 2368     		ldr	r3, [r4]
 3621              		.loc 2 465 8 view .LVU1015
 3622 0088 9805     		lsls	r0, r3, #22
 3623 008a 00F1D780 		bmi	.L321
 3624              	.L407:
 3625              		.loc 2 465 29 discriminator 1 view .LVU1016
 3626 008e 2368     		ldr	r3, [r4]
 3627              		.loc 2 465 26 discriminator 1 view .LVU1017
 3628 0090 5907     		lsls	r1, r3, #29
 3629 0092 00F1D380 		bmi	.L321
 466:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 467:src/console.c ****         // Going to off mode
 468:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 469:src/console.c ****         draw_power_off_image(1);
 470:src/console.c **** 
 471:src/console.c ****         LCD_power_off(0);
 472:src/console.c ****         SET_ST(STAT_SUSPENDED);
 473:src/console.c ****         SET_ST(STAT_OFF);
 474:src/console.c ****       }
 475:src/console.c ****       // Already in OFF -> just continue to sleep above
 476:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 477:src/console.c ****       // thus reaching the sleep()
 478:src/console.c ****     }
 479:src/console.c **** 
 480:src/console.c ****     // Well, we are woken-up
 481:src/console.c ****     SET_ST(STAT_RUNNING);
 3630              		.loc 2 481 5 is_stmt 1 view .LVU1018
 3631 0096 2368     		ldr	r3, [r4]
 3632 0098 43F00203 		orr	r3, r3, #2
 3633 009c 2360     		str	r3, [r4]
 482:src/console.c **** 
 483:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 484:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3634              		.loc 2 484 5 view .LVU1019
 3635 009e 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccTMmuhz.s 			page 99


 3636 00a0 23F00403 		bic	r3, r3, #4
 3637 00a4 2360     		str	r3, [r4]
 485:src/console.c **** 
 486:src/console.c ****     // Get up from OFF state
 487:src/console.c ****     if ( ST(STAT_OFF) ) {
 3638              		.loc 2 487 5 view .LVU1020
 3639              		.loc 2 487 10 is_stmt 0 view .LVU1021
 3640 00a6 2368     		ldr	r3, [r4]
 3641              		.loc 2 487 8 view .LVU1022
 3642 00a8 DA06     		lsls	r2, r3, #27
 3643 00aa 0ED5     		bpl	.L326
 488:src/console.c ****       LCD_power_on();
 3644              		.loc 2 488 7 is_stmt 1 view .LVU1023
 3645 00ac 964B     		ldr	r3, .L412+40
 3646 00ae 9847     		blx	r3
 3647              	.LVL315:
 489:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3648              		.loc 2 489 7 view .LVU1024
 3649 00b0 964B     		ldr	r3, .L412+44
 3650 00b2 9847     		blx	r3
 3651              	.LVL316:
 490:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3652              		.loc 2 490 7 view .LVU1025
 3653 00b4 964B     		ldr	r3, .L412+48
 3654 00b6 9847     		blx	r3
 3655              	.LVL317:
 491:src/console.c **** 
 492:src/console.c ****       CLR_ST(STAT_OFF);
 3656              		.loc 2 492 7 view .LVU1026
 3657 00b8 2368     		ldr	r3, [r4]
 493:src/console.c **** 
 494:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3658              		.loc 2 494 13 is_stmt 0 view .LVU1027
 3659 00ba 964A     		ldr	r2, .L412+52
 492:src/console.c **** 
 3660              		.loc 2 492 7 view .LVU1028
 3661 00bc 23F01003 		bic	r3, r3, #16
 3662 00c0 2360     		str	r3, [r4]
 3663              		.loc 2 494 7 is_stmt 1 view .LVU1029
 3664              		.loc 2 494 13 is_stmt 0 view .LVU1030
 3665 00c2 9047     		blx	r2
 3666              	.LVL318:
 3667              		.loc 2 494 10 view .LVU1031
 3668 00c4 08B9     		cbnz	r0, .L326
 495:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3669              		.loc 2 495 9 is_stmt 1 view .LVU1032
 3670 00c6 944B     		ldr	r3, .L412+56
 3671 00c8 9847     		blx	r3
 3672              	.LVL319:
 3673              	.L326:
 496:src/console.c ****     }
 497:src/console.c **** 
 498:src/console.c ****     // Key is ready -> clear auto off timer
 499:src/console.c ****     //    if ( !key_empty() )
 500:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 501:src/console.c ****     // Fetch the key
 502:src/console.c ****     //  < 0 -> No key event
ARM GAS  /tmp/ccTMmuhz.s 			page 100


 503:src/console.c ****     //  > 0 -> Key pressed
 504:src/console.c ****     // == 0 -> Key released
 505:src/console.c ****     c = key_pop();
 3674              		.loc 2 505 5 view .LVU1033
 3675              		.loc 2 505 9 is_stmt 0 view .LVU1034
 3676 00ca 944B     		ldr	r3, .L412+60
 3677 00cc 9847     		blx	r3
 3678              	.LVL320:
 506:src/console.c **** #ifdef INCLUDE_STOPWATCH
 507:src/console.c ****     if ( KeyCallback != NULL ) {
 3679              		.loc 2 507 22 view .LVU1035
 3680 00ce 3368     		ldr	r3, [r6]
 505:src/console.c **** #ifdef INCLUDE_STOPWATCH
 3681              		.loc 2 505 9 view .LVU1036
 3682 00d0 0546     		mov	r5, r0
 3683              	.LVL321:
 3684              		.loc 2 507 5 is_stmt 1 view .LVU1037
 3685              		.loc 2 507 8 is_stmt 0 view .LVU1038
 3686 00d2 002B     		cmp	r3, #0
 3687 00d4 00F04881 		beq	.L328
 508:src/console.c ****       c = (*KeyCallback)( c );
 3688              		.loc 2 508 7 is_stmt 1 view .LVU1039
 3689              		.loc 2 508 12 is_stmt 0 view .LVU1040
 3690 00d8 9847     		blx	r3
 3691              	.LVL322:
 3692              		.loc 2 508 12 view .LVU1041
 3693 00da 0546     		mov	r5, r0
 3694              	.LVL323:
 3695              	.L329:
 509:src/console.c ****     }
 510:src/console.c ****     else if ( StopWatchRunning && ( Ticker % STOPWATCH_BLINK ) == 0 ) {
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 512:src/console.c ****       finish_display();
 513:src/console.c ****     }
 514:src/console.c **** #endif
 515:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 3696              		.loc 2 515 5 is_stmt 1 view .LVU1042
 3697              		.loc 2 515 8 is_stmt 0 view .LVU1043
 3698 00dc 622D     		cmp	r5, #98
 3699 00de 00F0C780 		beq	.L330
 3700              		.loc 2 515 29 discriminator 1 view .LVU1044
 3701 00e2 002D     		cmp	r5, #0
 3702 00e4 40F3C180 		ble	.L331
 516:src/console.c ****       reset_auto_off();
 3703              		.loc 2 516 7 is_stmt 1 view .LVU1045
 3704 00e8 8D4B     		ldr	r3, .L412+64
 3705 00ea 9847     		blx	r3
 3706              	.LVL324:
 517:src/console.c ****       start_key_timer();
 3707              		.loc 2 517 7 view .LVU1046
 3708              	.LBB155:
 3709              	.LBI155:
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 3710              		.loc 2 252 6 view .LVU1047
 3711              	.LBB156:
 253:src/console.c **** }
 3712              		.loc 2 253 5 view .LVU1048
ARM GAS  /tmp/ccTMmuhz.s 			page 101


 253:src/console.c **** }
 3713              		.loc 2 253 19 is_stmt 0 view .LVU1049
 3714 00ec 8D4B     		ldr	r3, .L412+68
 3715 00ee 9847     		blx	r3
 3716              	.LVL325:
 253:src/console.c **** }
 3717              		.loc 2 253 17 view .LVU1050
 3718 00f0 8D4B     		ldr	r3, .L412+72
 3719              	.LBE156:
 3720              	.LBE155:
 3721              	.LBB158:
 3722              	.LBB159:
  64:src/console.c **** 
 3723              		.loc 2 64 6 view .LVU1051
 3724 00f2 632D     		cmp	r5, #99
 3725              	.LBE159:
 3726              	.LBE158:
 3727              	.LBB169:
 3728              	.LBB157:
 253:src/console.c **** }
 3729              		.loc 2 253 17 view .LVU1052
 3730 00f4 1860     		str	r0, [r3]
 3731              	.LBE157:
 3732              	.LBE169:
 518:src/console.c ****     }
 519:src/console.c ****     if (c >= 0) {
 3733              		.loc 2 519 5 is_stmt 1 view .LVU1053
 520:src/console.c ****       remapped = remap(c);
 3734              		.loc 2 520 7 view .LVU1054
 3735              	.LVL326:
 3736              	.LBB170:
 3737              	.LBI158:
  56:src/console.c **** 
 3738              		.loc 2 56 22 view .LVU1055
 3739              	.LBB161:
  58:src/console.c **** 
 3740              		.loc 2 58 3 view .LVU1056
 3741              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3742              		.loc 3 1 1 view .LVU1057
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
ARM GAS  /tmp/ccTMmuhz.s 			page 102


  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3743              		.loc 3 59 3 view .LVU1058
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX}, // Complex
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
ARM GAS  /tmp/ccTMmuhz.s 			page 103


  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU,  M_Disp}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU,  M_Clear}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU,  M_Solve}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU,  M_Stats}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU,  M_Base}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU,  M_Flags}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU,  M_Prob}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  96:src/keytran.c ****     {K_SETMENU,  M_User}, // select user menu
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU,  M_Setup1}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU,  M_Last}, // last menu
 114:src/keytran.c ****     {K_SETMENU,  M_Misc}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3744              		.loc 3 117 3 view .LVU1059
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
ARM GAS  /tmp/ccTMmuhz.s 			page 104


 131:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU,  M_Swap}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_MULTI, SETUMEN}, // Set up user menu
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 159:src/keytran.c ****     {K_SETMENU,  M_Setup2}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU,  M_Program}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3745              		.loc 3 175 1 view .LVU1060
 176:src/keytran.c ****     {K_RELEASE, -1},
 177:src/keytran.c ****     // Top row of DM42 1--6
 178:src/keytran.c ****     {K00, -1},
 179:src/keytran.c ****     {K01, -1},
 180:src/keytran.c ****     {K02, -1},
 181:src/keytran.c ****     {K03, -1},
 182:src/keytran.c ****     {K04, -1},
 183:src/keytran.c ****     {K05, -1},
 184:src/keytran.c ****     // Next row of DM42 7--12
 185:src/keytran.c ****     {K10, -1},
 186:src/keytran.c ****     {K11, -1},
ARM GAS  /tmp/ccTMmuhz.s 			page 105


 187:src/keytran.c ****     {K12, -1},
 188:src/keytran.c ****     {K13, -1},
 189:src/keytran.c ****     {K14, -1},
 190:src/keytran.c ****     {K15, -1},
 191:src/keytran.c ****     // Third row of DM42 13--17
 192:src/keytran.c ****     {K20, -1},
 193:src/keytran.c ****     {K21, -1},
 194:src/keytran.c ****     {K22, -1},
 195:src/keytran.c ****     {K23, -1},
 196:src/keytran.c ****     {K24, -1},
 197:src/keytran.c ****     // Fourth row of DM42 18--22
 198:src/keytran.c ****     {K30, -1},
 199:src/keytran.c ****     {K31, -1},
 200:src/keytran.c ****     {K32, -1},
 201:src/keytran.c ****     {K33, -1},
 202:src/keytran.c ****     {K34, -1},
 203:src/keytran.c ****     // Fifth row of DM42 23--27
 204:src/keytran.c ****     {K40, -1},
 205:src/keytran.c ****     {K41, -1},
 206:src/keytran.c ****     {K42, -1},
 207:src/keytran.c ****     {K43, -1},
 208:src/keytran.c ****     {K44, -1},
 209:src/keytran.c ****     // Sixth row of DM42 28--32
 210:src/keytran.c ****     {K50, -1},
 211:src/keytran.c ****     {K51, -1},
 212:src/keytran.c ****     {K52, -1},
 213:src/keytran.c ****     {K53, -1},
 214:src/keytran.c ****     {K54, -1},
 215:src/keytran.c ****     // Last row of DM42 33--37
 216:src/keytran.c ****     {K60, -1},
 217:src/keytran.c ****     {K61, -1},
 218:src/keytran.c ****     {K62, -1},
 219:src/keytran.c ****     {K63, -1},
 220:src/keytran.c ****     {K64, -1},
 221:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 222:src/keytran.c ****     {K_NOP, -1},
 223:src/keytran.c ****     {K_NOP, -1},
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 227:src/keytran.c ****     {K_CMPLX, -1},
 228:src/keytran.c ****     {K_NOP, -1},
 229:src/keytran.c ****     {K_NOP, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c **** };
 232:src/keytran.c **** 
 233:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3746              		.loc 3 233 1 view .LVU1061
  62:src/console.c **** 
 3747              		.loc 2 62 3 view .LVU1062
  64:src/console.c **** 
 3748              		.loc 2 64 3 view .LVU1063
  64:src/console.c **** 
 3749              		.loc 2 64 6 is_stmt 0 view .LVU1064
 3750 00f6 00F08181 		beq	.L395
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3751              		.loc 2 66 3 is_stmt 1 view .LVU1065
ARM GAS  /tmp/ccTMmuhz.s 			page 106


  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3752              		.loc 2 66 6 is_stmt 0 view .LVU1066
 3753 00fa 2C2D     		cmp	r5, #44
 3754 00fc 00F04F81 		beq	.L334
 3755              	.LVL327:
 3756              	.L368:
  71:src/console.c ****     return mapping_running[c];
 3757              		.loc 2 71 3 is_stmt 1 view .LVU1067
  71:src/console.c ****     return mapping_running[c];
 3758              		.loc 2 71 15 is_stmt 0 view .LVU1068
 3759 0100 8A4A     		ldr	r2, .L412+76
 3760 0102 8B4B     		ldr	r3, .L412+80
 3761 0104 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3762 0108 1968     		ldr	r1, [r3]
  71:src/console.c ****     return mapping_running[c];
 3763              		.loc 2 71 6 view .LVU1069
 3764 010a 59EA0109 		orrs	r9, r9, r1
 3765 010e 40F06881 		bne	.L396
  75:src/console.c ****   
 3766              		.loc 2 75 3 is_stmt 1 view .LVU1070
  75:src/console.c ****   
 3767              		.loc 2 75 22 is_stmt 0 view .LVU1071
 3768 0112 04A8     		add	r0, sp, #16
 3769 0114 FFF7FEFF 		bl	get_current_menu_ref
 3770              	.LVL328:
  77:src/console.c ****   case KEY_F1:
 3771              		.loc 2 77 3 is_stmt 1 view .LVU1072
 3772 0118 A5F12603 		sub	r3, r5, #38
 3773 011c 052B     		cmp	r3, #5
 3774 011e 00F27781 		bhi	.L336
 3775 0122 DFE813F0 		tbh	[pc, r3, lsl #1]
 3776              	.L338:
 3777 0126 7D01     		.2byte	(.L343-.L338)/2
 3778 0128 0B00     		.2byte	(.L342-.L338)/2
 3779 012a 1500     		.2byte	(.L341-.L338)/2
 3780 012c 1F00     		.2byte	(.L340-.L338)/2
 3781 012e 2900     		.2byte	(.L339-.L338)/2
 3782 0130 3300     		.2byte	(.L337-.L338)/2
 3783              		.p2align 1
 3784              	.L344:
  80:src/console.c ****   case KEY_F2:
 3785              		.loc 2 80 5 view .LVU1073
  80:src/console.c ****   case KEY_F2:
 3786              		.loc 2 80 9 is_stmt 0 view .LVU1074
 3787 0132 FFF7FEFF 		bl	cur_shift
 3788              	.LVL329:
  80:src/console.c ****   case KEY_F2:
 3789              		.loc 2 80 8 view .LVU1075
 3790 0136 0128     		cmp	r0, #1
 3791 0138 00F00882 		beq	.L397
 3792              	.L342:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3793              		.loc 2 82 5 is_stmt 1 view .LVU1076
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3794              		.loc 2 82 9 is_stmt 0 view .LVU1077
 3795 013c FFF7FEFF 		bl	cur_shift
 3796              	.LVL330:
ARM GAS  /tmp/ccTMmuhz.s 			page 107


  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3797              		.loc 2 82 8 view .LVU1078
 3798 0140 0028     		cmp	r0, #0
 3799 0142 00F09A81 		beq	.L398
  83:src/console.c ****   case KEY_F3:
 3800              		.loc 2 83 5 is_stmt 1 view .LVU1079
  83:src/console.c ****   case KEY_F3:
 3801              		.loc 2 83 9 is_stmt 0 view .LVU1080
 3802 0146 FFF7FEFF 		bl	cur_shift
 3803              	.LVL331:
  83:src/console.c ****   case KEY_F3:
 3804              		.loc 2 83 8 view .LVU1081
 3805 014a 0128     		cmp	r0, #1
 3806 014c 00F0DF81 		beq	.L399
 3807              	.L341:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3808              		.loc 2 85 5 is_stmt 1 view .LVU1082
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3809              		.loc 2 85 9 is_stmt 0 view .LVU1083
 3810 0150 FFF7FEFF 		bl	cur_shift
 3811              	.LVL332:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3812              		.loc 2 85 8 view .LVU1084
 3813 0154 0028     		cmp	r0, #0
 3814 0156 00F08681 		beq	.L400
  86:src/console.c ****   case KEY_F4:
 3815              		.loc 2 86 5 is_stmt 1 view .LVU1085
  86:src/console.c ****   case KEY_F4:
 3816              		.loc 2 86 9 is_stmt 0 view .LVU1086
 3817 015a FFF7FEFF 		bl	cur_shift
 3818              	.LVL333:
  86:src/console.c ****   case KEY_F4:
 3819              		.loc 2 86 8 view .LVU1087
 3820 015e 0128     		cmp	r0, #1
 3821 0160 00F0CB81 		beq	.L401
 3822              	.L340:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3823              		.loc 2 88 5 is_stmt 1 view .LVU1088
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3824              		.loc 2 88 9 is_stmt 0 view .LVU1089
 3825 0164 FFF7FEFF 		bl	cur_shift
 3826              	.LVL334:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3827              		.loc 2 88 8 view .LVU1090
 3828 0168 0028     		cmp	r0, #0
 3829 016a 00F07281 		beq	.L402
  89:src/console.c ****   case KEY_F5:
 3830              		.loc 2 89 5 is_stmt 1 view .LVU1091
  89:src/console.c ****   case KEY_F5:
 3831              		.loc 2 89 9 is_stmt 0 view .LVU1092
 3832 016e FFF7FEFF 		bl	cur_shift
 3833              	.LVL335:
  89:src/console.c ****   case KEY_F5:
 3834              		.loc 2 89 8 view .LVU1093
 3835 0172 0128     		cmp	r0, #1
 3836 0174 00F0AD81 		beq	.L403
 3837              	.L339:
ARM GAS  /tmp/ccTMmuhz.s 			page 108


  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3838              		.loc 2 91 5 is_stmt 1 view .LVU1094
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3839              		.loc 2 91 9 is_stmt 0 view .LVU1095
 3840 0178 FFF7FEFF 		bl	cur_shift
 3841              	.LVL336:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3842              		.loc 2 91 8 view .LVU1096
 3843 017c 0028     		cmp	r0, #0
 3844 017e 00F05E81 		beq	.L404
  92:src/console.c ****   case KEY_F6:
 3845              		.loc 2 92 5 is_stmt 1 view .LVU1097
  92:src/console.c ****   case KEY_F6:
 3846              		.loc 2 92 9 is_stmt 0 view .LVU1098
 3847 0182 FFF7FEFF 		bl	cur_shift
 3848              	.LVL337:
  92:src/console.c ****   case KEY_F6:
 3849              		.loc 2 92 8 view .LVU1099
 3850 0186 0128     		cmp	r0, #1
 3851 0188 00F0AD81 		beq	.L405
 3852              	.L337:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3853              		.loc 2 94 5 is_stmt 1 view .LVU1100
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3854              		.loc 2 94 9 is_stmt 0 view .LVU1101
 3855 018c FFF7FEFF 		bl	cur_shift
 3856              	.LVL338:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3857              		.loc 2 94 8 view .LVU1102
 3858 0190 0028     		cmp	r0, #0
 3859 0192 40F03981 		bne	.L349
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3860              		.loc 2 94 33 is_stmt 1 view .LVU1103
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3861              		.loc 2 94 51 is_stmt 0 view .LVU1104
 3862 0196 DDE93001 		ldrd	r0, r1, [sp, #192]
 3863 019a 9DF8C050 		ldrb	r5, [sp, #192]	@ zero_extendqisi2
 3864              	.LVL339:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3865              		.loc 2 94 51 view .LVU1105
 3866 019e 0DF1080A 		add	r10, sp, #8
 3867              	.LBE161:
 3868              	.LBE170:
 521:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3869              		.loc 2 521 10 view .LVU1106
 3870 01a2 2F2D     		cmp	r5, #47
 3871              	.LBB171:
 3872              	.LBB162:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3873              		.loc 2 94 51 view .LVU1107
 3874 01a4 8AE80300 		stm	r10, {r0, r1}
 3875 01a8 8946     		mov	r9, r1
 3876              	.LVL340:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3877              		.loc 2 94 51 view .LVU1108
 3878              	.LBE162:
 3879              	.LBE171:
ARM GAS  /tmp/ccTMmuhz.s 			page 109


 3880              		.loc 2 521 7 is_stmt 1 view .LVU1109
 3881              		.loc 2 521 10 is_stmt 0 view .LVU1110
 3882 01aa 6CD1     		bne	.L360
 3883              	.LVL341:
 3884              	.L408:
 522:src/console.c **** 	set_menu ( remapped.shift );
 3885              		.loc 2 522 2 is_stmt 1 view .LVU1111
 3886              	.LBB172:
 3887              	.LBB173:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3888              		.loc 1 109 13 is_stmt 0 view .LVU1112
 3889 01ac 614A     		ldr	r2, .L412+84
 3890 01ae 92F90030 		ldrsb	r3, [r2]
 3891              	.LBE173:
 3892              	.LBE172:
 3893              		.loc 2 522 2 view .LVU1113
 3894 01b2 4FFA89F1 		sxtb	r1, r9
 3895              	.LVL342:
 3896              	.LBB176:
 3897              	.LBI172:
 108:src/menu.c    ****   menu_name m = current_menu;
 3898              		.loc 1 108 6 is_stmt 1 view .LVU1114
 3899              	.LBB174:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3900              		.loc 1 109 3 view .LVU1115
 110:src/menu.c    ****     current_menu = default_menu;
 3901              		.loc 1 110 3 view .LVU1116
 110:src/menu.c    ****     current_menu = default_menu;
 3902              		.loc 1 110 6 is_stmt 0 view .LVU1117
 3903 01b6 9942     		cmp	r1, r3
 3904 01b8 00F02281 		beq	.L406
 113:src/menu.c    ****     current_menu = last_menu;
 3905              		.loc 1 113 8 is_stmt 1 view .LVU1118
 113:src/menu.c    ****     current_menu = last_menu;
 3906              		.loc 1 113 11 is_stmt 0 view .LVU1119
 3907 01bc 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 3908              		.loc 1 114 5 is_stmt 1 view .LVU1120
 114:src/menu.c    ****   }
 3909              		.loc 1 114 18 is_stmt 0 view .LVU1121
 3910 01be 04BF     		itt	eq
 3911 01c0 5D49     		ldreq	r1, .L412+88
 3912              	.LVL343:
 114:src/menu.c    ****   }
 3913              		.loc 1 114 18 view .LVU1122
 3914 01c2 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 3915              		.loc 1 117 5 is_stmt 1 view .LVU1123
 117:src/menu.c    ****   }
 3916              		.loc 1 117 18 is_stmt 0 view .LVU1124
 3917 01c4 1170     		strb	r1, [r2]
 3918              	.LVL344:
 3919              	.L362:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3920              		.loc 1 119 3 is_stmt 1 view .LVU1125
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3921              		.loc 1 119 6 is_stmt 0 view .LVU1126
ARM GAS  /tmp/ccTMmuhz.s 			page 110


 3922 01c6 092B     		cmp	r3, #9
 3923 01c8 03D0     		beq	.L364
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3924              		.loc 1 119 23 view .LVU1127
 3925 01ca 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3926              		.loc 1 119 43 is_stmt 1 view .LVU1128
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3927              		.loc 1 119 53 is_stmt 0 view .LVU1129
 3928 01cc 1CBF     		itt	ne
 3929 01ce 5A4A     		ldrne	r2, .L412+88
 3930 01d0 1370     		strbne	r3, [r2]
 3931              	.L364:
 3932              	.LVL345:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3933              		.loc 1 119 53 view .LVU1130
 3934              	.LBE174:
 3935              	.LBE176:
 523:src/console.c **** 	display_current_menu ();
 3936              		.loc 2 523 2 is_stmt 1 view .LVU1131
 3937 01d2 FFF7FEFF 		bl	display_current_menu
 3938              	.LVL346:
 524:src/console.c **** 	reset_shift();
 3939              		.loc 2 524 2 view .LVU1132
 3940 01d6 FFF7FEFF 		bl	reset_shift
 3941              	.LVL347:
 525:src/console.c **** 	remapped = no_key;
 3942              		.loc 2 525 2 view .LVU1133
 3943              		.loc 2 525 11 is_stmt 0 view .LVU1134
 3944 01da 584B     		ldr	r3, .L412+92
 3945 01dc 93E80300 		ldm	r3, {r0, r1}
 3946 01e0 0DF1080A 		add	r10, sp, #8
 3947 01e4 8AE80300 		stm	r10, {r0, r1}
 3948 01e8 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3949              	.LVL348:
 3950              		.loc 2 525 11 view .LVU1135
 3951 01ea 8946     		mov	r9, r1
 3952              	.LVL349:
 3953              		.loc 2 525 11 view .LVU1136
 3954 01ec 4BE0     		b	.L360
 3955              	.LVL350:
 3956              	.L314:
 452:src/console.c ****     {
 3957              		.loc 2 452 10 is_stmt 1 view .LVU1137
 452:src/console.c ****     {
 3958              		.loc 2 452 15 is_stmt 0 view .LVU1138
 3959 01ee 2568     		ldr	r5, [r4]
 452:src/console.c ****     {
 3960              		.loc 2 452 13 view .LVU1139
 3961 01f0 15F40075 		ands	r5, r5, #512
 3962 01f4 7FF447AF 		bne	.L315
 452:src/console.c ****     {
 3963              		.loc 2 452 35 discriminator 1 view .LVU1140
 3964 01f8 B847     		blx	r7
 3965              	.LVL351:
 452:src/console.c ****     {
 3966              		.loc 2 452 32 discriminator 1 view .LVU1141
ARM GAS  /tmp/ccTMmuhz.s 			page 111


 3967 01fa 0028     		cmp	r0, #0
 3968 01fc 3FF443AF 		beq	.L315
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3969              		.loc 2 454 7 is_stmt 1 view .LVU1142
 3970 0200 2368     		ldr	r3, [r4]
 3971 0202 23F00203 		bic	r3, r3, #2
 455:src/console.c ****       sys_sleep();
 3972              		.loc 2 455 7 is_stmt 0 view .LVU1143
 3973 0206 2846     		mov	r0, r5
 3974 0208 6421     		movs	r1, #100
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3975              		.loc 2 454 7 view .LVU1144
 3976 020a 2360     		str	r3, [r4]
 455:src/console.c ****       sys_sleep();
 3977              		.loc 2 455 7 is_stmt 1 view .LVU1145
 3978 020c C047     		blx	r8
 3979              	.LVL352:
 456:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 3980              		.loc 2 456 7 view .LVU1146
 3981 020e 3D4B     		ldr	r3, .L412+36
 3982 0210 9847     		blx	r3
 3983              	.LVL353:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 3984              		.loc 2 457 7 view .LVU1147
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 3985              		.loc 2 457 11 is_stmt 0 view .LVU1148
 3986 0212 4B4B     		ldr	r3, .L412+96
 3987 0214 2846     		mov	r0, r5
 3988 0216 9847     		blx	r3
 3989              	.LVL354:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 3990              		.loc 2 457 10 view .LVU1149
 3991 0218 48B1     		cbz	r0, .L319
 458:src/console.c **** 	if (Pause > 0) Pause--;
 3992              		.loc 2 458 2 is_stmt 1 view .LVU1150
 3993 021a 4A4B     		ldr	r3, .L412+100
 3994 021c 6220     		movs	r0, #98
 3995 021e 9847     		blx	r3
 3996              	.LVL355:
 459:src/console.c ****       }
 3997              		.loc 2 459 2 view .LVU1151
 459:src/console.c ****       }
 3998              		.loc 2 459 12 is_stmt 0 view .LVU1152
 3999 0220 424B     		ldr	r3, .L412+76
 4000 0222 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 459:src/console.c ****       }
 4001              		.loc 2 459 5 view .LVU1153
 4002 0224 1AB1     		cbz	r2, .L319
 459:src/console.c ****       }
 4003              		.loc 2 459 17 is_stmt 1 discriminator 1 view .LVU1154
 459:src/console.c ****       }
 4004              		.loc 2 459 22 is_stmt 0 discriminator 1 view .LVU1155
 4005 0226 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4006 0228 013A     		subs	r2, r2, #1
 4007 022a D2B2     		uxtb	r2, r2
 4008 022c 1A70     		strb	r2, [r3]
 4009              	.L319:
ARM GAS  /tmp/ccTMmuhz.s 			page 112


 461:src/console.c ****     }
 4010              		.loc 2 461 7 is_stmt 1 view .LVU1156
 4011 022e 464B     		ldr	r3, .L412+104
 4012 0230 0020     		movs	r0, #0
 4013 0232 9847     		blx	r3
 4014              	.LVL356:
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4015              		.loc 2 465 5 view .LVU1157
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4016              		.loc 2 465 9 is_stmt 0 view .LVU1158
 4017 0234 2368     		ldr	r3, [r4]
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4018              		.loc 2 465 8 view .LVU1159
 4019 0236 9805     		lsls	r0, r3, #22
 4020 0238 7FF529AF 		bpl	.L407
 4021              	.L321:
 466:src/console.c ****         // Going to off mode
 4022              		.loc 2 466 7 is_stmt 1 view .LVU1160
 466:src/console.c ****         // Going to off mode
 4023              		.loc 2 466 12 is_stmt 0 view .LVU1161
 4024 023c 2568     		ldr	r5, [r4]
 466:src/console.c ****         // Going to off mode
 4025              		.loc 2 466 10 view .LVU1162
 4026 023e 15F00405 		ands	r5, r5, #4
 4027 0242 7FF412AF 		bne	.L313
 468:src/console.c ****         draw_power_off_image(1);
 4028              		.loc 2 468 9 is_stmt 1 view .LVU1163
 4029 0246 414B     		ldr	r3, .L412+108
 4030 0248 2846     		mov	r0, r5
 4031 024a 9847     		blx	r3
 4032              	.LVL357:
 469:src/console.c **** 
 4033              		.loc 2 469 9 view .LVU1164
 4034 024c 404B     		ldr	r3, .L412+112
 4035 024e 0120     		movs	r0, #1
 4036 0250 9847     		blx	r3
 4037              	.LVL358:
 471:src/console.c ****         SET_ST(STAT_SUSPENDED);
 4038              		.loc 2 471 9 view .LVU1165
 4039 0252 404B     		ldr	r3, .L412+116
 4040 0254 2846     		mov	r0, r5
 4041 0256 9847     		blx	r3
 4042              	.LVL359:
 472:src/console.c ****         SET_ST(STAT_OFF);
 4043              		.loc 2 472 9 view .LVU1166
 4044 0258 2368     		ldr	r3, [r4]
 4045 025a 43F00403 		orr	r3, r3, #4
 4046 025e 2360     		str	r3, [r4]
 473:src/console.c ****       }
 4047              		.loc 2 473 9 view .LVU1167
 4048 0260 2368     		ldr	r3, [r4]
 4049 0262 43F01003 		orr	r3, r3, #16
 4050 0266 2360     		str	r3, [r4]
 4051 0268 FFE6     		b	.L313
 4052              	.LVL360:
 4053              	.L331:
 519:src/console.c ****       remapped = remap(c);
ARM GAS  /tmp/ccTMmuhz.s 			page 113


 4054              		.loc 2 519 5 view .LVU1168
 519:src/console.c ****       remapped = remap(c);
 4055              		.loc 2 519 8 is_stmt 0 view .LVU1169
 4056 026a 7FF4FEAE 		bne	.L313
 4057 026e 47E7     		b	.L368
 4058              	.L330:
 519:src/console.c ****       remapped = remap(c);
 4059              		.loc 2 519 5 is_stmt 1 view .LVU1170
 520:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 4060              		.loc 2 520 7 view .LVU1171
 4061              	.LVL361:
 4062              	.LBB177:
  56:src/console.c **** 
 4063              		.loc 2 56 22 view .LVU1172
 4064              	.LBB163:
  58:src/console.c **** 
 4065              		.loc 2 58 3 view .LVU1173
   1:src/keytran.c ****     {K00, 0}, // A/sig+
 4066              		.loc 3 1 1 view .LVU1174
  59:src/keytran.c ****     {K_RELEASE, -1},
 4067              		.loc 3 59 3 view .LVU1175
 117:src/keytran.c ****     {K_RELEASE, -1},
 4068              		.loc 3 117 3 view .LVU1176
 175:src/keytran.c ****     {K_RELEASE, -1},
 4069              		.loc 3 175 1 view .LVU1177
 4070              		.loc 3 233 1 view .LVU1178
  62:src/console.c **** 
 4071              		.loc 2 62 3 view .LVU1179
  62:src/console.c **** 
 4072              		.loc 2 62 23 view .LVU1180
  62:src/console.c **** 
 4073              		.loc 2 62 30 is_stmt 0 view .LVU1181
 4074 0270 394B     		ldr	r3, .L412+120
 4075              	.LVL362:
 4076              	.L393:
  62:src/console.c **** 
 4077              		.loc 2 62 30 view .LVU1182
 4078 0272 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4079              	.LVL363:
  62:src/console.c **** 
 4080              		.loc 2 62 30 view .LVU1183
 4081 0274 93E80300 		ldm	r3, {r0, r1}
 4082 0278 0DF1080A 		add	r10, sp, #8
 4083 027c 8AE80300 		stm	r10, {r0, r1}
 4084 0280 8946     		mov	r9, r1
 4085              	.LVL364:
 4086              	.L333:
  62:src/console.c **** 
 4087              		.loc 2 62 30 view .LVU1184
 4088              	.LBE163:
 4089              	.LBE177:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4090              		.loc 2 521 7 is_stmt 1 view .LVU1185
 521:src/console.c **** 	set_menu ( remapped.shift );
 4091              		.loc 2 521 10 is_stmt 0 view .LVU1186
 4092 0282 2F2D     		cmp	r5, #47
 4093 0284 92D0     		beq	.L408
ARM GAS  /tmp/ccTMmuhz.s 			page 114


 4094              	.L360:
 526:src/console.c ****       }
 527:src/console.c ****       if (remapped.key_34s == K_SYS) {
 4095              		.loc 2 527 7 is_stmt 1 view .LVU1187
 4096              		.loc 2 527 10 is_stmt 0 view .LVU1188
 4097 0286 302D     		cmp	r5, #48
 4098 0288 19D1     		bne	.L365
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4099              		.loc 2 528 2 is_stmt 1 view .LVU1189
 4100 028a 2368     		ldr	r3, [r4]
 529:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 4101              		.loc 2 529 2 is_stmt 0 view .LVU1190
 4102 028c 334D     		ldr	r5, .L412+124
 4103              	.LVL365:
 4104              		.loc 2 529 2 view .LVU1191
 4105 028e 3448     		ldr	r0, .L412+128
 4106 0290 0022     		movs	r2, #0
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4107              		.loc 2 528 2 view .LVU1192
 4108 0292 43F04003 		orr	r3, r3, #64
 4109              		.loc 2 529 2 view .LVU1193
 4110 0296 1146     		mov	r1, r2
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4111              		.loc 2 528 2 view .LVU1194
 4112 0298 2360     		str	r3, [r4]
 4113              		.loc 2 529 2 is_stmt 1 view .LVU1195
 4114 029a A847     		blx	r5
 4115              	.LVL366:
 530:src/console.c **** 	CLR_ST(STAT_MENU);
 4116              		.loc 2 530 2 view .LVU1196
 4117 029c 2368     		ldr	r3, [r4]
 4118 029e 23F04003 		bic	r3, r3, #64
 4119 02a2 2360     		str	r3, [r4]
 531:src/console.c **** 	reset_shift();
 4120              		.loc 2 531 2 view .LVU1197
 4121 02a4 FFF7FEFF 		bl	reset_shift
 4122              	.LVL367:
 532:src/console.c **** 	remapped =  no_key;
 4123              		.loc 2 532 2 view .LVU1198
 4124              		.loc 2 532 11 is_stmt 0 view .LVU1199
 4125 02a8 244B     		ldr	r3, .L412+92
 4126 02aa 93E80300 		ldm	r3, {r0, r1}
 4127 02ae 0DF1080A 		add	r10, sp, #8
 4128 02b2 8AE80300 		stm	r10, {r0, r1}
 4129 02b6 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4130              	.LVL368:
 4131              		.loc 2 532 11 view .LVU1200
 4132 02b8 8946     		mov	r9, r1
 4133              	.LVL369:
 533:src/console.c **** 	display_current_menu();
 4134              		.loc 2 533 2 is_stmt 1 view .LVU1201
 4135 02ba FFF7FEFF 		bl	display_current_menu
 4136              	.LVL370:
 4137              	.L365:
 534:src/console.c ****       }
 535:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 4138              		.loc 2 535 7 view .LVU1202
ARM GAS  /tmp/ccTMmuhz.s 			page 115


 4139              		.loc 2 535 10 is_stmt 0 view .LVU1203
 4140 02be 312D     		cmp	r5, #49
 4141 02c0 6FD0     		beq	.L369
 536:src/console.c **** 	remapped = do_multi (remapped);
 537:src/console.c **** 	display_current_menu();
 538:src/console.c ****       }
 539:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 4142              		.loc 2 539 7 is_stmt 1 view .LVU1204
 4143              		.loc 2 539 10 is_stmt 0 view .LVU1205
 4144 02c2 322D     		cmp	r5, #50
 4145 02c4 00F08780 		beq	.L367
 4146              	.LVL371:
 4147              	.L394:
 4148              		.loc 2 539 10 view .LVU1206
 4149 02c8 0DF1080A 		add	r10, sp, #8
 4150              	.L356:
 4151              	.LVL372:
 540:src/console.c ****       process_keycode_with_shift(remapped);
 4152              		.loc 2 540 7 is_stmt 1 view .LVU1207
 4153              		.loc 2 540 7 is_stmt 0 view .LVU1208
 4154 02cc 8DF80850 		strb	r5, [sp, #8]
 4155 02d0 CDF80C90 		str	r9, [sp, #12]
 4156 02d4 9AE80300 		ldm	r10, {r0, r1}
 4157 02d8 FFF7FEFF 		bl	process_keycode_with_shift
 4158              	.LVL373:
 4159 02dc C5E6     		b	.L313
 4160              	.L413:
 4161 02de 00BF     		.align	2
 4162              	.L412:
 4163 02e0 00000000 		.word	StateWhileOn
 4164 02e4 00000000 		.word	DispMsg
 4165 02e8 00200010 		.word	268443648
 4166 02ec 00000000 		.word	KeyCallback
 4167 02f0 7D030008 		.word	134218621
 4168 02f4 00000000 		.word	run_menu_item
 4169 02f8 00000000 		.word	menu_line_str
 4170 02fc 31020008 		.word	134218289
 4171 0300 00000000 		.word	JustDisplayed
 4172 0304 19040008 		.word	134218777
 4173 0308 19020008 		.word	134218265
 4174 030c 91030008 		.word	134218641
 4175 0310 E5020008 		.word	134218469
 4176 0314 59020008 		.word	134218329
 4177 0318 35020008 		.word	134218293
 4178 031c 89030008 		.word	134218633
 4179 0320 B9030008 		.word	134218681
 4180 0324 B9040008 		.word	134218937
 4181 0328 00000000 		.word	.LANCHOR8
 4182 032c 00000000 		.word	Pause
 4183 0330 00000000 		.word	Running
 4184 0334 00000000 		.word	.LANCHOR1
 4185 0338 00000000 		.word	.LANCHOR3
 4186 033c 00000000 		.word	.LANCHOR10
 4187 0340 01040008 		.word	134218753
 4188 0344 81030008 		.word	134218625
 4189 0348 F5030008 		.word	134218741
 4190 034c 55020008 		.word	134218325
ARM GAS  /tmp/ccTMmuhz.s 			page 116


 4191 0350 2D040008 		.word	134218797
 4192 0354 1D020008 		.word	134218269
 4193 0358 00000000 		.word	.LANCHOR19
 4194 035c 59030008 		.word	134218585
 4195 0360 00000000 		.word	.LANCHOR18
 4196 0364 F9030008 		.word	134218745
 4197              	.LVL374:
 4198              	.L328:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4199              		.loc 2 510 10 is_stmt 1 view .LVU1209
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4200              		.loc 2 510 15 is_stmt 0 view .LVU1210
 4201 0368 824B     		ldr	r3, .L414
 4202 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4203              		.loc 2 510 13 view .LVU1211
 4204 036c DB07     		lsls	r3, r3, #31
 4205 036e 7FF5B5AE 		bpl	.L329
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4206              		.loc 2 510 37 discriminator 1 view .LVU1212
 4207 0372 FFF7FEFF 		bl	DM42_Ticker
 4208              	.LVL375:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4209              		.loc 2 510 37 discriminator 1 view .LVU1213
 4210 0376 804A     		ldr	r2, .L414+4
 4211 0378 804B     		ldr	r3, .L414+8
 4212 037a 02FB0030 		mla	r0, r2, r0, r3
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4213              		.loc 2 510 32 discriminator 1 view .LVU1214
 4214 037e B0F1333F 		cmp	r0, #858993459
 4215 0382 BFF4ABAE 		bcs	.L329
 511:src/console.c ****       finish_display();
 4216              		.loc 2 511 7 is_stmt 1 view .LVU1215
 511:src/console.c ****       finish_display();
 4217              		.loc 2 511 21 is_stmt 0 view .LVU1216
 4218 0386 8420     		movs	r0, #132
 4219 0388 FFF7FEFF 		bl	is_dot
 4220              	.LVL376:
 511:src/console.c ****       finish_display();
 4221              		.loc 2 511 7 view .LVU1217
 4222 038c B0FA80F1 		clz	r1, r0
 4223 0390 4909     		lsrs	r1, r1, #5
 4224 0392 8420     		movs	r0, #132
 4225 0394 FFF7FEFF 		bl	dot
 4226              	.LVL377:
 512:src/console.c ****     }
 4227              		.loc 2 512 7 is_stmt 1 view .LVU1218
 4228 0398 FFF7FEFF 		bl	finish_display
 4229              	.LVL378:
 4230 039c 9EE6     		b	.L329
 4231              	.LVL379:
 4232              	.L334:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4233              		.loc 2 521 7 view .LVU1219
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4234              		.loc 2 527 7 view .LVU1220
 535:src/console.c **** 	remapped = do_multi (remapped);
ARM GAS  /tmp/ccTMmuhz.s 			page 117


 4235              		.loc 2 535 7 view .LVU1221
 4236              	.LBB178:
 4237              	.LBB164:
 4238              	.LBB160:
  68:src/console.c ****   }
 4239              		.loc 2 68 12 is_stmt 0 view .LVU1222
 4240 039e 4FF00C09 		mov	r9, #12
 4241              	.LVL380:
 4242              	.L369:
  68:src/console.c ****   }
 4243              		.loc 2 68 12 view .LVU1223
 4244              	.LBE160:
 4245              	.LBE164:
 4246              	.LBE178:
 536:src/console.c **** 	display_current_menu();
 4247              		.loc 2 536 2 is_stmt 1 view .LVU1224
 536:src/console.c **** 	display_current_menu();
 4248              		.loc 2 536 13 is_stmt 0 view .LVU1225
 4249 03a2 3123     		movs	r3, #49
 4250 03a4 CDF80C90 		str	r9, [sp, #12]
 4251 03a8 8DF80830 		strb	r3, [sp, #8]
 4252 03ac 6D46     		mov	r5, sp
 4253 03ae 0DF1080A 		add	r10, sp, #8
 4254 03b2 9AE80600 		ldm	r10, {r1, r2}
 4255 03b6 2846     		mov	r0, r5
 4256 03b8 FFF7FEFF 		bl	do_multi
 4257              	.LVL381:
 4258 03bc 95E80300 		ldm	r5, {r0, r1}
 4259 03c0 8AE80300 		stm	r10, {r0, r1}
 4260 03c4 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 4261              	.LVL382:
 536:src/console.c **** 	display_current_menu();
 4262              		.loc 2 536 13 view .LVU1226
 4263 03c8 DDF80C90 		ldr	r9, [sp, #12]
 4264              	.LVL383:
 537:src/console.c ****       }
 4265              		.loc 2 537 2 is_stmt 1 view .LVU1227
 4266 03cc FFF7FEFF 		bl	display_current_menu
 4267              	.LVL384:
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4268              		.loc 2 539 7 view .LVU1228
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4269              		.loc 2 539 10 is_stmt 0 view .LVU1229
 4270 03d0 322D     		cmp	r5, #50
 4271 03d2 7FF479AF 		bne	.L394
 4272              	.L367:
 541:src/console.c ****     }
 542:src/console.c ****   }
 543:src/console.c ****   save_ram_file(0);
 4273              		.loc 2 543 3 is_stmt 1 view .LVU1230
 4274 03d6 0020     		movs	r0, #0
 544:src/console.c ****   //  free_storage();
 545:src/console.c ****   return;
 546:src/console.c **** }
 4275              		.loc 2 546 1 is_stmt 0 view .LVU1231
 4276 03d8 38B0     		add	sp, sp, #224
 4277              		.cfi_remember_state
ARM GAS  /tmp/ccTMmuhz.s 			page 118


 4278              		.cfi_def_cfa_offset 32
 4279              		@ sp needed
 4280 03da BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 4281              		.cfi_restore 14
 4282              		.cfi_restore 10
 4283              		.cfi_restore 9
 4284              		.cfi_restore 8
 4285              		.cfi_restore 7
 4286              		.cfi_restore 6
 4287              		.cfi_restore 5
 4288              		.cfi_restore 4
 4289              		.cfi_def_cfa_offset 0
 4290              	.LVL385:
 543:src/console.c ****   //  free_storage();
 4291              		.loc 2 543 3 view .LVU1232
 4292 03de FFF7FEBF 		b	save_ram_file
 4293              	.LVL386:
 4294              	.L396:
 4295              		.cfi_restore_state
 4296              	.LBB179:
 4297              	.LBB165:
  72:src/console.c ****   }
 4298              		.loc 2 72 5 is_stmt 1 view .LVU1233
  72:src/console.c ****   }
 4299              		.loc 2 72 27 is_stmt 0 view .LVU1234
 4300 03e2 674B     		ldr	r3, .L414+12
 4301              	.L392:
 124:src/console.c ****     break;
 4302              		.loc 2 124 26 view .LVU1235
 4303 03e4 03EBC502 		add	r2, r3, r5, lsl #3
 4304 03e8 92E80300 		ldm	r2, {r0, r1}
 4305 03ec 0DF1080A 		add	r10, sp, #8
 4306 03f0 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4307              	.LVL387:
 124:src/console.c ****     break;
 4308              		.loc 2 124 26 view .LVU1236
 4309 03f4 8946     		mov	r9, r1
 4310              	.LVL388:
 124:src/console.c ****     break;
 4311              		.loc 2 124 26 view .LVU1237
 4312 03f6 8AE80300 		stm	r10, {r0, r1}
 4313 03fa 42E7     		b	.L333
 4314              	.LVL389:
 4315              	.L395:
  64:src/console.c **** 
 4316              		.loc 2 64 16 is_stmt 1 view .LVU1238
  64:src/console.c **** 
 4317              		.loc 2 64 23 is_stmt 0 view .LVU1239
 4318 03fc 614B     		ldr	r3, .L414+16
 4319 03fe 38E7     		b	.L393
 4320              	.LVL390:
 4321              	.L406:
  64:src/console.c **** 
 4322              		.loc 2 64 23 view .LVU1240
 4323              	.LBE165:
 4324              	.LBE179:
 4325              	.LBB180:
ARM GAS  /tmp/ccTMmuhz.s 			page 119


 4326              	.LBB175:
 111:src/menu.c    ****   }
 4327              		.loc 1 111 5 is_stmt 1 view .LVU1241
 111:src/menu.c    ****   }
 4328              		.loc 1 111 18 is_stmt 0 view .LVU1242
 4329 0400 6149     		ldr	r1, .L414+20
 4330              	.LVL391:
 111:src/menu.c    ****   }
 4331              		.loc 1 111 18 view .LVU1243
 4332 0402 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4333 0404 1170     		strb	r1, [r2]
 4334 0406 DEE6     		b	.L362
 4335              	.LVL392:
 4336              	.L349:
 111:src/menu.c    ****   }
 4337              		.loc 1 111 18 view .LVU1244
 4338              	.LBE175:
 4339              	.LBE180:
 4340              	.LBB181:
 4341              	.LBB166:
  95:src/console.c ****   }
 4342              		.loc 2 95 5 is_stmt 1 view .LVU1245
  95:src/console.c ****   }
 4343              		.loc 2 95 9 is_stmt 0 view .LVU1246
 4344 0408 FFF7FEFF 		bl	cur_shift
 4345              	.LVL393:
  95:src/console.c ****   }
 4346              		.loc 2 95 8 view .LVU1247
 4347 040c 0128     		cmp	r0, #1
 4348 040e 56D0     		beq	.L409
 4349              	.L336:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4350              		.loc 2 98 3 is_stmt 1 view .LVU1248
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4351              		.loc 2 98 8 is_stmt 0 view .LVU1249
 4352 0410 FFF7FEFF 		bl	get_alpha_state
 4353              	.LVL394:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4354              		.loc 2 98 6 view .LVU1250
 4355 0414 D8B3     		cbz	r0, .L350
  99:src/console.c ****       switch (cur_shift()) { 
 4356              		.loc 2 99 5 is_stmt 1 view .LVU1251
  99:src/console.c ****       switch (cur_shift()) { 
 4357              		.loc 2 99 8 is_stmt 0 view .LVU1252
 4358 0416 1C2D     		cmp	r5, #28
 4359 0418 00F08580 		beq	.L410
 116:src/console.c ****   }
 4360              		.loc 2 116 5 is_stmt 1 view .LVU1253
 116:src/console.c ****   }
 4361              		.loc 2 116 26 is_stmt 0 view .LVU1254
 4362 041c 5B4B     		ldr	r3, .L414+24
 4363 041e E1E7     		b	.L392
 4364              	.L343:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4365              		.loc 2 79 5 is_stmt 1 view .LVU1255
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4366              		.loc 2 79 9 is_stmt 0 view .LVU1256
ARM GAS  /tmp/ccTMmuhz.s 			page 120


 4367 0420 FFF7FEFF 		bl	cur_shift
 4368              	.LVL395:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4369              		.loc 2 79 8 view .LVU1257
 4370 0424 0028     		cmp	r0, #0
 4371 0426 7FF484AE 		bne	.L344
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4372              		.loc 2 79 33 is_stmt 1 view .LVU1258
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4373              		.loc 2 79 51 is_stmt 0 view .LVU1259
 4374 042a DDE90801 		ldrd	r0, r1, [sp, #32]
 4375 042e 0DF1080A 		add	r10, sp, #8
 4376 0432 8AE80300 		stm	r10, {r0, r1}
 4377 0436 9DF82050 		ldrb	r5, [sp, #32]	@ zero_extendqisi2
 4378              	.LVL396:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4379              		.loc 2 79 51 view .LVU1260
 4380 043a 8946     		mov	r9, r1
 4381              	.LVL397:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4382              		.loc 2 79 51 view .LVU1261
 4383 043c 21E7     		b	.L333
 4384              	.LVL398:
 4385              	.L404:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4386              		.loc 2 91 33 is_stmt 1 view .LVU1262
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4387              		.loc 2 91 51 is_stmt 0 view .LVU1263
 4388 043e DDE92801 		ldrd	r0, r1, [sp, #160]
 4389 0442 0DF1080A 		add	r10, sp, #8
 4390 0446 8AE80300 		stm	r10, {r0, r1}
 4391 044a 9DF8A050 		ldrb	r5, [sp, #160]	@ zero_extendqisi2
 4392              	.LVL399:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4393              		.loc 2 91 51 view .LVU1264
 4394 044e 8946     		mov	r9, r1
 4395              	.LVL400:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4396              		.loc 2 91 51 view .LVU1265
 4397 0450 17E7     		b	.L333
 4398              	.LVL401:
 4399              	.L402:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4400              		.loc 2 88 33 is_stmt 1 view .LVU1266
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4401              		.loc 2 88 51 is_stmt 0 view .LVU1267
 4402 0452 DDE92001 		ldrd	r0, r1, [sp, #128]
 4403 0456 0DF1080A 		add	r10, sp, #8
 4404 045a 8AE80300 		stm	r10, {r0, r1}
 4405 045e 9DF88050 		ldrb	r5, [sp, #128]	@ zero_extendqisi2
 4406              	.LVL402:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4407              		.loc 2 88 51 view .LVU1268
 4408 0462 8946     		mov	r9, r1
 4409              	.LVL403:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4410              		.loc 2 88 51 view .LVU1269
ARM GAS  /tmp/ccTMmuhz.s 			page 121


 4411 0464 0DE7     		b	.L333
 4412              	.LVL404:
 4413              	.L400:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4414              		.loc 2 85 33 is_stmt 1 view .LVU1270
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4415              		.loc 2 85 51 is_stmt 0 view .LVU1271
 4416 0466 DDE91801 		ldrd	r0, r1, [sp, #96]
 4417 046a 0DF1080A 		add	r10, sp, #8
 4418 046e 8AE80300 		stm	r10, {r0, r1}
 4419 0472 9DF86050 		ldrb	r5, [sp, #96]	@ zero_extendqisi2
 4420              	.LVL405:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4421              		.loc 2 85 51 view .LVU1272
 4422 0476 8946     		mov	r9, r1
 4423              	.LVL406:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4424              		.loc 2 85 51 view .LVU1273
 4425 0478 03E7     		b	.L333
 4426              	.LVL407:
 4427              	.L398:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4428              		.loc 2 82 33 is_stmt 1 view .LVU1274
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4429              		.loc 2 82 51 is_stmt 0 view .LVU1275
 4430 047a DDE91001 		ldrd	r0, r1, [sp, #64]
 4431 047e 0DF1080A 		add	r10, sp, #8
 4432 0482 8AE80300 		stm	r10, {r0, r1}
 4433 0486 9DF84050 		ldrb	r5, [sp, #64]	@ zero_extendqisi2
 4434              	.LVL408:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4435              		.loc 2 82 51 view .LVU1276
 4436 048a 8946     		mov	r9, r1
 4437              	.LVL409:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4438              		.loc 2 82 51 view .LVU1277
 4439 048c F9E6     		b	.L333
 4440              	.LVL410:
 4441              	.L350:
 119:src/console.c ****   case SHIFT_N:    
 4442              		.loc 2 119 3 is_stmt 1 view .LVU1278
 119:src/console.c ****   case SHIFT_N:    
 4443              		.loc 2 119 11 is_stmt 0 view .LVU1279
 4444 048e FFF7FEFF 		bl	cur_shift
 4445              	.LVL411:
 119:src/console.c ****   case SHIFT_N:    
 4446              		.loc 2 119 3 view .LVU1280
 4447 0492 0128     		cmp	r0, #1
 4448 0494 45D0     		beq	.L357
 4449 0496 0228     		cmp	r0, #2
 4450 0498 02D0     		beq	.L358
 4451 049a 70B1     		cbz	r0, .L359
  58:src/console.c **** 
 4452              		.loc 2 58 41 view .LVU1281
 4453 049c EDB2     		uxtb	r5, r5
 4454              	.LVL412:
  58:src/console.c **** 
ARM GAS  /tmp/ccTMmuhz.s 			page 122


 4455              		.loc 2 58 41 view .LVU1282
 4456 049e F0E6     		b	.L333
 4457              	.LVL413:
 4458              	.L358:
 125:src/console.c ****   case SHIFT_G:
 4459              		.loc 2 125 5 is_stmt 1 view .LVU1283
 127:src/console.c ****     break;
 4460              		.loc 2 127 5 view .LVU1284
 127:src/console.c ****     break;
 4461              		.loc 2 127 26 is_stmt 0 view .LVU1285
 4462 04a0 3B4B     		ldr	r3, .L414+28
 4463 04a2 03EBC502 		add	r2, r3, r5, lsl #3
 4464 04a6 92E80300 		ldm	r2, {r0, r1}
 4465 04aa 0DF1080A 		add	r10, sp, #8
 4466 04ae 8AE80300 		stm	r10, {r0, r1}
 4467 04b2 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4468              	.LVL414:
 127:src/console.c ****     break;
 4469              		.loc 2 127 26 view .LVU1286
 4470 04b6 8946     		mov	r9, r1
 4471              	.LVL415:
 127:src/console.c ****     break;
 4472              		.loc 2 127 26 view .LVU1287
 4473 04b8 E3E6     		b	.L333
 4474              	.LVL416:
 4475              	.L359:
 121:src/console.c ****     break;
 4476              		.loc 2 121 5 is_stmt 1 view .LVU1288
 121:src/console.c ****     break;
 4477              		.loc 2 121 24 is_stmt 0 view .LVU1289
 4478 04ba 364B     		ldr	r3, .L414+32
 4479 04bc 92E7     		b	.L392
 4480              	.L409:
  95:src/console.c ****   }
 4481              		.loc 2 95 33 is_stmt 1 view .LVU1290
  95:src/console.c ****   }
 4482              		.loc 2 95 51 is_stmt 0 view .LVU1291
 4483 04be DDE93201 		ldrd	r0, r1, [sp, #200]
 4484 04c2 0DF1080A 		add	r10, sp, #8
 4485 04c6 8AE80300 		stm	r10, {r0, r1}
 4486 04ca 9DF8C850 		ldrb	r5, [sp, #200]	@ zero_extendqisi2
 4487              	.LVL417:
  95:src/console.c ****   }
 4488              		.loc 2 95 51 view .LVU1292
 4489 04ce 8946     		mov	r9, r1
 4490              	.LVL418:
  95:src/console.c ****   }
 4491              		.loc 2 95 51 view .LVU1293
 4492 04d0 D7E6     		b	.L333
 4493              	.LVL419:
 4494              	.L403:
  89:src/console.c ****   case KEY_F5:
 4495              		.loc 2 89 33 is_stmt 1 view .LVU1294
  89:src/console.c ****   case KEY_F5:
 4496              		.loc 2 89 51 is_stmt 0 view .LVU1295
 4497 04d2 DDE92201 		ldrd	r0, r1, [sp, #136]
 4498 04d6 0DF1080A 		add	r10, sp, #8
ARM GAS  /tmp/ccTMmuhz.s 			page 123


 4499 04da 8AE80300 		stm	r10, {r0, r1}
 4500 04de 9DF88850 		ldrb	r5, [sp, #136]	@ zero_extendqisi2
 4501              	.LVL420:
  89:src/console.c ****   case KEY_F5:
 4502              		.loc 2 89 51 view .LVU1296
 4503 04e2 8946     		mov	r9, r1
 4504              	.LVL421:
  89:src/console.c ****   case KEY_F5:
 4505              		.loc 2 89 51 view .LVU1297
 4506 04e4 CDE6     		b	.L333
 4507              	.LVL422:
 4508              	.L405:
  92:src/console.c ****   case KEY_F6:
 4509              		.loc 2 92 33 is_stmt 1 view .LVU1298
  92:src/console.c ****   case KEY_F6:
 4510              		.loc 2 92 51 is_stmt 0 view .LVU1299
 4511 04e6 DDE92A01 		ldrd	r0, r1, [sp, #168]
 4512 04ea 0DF1080A 		add	r10, sp, #8
 4513 04ee 8AE80300 		stm	r10, {r0, r1}
 4514 04f2 9DF8A850 		ldrb	r5, [sp, #168]	@ zero_extendqisi2
 4515              	.LVL423:
  92:src/console.c ****   case KEY_F6:
 4516              		.loc 2 92 51 view .LVU1300
 4517 04f6 8946     		mov	r9, r1
 4518              	.LVL424:
  92:src/console.c ****   case KEY_F6:
 4519              		.loc 2 92 51 view .LVU1301
 4520 04f8 C3E6     		b	.L333
 4521              	.LVL425:
 4522              	.L401:
  86:src/console.c ****   case KEY_F4:
 4523              		.loc 2 86 33 is_stmt 1 view .LVU1302
  86:src/console.c ****   case KEY_F4:
 4524              		.loc 2 86 51 is_stmt 0 view .LVU1303
 4525 04fa DDE91A01 		ldrd	r0, r1, [sp, #104]
 4526 04fe 0DF1080A 		add	r10, sp, #8
 4527 0502 8AE80300 		stm	r10, {r0, r1}
 4528 0506 9DF86850 		ldrb	r5, [sp, #104]	@ zero_extendqisi2
 4529              	.LVL426:
  86:src/console.c ****   case KEY_F4:
 4530              		.loc 2 86 51 view .LVU1304
 4531 050a 8946     		mov	r9, r1
 4532              	.LVL427:
  86:src/console.c ****   case KEY_F4:
 4533              		.loc 2 86 51 view .LVU1305
 4534 050c B9E6     		b	.L333
 4535              	.LVL428:
 4536              	.L399:
  83:src/console.c ****   case KEY_F3:
 4537              		.loc 2 83 33 is_stmt 1 view .LVU1306
  83:src/console.c ****   case KEY_F3:
 4538              		.loc 2 83 51 is_stmt 0 view .LVU1307
 4539 050e DDE91201 		ldrd	r0, r1, [sp, #72]
 4540 0512 0DF1080A 		add	r10, sp, #8
 4541 0516 8AE80300 		stm	r10, {r0, r1}
 4542 051a 9DF84850 		ldrb	r5, [sp, #72]	@ zero_extendqisi2
 4543              	.LVL429:
ARM GAS  /tmp/ccTMmuhz.s 			page 124


  83:src/console.c ****   case KEY_F3:
 4544              		.loc 2 83 51 view .LVU1308
 4545 051e 8946     		mov	r9, r1
 4546              	.LVL430:
  83:src/console.c ****   case KEY_F3:
 4547              		.loc 2 83 51 view .LVU1309
 4548 0520 AFE6     		b	.L333
 4549              	.LVL431:
 4550              	.L357:
 122:src/console.c ****   case SHIFT_F:
 4551              		.loc 2 122 5 is_stmt 1 view .LVU1310
 124:src/console.c ****     break;
 4552              		.loc 2 124 5 view .LVU1311
 124:src/console.c ****     break;
 4553              		.loc 2 124 26 is_stmt 0 view .LVU1312
 4554 0522 1D4B     		ldr	r3, .L414+36
 4555 0524 5EE7     		b	.L392
 4556              	.L410:
 100:src/console.c ****       case SHIFT_N:
 4557              		.loc 2 100 7 is_stmt 1 view .LVU1313
 100:src/console.c ****       case SHIFT_N:
 4558              		.loc 2 100 15 is_stmt 0 view .LVU1314
 4559 0526 FFF7FEFF 		bl	cur_shift
 4560              	.LVL432:
 100:src/console.c ****       case SHIFT_N:
 4561              		.loc 2 100 7 view .LVU1315
 4562 052a 0328     		cmp	r0, #3
 4563 052c 3FF6CCAE 		bhi	.L394
 4564 0530 0128     		cmp	r0, #1
 4565 0532 09D8     		bhi	.L353
 4566 0534 A0B1     		cbz	r0, .L411
 103:src/console.c ****       case SHIFT_F:
 4567              		.loc 2 103 2 is_stmt 1 view .LVU1316
 105:src/console.c **** 	break;
 4568              		.loc 2 105 2 view .LVU1317
 105:src/console.c **** 	break;
 4569              		.loc 2 105 23 is_stmt 0 view .LVU1318
 4570 0536 194B     		ldr	r3, .L414+40
 4571 0538 93E80300 		ldm	r3, {r0, r1}
 4572 053c 0DF1080A 		add	r10, sp, #8
 4573 0540 8AE80300 		stm	r10, {r0, r1}
 4574              	.LVL433:
 105:src/console.c **** 	break;
 4575              		.loc 2 105 23 view .LVU1319
 4576              	.LBE166:
 4577              	.LBE181:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4578              		.loc 2 521 7 is_stmt 1 view .LVU1320
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4579              		.loc 2 527 7 view .LVU1321
 535:src/console.c **** 	remapped = do_multi (remapped);
 4580              		.loc 2 535 7 view .LVU1322
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4581              		.loc 2 539 7 view .LVU1323
 4582              	.LBB182:
 4583              	.LBB167:
 105:src/console.c **** 	break;
ARM GAS  /tmp/ccTMmuhz.s 			page 125


 4584              		.loc 2 105 23 is_stmt 0 view .LVU1324
 4585 0544 2A25     		movs	r5, #42
 4586              	.LVL434:
 105:src/console.c **** 	break;
 4587              		.loc 2 105 23 view .LVU1325
 4588 0546 C1E6     		b	.L356
 4589              	.LVL435:
 4590              	.L353:
 106:src/console.c ****       case SHIFT_G:
 4591              		.loc 2 106 2 is_stmt 1 view .LVU1326
 108:src/console.c **** 	break;
 4592              		.loc 2 108 2 view .LVU1327
 108:src/console.c **** 	break;
 4593              		.loc 2 108 9 is_stmt 0 view .LVU1328
 4594 0548 154B     		ldr	r3, .L414+44
 4595 054a 92E6     		b	.L393
 4596              	.L397:
  80:src/console.c ****   case KEY_F2:
 4597              		.loc 2 80 33 is_stmt 1 view .LVU1329
  80:src/console.c ****   case KEY_F2:
 4598              		.loc 2 80 51 is_stmt 0 view .LVU1330
 4599 054c DDE90A01 		ldrd	r0, r1, [sp, #40]
 4600 0550 0DF1080A 		add	r10, sp, #8
 4601 0554 8AE80300 		stm	r10, {r0, r1}
 4602 0558 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 4603              	.LVL436:
  80:src/console.c ****   case KEY_F2:
 4604              		.loc 2 80 51 view .LVU1331
 4605 055c 8946     		mov	r9, r1
 4606              	.LVL437:
  80:src/console.c ****   case KEY_F2:
 4607              		.loc 2 80 51 view .LVU1332
 4608 055e 90E6     		b	.L333
 4609              	.LVL438:
 4610              	.L411:
 102:src/console.c **** 	break;
 4611              		.loc 2 102 2 is_stmt 1 view .LVU1333
 102:src/console.c **** 	break;
 4612              		.loc 2 102 21 is_stmt 0 view .LVU1334
 4613 0560 104B     		ldr	r3, .L414+48
 4614 0562 93E80300 		ldm	r3, {r0, r1}
 4615 0566 0DF1080A 		add	r10, sp, #8
 4616 056a 8AE80300 		stm	r10, {r0, r1}
 4617              	.LVL439:
 102:src/console.c **** 	break;
 4618              		.loc 2 102 21 view .LVU1335
 4619              	.LBE167:
 4620              	.LBE182:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4621              		.loc 2 521 7 is_stmt 1 view .LVU1336
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4622              		.loc 2 527 7 view .LVU1337
 535:src/console.c **** 	remapped = do_multi (remapped);
 4623              		.loc 2 535 7 view .LVU1338
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4624              		.loc 2 539 7 view .LVU1339
 4625              	.LBB183:
ARM GAS  /tmp/ccTMmuhz.s 			page 126


 4626              	.LBB168:
 102:src/console.c **** 	break;
 4627              		.loc 2 102 21 is_stmt 0 view .LVU1340
 4628 056e 2925     		movs	r5, #41
 4629              	.LVL440:
 102:src/console.c **** 	break;
 4630              		.loc 2 102 21 view .LVU1341
 4631 0570 ACE6     		b	.L356
 4632              	.L415:
 4633 0572 00BF     		.align	2
 4634              	.L414:
 4635 0574 00000000 		.word	StopWatchStatus
 4636 0578 CDCCCCCC 		.word	-858993459
 4637 057c 99999919 		.word	429496729
 4638 0580 00000000 		.word	.LANCHOR12
 4639 0584 00000000 		.word	.LANCHOR11
 4640 0588 00000000 		.word	.LANCHOR2
 4641 058c 00000000 		.word	.LANCHOR16
 4642 0590 00000000 		.word	.LANCHOR17
 4643 0594 00000000 		.word	.LANCHOR13
 4644 0598 00000000 		.word	.LANCHOR14
 4645 059c E0000000 		.word	.LANCHOR14+224
 4646 05a0 00000000 		.word	.LANCHOR15
 4647 05a4 E0000000 		.word	.LANCHOR13+224
 4648              	.LBE168:
 4649              	.LBE183:
 4650              		.cfi_endproc
 4651              	.LFE33:
 4653              		.global	n_p
 4654              		.comm	print_string,22,4
 4655              		.global	spaces
 4656              		.global	release
 4657              		.global	h_shift
 4658              		.global	g_shift
 4659              		.global	f_shift
 4660              		.global	heartbeat
 4661              		.global	no_key
 4662              		.global	MID_MENU
 4663              		.section	.rodata.str1.4,"aMS",%progbits,1
 4664              		.align	2
 4665              	.LC14:
 4666 0000 53797374 		.ascii	"System!\000"
 4666      656D2100 
 4667              		.global	mid_menu
 4668              		.global	default_menu
 4669              		.global	last_menu
 4670              		.global	current_menu
 4671              		.global	cmplx_key_string
 4672              		.align	2
 4673              	.LC15:
 4674 0008 43505800 		.ascii	"CPX\000"
 4675              		.global	arrow_key_string
 4676              		.align	2
 4677              	.LC16:
 4678 000c 2D2D0D00 		.ascii	"--\015\000"
 4679              		.global	UserMenu
 4680              		.section	.rodata
ARM GAS  /tmp/ccTMmuhz.s 			page 127


 4681              		.align	2
 4682              		.set	.LANCHOR5,. + 0
 4683              	.LC0:
 4684 0000 2C       		.byte	44
 4685 0001 000000   		.space	3
 4686 0004 FFFFFFFF 		.word	-1
 4687              	.LC1:
 4688 0008 2D       		.byte	45
 4689 0009 000000   		.space	3
 4690 000c FFFFFFFF 		.word	-1
 4691              	.LC10:
 4692 0010 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4692      2A2B0708 
 4692      091C0B0C 
 4692      0D0E0F
 4693 001f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4693      13141516 
 4693      00121819 
 4693      1A
 4694 002c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4694      1E1F2000 
 4694      21222324 
 4694      25
 4695              		.section	.bss.current_menu,"aw",%nobits
 4696              		.set	.LANCHOR1,. + 0
 4699              	current_menu:
 4700 0000 00       		.space	1
 4701              		.section	.bss.default_menu,"aw",%nobits
 4702              		.set	.LANCHOR2,. + 0
 4705              	default_menu:
 4706 0000 00       		.space	1
 4707              		.section	.bss.last_menu,"aw",%nobits
 4708              		.set	.LANCHOR3,. + 0
 4711              	last_menu:
 4712 0000 00       		.space	1
 4713              		.section	.bss.mdots,"aw",%nobits
 4714              		.align	2
 4715              		.set	.LANCHOR0,. + 0
 4718              	mdots:
 4719 0000 00000000 		.space	400
 4719      00000000 
 4719      00000000 
 4719      00000000 
 4719      00000000 
 4720              		.section	.bss.n_p,"aw",%nobits
 4721              		.align	2
 4724              	n_p:
 4725 0000 00000000 		.space	4
 4726              		.section	.bss.start_ticks,"aw",%nobits
 4727              		.align	2
 4728              		.set	.LANCHOR8,. + 0
 4731              	start_ticks:
 4732 0000 00000000 		.space	4
 4733              		.section	.data.UserMenu,"aw"
 4734              		.align	2
 4735              		.set	.LANCHOR4,. + 0
 4738              	UserMenu:
ARM GAS  /tmp/ccTMmuhz.s 			page 128


 4739 0000 55736572 		.ascii	"User Menu\000"
 4739      204D656E 
 4739      7500
 4740 000a 00000000 		.space	5
 4740      00
 4741 000f 00       		.space	1
 4742 0010 2E       		.byte	46
 4743 0011 000000   		.space	3
 4744 0014 FFFFFFFF 		.word	-1
 4745 0018 2E       		.byte	46
 4746 0019 000000   		.space	3
 4747 001c FFFFFFFF 		.word	-1
 4748 0020 00       		.ascii	"\000"
 4749 0021 00000000 		.space	7
 4749      000000
 4750 0028 00       		.ascii	"\000"
 4751 0029 00000000 		.space	7
 4751      000000
 4752 0030 2E       		.byte	46
 4753 0031 000000   		.space	3
 4754 0034 FFFFFFFF 		.word	-1
 4755 0038 2E       		.byte	46
 4756 0039 000000   		.space	3
 4757 003c FFFFFFFF 		.word	-1
 4758 0040 00       		.ascii	"\000"
 4759 0041 00000000 		.space	7
 4759      000000
 4760 0048 00       		.ascii	"\000"
 4761 0049 00000000 		.space	7
 4761      000000
 4762 0050 2E       		.byte	46
 4763 0051 000000   		.space	3
 4764 0054 FFFFFFFF 		.word	-1
 4765 0058 2E       		.byte	46
 4766 0059 000000   		.space	3
 4767 005c FFFFFFFF 		.word	-1
 4768 0060 00       		.ascii	"\000"
 4769 0061 00000000 		.space	7
 4769      000000
 4770 0068 00       		.ascii	"\000"
 4771 0069 00000000 		.space	7
 4771      000000
 4772 0070 2E       		.byte	46
 4773 0071 000000   		.space	3
 4774 0074 FFFFFFFF 		.word	-1
 4775 0078 2E       		.byte	46
 4776 0079 000000   		.space	3
 4777 007c FFFFFFFF 		.word	-1
 4778 0080 00       		.ascii	"\000"
 4779 0081 00000000 		.space	7
 4779      000000
 4780 0088 00       		.ascii	"\000"
 4781 0089 00000000 		.space	7
 4781      000000
 4782 0090 2C       		.byte	44
 4783 0091 000000   		.space	3
 4784 0094 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccTMmuhz.s 			page 129


 4785 0098 2E       		.byte	46
 4786 0099 000000   		.space	3
 4787 009c FFFFFFFF 		.word	-1
 4788 00a0 2D2D0D00 		.ascii	"--\015\000"
 4789 00a4 00000000 		.space	4
 4790 00a8 00       		.ascii	"\000"
 4791 00a9 00000000 		.space	7
 4791      000000
 4792 00b0 2D       		.byte	45
 4793 00b1 000000   		.space	3
 4794 00b4 FFFFFFFF 		.word	-1
 4795 00b8 31       		.byte	49
 4796 00b9 000000   		.space	3
 4797 00bc 0B000000 		.word	11
 4798 00c0 43505800 		.ascii	"CPX\000"
 4799 00c4 00000000 		.space	4
 4800 00c8 00       		.ascii	"\000"
 4801 00c9 00000000 		.space	7
 4801      000000
 4802              		.section	.data.arrow_key_string,"aw"
 4803              		.align	2
 4804              		.set	.LANCHOR6,. + 0
 4807              	arrow_key_string:
 4808 0000 0C000000 		.word	.LC16
 4809              		.section	.data.cmplx_key_string,"aw"
 4810              		.align	2
 4811              		.set	.LANCHOR7,. + 0
 4814              	cmplx_key_string:
 4815 0000 08000000 		.word	.LC15
 4816              		.section	.data.f_shift,"aw"
 4817              		.align	2
 4820              	f_shift:
 4821 0000 29       		.byte	41
 4822 0001 000000   		.space	3
 4823 0004 FFFFFFFF 		.word	-1
 4824              		.section	.data.g_shift,"aw"
 4825              		.align	2
 4828              	g_shift:
 4829 0000 2A       		.byte	42
 4830 0001 000000   		.space	3
 4831 0004 FFFFFFFF 		.word	-1
 4832              		.section	.data.h_shift,"aw"
 4833              		.align	2
 4834              		.set	.LANCHOR15,. + 0
 4837              	h_shift:
 4838 0000 2B       		.byte	43
 4839 0001 000000   		.space	3
 4840 0004 FFFFFFFF 		.word	-1
 4841              		.section	.data.heartbeat,"aw"
 4842              		.align	2
 4843              		.set	.LANCHOR19,. + 0
 4846              	heartbeat:
 4847 0000 62       		.byte	98
 4848 0001 000000   		.space	3
 4849 0004 FFFFFFFF 		.word	-1
 4850              		.section	.data.no_key,"aw"
 4851              		.align	2
ARM GAS  /tmp/ccTMmuhz.s 			page 130


 4852              		.set	.LANCHOR10,. + 0
 4855              	no_key:
 4856 0000 2E       		.byte	46
 4857 0001 000000   		.space	3
 4858 0004 00000000 		.word	0
 4859              		.section	.data.release,"aw"
 4860              		.align	2
 4861              		.set	.LANCHOR11,. + 0
 4864              	release:
 4865 0000 63       		.byte	99
 4866 0001 000000   		.space	3
 4867 0004 FFFFFFFF 		.word	-1
 4868              		.section	.data.spaces,"aw"
 4869              		.align	2
 4870              		.set	.LANCHOR9,. + 0
 4873              	spaces:
 4874 0000 20202020 		.ascii	"                     \000"
 4874      20202020 
 4874      20202020 
 4874      20202020 
 4874      20202020 
 4875              		.section	.rodata.MID_MENU,"a"
 4876              		.align	2
 4877              		.set	.LANCHOR18,. + 0
 4880              	MID_MENU:
 4881 0000 00000000 		.word	.LC14
 4882 0004 00000000 		.word	mid_menu
 4883 0008 00000000 		.word	0
 4884 000c 00000000 		.word	0
 4885              		.section	.rodata.Menus,"a"
 4886              		.align	2
 4889              	Menus:
 4890 0000 4D5F426C 		.ascii	"M_Blank\000"
 4890      616E6B00 
 4891 0008 00000000 		.space	7
 4891      000000
 4892 000f 00       		.space	1
 4893 0010 2E       		.byte	46
 4894 0011 000000   		.space	3
 4895 0014 FFFFFFFF 		.word	-1
 4896 0018 2E       		.byte	46
 4897 0019 000000   		.space	3
 4898 001c FFFFFFFF 		.word	-1
 4899 0020 00       		.ascii	"\000"
 4900 0021 00000000 		.space	7
 4900      000000
 4901 0028 00       		.ascii	"\000"
 4902 0029 00000000 		.space	7
 4902      000000
 4903 0030 2E       		.byte	46
 4904 0031 000000   		.space	3
 4905 0034 FFFFFFFF 		.word	-1
 4906 0038 2E       		.byte	46
 4907 0039 000000   		.space	3
 4908 003c FFFFFFFF 		.word	-1
 4909 0040 00       		.ascii	"\000"
 4910 0041 00000000 		.space	7
ARM GAS  /tmp/ccTMmuhz.s 			page 131


 4910      000000
 4911 0048 00       		.ascii	"\000"
 4912 0049 00000000 		.space	7
 4912      000000
 4913 0050 2E       		.byte	46
 4914 0051 000000   		.space	3
 4915 0054 FFFFFFFF 		.word	-1
 4916 0058 2E       		.byte	46
 4917 0059 000000   		.space	3
 4918 005c FFFFFFFF 		.word	-1
 4919 0060 00       		.ascii	"\000"
 4920 0061 00000000 		.space	7
 4920      000000
 4921 0068 00       		.ascii	"\000"
 4922 0069 00000000 		.space	7
 4922      000000
 4923 0070 2E       		.byte	46
 4924 0071 000000   		.space	3
 4925 0074 FFFFFFFF 		.word	-1
 4926 0078 2E       		.byte	46
 4927 0079 000000   		.space	3
 4928 007c FFFFFFFF 		.word	-1
 4929 0080 00       		.ascii	"\000"
 4930 0081 00000000 		.space	7
 4930      000000
 4931 0088 00       		.ascii	"\000"
 4932 0089 00000000 		.space	7
 4932      000000
 4933 0090 2C       		.byte	44
 4934 0091 000000   		.space	3
 4935 0094 FFFFFFFF 		.word	-1
 4936 0098 2E       		.byte	46
 4937 0099 000000   		.space	3
 4938 009c FFFFFFFF 		.word	-1
 4939 00a0 2D2D0D00 		.ascii	"--\015\000"
 4940 00a4 00000000 		.space	4
 4941 00a8 00       		.ascii	"\000"
 4942 00a9 00000000 		.space	7
 4942      000000
 4943 00b0 2D       		.byte	45
 4944 00b1 000000   		.space	3
 4945 00b4 FFFFFFFF 		.word	-1
 4946 00b8 31       		.byte	49
 4947 00b9 000000   		.space	3
 4948 00bc 0B000000 		.word	11
 4949 00c0 43505800 		.ascii	"CPX\000"
 4950 00c4 00000000 		.space	4
 4951 00c8 00       		.ascii	"\000"
 4952 00c9 00000000 		.space	7
 4952      000000
 4953 00d0 4D5F436C 		.ascii	"M_Clear\000"
 4953      65617200 
 4954 00d8 00000000 		.space	7
 4954      000000
 4955 00df 00       		.space	1
 4956 00e0 10       		.byte	16
 4957 00e1 000000   		.space	3
ARM GAS  /tmp/ccTMmuhz.s 			page 132


 4958 00e4 01000000 		.word	1
 4959 00e8 34       		.byte	52
 4960 00e9 000000   		.space	3
 4961 00ec 44010000 		.word	324
 4962 00f0 434C5072 		.ascii	"CLProg\000"
 4962      6F6700
 4963 00f7 00       		.space	1
 4964 00f8 434C5041 		.ascii	"CLPAll\000"
 4964      6C6C00
 4965 00ff 00       		.space	1
 4966 0100 10       		.byte	16
 4967 0101 000000   		.space	3
 4968 0104 02000000 		.word	2
 4969 0108 34       		.byte	52
 4970 0109 000000   		.space	3
 4971 010c 3E010000 		.word	318
 4972 0110 434C9100 		.ascii	"CL\221\000"
 4973 0114 00000000 		.space	4
 4974 0118 434C5265 		.ascii	"CLReg\000"
 4974      6700
 4975 011e 0000     		.space	2
 4976 0120 10       		.byte	16
 4977 0121 000000   		.space	3
 4978 0124 03000000 		.word	3
 4979 0128 34       		.byte	52
 4980 0129 000000   		.space	3
 4981 012c 74010000 		.word	372
 4982 0130 434C7800 		.ascii	"CLx\000"
 4983 0134 00000000 		.space	4
 4984 0138 434C06A0 		.ascii	"CL\006\240\000"
 4984      00
 4985 013d 000000   		.space	3
 4986 0140 34       		.byte	52
 4987 0141 000000   		.space	3
 4988 0144 40010000 		.word	320
 4989 0148 34       		.byte	52
 4990 0149 000000   		.space	3
 4991 014c 41010000 		.word	321
 4992 0150 434C5374 		.ascii	"CLStk\000"
 4992      6B00
 4993 0156 0000     		.space	2
 4994 0158 434C416C 		.ascii	"CLAll\000"
 4994      6C00
 4995 015e 0000     		.space	2
 4996 0160 2C       		.byte	44
 4997 0161 000000   		.space	3
 4998 0164 FFFFFFFF 		.word	-1
 4999 0168 2E       		.byte	46
 5000 0169 000000   		.space	3
 5001 016c FFFFFFFF 		.word	-1
 5002 0170 2D2D0D00 		.ascii	"--\015\000"
 5003 0174 00000000 		.space	4
 5004 0178 00       		.ascii	"\000"
 5005 0179 00000000 		.space	7
 5005      000000
 5006 0180 2D       		.byte	45
 5007 0181 000000   		.space	3
ARM GAS  /tmp/ccTMmuhz.s 			page 133


 5008 0184 FFFFFFFF 		.word	-1
 5009 0188 2E       		.byte	46
 5010 0189 000000   		.space	3
 5011 018c FFFFFFFF 		.word	-1
 5012 0190 43505800 		.ascii	"CPX\000"
 5013 0194 00000000 		.space	4
 5014 0198 00       		.ascii	"\000"
 5015 0199 00000000 		.space	7
 5015      000000
 5016 01a0 4D5F4469 		.ascii	"M_Disp\000"
 5016      737000
 5017 01a7 00000000 		.space	8
 5017      00000000 
 5018 01af 00       		.space	1
 5019 01b0 00       		.byte	0
 5020 01b1 000000   		.space	3
 5021 01b4 03000000 		.word	3
 5022 01b8 05       		.byte	5
 5023 01b9 000000   		.space	3
 5024 01bc 01000000 		.word	1
 5025 01c0 414C4C00 		.ascii	"ALL\000"
 5026 01c4 00000000 		.space	4
 5027 01c8 6120622F 		.ascii	"a b/c\000"
 5027      6300
 5028 01ce 0000     		.space	2
 5029 01d0 01       		.byte	1
 5030 01d1 000000   		.space	3
 5031 01d4 03000000 		.word	3
 5032 01d8 05       		.byte	5
 5033 01d9 000000   		.space	3
 5034 01dc 02000000 		.word	2
 5035 01e0 46495800 		.ascii	"FIX\000"
 5036 01e4 00000000 		.space	4
 5037 01e8 642F6300 		.ascii	"d/c\000"
 5038 01ec 00000000 		.space	4
 5039 01f0 02       		.byte	2
 5040 01f1 000000   		.space	3
 5041 01f4 03000000 		.word	3
 5042 01f8 06       		.byte	6
 5043 01f9 000000   		.space	3
 5044 01fc 01000000 		.word	1
 5045 0200 53434900 		.ascii	"SCI\000"
 5046 0204 00000000 		.space	4
 5047 0208 482E4D53 		.ascii	"H.MS\000"
 5047      00
 5048 020d 000000   		.space	3
 5049 0210 03       		.byte	3
 5050 0211 000000   		.space	3
 5051 0214 03000000 		.word	3
 5052 0218 07       		.byte	7
 5053 0219 000000   		.space	3
 5054 021c 01000000 		.word	1
 5055 0220 454E4700 		.ascii	"ENG\000"
 5056 0224 00000000 		.space	4
 5057 0228 482E6400 		.ascii	"H.d\000"
 5058 022c 00000000 		.space	4
 5059 0230 2C       		.byte	44
ARM GAS  /tmp/ccTMmuhz.s 			page 134


 5060 0231 000000   		.space	3
 5061 0234 FFFFFFFF 		.word	-1
 5062 0238 26       		.byte	38
 5063 0239 000000   		.space	3
 5064 023c 03000000 		.word	3
 5065 0240 2D2D0D00 		.ascii	"--\015\000"
 5066 0244 00000000 		.space	4
 5067 0248 2E2F2C00 		.ascii	"./,\000"
 5068 024c 00000000 		.space	4
 5069 0250 2D       		.byte	45
 5070 0251 000000   		.space	3
 5071 0254 FFFFFFFF 		.word	-1
 5072 0258 2E       		.byte	46
 5073 0259 000000   		.space	3
 5074 025c FFFFFFFF 		.word	-1
 5075 0260 43505800 		.ascii	"CPX\000"
 5076 0264 00000000 		.space	4
 5077 0268 00       		.ascii	"\000"
 5078 0269 00000000 		.space	7
 5078      000000
 5079 0270 4D5F4261 		.ascii	"M_Base\000"
 5079      736500
 5080 0277 00000000 		.space	8
 5080      00000000 
 5081 027f 00       		.space	1
 5082 0280 0E       		.byte	14
 5083 0281 000000   		.space	3
 5084 0284 01000000 		.word	1
 5085 0288 0E       		.byte	14
 5086 0289 000000   		.space	3
 5087 028c 03000000 		.word	3
 5088 0290 42494E00 		.ascii	"BIN\000"
 5089 0294 00000000 		.space	4
 5090 0298 6E6F7400 		.ascii	"not\000"
 5091 029c 00000000 		.space	4
 5092 02a0 0E       		.byte	14
 5093 02a1 000000   		.space	3
 5094 02a4 02000000 		.word	2
 5095 02a8 13       		.byte	19
 5096 02a9 000000   		.space	3
 5097 02ac 03000000 		.word	3
 5098 02b0 4F435400 		.ascii	"OCT\000"
 5099 02b4 00000000 		.space	4
 5100 02b8 616E6400 		.ascii	"and\000"
 5101 02bc 00000000 		.space	4
 5102 02c0 0F       		.byte	15
 5103 02c1 000000   		.space	3
 5104 02c4 01000000 		.word	1
 5105 02c8 14       		.byte	20
 5106 02c9 000000   		.space	3
 5107 02cc 03000000 		.word	3
 5108 02d0 44454300 		.ascii	"DEC\000"
 5109 02d4 00000000 		.space	4
 5110 02d8 6F7200   		.ascii	"or\000"
 5111 02db 00000000 		.space	5
 5111      00
 5112 02e0 0F       		.byte	15
ARM GAS  /tmp/ccTMmuhz.s 			page 135


 5113 02e1 000000   		.space	3
 5114 02e4 02000000 		.word	2
 5115 02e8 15       		.byte	21
 5116 02e9 000000   		.space	3
 5117 02ec 03000000 		.word	3
 5118 02f0 48455800 		.ascii	"HEX\000"
 5119 02f4 00000000 		.space	4
 5120 02f8 786F7200 		.ascii	"xor\000"
 5121 02fc 00000000 		.space	4
 5122 0300 2C       		.byte	44
 5123 0301 000000   		.space	3
 5124 0304 FFFFFFFF 		.word	-1
 5125 0308 16       		.byte	22
 5126 0309 000000   		.space	3
 5127 030c 03000000 		.word	3
 5128 0310 2D2D0D00 		.ascii	"--\015\000"
 5129 0314 00000000 		.space	4
 5130 0318 524D4452 		.ascii	"RMDR\000"
 5130      00
 5131 031d 000000   		.space	3
 5132 0320 2D       		.byte	45
 5133 0321 000000   		.space	3
 5134 0324 FFFFFFFF 		.word	-1
 5135 0328 07       		.byte	7
 5136 0329 000000   		.space	3
 5137 032c 01000000 		.word	1
 5138 0330 43505800 		.ascii	"CPX\000"
 5139 0334 00000000 		.space	4
 5140 0338 482E6400 		.ascii	"H.d\000"
 5141 033c 00000000 		.space	4
 5142 0340 4D5F416E 		.ascii	"M_Angles\000"
 5142      676C6573 
 5142      00
 5143 0349 00000000 		.space	6
 5143      0000
 5144 034f 00       		.space	1
 5145 0350 06       		.byte	6
 5146 0351 000000   		.space	3
 5147 0354 02000000 		.word	2
 5148 0358 04       		.byte	4
 5149 0359 000000   		.space	3
 5150 035c 01000000 		.word	1
 5151 0360 44454700 		.ascii	"DEG\000"
 5152 0364 00000000 		.space	4
 5153 0368 500D5200 		.ascii	"P\015R\000"
 5154 036c 00000000 		.space	4
 5155 0370 07       		.byte	7
 5156 0371 000000   		.space	3
 5157 0374 02000000 		.word	2
 5158 0378 04       		.byte	4
 5159 0379 000000   		.space	3
 5160 037c 02000000 		.word	2
 5161 0380 52414400 		.ascii	"RAD\000"
 5162 0384 00000000 		.space	4
 5163 0388 520D5000 		.ascii	"R\015P\000"
 5164 038c 00000000 		.space	4
 5165 0390 08       		.byte	8
ARM GAS  /tmp/ccTMmuhz.s 			page 136


 5166 0391 000000   		.space	3
 5167 0394 02000000 		.word	2
 5168 0398 00       		.byte	0
 5169 0399 000000   		.space	3
 5170 039c 01000000 		.word	1
 5171 03a0 47524144 		.ascii	"GRAD\000"
 5171      00
 5172 03a5 000000   		.space	3
 5173 03a8 48595000 		.ascii	"HYP\000"
 5174 03ac 00000000 		.space	4
 5175 03b0 06       		.byte	6
 5176 03b1 000000   		.space	3
 5177 03b4 01000000 		.word	1
 5178 03b8 07       		.byte	7
 5179 03b9 000000   		.space	3
 5180 03bc 01000000 		.word	1
 5181 03c0 482E4D53 		.ascii	"H.MS\000"
 5181      00
 5182 03c5 000000   		.space	3
 5183 03c8 482E6400 		.ascii	"H.d\000"
 5184 03cc 00000000 		.space	4
 5185 03d0 2C       		.byte	44
 5186 03d1 000000   		.space	3
 5187 03d4 FFFFFFFF 		.word	-1
 5188 03d8 00       		.byte	0
 5189 03d9 000000   		.space	3
 5190 03dc 02000000 		.word	2
 5191 03e0 2D2D0D00 		.ascii	"--\015\000"
 5192 03e4 00000000 		.space	4
 5193 03e8 4859509D 		.ascii	"HYP\235\000"
 5193      00
 5194 03ed 000000   		.space	3
 5195 03f0 2D       		.byte	45
 5196 03f1 000000   		.space	3
 5197 03f4 FFFFFFFF 		.word	-1
 5198 03f8 2E       		.byte	46
 5199 03f9 000000   		.space	3
 5200 03fc FFFFFFFF 		.word	-1
 5201 0400 43505800 		.ascii	"CPX\000"
 5202 0404 00000000 		.space	4
 5203 0408 00       		.ascii	"\000"
 5204 0409 00000000 		.space	7
 5204      000000
 5205 0410 4D5F4D69 		.ascii	"M_Misc\000"
 5205      736300
 5206 0417 00000000 		.space	8
 5206      00000000 
 5207 041f 00       		.space	1
 5208 0420 25       		.byte	37
 5209 0421 000000   		.space	3
 5210 0424 01000000 		.word	1
 5211 0428 14       		.byte	20
 5212 0429 000000   		.space	3
 5213 042c 01000000 		.word	1
 5214 0430 7C587C00 		.ascii	"|X|\000"
 5215 0434 00000000 		.space	4
 5216 0438 329C00   		.ascii	"2\234\000"
ARM GAS  /tmp/ccTMmuhz.s 			page 137


 5217 043b 00000000 		.space	5
 5217      00
 5218 0440 25       		.byte	37
 5219 0441 000000   		.space	3
 5220 0444 02000000 		.word	2
 5221 0448 14       		.byte	20
 5222 0449 000000   		.space	3
 5223 044c 02000000 		.word	2
 5224 0450 524E4400 		.ascii	"RND\000"
 5225 0454 00000000 		.space	4
 5226 0458 4C6F67BA 		.ascii	"Log\272\000"
 5226      00
 5227 045d 000000   		.space	3
 5228 0460 26       		.byte	38
 5229 0461 000000   		.space	3
 5230 0464 01000000 		.word	1
 5231 0468 15       		.byte	21
 5232 0469 000000   		.space	3
 5233 046c 02000000 		.word	2
 5234 0470 49506172 		.ascii	"IPart\000"
 5234      7400
 5235 0476 0000     		.space	2
 5236 0478 4C6F678B 		.ascii	"Log\213\000"
 5236      00
 5237 047d 000000   		.space	3
 5238 0480 26       		.byte	38
 5239 0481 000000   		.space	3
 5240 0484 02000000 		.word	2
 5241 0488 16       		.byte	22
 5242 0489 000000   		.space	3
 5243 048c 02000000 		.word	2
 5244 0490 46506172 		.ascii	"FPart\000"
 5244      7400
 5245 0496 0000     		.space	2
 5246 0498 7C7C656C 		.ascii	"||el\000"
 5246      00
 5247 049d 000000   		.space	3
 5248 04a0 2C       		.byte	44
 5249 04a1 000000   		.space	3
 5250 04a4 FFFFFFFF 		.word	-1
 5251 04a8 22       		.byte	34
 5252 04a9 000000   		.space	3
 5253 04ac 02000000 		.word	2
 5254 04b0 2D2D0D00 		.ascii	"--\015\000"
 5255 04b4 00000000 		.space	4
 5256 04b8 832500   		.ascii	"\203%\000"
 5257 04bb 00000000 		.space	5
 5257      00
 5258 04c0 2D       		.byte	45
 5259 04c1 000000   		.space	3
 5260 04c4 FFFFFFFF 		.word	-1
 5261 04c8 2E       		.byte	46
 5262 04c9 000000   		.space	3
 5263 04cc FFFFFFFF 		.word	-1
 5264 04d0 43505800 		.ascii	"CPX\000"
 5265 04d4 00000000 		.space	4
 5266 04d8 00       		.ascii	"\000"
ARM GAS  /tmp/ccTMmuhz.s 			page 138


 5267 04d9 00000000 		.space	7
 5267      000000
 5268 04e0 4D5F5377 		.ascii	"M_Swap\000"
 5268      617000
 5269 04e7 00000000 		.space	8
 5269      00000000 
 5270 04ef 00       		.space	1
 5271 04f0 0D       		.byte	13
 5272 04f1 000000   		.space	3
 5273 04f4 01000000 		.word	1
 5274 04f8 34       		.byte	52
 5275 04f9 000000   		.space	3
 5276 04fc 00A60000 		.word	42496
 5277 0500 53686F77 		.ascii	"Show\016\000"
 5277      0E00
 5278 0506 0000     		.space	2
 5279 0508 5B175D00 		.ascii	"[\027]\000"
 5280 050c 00000000 		.space	4
 5281 0510 0D       		.byte	13
 5282 0511 000000   		.space	3
 5283 0514 02000000 		.word	2
 5284 0518 2E       		.byte	46
 5285 0519 000000   		.space	3
 5286 051c FFFFFFFF 		.word	-1
 5287 0520 53686F77 		.ascii	"Show\015\000"
 5287      0D00
 5288 0526 0000     		.space	2
 5289 0528 00       		.ascii	"\000"
 5290 0529 00000000 		.space	7
 5290      000000
 5291 0530 0D       		.byte	13
 5292 0531 000000   		.space	3
 5293 0534 03000000 		.word	3
 5294 0538 34       		.byte	52
 5295 0539 000000   		.space	3
 5296 053c 00330000 		.word	13056
 5297 0540 78173F00 		.ascii	"x\027?\000"
 5298 0544 00000000 		.space	4
 5299 0548 7A173F00 		.ascii	"z\027?\000"
 5300 054c 00000000 		.space	4
 5301 0550 34       		.byte	52
 5302 0551 000000   		.space	3
 5303 0554 00320000 		.word	12800
 5304 0558 34       		.byte	52
 5305 0559 000000   		.space	3
 5306 055c 00340000 		.word	13312
 5307 0560 79173F00 		.ascii	"y\027?\000"
 5308 0564 00000000 		.space	4
 5309 0568 74173F00 		.ascii	"t\027?\000"
 5310 056c 00000000 		.space	4
 5311 0570 2C       		.byte	44
 5312 0571 000000   		.space	3
 5313 0574 FFFFFFFF 		.word	-1
 5314 0578 2E       		.byte	46
 5315 0579 000000   		.space	3
 5316 057c FFFFFFFF 		.word	-1
 5317 0580 2D2D0D00 		.ascii	"--\015\000"
ARM GAS  /tmp/ccTMmuhz.s 			page 139


 5318 0584 00000000 		.space	4
 5319 0588 00       		.ascii	"\000"
 5320 0589 00000000 		.space	7
 5320      000000
 5321 0590 2D       		.byte	45
 5322 0591 000000   		.space	3
 5323 0594 FFFFFFFF 		.word	-1
 5324 0598 2E       		.byte	46
 5325 0599 000000   		.space	3
 5326 059c FFFFFFFF 		.word	-1
 5327 05a0 43505800 		.ascii	"CPX\000"
 5328 05a4 00000000 		.space	4
 5329 05a8 00       		.ascii	"\000"
 5330 05a9 00000000 		.space	7
 5330      000000
 5331 05b0 4D5F5072 		.ascii	"M_Program\000"
 5331      6F677261 
 5331      6D00
 5332 05ba 00000000 		.space	5
 5332      00
 5333 05bf 00       		.space	1
 5334 05c0 27       		.byte	39
 5335 05c1 000000   		.space	3
 5336 05c4 01000000 		.word	1
 5337 05c8 28       		.byte	40
 5338 05c9 000000   		.space	3
 5339 05cc 01000000 		.word	1
 5340 05d0 4C424C00 		.ascii	"LBL\000"
 5341 05d4 00000000 		.space	4
 5342 05d8 44534500 		.ascii	"DSE\000"
 5343 05dc 00000000 		.space	4
 5344 05e0 27       		.byte	39
 5345 05e1 000000   		.space	3
 5346 05e4 02000000 		.word	2
 5347 05e8 28       		.byte	40
 5348 05e9 000000   		.space	3
 5349 05ec 02000000 		.word	2
 5350 05f0 52544E00 		.ascii	"RTN\000"
 5351 05f4 00000000 		.space	4
 5352 05f8 49534700 		.ascii	"ISG\000"
 5353 05fc 00000000 		.space	4
 5354 0600 25       		.byte	37
 5355 0601 000000   		.space	3
 5356 0604 03000000 		.word	3
 5357 0608 34       		.byte	52
 5358 0609 000000   		.space	3
 5359 060c 00600000 		.word	24576
 5360 0610 50617573 		.ascii	"Pause\000"
 5360      6500
 5361 0616 0000     		.space	2
 5362 0618 44454300 		.ascii	"DEC\000"
 5363 061c 00000000 		.space	4
 5364 0620 12       		.byte	18
 5365 0621 000000   		.space	3
 5366 0624 03000000 		.word	3
 5367 0628 34       		.byte	52
 5368 0629 000000   		.space	3
ARM GAS  /tmp/ccTMmuhz.s 			page 140


 5369 062c 00610000 		.word	24832
 5370 0630 47544F00 		.ascii	"GTO\000"
 5371 0634 00000000 		.space	4
 5372 0638 494E4300 		.ascii	"INC\000"
 5373 063c 00000000 		.space	4
 5374 0640 2C       		.byte	44
 5375 0641 000000   		.space	3
 5376 0644 FFFFFFFF 		.word	-1
 5377 0648 34       		.byte	52
 5378 0649 000000   		.space	3
 5379 064c 00570000 		.word	22272
 5380 0650 2D2D0D00 		.ascii	"--\015\000"
 5381 0654 00000000 		.space	4
 5382 0658 4241434B 		.ascii	"BACK\000"
 5382      00
 5383 065d 000000   		.space	3
 5384 0660 2D       		.byte	45
 5385 0661 000000   		.space	3
 5386 0664 FFFFFFFF 		.word	-1
 5387 0668 34       		.byte	52
 5388 0669 000000   		.space	3
 5389 066c 00560000 		.word	22016
 5390 0670 43505800 		.ascii	"CPX\000"
 5391 0674 00000000 		.space	4
 5392 0678 534B4950 		.ascii	"SKIP\000"
 5392      00
 5393 067d 000000   		.space	3
 5394 0680 4D5F5365 		.ascii	"M_Setup1\000"
 5394      74757031 
 5394      00
 5395 0689 00000000 		.space	6
 5395      0000
 5396 068f 00       		.space	1
 5397 0690 32       		.byte	50
 5398 0691 000000   		.space	3
 5399 0694 00000000 		.word	0
 5400 0698 30       		.byte	48
 5401 0699 000000   		.space	3
 5402 069c 00000000 		.word	0
 5403 06a0 45584954 		.ascii	"EXIT\000"
 5403      00
 5404 06a5 000000   		.space	3
 5405 06a8 53797374 		.ascii	"System\000"
 5405      656D00
 5406 06af 00       		.space	1
 5407 06b0 31       		.byte	49
 5408 06b1 000000   		.space	3
 5409 06b4 09000000 		.word	9
 5410 06b8 2E       		.byte	46
 5411 06b9 000000   		.space	3
 5412 06bc FFFFFFFF 		.word	-1
 5413 06c0 48454C50 		.ascii	"HELP\000"
 5413      00
 5414 06c5 000000   		.space	3
 5415 06c8 00       		.ascii	"\000"
 5416 06c9 00000000 		.space	7
 5416      000000
ARM GAS  /tmp/ccTMmuhz.s 			page 141


 5417 06d0 31       		.byte	49
 5418 06d1 000000   		.space	3
 5419 06d4 02000000 		.word	2
 5420 06d8 31       		.byte	49
 5421 06d9 000000   		.space	3
 5422 06dc 06000000 		.word	6
 5423 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5423      4F00
 5424 06e6 0000     		.space	2
 5425 06e8 53765241 		.ascii	"SvRAM\000"
 5425      4D00
 5426 06ee 0000     		.space	2
 5427 06f0 31       		.byte	49
 5428 06f1 000000   		.space	3
 5429 06f4 03000000 		.word	3
 5430 06f8 31       		.byte	49
 5431 06f9 000000   		.space	3
 5432 06fc 07000000 		.word	7
 5433 0700 4F6E5243 		.ascii	"OnRCL\000"
 5433      4C00
 5434 0706 0000     		.space	2
 5435 0708 4C645241 		.ascii	"LdRAM\000"
 5435      4D00
 5436 070e 0000     		.space	2
 5437 0710 2C       		.byte	44
 5438 0711 000000   		.space	3
 5439 0714 FFFFFFFF 		.word	-1
 5440 0718 2E       		.byte	46
 5441 0719 000000   		.space	3
 5442 071c FFFFFFFF 		.word	-1
 5443 0720 2D2D0D00 		.ascii	"--\015\000"
 5444 0724 00000000 		.space	4
 5445 0728 00       		.ascii	"\000"
 5446 0729 00000000 		.space	7
 5446      000000
 5447 0730 2D       		.byte	45
 5448 0731 000000   		.space	3
 5449 0734 FFFFFFFF 		.word	-1
 5450 0738 2E       		.byte	46
 5451 0739 000000   		.space	3
 5452 073c FFFFFFFF 		.word	-1
 5453 0740 43505800 		.ascii	"CPX\000"
 5454 0744 00000000 		.space	4
 5455 0748 00       		.ascii	"\000"
 5456 0749 00000000 		.space	7
 5456      000000
 5457 0750 4D5F4172 		.ascii	"M_Arrow\000"
 5457      726F7700 
 5458 0758 00000000 		.space	7
 5458      000000
 5459 075f 00       		.space	1
 5460 0760 0E       		.byte	14
 5461 0761 000000   		.space	3
 5462 0764 01000000 		.word	1
 5463 0768 06       		.byte	6
 5464 0769 000000   		.space	3
 5465 076c 02000000 		.word	2
ARM GAS  /tmp/ccTMmuhz.s 			page 142


 5466 0770 42696E00 		.ascii	"Bin\000"
 5467 0774 00000000 		.space	4
 5468 0778 44454700 		.ascii	"DEG\000"
 5469 077c 00000000 		.space	4
 5470 0780 0E       		.byte	14
 5471 0781 000000   		.space	3
 5472 0784 02000000 		.word	2
 5473 0788 07       		.byte	7
 5474 0789 000000   		.space	3
 5475 078c 02000000 		.word	2
 5476 0790 4F637400 		.ascii	"Oct\000"
 5477 0794 00000000 		.space	4
 5478 0798 52414400 		.ascii	"RAD\000"
 5479 079c 00000000 		.space	4
 5480 07a0 0F       		.byte	15
 5481 07a1 000000   		.space	3
 5482 07a4 01000000 		.word	1
 5483 07a8 08       		.byte	8
 5484 07a9 000000   		.space	3
 5485 07ac 02000000 		.word	2
 5486 07b0 44656300 		.ascii	"Dec\000"
 5487 07b4 00000000 		.space	4
 5488 07b8 47726164 		.ascii	"Grad\000"
 5488      00
 5489 07bd 000000   		.space	3
 5490 07c0 0F       		.byte	15
 5491 07c1 000000   		.space	3
 5492 07c4 02000000 		.word	2
 5493 07c8 06       		.byte	6
 5494 07c9 000000   		.space	3
 5495 07cc 01000000 		.word	1
 5496 07d0 48657800 		.ascii	"Hex\000"
 5497 07d4 00000000 		.space	4
 5498 07d8 0D484D53 		.ascii	"\015HMS\000"
 5498      00
 5499 07dd 000000   		.space	3
 5500 07e0 2C       		.byte	44
 5501 07e1 000000   		.space	3
 5502 07e4 FFFFFFFF 		.word	-1
 5503 07e8 07       		.byte	7
 5504 07e9 000000   		.space	3
 5505 07ec 01000000 		.word	1
 5506 07f0 2D2D0D00 		.ascii	"--\015\000"
 5507 07f4 00000000 		.space	4
 5508 07f8 484D530D 		.ascii	"HMS\015\000"
 5508      00
 5509 07fd 000000   		.space	3
 5510 0800 2D       		.byte	45
 5511 0801 000000   		.space	3
 5512 0804 FFFFFFFF 		.word	-1
 5513 0808 2E       		.byte	46
 5514 0809 000000   		.space	3
 5515 080c FFFFFFFF 		.word	-1
 5516 0810 43505800 		.ascii	"CPX\000"
 5517 0814 00000000 		.space	4
 5518 0818 00       		.ascii	"\000"
 5519 0819 00000000 		.space	7
ARM GAS  /tmp/ccTMmuhz.s 			page 143


 5519      000000
 5520 0820 4D5F466C 		.ascii	"M_Flags\000"
 5520      61677300 
 5521 0828 00000000 		.space	7
 5521      000000
 5522 082f 00       		.space	1
 5523 0830 1E       		.byte	30
 5524 0831 000000   		.space	3
 5525 0834 01000000 		.word	1
 5526 0838 34       		.byte	52
 5527 0839 000000   		.space	3
 5528 083c 00740000 		.word	29696
 5529 0840 53465F00 		.ascii	"SF_\000"
 5530 0844 00000000 		.space	4
 5531 0848 46533F00 		.ascii	"FS?\000"
 5532 084c 00000000 		.space	4
 5533 0850 1E       		.byte	30
 5534 0851 000000   		.space	3
 5535 0854 02000000 		.word	2
 5536 0858 34       		.byte	52
 5537 0859 000000   		.space	3
 5538 085c 00750000 		.word	29952
 5539 0860 43465F00 		.ascii	"CF_\000"
 5540 0864 00000000 		.space	4
 5541 0868 46433F00 		.ascii	"FC?\000"
 5542 086c 00000000 		.space	4
 5543 0870 1F       		.byte	31
 5544 0871 000000   		.space	3
 5545 0874 01000000 		.word	1
 5546 0878 34       		.byte	52
 5547 0879 000000   		.space	3
 5548 087c 00500000 		.word	20480
 5549 0880 783D3F00 		.ascii	"x=?\000"
 5550 0884 00000000 		.space	4
 5551 0888 783C3F00 		.ascii	"x<?\000"
 5552 088c 00000000 		.space	4
 5553 0890 1F       		.byte	31
 5554 0891 000000   		.space	3
 5555 0894 02000000 		.word	2
 5556 0898 34       		.byte	52
 5557 0899 000000   		.space	3
 5558 089c 00510000 		.word	20736
 5559 08a0 780B3F00 		.ascii	"x\013?\000"
 5560 08a4 00000000 		.space	4
 5561 08a8 783C3D3F 		.ascii	"x<=?\000"
 5561      00
 5562 08ad 000000   		.space	3
 5563 08b0 2C       		.byte	44
 5564 08b1 000000   		.space	3
 5565 08b4 FFFFFFFF 		.word	-1
 5566 08b8 34       		.byte	52
 5567 08b9 000000   		.space	3
 5568 08bc 00530000 		.word	21248
 5569 08c0 2D2D0D00 		.ascii	"--\015\000"
 5570 08c4 00000000 		.space	4
 5571 08c8 783E3D3F 		.ascii	"x>=?\000"
 5571      00
ARM GAS  /tmp/ccTMmuhz.s 			page 144


 5572 08cd 000000   		.space	3
 5573 08d0 2D       		.byte	45
 5574 08d1 000000   		.space	3
 5575 08d4 FFFFFFFF 		.word	-1
 5576 08d8 34       		.byte	52
 5577 08d9 000000   		.space	3
 5578 08dc 00520000 		.word	20992
 5579 08e0 43505800 		.ascii	"CPX\000"
 5580 08e4 00000000 		.space	4
 5581 08e8 783E3F00 		.ascii	"x>?\000"
 5582 08ec 00000000 		.space	4
 5583 08f0 4D5F5072 		.ascii	"M_Prob\000"
 5583      6F6200
 5584 08f7 00000000 		.space	8
 5584      00000000 
 5585 08ff 00       		.space	1
 5586 0900 18       		.byte	24
 5587 0901 000000   		.space	3
 5588 0904 03000000 		.word	3
 5589 0908 34       		.byte	52
 5590 0909 000000   		.space	3
 5591 090c 31020000 		.word	561
 5592 0910 46616374 		.ascii	"Fact!\000"
 5592      2100
 5593 0916 0000     		.space	2
 5594 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5594      00
 5595 091d 000000   		.space	3
 5596 0920 18       		.byte	24
 5597 0921 000000   		.space	3
 5598 0924 01000000 		.word	1
 5599 0928 19       		.byte	25
 5600 0929 000000   		.space	3
 5601 092c 01000000 		.word	1
 5602 0930 43792C78 		.ascii	"Cy,x\000"
 5602      00
 5603 0935 000000   		.space	3
 5604 0938 9400     		.ascii	"\224\000"
 5605 093a 00000000 		.space	6
 5605      0000
 5606 0940 18       		.byte	24
 5607 0941 000000   		.space	3
 5608 0944 02000000 		.word	2
 5609 0948 19       		.byte	25
 5610 0949 000000   		.space	3
 5611 094c 02000000 		.word	2
 5612 0950 50792C78 		.ascii	"Py,x\000"
 5612      00
 5613 0955 000000   		.space	3
 5614 0958 949D00   		.ascii	"\224\235\000"
 5615 095b 00000000 		.space	5
 5615      00
 5616 0960 08       		.byte	8
 5617 0961 000000   		.space	3
 5618 0964 01000000 		.word	1
 5619 0968 34       		.byte	52
 5620 0969 000000   		.space	3
ARM GAS  /tmp/ccTMmuhz.s 			page 145


 5621 096c 34010000 		.word	308
 5622 0970 52414E23 		.ascii	"RAN#\000"
 5622      00
 5623 0975 000000   		.space	3
 5624 0978 53454544 		.ascii	"SEED\000"
 5624      00
 5625 097d 000000   		.space	3
 5626 0980 2C       		.byte	44
 5627 0981 000000   		.space	3
 5628 0984 FFFFFFFF 		.word	-1
 5629 0988 2E       		.byte	46
 5630 0989 000000   		.space	3
 5631 098c FFFFFFFF 		.word	-1
 5632 0990 2D2D0D00 		.ascii	"--\015\000"
 5633 0994 00000000 		.space	4
 5634 0998 00       		.ascii	"\000"
 5635 0999 00000000 		.space	7
 5635      000000
 5636 09a0 2D       		.byte	45
 5637 09a1 000000   		.space	3
 5638 09a4 FFFFFFFF 		.word	-1
 5639 09a8 2E       		.byte	46
 5640 09a9 000000   		.space	3
 5641 09ac FFFFFFFF 		.word	-1
 5642 09b0 43505800 		.ascii	"CPX\000"
 5643 09b4 00000000 		.space	4
 5644 09b8 00       		.ascii	"\000"
 5645 09b9 00000000 		.space	7
 5645      000000
 5646 09c0 4D5F5374 		.ascii	"M_Stats\000"
 5646      61747300 
 5647 09c8 00000000 		.space	7
 5647      000000
 5648 09cf 00       		.space	1
 5649 09d0 1A       		.byte	26
 5650 09d1 000000   		.space	3
 5651 09d4 01000000 		.word	1
 5652 09d8 1A       		.byte	26
 5653 09d9 000000   		.space	3
 5654 09dc 02000000 		.word	2
 5655 09e0 0100     		.ascii	"\001\000"
 5656 09e2 00000000 		.space	6
 5656      0000
 5657 09e8 532E442E 		.ascii	"S.D.\000"
 5657      00
 5658 09ed 000000   		.space	3
 5659 09f0 1B       		.byte	27
 5660 09f1 000000   		.space	3
 5661 09f4 01000000 		.word	1
 5662 09f8 34       		.byte	52
 5663 09f9 000000   		.space	3
 5664 09fc 74020000 		.word	628
 5665 0a00 792D6861 		.ascii	"y-hat\000"
 5665      7400
 5666 0a06 0000     		.space	2
 5667 0a08 782D6861 		.ascii	"x-hat\000"
 5667      7400
ARM GAS  /tmp/ccTMmuhz.s 			page 146


 5668 0a0e 0000     		.space	2
 5669 0a10 34       		.byte	52
 5670 0a11 000000   		.space	3
 5671 0a14 27010000 		.word	295
 5672 0a18 34       		.byte	52
 5673 0a19 000000   		.space	3
 5674 0a1c 28010000 		.word	296
 5675 0a20 434F5252 		.ascii	"CORR\000"
 5675      00
 5676 0a25 000000   		.space	3
 5677 0a28 4C2E522E 		.ascii	"L.R.\000"
 5677      00
 5678 0a2d 000000   		.space	3
 5679 0a30 34       		.byte	52
 5680 0a31 000000   		.space	3
 5681 0a34 32010000 		.word	306
 5682 0a38 34       		.byte	52
 5683 0a39 000000   		.space	3
 5684 0a3c 31010000 		.word	305
 5685 0a40 42657374 		.ascii	"BestF\000"
 5685      4600
 5686 0a46 0000     		.space	2
 5687 0a48 4C6F6746 		.ascii	"LogFit\000"
 5687      697400
 5688 0a4f 00       		.space	1
 5689 0a50 34       		.byte	52
 5690 0a51 000000   		.space	3
 5691 0a54 2E010000 		.word	302
 5692 0a58 34       		.byte	52
 5693 0a59 000000   		.space	3
 5694 0a5c 2F010000 		.word	303
 5695 0a60 4C696E65 		.ascii	"Linear\000"
 5695      617200
 5696 0a67 00       		.space	1
 5697 0a68 45787046 		.ascii	"ExpFit\000"
 5697      697400
 5698 0a6f 00       		.space	1
 5699 0a70 2D       		.byte	45
 5700 0a71 000000   		.space	3
 5701 0a74 FFFFFFFF 		.word	-1
 5702 0a78 34       		.byte	52
 5703 0a79 000000   		.space	3
 5704 0a7c 30010000 		.word	304
 5705 0a80 43505800 		.ascii	"CPX\000"
 5706 0a84 00000000 		.space	4
 5707 0a88 50777246 		.ascii	"PwrFit\000"
 5707      697400
 5708 0a8f 00       		.space	1
 5709 0a90 4D5F5365 		.ascii	"M_Setup2\000"
 5709      74757032 
 5709      00
 5710 0a99 00000000 		.space	6
 5710      0000
 5711 0a9f 00       		.space	1
 5712 0aa0 31       		.byte	49
 5713 0aa1 000000   		.space	3
 5714 0aa4 04000000 		.word	4
ARM GAS  /tmp/ccTMmuhz.s 			page 147


 5715 0aa8 2E       		.byte	46
 5716 0aa9 000000   		.space	3
 5717 0aac FFFFFFFF 		.word	-1
 5718 0ab0 53764C49 		.ascii	"SvLIB\000"
 5718      4200
 5719 0ab6 0000     		.space	2
 5720 0ab8 00       		.ascii	"\000"
 5721 0ab9 00000000 		.space	7
 5721      000000
 5722 0ac0 31       		.byte	49
 5723 0ac1 000000   		.space	3
 5724 0ac4 05000000 		.word	5
 5725 0ac8 2E       		.byte	46
 5726 0ac9 000000   		.space	3
 5727 0acc FFFFFFFF 		.word	-1
 5728 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5728      4200
 5729 0ad6 0000     		.space	2
 5730 0ad8 00       		.ascii	"\000"
 5731 0ad9 00000000 		.space	7
 5731      000000
 5732 0ae0 31       		.byte	49
 5733 0ae1 000000   		.space	3
 5734 0ae4 0A000000 		.word	10
 5735 0ae8 2E       		.byte	46
 5736 0ae9 000000   		.space	3
 5737 0aec FFFFFFFF 		.word	-1
 5738 0af0 53764350 		.ascii	"SvCPRG\000"
 5738      524700
 5739 0af7 00       		.space	1
 5740 0af8 00       		.ascii	"\000"
 5741 0af9 00000000 		.space	7
 5741      000000
 5742 0b00 31       		.byte	49
 5743 0b01 000000   		.space	3
 5744 0b04 08000000 		.word	8
 5745 0b08 2E       		.byte	46
 5746 0b09 000000   		.space	3
 5747 0b0c FFFFFFFF 		.word	-1
 5748 0b10 4C645052 		.ascii	"LdPRG\000"
 5748      4700
 5749 0b16 0000     		.space	2
 5750 0b18 00       		.ascii	"\000"
 5751 0b19 00000000 		.space	7
 5751      000000
 5752 0b20 2C       		.byte	44
 5753 0b21 000000   		.space	3
 5754 0b24 FFFFFFFF 		.word	-1
 5755 0b28 2E       		.byte	46
 5756 0b29 000000   		.space	3
 5757 0b2c FFFFFFFF 		.word	-1
 5758 0b30 2D2D0D00 		.ascii	"--\015\000"
 5759 0b34 00000000 		.space	4
 5760 0b38 00       		.ascii	"\000"
 5761 0b39 00000000 		.space	7
 5761      000000
 5762 0b40 2D       		.byte	45
ARM GAS  /tmp/ccTMmuhz.s 			page 148


 5763 0b41 000000   		.space	3
 5764 0b44 FFFFFFFF 		.word	-1
 5765 0b48 2E       		.byte	46
 5766 0b49 000000   		.space	3
 5767 0b4c FFFFFFFF 		.word	-1
 5768 0b50 43505800 		.ascii	"CPX\000"
 5769 0b54 00000000 		.space	4
 5770 0b58 00       		.ascii	"\000"
 5771 0b59 00000000 		.space	7
 5771      000000
 5772 0b60 4D5F536F 		.ascii	"M_Solve\000"
 5772      6C766500 
 5773 0b68 00000000 		.space	7
 5773      000000
 5774 0b6f 00       		.space	1
 5775 0b70 20       		.byte	32
 5776 0b71 000000   		.space	3
 5777 0b74 01000000 		.word	1
 5778 0b78 2E       		.byte	46
 5779 0b79 000000   		.space	3
 5780 0b7c FFFFFFFF 		.word	-1
 5781 0b80 534C5600 		.ascii	"SLV\000"
 5782 0b84 00000000 		.space	4
 5783 0b88 00       		.ascii	"\000"
 5784 0b89 00000000 		.space	7
 5784      000000
 5785 0b90 20       		.byte	32
 5786 0b91 000000   		.space	3
 5787 0b94 02000000 		.word	2
 5788 0b98 2E       		.byte	46
 5789 0b99 000000   		.space	3
 5790 0b9c FFFFFFFF 		.word	-1
 5791 0ba0 04206478 		.ascii	"\004 dx\000"
 5791      00
 5792 0ba5 000000   		.space	3
 5793 0ba8 00       		.ascii	"\000"
 5794 0ba9 00000000 		.space	7
 5794      000000
 5795 0bb0 21       		.byte	33
 5796 0bb1 000000   		.space	3
 5797 0bb4 02000000 		.word	2
 5798 0bb8 2E       		.byte	46
 5799 0bb9 000000   		.space	3
 5800 0bbc FFFFFFFF 		.word	-1
 5801 0bc0 53554D00 		.ascii	"SUM\000"
 5802 0bc4 00000000 		.space	4
 5803 0bc8 00       		.ascii	"\000"
 5804 0bc9 00000000 		.space	7
 5804      000000
 5805 0bd0 21       		.byte	33
 5806 0bd1 000000   		.space	3
 5807 0bd4 01000000 		.word	1
 5808 0bd8 2E       		.byte	46
 5809 0bd9 000000   		.space	3
 5810 0bdc FFFFFFFF 		.word	-1
 5811 0be0 50524F44 		.ascii	"PROD\000"
 5811      00
ARM GAS  /tmp/ccTMmuhz.s 			page 149


 5812 0be5 000000   		.space	3
 5813 0be8 00       		.ascii	"\000"
 5814 0be9 00000000 		.space	7
 5814      000000
 5815 0bf0 2C       		.byte	44
 5816 0bf1 000000   		.space	3
 5817 0bf4 FFFFFFFF 		.word	-1
 5818 0bf8 2E       		.byte	46
 5819 0bf9 000000   		.space	3
 5820 0bfc FFFFFFFF 		.word	-1
 5821 0c00 2D2D0D00 		.ascii	"--\015\000"
 5822 0c04 00000000 		.space	4
 5823 0c08 00       		.ascii	"\000"
 5824 0c09 00000000 		.space	7
 5824      000000
 5825 0c10 2D       		.byte	45
 5826 0c11 000000   		.space	3
 5827 0c14 FFFFFFFF 		.word	-1
 5828 0c18 2E       		.byte	46
 5829 0c19 000000   		.space	3
 5830 0c1c FFFFFFFF 		.word	-1
 5831 0c20 43505800 		.ascii	"CPX\000"
 5832 0c24 00000000 		.space	4
 5833 0c28 00       		.ascii	"\000"
 5834 0c29 00000000 		.space	7
 5834      000000
 5835 0c30 4D5F426C 		.ascii	"M_Blank2\000"
 5835      616E6B32 
 5835      00
 5836 0c39 00000000 		.space	6
 5836      0000
 5837 0c3f 00       		.space	1
 5838 0c40 28       		.byte	40
 5839 0c41 000000   		.space	3
 5840 0c44 03000000 		.word	3
 5841 0c48 2E       		.byte	46
 5842 0c49 000000   		.space	3
 5843 0c4c FFFFFFFF 		.word	-1
 5844 0c50 912B00   		.ascii	"\221+\000"
 5845 0c53 00000000 		.space	5
 5845      00
 5846 0c58 00       		.ascii	"\000"
 5847 0c59 00000000 		.space	7
 5847      000000
 5848 0c60 16       		.byte	22
 5849 0c61 000000   		.space	3
 5850 0c64 01000000 		.word	1
 5851 0c68 2E       		.byte	46
 5852 0c69 000000   		.space	3
 5853 0c6c FFFFFFFF 		.word	-1
 5854 0c70 312F5800 		.ascii	"1/X\000"
 5855 0c74 00000000 		.space	4
 5856 0c78 00       		.ascii	"\000"
 5857 0c79 00000000 		.space	7
 5857      000000
 5858 0c80 1C       		.byte	28
 5859 0c81 000000   		.space	3
ARM GAS  /tmp/ccTMmuhz.s 			page 150


 5860 0c84 01000000 		.word	1
 5861 0c88 2E       		.byte	46
 5862 0c89 000000   		.space	3
 5863 0c8c FFFFFFFF 		.word	-1
 5864 0c90 035800   		.ascii	"\003X\000"
 5865 0c93 00000000 		.space	5
 5865      00
 5866 0c98 00       		.ascii	"\000"
 5867 0c99 00000000 		.space	7
 5867      000000
 5868 0ca0 13       		.byte	19
 5869 0ca1 000000   		.space	3
 5870 0ca4 02000000 		.word	2
 5871 0ca8 2E       		.byte	46
 5872 0ca9 000000   		.space	3
 5873 0cac FFFFFFFF 		.word	-1
 5874 0cb0 4C4F4700 		.ascii	"LOG\000"
 5875 0cb4 00000000 		.space	4
 5876 0cb8 00       		.ascii	"\000"
 5877 0cb9 00000000 		.space	7
 5877      000000
 5878 0cc0 2C       		.byte	44
 5879 0cc1 000000   		.space	3
 5880 0cc4 FFFFFFFF 		.word	-1
 5881 0cc8 2E       		.byte	46
 5882 0cc9 000000   		.space	3
 5883 0ccc FFFFFFFF 		.word	-1
 5884 0cd0 2D2D0D00 		.ascii	"--\015\000"
 5885 0cd4 00000000 		.space	4
 5886 0cd8 00       		.ascii	"\000"
 5887 0cd9 00000000 		.space	7
 5887      000000
 5888 0ce0 2D       		.byte	45
 5889 0ce1 000000   		.space	3
 5890 0ce4 FFFFFFFF 		.word	-1
 5891 0ce8 2E       		.byte	46
 5892 0ce9 000000   		.space	3
 5893 0cec FFFFFFFF 		.word	-1
 5894 0cf0 43505800 		.ascii	"CPX\000"
 5895 0cf4 00000000 		.space	4
 5896 0cf8 00       		.ascii	"\000"
 5897 0cf9 00000000 		.space	7
 5897      000000
 5898 0d00 4D5F416C 		.ascii	"M_Alpha\000"
 5898      70686100 
 5899 0d08 00000000 		.space	7
 5899      000000
 5900 0d0f 00       		.space	1
 5901 0d10 34       		.byte	52
 5902 0d11 000000   		.space	3
 5903 0d14 78010000 		.word	376
 5904 0d18 34       		.byte	52
 5905 0d19 000000   		.space	3
 5906 0d1c 6D010000 		.word	365
 5907 0d20 582D3EA0 		.ascii	"X->\240\000"
 5907      00
 5908 0d25 000000   		.space	3
ARM GAS  /tmp/ccTMmuhz.s 			page 151


 5909 0d28 A054494D 		.ascii	"\240TIME\000"
 5909      4500
 5910 0d2e 0000     		.space	2
 5911 0d30 34       		.byte	52
 5912 0d31 000000   		.space	3
 5913 0d34 77010000 		.word	375
 5914 0d38 34       		.byte	52
 5915 0d39 000000   		.space	3
 5916 0d3c 6C010000 		.word	364
 5917 0d40 A02D3E58 		.ascii	"\240->X\000"
 5917      00
 5918 0d45 000000   		.space	3
 5919 0d48 A0444154 		.ascii	"\240DATE\000"
 5919      4500
 5920 0d4e 0000     		.space	2
 5921 0d50 34       		.byte	52
 5922 0d51 000000   		.space	3
 5923 0d54 00480000 		.word	18432
 5924 0d58 34       		.byte	52
 5925 0d59 000000   		.space	3
 5926 0d5c 6A010000 		.word	362
 5927 0d60 A0495000 		.ascii	"\240IP\000"
 5928 0d64 00000000 		.space	4
 5929 0d68 A0444159 		.ascii	"\240DAY\000"
 5929      00
 5930 0d6d 000000   		.space	3
 5931 0d70 34       		.byte	52
 5932 0d71 000000   		.space	3
 5933 0d74 76010000 		.word	374
 5934 0d78 34       		.byte	52
 5935 0d79 000000   		.space	3
 5936 0d7c 6B010000 		.word	363
 5937 0d80 A04C454E 		.ascii	"\240LENG\000"
 5937      4700
 5938 0d86 0000     		.space	2
 5939 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 5939      4800
 5940 0d8e 0000     		.space	2
 5941 0d90 2C       		.byte	44
 5942 0d91 000000   		.space	3
 5943 0d94 FFFFFFFF 		.word	-1
 5944 0d98 2C       		.byte	44
 5945 0d99 000000   		.space	3
 5946 0d9c 01000000 		.word	1
 5947 0da0 2D2D0D00 		.ascii	"--\015\000"
 5948 0da4 00000000 		.space	4
 5949 0da8 00       		.ascii	"\000"
 5950 0da9 00000000 		.space	7
 5950      000000
 5951 0db0 2D       		.byte	45
 5952 0db1 000000   		.space	3
 5953 0db4 FFFFFFFF 		.word	-1
 5954 0db8 2D       		.byte	45
 5955 0db9 000000   		.space	3
 5956 0dbc 01000000 		.word	1
 5957 0dc0 43505800 		.ascii	"CPX\000"
 5958 0dc4 00000000 		.space	4
ARM GAS  /tmp/ccTMmuhz.s 			page 152


 5959 0dc8 00       		.ascii	"\000"
 5960 0dc9 00000000 		.space	7
 5960      000000
 5961 0dd0 4D5F435F 		.ascii	"M_C_Lock\000"
 5961      4C6F636B 
 5961      00
 5962 0dd9 00000000 		.space	6
 5962      0000
 5963 0ddf 00       		.space	1
 5964 0de0 18       		.byte	24
 5965 0de1 000000   		.space	3
 5966 0de4 02000000 		.word	2
 5967 0de8 04       		.byte	4
 5968 0de9 000000   		.space	3
 5969 0dec 02000000 		.word	2
 5970 0df0 504F4C41 		.ascii	"POLAR\000"
 5970      5200
 5971 0df6 0000     		.space	2
 5972 0df8 0D205000 		.ascii	"\015 P\000"
 5973 0dfc 00000000 		.space	4
 5974 0e00 18       		.byte	24
 5975 0e01 000000   		.space	3
 5976 0e04 01000000 		.word	1
 5977 0e08 04       		.byte	4
 5978 0e09 000000   		.space	3
 5979 0e0c 01000000 		.word	1
 5980 0e10 52454354 		.ascii	"RECT\000"
 5980      00
 5981 0e15 000000   		.space	3
 5982 0e18 0D205200 		.ascii	"\015 R\000"
 5983 0e1c 00000000 		.space	4
 5984 0e20 0E       		.byte	14
 5985 0e21 000000   		.space	3
 5986 0e24 01000000 		.word	1
 5987 0e28 0E       		.byte	14
 5988 0e29 000000   		.space	3
 5989 0e2c 03000000 		.word	3
 5990 0e30 43485306 		.ascii	"CHS\006y\000"
 5990      7900
 5991 0e36 0000     		.space	2
 5992 0e38 43485306 		.ascii	"CHS\006x\000"
 5992      7800
 5993 0e3e 0000     		.space	2
 5994 0e40 0D       		.byte	13
 5995 0e41 000000   		.space	3
 5996 0e44 01000000 		.word	1
 5997 0e48 00       		.byte	0
 5998 0e49 000000   		.space	3
 5999 0e4c 01000000 		.word	1
 6000 0e50 78177900 		.ascii	"x\027y\000"
 6001 0e54 00000000 		.space	4
 6002 0e58 48595000 		.ascii	"HYP\000"
 6003 0e5c 00000000 		.space	4
 6004 0e60 2C       		.byte	44
 6005 0e61 000000   		.space	3
 6006 0e64 FFFFFFFF 		.word	-1
 6007 0e68 0F       		.byte	15
ARM GAS  /tmp/ccTMmuhz.s 			page 153


 6008 0e69 000000   		.space	3
 6009 0e6c 01000000 		.word	1
 6010 0e70 2D2D0D00 		.ascii	"--\015\000"
 6011 0e74 00000000 		.space	4
 6012 0e78 1106AF00 		.ascii	"\021\006\257\000"
 6013 0e7c 00000000 		.space	4
 6014 0e80 2D       		.byte	45
 6015 0e81 000000   		.space	3
 6016 0e84 FFFFFFFF 		.word	-1
 6017 0e88 0C       		.byte	12
 6018 0e89 000000   		.space	3
 6019 0e8c 01000000 		.word	1
 6020 0e90 43505800 		.ascii	"CPX\000"
 6021 0e94 00000000 		.space	4
 6022 0e98 1106434E 		.ascii	"\021\006CNST\000"
 6022      535400
 6023 0e9f 00       		.space	1
 6024 0ea0 4D5F436C 		.ascii	"M_Clear_C\000"
 6024      6561725F 
 6024      4300
 6025 0eaa 00000000 		.space	5
 6025      00
 6026 0eaf 00       		.space	1
 6027 0eb0 2E       		.byte	46
 6028 0eb1 000000   		.space	3
 6029 0eb4 FFFFFFFF 		.word	-1
 6030 0eb8 2E       		.byte	46
 6031 0eb9 000000   		.space	3
 6032 0ebc FFFFFFFF 		.word	-1
 6033 0ec0 00       		.ascii	"\000"
 6034 0ec1 00000000 		.space	7
 6034      000000
 6035 0ec8 00       		.ascii	"\000"
 6036 0ec9 00000000 		.space	7
 6036      000000
 6037 0ed0 2E       		.byte	46
 6038 0ed1 000000   		.space	3
 6039 0ed4 FFFFFFFF 		.word	-1
 6040 0ed8 2E       		.byte	46
 6041 0ed9 000000   		.space	3
 6042 0edc FFFFFFFF 		.word	-1
 6043 0ee0 00       		.ascii	"\000"
 6044 0ee1 00000000 		.space	7
 6044      000000
 6045 0ee8 00       		.ascii	"\000"
 6046 0ee9 00000000 		.space	7
 6046      000000
 6047 0ef0 10       		.byte	16
 6048 0ef1 000000   		.space	3
 6049 0ef4 03000000 		.word	3
 6050 0ef8 34       		.byte	52
 6051 0ef9 000000   		.space	3
 6052 0efc 74010000 		.word	372
 6053 0f00 434C7800 		.ascii	"CLx\000"
 6054 0f04 00000000 		.space	4
 6055 0f08 434C06A0 		.ascii	"CL\006\240\000"
 6055      00
ARM GAS  /tmp/ccTMmuhz.s 			page 154


 6056 0f0d 000000   		.space	3
 6057 0f10 34       		.byte	52
 6058 0f11 000000   		.space	3
 6059 0f14 40010000 		.word	320
 6060 0f18 2E       		.byte	46
 6061 0f19 000000   		.space	3
 6062 0f1c FFFFFFFF 		.word	-1
 6063 0f20 434C5374 		.ascii	"CLStk\000"
 6063      6B00
 6064 0f26 0000     		.space	2
 6065 0f28 00       		.ascii	"\000"
 6066 0f29 00000000 		.space	7
 6066      000000
 6067 0f30 2C       		.byte	44
 6068 0f31 000000   		.space	3
 6069 0f34 FFFFFFFF 		.word	-1
 6070 0f38 2E       		.byte	46
 6071 0f39 000000   		.space	3
 6072 0f3c FFFFFFFF 		.word	-1
 6073 0f40 2D2D0D00 		.ascii	"--\015\000"
 6074 0f44 00000000 		.space	4
 6075 0f48 00       		.ascii	"\000"
 6076 0f49 00000000 		.space	7
 6076      000000
 6077 0f50 2D       		.byte	45
 6078 0f51 000000   		.space	3
 6079 0f54 FFFFFFFF 		.word	-1
 6080 0f58 2E       		.byte	46
 6081 0f59 000000   		.space	3
 6082 0f5c FFFFFFFF 		.word	-1
 6083 0f60 43505800 		.ascii	"CPX\000"
 6084 0f64 00000000 		.space	4
 6085 0f68 00       		.ascii	"\000"
 6086 0f69 00000000 		.space	7
 6086      000000
 6087 0f70 4D5F5377 		.ascii	"M_Swap_C\000"
 6087      61705F43 
 6087      00
 6088 0f79 00000000 		.space	6
 6088      0000
 6089 0f7f 00       		.space	1
 6090 0f80 0D       		.byte	13
 6091 0f81 000000   		.space	3
 6092 0f84 01000000 		.word	1
 6093 0f88 2E       		.byte	46
 6094 0f89 000000   		.space	3
 6095 0f8c FFFFFFFF 		.word	-1
 6096 0f90 53686F77 		.ascii	"Show\016\000"
 6096      0E00
 6097 0f96 0000     		.space	2
 6098 0f98 00       		.ascii	"\000"
 6099 0f99 00000000 		.space	7
 6099      000000
 6100 0fa0 0D       		.byte	13
 6101 0fa1 000000   		.space	3
 6102 0fa4 02000000 		.word	2
 6103 0fa8 2E       		.byte	46
ARM GAS  /tmp/ccTMmuhz.s 			page 155


 6104 0fa9 000000   		.space	3
 6105 0fac FFFFFFFF 		.word	-1
 6106 0fb0 53686F77 		.ascii	"Show\015\000"
 6106      0D00
 6107 0fb6 0000     		.space	2
 6108 0fb8 00       		.ascii	"\000"
 6109 0fb9 00000000 		.space	7
 6109      000000
 6110 0fc0 0D       		.byte	13
 6111 0fc1 000000   		.space	3
 6112 0fc4 03000000 		.word	3
 6113 0fc8 2E       		.byte	46
 6114 0fc9 000000   		.space	3
 6115 0fcc FFFFFFFF 		.word	-1
 6116 0fd0 78173F00 		.ascii	"x\027?\000"
 6117 0fd4 00000000 		.space	4
 6118 0fd8 00       		.ascii	"\000"
 6119 0fd9 00000000 		.space	7
 6119      000000
 6120 0fe0 2E       		.byte	46
 6121 0fe1 000000   		.space	3
 6122 0fe4 FFFFFFFF 		.word	-1
 6123 0fe8 2E       		.byte	46
 6124 0fe9 000000   		.space	3
 6125 0fec FFFFFFFF 		.word	-1
 6126 0ff0 00       		.ascii	"\000"
 6127 0ff1 00000000 		.space	7
 6127      000000
 6128 0ff8 00       		.ascii	"\000"
 6129 0ff9 00000000 		.space	7
 6129      000000
 6130 1000 2C       		.byte	44
 6131 1001 000000   		.space	3
 6132 1004 FFFFFFFF 		.word	-1
 6133 1008 2E       		.byte	46
 6134 1009 000000   		.space	3
 6135 100c FFFFFFFF 		.word	-1
 6136 1010 2D2D0D00 		.ascii	"--\015\000"
 6137 1014 00000000 		.space	4
 6138 1018 00       		.ascii	"\000"
 6139 1019 00000000 		.space	7
 6139      000000
 6140 1020 2D       		.byte	45
 6141 1021 000000   		.space	3
 6142 1024 FFFFFFFF 		.word	-1
 6143 1028 2E       		.byte	46
 6144 1029 000000   		.space	3
 6145 102c FFFFFFFF 		.word	-1
 6146 1030 43505800 		.ascii	"CPX\000"
 6147 1034 00000000 		.space	4
 6148 1038 00       		.ascii	"\000"
 6149 1039 00000000 		.space	7
 6149      000000
 6150 1040 4D5F4172 		.ascii	"M_Arrow_C\000"
 6150      726F775F 
 6150      4300
 6151 104a 00000000 		.space	5
ARM GAS  /tmp/ccTMmuhz.s 			page 156


 6151      00
 6152 104f 00       		.space	1
 6153 1050 2E       		.byte	46
 6154 1051 000000   		.space	3
 6155 1054 FFFFFFFF 		.word	-1
 6156 1058 06       		.byte	6
 6157 1059 000000   		.space	3
 6158 105c 02000000 		.word	2
 6159 1060 00       		.ascii	"\000"
 6160 1061 00000000 		.space	7
 6160      000000
 6161 1068 44454700 		.ascii	"DEG\000"
 6162 106c 00000000 		.space	4
 6163 1070 2E       		.byte	46
 6164 1071 000000   		.space	3
 6165 1074 FFFFFFFF 		.word	-1
 6166 1078 07       		.byte	7
 6167 1079 000000   		.space	3
 6168 107c 02000000 		.word	2
 6169 1080 00       		.ascii	"\000"
 6170 1081 00000000 		.space	7
 6170      000000
 6171 1088 52414400 		.ascii	"RAD\000"
 6172 108c 00000000 		.space	4
 6173 1090 2E       		.byte	46
 6174 1091 000000   		.space	3
 6175 1094 FFFFFFFF 		.word	-1
 6176 1098 08       		.byte	8
 6177 1099 000000   		.space	3
 6178 109c 02000000 		.word	2
 6179 10a0 00       		.ascii	"\000"
 6180 10a1 00000000 		.space	7
 6180      000000
 6181 10a8 47726164 		.ascii	"Grad\000"
 6181      00
 6182 10ad 000000   		.space	3
 6183 10b0 2E       		.byte	46
 6184 10b1 000000   		.space	3
 6185 10b4 FFFFFFFF 		.word	-1
 6186 10b8 06       		.byte	6
 6187 10b9 000000   		.space	3
 6188 10bc 01000000 		.word	1
 6189 10c0 00       		.ascii	"\000"
 6190 10c1 00000000 		.space	7
 6190      000000
 6191 10c8 0D484D53 		.ascii	"\015HMS\000"
 6191      00
 6192 10cd 000000   		.space	3
 6193 10d0 2C       		.byte	44
 6194 10d1 000000   		.space	3
 6195 10d4 FFFFFFFF 		.word	-1
 6196 10d8 07       		.byte	7
 6197 10d9 000000   		.space	3
 6198 10dc 01000000 		.word	1
 6199 10e0 2D2D0D00 		.ascii	"--\015\000"
 6200 10e4 00000000 		.space	4
 6201 10e8 484D530D 		.ascii	"HMS\015\000"
ARM GAS  /tmp/ccTMmuhz.s 			page 157


 6201      00
 6202 10ed 000000   		.space	3
 6203 10f0 2D       		.byte	45
 6204 10f1 000000   		.space	3
 6205 10f4 FFFFFFFF 		.word	-1
 6206 10f8 2E       		.byte	46
 6207 10f9 000000   		.space	3
 6208 10fc FFFFFFFF 		.word	-1
 6209 1100 43505800 		.ascii	"CPX\000"
 6210 1104 00000000 		.space	4
 6211 1108 00       		.ascii	"\000"
 6212 1109 00000000 		.space	7
 6212      000000
 6213 1110 4D5F5072 		.ascii	"M_Prob_C\000"
 6213      6F625F43 
 6213      00
 6214 1119 00000000 		.space	6
 6214      0000
 6215 111f 00       		.space	1
 6216 1120 18       		.byte	24
 6217 1121 000000   		.space	3
 6218 1124 03000000 		.word	3
 6219 1128 34       		.byte	52
 6220 1129 000000   		.space	3
 6221 112c 31050000 		.word	1329
 6222 1130 14062100 		.ascii	"\024\006!\000"
 6223 1134 00000000 		.space	4
 6224 1138 14064C6E 		.ascii	"\024\006Ln\006\202\000"
 6224      068200
 6225 113f 00       		.space	1
 6226 1140 34       		.byte	52
 6227 1141 000000   		.space	3
 6228 1144 12060000 		.word	1554
 6229 1148 2E       		.byte	46
 6230 1149 000000   		.space	3
 6231 114c FFFFFFFF 		.word	-1
 6232 1150 14064379 		.ascii	"\024\006Cy,x\000"
 6232      2C7800
 6233 1157 00       		.space	1
 6234 1158 00       		.ascii	"\000"
 6235 1159 00000000 		.space	7
 6235      000000
 6236 1160 34       		.byte	52
 6237 1161 000000   		.space	3
 6238 1164 13060000 		.word	1555
 6239 1168 2E       		.byte	46
 6240 1169 000000   		.space	3
 6241 116c FFFFFFFF 		.word	-1
 6242 1170 14065079 		.ascii	"\024\006Py,x\000"
 6242      2C7800
 6243 1177 00       		.space	1
 6244 1178 00       		.ascii	"\000"
 6245 1179 00000000 		.space	7
 6245      000000
 6246 1180 2E       		.byte	46
 6247 1181 000000   		.space	3
 6248 1184 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccTMmuhz.s 			page 158


 6249 1188 2E       		.byte	46
 6250 1189 000000   		.space	3
 6251 118c FFFFFFFF 		.word	-1
 6252 1190 00       		.ascii	"\000"
 6253 1191 00000000 		.space	7
 6253      000000
 6254 1198 00       		.ascii	"\000"
 6255 1199 00000000 		.space	7
 6255      000000
 6256 11a0 2C       		.byte	44
 6257 11a1 000000   		.space	3
 6258 11a4 FFFFFFFF 		.word	-1
 6259 11a8 2E       		.byte	46
 6260 11a9 000000   		.space	3
 6261 11ac FFFFFFFF 		.word	-1
 6262 11b0 2D2D0D00 		.ascii	"--\015\000"
 6263 11b4 00000000 		.space	4
 6264 11b8 00       		.ascii	"\000"
 6265 11b9 00000000 		.space	7
 6265      000000
 6266 11c0 2D       		.byte	45
 6267 11c1 000000   		.space	3
 6268 11c4 FFFFFFFF 		.word	-1
 6269 11c8 2E       		.byte	46
 6270 11c9 000000   		.space	3
 6271 11cc FFFFFFFF 		.word	-1
 6272 11d0 43505800 		.ascii	"CPX\000"
 6273 11d4 00000000 		.space	4
 6274 11d8 00       		.ascii	"\000"
 6275 11d9 00000000 		.space	7
 6275      000000
 6276 11e0 4D5F426C 		.ascii	"M_Blank2_C\000"
 6276      616E6B32 
 6276      5F4300
 6277 11eb 00000000 		.space	4
 6278 11ef 00       		.space	1
 6279 11f0 00       		.byte	0
 6280 11f1 000000   		.space	3
 6281 11f4 01000000 		.word	1
 6282 11f8 2E       		.byte	46
 6283 11f9 000000   		.space	3
 6284 11fc FFFFFFFF 		.word	-1
 6285 1200 48595000 		.ascii	"HYP\000"
 6286 1204 00000000 		.space	4
 6287 1208 00       		.ascii	"\000"
 6288 1209 00000000 		.space	7
 6288      000000
 6289 1210 16       		.byte	22
 6290 1211 000000   		.space	3
 6291 1214 01000000 		.word	1
 6292 1218 2E       		.byte	46
 6293 1219 000000   		.space	3
 6294 121c FFFFFFFF 		.word	-1
 6295 1220 312F5800 		.ascii	"1/X\000"
 6296 1224 00000000 		.space	4
 6297 1228 00       		.ascii	"\000"
 6298 1229 00000000 		.space	7
ARM GAS  /tmp/ccTMmuhz.s 			page 159


 6298      000000
 6299 1230 1C       		.byte	28
 6300 1231 000000   		.space	3
 6301 1234 01000000 		.word	1
 6302 1238 2E       		.byte	46
 6303 1239 000000   		.space	3
 6304 123c FFFFFFFF 		.word	-1
 6305 1240 035800   		.ascii	"\003X\000"
 6306 1243 00000000 		.space	5
 6306      00
 6307 1248 00       		.ascii	"\000"
 6308 1249 00000000 		.space	7
 6308      000000
 6309 1250 13       		.byte	19
 6310 1251 000000   		.space	3
 6311 1254 02000000 		.word	2
 6312 1258 2E       		.byte	46
 6313 1259 000000   		.space	3
 6314 125c FFFFFFFF 		.word	-1
 6315 1260 4C4F4700 		.ascii	"LOG\000"
 6316 1264 00000000 		.space	4
 6317 1268 00       		.ascii	"\000"
 6318 1269 00000000 		.space	7
 6318      000000
 6319 1270 2C       		.byte	44
 6320 1271 000000   		.space	3
 6321 1274 FFFFFFFF 		.word	-1
 6322 1278 2E       		.byte	46
 6323 1279 000000   		.space	3
 6324 127c FFFFFFFF 		.word	-1
 6325 1280 2D2D0D00 		.ascii	"--\015\000"
 6326 1284 00000000 		.space	4
 6327 1288 00       		.ascii	"\000"
 6328 1289 00000000 		.space	7
 6328      000000
 6329 1290 2D       		.byte	45
 6330 1291 000000   		.space	3
 6331 1294 FFFFFFFF 		.word	-1
 6332 1298 2E       		.byte	46
 6333 1299 000000   		.space	3
 6334 129c FFFFFFFF 		.word	-1
 6335 12a0 43505800 		.ascii	"CPX\000"
 6336 12a4 00000000 		.space	4
 6337 12a8 00       		.ascii	"\000"
 6338 12a9 00000000 		.space	7
 6338      000000
 6339 12b0 4D5F4D69 		.ascii	"M_Misc_C\000"
 6339      73635F43 
 6339      00
 6340 12b9 00000000 		.space	6
 6340      0000
 6341 12bf 00       		.space	1
 6342 12c0 25       		.byte	37
 6343 12c1 000000   		.space	3
 6344 12c4 01000000 		.word	1
 6345 12c8 14       		.byte	20
 6346 12c9 000000   		.space	3
ARM GAS  /tmp/ccTMmuhz.s 			page 160


 6347 12cc 01000000 		.word	1
 6348 12d0 7C587C00 		.ascii	"|X|\000"
 6349 12d4 00000000 		.space	4
 6350 12d8 329C00   		.ascii	"2\234\000"
 6351 12db 00000000 		.space	5
 6351      00
 6352 12e0 25       		.byte	37
 6353 12e1 000000   		.space	3
 6354 12e4 02000000 		.word	2
 6355 12e8 14       		.byte	20
 6356 12e9 000000   		.space	3
 6357 12ec 02000000 		.word	2
 6358 12f0 524E4400 		.ascii	"RND\000"
 6359 12f4 00000000 		.space	4
 6360 12f8 4C6F67BA 		.ascii	"Log\272\000"
 6360      00
 6361 12fd 000000   		.space	3
 6362 1300 26       		.byte	38
 6363 1301 000000   		.space	3
 6364 1304 01000000 		.word	1
 6365 1308 15       		.byte	21
 6366 1309 000000   		.space	3
 6367 130c 02000000 		.word	2
 6368 1310 300D5265 		.ascii	"0\015Re\000"
 6368      00
 6369 1315 000000   		.space	3
 6370 1318 4C6F678B 		.ascii	"Log\213\000"
 6370      00
 6371 131d 000000   		.space	3
 6372 1320 26       		.byte	38
 6373 1321 000000   		.space	3
 6374 1324 02000000 		.word	2
 6375 1328 16       		.byte	22
 6376 1329 000000   		.space	3
 6377 132c 02000000 		.word	2
 6378 1330 300D496D 		.ascii	"0\015Im\000"
 6378      00
 6379 1335 000000   		.space	3
 6380 1338 7C7C656C 		.ascii	"||el\000"
 6380      00
 6381 133d 000000   		.space	3
 6382 1340 2C       		.byte	44
 6383 1341 000000   		.space	3
 6384 1344 FFFFFFFF 		.word	-1
 6385 1348 1C       		.byte	28
 6386 1349 000000   		.space	3
 6387 134c 03000000 		.word	3
 6388 1350 2D2D0D00 		.ascii	"--\015\000"
 6389 1354 00000000 		.space	4
 6390 1358 2E1C00   		.ascii	".\034\000"
 6391 135b 00000000 		.space	5
 6391      00
 6392 1360 2D       		.byte	45
 6393 1361 000000   		.space	3
 6394 1364 FFFFFFFF 		.word	-1
 6395 1368 16       		.byte	22
 6396 1369 000000   		.space	3
ARM GAS  /tmp/ccTMmuhz.s 			page 161


 6397 136c 03000000 		.word	3
 6398 1370 43505800 		.ascii	"CPX\000"
 6399 1374 00000000 		.space	4
 6400 1378 2E2F00   		.ascii	"./\000"
 6401 137b 00000000 		.space	5
 6401      00
 6402              		.section	.rodata.mapping_alpha.11114,"a"
 6403              		.align	2
 6404              		.set	.LANCHOR16,. + 0
 6407              	mapping_alpha.11114:
 6408 0000 63       		.byte	99
 6409 0001 000000   		.space	3
 6410 0004 FFFFFFFF 		.word	-1
 6411 0008 00       		.byte	0
 6412 0009 000000   		.space	3
 6413 000c FFFFFFFF 		.word	-1
 6414 0010 01       		.byte	1
 6415 0011 000000   		.space	3
 6416 0014 FFFFFFFF 		.word	-1
 6417 0018 02       		.byte	2
 6418 0019 000000   		.space	3
 6419 001c FFFFFFFF 		.word	-1
 6420 0020 03       		.byte	3
 6421 0021 000000   		.space	3
 6422 0024 FFFFFFFF 		.word	-1
 6423 0028 04       		.byte	4
 6424 0029 000000   		.space	3
 6425 002c FFFFFFFF 		.word	-1
 6426 0030 05       		.byte	5
 6427 0031 000000   		.space	3
 6428 0034 FFFFFFFF 		.word	-1
 6429 0038 06       		.byte	6
 6430 0039 000000   		.space	3
 6431 003c FFFFFFFF 		.word	-1
 6432 0040 07       		.byte	7
 6433 0041 000000   		.space	3
 6434 0044 FFFFFFFF 		.word	-1
 6435 0048 08       		.byte	8
 6436 0049 000000   		.space	3
 6437 004c FFFFFFFF 		.word	-1
 6438 0050 09       		.byte	9
 6439 0051 000000   		.space	3
 6440 0054 FFFFFFFF 		.word	-1
 6441 0058 0A       		.byte	10
 6442 0059 000000   		.space	3
 6443 005c FFFFFFFF 		.word	-1
 6444 0060 0B       		.byte	11
 6445 0061 000000   		.space	3
 6446 0064 FFFFFFFF 		.word	-1
 6447 0068 0C       		.byte	12
 6448 0069 000000   		.space	3
 6449 006c FFFFFFFF 		.word	-1
 6450 0070 0D       		.byte	13
 6451 0071 000000   		.space	3
 6452 0074 FFFFFFFF 		.word	-1
 6453 0078 0E       		.byte	14
 6454 0079 000000   		.space	3
ARM GAS  /tmp/ccTMmuhz.s 			page 162


 6455 007c FFFFFFFF 		.word	-1
 6456 0080 0F       		.byte	15
 6457 0081 000000   		.space	3
 6458 0084 FFFFFFFF 		.word	-1
 6459 0088 10       		.byte	16
 6460 0089 000000   		.space	3
 6461 008c FFFFFFFF 		.word	-1
 6462 0090 12       		.byte	18
 6463 0091 000000   		.space	3
 6464 0094 FFFFFFFF 		.word	-1
 6465 0098 13       		.byte	19
 6466 0099 000000   		.space	3
 6467 009c FFFFFFFF 		.word	-1
 6468 00a0 14       		.byte	20
 6469 00a1 000000   		.space	3
 6470 00a4 FFFFFFFF 		.word	-1
 6471 00a8 15       		.byte	21
 6472 00a9 000000   		.space	3
 6473 00ac FFFFFFFF 		.word	-1
 6474 00b0 16       		.byte	22
 6475 00b1 000000   		.space	3
 6476 00b4 FFFFFFFF 		.word	-1
 6477 00b8 18       		.byte	24
 6478 00b9 000000   		.space	3
 6479 00bc FFFFFFFF 		.word	-1
 6480 00c0 19       		.byte	25
 6481 00c1 000000   		.space	3
 6482 00c4 FFFFFFFF 		.word	-1
 6483 00c8 1A       		.byte	26
 6484 00c9 000000   		.space	3
 6485 00cc FFFFFFFF 		.word	-1
 6486 00d0 1B       		.byte	27
 6487 00d1 000000   		.space	3
 6488 00d4 FFFFFFFF 		.word	-1
 6489 00d8 1C       		.byte	28
 6490 00d9 000000   		.space	3
 6491 00dc FFFFFFFF 		.word	-1
 6492 00e0 1E       		.byte	30
 6493 00e1 000000   		.space	3
 6494 00e4 FFFFFFFF 		.word	-1
 6495 00e8 1F       		.byte	31
 6496 00e9 000000   		.space	3
 6497 00ec FFFFFFFF 		.word	-1
 6498 00f0 20       		.byte	32
 6499 00f1 000000   		.space	3
 6500 00f4 FFFFFFFF 		.word	-1
 6501 00f8 21       		.byte	33
 6502 00f9 000000   		.space	3
 6503 00fc FFFFFFFF 		.word	-1
 6504 0100 22       		.byte	34
 6505 0101 000000   		.space	3
 6506 0104 FFFFFFFF 		.word	-1
 6507 0108 24       		.byte	36
 6508 0109 000000   		.space	3
 6509 010c FFFFFFFF 		.word	-1
 6510 0110 25       		.byte	37
 6511 0111 000000   		.space	3
ARM GAS  /tmp/ccTMmuhz.s 			page 163


 6512 0114 FFFFFFFF 		.word	-1
 6513 0118 26       		.byte	38
 6514 0119 000000   		.space	3
 6515 011c FFFFFFFF 		.word	-1
 6516 0120 27       		.byte	39
 6517 0121 000000   		.space	3
 6518 0124 FFFFFFFF 		.word	-1
 6519 0128 28       		.byte	40
 6520 0129 000000   		.space	3
 6521 012c FFFFFFFF 		.word	-1
 6522 0130 2E       		.byte	46
 6523 0131 000000   		.space	3
 6524 0134 FFFFFFFF 		.word	-1
 6525 0138 2E       		.byte	46
 6526 0139 000000   		.space	3
 6527 013c FFFFFFFF 		.word	-1
 6528 0140 2E       		.byte	46
 6529 0141 000000   		.space	3
 6530 0144 FFFFFFFF 		.word	-1
 6531 0148 2E       		.byte	46
 6532 0149 000000   		.space	3
 6533 014c FFFFFFFF 		.word	-1
 6534 0150 2C       		.byte	44
 6535 0151 000000   		.space	3
 6536 0154 FFFFFFFF 		.word	-1
 6537 0158 2D       		.byte	45
 6538 0159 000000   		.space	3
 6539 015c FFFFFFFF 		.word	-1
 6540 0160 2E       		.byte	46
 6541 0161 000000   		.space	3
 6542 0164 FFFFFFFF 		.word	-1
 6543 0168 2E       		.byte	46
 6544 0169 000000   		.space	3
 6545 016c FFFFFFFF 		.word	-1
 6546 0170 2E       		.byte	46
 6547 0171 000000   		.space	3
 6548 0174 FFFFFFFF 		.word	-1
 6549              		.section	.rodata.mapping_fshift.11112,"a"
 6550              		.align	2
 6551              		.set	.LANCHOR14,. + 0
 6554              	mapping_fshift.11112:
 6555 0000 63       		.byte	99
 6556 0001 000000   		.space	3
 6557 0004 FFFFFFFF 		.word	-1
 6558 0008 22       		.byte	34
 6559 0009 000000   		.space	3
 6560 000c 03000000 		.word	3
 6561 0010 15       		.byte	21
 6562 0011 000000   		.space	3
 6563 0014 01000000 		.word	1
 6564 0018 1C       		.byte	28
 6565 0019 000000   		.space	3
 6566 001c 02000000 		.word	2
 6567 0020 13       		.byte	19
 6568 0021 000000   		.space	3
 6569 0024 01000000 		.word	1
 6570 0028 12       		.byte	18
ARM GAS  /tmp/ccTMmuhz.s 			page 164


 6571 0029 000000   		.space	3
 6572 002c 01000000 		.word	1
 6573 0030 12       		.byte	18
 6574 0031 000000   		.space	3
 6575 0034 03000000 		.word	3
 6576 0038 31       		.byte	49
 6577 0039 000000   		.space	3
 6578 003c 0F000000 		.word	15
 6579 0040 22       		.byte	34
 6580 0041 000000   		.space	3
 6581 0044 01000000 		.word	1
 6582 0048 0F       		.byte	15
 6583 0049 000000   		.space	3
 6584 004c 03000000 		.word	3
 6585 0050 01       		.byte	1
 6586 0051 000000   		.space	3
 6587 0054 02000000 		.word	2
 6588 0058 02       		.byte	2
 6589 0059 000000   		.space	3
 6590 005c 02000000 		.word	2
 6591 0060 03       		.byte	3
 6592 0061 000000   		.space	3
 6593 0064 02000000 		.word	2
 6594 0068 0C       		.byte	12
 6595 0069 000000   		.space	3
 6596 006c 01000000 		.word	1
 6597 0070 31       		.byte	49
 6598 0071 000000   		.space	3
 6599 0074 01000000 		.word	1
 6600 0078 2F       		.byte	47
 6601 0079 000000   		.space	3
 6602 007c 04000000 		.word	4
 6603 0080 2F       		.byte	47
 6604 0081 000000   		.space	3
 6605 0084 02000000 		.word	2
 6606 0088 2F       		.byte	47
 6607 0089 000000   		.space	3
 6608 008c 01000000 		.word	1
 6609 0090 18       		.byte	24
 6610 0091 000000   		.space	3
 6611 0094 00000000 		.word	0
 6612 0098 20       		.byte	32
 6613 0099 000000   		.space	3
 6614 009c 01000000 		.word	1
 6615 00a0 2F       		.byte	47
 6616 00a1 000000   		.space	3
 6617 00a4 0E000000 		.word	14
 6618 00a8 1C       		.byte	28
 6619 00a9 000000   		.space	3
 6620 00ac 03000000 		.word	3
 6621 00b0 2F       		.byte	47
 6622 00b1 000000   		.space	3
 6623 00b4 0C000000 		.word	12
 6624 00b8 1E       		.byte	30
 6625 00b9 000000   		.space	3
 6626 00bc 00000000 		.word	0
 6627 00c0 2F       		.byte	47
ARM GAS  /tmp/ccTMmuhz.s 			page 165


 6628 00c1 000000   		.space	3
 6629 00c4 03000000 		.word	3
 6630 00c8 04       		.byte	4
 6631 00c9 000000   		.space	3
 6632 00cc 03000000 		.word	3
 6633 00d0 2F       		.byte	47
 6634 00d1 000000   		.space	3
 6635 00d4 0A000000 		.word	10
 6636 00d8 2F       		.byte	47
 6637 00d9 000000   		.space	3
 6638 00dc 0B000000 		.word	11
 6639 00e0 2A       		.byte	42
 6640 00e1 000000   		.space	3
 6641 00e4 00000000 		.word	0
 6642 00e8 31       		.byte	49
 6643 00e9 000000   		.space	3
 6644 00ec 0D000000 		.word	13
 6645 00f0 2F       		.byte	47
 6646 00f1 000000   		.space	3
 6647 00f4 63000000 		.word	99
 6648 00f8 20       		.byte	32
 6649 00f9 000000   		.space	3
 6650 00fc 03000000 		.word	3
 6651 0100 2E       		.byte	46
 6652 0101 000000   		.space	3
 6653 0104 00000000 		.word	0
 6654 0108 24       		.byte	36
 6655 0109 000000   		.space	3
 6656 010c 03000000 		.word	3
 6657 0110 2F       		.byte	47
 6658 0111 000000   		.space	3
 6659 0114 08000000 		.word	8
 6660 0118 0D       		.byte	13
 6661 0119 000000   		.space	3
 6662 011c 01000000 		.word	1
 6663 0120 27       		.byte	39
 6664 0121 000000   		.space	3
 6665 0124 03000000 		.word	3
 6666 0128 06       		.byte	6
 6667 0129 000000   		.space	3
 6668 012c 03000000 		.word	3
 6669 0130 2E       		.byte	46
 6670 0131 000000   		.space	3
 6671 0134 00000000 		.word	0
 6672 0138 2E       		.byte	46
 6673 0139 000000   		.space	3
 6674 013c 00000000 		.word	0
 6675 0140 2E       		.byte	46
 6676 0141 000000   		.space	3
 6677 0144 00000000 		.word	0
 6678 0148 2E       		.byte	46
 6679 0149 000000   		.space	3
 6680 014c 00000000 		.word	0
 6681 0150 2E       		.byte	46
 6682 0151 000000   		.space	3
 6683 0154 00000000 		.word	0
 6684 0158 2E       		.byte	46
ARM GAS  /tmp/ccTMmuhz.s 			page 166


 6685 0159 000000   		.space	3
 6686 015c 00000000 		.word	0
 6687 0160 2E       		.byte	46
 6688 0161 000000   		.space	3
 6689 0164 00000000 		.word	0
 6690 0168 2F       		.byte	47
 6691 0169 000000   		.space	3
 6692 016c FFFFFFFF 		.word	-1
 6693 0170 2F       		.byte	47
 6694 0171 000000   		.space	3
 6695 0174 05000000 		.word	5
 6696              		.section	.rodata.mapping_gshift.11113,"a"
 6697              		.align	2
 6698              		.set	.LANCHOR17,. + 0
 6701              	mapping_gshift.11113:
 6702 0000 63       		.byte	99
 6703 0001 000000   		.space	3
 6704 0004 FFFFFFFF 		.word	-1
 6705 0008 28       		.byte	40
 6706 0009 000000   		.space	3
 6707 000c 03000000 		.word	3
 6708 0010 16       		.byte	22
 6709 0011 000000   		.space	3
 6710 0014 01000000 		.word	1
 6711 0018 1C       		.byte	28
 6712 0019 000000   		.space	3
 6713 001c 01000000 		.word	1
 6714 0020 13       		.byte	19
 6715 0021 000000   		.space	3
 6716 0024 02000000 		.word	2
 6717 0028 2E       		.byte	46
 6718 0029 000000   		.space	3
 6719 002c 00000000 		.word	0
 6720 0030 2E       		.byte	46
 6721 0031 000000   		.space	3
 6722 0034 00000000 		.word	0
 6723 0038 2E       		.byte	46
 6724 0039 000000   		.space	3
 6725 003c 00000000 		.word	0
 6726 0040 07       		.byte	7
 6727 0041 000000   		.space	3
 6728 0044 03000000 		.word	3
 6729 0048 08       		.byte	8
 6730 0049 000000   		.space	3
 6731 004c 03000000 		.word	3
 6732 0050 2F       		.byte	47
 6733 0051 000000   		.space	3
 6734 0054 04000000 		.word	4
 6735 0058 2F       		.byte	47
 6736 0059 000000   		.space	3
 6737 005c 04000000 		.word	4
 6738 0060 2F       		.byte	47
 6739 0061 000000   		.space	3
 6740 0064 04000000 		.word	4
 6741 0068 0C       		.byte	12
 6742 0069 000000   		.space	3
 6743 006c 02000000 		.word	2
ARM GAS  /tmp/ccTMmuhz.s 			page 167


 6744 0070 2F       		.byte	47
 6745 0071 000000   		.space	3
 6746 0074 06000000 		.word	6
 6747 0078 05       		.byte	5
 6748 0079 000000   		.space	3
 6749 007c 03000000 		.word	3
 6750 0080 2E       		.byte	46
 6751 0081 000000   		.space	3
 6752 0084 00000000 		.word	0
 6753 0088 2E       		.byte	46
 6754 0089 000000   		.space	3
 6755 008c 00000000 		.word	0
 6756 0090 2E       		.byte	46
 6757 0091 000000   		.space	3
 6758 0094 00000000 		.word	0
 6759 0098 2E       		.byte	46
 6760 0099 000000   		.space	3
 6761 009c 00000000 		.word	0
 6762 00a0 2E       		.byte	46
 6763 00a1 000000   		.space	3
 6764 00a4 00000000 		.word	0
 6765 00a8 1B       		.byte	27
 6766 00a9 000000   		.space	3
 6767 00ac 03000000 		.word	3
 6768 00b0 1A       		.byte	26
 6769 00b1 000000   		.space	3
 6770 00b4 03000000 		.word	3
 6771 00b8 2E       		.byte	46
 6772 00b9 000000   		.space	3
 6773 00bc 00000000 		.word	0
 6774 00c0 2E       		.byte	46
 6775 00c1 000000   		.space	3
 6776 00c4 00000000 		.word	0
 6777 00c8 0C       		.byte	12
 6778 00c9 000000   		.space	3
 6779 00cc 03000000 		.word	3
 6780 00d0 1F       		.byte	31
 6781 00d1 000000   		.space	3
 6782 00d4 03000000 		.word	3
 6783 00d8 19       		.byte	25
 6784 00d9 000000   		.space	3
 6785 00dc 03000000 		.word	3
 6786 00e0 2A       		.byte	42
 6787 00e1 000000   		.space	3
 6788 00e4 FFFFFFFF 		.word	-1
 6789 00e8 2E       		.byte	46
 6790 00e9 000000   		.space	3
 6791 00ec 00000000 		.word	0
 6792 00f0 31       		.byte	49
 6793 00f1 000000   		.space	3
 6794 00f4 0E000000 		.word	14
 6795 00f8 21       		.byte	33
 6796 00f9 000000   		.space	3
 6797 00fc 03000000 		.word	3
 6798 0100 2E       		.byte	46
 6799 0101 000000   		.space	3
 6800 0104 00000000 		.word	0
ARM GAS  /tmp/ccTMmuhz.s 			page 168


 6801 0108 24       		.byte	36
 6802 0109 000000   		.space	3
 6803 010c 02000000 		.word	2
 6804 0110 2F       		.byte	47
 6805 0111 000000   		.space	3
 6806 0114 0D000000 		.word	13
 6807 0118 2E       		.byte	46
 6808 0119 000000   		.space	3
 6809 011c 00000000 		.word	0
 6810 0120 2F       		.byte	47
 6811 0121 000000   		.space	3
 6812 0124 07000000 		.word	7
 6813 0128 1E       		.byte	30
 6814 0129 000000   		.space	3
 6815 012c 03000000 		.word	3
 6816 0130 2E       		.byte	46
 6817 0131 000000   		.space	3
 6818 0134 00000000 		.word	0
 6819 0138 2E       		.byte	46
 6820 0139 000000   		.space	3
 6821 013c 00000000 		.word	0
 6822 0140 2E       		.byte	46
 6823 0141 000000   		.space	3
 6824 0144 00000000 		.word	0
 6825 0148 2E       		.byte	46
 6826 0149 000000   		.space	3
 6827 014c 00000000 		.word	0
 6828 0150 2E       		.byte	46
 6829 0151 000000   		.space	3
 6830 0154 00000000 		.word	0
 6831 0158 2E       		.byte	46
 6832 0159 000000   		.space	3
 6833 015c 00000000 		.word	0
 6834 0160 2E       		.byte	46
 6835 0161 000000   		.space	3
 6836 0164 00000000 		.word	0
 6837 0168 2E       		.byte	46
 6838 0169 000000   		.space	3
 6839 016c 00000000 		.word	0
 6840 0170 2E       		.byte	46
 6841 0171 000000   		.space	3
 6842 0174 00000000 		.word	0
 6843              		.section	.rodata.mapping_none.11111,"a"
 6844              		.align	2
 6845              		.set	.LANCHOR13,. + 0
 6848              	mapping_none.11111:
 6849 0000 63       		.byte	99
 6850 0001 000000   		.space	3
 6851 0004 FFFFFFFF 		.word	-1
 6852 0008 00       		.byte	0
 6853 0009 000000   		.space	3
 6854 000c 00000000 		.word	0
 6855 0010 01       		.byte	1
 6856 0011 000000   		.space	3
 6857 0014 00000000 		.word	0
 6858 0018 03       		.byte	3
 6859 0019 000000   		.space	3
ARM GAS  /tmp/ccTMmuhz.s 			page 169


 6860 001c 00000000 		.word	0
 6861 0020 13       		.byte	19
 6862 0021 000000   		.space	3
 6863 0024 02000000 		.word	2
 6864 0028 12       		.byte	18
 6865 0029 000000   		.space	3
 6866 002c 02000000 		.word	2
 6867 0030 12       		.byte	18
 6868 0031 000000   		.space	3
 6869 0034 00000000 		.word	0
 6870 0038 06       		.byte	6
 6871 0039 000000   		.space	3
 6872 003c 00000000 		.word	0
 6873 0040 07       		.byte	7
 6874 0041 000000   		.space	3
 6875 0044 00000000 		.word	0
 6876 0048 08       		.byte	8
 6877 0049 000000   		.space	3
 6878 004c 00000000 		.word	0
 6879 0050 01       		.byte	1
 6880 0051 000000   		.space	3
 6881 0054 01000000 		.word	1
 6882 0058 02       		.byte	2
 6883 0059 000000   		.space	3
 6884 005c 01000000 		.word	1
 6885 0060 03       		.byte	3
 6886 0061 000000   		.space	3
 6887 0064 01000000 		.word	1
 6888 0068 0C       		.byte	12
 6889 0069 000000   		.space	3
 6890 006c 00000000 		.word	0
 6891 0070 0D       		.byte	13
 6892 0071 000000   		.space	3
 6893 0074 00000000 		.word	0
 6894 0078 0E       		.byte	14
 6895 0079 000000   		.space	3
 6896 007c 00000000 		.word	0
 6897 0080 0F       		.byte	15
 6898 0081 000000   		.space	3
 6899 0084 00000000 		.word	0
 6900 0088 10       		.byte	16
 6901 0089 000000   		.space	3
 6902 008c 00000000 		.word	0
 6903 0090 18       		.byte	24
 6904 0091 000000   		.space	3
 6905 0094 00000000 		.word	0
 6906 0098 13       		.byte	19
 6907 0099 000000   		.space	3
 6908 009c 00000000 		.word	0
 6909 00a0 14       		.byte	20
 6910 00a1 000000   		.space	3
 6911 00a4 00000000 		.word	0
 6912 00a8 15       		.byte	21
 6913 00a9 000000   		.space	3
 6914 00ac 00000000 		.word	0
 6915 00b0 16       		.byte	22
 6916 00b1 000000   		.space	3
ARM GAS  /tmp/ccTMmuhz.s 			page 170


 6917 00b4 00000000 		.word	0
 6918 00b8 1E       		.byte	30
 6919 00b9 000000   		.space	3
 6920 00bc 00000000 		.word	0
 6921 00c0 19       		.byte	25
 6922 00c1 000000   		.space	3
 6923 00c4 00000000 		.word	0
 6924 00c8 1A       		.byte	26
 6925 00c9 000000   		.space	3
 6926 00cc 00000000 		.word	0
 6927 00d0 1B       		.byte	27
 6928 00d1 000000   		.space	3
 6929 00d4 00000000 		.word	0
 6930 00d8 1C       		.byte	28
 6931 00d9 000000   		.space	3
 6932 00dc 00000000 		.word	0
 6933 00e0 29       		.byte	41
 6934 00e1 000000   		.space	3
 6935 00e4 00000000 		.word	0
 6936 00e8 1F       		.byte	31
 6937 00e9 000000   		.space	3
 6938 00ec 00000000 		.word	0
 6939 00f0 20       		.byte	32
 6940 00f1 000000   		.space	3
 6941 00f4 00000000 		.word	0
 6942 00f8 21       		.byte	33
 6943 00f9 000000   		.space	3
 6944 00fc 00000000 		.word	0
 6945 0100 22       		.byte	34
 6946 0101 000000   		.space	3
 6947 0104 00000000 		.word	0
 6948 0108 24       		.byte	36
 6949 0109 000000   		.space	3
 6950 010c 00000000 		.word	0
 6951 0110 25       		.byte	37
 6952 0111 000000   		.space	3
 6953 0114 00000000 		.word	0
 6954 0118 26       		.byte	38
 6955 0119 000000   		.space	3
 6956 011c 00000000 		.word	0
 6957 0120 27       		.byte	39
 6958 0121 000000   		.space	3
 6959 0124 00000000 		.word	0
 6960 0128 28       		.byte	40
 6961 0129 000000   		.space	3
 6962 012c 00000000 		.word	0
 6963 0130 2E       		.byte	46
 6964 0131 000000   		.space	3
 6965 0134 00000000 		.word	0
 6966 0138 2E       		.byte	46
 6967 0139 000000   		.space	3
 6968 013c 00000000 		.word	0
 6969 0140 2E       		.byte	46
 6970 0141 000000   		.space	3
 6971 0144 00000000 		.word	0
 6972 0148 2E       		.byte	46
 6973 0149 000000   		.space	3
ARM GAS  /tmp/ccTMmuhz.s 			page 171


 6974 014c 00000000 		.word	0
 6975 0150 2E       		.byte	46
 6976 0151 000000   		.space	3
 6977 0154 00000000 		.word	0
 6978 0158 2E       		.byte	46
 6979 0159 000000   		.space	3
 6980 015c 00000000 		.word	0
 6981 0160 2E       		.byte	46
 6982 0161 000000   		.space	3
 6983 0164 00000000 		.word	0
 6984 0168 2E       		.byte	46
 6985 0169 000000   		.space	3
 6986 016c 00000000 		.word	0
 6987 0170 2E       		.byte	46
 6988 0171 000000   		.space	3
 6989 0174 00000000 		.word	0
 6990              		.section	.rodata.mapping_running.11115,"a"
 6991              		.align	2
 6992              		.set	.LANCHOR12,. + 0
 6995              	mapping_running.11115:
 6996 0000 63       		.byte	99
 6997 0001 000000   		.space	3
 6998 0004 FFFFFFFF 		.word	-1
 6999 0008 00       		.byte	0
 7000 0009 000000   		.space	3
 7001 000c 00000000 		.word	0
 7002 0010 01       		.byte	1
 7003 0011 000000   		.space	3
 7004 0014 00000000 		.word	0
 7005 0018 02       		.byte	2
 7006 0019 000000   		.space	3
 7007 001c 00000000 		.word	0
 7008 0020 03       		.byte	3
 7009 0021 000000   		.space	3
 7010 0024 00000000 		.word	0
 7011 0028 04       		.byte	4
 7012 0029 000000   		.space	3
 7013 002c 00000000 		.word	0
 7014 0030 12       		.byte	18
 7015 0031 000000   		.space	3
 7016 0034 00000000 		.word	0
 7017 0038 06       		.byte	6
 7018 0039 000000   		.space	3
 7019 003c 00000000 		.word	0
 7020 0040 07       		.byte	7
 7021 0041 000000   		.space	3
 7022 0044 00000000 		.word	0
 7023 0048 08       		.byte	8
 7024 0049 000000   		.space	3
 7025 004c 00000000 		.word	0
 7026 0050 09       		.byte	9
 7027 0051 000000   		.space	3
 7028 0054 00000000 		.word	0
 7029 0058 0A       		.byte	10
 7030 0059 000000   		.space	3
 7031 005c 00000000 		.word	0
 7032 0060 0B       		.byte	11
ARM GAS  /tmp/ccTMmuhz.s 			page 172


 7033 0061 000000   		.space	3
 7034 0064 00000000 		.word	0
 7035 0068 0C       		.byte	12
 7036 0069 000000   		.space	3
 7037 006c 00000000 		.word	0
 7038 0070 0D       		.byte	13
 7039 0071 000000   		.space	3
 7040 0074 00000000 		.word	0
 7041 0078 0E       		.byte	14
 7042 0079 000000   		.space	3
 7043 007c 00000000 		.word	0
 7044 0080 0F       		.byte	15
 7045 0081 000000   		.space	3
 7046 0084 00000000 		.word	0
 7047 0088 10       		.byte	16
 7048 0089 000000   		.space	3
 7049 008c 00000000 		.word	0
 7050 0090 18       		.byte	24
 7051 0091 000000   		.space	3
 7052 0094 00000000 		.word	0
 7053 0098 13       		.byte	19
 7054 0099 000000   		.space	3
 7055 009c 00000000 		.word	0
 7056 00a0 14       		.byte	20
 7057 00a1 000000   		.space	3
 7058 00a4 00000000 		.word	0
 7059 00a8 15       		.byte	21
 7060 00a9 000000   		.space	3
 7061 00ac 00000000 		.word	0
 7062 00b0 16       		.byte	22
 7063 00b1 000000   		.space	3
 7064 00b4 00000000 		.word	0
 7065 00b8 1E       		.byte	30
 7066 00b9 000000   		.space	3
 7067 00bc 00000000 		.word	0
 7068 00c0 19       		.byte	25
 7069 00c1 000000   		.space	3
 7070 00c4 00000000 		.word	0
 7071 00c8 1A       		.byte	26
 7072 00c9 000000   		.space	3
 7073 00cc 00000000 		.word	0
 7074 00d0 1B       		.byte	27
 7075 00d1 000000   		.space	3
 7076 00d4 00000000 		.word	0
 7077 00d8 1C       		.byte	28
 7078 00d9 000000   		.space	3
 7079 00dc 00000000 		.word	0
 7080 00e0 09       		.byte	9
 7081 00e1 000000   		.space	3
 7082 00e4 00000000 		.word	0
 7083 00e8 1F       		.byte	31
 7084 00e9 000000   		.space	3
 7085 00ec 00000000 		.word	0
 7086 00f0 20       		.byte	32
 7087 00f1 000000   		.space	3
 7088 00f4 00000000 		.word	0
 7089 00f8 21       		.byte	33
ARM GAS  /tmp/ccTMmuhz.s 			page 173


 7090 00f9 000000   		.space	3
 7091 00fc 00000000 		.word	0
 7092 0100 22       		.byte	34
 7093 0101 000000   		.space	3
 7094 0104 00000000 		.word	0
 7095 0108 24       		.byte	36
 7096 0109 000000   		.space	3
 7097 010c 00000000 		.word	0
 7098 0110 25       		.byte	37
 7099 0111 000000   		.space	3
 7100 0114 00000000 		.word	0
 7101 0118 26       		.byte	38
 7102 0119 000000   		.space	3
 7103 011c 00000000 		.word	0
 7104 0120 27       		.byte	39
 7105 0121 000000   		.space	3
 7106 0124 00000000 		.word	0
 7107 0128 28       		.byte	40
 7108 0129 000000   		.space	3
 7109 012c 00000000 		.word	0
 7110 0130 2E       		.byte	46
 7111 0131 000000   		.space	3
 7112 0134 00000000 		.word	0
 7113 0138 2E       		.byte	46
 7114 0139 000000   		.space	3
 7115 013c 00000000 		.word	0
 7116 0140 2E       		.byte	46
 7117 0141 000000   		.space	3
 7118 0144 00000000 		.word	0
 7119 0148 2E       		.byte	46
 7120 0149 000000   		.space	3
 7121 014c 00000000 		.word	0
 7122 0150 04       		.byte	4
 7123 0151 000000   		.space	3
 7124 0154 00000000 		.word	0
 7125 0158 05       		.byte	5
 7126 0159 000000   		.space	3
 7127 015c 00000000 		.word	0
 7128 0160 2E       		.byte	46
 7129 0161 000000   		.space	3
 7130 0164 00000000 		.word	0
 7131 0168 2E       		.byte	46
 7132 0169 000000   		.space	3
 7133 016c 00000000 		.word	0
 7134 0170 2E       		.byte	46
 7135 0171 000000   		.space	3
 7136 0174 00000000 		.word	0
 7137              		.section	.rodata.mid_menu,"a"
 7138              		.align	2
 7141              	mid_menu:
 7142 0000 C8C40B00 		.ascii	"\310\304\013\000"
 7143              		.text
 7144              	.Letext0:
 7145              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 7146              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 7147              		.file 6 "/usr/include/newlib/sys/_types.h"
 7148              		.file 7 "/usr/include/newlib/sys/reent.h"
ARM GAS  /tmp/ccTMmuhz.s 			page 174


 7149              		.file 8 "/usr/include/newlib/sys/lock.h"
 7150              		.file 9 "/usr/include/newlib/stdlib.h"
 7151              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 7152              		.file 11 "/usr/include/newlib/ctype.h"
 7153              		.file 12 "dmcp/ff_ifc.h"
 7154              		.file 13 "dmcp/dmcp.h"
 7155              		.file 14 "src/keys.h"
 7156              		.file 15 "src/menu.h"
 7157              		.file 16 "src/decNumber/decContext.h"
 7158              		.file 17 "src/decNumber/decNumber.h"
 7159              		.file 18 "src/decNumber/decimal64.h"
 7160              		.file 19 "src/decNumber/decimal128.h"
 7161              		.file 20 "src/xeq.h"
 7162              		.file 21 "src/data.h"
 7163              		.file 22 "src/display.h"
 7164              		.file 23 "src/consts.h"
 7165              		.file 24 "src/storage.h"
 7166              		.file 25 "src/catalogues.h"
 7167              		.file 26 "src/stopwatch.h"
 7168              		.file 27 "src/lcd.h"
 7169              		.file 28 "/usr/include/newlib/string.h"
 7170              		.file 29 "/usr/include/newlib/stdio.h"
 7171              		.file 30 "<built-in>"
ARM GAS  /tmp/ccTMmuhz.s 			page 175


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccTMmuhz.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/ccTMmuhz.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/ccTMmuhz.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/ccTMmuhz.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/ccTMmuhz.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccTMmuhz.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccTMmuhz.s:433    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/ccTMmuhz.s:441    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/ccTMmuhz.s:460    .text.disp_about:0000000000000000 $t
     /tmp/ccTMmuhz.s:468    .text.disp_about:0000000000000000 disp_about
     /tmp/ccTMmuhz.s:621    .text.disp_about:0000000000000080 $d
     /tmp/ccTMmuhz.s:639    .text.run_menu_item:0000000000000000 $t
     /tmp/ccTMmuhz.s:647    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/ccTMmuhz.s:687    .text.set_menu:0000000000000000 $t
     /tmp/ccTMmuhz.s:695    .text.set_menu:0000000000000000 set_menu
     /tmp/ccTMmuhz.s:750    .text.set_menu:000000000000002c $d
     /tmp/ccTMmuhz.s:757    .text.set_default_menu:0000000000000000 $t
     /tmp/ccTMmuhz.s:765    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/ccTMmuhz.s:839    .text.set_default_menu:000000000000002c $d
     /tmp/ccTMmuhz.s:848    .text.toggle_default_menu:0000000000000000 $t
     /tmp/ccTMmuhz.s:856    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/ccTMmuhz.s:958    .text.toggle_default_menu:0000000000000044 $d
     /tmp/ccTMmuhz.s:969    .text.get_menu:0000000000000000 $t
     /tmp/ccTMmuhz.s:977    .text.get_menu:0000000000000000 get_menu
     /tmp/ccTMmuhz.s:993    .text.get_menu:0000000000000008 $d
     /tmp/ccTMmuhz.s:998    .text.get_last_menu:0000000000000000 $t
     /tmp/ccTMmuhz.s:1006   .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/ccTMmuhz.s:1022   .text.get_last_menu:0000000000000008 $d
     /tmp/ccTMmuhz.s:1027   .text.set_last_menu:0000000000000000 $t
     /tmp/ccTMmuhz.s:1035   .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccTMmuhz.s:1110   .text.set_last_menu:000000000000002c $d
     /tmp/ccTMmuhz.s:1119   .text.mdot:0000000000000000 $t
     /tmp/ccTMmuhz.s:1127   .text.mdot:0000000000000000 mdot
     /tmp/ccTMmuhz.s:1218   .text.mdot:000000000000003c $d
     /tmp/ccTMmuhz.s:1223   .text.get_current_menu_ref:0000000000000000 $t
     /tmp/ccTMmuhz.s:1231   .text.get_current_menu_ref:0000000000000000 get_current_menu_ref
     /tmp/ccTMmuhz.s:1298   .text.get_current_menu_ref:0000000000000040 $d
     /tmp/ccTMmuhz.s:1313   .text.get_current_menu_ref:000000000000007c $t
     /tmp/ccTMmuhz.s:1383   .text.get_current_menu_ref:00000000000000a8 $d
     /tmp/ccTMmuhz.s:4889   .rodata.Menus:0000000000000000 Menus
     /tmp/ccTMmuhz.s:1391   .text.display_menu:0000000000000000 $t
     /tmp/ccTMmuhz.s:1399   .text.display_menu:0000000000000000 display_menu
     /tmp/ccTMmuhz.s:1647   .text.display_menu:000000000000010c $d
     /tmp/ccTMmuhz.s:1654   .text.display_current_menu:0000000000000000 $t
     /tmp/ccTMmuhz.s:1662   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccTMmuhz.s:1698   .text.all_menu_dots:0000000000000000 $t
     /tmp/ccTMmuhz.s:1706   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccTMmuhz.s:1790   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccTMmuhz.s:1795   .text.umen_store:0000000000000000 $t
     /tmp/ccTMmuhz.s:1803   .text.umen_store:0000000000000000 umen_store
     /tmp/ccTMmuhz.s:1904   .text.umen_store:0000000000000050 $d
     /tmp/ccTMmuhz.s:1909   .text.build_user_menu:0000000000000000 $t
     /tmp/ccTMmuhz.s:1917   .text.build_user_menu:0000000000000000 build_user_menu
     /tmp/ccTMmuhz.s:2329   .text.build_user_menu:0000000000000180 $d
     /tmp/ccTMmuhz.s:2343   .text.shutdown:0000000000000000 $t
ARM GAS  /tmp/ccTMmuhz.s 			page 176


     /tmp/ccTMmuhz.s:2351   .text.shutdown:0000000000000000 shutdown
     /tmp/ccTMmuhz.s:2369   .text.shutdown:000000000000000c $d
     /tmp/ccTMmuhz.s:2374   .text.is_key_pressed:0000000000000000 $t
     /tmp/ccTMmuhz.s:2382   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccTMmuhz.s:2405   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccTMmuhz.s:2410   .text.get_key:0000000000000000 $t
     /tmp/ccTMmuhz.s:2418   .text.get_key:0000000000000000 get_key
     /tmp/ccTMmuhz.s:2433   .text.get_key:0000000000000004 $d
     /tmp/ccTMmuhz.s:2438   .text.put_key:0000000000000000 $t
     /tmp/ccTMmuhz.s:2446   .text.put_key:0000000000000000 put_key
     /tmp/ccTMmuhz.s:2525   .text.put_key:000000000000003c $d
     /tmp/ccTMmuhz.s:2531   .text.shift_down:0000000000000000 $t
     /tmp/ccTMmuhz.s:2539   .text.shift_down:0000000000000000 shift_down
     /tmp/ccTMmuhz.s:2554   .text.start_key_timer:0000000000000000 $t
     /tmp/ccTMmuhz.s:2562   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccTMmuhz.s:2586   .text.start_key_timer:000000000000000c $d
     /tmp/ccTMmuhz.s:2592   .text.keyticks:0000000000000000 $t
     /tmp/ccTMmuhz.s:2600   .text.keyticks:0000000000000000 keyticks
     /tmp/ccTMmuhz.s:2631   .text.keyticks:0000000000000018 $d
     /tmp/ccTMmuhz.s:2637   .text.moveto:0000000000000000 $t
     /tmp/ccTMmuhz.s:2645   .text.moveto:0000000000000000 moveto
     /tmp/ccTMmuhz.s:2705   .text.moveto:000000000000002c $d
     /tmp/ccTMmuhz.s:2712   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccTMmuhz.s:2716   .text.print_debug:0000000000000000 $t
     /tmp/ccTMmuhz.s:2724   .text.print_debug:0000000000000000 print_debug
     /tmp/ccTMmuhz.s:2826   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccTMmuhz.s:2837   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccTMmuhz.s:2841   .text.print_debug2:0000000000000000 $t
     /tmp/ccTMmuhz.s:2849   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccTMmuhz.s:2951   .text.print_debug2:0000000000000064 $d
     /tmp/ccTMmuhz.s:2962   .text.do_now:0000000000000000 $t
     /tmp/ccTMmuhz.s:2970   .text.do_now:0000000000000000 do_now
     /tmp/ccTMmuhz.s:3005   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccTMmuhz.s:3009   .text.do_multi:0000000000000000 $t
     /tmp/ccTMmuhz.s:3017   .text.do_multi:0000000000000000 do_multi
     /tmp/ccTMmuhz.s:3048   .text.do_multi:000000000000001a $d
     /tmp/ccTMmuhz.s:3463   .text.do_multi:0000000000000168 $d
     /tmp/ccTMmuhz.s:3476   .text.program_main:0000000000000000 $t
     /tmp/ccTMmuhz.s:3484   .text.program_main:0000000000000000 program_main
     /tmp/ccTMmuhz.s:3777   .text.program_main:0000000000000126 $d
     /tmp/ccTMmuhz.s:3783   .text.program_main:0000000000000132 $t
     /tmp/ccTMmuhz.s:4163   .text.program_main:00000000000002e0 $d
     /tmp/ccTMmuhz.s:4201   .text.program_main:0000000000000368 $t
     /tmp/ccTMmuhz.s:4635   .text.program_main:0000000000000574 $d
     /tmp/ccTMmuhz.s:4724   .bss.n_p:0000000000000000 n_p
     /tmp/ccTMmuhz.s:4873   .data.spaces:0000000000000000 spaces
     /tmp/ccTMmuhz.s:4864   .data.release:0000000000000000 release
     /tmp/ccTMmuhz.s:4837   .data.h_shift:0000000000000000 h_shift
     /tmp/ccTMmuhz.s:4828   .data.g_shift:0000000000000000 g_shift
     /tmp/ccTMmuhz.s:4820   .data.f_shift:0000000000000000 f_shift
     /tmp/ccTMmuhz.s:4846   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccTMmuhz.s:4855   .data.no_key:0000000000000000 no_key
     /tmp/ccTMmuhz.s:4880   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccTMmuhz.s:4664   .rodata.str1.4:0000000000000000 $d
     /tmp/ccTMmuhz.s:7141   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccTMmuhz.s:4705   .bss.default_menu:0000000000000000 default_menu
ARM GAS  /tmp/ccTMmuhz.s 			page 177


     /tmp/ccTMmuhz.s:4711   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccTMmuhz.s:4699   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccTMmuhz.s:4814   .data.cmplx_key_string:0000000000000000 cmplx_key_string
     /tmp/ccTMmuhz.s:4807   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/ccTMmuhz.s:4738   .data.UserMenu:0000000000000000 UserMenu
     /tmp/ccTMmuhz.s:4681   .rodata:0000000000000000 $d
     /tmp/ccTMmuhz.s:4700   .bss.current_menu:0000000000000000 $d
     /tmp/ccTMmuhz.s:4706   .bss.default_menu:0000000000000000 $d
     /tmp/ccTMmuhz.s:4712   .bss.last_menu:0000000000000000 $d
     /tmp/ccTMmuhz.s:4714   .bss.mdots:0000000000000000 $d
     /tmp/ccTMmuhz.s:4718   .bss.mdots:0000000000000000 mdots
     /tmp/ccTMmuhz.s:4721   .bss.n_p:0000000000000000 $d
     /tmp/ccTMmuhz.s:4727   .bss.start_ticks:0000000000000000 $d
     /tmp/ccTMmuhz.s:4731   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccTMmuhz.s:4734   .data.UserMenu:0000000000000000 $d
     /tmp/ccTMmuhz.s:4803   .data.arrow_key_string:0000000000000000 $d
     /tmp/ccTMmuhz.s:4810   .data.cmplx_key_string:0000000000000000 $d
     /tmp/ccTMmuhz.s:4817   .data.f_shift:0000000000000000 $d
     /tmp/ccTMmuhz.s:4825   .data.g_shift:0000000000000000 $d
     /tmp/ccTMmuhz.s:4833   .data.h_shift:0000000000000000 $d
     /tmp/ccTMmuhz.s:4842   .data.heartbeat:0000000000000000 $d
     /tmp/ccTMmuhz.s:4851   .data.no_key:0000000000000000 $d
     /tmp/ccTMmuhz.s:4860   .data.release:0000000000000000 $d
     /tmp/ccTMmuhz.s:4869   .data.spaces:0000000000000000 $d
     /tmp/ccTMmuhz.s:4876   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccTMmuhz.s:4886   .rodata.Menus:0000000000000000 $d
     /tmp/ccTMmuhz.s:6403   .rodata.mapping_alpha.11114:0000000000000000 $d
     /tmp/ccTMmuhz.s:6407   .rodata.mapping_alpha.11114:0000000000000000 mapping_alpha.11114
     /tmp/ccTMmuhz.s:6550   .rodata.mapping_fshift.11112:0000000000000000 $d
     /tmp/ccTMmuhz.s:6554   .rodata.mapping_fshift.11112:0000000000000000 mapping_fshift.11112
     /tmp/ccTMmuhz.s:6697   .rodata.mapping_gshift.11113:0000000000000000 $d
     /tmp/ccTMmuhz.s:6701   .rodata.mapping_gshift.11113:0000000000000000 mapping_gshift.11113
     /tmp/ccTMmuhz.s:6844   .rodata.mapping_none.11111:0000000000000000 $d
     /tmp/ccTMmuhz.s:6848   .rodata.mapping_none.11111:0000000000000000 mapping_none.11111
     /tmp/ccTMmuhz.s:6991   .rodata.mapping_running.11115:0000000000000000 $d
     /tmp/ccTMmuhz.s:6995   .rodata.mapping_running.11115:0000000000000000 mapping_running.11115
     /tmp/ccTMmuhz.s:7138   .rodata.mid_menu:0000000000000000 $d
     /tmp/ccTMmuhz.s:3063   .text.do_multi:0000000000000029 $d
     /tmp/ccTMmuhz.s:3063   .text.do_multi:000000000000002a $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
memcpy
main_ram
pixel_length
strncpy
findmultilbl
do_inc
getprog
prt_umen
catcmd
strcpy
sprintf
ARM GAS  /tmp/ccTMmuhz.s 			page 178


process_keycode_with_shift
reset_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
KeyCallback
JustDisplayed
Pause
Running
DM42_Ticker
is_dot
dot
finish_display
get_alpha_state
StopWatchStatus

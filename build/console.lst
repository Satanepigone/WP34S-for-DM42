ARM GAS  /tmp/ccwTS9FK.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC1:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** /* 
   4:src/menu.c    ****  * System menu stuff
   5:src/menu.c    ****  */
   6:src/menu.c    **** 
   7:src/menu.c    **** #define MI_ABOUT_PGM 11
   8:src/menu.c    **** 
   9:src/menu.c    **** const uint8_t mid_menu[] = {
  10:src/menu.c    ****     MI_SYSTEM_ENTER,
  11:src/menu.c    ****     MI_MSC,
  12:src/menu.c    ****     MI_ABOUT_PGM,
  13:src/menu.c    ****     0 }; // Terminator
  14:src/menu.c    **** 
  15:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  16:src/menu.c    **** 
  17:src/menu.c    **** void disp_about(void);
  18:src/menu.c    **** 
  19:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  20:src/menu.c    ****   int ret = 0;
  21:src/menu.c    **** 
  22:src/menu.c    ****   switch(line_id) {
  23:src/menu.c    ****     case MI_ABOUT_PGM:
ARM GAS  /tmp/ccwTS9FK.s 			page 2


  24:src/menu.c    ****       disp_about();
  25:src/menu.c    ****       break;
  26:src/menu.c    **** 
  27:src/menu.c    ****      default:
  28:src/menu.c    ****       ret = MRET_UNIMPL;
  29:src/menu.c    ****       break;
  30:src/menu.c    ****   }
  31:src/menu.c    **** 
  32:src/menu.c    ****   return ret;
  33:src/menu.c    **** }
  34:src/menu.c    **** 
  35:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 35 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  36:src/menu.c    ****   const char * ln;
  40              		.loc 1 36 3 view .LVU1
  37:src/menu.c    **** 
  38:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 38 3 view .LVU2
  39:src/menu.c    **** 
  40:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  41:src/menu.c    **** 
  42:src/menu.c    ****   default:
  43:src/menu.c    ****     ln = NULL;
  42              		.loc 1 43 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  38:src/menu.c    **** 
  44              		.loc 1 38 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
  44:src/menu.c    ****     break;
  45:src/menu.c    ****   }
  46:src/menu.c    **** 
  47:src/menu.c    ****   return ln;
  48:src/menu.c    **** }
  46              		.loc 1 48 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 48 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC1
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccwTS9FK.s 			page 3


  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB31:
  49:src/menu.c    **** 
  50:src/menu.c    **** void disp_about() {
  51:src/menu.c    ****   lcd_clear_buf();
  52:src/menu.c    ****   lcd_writeClr(t24);
  53:src/menu.c    **** 
  54:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  55:src/menu.c    ****   lcd_printR(t24, "WP34s calculator for DM42:");
  56:src/menu.c    ****   t24->y += 5;
  57:src/menu.c    **** #ifdef TOP_ROW
  58:src/menu.c    ****   lcd_print(t24, "with top row for annunciators,");
  59:src/menu.c    ****   lcd_print(t24, "a longer alpha display,");
  60:src/menu.c    ****   lcd_print(t24, "and some annunciators renamed.");
  61:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  62:src/menu.c    ****   lcd_print(t24, "with a longer alpha display");
  63:src/menu.c    ****   lcd_print(t24, "than the original calculator,");
  64:src/menu.c    ****   lcd_print(t24, "and some annunciators renamed.");
  65:src/menu.c    ****   #else
  66:src/menu.c    ****   lcd_print(t24, "Just like the original calculator");
  67:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed.");
  68:src/menu.c    **** #endif
  69:src/menu.c    ****   t24->y += 5;
  70:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
  71:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
  72:src/menu.c    **** 
  73:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
  74:src/menu.c    ****   t24->x = 20;
  75:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
  76:src/menu.c    **** 
  77:src/menu.c    ****   lcd_refresh();
  78:src/menu.c    **** 
  79:src/menu.c    ****   wait_for_key_press();
  80:src/menu.c    **** }
  81:src/menu.c    **** 
  82:src/menu.c    **** /*
  83:src/menu.c    ****  * WP34s menu code
  84:src/menu.c    ****  */
  85:src/menu.c    **** 
  86:src/menu.c    **** void set_menu ( int new_menu ) {
  87:src/menu.c    ****   int m = current_menu;
  88:src/menu.c    ****   if (new_menu == current_menu) { // return to default
  89:src/menu.c    ****     current_menu = default_menu;
  90:src/menu.c    ****   }
  91:src/menu.c    ****   else if (new_menu == -1) { // go to last menu
  92:src/menu.c    ****     current_menu = last_menu;
  93:src/menu.c    ****   }
  94:src/menu.c    ****   else {
  95:src/menu.c    ****     current_menu = new_menu; // change to new menu
  96:src/menu.c    ****   }
  97:src/menu.c    ****   if ( (m != 9) && (m != 16) ) last_menu = m; // store menu as last menu unless arrow or alpha
  98:src/menu.c    **** }
  99:src/menu.c    **** 
 100:src/menu.c    **** void toggle_default_menu () {
 101:src/menu.c    ****   if (current_menu == default_menu) {
 102:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
ARM GAS  /tmp/ccwTS9FK.s 			page 4


 103:src/menu.c    ****   }
 104:src/menu.c    **** }
 105:src/menu.c    **** 
 106:src/menu.c    **** int get_menu () {
 107:src/menu.c    ****   return current_menu;
 108:src/menu.c    **** }
 109:src/menu.c    **** 
 110:src/menu.c    **** void display_current_menu () {
 111:src/menu.c    ****   display_menu (current_menu);
 112:src/menu.c    **** }
 113:src/menu.c    **** 
 114:src/menu.c    **** void set_last_menu () {
 115:src/menu.c    ****   set_menu (last_menu);
 116:src/menu.c    **** }
 117:src/menu.c    **** 
 118:src/menu.c    **** static unsigned char mdots[200][2];
 119:src/menu.c    **** 
 120:src/menu.c    **** static const struct _menu Menus[] = {
 121:src/menu.c    ****   {
 122:src/menu.c    ****     "Blank", // 0
 123:src/menu.c    ****     { 
 124:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 125:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 126:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 127:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 128:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 129:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 130:src/menu.c    ****     }    
 131:src/menu.c    ****   },
 132:src/menu.c    ****   {
 133:src/menu.c    ****     "Clear", // 1
 134:src/menu.c    ****     { 
 135:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 136:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 137:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 138:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 139:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 140:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 141:src/menu.c    ****     }    
 142:src/menu.c    ****   },
 143:src/menu.c    ****   {
 144:src/menu.c    ****     "DISP", // 2
 145:src/menu.c    ****     { 
 146:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 147:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 148:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 149:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 150:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 151:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 152:src/menu.c    ****     }
 153:src/menu.c    ****   },
 154:src/menu.c    ****   {
 155:src/menu.c    ****     "BASE", // 3
 156:src/menu.c    ****     { 
 157:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 158:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 159:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
ARM GAS  /tmp/ccwTS9FK.s 			page 5


 160:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 161:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 162:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 163:src/menu.c    ****     }
 164:src/menu.c    ****   },
 165:src/menu.c    ****   {
 166:src/menu.c    ****     "ANGLES", // 4
 167:src/menu.c    ****     { 
 168:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 169:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 170:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 171:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 172:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 173:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 174:src/menu.c    ****     }
 175:src/menu.c    ****       
 176:src/menu.c    ****   },
 177:src/menu.c    ****   {
 178:src/menu.c    ****     "MISC", // 5
 179:src/menu.c    ****     { 
 180:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 181:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 182:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 183:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 184:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 185:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 186:src/menu.c    ****     }
 187:src/menu.c    ****   },
 188:src/menu.c    ****   {
 189:src/menu.c    ****     "X<>Y Key", // 6
 190:src/menu.c    ****     { 
 191:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 192:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 193:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 194:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 195:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 196:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 197:src/menu.c    ****     }    
 198:src/menu.c    ****   },
 199:src/menu.c    ****   {
 200:src/menu.c    ****     "Program", // 7
 201:src/menu.c    ****     { 
 202:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 203:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 204:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 205:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 206:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 207:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 208:src/menu.c    ****     }
 209:src/menu.c    ****   },
 210:src/menu.c    ****   {
 211:src/menu.c    ****     "Setup 1", // 8
 212:src/menu.c    ****     { 
 213:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 214:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 215:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 216:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
ARM GAS  /tmp/ccwTS9FK.s 			page 6


 217:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 218:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 219:src/menu.c    ****     }
 220:src/menu.c    ****   },
 221:src/menu.c    ****   {
 222:src/menu.c    ****     "Arrow", // 9
 223:src/menu.c    ****     { 
 224:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 225:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 226:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 227:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "\015HMS" },
 228:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 229:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 230:src/menu.c    ****     }
 231:src/menu.c    ****   },
 232:src/menu.c    ****   {
 233:src/menu.c    ****     "Flags", // 10
 234:src/menu.c    ****     { 
 235:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
 236:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 237:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 238:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 239:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 240:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 241:src/menu.c    ****     }
 242:src/menu.c    ****   },
 243:src/menu.c    ****   {
 244:src/menu.c    ****     "Probability", // 11
 245:src/menu.c    ****     { 
 246:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 247:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 248:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 249:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 250:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 251:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 252:src/menu.c    ****     }
 253:src/menu.c    ****   },
 254:src/menu.c    ****   {
 255:src/menu.c    ****     "Statistics", // 12
 256:src/menu.c    ****     /*
 257:src/menu.c    ****      *xbar, sd;
 258:src/menu.c    ****      *yhat, xhat;
 259:src/menu.c    ****      *corr, L.R.;
 260:src/menu.c    ****      *best, linear;
 261:src/menu.c    ****      *ln, exp;
 262:src/menu.c    ****      *cmplx, power;
 263:src/menu.c    ****      *No, sums is already on g9.
 264:src/menu.c    ****      */
 265:src/menu.c    ****     { 
 266:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 267:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 268:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 269:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 270:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 271:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 272:src/menu.c    ****     }
 273:src/menu.c    ****   },
ARM GAS  /tmp/ccwTS9FK.s 			page 7


 274:src/menu.c    ****   {
 275:src/menu.c    ****     "Setup 2", // 13
 276:src/menu.c    ****     { 
 277:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 278:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 279:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 280:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 281:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 282:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 283:src/menu.c    ****     }
 284:src/menu.c    ****   },
 285:src/menu.c    ****   {
 286:src/menu.c    ****     "Integ/Sum/Prod", // 14
 287:src/menu.c    ****     { 
 288:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 289:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 290:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 291:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 292:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 293:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 294:src/menu.c    ****     }
 295:src/menu.c    ****   },
 296:src/menu.c    ****   {
 297:src/menu.c    ****     "Blank with A-D", // 15
 298:src/menu.c    ****     { 
 299:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 300:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 301:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 302:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 303:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 304:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 305:src/menu.c    ****     }    
 306:src/menu.c    ****   },
 307:src/menu.c    ****   {
 308:src/menu.c    ****     "Alpha", // 16
 309:src/menu.c    ****     { 
 310:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 311:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 312:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 313:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 314:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 315:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 316:src/menu.c    ****     }    
 317:src/menu.c    ****   },
 318:src/menu.c    **** };  
 319:src/menu.c    **** 
 320:src/menu.c    **** /* This code is the set_status_sized code with small changes
 321:src/menu.c    ****  * and non-DM42 code removed.
 322:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 323:src/menu.c    ****  */
 324:src/menu.c    **** #define MENU_WIDTH 32
 325:src/menu.c    **** 
 326:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 326 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccwTS9FK.s 			page 8


 327:src/menu.c    ****   // dotcol is the number of the starting dot column
 328:src/menu.c    ****   // shifted is 1 if shifted
 329:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 329 3 view .LVU8
 330:src/menu.c    **** 
 331:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 332:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 332 3 view .LVU9
 333:src/menu.c    **** 
 334:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 334 3 view .LVU10
 326:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 326 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 326:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 326 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 335:src/menu.c    ****   int i, j, xmax;
 336:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 336 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
  96 000e B4BF     		ite	lt
  97 0010 01F11F03 		addlt	r3, r1, #31
  98 0014 0B46     		movge	r3, r1
 337:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 338:src/menu.c    **** 
 339:src/menu.c    ****   forceDispPlot=0;
  99              		.loc 1 339 16 view .LVU14
 100 0016 4848     		ldr	r0, .L41
 101              	.LVL3:
 326:src/menu.c    ****   // dotcol is the number of the starting dot column
 102              		.loc 1 326 13 view .LVU15
 103 0018 0F46     		mov	r7, r1
 104              	.LVL4:
 335:src/menu.c    ****   int i, j, xmax;
 105              		.loc 1 335 3 is_stmt 1 view .LVU16
 336:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 106              		.loc 1 336 3 view .LVU17
 340:src/menu.c    **** 
 341:src/menu.c    **** #ifdef RP_PREFIX
 342:src/menu.c    ****   RectPolConv = 0;
 107              		.loc 1 342 15 is_stmt 0 view .LVU18
 108 001a 4849     		ldr	r1, .L41+4
 109              	.LVL5:
 339:src/menu.c    **** 
ARM GAS  /tmp/ccwTS9FK.s 			page 9


 110              		.loc 1 339 16 view .LVU19
 111 001c 0022     		movs	r2, #0
 112              	.LVL6:
 339:src/menu.c    **** 
 113              		.loc 1 339 16 view .LVU20
 114 001e 0270     		strb	r2, [r0]
 115              		.loc 1 342 15 view .LVU21
 116 0020 0A60     		str	r2, [r1]
 343:src/menu.c    **** #endif
 344:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 117              		.loc 1 344 10 view .LVU22
 118 0022 019A     		ldr	r2, [sp, #4]
 119 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 336:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 120              		.loc 1 336 30 view .LVU23
 121 0026 23F01F03 		bic	r3, r3, #31
 336:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 122              		.loc 1 336 8 view .LVU24
 123 002a 03F12009 		add	r9, r3, #32
 124              	.LVL7:
 337:src/menu.c    **** 
 125              		.loc 1 337 3 is_stmt 1 view .LVU25
 339:src/menu.c    **** 
 126              		.loc 1 339 3 view .LVU26
 342:src/menu.c    **** #endif
 127              		.loc 1 342 3 view .LVU27
 128              		.loc 1 344 3 view .LVU28
 129              		.loc 1 344 9 view .LVU29
 130 002e 002D     		cmp	r5, #0
 131 0030 78D0     		beq	.L7
 132              		.loc 1 344 23 is_stmt 0 view .LVU30
 133 0032 4F45     		cmp	r7, r9
 134 0034 76DC     		bgt	.L7
 135              	.LBB39:
 345:src/menu.c    ****     int c;
 346:src/menu.c    ****     int width;
 347:src/menu.c    ****     unsigned char cmap[6];
 348:src/menu.c    **** 
 349:src/menu.c    ****     int real_width;
 350:src/menu.c    ****     int current_smallp;
 351:src/menu.c    **** 
 352:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 353:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 354:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 355:src/menu.c    ****     //           01 -> (not used)
 356:src/menu.c    ****     //           10 -> use big font
 357:src/menu.c    ****     //           11 -> use small font
 358:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 359:src/menu.c    ****     if (str[0] == '\007') {
 136              		.loc 1 359 8 view .LVU31
 137 0036 072D     		cmp	r5, #7
 138              	.LBE39:
 332:src/menu.c    **** 
 139              		.loc 1 332 7 view .LVU32
 140 0038 4FF0FF04 		mov	r4, #255
 141              	.LVL8:
 142              	.LBB56:
ARM GAS  /tmp/ccwTS9FK.s 			page 10


 345:src/menu.c    ****     int c;
 143              		.loc 1 345 5 is_stmt 1 view .LVU33
 346:src/menu.c    ****     unsigned char cmap[6];
 144              		.loc 1 346 5 view .LVU34
 347:src/menu.c    **** 
 145              		.loc 1 347 5 view .LVU35
 349:src/menu.c    ****     int current_smallp;
 146              		.loc 1 349 5 view .LVU36
 350:src/menu.c    **** 
 147              		.loc 1 350 5 view .LVU37
 148              		.loc 1 359 5 view .LVU38
 360:src/menu.c    ****       width = str[1] & 0x1F;
 361:src/menu.c    ****       switch (str[1] & 0x60) {
 362:src/menu.c    ****       default:
 363:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 364:src/menu.c    **** 	break;
 365:src/menu.c    ****       case 0x40:	current_smallp = 0;
 366:src/menu.c    **** 	break;
 367:src/menu.c    ****       case 0x60:	current_smallp = 1;
 149              		.loc 1 367 33 is_stmt 0 view .LVU39
 150 003c 4FF0010A 		mov	r10, #1
 359:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 359 8 view .LVU40
 152 0040 64D1     		bne	.L11
 153              	.LVL9:
 154              	.L39:
 360:src/menu.c    ****       width = str[1] & 0x1F;
 155              		.loc 1 360 7 is_stmt 1 view .LVU41
 360:src/menu.c    ****       width = str[1] & 0x1F;
 156              		.loc 1 360 18 is_stmt 0 view .LVU42
 157 0042 019B     		ldr	r3, [sp, #4]
 158 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 159 0046 06F06003 		and	r3, r6, #96
 361:src/menu.c    ****       default:
 160              		.loc 1 361 7 view .LVU43
 161 004a 402B     		cmp	r3, #64
 360:src/menu.c    ****       width = str[1] & 0x1F;
 162              		.loc 1 360 13 view .LVU44
 163 004c 06F01F06 		and	r6, r6, #31
 164              	.LVL10:
 361:src/menu.c    ****       default:
 165              		.loc 1 361 7 is_stmt 1 view .LVU45
 166 0050 6CD0     		beq	.L34
 167 0052 602B     		cmp	r3, #96
 168 0054 6AD1     		bne	.L34
 169              		.loc 1 367 18 view .LVU46
 170              	.LVL11:
 368:src/menu.c    **** 	break;
 171              		.loc 1 368 2 view .LVU47
 369:src/menu.c    ****       }
 370:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 172              		.loc 1 370 7 view .LVU48
 173              		.loc 1 370 11 is_stmt 0 view .LVU49
 174 0056 019B     		ldr	r3, [sp, #4]
 175 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 367:src/menu.c    **** 	break;
 176              		.loc 1 367 33 view .LVU50
ARM GAS  /tmp/ccwTS9FK.s 			page 11


 177 005a 0123     		movs	r3, #1
 178 005c 0093     		str	r3, [sp]
 179 005e 00F58075 		add	r5, r0, #256
 180              	.LVL12:
 181              	.L15:
 371:src/menu.c    ****       str += 3;
 182              		.loc 1 371 7 is_stmt 1 view .LVU51
 372:src/menu.c    **** 
 373:src/menu.c    ****       real_width = charlengths(c);
 183              		.loc 1 373 20 is_stmt 0 view .LVU52
 184 0062 2846     		mov	r0, r5
 185 0064 FFF7FEFF 		bl	charlengths
 186              	.LVL13:
 371:src/menu.c    ****       str += 3;
 187              		.loc 1 371 11 view .LVU53
 188 0068 019B     		ldr	r3, [sp, #4]
 189 006a 0333     		adds	r3, r3, #3
 190 006c 0193     		str	r3, [sp, #4]
 191              	.LVL14:
 192              		.loc 1 373 7 is_stmt 1 view .LVU54
 374:src/menu.c    ****     } else {
 375:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 376:src/menu.c    ****       real_width = width = charlengths(c);
 377:src/menu.c    ****       current_smallp = smallp;
 378:src/menu.c    ****     }
 379:src/menu.c    **** 
 380:src/menu.c    ****     if (x + real_width > xmax)
 193              		.loc 1 380 5 view .LVU55
 194              		.loc 1 380 11 is_stmt 0 view .LVU56
 195 006e C319     		adds	r3, r0, r7
 196              	.LVL15:
 197              		.loc 1 380 8 view .LVU57
 198 0070 9945     		cmp	r9, r3
 199 0072 57DB     		blt	.L7
 200              	.L40:
 381:src/menu.c    ****       break;
 382:src/menu.c    **** 
 383:src/menu.c    ****     if (posns_state != current_smallp) {
 201              		.loc 1 383 5 is_stmt 1 view .LVU58
 202              		.loc 1 383 8 is_stmt 0 view .LVU59
 203 0074 009B     		ldr	r3, [sp]
 204 0076 A342     		cmp	r3, r4
 384:src/menu.c    ****       findlengths(posns, current_smallp);
 205              		.loc 1 384 7 view .LVU60
 206 0078 07AB     		add	r3, sp, #28
 383:src/menu.c    ****       findlengths(posns, current_smallp);
 207              		.loc 1 383 8 view .LVU61
 208 007a 05D0     		beq	.L18
 209              		.loc 1 384 7 is_stmt 1 view .LVU62
 210 007c 1846     		mov	r0, r3
 211              	.LVL16:
 212              		.loc 1 384 7 is_stmt 0 view .LVU63
 213 007e 0099     		ldr	r1, [sp]
 214 0080 0393     		str	r3, [sp, #12]
 215 0082 FFF7FEFF 		bl	findlengths
 216              	.LVL17:
 217 0086 039B     		ldr	r3, [sp, #12]
ARM GAS  /tmp/ccwTS9FK.s 			page 12


 385:src/menu.c    ****       posns_state = current_smallp;
 218              		.loc 1 385 7 is_stmt 1 view .LVU64
 219              	.LVL18:
 220              	.L18:
 386:src/menu.c    ****     }
 387:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 221              		.loc 1 387 5 view .LVU65
 222 0088 009A     		ldr	r2, [sp]
 223 008a 2846     		mov	r0, r5
 224 008c 05A9     		add	r1, sp, #20
 225 008e FFF7FEFF 		bl	unpackchar
 226              	.LVL19:
 388:src/menu.c    **** 
 389:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 227              		.loc 1 389 5 view .LVU66
 228              		.loc 1 389 15 view .LVU67
 229 0092 029B     		ldr	r3, [sp, #8]
 230 0094 03EB4704 		add	r4, r3, r7, lsl #1
 231 0098 294B     		ldr	r3, .L41+8
 232 009a 0DF1140B 		add	fp, sp, #20
 233 009e 1C44     		add	r4, r4, r3
 387:src/menu.c    **** 
 234              		.loc 1 387 5 is_stmt 0 view .LVU68
 235 00a0 4FF0050E 		mov	lr, #5
 236 00a4 A9EB0705 		sub	r5, r9, r7
 237              	.LVL20:
 238              	.L19:
 390:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 239              		.loc 1 390 17 is_stmt 1 view .LVU69
 240              		.loc 1 390 7 is_stmt 0 view .LVU70
 241 00a8 002E     		cmp	r6, #0
 242 00aa 1FDD     		ble	.L25
 391:src/menu.c    **** 	if (x+j >= xmax)
 243              		.loc 1 391 2 is_stmt 1 view .LVU71
 244              		.loc 1 391 5 is_stmt 0 view .LVU72
 245 00ac B945     		cmp	r9, r7
 246 00ae 1DDD     		ble	.L25
 247              	.LBB40:
 248              	.LBB41:
 249              	.LBB42:
 250              	.LBB43:
 392:src/menu.c    **** 	  break;
 393:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 394:src/menu.c    ****       }
 395:src/menu.c    ****     }
 396:src/menu.c    ****     x += width;
 397:src/menu.c    ****   }
 398:src/menu.c    **** }
 399:src/menu.c    **** 
 400:src/menu.c    **** 
 401:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 402:src/menu.c    **** 
 403:src/menu.c    **** int pixel_length(const char *s, int smallp)
 404:src/menu.c    **** {
 405:src/menu.c    ****   int len = 0;
 406:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 407:src/menu.c    ****   while (*s != '\0') {
ARM GAS  /tmp/ccwTS9FK.s 			page 13


 408:src/menu.c    ****     if (s[0] == '\007') {
 409:src/menu.c    ****       len += s[1] & 0x1F;
 410:src/menu.c    ****       s += 3;
 411:src/menu.c    ****       continue;
 412:src/menu.c    ****     }
 413:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 414:src/menu.c    ****   }
 415:src/menu.c    ****   return len;
 416:src/menu.c    **** }
 417:src/menu.c    **** */
 418:src/menu.c    **** 
 419:src/menu.c    **** 
 420:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 421:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 422:src/menu.c    ****   if (on) {
 423:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 424:src/menu.c    ****   }
 425:src/menu.c    ****   else {
 426:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 251              		.loc 1 426 25 view .LVU73
 252 00b0 0AFA0EFC 		lsl	ip, r10, lr
 253              		.loc 1 426 17 view .LVU74
 254 00b4 4FFA8CFC 		sxtb	ip, ip
 255              	.LBE43:
 256              	.LBE42:
 257              	.LBE41:
 258              	.LBE40:
 393:src/menu.c    ****       }
 259              		.loc 1 393 31 view .LVU75
 260 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 261              	.LBB53:
 262              	.LBB50:
 263              	.LBB47:
 264              	.LBB44:
 265              		.loc 1 426 17 view .LVU76
 266 00bc 6FEA0C08 		mvn	r8, ip
 267              	.LBE44:
 268              	.LBE47:
 269              	.LBE50:
 270              	.LBE53:
 390:src/menu.c    **** 	if (x+j >= xmax)
 271              		.loc 1 390 13 view .LVU77
 272 00c0 0023     		movs	r3, #0
 273 00c2 01E0     		b	.L20
 274              	.LVL21:
 275              	.L24:
 391:src/menu.c    **** 	  break;
 276              		.loc 1 391 5 view .LVU78
 277 00c4 9D42     		cmp	r5, r3
 278 00c6 11D0     		beq	.L25
 279              	.LVL22:
 280              	.L20:
 393:src/menu.c    ****       }
 281              		.loc 1 393 2 is_stmt 1 view .LVU79
 282              	.LBB54:
 283              	.LBI40:
 420:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
ARM GAS  /tmp/ccwTS9FK.s 			page 14


 284              		.loc 1 420 6 view .LVU80
 285              	.LBB51:
 421:src/menu.c    ****   if (on) {
 286              		.loc 1 421 3 view .LVU81
 287              	.LBB48:
 288              	.LBI42:
 420:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 289              		.loc 1 420 6 view .LVU82
 290              	.LBB45:
 422:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 291              		.loc 1 422 3 view .LVU83
 292              	.LBE45:
 293              	.LBE48:
 421:src/menu.c    ****   if (on) {
 294              		.loc 1 421 6 is_stmt 0 view .LVU84
 295 00c8 DA19     		adds	r2, r3, r7
 296              	.LVL23:
 421:src/menu.c    ****   if (on) {
 297              		.loc 1 421 6 view .LVU85
 298 00ca C72A     		cmp	r2, #199
 299              	.LBE51:
 300              	.LBE54:
 393:src/menu.c    ****       }
 301              		.loc 1 393 46 view .LVU86
 302 00cc 40FA03F1 		asr	r1, r0, r3
 303              	.LBB55:
 304              	.LBB52:
 421:src/menu.c    ****   if (on) {
 305              		.loc 1 421 6 view .LVU87
 306 00d0 09D8     		bhi	.L22
 307              	.LBB49:
 308              	.LBB46:
 423:src/menu.c    ****   }
 309              		.loc 1 423 5 is_stmt 1 view .LVU88
 310              		.loc 1 426 5 view .LVU89
 423:src/menu.c    ****   }
 311              		.loc 1 423 17 is_stmt 0 view .LVU90
 312 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 313              	.LVL24:
 422:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 314              		.loc 1 422 6 view .LVU91
 315 00d6 C907     		lsls	r1, r1, #31
 423:src/menu.c    ****   }
 316              		.loc 1 423 17 view .LVU92
 317 00d8 4CBF     		ite	mi
 318 00da 4CEA0202 		orrmi	r2, ip, r2
 319              		.loc 1 426 17 view .LVU93
 320 00de 08EA0202 		andpl	r2, r8, r2
 321 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 322              	.L22:
 323              	.LBE46:
 324              	.LBE49:
 325              	.LBE52:
 326              	.LBE55:
 391:src/menu.c    **** 	  break;
 327              		.loc 1 391 2 is_stmt 1 view .LVU94
 328              	.LVL25:
ARM GAS  /tmp/ccwTS9FK.s 			page 15


 390:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 390 26 view .LVU95
 390:src/menu.c    **** 	if (x+j >= xmax)
 330              		.loc 1 390 27 is_stmt 0 view .LVU96
 331 00e6 0133     		adds	r3, r3, #1
 332              	.LVL26:
 390:src/menu.c    **** 	if (x+j >= xmax)
 333              		.loc 1 390 17 is_stmt 1 view .LVU97
 390:src/menu.c    **** 	if (x+j >= xmax)
 334              		.loc 1 390 7 is_stmt 0 view .LVU98
 335 00e8 B342     		cmp	r3, r6
 336 00ea EBD1     		bne	.L24
 337              	.LVL27:
 338              	.L25:
 389:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 339              		.loc 1 389 20 is_stmt 1 view .LVU99
 389:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 340              		.loc 1 389 15 view .LVU100
 341 00ec 0EF1FF3E 		add	lr, lr, #-1
 389:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 342              		.loc 1 389 5 is_stmt 0 view .LVU101
 343 00f0 BEF1FF3F 		cmp	lr, #-1
 344 00f4 0BF1010B 		add	fp, fp, #1
 345              	.LVL28:
 389:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 346              		.loc 1 389 5 view .LVU102
 347 00f8 D6D1     		bne	.L19
 396:src/menu.c    ****   }
 348              		.loc 1 396 5 is_stmt 1 view .LVU103
 349              	.LBE56:
 344:src/menu.c    ****     int c;
 350              		.loc 1 344 10 is_stmt 0 view .LVU104
 351 00fa 019B     		ldr	r3, [sp, #4]
 352 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 353              	.LBB57:
 396:src/menu.c    ****   }
 354              		.loc 1 396 7 view .LVU105
 355 00fe 3744     		add	r7, r7, r6
 356              	.LVL29:
 396:src/menu.c    ****   }
 357              		.loc 1 396 7 view .LVU106
 358              	.LBE57:
 344:src/menu.c    ****     int c;
 359              		.loc 1 344 9 is_stmt 1 view .LVU107
 360 0100 85B1     		cbz	r5, .L7
 344:src/menu.c    ****     int c;
 361              		.loc 1 344 23 is_stmt 0 view .LVU108
 362 0102 B945     		cmp	r9, r7
 363 0104 0EDB     		blt	.L7
 364              	.LBB58:
 359:src/menu.c    ****       width = str[1] & 0x1F;
 365              		.loc 1 359 8 view .LVU109
 366 0106 072D     		cmp	r5, #7
 367              	.LBE58:
 368 0108 009C     		ldr	r4, [sp]
 369              	.LBB59:
 345:src/menu.c    ****     int width;
ARM GAS  /tmp/ccwTS9FK.s 			page 16


 370              		.loc 1 345 5 is_stmt 1 view .LVU110
 346:src/menu.c    ****     unsigned char cmap[6];
 371              		.loc 1 346 5 view .LVU111
 347:src/menu.c    **** 
 372              		.loc 1 347 5 view .LVU112
 349:src/menu.c    ****     int current_smallp;
 373              		.loc 1 349 5 view .LVU113
 350:src/menu.c    **** 
 374              		.loc 1 350 5 view .LVU114
 359:src/menu.c    ****       width = str[1] & 0x1F;
 375              		.loc 1 359 5 view .LVU115
 359:src/menu.c    ****       width = str[1] & 0x1F;
 376              		.loc 1 359 8 is_stmt 0 view .LVU116
 377 010a 9AD0     		beq	.L39
 378              	.LVL30:
 379              	.L11:
 375:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 375 7 is_stmt 1 view .LVU117
 376:src/menu.c    ****       current_smallp = smallp;
 381              		.loc 1 376 28 is_stmt 0 view .LVU118
 382 010c 2846     		mov	r0, r5
 383 010e FFF7FEFF 		bl	charlengths
 384              	.LVL31:
 375:src/menu.c    ****       real_width = width = charlengths(c);
 385              		.loc 1 375 31 view .LVU119
 386 0112 019B     		ldr	r3, [sp, #4]
 387 0114 0133     		adds	r3, r3, #1
 388 0116 0193     		str	r3, [sp, #4]
 389              	.LVL32:
 376:src/menu.c    ****       current_smallp = smallp;
 390              		.loc 1 376 7 is_stmt 1 view .LVU120
 377:src/menu.c    ****     }
 391              		.loc 1 377 7 view .LVU121
 377:src/menu.c    ****     }
 392              		.loc 1 377 22 is_stmt 0 view .LVU122
 393 0118 0023     		movs	r3, #0
 394              	.LVL33:
 377:src/menu.c    ****     }
 395              		.loc 1 377 22 view .LVU123
 396 011a 0093     		str	r3, [sp]
 397              	.LVL34:
 380:src/menu.c    ****       break;
 398              		.loc 1 380 11 view .LVU124
 399 011c C319     		adds	r3, r0, r7
 400              	.LVL35:
 380:src/menu.c    ****       break;
 401              		.loc 1 380 8 view .LVU125
 402 011e 9945     		cmp	r9, r3
 376:src/menu.c    ****       current_smallp = smallp;
 403              		.loc 1 376 28 view .LVU126
 404 0120 0646     		mov	r6, r0
 380:src/menu.c    ****       break;
 405              		.loc 1 380 5 is_stmt 1 view .LVU127
 380:src/menu.c    ****       break;
 406              		.loc 1 380 8 is_stmt 0 view .LVU128
 407 0122 A7DA     		bge	.L40
 408              	.LVL36:
ARM GAS  /tmp/ccwTS9FK.s 			page 17


 409              	.L7:
 380:src/menu.c    ****       break;
 410              		.loc 1 380 8 view .LVU129
 411              	.LBE59:
 398:src/menu.c    **** 
 412              		.loc 1 398 1 view .LVU130
 413 0124 0DF5097D 		add	sp, sp, #548
 414              		.cfi_remember_state
 415              		.cfi_def_cfa_offset 36
 416              		@ sp needed
 417 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 418              	.LVL37:
 419              	.L34:
 420              		.cfi_restore_state
 421              	.LBB60:
 370:src/menu.c    ****       str += 3;
 422              		.loc 1 370 7 is_stmt 1 view .LVU131
 370:src/menu.c    ****       str += 3;
 423              		.loc 1 370 11 is_stmt 0 view .LVU132
 424 012c 019B     		ldr	r3, [sp, #4]
 425 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 363:src/menu.c    **** 	break;
 426              		.loc 1 363 33 view .LVU133
 427 0130 0023     		movs	r3, #0
 428 0132 0093     		str	r3, [sp]
 429 0134 95E7     		b	.L15
 430              	.L42:
 431 0136 00BF     		.align	2
 432              	.L41:
 433 0138 00000000 		.word	forceDispPlot
 434 013c 00000000 		.word	RectPolConv
 435 0140 00000000 		.word	.LANCHOR0
 436              	.LBE60:
 437              		.cfi_endproc
 438              	.LFE31:
 440              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 441              		.align	2
 442              	.LC2:
 443 0000 57503334 		.ascii	"WP34s calculator for DM42:\000"
 443      73206361 
 443      6C63756C 
 443      61746F72 
 443      20666F72 
 444 001b 00       		.align	2
 445              	.LC3:
 446 001c 77697468 		.ascii	"with top row for annunciators,\000"
 446      20746F70 
 446      20726F77 
 446      20666F72 
 446      20616E6E 
 447 003b 00       		.align	2
 448              	.LC4:
 449 003c 61206C6F 		.ascii	"a longer alpha display,\000"
 449      6E676572 
 449      20616C70 
 449      68612064 
 449      6973706C 
ARM GAS  /tmp/ccwTS9FK.s 			page 18


 450              		.align	2
 451              	.LC5:
 452 0054 616E6420 		.ascii	"and some annunciators renamed.\000"
 452      736F6D65 
 452      20616E6E 
 452      756E6369 
 452      61746F72 
 453 0073 00       		.align	2
 454              	.LC6:
 455 0074 54686973 		.ascii	"This software is neither provided\000"
 455      20736F66 
 455      74776172 
 455      65206973 
 455      206E6569 
 456 0096 0000     		.align	2
 457              	.LC7:
 458 0098 6279206E 		.ascii	"by nor supported by SwissMicros.\000"
 458      6F722073 
 458      7570706F 
 458      72746564 
 458      20627920 
 459 00b9 000000   		.align	2
 460              	.LC8:
 461 00bc 20202020 		.ascii	"    Press EXIT key to continue...\000"
 461      50726573 
 461      73204558 
 461      4954206B 
 461      65792074 
 462              		.section	.text.disp_about,"ax",%progbits
 463              		.align	1
 464              		.p2align 2,,3
 465              		.global	disp_about
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 469              		.fpu fpv4-sp-d16
 471              	disp_about:
 472              	.LFB5:
  50:src/menu.c    ****   lcd_clear_buf();
 473              		.loc 1 50 19 is_stmt 1 view -0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
  51:src/menu.c    ****   lcd_writeClr(t24);
 477              		.loc 1 51 3 view .LVU135
  50:src/menu.c    ****   lcd_clear_buf();
 478              		.loc 1 50 19 is_stmt 0 view .LVU136
 479 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 480              		.cfi_def_cfa_offset 24
 481              		.cfi_offset 4, -24
 482              		.cfi_offset 5, -20
 483              		.cfi_offset 6, -16
 484              		.cfi_offset 7, -12
 485              		.cfi_offset 8, -8
 486              		.cfi_offset 14, -4
  52:src/menu.c    **** 
 487              		.loc 1 52 3 view .LVU137
ARM GAS  /tmp/ccwTS9FK.s 			page 19


 488 0004 1F4C     		ldr	r4, .L45
  51:src/menu.c    ****   lcd_writeClr(t24);
 489              		.loc 1 51 3 view .LVU138
 490 0006 204B     		ldr	r3, .L45+4
  55:src/menu.c    ****   t24->y += 5;
 491              		.loc 1 55 3 view .LVU139
 492 0008 204D     		ldr	r5, .L45+8
  51:src/menu.c    ****   lcd_writeClr(t24);
 493              		.loc 1 51 3 view .LVU140
 494 000a 9847     		blx	r3
 495              	.LVL38:
  52:src/menu.c    **** 
 496              		.loc 1 52 3 is_stmt 1 view .LVU141
 497 000c 606B     		ldr	r0, [r4, #52]
 498 000e 204B     		ldr	r3, .L45+12
 499 0010 9847     		blx	r3
 500              	.LVL39:
  54:src/menu.c    ****   lcd_printR(t24, "WP34s calculator for DM42:");
 501              		.loc 1 54 3 view .LVU142
 502 0012 0522     		movs	r2, #5
 503 0014 606B     		ldr	r0, [r4, #52]
 504 0016 1F4B     		ldr	r3, .L45+16
 505 0018 0021     		movs	r1, #0
 506 001a 9847     		blx	r3
 507              	.LVL40:
  55:src/menu.c    ****   t24->y += 5;
 508              		.loc 1 55 3 view .LVU143
  55:src/menu.c    ****   t24->y += 5;
 509              		.loc 1 55 3 view .LVU144
 510 001c 606B     		ldr	r0, [r4, #52]
 511 001e 1E49     		ldr	r1, .L45+20
 512 0020 0126     		movs	r6, #1
 513 0022 4674     		strb	r6, [r0, #17]
  55:src/menu.c    ****   t24->y += 5;
 514              		.loc 1 55 3 view .LVU145
 515 0024 A847     		blx	r5
 516              	.LVL41:
  55:src/menu.c    ****   t24->y += 5;
 517              		.loc 1 55 3 view .LVU146
 518 0026 606B     		ldr	r0, [r4, #52]
  58:src/menu.c    ****   lcd_print(t24, "a longer alpha display,");
 519              		.loc 1 58 3 is_stmt 0 view .LVU147
 520 0028 1C49     		ldr	r1, .L45+24
  56:src/menu.c    **** #ifdef TOP_ROW
 521              		.loc 1 56 10 view .LVU148
 522 002a C388     		ldrh	r3, [r0, #6]
  55:src/menu.c    ****   t24->y += 5;
 523              		.loc 1 55 3 view .LVU149
 524 002c 0027     		movs	r7, #0
  56:src/menu.c    **** #ifdef TOP_ROW
 525              		.loc 1 56 10 view .LVU150
 526 002e 0533     		adds	r3, r3, #5
 527 0030 C380     		strh	r3, [r0, #6]	@ movhi
  55:src/menu.c    ****   t24->y += 5;
 528              		.loc 1 55 3 view .LVU151
 529 0032 4774     		strb	r7, [r0, #17]
  55:src/menu.c    ****   t24->y += 5;
ARM GAS  /tmp/ccwTS9FK.s 			page 20


 530              		.loc 1 55 3 is_stmt 1 view .LVU152
  56:src/menu.c    **** #ifdef TOP_ROW
 531              		.loc 1 56 3 view .LVU153
  58:src/menu.c    ****   lcd_print(t24, "a longer alpha display,");
 532              		.loc 1 58 3 view .LVU154
 533 0034 A847     		blx	r5
 534              	.LVL42:
  59:src/menu.c    ****   lcd_print(t24, "and some annunciators renamed.");
 535              		.loc 1 59 3 view .LVU155
 536 0036 606B     		ldr	r0, [r4, #52]
 537 0038 1949     		ldr	r1, .L45+28
 538 003a A847     		blx	r5
 539              	.LVL43:
  60:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 540              		.loc 1 60 3 view .LVU156
 541 003c 606B     		ldr	r0, [r4, #52]
 542 003e 1949     		ldr	r1, .L45+32
 543 0040 A847     		blx	r5
 544              	.LVL44:
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 545              		.loc 1 69 3 view .LVU157
 546 0042 606B     		ldr	r0, [r4, #52]
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 547              		.loc 1 70 3 is_stmt 0 view .LVU158
 548 0044 1849     		ldr	r1, .L45+36
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 549              		.loc 1 69 10 view .LVU159
 550 0046 C388     		ldrh	r3, [r0, #6]
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 551              		.loc 1 70 3 view .LVU160
 552 0048 4674     		strb	r6, [r0, #17]
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 553              		.loc 1 69 10 view .LVU161
 554 004a 0533     		adds	r3, r3, #5
 555 004c C380     		strh	r3, [r0, #6]	@ movhi
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 556              		.loc 1 70 3 is_stmt 1 view .LVU162
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 557              		.loc 1 70 3 view .LVU163
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 558              		.loc 1 70 3 view .LVU164
 559 004e A847     		blx	r5
 560              	.LVL45:
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 561              		.loc 1 70 3 view .LVU165
 562 0050 606B     		ldr	r0, [r4, #52]
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 563              		.loc 1 70 3 view .LVU166
  71:src/menu.c    **** 
 564              		.loc 1 71 3 view .LVU167
  71:src/menu.c    **** 
 565              		.loc 1 71 3 view .LVU168
 566 0052 1649     		ldr	r1, .L45+40
 567 0054 4674     		strb	r6, [r0, #17]
  71:src/menu.c    **** 
 568              		.loc 1 71 3 view .LVU169
 569 0056 A847     		blx	r5
ARM GAS  /tmp/ccwTS9FK.s 			page 21


 570              	.LVL46:
  71:src/menu.c    **** 
 571              		.loc 1 71 3 view .LVU170
 572 0058 606B     		ldr	r0, [r4, #52]
  73:src/menu.c    ****   t24->x = 20;
 573              		.loc 1 73 20 is_stmt 0 view .LVU171
 574 005a 154B     		ldr	r3, .L45+44
  71:src/menu.c    **** 
 575              		.loc 1 71 3 view .LVU172
 576 005c 4774     		strb	r7, [r0, #17]
  71:src/menu.c    **** 
 577              		.loc 1 71 3 is_stmt 1 view .LVU173
  73:src/menu.c    ****   t24->x = 20;
 578              		.loc 1 73 3 view .LVU174
  73:src/menu.c    ****   t24->x = 20;
 579              		.loc 1 73 20 is_stmt 0 view .LVU175
 580 005e 9847     		blx	r3
 581              	.LVL47:
  73:src/menu.c    ****   t24->x = 20;
 582              		.loc 1 73 3 view .LVU176
 583 0060 636B     		ldr	r3, [r4, #52]
  75:src/menu.c    **** 
 584              		.loc 1 75 3 view .LVU177
 585 0062 1449     		ldr	r1, .L45+48
 586 0064 5E74     		strb	r6, [r3, #17]
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 587              		.loc 1 74 10 view .LVU178
 588 0066 1422     		movs	r2, #20
  73:src/menu.c    ****   t24->x = 20;
 589              		.loc 1 73 39 view .LVU179
 590 0068 C0F1EB00 		rsb	r0, r0, #235
  73:src/menu.c    ****   t24->x = 20;
 591              		.loc 1 73 10 view .LVU180
 592 006c D880     		strh	r0, [r3, #6]	@ movhi
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 593              		.loc 1 74 3 is_stmt 1 view .LVU181
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 594              		.loc 1 74 10 is_stmt 0 view .LVU182
 595 006e 9A80     		strh	r2, [r3, #4]	@ movhi
  75:src/menu.c    **** 
 596              		.loc 1 75 3 is_stmt 1 view .LVU183
  75:src/menu.c    **** 
 597              		.loc 1 75 3 view .LVU184
  75:src/menu.c    **** 
 598              		.loc 1 75 3 view .LVU185
 599 0070 1846     		mov	r0, r3
 600 0072 A847     		blx	r5
 601              	.LVL48:
  75:src/menu.c    **** 
 602              		.loc 1 75 3 view .LVU186
 603 0074 626B     		ldr	r2, [r4, #52]
  77:src/menu.c    **** 
 604              		.loc 1 77 3 is_stmt 0 view .LVU187
 605 0076 104B     		ldr	r3, .L45+52
  75:src/menu.c    **** 
 606              		.loc 1 75 3 view .LVU188
 607 0078 5774     		strb	r7, [r2, #17]
ARM GAS  /tmp/ccwTS9FK.s 			page 22


  75:src/menu.c    **** 
 608              		.loc 1 75 3 is_stmt 1 view .LVU189
  77:src/menu.c    **** 
 609              		.loc 1 77 3 view .LVU190
 610 007a 9847     		blx	r3
 611              	.LVL49:
  79:src/menu.c    **** }
 612              		.loc 1 79 3 view .LVU191
  80:src/menu.c    **** 
 613              		.loc 1 80 1 is_stmt 0 view .LVU192
 614 007c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 615              		.cfi_restore 14
 616              		.cfi_restore 8
 617              		.cfi_restore 7
 618              		.cfi_restore 6
 619              		.cfi_restore 5
 620              		.cfi_restore 4
 621              		.cfi_def_cfa_offset 0
  79:src/menu.c    **** }
 622              		.loc 1 79 3 view .LVU193
 623 0080 0E4B     		ldr	r3, .L45+56
 624 0082 1847     		bx	r3	@ indirect register sibling call
 625              	.LVL50:
 626              	.L46:
 627              		.align	2
 628              	.L45:
 629 0084 00200010 		.word	268443648
 630 0088 2D020008 		.word	134218285
 631 008c B1020008 		.word	134218417
 632 0090 65020008 		.word	134218341
 633 0094 6D020008 		.word	134218349
 634 0098 00000000 		.word	.LC2
 635 009c 1C000000 		.word	.LC3
 636 00a0 3C000000 		.word	.LC4
 637 00a4 54000000 		.word	.LC5
 638 00a8 74000000 		.word	.LC6
 639 00ac 98000000 		.word	.LC7
 640 00b0 71020008 		.word	134218353
 641 00b4 BC000000 		.word	.LC8
 642 00b8 31020008 		.word	134218289
 643 00bc 99030008 		.word	134218649
 644              		.cfi_endproc
 645              	.LFE5:
 647              		.section	.text.run_menu_item,"ax",%progbits
 648              		.align	1
 649              		.p2align 2,,3
 650              		.global	run_menu_item
 651              		.syntax unified
 652              		.thumb
 653              		.thumb_func
 654              		.fpu fpv4-sp-d16
 656              	run_menu_item:
 657              	.LVL51:
 658              	.LFB3:
  19:src/menu.c    ****   int ret = 0;
 659              		.loc 1 19 36 is_stmt 1 view -0
 660              		.cfi_startproc
ARM GAS  /tmp/ccwTS9FK.s 			page 23


 661              		@ args = 0, pretend = 0, frame = 0
 662              		@ frame_needed = 0, uses_anonymous_args = 0
  20:src/menu.c    **** 
 663              		.loc 1 20 3 view .LVU195
  22:src/menu.c    ****     case MI_ABOUT_PGM:
 664              		.loc 1 22 3 view .LVU196
 665 0000 0B28     		cmp	r0, #11
 666 0002 04D1     		bne	.L49
  24:src/menu.c    ****       break;
 667              		.loc 1 24 7 view .LVU197
  19:src/menu.c    ****   int ret = 0;
 668              		.loc 1 19 36 is_stmt 0 view .LVU198
 669 0004 08B5     		push	{r3, lr}
 670              		.cfi_def_cfa_offset 8
 671              		.cfi_offset 3, -8
 672              		.cfi_offset 14, -4
  24:src/menu.c    ****       break;
 673              		.loc 1 24 7 view .LVU199
 674 0006 FFF7FEFF 		bl	disp_about
 675              	.LVL52:
  25:src/menu.c    **** 
 676              		.loc 1 25 7 is_stmt 1 view .LVU200
  20:src/menu.c    **** 
 677              		.loc 1 20 7 is_stmt 0 view .LVU201
 678 000a 0020     		movs	r0, #0
  33:src/menu.c    **** 
 679              		.loc 1 33 1 view .LVU202
 680 000c 08BD     		pop	{r3, pc}
 681              	.LVL53:
 682              	.L49:
 683              		.cfi_def_cfa_offset 0
 684              		.cfi_restore 3
 685              		.cfi_restore 14
  28:src/menu.c    ****       break;
 686              		.loc 1 28 11 view .LVU203
 687 000e 4FF0FF30 		mov	r0, #-1
 688              	.LVL54:
  32:src/menu.c    **** }
 689              		.loc 1 32 3 is_stmt 1 view .LVU204
  33:src/menu.c    **** 
 690              		.loc 1 33 1 is_stmt 0 view .LVU205
 691 0012 7047     		bx	lr
 692              		.cfi_endproc
 693              	.LFE3:
 695              		.section	.text.set_menu,"ax",%progbits
 696              		.align	1
 697              		.p2align 2,,3
 698              		.global	set_menu
 699              		.syntax unified
 700              		.thumb
 701              		.thumb_func
 702              		.fpu fpv4-sp-d16
 704              	set_menu:
 705              	.LVL55:
 706              	.LFB6:
  86:src/menu.c    ****   int m = current_menu;
 707              		.loc 1 86 32 is_stmt 1 view -0
ARM GAS  /tmp/ccwTS9FK.s 			page 24


 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              		@ link register save eliminated.
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 712              		.loc 1 87 3 view .LVU207
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 713              		.loc 1 87 7 is_stmt 0 view .LVU208
 714 0000 0A4A     		ldr	r2, .L66
 715 0002 1368     		ldr	r3, [r2]
 716              	.LVL56:
  88:src/menu.c    ****     current_menu = default_menu;
 717              		.loc 1 88 3 is_stmt 1 view .LVU209
  88:src/menu.c    ****     current_menu = default_menu;
 718              		.loc 1 88 6 is_stmt 0 view .LVU210
 719 0004 8342     		cmp	r3, r0
 720 0006 0CD0     		beq	.L65
  91:src/menu.c    ****     current_menu = last_menu;
 721              		.loc 1 91 8 is_stmt 1 view .LVU211
  91:src/menu.c    ****     current_menu = last_menu;
 722              		.loc 1 91 11 is_stmt 0 view .LVU212
 723 0008 411C     		adds	r1, r0, #1
  92:src/menu.c    ****   }
 724              		.loc 1 92 5 is_stmt 1 view .LVU213
  92:src/menu.c    ****   }
 725              		.loc 1 92 18 is_stmt 0 view .LVU214
 726 000a 09BF     		itett	eq
 727 000c 0849     		ldreq	r1, .L66+4
  95:src/menu.c    ****   }
 728              		.loc 1 95 18 view .LVU215
 729 000e 1060     		strne	r0, [r2]
  92:src/menu.c    ****   }
 730              		.loc 1 92 18 view .LVU216
 731 0010 0968     		ldreq	r1, [r1]
 732 0012 1160     		streq	r1, [r2]
  95:src/menu.c    ****   }
 733              		.loc 1 95 5 is_stmt 1 view .LVU217
 734              	.L56:
  97:src/menu.c    **** }
 735              		.loc 1 97 3 view .LVU218
  97:src/menu.c    **** }
 736              		.loc 1 97 6 is_stmt 0 view .LVU219
 737 0014 092B     		cmp	r3, #9
 738 0016 03D0     		beq	.L54
  97:src/menu.c    **** }
 739              		.loc 1 97 17 discriminator 1 view .LVU220
 740 0018 102B     		cmp	r3, #16
  97:src/menu.c    **** }
 741              		.loc 1 97 32 is_stmt 1 discriminator 1 view .LVU221
  97:src/menu.c    **** }
 742              		.loc 1 97 42 is_stmt 0 discriminator 1 view .LVU222
 743 001a 1CBF     		itt	ne
 744 001c 044A     		ldrne	r2, .L66+4
 745 001e 1360     		strne	r3, [r2]
 746              	.L54:
  98:src/menu.c    **** 
 747              		.loc 1 98 1 view .LVU223
ARM GAS  /tmp/ccwTS9FK.s 			page 25


 748 0020 7047     		bx	lr
 749              	.L65:
  89:src/menu.c    ****   }
 750              		.loc 1 89 5 is_stmt 1 view .LVU224
  89:src/menu.c    ****   }
 751              		.loc 1 89 18 is_stmt 0 view .LVU225
 752 0022 0449     		ldr	r1, .L66+8
 753 0024 0968     		ldr	r1, [r1]
 754 0026 1160     		str	r1, [r2]
 755 0028 F4E7     		b	.L56
 756              	.L67:
 757 002a 00BF     		.align	2
 758              	.L66:
 759 002c 00000000 		.word	.LANCHOR1
 760 0030 00000000 		.word	.LANCHOR3
 761 0034 00000000 		.word	.LANCHOR2
 762              		.cfi_endproc
 763              	.LFE6:
 765              		.section	.text.toggle_default_menu,"ax",%progbits
 766              		.align	1
 767              		.p2align 2,,3
 768              		.global	toggle_default_menu
 769              		.syntax unified
 770              		.thumb
 771              		.thumb_func
 772              		.fpu fpv4-sp-d16
 774              	toggle_default_menu:
 775              	.LFB7:
 100:src/menu.c    ****   if (current_menu == default_menu) {
 776              		.loc 1 100 29 is_stmt 1 view -0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 0
 779              		@ frame_needed = 0, uses_anonymous_args = 0
 780              		@ link register save eliminated.
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 781              		.loc 1 101 3 view .LVU227
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 782              		.loc 1 101 20 is_stmt 0 view .LVU228
 783 0000 0549     		ldr	r1, .L70
 784 0002 064A     		ldr	r2, .L70+4
 785 0004 0868     		ldr	r0, [r1]
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 786              		.loc 1 101 6 view .LVU229
 787 0006 1368     		ldr	r3, [r2]
 788 0008 8342     		cmp	r3, r0
 789 000a 03D1     		bne	.L68
 102:src/menu.c    ****   }
 790              		.loc 1 102 5 is_stmt 1 view .LVU230
 102:src/menu.c    ****   }
 791              		.loc 1 102 38 is_stmt 0 view .LVU231
 792 000c C3F10F03 		rsb	r3, r3, #15
 102:src/menu.c    ****   }
 793              		.loc 1 102 33 view .LVU232
 794 0010 0B60     		str	r3, [r1]
 102:src/menu.c    ****   }
 795              		.loc 1 102 18 view .LVU233
 796 0012 1360     		str	r3, [r2]
ARM GAS  /tmp/ccwTS9FK.s 			page 26


 797              	.L68:
 104:src/menu.c    **** 
 798              		.loc 1 104 1 view .LVU234
 799 0014 7047     		bx	lr
 800              	.L71:
 801 0016 00BF     		.align	2
 802              	.L70:
 803 0018 00000000 		.word	.LANCHOR2
 804 001c 00000000 		.word	.LANCHOR1
 805              		.cfi_endproc
 806              	.LFE7:
 808              		.section	.text.get_menu,"ax",%progbits
 809              		.align	1
 810              		.p2align 2,,3
 811              		.global	get_menu
 812              		.syntax unified
 813              		.thumb
 814              		.thumb_func
 815              		.fpu fpv4-sp-d16
 817              	get_menu:
 818              	.LFB8:
 106:src/menu.c    ****   return current_menu;
 819              		.loc 1 106 17 is_stmt 1 view -0
 820              		.cfi_startproc
 821              		@ args = 0, pretend = 0, frame = 0
 822              		@ frame_needed = 0, uses_anonymous_args = 0
 823              		@ link register save eliminated.
 107:src/menu.c    **** }
 824              		.loc 1 107 3 view .LVU236
 107:src/menu.c    **** }
 825              		.loc 1 107 10 is_stmt 0 view .LVU237
 826 0000 014B     		ldr	r3, .L73
 108:src/menu.c    **** 
 827              		.loc 1 108 1 view .LVU238
 828 0002 1868     		ldr	r0, [r3]
 829 0004 7047     		bx	lr
 830              	.L74:
 831 0006 00BF     		.align	2
 832              	.L73:
 833 0008 00000000 		.word	.LANCHOR1
 834              		.cfi_endproc
 835              	.LFE8:
 837              		.section	.text.set_last_menu,"ax",%progbits
 838              		.align	1
 839              		.p2align 2,,3
 840              		.global	set_last_menu
 841              		.syntax unified
 842              		.thumb
 843              		.thumb_func
 844              		.fpu fpv4-sp-d16
 846              	set_last_menu:
 847              	.LFB10:
 114:src/menu.c    ****   set_menu (last_menu);
 848              		.loc 1 114 23 is_stmt 1 view -0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 0
 851              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccwTS9FK.s 			page 27


 852              		@ link register save eliminated.
 115:src/menu.c    **** }
 853              		.loc 1 115 3 view .LVU240
 854              	.LBB61:
 855              	.LBB62:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 856              		.loc 1 87 7 is_stmt 0 view .LVU241
 857 0000 074A     		ldr	r2, .L86
 858              	.LBE62:
 859              	.LBE61:
 115:src/menu.c    **** }
 860              		.loc 1 115 3 view .LVU242
 861 0002 0848     		ldr	r0, .L86+4
 862              	.LBB65:
 863              	.LBB63:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 864              		.loc 1 87 7 view .LVU243
 865 0004 1368     		ldr	r3, [r2]
 866              	.LBE63:
 867              	.LBE65:
 115:src/menu.c    **** }
 868              		.loc 1 115 3 view .LVU244
 869 0006 0168     		ldr	r1, [r0]
 870              	.LVL57:
 871              	.LBB66:
 872              	.LBI61:
  86:src/menu.c    ****   int m = current_menu;
 873              		.loc 1 86 6 is_stmt 1 view .LVU245
 874              	.LBB64:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 875              		.loc 1 87 3 view .LVU246
  88:src/menu.c    ****     current_menu = default_menu;
 876              		.loc 1 88 3 view .LVU247
  88:src/menu.c    ****     current_menu = default_menu;
 877              		.loc 1 88 6 is_stmt 0 view .LVU248
 878 0008 9942     		cmp	r1, r3
  89:src/menu.c    ****   }
 879              		.loc 1 89 5 is_stmt 1 view .LVU249
  89:src/menu.c    ****   }
 880              		.loc 1 89 18 is_stmt 0 view .LVU250
 881 000a 04BF     		itt	eq
 882 000c 0649     		ldreq	r1, .L86+8
 883              	.LVL58:
  89:src/menu.c    ****   }
 884              		.loc 1 89 18 view .LVU251
 885 000e 0968     		ldreq	r1, [r1]
  91:src/menu.c    ****     current_menu = last_menu;
 886              		.loc 1 91 8 is_stmt 1 view .LVU252
  95:src/menu.c    ****   }
 887              		.loc 1 95 18 is_stmt 0 view .LVU253
 888 0010 1160     		str	r1, [r2]
  97:src/menu.c    **** }
 889              		.loc 1 97 3 is_stmt 1 view .LVU254
  97:src/menu.c    **** }
 890              		.loc 1 97 6 is_stmt 0 view .LVU255
 891 0012 092B     		cmp	r3, #9
 892 0014 02D0     		beq	.L75
ARM GAS  /tmp/ccwTS9FK.s 			page 28


  97:src/menu.c    **** }
 893              		.loc 1 97 17 view .LVU256
 894 0016 102B     		cmp	r3, #16
  97:src/menu.c    **** }
 895              		.loc 1 97 32 is_stmt 1 view .LVU257
  97:src/menu.c    **** }
 896              		.loc 1 97 42 is_stmt 0 view .LVU258
 897 0018 18BF     		it	ne
 898 001a 0360     		strne	r3, [r0]
 899              	.LVL59:
 900              	.L75:
  97:src/menu.c    **** }
 901              		.loc 1 97 42 view .LVU259
 902              	.LBE64:
 903              	.LBE66:
 116:src/menu.c    **** 
 904              		.loc 1 116 1 view .LVU260
 905 001c 7047     		bx	lr
 906              	.L87:
 907 001e 00BF     		.align	2
 908              	.L86:
 909 0020 00000000 		.word	.LANCHOR1
 910 0024 00000000 		.word	.LANCHOR3
 911 0028 00000000 		.word	.LANCHOR2
 912              		.cfi_endproc
 913              	.LFE10:
 915              		.section	.text.mdot,"ax",%progbits
 916              		.align	1
 917              		.p2align 2,,3
 918              		.global	mdot
 919              		.syntax unified
 920              		.thumb
 921              		.thumb_func
 922              		.fpu fpv4-sp-d16
 924              	mdot:
 925              	.LVL60:
 926              	.LFB12:
 420:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 927              		.loc 1 420 40 is_stmt 1 view -0
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 0
 930              		@ frame_needed = 0, uses_anonymous_args = 0
 931              		@ link register save eliminated.
 421:src/menu.c    ****   if (on) {
 932              		.loc 1 421 3 view .LVU262
 421:src/menu.c    ****   if (on) {
 933              		.loc 1 421 6 is_stmt 0 view .LVU263
 934 0000 C728     		cmp	r0, #199
 935 0002 1AD8     		bhi	.L92
 936              	.LVL61:
 937              	.LBB69:
 938              	.LBI69:
 420:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 939              		.loc 1 420 6 is_stmt 1 view .LVU264
 940              	.LBB70:
 422:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 941              		.loc 1 422 3 view .LVU265
ARM GAS  /tmp/ccwTS9FK.s 			page 29


 942              	.LBE70:
 943              	.LBE69:
 420:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 944              		.loc 1 420 40 is_stmt 0 view .LVU266
 945 0004 10B4     		push	{r4}
 946              		.cfi_def_cfa_offset 4
 947              		.cfi_offset 4, -4
 948              	.LBB73:
 949              	.LBB71:
 422:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 950              		.loc 1 422 6 view .LVU267
 951 0006 63B9     		cbnz	r3, .L95
 952              		.loc 1 426 5 is_stmt 1 view .LVU268
 953              		.loc 1 426 17 is_stmt 0 view .LVU269
 954 0008 0C4B     		ldr	r3, .L96
 955              	.LVL62:
 956              		.loc 1 426 17 view .LVU270
 957 000a 03EB4000 		add	r0, r3, r0, lsl #1
 958              	.LVL63:
 959              		.loc 1 426 25 view .LVU271
 960 000e 0124     		movs	r4, #1
 961              		.loc 1 426 17 view .LVU272
 962 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 963              		.loc 1 426 25 view .LVU273
 964 0012 04FA01F1 		lsl	r1, r4, r1
 965              	.LVL64:
 966              		.loc 1 426 17 view .LVU274
 967 0016 23EA0101 		bic	r1, r3, r1
 968 001a 8154     		strb	r1, [r0, r2]
 969              	.LVL65:
 970              		.loc 1 426 17 view .LVU275
 971              	.LBE71:
 972              	.LBE73:
 427:src/menu.c    ****   }
 428:src/menu.c    **** }
 973              		.loc 1 428 1 view .LVU276
 974 001c 5DF8044B 		ldr	r4, [sp], #4
 975              		.cfi_remember_state
 976              		.cfi_restore 4
 977              		.cfi_def_cfa_offset 0
 978 0020 7047     		bx	lr
 979              	.LVL66:
 980              	.L95:
 981              		.cfi_restore_state
 982              	.LBB74:
 983              	.LBB72:
 423:src/menu.c    ****   }
 984              		.loc 1 423 5 is_stmt 1 view .LVU277
 423:src/menu.c    ****   }
 985              		.loc 1 423 17 is_stmt 0 view .LVU278
 986 0022 064B     		ldr	r3, .L96
 987              	.LVL67:
 423:src/menu.c    ****   }
 988              		.loc 1 423 17 view .LVU279
 989 0024 03EB4000 		add	r0, r3, r0, lsl #1
 990              	.LVL68:
 423:src/menu.c    ****   }
ARM GAS  /tmp/ccwTS9FK.s 			page 30


 991              		.loc 1 423 24 view .LVU280
 992 0028 0124     		movs	r4, #1
 423:src/menu.c    ****   }
 993              		.loc 1 423 17 view .LVU281
 994 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 423:src/menu.c    ****   }
 995              		.loc 1 423 24 view .LVU282
 996 002c 04FA01F1 		lsl	r1, r4, r1
 997              	.LVL69:
 423:src/menu.c    ****   }
 998              		.loc 1 423 17 view .LVU283
 999 0030 1943     		orrs	r1, r1, r3
 1000 0032 8154     		strb	r1, [r0, r2]
 1001              	.LBE72:
 1002              	.LBE74:
 1003              		.loc 1 428 1 view .LVU284
 1004 0034 5DF8044B 		ldr	r4, [sp], #4
 1005              		.cfi_restore 4
 1006              		.cfi_def_cfa_offset 0
 1007 0038 7047     		bx	lr
 1008              	.LVL70:
 1009              	.L92:
 1010              		.loc 1 428 1 view .LVU285
 1011 003a 7047     		bx	lr
 1012              	.L97:
 1013              		.align	2
 1014              	.L96:
 1015 003c 00000000 		.word	.LANCHOR0
 1016              		.cfi_endproc
 1017              	.LFE12:
 1019              		.section	.text.display_menu,"ax",%progbits
 1020              		.align	1
 1021              		.p2align 2,,3
 1022              		.global	display_menu
 1023              		.syntax unified
 1024              		.thumb
 1025              		.thumb_func
 1026              		.fpu fpv4-sp-d16
 1028              	display_menu:
 1029              	.LVL71:
 1030              	.LFB13:
 429:src/menu.c    **** 
 430:src/menu.c    **** 
 431:src/menu.c    **** void display_menu (int current_menu) {
 1031              		.loc 1 431 38 is_stmt 1 view -0
 1032              		.cfi_startproc
 1033              		@ args = 0, pretend = 0, frame = 0
 1034              		@ frame_needed = 0, uses_anonymous_args = 0
 432:src/menu.c    ****   int len = 0;
 1035              		.loc 1 432 3 view .LVU287
 433:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1036              		.loc 1 433 3 view .LVU288
 431:src/menu.c    ****   int len = 0;
 1037              		.loc 1 431 38 is_stmt 0 view .LVU289
 1038 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1039              		.cfi_def_cfa_offset 36
 1040              		.cfi_offset 4, -36
ARM GAS  /tmp/ccwTS9FK.s 			page 31


 1041              		.cfi_offset 5, -32
 1042              		.cfi_offset 6, -28
 1043              		.cfi_offset 7, -24
 1044              		.cfi_offset 8, -20
 1045              		.cfi_offset 9, -16
 1046              		.cfi_offset 10, -12
 1047              		.cfi_offset 11, -8
 1048              		.cfi_offset 14, -4
 1049 0004 83B0     		sub	sp, sp, #12
 1050              		.cfi_def_cfa_offset 48
 1051              		.loc 1 433 3 view .LVU290
 1052 0006 0024     		movs	r4, #0
 1053 0008 514F     		ldr	r7, .L120
 1054 000a 0094     		str	r4, [sp]
 1055 000c 3423     		movs	r3, #52
 1056 000e 4FF4C872 		mov	r2, #400
 1057 0012 BC21     		movs	r1, #188
 431:src/menu.c    ****   int len = 0;
 1058              		.loc 1 431 38 view .LVU291
 1059 0014 0646     		mov	r6, r0
 1060              		.loc 1 433 3 view .LVU292
 1061 0016 2046     		mov	r0, r4
 1062              	.LVL72:
 1063              		.loc 1 433 3 view .LVU293
 1064 0018 B847     		blx	r7
 1065              	.LVL73:
 434:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1066              		.loc 1 434 3 is_stmt 1 view .LVU294
 1067 001a 4E4D     		ldr	r5, .L120+4
 1068 001c FF23     		movs	r3, #255
 1069 001e 0093     		str	r3, [sp]
 1070 0020 4FF4C872 		mov	r2, #400
 1071 0024 0123     		movs	r3, #1
 1072 0026 BC21     		movs	r1, #188
 1073 0028 2046     		mov	r0, r4
 1074 002a B847     		blx	r7
 1075              	.LVL74:
 435:src/menu.c    ****   //Clear previous menu
 436:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1076              		.loc 1 436 3 view .LVU295
 1077              	.LBB75:
 1078              		.loc 1 436 8 view .LVU296
 1079              		.loc 1 436 21 view .LVU297
 437:src/menu.c    ****     mdots[col][0] = 0;
 1080              		.loc 1 437 19 is_stmt 0 view .LVU298
 1081 002c 2246     		mov	r2, r4
 1082 002e 05F5C871 		add	r1, r5, #400
 1083              	.LBE75:
 434:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1084              		.loc 1 434 3 view .LVU299
 1085 0032 2B46     		mov	r3, r5
 1086              	.LVL75:
 1087              	.L99:
 1088              	.LBB76:
 1089              		.loc 1 437 5 is_stmt 1 discriminator 3 view .LVU300
 1090              		.loc 1 437 19 is_stmt 0 discriminator 3 view .LVU301
 1091 0034 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccwTS9FK.s 			page 32


 438:src/menu.c    ****     mdots[col][1] = 0;
 1092              		.loc 1 438 5 is_stmt 1 discriminator 3 view .LVU302
 1093              		.loc 1 438 19 is_stmt 0 discriminator 3 view .LVU303
 1094 0036 5A70     		strb	r2, [r3, #1]
 436:src/menu.c    ****     mdots[col][0] = 0;
 1095              		.loc 1 436 32 is_stmt 1 discriminator 3 view .LVU304
 436:src/menu.c    ****     mdots[col][0] = 0;
 1096              		.loc 1 436 21 discriminator 3 view .LVU305
 1097 0038 0233     		adds	r3, r3, #2
 436:src/menu.c    ****     mdots[col][0] = 0;
 1098              		.loc 1 436 3 is_stmt 0 discriminator 3 view .LVU306
 1099 003a 9942     		cmp	r1, r3
 1100 003c FAD1     		bne	.L99
 1101 003e 464B     		ldr	r3, .L120+8
 1102 0040 DFF81C81 		ldr	r8, .L120+16
 1103 0044 D024     		movs	r4, #208
 1104 0046 04FB0634 		mla	r4, r4, r6, r3
 1105 004a 2034     		adds	r4, r4, #32
 436:src/menu.c    ****     mdots[col][0] = 0;
 1106              		.loc 1 436 3 view .LVU307
 1107 004c 0027     		movs	r7, #0
 1108 004e 25E0     		b	.L102
 1109              	.LVL76:
 1110              	.L100:
 436:src/menu.c    ****     mdots[col][0] = 0;
 1111              		.loc 1 436 3 view .LVU308
 1112              	.LBE76:
 1113              	.LBB77:
 439:src/menu.c    ****   }
 440:src/menu.c    **** 
 441:src/menu.c    ****   // Draw menu items
 442:src/menu.c    ****   // 
 443:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 444:src/menu.c    ****     /*
 445:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 446:src/menu.c    ****     */
 447:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 448:src/menu.c    ****     // Unshifted first
 449:src/menu.c    ****     if (current_menu == USER_MENU) {
 450:src/menu.c    ****       len = pixel_length (UserMenu.keys[item].unshifted_label, 0); // 0 means not small font
 451:src/menu.c    ****       set_menu_label ( UserMenu.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 452:src/menu.c    ****       // Now shifted ...	
 453:src/menu.c    ****       len = pixel_length (UserMenu.keys[item].shifted_label, 0); // 0 means not small font
 454:src/menu.c    ****       len = item*32 + (32-len)/2;
 455:src/menu.c    ****       if (len<0) len = 0;
 456:src/menu.c    ****       if (len>199) len = 199;
 457:src/menu.c    ****       set_menu_label ( UserMenu.keys[item].shifted_label, 0, len, 1 );
 458:src/menu.c    ****     }
 459:src/menu.c    ****     else {
 460:src/menu.c    ****       len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small 
 1114              		.loc 1 460 13 view .LVU309
 1115 0050 FFF7FEFF 		bl	pixel_length
 1116              	.LVL77:
 461:src/menu.c    ****       set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0
 1117              		.loc 1 461 7 is_stmt 1 view .LVU310
 1118              		.loc 1 461 89 is_stmt 0 view .LVU311
 1119 0054 C0F12000 		rsb	r0, r0, #32
ARM GAS  /tmp/ccwTS9FK.s 			page 33


 1120              	.LVL78:
 1121              		.loc 1 461 95 view .LVU312
 1122 0058 00EBD070 		add	r0, r0, r0, lsr #31
 1123              		.loc 1 461 7 view .LVU313
 1124 005c 07EB6001 		add	r1, r7, r0, asr #1
 1125 0060 0022     		movs	r2, #0
 1126 0062 2046     		mov	r0, r4
 1127 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1128              	.LVL79:
 462:src/menu.c    ****       // Now shifted ...	
 463:src/menu.c    ****       len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small fo
 1129              		.loc 1 463 7 is_stmt 1 view .LVU314
 1130              		.loc 1 463 13 is_stmt 0 view .LVU315
 1131 0068 0021     		movs	r1, #0
 1132 006a 4846     		mov	r0, r9
 1133 006c FFF7FEFF 		bl	pixel_length
 1134              	.LVL80:
 464:src/menu.c    ****       len = item*32 + (32-len)/2;
 1135              		.loc 1 464 7 is_stmt 1 view .LVU316
 1136              		.loc 1 464 26 is_stmt 0 view .LVU317
 1137 0070 C0F12001 		rsb	r1, r0, #32
 1138              		.loc 1 464 31 view .LVU318
 1139 0074 01EBD171 		add	r1, r1, r1, lsr #31
 1140              	.LVL81:
 465:src/menu.c    ****       if (len<0) len = 0;
 1141              		.loc 1 465 7 is_stmt 1 view .LVU319
 464:src/menu.c    ****       len = item*32 + (32-len)/2;
 1142              		.loc 1 464 11 is_stmt 0 view .LVU320
 1143 0078 07EB6101 		add	r1, r7, r1, asr #1
 1144              	.LVL82:
 1145              	.L118:
 464:src/menu.c    ****       len = item*32 + (32-len)/2;
 1146              		.loc 1 464 11 view .LVU321
 1147 007c C729     		cmp	r1, #199
 1148 007e A8BF     		it	ge
 1149 0080 C721     		movge	r1, #199
 1150              	.LVL83:
 466:src/menu.c    ****       if (len>199) len = 199;
 467:src/menu.c    ****       set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 1151              		.loc 1 467 7 is_stmt 1 view .LVU322
 1152 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1153              	.LVL84:
 1154              		.loc 1 467 7 is_stmt 0 view .LVU323
 1155 0086 4846     		mov	r0, r9
 1156 0088 0122     		movs	r2, #1
 1157 008a 2037     		adds	r7, r7, #32
 1158 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1159              	.LVL85:
 443:src/menu.c    ****     /*
 1160              		.loc 1 443 32 is_stmt 1 view .LVU324
 443:src/menu.c    ****     /*
 1161              		.loc 1 443 22 view .LVU325
 443:src/menu.c    ****     /*
 1162              		.loc 1 443 3 is_stmt 0 view .LVU326
 1163 0090 C02F     		cmp	r7, #192
 1164 0092 08F12008 		add	r8, r8, #32
 1165 0096 04F12004 		add	r4, r4, #32
ARM GAS  /tmp/ccwTS9FK.s 			page 34


 1166 009a 20D0     		beq	.L119
 1167              	.L102:
 449:src/menu.c    ****       len = pixel_length (UserMenu.keys[item].unshifted_label, 0); // 0 means not small font
 1168              		.loc 1 449 5 is_stmt 1 view .LVU327
 460:src/menu.c    ****       set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0
 1169              		.loc 1 460 7 view .LVU328
 449:src/menu.c    ****       len = pixel_length (UserMenu.keys[item].unshifted_label, 0); // 0 means not small font
 1170              		.loc 1 449 8 is_stmt 0 view .LVU329
 1171 009c 632E     		cmp	r6, #99
 460:src/menu.c    ****       set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0
 1172              		.loc 1 460 13 view .LVU330
 1173 009e 4FF00001 		mov	r1, #0
 1174 00a2 2046     		mov	r0, r4
 1175 00a4 04F10809 		add	r9, r4, #8
 449:src/menu.c    ****       len = pixel_length (UserMenu.keys[item].unshifted_label, 0); // 0 means not small font
 1176              		.loc 1 449 8 view .LVU331
 1177 00a8 D2D1     		bne	.L100
 450:src/menu.c    ****       set_menu_label ( UserMenu.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1178              		.loc 1 450 7 is_stmt 1 view .LVU332
 450:src/menu.c    ****       set_menu_label ( UserMenu.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1179              		.loc 1 450 13 is_stmt 0 view .LVU333
 1180 00aa 4046     		mov	r0, r8
 1181 00ac FFF7FEFF 		bl	pixel_length
 1182              	.LVL86:
 451:src/menu.c    ****       // Now shifted ...	
 1183              		.loc 1 451 7 is_stmt 1 view .LVU334
 451:src/menu.c    ****       // Now shifted ...	
 1184              		.loc 1 451 78 is_stmt 0 view .LVU335
 1185 00b0 C0F12000 		rsb	r0, r0, #32
 1186              	.LVL87:
 451:src/menu.c    ****       // Now shifted ...	
 1187              		.loc 1 451 84 view .LVU336
 1188 00b4 00EBD070 		add	r0, r0, r0, lsr #31
 451:src/menu.c    ****       // Now shifted ...	
 1189              		.loc 1 451 7 view .LVU337
 1190 00b8 07EB6001 		add	r1, r7, r0, asr #1
 1191 00bc 0022     		movs	r2, #0
 1192 00be 4046     		mov	r0, r8
 1193 00c0 08F10809 		add	r9, r8, #8
 1194 00c4 FFF7FEFF 		bl	set_menu_label.constprop.0
 1195              	.LVL88:
 453:src/menu.c    ****       len = item*32 + (32-len)/2;
 1196              		.loc 1 453 7 is_stmt 1 view .LVU338
 453:src/menu.c    ****       len = item*32 + (32-len)/2;
 1197              		.loc 1 453 13 is_stmt 0 view .LVU339
 1198 00c8 0021     		movs	r1, #0
 1199 00ca 4846     		mov	r0, r9
 1200 00cc FFF7FEFF 		bl	pixel_length
 1201              	.LVL89:
 454:src/menu.c    ****       if (len<0) len = 0;
 1202              		.loc 1 454 7 is_stmt 1 view .LVU340
 454:src/menu.c    ****       if (len<0) len = 0;
 1203              		.loc 1 454 26 is_stmt 0 view .LVU341
 1204 00d0 C0F12000 		rsb	r0, r0, #32
 1205              	.LVL90:
 454:src/menu.c    ****       if (len<0) len = 0;
 1206              		.loc 1 454 31 view .LVU342
ARM GAS  /tmp/ccwTS9FK.s 			page 35


 1207 00d4 00EBD070 		add	r0, r0, r0, lsr #31
 1208              	.LVL91:
 455:src/menu.c    ****       if (len>199) len = 199;
 1209              		.loc 1 455 7 is_stmt 1 view .LVU343
 454:src/menu.c    ****       if (len<0) len = 0;
 1210              		.loc 1 454 11 is_stmt 0 view .LVU344
 1211 00d8 07EB6001 		add	r1, r7, r0, asr #1
 1212              	.LVL92:
 454:src/menu.c    ****       if (len<0) len = 0;
 1213              		.loc 1 454 11 view .LVU345
 1214 00dc CEE7     		b	.L118
 1215              	.LVL93:
 1216              	.L119:
 454:src/menu.c    ****       if (len<0) len = 0;
 1217              		.loc 1 454 11 view .LVU346
 1218 00de 1F4E     		ldr	r6, .L120+12
 1219              	.LVL94:
 454:src/menu.c    ****       if (len<0) len = 0;
 1220              		.loc 1 454 11 view .LVU347
 1221              	.LBE77:
 1222              	.LBB78:
 1223              	.LBB79:
 468:src/menu.c    ****     }      
 469:src/menu.c    ****   }
 470:src/menu.c    **** 
 471:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 472:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 473:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 474:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 475:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1224              		.loc 1 475 2 view .LVU348
 1225 00e0 DFF86C90 		ldr	r9, .L120
 1226 00e4 C5F1040A 		rsb	r10, r5, #4
 1227 00e8 06F5C47B 		add	fp, r6, #392
 1228              	.LBE79:
 1229              	.LBE78:
 1230              	.LBB81:
 443:src/menu.c    ****     /*
 1231              		.loc 1 443 3 view .LVU349
 1232 00ec 771E     		subs	r7, r6, #1
 1233              	.LBE81:
 1234              	.LBB82:
 1235              	.LBB80:
 1236              		.loc 1 475 2 view .LVU350
 1237 00ee 4FF0FF08 		mov	r8, #255
 1238              	.L103:
 1239              	.LVL95:
 472:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1240              		.loc 1 472 23 is_stmt 1 view .LVU351
 1241 00f2 0AEB0705 		add	r5, r10, r7
 472:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1242              		.loc 1 472 14 is_stmt 0 view .LVU352
 1243 00f6 0024     		movs	r4, #0
 1244              	.LVL96:
 1245              	.L106:
 473:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1246              		.loc 1 473 7 is_stmt 1 view .LVU353
ARM GAS  /tmp/ccwTS9FK.s 			page 36


 1247              		.loc 1 475 2 view .LVU354
 473:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1248              		.loc 1 473 22 is_stmt 0 view .LVU355
 1249 00f8 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 473:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1250              		.loc 1 473 40 view .LVU356
 1251 00fc 2241     		asrs	r2, r2, r4
 1252              		.loc 1 475 2 view .LVU357
 1253 00fe A4EB8401 		sub	r1, r4, r4, lsl #2
 1254 0102 0323     		movs	r3, #3
 473:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1255              		.loc 1 473 10 view .LVU358
 1256 0104 12F0010F 		tst	r2, #1
 1257              		.loc 1 475 2 view .LVU359
 1258 0108 01F1E901 		add	r1, r1, #233
 1259 010c 1A46     		mov	r2, r3
 1260 010e 2846     		mov	r0, r5
 473:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1261              		.loc 1 473 10 view .LVU360
 1262 0110 02D0     		beq	.L104
 1263              		.loc 1 475 2 view .LVU361
 1264 0112 CDF80080 		str	r8, [sp]
 1265 0116 C847     		blx	r9
 1266              	.LVL97:
 1267              	.L104:
 476:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1268              		.loc 1 476 7 is_stmt 1 view .LVU362
 477:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 478:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1269              		.loc 1 478 2 view .LVU363
 476:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1270              		.loc 1 476 22 is_stmt 0 view .LVU364
 1271 0118 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 476:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1272              		.loc 1 476 40 view .LVU365
 1273 011a 2241     		asrs	r2, r2, r4
 1274              		.loc 1 478 2 view .LVU366
 1275 011c A4EB8401 		sub	r1, r4, r4, lsl #2
 1276 0120 0323     		movs	r3, #3
 476:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1277              		.loc 1 476 10 view .LVU367
 1278 0122 12F0010F 		tst	r2, #1
 1279              		.loc 1 478 2 view .LVU368
 1280 0126 01F1D001 		add	r1, r1, #208
 1281 012a 1A46     		mov	r2, r3
 1282 012c 04F10104 		add	r4, r4, #1
 1283              	.LVL98:
 1284              		.loc 1 478 2 view .LVU369
 1285 0130 2846     		mov	r0, r5
 476:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1286              		.loc 1 476 10 view .LVU370
 1287 0132 02D0     		beq	.L105
 1288              		.loc 1 478 2 view .LVU371
 1289 0134 CDF80080 		str	r8, [sp]
 1290 0138 C847     		blx	r9
 1291              	.LVL99:
 1292              	.L105:
ARM GAS  /tmp/ccwTS9FK.s 			page 37


 472:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1293              		.loc 1 472 32 is_stmt 1 discriminator 2 view .LVU372
 472:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1294              		.loc 1 472 23 discriminator 2 view .LVU373
 472:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1295              		.loc 1 472 5 is_stmt 0 discriminator 2 view .LVU374
 1296 013a 062C     		cmp	r4, #6
 1297 013c DCD1     		bne	.L106
 1298              	.LBE80:
 471:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1299              		.loc 1 471 32 is_stmt 1 discriminator 2 view .LVU375
 471:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1300              		.loc 1 471 21 discriminator 2 view .LVU376
 1301 013e 0236     		adds	r6, r6, #2
 471:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1302              		.loc 1 471 3 is_stmt 0 discriminator 2 view .LVU377
 1303 0140 B345     		cmp	fp, r6
 1304 0142 07F10207 		add	r7, r7, #2
 1305 0146 D4D1     		bne	.L103
 1306              	.LBE82:
 479:src/menu.c    ****     }
 480:src/menu.c    ****   }
 481:src/menu.c    **** }
 1307              		.loc 1 481 1 view .LVU378
 1308 0148 03B0     		add	sp, sp, #12
 1309              		.cfi_def_cfa_offset 36
 1310              		@ sp needed
 1311 014a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1312              	.LVL100:
 1313              	.L121:
 1314              		.loc 1 481 1 view .LVU379
 1315 014e 00BF     		.align	2
 1316              	.L120:
 1317 0150 3D020008 		.word	134218301
 1318 0154 00000000 		.word	.LANCHOR0
 1319 0158 00000000 		.word	.LANCHOR5
 1320 015c 01000000 		.word	.LANCHOR0+1
 1321 0160 20000000 		.word	.LANCHOR4+32
 1322              		.cfi_endproc
 1323              	.LFE13:
 1325              		.section	.text.display_current_menu,"ax",%progbits
 1326              		.align	1
 1327              		.p2align 2,,3
 1328              		.global	display_current_menu
 1329              		.syntax unified
 1330              		.thumb
 1331              		.thumb_func
 1332              		.fpu fpv4-sp-d16
 1334              	display_current_menu:
 1335              	.LFB9:
 110:src/menu.c    ****   display_menu (current_menu);
 1336              		.loc 1 110 30 is_stmt 1 view -0
 1337              		.cfi_startproc
 1338              		@ args = 0, pretend = 0, frame = 0
 1339              		@ frame_needed = 0, uses_anonymous_args = 0
 1340              		@ link register save eliminated.
 111:src/menu.c    **** }
ARM GAS  /tmp/ccwTS9FK.s 			page 38


 1341              		.loc 1 111 3 view .LVU381
 1342 0000 014B     		ldr	r3, .L123
 1343 0002 1868     		ldr	r0, [r3]
 1344 0004 FFF7FEBF 		b	display_menu
 1345              	.LVL101:
 1346              	.L124:
 1347              		.align	2
 1348              	.L123:
 1349 0008 00000000 		.word	.LANCHOR1
 1350              		.cfi_endproc
 1351              	.LFE9:
 1353              		.section	.text.all_menu_dots,"ax",%progbits
 1354              		.align	1
 1355              		.p2align 2,,3
 1356              		.global	all_menu_dots
 1357              		.syntax unified
 1358              		.thumb
 1359              		.thumb_func
 1360              		.fpu fpv4-sp-d16
 1362              	all_menu_dots:
 1363              	.LFB14:
 482:src/menu.c    **** 
 483:src/menu.c    **** void all_menu_dots () {
 1364              		.loc 1 483 23 view -0
 1365              		.cfi_startproc
 1366              		@ args = 0, pretend = 0, frame = 0
 1367              		@ frame_needed = 0, uses_anonymous_args = 0
 484:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1368              		.loc 1 484 3 view .LVU383
 1369              	.LBB83:
 1370              		.loc 1 484 8 view .LVU384
 1371              	.LVL102:
 1372              		.loc 1 484 21 view .LVU385
 1373              	.LBE83:
 483:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1374              		.loc 1 483 23 is_stmt 0 view .LVU386
 1375 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1376              		.cfi_def_cfa_offset 20
 1377              		.cfi_offset 4, -20
 1378              		.cfi_offset 5, -16
 1379              		.cfi_offset 6, -12
 1380              		.cfi_offset 7, -8
 1381              		.cfi_offset 14, -4
 1382              	.LBB87:
 1383              	.LBB84:
 485:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 486:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1384              		.loc 1 486 2 view .LVU387
 1385 0002 0D4E     		ldr	r6, .L131
 1386              	.LBE84:
 1387              	.LBE87:
 483:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1388              		.loc 1 483 23 view .LVU388
 1389 0004 83B0     		sub	sp, sp, #12
 1390              		.cfi_def_cfa_offset 32
 483:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1391              		.loc 1 483 23 view .LVU389
ARM GAS  /tmp/ccwTS9FK.s 			page 39


 1392 0006 0025     		movs	r5, #0
 1393              	.LBB88:
 1394              	.LBB85:
 1395              		.loc 1 486 2 view .LVU390
 1396 0008 FF27     		movs	r7, #255
 1397              	.LVL103:
 1398              	.L126:
 485:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1399              		.loc 1 485 23 is_stmt 1 view .LVU391
 1400              	.LBE85:
 1401              	.LBE88:
 483:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1402              		.loc 1 483 23 is_stmt 0 view .LVU392
 1403 000a E924     		movs	r4, #233
 1404              	.LVL104:
 1405              	.L127:
 1406              	.LBB89:
 1407              	.LBB86:
 1408              		.loc 1 486 2 is_stmt 1 discriminator 3 view .LVU393
 1409 000c 0323     		movs	r3, #3
 1410 000e 1A46     		mov	r2, r3
 1411 0010 2146     		mov	r1, r4
 1412 0012 2846     		mov	r0, r5
 1413 0014 0097     		str	r7, [sp]
 1414 0016 B047     		blx	r6
 1415              	.LVL105:
 487:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1416              		.loc 1 487 2 discriminator 3 view .LVU394
 1417 0018 0323     		movs	r3, #3
 1418 001a A4F11901 		sub	r1, r4, #25
 1419 001e 0097     		str	r7, [sp]
 1420 0020 1A46     		mov	r2, r3
 1421 0022 2846     		mov	r0, r5
 1422 0024 033C     		subs	r4, r4, #3
 1423 0026 B047     		blx	r6
 1424              	.LVL106:
 485:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1425              		.loc 1 485 32 discriminator 3 view .LVU395
 485:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1426              		.loc 1 485 23 discriminator 3 view .LVU396
 485:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1427              		.loc 1 485 5 is_stmt 0 discriminator 3 view .LVU397
 1428 0028 D72C     		cmp	r4, #215
 1429 002a EFD1     		bne	.L127
 1430              	.LBE86:
 484:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1431              		.loc 1 484 32 is_stmt 1 discriminator 2 view .LVU398
 484:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1432              		.loc 1 484 21 discriminator 2 view .LVU399
 1433 002c 0235     		adds	r5, r5, #2
 484:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1434              		.loc 1 484 3 is_stmt 0 discriminator 2 view .LVU400
 1435 002e B5F5C87F 		cmp	r5, #400
 1436 0032 EAD1     		bne	.L126
 1437              	.LBE89:
 488:src/menu.c    ****     }
 489:src/menu.c    ****   }
ARM GAS  /tmp/ccwTS9FK.s 			page 40


 490:src/menu.c    **** }  
 1438              		.loc 1 490 1 view .LVU401
 1439 0034 03B0     		add	sp, sp, #12
 1440              		.cfi_def_cfa_offset 20
 1441              		@ sp needed
 1442 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1443              	.L132:
 1444              		.align	2
 1445              	.L131:
 1446 0038 3D020008 		.word	134218301
 1447              		.cfi_endproc
 1448              	.LFE14:
 1450              		.section	.text.build_user_menu,"ax",%progbits
 1451              		.align	1
 1452              		.p2align 2,,3
 1453              		.global	build_user_menu
 1454              		.syntax unified
 1455              		.thumb
 1456              		.thumb_func
 1457              		.fpu fpv4-sp-d16
 1459              	build_user_menu:
 1460              	.LFB15:
 491:src/menu.c    **** 
 492:src/menu.c    **** void build_user_menu(void)
 493:src/menu.c    **** {
 1461              		.loc 1 493 1 is_stmt 1 view -0
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 16
 1464              		@ frame_needed = 0, uses_anonymous_args = 0
 494:src/menu.c    ****   // find the label 'MNU'
 495:src/menu.c    ****   const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 1465              		.loc 1 495 3 view .LVU403
 1466              	.LVL107:
 496:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 1467              		.loc 1 496 3 view .LVU404
 493:src/menu.c    ****   // find the label 'MNU'
 1468              		.loc 1 493 1 is_stmt 0 view .LVU405
 1469 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1470              		.cfi_def_cfa_offset 36
 1471              		.cfi_offset 4, -36
 1472              		.cfi_offset 5, -32
 1473              		.cfi_offset 6, -28
 1474              		.cfi_offset 7, -24
 1475              		.cfi_offset 8, -20
 1476              		.cfi_offset 9, -16
 1477              		.cfi_offset 10, -12
 1478              		.cfi_offset 11, -8
 1479              		.cfi_offset 14, -4
 1480              		.loc 1 496 21 view .LVU406
 1481 0004 0021     		movs	r1, #0
 1482 0006 4748     		ldr	r0, .L172
 1483 0008 DFF82881 		ldr	r8, .L172+16
 493:src/menu.c    ****   // find the label 'MNU'
 1484              		.loc 1 493 1 view .LVU407
 1485 000c 85B0     		sub	sp, sp, #20
 1486              		.cfi_def_cfa_offset 56
 1487              		.loc 1 496 21 view .LVU408
ARM GAS  /tmp/ccwTS9FK.s 			page 41


 1488 000e FFF7FEFF 		bl	findmultilbl
 1489              	.LVL108:
 1490 0012 4346     		mov	r3, r8
 1491 0014 0446     		mov	r4, r0
 1492              	.LVL109:
 497:src/menu.c    ****   int i=0;
 1493              		.loc 1 497 3 is_stmt 1 view .LVU409
 498:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 1494              		.loc 1 498 3 view .LVU410
 1495              	.LBB90:
 1496              		.loc 1 498 8 view .LVU411
 1497              		.loc 1 498 19 view .LVU412
 499:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1498              		.loc 1 499 43 is_stmt 0 view .LVU413
 1499 0016 0022     		movs	r2, #0
 1500 0018 08F1C000 		add	r0, r8, #192
 1501              	.LVL110:
 500:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 501:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1502              		.loc 1 501 42 view .LVU414
 1503 001c 2E21     		movs	r1, #46
 1504              	.LVL111:
 1505              	.L134:
 499:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1506              		.loc 1 499 7 is_stmt 1 discriminator 3 view .LVU415
 499:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1507              		.loc 1 499 43 is_stmt 0 discriminator 3 view .LVU416
 1508 001e 83F82020 		strb	r2, [r3, #32]
 500:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1509              		.loc 1 500 7 is_stmt 1 discriminator 3 view .LVU417
 500:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1510              		.loc 1 500 40 is_stmt 0 discriminator 3 view .LVU418
 1511 0022 5A61     		str	r2, [r3, #20]
 1512              		.loc 1 501 7 is_stmt 1 discriminator 3 view .LVU419
 1513              		.loc 1 501 42 is_stmt 0 discriminator 3 view .LVU420
 1514 0024 1974     		strb	r1, [r3, #16]
 502:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1515              		.loc 1 502 7 is_stmt 1 discriminator 3 view .LVU421
 1516              		.loc 1 502 41 is_stmt 0 discriminator 3 view .LVU422
 1517 0026 83F82820 		strb	r2, [r3, #40]
 503:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1518              		.loc 1 503 7 is_stmt 1 discriminator 3 view .LVU423
 1519              		.loc 1 503 38 is_stmt 0 discriminator 3 view .LVU424
 1520 002a DA61     		str	r2, [r3, #28]
 504:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1521              		.loc 1 504 7 is_stmt 1 discriminator 3 view .LVU425
 1522              		.loc 1 504 40 is_stmt 0 discriminator 3 view .LVU426
 1523 002c 1976     		strb	r1, [r3, #24]
 498:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1524              		.loc 1 498 24 is_stmt 1 discriminator 3 view .LVU427
 498:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1525              		.loc 1 498 19 discriminator 3 view .LVU428
 1526 002e 2033     		adds	r3, r3, #32
 498:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1527              		.loc 1 498 3 is_stmt 0 discriminator 3 view .LVU429
 1528 0030 8342     		cmp	r3, r0
 1529 0032 F4D1     		bne	.L134
ARM GAS  /tmp/ccwTS9FK.s 			page 42


 498:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1530              		.loc 1 498 3 discriminator 3 view .LVU430
 1531              	.LBE90:
 505:src/menu.c    ****   }
 506:src/menu.c    ****   while (pc && i < 12) {
 1532              		.loc 1 506 9 is_stmt 1 view .LVU431
 1533 0034 002C     		cmp	r4, #0
 1534 0036 3FD0     		beq	.L133
 1535 0038 3B4D     		ldr	r5, .L172+4
 1536              	.LBB91:
 507:src/menu.c    ****     s_opcode op;
 508:src/menu.c    ****     char buf1[16];
 509:src/menu.c    **** 
 510:src/menu.c    ****     pc = do_inc(pc, 0);
 511:src/menu.c    ****     op = (s_opcode) getprog(pc);
 512:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 513:src/menu.c    ****       break;
 514:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 515:src/menu.c    ****       if (i==4) {
 516:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 517:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 518:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 1537              		.loc 1 518 2 is_stmt 0 view .LVU432
 1538 003a DFF8FC90 		ldr	r9, .L172+20
 519:src/menu.c    ****       }
 520:src/menu.c    ****       else if (i==5) {
 521:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 522:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 523:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1539              		.loc 1 523 2 view .LVU433
 1540 003e 05F1A00A 		add	r10, r5, #160
 1541              	.LBE91:
 506:src/menu.c    ****     s_opcode op;
 1542              		.loc 1 506 9 view .LVU434
 1543 0042 0026     		movs	r6, #0
 1544              	.LVL112:
 1545              	.L147:
 1546              	.LBB94:
 507:src/menu.c    ****     s_opcode op;
 1547              		.loc 1 507 5 is_stmt 1 view .LVU435
 508:src/menu.c    **** 
 1548              		.loc 1 508 5 view .LVU436
 510:src/menu.c    ****     op = (s_opcode) getprog(pc);
 1549              		.loc 1 510 5 view .LVU437
 510:src/menu.c    ****     op = (s_opcode) getprog(pc);
 1550              		.loc 1 510 10 is_stmt 0 view .LVU438
 1551 0044 2046     		mov	r0, r4
 1552 0046 0021     		movs	r1, #0
 1553 0048 FFF7FEFF 		bl	do_inc
 1554              	.LVL113:
 1555 004c 0446     		mov	r4, r0
 1556              	.LVL114:
 511:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1557              		.loc 1 511 5 is_stmt 1 view .LVU439
 511:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1558              		.loc 1 511 21 is_stmt 0 view .LVU440
 1559 004e FFF7FEFF 		bl	getprog
ARM GAS  /tmp/ccwTS9FK.s 			page 43


 1560              	.LVL115:
 511:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1561              		.loc 1 511 8 view .LVU441
 1562 0052 1FFA80FB 		uxth	fp, r0
 1563              	.LVL116:
 512:src/menu.c    ****       break;
 1564              		.loc 1 512 5 is_stmt 1 view .LVU442
 512:src/menu.c    ****       break;
 1565              		.loc 1 512 8 is_stmt 0 view .LVU443
 1566 0056 BBF59D7F 		cmp	fp, #314
 1567 005a 2DD0     		beq	.L133
 514:src/menu.c    ****       if (i==4) {
 1568              		.loc 1 514 5 is_stmt 1 view .LVU444
 514:src/menu.c    ****       if (i==4) {
 1569              		.loc 1 514 8 is_stmt 0 view .LVU445
 1570 005c BBF5807F 		cmp	fp, #256
 1571 0060 3AD0     		beq	.L169
 524:src/menu.c    ****       }
 525:src/menu.c    ****       i += 1;
 526:src/menu.c    ****       continue;
 527:src/menu.c    ****     }
 528:src/menu.c    ****     if (isDBL(op)) {
 1572              		.loc 1 528 5 is_stmt 1 view .LVU446
 1573 0062 81B2     		uxth	r1, r0
 1574              		.loc 1 528 9 is_stmt 0 view .LVU447
 1575 0064 00F47040 		and	r0, r0, #61440
 1576              		.loc 1 528 8 view .LVU448
 1577 0068 B0F5704F 		cmp	r0, #61440
 1578              		.loc 1 528 9 view .LVU449
 1579 006c 0F46     		mov	r7, r1
 1580              		.loc 1 528 8 view .LVU450
 1581 006e 1DD0     		beq	.L145
 529:src/menu.c    ****       i += 1;
 530:src/menu.c    ****       continue;
 531:src/menu.c    ****     }
 532:src/menu.c    ****     if (isRARG(op)) {
 1582              		.loc 1 532 5 is_stmt 1 view .LVU451
 1583              		.loc 1 532 8 is_stmt 0 view .LVU452
 1584 0070 48B1     		cbz	r0, .L142
 1585              	.LBB92:
 533:src/menu.c    ****       const s_opcode rarg = RARG_CMD(op);
 1586              		.loc 1 533 7 is_stmt 1 view .LVU453
 1587              		.loc 1 533 29 is_stmt 0 view .LVU454
 1588 0072 4FEA1B22 		lsr	r2, fp, #8
 1589 0076 203A     		subs	r2, r2, #32
 1590 0078 D2B2     		uxtb	r2, r2
 1591              	.LVL117:
 534:src/menu.c    ****       if (rarg != RARG_ALPHA && rarg != RARG_CONV
 1592              		.loc 1 534 7 is_stmt 1 view .LVU455
 1593              		.loc 1 534 10 is_stmt 0 view .LVU456
 1594 007a 242A     		cmp	r2, #36
 1595 007c 03D0     		beq	.L142
 1596              		.loc 1 534 30 discriminator 1 view .LVU457
 1597 007e 6C2A     		cmp	r2, #108
 1598 0080 01D0     		beq	.L142
 535:src/menu.c    **** 	  && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX)
 1599              		.loc 1 535 4 view .LVU458
ARM GAS  /tmp/ccwTS9FK.s 			page 44


 1600 0082 012A     		cmp	r2, #1
 1601 0084 3AD8     		bhi	.L170
 1602              	.LVL118:
 1603              	.L142:
 1604              		.loc 1 535 4 view .LVU459
 1605              	.LBE92:
 536:src/menu.c    **** 	op = op & 0xff00;	// remove argument
 537:src/menu.c    ****     }
 538:src/menu.c    ****     catcmd(op, buf1);
 1606              		.loc 1 538 5 is_stmt 1 view .LVU460
 1607 0086 0846     		mov	r0, r1
 1608 0088 6946     		mov	r1, sp
 1609 008a FFF7FEFF 		bl	catcmd
 1610              	.LVL119:
 539:src/menu.c    ****     if (i<6) {
 1611              		.loc 1 539 5 view .LVU461
 1612              		.loc 1 539 8 is_stmt 0 view .LVU462
 1613 008e 052E     		cmp	r6, #5
 540:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1614              		.loc 1 540 7 view .LVU463
 1615 0090 6946     		mov	r1, sp
 1616 0092 4FF00702 		mov	r2, #7
 539:src/menu.c    ****     if (i<6) {
 1617              		.loc 1 539 8 view .LVU464
 1618 0096 12D8     		bhi	.L143
 1619              		.loc 1 540 7 is_stmt 1 view .LVU465
 1620 0098 2846     		mov	r0, r5
 1621 009a FFF7FEFF 		bl	strncpy
 1622              	.LVL120:
 541:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1623              		.loc 1 541 7 view .LVU466
 1624              		.loc 1 541 42 is_stmt 0 view .LVU467
 1625 009e 0021     		movs	r1, #0
 542:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = op;
 543:src/menu.c    ****       UserMenu.keys[i].unshifted.key_34s = K_OP;
 1626              		.loc 1 543 42 view .LVU468
 1627 00a0 3422     		movs	r2, #52
 542:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = op;
 1628              		.loc 1 542 40 view .LVU469
 1629 00a2 45F80CBC 		str	fp, [r5, #-12]
 541:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1630              		.loc 1 541 42 view .LVU470
 1631 00a6 E971     		strb	r1, [r5, #7]
 542:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = op;
 1632              		.loc 1 542 7 is_stmt 1 view .LVU471
 1633              		.loc 1 543 7 view .LVU472
 1634              		.loc 1 543 42 is_stmt 0 view .LVU473
 1635 00a8 05F8102C 		strb	r2, [r5, #-16]
 1636              	.LVL121:
 1637              	.L145:
 1638              		.loc 1 543 42 view .LVU474
 1639              	.LBE94:
 506:src/menu.c    ****     s_opcode op;
 1640              		.loc 1 506 9 is_stmt 1 view .LVU475
 1641 00ac 24B1     		cbz	r4, .L133
 1642 00ae 0136     		adds	r6, r6, #1
 506:src/menu.c    ****     s_opcode op;
ARM GAS  /tmp/ccwTS9FK.s 			page 45


 1643              		.loc 1 506 13 is_stmt 0 discriminator 1 view .LVU476
 1644 00b0 0C2E     		cmp	r6, #12
 1645 00b2 05F12005 		add	r5, r5, #32
 1646 00b6 C5D1     		bne	.L147
 1647              	.LVL122:
 1648              	.L133:
 544:src/menu.c    ****     }
 545:src/menu.c    ****     else {
 546:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 547:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 548:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 549:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 550:src/menu.c    ****     }
 551:src/menu.c    ****     i++;
 552:src/menu.c    ****   }
 553:src/menu.c    **** }
 1649              		.loc 1 553 1 view .LVU477
 1650 00b8 05B0     		add	sp, sp, #20
 1651              		.cfi_remember_state
 1652              		.cfi_def_cfa_offset 36
 1653              		@ sp needed
 1654 00ba BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1655              	.LVL123:
 1656              	.L143:
 1657              		.cfi_restore_state
 1658              	.LBB95:
 546:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1659              		.loc 1 546 7 is_stmt 1 view .LVU478
 1660 00be A5F1B800 		sub	r0, r5, #184
 1661 00c2 FFF7FEFF 		bl	strncpy
 1662              	.LVL124:
 547:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 1663              		.loc 1 547 7 view .LVU479
 547:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 1664              		.loc 1 547 42 is_stmt 0 view .LVU480
 1665 00c6 0022     		movs	r2, #0
 549:src/menu.c    ****     }
 1666              		.loc 1 549 42 view .LVU481
 1667 00c8 3423     		movs	r3, #52
 548:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 1668              		.loc 1 548 40 view .LVU482
 1669 00ca 45F8C47C 		str	r7, [r5, #-196]
 547:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 1670              		.loc 1 547 42 view .LVU483
 1671 00ce 05F8B12C 		strb	r2, [r5, #-177]
 548:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 1672              		.loc 1 548 7 is_stmt 1 view .LVU484
 549:src/menu.c    ****     }
 1673              		.loc 1 549 7 view .LVU485
 549:src/menu.c    ****     }
 1674              		.loc 1 549 42 is_stmt 0 view .LVU486
 1675 00d2 05F8C83C 		strb	r3, [r5, #-200]
 551:src/menu.c    ****   }
 1676              		.loc 1 551 5 is_stmt 1 view .LVU487
 1677              	.LVL125:
 551:src/menu.c    ****   }
 1678              		.loc 1 551 5 is_stmt 0 view .LVU488
ARM GAS  /tmp/ccwTS9FK.s 			page 46


 1679 00d6 E9E7     		b	.L145
 1680              	.LVL126:
 1681              	.L169:
 515:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 1682              		.loc 1 515 7 is_stmt 1 view .LVU489
 515:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 1683              		.loc 1 515 10 is_stmt 0 view .LVU490
 1684 00d8 042E     		cmp	r6, #4
 1685 00da 14D0     		beq	.L171
 520:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 1686              		.loc 1 520 12 is_stmt 1 view .LVU491
 520:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 1687              		.loc 1 520 15 is_stmt 0 view .LVU492
 1688 00dc 052E     		cmp	r6, #5
 1689 00de E5D1     		bne	.L145
 521:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 1690              		.loc 1 521 2 is_stmt 1 view .LVU493
 523:src/menu.c    ****       }
 1691              		.loc 1 523 2 is_stmt 0 view .LVU494
 1692 00e0 1249     		ldr	r1, .L172+8
 521:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 1693              		.loc 1 521 35 view .LVU495
 1694 00e2 4FF0FF30 		mov	r0, #-1
 522:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1695              		.loc 1 522 37 view .LVU496
 1696 00e6 2D23     		movs	r3, #45
 521:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 1697              		.loc 1 521 35 view .LVU497
 1698 00e8 C8F8B400 		str	r0, [r8, #180]
 522:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1699              		.loc 1 522 2 is_stmt 1 view .LVU498
 523:src/menu.c    ****       }
 1700              		.loc 1 523 2 is_stmt 0 view .LVU499
 1701 00ec 0968     		ldr	r1, [r1]
 522:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1702              		.loc 1 522 37 view .LVU500
 1703 00ee 88F8B030 		strb	r3, [r8, #176]
 523:src/menu.c    ****       }
 1704              		.loc 1 523 2 is_stmt 1 view .LVU501
 1705 00f2 3246     		mov	r2, r6
 1706 00f4 5046     		mov	r0, r10
 1707 00f6 FFF7FEFF 		bl	strncpy
 1708              	.LVL127:
 525:src/menu.c    ****       continue;
 1709              		.loc 1 525 7 view .LVU502
 526:src/menu.c    ****     }
 1710              		.loc 1 526 7 view .LVU503
 1711 00fa D7E7     		b	.L145
 1712              	.LVL128:
 1713              	.L170:
 1714              	.LBB93:
 536:src/menu.c    ****     }
 1715              		.loc 1 536 2 view .LVU504
 536:src/menu.c    ****     }
 1716              		.loc 1 536 5 is_stmt 0 view .LVU505
 1717 00fc 0BF47F4B 		and	fp, fp, #65280
 1718              	.LVL129:
ARM GAS  /tmp/ccwTS9FK.s 			page 47


 536:src/menu.c    ****     }
 1719              		.loc 1 536 5 view .LVU506
 1720 0100 5946     		mov	r1, fp
 1721 0102 5F46     		mov	r7, fp
 1722 0104 BFE7     		b	.L142
 1723              	.LVL130:
 1724              	.L171:
 536:src/menu.c    ****     }
 1725              		.loc 1 536 5 view .LVU507
 1726              	.LBE93:
 516:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 1727              		.loc 1 516 2 is_stmt 1 view .LVU508
 516:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 1728              		.loc 1 516 35 is_stmt 0 view .LVU509
 1729 0106 4FF0FF30 		mov	r0, #-1
 517:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 1730              		.loc 1 517 37 view .LVU510
 1731 010a 2C23     		movs	r3, #44
 516:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 1732              		.loc 1 516 35 view .LVU511
 1733 010c C8F89400 		str	r0, [r8, #148]
 517:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 1734              		.loc 1 517 2 is_stmt 1 view .LVU512
 518:src/menu.c    ****       }
 1735              		.loc 1 518 2 is_stmt 0 view .LVU513
 1736 0110 D9F80010 		ldr	r1, [r9]
 1737 0114 0648     		ldr	r0, .L172+12
 517:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 1738              		.loc 1 517 37 view .LVU514
 1739 0116 88F89030 		strb	r3, [r8, #144]
 518:src/menu.c    ****       }
 1740              		.loc 1 518 2 is_stmt 1 view .LVU515
 1741 011a 0522     		movs	r2, #5
 1742 011c FFF7FEFF 		bl	strncpy
 1743              	.LVL131:
 1744 0120 C4E7     		b	.L145
 1745              	.L173:
 1746 0122 00BF     		.align	2
 1747              	.L172:
 1748 0124 4DF04E55 		.word	1431236685
 1749 0128 20000000 		.word	.LANCHOR4+32
 1750 012c 00000000 		.word	.LANCHOR7
 1751 0130 A0000000 		.word	.LANCHOR4+160
 1752 0134 00000000 		.word	.LANCHOR4
 1753 0138 00000000 		.word	.LANCHOR6
 1754              	.LBE95:
 1755              		.cfi_endproc
 1756              	.LFE15:
 1758              		.section	.text.shutdown,"ax",%progbits
 1759              		.align	1
 1760              		.p2align 2,,3
 1761              		.global	shutdown
 1762              		.syntax unified
 1763              		.thumb
 1764              		.thumb_func
 1765              		.fpu fpv4-sp-d16
 1767              	shutdown:
ARM GAS  /tmp/ccwTS9FK.s 			page 48


 1768              	.LFB17:
 1769              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  46:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  47:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  48:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  49:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  50:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  51:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  52:src/console.c **** 
  53:src/console.c **** static struct _ndmap remap (const int c) {
  54:src/console.c **** 
  55:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
ARM GAS  /tmp/ccwTS9FK.s 			page 49


  56:src/console.c **** 
  57:src/console.c **** #include "keytran.c"
  58:src/console.c **** 
  59:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  60:src/console.c **** 
  61:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  62:src/console.c **** 
  63:src/console.c ****   if (c == 44 ) {
  64:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  65:src/console.c ****     return sshot;
  66:src/console.c ****   }
  67:src/console.c ****   
  68:src/console.c ****   if (Running | Pause) {
  69:src/console.c ****     return mapping_running[c];
  70:src/console.c ****   }
  71:src/console.c **** 
  72:src/console.c ****   if (current_menu == USER_MENU) {
  73:src/console.c ****     switch (c) {
  74:src/console.c ****     case KEY_F1:
  75:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[0].unshifted;
  76:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
  77:src/console.c ****     case KEY_F2:
  78:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[1].unshifted;
  79:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
  80:src/console.c ****     case KEY_F3:
  81:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[2].unshifted;
  82:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
  83:src/console.c ****     case KEY_F4:
  84:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[3].unshifted;
  85:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
  86:src/console.c ****     case KEY_F5:
  87:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[4].unshifted;
  88:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
  89:src/console.c ****     case KEY_F6:
  90:src/console.c ****       if (cur_shift() == SHIFT_N) return UserMenu.keys[5].unshifted;
  91:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
  92:src/console.c ****     }
  93:src/console.c ****   }
  94:src/console.c ****   else {
  95:src/console.c ****     switch (c) {
  96:src/console.c ****     case KEY_F1:
  97:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
  98:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
  99:src/console.c ****     case KEY_F2:
 100:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
 101:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 102:src/console.c ****     case KEY_F3:
 103:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 104:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 105:src/console.c ****     case KEY_F4:
 106:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 107:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 108:src/console.c ****     case KEY_F5:
 109:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 110:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 111:src/console.c ****     case KEY_F6:
 112:src/console.c ****       if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
ARM GAS  /tmp/ccwTS9FK.s 			page 50


 113:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 114:src/console.c ****     }
 115:src/console.c ****   }    
 116:src/console.c ****   
 117:src/console.c ****   if ( get_alpha_state() ) {
 118:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 119:src/console.c ****       switch (cur_shift()) { 
 120:src/console.c ****       case SHIFT_N:
 121:src/console.c **** 	return mapping_none[c]; // N -> F
 122:src/console.c **** 	break;
 123:src/console.c ****       case SHIFT_F:
 124:src/console.c **** 	return mapping_fshift[c]; // F -> G
 125:src/console.c **** 	break;
 126:src/console.c ****       case SHIFT_G:
 127:src/console.c **** 	return h_shift; // G -> H
 128:src/console.c **** 	break;
 129:src/console.c ****       case SHIFT_H:
 130:src/console.c **** 	return h_shift; // H -> N
 131:src/console.c ****       default:
 132:src/console.c **** 	return no_change;
 133:src/console.c ****       }
 134:src/console.c ****     }
 135:src/console.c ****     return mapping_alpha [c];
 136:src/console.c ****   }
 137:src/console.c **** 
 138:src/console.c ****   switch (cur_shift()) {
 139:src/console.c ****   case SHIFT_N:    
 140:src/console.c ****     return mapping_none[c];
 141:src/console.c ****     break;
 142:src/console.c ****   case SHIFT_F:
 143:src/console.c ****     return mapping_fshift[c];
 144:src/console.c ****     break;
 145:src/console.c ****   case SHIFT_G:
 146:src/console.c ****     return mapping_gshift[c];
 147:src/console.c ****     break;
 148:src/console.c ****   default:
 149:src/console.c ****     return no_change;
 150:src/console.c ****   }
 151:src/console.c **** }
 152:src/console.c **** 
 153:src/console.c **** #endif
 154:src/console.c **** 
 155:src/console.c **** void shutdown( void )
 156:src/console.c **** {
 1770              		.loc 2 156 1 view -0
 1771              		.cfi_startproc
 1772              		@ args = 0, pretend = 0, frame = 0
 1773              		@ frame_needed = 0, uses_anonymous_args = 0
 1774              		@ link register save eliminated.
 157:src/console.c **** #ifndef DM42
 158:src/console.c ****   checksum_all();
 159:src/console.c ****   setuptty( 1 );
 160:src/console.c ****   save_statefile( NULL );
 161:src/console.c ****   exit( 0 );
 162:src/console.c **** #else
 163:src/console.c ****   //  save_ram_file(0);
 164:src/console.c ****   SET_ST(STAT_PGM_END);
ARM GAS  /tmp/ccwTS9FK.s 			page 51


 1775              		.loc 2 164 3 view .LVU517
 1776 0000 024A     		ldr	r2, .L175
 1777 0002 1368     		ldr	r3, [r2]
 1778 0004 43F40073 		orr	r3, r3, #512
 1779 0008 1360     		str	r3, [r2]
 165:src/console.c **** #endif
 166:src/console.c **** }
 1780              		.loc 2 166 1 is_stmt 0 view .LVU518
 1781 000a 7047     		bx	lr
 1782              	.L176:
 1783              		.align	2
 1784              	.L175:
 1785 000c 00200010 		.word	268443648
 1786              		.cfi_endproc
 1787              	.LFE17:
 1789              		.section	.text.is_key_pressed,"ax",%progbits
 1790              		.align	1
 1791              		.p2align 2,,3
 1792              		.global	is_key_pressed
 1793              		.syntax unified
 1794              		.thumb
 1795              		.thumb_func
 1796              		.fpu fpv4-sp-d16
 1798              	is_key_pressed:
 1799              	.LFB18:
 167:src/console.c **** 
 168:src/console.c **** 
 169:src/console.c **** /*
 170:src/console.c ****  *  Dummies
 171:src/console.c ****  */
 172:src/console.c **** int is_key_pressed(void) 
 173:src/console.c **** {
 1800              		.loc 2 173 1 is_stmt 1 view -0
 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 0
 1803              		@ frame_needed = 0, uses_anonymous_args = 0
 174:src/console.c **** #ifdef DM42
 175:src/console.c ****   return !key_empty();
 1804              		.loc 2 175 3 view .LVU520
 173:src/console.c **** #ifdef DM42
 1805              		.loc 2 173 1 is_stmt 0 view .LVU521
 1806 0000 08B5     		push	{r3, lr}
 1807              		.cfi_def_cfa_offset 8
 1808              		.cfi_offset 3, -8
 1809              		.cfi_offset 14, -4
 1810              		.loc 2 175 11 view .LVU522
 1811 0002 034B     		ldr	r3, .L179
 1812 0004 9847     		blx	r3
 1813              	.LVL132:
 176:src/console.c **** #else
 177:src/console.c ****   return 0;
 178:src/console.c **** #endif
 179:src/console.c **** }
 1814              		.loc 2 179 1 view .LVU523
 1815 0006 B0FA80F0 		clz	r0, r0
 1816 000a 4009     		lsrs	r0, r0, #5
 1817 000c 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccwTS9FK.s 			page 52


 1818              	.L180:
 1819 000e 00BF     		.align	2
 1820              	.L179:
 1821 0010 7D030008 		.word	134218621
 1822              		.cfi_endproc
 1823              	.LFE18:
 1825              		.section	.text.get_key,"ax",%progbits
 1826              		.align	1
 1827              		.p2align 2,,3
 1828              		.global	get_key
 1829              		.syntax unified
 1830              		.thumb
 1831              		.thumb_func
 1832              		.fpu fpv4-sp-d16
 1834              	get_key:
 1835              	.LFB19:
 180:src/console.c **** 
 181:src/console.c **** int get_key(void)
 182:src/console.c **** {
 1836              		.loc 2 182 1 is_stmt 1 view -0
 1837              		.cfi_startproc
 1838              		@ args = 0, pretend = 0, frame = 0
 1839              		@ frame_needed = 0, uses_anonymous_args = 0
 1840              		@ link register save eliminated.
 183:src/console.c ****   #ifdef DM42
 184:src/console.c ****   return key_pop();
 1841              		.loc 2 184 3 view .LVU525
 1842              		.loc 2 184 10 is_stmt 0 view .LVU526
 1843 0000 004B     		ldr	r3, .L182
 1844 0002 1847     		bx	r3
 1845              	.LVL133:
 1846              	.L183:
 1847              		.align	2
 1848              	.L182:
 1849 0004 89030008 		.word	134218633
 1850              		.cfi_endproc
 1851              	.LFE19:
 1853              		.section	.text.put_key,"ax",%progbits
 1854              		.align	1
 1855              		.p2align 2,,3
 1856              		.global	put_key
 1857              		.syntax unified
 1858              		.thumb
 1859              		.thumb_func
 1860              		.fpu fpv4-sp-d16
 1862              	put_key:
 1863              	.LVL134:
 1864              	.LFB20:
 185:src/console.c ****   #else
 186:src/console.c ****   return 0;
 187:src/console.c ****   #endif
 188:src/console.c **** }
 189:src/console.c **** 
 190:src/console.c **** /*
 191:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 192:src/console.c ****  * 
 193:src/console.c ****  */
ARM GAS  /tmp/ccwTS9FK.s 			page 53


 194:src/console.c **** int put_key( int k )
 195:src/console.c **** {
 1865              		.loc 2 195 1 is_stmt 1 view -0
 1866              		.cfi_startproc
 1867              		@ args = 0, pretend = 0, frame = 48
 1868              		@ frame_needed = 0, uses_anonymous_args = 0
 1869              		@ link register save eliminated.
 196:src/console.c ****   #ifdef DM42
 197:src/console.c ****   const char wp34s_to_DM42[] = {
 1870              		.loc 2 197 3 view .LVU528
 195:src/console.c ****   #ifdef DM42
 1871              		.loc 2 195 1 is_stmt 0 view .LVU529
 1872 0000 70B4     		push	{r4, r5, r6}
 1873              		.cfi_def_cfa_offset 12
 1874              		.cfi_offset 4, -12
 1875              		.cfi_offset 5, -8
 1876              		.cfi_offset 6, -4
 1877              		.loc 2 197 14 view .LVU530
 1878 0002 0E4D     		ldr	r5, .L187
 195:src/console.c ****   #ifdef DM42
 1879              		.loc 2 195 1 view .LVU531
 1880 0004 0646     		mov	r6, r0
 1881              		.loc 2 197 14 view .LVU532
 1882 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1883              	.LVL135:
 195:src/console.c ****   #ifdef DM42
 1884              		.loc 2 195 1 view .LVU533
 1885 0008 8DB0     		sub	sp, sp, #52
 1886              		.cfi_def_cfa_offset 64
 1887              		.loc 2 197 14 view .LVU534
 1888 000a 01AC     		add	r4, sp, #4
 1889 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1890 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1891 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1892 0012 95E80700 		ldm	r5, {r0, r1, r2}
 1893 0016 03C4     		stmia	r4!, {r0, r1}
 198:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 199:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 200:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 201:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 202:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 203:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 204:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 205:src/console.c ****   
 206:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 1894              		.loc 2 206 6 view .LVU535
 1895 0018 282E     		cmp	r6, #40
 197:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 1896              		.loc 2 197 14 view .LVU536
 1897 001a 2270     		strb	r2, [r4]
 1898              		.loc 2 206 3 is_stmt 1 view .LVU537
 1899              		.loc 2 206 6 is_stmt 0 view .LVU538
 1900 001c 08D8     		bhi	.L185
 207:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 1901              		.loc 2 207 5 is_stmt 1 view .LVU539
 1902              		.loc 2 207 36 is_stmt 0 view .LVU540
 1903 001e 0CAB     		add	r3, sp, #48
ARM GAS  /tmp/ccwTS9FK.s 			page 54


 1904 0020 3046     		mov	r0, r6
 1905 0022 1844     		add	r0, r0, r3
 1906              		.loc 2 207 12 view .LVU541
 1907 0024 064B     		ldr	r3, .L187+4
 1908 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 208:src/console.c ****   }
 209:src/console.c ****   else {
 210:src/console.c ****     return -1;
 211:src/console.c ****   }
 212:src/console.c ****   #else
 213:src/console.c ****   return k;
 214:src/console.c ****   #endif
 215:src/console.c **** }
 1909              		.loc 2 215 1 view .LVU542
 1910 002a 0DB0     		add	sp, sp, #52
 1911              		.cfi_remember_state
 1912              		.cfi_def_cfa_offset 12
 1913              		@ sp needed
 1914 002c 70BC     		pop	{r4, r5, r6}
 1915              		.cfi_restore 6
 1916              		.cfi_restore 5
 1917              		.cfi_restore 4
 1918              		.cfi_def_cfa_offset 0
 1919              	.LVL136:
 207:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 1920              		.loc 2 207 12 view .LVU543
 1921 002e 1847     		bx	r3
 1922              	.LVL137:
 1923              	.L185:
 1924              		.cfi_restore_state
 1925              		.loc 2 215 1 view .LVU544
 1926 0030 4FF0FF30 		mov	r0, #-1
 1927 0034 0DB0     		add	sp, sp, #52
 1928              		.cfi_def_cfa_offset 12
 1929              		@ sp needed
 1930 0036 70BC     		pop	{r4, r5, r6}
 1931              		.cfi_restore 6
 1932              		.cfi_restore 5
 1933              		.cfi_restore 4
 1934              		.cfi_def_cfa_offset 0
 1935              	.LVL138:
 1936              		.loc 2 215 1 view .LVU545
 1937 0038 7047     		bx	lr
 1938              	.L188:
 1939 003a 00BF     		.align	2
 1940              	.L187:
 1941 003c 00000000 		.word	.LANCHOR8
 1942 0040 81030008 		.word	134218625
 1943              		.cfi_endproc
 1944              	.LFE20:
 1946              		.section	.text.shift_down,"ax",%progbits
 1947              		.align	1
 1948              		.p2align 2,,3
 1949              		.global	shift_down
 1950              		.syntax unified
 1951              		.thumb
 1952              		.thumb_func
ARM GAS  /tmp/ccwTS9FK.s 			page 55


 1953              		.fpu fpv4-sp-d16
 1955              	shift_down:
 1956              	.LFB21:
 216:src/console.c **** 
 217:src/console.c **** enum shifts shift_down(void)
 218:src/console.c **** {
 1957              		.loc 2 218 1 is_stmt 1 view -0
 1958              		.cfi_startproc
 1959              		@ args = 0, pretend = 0, frame = 0
 1960              		@ frame_needed = 0, uses_anonymous_args = 0
 1961              		@ link register save eliminated.
 219:src/console.c **** 	return SHIFT_N;
 1962              		.loc 2 219 2 view .LVU547
 220:src/console.c **** }
 1963              		.loc 2 220 1 is_stmt 0 view .LVU548
 1964 0000 0020     		movs	r0, #0
 1965 0002 7047     		bx	lr
 1966              		.cfi_endproc
 1967              	.LFE21:
 1969              		.section	.text.start_key_timer,"ax",%progbits
 1970              		.align	1
 1971              		.p2align 2,,3
 1972              		.global	start_key_timer
 1973              		.syntax unified
 1974              		.thumb
 1975              		.thumb_func
 1976              		.fpu fpv4-sp-d16
 1978              	start_key_timer:
 1979              	.LFB22:
 221:src/console.c **** 
 222:src/console.c **** #ifndef DM42   // No serial operations for DM42
 223:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 224:src/console.c **** /*
 225:src/console.c ****  *  Open a COM port for transmission
 226:src/console.c ****  */
 227:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 228:src/console.c **** {
 229:src/console.c **** 	return 0;
 230:src/console.c **** }
 231:src/console.c **** 
 232:src/console.c **** 
 233:src/console.c **** /*
 234:src/console.c ****  *  Close the COM port after transmission is complete
 235:src/console.c ****  */
 236:src/console.c **** extern void close_port( void )
 237:src/console.c **** {
 238:src/console.c **** }
 239:src/console.c **** 
 240:src/console.c **** 
 241:src/console.c **** /*
 242:src/console.c ****  *  Output a single byte to the serial
 243:src/console.c ****  */
 244:src/console.c **** void put_byte( unsigned char byte )
 245:src/console.c **** {
 246:src/console.c **** 	report_err(ERR_PROG_BAD);
 247:src/console.c **** }
 248:src/console.c **** 
ARM GAS  /tmp/ccwTS9FK.s 			page 56


 249:src/console.c **** 
 250:src/console.c **** /*
 251:src/console.c ****  *  Force buffer flush
 252:src/console.c ****  */
 253:src/console.c **** void flush_comm( void )
 254:src/console.c **** {
 255:src/console.c **** }
 256:src/console.c **** 
 257:src/console.c **** #endif
 258:src/console.c **** #endif
 259:src/console.c **** 
 260:src/console.c **** 
 261:src/console.c **** /*
 262:src/console.c ****  *  Main loop
 263:src/console.c ****  */
 264:src/console.c **** #ifdef DM42
 265:src/console.c **** void start_key_timer (void);
 266:src/console.c **** long int keyticks (void);
 267:src/console.c **** void moveto (int line, int x);
 268:src/console.c **** 
 269:src/console.c **** static long int start_ticks;
 270:src/console.c **** 
 271:src/console.c **** void start_key_timer() {
 1980              		.loc 2 271 24 is_stmt 1 view -0
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 0
 1983              		@ frame_needed = 0, uses_anonymous_args = 0
 272:src/console.c ****     start_ticks = get_rtc_ticks();
 1984              		.loc 2 272 5 view .LVU550
 271:src/console.c ****     start_ticks = get_rtc_ticks();
 1985              		.loc 2 271 24 is_stmt 0 view .LVU551
 1986 0000 08B5     		push	{r3, lr}
 1987              		.cfi_def_cfa_offset 8
 1988              		.cfi_offset 3, -8
 1989              		.cfi_offset 14, -4
 1990              		.loc 2 272 19 view .LVU552
 1991 0002 024B     		ldr	r3, .L192
 1992 0004 9847     		blx	r3
 1993              	.LVL139:
 1994              		.loc 2 272 17 view .LVU553
 1995 0006 024B     		ldr	r3, .L192+4
 1996 0008 1860     		str	r0, [r3]
 273:src/console.c **** }
 1997              		.loc 2 273 1 view .LVU554
 1998 000a 08BD     		pop	{r3, pc}
 1999              	.L193:
 2000              		.align	2
 2001              	.L192:
 2002 000c B9040008 		.word	134218937
 2003 0010 00000000 		.word	.LANCHOR9
 2004              		.cfi_endproc
 2005              	.LFE22:
 2007              		.section	.text.keyticks,"ax",%progbits
 2008              		.align	1
 2009              		.p2align 2,,3
 2010              		.global	keyticks
 2011              		.syntax unified
ARM GAS  /tmp/ccwTS9FK.s 			page 57


 2012              		.thumb
 2013              		.thumb_func
 2014              		.fpu fpv4-sp-d16
 2016              	keyticks:
 2017              	.LFB23:
 274:src/console.c **** 
 275:src/console.c **** long int keyticks () {
 2018              		.loc 2 275 22 is_stmt 1 view -0
 2019              		.cfi_startproc
 2020              		@ args = 0, pretend = 0, frame = 0
 2021              		@ frame_needed = 0, uses_anonymous_args = 0
 276:src/console.c ****   long int i;
 2022              		.loc 2 276 3 view .LVU556
 277:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2023              		.loc 2 277 3 view .LVU557
 275:src/console.c ****   long int i;
 2024              		.loc 2 275 22 is_stmt 0 view .LVU558
 2025 0000 08B5     		push	{r3, lr}
 2026              		.cfi_def_cfa_offset 8
 2027              		.cfi_offset 3, -8
 2028              		.cfi_offset 14, -4
 2029              		.loc 2 277 8 view .LVU559
 2030 0002 054B     		ldr	r3, .L196
 2031 0004 9847     		blx	r3
 2032              	.LVL140:
 278:src/console.c ****   return i >> 8;
 2033              		.loc 2 278 3 is_stmt 1 view .LVU560
 277:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2034              		.loc 2 277 24 is_stmt 0 view .LVU561
 2035 0006 054B     		ldr	r3, .L196+4
 2036 0008 1B68     		ldr	r3, [r3]
 2037 000a C01A     		subs	r0, r0, r3
 2038              	.LVL141:
 277:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2039              		.loc 2 277 38 view .LVU562
 2040 000c 00EB8000 		add	r0, r0, r0, lsl #2
 279:src/console.c **** }
 2041              		.loc 2 279 1 view .LVU563
 2042 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2043 0014 08BD     		pop	{r3, pc}
 2044              	.L197:
 2045 0016 00BF     		.align	2
 2046              	.L196:
 2047 0018 B9040008 		.word	134218937
 2048 001c 00000000 		.word	.LANCHOR9
 2049              		.cfi_endproc
 2050              	.LFE23:
 2052              		.section	.text.moveto,"ax",%progbits
 2053              		.align	1
 2054              		.p2align 2,,3
 2055              		.global	moveto
 2056              		.syntax unified
 2057              		.thumb
 2058              		.thumb_func
 2059              		.fpu fpv4-sp-d16
 2061              	moveto:
 2062              	.LVL142:
ARM GAS  /tmp/ccwTS9FK.s 			page 58


 2063              	.LFB24:
 280:src/console.c **** 
 281:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 282:src/console.c **** char print_string[22];
 283:src/console.c **** int n_p = 0;
 284:src/console.c **** 
 285:src/console.c **** 
 286:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2064              		.loc 2 286 30 is_stmt 1 view -0
 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 0
 2067              		@ frame_needed = 0, uses_anonymous_args = 0
 287:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2068              		.loc 2 287 3 view .LVU565
 286:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2069              		.loc 2 286 30 is_stmt 0 view .LVU566
 2070 0000 70B5     		push	{r4, r5, r6, lr}
 2071              		.cfi_def_cfa_offset 16
 2072              		.cfi_offset 4, -16
 2073              		.cfi_offset 5, -12
 2074              		.cfi_offset 6, -8
 2075              		.cfi_offset 14, -4
 2076              		.loc 2 287 3 view .LVU567
 2077 0002 0A4D     		ldr	r5, .L200
 2078 0004 0A4B     		ldr	r3, .L200+4
 286:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2079              		.loc 2 286 30 view .LVU568
 2080 0006 0246     		mov	r2, r0
 2081 0008 0C46     		mov	r4, r1
 2082              		.loc 2 287 3 view .LVU569
 2083 000a A86B     		ldr	r0, [r5, #56]
 2084              	.LVL143:
 2085              		.loc 2 287 3 view .LVU570
 2086 000c 511E     		subs	r1, r2, #1
 2087              	.LVL144:
 2088              		.loc 2 287 3 view .LVU571
 2089 000e 9847     		blx	r3
 2090              	.LVL145:
 288:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2091              		.loc 2 288 3 is_stmt 1 view .LVU572
 2092 0010 A86B     		ldr	r0, [r5, #56]
 2093 0012 084B     		ldr	r3, .L200+8
 2094              		.loc 2 288 33 is_stmt 0 view .LVU573
 2095 0014 0168     		ldr	r1, [r0]
 2096              		.loc 2 288 3 view .LVU574
 2097 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2098              		.loc 2 288 33 view .LVU575
 2099 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2100              		.loc 2 288 43 view .LVU576
 2101 001c 013C     		subs	r4, r4, #1
 2102              	.LVL146:
 2103              		.loc 2 288 40 view .LVU577
 2104 001e 04FB01F1 		mul	r1, r4, r1
 2105              		.loc 2 288 3 view .LVU578
 2106 0022 1431     		adds	r1, r1, #20
 289:src/console.c **** }
 2107              		.loc 2 289 1 view .LVU579
ARM GAS  /tmp/ccwTS9FK.s 			page 59


 2108 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2109              		.cfi_restore 14
 2110              		.cfi_restore 6
 2111              		.cfi_restore 5
 2112              		.cfi_restore 4
 2113              		.cfi_def_cfa_offset 0
 2114              	.LVL147:
 288:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2115              		.loc 2 288 3 view .LVU580
 2116 0028 1847     		bx	r3	@ indirect register sibling call
 2117              	.LVL148:
 2118              	.L201:
 2119 002a 00BF     		.align	2
 2120              	.L200:
 2121 002c 00200010 		.word	268443648
 2122 0030 69020008 		.word	134218345
 2123 0034 6D020008 		.word	134218349
 2124              		.cfi_endproc
 2125              	.LFE24:
 2127              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2128              		.align	2
 2129              	.LC10:
 2130 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2130      673A2025 
 2130      34692C25 
 2130      346900
 2131              		.section	.text.print_debug,"ax",%progbits
 2132              		.align	1
 2133              		.p2align 2,,3
 2134              		.global	print_debug
 2135              		.syntax unified
 2136              		.thumb
 2137              		.thumb_func
 2138              		.fpu fpv4-sp-d16
 2140              	print_debug:
 2141              	.LVL149:
 2142              	.LFB25:
 290:src/console.c **** 
 291:src/console.c **** void print_debug (int i, int j) {
 2143              		.loc 2 291 33 is_stmt 1 view -0
 2144              		.cfi_startproc
 2145              		@ args = 0, pretend = 0, frame = 8
 2146              		@ frame_needed = 0, uses_anonymous_args = 0
 292:src/console.c ****   strcpy( print_string, spaces );
 2147              		.loc 2 292 3 view .LVU582
 291:src/console.c ****   strcpy( print_string, spaces );
 2148              		.loc 2 291 33 is_stmt 0 view .LVU583
 2149 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2150              		.cfi_def_cfa_offset 24
 2151              		.cfi_offset 4, -24
 2152              		.cfi_offset 5, -20
 2153              		.cfi_offset 6, -16
 2154              		.cfi_offset 7, -12
 2155              		.cfi_offset 8, -8
 2156              		.cfi_offset 14, -4
 2157              		.loc 2 292 3 view .LVU584
 2158 0004 174C     		ldr	r4, .L204
ARM GAS  /tmp/ccwTS9FK.s 			page 60


 2159 0006 184F     		ldr	r7, .L204+4
 293:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 294:src/console.c ****   moveto (3, 1);
 295:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2160              		.loc 2 295 3 view .LVU585
 2161 0008 184E     		ldr	r6, .L204+8
 2162 000a 194D     		ldr	r5, .L204+12
 296:src/console.c ****   lcd_refresh();
 2163              		.loc 2 296 3 view .LVU586
 2164 000c DFF86C80 		ldr	r8, .L204+24
 291:src/console.c ****   strcpy( print_string, spaces );
 2165              		.loc 2 291 33 view .LVU587
 2166 0010 82B0     		sub	sp, sp, #8
 2167              		.cfi_def_cfa_offset 32
 291:src/console.c ****   strcpy( print_string, spaces );
 2168              		.loc 2 291 33 view .LVU588
 2169 0012 0190     		str	r0, [sp, #4]
 2170 0014 0091     		str	r1, [sp]
 292:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2171              		.loc 2 292 3 view .LVU589
 2172 0016 2046     		mov	r0, r4
 2173              	.LVL150:
 292:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2174              		.loc 2 292 3 view .LVU590
 2175 0018 3946     		mov	r1, r7
 2176              	.LVL151:
 292:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2177              		.loc 2 292 3 view .LVU591
 2178 001a FFF7FEFF 		bl	strcpy
 2179              	.LVL152:
 293:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2180              		.loc 2 293 3 is_stmt 1 view .LVU592
 2181 001e DDE90032 		ldrd	r3, r2, [sp]
 2182 0022 1449     		ldr	r1, .L204+16
 2183 0024 2046     		mov	r0, r4
 2184 0026 FFF7FEFF 		bl	sprintf
 2185              	.LVL153:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2186              		.loc 2 294 3 view .LVU593
 2187 002a 0121     		movs	r1, #1
 2188 002c 0320     		movs	r0, #3
 2189 002e FFF7FEFF 		bl	moveto
 2190              	.LVL154:
 295:src/console.c ****   lcd_refresh();
 2191              		.loc 2 295 3 view .LVU594
 2192 0032 2146     		mov	r1, r4
 2193 0034 B06B     		ldr	r0, [r6, #56]
 2194 0036 A847     		blx	r5
 2195              	.LVL155:
 2196              		.loc 2 296 3 view .LVU595
 2197 0038 C047     		blx	r8
 2198              	.LVL156:
 297:src/console.c ****   sys_delay (500);
 2199              		.loc 2 297 3 view .LVU596
 2200 003a 0F4B     		ldr	r3, .L204+20
 2201 003c 4FF4FA70 		mov	r0, #500
 2202 0040 9847     		blx	r3
ARM GAS  /tmp/ccwTS9FK.s 			page 61


 2203              	.LVL157:
 298:src/console.c ****   /* wait_for_key_press(); */
 299:src/console.c ****   //  key_pop_all();
 300:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 301:src/console.c ****   // key_pop_all();
 302:src/console.c ****   strcpy( print_string, spaces );
 2204              		.loc 2 302 3 view .LVU597
 2205 0042 3946     		mov	r1, r7
 2206 0044 2046     		mov	r0, r4
 2207 0046 FFF7FEFF 		bl	strcpy
 2208              	.LVL158:
 303:src/console.c ****   moveto (3, 1);
 2209              		.loc 2 303 3 view .LVU598
 2210 004a 0121     		movs	r1, #1
 2211 004c 0320     		movs	r0, #3
 2212 004e FFF7FEFF 		bl	moveto
 2213              	.LVL159:
 304:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2214              		.loc 2 304 3 view .LVU599
 2215 0052 B06B     		ldr	r0, [r6, #56]
 2216 0054 2146     		mov	r1, r4
 2217 0056 A847     		blx	r5
 2218              	.LVL160:
 305:src/console.c ****   lcd_refresh();
 2219              		.loc 2 305 3 view .LVU600
 2220 0058 4346     		mov	r3, r8
 306:src/console.c ****   // while (key_empty()<=0);; // wait for release
 307:src/console.c ****   // key_pop_all();
 308:src/console.c **** }
 2221              		.loc 2 308 1 is_stmt 0 view .LVU601
 2222 005a 02B0     		add	sp, sp, #8
 2223              		.cfi_def_cfa_offset 24
 2224              	.LVL161:
 2225              		.loc 2 308 1 view .LVU602
 2226              		@ sp needed
 2227 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2228              		.cfi_restore 14
 2229              		.cfi_restore 8
 2230              		.cfi_restore 7
 2231              		.cfi_restore 6
 2232              		.cfi_restore 5
 2233              		.cfi_restore 4
 2234              		.cfi_def_cfa_offset 0
 2235              	.LVL162:
 305:src/console.c ****   lcd_refresh();
 2236              		.loc 2 305 3 view .LVU603
 2237 0060 1847     		bx	r3	@ indirect register sibling call
 2238              	.LVL163:
 2239              	.L205:
 2240 0062 00BF     		.align	2
 2241              	.L204:
 2242 0064 00000000 		.word	print_string
 2243 0068 00000000 		.word	.LANCHOR10
 2244 006c 00200010 		.word	268443648
 2245 0070 B1020008 		.word	134218417
 2246 0074 00000000 		.word	.LC10
 2247 0078 05040008 		.word	134218757
ARM GAS  /tmp/ccwTS9FK.s 			page 62


 2248 007c 31020008 		.word	134218289
 2249              		.cfi_endproc
 2250              	.LFE25:
 2252              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2253              		.align	2
 2254              	.LC11:
 2255 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2255      692C2531 
 2255      337300
 2256              		.section	.text.print_debug2,"ax",%progbits
 2257              		.align	1
 2258              		.p2align 2,,3
 2259              		.global	print_debug2
 2260              		.syntax unified
 2261              		.thumb
 2262              		.thumb_func
 2263              		.fpu fpv4-sp-d16
 2265              	print_debug2:
 2266              	.LVL164:
 2267              	.LFB26:
 309:src/console.c **** 
 310:src/console.c **** void print_debug2 (int i, char* j) {
 2268              		.loc 2 310 36 is_stmt 1 view -0
 2269              		.cfi_startproc
 2270              		@ args = 0, pretend = 0, frame = 8
 2271              		@ frame_needed = 0, uses_anonymous_args = 0
 311:src/console.c ****   strcpy( print_string, spaces );
 2272              		.loc 2 311 3 view .LVU605
 310:src/console.c ****   strcpy( print_string, spaces );
 2273              		.loc 2 310 36 is_stmt 0 view .LVU606
 2274 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2275              		.cfi_def_cfa_offset 24
 2276              		.cfi_offset 4, -24
 2277              		.cfi_offset 5, -20
 2278              		.cfi_offset 6, -16
 2279              		.cfi_offset 7, -12
 2280              		.cfi_offset 8, -8
 2281              		.cfi_offset 14, -4
 2282              		.loc 2 311 3 view .LVU607
 2283 0004 174C     		ldr	r4, .L208
 2284 0006 184F     		ldr	r7, .L208+4
 312:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 313:src/console.c ****   moveto (3, 1);
 314:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2285              		.loc 2 314 3 view .LVU608
 2286 0008 184E     		ldr	r6, .L208+8
 2287 000a 194D     		ldr	r5, .L208+12
 315:src/console.c ****   lcd_refresh();
 2288              		.loc 2 315 3 view .LVU609
 2289 000c DFF86C80 		ldr	r8, .L208+24
 310:src/console.c ****   strcpy( print_string, spaces );
 2290              		.loc 2 310 36 view .LVU610
 2291 0010 82B0     		sub	sp, sp, #8
 2292              		.cfi_def_cfa_offset 32
 310:src/console.c ****   strcpy( print_string, spaces );
 2293              		.loc 2 310 36 view .LVU611
 2294 0012 0190     		str	r0, [sp, #4]
ARM GAS  /tmp/ccwTS9FK.s 			page 63


 2295 0014 0091     		str	r1, [sp]
 311:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2296              		.loc 2 311 3 view .LVU612
 2297 0016 2046     		mov	r0, r4
 2298              	.LVL165:
 311:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2299              		.loc 2 311 3 view .LVU613
 2300 0018 3946     		mov	r1, r7
 2301              	.LVL166:
 311:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2302              		.loc 2 311 3 view .LVU614
 2303 001a FFF7FEFF 		bl	strcpy
 2304              	.LVL167:
 312:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2305              		.loc 2 312 3 is_stmt 1 view .LVU615
 2306 001e DDE90032 		ldrd	r3, r2, [sp]
 2307 0022 1449     		ldr	r1, .L208+16
 2308 0024 2046     		mov	r0, r4
 2309 0026 FFF7FEFF 		bl	sprintf
 2310              	.LVL168:
 313:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2311              		.loc 2 313 3 view .LVU616
 2312 002a 0121     		movs	r1, #1
 2313 002c 0320     		movs	r0, #3
 2314 002e FFF7FEFF 		bl	moveto
 2315              	.LVL169:
 314:src/console.c ****   lcd_refresh();
 2316              		.loc 2 314 3 view .LVU617
 2317 0032 2146     		mov	r1, r4
 2318 0034 B06B     		ldr	r0, [r6, #56]
 2319 0036 A847     		blx	r5
 2320              	.LVL170:
 2321              		.loc 2 315 3 view .LVU618
 2322 0038 C047     		blx	r8
 2323              	.LVL171:
 316:src/console.c ****   sys_delay (2500);
 2324              		.loc 2 316 3 view .LVU619
 2325 003a 0F4B     		ldr	r3, .L208+20
 2326 003c 40F6C410 		movw	r0, #2500
 2327 0040 9847     		blx	r3
 2328              	.LVL172:
 317:src/console.c ****   /* wait_for_key_press(); */
 318:src/console.c ****   //  key_pop_all();
 319:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 320:src/console.c ****   // key_pop_all();
 321:src/console.c ****   strcpy( print_string, spaces );
 2329              		.loc 2 321 3 view .LVU620
 2330 0042 3946     		mov	r1, r7
 2331 0044 2046     		mov	r0, r4
 2332 0046 FFF7FEFF 		bl	strcpy
 2333              	.LVL173:
 322:src/console.c ****   moveto (3, 1);
 2334              		.loc 2 322 3 view .LVU621
 2335 004a 0121     		movs	r1, #1
 2336 004c 0320     		movs	r0, #3
 2337 004e FFF7FEFF 		bl	moveto
 2338              	.LVL174:
ARM GAS  /tmp/ccwTS9FK.s 			page 64


 323:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2339              		.loc 2 323 3 view .LVU622
 2340 0052 B06B     		ldr	r0, [r6, #56]
 2341 0054 2146     		mov	r1, r4
 2342 0056 A847     		blx	r5
 2343              	.LVL175:
 324:src/console.c ****   lcd_refresh();
 2344              		.loc 2 324 3 view .LVU623
 2345 0058 4346     		mov	r3, r8
 325:src/console.c ****   // while (key_empty()<=0);; // wait for release
 326:src/console.c ****   // key_pop_all();
 327:src/console.c **** }
 2346              		.loc 2 327 1 is_stmt 0 view .LVU624
 2347 005a 02B0     		add	sp, sp, #8
 2348              		.cfi_def_cfa_offset 24
 2349              	.LVL176:
 2350              		.loc 2 327 1 view .LVU625
 2351              		@ sp needed
 2352 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2353              		.cfi_restore 14
 2354              		.cfi_restore 8
 2355              		.cfi_restore 7
 2356              		.cfi_restore 6
 2357              		.cfi_restore 5
 2358              		.cfi_restore 4
 2359              		.cfi_def_cfa_offset 0
 2360              	.LVL177:
 324:src/console.c ****   lcd_refresh();
 2361              		.loc 2 324 3 view .LVU626
 2362 0060 1847     		bx	r3	@ indirect register sibling call
 2363              	.LVL178:
 2364              	.L209:
 2365 0062 00BF     		.align	2
 2366              	.L208:
 2367 0064 00000000 		.word	print_string
 2368 0068 00000000 		.word	.LANCHOR10
 2369 006c 00200010 		.word	268443648
 2370 0070 B1020008 		.word	134218417
 2371 0074 00000000 		.word	.LC11
 2372 0078 05040008 		.word	134218757
 2373 007c 31020008 		.word	134218289
 2374              		.cfi_endproc
 2375              	.LFE26:
 2377              		.section	.text.do_now,"ax",%progbits
 2378              		.align	1
 2379              		.p2align 2,,3
 2380              		.global	do_now
 2381              		.syntax unified
 2382              		.thumb
 2383              		.thumb_func
 2384              		.fpu fpv4-sp-d16
 2386              	do_now:
 2387              	.LVL179:
 2388              	.LFB27:
 328:src/console.c **** 
 329:src/console.c **** void do_now (int key, int shift) {
 2389              		.loc 2 329 34 is_stmt 1 view -0
ARM GAS  /tmp/ccwTS9FK.s 			page 65


 2390              		.cfi_startproc
 2391              		@ args = 0, pretend = 0, frame = 8
 2392              		@ frame_needed = 0, uses_anonymous_args = 0
 2393              		@ link register save eliminated.
 330:src/console.c ****   struct _ndmap temp;
 2394              		.loc 2 330 3 view .LVU628
 331:src/console.c ****   temp.key_34s = key;
 2395              		.loc 2 331 3 view .LVU629
 329:src/console.c ****   struct _ndmap temp;
 2396              		.loc 2 329 34 is_stmt 0 view .LVU630
 2397 0000 82B0     		sub	sp, sp, #8
 2398              		.cfi_def_cfa_offset 8
 332:src/console.c ****   temp.shift = shift;
 333:src/console.c ****   process_keycode_with_shift (temp);
 2399              		.loc 2 333 3 view .LVU631
 2400 0002 02AB     		add	r3, sp, #8
 331:src/console.c ****   temp.shift = shift;
 2401              		.loc 2 331 16 view .LVU632
 2402 0004 8DF80000 		strb	r0, [sp]
 332:src/console.c ****   temp.shift = shift;
 2403              		.loc 2 332 3 is_stmt 1 view .LVU633
 332:src/console.c ****   temp.shift = shift;
 2404              		.loc 2 332 14 is_stmt 0 view .LVU634
 2405 0008 0191     		str	r1, [sp, #4]
 2406              		.loc 2 333 3 is_stmt 1 view .LVU635
 2407 000a 13E90300 		ldmdb	r3, {r0, r1}
 2408              	.LVL180:
 334:src/console.c **** }
 2409              		.loc 2 334 1 is_stmt 0 view .LVU636
 2410 000e 02B0     		add	sp, sp, #8
 2411              		.cfi_def_cfa_offset 0
 2412              		@ sp needed
 333:src/console.c **** }
 2413              		.loc 2 333 3 view .LVU637
 2414 0010 FFF7FEBF 		b	process_keycode_with_shift
 2415              	.LVL181:
 333:src/console.c **** }
 2416              		.loc 2 333 3 view .LVU638
 2417              		.cfi_endproc
 2418              	.LFE27:
 2420              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 2421              		.align	2
 2422              	.LC12:
 2423 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 2423      502F7770 
 2423      3334735F 
 2423      68656C70 
 2423      2E68746D 
 2424              		.section	.text.do_multi,"ax",%progbits
 2425              		.align	1
 2426              		.p2align 2,,3
 2427              		.global	do_multi
 2428              		.syntax unified
 2429              		.thumb
 2430              		.thumb_func
 2431              		.fpu fpv4-sp-d16
 2433              	do_multi:
ARM GAS  /tmp/ccwTS9FK.s 			page 66


 2434              	.LVL182:
 2435              	.LFB28:
 335:src/console.c **** 
 336:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 2436              		.loc 2 336 42 is_stmt 1 view -0
 2437              		.cfi_startproc
 2438              		@ args = 0, pretend = 0, frame = 16
 2439              		@ frame_needed = 0, uses_anonymous_args = 0
 2440              		.loc 2 336 42 is_stmt 0 view .LVU640
 2441 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2442              		.cfi_def_cfa_offset 24
 2443              		.cfi_offset 4, -24
 2444              		.cfi_offset 5, -20
 2445              		.cfi_offset 6, -16
 2446              		.cfi_offset 7, -12
 2447              		.cfi_offset 8, -8
 2448              		.cfi_offset 14, -4
 2449 0004 84B0     		sub	sp, sp, #16
 2450              		.cfi_def_cfa_offset 40
 2451              	.LVL183:
 337:src/console.c ****   switch(r.shift) {
 2452              		.loc 2 337 3 is_stmt 1 view .LVU641
 336:src/console.c ****   switch(r.shift) {
 2453              		.loc 2 336 42 is_stmt 0 view .LVU642
 2454 0006 6C46     		mov	r4, sp
 2455 0008 531E     		subs	r3, r2, #1
 2456 000a 84E80600 		stm	r4, {r1, r2}
 2457              	.LVL184:
 336:src/console.c ****   switch(r.shift) {
 2458              		.loc 2 336 42 view .LVU643
 2459 000e 0546     		mov	r5, r0
 2460 0010 0D2B     		cmp	r3, #13
 2461 0012 00F2C680 		bhi	.L213
 2462 0016 DFE803F0 		tbb	[pc, r3]
 2463              	.L215:
 2464 001a 1A       		.byte	(.L228-.L215)/2
 2465 001b 38       		.byte	(.L227-.L215)/2
 2466 001c 42       		.byte	(.L226-.L215)/2
 2467 001d 4C       		.byte	(.L225-.L215)/2
 2468 001e 56       		.byte	(.L224-.L215)/2
 2469 001f 60       		.byte	(.L223-.L215)/2
 2470 0020 6A       		.byte	(.L222-.L215)/2
 2471 0021 74       		.byte	(.L221-.L215)/2
 2472 0022 7D       		.byte	(.L220-.L215)/2
 2473 0023 87       		.byte	(.L219-.L215)/2
 2474 0024 90       		.byte	(.L218-.L215)/2
 2475 0025 99       		.byte	(.L217-.L215)/2
 2476 0026 B2       		.byte	(.L216-.L215)/2
 2477 0027 07       		.byte	(.L214-.L215)/2
 2478              		.p2align 1
 2479              	.L214:
 338:src/console.c ****   case LASTX: // Last x via RCL L
 339:src/console.c ****     do_now (K11, 0); // RCL
 340:src/console.c ****     do_now (K_RELEASE,0); // release
 341:src/console.c ****     do_now (K15,0); // TAN key
 342:src/console.c ****     r.key_34s = K_RELEASE;
 343:src/console.c ****     r.shift = 0; // set up for release;
ARM GAS  /tmp/ccwTS9FK.s 			page 67


 344:src/console.c ****     break;
 345:src/console.c ****   case ONSTO: // flash_backup()
 346:src/console.c ****     flash_backup(OP_SAVE);
 347:src/console.c ****     r = no_key;
 348:src/console.c ****     break;
 349:src/console.c ****   case ONRCL: // flash_restore()
 350:src/console.c ****     flash_restore(OP_LOAD);
 351:src/console.c ****     r = no_key;
 352:src/console.c ****     break;
 353:src/console.c ****   case WRLIB: // save library file
 354:src/console.c ****     save_lib_file(1);
 355:src/console.c ****     r = no_key;
 356:src/console.c ****     break;
 357:src/console.c ****   case LLIB: // load library file
 358:src/console.c ****     load_lib_file(1);
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case WRTST: // save state file
 362:src/console.c ****     save_ram_file(1);
 363:src/console.c ****     r = no_key;
 364:src/console.c ****     break;
 365:src/console.c ****   case LDST:
 366:src/console.c ****     load_ram_file(1);
 367:src/console.c ****     r = no_key;
 368:src/console.c ****     break;
 369:src/console.c ****   case LDPRG:
 370:src/console.c ****     load_prog_file();
 371:src/console.c ****     r = no_key;
 372:src/console.c ****     break;
 373:src/console.c ****   case SVPRG:
 374:src/console.c ****     save_prog_file();
 375:src/console.c ****     r = no_key;
 376:src/console.c ****     break;
 377:src/console.c ****   case HELP:
 378:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 379:src/console.c ****     r = no_key;
 380:src/console.c ****     break;
 381:src/console.c ****   case DOTS:
 382:src/console.c ****     do_all_dots();
 383:src/console.c ****     r = no_key;
 384:src/console.c ****     break;
 385:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 386:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 387:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 388:src/console.c ****     r = no_key;
 389:src/console.c ****     break;
 390:src/console.c ****   case DEFMEN:
 391:src/console.c ****     toggle_default_menu();
 392:src/console.c ****     r = f_shift; // clears f-shift that called this function
 393:src/console.c ****     break;
 394:src/console.c ****   case SETUMEN:
 395:src/console.c ****     build_user_menu();
 2480              		.loc 2 395 5 is_stmt 1 view .LVU644
 2481 0028 FFF7FEFF 		bl	build_user_menu
 2482              	.LVL185:
 396:src/console.c ****     r = g_shift;
 2483              		.loc 2 396 5 view .LVU645
ARM GAS  /tmp/ccwTS9FK.s 			page 68


 2484              		.loc 2 396 7 is_stmt 0 view .LVU646
 2485 002c 604B     		ldr	r3, .L233
 2486 002e 93E80300 		ldm	r3, {r0, r1}
 2487 0032 84E80300 		stm	r4, {r0, r1}
 2488 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2489              	.LVL186:
 397:src/console.c ****     break;
 2490              		.loc 2 397 5 is_stmt 1 view .LVU647
 2491              	.L229:
 398:src/console.c ****   default:
 399:src/console.c ****     r = no_key;
 400:src/console.c ****   }
 401:src/console.c ****   return r;
 2492              		.loc 2 401 3 view .LVU648
 2493              		.loc 2 401 10 is_stmt 0 view .LVU649
 2494 0038 8DF80030 		strb	r3, [sp]
 2495 003c 0191     		str	r1, [sp, #4]
 2496 003e 94E80300 		ldm	r4, {r0, r1}
 2497              	.LVL187:
 2498              		.loc 2 401 10 view .LVU650
 2499 0042 85E80300 		stm	r5, {r0, r1}
 402:src/console.c **** }
 2500              		.loc 2 402 1 view .LVU651
 2501 0046 2846     		mov	r0, r5
 2502 0048 04B0     		add	sp, sp, #16
 2503              		.cfi_remember_state
 2504              		.cfi_def_cfa_offset 24
 2505              		@ sp needed
 2506 004a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2507              	.LVL188:
 2508              	.L228:
 2509              		.cfi_restore_state
 339:src/console.c ****     do_now (K_RELEASE,0); // release
 2510              		.loc 2 339 5 is_stmt 1 view .LVU652
 2511              	.LBB96:
 2512              	.LBI96:
 329:src/console.c ****   struct _ndmap temp;
 2513              		.loc 2 329 6 view .LVU653
 2514              	.LBB97:
 330:src/console.c ****   temp.key_34s = key;
 2515              		.loc 2 330 3 view .LVU654
 331:src/console.c ****   temp.shift = shift;
 2516              		.loc 2 331 3 view .LVU655
 331:src/console.c ****   temp.shift = shift;
 2517              		.loc 2 331 16 is_stmt 0 view .LVU656
 2518 004e 0723     		movs	r3, #7
 332:src/console.c ****   process_keycode_with_shift (temp);
 2519              		.loc 2 332 14 view .LVU657
 2520 0050 0026     		movs	r6, #0
 331:src/console.c ****   temp.shift = shift;
 2521              		.loc 2 331 16 view .LVU658
 2522 0052 8DF80830 		strb	r3, [sp, #8]
 332:src/console.c ****   process_keycode_with_shift (temp);
 2523              		.loc 2 332 3 is_stmt 1 view .LVU659
 333:src/console.c **** }
 2524              		.loc 2 333 3 is_stmt 0 view .LVU660
 2525 0056 0DF10808 		add	r8, sp, #8
ARM GAS  /tmp/ccwTS9FK.s 			page 69


 332:src/console.c ****   process_keycode_with_shift (temp);
 2526              		.loc 2 332 14 view .LVU661
 2527 005a 0396     		str	r6, [sp, #12]
 333:src/console.c **** }
 2528              		.loc 2 333 3 is_stmt 1 view .LVU662
 2529 005c 98E80300 		ldm	r8, {r0, r1}
 2530              	.LVL189:
 333:src/console.c **** }
 2531              		.loc 2 333 3 is_stmt 0 view .LVU663
 2532              	.LBE97:
 2533              	.LBE96:
 2534              	.LBB99:
 2535              	.LBB100:
 331:src/console.c ****   temp.shift = shift;
 2536              		.loc 2 331 16 view .LVU664
 2537 0060 6327     		movs	r7, #99
 2538              	.LBE100:
 2539              	.LBE99:
 2540              	.LBB102:
 2541              	.LBB98:
 333:src/console.c **** }
 2542              		.loc 2 333 3 view .LVU665
 2543 0062 FFF7FEFF 		bl	process_keycode_with_shift
 2544              	.LVL190:
 333:src/console.c **** }
 2545              		.loc 2 333 3 view .LVU666
 2546              	.LBE98:
 2547              	.LBE102:
 340:src/console.c ****     do_now (K15,0); // TAN key
 2548              		.loc 2 340 5 is_stmt 1 view .LVU667
 2549              	.LBB103:
 2550              	.LBI99:
 329:src/console.c ****   struct _ndmap temp;
 2551              		.loc 2 329 6 view .LVU668
 2552              	.LBB101:
 330:src/console.c ****   temp.key_34s = key;
 2553              		.loc 2 330 3 view .LVU669
 331:src/console.c ****   temp.shift = shift;
 2554              		.loc 2 331 3 view .LVU670
 332:src/console.c ****   process_keycode_with_shift (temp);
 2555              		.loc 2 332 14 is_stmt 0 view .LVU671
 2556 0066 0396     		str	r6, [sp, #12]
 331:src/console.c ****   temp.shift = shift;
 2557              		.loc 2 331 16 view .LVU672
 2558 0068 8DF80870 		strb	r7, [sp, #8]
 332:src/console.c ****   process_keycode_with_shift (temp);
 2559              		.loc 2 332 3 is_stmt 1 view .LVU673
 333:src/console.c **** }
 2560              		.loc 2 333 3 view .LVU674
 2561 006c 98E80300 		ldm	r8, {r0, r1}
 2562 0070 FFF7FEFF 		bl	process_keycode_with_shift
 2563              	.LVL191:
 333:src/console.c **** }
 2564              		.loc 2 333 3 is_stmt 0 view .LVU675
 2565              	.LBE101:
 2566              	.LBE103:
 341:src/console.c ****     r.key_34s = K_RELEASE;
ARM GAS  /tmp/ccwTS9FK.s 			page 70


 2567              		.loc 2 341 5 is_stmt 1 view .LVU676
 2568              	.LBB104:
 2569              	.LBI104:
 329:src/console.c ****   struct _ndmap temp;
 2570              		.loc 2 329 6 view .LVU677
 2571              	.LBB105:
 330:src/console.c ****   temp.key_34s = key;
 2572              		.loc 2 330 3 view .LVU678
 331:src/console.c ****   temp.shift = shift;
 2573              		.loc 2 331 3 view .LVU679
 331:src/console.c ****   temp.shift = shift;
 2574              		.loc 2 331 16 is_stmt 0 view .LVU680
 2575 0074 0B23     		movs	r3, #11
 2576 0076 8DF80830 		strb	r3, [sp, #8]
 332:src/console.c ****   process_keycode_with_shift (temp);
 2577              		.loc 2 332 3 is_stmt 1 view .LVU681
 333:src/console.c **** }
 2578              		.loc 2 333 3 view .LVU682
 332:src/console.c ****   process_keycode_with_shift (temp);
 2579              		.loc 2 332 14 is_stmt 0 view .LVU683
 2580 007a 0396     		str	r6, [sp, #12]
 333:src/console.c **** }
 2581              		.loc 2 333 3 view .LVU684
 2582 007c 98E80300 		ldm	r8, {r0, r1}
 2583 0080 FFF7FEFF 		bl	process_keycode_with_shift
 2584              	.LVL192:
 333:src/console.c **** }
 2585              		.loc 2 333 3 view .LVU685
 2586              	.LBE105:
 2587              	.LBE104:
 342:src/console.c ****     r.shift = 0; // set up for release;
 2588              		.loc 2 342 5 is_stmt 1 view .LVU686
 343:src/console.c ****     break;
 2589              		.loc 2 343 5 view .LVU687
 344:src/console.c ****   case ONSTO: // flash_backup()
 2590              		.loc 2 344 5 view .LVU688
 343:src/console.c ****     break;
 2591              		.loc 2 343 13 is_stmt 0 view .LVU689
 2592 0084 3146     		mov	r1, r6
 342:src/console.c ****     r.shift = 0; // set up for release;
 2593              		.loc 2 342 15 view .LVU690
 2594 0086 3B46     		mov	r3, r7
 344:src/console.c ****   case ONSTO: // flash_backup()
 2595              		.loc 2 344 5 view .LVU691
 2596 0088 D6E7     		b	.L229
 2597              	.LVL193:
 2598              	.L227:
 346:src/console.c ****     r = no_key;
 2599              		.loc 2 346 5 is_stmt 1 view .LVU692
 2600 008a AD20     		movs	r0, #173
 2601              	.LVL194:
 346:src/console.c ****     r = no_key;
 2602              		.loc 2 346 5 is_stmt 0 view .LVU693
 2603 008c FFF7FEFF 		bl	flash_backup
 2604              	.LVL195:
 347:src/console.c ****     break;
 2605              		.loc 2 347 5 is_stmt 1 view .LVU694
ARM GAS  /tmp/ccwTS9FK.s 			page 71


 347:src/console.c ****     break;
 2606              		.loc 2 347 7 is_stmt 0 view .LVU695
 2607 0090 484B     		ldr	r3, .L233+4
 2608 0092 93E80300 		ldm	r3, {r0, r1}
 2609 0096 84E80300 		stm	r4, {r0, r1}
 2610 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2611              	.LVL196:
 348:src/console.c ****   case ONRCL: // flash_restore()
 2612              		.loc 2 348 5 is_stmt 1 view .LVU696
 2613 009c CCE7     		b	.L229
 2614              	.LVL197:
 2615              	.L226:
 350:src/console.c ****     r = no_key;
 2616              		.loc 2 350 5 view .LVU697
 2617 009e AE20     		movs	r0, #174
 2618              	.LVL198:
 350:src/console.c ****     r = no_key;
 2619              		.loc 2 350 5 is_stmt 0 view .LVU698
 2620 00a0 FFF7FEFF 		bl	flash_restore
 2621              	.LVL199:
 351:src/console.c ****     break;
 2622              		.loc 2 351 5 is_stmt 1 view .LVU699
 351:src/console.c ****     break;
 2623              		.loc 2 351 7 is_stmt 0 view .LVU700
 2624 00a4 434B     		ldr	r3, .L233+4
 2625 00a6 93E80300 		ldm	r3, {r0, r1}
 2626 00aa 84E80300 		stm	r4, {r0, r1}
 2627 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2628              	.LVL200:
 352:src/console.c ****   case WRLIB: // save library file
 2629              		.loc 2 352 5 is_stmt 1 view .LVU701
 2630 00b0 C2E7     		b	.L229
 2631              	.LVL201:
 2632              	.L225:
 354:src/console.c ****     r = no_key;
 2633              		.loc 2 354 5 view .LVU702
 2634 00b2 0120     		movs	r0, #1
 2635              	.LVL202:
 354:src/console.c ****     r = no_key;
 2636              		.loc 2 354 5 is_stmt 0 view .LVU703
 2637 00b4 FFF7FEFF 		bl	save_lib_file
 2638              	.LVL203:
 355:src/console.c ****     break;
 2639              		.loc 2 355 5 is_stmt 1 view .LVU704
 355:src/console.c ****     break;
 2640              		.loc 2 355 7 is_stmt 0 view .LVU705
 2641 00b8 3E4B     		ldr	r3, .L233+4
 2642 00ba 93E80300 		ldm	r3, {r0, r1}
 2643 00be 84E80300 		stm	r4, {r0, r1}
 2644 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2645              	.LVL204:
 356:src/console.c ****   case LLIB: // load library file
 2646              		.loc 2 356 5 is_stmt 1 view .LVU706
 2647 00c4 B8E7     		b	.L229
 2648              	.LVL205:
 2649              	.L224:
 358:src/console.c ****     r = no_key;
ARM GAS  /tmp/ccwTS9FK.s 			page 72


 2650              		.loc 2 358 5 view .LVU707
 2651 00c6 0120     		movs	r0, #1
 2652              	.LVL206:
 358:src/console.c ****     r = no_key;
 2653              		.loc 2 358 5 is_stmt 0 view .LVU708
 2654 00c8 FFF7FEFF 		bl	load_lib_file
 2655              	.LVL207:
 359:src/console.c ****     break;
 2656              		.loc 2 359 5 is_stmt 1 view .LVU709
 359:src/console.c ****     break;
 2657              		.loc 2 359 7 is_stmt 0 view .LVU710
 2658 00cc 394B     		ldr	r3, .L233+4
 2659 00ce 93E80300 		ldm	r3, {r0, r1}
 2660 00d2 84E80300 		stm	r4, {r0, r1}
 2661 00d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2662              	.LVL208:
 360:src/console.c ****   case WRTST: // save state file
 2663              		.loc 2 360 5 is_stmt 1 view .LVU711
 2664 00d8 AEE7     		b	.L229
 2665              	.LVL209:
 2666              	.L223:
 362:src/console.c ****     r = no_key;
 2667              		.loc 2 362 5 view .LVU712
 2668 00da 0120     		movs	r0, #1
 2669              	.LVL210:
 362:src/console.c ****     r = no_key;
 2670              		.loc 2 362 5 is_stmt 0 view .LVU713
 2671 00dc FFF7FEFF 		bl	save_ram_file
 2672              	.LVL211:
 363:src/console.c ****     break;
 2673              		.loc 2 363 5 is_stmt 1 view .LVU714
 363:src/console.c ****     break;
 2674              		.loc 2 363 7 is_stmt 0 view .LVU715
 2675 00e0 344B     		ldr	r3, .L233+4
 2676 00e2 93E80300 		ldm	r3, {r0, r1}
 2677 00e6 84E80300 		stm	r4, {r0, r1}
 2678 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2679              	.LVL212:
 364:src/console.c ****   case LDST:
 2680              		.loc 2 364 5 is_stmt 1 view .LVU716
 2681 00ec A4E7     		b	.L229
 2682              	.LVL213:
 2683              	.L222:
 366:src/console.c ****     r = no_key;
 2684              		.loc 2 366 5 view .LVU717
 2685 00ee 0120     		movs	r0, #1
 2686              	.LVL214:
 366:src/console.c ****     r = no_key;
 2687              		.loc 2 366 5 is_stmt 0 view .LVU718
 2688 00f0 FFF7FEFF 		bl	load_ram_file
 2689              	.LVL215:
 367:src/console.c ****     break;
 2690              		.loc 2 367 5 is_stmt 1 view .LVU719
 367:src/console.c ****     break;
 2691              		.loc 2 367 7 is_stmt 0 view .LVU720
 2692 00f4 2F4B     		ldr	r3, .L233+4
 2693 00f6 93E80300 		ldm	r3, {r0, r1}
ARM GAS  /tmp/ccwTS9FK.s 			page 73


 2694 00fa 84E80300 		stm	r4, {r0, r1}
 2695 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2696              	.LVL216:
 368:src/console.c ****   case LDPRG:
 2697              		.loc 2 368 5 is_stmt 1 view .LVU721
 2698 0100 9AE7     		b	.L229
 2699              	.LVL217:
 2700              	.L221:
 370:src/console.c ****     r = no_key;
 2701              		.loc 2 370 5 view .LVU722
 2702 0102 FFF7FEFF 		bl	load_prog_file
 2703              	.LVL218:
 371:src/console.c ****     break;
 2704              		.loc 2 371 5 view .LVU723
 371:src/console.c ****     break;
 2705              		.loc 2 371 7 is_stmt 0 view .LVU724
 2706 0106 2B4B     		ldr	r3, .L233+4
 2707 0108 93E80300 		ldm	r3, {r0, r1}
 2708 010c 84E80300 		stm	r4, {r0, r1}
 2709 0110 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2710              	.LVL219:
 372:src/console.c ****   case SVPRG:
 2711              		.loc 2 372 5 is_stmt 1 view .LVU725
 2712 0112 91E7     		b	.L229
 2713              	.LVL220:
 2714              	.L220:
 378:src/console.c ****     r = no_key;
 2715              		.loc 2 378 5 view .LVU726
 2716 0114 284B     		ldr	r3, .L233+8
 2717 0116 2948     		ldr	r0, .L233+12
 2718              	.LVL221:
 378:src/console.c ****     r = no_key;
 2719              		.loc 2 378 5 is_stmt 0 view .LVU727
 2720 0118 9847     		blx	r3
 2721              	.LVL222:
 379:src/console.c ****     break;
 2722              		.loc 2 379 5 is_stmt 1 view .LVU728
 379:src/console.c ****     break;
 2723              		.loc 2 379 7 is_stmt 0 view .LVU729
 2724 011a 264B     		ldr	r3, .L233+4
 2725 011c 93E80300 		ldm	r3, {r0, r1}
 2726 0120 84E80300 		stm	r4, {r0, r1}
 2727 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2728              	.LVL223:
 380:src/console.c ****   case DOTS:
 2729              		.loc 2 380 5 is_stmt 1 view .LVU730
 2730 0126 87E7     		b	.L229
 2731              	.LVL224:
 2732              	.L219:
 374:src/console.c ****     r = no_key;
 2733              		.loc 2 374 5 view .LVU731
 2734 0128 FFF7FEFF 		bl	save_prog_file
 2735              	.LVL225:
 375:src/console.c ****     break;
 2736              		.loc 2 375 5 view .LVU732
 375:src/console.c ****     break;
 2737              		.loc 2 375 7 is_stmt 0 view .LVU733
ARM GAS  /tmp/ccwTS9FK.s 			page 74


 2738 012c 214B     		ldr	r3, .L233+4
 2739 012e 93E80300 		ldm	r3, {r0, r1}
 2740 0132 84E80300 		stm	r4, {r0, r1}
 2741 0136 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2742              	.LVL226:
 376:src/console.c ****   case HELP:
 2743              		.loc 2 376 5 is_stmt 1 view .LVU734
 2744 0138 7EE7     		b	.L229
 2745              	.LVL227:
 2746              	.L218:
 382:src/console.c ****     r = no_key;
 2747              		.loc 2 382 5 view .LVU735
 2748 013a FFF7FEFF 		bl	do_all_dots
 2749              	.LVL228:
 383:src/console.c ****     break;
 2750              		.loc 2 383 5 view .LVU736
 383:src/console.c ****     break;
 2751              		.loc 2 383 7 is_stmt 0 view .LVU737
 2752 013e 1D4B     		ldr	r3, .L233+4
 2753 0140 93E80300 		ldm	r3, {r0, r1}
 2754 0144 84E80300 		stm	r4, {r0, r1}
 2755 0148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2756              	.LVL229:
 384:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 2757              		.loc 2 384 5 is_stmt 1 view .LVU738
 2758 014a 75E7     		b	.L229
 2759              	.LVL230:
 2760              	.L217:
 386:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 2761              		.loc 2 386 5 view .LVU739
 2762              	.LBB106:
 2763              	.LBI106:
 329:src/console.c ****   struct _ndmap temp;
 2764              		.loc 2 329 6 view .LVU740
 2765              	.LBB107:
 330:src/console.c ****   temp.key_34s = key;
 2766              		.loc 2 330 3 view .LVU741
 331:src/console.c ****   temp.shift = shift;
 2767              		.loc 2 331 3 view .LVU742
 331:src/console.c ****   temp.shift = shift;
 2768              		.loc 2 331 16 is_stmt 0 view .LVU743
 2769 014c 6323     		movs	r3, #99
 332:src/console.c ****   process_keycode_with_shift (temp);
 2770              		.loc 2 332 14 view .LVU744
 2771 014e 0027     		movs	r7, #0
 331:src/console.c ****   temp.shift = shift;
 2772              		.loc 2 331 16 view .LVU745
 2773 0150 8DF80830 		strb	r3, [sp, #8]
 332:src/console.c ****   process_keycode_with_shift (temp);
 2774              		.loc 2 332 3 is_stmt 1 view .LVU746
 332:src/console.c ****   process_keycode_with_shift (temp);
 2775              		.loc 2 332 14 is_stmt 0 view .LVU747
 2776 0154 0397     		str	r7, [sp, #12]
 333:src/console.c **** }
 2777              		.loc 2 333 3 is_stmt 1 view .LVU748
 2778 0156 02AE     		add	r6, sp, #8
 2779 0158 96E80300 		ldm	r6, {r0, r1}
ARM GAS  /tmp/ccwTS9FK.s 			page 75


 2780              	.LVL231:
 333:src/console.c **** }
 2781              		.loc 2 333 3 is_stmt 0 view .LVU749
 2782 015c FFF7FEFF 		bl	process_keycode_with_shift
 2783              	.LVL232:
 333:src/console.c **** }
 2784              		.loc 2 333 3 view .LVU750
 2785              	.LBE107:
 2786              	.LBE106:
 387:src/console.c ****     r = no_key;
 2787              		.loc 2 387 5 is_stmt 1 view .LVU751
 2788              	.LBB108:
 2789              	.LBI108:
 329:src/console.c ****   struct _ndmap temp;
 2790              		.loc 2 329 6 view .LVU752
 2791              	.LBB109:
 330:src/console.c ****   temp.key_34s = key;
 2792              		.loc 2 330 3 view .LVU753
 331:src/console.c ****   temp.shift = shift;
 2793              		.loc 2 331 3 view .LVU754
 331:src/console.c ****   temp.shift = shift;
 2794              		.loc 2 331 16 is_stmt 0 view .LVU755
 2795 0160 3323     		movs	r3, #51
 2796 0162 8DF80830 		strb	r3, [sp, #8]
 332:src/console.c ****   process_keycode_with_shift (temp);
 2797              		.loc 2 332 3 is_stmt 1 view .LVU756
 333:src/console.c **** }
 2798              		.loc 2 333 3 view .LVU757
 332:src/console.c ****   process_keycode_with_shift (temp);
 2799              		.loc 2 332 14 is_stmt 0 view .LVU758
 2800 0166 0397     		str	r7, [sp, #12]
 333:src/console.c **** }
 2801              		.loc 2 333 3 view .LVU759
 2802 0168 96E80300 		ldm	r6, {r0, r1}
 2803 016c FFF7FEFF 		bl	process_keycode_with_shift
 2804              	.LVL233:
 333:src/console.c **** }
 2805              		.loc 2 333 3 view .LVU760
 2806              	.LBE109:
 2807              	.LBE108:
 388:src/console.c ****     break;
 2808              		.loc 2 388 5 is_stmt 1 view .LVU761
 388:src/console.c ****     break;
 2809              		.loc 2 388 7 is_stmt 0 view .LVU762
 2810 0170 104B     		ldr	r3, .L233+4
 2811 0172 93E80300 		ldm	r3, {r0, r1}
 2812 0176 84E80300 		stm	r4, {r0, r1}
 2813 017a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2814              	.LVL234:
 389:src/console.c ****   case DEFMEN:
 2815              		.loc 2 389 5 is_stmt 1 view .LVU763
 2816 017c 5CE7     		b	.L229
 2817              	.LVL235:
 2818              	.L216:
 391:src/console.c ****     r = f_shift; // clears f-shift that called this function
 2819              		.loc 2 391 5 view .LVU764
 2820              	.LBB110:
ARM GAS  /tmp/ccwTS9FK.s 			page 76


 2821              	.LBI110:
 100:src/menu.c    ****   if (current_menu == default_menu) {
 2822              		.loc 1 100 6 view .LVU765
 2823              	.LBB111:
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2824              		.loc 1 101 3 view .LVU766
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2825              		.loc 1 101 20 is_stmt 0 view .LVU767
 2826 017e 1049     		ldr	r1, .L233+16
 2827 0180 104A     		ldr	r2, .L233+20
 2828 0182 0868     		ldr	r0, [r1]
 2829              	.LVL236:
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2830              		.loc 1 101 6 view .LVU768
 2831 0184 1368     		ldr	r3, [r2]
 2832 0186 8342     		cmp	r3, r0
 2833 0188 06D0     		beq	.L232
 2834              	.L230:
 2835              	.LBE111:
 2836              	.LBE110:
 392:src/console.c ****     break;
 2837              		.loc 2 392 5 is_stmt 1 view .LVU769
 392:src/console.c ****     break;
 2838              		.loc 2 392 7 is_stmt 0 view .LVU770
 2839 018a 0F4B     		ldr	r3, .L233+24
 2840 018c 93E80300 		ldm	r3, {r0, r1}
 2841 0190 84E80300 		stm	r4, {r0, r1}
 2842 0194 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2843              	.LVL237:
 393:src/console.c ****   case SETUMEN:
 2844              		.loc 2 393 5 is_stmt 1 view .LVU771
 2845 0196 4FE7     		b	.L229
 2846              	.LVL238:
 2847              	.L232:
 2848              	.LBB113:
 2849              	.LBB112:
 102:src/menu.c    ****   }
 2850              		.loc 1 102 5 view .LVU772
 102:src/menu.c    ****   }
 2851              		.loc 1 102 38 is_stmt 0 view .LVU773
 2852 0198 C3F10F03 		rsb	r3, r3, #15
 102:src/menu.c    ****   }
 2853              		.loc 1 102 33 view .LVU774
 2854 019c 0B60     		str	r3, [r1]
 102:src/menu.c    ****   }
 2855              		.loc 1 102 18 view .LVU775
 2856 019e 1360     		str	r3, [r2]
 2857 01a0 F3E7     		b	.L230
 2858              	.LVL239:
 2859              	.L213:
 102:src/menu.c    ****   }
 2860              		.loc 1 102 18 view .LVU776
 2861              	.LBE112:
 2862              	.LBE113:
 399:src/console.c ****   }
 2863              		.loc 2 399 5 is_stmt 1 view .LVU777
 399:src/console.c ****   }
ARM GAS  /tmp/ccwTS9FK.s 			page 77


 2864              		.loc 2 399 7 is_stmt 0 view .LVU778
 2865 01a2 044B     		ldr	r3, .L233+4
 2866 01a4 93E80300 		ldm	r3, {r0, r1}
 2867              	.LVL240:
 399:src/console.c ****   }
 2868              		.loc 2 399 7 view .LVU779
 2869 01a8 84E80300 		stm	r4, {r0, r1}
 2870 01ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2871              	.LVL241:
 399:src/console.c ****   }
 2872              		.loc 2 399 7 view .LVU780
 2873 01ae 43E7     		b	.L229
 2874              	.L234:
 2875              		.align	2
 2876              	.L233:
 2877 01b0 00000000 		.word	.LANCHOR13
 2878 01b4 00000000 		.word	.LANCHOR11
 2879 01b8 49040008 		.word	134218825
 2880 01bc 00000000 		.word	.LC12
 2881 01c0 00000000 		.word	.LANCHOR2
 2882 01c4 00000000 		.word	.LANCHOR1
 2883 01c8 00000000 		.word	.LANCHOR12
 2884              		.cfi_endproc
 2885              	.LFE28:
 2887              		.section	.text.program_main,"ax",%progbits
 2888              		.align	1
 2889              		.p2align 2,,3
 2890              		.global	program_main
 2891              		.syntax unified
 2892              		.thumb
 2893              		.thumb_func
 2894              		.fpu fpv4-sp-d16
 2896              	program_main:
 2897              	.LFB29:
 403:src/console.c **** 
 404:src/console.c **** void program_main(){
 2898              		.loc 2 404 20 is_stmt 1 view -0
 2899              		.cfi_startproc
 2900              		@ args = 0, pretend = 0, frame = 16
 2901              		@ frame_needed = 0, uses_anonymous_args = 0
 405:src/console.c ****   int c;
 2902              		.loc 2 405 3 view .LVU782
 406:src/console.c ****   struct _ndmap remapped;
 2903              		.loc 2 406 3 view .LVU783
 407:src/console.c **** 
 408:src/console.c ****   init_mem();
 2904              		.loc 2 408 3 view .LVU784
 404:src/console.c ****   int c;
 2905              		.loc 2 404 20 is_stmt 0 view .LVU785
 2906 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2907              		.cfi_def_cfa_offset 36
 2908              		.cfi_offset 4, -36
 2909              		.cfi_offset 5, -32
 2910              		.cfi_offset 6, -28
 2911              		.cfi_offset 7, -24
 2912              		.cfi_offset 8, -20
 2913              		.cfi_offset 9, -16
ARM GAS  /tmp/ccwTS9FK.s 			page 78


 2914              		.cfi_offset 10, -12
 2915              		.cfi_offset 11, -8
 2916              		.cfi_offset 14, -4
 2917 0004 85B0     		sub	sp, sp, #20
 2918              		.cfi_def_cfa_offset 56
 2919              		.loc 2 408 3 view .LVU786
 2920 0006 FFF7FEFF 		bl	init_mem
 2921              	.LVL242:
 409:src/console.c ****   init_RegionTab();
 2922              		.loc 2 409 3 is_stmt 1 view .LVU787
 2923 000a FFF7FEFF 		bl	init_RegionTab
 2924              	.LVL243:
 410:src/console.c ****   init_34s();
 2925              		.loc 2 410 3 view .LVU788
 2926 000e FFF7FEFF 		bl	init_34s
 2927              	.LVL244:
 411:src/console.c ****   State2.flags = 1;  
 2928              		.loc 2 411 3 view .LVU789
 2929              		.loc 2 411 16 is_stmt 0 view .LVU790
 2930 0012 A74A     		ldr	r2, .L359
 2931 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 2932 0016 43F00103 		orr	r3, r3, #1
 2933 001a 1376     		strb	r3, [r2, #24]
 412:src/console.c ****   check_create_wp34sdir();
 2934              		.loc 2 412 3 is_stmt 1 view .LVU791
 2935 001c FFF7FEFF 		bl	check_create_wp34sdir
 2936              	.LVL245:
 413:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 2937              		.loc 2 413 3 view .LVU792
 2938              		.loc 2 413 8 is_stmt 0 view .LVU793
 2939 0020 0020     		movs	r0, #0
 2940 0022 FFF7FEFF 		bl	load_ram_file
 2941              	.LVL246:
 2942              		.loc 2 413 6 view .LVU794
 2943 0026 08B9     		cbnz	r0, .L236
 2944              		.loc 2 413 26 is_stmt 1 discriminator 1 view .LVU795
 2945              		.loc 2 413 34 is_stmt 0 discriminator 1 view .LVU796
 2946 0028 A24B     		ldr	r3, .L359+4
 2947 002a 1860     		str	r0, [r3]
 2948              	.L236:
 414:src/console.c ****   load_backup_file(0);
 2949              		.loc 2 414 3 is_stmt 1 view .LVU797
 415:src/console.c ****   load_lib_file(0);
 416:src/console.c ****   t20->newln = 0;
 2950              		.loc 2 416 3 is_stmt 0 view .LVU798
 2951 002c A24C     		ldr	r4, .L359+8
 2952              	.LBB129:
 2953              	.LBB130:
 111:src/menu.c    **** }
 2954              		.loc 1 111 3 view .LVU799
 2955 002e A34E     		ldr	r6, .L359+12
 2956              	.LBE130:
 2957              	.LBE129:
 2958              	.LBB132:
 2959              	.LBB133:
  91:src/console.c ****     }
 2960              		.loc 2 91 58 view .LVU800
ARM GAS  /tmp/ccwTS9FK.s 			page 79


 2961 0030 DFF808B3 		ldr	fp, .L359+140
 2962              	.LBE133:
 2963              	.LBE132:
 414:src/console.c ****   load_lib_file(0);
 2964              		.loc 2 414 3 view .LVU801
 2965 0034 0020     		movs	r0, #0
 2966 0036 FFF7FEFF 		bl	load_backup_file
 2967              	.LVL247:
 415:src/console.c ****   t20->newln = 0;
 2968              		.loc 2 415 3 is_stmt 1 view .LVU802
 2969 003a 0020     		movs	r0, #0
 2970 003c FFF7FEFF 		bl	load_lib_file
 2971              	.LVL248:
 2972              		.loc 2 416 3 view .LVU803
 2973 0040 236B     		ldr	r3, [r4, #48]
 417:src/console.c ****   t20->lnfill = 0;
 2974              		.loc 2 417 3 view .LVU804
 418:src/console.c ****   t20->fixed = 1;
 2975              		.loc 2 418 3 view .LVU805
 419:src/console.c ****   t20->xspc = -2;
 420:src/console.c ****   t20->bgfill = 0;
 421:src/console.c ****   run_menu_item_app = run_menu_item;
 2976              		.loc 2 421 21 is_stmt 0 view .LVU806
 2977 0042 9F49     		ldr	r1, .L359+16
 422:src/console.c ****   menu_line_str_app = menu_line_str;
 2978              		.loc 2 422 21 view .LVU807
 2979 0044 9F4A     		ldr	r2, .L359+20
 418:src/console.c ****   t20->fixed = 1;
 2980              		.loc 2 418 14 view .LVU808
 2981 0046 0120     		movs	r0, #1
 2982 0048 1874     		strb	r0, [r3, #16]
 419:src/console.c ****   t20->xspc = -2;
 2983              		.loc 2 419 3 is_stmt 1 view .LVU809
 420:src/console.c ****   run_menu_item_app = run_menu_item;
 2984              		.loc 2 420 15 is_stmt 0 view .LVU810
 2985 004a 0025     		movs	r5, #0
 419:src/console.c ****   t20->xspc = -2;
 2986              		.loc 2 419 13 view .LVU811
 2987 004c FE20     		movs	r0, #254
 2988 004e 9873     		strb	r0, [r3, #14]
 420:src/console.c ****   run_menu_item_app = run_menu_item;
 2989              		.loc 2 420 3 is_stmt 1 view .LVU812
 420:src/console.c ****   run_menu_item_app = run_menu_item;
 2990              		.loc 2 420 15 is_stmt 0 view .LVU813
 2991 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 416:src/console.c ****   t20->lnfill = 0;
 2992              		.loc 2 416 14 view .LVU814
 2993 0052 1D75     		strb	r5, [r3, #20]
 421:src/console.c ****   menu_line_str_app = menu_line_str;
 2994              		.loc 2 421 3 is_stmt 1 view .LVU815
 2995              		.loc 2 422 21 is_stmt 0 view .LVU816
 2996 0054 C4E90312 		strd	r1, r2, [r4, #12]
 423:src/console.c **** 
 424:src/console.c ****   display();
 2997              		.loc 2 424 3 is_stmt 1 view .LVU817
 2998 0058 FFF7FEFF 		bl	display
 2999              	.LVL249:
ARM GAS  /tmp/ccwTS9FK.s 			page 80


 425:src/console.c ****   display_current_menu();
 3000              		.loc 2 425 3 view .LVU818
 3001              	.LBB145:
 3002              	.LBI129:
 110:src/menu.c    ****   display_menu (current_menu);
 3003              		.loc 1 110 6 view .LVU819
 3004              	.LBB131:
 111:src/menu.c    **** }
 3005              		.loc 1 111 3 view .LVU820
 3006 005c 3068     		ldr	r0, [r6]
 3007 005e FFF7FEFF 		bl	display_menu
 3008              	.LVL250:
 3009              	.LBE131:
 3010              	.LBE145:
 426:src/console.c ****   lcd_refresh();
 3011              		.loc 2 426 3 view .LVU821
 3012 0062 994B     		ldr	r3, .L359+24
 3013 0064 9847     		blx	r3
 3014              	.LVL251:
 427:src/console.c ****   JustDisplayed = 0;
 3015              		.loc 2 427 3 view .LVU822
 3016              		.loc 2 427 17 is_stmt 0 view .LVU823
 3017 0066 994B     		ldr	r3, .L359+28
 3018              	.LBB146:
 3019              	.LBB135:
  91:src/console.c ****     }
 3020              		.loc 2 91 58 view .LVU824
 3021 0068 0BF1B808 		add	r8, fp, #184
 3022              	.LBE135:
 3023              	.LBE146:
 3024              		.loc 2 427 17 view .LVU825
 3025 006c 1D60     		str	r5, [r3]
 3026              	.L237:
 428:src/console.c ****   /*
 429:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 430:src/console.c ****     Sleeps peacefully while waiting for a key.
 431:src/console.c ****     Handles (in principle!) turning off and on.
 432:src/console.c ****     =================
 433:src/console.c ****     Main event loop
 434:src/console.c ****     =================
 435:src/console.c **** 
 436:src/console.c ****     Status flags:
 437:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 438:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 439:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 440:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 441:src/console.c ****   */
 442:src/console.c ****   for(;;) {
 3027              		.loc 2 442 3 is_stmt 1 view .LVU826
 443:src/console.c **** 
 444:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 3028              		.loc 2 444 5 view .LVU827
 3029              		.loc 2 444 10 is_stmt 0 view .LVU828
 3030 006e 2368     		ldr	r3, [r4]
 3031              		.loc 2 444 8 view .LVU829
 3032 0070 9B05     		lsls	r3, r3, #22
 3033 0072 5FD5     		bpl	.L238
ARM GAS  /tmp/ccwTS9FK.s 			page 81


 3034              		.loc 2 444 30 discriminator 1 view .LVU830
 3035 0074 2368     		ldr	r3, [r4]
 3036              		.loc 2 444 27 discriminator 1 view .LVU831
 3037 0076 5F07     		lsls	r7, r3, #29
 3038 0078 5CD5     		bpl	.L238
 445:src/console.c ****       {
 446:src/console.c **** 	CLR_ST(STAT_RUNNING);
 3039              		.loc 2 446 2 is_stmt 1 view .LVU832
 3040 007a 2368     		ldr	r3, [r4]
 447:src/console.c **** 	sys_sleep();
 3041              		.loc 2 447 2 is_stmt 0 view .LVU833
 3042 007c 944A     		ldr	r2, .L359+32
 446:src/console.c **** 	sys_sleep();
 3043              		.loc 2 446 2 view .LVU834
 3044 007e 23F00203 		bic	r3, r3, #2
 3045 0082 2360     		str	r3, [r4]
 3046              		.loc 2 447 2 is_stmt 1 view .LVU835
 3047 0084 9047     		blx	r2
 3048              	.LVL252:
 3049              	.L239:
 448:src/console.c ****       }
 449:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 450:src/console.c ****     {
 451:src/console.c ****       CLR_ST(STAT_RUNNING);
 452:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 453:src/console.c ****       sys_sleep();
 454:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 455:src/console.c **** 	key_push (K_HEARTBEAT);
 456:src/console.c **** 	if (Pause > 0) Pause--;
 457:src/console.c ****       }
 458:src/console.c ****       sys_timer_disable(0); // stop timer
 459:src/console.c ****     }
 460:src/console.c ****     
 461:src/console.c ****     // Wakeup in off state or going to sleep
 462:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3050              		.loc 2 462 5 view .LVU836
 3051              		.loc 2 462 9 is_stmt 0 view .LVU837
 3052 0086 2368     		ldr	r3, [r4]
 3053              		.loc 2 462 8 view .LVU838
 3054 0088 9D05     		lsls	r5, r3, #22
 3055 008a 79D4     		bmi	.L245
 3056              	.L336:
 3057              		.loc 2 462 29 discriminator 1 view .LVU839
 3058 008c 2368     		ldr	r3, [r4]
 3059              		.loc 2 462 26 discriminator 1 view .LVU840
 3060 008e 5807     		lsls	r0, r3, #29
 3061 0090 76D4     		bmi	.L245
 463:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 464:src/console.c ****         // Going to off mode
 465:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 466:src/console.c ****         draw_power_off_image(1);
 467:src/console.c **** 
 468:src/console.c ****         LCD_power_off(0);
 469:src/console.c ****         SET_ST(STAT_SUSPENDED);
 470:src/console.c ****         SET_ST(STAT_OFF);
 471:src/console.c ****       }
 472:src/console.c ****       // Already in OFF -> just continue to sleep above
ARM GAS  /tmp/ccwTS9FK.s 			page 82


 473:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 474:src/console.c ****       // thus reaching the sleep()
 475:src/console.c ****     }
 476:src/console.c **** 
 477:src/console.c ****     // Well, we are woken-up
 478:src/console.c ****     SET_ST(STAT_RUNNING);
 3062              		.loc 2 478 5 is_stmt 1 view .LVU841
 3063 0092 2368     		ldr	r3, [r4]
 3064 0094 43F00203 		orr	r3, r3, #2
 3065 0098 2360     		str	r3, [r4]
 479:src/console.c **** 
 480:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 481:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3066              		.loc 2 481 5 view .LVU842
 3067 009a 2368     		ldr	r3, [r4]
 3068 009c 23F00403 		bic	r3, r3, #4
 3069 00a0 2360     		str	r3, [r4]
 482:src/console.c **** 
 483:src/console.c ****     // Get up from OFF state
 484:src/console.c ****     if ( ST(STAT_OFF) ) {
 3070              		.loc 2 484 5 view .LVU843
 3071              		.loc 2 484 10 is_stmt 0 view .LVU844
 3072 00a2 2368     		ldr	r3, [r4]
 3073              		.loc 2 484 8 view .LVU845
 3074 00a4 D906     		lsls	r1, r3, #27
 3075 00a6 0ED5     		bpl	.L250
 485:src/console.c ****       LCD_power_on();
 3076              		.loc 2 485 7 is_stmt 1 view .LVU846
 3077 00a8 8A4B     		ldr	r3, .L359+36
 3078 00aa 9847     		blx	r3
 3079              	.LVL253:
 486:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3080              		.loc 2 486 7 view .LVU847
 3081 00ac 8A4B     		ldr	r3, .L359+40
 3082 00ae 9847     		blx	r3
 3083              	.LVL254:
 487:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3084              		.loc 2 487 7 view .LVU848
 3085 00b0 8A4B     		ldr	r3, .L359+44
 3086 00b2 9847     		blx	r3
 3087              	.LVL255:
 488:src/console.c **** 
 489:src/console.c ****       CLR_ST(STAT_OFF);
 3088              		.loc 2 489 7 view .LVU849
 3089 00b4 2368     		ldr	r3, [r4]
 490:src/console.c **** 
 491:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3090              		.loc 2 491 13 is_stmt 0 view .LVU850
 3091 00b6 8A4A     		ldr	r2, .L359+48
 489:src/console.c **** 
 3092              		.loc 2 489 7 view .LVU851
 3093 00b8 23F01003 		bic	r3, r3, #16
 3094 00bc 2360     		str	r3, [r4]
 3095              		.loc 2 491 7 is_stmt 1 view .LVU852
 3096              		.loc 2 491 13 is_stmt 0 view .LVU853
 3097 00be 9047     		blx	r2
 3098              	.LVL256:
ARM GAS  /tmp/ccwTS9FK.s 			page 83


 3099              		.loc 2 491 10 view .LVU854
 3100 00c0 08B9     		cbnz	r0, .L250
 492:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3101              		.loc 2 492 9 is_stmt 1 view .LVU855
 3102 00c2 884B     		ldr	r3, .L359+52
 3103 00c4 9847     		blx	r3
 3104              	.LVL257:
 3105              	.L250:
 493:src/console.c ****     }
 494:src/console.c **** 
 495:src/console.c ****     // Key is ready -> clear auto off timer
 496:src/console.c ****     //    if ( !key_empty() )
 497:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 498:src/console.c ****     // Fetch the key
 499:src/console.c ****     //  < 0 -> No key event
 500:src/console.c ****     //  > 0 -> Key pressed
 501:src/console.c ****     // == 0 -> Key released
 502:src/console.c ****     c = key_pop();
 3106              		.loc 2 502 5 view .LVU856
 3107              		.loc 2 502 9 is_stmt 0 view .LVU857
 3108 00c6 884B     		ldr	r3, .L359+56
 3109 00c8 9847     		blx	r3
 3110              	.LVL258:
 503:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 3111              		.loc 2 503 8 view .LVU858
 3112 00ca 6228     		cmp	r0, #98
 502:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 3113              		.loc 2 502 9 view .LVU859
 3114 00cc 0546     		mov	r5, r0
 3115              	.LVL259:
 3116              		.loc 2 503 5 is_stmt 1 view .LVU860
 3117              		.loc 2 503 8 is_stmt 0 view .LVU861
 3118 00ce 71D0     		beq	.L252
 3119              		.loc 2 503 29 discriminator 1 view .LVU862
 3120 00d0 0028     		cmp	r0, #0
 3121 00d2 6CDD     		ble	.L253
 504:src/console.c ****       reset_auto_off();
 3122              		.loc 2 504 7 is_stmt 1 view .LVU863
 3123 00d4 854B     		ldr	r3, .L359+60
 3124 00d6 9847     		blx	r3
 3125              	.LVL260:
 505:src/console.c ****       start_key_timer();
 3126              		.loc 2 505 7 view .LVU864
 3127              	.LBB147:
 3128              	.LBI147:
 271:src/console.c ****     start_ticks = get_rtc_ticks();
 3129              		.loc 2 271 6 view .LVU865
 3130              	.LBB148:
 272:src/console.c **** }
 3131              		.loc 2 272 5 view .LVU866
 272:src/console.c **** }
 3132              		.loc 2 272 19 is_stmt 0 view .LVU867
 3133 00d8 854B     		ldr	r3, .L359+64
 3134 00da 9847     		blx	r3
 3135              	.LVL261:
 272:src/console.c **** }
 3136              		.loc 2 272 17 view .LVU868
ARM GAS  /tmp/ccwTS9FK.s 			page 84


 3137 00dc 854B     		ldr	r3, .L359+68
 3138              	.LBE148:
 3139              	.LBE147:
 3140              	.LBB150:
 3141              	.LBB136:
  61:src/console.c **** 
 3142              		.loc 2 61 6 view .LVU869
 3143 00de 632D     		cmp	r5, #99
 3144              	.LBE136:
 3145              	.LBE150:
 3146              	.LBB151:
 3147              	.LBB149:
 272:src/console.c **** }
 3148              		.loc 2 272 17 view .LVU870
 3149 00e0 1860     		str	r0, [r3]
 3150              	.LBE149:
 3151              	.LBE151:
 506:src/console.c ****     }
 507:src/console.c ****     if (c >= 0) {
 3152              		.loc 2 507 5 is_stmt 1 view .LVU871
 508:src/console.c ****       remapped = remap(c);
 3153              		.loc 2 508 7 view .LVU872
 3154              	.LVL262:
 3155              	.LBB152:
 3156              	.LBI132:
  53:src/console.c **** 
 3157              		.loc 2 53 22 view .LVU873
 3158              	.LBB137:
  55:src/console.c **** 
 3159              		.loc 2 55 3 view .LVU874
 3160              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3161              		.loc 3 1 1 view .LVU875
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
ARM GAS  /tmp/ccwTS9FK.s 			page 85


  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3162              		.loc 3 59 3 view .LVU876
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
ARM GAS  /tmp/ccwTS9FK.s 			page 86


  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU, 14}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  96:src/keytran.c ****     {K_SETMENU, USER_MENU}, // select user menu
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3163              		.loc 3 117 3 view .LVU877
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
ARM GAS  /tmp/ccwTS9FK.s 			page 87


 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_MULTI, SETUMEN}, // Set up user menu
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3164              		.loc 3 175 1 view .LVU878
 176:src/keytran.c ****     {K_RELEASE, -1},
 177:src/keytran.c ****     // Top row of DM42 1--6
 178:src/keytran.c ****     {K00, -1},
 179:src/keytran.c ****     {K01, -1},
 180:src/keytran.c ****     {K02, -1},
 181:src/keytran.c ****     {K03, -1},
 182:src/keytran.c ****     {K04, -1},
 183:src/keytran.c ****     {K05, -1},
 184:src/keytran.c ****     // Next row of DM42 7--12
 185:src/keytran.c ****     {K10, -1},
 186:src/keytran.c ****     {K11, -1},
 187:src/keytran.c ****     {K12, -1},
 188:src/keytran.c ****     {K13, -1},
 189:src/keytran.c ****     {K14, -1},
 190:src/keytran.c ****     {K15, -1},
 191:src/keytran.c ****     // Third row of DM42 13--17
 192:src/keytran.c ****     {K20, -1},
 193:src/keytran.c ****     {K21, -1},
ARM GAS  /tmp/ccwTS9FK.s 			page 88


 194:src/keytran.c ****     {K22, -1},
 195:src/keytran.c ****     {K23, -1},
 196:src/keytran.c ****     {K24, -1},
 197:src/keytran.c ****     // Fourth row of DM42 18--22
 198:src/keytran.c ****     {K30, -1},
 199:src/keytran.c ****     {K31, -1},
 200:src/keytran.c ****     {K32, -1},
 201:src/keytran.c ****     {K33, -1},
 202:src/keytran.c ****     {K34, -1},
 203:src/keytran.c ****     // Fifth row of DM42 23--27
 204:src/keytran.c ****     {K40, -1},
 205:src/keytran.c ****     {K41, -1},
 206:src/keytran.c ****     {K42, -1},
 207:src/keytran.c ****     {K43, -1},
 208:src/keytran.c ****     {K44, -1},
 209:src/keytran.c ****     // Sixth row of DM42 28--32
 210:src/keytran.c ****     {K50, -1},
 211:src/keytran.c ****     {K51, -1},
 212:src/keytran.c ****     {K52, -1},
 213:src/keytran.c ****     {K53, -1},
 214:src/keytran.c ****     {K54, -1},
 215:src/keytran.c ****     // Last row of DM42 33--37
 216:src/keytran.c ****     {K60, -1},
 217:src/keytran.c ****     {K61, -1},
 218:src/keytran.c ****     {K62, -1},
 219:src/keytran.c ****     {K63, -1},
 220:src/keytran.c ****     {K64, -1},
 221:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 222:src/keytran.c ****     {K_NOP, -1},
 223:src/keytran.c ****     {K_NOP, -1},
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 227:src/keytran.c ****     {K_CMPLX, -1},
 228:src/keytran.c ****     {K_NOP, -1},
 229:src/keytran.c ****     {K_NOP, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c **** };
 232:src/keytran.c **** 
 233:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3165              		.loc 3 233 1 view .LVU879
  59:src/console.c **** 
 3166              		.loc 2 59 3 view .LVU880
  61:src/console.c **** 
 3167              		.loc 2 61 3 view .LVU881
  61:src/console.c **** 
 3168              		.loc 2 61 6 is_stmt 0 view .LVU882
 3169 00e2 00F02D81 		beq	.L333
  63:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3170              		.loc 2 63 3 is_stmt 1 view .LVU883
  63:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3171              		.loc 2 63 6 is_stmt 0 view .LVU884
 3172 00e6 2C2D     		cmp	r5, #44
 3173 00e8 00F0B580 		beq	.L307
 3174              	.LVL263:
 3175              	.L306:
  68:src/console.c ****     return mapping_running[c];
ARM GAS  /tmp/ccwTS9FK.s 			page 89


 3176              		.loc 2 68 3 is_stmt 1 view .LVU885
  68:src/console.c ****     return mapping_running[c];
 3177              		.loc 2 68 15 is_stmt 0 view .LVU886
 3178 00ec 824A     		ldr	r2, .L359+72
 3179 00ee 834B     		ldr	r3, .L359+76
 3180 00f0 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3181 00f4 1F68     		ldr	r7, [r3]
  68:src/console.c ****     return mapping_running[c];
 3182              		.loc 2 68 6 view .LVU887
 3183 00f6 59EA0707 		orrs	r7, r9, r7
 3184 00fa 40F0CB80 		bne	.L334
  72:src/console.c ****     switch (c) {
 3185              		.loc 2 72 3 is_stmt 1 view .LVU888
  72:src/console.c ****     switch (c) {
 3186              		.loc 2 72 6 is_stmt 0 view .LVU889
 3187 00fe 3368     		ldr	r3, [r6]
 3188 0100 632B     		cmp	r3, #99
 3189 0102 A5F12603 		sub	r3, r5, #38
 3190 0106 0AD0     		beq	.L335
  95:src/console.c ****     case KEY_F1:
 3191              		.loc 2 95 5 is_stmt 1 view .LVU890
 3192 0108 052B     		cmp	r3, #5
 3193 010a 00F25A81 		bhi	.L259
 3194 010e DFE813F0 		tbh	[pc, r3, lsl #1]
 3195              	.L275:
 3196 0112 A101     		.2byte	(.L280-.L275)/2
 3197 0114 AA01     		.2byte	(.L279-.L275)/2
 3198 0116 B301     		.2byte	(.L278-.L275)/2
 3199 0118 9301     		.2byte	(.L277-.L275)/2
 3200 011a 8001     		.2byte	(.L276-.L275)/2
 3201 011c 6601     		.2byte	(.L274-.L275)/2
 3202              		.p2align 1
 3203              	.L335:
  73:src/console.c ****     case KEY_F1:
 3204              		.loc 2 73 5 view .LVU891
 3205 011e 052B     		cmp	r3, #5
 3206 0120 00F24F81 		bhi	.L259
 3207 0124 DFE813F0 		tbh	[pc, r3, lsl #1]
 3208              	.L261:
 3209 0128 F101     		.2byte	(.L266-.L261)/2
 3210 012a E001     		.2byte	(.L265-.L261)/2
 3211 012c 2501     		.2byte	(.L264-.L261)/2
 3212 012e 2F01     		.2byte	(.L263-.L261)/2
 3213 0130 3901     		.2byte	(.L262-.L261)/2
 3214 0132 4301     		.2byte	(.L260-.L261)/2
 3215              	.LVL264:
 3216              		.p2align 1
 3217              	.L238:
  73:src/console.c ****     case KEY_F1:
 3218              		.loc 2 73 5 is_stmt 0 view .LVU892
 3219              	.LBE137:
 3220              	.LBE152:
 449:src/console.c ****     {
 3221              		.loc 2 449 10 is_stmt 1 view .LVU893
 449:src/console.c ****     {
 3222              		.loc 2 449 15 is_stmt 0 view .LVU894
 3223 0134 2568     		ldr	r5, [r4]
ARM GAS  /tmp/ccwTS9FK.s 			page 90


 449:src/console.c ****     {
 3224              		.loc 2 449 13 view .LVU895
 3225 0136 15F40075 		ands	r5, r5, #512
 3226 013a A4D1     		bne	.L239
 449:src/console.c ****     {
 3227              		.loc 2 449 35 discriminator 1 view .LVU896
 3228 013c 704B     		ldr	r3, .L359+80
 3229 013e 9847     		blx	r3
 3230              	.LVL265:
 449:src/console.c ****     {
 3231              		.loc 2 449 32 discriminator 1 view .LVU897
 3232 0140 0028     		cmp	r0, #0
 3233 0142 A0D0     		beq	.L239
 451:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3234              		.loc 2 451 7 is_stmt 1 view .LVU898
 3235 0144 2368     		ldr	r3, [r4]
 452:src/console.c ****       sys_sleep();
 3236              		.loc 2 452 7 is_stmt 0 view .LVU899
 3237 0146 6F4A     		ldr	r2, .L359+84
 451:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3238              		.loc 2 451 7 view .LVU900
 3239 0148 23F00203 		bic	r3, r3, #2
 452:src/console.c ****       sys_sleep();
 3240              		.loc 2 452 7 view .LVU901
 3241 014c 2846     		mov	r0, r5
 3242 014e 6421     		movs	r1, #100
 451:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3243              		.loc 2 451 7 view .LVU902
 3244 0150 2360     		str	r3, [r4]
 452:src/console.c ****       sys_sleep();
 3245              		.loc 2 452 7 is_stmt 1 view .LVU903
 3246 0152 9047     		blx	r2
 3247              	.LVL266:
 453:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 3248              		.loc 2 453 7 view .LVU904
 3249 0154 5E4B     		ldr	r3, .L359+32
 3250 0156 9847     		blx	r3
 3251              	.LVL267:
 454:src/console.c **** 	key_push (K_HEARTBEAT);
 3252              		.loc 2 454 7 view .LVU905
 454:src/console.c **** 	key_push (K_HEARTBEAT);
 3253              		.loc 2 454 11 is_stmt 0 view .LVU906
 3254 0158 6B4B     		ldr	r3, .L359+88
 3255 015a 2846     		mov	r0, r5
 3256 015c 9847     		blx	r3
 3257              	.LVL268:
 454:src/console.c **** 	key_push (K_HEARTBEAT);
 3258              		.loc 2 454 10 view .LVU907
 3259 015e 48B1     		cbz	r0, .L243
 455:src/console.c **** 	if (Pause > 0) Pause--;
 3260              		.loc 2 455 2 is_stmt 1 view .LVU908
 3261 0160 6A4B     		ldr	r3, .L359+92
 3262 0162 6220     		movs	r0, #98
 3263 0164 9847     		blx	r3
 3264              	.LVL269:
 456:src/console.c ****       }
 3265              		.loc 2 456 2 view .LVU909
ARM GAS  /tmp/ccwTS9FK.s 			page 91


 456:src/console.c ****       }
 3266              		.loc 2 456 12 is_stmt 0 view .LVU910
 3267 0166 644B     		ldr	r3, .L359+72
 3268 0168 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 456:src/console.c ****       }
 3269              		.loc 2 456 5 view .LVU911
 3270 016a 1AB1     		cbz	r2, .L243
 456:src/console.c ****       }
 3271              		.loc 2 456 17 is_stmt 1 discriminator 1 view .LVU912
 456:src/console.c ****       }
 3272              		.loc 2 456 22 is_stmt 0 discriminator 1 view .LVU913
 3273 016c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3274 016e 013A     		subs	r2, r2, #1
 3275 0170 D2B2     		uxtb	r2, r2
 3276 0172 1A70     		strb	r2, [r3]
 3277              	.L243:
 458:src/console.c ****     }
 3278              		.loc 2 458 7 is_stmt 1 view .LVU914
 3279 0174 664B     		ldr	r3, .L359+96
 3280 0176 0020     		movs	r0, #0
 3281 0178 9847     		blx	r3
 3282              	.LVL270:
 462:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3283              		.loc 2 462 5 view .LVU915
 462:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3284              		.loc 2 462 9 is_stmt 0 view .LVU916
 3285 017a 2368     		ldr	r3, [r4]
 462:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3286              		.loc 2 462 8 view .LVU917
 3287 017c 9D05     		lsls	r5, r3, #22
 3288 017e 85D5     		bpl	.L336
 3289              	.L245:
 463:src/console.c ****         // Going to off mode
 3290              		.loc 2 463 7 is_stmt 1 view .LVU918
 463:src/console.c ****         // Going to off mode
 3291              		.loc 2 463 12 is_stmt 0 view .LVU919
 3292 0180 2568     		ldr	r5, [r4]
 463:src/console.c ****         // Going to off mode
 3293              		.loc 2 463 10 view .LVU920
 3294 0182 15F00405 		ands	r5, r5, #4
 3295 0186 7FF472AF 		bne	.L237
 465:src/console.c ****         draw_power_off_image(1);
 3296              		.loc 2 465 9 is_stmt 1 view .LVU921
 3297 018a 624B     		ldr	r3, .L359+100
 3298 018c 2846     		mov	r0, r5
 3299 018e 9847     		blx	r3
 3300              	.LVL271:
 466:src/console.c **** 
 3301              		.loc 2 466 9 view .LVU922
 3302 0190 614B     		ldr	r3, .L359+104
 3303 0192 0120     		movs	r0, #1
 3304 0194 9847     		blx	r3
 3305              	.LVL272:
 468:src/console.c ****         SET_ST(STAT_SUSPENDED);
 3306              		.loc 2 468 9 view .LVU923
 3307 0196 614B     		ldr	r3, .L359+108
 3308 0198 2846     		mov	r0, r5
ARM GAS  /tmp/ccwTS9FK.s 			page 92


 3309 019a 9847     		blx	r3
 3310              	.LVL273:
 469:src/console.c ****         SET_ST(STAT_OFF);
 3311              		.loc 2 469 9 view .LVU924
 3312 019c 2368     		ldr	r3, [r4]
 3313 019e 43F00403 		orr	r3, r3, #4
 3314 01a2 2360     		str	r3, [r4]
 470:src/console.c ****       }
 3315              		.loc 2 470 9 view .LVU925
 3316 01a4 2368     		ldr	r3, [r4]
 3317 01a6 43F01003 		orr	r3, r3, #16
 3318 01aa 2360     		str	r3, [r4]
 3319 01ac 5FE7     		b	.L237
 3320              	.LVL274:
 3321              	.L253:
 507:src/console.c ****       remapped = remap(c);
 3322              		.loc 2 507 5 view .LVU926
 507:src/console.c ****       remapped = remap(c);
 3323              		.loc 2 507 8 is_stmt 0 view .LVU927
 3324 01ae 7FF45EAF 		bne	.L237
 3325 01b2 9BE7     		b	.L306
 3326              	.L252:
 507:src/console.c ****       remapped = remap(c);
 3327              		.loc 2 507 5 is_stmt 1 view .LVU928
 3328              		.loc 2 508 7 view .LVU929
 3329              	.LVL275:
 3330              	.LBB153:
  53:src/console.c **** 
 3331              		.loc 2 53 22 view .LVU930
 3332              	.LBB138:
  55:src/console.c **** 
 3333              		.loc 2 55 3 view .LVU931
   1:src/keytran.c ****     {K_RELEASE, -1},
 3334              		.loc 3 1 1 view .LVU932
  59:src/keytran.c ****     {K_RELEASE, -1},
 3335              		.loc 3 59 3 view .LVU933
 117:src/keytran.c ****     {K_RELEASE, -1},
 3336              		.loc 3 117 3 view .LVU934
 175:src/keytran.c ****     {K_RELEASE, -1},
 3337              		.loc 3 175 1 view .LVU935
 3338              		.loc 3 233 1 view .LVU936
  59:src/console.c **** 
 3339              		.loc 2 59 3 view .LVU937
  59:src/console.c **** 
 3340              		.loc 2 59 23 view .LVU938
  59:src/console.c **** 
 3341              		.loc 2 59 30 is_stmt 0 view .LVU939
 3342 01b4 5A4B     		ldr	r3, .L359+112
 3343              	.LVL276:
 3344              	.L331:
  59:src/console.c **** 
 3345              		.loc 2 59 30 view .LVU940
 3346 01b6 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3347              	.LVL277:
  59:src/console.c **** 
 3348              		.loc 2 59 30 view .LVU941
 3349 01b8 93E80300 		ldm	r3, {r0, r1}
ARM GAS  /tmp/ccwTS9FK.s 			page 93


 3350 01bc 0DF1080A 		add	r10, sp, #8
 3351 01c0 8AE80300 		stm	r10, {r0, r1}
 3352 01c4 0F46     		mov	r7, r1
 3353              	.LVL278:
 3354              	.L255:
  59:src/console.c **** 
 3355              		.loc 2 59 30 view .LVU942
 3356              	.LBE138:
 3357              	.LBE153:
 509:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3358              		.loc 2 509 7 is_stmt 1 view .LVU943
 3359              		.loc 2 509 10 is_stmt 0 view .LVU944
 3360 01c6 2F2D     		cmp	r5, #47
 3361 01c8 27D0     		beq	.L337
 3362              	.LVL279:
 3363              	.L296:
 510:src/console.c **** 	set_menu ( remapped.shift );
 511:src/console.c **** 	display_current_menu ();
 512:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 513:src/console.c **** 	case SHIFT_F:
 514:src/console.c **** 	  remapped = f_shift; // F -> N
 515:src/console.c **** 	  break;
 516:src/console.c **** 	case SHIFT_G:
 517:src/console.c **** 	  remapped = g_shift; // G -> N
 518:src/console.c **** 	  break;
 519:src/console.c **** 	case SHIFT_H:
 520:src/console.c **** 	  remapped = h_shift; // H -> N
 521:src/console.c **** 	default:
 522:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 523:src/console.c **** 	}
 524:src/console.c ****       }
 525:src/console.c ****       if (remapped.key_34s == K_SYS) {
 3364              		.loc 2 525 7 is_stmt 1 view .LVU945
 3365              		.loc 2 525 10 is_stmt 0 view .LVU946
 3366 01ca 302D     		cmp	r5, #48
 3367 01cc 17D1     		bne	.L303
 526:src/console.c **** 	SET_ST(STAT_MENU);
 3368              		.loc 2 526 2 is_stmt 1 view .LVU947
 3369 01ce 2368     		ldr	r3, [r4]
 527:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 3370              		.loc 2 527 2 is_stmt 0 view .LVU948
 3371 01d0 544D     		ldr	r5, .L359+116
 3372              	.LVL280:
 3373              		.loc 2 527 2 view .LVU949
 3374 01d2 5548     		ldr	r0, .L359+120
 3375 01d4 0022     		movs	r2, #0
 526:src/console.c **** 	SET_ST(STAT_MENU);
 3376              		.loc 2 526 2 view .LVU950
 3377 01d6 43F04003 		orr	r3, r3, #64
 3378              		.loc 2 527 2 view .LVU951
 3379 01da 1146     		mov	r1, r2
 526:src/console.c **** 	SET_ST(STAT_MENU);
 3380              		.loc 2 526 2 view .LVU952
 3381 01dc 2360     		str	r3, [r4]
 3382              		.loc 2 527 2 is_stmt 1 view .LVU953
 3383 01de A847     		blx	r5
 3384              	.LVL281:
ARM GAS  /tmp/ccwTS9FK.s 			page 94


 528:src/console.c **** 	CLR_ST(STAT_MENU);
 3385              		.loc 2 528 2 view .LVU954
 529:src/console.c **** 	remapped =  no_key;
 3386              		.loc 2 529 11 is_stmt 0 view .LVU955
 3387 01e0 524B     		ldr	r3, .L359+124
 528:src/console.c **** 	CLR_ST(STAT_MENU);
 3388              		.loc 2 528 2 view .LVU956
 3389 01e2 2268     		ldr	r2, [r4]
 3390              		.loc 2 529 11 view .LVU957
 3391 01e4 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3392 01e6 93E80300 		ldm	r3, {r0, r1}
 528:src/console.c **** 	CLR_ST(STAT_MENU);
 3393              		.loc 2 528 2 view .LVU958
 3394 01ea 22F04002 		bic	r2, r2, #64
 3395 01ee 2260     		str	r2, [r4]
 3396              		.loc 2 529 2 is_stmt 1 view .LVU959
 3397              	.LVL282:
 3398              		.loc 2 529 11 is_stmt 0 view .LVU960
 3399 01f0 04AA     		add	r2, sp, #16
 3400 01f2 02E90300 		stmdb	r2, {r0, r1}
 3401              	.LBB154:
 3402              	.LBB155:
 111:src/menu.c    **** }
 3403              		.loc 1 111 3 view .LVU961
 3404 01f6 3068     		ldr	r0, [r6]
 3405              	.LBE155:
 3406              	.LBE154:
 3407              		.loc 2 529 11 view .LVU962
 3408 01f8 0F46     		mov	r7, r1
 3409              	.LVL283:
 530:src/console.c **** 	display_current_menu();
 3410              		.loc 2 530 2 is_stmt 1 view .LVU963
 3411              	.LBB157:
 3412              	.LBI154:
 110:src/menu.c    ****   display_menu (current_menu);
 3413              		.loc 1 110 6 view .LVU964
 3414              	.LBB156:
 111:src/menu.c    **** }
 3415              		.loc 1 111 3 view .LVU965
 3416 01fa FFF7FEFF 		bl	display_menu
 3417              	.LVL284:
 3418              	.L303:
 111:src/menu.c    **** }
 3419              		.loc 1 111 3 is_stmt 0 view .LVU966
 3420              	.LBE156:
 3421              	.LBE157:
 531:src/console.c ****       }
 532:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 3422              		.loc 2 532 7 is_stmt 1 view .LVU967
 3423              		.loc 2 532 10 is_stmt 0 view .LVU968
 3424 01fe 312D     		cmp	r5, #49
 3425 0200 2AD0     		beq	.L256
 533:src/console.c **** 	remapped = do_multi (remapped);
 534:src/console.c **** 	display_current_menu();
 535:src/console.c ****       }
 536:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 3426              		.loc 2 536 7 is_stmt 1 view .LVU969
ARM GAS  /tmp/ccwTS9FK.s 			page 95


 3427              		.loc 2 536 10 is_stmt 0 view .LVU970
 3428 0202 322D     		cmp	r5, #50
 3429 0204 40D0     		beq	.L305
 3430              	.LVL285:
 3431              	.L308:
 3432              		.loc 2 536 10 view .LVU971
 3433 0206 0DF1080A 		add	r10, sp, #8
 3434              	.L290:
 3435              	.LVL286:
 537:src/console.c ****       process_keycode_with_shift(remapped);
 3436              		.loc 2 537 7 is_stmt 1 view .LVU972
 3437              		.loc 2 537 7 is_stmt 0 view .LVU973
 3438 020a 8DF80850 		strb	r5, [sp, #8]
 3439 020e 0397     		str	r7, [sp, #12]
 3440 0210 9AE80300 		ldm	r10, {r0, r1}
 3441 0214 FFF7FEFF 		bl	process_keycode_with_shift
 3442              	.LVL287:
 3443 0218 29E7     		b	.L237
 3444              	.L337:
 510:src/console.c **** 	display_current_menu ();
 3445              		.loc 2 510 2 is_stmt 1 view .LVU974
 3446              	.LVL288:
 3447              	.LBB158:
 3448              	.LBI158:
  86:src/menu.c    ****   int m = current_menu;
 3449              		.loc 1 86 6 view .LVU975
 3450              	.LBB159:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3451              		.loc 1 87 3 view .LVU976
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3452              		.loc 1 87 7 is_stmt 0 view .LVU977
 3453 021a 3368     		ldr	r3, [r6]
 3454              	.LVL289:
  88:src/menu.c    ****     current_menu = default_menu;
 3455              		.loc 1 88 3 is_stmt 1 view .LVU978
  88:src/menu.c    ****     current_menu = default_menu;
 3456              		.loc 1 88 6 is_stmt 0 view .LVU979
 3457 021c BB42     		cmp	r3, r7
 3458 021e 00F09180 		beq	.L338
  91:src/menu.c    ****     current_menu = last_menu;
 3459              		.loc 1 91 8 is_stmt 1 view .LVU980
  91:src/menu.c    ****     current_menu = last_menu;
 3460              		.loc 1 91 11 is_stmt 0 view .LVU981
 3461 0222 7A1C     		adds	r2, r7, #1
 3462 0224 00F09C80 		beq	.L339
 3463              	.LVL290:
 3464              	.L297:
  95:src/menu.c    ****   }
 3465              		.loc 1 95 5 is_stmt 1 view .LVU982
  95:src/menu.c    ****   }
 3466              		.loc 1 95 18 is_stmt 0 view .LVU983
 3467 0228 3760     		str	r7, [r6]
 3468              	.LVL291:
 3469              	.L300:
  97:src/menu.c    **** }
 3470              		.loc 1 97 3 is_stmt 1 view .LVU984
  97:src/menu.c    **** }
ARM GAS  /tmp/ccwTS9FK.s 			page 96


 3471              		.loc 1 97 6 is_stmt 0 view .LVU985
 3472 022a 092B     		cmp	r3, #9
 3473 022c 03D0     		beq	.L301
  97:src/menu.c    **** }
 3474              		.loc 1 97 17 view .LVU986
 3475 022e 102B     		cmp	r3, #16
 3476 0230 01D0     		beq	.L301
 3477              	.L298:
  97:src/menu.c    **** }
 3478              		.loc 1 97 32 is_stmt 1 view .LVU987
  97:src/menu.c    **** }
 3479              		.loc 1 97 42 is_stmt 0 view .LVU988
 3480 0232 3F4A     		ldr	r2, .L359+128
 3481 0234 1360     		str	r3, [r2]
 3482              	.L301:
  97:src/menu.c    **** }
 3483              		.loc 1 97 42 view .LVU989
 3484              	.LBE159:
 3485              	.LBE158:
 511:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 3486              		.loc 2 511 2 is_stmt 1 view .LVU990
 3487              	.LBB164:
 3488              	.LBI164:
 110:src/menu.c    ****   display_menu (current_menu);
 3489              		.loc 1 110 6 view .LVU991
 3490              	.LBB165:
 111:src/menu.c    **** }
 3491              		.loc 1 111 3 view .LVU992
 3492 0236 3846     		mov	r0, r7
 3493 0238 FFF7FEFF 		bl	display_menu
 3494              	.LVL292:
 3495              	.LBE165:
 3496              	.LBE164:
 512:src/console.c **** 	case SHIFT_F:
 3497              		.loc 2 512 2 view .LVU993
 512:src/console.c **** 	case SHIFT_F:
 3498              		.loc 2 512 10 is_stmt 0 view .LVU994
 3499 023c FFF7FEFF 		bl	cur_shift
 3500              	.LVL293:
 512:src/console.c **** 	case SHIFT_F:
 3501              		.loc 2 512 2 view .LVU995
 3502 0240 0228     		cmp	r0, #2
 3503 0242 00F08580 		beq	.L302
 514:src/console.c **** 	  break;
 3504              		.loc 2 514 4 is_stmt 1 view .LVU996
 514:src/console.c **** 	  break;
 3505              		.loc 2 514 13 is_stmt 0 view .LVU997
 3506 0246 3B4B     		ldr	r3, .L359+132
 3507 0248 93E80300 		ldm	r3, {r0, r1}
 3508 024c 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3509              	.LVL294:
 514:src/console.c **** 	  break;
 3510              		.loc 2 514 13 view .LVU998
 3511 024e 8AE80300 		stm	r10, {r0, r1}
 3512 0252 0F46     		mov	r7, r1
 3513              	.LVL295:
 515:src/console.c **** 	case SHIFT_G:
ARM GAS  /tmp/ccwTS9FK.s 			page 97


 3514              		.loc 2 515 4 is_stmt 1 view .LVU999
 3515 0254 B9E7     		b	.L296
 3516              	.LVL296:
 3517              	.L307:
 3518              	.LBB166:
 3519              	.LBB139:
 3520              	.LBB134:
  65:src/console.c ****   }
 3521              		.loc 2 65 12 is_stmt 0 view .LVU1000
 3522 0256 0C27     		movs	r7, #12
 3523              	.LVL297:
 3524              	.L256:
  65:src/console.c ****   }
 3525              		.loc 2 65 12 view .LVU1001
 3526              	.LBE134:
 3527              	.LBE139:
 3528              	.LBE166:
 533:src/console.c **** 	display_current_menu();
 3529              		.loc 2 533 2 is_stmt 1 view .LVU1002
 533:src/console.c **** 	display_current_menu();
 3530              		.loc 2 533 13 is_stmt 0 view .LVU1003
 3531 0258 3123     		movs	r3, #49
 3532 025a 0397     		str	r7, [sp, #12]
 3533 025c 8DF80830 		strb	r3, [sp, #8]
 3534 0260 6D46     		mov	r5, sp
 3535 0262 0DF1080A 		add	r10, sp, #8
 3536 0266 9AE80600 		ldm	r10, {r1, r2}
 3537 026a 2846     		mov	r0, r5
 3538 026c FFF7FEFF 		bl	do_multi
 3539              	.LVL298:
 3540 0270 95E80300 		ldm	r5, {r0, r1}
 3541 0274 8AE80300 		stm	r10, {r0, r1}
 3542 0278 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 3543              	.LVL299:
 3544              	.LBB167:
 3545              	.LBB168:
 111:src/menu.c    **** }
 3546              		.loc 1 111 3 view .LVU1004
 3547 027c 3068     		ldr	r0, [r6]
 3548              	.LBE168:
 3549              	.LBE167:
 533:src/console.c **** 	display_current_menu();
 3550              		.loc 2 533 13 view .LVU1005
 3551 027e 039F     		ldr	r7, [sp, #12]
 3552              	.LVL300:
 534:src/console.c ****       }
 3553              		.loc 2 534 2 is_stmt 1 view .LVU1006
 3554              	.LBB170:
 3555              	.LBI167:
 110:src/menu.c    ****   display_menu (current_menu);
 3556              		.loc 1 110 6 view .LVU1007
 3557              	.LBB169:
 111:src/menu.c    **** }
 3558              		.loc 1 111 3 view .LVU1008
 3559 0280 FFF7FEFF 		bl	display_menu
 3560              	.LVL301:
 111:src/menu.c    **** }
ARM GAS  /tmp/ccwTS9FK.s 			page 98


 3561              		.loc 1 111 3 is_stmt 0 view .LVU1009
 3562              	.LBE169:
 3563              	.LBE170:
 536:src/console.c ****       process_keycode_with_shift(remapped);
 3564              		.loc 2 536 7 is_stmt 1 view .LVU1010
 536:src/console.c ****       process_keycode_with_shift(remapped);
 3565              		.loc 2 536 10 is_stmt 0 view .LVU1011
 3566 0284 322D     		cmp	r5, #50
 3567 0286 BED1     		bne	.L308
 3568              	.LVL302:
 3569              	.L305:
 538:src/console.c ****     }
 539:src/console.c ****   }
 540:src/console.c ****   save_ram_file(0);
 3570              		.loc 2 540 3 is_stmt 1 view .LVU1012
 3571 0288 0020     		movs	r0, #0
 541:src/console.c ****   //  free_storage();
 542:src/console.c ****   return;
 543:src/console.c **** }
 3572              		.loc 2 543 1 is_stmt 0 view .LVU1013
 3573 028a 05B0     		add	sp, sp, #20
 3574              		.cfi_remember_state
 3575              		.cfi_def_cfa_offset 36
 3576              		@ sp needed
 3577 028c BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3578              		.cfi_restore 14
 3579              		.cfi_restore 11
 3580              		.cfi_restore 10
 3581              		.cfi_restore 9
 3582              		.cfi_restore 8
 3583              		.cfi_restore 7
 3584              		.cfi_restore 6
 3585              		.cfi_restore 5
 3586              		.cfi_restore 4
 3587              		.cfi_def_cfa_offset 0
 3588              	.LVL303:
 540:src/console.c ****   //  free_storage();
 3589              		.loc 2 540 3 view .LVU1014
 3590 0290 FFF7FEBF 		b	save_ram_file
 3591              	.LVL304:
 3592              	.L334:
 3593              		.cfi_restore_state
 3594              	.LBB171:
 3595              	.LBB140:
  69:src/console.c ****   }
 3596              		.loc 2 69 5 is_stmt 1 view .LVU1015
  69:src/console.c ****   }
 3597              		.loc 2 69 27 is_stmt 0 view .LVU1016
 3598 0294 284B     		ldr	r3, .L359+136
 3599              	.L330:
 143:src/console.c ****     break;
 3600              		.loc 2 143 26 view .LVU1017
 3601 0296 03EBC502 		add	r2, r3, r5, lsl #3
 3602 029a 92E80300 		ldm	r2, {r0, r1}
 3603 029e 0DF1080A 		add	r10, sp, #8
 3604 02a2 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 3605              	.LVL305:
ARM GAS  /tmp/ccwTS9FK.s 			page 99


 143:src/console.c ****     break;
 3606              		.loc 2 143 26 view .LVU1018
 3607 02a6 0F46     		mov	r7, r1
 3608              	.LVL306:
 143:src/console.c ****     break;
 3609              		.loc 2 143 26 view .LVU1019
 3610 02a8 8AE80300 		stm	r10, {r0, r1}
 3611 02ac 8BE7     		b	.L255
 3612              	.L360:
 3613 02ae 00BF     		.align	2
 3614              	.L359:
 3615 02b0 00000000 		.word	StateWhileOn
 3616 02b4 00000000 		.word	DispMsg
 3617 02b8 00200010 		.word	268443648
 3618 02bc 00000000 		.word	.LANCHOR1
 3619 02c0 00000000 		.word	run_menu_item
 3620 02c4 00000000 		.word	menu_line_str
 3621 02c8 31020008 		.word	134218289
 3622 02cc 00000000 		.word	JustDisplayed
 3623 02d0 19040008 		.word	134218777
 3624 02d4 19020008 		.word	134218265
 3625 02d8 91030008 		.word	134218641
 3626 02dc E5020008 		.word	134218469
 3627 02e0 59020008 		.word	134218329
 3628 02e4 35020008 		.word	134218293
 3629 02e8 89030008 		.word	134218633
 3630 02ec B9030008 		.word	134218681
 3631 02f0 B9040008 		.word	134218937
 3632 02f4 00000000 		.word	.LANCHOR9
 3633 02f8 00000000 		.word	Pause
 3634 02fc 00000000 		.word	Running
 3635 0300 7D030008 		.word	134218621
 3636 0304 F9030008 		.word	134218745
 3637 0308 01040008 		.word	134218753
 3638 030c 81030008 		.word	134218625
 3639 0310 F5030008 		.word	134218741
 3640 0314 55020008 		.word	134218325
 3641 0318 2D040008 		.word	134218797
 3642 031c 1D020008 		.word	134218269
 3643 0320 00000000 		.word	.LANCHOR22
 3644 0324 59030008 		.word	134218585
 3645 0328 00000000 		.word	.LANCHOR21
 3646 032c 00000000 		.word	.LANCHOR11
 3647 0330 00000000 		.word	.LANCHOR3
 3648 0334 00000000 		.word	.LANCHOR12
 3649 0338 00000000 		.word	.LANCHOR15
 3650 033c 00000000 		.word	.LANCHOR4
 3651              	.LVL307:
 3652              	.L333:
  61:src/console.c **** 
 3653              		.loc 2 61 16 is_stmt 1 view .LVU1020
  61:src/console.c **** 
 3654              		.loc 2 61 23 is_stmt 0 view .LVU1021
 3655 0340 C84B     		ldr	r3, .L361
 3656 0342 38E7     		b	.L331
 3657              	.LVL308:
 3658              	.L338:
ARM GAS  /tmp/ccwTS9FK.s 			page 100


  61:src/console.c **** 
 3659              		.loc 2 61 23 view .LVU1022
 3660              	.LBE140:
 3661              	.LBE171:
 3662              	.LBB172:
 3663              	.LBB160:
  89:src/menu.c    ****   }
 3664              		.loc 1 89 5 is_stmt 1 view .LVU1023
  89:src/menu.c    ****   }
 3665              		.loc 1 89 18 is_stmt 0 view .LVU1024
 3666 0344 C84B     		ldr	r3, .L361+4
 3667              	.LVL309:
  89:src/menu.c    ****   }
 3668              		.loc 1 89 18 view .LVU1025
 3669 0346 1A68     		ldr	r2, [r3]
 3670 0348 3260     		str	r2, [r6]
 3671              	.LVL310:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3672              		.loc 1 87 7 view .LVU1026
 3673 034a 3B46     		mov	r3, r7
  89:src/menu.c    ****   }
 3674              		.loc 1 89 18 view .LVU1027
 3675 034c 1746     		mov	r7, r2
 3676              	.LVL311:
  89:src/menu.c    ****   }
 3677              		.loc 1 89 18 view .LVU1028
 3678 034e 6CE7     		b	.L300
 3679              	.LVL312:
 3680              	.L302:
  89:src/menu.c    ****   }
 3681              		.loc 1 89 18 view .LVU1029
 3682              	.LBE160:
 3683              	.LBE172:
 517:src/console.c **** 	  break;
 3684              		.loc 2 517 4 is_stmt 1 view .LVU1030
 517:src/console.c **** 	  break;
 3685              		.loc 2 517 13 is_stmt 0 view .LVU1031
 3686 0350 C64B     		ldr	r3, .L361+8
 3687 0352 93E80300 		ldm	r3, {r0, r1}
 3688 0356 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3689              	.LVL313:
 517:src/console.c **** 	  break;
 3690              		.loc 2 517 13 view .LVU1032
 3691 0358 8AE80300 		stm	r10, {r0, r1}
 3692 035c 0F46     		mov	r7, r1
 3693              	.LVL314:
 518:src/console.c **** 	case SHIFT_H:
 3694              		.loc 2 518 4 is_stmt 1 view .LVU1033
 3695 035e 34E7     		b	.L296
 3696              	.LVL315:
 3697              	.L339:
 3698              	.LBB173:
 3699              	.LBB161:
  92:src/menu.c    ****   }
 3700              		.loc 1 92 5 view .LVU1034
  92:src/menu.c    ****   }
 3701              		.loc 1 92 18 is_stmt 0 view .LVU1035
ARM GAS  /tmp/ccwTS9FK.s 			page 101


 3702 0360 C34A     		ldr	r2, .L361+12
 3703 0362 1768     		ldr	r7, [r2]
 3704              	.LVL316:
  92:src/menu.c    ****   }
 3705              		.loc 1 92 18 view .LVU1036
 3706 0364 3760     		str	r7, [r6]
 3707 0366 60E7     		b	.L300
 3708              	.LVL317:
 3709              	.L268:
  92:src/menu.c    ****   }
 3710              		.loc 1 92 18 view .LVU1037
 3711              	.LBE161:
 3712              	.LBE173:
 3713              	.LBB174:
 3714              	.LBB141:
  79:src/console.c ****     case KEY_F3:
 3715              		.loc 2 79 7 is_stmt 1 view .LVU1038
  79:src/console.c ****     case KEY_F3:
 3716              		.loc 2 79 11 is_stmt 0 view .LVU1039
 3717 0368 FFF7FEFF 		bl	cur_shift
 3718              	.LVL318:
  79:src/console.c ****     case KEY_F3:
 3719              		.loc 2 79 10 view .LVU1040
 3720 036c 0128     		cmp	r0, #1
 3721 036e 00F0CA81 		beq	.L340
 3722              	.L264:
  81:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 3723              		.loc 2 81 7 is_stmt 1 view .LVU1041
  81:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 3724              		.loc 2 81 11 is_stmt 0 view .LVU1042
 3725 0372 FFF7FEFF 		bl	cur_shift
 3726              	.LVL319:
  81:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 3727              		.loc 2 81 10 view .LVU1043
 3728 0376 0028     		cmp	r0, #0
 3729 0378 00F00F81 		beq	.L341
  82:src/console.c ****     case KEY_F4:
 3730              		.loc 2 82 7 is_stmt 1 view .LVU1044
  82:src/console.c ****     case KEY_F4:
 3731              		.loc 2 82 11 is_stmt 0 view .LVU1045
 3732 037c FFF7FEFF 		bl	cur_shift
 3733              	.LVL320:
  82:src/console.c ****     case KEY_F4:
 3734              		.loc 2 82 10 view .LVU1046
 3735 0380 0128     		cmp	r0, #1
 3736 0382 00F0B481 		beq	.L342
 3737              	.L263:
  84:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 3738              		.loc 2 84 7 is_stmt 1 view .LVU1047
  84:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 3739              		.loc 2 84 11 is_stmt 0 view .LVU1048
 3740 0386 FFF7FEFF 		bl	cur_shift
 3741              	.LVL321:
  84:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 3742              		.loc 2 84 10 view .LVU1049
 3743 038a 0028     		cmp	r0, #0
 3744 038c 00F0F980 		beq	.L343
ARM GAS  /tmp/ccwTS9FK.s 			page 102


  85:src/console.c ****     case KEY_F5:
 3745              		.loc 2 85 7 is_stmt 1 view .LVU1050
  85:src/console.c ****     case KEY_F5:
 3746              		.loc 2 85 11 is_stmt 0 view .LVU1051
 3747 0390 FFF7FEFF 		bl	cur_shift
 3748              	.LVL322:
  85:src/console.c ****     case KEY_F5:
 3749              		.loc 2 85 10 view .LVU1052
 3750 0394 0128     		cmp	r0, #1
 3751 0396 00F08781 		beq	.L344
 3752              	.L262:
  87:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 3753              		.loc 2 87 7 is_stmt 1 view .LVU1053
  87:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 3754              		.loc 2 87 11 is_stmt 0 view .LVU1054
 3755 039a FFF7FEFF 		bl	cur_shift
 3756              	.LVL323:
  87:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 3757              		.loc 2 87 10 view .LVU1055
 3758 039e 0028     		cmp	r0, #0
 3759 03a0 00F0E380 		beq	.L345
  88:src/console.c ****     case KEY_F6:
 3760              		.loc 2 88 7 is_stmt 1 view .LVU1056
  88:src/console.c ****     case KEY_F6:
 3761              		.loc 2 88 11 is_stmt 0 view .LVU1057
 3762 03a4 FFF7FEFF 		bl	cur_shift
 3763              	.LVL324:
  88:src/console.c ****     case KEY_F6:
 3764              		.loc 2 88 10 view .LVU1058
 3765 03a8 0128     		cmp	r0, #1
 3766 03aa 00F08981 		beq	.L346
 3767              	.L260:
  90:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 3768              		.loc 2 90 7 is_stmt 1 view .LVU1059
  90:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 3769              		.loc 2 90 11 is_stmt 0 view .LVU1060
 3770 03ae FFF7FEFF 		bl	cur_shift
 3771              	.LVL325:
  90:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 3772              		.loc 2 90 10 view .LVU1061
 3773 03b2 0028     		cmp	r0, #0
 3774 03b4 00F0CD80 		beq	.L347
  91:src/console.c ****     }
 3775              		.loc 2 91 7 is_stmt 1 view .LVU1062
  91:src/console.c ****     }
 3776              		.loc 2 91 11 is_stmt 0 view .LVU1063
 3777 03b8 FFF7FEFF 		bl	cur_shift
 3778              	.LVL326:
  91:src/console.c ****     }
 3779              		.loc 2 91 10 view .LVU1064
 3780 03bc 0128     		cmp	r0, #1
 3781 03be 00F08B81 		beq	.L348
 3782              	.L259:
 117:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 3783              		.loc 2 117 3 is_stmt 1 view .LVU1065
 117:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 3784              		.loc 2 117 8 is_stmt 0 view .LVU1066
ARM GAS  /tmp/ccwTS9FK.s 			page 103


 3785 03c2 FFF7FEFF 		bl	get_alpha_state
 3786              	.LVL327:
 117:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 3787              		.loc 2 117 6 view .LVU1067
 3788 03c6 0028     		cmp	r0, #0
 3789 03c8 64D0     		beq	.L288
 118:src/console.c ****       switch (cur_shift()) { 
 3790              		.loc 2 118 5 is_stmt 1 view .LVU1068
 118:src/console.c ****       switch (cur_shift()) { 
 3791              		.loc 2 118 8 is_stmt 0 view .LVU1069
 3792 03ca 1C2D     		cmp	r5, #28
 3793 03cc 00F00281 		beq	.L349
 135:src/console.c ****   }
 3794              		.loc 2 135 5 is_stmt 1 view .LVU1070
 135:src/console.c ****   }
 3795              		.loc 2 135 26 is_stmt 0 view .LVU1071
 3796 03d0 A84B     		ldr	r3, .L361+16
 3797 03d2 60E7     		b	.L330
 3798              	.L285:
 110:src/console.c ****     case KEY_F6:
 3799              		.loc 2 110 7 is_stmt 1 view .LVU1072
 110:src/console.c ****     case KEY_F6:
 3800              		.loc 2 110 11 is_stmt 0 view .LVU1073
 3801 03d4 FFF7FEFF 		bl	cur_shift
 3802              	.LVL328:
 110:src/console.c ****     case KEY_F6:
 3803              		.loc 2 110 10 view .LVU1074
 3804 03d8 0128     		cmp	r0, #1
 3805 03da 00F02481 		beq	.L350
 3806              	.L274:
 112:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3807              		.loc 2 112 7 is_stmt 1 view .LVU1075
 112:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3808              		.loc 2 112 11 is_stmt 0 view .LVU1076
 3809 03de FFF7FEFF 		bl	cur_shift
 3810              	.LVL329:
 112:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3811              		.loc 2 112 10 view .LVU1077
 3812 03e2 0028     		cmp	r0, #0
 3813 03e4 6CD1     		bne	.L286
 112:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3814              		.loc 2 112 35 is_stmt 1 view .LVU1078
 112:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3815              		.loc 2 112 69 is_stmt 0 view .LVU1079
 3816 03e6 3168     		ldr	r1, [r6]
 3817 03e8 A34A     		ldr	r2, .L361+20
 3818 03ea D023     		movs	r3, #208
 3819 03ec 03FB01F3 		mul	r3, r3, r1
 3820 03f0 D018     		adds	r0, r2, r3
 3821 03f2 D0E92C01 		ldrd	r0, r1, [r0, #176]
 3822 03f6 B033     		adds	r3, r3, #176
 3823              	.L332:
 113:src/console.c ****     }
 3824              		.loc 2 113 69 view .LVU1080
 3825 03f8 0DF1080A 		add	r10, sp, #8
 3826 03fc D55C     		ldrb	r5, [r2, r3]	@ zero_extendqisi2
 3827              	.LVL330:
ARM GAS  /tmp/ccwTS9FK.s 			page 104


 113:src/console.c ****     }
 3828              		.loc 2 113 69 view .LVU1081
 3829 03fe 8AE80300 		stm	r10, {r0, r1}
 3830 0402 1344     		add	r3, r3, r2
 3831 0404 5F68     		ldr	r7, [r3, #4]
 3832              	.LVL331:
 113:src/console.c ****     }
 3833              		.loc 2 113 69 view .LVU1082
 3834 0406 DEE6     		b	.L255
 3835              	.LVL332:
 3836              	.L284:
 107:src/console.c ****     case KEY_F5:
 3837              		.loc 2 107 7 is_stmt 1 view .LVU1083
 107:src/console.c ****     case KEY_F5:
 3838              		.loc 2 107 11 is_stmt 0 view .LVU1084
 3839 0408 FFF7FEFF 		bl	cur_shift
 3840              	.LVL333:
 107:src/console.c ****     case KEY_F5:
 3841              		.loc 2 107 10 view .LVU1085
 3842 040c 0128     		cmp	r0, #1
 3843 040e 00F0F680 		beq	.L351
 3844              	.L276:
 109:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3845              		.loc 2 109 7 is_stmt 1 view .LVU1086
 109:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3846              		.loc 2 109 11 is_stmt 0 view .LVU1087
 3847 0412 FFF7FEFF 		bl	cur_shift
 3848              	.LVL334:
 109:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3849              		.loc 2 109 10 view .LVU1088
 3850 0416 0028     		cmp	r0, #0
 3851 0418 DCD1     		bne	.L285
 109:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3852              		.loc 2 109 35 is_stmt 1 view .LVU1089
 109:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3853              		.loc 2 109 69 is_stmt 0 view .LVU1090
 3854 041a 3168     		ldr	r1, [r6]
 3855 041c 964A     		ldr	r2, .L361+20
 3856 041e D023     		movs	r3, #208
 3857 0420 03FB01F3 		mul	r3, r3, r1
 3858 0424 D018     		adds	r0, r2, r3
 3859 0426 D0E92401 		ldrd	r0, r1, [r0, #144]
 3860 042a 9033     		adds	r3, r3, #144
 3861 042c E4E7     		b	.L332
 3862              	.L283:
 104:src/console.c ****     case KEY_F4:
 3863              		.loc 2 104 7 is_stmt 1 view .LVU1091
 104:src/console.c ****     case KEY_F4:
 3864              		.loc 2 104 11 is_stmt 0 view .LVU1092
 3865 042e FFF7FEFF 		bl	cur_shift
 3866              	.LVL335:
 104:src/console.c ****     case KEY_F4:
 3867              		.loc 2 104 10 view .LVU1093
 3868 0432 0128     		cmp	r0, #1
 3869 0434 00F0ED80 		beq	.L352
 3870              	.L277:
 106:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
ARM GAS  /tmp/ccwTS9FK.s 			page 105


 3871              		.loc 2 106 7 is_stmt 1 view .LVU1094
 106:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3872              		.loc 2 106 11 is_stmt 0 view .LVU1095
 3873 0438 FFF7FEFF 		bl	cur_shift
 3874              	.LVL336:
 106:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3875              		.loc 2 106 10 view .LVU1096
 3876 043c 0028     		cmp	r0, #0
 3877 043e E3D1     		bne	.L284
 106:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3878              		.loc 2 106 35 is_stmt 1 view .LVU1097
 106:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3879              		.loc 2 106 69 is_stmt 0 view .LVU1098
 3880 0440 3168     		ldr	r1, [r6]
 3881 0442 8D4A     		ldr	r2, .L361+20
 3882 0444 D023     		movs	r3, #208
 3883 0446 03FB01F3 		mul	r3, r3, r1
 3884 044a D018     		adds	r0, r2, r3
 3885 044c D0E91C01 		ldrd	r0, r1, [r0, #112]
 3886 0450 7033     		adds	r3, r3, #112
 3887 0452 D1E7     		b	.L332
 3888              	.L280:
  97:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3889              		.loc 2 97 7 is_stmt 1 view .LVU1099
  97:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3890              		.loc 2 97 11 is_stmt 0 view .LVU1100
 3891 0454 FFF7FEFF 		bl	cur_shift
 3892              	.LVL337:
  97:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3893              		.loc 2 97 10 view .LVU1101
 3894 0458 0028     		cmp	r0, #0
 3895 045a 70D0     		beq	.L353
  98:src/console.c ****     case KEY_F2:
 3896              		.loc 2 98 7 is_stmt 1 view .LVU1102
  98:src/console.c ****     case KEY_F2:
 3897              		.loc 2 98 11 is_stmt 0 view .LVU1103
 3898 045c FFF7FEFF 		bl	cur_shift
 3899              	.LVL338:
  98:src/console.c ****     case KEY_F2:
 3900              		.loc 2 98 10 view .LVU1104
 3901 0460 0128     		cmp	r0, #1
 3902 0462 00F0F480 		beq	.L354
 3903              	.L279:
 100:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3904              		.loc 2 100 7 is_stmt 1 view .LVU1105
 100:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3905              		.loc 2 100 11 is_stmt 0 view .LVU1106
 3906 0466 FFF7FEFF 		bl	cur_shift
 3907              	.LVL339:
 100:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3908              		.loc 2 100 10 view .LVU1107
 3909 046a 0028     		cmp	r0, #0
 3910 046c 5DD0     		beq	.L355
 101:src/console.c ****     case KEY_F3:
 3911              		.loc 2 101 7 is_stmt 1 view .LVU1108
 101:src/console.c ****     case KEY_F3:
 3912              		.loc 2 101 11 is_stmt 0 view .LVU1109
ARM GAS  /tmp/ccwTS9FK.s 			page 106


 3913 046e FFF7FEFF 		bl	cur_shift
 3914              	.LVL340:
 101:src/console.c ****     case KEY_F3:
 3915              		.loc 2 101 10 view .LVU1110
 3916 0472 0128     		cmp	r0, #1
 3917 0474 00F0E180 		beq	.L356
 3918              	.L278:
 103:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3919              		.loc 2 103 7 is_stmt 1 view .LVU1111
 103:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3920              		.loc 2 103 11 is_stmt 0 view .LVU1112
 3921 0478 FFF7FEFF 		bl	cur_shift
 3922              	.LVL341:
 103:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3923              		.loc 2 103 10 view .LVU1113
 3924 047c 0028     		cmp	r0, #0
 3925 047e D6D1     		bne	.L283
 103:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3926              		.loc 2 103 35 is_stmt 1 view .LVU1114
 103:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3927              		.loc 2 103 69 is_stmt 0 view .LVU1115
 3928 0480 3168     		ldr	r1, [r6]
 3929 0482 7D4A     		ldr	r2, .L361+20
 3930 0484 D023     		movs	r3, #208
 3931 0486 03FB01F3 		mul	r3, r3, r1
 3932 048a D018     		adds	r0, r2, r3
 3933 048c D0E91401 		ldrd	r0, r1, [r0, #80]
 3934 0490 5033     		adds	r3, r3, #80
 3935 0492 B1E7     		b	.L332
 3936              	.L288:
 138:src/console.c ****   case SHIFT_N:    
 3937              		.loc 2 138 3 is_stmt 1 view .LVU1116
 138:src/console.c ****   case SHIFT_N:    
 3938              		.loc 2 138 11 is_stmt 0 view .LVU1117
 3939 0494 FFF7FEFF 		bl	cur_shift
 3940              	.LVL342:
 138:src/console.c ****   case SHIFT_N:    
 3941              		.loc 2 138 3 view .LVU1118
 3942 0498 0128     		cmp	r0, #1
 3943 049a 00F09980 		beq	.L293
 3944 049e 0228     		cmp	r0, #2
 3945 04a0 00F08980 		beq	.L294
 3946 04a4 0028     		cmp	r0, #0
 3947 04a6 00F08480 		beq	.L295
  55:src/console.c **** 
 3948              		.loc 2 55 41 view .LVU1119
 3949 04aa EDB2     		uxtb	r5, r5
 3950              	.LVL343:
  55:src/console.c **** 
 3951              		.loc 2 55 41 view .LVU1120
 3952              	.LBE141:
 3953              	.LBE174:
 509:src/console.c **** 	set_menu ( remapped.shift );
 3954              		.loc 2 509 7 is_stmt 1 view .LVU1121
 509:src/console.c **** 	set_menu ( remapped.shift );
 3955              		.loc 2 509 10 is_stmt 0 view .LVU1122
 3956 04ac 2F2D     		cmp	r5, #47
ARM GAS  /tmp/ccwTS9FK.s 			page 107


 3957 04ae 7FF48CAE 		bne	.L296
 510:src/console.c **** 	display_current_menu ();
 3958              		.loc 2 510 2 is_stmt 1 view .LVU1123
 3959              	.LVL344:
 3960              	.LBB175:
  86:src/menu.c    ****   int m = current_menu;
 3961              		.loc 1 86 6 view .LVU1124
 3962              	.LBB162:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3963              		.loc 1 87 3 view .LVU1125
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3964              		.loc 1 87 7 is_stmt 0 view .LVU1126
 3965 04b2 3368     		ldr	r3, [r6]
 3966              	.LVL345:
  88:src/menu.c    ****     current_menu = default_menu;
 3967              		.loc 1 88 3 is_stmt 1 view .LVU1127
  88:src/menu.c    ****     current_menu = default_menu;
 3968              		.loc 1 88 6 is_stmt 0 view .LVU1128
 3969 04b4 002B     		cmp	r3, #0
 3970 04b6 00F04781 		beq	.L328
 3971 04ba 0DF1080A 		add	r10, sp, #8
 3972 04be B3E6     		b	.L297
 3973              	.LVL346:
 3974              	.L286:
  88:src/menu.c    ****     current_menu = default_menu;
 3975              		.loc 1 88 6 view .LVU1129
 3976              	.LBE162:
 3977              	.LBE175:
 3978              	.LBB176:
 3979              	.LBB142:
 113:src/console.c ****     }
 3980              		.loc 2 113 7 is_stmt 1 view .LVU1130
 113:src/console.c ****     }
 3981              		.loc 2 113 11 is_stmt 0 view .LVU1131
 3982 04c0 FFF7FEFF 		bl	cur_shift
 3983              	.LVL347:
 113:src/console.c ****     }
 3984              		.loc 2 113 10 view .LVU1132
 3985 04c4 0128     		cmp	r0, #1
 3986 04c6 7FF47CAF 		bne	.L259
 113:src/console.c ****     }
 3987              		.loc 2 113 35 is_stmt 1 view .LVU1133
 113:src/console.c ****     }
 3988              		.loc 2 113 69 is_stmt 0 view .LVU1134
 3989 04ca 3168     		ldr	r1, [r6]
 3990 04cc 6A4A     		ldr	r2, .L361+20
 3991 04ce D023     		movs	r3, #208
 3992 04d0 03FB01F3 		mul	r3, r3, r1
 3993 04d4 D018     		adds	r0, r2, r3
 3994 04d6 D0E92E01 		ldrd	r0, r1, [r0, #184]
 3995 04da B833     		adds	r3, r3, #184
 3996 04dc 8CE7     		b	.L332
 3997              	.L267:
  76:src/console.c ****     case KEY_F2:
 3998              		.loc 2 76 7 is_stmt 1 view .LVU1135
  76:src/console.c ****     case KEY_F2:
 3999              		.loc 2 76 11 is_stmt 0 view .LVU1136
ARM GAS  /tmp/ccwTS9FK.s 			page 108


 4000 04de FFF7FEFF 		bl	cur_shift
 4001              	.LVL348:
  76:src/console.c ****     case KEY_F2:
 4002              		.loc 2 76 10 view .LVU1137
 4003 04e2 0128     		cmp	r0, #1
 4004 04e4 00F01B81 		beq	.L357
 4005              	.L265:
  78:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4006              		.loc 2 78 7 is_stmt 1 view .LVU1138
  78:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4007              		.loc 2 78 11 is_stmt 0 view .LVU1139
 4008 04e8 FFF7FEFF 		bl	cur_shift
 4009              	.LVL349:
  78:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4010              		.loc 2 78 10 view .LVU1140
 4011 04ec 0028     		cmp	r0, #0
 4012 04ee 7FF43BAF 		bne	.L268
  78:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4013              		.loc 2 78 35 is_stmt 1 view .LVU1141
  78:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4014              		.loc 2 78 58 is_stmt 0 view .LVU1142
 4015 04f2 624B     		ldr	r3, .L361+24
 4016 04f4 9BF83050 		ldrb	r5, [fp, #48]	@ zero_extendqisi2
 4017              	.LVL350:
  78:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4018              		.loc 2 78 58 view .LVU1143
 4019 04f8 DBF83470 		ldr	r7, [fp, #52]
 4020              	.LVL351:
  78:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[1].shifted;
 4021              		.loc 2 78 58 view .LVU1144
 4022 04fc 93E80300 		ldm	r3, {r0, r1}
 4023 0500 0DF1080A 		add	r10, sp, #8
 4024 0504 8AE80300 		stm	r10, {r0, r1}
 4025 0508 5DE6     		b	.L255
 4026              	.LVL352:
 4027              	.L266:
  75:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4028              		.loc 2 75 7 is_stmt 1 view .LVU1145
  75:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4029              		.loc 2 75 11 is_stmt 0 view .LVU1146
 4030 050a FFF7FEFF 		bl	cur_shift
 4031              	.LVL353:
  75:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4032              		.loc 2 75 10 view .LVU1147
 4033 050e 0028     		cmp	r0, #0
 4034 0510 E5D1     		bne	.L267
  75:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4035              		.loc 2 75 35 is_stmt 1 view .LVU1148
  75:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4036              		.loc 2 75 58 is_stmt 0 view .LVU1149
 4037 0512 5B4B     		ldr	r3, .L361+28
 4038 0514 9BF81050 		ldrb	r5, [fp, #16]	@ zero_extendqisi2
 4039              	.LVL354:
  75:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4040              		.loc 2 75 58 view .LVU1150
 4041 0518 DBF81470 		ldr	r7, [fp, #20]
 4042              	.LVL355:
ARM GAS  /tmp/ccwTS9FK.s 			page 109


  75:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[0].shifted;
 4043              		.loc 2 75 58 view .LVU1151
 4044 051c 93E80300 		ldm	r3, {r0, r1}
 4045 0520 0DF1080A 		add	r10, sp, #8
 4046 0524 8AE80300 		stm	r10, {r0, r1}
 4047 0528 4DE6     		b	.L255
 4048              	.LVL356:
 4049              	.L355:
 100:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 4050              		.loc 2 100 35 is_stmt 1 view .LVU1152
 100:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 4051              		.loc 2 100 69 is_stmt 0 view .LVU1153
 4052 052a 3168     		ldr	r1, [r6]
 4053 052c 524A     		ldr	r2, .L361+20
 4054 052e D023     		movs	r3, #208
 4055 0530 03FB01F3 		mul	r3, r3, r1
 4056 0534 D018     		adds	r0, r2, r3
 4057 0536 D0E90C01 		ldrd	r0, r1, [r0, #48]
 4058 053a 3033     		adds	r3, r3, #48
 4059 053c 5CE7     		b	.L332
 4060              	.L353:
  97:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 4061              		.loc 2 97 35 is_stmt 1 view .LVU1154
  97:src/console.c ****       if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 4062              		.loc 2 97 69 is_stmt 0 view .LVU1155
 4063 053e 3168     		ldr	r1, [r6]
 4064 0540 4D4A     		ldr	r2, .L361+20
 4065 0542 D023     		movs	r3, #208
 4066 0544 03FB01F3 		mul	r3, r3, r1
 4067 0548 D018     		adds	r0, r2, r3
 4068 054a D0E90401 		ldrd	r0, r1, [r0, #16]
 4069 054e 1033     		adds	r3, r3, #16
 4070 0550 52E7     		b	.L332
 4071              	.L347:
  90:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 4072              		.loc 2 90 35 is_stmt 1 view .LVU1156
  90:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 4073              		.loc 2 90 58 is_stmt 0 view .LVU1157
 4074 0552 4C4B     		ldr	r3, .L361+32
 4075 0554 9BF8B050 		ldrb	r5, [fp, #176]	@ zero_extendqisi2
 4076              	.LVL357:
  90:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 4077              		.loc 2 90 58 view .LVU1158
 4078 0558 DBF8B470 		ldr	r7, [fp, #180]
 4079              	.LVL358:
  90:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[5].shifted;
 4080              		.loc 2 90 58 view .LVU1159
 4081 055c 93E80300 		ldm	r3, {r0, r1}
 4082 0560 0DF1080A 		add	r10, sp, #8
 4083 0564 8AE80300 		stm	r10, {r0, r1}
 4084 0568 2DE6     		b	.L255
 4085              	.LVL359:
 4086              	.L345:
  87:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 4087              		.loc 2 87 35 is_stmt 1 view .LVU1160
  87:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 4088              		.loc 2 87 58 is_stmt 0 view .LVU1161
ARM GAS  /tmp/ccwTS9FK.s 			page 110


 4089 056a 474B     		ldr	r3, .L361+36
 4090 056c 9BF89050 		ldrb	r5, [fp, #144]	@ zero_extendqisi2
 4091              	.LVL360:
  87:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 4092              		.loc 2 87 58 view .LVU1162
 4093 0570 DBF89470 		ldr	r7, [fp, #148]
 4094              	.LVL361:
  87:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[4].shifted;
 4095              		.loc 2 87 58 view .LVU1163
 4096 0574 93E80300 		ldm	r3, {r0, r1}
 4097 0578 0DF1080A 		add	r10, sp, #8
 4098 057c 8AE80300 		stm	r10, {r0, r1}
 4099 0580 21E6     		b	.L255
 4100              	.LVL362:
 4101              	.L343:
  84:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 4102              		.loc 2 84 35 is_stmt 1 view .LVU1164
  84:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 4103              		.loc 2 84 58 is_stmt 0 view .LVU1165
 4104 0582 424B     		ldr	r3, .L361+40
 4105 0584 9BF87050 		ldrb	r5, [fp, #112]	@ zero_extendqisi2
 4106              	.LVL363:
  84:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 4107              		.loc 2 84 58 view .LVU1166
 4108 0588 DBF87470 		ldr	r7, [fp, #116]
 4109              	.LVL364:
  84:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[3].shifted;
 4110              		.loc 2 84 58 view .LVU1167
 4111 058c 93E80300 		ldm	r3, {r0, r1}
 4112 0590 0DF1080A 		add	r10, sp, #8
 4113 0594 8AE80300 		stm	r10, {r0, r1}
 4114 0598 15E6     		b	.L255
 4115              	.LVL365:
 4116              	.L341:
  81:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 4117              		.loc 2 81 35 is_stmt 1 view .LVU1168
  81:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 4118              		.loc 2 81 58 is_stmt 0 view .LVU1169
 4119 059a 3D4B     		ldr	r3, .L361+44
 4120 059c 9BF85050 		ldrb	r5, [fp, #80]	@ zero_extendqisi2
 4121              	.LVL366:
  81:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 4122              		.loc 2 81 58 view .LVU1170
 4123 05a0 DBF85470 		ldr	r7, [fp, #84]
 4124              	.LVL367:
  81:src/console.c ****       if (cur_shift() == SHIFT_F) return UserMenu.keys[2].shifted;
 4125              		.loc 2 81 58 view .LVU1171
 4126 05a4 93E80300 		ldm	r3, {r0, r1}
 4127 05a8 0DF1080A 		add	r10, sp, #8
 4128 05ac 8AE80300 		stm	r10, {r0, r1}
 4129 05b0 09E6     		b	.L255
 4130              	.LVL368:
 4131              	.L295:
 140:src/console.c ****     break;
 4132              		.loc 2 140 5 is_stmt 1 view .LVU1172
 140:src/console.c ****     break;
 4133              		.loc 2 140 24 is_stmt 0 view .LVU1173
ARM GAS  /tmp/ccwTS9FK.s 			page 111


 4134 05b2 384B     		ldr	r3, .L361+48
 4135 05b4 6FE6     		b	.L330
 4136              	.L294:
 144:src/console.c ****   case SHIFT_G:
 4137              		.loc 2 144 5 is_stmt 1 view .LVU1174
 146:src/console.c ****     break;
 4138              		.loc 2 146 5 view .LVU1175
 146:src/console.c ****     break;
 4139              		.loc 2 146 26 is_stmt 0 view .LVU1176
 4140 05b6 384B     		ldr	r3, .L361+52
 4141 05b8 03EBC502 		add	r2, r3, r5, lsl #3
 4142 05bc 92E80300 		ldm	r2, {r0, r1}
 4143 05c0 0DF1080A 		add	r10, sp, #8
 4144 05c4 8AE80300 		stm	r10, {r0, r1}
 4145 05c8 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4146              	.LVL369:
 146:src/console.c ****     break;
 4147              		.loc 2 146 26 view .LVU1177
 4148 05cc 0F46     		mov	r7, r1
 4149              	.LVL370:
 146:src/console.c ****     break;
 4150              		.loc 2 146 26 view .LVU1178
 4151 05ce FAE5     		b	.L255
 4152              	.LVL371:
 4153              	.L293:
 141:src/console.c ****   case SHIFT_F:
 4154              		.loc 2 141 5 is_stmt 1 view .LVU1179
 143:src/console.c ****     break;
 4155              		.loc 2 143 5 view .LVU1180
 143:src/console.c ****     break;
 4156              		.loc 2 143 26 is_stmt 0 view .LVU1181
 4157 05d0 324B     		ldr	r3, .L361+56
 4158 05d2 60E6     		b	.L330
 4159              	.L349:
 119:src/console.c ****       case SHIFT_N:
 4160              		.loc 2 119 7 is_stmt 1 view .LVU1182
 119:src/console.c ****       case SHIFT_N:
 4161              		.loc 2 119 15 is_stmt 0 view .LVU1183
 4162 05d4 FFF7FEFF 		bl	cur_shift
 4163              	.LVL372:
 119:src/console.c ****       case SHIFT_N:
 4164              		.loc 2 119 7 view .LVU1184
 4165 05d8 0328     		cmp	r0, #3
 4166 05da 3FF614AE 		bhi	.L308
 4167 05de 0128     		cmp	r0, #1
 4168 05e0 0BD8     		bhi	.L291
 4169 05e2 0028     		cmp	r0, #0
 4170 05e4 00F0A780 		beq	.L358
 122:src/console.c ****       case SHIFT_F:
 4171              		.loc 2 122 2 is_stmt 1 view .LVU1185
 124:src/console.c **** 	break;
 4172              		.loc 2 124 2 view .LVU1186
 124:src/console.c **** 	break;
 4173              		.loc 2 124 23 is_stmt 0 view .LVU1187
 4174 05e8 2D4B     		ldr	r3, .L361+60
 4175 05ea 93E80300 		ldm	r3, {r0, r1}
 4176 05ee 0DF1080A 		add	r10, sp, #8
ARM GAS  /tmp/ccwTS9FK.s 			page 112


 4177 05f2 8AE80300 		stm	r10, {r0, r1}
 4178              	.LVL373:
 124:src/console.c **** 	break;
 4179              		.loc 2 124 23 view .LVU1188
 4180              	.LBE142:
 4181              	.LBE176:
 509:src/console.c **** 	set_menu ( remapped.shift );
 4182              		.loc 2 509 7 is_stmt 1 view .LVU1189
 525:src/console.c **** 	SET_ST(STAT_MENU);
 4183              		.loc 2 525 7 view .LVU1190
 532:src/console.c **** 	remapped = do_multi (remapped);
 4184              		.loc 2 532 7 view .LVU1191
 536:src/console.c ****       process_keycode_with_shift(remapped);
 4185              		.loc 2 536 7 view .LVU1192
 4186              	.LBB177:
 4187              	.LBB143:
 124:src/console.c **** 	break;
 4188              		.loc 2 124 23 is_stmt 0 view .LVU1193
 4189 05f6 2A25     		movs	r5, #42
 4190              	.LVL374:
 124:src/console.c **** 	break;
 4191              		.loc 2 124 23 view .LVU1194
 4192 05f8 07E6     		b	.L290
 4193              	.LVL375:
 4194              	.L291:
 125:src/console.c ****       case SHIFT_G:
 4195              		.loc 2 125 2 is_stmt 1 view .LVU1195
 127:src/console.c **** 	break;
 4196              		.loc 2 127 2 view .LVU1196
 127:src/console.c **** 	break;
 4197              		.loc 2 127 9 is_stmt 0 view .LVU1197
 4198 05fa 2A4B     		ldr	r3, .L361+64
 4199 05fc DBE5     		b	.L331
 4200              	.L351:
 107:src/console.c ****     case KEY_F5:
 4201              		.loc 2 107 35 is_stmt 1 view .LVU1198
 107:src/console.c ****     case KEY_F5:
 4202              		.loc 2 107 69 is_stmt 0 view .LVU1199
 4203 05fe 3168     		ldr	r1, [r6]
 4204 0600 1D4A     		ldr	r2, .L361+20
 4205 0602 D023     		movs	r3, #208
 4206 0604 03FB01F3 		mul	r3, r3, r1
 4207 0608 D018     		adds	r0, r2, r3
 4208 060a D0E91E01 		ldrd	r0, r1, [r0, #120]
 4209 060e 7833     		adds	r3, r3, #120
 4210 0610 F2E6     		b	.L332
 4211              	.L352:
 104:src/console.c ****     case KEY_F4:
 4212              		.loc 2 104 35 is_stmt 1 view .LVU1200
 104:src/console.c ****     case KEY_F4:
 4213              		.loc 2 104 69 is_stmt 0 view .LVU1201
 4214 0612 3168     		ldr	r1, [r6]
 4215 0614 184A     		ldr	r2, .L361+20
 4216 0616 D023     		movs	r3, #208
 4217 0618 03FB01F3 		mul	r3, r3, r1
 4218 061c D018     		adds	r0, r2, r3
 4219 061e D0E91601 		ldrd	r0, r1, [r0, #88]
ARM GAS  /tmp/ccwTS9FK.s 			page 113


 4220 0622 5833     		adds	r3, r3, #88
 4221 0624 E8E6     		b	.L332
 4222              	.L350:
 110:src/console.c ****     case KEY_F6:
 4223              		.loc 2 110 35 is_stmt 1 view .LVU1202
 110:src/console.c ****     case KEY_F6:
 4224              		.loc 2 110 69 is_stmt 0 view .LVU1203
 4225 0626 3168     		ldr	r1, [r6]
 4226 0628 134A     		ldr	r2, .L361+20
 4227 062a D023     		movs	r3, #208
 4228 062c 03FB01F3 		mul	r3, r3, r1
 4229 0630 D018     		adds	r0, r2, r3
 4230 0632 D0E92601 		ldrd	r0, r1, [r0, #152]
 4231 0636 9833     		adds	r3, r3, #152
 4232 0638 DEE6     		b	.L332
 4233              	.L356:
 101:src/console.c ****     case KEY_F3:
 4234              		.loc 2 101 35 is_stmt 1 view .LVU1204
 101:src/console.c ****     case KEY_F3:
 4235              		.loc 2 101 69 is_stmt 0 view .LVU1205
 4236 063a 3168     		ldr	r1, [r6]
 4237 063c 0E4A     		ldr	r2, .L361+20
 4238 063e D023     		movs	r3, #208
 4239 0640 03FB01F3 		mul	r3, r3, r1
 4240 0644 D018     		adds	r0, r2, r3
 4241 0646 D0E90E01 		ldrd	r0, r1, [r0, #56]
 4242 064a 3833     		adds	r3, r3, #56
 4243 064c D4E6     		b	.L332
 4244              	.L354:
  98:src/console.c ****     case KEY_F2:
 4245              		.loc 2 98 35 is_stmt 1 view .LVU1206
  98:src/console.c ****     case KEY_F2:
 4246              		.loc 2 98 69 is_stmt 0 view .LVU1207
 4247 064e 3168     		ldr	r1, [r6]
 4248 0650 094A     		ldr	r2, .L361+20
 4249 0652 D023     		movs	r3, #208
 4250 0654 03FB01F3 		mul	r3, r3, r1
 4251 0658 D018     		adds	r0, r2, r3
 4252 065a D0E90601 		ldrd	r0, r1, [r0, #24]
 4253 065e 1833     		adds	r3, r3, #24
 4254 0660 CAE6     		b	.L332
 4255              	.L362:
 4256 0662 00BF     		.align	2
 4257              	.L361:
 4258 0664 00000000 		.word	.LANCHOR14
 4259 0668 00000000 		.word	.LANCHOR2
 4260 066c 00000000 		.word	.LANCHOR13
 4261 0670 00000000 		.word	.LANCHOR3
 4262 0674 00000000 		.word	.LANCHOR19
 4263 0678 00000000 		.word	.LANCHOR5
 4264 067c 30000000 		.word	.LANCHOR4+48
 4265 0680 10000000 		.word	.LANCHOR4+16
 4266 0684 B0000000 		.word	.LANCHOR4+176
 4267 0688 90000000 		.word	.LANCHOR4+144
 4268 068c 70000000 		.word	.LANCHOR4+112
 4269 0690 50000000 		.word	.LANCHOR4+80
 4270 0694 00000000 		.word	.LANCHOR16
ARM GAS  /tmp/ccwTS9FK.s 			page 114


 4271 0698 00000000 		.word	.LANCHOR20
 4272 069c 00000000 		.word	.LANCHOR17
 4273 06a0 E0000000 		.word	.LANCHOR17+224
 4274 06a4 00000000 		.word	.LANCHOR18
 4275              	.L344:
  85:src/console.c ****     case KEY_F5:
 4276              		.loc 2 85 35 is_stmt 1 view .LVU1208
  85:src/console.c ****     case KEY_F5:
 4277              		.loc 2 85 58 is_stmt 0 view .LVU1209
 4278 06a8 2A4B     		ldr	r3, .L363
 4279 06aa 9BF87850 		ldrb	r5, [fp, #120]	@ zero_extendqisi2
 4280              	.LVL376:
  85:src/console.c ****     case KEY_F5:
 4281              		.loc 2 85 58 view .LVU1210
 4282 06ae DBF87C70 		ldr	r7, [fp, #124]
 4283              	.LVL377:
  85:src/console.c ****     case KEY_F5:
 4284              		.loc 2 85 58 view .LVU1211
 4285 06b2 93E80300 		ldm	r3, {r0, r1}
 4286 06b6 0DF1080A 		add	r10, sp, #8
 4287 06ba 8AE80300 		stm	r10, {r0, r1}
 4288 06be 82E5     		b	.L255
 4289              	.LVL378:
 4290              	.L346:
  88:src/console.c ****     case KEY_F6:
 4291              		.loc 2 88 35 is_stmt 1 view .LVU1212
  88:src/console.c ****     case KEY_F6:
 4292              		.loc 2 88 58 is_stmt 0 view .LVU1213
 4293 06c0 254B     		ldr	r3, .L363+4
 4294 06c2 9BF89850 		ldrb	r5, [fp, #152]	@ zero_extendqisi2
 4295              	.LVL379:
  88:src/console.c ****     case KEY_F6:
 4296              		.loc 2 88 58 view .LVU1214
 4297 06c6 DBF89C70 		ldr	r7, [fp, #156]
 4298              	.LVL380:
  88:src/console.c ****     case KEY_F6:
 4299              		.loc 2 88 58 view .LVU1215
 4300 06ca 93E80300 		ldm	r3, {r0, r1}
 4301 06ce 0DF1080A 		add	r10, sp, #8
 4302 06d2 8AE80300 		stm	r10, {r0, r1}
 4303 06d6 76E5     		b	.L255
 4304              	.LVL381:
 4305              	.L348:
  91:src/console.c ****     }
 4306              		.loc 2 91 35 is_stmt 1 view .LVU1216
  91:src/console.c ****     }
 4307              		.loc 2 91 58 is_stmt 0 view .LVU1217
 4308 06d8 98E80300 		ldm	r8, {r0, r1}
 4309 06dc 0DF1080A 		add	r10, sp, #8
 4310 06e0 8AE80300 		stm	r10, {r0, r1}
 4311 06e4 9BF8B850 		ldrb	r5, [fp, #184]	@ zero_extendqisi2
 4312              	.LVL382:
  91:src/console.c ****     }
 4313              		.loc 2 91 58 view .LVU1218
 4314 06e8 DBF8BC70 		ldr	r7, [fp, #188]
 4315              	.LVL383:
  91:src/console.c ****     }
ARM GAS  /tmp/ccwTS9FK.s 			page 115


 4316              		.loc 2 91 58 view .LVU1219
 4317 06ec 6BE5     		b	.L255
 4318              	.LVL384:
 4319              	.L342:
  82:src/console.c ****     case KEY_F4:
 4320              		.loc 2 82 35 is_stmt 1 view .LVU1220
  82:src/console.c ****     case KEY_F4:
 4321              		.loc 2 82 58 is_stmt 0 view .LVU1221
 4322 06ee 1B4B     		ldr	r3, .L363+8
 4323 06f0 9BF85850 		ldrb	r5, [fp, #88]	@ zero_extendqisi2
 4324              	.LVL385:
  82:src/console.c ****     case KEY_F4:
 4325              		.loc 2 82 58 view .LVU1222
 4326 06f4 DBF85C70 		ldr	r7, [fp, #92]
 4327              	.LVL386:
  82:src/console.c ****     case KEY_F4:
 4328              		.loc 2 82 58 view .LVU1223
 4329 06f8 93E80300 		ldm	r3, {r0, r1}
 4330 06fc 0DF1080A 		add	r10, sp, #8
 4331 0700 8AE80300 		stm	r10, {r0, r1}
 4332 0704 5FE5     		b	.L255
 4333              	.LVL387:
 4334              	.L340:
  79:src/console.c ****     case KEY_F3:
 4335              		.loc 2 79 35 is_stmt 1 view .LVU1224
  79:src/console.c ****     case KEY_F3:
 4336              		.loc 2 79 58 is_stmt 0 view .LVU1225
 4337 0706 164B     		ldr	r3, .L363+12
 4338 0708 9BF83850 		ldrb	r5, [fp, #56]	@ zero_extendqisi2
 4339              	.LVL388:
  79:src/console.c ****     case KEY_F3:
 4340              		.loc 2 79 58 view .LVU1226
 4341 070c DBF83C70 		ldr	r7, [fp, #60]
 4342              	.LVL389:
  79:src/console.c ****     case KEY_F3:
 4343              		.loc 2 79 58 view .LVU1227
 4344 0710 93E80300 		ldm	r3, {r0, r1}
 4345 0714 0DF1080A 		add	r10, sp, #8
 4346 0718 8AE80300 		stm	r10, {r0, r1}
 4347 071c 53E5     		b	.L255
 4348              	.LVL390:
 4349              	.L357:
  76:src/console.c ****     case KEY_F2:
 4350              		.loc 2 76 35 is_stmt 1 view .LVU1228
  76:src/console.c ****     case KEY_F2:
 4351              		.loc 2 76 58 is_stmt 0 view .LVU1229
 4352 071e 114B     		ldr	r3, .L363+16
 4353 0720 9BF81850 		ldrb	r5, [fp, #24]	@ zero_extendqisi2
 4354              	.LVL391:
  76:src/console.c ****     case KEY_F2:
 4355              		.loc 2 76 58 view .LVU1230
 4356 0724 DBF81C70 		ldr	r7, [fp, #28]
 4357              	.LVL392:
  76:src/console.c ****     case KEY_F2:
 4358              		.loc 2 76 58 view .LVU1231
 4359 0728 93E80300 		ldm	r3, {r0, r1}
 4360 072c 0DF1080A 		add	r10, sp, #8
ARM GAS  /tmp/ccwTS9FK.s 			page 116


 4361 0730 8AE80300 		stm	r10, {r0, r1}
 4362 0734 47E5     		b	.L255
 4363              	.LVL393:
 4364              	.L358:
 121:src/console.c **** 	break;
 4365              		.loc 2 121 2 is_stmt 1 view .LVU1232
 121:src/console.c **** 	break;
 4366              		.loc 2 121 21 is_stmt 0 view .LVU1233
 4367 0736 0C4B     		ldr	r3, .L363+20
 4368 0738 93E80300 		ldm	r3, {r0, r1}
 4369 073c 0DF1080A 		add	r10, sp, #8
 4370 0740 8AE80300 		stm	r10, {r0, r1}
 4371              	.LVL394:
 121:src/console.c **** 	break;
 4372              		.loc 2 121 21 view .LVU1234
 4373              	.LBE143:
 4374              	.LBE177:
 509:src/console.c **** 	set_menu ( remapped.shift );
 4375              		.loc 2 509 7 is_stmt 1 view .LVU1235
 525:src/console.c **** 	SET_ST(STAT_MENU);
 4376              		.loc 2 525 7 view .LVU1236
 532:src/console.c **** 	remapped = do_multi (remapped);
 4377              		.loc 2 532 7 view .LVU1237
 536:src/console.c ****       process_keycode_with_shift(remapped);
 4378              		.loc 2 536 7 view .LVU1238
 4379              	.LBB178:
 4380              	.LBB144:
 121:src/console.c **** 	break;
 4381              		.loc 2 121 21 is_stmt 0 view .LVU1239
 4382 0744 2925     		movs	r5, #41
 4383              	.LVL395:
 121:src/console.c **** 	break;
 4384              		.loc 2 121 21 view .LVU1240
 4385 0746 60E5     		b	.L290
 4386              	.LVL396:
 4387              	.L328:
 121:src/console.c **** 	break;
 4388              		.loc 2 121 21 view .LVU1241
 4389              	.LBE144:
 4390              	.LBE178:
 4391              	.LBB179:
 4392              	.LBB163:
  89:src/menu.c    ****   }
 4393              		.loc 1 89 5 is_stmt 1 view .LVU1242
  89:src/menu.c    ****   }
 4394              		.loc 1 89 18 is_stmt 0 view .LVU1243
 4395 0748 084A     		ldr	r2, .L363+24
 4396 074a 1768     		ldr	r7, [r2]
 4397 074c 3760     		str	r7, [r6]
  97:src/menu.c    **** }
 4398              		.loc 1 97 3 is_stmt 1 view .LVU1244
 4399 074e 0DF1080A 		add	r10, sp, #8
 4400 0752 6EE5     		b	.L298
 4401              	.L364:
 4402              		.align	2
 4403              	.L363:
 4404 0754 78000000 		.word	.LANCHOR4+120
ARM GAS  /tmp/ccwTS9FK.s 			page 117


 4405 0758 98000000 		.word	.LANCHOR4+152
 4406 075c 58000000 		.word	.LANCHOR4+88
 4407 0760 38000000 		.word	.LANCHOR4+56
 4408 0764 18000000 		.word	.LANCHOR4+24
 4409 0768 E0000000 		.word	.LANCHOR16+224
 4410 076c 00000000 		.word	.LANCHOR2
 4411              	.LBE163:
 4412              	.LBE179:
 4413              		.cfi_endproc
 4414              	.LFE29:
 4416              		.global	n_p
 4417              		.comm	print_string,22,4
 4418              		.global	spaces
 4419              		.global	release
 4420              		.global	h_shift
 4421              		.global	g_shift
 4422              		.global	f_shift
 4423              		.global	heartbeat
 4424              		.global	no_key
 4425              		.global	MID_MENU
 4426              		.section	.rodata.str1.4,"aMS",%progbits,1
 4427              		.align	2
 4428              	.LC13:
 4429 0000 53797374 		.ascii	"System!\000"
 4429      656D2100 
 4430              		.global	mid_menu
 4431              		.global	cmplx_key_string
 4432              		.align	2
 4433              	.LC14:
 4434 0008 43505800 		.ascii	"CPX\000"
 4435              		.global	arrow_key_string
 4436              		.align	2
 4437              	.LC15:
 4438 000c 2D2D0D00 		.ascii	"--\015\000"
 4439              		.global	UserMenu
 4440              		.section	.rodata
 4441              		.align	2
 4442              		.set	.LANCHOR8,. + 0
 4443              	.LC9:
 4444 0000 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4444      2A2B0708 
 4444      091C0B0C 
 4444      0D0E0F
 4445 000f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4445      13141516 
 4445      00121819 
 4445      1A
 4446 001c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4446      1E1F2000 
 4446      21222324 
 4446      25
 4447              		.section	.bss.current_menu,"aw",%nobits
 4448              		.align	2
 4449              		.set	.LANCHOR1,. + 0
 4452              	current_menu:
 4453 0000 00000000 		.space	4
 4454              		.section	.bss.default_menu,"aw",%nobits
ARM GAS  /tmp/ccwTS9FK.s 			page 118


 4455              		.align	2
 4456              		.set	.LANCHOR2,. + 0
 4459              	default_menu:
 4460 0000 00000000 		.space	4
 4461              		.section	.bss.last_menu,"aw",%nobits
 4462              		.align	2
 4463              		.set	.LANCHOR3,. + 0
 4466              	last_menu:
 4467 0000 00000000 		.space	4
 4468              		.section	.bss.mdots,"aw",%nobits
 4469              		.align	2
 4470              		.set	.LANCHOR0,. + 0
 4473              	mdots:
 4474 0000 00000000 		.space	400
 4474      00000000 
 4474      00000000 
 4474      00000000 
 4474      00000000 
 4475              		.section	.bss.n_p,"aw",%nobits
 4476              		.align	2
 4479              	n_p:
 4480 0000 00000000 		.space	4
 4481              		.section	.bss.start_ticks,"aw",%nobits
 4482              		.align	2
 4483              		.set	.LANCHOR9,. + 0
 4486              	start_ticks:
 4487 0000 00000000 		.space	4
 4488              		.section	.data.UserMenu,"aw"
 4489              		.align	2
 4490              		.set	.LANCHOR4,. + 0
 4493              	UserMenu:
 4494 0000 55736572 		.ascii	"User Menu\000"
 4494      204D656E 
 4494      7500
 4495 000a 00000000 		.space	5
 4495      00
 4496 000f 00       		.space	1
 4497 0010 2E       		.byte	46
 4498 0011 000000   		.space	3
 4499 0014 FFFFFFFF 		.word	-1
 4500 0018 2E       		.byte	46
 4501 0019 000000   		.space	3
 4502 001c FFFFFFFF 		.word	-1
 4503 0020 00       		.ascii	"\000"
 4504 0021 00000000 		.space	7
 4504      000000
 4505 0028 00       		.ascii	"\000"
 4506 0029 00000000 		.space	7
 4506      000000
 4507 0030 2E       		.byte	46
 4508 0031 000000   		.space	3
 4509 0034 FFFFFFFF 		.word	-1
 4510 0038 2E       		.byte	46
 4511 0039 000000   		.space	3
 4512 003c FFFFFFFF 		.word	-1
 4513 0040 00       		.ascii	"\000"
 4514 0041 00000000 		.space	7
ARM GAS  /tmp/ccwTS9FK.s 			page 119


 4514      000000
 4515 0048 00       		.ascii	"\000"
 4516 0049 00000000 		.space	7
 4516      000000
 4517 0050 2E       		.byte	46
 4518 0051 000000   		.space	3
 4519 0054 FFFFFFFF 		.word	-1
 4520 0058 2E       		.byte	46
 4521 0059 000000   		.space	3
 4522 005c FFFFFFFF 		.word	-1
 4523 0060 00       		.ascii	"\000"
 4524 0061 00000000 		.space	7
 4524      000000
 4525 0068 00       		.ascii	"\000"
 4526 0069 00000000 		.space	7
 4526      000000
 4527 0070 2E       		.byte	46
 4528 0071 000000   		.space	3
 4529 0074 FFFFFFFF 		.word	-1
 4530 0078 2E       		.byte	46
 4531 0079 000000   		.space	3
 4532 007c FFFFFFFF 		.word	-1
 4533 0080 00       		.ascii	"\000"
 4534 0081 00000000 		.space	7
 4534      000000
 4535 0088 00       		.ascii	"\000"
 4536 0089 00000000 		.space	7
 4536      000000
 4537 0090 2C       		.byte	44
 4538 0091 000000   		.space	3
 4539 0094 FFFFFFFF 		.word	-1
 4540 0098 2E       		.byte	46
 4541 0099 000000   		.space	3
 4542 009c FFFFFFFF 		.word	-1
 4543 00a0 2D2D0D00 		.ascii	"--\015\000"
 4544 00a4 00000000 		.space	4
 4545 00a8 00       		.ascii	"\000"
 4546 00a9 00000000 		.space	7
 4546      000000
 4547 00b0 2D       		.byte	45
 4548 00b1 000000   		.space	3
 4549 00b4 FFFFFFFF 		.word	-1
 4550 00b8 31       		.byte	49
 4551 00b9 000000   		.space	3
 4552 00bc 0B000000 		.word	11
 4553 00c0 43505800 		.ascii	"CPX\000"
 4554 00c4 00000000 		.space	4
 4555 00c8 00       		.ascii	"\000"
 4556 00c9 00000000 		.space	7
 4556      000000
 4557              		.section	.data.arrow_key_string,"aw"
 4558              		.align	2
 4559              		.set	.LANCHOR6,. + 0
 4562              	arrow_key_string:
 4563 0000 0C000000 		.word	.LC15
 4564              		.section	.data.cmplx_key_string,"aw"
 4565              		.align	2
ARM GAS  /tmp/ccwTS9FK.s 			page 120


 4566              		.set	.LANCHOR7,. + 0
 4569              	cmplx_key_string:
 4570 0000 08000000 		.word	.LC14
 4571              		.section	.data.f_shift,"aw"
 4572              		.align	2
 4573              		.set	.LANCHOR12,. + 0
 4576              	f_shift:
 4577 0000 29       		.byte	41
 4578 0001 000000   		.space	3
 4579 0004 FFFFFFFF 		.word	-1
 4580              		.section	.data.g_shift,"aw"
 4581              		.align	2
 4582              		.set	.LANCHOR13,. + 0
 4585              	g_shift:
 4586 0000 2A       		.byte	42
 4587 0001 000000   		.space	3
 4588 0004 FFFFFFFF 		.word	-1
 4589              		.section	.data.h_shift,"aw"
 4590              		.align	2
 4591              		.set	.LANCHOR18,. + 0
 4594              	h_shift:
 4595 0000 2B       		.byte	43
 4596 0001 000000   		.space	3
 4597 0004 FFFFFFFF 		.word	-1
 4598              		.section	.data.heartbeat,"aw"
 4599              		.align	2
 4600              		.set	.LANCHOR22,. + 0
 4603              	heartbeat:
 4604 0000 62       		.byte	98
 4605 0001 000000   		.space	3
 4606 0004 FFFFFFFF 		.word	-1
 4607              		.section	.data.no_key,"aw"
 4608              		.align	2
 4609              		.set	.LANCHOR11,. + 0
 4612              	no_key:
 4613 0000 2E       		.byte	46
 4614 0001 000000   		.space	3
 4615 0004 00000000 		.word	0
 4616              		.section	.data.release,"aw"
 4617              		.align	2
 4618              		.set	.LANCHOR14,. + 0
 4621              	release:
 4622 0000 63       		.byte	99
 4623 0001 000000   		.space	3
 4624 0004 FFFFFFFF 		.word	-1
 4625              		.section	.data.spaces,"aw"
 4626              		.align	2
 4627              		.set	.LANCHOR10,. + 0
 4630              	spaces:
 4631 0000 20202020 		.ascii	"                     \000"
 4631      20202020 
 4631      20202020 
 4631      20202020 
 4631      20202020 
 4632              		.section	.rodata.MID_MENU,"a"
 4633              		.align	2
 4634              		.set	.LANCHOR21,. + 0
ARM GAS  /tmp/ccwTS9FK.s 			page 121


 4637              	MID_MENU:
 4638 0000 00000000 		.word	.LC13
 4639 0004 00000000 		.word	mid_menu
 4640 0008 00000000 		.word	0
 4641 000c 00000000 		.word	0
 4642              		.section	.rodata.Menus,"a"
 4643              		.align	2
 4644              		.set	.LANCHOR5,. + 0
 4647              	Menus:
 4648 0000 426C616E 		.ascii	"Blank\000"
 4648      6B00
 4649 0006 00000000 		.space	9
 4649      00000000 
 4649      00
 4650 000f 00       		.space	1
 4651 0010 2E       		.byte	46
 4652 0011 000000   		.space	3
 4653 0014 FFFFFFFF 		.word	-1
 4654 0018 2E       		.byte	46
 4655 0019 000000   		.space	3
 4656 001c FFFFFFFF 		.word	-1
 4657 0020 00       		.ascii	"\000"
 4658 0021 00000000 		.space	7
 4658      000000
 4659 0028 00       		.ascii	"\000"
 4660 0029 00000000 		.space	7
 4660      000000
 4661 0030 2E       		.byte	46
 4662 0031 000000   		.space	3
 4663 0034 FFFFFFFF 		.word	-1
 4664 0038 2E       		.byte	46
 4665 0039 000000   		.space	3
 4666 003c FFFFFFFF 		.word	-1
 4667 0040 00       		.ascii	"\000"
 4668 0041 00000000 		.space	7
 4668      000000
 4669 0048 00       		.ascii	"\000"
 4670 0049 00000000 		.space	7
 4670      000000
 4671 0050 2E       		.byte	46
 4672 0051 000000   		.space	3
 4673 0054 FFFFFFFF 		.word	-1
 4674 0058 2E       		.byte	46
 4675 0059 000000   		.space	3
 4676 005c FFFFFFFF 		.word	-1
 4677 0060 00       		.ascii	"\000"
 4678 0061 00000000 		.space	7
 4678      000000
 4679 0068 00       		.ascii	"\000"
 4680 0069 00000000 		.space	7
 4680      000000
 4681 0070 2E       		.byte	46
 4682 0071 000000   		.space	3
 4683 0074 FFFFFFFF 		.word	-1
 4684 0078 2E       		.byte	46
 4685 0079 000000   		.space	3
 4686 007c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccwTS9FK.s 			page 122


 4687 0080 00       		.ascii	"\000"
 4688 0081 00000000 		.space	7
 4688      000000
 4689 0088 00       		.ascii	"\000"
 4690 0089 00000000 		.space	7
 4690      000000
 4691 0090 2C       		.byte	44
 4692 0091 000000   		.space	3
 4693 0094 FFFFFFFF 		.word	-1
 4694 0098 2E       		.byte	46
 4695 0099 000000   		.space	3
 4696 009c FFFFFFFF 		.word	-1
 4697 00a0 2D2D0D00 		.ascii	"--\015\000"
 4698 00a4 00000000 		.space	4
 4699 00a8 00       		.ascii	"\000"
 4700 00a9 00000000 		.space	7
 4700      000000
 4701 00b0 2D       		.byte	45
 4702 00b1 000000   		.space	3
 4703 00b4 FFFFFFFF 		.word	-1
 4704 00b8 31       		.byte	49
 4705 00b9 000000   		.space	3
 4706 00bc 0B000000 		.word	11
 4707 00c0 43505800 		.ascii	"CPX\000"
 4708 00c4 00000000 		.space	4
 4709 00c8 00       		.ascii	"\000"
 4710 00c9 00000000 		.space	7
 4710      000000
 4711 00d0 436C6561 		.ascii	"Clear\000"
 4711      7200
 4712 00d6 00000000 		.space	9
 4712      00000000 
 4712      00
 4713 00df 00       		.space	1
 4714 00e0 10       		.byte	16
 4715 00e1 000000   		.space	3
 4716 00e4 01000000 		.word	1
 4717 00e8 34       		.byte	52
 4718 00e9 000000   		.space	3
 4719 00ec 44010000 		.word	324
 4720 00f0 434C5072 		.ascii	"CLProg\000"
 4720      6F6700
 4721 00f7 00       		.space	1
 4722 00f8 434C5041 		.ascii	"CLPAll\000"
 4722      6C6C00
 4723 00ff 00       		.space	1
 4724 0100 10       		.byte	16
 4725 0101 000000   		.space	3
 4726 0104 02000000 		.word	2
 4727 0108 34       		.byte	52
 4728 0109 000000   		.space	3
 4729 010c 3E010000 		.word	318
 4730 0110 434C9100 		.ascii	"CL\221\000"
 4731 0114 00000000 		.space	4
 4732 0118 434C5265 		.ascii	"CLReg\000"
 4732      6700
 4733 011e 0000     		.space	2
ARM GAS  /tmp/ccwTS9FK.s 			page 123


 4734 0120 10       		.byte	16
 4735 0121 000000   		.space	3
 4736 0124 03000000 		.word	3
 4737 0128 34       		.byte	52
 4738 0129 000000   		.space	3
 4739 012c 74010000 		.word	372
 4740 0130 434C7800 		.ascii	"CLx\000"
 4741 0134 00000000 		.space	4
 4742 0138 434C06A0 		.ascii	"CL\006\240\000"
 4742      00
 4743 013d 000000   		.space	3
 4744 0140 34       		.byte	52
 4745 0141 000000   		.space	3
 4746 0144 40010000 		.word	320
 4747 0148 34       		.byte	52
 4748 0149 000000   		.space	3
 4749 014c 41010000 		.word	321
 4750 0150 434C5374 		.ascii	"CLStk\000"
 4750      6B00
 4751 0156 0000     		.space	2
 4752 0158 434C416C 		.ascii	"CLAll\000"
 4752      6C00
 4753 015e 0000     		.space	2
 4754 0160 2C       		.byte	44
 4755 0161 000000   		.space	3
 4756 0164 FFFFFFFF 		.word	-1
 4757 0168 2E       		.byte	46
 4758 0169 000000   		.space	3
 4759 016c FFFFFFFF 		.word	-1
 4760 0170 2D2D0D00 		.ascii	"--\015\000"
 4761 0174 00000000 		.space	4
 4762 0178 00       		.ascii	"\000"
 4763 0179 00000000 		.space	7
 4763      000000
 4764 0180 2D       		.byte	45
 4765 0181 000000   		.space	3
 4766 0184 FFFFFFFF 		.word	-1
 4767 0188 2E       		.byte	46
 4768 0189 000000   		.space	3
 4769 018c FFFFFFFF 		.word	-1
 4770 0190 43505800 		.ascii	"CPX\000"
 4771 0194 00000000 		.space	4
 4772 0198 00       		.ascii	"\000"
 4773 0199 00000000 		.space	7
 4773      000000
 4774 01a0 44495350 		.ascii	"DISP\000"
 4774      00
 4775 01a5 00000000 		.space	10
 4775      00000000 
 4775      0000
 4776 01af 00       		.space	1
 4777 01b0 00       		.byte	0
 4778 01b1 000000   		.space	3
 4779 01b4 03000000 		.word	3
 4780 01b8 05       		.byte	5
 4781 01b9 000000   		.space	3
 4782 01bc 01000000 		.word	1
ARM GAS  /tmp/ccwTS9FK.s 			page 124


 4783 01c0 414C4C00 		.ascii	"ALL\000"
 4784 01c4 00000000 		.space	4
 4785 01c8 6120622F 		.ascii	"a b/c\000"
 4785      6300
 4786 01ce 0000     		.space	2
 4787 01d0 01       		.byte	1
 4788 01d1 000000   		.space	3
 4789 01d4 03000000 		.word	3
 4790 01d8 05       		.byte	5
 4791 01d9 000000   		.space	3
 4792 01dc 02000000 		.word	2
 4793 01e0 46495800 		.ascii	"FIX\000"
 4794 01e4 00000000 		.space	4
 4795 01e8 642F6300 		.ascii	"d/c\000"
 4796 01ec 00000000 		.space	4
 4797 01f0 02       		.byte	2
 4798 01f1 000000   		.space	3
 4799 01f4 03000000 		.word	3
 4800 01f8 06       		.byte	6
 4801 01f9 000000   		.space	3
 4802 01fc 01000000 		.word	1
 4803 0200 53434900 		.ascii	"SCI\000"
 4804 0204 00000000 		.space	4
 4805 0208 482E4D53 		.ascii	"H.MS\000"
 4805      00
 4806 020d 000000   		.space	3
 4807 0210 03       		.byte	3
 4808 0211 000000   		.space	3
 4809 0214 03000000 		.word	3
 4810 0218 07       		.byte	7
 4811 0219 000000   		.space	3
 4812 021c 01000000 		.word	1
 4813 0220 454E4700 		.ascii	"ENG\000"
 4814 0224 00000000 		.space	4
 4815 0228 482E6400 		.ascii	"H.d\000"
 4816 022c 00000000 		.space	4
 4817 0230 2C       		.byte	44
 4818 0231 000000   		.space	3
 4819 0234 FFFFFFFF 		.word	-1
 4820 0238 26       		.byte	38
 4821 0239 000000   		.space	3
 4822 023c 03000000 		.word	3
 4823 0240 2D2D0D00 		.ascii	"--\015\000"
 4824 0244 00000000 		.space	4
 4825 0248 2E2F2C00 		.ascii	"./,\000"
 4826 024c 00000000 		.space	4
 4827 0250 2D       		.byte	45
 4828 0251 000000   		.space	3
 4829 0254 FFFFFFFF 		.word	-1
 4830 0258 2E       		.byte	46
 4831 0259 000000   		.space	3
 4832 025c FFFFFFFF 		.word	-1
 4833 0260 43505800 		.ascii	"CPX\000"
 4834 0264 00000000 		.space	4
 4835 0268 00       		.ascii	"\000"
 4836 0269 00000000 		.space	7
 4836      000000
ARM GAS  /tmp/ccwTS9FK.s 			page 125


 4837 0270 42415345 		.ascii	"BASE\000"
 4837      00
 4838 0275 00000000 		.space	10
 4838      00000000 
 4838      0000
 4839 027f 00       		.space	1
 4840 0280 0E       		.byte	14
 4841 0281 000000   		.space	3
 4842 0284 01000000 		.word	1
 4843 0288 0E       		.byte	14
 4844 0289 000000   		.space	3
 4845 028c 03000000 		.word	3
 4846 0290 42494E00 		.ascii	"BIN\000"
 4847 0294 00000000 		.space	4
 4848 0298 6E6F7400 		.ascii	"not\000"
 4849 029c 00000000 		.space	4
 4850 02a0 0E       		.byte	14
 4851 02a1 000000   		.space	3
 4852 02a4 02000000 		.word	2
 4853 02a8 13       		.byte	19
 4854 02a9 000000   		.space	3
 4855 02ac 03000000 		.word	3
 4856 02b0 4F435400 		.ascii	"OCT\000"
 4857 02b4 00000000 		.space	4
 4858 02b8 616E6400 		.ascii	"and\000"
 4859 02bc 00000000 		.space	4
 4860 02c0 0F       		.byte	15
 4861 02c1 000000   		.space	3
 4862 02c4 01000000 		.word	1
 4863 02c8 14       		.byte	20
 4864 02c9 000000   		.space	3
 4865 02cc 03000000 		.word	3
 4866 02d0 44454300 		.ascii	"DEC\000"
 4867 02d4 00000000 		.space	4
 4868 02d8 6F7200   		.ascii	"or\000"
 4869 02db 00000000 		.space	5
 4869      00
 4870 02e0 0F       		.byte	15
 4871 02e1 000000   		.space	3
 4872 02e4 02000000 		.word	2
 4873 02e8 15       		.byte	21
 4874 02e9 000000   		.space	3
 4875 02ec 03000000 		.word	3
 4876 02f0 48455800 		.ascii	"HEX\000"
 4877 02f4 00000000 		.space	4
 4878 02f8 786F7200 		.ascii	"xor\000"
 4879 02fc 00000000 		.space	4
 4880 0300 2C       		.byte	44
 4881 0301 000000   		.space	3
 4882 0304 FFFFFFFF 		.word	-1
 4883 0308 16       		.byte	22
 4884 0309 000000   		.space	3
 4885 030c 03000000 		.word	3
 4886 0310 2D2D0D00 		.ascii	"--\015\000"
 4887 0314 00000000 		.space	4
 4888 0318 524D4452 		.ascii	"RMDR\000"
 4888      00
ARM GAS  /tmp/ccwTS9FK.s 			page 126


 4889 031d 000000   		.space	3
 4890 0320 2D       		.byte	45
 4891 0321 000000   		.space	3
 4892 0324 FFFFFFFF 		.word	-1
 4893 0328 07       		.byte	7
 4894 0329 000000   		.space	3
 4895 032c 01000000 		.word	1
 4896 0330 43505800 		.ascii	"CPX\000"
 4897 0334 00000000 		.space	4
 4898 0338 482E6400 		.ascii	"H.d\000"
 4899 033c 00000000 		.space	4
 4900 0340 414E474C 		.ascii	"ANGLES\000"
 4900      455300
 4901 0347 00000000 		.space	8
 4901      00000000 
 4902 034f 00       		.space	1
 4903 0350 06       		.byte	6
 4904 0351 000000   		.space	3
 4905 0354 02000000 		.word	2
 4906 0358 04       		.byte	4
 4907 0359 000000   		.space	3
 4908 035c 01000000 		.word	1
 4909 0360 44454700 		.ascii	"DEG\000"
 4910 0364 00000000 		.space	4
 4911 0368 500D5200 		.ascii	"P\015R\000"
 4912 036c 00000000 		.space	4
 4913 0370 07       		.byte	7
 4914 0371 000000   		.space	3
 4915 0374 02000000 		.word	2
 4916 0378 04       		.byte	4
 4917 0379 000000   		.space	3
 4918 037c 02000000 		.word	2
 4919 0380 52414400 		.ascii	"RAD\000"
 4920 0384 00000000 		.space	4
 4921 0388 520D5000 		.ascii	"R\015P\000"
 4922 038c 00000000 		.space	4
 4923 0390 08       		.byte	8
 4924 0391 000000   		.space	3
 4925 0394 02000000 		.word	2
 4926 0398 00       		.byte	0
 4927 0399 000000   		.space	3
 4928 039c 01000000 		.word	1
 4929 03a0 47524144 		.ascii	"GRAD\000"
 4929      00
 4930 03a5 000000   		.space	3
 4931 03a8 48595000 		.ascii	"HYP\000"
 4932 03ac 00000000 		.space	4
 4933 03b0 06       		.byte	6
 4934 03b1 000000   		.space	3
 4935 03b4 01000000 		.word	1
 4936 03b8 07       		.byte	7
 4937 03b9 000000   		.space	3
 4938 03bc 01000000 		.word	1
 4939 03c0 482E4D53 		.ascii	"H.MS\000"
 4939      00
 4940 03c5 000000   		.space	3
 4941 03c8 482E6400 		.ascii	"H.d\000"
ARM GAS  /tmp/ccwTS9FK.s 			page 127


 4942 03cc 00000000 		.space	4
 4943 03d0 2C       		.byte	44
 4944 03d1 000000   		.space	3
 4945 03d4 FFFFFFFF 		.word	-1
 4946 03d8 00       		.byte	0
 4947 03d9 000000   		.space	3
 4948 03dc 02000000 		.word	2
 4949 03e0 2D2D0D00 		.ascii	"--\015\000"
 4950 03e4 00000000 		.space	4
 4951 03e8 4859509D 		.ascii	"HYP\235\000"
 4951      00
 4952 03ed 000000   		.space	3
 4953 03f0 2D       		.byte	45
 4954 03f1 000000   		.space	3
 4955 03f4 FFFFFFFF 		.word	-1
 4956 03f8 2E       		.byte	46
 4957 03f9 000000   		.space	3
 4958 03fc FFFFFFFF 		.word	-1
 4959 0400 43505800 		.ascii	"CPX\000"
 4960 0404 00000000 		.space	4
 4961 0408 00       		.ascii	"\000"
 4962 0409 00000000 		.space	7
 4962      000000
 4963 0410 4D495343 		.ascii	"MISC\000"
 4963      00
 4964 0415 00000000 		.space	10
 4964      00000000 
 4964      0000
 4965 041f 00       		.space	1
 4966 0420 25       		.byte	37
 4967 0421 000000   		.space	3
 4968 0424 01000000 		.word	1
 4969 0428 14       		.byte	20
 4970 0429 000000   		.space	3
 4971 042c 01000000 		.word	1
 4972 0430 7C587C00 		.ascii	"|X|\000"
 4973 0434 00000000 		.space	4
 4974 0438 329C00   		.ascii	"2\234\000"
 4975 043b 00000000 		.space	5
 4975      00
 4976 0440 25       		.byte	37
 4977 0441 000000   		.space	3
 4978 0444 02000000 		.word	2
 4979 0448 14       		.byte	20
 4980 0449 000000   		.space	3
 4981 044c 02000000 		.word	2
 4982 0450 524E4400 		.ascii	"RND\000"
 4983 0454 00000000 		.space	4
 4984 0458 4C6F67BA 		.ascii	"Log\272\000"
 4984      00
 4985 045d 000000   		.space	3
 4986 0460 26       		.byte	38
 4987 0461 000000   		.space	3
 4988 0464 01000000 		.word	1
 4989 0468 15       		.byte	21
 4990 0469 000000   		.space	3
 4991 046c 02000000 		.word	2
ARM GAS  /tmp/ccwTS9FK.s 			page 128


 4992 0470 49506172 		.ascii	"IPart\000"
 4992      7400
 4993 0476 0000     		.space	2
 4994 0478 4C6F678B 		.ascii	"Log\213\000"
 4994      00
 4995 047d 000000   		.space	3
 4996 0480 26       		.byte	38
 4997 0481 000000   		.space	3
 4998 0484 02000000 		.word	2
 4999 0488 16       		.byte	22
 5000 0489 000000   		.space	3
 5001 048c 02000000 		.word	2
 5002 0490 46506172 		.ascii	"FPart\000"
 5002      7400
 5003 0496 0000     		.space	2
 5004 0498 7C7C656C 		.ascii	"||el\000"
 5004      00
 5005 049d 000000   		.space	3
 5006 04a0 2C       		.byte	44
 5007 04a1 000000   		.space	3
 5008 04a4 FFFFFFFF 		.word	-1
 5009 04a8 22       		.byte	34
 5010 04a9 000000   		.space	3
 5011 04ac 02000000 		.word	2
 5012 04b0 2D2D0D00 		.ascii	"--\015\000"
 5013 04b4 00000000 		.space	4
 5014 04b8 832500   		.ascii	"\203%\000"
 5015 04bb 00000000 		.space	5
 5015      00
 5016 04c0 2D       		.byte	45
 5017 04c1 000000   		.space	3
 5018 04c4 FFFFFFFF 		.word	-1
 5019 04c8 2E       		.byte	46
 5020 04c9 000000   		.space	3
 5021 04cc FFFFFFFF 		.word	-1
 5022 04d0 43505800 		.ascii	"CPX\000"
 5023 04d4 00000000 		.space	4
 5024 04d8 00       		.ascii	"\000"
 5025 04d9 00000000 		.space	7
 5025      000000
 5026 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 5026      204B6579 
 5026      00
 5027 04e9 00000000 		.space	6
 5027      0000
 5028 04ef 00       		.space	1
 5029 04f0 0D       		.byte	13
 5030 04f1 000000   		.space	3
 5031 04f4 01000000 		.word	1
 5032 04f8 34       		.byte	52
 5033 04f9 000000   		.space	3
 5034 04fc 00A60000 		.word	42496
 5035 0500 53686F77 		.ascii	"Show\016\000"
 5035      0E00
 5036 0506 0000     		.space	2
 5037 0508 5B175D00 		.ascii	"[\027]\000"
 5038 050c 00000000 		.space	4
ARM GAS  /tmp/ccwTS9FK.s 			page 129


 5039 0510 0D       		.byte	13
 5040 0511 000000   		.space	3
 5041 0514 02000000 		.word	2
 5042 0518 2E       		.byte	46
 5043 0519 000000   		.space	3
 5044 051c FFFFFFFF 		.word	-1
 5045 0520 53686F77 		.ascii	"Show\015\000"
 5045      0D00
 5046 0526 0000     		.space	2
 5047 0528 00       		.ascii	"\000"
 5048 0529 00000000 		.space	7
 5048      000000
 5049 0530 0D       		.byte	13
 5050 0531 000000   		.space	3
 5051 0534 03000000 		.word	3
 5052 0538 34       		.byte	52
 5053 0539 000000   		.space	3
 5054 053c 00330000 		.word	13056
 5055 0540 78173F00 		.ascii	"x\027?\000"
 5056 0544 00000000 		.space	4
 5057 0548 7A173F00 		.ascii	"z\027?\000"
 5058 054c 00000000 		.space	4
 5059 0550 34       		.byte	52
 5060 0551 000000   		.space	3
 5061 0554 00320000 		.word	12800
 5062 0558 34       		.byte	52
 5063 0559 000000   		.space	3
 5064 055c 00340000 		.word	13312
 5065 0560 79173F00 		.ascii	"y\027?\000"
 5066 0564 00000000 		.space	4
 5067 0568 74173F00 		.ascii	"t\027?\000"
 5068 056c 00000000 		.space	4
 5069 0570 2C       		.byte	44
 5070 0571 000000   		.space	3
 5071 0574 FFFFFFFF 		.word	-1
 5072 0578 2E       		.byte	46
 5073 0579 000000   		.space	3
 5074 057c FFFFFFFF 		.word	-1
 5075 0580 2D2D0D00 		.ascii	"--\015\000"
 5076 0584 00000000 		.space	4
 5077 0588 00       		.ascii	"\000"
 5078 0589 00000000 		.space	7
 5078      000000
 5079 0590 2D       		.byte	45
 5080 0591 000000   		.space	3
 5081 0594 FFFFFFFF 		.word	-1
 5082 0598 2E       		.byte	46
 5083 0599 000000   		.space	3
 5084 059c FFFFFFFF 		.word	-1
 5085 05a0 43505800 		.ascii	"CPX\000"
 5086 05a4 00000000 		.space	4
 5087 05a8 00       		.ascii	"\000"
 5088 05a9 00000000 		.space	7
 5088      000000
 5089 05b0 50726F67 		.ascii	"Program\000"
 5089      72616D00 
 5090 05b8 00000000 		.space	7
ARM GAS  /tmp/ccwTS9FK.s 			page 130


 5090      000000
 5091 05bf 00       		.space	1
 5092 05c0 27       		.byte	39
 5093 05c1 000000   		.space	3
 5094 05c4 01000000 		.word	1
 5095 05c8 28       		.byte	40
 5096 05c9 000000   		.space	3
 5097 05cc 01000000 		.word	1
 5098 05d0 4C424C00 		.ascii	"LBL\000"
 5099 05d4 00000000 		.space	4
 5100 05d8 44534500 		.ascii	"DSE\000"
 5101 05dc 00000000 		.space	4
 5102 05e0 27       		.byte	39
 5103 05e1 000000   		.space	3
 5104 05e4 02000000 		.word	2
 5105 05e8 28       		.byte	40
 5106 05e9 000000   		.space	3
 5107 05ec 02000000 		.word	2
 5108 05f0 52544E00 		.ascii	"RTN\000"
 5109 05f4 00000000 		.space	4
 5110 05f8 49534700 		.ascii	"ISG\000"
 5111 05fc 00000000 		.space	4
 5112 0600 25       		.byte	37
 5113 0601 000000   		.space	3
 5114 0604 03000000 		.word	3
 5115 0608 34       		.byte	52
 5116 0609 000000   		.space	3
 5117 060c 00600000 		.word	24576
 5118 0610 50617573 		.ascii	"Pause\000"
 5118      6500
 5119 0616 0000     		.space	2
 5120 0618 44454300 		.ascii	"DEC\000"
 5121 061c 00000000 		.space	4
 5122 0620 12       		.byte	18
 5123 0621 000000   		.space	3
 5124 0624 03000000 		.word	3
 5125 0628 34       		.byte	52
 5126 0629 000000   		.space	3
 5127 062c 00610000 		.word	24832
 5128 0630 47544F00 		.ascii	"GTO\000"
 5129 0634 00000000 		.space	4
 5130 0638 494E4300 		.ascii	"INC\000"
 5131 063c 00000000 		.space	4
 5132 0640 2C       		.byte	44
 5133 0641 000000   		.space	3
 5134 0644 FFFFFFFF 		.word	-1
 5135 0648 34       		.byte	52
 5136 0649 000000   		.space	3
 5137 064c 00570000 		.word	22272
 5138 0650 2D2D0D00 		.ascii	"--\015\000"
 5139 0654 00000000 		.space	4
 5140 0658 4241434B 		.ascii	"BACK\000"
 5140      00
 5141 065d 000000   		.space	3
 5142 0660 2D       		.byte	45
 5143 0661 000000   		.space	3
 5144 0664 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccwTS9FK.s 			page 131


 5145 0668 34       		.byte	52
 5146 0669 000000   		.space	3
 5147 066c 00560000 		.word	22016
 5148 0670 43505800 		.ascii	"CPX\000"
 5149 0674 00000000 		.space	4
 5150 0678 534B4950 		.ascii	"SKIP\000"
 5150      00
 5151 067d 000000   		.space	3
 5152 0680 53657475 		.ascii	"Setup 1\000"
 5152      70203100 
 5153 0688 00000000 		.space	7
 5153      000000
 5154 068f 00       		.space	1
 5155 0690 32       		.byte	50
 5156 0691 000000   		.space	3
 5157 0694 00000000 		.word	0
 5158 0698 30       		.byte	48
 5159 0699 000000   		.space	3
 5160 069c 00000000 		.word	0
 5161 06a0 45584954 		.ascii	"EXIT\000"
 5161      00
 5162 06a5 000000   		.space	3
 5163 06a8 53797374 		.ascii	"System\000"
 5163      656D00
 5164 06af 00       		.space	1
 5165 06b0 31       		.byte	49
 5166 06b1 000000   		.space	3
 5167 06b4 09000000 		.word	9
 5168 06b8 2E       		.byte	46
 5169 06b9 000000   		.space	3
 5170 06bc FFFFFFFF 		.word	-1
 5171 06c0 48454C50 		.ascii	"HELP\000"
 5171      00
 5172 06c5 000000   		.space	3
 5173 06c8 00       		.ascii	"\000"
 5174 06c9 00000000 		.space	7
 5174      000000
 5175 06d0 31       		.byte	49
 5176 06d1 000000   		.space	3
 5177 06d4 02000000 		.word	2
 5178 06d8 31       		.byte	49
 5179 06d9 000000   		.space	3
 5180 06dc 06000000 		.word	6
 5181 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5181      4F00
 5182 06e6 0000     		.space	2
 5183 06e8 53765241 		.ascii	"SvRAM\000"
 5183      4D00
 5184 06ee 0000     		.space	2
 5185 06f0 31       		.byte	49
 5186 06f1 000000   		.space	3
 5187 06f4 03000000 		.word	3
 5188 06f8 31       		.byte	49
 5189 06f9 000000   		.space	3
 5190 06fc 07000000 		.word	7
 5191 0700 4F6E5243 		.ascii	"OnRCL\000"
 5191      4C00
ARM GAS  /tmp/ccwTS9FK.s 			page 132


 5192 0706 0000     		.space	2
 5193 0708 4C645241 		.ascii	"LdRAM\000"
 5193      4D00
 5194 070e 0000     		.space	2
 5195 0710 2C       		.byte	44
 5196 0711 000000   		.space	3
 5197 0714 FFFFFFFF 		.word	-1
 5198 0718 2E       		.byte	46
 5199 0719 000000   		.space	3
 5200 071c FFFFFFFF 		.word	-1
 5201 0720 2D2D0D00 		.ascii	"--\015\000"
 5202 0724 00000000 		.space	4
 5203 0728 00       		.ascii	"\000"
 5204 0729 00000000 		.space	7
 5204      000000
 5205 0730 2D       		.byte	45
 5206 0731 000000   		.space	3
 5207 0734 FFFFFFFF 		.word	-1
 5208 0738 2E       		.byte	46
 5209 0739 000000   		.space	3
 5210 073c FFFFFFFF 		.word	-1
 5211 0740 43505800 		.ascii	"CPX\000"
 5212 0744 00000000 		.space	4
 5213 0748 00       		.ascii	"\000"
 5214 0749 00000000 		.space	7
 5214      000000
 5215 0750 4172726F 		.ascii	"Arrow\000"
 5215      7700
 5216 0756 00000000 		.space	9
 5216      00000000 
 5216      00
 5217 075f 00       		.space	1
 5218 0760 0E       		.byte	14
 5219 0761 000000   		.space	3
 5220 0764 01000000 		.word	1
 5221 0768 06       		.byte	6
 5222 0769 000000   		.space	3
 5223 076c 02000000 		.word	2
 5224 0770 42696E00 		.ascii	"Bin\000"
 5225 0774 00000000 		.space	4
 5226 0778 44454700 		.ascii	"DEG\000"
 5227 077c 00000000 		.space	4
 5228 0780 0E       		.byte	14
 5229 0781 000000   		.space	3
 5230 0784 02000000 		.word	2
 5231 0788 07       		.byte	7
 5232 0789 000000   		.space	3
 5233 078c 02000000 		.word	2
 5234 0790 4F637400 		.ascii	"Oct\000"
 5235 0794 00000000 		.space	4
 5236 0798 52414400 		.ascii	"RAD\000"
 5237 079c 00000000 		.space	4
 5238 07a0 0F       		.byte	15
 5239 07a1 000000   		.space	3
 5240 07a4 01000000 		.word	1
 5241 07a8 08       		.byte	8
 5242 07a9 000000   		.space	3
ARM GAS  /tmp/ccwTS9FK.s 			page 133


 5243 07ac 02000000 		.word	2
 5244 07b0 44656300 		.ascii	"Dec\000"
 5245 07b4 00000000 		.space	4
 5246 07b8 47726164 		.ascii	"Grad\000"
 5246      00
 5247 07bd 000000   		.space	3
 5248 07c0 0F       		.byte	15
 5249 07c1 000000   		.space	3
 5250 07c4 02000000 		.word	2
 5251 07c8 06       		.byte	6
 5252 07c9 000000   		.space	3
 5253 07cc 01000000 		.word	1
 5254 07d0 48657800 		.ascii	"Hex\000"
 5255 07d4 00000000 		.space	4
 5256 07d8 0D484D53 		.ascii	"\015HMS\000"
 5256      00
 5257 07dd 000000   		.space	3
 5258 07e0 2C       		.byte	44
 5259 07e1 000000   		.space	3
 5260 07e4 FFFFFFFF 		.word	-1
 5261 07e8 07       		.byte	7
 5262 07e9 000000   		.space	3
 5263 07ec 01000000 		.word	1
 5264 07f0 2D2D0D00 		.ascii	"--\015\000"
 5265 07f4 00000000 		.space	4
 5266 07f8 484D530D 		.ascii	"HMS\015\000"
 5266      00
 5267 07fd 000000   		.space	3
 5268 0800 2D       		.byte	45
 5269 0801 000000   		.space	3
 5270 0804 FFFFFFFF 		.word	-1
 5271 0808 2E       		.byte	46
 5272 0809 000000   		.space	3
 5273 080c FFFFFFFF 		.word	-1
 5274 0810 43505800 		.ascii	"CPX\000"
 5275 0814 00000000 		.space	4
 5276 0818 00       		.ascii	"\000"
 5277 0819 00000000 		.space	7
 5277      000000
 5278 0820 466C6167 		.ascii	"Flags\000"
 5278      7300
 5279 0826 00000000 		.space	9
 5279      00000000 
 5279      00
 5280 082f 00       		.space	1
 5281 0830 1E       		.byte	30
 5282 0831 000000   		.space	3
 5283 0834 01000000 		.word	1
 5284 0838 34       		.byte	52
 5285 0839 000000   		.space	3
 5286 083c 00740000 		.word	29696
 5287 0840 53465F00 		.ascii	"SF_\000"
 5288 0844 00000000 		.space	4
 5289 0848 46533F00 		.ascii	"FS?\000"
 5290 084c 00000000 		.space	4
 5291 0850 1E       		.byte	30
 5292 0851 000000   		.space	3
ARM GAS  /tmp/ccwTS9FK.s 			page 134


 5293 0854 02000000 		.word	2
 5294 0858 34       		.byte	52
 5295 0859 000000   		.space	3
 5296 085c 00750000 		.word	29952
 5297 0860 43465F00 		.ascii	"CF_\000"
 5298 0864 00000000 		.space	4
 5299 0868 46433F00 		.ascii	"FC?\000"
 5300 086c 00000000 		.space	4
 5301 0870 1F       		.byte	31
 5302 0871 000000   		.space	3
 5303 0874 01000000 		.word	1
 5304 0878 34       		.byte	52
 5305 0879 000000   		.space	3
 5306 087c 00500000 		.word	20480
 5307 0880 783D3F00 		.ascii	"x=?\000"
 5308 0884 00000000 		.space	4
 5309 0888 783C3F00 		.ascii	"x<?\000"
 5310 088c 00000000 		.space	4
 5311 0890 1F       		.byte	31
 5312 0891 000000   		.space	3
 5313 0894 02000000 		.word	2
 5314 0898 34       		.byte	52
 5315 0899 000000   		.space	3
 5316 089c 00510000 		.word	20736
 5317 08a0 780B3F00 		.ascii	"x\013?\000"
 5318 08a4 00000000 		.space	4
 5319 08a8 783C3D3F 		.ascii	"x<=?\000"
 5319      00
 5320 08ad 000000   		.space	3
 5321 08b0 2C       		.byte	44
 5322 08b1 000000   		.space	3
 5323 08b4 FFFFFFFF 		.word	-1
 5324 08b8 34       		.byte	52
 5325 08b9 000000   		.space	3
 5326 08bc 00530000 		.word	21248
 5327 08c0 2D2D0D00 		.ascii	"--\015\000"
 5328 08c4 00000000 		.space	4
 5329 08c8 783E3D3F 		.ascii	"x>=?\000"
 5329      00
 5330 08cd 000000   		.space	3
 5331 08d0 2D       		.byte	45
 5332 08d1 000000   		.space	3
 5333 08d4 FFFFFFFF 		.word	-1
 5334 08d8 34       		.byte	52
 5335 08d9 000000   		.space	3
 5336 08dc 00520000 		.word	20992
 5337 08e0 43505800 		.ascii	"CPX\000"
 5338 08e4 00000000 		.space	4
 5339 08e8 783E3F00 		.ascii	"x>?\000"
 5340 08ec 00000000 		.space	4
 5341 08f0 50726F62 		.ascii	"Probability\000"
 5341      6162696C 
 5341      69747900 
 5342 08fc 000000   		.space	3
 5343 08ff 00       		.space	1
 5344 0900 18       		.byte	24
 5345 0901 000000   		.space	3
ARM GAS  /tmp/ccwTS9FK.s 			page 135


 5346 0904 03000000 		.word	3
 5347 0908 34       		.byte	52
 5348 0909 000000   		.space	3
 5349 090c 31020000 		.word	561
 5350 0910 46616374 		.ascii	"Fact!\000"
 5350      2100
 5351 0916 0000     		.space	2
 5352 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5352      00
 5353 091d 000000   		.space	3
 5354 0920 18       		.byte	24
 5355 0921 000000   		.space	3
 5356 0924 01000000 		.word	1
 5357 0928 19       		.byte	25
 5358 0929 000000   		.space	3
 5359 092c 01000000 		.word	1
 5360 0930 43792C78 		.ascii	"Cy,x\000"
 5360      00
 5361 0935 000000   		.space	3
 5362 0938 9400     		.ascii	"\224\000"
 5363 093a 00000000 		.space	6
 5363      0000
 5364 0940 18       		.byte	24
 5365 0941 000000   		.space	3
 5366 0944 02000000 		.word	2
 5367 0948 19       		.byte	25
 5368 0949 000000   		.space	3
 5369 094c 02000000 		.word	2
 5370 0950 50792C78 		.ascii	"Py,x\000"
 5370      00
 5371 0955 000000   		.space	3
 5372 0958 949D00   		.ascii	"\224\235\000"
 5373 095b 00000000 		.space	5
 5373      00
 5374 0960 08       		.byte	8
 5375 0961 000000   		.space	3
 5376 0964 01000000 		.word	1
 5377 0968 34       		.byte	52
 5378 0969 000000   		.space	3
 5379 096c 34010000 		.word	308
 5380 0970 52414E23 		.ascii	"RAN#\000"
 5380      00
 5381 0975 000000   		.space	3
 5382 0978 53454544 		.ascii	"SEED\000"
 5382      00
 5383 097d 000000   		.space	3
 5384 0980 2C       		.byte	44
 5385 0981 000000   		.space	3
 5386 0984 FFFFFFFF 		.word	-1
 5387 0988 2E       		.byte	46
 5388 0989 000000   		.space	3
 5389 098c FFFFFFFF 		.word	-1
 5390 0990 2D2D0D00 		.ascii	"--\015\000"
 5391 0994 00000000 		.space	4
 5392 0998 00       		.ascii	"\000"
 5393 0999 00000000 		.space	7
 5393      000000
ARM GAS  /tmp/ccwTS9FK.s 			page 136


 5394 09a0 2D       		.byte	45
 5395 09a1 000000   		.space	3
 5396 09a4 FFFFFFFF 		.word	-1
 5397 09a8 2E       		.byte	46
 5398 09a9 000000   		.space	3
 5399 09ac FFFFFFFF 		.word	-1
 5400 09b0 43505800 		.ascii	"CPX\000"
 5401 09b4 00000000 		.space	4
 5402 09b8 00       		.ascii	"\000"
 5403 09b9 00000000 		.space	7
 5403      000000
 5404 09c0 53746174 		.ascii	"Statistics\000"
 5404      69737469 
 5404      637300
 5405 09cb 00000000 		.space	4
 5406 09cf 00       		.space	1
 5407 09d0 1A       		.byte	26
 5408 09d1 000000   		.space	3
 5409 09d4 01000000 		.word	1
 5410 09d8 1A       		.byte	26
 5411 09d9 000000   		.space	3
 5412 09dc 02000000 		.word	2
 5413 09e0 0100     		.ascii	"\001\000"
 5414 09e2 00000000 		.space	6
 5414      0000
 5415 09e8 532E442E 		.ascii	"S.D.\000"
 5415      00
 5416 09ed 000000   		.space	3
 5417 09f0 1B       		.byte	27
 5418 09f1 000000   		.space	3
 5419 09f4 01000000 		.word	1
 5420 09f8 34       		.byte	52
 5421 09f9 000000   		.space	3
 5422 09fc 74020000 		.word	628
 5423 0a00 792D6861 		.ascii	"y-hat\000"
 5423      7400
 5424 0a06 0000     		.space	2
 5425 0a08 782D6861 		.ascii	"x-hat\000"
 5425      7400
 5426 0a0e 0000     		.space	2
 5427 0a10 34       		.byte	52
 5428 0a11 000000   		.space	3
 5429 0a14 27010000 		.word	295
 5430 0a18 34       		.byte	52
 5431 0a19 000000   		.space	3
 5432 0a1c 28010000 		.word	296
 5433 0a20 434F5252 		.ascii	"CORR\000"
 5433      00
 5434 0a25 000000   		.space	3
 5435 0a28 4C2E522E 		.ascii	"L.R.\000"
 5435      00
 5436 0a2d 000000   		.space	3
 5437 0a30 34       		.byte	52
 5438 0a31 000000   		.space	3
 5439 0a34 32010000 		.word	306
 5440 0a38 34       		.byte	52
 5441 0a39 000000   		.space	3
ARM GAS  /tmp/ccwTS9FK.s 			page 137


 5442 0a3c 31010000 		.word	305
 5443 0a40 42657374 		.ascii	"BestF\000"
 5443      4600
 5444 0a46 0000     		.space	2
 5445 0a48 4C6F6746 		.ascii	"LogFit\000"
 5445      697400
 5446 0a4f 00       		.space	1
 5447 0a50 34       		.byte	52
 5448 0a51 000000   		.space	3
 5449 0a54 2E010000 		.word	302
 5450 0a58 34       		.byte	52
 5451 0a59 000000   		.space	3
 5452 0a5c 2F010000 		.word	303
 5453 0a60 4C696E65 		.ascii	"Linear\000"
 5453      617200
 5454 0a67 00       		.space	1
 5455 0a68 45787046 		.ascii	"ExpFit\000"
 5455      697400
 5456 0a6f 00       		.space	1
 5457 0a70 2D       		.byte	45
 5458 0a71 000000   		.space	3
 5459 0a74 FFFFFFFF 		.word	-1
 5460 0a78 34       		.byte	52
 5461 0a79 000000   		.space	3
 5462 0a7c 30010000 		.word	304
 5463 0a80 43505800 		.ascii	"CPX\000"
 5464 0a84 00000000 		.space	4
 5465 0a88 50777246 		.ascii	"PwrFit\000"
 5465      697400
 5466 0a8f 00       		.space	1
 5467 0a90 53657475 		.ascii	"Setup 2\000"
 5467      70203200 
 5468 0a98 00000000 		.space	7
 5468      000000
 5469 0a9f 00       		.space	1
 5470 0aa0 31       		.byte	49
 5471 0aa1 000000   		.space	3
 5472 0aa4 04000000 		.word	4
 5473 0aa8 2E       		.byte	46
 5474 0aa9 000000   		.space	3
 5475 0aac FFFFFFFF 		.word	-1
 5476 0ab0 53764C49 		.ascii	"SvLIB\000"
 5476      4200
 5477 0ab6 0000     		.space	2
 5478 0ab8 00       		.ascii	"\000"
 5479 0ab9 00000000 		.space	7
 5479      000000
 5480 0ac0 31       		.byte	49
 5481 0ac1 000000   		.space	3
 5482 0ac4 05000000 		.word	5
 5483 0ac8 2E       		.byte	46
 5484 0ac9 000000   		.space	3
 5485 0acc FFFFFFFF 		.word	-1
 5486 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5486      4200
 5487 0ad6 0000     		.space	2
 5488 0ad8 00       		.ascii	"\000"
ARM GAS  /tmp/ccwTS9FK.s 			page 138


 5489 0ad9 00000000 		.space	7
 5489      000000
 5490 0ae0 31       		.byte	49
 5491 0ae1 000000   		.space	3
 5492 0ae4 0A000000 		.word	10
 5493 0ae8 2E       		.byte	46
 5494 0ae9 000000   		.space	3
 5495 0aec FFFFFFFF 		.word	-1
 5496 0af0 53764350 		.ascii	"SvCPRG\000"
 5496      524700
 5497 0af7 00       		.space	1
 5498 0af8 00       		.ascii	"\000"
 5499 0af9 00000000 		.space	7
 5499      000000
 5500 0b00 31       		.byte	49
 5501 0b01 000000   		.space	3
 5502 0b04 08000000 		.word	8
 5503 0b08 2E       		.byte	46
 5504 0b09 000000   		.space	3
 5505 0b0c FFFFFFFF 		.word	-1
 5506 0b10 4C645052 		.ascii	"LdPRG\000"
 5506      4700
 5507 0b16 0000     		.space	2
 5508 0b18 00       		.ascii	"\000"
 5509 0b19 00000000 		.space	7
 5509      000000
 5510 0b20 2C       		.byte	44
 5511 0b21 000000   		.space	3
 5512 0b24 FFFFFFFF 		.word	-1
 5513 0b28 2E       		.byte	46
 5514 0b29 000000   		.space	3
 5515 0b2c FFFFFFFF 		.word	-1
 5516 0b30 2D2D0D00 		.ascii	"--\015\000"
 5517 0b34 00000000 		.space	4
 5518 0b38 00       		.ascii	"\000"
 5519 0b39 00000000 		.space	7
 5519      000000
 5520 0b40 2D       		.byte	45
 5521 0b41 000000   		.space	3
 5522 0b44 FFFFFFFF 		.word	-1
 5523 0b48 2E       		.byte	46
 5524 0b49 000000   		.space	3
 5525 0b4c FFFFFFFF 		.word	-1
 5526 0b50 43505800 		.ascii	"CPX\000"
 5527 0b54 00000000 		.space	4
 5528 0b58 00       		.ascii	"\000"
 5529 0b59 00000000 		.space	7
 5529      000000
 5530 0b60 496E7465 		.ascii	"Integ/Sum/Prod\000"
 5530      672F5375 
 5530      6D2F5072 
 5530      6F6400
 5531 0b6f 00       		.space	1
 5532 0b70 20       		.byte	32
 5533 0b71 000000   		.space	3
 5534 0b74 01000000 		.word	1
 5535 0b78 2E       		.byte	46
ARM GAS  /tmp/ccwTS9FK.s 			page 139


 5536 0b79 000000   		.space	3
 5537 0b7c FFFFFFFF 		.word	-1
 5538 0b80 534C5600 		.ascii	"SLV\000"
 5539 0b84 00000000 		.space	4
 5540 0b88 00       		.ascii	"\000"
 5541 0b89 00000000 		.space	7
 5541      000000
 5542 0b90 20       		.byte	32
 5543 0b91 000000   		.space	3
 5544 0b94 02000000 		.word	2
 5545 0b98 2E       		.byte	46
 5546 0b99 000000   		.space	3
 5547 0b9c FFFFFFFF 		.word	-1
 5548 0ba0 04206478 		.ascii	"\004 dx\000"
 5548      00
 5549 0ba5 000000   		.space	3
 5550 0ba8 00       		.ascii	"\000"
 5551 0ba9 00000000 		.space	7
 5551      000000
 5552 0bb0 21       		.byte	33
 5553 0bb1 000000   		.space	3
 5554 0bb4 02000000 		.word	2
 5555 0bb8 2E       		.byte	46
 5556 0bb9 000000   		.space	3
 5557 0bbc FFFFFFFF 		.word	-1
 5558 0bc0 53554D00 		.ascii	"SUM\000"
 5559 0bc4 00000000 		.space	4
 5560 0bc8 00       		.ascii	"\000"
 5561 0bc9 00000000 		.space	7
 5561      000000
 5562 0bd0 21       		.byte	33
 5563 0bd1 000000   		.space	3
 5564 0bd4 01000000 		.word	1
 5565 0bd8 2E       		.byte	46
 5566 0bd9 000000   		.space	3
 5567 0bdc FFFFFFFF 		.word	-1
 5568 0be0 50524F44 		.ascii	"PROD\000"
 5568      00
 5569 0be5 000000   		.space	3
 5570 0be8 00       		.ascii	"\000"
 5571 0be9 00000000 		.space	7
 5571      000000
 5572 0bf0 2C       		.byte	44
 5573 0bf1 000000   		.space	3
 5574 0bf4 FFFFFFFF 		.word	-1
 5575 0bf8 2E       		.byte	46
 5576 0bf9 000000   		.space	3
 5577 0bfc FFFFFFFF 		.word	-1
 5578 0c00 2D2D0D00 		.ascii	"--\015\000"
 5579 0c04 00000000 		.space	4
 5580 0c08 00       		.ascii	"\000"
 5581 0c09 00000000 		.space	7
 5581      000000
 5582 0c10 2D       		.byte	45
 5583 0c11 000000   		.space	3
 5584 0c14 FFFFFFFF 		.word	-1
 5585 0c18 2E       		.byte	46
ARM GAS  /tmp/ccwTS9FK.s 			page 140


 5586 0c19 000000   		.space	3
 5587 0c1c FFFFFFFF 		.word	-1
 5588 0c20 43505800 		.ascii	"CPX\000"
 5589 0c24 00000000 		.space	4
 5590 0c28 00       		.ascii	"\000"
 5591 0c29 00000000 		.space	7
 5591      000000
 5592 0c30 426C616E 		.ascii	"Blank with A-D\000"
 5592      6B207769 
 5592      74682041 
 5592      2D4400
 5593 0c3f 00       		.space	1
 5594 0c40 28       		.byte	40
 5595 0c41 000000   		.space	3
 5596 0c44 03000000 		.word	3
 5597 0c48 2E       		.byte	46
 5598 0c49 000000   		.space	3
 5599 0c4c FFFFFFFF 		.word	-1
 5600 0c50 912B00   		.ascii	"\221+\000"
 5601 0c53 00000000 		.space	5
 5601      00
 5602 0c58 00       		.ascii	"\000"
 5603 0c59 00000000 		.space	7
 5603      000000
 5604 0c60 16       		.byte	22
 5605 0c61 000000   		.space	3
 5606 0c64 01000000 		.word	1
 5607 0c68 2E       		.byte	46
 5608 0c69 000000   		.space	3
 5609 0c6c FFFFFFFF 		.word	-1
 5610 0c70 312F5800 		.ascii	"1/X\000"
 5611 0c74 00000000 		.space	4
 5612 0c78 00       		.ascii	"\000"
 5613 0c79 00000000 		.space	7
 5613      000000
 5614 0c80 1C       		.byte	28
 5615 0c81 000000   		.space	3
 5616 0c84 01000000 		.word	1
 5617 0c88 2E       		.byte	46
 5618 0c89 000000   		.space	3
 5619 0c8c FFFFFFFF 		.word	-1
 5620 0c90 035800   		.ascii	"\003X\000"
 5621 0c93 00000000 		.space	5
 5621      00
 5622 0c98 00       		.ascii	"\000"
 5623 0c99 00000000 		.space	7
 5623      000000
 5624 0ca0 13       		.byte	19
 5625 0ca1 000000   		.space	3
 5626 0ca4 02000000 		.word	2
 5627 0ca8 2E       		.byte	46
 5628 0ca9 000000   		.space	3
 5629 0cac FFFFFFFF 		.word	-1
 5630 0cb0 4C4F4700 		.ascii	"LOG\000"
 5631 0cb4 00000000 		.space	4
 5632 0cb8 00       		.ascii	"\000"
 5633 0cb9 00000000 		.space	7
ARM GAS  /tmp/ccwTS9FK.s 			page 141


 5633      000000
 5634 0cc0 2C       		.byte	44
 5635 0cc1 000000   		.space	3
 5636 0cc4 FFFFFFFF 		.word	-1
 5637 0cc8 2E       		.byte	46
 5638 0cc9 000000   		.space	3
 5639 0ccc FFFFFFFF 		.word	-1
 5640 0cd0 2D2D0D00 		.ascii	"--\015\000"
 5641 0cd4 00000000 		.space	4
 5642 0cd8 00       		.ascii	"\000"
 5643 0cd9 00000000 		.space	7
 5643      000000
 5644 0ce0 2D       		.byte	45
 5645 0ce1 000000   		.space	3
 5646 0ce4 FFFFFFFF 		.word	-1
 5647 0ce8 2E       		.byte	46
 5648 0ce9 000000   		.space	3
 5649 0cec FFFFFFFF 		.word	-1
 5650 0cf0 43505800 		.ascii	"CPX\000"
 5651 0cf4 00000000 		.space	4
 5652 0cf8 00       		.ascii	"\000"
 5653 0cf9 00000000 		.space	7
 5653      000000
 5654 0d00 416C7068 		.ascii	"Alpha\000"
 5654      6100
 5655 0d06 00000000 		.space	9
 5655      00000000 
 5655      00
 5656 0d0f 00       		.space	1
 5657 0d10 34       		.byte	52
 5658 0d11 000000   		.space	3
 5659 0d14 78010000 		.word	376
 5660 0d18 34       		.byte	52
 5661 0d19 000000   		.space	3
 5662 0d1c 6D010000 		.word	365
 5663 0d20 582D3EA0 		.ascii	"X->\240\000"
 5663      00
 5664 0d25 000000   		.space	3
 5665 0d28 A054494D 		.ascii	"\240TIME\000"
 5665      4500
 5666 0d2e 0000     		.space	2
 5667 0d30 34       		.byte	52
 5668 0d31 000000   		.space	3
 5669 0d34 77010000 		.word	375
 5670 0d38 34       		.byte	52
 5671 0d39 000000   		.space	3
 5672 0d3c 6C010000 		.word	364
 5673 0d40 A02D3E58 		.ascii	"\240->X\000"
 5673      00
 5674 0d45 000000   		.space	3
 5675 0d48 A0444154 		.ascii	"\240DATE\000"
 5675      4500
 5676 0d4e 0000     		.space	2
 5677 0d50 34       		.byte	52
 5678 0d51 000000   		.space	3
 5679 0d54 00480000 		.word	18432
 5680 0d58 34       		.byte	52
ARM GAS  /tmp/ccwTS9FK.s 			page 142


 5681 0d59 000000   		.space	3
 5682 0d5c 6A010000 		.word	362
 5683 0d60 A0495000 		.ascii	"\240IP\000"
 5684 0d64 00000000 		.space	4
 5685 0d68 A0444159 		.ascii	"\240DAY\000"
 5685      00
 5686 0d6d 000000   		.space	3
 5687 0d70 34       		.byte	52
 5688 0d71 000000   		.space	3
 5689 0d74 76010000 		.word	374
 5690 0d78 34       		.byte	52
 5691 0d79 000000   		.space	3
 5692 0d7c 6B010000 		.word	363
 5693 0d80 A04C454E 		.ascii	"\240LENG\000"
 5693      4700
 5694 0d86 0000     		.space	2
 5695 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 5695      4800
 5696 0d8e 0000     		.space	2
 5697 0d90 2C       		.byte	44
 5698 0d91 000000   		.space	3
 5699 0d94 FFFFFFFF 		.word	-1
 5700 0d98 2C       		.byte	44
 5701 0d99 000000   		.space	3
 5702 0d9c 01000000 		.word	1
 5703 0da0 2D2D0D00 		.ascii	"--\015\000"
 5704 0da4 00000000 		.space	4
 5705 0da8 00       		.ascii	"\000"
 5706 0da9 00000000 		.space	7
 5706      000000
 5707 0db0 2D       		.byte	45
 5708 0db1 000000   		.space	3
 5709 0db4 FFFFFFFF 		.word	-1
 5710 0db8 2D       		.byte	45
 5711 0db9 000000   		.space	3
 5712 0dbc 01000000 		.word	1
 5713 0dc0 43505800 		.ascii	"CPX\000"
 5714 0dc4 00000000 		.space	4
 5715 0dc8 00       		.ascii	"\000"
 5716 0dc9 00000000 		.space	7
 5716      000000
 5717              		.section	.rodata.mapping_alpha.10972,"a"
 5718              		.align	2
 5719              		.set	.LANCHOR19,. + 0
 5722              	mapping_alpha.10972:
 5723 0000 63       		.byte	99
 5724 0001 000000   		.space	3
 5725 0004 FFFFFFFF 		.word	-1
 5726 0008 00       		.byte	0
 5727 0009 000000   		.space	3
 5728 000c FFFFFFFF 		.word	-1
 5729 0010 01       		.byte	1
 5730 0011 000000   		.space	3
 5731 0014 FFFFFFFF 		.word	-1
 5732 0018 02       		.byte	2
 5733 0019 000000   		.space	3
 5734 001c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccwTS9FK.s 			page 143


 5735 0020 03       		.byte	3
 5736 0021 000000   		.space	3
 5737 0024 FFFFFFFF 		.word	-1
 5738 0028 04       		.byte	4
 5739 0029 000000   		.space	3
 5740 002c FFFFFFFF 		.word	-1
 5741 0030 05       		.byte	5
 5742 0031 000000   		.space	3
 5743 0034 FFFFFFFF 		.word	-1
 5744 0038 06       		.byte	6
 5745 0039 000000   		.space	3
 5746 003c FFFFFFFF 		.word	-1
 5747 0040 07       		.byte	7
 5748 0041 000000   		.space	3
 5749 0044 FFFFFFFF 		.word	-1
 5750 0048 08       		.byte	8
 5751 0049 000000   		.space	3
 5752 004c FFFFFFFF 		.word	-1
 5753 0050 09       		.byte	9
 5754 0051 000000   		.space	3
 5755 0054 FFFFFFFF 		.word	-1
 5756 0058 0A       		.byte	10
 5757 0059 000000   		.space	3
 5758 005c FFFFFFFF 		.word	-1
 5759 0060 0B       		.byte	11
 5760 0061 000000   		.space	3
 5761 0064 FFFFFFFF 		.word	-1
 5762 0068 0C       		.byte	12
 5763 0069 000000   		.space	3
 5764 006c FFFFFFFF 		.word	-1
 5765 0070 0D       		.byte	13
 5766 0071 000000   		.space	3
 5767 0074 FFFFFFFF 		.word	-1
 5768 0078 0E       		.byte	14
 5769 0079 000000   		.space	3
 5770 007c FFFFFFFF 		.word	-1
 5771 0080 0F       		.byte	15
 5772 0081 000000   		.space	3
 5773 0084 FFFFFFFF 		.word	-1
 5774 0088 10       		.byte	16
 5775 0089 000000   		.space	3
 5776 008c FFFFFFFF 		.word	-1
 5777 0090 12       		.byte	18
 5778 0091 000000   		.space	3
 5779 0094 FFFFFFFF 		.word	-1
 5780 0098 13       		.byte	19
 5781 0099 000000   		.space	3
 5782 009c FFFFFFFF 		.word	-1
 5783 00a0 14       		.byte	20
 5784 00a1 000000   		.space	3
 5785 00a4 FFFFFFFF 		.word	-1
 5786 00a8 15       		.byte	21
 5787 00a9 000000   		.space	3
 5788 00ac FFFFFFFF 		.word	-1
 5789 00b0 16       		.byte	22
 5790 00b1 000000   		.space	3
 5791 00b4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccwTS9FK.s 			page 144


 5792 00b8 18       		.byte	24
 5793 00b9 000000   		.space	3
 5794 00bc FFFFFFFF 		.word	-1
 5795 00c0 19       		.byte	25
 5796 00c1 000000   		.space	3
 5797 00c4 FFFFFFFF 		.word	-1
 5798 00c8 1A       		.byte	26
 5799 00c9 000000   		.space	3
 5800 00cc FFFFFFFF 		.word	-1
 5801 00d0 1B       		.byte	27
 5802 00d1 000000   		.space	3
 5803 00d4 FFFFFFFF 		.word	-1
 5804 00d8 1C       		.byte	28
 5805 00d9 000000   		.space	3
 5806 00dc FFFFFFFF 		.word	-1
 5807 00e0 1E       		.byte	30
 5808 00e1 000000   		.space	3
 5809 00e4 FFFFFFFF 		.word	-1
 5810 00e8 1F       		.byte	31
 5811 00e9 000000   		.space	3
 5812 00ec FFFFFFFF 		.word	-1
 5813 00f0 20       		.byte	32
 5814 00f1 000000   		.space	3
 5815 00f4 FFFFFFFF 		.word	-1
 5816 00f8 21       		.byte	33
 5817 00f9 000000   		.space	3
 5818 00fc FFFFFFFF 		.word	-1
 5819 0100 22       		.byte	34
 5820 0101 000000   		.space	3
 5821 0104 FFFFFFFF 		.word	-1
 5822 0108 24       		.byte	36
 5823 0109 000000   		.space	3
 5824 010c FFFFFFFF 		.word	-1
 5825 0110 25       		.byte	37
 5826 0111 000000   		.space	3
 5827 0114 FFFFFFFF 		.word	-1
 5828 0118 26       		.byte	38
 5829 0119 000000   		.space	3
 5830 011c FFFFFFFF 		.word	-1
 5831 0120 27       		.byte	39
 5832 0121 000000   		.space	3
 5833 0124 FFFFFFFF 		.word	-1
 5834 0128 28       		.byte	40
 5835 0129 000000   		.space	3
 5836 012c FFFFFFFF 		.word	-1
 5837 0130 2E       		.byte	46
 5838 0131 000000   		.space	3
 5839 0134 FFFFFFFF 		.word	-1
 5840 0138 2E       		.byte	46
 5841 0139 000000   		.space	3
 5842 013c FFFFFFFF 		.word	-1
 5843 0140 2E       		.byte	46
 5844 0141 000000   		.space	3
 5845 0144 FFFFFFFF 		.word	-1
 5846 0148 2E       		.byte	46
 5847 0149 000000   		.space	3
 5848 014c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccwTS9FK.s 			page 145


 5849 0150 2C       		.byte	44
 5850 0151 000000   		.space	3
 5851 0154 FFFFFFFF 		.word	-1
 5852 0158 2D       		.byte	45
 5853 0159 000000   		.space	3
 5854 015c FFFFFFFF 		.word	-1
 5855 0160 2E       		.byte	46
 5856 0161 000000   		.space	3
 5857 0164 FFFFFFFF 		.word	-1
 5858 0168 2E       		.byte	46
 5859 0169 000000   		.space	3
 5860 016c FFFFFFFF 		.word	-1
 5861 0170 2E       		.byte	46
 5862 0171 000000   		.space	3
 5863 0174 FFFFFFFF 		.word	-1
 5864              		.section	.rodata.mapping_fshift.10970,"a"
 5865              		.align	2
 5866              		.set	.LANCHOR17,. + 0
 5869              	mapping_fshift.10970:
 5870 0000 63       		.byte	99
 5871 0001 000000   		.space	3
 5872 0004 FFFFFFFF 		.word	-1
 5873 0008 22       		.byte	34
 5874 0009 000000   		.space	3
 5875 000c 03000000 		.word	3
 5876 0010 15       		.byte	21
 5877 0011 000000   		.space	3
 5878 0014 01000000 		.word	1
 5879 0018 1C       		.byte	28
 5880 0019 000000   		.space	3
 5881 001c 02000000 		.word	2
 5882 0020 13       		.byte	19
 5883 0021 000000   		.space	3
 5884 0024 01000000 		.word	1
 5885 0028 12       		.byte	18
 5886 0029 000000   		.space	3
 5887 002c 01000000 		.word	1
 5888 0030 12       		.byte	18
 5889 0031 000000   		.space	3
 5890 0034 03000000 		.word	3
 5891 0038 2D       		.byte	45
 5892 0039 000000   		.space	3
 5893 003c 00000000 		.word	0
 5894 0040 22       		.byte	34
 5895 0041 000000   		.space	3
 5896 0044 01000000 		.word	1
 5897 0048 0F       		.byte	15
 5898 0049 000000   		.space	3
 5899 004c 03000000 		.word	3
 5900 0050 01       		.byte	1
 5901 0051 000000   		.space	3
 5902 0054 02000000 		.word	2
 5903 0058 02       		.byte	2
 5904 0059 000000   		.space	3
 5905 005c 02000000 		.word	2
 5906 0060 03       		.byte	3
 5907 0061 000000   		.space	3
ARM GAS  /tmp/ccwTS9FK.s 			page 146


 5908 0064 02000000 		.word	2
 5909 0068 0C       		.byte	12
 5910 0069 000000   		.space	3
 5911 006c 01000000 		.word	1
 5912 0070 31       		.byte	49
 5913 0071 000000   		.space	3
 5914 0074 01000000 		.word	1
 5915 0078 2F       		.byte	47
 5916 0079 000000   		.space	3
 5917 007c 04000000 		.word	4
 5918 0080 2F       		.byte	47
 5919 0081 000000   		.space	3
 5920 0084 02000000 		.word	2
 5921 0088 2F       		.byte	47
 5922 0089 000000   		.space	3
 5923 008c 01000000 		.word	1
 5924 0090 18       		.byte	24
 5925 0091 000000   		.space	3
 5926 0094 00000000 		.word	0
 5927 0098 20       		.byte	32
 5928 0099 000000   		.space	3
 5929 009c 01000000 		.word	1
 5930 00a0 2F       		.byte	47
 5931 00a1 000000   		.space	3
 5932 00a4 0E000000 		.word	14
 5933 00a8 1C       		.byte	28
 5934 00a9 000000   		.space	3
 5935 00ac 03000000 		.word	3
 5936 00b0 2F       		.byte	47
 5937 00b1 000000   		.space	3
 5938 00b4 0C000000 		.word	12
 5939 00b8 1E       		.byte	30
 5940 00b9 000000   		.space	3
 5941 00bc 00000000 		.word	0
 5942 00c0 2F       		.byte	47
 5943 00c1 000000   		.space	3
 5944 00c4 03000000 		.word	3
 5945 00c8 04       		.byte	4
 5946 00c9 000000   		.space	3
 5947 00cc 03000000 		.word	3
 5948 00d0 2F       		.byte	47
 5949 00d1 000000   		.space	3
 5950 00d4 0A000000 		.word	10
 5951 00d8 2F       		.byte	47
 5952 00d9 000000   		.space	3
 5953 00dc 0B000000 		.word	11
 5954 00e0 2A       		.byte	42
 5955 00e1 000000   		.space	3
 5956 00e4 00000000 		.word	0
 5957 00e8 31       		.byte	49
 5958 00e9 000000   		.space	3
 5959 00ec 0D000000 		.word	13
 5960 00f0 2F       		.byte	47
 5961 00f1 000000   		.space	3
 5962 00f4 63000000 		.word	99
 5963 00f8 20       		.byte	32
 5964 00f9 000000   		.space	3
ARM GAS  /tmp/ccwTS9FK.s 			page 147


 5965 00fc 03000000 		.word	3
 5966 0100 2E       		.byte	46
 5967 0101 000000   		.space	3
 5968 0104 00000000 		.word	0
 5969 0108 24       		.byte	36
 5970 0109 000000   		.space	3
 5971 010c 03000000 		.word	3
 5972 0110 2F       		.byte	47
 5973 0111 000000   		.space	3
 5974 0114 08000000 		.word	8
 5975 0118 0D       		.byte	13
 5976 0119 000000   		.space	3
 5977 011c 01000000 		.word	1
 5978 0120 27       		.byte	39
 5979 0121 000000   		.space	3
 5980 0124 03000000 		.word	3
 5981 0128 06       		.byte	6
 5982 0129 000000   		.space	3
 5983 012c 03000000 		.word	3
 5984 0130 2E       		.byte	46
 5985 0131 000000   		.space	3
 5986 0134 00000000 		.word	0
 5987 0138 2E       		.byte	46
 5988 0139 000000   		.space	3
 5989 013c 00000000 		.word	0
 5990 0140 2E       		.byte	46
 5991 0141 000000   		.space	3
 5992 0144 00000000 		.word	0
 5993 0148 2E       		.byte	46
 5994 0149 000000   		.space	3
 5995 014c 00000000 		.word	0
 5996 0150 2E       		.byte	46
 5997 0151 000000   		.space	3
 5998 0154 00000000 		.word	0
 5999 0158 2E       		.byte	46
 6000 0159 000000   		.space	3
 6001 015c 00000000 		.word	0
 6002 0160 2E       		.byte	46
 6003 0161 000000   		.space	3
 6004 0164 00000000 		.word	0
 6005 0168 2F       		.byte	47
 6006 0169 000000   		.space	3
 6007 016c FFFFFFFF 		.word	-1
 6008 0170 2F       		.byte	47
 6009 0171 000000   		.space	3
 6010 0174 05000000 		.word	5
 6011              		.section	.rodata.mapping_gshift.10971,"a"
 6012              		.align	2
 6013              		.set	.LANCHOR20,. + 0
 6016              	mapping_gshift.10971:
 6017 0000 63       		.byte	99
 6018 0001 000000   		.space	3
 6019 0004 FFFFFFFF 		.word	-1
 6020 0008 28       		.byte	40
 6021 0009 000000   		.space	3
 6022 000c 03000000 		.word	3
 6023 0010 16       		.byte	22
ARM GAS  /tmp/ccwTS9FK.s 			page 148


 6024 0011 000000   		.space	3
 6025 0014 01000000 		.word	1
 6026 0018 1C       		.byte	28
 6027 0019 000000   		.space	3
 6028 001c 01000000 		.word	1
 6029 0020 13       		.byte	19
 6030 0021 000000   		.space	3
 6031 0024 02000000 		.word	2
 6032 0028 2E       		.byte	46
 6033 0029 000000   		.space	3
 6034 002c 00000000 		.word	0
 6035 0030 2E       		.byte	46
 6036 0031 000000   		.space	3
 6037 0034 00000000 		.word	0
 6038 0038 2E       		.byte	46
 6039 0039 000000   		.space	3
 6040 003c 00000000 		.word	0
 6041 0040 07       		.byte	7
 6042 0041 000000   		.space	3
 6043 0044 03000000 		.word	3
 6044 0048 08       		.byte	8
 6045 0049 000000   		.space	3
 6046 004c 03000000 		.word	3
 6047 0050 2F       		.byte	47
 6048 0051 000000   		.space	3
 6049 0054 04000000 		.word	4
 6050 0058 2F       		.byte	47
 6051 0059 000000   		.space	3
 6052 005c 04000000 		.word	4
 6053 0060 2F       		.byte	47
 6054 0061 000000   		.space	3
 6055 0064 04000000 		.word	4
 6056 0068 0C       		.byte	12
 6057 0069 000000   		.space	3
 6058 006c 02000000 		.word	2
 6059 0070 2F       		.byte	47
 6060 0071 000000   		.space	3
 6061 0074 06000000 		.word	6
 6062 0078 05       		.byte	5
 6063 0079 000000   		.space	3
 6064 007c 03000000 		.word	3
 6065 0080 2E       		.byte	46
 6066 0081 000000   		.space	3
 6067 0084 00000000 		.word	0
 6068 0088 2E       		.byte	46
 6069 0089 000000   		.space	3
 6070 008c 00000000 		.word	0
 6071 0090 2E       		.byte	46
 6072 0091 000000   		.space	3
 6073 0094 00000000 		.word	0
 6074 0098 2E       		.byte	46
 6075 0099 000000   		.space	3
 6076 009c 00000000 		.word	0
 6077 00a0 2E       		.byte	46
 6078 00a1 000000   		.space	3
 6079 00a4 00000000 		.word	0
 6080 00a8 1B       		.byte	27
ARM GAS  /tmp/ccwTS9FK.s 			page 149


 6081 00a9 000000   		.space	3
 6082 00ac 03000000 		.word	3
 6083 00b0 1A       		.byte	26
 6084 00b1 000000   		.space	3
 6085 00b4 03000000 		.word	3
 6086 00b8 2E       		.byte	46
 6087 00b9 000000   		.space	3
 6088 00bc 00000000 		.word	0
 6089 00c0 2E       		.byte	46
 6090 00c1 000000   		.space	3
 6091 00c4 00000000 		.word	0
 6092 00c8 0C       		.byte	12
 6093 00c9 000000   		.space	3
 6094 00cc 03000000 		.word	3
 6095 00d0 1F       		.byte	31
 6096 00d1 000000   		.space	3
 6097 00d4 03000000 		.word	3
 6098 00d8 19       		.byte	25
 6099 00d9 000000   		.space	3
 6100 00dc 03000000 		.word	3
 6101 00e0 2A       		.byte	42
 6102 00e1 000000   		.space	3
 6103 00e4 FFFFFFFF 		.word	-1
 6104 00e8 2E       		.byte	46
 6105 00e9 000000   		.space	3
 6106 00ec 00000000 		.word	0
 6107 00f0 31       		.byte	49
 6108 00f1 000000   		.space	3
 6109 00f4 0E000000 		.word	14
 6110 00f8 21       		.byte	33
 6111 00f9 000000   		.space	3
 6112 00fc 03000000 		.word	3
 6113 0100 2E       		.byte	46
 6114 0101 000000   		.space	3
 6115 0104 00000000 		.word	0
 6116 0108 24       		.byte	36
 6117 0109 000000   		.space	3
 6118 010c 02000000 		.word	2
 6119 0110 2F       		.byte	47
 6120 0111 000000   		.space	3
 6121 0114 0D000000 		.word	13
 6122 0118 2E       		.byte	46
 6123 0119 000000   		.space	3
 6124 011c 00000000 		.word	0
 6125 0120 2F       		.byte	47
 6126 0121 000000   		.space	3
 6127 0124 07000000 		.word	7
 6128 0128 1E       		.byte	30
 6129 0129 000000   		.space	3
 6130 012c 03000000 		.word	3
 6131 0130 2E       		.byte	46
 6132 0131 000000   		.space	3
 6133 0134 00000000 		.word	0
 6134 0138 2E       		.byte	46
 6135 0139 000000   		.space	3
 6136 013c 00000000 		.word	0
 6137 0140 2E       		.byte	46
ARM GAS  /tmp/ccwTS9FK.s 			page 150


 6138 0141 000000   		.space	3
 6139 0144 00000000 		.word	0
 6140 0148 2E       		.byte	46
 6141 0149 000000   		.space	3
 6142 014c 00000000 		.word	0
 6143 0150 2E       		.byte	46
 6144 0151 000000   		.space	3
 6145 0154 00000000 		.word	0
 6146 0158 2E       		.byte	46
 6147 0159 000000   		.space	3
 6148 015c 00000000 		.word	0
 6149 0160 2E       		.byte	46
 6150 0161 000000   		.space	3
 6151 0164 00000000 		.word	0
 6152 0168 2E       		.byte	46
 6153 0169 000000   		.space	3
 6154 016c 00000000 		.word	0
 6155 0170 2E       		.byte	46
 6156 0171 000000   		.space	3
 6157 0174 00000000 		.word	0
 6158              		.section	.rodata.mapping_none.10969,"a"
 6159              		.align	2
 6160              		.set	.LANCHOR16,. + 0
 6163              	mapping_none.10969:
 6164 0000 63       		.byte	99
 6165 0001 000000   		.space	3
 6166 0004 FFFFFFFF 		.word	-1
 6167 0008 00       		.byte	0
 6168 0009 000000   		.space	3
 6169 000c 00000000 		.word	0
 6170 0010 01       		.byte	1
 6171 0011 000000   		.space	3
 6172 0014 00000000 		.word	0
 6173 0018 03       		.byte	3
 6174 0019 000000   		.space	3
 6175 001c 00000000 		.word	0
 6176 0020 13       		.byte	19
 6177 0021 000000   		.space	3
 6178 0024 02000000 		.word	2
 6179 0028 12       		.byte	18
 6180 0029 000000   		.space	3
 6181 002c 02000000 		.word	2
 6182 0030 12       		.byte	18
 6183 0031 000000   		.space	3
 6184 0034 00000000 		.word	0
 6185 0038 06       		.byte	6
 6186 0039 000000   		.space	3
 6187 003c 00000000 		.word	0
 6188 0040 07       		.byte	7
 6189 0041 000000   		.space	3
 6190 0044 00000000 		.word	0
 6191 0048 08       		.byte	8
 6192 0049 000000   		.space	3
 6193 004c 00000000 		.word	0
 6194 0050 01       		.byte	1
 6195 0051 000000   		.space	3
 6196 0054 01000000 		.word	1
ARM GAS  /tmp/ccwTS9FK.s 			page 151


 6197 0058 02       		.byte	2
 6198 0059 000000   		.space	3
 6199 005c 01000000 		.word	1
 6200 0060 03       		.byte	3
 6201 0061 000000   		.space	3
 6202 0064 01000000 		.word	1
 6203 0068 0C       		.byte	12
 6204 0069 000000   		.space	3
 6205 006c 00000000 		.word	0
 6206 0070 0D       		.byte	13
 6207 0071 000000   		.space	3
 6208 0074 00000000 		.word	0
 6209 0078 0E       		.byte	14
 6210 0079 000000   		.space	3
 6211 007c 00000000 		.word	0
 6212 0080 0F       		.byte	15
 6213 0081 000000   		.space	3
 6214 0084 00000000 		.word	0
 6215 0088 10       		.byte	16
 6216 0089 000000   		.space	3
 6217 008c 00000000 		.word	0
 6218 0090 18       		.byte	24
 6219 0091 000000   		.space	3
 6220 0094 00000000 		.word	0
 6221 0098 13       		.byte	19
 6222 0099 000000   		.space	3
 6223 009c 00000000 		.word	0
 6224 00a0 14       		.byte	20
 6225 00a1 000000   		.space	3
 6226 00a4 00000000 		.word	0
 6227 00a8 15       		.byte	21
 6228 00a9 000000   		.space	3
 6229 00ac 00000000 		.word	0
 6230 00b0 16       		.byte	22
 6231 00b1 000000   		.space	3
 6232 00b4 00000000 		.word	0
 6233 00b8 1E       		.byte	30
 6234 00b9 000000   		.space	3
 6235 00bc 00000000 		.word	0
 6236 00c0 19       		.byte	25
 6237 00c1 000000   		.space	3
 6238 00c4 00000000 		.word	0
 6239 00c8 1A       		.byte	26
 6240 00c9 000000   		.space	3
 6241 00cc 00000000 		.word	0
 6242 00d0 1B       		.byte	27
 6243 00d1 000000   		.space	3
 6244 00d4 00000000 		.word	0
 6245 00d8 1C       		.byte	28
 6246 00d9 000000   		.space	3
 6247 00dc 00000000 		.word	0
 6248 00e0 29       		.byte	41
 6249 00e1 000000   		.space	3
 6250 00e4 00000000 		.word	0
 6251 00e8 1F       		.byte	31
 6252 00e9 000000   		.space	3
 6253 00ec 00000000 		.word	0
ARM GAS  /tmp/ccwTS9FK.s 			page 152


 6254 00f0 20       		.byte	32
 6255 00f1 000000   		.space	3
 6256 00f4 00000000 		.word	0
 6257 00f8 21       		.byte	33
 6258 00f9 000000   		.space	3
 6259 00fc 00000000 		.word	0
 6260 0100 22       		.byte	34
 6261 0101 000000   		.space	3
 6262 0104 00000000 		.word	0
 6263 0108 24       		.byte	36
 6264 0109 000000   		.space	3
 6265 010c 00000000 		.word	0
 6266 0110 25       		.byte	37
 6267 0111 000000   		.space	3
 6268 0114 00000000 		.word	0
 6269 0118 26       		.byte	38
 6270 0119 000000   		.space	3
 6271 011c 00000000 		.word	0
 6272 0120 27       		.byte	39
 6273 0121 000000   		.space	3
 6274 0124 00000000 		.word	0
 6275 0128 28       		.byte	40
 6276 0129 000000   		.space	3
 6277 012c 00000000 		.word	0
 6278 0130 2E       		.byte	46
 6279 0131 000000   		.space	3
 6280 0134 00000000 		.word	0
 6281 0138 2E       		.byte	46
 6282 0139 000000   		.space	3
 6283 013c 00000000 		.word	0
 6284 0140 2E       		.byte	46
 6285 0141 000000   		.space	3
 6286 0144 00000000 		.word	0
 6287 0148 2E       		.byte	46
 6288 0149 000000   		.space	3
 6289 014c 00000000 		.word	0
 6290 0150 2E       		.byte	46
 6291 0151 000000   		.space	3
 6292 0154 00000000 		.word	0
 6293 0158 2E       		.byte	46
 6294 0159 000000   		.space	3
 6295 015c 00000000 		.word	0
 6296 0160 2E       		.byte	46
 6297 0161 000000   		.space	3
 6298 0164 00000000 		.word	0
 6299 0168 2E       		.byte	46
 6300 0169 000000   		.space	3
 6301 016c 00000000 		.word	0
 6302 0170 2E       		.byte	46
 6303 0171 000000   		.space	3
 6304 0174 00000000 		.word	0
 6305              		.section	.rodata.mapping_running.10973,"a"
 6306              		.align	2
 6307              		.set	.LANCHOR15,. + 0
 6310              	mapping_running.10973:
 6311 0000 63       		.byte	99
 6312 0001 000000   		.space	3
ARM GAS  /tmp/ccwTS9FK.s 			page 153


 6313 0004 FFFFFFFF 		.word	-1
 6314 0008 00       		.byte	0
 6315 0009 000000   		.space	3
 6316 000c 00000000 		.word	0
 6317 0010 01       		.byte	1
 6318 0011 000000   		.space	3
 6319 0014 00000000 		.word	0
 6320 0018 02       		.byte	2
 6321 0019 000000   		.space	3
 6322 001c 00000000 		.word	0
 6323 0020 03       		.byte	3
 6324 0021 000000   		.space	3
 6325 0024 00000000 		.word	0
 6326 0028 04       		.byte	4
 6327 0029 000000   		.space	3
 6328 002c 00000000 		.word	0
 6329 0030 12       		.byte	18
 6330 0031 000000   		.space	3
 6331 0034 00000000 		.word	0
 6332 0038 06       		.byte	6
 6333 0039 000000   		.space	3
 6334 003c 00000000 		.word	0
 6335 0040 07       		.byte	7
 6336 0041 000000   		.space	3
 6337 0044 00000000 		.word	0
 6338 0048 08       		.byte	8
 6339 0049 000000   		.space	3
 6340 004c 00000000 		.word	0
 6341 0050 09       		.byte	9
 6342 0051 000000   		.space	3
 6343 0054 00000000 		.word	0
 6344 0058 0A       		.byte	10
 6345 0059 000000   		.space	3
 6346 005c 00000000 		.word	0
 6347 0060 0B       		.byte	11
 6348 0061 000000   		.space	3
 6349 0064 00000000 		.word	0
 6350 0068 0C       		.byte	12
 6351 0069 000000   		.space	3
 6352 006c 00000000 		.word	0
 6353 0070 0D       		.byte	13
 6354 0071 000000   		.space	3
 6355 0074 00000000 		.word	0
 6356 0078 0E       		.byte	14
 6357 0079 000000   		.space	3
 6358 007c 00000000 		.word	0
 6359 0080 0F       		.byte	15
 6360 0081 000000   		.space	3
 6361 0084 00000000 		.word	0
 6362 0088 10       		.byte	16
 6363 0089 000000   		.space	3
 6364 008c 00000000 		.word	0
 6365 0090 18       		.byte	24
 6366 0091 000000   		.space	3
 6367 0094 00000000 		.word	0
 6368 0098 13       		.byte	19
 6369 0099 000000   		.space	3
ARM GAS  /tmp/ccwTS9FK.s 			page 154


 6370 009c 00000000 		.word	0
 6371 00a0 14       		.byte	20
 6372 00a1 000000   		.space	3
 6373 00a4 00000000 		.word	0
 6374 00a8 15       		.byte	21
 6375 00a9 000000   		.space	3
 6376 00ac 00000000 		.word	0
 6377 00b0 16       		.byte	22
 6378 00b1 000000   		.space	3
 6379 00b4 00000000 		.word	0
 6380 00b8 1E       		.byte	30
 6381 00b9 000000   		.space	3
 6382 00bc 00000000 		.word	0
 6383 00c0 19       		.byte	25
 6384 00c1 000000   		.space	3
 6385 00c4 00000000 		.word	0
 6386 00c8 1A       		.byte	26
 6387 00c9 000000   		.space	3
 6388 00cc 00000000 		.word	0
 6389 00d0 1B       		.byte	27
 6390 00d1 000000   		.space	3
 6391 00d4 00000000 		.word	0
 6392 00d8 1C       		.byte	28
 6393 00d9 000000   		.space	3
 6394 00dc 00000000 		.word	0
 6395 00e0 09       		.byte	9
 6396 00e1 000000   		.space	3
 6397 00e4 00000000 		.word	0
 6398 00e8 1F       		.byte	31
 6399 00e9 000000   		.space	3
 6400 00ec 00000000 		.word	0
 6401 00f0 20       		.byte	32
 6402 00f1 000000   		.space	3
 6403 00f4 00000000 		.word	0
 6404 00f8 21       		.byte	33
 6405 00f9 000000   		.space	3
 6406 00fc 00000000 		.word	0
 6407 0100 22       		.byte	34
 6408 0101 000000   		.space	3
 6409 0104 00000000 		.word	0
 6410 0108 24       		.byte	36
 6411 0109 000000   		.space	3
 6412 010c 00000000 		.word	0
 6413 0110 25       		.byte	37
 6414 0111 000000   		.space	3
 6415 0114 00000000 		.word	0
 6416 0118 26       		.byte	38
 6417 0119 000000   		.space	3
 6418 011c 00000000 		.word	0
 6419 0120 27       		.byte	39
 6420 0121 000000   		.space	3
 6421 0124 00000000 		.word	0
 6422 0128 28       		.byte	40
 6423 0129 000000   		.space	3
 6424 012c 00000000 		.word	0
 6425 0130 2E       		.byte	46
 6426 0131 000000   		.space	3
ARM GAS  /tmp/ccwTS9FK.s 			page 155


 6427 0134 00000000 		.word	0
 6428 0138 2E       		.byte	46
 6429 0139 000000   		.space	3
 6430 013c 00000000 		.word	0
 6431 0140 2E       		.byte	46
 6432 0141 000000   		.space	3
 6433 0144 00000000 		.word	0
 6434 0148 2E       		.byte	46
 6435 0149 000000   		.space	3
 6436 014c 00000000 		.word	0
 6437 0150 04       		.byte	4
 6438 0151 000000   		.space	3
 6439 0154 00000000 		.word	0
 6440 0158 05       		.byte	5
 6441 0159 000000   		.space	3
 6442 015c 00000000 		.word	0
 6443 0160 2E       		.byte	46
 6444 0161 000000   		.space	3
 6445 0164 00000000 		.word	0
 6446 0168 2E       		.byte	46
 6447 0169 000000   		.space	3
 6448 016c 00000000 		.word	0
 6449 0170 2E       		.byte	46
 6450 0171 000000   		.space	3
 6451 0174 00000000 		.word	0
 6452              		.section	.rodata.mid_menu,"a"
 6453              		.align	2
 6456              	mid_menu:
 6457 0000 C8C40B00 		.ascii	"\310\304\013\000"
 6458              		.text
 6459              	.Letext0:
 6460              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 6461              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 6462              		.file 6 "/usr/include/newlib/sys/_types.h"
 6463              		.file 7 "/usr/include/newlib/sys/reent.h"
 6464              		.file 8 "/usr/include/newlib/sys/lock.h"
 6465              		.file 9 "/usr/include/newlib/stdlib.h"
 6466              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 6467              		.file 11 "/usr/include/newlib/ctype.h"
 6468              		.file 12 "dmcp/ff_ifc.h"
 6469              		.file 13 "dmcp/dmcp.h"
 6470              		.file 14 "src/keys.h"
 6471              		.file 15 "src/decNumber/decContext.h"
 6472              		.file 16 "src/decNumber/decNumber.h"
 6473              		.file 17 "src/decNumber/decimal64.h"
 6474              		.file 18 "src/decNumber/decimal128.h"
 6475              		.file 19 "src/xeq.h"
 6476              		.file 20 "src/data.h"
 6477              		.file 21 "src/display.h"
 6478              		.file 22 "src/consts.h"
 6479              		.file 23 "src/storage.h"
 6480              		.file 24 "src/catalogues.h"
 6481              		.file 25 "src/menu.h"
 6482              		.file 26 "src/lcd.h"
 6483              		.file 27 "/usr/include/newlib/string.h"
 6484              		.file 28 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccwTS9FK.s 			page 156


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccwTS9FK.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/ccwTS9FK.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/ccwTS9FK.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/ccwTS9FK.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/ccwTS9FK.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccwTS9FK.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccwTS9FK.s:433    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/ccwTS9FK.s:441    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/ccwTS9FK.s:463    .text.disp_about:0000000000000000 $t
     /tmp/ccwTS9FK.s:471    .text.disp_about:0000000000000000 disp_about
     /tmp/ccwTS9FK.s:629    .text.disp_about:0000000000000084 $d
     /tmp/ccwTS9FK.s:648    .text.run_menu_item:0000000000000000 $t
     /tmp/ccwTS9FK.s:656    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/ccwTS9FK.s:696    .text.set_menu:0000000000000000 $t
     /tmp/ccwTS9FK.s:704    .text.set_menu:0000000000000000 set_menu
     /tmp/ccwTS9FK.s:759    .text.set_menu:000000000000002c $d
     /tmp/ccwTS9FK.s:766    .text.toggle_default_menu:0000000000000000 $t
     /tmp/ccwTS9FK.s:774    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/ccwTS9FK.s:803    .text.toggle_default_menu:0000000000000018 $d
     /tmp/ccwTS9FK.s:809    .text.get_menu:0000000000000000 $t
     /tmp/ccwTS9FK.s:817    .text.get_menu:0000000000000000 get_menu
     /tmp/ccwTS9FK.s:833    .text.get_menu:0000000000000008 $d
     /tmp/ccwTS9FK.s:838    .text.set_last_menu:0000000000000000 $t
     /tmp/ccwTS9FK.s:846    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccwTS9FK.s:909    .text.set_last_menu:0000000000000020 $d
     /tmp/ccwTS9FK.s:916    .text.mdot:0000000000000000 $t
     /tmp/ccwTS9FK.s:924    .text.mdot:0000000000000000 mdot
     /tmp/ccwTS9FK.s:1015   .text.mdot:000000000000003c $d
     /tmp/ccwTS9FK.s:1020   .text.display_menu:0000000000000000 $t
     /tmp/ccwTS9FK.s:1028   .text.display_menu:0000000000000000 display_menu
     /tmp/ccwTS9FK.s:1317   .text.display_menu:0000000000000150 $d
     /tmp/ccwTS9FK.s:1326   .text.display_current_menu:0000000000000000 $t
     /tmp/ccwTS9FK.s:1334   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccwTS9FK.s:1349   .text.display_current_menu:0000000000000008 $d
     /tmp/ccwTS9FK.s:1354   .text.all_menu_dots:0000000000000000 $t
     /tmp/ccwTS9FK.s:1362   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccwTS9FK.s:1446   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccwTS9FK.s:1451   .text.build_user_menu:0000000000000000 $t
     /tmp/ccwTS9FK.s:1459   .text.build_user_menu:0000000000000000 build_user_menu
     /tmp/ccwTS9FK.s:1748   .text.build_user_menu:0000000000000124 $d
     /tmp/ccwTS9FK.s:1759   .text.shutdown:0000000000000000 $t
     /tmp/ccwTS9FK.s:1767   .text.shutdown:0000000000000000 shutdown
     /tmp/ccwTS9FK.s:1785   .text.shutdown:000000000000000c $d
     /tmp/ccwTS9FK.s:1790   .text.is_key_pressed:0000000000000000 $t
     /tmp/ccwTS9FK.s:1798   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccwTS9FK.s:1821   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccwTS9FK.s:1826   .text.get_key:0000000000000000 $t
     /tmp/ccwTS9FK.s:1834   .text.get_key:0000000000000000 get_key
     /tmp/ccwTS9FK.s:1849   .text.get_key:0000000000000004 $d
     /tmp/ccwTS9FK.s:1854   .text.put_key:0000000000000000 $t
     /tmp/ccwTS9FK.s:1862   .text.put_key:0000000000000000 put_key
     /tmp/ccwTS9FK.s:1941   .text.put_key:000000000000003c $d
     /tmp/ccwTS9FK.s:1947   .text.shift_down:0000000000000000 $t
     /tmp/ccwTS9FK.s:1955   .text.shift_down:0000000000000000 shift_down
     /tmp/ccwTS9FK.s:1970   .text.start_key_timer:0000000000000000 $t
ARM GAS  /tmp/ccwTS9FK.s 			page 157


     /tmp/ccwTS9FK.s:1978   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccwTS9FK.s:2002   .text.start_key_timer:000000000000000c $d
     /tmp/ccwTS9FK.s:2008   .text.keyticks:0000000000000000 $t
     /tmp/ccwTS9FK.s:2016   .text.keyticks:0000000000000000 keyticks
     /tmp/ccwTS9FK.s:2047   .text.keyticks:0000000000000018 $d
     /tmp/ccwTS9FK.s:2053   .text.moveto:0000000000000000 $t
     /tmp/ccwTS9FK.s:2061   .text.moveto:0000000000000000 moveto
     /tmp/ccwTS9FK.s:2121   .text.moveto:000000000000002c $d
     /tmp/ccwTS9FK.s:2128   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccwTS9FK.s:2132   .text.print_debug:0000000000000000 $t
     /tmp/ccwTS9FK.s:2140   .text.print_debug:0000000000000000 print_debug
     /tmp/ccwTS9FK.s:2242   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccwTS9FK.s:2253   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccwTS9FK.s:2257   .text.print_debug2:0000000000000000 $t
     /tmp/ccwTS9FK.s:2265   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccwTS9FK.s:2367   .text.print_debug2:0000000000000064 $d
     /tmp/ccwTS9FK.s:2378   .text.do_now:0000000000000000 $t
     /tmp/ccwTS9FK.s:2386   .text.do_now:0000000000000000 do_now
     /tmp/ccwTS9FK.s:2421   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccwTS9FK.s:2425   .text.do_multi:0000000000000000 $t
     /tmp/ccwTS9FK.s:2433   .text.do_multi:0000000000000000 do_multi
     /tmp/ccwTS9FK.s:2464   .text.do_multi:000000000000001a $d
     /tmp/ccwTS9FK.s:2478   .text.do_multi:0000000000000028 $t
     /tmp/ccwTS9FK.s:2877   .text.do_multi:00000000000001b0 $d
     /tmp/ccwTS9FK.s:2888   .text.program_main:0000000000000000 $t
     /tmp/ccwTS9FK.s:2896   .text.program_main:0000000000000000 program_main
     /tmp/ccwTS9FK.s:3196   .text.program_main:0000000000000112 $d
     /tmp/ccwTS9FK.s:3202   .text.program_main:000000000000011e $t
     /tmp/ccwTS9FK.s:3209   .text.program_main:0000000000000128 $d
     /tmp/ccwTS9FK.s:3216   .text.program_main:0000000000000134 $t
     /tmp/ccwTS9FK.s:3615   .text.program_main:00000000000002b0 $d
     /tmp/ccwTS9FK.s:3655   .text.program_main:0000000000000340 $t
     /tmp/ccwTS9FK.s:4258   .text.program_main:0000000000000664 $d
     /tmp/ccwTS9FK.s:4278   .text.program_main:00000000000006a8 $t
     /tmp/ccwTS9FK.s:4404   .text.program_main:0000000000000754 $d
     /tmp/ccwTS9FK.s:4479   .bss.n_p:0000000000000000 n_p
     /tmp/ccwTS9FK.s:4630   .data.spaces:0000000000000000 spaces
     /tmp/ccwTS9FK.s:4621   .data.release:0000000000000000 release
     /tmp/ccwTS9FK.s:4594   .data.h_shift:0000000000000000 h_shift
     /tmp/ccwTS9FK.s:4585   .data.g_shift:0000000000000000 g_shift
     /tmp/ccwTS9FK.s:4576   .data.f_shift:0000000000000000 f_shift
     /tmp/ccwTS9FK.s:4603   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccwTS9FK.s:4612   .data.no_key:0000000000000000 no_key
     /tmp/ccwTS9FK.s:4637   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccwTS9FK.s:4427   .rodata.str1.4:0000000000000000 $d
     /tmp/ccwTS9FK.s:6456   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccwTS9FK.s:4569   .data.cmplx_key_string:0000000000000000 cmplx_key_string
     /tmp/ccwTS9FK.s:4562   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/ccwTS9FK.s:4493   .data.UserMenu:0000000000000000 UserMenu
     /tmp/ccwTS9FK.s:4441   .rodata:0000000000000000 $d
     /tmp/ccwTS9FK.s:4448   .bss.current_menu:0000000000000000 $d
     /tmp/ccwTS9FK.s:4452   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccwTS9FK.s:4455   .bss.default_menu:0000000000000000 $d
     /tmp/ccwTS9FK.s:4459   .bss.default_menu:0000000000000000 default_menu
     /tmp/ccwTS9FK.s:4462   .bss.last_menu:0000000000000000 $d
     /tmp/ccwTS9FK.s:4466   .bss.last_menu:0000000000000000 last_menu
ARM GAS  /tmp/ccwTS9FK.s 			page 158


     /tmp/ccwTS9FK.s:4469   .bss.mdots:0000000000000000 $d
     /tmp/ccwTS9FK.s:4473   .bss.mdots:0000000000000000 mdots
     /tmp/ccwTS9FK.s:4476   .bss.n_p:0000000000000000 $d
     /tmp/ccwTS9FK.s:4482   .bss.start_ticks:0000000000000000 $d
     /tmp/ccwTS9FK.s:4486   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccwTS9FK.s:4489   .data.UserMenu:0000000000000000 $d
     /tmp/ccwTS9FK.s:4558   .data.arrow_key_string:0000000000000000 $d
     /tmp/ccwTS9FK.s:4565   .data.cmplx_key_string:0000000000000000 $d
     /tmp/ccwTS9FK.s:4572   .data.f_shift:0000000000000000 $d
     /tmp/ccwTS9FK.s:4581   .data.g_shift:0000000000000000 $d
     /tmp/ccwTS9FK.s:4590   .data.h_shift:0000000000000000 $d
     /tmp/ccwTS9FK.s:4599   .data.heartbeat:0000000000000000 $d
     /tmp/ccwTS9FK.s:4608   .data.no_key:0000000000000000 $d
     /tmp/ccwTS9FK.s:4617   .data.release:0000000000000000 $d
     /tmp/ccwTS9FK.s:4626   .data.spaces:0000000000000000 $d
     /tmp/ccwTS9FK.s:4633   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccwTS9FK.s:4643   .rodata.Menus:0000000000000000 $d
     /tmp/ccwTS9FK.s:4647   .rodata.Menus:0000000000000000 Menus
     /tmp/ccwTS9FK.s:5718   .rodata.mapping_alpha.10972:0000000000000000 $d
     /tmp/ccwTS9FK.s:5722   .rodata.mapping_alpha.10972:0000000000000000 mapping_alpha.10972
     /tmp/ccwTS9FK.s:5865   .rodata.mapping_fshift.10970:0000000000000000 $d
     /tmp/ccwTS9FK.s:5869   .rodata.mapping_fshift.10970:0000000000000000 mapping_fshift.10970
     /tmp/ccwTS9FK.s:6012   .rodata.mapping_gshift.10971:0000000000000000 $d
     /tmp/ccwTS9FK.s:6016   .rodata.mapping_gshift.10971:0000000000000000 mapping_gshift.10971
     /tmp/ccwTS9FK.s:6159   .rodata.mapping_none.10969:0000000000000000 $d
     /tmp/ccwTS9FK.s:6163   .rodata.mapping_none.10969:0000000000000000 mapping_none.10969
     /tmp/ccwTS9FK.s:6306   .rodata.mapping_running.10973:0000000000000000 $d
     /tmp/ccwTS9FK.s:6310   .rodata.mapping_running.10973:0000000000000000 mapping_running.10973
     /tmp/ccwTS9FK.s:6453   .rodata.mid_menu:0000000000000000 $d

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
pixel_length
findmultilbl
do_inc
getprog
catcmd
strncpy
strcpy
sprintf
process_keycode_with_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
ARM GAS  /tmp/ccwTS9FK.s 			page 159


check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
JustDisplayed
Pause
Running
get_alpha_state

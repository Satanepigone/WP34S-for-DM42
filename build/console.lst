ARM GAS  /tmp/ccgLZIWS.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC1:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** //#include <menu.h>
   2:src/menu.c    **** struct _menu UserMenu =
   3:src/menu.c    ****   {
   4:src/menu.c    ****     "User Menu", 
   5:src/menu.c    ****     {
   6:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   7:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   8:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   9:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  10:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  11:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
  12:src/menu.c    ****     }
  13:src/menu.c    ****   };
  14:src/menu.c    **** 
  15:src/menu.c    **** const char* arrow_key_string = "--\015";
  16:src/menu.c    **** const char* cmplx_key_string = "CPX";
  17:src/menu.c    **** 
  18:src/menu.c    **** menu_name current_menu = 0;
  19:src/menu.c    **** menu_name last_menu = 0;
  20:src/menu.c    **** menu_name default_menu = 0;
  21:src/menu.c    **** 
  22:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted);
  23:src/menu.c    **** 
ARM GAS  /tmp/ccgLZIWS.s 			page 2


  24:src/menu.c    **** 
  25:src/menu.c    **** 
  26:src/menu.c    **** /* 
  27:src/menu.c    ****  * System menu stuff
  28:src/menu.c    ****  */
  29:src/menu.c    **** 
  30:src/menu.c    **** #define MI_ABOUT_PGM 11
  31:src/menu.c    **** 
  32:src/menu.c    **** const uint8_t mid_menu[] = {
  33:src/menu.c    ****     MI_SYSTEM_ENTER,
  34:src/menu.c    ****     MI_MSC,
  35:src/menu.c    ****     MI_ABOUT_PGM,
  36:src/menu.c    ****     0 }; // Terminator
  37:src/menu.c    **** 
  38:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  39:src/menu.c    **** 
  40:src/menu.c    **** void disp_about(void);
  41:src/menu.c    **** 
  42:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  43:src/menu.c    ****   int ret = 0;
  44:src/menu.c    **** 
  45:src/menu.c    ****   switch(line_id) {
  46:src/menu.c    ****     case MI_ABOUT_PGM:
  47:src/menu.c    ****       disp_about();
  48:src/menu.c    ****       break;
  49:src/menu.c    **** 
  50:src/menu.c    ****      default:
  51:src/menu.c    ****       ret = MRET_UNIMPL;
  52:src/menu.c    ****       break;
  53:src/menu.c    ****   }
  54:src/menu.c    **** 
  55:src/menu.c    ****   return ret;
  56:src/menu.c    **** }
  57:src/menu.c    **** 
  58:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 58 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  59:src/menu.c    ****   const char * ln;
  40              		.loc 1 59 3 view .LVU1
  60:src/menu.c    **** 
  61:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 61 3 view .LVU2
  62:src/menu.c    **** 
  63:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  64:src/menu.c    **** 
  65:src/menu.c    ****   default:
  66:src/menu.c    ****     ln = NULL;
  42              		.loc 1 66 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  61:src/menu.c    **** 
  44              		.loc 1 61 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
  67:src/menu.c    ****     break;
  68:src/menu.c    ****   }
ARM GAS  /tmp/ccgLZIWS.s 			page 3


  69:src/menu.c    **** 
  70:src/menu.c    ****   return ln;
  71:src/menu.c    **** }
  46              		.loc 1 71 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 71 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC1
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB34:
  72:src/menu.c    **** 
  73:src/menu.c    **** void disp_about() {
  74:src/menu.c    ****   lcd_clear_buf();
  75:src/menu.c    ****   lcd_writeClr(t24);
  76:src/menu.c    **** 
  77:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  78:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
  79:src/menu.c    ****   t24->y += 5;
  80:src/menu.c    **** #ifdef TOP_ROW
  81:src/menu.c    ****   lcd_print(t24, "top row version,");
  82:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
  83:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  84:src/menu.c    ****   lcd_print(t24, "with a longer alpha display,");
  85:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  86:src/menu.c    ****   #else
  87:src/menu.c    ****   lcd_print(t24, "Just like the original calculator");
  88:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed,");
  89:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  90:src/menu.c    **** #endif
  91:src/menu.c    ****   t24->y += 5;
  92:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
  93:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
  94:src/menu.c    **** 
  95:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
  96:src/menu.c    ****   t24->x = 20;
  97:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
  98:src/menu.c    **** 
  99:src/menu.c    ****   lcd_refresh();
 100:src/menu.c    **** 
 101:src/menu.c    ****   wait_for_key_press();
 102:src/menu.c    **** }
ARM GAS  /tmp/ccgLZIWS.s 			page 4


 103:src/menu.c    **** 
 104:src/menu.c    **** /*
 105:src/menu.c    ****  * WP34s menu code
 106:src/menu.c    ****  */
 107:src/menu.c    **** 
 108:src/menu.c    **** void set_menu ( menu_name new_menu ) {
 109:src/menu.c    ****   menu_name m = current_menu;
 110:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 111:src/menu.c    ****     current_menu = default_menu;
 112:src/menu.c    ****   }
 113:src/menu.c    ****   else if (new_menu == M_Last) { // go to last menu
 114:src/menu.c    ****     current_menu = last_menu;
 115:src/menu.c    ****   }
 116:src/menu.c    ****   else {
 117:src/menu.c    ****     current_menu = new_menu; // change to new menu
 118:src/menu.c    ****   }
 119:src/menu.c    ****   if ( (m != M_Arrow) && (m != M_Alpha) ) last_menu = m;
 120:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 121:src/menu.c    **** }
 122:src/menu.c    **** 
 123:src/menu.c    **** void set_default_menu () {
 124:src/menu.c    ****   set_menu (default_menu);
 125:src/menu.c    **** }
 126:src/menu.c    **** 
 127:src/menu.c    **** void toggle_default_menu () {
 128:src/menu.c    ****   if (current_menu == M_Blank) {
 129:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 130:src/menu.c    ****     return;
 131:src/menu.c    ****   }
 132:src/menu.c    ****   else if (current_menu == M_Blank2) {
 133:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 134:src/menu.c    ****   }
 135:src/menu.c    ****   else {
 136:src/menu.c    ****     set_default_menu();
 137:src/menu.c    ****   }
 138:src/menu.c    **** }
 139:src/menu.c    **** 
 140:src/menu.c    **** menu_name get_menu () {
 141:src/menu.c    ****   return current_menu;
 142:src/menu.c    **** }
 143:src/menu.c    **** 
 144:src/menu.c    **** menu_name get_last_menu () {
 145:src/menu.c    ****   return last_menu;
 146:src/menu.c    **** }
 147:src/menu.c    **** 
 148:src/menu.c    **** void display_current_menu () {
 149:src/menu.c    ****   display_menu (get_current_menu_ref());
 150:src/menu.c    **** }
 151:src/menu.c    **** 
 152:src/menu.c    **** void set_last_menu () {
 153:src/menu.c    ****   set_menu (M_Last);
 154:src/menu.c    **** }
 155:src/menu.c    **** 
 156:src/menu.c    **** static unsigned char mdots[200][2];
 157:src/menu.c    **** 
 158:src/menu.c    **** static const struct _menu Menus[] = {
 159:src/menu.c    ****   {
ARM GAS  /tmp/ccgLZIWS.s 			page 5


 160:src/menu.c    ****     "M_Blank", // 0
 161:src/menu.c    ****     { 
 162:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 163:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 164:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 165:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 166:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 167:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 168:src/menu.c    ****     }    
 169:src/menu.c    ****   },
 170:src/menu.c    ****   {
 171:src/menu.c    ****     "M_Clear", // 1
 172:src/menu.c    ****     { 
 173:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 174:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 175:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 176:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 177:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 178:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 179:src/menu.c    ****     }    
 180:src/menu.c    ****   },
 181:src/menu.c    ****   {
 182:src/menu.c    ****     "M_Disp", // 2
 183:src/menu.c    ****     { 
 184:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 185:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 186:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 187:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 188:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 189:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 190:src/menu.c    ****     }
 191:src/menu.c    ****   },
 192:src/menu.c    ****   {
 193:src/menu.c    ****     "M_Base", // 3
 194:src/menu.c    ****     { 
 195:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 196:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 197:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 198:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 199:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 200:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 201:src/menu.c    ****     }
 202:src/menu.c    ****   },
 203:src/menu.c    ****   {
 204:src/menu.c    ****     "M_Angles", // 4
 205:src/menu.c    ****     { 
 206:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 207:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 208:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 209:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 210:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 211:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 212:src/menu.c    ****     }
 213:src/menu.c    ****       
 214:src/menu.c    ****   },
 215:src/menu.c    ****   {
 216:src/menu.c    ****     "M_Misc", // 5
ARM GAS  /tmp/ccgLZIWS.s 			page 6


 217:src/menu.c    ****     { 
 218:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 219:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 220:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 221:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 222:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 223:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 224:src/menu.c    ****     }
 225:src/menu.c    ****   },
 226:src/menu.c    ****   {
 227:src/menu.c    ****     "M_Swap", // 6
 228:src/menu.c    ****     { 
 229:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 230:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 231:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 232:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 233:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 234:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 235:src/menu.c    ****     }    
 236:src/menu.c    ****   },
 237:src/menu.c    ****   {
 238:src/menu.c    ****     "M_Program", // 7
 239:src/menu.c    ****     { 
 240:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 241:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 242:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 243:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 244:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 245:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 246:src/menu.c    ****     }
 247:src/menu.c    ****   },
 248:src/menu.c    ****   {
 249:src/menu.c    ****     "M_Setup1", // 8
 250:src/menu.c    ****     { 
 251:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 252:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 253:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 254:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 255:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 256:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 257:src/menu.c    ****     }
 258:src/menu.c    ****   },
 259:src/menu.c    ****   {
 260:src/menu.c    ****     "M_Arrow", // 9
 261:src/menu.c    ****     { 
 262:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 263:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 264:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 265:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "\015HMS" },
 266:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 267:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 268:src/menu.c    ****     }
 269:src/menu.c    ****   },
 270:src/menu.c    ****   {
 271:src/menu.c    ****     "M_Flags", // 10
 272:src/menu.c    ****     { 
 273:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
ARM GAS  /tmp/ccgLZIWS.s 			page 7


 274:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 275:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 276:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 277:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 278:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 279:src/menu.c    ****     }
 280:src/menu.c    ****   },
 281:src/menu.c    ****   {
 282:src/menu.c    ****     "M_Prob", // 11
 283:src/menu.c    ****     { 
 284:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 285:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 286:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 287:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 288:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 289:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 290:src/menu.c    ****     }
 291:src/menu.c    ****   },
 292:src/menu.c    ****   {
 293:src/menu.c    ****     "M_Stats", // 12
 294:src/menu.c    ****     /*
 295:src/menu.c    ****      *xbar, sd;
 296:src/menu.c    ****      *yhat, xhat;
 297:src/menu.c    ****      *corr, L.R.;
 298:src/menu.c    ****      *best, linear;
 299:src/menu.c    ****      *ln, exp;
 300:src/menu.c    ****      *cmplx, power;
 301:src/menu.c    ****      *No, sums is already on g9.
 302:src/menu.c    ****      */
 303:src/menu.c    ****     { 
 304:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 305:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 306:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 307:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 308:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 309:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 310:src/menu.c    ****     }
 311:src/menu.c    ****   },
 312:src/menu.c    ****   {
 313:src/menu.c    ****     "M_Setup2", // 13
 314:src/menu.c    ****     { 
 315:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 316:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 317:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 318:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 319:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 320:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 321:src/menu.c    ****     }
 322:src/menu.c    ****   },
 323:src/menu.c    ****   {
 324:src/menu.c    ****     "M_Solve", // 14
 325:src/menu.c    ****     { 
 326:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 327:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 328:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 329:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 330:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
ARM GAS  /tmp/ccgLZIWS.s 			page 8


 331:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 332:src/menu.c    ****     }
 333:src/menu.c    ****   },
 334:src/menu.c    ****   {
 335:src/menu.c    ****     "M_Blank2", // 15
 336:src/menu.c    ****     { 
 337:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 338:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 339:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 340:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 341:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 342:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 343:src/menu.c    ****     }    
 344:src/menu.c    ****   },
 345:src/menu.c    ****   {
 346:src/menu.c    ****     "M_Alpha", // 16
 347:src/menu.c    ****     { 
 348:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 349:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 350:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 351:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 352:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 353:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 354:src/menu.c    ****     }    
 355:src/menu.c    ****   },
 356:src/menu.c    ****   {
 357:src/menu.c    ****     "M_C_Lock", // 17
 358:src/menu.c    ****     { 
 359:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 360:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 361:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "CHS\006y", "CHS\006x" },
 362:src/menu.c    ****       { { K21, 1 }, { K00, 1 }, "x\027y", "HYP" },
 363:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 364:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 365:src/menu.c    ****     }    
 366:src/menu.c    ****   },
 367:src/menu.c    ****   {
 368:src/menu.c    ****     "M_Clear_C", // 18
 369:src/menu.c    ****     { 
 370:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 371:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 372:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 373:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, NO_KEY, "CLStk", "" },
 374:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 375:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 376:src/menu.c    ****     }    
 377:src/menu.c    ****   },
 378:src/menu.c    ****   {
 379:src/menu.c    ****     "M_Swap_C", // 19
 380:src/menu.c    ****     { 
 381:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 382:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 383:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 384:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 385:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 386:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 387:src/menu.c    ****     }    
ARM GAS  /tmp/ccgLZIWS.s 			page 9


 388:src/menu.c    ****   },
 389:src/menu.c    ****   {
 390:src/menu.c    ****     "M_Arrow_C", // 20
 391:src/menu.c    ****     { 
 392:src/menu.c    ****       { NO_KEY, { K10, 2 }, "", "DEG" },
 393:src/menu.c    ****       { NO_KEY, { K11, 2 }, "", "RAD" },
 394:src/menu.c    ****       { NO_KEY, { K12, 2 }, "", "Grad" },
 395:src/menu.c    ****       { NO_KEY, { K10, 1 }, "", "\015HMS" },
 396:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 397:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 398:src/menu.c    ****     }
 399:src/menu.c    ****   },
 400:src/menu.c    ****   {
 401:src/menu.c    ****     "M_Prob_C", // 21
 402:src/menu.c    ****     { 
 403:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_CMON | OP_LNGAMMA }, "\024\006!", "\024\006Ln\006\202" },
 404:src/menu.c    ****       { { K_OP, OP_CDYA | OP_COMB }, NO_KEY, "\024\006Cy,x", "" },
 405:src/menu.c    ****       { { K_OP, OP_CDYA | OP_PERM }, NO_KEY, "\024\006Py,x", "" },
 406:src/menu.c    ****       { NO_KEY, NO_KEY , "", "" },
 407:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 408:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 409:src/menu.c    ****     }
 410:src/menu.c    ****   },
 411:src/menu.c    ****   {
 412:src/menu.c    ****     "M_Blank2_C", // 22
 413:src/menu.c    ****     { 
 414:src/menu.c    ****       { { K00, 1 }, NO_KEY, "HYP", "" },
 415:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 416:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 417:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 418:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 419:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 420:src/menu.c    ****     }    
 421:src/menu.c    ****   },
 422:src/menu.c    ****   {
 423:src/menu.c    ****     "M_Misc_C", // 23
 424:src/menu.c    ****     { 
 425:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 426:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 427:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "0\015Re", "Log\213" },
 428:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "0\015Im", "||el" },
 429:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", ".\034" },
 430:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "./" },
 431:src/menu.c    ****     }
 432:src/menu.c    ****   },
 433:src/menu.c    **** 
 434:src/menu.c    **** };  
 435:src/menu.c    **** 
 436:src/menu.c    **** /* This code is the set_status_sized code with small changes
 437:src/menu.c    ****  * and non-DM42 code removed.
 438:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 439:src/menu.c    ****  */
 440:src/menu.c    **** #define MENU_WIDTH 32
 441:src/menu.c    **** 
 442:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 442 13 is_stmt 1 view -0
  72              		.cfi_startproc
ARM GAS  /tmp/ccgLZIWS.s 			page 10


  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 443:src/menu.c    ****   // dotcol is the number of the starting dot column
 444:src/menu.c    ****   // shifted is 1 if shifted
 445:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 445 3 view .LVU8
 446:src/menu.c    **** 
 447:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 448:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 448 3 view .LVU9
 449:src/menu.c    **** 
 450:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 450 3 view .LVU10
 442:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 442 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 442:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 442 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 451:src/menu.c    ****   int i, j, xmax;
 452:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 452 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
  96 000e B4BF     		ite	lt
  97 0010 01F11F03 		addlt	r3, r1, #31
  98 0014 0B46     		movge	r3, r1
 453:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 454:src/menu.c    **** 
 455:src/menu.c    ****   forceDispPlot=0;
  99              		.loc 1 455 16 view .LVU14
 100 0016 4848     		ldr	r0, .L41
 101              	.LVL3:
 442:src/menu.c    ****   // dotcol is the number of the starting dot column
 102              		.loc 1 442 13 view .LVU15
 103 0018 0F46     		mov	r7, r1
 104              	.LVL4:
 451:src/menu.c    ****   int i, j, xmax;
 105              		.loc 1 451 3 is_stmt 1 view .LVU16
 452:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 106              		.loc 1 452 3 view .LVU17
 456:src/menu.c    **** 
 457:src/menu.c    **** #ifdef RP_PREFIX
 458:src/menu.c    ****   RectPolConv = 0;
 107              		.loc 1 458 15 is_stmt 0 view .LVU18
 108 001a 4849     		ldr	r1, .L41+4
ARM GAS  /tmp/ccgLZIWS.s 			page 11


 109              	.LVL5:
 455:src/menu.c    **** 
 110              		.loc 1 455 16 view .LVU19
 111 001c 0022     		movs	r2, #0
 112              	.LVL6:
 455:src/menu.c    **** 
 113              		.loc 1 455 16 view .LVU20
 114 001e 0270     		strb	r2, [r0]
 115              		.loc 1 458 15 view .LVU21
 116 0020 0A60     		str	r2, [r1]
 459:src/menu.c    **** #endif
 460:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 117              		.loc 1 460 10 view .LVU22
 118 0022 019A     		ldr	r2, [sp, #4]
 119 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 452:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 120              		.loc 1 452 30 view .LVU23
 121 0026 23F01F03 		bic	r3, r3, #31
 452:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 122              		.loc 1 452 8 view .LVU24
 123 002a 03F12009 		add	r9, r3, #32
 124              	.LVL7:
 453:src/menu.c    **** 
 125              		.loc 1 453 3 is_stmt 1 view .LVU25
 455:src/menu.c    **** 
 126              		.loc 1 455 3 view .LVU26
 458:src/menu.c    **** #endif
 127              		.loc 1 458 3 view .LVU27
 128              		.loc 1 460 3 view .LVU28
 129              		.loc 1 460 9 view .LVU29
 130 002e 002D     		cmp	r5, #0
 131 0030 78D0     		beq	.L7
 132              		.loc 1 460 23 is_stmt 0 view .LVU30
 133 0032 4F45     		cmp	r7, r9
 134 0034 76DC     		bgt	.L7
 135              	.LBB41:
 461:src/menu.c    ****     int c;
 462:src/menu.c    ****     int width;
 463:src/menu.c    ****     unsigned char cmap[6];
 464:src/menu.c    **** 
 465:src/menu.c    ****     int real_width;
 466:src/menu.c    ****     int current_smallp;
 467:src/menu.c    **** 
 468:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 469:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 470:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 471:src/menu.c    ****     //           01 -> (not used)
 472:src/menu.c    ****     //           10 -> use big font
 473:src/menu.c    ****     //           11 -> use small font
 474:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 475:src/menu.c    ****     if (str[0] == '\007') {
 136              		.loc 1 475 8 view .LVU31
 137 0036 072D     		cmp	r5, #7
 138              	.LBE41:
 448:src/menu.c    **** 
 139              		.loc 1 448 7 view .LVU32
 140 0038 4FF0FF04 		mov	r4, #255
ARM GAS  /tmp/ccgLZIWS.s 			page 12


 141              	.LVL8:
 142              	.LBB58:
 461:src/menu.c    ****     int c;
 143              		.loc 1 461 5 is_stmt 1 view .LVU33
 462:src/menu.c    ****     unsigned char cmap[6];
 144              		.loc 1 462 5 view .LVU34
 463:src/menu.c    **** 
 145              		.loc 1 463 5 view .LVU35
 465:src/menu.c    ****     int current_smallp;
 146              		.loc 1 465 5 view .LVU36
 466:src/menu.c    **** 
 147              		.loc 1 466 5 view .LVU37
 148              		.loc 1 475 5 view .LVU38
 476:src/menu.c    ****       width = str[1] & 0x1F;
 477:src/menu.c    ****       switch (str[1] & 0x60) {
 478:src/menu.c    ****       default:
 479:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 480:src/menu.c    **** 	break;
 481:src/menu.c    ****       case 0x40:	current_smallp = 0;
 482:src/menu.c    **** 	break;
 483:src/menu.c    ****       case 0x60:	current_smallp = 1;
 149              		.loc 1 483 33 is_stmt 0 view .LVU39
 150 003c 4FF0010A 		mov	r10, #1
 475:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 475 8 view .LVU40
 152 0040 64D1     		bne	.L11
 153              	.LVL9:
 154              	.L39:
 476:src/menu.c    ****       width = str[1] & 0x1F;
 155              		.loc 1 476 7 is_stmt 1 view .LVU41
 476:src/menu.c    ****       width = str[1] & 0x1F;
 156              		.loc 1 476 18 is_stmt 0 view .LVU42
 157 0042 019B     		ldr	r3, [sp, #4]
 158 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 159 0046 06F06003 		and	r3, r6, #96
 477:src/menu.c    ****       default:
 160              		.loc 1 477 7 view .LVU43
 161 004a 402B     		cmp	r3, #64
 476:src/menu.c    ****       width = str[1] & 0x1F;
 162              		.loc 1 476 13 view .LVU44
 163 004c 06F01F06 		and	r6, r6, #31
 164              	.LVL10:
 477:src/menu.c    ****       default:
 165              		.loc 1 477 7 is_stmt 1 view .LVU45
 166 0050 6CD0     		beq	.L34
 167 0052 602B     		cmp	r3, #96
 168 0054 6AD1     		bne	.L34
 169              		.loc 1 483 18 view .LVU46
 170              	.LVL11:
 484:src/menu.c    **** 	break;
 171              		.loc 1 484 2 view .LVU47
 485:src/menu.c    ****       }
 486:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 172              		.loc 1 486 7 view .LVU48
 173              		.loc 1 486 11 is_stmt 0 view .LVU49
 174 0056 019B     		ldr	r3, [sp, #4]
 175 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
ARM GAS  /tmp/ccgLZIWS.s 			page 13


 483:src/menu.c    **** 	break;
 176              		.loc 1 483 33 view .LVU50
 177 005a 0123     		movs	r3, #1
 178 005c 0093     		str	r3, [sp]
 179 005e 00F58075 		add	r5, r0, #256
 180              	.LVL12:
 181              	.L15:
 487:src/menu.c    ****       str += 3;
 182              		.loc 1 487 7 is_stmt 1 view .LVU51
 488:src/menu.c    **** 
 489:src/menu.c    ****       real_width = charlengths(c);
 183              		.loc 1 489 20 is_stmt 0 view .LVU52
 184 0062 2846     		mov	r0, r5
 185 0064 FFF7FEFF 		bl	charlengths
 186              	.LVL13:
 487:src/menu.c    ****       str += 3;
 187              		.loc 1 487 11 view .LVU53
 188 0068 019B     		ldr	r3, [sp, #4]
 189 006a 0333     		adds	r3, r3, #3
 190 006c 0193     		str	r3, [sp, #4]
 191              	.LVL14:
 192              		.loc 1 489 7 is_stmt 1 view .LVU54
 490:src/menu.c    ****     } else {
 491:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 492:src/menu.c    ****       real_width = width = charlengths(c);
 493:src/menu.c    ****       current_smallp = smallp;
 494:src/menu.c    ****     }
 495:src/menu.c    **** 
 496:src/menu.c    ****     if (x + real_width > xmax)
 193              		.loc 1 496 5 view .LVU55
 194              		.loc 1 496 11 is_stmt 0 view .LVU56
 195 006e C319     		adds	r3, r0, r7
 196              	.LVL15:
 197              		.loc 1 496 8 view .LVU57
 198 0070 9945     		cmp	r9, r3
 199 0072 57DB     		blt	.L7
 200              	.L40:
 497:src/menu.c    ****       break;
 498:src/menu.c    **** 
 499:src/menu.c    ****     if (posns_state != current_smallp) {
 201              		.loc 1 499 5 is_stmt 1 view .LVU58
 202              		.loc 1 499 8 is_stmt 0 view .LVU59
 203 0074 009B     		ldr	r3, [sp]
 204 0076 A342     		cmp	r3, r4
 500:src/menu.c    ****       findlengths(posns, current_smallp);
 205              		.loc 1 500 7 view .LVU60
 206 0078 07AB     		add	r3, sp, #28
 499:src/menu.c    ****       findlengths(posns, current_smallp);
 207              		.loc 1 499 8 view .LVU61
 208 007a 05D0     		beq	.L18
 209              		.loc 1 500 7 is_stmt 1 view .LVU62
 210 007c 1846     		mov	r0, r3
 211              	.LVL16:
 212              		.loc 1 500 7 is_stmt 0 view .LVU63
 213 007e 0099     		ldr	r1, [sp]
 214 0080 0393     		str	r3, [sp, #12]
 215 0082 FFF7FEFF 		bl	findlengths
ARM GAS  /tmp/ccgLZIWS.s 			page 14


 216              	.LVL17:
 217 0086 039B     		ldr	r3, [sp, #12]
 501:src/menu.c    ****       posns_state = current_smallp;
 218              		.loc 1 501 7 is_stmt 1 view .LVU64
 219              	.LVL18:
 220              	.L18:
 502:src/menu.c    ****     }
 503:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 221              		.loc 1 503 5 view .LVU65
 222 0088 009A     		ldr	r2, [sp]
 223 008a 2846     		mov	r0, r5
 224 008c 05A9     		add	r1, sp, #20
 225 008e FFF7FEFF 		bl	unpackchar
 226              	.LVL19:
 504:src/menu.c    **** 
 505:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 227              		.loc 1 505 5 view .LVU66
 228              		.loc 1 505 15 view .LVU67
 229 0092 029B     		ldr	r3, [sp, #8]
 230 0094 03EB4704 		add	r4, r3, r7, lsl #1
 231 0098 294B     		ldr	r3, .L41+8
 232 009a 0DF1140B 		add	fp, sp, #20
 233 009e 1C44     		add	r4, r4, r3
 503:src/menu.c    **** 
 234              		.loc 1 503 5 is_stmt 0 view .LVU68
 235 00a0 4FF0050E 		mov	lr, #5
 236 00a4 A9EB0705 		sub	r5, r9, r7
 237              	.LVL20:
 238              	.L19:
 506:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 239              		.loc 1 506 17 is_stmt 1 view .LVU69
 240              		.loc 1 506 7 is_stmt 0 view .LVU70
 241 00a8 002E     		cmp	r6, #0
 242 00aa 1FDD     		ble	.L25
 507:src/menu.c    **** 	if (x+j >= xmax)
 243              		.loc 1 507 2 is_stmt 1 view .LVU71
 244              		.loc 1 507 5 is_stmt 0 view .LVU72
 245 00ac B945     		cmp	r9, r7
 246 00ae 1DDD     		ble	.L25
 247              	.LBB42:
 248              	.LBB43:
 249              	.LBB44:
 250              	.LBB45:
 508:src/menu.c    **** 	  break;
 509:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 510:src/menu.c    ****       }
 511:src/menu.c    ****     }
 512:src/menu.c    ****     x += width;
 513:src/menu.c    ****   }
 514:src/menu.c    **** }
 515:src/menu.c    **** 
 516:src/menu.c    **** 
 517:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 518:src/menu.c    **** 
 519:src/menu.c    **** int pixel_length(const char *s, int smallp)
 520:src/menu.c    **** {
 521:src/menu.c    ****   int len = 0;
ARM GAS  /tmp/ccgLZIWS.s 			page 15


 522:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 523:src/menu.c    ****   while (*s != '\0') {
 524:src/menu.c    ****     if (s[0] == '\007') {
 525:src/menu.c    ****       len += s[1] & 0x1F;
 526:src/menu.c    ****       s += 3;
 527:src/menu.c    ****       continue;
 528:src/menu.c    ****     }
 529:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 530:src/menu.c    ****   }
 531:src/menu.c    ****   return len;
 532:src/menu.c    **** }
 533:src/menu.c    **** */
 534:src/menu.c    **** 
 535:src/menu.c    **** 
 536:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 537:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 538:src/menu.c    ****   if (on) {
 539:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 540:src/menu.c    ****   }
 541:src/menu.c    ****   else {
 542:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 251              		.loc 1 542 25 view .LVU73
 252 00b0 0AFA0EFC 		lsl	ip, r10, lr
 253              		.loc 1 542 17 view .LVU74
 254 00b4 4FFA8CFC 		sxtb	ip, ip
 255              	.LBE45:
 256              	.LBE44:
 257              	.LBE43:
 258              	.LBE42:
 509:src/menu.c    ****       }
 259              		.loc 1 509 31 view .LVU75
 260 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 261              	.LBB55:
 262              	.LBB52:
 263              	.LBB49:
 264              	.LBB46:
 265              		.loc 1 542 17 view .LVU76
 266 00bc 6FEA0C08 		mvn	r8, ip
 267              	.LBE46:
 268              	.LBE49:
 269              	.LBE52:
 270              	.LBE55:
 506:src/menu.c    **** 	if (x+j >= xmax)
 271              		.loc 1 506 13 view .LVU77
 272 00c0 0023     		movs	r3, #0
 273 00c2 01E0     		b	.L20
 274              	.LVL21:
 275              	.L24:
 507:src/menu.c    **** 	  break;
 276              		.loc 1 507 5 view .LVU78
 277 00c4 9D42     		cmp	r5, r3
 278 00c6 11D0     		beq	.L25
 279              	.LVL22:
 280              	.L20:
 509:src/menu.c    ****       }
 281              		.loc 1 509 2 is_stmt 1 view .LVU79
 282              	.LBB56:
ARM GAS  /tmp/ccgLZIWS.s 			page 16


 283              	.LBI42:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 536 6 view .LVU80
 285              	.LBB53:
 537:src/menu.c    ****   if (on) {
 286              		.loc 1 537 3 view .LVU81
 287              	.LBB50:
 288              	.LBI44:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 289              		.loc 1 536 6 view .LVU82
 290              	.LBB47:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 291              		.loc 1 538 3 view .LVU83
 292              	.LBE47:
 293              	.LBE50:
 537:src/menu.c    ****   if (on) {
 294              		.loc 1 537 6 is_stmt 0 view .LVU84
 295 00c8 DA19     		adds	r2, r3, r7
 296              	.LVL23:
 537:src/menu.c    ****   if (on) {
 297              		.loc 1 537 6 view .LVU85
 298 00ca C72A     		cmp	r2, #199
 299              	.LBE53:
 300              	.LBE56:
 509:src/menu.c    ****       }
 301              		.loc 1 509 46 view .LVU86
 302 00cc 40FA03F1 		asr	r1, r0, r3
 303              	.LBB57:
 304              	.LBB54:
 537:src/menu.c    ****   if (on) {
 305              		.loc 1 537 6 view .LVU87
 306 00d0 09D8     		bhi	.L22
 307              	.LBB51:
 308              	.LBB48:
 539:src/menu.c    ****   }
 309              		.loc 1 539 5 is_stmt 1 view .LVU88
 310              		.loc 1 542 5 view .LVU89
 539:src/menu.c    ****   }
 311              		.loc 1 539 17 is_stmt 0 view .LVU90
 312 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 313              	.LVL24:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 314              		.loc 1 538 6 view .LVU91
 315 00d6 C907     		lsls	r1, r1, #31
 539:src/menu.c    ****   }
 316              		.loc 1 539 17 view .LVU92
 317 00d8 4CBF     		ite	mi
 318 00da 4CEA0202 		orrmi	r2, ip, r2
 319              		.loc 1 542 17 view .LVU93
 320 00de 08EA0202 		andpl	r2, r8, r2
 321 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 322              	.L22:
 323              	.LBE48:
 324              	.LBE51:
 325              	.LBE54:
 326              	.LBE57:
 507:src/menu.c    **** 	  break;
ARM GAS  /tmp/ccgLZIWS.s 			page 17


 327              		.loc 1 507 2 is_stmt 1 view .LVU94
 328              	.LVL25:
 506:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 506 26 view .LVU95
 506:src/menu.c    **** 	if (x+j >= xmax)
 330              		.loc 1 506 27 is_stmt 0 view .LVU96
 331 00e6 0133     		adds	r3, r3, #1
 332              	.LVL26:
 506:src/menu.c    **** 	if (x+j >= xmax)
 333              		.loc 1 506 17 is_stmt 1 view .LVU97
 506:src/menu.c    **** 	if (x+j >= xmax)
 334              		.loc 1 506 7 is_stmt 0 view .LVU98
 335 00e8 B342     		cmp	r3, r6
 336 00ea EBD1     		bne	.L24
 337              	.LVL27:
 338              	.L25:
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 339              		.loc 1 505 20 is_stmt 1 view .LVU99
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 340              		.loc 1 505 15 view .LVU100
 341 00ec 0EF1FF3E 		add	lr, lr, #-1
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 342              		.loc 1 505 5 is_stmt 0 view .LVU101
 343 00f0 BEF1FF3F 		cmp	lr, #-1
 344 00f4 0BF1010B 		add	fp, fp, #1
 345              	.LVL28:
 505:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 346              		.loc 1 505 5 view .LVU102
 347 00f8 D6D1     		bne	.L19
 512:src/menu.c    ****   }
 348              		.loc 1 512 5 is_stmt 1 view .LVU103
 349              	.LBE58:
 460:src/menu.c    ****     int c;
 350              		.loc 1 460 10 is_stmt 0 view .LVU104
 351 00fa 019B     		ldr	r3, [sp, #4]
 352 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 353              	.LBB59:
 512:src/menu.c    ****   }
 354              		.loc 1 512 7 view .LVU105
 355 00fe 3744     		add	r7, r7, r6
 356              	.LVL29:
 512:src/menu.c    ****   }
 357              		.loc 1 512 7 view .LVU106
 358              	.LBE59:
 460:src/menu.c    ****     int c;
 359              		.loc 1 460 9 is_stmt 1 view .LVU107
 360 0100 85B1     		cbz	r5, .L7
 460:src/menu.c    ****     int c;
 361              		.loc 1 460 23 is_stmt 0 view .LVU108
 362 0102 B945     		cmp	r9, r7
 363 0104 0EDB     		blt	.L7
 364              	.LBB60:
 475:src/menu.c    ****       width = str[1] & 0x1F;
 365              		.loc 1 475 8 view .LVU109
 366 0106 072D     		cmp	r5, #7
 367              	.LBE60:
 368 0108 009C     		ldr	r4, [sp]
ARM GAS  /tmp/ccgLZIWS.s 			page 18


 369              	.LBB61:
 461:src/menu.c    ****     int width;
 370              		.loc 1 461 5 is_stmt 1 view .LVU110
 462:src/menu.c    ****     unsigned char cmap[6];
 371              		.loc 1 462 5 view .LVU111
 463:src/menu.c    **** 
 372              		.loc 1 463 5 view .LVU112
 465:src/menu.c    ****     int current_smallp;
 373              		.loc 1 465 5 view .LVU113
 466:src/menu.c    **** 
 374              		.loc 1 466 5 view .LVU114
 475:src/menu.c    ****       width = str[1] & 0x1F;
 375              		.loc 1 475 5 view .LVU115
 475:src/menu.c    ****       width = str[1] & 0x1F;
 376              		.loc 1 475 8 is_stmt 0 view .LVU116
 377 010a 9AD0     		beq	.L39
 378              	.LVL30:
 379              	.L11:
 491:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 491 7 is_stmt 1 view .LVU117
 492:src/menu.c    ****       current_smallp = smallp;
 381              		.loc 1 492 28 is_stmt 0 view .LVU118
 382 010c 2846     		mov	r0, r5
 383 010e FFF7FEFF 		bl	charlengths
 384              	.LVL31:
 491:src/menu.c    ****       real_width = width = charlengths(c);
 385              		.loc 1 491 31 view .LVU119
 386 0112 019B     		ldr	r3, [sp, #4]
 387 0114 0133     		adds	r3, r3, #1
 388 0116 0193     		str	r3, [sp, #4]
 389              	.LVL32:
 492:src/menu.c    ****       current_smallp = smallp;
 390              		.loc 1 492 7 is_stmt 1 view .LVU120
 493:src/menu.c    ****     }
 391              		.loc 1 493 7 view .LVU121
 493:src/menu.c    ****     }
 392              		.loc 1 493 22 is_stmt 0 view .LVU122
 393 0118 0023     		movs	r3, #0
 394              	.LVL33:
 493:src/menu.c    ****     }
 395              		.loc 1 493 22 view .LVU123
 396 011a 0093     		str	r3, [sp]
 397              	.LVL34:
 496:src/menu.c    ****       break;
 398              		.loc 1 496 11 view .LVU124
 399 011c C319     		adds	r3, r0, r7
 400              	.LVL35:
 496:src/menu.c    ****       break;
 401              		.loc 1 496 8 view .LVU125
 402 011e 9945     		cmp	r9, r3
 492:src/menu.c    ****       current_smallp = smallp;
 403              		.loc 1 492 28 view .LVU126
 404 0120 0646     		mov	r6, r0
 496:src/menu.c    ****       break;
 405              		.loc 1 496 5 is_stmt 1 view .LVU127
 496:src/menu.c    ****       break;
 406              		.loc 1 496 8 is_stmt 0 view .LVU128
ARM GAS  /tmp/ccgLZIWS.s 			page 19


 407 0122 A7DA     		bge	.L40
 408              	.LVL36:
 409              	.L7:
 496:src/menu.c    ****       break;
 410              		.loc 1 496 8 view .LVU129
 411              	.LBE61:
 514:src/menu.c    **** 
 412              		.loc 1 514 1 view .LVU130
 413 0124 0DF5097D 		add	sp, sp, #548
 414              		.cfi_remember_state
 415              		.cfi_def_cfa_offset 36
 416              		@ sp needed
 417 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 418              	.LVL37:
 419              	.L34:
 420              		.cfi_restore_state
 421              	.LBB62:
 486:src/menu.c    ****       str += 3;
 422              		.loc 1 486 7 is_stmt 1 view .LVU131
 486:src/menu.c    ****       str += 3;
 423              		.loc 1 486 11 is_stmt 0 view .LVU132
 424 012c 019B     		ldr	r3, [sp, #4]
 425 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 479:src/menu.c    **** 	break;
 426              		.loc 1 479 33 view .LVU133
 427 0130 0023     		movs	r3, #0
 428 0132 0093     		str	r3, [sp]
 429 0134 95E7     		b	.L15
 430              	.L42:
 431 0136 00BF     		.align	2
 432              	.L41:
 433 0138 00000000 		.word	forceDispPlot
 434 013c 00000000 		.word	RectPolConv
 435 0140 00000000 		.word	.LANCHOR0
 436              	.LBE62:
 437              		.cfi_endproc
 438              	.LFE34:
 440              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 441              		.align	2
 442              	.LC2:
 443 0000 57503334 		.ascii	"WP34C calculator for DM42:\000"
 443      43206361 
 443      6C63756C 
 443      61746F72 
 443      20666F72 
 444 001b 00       		.align	2
 445              	.LC3:
 446 001c 746F7020 		.ascii	"top row version,\000"
 446      726F7720 
 446      76657273 
 446      696F6E2C 
 446      00
 447 002d 000000   		.align	2
 448              	.LC4:
 449 0030 696E636C 		.ascii	"including COMPLEX LOCK mode!\000"
 449      7564696E 
 449      6720434F 
ARM GAS  /tmp/ccgLZIWS.s 			page 20


 449      4D504C45 
 449      58204C4F 
 450 004d 000000   		.align	2
 451              	.LC5:
 452 0050 54686973 		.ascii	"This software is neither provided\000"
 452      20736F66 
 452      74776172 
 452      65206973 
 452      206E6569 
 453 0072 0000     		.align	2
 454              	.LC6:
 455 0074 6279206E 		.ascii	"by nor supported by SwissMicros.\000"
 455      6F722073 
 455      7570706F 
 455      72746564 
 455      20627920 
 456 0095 000000   		.align	2
 457              	.LC7:
 458 0098 20202020 		.ascii	"    Press EXIT key to continue...\000"
 458      50726573 
 458      73204558 
 458      4954206B 
 458      65792074 
 459              		.section	.text.disp_about,"ax",%progbits
 460              		.align	1
 461              		.p2align 2,,3
 462              		.global	disp_about
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv4-sp-d16
 468              	disp_about:
 469              	.LFB5:
  73:src/menu.c    ****   lcd_clear_buf();
 470              		.loc 1 73 19 is_stmt 1 view -0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
  74:src/menu.c    ****   lcd_writeClr(t24);
 474              		.loc 1 74 3 view .LVU135
  73:src/menu.c    ****   lcd_clear_buf();
 475              		.loc 1 73 19 is_stmt 0 view .LVU136
 476 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 477              		.cfi_def_cfa_offset 24
 478              		.cfi_offset 4, -24
 479              		.cfi_offset 5, -20
 480              		.cfi_offset 6, -16
 481              		.cfi_offset 7, -12
 482              		.cfi_offset 8, -8
 483              		.cfi_offset 14, -4
  75:src/menu.c    **** 
 484              		.loc 1 75 3 view .LVU137
 485 0004 1E4C     		ldr	r4, .L45
  74:src/menu.c    ****   lcd_writeClr(t24);
 486              		.loc 1 74 3 view .LVU138
 487 0006 1F4B     		ldr	r3, .L45+4
  78:src/menu.c    ****   t24->y += 5;
ARM GAS  /tmp/ccgLZIWS.s 			page 21


 488              		.loc 1 78 3 view .LVU139
 489 0008 1F4D     		ldr	r5, .L45+8
  74:src/menu.c    ****   lcd_writeClr(t24);
 490              		.loc 1 74 3 view .LVU140
 491 000a 9847     		blx	r3
 492              	.LVL38:
  75:src/menu.c    **** 
 493              		.loc 1 75 3 is_stmt 1 view .LVU141
 494 000c 606B     		ldr	r0, [r4, #52]
 495 000e 1F4B     		ldr	r3, .L45+12
 496 0010 9847     		blx	r3
 497              	.LVL39:
  77:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
 498              		.loc 1 77 3 view .LVU142
 499 0012 0522     		movs	r2, #5
 500 0014 606B     		ldr	r0, [r4, #52]
 501 0016 1E4B     		ldr	r3, .L45+16
 502 0018 0021     		movs	r1, #0
 503 001a 9847     		blx	r3
 504              	.LVL40:
  78:src/menu.c    ****   t24->y += 5;
 505              		.loc 1 78 3 view .LVU143
  78:src/menu.c    ****   t24->y += 5;
 506              		.loc 1 78 3 view .LVU144
 507 001c 606B     		ldr	r0, [r4, #52]
 508 001e 1D49     		ldr	r1, .L45+20
 509 0020 0126     		movs	r6, #1
 510 0022 4674     		strb	r6, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 511              		.loc 1 78 3 view .LVU145
 512 0024 A847     		blx	r5
 513              	.LVL41:
  78:src/menu.c    ****   t24->y += 5;
 514              		.loc 1 78 3 view .LVU146
 515 0026 606B     		ldr	r0, [r4, #52]
  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 516              		.loc 1 81 3 is_stmt 0 view .LVU147
 517 0028 1B49     		ldr	r1, .L45+24
  79:src/menu.c    **** #ifdef TOP_ROW
 518              		.loc 1 79 10 view .LVU148
 519 002a C388     		ldrh	r3, [r0, #6]
  78:src/menu.c    ****   t24->y += 5;
 520              		.loc 1 78 3 view .LVU149
 521 002c 0027     		movs	r7, #0
  79:src/menu.c    **** #ifdef TOP_ROW
 522              		.loc 1 79 10 view .LVU150
 523 002e 0533     		adds	r3, r3, #5
 524 0030 C380     		strh	r3, [r0, #6]	@ movhi
  78:src/menu.c    ****   t24->y += 5;
 525              		.loc 1 78 3 view .LVU151
 526 0032 4774     		strb	r7, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 527              		.loc 1 78 3 is_stmt 1 view .LVU152
  79:src/menu.c    **** #ifdef TOP_ROW
 528              		.loc 1 79 3 view .LVU153
  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 529              		.loc 1 81 3 view .LVU154
ARM GAS  /tmp/ccgLZIWS.s 			page 22


 530 0034 A847     		blx	r5
 531              	.LVL42:
  82:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 532              		.loc 1 82 3 view .LVU155
 533 0036 606B     		ldr	r0, [r4, #52]
 534 0038 1849     		ldr	r1, .L45+28
 535 003a A847     		blx	r5
 536              	.LVL43:
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 537              		.loc 1 91 3 view .LVU156
 538 003c 606B     		ldr	r0, [r4, #52]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 539              		.loc 1 92 3 is_stmt 0 view .LVU157
 540 003e 1849     		ldr	r1, .L45+32
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 541              		.loc 1 91 10 view .LVU158
 542 0040 C388     		ldrh	r3, [r0, #6]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 543              		.loc 1 92 3 view .LVU159
 544 0042 4674     		strb	r6, [r0, #17]
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 545              		.loc 1 91 10 view .LVU160
 546 0044 0533     		adds	r3, r3, #5
 547 0046 C380     		strh	r3, [r0, #6]	@ movhi
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 548              		.loc 1 92 3 is_stmt 1 view .LVU161
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 549              		.loc 1 92 3 view .LVU162
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 550              		.loc 1 92 3 view .LVU163
 551 0048 A847     		blx	r5
 552              	.LVL44:
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 553              		.loc 1 92 3 view .LVU164
 554 004a 606B     		ldr	r0, [r4, #52]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 555              		.loc 1 92 3 view .LVU165
  93:src/menu.c    **** 
 556              		.loc 1 93 3 view .LVU166
  93:src/menu.c    **** 
 557              		.loc 1 93 3 view .LVU167
 558 004c 1549     		ldr	r1, .L45+36
 559 004e 4674     		strb	r6, [r0, #17]
  93:src/menu.c    **** 
 560              		.loc 1 93 3 view .LVU168
 561 0050 A847     		blx	r5
 562              	.LVL45:
  93:src/menu.c    **** 
 563              		.loc 1 93 3 view .LVU169
 564 0052 606B     		ldr	r0, [r4, #52]
  95:src/menu.c    ****   t24->x = 20;
 565              		.loc 1 95 20 is_stmt 0 view .LVU170
 566 0054 144B     		ldr	r3, .L45+40
  93:src/menu.c    **** 
 567              		.loc 1 93 3 view .LVU171
 568 0056 4774     		strb	r7, [r0, #17]
  93:src/menu.c    **** 
ARM GAS  /tmp/ccgLZIWS.s 			page 23


 569              		.loc 1 93 3 is_stmt 1 view .LVU172
  95:src/menu.c    ****   t24->x = 20;
 570              		.loc 1 95 3 view .LVU173
  95:src/menu.c    ****   t24->x = 20;
 571              		.loc 1 95 20 is_stmt 0 view .LVU174
 572 0058 9847     		blx	r3
 573              	.LVL46:
  95:src/menu.c    ****   t24->x = 20;
 574              		.loc 1 95 3 view .LVU175
 575 005a 636B     		ldr	r3, [r4, #52]
  97:src/menu.c    **** 
 576              		.loc 1 97 3 view .LVU176
 577 005c 1349     		ldr	r1, .L45+44
 578 005e 5E74     		strb	r6, [r3, #17]
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 579              		.loc 1 96 10 view .LVU177
 580 0060 1422     		movs	r2, #20
  95:src/menu.c    ****   t24->x = 20;
 581              		.loc 1 95 39 view .LVU178
 582 0062 C0F1EB00 		rsb	r0, r0, #235
  95:src/menu.c    ****   t24->x = 20;
 583              		.loc 1 95 10 view .LVU179
 584 0066 D880     		strh	r0, [r3, #6]	@ movhi
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 585              		.loc 1 96 3 is_stmt 1 view .LVU180
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 586              		.loc 1 96 10 is_stmt 0 view .LVU181
 587 0068 9A80     		strh	r2, [r3, #4]	@ movhi
  97:src/menu.c    **** 
 588              		.loc 1 97 3 is_stmt 1 view .LVU182
  97:src/menu.c    **** 
 589              		.loc 1 97 3 view .LVU183
  97:src/menu.c    **** 
 590              		.loc 1 97 3 view .LVU184
 591 006a 1846     		mov	r0, r3
 592 006c A847     		blx	r5
 593              	.LVL47:
  97:src/menu.c    **** 
 594              		.loc 1 97 3 view .LVU185
 595 006e 626B     		ldr	r2, [r4, #52]
  99:src/menu.c    **** 
 596              		.loc 1 99 3 is_stmt 0 view .LVU186
 597 0070 0F4B     		ldr	r3, .L45+48
  97:src/menu.c    **** 
 598              		.loc 1 97 3 view .LVU187
 599 0072 5774     		strb	r7, [r2, #17]
  97:src/menu.c    **** 
 600              		.loc 1 97 3 is_stmt 1 view .LVU188
  99:src/menu.c    **** 
 601              		.loc 1 99 3 view .LVU189
 602 0074 9847     		blx	r3
 603              	.LVL48:
 101:src/menu.c    **** }
 604              		.loc 1 101 3 view .LVU190
 102:src/menu.c    **** 
 605              		.loc 1 102 1 is_stmt 0 view .LVU191
 606 0076 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/ccgLZIWS.s 			page 24


 607              		.cfi_restore 14
 608              		.cfi_restore 8
 609              		.cfi_restore 7
 610              		.cfi_restore 6
 611              		.cfi_restore 5
 612              		.cfi_restore 4
 613              		.cfi_def_cfa_offset 0
 101:src/menu.c    **** }
 614              		.loc 1 101 3 view .LVU192
 615 007a 0E4B     		ldr	r3, .L45+52
 616 007c 1847     		bx	r3	@ indirect register sibling call
 617              	.LVL49:
 618              	.L46:
 619 007e 00BF     		.align	2
 620              	.L45:
 621 0080 00200010 		.word	268443648
 622 0084 2D020008 		.word	134218285
 623 0088 B1020008 		.word	134218417
 624 008c 65020008 		.word	134218341
 625 0090 6D020008 		.word	134218349
 626 0094 00000000 		.word	.LC2
 627 0098 1C000000 		.word	.LC3
 628 009c 30000000 		.word	.LC4
 629 00a0 50000000 		.word	.LC5
 630 00a4 74000000 		.word	.LC6
 631 00a8 71020008 		.word	134218353
 632 00ac 98000000 		.word	.LC7
 633 00b0 31020008 		.word	134218289
 634 00b4 99030008 		.word	134218649
 635              		.cfi_endproc
 636              	.LFE5:
 638              		.section	.text.run_menu_item,"ax",%progbits
 639              		.align	1
 640              		.p2align 2,,3
 641              		.global	run_menu_item
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	run_menu_item:
 648              	.LVL50:
 649              	.LFB3:
  42:src/menu.c    ****   int ret = 0;
 650              		.loc 1 42 36 is_stmt 1 view -0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
  43:src/menu.c    **** 
 654              		.loc 1 43 3 view .LVU194
  45:src/menu.c    ****     case MI_ABOUT_PGM:
 655              		.loc 1 45 3 view .LVU195
 656 0000 0B28     		cmp	r0, #11
 657 0002 04D1     		bne	.L49
  47:src/menu.c    ****       break;
 658              		.loc 1 47 7 view .LVU196
  42:src/menu.c    ****   int ret = 0;
 659              		.loc 1 42 36 is_stmt 0 view .LVU197
ARM GAS  /tmp/ccgLZIWS.s 			page 25


 660 0004 08B5     		push	{r3, lr}
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 3, -8
 663              		.cfi_offset 14, -4
  47:src/menu.c    ****       break;
 664              		.loc 1 47 7 view .LVU198
 665 0006 FFF7FEFF 		bl	disp_about
 666              	.LVL51:
  48:src/menu.c    **** 
 667              		.loc 1 48 7 is_stmt 1 view .LVU199
  43:src/menu.c    **** 
 668              		.loc 1 43 7 is_stmt 0 view .LVU200
 669 000a 0020     		movs	r0, #0
  56:src/menu.c    **** 
 670              		.loc 1 56 1 view .LVU201
 671 000c 08BD     		pop	{r3, pc}
 672              	.LVL52:
 673              	.L49:
 674              		.cfi_def_cfa_offset 0
 675              		.cfi_restore 3
 676              		.cfi_restore 14
  51:src/menu.c    ****       break;
 677              		.loc 1 51 11 view .LVU202
 678 000e 4FF0FF30 		mov	r0, #-1
 679              	.LVL53:
  55:src/menu.c    **** }
 680              		.loc 1 55 3 is_stmt 1 view .LVU203
  56:src/menu.c    **** 
 681              		.loc 1 56 1 is_stmt 0 view .LVU204
 682 0012 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE3:
 686              		.section	.text.set_menu,"ax",%progbits
 687              		.align	1
 688              		.p2align 2,,3
 689              		.global	set_menu
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu fpv4-sp-d16
 695              	set_menu:
 696              	.LVL54:
 697              	.LFB6:
 108:src/menu.c    ****   menu_name m = current_menu;
 698              		.loc 1 108 38 is_stmt 1 view -0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 703              		.loc 1 109 3 view .LVU206
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 704              		.loc 1 109 13 is_stmt 0 view .LVU207
 705 0000 0A4A     		ldr	r2, .L66
 706 0002 92F90030 		ldrsb	r3, [r2]
 707              	.LVL55:
 110:src/menu.c    ****     current_menu = default_menu;
ARM GAS  /tmp/ccgLZIWS.s 			page 26


 708              		.loc 1 110 3 is_stmt 1 view .LVU208
 110:src/menu.c    ****     current_menu = default_menu;
 709              		.loc 1 110 6 is_stmt 0 view .LVU209
 710 0006 8342     		cmp	r3, r0
 711 0008 0CD0     		beq	.L65
 113:src/menu.c    ****     current_menu = last_menu;
 712              		.loc 1 113 8 is_stmt 1 view .LVU210
 113:src/menu.c    ****     current_menu = last_menu;
 713              		.loc 1 113 11 is_stmt 0 view .LVU211
 714 000a 411C     		adds	r1, r0, #1
 114:src/menu.c    ****   }
 715              		.loc 1 114 5 is_stmt 1 view .LVU212
 114:src/menu.c    ****   }
 716              		.loc 1 114 18 is_stmt 0 view .LVU213
 717 000c 09BF     		itett	eq
 718 000e 0849     		ldreq	r1, .L66+4
 117:src/menu.c    ****   }
 719              		.loc 1 117 18 view .LVU214
 720 0010 1070     		strbne	r0, [r2]
 114:src/menu.c    ****   }
 721              		.loc 1 114 18 view .LVU215
 722 0012 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 723 0014 1170     		strbeq	r1, [r2]
 117:src/menu.c    ****   }
 724              		.loc 1 117 5 is_stmt 1 view .LVU216
 725              	.L56:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 726              		.loc 1 119 3 view .LVU217
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 727              		.loc 1 119 6 is_stmt 0 view .LVU218
 728 0016 092B     		cmp	r3, #9
 729 0018 03D0     		beq	.L54
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 730              		.loc 1 119 23 discriminator 1 view .LVU219
 731 001a 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 732              		.loc 1 119 43 is_stmt 1 discriminator 1 view .LVU220
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 733              		.loc 1 119 53 is_stmt 0 discriminator 1 view .LVU221
 734 001c 1CBF     		itt	ne
 735 001e 044A     		ldrne	r2, .L66+4
 736 0020 1370     		strbne	r3, [r2]
 737              	.L54:
 121:src/menu.c    **** 
 738              		.loc 1 121 1 view .LVU222
 739 0022 7047     		bx	lr
 740              	.L65:
 111:src/menu.c    ****   }
 741              		.loc 1 111 5 is_stmt 1 view .LVU223
 111:src/menu.c    ****   }
 742              		.loc 1 111 18 is_stmt 0 view .LVU224
 743 0024 0349     		ldr	r1, .L66+8
 744 0026 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 745 0028 1170     		strb	r1, [r2]
 746 002a F4E7     		b	.L56
 747              	.L67:
 748              		.align	2
ARM GAS  /tmp/ccgLZIWS.s 			page 27


 749              	.L66:
 750 002c 00000000 		.word	.LANCHOR1
 751 0030 00000000 		.word	.LANCHOR3
 752 0034 00000000 		.word	.LANCHOR2
 753              		.cfi_endproc
 754              	.LFE6:
 756              		.section	.text.set_default_menu,"ax",%progbits
 757              		.align	1
 758              		.p2align 2,,3
 759              		.global	set_default_menu
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 763              		.fpu fpv4-sp-d16
 765              	set_default_menu:
 766              	.LFB7:
 123:src/menu.c    ****   set_menu (default_menu);
 767              		.loc 1 123 26 is_stmt 1 view -0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 124:src/menu.c    **** }
 772              		.loc 1 124 3 view .LVU226
 773 0000 0A4B     		ldr	r3, .L80
 774              	.LBB63:
 775              	.LBB64:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 776              		.loc 1 109 13 is_stmt 0 view .LVU227
 777 0002 0B49     		ldr	r1, .L80+4
 778              	.LBE64:
 779              	.LBE63:
 124:src/menu.c    **** }
 780              		.loc 1 124 3 view .LVU228
 781 0004 93F90020 		ldrsb	r2, [r3]
 782              	.LVL56:
 783              	.LBB67:
 784              	.LBI63:
 108:src/menu.c    ****   menu_name m = current_menu;
 785              		.loc 1 108 6 is_stmt 1 view .LVU229
 786              	.LBB65:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 787              		.loc 1 109 3 view .LVU230
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 788              		.loc 1 109 13 is_stmt 0 view .LVU231
 789 0008 91F90030 		ldrsb	r3, [r1]
 790              	.LVL57:
 110:src/menu.c    ****     current_menu = default_menu;
 791              		.loc 1 110 3 is_stmt 1 view .LVU232
 110:src/menu.c    ****     current_menu = default_menu;
 792              		.loc 1 110 6 is_stmt 0 view .LVU233
 793 000c 9A42     		cmp	r2, r3
 794 000e 0BD0     		beq	.L79
 113:src/menu.c    ****     current_menu = last_menu;
 795              		.loc 1 113 8 is_stmt 1 view .LVU234
 113:src/menu.c    ****     current_menu = last_menu;
 796              		.loc 1 113 11 is_stmt 0 view .LVU235
ARM GAS  /tmp/ccgLZIWS.s 			page 28


 797 0010 501C     		adds	r0, r2, #1
 114:src/menu.c    ****   }
 798              		.loc 1 114 5 is_stmt 1 view .LVU236
 114:src/menu.c    ****   }
 799              		.loc 1 114 18 is_stmt 0 view .LVU237
 800 0012 04BF     		itt	eq
 801 0014 074A     		ldreq	r2, .L80+8
 802              	.LVL58:
 114:src/menu.c    ****   }
 803              		.loc 1 114 18 view .LVU238
 804 0016 1278     		ldrbeq	r2, [r2]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 805              		.loc 1 117 5 is_stmt 1 view .LVU239
 117:src/menu.c    ****   }
 806              		.loc 1 117 18 is_stmt 0 view .LVU240
 807 0018 0A70     		strb	r2, [r1]
 808              	.LVL59:
 809              	.L70:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 810              		.loc 1 119 3 is_stmt 1 view .LVU241
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 811              		.loc 1 119 6 is_stmt 0 view .LVU242
 812 001a 092B     		cmp	r3, #9
 813 001c 03D0     		beq	.L68
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 814              		.loc 1 119 23 view .LVU243
 815 001e 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 816              		.loc 1 119 43 is_stmt 1 view .LVU244
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 817              		.loc 1 119 53 is_stmt 0 view .LVU245
 818 0020 1CBF     		itt	ne
 819 0022 044A     		ldrne	r2, .L80+8
 820 0024 1370     		strbne	r3, [r2]
 821              	.LVL60:
 822              	.L68:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 823              		.loc 1 119 53 view .LVU246
 824              	.LBE65:
 825              	.LBE67:
 125:src/menu.c    **** 
 826              		.loc 1 125 1 view .LVU247
 827 0026 7047     		bx	lr
 828              	.LVL61:
 829              	.L79:
 830              	.LBB68:
 831              	.LBB66:
 111:src/menu.c    ****   }
 832              		.loc 1 111 5 is_stmt 1 view .LVU248
 111:src/menu.c    ****   }
 833              		.loc 1 111 18 is_stmt 0 view .LVU249
 834 0028 0B70     		strb	r3, [r1]
 835 002a F6E7     		b	.L70
 836              	.L81:
 837              		.align	2
 838              	.L80:
 839 002c 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/ccgLZIWS.s 			page 29


 840 0030 00000000 		.word	.LANCHOR1
 841 0034 00000000 		.word	.LANCHOR3
 842              	.LBE66:
 843              	.LBE68:
 844              		.cfi_endproc
 845              	.LFE7:
 847              		.section	.text.toggle_default_menu,"ax",%progbits
 848              		.align	1
 849              		.p2align 2,,3
 850              		.global	toggle_default_menu
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 854              		.fpu fpv4-sp-d16
 856              	toggle_default_menu:
 857              	.LFB8:
 127:src/menu.c    ****   if (current_menu == M_Blank) {
 858              		.loc 1 127 29 is_stmt 1 view -0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 0
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862              		@ link register save eliminated.
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 863              		.loc 1 128 3 view .LVU251
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 864              		.loc 1 128 20 is_stmt 0 view .LVU252
 865 0000 104A     		ldr	r2, .L98
 129:src/menu.c    ****     return;
 866              		.loc 1 129 33 view .LVU253
 867 0002 1149     		ldr	r1, .L98+4
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 868              		.loc 1 128 20 view .LVU254
 869 0004 92F90030 		ldrsb	r3, [r2]
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 870              		.loc 1 128 6 view .LVU255
 871 0008 ABB1     		cbz	r3, .L95
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 872              		.loc 1 132 8 is_stmt 1 view .LVU256
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 873              		.loc 1 132 11 is_stmt 0 view .LVU257
 874 000a 0F2B     		cmp	r3, #15
 875 000c 0FD0     		beq	.L96
 136:src/menu.c    ****   }
 876              		.loc 1 136 5 is_stmt 1 view .LVU258
 877              	.LBB69:
 878              	.LBI69:
 123:src/menu.c    ****   set_menu (default_menu);
 879              		.loc 1 123 6 view .LVU259
 880              	.LBB70:
 124:src/menu.c    **** }
 881              		.loc 1 124 3 view .LVU260
 882 000e 91F90010 		ldrsb	r1, [r1]
 883              	.LVL62:
 884              	.LBB71:
 885              	.LBI71:
 108:src/menu.c    ****   menu_name m = current_menu;
 886              		.loc 1 108 6 view .LVU261
ARM GAS  /tmp/ccgLZIWS.s 			page 30


 887              	.LBB72:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 888              		.loc 1 109 3 view .LVU262
 110:src/menu.c    ****     current_menu = default_menu;
 889              		.loc 1 110 3 view .LVU263
 110:src/menu.c    ****     current_menu = default_menu;
 890              		.loc 1 110 6 is_stmt 0 view .LVU264
 891 0012 8B42     		cmp	r3, r1
 892 0014 13D0     		beq	.L97
 113:src/menu.c    ****     current_menu = last_menu;
 893              		.loc 1 113 8 is_stmt 1 view .LVU265
 113:src/menu.c    ****     current_menu = last_menu;
 894              		.loc 1 113 11 is_stmt 0 view .LVU266
 895 0016 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 896              		.loc 1 114 5 is_stmt 1 view .LVU267
 114:src/menu.c    ****   }
 897              		.loc 1 114 18 is_stmt 0 view .LVU268
 898 0018 04BF     		itt	eq
 899 001a 0C49     		ldreq	r1, .L98+8
 900              	.LVL63:
 114:src/menu.c    ****   }
 901              		.loc 1 114 18 view .LVU269
 902 001c 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 903              		.loc 1 117 5 is_stmt 1 view .LVU270
 117:src/menu.c    ****   }
 904              		.loc 1 117 18 is_stmt 0 view .LVU271
 905 001e 1170     		strb	r1, [r2]
 906              	.LVL64:
 907              	.L87:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 908              		.loc 1 119 3 is_stmt 1 view .LVU272
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 909              		.loc 1 119 6 is_stmt 0 view .LVU273
 910 0020 092B     		cmp	r3, #9
 911 0022 03D0     		beq	.L82
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 912              		.loc 1 119 23 view .LVU274
 913 0024 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 914              		.loc 1 119 43 is_stmt 1 view .LVU275
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 915              		.loc 1 119 53 is_stmt 0 view .LVU276
 916 0026 1CBF     		itt	ne
 917 0028 084A     		ldrne	r2, .L98+8
 918 002a 1370     		strbne	r3, [r2]
 919              	.LVL65:
 920              	.L82:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 921              		.loc 1 119 53 view .LVU277
 922              	.LBE72:
 923              	.LBE71:
 924              	.LBE70:
 925              	.LBE69:
 138:src/menu.c    **** 
 926              		.loc 1 138 1 view .LVU278
ARM GAS  /tmp/ccgLZIWS.s 			page 31


 927 002c 7047     		bx	lr
 928              	.L96:
 133:src/menu.c    ****   }
 929              		.loc 1 133 5 is_stmt 1 view .LVU279
 133:src/menu.c    ****   }
 930              		.loc 1 133 33 is_stmt 0 view .LVU280
 931 002e 0023     		movs	r3, #0
 932 0030 0B70     		strb	r3, [r1]
 133:src/menu.c    ****   }
 933              		.loc 1 133 18 view .LVU281
 934 0032 1370     		strb	r3, [r2]
 935 0034 7047     		bx	lr
 936              	.L95:
 129:src/menu.c    ****     return;
 937              		.loc 1 129 5 is_stmt 1 view .LVU282
 129:src/menu.c    ****     return;
 938              		.loc 1 129 33 is_stmt 0 view .LVU283
 939 0036 0F23     		movs	r3, #15
 940 0038 0B70     		strb	r3, [r1]
 129:src/menu.c    ****     return;
 941              		.loc 1 129 18 view .LVU284
 942 003a 1370     		strb	r3, [r2]
 130:src/menu.c    ****   }
 943              		.loc 1 130 5 is_stmt 1 view .LVU285
 944 003c 7047     		bx	lr
 945              	.LVL66:
 946              	.L97:
 947              	.LBB76:
 948              	.LBB75:
 949              	.LBB74:
 950              	.LBB73:
 111:src/menu.c    ****   }
 951              		.loc 1 111 5 view .LVU286
 111:src/menu.c    ****   }
 952              		.loc 1 111 18 is_stmt 0 view .LVU287
 953 003e 1370     		strb	r3, [r2]
 954 0040 EEE7     		b	.L87
 955              	.L99:
 956 0042 00BF     		.align	2
 957              	.L98:
 958 0044 00000000 		.word	.LANCHOR1
 959 0048 00000000 		.word	.LANCHOR2
 960 004c 00000000 		.word	.LANCHOR3
 961              	.LBE73:
 962              	.LBE74:
 963              	.LBE75:
 964              	.LBE76:
 965              		.cfi_endproc
 966              	.LFE8:
 968              		.section	.text.get_menu,"ax",%progbits
 969              		.align	1
 970              		.p2align 2,,3
 971              		.global	get_menu
 972              		.syntax unified
 973              		.thumb
 974              		.thumb_func
 975              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccgLZIWS.s 			page 32


 977              	get_menu:
 978              	.LFB9:
 140:src/menu.c    ****   return current_menu;
 979              		.loc 1 140 23 is_stmt 1 view -0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 0
 982              		@ frame_needed = 0, uses_anonymous_args = 0
 983              		@ link register save eliminated.
 141:src/menu.c    **** }
 984              		.loc 1 141 3 view .LVU289
 141:src/menu.c    **** }
 985              		.loc 1 141 10 is_stmt 0 view .LVU290
 986 0000 014B     		ldr	r3, .L101
 142:src/menu.c    **** 
 987              		.loc 1 142 1 view .LVU291
 988 0002 93F90000 		ldrsb	r0, [r3]
 989 0006 7047     		bx	lr
 990              	.L102:
 991              		.align	2
 992              	.L101:
 993 0008 00000000 		.word	.LANCHOR1
 994              		.cfi_endproc
 995              	.LFE9:
 997              		.section	.text.get_last_menu,"ax",%progbits
 998              		.align	1
 999              		.p2align 2,,3
 1000              		.global	get_last_menu
 1001              		.syntax unified
 1002              		.thumb
 1003              		.thumb_func
 1004              		.fpu fpv4-sp-d16
 1006              	get_last_menu:
 1007              	.LFB10:
 144:src/menu.c    ****   return last_menu;
 1008              		.loc 1 144 28 is_stmt 1 view -0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 0
 1011              		@ frame_needed = 0, uses_anonymous_args = 0
 1012              		@ link register save eliminated.
 145:src/menu.c    **** }
 1013              		.loc 1 145 3 view .LVU293
 145:src/menu.c    **** }
 1014              		.loc 1 145 10 is_stmt 0 view .LVU294
 1015 0000 014B     		ldr	r3, .L104
 146:src/menu.c    **** 
 1016              		.loc 1 146 1 view .LVU295
 1017 0002 93F90000 		ldrsb	r0, [r3]
 1018 0006 7047     		bx	lr
 1019              	.L105:
 1020              		.align	2
 1021              	.L104:
 1022 0008 00000000 		.word	.LANCHOR3
 1023              		.cfi_endproc
 1024              	.LFE10:
 1026              		.section	.text.set_last_menu,"ax",%progbits
 1027              		.align	1
 1028              		.p2align 2,,3
ARM GAS  /tmp/ccgLZIWS.s 			page 33


 1029              		.global	set_last_menu
 1030              		.syntax unified
 1031              		.thumb
 1032              		.thumb_func
 1033              		.fpu fpv4-sp-d16
 1035              	set_last_menu:
 1036              	.LFB12:
 152:src/menu.c    ****   set_menu (M_Last);
 1037              		.loc 1 152 23 is_stmt 1 view -0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 0
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041              		@ link register save eliminated.
 153:src/menu.c    **** }
 1042              		.loc 1 153 3 view .LVU297
 1043              	.LVL67:
 1044              	.LBB77:
 1045              	.LBI77:
 108:src/menu.c    ****   menu_name m = current_menu;
 1046              		.loc 1 108 6 view .LVU298
 1047              	.LBB78:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1048              		.loc 1 109 3 view .LVU299
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1049              		.loc 1 109 13 is_stmt 0 view .LVU300
 1050 0000 0A4A     		ldr	r2, .L119
 1051 0002 92F90030 		ldrsb	r3, [r2]
 1052              	.LVL68:
 110:src/menu.c    ****     current_menu = default_menu;
 1053              		.loc 1 110 3 is_stmt 1 view .LVU301
 110:src/menu.c    ****     current_menu = default_menu;
 1054              		.loc 1 110 6 is_stmt 0 view .LVU302
 1055 0006 591C     		adds	r1, r3, #1
 1056 0008 09D0     		beq	.L116
 113:src/menu.c    ****     current_menu = last_menu;
 1057              		.loc 1 113 8 is_stmt 1 view .LVU303
 114:src/menu.c    ****   }
 1058              		.loc 1 114 5 view .LVU304
 114:src/menu.c    ****   }
 1059              		.loc 1 114 18 is_stmt 0 view .LVU305
 1060 000a 0949     		ldr	r1, .L119+4
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1061              		.loc 1 119 6 view .LVU306
 1062 000c 092B     		cmp	r3, #9
 114:src/menu.c    ****   }
 1063              		.loc 1 114 18 view .LVU307
 1064 000e 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1065 0010 1070     		strb	r0, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1066              		.loc 1 119 3 is_stmt 1 view .LVU308
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1067              		.loc 1 119 6 is_stmt 0 view .LVU309
 1068 0012 00D1     		bne	.L117
 1069              	.L106:
 1070              	.LBE78:
 1071              	.LBE77:
 154:src/menu.c    **** 
ARM GAS  /tmp/ccgLZIWS.s 			page 34


 1072              		.loc 1 154 1 view .LVU310
 1073 0014 7047     		bx	lr
 1074              	.L117:
 1075              	.LBB81:
 1076              	.LBB79:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1077              		.loc 1 119 23 view .LVU311
 1078 0016 102B     		cmp	r3, #16
 1079 0018 FCD0     		beq	.L106
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1080              		.loc 1 119 43 is_stmt 1 view .LVU312
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1081              		.loc 1 119 53 is_stmt 0 view .LVU313
 1082 001a 0B70     		strb	r3, [r1]
 1083              	.LVL69:
 1084              	.L118:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1085              		.loc 1 119 53 view .LVU314
 1086              	.LBE79:
 1087              	.LBE81:
 154:src/menu.c    **** 
 1088              		.loc 1 154 1 view .LVU315
 1089 001c 7047     		bx	lr
 1090              	.LVL70:
 1091              	.L116:
 1092              	.LBB82:
 1093              	.LBB80:
 111:src/menu.c    ****   }
 1094              		.loc 1 111 5 is_stmt 1 view .LVU316
 111:src/menu.c    ****   }
 1095              		.loc 1 111 18 is_stmt 0 view .LVU317
 1096 001e 0548     		ldr	r0, .L119+8
 1097 0020 0349     		ldr	r1, .L119+4
 1098 0022 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1099 0024 1070     		strb	r0, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1100              		.loc 1 119 3 is_stmt 1 view .LVU318
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1101              		.loc 1 119 43 view .LVU319
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1102              		.loc 1 119 53 is_stmt 0 view .LVU320
 1103 0026 0B70     		strb	r3, [r1]
 1104              	.LVL71:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1105              		.loc 1 119 53 view .LVU321
 1106 0028 F8E7     		b	.L118
 1107              	.L120:
 1108 002a 00BF     		.align	2
 1109              	.L119:
 1110 002c 00000000 		.word	.LANCHOR1
 1111 0030 00000000 		.word	.LANCHOR3
 1112 0034 00000000 		.word	.LANCHOR2
 1113              	.LBE80:
 1114              	.LBE82:
 1115              		.cfi_endproc
 1116              	.LFE12:
 1118              		.section	.text.mdot,"ax",%progbits
ARM GAS  /tmp/ccgLZIWS.s 			page 35


 1119              		.align	1
 1120              		.p2align 2,,3
 1121              		.global	mdot
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu fpv4-sp-d16
 1127              	mdot:
 1128              	.LVL72:
 1129              	.LFB14:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1130              		.loc 1 536 40 is_stmt 1 view -0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 1134              		@ link register save eliminated.
 537:src/menu.c    ****   if (on) {
 1135              		.loc 1 537 3 view .LVU323
 537:src/menu.c    ****   if (on) {
 1136              		.loc 1 537 6 is_stmt 0 view .LVU324
 1137 0000 C728     		cmp	r0, #199
 1138 0002 1AD8     		bhi	.L125
 1139              	.LVL73:
 1140              	.LBB85:
 1141              	.LBI85:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1142              		.loc 1 536 6 is_stmt 1 view .LVU325
 1143              	.LBB86:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1144              		.loc 1 538 3 view .LVU326
 1145              	.LBE86:
 1146              	.LBE85:
 536:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1147              		.loc 1 536 40 is_stmt 0 view .LVU327
 1148 0004 10B4     		push	{r4}
 1149              		.cfi_def_cfa_offset 4
 1150              		.cfi_offset 4, -4
 1151              	.LBB89:
 1152              	.LBB87:
 538:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1153              		.loc 1 538 6 view .LVU328
 1154 0006 63B9     		cbnz	r3, .L128
 1155              		.loc 1 542 5 is_stmt 1 view .LVU329
 1156              		.loc 1 542 17 is_stmt 0 view .LVU330
 1157 0008 0C4B     		ldr	r3, .L129
 1158              	.LVL74:
 1159              		.loc 1 542 17 view .LVU331
 1160 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1161              	.LVL75:
 1162              		.loc 1 542 25 view .LVU332
 1163 000e 0124     		movs	r4, #1
 1164              		.loc 1 542 17 view .LVU333
 1165 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1166              		.loc 1 542 25 view .LVU334
 1167 0012 04FA01F1 		lsl	r1, r4, r1
 1168              	.LVL76:
 1169              		.loc 1 542 17 view .LVU335
ARM GAS  /tmp/ccgLZIWS.s 			page 36


 1170 0016 23EA0101 		bic	r1, r3, r1
 1171 001a 8154     		strb	r1, [r0, r2]
 1172              	.LVL77:
 1173              		.loc 1 542 17 view .LVU336
 1174              	.LBE87:
 1175              	.LBE89:
 543:src/menu.c    ****   }
 544:src/menu.c    **** }
 1176              		.loc 1 544 1 view .LVU337
 1177 001c 5DF8044B 		ldr	r4, [sp], #4
 1178              		.cfi_remember_state
 1179              		.cfi_restore 4
 1180              		.cfi_def_cfa_offset 0
 1181 0020 7047     		bx	lr
 1182              	.LVL78:
 1183              	.L128:
 1184              		.cfi_restore_state
 1185              	.LBB90:
 1186              	.LBB88:
 539:src/menu.c    ****   }
 1187              		.loc 1 539 5 is_stmt 1 view .LVU338
 539:src/menu.c    ****   }
 1188              		.loc 1 539 17 is_stmt 0 view .LVU339
 1189 0022 064B     		ldr	r3, .L129
 1190              	.LVL79:
 539:src/menu.c    ****   }
 1191              		.loc 1 539 17 view .LVU340
 1192 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1193              	.LVL80:
 539:src/menu.c    ****   }
 1194              		.loc 1 539 24 view .LVU341
 1195 0028 0124     		movs	r4, #1
 539:src/menu.c    ****   }
 1196              		.loc 1 539 17 view .LVU342
 1197 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 539:src/menu.c    ****   }
 1198              		.loc 1 539 24 view .LVU343
 1199 002c 04FA01F1 		lsl	r1, r4, r1
 1200              	.LVL81:
 539:src/menu.c    ****   }
 1201              		.loc 1 539 17 view .LVU344
 1202 0030 1943     		orrs	r1, r1, r3
 1203 0032 8154     		strb	r1, [r0, r2]
 1204              	.LBE88:
 1205              	.LBE90:
 1206              		.loc 1 544 1 view .LVU345
 1207 0034 5DF8044B 		ldr	r4, [sp], #4
 1208              		.cfi_restore 4
 1209              		.cfi_def_cfa_offset 0
 1210 0038 7047     		bx	lr
 1211              	.LVL82:
 1212              	.L125:
 1213              		.loc 1 544 1 view .LVU346
 1214 003a 7047     		bx	lr
 1215              	.L130:
 1216              		.align	2
 1217              	.L129:
ARM GAS  /tmp/ccgLZIWS.s 			page 37


 1218 003c 00000000 		.word	.LANCHOR0
 1219              		.cfi_endproc
 1220              	.LFE14:
 1222              		.section	.text.get_current_menu_ref,"ax",%progbits
 1223              		.align	1
 1224              		.p2align 2,,3
 1225              		.global	get_current_menu_ref
 1226              		.syntax unified
 1227              		.thumb
 1228              		.thumb_func
 1229              		.fpu fpv4-sp-d16
 1231              	get_current_menu_ref:
 1232              	.LVL83:
 1233              	.LFB15:
 545:src/menu.c    **** 
 546:src/menu.c    **** struct _menu get_current_menu_ref() {
 1234              		.loc 1 546 37 is_stmt 1 view -0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 0
 1237              		@ frame_needed = 0, uses_anonymous_args = 0
 547:src/menu.c    ****   int i = current_menu;
 1238              		.loc 1 547 3 view .LVU348
 546:src/menu.c    ****   int i = current_menu;
 1239              		.loc 1 546 37 is_stmt 0 view .LVU349
 1240 0000 08B5     		push	{r3, lr}
 1241              		.cfi_def_cfa_offset 8
 1242              		.cfi_offset 3, -8
 1243              		.cfi_offset 14, -4
 548:src/menu.c    ****   if (C_LOCKED)
 1244              		.loc 1 548 7 view .LVU350
 1245 0002 294B     		ldr	r3, .L147
 547:src/menu.c    ****   int i = current_menu;
 1246              		.loc 1 547 7 view .LVU351
 1247 0004 294A     		ldr	r2, .L147+4
 1248              		.loc 1 548 7 view .LVU352
 1249 0006 1B68     		ldr	r3, [r3]
 547:src/menu.c    ****   int i = current_menu;
 1250              		.loc 1 547 7 view .LVU353
 1251 0008 92F90010 		ldrsb	r1, [r2]
 1252              	.LVL84:
 1253              		.loc 1 548 3 is_stmt 1 view .LVU354
 1254              		.loc 1 548 7 is_stmt 0 view .LVU355
 1255 000c 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 1256              		.loc 1 548 6 view .LVU356
 1257 0010 03F04102 		and	r2, r3, #65
 1258 0014 412A     		cmp	r2, #65
 546:src/menu.c    ****   int i = current_menu;
 1259              		.loc 1 546 37 view .LVU357
 1260 0016 0346     		mov	r3, r0
 1261              		.loc 1 548 6 view .LVU358
 1262 0018 0BD0     		beq	.L145
 1263              	.LVL85:
 1264              	.L132:
 549:src/menu.c    ****     switch (current_menu) {
 550:src/menu.c    ****     case (M_Clear):
 551:src/menu.c    ****       i = M_Clear_C;
 552:src/menu.c    ****       break;
ARM GAS  /tmp/ccgLZIWS.s 			page 38


 553:src/menu.c    ****     case (M_Swap):
 554:src/menu.c    ****       i = M_Swap_C;
 555:src/menu.c    ****       break;
 556:src/menu.c    ****     case (M_Arrow):
 557:src/menu.c    ****       i = M_Arrow_C;
 558:src/menu.c    ****       break;
 559:src/menu.c    ****     case (M_Prob):
 560:src/menu.c    ****       i = M_Prob_C;
 561:src/menu.c    ****       break;
 562:src/menu.c    ****     case (M_Blank2):
 563:src/menu.c    ****       i = M_Blank2_C;
 564:src/menu.c    ****       break;
 565:src/menu.c    ****     case (M_Misc):
 566:src/menu.c    ****       i = M_Misc_C;
 567:src/menu.c    ****       break;
 568:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 569:src/menu.c    ****     case (M_Flags):// so don't display them.
 570:src/menu.c    ****     case (M_Stats):
 571:src/menu.c    ****     case (M_Setup2):
 572:src/menu.c    ****     case (M_Solve):
 573:src/menu.c    ****     case (M_Program):
 574:src/menu.c    ****       i = M_C_Lock;
 575:src/menu.c    ****     default:;
 1265              		.loc 1 575 13 is_stmt 1 view .LVU359
 576:src/menu.c    ****     }
 577:src/menu.c    ****   if (current_menu == M_User) {
 1266              		.loc 1 577 3 view .LVU360
 1267              		.loc 1 577 6 is_stmt 0 view .LVU361
 1268 001a 6329     		cmp	r1, #99
 1269 001c 32D0     		beq	.L146
 1270              	.LVL86:
 1271              	.L137:
 578:src/menu.c    ****     return UserMenu;
 579:src/menu.c    ****   }
 580:src/menu.c    ****   else {
 581:src/menu.c    ****     return Menus[i];
 1272              		.loc 1 581 5 is_stmt 1 view .LVU362
 1273              		.loc 1 581 17 is_stmt 0 view .LVU363
 1274 001e 2448     		ldr	r0, .L147+8
 1275 0020 D022     		movs	r2, #208
 1276 0022 02FB0101 		mla	r1, r2, r1, r0
 1277              	.LVL87:
 1278              		.loc 1 581 17 view .LVU364
 1279 0026 1846     		mov	r0, r3
 1280 0028 FFF7FEFF 		bl	memcpy
 1281              	.LVL88:
 1282              		.loc 1 581 17 view .LVU365
 1283 002c 0346     		mov	r3, r0
 582:src/menu.c    ****   }
 583:src/menu.c    **** }
 1284              		.loc 1 583 1 view .LVU366
 1285 002e 1846     		mov	r0, r3
 1286 0030 08BD     		pop	{r3, pc}
 1287              	.LVL89:
 1288              	.L145:
 549:src/menu.c    ****     case (M_Clear):
 1289              		.loc 1 549 5 is_stmt 1 view .LVU367
ARM GAS  /tmp/ccgLZIWS.s 			page 39


 1290 0032 4A1E     		subs	r2, r1, #1
 1291 0034 0E2A     		cmp	r2, #14
 1292 0036 F0D8     		bhi	.L132
 1293 0038 01A0     		adr	r0, .L134
 1294 003a 50F822F0 		ldr	pc, [r0, r2, lsl #2]
 1295              	.LVL90:
 1296 003e 00BF     		.p2align 2
 1297              	.L134:
 1298 0040 A5000000 		.word	.L140+1
 1299 0044 1B000000 		.word	.L132+1
 1300 0048 A1000000 		.word	.L135+1
 1301 004c 1B000000 		.word	.L132+1
 1302 0050 9D000000 		.word	.L139+1
 1303 0054 81000000 		.word	.L138+1
 1304 0058 A1000000 		.word	.L135+1
 1305 005c 1B000000 		.word	.L132+1
 1306 0060 7D000000 		.word	.L143+1
 1307 0064 A1000000 		.word	.L135+1
 1308 0068 99000000 		.word	.L136+1
 1309 006c A1000000 		.word	.L135+1
 1310 0070 A1000000 		.word	.L135+1
 1311 0074 A1000000 		.word	.L135+1
 1312 0078 95000000 		.word	.L133+1
 1313              		.p2align 1
 1314              	.L143:
 557:src/menu.c    ****       break;
 1315              		.loc 1 557 9 is_stmt 0 view .LVU368
 1316 007c 1421     		movs	r1, #20
 1317              	.LVL91:
 557:src/menu.c    ****       break;
 1318              		.loc 1 557 9 view .LVU369
 1319 007e CEE7     		b	.L137
 1320              	.LVL92:
 1321              	.L138:
 548:src/menu.c    ****     switch (current_menu) {
 1322              		.loc 1 548 6 view .LVU370
 1323 0080 1321     		movs	r1, #19
 1324              	.LVL93:
 548:src/menu.c    ****     switch (current_menu) {
 1325              		.loc 1 548 6 view .LVU371
 1326 0082 CCE7     		b	.L137
 1327              	.LVL94:
 1328              	.L146:
 578:src/menu.c    ****   }
 1329              		.loc 1 578 5 is_stmt 1 view .LVU372
 578:src/menu.c    ****   }
 1330              		.loc 1 578 12 is_stmt 0 view .LVU373
 1331 0084 0B49     		ldr	r1, .L147+12
 1332              	.LVL95:
 578:src/menu.c    ****   }
 1333              		.loc 1 578 12 view .LVU374
 1334 0086 D022     		movs	r2, #208
 1335 0088 1846     		mov	r0, r3
 1336 008a FFF7FEFF 		bl	memcpy
 1337              	.LVL96:
 578:src/menu.c    ****   }
 1338              		.loc 1 578 12 view .LVU375
ARM GAS  /tmp/ccgLZIWS.s 			page 40


 1339 008e 0346     		mov	r3, r0
 1340              		.loc 1 583 1 view .LVU376
 1341 0090 1846     		mov	r0, r3
 1342 0092 08BD     		pop	{r3, pc}
 1343              	.LVL97:
 1344              	.L133:
 563:src/menu.c    ****       break;
 1345              		.loc 1 563 7 is_stmt 1 view .LVU377
 564:src/menu.c    ****     case (M_Misc):
 1346              		.loc 1 564 7 view .LVU378
 563:src/menu.c    ****       break;
 1347              		.loc 1 563 9 is_stmt 0 view .LVU379
 1348 0094 1621     		movs	r1, #22
 564:src/menu.c    ****     case (M_Misc):
 1349              		.loc 1 564 7 view .LVU380
 1350 0096 C2E7     		b	.L137
 1351              	.LVL98:
 1352              	.L136:
 560:src/menu.c    ****       break;
 1353              		.loc 1 560 7 is_stmt 1 view .LVU381
 561:src/menu.c    ****     case (M_Blank2):
 1354              		.loc 1 561 7 view .LVU382
 560:src/menu.c    ****       break;
 1355              		.loc 1 560 9 is_stmt 0 view .LVU383
 1356 0098 1521     		movs	r1, #21
 561:src/menu.c    ****     case (M_Blank2):
 1357              		.loc 1 561 7 view .LVU384
 1358 009a C0E7     		b	.L137
 1359              	.LVL99:
 1360              	.L139:
 566:src/menu.c    ****       break;
 1361              		.loc 1 566 7 is_stmt 1 view .LVU385
 567:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1362              		.loc 1 567 7 view .LVU386
 566:src/menu.c    ****       break;
 1363              		.loc 1 566 9 is_stmt 0 view .LVU387
 1364 009c 1721     		movs	r1, #23
 567:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1365              		.loc 1 567 7 view .LVU388
 1366 009e BEE7     		b	.L137
 1367              	.LVL100:
 1368              	.L135:
 574:src/menu.c    ****     default:;
 1369              		.loc 1 574 7 is_stmt 1 view .LVU389
 574:src/menu.c    ****     default:;
 1370              		.loc 1 574 9 is_stmt 0 view .LVU390
 1371 00a0 1121     		movs	r1, #17
 1372 00a2 BCE7     		b	.L137
 1373              	.LVL101:
 1374              	.L140:
 551:src/menu.c    ****       break;
 1375              		.loc 1 551 9 view .LVU391
 1376 00a4 1221     		movs	r1, #18
 1377              	.LVL102:
 551:src/menu.c    ****       break;
 1378              		.loc 1 551 9 view .LVU392
 1379 00a6 BAE7     		b	.L137
ARM GAS  /tmp/ccgLZIWS.s 			page 41


 1380              	.L148:
 1381              		.align	2
 1382              	.L147:
 1383 00a8 00000000 		.word	main_ram
 1384 00ac 00000000 		.word	.LANCHOR1
 1385 00b0 00000000 		.word	Menus
 1386 00b4 00000000 		.word	.LANCHOR4
 1387              		.cfi_endproc
 1388              	.LFE15:
 1390              		.section	.text.display_menu,"ax",%progbits
 1391              		.align	1
 1392              		.p2align 2,,3
 1393              		.global	display_menu
 1394              		.syntax unified
 1395              		.thumb
 1396              		.thumb_func
 1397              		.fpu fpv4-sp-d16
 1399              	display_menu:
 1400              	.LFB16:
 584:src/menu.c    **** 
 585:src/menu.c    **** void display_menu (struct _menu Ref) {
 1401              		.loc 1 585 38 is_stmt 1 view -0
 1402              		.cfi_startproc
 1403              		@ args = 208, pretend = 16, frame = 0
 1404              		@ frame_needed = 0, uses_anonymous_args = 0
 586:src/menu.c    ****   int len = 0;
 1405              		.loc 1 586 3 view .LVU394
 1406              	.LVL103:
 587:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1407              		.loc 1 587 3 view .LVU395
 585:src/menu.c    ****   int len = 0;
 1408              		.loc 1 585 38 is_stmt 0 view .LVU396
 1409 0000 84B0     		sub	sp, sp, #16
 1410              		.cfi_def_cfa_offset 16
 1411 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1412              		.cfi_def_cfa_offset 52
 1413              		.cfi_offset 4, -52
 1414              		.cfi_offset 5, -48
 1415              		.cfi_offset 6, -44
 1416              		.cfi_offset 7, -40
 1417              		.cfi_offset 8, -36
 1418              		.cfi_offset 9, -32
 1419              		.cfi_offset 10, -28
 1420              		.cfi_offset 11, -24
 1421              		.cfi_offset 14, -20
 1422 0006 83B0     		sub	sp, sp, #12
 1423              		.cfi_def_cfa_offset 64
 1424              		.loc 1 587 3 view .LVU397
 1425 0008 0024     		movs	r4, #0
 585:src/menu.c    ****   int len = 0;
 1426              		.loc 1 585 38 view .LVU398
 1427 000a 0CAD     		add	r5, sp, #48
 1428 000c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1429              		.loc 1 587 3 view .LVU399
 1430 0010 3E4E     		ldr	r6, .L167
 1431 0012 0094     		str	r4, [sp]
 1432 0014 2046     		mov	r0, r4
ARM GAS  /tmp/ccgLZIWS.s 			page 42


 1433 0016 3423     		movs	r3, #52
 1434 0018 4FF4C872 		mov	r2, #400
 1435 001c BC21     		movs	r1, #188
 1436 001e B047     		blx	r6
 1437              	.LVL104:
 588:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1438              		.loc 1 588 3 is_stmt 1 view .LVU400
 1439 0020 3B4D     		ldr	r5, .L167+4
 1440 0022 FF23     		movs	r3, #255
 1441 0024 0093     		str	r3, [sp]
 1442 0026 4FF4C872 		mov	r2, #400
 1443 002a 0123     		movs	r3, #1
 1444 002c BC21     		movs	r1, #188
 1445 002e 2046     		mov	r0, r4
 1446 0030 B047     		blx	r6
 1447              	.LVL105:
 589:src/menu.c    ****   //Clear previous menu
 590:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1448              		.loc 1 590 3 view .LVU401
 1449              	.LBB91:
 1450              		.loc 1 590 8 view .LVU402
 1451              		.loc 1 590 21 view .LVU403
 591:src/menu.c    ****     mdots[col][0] = 0;
 1452              		.loc 1 591 19 is_stmt 0 view .LVU404
 1453 0032 2246     		mov	r2, r4
 1454 0034 05F5C871 		add	r1, r5, #400
 1455              	.LBE91:
 588:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1456              		.loc 1 588 3 view .LVU405
 1457 0038 2B46     		mov	r3, r5
 1458              	.LVL106:
 1459              	.L150:
 1460              	.LBB92:
 1461              		.loc 1 591 5 is_stmt 1 discriminator 3 view .LVU406
 1462              		.loc 1 591 19 is_stmt 0 discriminator 3 view .LVU407
 1463 003a 1A70     		strb	r2, [r3]
 592:src/menu.c    ****     mdots[col][1] = 0;
 1464              		.loc 1 592 5 is_stmt 1 discriminator 3 view .LVU408
 1465              		.loc 1 592 19 is_stmt 0 discriminator 3 view .LVU409
 1466 003c 5A70     		strb	r2, [r3, #1]
 590:src/menu.c    ****     mdots[col][0] = 0;
 1467              		.loc 1 590 32 is_stmt 1 discriminator 3 view .LVU410
 590:src/menu.c    ****     mdots[col][0] = 0;
 1468              		.loc 1 590 21 discriminator 3 view .LVU411
 1469 003e 0233     		adds	r3, r3, #2
 590:src/menu.c    ****     mdots[col][0] = 0;
 1470              		.loc 1 590 3 is_stmt 0 discriminator 3 view .LVU412
 1471 0040 9942     		cmp	r1, r3
 1472 0042 FAD1     		bne	.L150
 1473 0044 14AE     		add	r6, sp, #80
 590:src/menu.c    ****     mdots[col][0] = 0;
 1474              		.loc 1 590 3 view .LVU413
 1475 0046 0024     		movs	r4, #0
 1476              	.LVL107:
 1477              	.L151:
 590:src/menu.c    ****     mdots[col][0] = 0;
 1478              		.loc 1 590 3 view .LVU414
ARM GAS  /tmp/ccgLZIWS.s 			page 43


 1479              	.LBE92:
 1480              	.LBB93:
 593:src/menu.c    ****   }
 594:src/menu.c    **** 
 595:src/menu.c    ****   // Draw menu items
 596:src/menu.c    ****   // 
 597:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 598:src/menu.c    ****     /*
 599:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 600:src/menu.c    ****     */
 601:src/menu.c    ****     // Label is Ref.keys[item].unshifted_label
 602:src/menu.c    ****     // Unshifted first
 603:src/menu.c    ****       len = pixel_length (Ref.keys[item].unshifted_label, 0); // 0 means not small font
 1481              		.loc 1 603 7 is_stmt 1 view .LVU415
 1482              		.loc 1 603 13 is_stmt 0 view .LVU416
 1483 0048 0021     		movs	r1, #0
 1484 004a 3046     		mov	r0, r6
 1485 004c FFF7FEFF 		bl	pixel_length
 1486              	.LVL108:
 604:src/menu.c    ****       set_menu_label ( Ref.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1487              		.loc 1 604 7 is_stmt 1 view .LVU417
 1488              		.loc 1 604 73 is_stmt 0 view .LVU418
 1489 0050 C0F12000 		rsb	r0, r0, #32
 1490              	.LVL109:
 1491              		.loc 1 604 79 view .LVU419
 1492 0054 00EBD070 		add	r0, r0, r0, lsr #31
 1493              		.loc 1 604 7 view .LVU420
 1494 0058 04EB6001 		add	r1, r4, r0, asr #1
 1495 005c 0022     		movs	r2, #0
 1496 005e 3046     		mov	r0, r6
 1497 0060 06F10807 		add	r7, r6, #8
 1498 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1499              	.LVL110:
 605:src/menu.c    ****       // Now shifted ...	
 606:src/menu.c    ****       len = pixel_length (Ref.keys[item].shifted_label, 0); // 0 means not small font
 1500              		.loc 1 606 7 is_stmt 1 view .LVU421
 1501              		.loc 1 606 13 is_stmt 0 view .LVU422
 1502 0068 0021     		movs	r1, #0
 1503 006a 3846     		mov	r0, r7
 1504 006c FFF7FEFF 		bl	pixel_length
 1505              	.LVL111:
 607:src/menu.c    ****       len = item*32 + (32-len)/2;
 1506              		.loc 1 607 7 is_stmt 1 view .LVU423
 1507              		.loc 1 607 26 is_stmt 0 view .LVU424
 1508 0070 C0F12000 		rsb	r0, r0, #32
 1509              	.LVL112:
 1510              		.loc 1 607 31 view .LVU425
 1511 0074 00EBD070 		add	r0, r0, r0, lsr #31
 1512              	.LVL113:
 608:src/menu.c    ****       if (len<0) len = 0;
 1513              		.loc 1 608 7 is_stmt 1 view .LVU426
 607:src/menu.c    ****       len = item*32 + (32-len)/2;
 1514              		.loc 1 607 11 is_stmt 0 view .LVU427
 1515 0078 04EB6001 		add	r1, r4, r0, asr #1
 1516              	.LVL114:
 607:src/menu.c    ****       len = item*32 + (32-len)/2;
 1517              		.loc 1 607 11 view .LVU428
ARM GAS  /tmp/ccgLZIWS.s 			page 44


 1518 007c C729     		cmp	r1, #199
 1519 007e A8BF     		it	ge
 1520 0080 C721     		movge	r1, #199
 1521              	.LVL115:
 609:src/menu.c    ****       if (len>199) len = 199;
 610:src/menu.c    ****       set_menu_label ( Ref.keys[item].shifted_label, 0, len, 1 );
 1522              		.loc 1 610 7 is_stmt 1 view .LVU429
 1523 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1524              	.LVL116:
 1525              		.loc 1 610 7 is_stmt 0 view .LVU430
 1526 0086 3846     		mov	r0, r7
 1527 0088 2034     		adds	r4, r4, #32
 1528 008a 0122     		movs	r2, #1
 1529 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1530              	.LVL117:
 597:src/menu.c    ****     /*
 1531              		.loc 1 597 32 is_stmt 1 view .LVU431
 597:src/menu.c    ****     /*
 1532              		.loc 1 597 22 view .LVU432
 597:src/menu.c    ****     /*
 1533              		.loc 1 597 3 is_stmt 0 view .LVU433
 1534 0090 C02C     		cmp	r4, #192
 1535 0092 06F12006 		add	r6, r6, #32
 1536 0096 D7D1     		bne	.L151
 1537 0098 1E4E     		ldr	r6, .L167+8
 1538              	.LBE93:
 1539              	.LBB94:
 1540              	.LBB95:
 611:src/menu.c    ****   }
 612:src/menu.c    **** 
 613:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 614:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 615:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 616:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 617:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1541              		.loc 1 617 2 view .LVU434
 1542 009a DFF87090 		ldr	r9, .L167
 1543 009e C5F1040A 		rsb	r10, r5, #4
 1544 00a2 06F5C47B 		add	fp, r6, #392
 1545              	.LBE95:
 1546              	.LBE94:
 1547              	.LBB97:
 597:src/menu.c    ****     /*
 1548              		.loc 1 597 3 view .LVU435
 1549 00a6 771E     		subs	r7, r6, #1
 1550              	.LBE97:
 1551              	.LBB98:
 1552              	.LBB96:
 1553              		.loc 1 617 2 view .LVU436
 1554 00a8 4FF0FF08 		mov	r8, #255
 1555              	.L152:
 1556              	.LVL118:
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1557              		.loc 1 614 23 is_stmt 1 view .LVU437
 1558 00ac 0AEB0705 		add	r5, r10, r7
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1559              		.loc 1 614 14 is_stmt 0 view .LVU438
ARM GAS  /tmp/ccgLZIWS.s 			page 45


 1560 00b0 0024     		movs	r4, #0
 1561              	.LVL119:
 1562              	.L155:
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1563              		.loc 1 615 7 is_stmt 1 view .LVU439
 1564              		.loc 1 617 2 view .LVU440
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1565              		.loc 1 615 22 is_stmt 0 view .LVU441
 1566 00b2 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1567              		.loc 1 615 40 view .LVU442
 1568 00b6 2241     		asrs	r2, r2, r4
 1569              		.loc 1 617 2 view .LVU443
 1570 00b8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1571 00bc 0323     		movs	r3, #3
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1572              		.loc 1 615 10 view .LVU444
 1573 00be 12F0010F 		tst	r2, #1
 1574              		.loc 1 617 2 view .LVU445
 1575 00c2 01F1E901 		add	r1, r1, #233
 1576 00c6 1A46     		mov	r2, r3
 1577 00c8 2846     		mov	r0, r5
 615:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1578              		.loc 1 615 10 view .LVU446
 1579 00ca 02D0     		beq	.L153
 1580              		.loc 1 617 2 view .LVU447
 1581 00cc CDF80080 		str	r8, [sp]
 1582 00d0 C847     		blx	r9
 1583              	.LVL120:
 1584              	.L153:
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1585              		.loc 1 618 7 is_stmt 1 view .LVU448
 619:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 620:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1586              		.loc 1 620 2 view .LVU449
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1587              		.loc 1 618 22 is_stmt 0 view .LVU450
 1588 00d2 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1589              		.loc 1 618 40 view .LVU451
 1590 00d4 2241     		asrs	r2, r2, r4
 1591              		.loc 1 620 2 view .LVU452
 1592 00d6 A4EB8401 		sub	r1, r4, r4, lsl #2
 1593 00da 0323     		movs	r3, #3
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1594              		.loc 1 618 10 view .LVU453
 1595 00dc 12F0010F 		tst	r2, #1
 1596              		.loc 1 620 2 view .LVU454
 1597 00e0 01F1D001 		add	r1, r1, #208
 1598 00e4 1A46     		mov	r2, r3
 1599 00e6 04F10104 		add	r4, r4, #1
 1600              	.LVL121:
 1601              		.loc 1 620 2 view .LVU455
 1602 00ea 2846     		mov	r0, r5
 618:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1603              		.loc 1 618 10 view .LVU456
 1604 00ec 02D0     		beq	.L154
ARM GAS  /tmp/ccgLZIWS.s 			page 46


 1605              		.loc 1 620 2 view .LVU457
 1606 00ee CDF80080 		str	r8, [sp]
 1607 00f2 C847     		blx	r9
 1608              	.LVL122:
 1609              	.L154:
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1610              		.loc 1 614 32 is_stmt 1 discriminator 2 view .LVU458
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1611              		.loc 1 614 23 discriminator 2 view .LVU459
 614:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1612              		.loc 1 614 5 is_stmt 0 discriminator 2 view .LVU460
 1613 00f4 062C     		cmp	r4, #6
 1614 00f6 DCD1     		bne	.L155
 1615              	.LBE96:
 613:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1616              		.loc 1 613 32 is_stmt 1 discriminator 2 view .LVU461
 613:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1617              		.loc 1 613 21 discriminator 2 view .LVU462
 1618 00f8 0236     		adds	r6, r6, #2
 613:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1619              		.loc 1 613 3 is_stmt 0 discriminator 2 view .LVU463
 1620 00fa B345     		cmp	fp, r6
 1621 00fc 07F10207 		add	r7, r7, #2
 1622 0100 D4D1     		bne	.L152
 1623              	.LBE98:
 621:src/menu.c    ****     }
 622:src/menu.c    ****   }
 623:src/menu.c    **** }
 1624              		.loc 1 623 1 view .LVU464
 1625 0102 03B0     		add	sp, sp, #12
 1626              		.cfi_def_cfa_offset 52
 1627              		@ sp needed
 1628 0104 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1629              		.cfi_restore 14
 1630              		.cfi_restore 11
 1631              		.cfi_restore 10
 1632              		.cfi_restore 9
 1633              		.cfi_restore 8
 1634              		.cfi_restore 7
 1635              		.cfi_restore 6
 1636              		.cfi_restore 5
 1637              		.cfi_restore 4
 1638              		.cfi_def_cfa_offset 16
 1639              	.LVL123:
 1640              		.loc 1 623 1 view .LVU465
 1641 0108 04B0     		add	sp, sp, #16
 1642              		.cfi_def_cfa_offset 0
 1643 010a 7047     		bx	lr
 1644              	.L168:
 1645              		.align	2
 1646              	.L167:
 1647 010c 3D020008 		.word	134218301
 1648 0110 00000000 		.word	.LANCHOR0
 1649 0114 01000000 		.word	.LANCHOR0+1
 1650              		.cfi_endproc
 1651              	.LFE16:
 1653              		.section	.text.display_current_menu,"ax",%progbits
ARM GAS  /tmp/ccgLZIWS.s 			page 47


 1654              		.align	1
 1655              		.p2align 2,,3
 1656              		.global	display_current_menu
 1657              		.syntax unified
 1658              		.thumb
 1659              		.thumb_func
 1660              		.fpu fpv4-sp-d16
 1662              	display_current_menu:
 1663              	.LFB11:
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1664              		.loc 1 148 30 is_stmt 1 view -0
 1665              		.cfi_startproc
 1666              		@ args = 0, pretend = 0, frame = 208
 1667              		@ frame_needed = 0, uses_anonymous_args = 0
 149:src/menu.c    **** }
 1668              		.loc 1 149 3 view .LVU467
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1669              		.loc 1 148 30 is_stmt 0 view .LVU468
 1670 0000 10B5     		push	{r4, lr}
 1671              		.cfi_def_cfa_offset 8
 1672              		.cfi_offset 4, -8
 1673              		.cfi_offset 14, -4
 1674 0002 E4B0     		sub	sp, sp, #400
 1675              		.cfi_def_cfa_offset 408
 149:src/menu.c    **** }
 1676              		.loc 1 149 3 view .LVU469
 1677 0004 30AC     		add	r4, sp, #192
 1678 0006 2046     		mov	r0, r4
 1679 0008 FFF7FEFF 		bl	get_current_menu_ref
 1680              	.LVL124:
 1681 000c 34A9     		add	r1, sp, #208
 1682 000e C022     		movs	r2, #192
 1683 0010 6846     		mov	r0, sp
 1684 0012 FFF7FEFF 		bl	memcpy
 1685              	.LVL125:
 1686 0016 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1687 001a FFF7FEFF 		bl	display_menu
 1688              	.LVL126:
 150:src/menu.c    **** 
 1689              		.loc 1 150 1 view .LVU470
 1690 001e 64B0     		add	sp, sp, #400
 1691              		.cfi_def_cfa_offset 8
 1692              		@ sp needed
 1693 0020 10BD     		pop	{r4, pc}
 1694              		.cfi_endproc
 1695              	.LFE11:
 1697 0022 00BF     		.section	.text.all_menu_dots,"ax",%progbits
 1698              		.align	1
 1699              		.p2align 2,,3
 1700              		.global	all_menu_dots
 1701              		.syntax unified
 1702              		.thumb
 1703              		.thumb_func
 1704              		.fpu fpv4-sp-d16
 1706              	all_menu_dots:
 1707              	.LFB17:
 624:src/menu.c    **** 
ARM GAS  /tmp/ccgLZIWS.s 			page 48


 625:src/menu.c    **** void all_menu_dots () {
 1708              		.loc 1 625 23 is_stmt 1 view -0
 1709              		.cfi_startproc
 1710              		@ args = 0, pretend = 0, frame = 0
 1711              		@ frame_needed = 0, uses_anonymous_args = 0
 626:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1712              		.loc 1 626 3 view .LVU472
 1713              	.LBB99:
 1714              		.loc 1 626 8 view .LVU473
 1715              	.LVL127:
 1716              		.loc 1 626 21 view .LVU474
 1717              	.LBE99:
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1718              		.loc 1 625 23 is_stmt 0 view .LVU475
 1719 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1720              		.cfi_def_cfa_offset 20
 1721              		.cfi_offset 4, -20
 1722              		.cfi_offset 5, -16
 1723              		.cfi_offset 6, -12
 1724              		.cfi_offset 7, -8
 1725              		.cfi_offset 14, -4
 1726              	.LBB103:
 1727              	.LBB100:
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 628:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1728              		.loc 1 628 2 view .LVU476
 1729 0002 0D4E     		ldr	r6, .L177
 1730              	.LBE100:
 1731              	.LBE103:
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1732              		.loc 1 625 23 view .LVU477
 1733 0004 83B0     		sub	sp, sp, #12
 1734              		.cfi_def_cfa_offset 32
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1735              		.loc 1 625 23 view .LVU478
 1736 0006 0025     		movs	r5, #0
 1737              	.LBB104:
 1738              	.LBB101:
 1739              		.loc 1 628 2 view .LVU479
 1740 0008 FF27     		movs	r7, #255
 1741              	.LVL128:
 1742              	.L172:
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1743              		.loc 1 627 23 is_stmt 1 view .LVU480
 1744              	.LBE101:
 1745              	.LBE104:
 625:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1746              		.loc 1 625 23 is_stmt 0 view .LVU481
 1747 000a E924     		movs	r4, #233
 1748              	.LVL129:
 1749              	.L173:
 1750              	.LBB105:
 1751              	.LBB102:
 1752              		.loc 1 628 2 is_stmt 1 discriminator 3 view .LVU482
 1753 000c 0323     		movs	r3, #3
 1754 000e 1A46     		mov	r2, r3
 1755 0010 2146     		mov	r1, r4
ARM GAS  /tmp/ccgLZIWS.s 			page 49


 1756 0012 2846     		mov	r0, r5
 1757 0014 0097     		str	r7, [sp]
 1758 0016 B047     		blx	r6
 1759              	.LVL130:
 629:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1760              		.loc 1 629 2 discriminator 3 view .LVU483
 1761 0018 0323     		movs	r3, #3
 1762 001a A4F11901 		sub	r1, r4, #25
 1763 001e 0097     		str	r7, [sp]
 1764 0020 1A46     		mov	r2, r3
 1765 0022 2846     		mov	r0, r5
 1766 0024 033C     		subs	r4, r4, #3
 1767 0026 B047     		blx	r6
 1768              	.LVL131:
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1769              		.loc 1 627 32 discriminator 3 view .LVU484
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1770              		.loc 1 627 23 discriminator 3 view .LVU485
 627:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1771              		.loc 1 627 5 is_stmt 0 discriminator 3 view .LVU486
 1772 0028 D72C     		cmp	r4, #215
 1773 002a EFD1     		bne	.L173
 1774              	.LBE102:
 626:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1775              		.loc 1 626 32 is_stmt 1 discriminator 2 view .LVU487
 626:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1776              		.loc 1 626 21 discriminator 2 view .LVU488
 1777 002c 0235     		adds	r5, r5, #2
 626:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1778              		.loc 1 626 3 is_stmt 0 discriminator 2 view .LVU489
 1779 002e B5F5C87F 		cmp	r5, #400
 1780 0032 EAD1     		bne	.L172
 1781              	.LBE105:
 630:src/menu.c    ****     }
 631:src/menu.c    ****   }
 632:src/menu.c    **** }  
 1782              		.loc 1 632 1 view .LVU490
 1783 0034 03B0     		add	sp, sp, #12
 1784              		.cfi_def_cfa_offset 20
 1785              		@ sp needed
 1786 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1787              	.L178:
 1788              		.align	2
 1789              	.L177:
 1790 0038 3D020008 		.word	134218301
 1791              		.cfi_endproc
 1792              	.LFE17:
 1794              		.section	.text.build_user_menu,"ax",%progbits
 1795              		.align	1
 1796              		.p2align 2,,3
 1797              		.global	build_user_menu
 1798              		.syntax unified
 1799              		.thumb
 1800              		.thumb_func
 1801              		.fpu fpv4-sp-d16
 1803              	build_user_menu:
 1804              	.LFB18:
ARM GAS  /tmp/ccgLZIWS.s 			page 50


 633:src/menu.c    **** 
 634:src/menu.c    **** void build_user_menu(void)
 635:src/menu.c    **** {
 1805              		.loc 1 635 1 is_stmt 1 view -0
 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 16
 1808              		@ frame_needed = 0, uses_anonymous_args = 0
 636:src/menu.c    ****   // find the label 'MNU'
 637:src/menu.c    ****   const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 1809              		.loc 1 637 3 view .LVU492
 1810              	.LVL132:
 638:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 1811              		.loc 1 638 3 view .LVU493
 635:src/menu.c    ****   // find the label 'MNU'
 1812              		.loc 1 635 1 is_stmt 0 view .LVU494
 1813 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1814              		.cfi_def_cfa_offset 36
 1815              		.cfi_offset 4, -36
 1816              		.cfi_offset 5, -32
 1817              		.cfi_offset 6, -28
 1818              		.cfi_offset 7, -24
 1819              		.cfi_offset 8, -20
 1820              		.cfi_offset 9, -16
 1821              		.cfi_offset 10, -12
 1822              		.cfi_offset 11, -8
 1823              		.cfi_offset 14, -4
 1824              		.loc 1 638 21 view .LVU495
 1825 0004 0021     		movs	r1, #0
 1826 0006 4748     		ldr	r0, .L218
 1827 0008 DFF82881 		ldr	r8, .L218+16
 635:src/menu.c    ****   // find the label 'MNU'
 1828              		.loc 1 635 1 view .LVU496
 1829 000c 85B0     		sub	sp, sp, #20
 1830              		.cfi_def_cfa_offset 56
 1831              		.loc 1 638 21 view .LVU497
 1832 000e FFF7FEFF 		bl	findmultilbl
 1833              	.LVL133:
 1834 0012 4346     		mov	r3, r8
 1835 0014 0446     		mov	r4, r0
 1836              	.LVL134:
 639:src/menu.c    ****   int i=0;
 1837              		.loc 1 639 3 is_stmt 1 view .LVU498
 640:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 1838              		.loc 1 640 3 view .LVU499
 1839              	.LBB106:
 1840              		.loc 1 640 8 view .LVU500
 1841              		.loc 1 640 19 view .LVU501
 641:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1842              		.loc 1 641 43 is_stmt 0 view .LVU502
 1843 0016 0022     		movs	r2, #0
 1844 0018 08F1C000 		add	r0, r8, #192
 1845              	.LVL135:
 642:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 643:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1846              		.loc 1 643 42 view .LVU503
 1847 001c 2E21     		movs	r1, #46
 1848              	.LVL136:
ARM GAS  /tmp/ccgLZIWS.s 			page 51


 1849              	.L180:
 641:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1850              		.loc 1 641 7 is_stmt 1 discriminator 3 view .LVU504
 641:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1851              		.loc 1 641 43 is_stmt 0 discriminator 3 view .LVU505
 1852 001e 83F82020 		strb	r2, [r3, #32]
 642:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1853              		.loc 1 642 7 is_stmt 1 discriminator 3 view .LVU506
 642:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1854              		.loc 1 642 40 is_stmt 0 discriminator 3 view .LVU507
 1855 0022 5A61     		str	r2, [r3, #20]
 1856              		.loc 1 643 7 is_stmt 1 discriminator 3 view .LVU508
 1857              		.loc 1 643 42 is_stmt 0 discriminator 3 view .LVU509
 1858 0024 1974     		strb	r1, [r3, #16]
 644:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1859              		.loc 1 644 7 is_stmt 1 discriminator 3 view .LVU510
 1860              		.loc 1 644 41 is_stmt 0 discriminator 3 view .LVU511
 1861 0026 83F82820 		strb	r2, [r3, #40]
 645:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1862              		.loc 1 645 7 is_stmt 1 discriminator 3 view .LVU512
 1863              		.loc 1 645 38 is_stmt 0 discriminator 3 view .LVU513
 1864 002a DA61     		str	r2, [r3, #28]
 646:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1865              		.loc 1 646 7 is_stmt 1 discriminator 3 view .LVU514
 1866              		.loc 1 646 40 is_stmt 0 discriminator 3 view .LVU515
 1867 002c 1976     		strb	r1, [r3, #24]
 640:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1868              		.loc 1 640 24 is_stmt 1 discriminator 3 view .LVU516
 640:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1869              		.loc 1 640 19 discriminator 3 view .LVU517
 1870 002e 2033     		adds	r3, r3, #32
 640:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1871              		.loc 1 640 3 is_stmt 0 discriminator 3 view .LVU518
 1872 0030 8342     		cmp	r3, r0
 1873 0032 F4D1     		bne	.L180
 640:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1874              		.loc 1 640 3 discriminator 3 view .LVU519
 1875              	.LBE106:
 647:src/menu.c    ****   }
 648:src/menu.c    ****   while (pc && i < 12) {
 1876              		.loc 1 648 9 is_stmt 1 view .LVU520
 1877 0034 002C     		cmp	r4, #0
 1878 0036 3FD0     		beq	.L179
 1879 0038 3B4D     		ldr	r5, .L218+4
 1880              	.LBB107:
 649:src/menu.c    ****     s_opcode op;
 650:src/menu.c    ****     char buf1[16];
 651:src/menu.c    **** 
 652:src/menu.c    ****     pc = do_inc(pc, 0);
 653:src/menu.c    ****     op = (s_opcode) getprog(pc);
 654:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 655:src/menu.c    ****       break;
 656:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 657:src/menu.c    ****       if (i==4) {
 658:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 659:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 660:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
ARM GAS  /tmp/ccgLZIWS.s 			page 52


 1881              		.loc 1 660 2 is_stmt 0 view .LVU521
 1882 003a DFF8FC90 		ldr	r9, .L218+20
 661:src/menu.c    ****       }
 662:src/menu.c    ****       else if (i==5) {
 663:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 664:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 665:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1883              		.loc 1 665 2 view .LVU522
 1884 003e 05F1A00A 		add	r10, r5, #160
 1885              	.LBE107:
 648:src/menu.c    ****     s_opcode op;
 1886              		.loc 1 648 9 view .LVU523
 1887 0042 0026     		movs	r6, #0
 1888              	.LVL137:
 1889              	.L193:
 1890              	.LBB110:
 649:src/menu.c    ****     s_opcode op;
 1891              		.loc 1 649 5 is_stmt 1 view .LVU524
 650:src/menu.c    **** 
 1892              		.loc 1 650 5 view .LVU525
 652:src/menu.c    ****     op = (s_opcode) getprog(pc);
 1893              		.loc 1 652 5 view .LVU526
 652:src/menu.c    ****     op = (s_opcode) getprog(pc);
 1894              		.loc 1 652 10 is_stmt 0 view .LVU527
 1895 0044 2046     		mov	r0, r4
 1896 0046 0021     		movs	r1, #0
 1897 0048 FFF7FEFF 		bl	do_inc
 1898              	.LVL138:
 1899 004c 0446     		mov	r4, r0
 1900              	.LVL139:
 653:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1901              		.loc 1 653 5 is_stmt 1 view .LVU528
 653:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1902              		.loc 1 653 21 is_stmt 0 view .LVU529
 1903 004e FFF7FEFF 		bl	getprog
 1904              	.LVL140:
 653:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 1905              		.loc 1 653 8 view .LVU530
 1906 0052 1FFA80FB 		uxth	fp, r0
 1907              	.LVL141:
 654:src/menu.c    ****       break;
 1908              		.loc 1 654 5 is_stmt 1 view .LVU531
 654:src/menu.c    ****       break;
 1909              		.loc 1 654 8 is_stmt 0 view .LVU532
 1910 0056 BBF59D7F 		cmp	fp, #314
 1911 005a 2DD0     		beq	.L179
 656:src/menu.c    ****       if (i==4) {
 1912              		.loc 1 656 5 is_stmt 1 view .LVU533
 656:src/menu.c    ****       if (i==4) {
 1913              		.loc 1 656 8 is_stmt 0 view .LVU534
 1914 005c BBF5807F 		cmp	fp, #256
 1915 0060 3AD0     		beq	.L215
 666:src/menu.c    ****       }
 667:src/menu.c    ****       i += 1;
 668:src/menu.c    ****       continue;
 669:src/menu.c    ****     }
 670:src/menu.c    ****     if (isDBL(op)) {
ARM GAS  /tmp/ccgLZIWS.s 			page 53


 1916              		.loc 1 670 5 is_stmt 1 view .LVU535
 1917 0062 81B2     		uxth	r1, r0
 1918              		.loc 1 670 9 is_stmt 0 view .LVU536
 1919 0064 00F47040 		and	r0, r0, #61440
 1920              		.loc 1 670 8 view .LVU537
 1921 0068 B0F5704F 		cmp	r0, #61440
 1922              		.loc 1 670 9 view .LVU538
 1923 006c 0F46     		mov	r7, r1
 1924              		.loc 1 670 8 view .LVU539
 1925 006e 1DD0     		beq	.L191
 671:src/menu.c    ****       i += 1;
 672:src/menu.c    ****       continue;
 673:src/menu.c    ****     }
 674:src/menu.c    ****     if (isRARG(op)) {
 1926              		.loc 1 674 5 is_stmt 1 view .LVU540
 1927              		.loc 1 674 8 is_stmt 0 view .LVU541
 1928 0070 48B1     		cbz	r0, .L188
 1929              	.LBB108:
 675:src/menu.c    ****       const s_opcode rarg = RARG_CMD(op);
 1930              		.loc 1 675 7 is_stmt 1 view .LVU542
 1931              		.loc 1 675 29 is_stmt 0 view .LVU543
 1932 0072 4FEA1B22 		lsr	r2, fp, #8
 1933 0076 203A     		subs	r2, r2, #32
 1934 0078 D2B2     		uxtb	r2, r2
 1935              	.LVL142:
 676:src/menu.c    ****       if (rarg != RARG_ALPHA && rarg != RARG_CONV
 1936              		.loc 1 676 7 is_stmt 1 view .LVU544
 1937              		.loc 1 676 10 is_stmt 0 view .LVU545
 1938 007a 242A     		cmp	r2, #36
 1939 007c 03D0     		beq	.L188
 1940              		.loc 1 676 30 discriminator 1 view .LVU546
 1941 007e 6C2A     		cmp	r2, #108
 1942 0080 01D0     		beq	.L188
 677:src/menu.c    **** 	  && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX)
 1943              		.loc 1 677 4 view .LVU547
 1944 0082 012A     		cmp	r2, #1
 1945 0084 3AD8     		bhi	.L216
 1946              	.LVL143:
 1947              	.L188:
 1948              		.loc 1 677 4 view .LVU548
 1949              	.LBE108:
 678:src/menu.c    **** 	op = op & 0xff00;	// remove argument
 679:src/menu.c    ****     }
 680:src/menu.c    ****     catcmd(op, buf1);
 1950              		.loc 1 680 5 is_stmt 1 view .LVU549
 1951 0086 0846     		mov	r0, r1
 1952 0088 6946     		mov	r1, sp
 1953 008a FFF7FEFF 		bl	catcmd
 1954              	.LVL144:
 681:src/menu.c    **** #pragma GCC diagnostic push
 682:src/menu.c    **** #pragma GCC diagnostic ignored "-Wstringop-truncation"
 683:src/menu.c    ****     if (i<6) {
 1955              		.loc 1 683 5 view .LVU550
 1956              		.loc 1 683 8 is_stmt 0 view .LVU551
 1957 008e 052E     		cmp	r6, #5
 684:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1958              		.loc 1 684 7 view .LVU552
ARM GAS  /tmp/ccgLZIWS.s 			page 54


 1959 0090 6946     		mov	r1, sp
 1960 0092 4FF00702 		mov	r2, #7
 683:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1961              		.loc 1 683 8 view .LVU553
 1962 0096 12D8     		bhi	.L189
 1963              		.loc 1 684 7 is_stmt 1 view .LVU554
 1964 0098 2846     		mov	r0, r5
 1965 009a FFF7FEFF 		bl	strncpy
 1966              	.LVL145:
 685:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1967              		.loc 1 685 7 view .LVU555
 1968              		.loc 1 685 42 is_stmt 0 view .LVU556
 1969 009e 0021     		movs	r1, #0
 686:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = op;
 687:src/menu.c    ****       UserMenu.keys[i].unshifted.key_34s = K_OP;
 1970              		.loc 1 687 42 view .LVU557
 1971 00a0 3422     		movs	r2, #52
 686:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = op;
 1972              		.loc 1 686 40 view .LVU558
 1973 00a2 45F80CBC 		str	fp, [r5, #-12]
 685:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1974              		.loc 1 685 42 view .LVU559
 1975 00a6 E971     		strb	r1, [r5, #7]
 686:src/menu.c    ****       UserMenu.keys[i].unshifted.shift = op;
 1976              		.loc 1 686 7 is_stmt 1 view .LVU560
 1977              		.loc 1 687 7 view .LVU561
 1978              		.loc 1 687 42 is_stmt 0 view .LVU562
 1979 00a8 05F8102C 		strb	r2, [r5, #-16]
 1980              	.LVL146:
 1981              	.L191:
 1982              		.loc 1 687 42 view .LVU563
 1983              	.LBE110:
 648:src/menu.c    ****     s_opcode op;
 1984              		.loc 1 648 9 is_stmt 1 view .LVU564
 1985 00ac 24B1     		cbz	r4, .L179
 1986 00ae 0136     		adds	r6, r6, #1
 648:src/menu.c    ****     s_opcode op;
 1987              		.loc 1 648 13 is_stmt 0 discriminator 1 view .LVU565
 1988 00b0 0C2E     		cmp	r6, #12
 1989 00b2 05F12005 		add	r5, r5, #32
 1990 00b6 C5D1     		bne	.L193
 1991              	.LVL147:
 1992              	.L179:
 688:src/menu.c    ****     }
 689:src/menu.c    ****     else {
 690:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 691:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 692:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 693:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 694:src/menu.c    ****     }
 695:src/menu.c    **** #pragma GCC diagnostic pop
 696:src/menu.c    ****     i++;
 697:src/menu.c    ****   }
 698:src/menu.c    **** }
 1993              		.loc 1 698 1 view .LVU566
 1994 00b8 05B0     		add	sp, sp, #20
 1995              		.cfi_remember_state
ARM GAS  /tmp/ccgLZIWS.s 			page 55


 1996              		.cfi_def_cfa_offset 36
 1997              		@ sp needed
 1998 00ba BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1999              	.LVL148:
 2000              	.L189:
 2001              		.cfi_restore_state
 2002              	.LBB111:
 690:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 2003              		.loc 1 690 7 is_stmt 1 view .LVU567
 2004 00be A5F1B800 		sub	r0, r5, #184
 2005 00c2 FFF7FEFF 		bl	strncpy
 2006              	.LVL149:
 691:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 2007              		.loc 1 691 7 view .LVU568
 691:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 2008              		.loc 1 691 42 is_stmt 0 view .LVU569
 2009 00c6 0022     		movs	r2, #0
 693:src/menu.c    ****     }
 2010              		.loc 1 693 42 view .LVU570
 2011 00c8 3423     		movs	r3, #52
 692:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 2012              		.loc 1 692 40 view .LVU571
 2013 00ca 45F8C47C 		str	r7, [r5, #-196]
 691:src/menu.c    ****       UserMenu.keys[i-6].shifted.shift = op;
 2014              		.loc 1 691 42 view .LVU572
 2015 00ce 05F8B12C 		strb	r2, [r5, #-177]
 692:src/menu.c    ****       UserMenu.keys[i-6].shifted.key_34s = K_OP;
 2016              		.loc 1 692 7 is_stmt 1 view .LVU573
 693:src/menu.c    ****     }
 2017              		.loc 1 693 7 view .LVU574
 693:src/menu.c    ****     }
 2018              		.loc 1 693 42 is_stmt 0 view .LVU575
 2019 00d2 05F8C83C 		strb	r3, [r5, #-200]
 696:src/menu.c    ****   }
 2020              		.loc 1 696 5 is_stmt 1 view .LVU576
 2021              	.LVL150:
 696:src/menu.c    ****   }
 2022              		.loc 1 696 5 is_stmt 0 view .LVU577
 2023 00d6 E9E7     		b	.L191
 2024              	.LVL151:
 2025              	.L215:
 657:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 2026              		.loc 1 657 7 is_stmt 1 view .LVU578
 657:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 2027              		.loc 1 657 10 is_stmt 0 view .LVU579
 2028 00d8 042E     		cmp	r6, #4
 2029 00da 14D0     		beq	.L217
 662:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 2030              		.loc 1 662 12 is_stmt 1 view .LVU580
 662:src/menu.c    **** 	UserMenu.keys[i].unshifted.shift = -1;
 2031              		.loc 1 662 15 is_stmt 0 view .LVU581
 2032 00dc 052E     		cmp	r6, #5
 2033 00de E5D1     		bne	.L191
 663:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 2034              		.loc 1 663 2 is_stmt 1 view .LVU582
 665:src/menu.c    ****       }
 2035              		.loc 1 665 2 is_stmt 0 view .LVU583
ARM GAS  /tmp/ccgLZIWS.s 			page 56


 2036 00e0 1249     		ldr	r1, .L218+8
 663:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 2037              		.loc 1 663 35 view .LVU584
 2038 00e2 4FF0FF30 		mov	r0, #-1
 664:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2039              		.loc 1 664 37 view .LVU585
 2040 00e6 2D23     		movs	r3, #45
 663:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_CMPLX;
 2041              		.loc 1 663 35 view .LVU586
 2042 00e8 C8F8B400 		str	r0, [r8, #180]
 664:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2043              		.loc 1 664 2 is_stmt 1 view .LVU587
 665:src/menu.c    ****       }
 2044              		.loc 1 665 2 is_stmt 0 view .LVU588
 2045 00ec 0968     		ldr	r1, [r1]
 664:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2046              		.loc 1 664 37 view .LVU589
 2047 00ee 88F8B030 		strb	r3, [r8, #176]
 665:src/menu.c    ****       }
 2048              		.loc 1 665 2 is_stmt 1 view .LVU590
 2049 00f2 3246     		mov	r2, r6
 2050 00f4 5046     		mov	r0, r10
 2051 00f6 FFF7FEFF 		bl	strncpy
 2052              	.LVL152:
 667:src/menu.c    ****       continue;
 2053              		.loc 1 667 7 view .LVU591
 668:src/menu.c    ****     }
 2054              		.loc 1 668 7 view .LVU592
 2055 00fa D7E7     		b	.L191
 2056              	.LVL153:
 2057              	.L216:
 2058              	.LBB109:
 678:src/menu.c    ****     }
 2059              		.loc 1 678 2 view .LVU593
 678:src/menu.c    ****     }
 2060              		.loc 1 678 5 is_stmt 0 view .LVU594
 2061 00fc 0BF47F4B 		and	fp, fp, #65280
 2062              	.LVL154:
 678:src/menu.c    ****     }
 2063              		.loc 1 678 5 view .LVU595
 2064 0100 5946     		mov	r1, fp
 2065 0102 5F46     		mov	r7, fp
 2066 0104 BFE7     		b	.L188
 2067              	.LVL155:
 2068              	.L217:
 678:src/menu.c    ****     }
 2069              		.loc 1 678 5 view .LVU596
 2070              	.LBE109:
 658:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 2071              		.loc 1 658 2 is_stmt 1 view .LVU597
 658:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
 2072              		.loc 1 658 35 is_stmt 0 view .LVU598
 2073 0106 4FF0FF30 		mov	r0, #-1
 659:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2074              		.loc 1 659 37 view .LVU599
 2075 010a 2C23     		movs	r3, #44
 658:src/menu.c    **** 	UserMenu.keys[i].unshifted.key_34s = K_ARROW;
ARM GAS  /tmp/ccgLZIWS.s 			page 57


 2076              		.loc 1 658 35 view .LVU600
 2077 010c C8F89400 		str	r0, [r8, #148]
 659:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2078              		.loc 1 659 2 is_stmt 1 view .LVU601
 660:src/menu.c    ****       }
 2079              		.loc 1 660 2 is_stmt 0 view .LVU602
 2080 0110 D9F80010 		ldr	r1, [r9]
 2081 0114 0648     		ldr	r0, .L218+12
 659:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2082              		.loc 1 659 37 view .LVU603
 2083 0116 88F89030 		strb	r3, [r8, #144]
 660:src/menu.c    ****       }
 2084              		.loc 1 660 2 is_stmt 1 view .LVU604
 2085 011a 0522     		movs	r2, #5
 2086 011c FFF7FEFF 		bl	strncpy
 2087              	.LVL156:
 2088 0120 C4E7     		b	.L191
 2089              	.L219:
 2090 0122 00BF     		.align	2
 2091              	.L218:
 2092 0124 4DF04E55 		.word	1431236685
 2093 0128 20000000 		.word	.LANCHOR4+32
 2094 012c 00000000 		.word	.LANCHOR6
 2095 0130 A0000000 		.word	.LANCHOR4+160
 2096 0134 00000000 		.word	.LANCHOR4
 2097 0138 00000000 		.word	.LANCHOR5
 2098              	.LBE111:
 2099              		.cfi_endproc
 2100              	.LFE18:
 2102              		.section	.text.shutdown,"ax",%progbits
 2103              		.align	1
 2104              		.p2align 2,,3
 2105              		.global	shutdown
 2106              		.syntax unified
 2107              		.thumb
 2108              		.thumb_func
 2109              		.fpu fpv4-sp-d16
 2111              	shutdown:
 2112              	.LFB20:
 2113              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
ARM GAS  /tmp/ccgLZIWS.s 			page 58


  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #ifdef INCLUDE_STOPWATCH
  39:src/console.c **** #include "stopwatch.h"
  40:src/console.c **** #endif
  41:src/console.c **** #undef DM42SAFE
  42:src/console.c **** 
  43:src/console.c **** 
  44:src/console.c **** #ifdef DM42
  45:src/console.c **** 
  46:src/console.c **** #include <menu.c>
  47:src/console.c **** 
  48:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  49:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  50:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  51:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  52:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  53:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  54:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  55:src/console.c **** 
  56:src/console.c **** static struct _ndmap remap (const int c) {
  57:src/console.c **** 
  58:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  59:src/console.c **** 
  60:src/console.c **** #include "keytran.c"
  61:src/console.c **** 
  62:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  63:src/console.c **** 
  64:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  65:src/console.c **** 
  66:src/console.c ****   if (c == 44 ) {
  67:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  68:src/console.c ****     return sshot;
  69:src/console.c ****   }
  70:src/console.c ****   
  71:src/console.c ****   if (Running | Pause) {
  72:src/console.c ****     return mapping_running[c];
  73:src/console.c ****   }
  74:src/console.c **** 
ARM GAS  /tmp/ccgLZIWS.s 			page 59


  75:src/console.c ****   struct _menu Ref = get_current_menu_ref();
  76:src/console.c ****   
  77:src/console.c ****   switch (c) {
  78:src/console.c ****   case KEY_F1:
  79:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[0].unshifted;
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
  81:src/console.c ****   case KEY_F2:
  82:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[1].unshifted;
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
  84:src/console.c ****   case KEY_F3:
  85:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[2].unshifted;
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
  87:src/console.c ****   case KEY_F4:
  88:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[3].unshifted;
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
  90:src/console.c ****   case KEY_F5:
  91:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[4].unshifted;
  92:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
  93:src/console.c ****   case KEY_F6:
  94:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[5].unshifted;
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
  96:src/console.c ****   }
  97:src/console.c **** 
  98:src/console.c ****   if ( get_alpha_state() ) {
  99:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 100:src/console.c ****       switch (cur_shift()) { 
 101:src/console.c ****       case SHIFT_N:
 102:src/console.c **** 	return mapping_none[c]; // N -> F
 103:src/console.c **** 	break;
 104:src/console.c ****       case SHIFT_F:
 105:src/console.c **** 	return mapping_fshift[c]; // F -> G
 106:src/console.c **** 	break;
 107:src/console.c ****       case SHIFT_G:
 108:src/console.c **** 	return h_shift; // G -> H
 109:src/console.c **** 	break;
 110:src/console.c ****       case SHIFT_H:
 111:src/console.c **** 	return h_shift; // H -> N
 112:src/console.c ****       default:
 113:src/console.c **** 	return no_change;
 114:src/console.c ****       }
 115:src/console.c ****     }
 116:src/console.c ****     return mapping_alpha [c];
 117:src/console.c ****   }
 118:src/console.c **** 
 119:src/console.c ****   switch (cur_shift()) {
 120:src/console.c ****   case SHIFT_N:    
 121:src/console.c ****     return mapping_none[c];
 122:src/console.c ****     break;
 123:src/console.c ****   case SHIFT_F:
 124:src/console.c ****     return mapping_fshift[c];
 125:src/console.c ****     break;
 126:src/console.c ****   case SHIFT_G:
 127:src/console.c ****     return mapping_gshift[c];
 128:src/console.c ****     break;
 129:src/console.c ****   default:
 130:src/console.c ****     return no_change;
 131:src/console.c ****   }
ARM GAS  /tmp/ccgLZIWS.s 			page 60


 132:src/console.c **** }
 133:src/console.c **** 
 134:src/console.c **** #endif
 135:src/console.c **** 
 136:src/console.c **** void shutdown( void )
 137:src/console.c **** {
 2114              		.loc 2 137 1 view -0
 2115              		.cfi_startproc
 2116              		@ args = 0, pretend = 0, frame = 0
 2117              		@ frame_needed = 0, uses_anonymous_args = 0
 2118              		@ link register save eliminated.
 138:src/console.c **** #ifndef DM42
 139:src/console.c ****   checksum_all();
 140:src/console.c ****   setuptty( 1 );
 141:src/console.c ****   save_statefile( NULL );
 142:src/console.c ****   exit( 0 );
 143:src/console.c **** #else
 144:src/console.c ****   //  save_ram_file(0);
 145:src/console.c ****   SET_ST(STAT_PGM_END);
 2119              		.loc 2 145 3 view .LVU606
 2120 0000 024A     		ldr	r2, .L221
 2121 0002 1368     		ldr	r3, [r2]
 2122 0004 43F40073 		orr	r3, r3, #512
 2123 0008 1360     		str	r3, [r2]
 146:src/console.c **** #endif
 147:src/console.c **** }
 2124              		.loc 2 147 1 is_stmt 0 view .LVU607
 2125 000a 7047     		bx	lr
 2126              	.L222:
 2127              		.align	2
 2128              	.L221:
 2129 000c 00200010 		.word	268443648
 2130              		.cfi_endproc
 2131              	.LFE20:
 2133              		.section	.text.is_key_pressed,"ax",%progbits
 2134              		.align	1
 2135              		.p2align 2,,3
 2136              		.global	is_key_pressed
 2137              		.syntax unified
 2138              		.thumb
 2139              		.thumb_func
 2140              		.fpu fpv4-sp-d16
 2142              	is_key_pressed:
 2143              	.LFB21:
 148:src/console.c **** 
 149:src/console.c **** 
 150:src/console.c **** /*
 151:src/console.c ****  *  Dummies
 152:src/console.c ****  */
 153:src/console.c **** int is_key_pressed(void) 
 154:src/console.c **** {
 2144              		.loc 2 154 1 is_stmt 1 view -0
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 0
 2147              		@ frame_needed = 0, uses_anonymous_args = 0
 155:src/console.c **** #ifdef DM42
 156:src/console.c ****   return !key_empty();
ARM GAS  /tmp/ccgLZIWS.s 			page 61


 2148              		.loc 2 156 3 view .LVU609
 154:src/console.c **** #ifdef DM42
 2149              		.loc 2 154 1 is_stmt 0 view .LVU610
 2150 0000 08B5     		push	{r3, lr}
 2151              		.cfi_def_cfa_offset 8
 2152              		.cfi_offset 3, -8
 2153              		.cfi_offset 14, -4
 2154              		.loc 2 156 11 view .LVU611
 2155 0002 034B     		ldr	r3, .L225
 2156 0004 9847     		blx	r3
 2157              	.LVL157:
 157:src/console.c **** #else
 158:src/console.c ****   return 0;
 159:src/console.c **** #endif
 160:src/console.c **** }
 2158              		.loc 2 160 1 view .LVU612
 2159 0006 B0FA80F0 		clz	r0, r0
 2160 000a 4009     		lsrs	r0, r0, #5
 2161 000c 08BD     		pop	{r3, pc}
 2162              	.L226:
 2163 000e 00BF     		.align	2
 2164              	.L225:
 2165 0010 7D030008 		.word	134218621
 2166              		.cfi_endproc
 2167              	.LFE21:
 2169              		.section	.text.get_key,"ax",%progbits
 2170              		.align	1
 2171              		.p2align 2,,3
 2172              		.global	get_key
 2173              		.syntax unified
 2174              		.thumb
 2175              		.thumb_func
 2176              		.fpu fpv4-sp-d16
 2178              	get_key:
 2179              	.LFB22:
 161:src/console.c **** 
 162:src/console.c **** int get_key(void)
 163:src/console.c **** {
 2180              		.loc 2 163 1 is_stmt 1 view -0
 2181              		.cfi_startproc
 2182              		@ args = 0, pretend = 0, frame = 0
 2183              		@ frame_needed = 0, uses_anonymous_args = 0
 2184              		@ link register save eliminated.
 164:src/console.c ****   #ifdef DM42
 165:src/console.c ****   return key_pop();
 2185              		.loc 2 165 3 view .LVU614
 2186              		.loc 2 165 10 is_stmt 0 view .LVU615
 2187 0000 004B     		ldr	r3, .L228
 2188 0002 1847     		bx	r3
 2189              	.LVL158:
 2190              	.L229:
 2191              		.align	2
 2192              	.L228:
 2193 0004 89030008 		.word	134218633
 2194              		.cfi_endproc
 2195              	.LFE22:
 2197              		.section	.text.put_key,"ax",%progbits
ARM GAS  /tmp/ccgLZIWS.s 			page 62


 2198              		.align	1
 2199              		.p2align 2,,3
 2200              		.global	put_key
 2201              		.syntax unified
 2202              		.thumb
 2203              		.thumb_func
 2204              		.fpu fpv4-sp-d16
 2206              	put_key:
 2207              	.LVL159:
 2208              	.LFB23:
 166:src/console.c ****   #else
 167:src/console.c ****   return 0;
 168:src/console.c ****   #endif
 169:src/console.c **** }
 170:src/console.c **** 
 171:src/console.c **** /*
 172:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 173:src/console.c ****  * 
 174:src/console.c ****  */
 175:src/console.c **** int put_key( int k )
 176:src/console.c **** {
 2209              		.loc 2 176 1 is_stmt 1 view -0
 2210              		.cfi_startproc
 2211              		@ args = 0, pretend = 0, frame = 48
 2212              		@ frame_needed = 0, uses_anonymous_args = 0
 2213              		@ link register save eliminated.
 177:src/console.c ****   #ifdef DM42
 178:src/console.c ****   const char wp34s_to_DM42[] = {
 2214              		.loc 2 178 3 view .LVU617
 176:src/console.c ****   #ifdef DM42
 2215              		.loc 2 176 1 is_stmt 0 view .LVU618
 2216 0000 70B4     		push	{r4, r5, r6}
 2217              		.cfi_def_cfa_offset 12
 2218              		.cfi_offset 4, -12
 2219              		.cfi_offset 5, -8
 2220              		.cfi_offset 6, -4
 2221              		.loc 2 178 14 view .LVU619
 2222 0002 0E4D     		ldr	r5, .L233
 176:src/console.c ****   #ifdef DM42
 2223              		.loc 2 176 1 view .LVU620
 2224 0004 0646     		mov	r6, r0
 2225              		.loc 2 178 14 view .LVU621
 2226 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2227              	.LVL160:
 176:src/console.c ****   #ifdef DM42
 2228              		.loc 2 176 1 view .LVU622
 2229 0008 8DB0     		sub	sp, sp, #52
 2230              		.cfi_def_cfa_offset 64
 2231              		.loc 2 178 14 view .LVU623
 2232 000a 01AC     		add	r4, sp, #4
 2233 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2234 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2235 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2236 0012 95E80700 		ldm	r5, {r0, r1, r2}
 2237 0016 03C4     		stmia	r4!, {r0, r1}
 179:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 180:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
ARM GAS  /tmp/ccgLZIWS.s 			page 63


 181:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 182:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 183:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 184:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 185:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 186:src/console.c ****   
 187:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 2238              		.loc 2 187 6 view .LVU624
 2239 0018 282E     		cmp	r6, #40
 178:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 2240              		.loc 2 178 14 view .LVU625
 2241 001a 2270     		strb	r2, [r4]
 2242              		.loc 2 187 3 is_stmt 1 view .LVU626
 2243              		.loc 2 187 6 is_stmt 0 view .LVU627
 2244 001c 08D8     		bhi	.L231
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2245              		.loc 2 188 5 is_stmt 1 view .LVU628
 2246              		.loc 2 188 36 is_stmt 0 view .LVU629
 2247 001e 0CAB     		add	r3, sp, #48
 2248 0020 3046     		mov	r0, r6
 2249 0022 1844     		add	r0, r0, r3
 2250              		.loc 2 188 12 view .LVU630
 2251 0024 064B     		ldr	r3, .L233+4
 2252 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 189:src/console.c ****   }
 190:src/console.c ****   else {
 191:src/console.c ****     return -1;
 192:src/console.c ****   }
 193:src/console.c ****   #else
 194:src/console.c ****   return k;
 195:src/console.c ****   #endif
 196:src/console.c **** }
 2253              		.loc 2 196 1 view .LVU631
 2254 002a 0DB0     		add	sp, sp, #52
 2255              		.cfi_remember_state
 2256              		.cfi_def_cfa_offset 12
 2257              		@ sp needed
 2258 002c 70BC     		pop	{r4, r5, r6}
 2259              		.cfi_restore 6
 2260              		.cfi_restore 5
 2261              		.cfi_restore 4
 2262              		.cfi_def_cfa_offset 0
 2263              	.LVL161:
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2264              		.loc 2 188 12 view .LVU632
 2265 002e 1847     		bx	r3
 2266              	.LVL162:
 2267              	.L231:
 2268              		.cfi_restore_state
 2269              		.loc 2 196 1 view .LVU633
 2270 0030 4FF0FF30 		mov	r0, #-1
 2271 0034 0DB0     		add	sp, sp, #52
 2272              		.cfi_def_cfa_offset 12
 2273              		@ sp needed
 2274 0036 70BC     		pop	{r4, r5, r6}
 2275              		.cfi_restore 6
 2276              		.cfi_restore 5
ARM GAS  /tmp/ccgLZIWS.s 			page 64


 2277              		.cfi_restore 4
 2278              		.cfi_def_cfa_offset 0
 2279              	.LVL163:
 2280              		.loc 2 196 1 view .LVU634
 2281 0038 7047     		bx	lr
 2282              	.L234:
 2283 003a 00BF     		.align	2
 2284              	.L233:
 2285 003c 00000000 		.word	.LANCHOR7
 2286 0040 81030008 		.word	134218625
 2287              		.cfi_endproc
 2288              	.LFE23:
 2290              		.section	.text.shift_down,"ax",%progbits
 2291              		.align	1
 2292              		.p2align 2,,3
 2293              		.global	shift_down
 2294              		.syntax unified
 2295              		.thumb
 2296              		.thumb_func
 2297              		.fpu fpv4-sp-d16
 2299              	shift_down:
 2300              	.LFB24:
 197:src/console.c **** 
 198:src/console.c **** enum shifts shift_down(void)
 199:src/console.c **** {
 2301              		.loc 2 199 1 is_stmt 1 view -0
 2302              		.cfi_startproc
 2303              		@ args = 0, pretend = 0, frame = 0
 2304              		@ frame_needed = 0, uses_anonymous_args = 0
 2305              		@ link register save eliminated.
 200:src/console.c **** 	return SHIFT_N;
 2306              		.loc 2 200 2 view .LVU636
 201:src/console.c **** }
 2307              		.loc 2 201 1 is_stmt 0 view .LVU637
 2308 0000 0020     		movs	r0, #0
 2309 0002 7047     		bx	lr
 2310              		.cfi_endproc
 2311              	.LFE24:
 2313              		.section	.text.start_key_timer,"ax",%progbits
 2314              		.align	1
 2315              		.p2align 2,,3
 2316              		.global	start_key_timer
 2317              		.syntax unified
 2318              		.thumb
 2319              		.thumb_func
 2320              		.fpu fpv4-sp-d16
 2322              	start_key_timer:
 2323              	.LFB25:
 202:src/console.c **** 
 203:src/console.c **** #ifndef DM42   // No serial operations for DM42
 204:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 205:src/console.c **** /*
 206:src/console.c ****  *  Open a COM port for transmission
 207:src/console.c ****  */
 208:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 209:src/console.c **** {
 210:src/console.c **** 	return 0;
ARM GAS  /tmp/ccgLZIWS.s 			page 65


 211:src/console.c **** }
 212:src/console.c **** 
 213:src/console.c **** 
 214:src/console.c **** /*
 215:src/console.c ****  *  Close the COM port after transmission is complete
 216:src/console.c ****  */
 217:src/console.c **** extern void close_port( void )
 218:src/console.c **** {
 219:src/console.c **** }
 220:src/console.c **** 
 221:src/console.c **** 
 222:src/console.c **** /*
 223:src/console.c ****  *  Output a single byte to the serial
 224:src/console.c ****  */
 225:src/console.c **** void put_byte( unsigned char byte )
 226:src/console.c **** {
 227:src/console.c **** 	report_err(ERR_PROG_BAD);
 228:src/console.c **** }
 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Force buffer flush
 233:src/console.c ****  */
 234:src/console.c **** void flush_comm( void )
 235:src/console.c **** {
 236:src/console.c **** }
 237:src/console.c **** 
 238:src/console.c **** #endif
 239:src/console.c **** #endif
 240:src/console.c **** 
 241:src/console.c **** 
 242:src/console.c **** /*
 243:src/console.c ****  *  Main loop
 244:src/console.c ****  */
 245:src/console.c **** #ifdef DM42
 246:src/console.c **** void start_key_timer (void);
 247:src/console.c **** long int keyticks (void);
 248:src/console.c **** void moveto (int line, int x);
 249:src/console.c **** 
 250:src/console.c **** static long int start_ticks;
 251:src/console.c **** 
 252:src/console.c **** void start_key_timer() {
 2324              		.loc 2 252 24 is_stmt 1 view -0
 2325              		.cfi_startproc
 2326              		@ args = 0, pretend = 0, frame = 0
 2327              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/console.c ****     start_ticks = get_rtc_ticks();
 2328              		.loc 2 253 5 view .LVU639
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 2329              		.loc 2 252 24 is_stmt 0 view .LVU640
 2330 0000 08B5     		push	{r3, lr}
 2331              		.cfi_def_cfa_offset 8
 2332              		.cfi_offset 3, -8
 2333              		.cfi_offset 14, -4
 2334              		.loc 2 253 19 view .LVU641
 2335 0002 024B     		ldr	r3, .L238
 2336 0004 9847     		blx	r3
ARM GAS  /tmp/ccgLZIWS.s 			page 66


 2337              	.LVL164:
 2338              		.loc 2 253 17 view .LVU642
 2339 0006 024B     		ldr	r3, .L238+4
 2340 0008 1860     		str	r0, [r3]
 254:src/console.c **** }
 2341              		.loc 2 254 1 view .LVU643
 2342 000a 08BD     		pop	{r3, pc}
 2343              	.L239:
 2344              		.align	2
 2345              	.L238:
 2346 000c B9040008 		.word	134218937
 2347 0010 00000000 		.word	.LANCHOR8
 2348              		.cfi_endproc
 2349              	.LFE25:
 2351              		.section	.text.keyticks,"ax",%progbits
 2352              		.align	1
 2353              		.p2align 2,,3
 2354              		.global	keyticks
 2355              		.syntax unified
 2356              		.thumb
 2357              		.thumb_func
 2358              		.fpu fpv4-sp-d16
 2360              	keyticks:
 2361              	.LFB26:
 255:src/console.c **** 
 256:src/console.c **** long int keyticks () {
 2362              		.loc 2 256 22 is_stmt 1 view -0
 2363              		.cfi_startproc
 2364              		@ args = 0, pretend = 0, frame = 0
 2365              		@ frame_needed = 0, uses_anonymous_args = 0
 257:src/console.c ****   long int i;
 2366              		.loc 2 257 3 view .LVU645
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2367              		.loc 2 258 3 view .LVU646
 256:src/console.c ****   long int i;
 2368              		.loc 2 256 22 is_stmt 0 view .LVU647
 2369 0000 08B5     		push	{r3, lr}
 2370              		.cfi_def_cfa_offset 8
 2371              		.cfi_offset 3, -8
 2372              		.cfi_offset 14, -4
 2373              		.loc 2 258 8 view .LVU648
 2374 0002 054B     		ldr	r3, .L242
 2375 0004 9847     		blx	r3
 2376              	.LVL165:
 259:src/console.c ****   return i >> 8;
 2377              		.loc 2 259 3 is_stmt 1 view .LVU649
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2378              		.loc 2 258 24 is_stmt 0 view .LVU650
 2379 0006 054B     		ldr	r3, .L242+4
 2380 0008 1B68     		ldr	r3, [r3]
 2381 000a C01A     		subs	r0, r0, r3
 2382              	.LVL166:
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2383              		.loc 2 258 38 view .LVU651
 2384 000c 00EB8000 		add	r0, r0, r0, lsl #2
 260:src/console.c **** }
 2385              		.loc 2 260 1 view .LVU652
ARM GAS  /tmp/ccgLZIWS.s 			page 67


 2386 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2387 0014 08BD     		pop	{r3, pc}
 2388              	.L243:
 2389 0016 00BF     		.align	2
 2390              	.L242:
 2391 0018 B9040008 		.word	134218937
 2392 001c 00000000 		.word	.LANCHOR8
 2393              		.cfi_endproc
 2394              	.LFE26:
 2396              		.section	.text.moveto,"ax",%progbits
 2397              		.align	1
 2398              		.p2align 2,,3
 2399              		.global	moveto
 2400              		.syntax unified
 2401              		.thumb
 2402              		.thumb_func
 2403              		.fpu fpv4-sp-d16
 2405              	moveto:
 2406              	.LVL167:
 2407              	.LFB27:
 261:src/console.c **** 
 262:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 263:src/console.c **** char print_string[22];
 264:src/console.c **** int n_p = 0;
 265:src/console.c **** 
 266:src/console.c **** 
 267:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2408              		.loc 2 267 30 is_stmt 1 view -0
 2409              		.cfi_startproc
 2410              		@ args = 0, pretend = 0, frame = 0
 2411              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2412              		.loc 2 268 3 view .LVU654
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2413              		.loc 2 267 30 is_stmt 0 view .LVU655
 2414 0000 70B5     		push	{r4, r5, r6, lr}
 2415              		.cfi_def_cfa_offset 16
 2416              		.cfi_offset 4, -16
 2417              		.cfi_offset 5, -12
 2418              		.cfi_offset 6, -8
 2419              		.cfi_offset 14, -4
 2420              		.loc 2 268 3 view .LVU656
 2421 0002 0A4D     		ldr	r5, .L246
 2422 0004 0A4B     		ldr	r3, .L246+4
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2423              		.loc 2 267 30 view .LVU657
 2424 0006 0246     		mov	r2, r0
 2425 0008 0C46     		mov	r4, r1
 2426              		.loc 2 268 3 view .LVU658
 2427 000a A86B     		ldr	r0, [r5, #56]
 2428              	.LVL168:
 2429              		.loc 2 268 3 view .LVU659
 2430 000c 511E     		subs	r1, r2, #1
 2431              	.LVL169:
 2432              		.loc 2 268 3 view .LVU660
 2433 000e 9847     		blx	r3
 2434              	.LVL170:
ARM GAS  /tmp/ccgLZIWS.s 			page 68


 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2435              		.loc 2 269 3 is_stmt 1 view .LVU661
 2436 0010 A86B     		ldr	r0, [r5, #56]
 2437 0012 084B     		ldr	r3, .L246+8
 2438              		.loc 2 269 33 is_stmt 0 view .LVU662
 2439 0014 0168     		ldr	r1, [r0]
 2440              		.loc 2 269 3 view .LVU663
 2441 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2442              		.loc 2 269 33 view .LVU664
 2443 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2444              		.loc 2 269 43 view .LVU665
 2445 001c 013C     		subs	r4, r4, #1
 2446              	.LVL171:
 2447              		.loc 2 269 40 view .LVU666
 2448 001e 04FB01F1 		mul	r1, r4, r1
 2449              		.loc 2 269 3 view .LVU667
 2450 0022 1431     		adds	r1, r1, #20
 270:src/console.c **** }
 2451              		.loc 2 270 1 view .LVU668
 2452 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2453              		.cfi_restore 14
 2454              		.cfi_restore 6
 2455              		.cfi_restore 5
 2456              		.cfi_restore 4
 2457              		.cfi_def_cfa_offset 0
 2458              	.LVL172:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2459              		.loc 2 269 3 view .LVU669
 2460 0028 1847     		bx	r3	@ indirect register sibling call
 2461              	.LVL173:
 2462              	.L247:
 2463 002a 00BF     		.align	2
 2464              	.L246:
 2465 002c 00200010 		.word	268443648
 2466 0030 69020008 		.word	134218345
 2467 0034 6D020008 		.word	134218349
 2468              		.cfi_endproc
 2469              	.LFE27:
 2471              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2472              		.align	2
 2473              	.LC9:
 2474 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2474      673A2025 
 2474      34692C25 
 2474      346900
 2475              		.section	.text.print_debug,"ax",%progbits
 2476              		.align	1
 2477              		.p2align 2,,3
 2478              		.global	print_debug
 2479              		.syntax unified
 2480              		.thumb
 2481              		.thumb_func
 2482              		.fpu fpv4-sp-d16
 2484              	print_debug:
 2485              	.LVL174:
 2486              	.LFB28:
 271:src/console.c **** 
ARM GAS  /tmp/ccgLZIWS.s 			page 69


 272:src/console.c **** void print_debug (int i, int j) {
 2487              		.loc 2 272 33 is_stmt 1 view -0
 2488              		.cfi_startproc
 2489              		@ args = 0, pretend = 0, frame = 8
 2490              		@ frame_needed = 0, uses_anonymous_args = 0
 273:src/console.c ****   strcpy( print_string, spaces );
 2491              		.loc 2 273 3 view .LVU671
 272:src/console.c ****   strcpy( print_string, spaces );
 2492              		.loc 2 272 33 is_stmt 0 view .LVU672
 2493 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2494              		.cfi_def_cfa_offset 24
 2495              		.cfi_offset 4, -24
 2496              		.cfi_offset 5, -20
 2497              		.cfi_offset 6, -16
 2498              		.cfi_offset 7, -12
 2499              		.cfi_offset 8, -8
 2500              		.cfi_offset 14, -4
 2501              		.loc 2 273 3 view .LVU673
 2502 0004 174C     		ldr	r4, .L250
 2503 0006 184F     		ldr	r7, .L250+4
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 275:src/console.c ****   moveto (3, 1);
 276:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2504              		.loc 2 276 3 view .LVU674
 2505 0008 184E     		ldr	r6, .L250+8
 2506 000a 194D     		ldr	r5, .L250+12
 277:src/console.c ****   lcd_refresh();
 2507              		.loc 2 277 3 view .LVU675
 2508 000c DFF86C80 		ldr	r8, .L250+24
 272:src/console.c ****   strcpy( print_string, spaces );
 2509              		.loc 2 272 33 view .LVU676
 2510 0010 82B0     		sub	sp, sp, #8
 2511              		.cfi_def_cfa_offset 32
 272:src/console.c ****   strcpy( print_string, spaces );
 2512              		.loc 2 272 33 view .LVU677
 2513 0012 0190     		str	r0, [sp, #4]
 2514 0014 0091     		str	r1, [sp]
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2515              		.loc 2 273 3 view .LVU678
 2516 0016 2046     		mov	r0, r4
 2517              	.LVL175:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2518              		.loc 2 273 3 view .LVU679
 2519 0018 3946     		mov	r1, r7
 2520              	.LVL176:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2521              		.loc 2 273 3 view .LVU680
 2522 001a FFF7FEFF 		bl	strcpy
 2523              	.LVL177:
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2524              		.loc 2 274 3 is_stmt 1 view .LVU681
 2525 001e DDE90032 		ldrd	r3, r2, [sp]
 2526 0022 1449     		ldr	r1, .L250+16
 2527 0024 2046     		mov	r0, r4
 2528 0026 FFF7FEFF 		bl	sprintf
 2529              	.LVL178:
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
ARM GAS  /tmp/ccgLZIWS.s 			page 70


 2530              		.loc 2 275 3 view .LVU682
 2531 002a 0121     		movs	r1, #1
 2532 002c 0320     		movs	r0, #3
 2533 002e FFF7FEFF 		bl	moveto
 2534              	.LVL179:
 276:src/console.c ****   lcd_refresh();
 2535              		.loc 2 276 3 view .LVU683
 2536 0032 2146     		mov	r1, r4
 2537 0034 B06B     		ldr	r0, [r6, #56]
 2538 0036 A847     		blx	r5
 2539              	.LVL180:
 2540              		.loc 2 277 3 view .LVU684
 2541 0038 C047     		blx	r8
 2542              	.LVL181:
 278:src/console.c ****   sys_delay (1000);
 2543              		.loc 2 278 3 view .LVU685
 2544 003a 0F4B     		ldr	r3, .L250+20
 2545 003c 4FF47A70 		mov	r0, #1000
 2546 0040 9847     		blx	r3
 2547              	.LVL182:
 279:src/console.c ****   /* wait_for_key_press(); */
 280:src/console.c ****   //  key_pop_all();
 281:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 282:src/console.c ****   // key_pop_all();
 283:src/console.c ****   strcpy( print_string, spaces );
 2548              		.loc 2 283 3 view .LVU686
 2549 0042 3946     		mov	r1, r7
 2550 0044 2046     		mov	r0, r4
 2551 0046 FFF7FEFF 		bl	strcpy
 2552              	.LVL183:
 284:src/console.c ****   moveto (3, 1);
 2553              		.loc 2 284 3 view .LVU687
 2554 004a 0121     		movs	r1, #1
 2555 004c 0320     		movs	r0, #3
 2556 004e FFF7FEFF 		bl	moveto
 2557              	.LVL184:
 285:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2558              		.loc 2 285 3 view .LVU688
 2559 0052 B06B     		ldr	r0, [r6, #56]
 2560 0054 2146     		mov	r1, r4
 2561 0056 A847     		blx	r5
 2562              	.LVL185:
 286:src/console.c ****   lcd_refresh();
 2563              		.loc 2 286 3 view .LVU689
 2564 0058 4346     		mov	r3, r8
 287:src/console.c ****   // while (key_empty()<=0);; // wait for release
 288:src/console.c ****   // key_pop_all();
 289:src/console.c **** }
 2565              		.loc 2 289 1 is_stmt 0 view .LVU690
 2566 005a 02B0     		add	sp, sp, #8
 2567              		.cfi_def_cfa_offset 24
 2568              	.LVL186:
 2569              		.loc 2 289 1 view .LVU691
 2570              		@ sp needed
 2571 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2572              		.cfi_restore 14
 2573              		.cfi_restore 8
ARM GAS  /tmp/ccgLZIWS.s 			page 71


 2574              		.cfi_restore 7
 2575              		.cfi_restore 6
 2576              		.cfi_restore 5
 2577              		.cfi_restore 4
 2578              		.cfi_def_cfa_offset 0
 2579              	.LVL187:
 286:src/console.c ****   lcd_refresh();
 2580              		.loc 2 286 3 view .LVU692
 2581 0060 1847     		bx	r3	@ indirect register sibling call
 2582              	.LVL188:
 2583              	.L251:
 2584 0062 00BF     		.align	2
 2585              	.L250:
 2586 0064 00000000 		.word	print_string
 2587 0068 00000000 		.word	.LANCHOR9
 2588 006c 00200010 		.word	268443648
 2589 0070 B1020008 		.word	134218417
 2590 0074 00000000 		.word	.LC9
 2591 0078 05040008 		.word	134218757
 2592 007c 31020008 		.word	134218289
 2593              		.cfi_endproc
 2594              	.LFE28:
 2596              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2597              		.align	2
 2598              	.LC10:
 2599 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2599      692C2531 
 2599      337300
 2600              		.section	.text.print_debug2,"ax",%progbits
 2601              		.align	1
 2602              		.p2align 2,,3
 2603              		.global	print_debug2
 2604              		.syntax unified
 2605              		.thumb
 2606              		.thumb_func
 2607              		.fpu fpv4-sp-d16
 2609              	print_debug2:
 2610              	.LVL189:
 2611              	.LFB29:
 290:src/console.c **** 
 291:src/console.c **** void print_debug2 (int i, char* j) {
 2612              		.loc 2 291 36 is_stmt 1 view -0
 2613              		.cfi_startproc
 2614              		@ args = 0, pretend = 0, frame = 8
 2615              		@ frame_needed = 0, uses_anonymous_args = 0
 292:src/console.c ****   strcpy( print_string, spaces );
 2616              		.loc 2 292 3 view .LVU694
 291:src/console.c ****   strcpy( print_string, spaces );
 2617              		.loc 2 291 36 is_stmt 0 view .LVU695
 2618 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2619              		.cfi_def_cfa_offset 24
 2620              		.cfi_offset 4, -24
 2621              		.cfi_offset 5, -20
 2622              		.cfi_offset 6, -16
 2623              		.cfi_offset 7, -12
 2624              		.cfi_offset 8, -8
 2625              		.cfi_offset 14, -4
ARM GAS  /tmp/ccgLZIWS.s 			page 72


 2626              		.loc 2 292 3 view .LVU696
 2627 0004 174C     		ldr	r4, .L254
 2628 0006 184F     		ldr	r7, .L254+4
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 294:src/console.c ****   moveto (3, 1);
 295:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2629              		.loc 2 295 3 view .LVU697
 2630 0008 184E     		ldr	r6, .L254+8
 2631 000a 194D     		ldr	r5, .L254+12
 296:src/console.c ****   lcd_refresh();
 2632              		.loc 2 296 3 view .LVU698
 2633 000c DFF86C80 		ldr	r8, .L254+24
 291:src/console.c ****   strcpy( print_string, spaces );
 2634              		.loc 2 291 36 view .LVU699
 2635 0010 82B0     		sub	sp, sp, #8
 2636              		.cfi_def_cfa_offset 32
 291:src/console.c ****   strcpy( print_string, spaces );
 2637              		.loc 2 291 36 view .LVU700
 2638 0012 0190     		str	r0, [sp, #4]
 2639 0014 0091     		str	r1, [sp]
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2640              		.loc 2 292 3 view .LVU701
 2641 0016 2046     		mov	r0, r4
 2642              	.LVL190:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2643              		.loc 2 292 3 view .LVU702
 2644 0018 3946     		mov	r1, r7
 2645              	.LVL191:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2646              		.loc 2 292 3 view .LVU703
 2647 001a FFF7FEFF 		bl	strcpy
 2648              	.LVL192:
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2649              		.loc 2 293 3 is_stmt 1 view .LVU704
 2650 001e DDE90032 		ldrd	r3, r2, [sp]
 2651 0022 1449     		ldr	r1, .L254+16
 2652 0024 2046     		mov	r0, r4
 2653 0026 FFF7FEFF 		bl	sprintf
 2654              	.LVL193:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2655              		.loc 2 294 3 view .LVU705
 2656 002a 0121     		movs	r1, #1
 2657 002c 0320     		movs	r0, #3
 2658 002e FFF7FEFF 		bl	moveto
 2659              	.LVL194:
 295:src/console.c ****   lcd_refresh();
 2660              		.loc 2 295 3 view .LVU706
 2661 0032 2146     		mov	r1, r4
 2662 0034 B06B     		ldr	r0, [r6, #56]
 2663 0036 A847     		blx	r5
 2664              	.LVL195:
 2665              		.loc 2 296 3 view .LVU707
 2666 0038 C047     		blx	r8
 2667              	.LVL196:
 297:src/console.c ****   sys_delay (2500);
 2668              		.loc 2 297 3 view .LVU708
 2669 003a 0F4B     		ldr	r3, .L254+20
ARM GAS  /tmp/ccgLZIWS.s 			page 73


 2670 003c 40F6C410 		movw	r0, #2500
 2671 0040 9847     		blx	r3
 2672              	.LVL197:
 298:src/console.c ****   /* wait_for_key_press(); */
 299:src/console.c ****   //  key_pop_all();
 300:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 301:src/console.c ****   // key_pop_all();
 302:src/console.c ****   strcpy( print_string, spaces );
 2673              		.loc 2 302 3 view .LVU709
 2674 0042 3946     		mov	r1, r7
 2675 0044 2046     		mov	r0, r4
 2676 0046 FFF7FEFF 		bl	strcpy
 2677              	.LVL198:
 303:src/console.c ****   moveto (3, 1);
 2678              		.loc 2 303 3 view .LVU710
 2679 004a 0121     		movs	r1, #1
 2680 004c 0320     		movs	r0, #3
 2681 004e FFF7FEFF 		bl	moveto
 2682              	.LVL199:
 304:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2683              		.loc 2 304 3 view .LVU711
 2684 0052 B06B     		ldr	r0, [r6, #56]
 2685 0054 2146     		mov	r1, r4
 2686 0056 A847     		blx	r5
 2687              	.LVL200:
 305:src/console.c ****   lcd_refresh();
 2688              		.loc 2 305 3 view .LVU712
 2689 0058 4346     		mov	r3, r8
 306:src/console.c ****   // while (key_empty()<=0);; // wait for release
 307:src/console.c ****   // key_pop_all();
 308:src/console.c **** }
 2690              		.loc 2 308 1 is_stmt 0 view .LVU713
 2691 005a 02B0     		add	sp, sp, #8
 2692              		.cfi_def_cfa_offset 24
 2693              	.LVL201:
 2694              		.loc 2 308 1 view .LVU714
 2695              		@ sp needed
 2696 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2697              		.cfi_restore 14
 2698              		.cfi_restore 8
 2699              		.cfi_restore 7
 2700              		.cfi_restore 6
 2701              		.cfi_restore 5
 2702              		.cfi_restore 4
 2703              		.cfi_def_cfa_offset 0
 2704              	.LVL202:
 305:src/console.c ****   lcd_refresh();
 2705              		.loc 2 305 3 view .LVU715
 2706 0060 1847     		bx	r3	@ indirect register sibling call
 2707              	.LVL203:
 2708              	.L255:
 2709 0062 00BF     		.align	2
 2710              	.L254:
 2711 0064 00000000 		.word	print_string
 2712 0068 00000000 		.word	.LANCHOR9
 2713 006c 00200010 		.word	268443648
 2714 0070 B1020008 		.word	134218417
ARM GAS  /tmp/ccgLZIWS.s 			page 74


 2715 0074 00000000 		.word	.LC10
 2716 0078 05040008 		.word	134218757
 2717 007c 31020008 		.word	134218289
 2718              		.cfi_endproc
 2719              	.LFE29:
 2721              		.section	.text.do_now,"ax",%progbits
 2722              		.align	1
 2723              		.p2align 2,,3
 2724              		.global	do_now
 2725              		.syntax unified
 2726              		.thumb
 2727              		.thumb_func
 2728              		.fpu fpv4-sp-d16
 2730              	do_now:
 2731              	.LVL204:
 2732              	.LFB30:
 309:src/console.c **** 
 310:src/console.c **** void do_now (int key, int shift) { // key and shift are like the output of remapped
 2733              		.loc 2 310 34 is_stmt 1 view -0
 2734              		.cfi_startproc
 2735              		@ args = 0, pretend = 0, frame = 8
 2736              		@ frame_needed = 0, uses_anonymous_args = 0
 2737              		@ link register save eliminated.
 311:src/console.c ****   struct _ndmap temp;
 2738              		.loc 2 311 3 view .LVU717
 312:src/console.c ****   temp.key_34s = key;
 2739              		.loc 2 312 3 view .LVU718
 310:src/console.c ****   struct _ndmap temp;
 2740              		.loc 2 310 34 is_stmt 0 view .LVU719
 2741 0000 82B0     		sub	sp, sp, #8
 2742              		.cfi_def_cfa_offset 8
 313:src/console.c ****   temp.shift = shift;
 314:src/console.c ****   process_keycode_with_shift (temp);
 2743              		.loc 2 314 3 view .LVU720
 2744 0002 02AB     		add	r3, sp, #8
 312:src/console.c ****   temp.shift = shift;
 2745              		.loc 2 312 16 view .LVU721
 2746 0004 8DF80000 		strb	r0, [sp]
 313:src/console.c ****   temp.shift = shift;
 2747              		.loc 2 313 3 is_stmt 1 view .LVU722
 313:src/console.c ****   temp.shift = shift;
 2748              		.loc 2 313 14 is_stmt 0 view .LVU723
 2749 0008 0191     		str	r1, [sp, #4]
 2750              		.loc 2 314 3 is_stmt 1 view .LVU724
 2751 000a 13E90300 		ldmdb	r3, {r0, r1}
 2752              	.LVL205:
 315:src/console.c **** }
 2753              		.loc 2 315 1 is_stmt 0 view .LVU725
 2754 000e 02B0     		add	sp, sp, #8
 2755              		.cfi_def_cfa_offset 0
 2756              		@ sp needed
 314:src/console.c **** }
 2757              		.loc 2 314 3 view .LVU726
 2758 0010 FFF7FEBF 		b	process_keycode_with_shift
 2759              	.LVL206:
 314:src/console.c **** }
 2760              		.loc 2 314 3 view .LVU727
ARM GAS  /tmp/ccgLZIWS.s 			page 75


 2761              		.cfi_endproc
 2762              	.LFE30:
 2764              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 2765              		.align	2
 2766              	.LC11:
 2767 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 2767      502F7770 
 2767      3334735F 
 2767      68656C70 
 2767      2E68746D 
 2768              		.section	.text.do_multi,"ax",%progbits
 2769              		.align	1
 2770              		.p2align 2,,3
 2771              		.global	do_multi
 2772              		.syntax unified
 2773              		.thumb
 2774              		.thumb_func
 2775              		.fpu fpv4-sp-d16
 2777              	do_multi:
 2778              	.LVL207:
 2779              	.LFB31:
 316:src/console.c **** 
 317:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 2780              		.loc 2 317 42 is_stmt 1 view -0
 2781              		.cfi_startproc
 2782              		@ args = 0, pretend = 0, frame = 16
 2783              		@ frame_needed = 0, uses_anonymous_args = 0
 2784              		.loc 2 317 42 is_stmt 0 view .LVU729
 2785 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2786              		.cfi_def_cfa_offset 24
 2787              		.cfi_offset 4, -24
 2788              		.cfi_offset 5, -20
 2789              		.cfi_offset 6, -16
 2790              		.cfi_offset 7, -12
 2791              		.cfi_offset 8, -8
 2792              		.cfi_offset 14, -4
 2793 0004 84B0     		sub	sp, sp, #16
 2794              		.cfi_def_cfa_offset 40
 2795              	.LVL208:
 318:src/console.c ****   switch(r.shift) {
 2796              		.loc 2 318 3 is_stmt 1 view .LVU730
 317:src/console.c ****   switch(r.shift) {
 2797              		.loc 2 317 42 is_stmt 0 view .LVU731
 2798 0006 6C46     		mov	r4, sp
 2799 0008 531E     		subs	r3, r2, #1
 2800 000a 84E80600 		stm	r4, {r1, r2}
 2801              	.LVL209:
 317:src/console.c ****   switch(r.shift) {
 2802              		.loc 2 317 42 view .LVU732
 2803 000e 0546     		mov	r5, r0
 2804 0010 0E2B     		cmp	r3, #14
 2805 0012 00F28A80 		bhi	.L259
 2806 0016 DFE803F0 		tbb	[pc, r3]
 2807              	.L261:
 2808 001a 21       		.byte	(.L275-.L261)/2
 2809 001b 49       		.byte	(.L274-.L261)/2
 2810 001c 55       		.byte	(.L273-.L261)/2
ARM GAS  /tmp/ccgLZIWS.s 			page 76


 2811 001d 59       		.byte	(.L272-.L261)/2
 2812 001e 5D       		.byte	(.L271-.L261)/2
 2813 001f 61       		.byte	(.L270-.L261)/2
 2814 0020 65       		.byte	(.L269-.L261)/2
 2815 0021 69       		.byte	(.L268-.L261)/2
 2816 0022 6C       		.byte	(.L267-.L261)/2
 2817 0023 70       		.byte	(.L266-.L261)/2
 2818 0024 73       		.byte	(.L265-.L261)/2
 2819 0025 76       		.byte	(.L264-.L261)/2
 2820 0026 8F       		.byte	(.L263-.L261)/2
 2821 0027 92       		.byte	(.L262-.L261)/2
 2822 0028 08       		.byte	(.L260-.L261)/2
 2823 0029 00       		.p2align 1
 2824              	.L260:
 319:src/console.c ****   case LASTX: // Last x via RCL L
 320:src/console.c ****     do_now (K11, 0); // RCL
 321:src/console.c ****     do_now (K_RELEASE,0); // release
 322:src/console.c ****     do_now (K15,0); // TAN key
 323:src/console.c ****     r.key_34s = K_RELEASE;
 324:src/console.c ****     r.shift = 0; // set up for release;
 325:src/console.c ****     break;
 326:src/console.c ****   case ONSTO: // flash_backup()
 327:src/console.c ****     flash_backup(OP_SAVE);
 328:src/console.c ****     reset_shift();
 329:src/console.c ****     r = no_key;
 330:src/console.c ****     break;
 331:src/console.c ****   case ONRCL: // flash_restore()
 332:src/console.c ****     flash_restore(OP_LOAD);
 333:src/console.c ****     reset_shift();
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
 336:src/console.c ****   case WRLIB: // save library file
 337:src/console.c ****     save_lib_file(1);
 338:src/console.c ****     reset_shift();
 339:src/console.c ****     r = no_key;
 340:src/console.c ****     break;
 341:src/console.c ****   case LLIB: // load library file
 342:src/console.c ****     load_lib_file(1);
 343:src/console.c ****     reset_shift();
 344:src/console.c ****     r = no_key;
 345:src/console.c ****     break;
 346:src/console.c ****   case WRTST: // save state file
 347:src/console.c ****     save_ram_file(1);
 348:src/console.c ****     reset_shift();
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case LDST:
 352:src/console.c ****     load_ram_file(1);
 353:src/console.c ****     reset_shift();
 354:src/console.c ****     r = no_key;
 355:src/console.c ****     break;
 356:src/console.c ****   case LDPRG:
 357:src/console.c ****     load_prog_file();
 358:src/console.c ****     reset_shift();
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case SVPRG:
ARM GAS  /tmp/ccgLZIWS.s 			page 77


 362:src/console.c ****     save_prog_file();
 363:src/console.c ****     reset_shift();
 364:src/console.c ****     r = no_key;
 365:src/console.c ****     break;
 366:src/console.c ****   case HELP:
 367:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 368:src/console.c ****     reset_shift();
 369:src/console.c ****     r = no_key;
 370:src/console.c ****     break;
 371:src/console.c ****   case DOTS:
 372:src/console.c ****     do_all_dots();
 373:src/console.c ****     reset_shift();
 374:src/console.c ****     r = no_key;
 375:src/console.c ****     break;
 376:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 377:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 378:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 379:src/console.c ****     r = no_key;
 380:src/console.c ****     break;
 381:src/console.c ****   case DEFMEN:
 382:src/console.c ****     toggle_default_menu();
 383:src/console.c ****     reset_shift();
 384:src/console.c ****     r = no_key;
 385:src/console.c ****     break;
 386:src/console.c ****   case SETUMEN:
 387:src/console.c ****     build_user_menu();
 388:src/console.c ****     reset_shift();
 389:src/console.c ****     r = no_key;;
 390:src/console.c ****     break;
 391:src/console.c ****   case KCPX:
 392:src/console.c ****     if (C_LOCKED) {
 2825              		.loc 2 392 5 is_stmt 1 view .LVU733
 2826              		.loc 2 392 9 is_stmt 0 view .LVU734
 2827 002a 4F4B     		ldr	r3, .L291
 2828 002c 1B68     		ldr	r3, [r3]
 2829 002e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 2830              		.loc 2 392 8 view .LVU735
 2831 0032 03F04103 		and	r3, r3, #65
 2832 0036 412B     		cmp	r3, #65
 2833 0038 40F08480 		bne	.L277
 393:src/console.c ****       set_menu(M_C_Lock);
 2834              		.loc 2 393 7 is_stmt 1 view .LVU736
 2835              	.LVL210:
 2836              	.LBB112:
 2837              	.LBI112:
 108:src/menu.c    ****   menu_name m = current_menu;
 2838              		.loc 1 108 6 view .LVU737
 2839              	.LBB113:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 2840              		.loc 1 109 3 view .LVU738
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 2841              		.loc 1 109 13 is_stmt 0 view .LVU739
 2842 003c 4B4A     		ldr	r2, .L291+4
 2843 003e 92F90030 		ldrsb	r3, [r2]
 2844              	.LVL211:
 110:src/menu.c    ****     current_menu = default_menu;
 2845              		.loc 1 110 3 is_stmt 1 view .LVU740
ARM GAS  /tmp/ccgLZIWS.s 			page 78


 110:src/menu.c    ****     current_menu = default_menu;
 2846              		.loc 1 110 6 is_stmt 0 view .LVU741
 2847 0042 112B     		cmp	r3, #17
 2848 0044 00F08A80 		beq	.L290
 113:src/menu.c    ****     current_menu = last_menu;
 2849              		.loc 1 113 8 is_stmt 1 view .LVU742
 117:src/menu.c    ****   }
 2850              		.loc 1 117 5 view .LVU743
 117:src/menu.c    ****   }
 2851              		.loc 1 117 18 is_stmt 0 view .LVU744
 2852 0048 1121     		movs	r1, #17
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 2853              		.loc 1 119 6 view .LVU745
 2854 004a 092B     		cmp	r3, #9
 117:src/menu.c    ****   }
 2855              		.loc 1 117 18 view .LVU746
 2856 004c 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 2857              		.loc 1 119 3 is_stmt 1 view .LVU747
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 2858              		.loc 1 119 6 is_stmt 0 view .LVU748
 2859 004e 02D0     		beq	.L280
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 2860              		.loc 1 119 23 view .LVU749
 2861 0050 102B     		cmp	r3, #16
 2862 0052 40F08680 		bne	.L279
 2863              	.L280:
 2864              	.LVL212:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 2865              		.loc 1 119 23 view .LVU750
 2866              	.LBE113:
 2867              	.LBE112:
 394:src/console.c ****       reset_shift();
 2868              		.loc 2 394 7 is_stmt 1 view .LVU751
 2869 0056 FFF7FEFF 		bl	reset_shift
 2870              	.LVL213:
 2871              		.loc 2 394 7 is_stmt 0 view .LVU752
 2872 005a 66E0     		b	.L259
 2873              	.LVL214:
 2874              	.L275:
 320:src/console.c ****     do_now (K_RELEASE,0); // release
 2875              		.loc 2 320 5 is_stmt 1 view .LVU753
 2876              	.LBB115:
 2877              	.LBI115:
 310:src/console.c ****   struct _ndmap temp;
 2878              		.loc 2 310 6 view .LVU754
 2879              	.LBB116:
 311:src/console.c ****   temp.key_34s = key;
 2880              		.loc 2 311 3 view .LVU755
 312:src/console.c ****   temp.shift = shift;
 2881              		.loc 2 312 3 view .LVU756
 312:src/console.c ****   temp.shift = shift;
 2882              		.loc 2 312 16 is_stmt 0 view .LVU757
 2883 005c 0723     		movs	r3, #7
 313:src/console.c ****   process_keycode_with_shift (temp);
 2884              		.loc 2 313 14 view .LVU758
 2885 005e 0026     		movs	r6, #0
ARM GAS  /tmp/ccgLZIWS.s 			page 79


 312:src/console.c ****   temp.shift = shift;
 2886              		.loc 2 312 16 view .LVU759
 2887 0060 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 2888              		.loc 2 313 3 is_stmt 1 view .LVU760
 314:src/console.c **** }
 2889              		.loc 2 314 3 is_stmt 0 view .LVU761
 2890 0064 0DF10808 		add	r8, sp, #8
 313:src/console.c ****   process_keycode_with_shift (temp);
 2891              		.loc 2 313 14 view .LVU762
 2892 0068 0396     		str	r6, [sp, #12]
 314:src/console.c **** }
 2893              		.loc 2 314 3 is_stmt 1 view .LVU763
 2894 006a 98E80300 		ldm	r8, {r0, r1}
 2895              	.LVL215:
 314:src/console.c **** }
 2896              		.loc 2 314 3 is_stmt 0 view .LVU764
 2897              	.LBE116:
 2898              	.LBE115:
 2899              	.LBB118:
 2900              	.LBB119:
 312:src/console.c ****   temp.shift = shift;
 2901              		.loc 2 312 16 view .LVU765
 2902 006e 6327     		movs	r7, #99
 2903              	.LBE119:
 2904              	.LBE118:
 2905              	.LBB121:
 2906              	.LBB117:
 314:src/console.c **** }
 2907              		.loc 2 314 3 view .LVU766
 2908 0070 FFF7FEFF 		bl	process_keycode_with_shift
 2909              	.LVL216:
 314:src/console.c **** }
 2910              		.loc 2 314 3 view .LVU767
 2911              	.LBE117:
 2912              	.LBE121:
 321:src/console.c ****     do_now (K15,0); // TAN key
 2913              		.loc 2 321 5 is_stmt 1 view .LVU768
 2914              	.LBB122:
 2915              	.LBI118:
 310:src/console.c ****   struct _ndmap temp;
 2916              		.loc 2 310 6 view .LVU769
 2917              	.LBB120:
 311:src/console.c ****   temp.key_34s = key;
 2918              		.loc 2 311 3 view .LVU770
 312:src/console.c ****   temp.shift = shift;
 2919              		.loc 2 312 3 view .LVU771
 313:src/console.c ****   process_keycode_with_shift (temp);
 2920              		.loc 2 313 14 is_stmt 0 view .LVU772
 2921 0074 0396     		str	r6, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 2922              		.loc 2 312 16 view .LVU773
 2923 0076 8DF80870 		strb	r7, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 2924              		.loc 2 313 3 is_stmt 1 view .LVU774
 314:src/console.c **** }
 2925              		.loc 2 314 3 view .LVU775
ARM GAS  /tmp/ccgLZIWS.s 			page 80


 2926 007a 98E80300 		ldm	r8, {r0, r1}
 2927 007e FFF7FEFF 		bl	process_keycode_with_shift
 2928              	.LVL217:
 314:src/console.c **** }
 2929              		.loc 2 314 3 is_stmt 0 view .LVU776
 2930              	.LBE120:
 2931              	.LBE122:
 322:src/console.c ****     r.key_34s = K_RELEASE;
 2932              		.loc 2 322 5 is_stmt 1 view .LVU777
 2933              	.LBB123:
 2934              	.LBI123:
 310:src/console.c ****   struct _ndmap temp;
 2935              		.loc 2 310 6 view .LVU778
 2936              	.LBB124:
 311:src/console.c ****   temp.key_34s = key;
 2937              		.loc 2 311 3 view .LVU779
 312:src/console.c ****   temp.shift = shift;
 2938              		.loc 2 312 3 view .LVU780
 312:src/console.c ****   temp.shift = shift;
 2939              		.loc 2 312 16 is_stmt 0 view .LVU781
 2940 0082 0B23     		movs	r3, #11
 2941 0084 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 2942              		.loc 2 313 3 is_stmt 1 view .LVU782
 314:src/console.c **** }
 2943              		.loc 2 314 3 view .LVU783
 313:src/console.c ****   process_keycode_with_shift (temp);
 2944              		.loc 2 313 14 is_stmt 0 view .LVU784
 2945 0088 0396     		str	r6, [sp, #12]
 314:src/console.c **** }
 2946              		.loc 2 314 3 view .LVU785
 2947 008a 98E80300 		ldm	r8, {r0, r1}
 2948 008e FFF7FEFF 		bl	process_keycode_with_shift
 2949              	.LVL218:
 314:src/console.c **** }
 2950              		.loc 2 314 3 view .LVU786
 2951              	.LBE124:
 2952              	.LBE123:
 323:src/console.c ****     r.shift = 0; // set up for release;
 2953              		.loc 2 323 5 is_stmt 1 view .LVU787
 324:src/console.c ****     break;
 2954              		.loc 2 324 5 view .LVU788
 325:src/console.c ****   case ONSTO: // flash_backup()
 2955              		.loc 2 325 5 view .LVU789
 324:src/console.c ****     break;
 2956              		.loc 2 324 13 is_stmt 0 view .LVU790
 2957 0092 3146     		mov	r1, r6
 323:src/console.c ****     r.shift = 0; // set up for release;
 2958              		.loc 2 323 15 view .LVU791
 2959 0094 3B46     		mov	r3, r7
 2960              	.LVL219:
 2961              	.L276:
 395:src/console.c ****     }
 396:src/console.c ****     else {
 397:src/console.c ****       do_now (K_CMPLX, 0);
 398:src/console.c ****       do_now (K_RELEASE, 0);
 399:src/console.c ****       r = no_key;
ARM GAS  /tmp/ccgLZIWS.s 			page 81


 400:src/console.c ****     }
 401:src/console.c ****   default:
 402:src/console.c ****     r = no_key;
 403:src/console.c ****   }
 404:src/console.c ****   return r;
 2962              		.loc 2 404 3 is_stmt 1 view .LVU792
 2963              		.loc 2 404 10 is_stmt 0 view .LVU793
 2964 0096 8DF80030 		strb	r3, [sp]
 2965 009a 0191     		str	r1, [sp, #4]
 2966 009c 94E80300 		ldm	r4, {r0, r1}
 2967              	.LVL220:
 2968              		.loc 2 404 10 view .LVU794
 2969 00a0 85E80300 		stm	r5, {r0, r1}
 405:src/console.c **** }
 2970              		.loc 2 405 1 view .LVU795
 2971 00a4 2846     		mov	r0, r5
 2972 00a6 04B0     		add	sp, sp, #16
 2973              		.cfi_remember_state
 2974              		.cfi_def_cfa_offset 24
 2975              		@ sp needed
 2976 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2977              	.LVL221:
 2978              	.L274:
 2979              		.cfi_restore_state
 327:src/console.c ****     reset_shift();
 2980              		.loc 2 327 5 is_stmt 1 view .LVU796
 2981 00ac AD20     		movs	r0, #173
 2982              	.LVL222:
 327:src/console.c ****     reset_shift();
 2983              		.loc 2 327 5 is_stmt 0 view .LVU797
 2984 00ae FFF7FEFF 		bl	flash_backup
 2985              	.LVL223:
 328:src/console.c ****     r = no_key;
 2986              		.loc 2 328 5 is_stmt 1 view .LVU798
 2987              	.L288:
 333:src/console.c ****     r = no_key;
 2988              		.loc 2 333 5 view .LVU799
 2989 00b2 FFF7FEFF 		bl	reset_shift
 2990              	.LVL224:
 334:src/console.c ****     break;
 2991              		.loc 2 334 5 view .LVU800
 334:src/console.c ****     break;
 2992              		.loc 2 334 7 is_stmt 0 view .LVU801
 2993 00b6 2E4B     		ldr	r3, .L291+8
 2994 00b8 93E80300 		ldm	r3, {r0, r1}
 2995 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2996              	.LVL225:
 335:src/console.c ****   case WRLIB: // save library file
 2997              		.loc 2 335 5 is_stmt 1 view .LVU802
 334:src/console.c ****     break;
 2998              		.loc 2 334 7 is_stmt 0 view .LVU803
 2999 00be 84E80300 		stm	r4, {r0, r1}
 335:src/console.c ****   case WRLIB: // save library file
 3000              		.loc 2 335 5 view .LVU804
 3001 00c2 E8E7     		b	.L276
 3002              	.LVL226:
 3003              	.L273:
ARM GAS  /tmp/ccgLZIWS.s 			page 82


 332:src/console.c ****     reset_shift();
 3004              		.loc 2 332 5 is_stmt 1 view .LVU805
 3005 00c4 AE20     		movs	r0, #174
 3006              	.LVL227:
 332:src/console.c ****     reset_shift();
 3007              		.loc 2 332 5 is_stmt 0 view .LVU806
 3008 00c6 FFF7FEFF 		bl	flash_restore
 3009              	.LVL228:
 3010 00ca F2E7     		b	.L288
 3011              	.LVL229:
 3012              	.L272:
 337:src/console.c ****     reset_shift();
 3013              		.loc 2 337 5 is_stmt 1 view .LVU807
 3014 00cc 0120     		movs	r0, #1
 3015              	.LVL230:
 337:src/console.c ****     reset_shift();
 3016              		.loc 2 337 5 is_stmt 0 view .LVU808
 3017 00ce FFF7FEFF 		bl	save_lib_file
 3018              	.LVL231:
 338:src/console.c ****     r = no_key;
 3019              		.loc 2 338 5 is_stmt 1 view .LVU809
 3020 00d2 EEE7     		b	.L288
 3021              	.LVL232:
 3022              	.L271:
 342:src/console.c ****     reset_shift();
 3023              		.loc 2 342 5 view .LVU810
 3024 00d4 0120     		movs	r0, #1
 3025              	.LVL233:
 342:src/console.c ****     reset_shift();
 3026              		.loc 2 342 5 is_stmt 0 view .LVU811
 3027 00d6 FFF7FEFF 		bl	load_lib_file
 3028              	.LVL234:
 343:src/console.c ****     r = no_key;
 3029              		.loc 2 343 5 is_stmt 1 view .LVU812
 3030 00da EAE7     		b	.L288
 3031              	.LVL235:
 3032              	.L270:
 347:src/console.c ****     reset_shift();
 3033              		.loc 2 347 5 view .LVU813
 3034 00dc 0120     		movs	r0, #1
 3035              	.LVL236:
 347:src/console.c ****     reset_shift();
 3036              		.loc 2 347 5 is_stmt 0 view .LVU814
 3037 00de FFF7FEFF 		bl	save_ram_file
 3038              	.LVL237:
 348:src/console.c ****     r = no_key;
 3039              		.loc 2 348 5 is_stmt 1 view .LVU815
 3040 00e2 E6E7     		b	.L288
 3041              	.LVL238:
 3042              	.L269:
 352:src/console.c ****     reset_shift();
 3043              		.loc 2 352 5 view .LVU816
 3044 00e4 0120     		movs	r0, #1
 3045              	.LVL239:
 352:src/console.c ****     reset_shift();
 3046              		.loc 2 352 5 is_stmt 0 view .LVU817
 3047 00e6 FFF7FEFF 		bl	load_ram_file
ARM GAS  /tmp/ccgLZIWS.s 			page 83


 3048              	.LVL240:
 353:src/console.c ****     r = no_key;
 3049              		.loc 2 353 5 is_stmt 1 view .LVU818
 3050 00ea E2E7     		b	.L288
 3051              	.LVL241:
 3052              	.L268:
 357:src/console.c ****     reset_shift();
 3053              		.loc 2 357 5 view .LVU819
 3054 00ec FFF7FEFF 		bl	load_prog_file
 3055              	.LVL242:
 358:src/console.c ****     r = no_key;
 3056              		.loc 2 358 5 view .LVU820
 3057 00f0 DFE7     		b	.L288
 3058              	.LVL243:
 3059              	.L267:
 367:src/console.c ****     reset_shift();
 3060              		.loc 2 367 5 view .LVU821
 3061 00f2 204B     		ldr	r3, .L291+12
 3062 00f4 2048     		ldr	r0, .L291+16
 3063              	.LVL244:
 367:src/console.c ****     reset_shift();
 3064              		.loc 2 367 5 is_stmt 0 view .LVU822
 3065 00f6 9847     		blx	r3
 3066              	.LVL245:
 368:src/console.c ****     r = no_key;
 3067              		.loc 2 368 5 is_stmt 1 view .LVU823
 3068 00f8 DBE7     		b	.L288
 3069              	.LVL246:
 3070              	.L266:
 362:src/console.c ****     reset_shift();
 3071              		.loc 2 362 5 view .LVU824
 3072 00fa FFF7FEFF 		bl	save_prog_file
 3073              	.LVL247:
 363:src/console.c ****     r = no_key;
 3074              		.loc 2 363 5 view .LVU825
 3075 00fe D8E7     		b	.L288
 3076              	.LVL248:
 3077              	.L265:
 372:src/console.c ****     reset_shift();
 3078              		.loc 2 372 5 view .LVU826
 3079 0100 FFF7FEFF 		bl	do_all_dots
 3080              	.LVL249:
 373:src/console.c ****     r = no_key;
 3081              		.loc 2 373 5 view .LVU827
 3082 0104 D5E7     		b	.L288
 3083              	.LVL250:
 3084              	.L264:
 377:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 3085              		.loc 2 377 5 view .LVU828
 3086              	.LBB125:
 3087              	.LBI125:
 310:src/console.c ****   struct _ndmap temp;
 3088              		.loc 2 310 6 view .LVU829
 3089              	.LBB126:
 311:src/console.c ****   temp.key_34s = key;
 3090              		.loc 2 311 3 view .LVU830
 312:src/console.c ****   temp.shift = shift;
ARM GAS  /tmp/ccgLZIWS.s 			page 84


 3091              		.loc 2 312 3 view .LVU831
 312:src/console.c ****   temp.shift = shift;
 3092              		.loc 2 312 16 is_stmt 0 view .LVU832
 3093 0106 6323     		movs	r3, #99
 313:src/console.c ****   process_keycode_with_shift (temp);
 3094              		.loc 2 313 14 view .LVU833
 3095 0108 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3096              		.loc 2 312 16 view .LVU834
 3097 010a 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3098              		.loc 2 313 3 is_stmt 1 view .LVU835
 313:src/console.c ****   process_keycode_with_shift (temp);
 3099              		.loc 2 313 14 is_stmt 0 view .LVU836
 3100 010e 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3101              		.loc 2 314 3 is_stmt 1 view .LVU837
 3102 0110 02AE     		add	r6, sp, #8
 3103 0112 96E80300 		ldm	r6, {r0, r1}
 3104              	.LVL251:
 314:src/console.c **** }
 3105              		.loc 2 314 3 is_stmt 0 view .LVU838
 3106 0116 FFF7FEFF 		bl	process_keycode_with_shift
 3107              	.LVL252:
 314:src/console.c **** }
 3108              		.loc 2 314 3 view .LVU839
 3109              	.LBE126:
 3110              	.LBE125:
 378:src/console.c ****     r = no_key;
 3111              		.loc 2 378 5 is_stmt 1 view .LVU840
 3112              	.LBB127:
 3113              	.LBI127:
 310:src/console.c ****   struct _ndmap temp;
 3114              		.loc 2 310 6 view .LVU841
 3115              	.LBB128:
 311:src/console.c ****   temp.key_34s = key;
 3116              		.loc 2 311 3 view .LVU842
 312:src/console.c ****   temp.shift = shift;
 3117              		.loc 2 312 3 view .LVU843
 312:src/console.c ****   temp.shift = shift;
 3118              		.loc 2 312 16 is_stmt 0 view .LVU844
 3119 011a 3323     		movs	r3, #51
 3120              	.LVL253:
 3121              	.L289:
 312:src/console.c ****   temp.shift = shift;
 3122              		.loc 2 312 16 view .LVU845
 3123              	.LBE128:
 3124              	.LBE127:
 3125              	.LBB129:
 3126              	.LBB130:
 313:src/console.c ****   process_keycode_with_shift (temp);
 3127              		.loc 2 313 14 view .LVU846
 3128 011c 0397     		str	r7, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 3129              		.loc 2 312 16 view .LVU847
 3130 011e 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
ARM GAS  /tmp/ccgLZIWS.s 			page 85


 3131              		.loc 2 313 3 is_stmt 1 view .LVU848
 314:src/console.c **** }
 3132              		.loc 2 314 3 view .LVU849
 3133 0122 96E80300 		ldm	r6, {r0, r1}
 3134 0126 FFF7FEFF 		bl	process_keycode_with_shift
 3135              	.LVL254:
 3136              	.LBE130:
 3137              	.LBE129:
 399:src/console.c ****     }
 3138              		.loc 2 399 7 view .LVU850
 3139              	.L259:
 402:src/console.c ****   }
 3140              		.loc 2 402 5 view .LVU851
 402:src/console.c ****   }
 3141              		.loc 2 402 7 is_stmt 0 view .LVU852
 3142 012a 114B     		ldr	r3, .L291+8
 3143 012c 93E80300 		ldm	r3, {r0, r1}
 3144 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3145              	.LVL255:
 402:src/console.c ****   }
 3146              		.loc 2 402 7 view .LVU853
 3147 0132 84E80300 		stm	r4, {r0, r1}
 3148 0136 AEE7     		b	.L276
 3149              	.LVL256:
 3150              	.L263:
 382:src/console.c ****     reset_shift();
 3151              		.loc 2 382 5 is_stmt 1 view .LVU854
 3152 0138 FFF7FEFF 		bl	toggle_default_menu
 3153              	.LVL257:
 383:src/console.c ****     r = no_key;
 3154              		.loc 2 383 5 view .LVU855
 3155 013c B9E7     		b	.L288
 3156              	.LVL258:
 3157              	.L262:
 387:src/console.c ****     reset_shift();
 3158              		.loc 2 387 5 view .LVU856
 3159 013e FFF7FEFF 		bl	build_user_menu
 3160              	.LVL259:
 388:src/console.c ****     r = no_key;;
 3161              		.loc 2 388 5 view .LVU857
 3162 0142 B6E7     		b	.L288
 3163              	.LVL260:
 3164              	.L277:
 397:src/console.c ****       do_now (K_RELEASE, 0);
 3165              		.loc 2 397 7 view .LVU858
 3166              	.LBB132:
 3167              	.LBI132:
 310:src/console.c ****   struct _ndmap temp;
 3168              		.loc 2 310 6 view .LVU859
 3169              	.LBB133:
 311:src/console.c ****   temp.key_34s = key;
 3170              		.loc 2 311 3 view .LVU860
 312:src/console.c ****   temp.shift = shift;
 3171              		.loc 2 312 3 view .LVU861
 312:src/console.c ****   temp.shift = shift;
 3172              		.loc 2 312 16 is_stmt 0 view .LVU862
 3173 0144 2D23     		movs	r3, #45
ARM GAS  /tmp/ccgLZIWS.s 			page 86


 313:src/console.c ****   process_keycode_with_shift (temp);
 3174              		.loc 2 313 14 view .LVU863
 3175 0146 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3176              		.loc 2 312 16 view .LVU864
 3177 0148 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3178              		.loc 2 313 3 is_stmt 1 view .LVU865
 313:src/console.c ****   process_keycode_with_shift (temp);
 3179              		.loc 2 313 14 is_stmt 0 view .LVU866
 3180 014c 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3181              		.loc 2 314 3 is_stmt 1 view .LVU867
 3182 014e 02AE     		add	r6, sp, #8
 3183 0150 96E80300 		ldm	r6, {r0, r1}
 3184              	.LVL261:
 314:src/console.c **** }
 3185              		.loc 2 314 3 is_stmt 0 view .LVU868
 3186 0154 FFF7FEFF 		bl	process_keycode_with_shift
 3187              	.LVL262:
 314:src/console.c **** }
 3188              		.loc 2 314 3 view .LVU869
 3189              	.LBE133:
 3190              	.LBE132:
 398:src/console.c ****       r = no_key;
 3191              		.loc 2 398 7 is_stmt 1 view .LVU870
 3192              	.LBB134:
 3193              	.LBI129:
 310:src/console.c ****   struct _ndmap temp;
 3194              		.loc 2 310 6 view .LVU871
 3195              	.LBB131:
 311:src/console.c ****   temp.key_34s = key;
 3196              		.loc 2 311 3 view .LVU872
 312:src/console.c ****   temp.shift = shift;
 3197              		.loc 2 312 3 view .LVU873
 312:src/console.c ****   temp.shift = shift;
 3198              		.loc 2 312 16 is_stmt 0 view .LVU874
 3199 0158 6323     		movs	r3, #99
 3200 015a DFE7     		b	.L289
 3201              	.LVL263:
 3202              	.L290:
 312:src/console.c ****   temp.shift = shift;
 3203              		.loc 2 312 16 view .LVU875
 3204              	.LBE131:
 3205              	.LBE134:
 3206              	.LBB135:
 3207              	.LBB114:
 111:src/menu.c    ****   }
 3208              		.loc 1 111 5 is_stmt 1 view .LVU876
 111:src/menu.c    ****   }
 3209              		.loc 1 111 18 is_stmt 0 view .LVU877
 3210 015c 0749     		ldr	r1, .L291+20
 3211 015e 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3212 0160 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3213              		.loc 1 119 3 is_stmt 1 view .LVU878
 3214              	.L279:
ARM GAS  /tmp/ccgLZIWS.s 			page 87


 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3215              		.loc 1 119 43 view .LVU879
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3216              		.loc 1 119 53 is_stmt 0 view .LVU880
 3217 0162 074A     		ldr	r2, .L291+24
 3218 0164 1370     		strb	r3, [r2]
 3219 0166 76E7     		b	.L280
 3220              	.L292:
 3221              		.align	2
 3222              	.L291:
 3223 0168 00000000 		.word	main_ram
 3224 016c 00000000 		.word	.LANCHOR1
 3225 0170 00000000 		.word	.LANCHOR10
 3226 0174 49040008 		.word	134218825
 3227 0178 00000000 		.word	.LC11
 3228 017c 00000000 		.word	.LANCHOR2
 3229 0180 00000000 		.word	.LANCHOR3
 3230              	.LBE114:
 3231              	.LBE135:
 3232              		.cfi_endproc
 3233              	.LFE31:
 3235              		.section	.text.program_main,"ax",%progbits
 3236              		.align	1
 3237              		.p2align 2,,3
 3238              		.global	program_main
 3239              		.syntax unified
 3240              		.thumb
 3241              		.thumb_func
 3242              		.fpu fpv4-sp-d16
 3244              	program_main:
 3245              	.LFB32:
 406:src/console.c **** 
 407:src/console.c **** void program_main(){
 3246              		.loc 2 407 20 is_stmt 1 view -0
 3247              		.cfi_startproc
 3248              		@ args = 0, pretend = 0, frame = 224
 3249              		@ frame_needed = 0, uses_anonymous_args = 0
 408:src/console.c ****   int c;
 3250              		.loc 2 408 3 view .LVU882
 409:src/console.c ****   struct _ndmap remapped;
 3251              		.loc 2 409 3 view .LVU883
 410:src/console.c **** 
 411:src/console.c ****   init_mem();
 3252              		.loc 2 411 3 view .LVU884
 407:src/console.c ****   int c;
 3253              		.loc 2 407 20 is_stmt 0 view .LVU885
 3254 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3255              		.cfi_def_cfa_offset 32
 3256              		.cfi_offset 4, -32
 3257              		.cfi_offset 5, -28
 3258              		.cfi_offset 6, -24
 3259              		.cfi_offset 7, -20
 3260              		.cfi_offset 8, -16
 3261              		.cfi_offset 9, -12
 3262              		.cfi_offset 10, -8
 3263              		.cfi_offset 14, -4
 3264 0004 B8B0     		sub	sp, sp, #224
ARM GAS  /tmp/ccgLZIWS.s 			page 88


 3265              		.cfi_def_cfa_offset 256
 3266              		.loc 2 411 3 view .LVU886
 3267 0006 FFF7FEFF 		bl	init_mem
 3268              	.LVL264:
 412:src/console.c ****   init_RegionTab();
 3269              		.loc 2 412 3 is_stmt 1 view .LVU887
 3270 000a FFF7FEFF 		bl	init_RegionTab
 3271              	.LVL265:
 413:src/console.c ****   init_34s();
 3272              		.loc 2 413 3 view .LVU888
 3273 000e FFF7FEFF 		bl	init_34s
 3274              	.LVL266:
 414:src/console.c ****   State2.flags = 1;  
 3275              		.loc 2 414 3 view .LVU889
 3276              		.loc 2 414 16 is_stmt 0 view .LVU890
 3277 0012 B34A     		ldr	r2, .L394
 3278 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3279 0016 43F00103 		orr	r3, r3, #1
 3280 001a 1376     		strb	r3, [r2, #24]
 415:src/console.c ****   check_create_wp34sdir();
 3281              		.loc 2 415 3 is_stmt 1 view .LVU891
 3282 001c FFF7FEFF 		bl	check_create_wp34sdir
 3283              	.LVL267:
 416:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3284              		.loc 2 416 3 view .LVU892
 3285              		.loc 2 416 8 is_stmt 0 view .LVU893
 3286 0020 0020     		movs	r0, #0
 3287 0022 FFF7FEFF 		bl	load_ram_file
 3288              	.LVL268:
 3289              		.loc 2 416 6 view .LVU894
 3290 0026 08B9     		cbnz	r0, .L294
 3291              		.loc 2 416 26 is_stmt 1 discriminator 1 view .LVU895
 3292              		.loc 2 416 34 is_stmt 0 discriminator 1 view .LVU896
 3293 0028 AE4B     		ldr	r3, .L394+4
 3294 002a 1860     		str	r0, [r3]
 3295              	.L294:
 417:src/console.c ****   load_backup_file(0);
 3296              		.loc 2 417 3 is_stmt 1 view .LVU897
 418:src/console.c ****   load_lib_file(0);
 419:src/console.c ****   t20->newln = 0;
 3297              		.loc 2 419 3 is_stmt 0 view .LVU898
 3298 002c AE4C     		ldr	r4, .L394+8
 3299 002e AF4E     		ldr	r6, .L394+12
 420:src/console.c ****   t20->lnfill = 0;
 421:src/console.c ****   t20->fixed = 1;
 422:src/console.c ****   t20->xspc = -2;
 423:src/console.c ****   t20->bgfill = 0;
 424:src/console.c ****   run_menu_item_app = run_menu_item;
 425:src/console.c ****   menu_line_str_app = menu_line_str;
 426:src/console.c **** 
 427:src/console.c ****   display();
 428:src/console.c ****   display_current_menu();
 429:src/console.c ****   lcd_refresh();
 430:src/console.c ****   JustDisplayed = 0;
 431:src/console.c ****   /*
 432:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 433:src/console.c ****     Sleeps peacefully while waiting for a key.
ARM GAS  /tmp/ccgLZIWS.s 			page 89


 434:src/console.c ****     Handles (in principle!) turning off and on.
 435:src/console.c ****     =================
 436:src/console.c ****     Main event loop
 437:src/console.c ****     =================
 438:src/console.c **** 
 439:src/console.c ****     Status flags:
 440:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 441:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 442:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 443:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 444:src/console.c ****   */
 445:src/console.c ****   for(;;) {
 446:src/console.c **** 
 447:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 448:src/console.c ****       {
 449:src/console.c **** 	CLR_ST(STAT_RUNNING);
 450:src/console.c **** 	sys_sleep();
 451:src/console.c ****       }
 452:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 3300              		.loc 2 452 35 view .LVU899
 3301 0030 AF4F     		ldr	r7, .L394+16
 453:src/console.c ****     {
 454:src/console.c ****       CLR_ST(STAT_RUNNING);
 455:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3302              		.loc 2 455 7 view .LVU900
 3303 0032 DFF83083 		ldr	r8, .L394+132
 417:src/console.c ****   load_lib_file(0);
 3304              		.loc 2 417 3 view .LVU901
 3305 0036 0020     		movs	r0, #0
 3306 0038 FFF7FEFF 		bl	load_backup_file
 3307              	.LVL269:
 418:src/console.c ****   t20->newln = 0;
 3308              		.loc 2 418 3 is_stmt 1 view .LVU902
 3309 003c 0020     		movs	r0, #0
 3310 003e FFF7FEFF 		bl	load_lib_file
 3311              	.LVL270:
 419:src/console.c ****   t20->lnfill = 0;
 3312              		.loc 2 419 3 view .LVU903
 3313 0042 236B     		ldr	r3, [r4, #48]
 420:src/console.c ****   t20->fixed = 1;
 3314              		.loc 2 420 3 view .LVU904
 421:src/console.c ****   t20->xspc = -2;
 3315              		.loc 2 421 3 view .LVU905
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3316              		.loc 2 424 21 is_stmt 0 view .LVU906
 3317 0044 AB4A     		ldr	r2, .L394+20
 421:src/console.c ****   t20->xspc = -2;
 3318              		.loc 2 421 14 view .LVU907
 3319 0046 0121     		movs	r1, #1
 3320 0048 1974     		strb	r1, [r3, #16]
 422:src/console.c ****   t20->bgfill = 0;
 3321              		.loc 2 422 3 is_stmt 1 view .LVU908
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3322              		.loc 2 423 15 is_stmt 0 view .LVU909
 3323 004a 0025     		movs	r5, #0
 422:src/console.c ****   t20->bgfill = 0;
 3324              		.loc 2 422 13 view .LVU910
ARM GAS  /tmp/ccgLZIWS.s 			page 90


 3325 004c FE21     		movs	r1, #254
 3326 004e 9973     		strb	r1, [r3, #14]
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3327              		.loc 2 423 3 is_stmt 1 view .LVU911
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3328              		.loc 2 423 15 is_stmt 0 view .LVU912
 3329 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 419:src/console.c ****   t20->lnfill = 0;
 3330              		.loc 2 419 14 view .LVU913
 3331 0052 1D75     		strb	r5, [r3, #20]
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3332              		.loc 2 424 3 is_stmt 1 view .LVU914
 425:src/console.c **** 
 3333              		.loc 2 425 21 is_stmt 0 view .LVU915
 3334 0054 A84B     		ldr	r3, .L394+24
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3335              		.loc 2 424 21 view .LVU916
 3336 0056 E260     		str	r2, [r4, #12]
 425:src/console.c **** 
 3337              		.loc 2 425 3 is_stmt 1 view .LVU917
 425:src/console.c **** 
 3338              		.loc 2 425 21 is_stmt 0 view .LVU918
 3339 0058 2361     		str	r3, [r4, #16]
 427:src/console.c ****   display_current_menu();
 3340              		.loc 2 427 3 is_stmt 1 view .LVU919
 3341 005a FFF7FEFF 		bl	display
 3342              	.LVL271:
 428:src/console.c ****   lcd_refresh();
 3343              		.loc 2 428 3 view .LVU920
 3344 005e FFF7FEFF 		bl	display_current_menu
 3345              	.LVL272:
 429:src/console.c ****   JustDisplayed = 0;
 3346              		.loc 2 429 3 view .LVU921
 3347 0062 A64B     		ldr	r3, .L394+28
 3348 0064 9847     		blx	r3
 3349              	.LVL273:
 430:src/console.c ****   /*
 3350              		.loc 2 430 3 view .LVU922
 430:src/console.c ****   /*
 3351              		.loc 2 430 17 is_stmt 0 view .LVU923
 3352 0066 A64B     		ldr	r3, .L394+32
 3353 0068 1D60     		str	r5, [r3]
 3354              	.L295:
 445:src/console.c **** 
 3355              		.loc 2 445 3 is_stmt 1 view .LVU924
 447:src/console.c ****       {
 3356              		.loc 2 447 5 view .LVU925
 447:src/console.c ****       {
 3357              		.loc 2 447 10 is_stmt 0 view .LVU926
 3358 006a 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3359              		.loc 2 447 8 view .LVU927
 3360 006c 9B05     		lsls	r3, r3, #22
 3361 006e 40F1BE80 		bpl	.L296
 447:src/console.c ****       {
 3362              		.loc 2 447 30 discriminator 1 view .LVU928
 3363 0072 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccgLZIWS.s 			page 91


 447:src/console.c ****       {
 3364              		.loc 2 447 27 discriminator 1 view .LVU929
 3365 0074 5D07     		lsls	r5, r3, #29
 3366 0076 40F1BA80 		bpl	.L296
 449:src/console.c **** 	sys_sleep();
 3367              		.loc 2 449 2 is_stmt 1 view .LVU930
 3368 007a 2368     		ldr	r3, [r4]
 450:src/console.c ****       }
 3369              		.loc 2 450 2 is_stmt 0 view .LVU931
 3370 007c A14A     		ldr	r2, .L394+36
 449:src/console.c **** 	sys_sleep();
 3371              		.loc 2 449 2 view .LVU932
 3372 007e 23F00203 		bic	r3, r3, #2
 3373 0082 2360     		str	r3, [r4]
 450:src/console.c ****       }
 3374              		.loc 2 450 2 is_stmt 1 view .LVU933
 3375 0084 9047     		blx	r2
 3376              	.LVL274:
 3377              	.L297:
 456:src/console.c ****       sys_sleep();
 457:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 458:src/console.c **** 	key_push (K_HEARTBEAT);
 459:src/console.c **** 	if (Pause > 0) Pause--;
 460:src/console.c ****       }
 461:src/console.c ****       sys_timer_disable(0); // stop timer
 462:src/console.c ****     }
 463:src/console.c ****     
 464:src/console.c ****     // Wakeup in off state or going to sleep
 465:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3378              		.loc 2 465 5 view .LVU934
 3379              		.loc 2 465 9 is_stmt 0 view .LVU935
 3380 0086 2368     		ldr	r3, [r4]
 3381              		.loc 2 465 8 view .LVU936
 3382 0088 9805     		lsls	r0, r3, #22
 3383 008a 00F1D780 		bmi	.L303
 3384              	.L389:
 3385              		.loc 2 465 29 discriminator 1 view .LVU937
 3386 008e 2368     		ldr	r3, [r4]
 3387              		.loc 2 465 26 discriminator 1 view .LVU938
 3388 0090 5907     		lsls	r1, r3, #29
 3389 0092 00F1D380 		bmi	.L303
 466:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 467:src/console.c ****         // Going to off mode
 468:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 469:src/console.c ****         draw_power_off_image(1);
 470:src/console.c **** 
 471:src/console.c ****         LCD_power_off(0);
 472:src/console.c ****         SET_ST(STAT_SUSPENDED);
 473:src/console.c ****         SET_ST(STAT_OFF);
 474:src/console.c ****       }
 475:src/console.c ****       // Already in OFF -> just continue to sleep above
 476:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 477:src/console.c ****       // thus reaching the sleep()
 478:src/console.c ****     }
 479:src/console.c **** 
 480:src/console.c ****     // Well, we are woken-up
 481:src/console.c ****     SET_ST(STAT_RUNNING);
ARM GAS  /tmp/ccgLZIWS.s 			page 92


 3390              		.loc 2 481 5 is_stmt 1 view .LVU939
 3391 0096 2368     		ldr	r3, [r4]
 3392 0098 43F00203 		orr	r3, r3, #2
 3393 009c 2360     		str	r3, [r4]
 482:src/console.c **** 
 483:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 484:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3394              		.loc 2 484 5 view .LVU940
 3395 009e 2368     		ldr	r3, [r4]
 3396 00a0 23F00403 		bic	r3, r3, #4
 3397 00a4 2360     		str	r3, [r4]
 485:src/console.c **** 
 486:src/console.c ****     // Get up from OFF state
 487:src/console.c ****     if ( ST(STAT_OFF) ) {
 3398              		.loc 2 487 5 view .LVU941
 3399              		.loc 2 487 10 is_stmt 0 view .LVU942
 3400 00a6 2368     		ldr	r3, [r4]
 3401              		.loc 2 487 8 view .LVU943
 3402 00a8 DA06     		lsls	r2, r3, #27
 3403 00aa 0ED5     		bpl	.L308
 488:src/console.c ****       LCD_power_on();
 3404              		.loc 2 488 7 is_stmt 1 view .LVU944
 3405 00ac 964B     		ldr	r3, .L394+40
 3406 00ae 9847     		blx	r3
 3407              	.LVL275:
 489:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3408              		.loc 2 489 7 view .LVU945
 3409 00b0 964B     		ldr	r3, .L394+44
 3410 00b2 9847     		blx	r3
 3411              	.LVL276:
 490:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3412              		.loc 2 490 7 view .LVU946
 3413 00b4 964B     		ldr	r3, .L394+48
 3414 00b6 9847     		blx	r3
 3415              	.LVL277:
 491:src/console.c **** 
 492:src/console.c ****       CLR_ST(STAT_OFF);
 3416              		.loc 2 492 7 view .LVU947
 3417 00b8 2368     		ldr	r3, [r4]
 493:src/console.c **** 
 494:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3418              		.loc 2 494 13 is_stmt 0 view .LVU948
 3419 00ba 964A     		ldr	r2, .L394+52
 492:src/console.c **** 
 3420              		.loc 2 492 7 view .LVU949
 3421 00bc 23F01003 		bic	r3, r3, #16
 3422 00c0 2360     		str	r3, [r4]
 3423              		.loc 2 494 7 is_stmt 1 view .LVU950
 3424              		.loc 2 494 13 is_stmt 0 view .LVU951
 3425 00c2 9047     		blx	r2
 3426              	.LVL278:
 3427              		.loc 2 494 10 view .LVU952
 3428 00c4 08B9     		cbnz	r0, .L308
 495:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3429              		.loc 2 495 9 is_stmt 1 view .LVU953
 3430 00c6 944B     		ldr	r3, .L394+56
 3431 00c8 9847     		blx	r3
ARM GAS  /tmp/ccgLZIWS.s 			page 93


 3432              	.LVL279:
 3433              	.L308:
 496:src/console.c ****     }
 497:src/console.c **** 
 498:src/console.c ****     // Key is ready -> clear auto off timer
 499:src/console.c ****     //    if ( !key_empty() )
 500:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 501:src/console.c ****     // Fetch the key
 502:src/console.c ****     //  < 0 -> No key event
 503:src/console.c ****     //  > 0 -> Key pressed
 504:src/console.c ****     // == 0 -> Key released
 505:src/console.c ****     c = key_pop();
 3434              		.loc 2 505 5 view .LVU954
 3435              		.loc 2 505 9 is_stmt 0 view .LVU955
 3436 00ca 944B     		ldr	r3, .L394+60
 3437 00cc 9847     		blx	r3
 3438              	.LVL280:
 506:src/console.c **** #ifdef INCLUDE_STOPWATCH
 507:src/console.c ****     if ( KeyCallback != NULL ) {
 3439              		.loc 2 507 22 view .LVU956
 3440 00ce 3368     		ldr	r3, [r6]
 505:src/console.c **** #ifdef INCLUDE_STOPWATCH
 3441              		.loc 2 505 9 view .LVU957
 3442 00d0 0546     		mov	r5, r0
 3443              	.LVL281:
 3444              		.loc 2 507 5 is_stmt 1 view .LVU958
 3445              		.loc 2 507 8 is_stmt 0 view .LVU959
 3446 00d2 002B     		cmp	r3, #0
 3447 00d4 00F04881 		beq	.L310
 508:src/console.c ****       c = (*KeyCallback)( c );
 3448              		.loc 2 508 7 is_stmt 1 view .LVU960
 3449              		.loc 2 508 12 is_stmt 0 view .LVU961
 3450 00d8 9847     		blx	r3
 3451              	.LVL282:
 3452              		.loc 2 508 12 view .LVU962
 3453 00da 0546     		mov	r5, r0
 3454              	.LVL283:
 3455              	.L311:
 509:src/console.c ****     }
 510:src/console.c ****     else if ( StopWatchRunning && ( Ticker % STOPWATCH_BLINK ) == 0 ) {
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 512:src/console.c ****       finish_display();
 513:src/console.c ****     }
 514:src/console.c **** #endif
 515:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 3456              		.loc 2 515 5 is_stmt 1 view .LVU963
 3457              		.loc 2 515 8 is_stmt 0 view .LVU964
 3458 00dc 622D     		cmp	r5, #98
 3459 00de 00F0C780 		beq	.L312
 3460              		.loc 2 515 29 discriminator 1 view .LVU965
 3461 00e2 002D     		cmp	r5, #0
 3462 00e4 40F3C180 		ble	.L313
 516:src/console.c ****       reset_auto_off();
 3463              		.loc 2 516 7 is_stmt 1 view .LVU966
 3464 00e8 8D4B     		ldr	r3, .L394+64
 3465 00ea 9847     		blx	r3
 3466              	.LVL284:
ARM GAS  /tmp/ccgLZIWS.s 			page 94


 517:src/console.c ****       start_key_timer();
 3467              		.loc 2 517 7 view .LVU967
 3468              	.LBB143:
 3469              	.LBI143:
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 3470              		.loc 2 252 6 view .LVU968
 3471              	.LBB144:
 253:src/console.c **** }
 3472              		.loc 2 253 5 view .LVU969
 253:src/console.c **** }
 3473              		.loc 2 253 19 is_stmt 0 view .LVU970
 3474 00ec 8D4B     		ldr	r3, .L394+68
 3475 00ee 9847     		blx	r3
 3476              	.LVL285:
 253:src/console.c **** }
 3477              		.loc 2 253 17 view .LVU971
 3478 00f0 8D4B     		ldr	r3, .L394+72
 3479              	.LBE144:
 3480              	.LBE143:
 3481              	.LBB146:
 3482              	.LBB147:
  64:src/console.c **** 
 3483              		.loc 2 64 6 view .LVU972
 3484 00f2 632D     		cmp	r5, #99
 3485              	.LBE147:
 3486              	.LBE146:
 3487              	.LBB157:
 3488              	.LBB145:
 253:src/console.c **** }
 3489              		.loc 2 253 17 view .LVU973
 3490 00f4 1860     		str	r0, [r3]
 3491              	.LBE145:
 3492              	.LBE157:
 518:src/console.c ****     }
 519:src/console.c ****     if (c >= 0) {
 3493              		.loc 2 519 5 is_stmt 1 view .LVU974
 520:src/console.c ****       remapped = remap(c);
 3494              		.loc 2 520 7 view .LVU975
 3495              	.LVL286:
 3496              	.LBB158:
 3497              	.LBI146:
  56:src/console.c **** 
 3498              		.loc 2 56 22 view .LVU976
 3499              	.LBB149:
  58:src/console.c **** 
 3500              		.loc 2 58 3 view .LVU977
 3501              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3502              		.loc 3 1 1 view .LVU978
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
ARM GAS  /tmp/ccgLZIWS.s 			page 95


  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3503              		.loc 3 59 3 view .LVU979
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
ARM GAS  /tmp/ccgLZIWS.s 			page 96


  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX}, // Complex
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU,  M_Disp}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU,  M_Clear}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU,  M_Solve}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU,  M_Stats}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU,  M_Base}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU,  M_Flags}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU,  M_Prob}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  96:src/keytran.c ****     {K_SETMENU,  M_User}, // select user menu
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU,  M_Setup1}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU,  M_Last}, // last menu
 114:src/keytran.c ****     {K_SETMENU,  M_Misc}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3504              		.loc 3 117 3 view .LVU980
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
ARM GAS  /tmp/ccgLZIWS.s 			page 97


 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU,  M_Swap}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_MULTI, SETUMEN}, // Set up user menu
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 159:src/keytran.c ****     {K_SETMENU,  M_Setup2}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU,  M_Program}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3505              		.loc 3 175 1 view .LVU981
 176:src/keytran.c ****     {K_RELEASE, -1},
 177:src/keytran.c ****     // Top row of DM42 1--6
ARM GAS  /tmp/ccgLZIWS.s 			page 98


 178:src/keytran.c ****     {K00, -1},
 179:src/keytran.c ****     {K01, -1},
 180:src/keytran.c ****     {K02, -1},
 181:src/keytran.c ****     {K03, -1},
 182:src/keytran.c ****     {K04, -1},
 183:src/keytran.c ****     {K05, -1},
 184:src/keytran.c ****     // Next row of DM42 7--12
 185:src/keytran.c ****     {K10, -1},
 186:src/keytran.c ****     {K11, -1},
 187:src/keytran.c ****     {K12, -1},
 188:src/keytran.c ****     {K13, -1},
 189:src/keytran.c ****     {K14, -1},
 190:src/keytran.c ****     {K15, -1},
 191:src/keytran.c ****     // Third row of DM42 13--17
 192:src/keytran.c ****     {K20, -1},
 193:src/keytran.c ****     {K21, -1},
 194:src/keytran.c ****     {K22, -1},
 195:src/keytran.c ****     {K23, -1},
 196:src/keytran.c ****     {K24, -1},
 197:src/keytran.c ****     // Fourth row of DM42 18--22
 198:src/keytran.c ****     {K30, -1},
 199:src/keytran.c ****     {K31, -1},
 200:src/keytran.c ****     {K32, -1},
 201:src/keytran.c ****     {K33, -1},
 202:src/keytran.c ****     {K34, -1},
 203:src/keytran.c ****     // Fifth row of DM42 23--27
 204:src/keytran.c ****     {K40, -1},
 205:src/keytran.c ****     {K41, -1},
 206:src/keytran.c ****     {K42, -1},
 207:src/keytran.c ****     {K43, -1},
 208:src/keytran.c ****     {K44, -1},
 209:src/keytran.c ****     // Sixth row of DM42 28--32
 210:src/keytran.c ****     {K50, -1},
 211:src/keytran.c ****     {K51, -1},
 212:src/keytran.c ****     {K52, -1},
 213:src/keytran.c ****     {K53, -1},
 214:src/keytran.c ****     {K54, -1},
 215:src/keytran.c ****     // Last row of DM42 33--37
 216:src/keytran.c ****     {K60, -1},
 217:src/keytran.c ****     {K61, -1},
 218:src/keytran.c ****     {K62, -1},
 219:src/keytran.c ****     {K63, -1},
 220:src/keytran.c ****     {K64, -1},
 221:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 222:src/keytran.c ****     {K_NOP, -1},
 223:src/keytran.c ****     {K_NOP, -1},
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 227:src/keytran.c ****     {K_CMPLX, -1},
 228:src/keytran.c ****     {K_NOP, -1},
 229:src/keytran.c ****     {K_NOP, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c **** };
 232:src/keytran.c **** 
 233:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3506              		.loc 3 233 1 view .LVU982
ARM GAS  /tmp/ccgLZIWS.s 			page 99


  62:src/console.c **** 
 3507              		.loc 2 62 3 view .LVU983
  64:src/console.c **** 
 3508              		.loc 2 64 3 view .LVU984
  64:src/console.c **** 
 3509              		.loc 2 64 6 is_stmt 0 view .LVU985
 3510 00f6 00F08181 		beq	.L377
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3511              		.loc 2 66 3 is_stmt 1 view .LVU986
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3512              		.loc 2 66 6 is_stmt 0 view .LVU987
 3513 00fa 2C2D     		cmp	r5, #44
 3514 00fc 00F04F81 		beq	.L316
 3515              	.LVL287:
 3516              	.L350:
  71:src/console.c ****     return mapping_running[c];
 3517              		.loc 2 71 3 is_stmt 1 view .LVU988
  71:src/console.c ****     return mapping_running[c];
 3518              		.loc 2 71 15 is_stmt 0 view .LVU989
 3519 0100 8A4A     		ldr	r2, .L394+76
 3520 0102 8B4B     		ldr	r3, .L394+80
 3521 0104 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3522 0108 1968     		ldr	r1, [r3]
  71:src/console.c ****     return mapping_running[c];
 3523              		.loc 2 71 6 view .LVU990
 3524 010a 59EA0109 		orrs	r9, r9, r1
 3525 010e 40F06881 		bne	.L378
  75:src/console.c ****   
 3526              		.loc 2 75 3 is_stmt 1 view .LVU991
  75:src/console.c ****   
 3527              		.loc 2 75 22 is_stmt 0 view .LVU992
 3528 0112 04A8     		add	r0, sp, #16
 3529 0114 FFF7FEFF 		bl	get_current_menu_ref
 3530              	.LVL288:
  77:src/console.c ****   case KEY_F1:
 3531              		.loc 2 77 3 is_stmt 1 view .LVU993
 3532 0118 A5F12603 		sub	r3, r5, #38
 3533 011c 052B     		cmp	r3, #5
 3534 011e 00F27781 		bhi	.L318
 3535 0122 DFE813F0 		tbh	[pc, r3, lsl #1]
 3536              	.L320:
 3537 0126 7D01     		.2byte	(.L325-.L320)/2
 3538 0128 0B00     		.2byte	(.L324-.L320)/2
 3539 012a 1500     		.2byte	(.L323-.L320)/2
 3540 012c 1F00     		.2byte	(.L322-.L320)/2
 3541 012e 2900     		.2byte	(.L321-.L320)/2
 3542 0130 3300     		.2byte	(.L319-.L320)/2
 3543              		.p2align 1
 3544              	.L326:
  80:src/console.c ****   case KEY_F2:
 3545              		.loc 2 80 5 view .LVU994
  80:src/console.c ****   case KEY_F2:
 3546              		.loc 2 80 9 is_stmt 0 view .LVU995
 3547 0132 FFF7FEFF 		bl	cur_shift
 3548              	.LVL289:
  80:src/console.c ****   case KEY_F2:
 3549              		.loc 2 80 8 view .LVU996
ARM GAS  /tmp/ccgLZIWS.s 			page 100


 3550 0136 0128     		cmp	r0, #1
 3551 0138 00F00882 		beq	.L379
 3552              	.L324:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3553              		.loc 2 82 5 is_stmt 1 view .LVU997
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3554              		.loc 2 82 9 is_stmt 0 view .LVU998
 3555 013c FFF7FEFF 		bl	cur_shift
 3556              	.LVL290:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3557              		.loc 2 82 8 view .LVU999
 3558 0140 0028     		cmp	r0, #0
 3559 0142 00F09A81 		beq	.L380
  83:src/console.c ****   case KEY_F3:
 3560              		.loc 2 83 5 is_stmt 1 view .LVU1000
  83:src/console.c ****   case KEY_F3:
 3561              		.loc 2 83 9 is_stmt 0 view .LVU1001
 3562 0146 FFF7FEFF 		bl	cur_shift
 3563              	.LVL291:
  83:src/console.c ****   case KEY_F3:
 3564              		.loc 2 83 8 view .LVU1002
 3565 014a 0128     		cmp	r0, #1
 3566 014c 00F0DF81 		beq	.L381
 3567              	.L323:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3568              		.loc 2 85 5 is_stmt 1 view .LVU1003
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3569              		.loc 2 85 9 is_stmt 0 view .LVU1004
 3570 0150 FFF7FEFF 		bl	cur_shift
 3571              	.LVL292:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3572              		.loc 2 85 8 view .LVU1005
 3573 0154 0028     		cmp	r0, #0
 3574 0156 00F08681 		beq	.L382
  86:src/console.c ****   case KEY_F4:
 3575              		.loc 2 86 5 is_stmt 1 view .LVU1006
  86:src/console.c ****   case KEY_F4:
 3576              		.loc 2 86 9 is_stmt 0 view .LVU1007
 3577 015a FFF7FEFF 		bl	cur_shift
 3578              	.LVL293:
  86:src/console.c ****   case KEY_F4:
 3579              		.loc 2 86 8 view .LVU1008
 3580 015e 0128     		cmp	r0, #1
 3581 0160 00F0CB81 		beq	.L383
 3582              	.L322:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3583              		.loc 2 88 5 is_stmt 1 view .LVU1009
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3584              		.loc 2 88 9 is_stmt 0 view .LVU1010
 3585 0164 FFF7FEFF 		bl	cur_shift
 3586              	.LVL294:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3587              		.loc 2 88 8 view .LVU1011
 3588 0168 0028     		cmp	r0, #0
 3589 016a 00F07281 		beq	.L384
  89:src/console.c ****   case KEY_F5:
 3590              		.loc 2 89 5 is_stmt 1 view .LVU1012
ARM GAS  /tmp/ccgLZIWS.s 			page 101


  89:src/console.c ****   case KEY_F5:
 3591              		.loc 2 89 9 is_stmt 0 view .LVU1013
 3592 016e FFF7FEFF 		bl	cur_shift
 3593              	.LVL295:
  89:src/console.c ****   case KEY_F5:
 3594              		.loc 2 89 8 view .LVU1014
 3595 0172 0128     		cmp	r0, #1
 3596 0174 00F0AD81 		beq	.L385
 3597              	.L321:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3598              		.loc 2 91 5 is_stmt 1 view .LVU1015
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3599              		.loc 2 91 9 is_stmt 0 view .LVU1016
 3600 0178 FFF7FEFF 		bl	cur_shift
 3601              	.LVL296:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3602              		.loc 2 91 8 view .LVU1017
 3603 017c 0028     		cmp	r0, #0
 3604 017e 00F05E81 		beq	.L386
  92:src/console.c ****   case KEY_F6:
 3605              		.loc 2 92 5 is_stmt 1 view .LVU1018
  92:src/console.c ****   case KEY_F6:
 3606              		.loc 2 92 9 is_stmt 0 view .LVU1019
 3607 0182 FFF7FEFF 		bl	cur_shift
 3608              	.LVL297:
  92:src/console.c ****   case KEY_F6:
 3609              		.loc 2 92 8 view .LVU1020
 3610 0186 0128     		cmp	r0, #1
 3611 0188 00F0AD81 		beq	.L387
 3612              	.L319:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3613              		.loc 2 94 5 is_stmt 1 view .LVU1021
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3614              		.loc 2 94 9 is_stmt 0 view .LVU1022
 3615 018c FFF7FEFF 		bl	cur_shift
 3616              	.LVL298:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3617              		.loc 2 94 8 view .LVU1023
 3618 0190 0028     		cmp	r0, #0
 3619 0192 40F03981 		bne	.L331
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3620              		.loc 2 94 33 is_stmt 1 view .LVU1024
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3621              		.loc 2 94 51 is_stmt 0 view .LVU1025
 3622 0196 DDE93001 		ldrd	r0, r1, [sp, #192]
 3623 019a 9DF8C050 		ldrb	r5, [sp, #192]	@ zero_extendqisi2
 3624              	.LVL299:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3625              		.loc 2 94 51 view .LVU1026
 3626 019e 0DF1080A 		add	r10, sp, #8
 3627              	.LBE149:
 3628              	.LBE158:
 521:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3629              		.loc 2 521 10 view .LVU1027
 3630 01a2 2F2D     		cmp	r5, #47
 3631              	.LBB159:
 3632              	.LBB150:
ARM GAS  /tmp/ccgLZIWS.s 			page 102


  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3633              		.loc 2 94 51 view .LVU1028
 3634 01a4 8AE80300 		stm	r10, {r0, r1}
 3635 01a8 8946     		mov	r9, r1
 3636              	.LVL300:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3637              		.loc 2 94 51 view .LVU1029
 3638              	.LBE150:
 3639              	.LBE159:
 3640              		.loc 2 521 7 is_stmt 1 view .LVU1030
 3641              		.loc 2 521 10 is_stmt 0 view .LVU1031
 3642 01aa 6CD1     		bne	.L342
 3643              	.LVL301:
 3644              	.L390:
 522:src/console.c **** 	set_menu ( remapped.shift );
 3645              		.loc 2 522 2 is_stmt 1 view .LVU1032
 3646              	.LBB160:
 3647              	.LBB161:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3648              		.loc 1 109 13 is_stmt 0 view .LVU1033
 3649 01ac 614A     		ldr	r2, .L394+84
 3650 01ae 92F90030 		ldrsb	r3, [r2]
 3651              	.LBE161:
 3652              	.LBE160:
 3653              		.loc 2 522 2 view .LVU1034
 3654 01b2 4FFA89F1 		sxtb	r1, r9
 3655              	.LVL302:
 3656              	.LBB164:
 3657              	.LBI160:
 108:src/menu.c    ****   menu_name m = current_menu;
 3658              		.loc 1 108 6 is_stmt 1 view .LVU1035
 3659              	.LBB162:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3660              		.loc 1 109 3 view .LVU1036
 110:src/menu.c    ****     current_menu = default_menu;
 3661              		.loc 1 110 3 view .LVU1037
 110:src/menu.c    ****     current_menu = default_menu;
 3662              		.loc 1 110 6 is_stmt 0 view .LVU1038
 3663 01b6 9942     		cmp	r1, r3
 3664 01b8 00F02281 		beq	.L388
 113:src/menu.c    ****     current_menu = last_menu;
 3665              		.loc 1 113 8 is_stmt 1 view .LVU1039
 113:src/menu.c    ****     current_menu = last_menu;
 3666              		.loc 1 113 11 is_stmt 0 view .LVU1040
 3667 01bc 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 3668              		.loc 1 114 5 is_stmt 1 view .LVU1041
 114:src/menu.c    ****   }
 3669              		.loc 1 114 18 is_stmt 0 view .LVU1042
 3670 01be 04BF     		itt	eq
 3671 01c0 5D49     		ldreq	r1, .L394+88
 3672              	.LVL303:
 114:src/menu.c    ****   }
 3673              		.loc 1 114 18 view .LVU1043
 3674 01c2 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 3675              		.loc 1 117 5 is_stmt 1 view .LVU1044
ARM GAS  /tmp/ccgLZIWS.s 			page 103


 117:src/menu.c    ****   }
 3676              		.loc 1 117 18 is_stmt 0 view .LVU1045
 3677 01c4 1170     		strb	r1, [r2]
 3678              	.LVL304:
 3679              	.L344:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3680              		.loc 1 119 3 is_stmt 1 view .LVU1046
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3681              		.loc 1 119 6 is_stmt 0 view .LVU1047
 3682 01c6 092B     		cmp	r3, #9
 3683 01c8 03D0     		beq	.L346
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3684              		.loc 1 119 23 view .LVU1048
 3685 01ca 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3686              		.loc 1 119 43 is_stmt 1 view .LVU1049
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3687              		.loc 1 119 53 is_stmt 0 view .LVU1050
 3688 01cc 1CBF     		itt	ne
 3689 01ce 5A4A     		ldrne	r2, .L394+88
 3690 01d0 1370     		strbne	r3, [r2]
 3691              	.L346:
 3692              	.LVL305:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3693              		.loc 1 119 53 view .LVU1051
 3694              	.LBE162:
 3695              	.LBE164:
 523:src/console.c **** 	display_current_menu ();
 3696              		.loc 2 523 2 is_stmt 1 view .LVU1052
 3697 01d2 FFF7FEFF 		bl	display_current_menu
 3698              	.LVL306:
 524:src/console.c **** 	reset_shift();
 3699              		.loc 2 524 2 view .LVU1053
 3700 01d6 FFF7FEFF 		bl	reset_shift
 3701              	.LVL307:
 525:src/console.c **** 	remapped = no_key;
 3702              		.loc 2 525 2 view .LVU1054
 3703              		.loc 2 525 11 is_stmt 0 view .LVU1055
 3704 01da 584B     		ldr	r3, .L394+92
 3705 01dc 93E80300 		ldm	r3, {r0, r1}
 3706 01e0 0DF1080A 		add	r10, sp, #8
 3707 01e4 8AE80300 		stm	r10, {r0, r1}
 3708 01e8 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3709              	.LVL308:
 3710              		.loc 2 525 11 view .LVU1056
 3711 01ea 8946     		mov	r9, r1
 3712              	.LVL309:
 3713              		.loc 2 525 11 view .LVU1057
 3714 01ec 4BE0     		b	.L342
 3715              	.LVL310:
 3716              	.L296:
 452:src/console.c ****     {
 3717              		.loc 2 452 10 is_stmt 1 view .LVU1058
 452:src/console.c ****     {
 3718              		.loc 2 452 15 is_stmt 0 view .LVU1059
 3719 01ee 2568     		ldr	r5, [r4]
 452:src/console.c ****     {
ARM GAS  /tmp/ccgLZIWS.s 			page 104


 3720              		.loc 2 452 13 view .LVU1060
 3721 01f0 15F40075 		ands	r5, r5, #512
 3722 01f4 7FF447AF 		bne	.L297
 452:src/console.c ****     {
 3723              		.loc 2 452 35 discriminator 1 view .LVU1061
 3724 01f8 B847     		blx	r7
 3725              	.LVL311:
 452:src/console.c ****     {
 3726              		.loc 2 452 32 discriminator 1 view .LVU1062
 3727 01fa 0028     		cmp	r0, #0
 3728 01fc 3FF443AF 		beq	.L297
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3729              		.loc 2 454 7 is_stmt 1 view .LVU1063
 3730 0200 2368     		ldr	r3, [r4]
 3731 0202 23F00203 		bic	r3, r3, #2
 455:src/console.c ****       sys_sleep();
 3732              		.loc 2 455 7 is_stmt 0 view .LVU1064
 3733 0206 2846     		mov	r0, r5
 3734 0208 6421     		movs	r1, #100
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3735              		.loc 2 454 7 view .LVU1065
 3736 020a 2360     		str	r3, [r4]
 455:src/console.c ****       sys_sleep();
 3737              		.loc 2 455 7 is_stmt 1 view .LVU1066
 3738 020c C047     		blx	r8
 3739              	.LVL312:
 456:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 3740              		.loc 2 456 7 view .LVU1067
 3741 020e 3D4B     		ldr	r3, .L394+36
 3742 0210 9847     		blx	r3
 3743              	.LVL313:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 3744              		.loc 2 457 7 view .LVU1068
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 3745              		.loc 2 457 11 is_stmt 0 view .LVU1069
 3746 0212 4B4B     		ldr	r3, .L394+96
 3747 0214 2846     		mov	r0, r5
 3748 0216 9847     		blx	r3
 3749              	.LVL314:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 3750              		.loc 2 457 10 view .LVU1070
 3751 0218 48B1     		cbz	r0, .L301
 458:src/console.c **** 	if (Pause > 0) Pause--;
 3752              		.loc 2 458 2 is_stmt 1 view .LVU1071
 3753 021a 4A4B     		ldr	r3, .L394+100
 3754 021c 6220     		movs	r0, #98
 3755 021e 9847     		blx	r3
 3756              	.LVL315:
 459:src/console.c ****       }
 3757              		.loc 2 459 2 view .LVU1072
 459:src/console.c ****       }
 3758              		.loc 2 459 12 is_stmt 0 view .LVU1073
 3759 0220 424B     		ldr	r3, .L394+76
 3760 0222 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 459:src/console.c ****       }
 3761              		.loc 2 459 5 view .LVU1074
 3762 0224 1AB1     		cbz	r2, .L301
ARM GAS  /tmp/ccgLZIWS.s 			page 105


 459:src/console.c ****       }
 3763              		.loc 2 459 17 is_stmt 1 discriminator 1 view .LVU1075
 459:src/console.c ****       }
 3764              		.loc 2 459 22 is_stmt 0 discriminator 1 view .LVU1076
 3765 0226 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3766 0228 013A     		subs	r2, r2, #1
 3767 022a D2B2     		uxtb	r2, r2
 3768 022c 1A70     		strb	r2, [r3]
 3769              	.L301:
 461:src/console.c ****     }
 3770              		.loc 2 461 7 is_stmt 1 view .LVU1077
 3771 022e 464B     		ldr	r3, .L394+104
 3772 0230 0020     		movs	r0, #0
 3773 0232 9847     		blx	r3
 3774              	.LVL316:
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3775              		.loc 2 465 5 view .LVU1078
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3776              		.loc 2 465 9 is_stmt 0 view .LVU1079
 3777 0234 2368     		ldr	r3, [r4]
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 3778              		.loc 2 465 8 view .LVU1080
 3779 0236 9805     		lsls	r0, r3, #22
 3780 0238 7FF529AF 		bpl	.L389
 3781              	.L303:
 466:src/console.c ****         // Going to off mode
 3782              		.loc 2 466 7 is_stmt 1 view .LVU1081
 466:src/console.c ****         // Going to off mode
 3783              		.loc 2 466 12 is_stmt 0 view .LVU1082
 3784 023c 2568     		ldr	r5, [r4]
 466:src/console.c ****         // Going to off mode
 3785              		.loc 2 466 10 view .LVU1083
 3786 023e 15F00405 		ands	r5, r5, #4
 3787 0242 7FF412AF 		bne	.L295
 468:src/console.c ****         draw_power_off_image(1);
 3788              		.loc 2 468 9 is_stmt 1 view .LVU1084
 3789 0246 414B     		ldr	r3, .L394+108
 3790 0248 2846     		mov	r0, r5
 3791 024a 9847     		blx	r3
 3792              	.LVL317:
 469:src/console.c **** 
 3793              		.loc 2 469 9 view .LVU1085
 3794 024c 404B     		ldr	r3, .L394+112
 3795 024e 0120     		movs	r0, #1
 3796 0250 9847     		blx	r3
 3797              	.LVL318:
 471:src/console.c ****         SET_ST(STAT_SUSPENDED);
 3798              		.loc 2 471 9 view .LVU1086
 3799 0252 404B     		ldr	r3, .L394+116
 3800 0254 2846     		mov	r0, r5
 3801 0256 9847     		blx	r3
 3802              	.LVL319:
 472:src/console.c ****         SET_ST(STAT_OFF);
 3803              		.loc 2 472 9 view .LVU1087
 3804 0258 2368     		ldr	r3, [r4]
 3805 025a 43F00403 		orr	r3, r3, #4
 3806 025e 2360     		str	r3, [r4]
ARM GAS  /tmp/ccgLZIWS.s 			page 106


 473:src/console.c ****       }
 3807              		.loc 2 473 9 view .LVU1088
 3808 0260 2368     		ldr	r3, [r4]
 3809 0262 43F01003 		orr	r3, r3, #16
 3810 0266 2360     		str	r3, [r4]
 3811 0268 FFE6     		b	.L295
 3812              	.LVL320:
 3813              	.L313:
 519:src/console.c ****       remapped = remap(c);
 3814              		.loc 2 519 5 view .LVU1089
 519:src/console.c ****       remapped = remap(c);
 3815              		.loc 2 519 8 is_stmt 0 view .LVU1090
 3816 026a 7FF4FEAE 		bne	.L295
 3817 026e 47E7     		b	.L350
 3818              	.L312:
 519:src/console.c ****       remapped = remap(c);
 3819              		.loc 2 519 5 is_stmt 1 view .LVU1091
 520:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3820              		.loc 2 520 7 view .LVU1092
 3821              	.LVL321:
 3822              	.LBB165:
  56:src/console.c **** 
 3823              		.loc 2 56 22 view .LVU1093
 3824              	.LBB151:
  58:src/console.c **** 
 3825              		.loc 2 58 3 view .LVU1094
   1:src/keytran.c ****     {K00, 0}, // A/sig+
 3826              		.loc 3 1 1 view .LVU1095
  59:src/keytran.c ****     {K_RELEASE, -1},
 3827              		.loc 3 59 3 view .LVU1096
 117:src/keytran.c ****     {K_RELEASE, -1},
 3828              		.loc 3 117 3 view .LVU1097
 175:src/keytran.c ****     {K_RELEASE, -1},
 3829              		.loc 3 175 1 view .LVU1098
 3830              		.loc 3 233 1 view .LVU1099
  62:src/console.c **** 
 3831              		.loc 2 62 3 view .LVU1100
  62:src/console.c **** 
 3832              		.loc 2 62 23 view .LVU1101
  62:src/console.c **** 
 3833              		.loc 2 62 30 is_stmt 0 view .LVU1102
 3834 0270 394B     		ldr	r3, .L394+120
 3835              	.LVL322:
 3836              	.L375:
  62:src/console.c **** 
 3837              		.loc 2 62 30 view .LVU1103
 3838 0272 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3839              	.LVL323:
  62:src/console.c **** 
 3840              		.loc 2 62 30 view .LVU1104
 3841 0274 93E80300 		ldm	r3, {r0, r1}
 3842 0278 0DF1080A 		add	r10, sp, #8
 3843 027c 8AE80300 		stm	r10, {r0, r1}
 3844 0280 8946     		mov	r9, r1
 3845              	.LVL324:
 3846              	.L315:
  62:src/console.c **** 
ARM GAS  /tmp/ccgLZIWS.s 			page 107


 3847              		.loc 2 62 30 view .LVU1105
 3848              	.LBE151:
 3849              	.LBE165:
 521:src/console.c **** 	set_menu ( remapped.shift );
 3850              		.loc 2 521 7 is_stmt 1 view .LVU1106
 521:src/console.c **** 	set_menu ( remapped.shift );
 3851              		.loc 2 521 10 is_stmt 0 view .LVU1107
 3852 0282 2F2D     		cmp	r5, #47
 3853 0284 92D0     		beq	.L390
 3854              	.L342:
 526:src/console.c ****       }
 527:src/console.c ****       if (remapped.key_34s == K_SYS) {
 3855              		.loc 2 527 7 is_stmt 1 view .LVU1108
 3856              		.loc 2 527 10 is_stmt 0 view .LVU1109
 3857 0286 302D     		cmp	r5, #48
 3858 0288 19D1     		bne	.L347
 528:src/console.c **** 	SET_ST(STAT_MENU);
 3859              		.loc 2 528 2 is_stmt 1 view .LVU1110
 3860 028a 2368     		ldr	r3, [r4]
 529:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 3861              		.loc 2 529 2 is_stmt 0 view .LVU1111
 3862 028c 334D     		ldr	r5, .L394+124
 3863              	.LVL325:
 3864              		.loc 2 529 2 view .LVU1112
 3865 028e 3448     		ldr	r0, .L394+128
 3866 0290 0022     		movs	r2, #0
 528:src/console.c **** 	SET_ST(STAT_MENU);
 3867              		.loc 2 528 2 view .LVU1113
 3868 0292 43F04003 		orr	r3, r3, #64
 3869              		.loc 2 529 2 view .LVU1114
 3870 0296 1146     		mov	r1, r2
 528:src/console.c **** 	SET_ST(STAT_MENU);
 3871              		.loc 2 528 2 view .LVU1115
 3872 0298 2360     		str	r3, [r4]
 3873              		.loc 2 529 2 is_stmt 1 view .LVU1116
 3874 029a A847     		blx	r5
 3875              	.LVL326:
 530:src/console.c **** 	CLR_ST(STAT_MENU);
 3876              		.loc 2 530 2 view .LVU1117
 3877 029c 2368     		ldr	r3, [r4]
 3878 029e 23F04003 		bic	r3, r3, #64
 3879 02a2 2360     		str	r3, [r4]
 531:src/console.c **** 	reset_shift();
 3880              		.loc 2 531 2 view .LVU1118
 3881 02a4 FFF7FEFF 		bl	reset_shift
 3882              	.LVL327:
 532:src/console.c **** 	remapped =  no_key;
 3883              		.loc 2 532 2 view .LVU1119
 3884              		.loc 2 532 11 is_stmt 0 view .LVU1120
 3885 02a8 244B     		ldr	r3, .L394+92
 3886 02aa 93E80300 		ldm	r3, {r0, r1}
 3887 02ae 0DF1080A 		add	r10, sp, #8
 3888 02b2 8AE80300 		stm	r10, {r0, r1}
 3889 02b6 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3890              	.LVL328:
 3891              		.loc 2 532 11 view .LVU1121
 3892 02b8 8946     		mov	r9, r1
ARM GAS  /tmp/ccgLZIWS.s 			page 108


 3893              	.LVL329:
 533:src/console.c **** 	display_current_menu();
 3894              		.loc 2 533 2 is_stmt 1 view .LVU1122
 3895 02ba FFF7FEFF 		bl	display_current_menu
 3896              	.LVL330:
 3897              	.L347:
 534:src/console.c ****       }
 535:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 3898              		.loc 2 535 7 view .LVU1123
 3899              		.loc 2 535 10 is_stmt 0 view .LVU1124
 3900 02be 312D     		cmp	r5, #49
 3901 02c0 6FD0     		beq	.L351
 536:src/console.c **** 	remapped = do_multi (remapped);
 537:src/console.c **** 	display_current_menu();
 538:src/console.c ****       }
 539:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 3902              		.loc 2 539 7 is_stmt 1 view .LVU1125
 3903              		.loc 2 539 10 is_stmt 0 view .LVU1126
 3904 02c2 322D     		cmp	r5, #50
 3905 02c4 00F08780 		beq	.L349
 3906              	.LVL331:
 3907              	.L376:
 3908              		.loc 2 539 10 view .LVU1127
 3909 02c8 0DF1080A 		add	r10, sp, #8
 3910              	.L338:
 3911              	.LVL332:
 540:src/console.c ****       process_keycode_with_shift(remapped);
 3912              		.loc 2 540 7 is_stmt 1 view .LVU1128
 3913              		.loc 2 540 7 is_stmt 0 view .LVU1129
 3914 02cc 8DF80850 		strb	r5, [sp, #8]
 3915 02d0 CDF80C90 		str	r9, [sp, #12]
 3916 02d4 9AE80300 		ldm	r10, {r0, r1}
 3917 02d8 FFF7FEFF 		bl	process_keycode_with_shift
 3918              	.LVL333:
 3919 02dc C5E6     		b	.L295
 3920              	.L395:
 3921 02de 00BF     		.align	2
 3922              	.L394:
 3923 02e0 00000000 		.word	StateWhileOn
 3924 02e4 00000000 		.word	DispMsg
 3925 02e8 00200010 		.word	268443648
 3926 02ec 00000000 		.word	KeyCallback
 3927 02f0 7D030008 		.word	134218621
 3928 02f4 00000000 		.word	run_menu_item
 3929 02f8 00000000 		.word	menu_line_str
 3930 02fc 31020008 		.word	134218289
 3931 0300 00000000 		.word	JustDisplayed
 3932 0304 19040008 		.word	134218777
 3933 0308 19020008 		.word	134218265
 3934 030c 91030008 		.word	134218641
 3935 0310 E5020008 		.word	134218469
 3936 0314 59020008 		.word	134218329
 3937 0318 35020008 		.word	134218293
 3938 031c 89030008 		.word	134218633
 3939 0320 B9030008 		.word	134218681
 3940 0324 B9040008 		.word	134218937
 3941 0328 00000000 		.word	.LANCHOR8
ARM GAS  /tmp/ccgLZIWS.s 			page 109


 3942 032c 00000000 		.word	Pause
 3943 0330 00000000 		.word	Running
 3944 0334 00000000 		.word	.LANCHOR1
 3945 0338 00000000 		.word	.LANCHOR3
 3946 033c 00000000 		.word	.LANCHOR10
 3947 0340 01040008 		.word	134218753
 3948 0344 81030008 		.word	134218625
 3949 0348 F5030008 		.word	134218741
 3950 034c 55020008 		.word	134218325
 3951 0350 2D040008 		.word	134218797
 3952 0354 1D020008 		.word	134218269
 3953 0358 00000000 		.word	.LANCHOR19
 3954 035c 59030008 		.word	134218585
 3955 0360 00000000 		.word	.LANCHOR18
 3956 0364 F9030008 		.word	134218745
 3957              	.LVL334:
 3958              	.L310:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 3959              		.loc 2 510 10 is_stmt 1 view .LVU1130
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 3960              		.loc 2 510 15 is_stmt 0 view .LVU1131
 3961 0368 824B     		ldr	r3, .L396
 3962 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 3963              		.loc 2 510 13 view .LVU1132
 3964 036c DB07     		lsls	r3, r3, #31
 3965 036e 7FF5B5AE 		bpl	.L311
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 3966              		.loc 2 510 37 discriminator 1 view .LVU1133
 3967 0372 FFF7FEFF 		bl	DM42_Ticker
 3968              	.LVL335:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 3969              		.loc 2 510 37 discriminator 1 view .LVU1134
 3970 0376 804A     		ldr	r2, .L396+4
 3971 0378 804B     		ldr	r3, .L396+8
 3972 037a 02FB0030 		mla	r0, r2, r0, r3
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 3973              		.loc 2 510 32 discriminator 1 view .LVU1135
 3974 037e B0F1333F 		cmp	r0, #858993459
 3975 0382 BFF4ABAE 		bcs	.L311
 511:src/console.c ****       finish_display();
 3976              		.loc 2 511 7 is_stmt 1 view .LVU1136
 511:src/console.c ****       finish_display();
 3977              		.loc 2 511 21 is_stmt 0 view .LVU1137
 3978 0386 8420     		movs	r0, #132
 3979 0388 FFF7FEFF 		bl	is_dot
 3980              	.LVL336:
 511:src/console.c ****       finish_display();
 3981              		.loc 2 511 7 view .LVU1138
 3982 038c B0FA80F1 		clz	r1, r0
 3983 0390 4909     		lsrs	r1, r1, #5
 3984 0392 8420     		movs	r0, #132
 3985 0394 FFF7FEFF 		bl	dot
 3986              	.LVL337:
 512:src/console.c ****     }
 3987              		.loc 2 512 7 is_stmt 1 view .LVU1139
 3988 0398 FFF7FEFF 		bl	finish_display
ARM GAS  /tmp/ccgLZIWS.s 			page 110


 3989              	.LVL338:
 3990 039c 9EE6     		b	.L311
 3991              	.LVL339:
 3992              	.L316:
 521:src/console.c **** 	set_menu ( remapped.shift );
 3993              		.loc 2 521 7 view .LVU1140
 527:src/console.c **** 	SET_ST(STAT_MENU);
 3994              		.loc 2 527 7 view .LVU1141
 535:src/console.c **** 	remapped = do_multi (remapped);
 3995              		.loc 2 535 7 view .LVU1142
 3996              	.LBB166:
 3997              	.LBB152:
 3998              	.LBB148:
  68:src/console.c ****   }
 3999              		.loc 2 68 12 is_stmt 0 view .LVU1143
 4000 039e 4FF00C09 		mov	r9, #12
 4001              	.LVL340:
 4002              	.L351:
  68:src/console.c ****   }
 4003              		.loc 2 68 12 view .LVU1144
 4004              	.LBE148:
 4005              	.LBE152:
 4006              	.LBE166:
 536:src/console.c **** 	display_current_menu();
 4007              		.loc 2 536 2 is_stmt 1 view .LVU1145
 536:src/console.c **** 	display_current_menu();
 4008              		.loc 2 536 13 is_stmt 0 view .LVU1146
 4009 03a2 3123     		movs	r3, #49
 4010 03a4 CDF80C90 		str	r9, [sp, #12]
 4011 03a8 8DF80830 		strb	r3, [sp, #8]
 4012 03ac 6D46     		mov	r5, sp
 4013 03ae 0DF1080A 		add	r10, sp, #8
 4014 03b2 9AE80600 		ldm	r10, {r1, r2}
 4015 03b6 2846     		mov	r0, r5
 4016 03b8 FFF7FEFF 		bl	do_multi
 4017              	.LVL341:
 4018 03bc 95E80300 		ldm	r5, {r0, r1}
 4019 03c0 8AE80300 		stm	r10, {r0, r1}
 4020 03c4 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 4021              	.LVL342:
 536:src/console.c **** 	display_current_menu();
 4022              		.loc 2 536 13 view .LVU1147
 4023 03c8 DDF80C90 		ldr	r9, [sp, #12]
 4024              	.LVL343:
 537:src/console.c ****       }
 4025              		.loc 2 537 2 is_stmt 1 view .LVU1148
 4026 03cc FFF7FEFF 		bl	display_current_menu
 4027              	.LVL344:
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4028              		.loc 2 539 7 view .LVU1149
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4029              		.loc 2 539 10 is_stmt 0 view .LVU1150
 4030 03d0 322D     		cmp	r5, #50
 4031 03d2 7FF479AF 		bne	.L376
 4032              	.L349:
 541:src/console.c ****     }
 542:src/console.c ****   }
ARM GAS  /tmp/ccgLZIWS.s 			page 111


 543:src/console.c ****   save_ram_file(0);
 4033              		.loc 2 543 3 is_stmt 1 view .LVU1151
 4034 03d6 0020     		movs	r0, #0
 544:src/console.c ****   //  free_storage();
 545:src/console.c ****   return;
 546:src/console.c **** }
 4035              		.loc 2 546 1 is_stmt 0 view .LVU1152
 4036 03d8 38B0     		add	sp, sp, #224
 4037              		.cfi_remember_state
 4038              		.cfi_def_cfa_offset 32
 4039              		@ sp needed
 4040 03da BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 4041              		.cfi_restore 14
 4042              		.cfi_restore 10
 4043              		.cfi_restore 9
 4044              		.cfi_restore 8
 4045              		.cfi_restore 7
 4046              		.cfi_restore 6
 4047              		.cfi_restore 5
 4048              		.cfi_restore 4
 4049              		.cfi_def_cfa_offset 0
 4050              	.LVL345:
 543:src/console.c ****   //  free_storage();
 4051              		.loc 2 543 3 view .LVU1153
 4052 03de FFF7FEBF 		b	save_ram_file
 4053              	.LVL346:
 4054              	.L378:
 4055              		.cfi_restore_state
 4056              	.LBB167:
 4057              	.LBB153:
  72:src/console.c ****   }
 4058              		.loc 2 72 5 is_stmt 1 view .LVU1154
  72:src/console.c ****   }
 4059              		.loc 2 72 27 is_stmt 0 view .LVU1155
 4060 03e2 674B     		ldr	r3, .L396+12
 4061              	.L374:
 124:src/console.c ****     break;
 4062              		.loc 2 124 26 view .LVU1156
 4063 03e4 03EBC502 		add	r2, r3, r5, lsl #3
 4064 03e8 92E80300 		ldm	r2, {r0, r1}
 4065 03ec 0DF1080A 		add	r10, sp, #8
 4066 03f0 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4067              	.LVL347:
 124:src/console.c ****     break;
 4068              		.loc 2 124 26 view .LVU1157
 4069 03f4 8946     		mov	r9, r1
 4070              	.LVL348:
 124:src/console.c ****     break;
 4071              		.loc 2 124 26 view .LVU1158
 4072 03f6 8AE80300 		stm	r10, {r0, r1}
 4073 03fa 42E7     		b	.L315
 4074              	.LVL349:
 4075              	.L377:
  64:src/console.c **** 
 4076              		.loc 2 64 16 is_stmt 1 view .LVU1159
  64:src/console.c **** 
 4077              		.loc 2 64 23 is_stmt 0 view .LVU1160
ARM GAS  /tmp/ccgLZIWS.s 			page 112


 4078 03fc 614B     		ldr	r3, .L396+16
 4079 03fe 38E7     		b	.L375
 4080              	.LVL350:
 4081              	.L388:
  64:src/console.c **** 
 4082              		.loc 2 64 23 view .LVU1161
 4083              	.LBE153:
 4084              	.LBE167:
 4085              	.LBB168:
 4086              	.LBB163:
 111:src/menu.c    ****   }
 4087              		.loc 1 111 5 is_stmt 1 view .LVU1162
 111:src/menu.c    ****   }
 4088              		.loc 1 111 18 is_stmt 0 view .LVU1163
 4089 0400 6149     		ldr	r1, .L396+20
 4090              	.LVL351:
 111:src/menu.c    ****   }
 4091              		.loc 1 111 18 view .LVU1164
 4092 0402 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4093 0404 1170     		strb	r1, [r2]
 4094 0406 DEE6     		b	.L344
 4095              	.LVL352:
 4096              	.L331:
 111:src/menu.c    ****   }
 4097              		.loc 1 111 18 view .LVU1165
 4098              	.LBE163:
 4099              	.LBE168:
 4100              	.LBB169:
 4101              	.LBB154:
  95:src/console.c ****   }
 4102              		.loc 2 95 5 is_stmt 1 view .LVU1166
  95:src/console.c ****   }
 4103              		.loc 2 95 9 is_stmt 0 view .LVU1167
 4104 0408 FFF7FEFF 		bl	cur_shift
 4105              	.LVL353:
  95:src/console.c ****   }
 4106              		.loc 2 95 8 view .LVU1168
 4107 040c 0128     		cmp	r0, #1
 4108 040e 56D0     		beq	.L391
 4109              	.L318:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4110              		.loc 2 98 3 is_stmt 1 view .LVU1169
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4111              		.loc 2 98 8 is_stmt 0 view .LVU1170
 4112 0410 FFF7FEFF 		bl	get_alpha_state
 4113              	.LVL354:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4114              		.loc 2 98 6 view .LVU1171
 4115 0414 D8B3     		cbz	r0, .L332
  99:src/console.c ****       switch (cur_shift()) { 
 4116              		.loc 2 99 5 is_stmt 1 view .LVU1172
  99:src/console.c ****       switch (cur_shift()) { 
 4117              		.loc 2 99 8 is_stmt 0 view .LVU1173
 4118 0416 1C2D     		cmp	r5, #28
 4119 0418 00F08580 		beq	.L392
 116:src/console.c ****   }
 4120              		.loc 2 116 5 is_stmt 1 view .LVU1174
ARM GAS  /tmp/ccgLZIWS.s 			page 113


 116:src/console.c ****   }
 4121              		.loc 2 116 26 is_stmt 0 view .LVU1175
 4122 041c 5B4B     		ldr	r3, .L396+24
 4123 041e E1E7     		b	.L374
 4124              	.L325:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4125              		.loc 2 79 5 is_stmt 1 view .LVU1176
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4126              		.loc 2 79 9 is_stmt 0 view .LVU1177
 4127 0420 FFF7FEFF 		bl	cur_shift
 4128              	.LVL355:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4129              		.loc 2 79 8 view .LVU1178
 4130 0424 0028     		cmp	r0, #0
 4131 0426 7FF484AE 		bne	.L326
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4132              		.loc 2 79 33 is_stmt 1 view .LVU1179
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4133              		.loc 2 79 51 is_stmt 0 view .LVU1180
 4134 042a DDE90801 		ldrd	r0, r1, [sp, #32]
 4135 042e 0DF1080A 		add	r10, sp, #8
 4136 0432 8AE80300 		stm	r10, {r0, r1}
 4137 0436 9DF82050 		ldrb	r5, [sp, #32]	@ zero_extendqisi2
 4138              	.LVL356:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4139              		.loc 2 79 51 view .LVU1181
 4140 043a 8946     		mov	r9, r1
 4141              	.LVL357:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4142              		.loc 2 79 51 view .LVU1182
 4143 043c 21E7     		b	.L315
 4144              	.LVL358:
 4145              	.L386:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4146              		.loc 2 91 33 is_stmt 1 view .LVU1183
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4147              		.loc 2 91 51 is_stmt 0 view .LVU1184
 4148 043e DDE92801 		ldrd	r0, r1, [sp, #160]
 4149 0442 0DF1080A 		add	r10, sp, #8
 4150 0446 8AE80300 		stm	r10, {r0, r1}
 4151 044a 9DF8A050 		ldrb	r5, [sp, #160]	@ zero_extendqisi2
 4152              	.LVL359:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4153              		.loc 2 91 51 view .LVU1185
 4154 044e 8946     		mov	r9, r1
 4155              	.LVL360:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4156              		.loc 2 91 51 view .LVU1186
 4157 0450 17E7     		b	.L315
 4158              	.LVL361:
 4159              	.L384:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4160              		.loc 2 88 33 is_stmt 1 view .LVU1187
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4161              		.loc 2 88 51 is_stmt 0 view .LVU1188
 4162 0452 DDE92001 		ldrd	r0, r1, [sp, #128]
 4163 0456 0DF1080A 		add	r10, sp, #8
ARM GAS  /tmp/ccgLZIWS.s 			page 114


 4164 045a 8AE80300 		stm	r10, {r0, r1}
 4165 045e 9DF88050 		ldrb	r5, [sp, #128]	@ zero_extendqisi2
 4166              	.LVL362:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4167              		.loc 2 88 51 view .LVU1189
 4168 0462 8946     		mov	r9, r1
 4169              	.LVL363:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4170              		.loc 2 88 51 view .LVU1190
 4171 0464 0DE7     		b	.L315
 4172              	.LVL364:
 4173              	.L382:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4174              		.loc 2 85 33 is_stmt 1 view .LVU1191
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4175              		.loc 2 85 51 is_stmt 0 view .LVU1192
 4176 0466 DDE91801 		ldrd	r0, r1, [sp, #96]
 4177 046a 0DF1080A 		add	r10, sp, #8
 4178 046e 8AE80300 		stm	r10, {r0, r1}
 4179 0472 9DF86050 		ldrb	r5, [sp, #96]	@ zero_extendqisi2
 4180              	.LVL365:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4181              		.loc 2 85 51 view .LVU1193
 4182 0476 8946     		mov	r9, r1
 4183              	.LVL366:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4184              		.loc 2 85 51 view .LVU1194
 4185 0478 03E7     		b	.L315
 4186              	.LVL367:
 4187              	.L380:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4188              		.loc 2 82 33 is_stmt 1 view .LVU1195
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4189              		.loc 2 82 51 is_stmt 0 view .LVU1196
 4190 047a DDE91001 		ldrd	r0, r1, [sp, #64]
 4191 047e 0DF1080A 		add	r10, sp, #8
 4192 0482 8AE80300 		stm	r10, {r0, r1}
 4193 0486 9DF84050 		ldrb	r5, [sp, #64]	@ zero_extendqisi2
 4194              	.LVL368:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4195              		.loc 2 82 51 view .LVU1197
 4196 048a 8946     		mov	r9, r1
 4197              	.LVL369:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4198              		.loc 2 82 51 view .LVU1198
 4199 048c F9E6     		b	.L315
 4200              	.LVL370:
 4201              	.L332:
 119:src/console.c ****   case SHIFT_N:    
 4202              		.loc 2 119 3 is_stmt 1 view .LVU1199
 119:src/console.c ****   case SHIFT_N:    
 4203              		.loc 2 119 11 is_stmt 0 view .LVU1200
 4204 048e FFF7FEFF 		bl	cur_shift
 4205              	.LVL371:
 119:src/console.c ****   case SHIFT_N:    
 4206              		.loc 2 119 3 view .LVU1201
 4207 0492 0128     		cmp	r0, #1
ARM GAS  /tmp/ccgLZIWS.s 			page 115


 4208 0494 45D0     		beq	.L339
 4209 0496 0228     		cmp	r0, #2
 4210 0498 02D0     		beq	.L340
 4211 049a 70B1     		cbz	r0, .L341
  58:src/console.c **** 
 4212              		.loc 2 58 41 view .LVU1202
 4213 049c EDB2     		uxtb	r5, r5
 4214              	.LVL372:
  58:src/console.c **** 
 4215              		.loc 2 58 41 view .LVU1203
 4216 049e F0E6     		b	.L315
 4217              	.LVL373:
 4218              	.L340:
 125:src/console.c ****   case SHIFT_G:
 4219              		.loc 2 125 5 is_stmt 1 view .LVU1204
 127:src/console.c ****     break;
 4220              		.loc 2 127 5 view .LVU1205
 127:src/console.c ****     break;
 4221              		.loc 2 127 26 is_stmt 0 view .LVU1206
 4222 04a0 3B4B     		ldr	r3, .L396+28
 4223 04a2 03EBC502 		add	r2, r3, r5, lsl #3
 4224 04a6 92E80300 		ldm	r2, {r0, r1}
 4225 04aa 0DF1080A 		add	r10, sp, #8
 4226 04ae 8AE80300 		stm	r10, {r0, r1}
 4227 04b2 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4228              	.LVL374:
 127:src/console.c ****     break;
 4229              		.loc 2 127 26 view .LVU1207
 4230 04b6 8946     		mov	r9, r1
 4231              	.LVL375:
 127:src/console.c ****     break;
 4232              		.loc 2 127 26 view .LVU1208
 4233 04b8 E3E6     		b	.L315
 4234              	.LVL376:
 4235              	.L341:
 121:src/console.c ****     break;
 4236              		.loc 2 121 5 is_stmt 1 view .LVU1209
 121:src/console.c ****     break;
 4237              		.loc 2 121 24 is_stmt 0 view .LVU1210
 4238 04ba 364B     		ldr	r3, .L396+32
 4239 04bc 92E7     		b	.L374
 4240              	.L391:
  95:src/console.c ****   }
 4241              		.loc 2 95 33 is_stmt 1 view .LVU1211
  95:src/console.c ****   }
 4242              		.loc 2 95 51 is_stmt 0 view .LVU1212
 4243 04be DDE93201 		ldrd	r0, r1, [sp, #200]
 4244 04c2 0DF1080A 		add	r10, sp, #8
 4245 04c6 8AE80300 		stm	r10, {r0, r1}
 4246 04ca 9DF8C850 		ldrb	r5, [sp, #200]	@ zero_extendqisi2
 4247              	.LVL377:
  95:src/console.c ****   }
 4248              		.loc 2 95 51 view .LVU1213
 4249 04ce 8946     		mov	r9, r1
 4250              	.LVL378:
  95:src/console.c ****   }
 4251              		.loc 2 95 51 view .LVU1214
ARM GAS  /tmp/ccgLZIWS.s 			page 116


 4252 04d0 D7E6     		b	.L315
 4253              	.LVL379:
 4254              	.L385:
  89:src/console.c ****   case KEY_F5:
 4255              		.loc 2 89 33 is_stmt 1 view .LVU1215
  89:src/console.c ****   case KEY_F5:
 4256              		.loc 2 89 51 is_stmt 0 view .LVU1216
 4257 04d2 DDE92201 		ldrd	r0, r1, [sp, #136]
 4258 04d6 0DF1080A 		add	r10, sp, #8
 4259 04da 8AE80300 		stm	r10, {r0, r1}
 4260 04de 9DF88850 		ldrb	r5, [sp, #136]	@ zero_extendqisi2
 4261              	.LVL380:
  89:src/console.c ****   case KEY_F5:
 4262              		.loc 2 89 51 view .LVU1217
 4263 04e2 8946     		mov	r9, r1
 4264              	.LVL381:
  89:src/console.c ****   case KEY_F5:
 4265              		.loc 2 89 51 view .LVU1218
 4266 04e4 CDE6     		b	.L315
 4267              	.LVL382:
 4268              	.L387:
  92:src/console.c ****   case KEY_F6:
 4269              		.loc 2 92 33 is_stmt 1 view .LVU1219
  92:src/console.c ****   case KEY_F6:
 4270              		.loc 2 92 51 is_stmt 0 view .LVU1220
 4271 04e6 DDE92A01 		ldrd	r0, r1, [sp, #168]
 4272 04ea 0DF1080A 		add	r10, sp, #8
 4273 04ee 8AE80300 		stm	r10, {r0, r1}
 4274 04f2 9DF8A850 		ldrb	r5, [sp, #168]	@ zero_extendqisi2
 4275              	.LVL383:
  92:src/console.c ****   case KEY_F6:
 4276              		.loc 2 92 51 view .LVU1221
 4277 04f6 8946     		mov	r9, r1
 4278              	.LVL384:
  92:src/console.c ****   case KEY_F6:
 4279              		.loc 2 92 51 view .LVU1222
 4280 04f8 C3E6     		b	.L315
 4281              	.LVL385:
 4282              	.L383:
  86:src/console.c ****   case KEY_F4:
 4283              		.loc 2 86 33 is_stmt 1 view .LVU1223
  86:src/console.c ****   case KEY_F4:
 4284              		.loc 2 86 51 is_stmt 0 view .LVU1224
 4285 04fa DDE91A01 		ldrd	r0, r1, [sp, #104]
 4286 04fe 0DF1080A 		add	r10, sp, #8
 4287 0502 8AE80300 		stm	r10, {r0, r1}
 4288 0506 9DF86850 		ldrb	r5, [sp, #104]	@ zero_extendqisi2
 4289              	.LVL386:
  86:src/console.c ****   case KEY_F4:
 4290              		.loc 2 86 51 view .LVU1225
 4291 050a 8946     		mov	r9, r1
 4292              	.LVL387:
  86:src/console.c ****   case KEY_F4:
 4293              		.loc 2 86 51 view .LVU1226
 4294 050c B9E6     		b	.L315
 4295              	.LVL388:
 4296              	.L381:
ARM GAS  /tmp/ccgLZIWS.s 			page 117


  83:src/console.c ****   case KEY_F3:
 4297              		.loc 2 83 33 is_stmt 1 view .LVU1227
  83:src/console.c ****   case KEY_F3:
 4298              		.loc 2 83 51 is_stmt 0 view .LVU1228
 4299 050e DDE91201 		ldrd	r0, r1, [sp, #72]
 4300 0512 0DF1080A 		add	r10, sp, #8
 4301 0516 8AE80300 		stm	r10, {r0, r1}
 4302 051a 9DF84850 		ldrb	r5, [sp, #72]	@ zero_extendqisi2
 4303              	.LVL389:
  83:src/console.c ****   case KEY_F3:
 4304              		.loc 2 83 51 view .LVU1229
 4305 051e 8946     		mov	r9, r1
 4306              	.LVL390:
  83:src/console.c ****   case KEY_F3:
 4307              		.loc 2 83 51 view .LVU1230
 4308 0520 AFE6     		b	.L315
 4309              	.LVL391:
 4310              	.L339:
 122:src/console.c ****   case SHIFT_F:
 4311              		.loc 2 122 5 is_stmt 1 view .LVU1231
 124:src/console.c ****     break;
 4312              		.loc 2 124 5 view .LVU1232
 124:src/console.c ****     break;
 4313              		.loc 2 124 26 is_stmt 0 view .LVU1233
 4314 0522 1D4B     		ldr	r3, .L396+36
 4315 0524 5EE7     		b	.L374
 4316              	.L392:
 100:src/console.c ****       case SHIFT_N:
 4317              		.loc 2 100 7 is_stmt 1 view .LVU1234
 100:src/console.c ****       case SHIFT_N:
 4318              		.loc 2 100 15 is_stmt 0 view .LVU1235
 4319 0526 FFF7FEFF 		bl	cur_shift
 4320              	.LVL392:
 100:src/console.c ****       case SHIFT_N:
 4321              		.loc 2 100 7 view .LVU1236
 4322 052a 0328     		cmp	r0, #3
 4323 052c 3FF6CCAE 		bhi	.L376
 4324 0530 0128     		cmp	r0, #1
 4325 0532 09D8     		bhi	.L335
 4326 0534 A0B1     		cbz	r0, .L393
 103:src/console.c ****       case SHIFT_F:
 4327              		.loc 2 103 2 is_stmt 1 view .LVU1237
 105:src/console.c **** 	break;
 4328              		.loc 2 105 2 view .LVU1238
 105:src/console.c **** 	break;
 4329              		.loc 2 105 23 is_stmt 0 view .LVU1239
 4330 0536 194B     		ldr	r3, .L396+40
 4331 0538 93E80300 		ldm	r3, {r0, r1}
 4332 053c 0DF1080A 		add	r10, sp, #8
 4333 0540 8AE80300 		stm	r10, {r0, r1}
 4334              	.LVL393:
 105:src/console.c **** 	break;
 4335              		.loc 2 105 23 view .LVU1240
 4336              	.LBE154:
 4337              	.LBE169:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4338              		.loc 2 521 7 is_stmt 1 view .LVU1241
ARM GAS  /tmp/ccgLZIWS.s 			page 118


 527:src/console.c **** 	SET_ST(STAT_MENU);
 4339              		.loc 2 527 7 view .LVU1242
 535:src/console.c **** 	remapped = do_multi (remapped);
 4340              		.loc 2 535 7 view .LVU1243
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4341              		.loc 2 539 7 view .LVU1244
 4342              	.LBB170:
 4343              	.LBB155:
 105:src/console.c **** 	break;
 4344              		.loc 2 105 23 is_stmt 0 view .LVU1245
 4345 0544 2A25     		movs	r5, #42
 4346              	.LVL394:
 105:src/console.c **** 	break;
 4347              		.loc 2 105 23 view .LVU1246
 4348 0546 C1E6     		b	.L338
 4349              	.LVL395:
 4350              	.L335:
 106:src/console.c ****       case SHIFT_G:
 4351              		.loc 2 106 2 is_stmt 1 view .LVU1247
 108:src/console.c **** 	break;
 4352              		.loc 2 108 2 view .LVU1248
 108:src/console.c **** 	break;
 4353              		.loc 2 108 9 is_stmt 0 view .LVU1249
 4354 0548 154B     		ldr	r3, .L396+44
 4355 054a 92E6     		b	.L375
 4356              	.L379:
  80:src/console.c ****   case KEY_F2:
 4357              		.loc 2 80 33 is_stmt 1 view .LVU1250
  80:src/console.c ****   case KEY_F2:
 4358              		.loc 2 80 51 is_stmt 0 view .LVU1251
 4359 054c DDE90A01 		ldrd	r0, r1, [sp, #40]
 4360 0550 0DF1080A 		add	r10, sp, #8
 4361 0554 8AE80300 		stm	r10, {r0, r1}
 4362 0558 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 4363              	.LVL396:
  80:src/console.c ****   case KEY_F2:
 4364              		.loc 2 80 51 view .LVU1252
 4365 055c 8946     		mov	r9, r1
 4366              	.LVL397:
  80:src/console.c ****   case KEY_F2:
 4367              		.loc 2 80 51 view .LVU1253
 4368 055e 90E6     		b	.L315
 4369              	.LVL398:
 4370              	.L393:
 102:src/console.c **** 	break;
 4371              		.loc 2 102 2 is_stmt 1 view .LVU1254
 102:src/console.c **** 	break;
 4372              		.loc 2 102 21 is_stmt 0 view .LVU1255
 4373 0560 104B     		ldr	r3, .L396+48
 4374 0562 93E80300 		ldm	r3, {r0, r1}
 4375 0566 0DF1080A 		add	r10, sp, #8
 4376 056a 8AE80300 		stm	r10, {r0, r1}
 4377              	.LVL399:
 102:src/console.c **** 	break;
 4378              		.loc 2 102 21 view .LVU1256
 4379              	.LBE155:
 4380              	.LBE170:
ARM GAS  /tmp/ccgLZIWS.s 			page 119


 521:src/console.c **** 	set_menu ( remapped.shift );
 4381              		.loc 2 521 7 is_stmt 1 view .LVU1257
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4382              		.loc 2 527 7 view .LVU1258
 535:src/console.c **** 	remapped = do_multi (remapped);
 4383              		.loc 2 535 7 view .LVU1259
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4384              		.loc 2 539 7 view .LVU1260
 4385              	.LBB171:
 4386              	.LBB156:
 102:src/console.c **** 	break;
 4387              		.loc 2 102 21 is_stmt 0 view .LVU1261
 4388 056e 2925     		movs	r5, #41
 4389              	.LVL400:
 102:src/console.c **** 	break;
 4390              		.loc 2 102 21 view .LVU1262
 4391 0570 ACE6     		b	.L338
 4392              	.L397:
 4393 0572 00BF     		.align	2
 4394              	.L396:
 4395 0574 00000000 		.word	StopWatchStatus
 4396 0578 CDCCCCCC 		.word	-858993459
 4397 057c 99999919 		.word	429496729
 4398 0580 00000000 		.word	.LANCHOR12
 4399 0584 00000000 		.word	.LANCHOR11
 4400 0588 00000000 		.word	.LANCHOR2
 4401 058c 00000000 		.word	.LANCHOR16
 4402 0590 00000000 		.word	.LANCHOR17
 4403 0594 00000000 		.word	.LANCHOR13
 4404 0598 00000000 		.word	.LANCHOR14
 4405 059c E0000000 		.word	.LANCHOR14+224
 4406 05a0 00000000 		.word	.LANCHOR15
 4407 05a4 E0000000 		.word	.LANCHOR13+224
 4408              	.LBE156:
 4409              	.LBE171:
 4410              		.cfi_endproc
 4411              	.LFE32:
 4413              		.global	n_p
 4414              		.comm	print_string,22,4
 4415              		.global	spaces
 4416              		.global	release
 4417              		.global	h_shift
 4418              		.global	g_shift
 4419              		.global	f_shift
 4420              		.global	heartbeat
 4421              		.global	no_key
 4422              		.global	MID_MENU
 4423              		.section	.rodata.str1.4,"aMS",%progbits,1
 4424              		.align	2
 4425              	.LC12:
 4426 0000 53797374 		.ascii	"System!\000"
 4426      656D2100 
 4427              		.global	mid_menu
 4428              		.global	default_menu
 4429              		.global	last_menu
 4430              		.global	current_menu
 4431              		.global	cmplx_key_string
ARM GAS  /tmp/ccgLZIWS.s 			page 120


 4432              		.align	2
 4433              	.LC13:
 4434 0008 43505800 		.ascii	"CPX\000"
 4435              		.global	arrow_key_string
 4436              		.align	2
 4437              	.LC14:
 4438 000c 2D2D0D00 		.ascii	"--\015\000"
 4439              		.global	UserMenu
 4440              		.section	.rodata
 4441              		.align	2
 4442              		.set	.LANCHOR7,. + 0
 4443              	.LC8:
 4444 0000 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4444      2A2B0708 
 4444      091C0B0C 
 4444      0D0E0F
 4445 000f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4445      13141516 
 4445      00121819 
 4445      1A
 4446 001c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4446      1E1F2000 
 4446      21222324 
 4446      25
 4447              		.section	.bss.current_menu,"aw",%nobits
 4448              		.set	.LANCHOR1,. + 0
 4451              	current_menu:
 4452 0000 00       		.space	1
 4453              		.section	.bss.default_menu,"aw",%nobits
 4454              		.set	.LANCHOR2,. + 0
 4457              	default_menu:
 4458 0000 00       		.space	1
 4459              		.section	.bss.last_menu,"aw",%nobits
 4460              		.set	.LANCHOR3,. + 0
 4463              	last_menu:
 4464 0000 00       		.space	1
 4465              		.section	.bss.mdots,"aw",%nobits
 4466              		.align	2
 4467              		.set	.LANCHOR0,. + 0
 4470              	mdots:
 4471 0000 00000000 		.space	400
 4471      00000000 
 4471      00000000 
 4471      00000000 
 4471      00000000 
 4472              		.section	.bss.n_p,"aw",%nobits
 4473              		.align	2
 4476              	n_p:
 4477 0000 00000000 		.space	4
 4478              		.section	.bss.start_ticks,"aw",%nobits
 4479              		.align	2
 4480              		.set	.LANCHOR8,. + 0
 4483              	start_ticks:
 4484 0000 00000000 		.space	4
 4485              		.section	.data.UserMenu,"aw"
 4486              		.align	2
 4487              		.set	.LANCHOR4,. + 0
ARM GAS  /tmp/ccgLZIWS.s 			page 121


 4490              	UserMenu:
 4491 0000 55736572 		.ascii	"User Menu\000"
 4491      204D656E 
 4491      7500
 4492 000a 00000000 		.space	5
 4492      00
 4493 000f 00       		.space	1
 4494 0010 2E       		.byte	46
 4495 0011 000000   		.space	3
 4496 0014 FFFFFFFF 		.word	-1
 4497 0018 2E       		.byte	46
 4498 0019 000000   		.space	3
 4499 001c FFFFFFFF 		.word	-1
 4500 0020 00       		.ascii	"\000"
 4501 0021 00000000 		.space	7
 4501      000000
 4502 0028 00       		.ascii	"\000"
 4503 0029 00000000 		.space	7
 4503      000000
 4504 0030 2E       		.byte	46
 4505 0031 000000   		.space	3
 4506 0034 FFFFFFFF 		.word	-1
 4507 0038 2E       		.byte	46
 4508 0039 000000   		.space	3
 4509 003c FFFFFFFF 		.word	-1
 4510 0040 00       		.ascii	"\000"
 4511 0041 00000000 		.space	7
 4511      000000
 4512 0048 00       		.ascii	"\000"
 4513 0049 00000000 		.space	7
 4513      000000
 4514 0050 2E       		.byte	46
 4515 0051 000000   		.space	3
 4516 0054 FFFFFFFF 		.word	-1
 4517 0058 2E       		.byte	46
 4518 0059 000000   		.space	3
 4519 005c FFFFFFFF 		.word	-1
 4520 0060 00       		.ascii	"\000"
 4521 0061 00000000 		.space	7
 4521      000000
 4522 0068 00       		.ascii	"\000"
 4523 0069 00000000 		.space	7
 4523      000000
 4524 0070 2E       		.byte	46
 4525 0071 000000   		.space	3
 4526 0074 FFFFFFFF 		.word	-1
 4527 0078 2E       		.byte	46
 4528 0079 000000   		.space	3
 4529 007c FFFFFFFF 		.word	-1
 4530 0080 00       		.ascii	"\000"
 4531 0081 00000000 		.space	7
 4531      000000
 4532 0088 00       		.ascii	"\000"
 4533 0089 00000000 		.space	7
 4533      000000
 4534 0090 2C       		.byte	44
 4535 0091 000000   		.space	3
ARM GAS  /tmp/ccgLZIWS.s 			page 122


 4536 0094 FFFFFFFF 		.word	-1
 4537 0098 2E       		.byte	46
 4538 0099 000000   		.space	3
 4539 009c FFFFFFFF 		.word	-1
 4540 00a0 2D2D0D00 		.ascii	"--\015\000"
 4541 00a4 00000000 		.space	4
 4542 00a8 00       		.ascii	"\000"
 4543 00a9 00000000 		.space	7
 4543      000000
 4544 00b0 2D       		.byte	45
 4545 00b1 000000   		.space	3
 4546 00b4 FFFFFFFF 		.word	-1
 4547 00b8 31       		.byte	49
 4548 00b9 000000   		.space	3
 4549 00bc 0B000000 		.word	11
 4550 00c0 43505800 		.ascii	"CPX\000"
 4551 00c4 00000000 		.space	4
 4552 00c8 00       		.ascii	"\000"
 4553 00c9 00000000 		.space	7
 4553      000000
 4554              		.section	.data.arrow_key_string,"aw"
 4555              		.align	2
 4556              		.set	.LANCHOR5,. + 0
 4559              	arrow_key_string:
 4560 0000 0C000000 		.word	.LC14
 4561              		.section	.data.cmplx_key_string,"aw"
 4562              		.align	2
 4563              		.set	.LANCHOR6,. + 0
 4566              	cmplx_key_string:
 4567 0000 08000000 		.word	.LC13
 4568              		.section	.data.f_shift,"aw"
 4569              		.align	2
 4572              	f_shift:
 4573 0000 29       		.byte	41
 4574 0001 000000   		.space	3
 4575 0004 FFFFFFFF 		.word	-1
 4576              		.section	.data.g_shift,"aw"
 4577              		.align	2
 4580              	g_shift:
 4581 0000 2A       		.byte	42
 4582 0001 000000   		.space	3
 4583 0004 FFFFFFFF 		.word	-1
 4584              		.section	.data.h_shift,"aw"
 4585              		.align	2
 4586              		.set	.LANCHOR15,. + 0
 4589              	h_shift:
 4590 0000 2B       		.byte	43
 4591 0001 000000   		.space	3
 4592 0004 FFFFFFFF 		.word	-1
 4593              		.section	.data.heartbeat,"aw"
 4594              		.align	2
 4595              		.set	.LANCHOR19,. + 0
 4598              	heartbeat:
 4599 0000 62       		.byte	98
 4600 0001 000000   		.space	3
 4601 0004 FFFFFFFF 		.word	-1
 4602              		.section	.data.no_key,"aw"
ARM GAS  /tmp/ccgLZIWS.s 			page 123


 4603              		.align	2
 4604              		.set	.LANCHOR10,. + 0
 4607              	no_key:
 4608 0000 2E       		.byte	46
 4609 0001 000000   		.space	3
 4610 0004 00000000 		.word	0
 4611              		.section	.data.release,"aw"
 4612              		.align	2
 4613              		.set	.LANCHOR11,. + 0
 4616              	release:
 4617 0000 63       		.byte	99
 4618 0001 000000   		.space	3
 4619 0004 FFFFFFFF 		.word	-1
 4620              		.section	.data.spaces,"aw"
 4621              		.align	2
 4622              		.set	.LANCHOR9,. + 0
 4625              	spaces:
 4626 0000 20202020 		.ascii	"                     \000"
 4626      20202020 
 4626      20202020 
 4626      20202020 
 4626      20202020 
 4627              		.section	.rodata.MID_MENU,"a"
 4628              		.align	2
 4629              		.set	.LANCHOR18,. + 0
 4632              	MID_MENU:
 4633 0000 00000000 		.word	.LC12
 4634 0004 00000000 		.word	mid_menu
 4635 0008 00000000 		.word	0
 4636 000c 00000000 		.word	0
 4637              		.section	.rodata.Menus,"a"
 4638              		.align	2
 4641              	Menus:
 4642 0000 4D5F426C 		.ascii	"M_Blank\000"
 4642      616E6B00 
 4643 0008 00000000 		.space	7
 4643      000000
 4644 000f 00       		.space	1
 4645 0010 2E       		.byte	46
 4646 0011 000000   		.space	3
 4647 0014 FFFFFFFF 		.word	-1
 4648 0018 2E       		.byte	46
 4649 0019 000000   		.space	3
 4650 001c FFFFFFFF 		.word	-1
 4651 0020 00       		.ascii	"\000"
 4652 0021 00000000 		.space	7
 4652      000000
 4653 0028 00       		.ascii	"\000"
 4654 0029 00000000 		.space	7
 4654      000000
 4655 0030 2E       		.byte	46
 4656 0031 000000   		.space	3
 4657 0034 FFFFFFFF 		.word	-1
 4658 0038 2E       		.byte	46
 4659 0039 000000   		.space	3
 4660 003c FFFFFFFF 		.word	-1
 4661 0040 00       		.ascii	"\000"
ARM GAS  /tmp/ccgLZIWS.s 			page 124


 4662 0041 00000000 		.space	7
 4662      000000
 4663 0048 00       		.ascii	"\000"
 4664 0049 00000000 		.space	7
 4664      000000
 4665 0050 2E       		.byte	46
 4666 0051 000000   		.space	3
 4667 0054 FFFFFFFF 		.word	-1
 4668 0058 2E       		.byte	46
 4669 0059 000000   		.space	3
 4670 005c FFFFFFFF 		.word	-1
 4671 0060 00       		.ascii	"\000"
 4672 0061 00000000 		.space	7
 4672      000000
 4673 0068 00       		.ascii	"\000"
 4674 0069 00000000 		.space	7
 4674      000000
 4675 0070 2E       		.byte	46
 4676 0071 000000   		.space	3
 4677 0074 FFFFFFFF 		.word	-1
 4678 0078 2E       		.byte	46
 4679 0079 000000   		.space	3
 4680 007c FFFFFFFF 		.word	-1
 4681 0080 00       		.ascii	"\000"
 4682 0081 00000000 		.space	7
 4682      000000
 4683 0088 00       		.ascii	"\000"
 4684 0089 00000000 		.space	7
 4684      000000
 4685 0090 2C       		.byte	44
 4686 0091 000000   		.space	3
 4687 0094 FFFFFFFF 		.word	-1
 4688 0098 2E       		.byte	46
 4689 0099 000000   		.space	3
 4690 009c FFFFFFFF 		.word	-1
 4691 00a0 2D2D0D00 		.ascii	"--\015\000"
 4692 00a4 00000000 		.space	4
 4693 00a8 00       		.ascii	"\000"
 4694 00a9 00000000 		.space	7
 4694      000000
 4695 00b0 2D       		.byte	45
 4696 00b1 000000   		.space	3
 4697 00b4 FFFFFFFF 		.word	-1
 4698 00b8 31       		.byte	49
 4699 00b9 000000   		.space	3
 4700 00bc 0B000000 		.word	11
 4701 00c0 43505800 		.ascii	"CPX\000"
 4702 00c4 00000000 		.space	4
 4703 00c8 00       		.ascii	"\000"
 4704 00c9 00000000 		.space	7
 4704      000000
 4705 00d0 4D5F436C 		.ascii	"M_Clear\000"
 4705      65617200 
 4706 00d8 00000000 		.space	7
 4706      000000
 4707 00df 00       		.space	1
 4708 00e0 10       		.byte	16
ARM GAS  /tmp/ccgLZIWS.s 			page 125


 4709 00e1 000000   		.space	3
 4710 00e4 01000000 		.word	1
 4711 00e8 34       		.byte	52
 4712 00e9 000000   		.space	3
 4713 00ec 44010000 		.word	324
 4714 00f0 434C5072 		.ascii	"CLProg\000"
 4714      6F6700
 4715 00f7 00       		.space	1
 4716 00f8 434C5041 		.ascii	"CLPAll\000"
 4716      6C6C00
 4717 00ff 00       		.space	1
 4718 0100 10       		.byte	16
 4719 0101 000000   		.space	3
 4720 0104 02000000 		.word	2
 4721 0108 34       		.byte	52
 4722 0109 000000   		.space	3
 4723 010c 3E010000 		.word	318
 4724 0110 434C9100 		.ascii	"CL\221\000"
 4725 0114 00000000 		.space	4
 4726 0118 434C5265 		.ascii	"CLReg\000"
 4726      6700
 4727 011e 0000     		.space	2
 4728 0120 10       		.byte	16
 4729 0121 000000   		.space	3
 4730 0124 03000000 		.word	3
 4731 0128 34       		.byte	52
 4732 0129 000000   		.space	3
 4733 012c 74010000 		.word	372
 4734 0130 434C7800 		.ascii	"CLx\000"
 4735 0134 00000000 		.space	4
 4736 0138 434C06A0 		.ascii	"CL\006\240\000"
 4736      00
 4737 013d 000000   		.space	3
 4738 0140 34       		.byte	52
 4739 0141 000000   		.space	3
 4740 0144 40010000 		.word	320
 4741 0148 34       		.byte	52
 4742 0149 000000   		.space	3
 4743 014c 41010000 		.word	321
 4744 0150 434C5374 		.ascii	"CLStk\000"
 4744      6B00
 4745 0156 0000     		.space	2
 4746 0158 434C416C 		.ascii	"CLAll\000"
 4746      6C00
 4747 015e 0000     		.space	2
 4748 0160 2C       		.byte	44
 4749 0161 000000   		.space	3
 4750 0164 FFFFFFFF 		.word	-1
 4751 0168 2E       		.byte	46
 4752 0169 000000   		.space	3
 4753 016c FFFFFFFF 		.word	-1
 4754 0170 2D2D0D00 		.ascii	"--\015\000"
 4755 0174 00000000 		.space	4
 4756 0178 00       		.ascii	"\000"
 4757 0179 00000000 		.space	7
 4757      000000
 4758 0180 2D       		.byte	45
ARM GAS  /tmp/ccgLZIWS.s 			page 126


 4759 0181 000000   		.space	3
 4760 0184 FFFFFFFF 		.word	-1
 4761 0188 2E       		.byte	46
 4762 0189 000000   		.space	3
 4763 018c FFFFFFFF 		.word	-1
 4764 0190 43505800 		.ascii	"CPX\000"
 4765 0194 00000000 		.space	4
 4766 0198 00       		.ascii	"\000"
 4767 0199 00000000 		.space	7
 4767      000000
 4768 01a0 4D5F4469 		.ascii	"M_Disp\000"
 4768      737000
 4769 01a7 00000000 		.space	8
 4769      00000000 
 4770 01af 00       		.space	1
 4771 01b0 00       		.byte	0
 4772 01b1 000000   		.space	3
 4773 01b4 03000000 		.word	3
 4774 01b8 05       		.byte	5
 4775 01b9 000000   		.space	3
 4776 01bc 01000000 		.word	1
 4777 01c0 414C4C00 		.ascii	"ALL\000"
 4778 01c4 00000000 		.space	4
 4779 01c8 6120622F 		.ascii	"a b/c\000"
 4779      6300
 4780 01ce 0000     		.space	2
 4781 01d0 01       		.byte	1
 4782 01d1 000000   		.space	3
 4783 01d4 03000000 		.word	3
 4784 01d8 05       		.byte	5
 4785 01d9 000000   		.space	3
 4786 01dc 02000000 		.word	2
 4787 01e0 46495800 		.ascii	"FIX\000"
 4788 01e4 00000000 		.space	4
 4789 01e8 642F6300 		.ascii	"d/c\000"
 4790 01ec 00000000 		.space	4
 4791 01f0 02       		.byte	2
 4792 01f1 000000   		.space	3
 4793 01f4 03000000 		.word	3
 4794 01f8 06       		.byte	6
 4795 01f9 000000   		.space	3
 4796 01fc 01000000 		.word	1
 4797 0200 53434900 		.ascii	"SCI\000"
 4798 0204 00000000 		.space	4
 4799 0208 482E4D53 		.ascii	"H.MS\000"
 4799      00
 4800 020d 000000   		.space	3
 4801 0210 03       		.byte	3
 4802 0211 000000   		.space	3
 4803 0214 03000000 		.word	3
 4804 0218 07       		.byte	7
 4805 0219 000000   		.space	3
 4806 021c 01000000 		.word	1
 4807 0220 454E4700 		.ascii	"ENG\000"
 4808 0224 00000000 		.space	4
 4809 0228 482E6400 		.ascii	"H.d\000"
 4810 022c 00000000 		.space	4
ARM GAS  /tmp/ccgLZIWS.s 			page 127


 4811 0230 2C       		.byte	44
 4812 0231 000000   		.space	3
 4813 0234 FFFFFFFF 		.word	-1
 4814 0238 26       		.byte	38
 4815 0239 000000   		.space	3
 4816 023c 03000000 		.word	3
 4817 0240 2D2D0D00 		.ascii	"--\015\000"
 4818 0244 00000000 		.space	4
 4819 0248 2E2F2C00 		.ascii	"./,\000"
 4820 024c 00000000 		.space	4
 4821 0250 2D       		.byte	45
 4822 0251 000000   		.space	3
 4823 0254 FFFFFFFF 		.word	-1
 4824 0258 2E       		.byte	46
 4825 0259 000000   		.space	3
 4826 025c FFFFFFFF 		.word	-1
 4827 0260 43505800 		.ascii	"CPX\000"
 4828 0264 00000000 		.space	4
 4829 0268 00       		.ascii	"\000"
 4830 0269 00000000 		.space	7
 4830      000000
 4831 0270 4D5F4261 		.ascii	"M_Base\000"
 4831      736500
 4832 0277 00000000 		.space	8
 4832      00000000 
 4833 027f 00       		.space	1
 4834 0280 0E       		.byte	14
 4835 0281 000000   		.space	3
 4836 0284 01000000 		.word	1
 4837 0288 0E       		.byte	14
 4838 0289 000000   		.space	3
 4839 028c 03000000 		.word	3
 4840 0290 42494E00 		.ascii	"BIN\000"
 4841 0294 00000000 		.space	4
 4842 0298 6E6F7400 		.ascii	"not\000"
 4843 029c 00000000 		.space	4
 4844 02a0 0E       		.byte	14
 4845 02a1 000000   		.space	3
 4846 02a4 02000000 		.word	2
 4847 02a8 13       		.byte	19
 4848 02a9 000000   		.space	3
 4849 02ac 03000000 		.word	3
 4850 02b0 4F435400 		.ascii	"OCT\000"
 4851 02b4 00000000 		.space	4
 4852 02b8 616E6400 		.ascii	"and\000"
 4853 02bc 00000000 		.space	4
 4854 02c0 0F       		.byte	15
 4855 02c1 000000   		.space	3
 4856 02c4 01000000 		.word	1
 4857 02c8 14       		.byte	20
 4858 02c9 000000   		.space	3
 4859 02cc 03000000 		.word	3
 4860 02d0 44454300 		.ascii	"DEC\000"
 4861 02d4 00000000 		.space	4
 4862 02d8 6F7200   		.ascii	"or\000"
 4863 02db 00000000 		.space	5
 4863      00
ARM GAS  /tmp/ccgLZIWS.s 			page 128


 4864 02e0 0F       		.byte	15
 4865 02e1 000000   		.space	3
 4866 02e4 02000000 		.word	2
 4867 02e8 15       		.byte	21
 4868 02e9 000000   		.space	3
 4869 02ec 03000000 		.word	3
 4870 02f0 48455800 		.ascii	"HEX\000"
 4871 02f4 00000000 		.space	4
 4872 02f8 786F7200 		.ascii	"xor\000"
 4873 02fc 00000000 		.space	4
 4874 0300 2C       		.byte	44
 4875 0301 000000   		.space	3
 4876 0304 FFFFFFFF 		.word	-1
 4877 0308 16       		.byte	22
 4878 0309 000000   		.space	3
 4879 030c 03000000 		.word	3
 4880 0310 2D2D0D00 		.ascii	"--\015\000"
 4881 0314 00000000 		.space	4
 4882 0318 524D4452 		.ascii	"RMDR\000"
 4882      00
 4883 031d 000000   		.space	3
 4884 0320 2D       		.byte	45
 4885 0321 000000   		.space	3
 4886 0324 FFFFFFFF 		.word	-1
 4887 0328 07       		.byte	7
 4888 0329 000000   		.space	3
 4889 032c 01000000 		.word	1
 4890 0330 43505800 		.ascii	"CPX\000"
 4891 0334 00000000 		.space	4
 4892 0338 482E6400 		.ascii	"H.d\000"
 4893 033c 00000000 		.space	4
 4894 0340 4D5F416E 		.ascii	"M_Angles\000"
 4894      676C6573 
 4894      00
 4895 0349 00000000 		.space	6
 4895      0000
 4896 034f 00       		.space	1
 4897 0350 06       		.byte	6
 4898 0351 000000   		.space	3
 4899 0354 02000000 		.word	2
 4900 0358 04       		.byte	4
 4901 0359 000000   		.space	3
 4902 035c 01000000 		.word	1
 4903 0360 44454700 		.ascii	"DEG\000"
 4904 0364 00000000 		.space	4
 4905 0368 500D5200 		.ascii	"P\015R\000"
 4906 036c 00000000 		.space	4
 4907 0370 07       		.byte	7
 4908 0371 000000   		.space	3
 4909 0374 02000000 		.word	2
 4910 0378 04       		.byte	4
 4911 0379 000000   		.space	3
 4912 037c 02000000 		.word	2
 4913 0380 52414400 		.ascii	"RAD\000"
 4914 0384 00000000 		.space	4
 4915 0388 520D5000 		.ascii	"R\015P\000"
 4916 038c 00000000 		.space	4
ARM GAS  /tmp/ccgLZIWS.s 			page 129


 4917 0390 08       		.byte	8
 4918 0391 000000   		.space	3
 4919 0394 02000000 		.word	2
 4920 0398 00       		.byte	0
 4921 0399 000000   		.space	3
 4922 039c 01000000 		.word	1
 4923 03a0 47524144 		.ascii	"GRAD\000"
 4923      00
 4924 03a5 000000   		.space	3
 4925 03a8 48595000 		.ascii	"HYP\000"
 4926 03ac 00000000 		.space	4
 4927 03b0 06       		.byte	6
 4928 03b1 000000   		.space	3
 4929 03b4 01000000 		.word	1
 4930 03b8 07       		.byte	7
 4931 03b9 000000   		.space	3
 4932 03bc 01000000 		.word	1
 4933 03c0 482E4D53 		.ascii	"H.MS\000"
 4933      00
 4934 03c5 000000   		.space	3
 4935 03c8 482E6400 		.ascii	"H.d\000"
 4936 03cc 00000000 		.space	4
 4937 03d0 2C       		.byte	44
 4938 03d1 000000   		.space	3
 4939 03d4 FFFFFFFF 		.word	-1
 4940 03d8 00       		.byte	0
 4941 03d9 000000   		.space	3
 4942 03dc 02000000 		.word	2
 4943 03e0 2D2D0D00 		.ascii	"--\015\000"
 4944 03e4 00000000 		.space	4
 4945 03e8 4859509D 		.ascii	"HYP\235\000"
 4945      00
 4946 03ed 000000   		.space	3
 4947 03f0 2D       		.byte	45
 4948 03f1 000000   		.space	3
 4949 03f4 FFFFFFFF 		.word	-1
 4950 03f8 2E       		.byte	46
 4951 03f9 000000   		.space	3
 4952 03fc FFFFFFFF 		.word	-1
 4953 0400 43505800 		.ascii	"CPX\000"
 4954 0404 00000000 		.space	4
 4955 0408 00       		.ascii	"\000"
 4956 0409 00000000 		.space	7
 4956      000000
 4957 0410 4D5F4D69 		.ascii	"M_Misc\000"
 4957      736300
 4958 0417 00000000 		.space	8
 4958      00000000 
 4959 041f 00       		.space	1
 4960 0420 25       		.byte	37
 4961 0421 000000   		.space	3
 4962 0424 01000000 		.word	1
 4963 0428 14       		.byte	20
 4964 0429 000000   		.space	3
 4965 042c 01000000 		.word	1
 4966 0430 7C587C00 		.ascii	"|X|\000"
 4967 0434 00000000 		.space	4
ARM GAS  /tmp/ccgLZIWS.s 			page 130


 4968 0438 329C00   		.ascii	"2\234\000"
 4969 043b 00000000 		.space	5
 4969      00
 4970 0440 25       		.byte	37
 4971 0441 000000   		.space	3
 4972 0444 02000000 		.word	2
 4973 0448 14       		.byte	20
 4974 0449 000000   		.space	3
 4975 044c 02000000 		.word	2
 4976 0450 524E4400 		.ascii	"RND\000"
 4977 0454 00000000 		.space	4
 4978 0458 4C6F67BA 		.ascii	"Log\272\000"
 4978      00
 4979 045d 000000   		.space	3
 4980 0460 26       		.byte	38
 4981 0461 000000   		.space	3
 4982 0464 01000000 		.word	1
 4983 0468 15       		.byte	21
 4984 0469 000000   		.space	3
 4985 046c 02000000 		.word	2
 4986 0470 49506172 		.ascii	"IPart\000"
 4986      7400
 4987 0476 0000     		.space	2
 4988 0478 4C6F678B 		.ascii	"Log\213\000"
 4988      00
 4989 047d 000000   		.space	3
 4990 0480 26       		.byte	38
 4991 0481 000000   		.space	3
 4992 0484 02000000 		.word	2
 4993 0488 16       		.byte	22
 4994 0489 000000   		.space	3
 4995 048c 02000000 		.word	2
 4996 0490 46506172 		.ascii	"FPart\000"
 4996      7400
 4997 0496 0000     		.space	2
 4998 0498 7C7C656C 		.ascii	"||el\000"
 4998      00
 4999 049d 000000   		.space	3
 5000 04a0 2C       		.byte	44
 5001 04a1 000000   		.space	3
 5002 04a4 FFFFFFFF 		.word	-1
 5003 04a8 22       		.byte	34
 5004 04a9 000000   		.space	3
 5005 04ac 02000000 		.word	2
 5006 04b0 2D2D0D00 		.ascii	"--\015\000"
 5007 04b4 00000000 		.space	4
 5008 04b8 832500   		.ascii	"\203%\000"
 5009 04bb 00000000 		.space	5
 5009      00
 5010 04c0 2D       		.byte	45
 5011 04c1 000000   		.space	3
 5012 04c4 FFFFFFFF 		.word	-1
 5013 04c8 2E       		.byte	46
 5014 04c9 000000   		.space	3
 5015 04cc FFFFFFFF 		.word	-1
 5016 04d0 43505800 		.ascii	"CPX\000"
 5017 04d4 00000000 		.space	4
ARM GAS  /tmp/ccgLZIWS.s 			page 131


 5018 04d8 00       		.ascii	"\000"
 5019 04d9 00000000 		.space	7
 5019      000000
 5020 04e0 4D5F5377 		.ascii	"M_Swap\000"
 5020      617000
 5021 04e7 00000000 		.space	8
 5021      00000000 
 5022 04ef 00       		.space	1
 5023 04f0 0D       		.byte	13
 5024 04f1 000000   		.space	3
 5025 04f4 01000000 		.word	1
 5026 04f8 34       		.byte	52
 5027 04f9 000000   		.space	3
 5028 04fc 00A60000 		.word	42496
 5029 0500 53686F77 		.ascii	"Show\016\000"
 5029      0E00
 5030 0506 0000     		.space	2
 5031 0508 5B175D00 		.ascii	"[\027]\000"
 5032 050c 00000000 		.space	4
 5033 0510 0D       		.byte	13
 5034 0511 000000   		.space	3
 5035 0514 02000000 		.word	2
 5036 0518 2E       		.byte	46
 5037 0519 000000   		.space	3
 5038 051c FFFFFFFF 		.word	-1
 5039 0520 53686F77 		.ascii	"Show\015\000"
 5039      0D00
 5040 0526 0000     		.space	2
 5041 0528 00       		.ascii	"\000"
 5042 0529 00000000 		.space	7
 5042      000000
 5043 0530 0D       		.byte	13
 5044 0531 000000   		.space	3
 5045 0534 03000000 		.word	3
 5046 0538 34       		.byte	52
 5047 0539 000000   		.space	3
 5048 053c 00330000 		.word	13056
 5049 0540 78173F00 		.ascii	"x\027?\000"
 5050 0544 00000000 		.space	4
 5051 0548 7A173F00 		.ascii	"z\027?\000"
 5052 054c 00000000 		.space	4
 5053 0550 34       		.byte	52
 5054 0551 000000   		.space	3
 5055 0554 00320000 		.word	12800
 5056 0558 34       		.byte	52
 5057 0559 000000   		.space	3
 5058 055c 00340000 		.word	13312
 5059 0560 79173F00 		.ascii	"y\027?\000"
 5060 0564 00000000 		.space	4
 5061 0568 74173F00 		.ascii	"t\027?\000"
 5062 056c 00000000 		.space	4
 5063 0570 2C       		.byte	44
 5064 0571 000000   		.space	3
 5065 0574 FFFFFFFF 		.word	-1
 5066 0578 2E       		.byte	46
 5067 0579 000000   		.space	3
 5068 057c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccgLZIWS.s 			page 132


 5069 0580 2D2D0D00 		.ascii	"--\015\000"
 5070 0584 00000000 		.space	4
 5071 0588 00       		.ascii	"\000"
 5072 0589 00000000 		.space	7
 5072      000000
 5073 0590 2D       		.byte	45
 5074 0591 000000   		.space	3
 5075 0594 FFFFFFFF 		.word	-1
 5076 0598 2E       		.byte	46
 5077 0599 000000   		.space	3
 5078 059c FFFFFFFF 		.word	-1
 5079 05a0 43505800 		.ascii	"CPX\000"
 5080 05a4 00000000 		.space	4
 5081 05a8 00       		.ascii	"\000"
 5082 05a9 00000000 		.space	7
 5082      000000
 5083 05b0 4D5F5072 		.ascii	"M_Program\000"
 5083      6F677261 
 5083      6D00
 5084 05ba 00000000 		.space	5
 5084      00
 5085 05bf 00       		.space	1
 5086 05c0 27       		.byte	39
 5087 05c1 000000   		.space	3
 5088 05c4 01000000 		.word	1
 5089 05c8 28       		.byte	40
 5090 05c9 000000   		.space	3
 5091 05cc 01000000 		.word	1
 5092 05d0 4C424C00 		.ascii	"LBL\000"
 5093 05d4 00000000 		.space	4
 5094 05d8 44534500 		.ascii	"DSE\000"
 5095 05dc 00000000 		.space	4
 5096 05e0 27       		.byte	39
 5097 05e1 000000   		.space	3
 5098 05e4 02000000 		.word	2
 5099 05e8 28       		.byte	40
 5100 05e9 000000   		.space	3
 5101 05ec 02000000 		.word	2
 5102 05f0 52544E00 		.ascii	"RTN\000"
 5103 05f4 00000000 		.space	4
 5104 05f8 49534700 		.ascii	"ISG\000"
 5105 05fc 00000000 		.space	4
 5106 0600 25       		.byte	37
 5107 0601 000000   		.space	3
 5108 0604 03000000 		.word	3
 5109 0608 34       		.byte	52
 5110 0609 000000   		.space	3
 5111 060c 00600000 		.word	24576
 5112 0610 50617573 		.ascii	"Pause\000"
 5112      6500
 5113 0616 0000     		.space	2
 5114 0618 44454300 		.ascii	"DEC\000"
 5115 061c 00000000 		.space	4
 5116 0620 12       		.byte	18
 5117 0621 000000   		.space	3
 5118 0624 03000000 		.word	3
 5119 0628 34       		.byte	52
ARM GAS  /tmp/ccgLZIWS.s 			page 133


 5120 0629 000000   		.space	3
 5121 062c 00610000 		.word	24832
 5122 0630 47544F00 		.ascii	"GTO\000"
 5123 0634 00000000 		.space	4
 5124 0638 494E4300 		.ascii	"INC\000"
 5125 063c 00000000 		.space	4
 5126 0640 2C       		.byte	44
 5127 0641 000000   		.space	3
 5128 0644 FFFFFFFF 		.word	-1
 5129 0648 34       		.byte	52
 5130 0649 000000   		.space	3
 5131 064c 00570000 		.word	22272
 5132 0650 2D2D0D00 		.ascii	"--\015\000"
 5133 0654 00000000 		.space	4
 5134 0658 4241434B 		.ascii	"BACK\000"
 5134      00
 5135 065d 000000   		.space	3
 5136 0660 2D       		.byte	45
 5137 0661 000000   		.space	3
 5138 0664 FFFFFFFF 		.word	-1
 5139 0668 34       		.byte	52
 5140 0669 000000   		.space	3
 5141 066c 00560000 		.word	22016
 5142 0670 43505800 		.ascii	"CPX\000"
 5143 0674 00000000 		.space	4
 5144 0678 534B4950 		.ascii	"SKIP\000"
 5144      00
 5145 067d 000000   		.space	3
 5146 0680 4D5F5365 		.ascii	"M_Setup1\000"
 5146      74757031 
 5146      00
 5147 0689 00000000 		.space	6
 5147      0000
 5148 068f 00       		.space	1
 5149 0690 32       		.byte	50
 5150 0691 000000   		.space	3
 5151 0694 00000000 		.word	0
 5152 0698 30       		.byte	48
 5153 0699 000000   		.space	3
 5154 069c 00000000 		.word	0
 5155 06a0 45584954 		.ascii	"EXIT\000"
 5155      00
 5156 06a5 000000   		.space	3
 5157 06a8 53797374 		.ascii	"System\000"
 5157      656D00
 5158 06af 00       		.space	1
 5159 06b0 31       		.byte	49
 5160 06b1 000000   		.space	3
 5161 06b4 09000000 		.word	9
 5162 06b8 2E       		.byte	46
 5163 06b9 000000   		.space	3
 5164 06bc FFFFFFFF 		.word	-1
 5165 06c0 48454C50 		.ascii	"HELP\000"
 5165      00
 5166 06c5 000000   		.space	3
 5167 06c8 00       		.ascii	"\000"
 5168 06c9 00000000 		.space	7
ARM GAS  /tmp/ccgLZIWS.s 			page 134


 5168      000000
 5169 06d0 31       		.byte	49
 5170 06d1 000000   		.space	3
 5171 06d4 02000000 		.word	2
 5172 06d8 31       		.byte	49
 5173 06d9 000000   		.space	3
 5174 06dc 06000000 		.word	6
 5175 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5175      4F00
 5176 06e6 0000     		.space	2
 5177 06e8 53765241 		.ascii	"SvRAM\000"
 5177      4D00
 5178 06ee 0000     		.space	2
 5179 06f0 31       		.byte	49
 5180 06f1 000000   		.space	3
 5181 06f4 03000000 		.word	3
 5182 06f8 31       		.byte	49
 5183 06f9 000000   		.space	3
 5184 06fc 07000000 		.word	7
 5185 0700 4F6E5243 		.ascii	"OnRCL\000"
 5185      4C00
 5186 0706 0000     		.space	2
 5187 0708 4C645241 		.ascii	"LdRAM\000"
 5187      4D00
 5188 070e 0000     		.space	2
 5189 0710 2C       		.byte	44
 5190 0711 000000   		.space	3
 5191 0714 FFFFFFFF 		.word	-1
 5192 0718 2E       		.byte	46
 5193 0719 000000   		.space	3
 5194 071c FFFFFFFF 		.word	-1
 5195 0720 2D2D0D00 		.ascii	"--\015\000"
 5196 0724 00000000 		.space	4
 5197 0728 00       		.ascii	"\000"
 5198 0729 00000000 		.space	7
 5198      000000
 5199 0730 2D       		.byte	45
 5200 0731 000000   		.space	3
 5201 0734 FFFFFFFF 		.word	-1
 5202 0738 2E       		.byte	46
 5203 0739 000000   		.space	3
 5204 073c FFFFFFFF 		.word	-1
 5205 0740 43505800 		.ascii	"CPX\000"
 5206 0744 00000000 		.space	4
 5207 0748 00       		.ascii	"\000"
 5208 0749 00000000 		.space	7
 5208      000000
 5209 0750 4D5F4172 		.ascii	"M_Arrow\000"
 5209      726F7700 
 5210 0758 00000000 		.space	7
 5210      000000
 5211 075f 00       		.space	1
 5212 0760 0E       		.byte	14
 5213 0761 000000   		.space	3
 5214 0764 01000000 		.word	1
 5215 0768 06       		.byte	6
 5216 0769 000000   		.space	3
ARM GAS  /tmp/ccgLZIWS.s 			page 135


 5217 076c 02000000 		.word	2
 5218 0770 42696E00 		.ascii	"Bin\000"
 5219 0774 00000000 		.space	4
 5220 0778 44454700 		.ascii	"DEG\000"
 5221 077c 00000000 		.space	4
 5222 0780 0E       		.byte	14
 5223 0781 000000   		.space	3
 5224 0784 02000000 		.word	2
 5225 0788 07       		.byte	7
 5226 0789 000000   		.space	3
 5227 078c 02000000 		.word	2
 5228 0790 4F637400 		.ascii	"Oct\000"
 5229 0794 00000000 		.space	4
 5230 0798 52414400 		.ascii	"RAD\000"
 5231 079c 00000000 		.space	4
 5232 07a0 0F       		.byte	15
 5233 07a1 000000   		.space	3
 5234 07a4 01000000 		.word	1
 5235 07a8 08       		.byte	8
 5236 07a9 000000   		.space	3
 5237 07ac 02000000 		.word	2
 5238 07b0 44656300 		.ascii	"Dec\000"
 5239 07b4 00000000 		.space	4
 5240 07b8 47726164 		.ascii	"Grad\000"
 5240      00
 5241 07bd 000000   		.space	3
 5242 07c0 0F       		.byte	15
 5243 07c1 000000   		.space	3
 5244 07c4 02000000 		.word	2
 5245 07c8 06       		.byte	6
 5246 07c9 000000   		.space	3
 5247 07cc 01000000 		.word	1
 5248 07d0 48657800 		.ascii	"Hex\000"
 5249 07d4 00000000 		.space	4
 5250 07d8 0D484D53 		.ascii	"\015HMS\000"
 5250      00
 5251 07dd 000000   		.space	3
 5252 07e0 2C       		.byte	44
 5253 07e1 000000   		.space	3
 5254 07e4 FFFFFFFF 		.word	-1
 5255 07e8 07       		.byte	7
 5256 07e9 000000   		.space	3
 5257 07ec 01000000 		.word	1
 5258 07f0 2D2D0D00 		.ascii	"--\015\000"
 5259 07f4 00000000 		.space	4
 5260 07f8 484D530D 		.ascii	"HMS\015\000"
 5260      00
 5261 07fd 000000   		.space	3
 5262 0800 2D       		.byte	45
 5263 0801 000000   		.space	3
 5264 0804 FFFFFFFF 		.word	-1
 5265 0808 2E       		.byte	46
 5266 0809 000000   		.space	3
 5267 080c FFFFFFFF 		.word	-1
 5268 0810 43505800 		.ascii	"CPX\000"
 5269 0814 00000000 		.space	4
 5270 0818 00       		.ascii	"\000"
ARM GAS  /tmp/ccgLZIWS.s 			page 136


 5271 0819 00000000 		.space	7
 5271      000000
 5272 0820 4D5F466C 		.ascii	"M_Flags\000"
 5272      61677300 
 5273 0828 00000000 		.space	7
 5273      000000
 5274 082f 00       		.space	1
 5275 0830 1E       		.byte	30
 5276 0831 000000   		.space	3
 5277 0834 01000000 		.word	1
 5278 0838 34       		.byte	52
 5279 0839 000000   		.space	3
 5280 083c 00740000 		.word	29696
 5281 0840 53465F00 		.ascii	"SF_\000"
 5282 0844 00000000 		.space	4
 5283 0848 46533F00 		.ascii	"FS?\000"
 5284 084c 00000000 		.space	4
 5285 0850 1E       		.byte	30
 5286 0851 000000   		.space	3
 5287 0854 02000000 		.word	2
 5288 0858 34       		.byte	52
 5289 0859 000000   		.space	3
 5290 085c 00750000 		.word	29952
 5291 0860 43465F00 		.ascii	"CF_\000"
 5292 0864 00000000 		.space	4
 5293 0868 46433F00 		.ascii	"FC?\000"
 5294 086c 00000000 		.space	4
 5295 0870 1F       		.byte	31
 5296 0871 000000   		.space	3
 5297 0874 01000000 		.word	1
 5298 0878 34       		.byte	52
 5299 0879 000000   		.space	3
 5300 087c 00500000 		.word	20480
 5301 0880 783D3F00 		.ascii	"x=?\000"
 5302 0884 00000000 		.space	4
 5303 0888 783C3F00 		.ascii	"x<?\000"
 5304 088c 00000000 		.space	4
 5305 0890 1F       		.byte	31
 5306 0891 000000   		.space	3
 5307 0894 02000000 		.word	2
 5308 0898 34       		.byte	52
 5309 0899 000000   		.space	3
 5310 089c 00510000 		.word	20736
 5311 08a0 780B3F00 		.ascii	"x\013?\000"
 5312 08a4 00000000 		.space	4
 5313 08a8 783C3D3F 		.ascii	"x<=?\000"
 5313      00
 5314 08ad 000000   		.space	3
 5315 08b0 2C       		.byte	44
 5316 08b1 000000   		.space	3
 5317 08b4 FFFFFFFF 		.word	-1
 5318 08b8 34       		.byte	52
 5319 08b9 000000   		.space	3
 5320 08bc 00530000 		.word	21248
 5321 08c0 2D2D0D00 		.ascii	"--\015\000"
 5322 08c4 00000000 		.space	4
 5323 08c8 783E3D3F 		.ascii	"x>=?\000"
ARM GAS  /tmp/ccgLZIWS.s 			page 137


 5323      00
 5324 08cd 000000   		.space	3
 5325 08d0 2D       		.byte	45
 5326 08d1 000000   		.space	3
 5327 08d4 FFFFFFFF 		.word	-1
 5328 08d8 34       		.byte	52
 5329 08d9 000000   		.space	3
 5330 08dc 00520000 		.word	20992
 5331 08e0 43505800 		.ascii	"CPX\000"
 5332 08e4 00000000 		.space	4
 5333 08e8 783E3F00 		.ascii	"x>?\000"
 5334 08ec 00000000 		.space	4
 5335 08f0 4D5F5072 		.ascii	"M_Prob\000"
 5335      6F6200
 5336 08f7 00000000 		.space	8
 5336      00000000 
 5337 08ff 00       		.space	1
 5338 0900 18       		.byte	24
 5339 0901 000000   		.space	3
 5340 0904 03000000 		.word	3
 5341 0908 34       		.byte	52
 5342 0909 000000   		.space	3
 5343 090c 31020000 		.word	561
 5344 0910 46616374 		.ascii	"Fact!\000"
 5344      2100
 5345 0916 0000     		.space	2
 5346 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5346      00
 5347 091d 000000   		.space	3
 5348 0920 18       		.byte	24
 5349 0921 000000   		.space	3
 5350 0924 01000000 		.word	1
 5351 0928 19       		.byte	25
 5352 0929 000000   		.space	3
 5353 092c 01000000 		.word	1
 5354 0930 43792C78 		.ascii	"Cy,x\000"
 5354      00
 5355 0935 000000   		.space	3
 5356 0938 9400     		.ascii	"\224\000"
 5357 093a 00000000 		.space	6
 5357      0000
 5358 0940 18       		.byte	24
 5359 0941 000000   		.space	3
 5360 0944 02000000 		.word	2
 5361 0948 19       		.byte	25
 5362 0949 000000   		.space	3
 5363 094c 02000000 		.word	2
 5364 0950 50792C78 		.ascii	"Py,x\000"
 5364      00
 5365 0955 000000   		.space	3
 5366 0958 949D00   		.ascii	"\224\235\000"
 5367 095b 00000000 		.space	5
 5367      00
 5368 0960 08       		.byte	8
 5369 0961 000000   		.space	3
 5370 0964 01000000 		.word	1
 5371 0968 34       		.byte	52
ARM GAS  /tmp/ccgLZIWS.s 			page 138


 5372 0969 000000   		.space	3
 5373 096c 34010000 		.word	308
 5374 0970 52414E23 		.ascii	"RAN#\000"
 5374      00
 5375 0975 000000   		.space	3
 5376 0978 53454544 		.ascii	"SEED\000"
 5376      00
 5377 097d 000000   		.space	3
 5378 0980 2C       		.byte	44
 5379 0981 000000   		.space	3
 5380 0984 FFFFFFFF 		.word	-1
 5381 0988 2E       		.byte	46
 5382 0989 000000   		.space	3
 5383 098c FFFFFFFF 		.word	-1
 5384 0990 2D2D0D00 		.ascii	"--\015\000"
 5385 0994 00000000 		.space	4
 5386 0998 00       		.ascii	"\000"
 5387 0999 00000000 		.space	7
 5387      000000
 5388 09a0 2D       		.byte	45
 5389 09a1 000000   		.space	3
 5390 09a4 FFFFFFFF 		.word	-1
 5391 09a8 2E       		.byte	46
 5392 09a9 000000   		.space	3
 5393 09ac FFFFFFFF 		.word	-1
 5394 09b0 43505800 		.ascii	"CPX\000"
 5395 09b4 00000000 		.space	4
 5396 09b8 00       		.ascii	"\000"
 5397 09b9 00000000 		.space	7
 5397      000000
 5398 09c0 4D5F5374 		.ascii	"M_Stats\000"
 5398      61747300 
 5399 09c8 00000000 		.space	7
 5399      000000
 5400 09cf 00       		.space	1
 5401 09d0 1A       		.byte	26
 5402 09d1 000000   		.space	3
 5403 09d4 01000000 		.word	1
 5404 09d8 1A       		.byte	26
 5405 09d9 000000   		.space	3
 5406 09dc 02000000 		.word	2
 5407 09e0 0100     		.ascii	"\001\000"
 5408 09e2 00000000 		.space	6
 5408      0000
 5409 09e8 532E442E 		.ascii	"S.D.\000"
 5409      00
 5410 09ed 000000   		.space	3
 5411 09f0 1B       		.byte	27
 5412 09f1 000000   		.space	3
 5413 09f4 01000000 		.word	1
 5414 09f8 34       		.byte	52
 5415 09f9 000000   		.space	3
 5416 09fc 74020000 		.word	628
 5417 0a00 792D6861 		.ascii	"y-hat\000"
 5417      7400
 5418 0a06 0000     		.space	2
 5419 0a08 782D6861 		.ascii	"x-hat\000"
ARM GAS  /tmp/ccgLZIWS.s 			page 139


 5419      7400
 5420 0a0e 0000     		.space	2
 5421 0a10 34       		.byte	52
 5422 0a11 000000   		.space	3
 5423 0a14 27010000 		.word	295
 5424 0a18 34       		.byte	52
 5425 0a19 000000   		.space	3
 5426 0a1c 28010000 		.word	296
 5427 0a20 434F5252 		.ascii	"CORR\000"
 5427      00
 5428 0a25 000000   		.space	3
 5429 0a28 4C2E522E 		.ascii	"L.R.\000"
 5429      00
 5430 0a2d 000000   		.space	3
 5431 0a30 34       		.byte	52
 5432 0a31 000000   		.space	3
 5433 0a34 32010000 		.word	306
 5434 0a38 34       		.byte	52
 5435 0a39 000000   		.space	3
 5436 0a3c 31010000 		.word	305
 5437 0a40 42657374 		.ascii	"BestF\000"
 5437      4600
 5438 0a46 0000     		.space	2
 5439 0a48 4C6F6746 		.ascii	"LogFit\000"
 5439      697400
 5440 0a4f 00       		.space	1
 5441 0a50 34       		.byte	52
 5442 0a51 000000   		.space	3
 5443 0a54 2E010000 		.word	302
 5444 0a58 34       		.byte	52
 5445 0a59 000000   		.space	3
 5446 0a5c 2F010000 		.word	303
 5447 0a60 4C696E65 		.ascii	"Linear\000"
 5447      617200
 5448 0a67 00       		.space	1
 5449 0a68 45787046 		.ascii	"ExpFit\000"
 5449      697400
 5450 0a6f 00       		.space	1
 5451 0a70 2D       		.byte	45
 5452 0a71 000000   		.space	3
 5453 0a74 FFFFFFFF 		.word	-1
 5454 0a78 34       		.byte	52
 5455 0a79 000000   		.space	3
 5456 0a7c 30010000 		.word	304
 5457 0a80 43505800 		.ascii	"CPX\000"
 5458 0a84 00000000 		.space	4
 5459 0a88 50777246 		.ascii	"PwrFit\000"
 5459      697400
 5460 0a8f 00       		.space	1
 5461 0a90 4D5F5365 		.ascii	"M_Setup2\000"
 5461      74757032 
 5461      00
 5462 0a99 00000000 		.space	6
 5462      0000
 5463 0a9f 00       		.space	1
 5464 0aa0 31       		.byte	49
 5465 0aa1 000000   		.space	3
ARM GAS  /tmp/ccgLZIWS.s 			page 140


 5466 0aa4 04000000 		.word	4
 5467 0aa8 2E       		.byte	46
 5468 0aa9 000000   		.space	3
 5469 0aac FFFFFFFF 		.word	-1
 5470 0ab0 53764C49 		.ascii	"SvLIB\000"
 5470      4200
 5471 0ab6 0000     		.space	2
 5472 0ab8 00       		.ascii	"\000"
 5473 0ab9 00000000 		.space	7
 5473      000000
 5474 0ac0 31       		.byte	49
 5475 0ac1 000000   		.space	3
 5476 0ac4 05000000 		.word	5
 5477 0ac8 2E       		.byte	46
 5478 0ac9 000000   		.space	3
 5479 0acc FFFFFFFF 		.word	-1
 5480 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5480      4200
 5481 0ad6 0000     		.space	2
 5482 0ad8 00       		.ascii	"\000"
 5483 0ad9 00000000 		.space	7
 5483      000000
 5484 0ae0 31       		.byte	49
 5485 0ae1 000000   		.space	3
 5486 0ae4 0A000000 		.word	10
 5487 0ae8 2E       		.byte	46
 5488 0ae9 000000   		.space	3
 5489 0aec FFFFFFFF 		.word	-1
 5490 0af0 53764350 		.ascii	"SvCPRG\000"
 5490      524700
 5491 0af7 00       		.space	1
 5492 0af8 00       		.ascii	"\000"
 5493 0af9 00000000 		.space	7
 5493      000000
 5494 0b00 31       		.byte	49
 5495 0b01 000000   		.space	3
 5496 0b04 08000000 		.word	8
 5497 0b08 2E       		.byte	46
 5498 0b09 000000   		.space	3
 5499 0b0c FFFFFFFF 		.word	-1
 5500 0b10 4C645052 		.ascii	"LdPRG\000"
 5500      4700
 5501 0b16 0000     		.space	2
 5502 0b18 00       		.ascii	"\000"
 5503 0b19 00000000 		.space	7
 5503      000000
 5504 0b20 2C       		.byte	44
 5505 0b21 000000   		.space	3
 5506 0b24 FFFFFFFF 		.word	-1
 5507 0b28 2E       		.byte	46
 5508 0b29 000000   		.space	3
 5509 0b2c FFFFFFFF 		.word	-1
 5510 0b30 2D2D0D00 		.ascii	"--\015\000"
 5511 0b34 00000000 		.space	4
 5512 0b38 00       		.ascii	"\000"
 5513 0b39 00000000 		.space	7
 5513      000000
ARM GAS  /tmp/ccgLZIWS.s 			page 141


 5514 0b40 2D       		.byte	45
 5515 0b41 000000   		.space	3
 5516 0b44 FFFFFFFF 		.word	-1
 5517 0b48 2E       		.byte	46
 5518 0b49 000000   		.space	3
 5519 0b4c FFFFFFFF 		.word	-1
 5520 0b50 43505800 		.ascii	"CPX\000"
 5521 0b54 00000000 		.space	4
 5522 0b58 00       		.ascii	"\000"
 5523 0b59 00000000 		.space	7
 5523      000000
 5524 0b60 4D5F536F 		.ascii	"M_Solve\000"
 5524      6C766500 
 5525 0b68 00000000 		.space	7
 5525      000000
 5526 0b6f 00       		.space	1
 5527 0b70 20       		.byte	32
 5528 0b71 000000   		.space	3
 5529 0b74 01000000 		.word	1
 5530 0b78 2E       		.byte	46
 5531 0b79 000000   		.space	3
 5532 0b7c FFFFFFFF 		.word	-1
 5533 0b80 534C5600 		.ascii	"SLV\000"
 5534 0b84 00000000 		.space	4
 5535 0b88 00       		.ascii	"\000"
 5536 0b89 00000000 		.space	7
 5536      000000
 5537 0b90 20       		.byte	32
 5538 0b91 000000   		.space	3
 5539 0b94 02000000 		.word	2
 5540 0b98 2E       		.byte	46
 5541 0b99 000000   		.space	3
 5542 0b9c FFFFFFFF 		.word	-1
 5543 0ba0 04206478 		.ascii	"\004 dx\000"
 5543      00
 5544 0ba5 000000   		.space	3
 5545 0ba8 00       		.ascii	"\000"
 5546 0ba9 00000000 		.space	7
 5546      000000
 5547 0bb0 21       		.byte	33
 5548 0bb1 000000   		.space	3
 5549 0bb4 02000000 		.word	2
 5550 0bb8 2E       		.byte	46
 5551 0bb9 000000   		.space	3
 5552 0bbc FFFFFFFF 		.word	-1
 5553 0bc0 53554D00 		.ascii	"SUM\000"
 5554 0bc4 00000000 		.space	4
 5555 0bc8 00       		.ascii	"\000"
 5556 0bc9 00000000 		.space	7
 5556      000000
 5557 0bd0 21       		.byte	33
 5558 0bd1 000000   		.space	3
 5559 0bd4 01000000 		.word	1
 5560 0bd8 2E       		.byte	46
 5561 0bd9 000000   		.space	3
 5562 0bdc FFFFFFFF 		.word	-1
 5563 0be0 50524F44 		.ascii	"PROD\000"
ARM GAS  /tmp/ccgLZIWS.s 			page 142


 5563      00
 5564 0be5 000000   		.space	3
 5565 0be8 00       		.ascii	"\000"
 5566 0be9 00000000 		.space	7
 5566      000000
 5567 0bf0 2C       		.byte	44
 5568 0bf1 000000   		.space	3
 5569 0bf4 FFFFFFFF 		.word	-1
 5570 0bf8 2E       		.byte	46
 5571 0bf9 000000   		.space	3
 5572 0bfc FFFFFFFF 		.word	-1
 5573 0c00 2D2D0D00 		.ascii	"--\015\000"
 5574 0c04 00000000 		.space	4
 5575 0c08 00       		.ascii	"\000"
 5576 0c09 00000000 		.space	7
 5576      000000
 5577 0c10 2D       		.byte	45
 5578 0c11 000000   		.space	3
 5579 0c14 FFFFFFFF 		.word	-1
 5580 0c18 2E       		.byte	46
 5581 0c19 000000   		.space	3
 5582 0c1c FFFFFFFF 		.word	-1
 5583 0c20 43505800 		.ascii	"CPX\000"
 5584 0c24 00000000 		.space	4
 5585 0c28 00       		.ascii	"\000"
 5586 0c29 00000000 		.space	7
 5586      000000
 5587 0c30 4D5F426C 		.ascii	"M_Blank2\000"
 5587      616E6B32 
 5587      00
 5588 0c39 00000000 		.space	6
 5588      0000
 5589 0c3f 00       		.space	1
 5590 0c40 28       		.byte	40
 5591 0c41 000000   		.space	3
 5592 0c44 03000000 		.word	3
 5593 0c48 2E       		.byte	46
 5594 0c49 000000   		.space	3
 5595 0c4c FFFFFFFF 		.word	-1
 5596 0c50 912B00   		.ascii	"\221+\000"
 5597 0c53 00000000 		.space	5
 5597      00
 5598 0c58 00       		.ascii	"\000"
 5599 0c59 00000000 		.space	7
 5599      000000
 5600 0c60 16       		.byte	22
 5601 0c61 000000   		.space	3
 5602 0c64 01000000 		.word	1
 5603 0c68 2E       		.byte	46
 5604 0c69 000000   		.space	3
 5605 0c6c FFFFFFFF 		.word	-1
 5606 0c70 312F5800 		.ascii	"1/X\000"
 5607 0c74 00000000 		.space	4
 5608 0c78 00       		.ascii	"\000"
 5609 0c79 00000000 		.space	7
 5609      000000
 5610 0c80 1C       		.byte	28
ARM GAS  /tmp/ccgLZIWS.s 			page 143


 5611 0c81 000000   		.space	3
 5612 0c84 01000000 		.word	1
 5613 0c88 2E       		.byte	46
 5614 0c89 000000   		.space	3
 5615 0c8c FFFFFFFF 		.word	-1
 5616 0c90 035800   		.ascii	"\003X\000"
 5617 0c93 00000000 		.space	5
 5617      00
 5618 0c98 00       		.ascii	"\000"
 5619 0c99 00000000 		.space	7
 5619      000000
 5620 0ca0 13       		.byte	19
 5621 0ca1 000000   		.space	3
 5622 0ca4 02000000 		.word	2
 5623 0ca8 2E       		.byte	46
 5624 0ca9 000000   		.space	3
 5625 0cac FFFFFFFF 		.word	-1
 5626 0cb0 4C4F4700 		.ascii	"LOG\000"
 5627 0cb4 00000000 		.space	4
 5628 0cb8 00       		.ascii	"\000"
 5629 0cb9 00000000 		.space	7
 5629      000000
 5630 0cc0 2C       		.byte	44
 5631 0cc1 000000   		.space	3
 5632 0cc4 FFFFFFFF 		.word	-1
 5633 0cc8 2E       		.byte	46
 5634 0cc9 000000   		.space	3
 5635 0ccc FFFFFFFF 		.word	-1
 5636 0cd0 2D2D0D00 		.ascii	"--\015\000"
 5637 0cd4 00000000 		.space	4
 5638 0cd8 00       		.ascii	"\000"
 5639 0cd9 00000000 		.space	7
 5639      000000
 5640 0ce0 2D       		.byte	45
 5641 0ce1 000000   		.space	3
 5642 0ce4 FFFFFFFF 		.word	-1
 5643 0ce8 2E       		.byte	46
 5644 0ce9 000000   		.space	3
 5645 0cec FFFFFFFF 		.word	-1
 5646 0cf0 43505800 		.ascii	"CPX\000"
 5647 0cf4 00000000 		.space	4
 5648 0cf8 00       		.ascii	"\000"
 5649 0cf9 00000000 		.space	7
 5649      000000
 5650 0d00 4D5F416C 		.ascii	"M_Alpha\000"
 5650      70686100 
 5651 0d08 00000000 		.space	7
 5651      000000
 5652 0d0f 00       		.space	1
 5653 0d10 34       		.byte	52
 5654 0d11 000000   		.space	3
 5655 0d14 78010000 		.word	376
 5656 0d18 34       		.byte	52
 5657 0d19 000000   		.space	3
 5658 0d1c 6D010000 		.word	365
 5659 0d20 582D3EA0 		.ascii	"X->\240\000"
 5659      00
ARM GAS  /tmp/ccgLZIWS.s 			page 144


 5660 0d25 000000   		.space	3
 5661 0d28 A054494D 		.ascii	"\240TIME\000"
 5661      4500
 5662 0d2e 0000     		.space	2
 5663 0d30 34       		.byte	52
 5664 0d31 000000   		.space	3
 5665 0d34 77010000 		.word	375
 5666 0d38 34       		.byte	52
 5667 0d39 000000   		.space	3
 5668 0d3c 6C010000 		.word	364
 5669 0d40 A02D3E58 		.ascii	"\240->X\000"
 5669      00
 5670 0d45 000000   		.space	3
 5671 0d48 A0444154 		.ascii	"\240DATE\000"
 5671      4500
 5672 0d4e 0000     		.space	2
 5673 0d50 34       		.byte	52
 5674 0d51 000000   		.space	3
 5675 0d54 00480000 		.word	18432
 5676 0d58 34       		.byte	52
 5677 0d59 000000   		.space	3
 5678 0d5c 6A010000 		.word	362
 5679 0d60 A0495000 		.ascii	"\240IP\000"
 5680 0d64 00000000 		.space	4
 5681 0d68 A0444159 		.ascii	"\240DAY\000"
 5681      00
 5682 0d6d 000000   		.space	3
 5683 0d70 34       		.byte	52
 5684 0d71 000000   		.space	3
 5685 0d74 76010000 		.word	374
 5686 0d78 34       		.byte	52
 5687 0d79 000000   		.space	3
 5688 0d7c 6B010000 		.word	363
 5689 0d80 A04C454E 		.ascii	"\240LENG\000"
 5689      4700
 5690 0d86 0000     		.space	2
 5691 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 5691      4800
 5692 0d8e 0000     		.space	2
 5693 0d90 2C       		.byte	44
 5694 0d91 000000   		.space	3
 5695 0d94 FFFFFFFF 		.word	-1
 5696 0d98 2C       		.byte	44
 5697 0d99 000000   		.space	3
 5698 0d9c 01000000 		.word	1
 5699 0da0 2D2D0D00 		.ascii	"--\015\000"
 5700 0da4 00000000 		.space	4
 5701 0da8 00       		.ascii	"\000"
 5702 0da9 00000000 		.space	7
 5702      000000
 5703 0db0 2D       		.byte	45
 5704 0db1 000000   		.space	3
 5705 0db4 FFFFFFFF 		.word	-1
 5706 0db8 2D       		.byte	45
 5707 0db9 000000   		.space	3
 5708 0dbc 01000000 		.word	1
 5709 0dc0 43505800 		.ascii	"CPX\000"
ARM GAS  /tmp/ccgLZIWS.s 			page 145


 5710 0dc4 00000000 		.space	4
 5711 0dc8 00       		.ascii	"\000"
 5712 0dc9 00000000 		.space	7
 5712      000000
 5713 0dd0 4D5F435F 		.ascii	"M_C_Lock\000"
 5713      4C6F636B 
 5713      00
 5714 0dd9 00000000 		.space	6
 5714      0000
 5715 0ddf 00       		.space	1
 5716 0de0 18       		.byte	24
 5717 0de1 000000   		.space	3
 5718 0de4 02000000 		.word	2
 5719 0de8 04       		.byte	4
 5720 0de9 000000   		.space	3
 5721 0dec 02000000 		.word	2
 5722 0df0 504F4C41 		.ascii	"POLAR\000"
 5722      5200
 5723 0df6 0000     		.space	2
 5724 0df8 0D205000 		.ascii	"\015 P\000"
 5725 0dfc 00000000 		.space	4
 5726 0e00 18       		.byte	24
 5727 0e01 000000   		.space	3
 5728 0e04 01000000 		.word	1
 5729 0e08 04       		.byte	4
 5730 0e09 000000   		.space	3
 5731 0e0c 01000000 		.word	1
 5732 0e10 52454354 		.ascii	"RECT\000"
 5732      00
 5733 0e15 000000   		.space	3
 5734 0e18 0D205200 		.ascii	"\015 R\000"
 5735 0e1c 00000000 		.space	4
 5736 0e20 0E       		.byte	14
 5737 0e21 000000   		.space	3
 5738 0e24 01000000 		.word	1
 5739 0e28 0E       		.byte	14
 5740 0e29 000000   		.space	3
 5741 0e2c 03000000 		.word	3
 5742 0e30 43485306 		.ascii	"CHS\006y\000"
 5742      7900
 5743 0e36 0000     		.space	2
 5744 0e38 43485306 		.ascii	"CHS\006x\000"
 5744      7800
 5745 0e3e 0000     		.space	2
 5746 0e40 0D       		.byte	13
 5747 0e41 000000   		.space	3
 5748 0e44 01000000 		.word	1
 5749 0e48 00       		.byte	0
 5750 0e49 000000   		.space	3
 5751 0e4c 01000000 		.word	1
 5752 0e50 78177900 		.ascii	"x\027y\000"
 5753 0e54 00000000 		.space	4
 5754 0e58 48595000 		.ascii	"HYP\000"
 5755 0e5c 00000000 		.space	4
 5756 0e60 2C       		.byte	44
 5757 0e61 000000   		.space	3
 5758 0e64 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccgLZIWS.s 			page 146


 5759 0e68 0F       		.byte	15
 5760 0e69 000000   		.space	3
 5761 0e6c 01000000 		.word	1
 5762 0e70 2D2D0D00 		.ascii	"--\015\000"
 5763 0e74 00000000 		.space	4
 5764 0e78 1106AF00 		.ascii	"\021\006\257\000"
 5765 0e7c 00000000 		.space	4
 5766 0e80 2D       		.byte	45
 5767 0e81 000000   		.space	3
 5768 0e84 FFFFFFFF 		.word	-1
 5769 0e88 0C       		.byte	12
 5770 0e89 000000   		.space	3
 5771 0e8c 01000000 		.word	1
 5772 0e90 43505800 		.ascii	"CPX\000"
 5773 0e94 00000000 		.space	4
 5774 0e98 1106434E 		.ascii	"\021\006CNST\000"
 5774      535400
 5775 0e9f 00       		.space	1
 5776 0ea0 4D5F436C 		.ascii	"M_Clear_C\000"
 5776      6561725F 
 5776      4300
 5777 0eaa 00000000 		.space	5
 5777      00
 5778 0eaf 00       		.space	1
 5779 0eb0 2E       		.byte	46
 5780 0eb1 000000   		.space	3
 5781 0eb4 FFFFFFFF 		.word	-1
 5782 0eb8 2E       		.byte	46
 5783 0eb9 000000   		.space	3
 5784 0ebc FFFFFFFF 		.word	-1
 5785 0ec0 00       		.ascii	"\000"
 5786 0ec1 00000000 		.space	7
 5786      000000
 5787 0ec8 00       		.ascii	"\000"
 5788 0ec9 00000000 		.space	7
 5788      000000
 5789 0ed0 2E       		.byte	46
 5790 0ed1 000000   		.space	3
 5791 0ed4 FFFFFFFF 		.word	-1
 5792 0ed8 2E       		.byte	46
 5793 0ed9 000000   		.space	3
 5794 0edc FFFFFFFF 		.word	-1
 5795 0ee0 00       		.ascii	"\000"
 5796 0ee1 00000000 		.space	7
 5796      000000
 5797 0ee8 00       		.ascii	"\000"
 5798 0ee9 00000000 		.space	7
 5798      000000
 5799 0ef0 10       		.byte	16
 5800 0ef1 000000   		.space	3
 5801 0ef4 03000000 		.word	3
 5802 0ef8 34       		.byte	52
 5803 0ef9 000000   		.space	3
 5804 0efc 74010000 		.word	372
 5805 0f00 434C7800 		.ascii	"CLx\000"
 5806 0f04 00000000 		.space	4
 5807 0f08 434C06A0 		.ascii	"CL\006\240\000"
ARM GAS  /tmp/ccgLZIWS.s 			page 147


 5807      00
 5808 0f0d 000000   		.space	3
 5809 0f10 34       		.byte	52
 5810 0f11 000000   		.space	3
 5811 0f14 40010000 		.word	320
 5812 0f18 2E       		.byte	46
 5813 0f19 000000   		.space	3
 5814 0f1c FFFFFFFF 		.word	-1
 5815 0f20 434C5374 		.ascii	"CLStk\000"
 5815      6B00
 5816 0f26 0000     		.space	2
 5817 0f28 00       		.ascii	"\000"
 5818 0f29 00000000 		.space	7
 5818      000000
 5819 0f30 2C       		.byte	44
 5820 0f31 000000   		.space	3
 5821 0f34 FFFFFFFF 		.word	-1
 5822 0f38 2E       		.byte	46
 5823 0f39 000000   		.space	3
 5824 0f3c FFFFFFFF 		.word	-1
 5825 0f40 2D2D0D00 		.ascii	"--\015\000"
 5826 0f44 00000000 		.space	4
 5827 0f48 00       		.ascii	"\000"
 5828 0f49 00000000 		.space	7
 5828      000000
 5829 0f50 2D       		.byte	45
 5830 0f51 000000   		.space	3
 5831 0f54 FFFFFFFF 		.word	-1
 5832 0f58 2E       		.byte	46
 5833 0f59 000000   		.space	3
 5834 0f5c FFFFFFFF 		.word	-1
 5835 0f60 43505800 		.ascii	"CPX\000"
 5836 0f64 00000000 		.space	4
 5837 0f68 00       		.ascii	"\000"
 5838 0f69 00000000 		.space	7
 5838      000000
 5839 0f70 4D5F5377 		.ascii	"M_Swap_C\000"
 5839      61705F43 
 5839      00
 5840 0f79 00000000 		.space	6
 5840      0000
 5841 0f7f 00       		.space	1
 5842 0f80 0D       		.byte	13
 5843 0f81 000000   		.space	3
 5844 0f84 01000000 		.word	1
 5845 0f88 2E       		.byte	46
 5846 0f89 000000   		.space	3
 5847 0f8c FFFFFFFF 		.word	-1
 5848 0f90 53686F77 		.ascii	"Show\016\000"
 5848      0E00
 5849 0f96 0000     		.space	2
 5850 0f98 00       		.ascii	"\000"
 5851 0f99 00000000 		.space	7
 5851      000000
 5852 0fa0 0D       		.byte	13
 5853 0fa1 000000   		.space	3
 5854 0fa4 02000000 		.word	2
ARM GAS  /tmp/ccgLZIWS.s 			page 148


 5855 0fa8 2E       		.byte	46
 5856 0fa9 000000   		.space	3
 5857 0fac FFFFFFFF 		.word	-1
 5858 0fb0 53686F77 		.ascii	"Show\015\000"
 5858      0D00
 5859 0fb6 0000     		.space	2
 5860 0fb8 00       		.ascii	"\000"
 5861 0fb9 00000000 		.space	7
 5861      000000
 5862 0fc0 0D       		.byte	13
 5863 0fc1 000000   		.space	3
 5864 0fc4 03000000 		.word	3
 5865 0fc8 2E       		.byte	46
 5866 0fc9 000000   		.space	3
 5867 0fcc FFFFFFFF 		.word	-1
 5868 0fd0 78173F00 		.ascii	"x\027?\000"
 5869 0fd4 00000000 		.space	4
 5870 0fd8 00       		.ascii	"\000"
 5871 0fd9 00000000 		.space	7
 5871      000000
 5872 0fe0 2E       		.byte	46
 5873 0fe1 000000   		.space	3
 5874 0fe4 FFFFFFFF 		.word	-1
 5875 0fe8 2E       		.byte	46
 5876 0fe9 000000   		.space	3
 5877 0fec FFFFFFFF 		.word	-1
 5878 0ff0 00       		.ascii	"\000"
 5879 0ff1 00000000 		.space	7
 5879      000000
 5880 0ff8 00       		.ascii	"\000"
 5881 0ff9 00000000 		.space	7
 5881      000000
 5882 1000 2C       		.byte	44
 5883 1001 000000   		.space	3
 5884 1004 FFFFFFFF 		.word	-1
 5885 1008 2E       		.byte	46
 5886 1009 000000   		.space	3
 5887 100c FFFFFFFF 		.word	-1
 5888 1010 2D2D0D00 		.ascii	"--\015\000"
 5889 1014 00000000 		.space	4
 5890 1018 00       		.ascii	"\000"
 5891 1019 00000000 		.space	7
 5891      000000
 5892 1020 2D       		.byte	45
 5893 1021 000000   		.space	3
 5894 1024 FFFFFFFF 		.word	-1
 5895 1028 2E       		.byte	46
 5896 1029 000000   		.space	3
 5897 102c FFFFFFFF 		.word	-1
 5898 1030 43505800 		.ascii	"CPX\000"
 5899 1034 00000000 		.space	4
 5900 1038 00       		.ascii	"\000"
 5901 1039 00000000 		.space	7
 5901      000000
 5902 1040 4D5F4172 		.ascii	"M_Arrow_C\000"
 5902      726F775F 
 5902      4300
ARM GAS  /tmp/ccgLZIWS.s 			page 149


 5903 104a 00000000 		.space	5
 5903      00
 5904 104f 00       		.space	1
 5905 1050 2E       		.byte	46
 5906 1051 000000   		.space	3
 5907 1054 FFFFFFFF 		.word	-1
 5908 1058 06       		.byte	6
 5909 1059 000000   		.space	3
 5910 105c 02000000 		.word	2
 5911 1060 00       		.ascii	"\000"
 5912 1061 00000000 		.space	7
 5912      000000
 5913 1068 44454700 		.ascii	"DEG\000"
 5914 106c 00000000 		.space	4
 5915 1070 2E       		.byte	46
 5916 1071 000000   		.space	3
 5917 1074 FFFFFFFF 		.word	-1
 5918 1078 07       		.byte	7
 5919 1079 000000   		.space	3
 5920 107c 02000000 		.word	2
 5921 1080 00       		.ascii	"\000"
 5922 1081 00000000 		.space	7
 5922      000000
 5923 1088 52414400 		.ascii	"RAD\000"
 5924 108c 00000000 		.space	4
 5925 1090 2E       		.byte	46
 5926 1091 000000   		.space	3
 5927 1094 FFFFFFFF 		.word	-1
 5928 1098 08       		.byte	8
 5929 1099 000000   		.space	3
 5930 109c 02000000 		.word	2
 5931 10a0 00       		.ascii	"\000"
 5932 10a1 00000000 		.space	7
 5932      000000
 5933 10a8 47726164 		.ascii	"Grad\000"
 5933      00
 5934 10ad 000000   		.space	3
 5935 10b0 2E       		.byte	46
 5936 10b1 000000   		.space	3
 5937 10b4 FFFFFFFF 		.word	-1
 5938 10b8 06       		.byte	6
 5939 10b9 000000   		.space	3
 5940 10bc 01000000 		.word	1
 5941 10c0 00       		.ascii	"\000"
 5942 10c1 00000000 		.space	7
 5942      000000
 5943 10c8 0D484D53 		.ascii	"\015HMS\000"
 5943      00
 5944 10cd 000000   		.space	3
 5945 10d0 2C       		.byte	44
 5946 10d1 000000   		.space	3
 5947 10d4 FFFFFFFF 		.word	-1
 5948 10d8 07       		.byte	7
 5949 10d9 000000   		.space	3
 5950 10dc 01000000 		.word	1
 5951 10e0 2D2D0D00 		.ascii	"--\015\000"
 5952 10e4 00000000 		.space	4
ARM GAS  /tmp/ccgLZIWS.s 			page 150


 5953 10e8 484D530D 		.ascii	"HMS\015\000"
 5953      00
 5954 10ed 000000   		.space	3
 5955 10f0 2D       		.byte	45
 5956 10f1 000000   		.space	3
 5957 10f4 FFFFFFFF 		.word	-1
 5958 10f8 2E       		.byte	46
 5959 10f9 000000   		.space	3
 5960 10fc FFFFFFFF 		.word	-1
 5961 1100 43505800 		.ascii	"CPX\000"
 5962 1104 00000000 		.space	4
 5963 1108 00       		.ascii	"\000"
 5964 1109 00000000 		.space	7
 5964      000000
 5965 1110 4D5F5072 		.ascii	"M_Prob_C\000"
 5965      6F625F43 
 5965      00
 5966 1119 00000000 		.space	6
 5966      0000
 5967 111f 00       		.space	1
 5968 1120 18       		.byte	24
 5969 1121 000000   		.space	3
 5970 1124 03000000 		.word	3
 5971 1128 34       		.byte	52
 5972 1129 000000   		.space	3
 5973 112c 31050000 		.word	1329
 5974 1130 14062100 		.ascii	"\024\006!\000"
 5975 1134 00000000 		.space	4
 5976 1138 14064C6E 		.ascii	"\024\006Ln\006\202\000"
 5976      068200
 5977 113f 00       		.space	1
 5978 1140 34       		.byte	52
 5979 1141 000000   		.space	3
 5980 1144 12060000 		.word	1554
 5981 1148 2E       		.byte	46
 5982 1149 000000   		.space	3
 5983 114c FFFFFFFF 		.word	-1
 5984 1150 14064379 		.ascii	"\024\006Cy,x\000"
 5984      2C7800
 5985 1157 00       		.space	1
 5986 1158 00       		.ascii	"\000"
 5987 1159 00000000 		.space	7
 5987      000000
 5988 1160 34       		.byte	52
 5989 1161 000000   		.space	3
 5990 1164 13060000 		.word	1555
 5991 1168 2E       		.byte	46
 5992 1169 000000   		.space	3
 5993 116c FFFFFFFF 		.word	-1
 5994 1170 14065079 		.ascii	"\024\006Py,x\000"
 5994      2C7800
 5995 1177 00       		.space	1
 5996 1178 00       		.ascii	"\000"
 5997 1179 00000000 		.space	7
 5997      000000
 5998 1180 2E       		.byte	46
 5999 1181 000000   		.space	3
ARM GAS  /tmp/ccgLZIWS.s 			page 151


 6000 1184 FFFFFFFF 		.word	-1
 6001 1188 2E       		.byte	46
 6002 1189 000000   		.space	3
 6003 118c FFFFFFFF 		.word	-1
 6004 1190 00       		.ascii	"\000"
 6005 1191 00000000 		.space	7
 6005      000000
 6006 1198 00       		.ascii	"\000"
 6007 1199 00000000 		.space	7
 6007      000000
 6008 11a0 2C       		.byte	44
 6009 11a1 000000   		.space	3
 6010 11a4 FFFFFFFF 		.word	-1
 6011 11a8 2E       		.byte	46
 6012 11a9 000000   		.space	3
 6013 11ac FFFFFFFF 		.word	-1
 6014 11b0 2D2D0D00 		.ascii	"--\015\000"
 6015 11b4 00000000 		.space	4
 6016 11b8 00       		.ascii	"\000"
 6017 11b9 00000000 		.space	7
 6017      000000
 6018 11c0 2D       		.byte	45
 6019 11c1 000000   		.space	3
 6020 11c4 FFFFFFFF 		.word	-1
 6021 11c8 2E       		.byte	46
 6022 11c9 000000   		.space	3
 6023 11cc FFFFFFFF 		.word	-1
 6024 11d0 43505800 		.ascii	"CPX\000"
 6025 11d4 00000000 		.space	4
 6026 11d8 00       		.ascii	"\000"
 6027 11d9 00000000 		.space	7
 6027      000000
 6028 11e0 4D5F426C 		.ascii	"M_Blank2_C\000"
 6028      616E6B32 
 6028      5F4300
 6029 11eb 00000000 		.space	4
 6030 11ef 00       		.space	1
 6031 11f0 00       		.byte	0
 6032 11f1 000000   		.space	3
 6033 11f4 01000000 		.word	1
 6034 11f8 2E       		.byte	46
 6035 11f9 000000   		.space	3
 6036 11fc FFFFFFFF 		.word	-1
 6037 1200 48595000 		.ascii	"HYP\000"
 6038 1204 00000000 		.space	4
 6039 1208 00       		.ascii	"\000"
 6040 1209 00000000 		.space	7
 6040      000000
 6041 1210 16       		.byte	22
 6042 1211 000000   		.space	3
 6043 1214 01000000 		.word	1
 6044 1218 2E       		.byte	46
 6045 1219 000000   		.space	3
 6046 121c FFFFFFFF 		.word	-1
 6047 1220 312F5800 		.ascii	"1/X\000"
 6048 1224 00000000 		.space	4
 6049 1228 00       		.ascii	"\000"
ARM GAS  /tmp/ccgLZIWS.s 			page 152


 6050 1229 00000000 		.space	7
 6050      000000
 6051 1230 1C       		.byte	28
 6052 1231 000000   		.space	3
 6053 1234 01000000 		.word	1
 6054 1238 2E       		.byte	46
 6055 1239 000000   		.space	3
 6056 123c FFFFFFFF 		.word	-1
 6057 1240 035800   		.ascii	"\003X\000"
 6058 1243 00000000 		.space	5
 6058      00
 6059 1248 00       		.ascii	"\000"
 6060 1249 00000000 		.space	7
 6060      000000
 6061 1250 13       		.byte	19
 6062 1251 000000   		.space	3
 6063 1254 02000000 		.word	2
 6064 1258 2E       		.byte	46
 6065 1259 000000   		.space	3
 6066 125c FFFFFFFF 		.word	-1
 6067 1260 4C4F4700 		.ascii	"LOG\000"
 6068 1264 00000000 		.space	4
 6069 1268 00       		.ascii	"\000"
 6070 1269 00000000 		.space	7
 6070      000000
 6071 1270 2C       		.byte	44
 6072 1271 000000   		.space	3
 6073 1274 FFFFFFFF 		.word	-1
 6074 1278 2E       		.byte	46
 6075 1279 000000   		.space	3
 6076 127c FFFFFFFF 		.word	-1
 6077 1280 2D2D0D00 		.ascii	"--\015\000"
 6078 1284 00000000 		.space	4
 6079 1288 00       		.ascii	"\000"
 6080 1289 00000000 		.space	7
 6080      000000
 6081 1290 2D       		.byte	45
 6082 1291 000000   		.space	3
 6083 1294 FFFFFFFF 		.word	-1
 6084 1298 2E       		.byte	46
 6085 1299 000000   		.space	3
 6086 129c FFFFFFFF 		.word	-1
 6087 12a0 43505800 		.ascii	"CPX\000"
 6088 12a4 00000000 		.space	4
 6089 12a8 00       		.ascii	"\000"
 6090 12a9 00000000 		.space	7
 6090      000000
 6091 12b0 4D5F4D69 		.ascii	"M_Misc_C\000"
 6091      73635F43 
 6091      00
 6092 12b9 00000000 		.space	6
 6092      0000
 6093 12bf 00       		.space	1
 6094 12c0 25       		.byte	37
 6095 12c1 000000   		.space	3
 6096 12c4 01000000 		.word	1
 6097 12c8 14       		.byte	20
ARM GAS  /tmp/ccgLZIWS.s 			page 153


 6098 12c9 000000   		.space	3
 6099 12cc 01000000 		.word	1
 6100 12d0 7C587C00 		.ascii	"|X|\000"
 6101 12d4 00000000 		.space	4
 6102 12d8 329C00   		.ascii	"2\234\000"
 6103 12db 00000000 		.space	5
 6103      00
 6104 12e0 25       		.byte	37
 6105 12e1 000000   		.space	3
 6106 12e4 02000000 		.word	2
 6107 12e8 14       		.byte	20
 6108 12e9 000000   		.space	3
 6109 12ec 02000000 		.word	2
 6110 12f0 524E4400 		.ascii	"RND\000"
 6111 12f4 00000000 		.space	4
 6112 12f8 4C6F67BA 		.ascii	"Log\272\000"
 6112      00
 6113 12fd 000000   		.space	3
 6114 1300 26       		.byte	38
 6115 1301 000000   		.space	3
 6116 1304 01000000 		.word	1
 6117 1308 15       		.byte	21
 6118 1309 000000   		.space	3
 6119 130c 02000000 		.word	2
 6120 1310 300D5265 		.ascii	"0\015Re\000"
 6120      00
 6121 1315 000000   		.space	3
 6122 1318 4C6F678B 		.ascii	"Log\213\000"
 6122      00
 6123 131d 000000   		.space	3
 6124 1320 26       		.byte	38
 6125 1321 000000   		.space	3
 6126 1324 02000000 		.word	2
 6127 1328 16       		.byte	22
 6128 1329 000000   		.space	3
 6129 132c 02000000 		.word	2
 6130 1330 300D496D 		.ascii	"0\015Im\000"
 6130      00
 6131 1335 000000   		.space	3
 6132 1338 7C7C656C 		.ascii	"||el\000"
 6132      00
 6133 133d 000000   		.space	3
 6134 1340 2C       		.byte	44
 6135 1341 000000   		.space	3
 6136 1344 FFFFFFFF 		.word	-1
 6137 1348 1C       		.byte	28
 6138 1349 000000   		.space	3
 6139 134c 03000000 		.word	3
 6140 1350 2D2D0D00 		.ascii	"--\015\000"
 6141 1354 00000000 		.space	4
 6142 1358 2E1C00   		.ascii	".\034\000"
 6143 135b 00000000 		.space	5
 6143      00
 6144 1360 2D       		.byte	45
 6145 1361 000000   		.space	3
 6146 1364 FFFFFFFF 		.word	-1
 6147 1368 16       		.byte	22
ARM GAS  /tmp/ccgLZIWS.s 			page 154


 6148 1369 000000   		.space	3
 6149 136c 03000000 		.word	3
 6150 1370 43505800 		.ascii	"CPX\000"
 6151 1374 00000000 		.space	4
 6152 1378 2E2F00   		.ascii	"./\000"
 6153 137b 00000000 		.space	5
 6153      00
 6154              		.section	.rodata.mapping_alpha.11094,"a"
 6155              		.align	2
 6156              		.set	.LANCHOR16,. + 0
 6159              	mapping_alpha.11094:
 6160 0000 63       		.byte	99
 6161 0001 000000   		.space	3
 6162 0004 FFFFFFFF 		.word	-1
 6163 0008 00       		.byte	0
 6164 0009 000000   		.space	3
 6165 000c FFFFFFFF 		.word	-1
 6166 0010 01       		.byte	1
 6167 0011 000000   		.space	3
 6168 0014 FFFFFFFF 		.word	-1
 6169 0018 02       		.byte	2
 6170 0019 000000   		.space	3
 6171 001c FFFFFFFF 		.word	-1
 6172 0020 03       		.byte	3
 6173 0021 000000   		.space	3
 6174 0024 FFFFFFFF 		.word	-1
 6175 0028 04       		.byte	4
 6176 0029 000000   		.space	3
 6177 002c FFFFFFFF 		.word	-1
 6178 0030 05       		.byte	5
 6179 0031 000000   		.space	3
 6180 0034 FFFFFFFF 		.word	-1
 6181 0038 06       		.byte	6
 6182 0039 000000   		.space	3
 6183 003c FFFFFFFF 		.word	-1
 6184 0040 07       		.byte	7
 6185 0041 000000   		.space	3
 6186 0044 FFFFFFFF 		.word	-1
 6187 0048 08       		.byte	8
 6188 0049 000000   		.space	3
 6189 004c FFFFFFFF 		.word	-1
 6190 0050 09       		.byte	9
 6191 0051 000000   		.space	3
 6192 0054 FFFFFFFF 		.word	-1
 6193 0058 0A       		.byte	10
 6194 0059 000000   		.space	3
 6195 005c FFFFFFFF 		.word	-1
 6196 0060 0B       		.byte	11
 6197 0061 000000   		.space	3
 6198 0064 FFFFFFFF 		.word	-1
 6199 0068 0C       		.byte	12
 6200 0069 000000   		.space	3
 6201 006c FFFFFFFF 		.word	-1
 6202 0070 0D       		.byte	13
 6203 0071 000000   		.space	3
 6204 0074 FFFFFFFF 		.word	-1
 6205 0078 0E       		.byte	14
ARM GAS  /tmp/ccgLZIWS.s 			page 155


 6206 0079 000000   		.space	3
 6207 007c FFFFFFFF 		.word	-1
 6208 0080 0F       		.byte	15
 6209 0081 000000   		.space	3
 6210 0084 FFFFFFFF 		.word	-1
 6211 0088 10       		.byte	16
 6212 0089 000000   		.space	3
 6213 008c FFFFFFFF 		.word	-1
 6214 0090 12       		.byte	18
 6215 0091 000000   		.space	3
 6216 0094 FFFFFFFF 		.word	-1
 6217 0098 13       		.byte	19
 6218 0099 000000   		.space	3
 6219 009c FFFFFFFF 		.word	-1
 6220 00a0 14       		.byte	20
 6221 00a1 000000   		.space	3
 6222 00a4 FFFFFFFF 		.word	-1
 6223 00a8 15       		.byte	21
 6224 00a9 000000   		.space	3
 6225 00ac FFFFFFFF 		.word	-1
 6226 00b0 16       		.byte	22
 6227 00b1 000000   		.space	3
 6228 00b4 FFFFFFFF 		.word	-1
 6229 00b8 18       		.byte	24
 6230 00b9 000000   		.space	3
 6231 00bc FFFFFFFF 		.word	-1
 6232 00c0 19       		.byte	25
 6233 00c1 000000   		.space	3
 6234 00c4 FFFFFFFF 		.word	-1
 6235 00c8 1A       		.byte	26
 6236 00c9 000000   		.space	3
 6237 00cc FFFFFFFF 		.word	-1
 6238 00d0 1B       		.byte	27
 6239 00d1 000000   		.space	3
 6240 00d4 FFFFFFFF 		.word	-1
 6241 00d8 1C       		.byte	28
 6242 00d9 000000   		.space	3
 6243 00dc FFFFFFFF 		.word	-1
 6244 00e0 1E       		.byte	30
 6245 00e1 000000   		.space	3
 6246 00e4 FFFFFFFF 		.word	-1
 6247 00e8 1F       		.byte	31
 6248 00e9 000000   		.space	3
 6249 00ec FFFFFFFF 		.word	-1
 6250 00f0 20       		.byte	32
 6251 00f1 000000   		.space	3
 6252 00f4 FFFFFFFF 		.word	-1
 6253 00f8 21       		.byte	33
 6254 00f9 000000   		.space	3
 6255 00fc FFFFFFFF 		.word	-1
 6256 0100 22       		.byte	34
 6257 0101 000000   		.space	3
 6258 0104 FFFFFFFF 		.word	-1
 6259 0108 24       		.byte	36
 6260 0109 000000   		.space	3
 6261 010c FFFFFFFF 		.word	-1
 6262 0110 25       		.byte	37
ARM GAS  /tmp/ccgLZIWS.s 			page 156


 6263 0111 000000   		.space	3
 6264 0114 FFFFFFFF 		.word	-1
 6265 0118 26       		.byte	38
 6266 0119 000000   		.space	3
 6267 011c FFFFFFFF 		.word	-1
 6268 0120 27       		.byte	39
 6269 0121 000000   		.space	3
 6270 0124 FFFFFFFF 		.word	-1
 6271 0128 28       		.byte	40
 6272 0129 000000   		.space	3
 6273 012c FFFFFFFF 		.word	-1
 6274 0130 2E       		.byte	46
 6275 0131 000000   		.space	3
 6276 0134 FFFFFFFF 		.word	-1
 6277 0138 2E       		.byte	46
 6278 0139 000000   		.space	3
 6279 013c FFFFFFFF 		.word	-1
 6280 0140 2E       		.byte	46
 6281 0141 000000   		.space	3
 6282 0144 FFFFFFFF 		.word	-1
 6283 0148 2E       		.byte	46
 6284 0149 000000   		.space	3
 6285 014c FFFFFFFF 		.word	-1
 6286 0150 2C       		.byte	44
 6287 0151 000000   		.space	3
 6288 0154 FFFFFFFF 		.word	-1
 6289 0158 2D       		.byte	45
 6290 0159 000000   		.space	3
 6291 015c FFFFFFFF 		.word	-1
 6292 0160 2E       		.byte	46
 6293 0161 000000   		.space	3
 6294 0164 FFFFFFFF 		.word	-1
 6295 0168 2E       		.byte	46
 6296 0169 000000   		.space	3
 6297 016c FFFFFFFF 		.word	-1
 6298 0170 2E       		.byte	46
 6299 0171 000000   		.space	3
 6300 0174 FFFFFFFF 		.word	-1
 6301              		.section	.rodata.mapping_fshift.11092,"a"
 6302              		.align	2
 6303              		.set	.LANCHOR14,. + 0
 6306              	mapping_fshift.11092:
 6307 0000 63       		.byte	99
 6308 0001 000000   		.space	3
 6309 0004 FFFFFFFF 		.word	-1
 6310 0008 22       		.byte	34
 6311 0009 000000   		.space	3
 6312 000c 03000000 		.word	3
 6313 0010 15       		.byte	21
 6314 0011 000000   		.space	3
 6315 0014 01000000 		.word	1
 6316 0018 1C       		.byte	28
 6317 0019 000000   		.space	3
 6318 001c 02000000 		.word	2
 6319 0020 13       		.byte	19
 6320 0021 000000   		.space	3
 6321 0024 01000000 		.word	1
ARM GAS  /tmp/ccgLZIWS.s 			page 157


 6322 0028 12       		.byte	18
 6323 0029 000000   		.space	3
 6324 002c 01000000 		.word	1
 6325 0030 12       		.byte	18
 6326 0031 000000   		.space	3
 6327 0034 03000000 		.word	3
 6328 0038 31       		.byte	49
 6329 0039 000000   		.space	3
 6330 003c 0F000000 		.word	15
 6331 0040 22       		.byte	34
 6332 0041 000000   		.space	3
 6333 0044 01000000 		.word	1
 6334 0048 0F       		.byte	15
 6335 0049 000000   		.space	3
 6336 004c 03000000 		.word	3
 6337 0050 01       		.byte	1
 6338 0051 000000   		.space	3
 6339 0054 02000000 		.word	2
 6340 0058 02       		.byte	2
 6341 0059 000000   		.space	3
 6342 005c 02000000 		.word	2
 6343 0060 03       		.byte	3
 6344 0061 000000   		.space	3
 6345 0064 02000000 		.word	2
 6346 0068 0C       		.byte	12
 6347 0069 000000   		.space	3
 6348 006c 01000000 		.word	1
 6349 0070 31       		.byte	49
 6350 0071 000000   		.space	3
 6351 0074 01000000 		.word	1
 6352 0078 2F       		.byte	47
 6353 0079 000000   		.space	3
 6354 007c 04000000 		.word	4
 6355 0080 2F       		.byte	47
 6356 0081 000000   		.space	3
 6357 0084 02000000 		.word	2
 6358 0088 2F       		.byte	47
 6359 0089 000000   		.space	3
 6360 008c 01000000 		.word	1
 6361 0090 18       		.byte	24
 6362 0091 000000   		.space	3
 6363 0094 00000000 		.word	0
 6364 0098 20       		.byte	32
 6365 0099 000000   		.space	3
 6366 009c 01000000 		.word	1
 6367 00a0 2F       		.byte	47
 6368 00a1 000000   		.space	3
 6369 00a4 0E000000 		.word	14
 6370 00a8 1C       		.byte	28
 6371 00a9 000000   		.space	3
 6372 00ac 03000000 		.word	3
 6373 00b0 2F       		.byte	47
 6374 00b1 000000   		.space	3
 6375 00b4 0C000000 		.word	12
 6376 00b8 1E       		.byte	30
 6377 00b9 000000   		.space	3
 6378 00bc 00000000 		.word	0
ARM GAS  /tmp/ccgLZIWS.s 			page 158


 6379 00c0 2F       		.byte	47
 6380 00c1 000000   		.space	3
 6381 00c4 03000000 		.word	3
 6382 00c8 04       		.byte	4
 6383 00c9 000000   		.space	3
 6384 00cc 03000000 		.word	3
 6385 00d0 2F       		.byte	47
 6386 00d1 000000   		.space	3
 6387 00d4 0A000000 		.word	10
 6388 00d8 2F       		.byte	47
 6389 00d9 000000   		.space	3
 6390 00dc 0B000000 		.word	11
 6391 00e0 2A       		.byte	42
 6392 00e1 000000   		.space	3
 6393 00e4 00000000 		.word	0
 6394 00e8 31       		.byte	49
 6395 00e9 000000   		.space	3
 6396 00ec 0D000000 		.word	13
 6397 00f0 2F       		.byte	47
 6398 00f1 000000   		.space	3
 6399 00f4 63000000 		.word	99
 6400 00f8 20       		.byte	32
 6401 00f9 000000   		.space	3
 6402 00fc 03000000 		.word	3
 6403 0100 2E       		.byte	46
 6404 0101 000000   		.space	3
 6405 0104 00000000 		.word	0
 6406 0108 24       		.byte	36
 6407 0109 000000   		.space	3
 6408 010c 03000000 		.word	3
 6409 0110 2F       		.byte	47
 6410 0111 000000   		.space	3
 6411 0114 08000000 		.word	8
 6412 0118 0D       		.byte	13
 6413 0119 000000   		.space	3
 6414 011c 01000000 		.word	1
 6415 0120 27       		.byte	39
 6416 0121 000000   		.space	3
 6417 0124 03000000 		.word	3
 6418 0128 06       		.byte	6
 6419 0129 000000   		.space	3
 6420 012c 03000000 		.word	3
 6421 0130 2E       		.byte	46
 6422 0131 000000   		.space	3
 6423 0134 00000000 		.word	0
 6424 0138 2E       		.byte	46
 6425 0139 000000   		.space	3
 6426 013c 00000000 		.word	0
 6427 0140 2E       		.byte	46
 6428 0141 000000   		.space	3
 6429 0144 00000000 		.word	0
 6430 0148 2E       		.byte	46
 6431 0149 000000   		.space	3
 6432 014c 00000000 		.word	0
 6433 0150 2E       		.byte	46
 6434 0151 000000   		.space	3
 6435 0154 00000000 		.word	0
ARM GAS  /tmp/ccgLZIWS.s 			page 159


 6436 0158 2E       		.byte	46
 6437 0159 000000   		.space	3
 6438 015c 00000000 		.word	0
 6439 0160 2E       		.byte	46
 6440 0161 000000   		.space	3
 6441 0164 00000000 		.word	0
 6442 0168 2F       		.byte	47
 6443 0169 000000   		.space	3
 6444 016c FFFFFFFF 		.word	-1
 6445 0170 2F       		.byte	47
 6446 0171 000000   		.space	3
 6447 0174 05000000 		.word	5
 6448              		.section	.rodata.mapping_gshift.11093,"a"
 6449              		.align	2
 6450              		.set	.LANCHOR17,. + 0
 6453              	mapping_gshift.11093:
 6454 0000 63       		.byte	99
 6455 0001 000000   		.space	3
 6456 0004 FFFFFFFF 		.word	-1
 6457 0008 28       		.byte	40
 6458 0009 000000   		.space	3
 6459 000c 03000000 		.word	3
 6460 0010 16       		.byte	22
 6461 0011 000000   		.space	3
 6462 0014 01000000 		.word	1
 6463 0018 1C       		.byte	28
 6464 0019 000000   		.space	3
 6465 001c 01000000 		.word	1
 6466 0020 13       		.byte	19
 6467 0021 000000   		.space	3
 6468 0024 02000000 		.word	2
 6469 0028 2E       		.byte	46
 6470 0029 000000   		.space	3
 6471 002c 00000000 		.word	0
 6472 0030 2E       		.byte	46
 6473 0031 000000   		.space	3
 6474 0034 00000000 		.word	0
 6475 0038 2E       		.byte	46
 6476 0039 000000   		.space	3
 6477 003c 00000000 		.word	0
 6478 0040 07       		.byte	7
 6479 0041 000000   		.space	3
 6480 0044 03000000 		.word	3
 6481 0048 08       		.byte	8
 6482 0049 000000   		.space	3
 6483 004c 03000000 		.word	3
 6484 0050 2F       		.byte	47
 6485 0051 000000   		.space	3
 6486 0054 04000000 		.word	4
 6487 0058 2F       		.byte	47
 6488 0059 000000   		.space	3
 6489 005c 04000000 		.word	4
 6490 0060 2F       		.byte	47
 6491 0061 000000   		.space	3
 6492 0064 04000000 		.word	4
 6493 0068 0C       		.byte	12
 6494 0069 000000   		.space	3
ARM GAS  /tmp/ccgLZIWS.s 			page 160


 6495 006c 02000000 		.word	2
 6496 0070 2F       		.byte	47
 6497 0071 000000   		.space	3
 6498 0074 06000000 		.word	6
 6499 0078 05       		.byte	5
 6500 0079 000000   		.space	3
 6501 007c 03000000 		.word	3
 6502 0080 2E       		.byte	46
 6503 0081 000000   		.space	3
 6504 0084 00000000 		.word	0
 6505 0088 2E       		.byte	46
 6506 0089 000000   		.space	3
 6507 008c 00000000 		.word	0
 6508 0090 2E       		.byte	46
 6509 0091 000000   		.space	3
 6510 0094 00000000 		.word	0
 6511 0098 2E       		.byte	46
 6512 0099 000000   		.space	3
 6513 009c 00000000 		.word	0
 6514 00a0 2E       		.byte	46
 6515 00a1 000000   		.space	3
 6516 00a4 00000000 		.word	0
 6517 00a8 1B       		.byte	27
 6518 00a9 000000   		.space	3
 6519 00ac 03000000 		.word	3
 6520 00b0 1A       		.byte	26
 6521 00b1 000000   		.space	3
 6522 00b4 03000000 		.word	3
 6523 00b8 2E       		.byte	46
 6524 00b9 000000   		.space	3
 6525 00bc 00000000 		.word	0
 6526 00c0 2E       		.byte	46
 6527 00c1 000000   		.space	3
 6528 00c4 00000000 		.word	0
 6529 00c8 0C       		.byte	12
 6530 00c9 000000   		.space	3
 6531 00cc 03000000 		.word	3
 6532 00d0 1F       		.byte	31
 6533 00d1 000000   		.space	3
 6534 00d4 03000000 		.word	3
 6535 00d8 19       		.byte	25
 6536 00d9 000000   		.space	3
 6537 00dc 03000000 		.word	3
 6538 00e0 2A       		.byte	42
 6539 00e1 000000   		.space	3
 6540 00e4 FFFFFFFF 		.word	-1
 6541 00e8 2E       		.byte	46
 6542 00e9 000000   		.space	3
 6543 00ec 00000000 		.word	0
 6544 00f0 31       		.byte	49
 6545 00f1 000000   		.space	3
 6546 00f4 0E000000 		.word	14
 6547 00f8 21       		.byte	33
 6548 00f9 000000   		.space	3
 6549 00fc 03000000 		.word	3
 6550 0100 2E       		.byte	46
 6551 0101 000000   		.space	3
ARM GAS  /tmp/ccgLZIWS.s 			page 161


 6552 0104 00000000 		.word	0
 6553 0108 24       		.byte	36
 6554 0109 000000   		.space	3
 6555 010c 02000000 		.word	2
 6556 0110 2F       		.byte	47
 6557 0111 000000   		.space	3
 6558 0114 0D000000 		.word	13
 6559 0118 2E       		.byte	46
 6560 0119 000000   		.space	3
 6561 011c 00000000 		.word	0
 6562 0120 2F       		.byte	47
 6563 0121 000000   		.space	3
 6564 0124 07000000 		.word	7
 6565 0128 1E       		.byte	30
 6566 0129 000000   		.space	3
 6567 012c 03000000 		.word	3
 6568 0130 2E       		.byte	46
 6569 0131 000000   		.space	3
 6570 0134 00000000 		.word	0
 6571 0138 2E       		.byte	46
 6572 0139 000000   		.space	3
 6573 013c 00000000 		.word	0
 6574 0140 2E       		.byte	46
 6575 0141 000000   		.space	3
 6576 0144 00000000 		.word	0
 6577 0148 2E       		.byte	46
 6578 0149 000000   		.space	3
 6579 014c 00000000 		.word	0
 6580 0150 2E       		.byte	46
 6581 0151 000000   		.space	3
 6582 0154 00000000 		.word	0
 6583 0158 2E       		.byte	46
 6584 0159 000000   		.space	3
 6585 015c 00000000 		.word	0
 6586 0160 2E       		.byte	46
 6587 0161 000000   		.space	3
 6588 0164 00000000 		.word	0
 6589 0168 2E       		.byte	46
 6590 0169 000000   		.space	3
 6591 016c 00000000 		.word	0
 6592 0170 2E       		.byte	46
 6593 0171 000000   		.space	3
 6594 0174 00000000 		.word	0
 6595              		.section	.rodata.mapping_none.11091,"a"
 6596              		.align	2
 6597              		.set	.LANCHOR13,. + 0
 6600              	mapping_none.11091:
 6601 0000 63       		.byte	99
 6602 0001 000000   		.space	3
 6603 0004 FFFFFFFF 		.word	-1
 6604 0008 00       		.byte	0
 6605 0009 000000   		.space	3
 6606 000c 00000000 		.word	0
 6607 0010 01       		.byte	1
 6608 0011 000000   		.space	3
 6609 0014 00000000 		.word	0
 6610 0018 03       		.byte	3
ARM GAS  /tmp/ccgLZIWS.s 			page 162


 6611 0019 000000   		.space	3
 6612 001c 00000000 		.word	0
 6613 0020 13       		.byte	19
 6614 0021 000000   		.space	3
 6615 0024 02000000 		.word	2
 6616 0028 12       		.byte	18
 6617 0029 000000   		.space	3
 6618 002c 02000000 		.word	2
 6619 0030 12       		.byte	18
 6620 0031 000000   		.space	3
 6621 0034 00000000 		.word	0
 6622 0038 06       		.byte	6
 6623 0039 000000   		.space	3
 6624 003c 00000000 		.word	0
 6625 0040 07       		.byte	7
 6626 0041 000000   		.space	3
 6627 0044 00000000 		.word	0
 6628 0048 08       		.byte	8
 6629 0049 000000   		.space	3
 6630 004c 00000000 		.word	0
 6631 0050 01       		.byte	1
 6632 0051 000000   		.space	3
 6633 0054 01000000 		.word	1
 6634 0058 02       		.byte	2
 6635 0059 000000   		.space	3
 6636 005c 01000000 		.word	1
 6637 0060 03       		.byte	3
 6638 0061 000000   		.space	3
 6639 0064 01000000 		.word	1
 6640 0068 0C       		.byte	12
 6641 0069 000000   		.space	3
 6642 006c 00000000 		.word	0
 6643 0070 0D       		.byte	13
 6644 0071 000000   		.space	3
 6645 0074 00000000 		.word	0
 6646 0078 0E       		.byte	14
 6647 0079 000000   		.space	3
 6648 007c 00000000 		.word	0
 6649 0080 0F       		.byte	15
 6650 0081 000000   		.space	3
 6651 0084 00000000 		.word	0
 6652 0088 10       		.byte	16
 6653 0089 000000   		.space	3
 6654 008c 00000000 		.word	0
 6655 0090 18       		.byte	24
 6656 0091 000000   		.space	3
 6657 0094 00000000 		.word	0
 6658 0098 13       		.byte	19
 6659 0099 000000   		.space	3
 6660 009c 00000000 		.word	0
 6661 00a0 14       		.byte	20
 6662 00a1 000000   		.space	3
 6663 00a4 00000000 		.word	0
 6664 00a8 15       		.byte	21
 6665 00a9 000000   		.space	3
 6666 00ac 00000000 		.word	0
 6667 00b0 16       		.byte	22
ARM GAS  /tmp/ccgLZIWS.s 			page 163


 6668 00b1 000000   		.space	3
 6669 00b4 00000000 		.word	0
 6670 00b8 1E       		.byte	30
 6671 00b9 000000   		.space	3
 6672 00bc 00000000 		.word	0
 6673 00c0 19       		.byte	25
 6674 00c1 000000   		.space	3
 6675 00c4 00000000 		.word	0
 6676 00c8 1A       		.byte	26
 6677 00c9 000000   		.space	3
 6678 00cc 00000000 		.word	0
 6679 00d0 1B       		.byte	27
 6680 00d1 000000   		.space	3
 6681 00d4 00000000 		.word	0
 6682 00d8 1C       		.byte	28
 6683 00d9 000000   		.space	3
 6684 00dc 00000000 		.word	0
 6685 00e0 29       		.byte	41
 6686 00e1 000000   		.space	3
 6687 00e4 00000000 		.word	0
 6688 00e8 1F       		.byte	31
 6689 00e9 000000   		.space	3
 6690 00ec 00000000 		.word	0
 6691 00f0 20       		.byte	32
 6692 00f1 000000   		.space	3
 6693 00f4 00000000 		.word	0
 6694 00f8 21       		.byte	33
 6695 00f9 000000   		.space	3
 6696 00fc 00000000 		.word	0
 6697 0100 22       		.byte	34
 6698 0101 000000   		.space	3
 6699 0104 00000000 		.word	0
 6700 0108 24       		.byte	36
 6701 0109 000000   		.space	3
 6702 010c 00000000 		.word	0
 6703 0110 25       		.byte	37
 6704 0111 000000   		.space	3
 6705 0114 00000000 		.word	0
 6706 0118 26       		.byte	38
 6707 0119 000000   		.space	3
 6708 011c 00000000 		.word	0
 6709 0120 27       		.byte	39
 6710 0121 000000   		.space	3
 6711 0124 00000000 		.word	0
 6712 0128 28       		.byte	40
 6713 0129 000000   		.space	3
 6714 012c 00000000 		.word	0
 6715 0130 2E       		.byte	46
 6716 0131 000000   		.space	3
 6717 0134 00000000 		.word	0
 6718 0138 2E       		.byte	46
 6719 0139 000000   		.space	3
 6720 013c 00000000 		.word	0
 6721 0140 2E       		.byte	46
 6722 0141 000000   		.space	3
 6723 0144 00000000 		.word	0
 6724 0148 2E       		.byte	46
ARM GAS  /tmp/ccgLZIWS.s 			page 164


 6725 0149 000000   		.space	3
 6726 014c 00000000 		.word	0
 6727 0150 2E       		.byte	46
 6728 0151 000000   		.space	3
 6729 0154 00000000 		.word	0
 6730 0158 2E       		.byte	46
 6731 0159 000000   		.space	3
 6732 015c 00000000 		.word	0
 6733 0160 2E       		.byte	46
 6734 0161 000000   		.space	3
 6735 0164 00000000 		.word	0
 6736 0168 2E       		.byte	46
 6737 0169 000000   		.space	3
 6738 016c 00000000 		.word	0
 6739 0170 2E       		.byte	46
 6740 0171 000000   		.space	3
 6741 0174 00000000 		.word	0
 6742              		.section	.rodata.mapping_running.11095,"a"
 6743              		.align	2
 6744              		.set	.LANCHOR12,. + 0
 6747              	mapping_running.11095:
 6748 0000 63       		.byte	99
 6749 0001 000000   		.space	3
 6750 0004 FFFFFFFF 		.word	-1
 6751 0008 00       		.byte	0
 6752 0009 000000   		.space	3
 6753 000c 00000000 		.word	0
 6754 0010 01       		.byte	1
 6755 0011 000000   		.space	3
 6756 0014 00000000 		.word	0
 6757 0018 02       		.byte	2
 6758 0019 000000   		.space	3
 6759 001c 00000000 		.word	0
 6760 0020 03       		.byte	3
 6761 0021 000000   		.space	3
 6762 0024 00000000 		.word	0
 6763 0028 04       		.byte	4
 6764 0029 000000   		.space	3
 6765 002c 00000000 		.word	0
 6766 0030 12       		.byte	18
 6767 0031 000000   		.space	3
 6768 0034 00000000 		.word	0
 6769 0038 06       		.byte	6
 6770 0039 000000   		.space	3
 6771 003c 00000000 		.word	0
 6772 0040 07       		.byte	7
 6773 0041 000000   		.space	3
 6774 0044 00000000 		.word	0
 6775 0048 08       		.byte	8
 6776 0049 000000   		.space	3
 6777 004c 00000000 		.word	0
 6778 0050 09       		.byte	9
 6779 0051 000000   		.space	3
 6780 0054 00000000 		.word	0
 6781 0058 0A       		.byte	10
 6782 0059 000000   		.space	3
 6783 005c 00000000 		.word	0
ARM GAS  /tmp/ccgLZIWS.s 			page 165


 6784 0060 0B       		.byte	11
 6785 0061 000000   		.space	3
 6786 0064 00000000 		.word	0
 6787 0068 0C       		.byte	12
 6788 0069 000000   		.space	3
 6789 006c 00000000 		.word	0
 6790 0070 0D       		.byte	13
 6791 0071 000000   		.space	3
 6792 0074 00000000 		.word	0
 6793 0078 0E       		.byte	14
 6794 0079 000000   		.space	3
 6795 007c 00000000 		.word	0
 6796 0080 0F       		.byte	15
 6797 0081 000000   		.space	3
 6798 0084 00000000 		.word	0
 6799 0088 10       		.byte	16
 6800 0089 000000   		.space	3
 6801 008c 00000000 		.word	0
 6802 0090 18       		.byte	24
 6803 0091 000000   		.space	3
 6804 0094 00000000 		.word	0
 6805 0098 13       		.byte	19
 6806 0099 000000   		.space	3
 6807 009c 00000000 		.word	0
 6808 00a0 14       		.byte	20
 6809 00a1 000000   		.space	3
 6810 00a4 00000000 		.word	0
 6811 00a8 15       		.byte	21
 6812 00a9 000000   		.space	3
 6813 00ac 00000000 		.word	0
 6814 00b0 16       		.byte	22
 6815 00b1 000000   		.space	3
 6816 00b4 00000000 		.word	0
 6817 00b8 1E       		.byte	30
 6818 00b9 000000   		.space	3
 6819 00bc 00000000 		.word	0
 6820 00c0 19       		.byte	25
 6821 00c1 000000   		.space	3
 6822 00c4 00000000 		.word	0
 6823 00c8 1A       		.byte	26
 6824 00c9 000000   		.space	3
 6825 00cc 00000000 		.word	0
 6826 00d0 1B       		.byte	27
 6827 00d1 000000   		.space	3
 6828 00d4 00000000 		.word	0
 6829 00d8 1C       		.byte	28
 6830 00d9 000000   		.space	3
 6831 00dc 00000000 		.word	0
 6832 00e0 09       		.byte	9
 6833 00e1 000000   		.space	3
 6834 00e4 00000000 		.word	0
 6835 00e8 1F       		.byte	31
 6836 00e9 000000   		.space	3
 6837 00ec 00000000 		.word	0
 6838 00f0 20       		.byte	32
 6839 00f1 000000   		.space	3
 6840 00f4 00000000 		.word	0
ARM GAS  /tmp/ccgLZIWS.s 			page 166


 6841 00f8 21       		.byte	33
 6842 00f9 000000   		.space	3
 6843 00fc 00000000 		.word	0
 6844 0100 22       		.byte	34
 6845 0101 000000   		.space	3
 6846 0104 00000000 		.word	0
 6847 0108 24       		.byte	36
 6848 0109 000000   		.space	3
 6849 010c 00000000 		.word	0
 6850 0110 25       		.byte	37
 6851 0111 000000   		.space	3
 6852 0114 00000000 		.word	0
 6853 0118 26       		.byte	38
 6854 0119 000000   		.space	3
 6855 011c 00000000 		.word	0
 6856 0120 27       		.byte	39
 6857 0121 000000   		.space	3
 6858 0124 00000000 		.word	0
 6859 0128 28       		.byte	40
 6860 0129 000000   		.space	3
 6861 012c 00000000 		.word	0
 6862 0130 2E       		.byte	46
 6863 0131 000000   		.space	3
 6864 0134 00000000 		.word	0
 6865 0138 2E       		.byte	46
 6866 0139 000000   		.space	3
 6867 013c 00000000 		.word	0
 6868 0140 2E       		.byte	46
 6869 0141 000000   		.space	3
 6870 0144 00000000 		.word	0
 6871 0148 2E       		.byte	46
 6872 0149 000000   		.space	3
 6873 014c 00000000 		.word	0
 6874 0150 04       		.byte	4
 6875 0151 000000   		.space	3
 6876 0154 00000000 		.word	0
 6877 0158 05       		.byte	5
 6878 0159 000000   		.space	3
 6879 015c 00000000 		.word	0
 6880 0160 2E       		.byte	46
 6881 0161 000000   		.space	3
 6882 0164 00000000 		.word	0
 6883 0168 2E       		.byte	46
 6884 0169 000000   		.space	3
 6885 016c 00000000 		.word	0
 6886 0170 2E       		.byte	46
 6887 0171 000000   		.space	3
 6888 0174 00000000 		.word	0
 6889              		.section	.rodata.mid_menu,"a"
 6890              		.align	2
 6893              	mid_menu:
 6894 0000 C8C40B00 		.ascii	"\310\304\013\000"
 6895              		.text
 6896              	.Letext0:
 6897              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 6898              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 6899              		.file 6 "/usr/include/newlib/sys/_types.h"
ARM GAS  /tmp/ccgLZIWS.s 			page 167


 6900              		.file 7 "/usr/include/newlib/sys/reent.h"
 6901              		.file 8 "/usr/include/newlib/sys/lock.h"
 6902              		.file 9 "/usr/include/newlib/stdlib.h"
 6903              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 6904              		.file 11 "/usr/include/newlib/ctype.h"
 6905              		.file 12 "dmcp/ff_ifc.h"
 6906              		.file 13 "dmcp/dmcp.h"
 6907              		.file 14 "src/keys.h"
 6908              		.file 15 "src/menu.h"
 6909              		.file 16 "src/decNumber/decContext.h"
 6910              		.file 17 "src/decNumber/decNumber.h"
 6911              		.file 18 "src/decNumber/decimal64.h"
 6912              		.file 19 "src/decNumber/decimal128.h"
 6913              		.file 20 "src/xeq.h"
 6914              		.file 21 "src/data.h"
 6915              		.file 22 "src/display.h"
 6916              		.file 23 "src/consts.h"
 6917              		.file 24 "src/storage.h"
 6918              		.file 25 "src/catalogues.h"
 6919              		.file 26 "src/stopwatch.h"
 6920              		.file 27 "src/lcd.h"
 6921              		.file 28 "/usr/include/newlib/string.h"
 6922              		.file 29 "/usr/include/newlib/stdio.h"
 6923              		.file 30 "<built-in>"
ARM GAS  /tmp/ccgLZIWS.s 			page 168


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccgLZIWS.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/ccgLZIWS.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/ccgLZIWS.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/ccgLZIWS.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/ccgLZIWS.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccgLZIWS.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccgLZIWS.s:433    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/ccgLZIWS.s:441    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/ccgLZIWS.s:460    .text.disp_about:0000000000000000 $t
     /tmp/ccgLZIWS.s:468    .text.disp_about:0000000000000000 disp_about
     /tmp/ccgLZIWS.s:621    .text.disp_about:0000000000000080 $d
     /tmp/ccgLZIWS.s:639    .text.run_menu_item:0000000000000000 $t
     /tmp/ccgLZIWS.s:647    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/ccgLZIWS.s:687    .text.set_menu:0000000000000000 $t
     /tmp/ccgLZIWS.s:695    .text.set_menu:0000000000000000 set_menu
     /tmp/ccgLZIWS.s:750    .text.set_menu:000000000000002c $d
     /tmp/ccgLZIWS.s:757    .text.set_default_menu:0000000000000000 $t
     /tmp/ccgLZIWS.s:765    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/ccgLZIWS.s:839    .text.set_default_menu:000000000000002c $d
     /tmp/ccgLZIWS.s:848    .text.toggle_default_menu:0000000000000000 $t
     /tmp/ccgLZIWS.s:856    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/ccgLZIWS.s:958    .text.toggle_default_menu:0000000000000044 $d
     /tmp/ccgLZIWS.s:969    .text.get_menu:0000000000000000 $t
     /tmp/ccgLZIWS.s:977    .text.get_menu:0000000000000000 get_menu
     /tmp/ccgLZIWS.s:993    .text.get_menu:0000000000000008 $d
     /tmp/ccgLZIWS.s:998    .text.get_last_menu:0000000000000000 $t
     /tmp/ccgLZIWS.s:1006   .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/ccgLZIWS.s:1022   .text.get_last_menu:0000000000000008 $d
     /tmp/ccgLZIWS.s:1027   .text.set_last_menu:0000000000000000 $t
     /tmp/ccgLZIWS.s:1035   .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccgLZIWS.s:1110   .text.set_last_menu:000000000000002c $d
     /tmp/ccgLZIWS.s:1119   .text.mdot:0000000000000000 $t
     /tmp/ccgLZIWS.s:1127   .text.mdot:0000000000000000 mdot
     /tmp/ccgLZIWS.s:1218   .text.mdot:000000000000003c $d
     /tmp/ccgLZIWS.s:1223   .text.get_current_menu_ref:0000000000000000 $t
     /tmp/ccgLZIWS.s:1231   .text.get_current_menu_ref:0000000000000000 get_current_menu_ref
     /tmp/ccgLZIWS.s:1298   .text.get_current_menu_ref:0000000000000040 $d
     /tmp/ccgLZIWS.s:1313   .text.get_current_menu_ref:000000000000007c $t
     /tmp/ccgLZIWS.s:1383   .text.get_current_menu_ref:00000000000000a8 $d
     /tmp/ccgLZIWS.s:4641   .rodata.Menus:0000000000000000 Menus
     /tmp/ccgLZIWS.s:1391   .text.display_menu:0000000000000000 $t
     /tmp/ccgLZIWS.s:1399   .text.display_menu:0000000000000000 display_menu
     /tmp/ccgLZIWS.s:1647   .text.display_menu:000000000000010c $d
     /tmp/ccgLZIWS.s:1654   .text.display_current_menu:0000000000000000 $t
     /tmp/ccgLZIWS.s:1662   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccgLZIWS.s:1698   .text.all_menu_dots:0000000000000000 $t
     /tmp/ccgLZIWS.s:1706   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccgLZIWS.s:1790   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccgLZIWS.s:1795   .text.build_user_menu:0000000000000000 $t
     /tmp/ccgLZIWS.s:1803   .text.build_user_menu:0000000000000000 build_user_menu
     /tmp/ccgLZIWS.s:2092   .text.build_user_menu:0000000000000124 $d
     /tmp/ccgLZIWS.s:2103   .text.shutdown:0000000000000000 $t
     /tmp/ccgLZIWS.s:2111   .text.shutdown:0000000000000000 shutdown
     /tmp/ccgLZIWS.s:2129   .text.shutdown:000000000000000c $d
     /tmp/ccgLZIWS.s:2134   .text.is_key_pressed:0000000000000000 $t
ARM GAS  /tmp/ccgLZIWS.s 			page 169


     /tmp/ccgLZIWS.s:2142   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccgLZIWS.s:2165   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccgLZIWS.s:2170   .text.get_key:0000000000000000 $t
     /tmp/ccgLZIWS.s:2178   .text.get_key:0000000000000000 get_key
     /tmp/ccgLZIWS.s:2193   .text.get_key:0000000000000004 $d
     /tmp/ccgLZIWS.s:2198   .text.put_key:0000000000000000 $t
     /tmp/ccgLZIWS.s:2206   .text.put_key:0000000000000000 put_key
     /tmp/ccgLZIWS.s:2285   .text.put_key:000000000000003c $d
     /tmp/ccgLZIWS.s:2291   .text.shift_down:0000000000000000 $t
     /tmp/ccgLZIWS.s:2299   .text.shift_down:0000000000000000 shift_down
     /tmp/ccgLZIWS.s:2314   .text.start_key_timer:0000000000000000 $t
     /tmp/ccgLZIWS.s:2322   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccgLZIWS.s:2346   .text.start_key_timer:000000000000000c $d
     /tmp/ccgLZIWS.s:2352   .text.keyticks:0000000000000000 $t
     /tmp/ccgLZIWS.s:2360   .text.keyticks:0000000000000000 keyticks
     /tmp/ccgLZIWS.s:2391   .text.keyticks:0000000000000018 $d
     /tmp/ccgLZIWS.s:2397   .text.moveto:0000000000000000 $t
     /tmp/ccgLZIWS.s:2405   .text.moveto:0000000000000000 moveto
     /tmp/ccgLZIWS.s:2465   .text.moveto:000000000000002c $d
     /tmp/ccgLZIWS.s:2472   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccgLZIWS.s:2476   .text.print_debug:0000000000000000 $t
     /tmp/ccgLZIWS.s:2484   .text.print_debug:0000000000000000 print_debug
     /tmp/ccgLZIWS.s:2586   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccgLZIWS.s:2597   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccgLZIWS.s:2601   .text.print_debug2:0000000000000000 $t
     /tmp/ccgLZIWS.s:2609   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccgLZIWS.s:2711   .text.print_debug2:0000000000000064 $d
     /tmp/ccgLZIWS.s:2722   .text.do_now:0000000000000000 $t
     /tmp/ccgLZIWS.s:2730   .text.do_now:0000000000000000 do_now
     /tmp/ccgLZIWS.s:2765   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccgLZIWS.s:2769   .text.do_multi:0000000000000000 $t
     /tmp/ccgLZIWS.s:2777   .text.do_multi:0000000000000000 do_multi
     /tmp/ccgLZIWS.s:2808   .text.do_multi:000000000000001a $d
     /tmp/ccgLZIWS.s:3223   .text.do_multi:0000000000000168 $d
     /tmp/ccgLZIWS.s:3236   .text.program_main:0000000000000000 $t
     /tmp/ccgLZIWS.s:3244   .text.program_main:0000000000000000 program_main
     /tmp/ccgLZIWS.s:3537   .text.program_main:0000000000000126 $d
     /tmp/ccgLZIWS.s:3543   .text.program_main:0000000000000132 $t
     /tmp/ccgLZIWS.s:3923   .text.program_main:00000000000002e0 $d
     /tmp/ccgLZIWS.s:3961   .text.program_main:0000000000000368 $t
     /tmp/ccgLZIWS.s:4395   .text.program_main:0000000000000574 $d
     /tmp/ccgLZIWS.s:4476   .bss.n_p:0000000000000000 n_p
     /tmp/ccgLZIWS.s:4625   .data.spaces:0000000000000000 spaces
     /tmp/ccgLZIWS.s:4616   .data.release:0000000000000000 release
     /tmp/ccgLZIWS.s:4589   .data.h_shift:0000000000000000 h_shift
     /tmp/ccgLZIWS.s:4580   .data.g_shift:0000000000000000 g_shift
     /tmp/ccgLZIWS.s:4572   .data.f_shift:0000000000000000 f_shift
     /tmp/ccgLZIWS.s:4598   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccgLZIWS.s:4607   .data.no_key:0000000000000000 no_key
     /tmp/ccgLZIWS.s:4632   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccgLZIWS.s:4424   .rodata.str1.4:0000000000000000 $d
     /tmp/ccgLZIWS.s:6893   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccgLZIWS.s:4457   .bss.default_menu:0000000000000000 default_menu
     /tmp/ccgLZIWS.s:4463   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccgLZIWS.s:4451   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccgLZIWS.s:4566   .data.cmplx_key_string:0000000000000000 cmplx_key_string
ARM GAS  /tmp/ccgLZIWS.s 			page 170


     /tmp/ccgLZIWS.s:4559   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/ccgLZIWS.s:4490   .data.UserMenu:0000000000000000 UserMenu
     /tmp/ccgLZIWS.s:4441   .rodata:0000000000000000 $d
     /tmp/ccgLZIWS.s:4452   .bss.current_menu:0000000000000000 $d
     /tmp/ccgLZIWS.s:4458   .bss.default_menu:0000000000000000 $d
     /tmp/ccgLZIWS.s:4464   .bss.last_menu:0000000000000000 $d
     /tmp/ccgLZIWS.s:4466   .bss.mdots:0000000000000000 $d
     /tmp/ccgLZIWS.s:4470   .bss.mdots:0000000000000000 mdots
     /tmp/ccgLZIWS.s:4473   .bss.n_p:0000000000000000 $d
     /tmp/ccgLZIWS.s:4479   .bss.start_ticks:0000000000000000 $d
     /tmp/ccgLZIWS.s:4483   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccgLZIWS.s:4486   .data.UserMenu:0000000000000000 $d
     /tmp/ccgLZIWS.s:4555   .data.arrow_key_string:0000000000000000 $d
     /tmp/ccgLZIWS.s:4562   .data.cmplx_key_string:0000000000000000 $d
     /tmp/ccgLZIWS.s:4569   .data.f_shift:0000000000000000 $d
     /tmp/ccgLZIWS.s:4577   .data.g_shift:0000000000000000 $d
     /tmp/ccgLZIWS.s:4585   .data.h_shift:0000000000000000 $d
     /tmp/ccgLZIWS.s:4594   .data.heartbeat:0000000000000000 $d
     /tmp/ccgLZIWS.s:4603   .data.no_key:0000000000000000 $d
     /tmp/ccgLZIWS.s:4612   .data.release:0000000000000000 $d
     /tmp/ccgLZIWS.s:4621   .data.spaces:0000000000000000 $d
     /tmp/ccgLZIWS.s:4628   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccgLZIWS.s:4638   .rodata.Menus:0000000000000000 $d
     /tmp/ccgLZIWS.s:6155   .rodata.mapping_alpha.11094:0000000000000000 $d
     /tmp/ccgLZIWS.s:6159   .rodata.mapping_alpha.11094:0000000000000000 mapping_alpha.11094
     /tmp/ccgLZIWS.s:6302   .rodata.mapping_fshift.11092:0000000000000000 $d
     /tmp/ccgLZIWS.s:6306   .rodata.mapping_fshift.11092:0000000000000000 mapping_fshift.11092
     /tmp/ccgLZIWS.s:6449   .rodata.mapping_gshift.11093:0000000000000000 $d
     /tmp/ccgLZIWS.s:6453   .rodata.mapping_gshift.11093:0000000000000000 mapping_gshift.11093
     /tmp/ccgLZIWS.s:6596   .rodata.mapping_none.11091:0000000000000000 $d
     /tmp/ccgLZIWS.s:6600   .rodata.mapping_none.11091:0000000000000000 mapping_none.11091
     /tmp/ccgLZIWS.s:6743   .rodata.mapping_running.11095:0000000000000000 $d
     /tmp/ccgLZIWS.s:6747   .rodata.mapping_running.11095:0000000000000000 mapping_running.11095
     /tmp/ccgLZIWS.s:6890   .rodata.mid_menu:0000000000000000 $d
     /tmp/ccgLZIWS.s:2823   .text.do_multi:0000000000000029 $d
     /tmp/ccgLZIWS.s:2823   .text.do_multi:000000000000002a $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
memcpy
main_ram
pixel_length
findmultilbl
do_inc
getprog
catcmd
strncpy
strcpy
sprintf
process_keycode_with_shift
reset_shift
flash_backup
flash_restore
ARM GAS  /tmp/ccgLZIWS.s 			page 171


save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
KeyCallback
JustDisplayed
Pause
Running
DM42_Ticker
is_dot
dot
finish_display
get_alpha_state
StopWatchStatus

ARM GAS  /tmp/ccUw5X70.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_menu_label.constprop.0:
  27              	.LVL0:
  28              	.LFB26:
  29              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** void set_menu ( int new_menu ) {
   4:src/menu.c    ****   int m = current_menu;
   5:src/menu.c    ****   if (new_menu == current_menu) {
   6:src/menu.c    ****     current_menu = 0;
   7:src/menu.c    ****   }
   8:src/menu.c    ****   else if (new_menu == -1) {
   9:src/menu.c    ****     current_menu = last_menu;
  10:src/menu.c    ****   }
  11:src/menu.c    ****   else {
  12:src/menu.c    ****     current_menu = new_menu;
  13:src/menu.c    ****   }
  14:src/menu.c    ****   last_menu = m;
  15:src/menu.c    **** }
  16:src/menu.c    **** 
  17:src/menu.c    **** int get_menu () {
  18:src/menu.c    ****   return current_menu;
  19:src/menu.c    **** }
  20:src/menu.c    **** 
  21:src/menu.c    **** void display_current_menu () {
  22:src/menu.c    ****   display_menu (current_menu);
  23:src/menu.c    **** }
  24:src/menu.c    **** 
  25:src/menu.c    **** void set_last_menu () {
  26:src/menu.c    ****   set_menu (last_menu);
  27:src/menu.c    **** }
  28:src/menu.c    **** 
  29:src/menu.c    **** static unsigned char mdots[200][2];
ARM GAS  /tmp/ccUw5X70.s 			page 2


  30:src/menu.c    **** 
  31:src/menu.c    **** static const struct _menu Menus[] = {
  32:src/menu.c    ****   {
  33:src/menu.c    ****     "Blank", // 0
  34:src/menu.c    ****     { 
  35:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  36:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  37:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  38:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  39:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  40:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  41:src/menu.c    ****     }    
  42:src/menu.c    ****   },
  43:src/menu.c    ****   {
  44:src/menu.c    ****     "Clear", // 1
  45:src/menu.c    ****     { 
  46:src/menu.c    ****       { { K24, 1 }, NO_KEY, "CLProg", "" },
  47:src/menu.c    ****       { { K24, 2 }, NO_KEY, "CL\221", "" },
  48:src/menu.c    ****       { { K24, 3 }, NO_KEY, "CL X", "" },
  49:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  50:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  51:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  52:src/menu.c    ****     }    
  53:src/menu.c    ****   },
  54:src/menu.c    ****   {
  55:src/menu.c    ****     "DISP", // 2
  56:src/menu.c    ****     { 
  57:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
  58:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
  59:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
  60:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
  61:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
  62:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  63:src/menu.c    ****     }
  64:src/menu.c    ****   },
  65:src/menu.c    ****   {
  66:src/menu.c    ****     "BASE", // 3
  67:src/menu.c    ****     { 
  68:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
  69:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
  70:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
  71:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
  72:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
  73:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
  74:src/menu.c    ****     }
  75:src/menu.c    ****   },
  76:src/menu.c    ****   {
  77:src/menu.c    ****     "ANGLES", // 4
  78:src/menu.c    ****     { 
  79:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
  80:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
  81:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
  82:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
  83:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
  84:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  85:src/menu.c    ****     }
  86:src/menu.c    ****       
ARM GAS  /tmp/ccUw5X70.s 			page 3


  87:src/menu.c    ****   },
  88:src/menu.c    ****   {
  89:src/menu.c    ****     "MISC", // 5
  90:src/menu.c    ****     { 
  91:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
  92:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
  93:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
  94:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
  95:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
  96:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  97:src/menu.c    ****     }
  98:src/menu.c    ****   },
  99:src/menu.c    ****   {
 100:src/menu.c    ****     "X<>Y Key", // 6
 101:src/menu.c    ****     { 
 102:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 103:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 104:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 105:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 106:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 107:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 108:src/menu.c    ****     }    
 109:src/menu.c    ****   },
 110:src/menu.c    ****   {
 111:src/menu.c    ****     "Program", // 7
 112:src/menu.c    ****     { 
 113:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 114:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 115:src/menu.c    ****       { { K61, 3 }, NO_KEY, "Pause", "" },
 116:src/menu.c    ****       { { K30, 3 }, NO_KEY, "GTO", "" },
 117:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 118:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 119:src/menu.c    ****     }
 120:src/menu.c    ****   },
 121:src/menu.c    ****   {
 122:src/menu.c    ****     "Setup 1", // 8
 123:src/menu.c    ****     { 
 124:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 125:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 126:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 127:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 128:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 129:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 130:src/menu.c    ****     }
 131:src/menu.c    ****   },
 132:src/menu.c    ****   {
 133:src/menu.c    ****     "Arrow", // 9
 134:src/menu.c    ****     { 
 135:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 136:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 137:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 138:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "2HMS" },
 139:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS2" },
 140:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 141:src/menu.c    ****     }
 142:src/menu.c    ****   },
 143:src/menu.c    ****   {
ARM GAS  /tmp/ccUw5X70.s 			page 4


 144:src/menu.c    ****     "Flags", // 10
 145:src/menu.c    ****     { 
 146:src/menu.c    ****       { { K50, 1 }, NO_KEY, "SF_", "" },
 147:src/menu.c    ****       { { K50, 2 }, NO_KEY, "CF_", "" },
 148:src/menu.c    ****       { { K51, 1 }, NO_KEY, "x=?", "" },
 149:src/menu.c    ****       { { K51, 2 }, NO_KEY, "x\013?", "" },
 150:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 151:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 152:src/menu.c    ****     }
 153:src/menu.c    ****   },
 154:src/menu.c    ****   {
 155:src/menu.c    ****     "Probability", // 11
 156:src/menu.c    ****     { 
 157:src/menu.c    ****       { { K40, 3 }, { K41, 1 }, "Fact!", "\224" },
 158:src/menu.c    ****       { { K40, 1 }, { K41, 2 }, "Cy,x", "\224\235" },
 159:src/menu.c    ****       { { K40, 2 }, NO_KEY, "Py,x", "" },
 160:src/menu.c    ****       { { K12, 1 }, NO_KEY, "RAN#", "" },
 161:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 162:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 163:src/menu.c    ****     }
 164:src/menu.c    ****   },
 165:src/menu.c    ****   {
 166:src/menu.c    ****     "Statistics", // 12
 167:src/menu.c    ****     { 
 168:src/menu.c    ****       { { K42, 1 }, { K43, 3 }, "Xbar", "SUMS" },
 169:src/menu.c    ****       { { K43, 1 }, NO_KEY, "Yhat", "" },
 170:src/menu.c    ****       { { K42, 2 }, NO_KEY, "s", "" },
 171:src/menu.c    ****       { { K43, 2 }, NO_KEY, "r", "" },
 172:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 173:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 174:src/menu.c    ****     }
 175:src/menu.c    ****   },
 176:src/menu.c    ****   {
 177:src/menu.c    ****     "Setup 2", // 13
 178:src/menu.c    ****     { 
 179:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 180:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 181:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 182:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 183:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 184:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 185:src/menu.c    ****     }
 186:src/menu.c    ****   },
 187:src/menu.c    ****   {
 188:src/menu.c    ****     "Integ/Sum/Prod", // 14
 189:src/menu.c    ****     { 
 190:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 191:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 192:src/menu.c    ****       { { K53, 1 }, NO_KEY, "SUM", "" },
 193:src/menu.c    ****       { { K53, 2 }, NO_KEY, "PROD", "" },
 194:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 195:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 196:src/menu.c    ****     }
 197:src/menu.c    ****   },
 198:src/menu.c    **** };  
 199:src/menu.c    **** 
 200:src/menu.c    **** /* This code is the set_status_sized code with small changes
ARM GAS  /tmp/ccUw5X70.s 			page 5


 201:src/menu.c    ****  * and non-DM42 code removed.
 202:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 203:src/menu.c    ****  */
 204:src/menu.c    **** #define MENU_WIDTH 32
 205:src/menu.c    **** 
 206:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  30              		.loc 1 206 13 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 544
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 207:src/menu.c    ****   // dotcol is the number of the starting dot column
 208:src/menu.c    ****   // shifted is 1 if shifted
 209:src/menu.c    ****   unsigned short int posns[257];
  34              		.loc 1 209 3 view .LVU1
 210:src/menu.c    **** 
 211:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 212:src/menu.c    ****   int posns_state = 255;
  35              		.loc 1 212 3 view .LVU2
 213:src/menu.c    **** 
 214:src/menu.c    ****   int x = dotcol;
  36              		.loc 1 214 3 view .LVU3
 206:src/menu.c    ****   // dotcol is the number of the starting dot column
  37              		.loc 1 206 13 is_stmt 0 view .LVU4
  38 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  39              		.cfi_def_cfa_offset 36
  40              		.cfi_offset 4, -36
  41              		.cfi_offset 5, -32
  42              		.cfi_offset 6, -28
  43              		.cfi_offset 7, -24
  44              		.cfi_offset 8, -20
  45              		.cfi_offset 9, -16
  46              		.cfi_offset 10, -12
  47              		.cfi_offset 11, -8
  48              		.cfi_offset 14, -4
  49 0004 ADF5097D 		sub	sp, sp, #548
  50              		.cfi_def_cfa_offset 584
 206:src/menu.c    ****   // dotcol is the number of the starting dot column
  51              		.loc 1 206 13 view .LVU5
  52 0008 CDE90102 		strd	r0, r2, [sp, #4]
 215:src/menu.c    ****   int i, j, xmax;
 216:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  53              		.loc 1 216 18 view .LVU6
  54 000c 0029     		cmp	r1, #0
  55 000e B4BF     		ite	lt
  56 0010 01F11F03 		addlt	r3, r1, #31
  57 0014 0B46     		movge	r3, r1
 217:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 218:src/menu.c    **** 
 219:src/menu.c    ****   forceDispPlot=0;
  58              		.loc 1 219 16 view .LVU7
  59 0016 4848     		ldr	r0, .L36
  60              	.LVL1:
 206:src/menu.c    ****   // dotcol is the number of the starting dot column
  61              		.loc 1 206 13 view .LVU8
  62 0018 0F46     		mov	r7, r1
  63              	.LVL2:
 215:src/menu.c    ****   int i, j, xmax;
ARM GAS  /tmp/ccUw5X70.s 			page 6


  64              		.loc 1 215 3 is_stmt 1 view .LVU9
 216:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  65              		.loc 1 216 3 view .LVU10
 220:src/menu.c    **** 
 221:src/menu.c    **** #ifdef RP_PREFIX
 222:src/menu.c    ****   RectPolConv = 0;
  66              		.loc 1 222 15 is_stmt 0 view .LVU11
  67 001a 4849     		ldr	r1, .L36+4
  68              	.LVL3:
 219:src/menu.c    **** 
  69              		.loc 1 219 16 view .LVU12
  70 001c 0022     		movs	r2, #0
  71              	.LVL4:
 219:src/menu.c    **** 
  72              		.loc 1 219 16 view .LVU13
  73 001e 0270     		strb	r2, [r0]
  74              		.loc 1 222 15 view .LVU14
  75 0020 0A60     		str	r2, [r1]
 223:src/menu.c    **** #endif
 224:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
  76              		.loc 1 224 10 view .LVU15
  77 0022 019A     		ldr	r2, [sp, #4]
  78 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 216:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  79              		.loc 1 216 30 view .LVU16
  80 0026 23F01F03 		bic	r3, r3, #31
 216:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  81              		.loc 1 216 8 view .LVU17
  82 002a 03F12009 		add	r9, r3, #32
  83              	.LVL5:
 217:src/menu.c    **** 
  84              		.loc 1 217 3 is_stmt 1 view .LVU18
 219:src/menu.c    **** 
  85              		.loc 1 219 3 view .LVU19
 222:src/menu.c    **** #endif
  86              		.loc 1 222 3 view .LVU20
  87              		.loc 1 224 3 view .LVU21
  88              		.loc 1 224 9 view .LVU22
  89 002e 002D     		cmp	r5, #0
  90 0030 78D0     		beq	.L1
  91              		.loc 1 224 23 is_stmt 0 view .LVU23
  92 0032 4F45     		cmp	r7, r9
  93 0034 76DC     		bgt	.L1
  94              	.LBB33:
 225:src/menu.c    ****     int c;
 226:src/menu.c    ****     int width;
 227:src/menu.c    ****     unsigned char cmap[6];
 228:src/menu.c    **** 
 229:src/menu.c    ****     int real_width;
 230:src/menu.c    ****     int current_smallp;
 231:src/menu.c    **** 
 232:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 233:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 234:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 235:src/menu.c    ****     //           01 -> (not used)
 236:src/menu.c    ****     //           10 -> use big font
 237:src/menu.c    ****     //           11 -> use small font
ARM GAS  /tmp/ccUw5X70.s 			page 7


 238:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 239:src/menu.c    ****     if (str[0] == '\007') {
  95              		.loc 1 239 8 view .LVU24
  96 0036 072D     		cmp	r5, #7
  97              	.LBE33:
 212:src/menu.c    **** 
  98              		.loc 1 212 7 view .LVU25
  99 0038 4FF0FF04 		mov	r4, #255
 100              	.LVL6:
 101              	.LBB50:
 225:src/menu.c    ****     int c;
 102              		.loc 1 225 5 is_stmt 1 view .LVU26
 226:src/menu.c    ****     unsigned char cmap[6];
 103              		.loc 1 226 5 view .LVU27
 227:src/menu.c    **** 
 104              		.loc 1 227 5 view .LVU28
 229:src/menu.c    ****     int current_smallp;
 105              		.loc 1 229 5 view .LVU29
 230:src/menu.c    **** 
 106              		.loc 1 230 5 view .LVU30
 107              		.loc 1 239 5 view .LVU31
 240:src/menu.c    ****       width = str[1] & 0x1F;
 241:src/menu.c    ****       switch (str[1] & 0x60) {
 242:src/menu.c    ****       default:
 243:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 244:src/menu.c    **** 	break;
 245:src/menu.c    ****       case 0x40:	current_smallp = 0;
 246:src/menu.c    **** 	break;
 247:src/menu.c    ****       case 0x60:	current_smallp = 1;
 108              		.loc 1 247 33 is_stmt 0 view .LVU32
 109 003c 4FF0010A 		mov	r10, #1
 239:src/menu.c    ****       width = str[1] & 0x1F;
 110              		.loc 1 239 8 view .LVU33
 111 0040 64D1     		bne	.L5
 112              	.LVL7:
 113              	.L34:
 240:src/menu.c    ****       width = str[1] & 0x1F;
 114              		.loc 1 240 7 is_stmt 1 view .LVU34
 240:src/menu.c    ****       width = str[1] & 0x1F;
 115              		.loc 1 240 18 is_stmt 0 view .LVU35
 116 0042 019B     		ldr	r3, [sp, #4]
 117 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 118 0046 06F06003 		and	r3, r6, #96
 241:src/menu.c    ****       default:
 119              		.loc 1 241 7 view .LVU36
 120 004a 402B     		cmp	r3, #64
 240:src/menu.c    ****       width = str[1] & 0x1F;
 121              		.loc 1 240 13 view .LVU37
 122 004c 06F01F06 		and	r6, r6, #31
 123              	.LVL8:
 241:src/menu.c    ****       default:
 124              		.loc 1 241 7 is_stmt 1 view .LVU38
 125 0050 6CD0     		beq	.L28
 126 0052 602B     		cmp	r3, #96
 127 0054 6AD1     		bne	.L28
 128              		.loc 1 247 18 view .LVU39
 129              	.LVL9:
ARM GAS  /tmp/ccUw5X70.s 			page 8


 248:src/menu.c    **** 	break;
 130              		.loc 1 248 2 view .LVU40
 249:src/menu.c    ****       }
 250:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 131              		.loc 1 250 7 view .LVU41
 132              		.loc 1 250 11 is_stmt 0 view .LVU42
 133 0056 019B     		ldr	r3, [sp, #4]
 134 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 247:src/menu.c    **** 	break;
 135              		.loc 1 247 33 view .LVU43
 136 005a 0123     		movs	r3, #1
 137 005c 0093     		str	r3, [sp]
 138 005e 00F58075 		add	r5, r0, #256
 139              	.LVL10:
 140              	.L9:
 251:src/menu.c    ****       str += 3;
 141              		.loc 1 251 7 is_stmt 1 view .LVU44
 252:src/menu.c    **** 
 253:src/menu.c    ****       real_width = charlengths(c);
 142              		.loc 1 253 20 is_stmt 0 view .LVU45
 143 0062 2846     		mov	r0, r5
 144 0064 FFF7FEFF 		bl	charlengths
 145              	.LVL11:
 251:src/menu.c    ****       str += 3;
 146              		.loc 1 251 11 view .LVU46
 147 0068 019B     		ldr	r3, [sp, #4]
 148 006a 0333     		adds	r3, r3, #3
 149 006c 0193     		str	r3, [sp, #4]
 150              	.LVL12:
 151              		.loc 1 253 7 is_stmt 1 view .LVU47
 254:src/menu.c    ****     } else {
 255:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 256:src/menu.c    ****       real_width = width = charlengths(c);
 257:src/menu.c    ****       current_smallp = smallp;
 258:src/menu.c    ****     }
 259:src/menu.c    **** 
 260:src/menu.c    ****     if (x + real_width > xmax)
 152              		.loc 1 260 5 view .LVU48
 153              		.loc 1 260 11 is_stmt 0 view .LVU49
 154 006e C319     		adds	r3, r0, r7
 155              	.LVL13:
 156              		.loc 1 260 8 view .LVU50
 157 0070 9945     		cmp	r9, r3
 158 0072 57DB     		blt	.L1
 159              	.L35:
 261:src/menu.c    ****       break;
 262:src/menu.c    **** 
 263:src/menu.c    ****     if (posns_state != current_smallp) {
 160              		.loc 1 263 5 is_stmt 1 view .LVU51
 161              		.loc 1 263 8 is_stmt 0 view .LVU52
 162 0074 009B     		ldr	r3, [sp]
 163 0076 A342     		cmp	r3, r4
 264:src/menu.c    ****       findlengths(posns, current_smallp);
 164              		.loc 1 264 7 view .LVU53
 165 0078 07AB     		add	r3, sp, #28
 263:src/menu.c    ****       findlengths(posns, current_smallp);
 166              		.loc 1 263 8 view .LVU54
ARM GAS  /tmp/ccUw5X70.s 			page 9


 167 007a 05D0     		beq	.L12
 168              		.loc 1 264 7 is_stmt 1 view .LVU55
 169 007c 1846     		mov	r0, r3
 170              	.LVL14:
 171              		.loc 1 264 7 is_stmt 0 view .LVU56
 172 007e 0099     		ldr	r1, [sp]
 173 0080 0393     		str	r3, [sp, #12]
 174 0082 FFF7FEFF 		bl	findlengths
 175              	.LVL15:
 176 0086 039B     		ldr	r3, [sp, #12]
 265:src/menu.c    ****       posns_state = current_smallp;
 177              		.loc 1 265 7 is_stmt 1 view .LVU57
 178              	.LVL16:
 179              	.L12:
 266:src/menu.c    ****     }
 267:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 180              		.loc 1 267 5 view .LVU58
 181 0088 009A     		ldr	r2, [sp]
 182 008a 2846     		mov	r0, r5
 183 008c 05A9     		add	r1, sp, #20
 184 008e FFF7FEFF 		bl	unpackchar
 185              	.LVL17:
 268:src/menu.c    **** 
 269:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 186              		.loc 1 269 5 view .LVU59
 187              		.loc 1 269 15 view .LVU60
 188 0092 029B     		ldr	r3, [sp, #8]
 189 0094 03EB4704 		add	r4, r3, r7, lsl #1
 190 0098 294B     		ldr	r3, .L36+8
 191 009a 0DF1140B 		add	fp, sp, #20
 192 009e 1C44     		add	r4, r4, r3
 267:src/menu.c    **** 
 193              		.loc 1 267 5 is_stmt 0 view .LVU61
 194 00a0 4FF0050E 		mov	lr, #5
 195 00a4 A9EB0705 		sub	r5, r9, r7
 196              	.LVL18:
 197              	.L13:
 270:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 198              		.loc 1 270 17 is_stmt 1 view .LVU62
 199              		.loc 1 270 7 is_stmt 0 view .LVU63
 200 00a8 002E     		cmp	r6, #0
 201 00aa 1FDD     		ble	.L19
 271:src/menu.c    **** 	if (x+j >= xmax)
 202              		.loc 1 271 2 is_stmt 1 view .LVU64
 203              		.loc 1 271 5 is_stmt 0 view .LVU65
 204 00ac B945     		cmp	r9, r7
 205 00ae 1DDD     		ble	.L19
 206              	.LBB34:
 207              	.LBB35:
 208              	.LBB36:
 209              	.LBB37:
 272:src/menu.c    **** 	  break;
 273:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 274:src/menu.c    ****       }
 275:src/menu.c    ****     }
 276:src/menu.c    ****     x += width;
 277:src/menu.c    ****   }
ARM GAS  /tmp/ccUw5X70.s 			page 10


 278:src/menu.c    **** }
 279:src/menu.c    **** 
 280:src/menu.c    **** 
 281:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 282:src/menu.c    **** 
 283:src/menu.c    **** int pixel_length(const char *s, int smallp)
 284:src/menu.c    **** {
 285:src/menu.c    ****   int len = 0;
 286:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 287:src/menu.c    ****   while (*s != '\0') {
 288:src/menu.c    ****     if (s[0] == '\007') {
 289:src/menu.c    ****       len += s[1] & 0x1F;
 290:src/menu.c    ****       s += 3;
 291:src/menu.c    ****       continue;
 292:src/menu.c    ****     }
 293:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 294:src/menu.c    ****   }
 295:src/menu.c    ****   return len;
 296:src/menu.c    **** }
 297:src/menu.c    **** */
 298:src/menu.c    **** 
 299:src/menu.c    **** 
 300:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 301:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 302:src/menu.c    ****   if (on) {
 303:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 304:src/menu.c    ****   }
 305:src/menu.c    ****   else {
 306:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 210              		.loc 1 306 25 view .LVU66
 211 00b0 0AFA0EFC 		lsl	ip, r10, lr
 212              		.loc 1 306 17 view .LVU67
 213 00b4 4FFA8CFC 		sxtb	ip, ip
 214              	.LBE37:
 215              	.LBE36:
 216              	.LBE35:
 217              	.LBE34:
 273:src/menu.c    ****       }
 218              		.loc 1 273 31 view .LVU68
 219 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 220              	.LBB47:
 221              	.LBB44:
 222              	.LBB41:
 223              	.LBB38:
 224              		.loc 1 306 17 view .LVU69
 225 00bc 6FEA0C08 		mvn	r8, ip
 226              	.LBE38:
 227              	.LBE41:
 228              	.LBE44:
 229              	.LBE47:
 270:src/menu.c    **** 	if (x+j >= xmax)
 230              		.loc 1 270 13 view .LVU70
 231 00c0 0023     		movs	r3, #0
 232 00c2 01E0     		b	.L14
 233              	.LVL19:
 234              	.L18:
 271:src/menu.c    **** 	  break;
ARM GAS  /tmp/ccUw5X70.s 			page 11


 235              		.loc 1 271 5 view .LVU71
 236 00c4 9D42     		cmp	r5, r3
 237 00c6 11D0     		beq	.L19
 238              	.LVL20:
 239              	.L14:
 273:src/menu.c    ****       }
 240              		.loc 1 273 2 is_stmt 1 view .LVU72
 241              	.LBB48:
 242              	.LBI34:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 243              		.loc 1 300 6 view .LVU73
 244              	.LBB45:
 301:src/menu.c    ****   if (on) {
 245              		.loc 1 301 3 view .LVU74
 246              	.LBB42:
 247              	.LBI36:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 248              		.loc 1 300 6 view .LVU75
 249              	.LBB39:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 250              		.loc 1 302 3 view .LVU76
 251              	.LBE39:
 252              	.LBE42:
 301:src/menu.c    ****   if (on) {
 253              		.loc 1 301 6 is_stmt 0 view .LVU77
 254 00c8 DA19     		adds	r2, r3, r7
 255              	.LVL21:
 301:src/menu.c    ****   if (on) {
 256              		.loc 1 301 6 view .LVU78
 257 00ca C72A     		cmp	r2, #199
 258              	.LBE45:
 259              	.LBE48:
 273:src/menu.c    ****       }
 260              		.loc 1 273 46 view .LVU79
 261 00cc 40FA03F1 		asr	r1, r0, r3
 262              	.LBB49:
 263              	.LBB46:
 301:src/menu.c    ****   if (on) {
 264              		.loc 1 301 6 view .LVU80
 265 00d0 09D8     		bhi	.L16
 266              	.LBB43:
 267              	.LBB40:
 303:src/menu.c    ****   }
 268              		.loc 1 303 5 is_stmt 1 view .LVU81
 269              		.loc 1 306 5 view .LVU82
 303:src/menu.c    ****   }
 270              		.loc 1 303 17 is_stmt 0 view .LVU83
 271 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 272              	.LVL22:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 273              		.loc 1 302 6 view .LVU84
 274 00d6 C907     		lsls	r1, r1, #31
 303:src/menu.c    ****   }
 275              		.loc 1 303 17 view .LVU85
 276 00d8 4CBF     		ite	mi
 277 00da 4CEA0202 		orrmi	r2, ip, r2
 278              		.loc 1 306 17 view .LVU86
ARM GAS  /tmp/ccUw5X70.s 			page 12


 279 00de 08EA0202 		andpl	r2, r8, r2
 280 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 281              	.L16:
 282              	.LBE40:
 283              	.LBE43:
 284              	.LBE46:
 285              	.LBE49:
 271:src/menu.c    **** 	  break;
 286              		.loc 1 271 2 is_stmt 1 view .LVU87
 287              	.LVL23:
 270:src/menu.c    **** 	if (x+j >= xmax)
 288              		.loc 1 270 26 view .LVU88
 270:src/menu.c    **** 	if (x+j >= xmax)
 289              		.loc 1 270 27 is_stmt 0 view .LVU89
 290 00e6 0133     		adds	r3, r3, #1
 291              	.LVL24:
 270:src/menu.c    **** 	if (x+j >= xmax)
 292              		.loc 1 270 17 is_stmt 1 view .LVU90
 270:src/menu.c    **** 	if (x+j >= xmax)
 293              		.loc 1 270 7 is_stmt 0 view .LVU91
 294 00e8 B342     		cmp	r3, r6
 295 00ea EBD1     		bne	.L18
 296              	.LVL25:
 297              	.L19:
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 298              		.loc 1 269 20 is_stmt 1 view .LVU92
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 299              		.loc 1 269 15 view .LVU93
 300 00ec 0EF1FF3E 		add	lr, lr, #-1
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 301              		.loc 1 269 5 is_stmt 0 view .LVU94
 302 00f0 BEF1FF3F 		cmp	lr, #-1
 303 00f4 0BF1010B 		add	fp, fp, #1
 304              	.LVL26:
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 305              		.loc 1 269 5 view .LVU95
 306 00f8 D6D1     		bne	.L13
 276:src/menu.c    ****   }
 307              		.loc 1 276 5 is_stmt 1 view .LVU96
 308              	.LBE50:
 224:src/menu.c    ****     int c;
 309              		.loc 1 224 10 is_stmt 0 view .LVU97
 310 00fa 019B     		ldr	r3, [sp, #4]
 311 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 312              	.LBB51:
 276:src/menu.c    ****   }
 313              		.loc 1 276 7 view .LVU98
 314 00fe 3744     		add	r7, r7, r6
 315              	.LVL27:
 276:src/menu.c    ****   }
 316              		.loc 1 276 7 view .LVU99
 317              	.LBE51:
 224:src/menu.c    ****     int c;
 318              		.loc 1 224 9 is_stmt 1 view .LVU100
 319 0100 85B1     		cbz	r5, .L1
 224:src/menu.c    ****     int c;
 320              		.loc 1 224 23 is_stmt 0 view .LVU101
ARM GAS  /tmp/ccUw5X70.s 			page 13


 321 0102 B945     		cmp	r9, r7
 322 0104 0EDB     		blt	.L1
 323              	.LBB52:
 239:src/menu.c    ****       width = str[1] & 0x1F;
 324              		.loc 1 239 8 view .LVU102
 325 0106 072D     		cmp	r5, #7
 326              	.LBE52:
 327 0108 009C     		ldr	r4, [sp]
 328              	.LBB53:
 225:src/menu.c    ****     int width;
 329              		.loc 1 225 5 is_stmt 1 view .LVU103
 226:src/menu.c    ****     unsigned char cmap[6];
 330              		.loc 1 226 5 view .LVU104
 227:src/menu.c    **** 
 331              		.loc 1 227 5 view .LVU105
 229:src/menu.c    ****     int current_smallp;
 332              		.loc 1 229 5 view .LVU106
 230:src/menu.c    **** 
 333              		.loc 1 230 5 view .LVU107
 239:src/menu.c    ****       width = str[1] & 0x1F;
 334              		.loc 1 239 5 view .LVU108
 239:src/menu.c    ****       width = str[1] & 0x1F;
 335              		.loc 1 239 8 is_stmt 0 view .LVU109
 336 010a 9AD0     		beq	.L34
 337              	.LVL28:
 338              	.L5:
 255:src/menu.c    ****       real_width = width = charlengths(c);
 339              		.loc 1 255 7 is_stmt 1 view .LVU110
 256:src/menu.c    ****       current_smallp = smallp;
 340              		.loc 1 256 28 is_stmt 0 view .LVU111
 341 010c 2846     		mov	r0, r5
 342 010e FFF7FEFF 		bl	charlengths
 343              	.LVL29:
 255:src/menu.c    ****       real_width = width = charlengths(c);
 344              		.loc 1 255 31 view .LVU112
 345 0112 019B     		ldr	r3, [sp, #4]
 346 0114 0133     		adds	r3, r3, #1
 347 0116 0193     		str	r3, [sp, #4]
 348              	.LVL30:
 256:src/menu.c    ****       current_smallp = smallp;
 349              		.loc 1 256 7 is_stmt 1 view .LVU113
 257:src/menu.c    ****     }
 350              		.loc 1 257 7 view .LVU114
 257:src/menu.c    ****     }
 351              		.loc 1 257 22 is_stmt 0 view .LVU115
 352 0118 0023     		movs	r3, #0
 353              	.LVL31:
 257:src/menu.c    ****     }
 354              		.loc 1 257 22 view .LVU116
 355 011a 0093     		str	r3, [sp]
 356              	.LVL32:
 260:src/menu.c    ****       break;
 357              		.loc 1 260 11 view .LVU117
 358 011c C319     		adds	r3, r0, r7
 359              	.LVL33:
 260:src/menu.c    ****       break;
 360              		.loc 1 260 8 view .LVU118
ARM GAS  /tmp/ccUw5X70.s 			page 14


 361 011e 9945     		cmp	r9, r3
 256:src/menu.c    ****       current_smallp = smallp;
 362              		.loc 1 256 28 view .LVU119
 363 0120 0646     		mov	r6, r0
 260:src/menu.c    ****       break;
 364              		.loc 1 260 5 is_stmt 1 view .LVU120
 260:src/menu.c    ****       break;
 365              		.loc 1 260 8 is_stmt 0 view .LVU121
 366 0122 A7DA     		bge	.L35
 367              	.LVL34:
 368              	.L1:
 260:src/menu.c    ****       break;
 369              		.loc 1 260 8 view .LVU122
 370              	.LBE53:
 278:src/menu.c    **** 
 371              		.loc 1 278 1 view .LVU123
 372 0124 0DF5097D 		add	sp, sp, #548
 373              		.cfi_remember_state
 374              		.cfi_def_cfa_offset 36
 375              		@ sp needed
 376 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 377              	.LVL35:
 378              	.L28:
 379              		.cfi_restore_state
 380              	.LBB54:
 250:src/menu.c    ****       str += 3;
 381              		.loc 1 250 7 is_stmt 1 view .LVU124
 250:src/menu.c    ****       str += 3;
 382              		.loc 1 250 11 is_stmt 0 view .LVU125
 383 012c 019B     		ldr	r3, [sp, #4]
 384 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 243:src/menu.c    **** 	break;
 385              		.loc 1 243 33 view .LVU126
 386 0130 0023     		movs	r3, #0
 387 0132 0093     		str	r3, [sp]
 388 0134 95E7     		b	.L9
 389              	.L37:
 390 0136 00BF     		.align	2
 391              	.L36:
 392 0138 00000000 		.word	forceDispPlot
 393 013c 00000000 		.word	RectPolConv
 394 0140 00000000 		.word	.LANCHOR0
 395              	.LBE54:
 396              		.cfi_endproc
 397              	.LFE26:
 399              		.section	.text.set_menu,"ax",%progbits
 400              		.align	1
 401              		.p2align 2,,3
 402              		.global	set_menu
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu fpv4-sp-d16
 408              	set_menu:
 409              	.LVL36:
 410              	.LFB3:
   3:src/menu.c    ****   if (new_menu == current_menu) {
ARM GAS  /tmp/ccUw5X70.s 			page 15


 411              		.loc 1 3 32 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              		@ link register save eliminated.
   4:src/menu.c    ****   if (new_menu == current_menu) {
 416              		.loc 1 4 3 view .LVU128
   4:src/menu.c    ****   if (new_menu == current_menu) {
 417              		.loc 1 4 7 is_stmt 0 view .LVU129
 418 0000 084A     		ldr	r2, .L43
 419 0002 1368     		ldr	r3, [r2]
 420              	.LVL37:
   5:src/menu.c    ****     current_menu = 0;
 421              		.loc 1 5 3 is_stmt 1 view .LVU130
   5:src/menu.c    ****     current_menu = 0;
 422              		.loc 1 5 6 is_stmt 0 view .LVU131
 423 0004 8342     		cmp	r3, r0
 424 0006 07D0     		beq	.L42
   8:src/menu.c    ****     current_menu = last_menu;
 425              		.loc 1 8 8 is_stmt 1 view .LVU132
   9:src/menu.c    ****   }
 426              		.loc 1 9 18 is_stmt 0 view .LVU133
 427 0008 0749     		ldr	r1, .L43+4
   8:src/menu.c    ****     current_menu = last_menu;
 428              		.loc 1 8 11 view .LVU134
 429 000a B0F1FF3F 		cmp	r0, #-1
   9:src/menu.c    ****   }
 430              		.loc 1 9 5 is_stmt 1 view .LVU135
   9:src/menu.c    ****   }
 431              		.loc 1 9 18 is_stmt 0 view .LVU136
 432 000e 08BF     		it	eq
 433 0010 0868     		ldreq	r0, [r1]
 434              	.LVL38:
  12:src/menu.c    ****   }
 435              		.loc 1 12 5 is_stmt 1 view .LVU137
  12:src/menu.c    ****   }
 436              		.loc 1 12 18 is_stmt 0 view .LVU138
 437 0012 1060     		str	r0, [r2]
  14:src/menu.c    **** }
 438              		.loc 1 14 3 is_stmt 1 view .LVU139
  14:src/menu.c    **** }
 439              		.loc 1 14 13 is_stmt 0 view .LVU140
 440 0014 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 441              		.loc 1 15 1 view .LVU141
 442 0016 7047     		bx	lr
 443              	.LVL39:
 444              	.L42:
   6:src/menu.c    ****   }
 445              		.loc 1 6 5 is_stmt 1 view .LVU142
   6:src/menu.c    ****   }
 446              		.loc 1 6 18 is_stmt 0 view .LVU143
 447 0018 0021     		movs	r1, #0
 448 001a 1160     		str	r1, [r2]
 449 001c 0249     		ldr	r1, .L43+4
  14:src/menu.c    **** }
 450              		.loc 1 14 3 is_stmt 1 view .LVU144
ARM GAS  /tmp/ccUw5X70.s 			page 16


  14:src/menu.c    **** }
 451              		.loc 1 14 13 is_stmt 0 view .LVU145
 452 001e 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 453              		.loc 1 15 1 view .LVU146
 454 0020 7047     		bx	lr
 455              	.L44:
 456 0022 00BF     		.align	2
 457              	.L43:
 458 0024 00000000 		.word	.LANCHOR1
 459 0028 00000000 		.word	.LANCHOR2
 460              		.cfi_endproc
 461              	.LFE3:
 463              		.section	.text.get_menu,"ax",%progbits
 464              		.align	1
 465              		.p2align 2,,3
 466              		.global	get_menu
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv4-sp-d16
 472              	get_menu:
 473              	.LFB4:
  17:src/menu.c    ****   return current_menu;
 474              		.loc 1 17 17 is_stmt 1 view -0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
  18:src/menu.c    **** }
 479              		.loc 1 18 3 view .LVU148
  18:src/menu.c    **** }
 480              		.loc 1 18 10 is_stmt 0 view .LVU149
 481 0000 014B     		ldr	r3, .L46
  19:src/menu.c    **** 
 482              		.loc 1 19 1 view .LVU150
 483 0002 1868     		ldr	r0, [r3]
 484 0004 7047     		bx	lr
 485              	.L47:
 486 0006 00BF     		.align	2
 487              	.L46:
 488 0008 00000000 		.word	.LANCHOR1
 489              		.cfi_endproc
 490              	.LFE4:
 492              		.section	.text.set_last_menu,"ax",%progbits
 493              		.align	1
 494              		.p2align 2,,3
 495              		.global	set_last_menu
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu fpv4-sp-d16
 501              	set_last_menu:
 502              	.LFB6:
  25:src/menu.c    ****   set_menu (last_menu);
 503              		.loc 1 25 23 is_stmt 1 view -0
 504              		.cfi_startproc
ARM GAS  /tmp/ccUw5X70.s 			page 17


 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
  26:src/menu.c    **** }
 508              		.loc 1 26 3 view .LVU152
 509 0000 044B     		ldr	r3, .L52
 510              	.LBB55:
 511              	.LBB56:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 512              		.loc 1 4 7 is_stmt 0 view .LVU153
 513 0002 0549     		ldr	r1, .L52+4
 514              	.LBE56:
 515              	.LBE55:
  26:src/menu.c    **** }
 516              		.loc 1 26 3 view .LVU154
 517 0004 1868     		ldr	r0, [r3]
 518              	.LVL40:
 519              	.LBB58:
 520              	.LBI55:
   3:src/menu.c    ****   if (new_menu == current_menu) {
 521              		.loc 1 3 6 is_stmt 1 view .LVU155
 522              	.LBB57:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 523              		.loc 1 4 3 view .LVU156
   4:src/menu.c    ****   if (new_menu == current_menu) {
 524              		.loc 1 4 7 is_stmt 0 view .LVU157
 525 0006 0A68     		ldr	r2, [r1]
 526              	.LVL41:
   5:src/menu.c    ****     current_menu = 0;
 527              		.loc 1 5 3 is_stmt 1 view .LVU158
  14:src/menu.c    **** }
 528              		.loc 1 14 13 is_stmt 0 view .LVU159
 529 0008 1A60     		str	r2, [r3]
   5:src/menu.c    ****     current_menu = 0;
 530              		.loc 1 5 6 view .LVU160
 531 000a 9042     		cmp	r0, r2
   6:src/menu.c    ****   }
 532              		.loc 1 6 5 is_stmt 1 view .LVU161
   6:src/menu.c    ****   }
 533              		.loc 1 6 18 is_stmt 0 view .LVU162
 534 000c 08BF     		it	eq
 535 000e 0020     		moveq	r0, #0
 536              	.LVL42:
   8:src/menu.c    ****     current_menu = last_menu;
 537              		.loc 1 8 8 is_stmt 1 view .LVU163
  12:src/menu.c    ****   }
 538              		.loc 1 12 18 is_stmt 0 view .LVU164
 539 0010 0860     		str	r0, [r1]
  14:src/menu.c    **** }
 540              		.loc 1 14 3 is_stmt 1 view .LVU165
 541              	.LVL43:
  14:src/menu.c    **** }
 542              		.loc 1 14 3 is_stmt 0 view .LVU166
 543              	.LBE57:
 544              	.LBE58:
  27:src/menu.c    **** 
 545              		.loc 1 27 1 view .LVU167
ARM GAS  /tmp/ccUw5X70.s 			page 18


 546 0012 7047     		bx	lr
 547              	.L53:
 548              		.align	2
 549              	.L52:
 550 0014 00000000 		.word	.LANCHOR2
 551 0018 00000000 		.word	.LANCHOR1
 552              		.cfi_endproc
 553              	.LFE6:
 555              		.section	.text.mdot,"ax",%progbits
 556              		.align	1
 557              		.p2align 2,,3
 558              		.global	mdot
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu fpv4-sp-d16
 564              	mdot:
 565              	.LVL44:
 566              	.LFB8:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 567              		.loc 1 300 40 is_stmt 1 view -0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 301:src/menu.c    ****   if (on) {
 572              		.loc 1 301 3 view .LVU169
 301:src/menu.c    ****   if (on) {
 573              		.loc 1 301 6 is_stmt 0 view .LVU170
 574 0000 C728     		cmp	r0, #199
 575 0002 1AD8     		bhi	.L58
 576              	.LVL45:
 577              	.LBB61:
 578              	.LBI61:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 579              		.loc 1 300 6 is_stmt 1 view .LVU171
 580              	.LBB62:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 581              		.loc 1 302 3 view .LVU172
 582              	.LBE62:
 583              	.LBE61:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 584              		.loc 1 300 40 is_stmt 0 view .LVU173
 585 0004 10B4     		push	{r4}
 586              		.cfi_def_cfa_offset 4
 587              		.cfi_offset 4, -4
 588              	.LBB65:
 589              	.LBB63:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 590              		.loc 1 302 6 view .LVU174
 591 0006 63B9     		cbnz	r3, .L61
 592              		.loc 1 306 5 is_stmt 1 view .LVU175
 593              		.loc 1 306 17 is_stmt 0 view .LVU176
 594 0008 0C4B     		ldr	r3, .L62
 595              	.LVL46:
 596              		.loc 1 306 17 view .LVU177
 597 000a 03EB4000 		add	r0, r3, r0, lsl #1
ARM GAS  /tmp/ccUw5X70.s 			page 19


 598              	.LVL47:
 599              		.loc 1 306 25 view .LVU178
 600 000e 0124     		movs	r4, #1
 601              		.loc 1 306 17 view .LVU179
 602 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 603              		.loc 1 306 25 view .LVU180
 604 0012 04FA01F1 		lsl	r1, r4, r1
 605              	.LVL48:
 606              		.loc 1 306 17 view .LVU181
 607 0016 23EA0101 		bic	r1, r3, r1
 608 001a 8154     		strb	r1, [r0, r2]
 609              	.LVL49:
 610              		.loc 1 306 17 view .LVU182
 611              	.LBE63:
 612              	.LBE65:
 307:src/menu.c    ****   }
 308:src/menu.c    **** }
 613              		.loc 1 308 1 view .LVU183
 614 001c 5DF8044B 		ldr	r4, [sp], #4
 615              		.cfi_remember_state
 616              		.cfi_restore 4
 617              		.cfi_def_cfa_offset 0
 618 0020 7047     		bx	lr
 619              	.LVL50:
 620              	.L61:
 621              		.cfi_restore_state
 622              	.LBB66:
 623              	.LBB64:
 303:src/menu.c    ****   }
 624              		.loc 1 303 5 is_stmt 1 view .LVU184
 303:src/menu.c    ****   }
 625              		.loc 1 303 17 is_stmt 0 view .LVU185
 626 0022 064B     		ldr	r3, .L62
 627              	.LVL51:
 303:src/menu.c    ****   }
 628              		.loc 1 303 17 view .LVU186
 629 0024 03EB4000 		add	r0, r3, r0, lsl #1
 630              	.LVL52:
 303:src/menu.c    ****   }
 631              		.loc 1 303 24 view .LVU187
 632 0028 0124     		movs	r4, #1
 303:src/menu.c    ****   }
 633              		.loc 1 303 17 view .LVU188
 634 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 303:src/menu.c    ****   }
 635              		.loc 1 303 24 view .LVU189
 636 002c 04FA01F1 		lsl	r1, r4, r1
 637              	.LVL53:
 303:src/menu.c    ****   }
 638              		.loc 1 303 17 view .LVU190
 639 0030 1943     		orrs	r1, r1, r3
 640 0032 8154     		strb	r1, [r0, r2]
 641              	.LBE64:
 642              	.LBE66:
 643              		.loc 1 308 1 view .LVU191
 644 0034 5DF8044B 		ldr	r4, [sp], #4
 645              		.cfi_restore 4
ARM GAS  /tmp/ccUw5X70.s 			page 20


 646              		.cfi_def_cfa_offset 0
 647 0038 7047     		bx	lr
 648              	.LVL54:
 649              	.L58:
 650              		.loc 1 308 1 view .LVU192
 651 003a 7047     		bx	lr
 652              	.L63:
 653              		.align	2
 654              	.L62:
 655 003c 00000000 		.word	.LANCHOR0
 656              		.cfi_endproc
 657              	.LFE8:
 659              		.section	.text.display_menu,"ax",%progbits
 660              		.align	1
 661              		.p2align 2,,3
 662              		.global	display_menu
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu fpv4-sp-d16
 668              	display_menu:
 669              	.LVL55:
 670              	.LFB9:
 309:src/menu.c    **** 
 310:src/menu.c    **** 
 311:src/menu.c    **** void display_menu (int current_menu) {
 671              		.loc 1 311 38 is_stmt 1 view -0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 312:src/menu.c    ****   int len = 0;
 675              		.loc 1 312 3 view .LVU194
 313:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 676              		.loc 1 313 3 view .LVU195
 311:src/menu.c    ****   int len = 0;
 677              		.loc 1 311 38 is_stmt 0 view .LVU196
 678 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 679              		.cfi_def_cfa_offset 36
 680              		.cfi_offset 4, -36
 681              		.cfi_offset 5, -32
 682              		.cfi_offset 6, -28
 683              		.cfi_offset 7, -24
 684              		.cfi_offset 8, -20
 685              		.cfi_offset 9, -16
 686              		.cfi_offset 10, -12
 687              		.cfi_offset 11, -8
 688              		.cfi_offset 14, -4
 689 0004 83B0     		sub	sp, sp, #12
 690              		.cfi_def_cfa_offset 48
 691              		.loc 1 313 3 view .LVU197
 692 0006 0024     		movs	r4, #0
 693 0008 404F     		ldr	r7, .L82
 694 000a 0094     		str	r4, [sp]
 695 000c 3423     		movs	r3, #52
 696 000e 4FF4C872 		mov	r2, #400
 697 0012 BC21     		movs	r1, #188
 311:src/menu.c    ****   int len = 0;
ARM GAS  /tmp/ccUw5X70.s 			page 21


 698              		.loc 1 311 38 view .LVU198
 699 0014 0646     		mov	r6, r0
 700              		.loc 1 313 3 view .LVU199
 701 0016 2046     		mov	r0, r4
 702              	.LVL56:
 703              		.loc 1 313 3 view .LVU200
 704 0018 B847     		blx	r7
 705              	.LVL57:
 314:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 706              		.loc 1 314 3 is_stmt 1 view .LVU201
 707 001a 3D4D     		ldr	r5, .L82+4
 708 001c FF23     		movs	r3, #255
 709 001e 0093     		str	r3, [sp]
 710 0020 4FF4C872 		mov	r2, #400
 711 0024 0123     		movs	r3, #1
 712 0026 BC21     		movs	r1, #188
 713 0028 2046     		mov	r0, r4
 714 002a B847     		blx	r7
 715              	.LVL58:
 315:src/menu.c    ****   //Clear previous menu
 316:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 716              		.loc 1 316 3 view .LVU202
 717              	.LBB67:
 718              		.loc 1 316 8 view .LVU203
 719              		.loc 1 316 21 view .LVU204
 317:src/menu.c    ****     mdots[col][0] = 0;
 720              		.loc 1 317 19 is_stmt 0 view .LVU205
 721 002c 2246     		mov	r2, r4
 722 002e 05F5C871 		add	r1, r5, #400
 723              	.LBE67:
 314:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 724              		.loc 1 314 3 view .LVU206
 725 0032 2B46     		mov	r3, r5
 726              	.LVL59:
 727              	.L65:
 728              	.LBB68:
 729              		.loc 1 317 5 is_stmt 1 discriminator 3 view .LVU207
 730              		.loc 1 317 19 is_stmt 0 discriminator 3 view .LVU208
 731 0034 1A70     		strb	r2, [r3]
 318:src/menu.c    ****     mdots[col][1] = 0;
 732              		.loc 1 318 5 is_stmt 1 discriminator 3 view .LVU209
 733              		.loc 1 318 19 is_stmt 0 discriminator 3 view .LVU210
 734 0036 5A70     		strb	r2, [r3, #1]
 316:src/menu.c    ****     mdots[col][0] = 0;
 735              		.loc 1 316 32 is_stmt 1 discriminator 3 view .LVU211
 316:src/menu.c    ****     mdots[col][0] = 0;
 736              		.loc 1 316 21 discriminator 3 view .LVU212
 737 0038 0233     		adds	r3, r3, #2
 316:src/menu.c    ****     mdots[col][0] = 0;
 738              		.loc 1 316 3 is_stmt 0 discriminator 3 view .LVU213
 739 003a 9942     		cmp	r1, r3
 740 003c FAD1     		bne	.L65
 741 003e 354B     		ldr	r3, .L82+8
 742 0040 D022     		movs	r2, #208
 743 0042 02FB0636 		mla	r6, r2, r6, r3
 744              	.LVL60:
 316:src/menu.c    ****     mdots[col][0] = 0;
ARM GAS  /tmp/ccUw5X70.s 			page 22


 745              		.loc 1 316 3 discriminator 3 view .LVU214
 746 0046 2036     		adds	r6, r6, #32
 316:src/menu.c    ****     mdots[col][0] = 0;
 747              		.loc 1 316 3 view .LVU215
 748 0048 0024     		movs	r4, #0
 749              	.LVL61:
 750              	.L66:
 316:src/menu.c    ****     mdots[col][0] = 0;
 751              		.loc 1 316 3 view .LVU216
 752              	.LBE68:
 753              	.LBB69:
 319:src/menu.c    ****   }
 320:src/menu.c    **** 
 321:src/menu.c    ****   // Draw menu items
 322:src/menu.c    ****   // 
 323:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 324:src/menu.c    ****     /*
 325:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 326:src/menu.c    ****     */
 327:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 328:src/menu.c    ****     // Unshifted first
 329:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small fo
 754              		.loc 1 329 5 is_stmt 1 view .LVU217
 755              		.loc 1 329 11 is_stmt 0 view .LVU218
 756 004a 0021     		movs	r1, #0
 757 004c 3046     		mov	r0, r6
 758 004e FFF7FEFF 		bl	pixel_length
 759              	.LVL62:
 330:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 )
 760              		.loc 1 330 5 is_stmt 1 view .LVU219
 761              		.loc 1 330 87 is_stmt 0 view .LVU220
 762 0052 C0F12000 		rsb	r0, r0, #32
 763              	.LVL63:
 764              		.loc 1 330 93 view .LVU221
 765 0056 00EBD070 		add	r0, r0, r0, lsr #31
 766              		.loc 1 330 5 view .LVU222
 767 005a 04EB6001 		add	r1, r4, r0, asr #1
 768 005e 0022     		movs	r2, #0
 769 0060 3046     		mov	r0, r6
 770 0062 06F10807 		add	r7, r6, #8
 771 0066 FFF7FEFF 		bl	set_menu_label.constprop.0
 772              	.LVL64:
 331:src/menu.c    ****     // Now shifted ...	
 332:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small font
 773              		.loc 1 332 5 is_stmt 1 view .LVU223
 774              		.loc 1 332 11 is_stmt 0 view .LVU224
 775 006a 0021     		movs	r1, #0
 776 006c 3846     		mov	r0, r7
 777 006e FFF7FEFF 		bl	pixel_length
 778              	.LVL65:
 333:src/menu.c    ****     len = item*32 + (32-len)/2;
 779              		.loc 1 333 5 is_stmt 1 view .LVU225
 780              		.loc 1 333 24 is_stmt 0 view .LVU226
 781 0072 C0F12000 		rsb	r0, r0, #32
 782              	.LVL66:
 783              		.loc 1 333 29 view .LVU227
 784 0076 00EBD070 		add	r0, r0, r0, lsr #31
ARM GAS  /tmp/ccUw5X70.s 			page 23


 785              	.LVL67:
 334:src/menu.c    ****     if (len<0) len = 0;
 786              		.loc 1 334 5 is_stmt 1 view .LVU228
 333:src/menu.c    ****     len = item*32 + (32-len)/2;
 787              		.loc 1 333 9 is_stmt 0 view .LVU229
 788 007a 04EB6001 		add	r1, r4, r0, asr #1
 789              	.LVL68:
 333:src/menu.c    ****     len = item*32 + (32-len)/2;
 790              		.loc 1 333 9 view .LVU230
 791 007e C729     		cmp	r1, #199
 792 0080 A8BF     		it	ge
 793 0082 C721     		movge	r1, #199
 794              	.LVL69:
 335:src/menu.c    ****     if (len>199) len = 199;
 336:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 795              		.loc 1 336 5 is_stmt 1 view .LVU231
 796 0084 21EAE171 		bic	r1, r1, r1, asr #31
 797              	.LVL70:
 798              		.loc 1 336 5 is_stmt 0 view .LVU232
 799 0088 3846     		mov	r0, r7
 800 008a 2034     		adds	r4, r4, #32
 801 008c 0122     		movs	r2, #1
 802 008e FFF7FEFF 		bl	set_menu_label.constprop.0
 803              	.LVL71:
 323:src/menu.c    ****     /*
 804              		.loc 1 323 32 is_stmt 1 view .LVU233
 323:src/menu.c    ****     /*
 805              		.loc 1 323 22 view .LVU234
 323:src/menu.c    ****     /*
 806              		.loc 1 323 3 is_stmt 0 view .LVU235
 807 0092 C02C     		cmp	r4, #192
 808 0094 06F12006 		add	r6, r6, #32
 809 0098 D7D1     		bne	.L66
 810 009a 1F4E     		ldr	r6, .L82+12
 811              	.LBE69:
 812              	.LBB70:
 813              	.LBB71:
 337:src/menu.c    ****   }
 338:src/menu.c    **** 
 339:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 340:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 341:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 342:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 343:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 814              		.loc 1 343 2 view .LVU236
 815 009c DFF86C90 		ldr	r9, .L82
 816 00a0 C5F1040A 		rsb	r10, r5, #4
 817 00a4 06F5C47B 		add	fp, r6, #392
 818              	.LBE71:
 819              	.LBE70:
 820              	.LBB73:
 323:src/menu.c    ****     /*
 821              		.loc 1 323 3 view .LVU237
 822 00a8 771E     		subs	r7, r6, #1
 823              	.LBE73:
 824              	.LBB74:
 825              	.LBB72:
ARM GAS  /tmp/ccUw5X70.s 			page 24


 826              		.loc 1 343 2 view .LVU238
 827 00aa 4FF0FF08 		mov	r8, #255
 828              	.L67:
 829              	.LVL72:
 340:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 830              		.loc 1 340 23 is_stmt 1 view .LVU239
 831 00ae 0AEB0705 		add	r5, r10, r7
 340:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 832              		.loc 1 340 14 is_stmt 0 view .LVU240
 833 00b2 0024     		movs	r4, #0
 834              	.LVL73:
 835              	.L70:
 341:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 836              		.loc 1 341 7 is_stmt 1 view .LVU241
 837              		.loc 1 343 2 view .LVU242
 341:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 838              		.loc 1 341 22 is_stmt 0 view .LVU243
 839 00b4 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 341:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 840              		.loc 1 341 40 view .LVU244
 841 00b8 2241     		asrs	r2, r2, r4
 842              		.loc 1 343 2 view .LVU245
 843 00ba A4EB8401 		sub	r1, r4, r4, lsl #2
 844 00be 0323     		movs	r3, #3
 341:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 845              		.loc 1 341 10 view .LVU246
 846 00c0 12F0010F 		tst	r2, #1
 847              		.loc 1 343 2 view .LVU247
 848 00c4 01F1E901 		add	r1, r1, #233
 849 00c8 1A46     		mov	r2, r3
 850 00ca 2846     		mov	r0, r5
 341:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 851              		.loc 1 341 10 view .LVU248
 852 00cc 02D0     		beq	.L68
 853              		.loc 1 343 2 view .LVU249
 854 00ce CDF80080 		str	r8, [sp]
 855 00d2 C847     		blx	r9
 856              	.LVL74:
 857              	.L68:
 344:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 858              		.loc 1 344 7 is_stmt 1 view .LVU250
 345:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 346:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 859              		.loc 1 346 2 view .LVU251
 344:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 860              		.loc 1 344 22 is_stmt 0 view .LVU252
 861 00d4 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 344:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 862              		.loc 1 344 40 view .LVU253
 863 00d6 2241     		asrs	r2, r2, r4
 864              		.loc 1 346 2 view .LVU254
 865 00d8 A4EB8401 		sub	r1, r4, r4, lsl #2
 866 00dc 0323     		movs	r3, #3
 344:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 867              		.loc 1 344 10 view .LVU255
 868 00de 12F0010F 		tst	r2, #1
 869              		.loc 1 346 2 view .LVU256
ARM GAS  /tmp/ccUw5X70.s 			page 25


 870 00e2 01F1D001 		add	r1, r1, #208
 871 00e6 1A46     		mov	r2, r3
 872 00e8 04F10104 		add	r4, r4, #1
 873              	.LVL75:
 874              		.loc 1 346 2 view .LVU257
 875 00ec 2846     		mov	r0, r5
 344:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 876              		.loc 1 344 10 view .LVU258
 877 00ee 02D0     		beq	.L69
 878              		.loc 1 346 2 view .LVU259
 879 00f0 CDF80080 		str	r8, [sp]
 880 00f4 C847     		blx	r9
 881              	.LVL76:
 882              	.L69:
 340:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 883              		.loc 1 340 32 is_stmt 1 discriminator 2 view .LVU260
 340:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 884              		.loc 1 340 23 discriminator 2 view .LVU261
 340:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 885              		.loc 1 340 5 is_stmt 0 discriminator 2 view .LVU262
 886 00f6 062C     		cmp	r4, #6
 887 00f8 DCD1     		bne	.L70
 888              	.LBE72:
 339:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 889              		.loc 1 339 32 is_stmt 1 discriminator 2 view .LVU263
 339:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 890              		.loc 1 339 21 discriminator 2 view .LVU264
 891 00fa 0236     		adds	r6, r6, #2
 339:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 892              		.loc 1 339 3 is_stmt 0 discriminator 2 view .LVU265
 893 00fc B345     		cmp	fp, r6
 894 00fe 07F10207 		add	r7, r7, #2
 895 0102 D4D1     		bne	.L67
 896              	.LBE74:
 347:src/menu.c    ****     }
 348:src/menu.c    ****   }
 349:src/menu.c    **** }
 897              		.loc 1 349 1 view .LVU266
 898 0104 03B0     		add	sp, sp, #12
 899              		.cfi_def_cfa_offset 36
 900              		@ sp needed
 901 0106 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 902              	.LVL77:
 903              	.L83:
 904              		.loc 1 349 1 view .LVU267
 905 010a 00BF     		.align	2
 906              	.L82:
 907 010c 3D020008 		.word	134218301
 908 0110 00000000 		.word	.LANCHOR0
 909 0114 00000000 		.word	.LANCHOR3
 910 0118 01000000 		.word	.LANCHOR0+1
 911              		.cfi_endproc
 912              	.LFE9:
 914              		.section	.text.display_current_menu,"ax",%progbits
 915              		.align	1
 916              		.p2align 2,,3
 917              		.global	display_current_menu
ARM GAS  /tmp/ccUw5X70.s 			page 26


 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu fpv4-sp-d16
 923              	display_current_menu:
 924              	.LFB5:
  21:src/menu.c    ****   display_menu (current_menu);
 925              		.loc 1 21 30 is_stmt 1 view -0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
  22:src/menu.c    **** }
 930              		.loc 1 22 3 view .LVU269
 931 0000 014B     		ldr	r3, .L85
 932 0002 1868     		ldr	r0, [r3]
 933 0004 FFF7FEBF 		b	display_menu
 934              	.LVL78:
 935              	.L86:
 936              		.align	2
 937              	.L85:
 938 0008 00000000 		.word	.LANCHOR1
 939              		.cfi_endproc
 940              	.LFE5:
 942              		.section	.text.all_menu_dots,"ax",%progbits
 943              		.align	1
 944              		.p2align 2,,3
 945              		.global	all_menu_dots
 946              		.syntax unified
 947              		.thumb
 948              		.thumb_func
 949              		.fpu fpv4-sp-d16
 951              	all_menu_dots:
 952              	.LFB10:
 350:src/menu.c    **** 
 351:src/menu.c    **** void all_menu_dots () {
 953              		.loc 1 351 23 view -0
 954              		.cfi_startproc
 955              		@ args = 0, pretend = 0, frame = 0
 956              		@ frame_needed = 0, uses_anonymous_args = 0
 352:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 957              		.loc 1 352 3 view .LVU271
 958              	.LBB75:
 959              		.loc 1 352 8 view .LVU272
 960              	.LVL79:
 961              		.loc 1 352 21 view .LVU273
 962              	.LBE75:
 351:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 963              		.loc 1 351 23 is_stmt 0 view .LVU274
 964 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 965              		.cfi_def_cfa_offset 20
 966              		.cfi_offset 4, -20
 967              		.cfi_offset 5, -16
 968              		.cfi_offset 6, -12
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971              	.LBB79:
ARM GAS  /tmp/ccUw5X70.s 			page 27


 972              	.LBB76:
 353:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 354:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 973              		.loc 1 354 2 view .LVU275
 974 0002 0D4E     		ldr	r6, .L93
 975              	.LBE76:
 976              	.LBE79:
 351:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 977              		.loc 1 351 23 view .LVU276
 978 0004 83B0     		sub	sp, sp, #12
 979              		.cfi_def_cfa_offset 32
 351:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 980              		.loc 1 351 23 view .LVU277
 981 0006 0025     		movs	r5, #0
 982              	.LBB80:
 983              	.LBB77:
 984              		.loc 1 354 2 view .LVU278
 985 0008 FF27     		movs	r7, #255
 986              	.LVL80:
 987              	.L88:
 353:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 988              		.loc 1 353 23 is_stmt 1 view .LVU279
 989              	.LBE77:
 990              	.LBE80:
 351:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 991              		.loc 1 351 23 is_stmt 0 view .LVU280
 992 000a E924     		movs	r4, #233
 993              	.LVL81:
 994              	.L89:
 995              	.LBB81:
 996              	.LBB78:
 997              		.loc 1 354 2 is_stmt 1 discriminator 3 view .LVU281
 998 000c 0323     		movs	r3, #3
 999 000e 1A46     		mov	r2, r3
 1000 0010 2146     		mov	r1, r4
 1001 0012 2846     		mov	r0, r5
 1002 0014 0097     		str	r7, [sp]
 1003 0016 B047     		blx	r6
 1004              	.LVL82:
 355:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1005              		.loc 1 355 2 discriminator 3 view .LVU282
 1006 0018 0323     		movs	r3, #3
 1007 001a A4F11901 		sub	r1, r4, #25
 1008 001e 0097     		str	r7, [sp]
 1009 0020 1A46     		mov	r2, r3
 1010 0022 2846     		mov	r0, r5
 1011 0024 033C     		subs	r4, r4, #3
 1012 0026 B047     		blx	r6
 1013              	.LVL83:
 353:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1014              		.loc 1 353 32 discriminator 3 view .LVU283
 353:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1015              		.loc 1 353 23 discriminator 3 view .LVU284
 353:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1016              		.loc 1 353 5 is_stmt 0 discriminator 3 view .LVU285
 1017 0028 D72C     		cmp	r4, #215
 1018 002a EFD1     		bne	.L89
ARM GAS  /tmp/ccUw5X70.s 			page 28


 1019              	.LBE78:
 352:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1020              		.loc 1 352 32 is_stmt 1 discriminator 2 view .LVU286
 352:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1021              		.loc 1 352 21 discriminator 2 view .LVU287
 1022 002c 0235     		adds	r5, r5, #2
 352:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1023              		.loc 1 352 3 is_stmt 0 discriminator 2 view .LVU288
 1024 002e B5F5C87F 		cmp	r5, #400
 1025 0032 EAD1     		bne	.L88
 1026              	.LBE81:
 356:src/menu.c    ****     }
 357:src/menu.c    ****   }
 358:src/menu.c    **** }  
 1027              		.loc 1 358 1 view .LVU289
 1028 0034 03B0     		add	sp, sp, #12
 1029              		.cfi_def_cfa_offset 20
 1030              		@ sp needed
 1031 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1032              	.L94:
 1033              		.align	2
 1034              	.L93:
 1035 0038 3D020008 		.word	134218301
 1036              		.cfi_endproc
 1037              	.LFE10:
 1039              		.section	.text.shutdown,"ax",%progbits
 1040              		.align	1
 1041              		.p2align 2,,3
 1042              		.global	shutdown
 1043              		.syntax unified
 1044              		.thumb
 1045              		.thumb_func
 1046              		.fpu fpv4-sp-d16
 1048              	shutdown:
 1049              	.LFB12:
 1050              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
ARM GAS  /tmp/ccUw5X70.s 			page 29


  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** const uint8_t mid_menu[] = {
  46:src/console.c ****     MI_SYSTEM_ENTER,
  47:src/console.c ****     MI_MSC,
  48:src/console.c ****     0 }; // Terminator
  49:src/console.c **** 
  50:src/console.c **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  51:src/console.c **** 
  52:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  53:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  54:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  55:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  56:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  57:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  58:src/console.c **** 
  59:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  60:src/console.c **** 
  61:src/console.c **** static struct _ndmap remap (const int c) {
  62:src/console.c **** 
  63:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  64:src/console.c **** 
  65:src/console.c **** #include "keytran.c"
  66:src/console.c **** 
  67:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  68:src/console.c **** 
  69:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  70:src/console.c **** 
  71:src/console.c ****   if (c == 44 ) {
  72:src/console.c ****     // Start click 
  73:src/console.c ****     start_buzzer_freq(4400); sys_delay(10); stop_buzzer();
  74:src/console.c ****     // Make screenshot - allow to report errors
  75:src/console.c ****     if ( create_screenshot(1) == 2 ) {
  76:src/console.c ****       // Was error just wait for confirmation
  77:src/console.c ****       wait_for_key_press();
  78:src/console.c ****     }
ARM GAS  /tmp/ccUw5X70.s 			page 30


  79:src/console.c ****     // End click
  80:src/console.c ****     start_buzzer_freq(8800); sys_delay(10); stop_buzzer();
  81:src/console.c ****     return no_key;
  82:src/console.c ****   }
  83:src/console.c **** 
  84:src/console.c ****   
  85:src/console.c ****   if ( get_alpha_state() ) {
  86:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  87:src/console.c ****       switch (cur_shift()) { 
  88:src/console.c ****       case SHIFT_N:
  89:src/console.c **** 	return mapping_none[c]; // N -> F
  90:src/console.c **** 	break;
  91:src/console.c ****       case SHIFT_F:
  92:src/console.c **** 	return mapping_fshift[c]; // F -> G
  93:src/console.c **** 	break;
  94:src/console.c ****       case SHIFT_G:
  95:src/console.c **** 	return h_shift; // G -> H
  96:src/console.c **** 	break;
  97:src/console.c ****       case SHIFT_H:
  98:src/console.c **** 	return h_shift; // H -> N
  99:src/console.c ****       default:
 100:src/console.c **** 	return no_change;
 101:src/console.c ****       }
 102:src/console.c ****     }
 103:src/console.c ****     return mapping_alpha [c];
 104:src/console.c ****   }
 105:src/console.c ****     
 106:src/console.c ****   switch (c) {
 107:src/console.c ****   case KEY_F1:
 108:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
 109:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 110:src/console.c ****   case KEY_F2:
 111:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
 112:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 113:src/console.c ****   case KEY_F3:
 114:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 115:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 116:src/console.c ****   case KEY_F4:
 117:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 118:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 119:src/console.c ****   case KEY_F5:
 120:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 121:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 122:src/console.c ****   case KEY_F6:
 123:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 124:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 125:src/console.c ****   }
 126:src/console.c ****   
 127:src/console.c ****   switch (cur_shift()) {
 128:src/console.c ****   case SHIFT_N:    
 129:src/console.c ****     return mapping_none[c];
 130:src/console.c ****     break;
 131:src/console.c ****   case SHIFT_F:
 132:src/console.c ****     return mapping_fshift[c];
 133:src/console.c ****     break;
 134:src/console.c ****   case SHIFT_G:
 135:src/console.c ****     return mapping_gshift[c];
ARM GAS  /tmp/ccUw5X70.s 			page 31


 136:src/console.c ****     break;
 137:src/console.c ****   default:
 138:src/console.c ****     return no_change;
 139:src/console.c ****   }
 140:src/console.c **** }
 141:src/console.c **** 
 142:src/console.c **** #endif
 143:src/console.c **** 
 144:src/console.c **** void shutdown( void )
 145:src/console.c **** {
 1051              		.loc 2 145 1 is_stmt 1 view -0
 1052              		.cfi_startproc
 1053              		@ args = 0, pretend = 0, frame = 0
 1054              		@ frame_needed = 0, uses_anonymous_args = 0
 1055              		@ link register save eliminated.
 146:src/console.c **** #ifndef DM42
 147:src/console.c ****   checksum_all();
 148:src/console.c ****   setuptty( 1 );
 149:src/console.c ****   save_statefile( NULL );
 150:src/console.c ****   exit( 0 );
 151:src/console.c **** #else
 152:src/console.c ****   //  save_ram_file(0);
 153:src/console.c ****   SET_ST(STAT_PGM_END);
 1056              		.loc 2 153 3 view .LVU291
 1057 0000 024A     		ldr	r2, .L96
 1058 0002 1368     		ldr	r3, [r2]
 1059 0004 43F40073 		orr	r3, r3, #512
 1060 0008 1360     		str	r3, [r2]
 154:src/console.c **** #endif
 155:src/console.c **** }
 1061              		.loc 2 155 1 is_stmt 0 view .LVU292
 1062 000a 7047     		bx	lr
 1063              	.L97:
 1064              		.align	2
 1065              	.L96:
 1066 000c 00200010 		.word	268443648
 1067              		.cfi_endproc
 1068              	.LFE12:
 1070              		.section	.text.is_key_pressed,"ax",%progbits
 1071              		.align	1
 1072              		.p2align 2,,3
 1073              		.global	is_key_pressed
 1074              		.syntax unified
 1075              		.thumb
 1076              		.thumb_func
 1077              		.fpu fpv4-sp-d16
 1079              	is_key_pressed:
 1080              	.LFB13:
 156:src/console.c **** 
 157:src/console.c **** 
 158:src/console.c **** /*
 159:src/console.c ****  *  Dummies
 160:src/console.c ****  */
 161:src/console.c **** int is_key_pressed(void) 
 162:src/console.c **** {
 1081              		.loc 2 162 1 is_stmt 1 view -0
 1082              		.cfi_startproc
ARM GAS  /tmp/ccUw5X70.s 			page 32


 1083              		@ args = 0, pretend = 0, frame = 0
 1084              		@ frame_needed = 0, uses_anonymous_args = 0
 163:src/console.c **** #ifdef DM42
 164:src/console.c ****   return !key_empty();
 1085              		.loc 2 164 3 view .LVU294
 162:src/console.c **** #ifdef DM42
 1086              		.loc 2 162 1 is_stmt 0 view .LVU295
 1087 0000 08B5     		push	{r3, lr}
 1088              		.cfi_def_cfa_offset 8
 1089              		.cfi_offset 3, -8
 1090              		.cfi_offset 14, -4
 1091              		.loc 2 164 11 view .LVU296
 1092 0002 034B     		ldr	r3, .L100
 1093 0004 9847     		blx	r3
 1094              	.LVL84:
 165:src/console.c **** #else
 166:src/console.c ****   return 0;
 167:src/console.c **** #endif
 168:src/console.c **** }
 1095              		.loc 2 168 1 view .LVU297
 1096 0006 B0FA80F0 		clz	r0, r0
 1097 000a 4009     		lsrs	r0, r0, #5
 1098 000c 08BD     		pop	{r3, pc}
 1099              	.L101:
 1100 000e 00BF     		.align	2
 1101              	.L100:
 1102 0010 7D030008 		.word	134218621
 1103              		.cfi_endproc
 1104              	.LFE13:
 1106              		.section	.text.get_key,"ax",%progbits
 1107              		.align	1
 1108              		.p2align 2,,3
 1109              		.global	get_key
 1110              		.syntax unified
 1111              		.thumb
 1112              		.thumb_func
 1113              		.fpu fpv4-sp-d16
 1115              	get_key:
 1116              	.LFB14:
 169:src/console.c **** 
 170:src/console.c **** int get_key(void)
 171:src/console.c **** {
 1117              		.loc 2 171 1 is_stmt 1 view -0
 1118              		.cfi_startproc
 1119              		@ args = 0, pretend = 0, frame = 0
 1120              		@ frame_needed = 0, uses_anonymous_args = 0
 1121              		@ link register save eliminated.
 172:src/console.c ****   #ifdef DM42
 173:src/console.c ****   return key_pop();
 1122              		.loc 2 173 3 view .LVU299
 1123              		.loc 2 173 10 is_stmt 0 view .LVU300
 1124 0000 004B     		ldr	r3, .L103
 1125 0002 1847     		bx	r3
 1126              	.LVL85:
 1127              	.L104:
 1128              		.align	2
 1129              	.L103:
ARM GAS  /tmp/ccUw5X70.s 			page 33


 1130 0004 89030008 		.word	134218633
 1131              		.cfi_endproc
 1132              	.LFE14:
 1134              		.section	.text.put_key,"ax",%progbits
 1135              		.align	1
 1136              		.p2align 2,,3
 1137              		.global	put_key
 1138              		.syntax unified
 1139              		.thumb
 1140              		.thumb_func
 1141              		.fpu fpv4-sp-d16
 1143              	put_key:
 1144              	.LVL86:
 1145              	.LFB15:
 174:src/console.c ****   #else
 175:src/console.c ****   return 0;
 176:src/console.c ****   #endif
 177:src/console.c **** }
 178:src/console.c **** 
 179:src/console.c **** int put_key( int k )
 180:src/console.c **** {
 1146              		.loc 2 180 1 is_stmt 1 view -0
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 0
 1149              		@ frame_needed = 0, uses_anonymous_args = 0
 1150              		@ link register save eliminated.
 181:src/console.c ****   #ifdef DM42
 182:src/console.c ****   return key_push(k);
 1151              		.loc 2 182 3 view .LVU302
 1152              		.loc 2 182 10 is_stmt 0 view .LVU303
 1153 0000 004B     		ldr	r3, .L106
 1154 0002 1847     		bx	r3
 1155              	.LVL87:
 1156              	.L107:
 1157              		.loc 2 182 10 view .LVU304
 1158              		.align	2
 1159              	.L106:
 1160 0004 81030008 		.word	134218625
 1161              		.cfi_endproc
 1162              	.LFE15:
 1164              		.section	.text.shift_down,"ax",%progbits
 1165              		.align	1
 1166              		.p2align 2,,3
 1167              		.global	shift_down
 1168              		.syntax unified
 1169              		.thumb
 1170              		.thumb_func
 1171              		.fpu fpv4-sp-d16
 1173              	shift_down:
 1174              	.LFB16:
 183:src/console.c ****   #else
 184:src/console.c ****   return k;
 185:src/console.c ****   #endif
 186:src/console.c **** }
 187:src/console.c **** 
 188:src/console.c **** enum shifts shift_down(void)
 189:src/console.c **** {
ARM GAS  /tmp/ccUw5X70.s 			page 34


 1175              		.loc 2 189 1 is_stmt 1 view -0
 1176              		.cfi_startproc
 1177              		@ args = 0, pretend = 0, frame = 0
 1178              		@ frame_needed = 0, uses_anonymous_args = 0
 1179              		@ link register save eliminated.
 190:src/console.c **** 	return SHIFT_N;
 1180              		.loc 2 190 2 view .LVU306
 191:src/console.c **** }
 1181              		.loc 2 191 1 is_stmt 0 view .LVU307
 1182 0000 0020     		movs	r0, #0
 1183 0002 7047     		bx	lr
 1184              		.cfi_endproc
 1185              	.LFE16:
 1187              		.section	.text.start_key_timer,"ax",%progbits
 1188              		.align	1
 1189              		.p2align 2,,3
 1190              		.global	start_key_timer
 1191              		.syntax unified
 1192              		.thumb
 1193              		.thumb_func
 1194              		.fpu fpv4-sp-d16
 1196              	start_key_timer:
 1197              	.LFB17:
 192:src/console.c **** 
 193:src/console.c **** #ifndef DM42   // No serial operations for DM42
 194:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 195:src/console.c **** /*
 196:src/console.c ****  *  Open a COM port for transmission
 197:src/console.c ****  */
 198:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 199:src/console.c **** {
 200:src/console.c **** 	return 0;
 201:src/console.c **** }
 202:src/console.c **** 
 203:src/console.c **** 
 204:src/console.c **** /*
 205:src/console.c ****  *  Close the COM port after transmission is complete
 206:src/console.c ****  */
 207:src/console.c **** extern void close_port( void )
 208:src/console.c **** {
 209:src/console.c **** }
 210:src/console.c **** 
 211:src/console.c **** 
 212:src/console.c **** /*
 213:src/console.c ****  *  Output a single byte to the serial
 214:src/console.c ****  */
 215:src/console.c **** void put_byte( unsigned char byte )
 216:src/console.c **** {
 217:src/console.c **** 	report_err(ERR_PROG_BAD);
 218:src/console.c **** }
 219:src/console.c **** 
 220:src/console.c **** 
 221:src/console.c **** /*
 222:src/console.c ****  *  Force buffer flush
 223:src/console.c ****  */
 224:src/console.c **** void flush_comm( void )
 225:src/console.c **** {
ARM GAS  /tmp/ccUw5X70.s 			page 35


 226:src/console.c **** }
 227:src/console.c **** 
 228:src/console.c **** #endif
 229:src/console.c **** #endif
 230:src/console.c **** 
 231:src/console.c **** 
 232:src/console.c **** /*
 233:src/console.c ****  *  Main loop
 234:src/console.c ****  */
 235:src/console.c **** #ifdef DM42
 236:src/console.c **** void start_key_timer (void);
 237:src/console.c **** int keyticks (void);
 238:src/console.c **** void moveto (int line, int x);
 239:src/console.c **** 
 240:src/console.c **** static int start_ticks;
 241:src/console.c **** 
 242:src/console.c **** void start_key_timer() {
 1198              		.loc 2 242 24 is_stmt 1 view -0
 1199              		.cfi_startproc
 1200              		@ args = 0, pretend = 0, frame = 0
 1201              		@ frame_needed = 0, uses_anonymous_args = 0
 243:src/console.c ****     start_ticks = get_rtc_ticks();
 1202              		.loc 2 243 5 view .LVU309
 242:src/console.c ****     start_ticks = get_rtc_ticks();
 1203              		.loc 2 242 24 is_stmt 0 view .LVU310
 1204 0000 08B5     		push	{r3, lr}
 1205              		.cfi_def_cfa_offset 8
 1206              		.cfi_offset 3, -8
 1207              		.cfi_offset 14, -4
 1208              		.loc 2 243 19 view .LVU311
 1209 0002 024B     		ldr	r3, .L111
 1210 0004 9847     		blx	r3
 1211              	.LVL88:
 1212              		.loc 2 243 17 view .LVU312
 1213 0006 024B     		ldr	r3, .L111+4
 1214 0008 1860     		str	r0, [r3]
 244:src/console.c **** }
 1215              		.loc 2 244 1 view .LVU313
 1216 000a 08BD     		pop	{r3, pc}
 1217              	.L112:
 1218              		.align	2
 1219              	.L111:
 1220 000c B9040008 		.word	134218937
 1221 0010 00000000 		.word	.LANCHOR4
 1222              		.cfi_endproc
 1223              	.LFE17:
 1225              		.section	.text.keyticks,"ax",%progbits
 1226              		.align	1
 1227              		.p2align 2,,3
 1228              		.global	keyticks
 1229              		.syntax unified
 1230              		.thumb
 1231              		.thumb_func
 1232              		.fpu fpv4-sp-d16
 1234              	keyticks:
 1235              	.LFB18:
 245:src/console.c **** 
ARM GAS  /tmp/ccUw5X70.s 			page 36


 246:src/console.c **** int keyticks () {
 1236              		.loc 2 246 17 is_stmt 1 view -0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 0
 1239              		@ frame_needed = 0, uses_anonymous_args = 0
 247:src/console.c ****   int i;
 1240              		.loc 2 247 3 view .LVU315
 248:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1241              		.loc 2 248 3 view .LVU316
 246:src/console.c ****   int i;
 1242              		.loc 2 246 17 is_stmt 0 view .LVU317
 1243 0000 08B5     		push	{r3, lr}
 1244              		.cfi_def_cfa_offset 8
 1245              		.cfi_offset 3, -8
 1246              		.cfi_offset 14, -4
 1247              		.loc 2 248 8 view .LVU318
 1248 0002 054B     		ldr	r3, .L115
 1249 0004 9847     		blx	r3
 1250              	.LVL89:
 249:src/console.c ****   return i >> 8;
 1251              		.loc 2 249 3 is_stmt 1 view .LVU319
 248:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1252              		.loc 2 248 24 is_stmt 0 view .LVU320
 1253 0006 054B     		ldr	r3, .L115+4
 1254 0008 1B68     		ldr	r3, [r3]
 1255 000a C01A     		subs	r0, r0, r3
 1256              	.LVL90:
 248:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1257              		.loc 2 248 38 view .LVU321
 1258 000c 00EB8000 		add	r0, r0, r0, lsl #2
 250:src/console.c **** }
 1259              		.loc 2 250 1 view .LVU322
 1260 0010 40F3D710 		sbfx	r0, r0, #7, #24
 1261 0014 08BD     		pop	{r3, pc}
 1262              	.L116:
 1263 0016 00BF     		.align	2
 1264              	.L115:
 1265 0018 B9040008 		.word	134218937
 1266 001c 00000000 		.word	.LANCHOR4
 1267              		.cfi_endproc
 1268              	.LFE18:
 1270              		.section	.text.moveto,"ax",%progbits
 1271              		.align	1
 1272              		.p2align 2,,3
 1273              		.global	moveto
 1274              		.syntax unified
 1275              		.thumb
 1276              		.thumb_func
 1277              		.fpu fpv4-sp-d16
 1279              	moveto:
 1280              	.LVL91:
 1281              	.LFB19:
 251:src/console.c **** 
 252:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 253:src/console.c **** char print_string[22];
 254:src/console.c **** int n_p = 0;
 255:src/console.c **** 
ARM GAS  /tmp/ccUw5X70.s 			page 37


 256:src/console.c **** 
 257:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 1282              		.loc 2 257 30 is_stmt 1 view -0
 1283              		.cfi_startproc
 1284              		@ args = 0, pretend = 0, frame = 0
 1285              		@ frame_needed = 0, uses_anonymous_args = 0
 258:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1286              		.loc 2 258 3 view .LVU324
 257:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1287              		.loc 2 257 30 is_stmt 0 view .LVU325
 1288 0000 70B5     		push	{r4, r5, r6, lr}
 1289              		.cfi_def_cfa_offset 16
 1290              		.cfi_offset 4, -16
 1291              		.cfi_offset 5, -12
 1292              		.cfi_offset 6, -8
 1293              		.cfi_offset 14, -4
 1294              		.loc 2 258 3 view .LVU326
 1295 0002 0A4D     		ldr	r5, .L119
 1296 0004 0A4B     		ldr	r3, .L119+4
 257:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1297              		.loc 2 257 30 view .LVU327
 1298 0006 0246     		mov	r2, r0
 1299 0008 0C46     		mov	r4, r1
 1300              		.loc 2 258 3 view .LVU328
 1301 000a A86B     		ldr	r0, [r5, #56]
 1302              	.LVL92:
 1303              		.loc 2 258 3 view .LVU329
 1304 000c 511E     		subs	r1, r2, #1
 1305              	.LVL93:
 1306              		.loc 2 258 3 view .LVU330
 1307 000e 9847     		blx	r3
 1308              	.LVL94:
 259:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1309              		.loc 2 259 3 is_stmt 1 view .LVU331
 1310 0010 A86B     		ldr	r0, [r5, #56]
 1311 0012 084B     		ldr	r3, .L119+8
 1312              		.loc 2 259 33 is_stmt 0 view .LVU332
 1313 0014 0168     		ldr	r1, [r0]
 1314              		.loc 2 259 3 view .LVU333
 1315 0016 B0F90620 		ldrsh	r2, [r0, #6]
 1316              		.loc 2 259 33 view .LVU334
 1317 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 1318              		.loc 2 259 43 view .LVU335
 1319 001c 013C     		subs	r4, r4, #1
 1320              	.LVL95:
 1321              		.loc 2 259 40 view .LVU336
 1322 001e 04FB01F1 		mul	r1, r4, r1
 1323              		.loc 2 259 3 view .LVU337
 1324 0022 1431     		adds	r1, r1, #20
 260:src/console.c **** }
 1325              		.loc 2 260 1 view .LVU338
 1326 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1327              		.cfi_restore 14
 1328              		.cfi_restore 6
 1329              		.cfi_restore 5
 1330              		.cfi_restore 4
 1331              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccUw5X70.s 			page 38


 1332              	.LVL96:
 259:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1333              		.loc 2 259 3 view .LVU339
 1334 0028 1847     		bx	r3	@ indirect register sibling call
 1335              	.LVL97:
 1336              	.L120:
 1337 002a 00BF     		.align	2
 1338              	.L119:
 1339 002c 00200010 		.word	268443648
 1340 0030 69020008 		.word	134218345
 1341 0034 6D020008 		.word	134218349
 1342              		.cfi_endproc
 1343              	.LFE19:
 1345              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 1346              		.align	2
 1347              	.LC0:
 1348 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 1348      673A2025 
 1348      34692C25 
 1348      346900
 1349              		.section	.text.print_debug,"ax",%progbits
 1350              		.align	1
 1351              		.p2align 2,,3
 1352              		.global	print_debug
 1353              		.syntax unified
 1354              		.thumb
 1355              		.thumb_func
 1356              		.fpu fpv4-sp-d16
 1358              	print_debug:
 1359              	.LVL98:
 1360              	.LFB20:
 261:src/console.c **** 
 262:src/console.c **** void print_debug (int i, int j) {
 1361              		.loc 2 262 33 is_stmt 1 view -0
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 8
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 263:src/console.c ****   strcpy( print_string, spaces );
 1365              		.loc 2 263 3 view .LVU341
 262:src/console.c ****   strcpy( print_string, spaces );
 1366              		.loc 2 262 33 is_stmt 0 view .LVU342
 1367 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1368              		.cfi_def_cfa_offset 24
 1369              		.cfi_offset 4, -24
 1370              		.cfi_offset 5, -20
 1371              		.cfi_offset 6, -16
 1372              		.cfi_offset 7, -12
 1373              		.cfi_offset 8, -8
 1374              		.cfi_offset 14, -4
 1375              		.loc 2 263 3 view .LVU343
 1376 0004 174C     		ldr	r4, .L123
 1377 0006 184F     		ldr	r7, .L123+4
 264:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 265:src/console.c ****   moveto (3, 1);
 266:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1378              		.loc 2 266 3 view .LVU344
 1379 0008 184E     		ldr	r6, .L123+8
ARM GAS  /tmp/ccUw5X70.s 			page 39


 1380 000a 194D     		ldr	r5, .L123+12
 267:src/console.c ****   lcd_refresh();
 1381              		.loc 2 267 3 view .LVU345
 1382 000c DFF86C80 		ldr	r8, .L123+24
 262:src/console.c ****   strcpy( print_string, spaces );
 1383              		.loc 2 262 33 view .LVU346
 1384 0010 82B0     		sub	sp, sp, #8
 1385              		.cfi_def_cfa_offset 32
 262:src/console.c ****   strcpy( print_string, spaces );
 1386              		.loc 2 262 33 view .LVU347
 1387 0012 0190     		str	r0, [sp, #4]
 1388 0014 0091     		str	r1, [sp]
 263:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1389              		.loc 2 263 3 view .LVU348
 1390 0016 2046     		mov	r0, r4
 1391              	.LVL99:
 263:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1392              		.loc 2 263 3 view .LVU349
 1393 0018 3946     		mov	r1, r7
 1394              	.LVL100:
 263:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1395              		.loc 2 263 3 view .LVU350
 1396 001a FFF7FEFF 		bl	strcpy
 1397              	.LVL101:
 264:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1398              		.loc 2 264 3 is_stmt 1 view .LVU351
 1399 001e DDE90032 		ldrd	r3, r2, [sp]
 1400 0022 1449     		ldr	r1, .L123+16
 1401 0024 2046     		mov	r0, r4
 1402 0026 FFF7FEFF 		bl	sprintf
 1403              	.LVL102:
 265:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1404              		.loc 2 265 3 view .LVU352
 1405 002a 0121     		movs	r1, #1
 1406 002c 0320     		movs	r0, #3
 1407 002e FFF7FEFF 		bl	moveto
 1408              	.LVL103:
 266:src/console.c ****   lcd_refresh();
 1409              		.loc 2 266 3 view .LVU353
 1410 0032 2146     		mov	r1, r4
 1411 0034 B06B     		ldr	r0, [r6, #56]
 1412 0036 A847     		blx	r5
 1413              	.LVL104:
 1414              		.loc 2 267 3 view .LVU354
 1415 0038 C047     		blx	r8
 1416              	.LVL105:
 268:src/console.c ****   sys_delay (2500);
 1417              		.loc 2 268 3 view .LVU355
 1418 003a 0F4B     		ldr	r3, .L123+20
 1419 003c 40F6C410 		movw	r0, #2500
 1420 0040 9847     		blx	r3
 1421              	.LVL106:
 269:src/console.c ****   /* wait_for_key_press(); */
 270:src/console.c ****   //  key_pop_all();
 271:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 272:src/console.c ****   // key_pop_all();
 273:src/console.c ****   strcpy( print_string, spaces );
ARM GAS  /tmp/ccUw5X70.s 			page 40


 1422              		.loc 2 273 3 view .LVU356
 1423 0042 3946     		mov	r1, r7
 1424 0044 2046     		mov	r0, r4
 1425 0046 FFF7FEFF 		bl	strcpy
 1426              	.LVL107:
 274:src/console.c ****   moveto (3, 1);
 1427              		.loc 2 274 3 view .LVU357
 1428 004a 0121     		movs	r1, #1
 1429 004c 0320     		movs	r0, #3
 1430 004e FFF7FEFF 		bl	moveto
 1431              	.LVL108:
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1432              		.loc 2 275 3 view .LVU358
 1433 0052 B06B     		ldr	r0, [r6, #56]
 1434 0054 2146     		mov	r1, r4
 1435 0056 A847     		blx	r5
 1436              	.LVL109:
 276:src/console.c ****   lcd_refresh();
 1437              		.loc 2 276 3 view .LVU359
 1438 0058 4346     		mov	r3, r8
 277:src/console.c ****   // while (key_empty()<=0);; // wait for release
 278:src/console.c ****   // key_pop_all();
 279:src/console.c **** }
 1439              		.loc 2 279 1 is_stmt 0 view .LVU360
 1440 005a 02B0     		add	sp, sp, #8
 1441              		.cfi_def_cfa_offset 24
 1442              	.LVL110:
 1443              		.loc 2 279 1 view .LVU361
 1444              		@ sp needed
 1445 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1446              		.cfi_restore 14
 1447              		.cfi_restore 8
 1448              		.cfi_restore 7
 1449              		.cfi_restore 6
 1450              		.cfi_restore 5
 1451              		.cfi_restore 4
 1452              		.cfi_def_cfa_offset 0
 1453              	.LVL111:
 276:src/console.c ****   lcd_refresh();
 1454              		.loc 2 276 3 view .LVU362
 1455 0060 1847     		bx	r3	@ indirect register sibling call
 1456              	.LVL112:
 1457              	.L124:
 1458 0062 00BF     		.align	2
 1459              	.L123:
 1460 0064 00000000 		.word	print_string
 1461 0068 00000000 		.word	.LANCHOR5
 1462 006c 00200010 		.word	268443648
 1463 0070 B1020008 		.word	134218417
 1464 0074 00000000 		.word	.LC0
 1465 0078 05040008 		.word	134218757
 1466 007c 31020008 		.word	134218289
 1467              		.cfi_endproc
 1468              	.LFE20:
 1470              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 1471              		.align	2
 1472              	.LC1:
ARM GAS  /tmp/ccUw5X70.s 			page 41


 1473 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 1473      692C2531 
 1473      337300
 1474              		.section	.text.print_debug2,"ax",%progbits
 1475              		.align	1
 1476              		.p2align 2,,3
 1477              		.global	print_debug2
 1478              		.syntax unified
 1479              		.thumb
 1480              		.thumb_func
 1481              		.fpu fpv4-sp-d16
 1483              	print_debug2:
 1484              	.LVL113:
 1485              	.LFB21:
 280:src/console.c **** 
 281:src/console.c **** void print_debug2 (int i, char* j) {
 1486              		.loc 2 281 36 is_stmt 1 view -0
 1487              		.cfi_startproc
 1488              		@ args = 0, pretend = 0, frame = 8
 1489              		@ frame_needed = 0, uses_anonymous_args = 0
 282:src/console.c ****   strcpy( print_string, spaces );
 1490              		.loc 2 282 3 view .LVU364
 281:src/console.c ****   strcpy( print_string, spaces );
 1491              		.loc 2 281 36 is_stmt 0 view .LVU365
 1492 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1493              		.cfi_def_cfa_offset 24
 1494              		.cfi_offset 4, -24
 1495              		.cfi_offset 5, -20
 1496              		.cfi_offset 6, -16
 1497              		.cfi_offset 7, -12
 1498              		.cfi_offset 8, -8
 1499              		.cfi_offset 14, -4
 1500              		.loc 2 282 3 view .LVU366
 1501 0004 174C     		ldr	r4, .L127
 1502 0006 184F     		ldr	r7, .L127+4
 283:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 284:src/console.c ****   moveto (3, 1);
 285:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1503              		.loc 2 285 3 view .LVU367
 1504 0008 184E     		ldr	r6, .L127+8
 1505 000a 194D     		ldr	r5, .L127+12
 286:src/console.c ****   lcd_refresh();
 1506              		.loc 2 286 3 view .LVU368
 1507 000c DFF86C80 		ldr	r8, .L127+24
 281:src/console.c ****   strcpy( print_string, spaces );
 1508              		.loc 2 281 36 view .LVU369
 1509 0010 82B0     		sub	sp, sp, #8
 1510              		.cfi_def_cfa_offset 32
 281:src/console.c ****   strcpy( print_string, spaces );
 1511              		.loc 2 281 36 view .LVU370
 1512 0012 0190     		str	r0, [sp, #4]
 1513 0014 0091     		str	r1, [sp]
 282:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1514              		.loc 2 282 3 view .LVU371
 1515 0016 2046     		mov	r0, r4
 1516              	.LVL114:
 282:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
ARM GAS  /tmp/ccUw5X70.s 			page 42


 1517              		.loc 2 282 3 view .LVU372
 1518 0018 3946     		mov	r1, r7
 1519              	.LVL115:
 282:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1520              		.loc 2 282 3 view .LVU373
 1521 001a FFF7FEFF 		bl	strcpy
 1522              	.LVL116:
 283:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1523              		.loc 2 283 3 is_stmt 1 view .LVU374
 1524 001e DDE90032 		ldrd	r3, r2, [sp]
 1525 0022 1449     		ldr	r1, .L127+16
 1526 0024 2046     		mov	r0, r4
 1527 0026 FFF7FEFF 		bl	sprintf
 1528              	.LVL117:
 284:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1529              		.loc 2 284 3 view .LVU375
 1530 002a 0121     		movs	r1, #1
 1531 002c 0320     		movs	r0, #3
 1532 002e FFF7FEFF 		bl	moveto
 1533              	.LVL118:
 285:src/console.c ****   lcd_refresh();
 1534              		.loc 2 285 3 view .LVU376
 1535 0032 2146     		mov	r1, r4
 1536 0034 B06B     		ldr	r0, [r6, #56]
 1537 0036 A847     		blx	r5
 1538              	.LVL119:
 1539              		.loc 2 286 3 view .LVU377
 1540 0038 C047     		blx	r8
 1541              	.LVL120:
 287:src/console.c ****   sys_delay (2500);
 1542              		.loc 2 287 3 view .LVU378
 1543 003a 0F4B     		ldr	r3, .L127+20
 1544 003c 40F6C410 		movw	r0, #2500
 1545 0040 9847     		blx	r3
 1546              	.LVL121:
 288:src/console.c ****   /* wait_for_key_press(); */
 289:src/console.c ****   //  key_pop_all();
 290:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 291:src/console.c ****   // key_pop_all();
 292:src/console.c ****   strcpy( print_string, spaces );
 1547              		.loc 2 292 3 view .LVU379
 1548 0042 3946     		mov	r1, r7
 1549 0044 2046     		mov	r0, r4
 1550 0046 FFF7FEFF 		bl	strcpy
 1551              	.LVL122:
 293:src/console.c ****   moveto (3, 1);
 1552              		.loc 2 293 3 view .LVU380
 1553 004a 0121     		movs	r1, #1
 1554 004c 0320     		movs	r0, #3
 1555 004e FFF7FEFF 		bl	moveto
 1556              	.LVL123:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1557              		.loc 2 294 3 view .LVU381
 1558 0052 B06B     		ldr	r0, [r6, #56]
 1559 0054 2146     		mov	r1, r4
 1560 0056 A847     		blx	r5
 1561              	.LVL124:
ARM GAS  /tmp/ccUw5X70.s 			page 43


 295:src/console.c ****   lcd_refresh();
 1562              		.loc 2 295 3 view .LVU382
 1563 0058 4346     		mov	r3, r8
 296:src/console.c ****   // while (key_empty()<=0);; // wait for release
 297:src/console.c ****   // key_pop_all();
 298:src/console.c **** }
 1564              		.loc 2 298 1 is_stmt 0 view .LVU383
 1565 005a 02B0     		add	sp, sp, #8
 1566              		.cfi_def_cfa_offset 24
 1567              	.LVL125:
 1568              		.loc 2 298 1 view .LVU384
 1569              		@ sp needed
 1570 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1571              		.cfi_restore 14
 1572              		.cfi_restore 8
 1573              		.cfi_restore 7
 1574              		.cfi_restore 6
 1575              		.cfi_restore 5
 1576              		.cfi_restore 4
 1577              		.cfi_def_cfa_offset 0
 1578              	.LVL126:
 295:src/console.c ****   lcd_refresh();
 1579              		.loc 2 295 3 view .LVU385
 1580 0060 1847     		bx	r3	@ indirect register sibling call
 1581              	.LVL127:
 1582              	.L128:
 1583 0062 00BF     		.align	2
 1584              	.L127:
 1585 0064 00000000 		.word	print_string
 1586 0068 00000000 		.word	.LANCHOR5
 1587 006c 00200010 		.word	268443648
 1588 0070 B1020008 		.word	134218417
 1589 0074 00000000 		.word	.LC1
 1590 0078 05040008 		.word	134218757
 1591 007c 31020008 		.word	134218289
 1592              		.cfi_endproc
 1593              	.LFE21:
 1595              		.section	.text.do_now,"ax",%progbits
 1596              		.align	1
 1597              		.p2align 2,,3
 1598              		.global	do_now
 1599              		.syntax unified
 1600              		.thumb
 1601              		.thumb_func
 1602              		.fpu fpv4-sp-d16
 1604              	do_now:
 1605              	.LVL128:
 1606              	.LFB22:
 299:src/console.c **** 
 300:src/console.c **** void do_now (int key, int shift) {
 1607              		.loc 2 300 34 is_stmt 1 view -0
 1608              		.cfi_startproc
 1609              		@ args = 0, pretend = 0, frame = 8
 1610              		@ frame_needed = 0, uses_anonymous_args = 0
 1611              		@ link register save eliminated.
 301:src/console.c ****   struct _ndmap temp;
 1612              		.loc 2 301 3 view .LVU387
ARM GAS  /tmp/ccUw5X70.s 			page 44


 302:src/console.c ****   temp.key_34s = key;
 1613              		.loc 2 302 3 view .LVU388
 300:src/console.c ****   struct _ndmap temp;
 1614              		.loc 2 300 34 is_stmt 0 view .LVU389
 1615 0000 82B0     		sub	sp, sp, #8
 1616              		.cfi_def_cfa_offset 8
 303:src/console.c ****   temp.shift = shift;
 304:src/console.c ****   process_keycode_with_shift (temp);
 1617              		.loc 2 304 3 view .LVU390
 1618 0002 02AB     		add	r3, sp, #8
 302:src/console.c ****   temp.shift = shift;
 1619              		.loc 2 302 16 view .LVU391
 1620 0004 8DF80000 		strb	r0, [sp]
 303:src/console.c ****   temp.shift = shift;
 1621              		.loc 2 303 3 is_stmt 1 view .LVU392
 303:src/console.c ****   temp.shift = shift;
 1622              		.loc 2 303 14 is_stmt 0 view .LVU393
 1623 0008 0191     		str	r1, [sp, #4]
 1624              		.loc 2 304 3 is_stmt 1 view .LVU394
 1625 000a 13E90300 		ldmdb	r3, {r0, r1}
 1626              	.LVL129:
 305:src/console.c **** }
 1627              		.loc 2 305 1 is_stmt 0 view .LVU395
 1628 000e 02B0     		add	sp, sp, #8
 1629              		.cfi_def_cfa_offset 0
 1630              		@ sp needed
 304:src/console.c **** }
 1631              		.loc 2 304 3 view .LVU396
 1632 0010 FFF7FEBF 		b	process_keycode_with_shift
 1633              	.LVL130:
 304:src/console.c **** }
 1634              		.loc 2 304 3 view .LVU397
 1635              		.cfi_endproc
 1636              	.LFE22:
 1638              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 1639              		.align	2
 1640              	.LC2:
 1641 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 1641      502F7770 
 1641      3334735F 
 1641      68656C70 
 1641      2E68746D 
 1642              		.section	.text.do_multi,"ax",%progbits
 1643              		.align	1
 1644              		.p2align 2,,3
 1645              		.global	do_multi
 1646              		.syntax unified
 1647              		.thumb
 1648              		.thumb_func
 1649              		.fpu fpv4-sp-d16
 1651              	do_multi:
 1652              	.LVL131:
 1653              	.LFB23:
 306:src/console.c **** 
 307:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 1654              		.loc 2 307 42 is_stmt 1 view -0
 1655              		.cfi_startproc
ARM GAS  /tmp/ccUw5X70.s 			page 45


 1656              		@ args = 0, pretend = 0, frame = 16
 1657              		@ frame_needed = 0, uses_anonymous_args = 0
 1658              		.loc 2 307 42 is_stmt 0 view .LVU399
 1659 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1660              		.cfi_def_cfa_offset 24
 1661              		.cfi_offset 4, -24
 1662              		.cfi_offset 5, -20
 1663              		.cfi_offset 6, -16
 1664              		.cfi_offset 7, -12
 1665              		.cfi_offset 8, -8
 1666              		.cfi_offset 14, -4
 1667 0004 84B0     		sub	sp, sp, #16
 1668              		.cfi_def_cfa_offset 40
 1669              	.LVL132:
 308:src/console.c ****   switch(r.shift) {
 1670              		.loc 2 308 3 is_stmt 1 view .LVU400
 307:src/console.c ****   switch(r.shift) {
 1671              		.loc 2 307 42 is_stmt 0 view .LVU401
 1672 0006 6C46     		mov	r4, sp
 1673 0008 531E     		subs	r3, r2, #1
 1674 000a 84E80600 		stm	r4, {r1, r2}
 1675              	.LVL133:
 307:src/console.c ****   switch(r.shift) {
 1676              		.loc 2 307 42 view .LVU402
 1677 000e 0546     		mov	r5, r0
 1678 0010 0A2B     		cmp	r3, #10
 1679 0012 00F29180 		bhi	.L132
 1680 0016 DFE803F0 		tbb	[pc, r3]
 1681              	.L134:
 1682 001a 19       		.byte	(.L144-.L134)/2
 1683 001b 37       		.byte	(.L143-.L134)/2
 1684 001c 41       		.byte	(.L142-.L134)/2
 1685 001d 4B       		.byte	(.L141-.L134)/2
 1686 001e 55       		.byte	(.L140-.L134)/2
 1687 001f 5F       		.byte	(.L139-.L134)/2
 1688 0020 69       		.byte	(.L138-.L134)/2
 1689 0021 73       		.byte	(.L137-.L134)/2
 1690 0022 7C       		.byte	(.L136-.L134)/2
 1691 0023 86       		.byte	(.L135-.L134)/2
 1692 0024 06       		.byte	(.L133-.L134)/2
 1693 0025 00       		.p2align 1
 1694              	.L133:
 309:src/console.c ****   case LASTX: // Last x via RCL L
 310:src/console.c ****     do_now (K11, 0); // RCL
 311:src/console.c ****     do_now (K_RELEASE,0); // release
 312:src/console.c ****     do_now (K15,0); // TAN key
 313:src/console.c ****     r.key_34s = K_RELEASE;
 314:src/console.c ****     r.shift = 0; // set up for release;
 315:src/console.c ****     break;
 316:src/console.c ****   case ONSTO: // flash_backup()
 317:src/console.c ****     flash_backup(OP_SAVE);
 318:src/console.c ****     r = no_key;
 319:src/console.c ****     break;
 320:src/console.c ****   case ONRCL: // flash_restore()
 321:src/console.c ****     flash_restore(OP_LOAD);
 322:src/console.c ****     r = no_key;
 323:src/console.c ****     break;
ARM GAS  /tmp/ccUw5X70.s 			page 46


 324:src/console.c ****   case WRLIB: // save library file
 325:src/console.c ****     save_lib_file(1);
 326:src/console.c ****     r = no_key;
 327:src/console.c ****     break;
 328:src/console.c ****   case LLIB: // load library file
 329:src/console.c ****     load_lib_file(1);
 330:src/console.c ****     r = no_key;
 331:src/console.c ****     break;
 332:src/console.c ****   case WRTST: // save state file
 333:src/console.c ****     save_ram_file(1);
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
 336:src/console.c ****   case LDST:
 337:src/console.c ****     load_ram_file(1);
 338:src/console.c ****     r = no_key;
 339:src/console.c ****     break;
 340:src/console.c ****   case LDPRG:
 341:src/console.c ****     load_prog_file();
 342:src/console.c ****     r = no_key;
 343:src/console.c ****     break;
 344:src/console.c ****   case SVPRG:
 345:src/console.c ****     save_prog_file();
 346:src/console.c ****     r = no_key;
 347:src/console.c ****     break;
 348:src/console.c ****   case HELP:
 349:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 350:src/console.c ****     r = no_key;
 351:src/console.c ****     break;
 352:src/console.c ****   case DOTS:
 353:src/console.c ****     do_all_dots();
 1695              		.loc 2 353 5 is_stmt 1 view .LVU403
 1696 0026 FFF7FEFF 		bl	do_all_dots
 1697              	.LVL134:
 354:src/console.c ****     r = no_key;
 1698              		.loc 2 354 5 view .LVU404
 1699              		.loc 2 354 7 is_stmt 0 view .LVU405
 1700 002a 474B     		ldr	r3, .L147
 1701 002c 93E80300 		ldm	r3, {r0, r1}
 1702 0030 84E80300 		stm	r4, {r0, r1}
 1703 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1704              	.LVL135:
 355:src/console.c ****     break;
 1705              		.loc 2 355 5 is_stmt 1 view .LVU406
 1706              	.L145:
 356:src/console.c ****   default:
 357:src/console.c ****     r = no_key;
 358:src/console.c ****   }
 359:src/console.c ****   return r;
 1707              		.loc 2 359 3 view .LVU407
 1708              		.loc 2 359 10 is_stmt 0 view .LVU408
 1709 0036 8DF80030 		strb	r3, [sp]
 1710 003a 0191     		str	r1, [sp, #4]
 1711 003c 94E80300 		ldm	r4, {r0, r1}
 1712              	.LVL136:
 1713              		.loc 2 359 10 view .LVU409
 1714 0040 85E80300 		stm	r5, {r0, r1}
 360:src/console.c **** }
ARM GAS  /tmp/ccUw5X70.s 			page 47


 1715              		.loc 2 360 1 view .LVU410
 1716 0044 2846     		mov	r0, r5
 1717 0046 04B0     		add	sp, sp, #16
 1718              		.cfi_remember_state
 1719              		.cfi_def_cfa_offset 24
 1720              		@ sp needed
 1721 0048 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1722              	.LVL137:
 1723              	.L144:
 1724              		.cfi_restore_state
 310:src/console.c ****     do_now (K_RELEASE,0); // release
 1725              		.loc 2 310 5 is_stmt 1 view .LVU411
 1726              	.LBB82:
 1727              	.LBI82:
 300:src/console.c ****   struct _ndmap temp;
 1728              		.loc 2 300 6 view .LVU412
 1729              	.LBB83:
 301:src/console.c ****   temp.key_34s = key;
 1730              		.loc 2 301 3 view .LVU413
 302:src/console.c ****   temp.shift = shift;
 1731              		.loc 2 302 3 view .LVU414
 302:src/console.c ****   temp.shift = shift;
 1732              		.loc 2 302 16 is_stmt 0 view .LVU415
 1733 004c 0723     		movs	r3, #7
 303:src/console.c ****   process_keycode_with_shift (temp);
 1734              		.loc 2 303 14 view .LVU416
 1735 004e 0026     		movs	r6, #0
 302:src/console.c ****   temp.shift = shift;
 1736              		.loc 2 302 16 view .LVU417
 1737 0050 8DF80830 		strb	r3, [sp, #8]
 303:src/console.c ****   process_keycode_with_shift (temp);
 1738              		.loc 2 303 3 is_stmt 1 view .LVU418
 304:src/console.c **** }
 1739              		.loc 2 304 3 is_stmt 0 view .LVU419
 1740 0054 0DF10808 		add	r8, sp, #8
 303:src/console.c ****   process_keycode_with_shift (temp);
 1741              		.loc 2 303 14 view .LVU420
 1742 0058 0396     		str	r6, [sp, #12]
 304:src/console.c **** }
 1743              		.loc 2 304 3 is_stmt 1 view .LVU421
 1744 005a 98E80300 		ldm	r8, {r0, r1}
 1745              	.LVL138:
 304:src/console.c **** }
 1746              		.loc 2 304 3 is_stmt 0 view .LVU422
 1747              	.LBE83:
 1748              	.LBE82:
 1749              	.LBB85:
 1750              	.LBB86:
 302:src/console.c ****   temp.shift = shift;
 1751              		.loc 2 302 16 view .LVU423
 1752 005e 6327     		movs	r7, #99
 1753              	.LBE86:
 1754              	.LBE85:
 1755              	.LBB88:
 1756              	.LBB84:
 304:src/console.c **** }
 1757              		.loc 2 304 3 view .LVU424
ARM GAS  /tmp/ccUw5X70.s 			page 48


 1758 0060 FFF7FEFF 		bl	process_keycode_with_shift
 1759              	.LVL139:
 304:src/console.c **** }
 1760              		.loc 2 304 3 view .LVU425
 1761              	.LBE84:
 1762              	.LBE88:
 311:src/console.c ****     do_now (K15,0); // TAN key
 1763              		.loc 2 311 5 is_stmt 1 view .LVU426
 1764              	.LBB89:
 1765              	.LBI85:
 300:src/console.c ****   struct _ndmap temp;
 1766              		.loc 2 300 6 view .LVU427
 1767              	.LBB87:
 301:src/console.c ****   temp.key_34s = key;
 1768              		.loc 2 301 3 view .LVU428
 302:src/console.c ****   temp.shift = shift;
 1769              		.loc 2 302 3 view .LVU429
 303:src/console.c ****   process_keycode_with_shift (temp);
 1770              		.loc 2 303 14 is_stmt 0 view .LVU430
 1771 0064 0396     		str	r6, [sp, #12]
 302:src/console.c ****   temp.shift = shift;
 1772              		.loc 2 302 16 view .LVU431
 1773 0066 8DF80870 		strb	r7, [sp, #8]
 303:src/console.c ****   process_keycode_with_shift (temp);
 1774              		.loc 2 303 3 is_stmt 1 view .LVU432
 304:src/console.c **** }
 1775              		.loc 2 304 3 view .LVU433
 1776 006a 98E80300 		ldm	r8, {r0, r1}
 1777 006e FFF7FEFF 		bl	process_keycode_with_shift
 1778              	.LVL140:
 304:src/console.c **** }
 1779              		.loc 2 304 3 is_stmt 0 view .LVU434
 1780              	.LBE87:
 1781              	.LBE89:
 312:src/console.c ****     r.key_34s = K_RELEASE;
 1782              		.loc 2 312 5 is_stmt 1 view .LVU435
 1783              	.LBB90:
 1784              	.LBI90:
 300:src/console.c ****   struct _ndmap temp;
 1785              		.loc 2 300 6 view .LVU436
 1786              	.LBB91:
 301:src/console.c ****   temp.key_34s = key;
 1787              		.loc 2 301 3 view .LVU437
 302:src/console.c ****   temp.shift = shift;
 1788              		.loc 2 302 3 view .LVU438
 302:src/console.c ****   temp.shift = shift;
 1789              		.loc 2 302 16 is_stmt 0 view .LVU439
 1790 0072 0B23     		movs	r3, #11
 1791 0074 8DF80830 		strb	r3, [sp, #8]
 303:src/console.c ****   process_keycode_with_shift (temp);
 1792              		.loc 2 303 3 is_stmt 1 view .LVU440
 304:src/console.c **** }
 1793              		.loc 2 304 3 view .LVU441
 303:src/console.c ****   process_keycode_with_shift (temp);
 1794              		.loc 2 303 14 is_stmt 0 view .LVU442
 1795 0078 0396     		str	r6, [sp, #12]
 304:src/console.c **** }
ARM GAS  /tmp/ccUw5X70.s 			page 49


 1796              		.loc 2 304 3 view .LVU443
 1797 007a 98E80300 		ldm	r8, {r0, r1}
 1798 007e FFF7FEFF 		bl	process_keycode_with_shift
 1799              	.LVL141:
 304:src/console.c **** }
 1800              		.loc 2 304 3 view .LVU444
 1801              	.LBE91:
 1802              	.LBE90:
 313:src/console.c ****     r.shift = 0; // set up for release;
 1803              		.loc 2 313 5 is_stmt 1 view .LVU445
 314:src/console.c ****     break;
 1804              		.loc 2 314 5 view .LVU446
 315:src/console.c ****   case ONSTO: // flash_backup()
 1805              		.loc 2 315 5 view .LVU447
 314:src/console.c ****     break;
 1806              		.loc 2 314 13 is_stmt 0 view .LVU448
 1807 0082 3146     		mov	r1, r6
 313:src/console.c ****     r.shift = 0; // set up for release;
 1808              		.loc 2 313 15 view .LVU449
 1809 0084 3B46     		mov	r3, r7
 315:src/console.c ****   case ONSTO: // flash_backup()
 1810              		.loc 2 315 5 view .LVU450
 1811 0086 D6E7     		b	.L145
 1812              	.LVL142:
 1813              	.L143:
 317:src/console.c ****     r = no_key;
 1814              		.loc 2 317 5 is_stmt 1 view .LVU451
 1815 0088 AD20     		movs	r0, #173
 1816              	.LVL143:
 317:src/console.c ****     r = no_key;
 1817              		.loc 2 317 5 is_stmt 0 view .LVU452
 1818 008a FFF7FEFF 		bl	flash_backup
 1819              	.LVL144:
 318:src/console.c ****     break;
 1820              		.loc 2 318 5 is_stmt 1 view .LVU453
 318:src/console.c ****     break;
 1821              		.loc 2 318 7 is_stmt 0 view .LVU454
 1822 008e 2E4B     		ldr	r3, .L147
 1823 0090 93E80300 		ldm	r3, {r0, r1}
 1824 0094 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1825              	.LVL145:
 319:src/console.c ****   case ONRCL: // flash_restore()
 1826              		.loc 2 319 5 is_stmt 1 view .LVU455
 318:src/console.c ****     break;
 1827              		.loc 2 318 7 is_stmt 0 view .LVU456
 1828 0096 84E80300 		stm	r4, {r0, r1}
 319:src/console.c ****   case ONRCL: // flash_restore()
 1829              		.loc 2 319 5 view .LVU457
 1830 009a CCE7     		b	.L145
 1831              	.LVL146:
 1832              	.L142:
 321:src/console.c ****     r = no_key;
 1833              		.loc 2 321 5 is_stmt 1 view .LVU458
 1834 009c AE20     		movs	r0, #174
 1835              	.LVL147:
 321:src/console.c ****     r = no_key;
 1836              		.loc 2 321 5 is_stmt 0 view .LVU459
ARM GAS  /tmp/ccUw5X70.s 			page 50


 1837 009e FFF7FEFF 		bl	flash_restore
 1838              	.LVL148:
 322:src/console.c ****     break;
 1839              		.loc 2 322 5 is_stmt 1 view .LVU460
 322:src/console.c ****     break;
 1840              		.loc 2 322 7 is_stmt 0 view .LVU461
 1841 00a2 294B     		ldr	r3, .L147
 1842 00a4 93E80300 		ldm	r3, {r0, r1}
 1843 00a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1844              	.LVL149:
 323:src/console.c ****   case WRLIB: // save library file
 1845              		.loc 2 323 5 is_stmt 1 view .LVU462
 322:src/console.c ****     break;
 1846              		.loc 2 322 7 is_stmt 0 view .LVU463
 1847 00aa 84E80300 		stm	r4, {r0, r1}
 323:src/console.c ****   case WRLIB: // save library file
 1848              		.loc 2 323 5 view .LVU464
 1849 00ae C2E7     		b	.L145
 1850              	.LVL150:
 1851              	.L141:
 325:src/console.c ****     r = no_key;
 1852              		.loc 2 325 5 is_stmt 1 view .LVU465
 1853 00b0 0120     		movs	r0, #1
 1854              	.LVL151:
 325:src/console.c ****     r = no_key;
 1855              		.loc 2 325 5 is_stmt 0 view .LVU466
 1856 00b2 FFF7FEFF 		bl	save_lib_file
 1857              	.LVL152:
 326:src/console.c ****     break;
 1858              		.loc 2 326 5 is_stmt 1 view .LVU467
 326:src/console.c ****     break;
 1859              		.loc 2 326 7 is_stmt 0 view .LVU468
 1860 00b6 244B     		ldr	r3, .L147
 1861 00b8 93E80300 		ldm	r3, {r0, r1}
 1862 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1863              	.LVL153:
 327:src/console.c ****   case LLIB: // load library file
 1864              		.loc 2 327 5 is_stmt 1 view .LVU469
 326:src/console.c ****     break;
 1865              		.loc 2 326 7 is_stmt 0 view .LVU470
 1866 00be 84E80300 		stm	r4, {r0, r1}
 327:src/console.c ****   case LLIB: // load library file
 1867              		.loc 2 327 5 view .LVU471
 1868 00c2 B8E7     		b	.L145
 1869              	.LVL154:
 1870              	.L140:
 329:src/console.c ****     r = no_key;
 1871              		.loc 2 329 5 is_stmt 1 view .LVU472
 1872 00c4 0120     		movs	r0, #1
 1873              	.LVL155:
 329:src/console.c ****     r = no_key;
 1874              		.loc 2 329 5 is_stmt 0 view .LVU473
 1875 00c6 FFF7FEFF 		bl	load_lib_file
 1876              	.LVL156:
 330:src/console.c ****     break;
 1877              		.loc 2 330 5 is_stmt 1 view .LVU474
 330:src/console.c ****     break;
ARM GAS  /tmp/ccUw5X70.s 			page 51


 1878              		.loc 2 330 7 is_stmt 0 view .LVU475
 1879 00ca 1F4B     		ldr	r3, .L147
 1880 00cc 93E80300 		ldm	r3, {r0, r1}
 1881 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1882              	.LVL157:
 331:src/console.c ****   case WRTST: // save state file
 1883              		.loc 2 331 5 is_stmt 1 view .LVU476
 330:src/console.c ****     break;
 1884              		.loc 2 330 7 is_stmt 0 view .LVU477
 1885 00d2 84E80300 		stm	r4, {r0, r1}
 331:src/console.c ****   case WRTST: // save state file
 1886              		.loc 2 331 5 view .LVU478
 1887 00d6 AEE7     		b	.L145
 1888              	.LVL158:
 1889              	.L139:
 333:src/console.c ****     r = no_key;
 1890              		.loc 2 333 5 is_stmt 1 view .LVU479
 1891 00d8 0120     		movs	r0, #1
 1892              	.LVL159:
 333:src/console.c ****     r = no_key;
 1893              		.loc 2 333 5 is_stmt 0 view .LVU480
 1894 00da FFF7FEFF 		bl	save_ram_file
 1895              	.LVL160:
 334:src/console.c ****     break;
 1896              		.loc 2 334 5 is_stmt 1 view .LVU481
 334:src/console.c ****     break;
 1897              		.loc 2 334 7 is_stmt 0 view .LVU482
 1898 00de 1A4B     		ldr	r3, .L147
 1899 00e0 93E80300 		ldm	r3, {r0, r1}
 1900 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1901              	.LVL161:
 335:src/console.c ****   case LDST:
 1902              		.loc 2 335 5 is_stmt 1 view .LVU483
 334:src/console.c ****     break;
 1903              		.loc 2 334 7 is_stmt 0 view .LVU484
 1904 00e6 84E80300 		stm	r4, {r0, r1}
 335:src/console.c ****   case LDST:
 1905              		.loc 2 335 5 view .LVU485
 1906 00ea A4E7     		b	.L145
 1907              	.LVL162:
 1908              	.L138:
 337:src/console.c ****     r = no_key;
 1909              		.loc 2 337 5 is_stmt 1 view .LVU486
 1910 00ec 0120     		movs	r0, #1
 1911              	.LVL163:
 337:src/console.c ****     r = no_key;
 1912              		.loc 2 337 5 is_stmt 0 view .LVU487
 1913 00ee FFF7FEFF 		bl	load_ram_file
 1914              	.LVL164:
 338:src/console.c ****     break;
 1915              		.loc 2 338 5 is_stmt 1 view .LVU488
 338:src/console.c ****     break;
 1916              		.loc 2 338 7 is_stmt 0 view .LVU489
 1917 00f2 154B     		ldr	r3, .L147
 1918 00f4 93E80300 		ldm	r3, {r0, r1}
 1919 00f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1920              	.LVL165:
ARM GAS  /tmp/ccUw5X70.s 			page 52


 339:src/console.c ****   case LDPRG:
 1921              		.loc 2 339 5 is_stmt 1 view .LVU490
 338:src/console.c ****     break;
 1922              		.loc 2 338 7 is_stmt 0 view .LVU491
 1923 00fa 84E80300 		stm	r4, {r0, r1}
 339:src/console.c ****   case LDPRG:
 1924              		.loc 2 339 5 view .LVU492
 1925 00fe 9AE7     		b	.L145
 1926              	.LVL166:
 1927              	.L137:
 341:src/console.c ****     r = no_key;
 1928              		.loc 2 341 5 is_stmt 1 view .LVU493
 1929 0100 FFF7FEFF 		bl	load_prog_file
 1930              	.LVL167:
 342:src/console.c ****     break;
 1931              		.loc 2 342 5 view .LVU494
 342:src/console.c ****     break;
 1932              		.loc 2 342 7 is_stmt 0 view .LVU495
 1933 0104 104B     		ldr	r3, .L147
 1934 0106 93E80300 		ldm	r3, {r0, r1}
 1935 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1936              	.LVL168:
 343:src/console.c ****   case SVPRG:
 1937              		.loc 2 343 5 is_stmt 1 view .LVU496
 342:src/console.c ****     break;
 1938              		.loc 2 342 7 is_stmt 0 view .LVU497
 1939 010c 84E80300 		stm	r4, {r0, r1}
 343:src/console.c ****   case SVPRG:
 1940              		.loc 2 343 5 view .LVU498
 1941 0110 91E7     		b	.L145
 1942              	.LVL169:
 1943              	.L136:
 349:src/console.c ****     r = no_key;
 1944              		.loc 2 349 5 is_stmt 1 view .LVU499
 1945 0112 0E4B     		ldr	r3, .L147+4
 1946 0114 0E48     		ldr	r0, .L147+8
 1947              	.LVL170:
 349:src/console.c ****     r = no_key;
 1948              		.loc 2 349 5 is_stmt 0 view .LVU500
 1949 0116 9847     		blx	r3
 1950              	.LVL171:
 350:src/console.c ****     break;
 1951              		.loc 2 350 5 is_stmt 1 view .LVU501
 350:src/console.c ****     break;
 1952              		.loc 2 350 7 is_stmt 0 view .LVU502
 1953 0118 0B4B     		ldr	r3, .L147
 1954 011a 93E80300 		ldm	r3, {r0, r1}
 1955 011e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1956              	.LVL172:
 351:src/console.c ****   case DOTS:
 1957              		.loc 2 351 5 is_stmt 1 view .LVU503
 350:src/console.c ****     break;
 1958              		.loc 2 350 7 is_stmt 0 view .LVU504
 1959 0120 84E80300 		stm	r4, {r0, r1}
 351:src/console.c ****   case DOTS:
 1960              		.loc 2 351 5 view .LVU505
 1961 0124 87E7     		b	.L145
ARM GAS  /tmp/ccUw5X70.s 			page 53


 1962              	.LVL173:
 1963              	.L135:
 345:src/console.c ****     r = no_key;
 1964              		.loc 2 345 5 is_stmt 1 view .LVU506
 1965 0126 FFF7FEFF 		bl	save_prog_file
 1966              	.LVL174:
 346:src/console.c ****     break;
 1967              		.loc 2 346 5 view .LVU507
 346:src/console.c ****     break;
 1968              		.loc 2 346 7 is_stmt 0 view .LVU508
 1969 012a 074B     		ldr	r3, .L147
 1970 012c 93E80300 		ldm	r3, {r0, r1}
 1971 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1972              	.LVL175:
 347:src/console.c ****   case HELP:
 1973              		.loc 2 347 5 is_stmt 1 view .LVU509
 346:src/console.c ****     break;
 1974              		.loc 2 346 7 is_stmt 0 view .LVU510
 1975 0132 84E80300 		stm	r4, {r0, r1}
 347:src/console.c ****   case HELP:
 1976              		.loc 2 347 5 view .LVU511
 1977 0136 7EE7     		b	.L145
 1978              	.LVL176:
 1979              	.L132:
 357:src/console.c ****   }
 1980              		.loc 2 357 5 is_stmt 1 view .LVU512
 357:src/console.c ****   }
 1981              		.loc 2 357 7 is_stmt 0 view .LVU513
 1982 0138 034B     		ldr	r3, .L147
 1983 013a 93E80300 		ldm	r3, {r0, r1}
 1984              	.LVL177:
 357:src/console.c ****   }
 1985              		.loc 2 357 7 view .LVU514
 1986 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1987              	.LVL178:
 357:src/console.c ****   }
 1988              		.loc 2 357 7 view .LVU515
 1989 0140 84E80300 		stm	r4, {r0, r1}
 1990 0144 77E7     		b	.L145
 1991              	.L148:
 1992 0146 00BF     		.align	2
 1993              	.L147:
 1994 0148 00000000 		.word	.LANCHOR6
 1995 014c 49040008 		.word	134218825
 1996 0150 00000000 		.word	.LC2
 1997              		.cfi_endproc
 1998              	.LFE23:
 2000              		.section	.text.program_main,"ax",%progbits
 2001              		.align	1
 2002              		.p2align 2,,3
 2003              		.global	program_main
 2004              		.syntax unified
 2005              		.thumb
 2006              		.thumb_func
 2007              		.fpu fpv4-sp-d16
 2009              	program_main:
 2010              	.LFB24:
ARM GAS  /tmp/ccUw5X70.s 			page 54


 361:src/console.c **** 
 362:src/console.c **** void program_main(){
 2011              		.loc 2 362 20 is_stmt 1 view -0
 2012              		.cfi_startproc
 2013              		@ args = 0, pretend = 0, frame = 16
 2014              		@ frame_needed = 0, uses_anonymous_args = 0
 363:src/console.c ****   int c;
 2015              		.loc 2 363 3 view .LVU517
 364:src/console.c ****   struct _ndmap remapped;
 2016              		.loc 2 364 3 view .LVU518
 365:src/console.c **** 
 366:src/console.c ****   init_mem();
 2017              		.loc 2 366 3 view .LVU519
 362:src/console.c ****   int c;
 2018              		.loc 2 362 20 is_stmt 0 view .LVU520
 2019 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2020              		.cfi_def_cfa_offset 32
 2021              		.cfi_offset 4, -32
 2022              		.cfi_offset 5, -28
 2023              		.cfi_offset 6, -24
 2024              		.cfi_offset 7, -20
 2025              		.cfi_offset 8, -16
 2026              		.cfi_offset 9, -12
 2027              		.cfi_offset 10, -8
 2028              		.cfi_offset 14, -4
 2029 0004 84B0     		sub	sp, sp, #16
 2030              		.cfi_def_cfa_offset 48
 2031              		.loc 2 366 3 view .LVU521
 2032 0006 FFF7FEFF 		bl	init_mem
 2033              	.LVL179:
 367:src/console.c ****   init_RegionTab();
 2034              		.loc 2 367 3 is_stmt 1 view .LVU522
 2035 000a FFF7FEFF 		bl	init_RegionTab
 2036              	.LVL180:
 368:src/console.c ****   init_34s();
 2037              		.loc 2 368 3 view .LVU523
 2038 000e FFF7FEFF 		bl	init_34s
 2039              	.LVL181:
 369:src/console.c ****   State2.flags = 1;  
 2040              		.loc 2 369 3 view .LVU524
 2041              		.loc 2 369 16 is_stmt 0 view .LVU525
 2042 0012 A64A     		ldr	r2, .L242
 2043 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 2044 0016 43F00103 		orr	r3, r3, #1
 2045 001a 1376     		strb	r3, [r2, #24]
 370:src/console.c ****   check_create_wp34sdir();
 2046              		.loc 2 370 3 is_stmt 1 view .LVU526
 2047 001c FFF7FEFF 		bl	check_create_wp34sdir
 2048              	.LVL182:
 371:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 2049              		.loc 2 371 3 view .LVU527
 2050              		.loc 2 371 8 is_stmt 0 view .LVU528
 2051 0020 0020     		movs	r0, #0
 2052 0022 FFF7FEFF 		bl	load_ram_file
 2053              	.LVL183:
 2054              		.loc 2 371 6 view .LVU529
 2055 0026 08B9     		cbnz	r0, .L150
ARM GAS  /tmp/ccUw5X70.s 			page 55


 2056              		.loc 2 371 26 is_stmt 1 discriminator 1 view .LVU530
 2057              		.loc 2 371 34 is_stmt 0 discriminator 1 view .LVU531
 2058 0028 A14B     		ldr	r3, .L242+4
 2059 002a 1860     		str	r0, [r3]
 2060              	.L150:
 372:src/console.c ****   load_backup_file(0);
 2061              		.loc 2 372 3 is_stmt 1 view .LVU532
 2062 002c 0020     		movs	r0, #0
 373:src/console.c ****   load_lib_file(0);
 374:src/console.c ****   t20->newln = 0;
 2063              		.loc 2 374 3 is_stmt 0 view .LVU533
 2064 002e A14C     		ldr	r4, .L242+8
 2065              	.LBB106:
 2066              	.LBB107:
  22:src/menu.c    **** }
 2067              		.loc 1 22 3 view .LVU534
 2068 0030 A14E     		ldr	r6, .L242+12
 2069              	.LBE107:
 2070              	.LBE106:
 375:src/console.c ****   t20->lnfill = 0;
 376:src/console.c ****   t20->fixed = 1;
 377:src/console.c ****   t20->xspc = -2;
 378:src/console.c ****   t20->bgfill = 0;
 379:src/console.c ****   
 380:src/console.c ****   display();
 381:src/console.c ****   display_current_menu();
 382:src/console.c ****   lcd_refresh();
 383:src/console.c ****   JustDisplayed = 0;
 384:src/console.c ****   /*
 385:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 386:src/console.c ****     Sleeps peacefully while waiting for a key.
 387:src/console.c ****     Handles (in principle!) turning off and on.
 388:src/console.c ****     =================
 389:src/console.c ****     Main event loop
 390:src/console.c ****     =================
 391:src/console.c **** 
 392:src/console.c ****     Status flags:
 393:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 394:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 395:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 396:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 397:src/console.c ****   */
 398:src/console.c ****   for(;;) {
 399:src/console.c **** 
 400:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 401:src/console.c ****       {
 402:src/console.c **** 	CLR_ST(STAT_RUNNING);
 403:src/console.c **** 	sys_sleep();
 404:src/console.c ****       }
 405:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 2071              		.loc 2 405 35 view .LVU535
 2072 0032 A24F     		ldr	r7, .L242+16
 406:src/console.c ****     {
 407:src/console.c ****       CLR_ST(STAT_RUNNING);
 408:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2073              		.loc 2 408 7 view .LVU536
 2074 0034 DFF80883 		ldr	r8, .L242+148
ARM GAS  /tmp/ccUw5X70.s 			page 56


 372:src/console.c ****   load_lib_file(0);
 2075              		.loc 2 372 3 view .LVU537
 2076 0038 FFF7FEFF 		bl	load_backup_file
 2077              	.LVL184:
 373:src/console.c ****   t20->newln = 0;
 2078              		.loc 2 373 3 is_stmt 1 view .LVU538
 2079 003c 0020     		movs	r0, #0
 2080 003e FFF7FEFF 		bl	load_lib_file
 2081              	.LVL185:
 374:src/console.c ****   t20->lnfill = 0;
 2082              		.loc 2 374 3 view .LVU539
 2083 0042 236B     		ldr	r3, [r4, #48]
 375:src/console.c ****   t20->fixed = 1;
 2084              		.loc 2 375 3 view .LVU540
 376:src/console.c ****   t20->xspc = -2;
 2085              		.loc 2 376 3 view .LVU541
 376:src/console.c ****   t20->xspc = -2;
 2086              		.loc 2 376 14 is_stmt 0 view .LVU542
 2087 0044 0122     		movs	r2, #1
 2088 0046 1A74     		strb	r2, [r3, #16]
 377:src/console.c ****   t20->bgfill = 0;
 2089              		.loc 2 377 3 is_stmt 1 view .LVU543
 378:src/console.c ****   
 2090              		.loc 2 378 15 is_stmt 0 view .LVU544
 2091 0048 0025     		movs	r5, #0
 377:src/console.c ****   t20->bgfill = 0;
 2092              		.loc 2 377 13 view .LVU545
 2093 004a FE22     		movs	r2, #254
 2094 004c 9A73     		strb	r2, [r3, #14]
 378:src/console.c ****   
 2095              		.loc 2 378 3 is_stmt 1 view .LVU546
 378:src/console.c ****   
 2096              		.loc 2 378 15 is_stmt 0 view .LVU547
 2097 004e 5D82     		strh	r5, [r3, #18]	@ movhi
 374:src/console.c ****   t20->lnfill = 0;
 2098              		.loc 2 374 14 view .LVU548
 2099 0050 1D75     		strb	r5, [r3, #20]
 380:src/console.c ****   display_current_menu();
 2100              		.loc 2 380 3 is_stmt 1 view .LVU549
 2101 0052 FFF7FEFF 		bl	display
 2102              	.LVL186:
 381:src/console.c ****   lcd_refresh();
 2103              		.loc 2 381 3 view .LVU550
 2104              	.LBB109:
 2105              	.LBI106:
  21:src/menu.c    ****   display_menu (current_menu);
 2106              		.loc 1 21 6 view .LVU551
 2107              	.LBB108:
  22:src/menu.c    **** }
 2108              		.loc 1 22 3 view .LVU552
 2109 0056 3068     		ldr	r0, [r6]
 2110 0058 FFF7FEFF 		bl	display_menu
 2111              	.LVL187:
 2112              	.LBE108:
 2113              	.LBE109:
 382:src/console.c ****   JustDisplayed = 0;
 2114              		.loc 2 382 3 view .LVU553
ARM GAS  /tmp/ccUw5X70.s 			page 57


 2115 005c 984B     		ldr	r3, .L242+20
 2116 005e 9847     		blx	r3
 2117              	.LVL188:
 383:src/console.c ****   /*
 2118              		.loc 2 383 3 view .LVU554
 383:src/console.c ****   /*
 2119              		.loc 2 383 17 is_stmt 0 view .LVU555
 2120 0060 984B     		ldr	r3, .L242+24
 2121 0062 1D60     		str	r5, [r3]
 2122              	.L151:
 398:src/console.c **** 
 2123              		.loc 2 398 3 is_stmt 1 view .LVU556
 400:src/console.c ****       {
 2124              		.loc 2 400 5 view .LVU557
 400:src/console.c ****       {
 2125              		.loc 2 400 10 is_stmt 0 view .LVU558
 2126 0064 2368     		ldr	r3, [r4]
 400:src/console.c ****       {
 2127              		.loc 2 400 8 view .LVU559
 2128 0066 9A05     		lsls	r2, r3, #22
 2129 0068 40F18D80 		bpl	.L152
 2130              	.L229:
 400:src/console.c ****       {
 2131              		.loc 2 400 30 discriminator 1 view .LVU560
 2132 006c 2368     		ldr	r3, [r4]
 400:src/console.c ****       {
 2133              		.loc 2 400 27 discriminator 1 view .LVU561
 2134 006e 5B07     		lsls	r3, r3, #29
 2135 0070 40F18980 		bpl	.L152
 402:src/console.c **** 	sys_sleep();
 2136              		.loc 2 402 2 is_stmt 1 view .LVU562
 2137 0074 2368     		ldr	r3, [r4]
 403:src/console.c ****       }
 2138              		.loc 2 403 2 is_stmt 0 view .LVU563
 2139 0076 944A     		ldr	r2, .L242+28
 402:src/console.c **** 	sys_sleep();
 2140              		.loc 2 402 2 view .LVU564
 2141 0078 23F00203 		bic	r3, r3, #2
 2142 007c 2360     		str	r3, [r4]
 403:src/console.c ****       }
 2143              		.loc 2 403 2 is_stmt 1 view .LVU565
 2144 007e 9047     		blx	r2
 2145              	.LVL189:
 2146              	.L153:
 409:src/console.c ****       sys_sleep();
 410:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 411:src/console.c **** 	key_push (K_HEARTBEAT);
 412:src/console.c **** 	if (Pause > 0) Pause--;
 413:src/console.c ****       }
 414:src/console.c ****       sys_timer_disable(0); // stop timer
 415:src/console.c ****     }
 416:src/console.c ****     
 417:src/console.c ****     // Wakeup in off state or going to sleep
 418:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 2147              		.loc 2 418 5 view .LVU566
 2148              		.loc 2 418 9 is_stmt 0 view .LVU567
 2149 0080 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccUw5X70.s 			page 58


 2150              		.loc 2 418 8 view .LVU568
 2151 0082 9D05     		lsls	r5, r3, #22
 2152 0084 00F1A680 		bmi	.L159
 2153              	.L230:
 2154              		.loc 2 418 29 discriminator 1 view .LVU569
 2155 0088 2368     		ldr	r3, [r4]
 2156              		.loc 2 418 26 discriminator 1 view .LVU570
 2157 008a 5807     		lsls	r0, r3, #29
 2158 008c 00F1A280 		bmi	.L159
 419:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 420:src/console.c ****         // Going to off mode
 421:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 422:src/console.c ****         draw_power_off_image(1);
 423:src/console.c **** 
 424:src/console.c ****         LCD_power_off(0);
 425:src/console.c ****         SET_ST(STAT_SUSPENDED);
 426:src/console.c ****         SET_ST(STAT_OFF);
 427:src/console.c ****       }
 428:src/console.c ****       // Already in OFF -> just continue to sleep above
 429:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 430:src/console.c ****       // thus reaching the sleep()
 431:src/console.c ****     }
 432:src/console.c **** 
 433:src/console.c ****     // Well, we are woken-up
 434:src/console.c ****     SET_ST(STAT_RUNNING);
 2159              		.loc 2 434 5 is_stmt 1 view .LVU571
 2160 0090 2368     		ldr	r3, [r4]
 2161 0092 43F00203 		orr	r3, r3, #2
 2162 0096 2360     		str	r3, [r4]
 435:src/console.c **** 
 436:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 437:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 2163              		.loc 2 437 5 view .LVU572
 2164 0098 2368     		ldr	r3, [r4]
 2165 009a 23F00403 		bic	r3, r3, #4
 2166 009e 2360     		str	r3, [r4]
 438:src/console.c **** 
 439:src/console.c ****     // Get up from OFF state
 440:src/console.c ****     if ( ST(STAT_OFF) ) {
 2167              		.loc 2 440 5 view .LVU573
 2168              		.loc 2 440 10 is_stmt 0 view .LVU574
 2169 00a0 2368     		ldr	r3, [r4]
 2170              		.loc 2 440 8 view .LVU575
 2171 00a2 D906     		lsls	r1, r3, #27
 2172 00a4 0ED5     		bpl	.L164
 441:src/console.c ****       LCD_power_on();
 2173              		.loc 2 441 7 is_stmt 1 view .LVU576
 2174 00a6 894B     		ldr	r3, .L242+32
 2175 00a8 9847     		blx	r3
 2176              	.LVL190:
 442:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 2177              		.loc 2 442 7 view .LVU577
 2178 00aa 894B     		ldr	r3, .L242+36
 2179 00ac 9847     		blx	r3
 2180              	.LVL191:
 443:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 2181              		.loc 2 443 7 view .LVU578
ARM GAS  /tmp/ccUw5X70.s 			page 59


 2182 00ae 894B     		ldr	r3, .L242+40
 2183 00b0 9847     		blx	r3
 2184              	.LVL192:
 444:src/console.c **** 
 445:src/console.c ****       CLR_ST(STAT_OFF);
 2185              		.loc 2 445 7 view .LVU579
 2186 00b2 2368     		ldr	r3, [r4]
 446:src/console.c **** 
 447:src/console.c ****       if ( !lcd_get_buf_cleared() )
 2187              		.loc 2 447 13 is_stmt 0 view .LVU580
 2188 00b4 884A     		ldr	r2, .L242+44
 445:src/console.c **** 
 2189              		.loc 2 445 7 view .LVU581
 2190 00b6 23F01003 		bic	r3, r3, #16
 2191 00ba 2360     		str	r3, [r4]
 2192              		.loc 2 447 7 is_stmt 1 view .LVU582
 2193              		.loc 2 447 13 is_stmt 0 view .LVU583
 2194 00bc 9047     		blx	r2
 2195              	.LVL193:
 2196              		.loc 2 447 10 view .LVU584
 2197 00be 08B9     		cbnz	r0, .L164
 448:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 2198              		.loc 2 448 9 is_stmt 1 view .LVU585
 2199 00c0 864B     		ldr	r3, .L242+48
 2200 00c2 9847     		blx	r3
 2201              	.LVL194:
 2202              	.L164:
 449:src/console.c ****     }
 450:src/console.c **** 
 451:src/console.c ****     // Key is ready -> clear auto off timer
 452:src/console.c ****     //    if ( !key_empty() )
 453:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 454:src/console.c ****     // Fetch the key
 455:src/console.c ****     //  < 0 -> No key event
 456:src/console.c ****     //  > 0 -> Key pressed
 457:src/console.c ****     // == 0 -> Key released
 458:src/console.c ****     c = key_pop();
 2203              		.loc 2 458 5 view .LVU586
 2204              		.loc 2 458 9 is_stmt 0 view .LVU587
 2205 00c4 864B     		ldr	r3, .L242+52
 2206 00c6 9847     		blx	r3
 2207              	.LVL195:
 459:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2208              		.loc 2 459 8 view .LVU588
 2209 00c8 6228     		cmp	r0, #98
 458:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2210              		.loc 2 458 9 view .LVU589
 2211 00ca 8246     		mov	r10, r0
 2212              	.LVL196:
 2213              		.loc 2 459 5 is_stmt 1 view .LVU590
 2214              		.loc 2 459 8 is_stmt 0 view .LVU591
 2215 00cc 00F0A980 		beq	.L166
 2216              		.loc 2 459 29 discriminator 1 view .LVU592
 2217 00d0 0028     		cmp	r0, #0
 2218 00d2 40F3A380 		ble	.L167
 460:src/console.c ****       reset_auto_off();
 2219              		.loc 2 460 7 is_stmt 1 view .LVU593
ARM GAS  /tmp/ccUw5X70.s 			page 60


 2220 00d6 834B     		ldr	r3, .L242+56
 2221 00d8 9847     		blx	r3
 2222              	.LVL197:
 461:src/console.c ****       start_key_timer();
 2223              		.loc 2 461 7 view .LVU594
 2224              	.LBB110:
 2225              	.LBI110:
 242:src/console.c ****     start_ticks = get_rtc_ticks();
 2226              		.loc 2 242 6 view .LVU595
 2227              	.LBB111:
 243:src/console.c **** }
 2228              		.loc 2 243 5 view .LVU596
 243:src/console.c **** }
 2229              		.loc 2 243 19 is_stmt 0 view .LVU597
 2230 00da 834B     		ldr	r3, .L242+60
 2231 00dc 9847     		blx	r3
 2232              	.LVL198:
 243:src/console.c **** }
 2233              		.loc 2 243 17 view .LVU598
 2234 00de 834B     		ldr	r3, .L242+64
 2235              	.LBE111:
 2236              	.LBE110:
 2237              	.LBB113:
 2238              	.LBB114:
  69:src/console.c **** 
 2239              		.loc 2 69 6 view .LVU599
 2240 00e0 BAF1630F 		cmp	r10, #99
 2241              	.LBE114:
 2242              	.LBE113:
 2243              	.LBB126:
 2244              	.LBB112:
 243:src/console.c **** }
 2245              		.loc 2 243 17 view .LVU600
 2246 00e4 1860     		str	r0, [r3]
 2247              	.LBE112:
 2248              	.LBE126:
 462:src/console.c ****     }
 463:src/console.c ****     if (c >= 0) {
 2249              		.loc 2 463 5 is_stmt 1 view .LVU601
 464:src/console.c ****       remapped = remap(c);
 2250              		.loc 2 464 7 view .LVU602
 2251              	.LVL199:
 2252              	.LBB127:
 2253              	.LBI113:
  61:src/console.c **** 
 2254              		.loc 2 61 22 view .LVU603
 2255              	.LBB115:
  63:src/console.c **** 
 2256              		.loc 2 63 3 view .LVU604
 2257              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 2258              		.loc 3 1 1 view .LVU605
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
ARM GAS  /tmp/ccUw5X70.s 			page 61


   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 2259              		.loc 3 59 3 view .LVU606
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
ARM GAS  /tmp/ccUw5X70.s 			page 62


  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU, 14}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_NOP, 0}, // no function
  96:src/keytran.c ****     {K_NOP, 0}, // no function
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 2260              		.loc 3 117 3 view .LVU607
 118:src/keytran.c ****     {K_RELEASE, -1},
ARM GAS  /tmp/ccUw5X70.s 			page 63


 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 0}, // Exit
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
ARM GAS  /tmp/ccUw5X70.s 			page 64


 2261              		.loc 3 175 1 view .LVU608
  67:src/console.c **** 
 2262              		.loc 2 67 3 view .LVU609
  69:src/console.c **** 
 2263              		.loc 2 69 3 view .LVU610
  69:src/console.c **** 
 2264              		.loc 2 69 6 is_stmt 0 view .LVU611
 2265 00e6 00F04C81 		beq	.L224
  71:src/console.c ****     // Start click 
 2266              		.loc 2 71 3 is_stmt 1 view .LVU612
  71:src/console.c ****     // Start click 
 2267              		.loc 2 71 6 is_stmt 0 view .LVU613
 2268 00ea BAF12C0F 		cmp	r10, #44
 2269 00ee 00F0C180 		beq	.L225
 2270              	.LVL200:
 2271              	.L170:
  85:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2272              		.loc 2 85 3 is_stmt 1 view .LVU614
  85:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2273              		.loc 2 85 8 is_stmt 0 view .LVU615
 2274 00f2 FFF7FEFF 		bl	get_alpha_state
 2275              	.LVL201:
  85:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2276              		.loc 2 85 6 view .LVU616
 2277 00f6 0028     		cmp	r0, #0
 2278 00f8 00F08380 		beq	.L172
  86:src/console.c ****       switch (cur_shift()) { 
 2279              		.loc 2 86 5 is_stmt 1 view .LVU617
  86:src/console.c ****       switch (cur_shift()) { 
 2280              		.loc 2 86 8 is_stmt 0 view .LVU618
 2281 00fc BAF11C0F 		cmp	r10, #28
 2282 0100 00F04E81 		beq	.L226
 103:src/console.c ****   }
 2283              		.loc 2 103 5 is_stmt 1 view .LVU619
 103:src/console.c ****   }
 2284              		.loc 2 103 26 is_stmt 0 view .LVU620
 2285 0104 7A4B     		ldr	r3, .L242+68
 2286              	.L222:
 132:src/console.c ****     break;
 2287              		.loc 2 132 26 view .LVU621
 2288 0106 03EBCA02 		add	r2, r3, r10, lsl #3
 2289 010a 92E80300 		ldm	r2, {r0, r1}
 2290 010e 0DF10809 		add	r9, sp, #8
 2291 0112 13F83AA0 		ldrb	r10, [r3, r10, lsl #3]	@ zero_extendqisi2
 2292              	.LVL202:
 132:src/console.c ****     break;
 2293              		.loc 2 132 26 view .LVU622
 2294 0116 89E80300 		stm	r9, {r0, r1}
 2295 011a 0D46     		mov	r5, r1
 2296              	.LVL203:
 2297              	.L169:
 132:src/console.c ****     break;
 2298              		.loc 2 132 26 view .LVU623
 2299              	.LBE115:
 2300              	.LBE127:
 465:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2301              		.loc 2 465 7 is_stmt 1 view .LVU624
ARM GAS  /tmp/ccUw5X70.s 			page 65


 2302              		.loc 2 465 10 is_stmt 0 view .LVU625
 2303 011c BAF12F0F 		cmp	r10, #47
 2304 0120 00F08D80 		beq	.L227
 2305              	.LVL204:
 2306              	.L195:
 466:src/console.c **** 	set_menu ( remapped.shift );
 467:src/console.c **** 	display_current_menu ();
 468:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 469:src/console.c **** 	case SHIFT_F:
 470:src/console.c **** 	  remapped = f_shift; // F -> N
 471:src/console.c **** 	  break;
 472:src/console.c **** 	case SHIFT_G:
 473:src/console.c **** 	  remapped = g_shift; // G -> N
 474:src/console.c **** 	  break;
 475:src/console.c **** 	case SHIFT_H:
 476:src/console.c **** 	  remapped = h_shift; // H -> N
 477:src/console.c **** 	default:
 478:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 479:src/console.c **** 	}
 480:src/console.c ****       }
 481:src/console.c ****       if (remapped.key_34s == K_SYS) {
 2307              		.loc 2 481 7 is_stmt 1 view .LVU626
 2308              		.loc 2 481 10 is_stmt 0 view .LVU627
 2309 0124 BAF1300F 		cmp	r10, #48
 2310 0128 18D1     		bne	.L201
 482:src/console.c **** 	SET_ST(STAT_MENU);
 2311              		.loc 2 482 2 is_stmt 1 view .LVU628
 2312 012a 2368     		ldr	r3, [r4]
 483:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 2313              		.loc 2 483 2 is_stmt 0 view .LVU629
 2314 012c 714D     		ldr	r5, .L242+72
 2315              	.LVL205:
 2316              		.loc 2 483 2 view .LVU630
 2317 012e 7248     		ldr	r0, .L242+76
 2318 0130 0022     		movs	r2, #0
 482:src/console.c **** 	SET_ST(STAT_MENU);
 2319              		.loc 2 482 2 view .LVU631
 2320 0132 43F04003 		orr	r3, r3, #64
 2321              		.loc 2 483 2 view .LVU632
 2322 0136 1146     		mov	r1, r2
 482:src/console.c **** 	SET_ST(STAT_MENU);
 2323              		.loc 2 482 2 view .LVU633
 2324 0138 2360     		str	r3, [r4]
 2325              		.loc 2 483 2 is_stmt 1 view .LVU634
 2326 013a A847     		blx	r5
 2327              	.LVL206:
 484:src/console.c **** 	CLR_ST(STAT_MENU);
 2328              		.loc 2 484 2 view .LVU635
 485:src/console.c **** 	remapped =  no_key;
 2329              		.loc 2 485 11 is_stmt 0 view .LVU636
 2330 013c 6F4B     		ldr	r3, .L242+80
 484:src/console.c **** 	CLR_ST(STAT_MENU);
 2331              		.loc 2 484 2 view .LVU637
 2332 013e 2268     		ldr	r2, [r4]
 2333              		.loc 2 485 11 view .LVU638
 2334 0140 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2335              	.LVL207:
ARM GAS  /tmp/ccUw5X70.s 			page 66


 2336              		.loc 2 485 11 view .LVU639
 2337 0144 93E80300 		ldm	r3, {r0, r1}
 484:src/console.c **** 	CLR_ST(STAT_MENU);
 2338              		.loc 2 484 2 view .LVU640
 2339 0148 22F04002 		bic	r2, r2, #64
 2340 014c 2260     		str	r2, [r4]
 2341              		.loc 2 485 2 is_stmt 1 view .LVU641
 2342              	.LVL208:
 2343              		.loc 2 485 11 is_stmt 0 view .LVU642
 2344 014e 04AA     		add	r2, sp, #16
 2345 0150 02E90300 		stmdb	r2, {r0, r1}
 2346              	.LBB128:
 2347              	.LBB129:
  22:src/menu.c    **** }
 2348              		.loc 1 22 3 view .LVU643
 2349 0154 3068     		ldr	r0, [r6]
 2350              	.LBE129:
 2351              	.LBE128:
 2352              		.loc 2 485 11 view .LVU644
 2353 0156 0D46     		mov	r5, r1
 2354              	.LVL209:
 486:src/console.c **** 	display_current_menu();
 2355              		.loc 2 486 2 is_stmt 1 view .LVU645
 2356              	.LBB131:
 2357              	.LBI128:
  21:src/menu.c    ****   display_menu (current_menu);
 2358              		.loc 1 21 6 view .LVU646
 2359              	.LBB130:
  22:src/menu.c    **** }
 2360              		.loc 1 22 3 view .LVU647
 2361 0158 FFF7FEFF 		bl	display_menu
 2362              	.LVL210:
 2363              	.L201:
  22:src/menu.c    **** }
 2364              		.loc 1 22 3 is_stmt 0 view .LVU648
 2365              	.LBE130:
 2366              	.LBE131:
 487:src/console.c ****       }
 488:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 2367              		.loc 2 488 7 is_stmt 1 view .LVU649
 2368              		.loc 2 488 10 is_stmt 0 view .LVU650
 2369 015c BAF1310F 		cmp	r10, #49
 2370 0160 00F0F080 		beq	.L228
 489:src/console.c **** 	remapped = do_multi (remapped);
 490:src/console.c **** 	display_current_menu();
 491:src/console.c ****       }
 492:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 2371              		.loc 2 492 7 is_stmt 1 view .LVU651
 2372              		.loc 2 492 10 is_stmt 0 view .LVU652
 2373 0164 BAF1320F 		cmp	r10, #50
 2374 0168 00F00581 		beq	.L203
 2375              	.LVL211:
 2376              	.L223:
 2377              		.loc 2 492 10 view .LVU653
 2378 016c 0DF10809 		add	r9, sp, #8
 2379              	.L174:
 493:src/console.c ****       process_keycode_with_shift(remapped);
ARM GAS  /tmp/ccUw5X70.s 			page 67


 2380              		.loc 2 493 7 is_stmt 1 view .LVU654
 2381              	.LVL212:
 2382              		.loc 2 493 7 is_stmt 0 view .LVU655
 2383 0170 8DF808A0 		strb	r10, [sp, #8]
 2384 0174 0395     		str	r5, [sp, #12]
 2385 0176 99E80300 		ldm	r9, {r0, r1}
 2386 017a FFF7FEFF 		bl	process_keycode_with_shift
 2387              	.LVL213:
 398:src/console.c **** 
 2388              		.loc 2 398 3 is_stmt 1 view .LVU656
 400:src/console.c ****       {
 2389              		.loc 2 400 5 view .LVU657
 400:src/console.c ****       {
 2390              		.loc 2 400 10 is_stmt 0 view .LVU658
 2391 017e 2368     		ldr	r3, [r4]
 400:src/console.c ****       {
 2392              		.loc 2 400 8 view .LVU659
 2393 0180 9A05     		lsls	r2, r3, #22
 2394 0182 3FF573AF 		bmi	.L229
 2395              	.LVL214:
 2396              	.L152:
 405:src/console.c ****     {
 2397              		.loc 2 405 10 is_stmt 1 view .LVU660
 405:src/console.c ****     {
 2398              		.loc 2 405 15 is_stmt 0 view .LVU661
 2399 0186 2568     		ldr	r5, [r4]
 405:src/console.c ****     {
 2400              		.loc 2 405 13 view .LVU662
 2401 0188 15F40075 		ands	r5, r5, #512
 2402 018c 7FF478AF 		bne	.L153
 405:src/console.c ****     {
 2403              		.loc 2 405 35 discriminator 1 view .LVU663
 2404 0190 B847     		blx	r7
 2405              	.LVL215:
 405:src/console.c ****     {
 2406              		.loc 2 405 32 discriminator 1 view .LVU664
 2407 0192 0028     		cmp	r0, #0
 2408 0194 3FF474AF 		beq	.L153
 407:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2409              		.loc 2 407 7 is_stmt 1 view .LVU665
 2410 0198 2368     		ldr	r3, [r4]
 2411 019a 23F00203 		bic	r3, r3, #2
 408:src/console.c ****       sys_sleep();
 2412              		.loc 2 408 7 is_stmt 0 view .LVU666
 2413 019e 2846     		mov	r0, r5
 2414 01a0 6421     		movs	r1, #100
 407:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2415              		.loc 2 407 7 view .LVU667
 2416 01a2 2360     		str	r3, [r4]
 408:src/console.c ****       sys_sleep();
 2417              		.loc 2 408 7 is_stmt 1 view .LVU668
 2418 01a4 C047     		blx	r8
 2419              	.LVL216:
 409:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 2420              		.loc 2 409 7 view .LVU669
 2421 01a6 484B     		ldr	r3, .L242+28
 2422 01a8 9847     		blx	r3
ARM GAS  /tmp/ccUw5X70.s 			page 68


 2423              	.LVL217:
 410:src/console.c **** 	key_push (K_HEARTBEAT);
 2424              		.loc 2 410 7 view .LVU670
 410:src/console.c **** 	key_push (K_HEARTBEAT);
 2425              		.loc 2 410 11 is_stmt 0 view .LVU671
 2426 01aa 554B     		ldr	r3, .L242+84
 2427 01ac 2846     		mov	r0, r5
 2428 01ae 9847     		blx	r3
 2429              	.LVL218:
 410:src/console.c **** 	key_push (K_HEARTBEAT);
 2430              		.loc 2 410 10 view .LVU672
 2431 01b0 48B1     		cbz	r0, .L157
 411:src/console.c **** 	if (Pause > 0) Pause--;
 2432              		.loc 2 411 2 is_stmt 1 view .LVU673
 2433 01b2 544B     		ldr	r3, .L242+88
 2434 01b4 6220     		movs	r0, #98
 2435 01b6 9847     		blx	r3
 2436              	.LVL219:
 412:src/console.c ****       }
 2437              		.loc 2 412 2 view .LVU674
 412:src/console.c ****       }
 2438              		.loc 2 412 12 is_stmt 0 view .LVU675
 2439 01b8 534B     		ldr	r3, .L242+92
 2440 01ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 412:src/console.c ****       }
 2441              		.loc 2 412 5 view .LVU676
 2442 01bc 1AB1     		cbz	r2, .L157
 412:src/console.c ****       }
 2443              		.loc 2 412 17 is_stmt 1 discriminator 1 view .LVU677
 412:src/console.c ****       }
 2444              		.loc 2 412 22 is_stmt 0 discriminator 1 view .LVU678
 2445 01be 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2446 01c0 013A     		subs	r2, r2, #1
 2447 01c2 D2B2     		uxtb	r2, r2
 2448 01c4 1A70     		strb	r2, [r3]
 2449              	.L157:
 414:src/console.c ****     }
 2450              		.loc 2 414 7 is_stmt 1 view .LVU679
 2451 01c6 514B     		ldr	r3, .L242+96
 2452 01c8 0020     		movs	r0, #0
 2453 01ca 9847     		blx	r3
 2454              	.LVL220:
 418:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2455              		.loc 2 418 5 view .LVU680
 418:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2456              		.loc 2 418 9 is_stmt 0 view .LVU681
 2457 01cc 2368     		ldr	r3, [r4]
 418:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2458              		.loc 2 418 8 view .LVU682
 2459 01ce 9D05     		lsls	r5, r3, #22
 2460 01d0 7FF55AAF 		bpl	.L230
 2461              	.L159:
 419:src/console.c ****         // Going to off mode
 2462              		.loc 2 419 7 is_stmt 1 view .LVU683
 419:src/console.c ****         // Going to off mode
 2463              		.loc 2 419 12 is_stmt 0 view .LVU684
 2464 01d4 2568     		ldr	r5, [r4]
ARM GAS  /tmp/ccUw5X70.s 			page 69


 419:src/console.c ****         // Going to off mode
 2465              		.loc 2 419 10 view .LVU685
 2466 01d6 15F00405 		ands	r5, r5, #4
 2467 01da 7FF443AF 		bne	.L151
 421:src/console.c ****         draw_power_off_image(1);
 2468              		.loc 2 421 9 is_stmt 1 view .LVU686
 2469 01de 4C4B     		ldr	r3, .L242+100
 2470 01e0 2846     		mov	r0, r5
 2471 01e2 9847     		blx	r3
 2472              	.LVL221:
 422:src/console.c **** 
 2473              		.loc 2 422 9 view .LVU687
 2474 01e4 4B4B     		ldr	r3, .L242+104
 2475 01e6 0120     		movs	r0, #1
 2476 01e8 9847     		blx	r3
 2477              	.LVL222:
 424:src/console.c ****         SET_ST(STAT_SUSPENDED);
 2478              		.loc 2 424 9 view .LVU688
 2479 01ea 4B4B     		ldr	r3, .L242+108
 2480 01ec 2846     		mov	r0, r5
 2481 01ee 9847     		blx	r3
 2482              	.LVL223:
 425:src/console.c ****         SET_ST(STAT_OFF);
 2483              		.loc 2 425 9 view .LVU689
 2484 01f0 2368     		ldr	r3, [r4]
 2485 01f2 43F00403 		orr	r3, r3, #4
 2486 01f6 2360     		str	r3, [r4]
 426:src/console.c ****       }
 2487              		.loc 2 426 9 view .LVU690
 2488 01f8 2368     		ldr	r3, [r4]
 2489 01fa 43F01003 		orr	r3, r3, #16
 2490 01fe 2360     		str	r3, [r4]
 2491 0200 30E7     		b	.L151
 2492              	.LVL224:
 2493              	.L172:
 2494              	.LBB132:
 2495              	.LBB116:
 106:src/console.c ****   case KEY_F1:
 2496              		.loc 2 106 3 view .LVU691
 2497 0202 AAF12603 		sub	r3, r10, #38
 2498 0206 052B     		cmp	r3, #5
 2499 0208 00F24581 		bhi	.L178
 2500 020c DFE813F0 		tbh	[pc, r3, lsl #1]
 2501              	.L180:
 2502 0210 1E01     		.2byte	(.L185-.L180)/2
 2503 0212 2701     		.2byte	(.L184-.L180)/2
 2504 0214 2F01     		.2byte	(.L183-.L180)/2
 2505 0216 1001     		.2byte	(.L182-.L180)/2
 2506 0218 FD00     		.2byte	(.L181-.L180)/2
 2507 021a E200     		.2byte	(.L179-.L180)/2
 2508              	.LVL225:
 2509              		.p2align 1
 2510              	.L167:
 106:src/console.c ****   case KEY_F1:
 2511              		.loc 2 106 3 is_stmt 0 view .LVU692
 2512              	.LBE116:
 2513              	.LBE132:
ARM GAS  /tmp/ccUw5X70.s 			page 70


 463:src/console.c ****       remapped = remap(c);
 2514              		.loc 2 463 5 is_stmt 1 view .LVU693
 463:src/console.c ****       remapped = remap(c);
 2515              		.loc 2 463 8 is_stmt 0 view .LVU694
 2516 021c 7FF422AF 		bne	.L151
 2517 0220 67E7     		b	.L170
 2518              	.L166:
 463:src/console.c ****       remapped = remap(c);
 2519              		.loc 2 463 5 is_stmt 1 view .LVU695
 464:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2520              		.loc 2 464 7 view .LVU696
 2521              	.LVL226:
 2522              	.LBB133:
  61:src/console.c **** 
 2523              		.loc 2 61 22 view .LVU697
 2524              	.LBB117:
  63:src/console.c **** 
 2525              		.loc 2 63 3 view .LVU698
   1:src/keytran.c ****     {K_RELEASE, -1},
 2526              		.loc 3 1 1 view .LVU699
  59:src/keytran.c ****     {K_RELEASE, -1},
 2527              		.loc 3 59 3 view .LVU700
 117:src/keytran.c ****     {K_RELEASE, -1},
 2528              		.loc 3 117 3 view .LVU701
 2529              		.loc 3 175 1 view .LVU702
  67:src/console.c **** 
 2530              		.loc 2 67 3 view .LVU703
  67:src/console.c **** 
 2531              		.loc 2 67 23 view .LVU704
  67:src/console.c **** 
 2532              		.loc 2 67 30 is_stmt 0 view .LVU705
 2533 0222 3E4B     		ldr	r3, .L242+112
 2534              	.LVL227:
 2535              	.L221:
  67:src/console.c **** 
 2536              		.loc 2 67 30 view .LVU706
 2537 0224 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2538              	.LVL228:
  67:src/console.c **** 
 2539              		.loc 2 67 30 view .LVU707
 2540 0228 93E80300 		ldm	r3, {r0, r1}
 2541 022c 0DF10809 		add	r9, sp, #8
 2542              	.LBE117:
 2543              	.LBE133:
 465:src/console.c **** 	set_menu ( remapped.shift );
 2544              		.loc 2 465 10 view .LVU708
 2545 0230 BAF12F0F 		cmp	r10, #47
 2546              	.LBB134:
 2547              	.LBB118:
  67:src/console.c **** 
 2548              		.loc 2 67 30 view .LVU709
 2549 0234 89E80300 		stm	r9, {r0, r1}
 2550 0238 0D46     		mov	r5, r1
 2551              	.LVL229:
  67:src/console.c **** 
 2552              		.loc 2 67 30 view .LVU710
 2553              	.LBE118:
ARM GAS  /tmp/ccUw5X70.s 			page 71


 2554              	.LBE134:
 465:src/console.c **** 	set_menu ( remapped.shift );
 2555              		.loc 2 465 7 is_stmt 1 view .LVU711
 465:src/console.c **** 	set_menu ( remapped.shift );
 2556              		.loc 2 465 10 is_stmt 0 view .LVU712
 2557 023a 7FF473AF 		bne	.L195
 2558              	.LVL230:
 2559              	.L227:
 466:src/console.c **** 	display_current_menu ();
 2560              		.loc 2 466 2 is_stmt 1 view .LVU713
 2561              	.LBB135:
 2562              	.LBI135:
   3:src/menu.c    ****   int m = current_menu;
 2563              		.loc 1 3 6 view .LVU714
 2564              	.LBB136:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2565              		.loc 1 4 3 view .LVU715
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2566              		.loc 1 4 7 is_stmt 0 view .LVU716
 2567 023e 3368     		ldr	r3, [r6]
 2568              	.LVL231:
   5:src/menu.c    ****     current_menu = 0;
 2569              		.loc 1 5 3 is_stmt 1 view .LVU717
   5:src/menu.c    ****     current_menu = 0;
 2570              		.loc 1 5 6 is_stmt 0 view .LVU718
 2571 0240 AB42     		cmp	r3, r5
 2572 0242 00F0A380 		beq	.L196
   8:src/menu.c    ****     current_menu = last_menu;
 2573              		.loc 1 8 8 is_stmt 1 view .LVU719
   8:src/menu.c    ****     current_menu = last_menu;
 2574              		.loc 1 8 11 is_stmt 0 view .LVU720
 2575 0246 6A1C     		adds	r2, r5, #1
 2576 0248 00F0A680 		beq	.L231
 2577              	.LVL232:
 2578              	.L197:
  12:src/menu.c    ****   }
 2579              		.loc 1 12 5 is_stmt 1 view .LVU721
 2580 024c 344A     		ldr	r2, .L242+116
  12:src/menu.c    ****   }
 2581              		.loc 1 12 18 is_stmt 0 view .LVU722
 2582 024e 3560     		str	r5, [r6]
 2583              	.LVL233:
 2584              	.L199:
  14:src/menu.c    **** }
 2585              		.loc 1 14 3 is_stmt 1 view .LVU723
 2586              	.LBE136:
 2587              	.LBE135:
 2588              	.LBB140:
 2589              	.LBB141:
  22:src/menu.c    **** }
 2590              		.loc 1 22 3 is_stmt 0 view .LVU724
 2591 0250 2846     		mov	r0, r5
 2592              	.LBE141:
 2593              	.LBE140:
 2594              	.LBB143:
 2595              	.LBB137:
  14:src/menu.c    **** }
ARM GAS  /tmp/ccUw5X70.s 			page 72


 2596              		.loc 1 14 13 view .LVU725
 2597 0252 1360     		str	r3, [r2]
 2598              	.LBE137:
 2599              	.LBE143:
 467:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 2600              		.loc 2 467 2 is_stmt 1 view .LVU726
 2601              	.LBB144:
 2602              	.LBI140:
  21:src/menu.c    ****   display_menu (current_menu);
 2603              		.loc 1 21 6 view .LVU727
 2604              	.LBB142:
  22:src/menu.c    **** }
 2605              		.loc 1 22 3 view .LVU728
 2606 0254 FFF7FEFF 		bl	display_menu
 2607              	.LVL234:
 2608              	.LBE142:
 2609              	.LBE144:
 468:src/console.c **** 	case SHIFT_F:
 2610              		.loc 2 468 2 view .LVU729
 468:src/console.c **** 	case SHIFT_F:
 2611              		.loc 2 468 10 is_stmt 0 view .LVU730
 2612 0258 FFF7FEFF 		bl	cur_shift
 2613              	.LVL235:
 468:src/console.c **** 	case SHIFT_F:
 2614              		.loc 2 468 2 view .LVU731
 2615 025c 0228     		cmp	r0, #2
 470:src/console.c **** 	  break;
 2616              		.loc 2 470 4 is_stmt 1 view .LVU732
 470:src/console.c **** 	  break;
 2617              		.loc 2 470 13 is_stmt 0 view .LVU733
 2618 025e 14BF     		ite	ne
 2619 0260 304B     		ldrne	r3, .L242+120
 473:src/console.c **** 	  break;
 2620              		.loc 2 473 4 is_stmt 1 view .LVU734
 473:src/console.c **** 	  break;
 2621              		.loc 2 473 13 is_stmt 0 view .LVU735
 2622 0262 314B     		ldreq	r3, .L242+124
 2623 0264 93E80300 		ldm	r3, {r0, r1}
 2624 0268 89E80300 		stm	r9, {r0, r1}
 2625 026c 0D46     		mov	r5, r1
 2626 026e 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2627              	.LVL236:
 474:src/console.c **** 	case SHIFT_H:
 2628              		.loc 2 474 4 is_stmt 1 view .LVU736
 2629 0272 57E7     		b	.L195
 2630              	.LVL237:
 2631              	.L225:
 2632              	.LBB145:
 2633              	.LBB119:
  73:src/console.c ****     // Make screenshot - allow to report errors
 2634              		.loc 2 73 5 view .LVU737
 2635 0274 2D4B     		ldr	r3, .L242+128
 2636 0276 41F23010 		movw	r0, #4400
 2637 027a 9847     		blx	r3
 2638              	.LVL238:
  73:src/console.c ****     // Make screenshot - allow to report errors
 2639              		.loc 2 73 30 view .LVU738
ARM GAS  /tmp/ccUw5X70.s 			page 73


 2640 027c 0A20     		movs	r0, #10
 2641 027e 2C4B     		ldr	r3, .L242+132
 2642 0280 9847     		blx	r3
 2643              	.LVL239:
  73:src/console.c ****     // Make screenshot - allow to report errors
 2644              		.loc 2 73 45 view .LVU739
 2645 0282 2C4B     		ldr	r3, .L242+136
 2646 0284 9847     		blx	r3
 2647              	.LVL240:
  75:src/console.c ****       // Was error just wait for confirmation
 2648              		.loc 2 75 5 view .LVU740
  75:src/console.c ****       // Was error just wait for confirmation
 2649              		.loc 2 75 10 is_stmt 0 view .LVU741
 2650 0286 2C4B     		ldr	r3, .L242+140
 2651 0288 0120     		movs	r0, #1
 2652 028a 9847     		blx	r3
 2653              	.LVL241:
  75:src/console.c ****       // Was error just wait for confirmation
 2654              		.loc 2 75 8 view .LVU742
 2655 028c 0228     		cmp	r0, #2
 2656 028e 01D1     		bne	.L171
  77:src/console.c ****     }
 2657              		.loc 2 77 7 is_stmt 1 view .LVU743
 2658 0290 2A4B     		ldr	r3, .L242+144
 2659 0292 9847     		blx	r3
 2660              	.LVL242:
 2661              	.L171:
  80:src/console.c ****     return no_key;
 2662              		.loc 2 80 5 view .LVU744
 2663 0294 254B     		ldr	r3, .L242+128
 2664 0296 42F26020 		movw	r0, #8800
 2665 029a 9847     		blx	r3
 2666              	.LVL243:
  80:src/console.c ****     return no_key;
 2667              		.loc 2 80 30 view .LVU745
 2668 029c 244B     		ldr	r3, .L242+132
 2669 029e 0A20     		movs	r0, #10
 2670 02a0 9847     		blx	r3
 2671              	.LVL244:
  80:src/console.c ****     return no_key;
 2672              		.loc 2 80 45 view .LVU746
 2673 02a2 244B     		ldr	r3, .L242+136
 2674 02a4 9847     		blx	r3
 2675              	.LVL245:
  81:src/console.c ****   }
 2676              		.loc 2 81 5 view .LVU747
  81:src/console.c ****   }
 2677              		.loc 2 81 12 is_stmt 0 view .LVU748
 2678 02a6 154B     		ldr	r3, .L242+80
 2679 02a8 BCE7     		b	.L221
 2680              	.L243:
 2681 02aa 00BF     		.align	2
 2682              	.L242:
 2683 02ac 00000000 		.word	StateWhileOn
 2684 02b0 00000000 		.word	DispMsg
 2685 02b4 00200010 		.word	268443648
 2686 02b8 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccUw5X70.s 			page 74


 2687 02bc 7D030008 		.word	134218621
 2688 02c0 31020008 		.word	134218289
 2689 02c4 00000000 		.word	JustDisplayed
 2690 02c8 19040008 		.word	134218777
 2691 02cc 19020008 		.word	134218265
 2692 02d0 91030008 		.word	134218641
 2693 02d4 E5020008 		.word	134218469
 2694 02d8 59020008 		.word	134218329
 2695 02dc 35020008 		.word	134218293
 2696 02e0 89030008 		.word	134218633
 2697 02e4 B9030008 		.word	134218681
 2698 02e8 B9040008 		.word	134218937
 2699 02ec 00000000 		.word	.LANCHOR4
 2700 02f0 00000000 		.word	.LANCHOR11
 2701 02f4 59030008 		.word	134218585
 2702 02f8 00000000 		.word	.LANCHOR15
 2703 02fc 00000000 		.word	.LANCHOR6
 2704 0300 01040008 		.word	134218753
 2705 0304 81030008 		.word	134218625
 2706 0308 00000000 		.word	Pause
 2707 030c F5030008 		.word	134218741
 2708 0310 55020008 		.word	134218325
 2709 0314 2D040008 		.word	134218797
 2710 0318 1D020008 		.word	134218269
 2711 031c 00000000 		.word	.LANCHOR16
 2712 0320 00000000 		.word	.LANCHOR2
 2713 0324 00000000 		.word	.LANCHOR13
 2714 0328 00000000 		.word	.LANCHOR14
 2715 032c F5020008 		.word	134218485
 2716 0330 05040008 		.word	134218757
 2717 0334 F9020008 		.word	134218489
 2718 0338 79030008 		.word	134218617
 2719 033c 99030008 		.word	134218649
 2720 0340 F9030008 		.word	134218745
 2721              	.LVL246:
 2722              	.L228:
  81:src/console.c ****   }
 2723              		.loc 2 81 12 view .LVU749
 2724              	.LBE119:
 2725              	.LBE145:
 489:src/console.c **** 	display_current_menu();
 2726              		.loc 2 489 2 is_stmt 1 view .LVU750
 489:src/console.c **** 	display_current_menu();
 2727              		.loc 2 489 13 is_stmt 0 view .LVU751
 2728 0344 8DF808A0 		strb	r10, [sp, #8]
 2729 0348 0395     		str	r5, [sp, #12]
 2730 034a 0DF10809 		add	r9, sp, #8
 2731 034e 6D46     		mov	r5, sp
 2732              	.LVL247:
 489:src/console.c **** 	display_current_menu();
 2733              		.loc 2 489 13 view .LVU752
 2734 0350 99E80600 		ldm	r9, {r1, r2}
 2735 0354 2846     		mov	r0, r5
 2736 0356 FFF7FEFF 		bl	do_multi
 2737              	.LVL248:
 2738 035a 95E80300 		ldm	r5, {r0, r1}
 2739 035e 89E80300 		stm	r9, {r0, r1}
ARM GAS  /tmp/ccUw5X70.s 			page 75


 2740              	.LVL249:
 489:src/console.c **** 	display_current_menu();
 2741              		.loc 2 489 13 view .LVU753
 2742 0362 9DF808A0 		ldrb	r10, [sp, #8]	@ zero_extendqisi2
 2743              	.LVL250:
 2744              	.LBB146:
 2745              	.LBB147:
  22:src/menu.c    **** }
 2746              		.loc 1 22 3 view .LVU754
 2747 0366 3068     		ldr	r0, [r6]
 2748              	.LBE147:
 2749              	.LBE146:
 489:src/console.c **** 	display_current_menu();
 2750              		.loc 2 489 13 view .LVU755
 2751 0368 039D     		ldr	r5, [sp, #12]
 2752              	.LVL251:
 490:src/console.c ****       }
 2753              		.loc 2 490 2 is_stmt 1 view .LVU756
 2754              	.LBB149:
 2755              	.LBI146:
  21:src/menu.c    ****   display_menu (current_menu);
 2756              		.loc 1 21 6 view .LVU757
 2757              	.LBB148:
  22:src/menu.c    **** }
 2758              		.loc 1 22 3 view .LVU758
 2759 036a FFF7FEFF 		bl	display_menu
 2760              	.LVL252:
  22:src/menu.c    **** }
 2761              		.loc 1 22 3 is_stmt 0 view .LVU759
 2762              	.LBE148:
 2763              	.LBE149:
 492:src/console.c ****       process_keycode_with_shift(remapped);
 2764              		.loc 2 492 7 is_stmt 1 view .LVU760
 492:src/console.c ****       process_keycode_with_shift(remapped);
 2765              		.loc 2 492 10 is_stmt 0 view .LVU761
 2766 036e BAF1320F 		cmp	r10, #50
 2767 0372 7FF4FBAE 		bne	.L223
 2768              	.LVL253:
 2769              	.L203:
 494:src/console.c ****     }
 495:src/console.c ****   }
 496:src/console.c ****   save_ram_file(0);
 2770              		.loc 2 496 3 is_stmt 1 view .LVU762
 2771 0376 0020     		movs	r0, #0
 497:src/console.c ****   return;
 498:src/console.c **** }
 2772              		.loc 2 498 1 is_stmt 0 view .LVU763
 2773 0378 04B0     		add	sp, sp, #16
 2774              		.cfi_remember_state
 2775              		.cfi_def_cfa_offset 32
 2776              		@ sp needed
 2777 037a BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2778              		.cfi_restore 14
 2779              		.cfi_restore 10
 2780              		.cfi_restore 9
 2781              		.cfi_restore 8
 2782              		.cfi_restore 7
ARM GAS  /tmp/ccUw5X70.s 			page 76


 2783              		.cfi_restore 6
 2784              		.cfi_restore 5
 2785              		.cfi_restore 4
 2786              		.cfi_def_cfa_offset 0
 2787              	.LVL254:
 496:src/console.c ****   return;
 2788              		.loc 2 496 3 view .LVU764
 2789 037e FFF7FEBF 		b	save_ram_file
 2790              	.LVL255:
 2791              	.L224:
 2792              		.cfi_restore_state
 2793              	.LBB150:
 2794              	.LBB120:
  69:src/console.c **** 
 2795              		.loc 2 69 16 is_stmt 1 view .LVU765
  69:src/console.c **** 
 2796              		.loc 2 69 23 is_stmt 0 view .LVU766
 2797 0382 864B     		ldr	r3, .L244
 2798 0384 4EE7     		b	.L221
 2799              	.LVL256:
 2800              	.L206:
  69:src/console.c **** 
 2801              		.loc 2 69 23 view .LVU767
 2802              	.LBE120:
 2803              	.LBE150:
 2804              	.LBB151:
 2805              	.LBB138:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2806              		.loc 1 4 7 view .LVU768
 2807 0386 1D46     		mov	r5, r3
 2808 0388 0DF10809 		add	r9, sp, #8
 2809              	.LVL257:
 2810              	.L196:
   6:src/menu.c    ****   }
 2811              		.loc 1 6 5 is_stmt 1 view .LVU769
   6:src/menu.c    ****   }
 2812              		.loc 1 6 18 is_stmt 0 view .LVU770
 2813 038c 0022     		movs	r2, #0
 2814 038e 2B46     		mov	r3, r5
 2815              	.LVL258:
   6:src/menu.c    ****   }
 2816              		.loc 1 6 18 view .LVU771
 2817 0390 3260     		str	r2, [r6]
 2818              	.LVL259:
   6:src/menu.c    ****   }
 2819              		.loc 1 6 18 view .LVU772
 2820 0392 1546     		mov	r5, r2
 2821 0394 824A     		ldr	r2, .L244+4
 2822 0396 5BE7     		b	.L199
 2823              	.LVL260:
 2824              	.L231:
   9:src/menu.c    ****   }
 2825              		.loc 1 9 5 is_stmt 1 view .LVU773
   9:src/menu.c    ****   }
 2826              		.loc 1 9 18 is_stmt 0 view .LVU774
 2827 0398 814A     		ldr	r2, .L244+4
 2828 039a 1568     		ldr	r5, [r2]
ARM GAS  /tmp/ccUw5X70.s 			page 77


 2829              	.LVL261:
   9:src/menu.c    ****   }
 2830              		.loc 1 9 18 view .LVU775
 2831 039c 3560     		str	r5, [r6]
 2832 039e 57E7     		b	.L199
 2833              	.LVL262:
 2834              	.L226:
   9:src/menu.c    ****   }
 2835              		.loc 1 9 18 view .LVU776
 2836              	.LBE138:
 2837              	.LBE151:
 2838              	.LBB152:
 2839              	.LBB121:
  87:src/console.c ****       case SHIFT_N:
 2840              		.loc 2 87 7 is_stmt 1 view .LVU777
  87:src/console.c ****       case SHIFT_N:
 2841              		.loc 2 87 15 is_stmt 0 view .LVU778
 2842 03a0 FFF7FEFF 		bl	cur_shift
 2843              	.LVL263:
  87:src/console.c ****       case SHIFT_N:
 2844              		.loc 2 87 7 view .LVU779
 2845 03a4 0328     		cmp	r0, #3
  87:src/console.c ****       case SHIFT_N:
 2846              		.loc 2 87 15 view .LVU780
 2847 03a6 0546     		mov	r5, r0
  87:src/console.c ****       case SHIFT_N:
 2848              		.loc 2 87 7 view .LVU781
 2849 03a8 00F2B280 		bhi	.L204
 2850 03ac 0128     		cmp	r0, #1
 2851 03ae 6CD8     		bhi	.L175
 2852 03b0 0028     		cmp	r0, #0
 2853 03b2 7ED0     		beq	.L232
  90:src/console.c ****       case SHIFT_F:
 2854              		.loc 2 90 2 is_stmt 1 view .LVU782
  92:src/console.c **** 	break;
 2855              		.loc 2 92 2 view .LVU783
  92:src/console.c **** 	break;
 2856              		.loc 2 92 23 is_stmt 0 view .LVU784
 2857 03b4 7B4B     		ldr	r3, .L244+8
 2858 03b6 93E80300 		ldm	r3, {r0, r1}
 2859 03ba 0DF10809 		add	r9, sp, #8
 2860 03be 89E80300 		stm	r9, {r0, r1}
 2861              	.LVL264:
  92:src/console.c **** 	break;
 2862              		.loc 2 92 23 view .LVU785
 2863              	.LBE121:
 2864              	.LBE152:
 465:src/console.c **** 	set_menu ( remapped.shift );
 2865              		.loc 2 465 7 is_stmt 1 view .LVU786
 481:src/console.c **** 	SET_ST(STAT_MENU);
 2866              		.loc 2 481 7 view .LVU787
 488:src/console.c **** 	remapped = do_multi (remapped);
 2867              		.loc 2 488 7 view .LVU788
 492:src/console.c ****       process_keycode_with_shift(remapped);
 2868              		.loc 2 492 7 view .LVU789
 2869              	.LBB153:
 2870              	.LBB122:
ARM GAS  /tmp/ccUw5X70.s 			page 78


  92:src/console.c **** 	break;
 2871              		.loc 2 92 23 is_stmt 0 view .LVU790
 2872 03c2 0025     		movs	r5, #0
 2873 03c4 4FF02A0A 		mov	r10, #42
 2874              	.LVL265:
  92:src/console.c **** 	break;
 2875              		.loc 2 92 23 view .LVU791
 2876 03c8 D2E6     		b	.L174
 2877              	.LVL266:
 2878              	.L190:
 121:src/console.c ****   case KEY_F6:
 2879              		.loc 2 121 5 is_stmt 1 view .LVU792
 121:src/console.c ****   case KEY_F6:
 2880              		.loc 2 121 9 is_stmt 0 view .LVU793
 2881 03ca FFF7FEFF 		bl	cur_shift
 2882              	.LVL267:
 121:src/console.c ****   case KEY_F6:
 2883              		.loc 2 121 8 view .LVU794
 2884 03ce 0128     		cmp	r0, #1
 2885 03d0 00F0B480 		beq	.L233
 2886              	.L179:
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2887              		.loc 2 123 5 is_stmt 1 view .LVU795
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2888              		.loc 2 123 9 is_stmt 0 view .LVU796
 2889 03d4 FFF7FEFF 		bl	cur_shift
 2890              	.LVL268:
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2891              		.loc 2 123 8 view .LVU797
 2892 03d8 0028     		cmp	r0, #0
 2893 03da 58D1     		bne	.L191
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2894              		.loc 2 123 33 is_stmt 1 view .LVU798
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2895              		.loc 2 123 67 is_stmt 0 view .LVU799
 2896 03dc 3168     		ldr	r1, [r6]
 2897 03de 724A     		ldr	r2, .L244+12
 2898 03e0 D023     		movs	r3, #208
 2899 03e2 03FB01F3 		mul	r3, r3, r1
 2900 03e6 D018     		adds	r0, r2, r3
 2901 03e8 D0E92C01 		ldrd	r0, r1, [r0, #176]
 2902 03ec B033     		adds	r3, r3, #176
 2903              	.L220:
 2904 03ee 0DF10809 		add	r9, sp, #8
 2905 03f2 12F803A0 		ldrb	r10, [r2, r3]	@ zero_extendqisi2
 2906              	.LVL269:
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2907              		.loc 2 123 67 view .LVU800
 2908 03f6 89E80300 		stm	r9, {r0, r1}
 2909 03fa 1344     		add	r3, r3, r2
 2910 03fc 5D68     		ldr	r5, [r3, #4]
 2911              	.LVL270:
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2912              		.loc 2 123 67 view .LVU801
 2913 03fe 8DE6     		b	.L169
 2914              	.LVL271:
 2915              	.L189:
ARM GAS  /tmp/ccUw5X70.s 			page 79


 118:src/console.c ****   case KEY_F5:
 2916              		.loc 2 118 5 is_stmt 1 view .LVU802
 118:src/console.c ****   case KEY_F5:
 2917              		.loc 2 118 9 is_stmt 0 view .LVU803
 2918 0400 FFF7FEFF 		bl	cur_shift
 2919              	.LVL272:
 118:src/console.c ****   case KEY_F5:
 2920              		.loc 2 118 8 view .LVU804
 2921 0404 0128     		cmp	r0, #1
 2922 0406 00F08580 		beq	.L234
 2923              	.L181:
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2924              		.loc 2 120 5 is_stmt 1 view .LVU805
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2925              		.loc 2 120 9 is_stmt 0 view .LVU806
 2926 040a FFF7FEFF 		bl	cur_shift
 2927              	.LVL273:
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2928              		.loc 2 120 8 view .LVU807
 2929 040e 0028     		cmp	r0, #0
 2930 0410 DBD1     		bne	.L190
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2931              		.loc 2 120 33 is_stmt 1 view .LVU808
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2932              		.loc 2 120 67 is_stmt 0 view .LVU809
 2933 0412 3168     		ldr	r1, [r6]
 2934 0414 644A     		ldr	r2, .L244+12
 2935 0416 D023     		movs	r3, #208
 2936 0418 03FB01F3 		mul	r3, r3, r1
 2937 041c D018     		adds	r0, r2, r3
 2938 041e D0E92401 		ldrd	r0, r1, [r0, #144]
 2939 0422 9033     		adds	r3, r3, #144
 2940 0424 E3E7     		b	.L220
 2941              	.L188:
 115:src/console.c ****   case KEY_F4:
 2942              		.loc 2 115 5 is_stmt 1 view .LVU810
 115:src/console.c ****   case KEY_F4:
 2943              		.loc 2 115 9 is_stmt 0 view .LVU811
 2944 0426 FFF7FEFF 		bl	cur_shift
 2945              	.LVL274:
 115:src/console.c ****   case KEY_F4:
 2946              		.loc 2 115 8 view .LVU812
 2947 042a 0128     		cmp	r0, #1
 2948 042c 00F09080 		beq	.L235
 2949              	.L182:
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2950              		.loc 2 117 5 is_stmt 1 view .LVU813
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2951              		.loc 2 117 9 is_stmt 0 view .LVU814
 2952 0430 FFF7FEFF 		bl	cur_shift
 2953              	.LVL275:
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2954              		.loc 2 117 8 view .LVU815
 2955 0434 0028     		cmp	r0, #0
 2956 0436 E3D1     		bne	.L189
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2957              		.loc 2 117 33 is_stmt 1 view .LVU816
ARM GAS  /tmp/ccUw5X70.s 			page 80


 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2958              		.loc 2 117 67 is_stmt 0 view .LVU817
 2959 0438 3168     		ldr	r1, [r6]
 2960 043a 5B4A     		ldr	r2, .L244+12
 2961 043c D023     		movs	r3, #208
 2962 043e 03FB01F3 		mul	r3, r3, r1
 2963 0442 D018     		adds	r0, r2, r3
 2964 0444 D0E91C01 		ldrd	r0, r1, [r0, #112]
 2965 0448 7033     		adds	r3, r3, #112
 2966 044a D0E7     		b	.L220
 2967              	.L185:
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2968              		.loc 2 108 5 is_stmt 1 view .LVU818
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2969              		.loc 2 108 9 is_stmt 0 view .LVU819
 2970 044c FFF7FEFF 		bl	cur_shift
 2971              	.LVL276:
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2972              		.loc 2 108 8 view .LVU820
 2973 0450 0028     		cmp	r0, #0
 2974 0452 42D0     		beq	.L236
 109:src/console.c ****   case KEY_F2:
 2975              		.loc 2 109 5 is_stmt 1 view .LVU821
 109:src/console.c ****   case KEY_F2:
 2976              		.loc 2 109 9 is_stmt 0 view .LVU822
 2977 0454 FFF7FEFF 		bl	cur_shift
 2978              	.LVL277:
 109:src/console.c ****   case KEY_F2:
 2979              		.loc 2 109 8 view .LVU823
 2980 0458 0128     		cmp	r0, #1
 2981 045a 00F09580 		beq	.L237
 2982              	.L184:
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2983              		.loc 2 111 5 is_stmt 1 view .LVU824
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2984              		.loc 2 111 9 is_stmt 0 view .LVU825
 2985 045e FFF7FEFF 		bl	cur_shift
 2986              	.LVL278:
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2987              		.loc 2 111 8 view .LVU826
 2988 0462 80B3     		cbz	r0, .L238
 112:src/console.c ****   case KEY_F3:
 2989              		.loc 2 112 5 is_stmt 1 view .LVU827
 112:src/console.c ****   case KEY_F3:
 2990              		.loc 2 112 9 is_stmt 0 view .LVU828
 2991 0464 FFF7FEFF 		bl	cur_shift
 2992              	.LVL279:
 112:src/console.c ****   case KEY_F3:
 2993              		.loc 2 112 8 view .LVU829
 2994 0468 0128     		cmp	r0, #1
 2995 046a 00F08380 		beq	.L239
 2996              	.L183:
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2997              		.loc 2 114 5 is_stmt 1 view .LVU830
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2998              		.loc 2 114 9 is_stmt 0 view .LVU831
 2999 046e FFF7FEFF 		bl	cur_shift
ARM GAS  /tmp/ccUw5X70.s 			page 81


 3000              	.LVL280:
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3001              		.loc 2 114 8 view .LVU832
 3002 0472 0028     		cmp	r0, #0
 3003 0474 D7D1     		bne	.L188
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3004              		.loc 2 114 33 is_stmt 1 view .LVU833
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3005              		.loc 2 114 67 is_stmt 0 view .LVU834
 3006 0476 3168     		ldr	r1, [r6]
 3007 0478 4B4A     		ldr	r2, .L244+12
 3008 047a D023     		movs	r3, #208
 3009 047c 03FB01F3 		mul	r3, r3, r1
 3010 0480 D018     		adds	r0, r2, r3
 3011 0482 D0E91401 		ldrd	r0, r1, [r0, #80]
 3012 0486 5033     		adds	r3, r3, #80
 3013 0488 B1E7     		b	.L220
 3014              	.L175:
  93:src/console.c ****       case SHIFT_G:
 3015              		.loc 2 93 2 is_stmt 1 view .LVU835
  95:src/console.c **** 	break;
 3016              		.loc 2 95 2 view .LVU836
  95:src/console.c **** 	break;
 3017              		.loc 2 95 9 is_stmt 0 view .LVU837
 3018 048a 484B     		ldr	r3, .L244+16
 3019 048c CAE6     		b	.L221
 3020              	.L191:
 124:src/console.c ****   }
 3021              		.loc 2 124 5 is_stmt 1 view .LVU838
 124:src/console.c ****   }
 3022              		.loc 2 124 9 is_stmt 0 view .LVU839
 3023 048e FFF7FEFF 		bl	cur_shift
 3024              	.LVL281:
 124:src/console.c ****   }
 3025              		.loc 2 124 8 view .LVU840
 3026 0492 0128     		cmp	r0, #1
 3027 0494 48D0     		beq	.L240
 3028              	.L178:
 127:src/console.c ****   case SHIFT_N:    
 3029              		.loc 2 127 3 is_stmt 1 view .LVU841
 127:src/console.c ****   case SHIFT_N:    
 3030              		.loc 2 127 11 is_stmt 0 view .LVU842
 3031 0496 FFF7FEFF 		bl	cur_shift
 3032              	.LVL282:
 127:src/console.c ****   case SHIFT_N:    
 3033              		.loc 2 127 3 view .LVU843
 3034 049a 0128     		cmp	r0, #1
 3035 049c 27D0     		beq	.L192
 3036 049e 0228     		cmp	r0, #2
 3037 04a0 29D0     		beq	.L193
 3038 04a2 30B3     		cbz	r0, .L194
  63:src/console.c **** 
 3039              		.loc 2 63 41 view .LVU844
 3040 04a4 5FFA8AFA 		uxtb	r10, r10
 3041              	.LVL283:
  63:src/console.c **** 
 3042              		.loc 2 63 41 view .LVU845
ARM GAS  /tmp/ccUw5X70.s 			page 82


 3043              	.LBE122:
 3044              	.LBE153:
 465:src/console.c **** 	set_menu ( remapped.shift );
 3045              		.loc 2 465 7 is_stmt 1 view .LVU846
 465:src/console.c **** 	set_menu ( remapped.shift );
 3046              		.loc 2 465 10 is_stmt 0 view .LVU847
 3047 04a8 BAF12F0F 		cmp	r10, #47
 3048 04ac 5AD0     		beq	.L241
 3049              	.LBB154:
 3050              	.LBB123:
 138:src/console.c ****   }
 3051              		.loc 2 138 12 view .LVU848
 3052 04ae 0025     		movs	r5, #0
 3053 04b0 38E6     		b	.L195
 3054              	.LVL284:
 3055              	.L232:
  89:src/console.c **** 	break;
 3056              		.loc 2 89 2 is_stmt 1 view .LVU849
  89:src/console.c **** 	break;
 3057              		.loc 2 89 21 is_stmt 0 view .LVU850
 3058 04b2 3F4A     		ldr	r2, .L244+20
 3059 04b4 92E80300 		ldm	r2, {r0, r1}
 3060 04b8 0DF10809 		add	r9, sp, #8
 3061 04bc 89E80300 		stm	r9, {r0, r1}
 3062              	.LVL285:
  89:src/console.c **** 	break;
 3063              		.loc 2 89 21 view .LVU851
 3064              	.LBE123:
 3065              	.LBE154:
 465:src/console.c **** 	set_menu ( remapped.shift );
 3066              		.loc 2 465 7 is_stmt 1 view .LVU852
 481:src/console.c **** 	SET_ST(STAT_MENU);
 3067              		.loc 2 481 7 view .LVU853
 488:src/console.c **** 	remapped = do_multi (remapped);
 3068              		.loc 2 488 7 view .LVU854
 492:src/console.c ****       process_keycode_with_shift(remapped);
 3069              		.loc 2 492 7 view .LVU855
 3070              	.LBB155:
 3071              	.LBB124:
  89:src/console.c **** 	break;
 3072              		.loc 2 89 21 is_stmt 0 view .LVU856
 3073 04c0 4FF0290A 		mov	r10, #41
 3074              	.LVL286:
  89:src/console.c **** 	break;
 3075              		.loc 2 89 21 view .LVU857
 3076 04c4 54E6     		b	.L174
 3077              	.LVL287:
 3078              	.L238:
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3079              		.loc 2 111 33 is_stmt 1 view .LVU858
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3080              		.loc 2 111 67 is_stmt 0 view .LVU859
 3081 04c6 3168     		ldr	r1, [r6]
 3082 04c8 374A     		ldr	r2, .L244+12
 3083 04ca D023     		movs	r3, #208
 3084 04cc 03FB01F3 		mul	r3, r3, r1
 3085 04d0 D018     		adds	r0, r2, r3
ARM GAS  /tmp/ccUw5X70.s 			page 83


 3086 04d2 D0E90C01 		ldrd	r0, r1, [r0, #48]
 3087 04d6 3033     		adds	r3, r3, #48
 3088 04d8 89E7     		b	.L220
 3089              	.L236:
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3090              		.loc 2 108 33 is_stmt 1 view .LVU860
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3091              		.loc 2 108 67 is_stmt 0 view .LVU861
 3092 04da 3168     		ldr	r1, [r6]
 3093 04dc 324A     		ldr	r2, .L244+12
 3094 04de D023     		movs	r3, #208
 3095 04e0 03FB01F3 		mul	r3, r3, r1
 3096 04e4 D018     		adds	r0, r2, r3
 3097 04e6 D0E90401 		ldrd	r0, r1, [r0, #16]
 3098 04ea 1033     		adds	r3, r3, #16
 3099 04ec 7FE7     		b	.L220
 3100              	.L192:
 130:src/console.c ****   case SHIFT_F:
 3101              		.loc 2 130 5 is_stmt 1 view .LVU862
 132:src/console.c ****     break;
 3102              		.loc 2 132 5 view .LVU863
 132:src/console.c ****     break;
 3103              		.loc 2 132 26 is_stmt 0 view .LVU864
 3104 04ee 314B     		ldr	r3, .L244+24
 3105 04f0 09E6     		b	.L222
 3106              	.L194:
 129:src/console.c ****     break;
 3107              		.loc 2 129 5 is_stmt 1 view .LVU865
 129:src/console.c ****     break;
 3108              		.loc 2 129 24 is_stmt 0 view .LVU866
 3109 04f2 314B     		ldr	r3, .L244+28
 3110 04f4 07E6     		b	.L222
 3111              	.L193:
 133:src/console.c ****   case SHIFT_G:
 3112              		.loc 2 133 5 is_stmt 1 view .LVU867
 135:src/console.c ****     break;
 3113              		.loc 2 135 5 view .LVU868
 135:src/console.c ****     break;
 3114              		.loc 2 135 26 is_stmt 0 view .LVU869
 3115 04f6 314B     		ldr	r3, .L244+32
 3116 04f8 03EBCA02 		add	r2, r3, r10, lsl #3
 3117 04fc 92E80300 		ldm	r2, {r0, r1}
 3118 0500 0DF10809 		add	r9, sp, #8
 3119 0504 89E80300 		stm	r9, {r0, r1}
 3120 0508 13F83AA0 		ldrb	r10, [r3, r10, lsl #3]	@ zero_extendqisi2
 3121              	.LVL288:
 135:src/console.c ****     break;
 3122              		.loc 2 135 26 view .LVU870
 3123 050c 0D46     		mov	r5, r1
 3124              	.LVL289:
 135:src/console.c ****     break;
 3125              		.loc 2 135 26 view .LVU871
 3126 050e 05E6     		b	.L169
 3127              	.LVL290:
 3128              	.L204:
  87:src/console.c ****       case SHIFT_N:
 3129              		.loc 2 87 7 view .LVU872
ARM GAS  /tmp/ccUw5X70.s 			page 84


 3130 0510 0025     		movs	r5, #0
 3131 0512 2BE6     		b	.L223
 3132              	.L234:
 118:src/console.c ****   case KEY_F5:
 3133              		.loc 2 118 33 is_stmt 1 view .LVU873
 118:src/console.c ****   case KEY_F5:
 3134              		.loc 2 118 67 is_stmt 0 view .LVU874
 3135 0514 3168     		ldr	r1, [r6]
 3136 0516 244A     		ldr	r2, .L244+12
 3137 0518 D023     		movs	r3, #208
 3138 051a 03FB01F3 		mul	r3, r3, r1
 3139 051e D018     		adds	r0, r2, r3
 3140 0520 D0E91E01 		ldrd	r0, r1, [r0, #120]
 3141 0524 7833     		adds	r3, r3, #120
 3142 0526 62E7     		b	.L220
 3143              	.L240:
 124:src/console.c ****   }
 3144              		.loc 2 124 33 is_stmt 1 view .LVU875
 124:src/console.c ****   }
 3145              		.loc 2 124 67 is_stmt 0 view .LVU876
 3146 0528 3168     		ldr	r1, [r6]
 3147 052a 1F4A     		ldr	r2, .L244+12
 3148 052c D023     		movs	r3, #208
 3149 052e 03FB01F3 		mul	r3, r3, r1
 3150 0532 D018     		adds	r0, r2, r3
 3151 0534 D0E92E01 		ldrd	r0, r1, [r0, #184]
 3152 0538 B833     		adds	r3, r3, #184
 3153 053a 58E7     		b	.L220
 3154              	.L233:
 121:src/console.c ****   case KEY_F6:
 3155              		.loc 2 121 33 is_stmt 1 view .LVU877
 121:src/console.c ****   case KEY_F6:
 3156              		.loc 2 121 67 is_stmt 0 view .LVU878
 3157 053c 3168     		ldr	r1, [r6]
 3158 053e 1A4A     		ldr	r2, .L244+12
 3159 0540 D023     		movs	r3, #208
 3160 0542 03FB01F3 		mul	r3, r3, r1
 3161 0546 D018     		adds	r0, r2, r3
 3162 0548 D0E92601 		ldrd	r0, r1, [r0, #152]
 3163 054c 9833     		adds	r3, r3, #152
 3164 054e 4EE7     		b	.L220
 3165              	.L235:
 115:src/console.c ****   case KEY_F4:
 3166              		.loc 2 115 33 is_stmt 1 view .LVU879
 115:src/console.c ****   case KEY_F4:
 3167              		.loc 2 115 67 is_stmt 0 view .LVU880
 3168 0550 3168     		ldr	r1, [r6]
 3169 0552 154A     		ldr	r2, .L244+12
 3170 0554 D023     		movs	r3, #208
 3171 0556 03FB01F3 		mul	r3, r3, r1
 3172 055a D018     		adds	r0, r2, r3
 3173 055c D0E91601 		ldrd	r0, r1, [r0, #88]
 3174 0560 5833     		adds	r3, r3, #88
 3175 0562 44E7     		b	.L220
 3176              	.LVL291:
 3177              	.L241:
 115:src/console.c ****   case KEY_F4:
ARM GAS  /tmp/ccUw5X70.s 			page 85


 3178              		.loc 2 115 67 view .LVU881
 3179              	.LBE124:
 3180              	.LBE155:
 466:src/console.c **** 	display_current_menu ();
 3181              		.loc 2 466 2 is_stmt 1 view .LVU882
 3182              	.LBB156:
   3:src/menu.c    ****   int m = current_menu;
 3183              		.loc 1 3 6 view .LVU883
 3184              	.LBB139:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3185              		.loc 1 4 3 view .LVU884
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3186              		.loc 1 4 7 is_stmt 0 view .LVU885
 3187 0564 3368     		ldr	r3, [r6]
 3188              	.LVL292:
   5:src/menu.c    ****     current_menu = 0;
 3189              		.loc 1 5 3 is_stmt 1 view .LVU886
   5:src/menu.c    ****     current_menu = 0;
 3190              		.loc 1 5 6 is_stmt 0 view .LVU887
 3191 0566 002B     		cmp	r3, #0
 3192 0568 3FF40DAF 		beq	.L206
 3193              	.LBE139:
 3194              	.LBE156:
 3195              	.LBB157:
 3196              	.LBB125:
 138:src/console.c ****   }
 3197              		.loc 2 138 12 view .LVU888
 3198 056c 0025     		movs	r5, #0
 3199 056e 0DF10809 		add	r9, sp, #8
 3200 0572 6BE6     		b	.L197
 3201              	.LVL293:
 3202              	.L239:
 112:src/console.c ****   case KEY_F3:
 3203              		.loc 2 112 33 is_stmt 1 view .LVU889
 112:src/console.c ****   case KEY_F3:
 3204              		.loc 2 112 67 is_stmt 0 view .LVU890
 3205 0574 3168     		ldr	r1, [r6]
 3206 0576 0C4A     		ldr	r2, .L244+12
 3207 0578 D023     		movs	r3, #208
 3208 057a 03FB01F3 		mul	r3, r3, r1
 3209 057e D018     		adds	r0, r2, r3
 3210 0580 D0E90E01 		ldrd	r0, r1, [r0, #56]
 3211 0584 3833     		adds	r3, r3, #56
 3212 0586 32E7     		b	.L220
 3213              	.L237:
 109:src/console.c ****   case KEY_F2:
 3214              		.loc 2 109 33 is_stmt 1 view .LVU891
 109:src/console.c ****   case KEY_F2:
 3215              		.loc 2 109 67 is_stmt 0 view .LVU892
 3216 0588 3168     		ldr	r1, [r6]
 3217 058a 074A     		ldr	r2, .L244+12
 3218 058c D023     		movs	r3, #208
 3219 058e 03FB01F3 		mul	r3, r3, r1
 3220 0592 D018     		adds	r0, r2, r3
 3221 0594 D0E90601 		ldrd	r0, r1, [r0, #24]
 3222 0598 1833     		adds	r3, r3, #24
 3223 059a 28E7     		b	.L220
ARM GAS  /tmp/ccUw5X70.s 			page 86


 3224              	.L245:
 3225              		.align	2
 3226              	.L244:
 3227 059c 00000000 		.word	.LANCHOR7
 3228 05a0 00000000 		.word	.LANCHOR2
 3229 05a4 E0000000 		.word	.LANCHOR9+224
 3230 05a8 00000000 		.word	.LANCHOR3
 3231 05ac 00000000 		.word	.LANCHOR10
 3232 05b0 E0000000 		.word	.LANCHOR8+224
 3233 05b4 00000000 		.word	.LANCHOR9
 3234 05b8 00000000 		.word	.LANCHOR8
 3235 05bc 00000000 		.word	.LANCHOR12
 3236              	.LBE125:
 3237              	.LBE157:
 3238              		.cfi_endproc
 3239              	.LFE24:
 3241              		.global	n_p
 3242              		.comm	print_string,22,4
 3243              		.global	spaces
 3244              		.global	release
 3245              		.global	h_shift
 3246              		.global	g_shift
 3247              		.global	f_shift
 3248              		.global	heartbeat
 3249              		.global	no_key
 3250              		.global	MID_MENU
 3251              		.section	.rodata.str1.4,"aMS",%progbits,1
 3252              		.align	2
 3253              	.LC3:
 3254 0000 53797374 		.ascii	"System!\000"
 3254      656D2100 
 3255              		.global	mid_menu
 3256              		.section	.bss.current_menu,"aw",%nobits
 3257              		.align	2
 3258              		.set	.LANCHOR1,. + 0
 3261              	current_menu:
 3262 0000 00000000 		.space	4
 3263              		.section	.bss.last_menu,"aw",%nobits
 3264              		.align	2
 3265              		.set	.LANCHOR2,. + 0
 3268              	last_menu:
 3269 0000 00000000 		.space	4
 3270              		.section	.bss.mdots,"aw",%nobits
 3271              		.align	2
 3272              		.set	.LANCHOR0,. + 0
 3275              	mdots:
 3276 0000 00000000 		.space	400
 3276      00000000 
 3276      00000000 
 3276      00000000 
 3276      00000000 
 3277              		.section	.bss.n_p,"aw",%nobits
 3278              		.align	2
 3281              	n_p:
 3282 0000 00000000 		.space	4
 3283              		.section	.bss.start_ticks,"aw",%nobits
 3284              		.align	2
ARM GAS  /tmp/ccUw5X70.s 			page 87


 3285              		.set	.LANCHOR4,. + 0
 3288              	start_ticks:
 3289 0000 00000000 		.space	4
 3290              		.section	.data.f_shift,"aw"
 3291              		.align	2
 3292              		.set	.LANCHOR13,. + 0
 3295              	f_shift:
 3296 0000 29       		.byte	41
 3297 0001 000000   		.space	3
 3298 0004 FFFFFFFF 		.word	-1
 3299              		.section	.data.g_shift,"aw"
 3300              		.align	2
 3301              		.set	.LANCHOR14,. + 0
 3304              	g_shift:
 3305 0000 2A       		.byte	42
 3306 0001 000000   		.space	3
 3307 0004 FFFFFFFF 		.word	-1
 3308              		.section	.data.h_shift,"aw"
 3309              		.align	2
 3310              		.set	.LANCHOR10,. + 0
 3313              	h_shift:
 3314 0000 2B       		.byte	43
 3315 0001 000000   		.space	3
 3316 0004 FFFFFFFF 		.word	-1
 3317              		.section	.data.heartbeat,"aw"
 3318              		.align	2
 3319              		.set	.LANCHOR16,. + 0
 3322              	heartbeat:
 3323 0000 62       		.byte	98
 3324 0001 000000   		.space	3
 3325 0004 FFFFFFFF 		.word	-1
 3326              		.section	.data.no_key,"aw"
 3327              		.align	2
 3328              		.set	.LANCHOR6,. + 0
 3331              	no_key:
 3332 0000 2E       		.byte	46
 3333 0001 000000   		.space	3
 3334 0004 00000000 		.word	0
 3335              		.section	.data.release,"aw"
 3336              		.align	2
 3337              		.set	.LANCHOR7,. + 0
 3340              	release:
 3341 0000 63       		.byte	99
 3342 0001 000000   		.space	3
 3343 0004 FFFFFFFF 		.word	-1
 3344              		.section	.data.spaces,"aw"
 3345              		.align	2
 3346              		.set	.LANCHOR5,. + 0
 3349              	spaces:
 3350 0000 20202020 		.ascii	"                     \000"
 3350      20202020 
 3350      20202020 
 3350      20202020 
 3350      20202020 
 3351              		.section	.rodata.MID_MENU,"a"
 3352              		.align	2
 3353              		.set	.LANCHOR15,. + 0
ARM GAS  /tmp/ccUw5X70.s 			page 88


 3356              	MID_MENU:
 3357 0000 00000000 		.word	.LC3
 3358 0004 00000000 		.word	mid_menu
 3359 0008 00000000 		.word	0
 3360 000c 00000000 		.word	0
 3361              		.section	.rodata.Menus,"a"
 3362              		.align	2
 3363              		.set	.LANCHOR3,. + 0
 3366              	Menus:
 3367 0000 426C616E 		.ascii	"Blank\000"
 3367      6B00
 3368 0006 00000000 		.space	9
 3368      00000000 
 3368      00
 3369 000f 00       		.space	1
 3370 0010 2E       		.byte	46
 3371 0011 000000   		.space	3
 3372 0014 FFFFFFFF 		.word	-1
 3373 0018 2E       		.byte	46
 3374 0019 000000   		.space	3
 3375 001c FFFFFFFF 		.word	-1
 3376 0020 00       		.ascii	"\000"
 3377 0021 00000000 		.space	7
 3377      000000
 3378 0028 00       		.ascii	"\000"
 3379 0029 00000000 		.space	7
 3379      000000
 3380 0030 2E       		.byte	46
 3381 0031 000000   		.space	3
 3382 0034 FFFFFFFF 		.word	-1
 3383 0038 2E       		.byte	46
 3384 0039 000000   		.space	3
 3385 003c FFFFFFFF 		.word	-1
 3386 0040 00       		.ascii	"\000"
 3387 0041 00000000 		.space	7
 3387      000000
 3388 0048 00       		.ascii	"\000"
 3389 0049 00000000 		.space	7
 3389      000000
 3390 0050 2E       		.byte	46
 3391 0051 000000   		.space	3
 3392 0054 FFFFFFFF 		.word	-1
 3393 0058 2E       		.byte	46
 3394 0059 000000   		.space	3
 3395 005c FFFFFFFF 		.word	-1
 3396 0060 00       		.ascii	"\000"
 3397 0061 00000000 		.space	7
 3397      000000
 3398 0068 00       		.ascii	"\000"
 3399 0069 00000000 		.space	7
 3399      000000
 3400 0070 2E       		.byte	46
 3401 0071 000000   		.space	3
 3402 0074 FFFFFFFF 		.word	-1
 3403 0078 2E       		.byte	46
 3404 0079 000000   		.space	3
 3405 007c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccUw5X70.s 			page 89


 3406 0080 00       		.ascii	"\000"
 3407 0081 00000000 		.space	7
 3407      000000
 3408 0088 00       		.ascii	"\000"
 3409 0089 00000000 		.space	7
 3409      000000
 3410 0090 2C       		.byte	44
 3411 0091 000000   		.space	3
 3412 0094 FFFFFFFF 		.word	-1
 3413 0098 2E       		.byte	46
 3414 0099 000000   		.space	3
 3415 009c FFFFFFFF 		.word	-1
 3416 00a0 2D2D0D00 		.ascii	"--\015\000"
 3417 00a4 00000000 		.space	4
 3418 00a8 00       		.ascii	"\000"
 3419 00a9 00000000 		.space	7
 3419      000000
 3420 00b0 2D       		.byte	45
 3421 00b1 000000   		.space	3
 3422 00b4 FFFFFFFF 		.word	-1
 3423 00b8 2E       		.byte	46
 3424 00b9 000000   		.space	3
 3425 00bc FFFFFFFF 		.word	-1
 3426 00c0 43505800 		.ascii	"CPX\000"
 3427 00c4 00000000 		.space	4
 3428 00c8 00       		.ascii	"\000"
 3429 00c9 00000000 		.space	7
 3429      000000
 3430 00d0 436C6561 		.ascii	"Clear\000"
 3430      7200
 3431 00d6 00000000 		.space	9
 3431      00000000 
 3431      00
 3432 00df 00       		.space	1
 3433 00e0 10       		.byte	16
 3434 00e1 000000   		.space	3
 3435 00e4 01000000 		.word	1
 3436 00e8 2E       		.byte	46
 3437 00e9 000000   		.space	3
 3438 00ec FFFFFFFF 		.word	-1
 3439 00f0 434C5072 		.ascii	"CLProg\000"
 3439      6F6700
 3440 00f7 00       		.space	1
 3441 00f8 00       		.ascii	"\000"
 3442 00f9 00000000 		.space	7
 3442      000000
 3443 0100 10       		.byte	16
 3444 0101 000000   		.space	3
 3445 0104 02000000 		.word	2
 3446 0108 2E       		.byte	46
 3447 0109 000000   		.space	3
 3448 010c FFFFFFFF 		.word	-1
 3449 0110 434C9100 		.ascii	"CL\221\000"
 3450 0114 00000000 		.space	4
 3451 0118 00       		.ascii	"\000"
 3452 0119 00000000 		.space	7
 3452      000000
ARM GAS  /tmp/ccUw5X70.s 			page 90


 3453 0120 10       		.byte	16
 3454 0121 000000   		.space	3
 3455 0124 03000000 		.word	3
 3456 0128 2E       		.byte	46
 3457 0129 000000   		.space	3
 3458 012c FFFFFFFF 		.word	-1
 3459 0130 434C2058 		.ascii	"CL X\000"
 3459      00
 3460 0135 000000   		.space	3
 3461 0138 00       		.ascii	"\000"
 3462 0139 00000000 		.space	7
 3462      000000
 3463 0140 2E       		.byte	46
 3464 0141 000000   		.space	3
 3465 0144 FFFFFFFF 		.word	-1
 3466 0148 2E       		.byte	46
 3467 0149 000000   		.space	3
 3468 014c FFFFFFFF 		.word	-1
 3469 0150 00       		.ascii	"\000"
 3470 0151 00000000 		.space	7
 3470      000000
 3471 0158 00       		.ascii	"\000"
 3472 0159 00000000 		.space	7
 3472      000000
 3473 0160 2C       		.byte	44
 3474 0161 000000   		.space	3
 3475 0164 FFFFFFFF 		.word	-1
 3476 0168 2E       		.byte	46
 3477 0169 000000   		.space	3
 3478 016c FFFFFFFF 		.word	-1
 3479 0170 2D2D0D00 		.ascii	"--\015\000"
 3480 0174 00000000 		.space	4
 3481 0178 00       		.ascii	"\000"
 3482 0179 00000000 		.space	7
 3482      000000
 3483 0180 2D       		.byte	45
 3484 0181 000000   		.space	3
 3485 0184 FFFFFFFF 		.word	-1
 3486 0188 2E       		.byte	46
 3487 0189 000000   		.space	3
 3488 018c FFFFFFFF 		.word	-1
 3489 0190 43505800 		.ascii	"CPX\000"
 3490 0194 00000000 		.space	4
 3491 0198 00       		.ascii	"\000"
 3492 0199 00000000 		.space	7
 3492      000000
 3493 01a0 44495350 		.ascii	"DISP\000"
 3493      00
 3494 01a5 00000000 		.space	10
 3494      00000000 
 3494      0000
 3495 01af 00       		.space	1
 3496 01b0 00       		.byte	0
 3497 01b1 000000   		.space	3
 3498 01b4 03000000 		.word	3
 3499 01b8 05       		.byte	5
 3500 01b9 000000   		.space	3
ARM GAS  /tmp/ccUw5X70.s 			page 91


 3501 01bc 01000000 		.word	1
 3502 01c0 414C4C00 		.ascii	"ALL\000"
 3503 01c4 00000000 		.space	4
 3504 01c8 6120622F 		.ascii	"a b/c\000"
 3504      6300
 3505 01ce 0000     		.space	2
 3506 01d0 01       		.byte	1
 3507 01d1 000000   		.space	3
 3508 01d4 03000000 		.word	3
 3509 01d8 05       		.byte	5
 3510 01d9 000000   		.space	3
 3511 01dc 02000000 		.word	2
 3512 01e0 46495800 		.ascii	"FIX\000"
 3513 01e4 00000000 		.space	4
 3514 01e8 642F6300 		.ascii	"d/c\000"
 3515 01ec 00000000 		.space	4
 3516 01f0 02       		.byte	2
 3517 01f1 000000   		.space	3
 3518 01f4 03000000 		.word	3
 3519 01f8 06       		.byte	6
 3520 01f9 000000   		.space	3
 3521 01fc 01000000 		.word	1
 3522 0200 53434900 		.ascii	"SCI\000"
 3523 0204 00000000 		.space	4
 3524 0208 482E4D53 		.ascii	"H.MS\000"
 3524      00
 3525 020d 000000   		.space	3
 3526 0210 03       		.byte	3
 3527 0211 000000   		.space	3
 3528 0214 03000000 		.word	3
 3529 0218 07       		.byte	7
 3530 0219 000000   		.space	3
 3531 021c 01000000 		.word	1
 3532 0220 454E4700 		.ascii	"ENG\000"
 3533 0224 00000000 		.space	4
 3534 0228 482E6400 		.ascii	"H.d\000"
 3535 022c 00000000 		.space	4
 3536 0230 2C       		.byte	44
 3537 0231 000000   		.space	3
 3538 0234 FFFFFFFF 		.word	-1
 3539 0238 26       		.byte	38
 3540 0239 000000   		.space	3
 3541 023c 03000000 		.word	3
 3542 0240 2D2D0D00 		.ascii	"--\015\000"
 3543 0244 00000000 		.space	4
 3544 0248 2E2F2C00 		.ascii	"./,\000"
 3545 024c 00000000 		.space	4
 3546 0250 2D       		.byte	45
 3547 0251 000000   		.space	3
 3548 0254 FFFFFFFF 		.word	-1
 3549 0258 2E       		.byte	46
 3550 0259 000000   		.space	3
 3551 025c FFFFFFFF 		.word	-1
 3552 0260 43505800 		.ascii	"CPX\000"
 3553 0264 00000000 		.space	4
 3554 0268 00       		.ascii	"\000"
 3555 0269 00000000 		.space	7
ARM GAS  /tmp/ccUw5X70.s 			page 92


 3555      000000
 3556 0270 42415345 		.ascii	"BASE\000"
 3556      00
 3557 0275 00000000 		.space	10
 3557      00000000 
 3557      0000
 3558 027f 00       		.space	1
 3559 0280 0E       		.byte	14
 3560 0281 000000   		.space	3
 3561 0284 01000000 		.word	1
 3562 0288 0E       		.byte	14
 3563 0289 000000   		.space	3
 3564 028c 03000000 		.word	3
 3565 0290 42494E00 		.ascii	"BIN\000"
 3566 0294 00000000 		.space	4
 3567 0298 6E6F7400 		.ascii	"not\000"
 3568 029c 00000000 		.space	4
 3569 02a0 0E       		.byte	14
 3570 02a1 000000   		.space	3
 3571 02a4 02000000 		.word	2
 3572 02a8 13       		.byte	19
 3573 02a9 000000   		.space	3
 3574 02ac 03000000 		.word	3
 3575 02b0 4F435400 		.ascii	"OCT\000"
 3576 02b4 00000000 		.space	4
 3577 02b8 616E6400 		.ascii	"and\000"
 3578 02bc 00000000 		.space	4
 3579 02c0 0F       		.byte	15
 3580 02c1 000000   		.space	3
 3581 02c4 01000000 		.word	1
 3582 02c8 14       		.byte	20
 3583 02c9 000000   		.space	3
 3584 02cc 03000000 		.word	3
 3585 02d0 44454300 		.ascii	"DEC\000"
 3586 02d4 00000000 		.space	4
 3587 02d8 6F7200   		.ascii	"or\000"
 3588 02db 00000000 		.space	5
 3588      00
 3589 02e0 0F       		.byte	15
 3590 02e1 000000   		.space	3
 3591 02e4 02000000 		.word	2
 3592 02e8 15       		.byte	21
 3593 02e9 000000   		.space	3
 3594 02ec 03000000 		.word	3
 3595 02f0 48455800 		.ascii	"HEX\000"
 3596 02f4 00000000 		.space	4
 3597 02f8 786F7200 		.ascii	"xor\000"
 3598 02fc 00000000 		.space	4
 3599 0300 2C       		.byte	44
 3600 0301 000000   		.space	3
 3601 0304 FFFFFFFF 		.word	-1
 3602 0308 16       		.byte	22
 3603 0309 000000   		.space	3
 3604 030c 03000000 		.word	3
 3605 0310 2D2D0D00 		.ascii	"--\015\000"
 3606 0314 00000000 		.space	4
 3607 0318 524D4452 		.ascii	"RMDR\000"
ARM GAS  /tmp/ccUw5X70.s 			page 93


 3607      00
 3608 031d 000000   		.space	3
 3609 0320 2D       		.byte	45
 3610 0321 000000   		.space	3
 3611 0324 FFFFFFFF 		.word	-1
 3612 0328 07       		.byte	7
 3613 0329 000000   		.space	3
 3614 032c 01000000 		.word	1
 3615 0330 43505800 		.ascii	"CPX\000"
 3616 0334 00000000 		.space	4
 3617 0338 482E6400 		.ascii	"H.d\000"
 3618 033c 00000000 		.space	4
 3619 0340 414E474C 		.ascii	"ANGLES\000"
 3619      455300
 3620 0347 00000000 		.space	8
 3620      00000000 
 3621 034f 00       		.space	1
 3622 0350 06       		.byte	6
 3623 0351 000000   		.space	3
 3624 0354 02000000 		.word	2
 3625 0358 04       		.byte	4
 3626 0359 000000   		.space	3
 3627 035c 01000000 		.word	1
 3628 0360 44454700 		.ascii	"DEG\000"
 3629 0364 00000000 		.space	4
 3630 0368 500D5200 		.ascii	"P\015R\000"
 3631 036c 00000000 		.space	4
 3632 0370 07       		.byte	7
 3633 0371 000000   		.space	3
 3634 0374 02000000 		.word	2
 3635 0378 04       		.byte	4
 3636 0379 000000   		.space	3
 3637 037c 02000000 		.word	2
 3638 0380 52414400 		.ascii	"RAD\000"
 3639 0384 00000000 		.space	4
 3640 0388 520D5000 		.ascii	"R\015P\000"
 3641 038c 00000000 		.space	4
 3642 0390 08       		.byte	8
 3643 0391 000000   		.space	3
 3644 0394 02000000 		.word	2
 3645 0398 00       		.byte	0
 3646 0399 000000   		.space	3
 3647 039c 01000000 		.word	1
 3648 03a0 47524144 		.ascii	"GRAD\000"
 3648      00
 3649 03a5 000000   		.space	3
 3650 03a8 48595000 		.ascii	"HYP\000"
 3651 03ac 00000000 		.space	4
 3652 03b0 06       		.byte	6
 3653 03b1 000000   		.space	3
 3654 03b4 01000000 		.word	1
 3655 03b8 07       		.byte	7
 3656 03b9 000000   		.space	3
 3657 03bc 01000000 		.word	1
 3658 03c0 482E4D53 		.ascii	"H.MS\000"
 3658      00
 3659 03c5 000000   		.space	3
ARM GAS  /tmp/ccUw5X70.s 			page 94


 3660 03c8 482E6400 		.ascii	"H.d\000"
 3661 03cc 00000000 		.space	4
 3662 03d0 2C       		.byte	44
 3663 03d1 000000   		.space	3
 3664 03d4 FFFFFFFF 		.word	-1
 3665 03d8 00       		.byte	0
 3666 03d9 000000   		.space	3
 3667 03dc 02000000 		.word	2
 3668 03e0 2D2D0D00 		.ascii	"--\015\000"
 3669 03e4 00000000 		.space	4
 3670 03e8 4859509D 		.ascii	"HYP\235\000"
 3670      00
 3671 03ed 000000   		.space	3
 3672 03f0 2D       		.byte	45
 3673 03f1 000000   		.space	3
 3674 03f4 FFFFFFFF 		.word	-1
 3675 03f8 2E       		.byte	46
 3676 03f9 000000   		.space	3
 3677 03fc FFFFFFFF 		.word	-1
 3678 0400 43505800 		.ascii	"CPX\000"
 3679 0404 00000000 		.space	4
 3680 0408 00       		.ascii	"\000"
 3681 0409 00000000 		.space	7
 3681      000000
 3682 0410 4D495343 		.ascii	"MISC\000"
 3682      00
 3683 0415 00000000 		.space	10
 3683      00000000 
 3683      0000
 3684 041f 00       		.space	1
 3685 0420 25       		.byte	37
 3686 0421 000000   		.space	3
 3687 0424 01000000 		.word	1
 3688 0428 14       		.byte	20
 3689 0429 000000   		.space	3
 3690 042c 01000000 		.word	1
 3691 0430 7C587C00 		.ascii	"|X|\000"
 3692 0434 00000000 		.space	4
 3693 0438 329C00   		.ascii	"2\234\000"
 3694 043b 00000000 		.space	5
 3694      00
 3695 0440 25       		.byte	37
 3696 0441 000000   		.space	3
 3697 0444 02000000 		.word	2
 3698 0448 14       		.byte	20
 3699 0449 000000   		.space	3
 3700 044c 02000000 		.word	2
 3701 0450 524E4400 		.ascii	"RND\000"
 3702 0454 00000000 		.space	4
 3703 0458 4C6F67BA 		.ascii	"Log\272\000"
 3703      00
 3704 045d 000000   		.space	3
 3705 0460 26       		.byte	38
 3706 0461 000000   		.space	3
 3707 0464 01000000 		.word	1
 3708 0468 15       		.byte	21
 3709 0469 000000   		.space	3
ARM GAS  /tmp/ccUw5X70.s 			page 95


 3710 046c 02000000 		.word	2
 3711 0470 49506172 		.ascii	"IPart\000"
 3711      7400
 3712 0476 0000     		.space	2
 3713 0478 4C6F678B 		.ascii	"Log\213\000"
 3713      00
 3714 047d 000000   		.space	3
 3715 0480 26       		.byte	38
 3716 0481 000000   		.space	3
 3717 0484 02000000 		.word	2
 3718 0488 16       		.byte	22
 3719 0489 000000   		.space	3
 3720 048c 02000000 		.word	2
 3721 0490 46506172 		.ascii	"FPart\000"
 3721      7400
 3722 0496 0000     		.space	2
 3723 0498 7C7C656C 		.ascii	"||el\000"
 3723      00
 3724 049d 000000   		.space	3
 3725 04a0 2C       		.byte	44
 3726 04a1 000000   		.space	3
 3727 04a4 FFFFFFFF 		.word	-1
 3728 04a8 22       		.byte	34
 3729 04a9 000000   		.space	3
 3730 04ac 02000000 		.word	2
 3731 04b0 2D2D0D00 		.ascii	"--\015\000"
 3732 04b4 00000000 		.space	4
 3733 04b8 832500   		.ascii	"\203%\000"
 3734 04bb 00000000 		.space	5
 3734      00
 3735 04c0 2D       		.byte	45
 3736 04c1 000000   		.space	3
 3737 04c4 FFFFFFFF 		.word	-1
 3738 04c8 2E       		.byte	46
 3739 04c9 000000   		.space	3
 3740 04cc FFFFFFFF 		.word	-1
 3741 04d0 43505800 		.ascii	"CPX\000"
 3742 04d4 00000000 		.space	4
 3743 04d8 00       		.ascii	"\000"
 3744 04d9 00000000 		.space	7
 3744      000000
 3745 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 3745      204B6579 
 3745      00
 3746 04e9 00000000 		.space	6
 3746      0000
 3747 04ef 00       		.space	1
 3748 04f0 0D       		.byte	13
 3749 04f1 000000   		.space	3
 3750 04f4 01000000 		.word	1
 3751 04f8 2E       		.byte	46
 3752 04f9 000000   		.space	3
 3753 04fc FFFFFFFF 		.word	-1
 3754 0500 53686F77 		.ascii	"Show\016\000"
 3754      0E00
 3755 0506 0000     		.space	2
 3756 0508 00       		.ascii	"\000"
ARM GAS  /tmp/ccUw5X70.s 			page 96


 3757 0509 00000000 		.space	7
 3757      000000
 3758 0510 0D       		.byte	13
 3759 0511 000000   		.space	3
 3760 0514 02000000 		.word	2
 3761 0518 2E       		.byte	46
 3762 0519 000000   		.space	3
 3763 051c FFFFFFFF 		.word	-1
 3764 0520 53686F77 		.ascii	"Show\015\000"
 3764      0D00
 3765 0526 0000     		.space	2
 3766 0528 00       		.ascii	"\000"
 3767 0529 00000000 		.space	7
 3767      000000
 3768 0530 0D       		.byte	13
 3769 0531 000000   		.space	3
 3770 0534 03000000 		.word	3
 3771 0538 2E       		.byte	46
 3772 0539 000000   		.space	3
 3773 053c FFFFFFFF 		.word	-1
 3774 0540 78173F00 		.ascii	"x\027?\000"
 3775 0544 00000000 		.space	4
 3776 0548 00       		.ascii	"\000"
 3777 0549 00000000 		.space	7
 3777      000000
 3778 0550 2E       		.byte	46
 3779 0551 000000   		.space	3
 3780 0554 FFFFFFFF 		.word	-1
 3781 0558 2E       		.byte	46
 3782 0559 000000   		.space	3
 3783 055c FFFFFFFF 		.word	-1
 3784 0560 00       		.ascii	"\000"
 3785 0561 00000000 		.space	7
 3785      000000
 3786 0568 00       		.ascii	"\000"
 3787 0569 00000000 		.space	7
 3787      000000
 3788 0570 2C       		.byte	44
 3789 0571 000000   		.space	3
 3790 0574 FFFFFFFF 		.word	-1
 3791 0578 2E       		.byte	46
 3792 0579 000000   		.space	3
 3793 057c FFFFFFFF 		.word	-1
 3794 0580 2D2D0D00 		.ascii	"--\015\000"
 3795 0584 00000000 		.space	4
 3796 0588 00       		.ascii	"\000"
 3797 0589 00000000 		.space	7
 3797      000000
 3798 0590 2D       		.byte	45
 3799 0591 000000   		.space	3
 3800 0594 FFFFFFFF 		.word	-1
 3801 0598 2E       		.byte	46
 3802 0599 000000   		.space	3
 3803 059c FFFFFFFF 		.word	-1
 3804 05a0 43505800 		.ascii	"CPX\000"
 3805 05a4 00000000 		.space	4
 3806 05a8 00       		.ascii	"\000"
ARM GAS  /tmp/ccUw5X70.s 			page 97


 3807 05a9 00000000 		.space	7
 3807      000000
 3808 05b0 50726F67 		.ascii	"Program\000"
 3808      72616D00 
 3809 05b8 00000000 		.space	7
 3809      000000
 3810 05bf 00       		.space	1
 3811 05c0 27       		.byte	39
 3812 05c1 000000   		.space	3
 3813 05c4 01000000 		.word	1
 3814 05c8 28       		.byte	40
 3815 05c9 000000   		.space	3
 3816 05cc 01000000 		.word	1
 3817 05d0 4C424C00 		.ascii	"LBL\000"
 3818 05d4 00000000 		.space	4
 3819 05d8 44534500 		.ascii	"DSE\000"
 3820 05dc 00000000 		.space	4
 3821 05e0 27       		.byte	39
 3822 05e1 000000   		.space	3
 3823 05e4 02000000 		.word	2
 3824 05e8 28       		.byte	40
 3825 05e9 000000   		.space	3
 3826 05ec 02000000 		.word	2
 3827 05f0 52544E00 		.ascii	"RTN\000"
 3828 05f4 00000000 		.space	4
 3829 05f8 49534700 		.ascii	"ISG\000"
 3830 05fc 00000000 		.space	4
 3831 0600 25       		.byte	37
 3832 0601 000000   		.space	3
 3833 0604 03000000 		.word	3
 3834 0608 2E       		.byte	46
 3835 0609 000000   		.space	3
 3836 060c FFFFFFFF 		.word	-1
 3837 0610 50617573 		.ascii	"Pause\000"
 3837      6500
 3838 0616 0000     		.space	2
 3839 0618 00       		.ascii	"\000"
 3840 0619 00000000 		.space	7
 3840      000000
 3841 0620 12       		.byte	18
 3842 0621 000000   		.space	3
 3843 0624 03000000 		.word	3
 3844 0628 2E       		.byte	46
 3845 0629 000000   		.space	3
 3846 062c FFFFFFFF 		.word	-1
 3847 0630 47544F00 		.ascii	"GTO\000"
 3848 0634 00000000 		.space	4
 3849 0638 00       		.ascii	"\000"
 3850 0639 00000000 		.space	7
 3850      000000
 3851 0640 2C       		.byte	44
 3852 0641 000000   		.space	3
 3853 0644 FFFFFFFF 		.word	-1
 3854 0648 2E       		.byte	46
 3855 0649 000000   		.space	3
 3856 064c FFFFFFFF 		.word	-1
 3857 0650 2D2D0D00 		.ascii	"--\015\000"
ARM GAS  /tmp/ccUw5X70.s 			page 98


 3858 0654 00000000 		.space	4
 3859 0658 00       		.ascii	"\000"
 3860 0659 00000000 		.space	7
 3860      000000
 3861 0660 2D       		.byte	45
 3862 0661 000000   		.space	3
 3863 0664 FFFFFFFF 		.word	-1
 3864 0668 2E       		.byte	46
 3865 0669 000000   		.space	3
 3866 066c FFFFFFFF 		.word	-1
 3867 0670 43505800 		.ascii	"CPX\000"
 3868 0674 00000000 		.space	4
 3869 0678 00       		.ascii	"\000"
 3870 0679 00000000 		.space	7
 3870      000000
 3871 0680 53657475 		.ascii	"Setup 1\000"
 3871      70203100 
 3872 0688 00000000 		.space	7
 3872      000000
 3873 068f 00       		.space	1
 3874 0690 32       		.byte	50
 3875 0691 000000   		.space	3
 3876 0694 00000000 		.word	0
 3877 0698 30       		.byte	48
 3878 0699 000000   		.space	3
 3879 069c 00000000 		.word	0
 3880 06a0 45584954 		.ascii	"EXIT\000"
 3880      00
 3881 06a5 000000   		.space	3
 3882 06a8 53797374 		.ascii	"System\000"
 3882      656D00
 3883 06af 00       		.space	1
 3884 06b0 31       		.byte	49
 3885 06b1 000000   		.space	3
 3886 06b4 09000000 		.word	9
 3887 06b8 2E       		.byte	46
 3888 06b9 000000   		.space	3
 3889 06bc FFFFFFFF 		.word	-1
 3890 06c0 48454C50 		.ascii	"HELP\000"
 3890      00
 3891 06c5 000000   		.space	3
 3892 06c8 00       		.ascii	"\000"
 3893 06c9 00000000 		.space	7
 3893      000000
 3894 06d0 31       		.byte	49
 3895 06d1 000000   		.space	3
 3896 06d4 02000000 		.word	2
 3897 06d8 31       		.byte	49
 3898 06d9 000000   		.space	3
 3899 06dc 06000000 		.word	6
 3900 06e0 4F6E5354 		.ascii	"OnSTO\000"
 3900      4F00
 3901 06e6 0000     		.space	2
 3902 06e8 53765241 		.ascii	"SvRAM\000"
 3902      4D00
 3903 06ee 0000     		.space	2
 3904 06f0 31       		.byte	49
ARM GAS  /tmp/ccUw5X70.s 			page 99


 3905 06f1 000000   		.space	3
 3906 06f4 03000000 		.word	3
 3907 06f8 31       		.byte	49
 3908 06f9 000000   		.space	3
 3909 06fc 07000000 		.word	7
 3910 0700 4F6E5243 		.ascii	"OnRCL\000"
 3910      4C00
 3911 0706 0000     		.space	2
 3912 0708 4C645241 		.ascii	"LdRAM\000"
 3912      4D00
 3913 070e 0000     		.space	2
 3914 0710 2C       		.byte	44
 3915 0711 000000   		.space	3
 3916 0714 FFFFFFFF 		.word	-1
 3917 0718 2E       		.byte	46
 3918 0719 000000   		.space	3
 3919 071c FFFFFFFF 		.word	-1
 3920 0720 2D2D0D00 		.ascii	"--\015\000"
 3921 0724 00000000 		.space	4
 3922 0728 00       		.ascii	"\000"
 3923 0729 00000000 		.space	7
 3923      000000
 3924 0730 2D       		.byte	45
 3925 0731 000000   		.space	3
 3926 0734 FFFFFFFF 		.word	-1
 3927 0738 2E       		.byte	46
 3928 0739 000000   		.space	3
 3929 073c FFFFFFFF 		.word	-1
 3930 0740 43505800 		.ascii	"CPX\000"
 3931 0744 00000000 		.space	4
 3932 0748 00       		.ascii	"\000"
 3933 0749 00000000 		.space	7
 3933      000000
 3934 0750 4172726F 		.ascii	"Arrow\000"
 3934      7700
 3935 0756 00000000 		.space	9
 3935      00000000 
 3935      00
 3936 075f 00       		.space	1
 3937 0760 0E       		.byte	14
 3938 0761 000000   		.space	3
 3939 0764 01000000 		.word	1
 3940 0768 06       		.byte	6
 3941 0769 000000   		.space	3
 3942 076c 02000000 		.word	2
 3943 0770 42696E00 		.ascii	"Bin\000"
 3944 0774 00000000 		.space	4
 3945 0778 44454700 		.ascii	"DEG\000"
 3946 077c 00000000 		.space	4
 3947 0780 0E       		.byte	14
 3948 0781 000000   		.space	3
 3949 0784 02000000 		.word	2
 3950 0788 07       		.byte	7
 3951 0789 000000   		.space	3
 3952 078c 02000000 		.word	2
 3953 0790 4F637400 		.ascii	"Oct\000"
 3954 0794 00000000 		.space	4
ARM GAS  /tmp/ccUw5X70.s 			page 100


 3955 0798 52414400 		.ascii	"RAD\000"
 3956 079c 00000000 		.space	4
 3957 07a0 0F       		.byte	15
 3958 07a1 000000   		.space	3
 3959 07a4 01000000 		.word	1
 3960 07a8 08       		.byte	8
 3961 07a9 000000   		.space	3
 3962 07ac 02000000 		.word	2
 3963 07b0 44656300 		.ascii	"Dec\000"
 3964 07b4 00000000 		.space	4
 3965 07b8 47726164 		.ascii	"Grad\000"
 3965      00
 3966 07bd 000000   		.space	3
 3967 07c0 0F       		.byte	15
 3968 07c1 000000   		.space	3
 3969 07c4 02000000 		.word	2
 3970 07c8 06       		.byte	6
 3971 07c9 000000   		.space	3
 3972 07cc 01000000 		.word	1
 3973 07d0 48657800 		.ascii	"Hex\000"
 3974 07d4 00000000 		.space	4
 3975 07d8 32484D53 		.ascii	"2HMS\000"
 3975      00
 3976 07dd 000000   		.space	3
 3977 07e0 2C       		.byte	44
 3978 07e1 000000   		.space	3
 3979 07e4 FFFFFFFF 		.word	-1
 3980 07e8 07       		.byte	7
 3981 07e9 000000   		.space	3
 3982 07ec 01000000 		.word	1
 3983 07f0 2D2D0D00 		.ascii	"--\015\000"
 3984 07f4 00000000 		.space	4
 3985 07f8 484D5332 		.ascii	"HMS2\000"
 3985      00
 3986 07fd 000000   		.space	3
 3987 0800 2D       		.byte	45
 3988 0801 000000   		.space	3
 3989 0804 FFFFFFFF 		.word	-1
 3990 0808 2E       		.byte	46
 3991 0809 000000   		.space	3
 3992 080c FFFFFFFF 		.word	-1
 3993 0810 43505800 		.ascii	"CPX\000"
 3994 0814 00000000 		.space	4
 3995 0818 00       		.ascii	"\000"
 3996 0819 00000000 		.space	7
 3996      000000
 3997 0820 466C6167 		.ascii	"Flags\000"
 3997      7300
 3998 0826 00000000 		.space	9
 3998      00000000 
 3998      00
 3999 082f 00       		.space	1
 4000 0830 1E       		.byte	30
 4001 0831 000000   		.space	3
 4002 0834 01000000 		.word	1
 4003 0838 2E       		.byte	46
 4004 0839 000000   		.space	3
ARM GAS  /tmp/ccUw5X70.s 			page 101


 4005 083c FFFFFFFF 		.word	-1
 4006 0840 53465F00 		.ascii	"SF_\000"
 4007 0844 00000000 		.space	4
 4008 0848 00       		.ascii	"\000"
 4009 0849 00000000 		.space	7
 4009      000000
 4010 0850 1E       		.byte	30
 4011 0851 000000   		.space	3
 4012 0854 02000000 		.word	2
 4013 0858 2E       		.byte	46
 4014 0859 000000   		.space	3
 4015 085c FFFFFFFF 		.word	-1
 4016 0860 43465F00 		.ascii	"CF_\000"
 4017 0864 00000000 		.space	4
 4018 0868 00       		.ascii	"\000"
 4019 0869 00000000 		.space	7
 4019      000000
 4020 0870 1F       		.byte	31
 4021 0871 000000   		.space	3
 4022 0874 01000000 		.word	1
 4023 0878 2E       		.byte	46
 4024 0879 000000   		.space	3
 4025 087c FFFFFFFF 		.word	-1
 4026 0880 783D3F00 		.ascii	"x=?\000"
 4027 0884 00000000 		.space	4
 4028 0888 00       		.ascii	"\000"
 4029 0889 00000000 		.space	7
 4029      000000
 4030 0890 1F       		.byte	31
 4031 0891 000000   		.space	3
 4032 0894 02000000 		.word	2
 4033 0898 2E       		.byte	46
 4034 0899 000000   		.space	3
 4035 089c FFFFFFFF 		.word	-1
 4036 08a0 780B3F00 		.ascii	"x\013?\000"
 4037 08a4 00000000 		.space	4
 4038 08a8 00       		.ascii	"\000"
 4039 08a9 00000000 		.space	7
 4039      000000
 4040 08b0 2C       		.byte	44
 4041 08b1 000000   		.space	3
 4042 08b4 FFFFFFFF 		.word	-1
 4043 08b8 2E       		.byte	46
 4044 08b9 000000   		.space	3
 4045 08bc FFFFFFFF 		.word	-1
 4046 08c0 2D2D0D00 		.ascii	"--\015\000"
 4047 08c4 00000000 		.space	4
 4048 08c8 00       		.ascii	"\000"
 4049 08c9 00000000 		.space	7
 4049      000000
 4050 08d0 2D       		.byte	45
 4051 08d1 000000   		.space	3
 4052 08d4 FFFFFFFF 		.word	-1
 4053 08d8 2E       		.byte	46
 4054 08d9 000000   		.space	3
 4055 08dc FFFFFFFF 		.word	-1
 4056 08e0 43505800 		.ascii	"CPX\000"
ARM GAS  /tmp/ccUw5X70.s 			page 102


 4057 08e4 00000000 		.space	4
 4058 08e8 00       		.ascii	"\000"
 4059 08e9 00000000 		.space	7
 4059      000000
 4060 08f0 50726F62 		.ascii	"Probability\000"
 4060      6162696C 
 4060      69747900 
 4061 08fc 000000   		.space	3
 4062 08ff 00       		.space	1
 4063 0900 18       		.byte	24
 4064 0901 000000   		.space	3
 4065 0904 03000000 		.word	3
 4066 0908 19       		.byte	25
 4067 0909 000000   		.space	3
 4068 090c 01000000 		.word	1
 4069 0910 46616374 		.ascii	"Fact!\000"
 4069      2100
 4070 0916 0000     		.space	2
 4071 0918 9400     		.ascii	"\224\000"
 4072 091a 00000000 		.space	6
 4072      0000
 4073 0920 18       		.byte	24
 4074 0921 000000   		.space	3
 4075 0924 01000000 		.word	1
 4076 0928 19       		.byte	25
 4077 0929 000000   		.space	3
 4078 092c 02000000 		.word	2
 4079 0930 43792C78 		.ascii	"Cy,x\000"
 4079      00
 4080 0935 000000   		.space	3
 4081 0938 949D00   		.ascii	"\224\235\000"
 4082 093b 00000000 		.space	5
 4082      00
 4083 0940 18       		.byte	24
 4084 0941 000000   		.space	3
 4085 0944 02000000 		.word	2
 4086 0948 2E       		.byte	46
 4087 0949 000000   		.space	3
 4088 094c FFFFFFFF 		.word	-1
 4089 0950 50792C78 		.ascii	"Py,x\000"
 4089      00
 4090 0955 000000   		.space	3
 4091 0958 00       		.ascii	"\000"
 4092 0959 00000000 		.space	7
 4092      000000
 4093 0960 08       		.byte	8
 4094 0961 000000   		.space	3
 4095 0964 01000000 		.word	1
 4096 0968 2E       		.byte	46
 4097 0969 000000   		.space	3
 4098 096c FFFFFFFF 		.word	-1
 4099 0970 52414E23 		.ascii	"RAN#\000"
 4099      00
 4100 0975 000000   		.space	3
 4101 0978 00       		.ascii	"\000"
 4102 0979 00000000 		.space	7
 4102      000000
ARM GAS  /tmp/ccUw5X70.s 			page 103


 4103 0980 2C       		.byte	44
 4104 0981 000000   		.space	3
 4105 0984 FFFFFFFF 		.word	-1
 4106 0988 2E       		.byte	46
 4107 0989 000000   		.space	3
 4108 098c FFFFFFFF 		.word	-1
 4109 0990 2D2D0D00 		.ascii	"--\015\000"
 4110 0994 00000000 		.space	4
 4111 0998 00       		.ascii	"\000"
 4112 0999 00000000 		.space	7
 4112      000000
 4113 09a0 2D       		.byte	45
 4114 09a1 000000   		.space	3
 4115 09a4 FFFFFFFF 		.word	-1
 4116 09a8 2E       		.byte	46
 4117 09a9 000000   		.space	3
 4118 09ac FFFFFFFF 		.word	-1
 4119 09b0 43505800 		.ascii	"CPX\000"
 4120 09b4 00000000 		.space	4
 4121 09b8 00       		.ascii	"\000"
 4122 09b9 00000000 		.space	7
 4122      000000
 4123 09c0 53746174 		.ascii	"Statistics\000"
 4123      69737469 
 4123      637300
 4124 09cb 00000000 		.space	4
 4125 09cf 00       		.space	1
 4126 09d0 1A       		.byte	26
 4127 09d1 000000   		.space	3
 4128 09d4 01000000 		.word	1
 4129 09d8 1B       		.byte	27
 4130 09d9 000000   		.space	3
 4131 09dc 03000000 		.word	3
 4132 09e0 58626172 		.ascii	"Xbar\000"
 4132      00
 4133 09e5 000000   		.space	3
 4134 09e8 53554D53 		.ascii	"SUMS\000"
 4134      00
 4135 09ed 000000   		.space	3
 4136 09f0 1B       		.byte	27
 4137 09f1 000000   		.space	3
 4138 09f4 01000000 		.word	1
 4139 09f8 2E       		.byte	46
 4140 09f9 000000   		.space	3
 4141 09fc FFFFFFFF 		.word	-1
 4142 0a00 59686174 		.ascii	"Yhat\000"
 4142      00
 4143 0a05 000000   		.space	3
 4144 0a08 00       		.ascii	"\000"
 4145 0a09 00000000 		.space	7
 4145      000000
 4146 0a10 1A       		.byte	26
 4147 0a11 000000   		.space	3
 4148 0a14 02000000 		.word	2
 4149 0a18 2E       		.byte	46
 4150 0a19 000000   		.space	3
 4151 0a1c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccUw5X70.s 			page 104


 4152 0a20 7300     		.ascii	"s\000"
 4153 0a22 00000000 		.space	6
 4153      0000
 4154 0a28 00       		.ascii	"\000"
 4155 0a29 00000000 		.space	7
 4155      000000
 4156 0a30 1B       		.byte	27
 4157 0a31 000000   		.space	3
 4158 0a34 02000000 		.word	2
 4159 0a38 2E       		.byte	46
 4160 0a39 000000   		.space	3
 4161 0a3c FFFFFFFF 		.word	-1
 4162 0a40 7200     		.ascii	"r\000"
 4163 0a42 00000000 		.space	6
 4163      0000
 4164 0a48 00       		.ascii	"\000"
 4165 0a49 00000000 		.space	7
 4165      000000
 4166 0a50 2C       		.byte	44
 4167 0a51 000000   		.space	3
 4168 0a54 FFFFFFFF 		.word	-1
 4169 0a58 2E       		.byte	46
 4170 0a59 000000   		.space	3
 4171 0a5c FFFFFFFF 		.word	-1
 4172 0a60 2D2D0D00 		.ascii	"--\015\000"
 4173 0a64 00000000 		.space	4
 4174 0a68 00       		.ascii	"\000"
 4175 0a69 00000000 		.space	7
 4175      000000
 4176 0a70 2D       		.byte	45
 4177 0a71 000000   		.space	3
 4178 0a74 FFFFFFFF 		.word	-1
 4179 0a78 31       		.byte	49
 4180 0a79 000000   		.space	3
 4181 0a7c 0B000000 		.word	11
 4182 0a80 43505800 		.ascii	"CPX\000"
 4183 0a84 00000000 		.space	4
 4184 0a88 00       		.ascii	"\000"
 4185 0a89 00000000 		.space	7
 4185      000000
 4186 0a90 53657475 		.ascii	"Setup 2\000"
 4186      70203200 
 4187 0a98 00000000 		.space	7
 4187      000000
 4188 0a9f 00       		.space	1
 4189 0aa0 31       		.byte	49
 4190 0aa1 000000   		.space	3
 4191 0aa4 04000000 		.word	4
 4192 0aa8 2E       		.byte	46
 4193 0aa9 000000   		.space	3
 4194 0aac FFFFFFFF 		.word	-1
 4195 0ab0 53764C49 		.ascii	"SvLIB\000"
 4195      4200
 4196 0ab6 0000     		.space	2
 4197 0ab8 00       		.ascii	"\000"
 4198 0ab9 00000000 		.space	7
 4198      000000
ARM GAS  /tmp/ccUw5X70.s 			page 105


 4199 0ac0 31       		.byte	49
 4200 0ac1 000000   		.space	3
 4201 0ac4 05000000 		.word	5
 4202 0ac8 2E       		.byte	46
 4203 0ac9 000000   		.space	3
 4204 0acc FFFFFFFF 		.word	-1
 4205 0ad0 4C644C49 		.ascii	"LdLIB\000"
 4205      4200
 4206 0ad6 0000     		.space	2
 4207 0ad8 00       		.ascii	"\000"
 4208 0ad9 00000000 		.space	7
 4208      000000
 4209 0ae0 31       		.byte	49
 4210 0ae1 000000   		.space	3
 4211 0ae4 0A000000 		.word	10
 4212 0ae8 2E       		.byte	46
 4213 0ae9 000000   		.space	3
 4214 0aec FFFFFFFF 		.word	-1
 4215 0af0 53764350 		.ascii	"SvCPRG\000"
 4215      524700
 4216 0af7 00       		.space	1
 4217 0af8 00       		.ascii	"\000"
 4218 0af9 00000000 		.space	7
 4218      000000
 4219 0b00 31       		.byte	49
 4220 0b01 000000   		.space	3
 4221 0b04 08000000 		.word	8
 4222 0b08 2E       		.byte	46
 4223 0b09 000000   		.space	3
 4224 0b0c FFFFFFFF 		.word	-1
 4225 0b10 4C645052 		.ascii	"LdPRG\000"
 4225      4700
 4226 0b16 0000     		.space	2
 4227 0b18 00       		.ascii	"\000"
 4228 0b19 00000000 		.space	7
 4228      000000
 4229 0b20 2C       		.byte	44
 4230 0b21 000000   		.space	3
 4231 0b24 FFFFFFFF 		.word	-1
 4232 0b28 2E       		.byte	46
 4233 0b29 000000   		.space	3
 4234 0b2c FFFFFFFF 		.word	-1
 4235 0b30 2D2D0D00 		.ascii	"--\015\000"
 4236 0b34 00000000 		.space	4
 4237 0b38 00       		.ascii	"\000"
 4238 0b39 00000000 		.space	7
 4238      000000
 4239 0b40 2D       		.byte	45
 4240 0b41 000000   		.space	3
 4241 0b44 FFFFFFFF 		.word	-1
 4242 0b48 2E       		.byte	46
 4243 0b49 000000   		.space	3
 4244 0b4c FFFFFFFF 		.word	-1
 4245 0b50 43505800 		.ascii	"CPX\000"
 4246 0b54 00000000 		.space	4
 4247 0b58 00       		.ascii	"\000"
 4248 0b59 00000000 		.space	7
ARM GAS  /tmp/ccUw5X70.s 			page 106


 4248      000000
 4249 0b60 496E7465 		.ascii	"Integ/Sum/Prod\000"
 4249      672F5375 
 4249      6D2F5072 
 4249      6F6400
 4250 0b6f 00       		.space	1
 4251 0b70 20       		.byte	32
 4252 0b71 000000   		.space	3
 4253 0b74 01000000 		.word	1
 4254 0b78 2E       		.byte	46
 4255 0b79 000000   		.space	3
 4256 0b7c FFFFFFFF 		.word	-1
 4257 0b80 534C5600 		.ascii	"SLV\000"
 4258 0b84 00000000 		.space	4
 4259 0b88 00       		.ascii	"\000"
 4260 0b89 00000000 		.space	7
 4260      000000
 4261 0b90 20       		.byte	32
 4262 0b91 000000   		.space	3
 4263 0b94 02000000 		.word	2
 4264 0b98 2E       		.byte	46
 4265 0b99 000000   		.space	3
 4266 0b9c FFFFFFFF 		.word	-1
 4267 0ba0 04206478 		.ascii	"\004 dx\000"
 4267      00
 4268 0ba5 000000   		.space	3
 4269 0ba8 00       		.ascii	"\000"
 4270 0ba9 00000000 		.space	7
 4270      000000
 4271 0bb0 21       		.byte	33
 4272 0bb1 000000   		.space	3
 4273 0bb4 01000000 		.word	1
 4274 0bb8 2E       		.byte	46
 4275 0bb9 000000   		.space	3
 4276 0bbc FFFFFFFF 		.word	-1
 4277 0bc0 53554D00 		.ascii	"SUM\000"
 4278 0bc4 00000000 		.space	4
 4279 0bc8 00       		.ascii	"\000"
 4280 0bc9 00000000 		.space	7
 4280      000000
 4281 0bd0 21       		.byte	33
 4282 0bd1 000000   		.space	3
 4283 0bd4 02000000 		.word	2
 4284 0bd8 2E       		.byte	46
 4285 0bd9 000000   		.space	3
 4286 0bdc FFFFFFFF 		.word	-1
 4287 0be0 50524F44 		.ascii	"PROD\000"
 4287      00
 4288 0be5 000000   		.space	3
 4289 0be8 00       		.ascii	"\000"
 4290 0be9 00000000 		.space	7
 4290      000000
 4291 0bf0 2C       		.byte	44
 4292 0bf1 000000   		.space	3
 4293 0bf4 FFFFFFFF 		.word	-1
 4294 0bf8 2E       		.byte	46
 4295 0bf9 000000   		.space	3
ARM GAS  /tmp/ccUw5X70.s 			page 107


 4296 0bfc FFFFFFFF 		.word	-1
 4297 0c00 2D2D0D00 		.ascii	"--\015\000"
 4298 0c04 00000000 		.space	4
 4299 0c08 00       		.ascii	"\000"
 4300 0c09 00000000 		.space	7
 4300      000000
 4301 0c10 2D       		.byte	45
 4302 0c11 000000   		.space	3
 4303 0c14 FFFFFFFF 		.word	-1
 4304 0c18 2E       		.byte	46
 4305 0c19 000000   		.space	3
 4306 0c1c FFFFFFFF 		.word	-1
 4307 0c20 43505800 		.ascii	"CPX\000"
 4308 0c24 00000000 		.space	4
 4309 0c28 00       		.ascii	"\000"
 4310 0c29 00000000 		.space	7
 4310      000000
 4311              		.section	.rodata.mapping_alpha.10884,"a"
 4312              		.align	2
 4313              		.set	.LANCHOR11,. + 0
 4316              	mapping_alpha.10884:
 4317 0000 63       		.byte	99
 4318 0001 000000   		.space	3
 4319 0004 FFFFFFFF 		.word	-1
 4320 0008 00       		.byte	0
 4321 0009 000000   		.space	3
 4322 000c FFFFFFFF 		.word	-1
 4323 0010 01       		.byte	1
 4324 0011 000000   		.space	3
 4325 0014 FFFFFFFF 		.word	-1
 4326 0018 02       		.byte	2
 4327 0019 000000   		.space	3
 4328 001c FFFFFFFF 		.word	-1
 4329 0020 03       		.byte	3
 4330 0021 000000   		.space	3
 4331 0024 FFFFFFFF 		.word	-1
 4332 0028 04       		.byte	4
 4333 0029 000000   		.space	3
 4334 002c FFFFFFFF 		.word	-1
 4335 0030 05       		.byte	5
 4336 0031 000000   		.space	3
 4337 0034 FFFFFFFF 		.word	-1
 4338 0038 06       		.byte	6
 4339 0039 000000   		.space	3
 4340 003c FFFFFFFF 		.word	-1
 4341 0040 07       		.byte	7
 4342 0041 000000   		.space	3
 4343 0044 FFFFFFFF 		.word	-1
 4344 0048 08       		.byte	8
 4345 0049 000000   		.space	3
 4346 004c FFFFFFFF 		.word	-1
 4347 0050 09       		.byte	9
 4348 0051 000000   		.space	3
 4349 0054 FFFFFFFF 		.word	-1
 4350 0058 0A       		.byte	10
 4351 0059 000000   		.space	3
 4352 005c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccUw5X70.s 			page 108


 4353 0060 0B       		.byte	11
 4354 0061 000000   		.space	3
 4355 0064 FFFFFFFF 		.word	-1
 4356 0068 0C       		.byte	12
 4357 0069 000000   		.space	3
 4358 006c FFFFFFFF 		.word	-1
 4359 0070 0D       		.byte	13
 4360 0071 000000   		.space	3
 4361 0074 FFFFFFFF 		.word	-1
 4362 0078 0E       		.byte	14
 4363 0079 000000   		.space	3
 4364 007c FFFFFFFF 		.word	-1
 4365 0080 0F       		.byte	15
 4366 0081 000000   		.space	3
 4367 0084 FFFFFFFF 		.word	-1
 4368 0088 10       		.byte	16
 4369 0089 000000   		.space	3
 4370 008c FFFFFFFF 		.word	-1
 4371 0090 12       		.byte	18
 4372 0091 000000   		.space	3
 4373 0094 FFFFFFFF 		.word	-1
 4374 0098 13       		.byte	19
 4375 0099 000000   		.space	3
 4376 009c FFFFFFFF 		.word	-1
 4377 00a0 14       		.byte	20
 4378 00a1 000000   		.space	3
 4379 00a4 FFFFFFFF 		.word	-1
 4380 00a8 15       		.byte	21
 4381 00a9 000000   		.space	3
 4382 00ac FFFFFFFF 		.word	-1
 4383 00b0 16       		.byte	22
 4384 00b1 000000   		.space	3
 4385 00b4 FFFFFFFF 		.word	-1
 4386 00b8 18       		.byte	24
 4387 00b9 000000   		.space	3
 4388 00bc FFFFFFFF 		.word	-1
 4389 00c0 19       		.byte	25
 4390 00c1 000000   		.space	3
 4391 00c4 FFFFFFFF 		.word	-1
 4392 00c8 1A       		.byte	26
 4393 00c9 000000   		.space	3
 4394 00cc FFFFFFFF 		.word	-1
 4395 00d0 1B       		.byte	27
 4396 00d1 000000   		.space	3
 4397 00d4 FFFFFFFF 		.word	-1
 4398 00d8 1C       		.byte	28
 4399 00d9 000000   		.space	3
 4400 00dc FFFFFFFF 		.word	-1
 4401 00e0 1E       		.byte	30
 4402 00e1 000000   		.space	3
 4403 00e4 FFFFFFFF 		.word	-1
 4404 00e8 1F       		.byte	31
 4405 00e9 000000   		.space	3
 4406 00ec FFFFFFFF 		.word	-1
 4407 00f0 20       		.byte	32
 4408 00f1 000000   		.space	3
 4409 00f4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccUw5X70.s 			page 109


 4410 00f8 21       		.byte	33
 4411 00f9 000000   		.space	3
 4412 00fc FFFFFFFF 		.word	-1
 4413 0100 22       		.byte	34
 4414 0101 000000   		.space	3
 4415 0104 FFFFFFFF 		.word	-1
 4416 0108 24       		.byte	36
 4417 0109 000000   		.space	3
 4418 010c FFFFFFFF 		.word	-1
 4419 0110 25       		.byte	37
 4420 0111 000000   		.space	3
 4421 0114 FFFFFFFF 		.word	-1
 4422 0118 26       		.byte	38
 4423 0119 000000   		.space	3
 4424 011c FFFFFFFF 		.word	-1
 4425 0120 27       		.byte	39
 4426 0121 000000   		.space	3
 4427 0124 FFFFFFFF 		.word	-1
 4428 0128 28       		.byte	40
 4429 0129 000000   		.space	3
 4430 012c FFFFFFFF 		.word	-1
 4431 0130 2E       		.byte	46
 4432 0131 000000   		.space	3
 4433 0134 FFFFFFFF 		.word	-1
 4434 0138 2E       		.byte	46
 4435 0139 000000   		.space	3
 4436 013c FFFFFFFF 		.word	-1
 4437 0140 2E       		.byte	46
 4438 0141 000000   		.space	3
 4439 0144 FFFFFFFF 		.word	-1
 4440 0148 2E       		.byte	46
 4441 0149 000000   		.space	3
 4442 014c FFFFFFFF 		.word	-1
 4443 0150 2C       		.byte	44
 4444 0151 000000   		.space	3
 4445 0154 FFFFFFFF 		.word	-1
 4446 0158 2E       		.byte	46
 4447 0159 000000   		.space	3
 4448 015c FFFFFFFF 		.word	-1
 4449 0160 2E       		.byte	46
 4450 0161 000000   		.space	3
 4451 0164 FFFFFFFF 		.word	-1
 4452 0168 2E       		.byte	46
 4453 0169 000000   		.space	3
 4454 016c FFFFFFFF 		.word	-1
 4455 0170 2E       		.byte	46
 4456 0171 000000   		.space	3
 4457 0174 FFFFFFFF 		.word	-1
 4458              		.section	.rodata.mapping_fshift.10882,"a"
 4459              		.align	2
 4460              		.set	.LANCHOR9,. + 0
 4463              	mapping_fshift.10882:
 4464 0000 63       		.byte	99
 4465 0001 000000   		.space	3
 4466 0004 FFFFFFFF 		.word	-1
 4467 0008 22       		.byte	34
 4468 0009 000000   		.space	3
ARM GAS  /tmp/ccUw5X70.s 			page 110


 4469 000c 03000000 		.word	3
 4470 0010 15       		.byte	21
 4471 0011 000000   		.space	3
 4472 0014 01000000 		.word	1
 4473 0018 1C       		.byte	28
 4474 0019 000000   		.space	3
 4475 001c 02000000 		.word	2
 4476 0020 13       		.byte	19
 4477 0021 000000   		.space	3
 4478 0024 01000000 		.word	1
 4479 0028 12       		.byte	18
 4480 0029 000000   		.space	3
 4481 002c 01000000 		.word	1
 4482 0030 12       		.byte	18
 4483 0031 000000   		.space	3
 4484 0034 03000000 		.word	3
 4485 0038 2D       		.byte	45
 4486 0039 000000   		.space	3
 4487 003c 00000000 		.word	0
 4488 0040 22       		.byte	34
 4489 0041 000000   		.space	3
 4490 0044 01000000 		.word	1
 4491 0048 0F       		.byte	15
 4492 0049 000000   		.space	3
 4493 004c 03000000 		.word	3
 4494 0050 01       		.byte	1
 4495 0051 000000   		.space	3
 4496 0054 02000000 		.word	2
 4497 0058 02       		.byte	2
 4498 0059 000000   		.space	3
 4499 005c 02000000 		.word	2
 4500 0060 03       		.byte	3
 4501 0061 000000   		.space	3
 4502 0064 02000000 		.word	2
 4503 0068 0C       		.byte	12
 4504 0069 000000   		.space	3
 4505 006c 01000000 		.word	1
 4506 0070 31       		.byte	49
 4507 0071 000000   		.space	3
 4508 0074 01000000 		.word	1
 4509 0078 2F       		.byte	47
 4510 0079 000000   		.space	3
 4511 007c 04000000 		.word	4
 4512 0080 2F       		.byte	47
 4513 0081 000000   		.space	3
 4514 0084 02000000 		.word	2
 4515 0088 2F       		.byte	47
 4516 0089 000000   		.space	3
 4517 008c 01000000 		.word	1
 4518 0090 18       		.byte	24
 4519 0091 000000   		.space	3
 4520 0094 00000000 		.word	0
 4521 0098 20       		.byte	32
 4522 0099 000000   		.space	3
 4523 009c 01000000 		.word	1
 4524 00a0 2F       		.byte	47
 4525 00a1 000000   		.space	3
ARM GAS  /tmp/ccUw5X70.s 			page 111


 4526 00a4 0E000000 		.word	14
 4527 00a8 1C       		.byte	28
 4528 00a9 000000   		.space	3
 4529 00ac 03000000 		.word	3
 4530 00b0 2F       		.byte	47
 4531 00b1 000000   		.space	3
 4532 00b4 0C000000 		.word	12
 4533 00b8 1E       		.byte	30
 4534 00b9 000000   		.space	3
 4535 00bc 00000000 		.word	0
 4536 00c0 2F       		.byte	47
 4537 00c1 000000   		.space	3
 4538 00c4 03000000 		.word	3
 4539 00c8 04       		.byte	4
 4540 00c9 000000   		.space	3
 4541 00cc 03000000 		.word	3
 4542 00d0 2F       		.byte	47
 4543 00d1 000000   		.space	3
 4544 00d4 0A000000 		.word	10
 4545 00d8 2F       		.byte	47
 4546 00d9 000000   		.space	3
 4547 00dc 0B000000 		.word	11
 4548 00e0 2A       		.byte	42
 4549 00e1 000000   		.space	3
 4550 00e4 00000000 		.word	0
 4551 00e8 2E       		.byte	46
 4552 00e9 000000   		.space	3
 4553 00ec 00000000 		.word	0
 4554 00f0 2E       		.byte	46
 4555 00f1 000000   		.space	3
 4556 00f4 00000000 		.word	0
 4557 00f8 20       		.byte	32
 4558 00f9 000000   		.space	3
 4559 00fc 03000000 		.word	3
 4560 0100 2E       		.byte	46
 4561 0101 000000   		.space	3
 4562 0104 00000000 		.word	0
 4563 0108 24       		.byte	36
 4564 0109 000000   		.space	3
 4565 010c 03000000 		.word	3
 4566 0110 2F       		.byte	47
 4567 0111 000000   		.space	3
 4568 0114 08000000 		.word	8
 4569 0118 0D       		.byte	13
 4570 0119 000000   		.space	3
 4571 011c 01000000 		.word	1
 4572 0120 27       		.byte	39
 4573 0121 000000   		.space	3
 4574 0124 03000000 		.word	3
 4575 0128 06       		.byte	6
 4576 0129 000000   		.space	3
 4577 012c 03000000 		.word	3
 4578 0130 2E       		.byte	46
 4579 0131 000000   		.space	3
 4580 0134 00000000 		.word	0
 4581 0138 2E       		.byte	46
 4582 0139 000000   		.space	3
ARM GAS  /tmp/ccUw5X70.s 			page 112


 4583 013c 00000000 		.word	0
 4584 0140 2E       		.byte	46
 4585 0141 000000   		.space	3
 4586 0144 00000000 		.word	0
 4587 0148 2E       		.byte	46
 4588 0149 000000   		.space	3
 4589 014c 00000000 		.word	0
 4590 0150 2E       		.byte	46
 4591 0151 000000   		.space	3
 4592 0154 00000000 		.word	0
 4593 0158 2E       		.byte	46
 4594 0159 000000   		.space	3
 4595 015c 00000000 		.word	0
 4596 0160 2E       		.byte	46
 4597 0161 000000   		.space	3
 4598 0164 00000000 		.word	0
 4599 0168 2F       		.byte	47
 4600 0169 000000   		.space	3
 4601 016c FFFFFFFF 		.word	-1
 4602 0170 2F       		.byte	47
 4603 0171 000000   		.space	3
 4604 0174 05000000 		.word	5
 4605              		.section	.rodata.mapping_gshift.10883,"a"
 4606              		.align	2
 4607              		.set	.LANCHOR12,. + 0
 4610              	mapping_gshift.10883:
 4611 0000 63       		.byte	99
 4612 0001 000000   		.space	3
 4613 0004 FFFFFFFF 		.word	-1
 4614 0008 28       		.byte	40
 4615 0009 000000   		.space	3
 4616 000c 03000000 		.word	3
 4617 0010 16       		.byte	22
 4618 0011 000000   		.space	3
 4619 0014 01000000 		.word	1
 4620 0018 1C       		.byte	28
 4621 0019 000000   		.space	3
 4622 001c 01000000 		.word	1
 4623 0020 13       		.byte	19
 4624 0021 000000   		.space	3
 4625 0024 02000000 		.word	2
 4626 0028 2E       		.byte	46
 4627 0029 000000   		.space	3
 4628 002c 00000000 		.word	0
 4629 0030 2E       		.byte	46
 4630 0031 000000   		.space	3
 4631 0034 00000000 		.word	0
 4632 0038 2E       		.byte	46
 4633 0039 000000   		.space	3
 4634 003c 00000000 		.word	0
 4635 0040 07       		.byte	7
 4636 0041 000000   		.space	3
 4637 0044 03000000 		.word	3
 4638 0048 08       		.byte	8
 4639 0049 000000   		.space	3
 4640 004c 03000000 		.word	3
 4641 0050 2F       		.byte	47
ARM GAS  /tmp/ccUw5X70.s 			page 113


 4642 0051 000000   		.space	3
 4643 0054 04000000 		.word	4
 4644 0058 2F       		.byte	47
 4645 0059 000000   		.space	3
 4646 005c 04000000 		.word	4
 4647 0060 2F       		.byte	47
 4648 0061 000000   		.space	3
 4649 0064 04000000 		.word	4
 4650 0068 0C       		.byte	12
 4651 0069 000000   		.space	3
 4652 006c 02000000 		.word	2
 4653 0070 2F       		.byte	47
 4654 0071 000000   		.space	3
 4655 0074 06000000 		.word	6
 4656 0078 05       		.byte	5
 4657 0079 000000   		.space	3
 4658 007c 03000000 		.word	3
 4659 0080 2E       		.byte	46
 4660 0081 000000   		.space	3
 4661 0084 00000000 		.word	0
 4662 0088 2E       		.byte	46
 4663 0089 000000   		.space	3
 4664 008c 00000000 		.word	0
 4665 0090 2E       		.byte	46
 4666 0091 000000   		.space	3
 4667 0094 00000000 		.word	0
 4668 0098 2E       		.byte	46
 4669 0099 000000   		.space	3
 4670 009c 00000000 		.word	0
 4671 00a0 2E       		.byte	46
 4672 00a1 000000   		.space	3
 4673 00a4 00000000 		.word	0
 4674 00a8 1B       		.byte	27
 4675 00a9 000000   		.space	3
 4676 00ac 03000000 		.word	3
 4677 00b0 1A       		.byte	26
 4678 00b1 000000   		.space	3
 4679 00b4 03000000 		.word	3
 4680 00b8 2E       		.byte	46
 4681 00b9 000000   		.space	3
 4682 00bc 00000000 		.word	0
 4683 00c0 2E       		.byte	46
 4684 00c1 000000   		.space	3
 4685 00c4 00000000 		.word	0
 4686 00c8 0C       		.byte	12
 4687 00c9 000000   		.space	3
 4688 00cc 03000000 		.word	3
 4689 00d0 1F       		.byte	31
 4690 00d1 000000   		.space	3
 4691 00d4 03000000 		.word	3
 4692 00d8 19       		.byte	25
 4693 00d9 000000   		.space	3
 4694 00dc 03000000 		.word	3
 4695 00e0 2A       		.byte	42
 4696 00e1 000000   		.space	3
 4697 00e4 FFFFFFFF 		.word	-1
 4698 00e8 2E       		.byte	46
ARM GAS  /tmp/ccUw5X70.s 			page 114


 4699 00e9 000000   		.space	3
 4700 00ec 00000000 		.word	0
 4701 00f0 2E       		.byte	46
 4702 00f1 000000   		.space	3
 4703 00f4 00000000 		.word	0
 4704 00f8 21       		.byte	33
 4705 00f9 000000   		.space	3
 4706 00fc 03000000 		.word	3
 4707 0100 2E       		.byte	46
 4708 0101 000000   		.space	3
 4709 0104 00000000 		.word	0
 4710 0108 24       		.byte	36
 4711 0109 000000   		.space	3
 4712 010c 00000000 		.word	0
 4713 0110 2F       		.byte	47
 4714 0111 000000   		.space	3
 4715 0114 0D000000 		.word	13
 4716 0118 2E       		.byte	46
 4717 0119 000000   		.space	3
 4718 011c 00000000 		.word	0
 4719 0120 2F       		.byte	47
 4720 0121 000000   		.space	3
 4721 0124 07000000 		.word	7
 4722 0128 1E       		.byte	30
 4723 0129 000000   		.space	3
 4724 012c 03000000 		.word	3
 4725 0130 2E       		.byte	46
 4726 0131 000000   		.space	3
 4727 0134 00000000 		.word	0
 4728 0138 2E       		.byte	46
 4729 0139 000000   		.space	3
 4730 013c 00000000 		.word	0
 4731 0140 2E       		.byte	46
 4732 0141 000000   		.space	3
 4733 0144 00000000 		.word	0
 4734 0148 2E       		.byte	46
 4735 0149 000000   		.space	3
 4736 014c 00000000 		.word	0
 4737 0150 2E       		.byte	46
 4738 0151 000000   		.space	3
 4739 0154 00000000 		.word	0
 4740 0158 2E       		.byte	46
 4741 0159 000000   		.space	3
 4742 015c 00000000 		.word	0
 4743 0160 2E       		.byte	46
 4744 0161 000000   		.space	3
 4745 0164 00000000 		.word	0
 4746 0168 2E       		.byte	46
 4747 0169 000000   		.space	3
 4748 016c 00000000 		.word	0
 4749 0170 2E       		.byte	46
 4750 0171 000000   		.space	3
 4751 0174 00000000 		.word	0
 4752              		.section	.rodata.mapping_none.10881,"a"
 4753              		.align	2
 4754              		.set	.LANCHOR8,. + 0
 4757              	mapping_none.10881:
ARM GAS  /tmp/ccUw5X70.s 			page 115


 4758 0000 63       		.byte	99
 4759 0001 000000   		.space	3
 4760 0004 FFFFFFFF 		.word	-1
 4761 0008 00       		.byte	0
 4762 0009 000000   		.space	3
 4763 000c 00000000 		.word	0
 4764 0010 01       		.byte	1
 4765 0011 000000   		.space	3
 4766 0014 00000000 		.word	0
 4767 0018 03       		.byte	3
 4768 0019 000000   		.space	3
 4769 001c 00000000 		.word	0
 4770 0020 13       		.byte	19
 4771 0021 000000   		.space	3
 4772 0024 02000000 		.word	2
 4773 0028 12       		.byte	18
 4774 0029 000000   		.space	3
 4775 002c 02000000 		.word	2
 4776 0030 12       		.byte	18
 4777 0031 000000   		.space	3
 4778 0034 00000000 		.word	0
 4779 0038 06       		.byte	6
 4780 0039 000000   		.space	3
 4781 003c 00000000 		.word	0
 4782 0040 07       		.byte	7
 4783 0041 000000   		.space	3
 4784 0044 00000000 		.word	0
 4785 0048 08       		.byte	8
 4786 0049 000000   		.space	3
 4787 004c 00000000 		.word	0
 4788 0050 01       		.byte	1
 4789 0051 000000   		.space	3
 4790 0054 01000000 		.word	1
 4791 0058 02       		.byte	2
 4792 0059 000000   		.space	3
 4793 005c 01000000 		.word	1
 4794 0060 03       		.byte	3
 4795 0061 000000   		.space	3
 4796 0064 01000000 		.word	1
 4797 0068 0C       		.byte	12
 4798 0069 000000   		.space	3
 4799 006c 00000000 		.word	0
 4800 0070 0D       		.byte	13
 4801 0071 000000   		.space	3
 4802 0074 00000000 		.word	0
 4803 0078 0E       		.byte	14
 4804 0079 000000   		.space	3
 4805 007c 00000000 		.word	0
 4806 0080 0F       		.byte	15
 4807 0081 000000   		.space	3
 4808 0084 00000000 		.word	0
 4809 0088 10       		.byte	16
 4810 0089 000000   		.space	3
 4811 008c 00000000 		.word	0
 4812 0090 18       		.byte	24
 4813 0091 000000   		.space	3
 4814 0094 00000000 		.word	0
ARM GAS  /tmp/ccUw5X70.s 			page 116


 4815 0098 13       		.byte	19
 4816 0099 000000   		.space	3
 4817 009c 00000000 		.word	0
 4818 00a0 14       		.byte	20
 4819 00a1 000000   		.space	3
 4820 00a4 00000000 		.word	0
 4821 00a8 15       		.byte	21
 4822 00a9 000000   		.space	3
 4823 00ac 00000000 		.word	0
 4824 00b0 16       		.byte	22
 4825 00b1 000000   		.space	3
 4826 00b4 00000000 		.word	0
 4827 00b8 1E       		.byte	30
 4828 00b9 000000   		.space	3
 4829 00bc 00000000 		.word	0
 4830 00c0 19       		.byte	25
 4831 00c1 000000   		.space	3
 4832 00c4 00000000 		.word	0
 4833 00c8 1A       		.byte	26
 4834 00c9 000000   		.space	3
 4835 00cc 00000000 		.word	0
 4836 00d0 1B       		.byte	27
 4837 00d1 000000   		.space	3
 4838 00d4 00000000 		.word	0
 4839 00d8 1C       		.byte	28
 4840 00d9 000000   		.space	3
 4841 00dc 00000000 		.word	0
 4842 00e0 29       		.byte	41
 4843 00e1 000000   		.space	3
 4844 00e4 00000000 		.word	0
 4845 00e8 1F       		.byte	31
 4846 00e9 000000   		.space	3
 4847 00ec 00000000 		.word	0
 4848 00f0 20       		.byte	32
 4849 00f1 000000   		.space	3
 4850 00f4 00000000 		.word	0
 4851 00f8 21       		.byte	33
 4852 00f9 000000   		.space	3
 4853 00fc 00000000 		.word	0
 4854 0100 22       		.byte	34
 4855 0101 000000   		.space	3
 4856 0104 00000000 		.word	0
 4857 0108 24       		.byte	36
 4858 0109 000000   		.space	3
 4859 010c 00000000 		.word	0
 4860 0110 25       		.byte	37
 4861 0111 000000   		.space	3
 4862 0114 00000000 		.word	0
 4863 0118 26       		.byte	38
 4864 0119 000000   		.space	3
 4865 011c 00000000 		.word	0
 4866 0120 27       		.byte	39
 4867 0121 000000   		.space	3
 4868 0124 00000000 		.word	0
 4869 0128 28       		.byte	40
 4870 0129 000000   		.space	3
 4871 012c 00000000 		.word	0
ARM GAS  /tmp/ccUw5X70.s 			page 117


 4872 0130 2E       		.byte	46
 4873 0131 000000   		.space	3
 4874 0134 00000000 		.word	0
 4875 0138 2E       		.byte	46
 4876 0139 000000   		.space	3
 4877 013c 00000000 		.word	0
 4878 0140 2E       		.byte	46
 4879 0141 000000   		.space	3
 4880 0144 00000000 		.word	0
 4881 0148 2E       		.byte	46
 4882 0149 000000   		.space	3
 4883 014c 00000000 		.word	0
 4884 0150 2E       		.byte	46
 4885 0151 000000   		.space	3
 4886 0154 00000000 		.word	0
 4887 0158 2E       		.byte	46
 4888 0159 000000   		.space	3
 4889 015c 00000000 		.word	0
 4890 0160 2E       		.byte	46
 4891 0161 000000   		.space	3
 4892 0164 00000000 		.word	0
 4893 0168 2E       		.byte	46
 4894 0169 000000   		.space	3
 4895 016c 00000000 		.word	0
 4896 0170 2E       		.byte	46
 4897 0171 000000   		.space	3
 4898 0174 00000000 		.word	0
 4899              		.section	.rodata.mid_menu,"a"
 4900              		.align	2
 4903              	mid_menu:
 4904 0000 C8C400   		.ascii	"\310\304\000"
 4905              		.text
 4906              	.Letext0:
 4907              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 4908              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 4909              		.file 6 "/usr/include/newlib/sys/_types.h"
 4910              		.file 7 "/usr/include/newlib/sys/reent.h"
 4911              		.file 8 "/usr/include/newlib/sys/lock.h"
 4912              		.file 9 "/usr/include/newlib/stdlib.h"
 4913              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 4914              		.file 11 "/usr/include/newlib/ctype.h"
 4915              		.file 12 "dmcp/ff_ifc.h"
 4916              		.file 13 "dmcp/dmcp.h"
 4917              		.file 14 "src/keys.h"
 4918              		.file 15 "src/decNumber/decContext.h"
 4919              		.file 16 "src/decNumber/decNumber.h"
 4920              		.file 17 "src/decNumber/decimal64.h"
 4921              		.file 18 "src/decNumber/decimal128.h"
 4922              		.file 19 "src/xeq.h"
 4923              		.file 20 "src/data.h"
 4924              		.file 21 "src/display.h"
 4925              		.file 22 "src/consts.h"
 4926              		.file 23 "src/storage.h"
 4927              		.file 24 "src/catalogues.h"
 4928              		.file 25 "src/menu.h"
 4929              		.file 26 "src/lcd.h"
 4930              		.file 27 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccUw5X70.s 			page 118


 4931              		.file 28 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccUw5X70.s 			page 119


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccUw5X70.s:18     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccUw5X70.s:26     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccUw5X70.s:392    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/ccUw5X70.s:400    .text.set_menu:0000000000000000 $t
     /tmp/ccUw5X70.s:408    .text.set_menu:0000000000000000 set_menu
     /tmp/ccUw5X70.s:458    .text.set_menu:0000000000000024 $d
     /tmp/ccUw5X70.s:464    .text.get_menu:0000000000000000 $t
     /tmp/ccUw5X70.s:472    .text.get_menu:0000000000000000 get_menu
     /tmp/ccUw5X70.s:488    .text.get_menu:0000000000000008 $d
     /tmp/ccUw5X70.s:493    .text.set_last_menu:0000000000000000 $t
     /tmp/ccUw5X70.s:501    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccUw5X70.s:550    .text.set_last_menu:0000000000000014 $d
     /tmp/ccUw5X70.s:556    .text.mdot:0000000000000000 $t
     /tmp/ccUw5X70.s:564    .text.mdot:0000000000000000 mdot
     /tmp/ccUw5X70.s:655    .text.mdot:000000000000003c $d
     /tmp/ccUw5X70.s:660    .text.display_menu:0000000000000000 $t
     /tmp/ccUw5X70.s:668    .text.display_menu:0000000000000000 display_menu
     /tmp/ccUw5X70.s:907    .text.display_menu:000000000000010c $d
     /tmp/ccUw5X70.s:915    .text.display_current_menu:0000000000000000 $t
     /tmp/ccUw5X70.s:923    .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccUw5X70.s:938    .text.display_current_menu:0000000000000008 $d
     /tmp/ccUw5X70.s:943    .text.all_menu_dots:0000000000000000 $t
     /tmp/ccUw5X70.s:951    .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccUw5X70.s:1035   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccUw5X70.s:1040   .text.shutdown:0000000000000000 $t
     /tmp/ccUw5X70.s:1048   .text.shutdown:0000000000000000 shutdown
     /tmp/ccUw5X70.s:1066   .text.shutdown:000000000000000c $d
     /tmp/ccUw5X70.s:1071   .text.is_key_pressed:0000000000000000 $t
     /tmp/ccUw5X70.s:1079   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccUw5X70.s:1102   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccUw5X70.s:1107   .text.get_key:0000000000000000 $t
     /tmp/ccUw5X70.s:1115   .text.get_key:0000000000000000 get_key
     /tmp/ccUw5X70.s:1130   .text.get_key:0000000000000004 $d
     /tmp/ccUw5X70.s:1135   .text.put_key:0000000000000000 $t
     /tmp/ccUw5X70.s:1143   .text.put_key:0000000000000000 put_key
     /tmp/ccUw5X70.s:1160   .text.put_key:0000000000000004 $d
     /tmp/ccUw5X70.s:1165   .text.shift_down:0000000000000000 $t
     /tmp/ccUw5X70.s:1173   .text.shift_down:0000000000000000 shift_down
     /tmp/ccUw5X70.s:1188   .text.start_key_timer:0000000000000000 $t
     /tmp/ccUw5X70.s:1196   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccUw5X70.s:1220   .text.start_key_timer:000000000000000c $d
     /tmp/ccUw5X70.s:1226   .text.keyticks:0000000000000000 $t
     /tmp/ccUw5X70.s:1234   .text.keyticks:0000000000000000 keyticks
     /tmp/ccUw5X70.s:1265   .text.keyticks:0000000000000018 $d
     /tmp/ccUw5X70.s:1271   .text.moveto:0000000000000000 $t
     /tmp/ccUw5X70.s:1279   .text.moveto:0000000000000000 moveto
     /tmp/ccUw5X70.s:1339   .text.moveto:000000000000002c $d
     /tmp/ccUw5X70.s:1346   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccUw5X70.s:1350   .text.print_debug:0000000000000000 $t
     /tmp/ccUw5X70.s:1358   .text.print_debug:0000000000000000 print_debug
     /tmp/ccUw5X70.s:1460   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccUw5X70.s:1471   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccUw5X70.s:1475   .text.print_debug2:0000000000000000 $t
     /tmp/ccUw5X70.s:1483   .text.print_debug2:0000000000000000 print_debug2
ARM GAS  /tmp/ccUw5X70.s 			page 120


     /tmp/ccUw5X70.s:1585   .text.print_debug2:0000000000000064 $d
     /tmp/ccUw5X70.s:1596   .text.do_now:0000000000000000 $t
     /tmp/ccUw5X70.s:1604   .text.do_now:0000000000000000 do_now
     /tmp/ccUw5X70.s:1639   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccUw5X70.s:1643   .text.do_multi:0000000000000000 $t
     /tmp/ccUw5X70.s:1651   .text.do_multi:0000000000000000 do_multi
     /tmp/ccUw5X70.s:1682   .text.do_multi:000000000000001a $d
     /tmp/ccUw5X70.s:1994   .text.do_multi:0000000000000148 $d
     /tmp/ccUw5X70.s:2001   .text.program_main:0000000000000000 $t
     /tmp/ccUw5X70.s:2009   .text.program_main:0000000000000000 program_main
     /tmp/ccUw5X70.s:2502   .text.program_main:0000000000000210 $d
     /tmp/ccUw5X70.s:2509   .text.program_main:000000000000021c $t
     /tmp/ccUw5X70.s:2683   .text.program_main:00000000000002ac $d
     /tmp/ccUw5X70.s:2728   .text.program_main:0000000000000344 $t
     /tmp/ccUw5X70.s:3227   .text.program_main:000000000000059c $d
     /tmp/ccUw5X70.s:3281   .bss.n_p:0000000000000000 n_p
     /tmp/ccUw5X70.s:3349   .data.spaces:0000000000000000 spaces
     /tmp/ccUw5X70.s:3340   .data.release:0000000000000000 release
     /tmp/ccUw5X70.s:3313   .data.h_shift:0000000000000000 h_shift
     /tmp/ccUw5X70.s:3304   .data.g_shift:0000000000000000 g_shift
     /tmp/ccUw5X70.s:3295   .data.f_shift:0000000000000000 f_shift
     /tmp/ccUw5X70.s:3322   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccUw5X70.s:3331   .data.no_key:0000000000000000 no_key
     /tmp/ccUw5X70.s:3356   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccUw5X70.s:3252   .rodata.str1.4:0000000000000000 $d
     /tmp/ccUw5X70.s:4903   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccUw5X70.s:3257   .bss.current_menu:0000000000000000 $d
     /tmp/ccUw5X70.s:3261   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccUw5X70.s:3264   .bss.last_menu:0000000000000000 $d
     /tmp/ccUw5X70.s:3268   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccUw5X70.s:3271   .bss.mdots:0000000000000000 $d
     /tmp/ccUw5X70.s:3275   .bss.mdots:0000000000000000 mdots
     /tmp/ccUw5X70.s:3278   .bss.n_p:0000000000000000 $d
     /tmp/ccUw5X70.s:3284   .bss.start_ticks:0000000000000000 $d
     /tmp/ccUw5X70.s:3288   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccUw5X70.s:3291   .data.f_shift:0000000000000000 $d
     /tmp/ccUw5X70.s:3300   .data.g_shift:0000000000000000 $d
     /tmp/ccUw5X70.s:3309   .data.h_shift:0000000000000000 $d
     /tmp/ccUw5X70.s:3318   .data.heartbeat:0000000000000000 $d
     /tmp/ccUw5X70.s:3327   .data.no_key:0000000000000000 $d
     /tmp/ccUw5X70.s:3336   .data.release:0000000000000000 $d
     /tmp/ccUw5X70.s:3345   .data.spaces:0000000000000000 $d
     /tmp/ccUw5X70.s:3352   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccUw5X70.s:3362   .rodata.Menus:0000000000000000 $d
     /tmp/ccUw5X70.s:3366   .rodata.Menus:0000000000000000 Menus
     /tmp/ccUw5X70.s:4312   .rodata.mapping_alpha.10884:0000000000000000 $d
     /tmp/ccUw5X70.s:4316   .rodata.mapping_alpha.10884:0000000000000000 mapping_alpha.10884
     /tmp/ccUw5X70.s:4459   .rodata.mapping_fshift.10882:0000000000000000 $d
     /tmp/ccUw5X70.s:4463   .rodata.mapping_fshift.10882:0000000000000000 mapping_fshift.10882
     /tmp/ccUw5X70.s:4606   .rodata.mapping_gshift.10883:0000000000000000 $d
     /tmp/ccUw5X70.s:4610   .rodata.mapping_gshift.10883:0000000000000000 mapping_gshift.10883
     /tmp/ccUw5X70.s:4753   .rodata.mapping_none.10881:0000000000000000 $d
     /tmp/ccUw5X70.s:4757   .rodata.mapping_none.10881:0000000000000000 mapping_none.10881
     /tmp/ccUw5X70.s:4900   .rodata.mid_menu:0000000000000000 $d
     /tmp/ccUw5X70.s:1693   .text.do_multi:0000000000000025 $d
     /tmp/ccUw5X70.s:1693   .text.do_multi:0000000000000026 $t

ARM GAS  /tmp/ccUw5X70.s 			page 121


UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
pixel_length
strcpy
sprintf
process_keycode_with_shift
do_all_dots
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
get_alpha_state
cur_shift
StateWhileOn
DispMsg
JustDisplayed
Pause

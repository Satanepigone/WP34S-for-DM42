ARM GAS  /tmp/ccQIVay8.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_menu_label.constprop.0:
  27              	.LVL0:
  28              	.LFB27:
  29              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** void set_menu ( int new_menu ) {
   4:src/menu.c    ****   int m = current_menu;
   5:src/menu.c    ****   if (new_menu == current_menu) { // return to default
   6:src/menu.c    ****     current_menu = default_menu;
   7:src/menu.c    ****   }
   8:src/menu.c    ****   else if (new_menu == -1) { // go to last menu
   9:src/menu.c    ****     current_menu = last_menu;
  10:src/menu.c    ****   }
  11:src/menu.c    ****   else {
  12:src/menu.c    ****     current_menu = new_menu; // change to new menu
  13:src/menu.c    ****   }
  14:src/menu.c    ****   if (m != 9) last_menu = m; // store menu as last menu unless it's arrow!
  15:src/menu.c    **** }
  16:src/menu.c    **** 
  17:src/menu.c    **** void toggle_default_menu () {
  18:src/menu.c    ****   if (current_menu == default_menu) {
  19:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
  20:src/menu.c    ****   }
  21:src/menu.c    **** }
  22:src/menu.c    **** 
  23:src/menu.c    **** int get_menu () {
  24:src/menu.c    ****   return current_menu;
  25:src/menu.c    **** }
  26:src/menu.c    **** 
  27:src/menu.c    **** void display_current_menu () {
  28:src/menu.c    ****   display_menu (current_menu);
  29:src/menu.c    **** }
ARM GAS  /tmp/ccQIVay8.s 			page 2


  30:src/menu.c    **** 
  31:src/menu.c    **** void set_last_menu () {
  32:src/menu.c    ****   set_menu (last_menu);
  33:src/menu.c    **** }
  34:src/menu.c    **** 
  35:src/menu.c    **** static unsigned char mdots[200][2];
  36:src/menu.c    **** 
  37:src/menu.c    **** static const struct _menu Menus[] = {
  38:src/menu.c    ****   {
  39:src/menu.c    ****     "Blank", // 0
  40:src/menu.c    ****     { 
  41:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  42:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  43:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  44:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  45:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  46:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  47:src/menu.c    ****     }    
  48:src/menu.c    ****   },
  49:src/menu.c    ****   {
  50:src/menu.c    ****     "Clear", // 1
  51:src/menu.c    ****     { 
  52:src/menu.c    ****       { { K24, 1 }, NO_KEY, "CLProg", "" },
  53:src/menu.c    ****       { { K24, 2 }, NO_KEY, "CL\221", "" },
  54:src/menu.c    ****       { { K24, 3 }, NO_KEY, "CL X", "" },
  55:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  56:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  57:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  58:src/menu.c    ****     }    
  59:src/menu.c    ****   },
  60:src/menu.c    ****   {
  61:src/menu.c    ****     "DISP", // 2
  62:src/menu.c    ****     { 
  63:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
  64:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
  65:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
  66:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
  67:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
  68:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  69:src/menu.c    ****     }
  70:src/menu.c    ****   },
  71:src/menu.c    ****   {
  72:src/menu.c    ****     "BASE", // 3
  73:src/menu.c    ****     { 
  74:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
  75:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
  76:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
  77:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
  78:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
  79:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
  80:src/menu.c    ****     }
  81:src/menu.c    ****   },
  82:src/menu.c    ****   {
  83:src/menu.c    ****     "ANGLES", // 4
  84:src/menu.c    ****     { 
  85:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
  86:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
ARM GAS  /tmp/ccQIVay8.s 			page 3


  87:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
  88:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
  89:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
  90:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  91:src/menu.c    ****     }
  92:src/menu.c    ****       
  93:src/menu.c    ****   },
  94:src/menu.c    ****   {
  95:src/menu.c    ****     "MISC", // 5
  96:src/menu.c    ****     { 
  97:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
  98:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
  99:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 100:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 101:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 102:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 103:src/menu.c    ****     }
 104:src/menu.c    ****   },
 105:src/menu.c    ****   {
 106:src/menu.c    ****     "X<>Y Key", // 6
 107:src/menu.c    ****     { 
 108:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 109:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 110:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 111:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 112:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 113:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 114:src/menu.c    ****     }    
 115:src/menu.c    ****   },
 116:src/menu.c    ****   {
 117:src/menu.c    ****     "Program", // 7
 118:src/menu.c    ****     { 
 119:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 120:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 121:src/menu.c    ****       { { K61, 3 }, NO_KEY, "Pause", "" },
 122:src/menu.c    ****       { { K30, 3 }, NO_KEY, "GTO", "" },
 123:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 124:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 125:src/menu.c    ****     }
 126:src/menu.c    ****   },
 127:src/menu.c    ****   {
 128:src/menu.c    ****     "Setup 1", // 8
 129:src/menu.c    ****     { 
 130:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 131:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 132:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 133:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 134:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 135:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 136:src/menu.c    ****     }
 137:src/menu.c    ****   },
 138:src/menu.c    ****   {
 139:src/menu.c    ****     "Arrow", // 9
 140:src/menu.c    ****     { 
 141:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 142:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 143:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
ARM GAS  /tmp/ccQIVay8.s 			page 4


 144:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "2HMS" },
 145:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS2" },
 146:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 147:src/menu.c    ****     }
 148:src/menu.c    ****   },
 149:src/menu.c    ****   {
 150:src/menu.c    ****     "Flags", // 10
 151:src/menu.c    ****     { 
 152:src/menu.c    ****       { { K50, 1 }, NO_KEY, "SF_", "" },
 153:src/menu.c    ****       { { K50, 2 }, NO_KEY, "CF_", "" },
 154:src/menu.c    ****       { { K51, 1 }, NO_KEY, "x=?", "" },
 155:src/menu.c    ****       { { K51, 2 }, NO_KEY, "x\013?", "" },
 156:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 157:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 158:src/menu.c    ****     }
 159:src/menu.c    ****   },
 160:src/menu.c    ****   {
 161:src/menu.c    ****     "Probability", // 11
 162:src/menu.c    ****     { 
 163:src/menu.c    ****       { { K40, 3 }, { K41, 1 }, "Fact!", "\224" },
 164:src/menu.c    ****       { { K40, 1 }, { K41, 2 }, "Cy,x", "\224\235" },
 165:src/menu.c    ****       { { K40, 2 }, NO_KEY, "Py,x", "" },
 166:src/menu.c    ****       { { K12, 1 }, NO_KEY, "RAN#", "" },
 167:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 168:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 169:src/menu.c    ****     }
 170:src/menu.c    ****   },
 171:src/menu.c    ****   {
 172:src/menu.c    ****     "Statistics", // 12
 173:src/menu.c    ****     { 
 174:src/menu.c    ****       { { K42, 1 }, { K43, 3 }, "Xbar", "SUMS" },
 175:src/menu.c    ****       { { K43, 1 }, NO_KEY, "Yhat", "" },
 176:src/menu.c    ****       { { K42, 2 }, NO_KEY, "s", "" },
 177:src/menu.c    ****       { { K43, 2 }, NO_KEY, "r", "" },
 178:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 179:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 180:src/menu.c    ****     }
 181:src/menu.c    ****   },
 182:src/menu.c    ****   {
 183:src/menu.c    ****     "Setup 2", // 13
 184:src/menu.c    ****     { 
 185:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 186:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 187:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 188:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 189:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 190:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 191:src/menu.c    ****     }
 192:src/menu.c    ****   },
 193:src/menu.c    ****   {
 194:src/menu.c    ****     "Integ/Sum/Prod", // 14
 195:src/menu.c    ****     { 
 196:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 197:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 198:src/menu.c    ****       { { K53, 1 }, NO_KEY, "SUM", "" },
 199:src/menu.c    ****       { { K53, 2 }, NO_KEY, "PROD", "" },
 200:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
ARM GAS  /tmp/ccQIVay8.s 			page 5


 201:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 202:src/menu.c    ****     }
 203:src/menu.c    ****   },
 204:src/menu.c    ****   {
 205:src/menu.c    ****     "Blank with A-D", // 15
 206:src/menu.c    ****     { 
 207:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 208:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 209:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 210:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 211:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 212:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 213:src/menu.c    ****     }    
 214:src/menu.c    ****   },
 215:src/menu.c    **** };  
 216:src/menu.c    **** 
 217:src/menu.c    **** /* This code is the set_status_sized code with small changes
 218:src/menu.c    ****  * and non-DM42 code removed.
 219:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 220:src/menu.c    ****  */
 221:src/menu.c    **** #define MENU_WIDTH 32
 222:src/menu.c    **** 
 223:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  30              		.loc 1 223 13 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 544
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 224:src/menu.c    ****   // dotcol is the number of the starting dot column
 225:src/menu.c    ****   // shifted is 1 if shifted
 226:src/menu.c    ****   unsigned short int posns[257];
  34              		.loc 1 226 3 view .LVU1
 227:src/menu.c    **** 
 228:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 229:src/menu.c    ****   int posns_state = 255;
  35              		.loc 1 229 3 view .LVU2
 230:src/menu.c    **** 
 231:src/menu.c    ****   int x = dotcol;
  36              		.loc 1 231 3 view .LVU3
 223:src/menu.c    ****   // dotcol is the number of the starting dot column
  37              		.loc 1 223 13 is_stmt 0 view .LVU4
  38 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  39              		.cfi_def_cfa_offset 36
  40              		.cfi_offset 4, -36
  41              		.cfi_offset 5, -32
  42              		.cfi_offset 6, -28
  43              		.cfi_offset 7, -24
  44              		.cfi_offset 8, -20
  45              		.cfi_offset 9, -16
  46              		.cfi_offset 10, -12
  47              		.cfi_offset 11, -8
  48              		.cfi_offset 14, -4
  49 0004 ADF5097D 		sub	sp, sp, #548
  50              		.cfi_def_cfa_offset 584
 223:src/menu.c    ****   // dotcol is the number of the starting dot column
  51              		.loc 1 223 13 view .LVU5
  52 0008 CDE90102 		strd	r0, r2, [sp, #4]
 232:src/menu.c    ****   int i, j, xmax;
ARM GAS  /tmp/ccQIVay8.s 			page 6


 233:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  53              		.loc 1 233 18 view .LVU6
  54 000c 0029     		cmp	r1, #0
  55 000e B4BF     		ite	lt
  56 0010 01F11F03 		addlt	r3, r1, #31
  57 0014 0B46     		movge	r3, r1
 234:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 235:src/menu.c    **** 
 236:src/menu.c    ****   forceDispPlot=0;
  58              		.loc 1 236 16 view .LVU7
  59 0016 4848     		ldr	r0, .L36
  60              	.LVL1:
 223:src/menu.c    ****   // dotcol is the number of the starting dot column
  61              		.loc 1 223 13 view .LVU8
  62 0018 0F46     		mov	r7, r1
  63              	.LVL2:
 232:src/menu.c    ****   int i, j, xmax;
  64              		.loc 1 232 3 is_stmt 1 view .LVU9
 233:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  65              		.loc 1 233 3 view .LVU10
 237:src/menu.c    **** 
 238:src/menu.c    **** #ifdef RP_PREFIX
 239:src/menu.c    ****   RectPolConv = 0;
  66              		.loc 1 239 15 is_stmt 0 view .LVU11
  67 001a 4849     		ldr	r1, .L36+4
  68              	.LVL3:
 236:src/menu.c    **** 
  69              		.loc 1 236 16 view .LVU12
  70 001c 0022     		movs	r2, #0
  71              	.LVL4:
 236:src/menu.c    **** 
  72              		.loc 1 236 16 view .LVU13
  73 001e 0270     		strb	r2, [r0]
  74              		.loc 1 239 15 view .LVU14
  75 0020 0A60     		str	r2, [r1]
 240:src/menu.c    **** #endif
 241:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
  76              		.loc 1 241 10 view .LVU15
  77 0022 019A     		ldr	r2, [sp, #4]
  78 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 233:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  79              		.loc 1 233 30 view .LVU16
  80 0026 23F01F03 		bic	r3, r3, #31
 233:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  81              		.loc 1 233 8 view .LVU17
  82 002a 03F12009 		add	r9, r3, #32
  83              	.LVL5:
 234:src/menu.c    **** 
  84              		.loc 1 234 3 is_stmt 1 view .LVU18
 236:src/menu.c    **** 
  85              		.loc 1 236 3 view .LVU19
 239:src/menu.c    **** #endif
  86              		.loc 1 239 3 view .LVU20
  87              		.loc 1 241 3 view .LVU21
  88              		.loc 1 241 9 view .LVU22
  89 002e 002D     		cmp	r5, #0
  90 0030 78D0     		beq	.L1
ARM GAS  /tmp/ccQIVay8.s 			page 7


  91              		.loc 1 241 23 is_stmt 0 view .LVU23
  92 0032 4F45     		cmp	r7, r9
  93 0034 76DC     		bgt	.L1
  94              	.LBB39:
 242:src/menu.c    ****     int c;
 243:src/menu.c    ****     int width;
 244:src/menu.c    ****     unsigned char cmap[6];
 245:src/menu.c    **** 
 246:src/menu.c    ****     int real_width;
 247:src/menu.c    ****     int current_smallp;
 248:src/menu.c    **** 
 249:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 250:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 251:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 252:src/menu.c    ****     //           01 -> (not used)
 253:src/menu.c    ****     //           10 -> use big font
 254:src/menu.c    ****     //           11 -> use small font
 255:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 256:src/menu.c    ****     if (str[0] == '\007') {
  95              		.loc 1 256 8 view .LVU24
  96 0036 072D     		cmp	r5, #7
  97              	.LBE39:
 229:src/menu.c    **** 
  98              		.loc 1 229 7 view .LVU25
  99 0038 4FF0FF04 		mov	r4, #255
 100              	.LVL6:
 101              	.LBB56:
 242:src/menu.c    ****     int c;
 102              		.loc 1 242 5 is_stmt 1 view .LVU26
 243:src/menu.c    ****     unsigned char cmap[6];
 103              		.loc 1 243 5 view .LVU27
 244:src/menu.c    **** 
 104              		.loc 1 244 5 view .LVU28
 246:src/menu.c    ****     int current_smallp;
 105              		.loc 1 246 5 view .LVU29
 247:src/menu.c    **** 
 106              		.loc 1 247 5 view .LVU30
 107              		.loc 1 256 5 view .LVU31
 257:src/menu.c    ****       width = str[1] & 0x1F;
 258:src/menu.c    ****       switch (str[1] & 0x60) {
 259:src/menu.c    ****       default:
 260:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 261:src/menu.c    **** 	break;
 262:src/menu.c    ****       case 0x40:	current_smallp = 0;
 263:src/menu.c    **** 	break;
 264:src/menu.c    ****       case 0x60:	current_smallp = 1;
 108              		.loc 1 264 33 is_stmt 0 view .LVU32
 109 003c 4FF0010A 		mov	r10, #1
 256:src/menu.c    ****       width = str[1] & 0x1F;
 110              		.loc 1 256 8 view .LVU33
 111 0040 64D1     		bne	.L5
 112              	.LVL7:
 113              	.L34:
 257:src/menu.c    ****       width = str[1] & 0x1F;
 114              		.loc 1 257 7 is_stmt 1 view .LVU34
 257:src/menu.c    ****       width = str[1] & 0x1F;
 115              		.loc 1 257 18 is_stmt 0 view .LVU35
ARM GAS  /tmp/ccQIVay8.s 			page 8


 116 0042 019B     		ldr	r3, [sp, #4]
 117 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 118 0046 06F06003 		and	r3, r6, #96
 258:src/menu.c    ****       default:
 119              		.loc 1 258 7 view .LVU36
 120 004a 402B     		cmp	r3, #64
 257:src/menu.c    ****       width = str[1] & 0x1F;
 121              		.loc 1 257 13 view .LVU37
 122 004c 06F01F06 		and	r6, r6, #31
 123              	.LVL8:
 258:src/menu.c    ****       default:
 124              		.loc 1 258 7 is_stmt 1 view .LVU38
 125 0050 6CD0     		beq	.L28
 126 0052 602B     		cmp	r3, #96
 127 0054 6AD1     		bne	.L28
 128              		.loc 1 264 18 view .LVU39
 129              	.LVL9:
 265:src/menu.c    **** 	break;
 130              		.loc 1 265 2 view .LVU40
 266:src/menu.c    ****       }
 267:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 131              		.loc 1 267 7 view .LVU41
 132              		.loc 1 267 11 is_stmt 0 view .LVU42
 133 0056 019B     		ldr	r3, [sp, #4]
 134 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 264:src/menu.c    **** 	break;
 135              		.loc 1 264 33 view .LVU43
 136 005a 0123     		movs	r3, #1
 137 005c 0093     		str	r3, [sp]
 138 005e 00F58075 		add	r5, r0, #256
 139              	.LVL10:
 140              	.L9:
 268:src/menu.c    ****       str += 3;
 141              		.loc 1 268 7 is_stmt 1 view .LVU44
 269:src/menu.c    **** 
 270:src/menu.c    ****       real_width = charlengths(c);
 142              		.loc 1 270 20 is_stmt 0 view .LVU45
 143 0062 2846     		mov	r0, r5
 144 0064 FFF7FEFF 		bl	charlengths
 145              	.LVL11:
 268:src/menu.c    ****       str += 3;
 146              		.loc 1 268 11 view .LVU46
 147 0068 019B     		ldr	r3, [sp, #4]
 148 006a 0333     		adds	r3, r3, #3
 149 006c 0193     		str	r3, [sp, #4]
 150              	.LVL12:
 151              		.loc 1 270 7 is_stmt 1 view .LVU47
 271:src/menu.c    ****     } else {
 272:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 273:src/menu.c    ****       real_width = width = charlengths(c);
 274:src/menu.c    ****       current_smallp = smallp;
 275:src/menu.c    ****     }
 276:src/menu.c    **** 
 277:src/menu.c    ****     if (x + real_width > xmax)
 152              		.loc 1 277 5 view .LVU48
 153              		.loc 1 277 11 is_stmt 0 view .LVU49
 154 006e C319     		adds	r3, r0, r7
ARM GAS  /tmp/ccQIVay8.s 			page 9


 155              	.LVL13:
 156              		.loc 1 277 8 view .LVU50
 157 0070 9945     		cmp	r9, r3
 158 0072 57DB     		blt	.L1
 159              	.L35:
 278:src/menu.c    ****       break;
 279:src/menu.c    **** 
 280:src/menu.c    ****     if (posns_state != current_smallp) {
 160              		.loc 1 280 5 is_stmt 1 view .LVU51
 161              		.loc 1 280 8 is_stmt 0 view .LVU52
 162 0074 009B     		ldr	r3, [sp]
 163 0076 A342     		cmp	r3, r4
 281:src/menu.c    ****       findlengths(posns, current_smallp);
 164              		.loc 1 281 7 view .LVU53
 165 0078 07AB     		add	r3, sp, #28
 280:src/menu.c    ****       findlengths(posns, current_smallp);
 166              		.loc 1 280 8 view .LVU54
 167 007a 05D0     		beq	.L12
 168              		.loc 1 281 7 is_stmt 1 view .LVU55
 169 007c 1846     		mov	r0, r3
 170              	.LVL14:
 171              		.loc 1 281 7 is_stmt 0 view .LVU56
 172 007e 0099     		ldr	r1, [sp]
 173 0080 0393     		str	r3, [sp, #12]
 174 0082 FFF7FEFF 		bl	findlengths
 175              	.LVL15:
 176 0086 039B     		ldr	r3, [sp, #12]
 282:src/menu.c    ****       posns_state = current_smallp;
 177              		.loc 1 282 7 is_stmt 1 view .LVU57
 178              	.LVL16:
 179              	.L12:
 283:src/menu.c    ****     }
 284:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 180              		.loc 1 284 5 view .LVU58
 181 0088 009A     		ldr	r2, [sp]
 182 008a 2846     		mov	r0, r5
 183 008c 05A9     		add	r1, sp, #20
 184 008e FFF7FEFF 		bl	unpackchar
 185              	.LVL17:
 285:src/menu.c    **** 
 286:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 186              		.loc 1 286 5 view .LVU59
 187              		.loc 1 286 15 view .LVU60
 188 0092 029B     		ldr	r3, [sp, #8]
 189 0094 03EB4704 		add	r4, r3, r7, lsl #1
 190 0098 294B     		ldr	r3, .L36+8
 191 009a 0DF1140B 		add	fp, sp, #20
 192 009e 1C44     		add	r4, r4, r3
 284:src/menu.c    **** 
 193              		.loc 1 284 5 is_stmt 0 view .LVU61
 194 00a0 4FF0050E 		mov	lr, #5
 195 00a4 A9EB0705 		sub	r5, r9, r7
 196              	.LVL18:
 197              	.L13:
 287:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 198              		.loc 1 287 17 is_stmt 1 view .LVU62
 199              		.loc 1 287 7 is_stmt 0 view .LVU63
ARM GAS  /tmp/ccQIVay8.s 			page 10


 200 00a8 002E     		cmp	r6, #0
 201 00aa 1FDD     		ble	.L19
 288:src/menu.c    **** 	if (x+j >= xmax)
 202              		.loc 1 288 2 is_stmt 1 view .LVU64
 203              		.loc 1 288 5 is_stmt 0 view .LVU65
 204 00ac B945     		cmp	r9, r7
 205 00ae 1DDD     		ble	.L19
 206              	.LBB40:
 207              	.LBB41:
 208              	.LBB42:
 209              	.LBB43:
 289:src/menu.c    **** 	  break;
 290:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 291:src/menu.c    ****       }
 292:src/menu.c    ****     }
 293:src/menu.c    ****     x += width;
 294:src/menu.c    ****   }
 295:src/menu.c    **** }
 296:src/menu.c    **** 
 297:src/menu.c    **** 
 298:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 299:src/menu.c    **** 
 300:src/menu.c    **** int pixel_length(const char *s, int smallp)
 301:src/menu.c    **** {
 302:src/menu.c    ****   int len = 0;
 303:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 304:src/menu.c    ****   while (*s != '\0') {
 305:src/menu.c    ****     if (s[0] == '\007') {
 306:src/menu.c    ****       len += s[1] & 0x1F;
 307:src/menu.c    ****       s += 3;
 308:src/menu.c    ****       continue;
 309:src/menu.c    ****     }
 310:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 311:src/menu.c    ****   }
 312:src/menu.c    ****   return len;
 313:src/menu.c    **** }
 314:src/menu.c    **** */
 315:src/menu.c    **** 
 316:src/menu.c    **** 
 317:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 318:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 319:src/menu.c    ****   if (on) {
 320:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 321:src/menu.c    ****   }
 322:src/menu.c    ****   else {
 323:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 210              		.loc 1 323 25 view .LVU66
 211 00b0 0AFA0EFC 		lsl	ip, r10, lr
 212              		.loc 1 323 17 view .LVU67
 213 00b4 4FFA8CFC 		sxtb	ip, ip
 214              	.LBE43:
 215              	.LBE42:
 216              	.LBE41:
 217              	.LBE40:
 290:src/menu.c    ****       }
 218              		.loc 1 290 31 view .LVU68
 219 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
ARM GAS  /tmp/ccQIVay8.s 			page 11


 220              	.LBB53:
 221              	.LBB50:
 222              	.LBB47:
 223              	.LBB44:
 224              		.loc 1 323 17 view .LVU69
 225 00bc 6FEA0C08 		mvn	r8, ip
 226              	.LBE44:
 227              	.LBE47:
 228              	.LBE50:
 229              	.LBE53:
 287:src/menu.c    **** 	if (x+j >= xmax)
 230              		.loc 1 287 13 view .LVU70
 231 00c0 0023     		movs	r3, #0
 232 00c2 01E0     		b	.L14
 233              	.LVL19:
 234              	.L18:
 288:src/menu.c    **** 	  break;
 235              		.loc 1 288 5 view .LVU71
 236 00c4 9D42     		cmp	r5, r3
 237 00c6 11D0     		beq	.L19
 238              	.LVL20:
 239              	.L14:
 290:src/menu.c    ****       }
 240              		.loc 1 290 2 is_stmt 1 view .LVU72
 241              	.LBB54:
 242              	.LBI40:
 317:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 243              		.loc 1 317 6 view .LVU73
 244              	.LBB51:
 318:src/menu.c    ****   if (on) {
 245              		.loc 1 318 3 view .LVU74
 246              	.LBB48:
 247              	.LBI42:
 317:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 248              		.loc 1 317 6 view .LVU75
 249              	.LBB45:
 319:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 250              		.loc 1 319 3 view .LVU76
 251              	.LBE45:
 252              	.LBE48:
 318:src/menu.c    ****   if (on) {
 253              		.loc 1 318 6 is_stmt 0 view .LVU77
 254 00c8 DA19     		adds	r2, r3, r7
 255              	.LVL21:
 318:src/menu.c    ****   if (on) {
 256              		.loc 1 318 6 view .LVU78
 257 00ca C72A     		cmp	r2, #199
 258              	.LBE51:
 259              	.LBE54:
 290:src/menu.c    ****       }
 260              		.loc 1 290 46 view .LVU79
 261 00cc 40FA03F1 		asr	r1, r0, r3
 262              	.LBB55:
 263              	.LBB52:
 318:src/menu.c    ****   if (on) {
 264              		.loc 1 318 6 view .LVU80
 265 00d0 09D8     		bhi	.L16
ARM GAS  /tmp/ccQIVay8.s 			page 12


 266              	.LBB49:
 267              	.LBB46:
 320:src/menu.c    ****   }
 268              		.loc 1 320 5 is_stmt 1 view .LVU81
 269              		.loc 1 323 5 view .LVU82
 320:src/menu.c    ****   }
 270              		.loc 1 320 17 is_stmt 0 view .LVU83
 271 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 272              	.LVL22:
 319:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 273              		.loc 1 319 6 view .LVU84
 274 00d6 C907     		lsls	r1, r1, #31
 320:src/menu.c    ****   }
 275              		.loc 1 320 17 view .LVU85
 276 00d8 4CBF     		ite	mi
 277 00da 4CEA0202 		orrmi	r2, ip, r2
 278              		.loc 1 323 17 view .LVU86
 279 00de 08EA0202 		andpl	r2, r8, r2
 280 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 281              	.L16:
 282              	.LBE46:
 283              	.LBE49:
 284              	.LBE52:
 285              	.LBE55:
 288:src/menu.c    **** 	  break;
 286              		.loc 1 288 2 is_stmt 1 view .LVU87
 287              	.LVL23:
 287:src/menu.c    **** 	if (x+j >= xmax)
 288              		.loc 1 287 26 view .LVU88
 287:src/menu.c    **** 	if (x+j >= xmax)
 289              		.loc 1 287 27 is_stmt 0 view .LVU89
 290 00e6 0133     		adds	r3, r3, #1
 291              	.LVL24:
 287:src/menu.c    **** 	if (x+j >= xmax)
 292              		.loc 1 287 17 is_stmt 1 view .LVU90
 287:src/menu.c    **** 	if (x+j >= xmax)
 293              		.loc 1 287 7 is_stmt 0 view .LVU91
 294 00e8 B342     		cmp	r3, r6
 295 00ea EBD1     		bne	.L18
 296              	.LVL25:
 297              	.L19:
 286:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 298              		.loc 1 286 20 is_stmt 1 view .LVU92
 286:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 299              		.loc 1 286 15 view .LVU93
 300 00ec 0EF1FF3E 		add	lr, lr, #-1
 286:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 301              		.loc 1 286 5 is_stmt 0 view .LVU94
 302 00f0 BEF1FF3F 		cmp	lr, #-1
 303 00f4 0BF1010B 		add	fp, fp, #1
 304              	.LVL26:
 286:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 305              		.loc 1 286 5 view .LVU95
 306 00f8 D6D1     		bne	.L13
 293:src/menu.c    ****   }
 307              		.loc 1 293 5 is_stmt 1 view .LVU96
 308              	.LBE56:
ARM GAS  /tmp/ccQIVay8.s 			page 13


 241:src/menu.c    ****     int c;
 309              		.loc 1 241 10 is_stmt 0 view .LVU97
 310 00fa 019B     		ldr	r3, [sp, #4]
 311 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 312              	.LBB57:
 293:src/menu.c    ****   }
 313              		.loc 1 293 7 view .LVU98
 314 00fe 3744     		add	r7, r7, r6
 315              	.LVL27:
 293:src/menu.c    ****   }
 316              		.loc 1 293 7 view .LVU99
 317              	.LBE57:
 241:src/menu.c    ****     int c;
 318              		.loc 1 241 9 is_stmt 1 view .LVU100
 319 0100 85B1     		cbz	r5, .L1
 241:src/menu.c    ****     int c;
 320              		.loc 1 241 23 is_stmt 0 view .LVU101
 321 0102 B945     		cmp	r9, r7
 322 0104 0EDB     		blt	.L1
 323              	.LBB58:
 256:src/menu.c    ****       width = str[1] & 0x1F;
 324              		.loc 1 256 8 view .LVU102
 325 0106 072D     		cmp	r5, #7
 326              	.LBE58:
 327 0108 009C     		ldr	r4, [sp]
 328              	.LBB59:
 242:src/menu.c    ****     int width;
 329              		.loc 1 242 5 is_stmt 1 view .LVU103
 243:src/menu.c    ****     unsigned char cmap[6];
 330              		.loc 1 243 5 view .LVU104
 244:src/menu.c    **** 
 331              		.loc 1 244 5 view .LVU105
 246:src/menu.c    ****     int current_smallp;
 332              		.loc 1 246 5 view .LVU106
 247:src/menu.c    **** 
 333              		.loc 1 247 5 view .LVU107
 256:src/menu.c    ****       width = str[1] & 0x1F;
 334              		.loc 1 256 5 view .LVU108
 256:src/menu.c    ****       width = str[1] & 0x1F;
 335              		.loc 1 256 8 is_stmt 0 view .LVU109
 336 010a 9AD0     		beq	.L34
 337              	.LVL28:
 338              	.L5:
 272:src/menu.c    ****       real_width = width = charlengths(c);
 339              		.loc 1 272 7 is_stmt 1 view .LVU110
 273:src/menu.c    ****       current_smallp = smallp;
 340              		.loc 1 273 28 is_stmt 0 view .LVU111
 341 010c 2846     		mov	r0, r5
 342 010e FFF7FEFF 		bl	charlengths
 343              	.LVL29:
 272:src/menu.c    ****       real_width = width = charlengths(c);
 344              		.loc 1 272 31 view .LVU112
 345 0112 019B     		ldr	r3, [sp, #4]
 346 0114 0133     		adds	r3, r3, #1
 347 0116 0193     		str	r3, [sp, #4]
 348              	.LVL30:
 273:src/menu.c    ****       current_smallp = smallp;
ARM GAS  /tmp/ccQIVay8.s 			page 14


 349              		.loc 1 273 7 is_stmt 1 view .LVU113
 274:src/menu.c    ****     }
 350              		.loc 1 274 7 view .LVU114
 274:src/menu.c    ****     }
 351              		.loc 1 274 22 is_stmt 0 view .LVU115
 352 0118 0023     		movs	r3, #0
 353              	.LVL31:
 274:src/menu.c    ****     }
 354              		.loc 1 274 22 view .LVU116
 355 011a 0093     		str	r3, [sp]
 356              	.LVL32:
 277:src/menu.c    ****       break;
 357              		.loc 1 277 11 view .LVU117
 358 011c C319     		adds	r3, r0, r7
 359              	.LVL33:
 277:src/menu.c    ****       break;
 360              		.loc 1 277 8 view .LVU118
 361 011e 9945     		cmp	r9, r3
 273:src/menu.c    ****       current_smallp = smallp;
 362              		.loc 1 273 28 view .LVU119
 363 0120 0646     		mov	r6, r0
 277:src/menu.c    ****       break;
 364              		.loc 1 277 5 is_stmt 1 view .LVU120
 277:src/menu.c    ****       break;
 365              		.loc 1 277 8 is_stmt 0 view .LVU121
 366 0122 A7DA     		bge	.L35
 367              	.LVL34:
 368              	.L1:
 277:src/menu.c    ****       break;
 369              		.loc 1 277 8 view .LVU122
 370              	.LBE59:
 295:src/menu.c    **** 
 371              		.loc 1 295 1 view .LVU123
 372 0124 0DF5097D 		add	sp, sp, #548
 373              		.cfi_remember_state
 374              		.cfi_def_cfa_offset 36
 375              		@ sp needed
 376 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 377              	.LVL35:
 378              	.L28:
 379              		.cfi_restore_state
 380              	.LBB60:
 267:src/menu.c    ****       str += 3;
 381              		.loc 1 267 7 is_stmt 1 view .LVU124
 267:src/menu.c    ****       str += 3;
 382              		.loc 1 267 11 is_stmt 0 view .LVU125
 383 012c 019B     		ldr	r3, [sp, #4]
 384 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 260:src/menu.c    **** 	break;
 385              		.loc 1 260 33 view .LVU126
 386 0130 0023     		movs	r3, #0
 387 0132 0093     		str	r3, [sp]
 388 0134 95E7     		b	.L9
 389              	.L37:
 390 0136 00BF     		.align	2
 391              	.L36:
 392 0138 00000000 		.word	forceDispPlot
ARM GAS  /tmp/ccQIVay8.s 			page 15


 393 013c 00000000 		.word	RectPolConv
 394 0140 00000000 		.word	.LANCHOR0
 395              	.LBE60:
 396              		.cfi_endproc
 397              	.LFE27:
 399              		.section	.text.set_menu,"ax",%progbits
 400              		.align	1
 401              		.p2align 2,,3
 402              		.global	set_menu
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu fpv4-sp-d16
 408              	set_menu:
 409              	.LVL36:
 410              	.LFB3:
   3:src/menu.c    ****   int m = current_menu;
 411              		.loc 1 3 32 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              		@ link register save eliminated.
   4:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 416              		.loc 1 4 3 view .LVU128
   4:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 417              		.loc 1 4 7 is_stmt 0 view .LVU129
 418 0000 094A     		ldr	r2, .L47
 419 0002 1368     		ldr	r3, [r2]
 420              	.LVL37:
   5:src/menu.c    ****     current_menu = default_menu;
 421              		.loc 1 5 3 is_stmt 1 view .LVU130
   5:src/menu.c    ****     current_menu = default_menu;
 422              		.loc 1 5 6 is_stmt 0 view .LVU131
 423 0004 8342     		cmp	r3, r0
 424 0006 0AD0     		beq	.L46
   8:src/menu.c    ****     current_menu = last_menu;
 425              		.loc 1 8 8 is_stmt 1 view .LVU132
   8:src/menu.c    ****     current_menu = last_menu;
 426              		.loc 1 8 11 is_stmt 0 view .LVU133
 427 0008 411C     		adds	r1, r0, #1
   9:src/menu.c    ****   }
 428              		.loc 1 9 5 is_stmt 1 view .LVU134
   9:src/menu.c    ****   }
 429              		.loc 1 9 18 is_stmt 0 view .LVU135
 430 000a 09BF     		itett	eq
 431 000c 0749     		ldreq	r1, .L47+4
  12:src/menu.c    ****   }
 432              		.loc 1 12 18 view .LVU136
 433 000e 1060     		strne	r0, [r2]
   9:src/menu.c    ****   }
 434              		.loc 1 9 18 view .LVU137
 435 0010 0968     		ldreq	r1, [r1]
 436 0012 1160     		streq	r1, [r2]
  12:src/menu.c    ****   }
 437              		.loc 1 12 5 is_stmt 1 view .LVU138
 438              	.L40:
  14:src/menu.c    **** }
ARM GAS  /tmp/ccQIVay8.s 			page 16


 439              		.loc 1 14 3 view .LVU139
  14:src/menu.c    **** }
 440              		.loc 1 14 6 is_stmt 0 view .LVU140
 441 0014 092B     		cmp	r3, #9
  14:src/menu.c    **** }
 442              		.loc 1 14 15 is_stmt 1 view .LVU141
  14:src/menu.c    **** }
 443              		.loc 1 14 25 is_stmt 0 view .LVU142
 444 0016 1CBF     		itt	ne
 445 0018 044A     		ldrne	r2, .L47+4
 446 001a 1360     		strne	r3, [r2]
  15:src/menu.c    **** 
 447              		.loc 1 15 1 view .LVU143
 448 001c 7047     		bx	lr
 449              	.L46:
   6:src/menu.c    ****   }
 450              		.loc 1 6 5 is_stmt 1 view .LVU144
   6:src/menu.c    ****   }
 451              		.loc 1 6 18 is_stmt 0 view .LVU145
 452 001e 0449     		ldr	r1, .L47+8
 453 0020 0968     		ldr	r1, [r1]
 454 0022 1160     		str	r1, [r2]
 455 0024 F6E7     		b	.L40
 456              	.L48:
 457 0026 00BF     		.align	2
 458              	.L47:
 459 0028 00000000 		.word	.LANCHOR1
 460 002c 00000000 		.word	.LANCHOR3
 461 0030 00000000 		.word	.LANCHOR2
 462              		.cfi_endproc
 463              	.LFE3:
 465              		.section	.text.toggle_default_menu,"ax",%progbits
 466              		.align	1
 467              		.p2align 2,,3
 468              		.global	toggle_default_menu
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 472              		.fpu fpv4-sp-d16
 474              	toggle_default_menu:
 475              	.LFB4:
  17:src/menu.c    ****   if (current_menu == default_menu) {
 476              		.loc 1 17 29 is_stmt 1 view -0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 0
 479              		@ frame_needed = 0, uses_anonymous_args = 0
 480              		@ link register save eliminated.
  18:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 481              		.loc 1 18 3 view .LVU147
  18:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 482              		.loc 1 18 20 is_stmt 0 view .LVU148
 483 0000 0549     		ldr	r1, .L51
 484 0002 064A     		ldr	r2, .L51+4
 485 0004 0868     		ldr	r0, [r1]
  18:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 486              		.loc 1 18 6 view .LVU149
 487 0006 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccQIVay8.s 			page 17


 488 0008 8342     		cmp	r3, r0
 489 000a 03D1     		bne	.L49
  19:src/menu.c    ****   }
 490              		.loc 1 19 5 is_stmt 1 view .LVU150
  19:src/menu.c    ****   }
 491              		.loc 1 19 38 is_stmt 0 view .LVU151
 492 000c C3F10F03 		rsb	r3, r3, #15
  19:src/menu.c    ****   }
 493              		.loc 1 19 33 view .LVU152
 494 0010 0B60     		str	r3, [r1]
  19:src/menu.c    ****   }
 495              		.loc 1 19 18 view .LVU153
 496 0012 1360     		str	r3, [r2]
 497              	.L49:
  21:src/menu.c    **** 
 498              		.loc 1 21 1 view .LVU154
 499 0014 7047     		bx	lr
 500              	.L52:
 501 0016 00BF     		.align	2
 502              	.L51:
 503 0018 00000000 		.word	.LANCHOR2
 504 001c 00000000 		.word	.LANCHOR1
 505              		.cfi_endproc
 506              	.LFE4:
 508              		.section	.text.get_menu,"ax",%progbits
 509              		.align	1
 510              		.p2align 2,,3
 511              		.global	get_menu
 512              		.syntax unified
 513              		.thumb
 514              		.thumb_func
 515              		.fpu fpv4-sp-d16
 517              	get_menu:
 518              	.LFB5:
  23:src/menu.c    ****   return current_menu;
 519              		.loc 1 23 17 is_stmt 1 view -0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523              		@ link register save eliminated.
  24:src/menu.c    **** }
 524              		.loc 1 24 3 view .LVU156
  24:src/menu.c    **** }
 525              		.loc 1 24 10 is_stmt 0 view .LVU157
 526 0000 014B     		ldr	r3, .L54
  25:src/menu.c    **** 
 527              		.loc 1 25 1 view .LVU158
 528 0002 1868     		ldr	r0, [r3]
 529 0004 7047     		bx	lr
 530              	.L55:
 531 0006 00BF     		.align	2
 532              	.L54:
 533 0008 00000000 		.word	.LANCHOR1
 534              		.cfi_endproc
 535              	.LFE5:
 537              		.section	.text.set_last_menu,"ax",%progbits
 538              		.align	1
ARM GAS  /tmp/ccQIVay8.s 			page 18


 539              		.p2align 2,,3
 540              		.global	set_last_menu
 541              		.syntax unified
 542              		.thumb
 543              		.thumb_func
 544              		.fpu fpv4-sp-d16
 546              	set_last_menu:
 547              	.LFB7:
  31:src/menu.c    ****   set_menu (last_menu);
 548              		.loc 1 31 23 is_stmt 1 view -0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 552              		@ link register save eliminated.
  32:src/menu.c    **** }
 553              		.loc 1 32 3 view .LVU160
 554 0000 0649     		ldr	r1, .L64
 555              	.LBB61:
 556              	.LBB62:
   4:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 557              		.loc 1 4 7 is_stmt 0 view .LVU161
 558 0002 074A     		ldr	r2, .L64+4
 559              	.LBE62:
 560              	.LBE61:
  32:src/menu.c    **** }
 561              		.loc 1 32 3 view .LVU162
 562 0004 0868     		ldr	r0, [r1]
 563              	.LVL38:
 564              	.LBB64:
 565              	.LBI61:
   3:src/menu.c    ****   int m = current_menu;
 566              		.loc 1 3 6 is_stmt 1 view .LVU163
 567              	.LBB63:
   4:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 568              		.loc 1 4 3 view .LVU164
   4:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 569              		.loc 1 4 7 is_stmt 0 view .LVU165
 570 0006 1368     		ldr	r3, [r2]
 571              	.LVL39:
   5:src/menu.c    ****     current_menu = default_menu;
 572              		.loc 1 5 3 is_stmt 1 view .LVU166
   5:src/menu.c    ****     current_menu = default_menu;
 573              		.loc 1 5 6 is_stmt 0 view .LVU167
 574 0008 9842     		cmp	r0, r3
   6:src/menu.c    ****   }
 575              		.loc 1 6 5 is_stmt 1 view .LVU168
   6:src/menu.c    ****   }
 576              		.loc 1 6 18 is_stmt 0 view .LVU169
 577 000a 04BF     		itt	eq
 578 000c 0548     		ldreq	r0, .L64+8
 579              	.LVL40:
   6:src/menu.c    ****   }
 580              		.loc 1 6 18 view .LVU170
 581 000e 0068     		ldreq	r0, [r0]
   8:src/menu.c    ****     current_menu = last_menu;
 582              		.loc 1 8 8 is_stmt 1 view .LVU171
  12:src/menu.c    ****   }
ARM GAS  /tmp/ccQIVay8.s 			page 19


 583              		.loc 1 12 18 is_stmt 0 view .LVU172
 584 0010 1060     		str	r0, [r2]
  14:src/menu.c    **** }
 585              		.loc 1 14 3 is_stmt 1 view .LVU173
  14:src/menu.c    **** }
 586              		.loc 1 14 6 is_stmt 0 view .LVU174
 587 0012 092B     		cmp	r3, #9
  14:src/menu.c    **** }
 588              		.loc 1 14 15 is_stmt 1 view .LVU175
  14:src/menu.c    **** }
 589              		.loc 1 14 25 is_stmt 0 view .LVU176
 590 0014 18BF     		it	ne
 591 0016 0B60     		strne	r3, [r1]
 592              	.LVL41:
  14:src/menu.c    **** }
 593              		.loc 1 14 25 view .LVU177
 594              	.LBE63:
 595              	.LBE64:
  33:src/menu.c    **** 
 596              		.loc 1 33 1 view .LVU178
 597 0018 7047     		bx	lr
 598              	.L65:
 599 001a 00BF     		.align	2
 600              	.L64:
 601 001c 00000000 		.word	.LANCHOR3
 602 0020 00000000 		.word	.LANCHOR1
 603 0024 00000000 		.word	.LANCHOR2
 604              		.cfi_endproc
 605              	.LFE7:
 607              		.section	.text.mdot,"ax",%progbits
 608              		.align	1
 609              		.p2align 2,,3
 610              		.global	mdot
 611              		.syntax unified
 612              		.thumb
 613              		.thumb_func
 614              		.fpu fpv4-sp-d16
 616              	mdot:
 617              	.LVL42:
 618              	.LFB9:
 317:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 619              		.loc 1 317 40 is_stmt 1 view -0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 623              		@ link register save eliminated.
 318:src/menu.c    ****   if (on) {
 624              		.loc 1 318 3 view .LVU180
 318:src/menu.c    ****   if (on) {
 625              		.loc 1 318 6 is_stmt 0 view .LVU181
 626 0000 C728     		cmp	r0, #199
 627 0002 1AD8     		bhi	.L70
 628              	.LVL43:
 629              	.LBB67:
 630              	.LBI67:
 317:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 631              		.loc 1 317 6 is_stmt 1 view .LVU182
ARM GAS  /tmp/ccQIVay8.s 			page 20


 632              	.LBB68:
 319:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 633              		.loc 1 319 3 view .LVU183
 634              	.LBE68:
 635              	.LBE67:
 317:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 636              		.loc 1 317 40 is_stmt 0 view .LVU184
 637 0004 10B4     		push	{r4}
 638              		.cfi_def_cfa_offset 4
 639              		.cfi_offset 4, -4
 640              	.LBB71:
 641              	.LBB69:
 319:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 642              		.loc 1 319 6 view .LVU185
 643 0006 63B9     		cbnz	r3, .L73
 644              		.loc 1 323 5 is_stmt 1 view .LVU186
 645              		.loc 1 323 17 is_stmt 0 view .LVU187
 646 0008 0C4B     		ldr	r3, .L74
 647              	.LVL44:
 648              		.loc 1 323 17 view .LVU188
 649 000a 03EB4000 		add	r0, r3, r0, lsl #1
 650              	.LVL45:
 651              		.loc 1 323 25 view .LVU189
 652 000e 0124     		movs	r4, #1
 653              		.loc 1 323 17 view .LVU190
 654 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 655              		.loc 1 323 25 view .LVU191
 656 0012 04FA01F1 		lsl	r1, r4, r1
 657              	.LVL46:
 658              		.loc 1 323 17 view .LVU192
 659 0016 23EA0101 		bic	r1, r3, r1
 660 001a 8154     		strb	r1, [r0, r2]
 661              	.LVL47:
 662              		.loc 1 323 17 view .LVU193
 663              	.LBE69:
 664              	.LBE71:
 324:src/menu.c    ****   }
 325:src/menu.c    **** }
 665              		.loc 1 325 1 view .LVU194
 666 001c 5DF8044B 		ldr	r4, [sp], #4
 667              		.cfi_remember_state
 668              		.cfi_restore 4
 669              		.cfi_def_cfa_offset 0
 670 0020 7047     		bx	lr
 671              	.LVL48:
 672              	.L73:
 673              		.cfi_restore_state
 674              	.LBB72:
 675              	.LBB70:
 320:src/menu.c    ****   }
 676              		.loc 1 320 5 is_stmt 1 view .LVU195
 320:src/menu.c    ****   }
 677              		.loc 1 320 17 is_stmt 0 view .LVU196
 678 0022 064B     		ldr	r3, .L74
 679              	.LVL49:
 320:src/menu.c    ****   }
 680              		.loc 1 320 17 view .LVU197
ARM GAS  /tmp/ccQIVay8.s 			page 21


 681 0024 03EB4000 		add	r0, r3, r0, lsl #1
 682              	.LVL50:
 320:src/menu.c    ****   }
 683              		.loc 1 320 24 view .LVU198
 684 0028 0124     		movs	r4, #1
 320:src/menu.c    ****   }
 685              		.loc 1 320 17 view .LVU199
 686 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 320:src/menu.c    ****   }
 687              		.loc 1 320 24 view .LVU200
 688 002c 04FA01F1 		lsl	r1, r4, r1
 689              	.LVL51:
 320:src/menu.c    ****   }
 690              		.loc 1 320 17 view .LVU201
 691 0030 1943     		orrs	r1, r1, r3
 692 0032 8154     		strb	r1, [r0, r2]
 693              	.LBE70:
 694              	.LBE72:
 695              		.loc 1 325 1 view .LVU202
 696 0034 5DF8044B 		ldr	r4, [sp], #4
 697              		.cfi_restore 4
 698              		.cfi_def_cfa_offset 0
 699 0038 7047     		bx	lr
 700              	.LVL52:
 701              	.L70:
 702              		.loc 1 325 1 view .LVU203
 703 003a 7047     		bx	lr
 704              	.L75:
 705              		.align	2
 706              	.L74:
 707 003c 00000000 		.word	.LANCHOR0
 708              		.cfi_endproc
 709              	.LFE9:
 711              		.section	.text.display_menu,"ax",%progbits
 712              		.align	1
 713              		.p2align 2,,3
 714              		.global	display_menu
 715              		.syntax unified
 716              		.thumb
 717              		.thumb_func
 718              		.fpu fpv4-sp-d16
 720              	display_menu:
 721              	.LVL53:
 722              	.LFB10:
 326:src/menu.c    **** 
 327:src/menu.c    **** 
 328:src/menu.c    **** void display_menu (int current_menu) {
 723              		.loc 1 328 38 is_stmt 1 view -0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 0
 726              		@ frame_needed = 0, uses_anonymous_args = 0
 329:src/menu.c    ****   int len = 0;
 727              		.loc 1 329 3 view .LVU205
 330:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 728              		.loc 1 330 3 view .LVU206
 328:src/menu.c    ****   int len = 0;
 729              		.loc 1 328 38 is_stmt 0 view .LVU207
ARM GAS  /tmp/ccQIVay8.s 			page 22


 730 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 731              		.cfi_def_cfa_offset 36
 732              		.cfi_offset 4, -36
 733              		.cfi_offset 5, -32
 734              		.cfi_offset 6, -28
 735              		.cfi_offset 7, -24
 736              		.cfi_offset 8, -20
 737              		.cfi_offset 9, -16
 738              		.cfi_offset 10, -12
 739              		.cfi_offset 11, -8
 740              		.cfi_offset 14, -4
 741 0004 83B0     		sub	sp, sp, #12
 742              		.cfi_def_cfa_offset 48
 743              		.loc 1 330 3 view .LVU208
 744 0006 0024     		movs	r4, #0
 745 0008 404F     		ldr	r7, .L94
 746 000a 0094     		str	r4, [sp]
 747 000c 3423     		movs	r3, #52
 748 000e 4FF4C872 		mov	r2, #400
 749 0012 BC21     		movs	r1, #188
 328:src/menu.c    ****   int len = 0;
 750              		.loc 1 328 38 view .LVU209
 751 0014 0646     		mov	r6, r0
 752              		.loc 1 330 3 view .LVU210
 753 0016 2046     		mov	r0, r4
 754              	.LVL54:
 755              		.loc 1 330 3 view .LVU211
 756 0018 B847     		blx	r7
 757              	.LVL55:
 331:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 758              		.loc 1 331 3 is_stmt 1 view .LVU212
 759 001a 3D4D     		ldr	r5, .L94+4
 760 001c FF23     		movs	r3, #255
 761 001e 0093     		str	r3, [sp]
 762 0020 4FF4C872 		mov	r2, #400
 763 0024 0123     		movs	r3, #1
 764 0026 BC21     		movs	r1, #188
 765 0028 2046     		mov	r0, r4
 766 002a B847     		blx	r7
 767              	.LVL56:
 332:src/menu.c    ****   //Clear previous menu
 333:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 768              		.loc 1 333 3 view .LVU213
 769              	.LBB73:
 770              		.loc 1 333 8 view .LVU214
 771              		.loc 1 333 21 view .LVU215
 334:src/menu.c    ****     mdots[col][0] = 0;
 772              		.loc 1 334 19 is_stmt 0 view .LVU216
 773 002c 2246     		mov	r2, r4
 774 002e 05F5C871 		add	r1, r5, #400
 775              	.LBE73:
 331:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 776              		.loc 1 331 3 view .LVU217
 777 0032 2B46     		mov	r3, r5
 778              	.LVL57:
 779              	.L77:
 780              	.LBB74:
ARM GAS  /tmp/ccQIVay8.s 			page 23


 781              		.loc 1 334 5 is_stmt 1 discriminator 3 view .LVU218
 782              		.loc 1 334 19 is_stmt 0 discriminator 3 view .LVU219
 783 0034 1A70     		strb	r2, [r3]
 335:src/menu.c    ****     mdots[col][1] = 0;
 784              		.loc 1 335 5 is_stmt 1 discriminator 3 view .LVU220
 785              		.loc 1 335 19 is_stmt 0 discriminator 3 view .LVU221
 786 0036 5A70     		strb	r2, [r3, #1]
 333:src/menu.c    ****     mdots[col][0] = 0;
 787              		.loc 1 333 32 is_stmt 1 discriminator 3 view .LVU222
 333:src/menu.c    ****     mdots[col][0] = 0;
 788              		.loc 1 333 21 discriminator 3 view .LVU223
 789 0038 0233     		adds	r3, r3, #2
 333:src/menu.c    ****     mdots[col][0] = 0;
 790              		.loc 1 333 3 is_stmt 0 discriminator 3 view .LVU224
 791 003a 9942     		cmp	r1, r3
 792 003c FAD1     		bne	.L77
 793 003e 354B     		ldr	r3, .L94+8
 794 0040 D022     		movs	r2, #208
 795 0042 02FB0636 		mla	r6, r2, r6, r3
 796              	.LVL58:
 333:src/menu.c    ****     mdots[col][0] = 0;
 797              		.loc 1 333 3 discriminator 3 view .LVU225
 798 0046 2036     		adds	r6, r6, #32
 333:src/menu.c    ****     mdots[col][0] = 0;
 799              		.loc 1 333 3 view .LVU226
 800 0048 0024     		movs	r4, #0
 801              	.LVL59:
 802              	.L78:
 333:src/menu.c    ****     mdots[col][0] = 0;
 803              		.loc 1 333 3 view .LVU227
 804              	.LBE74:
 805              	.LBB75:
 336:src/menu.c    ****   }
 337:src/menu.c    **** 
 338:src/menu.c    ****   // Draw menu items
 339:src/menu.c    ****   // 
 340:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 341:src/menu.c    ****     /*
 342:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 343:src/menu.c    ****     */
 344:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 345:src/menu.c    ****     // Unshifted first
 346:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small fo
 806              		.loc 1 346 5 is_stmt 1 view .LVU228
 807              		.loc 1 346 11 is_stmt 0 view .LVU229
 808 004a 0021     		movs	r1, #0
 809 004c 3046     		mov	r0, r6
 810 004e FFF7FEFF 		bl	pixel_length
 811              	.LVL60:
 347:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 )
 812              		.loc 1 347 5 is_stmt 1 view .LVU230
 813              		.loc 1 347 87 is_stmt 0 view .LVU231
 814 0052 C0F12000 		rsb	r0, r0, #32
 815              	.LVL61:
 816              		.loc 1 347 93 view .LVU232
 817 0056 00EBD070 		add	r0, r0, r0, lsr #31
 818              		.loc 1 347 5 view .LVU233
ARM GAS  /tmp/ccQIVay8.s 			page 24


 819 005a 04EB6001 		add	r1, r4, r0, asr #1
 820 005e 0022     		movs	r2, #0
 821 0060 3046     		mov	r0, r6
 822 0062 06F10807 		add	r7, r6, #8
 823 0066 FFF7FEFF 		bl	set_menu_label.constprop.0
 824              	.LVL62:
 348:src/menu.c    ****     // Now shifted ...	
 349:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small font
 825              		.loc 1 349 5 is_stmt 1 view .LVU234
 826              		.loc 1 349 11 is_stmt 0 view .LVU235
 827 006a 0021     		movs	r1, #0
 828 006c 3846     		mov	r0, r7
 829 006e FFF7FEFF 		bl	pixel_length
 830              	.LVL63:
 350:src/menu.c    ****     len = item*32 + (32-len)/2;
 831              		.loc 1 350 5 is_stmt 1 view .LVU236
 832              		.loc 1 350 24 is_stmt 0 view .LVU237
 833 0072 C0F12000 		rsb	r0, r0, #32
 834              	.LVL64:
 835              		.loc 1 350 29 view .LVU238
 836 0076 00EBD070 		add	r0, r0, r0, lsr #31
 837              	.LVL65:
 351:src/menu.c    ****     if (len<0) len = 0;
 838              		.loc 1 351 5 is_stmt 1 view .LVU239
 350:src/menu.c    ****     len = item*32 + (32-len)/2;
 839              		.loc 1 350 9 is_stmt 0 view .LVU240
 840 007a 04EB6001 		add	r1, r4, r0, asr #1
 841              	.LVL66:
 350:src/menu.c    ****     len = item*32 + (32-len)/2;
 842              		.loc 1 350 9 view .LVU241
 843 007e C729     		cmp	r1, #199
 844 0080 A8BF     		it	ge
 845 0082 C721     		movge	r1, #199
 846              	.LVL67:
 352:src/menu.c    ****     if (len>199) len = 199;
 353:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 847              		.loc 1 353 5 is_stmt 1 view .LVU242
 848 0084 21EAE171 		bic	r1, r1, r1, asr #31
 849              	.LVL68:
 850              		.loc 1 353 5 is_stmt 0 view .LVU243
 851 0088 3846     		mov	r0, r7
 852 008a 2034     		adds	r4, r4, #32
 853 008c 0122     		movs	r2, #1
 854 008e FFF7FEFF 		bl	set_menu_label.constprop.0
 855              	.LVL69:
 340:src/menu.c    ****     /*
 856              		.loc 1 340 32 is_stmt 1 view .LVU244
 340:src/menu.c    ****     /*
 857              		.loc 1 340 22 view .LVU245
 340:src/menu.c    ****     /*
 858              		.loc 1 340 3 is_stmt 0 view .LVU246
 859 0092 C02C     		cmp	r4, #192
 860 0094 06F12006 		add	r6, r6, #32
 861 0098 D7D1     		bne	.L78
 862 009a 1F4E     		ldr	r6, .L94+12
 863              	.LBE75:
 864              	.LBB76:
ARM GAS  /tmp/ccQIVay8.s 			page 25


 865              	.LBB77:
 354:src/menu.c    ****   }
 355:src/menu.c    **** 
 356:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 357:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 358:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 359:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 360:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 866              		.loc 1 360 2 view .LVU247
 867 009c DFF86C90 		ldr	r9, .L94
 868 00a0 C5F1040A 		rsb	r10, r5, #4
 869 00a4 06F5C47B 		add	fp, r6, #392
 870              	.LBE77:
 871              	.LBE76:
 872              	.LBB79:
 340:src/menu.c    ****     /*
 873              		.loc 1 340 3 view .LVU248
 874 00a8 771E     		subs	r7, r6, #1
 875              	.LBE79:
 876              	.LBB80:
 877              	.LBB78:
 878              		.loc 1 360 2 view .LVU249
 879 00aa 4FF0FF08 		mov	r8, #255
 880              	.L79:
 881              	.LVL70:
 357:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 882              		.loc 1 357 23 is_stmt 1 view .LVU250
 883 00ae 0AEB0705 		add	r5, r10, r7
 357:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 884              		.loc 1 357 14 is_stmt 0 view .LVU251
 885 00b2 0024     		movs	r4, #0
 886              	.LVL71:
 887              	.L82:
 358:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 888              		.loc 1 358 7 is_stmt 1 view .LVU252
 889              		.loc 1 360 2 view .LVU253
 358:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 890              		.loc 1 358 22 is_stmt 0 view .LVU254
 891 00b4 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 358:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 892              		.loc 1 358 40 view .LVU255
 893 00b8 2241     		asrs	r2, r2, r4
 894              		.loc 1 360 2 view .LVU256
 895 00ba A4EB8401 		sub	r1, r4, r4, lsl #2
 896 00be 0323     		movs	r3, #3
 358:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 897              		.loc 1 358 10 view .LVU257
 898 00c0 12F0010F 		tst	r2, #1
 899              		.loc 1 360 2 view .LVU258
 900 00c4 01F1E901 		add	r1, r1, #233
 901 00c8 1A46     		mov	r2, r3
 902 00ca 2846     		mov	r0, r5
 358:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 903              		.loc 1 358 10 view .LVU259
 904 00cc 02D0     		beq	.L80
 905              		.loc 1 360 2 view .LVU260
 906 00ce CDF80080 		str	r8, [sp]
ARM GAS  /tmp/ccQIVay8.s 			page 26


 907 00d2 C847     		blx	r9
 908              	.LVL72:
 909              	.L80:
 361:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 910              		.loc 1 361 7 is_stmt 1 view .LVU261
 362:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 363:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 911              		.loc 1 363 2 view .LVU262
 361:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 912              		.loc 1 361 22 is_stmt 0 view .LVU263
 913 00d4 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 361:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 914              		.loc 1 361 40 view .LVU264
 915 00d6 2241     		asrs	r2, r2, r4
 916              		.loc 1 363 2 view .LVU265
 917 00d8 A4EB8401 		sub	r1, r4, r4, lsl #2
 918 00dc 0323     		movs	r3, #3
 361:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 919              		.loc 1 361 10 view .LVU266
 920 00de 12F0010F 		tst	r2, #1
 921              		.loc 1 363 2 view .LVU267
 922 00e2 01F1D001 		add	r1, r1, #208
 923 00e6 1A46     		mov	r2, r3
 924 00e8 04F10104 		add	r4, r4, #1
 925              	.LVL73:
 926              		.loc 1 363 2 view .LVU268
 927 00ec 2846     		mov	r0, r5
 361:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 928              		.loc 1 361 10 view .LVU269
 929 00ee 02D0     		beq	.L81
 930              		.loc 1 363 2 view .LVU270
 931 00f0 CDF80080 		str	r8, [sp]
 932 00f4 C847     		blx	r9
 933              	.LVL74:
 934              	.L81:
 357:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 935              		.loc 1 357 32 is_stmt 1 discriminator 2 view .LVU271
 357:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 936              		.loc 1 357 23 discriminator 2 view .LVU272
 357:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 937              		.loc 1 357 5 is_stmt 0 discriminator 2 view .LVU273
 938 00f6 062C     		cmp	r4, #6
 939 00f8 DCD1     		bne	.L82
 940              	.LBE78:
 356:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 941              		.loc 1 356 32 is_stmt 1 discriminator 2 view .LVU274
 356:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 942              		.loc 1 356 21 discriminator 2 view .LVU275
 943 00fa 0236     		adds	r6, r6, #2
 356:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 944              		.loc 1 356 3 is_stmt 0 discriminator 2 view .LVU276
 945 00fc B345     		cmp	fp, r6
 946 00fe 07F10207 		add	r7, r7, #2
 947 0102 D4D1     		bne	.L79
 948              	.LBE80:
 364:src/menu.c    ****     }
 365:src/menu.c    ****   }
ARM GAS  /tmp/ccQIVay8.s 			page 27


 366:src/menu.c    **** }
 949              		.loc 1 366 1 view .LVU277
 950 0104 03B0     		add	sp, sp, #12
 951              		.cfi_def_cfa_offset 36
 952              		@ sp needed
 953 0106 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 954              	.LVL75:
 955              	.L95:
 956              		.loc 1 366 1 view .LVU278
 957 010a 00BF     		.align	2
 958              	.L94:
 959 010c 3D020008 		.word	134218301
 960 0110 00000000 		.word	.LANCHOR0
 961 0114 00000000 		.word	.LANCHOR4
 962 0118 01000000 		.word	.LANCHOR0+1
 963              		.cfi_endproc
 964              	.LFE10:
 966              		.section	.text.display_current_menu,"ax",%progbits
 967              		.align	1
 968              		.p2align 2,,3
 969              		.global	display_current_menu
 970              		.syntax unified
 971              		.thumb
 972              		.thumb_func
 973              		.fpu fpv4-sp-d16
 975              	display_current_menu:
 976              	.LFB6:
  27:src/menu.c    ****   display_menu (current_menu);
 977              		.loc 1 27 30 is_stmt 1 view -0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 0
 980              		@ frame_needed = 0, uses_anonymous_args = 0
 981              		@ link register save eliminated.
  28:src/menu.c    **** }
 982              		.loc 1 28 3 view .LVU280
 983 0000 014B     		ldr	r3, .L97
 984 0002 1868     		ldr	r0, [r3]
 985 0004 FFF7FEBF 		b	display_menu
 986              	.LVL76:
 987              	.L98:
 988              		.align	2
 989              	.L97:
 990 0008 00000000 		.word	.LANCHOR1
 991              		.cfi_endproc
 992              	.LFE6:
 994              		.section	.text.all_menu_dots,"ax",%progbits
 995              		.align	1
 996              		.p2align 2,,3
 997              		.global	all_menu_dots
 998              		.syntax unified
 999              		.thumb
 1000              		.thumb_func
 1001              		.fpu fpv4-sp-d16
 1003              	all_menu_dots:
 1004              	.LFB11:
 367:src/menu.c    **** 
 368:src/menu.c    **** void all_menu_dots () {
ARM GAS  /tmp/ccQIVay8.s 			page 28


 1005              		.loc 1 368 23 view -0
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 0
 1008              		@ frame_needed = 0, uses_anonymous_args = 0
 369:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1009              		.loc 1 369 3 view .LVU282
 1010              	.LBB81:
 1011              		.loc 1 369 8 view .LVU283
 1012              	.LVL77:
 1013              		.loc 1 369 21 view .LVU284
 1014              	.LBE81:
 368:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1015              		.loc 1 368 23 is_stmt 0 view .LVU285
 1016 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1017              		.cfi_def_cfa_offset 20
 1018              		.cfi_offset 4, -20
 1019              		.cfi_offset 5, -16
 1020              		.cfi_offset 6, -12
 1021              		.cfi_offset 7, -8
 1022              		.cfi_offset 14, -4
 1023              	.LBB85:
 1024              	.LBB82:
 370:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 371:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1025              		.loc 1 371 2 view .LVU286
 1026 0002 0D4E     		ldr	r6, .L105
 1027              	.LBE82:
 1028              	.LBE85:
 368:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1029              		.loc 1 368 23 view .LVU287
 1030 0004 83B0     		sub	sp, sp, #12
 1031              		.cfi_def_cfa_offset 32
 368:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1032              		.loc 1 368 23 view .LVU288
 1033 0006 0025     		movs	r5, #0
 1034              	.LBB86:
 1035              	.LBB83:
 1036              		.loc 1 371 2 view .LVU289
 1037 0008 FF27     		movs	r7, #255
 1038              	.LVL78:
 1039              	.L100:
 370:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1040              		.loc 1 370 23 is_stmt 1 view .LVU290
 1041              	.LBE83:
 1042              	.LBE86:
 368:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1043              		.loc 1 368 23 is_stmt 0 view .LVU291
 1044 000a E924     		movs	r4, #233
 1045              	.LVL79:
 1046              	.L101:
 1047              	.LBB87:
 1048              	.LBB84:
 1049              		.loc 1 371 2 is_stmt 1 discriminator 3 view .LVU292
 1050 000c 0323     		movs	r3, #3
 1051 000e 1A46     		mov	r2, r3
 1052 0010 2146     		mov	r1, r4
 1053 0012 2846     		mov	r0, r5
ARM GAS  /tmp/ccQIVay8.s 			page 29


 1054 0014 0097     		str	r7, [sp]
 1055 0016 B047     		blx	r6
 1056              	.LVL80:
 372:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1057              		.loc 1 372 2 discriminator 3 view .LVU293
 1058 0018 0323     		movs	r3, #3
 1059 001a A4F11901 		sub	r1, r4, #25
 1060 001e 0097     		str	r7, [sp]
 1061 0020 1A46     		mov	r2, r3
 1062 0022 2846     		mov	r0, r5
 1063 0024 033C     		subs	r4, r4, #3
 1064 0026 B047     		blx	r6
 1065              	.LVL81:
 370:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1066              		.loc 1 370 32 discriminator 3 view .LVU294
 370:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1067              		.loc 1 370 23 discriminator 3 view .LVU295
 370:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1068              		.loc 1 370 5 is_stmt 0 discriminator 3 view .LVU296
 1069 0028 D72C     		cmp	r4, #215
 1070 002a EFD1     		bne	.L101
 1071              	.LBE84:
 369:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1072              		.loc 1 369 32 is_stmt 1 discriminator 2 view .LVU297
 369:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1073              		.loc 1 369 21 discriminator 2 view .LVU298
 1074 002c 0235     		adds	r5, r5, #2
 369:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1075              		.loc 1 369 3 is_stmt 0 discriminator 2 view .LVU299
 1076 002e B5F5C87F 		cmp	r5, #400
 1077 0032 EAD1     		bne	.L100
 1078              	.LBE87:
 373:src/menu.c    ****     }
 374:src/menu.c    ****   }
 375:src/menu.c    **** }  
 1079              		.loc 1 375 1 view .LVU300
 1080 0034 03B0     		add	sp, sp, #12
 1081              		.cfi_def_cfa_offset 20
 1082              		@ sp needed
 1083 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1084              	.L106:
 1085              		.align	2
 1086              	.L105:
 1087 0038 3D020008 		.word	134218301
 1088              		.cfi_endproc
 1089              	.LFE11:
 1091              		.section	.text.shutdown,"ax",%progbits
 1092              		.align	1
 1093              		.p2align 2,,3
 1094              		.global	shutdown
 1095              		.syntax unified
 1096              		.thumb
 1097              		.thumb_func
 1098              		.fpu fpv4-sp-d16
 1100              	shutdown:
 1101              	.LFB13:
 1102              		.file 2 "src/console.c"
ARM GAS  /tmp/ccQIVay8.s 			page 30


   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** const uint8_t mid_menu[] = {
  46:src/console.c ****     MI_SYSTEM_ENTER,
  47:src/console.c ****     MI_MSC,
  48:src/console.c ****     0 }; // Terminator
  49:src/console.c **** 
  50:src/console.c **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  51:src/console.c **** 
  52:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  53:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  54:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  55:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  56:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  57:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
ARM GAS  /tmp/ccQIVay8.s 			page 31


  58:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  59:src/console.c **** 
  60:src/console.c **** static struct _ndmap remap (const int c) {
  61:src/console.c **** 
  62:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  63:src/console.c **** 
  64:src/console.c **** #include "keytran.c"
  65:src/console.c **** 
  66:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  67:src/console.c **** 
  68:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  69:src/console.c **** 
  70:src/console.c ****   if (c == 44 ) {
  71:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  72:src/console.c ****     return sshot;
  73:src/console.c ****   }
  74:src/console.c ****   
  75:src/console.c ****   if ( get_alpha_state() ) {
  76:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  77:src/console.c ****       switch (cur_shift()) { 
  78:src/console.c ****       case SHIFT_N:
  79:src/console.c **** 	return mapping_none[c]; // N -> F
  80:src/console.c **** 	break;
  81:src/console.c ****       case SHIFT_F:
  82:src/console.c **** 	return mapping_fshift[c]; // F -> G
  83:src/console.c **** 	break;
  84:src/console.c ****       case SHIFT_G:
  85:src/console.c **** 	return h_shift; // G -> H
  86:src/console.c **** 	break;
  87:src/console.c ****       case SHIFT_H:
  88:src/console.c **** 	return h_shift; // H -> N
  89:src/console.c ****       default:
  90:src/console.c **** 	return no_change;
  91:src/console.c ****       }
  92:src/console.c ****     }
  93:src/console.c ****     return mapping_alpha [c];
  94:src/console.c ****   }
  95:src/console.c ****     
  96:src/console.c ****   switch (c) {
  97:src/console.c ****   case KEY_F1:
  98:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
  99:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 100:src/console.c ****   case KEY_F2:
 101:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
 102:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 103:src/console.c ****   case KEY_F3:
 104:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 105:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 106:src/console.c ****   case KEY_F4:
 107:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 109:src/console.c ****   case KEY_F5:
 110:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 112:src/console.c ****   case KEY_F6:
 113:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
ARM GAS  /tmp/ccQIVay8.s 			page 32


 115:src/console.c ****   }
 116:src/console.c ****   
 117:src/console.c ****   switch (cur_shift()) {
 118:src/console.c ****   case SHIFT_N:    
 119:src/console.c ****     return mapping_none[c];
 120:src/console.c ****     break;
 121:src/console.c ****   case SHIFT_F:
 122:src/console.c ****     return mapping_fshift[c];
 123:src/console.c ****     break;
 124:src/console.c ****   case SHIFT_G:
 125:src/console.c ****     return mapping_gshift[c];
 126:src/console.c ****     break;
 127:src/console.c ****   default:
 128:src/console.c ****     return no_change;
 129:src/console.c ****   }
 130:src/console.c **** }
 131:src/console.c **** 
 132:src/console.c **** #endif
 133:src/console.c **** 
 134:src/console.c **** void shutdown( void )
 135:src/console.c **** {
 1103              		.loc 2 135 1 is_stmt 1 view -0
 1104              		.cfi_startproc
 1105              		@ args = 0, pretend = 0, frame = 0
 1106              		@ frame_needed = 0, uses_anonymous_args = 0
 1107              		@ link register save eliminated.
 136:src/console.c **** #ifndef DM42
 137:src/console.c ****   checksum_all();
 138:src/console.c ****   setuptty( 1 );
 139:src/console.c ****   save_statefile( NULL );
 140:src/console.c ****   exit( 0 );
 141:src/console.c **** #else
 142:src/console.c ****   //  save_ram_file(0);
 143:src/console.c ****   SET_ST(STAT_PGM_END);
 1108              		.loc 2 143 3 view .LVU302
 1109 0000 024A     		ldr	r2, .L108
 1110 0002 1368     		ldr	r3, [r2]
 1111 0004 43F40073 		orr	r3, r3, #512
 1112 0008 1360     		str	r3, [r2]
 144:src/console.c **** #endif
 145:src/console.c **** }
 1113              		.loc 2 145 1 is_stmt 0 view .LVU303
 1114 000a 7047     		bx	lr
 1115              	.L109:
 1116              		.align	2
 1117              	.L108:
 1118 000c 00200010 		.word	268443648
 1119              		.cfi_endproc
 1120              	.LFE13:
 1122              		.section	.text.is_key_pressed,"ax",%progbits
 1123              		.align	1
 1124              		.p2align 2,,3
 1125              		.global	is_key_pressed
 1126              		.syntax unified
 1127              		.thumb
 1128              		.thumb_func
 1129              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQIVay8.s 			page 33


 1131              	is_key_pressed:
 1132              	.LFB14:
 146:src/console.c **** 
 147:src/console.c **** 
 148:src/console.c **** /*
 149:src/console.c ****  *  Dummies
 150:src/console.c ****  */
 151:src/console.c **** int is_key_pressed(void) 
 152:src/console.c **** {
 1133              		.loc 2 152 1 is_stmt 1 view -0
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 0
 1136              		@ frame_needed = 0, uses_anonymous_args = 0
 153:src/console.c **** #ifdef DM42
 154:src/console.c ****   return !key_empty();
 1137              		.loc 2 154 3 view .LVU305
 152:src/console.c **** #ifdef DM42
 1138              		.loc 2 152 1 is_stmt 0 view .LVU306
 1139 0000 08B5     		push	{r3, lr}
 1140              		.cfi_def_cfa_offset 8
 1141              		.cfi_offset 3, -8
 1142              		.cfi_offset 14, -4
 1143              		.loc 2 154 11 view .LVU307
 1144 0002 034B     		ldr	r3, .L112
 1145 0004 9847     		blx	r3
 1146              	.LVL82:
 155:src/console.c **** #else
 156:src/console.c ****   return 0;
 157:src/console.c **** #endif
 158:src/console.c **** }
 1147              		.loc 2 158 1 view .LVU308
 1148 0006 B0FA80F0 		clz	r0, r0
 1149 000a 4009     		lsrs	r0, r0, #5
 1150 000c 08BD     		pop	{r3, pc}
 1151              	.L113:
 1152 000e 00BF     		.align	2
 1153              	.L112:
 1154 0010 7D030008 		.word	134218621
 1155              		.cfi_endproc
 1156              	.LFE14:
 1158              		.section	.text.get_key,"ax",%progbits
 1159              		.align	1
 1160              		.p2align 2,,3
 1161              		.global	get_key
 1162              		.syntax unified
 1163              		.thumb
 1164              		.thumb_func
 1165              		.fpu fpv4-sp-d16
 1167              	get_key:
 1168              	.LFB15:
 159:src/console.c **** 
 160:src/console.c **** int get_key(void)
 161:src/console.c **** {
 1169              		.loc 2 161 1 is_stmt 1 view -0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 0
 1172              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQIVay8.s 			page 34


 1173              		@ link register save eliminated.
 162:src/console.c ****   #ifdef DM42
 163:src/console.c ****   return key_pop();
 1174              		.loc 2 163 3 view .LVU310
 1175              		.loc 2 163 10 is_stmt 0 view .LVU311
 1176 0000 004B     		ldr	r3, .L115
 1177 0002 1847     		bx	r3
 1178              	.LVL83:
 1179              	.L116:
 1180              		.align	2
 1181              	.L115:
 1182 0004 89030008 		.word	134218633
 1183              		.cfi_endproc
 1184              	.LFE15:
 1186              		.section	.text.put_key,"ax",%progbits
 1187              		.align	1
 1188              		.p2align 2,,3
 1189              		.global	put_key
 1190              		.syntax unified
 1191              		.thumb
 1192              		.thumb_func
 1193              		.fpu fpv4-sp-d16
 1195              	put_key:
 1196              	.LVL84:
 1197              	.LFB16:
 164:src/console.c ****   #else
 165:src/console.c ****   return 0;
 166:src/console.c ****   #endif
 167:src/console.c **** }
 168:src/console.c **** 
 169:src/console.c **** int put_key( int k )
 170:src/console.c **** {
 1198              		.loc 2 170 1 is_stmt 1 view -0
 1199              		.cfi_startproc
 1200              		@ args = 0, pretend = 0, frame = 0
 1201              		@ frame_needed = 0, uses_anonymous_args = 0
 1202              		@ link register save eliminated.
 171:src/console.c ****   #ifdef DM42
 172:src/console.c ****   return key_push(k);
 1203              		.loc 2 172 3 view .LVU313
 1204              		.loc 2 172 10 is_stmt 0 view .LVU314
 1205 0000 004B     		ldr	r3, .L118
 1206 0002 1847     		bx	r3
 1207              	.LVL85:
 1208              	.L119:
 1209              		.loc 2 172 10 view .LVU315
 1210              		.align	2
 1211              	.L118:
 1212 0004 81030008 		.word	134218625
 1213              		.cfi_endproc
 1214              	.LFE16:
 1216              		.section	.text.shift_down,"ax",%progbits
 1217              		.align	1
 1218              		.p2align 2,,3
 1219              		.global	shift_down
 1220              		.syntax unified
 1221              		.thumb
ARM GAS  /tmp/ccQIVay8.s 			page 35


 1222              		.thumb_func
 1223              		.fpu fpv4-sp-d16
 1225              	shift_down:
 1226              	.LFB17:
 173:src/console.c ****   #else
 174:src/console.c ****   return k;
 175:src/console.c ****   #endif
 176:src/console.c **** }
 177:src/console.c **** 
 178:src/console.c **** enum shifts shift_down(void)
 179:src/console.c **** {
 1227              		.loc 2 179 1 is_stmt 1 view -0
 1228              		.cfi_startproc
 1229              		@ args = 0, pretend = 0, frame = 0
 1230              		@ frame_needed = 0, uses_anonymous_args = 0
 1231              		@ link register save eliminated.
 180:src/console.c **** 	return SHIFT_N;
 1232              		.loc 2 180 2 view .LVU317
 181:src/console.c **** }
 1233              		.loc 2 181 1 is_stmt 0 view .LVU318
 1234 0000 0020     		movs	r0, #0
 1235 0002 7047     		bx	lr
 1236              		.cfi_endproc
 1237              	.LFE17:
 1239              		.section	.text.start_key_timer,"ax",%progbits
 1240              		.align	1
 1241              		.p2align 2,,3
 1242              		.global	start_key_timer
 1243              		.syntax unified
 1244              		.thumb
 1245              		.thumb_func
 1246              		.fpu fpv4-sp-d16
 1248              	start_key_timer:
 1249              	.LFB18:
 182:src/console.c **** 
 183:src/console.c **** #ifndef DM42   // No serial operations for DM42
 184:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 185:src/console.c **** /*
 186:src/console.c ****  *  Open a COM port for transmission
 187:src/console.c ****  */
 188:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 189:src/console.c **** {
 190:src/console.c **** 	return 0;
 191:src/console.c **** }
 192:src/console.c **** 
 193:src/console.c **** 
 194:src/console.c **** /*
 195:src/console.c ****  *  Close the COM port after transmission is complete
 196:src/console.c ****  */
 197:src/console.c **** extern void close_port( void )
 198:src/console.c **** {
 199:src/console.c **** }
 200:src/console.c **** 
 201:src/console.c **** 
 202:src/console.c **** /*
 203:src/console.c ****  *  Output a single byte to the serial
 204:src/console.c ****  */
ARM GAS  /tmp/ccQIVay8.s 			page 36


 205:src/console.c **** void put_byte( unsigned char byte )
 206:src/console.c **** {
 207:src/console.c **** 	report_err(ERR_PROG_BAD);
 208:src/console.c **** }
 209:src/console.c **** 
 210:src/console.c **** 
 211:src/console.c **** /*
 212:src/console.c ****  *  Force buffer flush
 213:src/console.c ****  */
 214:src/console.c **** void flush_comm( void )
 215:src/console.c **** {
 216:src/console.c **** }
 217:src/console.c **** 
 218:src/console.c **** #endif
 219:src/console.c **** #endif
 220:src/console.c **** 
 221:src/console.c **** 
 222:src/console.c **** /*
 223:src/console.c ****  *  Main loop
 224:src/console.c ****  */
 225:src/console.c **** #ifdef DM42
 226:src/console.c **** void start_key_timer (void);
 227:src/console.c **** long int keyticks (void);
 228:src/console.c **** void moveto (int line, int x);
 229:src/console.c **** 
 230:src/console.c **** static long int start_ticks;
 231:src/console.c **** 
 232:src/console.c **** void start_key_timer() {
 1250              		.loc 2 232 24 is_stmt 1 view -0
 1251              		.cfi_startproc
 1252              		@ args = 0, pretend = 0, frame = 0
 1253              		@ frame_needed = 0, uses_anonymous_args = 0
 233:src/console.c ****     start_ticks = get_rtc_ticks();
 1254              		.loc 2 233 5 view .LVU320
 232:src/console.c ****     start_ticks = get_rtc_ticks();
 1255              		.loc 2 232 24 is_stmt 0 view .LVU321
 1256 0000 08B5     		push	{r3, lr}
 1257              		.cfi_def_cfa_offset 8
 1258              		.cfi_offset 3, -8
 1259              		.cfi_offset 14, -4
 1260              		.loc 2 233 19 view .LVU322
 1261 0002 024B     		ldr	r3, .L123
 1262 0004 9847     		blx	r3
 1263              	.LVL86:
 1264              		.loc 2 233 17 view .LVU323
 1265 0006 024B     		ldr	r3, .L123+4
 1266 0008 1860     		str	r0, [r3]
 234:src/console.c **** }
 1267              		.loc 2 234 1 view .LVU324
 1268 000a 08BD     		pop	{r3, pc}
 1269              	.L124:
 1270              		.align	2
 1271              	.L123:
 1272 000c B9040008 		.word	134218937
 1273 0010 00000000 		.word	.LANCHOR5
 1274              		.cfi_endproc
 1275              	.LFE18:
ARM GAS  /tmp/ccQIVay8.s 			page 37


 1277              		.section	.text.keyticks,"ax",%progbits
 1278              		.align	1
 1279              		.p2align 2,,3
 1280              		.global	keyticks
 1281              		.syntax unified
 1282              		.thumb
 1283              		.thumb_func
 1284              		.fpu fpv4-sp-d16
 1286              	keyticks:
 1287              	.LFB19:
 235:src/console.c **** 
 236:src/console.c **** long int keyticks () {
 1288              		.loc 2 236 22 is_stmt 1 view -0
 1289              		.cfi_startproc
 1290              		@ args = 0, pretend = 0, frame = 0
 1291              		@ frame_needed = 0, uses_anonymous_args = 0
 237:src/console.c ****   long int i;
 1292              		.loc 2 237 3 view .LVU326
 238:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1293              		.loc 2 238 3 view .LVU327
 236:src/console.c ****   long int i;
 1294              		.loc 2 236 22 is_stmt 0 view .LVU328
 1295 0000 08B5     		push	{r3, lr}
 1296              		.cfi_def_cfa_offset 8
 1297              		.cfi_offset 3, -8
 1298              		.cfi_offset 14, -4
 1299              		.loc 2 238 8 view .LVU329
 1300 0002 054B     		ldr	r3, .L127
 1301 0004 9847     		blx	r3
 1302              	.LVL87:
 239:src/console.c ****   return i >> 8;
 1303              		.loc 2 239 3 is_stmt 1 view .LVU330
 238:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1304              		.loc 2 238 24 is_stmt 0 view .LVU331
 1305 0006 054B     		ldr	r3, .L127+4
 1306 0008 1B68     		ldr	r3, [r3]
 1307 000a C01A     		subs	r0, r0, r3
 1308              	.LVL88:
 238:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1309              		.loc 2 238 38 view .LVU332
 1310 000c 00EB8000 		add	r0, r0, r0, lsl #2
 240:src/console.c **** }
 1311              		.loc 2 240 1 view .LVU333
 1312 0010 40F3D710 		sbfx	r0, r0, #7, #24
 1313 0014 08BD     		pop	{r3, pc}
 1314              	.L128:
 1315 0016 00BF     		.align	2
 1316              	.L127:
 1317 0018 B9040008 		.word	134218937
 1318 001c 00000000 		.word	.LANCHOR5
 1319              		.cfi_endproc
 1320              	.LFE19:
 1322              		.section	.text.moveto,"ax",%progbits
 1323              		.align	1
 1324              		.p2align 2,,3
 1325              		.global	moveto
 1326              		.syntax unified
ARM GAS  /tmp/ccQIVay8.s 			page 38


 1327              		.thumb
 1328              		.thumb_func
 1329              		.fpu fpv4-sp-d16
 1331              	moveto:
 1332              	.LVL89:
 1333              	.LFB20:
 241:src/console.c **** 
 242:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 243:src/console.c **** char print_string[22];
 244:src/console.c **** int n_p = 0;
 245:src/console.c **** 
 246:src/console.c **** 
 247:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 1334              		.loc 2 247 30 is_stmt 1 view -0
 1335              		.cfi_startproc
 1336              		@ args = 0, pretend = 0, frame = 0
 1337              		@ frame_needed = 0, uses_anonymous_args = 0
 248:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1338              		.loc 2 248 3 view .LVU335
 247:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1339              		.loc 2 247 30 is_stmt 0 view .LVU336
 1340 0000 70B5     		push	{r4, r5, r6, lr}
 1341              		.cfi_def_cfa_offset 16
 1342              		.cfi_offset 4, -16
 1343              		.cfi_offset 5, -12
 1344              		.cfi_offset 6, -8
 1345              		.cfi_offset 14, -4
 1346              		.loc 2 248 3 view .LVU337
 1347 0002 0A4D     		ldr	r5, .L131
 1348 0004 0A4B     		ldr	r3, .L131+4
 247:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1349              		.loc 2 247 30 view .LVU338
 1350 0006 0246     		mov	r2, r0
 1351 0008 0C46     		mov	r4, r1
 1352              		.loc 2 248 3 view .LVU339
 1353 000a A86B     		ldr	r0, [r5, #56]
 1354              	.LVL90:
 1355              		.loc 2 248 3 view .LVU340
 1356 000c 511E     		subs	r1, r2, #1
 1357              	.LVL91:
 1358              		.loc 2 248 3 view .LVU341
 1359 000e 9847     		blx	r3
 1360              	.LVL92:
 249:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1361              		.loc 2 249 3 is_stmt 1 view .LVU342
 1362 0010 A86B     		ldr	r0, [r5, #56]
 1363 0012 084B     		ldr	r3, .L131+8
 1364              		.loc 2 249 33 is_stmt 0 view .LVU343
 1365 0014 0168     		ldr	r1, [r0]
 1366              		.loc 2 249 3 view .LVU344
 1367 0016 B0F90620 		ldrsh	r2, [r0, #6]
 1368              		.loc 2 249 33 view .LVU345
 1369 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 1370              		.loc 2 249 43 view .LVU346
 1371 001c 013C     		subs	r4, r4, #1
 1372              	.LVL93:
 1373              		.loc 2 249 40 view .LVU347
ARM GAS  /tmp/ccQIVay8.s 			page 39


 1374 001e 04FB01F1 		mul	r1, r4, r1
 1375              		.loc 2 249 3 view .LVU348
 1376 0022 1431     		adds	r1, r1, #20
 250:src/console.c **** }
 1377              		.loc 2 250 1 view .LVU349
 1378 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1379              		.cfi_restore 14
 1380              		.cfi_restore 6
 1381              		.cfi_restore 5
 1382              		.cfi_restore 4
 1383              		.cfi_def_cfa_offset 0
 1384              	.LVL94:
 249:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1385              		.loc 2 249 3 view .LVU350
 1386 0028 1847     		bx	r3	@ indirect register sibling call
 1387              	.LVL95:
 1388              	.L132:
 1389 002a 00BF     		.align	2
 1390              	.L131:
 1391 002c 00200010 		.word	268443648
 1392 0030 69020008 		.word	134218345
 1393 0034 6D020008 		.word	134218349
 1394              		.cfi_endproc
 1395              	.LFE20:
 1397              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 1398              		.align	2
 1399              	.LC1:
 1400 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 1400      673A2025 
 1400      34692C25 
 1400      346900
 1401              		.section	.text.print_debug,"ax",%progbits
 1402              		.align	1
 1403              		.p2align 2,,3
 1404              		.global	print_debug
 1405              		.syntax unified
 1406              		.thumb
 1407              		.thumb_func
 1408              		.fpu fpv4-sp-d16
 1410              	print_debug:
 1411              	.LVL96:
 1412              	.LFB21:
 251:src/console.c **** 
 252:src/console.c **** void print_debug (int i, int j) {
 1413              		.loc 2 252 33 is_stmt 1 view -0
 1414              		.cfi_startproc
 1415              		@ args = 0, pretend = 0, frame = 8
 1416              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/console.c ****   strcpy( print_string, spaces );
 1417              		.loc 2 253 3 view .LVU352
 252:src/console.c ****   strcpy( print_string, spaces );
 1418              		.loc 2 252 33 is_stmt 0 view .LVU353
 1419 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1420              		.cfi_def_cfa_offset 24
 1421              		.cfi_offset 4, -24
 1422              		.cfi_offset 5, -20
 1423              		.cfi_offset 6, -16
ARM GAS  /tmp/ccQIVay8.s 			page 40


 1424              		.cfi_offset 7, -12
 1425              		.cfi_offset 8, -8
 1426              		.cfi_offset 14, -4
 1427              		.loc 2 253 3 view .LVU354
 1428 0004 164C     		ldr	r4, .L135
 1429 0006 174F     		ldr	r7, .L135+4
 254:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 255:src/console.c ****   moveto (3, 1);
 256:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1430              		.loc 2 256 3 view .LVU355
 1431 0008 174E     		ldr	r6, .L135+8
 1432 000a 184D     		ldr	r5, .L135+12
 257:src/console.c ****   lcd_refresh();
 1433              		.loc 2 257 3 view .LVU356
 1434 000c DFF86880 		ldr	r8, .L135+24
 252:src/console.c ****   strcpy( print_string, spaces );
 1435              		.loc 2 252 33 view .LVU357
 1436 0010 82B0     		sub	sp, sp, #8
 1437              		.cfi_def_cfa_offset 32
 252:src/console.c ****   strcpy( print_string, spaces );
 1438              		.loc 2 252 33 view .LVU358
 1439 0012 0190     		str	r0, [sp, #4]
 1440 0014 0091     		str	r1, [sp]
 253:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1441              		.loc 2 253 3 view .LVU359
 1442 0016 2046     		mov	r0, r4
 1443              	.LVL97:
 253:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1444              		.loc 2 253 3 view .LVU360
 1445 0018 3946     		mov	r1, r7
 1446              	.LVL98:
 253:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1447              		.loc 2 253 3 view .LVU361
 1448 001a FFF7FEFF 		bl	strcpy
 1449              	.LVL99:
 254:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1450              		.loc 2 254 3 is_stmt 1 view .LVU362
 1451 001e DDE90032 		ldrd	r3, r2, [sp]
 1452 0022 1349     		ldr	r1, .L135+16
 1453 0024 2046     		mov	r0, r4
 1454 0026 FFF7FEFF 		bl	sprintf
 1455              	.LVL100:
 255:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1456              		.loc 2 255 3 view .LVU363
 1457 002a 0121     		movs	r1, #1
 1458 002c 0320     		movs	r0, #3
 1459 002e FFF7FEFF 		bl	moveto
 1460              	.LVL101:
 256:src/console.c ****   lcd_refresh();
 1461              		.loc 2 256 3 view .LVU364
 1462 0032 2146     		mov	r1, r4
 1463 0034 B06B     		ldr	r0, [r6, #56]
 1464 0036 A847     		blx	r5
 1465              	.LVL102:
 1466              		.loc 2 257 3 view .LVU365
 1467 0038 C047     		blx	r8
 1468              	.LVL103:
ARM GAS  /tmp/ccQIVay8.s 			page 41


 258:src/console.c ****   sys_delay (100);
 1469              		.loc 2 258 3 view .LVU366
 1470 003a 0E4B     		ldr	r3, .L135+20
 1471 003c 6420     		movs	r0, #100
 1472 003e 9847     		blx	r3
 1473              	.LVL104:
 259:src/console.c ****   /* wait_for_key_press(); */
 260:src/console.c ****   //  key_pop_all();
 261:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 262:src/console.c ****   // key_pop_all();
 263:src/console.c ****   strcpy( print_string, spaces );
 1474              		.loc 2 263 3 view .LVU367
 1475 0040 3946     		mov	r1, r7
 1476 0042 2046     		mov	r0, r4
 1477 0044 FFF7FEFF 		bl	strcpy
 1478              	.LVL105:
 264:src/console.c ****   moveto (3, 1);
 1479              		.loc 2 264 3 view .LVU368
 1480 0048 0121     		movs	r1, #1
 1481 004a 0320     		movs	r0, #3
 1482 004c FFF7FEFF 		bl	moveto
 1483              	.LVL106:
 265:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1484              		.loc 2 265 3 view .LVU369
 1485 0050 B06B     		ldr	r0, [r6, #56]
 1486 0052 2146     		mov	r1, r4
 1487 0054 A847     		blx	r5
 1488              	.LVL107:
 266:src/console.c ****   lcd_refresh();
 1489              		.loc 2 266 3 view .LVU370
 1490 0056 4346     		mov	r3, r8
 267:src/console.c ****   // while (key_empty()<=0);; // wait for release
 268:src/console.c ****   // key_pop_all();
 269:src/console.c **** }
 1491              		.loc 2 269 1 is_stmt 0 view .LVU371
 1492 0058 02B0     		add	sp, sp, #8
 1493              		.cfi_def_cfa_offset 24
 1494              	.LVL108:
 1495              		.loc 2 269 1 view .LVU372
 1496              		@ sp needed
 1497 005a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1498              		.cfi_restore 14
 1499              		.cfi_restore 8
 1500              		.cfi_restore 7
 1501              		.cfi_restore 6
 1502              		.cfi_restore 5
 1503              		.cfi_restore 4
 1504              		.cfi_def_cfa_offset 0
 1505              	.LVL109:
 266:src/console.c ****   lcd_refresh();
 1506              		.loc 2 266 3 view .LVU373
 1507 005e 1847     		bx	r3	@ indirect register sibling call
 1508              	.LVL110:
 1509              	.L136:
 1510              		.align	2
 1511              	.L135:
 1512 0060 00000000 		.word	print_string
ARM GAS  /tmp/ccQIVay8.s 			page 42


 1513 0064 00000000 		.word	.LANCHOR6
 1514 0068 00200010 		.word	268443648
 1515 006c B1020008 		.word	134218417
 1516 0070 00000000 		.word	.LC1
 1517 0074 05040008 		.word	134218757
 1518 0078 31020008 		.word	134218289
 1519              		.cfi_endproc
 1520              	.LFE21:
 1522              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 1523              		.align	2
 1524              	.LC2:
 1525 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 1525      692C2531 
 1525      337300
 1526              		.section	.text.print_debug2,"ax",%progbits
 1527              		.align	1
 1528              		.p2align 2,,3
 1529              		.global	print_debug2
 1530              		.syntax unified
 1531              		.thumb
 1532              		.thumb_func
 1533              		.fpu fpv4-sp-d16
 1535              	print_debug2:
 1536              	.LVL111:
 1537              	.LFB22:
 270:src/console.c **** 
 271:src/console.c **** void print_debug2 (int i, char* j) {
 1538              		.loc 2 271 36 is_stmt 1 view -0
 1539              		.cfi_startproc
 1540              		@ args = 0, pretend = 0, frame = 8
 1541              		@ frame_needed = 0, uses_anonymous_args = 0
 272:src/console.c ****   strcpy( print_string, spaces );
 1542              		.loc 2 272 3 view .LVU375
 271:src/console.c ****   strcpy( print_string, spaces );
 1543              		.loc 2 271 36 is_stmt 0 view .LVU376
 1544 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1545              		.cfi_def_cfa_offset 24
 1546              		.cfi_offset 4, -24
 1547              		.cfi_offset 5, -20
 1548              		.cfi_offset 6, -16
 1549              		.cfi_offset 7, -12
 1550              		.cfi_offset 8, -8
 1551              		.cfi_offset 14, -4
 1552              		.loc 2 272 3 view .LVU377
 1553 0004 174C     		ldr	r4, .L139
 1554 0006 184F     		ldr	r7, .L139+4
 273:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 274:src/console.c ****   moveto (3, 1);
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1555              		.loc 2 275 3 view .LVU378
 1556 0008 184E     		ldr	r6, .L139+8
 1557 000a 194D     		ldr	r5, .L139+12
 276:src/console.c ****   lcd_refresh();
 1558              		.loc 2 276 3 view .LVU379
 1559 000c DFF86C80 		ldr	r8, .L139+24
 271:src/console.c ****   strcpy( print_string, spaces );
 1560              		.loc 2 271 36 view .LVU380
ARM GAS  /tmp/ccQIVay8.s 			page 43


 1561 0010 82B0     		sub	sp, sp, #8
 1562              		.cfi_def_cfa_offset 32
 271:src/console.c ****   strcpy( print_string, spaces );
 1563              		.loc 2 271 36 view .LVU381
 1564 0012 0190     		str	r0, [sp, #4]
 1565 0014 0091     		str	r1, [sp]
 272:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1566              		.loc 2 272 3 view .LVU382
 1567 0016 2046     		mov	r0, r4
 1568              	.LVL112:
 272:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1569              		.loc 2 272 3 view .LVU383
 1570 0018 3946     		mov	r1, r7
 1571              	.LVL113:
 272:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1572              		.loc 2 272 3 view .LVU384
 1573 001a FFF7FEFF 		bl	strcpy
 1574              	.LVL114:
 273:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1575              		.loc 2 273 3 is_stmt 1 view .LVU385
 1576 001e DDE90032 		ldrd	r3, r2, [sp]
 1577 0022 1449     		ldr	r1, .L139+16
 1578 0024 2046     		mov	r0, r4
 1579 0026 FFF7FEFF 		bl	sprintf
 1580              	.LVL115:
 274:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1581              		.loc 2 274 3 view .LVU386
 1582 002a 0121     		movs	r1, #1
 1583 002c 0320     		movs	r0, #3
 1584 002e FFF7FEFF 		bl	moveto
 1585              	.LVL116:
 275:src/console.c ****   lcd_refresh();
 1586              		.loc 2 275 3 view .LVU387
 1587 0032 2146     		mov	r1, r4
 1588 0034 B06B     		ldr	r0, [r6, #56]
 1589 0036 A847     		blx	r5
 1590              	.LVL117:
 1591              		.loc 2 276 3 view .LVU388
 1592 0038 C047     		blx	r8
 1593              	.LVL118:
 277:src/console.c ****   sys_delay (2500);
 1594              		.loc 2 277 3 view .LVU389
 1595 003a 0F4B     		ldr	r3, .L139+20
 1596 003c 40F6C410 		movw	r0, #2500
 1597 0040 9847     		blx	r3
 1598              	.LVL119:
 278:src/console.c ****   /* wait_for_key_press(); */
 279:src/console.c ****   //  key_pop_all();
 280:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 281:src/console.c ****   // key_pop_all();
 282:src/console.c ****   strcpy( print_string, spaces );
 1599              		.loc 2 282 3 view .LVU390
 1600 0042 3946     		mov	r1, r7
 1601 0044 2046     		mov	r0, r4
 1602 0046 FFF7FEFF 		bl	strcpy
 1603              	.LVL120:
 283:src/console.c ****   moveto (3, 1);
ARM GAS  /tmp/ccQIVay8.s 			page 44


 1604              		.loc 2 283 3 view .LVU391
 1605 004a 0121     		movs	r1, #1
 1606 004c 0320     		movs	r0, #3
 1607 004e FFF7FEFF 		bl	moveto
 1608              	.LVL121:
 284:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1609              		.loc 2 284 3 view .LVU392
 1610 0052 B06B     		ldr	r0, [r6, #56]
 1611 0054 2146     		mov	r1, r4
 1612 0056 A847     		blx	r5
 1613              	.LVL122:
 285:src/console.c ****   lcd_refresh();
 1614              		.loc 2 285 3 view .LVU393
 1615 0058 4346     		mov	r3, r8
 286:src/console.c ****   // while (key_empty()<=0);; // wait for release
 287:src/console.c ****   // key_pop_all();
 288:src/console.c **** }
 1616              		.loc 2 288 1 is_stmt 0 view .LVU394
 1617 005a 02B0     		add	sp, sp, #8
 1618              		.cfi_def_cfa_offset 24
 1619              	.LVL123:
 1620              		.loc 2 288 1 view .LVU395
 1621              		@ sp needed
 1622 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1623              		.cfi_restore 14
 1624              		.cfi_restore 8
 1625              		.cfi_restore 7
 1626              		.cfi_restore 6
 1627              		.cfi_restore 5
 1628              		.cfi_restore 4
 1629              		.cfi_def_cfa_offset 0
 1630              	.LVL124:
 285:src/console.c ****   lcd_refresh();
 1631              		.loc 2 285 3 view .LVU396
 1632 0060 1847     		bx	r3	@ indirect register sibling call
 1633              	.LVL125:
 1634              	.L140:
 1635 0062 00BF     		.align	2
 1636              	.L139:
 1637 0064 00000000 		.word	print_string
 1638 0068 00000000 		.word	.LANCHOR6
 1639 006c 00200010 		.word	268443648
 1640 0070 B1020008 		.word	134218417
 1641 0074 00000000 		.word	.LC2
 1642 0078 05040008 		.word	134218757
 1643 007c 31020008 		.word	134218289
 1644              		.cfi_endproc
 1645              	.LFE22:
 1647              		.section	.text.do_now,"ax",%progbits
 1648              		.align	1
 1649              		.p2align 2,,3
 1650              		.global	do_now
 1651              		.syntax unified
 1652              		.thumb
 1653              		.thumb_func
 1654              		.fpu fpv4-sp-d16
 1656              	do_now:
ARM GAS  /tmp/ccQIVay8.s 			page 45


 1657              	.LVL126:
 1658              	.LFB23:
 289:src/console.c **** 
 290:src/console.c **** void do_now (int key, int shift) {
 1659              		.loc 2 290 34 is_stmt 1 view -0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 8
 1662              		@ frame_needed = 0, uses_anonymous_args = 0
 1663              		@ link register save eliminated.
 291:src/console.c ****   struct _ndmap temp;
 1664              		.loc 2 291 3 view .LVU398
 292:src/console.c ****   temp.key_34s = key;
 1665              		.loc 2 292 3 view .LVU399
 290:src/console.c ****   struct _ndmap temp;
 1666              		.loc 2 290 34 is_stmt 0 view .LVU400
 1667 0000 82B0     		sub	sp, sp, #8
 1668              		.cfi_def_cfa_offset 8
 293:src/console.c ****   temp.shift = shift;
 294:src/console.c ****   process_keycode_with_shift (temp);
 1669              		.loc 2 294 3 view .LVU401
 1670 0002 02AB     		add	r3, sp, #8
 292:src/console.c ****   temp.shift = shift;
 1671              		.loc 2 292 16 view .LVU402
 1672 0004 8DF80000 		strb	r0, [sp]
 293:src/console.c ****   temp.shift = shift;
 1673              		.loc 2 293 3 is_stmt 1 view .LVU403
 293:src/console.c ****   temp.shift = shift;
 1674              		.loc 2 293 14 is_stmt 0 view .LVU404
 1675 0008 0191     		str	r1, [sp, #4]
 1676              		.loc 2 294 3 is_stmt 1 view .LVU405
 1677 000a 13E90300 		ldmdb	r3, {r0, r1}
 1678              	.LVL127:
 295:src/console.c **** }
 1679              		.loc 2 295 1 is_stmt 0 view .LVU406
 1680 000e 02B0     		add	sp, sp, #8
 1681              		.cfi_def_cfa_offset 0
 1682              		@ sp needed
 294:src/console.c **** }
 1683              		.loc 2 294 3 view .LVU407
 1684 0010 FFF7FEBF 		b	process_keycode_with_shift
 1685              	.LVL128:
 294:src/console.c **** }
 1686              		.loc 2 294 3 view .LVU408
 1687              		.cfi_endproc
 1688              	.LFE23:
 1690              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 1691              		.align	2
 1692              	.LC3:
 1693 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 1693      502F7770 
 1693      3334735F 
 1693      68656C70 
 1693      2E68746D 
 1694              		.section	.text.do_multi,"ax",%progbits
 1695              		.align	1
 1696              		.p2align 2,,3
 1697              		.global	do_multi
ARM GAS  /tmp/ccQIVay8.s 			page 46


 1698              		.syntax unified
 1699              		.thumb
 1700              		.thumb_func
 1701              		.fpu fpv4-sp-d16
 1703              	do_multi:
 1704              	.LVL129:
 1705              	.LFB24:
 296:src/console.c **** 
 297:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 1706              		.loc 2 297 42 is_stmt 1 view -0
 1707              		.cfi_startproc
 1708              		@ args = 0, pretend = 0, frame = 16
 1709              		@ frame_needed = 0, uses_anonymous_args = 0
 1710              		.loc 2 297 42 is_stmt 0 view .LVU410
 1711 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1712              		.cfi_def_cfa_offset 24
 1713              		.cfi_offset 4, -24
 1714              		.cfi_offset 5, -20
 1715              		.cfi_offset 6, -16
 1716              		.cfi_offset 7, -12
 1717              		.cfi_offset 8, -8
 1718              		.cfi_offset 14, -4
 1719 0004 84B0     		sub	sp, sp, #16
 1720              		.cfi_def_cfa_offset 40
 1721              	.LVL130:
 298:src/console.c ****   switch(r.shift) {
 1722              		.loc 2 298 3 is_stmt 1 view .LVU411
 297:src/console.c ****   switch(r.shift) {
 1723              		.loc 2 297 42 is_stmt 0 view .LVU412
 1724 0006 6C46     		mov	r4, sp
 1725 0008 531E     		subs	r3, r2, #1
 1726 000a 84E80600 		stm	r4, {r1, r2}
 1727              	.LVL131:
 297:src/console.c ****   switch(r.shift) {
 1728              		.loc 2 297 42 view .LVU413
 1729 000e 0546     		mov	r5, r0
 1730 0010 0C2B     		cmp	r3, #12
 1731 0012 0FD8     		bhi	.L144
 1732 0014 DFE803F0 		tbb	[pc, r3]
 1733              	.L146:
 1734 0018 15       		.byte	(.L158-.L146)/2
 1735 0019 3D       		.byte	(.L157-.L146)/2
 1736 001a 47       		.byte	(.L156-.L146)/2
 1737 001b 51       		.byte	(.L155-.L146)/2
 1738 001c 5B       		.byte	(.L154-.L146)/2
 1739 001d 65       		.byte	(.L153-.L146)/2
 1740 001e 6F       		.byte	(.L152-.L146)/2
 1741 001f 79       		.byte	(.L151-.L146)/2
 1742 0020 82       		.byte	(.L150-.L146)/2
 1743 0021 8C       		.byte	(.L149-.L146)/2
 1744 0022 95       		.byte	(.L148-.L146)/2
 1745 0023 9E       		.byte	(.L147-.L146)/2
 1746 0024 07       		.byte	(.L145-.L146)/2
 1747 0025 00       		.p2align 1
 1748              	.L145:
 299:src/console.c ****   case LASTX: // Last x via RCL L
 300:src/console.c ****     do_now (K11, 0); // RCL
ARM GAS  /tmp/ccQIVay8.s 			page 47


 301:src/console.c ****     do_now (K_RELEASE,0); // release
 302:src/console.c ****     do_now (K15,0); // TAN key
 303:src/console.c ****     r.key_34s = K_RELEASE;
 304:src/console.c ****     r.shift = 0; // set up for release;
 305:src/console.c ****     break;
 306:src/console.c ****   case ONSTO: // flash_backup()
 307:src/console.c ****     flash_backup(OP_SAVE);
 308:src/console.c ****     r = no_key;
 309:src/console.c ****     break;
 310:src/console.c ****   case ONRCL: // flash_restore()
 311:src/console.c ****     flash_restore(OP_LOAD);
 312:src/console.c ****     r = no_key;
 313:src/console.c ****     break;
 314:src/console.c ****   case WRLIB: // save library file
 315:src/console.c ****     save_lib_file(1);
 316:src/console.c ****     r = no_key;
 317:src/console.c ****     break;
 318:src/console.c ****   case LLIB: // load library file
 319:src/console.c ****     load_lib_file(1);
 320:src/console.c ****     r = no_key;
 321:src/console.c ****     break;
 322:src/console.c ****   case WRTST: // save state file
 323:src/console.c ****     save_ram_file(1);
 324:src/console.c ****     r = no_key;
 325:src/console.c ****     break;
 326:src/console.c ****   case LDST:
 327:src/console.c ****     load_ram_file(1);
 328:src/console.c ****     r = no_key;
 329:src/console.c ****     break;
 330:src/console.c ****   case LDPRG:
 331:src/console.c ****     load_prog_file();
 332:src/console.c ****     r = no_key;
 333:src/console.c ****     break;
 334:src/console.c ****   case SVPRG:
 335:src/console.c ****     save_prog_file();
 336:src/console.c ****     r = no_key;
 337:src/console.c ****     break;
 338:src/console.c ****   case HELP:
 339:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 340:src/console.c ****     r = no_key;
 341:src/console.c ****     break;
 342:src/console.c ****   case DOTS:
 343:src/console.c ****     do_all_dots();
 344:src/console.c ****     r = no_key;
 345:src/console.c ****     break;
 346:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 347:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 348:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case DEFMEN:
 352:src/console.c ****     toggle_default_menu();
 1749              		.loc 2 352 5 is_stmt 1 view .LVU414
 1750              	.LBB88:
 1751              	.LBI88:
  17:src/menu.c    ****   if (current_menu == default_menu) {
 1752              		.loc 1 17 6 view .LVU415
ARM GAS  /tmp/ccQIVay8.s 			page 48


 1753              	.LBB89:
  18:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 1754              		.loc 1 18 3 view .LVU416
  18:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 1755              		.loc 1 18 20 is_stmt 0 view .LVU417
 1756 0026 5A49     		ldr	r1, .L163
 1757 0028 5A4A     		ldr	r2, .L163+4
 1758 002a 0868     		ldr	r0, [r1]
 1759              	.LVL132:
  18:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 1760              		.loc 1 18 6 view .LVU418
 1761 002c 1368     		ldr	r3, [r2]
 1762 002e 8342     		cmp	r3, r0
 1763 0030 00F0A980 		beq	.L162
 1764              	.L144:
 1765              	.LBE89:
 1766              	.LBE88:
 353:src/console.c ****     r = no_key;
 354:src/console.c ****     break;
 355:src/console.c ****   default:
 356:src/console.c ****     r = no_key;
 1767              		.loc 2 356 5 is_stmt 1 view .LVU419
 1768              		.loc 2 356 7 is_stmt 0 view .LVU420
 1769 0034 584B     		ldr	r3, .L163+8
 1770 0036 93E80300 		ldm	r3, {r0, r1}
 1771 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1772              	.LVL133:
 1773              		.loc 2 356 7 view .LVU421
 1774 003c 84E80300 		stm	r4, {r0, r1}
 1775 0040 1CE0     		b	.L159
 1776              	.LVL134:
 1777              	.L158:
 300:src/console.c ****     do_now (K_RELEASE,0); // release
 1778              		.loc 2 300 5 is_stmt 1 view .LVU422
 1779              	.LBB91:
 1780              	.LBI91:
 290:src/console.c ****   struct _ndmap temp;
 1781              		.loc 2 290 6 view .LVU423
 1782              	.LBB92:
 291:src/console.c ****   temp.key_34s = key;
 1783              		.loc 2 291 3 view .LVU424
 292:src/console.c ****   temp.shift = shift;
 1784              		.loc 2 292 3 view .LVU425
 292:src/console.c ****   temp.shift = shift;
 1785              		.loc 2 292 16 is_stmt 0 view .LVU426
 1786 0042 0723     		movs	r3, #7
 293:src/console.c ****   process_keycode_with_shift (temp);
 1787              		.loc 2 293 14 view .LVU427
 1788 0044 0026     		movs	r6, #0
 292:src/console.c ****   temp.shift = shift;
 1789              		.loc 2 292 16 view .LVU428
 1790 0046 8DF80830 		strb	r3, [sp, #8]
 293:src/console.c ****   process_keycode_with_shift (temp);
 1791              		.loc 2 293 3 is_stmt 1 view .LVU429
 294:src/console.c **** }
 1792              		.loc 2 294 3 is_stmt 0 view .LVU430
 1793 004a 0DF10808 		add	r8, sp, #8
ARM GAS  /tmp/ccQIVay8.s 			page 49


 293:src/console.c ****   process_keycode_with_shift (temp);
 1794              		.loc 2 293 14 view .LVU431
 1795 004e 0396     		str	r6, [sp, #12]
 294:src/console.c **** }
 1796              		.loc 2 294 3 is_stmt 1 view .LVU432
 1797 0050 98E80300 		ldm	r8, {r0, r1}
 1798              	.LVL135:
 294:src/console.c **** }
 1799              		.loc 2 294 3 is_stmt 0 view .LVU433
 1800              	.LBE92:
 1801              	.LBE91:
 1802              	.LBB94:
 1803              	.LBB95:
 292:src/console.c ****   temp.shift = shift;
 1804              		.loc 2 292 16 view .LVU434
 1805 0054 6327     		movs	r7, #99
 1806              	.LBE95:
 1807              	.LBE94:
 1808              	.LBB97:
 1809              	.LBB93:
 294:src/console.c **** }
 1810              		.loc 2 294 3 view .LVU435
 1811 0056 FFF7FEFF 		bl	process_keycode_with_shift
 1812              	.LVL136:
 294:src/console.c **** }
 1813              		.loc 2 294 3 view .LVU436
 1814              	.LBE93:
 1815              	.LBE97:
 301:src/console.c ****     do_now (K15,0); // TAN key
 1816              		.loc 2 301 5 is_stmt 1 view .LVU437
 1817              	.LBB98:
 1818              	.LBI94:
 290:src/console.c ****   struct _ndmap temp;
 1819              		.loc 2 290 6 view .LVU438
 1820              	.LBB96:
 291:src/console.c ****   temp.key_34s = key;
 1821              		.loc 2 291 3 view .LVU439
 292:src/console.c ****   temp.shift = shift;
 1822              		.loc 2 292 3 view .LVU440
 293:src/console.c ****   process_keycode_with_shift (temp);
 1823              		.loc 2 293 14 is_stmt 0 view .LVU441
 1824 005a 0396     		str	r6, [sp, #12]
 292:src/console.c ****   temp.shift = shift;
 1825              		.loc 2 292 16 view .LVU442
 1826 005c 8DF80870 		strb	r7, [sp, #8]
 293:src/console.c ****   process_keycode_with_shift (temp);
 1827              		.loc 2 293 3 is_stmt 1 view .LVU443
 294:src/console.c **** }
 1828              		.loc 2 294 3 view .LVU444
 1829 0060 98E80300 		ldm	r8, {r0, r1}
 1830 0064 FFF7FEFF 		bl	process_keycode_with_shift
 1831              	.LVL137:
 294:src/console.c **** }
 1832              		.loc 2 294 3 is_stmt 0 view .LVU445
 1833              	.LBE96:
 1834              	.LBE98:
 302:src/console.c ****     r.key_34s = K_RELEASE;
ARM GAS  /tmp/ccQIVay8.s 			page 50


 1835              		.loc 2 302 5 is_stmt 1 view .LVU446
 1836              	.LBB99:
 1837              	.LBI99:
 290:src/console.c ****   struct _ndmap temp;
 1838              		.loc 2 290 6 view .LVU447
 1839              	.LBB100:
 291:src/console.c ****   temp.key_34s = key;
 1840              		.loc 2 291 3 view .LVU448
 292:src/console.c ****   temp.shift = shift;
 1841              		.loc 2 292 3 view .LVU449
 292:src/console.c ****   temp.shift = shift;
 1842              		.loc 2 292 16 is_stmt 0 view .LVU450
 1843 0068 0B23     		movs	r3, #11
 1844 006a 8DF80830 		strb	r3, [sp, #8]
 293:src/console.c ****   process_keycode_with_shift (temp);
 1845              		.loc 2 293 3 is_stmt 1 view .LVU451
 294:src/console.c **** }
 1846              		.loc 2 294 3 view .LVU452
 293:src/console.c ****   process_keycode_with_shift (temp);
 1847              		.loc 2 293 14 is_stmt 0 view .LVU453
 1848 006e 0396     		str	r6, [sp, #12]
 294:src/console.c **** }
 1849              		.loc 2 294 3 view .LVU454
 1850 0070 98E80300 		ldm	r8, {r0, r1}
 1851 0074 FFF7FEFF 		bl	process_keycode_with_shift
 1852              	.LVL138:
 294:src/console.c **** }
 1853              		.loc 2 294 3 view .LVU455
 1854              	.LBE100:
 1855              	.LBE99:
 303:src/console.c ****     r.shift = 0; // set up for release;
 1856              		.loc 2 303 5 is_stmt 1 view .LVU456
 304:src/console.c ****     break;
 1857              		.loc 2 304 5 view .LVU457
 305:src/console.c ****   case ONSTO: // flash_backup()
 1858              		.loc 2 305 5 view .LVU458
 304:src/console.c ****     break;
 1859              		.loc 2 304 13 is_stmt 0 view .LVU459
 1860 0078 3146     		mov	r1, r6
 303:src/console.c ****     r.shift = 0; // set up for release;
 1861              		.loc 2 303 15 view .LVU460
 1862 007a 3B46     		mov	r3, r7
 1863              	.LVL139:
 1864              	.L159:
 357:src/console.c ****   }
 358:src/console.c ****   return r;
 1865              		.loc 2 358 3 is_stmt 1 view .LVU461
 1866              		.loc 2 358 10 is_stmt 0 view .LVU462
 1867 007c 8DF80030 		strb	r3, [sp]
 1868 0080 0191     		str	r1, [sp, #4]
 1869 0082 94E80300 		ldm	r4, {r0, r1}
 1870              	.LVL140:
 1871              		.loc 2 358 10 view .LVU463
 1872 0086 85E80300 		stm	r5, {r0, r1}
 359:src/console.c **** }
 1873              		.loc 2 359 1 view .LVU464
 1874 008a 2846     		mov	r0, r5
ARM GAS  /tmp/ccQIVay8.s 			page 51


 1875 008c 04B0     		add	sp, sp, #16
 1876              		.cfi_remember_state
 1877              		.cfi_def_cfa_offset 24
 1878              		@ sp needed
 1879 008e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1880              	.LVL141:
 1881              	.L157:
 1882              		.cfi_restore_state
 307:src/console.c ****     r = no_key;
 1883              		.loc 2 307 5 is_stmt 1 view .LVU465
 1884 0092 AD20     		movs	r0, #173
 1885              	.LVL142:
 307:src/console.c ****     r = no_key;
 1886              		.loc 2 307 5 is_stmt 0 view .LVU466
 1887 0094 FFF7FEFF 		bl	flash_backup
 1888              	.LVL143:
 308:src/console.c ****     break;
 1889              		.loc 2 308 5 is_stmt 1 view .LVU467
 308:src/console.c ****     break;
 1890              		.loc 2 308 7 is_stmt 0 view .LVU468
 1891 0098 3F4B     		ldr	r3, .L163+8
 1892 009a 93E80300 		ldm	r3, {r0, r1}
 1893 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1894              	.LVL144:
 309:src/console.c ****   case ONRCL: // flash_restore()
 1895              		.loc 2 309 5 is_stmt 1 view .LVU469
 308:src/console.c ****     break;
 1896              		.loc 2 308 7 is_stmt 0 view .LVU470
 1897 00a0 84E80300 		stm	r4, {r0, r1}
 309:src/console.c ****   case ONRCL: // flash_restore()
 1898              		.loc 2 309 5 view .LVU471
 1899 00a4 EAE7     		b	.L159
 1900              	.LVL145:
 1901              	.L156:
 311:src/console.c ****     r = no_key;
 1902              		.loc 2 311 5 is_stmt 1 view .LVU472
 1903 00a6 AE20     		movs	r0, #174
 1904              	.LVL146:
 311:src/console.c ****     r = no_key;
 1905              		.loc 2 311 5 is_stmt 0 view .LVU473
 1906 00a8 FFF7FEFF 		bl	flash_restore
 1907              	.LVL147:
 312:src/console.c ****     break;
 1908              		.loc 2 312 5 is_stmt 1 view .LVU474
 312:src/console.c ****     break;
 1909              		.loc 2 312 7 is_stmt 0 view .LVU475
 1910 00ac 3A4B     		ldr	r3, .L163+8
 1911 00ae 93E80300 		ldm	r3, {r0, r1}
 1912 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1913              	.LVL148:
 313:src/console.c ****   case WRLIB: // save library file
 1914              		.loc 2 313 5 is_stmt 1 view .LVU476
 312:src/console.c ****     break;
 1915              		.loc 2 312 7 is_stmt 0 view .LVU477
 1916 00b4 84E80300 		stm	r4, {r0, r1}
 313:src/console.c ****   case WRLIB: // save library file
 1917              		.loc 2 313 5 view .LVU478
ARM GAS  /tmp/ccQIVay8.s 			page 52


 1918 00b8 E0E7     		b	.L159
 1919              	.LVL149:
 1920              	.L155:
 315:src/console.c ****     r = no_key;
 1921              		.loc 2 315 5 is_stmt 1 view .LVU479
 1922 00ba 0120     		movs	r0, #1
 1923              	.LVL150:
 315:src/console.c ****     r = no_key;
 1924              		.loc 2 315 5 is_stmt 0 view .LVU480
 1925 00bc FFF7FEFF 		bl	save_lib_file
 1926              	.LVL151:
 316:src/console.c ****     break;
 1927              		.loc 2 316 5 is_stmt 1 view .LVU481
 316:src/console.c ****     break;
 1928              		.loc 2 316 7 is_stmt 0 view .LVU482
 1929 00c0 354B     		ldr	r3, .L163+8
 1930 00c2 93E80300 		ldm	r3, {r0, r1}
 1931 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1932              	.LVL152:
 317:src/console.c ****   case LLIB: // load library file
 1933              		.loc 2 317 5 is_stmt 1 view .LVU483
 316:src/console.c ****     break;
 1934              		.loc 2 316 7 is_stmt 0 view .LVU484
 1935 00c8 84E80300 		stm	r4, {r0, r1}
 317:src/console.c ****   case LLIB: // load library file
 1936              		.loc 2 317 5 view .LVU485
 1937 00cc D6E7     		b	.L159
 1938              	.LVL153:
 1939              	.L154:
 319:src/console.c ****     r = no_key;
 1940              		.loc 2 319 5 is_stmt 1 view .LVU486
 1941 00ce 0120     		movs	r0, #1
 1942              	.LVL154:
 319:src/console.c ****     r = no_key;
 1943              		.loc 2 319 5 is_stmt 0 view .LVU487
 1944 00d0 FFF7FEFF 		bl	load_lib_file
 1945              	.LVL155:
 320:src/console.c ****     break;
 1946              		.loc 2 320 5 is_stmt 1 view .LVU488
 320:src/console.c ****     break;
 1947              		.loc 2 320 7 is_stmt 0 view .LVU489
 1948 00d4 304B     		ldr	r3, .L163+8
 1949 00d6 93E80300 		ldm	r3, {r0, r1}
 1950 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1951              	.LVL156:
 321:src/console.c ****   case WRTST: // save state file
 1952              		.loc 2 321 5 is_stmt 1 view .LVU490
 320:src/console.c ****     break;
 1953              		.loc 2 320 7 is_stmt 0 view .LVU491
 1954 00dc 84E80300 		stm	r4, {r0, r1}
 321:src/console.c ****   case WRTST: // save state file
 1955              		.loc 2 321 5 view .LVU492
 1956 00e0 CCE7     		b	.L159
 1957              	.LVL157:
 1958              	.L153:
 323:src/console.c ****     r = no_key;
 1959              		.loc 2 323 5 is_stmt 1 view .LVU493
ARM GAS  /tmp/ccQIVay8.s 			page 53


 1960 00e2 0120     		movs	r0, #1
 1961              	.LVL158:
 323:src/console.c ****     r = no_key;
 1962              		.loc 2 323 5 is_stmt 0 view .LVU494
 1963 00e4 FFF7FEFF 		bl	save_ram_file
 1964              	.LVL159:
 324:src/console.c ****     break;
 1965              		.loc 2 324 5 is_stmt 1 view .LVU495
 324:src/console.c ****     break;
 1966              		.loc 2 324 7 is_stmt 0 view .LVU496
 1967 00e8 2B4B     		ldr	r3, .L163+8
 1968 00ea 93E80300 		ldm	r3, {r0, r1}
 1969 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1970              	.LVL160:
 325:src/console.c ****   case LDST:
 1971              		.loc 2 325 5 is_stmt 1 view .LVU497
 324:src/console.c ****     break;
 1972              		.loc 2 324 7 is_stmt 0 view .LVU498
 1973 00f0 84E80300 		stm	r4, {r0, r1}
 325:src/console.c ****   case LDST:
 1974              		.loc 2 325 5 view .LVU499
 1975 00f4 C2E7     		b	.L159
 1976              	.LVL161:
 1977              	.L152:
 327:src/console.c ****     r = no_key;
 1978              		.loc 2 327 5 is_stmt 1 view .LVU500
 1979 00f6 0120     		movs	r0, #1
 1980              	.LVL162:
 327:src/console.c ****     r = no_key;
 1981              		.loc 2 327 5 is_stmt 0 view .LVU501
 1982 00f8 FFF7FEFF 		bl	load_ram_file
 1983              	.LVL163:
 328:src/console.c ****     break;
 1984              		.loc 2 328 5 is_stmt 1 view .LVU502
 328:src/console.c ****     break;
 1985              		.loc 2 328 7 is_stmt 0 view .LVU503
 1986 00fc 264B     		ldr	r3, .L163+8
 1987 00fe 93E80300 		ldm	r3, {r0, r1}
 1988 0102 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1989              	.LVL164:
 329:src/console.c ****   case LDPRG:
 1990              		.loc 2 329 5 is_stmt 1 view .LVU504
 328:src/console.c ****     break;
 1991              		.loc 2 328 7 is_stmt 0 view .LVU505
 1992 0104 84E80300 		stm	r4, {r0, r1}
 329:src/console.c ****   case LDPRG:
 1993              		.loc 2 329 5 view .LVU506
 1994 0108 B8E7     		b	.L159
 1995              	.LVL165:
 1996              	.L151:
 331:src/console.c ****     r = no_key;
 1997              		.loc 2 331 5 is_stmt 1 view .LVU507
 1998 010a FFF7FEFF 		bl	load_prog_file
 1999              	.LVL166:
 332:src/console.c ****     break;
 2000              		.loc 2 332 5 view .LVU508
 332:src/console.c ****     break;
ARM GAS  /tmp/ccQIVay8.s 			page 54


 2001              		.loc 2 332 7 is_stmt 0 view .LVU509
 2002 010e 224B     		ldr	r3, .L163+8
 2003 0110 93E80300 		ldm	r3, {r0, r1}
 2004 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2005              	.LVL167:
 333:src/console.c ****   case SVPRG:
 2006              		.loc 2 333 5 is_stmt 1 view .LVU510
 332:src/console.c ****     break;
 2007              		.loc 2 332 7 is_stmt 0 view .LVU511
 2008 0116 84E80300 		stm	r4, {r0, r1}
 333:src/console.c ****   case SVPRG:
 2009              		.loc 2 333 5 view .LVU512
 2010 011a AFE7     		b	.L159
 2011              	.LVL168:
 2012              	.L150:
 339:src/console.c ****     r = no_key;
 2013              		.loc 2 339 5 is_stmt 1 view .LVU513
 2014 011c 1F4B     		ldr	r3, .L163+12
 2015 011e 2048     		ldr	r0, .L163+16
 2016              	.LVL169:
 339:src/console.c ****     r = no_key;
 2017              		.loc 2 339 5 is_stmt 0 view .LVU514
 2018 0120 9847     		blx	r3
 2019              	.LVL170:
 340:src/console.c ****     break;
 2020              		.loc 2 340 5 is_stmt 1 view .LVU515
 340:src/console.c ****     break;
 2021              		.loc 2 340 7 is_stmt 0 view .LVU516
 2022 0122 1D4B     		ldr	r3, .L163+8
 2023 0124 93E80300 		ldm	r3, {r0, r1}
 2024 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2025              	.LVL171:
 341:src/console.c ****   case DOTS:
 2026              		.loc 2 341 5 is_stmt 1 view .LVU517
 340:src/console.c ****     break;
 2027              		.loc 2 340 7 is_stmt 0 view .LVU518
 2028 012a 84E80300 		stm	r4, {r0, r1}
 341:src/console.c ****   case DOTS:
 2029              		.loc 2 341 5 view .LVU519
 2030 012e A5E7     		b	.L159
 2031              	.LVL172:
 2032              	.L149:
 335:src/console.c ****     r = no_key;
 2033              		.loc 2 335 5 is_stmt 1 view .LVU520
 2034 0130 FFF7FEFF 		bl	save_prog_file
 2035              	.LVL173:
 336:src/console.c ****     break;
 2036              		.loc 2 336 5 view .LVU521
 336:src/console.c ****     break;
 2037              		.loc 2 336 7 is_stmt 0 view .LVU522
 2038 0134 184B     		ldr	r3, .L163+8
 2039 0136 93E80300 		ldm	r3, {r0, r1}
 2040 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2041              	.LVL174:
 337:src/console.c ****   case HELP:
 2042              		.loc 2 337 5 is_stmt 1 view .LVU523
 336:src/console.c ****     break;
ARM GAS  /tmp/ccQIVay8.s 			page 55


 2043              		.loc 2 336 7 is_stmt 0 view .LVU524
 2044 013c 84E80300 		stm	r4, {r0, r1}
 337:src/console.c ****   case HELP:
 2045              		.loc 2 337 5 view .LVU525
 2046 0140 9CE7     		b	.L159
 2047              	.LVL175:
 2048              	.L148:
 343:src/console.c ****     r = no_key;
 2049              		.loc 2 343 5 is_stmt 1 view .LVU526
 2050 0142 FFF7FEFF 		bl	do_all_dots
 2051              	.LVL176:
 344:src/console.c ****     break;
 2052              		.loc 2 344 5 view .LVU527
 344:src/console.c ****     break;
 2053              		.loc 2 344 7 is_stmt 0 view .LVU528
 2054 0146 144B     		ldr	r3, .L163+8
 2055 0148 93E80300 		ldm	r3, {r0, r1}
 2056 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2057              	.LVL177:
 345:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 2058              		.loc 2 345 5 is_stmt 1 view .LVU529
 344:src/console.c ****     break;
 2059              		.loc 2 344 7 is_stmt 0 view .LVU530
 2060 014e 84E80300 		stm	r4, {r0, r1}
 345:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 2061              		.loc 2 345 5 view .LVU531
 2062 0152 93E7     		b	.L159
 2063              	.LVL178:
 2064              	.L147:
 347:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 2065              		.loc 2 347 5 is_stmt 1 view .LVU532
 2066              	.LBB101:
 2067              	.LBI101:
 290:src/console.c ****   struct _ndmap temp;
 2068              		.loc 2 290 6 view .LVU533
 2069              	.LBB102:
 291:src/console.c ****   temp.key_34s = key;
 2070              		.loc 2 291 3 view .LVU534
 292:src/console.c ****   temp.shift = shift;
 2071              		.loc 2 292 3 view .LVU535
 292:src/console.c ****   temp.shift = shift;
 2072              		.loc 2 292 16 is_stmt 0 view .LVU536
 2073 0154 6323     		movs	r3, #99
 293:src/console.c ****   process_keycode_with_shift (temp);
 2074              		.loc 2 293 14 view .LVU537
 2075 0156 0027     		movs	r7, #0
 292:src/console.c ****   temp.shift = shift;
 2076              		.loc 2 292 16 view .LVU538
 2077 0158 8DF80830 		strb	r3, [sp, #8]
 293:src/console.c ****   process_keycode_with_shift (temp);
 2078              		.loc 2 293 3 is_stmt 1 view .LVU539
 293:src/console.c ****   process_keycode_with_shift (temp);
 2079              		.loc 2 293 14 is_stmt 0 view .LVU540
 2080 015c 0397     		str	r7, [sp, #12]
 294:src/console.c **** }
 2081              		.loc 2 294 3 is_stmt 1 view .LVU541
 2082 015e 02AE     		add	r6, sp, #8
ARM GAS  /tmp/ccQIVay8.s 			page 56


 2083 0160 96E80300 		ldm	r6, {r0, r1}
 2084              	.LVL179:
 294:src/console.c **** }
 2085              		.loc 2 294 3 is_stmt 0 view .LVU542
 2086 0164 FFF7FEFF 		bl	process_keycode_with_shift
 2087              	.LVL180:
 294:src/console.c **** }
 2088              		.loc 2 294 3 view .LVU543
 2089              	.LBE102:
 2090              	.LBE101:
 348:src/console.c ****     r = no_key;
 2091              		.loc 2 348 5 is_stmt 1 view .LVU544
 2092              	.LBB103:
 2093              	.LBI103:
 290:src/console.c ****   struct _ndmap temp;
 2094              		.loc 2 290 6 view .LVU545
 2095              	.LBB104:
 291:src/console.c ****   temp.key_34s = key;
 2096              		.loc 2 291 3 view .LVU546
 292:src/console.c ****   temp.shift = shift;
 2097              		.loc 2 292 3 view .LVU547
 292:src/console.c ****   temp.shift = shift;
 2098              		.loc 2 292 16 is_stmt 0 view .LVU548
 2099 0168 3323     		movs	r3, #51
 2100 016a 8DF80830 		strb	r3, [sp, #8]
 293:src/console.c ****   process_keycode_with_shift (temp);
 2101              		.loc 2 293 3 is_stmt 1 view .LVU549
 294:src/console.c **** }
 2102              		.loc 2 294 3 view .LVU550
 293:src/console.c ****   process_keycode_with_shift (temp);
 2103              		.loc 2 293 14 is_stmt 0 view .LVU551
 2104 016e 0397     		str	r7, [sp, #12]
 294:src/console.c **** }
 2105              		.loc 2 294 3 view .LVU552
 2106 0170 96E80300 		ldm	r6, {r0, r1}
 2107 0174 FFF7FEFF 		bl	process_keycode_with_shift
 2108              	.LVL181:
 294:src/console.c **** }
 2109              		.loc 2 294 3 view .LVU553
 2110              	.LBE104:
 2111              	.LBE103:
 349:src/console.c ****     break;
 2112              		.loc 2 349 5 is_stmt 1 view .LVU554
 349:src/console.c ****     break;
 2113              		.loc 2 349 7 is_stmt 0 view .LVU555
 2114 0178 074B     		ldr	r3, .L163+8
 2115 017a 93E80300 		ldm	r3, {r0, r1}
 2116 017e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2117              	.LVL182:
 350:src/console.c ****   case DEFMEN:
 2118              		.loc 2 350 5 is_stmt 1 view .LVU556
 349:src/console.c ****     break;
 2119              		.loc 2 349 7 is_stmt 0 view .LVU557
 2120 0180 84E80300 		stm	r4, {r0, r1}
 350:src/console.c ****   case DEFMEN:
 2121              		.loc 2 350 5 view .LVU558
 2122 0184 7AE7     		b	.L159
ARM GAS  /tmp/ccQIVay8.s 			page 57


 2123              	.LVL183:
 2124              	.L162:
 2125              	.LBB105:
 2126              	.LBB90:
  19:src/menu.c    ****   }
 2127              		.loc 1 19 5 is_stmt 1 view .LVU559
  19:src/menu.c    ****   }
 2128              		.loc 1 19 38 is_stmt 0 view .LVU560
 2129 0186 C3F10F03 		rsb	r3, r3, #15
  19:src/menu.c    ****   }
 2130              		.loc 1 19 33 view .LVU561
 2131 018a 0B60     		str	r3, [r1]
  19:src/menu.c    ****   }
 2132              		.loc 1 19 18 view .LVU562
 2133 018c 1360     		str	r3, [r2]
 2134              	.LBE90:
 2135              	.LBE105:
 353:src/console.c ****     break;
 2136              		.loc 2 353 5 is_stmt 1 view .LVU563
 2137 018e 51E7     		b	.L144
 2138              	.L164:
 2139              		.align	2
 2140              	.L163:
 2141 0190 00000000 		.word	.LANCHOR2
 2142 0194 00000000 		.word	.LANCHOR1
 2143 0198 00000000 		.word	.LANCHOR7
 2144 019c 49040008 		.word	134218825
 2145 01a0 00000000 		.word	.LC3
 2146              		.cfi_endproc
 2147              	.LFE24:
 2149              		.section	.text.program_main,"ax",%progbits
 2150              		.align	1
 2151              		.p2align 2,,3
 2152              		.global	program_main
 2153              		.syntax unified
 2154              		.thumb
 2155              		.thumb_func
 2156              		.fpu fpv4-sp-d16
 2158              	program_main:
 2159              	.LFB25:
 360:src/console.c **** 
 361:src/console.c **** void program_main(){
 2160              		.loc 2 361 20 view -0
 2161              		.cfi_startproc
 2162              		@ args = 0, pretend = 0, frame = 16
 2163              		@ frame_needed = 0, uses_anonymous_args = 0
 362:src/console.c ****   int c;
 2164              		.loc 2 362 3 view .LVU565
 363:src/console.c ****   struct _ndmap remapped;
 2165              		.loc 2 363 3 view .LVU566
 364:src/console.c **** 
 365:src/console.c ****   init_mem();
 2166              		.loc 2 365 3 view .LVU567
 361:src/console.c ****   int c;
 2167              		.loc 2 361 20 is_stmt 0 view .LVU568
 2168 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2169              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccQIVay8.s 			page 58


 2170              		.cfi_offset 4, -32
 2171              		.cfi_offset 5, -28
 2172              		.cfi_offset 6, -24
 2173              		.cfi_offset 7, -20
 2174              		.cfi_offset 8, -16
 2175              		.cfi_offset 9, -12
 2176              		.cfi_offset 10, -8
 2177              		.cfi_offset 14, -4
 2178 0004 84B0     		sub	sp, sp, #16
 2179              		.cfi_def_cfa_offset 48
 2180              		.loc 2 365 3 view .LVU569
 2181 0006 FFF7FEFF 		bl	init_mem
 2182              	.LVL184:
 366:src/console.c ****   init_RegionTab();
 2183              		.loc 2 366 3 is_stmt 1 view .LVU570
 2184 000a FFF7FEFF 		bl	init_RegionTab
 2185              	.LVL185:
 367:src/console.c ****   init_34s();
 2186              		.loc 2 367 3 view .LVU571
 2187 000e FFF7FEFF 		bl	init_34s
 2188              	.LVL186:
 368:src/console.c ****   State2.flags = 1;  
 2189              		.loc 2 368 3 view .LVU572
 2190              		.loc 2 368 16 is_stmt 0 view .LVU573
 2191 0012 AF4A     		ldr	r2, .L262
 2192 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 2193 0016 43F00103 		orr	r3, r3, #1
 2194 001a 1376     		strb	r3, [r2, #24]
 369:src/console.c ****   check_create_wp34sdir();
 2195              		.loc 2 369 3 is_stmt 1 view .LVU574
 2196 001c FFF7FEFF 		bl	check_create_wp34sdir
 2197              	.LVL187:
 370:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 2198              		.loc 2 370 3 view .LVU575
 2199              		.loc 2 370 8 is_stmt 0 view .LVU576
 2200 0020 0020     		movs	r0, #0
 2201 0022 FFF7FEFF 		bl	load_ram_file
 2202              	.LVL188:
 2203              		.loc 2 370 6 view .LVU577
 2204 0026 08B9     		cbnz	r0, .L166
 2205              		.loc 2 370 26 is_stmt 1 discriminator 1 view .LVU578
 2206              		.loc 2 370 34 is_stmt 0 discriminator 1 view .LVU579
 2207 0028 AA4B     		ldr	r3, .L262+4
 2208 002a 1860     		str	r0, [r3]
 2209              	.L166:
 371:src/console.c ****   load_backup_file(0);
 2210              		.loc 2 371 3 is_stmt 1 view .LVU580
 2211 002c 0020     		movs	r0, #0
 372:src/console.c ****   load_lib_file(0);
 373:src/console.c ****   t20->newln = 0;
 2212              		.loc 2 373 3 is_stmt 0 view .LVU581
 2213 002e AA4C     		ldr	r4, .L262+8
 2214              	.LBB121:
 2215              	.LBB122:
  28:src/menu.c    **** }
 2216              		.loc 1 28 3 view .LVU582
 2217 0030 AA4E     		ldr	r6, .L262+12
ARM GAS  /tmp/ccQIVay8.s 			page 59


 2218              	.LBE122:
 2219              	.LBE121:
 374:src/console.c ****   t20->lnfill = 0;
 375:src/console.c ****   t20->fixed = 1;
 376:src/console.c ****   t20->xspc = -2;
 377:src/console.c ****   t20->bgfill = 0;
 378:src/console.c ****   
 379:src/console.c ****   display();
 380:src/console.c ****   display_current_menu();
 381:src/console.c ****   lcd_refresh();
 382:src/console.c ****   JustDisplayed = 0;
 383:src/console.c ****   /*
 384:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 385:src/console.c ****     Sleeps peacefully while waiting for a key.
 386:src/console.c ****     Handles (in principle!) turning off and on.
 387:src/console.c ****     =================
 388:src/console.c ****     Main event loop
 389:src/console.c ****     =================
 390:src/console.c **** 
 391:src/console.c ****     Status flags:
 392:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 393:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 394:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 395:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 396:src/console.c ****   */
 397:src/console.c ****   for(;;) {
 398:src/console.c **** 
 399:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 400:src/console.c ****       {
 401:src/console.c **** 	CLR_ST(STAT_RUNNING);
 402:src/console.c **** 	sys_sleep();
 403:src/console.c ****       }
 404:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 2220              		.loc 2 404 35 view .LVU583
 2221 0032 AB4F     		ldr	r7, .L262+16
 405:src/console.c ****     {
 406:src/console.c ****       CLR_ST(STAT_RUNNING);
 407:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2222              		.loc 2 407 7 view .LVU584
 2223 0034 DFF82083 		ldr	r8, .L262+136
 371:src/console.c ****   load_lib_file(0);
 2224              		.loc 2 371 3 view .LVU585
 2225 0038 FFF7FEFF 		bl	load_backup_file
 2226              	.LVL189:
 372:src/console.c ****   t20->newln = 0;
 2227              		.loc 2 372 3 is_stmt 1 view .LVU586
 2228 003c 0020     		movs	r0, #0
 2229 003e FFF7FEFF 		bl	load_lib_file
 2230              	.LVL190:
 373:src/console.c ****   t20->lnfill = 0;
 2231              		.loc 2 373 3 view .LVU587
 2232 0042 236B     		ldr	r3, [r4, #48]
 374:src/console.c ****   t20->fixed = 1;
 2233              		.loc 2 374 3 view .LVU588
 375:src/console.c ****   t20->xspc = -2;
 2234              		.loc 2 375 3 view .LVU589
 375:src/console.c ****   t20->xspc = -2;
ARM GAS  /tmp/ccQIVay8.s 			page 60


 2235              		.loc 2 375 14 is_stmt 0 view .LVU590
 2236 0044 0122     		movs	r2, #1
 2237 0046 1A74     		strb	r2, [r3, #16]
 376:src/console.c ****   t20->bgfill = 0;
 2238              		.loc 2 376 3 is_stmt 1 view .LVU591
 377:src/console.c ****   
 2239              		.loc 2 377 15 is_stmt 0 view .LVU592
 2240 0048 0025     		movs	r5, #0
 376:src/console.c ****   t20->bgfill = 0;
 2241              		.loc 2 376 13 view .LVU593
 2242 004a FE22     		movs	r2, #254
 2243 004c 9A73     		strb	r2, [r3, #14]
 377:src/console.c ****   
 2244              		.loc 2 377 3 is_stmt 1 view .LVU594
 377:src/console.c ****   
 2245              		.loc 2 377 15 is_stmt 0 view .LVU595
 2246 004e 5D82     		strh	r5, [r3, #18]	@ movhi
 373:src/console.c ****   t20->lnfill = 0;
 2247              		.loc 2 373 14 view .LVU596
 2248 0050 1D75     		strb	r5, [r3, #20]
 379:src/console.c ****   display_current_menu();
 2249              		.loc 2 379 3 is_stmt 1 view .LVU597
 2250 0052 FFF7FEFF 		bl	display
 2251              	.LVL191:
 380:src/console.c ****   lcd_refresh();
 2252              		.loc 2 380 3 view .LVU598
 2253              	.LBB124:
 2254              	.LBI121:
  27:src/menu.c    ****   display_menu (current_menu);
 2255              		.loc 1 27 6 view .LVU599
 2256              	.LBB123:
  28:src/menu.c    **** }
 2257              		.loc 1 28 3 view .LVU600
 2258 0056 3068     		ldr	r0, [r6]
 2259 0058 FFF7FEFF 		bl	display_menu
 2260              	.LVL192:
 2261              	.LBE123:
 2262              	.LBE124:
 381:src/console.c ****   JustDisplayed = 0;
 2263              		.loc 2 381 3 view .LVU601
 2264 005c A14B     		ldr	r3, .L262+20
 2265 005e 9847     		blx	r3
 2266              	.LVL193:
 382:src/console.c ****   /*
 2267              		.loc 2 382 3 view .LVU602
 382:src/console.c ****   /*
 2268              		.loc 2 382 17 is_stmt 0 view .LVU603
 2269 0060 A14B     		ldr	r3, .L262+24
 2270 0062 1D60     		str	r5, [r3]
 2271              	.L167:
 397:src/console.c **** 
 2272              		.loc 2 397 3 is_stmt 1 view .LVU604
 399:src/console.c ****       {
 2273              		.loc 2 399 5 view .LVU605
 399:src/console.c ****       {
 2274              		.loc 2 399 10 is_stmt 0 view .LVU606
 2275 0064 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccQIVay8.s 			page 61


 399:src/console.c ****       {
 2276              		.loc 2 399 8 view .LVU607
 2277 0066 9A05     		lsls	r2, r3, #22
 2278 0068 40F18D80 		bpl	.L168
 2279              	.L247:
 399:src/console.c ****       {
 2280              		.loc 2 399 30 discriminator 1 view .LVU608
 2281 006c 2368     		ldr	r3, [r4]
 399:src/console.c ****       {
 2282              		.loc 2 399 27 discriminator 1 view .LVU609
 2283 006e 5B07     		lsls	r3, r3, #29
 2284 0070 40F18980 		bpl	.L168
 401:src/console.c **** 	sys_sleep();
 2285              		.loc 2 401 2 is_stmt 1 view .LVU610
 2286 0074 2368     		ldr	r3, [r4]
 402:src/console.c ****       }
 2287              		.loc 2 402 2 is_stmt 0 view .LVU611
 2288 0076 9D4A     		ldr	r2, .L262+28
 401:src/console.c **** 	sys_sleep();
 2289              		.loc 2 401 2 view .LVU612
 2290 0078 23F00203 		bic	r3, r3, #2
 2291 007c 2360     		str	r3, [r4]
 402:src/console.c ****       }
 2292              		.loc 2 402 2 is_stmt 1 view .LVU613
 2293 007e 9047     		blx	r2
 2294              	.LVL194:
 2295              	.L169:
 408:src/console.c ****       sys_sleep();
 409:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 410:src/console.c **** 	key_push (K_HEARTBEAT);
 411:src/console.c **** 	if (Pause > 0) Pause--;
 412:src/console.c ****       }
 413:src/console.c ****       sys_timer_disable(0); // stop timer
 414:src/console.c ****     }
 415:src/console.c ****     
 416:src/console.c ****     // Wakeup in off state or going to sleep
 417:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 2296              		.loc 2 417 5 view .LVU614
 2297              		.loc 2 417 9 is_stmt 0 view .LVU615
 2298 0080 2368     		ldr	r3, [r4]
 2299              		.loc 2 417 8 view .LVU616
 2300 0082 9D05     		lsls	r5, r3, #22
 2301 0084 00F1A680 		bmi	.L175
 2302              	.L248:
 2303              		.loc 2 417 29 discriminator 1 view .LVU617
 2304 0088 2368     		ldr	r3, [r4]
 2305              		.loc 2 417 26 discriminator 1 view .LVU618
 2306 008a 5807     		lsls	r0, r3, #29
 2307 008c 00F1A280 		bmi	.L175
 418:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 419:src/console.c ****         // Going to off mode
 420:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 421:src/console.c ****         draw_power_off_image(1);
 422:src/console.c **** 
 423:src/console.c ****         LCD_power_off(0);
 424:src/console.c ****         SET_ST(STAT_SUSPENDED);
 425:src/console.c ****         SET_ST(STAT_OFF);
ARM GAS  /tmp/ccQIVay8.s 			page 62


 426:src/console.c ****       }
 427:src/console.c ****       // Already in OFF -> just continue to sleep above
 428:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 429:src/console.c ****       // thus reaching the sleep()
 430:src/console.c ****     }
 431:src/console.c **** 
 432:src/console.c ****     // Well, we are woken-up
 433:src/console.c ****     SET_ST(STAT_RUNNING);
 2308              		.loc 2 433 5 is_stmt 1 view .LVU619
 2309 0090 2368     		ldr	r3, [r4]
 2310 0092 43F00203 		orr	r3, r3, #2
 2311 0096 2360     		str	r3, [r4]
 434:src/console.c **** 
 435:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 436:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 2312              		.loc 2 436 5 view .LVU620
 2313 0098 2368     		ldr	r3, [r4]
 2314 009a 23F00403 		bic	r3, r3, #4
 2315 009e 2360     		str	r3, [r4]
 437:src/console.c **** 
 438:src/console.c ****     // Get up from OFF state
 439:src/console.c ****     if ( ST(STAT_OFF) ) {
 2316              		.loc 2 439 5 view .LVU621
 2317              		.loc 2 439 10 is_stmt 0 view .LVU622
 2318 00a0 2368     		ldr	r3, [r4]
 2319              		.loc 2 439 8 view .LVU623
 2320 00a2 D906     		lsls	r1, r3, #27
 2321 00a4 0ED5     		bpl	.L180
 440:src/console.c ****       LCD_power_on();
 2322              		.loc 2 440 7 is_stmt 1 view .LVU624
 2323 00a6 924B     		ldr	r3, .L262+32
 2324 00a8 9847     		blx	r3
 2325              	.LVL195:
 441:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 2326              		.loc 2 441 7 view .LVU625
 2327 00aa 924B     		ldr	r3, .L262+36
 2328 00ac 9847     		blx	r3
 2329              	.LVL196:
 442:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 2330              		.loc 2 442 7 view .LVU626
 2331 00ae 924B     		ldr	r3, .L262+40
 2332 00b0 9847     		blx	r3
 2333              	.LVL197:
 443:src/console.c **** 
 444:src/console.c ****       CLR_ST(STAT_OFF);
 2334              		.loc 2 444 7 view .LVU627
 2335 00b2 2368     		ldr	r3, [r4]
 445:src/console.c **** 
 446:src/console.c ****       if ( !lcd_get_buf_cleared() )
 2336              		.loc 2 446 13 is_stmt 0 view .LVU628
 2337 00b4 914A     		ldr	r2, .L262+44
 444:src/console.c **** 
 2338              		.loc 2 444 7 view .LVU629
 2339 00b6 23F01003 		bic	r3, r3, #16
 2340 00ba 2360     		str	r3, [r4]
 2341              		.loc 2 446 7 is_stmt 1 view .LVU630
 2342              		.loc 2 446 13 is_stmt 0 view .LVU631
ARM GAS  /tmp/ccQIVay8.s 			page 63


 2343 00bc 9047     		blx	r2
 2344              	.LVL198:
 2345              		.loc 2 446 10 view .LVU632
 2346 00be 08B9     		cbnz	r0, .L180
 447:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 2347              		.loc 2 447 9 is_stmt 1 view .LVU633
 2348 00c0 8F4B     		ldr	r3, .L262+48
 2349 00c2 9847     		blx	r3
 2350              	.LVL199:
 2351              	.L180:
 448:src/console.c ****     }
 449:src/console.c **** 
 450:src/console.c ****     // Key is ready -> clear auto off timer
 451:src/console.c ****     //    if ( !key_empty() )
 452:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 453:src/console.c ****     // Fetch the key
 454:src/console.c ****     //  < 0 -> No key event
 455:src/console.c ****     //  > 0 -> Key pressed
 456:src/console.c ****     // == 0 -> Key released
 457:src/console.c ****     c = key_pop();
 2352              		.loc 2 457 5 view .LVU634
 2353              		.loc 2 457 9 is_stmt 0 view .LVU635
 2354 00c4 8F4B     		ldr	r3, .L262+52
 2355 00c6 9847     		blx	r3
 2356              	.LVL200:
 458:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2357              		.loc 2 458 8 view .LVU636
 2358 00c8 6228     		cmp	r0, #98
 457:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2359              		.loc 2 457 9 view .LVU637
 2360 00ca 8246     		mov	r10, r0
 2361              	.LVL201:
 2362              		.loc 2 458 5 is_stmt 1 view .LVU638
 2363              		.loc 2 458 8 is_stmt 0 view .LVU639
 2364 00cc 00F0A980 		beq	.L182
 2365              		.loc 2 458 29 discriminator 1 view .LVU640
 2366 00d0 0028     		cmp	r0, #0
 2367 00d2 40F3A380 		ble	.L183
 459:src/console.c ****       reset_auto_off();
 2368              		.loc 2 459 7 is_stmt 1 view .LVU641
 2369 00d6 8C4B     		ldr	r3, .L262+56
 2370 00d8 9847     		blx	r3
 2371              	.LVL202:
 460:src/console.c ****       start_key_timer();
 2372              		.loc 2 460 7 view .LVU642
 2373              	.LBB125:
 2374              	.LBI125:
 232:src/console.c ****     start_ticks = get_rtc_ticks();
 2375              		.loc 2 232 6 view .LVU643
 2376              	.LBB126:
 233:src/console.c **** }
 2377              		.loc 2 233 5 view .LVU644
 233:src/console.c **** }
 2378              		.loc 2 233 19 is_stmt 0 view .LVU645
 2379 00da 8C4B     		ldr	r3, .L262+60
 2380 00dc 9847     		blx	r3
 2381              	.LVL203:
ARM GAS  /tmp/ccQIVay8.s 			page 64


 233:src/console.c **** }
 2382              		.loc 2 233 17 view .LVU646
 2383 00de 8C4B     		ldr	r3, .L262+64
 2384              	.LBE126:
 2385              	.LBE125:
 2386              	.LBB128:
 2387              	.LBB129:
  68:src/console.c **** 
 2388              		.loc 2 68 6 view .LVU647
 2389 00e0 BAF1630F 		cmp	r10, #99
 2390              	.LBE129:
 2391              	.LBE128:
 2392              	.LBB142:
 2393              	.LBB127:
 233:src/console.c **** }
 2394              		.loc 2 233 17 view .LVU648
 2395 00e4 1860     		str	r0, [r3]
 2396              	.LBE127:
 2397              	.LBE142:
 461:src/console.c ****     }
 462:src/console.c ****     if (c >= 0) {
 2398              		.loc 2 462 5 is_stmt 1 view .LVU649
 463:src/console.c ****       remapped = remap(c);
 2399              		.loc 2 463 7 view .LVU650
 2400              	.LVL204:
 2401              	.LBB143:
 2402              	.LBI128:
  60:src/console.c **** 
 2403              		.loc 2 60 22 view .LVU651
 2404              	.LBB131:
  62:src/console.c **** 
 2405              		.loc 2 62 3 view .LVU652
 2406              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 2407              		.loc 3 1 1 view .LVU653
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
ARM GAS  /tmp/ccQIVay8.s 			page 65


  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 2408              		.loc 3 59 3 view .LVU654
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
ARM GAS  /tmp/ccQIVay8.s 			page 66


  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU, 14}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  96:src/keytran.c ****     {K_NOP, 0}, // no function
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 2409              		.loc 3 117 3 view .LVU655
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
ARM GAS  /tmp/ccQIVay8.s 			page 67


 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 2410              		.loc 3 175 1 view .LVU656
  66:src/console.c **** 
 2411              		.loc 2 66 3 view .LVU657
  68:src/console.c **** 
 2412              		.loc 2 68 3 view .LVU658
  68:src/console.c **** 
 2413              		.loc 2 68 6 is_stmt 0 view .LVU659
 2414 00e6 00F0E680 		beq	.L244
  70:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 2415              		.loc 2 70 3 is_stmt 1 view .LVU660
  70:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 2416              		.loc 2 70 6 is_stmt 0 view .LVU661
 2417 00ea BAF12C0F 		cmp	r10, #44
 2418 00ee 00F0C180 		beq	.L220
 2419              	.LVL205:
 2420              	.L219:
  75:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
ARM GAS  /tmp/ccQIVay8.s 			page 68


 2421              		.loc 2 75 3 is_stmt 1 view .LVU662
  75:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2422              		.loc 2 75 8 is_stmt 0 view .LVU663
 2423 00f2 FFF7FEFF 		bl	get_alpha_state
 2424              	.LVL206:
  75:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2425              		.loc 2 75 6 view .LVU664
 2426 00f6 0028     		cmp	r0, #0
 2427 00f8 00F08380 		beq	.L187
  76:src/console.c ****       switch (cur_shift()) { 
 2428              		.loc 2 76 5 is_stmt 1 view .LVU665
  76:src/console.c ****       switch (cur_shift()) { 
 2429              		.loc 2 76 8 is_stmt 0 view .LVU666
 2430 00fc BAF11C0F 		cmp	r10, #28
 2431 0100 00F02C81 		beq	.L245
  93:src/console.c ****   }
 2432              		.loc 2 93 5 is_stmt 1 view .LVU667
  93:src/console.c ****   }
 2433              		.loc 2 93 26 is_stmt 0 view .LVU668
 2434 0104 834B     		ldr	r3, .L262+68
 2435              	.L241:
 122:src/console.c ****     break;
 2436              		.loc 2 122 26 view .LVU669
 2437 0106 03EBCA02 		add	r2, r3, r10, lsl #3
 2438 010a 92E80300 		ldm	r2, {r0, r1}
 2439 010e 0DF10809 		add	r9, sp, #8
 2440 0112 13F83AA0 		ldrb	r10, [r3, r10, lsl #3]	@ zero_extendqisi2
 2441              	.LVL207:
 122:src/console.c ****     break;
 2442              		.loc 2 122 26 view .LVU670
 2443 0116 89E80300 		stm	r9, {r0, r1}
 2444 011a 0D46     		mov	r5, r1
 2445              	.LVL208:
 2446              	.L185:
 122:src/console.c ****     break;
 2447              		.loc 2 122 26 view .LVU671
 2448              	.LBE131:
 2449              	.LBE143:
 464:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2450              		.loc 2 464 7 is_stmt 1 view .LVU672
 2451              		.loc 2 464 10 is_stmt 0 view .LVU673
 2452 011c BAF12F0F 		cmp	r10, #47
 2453 0120 00F08D80 		beq	.L246
 2454              	.LVL209:
 2455              	.L209:
 465:src/console.c **** 	set_menu ( remapped.shift );
 466:src/console.c **** 	display_current_menu ();
 467:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 468:src/console.c **** 	case SHIFT_F:
 469:src/console.c **** 	  remapped = f_shift; // F -> N
 470:src/console.c **** 	  break;
 471:src/console.c **** 	case SHIFT_G:
 472:src/console.c **** 	  remapped = g_shift; // G -> N
 473:src/console.c **** 	  break;
 474:src/console.c **** 	case SHIFT_H:
 475:src/console.c **** 	  remapped = h_shift; // H -> N
 476:src/console.c **** 	default:
ARM GAS  /tmp/ccQIVay8.s 			page 69


 477:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 478:src/console.c **** 	}
 479:src/console.c ****       }
 480:src/console.c ****       if (remapped.key_34s == K_SYS) {
 2456              		.loc 2 480 7 is_stmt 1 view .LVU674
 2457              		.loc 2 480 10 is_stmt 0 view .LVU675
 2458 0124 BAF1300F 		cmp	r10, #48
 2459 0128 18D1     		bne	.L216
 481:src/console.c **** 	SET_ST(STAT_MENU);
 2460              		.loc 2 481 2 is_stmt 1 view .LVU676
 2461 012a 2368     		ldr	r3, [r4]
 482:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 2462              		.loc 2 482 2 is_stmt 0 view .LVU677
 2463 012c 7A4D     		ldr	r5, .L262+72
 2464              	.LVL210:
 2465              		.loc 2 482 2 view .LVU678
 2466 012e 7B48     		ldr	r0, .L262+76
 2467 0130 0022     		movs	r2, #0
 481:src/console.c **** 	SET_ST(STAT_MENU);
 2468              		.loc 2 481 2 view .LVU679
 2469 0132 43F04003 		orr	r3, r3, #64
 2470              		.loc 2 482 2 view .LVU680
 2471 0136 1146     		mov	r1, r2
 481:src/console.c **** 	SET_ST(STAT_MENU);
 2472              		.loc 2 481 2 view .LVU681
 2473 0138 2360     		str	r3, [r4]
 2474              		.loc 2 482 2 is_stmt 1 view .LVU682
 2475 013a A847     		blx	r5
 2476              	.LVL211:
 483:src/console.c **** 	CLR_ST(STAT_MENU);
 2477              		.loc 2 483 2 view .LVU683
 484:src/console.c **** 	remapped =  no_key;
 2478              		.loc 2 484 11 is_stmt 0 view .LVU684
 2479 013c 784B     		ldr	r3, .L262+80
 483:src/console.c **** 	CLR_ST(STAT_MENU);
 2480              		.loc 2 483 2 view .LVU685
 2481 013e 2268     		ldr	r2, [r4]
 2482              		.loc 2 484 11 view .LVU686
 2483 0140 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2484              	.LVL212:
 2485              		.loc 2 484 11 view .LVU687
 2486 0144 93E80300 		ldm	r3, {r0, r1}
 483:src/console.c **** 	CLR_ST(STAT_MENU);
 2487              		.loc 2 483 2 view .LVU688
 2488 0148 22F04002 		bic	r2, r2, #64
 2489 014c 2260     		str	r2, [r4]
 2490              		.loc 2 484 2 is_stmt 1 view .LVU689
 2491              	.LVL213:
 2492              		.loc 2 484 11 is_stmt 0 view .LVU690
 2493 014e 04AA     		add	r2, sp, #16
 2494 0150 02E90300 		stmdb	r2, {r0, r1}
 2495              	.LBB144:
 2496              	.LBB145:
  28:src/menu.c    **** }
 2497              		.loc 1 28 3 view .LVU691
 2498 0154 3068     		ldr	r0, [r6]
 2499              	.LBE145:
ARM GAS  /tmp/ccQIVay8.s 			page 70


 2500              	.LBE144:
 2501              		.loc 2 484 11 view .LVU692
 2502 0156 0D46     		mov	r5, r1
 2503              	.LVL214:
 485:src/console.c **** 	display_current_menu();
 2504              		.loc 2 485 2 is_stmt 1 view .LVU693
 2505              	.LBB147:
 2506              	.LBI144:
  27:src/menu.c    ****   display_menu (current_menu);
 2507              		.loc 1 27 6 view .LVU694
 2508              	.LBB146:
  28:src/menu.c    **** }
 2509              		.loc 1 28 3 view .LVU695
 2510 0158 FFF7FEFF 		bl	display_menu
 2511              	.LVL215:
 2512              	.L216:
  28:src/menu.c    **** }
 2513              		.loc 1 28 3 is_stmt 0 view .LVU696
 2514              	.LBE146:
 2515              	.LBE147:
 486:src/console.c ****       }
 487:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 2516              		.loc 2 487 7 is_stmt 1 view .LVU697
 2517              		.loc 2 487 10 is_stmt 0 view .LVU698
 2518 015c BAF1310F 		cmp	r10, #49
 2519 0160 00F08980 		beq	.L186
 488:src/console.c **** 	remapped = do_multi (remapped);
 489:src/console.c **** 	display_current_menu();
 490:src/console.c ****       }
 491:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 2520              		.loc 2 491 7 is_stmt 1 view .LVU699
 2521              		.loc 2 491 10 is_stmt 0 view .LVU700
 2522 0164 BAF1320F 		cmp	r10, #50
 2523 0168 00F09F80 		beq	.L218
 2524              	.LVL216:
 2525              	.L243:
 2526              		.loc 2 491 10 view .LVU701
 2527 016c 0DF10809 		add	r9, sp, #8
 2528              	.L189:
 2529              	.LVL217:
 492:src/console.c ****       process_keycode_with_shift(remapped);
 2530              		.loc 2 492 7 is_stmt 1 view .LVU702
 2531              		.loc 2 492 7 is_stmt 0 view .LVU703
 2532 0170 8DF808A0 		strb	r10, [sp, #8]
 2533 0174 0395     		str	r5, [sp, #12]
 2534 0176 99E80300 		ldm	r9, {r0, r1}
 2535 017a FFF7FEFF 		bl	process_keycode_with_shift
 2536              	.LVL218:
 397:src/console.c **** 
 2537              		.loc 2 397 3 is_stmt 1 view .LVU704
 399:src/console.c ****       {
 2538              		.loc 2 399 5 view .LVU705
 399:src/console.c ****       {
 2539              		.loc 2 399 10 is_stmt 0 view .LVU706
 2540 017e 2368     		ldr	r3, [r4]
 399:src/console.c ****       {
 2541              		.loc 2 399 8 view .LVU707
ARM GAS  /tmp/ccQIVay8.s 			page 71


 2542 0180 9A05     		lsls	r2, r3, #22
 2543 0182 3FF573AF 		bmi	.L247
 2544              	.LVL219:
 2545              	.L168:
 404:src/console.c ****     {
 2546              		.loc 2 404 10 is_stmt 1 view .LVU708
 404:src/console.c ****     {
 2547              		.loc 2 404 15 is_stmt 0 view .LVU709
 2548 0186 2568     		ldr	r5, [r4]
 404:src/console.c ****     {
 2549              		.loc 2 404 13 view .LVU710
 2550 0188 15F40075 		ands	r5, r5, #512
 2551 018c 7FF478AF 		bne	.L169
 404:src/console.c ****     {
 2552              		.loc 2 404 35 discriminator 1 view .LVU711
 2553 0190 B847     		blx	r7
 2554              	.LVL220:
 404:src/console.c ****     {
 2555              		.loc 2 404 32 discriminator 1 view .LVU712
 2556 0192 0028     		cmp	r0, #0
 2557 0194 3FF474AF 		beq	.L169
 406:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2558              		.loc 2 406 7 is_stmt 1 view .LVU713
 2559 0198 2368     		ldr	r3, [r4]
 2560 019a 23F00203 		bic	r3, r3, #2
 407:src/console.c ****       sys_sleep();
 2561              		.loc 2 407 7 is_stmt 0 view .LVU714
 2562 019e 2846     		mov	r0, r5
 2563 01a0 6421     		movs	r1, #100
 406:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2564              		.loc 2 406 7 view .LVU715
 2565 01a2 2360     		str	r3, [r4]
 407:src/console.c ****       sys_sleep();
 2566              		.loc 2 407 7 is_stmt 1 view .LVU716
 2567 01a4 C047     		blx	r8
 2568              	.LVL221:
 408:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 2569              		.loc 2 408 7 view .LVU717
 2570 01a6 514B     		ldr	r3, .L262+28
 2571 01a8 9847     		blx	r3
 2572              	.LVL222:
 409:src/console.c **** 	key_push (K_HEARTBEAT);
 2573              		.loc 2 409 7 view .LVU718
 409:src/console.c **** 	key_push (K_HEARTBEAT);
 2574              		.loc 2 409 11 is_stmt 0 view .LVU719
 2575 01aa 5E4B     		ldr	r3, .L262+84
 2576 01ac 2846     		mov	r0, r5
 2577 01ae 9847     		blx	r3
 2578              	.LVL223:
 409:src/console.c **** 	key_push (K_HEARTBEAT);
 2579              		.loc 2 409 10 view .LVU720
 2580 01b0 48B1     		cbz	r0, .L173
 410:src/console.c **** 	if (Pause > 0) Pause--;
 2581              		.loc 2 410 2 is_stmt 1 view .LVU721
 2582 01b2 5D4B     		ldr	r3, .L262+88
 2583 01b4 6220     		movs	r0, #98
 2584 01b6 9847     		blx	r3
ARM GAS  /tmp/ccQIVay8.s 			page 72


 2585              	.LVL224:
 411:src/console.c ****       }
 2586              		.loc 2 411 2 view .LVU722
 411:src/console.c ****       }
 2587              		.loc 2 411 12 is_stmt 0 view .LVU723
 2588 01b8 5C4B     		ldr	r3, .L262+92
 2589 01ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 411:src/console.c ****       }
 2590              		.loc 2 411 5 view .LVU724
 2591 01bc 1AB1     		cbz	r2, .L173
 411:src/console.c ****       }
 2592              		.loc 2 411 17 is_stmt 1 discriminator 1 view .LVU725
 411:src/console.c ****       }
 2593              		.loc 2 411 22 is_stmt 0 discriminator 1 view .LVU726
 2594 01be 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2595 01c0 013A     		subs	r2, r2, #1
 2596 01c2 D2B2     		uxtb	r2, r2
 2597 01c4 1A70     		strb	r2, [r3]
 2598              	.L173:
 413:src/console.c ****     }
 2599              		.loc 2 413 7 is_stmt 1 view .LVU727
 2600 01c6 5A4B     		ldr	r3, .L262+96
 2601 01c8 0020     		movs	r0, #0
 2602 01ca 9847     		blx	r3
 2603              	.LVL225:
 417:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2604              		.loc 2 417 5 view .LVU728
 417:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2605              		.loc 2 417 9 is_stmt 0 view .LVU729
 2606 01cc 2368     		ldr	r3, [r4]
 417:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2607              		.loc 2 417 8 view .LVU730
 2608 01ce 9D05     		lsls	r5, r3, #22
 2609 01d0 7FF55AAF 		bpl	.L248
 2610              	.L175:
 418:src/console.c ****         // Going to off mode
 2611              		.loc 2 418 7 is_stmt 1 view .LVU731
 418:src/console.c ****         // Going to off mode
 2612              		.loc 2 418 12 is_stmt 0 view .LVU732
 2613 01d4 2568     		ldr	r5, [r4]
 418:src/console.c ****         // Going to off mode
 2614              		.loc 2 418 10 view .LVU733
 2615 01d6 15F00405 		ands	r5, r5, #4
 2616 01da 7FF443AF 		bne	.L167
 420:src/console.c ****         draw_power_off_image(1);
 2617              		.loc 2 420 9 is_stmt 1 view .LVU734
 2618 01de 554B     		ldr	r3, .L262+100
 2619 01e0 2846     		mov	r0, r5
 2620 01e2 9847     		blx	r3
 2621              	.LVL226:
 421:src/console.c **** 
 2622              		.loc 2 421 9 view .LVU735
 2623 01e4 544B     		ldr	r3, .L262+104
 2624 01e6 0120     		movs	r0, #1
 2625 01e8 9847     		blx	r3
 2626              	.LVL227:
 423:src/console.c ****         SET_ST(STAT_SUSPENDED);
ARM GAS  /tmp/ccQIVay8.s 			page 73


 2627              		.loc 2 423 9 view .LVU736
 2628 01ea 544B     		ldr	r3, .L262+108
 2629 01ec 2846     		mov	r0, r5
 2630 01ee 9847     		blx	r3
 2631              	.LVL228:
 424:src/console.c ****         SET_ST(STAT_OFF);
 2632              		.loc 2 424 9 view .LVU737
 2633 01f0 2368     		ldr	r3, [r4]
 2634 01f2 43F00403 		orr	r3, r3, #4
 2635 01f6 2360     		str	r3, [r4]
 425:src/console.c ****       }
 2636              		.loc 2 425 9 view .LVU738
 2637 01f8 2368     		ldr	r3, [r4]
 2638 01fa 43F01003 		orr	r3, r3, #16
 2639 01fe 2360     		str	r3, [r4]
 2640 0200 30E7     		b	.L167
 2641              	.LVL229:
 2642              	.L187:
 2643              	.LBB148:
 2644              	.LBB132:
  96:src/console.c ****   case KEY_F1:
 2645              		.loc 2 96 3 view .LVU739
 2646 0202 AAF12603 		sub	r3, r10, #38
 2647 0206 052B     		cmp	r3, #5
 2648 0208 00F22381 		bhi	.L192
 2649 020c DFE813F0 		tbh	[pc, r3, lsl #1]
 2650              	.L194:
 2651 0210 FC00     		.2byte	(.L199-.L194)/2
 2652 0212 0501     		.2byte	(.L198-.L194)/2
 2653 0214 0D01     		.2byte	(.L197-.L194)/2
 2654 0216 EE00     		.2byte	(.L196-.L194)/2
 2655 0218 DB00     		.2byte	(.L195-.L194)/2
 2656 021a C000     		.2byte	(.L193-.L194)/2
 2657              	.LVL230:
 2658              		.p2align 1
 2659              	.L183:
  96:src/console.c ****   case KEY_F1:
 2660              		.loc 2 96 3 is_stmt 0 view .LVU740
 2661              	.LBE132:
 2662              	.LBE148:
 462:src/console.c ****       remapped = remap(c);
 2663              		.loc 2 462 5 is_stmt 1 view .LVU741
 462:src/console.c ****       remapped = remap(c);
 2664              		.loc 2 462 8 is_stmt 0 view .LVU742
 2665 021c 7FF422AF 		bne	.L167
 2666 0220 67E7     		b	.L219
 2667              	.L182:
 462:src/console.c ****       remapped = remap(c);
 2668              		.loc 2 462 5 is_stmt 1 view .LVU743
 463:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2669              		.loc 2 463 7 view .LVU744
 2670              	.LVL231:
 2671              	.LBB149:
  60:src/console.c **** 
 2672              		.loc 2 60 22 view .LVU745
 2673              	.LBB133:
  62:src/console.c **** 
ARM GAS  /tmp/ccQIVay8.s 			page 74


 2674              		.loc 2 62 3 view .LVU746
   1:src/keytran.c ****     // Top row of DM42 1--6
 2675              		.loc 3 1 1 view .LVU747
  59:src/keytran.c ****     {K_RELEASE, -1},
 2676              		.loc 3 59 3 view .LVU748
 117:src/keytran.c ****     {K_RELEASE, -1},
 2677              		.loc 3 117 3 view .LVU749
 2678              		.loc 3 175 1 view .LVU750
  66:src/console.c **** 
 2679              		.loc 2 66 3 view .LVU751
  66:src/console.c **** 
 2680              		.loc 2 66 23 view .LVU752
  66:src/console.c **** 
 2681              		.loc 2 66 30 is_stmt 0 view .LVU753
 2682 0222 474B     		ldr	r3, .L262+112
 2683              	.LVL232:
 2684              	.L242:
  66:src/console.c **** 
 2685              		.loc 2 66 30 view .LVU754
 2686 0224 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2687              	.LVL233:
  66:src/console.c **** 
 2688              		.loc 2 66 30 view .LVU755
 2689 0228 93E80300 		ldm	r3, {r0, r1}
 2690 022c 0DF10809 		add	r9, sp, #8
 2691              	.LBE133:
 2692              	.LBE149:
 464:src/console.c **** 	set_menu ( remapped.shift );
 2693              		.loc 2 464 10 view .LVU756
 2694 0230 BAF12F0F 		cmp	r10, #47
 2695              	.LBB150:
 2696              	.LBB134:
  66:src/console.c **** 
 2697              		.loc 2 66 30 view .LVU757
 2698 0234 89E80300 		stm	r9, {r0, r1}
 2699 0238 0D46     		mov	r5, r1
 2700              	.LVL234:
  66:src/console.c **** 
 2701              		.loc 2 66 30 view .LVU758
 2702              	.LBE134:
 2703              	.LBE150:
 464:src/console.c **** 	set_menu ( remapped.shift );
 2704              		.loc 2 464 7 is_stmt 1 view .LVU759
 464:src/console.c **** 	set_menu ( remapped.shift );
 2705              		.loc 2 464 10 is_stmt 0 view .LVU760
 2706 023a 7FF473AF 		bne	.L209
 2707              	.LVL235:
 2708              	.L246:
 465:src/console.c **** 	display_current_menu ();
 2709              		.loc 2 465 2 is_stmt 1 view .LVU761
 2710              	.LBB151:
 2711              	.LBI151:
   3:src/menu.c    ****   int m = current_menu;
 2712              		.loc 1 3 6 view .LVU762
 2713              	.LBB152:
   4:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 2714              		.loc 1 4 3 view .LVU763
ARM GAS  /tmp/ccQIVay8.s 			page 75


   4:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 2715              		.loc 1 4 7 is_stmt 0 view .LVU764
 2716 023e 3368     		ldr	r3, [r6]
 2717              	.LVL236:
   5:src/menu.c    ****     current_menu = default_menu;
 2718              		.loc 1 5 3 is_stmt 1 view .LVU765
   5:src/menu.c    ****     current_menu = default_menu;
 2719              		.loc 1 5 6 is_stmt 0 view .LVU766
 2720 0240 AB42     		cmp	r3, r5
 2721 0242 3AD0     		beq	.L249
   8:src/menu.c    ****     current_menu = last_menu;
 2722              		.loc 1 8 8 is_stmt 1 view .LVU767
   8:src/menu.c    ****     current_menu = last_menu;
 2723              		.loc 1 8 11 is_stmt 0 view .LVU768
 2724 0244 6A1C     		adds	r2, r5, #1
 2725 0246 3ED0     		beq	.L250
 2726              	.LVL237:
 2727              	.L210:
  12:src/menu.c    ****   }
 2728              		.loc 1 12 5 is_stmt 1 view .LVU769
  12:src/menu.c    ****   }
 2729              		.loc 1 12 18 is_stmt 0 view .LVU770
 2730 0248 3560     		str	r5, [r6]
 2731              	.LVL238:
 2732              	.L213:
  14:src/menu.c    **** }
 2733              		.loc 1 14 3 is_stmt 1 view .LVU771
  14:src/menu.c    **** }
 2734              		.loc 1 14 6 is_stmt 0 view .LVU772
 2735 024a 092B     		cmp	r3, #9
 2736 024c 01D0     		beq	.L214
 2737              	.L211:
  14:src/menu.c    **** }
 2738              		.loc 1 14 15 is_stmt 1 view .LVU773
  14:src/menu.c    **** }
 2739              		.loc 1 14 25 is_stmt 0 view .LVU774
 2740 024e 3D4A     		ldr	r2, .L262+116
 2741 0250 1360     		str	r3, [r2]
 2742              	.L214:
  14:src/menu.c    **** }
 2743              		.loc 1 14 25 view .LVU775
 2744              	.LBE152:
 2745              	.LBE151:
 466:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 2746              		.loc 2 466 2 is_stmt 1 view .LVU776
 2747              	.LBB156:
 2748              	.LBI156:
  27:src/menu.c    ****   display_menu (current_menu);
 2749              		.loc 1 27 6 view .LVU777
 2750              	.LBB157:
  28:src/menu.c    **** }
 2751              		.loc 1 28 3 view .LVU778
 2752 0252 2846     		mov	r0, r5
 2753 0254 FFF7FEFF 		bl	display_menu
 2754              	.LVL239:
 2755              	.LBE157:
 2756              	.LBE156:
ARM GAS  /tmp/ccQIVay8.s 			page 76


 467:src/console.c **** 	case SHIFT_F:
 2757              		.loc 2 467 2 view .LVU779
 467:src/console.c **** 	case SHIFT_F:
 2758              		.loc 2 467 10 is_stmt 0 view .LVU780
 2759 0258 FFF7FEFF 		bl	cur_shift
 2760              	.LVL240:
 467:src/console.c **** 	case SHIFT_F:
 2761              		.loc 2 467 2 view .LVU781
 2762 025c 0228     		cmp	r0, #2
 469:src/console.c **** 	  break;
 2763              		.loc 2 469 4 is_stmt 1 view .LVU782
 469:src/console.c **** 	  break;
 2764              		.loc 2 469 13 is_stmt 0 view .LVU783
 2765 025e 14BF     		ite	ne
 2766 0260 394B     		ldrne	r3, .L262+120
 472:src/console.c **** 	  break;
 2767              		.loc 2 472 4 is_stmt 1 view .LVU784
 472:src/console.c **** 	  break;
 2768              		.loc 2 472 13 is_stmt 0 view .LVU785
 2769 0262 3A4B     		ldreq	r3, .L262+124
 2770 0264 93E80300 		ldm	r3, {r0, r1}
 2771 0268 89E80300 		stm	r9, {r0, r1}
 2772 026c 0D46     		mov	r5, r1
 2773 026e 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2774              	.LVL241:
 473:src/console.c **** 	case SHIFT_H:
 2775              		.loc 2 473 4 is_stmt 1 view .LVU786
 2776 0272 57E7     		b	.L209
 2777              	.LVL242:
 2778              	.L220:
 2779              	.LBB158:
 2780              	.LBB135:
 2781              	.LBB130:
  72:src/console.c ****   }
 2782              		.loc 2 72 12 is_stmt 0 view .LVU787
 2783 0274 0C25     		movs	r5, #12
 2784              	.LVL243:
 2785              	.L186:
  72:src/console.c ****   }
 2786              		.loc 2 72 12 view .LVU788
 2787              	.LBE130:
 2788              	.LBE135:
 2789              	.LBE158:
 488:src/console.c **** 	display_current_menu();
 2790              		.loc 2 488 2 is_stmt 1 view .LVU789
 488:src/console.c **** 	display_current_menu();
 2791              		.loc 2 488 13 is_stmt 0 view .LVU790
 2792 0276 3123     		movs	r3, #49
 2793 0278 0395     		str	r5, [sp, #12]
 2794 027a 8DF80830 		strb	r3, [sp, #8]
 2795 027e 6D46     		mov	r5, sp
 2796              	.LVL244:
 488:src/console.c **** 	display_current_menu();
 2797              		.loc 2 488 13 view .LVU791
 2798 0280 0DF10809 		add	r9, sp, #8
 2799 0284 99E80600 		ldm	r9, {r1, r2}
 2800 0288 2846     		mov	r0, r5
ARM GAS  /tmp/ccQIVay8.s 			page 77


 2801 028a FFF7FEFF 		bl	do_multi
 2802              	.LVL245:
 2803 028e 95E80300 		ldm	r5, {r0, r1}
 2804 0292 89E80300 		stm	r9, {r0, r1}
 2805              	.LVL246:
 488:src/console.c **** 	display_current_menu();
 2806              		.loc 2 488 13 view .LVU792
 2807 0296 9DF808A0 		ldrb	r10, [sp, #8]	@ zero_extendqisi2
 2808              	.LVL247:
 2809              	.LBB159:
 2810              	.LBB160:
  28:src/menu.c    **** }
 2811              		.loc 1 28 3 view .LVU793
 2812 029a 3068     		ldr	r0, [r6]
 2813              	.LBE160:
 2814              	.LBE159:
 488:src/console.c **** 	display_current_menu();
 2815              		.loc 2 488 13 view .LVU794
 2816 029c 039D     		ldr	r5, [sp, #12]
 2817              	.LVL248:
 489:src/console.c ****       }
 2818              		.loc 2 489 2 is_stmt 1 view .LVU795
 2819              	.LBB162:
 2820              	.LBI159:
  27:src/menu.c    ****   display_menu (current_menu);
 2821              		.loc 1 27 6 view .LVU796
 2822              	.LBB161:
  28:src/menu.c    **** }
 2823              		.loc 1 28 3 view .LVU797
 2824 029e FFF7FEFF 		bl	display_menu
 2825              	.LVL249:
  28:src/menu.c    **** }
 2826              		.loc 1 28 3 is_stmt 0 view .LVU798
 2827              	.LBE161:
 2828              	.LBE162:
 491:src/console.c ****       process_keycode_with_shift(remapped);
 2829              		.loc 2 491 7 is_stmt 1 view .LVU799
 491:src/console.c ****       process_keycode_with_shift(remapped);
 2830              		.loc 2 491 10 is_stmt 0 view .LVU800
 2831 02a2 BAF1320F 		cmp	r10, #50
 2832 02a6 7FF461AF 		bne	.L243
 2833              	.LVL250:
 2834              	.L218:
 493:src/console.c ****     }
 494:src/console.c ****   }
 495:src/console.c ****   save_ram_file(0);
 2835              		.loc 2 495 3 is_stmt 1 view .LVU801
 2836 02aa 0020     		movs	r0, #0
 496:src/console.c ****   //  free_storage();
 497:src/console.c ****   return;
 498:src/console.c **** }
 2837              		.loc 2 498 1 is_stmt 0 view .LVU802
 2838 02ac 04B0     		add	sp, sp, #16
 2839              		.cfi_remember_state
 2840              		.cfi_def_cfa_offset 32
 2841              		@ sp needed
 2842 02ae BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
ARM GAS  /tmp/ccQIVay8.s 			page 78


 2843              		.cfi_restore 14
 2844              		.cfi_restore 10
 2845              		.cfi_restore 9
 2846              		.cfi_restore 8
 2847              		.cfi_restore 7
 2848              		.cfi_restore 6
 2849              		.cfi_restore 5
 2850              		.cfi_restore 4
 2851              		.cfi_def_cfa_offset 0
 2852              	.LVL251:
 495:src/console.c ****   //  free_storage();
 2853              		.loc 2 495 3 view .LVU803
 2854 02b2 FFF7FEBF 		b	save_ram_file
 2855              	.LVL252:
 2856              	.L244:
 2857              		.cfi_restore_state
 2858              	.LBB163:
 2859              	.LBB136:
  68:src/console.c **** 
 2860              		.loc 2 68 16 is_stmt 1 view .LVU804
  68:src/console.c **** 
 2861              		.loc 2 68 23 is_stmt 0 view .LVU805
 2862 02b6 264B     		ldr	r3, .L262+128
 2863 02b8 B4E7     		b	.L242
 2864              	.LVL253:
 2865              	.L249:
  68:src/console.c **** 
 2866              		.loc 2 68 23 view .LVU806
 2867              	.LBE136:
 2868              	.LBE163:
 2869              	.LBB164:
 2870              	.LBB153:
   6:src/menu.c    ****   }
 2871              		.loc 1 6 5 is_stmt 1 view .LVU807
   6:src/menu.c    ****   }
 2872              		.loc 1 6 18 is_stmt 0 view .LVU808
 2873 02ba 264B     		ldr	r3, .L262+132
 2874              	.LVL254:
   6:src/menu.c    ****   }
 2875              		.loc 1 6 18 view .LVU809
 2876 02bc 1A68     		ldr	r2, [r3]
 2877 02be 3260     		str	r2, [r6]
 2878              	.LVL255:
   4:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 2879              		.loc 1 4 7 view .LVU810
 2880 02c0 2B46     		mov	r3, r5
   6:src/menu.c    ****   }
 2881              		.loc 1 6 18 view .LVU811
 2882 02c2 1546     		mov	r5, r2
 2883              	.LVL256:
   6:src/menu.c    ****   }
 2884              		.loc 1 6 18 view .LVU812
 2885 02c4 C1E7     		b	.L213
 2886              	.LVL257:
 2887              	.L250:
   9:src/menu.c    ****   }
 2888              		.loc 1 9 5 is_stmt 1 view .LVU813
ARM GAS  /tmp/ccQIVay8.s 			page 79


   9:src/menu.c    ****   }
 2889              		.loc 1 9 18 is_stmt 0 view .LVU814
 2890 02c6 1F4A     		ldr	r2, .L262+116
 2891 02c8 1568     		ldr	r5, [r2]
 2892              	.LVL258:
   9:src/menu.c    ****   }
 2893              		.loc 1 9 18 view .LVU815
 2894 02ca 3560     		str	r5, [r6]
 2895 02cc BDE7     		b	.L213
 2896              	.L263:
 2897 02ce 00BF     		.align	2
 2898              	.L262:
 2899 02d0 00000000 		.word	StateWhileOn
 2900 02d4 00000000 		.word	DispMsg
 2901 02d8 00200010 		.word	268443648
 2902 02dc 00000000 		.word	.LANCHOR1
 2903 02e0 7D030008 		.word	134218621
 2904 02e4 31020008 		.word	134218289
 2905 02e8 00000000 		.word	JustDisplayed
 2906 02ec 19040008 		.word	134218777
 2907 02f0 19020008 		.word	134218265
 2908 02f4 91030008 		.word	134218641
 2909 02f8 E5020008 		.word	134218469
 2910 02fc 59020008 		.word	134218329
 2911 0300 35020008 		.word	134218293
 2912 0304 89030008 		.word	134218633
 2913 0308 B9030008 		.word	134218681
 2914 030c B9040008 		.word	134218937
 2915 0310 00000000 		.word	.LANCHOR5
 2916 0314 00000000 		.word	.LANCHOR12
 2917 0318 59030008 		.word	134218585
 2918 031c 00000000 		.word	.LANCHOR16
 2919 0320 00000000 		.word	.LANCHOR7
 2920 0324 01040008 		.word	134218753
 2921 0328 81030008 		.word	134218625
 2922 032c 00000000 		.word	Pause
 2923 0330 F5030008 		.word	134218741
 2924 0334 55020008 		.word	134218325
 2925 0338 2D040008 		.word	134218797
 2926 033c 1D020008 		.word	134218269
 2927 0340 00000000 		.word	.LANCHOR17
 2928 0344 00000000 		.word	.LANCHOR3
 2929 0348 00000000 		.word	.LANCHOR14
 2930 034c 00000000 		.word	.LANCHOR15
 2931 0350 00000000 		.word	.LANCHOR8
 2932 0354 00000000 		.word	.LANCHOR2
 2933 0358 F9030008 		.word	134218745
 2934              	.LVL259:
 2935              	.L245:
   9:src/menu.c    ****   }
 2936              		.loc 1 9 18 view .LVU816
 2937              	.LBE153:
 2938              	.LBE164:
 2939              	.LBB165:
 2940              	.LBB137:
  77:src/console.c ****       case SHIFT_N:
 2941              		.loc 2 77 7 is_stmt 1 view .LVU817
ARM GAS  /tmp/ccQIVay8.s 			page 80


  77:src/console.c ****       case SHIFT_N:
 2942              		.loc 2 77 15 is_stmt 0 view .LVU818
 2943 035c FFF7FEFF 		bl	cur_shift
 2944              	.LVL260:
  77:src/console.c ****       case SHIFT_N:
 2945              		.loc 2 77 7 view .LVU819
 2946 0360 0328     		cmp	r0, #3
  77:src/console.c ****       case SHIFT_N:
 2947              		.loc 2 77 15 view .LVU820
 2948 0362 0546     		mov	r5, r0
  77:src/console.c ****       case SHIFT_N:
 2949              		.loc 2 77 7 view .LVU821
 2950 0364 00F2B280 		bhi	.L221
 2951 0368 0128     		cmp	r0, #1
 2952 036a 6CD8     		bhi	.L190
 2953 036c 0028     		cmp	r0, #0
 2954 036e 7ED0     		beq	.L251
  80:src/console.c ****       case SHIFT_F:
 2955              		.loc 2 80 2 is_stmt 1 view .LVU822
  82:src/console.c **** 	break;
 2956              		.loc 2 82 2 view .LVU823
  82:src/console.c **** 	break;
 2957              		.loc 2 82 23 is_stmt 0 view .LVU824
 2958 0370 7C4B     		ldr	r3, .L264
 2959 0372 93E80300 		ldm	r3, {r0, r1}
 2960 0376 0DF10809 		add	r9, sp, #8
 2961 037a 89E80300 		stm	r9, {r0, r1}
 2962              	.LVL261:
  82:src/console.c **** 	break;
 2963              		.loc 2 82 23 view .LVU825
 2964              	.LBE137:
 2965              	.LBE165:
 464:src/console.c **** 	set_menu ( remapped.shift );
 2966              		.loc 2 464 7 is_stmt 1 view .LVU826
 480:src/console.c **** 	SET_ST(STAT_MENU);
 2967              		.loc 2 480 7 view .LVU827
 487:src/console.c **** 	remapped = do_multi (remapped);
 2968              		.loc 2 487 7 view .LVU828
 491:src/console.c ****       process_keycode_with_shift(remapped);
 2969              		.loc 2 491 7 view .LVU829
 2970              	.LBB166:
 2971              	.LBB138:
  82:src/console.c **** 	break;
 2972              		.loc 2 82 23 is_stmt 0 view .LVU830
 2973 037e 0025     		movs	r5, #0
 2974 0380 4FF02A0A 		mov	r10, #42
 2975              	.LVL262:
  82:src/console.c **** 	break;
 2976              		.loc 2 82 23 view .LVU831
 2977 0384 F4E6     		b	.L189
 2978              	.LVL263:
 2979              	.L204:
 111:src/console.c ****   case KEY_F6:
 2980              		.loc 2 111 5 is_stmt 1 view .LVU832
 111:src/console.c ****   case KEY_F6:
 2981              		.loc 2 111 9 is_stmt 0 view .LVU833
 2982 0386 FFF7FEFF 		bl	cur_shift
ARM GAS  /tmp/ccQIVay8.s 			page 81


 2983              	.LVL264:
 111:src/console.c ****   case KEY_F6:
 2984              		.loc 2 111 8 view .LVU834
 2985 038a 0128     		cmp	r0, #1
 2986 038c 00F0B180 		beq	.L252
 2987              	.L193:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2988              		.loc 2 113 5 is_stmt 1 view .LVU835
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2989              		.loc 2 113 9 is_stmt 0 view .LVU836
 2990 0390 FFF7FEFF 		bl	cur_shift
 2991              	.LVL265:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2992              		.loc 2 113 8 view .LVU837
 2993 0394 0028     		cmp	r0, #0
 2994 0396 58D1     		bne	.L205
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2995              		.loc 2 113 33 is_stmt 1 view .LVU838
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2996              		.loc 2 113 67 is_stmt 0 view .LVU839
 2997 0398 3168     		ldr	r1, [r6]
 2998 039a 734A     		ldr	r2, .L264+4
 2999 039c D023     		movs	r3, #208
 3000 039e 03FB01F3 		mul	r3, r3, r1
 3001 03a2 D018     		adds	r0, r2, r3
 3002 03a4 D0E92C01 		ldrd	r0, r1, [r0, #176]
 3003 03a8 B033     		adds	r3, r3, #176
 3004              	.L240:
 3005 03aa 0DF10809 		add	r9, sp, #8
 3006 03ae 12F803A0 		ldrb	r10, [r2, r3]	@ zero_extendqisi2
 3007              	.LVL266:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3008              		.loc 2 113 67 view .LVU840
 3009 03b2 89E80300 		stm	r9, {r0, r1}
 3010 03b6 1344     		add	r3, r3, r2
 3011 03b8 5D68     		ldr	r5, [r3, #4]
 3012              	.LVL267:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3013              		.loc 2 113 67 view .LVU841
 3014 03ba AFE6     		b	.L185
 3015              	.LVL268:
 3016              	.L203:
 108:src/console.c ****   case KEY_F5:
 3017              		.loc 2 108 5 is_stmt 1 view .LVU842
 108:src/console.c ****   case KEY_F5:
 3018              		.loc 2 108 9 is_stmt 0 view .LVU843
 3019 03bc FFF7FEFF 		bl	cur_shift
 3020              	.LVL269:
 108:src/console.c ****   case KEY_F5:
 3021              		.loc 2 108 8 view .LVU844
 3022 03c0 0128     		cmp	r0, #1
 3023 03c2 00F0A080 		beq	.L253
 3024              	.L195:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3025              		.loc 2 110 5 is_stmt 1 view .LVU845
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3026              		.loc 2 110 9 is_stmt 0 view .LVU846
ARM GAS  /tmp/ccQIVay8.s 			page 82


 3027 03c6 FFF7FEFF 		bl	cur_shift
 3028              	.LVL270:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3029              		.loc 2 110 8 view .LVU847
 3030 03ca 0028     		cmp	r0, #0
 3031 03cc DBD1     		bne	.L204
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3032              		.loc 2 110 33 is_stmt 1 view .LVU848
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3033              		.loc 2 110 67 is_stmt 0 view .LVU849
 3034 03ce 3168     		ldr	r1, [r6]
 3035 03d0 654A     		ldr	r2, .L264+4
 3036 03d2 D023     		movs	r3, #208
 3037 03d4 03FB01F3 		mul	r3, r3, r1
 3038 03d8 D018     		adds	r0, r2, r3
 3039 03da D0E92401 		ldrd	r0, r1, [r0, #144]
 3040 03de 9033     		adds	r3, r3, #144
 3041 03e0 E3E7     		b	.L240
 3042              	.L202:
 105:src/console.c ****   case KEY_F4:
 3043              		.loc 2 105 5 is_stmt 1 view .LVU850
 105:src/console.c ****   case KEY_F4:
 3044              		.loc 2 105 9 is_stmt 0 view .LVU851
 3045 03e2 FFF7FEFF 		bl	cur_shift
 3046              	.LVL271:
 105:src/console.c ****   case KEY_F4:
 3047              		.loc 2 105 8 view .LVU852
 3048 03e6 0128     		cmp	r0, #1
 3049 03e8 00F09780 		beq	.L254
 3050              	.L196:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3051              		.loc 2 107 5 is_stmt 1 view .LVU853
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3052              		.loc 2 107 9 is_stmt 0 view .LVU854
 3053 03ec FFF7FEFF 		bl	cur_shift
 3054              	.LVL272:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3055              		.loc 2 107 8 view .LVU855
 3056 03f0 0028     		cmp	r0, #0
 3057 03f2 E3D1     		bne	.L203
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3058              		.loc 2 107 33 is_stmt 1 view .LVU856
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3059              		.loc 2 107 67 is_stmt 0 view .LVU857
 3060 03f4 3168     		ldr	r1, [r6]
 3061 03f6 5C4A     		ldr	r2, .L264+4
 3062 03f8 D023     		movs	r3, #208
 3063 03fa 03FB01F3 		mul	r3, r3, r1
 3064 03fe D018     		adds	r0, r2, r3
 3065 0400 D0E91C01 		ldrd	r0, r1, [r0, #112]
 3066 0404 7033     		adds	r3, r3, #112
 3067 0406 D0E7     		b	.L240
 3068              	.L199:
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3069              		.loc 2 98 5 is_stmt 1 view .LVU858
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3070              		.loc 2 98 9 is_stmt 0 view .LVU859
ARM GAS  /tmp/ccQIVay8.s 			page 83


 3071 0408 FFF7FEFF 		bl	cur_shift
 3072              	.LVL273:
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3073              		.loc 2 98 8 view .LVU860
 3074 040c 0028     		cmp	r0, #0
 3075 040e 42D0     		beq	.L255
  99:src/console.c ****   case KEY_F2:
 3076              		.loc 2 99 5 is_stmt 1 view .LVU861
  99:src/console.c ****   case KEY_F2:
 3077              		.loc 2 99 9 is_stmt 0 view .LVU862
 3078 0410 FFF7FEFF 		bl	cur_shift
 3079              	.LVL274:
  99:src/console.c ****   case KEY_F2:
 3080              		.loc 2 99 8 view .LVU863
 3081 0414 0128     		cmp	r0, #1
 3082 0416 00F09480 		beq	.L256
 3083              	.L198:
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3084              		.loc 2 101 5 is_stmt 1 view .LVU864
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3085              		.loc 2 101 9 is_stmt 0 view .LVU865
 3086 041a FFF7FEFF 		bl	cur_shift
 3087              	.LVL275:
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3088              		.loc 2 101 8 view .LVU866
 3089 041e 80B3     		cbz	r0, .L257
 102:src/console.c ****   case KEY_F3:
 3090              		.loc 2 102 5 is_stmt 1 view .LVU867
 102:src/console.c ****   case KEY_F3:
 3091              		.loc 2 102 9 is_stmt 0 view .LVU868
 3092 0420 FFF7FEFF 		bl	cur_shift
 3093              	.LVL276:
 102:src/console.c ****   case KEY_F3:
 3094              		.loc 2 102 8 view .LVU869
 3095 0424 0128     		cmp	r0, #1
 3096 0426 00F08280 		beq	.L258
 3097              	.L197:
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3098              		.loc 2 104 5 is_stmt 1 view .LVU870
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3099              		.loc 2 104 9 is_stmt 0 view .LVU871
 3100 042a FFF7FEFF 		bl	cur_shift
 3101              	.LVL277:
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3102              		.loc 2 104 8 view .LVU872
 3103 042e 0028     		cmp	r0, #0
 3104 0430 D7D1     		bne	.L202
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3105              		.loc 2 104 33 is_stmt 1 view .LVU873
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3106              		.loc 2 104 67 is_stmt 0 view .LVU874
 3107 0432 3168     		ldr	r1, [r6]
 3108 0434 4C4A     		ldr	r2, .L264+4
 3109 0436 D023     		movs	r3, #208
 3110 0438 03FB01F3 		mul	r3, r3, r1
 3111 043c D018     		adds	r0, r2, r3
 3112 043e D0E91401 		ldrd	r0, r1, [r0, #80]
ARM GAS  /tmp/ccQIVay8.s 			page 84


 3113 0442 5033     		adds	r3, r3, #80
 3114 0444 B1E7     		b	.L240
 3115              	.L190:
  83:src/console.c ****       case SHIFT_G:
 3116              		.loc 2 83 2 is_stmt 1 view .LVU875
  85:src/console.c **** 	break;
 3117              		.loc 2 85 2 view .LVU876
  85:src/console.c **** 	break;
 3118              		.loc 2 85 9 is_stmt 0 view .LVU877
 3119 0446 494B     		ldr	r3, .L264+8
 3120 0448 ECE6     		b	.L242
 3121              	.L205:
 114:src/console.c ****   }
 3122              		.loc 2 114 5 is_stmt 1 view .LVU878
 114:src/console.c ****   }
 3123              		.loc 2 114 9 is_stmt 0 view .LVU879
 3124 044a FFF7FEFF 		bl	cur_shift
 3125              	.LVL278:
 114:src/console.c ****   }
 3126              		.loc 2 114 8 view .LVU880
 3127 044e 0128     		cmp	r0, #1
 3128 0450 45D0     		beq	.L259
 3129              	.L192:
 117:src/console.c ****   case SHIFT_N:    
 3130              		.loc 2 117 3 is_stmt 1 view .LVU881
 117:src/console.c ****   case SHIFT_N:    
 3131              		.loc 2 117 11 is_stmt 0 view .LVU882
 3132 0452 FFF7FEFF 		bl	cur_shift
 3133              	.LVL279:
 117:src/console.c ****   case SHIFT_N:    
 3134              		.loc 2 117 3 view .LVU883
 3135 0456 0128     		cmp	r0, #1
 3136 0458 27D0     		beq	.L206
 3137 045a 0228     		cmp	r0, #2
 3138 045c 29D0     		beq	.L207
 3139 045e 30B3     		cbz	r0, .L208
  62:src/console.c **** 
 3140              		.loc 2 62 41 view .LVU884
 3141 0460 5FFA8AFA 		uxtb	r10, r10
 3142              	.LVL280:
  62:src/console.c **** 
 3143              		.loc 2 62 41 view .LVU885
 3144              	.LBE138:
 3145              	.LBE166:
 464:src/console.c **** 	set_menu ( remapped.shift );
 3146              		.loc 2 464 7 is_stmt 1 view .LVU886
 464:src/console.c **** 	set_menu ( remapped.shift );
 3147              		.loc 2 464 10 is_stmt 0 view .LVU887
 3148 0464 BAF12F0F 		cmp	r10, #47
 3149 0468 32D0     		beq	.L260
 3150              	.LBB167:
 3151              	.LBB139:
 128:src/console.c ****   }
 3152              		.loc 2 128 12 view .LVU888
 3153 046a 0025     		movs	r5, #0
 3154 046c 5AE6     		b	.L209
 3155              	.LVL281:
ARM GAS  /tmp/ccQIVay8.s 			page 85


 3156              	.L251:
  79:src/console.c **** 	break;
 3157              		.loc 2 79 2 is_stmt 1 view .LVU889
  79:src/console.c **** 	break;
 3158              		.loc 2 79 21 is_stmt 0 view .LVU890
 3159 046e 404A     		ldr	r2, .L264+12
 3160 0470 92E80300 		ldm	r2, {r0, r1}
 3161 0474 0DF10809 		add	r9, sp, #8
 3162 0478 89E80300 		stm	r9, {r0, r1}
 3163              	.LVL282:
  79:src/console.c **** 	break;
 3164              		.loc 2 79 21 view .LVU891
 3165              	.LBE139:
 3166              	.LBE167:
 464:src/console.c **** 	set_menu ( remapped.shift );
 3167              		.loc 2 464 7 is_stmt 1 view .LVU892
 480:src/console.c **** 	SET_ST(STAT_MENU);
 3168              		.loc 2 480 7 view .LVU893
 487:src/console.c **** 	remapped = do_multi (remapped);
 3169              		.loc 2 487 7 view .LVU894
 491:src/console.c ****       process_keycode_with_shift(remapped);
 3170              		.loc 2 491 7 view .LVU895
 3171              	.LBB168:
 3172              	.LBB140:
  79:src/console.c **** 	break;
 3173              		.loc 2 79 21 is_stmt 0 view .LVU896
 3174 047c 4FF0290A 		mov	r10, #41
 3175              	.LVL283:
  79:src/console.c **** 	break;
 3176              		.loc 2 79 21 view .LVU897
 3177 0480 76E6     		b	.L189
 3178              	.LVL284:
 3179              	.L257:
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3180              		.loc 2 101 33 is_stmt 1 view .LVU898
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3181              		.loc 2 101 67 is_stmt 0 view .LVU899
 3182 0482 3168     		ldr	r1, [r6]
 3183 0484 384A     		ldr	r2, .L264+4
 3184 0486 D023     		movs	r3, #208
 3185 0488 03FB01F3 		mul	r3, r3, r1
 3186 048c D018     		adds	r0, r2, r3
 3187 048e D0E90C01 		ldrd	r0, r1, [r0, #48]
 3188 0492 3033     		adds	r3, r3, #48
 3189 0494 89E7     		b	.L240
 3190              	.L255:
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3191              		.loc 2 98 33 is_stmt 1 view .LVU900
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3192              		.loc 2 98 67 is_stmt 0 view .LVU901
 3193 0496 3168     		ldr	r1, [r6]
 3194 0498 334A     		ldr	r2, .L264+4
 3195 049a D023     		movs	r3, #208
 3196 049c 03FB01F3 		mul	r3, r3, r1
 3197 04a0 D018     		adds	r0, r2, r3
 3198 04a2 D0E90401 		ldrd	r0, r1, [r0, #16]
 3199 04a6 1033     		adds	r3, r3, #16
ARM GAS  /tmp/ccQIVay8.s 			page 86


 3200 04a8 7FE7     		b	.L240
 3201              	.L206:
 120:src/console.c ****   case SHIFT_F:
 3202              		.loc 2 120 5 is_stmt 1 view .LVU902
 122:src/console.c ****     break;
 3203              		.loc 2 122 5 view .LVU903
 122:src/console.c ****     break;
 3204              		.loc 2 122 26 is_stmt 0 view .LVU904
 3205 04aa 324B     		ldr	r3, .L264+16
 3206 04ac 2BE6     		b	.L241
 3207              	.L208:
 119:src/console.c ****     break;
 3208              		.loc 2 119 5 is_stmt 1 view .LVU905
 119:src/console.c ****     break;
 3209              		.loc 2 119 24 is_stmt 0 view .LVU906
 3210 04ae 324B     		ldr	r3, .L264+20
 3211 04b0 29E6     		b	.L241
 3212              	.L207:
 123:src/console.c ****   case SHIFT_G:
 3213              		.loc 2 123 5 is_stmt 1 view .LVU907
 125:src/console.c ****     break;
 3214              		.loc 2 125 5 view .LVU908
 125:src/console.c ****     break;
 3215              		.loc 2 125 26 is_stmt 0 view .LVU909
 3216 04b2 324B     		ldr	r3, .L264+24
 3217 04b4 03EBCA02 		add	r2, r3, r10, lsl #3
 3218 04b8 92E80300 		ldm	r2, {r0, r1}
 3219 04bc 0DF10809 		add	r9, sp, #8
 3220 04c0 89E80300 		stm	r9, {r0, r1}
 3221 04c4 13F83AA0 		ldrb	r10, [r3, r10, lsl #3]	@ zero_extendqisi2
 3222              	.LVL285:
 125:src/console.c ****     break;
 3223              		.loc 2 125 26 view .LVU910
 3224 04c8 0D46     		mov	r5, r1
 3225              	.LVL286:
 125:src/console.c ****     break;
 3226              		.loc 2 125 26 view .LVU911
 3227 04ca 27E6     		b	.L185
 3228              	.LVL287:
 3229              	.L221:
  77:src/console.c ****       case SHIFT_N:
 3230              		.loc 2 77 7 view .LVU912
 3231 04cc 0025     		movs	r5, #0
 3232 04ce 4DE6     		b	.L243
 3233              	.LVL288:
 3234              	.L260:
  77:src/console.c ****       case SHIFT_N:
 3235              		.loc 2 77 7 view .LVU913
 3236              	.LBE140:
 3237              	.LBE168:
 465:src/console.c **** 	display_current_menu ();
 3238              		.loc 2 465 2 is_stmt 1 view .LVU914
 3239              	.LBB169:
   3:src/menu.c    ****   int m = current_menu;
 3240              		.loc 1 3 6 view .LVU915
 3241              	.LBB154:
   4:src/menu.c    ****   if (new_menu == current_menu) { // return to default
ARM GAS  /tmp/ccQIVay8.s 			page 87


 3242              		.loc 1 4 3 view .LVU916
   4:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3243              		.loc 1 4 7 is_stmt 0 view .LVU917
 3244 04d0 3368     		ldr	r3, [r6]
 3245              	.LVL289:
   5:src/menu.c    ****     current_menu = default_menu;
 3246              		.loc 1 5 3 is_stmt 1 view .LVU918
   5:src/menu.c    ****     current_menu = default_menu;
 3247              		.loc 1 5 6 is_stmt 0 view .LVU919
 3248 04d2 002B     		cmp	r3, #0
 3249 04d4 3FD0     		beq	.L261
 3250              	.LBE154:
 3251              	.LBE169:
 3252              	.LBB170:
 3253              	.LBB141:
 128:src/console.c ****   }
 3254              		.loc 2 128 12 view .LVU920
 3255 04d6 0025     		movs	r5, #0
 3256 04d8 0DF10809 		add	r9, sp, #8
 3257 04dc B4E6     		b	.L210
 3258              	.LVL290:
 3259              	.L259:
 114:src/console.c ****   }
 3260              		.loc 2 114 33 is_stmt 1 view .LVU921
 114:src/console.c ****   }
 3261              		.loc 2 114 67 is_stmt 0 view .LVU922
 3262 04de 3168     		ldr	r1, [r6]
 3263 04e0 214A     		ldr	r2, .L264+4
 3264 04e2 D023     		movs	r3, #208
 3265 04e4 03FB01F3 		mul	r3, r3, r1
 3266 04e8 D018     		adds	r0, r2, r3
 3267 04ea D0E92E01 		ldrd	r0, r1, [r0, #184]
 3268 04ee B833     		adds	r3, r3, #184
 3269 04f0 5BE7     		b	.L240
 3270              	.L252:
 111:src/console.c ****   case KEY_F6:
 3271              		.loc 2 111 33 is_stmt 1 view .LVU923
 111:src/console.c ****   case KEY_F6:
 3272              		.loc 2 111 67 is_stmt 0 view .LVU924
 3273 04f2 3168     		ldr	r1, [r6]
 3274 04f4 1C4A     		ldr	r2, .L264+4
 3275 04f6 D023     		movs	r3, #208
 3276 04f8 03FB01F3 		mul	r3, r3, r1
 3277 04fc D018     		adds	r0, r2, r3
 3278 04fe D0E92601 		ldrd	r0, r1, [r0, #152]
 3279 0502 9833     		adds	r3, r3, #152
 3280 0504 51E7     		b	.L240
 3281              	.L253:
 108:src/console.c ****   case KEY_F5:
 3282              		.loc 2 108 33 is_stmt 1 view .LVU925
 108:src/console.c ****   case KEY_F5:
 3283              		.loc 2 108 67 is_stmt 0 view .LVU926
 3284 0506 3168     		ldr	r1, [r6]
 3285 0508 174A     		ldr	r2, .L264+4
 3286 050a D023     		movs	r3, #208
 3287 050c 03FB01F3 		mul	r3, r3, r1
 3288 0510 D018     		adds	r0, r2, r3
ARM GAS  /tmp/ccQIVay8.s 			page 88


 3289 0512 D0E91E01 		ldrd	r0, r1, [r0, #120]
 3290 0516 7833     		adds	r3, r3, #120
 3291 0518 47E7     		b	.L240
 3292              	.L254:
 105:src/console.c ****   case KEY_F4:
 3293              		.loc 2 105 33 is_stmt 1 view .LVU927
 105:src/console.c ****   case KEY_F4:
 3294              		.loc 2 105 67 is_stmt 0 view .LVU928
 3295 051a 3168     		ldr	r1, [r6]
 3296 051c 124A     		ldr	r2, .L264+4
 3297 051e D023     		movs	r3, #208
 3298 0520 03FB01F3 		mul	r3, r3, r1
 3299 0524 D018     		adds	r0, r2, r3
 3300 0526 D0E91601 		ldrd	r0, r1, [r0, #88]
 3301 052a 5833     		adds	r3, r3, #88
 3302 052c 3DE7     		b	.L240
 3303              	.L258:
 102:src/console.c ****   case KEY_F3:
 3304              		.loc 2 102 33 is_stmt 1 view .LVU929
 102:src/console.c ****   case KEY_F3:
 3305              		.loc 2 102 67 is_stmt 0 view .LVU930
 3306 052e 3168     		ldr	r1, [r6]
 3307 0530 0D4A     		ldr	r2, .L264+4
 3308 0532 D023     		movs	r3, #208
 3309 0534 03FB01F3 		mul	r3, r3, r1
 3310 0538 D018     		adds	r0, r2, r3
 3311 053a D0E90E01 		ldrd	r0, r1, [r0, #56]
 3312 053e 3833     		adds	r3, r3, #56
 3313 0540 33E7     		b	.L240
 3314              	.L256:
  99:src/console.c ****   case KEY_F2:
 3315              		.loc 2 99 33 is_stmt 1 view .LVU931
  99:src/console.c ****   case KEY_F2:
 3316              		.loc 2 99 67 is_stmt 0 view .LVU932
 3317 0542 3168     		ldr	r1, [r6]
 3318 0544 084A     		ldr	r2, .L264+4
 3319 0546 D023     		movs	r3, #208
 3320 0548 03FB01F3 		mul	r3, r3, r1
 3321 054c D018     		adds	r0, r2, r3
 3322 054e D0E90601 		ldrd	r0, r1, [r0, #24]
 3323 0552 1833     		adds	r3, r3, #24
 3324 0554 29E7     		b	.L240
 3325              	.LVL291:
 3326              	.L261:
  99:src/console.c ****   case KEY_F2:
 3327              		.loc 2 99 67 view .LVU933
 3328              	.LBE141:
 3329              	.LBE170:
 3330              	.LBB171:
 3331              	.LBB155:
   6:src/menu.c    ****   }
 3332              		.loc 1 6 5 is_stmt 1 view .LVU934
   6:src/menu.c    ****   }
 3333              		.loc 1 6 18 is_stmt 0 view .LVU935
 3334 0556 0A4A     		ldr	r2, .L264+28
 3335 0558 1568     		ldr	r5, [r2]
 3336 055a 3560     		str	r5, [r6]
ARM GAS  /tmp/ccQIVay8.s 			page 89


  14:src/menu.c    **** }
 3337              		.loc 1 14 3 is_stmt 1 view .LVU936
 3338 055c 0DF10809 		add	r9, sp, #8
 3339 0560 75E6     		b	.L211
 3340              	.L265:
 3341 0562 00BF     		.align	2
 3342              	.L264:
 3343 0564 E0000000 		.word	.LANCHOR10+224
 3344 0568 00000000 		.word	.LANCHOR4
 3345 056c 00000000 		.word	.LANCHOR11
 3346 0570 E0000000 		.word	.LANCHOR9+224
 3347 0574 00000000 		.word	.LANCHOR10
 3348 0578 00000000 		.word	.LANCHOR9
 3349 057c 00000000 		.word	.LANCHOR13
 3350 0580 00000000 		.word	.LANCHOR2
 3351              	.LBE155:
 3352              	.LBE171:
 3353              		.cfi_endproc
 3354              	.LFE25:
 3356              		.global	n_p
 3357              		.comm	print_string,22,4
 3358              		.global	spaces
 3359              		.global	release
 3360              		.global	h_shift
 3361              		.global	g_shift
 3362              		.global	f_shift
 3363              		.global	heartbeat
 3364              		.global	no_key
 3365              		.global	MID_MENU
 3366              		.section	.rodata.str1.4,"aMS",%progbits,1
 3367              		.align	2
 3368              	.LC4:
 3369 0000 53797374 		.ascii	"System!\000"
 3369      656D2100 
 3370              		.global	mid_menu
 3371              		.section	.bss.current_menu,"aw",%nobits
 3372              		.align	2
 3373              		.set	.LANCHOR1,. + 0
 3376              	current_menu:
 3377 0000 00000000 		.space	4
 3378              		.section	.bss.default_menu,"aw",%nobits
 3379              		.align	2
 3380              		.set	.LANCHOR2,. + 0
 3383              	default_menu:
 3384 0000 00000000 		.space	4
 3385              		.section	.bss.last_menu,"aw",%nobits
 3386              		.align	2
 3387              		.set	.LANCHOR3,. + 0
 3390              	last_menu:
 3391 0000 00000000 		.space	4
 3392              		.section	.bss.mdots,"aw",%nobits
 3393              		.align	2
 3394              		.set	.LANCHOR0,. + 0
 3397              	mdots:
 3398 0000 00000000 		.space	400
 3398      00000000 
 3398      00000000 
ARM GAS  /tmp/ccQIVay8.s 			page 90


 3398      00000000 
 3398      00000000 
 3399              		.section	.bss.n_p,"aw",%nobits
 3400              		.align	2
 3403              	n_p:
 3404 0000 00000000 		.space	4
 3405              		.section	.bss.start_ticks,"aw",%nobits
 3406              		.align	2
 3407              		.set	.LANCHOR5,. + 0
 3410              	start_ticks:
 3411 0000 00000000 		.space	4
 3412              		.section	.data.f_shift,"aw"
 3413              		.align	2
 3414              		.set	.LANCHOR14,. + 0
 3417              	f_shift:
 3418 0000 29       		.byte	41
 3419 0001 000000   		.space	3
 3420 0004 FFFFFFFF 		.word	-1
 3421              		.section	.data.g_shift,"aw"
 3422              		.align	2
 3423              		.set	.LANCHOR15,. + 0
 3426              	g_shift:
 3427 0000 2A       		.byte	42
 3428 0001 000000   		.space	3
 3429 0004 FFFFFFFF 		.word	-1
 3430              		.section	.data.h_shift,"aw"
 3431              		.align	2
 3432              		.set	.LANCHOR11,. + 0
 3435              	h_shift:
 3436 0000 2B       		.byte	43
 3437 0001 000000   		.space	3
 3438 0004 FFFFFFFF 		.word	-1
 3439              		.section	.data.heartbeat,"aw"
 3440              		.align	2
 3441              		.set	.LANCHOR17,. + 0
 3444              	heartbeat:
 3445 0000 62       		.byte	98
 3446 0001 000000   		.space	3
 3447 0004 FFFFFFFF 		.word	-1
 3448              		.section	.data.no_key,"aw"
 3449              		.align	2
 3450              		.set	.LANCHOR7,. + 0
 3453              	no_key:
 3454 0000 2E       		.byte	46
 3455 0001 000000   		.space	3
 3456 0004 00000000 		.word	0
 3457              		.section	.data.release,"aw"
 3458              		.align	2
 3459              		.set	.LANCHOR8,. + 0
 3462              	release:
 3463 0000 63       		.byte	99
 3464 0001 000000   		.space	3
 3465 0004 FFFFFFFF 		.word	-1
 3466              		.section	.data.spaces,"aw"
 3467              		.align	2
 3468              		.set	.LANCHOR6,. + 0
 3471              	spaces:
ARM GAS  /tmp/ccQIVay8.s 			page 91


 3472 0000 20202020 		.ascii	"                     \000"
 3472      20202020 
 3472      20202020 
 3472      20202020 
 3472      20202020 
 3473              		.section	.rodata.MID_MENU,"a"
 3474              		.align	2
 3475              		.set	.LANCHOR16,. + 0
 3478              	MID_MENU:
 3479 0000 00000000 		.word	.LC4
 3480 0004 00000000 		.word	mid_menu
 3481 0008 00000000 		.word	0
 3482 000c 00000000 		.word	0
 3483              		.section	.rodata.Menus,"a"
 3484              		.align	2
 3485              		.set	.LANCHOR4,. + 0
 3488              	Menus:
 3489 0000 426C616E 		.ascii	"Blank\000"
 3489      6B00
 3490 0006 00000000 		.space	9
 3490      00000000 
 3490      00
 3491 000f 00       		.space	1
 3492 0010 2E       		.byte	46
 3493 0011 000000   		.space	3
 3494 0014 FFFFFFFF 		.word	-1
 3495 0018 2E       		.byte	46
 3496 0019 000000   		.space	3
 3497 001c FFFFFFFF 		.word	-1
 3498 0020 00       		.ascii	"\000"
 3499 0021 00000000 		.space	7
 3499      000000
 3500 0028 00       		.ascii	"\000"
 3501 0029 00000000 		.space	7
 3501      000000
 3502 0030 2E       		.byte	46
 3503 0031 000000   		.space	3
 3504 0034 FFFFFFFF 		.word	-1
 3505 0038 2E       		.byte	46
 3506 0039 000000   		.space	3
 3507 003c FFFFFFFF 		.word	-1
 3508 0040 00       		.ascii	"\000"
 3509 0041 00000000 		.space	7
 3509      000000
 3510 0048 00       		.ascii	"\000"
 3511 0049 00000000 		.space	7
 3511      000000
 3512 0050 2E       		.byte	46
 3513 0051 000000   		.space	3
 3514 0054 FFFFFFFF 		.word	-1
 3515 0058 2E       		.byte	46
 3516 0059 000000   		.space	3
 3517 005c FFFFFFFF 		.word	-1
 3518 0060 00       		.ascii	"\000"
 3519 0061 00000000 		.space	7
 3519      000000
 3520 0068 00       		.ascii	"\000"
ARM GAS  /tmp/ccQIVay8.s 			page 92


 3521 0069 00000000 		.space	7
 3521      000000
 3522 0070 2E       		.byte	46
 3523 0071 000000   		.space	3
 3524 0074 FFFFFFFF 		.word	-1
 3525 0078 2E       		.byte	46
 3526 0079 000000   		.space	3
 3527 007c FFFFFFFF 		.word	-1
 3528 0080 00       		.ascii	"\000"
 3529 0081 00000000 		.space	7
 3529      000000
 3530 0088 00       		.ascii	"\000"
 3531 0089 00000000 		.space	7
 3531      000000
 3532 0090 2C       		.byte	44
 3533 0091 000000   		.space	3
 3534 0094 FFFFFFFF 		.word	-1
 3535 0098 2E       		.byte	46
 3536 0099 000000   		.space	3
 3537 009c FFFFFFFF 		.word	-1
 3538 00a0 2D2D0D00 		.ascii	"--\015\000"
 3539 00a4 00000000 		.space	4
 3540 00a8 00       		.ascii	"\000"
 3541 00a9 00000000 		.space	7
 3541      000000
 3542 00b0 2D       		.byte	45
 3543 00b1 000000   		.space	3
 3544 00b4 FFFFFFFF 		.word	-1
 3545 00b8 2E       		.byte	46
 3546 00b9 000000   		.space	3
 3547 00bc FFFFFFFF 		.word	-1
 3548 00c0 43505800 		.ascii	"CPX\000"
 3549 00c4 00000000 		.space	4
 3550 00c8 00       		.ascii	"\000"
 3551 00c9 00000000 		.space	7
 3551      000000
 3552 00d0 436C6561 		.ascii	"Clear\000"
 3552      7200
 3553 00d6 00000000 		.space	9
 3553      00000000 
 3553      00
 3554 00df 00       		.space	1
 3555 00e0 10       		.byte	16
 3556 00e1 000000   		.space	3
 3557 00e4 01000000 		.word	1
 3558 00e8 2E       		.byte	46
 3559 00e9 000000   		.space	3
 3560 00ec FFFFFFFF 		.word	-1
 3561 00f0 434C5072 		.ascii	"CLProg\000"
 3561      6F6700
 3562 00f7 00       		.space	1
 3563 00f8 00       		.ascii	"\000"
 3564 00f9 00000000 		.space	7
 3564      000000
 3565 0100 10       		.byte	16
 3566 0101 000000   		.space	3
 3567 0104 02000000 		.word	2
ARM GAS  /tmp/ccQIVay8.s 			page 93


 3568 0108 2E       		.byte	46
 3569 0109 000000   		.space	3
 3570 010c FFFFFFFF 		.word	-1
 3571 0110 434C9100 		.ascii	"CL\221\000"
 3572 0114 00000000 		.space	4
 3573 0118 00       		.ascii	"\000"
 3574 0119 00000000 		.space	7
 3574      000000
 3575 0120 10       		.byte	16
 3576 0121 000000   		.space	3
 3577 0124 03000000 		.word	3
 3578 0128 2E       		.byte	46
 3579 0129 000000   		.space	3
 3580 012c FFFFFFFF 		.word	-1
 3581 0130 434C2058 		.ascii	"CL X\000"
 3581      00
 3582 0135 000000   		.space	3
 3583 0138 00       		.ascii	"\000"
 3584 0139 00000000 		.space	7
 3584      000000
 3585 0140 2E       		.byte	46
 3586 0141 000000   		.space	3
 3587 0144 FFFFFFFF 		.word	-1
 3588 0148 2E       		.byte	46
 3589 0149 000000   		.space	3
 3590 014c FFFFFFFF 		.word	-1
 3591 0150 00       		.ascii	"\000"
 3592 0151 00000000 		.space	7
 3592      000000
 3593 0158 00       		.ascii	"\000"
 3594 0159 00000000 		.space	7
 3594      000000
 3595 0160 2C       		.byte	44
 3596 0161 000000   		.space	3
 3597 0164 FFFFFFFF 		.word	-1
 3598 0168 2E       		.byte	46
 3599 0169 000000   		.space	3
 3600 016c FFFFFFFF 		.word	-1
 3601 0170 2D2D0D00 		.ascii	"--\015\000"
 3602 0174 00000000 		.space	4
 3603 0178 00       		.ascii	"\000"
 3604 0179 00000000 		.space	7
 3604      000000
 3605 0180 2D       		.byte	45
 3606 0181 000000   		.space	3
 3607 0184 FFFFFFFF 		.word	-1
 3608 0188 2E       		.byte	46
 3609 0189 000000   		.space	3
 3610 018c FFFFFFFF 		.word	-1
 3611 0190 43505800 		.ascii	"CPX\000"
 3612 0194 00000000 		.space	4
 3613 0198 00       		.ascii	"\000"
 3614 0199 00000000 		.space	7
 3614      000000
 3615 01a0 44495350 		.ascii	"DISP\000"
 3615      00
 3616 01a5 00000000 		.space	10
ARM GAS  /tmp/ccQIVay8.s 			page 94


 3616      00000000 
 3616      0000
 3617 01af 00       		.space	1
 3618 01b0 00       		.byte	0
 3619 01b1 000000   		.space	3
 3620 01b4 03000000 		.word	3
 3621 01b8 05       		.byte	5
 3622 01b9 000000   		.space	3
 3623 01bc 01000000 		.word	1
 3624 01c0 414C4C00 		.ascii	"ALL\000"
 3625 01c4 00000000 		.space	4
 3626 01c8 6120622F 		.ascii	"a b/c\000"
 3626      6300
 3627 01ce 0000     		.space	2
 3628 01d0 01       		.byte	1
 3629 01d1 000000   		.space	3
 3630 01d4 03000000 		.word	3
 3631 01d8 05       		.byte	5
 3632 01d9 000000   		.space	3
 3633 01dc 02000000 		.word	2
 3634 01e0 46495800 		.ascii	"FIX\000"
 3635 01e4 00000000 		.space	4
 3636 01e8 642F6300 		.ascii	"d/c\000"
 3637 01ec 00000000 		.space	4
 3638 01f0 02       		.byte	2
 3639 01f1 000000   		.space	3
 3640 01f4 03000000 		.word	3
 3641 01f8 06       		.byte	6
 3642 01f9 000000   		.space	3
 3643 01fc 01000000 		.word	1
 3644 0200 53434900 		.ascii	"SCI\000"
 3645 0204 00000000 		.space	4
 3646 0208 482E4D53 		.ascii	"H.MS\000"
 3646      00
 3647 020d 000000   		.space	3
 3648 0210 03       		.byte	3
 3649 0211 000000   		.space	3
 3650 0214 03000000 		.word	3
 3651 0218 07       		.byte	7
 3652 0219 000000   		.space	3
 3653 021c 01000000 		.word	1
 3654 0220 454E4700 		.ascii	"ENG\000"
 3655 0224 00000000 		.space	4
 3656 0228 482E6400 		.ascii	"H.d\000"
 3657 022c 00000000 		.space	4
 3658 0230 2C       		.byte	44
 3659 0231 000000   		.space	3
 3660 0234 FFFFFFFF 		.word	-1
 3661 0238 26       		.byte	38
 3662 0239 000000   		.space	3
 3663 023c 03000000 		.word	3
 3664 0240 2D2D0D00 		.ascii	"--\015\000"
 3665 0244 00000000 		.space	4
 3666 0248 2E2F2C00 		.ascii	"./,\000"
 3667 024c 00000000 		.space	4
 3668 0250 2D       		.byte	45
 3669 0251 000000   		.space	3
ARM GAS  /tmp/ccQIVay8.s 			page 95


 3670 0254 FFFFFFFF 		.word	-1
 3671 0258 2E       		.byte	46
 3672 0259 000000   		.space	3
 3673 025c FFFFFFFF 		.word	-1
 3674 0260 43505800 		.ascii	"CPX\000"
 3675 0264 00000000 		.space	4
 3676 0268 00       		.ascii	"\000"
 3677 0269 00000000 		.space	7
 3677      000000
 3678 0270 42415345 		.ascii	"BASE\000"
 3678      00
 3679 0275 00000000 		.space	10
 3679      00000000 
 3679      0000
 3680 027f 00       		.space	1
 3681 0280 0E       		.byte	14
 3682 0281 000000   		.space	3
 3683 0284 01000000 		.word	1
 3684 0288 0E       		.byte	14
 3685 0289 000000   		.space	3
 3686 028c 03000000 		.word	3
 3687 0290 42494E00 		.ascii	"BIN\000"
 3688 0294 00000000 		.space	4
 3689 0298 6E6F7400 		.ascii	"not\000"
 3690 029c 00000000 		.space	4
 3691 02a0 0E       		.byte	14
 3692 02a1 000000   		.space	3
 3693 02a4 02000000 		.word	2
 3694 02a8 13       		.byte	19
 3695 02a9 000000   		.space	3
 3696 02ac 03000000 		.word	3
 3697 02b0 4F435400 		.ascii	"OCT\000"
 3698 02b4 00000000 		.space	4
 3699 02b8 616E6400 		.ascii	"and\000"
 3700 02bc 00000000 		.space	4
 3701 02c0 0F       		.byte	15
 3702 02c1 000000   		.space	3
 3703 02c4 01000000 		.word	1
 3704 02c8 14       		.byte	20
 3705 02c9 000000   		.space	3
 3706 02cc 03000000 		.word	3
 3707 02d0 44454300 		.ascii	"DEC\000"
 3708 02d4 00000000 		.space	4
 3709 02d8 6F7200   		.ascii	"or\000"
 3710 02db 00000000 		.space	5
 3710      00
 3711 02e0 0F       		.byte	15
 3712 02e1 000000   		.space	3
 3713 02e4 02000000 		.word	2
 3714 02e8 15       		.byte	21
 3715 02e9 000000   		.space	3
 3716 02ec 03000000 		.word	3
 3717 02f0 48455800 		.ascii	"HEX\000"
 3718 02f4 00000000 		.space	4
 3719 02f8 786F7200 		.ascii	"xor\000"
 3720 02fc 00000000 		.space	4
 3721 0300 2C       		.byte	44
ARM GAS  /tmp/ccQIVay8.s 			page 96


 3722 0301 000000   		.space	3
 3723 0304 FFFFFFFF 		.word	-1
 3724 0308 16       		.byte	22
 3725 0309 000000   		.space	3
 3726 030c 03000000 		.word	3
 3727 0310 2D2D0D00 		.ascii	"--\015\000"
 3728 0314 00000000 		.space	4
 3729 0318 524D4452 		.ascii	"RMDR\000"
 3729      00
 3730 031d 000000   		.space	3
 3731 0320 2D       		.byte	45
 3732 0321 000000   		.space	3
 3733 0324 FFFFFFFF 		.word	-1
 3734 0328 07       		.byte	7
 3735 0329 000000   		.space	3
 3736 032c 01000000 		.word	1
 3737 0330 43505800 		.ascii	"CPX\000"
 3738 0334 00000000 		.space	4
 3739 0338 482E6400 		.ascii	"H.d\000"
 3740 033c 00000000 		.space	4
 3741 0340 414E474C 		.ascii	"ANGLES\000"
 3741      455300
 3742 0347 00000000 		.space	8
 3742      00000000 
 3743 034f 00       		.space	1
 3744 0350 06       		.byte	6
 3745 0351 000000   		.space	3
 3746 0354 02000000 		.word	2
 3747 0358 04       		.byte	4
 3748 0359 000000   		.space	3
 3749 035c 01000000 		.word	1
 3750 0360 44454700 		.ascii	"DEG\000"
 3751 0364 00000000 		.space	4
 3752 0368 500D5200 		.ascii	"P\015R\000"
 3753 036c 00000000 		.space	4
 3754 0370 07       		.byte	7
 3755 0371 000000   		.space	3
 3756 0374 02000000 		.word	2
 3757 0378 04       		.byte	4
 3758 0379 000000   		.space	3
 3759 037c 02000000 		.word	2
 3760 0380 52414400 		.ascii	"RAD\000"
 3761 0384 00000000 		.space	4
 3762 0388 520D5000 		.ascii	"R\015P\000"
 3763 038c 00000000 		.space	4
 3764 0390 08       		.byte	8
 3765 0391 000000   		.space	3
 3766 0394 02000000 		.word	2
 3767 0398 00       		.byte	0
 3768 0399 000000   		.space	3
 3769 039c 01000000 		.word	1
 3770 03a0 47524144 		.ascii	"GRAD\000"
 3770      00
 3771 03a5 000000   		.space	3
 3772 03a8 48595000 		.ascii	"HYP\000"
 3773 03ac 00000000 		.space	4
 3774 03b0 06       		.byte	6
ARM GAS  /tmp/ccQIVay8.s 			page 97


 3775 03b1 000000   		.space	3
 3776 03b4 01000000 		.word	1
 3777 03b8 07       		.byte	7
 3778 03b9 000000   		.space	3
 3779 03bc 01000000 		.word	1
 3780 03c0 482E4D53 		.ascii	"H.MS\000"
 3780      00
 3781 03c5 000000   		.space	3
 3782 03c8 482E6400 		.ascii	"H.d\000"
 3783 03cc 00000000 		.space	4
 3784 03d0 2C       		.byte	44
 3785 03d1 000000   		.space	3
 3786 03d4 FFFFFFFF 		.word	-1
 3787 03d8 00       		.byte	0
 3788 03d9 000000   		.space	3
 3789 03dc 02000000 		.word	2
 3790 03e0 2D2D0D00 		.ascii	"--\015\000"
 3791 03e4 00000000 		.space	4
 3792 03e8 4859509D 		.ascii	"HYP\235\000"
 3792      00
 3793 03ed 000000   		.space	3
 3794 03f0 2D       		.byte	45
 3795 03f1 000000   		.space	3
 3796 03f4 FFFFFFFF 		.word	-1
 3797 03f8 2E       		.byte	46
 3798 03f9 000000   		.space	3
 3799 03fc FFFFFFFF 		.word	-1
 3800 0400 43505800 		.ascii	"CPX\000"
 3801 0404 00000000 		.space	4
 3802 0408 00       		.ascii	"\000"
 3803 0409 00000000 		.space	7
 3803      000000
 3804 0410 4D495343 		.ascii	"MISC\000"
 3804      00
 3805 0415 00000000 		.space	10
 3805      00000000 
 3805      0000
 3806 041f 00       		.space	1
 3807 0420 25       		.byte	37
 3808 0421 000000   		.space	3
 3809 0424 01000000 		.word	1
 3810 0428 14       		.byte	20
 3811 0429 000000   		.space	3
 3812 042c 01000000 		.word	1
 3813 0430 7C587C00 		.ascii	"|X|\000"
 3814 0434 00000000 		.space	4
 3815 0438 329C00   		.ascii	"2\234\000"
 3816 043b 00000000 		.space	5
 3816      00
 3817 0440 25       		.byte	37
 3818 0441 000000   		.space	3
 3819 0444 02000000 		.word	2
 3820 0448 14       		.byte	20
 3821 0449 000000   		.space	3
 3822 044c 02000000 		.word	2
 3823 0450 524E4400 		.ascii	"RND\000"
 3824 0454 00000000 		.space	4
ARM GAS  /tmp/ccQIVay8.s 			page 98


 3825 0458 4C6F67BA 		.ascii	"Log\272\000"
 3825      00
 3826 045d 000000   		.space	3
 3827 0460 26       		.byte	38
 3828 0461 000000   		.space	3
 3829 0464 01000000 		.word	1
 3830 0468 15       		.byte	21
 3831 0469 000000   		.space	3
 3832 046c 02000000 		.word	2
 3833 0470 49506172 		.ascii	"IPart\000"
 3833      7400
 3834 0476 0000     		.space	2
 3835 0478 4C6F678B 		.ascii	"Log\213\000"
 3835      00
 3836 047d 000000   		.space	3
 3837 0480 26       		.byte	38
 3838 0481 000000   		.space	3
 3839 0484 02000000 		.word	2
 3840 0488 16       		.byte	22
 3841 0489 000000   		.space	3
 3842 048c 02000000 		.word	2
 3843 0490 46506172 		.ascii	"FPart\000"
 3843      7400
 3844 0496 0000     		.space	2
 3845 0498 7C7C656C 		.ascii	"||el\000"
 3845      00
 3846 049d 000000   		.space	3
 3847 04a0 2C       		.byte	44
 3848 04a1 000000   		.space	3
 3849 04a4 FFFFFFFF 		.word	-1
 3850 04a8 22       		.byte	34
 3851 04a9 000000   		.space	3
 3852 04ac 02000000 		.word	2
 3853 04b0 2D2D0D00 		.ascii	"--\015\000"
 3854 04b4 00000000 		.space	4
 3855 04b8 832500   		.ascii	"\203%\000"
 3856 04bb 00000000 		.space	5
 3856      00
 3857 04c0 2D       		.byte	45
 3858 04c1 000000   		.space	3
 3859 04c4 FFFFFFFF 		.word	-1
 3860 04c8 2E       		.byte	46
 3861 04c9 000000   		.space	3
 3862 04cc FFFFFFFF 		.word	-1
 3863 04d0 43505800 		.ascii	"CPX\000"
 3864 04d4 00000000 		.space	4
 3865 04d8 00       		.ascii	"\000"
 3866 04d9 00000000 		.space	7
 3866      000000
 3867 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 3867      204B6579 
 3867      00
 3868 04e9 00000000 		.space	6
 3868      0000
 3869 04ef 00       		.space	1
 3870 04f0 0D       		.byte	13
 3871 04f1 000000   		.space	3
ARM GAS  /tmp/ccQIVay8.s 			page 99


 3872 04f4 01000000 		.word	1
 3873 04f8 2E       		.byte	46
 3874 04f9 000000   		.space	3
 3875 04fc FFFFFFFF 		.word	-1
 3876 0500 53686F77 		.ascii	"Show\016\000"
 3876      0E00
 3877 0506 0000     		.space	2
 3878 0508 00       		.ascii	"\000"
 3879 0509 00000000 		.space	7
 3879      000000
 3880 0510 0D       		.byte	13
 3881 0511 000000   		.space	3
 3882 0514 02000000 		.word	2
 3883 0518 2E       		.byte	46
 3884 0519 000000   		.space	3
 3885 051c FFFFFFFF 		.word	-1
 3886 0520 53686F77 		.ascii	"Show\015\000"
 3886      0D00
 3887 0526 0000     		.space	2
 3888 0528 00       		.ascii	"\000"
 3889 0529 00000000 		.space	7
 3889      000000
 3890 0530 0D       		.byte	13
 3891 0531 000000   		.space	3
 3892 0534 03000000 		.word	3
 3893 0538 2E       		.byte	46
 3894 0539 000000   		.space	3
 3895 053c FFFFFFFF 		.word	-1
 3896 0540 78173F00 		.ascii	"x\027?\000"
 3897 0544 00000000 		.space	4
 3898 0548 00       		.ascii	"\000"
 3899 0549 00000000 		.space	7
 3899      000000
 3900 0550 2E       		.byte	46
 3901 0551 000000   		.space	3
 3902 0554 FFFFFFFF 		.word	-1
 3903 0558 2E       		.byte	46
 3904 0559 000000   		.space	3
 3905 055c FFFFFFFF 		.word	-1
 3906 0560 00       		.ascii	"\000"
 3907 0561 00000000 		.space	7
 3907      000000
 3908 0568 00       		.ascii	"\000"
 3909 0569 00000000 		.space	7
 3909      000000
 3910 0570 2C       		.byte	44
 3911 0571 000000   		.space	3
 3912 0574 FFFFFFFF 		.word	-1
 3913 0578 2E       		.byte	46
 3914 0579 000000   		.space	3
 3915 057c FFFFFFFF 		.word	-1
 3916 0580 2D2D0D00 		.ascii	"--\015\000"
 3917 0584 00000000 		.space	4
 3918 0588 00       		.ascii	"\000"
 3919 0589 00000000 		.space	7
 3919      000000
 3920 0590 2D       		.byte	45
ARM GAS  /tmp/ccQIVay8.s 			page 100


 3921 0591 000000   		.space	3
 3922 0594 FFFFFFFF 		.word	-1
 3923 0598 2E       		.byte	46
 3924 0599 000000   		.space	3
 3925 059c FFFFFFFF 		.word	-1
 3926 05a0 43505800 		.ascii	"CPX\000"
 3927 05a4 00000000 		.space	4
 3928 05a8 00       		.ascii	"\000"
 3929 05a9 00000000 		.space	7
 3929      000000
 3930 05b0 50726F67 		.ascii	"Program\000"
 3930      72616D00 
 3931 05b8 00000000 		.space	7
 3931      000000
 3932 05bf 00       		.space	1
 3933 05c0 27       		.byte	39
 3934 05c1 000000   		.space	3
 3935 05c4 01000000 		.word	1
 3936 05c8 28       		.byte	40
 3937 05c9 000000   		.space	3
 3938 05cc 01000000 		.word	1
 3939 05d0 4C424C00 		.ascii	"LBL\000"
 3940 05d4 00000000 		.space	4
 3941 05d8 44534500 		.ascii	"DSE\000"
 3942 05dc 00000000 		.space	4
 3943 05e0 27       		.byte	39
 3944 05e1 000000   		.space	3
 3945 05e4 02000000 		.word	2
 3946 05e8 28       		.byte	40
 3947 05e9 000000   		.space	3
 3948 05ec 02000000 		.word	2
 3949 05f0 52544E00 		.ascii	"RTN\000"
 3950 05f4 00000000 		.space	4
 3951 05f8 49534700 		.ascii	"ISG\000"
 3952 05fc 00000000 		.space	4
 3953 0600 25       		.byte	37
 3954 0601 000000   		.space	3
 3955 0604 03000000 		.word	3
 3956 0608 2E       		.byte	46
 3957 0609 000000   		.space	3
 3958 060c FFFFFFFF 		.word	-1
 3959 0610 50617573 		.ascii	"Pause\000"
 3959      6500
 3960 0616 0000     		.space	2
 3961 0618 00       		.ascii	"\000"
 3962 0619 00000000 		.space	7
 3962      000000
 3963 0620 12       		.byte	18
 3964 0621 000000   		.space	3
 3965 0624 03000000 		.word	3
 3966 0628 2E       		.byte	46
 3967 0629 000000   		.space	3
 3968 062c FFFFFFFF 		.word	-1
 3969 0630 47544F00 		.ascii	"GTO\000"
 3970 0634 00000000 		.space	4
 3971 0638 00       		.ascii	"\000"
 3972 0639 00000000 		.space	7
ARM GAS  /tmp/ccQIVay8.s 			page 101


 3972      000000
 3973 0640 2C       		.byte	44
 3974 0641 000000   		.space	3
 3975 0644 FFFFFFFF 		.word	-1
 3976 0648 2E       		.byte	46
 3977 0649 000000   		.space	3
 3978 064c FFFFFFFF 		.word	-1
 3979 0650 2D2D0D00 		.ascii	"--\015\000"
 3980 0654 00000000 		.space	4
 3981 0658 00       		.ascii	"\000"
 3982 0659 00000000 		.space	7
 3982      000000
 3983 0660 2D       		.byte	45
 3984 0661 000000   		.space	3
 3985 0664 FFFFFFFF 		.word	-1
 3986 0668 2E       		.byte	46
 3987 0669 000000   		.space	3
 3988 066c FFFFFFFF 		.word	-1
 3989 0670 43505800 		.ascii	"CPX\000"
 3990 0674 00000000 		.space	4
 3991 0678 00       		.ascii	"\000"
 3992 0679 00000000 		.space	7
 3992      000000
 3993 0680 53657475 		.ascii	"Setup 1\000"
 3993      70203100 
 3994 0688 00000000 		.space	7
 3994      000000
 3995 068f 00       		.space	1
 3996 0690 32       		.byte	50
 3997 0691 000000   		.space	3
 3998 0694 00000000 		.word	0
 3999 0698 30       		.byte	48
 4000 0699 000000   		.space	3
 4001 069c 00000000 		.word	0
 4002 06a0 45584954 		.ascii	"EXIT\000"
 4002      00
 4003 06a5 000000   		.space	3
 4004 06a8 53797374 		.ascii	"System\000"
 4004      656D00
 4005 06af 00       		.space	1
 4006 06b0 31       		.byte	49
 4007 06b1 000000   		.space	3
 4008 06b4 09000000 		.word	9
 4009 06b8 2E       		.byte	46
 4010 06b9 000000   		.space	3
 4011 06bc FFFFFFFF 		.word	-1
 4012 06c0 48454C50 		.ascii	"HELP\000"
 4012      00
 4013 06c5 000000   		.space	3
 4014 06c8 00       		.ascii	"\000"
 4015 06c9 00000000 		.space	7
 4015      000000
 4016 06d0 31       		.byte	49
 4017 06d1 000000   		.space	3
 4018 06d4 02000000 		.word	2
 4019 06d8 31       		.byte	49
 4020 06d9 000000   		.space	3
ARM GAS  /tmp/ccQIVay8.s 			page 102


 4021 06dc 06000000 		.word	6
 4022 06e0 4F6E5354 		.ascii	"OnSTO\000"
 4022      4F00
 4023 06e6 0000     		.space	2
 4024 06e8 53765241 		.ascii	"SvRAM\000"
 4024      4D00
 4025 06ee 0000     		.space	2
 4026 06f0 31       		.byte	49
 4027 06f1 000000   		.space	3
 4028 06f4 03000000 		.word	3
 4029 06f8 31       		.byte	49
 4030 06f9 000000   		.space	3
 4031 06fc 07000000 		.word	7
 4032 0700 4F6E5243 		.ascii	"OnRCL\000"
 4032      4C00
 4033 0706 0000     		.space	2
 4034 0708 4C645241 		.ascii	"LdRAM\000"
 4034      4D00
 4035 070e 0000     		.space	2
 4036 0710 2C       		.byte	44
 4037 0711 000000   		.space	3
 4038 0714 FFFFFFFF 		.word	-1
 4039 0718 2E       		.byte	46
 4040 0719 000000   		.space	3
 4041 071c FFFFFFFF 		.word	-1
 4042 0720 2D2D0D00 		.ascii	"--\015\000"
 4043 0724 00000000 		.space	4
 4044 0728 00       		.ascii	"\000"
 4045 0729 00000000 		.space	7
 4045      000000
 4046 0730 2D       		.byte	45
 4047 0731 000000   		.space	3
 4048 0734 FFFFFFFF 		.word	-1
 4049 0738 2E       		.byte	46
 4050 0739 000000   		.space	3
 4051 073c FFFFFFFF 		.word	-1
 4052 0740 43505800 		.ascii	"CPX\000"
 4053 0744 00000000 		.space	4
 4054 0748 00       		.ascii	"\000"
 4055 0749 00000000 		.space	7
 4055      000000
 4056 0750 4172726F 		.ascii	"Arrow\000"
 4056      7700
 4057 0756 00000000 		.space	9
 4057      00000000 
 4057      00
 4058 075f 00       		.space	1
 4059 0760 0E       		.byte	14
 4060 0761 000000   		.space	3
 4061 0764 01000000 		.word	1
 4062 0768 06       		.byte	6
 4063 0769 000000   		.space	3
 4064 076c 02000000 		.word	2
 4065 0770 42696E00 		.ascii	"Bin\000"
 4066 0774 00000000 		.space	4
 4067 0778 44454700 		.ascii	"DEG\000"
 4068 077c 00000000 		.space	4
ARM GAS  /tmp/ccQIVay8.s 			page 103


 4069 0780 0E       		.byte	14
 4070 0781 000000   		.space	3
 4071 0784 02000000 		.word	2
 4072 0788 07       		.byte	7
 4073 0789 000000   		.space	3
 4074 078c 02000000 		.word	2
 4075 0790 4F637400 		.ascii	"Oct\000"
 4076 0794 00000000 		.space	4
 4077 0798 52414400 		.ascii	"RAD\000"
 4078 079c 00000000 		.space	4
 4079 07a0 0F       		.byte	15
 4080 07a1 000000   		.space	3
 4081 07a4 01000000 		.word	1
 4082 07a8 08       		.byte	8
 4083 07a9 000000   		.space	3
 4084 07ac 02000000 		.word	2
 4085 07b0 44656300 		.ascii	"Dec\000"
 4086 07b4 00000000 		.space	4
 4087 07b8 47726164 		.ascii	"Grad\000"
 4087      00
 4088 07bd 000000   		.space	3
 4089 07c0 0F       		.byte	15
 4090 07c1 000000   		.space	3
 4091 07c4 02000000 		.word	2
 4092 07c8 06       		.byte	6
 4093 07c9 000000   		.space	3
 4094 07cc 01000000 		.word	1
 4095 07d0 48657800 		.ascii	"Hex\000"
 4096 07d4 00000000 		.space	4
 4097 07d8 32484D53 		.ascii	"2HMS\000"
 4097      00
 4098 07dd 000000   		.space	3
 4099 07e0 2C       		.byte	44
 4100 07e1 000000   		.space	3
 4101 07e4 FFFFFFFF 		.word	-1
 4102 07e8 07       		.byte	7
 4103 07e9 000000   		.space	3
 4104 07ec 01000000 		.word	1
 4105 07f0 2D2D0D00 		.ascii	"--\015\000"
 4106 07f4 00000000 		.space	4
 4107 07f8 484D5332 		.ascii	"HMS2\000"
 4107      00
 4108 07fd 000000   		.space	3
 4109 0800 2D       		.byte	45
 4110 0801 000000   		.space	3
 4111 0804 FFFFFFFF 		.word	-1
 4112 0808 2E       		.byte	46
 4113 0809 000000   		.space	3
 4114 080c FFFFFFFF 		.word	-1
 4115 0810 43505800 		.ascii	"CPX\000"
 4116 0814 00000000 		.space	4
 4117 0818 00       		.ascii	"\000"
 4118 0819 00000000 		.space	7
 4118      000000
 4119 0820 466C6167 		.ascii	"Flags\000"
 4119      7300
 4120 0826 00000000 		.space	9
ARM GAS  /tmp/ccQIVay8.s 			page 104


 4120      00000000 
 4120      00
 4121 082f 00       		.space	1
 4122 0830 1E       		.byte	30
 4123 0831 000000   		.space	3
 4124 0834 01000000 		.word	1
 4125 0838 2E       		.byte	46
 4126 0839 000000   		.space	3
 4127 083c FFFFFFFF 		.word	-1
 4128 0840 53465F00 		.ascii	"SF_\000"
 4129 0844 00000000 		.space	4
 4130 0848 00       		.ascii	"\000"
 4131 0849 00000000 		.space	7
 4131      000000
 4132 0850 1E       		.byte	30
 4133 0851 000000   		.space	3
 4134 0854 02000000 		.word	2
 4135 0858 2E       		.byte	46
 4136 0859 000000   		.space	3
 4137 085c FFFFFFFF 		.word	-1
 4138 0860 43465F00 		.ascii	"CF_\000"
 4139 0864 00000000 		.space	4
 4140 0868 00       		.ascii	"\000"
 4141 0869 00000000 		.space	7
 4141      000000
 4142 0870 1F       		.byte	31
 4143 0871 000000   		.space	3
 4144 0874 01000000 		.word	1
 4145 0878 2E       		.byte	46
 4146 0879 000000   		.space	3
 4147 087c FFFFFFFF 		.word	-1
 4148 0880 783D3F00 		.ascii	"x=?\000"
 4149 0884 00000000 		.space	4
 4150 0888 00       		.ascii	"\000"
 4151 0889 00000000 		.space	7
 4151      000000
 4152 0890 1F       		.byte	31
 4153 0891 000000   		.space	3
 4154 0894 02000000 		.word	2
 4155 0898 2E       		.byte	46
 4156 0899 000000   		.space	3
 4157 089c FFFFFFFF 		.word	-1
 4158 08a0 780B3F00 		.ascii	"x\013?\000"
 4159 08a4 00000000 		.space	4
 4160 08a8 00       		.ascii	"\000"
 4161 08a9 00000000 		.space	7
 4161      000000
 4162 08b0 2C       		.byte	44
 4163 08b1 000000   		.space	3
 4164 08b4 FFFFFFFF 		.word	-1
 4165 08b8 2E       		.byte	46
 4166 08b9 000000   		.space	3
 4167 08bc FFFFFFFF 		.word	-1
 4168 08c0 2D2D0D00 		.ascii	"--\015\000"
 4169 08c4 00000000 		.space	4
 4170 08c8 00       		.ascii	"\000"
 4171 08c9 00000000 		.space	7
ARM GAS  /tmp/ccQIVay8.s 			page 105


 4171      000000
 4172 08d0 2D       		.byte	45
 4173 08d1 000000   		.space	3
 4174 08d4 FFFFFFFF 		.word	-1
 4175 08d8 2E       		.byte	46
 4176 08d9 000000   		.space	3
 4177 08dc FFFFFFFF 		.word	-1
 4178 08e0 43505800 		.ascii	"CPX\000"
 4179 08e4 00000000 		.space	4
 4180 08e8 00       		.ascii	"\000"
 4181 08e9 00000000 		.space	7
 4181      000000
 4182 08f0 50726F62 		.ascii	"Probability\000"
 4182      6162696C 
 4182      69747900 
 4183 08fc 000000   		.space	3
 4184 08ff 00       		.space	1
 4185 0900 18       		.byte	24
 4186 0901 000000   		.space	3
 4187 0904 03000000 		.word	3
 4188 0908 19       		.byte	25
 4189 0909 000000   		.space	3
 4190 090c 01000000 		.word	1
 4191 0910 46616374 		.ascii	"Fact!\000"
 4191      2100
 4192 0916 0000     		.space	2
 4193 0918 9400     		.ascii	"\224\000"
 4194 091a 00000000 		.space	6
 4194      0000
 4195 0920 18       		.byte	24
 4196 0921 000000   		.space	3
 4197 0924 01000000 		.word	1
 4198 0928 19       		.byte	25
 4199 0929 000000   		.space	3
 4200 092c 02000000 		.word	2
 4201 0930 43792C78 		.ascii	"Cy,x\000"
 4201      00
 4202 0935 000000   		.space	3
 4203 0938 949D00   		.ascii	"\224\235\000"
 4204 093b 00000000 		.space	5
 4204      00
 4205 0940 18       		.byte	24
 4206 0941 000000   		.space	3
 4207 0944 02000000 		.word	2
 4208 0948 2E       		.byte	46
 4209 0949 000000   		.space	3
 4210 094c FFFFFFFF 		.word	-1
 4211 0950 50792C78 		.ascii	"Py,x\000"
 4211      00
 4212 0955 000000   		.space	3
 4213 0958 00       		.ascii	"\000"
 4214 0959 00000000 		.space	7
 4214      000000
 4215 0960 08       		.byte	8
 4216 0961 000000   		.space	3
 4217 0964 01000000 		.word	1
 4218 0968 2E       		.byte	46
ARM GAS  /tmp/ccQIVay8.s 			page 106


 4219 0969 000000   		.space	3
 4220 096c FFFFFFFF 		.word	-1
 4221 0970 52414E23 		.ascii	"RAN#\000"
 4221      00
 4222 0975 000000   		.space	3
 4223 0978 00       		.ascii	"\000"
 4224 0979 00000000 		.space	7
 4224      000000
 4225 0980 2C       		.byte	44
 4226 0981 000000   		.space	3
 4227 0984 FFFFFFFF 		.word	-1
 4228 0988 2E       		.byte	46
 4229 0989 000000   		.space	3
 4230 098c FFFFFFFF 		.word	-1
 4231 0990 2D2D0D00 		.ascii	"--\015\000"
 4232 0994 00000000 		.space	4
 4233 0998 00       		.ascii	"\000"
 4234 0999 00000000 		.space	7
 4234      000000
 4235 09a0 2D       		.byte	45
 4236 09a1 000000   		.space	3
 4237 09a4 FFFFFFFF 		.word	-1
 4238 09a8 2E       		.byte	46
 4239 09a9 000000   		.space	3
 4240 09ac FFFFFFFF 		.word	-1
 4241 09b0 43505800 		.ascii	"CPX\000"
 4242 09b4 00000000 		.space	4
 4243 09b8 00       		.ascii	"\000"
 4244 09b9 00000000 		.space	7
 4244      000000
 4245 09c0 53746174 		.ascii	"Statistics\000"
 4245      69737469 
 4245      637300
 4246 09cb 00000000 		.space	4
 4247 09cf 00       		.space	1
 4248 09d0 1A       		.byte	26
 4249 09d1 000000   		.space	3
 4250 09d4 01000000 		.word	1
 4251 09d8 1B       		.byte	27
 4252 09d9 000000   		.space	3
 4253 09dc 03000000 		.word	3
 4254 09e0 58626172 		.ascii	"Xbar\000"
 4254      00
 4255 09e5 000000   		.space	3
 4256 09e8 53554D53 		.ascii	"SUMS\000"
 4256      00
 4257 09ed 000000   		.space	3
 4258 09f0 1B       		.byte	27
 4259 09f1 000000   		.space	3
 4260 09f4 01000000 		.word	1
 4261 09f8 2E       		.byte	46
 4262 09f9 000000   		.space	3
 4263 09fc FFFFFFFF 		.word	-1
 4264 0a00 59686174 		.ascii	"Yhat\000"
 4264      00
 4265 0a05 000000   		.space	3
 4266 0a08 00       		.ascii	"\000"
ARM GAS  /tmp/ccQIVay8.s 			page 107


 4267 0a09 00000000 		.space	7
 4267      000000
 4268 0a10 1A       		.byte	26
 4269 0a11 000000   		.space	3
 4270 0a14 02000000 		.word	2
 4271 0a18 2E       		.byte	46
 4272 0a19 000000   		.space	3
 4273 0a1c FFFFFFFF 		.word	-1
 4274 0a20 7300     		.ascii	"s\000"
 4275 0a22 00000000 		.space	6
 4275      0000
 4276 0a28 00       		.ascii	"\000"
 4277 0a29 00000000 		.space	7
 4277      000000
 4278 0a30 1B       		.byte	27
 4279 0a31 000000   		.space	3
 4280 0a34 02000000 		.word	2
 4281 0a38 2E       		.byte	46
 4282 0a39 000000   		.space	3
 4283 0a3c FFFFFFFF 		.word	-1
 4284 0a40 7200     		.ascii	"r\000"
 4285 0a42 00000000 		.space	6
 4285      0000
 4286 0a48 00       		.ascii	"\000"
 4287 0a49 00000000 		.space	7
 4287      000000
 4288 0a50 2C       		.byte	44
 4289 0a51 000000   		.space	3
 4290 0a54 FFFFFFFF 		.word	-1
 4291 0a58 2E       		.byte	46
 4292 0a59 000000   		.space	3
 4293 0a5c FFFFFFFF 		.word	-1
 4294 0a60 2D2D0D00 		.ascii	"--\015\000"
 4295 0a64 00000000 		.space	4
 4296 0a68 00       		.ascii	"\000"
 4297 0a69 00000000 		.space	7
 4297      000000
 4298 0a70 2D       		.byte	45
 4299 0a71 000000   		.space	3
 4300 0a74 FFFFFFFF 		.word	-1
 4301 0a78 31       		.byte	49
 4302 0a79 000000   		.space	3
 4303 0a7c 0B000000 		.word	11
 4304 0a80 43505800 		.ascii	"CPX\000"
 4305 0a84 00000000 		.space	4
 4306 0a88 00       		.ascii	"\000"
 4307 0a89 00000000 		.space	7
 4307      000000
 4308 0a90 53657475 		.ascii	"Setup 2\000"
 4308      70203200 
 4309 0a98 00000000 		.space	7
 4309      000000
 4310 0a9f 00       		.space	1
 4311 0aa0 31       		.byte	49
 4312 0aa1 000000   		.space	3
 4313 0aa4 04000000 		.word	4
 4314 0aa8 2E       		.byte	46
ARM GAS  /tmp/ccQIVay8.s 			page 108


 4315 0aa9 000000   		.space	3
 4316 0aac FFFFFFFF 		.word	-1
 4317 0ab0 53764C49 		.ascii	"SvLIB\000"
 4317      4200
 4318 0ab6 0000     		.space	2
 4319 0ab8 00       		.ascii	"\000"
 4320 0ab9 00000000 		.space	7
 4320      000000
 4321 0ac0 31       		.byte	49
 4322 0ac1 000000   		.space	3
 4323 0ac4 05000000 		.word	5
 4324 0ac8 2E       		.byte	46
 4325 0ac9 000000   		.space	3
 4326 0acc FFFFFFFF 		.word	-1
 4327 0ad0 4C644C49 		.ascii	"LdLIB\000"
 4327      4200
 4328 0ad6 0000     		.space	2
 4329 0ad8 00       		.ascii	"\000"
 4330 0ad9 00000000 		.space	7
 4330      000000
 4331 0ae0 31       		.byte	49
 4332 0ae1 000000   		.space	3
 4333 0ae4 0A000000 		.word	10
 4334 0ae8 2E       		.byte	46
 4335 0ae9 000000   		.space	3
 4336 0aec FFFFFFFF 		.word	-1
 4337 0af0 53764350 		.ascii	"SvCPRG\000"
 4337      524700
 4338 0af7 00       		.space	1
 4339 0af8 00       		.ascii	"\000"
 4340 0af9 00000000 		.space	7
 4340      000000
 4341 0b00 31       		.byte	49
 4342 0b01 000000   		.space	3
 4343 0b04 08000000 		.word	8
 4344 0b08 2E       		.byte	46
 4345 0b09 000000   		.space	3
 4346 0b0c FFFFFFFF 		.word	-1
 4347 0b10 4C645052 		.ascii	"LdPRG\000"
 4347      4700
 4348 0b16 0000     		.space	2
 4349 0b18 00       		.ascii	"\000"
 4350 0b19 00000000 		.space	7
 4350      000000
 4351 0b20 2C       		.byte	44
 4352 0b21 000000   		.space	3
 4353 0b24 FFFFFFFF 		.word	-1
 4354 0b28 2E       		.byte	46
 4355 0b29 000000   		.space	3
 4356 0b2c FFFFFFFF 		.word	-1
 4357 0b30 2D2D0D00 		.ascii	"--\015\000"
 4358 0b34 00000000 		.space	4
 4359 0b38 00       		.ascii	"\000"
 4360 0b39 00000000 		.space	7
 4360      000000
 4361 0b40 2D       		.byte	45
 4362 0b41 000000   		.space	3
ARM GAS  /tmp/ccQIVay8.s 			page 109


 4363 0b44 FFFFFFFF 		.word	-1
 4364 0b48 2E       		.byte	46
 4365 0b49 000000   		.space	3
 4366 0b4c FFFFFFFF 		.word	-1
 4367 0b50 43505800 		.ascii	"CPX\000"
 4368 0b54 00000000 		.space	4
 4369 0b58 00       		.ascii	"\000"
 4370 0b59 00000000 		.space	7
 4370      000000
 4371 0b60 496E7465 		.ascii	"Integ/Sum/Prod\000"
 4371      672F5375 
 4371      6D2F5072 
 4371      6F6400
 4372 0b6f 00       		.space	1
 4373 0b70 20       		.byte	32
 4374 0b71 000000   		.space	3
 4375 0b74 01000000 		.word	1
 4376 0b78 2E       		.byte	46
 4377 0b79 000000   		.space	3
 4378 0b7c FFFFFFFF 		.word	-1
 4379 0b80 534C5600 		.ascii	"SLV\000"
 4380 0b84 00000000 		.space	4
 4381 0b88 00       		.ascii	"\000"
 4382 0b89 00000000 		.space	7
 4382      000000
 4383 0b90 20       		.byte	32
 4384 0b91 000000   		.space	3
 4385 0b94 02000000 		.word	2
 4386 0b98 2E       		.byte	46
 4387 0b99 000000   		.space	3
 4388 0b9c FFFFFFFF 		.word	-1
 4389 0ba0 04206478 		.ascii	"\004 dx\000"
 4389      00
 4390 0ba5 000000   		.space	3
 4391 0ba8 00       		.ascii	"\000"
 4392 0ba9 00000000 		.space	7
 4392      000000
 4393 0bb0 21       		.byte	33
 4394 0bb1 000000   		.space	3
 4395 0bb4 01000000 		.word	1
 4396 0bb8 2E       		.byte	46
 4397 0bb9 000000   		.space	3
 4398 0bbc FFFFFFFF 		.word	-1
 4399 0bc0 53554D00 		.ascii	"SUM\000"
 4400 0bc4 00000000 		.space	4
 4401 0bc8 00       		.ascii	"\000"
 4402 0bc9 00000000 		.space	7
 4402      000000
 4403 0bd0 21       		.byte	33
 4404 0bd1 000000   		.space	3
 4405 0bd4 02000000 		.word	2
 4406 0bd8 2E       		.byte	46
 4407 0bd9 000000   		.space	3
 4408 0bdc FFFFFFFF 		.word	-1
 4409 0be0 50524F44 		.ascii	"PROD\000"
 4409      00
 4410 0be5 000000   		.space	3
ARM GAS  /tmp/ccQIVay8.s 			page 110


 4411 0be8 00       		.ascii	"\000"
 4412 0be9 00000000 		.space	7
 4412      000000
 4413 0bf0 2C       		.byte	44
 4414 0bf1 000000   		.space	3
 4415 0bf4 FFFFFFFF 		.word	-1
 4416 0bf8 2E       		.byte	46
 4417 0bf9 000000   		.space	3
 4418 0bfc FFFFFFFF 		.word	-1
 4419 0c00 2D2D0D00 		.ascii	"--\015\000"
 4420 0c04 00000000 		.space	4
 4421 0c08 00       		.ascii	"\000"
 4422 0c09 00000000 		.space	7
 4422      000000
 4423 0c10 2D       		.byte	45
 4424 0c11 000000   		.space	3
 4425 0c14 FFFFFFFF 		.word	-1
 4426 0c18 2E       		.byte	46
 4427 0c19 000000   		.space	3
 4428 0c1c FFFFFFFF 		.word	-1
 4429 0c20 43505800 		.ascii	"CPX\000"
 4430 0c24 00000000 		.space	4
 4431 0c28 00       		.ascii	"\000"
 4432 0c29 00000000 		.space	7
 4432      000000
 4433 0c30 426C616E 		.ascii	"Blank with A-D\000"
 4433      6B207769 
 4433      74682041 
 4433      2D4400
 4434 0c3f 00       		.space	1
 4435 0c40 28       		.byte	40
 4436 0c41 000000   		.space	3
 4437 0c44 03000000 		.word	3
 4438 0c48 2E       		.byte	46
 4439 0c49 000000   		.space	3
 4440 0c4c FFFFFFFF 		.word	-1
 4441 0c50 912B00   		.ascii	"\221+\000"
 4442 0c53 00000000 		.space	5
 4442      00
 4443 0c58 00       		.ascii	"\000"
 4444 0c59 00000000 		.space	7
 4444      000000
 4445 0c60 16       		.byte	22
 4446 0c61 000000   		.space	3
 4447 0c64 01000000 		.word	1
 4448 0c68 2E       		.byte	46
 4449 0c69 000000   		.space	3
 4450 0c6c FFFFFFFF 		.word	-1
 4451 0c70 312F5800 		.ascii	"1/X\000"
 4452 0c74 00000000 		.space	4
 4453 0c78 00       		.ascii	"\000"
 4454 0c79 00000000 		.space	7
 4454      000000
 4455 0c80 1C       		.byte	28
 4456 0c81 000000   		.space	3
 4457 0c84 01000000 		.word	1
 4458 0c88 2E       		.byte	46
ARM GAS  /tmp/ccQIVay8.s 			page 111


 4459 0c89 000000   		.space	3
 4460 0c8c FFFFFFFF 		.word	-1
 4461 0c90 035800   		.ascii	"\003X\000"
 4462 0c93 00000000 		.space	5
 4462      00
 4463 0c98 00       		.ascii	"\000"
 4464 0c99 00000000 		.space	7
 4464      000000
 4465 0ca0 13       		.byte	19
 4466 0ca1 000000   		.space	3
 4467 0ca4 02000000 		.word	2
 4468 0ca8 2E       		.byte	46
 4469 0ca9 000000   		.space	3
 4470 0cac FFFFFFFF 		.word	-1
 4471 0cb0 4C4F4700 		.ascii	"LOG\000"
 4472 0cb4 00000000 		.space	4
 4473 0cb8 00       		.ascii	"\000"
 4474 0cb9 00000000 		.space	7
 4474      000000
 4475 0cc0 2C       		.byte	44
 4476 0cc1 000000   		.space	3
 4477 0cc4 FFFFFFFF 		.word	-1
 4478 0cc8 2E       		.byte	46
 4479 0cc9 000000   		.space	3
 4480 0ccc FFFFFFFF 		.word	-1
 4481 0cd0 2D2D0D00 		.ascii	"--\015\000"
 4482 0cd4 00000000 		.space	4
 4483 0cd8 00       		.ascii	"\000"
 4484 0cd9 00000000 		.space	7
 4484      000000
 4485 0ce0 2D       		.byte	45
 4486 0ce1 000000   		.space	3
 4487 0ce4 FFFFFFFF 		.word	-1
 4488 0ce8 2E       		.byte	46
 4489 0ce9 000000   		.space	3
 4490 0cec FFFFFFFF 		.word	-1
 4491 0cf0 43505800 		.ascii	"CPX\000"
 4492 0cf4 00000000 		.space	4
 4493 0cf8 00       		.ascii	"\000"
 4494 0cf9 00000000 		.space	7
 4494      000000
 4495              		.section	.rodata.mapping_alpha.10888,"a"
 4496              		.align	2
 4497              		.set	.LANCHOR12,. + 0
 4500              	mapping_alpha.10888:
 4501 0000 63       		.byte	99
 4502 0001 000000   		.space	3
 4503 0004 FFFFFFFF 		.word	-1
 4504 0008 00       		.byte	0
 4505 0009 000000   		.space	3
 4506 000c FFFFFFFF 		.word	-1
 4507 0010 01       		.byte	1
 4508 0011 000000   		.space	3
 4509 0014 FFFFFFFF 		.word	-1
 4510 0018 02       		.byte	2
 4511 0019 000000   		.space	3
 4512 001c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccQIVay8.s 			page 112


 4513 0020 03       		.byte	3
 4514 0021 000000   		.space	3
 4515 0024 FFFFFFFF 		.word	-1
 4516 0028 04       		.byte	4
 4517 0029 000000   		.space	3
 4518 002c FFFFFFFF 		.word	-1
 4519 0030 05       		.byte	5
 4520 0031 000000   		.space	3
 4521 0034 FFFFFFFF 		.word	-1
 4522 0038 06       		.byte	6
 4523 0039 000000   		.space	3
 4524 003c FFFFFFFF 		.word	-1
 4525 0040 07       		.byte	7
 4526 0041 000000   		.space	3
 4527 0044 FFFFFFFF 		.word	-1
 4528 0048 08       		.byte	8
 4529 0049 000000   		.space	3
 4530 004c FFFFFFFF 		.word	-1
 4531 0050 09       		.byte	9
 4532 0051 000000   		.space	3
 4533 0054 FFFFFFFF 		.word	-1
 4534 0058 0A       		.byte	10
 4535 0059 000000   		.space	3
 4536 005c FFFFFFFF 		.word	-1
 4537 0060 0B       		.byte	11
 4538 0061 000000   		.space	3
 4539 0064 FFFFFFFF 		.word	-1
 4540 0068 0C       		.byte	12
 4541 0069 000000   		.space	3
 4542 006c FFFFFFFF 		.word	-1
 4543 0070 0D       		.byte	13
 4544 0071 000000   		.space	3
 4545 0074 FFFFFFFF 		.word	-1
 4546 0078 0E       		.byte	14
 4547 0079 000000   		.space	3
 4548 007c FFFFFFFF 		.word	-1
 4549 0080 0F       		.byte	15
 4550 0081 000000   		.space	3
 4551 0084 FFFFFFFF 		.word	-1
 4552 0088 10       		.byte	16
 4553 0089 000000   		.space	3
 4554 008c FFFFFFFF 		.word	-1
 4555 0090 12       		.byte	18
 4556 0091 000000   		.space	3
 4557 0094 FFFFFFFF 		.word	-1
 4558 0098 13       		.byte	19
 4559 0099 000000   		.space	3
 4560 009c FFFFFFFF 		.word	-1
 4561 00a0 14       		.byte	20
 4562 00a1 000000   		.space	3
 4563 00a4 FFFFFFFF 		.word	-1
 4564 00a8 15       		.byte	21
 4565 00a9 000000   		.space	3
 4566 00ac FFFFFFFF 		.word	-1
 4567 00b0 16       		.byte	22
 4568 00b1 000000   		.space	3
 4569 00b4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccQIVay8.s 			page 113


 4570 00b8 18       		.byte	24
 4571 00b9 000000   		.space	3
 4572 00bc FFFFFFFF 		.word	-1
 4573 00c0 19       		.byte	25
 4574 00c1 000000   		.space	3
 4575 00c4 FFFFFFFF 		.word	-1
 4576 00c8 1A       		.byte	26
 4577 00c9 000000   		.space	3
 4578 00cc FFFFFFFF 		.word	-1
 4579 00d0 1B       		.byte	27
 4580 00d1 000000   		.space	3
 4581 00d4 FFFFFFFF 		.word	-1
 4582 00d8 1C       		.byte	28
 4583 00d9 000000   		.space	3
 4584 00dc FFFFFFFF 		.word	-1
 4585 00e0 1E       		.byte	30
 4586 00e1 000000   		.space	3
 4587 00e4 FFFFFFFF 		.word	-1
 4588 00e8 1F       		.byte	31
 4589 00e9 000000   		.space	3
 4590 00ec FFFFFFFF 		.word	-1
 4591 00f0 20       		.byte	32
 4592 00f1 000000   		.space	3
 4593 00f4 FFFFFFFF 		.word	-1
 4594 00f8 21       		.byte	33
 4595 00f9 000000   		.space	3
 4596 00fc FFFFFFFF 		.word	-1
 4597 0100 22       		.byte	34
 4598 0101 000000   		.space	3
 4599 0104 FFFFFFFF 		.word	-1
 4600 0108 24       		.byte	36
 4601 0109 000000   		.space	3
 4602 010c FFFFFFFF 		.word	-1
 4603 0110 25       		.byte	37
 4604 0111 000000   		.space	3
 4605 0114 FFFFFFFF 		.word	-1
 4606 0118 26       		.byte	38
 4607 0119 000000   		.space	3
 4608 011c FFFFFFFF 		.word	-1
 4609 0120 27       		.byte	39
 4610 0121 000000   		.space	3
 4611 0124 FFFFFFFF 		.word	-1
 4612 0128 28       		.byte	40
 4613 0129 000000   		.space	3
 4614 012c FFFFFFFF 		.word	-1
 4615 0130 2E       		.byte	46
 4616 0131 000000   		.space	3
 4617 0134 FFFFFFFF 		.word	-1
 4618 0138 2E       		.byte	46
 4619 0139 000000   		.space	3
 4620 013c FFFFFFFF 		.word	-1
 4621 0140 2E       		.byte	46
 4622 0141 000000   		.space	3
 4623 0144 FFFFFFFF 		.word	-1
 4624 0148 2E       		.byte	46
 4625 0149 000000   		.space	3
 4626 014c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccQIVay8.s 			page 114


 4627 0150 2C       		.byte	44
 4628 0151 000000   		.space	3
 4629 0154 FFFFFFFF 		.word	-1
 4630 0158 2E       		.byte	46
 4631 0159 000000   		.space	3
 4632 015c FFFFFFFF 		.word	-1
 4633 0160 2E       		.byte	46
 4634 0161 000000   		.space	3
 4635 0164 FFFFFFFF 		.word	-1
 4636 0168 2E       		.byte	46
 4637 0169 000000   		.space	3
 4638 016c FFFFFFFF 		.word	-1
 4639 0170 2E       		.byte	46
 4640 0171 000000   		.space	3
 4641 0174 FFFFFFFF 		.word	-1
 4642              		.section	.rodata.mapping_fshift.10886,"a"
 4643              		.align	2
 4644              		.set	.LANCHOR10,. + 0
 4647              	mapping_fshift.10886:
 4648 0000 63       		.byte	99
 4649 0001 000000   		.space	3
 4650 0004 FFFFFFFF 		.word	-1
 4651 0008 22       		.byte	34
 4652 0009 000000   		.space	3
 4653 000c 03000000 		.word	3
 4654 0010 15       		.byte	21
 4655 0011 000000   		.space	3
 4656 0014 01000000 		.word	1
 4657 0018 1C       		.byte	28
 4658 0019 000000   		.space	3
 4659 001c 02000000 		.word	2
 4660 0020 13       		.byte	19
 4661 0021 000000   		.space	3
 4662 0024 01000000 		.word	1
 4663 0028 12       		.byte	18
 4664 0029 000000   		.space	3
 4665 002c 01000000 		.word	1
 4666 0030 12       		.byte	18
 4667 0031 000000   		.space	3
 4668 0034 03000000 		.word	3
 4669 0038 2D       		.byte	45
 4670 0039 000000   		.space	3
 4671 003c 00000000 		.word	0
 4672 0040 22       		.byte	34
 4673 0041 000000   		.space	3
 4674 0044 01000000 		.word	1
 4675 0048 0F       		.byte	15
 4676 0049 000000   		.space	3
 4677 004c 03000000 		.word	3
 4678 0050 01       		.byte	1
 4679 0051 000000   		.space	3
 4680 0054 02000000 		.word	2
 4681 0058 02       		.byte	2
 4682 0059 000000   		.space	3
 4683 005c 02000000 		.word	2
 4684 0060 03       		.byte	3
 4685 0061 000000   		.space	3
ARM GAS  /tmp/ccQIVay8.s 			page 115


 4686 0064 02000000 		.word	2
 4687 0068 0C       		.byte	12
 4688 0069 000000   		.space	3
 4689 006c 01000000 		.word	1
 4690 0070 31       		.byte	49
 4691 0071 000000   		.space	3
 4692 0074 01000000 		.word	1
 4693 0078 2F       		.byte	47
 4694 0079 000000   		.space	3
 4695 007c 04000000 		.word	4
 4696 0080 2F       		.byte	47
 4697 0081 000000   		.space	3
 4698 0084 02000000 		.word	2
 4699 0088 2F       		.byte	47
 4700 0089 000000   		.space	3
 4701 008c 01000000 		.word	1
 4702 0090 18       		.byte	24
 4703 0091 000000   		.space	3
 4704 0094 00000000 		.word	0
 4705 0098 20       		.byte	32
 4706 0099 000000   		.space	3
 4707 009c 01000000 		.word	1
 4708 00a0 2F       		.byte	47
 4709 00a1 000000   		.space	3
 4710 00a4 0E000000 		.word	14
 4711 00a8 1C       		.byte	28
 4712 00a9 000000   		.space	3
 4713 00ac 03000000 		.word	3
 4714 00b0 2F       		.byte	47
 4715 00b1 000000   		.space	3
 4716 00b4 0C000000 		.word	12
 4717 00b8 1E       		.byte	30
 4718 00b9 000000   		.space	3
 4719 00bc 00000000 		.word	0
 4720 00c0 2F       		.byte	47
 4721 00c1 000000   		.space	3
 4722 00c4 03000000 		.word	3
 4723 00c8 04       		.byte	4
 4724 00c9 000000   		.space	3
 4725 00cc 03000000 		.word	3
 4726 00d0 2F       		.byte	47
 4727 00d1 000000   		.space	3
 4728 00d4 0A000000 		.word	10
 4729 00d8 2F       		.byte	47
 4730 00d9 000000   		.space	3
 4731 00dc 0B000000 		.word	11
 4732 00e0 2A       		.byte	42
 4733 00e1 000000   		.space	3
 4734 00e4 00000000 		.word	0
 4735 00e8 31       		.byte	49
 4736 00e9 000000   		.space	3
 4737 00ec 0D000000 		.word	13
 4738 00f0 2E       		.byte	46
 4739 00f1 000000   		.space	3
 4740 00f4 00000000 		.word	0
 4741 00f8 20       		.byte	32
 4742 00f9 000000   		.space	3
ARM GAS  /tmp/ccQIVay8.s 			page 116


 4743 00fc 03000000 		.word	3
 4744 0100 2E       		.byte	46
 4745 0101 000000   		.space	3
 4746 0104 00000000 		.word	0
 4747 0108 24       		.byte	36
 4748 0109 000000   		.space	3
 4749 010c 03000000 		.word	3
 4750 0110 2F       		.byte	47
 4751 0111 000000   		.space	3
 4752 0114 08000000 		.word	8
 4753 0118 0D       		.byte	13
 4754 0119 000000   		.space	3
 4755 011c 01000000 		.word	1
 4756 0120 27       		.byte	39
 4757 0121 000000   		.space	3
 4758 0124 03000000 		.word	3
 4759 0128 06       		.byte	6
 4760 0129 000000   		.space	3
 4761 012c 03000000 		.word	3
 4762 0130 2E       		.byte	46
 4763 0131 000000   		.space	3
 4764 0134 00000000 		.word	0
 4765 0138 2E       		.byte	46
 4766 0139 000000   		.space	3
 4767 013c 00000000 		.word	0
 4768 0140 2E       		.byte	46
 4769 0141 000000   		.space	3
 4770 0144 00000000 		.word	0
 4771 0148 2E       		.byte	46
 4772 0149 000000   		.space	3
 4773 014c 00000000 		.word	0
 4774 0150 2E       		.byte	46
 4775 0151 000000   		.space	3
 4776 0154 00000000 		.word	0
 4777 0158 2E       		.byte	46
 4778 0159 000000   		.space	3
 4779 015c 00000000 		.word	0
 4780 0160 2E       		.byte	46
 4781 0161 000000   		.space	3
 4782 0164 00000000 		.word	0
 4783 0168 2F       		.byte	47
 4784 0169 000000   		.space	3
 4785 016c FFFFFFFF 		.word	-1
 4786 0170 2F       		.byte	47
 4787 0171 000000   		.space	3
 4788 0174 05000000 		.word	5
 4789              		.section	.rodata.mapping_gshift.10887,"a"
 4790              		.align	2
 4791              		.set	.LANCHOR13,. + 0
 4794              	mapping_gshift.10887:
 4795 0000 63       		.byte	99
 4796 0001 000000   		.space	3
 4797 0004 FFFFFFFF 		.word	-1
 4798 0008 28       		.byte	40
 4799 0009 000000   		.space	3
 4800 000c 03000000 		.word	3
 4801 0010 16       		.byte	22
ARM GAS  /tmp/ccQIVay8.s 			page 117


 4802 0011 000000   		.space	3
 4803 0014 01000000 		.word	1
 4804 0018 1C       		.byte	28
 4805 0019 000000   		.space	3
 4806 001c 01000000 		.word	1
 4807 0020 13       		.byte	19
 4808 0021 000000   		.space	3
 4809 0024 02000000 		.word	2
 4810 0028 2E       		.byte	46
 4811 0029 000000   		.space	3
 4812 002c 00000000 		.word	0
 4813 0030 2E       		.byte	46
 4814 0031 000000   		.space	3
 4815 0034 00000000 		.word	0
 4816 0038 2E       		.byte	46
 4817 0039 000000   		.space	3
 4818 003c 00000000 		.word	0
 4819 0040 07       		.byte	7
 4820 0041 000000   		.space	3
 4821 0044 03000000 		.word	3
 4822 0048 08       		.byte	8
 4823 0049 000000   		.space	3
 4824 004c 03000000 		.word	3
 4825 0050 2F       		.byte	47
 4826 0051 000000   		.space	3
 4827 0054 04000000 		.word	4
 4828 0058 2F       		.byte	47
 4829 0059 000000   		.space	3
 4830 005c 04000000 		.word	4
 4831 0060 2F       		.byte	47
 4832 0061 000000   		.space	3
 4833 0064 04000000 		.word	4
 4834 0068 0C       		.byte	12
 4835 0069 000000   		.space	3
 4836 006c 02000000 		.word	2
 4837 0070 2F       		.byte	47
 4838 0071 000000   		.space	3
 4839 0074 06000000 		.word	6
 4840 0078 05       		.byte	5
 4841 0079 000000   		.space	3
 4842 007c 03000000 		.word	3
 4843 0080 2E       		.byte	46
 4844 0081 000000   		.space	3
 4845 0084 00000000 		.word	0
 4846 0088 2E       		.byte	46
 4847 0089 000000   		.space	3
 4848 008c 00000000 		.word	0
 4849 0090 2E       		.byte	46
 4850 0091 000000   		.space	3
 4851 0094 00000000 		.word	0
 4852 0098 2E       		.byte	46
 4853 0099 000000   		.space	3
 4854 009c 00000000 		.word	0
 4855 00a0 2E       		.byte	46
 4856 00a1 000000   		.space	3
 4857 00a4 00000000 		.word	0
 4858 00a8 1B       		.byte	27
ARM GAS  /tmp/ccQIVay8.s 			page 118


 4859 00a9 000000   		.space	3
 4860 00ac 03000000 		.word	3
 4861 00b0 1A       		.byte	26
 4862 00b1 000000   		.space	3
 4863 00b4 03000000 		.word	3
 4864 00b8 2E       		.byte	46
 4865 00b9 000000   		.space	3
 4866 00bc 00000000 		.word	0
 4867 00c0 2E       		.byte	46
 4868 00c1 000000   		.space	3
 4869 00c4 00000000 		.word	0
 4870 00c8 0C       		.byte	12
 4871 00c9 000000   		.space	3
 4872 00cc 03000000 		.word	3
 4873 00d0 1F       		.byte	31
 4874 00d1 000000   		.space	3
 4875 00d4 03000000 		.word	3
 4876 00d8 19       		.byte	25
 4877 00d9 000000   		.space	3
 4878 00dc 03000000 		.word	3
 4879 00e0 2A       		.byte	42
 4880 00e1 000000   		.space	3
 4881 00e4 FFFFFFFF 		.word	-1
 4882 00e8 2E       		.byte	46
 4883 00e9 000000   		.space	3
 4884 00ec 00000000 		.word	0
 4885 00f0 2E       		.byte	46
 4886 00f1 000000   		.space	3
 4887 00f4 00000000 		.word	0
 4888 00f8 21       		.byte	33
 4889 00f9 000000   		.space	3
 4890 00fc 03000000 		.word	3
 4891 0100 2E       		.byte	46
 4892 0101 000000   		.space	3
 4893 0104 00000000 		.word	0
 4894 0108 24       		.byte	36
 4895 0109 000000   		.space	3
 4896 010c 02000000 		.word	2
 4897 0110 2F       		.byte	47
 4898 0111 000000   		.space	3
 4899 0114 0D000000 		.word	13
 4900 0118 2E       		.byte	46
 4901 0119 000000   		.space	3
 4902 011c 00000000 		.word	0
 4903 0120 2F       		.byte	47
 4904 0121 000000   		.space	3
 4905 0124 07000000 		.word	7
 4906 0128 1E       		.byte	30
 4907 0129 000000   		.space	3
 4908 012c 03000000 		.word	3
 4909 0130 2E       		.byte	46
 4910 0131 000000   		.space	3
 4911 0134 00000000 		.word	0
 4912 0138 2E       		.byte	46
 4913 0139 000000   		.space	3
 4914 013c 00000000 		.word	0
 4915 0140 2E       		.byte	46
ARM GAS  /tmp/ccQIVay8.s 			page 119


 4916 0141 000000   		.space	3
 4917 0144 00000000 		.word	0
 4918 0148 2E       		.byte	46
 4919 0149 000000   		.space	3
 4920 014c 00000000 		.word	0
 4921 0150 2E       		.byte	46
 4922 0151 000000   		.space	3
 4923 0154 00000000 		.word	0
 4924 0158 2E       		.byte	46
 4925 0159 000000   		.space	3
 4926 015c 00000000 		.word	0
 4927 0160 2E       		.byte	46
 4928 0161 000000   		.space	3
 4929 0164 00000000 		.word	0
 4930 0168 2E       		.byte	46
 4931 0169 000000   		.space	3
 4932 016c 00000000 		.word	0
 4933 0170 2E       		.byte	46
 4934 0171 000000   		.space	3
 4935 0174 00000000 		.word	0
 4936              		.section	.rodata.mapping_none.10885,"a"
 4937              		.align	2
 4938              		.set	.LANCHOR9,. + 0
 4941              	mapping_none.10885:
 4942 0000 63       		.byte	99
 4943 0001 000000   		.space	3
 4944 0004 FFFFFFFF 		.word	-1
 4945 0008 00       		.byte	0
 4946 0009 000000   		.space	3
 4947 000c 00000000 		.word	0
 4948 0010 01       		.byte	1
 4949 0011 000000   		.space	3
 4950 0014 00000000 		.word	0
 4951 0018 03       		.byte	3
 4952 0019 000000   		.space	3
 4953 001c 00000000 		.word	0
 4954 0020 13       		.byte	19
 4955 0021 000000   		.space	3
 4956 0024 02000000 		.word	2
 4957 0028 12       		.byte	18
 4958 0029 000000   		.space	3
 4959 002c 02000000 		.word	2
 4960 0030 12       		.byte	18
 4961 0031 000000   		.space	3
 4962 0034 00000000 		.word	0
 4963 0038 06       		.byte	6
 4964 0039 000000   		.space	3
 4965 003c 00000000 		.word	0
 4966 0040 07       		.byte	7
 4967 0041 000000   		.space	3
 4968 0044 00000000 		.word	0
 4969 0048 08       		.byte	8
 4970 0049 000000   		.space	3
 4971 004c 00000000 		.word	0
 4972 0050 01       		.byte	1
 4973 0051 000000   		.space	3
 4974 0054 01000000 		.word	1
ARM GAS  /tmp/ccQIVay8.s 			page 120


 4975 0058 02       		.byte	2
 4976 0059 000000   		.space	3
 4977 005c 01000000 		.word	1
 4978 0060 03       		.byte	3
 4979 0061 000000   		.space	3
 4980 0064 01000000 		.word	1
 4981 0068 0C       		.byte	12
 4982 0069 000000   		.space	3
 4983 006c 00000000 		.word	0
 4984 0070 0D       		.byte	13
 4985 0071 000000   		.space	3
 4986 0074 00000000 		.word	0
 4987 0078 0E       		.byte	14
 4988 0079 000000   		.space	3
 4989 007c 00000000 		.word	0
 4990 0080 0F       		.byte	15
 4991 0081 000000   		.space	3
 4992 0084 00000000 		.word	0
 4993 0088 10       		.byte	16
 4994 0089 000000   		.space	3
 4995 008c 00000000 		.word	0
 4996 0090 18       		.byte	24
 4997 0091 000000   		.space	3
 4998 0094 00000000 		.word	0
 4999 0098 13       		.byte	19
 5000 0099 000000   		.space	3
 5001 009c 00000000 		.word	0
 5002 00a0 14       		.byte	20
 5003 00a1 000000   		.space	3
 5004 00a4 00000000 		.word	0
 5005 00a8 15       		.byte	21
 5006 00a9 000000   		.space	3
 5007 00ac 00000000 		.word	0
 5008 00b0 16       		.byte	22
 5009 00b1 000000   		.space	3
 5010 00b4 00000000 		.word	0
 5011 00b8 1E       		.byte	30
 5012 00b9 000000   		.space	3
 5013 00bc 00000000 		.word	0
 5014 00c0 19       		.byte	25
 5015 00c1 000000   		.space	3
 5016 00c4 00000000 		.word	0
 5017 00c8 1A       		.byte	26
 5018 00c9 000000   		.space	3
 5019 00cc 00000000 		.word	0
 5020 00d0 1B       		.byte	27
 5021 00d1 000000   		.space	3
 5022 00d4 00000000 		.word	0
 5023 00d8 1C       		.byte	28
 5024 00d9 000000   		.space	3
 5025 00dc 00000000 		.word	0
 5026 00e0 29       		.byte	41
 5027 00e1 000000   		.space	3
 5028 00e4 00000000 		.word	0
 5029 00e8 1F       		.byte	31
 5030 00e9 000000   		.space	3
 5031 00ec 00000000 		.word	0
ARM GAS  /tmp/ccQIVay8.s 			page 121


 5032 00f0 20       		.byte	32
 5033 00f1 000000   		.space	3
 5034 00f4 00000000 		.word	0
 5035 00f8 21       		.byte	33
 5036 00f9 000000   		.space	3
 5037 00fc 00000000 		.word	0
 5038 0100 22       		.byte	34
 5039 0101 000000   		.space	3
 5040 0104 00000000 		.word	0
 5041 0108 24       		.byte	36
 5042 0109 000000   		.space	3
 5043 010c 00000000 		.word	0
 5044 0110 25       		.byte	37
 5045 0111 000000   		.space	3
 5046 0114 00000000 		.word	0
 5047 0118 26       		.byte	38
 5048 0119 000000   		.space	3
 5049 011c 00000000 		.word	0
 5050 0120 27       		.byte	39
 5051 0121 000000   		.space	3
 5052 0124 00000000 		.word	0
 5053 0128 28       		.byte	40
 5054 0129 000000   		.space	3
 5055 012c 00000000 		.word	0
 5056 0130 2E       		.byte	46
 5057 0131 000000   		.space	3
 5058 0134 00000000 		.word	0
 5059 0138 2E       		.byte	46
 5060 0139 000000   		.space	3
 5061 013c 00000000 		.word	0
 5062 0140 2E       		.byte	46
 5063 0141 000000   		.space	3
 5064 0144 00000000 		.word	0
 5065 0148 2E       		.byte	46
 5066 0149 000000   		.space	3
 5067 014c 00000000 		.word	0
 5068 0150 2E       		.byte	46
 5069 0151 000000   		.space	3
 5070 0154 00000000 		.word	0
 5071 0158 2E       		.byte	46
 5072 0159 000000   		.space	3
 5073 015c 00000000 		.word	0
 5074 0160 2E       		.byte	46
 5075 0161 000000   		.space	3
 5076 0164 00000000 		.word	0
 5077 0168 2E       		.byte	46
 5078 0169 000000   		.space	3
 5079 016c 00000000 		.word	0
 5080 0170 2E       		.byte	46
 5081 0171 000000   		.space	3
 5082 0174 00000000 		.word	0
 5083              		.section	.rodata.mid_menu,"a"
 5084              		.align	2
 5087              	mid_menu:
 5088 0000 C8C400   		.ascii	"\310\304\000"
 5089              		.text
 5090              	.Letext0:
ARM GAS  /tmp/ccQIVay8.s 			page 122


 5091              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 5092              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 5093              		.file 6 "/usr/include/newlib/sys/_types.h"
 5094              		.file 7 "/usr/include/newlib/sys/reent.h"
 5095              		.file 8 "/usr/include/newlib/sys/lock.h"
 5096              		.file 9 "/usr/include/newlib/stdlib.h"
 5097              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 5098              		.file 11 "/usr/include/newlib/ctype.h"
 5099              		.file 12 "dmcp/ff_ifc.h"
 5100              		.file 13 "dmcp/dmcp.h"
 5101              		.file 14 "src/keys.h"
 5102              		.file 15 "src/decNumber/decContext.h"
 5103              		.file 16 "src/decNumber/decNumber.h"
 5104              		.file 17 "src/decNumber/decimal64.h"
 5105              		.file 18 "src/decNumber/decimal128.h"
 5106              		.file 19 "src/xeq.h"
 5107              		.file 20 "src/data.h"
 5108              		.file 21 "src/display.h"
 5109              		.file 22 "src/consts.h"
 5110              		.file 23 "src/storage.h"
 5111              		.file 24 "src/catalogues.h"
 5112              		.file 25 "src/menu.h"
 5113              		.file 26 "src/lcd.h"
 5114              		.file 27 "/usr/include/newlib/string.h"
 5115              		.file 28 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccQIVay8.s 			page 123


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccQIVay8.s:18     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccQIVay8.s:26     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccQIVay8.s:392    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/ccQIVay8.s:400    .text.set_menu:0000000000000000 $t
     /tmp/ccQIVay8.s:408    .text.set_menu:0000000000000000 set_menu
     /tmp/ccQIVay8.s:459    .text.set_menu:0000000000000028 $d
     /tmp/ccQIVay8.s:466    .text.toggle_default_menu:0000000000000000 $t
     /tmp/ccQIVay8.s:474    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/ccQIVay8.s:503    .text.toggle_default_menu:0000000000000018 $d
     /tmp/ccQIVay8.s:509    .text.get_menu:0000000000000000 $t
     /tmp/ccQIVay8.s:517    .text.get_menu:0000000000000000 get_menu
     /tmp/ccQIVay8.s:533    .text.get_menu:0000000000000008 $d
     /tmp/ccQIVay8.s:538    .text.set_last_menu:0000000000000000 $t
     /tmp/ccQIVay8.s:546    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccQIVay8.s:601    .text.set_last_menu:000000000000001c $d
     /tmp/ccQIVay8.s:608    .text.mdot:0000000000000000 $t
     /tmp/ccQIVay8.s:616    .text.mdot:0000000000000000 mdot
     /tmp/ccQIVay8.s:707    .text.mdot:000000000000003c $d
     /tmp/ccQIVay8.s:712    .text.display_menu:0000000000000000 $t
     /tmp/ccQIVay8.s:720    .text.display_menu:0000000000000000 display_menu
     /tmp/ccQIVay8.s:959    .text.display_menu:000000000000010c $d
     /tmp/ccQIVay8.s:967    .text.display_current_menu:0000000000000000 $t
     /tmp/ccQIVay8.s:975    .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccQIVay8.s:990    .text.display_current_menu:0000000000000008 $d
     /tmp/ccQIVay8.s:995    .text.all_menu_dots:0000000000000000 $t
     /tmp/ccQIVay8.s:1003   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccQIVay8.s:1087   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccQIVay8.s:1092   .text.shutdown:0000000000000000 $t
     /tmp/ccQIVay8.s:1100   .text.shutdown:0000000000000000 shutdown
     /tmp/ccQIVay8.s:1118   .text.shutdown:000000000000000c $d
     /tmp/ccQIVay8.s:1123   .text.is_key_pressed:0000000000000000 $t
     /tmp/ccQIVay8.s:1131   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccQIVay8.s:1154   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccQIVay8.s:1159   .text.get_key:0000000000000000 $t
     /tmp/ccQIVay8.s:1167   .text.get_key:0000000000000000 get_key
     /tmp/ccQIVay8.s:1182   .text.get_key:0000000000000004 $d
     /tmp/ccQIVay8.s:1187   .text.put_key:0000000000000000 $t
     /tmp/ccQIVay8.s:1195   .text.put_key:0000000000000000 put_key
     /tmp/ccQIVay8.s:1212   .text.put_key:0000000000000004 $d
     /tmp/ccQIVay8.s:1217   .text.shift_down:0000000000000000 $t
     /tmp/ccQIVay8.s:1225   .text.shift_down:0000000000000000 shift_down
     /tmp/ccQIVay8.s:1240   .text.start_key_timer:0000000000000000 $t
     /tmp/ccQIVay8.s:1248   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccQIVay8.s:1272   .text.start_key_timer:000000000000000c $d
     /tmp/ccQIVay8.s:1278   .text.keyticks:0000000000000000 $t
     /tmp/ccQIVay8.s:1286   .text.keyticks:0000000000000000 keyticks
     /tmp/ccQIVay8.s:1317   .text.keyticks:0000000000000018 $d
     /tmp/ccQIVay8.s:1323   .text.moveto:0000000000000000 $t
     /tmp/ccQIVay8.s:1331   .text.moveto:0000000000000000 moveto
     /tmp/ccQIVay8.s:1391   .text.moveto:000000000000002c $d
     /tmp/ccQIVay8.s:1398   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccQIVay8.s:1402   .text.print_debug:0000000000000000 $t
     /tmp/ccQIVay8.s:1410   .text.print_debug:0000000000000000 print_debug
     /tmp/ccQIVay8.s:1512   .text.print_debug:0000000000000060 $d
                            *COM*:0000000000000016 print_string
ARM GAS  /tmp/ccQIVay8.s 			page 124


     /tmp/ccQIVay8.s:1523   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccQIVay8.s:1527   .text.print_debug2:0000000000000000 $t
     /tmp/ccQIVay8.s:1535   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccQIVay8.s:1637   .text.print_debug2:0000000000000064 $d
     /tmp/ccQIVay8.s:1648   .text.do_now:0000000000000000 $t
     /tmp/ccQIVay8.s:1656   .text.do_now:0000000000000000 do_now
     /tmp/ccQIVay8.s:1691   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccQIVay8.s:1695   .text.do_multi:0000000000000000 $t
     /tmp/ccQIVay8.s:1703   .text.do_multi:0000000000000000 do_multi
     /tmp/ccQIVay8.s:1734   .text.do_multi:0000000000000018 $d
     /tmp/ccQIVay8.s:2141   .text.do_multi:0000000000000190 $d
     /tmp/ccQIVay8.s:2150   .text.program_main:0000000000000000 $t
     /tmp/ccQIVay8.s:2158   .text.program_main:0000000000000000 program_main
     /tmp/ccQIVay8.s:2651   .text.program_main:0000000000000210 $d
     /tmp/ccQIVay8.s:2658   .text.program_main:000000000000021c $t
     /tmp/ccQIVay8.s:2899   .text.program_main:00000000000002d0 $d
     /tmp/ccQIVay8.s:2943   .text.program_main:000000000000035c $t
     /tmp/ccQIVay8.s:3343   .text.program_main:0000000000000564 $d
     /tmp/ccQIVay8.s:3403   .bss.n_p:0000000000000000 n_p
     /tmp/ccQIVay8.s:3471   .data.spaces:0000000000000000 spaces
     /tmp/ccQIVay8.s:3462   .data.release:0000000000000000 release
     /tmp/ccQIVay8.s:3435   .data.h_shift:0000000000000000 h_shift
     /tmp/ccQIVay8.s:3426   .data.g_shift:0000000000000000 g_shift
     /tmp/ccQIVay8.s:3417   .data.f_shift:0000000000000000 f_shift
     /tmp/ccQIVay8.s:3444   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccQIVay8.s:3453   .data.no_key:0000000000000000 no_key
     /tmp/ccQIVay8.s:3478   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccQIVay8.s:3367   .rodata.str1.4:0000000000000000 $d
     /tmp/ccQIVay8.s:5087   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccQIVay8.s:3372   .bss.current_menu:0000000000000000 $d
     /tmp/ccQIVay8.s:3376   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccQIVay8.s:3379   .bss.default_menu:0000000000000000 $d
     /tmp/ccQIVay8.s:3383   .bss.default_menu:0000000000000000 default_menu
     /tmp/ccQIVay8.s:3386   .bss.last_menu:0000000000000000 $d
     /tmp/ccQIVay8.s:3390   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccQIVay8.s:3393   .bss.mdots:0000000000000000 $d
     /tmp/ccQIVay8.s:3397   .bss.mdots:0000000000000000 mdots
     /tmp/ccQIVay8.s:3400   .bss.n_p:0000000000000000 $d
     /tmp/ccQIVay8.s:3406   .bss.start_ticks:0000000000000000 $d
     /tmp/ccQIVay8.s:3410   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccQIVay8.s:3413   .data.f_shift:0000000000000000 $d
     /tmp/ccQIVay8.s:3422   .data.g_shift:0000000000000000 $d
     /tmp/ccQIVay8.s:3431   .data.h_shift:0000000000000000 $d
     /tmp/ccQIVay8.s:3440   .data.heartbeat:0000000000000000 $d
     /tmp/ccQIVay8.s:3449   .data.no_key:0000000000000000 $d
     /tmp/ccQIVay8.s:3458   .data.release:0000000000000000 $d
     /tmp/ccQIVay8.s:3467   .data.spaces:0000000000000000 $d
     /tmp/ccQIVay8.s:3474   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccQIVay8.s:3484   .rodata.Menus:0000000000000000 $d
     /tmp/ccQIVay8.s:3488   .rodata.Menus:0000000000000000 Menus
     /tmp/ccQIVay8.s:4496   .rodata.mapping_alpha.10888:0000000000000000 $d
     /tmp/ccQIVay8.s:4500   .rodata.mapping_alpha.10888:0000000000000000 mapping_alpha.10888
     /tmp/ccQIVay8.s:4643   .rodata.mapping_fshift.10886:0000000000000000 $d
     /tmp/ccQIVay8.s:4647   .rodata.mapping_fshift.10886:0000000000000000 mapping_fshift.10886
     /tmp/ccQIVay8.s:4790   .rodata.mapping_gshift.10887:0000000000000000 $d
     /tmp/ccQIVay8.s:4794   .rodata.mapping_gshift.10887:0000000000000000 mapping_gshift.10887
     /tmp/ccQIVay8.s:4937   .rodata.mapping_none.10885:0000000000000000 $d
ARM GAS  /tmp/ccQIVay8.s 			page 125


     /tmp/ccQIVay8.s:4941   .rodata.mapping_none.10885:0000000000000000 mapping_none.10885
     /tmp/ccQIVay8.s:5084   .rodata.mid_menu:0000000000000000 $d
     /tmp/ccQIVay8.s:1747   .text.do_multi:0000000000000025 $d
     /tmp/ccQIVay8.s:1747   .text.do_multi:0000000000000026 $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
pixel_length
strcpy
sprintf
process_keycode_with_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
get_alpha_state
cur_shift
StateWhileOn
DispMsg
JustDisplayed
Pause

ARM GAS  /tmp/cc7Wa57o.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC3:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** //#include <menu.h>
   2:src/menu.c    **** extern const char SvnRevision[4];
   3:src/menu.c    **** 
   4:src/menu.c    **** struct _menu UserMenu =
   5:src/menu.c    ****   {
   6:src/menu.c    ****     "User Menu", 
   7:src/menu.c    ****     {
   8:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   9:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  10:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  11:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  12:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  13:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
  14:src/menu.c    ****     }
  15:src/menu.c    ****   };
  16:src/menu.c    **** 
  17:src/menu.c    **** const char* arrow_key_string = "--\015";
  18:src/menu.c    **** const char* cmplx_key_string = "CPX";
  19:src/menu.c    **** 
  20:src/menu.c    **** menu_name current_menu = 0;
  21:src/menu.c    **** menu_name last_menu = 0;
  22:src/menu.c    **** menu_name default_menu = 0;
  23:src/menu.c    **** 
ARM GAS  /tmp/cc7Wa57o.s 			page 2


  24:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted);
  25:src/menu.c    **** 
  26:src/menu.c    **** 
  27:src/menu.c    **** 
  28:src/menu.c    **** /* 
  29:src/menu.c    ****  * System menu stuff
  30:src/menu.c    ****  */
  31:src/menu.c    **** 
  32:src/menu.c    **** #define MI_ABOUT_PGM 11
  33:src/menu.c    **** 
  34:src/menu.c    **** const uint8_t mid_menu[] = {
  35:src/menu.c    ****     MI_SYSTEM_ENTER,
  36:src/menu.c    ****     MI_MSC,
  37:src/menu.c    ****     MI_ABOUT_PGM,
  38:src/menu.c    ****     0 }; // Terminator
  39:src/menu.c    **** 
  40:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  41:src/menu.c    **** 
  42:src/menu.c    **** void disp_about(void);
  43:src/menu.c    **** 
  44:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  45:src/menu.c    ****   int ret = 0;
  46:src/menu.c    **** 
  47:src/menu.c    ****   switch(line_id) {
  48:src/menu.c    ****     case MI_ABOUT_PGM:
  49:src/menu.c    ****       disp_about();
  50:src/menu.c    ****       break;
  51:src/menu.c    **** 
  52:src/menu.c    ****      default:
  53:src/menu.c    ****       ret = MRET_UNIMPL;
  54:src/menu.c    ****       break;
  55:src/menu.c    ****   }
  56:src/menu.c    **** 
  57:src/menu.c    ****   return ret;
  58:src/menu.c    **** }
  59:src/menu.c    **** 
  60:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 60 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  61:src/menu.c    ****   const char * ln;
  40              		.loc 1 61 3 view .LVU1
  62:src/menu.c    **** 
  63:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 63 3 view .LVU2
  64:src/menu.c    **** 
  65:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  66:src/menu.c    **** 
  67:src/menu.c    ****   default:
  68:src/menu.c    ****     ln = NULL;
  42              		.loc 1 68 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  63:src/menu.c    **** 
  44              		.loc 1 63 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
ARM GAS  /tmp/cc7Wa57o.s 			page 3


  69:src/menu.c    ****     break;
  70:src/menu.c    ****   }
  71:src/menu.c    **** 
  72:src/menu.c    ****   return ln;
  73:src/menu.c    **** }
  46              		.loc 1 73 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 73 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC3
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB37:
  74:src/menu.c    **** 
  75:src/menu.c    **** void disp_about() {
  76:src/menu.c    ****   char title[] = "WP 34S calculator for DM42: v     ";
  77:src/menu.c    **** 
  78:src/menu.c    ****   xcopy ((title + 29), SvnRevision, 4);
  79:src/menu.c    **** 
  80:src/menu.c    ****   lcd_clear_buf();
  81:src/menu.c    ****   lcd_writeClr(t24);
  82:src/menu.c    **** 
  83:src/menu.c    **** 
  84:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  85:src/menu.c    ****   lcd_putsR(t24, title);
  86:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
  87:src/menu.c    ****   t20->newln = 1;
  88:src/menu.c    **** #ifdef TOP_ROW
  89:src/menu.c    ****   lcd_puts(t20, "With longer alpha display and top row,");
  90:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  91:src/menu.c    ****   lcd_puts(t20, "With a longer alpha display,");
  92:src/menu.c    **** #else
  93:src/menu.c    ****   lcd_puts(t20, "Same display layout as the original WP34S,");
  94:src/menu.c    **** #endif
  95:src/menu.c    ****   lcd_puts(t20, "and some annunciators renamed.");
  96:src/menu.c    ****   lcd_puts(t20, "Includes printing, stopwatch,");
  97:src/menu.c    ****   lcd_puts(t20, "entry RPN, extended file handling,");
  98:src/menu.c    ****   lcd_puts(t20, "user-defined menus, and");
  99:src/menu.c    ****   lcd_puts(t20, "complex lock mode.");
 100:src/menu.c    **** 
 101:src/menu.c    ****   t20->y += 5;
 102:src/menu.c    **** 
ARM GAS  /tmp/cc7Wa57o.s 			page 4


 103:src/menu.c    ****   t20->bgfill = 1;
 104:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 105:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 106:src/menu.c    ****   t20->bgfill = 0;
 107:src/menu.c    ****   t20->newln = 0;
 108:src/menu.c    ****   
 109:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
 110:src/menu.c    ****   t24->x = 20;
 111:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 112:src/menu.c    **** 
 113:src/menu.c    ****   lcd_refresh();
 114:src/menu.c    **** 
 115:src/menu.c    ****   wait_for_key_press();
 116:src/menu.c    **** }
 117:src/menu.c    **** 
 118:src/menu.c    **** /*
 119:src/menu.c    ****  * WP34s menu code
 120:src/menu.c    ****  */
 121:src/menu.c    **** 
 122:src/menu.c    **** void set_menu ( menu_name new_menu ) {
 123:src/menu.c    ****   menu_name m = current_menu;
 124:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 125:src/menu.c    ****     current_menu = default_menu;
 126:src/menu.c    ****   }
 127:src/menu.c    ****   else if (new_menu == M_Last) { // go to last menu
 128:src/menu.c    ****     current_menu = last_menu;
 129:src/menu.c    ****   }
 130:src/menu.c    ****   else {
 131:src/menu.c    ****     current_menu = new_menu; // change to new menu
 132:src/menu.c    ****   }
 133:src/menu.c    ****   if ( (m != M_Arrow) && (m != M_Alpha) ) last_menu = m;
 134:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 135:src/menu.c    **** }
 136:src/menu.c    **** 
 137:src/menu.c    **** void set_default_menu () {
 138:src/menu.c    ****   set_menu (default_menu);
 139:src/menu.c    **** }
 140:src/menu.c    **** 
 141:src/menu.c    **** void toggle_default_menu () {
 142:src/menu.c    ****   if (current_menu == M_Blank) {
 143:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 144:src/menu.c    ****     return;
 145:src/menu.c    ****   }
 146:src/menu.c    ****   else if (current_menu == M_Blank2) {
 147:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 148:src/menu.c    ****   }
 149:src/menu.c    ****   else {
 150:src/menu.c    ****     set_default_menu();
 151:src/menu.c    ****   }
 152:src/menu.c    **** }
 153:src/menu.c    **** 
 154:src/menu.c    **** menu_name get_menu () {
 155:src/menu.c    ****   return current_menu;
 156:src/menu.c    **** }
 157:src/menu.c    **** 
 158:src/menu.c    **** menu_name get_last_menu () {
 159:src/menu.c    ****   return last_menu;
ARM GAS  /tmp/cc7Wa57o.s 			page 5


 160:src/menu.c    **** }
 161:src/menu.c    **** 
 162:src/menu.c    **** void display_current_menu () {
 163:src/menu.c    ****   display_menu (get_current_menu_ref());
 164:src/menu.c    **** }
 165:src/menu.c    **** 
 166:src/menu.c    **** void set_last_menu () {
 167:src/menu.c    ****   set_menu (M_Last);
 168:src/menu.c    **** }
 169:src/menu.c    **** 
 170:src/menu.c    **** static unsigned char mdots[200][2];
 171:src/menu.c    **** 
 172:src/menu.c    **** static const struct _menu Menus[] = {
 173:src/menu.c    ****   {
 174:src/menu.c    ****     "M_Blank", // 0
 175:src/menu.c    ****     { 
 176:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 177:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 178:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 179:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 180:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 181:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 182:src/menu.c    ****     }    
 183:src/menu.c    ****   },
 184:src/menu.c    ****   {
 185:src/menu.c    ****     "M_Clear", // 1
 186:src/menu.c    ****     { 
 187:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 188:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 189:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 190:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 191:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 192:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 193:src/menu.c    ****     }    
 194:src/menu.c    ****   },
 195:src/menu.c    ****   {
 196:src/menu.c    ****     "M_Disp", // 2
 197:src/menu.c    ****     { 
 198:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 199:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 200:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 201:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 202:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 203:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 204:src/menu.c    ****     }
 205:src/menu.c    ****   },
 206:src/menu.c    ****   {
 207:src/menu.c    ****     "M_Base", // 3
 208:src/menu.c    ****     { 
 209:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 210:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 211:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 212:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 213:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 214:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 215:src/menu.c    ****     }
 216:src/menu.c    ****   },
ARM GAS  /tmp/cc7Wa57o.s 			page 6


 217:src/menu.c    ****   {
 218:src/menu.c    ****     "M_Angles", // 4
 219:src/menu.c    ****     { 
 220:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 221:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 222:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 223:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 224:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 225:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 226:src/menu.c    ****     }
 227:src/menu.c    ****       
 228:src/menu.c    ****   },
 229:src/menu.c    ****   {
 230:src/menu.c    ****     "M_Misc", // 5
 231:src/menu.c    ****     { 
 232:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 233:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 234:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 235:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 236:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 237:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 238:src/menu.c    ****     }
 239:src/menu.c    ****   },
 240:src/menu.c    ****   {
 241:src/menu.c    ****     "M_Swap", // 6
 242:src/menu.c    ****     { 
 243:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 244:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 245:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 246:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 247:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 248:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 249:src/menu.c    ****     }    
 250:src/menu.c    ****   },
 251:src/menu.c    ****   {
 252:src/menu.c    ****     "M_Program", // 7
 253:src/menu.c    ****     { 
 254:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 255:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 256:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 257:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 258:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 259:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 260:src/menu.c    ****     }
 261:src/menu.c    ****   },
 262:src/menu.c    ****   {
 263:src/menu.c    ****     "M_Setup1", // 8
 264:src/menu.c    ****     { 
 265:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 266:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 267:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 268:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 269:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 270:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 271:src/menu.c    ****     }
 272:src/menu.c    ****   },
 273:src/menu.c    ****   {
ARM GAS  /tmp/cc7Wa57o.s 			page 7


 274:src/menu.c    ****     "M_Arrow", // 9
 275:src/menu.c    ****     { 
 276:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "\015Bin", "\015DEG" },
 277:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "\015Oct", "\015RAD" },
 278:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "\015Dec", "\015Grad" },
 279:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "\015Hex", "\015HMS" },
 280:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 281:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 282:src/menu.c    ****     }
 283:src/menu.c    ****   },
 284:src/menu.c    ****   {
 285:src/menu.c    ****     "M_Flags", // 10
 286:src/menu.c    ****     { 
 287:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
 288:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 289:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 290:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 291:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 292:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 293:src/menu.c    ****     }
 294:src/menu.c    ****   },
 295:src/menu.c    ****   {
 296:src/menu.c    ****     "M_Prob", // 11
 297:src/menu.c    ****     { 
 298:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 299:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 300:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 301:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 302:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 303:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 304:src/menu.c    ****     }
 305:src/menu.c    ****   },
 306:src/menu.c    ****   {
 307:src/menu.c    ****     "M_Stats", // 12
 308:src/menu.c    ****     /*
 309:src/menu.c    ****      *xbar, sd;
 310:src/menu.c    ****      *yhat, xhat;
 311:src/menu.c    ****      *corr, L.R.;
 312:src/menu.c    ****      *best, linear;
 313:src/menu.c    ****      *ln, exp;
 314:src/menu.c    ****      *cmplx, power;
 315:src/menu.c    ****      *No, sums is already on g9.
 316:src/menu.c    ****      */
 317:src/menu.c    ****     { 
 318:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 319:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 320:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 321:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 322:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 323:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 324:src/menu.c    ****     }
 325:src/menu.c    ****   },
 326:src/menu.c    ****   {
 327:src/menu.c    ****     "M_Setup2", // 13
 328:src/menu.c    ****     { 
 329:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 330:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
ARM GAS  /tmp/cc7Wa57o.s 			page 8


 331:src/menu.c    ****       { { K_MULTI, SVPRG }, { K_OP, OP_NIL | OP_PSTO }, "SvCPRG", "PSTO" },
 332:src/menu.c    ****       { { K_MULTI, LDPRG }, { K_OP, OP_NIL | OP_PRCL }, "LdPRG", "PRCL" },
 333:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 334:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 335:src/menu.c    ****     }
 336:src/menu.c    ****   },
 337:src/menu.c    ****   {
 338:src/menu.c    ****     "M_Solve", // 14
 339:src/menu.c    ****     { 
 340:src/menu.c    ****       { { K52, 1 }, { K_OP, RARG_BASEOP(RARG_DERIV)}, "SLV", "f'(x)" },
 341:src/menu.c    ****       { { K52, 2 }, { K_OP, RARG_BASEOP(RARG_2DERIV)}, "\004 dx", "f''(x)" },
 342:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 343:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 344:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 345:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 346:src/menu.c    ****     }
 347:src/menu.c    ****   },
 348:src/menu.c    ****   {
 349:src/menu.c    ****     "M_Blank2", // 15
 350:src/menu.c    ****     { 
 351:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 352:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 353:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 354:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 355:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 356:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 357:src/menu.c    ****     }    
 358:src/menu.c    ****   },
 359:src/menu.c    ****   {
 360:src/menu.c    ****     "M_Alpha", // 16
 361:src/menu.c    ****     { 
 362:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 363:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 364:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 365:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 366:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 367:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 368:src/menu.c    ****     }    
 369:src/menu.c    ****   },
 370:src/menu.c    ****   {
 371:src/menu.c    ****     "M_C_Lock", // 17
 372:src/menu.c    ****     { 
 373:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 374:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 375:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "+/-\006Im", "+/-\006Re" },
 376:src/menu.c    ****       { { K21, 2 }, { K00, 1 }, "Re\027Im", "HYP" },
 377:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 378:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 379:src/menu.c    ****     }    
 380:src/menu.c    ****   },
 381:src/menu.c    ****   {
 382:src/menu.c    ****     "M_Clear_C", // 18
 383:src/menu.c    ****     { 
 384:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 385:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 386:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 387:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, NO_KEY, "CLStk", "" },
ARM GAS  /tmp/cc7Wa57o.s 			page 9


 388:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 389:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 390:src/menu.c    ****     }    
 391:src/menu.c    ****   },
 392:src/menu.c    ****   {
 393:src/menu.c    ****     "M_Swap_C", // 19
 394:src/menu.c    ****     { 
 395:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 396:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 397:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 398:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 399:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 400:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 401:src/menu.c    ****     }    
 402:src/menu.c    ****   },
 403:src/menu.c    ****   {
 404:src/menu.c    ****     "M_Arrow_C", // 20
 405:src/menu.c    ****     { 
 406:src/menu.c    ****       { NO_KEY, { K10, 2 }, "", "DEG" },
 407:src/menu.c    ****       { NO_KEY, { K11, 2 }, "", "RAD" },
 408:src/menu.c    ****       { NO_KEY, { K12, 2 }, "", "Grad" },
 409:src/menu.c    ****       { NO_KEY, { K10, 1 }, "", "\015HMS" },
 410:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 411:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 412:src/menu.c    ****     }
 413:src/menu.c    ****   },
 414:src/menu.c    ****   {
 415:src/menu.c    ****     "M_Prob_C", // 21
 416:src/menu.c    ****     { 
 417:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_CMON | OP_LNGAMMA }, "\024\006!", "\024\006Ln\006\202" },
 418:src/menu.c    ****       { { K_OP, OP_CDYA | OP_COMB }, NO_KEY, "\024\006Cy,x", "" },
 419:src/menu.c    ****       { { K_OP, OP_CDYA | OP_PERM }, NO_KEY, "\024\006Py,x", "" },
 420:src/menu.c    ****       { NO_KEY, NO_KEY , "", "" },
 421:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 422:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 423:src/menu.c    ****     }
 424:src/menu.c    ****   },
 425:src/menu.c    ****   {
 426:src/menu.c    ****     "M_Blank2_C", // 22
 427:src/menu.c    ****     { 
 428:src/menu.c    ****       { { K00, 1 }, NO_KEY, "HYP", "" },
 429:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 430:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 431:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 432:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 433:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 434:src/menu.c    ****     }    
 435:src/menu.c    ****   },
 436:src/menu.c    ****   {
 437:src/menu.c    ****     "M_Misc_C", // 23
 438:src/menu.c    ****     { 
 439:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|z|", "\0242\234" },
 440:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "\024Log\272" },
 441:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "0\015Re", "\024Log\213" },
 442:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "0\015Im", "\024||el" },
 443:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "\024.\034" },
 444:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "\024./" },
ARM GAS  /tmp/cc7Wa57o.s 			page 10


 445:src/menu.c    ****     }
 446:src/menu.c    ****   },
 447:src/menu.c    ****   {
 448:src/menu.c    ****     "M_Usermenu", // 24
 449:src/menu.c    ****     { 
 450:src/menu.c    ****       { { K_OP, 0x0000fb00  }, NO_KEY, "UMEN", "" },
 451:src/menu.c    ****       { { K_OP, 0x314dfb55 }, { K_OP, 0x344dfb55 }, "UM1", "UM4" },
 452:src/menu.c    ****       { { K_OP, 0x324dfb55 }, { K_OP, 0x354dfb55 }, "UM2", "UM5" },
 453:src/menu.c    ****       { { K_OP, 0x334dfb55 }, { K_OP, 0x364dfb55 }, "UM3", "UM6" },
 454:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "" },
 455:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "" },
 456:src/menu.c    ****     }
 457:src/menu.c    ****   },
 458:src/menu.c    ****   {
 459:src/menu.c    ****     "M_Print", // 25
 460:src/menu.c    ****     { 
 461:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_ON  }, { K_OP, OP_NIL | OP_PRINT_OFF }, "\222\006On", "\222\006Of
 462:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_PMODE) }, { K_OP, RARG_BASEOP(RARG_DBLSP) }, "\222\006Mode", "\222
 463:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_PGM }, { K_OP, OP_NIL | OP_PRINT_REGS }, "\222\006Prog", "\222\00
 464:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_STACK }, { K_OP, OP_NIL | OP_PRINT_SIGMA }, "\222\006Stk", "\222\
 465:src/menu.c    ****       { ARROW_KEY, { K_OP, OP_NIL | OP_PRINT_ALPHA }, "--\015", "\222\006\240" },
 466:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PRINT_ADV }, "CPX", "\222\006ADV" },
 467:src/menu.c    ****     }
 468:src/menu.c    ****   },
 469:src/menu.c    **** 
 470:src/menu.c    **** };  
 471:src/menu.c    **** 
 472:src/menu.c    **** /* This code is the set_status_sized code with small changes
 473:src/menu.c    ****  * and non-DM42 code removed.
 474:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 475:src/menu.c    ****  */
 476:src/menu.c    **** #define MENU_WIDTH 32
 477:src/menu.c    **** 
 478:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 478 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 479:src/menu.c    ****   // dotcol is the number of the starting dot column
 480:src/menu.c    ****   // shifted is 1 if shifted
 481:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 481 3 view .LVU8
 482:src/menu.c    **** 
 483:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 484:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 484 3 view .LVU9
 485:src/menu.c    **** 
 486:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 486 3 view .LVU10
 478:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 478 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
ARM GAS  /tmp/cc7Wa57o.s 			page 11


  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 478:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 478 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 487:src/menu.c    ****   int i, j, xmax;
 488:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 488 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
 489:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 490:src/menu.c    **** 
 491:src/menu.c    **** #ifdef RP_PREFIX
 492:src/menu.c    ****   RectPolConv = 0;
  96              		.loc 1 492 15 view .LVU14
  97 000e 494A     		ldr	r2, .L41
  98              	.LVL3:
 488:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  99              		.loc 1 488 18 view .LVU15
 100 0010 B4BF     		ite	lt
 101 0012 01F11F03 		addlt	r3, r1, #31
 102 0016 0B46     		movge	r3, r1
 478:src/menu.c    ****   // dotcol is the number of the starting dot column
 103              		.loc 1 478 13 view .LVU16
 104 0018 0F46     		mov	r7, r1
 105              	.LVL4:
 487:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
 106              		.loc 1 487 3 is_stmt 1 view .LVU17
 488:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 107              		.loc 1 488 3 view .LVU18
 108              		.loc 1 492 15 is_stmt 0 view .LVU19
 109 001a 0021     		movs	r1, #0
 110              	.LVL5:
 111              		.loc 1 492 15 view .LVU20
 112 001c 1160     		str	r1, [r2]
 493:src/menu.c    **** #endif
 494:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 113              		.loc 1 494 10 view .LVU21
 114 001e 019A     		ldr	r2, [sp, #4]
 115 0020 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 488:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 116              		.loc 1 488 30 view .LVU22
 117 0022 23F01F03 		bic	r3, r3, #31
 488:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 118              		.loc 1 488 8 view .LVU23
 119 0026 03F12009 		add	r9, r3, #32
 120              	.LVL6:
 489:src/menu.c    **** 
 121              		.loc 1 489 3 is_stmt 1 view .LVU24
 492:src/menu.c    **** #endif
 122              		.loc 1 492 3 view .LVU25
 123              		.loc 1 494 3 view .LVU26
 124              		.loc 1 494 9 view .LVU27
ARM GAS  /tmp/cc7Wa57o.s 			page 12


 125 002a 002D     		cmp	r5, #0
 126 002c 78D0     		beq	.L7
 127              		.loc 1 494 23 is_stmt 0 view .LVU28
 128 002e 4F45     		cmp	r7, r9
 129 0030 76DC     		bgt	.L7
 130              	.LBB39:
 495:src/menu.c    ****     int c;
 496:src/menu.c    ****     int width;
 497:src/menu.c    ****     unsigned char cmap[6];
 498:src/menu.c    **** 
 499:src/menu.c    ****     int real_width;
 500:src/menu.c    ****     int current_smallp;
 501:src/menu.c    **** 
 502:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 503:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 504:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 505:src/menu.c    ****     //           01 -> (not used)
 506:src/menu.c    ****     //           10 -> use big font
 507:src/menu.c    ****     //           11 -> use small font
 508:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 509:src/menu.c    ****     if (str[0] == '\007') {
 131              		.loc 1 509 8 view .LVU29
 132 0032 072D     		cmp	r5, #7
 133              	.LBE39:
 484:src/menu.c    **** 
 134              		.loc 1 484 7 view .LVU30
 135 0034 4FF0FF04 		mov	r4, #255
 136              	.LVL7:
 137              	.LBB56:
 495:src/menu.c    ****     int c;
 138              		.loc 1 495 5 is_stmt 1 view .LVU31
 496:src/menu.c    ****     unsigned char cmap[6];
 139              		.loc 1 496 5 view .LVU32
 497:src/menu.c    **** 
 140              		.loc 1 497 5 view .LVU33
 499:src/menu.c    ****     int current_smallp;
 141              		.loc 1 499 5 view .LVU34
 500:src/menu.c    **** 
 142              		.loc 1 500 5 view .LVU35
 143              		.loc 1 509 5 view .LVU36
 510:src/menu.c    ****       width = str[1] & 0x1F;
 511:src/menu.c    ****       switch (str[1] & 0x60) {
 512:src/menu.c    ****       default:
 513:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 514:src/menu.c    **** 	break;
 515:src/menu.c    ****       case 0x40:	current_smallp = 0;
 516:src/menu.c    **** 	break;
 517:src/menu.c    ****       case 0x60:	current_smallp = 1;
 144              		.loc 1 517 33 is_stmt 0 view .LVU37
 145 0038 4FF0010A 		mov	r10, #1
 509:src/menu.c    ****       width = str[1] & 0x1F;
 146              		.loc 1 509 8 view .LVU38
 147 003c 64D1     		bne	.L11
 148              	.LVL8:
 149              	.L39:
 510:src/menu.c    ****       width = str[1] & 0x1F;
 150              		.loc 1 510 7 is_stmt 1 view .LVU39
ARM GAS  /tmp/cc7Wa57o.s 			page 13


 510:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 510 18 is_stmt 0 view .LVU40
 152 003e 019B     		ldr	r3, [sp, #4]
 153 0040 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 154 0042 06F06003 		and	r3, r6, #96
 511:src/menu.c    ****       default:
 155              		.loc 1 511 7 view .LVU41
 156 0046 402B     		cmp	r3, #64
 510:src/menu.c    ****       width = str[1] & 0x1F;
 157              		.loc 1 510 13 view .LVU42
 158 0048 06F01F06 		and	r6, r6, #31
 159              	.LVL9:
 511:src/menu.c    ****       default:
 160              		.loc 1 511 7 is_stmt 1 view .LVU43
 161 004c 6CD0     		beq	.L34
 162 004e 602B     		cmp	r3, #96
 163 0050 6AD1     		bne	.L34
 164              		.loc 1 517 18 view .LVU44
 165              	.LVL10:
 518:src/menu.c    **** 	break;
 166              		.loc 1 518 2 view .LVU45
 519:src/menu.c    ****       }
 520:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 167              		.loc 1 520 7 view .LVU46
 168              		.loc 1 520 11 is_stmt 0 view .LVU47
 169 0052 019B     		ldr	r3, [sp, #4]
 170 0054 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 517:src/menu.c    **** 	break;
 171              		.loc 1 517 33 view .LVU48
 172 0056 0123     		movs	r3, #1
 173 0058 0093     		str	r3, [sp]
 174 005a 00F58075 		add	r5, r0, #256
 175              	.LVL11:
 176              	.L15:
 521:src/menu.c    ****       str += 3;
 177              		.loc 1 521 7 is_stmt 1 view .LVU49
 522:src/menu.c    **** 
 523:src/menu.c    ****       real_width = charlengths(c);
 178              		.loc 1 523 20 is_stmt 0 view .LVU50
 179 005e 2846     		mov	r0, r5
 180 0060 FFF7FEFF 		bl	charlengths
 181              	.LVL12:
 521:src/menu.c    ****       str += 3;
 182              		.loc 1 521 11 view .LVU51
 183 0064 019B     		ldr	r3, [sp, #4]
 184 0066 0333     		adds	r3, r3, #3
 185 0068 0193     		str	r3, [sp, #4]
 186              	.LVL13:
 187              		.loc 1 523 7 is_stmt 1 view .LVU52
 524:src/menu.c    ****     } else {
 525:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 526:src/menu.c    ****       real_width = width = charlengths(c);
 527:src/menu.c    ****       current_smallp = smallp;
 528:src/menu.c    ****     }
 529:src/menu.c    **** 
 530:src/menu.c    ****     if (x + real_width > xmax)
 188              		.loc 1 530 5 view .LVU53
ARM GAS  /tmp/cc7Wa57o.s 			page 14


 189              		.loc 1 530 11 is_stmt 0 view .LVU54
 190 006a C319     		adds	r3, r0, r7
 191              	.LVL14:
 192              		.loc 1 530 8 view .LVU55
 193 006c 9945     		cmp	r9, r3
 194 006e 57DB     		blt	.L7
 195              	.L40:
 531:src/menu.c    ****       break;
 532:src/menu.c    **** 
 533:src/menu.c    ****     if (posns_state != current_smallp) {
 196              		.loc 1 533 5 is_stmt 1 view .LVU56
 197              		.loc 1 533 8 is_stmt 0 view .LVU57
 198 0070 009B     		ldr	r3, [sp]
 199 0072 A342     		cmp	r3, r4
 534:src/menu.c    ****       findlengths(posns, current_smallp);
 200              		.loc 1 534 7 view .LVU58
 201 0074 07AB     		add	r3, sp, #28
 533:src/menu.c    ****       findlengths(posns, current_smallp);
 202              		.loc 1 533 8 view .LVU59
 203 0076 05D0     		beq	.L18
 204              		.loc 1 534 7 is_stmt 1 view .LVU60
 205 0078 1846     		mov	r0, r3
 206              	.LVL15:
 207              		.loc 1 534 7 is_stmt 0 view .LVU61
 208 007a 0099     		ldr	r1, [sp]
 209 007c 0393     		str	r3, [sp, #12]
 210 007e FFF7FEFF 		bl	findlengths
 211              	.LVL16:
 212 0082 039B     		ldr	r3, [sp, #12]
 535:src/menu.c    ****       posns_state = current_smallp;
 213              		.loc 1 535 7 is_stmt 1 view .LVU62
 214              	.LVL17:
 215              	.L18:
 536:src/menu.c    ****     }
 537:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 216              		.loc 1 537 5 view .LVU63
 217 0084 009A     		ldr	r2, [sp]
 218 0086 2846     		mov	r0, r5
 219 0088 05A9     		add	r1, sp, #20
 220 008a FFF7FEFF 		bl	unpackchar
 221              	.LVL18:
 538:src/menu.c    **** 
 539:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 222              		.loc 1 539 5 view .LVU64
 223              		.loc 1 539 15 view .LVU65
 224 008e 029B     		ldr	r3, [sp, #8]
 225 0090 03EB4704 		add	r4, r3, r7, lsl #1
 226 0094 284B     		ldr	r3, .L41+4
 227 0096 0DF1140B 		add	fp, sp, #20
 228 009a 1C44     		add	r4, r4, r3
 537:src/menu.c    **** 
 229              		.loc 1 537 5 is_stmt 0 view .LVU66
 230 009c 4FF0050E 		mov	lr, #5
 231 00a0 A9EB0705 		sub	r5, r9, r7
 232              	.LVL19:
 233              	.L19:
 540:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
ARM GAS  /tmp/cc7Wa57o.s 			page 15


 234              		.loc 1 540 17 is_stmt 1 view .LVU67
 235              		.loc 1 540 7 is_stmt 0 view .LVU68
 236 00a4 002E     		cmp	r6, #0
 237 00a6 1FDD     		ble	.L25
 541:src/menu.c    **** 	if (x+j >= xmax)
 238              		.loc 1 541 2 is_stmt 1 view .LVU69
 239              		.loc 1 541 5 is_stmt 0 view .LVU70
 240 00a8 B945     		cmp	r9, r7
 241 00aa 1DDD     		ble	.L25
 242              	.LBB40:
 243              	.LBB41:
 244              	.LBB42:
 245              	.LBB43:
 542:src/menu.c    **** 	  break;
 543:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 544:src/menu.c    ****       }
 545:src/menu.c    ****     }
 546:src/menu.c    ****     x += width;
 547:src/menu.c    ****   }
 548:src/menu.c    **** }
 549:src/menu.c    **** 
 550:src/menu.c    **** 
 551:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 552:src/menu.c    **** 
 553:src/menu.c    **** int pixel_length(const char *s, int smallp)
 554:src/menu.c    **** {
 555:src/menu.c    ****   int len = 0;
 556:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 557:src/menu.c    ****   while (*s != '\0') {
 558:src/menu.c    ****     if (s[0] == '\007') {
 559:src/menu.c    ****       len += s[1] & 0x1F;
 560:src/menu.c    ****       s += 3;
 561:src/menu.c    ****       continue;
 562:src/menu.c    ****     }
 563:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 564:src/menu.c    ****   }
 565:src/menu.c    ****   return len;
 566:src/menu.c    **** }
 567:src/menu.c    **** */
 568:src/menu.c    **** 
 569:src/menu.c    **** 
 570:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 571:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 572:src/menu.c    ****   if (on) {
 573:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 574:src/menu.c    ****   }
 575:src/menu.c    ****   else {
 576:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 246              		.loc 1 576 25 view .LVU71
 247 00ac 0AFA0EFC 		lsl	ip, r10, lr
 248              		.loc 1 576 17 view .LVU72
 249 00b0 4FFA8CFC 		sxtb	ip, ip
 250              	.LBE43:
 251              	.LBE42:
 252              	.LBE41:
 253              	.LBE40:
 543:src/menu.c    ****       }
ARM GAS  /tmp/cc7Wa57o.s 			page 16


 254              		.loc 1 543 31 view .LVU73
 255 00b4 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 256              	.LBB53:
 257              	.LBB50:
 258              	.LBB47:
 259              	.LBB44:
 260              		.loc 1 576 17 view .LVU74
 261 00b8 6FEA0C08 		mvn	r8, ip
 262              	.LBE44:
 263              	.LBE47:
 264              	.LBE50:
 265              	.LBE53:
 540:src/menu.c    **** 	if (x+j >= xmax)
 266              		.loc 1 540 13 view .LVU75
 267 00bc 0023     		movs	r3, #0
 268 00be 01E0     		b	.L20
 269              	.LVL20:
 270              	.L24:
 541:src/menu.c    **** 	  break;
 271              		.loc 1 541 5 view .LVU76
 272 00c0 9D42     		cmp	r5, r3
 273 00c2 11D0     		beq	.L25
 274              	.LVL21:
 275              	.L20:
 543:src/menu.c    ****       }
 276              		.loc 1 543 2 is_stmt 1 view .LVU77
 277              	.LBB54:
 278              	.LBI40:
 570:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 279              		.loc 1 570 6 view .LVU78
 280              	.LBB51:
 571:src/menu.c    ****   if (on) {
 281              		.loc 1 571 3 view .LVU79
 282              	.LBB48:
 283              	.LBI42:
 570:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 570 6 view .LVU80
 285              	.LBB45:
 572:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 286              		.loc 1 572 3 view .LVU81
 287              	.LBE45:
 288              	.LBE48:
 571:src/menu.c    ****   if (on) {
 289              		.loc 1 571 6 is_stmt 0 view .LVU82
 290 00c4 DA19     		adds	r2, r3, r7
 291              	.LVL22:
 571:src/menu.c    ****   if (on) {
 292              		.loc 1 571 6 view .LVU83
 293 00c6 C72A     		cmp	r2, #199
 294              	.LBE51:
 295              	.LBE54:
 543:src/menu.c    ****       }
 296              		.loc 1 543 46 view .LVU84
 297 00c8 40FA03F1 		asr	r1, r0, r3
 298              	.LBB55:
 299              	.LBB52:
 571:src/menu.c    ****   if (on) {
ARM GAS  /tmp/cc7Wa57o.s 			page 17


 300              		.loc 1 571 6 view .LVU85
 301 00cc 09D8     		bhi	.L22
 302              	.LBB49:
 303              	.LBB46:
 573:src/menu.c    ****   }
 304              		.loc 1 573 5 is_stmt 1 view .LVU86
 305              		.loc 1 576 5 view .LVU87
 573:src/menu.c    ****   }
 306              		.loc 1 573 17 is_stmt 0 view .LVU88
 307 00ce 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 308              	.LVL23:
 572:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 309              		.loc 1 572 6 view .LVU89
 310 00d2 C907     		lsls	r1, r1, #31
 573:src/menu.c    ****   }
 311              		.loc 1 573 17 view .LVU90
 312 00d4 4CBF     		ite	mi
 313 00d6 4CEA0202 		orrmi	r2, ip, r2
 314              		.loc 1 576 17 view .LVU91
 315 00da 08EA0202 		andpl	r2, r8, r2
 316 00de 04F81320 		strb	r2, [r4, r3, lsl #1]
 317              	.L22:
 318              	.LBE46:
 319              	.LBE49:
 320              	.LBE52:
 321              	.LBE55:
 541:src/menu.c    **** 	  break;
 322              		.loc 1 541 2 is_stmt 1 view .LVU92
 323              	.LVL24:
 540:src/menu.c    **** 	if (x+j >= xmax)
 324              		.loc 1 540 26 view .LVU93
 540:src/menu.c    **** 	if (x+j >= xmax)
 325              		.loc 1 540 27 is_stmt 0 view .LVU94
 326 00e2 0133     		adds	r3, r3, #1
 327              	.LVL25:
 540:src/menu.c    **** 	if (x+j >= xmax)
 328              		.loc 1 540 17 is_stmt 1 view .LVU95
 540:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 540 7 is_stmt 0 view .LVU96
 330 00e4 B342     		cmp	r3, r6
 331 00e6 EBD1     		bne	.L24
 332              	.LVL26:
 333              	.L25:
 539:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 334              		.loc 1 539 20 is_stmt 1 view .LVU97
 539:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 335              		.loc 1 539 15 view .LVU98
 336 00e8 0EF1FF3E 		add	lr, lr, #-1
 539:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 337              		.loc 1 539 5 is_stmt 0 view .LVU99
 338 00ec BEF1FF3F 		cmp	lr, #-1
 339 00f0 0BF1010B 		add	fp, fp, #1
 340              	.LVL27:
 539:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 341              		.loc 1 539 5 view .LVU100
 342 00f4 D6D1     		bne	.L19
 546:src/menu.c    ****   }
ARM GAS  /tmp/cc7Wa57o.s 			page 18


 343              		.loc 1 546 5 is_stmt 1 view .LVU101
 344              	.LBE56:
 494:src/menu.c    ****     int c;
 345              		.loc 1 494 10 is_stmt 0 view .LVU102
 346 00f6 019B     		ldr	r3, [sp, #4]
 347 00f8 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 348              	.LBB57:
 546:src/menu.c    ****   }
 349              		.loc 1 546 7 view .LVU103
 350 00fa 3744     		add	r7, r7, r6
 351              	.LVL28:
 546:src/menu.c    ****   }
 352              		.loc 1 546 7 view .LVU104
 353              	.LBE57:
 494:src/menu.c    ****     int c;
 354              		.loc 1 494 9 is_stmt 1 view .LVU105
 355 00fc 85B1     		cbz	r5, .L7
 494:src/menu.c    ****     int c;
 356              		.loc 1 494 23 is_stmt 0 view .LVU106
 357 00fe B945     		cmp	r9, r7
 358 0100 0EDB     		blt	.L7
 359              	.LBB58:
 509:src/menu.c    ****       width = str[1] & 0x1F;
 360              		.loc 1 509 8 view .LVU107
 361 0102 072D     		cmp	r5, #7
 362              	.LBE58:
 363 0104 009C     		ldr	r4, [sp]
 364              	.LBB59:
 495:src/menu.c    ****     int width;
 365              		.loc 1 495 5 is_stmt 1 view .LVU108
 496:src/menu.c    ****     unsigned char cmap[6];
 366              		.loc 1 496 5 view .LVU109
 497:src/menu.c    **** 
 367              		.loc 1 497 5 view .LVU110
 499:src/menu.c    ****     int current_smallp;
 368              		.loc 1 499 5 view .LVU111
 500:src/menu.c    **** 
 369              		.loc 1 500 5 view .LVU112
 509:src/menu.c    ****       width = str[1] & 0x1F;
 370              		.loc 1 509 5 view .LVU113
 509:src/menu.c    ****       width = str[1] & 0x1F;
 371              		.loc 1 509 8 is_stmt 0 view .LVU114
 372 0106 9AD0     		beq	.L39
 373              	.LVL29:
 374              	.L11:
 525:src/menu.c    ****       real_width = width = charlengths(c);
 375              		.loc 1 525 7 is_stmt 1 view .LVU115
 526:src/menu.c    ****       current_smallp = smallp;
 376              		.loc 1 526 28 is_stmt 0 view .LVU116
 377 0108 2846     		mov	r0, r5
 378 010a FFF7FEFF 		bl	charlengths
 379              	.LVL30:
 525:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 525 31 view .LVU117
 381 010e 019B     		ldr	r3, [sp, #4]
 382 0110 0133     		adds	r3, r3, #1
 383 0112 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/cc7Wa57o.s 			page 19


 384              	.LVL31:
 526:src/menu.c    ****       current_smallp = smallp;
 385              		.loc 1 526 7 is_stmt 1 view .LVU118
 527:src/menu.c    ****     }
 386              		.loc 1 527 7 view .LVU119
 527:src/menu.c    ****     }
 387              		.loc 1 527 22 is_stmt 0 view .LVU120
 388 0114 0023     		movs	r3, #0
 389              	.LVL32:
 527:src/menu.c    ****     }
 390              		.loc 1 527 22 view .LVU121
 391 0116 0093     		str	r3, [sp]
 392              	.LVL33:
 530:src/menu.c    ****       break;
 393              		.loc 1 530 11 view .LVU122
 394 0118 C319     		adds	r3, r0, r7
 395              	.LVL34:
 530:src/menu.c    ****       break;
 396              		.loc 1 530 8 view .LVU123
 397 011a 9945     		cmp	r9, r3
 526:src/menu.c    ****       current_smallp = smallp;
 398              		.loc 1 526 28 view .LVU124
 399 011c 0646     		mov	r6, r0
 530:src/menu.c    ****       break;
 400              		.loc 1 530 5 is_stmt 1 view .LVU125
 530:src/menu.c    ****       break;
 401              		.loc 1 530 8 is_stmt 0 view .LVU126
 402 011e A7DA     		bge	.L40
 403              	.LVL35:
 404              	.L7:
 530:src/menu.c    ****       break;
 405              		.loc 1 530 8 view .LVU127
 406              	.LBE59:
 548:src/menu.c    **** 
 407              		.loc 1 548 1 view .LVU128
 408 0120 0DF5097D 		add	sp, sp, #548
 409              		.cfi_remember_state
 410              		.cfi_def_cfa_offset 36
 411              		@ sp needed
 412 0124 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 413              	.LVL36:
 414              	.L34:
 415              		.cfi_restore_state
 416              	.LBB60:
 520:src/menu.c    ****       str += 3;
 417              		.loc 1 520 7 is_stmt 1 view .LVU129
 520:src/menu.c    ****       str += 3;
 418              		.loc 1 520 11 is_stmt 0 view .LVU130
 419 0128 019B     		ldr	r3, [sp, #4]
 420 012a 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 513:src/menu.c    **** 	break;
 421              		.loc 1 513 33 view .LVU131
 422 012c 0023     		movs	r3, #0
 423 012e 0093     		str	r3, [sp]
 424 0130 95E7     		b	.L15
 425              	.L42:
 426 0132 00BF     		.align	2
ARM GAS  /tmp/cc7Wa57o.s 			page 20


 427              	.L41:
 428 0134 00000000 		.word	RectPolConv
 429 0138 00000000 		.word	.LANCHOR0
 430              	.LBE60:
 431              		.cfi_endproc
 432              	.LFE37:
 434              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 435              		.align	2
 436              	.LC5:
 437 0000 57697468 		.ascii	"With longer alpha display and top row,\000"
 437      206C6F6E 
 437      67657220 
 437      616C7068 
 437      61206469 
 438 0027 00       		.align	2
 439              	.LC6:
 440 0028 616E6420 		.ascii	"and some annunciators renamed.\000"
 440      736F6D65 
 440      20616E6E 
 440      756E6369 
 440      61746F72 
 441 0047 00       		.align	2
 442              	.LC7:
 443 0048 496E636C 		.ascii	"Includes printing, stopwatch,\000"
 443      75646573 
 443      20707269 
 443      6E74696E 
 443      672C2073 
 444 0066 0000     		.align	2
 445              	.LC8:
 446 0068 656E7472 		.ascii	"entry RPN, extended file handling,\000"
 446      79205250 
 446      4E2C2065 
 446      7874656E 
 446      64656420 
 447 008b 00       		.align	2
 448              	.LC9:
 449 008c 75736572 		.ascii	"user-defined menus, and\000"
 449      2D646566 
 449      696E6564 
 449      206D656E 
 449      75732C20 
 450              		.align	2
 451              	.LC10:
 452 00a4 636F6D70 		.ascii	"complex lock mode.\000"
 452      6C657820 
 452      6C6F636B 
 452      206D6F64 
 452      652E00
 453 00b7 00       		.align	2
 454              	.LC11:
 455 00b8 4E656974 		.ascii	"Neither provided by          \000"
 455      68657220 
 455      70726F76 
 455      69646564 
 455      20627920 
 456 00d6 0000     		.align	2
ARM GAS  /tmp/cc7Wa57o.s 			page 21


 457              	.LC12:
 458 00d8 6E6F7220 		.ascii	"nor supported by SwissMicros.\000"
 458      73757070 
 458      6F727465 
 458      64206279 
 458      20537769 
 459 00f6 0000     		.align	2
 460              	.LC13:
 461 00f8 20202020 		.ascii	"    Press EXIT key to continue...\000"
 461      50726573 
 461      73204558 
 461      4954206B 
 461      65792074 
 462 011a 0000     		.align	2
 463              	.LC4:
 464 011c 57502033 		.ascii	"WP 34S calculator for DM42: v     \000"
 464      34532063 
 464      616C6375 
 464      6C61746F 
 464      7220666F 
 465              		.section	.text.disp_about,"ax",%progbits
 466              		.align	1
 467              		.p2align 2,,3
 468              		.global	disp_about
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 472              		.fpu fpv4-sp-d16
 474              	disp_about:
 475              	.LFB5:
  75:src/menu.c    ****   char title[] = "WP 34S calculator for DM42: v     ";
 476              		.loc 1 75 19 is_stmt 1 view -0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 40
 479              		@ frame_needed = 0, uses_anonymous_args = 0
  76:src/menu.c    **** 
 480              		.loc 1 76 3 view .LVU133
  75:src/menu.c    ****   char title[] = "WP 34S calculator for DM42: v     ";
 481              		.loc 1 75 19 is_stmt 0 view .LVU134
 482 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 483              		.cfi_def_cfa_offset 24
 484              		.cfi_offset 4, -24
 485              		.cfi_offset 5, -20
 486              		.cfi_offset 6, -16
 487              		.cfi_offset 7, -12
 488              		.cfi_offset 8, -8
 489              		.cfi_offset 14, -4
  76:src/menu.c    **** 
 490              		.loc 1 76 8 view .LVU135
 491 0004 334E     		ldr	r6, .L45
  81:src/menu.c    **** 
 492              		.loc 1 81 3 view .LVU136
 493 0006 344C     		ldr	r4, .L45+4
  84:src/menu.c    ****   lcd_putsR(t24, title);
 494              		.loc 1 84 3 view .LVU137
 495 0008 DFF81481 		ldr	r8, .L45+76
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
ARM GAS  /tmp/cc7Wa57o.s 			page 22


 496              		.loc 1 85 3 view .LVU138
 497 000c 334F     		ldr	r7, .L45+8
  76:src/menu.c    **** 
 498              		.loc 1 76 8 view .LVU139
 499 000e 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
  75:src/menu.c    ****   char title[] = "WP 34S calculator for DM42: v     ";
 500              		.loc 1 75 19 view .LVU140
 501 0010 8AB0     		sub	sp, sp, #40
 502              		.cfi_def_cfa_offset 64
  76:src/menu.c    **** 
 503              		.loc 1 76 8 view .LVU141
 504 0012 01AD     		add	r5, sp, #4
 505 0014 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 506 0016 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 507 0018 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 508 001a 3368     		ldr	r3, [r6]
 509 001c 25F8023B 		strh	r3, [r5], #2	@ movhi
  78:src/menu.c    **** 
 510              		.loc 1 78 3 view .LVU142
 511 0020 2F49     		ldr	r1, .L45+12
 512 0022 0422     		movs	r2, #4
  76:src/menu.c    **** 
 513              		.loc 1 76 8 view .LVU143
 514 0024 1B0C     		lsrs	r3, r3, #16
  78:src/menu.c    **** 
 515              		.loc 1 78 3 view .LVU144
 516 0026 0DF12100 		add	r0, sp, #33
  76:src/menu.c    **** 
 517              		.loc 1 76 8 view .LVU145
 518 002a 2B70     		strb	r3, [r5]
  78:src/menu.c    **** 
 519              		.loc 1 78 3 is_stmt 1 view .LVU146
 520 002c FFF7FEFF 		bl	xcopy
 521              	.LVL37:
  80:src/menu.c    ****   lcd_writeClr(t24);
 522              		.loc 1 80 3 view .LVU147
 523 0030 2C4B     		ldr	r3, .L45+16
 524 0032 9847     		blx	r3
 525              	.LVL38:
  81:src/menu.c    **** 
 526              		.loc 1 81 3 view .LVU148
 527 0034 2C4B     		ldr	r3, .L45+20
 528 0036 606B     		ldr	r0, [r4, #52]
 529 0038 9847     		blx	r3
 530              	.LVL39:
  84:src/menu.c    ****   lcd_putsR(t24, title);
 531              		.loc 1 84 3 view .LVU149
 532 003a 606B     		ldr	r0, [r4, #52]
 533 003c 0522     		movs	r2, #5
 534 003e 0021     		movs	r1, #0
 535 0040 C047     		blx	r8
 536              	.LVL40:
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 537              		.loc 1 85 3 view .LVU150
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 538              		.loc 1 85 3 view .LVU151
 539 0042 606B     		ldr	r0, [r4, #52]
ARM GAS  /tmp/cc7Wa57o.s 			page 23


 540 0044 0125     		movs	r5, #1
 541 0046 4574     		strb	r5, [r0, #17]
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 542              		.loc 1 85 3 view .LVU152
 543 0048 01A9     		add	r1, sp, #4
 544 004a B847     		blx	r7
 545              	.LVL41:
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 546              		.loc 1 85 3 view .LVU153
 547 004c 636B     		ldr	r3, [r4, #52]
 548 004e 0026     		movs	r6, #0
 549 0050 5E74     		strb	r6, [r3, #17]
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 550              		.loc 1 85 3 view .LVU154
  86:src/menu.c    ****   t20->newln = 1;
 551              		.loc 1 86 3 view .LVU155
 552 0052 B3F90620 		ldrsh	r2, [r3, #6]
 553 0056 B3F90410 		ldrsh	r1, [r3, #4]
 554 005a 206B     		ldr	r0, [r4, #48]
 555 005c C047     		blx	r8
 556              	.LVL42:
  87:src/menu.c    **** #ifdef TOP_ROW
 557              		.loc 1 87 3 view .LVU156
 558 005e 206B     		ldr	r0, [r4, #48]
  89:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 559              		.loc 1 89 3 is_stmt 0 view .LVU157
 560 0060 2249     		ldr	r1, .L45+24
  87:src/menu.c    **** #ifdef TOP_ROW
 561              		.loc 1 87 14 view .LVU158
 562 0062 0575     		strb	r5, [r0, #20]
  89:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 563              		.loc 1 89 3 is_stmt 1 view .LVU159
 564 0064 B847     		blx	r7
 565              	.LVL43:
  95:src/menu.c    ****   lcd_puts(t20, "Includes printing, stopwatch,");
 566              		.loc 1 95 3 view .LVU160
 567 0066 206B     		ldr	r0, [r4, #48]
 568 0068 2149     		ldr	r1, .L45+28
 569 006a B847     		blx	r7
 570              	.LVL44:
  96:src/menu.c    ****   lcd_puts(t20, "entry RPN, extended file handling,");
 571              		.loc 1 96 3 view .LVU161
 572 006c 206B     		ldr	r0, [r4, #48]
 573 006e 2149     		ldr	r1, .L45+32
 574 0070 B847     		blx	r7
 575              	.LVL45:
  97:src/menu.c    ****   lcd_puts(t20, "user-defined menus, and");
 576              		.loc 1 97 3 view .LVU162
 577 0072 206B     		ldr	r0, [r4, #48]
 578 0074 2049     		ldr	r1, .L45+36
 579 0076 B847     		blx	r7
 580              	.LVL46:
  98:src/menu.c    ****   lcd_puts(t20, "complex lock mode.");
 581              		.loc 1 98 3 view .LVU163
 582 0078 206B     		ldr	r0, [r4, #48]
 583 007a 2049     		ldr	r1, .L45+40
 584 007c B847     		blx	r7
ARM GAS  /tmp/cc7Wa57o.s 			page 24


 585              	.LVL47:
  99:src/menu.c    **** 
 586              		.loc 1 99 3 view .LVU164
 587 007e 206B     		ldr	r0, [r4, #48]
 588 0080 1F49     		ldr	r1, .L45+44
 589 0082 B847     		blx	r7
 590              	.LVL48:
 101:src/menu.c    **** 
 591              		.loc 1 101 3 view .LVU165
 592 0084 206B     		ldr	r0, [r4, #48]
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 593              		.loc 1 104 3 is_stmt 0 view .LVU166
 594 0086 1F49     		ldr	r1, .L45+48
 101:src/menu.c    **** 
 595              		.loc 1 101 10 view .LVU167
 596 0088 C388     		ldrh	r3, [r0, #6]
 103:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 597              		.loc 1 103 15 view .LVU168
 598 008a 8574     		strb	r5, [r0, #18]
 101:src/menu.c    **** 
 599              		.loc 1 101 10 view .LVU169
 600 008c 0533     		adds	r3, r3, #5
 601 008e C380     		strh	r3, [r0, #6]	@ movhi
 103:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 602              		.loc 1 103 3 is_stmt 1 view .LVU170
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 603              		.loc 1 104 3 view .LVU171
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 604              		.loc 1 104 3 view .LVU172
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 605              		.loc 1 104 3 view .LVU173
 606 0090 4574     		strb	r5, [r0, #17]
 607 0092 B847     		blx	r7
 608              	.LVL49:
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 609              		.loc 1 104 3 view .LVU174
 610 0094 206B     		ldr	r0, [r4, #48]
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 611              		.loc 1 104 3 view .LVU175
 105:src/menu.c    ****   t20->bgfill = 0;
 612              		.loc 1 105 3 view .LVU176
 105:src/menu.c    ****   t20->bgfill = 0;
 613              		.loc 1 105 3 view .LVU177
 614 0096 1C49     		ldr	r1, .L45+52
 615 0098 4574     		strb	r5, [r0, #17]
 105:src/menu.c    ****   t20->bgfill = 0;
 616              		.loc 1 105 3 view .LVU178
 617 009a B847     		blx	r7
 618              	.LVL50:
 105:src/menu.c    ****   t20->bgfill = 0;
 619              		.loc 1 105 3 view .LVU179
 620 009c 236B     		ldr	r3, [r4, #48]
 109:src/menu.c    ****   t24->x = 20;
 621              		.loc 1 109 20 is_stmt 0 view .LVU180
 622 009e 1B4A     		ldr	r2, .L45+56
 105:src/menu.c    ****   t20->bgfill = 0;
 623              		.loc 1 105 3 view .LVU181
ARM GAS  /tmp/cc7Wa57o.s 			page 25


 624 00a0 5E74     		strb	r6, [r3, #17]
 105:src/menu.c    ****   t20->bgfill = 0;
 625              		.loc 1 105 3 is_stmt 1 view .LVU182
 106:src/menu.c    ****   t20->newln = 0;
 626              		.loc 1 106 3 view .LVU183
 106:src/menu.c    ****   t20->newln = 0;
 627              		.loc 1 106 15 is_stmt 0 view .LVU184
 628 00a2 9E74     		strb	r6, [r3, #18]
 107:src/menu.c    ****   
 629              		.loc 1 107 3 is_stmt 1 view .LVU185
 107:src/menu.c    ****   
 630              		.loc 1 107 14 is_stmt 0 view .LVU186
 631 00a4 1E75     		strb	r6, [r3, #20]
 109:src/menu.c    ****   t24->x = 20;
 632              		.loc 1 109 3 is_stmt 1 view .LVU187
 109:src/menu.c    ****   t24->x = 20;
 633              		.loc 1 109 20 is_stmt 0 view .LVU188
 634 00a6 606B     		ldr	r0, [r4, #52]
 635 00a8 9047     		blx	r2
 636              	.LVL51:
 109:src/menu.c    ****   t24->x = 20;
 637              		.loc 1 109 3 view .LVU189
 638 00aa 636B     		ldr	r3, [r4, #52]
 111:src/menu.c    **** 
 639              		.loc 1 111 3 view .LVU190
 640 00ac 184A     		ldr	r2, .L45+60
 641 00ae 5D74     		strb	r5, [r3, #17]
 109:src/menu.c    ****   t24->x = 20;
 642              		.loc 1 109 39 view .LVU191
 643 00b0 C0F1EB00 		rsb	r0, r0, #235
 110:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 644              		.loc 1 110 10 view .LVU192
 645 00b4 1421     		movs	r1, #20
 109:src/menu.c    ****   t24->x = 20;
 646              		.loc 1 109 10 view .LVU193
 647 00b6 D880     		strh	r0, [r3, #6]	@ movhi
 110:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 648              		.loc 1 110 3 is_stmt 1 view .LVU194
 110:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 649              		.loc 1 110 10 is_stmt 0 view .LVU195
 650 00b8 9980     		strh	r1, [r3, #4]	@ movhi
 111:src/menu.c    **** 
 651              		.loc 1 111 3 is_stmt 1 view .LVU196
 111:src/menu.c    **** 
 652              		.loc 1 111 3 view .LVU197
 111:src/menu.c    **** 
 653              		.loc 1 111 3 view .LVU198
 654 00ba 1846     		mov	r0, r3
 655 00bc 1549     		ldr	r1, .L45+64
 656 00be 9047     		blx	r2
 657              	.LVL52:
 111:src/menu.c    **** 
 658              		.loc 1 111 3 view .LVU199
 659 00c0 626B     		ldr	r2, [r4, #52]
 113:src/menu.c    **** 
 660              		.loc 1 113 3 is_stmt 0 view .LVU200
 661 00c2 154B     		ldr	r3, .L45+68
ARM GAS  /tmp/cc7Wa57o.s 			page 26


 111:src/menu.c    **** 
 662              		.loc 1 111 3 view .LVU201
 663 00c4 5674     		strb	r6, [r2, #17]
 111:src/menu.c    **** 
 664              		.loc 1 111 3 is_stmt 1 view .LVU202
 113:src/menu.c    **** 
 665              		.loc 1 113 3 view .LVU203
 666 00c6 9847     		blx	r3
 667              	.LVL53:
 115:src/menu.c    **** }
 668              		.loc 1 115 3 view .LVU204
 669 00c8 144B     		ldr	r3, .L45+72
 670 00ca 9847     		blx	r3
 671              	.LVL54:
 116:src/menu.c    **** 
 672              		.loc 1 116 1 is_stmt 0 view .LVU205
 673 00cc 0AB0     		add	sp, sp, #40
 674              		.cfi_def_cfa_offset 24
 675              		@ sp needed
 676 00ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 677              	.L46:
 678 00d2 00BF     		.align	2
 679              	.L45:
 680 00d4 1C010000 		.word	.LC4
 681 00d8 00200010 		.word	268443648
 682 00dc 7D020008 		.word	134218365
 683 00e0 00000000 		.word	SvnRevision
 684 00e4 2D020008 		.word	134218285
 685 00e8 65020008 		.word	134218341
 686 00ec 00000000 		.word	.LC5
 687 00f0 28000000 		.word	.LC6
 688 00f4 48000000 		.word	.LC7
 689 00f8 68000000 		.word	.LC8
 690 00fc 8C000000 		.word	.LC9
 691 0100 A4000000 		.word	.LC10
 692 0104 B8000000 		.word	.LC11
 693 0108 D8000000 		.word	.LC12
 694 010c 71020008 		.word	134218353
 695 0110 B1020008 		.word	134218417
 696 0114 F8000000 		.word	.LC13
 697 0118 31020008 		.word	134218289
 698 011c 99030008 		.word	134218649
 699 0120 6D020008 		.word	134218349
 700              		.cfi_endproc
 701              	.LFE5:
 703              		.section	.text.run_menu_item,"ax",%progbits
 704              		.align	1
 705              		.p2align 2,,3
 706              		.global	run_menu_item
 707              		.syntax unified
 708              		.thumb
 709              		.thumb_func
 710              		.fpu fpv4-sp-d16
 712              	run_menu_item:
 713              	.LVL55:
 714              	.LFB3:
  44:src/menu.c    ****   int ret = 0;
ARM GAS  /tmp/cc7Wa57o.s 			page 27


 715              		.loc 1 44 36 is_stmt 1 view -0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
  45:src/menu.c    **** 
 719              		.loc 1 45 3 view .LVU207
  47:src/menu.c    ****     case MI_ABOUT_PGM:
 720              		.loc 1 47 3 view .LVU208
 721 0000 0B28     		cmp	r0, #11
 722 0002 04D1     		bne	.L49
  49:src/menu.c    ****       break;
 723              		.loc 1 49 7 view .LVU209
  44:src/menu.c    ****   int ret = 0;
 724              		.loc 1 44 36 is_stmt 0 view .LVU210
 725 0004 08B5     		push	{r3, lr}
 726              		.cfi_def_cfa_offset 8
 727              		.cfi_offset 3, -8
 728              		.cfi_offset 14, -4
  49:src/menu.c    ****       break;
 729              		.loc 1 49 7 view .LVU211
 730 0006 FFF7FEFF 		bl	disp_about
 731              	.LVL56:
  50:src/menu.c    **** 
 732              		.loc 1 50 7 is_stmt 1 view .LVU212
  45:src/menu.c    **** 
 733              		.loc 1 45 7 is_stmt 0 view .LVU213
 734 000a 0020     		movs	r0, #0
  58:src/menu.c    **** 
 735              		.loc 1 58 1 view .LVU214
 736 000c 08BD     		pop	{r3, pc}
 737              	.LVL57:
 738              	.L49:
 739              		.cfi_def_cfa_offset 0
 740              		.cfi_restore 3
 741              		.cfi_restore 14
  53:src/menu.c    ****       break;
 742              		.loc 1 53 11 view .LVU215
 743 000e 4FF0FF30 		mov	r0, #-1
 744              	.LVL58:
  57:src/menu.c    **** }
 745              		.loc 1 57 3 is_stmt 1 view .LVU216
  58:src/menu.c    **** 
 746              		.loc 1 58 1 is_stmt 0 view .LVU217
 747 0012 7047     		bx	lr
 748              		.cfi_endproc
 749              	.LFE3:
 751              		.section	.text.set_menu,"ax",%progbits
 752              		.align	1
 753              		.p2align 2,,3
 754              		.global	set_menu
 755              		.syntax unified
 756              		.thumb
 757              		.thumb_func
 758              		.fpu fpv4-sp-d16
 760              	set_menu:
 761              	.LVL59:
 762              	.LFB6:
ARM GAS  /tmp/cc7Wa57o.s 			page 28


 122:src/menu.c    ****   menu_name m = current_menu;
 763              		.loc 1 122 38 is_stmt 1 view -0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767              		@ link register save eliminated.
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 768              		.loc 1 123 3 view .LVU219
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 769              		.loc 1 123 13 is_stmt 0 view .LVU220
 770 0000 0A4A     		ldr	r2, .L66
 771 0002 92F90030 		ldrsb	r3, [r2]
 772              	.LVL60:
 124:src/menu.c    ****     current_menu = default_menu;
 773              		.loc 1 124 3 is_stmt 1 view .LVU221
 124:src/menu.c    ****     current_menu = default_menu;
 774              		.loc 1 124 6 is_stmt 0 view .LVU222
 775 0006 8342     		cmp	r3, r0
 776 0008 0CD0     		beq	.L65
 127:src/menu.c    ****     current_menu = last_menu;
 777              		.loc 1 127 8 is_stmt 1 view .LVU223
 127:src/menu.c    ****     current_menu = last_menu;
 778              		.loc 1 127 11 is_stmt 0 view .LVU224
 779 000a 411C     		adds	r1, r0, #1
 128:src/menu.c    ****   }
 780              		.loc 1 128 5 is_stmt 1 view .LVU225
 128:src/menu.c    ****   }
 781              		.loc 1 128 18 is_stmt 0 view .LVU226
 782 000c 09BF     		itett	eq
 783 000e 0849     		ldreq	r1, .L66+4
 131:src/menu.c    ****   }
 784              		.loc 1 131 18 view .LVU227
 785 0010 1070     		strbne	r0, [r2]
 128:src/menu.c    ****   }
 786              		.loc 1 128 18 view .LVU228
 787 0012 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 788 0014 1170     		strbeq	r1, [r2]
 131:src/menu.c    ****   }
 789              		.loc 1 131 5 is_stmt 1 view .LVU229
 790              	.L56:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 791              		.loc 1 133 3 view .LVU230
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 792              		.loc 1 133 6 is_stmt 0 view .LVU231
 793 0016 092B     		cmp	r3, #9
 794 0018 03D0     		beq	.L54
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 795              		.loc 1 133 23 discriminator 1 view .LVU232
 796 001a 102B     		cmp	r3, #16
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 797              		.loc 1 133 43 is_stmt 1 discriminator 1 view .LVU233
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 798              		.loc 1 133 53 is_stmt 0 discriminator 1 view .LVU234
 799 001c 1CBF     		itt	ne
 800 001e 044A     		ldrne	r2, .L66+4
 801 0020 1370     		strbne	r3, [r2]
 802              	.L54:
ARM GAS  /tmp/cc7Wa57o.s 			page 29


 135:src/menu.c    **** 
 803              		.loc 1 135 1 view .LVU235
 804 0022 7047     		bx	lr
 805              	.L65:
 125:src/menu.c    ****   }
 806              		.loc 1 125 5 is_stmt 1 view .LVU236
 125:src/menu.c    ****   }
 807              		.loc 1 125 18 is_stmt 0 view .LVU237
 808 0024 0349     		ldr	r1, .L66+8
 809 0026 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 810 0028 1170     		strb	r1, [r2]
 811 002a F4E7     		b	.L56
 812              	.L67:
 813              		.align	2
 814              	.L66:
 815 002c 00000000 		.word	.LANCHOR1
 816 0030 00000000 		.word	.LANCHOR3
 817 0034 00000000 		.word	.LANCHOR2
 818              		.cfi_endproc
 819              	.LFE6:
 821              		.section	.text.set_default_menu,"ax",%progbits
 822              		.align	1
 823              		.p2align 2,,3
 824              		.global	set_default_menu
 825              		.syntax unified
 826              		.thumb
 827              		.thumb_func
 828              		.fpu fpv4-sp-d16
 830              	set_default_menu:
 831              	.LFB7:
 137:src/menu.c    ****   set_menu (default_menu);
 832              		.loc 1 137 26 is_stmt 1 view -0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 0
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 836              		@ link register save eliminated.
 138:src/menu.c    **** }
 837              		.loc 1 138 3 view .LVU239
 838 0000 0A4B     		ldr	r3, .L80
 839              	.LBB61:
 840              	.LBB62:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 841              		.loc 1 123 13 is_stmt 0 view .LVU240
 842 0002 0B49     		ldr	r1, .L80+4
 843              	.LBE62:
 844              	.LBE61:
 138:src/menu.c    **** }
 845              		.loc 1 138 3 view .LVU241
 846 0004 93F90020 		ldrsb	r2, [r3]
 847              	.LVL61:
 848              	.LBB65:
 849              	.LBI61:
 122:src/menu.c    ****   menu_name m = current_menu;
 850              		.loc 1 122 6 is_stmt 1 view .LVU242
 851              	.LBB63:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 852              		.loc 1 123 3 view .LVU243
ARM GAS  /tmp/cc7Wa57o.s 			page 30


 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 853              		.loc 1 123 13 is_stmt 0 view .LVU244
 854 0008 91F90030 		ldrsb	r3, [r1]
 855              	.LVL62:
 124:src/menu.c    ****     current_menu = default_menu;
 856              		.loc 1 124 3 is_stmt 1 view .LVU245
 124:src/menu.c    ****     current_menu = default_menu;
 857              		.loc 1 124 6 is_stmt 0 view .LVU246
 858 000c 9A42     		cmp	r2, r3
 859 000e 0BD0     		beq	.L79
 127:src/menu.c    ****     current_menu = last_menu;
 860              		.loc 1 127 8 is_stmt 1 view .LVU247
 127:src/menu.c    ****     current_menu = last_menu;
 861              		.loc 1 127 11 is_stmt 0 view .LVU248
 862 0010 501C     		adds	r0, r2, #1
 128:src/menu.c    ****   }
 863              		.loc 1 128 5 is_stmt 1 view .LVU249
 128:src/menu.c    ****   }
 864              		.loc 1 128 18 is_stmt 0 view .LVU250
 865 0012 04BF     		itt	eq
 866 0014 074A     		ldreq	r2, .L80+8
 867              	.LVL63:
 128:src/menu.c    ****   }
 868              		.loc 1 128 18 view .LVU251
 869 0016 1278     		ldrbeq	r2, [r2]	@ zero_extendqisi2
 131:src/menu.c    ****   }
 870              		.loc 1 131 5 is_stmt 1 view .LVU252
 131:src/menu.c    ****   }
 871              		.loc 1 131 18 is_stmt 0 view .LVU253
 872 0018 0A70     		strb	r2, [r1]
 873              	.LVL64:
 874              	.L70:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 875              		.loc 1 133 3 is_stmt 1 view .LVU254
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 876              		.loc 1 133 6 is_stmt 0 view .LVU255
 877 001a 092B     		cmp	r3, #9
 878 001c 03D0     		beq	.L68
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 879              		.loc 1 133 23 view .LVU256
 880 001e 102B     		cmp	r3, #16
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 881              		.loc 1 133 43 is_stmt 1 view .LVU257
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 882              		.loc 1 133 53 is_stmt 0 view .LVU258
 883 0020 1CBF     		itt	ne
 884 0022 044A     		ldrne	r2, .L80+8
 885 0024 1370     		strbne	r3, [r2]
 886              	.LVL65:
 887              	.L68:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 888              		.loc 1 133 53 view .LVU259
 889              	.LBE63:
 890              	.LBE65:
 139:src/menu.c    **** 
 891              		.loc 1 139 1 view .LVU260
 892 0026 7047     		bx	lr
ARM GAS  /tmp/cc7Wa57o.s 			page 31


 893              	.LVL66:
 894              	.L79:
 895              	.LBB66:
 896              	.LBB64:
 125:src/menu.c    ****   }
 897              		.loc 1 125 5 is_stmt 1 view .LVU261
 125:src/menu.c    ****   }
 898              		.loc 1 125 18 is_stmt 0 view .LVU262
 899 0028 0B70     		strb	r3, [r1]
 900 002a F6E7     		b	.L70
 901              	.L81:
 902              		.align	2
 903              	.L80:
 904 002c 00000000 		.word	.LANCHOR2
 905 0030 00000000 		.word	.LANCHOR1
 906 0034 00000000 		.word	.LANCHOR3
 907              	.LBE64:
 908              	.LBE66:
 909              		.cfi_endproc
 910              	.LFE7:
 912              		.section	.text.toggle_default_menu,"ax",%progbits
 913              		.align	1
 914              		.p2align 2,,3
 915              		.global	toggle_default_menu
 916              		.syntax unified
 917              		.thumb
 918              		.thumb_func
 919              		.fpu fpv4-sp-d16
 921              	toggle_default_menu:
 922              	.LFB8:
 141:src/menu.c    ****   if (current_menu == M_Blank) {
 923              		.loc 1 141 29 is_stmt 1 view -0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 0
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 927              		@ link register save eliminated.
 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 928              		.loc 1 142 3 view .LVU264
 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 929              		.loc 1 142 20 is_stmt 0 view .LVU265
 930 0000 104A     		ldr	r2, .L98
 143:src/menu.c    ****     return;
 931              		.loc 1 143 33 view .LVU266
 932 0002 1149     		ldr	r1, .L98+4
 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 933              		.loc 1 142 20 view .LVU267
 934 0004 92F90030 		ldrsb	r3, [r2]
 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 935              		.loc 1 142 6 view .LVU268
 936 0008 ABB1     		cbz	r3, .L95
 146:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 937              		.loc 1 146 8 is_stmt 1 view .LVU269
 146:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 938              		.loc 1 146 11 is_stmt 0 view .LVU270
 939 000a 0F2B     		cmp	r3, #15
 940 000c 0FD0     		beq	.L96
 150:src/menu.c    ****   }
ARM GAS  /tmp/cc7Wa57o.s 			page 32


 941              		.loc 1 150 5 is_stmt 1 view .LVU271
 942              	.LBB67:
 943              	.LBI67:
 137:src/menu.c    ****   set_menu (default_menu);
 944              		.loc 1 137 6 view .LVU272
 945              	.LBB68:
 138:src/menu.c    **** }
 946              		.loc 1 138 3 view .LVU273
 947 000e 91F90010 		ldrsb	r1, [r1]
 948              	.LVL67:
 949              	.LBB69:
 950              	.LBI69:
 122:src/menu.c    ****   menu_name m = current_menu;
 951              		.loc 1 122 6 view .LVU274
 952              	.LBB70:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 953              		.loc 1 123 3 view .LVU275
 124:src/menu.c    ****     current_menu = default_menu;
 954              		.loc 1 124 3 view .LVU276
 124:src/menu.c    ****     current_menu = default_menu;
 955              		.loc 1 124 6 is_stmt 0 view .LVU277
 956 0012 8B42     		cmp	r3, r1
 957 0014 13D0     		beq	.L97
 127:src/menu.c    ****     current_menu = last_menu;
 958              		.loc 1 127 8 is_stmt 1 view .LVU278
 127:src/menu.c    ****     current_menu = last_menu;
 959              		.loc 1 127 11 is_stmt 0 view .LVU279
 960 0016 481C     		adds	r0, r1, #1
 128:src/menu.c    ****   }
 961              		.loc 1 128 5 is_stmt 1 view .LVU280
 128:src/menu.c    ****   }
 962              		.loc 1 128 18 is_stmt 0 view .LVU281
 963 0018 04BF     		itt	eq
 964 001a 0C49     		ldreq	r1, .L98+8
 965              	.LVL68:
 128:src/menu.c    ****   }
 966              		.loc 1 128 18 view .LVU282
 967 001c 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 131:src/menu.c    ****   }
 968              		.loc 1 131 5 is_stmt 1 view .LVU283
 131:src/menu.c    ****   }
 969              		.loc 1 131 18 is_stmt 0 view .LVU284
 970 001e 1170     		strb	r1, [r2]
 971              	.LVL69:
 972              	.L87:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 973              		.loc 1 133 3 is_stmt 1 view .LVU285
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 974              		.loc 1 133 6 is_stmt 0 view .LVU286
 975 0020 092B     		cmp	r3, #9
 976 0022 03D0     		beq	.L82
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 977              		.loc 1 133 23 view .LVU287
 978 0024 102B     		cmp	r3, #16
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 979              		.loc 1 133 43 is_stmt 1 view .LVU288
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
ARM GAS  /tmp/cc7Wa57o.s 			page 33


 980              		.loc 1 133 53 is_stmt 0 view .LVU289
 981 0026 1CBF     		itt	ne
 982 0028 084A     		ldrne	r2, .L98+8
 983 002a 1370     		strbne	r3, [r2]
 984              	.LVL70:
 985              	.L82:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 986              		.loc 1 133 53 view .LVU290
 987              	.LBE70:
 988              	.LBE69:
 989              	.LBE68:
 990              	.LBE67:
 152:src/menu.c    **** 
 991              		.loc 1 152 1 view .LVU291
 992 002c 7047     		bx	lr
 993              	.L96:
 147:src/menu.c    ****   }
 994              		.loc 1 147 5 is_stmt 1 view .LVU292
 147:src/menu.c    ****   }
 995              		.loc 1 147 33 is_stmt 0 view .LVU293
 996 002e 0023     		movs	r3, #0
 997 0030 0B70     		strb	r3, [r1]
 147:src/menu.c    ****   }
 998              		.loc 1 147 18 view .LVU294
 999 0032 1370     		strb	r3, [r2]
 1000 0034 7047     		bx	lr
 1001              	.L95:
 143:src/menu.c    ****     return;
 1002              		.loc 1 143 5 is_stmt 1 view .LVU295
 143:src/menu.c    ****     return;
 1003              		.loc 1 143 33 is_stmt 0 view .LVU296
 1004 0036 0F23     		movs	r3, #15
 1005 0038 0B70     		strb	r3, [r1]
 143:src/menu.c    ****     return;
 1006              		.loc 1 143 18 view .LVU297
 1007 003a 1370     		strb	r3, [r2]
 144:src/menu.c    ****   }
 1008              		.loc 1 144 5 is_stmt 1 view .LVU298
 1009 003c 7047     		bx	lr
 1010              	.LVL71:
 1011              	.L97:
 1012              	.LBB74:
 1013              	.LBB73:
 1014              	.LBB72:
 1015              	.LBB71:
 125:src/menu.c    ****   }
 1016              		.loc 1 125 5 view .LVU299
 125:src/menu.c    ****   }
 1017              		.loc 1 125 18 is_stmt 0 view .LVU300
 1018 003e 1370     		strb	r3, [r2]
 1019 0040 EEE7     		b	.L87
 1020              	.L99:
 1021 0042 00BF     		.align	2
 1022              	.L98:
 1023 0044 00000000 		.word	.LANCHOR1
 1024 0048 00000000 		.word	.LANCHOR2
 1025 004c 00000000 		.word	.LANCHOR3
ARM GAS  /tmp/cc7Wa57o.s 			page 34


 1026              	.LBE71:
 1027              	.LBE72:
 1028              	.LBE73:
 1029              	.LBE74:
 1030              		.cfi_endproc
 1031              	.LFE8:
 1033              		.section	.text.get_menu,"ax",%progbits
 1034              		.align	1
 1035              		.p2align 2,,3
 1036              		.global	get_menu
 1037              		.syntax unified
 1038              		.thumb
 1039              		.thumb_func
 1040              		.fpu fpv4-sp-d16
 1042              	get_menu:
 1043              	.LFB9:
 154:src/menu.c    ****   return current_menu;
 1044              		.loc 1 154 23 is_stmt 1 view -0
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 0
 1047              		@ frame_needed = 0, uses_anonymous_args = 0
 1048              		@ link register save eliminated.
 155:src/menu.c    **** }
 1049              		.loc 1 155 3 view .LVU302
 155:src/menu.c    **** }
 1050              		.loc 1 155 10 is_stmt 0 view .LVU303
 1051 0000 014B     		ldr	r3, .L101
 156:src/menu.c    **** 
 1052              		.loc 1 156 1 view .LVU304
 1053 0002 93F90000 		ldrsb	r0, [r3]
 1054 0006 7047     		bx	lr
 1055              	.L102:
 1056              		.align	2
 1057              	.L101:
 1058 0008 00000000 		.word	.LANCHOR1
 1059              		.cfi_endproc
 1060              	.LFE9:
 1062              		.section	.text.get_last_menu,"ax",%progbits
 1063              		.align	1
 1064              		.p2align 2,,3
 1065              		.global	get_last_menu
 1066              		.syntax unified
 1067              		.thumb
 1068              		.thumb_func
 1069              		.fpu fpv4-sp-d16
 1071              	get_last_menu:
 1072              	.LFB10:
 158:src/menu.c    ****   return last_menu;
 1073              		.loc 1 158 28 is_stmt 1 view -0
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 0
 1076              		@ frame_needed = 0, uses_anonymous_args = 0
 1077              		@ link register save eliminated.
 159:src/menu.c    **** }
 1078              		.loc 1 159 3 view .LVU306
 159:src/menu.c    **** }
 1079              		.loc 1 159 10 is_stmt 0 view .LVU307
ARM GAS  /tmp/cc7Wa57o.s 			page 35


 1080 0000 014B     		ldr	r3, .L104
 160:src/menu.c    **** 
 1081              		.loc 1 160 1 view .LVU308
 1082 0002 93F90000 		ldrsb	r0, [r3]
 1083 0006 7047     		bx	lr
 1084              	.L105:
 1085              		.align	2
 1086              	.L104:
 1087 0008 00000000 		.word	.LANCHOR3
 1088              		.cfi_endproc
 1089              	.LFE10:
 1091              		.section	.text.set_last_menu,"ax",%progbits
 1092              		.align	1
 1093              		.p2align 2,,3
 1094              		.global	set_last_menu
 1095              		.syntax unified
 1096              		.thumb
 1097              		.thumb_func
 1098              		.fpu fpv4-sp-d16
 1100              	set_last_menu:
 1101              	.LFB12:
 166:src/menu.c    ****   set_menu (M_Last);
 1102              		.loc 1 166 23 is_stmt 1 view -0
 1103              		.cfi_startproc
 1104              		@ args = 0, pretend = 0, frame = 0
 1105              		@ frame_needed = 0, uses_anonymous_args = 0
 1106              		@ link register save eliminated.
 167:src/menu.c    **** }
 1107              		.loc 1 167 3 view .LVU310
 1108              	.LVL72:
 1109              	.LBB75:
 1110              	.LBI75:
 122:src/menu.c    ****   menu_name m = current_menu;
 1111              		.loc 1 122 6 view .LVU311
 1112              	.LBB76:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1113              		.loc 1 123 3 view .LVU312
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1114              		.loc 1 123 13 is_stmt 0 view .LVU313
 1115 0000 0A4A     		ldr	r2, .L119
 1116 0002 92F90030 		ldrsb	r3, [r2]
 1117              	.LVL73:
 124:src/menu.c    ****     current_menu = default_menu;
 1118              		.loc 1 124 3 is_stmt 1 view .LVU314
 124:src/menu.c    ****     current_menu = default_menu;
 1119              		.loc 1 124 6 is_stmt 0 view .LVU315
 1120 0006 591C     		adds	r1, r3, #1
 1121 0008 09D0     		beq	.L116
 127:src/menu.c    ****     current_menu = last_menu;
 1122              		.loc 1 127 8 is_stmt 1 view .LVU316
 128:src/menu.c    ****   }
 1123              		.loc 1 128 5 view .LVU317
 128:src/menu.c    ****   }
 1124              		.loc 1 128 18 is_stmt 0 view .LVU318
 1125 000a 0949     		ldr	r1, .L119+4
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1126              		.loc 1 133 6 view .LVU319
ARM GAS  /tmp/cc7Wa57o.s 			page 36


 1127 000c 092B     		cmp	r3, #9
 128:src/menu.c    ****   }
 1128              		.loc 1 128 18 view .LVU320
 1129 000e 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1130 0010 1070     		strb	r0, [r2]
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1131              		.loc 1 133 3 is_stmt 1 view .LVU321
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1132              		.loc 1 133 6 is_stmt 0 view .LVU322
 1133 0012 00D1     		bne	.L117
 1134              	.L106:
 1135              	.LBE76:
 1136              	.LBE75:
 168:src/menu.c    **** 
 1137              		.loc 1 168 1 view .LVU323
 1138 0014 7047     		bx	lr
 1139              	.L117:
 1140              	.LBB79:
 1141              	.LBB77:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1142              		.loc 1 133 23 view .LVU324
 1143 0016 102B     		cmp	r3, #16
 1144 0018 FCD0     		beq	.L106
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1145              		.loc 1 133 43 is_stmt 1 view .LVU325
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1146              		.loc 1 133 53 is_stmt 0 view .LVU326
 1147 001a 0B70     		strb	r3, [r1]
 1148              	.LVL74:
 1149              	.L118:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1150              		.loc 1 133 53 view .LVU327
 1151              	.LBE77:
 1152              	.LBE79:
 168:src/menu.c    **** 
 1153              		.loc 1 168 1 view .LVU328
 1154 001c 7047     		bx	lr
 1155              	.LVL75:
 1156              	.L116:
 1157              	.LBB80:
 1158              	.LBB78:
 125:src/menu.c    ****   }
 1159              		.loc 1 125 5 is_stmt 1 view .LVU329
 125:src/menu.c    ****   }
 1160              		.loc 1 125 18 is_stmt 0 view .LVU330
 1161 001e 0548     		ldr	r0, .L119+8
 1162 0020 0349     		ldr	r1, .L119+4
 1163 0022 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1164 0024 1070     		strb	r0, [r2]
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1165              		.loc 1 133 3 is_stmt 1 view .LVU331
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1166              		.loc 1 133 43 view .LVU332
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1167              		.loc 1 133 53 is_stmt 0 view .LVU333
 1168 0026 0B70     		strb	r3, [r1]
 1169              	.LVL76:
ARM GAS  /tmp/cc7Wa57o.s 			page 37


 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1170              		.loc 1 133 53 view .LVU334
 1171 0028 F8E7     		b	.L118
 1172              	.L120:
 1173 002a 00BF     		.align	2
 1174              	.L119:
 1175 002c 00000000 		.word	.LANCHOR1
 1176 0030 00000000 		.word	.LANCHOR3
 1177 0034 00000000 		.word	.LANCHOR2
 1178              	.LBE78:
 1179              	.LBE80:
 1180              		.cfi_endproc
 1181              	.LFE12:
 1183              		.section	.text.mdot,"ax",%progbits
 1184              		.align	1
 1185              		.p2align 2,,3
 1186              		.global	mdot
 1187              		.syntax unified
 1188              		.thumb
 1189              		.thumb_func
 1190              		.fpu fpv4-sp-d16
 1192              	mdot:
 1193              	.LVL77:
 1194              	.LFB14:
 570:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1195              		.loc 1 570 40 is_stmt 1 view -0
 1196              		.cfi_startproc
 1197              		@ args = 0, pretend = 0, frame = 0
 1198              		@ frame_needed = 0, uses_anonymous_args = 0
 1199              		@ link register save eliminated.
 571:src/menu.c    ****   if (on) {
 1200              		.loc 1 571 3 view .LVU336
 571:src/menu.c    ****   if (on) {
 1201              		.loc 1 571 6 is_stmt 0 view .LVU337
 1202 0000 C728     		cmp	r0, #199
 1203 0002 1AD8     		bhi	.L125
 1204              	.LVL78:
 1205              	.LBB83:
 1206              	.LBI83:
 570:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1207              		.loc 1 570 6 is_stmt 1 view .LVU338
 1208              	.LBB84:
 572:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1209              		.loc 1 572 3 view .LVU339
 1210              	.LBE84:
 1211              	.LBE83:
 570:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1212              		.loc 1 570 40 is_stmt 0 view .LVU340
 1213 0004 10B4     		push	{r4}
 1214              		.cfi_def_cfa_offset 4
 1215              		.cfi_offset 4, -4
 1216              	.LBB87:
 1217              	.LBB85:
 572:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1218              		.loc 1 572 6 view .LVU341
 1219 0006 63B9     		cbnz	r3, .L128
 1220              		.loc 1 576 5 is_stmt 1 view .LVU342
ARM GAS  /tmp/cc7Wa57o.s 			page 38


 1221              		.loc 1 576 17 is_stmt 0 view .LVU343
 1222 0008 0C4B     		ldr	r3, .L129
 1223              	.LVL79:
 1224              		.loc 1 576 17 view .LVU344
 1225 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1226              	.LVL80:
 1227              		.loc 1 576 25 view .LVU345
 1228 000e 0124     		movs	r4, #1
 1229              		.loc 1 576 17 view .LVU346
 1230 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1231              		.loc 1 576 25 view .LVU347
 1232 0012 04FA01F1 		lsl	r1, r4, r1
 1233              	.LVL81:
 1234              		.loc 1 576 17 view .LVU348
 1235 0016 23EA0101 		bic	r1, r3, r1
 1236 001a 8154     		strb	r1, [r0, r2]
 1237              	.LVL82:
 1238              		.loc 1 576 17 view .LVU349
 1239              	.LBE85:
 1240              	.LBE87:
 577:src/menu.c    ****   }
 578:src/menu.c    **** }
 1241              		.loc 1 578 1 view .LVU350
 1242 001c 5DF8044B 		ldr	r4, [sp], #4
 1243              		.cfi_remember_state
 1244              		.cfi_restore 4
 1245              		.cfi_def_cfa_offset 0
 1246 0020 7047     		bx	lr
 1247              	.LVL83:
 1248              	.L128:
 1249              		.cfi_restore_state
 1250              	.LBB88:
 1251              	.LBB86:
 573:src/menu.c    ****   }
 1252              		.loc 1 573 5 is_stmt 1 view .LVU351
 573:src/menu.c    ****   }
 1253              		.loc 1 573 17 is_stmt 0 view .LVU352
 1254 0022 064B     		ldr	r3, .L129
 1255              	.LVL84:
 573:src/menu.c    ****   }
 1256              		.loc 1 573 17 view .LVU353
 1257 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1258              	.LVL85:
 573:src/menu.c    ****   }
 1259              		.loc 1 573 24 view .LVU354
 1260 0028 0124     		movs	r4, #1
 573:src/menu.c    ****   }
 1261              		.loc 1 573 17 view .LVU355
 1262 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 573:src/menu.c    ****   }
 1263              		.loc 1 573 24 view .LVU356
 1264 002c 04FA01F1 		lsl	r1, r4, r1
 1265              	.LVL86:
 573:src/menu.c    ****   }
 1266              		.loc 1 573 17 view .LVU357
 1267 0030 1943     		orrs	r1, r1, r3
 1268 0032 8154     		strb	r1, [r0, r2]
ARM GAS  /tmp/cc7Wa57o.s 			page 39


 1269              	.LBE86:
 1270              	.LBE88:
 1271              		.loc 1 578 1 view .LVU358
 1272 0034 5DF8044B 		ldr	r4, [sp], #4
 1273              		.cfi_restore 4
 1274              		.cfi_def_cfa_offset 0
 1275 0038 7047     		bx	lr
 1276              	.LVL87:
 1277              	.L125:
 1278              		.loc 1 578 1 view .LVU359
 1279 003a 7047     		bx	lr
 1280              	.L130:
 1281              		.align	2
 1282              	.L129:
 1283 003c 00000000 		.word	.LANCHOR0
 1284              		.cfi_endproc
 1285              	.LFE14:
 1287              		.section	.text.get_current_menu_ref,"ax",%progbits
 1288              		.align	1
 1289              		.p2align 2,,3
 1290              		.global	get_current_menu_ref
 1291              		.syntax unified
 1292              		.thumb
 1293              		.thumb_func
 1294              		.fpu fpv4-sp-d16
 1296              	get_current_menu_ref:
 1297              	.LVL88:
 1298              	.LFB15:
 579:src/menu.c    **** 
 580:src/menu.c    **** struct _menu get_current_menu_ref() {
 1299              		.loc 1 580 37 is_stmt 1 view -0
 1300              		.cfi_startproc
 1301              		@ args = 0, pretend = 0, frame = 0
 1302              		@ frame_needed = 0, uses_anonymous_args = 0
 581:src/menu.c    ****   int i = current_menu;
 1303              		.loc 1 581 3 view .LVU361
 582:src/menu.c    ****   if (C_LOCKED)
 1304              		.loc 1 582 7 is_stmt 0 view .LVU362
 1305 0000 1E4A     		ldr	r2, .L151
 581:src/menu.c    ****   int i = current_menu;
 1306              		.loc 1 581 7 view .LVU363
 1307 0002 1F4B     		ldr	r3, .L151+4
 1308              		.loc 1 582 7 view .LVU364
 1309 0004 1268     		ldr	r2, [r2]
 580:src/menu.c    ****   int i = current_menu;
 1310              		.loc 1 580 37 view .LVU365
 1311 0006 10B5     		push	{r4, lr}
 1312              		.cfi_def_cfa_offset 8
 1313              		.cfi_offset 4, -8
 1314              		.cfi_offset 14, -4
 1315              		.loc 1 582 7 view .LVU366
 1316 0008 92F8E447 		ldrb	r4, [r2, #2020]	@ zero_extendqisi2
 581:src/menu.c    ****   int i = current_menu;
 1317              		.loc 1 581 7 view .LVU367
 1318 000c 93F90010 		ldrsb	r1, [r3]
 1319              	.LVL89:
 1320              		.loc 1 582 3 is_stmt 1 view .LVU368
ARM GAS  /tmp/cc7Wa57o.s 			page 40


 580:src/menu.c    ****   int i = current_menu;
 1321              		.loc 1 580 37 is_stmt 0 view .LVU369
 1322 0010 0346     		mov	r3, r0
 1323              		.loc 1 582 6 view .LVU370
 1324 0012 6007     		lsls	r0, r4, #29
 1325              	.LVL90:
 1326              		.loc 1 582 6 view .LVU371
 1327 0014 1DD5     		bpl	.L132
 1328              		.loc 1 582 7 discriminator 1 view .LVU372
 1329 0016 92F8DE27 		ldrb	r2, [r2, #2014]	@ zero_extendqisi2
 1330 001a 5207     		lsls	r2, r2, #29
 1331 001c 19D5     		bpl	.L132
 583:src/menu.c    ****     switch (current_menu) {
 1332              		.loc 1 583 5 is_stmt 1 view .LVU373
 1333 001e 4A1E     		subs	r2, r1, #1
 1334 0020 0E2A     		cmp	r2, #14
 1335 0022 16D8     		bhi	.L132
 1336 0024 DFE802F0 		tbb	[pc, r2]
 1337              	.L134:
 1338 0028 27       		.byte	(.L140-.L134)/2
 1339 0029 15       		.byte	(.L132-.L134)/2
 1340 002a 25       		.byte	(.L135-.L134)/2
 1341 002b 15       		.byte	(.L132-.L134)/2
 1342 002c 23       		.byte	(.L139-.L134)/2
 1343 002d 13       		.byte	(.L138-.L134)/2
 1344 002e 25       		.byte	(.L135-.L134)/2
 1345 002f 15       		.byte	(.L132-.L134)/2
 1346 0030 08       		.byte	(.L143-.L134)/2
 1347 0031 25       		.byte	(.L135-.L134)/2
 1348 0032 21       		.byte	(.L136-.L134)/2
 1349 0033 25       		.byte	(.L135-.L134)/2
 1350 0034 25       		.byte	(.L135-.L134)/2
 1351 0035 25       		.byte	(.L135-.L134)/2
 1352 0036 1F       		.byte	(.L133-.L134)/2
 1353 0037 00       		.p2align 1
 1354              	.L143:
 584:src/menu.c    ****     case (M_Clear):
 585:src/menu.c    ****       i = M_Clear_C;
 586:src/menu.c    ****       break;
 587:src/menu.c    ****     case (M_Swap):
 588:src/menu.c    ****       i = M_Swap_C;
 589:src/menu.c    ****       break;
 590:src/menu.c    ****     case (M_Arrow):
 591:src/menu.c    ****       i = M_Arrow_C;
 1355              		.loc 1 591 9 is_stmt 0 view .LVU374
 1356 0038 1421     		movs	r1, #20
 1357              	.LVL91:
 1358              	.L137:
 592:src/menu.c    ****       break;
 593:src/menu.c    ****     case (M_Prob):
 594:src/menu.c    ****       i = M_Prob_C;
 595:src/menu.c    ****       break;
 596:src/menu.c    ****     case (M_Blank2):
 597:src/menu.c    ****       i = M_Blank2_C;
 598:src/menu.c    ****       break;
 599:src/menu.c    ****     case (M_Misc):
 600:src/menu.c    ****       i = M_Misc_C;
ARM GAS  /tmp/cc7Wa57o.s 			page 41


 601:src/menu.c    ****       break;
 602:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 603:src/menu.c    ****     case (M_Flags):// so don't display them.
 604:src/menu.c    ****     case (M_Stats):
 605:src/menu.c    ****     case (M_Setup2):
 606:src/menu.c    ****     case (M_Solve):
 607:src/menu.c    ****     case (M_Program):
 608:src/menu.c    ****       i = M_C_Lock;
 609:src/menu.c    ****     default:;
 610:src/menu.c    ****     }
 611:src/menu.c    ****   if (current_menu == M_User) {
 612:src/menu.c    ****     return UserMenu;
 613:src/menu.c    ****   }
 614:src/menu.c    ****   else {
 615:src/menu.c    ****     return Menus[i];
 1359              		.loc 1 615 5 is_stmt 1 view .LVU375
 1360              		.loc 1 615 17 is_stmt 0 view .LVU376
 1361 003a 1248     		ldr	r0, .L151+8
 1362 003c D022     		movs	r2, #208
 1363 003e 02FB0101 		mla	r1, r2, r1, r0
 1364              	.LVL92:
 1365              		.loc 1 615 17 view .LVU377
 1366 0042 1846     		mov	r0, r3
 1367 0044 FFF7FEFF 		bl	memcpy
 1368              	.LVL93:
 1369              		.loc 1 615 17 view .LVU378
 1370 0048 0346     		mov	r3, r0
 616:src/menu.c    ****   }
 617:src/menu.c    **** }
 1371              		.loc 1 617 1 view .LVU379
 1372 004a 1846     		mov	r0, r3
 1373 004c 10BD     		pop	{r4, pc}
 1374              	.LVL94:
 1375              	.L138:
 582:src/menu.c    ****     switch (current_menu) {
 1376              		.loc 1 582 7 view .LVU380
 1377 004e 1321     		movs	r1, #19
 1378              	.LVL95:
 582:src/menu.c    ****     switch (current_menu) {
 1379              		.loc 1 582 7 view .LVU381
 1380 0050 F3E7     		b	.L137
 1381              	.LVL96:
 1382              	.L132:
 609:src/menu.c    ****     }
 1383              		.loc 1 609 13 is_stmt 1 view .LVU382
 611:src/menu.c    ****     return UserMenu;
 1384              		.loc 1 611 3 view .LVU383
 611:src/menu.c    ****     return UserMenu;
 1385              		.loc 1 611 6 is_stmt 0 view .LVU384
 1386 0052 6329     		cmp	r1, #99
 1387 0054 F1D1     		bne	.L137
 612:src/menu.c    ****   }
 1388              		.loc 1 612 5 is_stmt 1 view .LVU385
 612:src/menu.c    ****   }
 1389              		.loc 1 612 12 is_stmt 0 view .LVU386
 1390 0056 0C49     		ldr	r1, .L151+12
 1391              	.LVL97:
ARM GAS  /tmp/cc7Wa57o.s 			page 42


 612:src/menu.c    ****   }
 1392              		.loc 1 612 12 view .LVU387
 1393 0058 D022     		movs	r2, #208
 1394 005a 1846     		mov	r0, r3
 1395 005c FFF7FEFF 		bl	memcpy
 1396              	.LVL98:
 612:src/menu.c    ****   }
 1397              		.loc 1 612 12 view .LVU388
 1398 0060 0346     		mov	r3, r0
 1399              		.loc 1 617 1 view .LVU389
 1400 0062 1846     		mov	r0, r3
 1401 0064 10BD     		pop	{r4, pc}
 1402              	.LVL99:
 1403              	.L133:
 597:src/menu.c    ****       break;
 1404              		.loc 1 597 7 is_stmt 1 view .LVU390
 598:src/menu.c    ****     case (M_Misc):
 1405              		.loc 1 598 7 view .LVU391
 597:src/menu.c    ****       break;
 1406              		.loc 1 597 9 is_stmt 0 view .LVU392
 1407 0066 1621     		movs	r1, #22
 598:src/menu.c    ****     case (M_Misc):
 1408              		.loc 1 598 7 view .LVU393
 1409 0068 E7E7     		b	.L137
 1410              	.LVL100:
 1411              	.L136:
 594:src/menu.c    ****       break;
 1412              		.loc 1 594 7 is_stmt 1 view .LVU394
 595:src/menu.c    ****     case (M_Blank2):
 1413              		.loc 1 595 7 view .LVU395
 594:src/menu.c    ****       break;
 1414              		.loc 1 594 9 is_stmt 0 view .LVU396
 1415 006a 1521     		movs	r1, #21
 595:src/menu.c    ****     case (M_Blank2):
 1416              		.loc 1 595 7 view .LVU397
 1417 006c E5E7     		b	.L137
 1418              	.LVL101:
 1419              	.L139:
 600:src/menu.c    ****       break;
 1420              		.loc 1 600 7 is_stmt 1 view .LVU398
 601:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1421              		.loc 1 601 7 view .LVU399
 600:src/menu.c    ****       break;
 1422              		.loc 1 600 9 is_stmt 0 view .LVU400
 1423 006e 1721     		movs	r1, #23
 601:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1424              		.loc 1 601 7 view .LVU401
 1425 0070 E3E7     		b	.L137
 1426              	.LVL102:
 1427              	.L135:
 608:src/menu.c    ****     default:;
 1428              		.loc 1 608 7 is_stmt 1 view .LVU402
 608:src/menu.c    ****     default:;
 1429              		.loc 1 608 9 is_stmt 0 view .LVU403
 1430 0072 1121     		movs	r1, #17
 1431 0074 E1E7     		b	.L137
 1432              	.LVL103:
ARM GAS  /tmp/cc7Wa57o.s 			page 43


 1433              	.L140:
 585:src/menu.c    ****       break;
 1434              		.loc 1 585 9 view .LVU404
 1435 0076 1221     		movs	r1, #18
 1436              	.LVL104:
 585:src/menu.c    ****       break;
 1437              		.loc 1 585 9 view .LVU405
 1438 0078 DFE7     		b	.L137
 1439              	.L152:
 1440 007a 00BF     		.align	2
 1441              	.L151:
 1442 007c 00000000 		.word	main_ram
 1443 0080 00000000 		.word	.LANCHOR1
 1444 0084 00000000 		.word	Menus
 1445 0088 00000000 		.word	.LANCHOR4
 1446              		.cfi_endproc
 1447              	.LFE15:
 1449              		.section	.text.display_menu,"ax",%progbits
 1450              		.align	1
 1451              		.p2align 2,,3
 1452              		.global	display_menu
 1453              		.syntax unified
 1454              		.thumb
 1455              		.thumb_func
 1456              		.fpu fpv4-sp-d16
 1458              	display_menu:
 1459              	.LFB16:
 618:src/menu.c    **** 
 619:src/menu.c    **** void display_menu (struct _menu Ref) {
 1460              		.loc 1 619 38 is_stmt 1 view -0
 1461              		.cfi_startproc
 1462              		@ args = 208, pretend = 16, frame = 0
 1463              		@ frame_needed = 0, uses_anonymous_args = 0
 620:src/menu.c    ****   int len = 0;
 1464              		.loc 1 620 3 view .LVU407
 1465              	.LVL105:
 621:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1466              		.loc 1 621 3 view .LVU408
 619:src/menu.c    ****   int len = 0;
 1467              		.loc 1 619 38 is_stmt 0 view .LVU409
 1468 0000 84B0     		sub	sp, sp, #16
 1469              		.cfi_def_cfa_offset 16
 1470 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1471              		.cfi_def_cfa_offset 52
 1472              		.cfi_offset 4, -52
 1473              		.cfi_offset 5, -48
 1474              		.cfi_offset 6, -44
 1475              		.cfi_offset 7, -40
 1476              		.cfi_offset 8, -36
 1477              		.cfi_offset 9, -32
 1478              		.cfi_offset 10, -28
 1479              		.cfi_offset 11, -24
 1480              		.cfi_offset 14, -20
 1481 0006 83B0     		sub	sp, sp, #12
 1482              		.cfi_def_cfa_offset 64
 1483              		.loc 1 621 3 view .LVU410
 1484 0008 0024     		movs	r4, #0
ARM GAS  /tmp/cc7Wa57o.s 			page 44


 619:src/menu.c    ****   int len = 0;
 1485              		.loc 1 619 38 view .LVU411
 1486 000a 0CAD     		add	r5, sp, #48
 1487 000c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1488              		.loc 1 621 3 view .LVU412
 1489 0010 3E4E     		ldr	r6, .L171
 1490 0012 0094     		str	r4, [sp]
 1491 0014 2046     		mov	r0, r4
 1492 0016 3423     		movs	r3, #52
 1493 0018 4FF4C872 		mov	r2, #400
 1494 001c BC21     		movs	r1, #188
 1495 001e B047     		blx	r6
 1496              	.LVL106:
 622:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1497              		.loc 1 622 3 is_stmt 1 view .LVU413
 1498 0020 3B4D     		ldr	r5, .L171+4
 1499 0022 FF23     		movs	r3, #255
 1500 0024 0093     		str	r3, [sp]
 1501 0026 4FF4C872 		mov	r2, #400
 1502 002a 0123     		movs	r3, #1
 1503 002c BC21     		movs	r1, #188
 1504 002e 2046     		mov	r0, r4
 1505 0030 B047     		blx	r6
 1506              	.LVL107:
 623:src/menu.c    ****   //Clear previous menu
 624:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1507              		.loc 1 624 3 view .LVU414
 1508              	.LBB89:
 1509              		.loc 1 624 8 view .LVU415
 1510              		.loc 1 624 21 view .LVU416
 625:src/menu.c    ****     mdots[col][0] = 0;
 1511              		.loc 1 625 19 is_stmt 0 view .LVU417
 1512 0032 2246     		mov	r2, r4
 1513 0034 05F5C871 		add	r1, r5, #400
 1514              	.LBE89:
 622:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1515              		.loc 1 622 3 view .LVU418
 1516 0038 2B46     		mov	r3, r5
 1517              	.LVL108:
 1518              	.L154:
 1519              	.LBB90:
 1520              		.loc 1 625 5 is_stmt 1 discriminator 3 view .LVU419
 1521              		.loc 1 625 19 is_stmt 0 discriminator 3 view .LVU420
 1522 003a 1A70     		strb	r2, [r3]
 626:src/menu.c    ****     mdots[col][1] = 0;
 1523              		.loc 1 626 5 is_stmt 1 discriminator 3 view .LVU421
 1524              		.loc 1 626 19 is_stmt 0 discriminator 3 view .LVU422
 1525 003c 5A70     		strb	r2, [r3, #1]
 624:src/menu.c    ****     mdots[col][0] = 0;
 1526              		.loc 1 624 32 is_stmt 1 discriminator 3 view .LVU423
 624:src/menu.c    ****     mdots[col][0] = 0;
 1527              		.loc 1 624 21 discriminator 3 view .LVU424
 1528 003e 0233     		adds	r3, r3, #2
 624:src/menu.c    ****     mdots[col][0] = 0;
 1529              		.loc 1 624 3 is_stmt 0 discriminator 3 view .LVU425
 1530 0040 9942     		cmp	r1, r3
 1531 0042 FAD1     		bne	.L154
ARM GAS  /tmp/cc7Wa57o.s 			page 45


 1532 0044 14AE     		add	r6, sp, #80
 624:src/menu.c    ****     mdots[col][0] = 0;
 1533              		.loc 1 624 3 view .LVU426
 1534 0046 0024     		movs	r4, #0
 1535              	.LVL109:
 1536              	.L155:
 624:src/menu.c    ****     mdots[col][0] = 0;
 1537              		.loc 1 624 3 view .LVU427
 1538              	.LBE90:
 1539              	.LBB91:
 627:src/menu.c    ****   }
 628:src/menu.c    **** 
 629:src/menu.c    ****   // Draw menu items
 630:src/menu.c    ****   // 
 631:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 632:src/menu.c    ****     /*
 633:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 634:src/menu.c    ****     */
 635:src/menu.c    ****     // Label is Ref.keys[item].unshifted_label
 636:src/menu.c    ****     // Unshifted first
 637:src/menu.c    ****       len = pixel_length (Ref.keys[item].unshifted_label, 0); // 0 means not small font
 1540              		.loc 1 637 7 is_stmt 1 view .LVU428
 1541              		.loc 1 637 13 is_stmt 0 view .LVU429
 1542 0048 0021     		movs	r1, #0
 1543 004a 3046     		mov	r0, r6
 1544 004c FFF7FEFF 		bl	pixel_length
 1545              	.LVL110:
 638:src/menu.c    ****       set_menu_label ( Ref.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1546              		.loc 1 638 7 is_stmt 1 view .LVU430
 1547              		.loc 1 638 73 is_stmt 0 view .LVU431
 1548 0050 C0F12000 		rsb	r0, r0, #32
 1549              	.LVL111:
 1550              		.loc 1 638 79 view .LVU432
 1551 0054 00EBD070 		add	r0, r0, r0, lsr #31
 1552              		.loc 1 638 7 view .LVU433
 1553 0058 04EB6001 		add	r1, r4, r0, asr #1
 1554 005c 0022     		movs	r2, #0
 1555 005e 3046     		mov	r0, r6
 1556 0060 06F10807 		add	r7, r6, #8
 1557 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1558              	.LVL112:
 639:src/menu.c    ****       // Now shifted ...	
 640:src/menu.c    ****       len = pixel_length (Ref.keys[item].shifted_label, 0); // 0 means not small font
 1559              		.loc 1 640 7 is_stmt 1 view .LVU434
 1560              		.loc 1 640 13 is_stmt 0 view .LVU435
 1561 0068 0021     		movs	r1, #0
 1562 006a 3846     		mov	r0, r7
 1563 006c FFF7FEFF 		bl	pixel_length
 1564              	.LVL113:
 641:src/menu.c    ****       len = item*32 + (32-len)/2;
 1565              		.loc 1 641 7 is_stmt 1 view .LVU436
 1566              		.loc 1 641 26 is_stmt 0 view .LVU437
 1567 0070 C0F12000 		rsb	r0, r0, #32
 1568              	.LVL114:
 1569              		.loc 1 641 31 view .LVU438
 1570 0074 00EBD070 		add	r0, r0, r0, lsr #31
 1571              	.LVL115:
ARM GAS  /tmp/cc7Wa57o.s 			page 46


 642:src/menu.c    ****       if (len<0) len = 0;
 1572              		.loc 1 642 7 is_stmt 1 view .LVU439
 641:src/menu.c    ****       len = item*32 + (32-len)/2;
 1573              		.loc 1 641 11 is_stmt 0 view .LVU440
 1574 0078 04EB6001 		add	r1, r4, r0, asr #1
 1575              	.LVL116:
 641:src/menu.c    ****       len = item*32 + (32-len)/2;
 1576              		.loc 1 641 11 view .LVU441
 1577 007c C729     		cmp	r1, #199
 1578 007e A8BF     		it	ge
 1579 0080 C721     		movge	r1, #199
 1580              	.LVL117:
 643:src/menu.c    ****       if (len>199) len = 199;
 644:src/menu.c    ****       set_menu_label ( Ref.keys[item].shifted_label, 0, len, 1 );
 1581              		.loc 1 644 7 is_stmt 1 view .LVU442
 1582 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1583              	.LVL118:
 1584              		.loc 1 644 7 is_stmt 0 view .LVU443
 1585 0086 3846     		mov	r0, r7
 1586 0088 2034     		adds	r4, r4, #32
 1587 008a 0122     		movs	r2, #1
 1588 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1589              	.LVL119:
 631:src/menu.c    ****     /*
 1590              		.loc 1 631 32 is_stmt 1 view .LVU444
 631:src/menu.c    ****     /*
 1591              		.loc 1 631 22 view .LVU445
 631:src/menu.c    ****     /*
 1592              		.loc 1 631 3 is_stmt 0 view .LVU446
 1593 0090 C02C     		cmp	r4, #192
 1594 0092 06F12006 		add	r6, r6, #32
 1595 0096 D7D1     		bne	.L155
 1596 0098 1E4E     		ldr	r6, .L171+8
 1597              	.LBE91:
 1598              	.LBB92:
 1599              	.LBB93:
 645:src/menu.c    ****   }
 646:src/menu.c    **** 
 647:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 648:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 649:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 650:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 651:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1600              		.loc 1 651 2 view .LVU447
 1601 009a DFF87090 		ldr	r9, .L171
 1602 009e C5F1040A 		rsb	r10, r5, #4
 1603 00a2 06F5C47B 		add	fp, r6, #392
 1604              	.LBE93:
 1605              	.LBE92:
 1606              	.LBB95:
 631:src/menu.c    ****     /*
 1607              		.loc 1 631 3 view .LVU448
 1608 00a6 771E     		subs	r7, r6, #1
 1609              	.LBE95:
 1610              	.LBB96:
 1611              	.LBB94:
 1612              		.loc 1 651 2 view .LVU449
ARM GAS  /tmp/cc7Wa57o.s 			page 47


 1613 00a8 4FF0FF08 		mov	r8, #255
 1614              	.L156:
 1615              	.LVL120:
 648:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1616              		.loc 1 648 23 is_stmt 1 view .LVU450
 1617 00ac 0AEB0705 		add	r5, r10, r7
 648:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1618              		.loc 1 648 14 is_stmt 0 view .LVU451
 1619 00b0 0024     		movs	r4, #0
 1620              	.LVL121:
 1621              	.L159:
 649:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1622              		.loc 1 649 7 is_stmt 1 view .LVU452
 1623              		.loc 1 651 2 view .LVU453
 649:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1624              		.loc 1 649 22 is_stmt 0 view .LVU454
 1625 00b2 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 649:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1626              		.loc 1 649 40 view .LVU455
 1627 00b6 2241     		asrs	r2, r2, r4
 1628              		.loc 1 651 2 view .LVU456
 1629 00b8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1630 00bc 0323     		movs	r3, #3
 649:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1631              		.loc 1 649 10 view .LVU457
 1632 00be 12F0010F 		tst	r2, #1
 1633              		.loc 1 651 2 view .LVU458
 1634 00c2 01F1E901 		add	r1, r1, #233
 1635 00c6 1A46     		mov	r2, r3
 1636 00c8 2846     		mov	r0, r5
 649:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1637              		.loc 1 649 10 view .LVU459
 1638 00ca 02D0     		beq	.L157
 1639              		.loc 1 651 2 view .LVU460
 1640 00cc CDF80080 		str	r8, [sp]
 1641 00d0 C847     		blx	r9
 1642              	.LVL122:
 1643              	.L157:
 652:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1644              		.loc 1 652 7 is_stmt 1 view .LVU461
 653:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 654:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1645              		.loc 1 654 2 view .LVU462
 652:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1646              		.loc 1 652 22 is_stmt 0 view .LVU463
 1647 00d2 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 652:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1648              		.loc 1 652 40 view .LVU464
 1649 00d4 2241     		asrs	r2, r2, r4
 1650              		.loc 1 654 2 view .LVU465
 1651 00d6 A4EB8401 		sub	r1, r4, r4, lsl #2
 1652 00da 0323     		movs	r3, #3
 652:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1653              		.loc 1 652 10 view .LVU466
 1654 00dc 12F0010F 		tst	r2, #1
 1655              		.loc 1 654 2 view .LVU467
 1656 00e0 01F1D001 		add	r1, r1, #208
ARM GAS  /tmp/cc7Wa57o.s 			page 48


 1657 00e4 1A46     		mov	r2, r3
 1658 00e6 04F10104 		add	r4, r4, #1
 1659              	.LVL123:
 1660              		.loc 1 654 2 view .LVU468
 1661 00ea 2846     		mov	r0, r5
 652:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1662              		.loc 1 652 10 view .LVU469
 1663 00ec 02D0     		beq	.L158
 1664              		.loc 1 654 2 view .LVU470
 1665 00ee CDF80080 		str	r8, [sp]
 1666 00f2 C847     		blx	r9
 1667              	.LVL124:
 1668              	.L158:
 648:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1669              		.loc 1 648 32 is_stmt 1 discriminator 2 view .LVU471
 648:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1670              		.loc 1 648 23 discriminator 2 view .LVU472
 648:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1671              		.loc 1 648 5 is_stmt 0 discriminator 2 view .LVU473
 1672 00f4 062C     		cmp	r4, #6
 1673 00f6 DCD1     		bne	.L159
 1674              	.LBE94:
 647:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1675              		.loc 1 647 32 is_stmt 1 discriminator 2 view .LVU474
 647:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1676              		.loc 1 647 21 discriminator 2 view .LVU475
 1677 00f8 0236     		adds	r6, r6, #2
 647:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1678              		.loc 1 647 3 is_stmt 0 discriminator 2 view .LVU476
 1679 00fa B345     		cmp	fp, r6
 1680 00fc 07F10207 		add	r7, r7, #2
 1681 0100 D4D1     		bne	.L156
 1682              	.LBE96:
 655:src/menu.c    ****     }
 656:src/menu.c    ****   }
 657:src/menu.c    **** }
 1683              		.loc 1 657 1 view .LVU477
 1684 0102 03B0     		add	sp, sp, #12
 1685              		.cfi_def_cfa_offset 52
 1686              		@ sp needed
 1687 0104 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1688              		.cfi_restore 14
 1689              		.cfi_restore 11
 1690              		.cfi_restore 10
 1691              		.cfi_restore 9
 1692              		.cfi_restore 8
 1693              		.cfi_restore 7
 1694              		.cfi_restore 6
 1695              		.cfi_restore 5
 1696              		.cfi_restore 4
 1697              		.cfi_def_cfa_offset 16
 1698              	.LVL125:
 1699              		.loc 1 657 1 view .LVU478
 1700 0108 04B0     		add	sp, sp, #16
 1701              		.cfi_def_cfa_offset 0
 1702 010a 7047     		bx	lr
 1703              	.L172:
ARM GAS  /tmp/cc7Wa57o.s 			page 49


 1704              		.align	2
 1705              	.L171:
 1706 010c 3D020008 		.word	134218301
 1707 0110 00000000 		.word	.LANCHOR0
 1708 0114 01000000 		.word	.LANCHOR0+1
 1709              		.cfi_endproc
 1710              	.LFE16:
 1712              		.section	.text.display_current_menu,"ax",%progbits
 1713              		.align	1
 1714              		.p2align 2,,3
 1715              		.global	display_current_menu
 1716              		.syntax unified
 1717              		.thumb
 1718              		.thumb_func
 1719              		.fpu fpv4-sp-d16
 1721              	display_current_menu:
 1722              	.LFB11:
 162:src/menu.c    ****   display_menu (get_current_menu_ref());
 1723              		.loc 1 162 30 is_stmt 1 view -0
 1724              		.cfi_startproc
 1725              		@ args = 0, pretend = 0, frame = 208
 1726              		@ frame_needed = 0, uses_anonymous_args = 0
 163:src/menu.c    **** }
 1727              		.loc 1 163 3 view .LVU480
 162:src/menu.c    ****   display_menu (get_current_menu_ref());
 1728              		.loc 1 162 30 is_stmt 0 view .LVU481
 1729 0000 10B5     		push	{r4, lr}
 1730              		.cfi_def_cfa_offset 8
 1731              		.cfi_offset 4, -8
 1732              		.cfi_offset 14, -4
 1733 0002 E4B0     		sub	sp, sp, #400
 1734              		.cfi_def_cfa_offset 408
 163:src/menu.c    **** }
 1735              		.loc 1 163 3 view .LVU482
 1736 0004 30AC     		add	r4, sp, #192
 1737 0006 2046     		mov	r0, r4
 1738 0008 FFF7FEFF 		bl	get_current_menu_ref
 1739              	.LVL126:
 1740 000c 34A9     		add	r1, sp, #208
 1741 000e C022     		movs	r2, #192
 1742 0010 6846     		mov	r0, sp
 1743 0012 FFF7FEFF 		bl	memcpy
 1744              	.LVL127:
 1745 0016 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1746 001a FFF7FEFF 		bl	display_menu
 1747              	.LVL128:
 164:src/menu.c    **** 
 1748              		.loc 1 164 1 view .LVU483
 1749 001e 64B0     		add	sp, sp, #400
 1750              		.cfi_def_cfa_offset 8
 1751              		@ sp needed
 1752 0020 10BD     		pop	{r4, pc}
 1753              		.cfi_endproc
 1754              	.LFE11:
 1756 0022 00BF     		.section	.text.all_menu_dots,"ax",%progbits
 1757              		.align	1
 1758              		.p2align 2,,3
ARM GAS  /tmp/cc7Wa57o.s 			page 50


 1759              		.global	all_menu_dots
 1760              		.syntax unified
 1761              		.thumb
 1762              		.thumb_func
 1763              		.fpu fpv4-sp-d16
 1765              	all_menu_dots:
 1766              	.LFB17:
 658:src/menu.c    **** 
 659:src/menu.c    **** void all_menu_dots () {
 1767              		.loc 1 659 23 is_stmt 1 view -0
 1768              		.cfi_startproc
 1769              		@ args = 0, pretend = 0, frame = 0
 1770              		@ frame_needed = 0, uses_anonymous_args = 0
 660:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1771              		.loc 1 660 3 view .LVU485
 1772              	.LBB97:
 1773              		.loc 1 660 8 view .LVU486
 1774              	.LVL129:
 1775              		.loc 1 660 21 view .LVU487
 1776              	.LBE97:
 659:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1777              		.loc 1 659 23 is_stmt 0 view .LVU488
 1778 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1779              		.cfi_def_cfa_offset 20
 1780              		.cfi_offset 4, -20
 1781              		.cfi_offset 5, -16
 1782              		.cfi_offset 6, -12
 1783              		.cfi_offset 7, -8
 1784              		.cfi_offset 14, -4
 1785              	.LBB101:
 1786              	.LBB98:
 661:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 662:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1787              		.loc 1 662 2 view .LVU489
 1788 0002 0D4E     		ldr	r6, .L181
 1789              	.LBE98:
 1790              	.LBE101:
 659:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1791              		.loc 1 659 23 view .LVU490
 1792 0004 83B0     		sub	sp, sp, #12
 1793              		.cfi_def_cfa_offset 32
 659:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1794              		.loc 1 659 23 view .LVU491
 1795 0006 0025     		movs	r5, #0
 1796              	.LBB102:
 1797              	.LBB99:
 1798              		.loc 1 662 2 view .LVU492
 1799 0008 FF27     		movs	r7, #255
 1800              	.LVL130:
 1801              	.L176:
 661:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1802              		.loc 1 661 23 is_stmt 1 view .LVU493
 1803              	.LBE99:
 1804              	.LBE102:
 659:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1805              		.loc 1 659 23 is_stmt 0 view .LVU494
 1806 000a E924     		movs	r4, #233
ARM GAS  /tmp/cc7Wa57o.s 			page 51


 1807              	.LVL131:
 1808              	.L177:
 1809              	.LBB103:
 1810              	.LBB100:
 1811              		.loc 1 662 2 is_stmt 1 discriminator 3 view .LVU495
 1812 000c 0323     		movs	r3, #3
 1813 000e 1A46     		mov	r2, r3
 1814 0010 2146     		mov	r1, r4
 1815 0012 2846     		mov	r0, r5
 1816 0014 0097     		str	r7, [sp]
 1817 0016 B047     		blx	r6
 1818              	.LVL132:
 663:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1819              		.loc 1 663 2 discriminator 3 view .LVU496
 1820 0018 0323     		movs	r3, #3
 1821 001a A4F11901 		sub	r1, r4, #25
 1822 001e 0097     		str	r7, [sp]
 1823 0020 1A46     		mov	r2, r3
 1824 0022 2846     		mov	r0, r5
 1825 0024 033C     		subs	r4, r4, #3
 1826 0026 B047     		blx	r6
 1827              	.LVL133:
 661:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1828              		.loc 1 661 32 discriminator 3 view .LVU497
 661:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1829              		.loc 1 661 23 discriminator 3 view .LVU498
 661:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1830              		.loc 1 661 5 is_stmt 0 discriminator 3 view .LVU499
 1831 0028 D72C     		cmp	r4, #215
 1832 002a EFD1     		bne	.L177
 1833              	.LBE100:
 660:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1834              		.loc 1 660 32 is_stmt 1 discriminator 2 view .LVU500
 660:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1835              		.loc 1 660 21 discriminator 2 view .LVU501
 1836 002c 0235     		adds	r5, r5, #2
 660:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1837              		.loc 1 660 3 is_stmt 0 discriminator 2 view .LVU502
 1838 002e B5F5C87F 		cmp	r5, #400
 1839 0032 EAD1     		bne	.L176
 1840              	.LBE103:
 664:src/menu.c    ****     }
 665:src/menu.c    ****   }
 666:src/menu.c    **** }  
 1841              		.loc 1 666 1 view .LVU503
 1842 0034 03B0     		add	sp, sp, #12
 1843              		.cfi_def_cfa_offset 20
 1844              		@ sp needed
 1845 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1846              	.L182:
 1847              		.align	2
 1848              	.L181:
 1849 0038 3D020008 		.word	134218301
 1850              		.cfi_endproc
 1851              	.LFE17:
 1853              		.section	.text.umen_store,"ax",%progbits
 1854              		.align	1
ARM GAS  /tmp/cc7Wa57o.s 			page 52


 1855              		.p2align 2,,3
 1856              		.global	umen_store
 1857              		.syntax unified
 1858              		.thumb
 1859              		.thumb_func
 1860              		.fpu fpv4-sp-d16
 1862              	umen_store:
 1863              	.LVL134:
 1864              	.LFB20:
 667:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1);
 668:src/menu.c    **** 
 669:src/menu.c    **** void build_user_menu(void){
 670:src/menu.c    ****   // find the label 'MNU'
 671:src/menu.c    ****    const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 672:src/menu.c    ****    build_user_menu_from_program (lbl);
 673:src/menu.c    **** }
 674:src/menu.c    **** 
 675:src/menu.c    **** void build_user_menu_from_program(int lbl)
 676:src/menu.c    **** {
 677:src/menu.c    ****   // find the label 'MNU'
 678:src/menu.c    ****   // const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 679:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 680:src/menu.c    ****   int i=0;
 681:src/menu.c    ****   s_opcode op;
 682:src/menu.c    ****   opcode opc;
 683:src/menu.c    ****   char buf1[16];
 684:src/menu.c    ****   char *p = buf1;
 685:src/menu.c    ****   char c;
 686:src/menu.c    ****   int finished = 0;
 687:src/menu.c    **** 
 688:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 689:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 690:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 691:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 692:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 693:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 694:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 695:src/menu.c    ****   }
 696:src/menu.c    ****   while (pc && i < 12) {
 697:src/menu.c    **** 
 698:src/menu.c    ****     pc = do_inc(pc, 0);
 699:src/menu.c    ****     opc = getprog(pc);
 700:src/menu.c    ****     op = (s_opcode) opc;
 701:src/menu.c    **** 
 702:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 703:src/menu.c    ****       break;
 704:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 705:src/menu.c    ****       if (i==4) {
 706:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 707:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 708:src/menu.c    ****       }
 709:src/menu.c    ****       else if (i==5) {
 710:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 711:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 712:src/menu.c    ****       }
 713:src/menu.c    ****       i += 1;
 714:src/menu.c    ****       continue;
ARM GAS  /tmp/cc7Wa57o.s 			page 53


 715:src/menu.c    ****     }
 716:src/menu.c    **** 
 717:src/menu.c    ****     if (isDBL(opc) && (opDBL(opc) == DBL_ALPHA)) { // is it double alpha?
 718:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 719:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 720:src/menu.c    **** 	i++;
 721:src/menu.c    ****     	p = buf1;
 722:src/menu.c    **** 	finished = 0;
 723:src/menu.c    ****       } // ..and start reading the new alpha
 724:src/menu.c    ****       *p++ = opc & 0xff; // character 1
 725:src/menu.c    ****       c = (opc >> 16) & 0xff;
 726:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 727:src/menu.c    **** 	*p++ = c;
 728:src/menu.c    **** 	c = opc>>24;
 729:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 730:src/menu.c    **** 	  *p++ = c;
 731:src/menu.c    ****       }
 732:src/menu.c    ****       *p = '\0'; // no ++: next character can overwrite the 0.
 733:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 734:src/menu.c    **** 	finished = 1;
 735:src/menu.c    ****       }
 736:src/menu.c    ****     }
 737:src/menu.c    ****     else { // Not a DBL_ALPHA op - the usual case
 738:src/menu.c    ****       if ( p == buf1 ) { // no alpha label to use
 739:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 740:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 741:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 742:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 743:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 744:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 745:src/menu.c    **** 	  }
 746:src/menu.c    **** 	  else {
 747:src/menu.c    **** 	    prt_umen(opc, buf1); // display rarg with argument
 748:src/menu.c    **** 	  }
 749:src/menu.c    **** 	}
 750:src/menu.c    **** 	else {
 751:src/menu.c    **** 	  prt_umen(opc, buf1); // display non-rarg thing
 752:src/menu.c    **** 	}
 753:src/menu.c    ****       }
 754:src/menu.c    ****       else { // there is an alpha label to use, so reset
 755:src/menu.c    **** 	p = buf1;
 756:src/menu.c    **** 	finished = 0;
 757:src/menu.c    ****       }
 758:src/menu.c    ****       umen_store (i, opc, buf1);
 759:src/menu.c    ****       i++;
 760:src/menu.c    ****     }
 761:src/menu.c    ****   }
 762:src/menu.c    **** }
 763:src/menu.c    **** 
 764:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1) {
 1865              		.loc 1 764 49 is_stmt 1 view -0
 1866              		.cfi_startproc
 1867              		@ args = 0, pretend = 0, frame = 0
 1868              		@ frame_needed = 0, uses_anonymous_args = 0
 765:src/menu.c    **** #pragma GCC diagnostic push
 766:src/menu.c    **** #pragma GCC diagnostic ignored "-Wstringop-truncation"
 767:src/menu.c    ****     if (i<6) {
ARM GAS  /tmp/cc7Wa57o.s 			page 54


 1869              		.loc 1 767 5 view .LVU505
 1870              		.loc 1 767 8 is_stmt 0 view .LVU506
 1871 0000 0528     		cmp	r0, #5
 764:src/menu.c    **** #pragma GCC diagnostic push
 1872              		.loc 1 764 49 view .LVU507
 1873 0002 70B5     		push	{r4, r5, r6, lr}
 1874              		.cfi_def_cfa_offset 16
 1875              		.cfi_offset 4, -16
 1876              		.cfi_offset 5, -12
 1877              		.cfi_offset 6, -8
 1878              		.cfi_offset 14, -4
 764:src/menu.c    **** #pragma GCC diagnostic push
 1879              		.loc 1 764 49 view .LVU508
 1880 0004 0D46     		mov	r5, r1
 1881 0006 0446     		mov	r4, r0
 1882 0008 1146     		mov	r1, r2
 1883              	.LVL135:
 1884              		.loc 1 767 8 view .LVU509
 1885 000a 0FDC     		bgt	.L184
 1886              	.LBB109:
 768:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1887              		.loc 1 768 7 is_stmt 1 view .LVU510
 1888              		.loc 1 768 31 is_stmt 0 view .LVU511
 1889 000c 104E     		ldr	r6, .L187
 1890 000e 0130     		adds	r0, r0, #1
 1891              	.LVL136:
 769:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1892              		.loc 1 769 42 view .LVU512
 1893 0010 06EB4414 		add	r4, r6, r4, lsl #5
 1894              	.LVL137:
 768:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1895              		.loc 1 768 7 view .LVU513
 1896 0014 0722     		movs	r2, #7
 1897              	.LVL138:
 768:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1898              		.loc 1 768 7 view .LVU514
 1899 0016 06EB4010 		add	r0, r6, r0, lsl #5
 1900              	.LVL139:
 768:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1901              		.loc 1 768 7 view .LVU515
 1902 001a FFF7FEFF 		bl	strncpy
 1903              	.LVL140:
 1904              		.loc 1 769 7 is_stmt 1 view .LVU516
 1905              		.loc 1 769 42 is_stmt 0 view .LVU517
 1906 001e 0022     		movs	r2, #0
 770:src/menu.c    ****       UserMenu.keys[i].unshifted = (struct _ndmap) {K_OP, opc};
 1907              		.loc 1 770 34 view .LVU518
 1908 0020 3423     		movs	r3, #52
 769:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1909              		.loc 1 769 42 view .LVU519
 1910 0022 84F82720 		strb	r2, [r4, #39]
 1911              		.loc 1 770 7 is_stmt 1 view .LVU520
 1912              		.loc 1 770 34 is_stmt 0 view .LVU521
 1913 0026 2374     		strb	r3, [r4, #16]
 1914 0028 6561     		str	r5, [r4, #20]
 1915              	.LBE109:
 771:src/menu.c    ****     }
ARM GAS  /tmp/cc7Wa57o.s 			page 55


 772:src/menu.c    ****     else {
 773:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 774:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 775:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 776:src/menu.c    ****     }
 777:src/menu.c    **** #pragma GCC diagnostic pop
 778:src/menu.c    **** }  
 1916              		.loc 1 778 1 view .LVU522
 1917 002a 70BD     		pop	{r4, r5, r6, pc}
 1918              	.LVL141:
 1919              	.L184:
 1920              	.LBB110:
 1921              	.LBI110:
 764:src/menu.c    **** #pragma GCC diagnostic push
 1922              		.loc 1 764 6 is_stmt 1 view .LVU523
 1923              	.LBB111:
 1924              	.LBB112:
 773:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1925              		.loc 1 773 7 view .LVU524
 773:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1926              		.loc 1 773 30 is_stmt 0 view .LVU525
 1927 002c 841F     		subs	r4, r0, #6
 773:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1928              		.loc 1 773 33 view .LVU526
 1929 002e 084E     		ldr	r6, .L187
 1930 0030 6401     		lsls	r4, r4, #5
 1931 0032 04F12800 		add	r0, r4, #40
 1932              	.LVL142:
 773:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1933              		.loc 1 773 7 view .LVU527
 1934 0036 0722     		movs	r2, #7
 774:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1935              		.loc 1 774 42 view .LVU528
 1936 0038 3444     		add	r4, r4, r6
 773:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1937              		.loc 1 773 7 view .LVU529
 1938 003a 3044     		add	r0, r0, r6
 1939 003c FFF7FEFF 		bl	strncpy
 1940              	.LVL143:
 774:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1941              		.loc 1 774 7 is_stmt 1 view .LVU530
 774:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1942              		.loc 1 774 42 is_stmt 0 view .LVU531
 1943 0040 0022     		movs	r2, #0
 775:src/menu.c    ****     }
 1944              		.loc 1 775 34 view .LVU532
 1945 0042 3423     		movs	r3, #52
 774:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1946              		.loc 1 774 42 view .LVU533
 1947 0044 84F82F20 		strb	r2, [r4, #47]
 775:src/menu.c    ****     }
 1948              		.loc 1 775 7 is_stmt 1 view .LVU534
 1949              	.LVL144:
 775:src/menu.c    ****     }
 1950              		.loc 1 775 34 is_stmt 0 view .LVU535
 1951 0048 2376     		strb	r3, [r4, #24]
 1952 004a E561     		str	r5, [r4, #28]
ARM GAS  /tmp/cc7Wa57o.s 			page 56


 1953              	.LBE112:
 1954              	.LBE111:
 1955              	.LBE110:
 1956              		.loc 1 778 1 view .LVU536
 1957 004c 70BD     		pop	{r4, r5, r6, pc}
 1958              	.LVL145:
 1959              	.L188:
 1960              		.loc 1 778 1 view .LVU537
 1961 004e 00BF     		.align	2
 1962              	.L187:
 1963 0050 00000000 		.word	.LANCHOR4
 1964              		.cfi_endproc
 1965              	.LFE20:
 1967              		.section	.text.build_user_menu_from_program,"ax",%progbits
 1968              		.align	1
 1969              		.p2align 2,,3
 1970              		.global	build_user_menu_from_program
 1971              		.syntax unified
 1972              		.thumb
 1973              		.thumb_func
 1974              		.fpu fpv4-sp-d16
 1976              	build_user_menu_from_program:
 1977              	.LVL146:
 1978              	.LFB19:
 676:src/menu.c    ****   // find the label 'MNU'
 1979              		.loc 1 676 1 is_stmt 1 view -0
 1980              		.cfi_startproc
 1981              		@ args = 0, pretend = 0, frame = 16
 1982              		@ frame_needed = 0, uses_anonymous_args = 0
 679:src/menu.c    ****   int i=0;
 1983              		.loc 1 679 3 view .LVU539
 676:src/menu.c    ****   // find the label 'MNU'
 1984              		.loc 1 676 1 is_stmt 0 view .LVU540
 1985 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1986              		.cfi_def_cfa_offset 36
 1987              		.cfi_offset 4, -36
 1988              		.cfi_offset 5, -32
 1989              		.cfi_offset 6, -28
 1990              		.cfi_offset 7, -24
 1991              		.cfi_offset 8, -20
 1992              		.cfi_offset 9, -16
 1993              		.cfi_offset 10, -12
 1994              		.cfi_offset 11, -8
 1995              		.cfi_offset 14, -4
 679:src/menu.c    ****   int i=0;
 1996              		.loc 1 679 21 view .LVU541
 1997 0004 0021     		movs	r1, #0
 676:src/menu.c    ****   // find the label 'MNU'
 1998              		.loc 1 676 1 view .LVU542
 1999 0006 85B0     		sub	sp, sp, #20
 2000              		.cfi_def_cfa_offset 56
 679:src/menu.c    ****   int i=0;
 2001              		.loc 1 679 21 view .LVU543
 2002 0008 FFF7FEFF 		bl	findmultilbl
 2003              	.LVL147:
 679:src/menu.c    ****   int i=0;
 2004              		.loc 1 679 21 view .LVU544
ARM GAS  /tmp/cc7Wa57o.s 			page 57


 2005 000c 5C4B     		ldr	r3, .L240
 2006 000e 0546     		mov	r5, r0
 2007              	.LVL148:
 680:src/menu.c    ****   s_opcode op;
 2008              		.loc 1 680 3 is_stmt 1 view .LVU545
 681:src/menu.c    ****   opcode opc;
 2009              		.loc 1 681 3 view .LVU546
 682:src/menu.c    ****   char buf1[16];
 2010              		.loc 1 682 3 view .LVU547
 683:src/menu.c    ****   char *p = buf1;
 2011              		.loc 1 683 3 view .LVU548
 684:src/menu.c    ****   char c;
 2012              		.loc 1 684 3 view .LVU549
 685:src/menu.c    ****   int finished = 0;
 2013              		.loc 1 685 3 view .LVU550
 686:src/menu.c    **** 
 2014              		.loc 1 686 3 view .LVU551
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2015              		.loc 1 688 3 view .LVU552
 2016              	.LBB113:
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2017              		.loc 1 688 8 view .LVU553
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2018              		.loc 1 688 19 view .LVU554
 689:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2019              		.loc 1 689 43 is_stmt 0 view .LVU555
 2020 0010 0022     		movs	r2, #0
 2021 0012 03F1C000 		add	r0, r3, #192
 2022              	.LVL149:
 691:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2023              		.loc 1 691 42 view .LVU556
 2024 0016 2E21     		movs	r1, #46
 2025              	.LVL150:
 2026              	.L190:
 689:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2027              		.loc 1 689 7 is_stmt 1 discriminator 3 view .LVU557
 689:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2028              		.loc 1 689 43 is_stmt 0 discriminator 3 view .LVU558
 2029 0018 83F82020 		strb	r2, [r3, #32]
 690:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 2030              		.loc 1 690 7 is_stmt 1 discriminator 3 view .LVU559
 690:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 2031              		.loc 1 690 40 is_stmt 0 discriminator 3 view .LVU560
 2032 001c 5A61     		str	r2, [r3, #20]
 691:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2033              		.loc 1 691 7 is_stmt 1 discriminator 3 view .LVU561
 691:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2034              		.loc 1 691 42 is_stmt 0 discriminator 3 view .LVU562
 2035 001e 1974     		strb	r1, [r3, #16]
 692:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 2036              		.loc 1 692 7 is_stmt 1 discriminator 3 view .LVU563
 692:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 2037              		.loc 1 692 41 is_stmt 0 discriminator 3 view .LVU564
 2038 0020 83F82820 		strb	r2, [r3, #40]
 693:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 2039              		.loc 1 693 7 is_stmt 1 discriminator 3 view .LVU565
 693:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
ARM GAS  /tmp/cc7Wa57o.s 			page 58


 2040              		.loc 1 693 38 is_stmt 0 discriminator 3 view .LVU566
 2041 0024 DA61     		str	r2, [r3, #28]
 694:src/menu.c    ****   }
 2042              		.loc 1 694 7 is_stmt 1 discriminator 3 view .LVU567
 694:src/menu.c    ****   }
 2043              		.loc 1 694 40 is_stmt 0 discriminator 3 view .LVU568
 2044 0026 1976     		strb	r1, [r3, #24]
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2045              		.loc 1 688 24 is_stmt 1 discriminator 3 view .LVU569
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2046              		.loc 1 688 19 discriminator 3 view .LVU570
 2047 0028 2033     		adds	r3, r3, #32
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2048              		.loc 1 688 3 is_stmt 0 discriminator 3 view .LVU571
 2049 002a 8342     		cmp	r3, r0
 2050 002c F4D1     		bne	.L190
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2051              		.loc 1 688 3 discriminator 3 view .LVU572
 2052              	.LBE113:
 696:src/menu.c    **** 
 2053              		.loc 1 696 9 is_stmt 1 view .LVU573
 2054 002e 65B3     		cbz	r5, .L189
 2055              	.LBB114:
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2056              		.loc 1 710 29 is_stmt 0 view .LVU574
 2057 0030 DFF86891 		ldr	r9, .L240+28
 2058              	.LBE114:
 686:src/menu.c    **** 
 2059              		.loc 1 686 7 view .LVU575
 2060 0034 4FF00008 		mov	r8, #0
 684:src/menu.c    ****   char c;
 2061              		.loc 1 684 9 view .LVU576
 2062 0038 6E46     		mov	r6, sp
 2063              	.LBB115:
 707:src/menu.c    ****       }
 2064              		.loc 1 707 2 view .LVU577
 2065 003a A9F1100A 		sub	r10, r9, #16
 2066              	.LBE115:
 680:src/menu.c    ****   s_opcode op;
 2067              		.loc 1 680 7 view .LVU578
 2068 003e C346     		mov	fp, r8
 684:src/menu.c    ****   char c;
 2069              		.loc 1 684 9 view .LVU579
 2070 0040 3746     		mov	r7, r6
 2071              	.LVL151:
 2072              	.L191:
 698:src/menu.c    ****     opc = getprog(pc);
 2073              		.loc 1 698 5 is_stmt 1 view .LVU580
 698:src/menu.c    ****     opc = getprog(pc);
 2074              		.loc 1 698 10 is_stmt 0 view .LVU581
 2075 0042 2846     		mov	r0, r5
 2076 0044 0021     		movs	r1, #0
 2077 0046 FFF7FEFF 		bl	do_inc
 2078              	.LVL152:
 2079 004a 0546     		mov	r5, r0
 2080              	.LVL153:
 699:src/menu.c    ****     op = (s_opcode) opc;
ARM GAS  /tmp/cc7Wa57o.s 			page 59


 2081              		.loc 1 699 5 is_stmt 1 view .LVU582
 699:src/menu.c    ****     op = (s_opcode) opc;
 2082              		.loc 1 699 11 is_stmt 0 view .LVU583
 2083 004c FFF7FEFF 		bl	getprog
 2084              	.LVL154:
 700:src/menu.c    **** 
 2085              		.loc 1 700 8 view .LVU584
 2086 0050 83B2     		uxth	r3, r0
 702:src/menu.c    ****       break;
 2087              		.loc 1 702 8 view .LVU585
 2088 0052 B3F59D7F 		cmp	r3, #314
 699:src/menu.c    ****     op = (s_opcode) opc;
 2089              		.loc 1 699 11 view .LVU586
 2090 0056 0446     		mov	r4, r0
 2091              	.LVL155:
 700:src/menu.c    **** 
 2092              		.loc 1 700 5 is_stmt 1 view .LVU587
 702:src/menu.c    ****       break;
 2093              		.loc 1 702 5 view .LVU588
 702:src/menu.c    ****       break;
 2094              		.loc 1 702 8 is_stmt 0 view .LVU589
 2095 0058 17D0     		beq	.L189
 704:src/menu.c    ****       if (i==4) {
 2096              		.loc 1 704 5 is_stmt 1 view .LVU590
 704:src/menu.c    ****       if (i==4) {
 2097              		.loc 1 704 8 is_stmt 0 view .LVU591
 2098 005a B3F5807F 		cmp	r3, #256
 2099 005e 43D0     		beq	.L232
 717:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2100              		.loc 1 717 5 is_stmt 1 view .LVU592
 717:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2101              		.loc 1 717 9 is_stmt 0 view .LVU593
 2102 0060 00F47042 		and	r2, r0, #61440
 717:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2103              		.loc 1 717 8 view .LVU594
 2104 0064 B2F5704F 		cmp	r2, #61440
 2105 0068 12D0     		beq	.L233
 2106              	.L197:
 738:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2107              		.loc 1 738 7 is_stmt 1 view .LVU595
 738:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2108              		.loc 1 738 10 is_stmt 0 view .LVU596
 2109 006a B742     		cmp	r7, r6
 2110 006c 26D0     		beq	.L234
 756:src/menu.c    ****       }
 2111              		.loc 1 756 11 view .LVU597
 2112 006e 4FF00008 		mov	r8, #0
 2113              	.LVL156:
 2114              	.L203:
 758:src/menu.c    ****       i++;
 2115              		.loc 1 758 7 is_stmt 1 view .LVU598
 2116 0072 5846     		mov	r0, fp
 2117 0074 2146     		mov	r1, r4
 2118 0076 3246     		mov	r2, r6
 2119 0078 FFF7FEFF 		bl	umen_store
 2120              	.LVL157:
 759:src/menu.c    ****     }
ARM GAS  /tmp/cc7Wa57o.s 			page 60


 2121              		.loc 1 759 7 view .LVU599
 759:src/menu.c    ****     }
 2122              		.loc 1 759 8 is_stmt 0 view .LVU600
 2123 007c 0BF1010B 		add	fp, fp, #1
 2124              	.LVL158:
 759:src/menu.c    ****     }
 2125              		.loc 1 759 8 view .LVU601
 2126 0080 3746     		mov	r7, r6
 2127              	.LVL159:
 2128              	.L196:
 696:src/menu.c    **** 
 2129              		.loc 1 696 9 is_stmt 1 view .LVU602
 2130 0082 15B1     		cbz	r5, .L189
 696:src/menu.c    **** 
 2131              		.loc 1 696 13 is_stmt 0 discriminator 1 view .LVU603
 2132 0084 BBF10C0F 		cmp	fp, #12
 2133 0088 DBD1     		bne	.L191
 2134              	.LVL160:
 2135              	.L189:
 762:src/menu.c    **** 
 2136              		.loc 1 762 1 view .LVU604
 2137 008a 05B0     		add	sp, sp, #20
 2138              		.cfi_remember_state
 2139              		.cfi_def_cfa_offset 36
 2140              		@ sp needed
 2141 008c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2142              	.LVL161:
 2143              	.L233:
 2144              		.cfi_restore_state
 717:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2145              		.loc 1 717 24 discriminator 1 view .LVU605
 2146 0090 C0F30321 		ubfx	r1, r0, #8, #4
 717:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2147              		.loc 1 717 20 discriminator 1 view .LVU606
 2148 0094 0A29     		cmp	r1, #10
 2149 0096 E8D1     		bne	.L197
 718:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2150              		.loc 1 718 7 is_stmt 1 view .LVU607
 718:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2151              		.loc 1 718 10 is_stmt 0 view .LVU608
 2152 0098 B8F1000F 		cmp	r8, #0
 2153 009c 40D1     		bne	.L198
 718:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2154              		.loc 1 718 29 discriminator 1 view .LVU609
 2155 009e BB1B     		subs	r3, r7, r6
 2156              	.LVL162:
 718:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2157              		.loc 1 718 24 discriminator 1 view .LVU610
 2158 00a0 062B     		cmp	r3, #6
 2159 00a2 3DD0     		beq	.L198
 2160              	.LVL163:
 724:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2161              		.loc 1 724 7 is_stmt 1 view .LVU611
 726:src/menu.c    **** 	*p++ = c;
 2162              		.loc 1 726 10 is_stmt 0 view .LVU612
 2163 00a4 14F47F0F 		tst	r4, #16711680
 724:src/menu.c    ****       c = (opc >> 16) & 0xff;
ARM GAS  /tmp/cc7Wa57o.s 			page 61


 2164              		.loc 1 724 12 view .LVU613
 2165 00a8 3C70     		strb	r4, [r7]
 725:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2166              		.loc 1 725 7 is_stmt 1 view .LVU614
 725:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2167              		.loc 1 725 9 is_stmt 0 view .LVU615
 2168 00aa C4F30743 		ubfx	r3, r4, #16, #8
 2169              	.LVL164:
 726:src/menu.c    **** 	*p++ = c;
 2170              		.loc 1 726 7 is_stmt 1 view .LVU616
 726:src/menu.c    **** 	*p++ = c;
 2171              		.loc 1 726 10 is_stmt 0 view .LVU617
 2172 00ae 24D1     		bne	.L235
 2173              	.LVL165:
 2174              	.L200:
 724:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2175              		.loc 1 724 9 view .LVU618
 2176 00b0 0137     		adds	r7, r7, #1
 2177              	.LVL166:
 2178              	.L202:
 732:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2179              		.loc 1 732 7 is_stmt 1 view .LVU619
 732:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2180              		.loc 1 732 10 is_stmt 0 view .LVU620
 2181 00b2 0023     		movs	r3, #0
 2182 00b4 3B70     		strb	r3, [r7]
 733:src/menu.c    **** 	finished = 1;
 2183              		.loc 1 733 7 is_stmt 1 view .LVU621
 734:src/menu.c    ****       }
 2184              		.loc 1 734 11 is_stmt 0 view .LVU622
 2185 00b6 4FF00108 		mov	r8, #1
 2186 00ba E2E7     		b	.L196
 2187              	.LVL167:
 2188              	.L234:
 739:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2189              		.loc 1 739 2 is_stmt 1 view .LVU623
 2190 00bc A0B2     		uxth	r0, r4
 2191              	.LVL168:
 739:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2192              		.loc 1 739 5 is_stmt 0 view .LVU624
 2193 00be 72B1     		cbz	r2, .L204
 739:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2194              		.loc 1 739 6 discriminator 1 view .LVU625
 2195 00c0 B2F5704F 		cmp	r2, #61440
 2196 00c4 0BD0     		beq	.L204
 2197              	.LBB116:
 740:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2198              		.loc 1 740 4 is_stmt 1 view .LVU626
 740:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2199              		.loc 1 740 26 is_stmt 0 view .LVU627
 2200 00c6 1B0A     		lsrs	r3, r3, #8
 2201              	.LVL169:
 740:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2202              		.loc 1 740 26 view .LVU628
 2203 00c8 203B     		subs	r3, r3, #32
 2204 00ca DBB2     		uxtb	r3, r3
 2205              	.LVL170:
ARM GAS  /tmp/cc7Wa57o.s 			page 62


 741:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2206              		.loc 1 741 4 is_stmt 1 view .LVU629
 741:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2207              		.loc 1 741 7 is_stmt 0 view .LVU630
 2208 00cc 242B     		cmp	r3, #36
 2209 00ce 06D0     		beq	.L204
 741:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2210              		.loc 1 741 28 discriminator 1 view .LVU631
 2211 00d0 6C2B     		cmp	r3, #108
 2212 00d2 04D0     		beq	.L204
 742:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 2213              		.loc 1 742 9 view .LVU632
 2214 00d4 012B     		cmp	r3, #1
 2215 00d6 02D9     		bls	.L204
 743:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2216              		.loc 1 743 9 view .LVU633
 2217 00d8 10F0FF0F 		tst	r0, #255
 2218 00dc 4BD0     		beq	.L236
 2219              	.LVL171:
 2220              	.L204:
 743:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2221              		.loc 1 743 9 view .LVU634
 2222              	.LBE116:
 751:src/menu.c    **** 	}
 2223              		.loc 1 751 4 is_stmt 1 view .LVU635
 2224 00de 3146     		mov	r1, r6
 2225 00e0 2046     		mov	r0, r4
 2226 00e2 FFF7FEFF 		bl	prt_umen
 2227              	.LVL172:
 2228 00e6 C4E7     		b	.L203
 2229              	.LVL173:
 2230              	.L232:
 705:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2231              		.loc 1 705 7 view .LVU636
 705:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2232              		.loc 1 705 10 is_stmt 0 view .LVU637
 2233 00e8 BBF1040F 		cmp	fp, #4
 2234 00ec 28D0     		beq	.L237
 709:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2235              		.loc 1 709 12 is_stmt 1 view .LVU638
 709:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2236              		.loc 1 709 15 is_stmt 0 view .LVU639
 2237 00ee BBF1050F 		cmp	fp, #5
 2238 00f2 32D0     		beq	.L238
 2239              	.LVL174:
 2240              	.L195:
 713:src/menu.c    ****       continue;
 2241              		.loc 1 713 7 is_stmt 1 view .LVU640
 713:src/menu.c    ****       continue;
 2242              		.loc 1 713 9 is_stmt 0 view .LVU641
 2243 00f4 0BF1010B 		add	fp, fp, #1
 2244              	.LVL175:
 714:src/menu.c    ****     }
 2245              		.loc 1 714 7 is_stmt 1 view .LVU642
 2246 00f8 C3E7     		b	.L196
 2247              	.LVL176:
 2248              	.L235:
ARM GAS  /tmp/cc7Wa57o.s 			page 63


 727:src/menu.c    **** 	c = opc>>24;
 2249              		.loc 1 727 2 view .LVU643
 727:src/menu.c    **** 	c = opc>>24;
 2250              		.loc 1 727 7 is_stmt 0 view .LVU644
 2251 00fa 7B70     		strb	r3, [r7, #1]
 728:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2252              		.loc 1 728 2 is_stmt 1 view .LVU645
 729:src/menu.c    **** 	  *p++ = c;
 2253              		.loc 1 729 5 is_stmt 0 view .LVU646
 2254 00fc 230E     		lsrs	r3, r4, #24
 2255              	.LVL177:
 728:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2256              		.loc 1 728 4 view .LVU647
 2257 00fe 4FEA1461 		lsr	r1, r4, #24
 2258              	.LVL178:
 729:src/menu.c    **** 	  *p++ = c;
 2259              		.loc 1 729 2 is_stmt 1 view .LVU648
 729:src/menu.c    **** 	  *p++ = c;
 2260              		.loc 1 729 5 is_stmt 0 view .LVU649
 2261 0102 36D0     		beq	.L239
 730:src/menu.c    ****       }
 2262              		.loc 1 730 4 is_stmt 1 view .LVU650
 730:src/menu.c    ****       }
 2263              		.loc 1 730 6 is_stmt 0 view .LVU651
 2264 0104 FB1C     		adds	r3, r7, #3
 2265              	.LVL179:
 733:src/menu.c    **** 	finished = 1;
 2266              		.loc 1 733 26 view .LVU652
 2267 0106 A3EB0608 		sub	r8, r3, r6
 733:src/menu.c    **** 	finished = 1;
 2268              		.loc 1 733 21 view .LVU653
 2269 010a A8F10608 		sub	r8, r8, #6
 732:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2270              		.loc 1 732 10 view .LVU654
 2271 010e 0022     		movs	r2, #0
 733:src/menu.c    **** 	finished = 1;
 2272              		.loc 1 733 21 view .LVU655
 2273 0110 B8FA88F8 		clz	r8, r8
 730:src/menu.c    ****       }
 2274              		.loc 1 730 9 view .LVU656
 2275 0114 B970     		strb	r1, [r7, #2]
 732:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2276              		.loc 1 732 7 is_stmt 1 view .LVU657
 732:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2277              		.loc 1 732 10 is_stmt 0 view .LVU658
 2278 0116 FA70     		strb	r2, [r7, #3]
 733:src/menu.c    **** 	finished = 1;
 2279              		.loc 1 733 7 is_stmt 1 view .LVU659
 733:src/menu.c    **** 	finished = 1;
 2280              		.loc 1 733 21 is_stmt 0 view .LVU660
 2281 0118 4FEA5818 		lsr	r8, r8, #5
 730:src/menu.c    ****       }
 2282              		.loc 1 730 6 view .LVU661
 2283 011c 1F46     		mov	r7, r3
 2284 011e B0E7     		b	.L196
 2285              	.LVL180:
 2286              	.L198:
ARM GAS  /tmp/cc7Wa57o.s 			page 64


 719:src/menu.c    **** 	i++;
 2287              		.loc 1 719 2 is_stmt 1 view .LVU662
 2288 0120 5846     		mov	r0, fp
 2289              	.LVL181:
 719:src/menu.c    **** 	i++;
 2290              		.loc 1 719 2 is_stmt 0 view .LVU663
 2291 0122 3246     		mov	r2, r6
 2292 0124 4FF48071 		mov	r1, #256
 721:src/menu.c    **** 	finished = 0;
 2293              		.loc 1 721 8 view .LVU664
 2294 0128 3746     		mov	r7, r6
 2295              	.LVL182:
 719:src/menu.c    **** 	i++;
 2296              		.loc 1 719 2 view .LVU665
 2297 012a FFF7FEFF 		bl	umen_store
 2298              	.LVL183:
 720:src/menu.c    ****     	p = buf1;
 2299              		.loc 1 720 2 is_stmt 1 view .LVU666
 726:src/menu.c    **** 	*p++ = c;
 2300              		.loc 1 726 10 is_stmt 0 view .LVU667
 2301 012e 14F47F0F 		tst	r4, #16711680
 720:src/menu.c    ****     	p = buf1;
 2302              		.loc 1 720 3 view .LVU668
 2303 0132 0BF1010B 		add	fp, fp, #1
 2304              	.LVL184:
 721:src/menu.c    **** 	finished = 0;
 2305              		.loc 1 721 6 is_stmt 1 view .LVU669
 722:src/menu.c    ****       } // ..and start reading the new alpha
 2306              		.loc 1 722 2 view .LVU670
 724:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2307              		.loc 1 724 7 view .LVU671
 724:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2308              		.loc 1 724 12 is_stmt 0 view .LVU672
 2309 0136 3C70     		strb	r4, [r7]
 725:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2310              		.loc 1 725 7 is_stmt 1 view .LVU673
 725:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2311              		.loc 1 725 9 is_stmt 0 view .LVU674
 2312 0138 C4F30743 		ubfx	r3, r4, #16, #8
 2313              	.LVL185:
 726:src/menu.c    **** 	*p++ = c;
 2314              		.loc 1 726 7 is_stmt 1 view .LVU675
 726:src/menu.c    **** 	*p++ = c;
 2315              		.loc 1 726 10 is_stmt 0 view .LVU676
 2316 013c B8D0     		beq	.L200
 2317              	.LVL186:
 726:src/menu.c    **** 	*p++ = c;
 2318              		.loc 1 726 10 view .LVU677
 2319 013e DCE7     		b	.L235
 2320              	.LVL187:
 2321              	.L237:
 2322              	.LBB117:
 706:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2323              		.loc 1 706 2 is_stmt 1 view .LVU678
 706:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2324              		.loc 1 706 29 is_stmt 0 view .LVU679
 2325 0140 104B     		ldr	r3, .L240+4
ARM GAS  /tmp/cc7Wa57o.s 			page 65


 2326              	.LVL188:
 707:src/menu.c    ****       }
 2327              		.loc 1 707 2 view .LVU680
 2328 0142 114C     		ldr	r4, .L240+8
 706:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2329              		.loc 1 706 29 view .LVU681
 2330 0144 93E80300 		ldm	r3, {r0, r1}
 2331              	.LVL189:
 706:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2332              		.loc 1 706 29 view .LVU682
 2333 0148 104B     		ldr	r3, .L240+12
 707:src/menu.c    ****       }
 2334              		.loc 1 707 2 view .LVU683
 2335 014a 0522     		movs	r2, #5
 706:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2336              		.loc 1 706 29 view .LVU684
 2337 014c 83E80300 		stm	r3, {r0, r1}
 707:src/menu.c    ****       }
 2338              		.loc 1 707 2 is_stmt 1 view .LVU685
 2339 0150 2168     		ldr	r1, [r4]
 2340 0152 5046     		mov	r0, r10
 2341 0154 FFF7FEFF 		bl	strncpy
 2342              	.LVL190:
 2343              	.LBE117:
 2344 0158 CCE7     		b	.L195
 2345              	.LVL191:
 2346              	.L238:
 2347              	.LBB118:
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2348              		.loc 1 710 2 view .LVU686
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2349              		.loc 1 710 29 is_stmt 0 view .LVU687
 2350 015a 0D4B     		ldr	r3, .L240+16
 2351              	.LVL192:
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2352              		.loc 1 710 29 view .LVU688
 2353 015c 93E80300 		ldm	r3, {r0, r1}
 2354              	.LVL193:
 711:src/menu.c    ****       }
 2355              		.loc 1 711 2 view .LVU689
 2356 0160 0C4B     		ldr	r3, .L240+20
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2357              		.loc 1 710 29 view .LVU690
 2358 0162 89E80300 		stm	r9, {r0, r1}
 711:src/menu.c    ****       }
 2359              		.loc 1 711 2 is_stmt 1 view .LVU691
 2360 0166 5A46     		mov	r2, fp
 2361 0168 1968     		ldr	r1, [r3]
 2362 016a 0B48     		ldr	r0, .L240+24
 2363 016c FFF7FEFF 		bl	strncpy
 2364              	.LVL194:
 2365 0170 C0E7     		b	.L195
 2366              	.LVL195:
 2367              	.L239:
 711:src/menu.c    ****       }
 2368              		.loc 1 711 2 is_stmt 0 view .LVU692
 2369              	.LBE118:
ARM GAS  /tmp/cc7Wa57o.s 			page 66


 727:src/menu.c    **** 	c = opc>>24;
 2370              		.loc 1 727 4 view .LVU693
 2371 0172 0237     		adds	r7, r7, #2
 2372              	.LVL196:
 727:src/menu.c    **** 	c = opc>>24;
 2373              		.loc 1 727 4 view .LVU694
 2374 0174 9DE7     		b	.L202
 2375              	.LVL197:
 2376              	.L236:
 2377              	.LBB119:
 744:src/menu.c    **** 	  }
 2378              		.loc 1 744 6 is_stmt 1 view .LVU695
 2379 0176 3146     		mov	r1, r6
 2380 0178 FFF7FEFF 		bl	catcmd
 2381              	.LVL198:
 744:src/menu.c    **** 	  }
 2382              		.loc 1 744 6 is_stmt 0 view .LVU696
 2383 017c 79E7     		b	.L203
 2384              	.L241:
 2385 017e 00BF     		.align	2
 2386              	.L240:
 2387 0180 00000000 		.word	.LANCHOR4
 2388 0184 00000000 		.word	.LANCHOR5
 2389 0188 00000000 		.word	.LANCHOR6
 2390 018c 90000000 		.word	.LANCHOR4+144
 2391 0190 08000000 		.word	.LANCHOR5+8
 2392 0194 00000000 		.word	.LANCHOR7
 2393 0198 C0000000 		.word	.LANCHOR4+192
 2394 019c B0000000 		.word	.LANCHOR4+176
 2395              	.LBE119:
 2396              		.cfi_endproc
 2397              	.LFE19:
 2399              		.section	.text.build_user_menu,"ax",%progbits
 2400              		.align	1
 2401              		.p2align 2,,3
 2402              		.global	build_user_menu
 2403              		.syntax unified
 2404              		.thumb
 2405              		.thumb_func
 2406              		.fpu fpv4-sp-d16
 2408              	build_user_menu:
 2409              	.LFB18:
 669:src/menu.c    ****   // find the label 'MNU'
 2410              		.loc 1 669 27 is_stmt 1 view -0
 2411              		.cfi_startproc
 2412              		@ args = 0, pretend = 0, frame = 0
 2413              		@ frame_needed = 0, uses_anonymous_args = 0
 2414              		@ link register save eliminated.
 671:src/menu.c    ****    build_user_menu_from_program (lbl);
 2415              		.loc 1 671 4 view .LVU698
 2416              	.LVL199:
 672:src/menu.c    **** }
 2417              		.loc 1 672 4 view .LVU699
 2418 0000 0148     		ldr	r0, .L243
 2419 0002 FFF7FEBF 		b	build_user_menu_from_program
 2420              	.LVL200:
 2421              	.L244:
ARM GAS  /tmp/cc7Wa57o.s 			page 67


 2422 0006 00BF     		.align	2
 2423              	.L243:
 2424 0008 4DF04E55 		.word	1431236685
 2425              		.cfi_endproc
 2426              	.LFE18:
 2428              		.section	.text.shutdown,"ax",%progbits
 2429              		.align	1
 2430              		.p2align 2,,3
 2431              		.global	shutdown
 2432              		.syntax unified
 2433              		.thumb
 2434              		.thumb_func
 2435              		.fpu fpv4-sp-d16
 2437              	shutdown:
 2438              	.LFB22:
 2439              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #ifdef INCLUDE_STOPWATCH
  39:src/console.c **** #include "stopwatch.h"
  40:src/console.c **** #endif
  41:src/console.c **** #undef DM42SAFE
ARM GAS  /tmp/cc7Wa57o.s 			page 68


  42:src/console.c **** 
  43:src/console.c **** 
  44:src/console.c **** #ifdef DM42
  45:src/console.c **** 
  46:src/console.c **** #include <menu.c>
  47:src/console.c **** 
  48:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  49:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  50:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  51:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  52:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  53:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  54:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  55:src/console.c **** 
  56:src/console.c **** static struct _ndmap remap (const int c) {
  57:src/console.c **** 
  58:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  59:src/console.c **** 
  60:src/console.c **** #include "keytran.c"
  61:src/console.c **** 
  62:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  63:src/console.c **** 
  64:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  65:src/console.c **** 
  66:src/console.c ****   if (c == 44 ) {
  67:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  68:src/console.c ****     return sshot;
  69:src/console.c ****   }
  70:src/console.c ****   
  71:src/console.c ****   if (Running | Pause) {
  72:src/console.c ****     return mapping_running[c];
  73:src/console.c ****   }
  74:src/console.c **** 
  75:src/console.c ****   struct _menu Ref = get_current_menu_ref();
  76:src/console.c ****   
  77:src/console.c ****   switch (c) {
  78:src/console.c ****   case KEY_F1:
  79:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[0].unshifted;
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
  81:src/console.c ****   case KEY_F2:
  82:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[1].unshifted;
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
  84:src/console.c ****   case KEY_F3:
  85:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[2].unshifted;
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
  87:src/console.c ****   case KEY_F4:
  88:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[3].unshifted;
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
  90:src/console.c ****   case KEY_F5:
  91:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[4].unshifted;
  92:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
  93:src/console.c ****   case KEY_F6:
  94:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[5].unshifted;
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
  96:src/console.c ****   }
  97:src/console.c **** 
  98:src/console.c ****   if ( get_alpha_state() ) {
ARM GAS  /tmp/cc7Wa57o.s 			page 69


  99:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 100:src/console.c ****       switch (cur_shift()) { 
 101:src/console.c ****       case SHIFT_N:
 102:src/console.c **** 	return mapping_none[c]; // N -> F
 103:src/console.c **** 	break;
 104:src/console.c ****       case SHIFT_F:
 105:src/console.c **** 	return mapping_fshift[c]; // F -> G
 106:src/console.c **** 	break;
 107:src/console.c ****       case SHIFT_G:
 108:src/console.c **** 	return h_shift; // G -> H
 109:src/console.c **** 	break;
 110:src/console.c ****       case SHIFT_H:
 111:src/console.c **** 	return h_shift; // H -> N
 112:src/console.c ****       default:
 113:src/console.c **** 	return no_change;
 114:src/console.c ****       }
 115:src/console.c ****     }
 116:src/console.c ****     return mapping_alpha [c];
 117:src/console.c ****   }
 118:src/console.c **** 
 119:src/console.c ****   switch (cur_shift()) {
 120:src/console.c ****   case SHIFT_N:    
 121:src/console.c ****     return mapping_none[c];
 122:src/console.c ****     break;
 123:src/console.c ****   case SHIFT_F:
 124:src/console.c ****     return mapping_fshift[c];
 125:src/console.c ****     break;
 126:src/console.c ****   case SHIFT_G:
 127:src/console.c ****     return mapping_gshift[c];
 128:src/console.c ****     break;
 129:src/console.c ****   default:
 130:src/console.c ****     return no_change;
 131:src/console.c ****   }
 132:src/console.c **** }
 133:src/console.c **** 
 134:src/console.c **** #endif
 135:src/console.c **** 
 136:src/console.c **** void shutdown( void )
 137:src/console.c **** {
 2440              		.loc 2 137 1 view -0
 2441              		.cfi_startproc
 2442              		@ args = 0, pretend = 0, frame = 0
 2443              		@ frame_needed = 0, uses_anonymous_args = 0
 2444              		@ link register save eliminated.
 138:src/console.c **** #ifndef DM42
 139:src/console.c ****   checksum_all();
 140:src/console.c ****   setuptty( 1 );
 141:src/console.c ****   save_statefile( NULL );
 142:src/console.c ****   exit( 0 );
 143:src/console.c **** #else
 144:src/console.c ****   //  save_ram_file(0);
 145:src/console.c ****   SET_ST(STAT_PGM_END);
 2445              		.loc 2 145 3 view .LVU701
 2446 0000 024A     		ldr	r2, .L246
 2447 0002 1368     		ldr	r3, [r2]
 2448 0004 43F40073 		orr	r3, r3, #512
 2449 0008 1360     		str	r3, [r2]
ARM GAS  /tmp/cc7Wa57o.s 			page 70


 146:src/console.c **** #endif
 147:src/console.c **** }
 2450              		.loc 2 147 1 is_stmt 0 view .LVU702
 2451 000a 7047     		bx	lr
 2452              	.L247:
 2453              		.align	2
 2454              	.L246:
 2455 000c 00200010 		.word	268443648
 2456              		.cfi_endproc
 2457              	.LFE22:
 2459              		.section	.text.is_key_pressed,"ax",%progbits
 2460              		.align	1
 2461              		.p2align 2,,3
 2462              		.global	is_key_pressed
 2463              		.syntax unified
 2464              		.thumb
 2465              		.thumb_func
 2466              		.fpu fpv4-sp-d16
 2468              	is_key_pressed:
 2469              	.LFB23:
 148:src/console.c **** 
 149:src/console.c **** 
 150:src/console.c **** /*
 151:src/console.c ****  *  Dummies
 152:src/console.c ****  */
 153:src/console.c **** int is_key_pressed(void) 
 154:src/console.c **** {
 2470              		.loc 2 154 1 is_stmt 1 view -0
 2471              		.cfi_startproc
 2472              		@ args = 0, pretend = 0, frame = 0
 2473              		@ frame_needed = 0, uses_anonymous_args = 0
 155:src/console.c **** #ifdef DM42
 156:src/console.c ****   return !key_empty();
 2474              		.loc 2 156 3 view .LVU704
 154:src/console.c **** #ifdef DM42
 2475              		.loc 2 154 1 is_stmt 0 view .LVU705
 2476 0000 08B5     		push	{r3, lr}
 2477              		.cfi_def_cfa_offset 8
 2478              		.cfi_offset 3, -8
 2479              		.cfi_offset 14, -4
 2480              		.loc 2 156 11 view .LVU706
 2481 0002 034B     		ldr	r3, .L250
 2482 0004 9847     		blx	r3
 2483              	.LVL201:
 157:src/console.c **** #else
 158:src/console.c ****   return 0;
 159:src/console.c **** #endif
 160:src/console.c **** }
 2484              		.loc 2 160 1 view .LVU707
 2485 0006 B0FA80F0 		clz	r0, r0
 2486 000a 4009     		lsrs	r0, r0, #5
 2487 000c 08BD     		pop	{r3, pc}
 2488              	.L251:
 2489 000e 00BF     		.align	2
 2490              	.L250:
 2491 0010 7D030008 		.word	134218621
 2492              		.cfi_endproc
ARM GAS  /tmp/cc7Wa57o.s 			page 71


 2493              	.LFE23:
 2495              		.section	.text.get_key,"ax",%progbits
 2496              		.align	1
 2497              		.p2align 2,,3
 2498              		.global	get_key
 2499              		.syntax unified
 2500              		.thumb
 2501              		.thumb_func
 2502              		.fpu fpv4-sp-d16
 2504              	get_key:
 2505              	.LFB24:
 161:src/console.c **** 
 162:src/console.c **** int get_key(void)
 163:src/console.c **** {
 2506              		.loc 2 163 1 is_stmt 1 view -0
 2507              		.cfi_startproc
 2508              		@ args = 0, pretend = 0, frame = 0
 2509              		@ frame_needed = 0, uses_anonymous_args = 0
 2510              		@ link register save eliminated.
 164:src/console.c ****   #ifdef DM42
 165:src/console.c ****   return key_pop();
 2511              		.loc 2 165 3 view .LVU709
 2512              		.loc 2 165 10 is_stmt 0 view .LVU710
 2513 0000 004B     		ldr	r3, .L253
 2514 0002 1847     		bx	r3
 2515              	.LVL202:
 2516              	.L254:
 2517              		.align	2
 2518              	.L253:
 2519 0004 89030008 		.word	134218633
 2520              		.cfi_endproc
 2521              	.LFE24:
 2523              		.section	.text.put_key,"ax",%progbits
 2524              		.align	1
 2525              		.p2align 2,,3
 2526              		.global	put_key
 2527              		.syntax unified
 2528              		.thumb
 2529              		.thumb_func
 2530              		.fpu fpv4-sp-d16
 2532              	put_key:
 2533              	.LVL203:
 2534              	.LFB25:
 166:src/console.c ****   #else
 167:src/console.c ****   return 0;
 168:src/console.c ****   #endif
 169:src/console.c **** }
 170:src/console.c **** 
 171:src/console.c **** /*
 172:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 173:src/console.c ****  * 
 174:src/console.c ****  */
 175:src/console.c **** int put_key( int k )
 176:src/console.c **** {
 2535              		.loc 2 176 1 is_stmt 1 view -0
 2536              		.cfi_startproc
 2537              		@ args = 0, pretend = 0, frame = 48
ARM GAS  /tmp/cc7Wa57o.s 			page 72


 2538              		@ frame_needed = 0, uses_anonymous_args = 0
 2539              		@ link register save eliminated.
 177:src/console.c ****   #ifdef DM42
 178:src/console.c ****   const char wp34s_to_DM42[] = {
 2540              		.loc 2 178 3 view .LVU712
 176:src/console.c ****   #ifdef DM42
 2541              		.loc 2 176 1 is_stmt 0 view .LVU713
 2542 0000 70B4     		push	{r4, r5, r6}
 2543              		.cfi_def_cfa_offset 12
 2544              		.cfi_offset 4, -12
 2545              		.cfi_offset 5, -8
 2546              		.cfi_offset 6, -4
 2547              		.loc 2 178 14 view .LVU714
 2548 0002 0E4D     		ldr	r5, .L258
 176:src/console.c ****   #ifdef DM42
 2549              		.loc 2 176 1 view .LVU715
 2550 0004 0646     		mov	r6, r0
 2551              		.loc 2 178 14 view .LVU716
 2552 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2553              	.LVL204:
 176:src/console.c ****   #ifdef DM42
 2554              		.loc 2 176 1 view .LVU717
 2555 0008 8DB0     		sub	sp, sp, #52
 2556              		.cfi_def_cfa_offset 64
 2557              		.loc 2 178 14 view .LVU718
 2558 000a 01AC     		add	r4, sp, #4
 2559 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2560 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2561 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2562 0012 95E80700 		ldm	r5, {r0, r1, r2}
 2563 0016 03C4     		stmia	r4!, {r0, r1}
 179:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 180:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 181:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 182:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 183:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 184:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 185:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 186:src/console.c ****   
 187:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 2564              		.loc 2 187 6 view .LVU719
 2565 0018 282E     		cmp	r6, #40
 178:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 2566              		.loc 2 178 14 view .LVU720
 2567 001a 2270     		strb	r2, [r4]
 2568              		.loc 2 187 3 is_stmt 1 view .LVU721
 2569              		.loc 2 187 6 is_stmt 0 view .LVU722
 2570 001c 08D8     		bhi	.L256
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2571              		.loc 2 188 5 is_stmt 1 view .LVU723
 2572              		.loc 2 188 36 is_stmt 0 view .LVU724
 2573 001e 0CAB     		add	r3, sp, #48
 2574 0020 3046     		mov	r0, r6
 2575 0022 1844     		add	r0, r0, r3
 2576              		.loc 2 188 12 view .LVU725
 2577 0024 064B     		ldr	r3, .L258+4
 2578 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
ARM GAS  /tmp/cc7Wa57o.s 			page 73


 189:src/console.c ****   }
 190:src/console.c ****   else {
 191:src/console.c ****     return -1;
 192:src/console.c ****   }
 193:src/console.c ****   #else
 194:src/console.c ****   return k;
 195:src/console.c ****   #endif
 196:src/console.c **** }
 2579              		.loc 2 196 1 view .LVU726
 2580 002a 0DB0     		add	sp, sp, #52
 2581              		.cfi_remember_state
 2582              		.cfi_def_cfa_offset 12
 2583              		@ sp needed
 2584 002c 70BC     		pop	{r4, r5, r6}
 2585              		.cfi_restore 6
 2586              		.cfi_restore 5
 2587              		.cfi_restore 4
 2588              		.cfi_def_cfa_offset 0
 2589              	.LVL205:
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2590              		.loc 2 188 12 view .LVU727
 2591 002e 1847     		bx	r3
 2592              	.LVL206:
 2593              	.L256:
 2594              		.cfi_restore_state
 2595              		.loc 2 196 1 view .LVU728
 2596 0030 4FF0FF30 		mov	r0, #-1
 2597 0034 0DB0     		add	sp, sp, #52
 2598              		.cfi_def_cfa_offset 12
 2599              		@ sp needed
 2600 0036 70BC     		pop	{r4, r5, r6}
 2601              		.cfi_restore 6
 2602              		.cfi_restore 5
 2603              		.cfi_restore 4
 2604              		.cfi_def_cfa_offset 0
 2605              	.LVL207:
 2606              		.loc 2 196 1 view .LVU729
 2607 0038 7047     		bx	lr
 2608              	.L259:
 2609 003a 00BF     		.align	2
 2610              	.L258:
 2611 003c 10000000 		.word	.LANCHOR5+16
 2612 0040 81030008 		.word	134218625
 2613              		.cfi_endproc
 2614              	.LFE25:
 2616              		.section	.text.shift_down,"ax",%progbits
 2617              		.align	1
 2618              		.p2align 2,,3
 2619              		.global	shift_down
 2620              		.syntax unified
 2621              		.thumb
 2622              		.thumb_func
 2623              		.fpu fpv4-sp-d16
 2625              	shift_down:
 2626              	.LFB26:
 197:src/console.c **** 
 198:src/console.c **** enum shifts shift_down(void)
ARM GAS  /tmp/cc7Wa57o.s 			page 74


 199:src/console.c **** {
 2627              		.loc 2 199 1 is_stmt 1 view -0
 2628              		.cfi_startproc
 2629              		@ args = 0, pretend = 0, frame = 0
 2630              		@ frame_needed = 0, uses_anonymous_args = 0
 2631              		@ link register save eliminated.
 200:src/console.c **** 	return SHIFT_N;
 2632              		.loc 2 200 2 view .LVU731
 201:src/console.c **** }
 2633              		.loc 2 201 1 is_stmt 0 view .LVU732
 2634 0000 0020     		movs	r0, #0
 2635 0002 7047     		bx	lr
 2636              		.cfi_endproc
 2637              	.LFE26:
 2639              		.section	.text.start_key_timer,"ax",%progbits
 2640              		.align	1
 2641              		.p2align 2,,3
 2642              		.global	start_key_timer
 2643              		.syntax unified
 2644              		.thumb
 2645              		.thumb_func
 2646              		.fpu fpv4-sp-d16
 2648              	start_key_timer:
 2649              	.LFB27:
 202:src/console.c **** 
 203:src/console.c **** #ifndef DM42   // No serial operations for DM42
 204:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 205:src/console.c **** /*
 206:src/console.c ****  *  Open a COM port for transmission
 207:src/console.c ****  */
 208:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 209:src/console.c **** {
 210:src/console.c **** 	return 0;
 211:src/console.c **** }
 212:src/console.c **** 
 213:src/console.c **** 
 214:src/console.c **** /*
 215:src/console.c ****  *  Close the COM port after transmission is complete
 216:src/console.c ****  */
 217:src/console.c **** extern void close_port( void )
 218:src/console.c **** {
 219:src/console.c **** }
 220:src/console.c **** 
 221:src/console.c **** 
 222:src/console.c **** /*
 223:src/console.c ****  *  Output a single byte to the serial
 224:src/console.c ****  */
 225:src/console.c **** void put_byte( unsigned char byte )
 226:src/console.c **** {
 227:src/console.c **** 	report_err(ERR_PROG_BAD);
 228:src/console.c **** }
 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Force buffer flush
 233:src/console.c ****  */
 234:src/console.c **** void flush_comm( void )
ARM GAS  /tmp/cc7Wa57o.s 			page 75


 235:src/console.c **** {
 236:src/console.c **** }
 237:src/console.c **** 
 238:src/console.c **** #endif
 239:src/console.c **** #endif
 240:src/console.c **** 
 241:src/console.c **** 
 242:src/console.c **** /*
 243:src/console.c ****  *  Main loop
 244:src/console.c ****  */
 245:src/console.c **** #ifdef DM42
 246:src/console.c **** void start_key_timer (void);
 247:src/console.c **** long int keyticks (void);
 248:src/console.c **** void moveto (int line, int x);
 249:src/console.c **** 
 250:src/console.c **** static long int start_ticks;
 251:src/console.c **** 
 252:src/console.c **** void start_key_timer() {
 2650              		.loc 2 252 24 is_stmt 1 view -0
 2651              		.cfi_startproc
 2652              		@ args = 0, pretend = 0, frame = 0
 2653              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/console.c ****     start_ticks = get_rtc_ticks();
 2654              		.loc 2 253 5 view .LVU734
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 2655              		.loc 2 252 24 is_stmt 0 view .LVU735
 2656 0000 08B5     		push	{r3, lr}
 2657              		.cfi_def_cfa_offset 8
 2658              		.cfi_offset 3, -8
 2659              		.cfi_offset 14, -4
 2660              		.loc 2 253 19 view .LVU736
 2661 0002 024B     		ldr	r3, .L263
 2662 0004 9847     		blx	r3
 2663              	.LVL208:
 2664              		.loc 2 253 17 view .LVU737
 2665 0006 024B     		ldr	r3, .L263+4
 2666 0008 1860     		str	r0, [r3]
 254:src/console.c **** }
 2667              		.loc 2 254 1 view .LVU738
 2668 000a 08BD     		pop	{r3, pc}
 2669              	.L264:
 2670              		.align	2
 2671              	.L263:
 2672 000c B9040008 		.word	134218937
 2673 0010 00000000 		.word	.LANCHOR8
 2674              		.cfi_endproc
 2675              	.LFE27:
 2677              		.section	.text.keyticks,"ax",%progbits
 2678              		.align	1
 2679              		.p2align 2,,3
 2680              		.global	keyticks
 2681              		.syntax unified
 2682              		.thumb
 2683              		.thumb_func
 2684              		.fpu fpv4-sp-d16
 2686              	keyticks:
 2687              	.LFB28:
ARM GAS  /tmp/cc7Wa57o.s 			page 76


 255:src/console.c **** 
 256:src/console.c **** long int keyticks () {
 2688              		.loc 2 256 22 is_stmt 1 view -0
 2689              		.cfi_startproc
 2690              		@ args = 0, pretend = 0, frame = 0
 2691              		@ frame_needed = 0, uses_anonymous_args = 0
 257:src/console.c ****   long int i;
 2692              		.loc 2 257 3 view .LVU740
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2693              		.loc 2 258 3 view .LVU741
 256:src/console.c ****   long int i;
 2694              		.loc 2 256 22 is_stmt 0 view .LVU742
 2695 0000 08B5     		push	{r3, lr}
 2696              		.cfi_def_cfa_offset 8
 2697              		.cfi_offset 3, -8
 2698              		.cfi_offset 14, -4
 2699              		.loc 2 258 8 view .LVU743
 2700 0002 054B     		ldr	r3, .L267
 2701 0004 9847     		blx	r3
 2702              	.LVL209:
 259:src/console.c ****   return i >> 8;
 2703              		.loc 2 259 3 is_stmt 1 view .LVU744
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2704              		.loc 2 258 24 is_stmt 0 view .LVU745
 2705 0006 054B     		ldr	r3, .L267+4
 2706 0008 1B68     		ldr	r3, [r3]
 2707 000a C01A     		subs	r0, r0, r3
 2708              	.LVL210:
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2709              		.loc 2 258 38 view .LVU746
 2710 000c 00EB8000 		add	r0, r0, r0, lsl #2
 260:src/console.c **** }
 2711              		.loc 2 260 1 view .LVU747
 2712 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2713 0014 08BD     		pop	{r3, pc}
 2714              	.L268:
 2715 0016 00BF     		.align	2
 2716              	.L267:
 2717 0018 B9040008 		.word	134218937
 2718 001c 00000000 		.word	.LANCHOR8
 2719              		.cfi_endproc
 2720              	.LFE28:
 2722              		.section	.text.moveto,"ax",%progbits
 2723              		.align	1
 2724              		.p2align 2,,3
 2725              		.global	moveto
 2726              		.syntax unified
 2727              		.thumb
 2728              		.thumb_func
 2729              		.fpu fpv4-sp-d16
 2731              	moveto:
 2732              	.LVL211:
 2733              	.LFB29:
 261:src/console.c **** 
 262:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 263:src/console.c **** char print_string[22];
 264:src/console.c **** int n_p = 0;
ARM GAS  /tmp/cc7Wa57o.s 			page 77


 265:src/console.c **** 
 266:src/console.c **** 
 267:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2734              		.loc 2 267 30 is_stmt 1 view -0
 2735              		.cfi_startproc
 2736              		@ args = 0, pretend = 0, frame = 0
 2737              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2738              		.loc 2 268 3 view .LVU749
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2739              		.loc 2 267 30 is_stmt 0 view .LVU750
 2740 0000 70B5     		push	{r4, r5, r6, lr}
 2741              		.cfi_def_cfa_offset 16
 2742              		.cfi_offset 4, -16
 2743              		.cfi_offset 5, -12
 2744              		.cfi_offset 6, -8
 2745              		.cfi_offset 14, -4
 2746              		.loc 2 268 3 view .LVU751
 2747 0002 0A4D     		ldr	r5, .L271
 2748 0004 0A4B     		ldr	r3, .L271+4
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2749              		.loc 2 267 30 view .LVU752
 2750 0006 0246     		mov	r2, r0
 2751 0008 0C46     		mov	r4, r1
 2752              		.loc 2 268 3 view .LVU753
 2753 000a A86B     		ldr	r0, [r5, #56]
 2754              	.LVL212:
 2755              		.loc 2 268 3 view .LVU754
 2756 000c 511E     		subs	r1, r2, #1
 2757              	.LVL213:
 2758              		.loc 2 268 3 view .LVU755
 2759 000e 9847     		blx	r3
 2760              	.LVL214:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2761              		.loc 2 269 3 is_stmt 1 view .LVU756
 2762 0010 A86B     		ldr	r0, [r5, #56]
 2763 0012 084B     		ldr	r3, .L271+8
 2764              		.loc 2 269 33 is_stmt 0 view .LVU757
 2765 0014 0168     		ldr	r1, [r0]
 2766              		.loc 2 269 3 view .LVU758
 2767 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2768              		.loc 2 269 33 view .LVU759
 2769 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2770              		.loc 2 269 43 view .LVU760
 2771 001c 013C     		subs	r4, r4, #1
 2772              	.LVL215:
 2773              		.loc 2 269 40 view .LVU761
 2774 001e 04FB01F1 		mul	r1, r4, r1
 2775              		.loc 2 269 3 view .LVU762
 2776 0022 1431     		adds	r1, r1, #20
 270:src/console.c **** }
 2777              		.loc 2 270 1 view .LVU763
 2778 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2779              		.cfi_restore 14
 2780              		.cfi_restore 6
 2781              		.cfi_restore 5
 2782              		.cfi_restore 4
ARM GAS  /tmp/cc7Wa57o.s 			page 78


 2783              		.cfi_def_cfa_offset 0
 2784              	.LVL216:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2785              		.loc 2 269 3 view .LVU764
 2786 0028 1847     		bx	r3	@ indirect register sibling call
 2787              	.LVL217:
 2788              	.L272:
 2789 002a 00BF     		.align	2
 2790              	.L271:
 2791 002c 00200010 		.word	268443648
 2792 0030 69020008 		.word	134218345
 2793 0034 6D020008 		.word	134218349
 2794              		.cfi_endproc
 2795              	.LFE29:
 2797              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2798              		.align	2
 2799              	.LC15:
 2800 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2800      673A2025 
 2800      34692C25 
 2800      346900
 2801              		.section	.text.print_debug,"ax",%progbits
 2802              		.align	1
 2803              		.p2align 2,,3
 2804              		.global	print_debug
 2805              		.syntax unified
 2806              		.thumb
 2807              		.thumb_func
 2808              		.fpu fpv4-sp-d16
 2810              	print_debug:
 2811              	.LVL218:
 2812              	.LFB30:
 271:src/console.c **** 
 272:src/console.c **** void print_debug (int i, int j) {
 2813              		.loc 2 272 33 is_stmt 1 view -0
 2814              		.cfi_startproc
 2815              		@ args = 0, pretend = 0, frame = 8
 2816              		@ frame_needed = 0, uses_anonymous_args = 0
 273:src/console.c ****   strcpy( print_string, spaces );
 2817              		.loc 2 273 3 view .LVU766
 272:src/console.c ****   strcpy( print_string, spaces );
 2818              		.loc 2 272 33 is_stmt 0 view .LVU767
 2819 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2820              		.cfi_def_cfa_offset 24
 2821              		.cfi_offset 4, -24
 2822              		.cfi_offset 5, -20
 2823              		.cfi_offset 6, -16
 2824              		.cfi_offset 7, -12
 2825              		.cfi_offset 8, -8
 2826              		.cfi_offset 14, -4
 2827              		.loc 2 273 3 view .LVU768
 2828 0004 174C     		ldr	r4, .L275
 2829 0006 184F     		ldr	r7, .L275+4
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 275:src/console.c ****   moveto (3, 1);
 276:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2830              		.loc 2 276 3 view .LVU769
ARM GAS  /tmp/cc7Wa57o.s 			page 79


 2831 0008 184E     		ldr	r6, .L275+8
 2832 000a 194D     		ldr	r5, .L275+12
 277:src/console.c ****   lcd_refresh();
 2833              		.loc 2 277 3 view .LVU770
 2834 000c DFF86C80 		ldr	r8, .L275+24
 272:src/console.c ****   strcpy( print_string, spaces );
 2835              		.loc 2 272 33 view .LVU771
 2836 0010 82B0     		sub	sp, sp, #8
 2837              		.cfi_def_cfa_offset 32
 272:src/console.c ****   strcpy( print_string, spaces );
 2838              		.loc 2 272 33 view .LVU772
 2839 0012 0190     		str	r0, [sp, #4]
 2840 0014 0091     		str	r1, [sp]
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2841              		.loc 2 273 3 view .LVU773
 2842 0016 2046     		mov	r0, r4
 2843              	.LVL219:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2844              		.loc 2 273 3 view .LVU774
 2845 0018 3946     		mov	r1, r7
 2846              	.LVL220:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2847              		.loc 2 273 3 view .LVU775
 2848 001a FFF7FEFF 		bl	strcpy
 2849              	.LVL221:
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2850              		.loc 2 274 3 is_stmt 1 view .LVU776
 2851 001e DDE90032 		ldrd	r3, r2, [sp]
 2852 0022 1449     		ldr	r1, .L275+16
 2853 0024 2046     		mov	r0, r4
 2854 0026 FFF7FEFF 		bl	sprintf
 2855              	.LVL222:
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2856              		.loc 2 275 3 view .LVU777
 2857 002a 0121     		movs	r1, #1
 2858 002c 0320     		movs	r0, #3
 2859 002e FFF7FEFF 		bl	moveto
 2860              	.LVL223:
 276:src/console.c ****   lcd_refresh();
 2861              		.loc 2 276 3 view .LVU778
 2862 0032 2146     		mov	r1, r4
 2863 0034 B06B     		ldr	r0, [r6, #56]
 2864 0036 A847     		blx	r5
 2865              	.LVL224:
 2866              		.loc 2 277 3 view .LVU779
 2867 0038 C047     		blx	r8
 2868              	.LVL225:
 278:src/console.c ****   sys_delay (1000);
 2869              		.loc 2 278 3 view .LVU780
 2870 003a 0F4B     		ldr	r3, .L275+20
 2871 003c 4FF47A70 		mov	r0, #1000
 2872 0040 9847     		blx	r3
 2873              	.LVL226:
 279:src/console.c ****   /* wait_for_key_press(); */
 280:src/console.c ****   //  key_pop_all();
 281:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 282:src/console.c ****   // key_pop_all();
ARM GAS  /tmp/cc7Wa57o.s 			page 80


 283:src/console.c ****   strcpy( print_string, spaces );
 2874              		.loc 2 283 3 view .LVU781
 2875 0042 3946     		mov	r1, r7
 2876 0044 2046     		mov	r0, r4
 2877 0046 FFF7FEFF 		bl	strcpy
 2878              	.LVL227:
 284:src/console.c ****   moveto (3, 1);
 2879              		.loc 2 284 3 view .LVU782
 2880 004a 0121     		movs	r1, #1
 2881 004c 0320     		movs	r0, #3
 2882 004e FFF7FEFF 		bl	moveto
 2883              	.LVL228:
 285:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2884              		.loc 2 285 3 view .LVU783
 2885 0052 B06B     		ldr	r0, [r6, #56]
 2886 0054 2146     		mov	r1, r4
 2887 0056 A847     		blx	r5
 2888              	.LVL229:
 286:src/console.c ****   lcd_refresh();
 2889              		.loc 2 286 3 view .LVU784
 2890 0058 4346     		mov	r3, r8
 287:src/console.c ****   // while (key_empty()<=0);; // wait for release
 288:src/console.c ****   // key_pop_all();
 289:src/console.c **** }
 2891              		.loc 2 289 1 is_stmt 0 view .LVU785
 2892 005a 02B0     		add	sp, sp, #8
 2893              		.cfi_def_cfa_offset 24
 2894              	.LVL230:
 2895              		.loc 2 289 1 view .LVU786
 2896              		@ sp needed
 2897 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2898              		.cfi_restore 14
 2899              		.cfi_restore 8
 2900              		.cfi_restore 7
 2901              		.cfi_restore 6
 2902              		.cfi_restore 5
 2903              		.cfi_restore 4
 2904              		.cfi_def_cfa_offset 0
 2905              	.LVL231:
 286:src/console.c ****   lcd_refresh();
 2906              		.loc 2 286 3 view .LVU787
 2907 0060 1847     		bx	r3	@ indirect register sibling call
 2908              	.LVL232:
 2909              	.L276:
 2910 0062 00BF     		.align	2
 2911              	.L275:
 2912 0064 00000000 		.word	print_string
 2913 0068 00000000 		.word	.LANCHOR9
 2914 006c 00200010 		.word	268443648
 2915 0070 B1020008 		.word	134218417
 2916 0074 00000000 		.word	.LC15
 2917 0078 05040008 		.word	134218757
 2918 007c 31020008 		.word	134218289
 2919              		.cfi_endproc
 2920              	.LFE30:
 2922              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2923              		.align	2
ARM GAS  /tmp/cc7Wa57o.s 			page 81


 2924              	.LC16:
 2925 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2925      692C2531 
 2925      337300
 2926              		.section	.text.print_debug2,"ax",%progbits
 2927              		.align	1
 2928              		.p2align 2,,3
 2929              		.global	print_debug2
 2930              		.syntax unified
 2931              		.thumb
 2932              		.thumb_func
 2933              		.fpu fpv4-sp-d16
 2935              	print_debug2:
 2936              	.LVL233:
 2937              	.LFB31:
 290:src/console.c **** 
 291:src/console.c **** void print_debug2 (int i, char* j) {
 2938              		.loc 2 291 36 is_stmt 1 view -0
 2939              		.cfi_startproc
 2940              		@ args = 0, pretend = 0, frame = 8
 2941              		@ frame_needed = 0, uses_anonymous_args = 0
 292:src/console.c ****   strcpy( print_string, spaces );
 2942              		.loc 2 292 3 view .LVU789
 291:src/console.c ****   strcpy( print_string, spaces );
 2943              		.loc 2 291 36 is_stmt 0 view .LVU790
 2944 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2945              		.cfi_def_cfa_offset 24
 2946              		.cfi_offset 4, -24
 2947              		.cfi_offset 5, -20
 2948              		.cfi_offset 6, -16
 2949              		.cfi_offset 7, -12
 2950              		.cfi_offset 8, -8
 2951              		.cfi_offset 14, -4
 2952              		.loc 2 292 3 view .LVU791
 2953 0004 174C     		ldr	r4, .L279
 2954 0006 184F     		ldr	r7, .L279+4
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 294:src/console.c ****   moveto (3, 1);
 295:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2955              		.loc 2 295 3 view .LVU792
 2956 0008 184E     		ldr	r6, .L279+8
 2957 000a 194D     		ldr	r5, .L279+12
 296:src/console.c ****   lcd_refresh();
 2958              		.loc 2 296 3 view .LVU793
 2959 000c DFF86C80 		ldr	r8, .L279+24
 291:src/console.c ****   strcpy( print_string, spaces );
 2960              		.loc 2 291 36 view .LVU794
 2961 0010 82B0     		sub	sp, sp, #8
 2962              		.cfi_def_cfa_offset 32
 291:src/console.c ****   strcpy( print_string, spaces );
 2963              		.loc 2 291 36 view .LVU795
 2964 0012 0190     		str	r0, [sp, #4]
 2965 0014 0091     		str	r1, [sp]
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2966              		.loc 2 292 3 view .LVU796
 2967 0016 2046     		mov	r0, r4
 2968              	.LVL234:
ARM GAS  /tmp/cc7Wa57o.s 			page 82


 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2969              		.loc 2 292 3 view .LVU797
 2970 0018 3946     		mov	r1, r7
 2971              	.LVL235:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2972              		.loc 2 292 3 view .LVU798
 2973 001a FFF7FEFF 		bl	strcpy
 2974              	.LVL236:
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2975              		.loc 2 293 3 is_stmt 1 view .LVU799
 2976 001e DDE90032 		ldrd	r3, r2, [sp]
 2977 0022 1449     		ldr	r1, .L279+16
 2978 0024 2046     		mov	r0, r4
 2979 0026 FFF7FEFF 		bl	sprintf
 2980              	.LVL237:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2981              		.loc 2 294 3 view .LVU800
 2982 002a 0121     		movs	r1, #1
 2983 002c 0320     		movs	r0, #3
 2984 002e FFF7FEFF 		bl	moveto
 2985              	.LVL238:
 295:src/console.c ****   lcd_refresh();
 2986              		.loc 2 295 3 view .LVU801
 2987 0032 2146     		mov	r1, r4
 2988 0034 B06B     		ldr	r0, [r6, #56]
 2989 0036 A847     		blx	r5
 2990              	.LVL239:
 2991              		.loc 2 296 3 view .LVU802
 2992 0038 C047     		blx	r8
 2993              	.LVL240:
 297:src/console.c ****   sys_delay (2500);
 2994              		.loc 2 297 3 view .LVU803
 2995 003a 0F4B     		ldr	r3, .L279+20
 2996 003c 40F6C410 		movw	r0, #2500
 2997 0040 9847     		blx	r3
 2998              	.LVL241:
 298:src/console.c ****   /* wait_for_key_press(); */
 299:src/console.c ****   //  key_pop_all();
 300:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 301:src/console.c ****   // key_pop_all();
 302:src/console.c ****   strcpy( print_string, spaces );
 2999              		.loc 2 302 3 view .LVU804
 3000 0042 3946     		mov	r1, r7
 3001 0044 2046     		mov	r0, r4
 3002 0046 FFF7FEFF 		bl	strcpy
 3003              	.LVL242:
 303:src/console.c ****   moveto (3, 1);
 3004              		.loc 2 303 3 view .LVU805
 3005 004a 0121     		movs	r1, #1
 3006 004c 0320     		movs	r0, #3
 3007 004e FFF7FEFF 		bl	moveto
 3008              	.LVL243:
 304:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 3009              		.loc 2 304 3 view .LVU806
 3010 0052 B06B     		ldr	r0, [r6, #56]
 3011 0054 2146     		mov	r1, r4
 3012 0056 A847     		blx	r5
ARM GAS  /tmp/cc7Wa57o.s 			page 83


 3013              	.LVL244:
 305:src/console.c ****   lcd_refresh();
 3014              		.loc 2 305 3 view .LVU807
 3015 0058 4346     		mov	r3, r8
 306:src/console.c ****   // while (key_empty()<=0);; // wait for release
 307:src/console.c ****   // key_pop_all();
 308:src/console.c **** }
 3016              		.loc 2 308 1 is_stmt 0 view .LVU808
 3017 005a 02B0     		add	sp, sp, #8
 3018              		.cfi_def_cfa_offset 24
 3019              	.LVL245:
 3020              		.loc 2 308 1 view .LVU809
 3021              		@ sp needed
 3022 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3023              		.cfi_restore 14
 3024              		.cfi_restore 8
 3025              		.cfi_restore 7
 3026              		.cfi_restore 6
 3027              		.cfi_restore 5
 3028              		.cfi_restore 4
 3029              		.cfi_def_cfa_offset 0
 3030              	.LVL246:
 305:src/console.c ****   lcd_refresh();
 3031              		.loc 2 305 3 view .LVU810
 3032 0060 1847     		bx	r3	@ indirect register sibling call
 3033              	.LVL247:
 3034              	.L280:
 3035 0062 00BF     		.align	2
 3036              	.L279:
 3037 0064 00000000 		.word	print_string
 3038 0068 00000000 		.word	.LANCHOR9
 3039 006c 00200010 		.word	268443648
 3040 0070 B1020008 		.word	134218417
 3041 0074 00000000 		.word	.LC16
 3042 0078 05040008 		.word	134218757
 3043 007c 31020008 		.word	134218289
 3044              		.cfi_endproc
 3045              	.LFE31:
 3047              		.section	.text.do_now,"ax",%progbits
 3048              		.align	1
 3049              		.p2align 2,,3
 3050              		.global	do_now
 3051              		.syntax unified
 3052              		.thumb
 3053              		.thumb_func
 3054              		.fpu fpv4-sp-d16
 3056              	do_now:
 3057              	.LVL248:
 3058              	.LFB32:
 309:src/console.c **** 
 310:src/console.c **** void do_now (int key, int shift) { // key and shift are like the output of remapped
 3059              		.loc 2 310 34 is_stmt 1 view -0
 3060              		.cfi_startproc
 3061              		@ args = 0, pretend = 0, frame = 8
 3062              		@ frame_needed = 0, uses_anonymous_args = 0
 3063              		@ link register save eliminated.
 311:src/console.c ****   struct _ndmap temp;
ARM GAS  /tmp/cc7Wa57o.s 			page 84


 3064              		.loc 2 311 3 view .LVU812
 312:src/console.c ****   temp.key_34s = key;
 3065              		.loc 2 312 3 view .LVU813
 310:src/console.c ****   struct _ndmap temp;
 3066              		.loc 2 310 34 is_stmt 0 view .LVU814
 3067 0000 82B0     		sub	sp, sp, #8
 3068              		.cfi_def_cfa_offset 8
 313:src/console.c ****   temp.shift = shift;
 314:src/console.c ****   process_keycode_with_shift (temp);
 3069              		.loc 2 314 3 view .LVU815
 3070 0002 02AB     		add	r3, sp, #8
 312:src/console.c ****   temp.shift = shift;
 3071              		.loc 2 312 16 view .LVU816
 3072 0004 8DF80000 		strb	r0, [sp]
 313:src/console.c ****   temp.shift = shift;
 3073              		.loc 2 313 3 is_stmt 1 view .LVU817
 313:src/console.c ****   temp.shift = shift;
 3074              		.loc 2 313 14 is_stmt 0 view .LVU818
 3075 0008 0191     		str	r1, [sp, #4]
 3076              		.loc 2 314 3 is_stmt 1 view .LVU819
 3077 000a 13E90300 		ldmdb	r3, {r0, r1}
 3078              	.LVL249:
 315:src/console.c **** }
 3079              		.loc 2 315 1 is_stmt 0 view .LVU820
 3080 000e 02B0     		add	sp, sp, #8
 3081              		.cfi_def_cfa_offset 0
 3082              		@ sp needed
 314:src/console.c **** }
 3083              		.loc 2 314 3 view .LVU821
 3084 0010 FFF7FEBF 		b	process_keycode_with_shift
 3085              	.LVL250:
 314:src/console.c **** }
 3086              		.loc 2 314 3 view .LVU822
 3087              		.cfi_endproc
 3088              	.LFE32:
 3090              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 3091              		.align	2
 3092              	.LC17:
 3093 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 3093      502F7770 
 3093      3334735F 
 3093      68656C70 
 3093      2E68746D 
 3094              		.section	.text.do_multi,"ax",%progbits
 3095              		.align	1
 3096              		.p2align 2,,3
 3097              		.global	do_multi
 3098              		.syntax unified
 3099              		.thumb
 3100              		.thumb_func
 3101              		.fpu fpv4-sp-d16
 3103              	do_multi:
 3104              	.LVL251:
 3105              	.LFB33:
 316:src/console.c **** 
 317:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 3106              		.loc 2 317 42 is_stmt 1 view -0
ARM GAS  /tmp/cc7Wa57o.s 			page 85


 3107              		.cfi_startproc
 3108              		@ args = 0, pretend = 0, frame = 16
 3109              		@ frame_needed = 0, uses_anonymous_args = 0
 3110              		.loc 2 317 42 is_stmt 0 view .LVU824
 3111 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3112              		.cfi_def_cfa_offset 20
 3113              		.cfi_offset 4, -20
 3114              		.cfi_offset 5, -16
 3115              		.cfi_offset 6, -12
 3116              		.cfi_offset 7, -8
 3117              		.cfi_offset 14, -4
 3118 0002 85B0     		sub	sp, sp, #20
 3119              		.cfi_def_cfa_offset 40
 3120              	.LVL252:
 318:src/console.c ****   switch(r.shift) {
 3121              		.loc 2 318 3 is_stmt 1 view .LVU825
 317:src/console.c ****   switch(r.shift) {
 3122              		.loc 2 317 42 is_stmt 0 view .LVU826
 3123 0004 6C46     		mov	r4, sp
 3124 0006 931E     		subs	r3, r2, #2
 3125 0008 84E80600 		stm	r4, {r1, r2}
 3126              	.LVL253:
 317:src/console.c ****   switch(r.shift) {
 3127              		.loc 2 317 42 view .LVU827
 3128 000c 0546     		mov	r5, r0
 3129 000e 0D2B     		cmp	r3, #13
 3130 0010 23D8     		bhi	.L284
 3131 0012 DFE803F0 		tbb	[pc, r3]
 3132              	.L286:
 3133 0016 2F       		.byte	(.L299-.L286)/2
 3134 0017 3A       		.byte	(.L298-.L286)/2
 3135 0018 45       		.byte	(.L297-.L286)/2
 3136 0019 50       		.byte	(.L296-.L286)/2
 3137 001a 5B       		.byte	(.L295-.L286)/2
 3138 001b 66       		.byte	(.L294-.L286)/2
 3139 001c 71       		.byte	(.L293-.L286)/2
 3140 001d 7B       		.byte	(.L292-.L286)/2
 3141 001e 86       		.byte	(.L291-.L286)/2
 3142 001f 90       		.byte	(.L290-.L286)/2
 3143 0020 9A       		.byte	(.L289-.L286)/2
 3144 0021 AD       		.byte	(.L288-.L286)/2
 3145 0022 B7       		.byte	(.L287-.L286)/2
 3146 0023 07       		.byte	(.L285-.L286)/2
 3147              		.p2align 1
 3148              	.L285:
 319:src/console.c ****   /* case LASTX: // Last x via RCL L */
 320:src/console.c ****   /*   do_now (K11, 0); // RCL */
 321:src/console.c ****   /*   do_now (K_RELEASE,0); // release */
 322:src/console.c ****   /*   do_now (K15,0); // TAN key */
 323:src/console.c ****   /*   r.key_34s = K_RELEASE; */
 324:src/console.c ****   /*   r.shift = 0; // set up for release; */
 325:src/console.c ****   /*   break; */
 326:src/console.c ****   case ONSTO: // flash_backup()
 327:src/console.c ****     flash_backup(OP_SAVE);
 328:src/console.c ****     reset_shift();
 329:src/console.c ****     r = no_key;
 330:src/console.c ****     break;
ARM GAS  /tmp/cc7Wa57o.s 			page 86


 331:src/console.c ****   case ONRCL: // flash_restore()
 332:src/console.c ****     flash_restore(OP_LOAD);
 333:src/console.c ****     reset_shift();
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
 336:src/console.c ****   case WRLIB: // save library file
 337:src/console.c ****     save_lib_file(1);
 338:src/console.c ****     reset_shift();
 339:src/console.c ****     r = no_key;
 340:src/console.c ****     break;
 341:src/console.c ****   case LLIB: // load library file
 342:src/console.c ****     load_lib_file(1);
 343:src/console.c ****     reset_shift();
 344:src/console.c ****     r = no_key;
 345:src/console.c ****     break;
 346:src/console.c ****   case WRTST: // save state file
 347:src/console.c ****     save_ram_file(1);
 348:src/console.c ****     reset_shift();
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case LDST:
 352:src/console.c ****     load_ram_file(1);
 353:src/console.c ****     reset_shift();
 354:src/console.c ****     r = no_key;
 355:src/console.c ****     break;
 356:src/console.c ****   case LDPRG:
 357:src/console.c ****     load_prog_file();
 358:src/console.c ****     reset_shift();
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case SVPRG:
 362:src/console.c ****     save_prog_file();
 363:src/console.c ****     reset_shift();
 364:src/console.c ****     r = no_key;
 365:src/console.c ****     break;
 366:src/console.c ****   case HELP:
 367:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 368:src/console.c ****     reset_shift();
 369:src/console.c ****     r = no_key;
 370:src/console.c ****     break;
 371:src/console.c ****   case DOTS:
 372:src/console.c ****     do_all_dots();
 373:src/console.c ****     reset_shift();
 374:src/console.c ****     r = no_key;
 375:src/console.c ****     break;
 376:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 377:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 378:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 379:src/console.c ****     r = no_key;
 380:src/console.c ****     break;
 381:src/console.c ****   case DEFMEN:
 382:src/console.c ****     toggle_default_menu();
 383:src/console.c ****     reset_shift();
 384:src/console.c ****     r = no_key;
 385:src/console.c ****     break;
 386:src/console.c ****   case SETUMEN:
 387:src/console.c ****     build_user_menu();
ARM GAS  /tmp/cc7Wa57o.s 			page 87


 388:src/console.c ****     reset_shift();
 389:src/console.c ****     r = no_key;;
 390:src/console.c ****     break;
 391:src/console.c ****   case KCPX:
 392:src/console.c ****     if (C_LOCKED) {
 3149              		.loc 2 392 5 is_stmt 1 view .LVU828
 3150              		.loc 2 392 9 is_stmt 0 view .LVU829
 3151 0024 664B     		ldr	r3, .L320
 3152 0026 1B68     		ldr	r3, [r3]
 3153 0028 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 3154              		.loc 2 392 8 view .LVU830
 3155 002c 5207     		lsls	r2, r2, #29
 3156 002e 40F1B480 		bpl	.L301
 3157              		.loc 2 392 9 discriminator 1 view .LVU831
 3158 0032 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 3159 0036 5B07     		lsls	r3, r3, #29
 3160 0038 40F1AF80 		bpl	.L301
 393:src/console.c ****       set_menu(M_C_Lock);
 3161              		.loc 2 393 7 is_stmt 1 view .LVU832
 3162              	.LVL254:
 3163              	.LBB120:
 3164              	.LBI120:
 122:src/menu.c    ****   menu_name m = current_menu;
 3165              		.loc 1 122 6 view .LVU833
 3166              	.LBB121:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3167              		.loc 1 123 3 view .LVU834
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3168              		.loc 1 123 13 is_stmt 0 view .LVU835
 3169 003c 614A     		ldr	r2, .L320+4
 3170 003e 92F90030 		ldrsb	r3, [r2]
 3171              	.LVL255:
 124:src/menu.c    ****     current_menu = default_menu;
 3172              		.loc 1 124 3 is_stmt 1 view .LVU836
 124:src/menu.c    ****     current_menu = default_menu;
 3173              		.loc 1 124 6 is_stmt 0 view .LVU837
 3174 0042 112B     		cmp	r3, #17
 3175 0044 00F0B580 		beq	.L319
 127:src/menu.c    ****     current_menu = last_menu;
 3176              		.loc 1 127 8 is_stmt 1 view .LVU838
 131:src/menu.c    ****   }
 3177              		.loc 1 131 5 view .LVU839
 131:src/menu.c    ****   }
 3178              		.loc 1 131 18 is_stmt 0 view .LVU840
 3179 0048 1121     		movs	r1, #17
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3180              		.loc 1 133 6 view .LVU841
 3181 004a 092B     		cmp	r3, #9
 131:src/menu.c    ****   }
 3182              		.loc 1 131 18 view .LVU842
 3183 004c 1170     		strb	r1, [r2]
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3184              		.loc 1 133 3 is_stmt 1 view .LVU843
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3185              		.loc 1 133 6 is_stmt 0 view .LVU844
 3186 004e 02D0     		beq	.L304
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
ARM GAS  /tmp/cc7Wa57o.s 			page 88


 3187              		.loc 1 133 23 view .LVU845
 3188 0050 102B     		cmp	r3, #16
 3189 0052 40F0B180 		bne	.L303
 3190              	.L304:
 3191              	.LVL256:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3192              		.loc 1 133 23 view .LVU846
 3193              	.LBE121:
 3194              	.LBE120:
 394:src/console.c ****       reset_shift();
 3195              		.loc 2 394 7 is_stmt 1 view .LVU847
 3196 0056 FFF7FEFF 		bl	reset_shift
 3197              	.LVL257:
 3198              	.L284:
 395:src/console.c ****     }
 396:src/console.c ****     else {
 397:src/console.c ****       do_now (K_CMPLX, 0);
 398:src/console.c ****       do_now (K_RELEASE, 0);
 399:src/console.c ****       r = no_key;
 400:src/console.c ****     }
 401:src/console.c ****   default:
 402:src/console.c ****     r = no_key;
 3199              		.loc 2 402 5 view .LVU848
 3200              		.loc 2 402 7 is_stmt 0 view .LVU849
 3201 005a 5B4B     		ldr	r3, .L320+8
 3202 005c 93E80300 		ldm	r3, {r0, r1}
 3203 0060 84E80300 		stm	r4, {r0, r1}
 3204              	.LVL258:
 3205              	.L300:
 403:src/console.c ****   }
 404:src/console.c ****   return r;
 3206              		.loc 2 404 3 is_stmt 1 view .LVU850
 3207              		.loc 2 404 10 is_stmt 0 view .LVU851
 3208 0064 0191     		str	r1, [sp, #4]
 3209 0066 94E80300 		ldm	r4, {r0, r1}
 3210              	.LVL259:
 3211              		.loc 2 404 10 view .LVU852
 3212 006a 85E80300 		stm	r5, {r0, r1}
 405:src/console.c **** }
 3213              		.loc 2 405 1 view .LVU853
 3214 006e 2846     		mov	r0, r5
 3215 0070 05B0     		add	sp, sp, #20
 3216              		.cfi_remember_state
 3217              		.cfi_def_cfa_offset 20
 3218              		@ sp needed
 3219 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 3220              	.LVL260:
 3221              	.L299:
 3222              		.cfi_restore_state
 327:src/console.c ****     reset_shift();
 3223              		.loc 2 327 5 is_stmt 1 view .LVU854
 3224 0074 AD20     		movs	r0, #173
 3225              	.LVL261:
 327:src/console.c ****     reset_shift();
 3226              		.loc 2 327 5 is_stmt 0 view .LVU855
 3227 0076 FFF7FEFF 		bl	flash_backup
 3228              	.LVL262:
ARM GAS  /tmp/cc7Wa57o.s 			page 89


 328:src/console.c ****     r = no_key;
 3229              		.loc 2 328 5 is_stmt 1 view .LVU856
 3230 007a FFF7FEFF 		bl	reset_shift
 3231              	.LVL263:
 329:src/console.c ****     break;
 3232              		.loc 2 329 5 view .LVU857
 329:src/console.c ****     break;
 3233              		.loc 2 329 7 is_stmt 0 view .LVU858
 3234 007e 524B     		ldr	r3, .L320+8
 3235 0080 93E80300 		ldm	r3, {r0, r1}
 3236 0084 84E80300 		stm	r4, {r0, r1}
 3237              	.LVL264:
 330:src/console.c ****   case ONRCL: // flash_restore()
 3238              		.loc 2 330 5 is_stmt 1 view .LVU859
 3239 0088 ECE7     		b	.L300
 3240              	.LVL265:
 3241              	.L298:
 332:src/console.c ****     reset_shift();
 3242              		.loc 2 332 5 view .LVU860
 3243 008a AE20     		movs	r0, #174
 3244              	.LVL266:
 332:src/console.c ****     reset_shift();
 3245              		.loc 2 332 5 is_stmt 0 view .LVU861
 3246 008c FFF7FEFF 		bl	flash_restore
 3247              	.LVL267:
 333:src/console.c ****     r = no_key;
 3248              		.loc 2 333 5 is_stmt 1 view .LVU862
 3249 0090 FFF7FEFF 		bl	reset_shift
 3250              	.LVL268:
 334:src/console.c ****     break;
 3251              		.loc 2 334 5 view .LVU863
 334:src/console.c ****     break;
 3252              		.loc 2 334 7 is_stmt 0 view .LVU864
 3253 0094 4C4B     		ldr	r3, .L320+8
 3254 0096 93E80300 		ldm	r3, {r0, r1}
 3255 009a 84E80300 		stm	r4, {r0, r1}
 3256              	.LVL269:
 335:src/console.c ****   case WRLIB: // save library file
 3257              		.loc 2 335 5 is_stmt 1 view .LVU865
 3258 009e E1E7     		b	.L300
 3259              	.LVL270:
 3260              	.L297:
 337:src/console.c ****     reset_shift();
 3261              		.loc 2 337 5 view .LVU866
 3262 00a0 0120     		movs	r0, #1
 3263              	.LVL271:
 337:src/console.c ****     reset_shift();
 3264              		.loc 2 337 5 is_stmt 0 view .LVU867
 3265 00a2 FFF7FEFF 		bl	save_lib_file
 3266              	.LVL272:
 338:src/console.c ****     r = no_key;
 3267              		.loc 2 338 5 is_stmt 1 view .LVU868
 3268 00a6 FFF7FEFF 		bl	reset_shift
 3269              	.LVL273:
 339:src/console.c ****     break;
 3270              		.loc 2 339 5 view .LVU869
 339:src/console.c ****     break;
ARM GAS  /tmp/cc7Wa57o.s 			page 90


 3271              		.loc 2 339 7 is_stmt 0 view .LVU870
 3272 00aa 474B     		ldr	r3, .L320+8
 3273 00ac 93E80300 		ldm	r3, {r0, r1}
 3274 00b0 84E80300 		stm	r4, {r0, r1}
 3275              	.LVL274:
 340:src/console.c ****   case LLIB: // load library file
 3276              		.loc 2 340 5 is_stmt 1 view .LVU871
 3277 00b4 D6E7     		b	.L300
 3278              	.LVL275:
 3279              	.L296:
 342:src/console.c ****     reset_shift();
 3280              		.loc 2 342 5 view .LVU872
 3281 00b6 0120     		movs	r0, #1
 3282              	.LVL276:
 342:src/console.c ****     reset_shift();
 3283              		.loc 2 342 5 is_stmt 0 view .LVU873
 3284 00b8 FFF7FEFF 		bl	load_lib_file
 3285              	.LVL277:
 343:src/console.c ****     r = no_key;
 3286              		.loc 2 343 5 is_stmt 1 view .LVU874
 3287 00bc FFF7FEFF 		bl	reset_shift
 3288              	.LVL278:
 344:src/console.c ****     break;
 3289              		.loc 2 344 5 view .LVU875
 344:src/console.c ****     break;
 3290              		.loc 2 344 7 is_stmt 0 view .LVU876
 3291 00c0 414B     		ldr	r3, .L320+8
 3292 00c2 93E80300 		ldm	r3, {r0, r1}
 3293 00c6 84E80300 		stm	r4, {r0, r1}
 3294              	.LVL279:
 345:src/console.c ****   case WRTST: // save state file
 3295              		.loc 2 345 5 is_stmt 1 view .LVU877
 3296 00ca CBE7     		b	.L300
 3297              	.LVL280:
 3298              	.L295:
 347:src/console.c ****     reset_shift();
 3299              		.loc 2 347 5 view .LVU878
 3300 00cc 0120     		movs	r0, #1
 3301              	.LVL281:
 347:src/console.c ****     reset_shift();
 3302              		.loc 2 347 5 is_stmt 0 view .LVU879
 3303 00ce FFF7FEFF 		bl	save_ram_file
 3304              	.LVL282:
 348:src/console.c ****     r = no_key;
 3305              		.loc 2 348 5 is_stmt 1 view .LVU880
 3306 00d2 FFF7FEFF 		bl	reset_shift
 3307              	.LVL283:
 349:src/console.c ****     break;
 3308              		.loc 2 349 5 view .LVU881
 349:src/console.c ****     break;
 3309              		.loc 2 349 7 is_stmt 0 view .LVU882
 3310 00d6 3C4B     		ldr	r3, .L320+8
 3311 00d8 93E80300 		ldm	r3, {r0, r1}
 3312 00dc 84E80300 		stm	r4, {r0, r1}
 3313              	.LVL284:
 350:src/console.c ****   case LDST:
 3314              		.loc 2 350 5 is_stmt 1 view .LVU883
ARM GAS  /tmp/cc7Wa57o.s 			page 91


 3315 00e0 C0E7     		b	.L300
 3316              	.LVL285:
 3317              	.L294:
 352:src/console.c ****     reset_shift();
 3318              		.loc 2 352 5 view .LVU884
 3319 00e2 0120     		movs	r0, #1
 3320              	.LVL286:
 352:src/console.c ****     reset_shift();
 3321              		.loc 2 352 5 is_stmt 0 view .LVU885
 3322 00e4 FFF7FEFF 		bl	load_ram_file
 3323              	.LVL287:
 353:src/console.c ****     r = no_key;
 3324              		.loc 2 353 5 is_stmt 1 view .LVU886
 3325 00e8 FFF7FEFF 		bl	reset_shift
 3326              	.LVL288:
 354:src/console.c ****     break;
 3327              		.loc 2 354 5 view .LVU887
 354:src/console.c ****     break;
 3328              		.loc 2 354 7 is_stmt 0 view .LVU888
 3329 00ec 364B     		ldr	r3, .L320+8
 3330 00ee 93E80300 		ldm	r3, {r0, r1}
 3331 00f2 84E80300 		stm	r4, {r0, r1}
 3332              	.LVL289:
 355:src/console.c ****   case LDPRG:
 3333              		.loc 2 355 5 is_stmt 1 view .LVU889
 3334 00f6 B5E7     		b	.L300
 3335              	.LVL290:
 3336              	.L293:
 357:src/console.c ****     reset_shift();
 3337              		.loc 2 357 5 view .LVU890
 3338 00f8 FFF7FEFF 		bl	load_prog_file
 3339              	.LVL291:
 358:src/console.c ****     r = no_key;
 3340              		.loc 2 358 5 view .LVU891
 3341 00fc FFF7FEFF 		bl	reset_shift
 3342              	.LVL292:
 359:src/console.c ****     break;
 3343              		.loc 2 359 5 view .LVU892
 359:src/console.c ****     break;
 3344              		.loc 2 359 7 is_stmt 0 view .LVU893
 3345 0100 314B     		ldr	r3, .L320+8
 3346 0102 93E80300 		ldm	r3, {r0, r1}
 3347 0106 84E80300 		stm	r4, {r0, r1}
 3348              	.LVL293:
 360:src/console.c ****   case SVPRG:
 3349              		.loc 2 360 5 is_stmt 1 view .LVU894
 3350 010a ABE7     		b	.L300
 3351              	.LVL294:
 3352              	.L292:
 367:src/console.c ****     reset_shift();
 3353              		.loc 2 367 5 view .LVU895
 3354 010c 2F4B     		ldr	r3, .L320+12
 3355 010e 3048     		ldr	r0, .L320+16
 3356              	.LVL295:
 367:src/console.c ****     reset_shift();
 3357              		.loc 2 367 5 is_stmt 0 view .LVU896
 3358 0110 9847     		blx	r3
ARM GAS  /tmp/cc7Wa57o.s 			page 92


 3359              	.LVL296:
 368:src/console.c ****     r = no_key;
 3360              		.loc 2 368 5 is_stmt 1 view .LVU897
 3361 0112 FFF7FEFF 		bl	reset_shift
 3362              	.LVL297:
 369:src/console.c ****     break;
 3363              		.loc 2 369 5 view .LVU898
 369:src/console.c ****     break;
 3364              		.loc 2 369 7 is_stmt 0 view .LVU899
 3365 0116 2C4B     		ldr	r3, .L320+8
 3366 0118 93E80300 		ldm	r3, {r0, r1}
 3367 011c 84E80300 		stm	r4, {r0, r1}
 3368              	.LVL298:
 370:src/console.c ****   case DOTS:
 3369              		.loc 2 370 5 is_stmt 1 view .LVU900
 3370 0120 A0E7     		b	.L300
 3371              	.LVL299:
 3372              	.L291:
 362:src/console.c ****     reset_shift();
 3373              		.loc 2 362 5 view .LVU901
 3374 0122 FFF7FEFF 		bl	save_prog_file
 3375              	.LVL300:
 363:src/console.c ****     r = no_key;
 3376              		.loc 2 363 5 view .LVU902
 3377 0126 FFF7FEFF 		bl	reset_shift
 3378              	.LVL301:
 364:src/console.c ****     break;
 3379              		.loc 2 364 5 view .LVU903
 364:src/console.c ****     break;
 3380              		.loc 2 364 7 is_stmt 0 view .LVU904
 3381 012a 274B     		ldr	r3, .L320+8
 3382 012c 93E80300 		ldm	r3, {r0, r1}
 3383 0130 84E80300 		stm	r4, {r0, r1}
 3384              	.LVL302:
 365:src/console.c ****   case HELP:
 3385              		.loc 2 365 5 is_stmt 1 view .LVU905
 3386 0134 96E7     		b	.L300
 3387              	.LVL303:
 3388              	.L290:
 372:src/console.c ****     reset_shift();
 3389              		.loc 2 372 5 view .LVU906
 3390 0136 FFF7FEFF 		bl	do_all_dots
 3391              	.LVL304:
 373:src/console.c ****     r = no_key;
 3392              		.loc 2 373 5 view .LVU907
 3393 013a FFF7FEFF 		bl	reset_shift
 3394              	.LVL305:
 374:src/console.c ****     break;
 3395              		.loc 2 374 5 view .LVU908
 374:src/console.c ****     break;
 3396              		.loc 2 374 7 is_stmt 0 view .LVU909
 3397 013e 224B     		ldr	r3, .L320+8
 3398 0140 93E80300 		ldm	r3, {r0, r1}
 3399 0144 84E80300 		stm	r4, {r0, r1}
 3400              	.LVL306:
 375:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 3401              		.loc 2 375 5 is_stmt 1 view .LVU910
ARM GAS  /tmp/cc7Wa57o.s 			page 93


 3402 0148 8CE7     		b	.L300
 3403              	.LVL307:
 3404              	.L289:
 377:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 3405              		.loc 2 377 5 view .LVU911
 3406              	.LBB123:
 3407              	.LBI123:
 310:src/console.c ****   struct _ndmap temp;
 3408              		.loc 2 310 6 view .LVU912
 3409              	.LBB124:
 311:src/console.c ****   temp.key_34s = key;
 3410              		.loc 2 311 3 view .LVU913
 312:src/console.c ****   temp.shift = shift;
 3411              		.loc 2 312 3 view .LVU914
 312:src/console.c ****   temp.shift = shift;
 3412              		.loc 2 312 16 is_stmt 0 view .LVU915
 3413 014a 6323     		movs	r3, #99
 313:src/console.c ****   process_keycode_with_shift (temp);
 3414              		.loc 2 313 14 view .LVU916
 3415 014c 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3416              		.loc 2 312 16 view .LVU917
 3417 014e 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3418              		.loc 2 313 3 is_stmt 1 view .LVU918
 313:src/console.c ****   process_keycode_with_shift (temp);
 3419              		.loc 2 313 14 is_stmt 0 view .LVU919
 3420 0152 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3421              		.loc 2 314 3 is_stmt 1 view .LVU920
 3422 0154 02AE     		add	r6, sp, #8
 3423 0156 96E80300 		ldm	r6, {r0, r1}
 3424              	.LVL308:
 314:src/console.c **** }
 3425              		.loc 2 314 3 is_stmt 0 view .LVU921
 3426 015a FFF7FEFF 		bl	process_keycode_with_shift
 3427              	.LVL309:
 314:src/console.c **** }
 3428              		.loc 2 314 3 view .LVU922
 3429              	.LBE124:
 3430              	.LBE123:
 378:src/console.c ****     r = no_key;
 3431              		.loc 2 378 5 is_stmt 1 view .LVU923
 3432              	.LBB125:
 3433              	.LBI125:
 310:src/console.c ****   struct _ndmap temp;
 3434              		.loc 2 310 6 view .LVU924
 3435              	.LBB126:
 311:src/console.c ****   temp.key_34s = key;
 3436              		.loc 2 311 3 view .LVU925
 312:src/console.c ****   temp.shift = shift;
 3437              		.loc 2 312 3 view .LVU926
 312:src/console.c ****   temp.shift = shift;
 3438              		.loc 2 312 16 is_stmt 0 view .LVU927
 3439 015e 3323     		movs	r3, #51
 3440              	.LVL310:
 3441              	.L318:
ARM GAS  /tmp/cc7Wa57o.s 			page 94


 312:src/console.c ****   temp.shift = shift;
 3442              		.loc 2 312 16 view .LVU928
 3443              	.LBE126:
 3444              	.LBE125:
 3445              	.LBB127:
 3446              	.LBB128:
 313:src/console.c ****   process_keycode_with_shift (temp);
 3447              		.loc 2 313 14 view .LVU929
 3448 0160 0397     		str	r7, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 3449              		.loc 2 312 16 view .LVU930
 3450 0162 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3451              		.loc 2 313 3 is_stmt 1 view .LVU931
 314:src/console.c **** }
 3452              		.loc 2 314 3 view .LVU932
 3453 0166 96E80300 		ldm	r6, {r0, r1}
 3454 016a FFF7FEFF 		bl	process_keycode_with_shift
 3455              	.LVL311:
 3456              	.LBE128:
 3457              	.LBE127:
 399:src/console.c ****     }
 3458              		.loc 2 399 7 view .LVU933
 399:src/console.c ****     }
 3459              		.loc 2 399 7 is_stmt 0 view .LVU934
 3460 016e 74E7     		b	.L284
 3461              	.LVL312:
 3462              	.L288:
 382:src/console.c ****     reset_shift();
 3463              		.loc 2 382 5 is_stmt 1 view .LVU935
 3464 0170 FFF7FEFF 		bl	toggle_default_menu
 3465              	.LVL313:
 383:src/console.c ****     r = no_key;
 3466              		.loc 2 383 5 view .LVU936
 3467 0174 FFF7FEFF 		bl	reset_shift
 3468              	.LVL314:
 384:src/console.c ****     break;
 3469              		.loc 2 384 5 view .LVU937
 384:src/console.c ****     break;
 3470              		.loc 2 384 7 is_stmt 0 view .LVU938
 3471 0178 134B     		ldr	r3, .L320+8
 3472 017a 93E80300 		ldm	r3, {r0, r1}
 3473 017e 84E80300 		stm	r4, {r0, r1}
 3474              	.LVL315:
 385:src/console.c ****   case SETUMEN:
 3475              		.loc 2 385 5 is_stmt 1 view .LVU939
 3476 0182 6FE7     		b	.L300
 3477              	.LVL316:
 3478              	.L287:
 387:src/console.c ****     reset_shift();
 3479              		.loc 2 387 5 view .LVU940
 3480              	.LBB130:
 3481              	.LBI130:
 669:src/menu.c    ****   // find the label 'MNU'
 3482              		.loc 1 669 6 view .LVU941
 3483              	.LBB131:
 671:src/menu.c    ****    build_user_menu_from_program (lbl);
ARM GAS  /tmp/cc7Wa57o.s 			page 95


 3484              		.loc 1 671 4 view .LVU942
 672:src/menu.c    **** }
 3485              		.loc 1 672 4 view .LVU943
 3486 0184 1348     		ldr	r0, .L320+20
 3487              	.LVL317:
 672:src/menu.c    **** }
 3488              		.loc 1 672 4 is_stmt 0 view .LVU944
 3489 0186 FFF7FEFF 		bl	build_user_menu_from_program
 3490              	.LVL318:
 3491              	.LBE131:
 3492              	.LBE130:
 388:src/console.c ****     r = no_key;;
 3493              		.loc 2 388 5 is_stmt 1 view .LVU945
 3494 018a FFF7FEFF 		bl	reset_shift
 3495              	.LVL319:
 389:src/console.c ****     break;
 3496              		.loc 2 389 5 view .LVU946
 389:src/console.c ****     break;
 3497              		.loc 2 389 7 is_stmt 0 view .LVU947
 3498 018e 0E4B     		ldr	r3, .L320+8
 3499 0190 93E80300 		ldm	r3, {r0, r1}
 3500 0194 84E80300 		stm	r4, {r0, r1}
 3501              	.LVL320:
 389:src/console.c ****     break;
 3502              		.loc 2 389 16 is_stmt 1 view .LVU948
 390:src/console.c ****   case KCPX:
 3503              		.loc 2 390 5 view .LVU949
 3504 0198 64E7     		b	.L300
 3505              	.LVL321:
 3506              	.L301:
 397:src/console.c ****       do_now (K_RELEASE, 0);
 3507              		.loc 2 397 7 view .LVU950
 3508              	.LBB132:
 3509              	.LBI132:
 310:src/console.c ****   struct _ndmap temp;
 3510              		.loc 2 310 6 view .LVU951
 3511              	.LBB133:
 311:src/console.c ****   temp.key_34s = key;
 3512              		.loc 2 311 3 view .LVU952
 312:src/console.c ****   temp.shift = shift;
 3513              		.loc 2 312 3 view .LVU953
 312:src/console.c ****   temp.shift = shift;
 3514              		.loc 2 312 16 is_stmt 0 view .LVU954
 3515 019a 2D23     		movs	r3, #45
 313:src/console.c ****   process_keycode_with_shift (temp);
 3516              		.loc 2 313 14 view .LVU955
 3517 019c 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3518              		.loc 2 312 16 view .LVU956
 3519 019e 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3520              		.loc 2 313 3 is_stmt 1 view .LVU957
 313:src/console.c ****   process_keycode_with_shift (temp);
 3521              		.loc 2 313 14 is_stmt 0 view .LVU958
 3522 01a2 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3523              		.loc 2 314 3 is_stmt 1 view .LVU959
ARM GAS  /tmp/cc7Wa57o.s 			page 96


 3524 01a4 02AE     		add	r6, sp, #8
 3525 01a6 96E80300 		ldm	r6, {r0, r1}
 3526              	.LVL322:
 314:src/console.c **** }
 3527              		.loc 2 314 3 is_stmt 0 view .LVU960
 3528 01aa FFF7FEFF 		bl	process_keycode_with_shift
 3529              	.LVL323:
 314:src/console.c **** }
 3530              		.loc 2 314 3 view .LVU961
 3531              	.LBE133:
 3532              	.LBE132:
 398:src/console.c ****       r = no_key;
 3533              		.loc 2 398 7 is_stmt 1 view .LVU962
 3534              	.LBB134:
 3535              	.LBI127:
 310:src/console.c ****   struct _ndmap temp;
 3536              		.loc 2 310 6 view .LVU963
 3537              	.LBB129:
 311:src/console.c ****   temp.key_34s = key;
 3538              		.loc 2 311 3 view .LVU964
 312:src/console.c ****   temp.shift = shift;
 3539              		.loc 2 312 3 view .LVU965
 312:src/console.c ****   temp.shift = shift;
 3540              		.loc 2 312 16 is_stmt 0 view .LVU966
 3541 01ae 6323     		movs	r3, #99
 3542 01b0 D6E7     		b	.L318
 3543              	.LVL324:
 3544              	.L319:
 312:src/console.c ****   temp.shift = shift;
 3545              		.loc 2 312 16 view .LVU967
 3546              	.LBE129:
 3547              	.LBE134:
 3548              	.LBB135:
 3549              	.LBB122:
 125:src/menu.c    ****   }
 3550              		.loc 1 125 5 is_stmt 1 view .LVU968
 125:src/menu.c    ****   }
 3551              		.loc 1 125 18 is_stmt 0 view .LVU969
 3552 01b2 0949     		ldr	r1, .L320+24
 3553 01b4 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3554 01b6 1170     		strb	r1, [r2]
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3555              		.loc 1 133 3 is_stmt 1 view .LVU970
 3556              	.L303:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3557              		.loc 1 133 43 view .LVU971
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3558              		.loc 1 133 53 is_stmt 0 view .LVU972
 3559 01b8 084A     		ldr	r2, .L320+28
 3560 01ba 1370     		strb	r3, [r2]
 3561 01bc 4BE7     		b	.L304
 3562              	.L321:
 3563 01be 00BF     		.align	2
 3564              	.L320:
 3565 01c0 00000000 		.word	main_ram
 3566 01c4 00000000 		.word	.LANCHOR1
 3567 01c8 00000000 		.word	.LANCHOR10
ARM GAS  /tmp/cc7Wa57o.s 			page 97


 3568 01cc 49040008 		.word	134218825
 3569 01d0 00000000 		.word	.LC17
 3570 01d4 4DF04E55 		.word	1431236685
 3571 01d8 00000000 		.word	.LANCHOR2
 3572 01dc 00000000 		.word	.LANCHOR3
 3573              	.LBE122:
 3574              	.LBE135:
 3575              		.cfi_endproc
 3576              	.LFE33:
 3578              		.section	.text.program_main,"ax",%progbits
 3579              		.align	1
 3580              		.p2align 2,,3
 3581              		.global	program_main
 3582              		.syntax unified
 3583              		.thumb
 3584              		.thumb_func
 3585              		.fpu fpv4-sp-d16
 3587              	program_main:
 3588              	.LFB34:
 406:src/console.c **** 
 407:src/console.c **** void program_main(){
 3589              		.loc 2 407 20 is_stmt 1 view -0
 3590              		.cfi_startproc
 3591              		@ args = 0, pretend = 0, frame = 224
 3592              		@ frame_needed = 0, uses_anonymous_args = 0
 408:src/console.c ****   int c;
 3593              		.loc 2 408 3 view .LVU974
 409:src/console.c ****   struct _ndmap remapped;
 3594              		.loc 2 409 3 view .LVU975
 410:src/console.c **** 
 411:src/console.c ****   init_mem();
 3595              		.loc 2 411 3 view .LVU976
 407:src/console.c ****   int c;
 3596              		.loc 2 407 20 is_stmt 0 view .LVU977
 3597 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3598              		.cfi_def_cfa_offset 32
 3599              		.cfi_offset 4, -32
 3600              		.cfi_offset 5, -28
 3601              		.cfi_offset 6, -24
 3602              		.cfi_offset 7, -20
 3603              		.cfi_offset 8, -16
 3604              		.cfi_offset 9, -12
 3605              		.cfi_offset 10, -8
 3606              		.cfi_offset 14, -4
 3607 0004 B8B0     		sub	sp, sp, #224
 3608              		.cfi_def_cfa_offset 256
 3609              		.loc 2 411 3 view .LVU978
 3610 0006 FFF7FEFF 		bl	init_mem
 3611              	.LVL325:
 412:src/console.c ****   init_RegionTab();
 3612              		.loc 2 412 3 is_stmt 1 view .LVU979
 3613 000a FFF7FEFF 		bl	init_RegionTab
 3614              	.LVL326:
 413:src/console.c ****   init_34s();
 3615              		.loc 2 413 3 view .LVU980
 3616 000e FFF7FEFF 		bl	init_34s
 3617              	.LVL327:
ARM GAS  /tmp/cc7Wa57o.s 			page 98


 414:src/console.c ****   State2.flags = 1;  
 3618              		.loc 2 414 3 view .LVU981
 3619              		.loc 2 414 16 is_stmt 0 view .LVU982
 3620 0012 B24A     		ldr	r2, .L425
 3621 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3622 0016 43F00103 		orr	r3, r3, #1
 3623 001a 1376     		strb	r3, [r2, #24]
 415:src/console.c ****   check_create_wp34sdir();
 3624              		.loc 2 415 3 is_stmt 1 view .LVU983
 3625 001c FFF7FEFF 		bl	check_create_wp34sdir
 3626              	.LVL328:
 416:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3627              		.loc 2 416 3 view .LVU984
 3628              		.loc 2 416 8 is_stmt 0 view .LVU985
 3629 0020 0020     		movs	r0, #0
 3630 0022 FFF7FEFF 		bl	load_ram_file
 3631              	.LVL329:
 3632              		.loc 2 416 6 view .LVU986
 3633 0026 08B9     		cbnz	r0, .L323
 3634              		.loc 2 416 26 is_stmt 1 discriminator 1 view .LVU987
 3635              		.loc 2 416 34 is_stmt 0 discriminator 1 view .LVU988
 3636 0028 AD4B     		ldr	r3, .L425+4
 3637 002a 1860     		str	r0, [r3]
 3638              	.L323:
 417:src/console.c ****   load_backup_file(0);
 3639              		.loc 2 417 3 is_stmt 1 view .LVU989
 418:src/console.c ****   load_lib_file(0);
 419:src/console.c ****   t20->newln = 0;
 3640              		.loc 2 419 3 is_stmt 0 view .LVU990
 3641 002c AD4C     		ldr	r4, .L425+8
 3642 002e AE4E     		ldr	r6, .L425+12
 420:src/console.c ****   t20->lnfill = 0;
 421:src/console.c ****   t20->fixed = 1;
 422:src/console.c ****   t20->xspc = -2;
 423:src/console.c ****   t20->bgfill = 0;
 424:src/console.c ****   run_menu_item_app = run_menu_item;
 425:src/console.c ****   menu_line_str_app = menu_line_str;
 426:src/console.c **** 
 427:src/console.c ****   display();
 428:src/console.c ****   display_current_menu();
 429:src/console.c ****   lcd_refresh();
 430:src/console.c ****   JustDisplayed = 0;
 431:src/console.c ****   /*
 432:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 433:src/console.c ****     Sleeps peacefully while waiting for a key.
 434:src/console.c ****     Handles (in principle!) turning off and on.
 435:src/console.c ****     =================
 436:src/console.c ****     Main event loop
 437:src/console.c ****     =================
 438:src/console.c **** 
 439:src/console.c ****     Status flags:
 440:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 441:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 442:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 443:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 444:src/console.c ****   */
 445:src/console.c ****   for(;;) {
ARM GAS  /tmp/cc7Wa57o.s 			page 99


 446:src/console.c **** 
 447:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 448:src/console.c ****       {
 449:src/console.c **** 	CLR_ST(STAT_RUNNING);
 450:src/console.c **** 	sys_sleep();
 451:src/console.c ****       }
 452:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 3643              		.loc 2 452 35 view .LVU991
 3644 0030 AE4F     		ldr	r7, .L425+16
 453:src/console.c ****     {
 454:src/console.c ****       CLR_ST(STAT_RUNNING);
 455:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3645              		.loc 2 455 7 view .LVU992
 3646 0032 DFF82C83 		ldr	r8, .L425+132
 417:src/console.c ****   load_lib_file(0);
 3647              		.loc 2 417 3 view .LVU993
 3648 0036 0020     		movs	r0, #0
 3649 0038 FFF7FEFF 		bl	load_backup_file
 3650              	.LVL330:
 418:src/console.c ****   t20->newln = 0;
 3651              		.loc 2 418 3 is_stmt 1 view .LVU994
 3652 003c 0020     		movs	r0, #0
 3653 003e FFF7FEFF 		bl	load_lib_file
 3654              	.LVL331:
 419:src/console.c ****   t20->lnfill = 0;
 3655              		.loc 2 419 3 view .LVU995
 3656 0042 236B     		ldr	r3, [r4, #48]
 420:src/console.c ****   t20->fixed = 1;
 3657              		.loc 2 420 3 view .LVU996
 421:src/console.c ****   t20->xspc = -2;
 3658              		.loc 2 421 3 view .LVU997
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3659              		.loc 2 424 21 is_stmt 0 view .LVU998
 3660 0044 AA4A     		ldr	r2, .L425+20
 421:src/console.c ****   t20->xspc = -2;
 3661              		.loc 2 421 14 view .LVU999
 3662 0046 0121     		movs	r1, #1
 3663 0048 1974     		strb	r1, [r3, #16]
 422:src/console.c ****   t20->bgfill = 0;
 3664              		.loc 2 422 3 is_stmt 1 view .LVU1000
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3665              		.loc 2 423 15 is_stmt 0 view .LVU1001
 3666 004a 0025     		movs	r5, #0
 422:src/console.c ****   t20->bgfill = 0;
 3667              		.loc 2 422 13 view .LVU1002
 3668 004c FE21     		movs	r1, #254
 3669 004e 9973     		strb	r1, [r3, #14]
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3670              		.loc 2 423 3 is_stmt 1 view .LVU1003
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3671              		.loc 2 423 15 is_stmt 0 view .LVU1004
 3672 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 419:src/console.c ****   t20->lnfill = 0;
 3673              		.loc 2 419 14 view .LVU1005
 3674 0052 1D75     		strb	r5, [r3, #20]
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3675              		.loc 2 424 3 is_stmt 1 view .LVU1006
ARM GAS  /tmp/cc7Wa57o.s 			page 100


 425:src/console.c **** 
 3676              		.loc 2 425 21 is_stmt 0 view .LVU1007
 3677 0054 A74B     		ldr	r3, .L425+24
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3678              		.loc 2 424 21 view .LVU1008
 3679 0056 E260     		str	r2, [r4, #12]
 425:src/console.c **** 
 3680              		.loc 2 425 3 is_stmt 1 view .LVU1009
 425:src/console.c **** 
 3681              		.loc 2 425 21 is_stmt 0 view .LVU1010
 3682 0058 2361     		str	r3, [r4, #16]
 427:src/console.c ****   display_current_menu();
 3683              		.loc 2 427 3 is_stmt 1 view .LVU1011
 3684 005a FFF7FEFF 		bl	display
 3685              	.LVL332:
 428:src/console.c ****   lcd_refresh();
 3686              		.loc 2 428 3 view .LVU1012
 3687 005e FFF7FEFF 		bl	display_current_menu
 3688              	.LVL333:
 429:src/console.c ****   JustDisplayed = 0;
 3689              		.loc 2 429 3 view .LVU1013
 3690 0062 A54B     		ldr	r3, .L425+28
 3691 0064 9847     		blx	r3
 3692              	.LVL334:
 430:src/console.c ****   /*
 3693              		.loc 2 430 3 view .LVU1014
 430:src/console.c ****   /*
 3694              		.loc 2 430 17 is_stmt 0 view .LVU1015
 3695 0066 A54B     		ldr	r3, .L425+32
 3696 0068 1D60     		str	r5, [r3]
 3697              	.L324:
 445:src/console.c **** 
 3698              		.loc 2 445 3 is_stmt 1 view .LVU1016
 447:src/console.c ****       {
 3699              		.loc 2 447 5 view .LVU1017
 447:src/console.c ****       {
 3700              		.loc 2 447 10 is_stmt 0 view .LVU1018
 3701 006a 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3702              		.loc 2 447 8 view .LVU1019
 3703 006c 9B05     		lsls	r3, r3, #22
 3704 006e 40F1B980 		bpl	.L325
 447:src/console.c ****       {
 3705              		.loc 2 447 30 discriminator 1 view .LVU1020
 3706 0072 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3707              		.loc 2 447 27 discriminator 1 view .LVU1021
 3708 0074 5D07     		lsls	r5, r3, #29
 3709 0076 40F1B580 		bpl	.L325
 449:src/console.c **** 	sys_sleep();
 3710              		.loc 2 449 2 is_stmt 1 view .LVU1022
 3711 007a 2368     		ldr	r3, [r4]
 450:src/console.c ****       }
 3712              		.loc 2 450 2 is_stmt 0 view .LVU1023
 3713 007c A04A     		ldr	r2, .L425+36
 449:src/console.c **** 	sys_sleep();
 3714              		.loc 2 449 2 view .LVU1024
ARM GAS  /tmp/cc7Wa57o.s 			page 101


 3715 007e 23F00203 		bic	r3, r3, #2
 3716 0082 2360     		str	r3, [r4]
 450:src/console.c ****       }
 3717              		.loc 2 450 2 is_stmt 1 view .LVU1025
 3718 0084 9047     		blx	r2
 3719              	.LVL335:
 3720              	.L326:
 456:src/console.c ****       sys_sleep();
 457:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 458:src/console.c **** 	key_push (K_HEARTBEAT);
 459:src/console.c **** 	if (Pause > 0) Pause--;
 460:src/console.c ****       }
 461:src/console.c ****       sys_timer_disable(0); // stop timer
 462:src/console.c ****     }
 463:src/console.c ****     
 464:src/console.c ****     // Wakeup in off state or going to sleep
 465:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3721              		.loc 2 465 5 view .LVU1026
 3722              		.loc 2 465 9 is_stmt 0 view .LVU1027
 3723 0086 2368     		ldr	r3, [r4]
 3724              		.loc 2 465 8 view .LVU1028
 3725 0088 9805     		lsls	r0, r3, #22
 3726 008a 00F1D280 		bmi	.L332
 3727              	.L418:
 3728              		.loc 2 465 29 discriminator 1 view .LVU1029
 3729 008e 2368     		ldr	r3, [r4]
 3730              		.loc 2 465 26 discriminator 1 view .LVU1030
 3731 0090 5907     		lsls	r1, r3, #29
 3732 0092 00F1CE80 		bmi	.L332
 466:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 467:src/console.c ****         // Going to off mode
 468:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 469:src/console.c ****         draw_power_off_image(1);
 470:src/console.c **** 
 471:src/console.c ****         LCD_power_off(0);
 472:src/console.c ****         SET_ST(STAT_SUSPENDED);
 473:src/console.c ****         SET_ST(STAT_OFF);
 474:src/console.c ****       }
 475:src/console.c ****       // Already in OFF -> just continue to sleep above
 476:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 477:src/console.c ****       // thus reaching the sleep()
 478:src/console.c ****     }
 479:src/console.c **** 
 480:src/console.c ****     // Well, we are woken-up
 481:src/console.c ****     SET_ST(STAT_RUNNING);
 3733              		.loc 2 481 5 is_stmt 1 view .LVU1031
 3734 0096 2368     		ldr	r3, [r4]
 3735 0098 43F00203 		orr	r3, r3, #2
 3736 009c 2360     		str	r3, [r4]
 482:src/console.c **** 
 483:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 484:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3737              		.loc 2 484 5 view .LVU1032
 3738 009e 2368     		ldr	r3, [r4]
 3739 00a0 23F00403 		bic	r3, r3, #4
 3740 00a4 2360     		str	r3, [r4]
 485:src/console.c **** 
ARM GAS  /tmp/cc7Wa57o.s 			page 102


 486:src/console.c ****     // Get up from OFF state
 487:src/console.c ****     if ( ST(STAT_OFF) ) {
 3741              		.loc 2 487 5 view .LVU1033
 3742              		.loc 2 487 10 is_stmt 0 view .LVU1034
 3743 00a6 2368     		ldr	r3, [r4]
 3744              		.loc 2 487 8 view .LVU1035
 3745 00a8 DA06     		lsls	r2, r3, #27
 3746 00aa 0ED5     		bpl	.L337
 488:src/console.c ****       LCD_power_on();
 3747              		.loc 2 488 7 is_stmt 1 view .LVU1036
 3748 00ac 954B     		ldr	r3, .L425+40
 3749 00ae 9847     		blx	r3
 3750              	.LVL336:
 489:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3751              		.loc 2 489 7 view .LVU1037
 3752 00b0 954B     		ldr	r3, .L425+44
 3753 00b2 9847     		blx	r3
 3754              	.LVL337:
 490:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3755              		.loc 2 490 7 view .LVU1038
 3756 00b4 954B     		ldr	r3, .L425+48
 3757 00b6 9847     		blx	r3
 3758              	.LVL338:
 491:src/console.c **** 
 492:src/console.c ****       CLR_ST(STAT_OFF);
 3759              		.loc 2 492 7 view .LVU1039
 3760 00b8 2368     		ldr	r3, [r4]
 493:src/console.c **** 
 494:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3761              		.loc 2 494 13 is_stmt 0 view .LVU1040
 3762 00ba 954A     		ldr	r2, .L425+52
 492:src/console.c **** 
 3763              		.loc 2 492 7 view .LVU1041
 3764 00bc 23F01003 		bic	r3, r3, #16
 3765 00c0 2360     		str	r3, [r4]
 3766              		.loc 2 494 7 is_stmt 1 view .LVU1042
 3767              		.loc 2 494 13 is_stmt 0 view .LVU1043
 3768 00c2 9047     		blx	r2
 3769              	.LVL339:
 3770              		.loc 2 494 10 view .LVU1044
 3771 00c4 08B9     		cbnz	r0, .L337
 495:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3772              		.loc 2 495 9 is_stmt 1 view .LVU1045
 3773 00c6 934B     		ldr	r3, .L425+56
 3774 00c8 9847     		blx	r3
 3775              	.LVL340:
 3776              	.L337:
 496:src/console.c ****     }
 497:src/console.c **** 
 498:src/console.c ****     // Key is ready -> clear auto off timer
 499:src/console.c ****     //    if ( !key_empty() )
 500:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 501:src/console.c ****     // Fetch the key
 502:src/console.c ****     //  < 0 -> No key event
 503:src/console.c ****     //  > 0 -> Key pressed
 504:src/console.c ****     // == 0 -> Key released
 505:src/console.c ****     c = key_pop();
ARM GAS  /tmp/cc7Wa57o.s 			page 103


 3777              		.loc 2 505 5 view .LVU1046
 3778              		.loc 2 505 9 is_stmt 0 view .LVU1047
 3779 00ca 934B     		ldr	r3, .L425+60
 3780 00cc 9847     		blx	r3
 3781              	.LVL341:
 506:src/console.c **** #ifdef INCLUDE_STOPWATCH
 507:src/console.c ****     if ( KeyCallback != NULL ) {
 3782              		.loc 2 507 22 view .LVU1048
 3783 00ce 3368     		ldr	r3, [r6]
 505:src/console.c **** #ifdef INCLUDE_STOPWATCH
 3784              		.loc 2 505 9 view .LVU1049
 3785 00d0 0546     		mov	r5, r0
 3786              	.LVL342:
 3787              		.loc 2 507 5 is_stmt 1 view .LVU1050
 3788              		.loc 2 507 8 is_stmt 0 view .LVU1051
 3789 00d2 002B     		cmp	r3, #0
 3790 00d4 00F04681 		beq	.L339
 508:src/console.c ****       c = (*KeyCallback)( c );
 3791              		.loc 2 508 7 is_stmt 1 view .LVU1052
 3792              		.loc 2 508 12 is_stmt 0 view .LVU1053
 3793 00d8 9847     		blx	r3
 3794              	.LVL343:
 3795              		.loc 2 508 12 view .LVU1054
 3796 00da 0546     		mov	r5, r0
 3797              	.LVL344:
 3798              	.L340:
 509:src/console.c ****     }
 510:src/console.c ****     else if ( StopWatchRunning && ( Ticker % STOPWATCH_BLINK ) == 0 ) {
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 512:src/console.c ****       finish_LEQ();
 513:src/console.c ****     }
 514:src/console.c **** #endif
 515:src/console.c ****     if ( (c != K_HEARTBEAT) && (c >= 0) ) {
 3799              		.loc 2 515 5 is_stmt 1 view .LVU1055
 3800              		.loc 2 515 8 is_stmt 0 view .LVU1056
 3801 00dc 622D     		cmp	r5, #98
 3802 00de 00F0BF80 		beq	.L341
 3803              		.loc 2 515 29 discriminator 1 view .LVU1057
 3804 00e2 002D     		cmp	r5, #0
 3805 00e4 C1DB     		blt	.L324
 516:src/console.c ****       reset_auto_off();
 3806              		.loc 2 516 7 is_stmt 1 view .LVU1058
 3807 00e6 8D4B     		ldr	r3, .L425+64
 3808 00e8 9847     		blx	r3
 3809              	.LVL345:
 517:src/console.c ****       //      start_key_timer();
 518:src/console.c ****     }
 519:src/console.c ****     if (c >= 0) {
 3810              		.loc 2 519 5 view .LVU1059
 520:src/console.c ****       remapped = remap(c);
 3811              		.loc 2 520 7 view .LVU1060
 3812              	.LBB143:
 3813              	.LBI143:
  56:src/console.c **** 
 3814              		.loc 2 56 22 view .LVU1061
 3815              	.LBB144:
  58:src/console.c **** 
ARM GAS  /tmp/cc7Wa57o.s 			page 104


 3816              		.loc 2 58 3 view .LVU1062
 3817              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3818              		.loc 3 1 1 view .LVU1063
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
ARM GAS  /tmp/cc7Wa57o.s 			page 105


  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3819              		.loc 3 59 3 view .LVU1064
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX}, // Complex
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     //    {K_MULTI, 1}, // lastX 
  78:src/keytran.c ****     {K_OP, RARG( RARG_RCL, regL_idx )}, // lastX 
  79:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
  80:src/keytran.c ****     {K_SETMENU,  M_Disp}, // DISP menu
  81:src/keytran.c ****     {K_SETMENU,  M_Clear}, // CLR menu
  82:src/keytran.c ****     // Fourth row of DM42 18--22
  83:src/keytran.c ****     {K40, 0}, // up-arrow
  84:src/keytran.c ****     {K52, 1}, // SLV
  85:src/keytran.c ****     {K_SETMENU,  M_Solve}, // Integral/sum/product menu
  86:src/keytran.c ****     {K44, 3}, // MATRIX cat
  87:src/keytran.c ****     {K_SETMENU,  M_Stats}, // STATS menu
  88:src/keytran.c ****     // Fifth row of DM42 23--27
  89:src/keytran.c ****     {K50, 0}, // down-arrow
  90:src/keytran.c ****     {K_SETMENU,  M_Base}, // BASE menu 
  91:src/keytran.c ****     {K04, 3}, // CONV cat
  92:src/keytran.c ****     {K_SETMENU,  M_Flags}, // FLAGS menu
  93:src/keytran.c ****     {K_SETMENU,  M_Prob}, // PROBS menu
  94:src/keytran.c ****     // Sixth row of DM42 28--32
  95:src/keytran.c ****     {K_G, 0}, // gshift
  96:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  97:src/keytran.c ****     {K_SETMENU,  M_User}, // select user menu
  98:src/keytran.c ****     {K52, 3}, // P.FCN cat
  99:src/keytran.c ****     {K_SETMENU, M_Print}, // Print menu
 100:src/keytran.c ****     // Last row of DM42 33--37
 101:src/keytran.c ****     {K60, 3}, // off
 102:src/keytran.c ****     {K_SETMENU,  M_Setup1}, // SETUP menu
 103:src/keytran.c ****     {K21, 1}, // <(
 104:src/keytran.c ****     {K63, 3}, // P/R
 105:src/keytran.c ****     {K10, 3}, // CAT cat
 106:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
ARM GAS  /tmp/cc7Wa57o.s 			page 106


 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_NOP, 0},
 114:src/keytran.c ****     {K_SETMENU,  M_Last}, // last menu
 115:src/keytran.c ****     {K_SETMENU,  M_Misc}, // MISC menu!
 116:src/keytran.c ****   };
 117:src/keytran.c **** 
 118:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3820              		.loc 3 118 3 view .LVU1065
 119:src/keytran.c ****     {K_RELEASE, -1},
 120:src/keytran.c ****     // Top row of DM42 1--6
 121:src/keytran.c ****     {K64, 3}, // sig+
 122:src/keytran.c ****     {K34, 1}, // 1/x
 123:src/keytran.c ****     {K44, 1}, // sqrt x
 124:src/keytran.c ****     {K31, 2}, // 10^x
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     {K_NOP, 0}, // no function
 127:src/keytran.c ****     // Next row of DM42 7--12
 128:src/keytran.c ****     {K_NOP, 0}, // no function
 129:src/keytran.c ****     {K11, 3}, // View
 130:src/keytran.c ****     {K12, 3}, // Rup
 131:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 133:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 134:src/keytran.c ****     // Third row of DM42 13--17
 135:src/keytran.c ****     {K20, 2}, // fill
 136:src/keytran.c ****     {K_SETMENU,  M_Swap}, // X<>Y menu
 137:src/keytran.c ****     {K05, 3}, // MODE cat
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     {K_NOP, 0}, // no function
 140:src/keytran.c ****     // Fourth row of DM42 18--22
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K_NOP, 0}, // no function
 144:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 145:src/keytran.c ****     {K42, 3}, // STAT catalogue
 146:src/keytran.c ****     // Fifth row of DM42 23--27
 147:src/keytran.c ****     {K_NOP, 0}, // no function 
 148:src/keytran.c ****     {K_NOP, 0}, // no function
 149:src/keytran.c ****     {K20, 3}, // CONST catalogue
 150:src/keytran.c ****     {K51, 3}, // TEST catalogue
 151:src/keytran.c ****     {K41, 3}, // PROB catalogue
 152:src/keytran.c ****     // Sixth row of DM42 28--32
 153:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     //    {K_MULTI, SETUMEN}, // Set up user menu
 156:src/keytran.c ****     {K_SETMENU, M_Usermenu}, //User menu create
 157:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 158:src/keytran.c ****     {K_NOP, 0}, // no function
 159:src/keytran.c ****     // Last row of DM42 33--37
 160:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 161:src/keytran.c ****     {K_SETMENU,  M_Setup2}, // SETUP2 menu
 162:src/keytran.c ****     {K_NOP, 0}, // no function
 163:src/keytran.c ****     {K_SETMENU,  M_Program}, // P.FCN menu
 164:src/keytran.c ****     {K50, 3}, // Status
 165:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 166:src/keytran.c ****     {K_NOP, 0},
ARM GAS  /tmp/cc7Wa57o.s 			page 107


 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****     {K_NOP, 0},
 174:src/keytran.c ****     {K_NOP, 0},
 175:src/keytran.c ****   };
 176:src/keytran.c **** 
 177:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3821              		.loc 3 177 1 view .LVU1066
 178:src/keytran.c ****     {K_RELEASE, -1},
 179:src/keytran.c ****     // Top row of DM42 1--6
 180:src/keytran.c ****     {K00, -1},
 181:src/keytran.c ****     {K01, -1},
 182:src/keytran.c ****     {K02, -1},
 183:src/keytran.c ****     {K03, -1},
 184:src/keytran.c ****     {K04, -1},
 185:src/keytran.c ****     {K05, -1},
 186:src/keytran.c ****     // Next row of DM42 7--12
 187:src/keytran.c ****     {K10, -1},
 188:src/keytran.c ****     {K11, -1},
 189:src/keytran.c ****     {K12, -1},
 190:src/keytran.c ****     {K13, -1},
 191:src/keytran.c ****     {K14, -1},
 192:src/keytran.c ****     {K15, -1},
 193:src/keytran.c ****     // Third row of DM42 13--17
 194:src/keytran.c ****     {K20, -1},
 195:src/keytran.c ****     {K21, -1},
 196:src/keytran.c ****     {K22, -1},
 197:src/keytran.c ****     {K23, -1},
 198:src/keytran.c ****     {K24, -1},
 199:src/keytran.c ****     // Fourth row of DM42 18--22
 200:src/keytran.c ****     {K30, -1},
 201:src/keytran.c ****     {K31, -1},
 202:src/keytran.c ****     {K32, -1},
 203:src/keytran.c ****     {K33, -1},
 204:src/keytran.c ****     {K34, -1},
 205:src/keytran.c ****     // Fifth row of DM42 23--27
 206:src/keytran.c ****     {K40, -1},
 207:src/keytran.c ****     {K41, -1},
 208:src/keytran.c ****     {K42, -1},
 209:src/keytran.c ****     {K43, -1},
 210:src/keytran.c ****     {K44, -1},
 211:src/keytran.c ****     // Sixth row of DM42 28--32
 212:src/keytran.c ****     {K50, -1},
 213:src/keytran.c ****     {K51, -1},
 214:src/keytran.c ****     {K52, -1},
 215:src/keytran.c ****     {K53, -1},
 216:src/keytran.c ****     {K54, -1},
 217:src/keytran.c ****     // Last row of DM42 33--37
 218:src/keytran.c ****     {K60, -1},
 219:src/keytran.c ****     {K61, -1},
 220:src/keytran.c ****     {K62, -1},
 221:src/keytran.c ****     {K63, -1},
 222:src/keytran.c ****     {K64, -1},
ARM GAS  /tmp/cc7Wa57o.s 			page 108


 223:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_NOP, -1},
 227:src/keytran.c ****     {K_NOP, -1},
 228:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 229:src/keytran.c ****     {K_CMPLX, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c ****     {K_NOP, -1},
 232:src/keytran.c ****     {K_NOP, -1},
 233:src/keytran.c **** };
 234:src/keytran.c **** 
 235:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3822              		.loc 3 235 1 view .LVU1067
  62:src/console.c **** 
 3823              		.loc 2 62 3 view .LVU1068
  64:src/console.c **** 
 3824              		.loc 2 64 3 view .LVU1069
  64:src/console.c **** 
 3825              		.loc 2 64 6 is_stmt 0 view .LVU1070
 3826 00ea 632D     		cmp	r5, #99
 3827 00ec 00F08A81 		beq	.L406
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3828              		.loc 2 66 3 is_stmt 1 view .LVU1071
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3829              		.loc 2 66 6 is_stmt 0 view .LVU1072
 3830 00f0 2C2D     		cmp	r5, #44
 3831 00f2 00F05881 		beq	.L344
  71:src/console.c ****     return mapping_running[c];
 3832              		.loc 2 71 3 is_stmt 1 view .LVU1073
  71:src/console.c ****     return mapping_running[c];
 3833              		.loc 2 71 15 is_stmt 0 view .LVU1074
 3834 00f6 8A4A     		ldr	r2, .L425+68
 3835 00f8 8A4B     		ldr	r3, .L425+72
 3836 00fa 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3837 00fe 1968     		ldr	r1, [r3]
  71:src/console.c ****     return mapping_running[c];
 3838              		.loc 2 71 6 view .LVU1075
 3839 0100 59EA0109 		orrs	r9, r9, r1
 3840 0104 40F07181 		bne	.L407
  75:src/console.c ****   
 3841              		.loc 2 75 3 is_stmt 1 view .LVU1076
  75:src/console.c ****   
 3842              		.loc 2 75 22 is_stmt 0 view .LVU1077
 3843 0108 04A8     		add	r0, sp, #16
 3844 010a FFF7FEFF 		bl	get_current_menu_ref
 3845              	.LVL346:
  77:src/console.c ****   case KEY_F1:
 3846              		.loc 2 77 3 is_stmt 1 view .LVU1078
 3847 010e A5F12603 		sub	r3, r5, #38
 3848 0112 052B     		cmp	r3, #5
 3849 0114 00F28081 		bhi	.L346
 3850 0118 DFE813F0 		tbh	[pc, r3, lsl #1]
 3851              	.L348:
 3852 011c 8601     		.2byte	(.L353-.L348)/2
 3853 011e 0B00     		.2byte	(.L352-.L348)/2
 3854 0120 1500     		.2byte	(.L351-.L348)/2
ARM GAS  /tmp/cc7Wa57o.s 			page 109


 3855 0122 1F00     		.2byte	(.L350-.L348)/2
 3856 0124 2900     		.2byte	(.L349-.L348)/2
 3857 0126 3300     		.2byte	(.L347-.L348)/2
 3858              		.p2align 1
 3859              	.L354:
  80:src/console.c ****   case KEY_F2:
 3860              		.loc 2 80 5 view .LVU1079
  80:src/console.c ****   case KEY_F2:
 3861              		.loc 2 80 9 is_stmt 0 view .LVU1080
 3862 0128 FFF7FEFF 		bl	cur_shift
 3863              	.LVL347:
  80:src/console.c ****   case KEY_F2:
 3864              		.loc 2 80 8 view .LVU1081
 3865 012c 0128     		cmp	r0, #1
 3866 012e 00F01882 		beq	.L408
 3867              	.L352:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3868              		.loc 2 82 5 is_stmt 1 view .LVU1082
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3869              		.loc 2 82 9 is_stmt 0 view .LVU1083
 3870 0132 FFF7FEFF 		bl	cur_shift
 3871              	.LVL348:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3872              		.loc 2 82 8 view .LVU1084
 3873 0136 0028     		cmp	r0, #0
 3874 0138 00F0A381 		beq	.L409
  83:src/console.c ****   case KEY_F3:
 3875              		.loc 2 83 5 is_stmt 1 view .LVU1085
  83:src/console.c ****   case KEY_F3:
 3876              		.loc 2 83 9 is_stmt 0 view .LVU1086
 3877 013c FFF7FEFF 		bl	cur_shift
 3878              	.LVL349:
  83:src/console.c ****   case KEY_F3:
 3879              		.loc 2 83 8 view .LVU1087
 3880 0140 0128     		cmp	r0, #1
 3881 0142 00F0E881 		beq	.L410
 3882              	.L351:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3883              		.loc 2 85 5 is_stmt 1 view .LVU1088
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3884              		.loc 2 85 9 is_stmt 0 view .LVU1089
 3885 0146 FFF7FEFF 		bl	cur_shift
 3886              	.LVL350:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3887              		.loc 2 85 8 view .LVU1090
 3888 014a 0028     		cmp	r0, #0
 3889 014c 00F08F81 		beq	.L411
  86:src/console.c ****   case KEY_F4:
 3890              		.loc 2 86 5 is_stmt 1 view .LVU1091
  86:src/console.c ****   case KEY_F4:
 3891              		.loc 2 86 9 is_stmt 0 view .LVU1092
 3892 0150 FFF7FEFF 		bl	cur_shift
 3893              	.LVL351:
  86:src/console.c ****   case KEY_F4:
 3894              		.loc 2 86 8 view .LVU1093
 3895 0154 0128     		cmp	r0, #1
 3896 0156 00F0D481 		beq	.L412
ARM GAS  /tmp/cc7Wa57o.s 			page 110


 3897              	.L350:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3898              		.loc 2 88 5 is_stmt 1 view .LVU1094
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3899              		.loc 2 88 9 is_stmt 0 view .LVU1095
 3900 015a FFF7FEFF 		bl	cur_shift
 3901              	.LVL352:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3902              		.loc 2 88 8 view .LVU1096
 3903 015e 0028     		cmp	r0, #0
 3904 0160 00F07B81 		beq	.L413
  89:src/console.c ****   case KEY_F5:
 3905              		.loc 2 89 5 is_stmt 1 view .LVU1097
  89:src/console.c ****   case KEY_F5:
 3906              		.loc 2 89 9 is_stmt 0 view .LVU1098
 3907 0164 FFF7FEFF 		bl	cur_shift
 3908              	.LVL353:
  89:src/console.c ****   case KEY_F5:
 3909              		.loc 2 89 8 view .LVU1099
 3910 0168 0128     		cmp	r0, #1
 3911 016a 00F0B681 		beq	.L414
 3912              	.L349:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3913              		.loc 2 91 5 is_stmt 1 view .LVU1100
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3914              		.loc 2 91 9 is_stmt 0 view .LVU1101
 3915 016e FFF7FEFF 		bl	cur_shift
 3916              	.LVL354:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3917              		.loc 2 91 8 view .LVU1102
 3918 0172 0028     		cmp	r0, #0
 3919 0174 00F06781 		beq	.L415
  92:src/console.c ****   case KEY_F6:
 3920              		.loc 2 92 5 is_stmt 1 view .LVU1103
  92:src/console.c ****   case KEY_F6:
 3921              		.loc 2 92 9 is_stmt 0 view .LVU1104
 3922 0178 FFF7FEFF 		bl	cur_shift
 3923              	.LVL355:
  92:src/console.c ****   case KEY_F6:
 3924              		.loc 2 92 8 view .LVU1105
 3925 017c 0128     		cmp	r0, #1
 3926 017e 00F0B681 		beq	.L416
 3927              	.L347:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3928              		.loc 2 94 5 is_stmt 1 view .LVU1106
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3929              		.loc 2 94 9 is_stmt 0 view .LVU1107
 3930 0182 FFF7FEFF 		bl	cur_shift
 3931              	.LVL356:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3932              		.loc 2 94 8 view .LVU1108
 3933 0186 0028     		cmp	r0, #0
 3934 0188 40F04281 		bne	.L359
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3935              		.loc 2 94 33 is_stmt 1 view .LVU1109
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3936              		.loc 2 94 51 is_stmt 0 view .LVU1110
ARM GAS  /tmp/cc7Wa57o.s 			page 111


 3937 018c DDE93001 		ldrd	r0, r1, [sp, #192]
 3938 0190 9DF8C050 		ldrb	r5, [sp, #192]	@ zero_extendqisi2
 3939              	.LVL357:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3940              		.loc 2 94 51 view .LVU1111
 3941 0194 0DF1080A 		add	r10, sp, #8
 3942              	.LBE144:
 3943              	.LBE143:
 521:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3944              		.loc 2 521 10 view .LVU1112
 3945 0198 2F2D     		cmp	r5, #47
 3946              	.LBB153:
 3947              	.LBB146:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3948              		.loc 2 94 51 view .LVU1113
 3949 019a 8AE80300 		stm	r10, {r0, r1}
 3950 019e 8946     		mov	r9, r1
 3951              	.LVL358:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3952              		.loc 2 94 51 view .LVU1114
 3953              	.LBE146:
 3954              	.LBE153:
 3955              		.loc 2 521 7 is_stmt 1 view .LVU1115
 3956              		.loc 2 521 10 is_stmt 0 view .LVU1116
 3957 01a0 69D1     		bne	.L370
 3958              	.LVL359:
 3959              	.L419:
 522:src/console.c **** 	set_menu ( remapped.shift );
 3960              		.loc 2 522 2 is_stmt 1 view .LVU1117
 3961              	.LBB154:
 3962              	.LBB155:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3963              		.loc 1 123 13 is_stmt 0 view .LVU1118
 3964 01a2 614A     		ldr	r2, .L425+76
 3965 01a4 92F90030 		ldrsb	r3, [r2]
 3966              	.LBE155:
 3967              	.LBE154:
 3968              		.loc 2 522 2 view .LVU1119
 3969 01a8 4FFA89F1 		sxtb	r1, r9
 3970              	.LVL360:
 3971              	.LBB158:
 3972              	.LBI154:
 122:src/menu.c    ****   menu_name m = current_menu;
 3973              		.loc 1 122 6 is_stmt 1 view .LVU1120
 3974              	.LBB156:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3975              		.loc 1 123 3 view .LVU1121
 124:src/menu.c    ****     current_menu = default_menu;
 3976              		.loc 1 124 3 view .LVU1122
 124:src/menu.c    ****     current_menu = default_menu;
 3977              		.loc 1 124 6 is_stmt 0 view .LVU1123
 3978 01ac 9942     		cmp	r1, r3
 3979 01ae 00F02B81 		beq	.L417
 127:src/menu.c    ****     current_menu = last_menu;
 3980              		.loc 1 127 8 is_stmt 1 view .LVU1124
 127:src/menu.c    ****     current_menu = last_menu;
 3981              		.loc 1 127 11 is_stmt 0 view .LVU1125
ARM GAS  /tmp/cc7Wa57o.s 			page 112


 3982 01b2 481C     		adds	r0, r1, #1
 128:src/menu.c    ****   }
 3983              		.loc 1 128 5 is_stmt 1 view .LVU1126
 128:src/menu.c    ****   }
 3984              		.loc 1 128 18 is_stmt 0 view .LVU1127
 3985 01b4 04BF     		itt	eq
 3986 01b6 5D49     		ldreq	r1, .L425+80
 3987              	.LVL361:
 128:src/menu.c    ****   }
 3988              		.loc 1 128 18 view .LVU1128
 3989 01b8 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 131:src/menu.c    ****   }
 3990              		.loc 1 131 5 is_stmt 1 view .LVU1129
 131:src/menu.c    ****   }
 3991              		.loc 1 131 18 is_stmt 0 view .LVU1130
 3992 01ba 1170     		strb	r1, [r2]
 3993              	.LVL362:
 3994              	.L372:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3995              		.loc 1 133 3 is_stmt 1 view .LVU1131
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3996              		.loc 1 133 6 is_stmt 0 view .LVU1132
 3997 01bc 092B     		cmp	r3, #9
 3998 01be 03D0     		beq	.L374
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3999              		.loc 1 133 23 view .LVU1133
 4000 01c0 102B     		cmp	r3, #16
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4001              		.loc 1 133 43 is_stmt 1 view .LVU1134
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4002              		.loc 1 133 53 is_stmt 0 view .LVU1135
 4003 01c2 1CBF     		itt	ne
 4004 01c4 594A     		ldrne	r2, .L425+80
 4005 01c6 1370     		strbne	r3, [r2]
 4006              	.L374:
 4007              	.LVL363:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4008              		.loc 1 133 53 view .LVU1136
 4009              	.LBE156:
 4010              	.LBE158:
 523:src/console.c **** 	display_current_menu ();
 4011              		.loc 2 523 2 is_stmt 1 view .LVU1137
 4012 01c8 FFF7FEFF 		bl	display_current_menu
 4013              	.LVL364:
 524:src/console.c **** 	reset_shift();
 4014              		.loc 2 524 2 view .LVU1138
 4015 01cc FFF7FEFF 		bl	reset_shift
 4016              	.LVL365:
 525:src/console.c **** 	remapped = no_key;
 4017              		.loc 2 525 2 view .LVU1139
 4018              		.loc 2 525 11 is_stmt 0 view .LVU1140
 4019 01d0 574B     		ldr	r3, .L425+84
 4020 01d2 93E80300 		ldm	r3, {r0, r1}
 4021 01d6 0DF1080A 		add	r10, sp, #8
 4022 01da 8AE80300 		stm	r10, {r0, r1}
 4023 01de 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4024              	.LVL366:
ARM GAS  /tmp/cc7Wa57o.s 			page 113


 4025              		.loc 2 525 11 view .LVU1141
 4026 01e0 8946     		mov	r9, r1
 4027              	.LVL367:
 4028              		.loc 2 525 11 view .LVU1142
 4029 01e2 48E0     		b	.L370
 4030              	.LVL368:
 4031              	.L325:
 452:src/console.c ****     {
 4032              		.loc 2 452 10 is_stmt 1 view .LVU1143
 452:src/console.c ****     {
 4033              		.loc 2 452 15 is_stmt 0 view .LVU1144
 4034 01e4 2568     		ldr	r5, [r4]
 452:src/console.c ****     {
 4035              		.loc 2 452 13 view .LVU1145
 4036 01e6 15F40075 		ands	r5, r5, #512
 4037 01ea 7FF44CAF 		bne	.L326
 452:src/console.c ****     {
 4038              		.loc 2 452 35 discriminator 1 view .LVU1146
 4039 01ee B847     		blx	r7
 4040              	.LVL369:
 452:src/console.c ****     {
 4041              		.loc 2 452 32 discriminator 1 view .LVU1147
 4042 01f0 0028     		cmp	r0, #0
 4043 01f2 3FF448AF 		beq	.L326
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 4044              		.loc 2 454 7 is_stmt 1 view .LVU1148
 4045 01f6 2368     		ldr	r3, [r4]
 4046 01f8 23F00203 		bic	r3, r3, #2
 455:src/console.c ****       sys_sleep();
 4047              		.loc 2 455 7 is_stmt 0 view .LVU1149
 4048 01fc 2846     		mov	r0, r5
 4049 01fe 6421     		movs	r1, #100
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 4050              		.loc 2 454 7 view .LVU1150
 4051 0200 2360     		str	r3, [r4]
 455:src/console.c ****       sys_sleep();
 4052              		.loc 2 455 7 is_stmt 1 view .LVU1151
 4053 0202 C047     		blx	r8
 4054              	.LVL370:
 456:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 4055              		.loc 2 456 7 view .LVU1152
 4056 0204 3E4B     		ldr	r3, .L425+36
 4057 0206 9847     		blx	r3
 4058              	.LVL371:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4059              		.loc 2 457 7 view .LVU1153
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4060              		.loc 2 457 11 is_stmt 0 view .LVU1154
 4061 0208 4A4B     		ldr	r3, .L425+88
 4062 020a 2846     		mov	r0, r5
 4063 020c 9847     		blx	r3
 4064              	.LVL372:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4065              		.loc 2 457 10 view .LVU1155
 4066 020e 48B1     		cbz	r0, .L330
 458:src/console.c **** 	if (Pause > 0) Pause--;
 4067              		.loc 2 458 2 is_stmt 1 view .LVU1156
ARM GAS  /tmp/cc7Wa57o.s 			page 114


 4068 0210 494B     		ldr	r3, .L425+92
 4069 0212 6220     		movs	r0, #98
 4070 0214 9847     		blx	r3
 4071              	.LVL373:
 459:src/console.c ****       }
 4072              		.loc 2 459 2 view .LVU1157
 459:src/console.c ****       }
 4073              		.loc 2 459 12 is_stmt 0 view .LVU1158
 4074 0216 424B     		ldr	r3, .L425+68
 4075 0218 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 459:src/console.c ****       }
 4076              		.loc 2 459 5 view .LVU1159
 4077 021a 1AB1     		cbz	r2, .L330
 459:src/console.c ****       }
 4078              		.loc 2 459 17 is_stmt 1 discriminator 1 view .LVU1160
 459:src/console.c ****       }
 4079              		.loc 2 459 22 is_stmt 0 discriminator 1 view .LVU1161
 4080 021c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4081 021e 013A     		subs	r2, r2, #1
 4082 0220 D2B2     		uxtb	r2, r2
 4083 0222 1A70     		strb	r2, [r3]
 4084              	.L330:
 461:src/console.c ****     }
 4085              		.loc 2 461 7 is_stmt 1 view .LVU1162
 4086 0224 454B     		ldr	r3, .L425+96
 4087 0226 0020     		movs	r0, #0
 4088 0228 9847     		blx	r3
 4089              	.LVL374:
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4090              		.loc 2 465 5 view .LVU1163
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4091              		.loc 2 465 9 is_stmt 0 view .LVU1164
 4092 022a 2368     		ldr	r3, [r4]
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4093              		.loc 2 465 8 view .LVU1165
 4094 022c 9805     		lsls	r0, r3, #22
 4095 022e 7FF52EAF 		bpl	.L418
 4096              	.L332:
 466:src/console.c ****         // Going to off mode
 4097              		.loc 2 466 7 is_stmt 1 view .LVU1166
 466:src/console.c ****         // Going to off mode
 4098              		.loc 2 466 12 is_stmt 0 view .LVU1167
 4099 0232 2568     		ldr	r5, [r4]
 466:src/console.c ****         // Going to off mode
 4100              		.loc 2 466 10 view .LVU1168
 4101 0234 15F00405 		ands	r5, r5, #4
 4102 0238 7FF417AF 		bne	.L324
 468:src/console.c ****         draw_power_off_image(1);
 4103              		.loc 2 468 9 is_stmt 1 view .LVU1169
 4104 023c 404B     		ldr	r3, .L425+100
 4105 023e 2846     		mov	r0, r5
 4106 0240 9847     		blx	r3
 4107              	.LVL375:
 469:src/console.c **** 
 4108              		.loc 2 469 9 view .LVU1170
 4109 0242 404B     		ldr	r3, .L425+104
 4110 0244 0120     		movs	r0, #1
ARM GAS  /tmp/cc7Wa57o.s 			page 115


 4111 0246 9847     		blx	r3
 4112              	.LVL376:
 471:src/console.c ****         SET_ST(STAT_SUSPENDED);
 4113              		.loc 2 471 9 view .LVU1171
 4114 0248 3F4B     		ldr	r3, .L425+108
 4115 024a 2846     		mov	r0, r5
 4116 024c 9847     		blx	r3
 4117              	.LVL377:
 472:src/console.c ****         SET_ST(STAT_OFF);
 4118              		.loc 2 472 9 view .LVU1172
 4119 024e 2368     		ldr	r3, [r4]
 4120 0250 43F00403 		orr	r3, r3, #4
 4121 0254 2360     		str	r3, [r4]
 473:src/console.c ****       }
 4122              		.loc 2 473 9 view .LVU1173
 4123 0256 2368     		ldr	r3, [r4]
 4124 0258 43F01003 		orr	r3, r3, #16
 4125 025c 2360     		str	r3, [r4]
 4126 025e 04E7     		b	.L324
 4127              	.LVL378:
 4128              	.L341:
 519:src/console.c ****       remapped = remap(c);
 4129              		.loc 2 519 5 view .LVU1174
 520:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 4130              		.loc 2 520 7 view .LVU1175
 4131              	.LBB159:
  56:src/console.c **** 
 4132              		.loc 2 56 22 view .LVU1176
 4133              	.LBB147:
  58:src/console.c **** 
 4134              		.loc 2 58 3 view .LVU1177
   1:src/keytran.c ****     {K_RELEASE, -1},
 4135              		.loc 3 1 1 view .LVU1178
  59:src/keytran.c ****     {K_RELEASE, -1},
 4136              		.loc 3 59 3 view .LVU1179
 118:src/keytran.c ****     {K_RELEASE, -1},
 4137              		.loc 3 118 3 view .LVU1180
 177:src/keytran.c ****     {K_RELEASE, -1},
 4138              		.loc 3 177 1 view .LVU1181
 4139              		.loc 3 235 1 view .LVU1182
  62:src/console.c **** 
 4140              		.loc 2 62 3 view .LVU1183
  62:src/console.c **** 
 4141              		.loc 2 62 23 view .LVU1184
  62:src/console.c **** 
 4142              		.loc 2 62 30 is_stmt 0 view .LVU1185
 4143 0260 3A4B     		ldr	r3, .L425+112
 4144              	.LVL379:
 4145              	.L405:
  62:src/console.c **** 
 4146              		.loc 2 62 30 view .LVU1186
 4147 0262 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4148              	.LVL380:
  62:src/console.c **** 
 4149              		.loc 2 62 30 view .LVU1187
 4150 0264 93E80300 		ldm	r3, {r0, r1}
 4151 0268 0DF1080A 		add	r10, sp, #8
ARM GAS  /tmp/cc7Wa57o.s 			page 116


 4152 026c 8AE80300 		stm	r10, {r0, r1}
 4153 0270 8946     		mov	r9, r1
 4154              	.LVL381:
 4155              	.L343:
  62:src/console.c **** 
 4156              		.loc 2 62 30 view .LVU1188
 4157              	.LBE147:
 4158              	.LBE159:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4159              		.loc 2 521 7 is_stmt 1 view .LVU1189
 521:src/console.c **** 	set_menu ( remapped.shift );
 4160              		.loc 2 521 10 is_stmt 0 view .LVU1190
 4161 0272 2F2D     		cmp	r5, #47
 4162 0274 95D0     		beq	.L419
 4163              	.L370:
 526:src/console.c ****       }
 527:src/console.c ****       if (remapped.key_34s == K_SYS) {
 4164              		.loc 2 527 7 is_stmt 1 view .LVU1191
 4165              		.loc 2 527 10 is_stmt 0 view .LVU1192
 4166 0276 302D     		cmp	r5, #48
 4167 0278 19D1     		bne	.L375
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4168              		.loc 2 528 2 is_stmt 1 view .LVU1193
 4169 027a 2368     		ldr	r3, [r4]
 529:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 4170              		.loc 2 529 2 is_stmt 0 view .LVU1194
 4171 027c 344D     		ldr	r5, .L425+116
 4172              	.LVL382:
 4173              		.loc 2 529 2 view .LVU1195
 4174 027e 3548     		ldr	r0, .L425+120
 4175 0280 0022     		movs	r2, #0
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4176              		.loc 2 528 2 view .LVU1196
 4177 0282 43F04003 		orr	r3, r3, #64
 4178              		.loc 2 529 2 view .LVU1197
 4179 0286 1146     		mov	r1, r2
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4180              		.loc 2 528 2 view .LVU1198
 4181 0288 2360     		str	r3, [r4]
 4182              		.loc 2 529 2 is_stmt 1 view .LVU1199
 4183 028a A847     		blx	r5
 4184              	.LVL383:
 530:src/console.c **** 	CLR_ST(STAT_MENU);
 4185              		.loc 2 530 2 view .LVU1200
 4186 028c 2368     		ldr	r3, [r4]
 4187 028e 23F04003 		bic	r3, r3, #64
 4188 0292 2360     		str	r3, [r4]
 531:src/console.c **** 	reset_shift();
 4189              		.loc 2 531 2 view .LVU1201
 4190 0294 FFF7FEFF 		bl	reset_shift
 4191              	.LVL384:
 532:src/console.c **** 	remapped =  no_key;
 4192              		.loc 2 532 2 view .LVU1202
 4193              		.loc 2 532 11 is_stmt 0 view .LVU1203
 4194 0298 254B     		ldr	r3, .L425+84
 4195 029a 93E80300 		ldm	r3, {r0, r1}
 4196 029e 0DF1080A 		add	r10, sp, #8
ARM GAS  /tmp/cc7Wa57o.s 			page 117


 4197 02a2 8AE80300 		stm	r10, {r0, r1}
 4198 02a6 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4199              	.LVL385:
 4200              		.loc 2 532 11 view .LVU1204
 4201 02a8 8946     		mov	r9, r1
 4202              	.LVL386:
 533:src/console.c **** 	display_current_menu();
 4203              		.loc 2 533 2 is_stmt 1 view .LVU1205
 4204 02aa FFF7FEFF 		bl	display_current_menu
 4205              	.LVL387:
 4206              	.L375:
 534:src/console.c ****       }
 535:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 4207              		.loc 2 535 7 view .LVU1206
 4208              		.loc 2 535 10 is_stmt 0 view .LVU1207
 4209 02ae 312D     		cmp	r5, #49
 4210 02b0 7BD0     		beq	.L378
 536:src/console.c **** 	remapped = do_multi (remapped);
 537:src/console.c **** 	display_current_menu();
 538:src/console.c ****       }
 539:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 4211              		.loc 2 539 7 is_stmt 1 view .LVU1208
 4212              		.loc 2 539 10 is_stmt 0 view .LVU1209
 4213 02b2 322D     		cmp	r5, #50
 4214 02b4 00F09380 		beq	.L377
 4215              	.L421:
 4216              		.loc 2 539 10 view .LVU1210
 4217 02b8 0DF1080A 		add	r10, sp, #8
 4218              	.LVL388:
 4219              	.L365:
 540:src/console.c ****       process_keycode_with_shift(remapped);
 4220              		.loc 2 540 7 is_stmt 1 view .LVU1211
 4221              		.loc 2 540 7 is_stmt 0 view .LVU1212
 4222 02bc 8DF80850 		strb	r5, [sp, #8]
 4223 02c0 CDF80C90 		str	r9, [sp, #12]
 4224 02c4 9AE80300 		ldm	r10, {r0, r1}
 4225 02c8 FFF7FEFF 		bl	process_keycode_with_shift
 4226              	.LVL389:
 541:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4227              		.loc 2 541 7 is_stmt 1 view .LVU1213
 4228              		.loc 2 541 10 is_stmt 0 view .LVU1214
 4229 02cc 622D     		cmp	r5, #98
 4230 02ce 64D0     		beq	.L420
 4231              	.LVL390:
 4232              	.L366:
 4233              		.loc 2 541 59 is_stmt 1 view .LVU1215
 4234              	.LBB160:
 4235              	.LBI160:
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 4236              		.loc 2 252 6 view .LVU1216
 4237              	.LBB161:
 253:src/console.c **** }
 4238              		.loc 2 253 5 view .LVU1217
 253:src/console.c **** }
 4239              		.loc 2 253 19 is_stmt 0 view .LVU1218
 4240 02d0 214B     		ldr	r3, .L425+124
 4241 02d2 9847     		blx	r3
ARM GAS  /tmp/cc7Wa57o.s 			page 118


 4242              	.LVL391:
 253:src/console.c **** }
 4243              		.loc 2 253 17 view .LVU1219
 4244 02d4 214B     		ldr	r3, .L425+128
 4245 02d6 1860     		str	r0, [r3]
 254:src/console.c **** 
 4246              		.loc 2 254 1 view .LVU1220
 4247 02d8 C7E6     		b	.L324
 4248              	.L426:
 4249 02da 00BF     		.align	2
 4250              	.L425:
 4251 02dc 00000000 		.word	StateWhileOn
 4252 02e0 00000000 		.word	DispMsg
 4253 02e4 00200010 		.word	268443648
 4254 02e8 00000000 		.word	KeyCallback
 4255 02ec 7D030008 		.word	134218621
 4256 02f0 00000000 		.word	run_menu_item
 4257 02f4 00000000 		.word	menu_line_str
 4258 02f8 31020008 		.word	134218289
 4259 02fc 00000000 		.word	JustDisplayed
 4260 0300 19040008 		.word	134218777
 4261 0304 19020008 		.word	134218265
 4262 0308 91030008 		.word	134218641
 4263 030c E5020008 		.word	134218469
 4264 0310 59020008 		.word	134218329
 4265 0314 35020008 		.word	134218293
 4266 0318 89030008 		.word	134218633
 4267 031c B9030008 		.word	134218681
 4268 0320 00000000 		.word	Pause
 4269 0324 00000000 		.word	Running
 4270 0328 00000000 		.word	.LANCHOR1
 4271 032c 00000000 		.word	.LANCHOR3
 4272 0330 00000000 		.word	.LANCHOR10
 4273 0334 01040008 		.word	134218753
 4274 0338 81030008 		.word	134218625
 4275 033c F5030008 		.word	134218741
 4276 0340 55020008 		.word	134218325
 4277 0344 2D040008 		.word	134218797
 4278 0348 1D020008 		.word	134218269
 4279 034c 00000000 		.word	.LANCHOR19
 4280 0350 59030008 		.word	134218585
 4281 0354 00000000 		.word	.LANCHOR18
 4282 0358 B9040008 		.word	134218937
 4283 035c 00000000 		.word	.LANCHOR8
 4284 0360 F9030008 		.word	134218745
 4285              	.LVL392:
 4286              	.L339:
 254:src/console.c **** 
 4287              		.loc 2 254 1 view .LVU1221
 4288              	.LBE161:
 4289              	.LBE160:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4290              		.loc 2 510 10 is_stmt 1 view .LVU1222
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4291              		.loc 2 510 15 is_stmt 0 view .LVU1223
 4292 0364 8D4B     		ldr	r3, .L427
 4293 0366 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/cc7Wa57o.s 			page 119


 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4294              		.loc 2 510 13 view .LVU1224
 4295 0368 DB07     		lsls	r3, r3, #31
 4296 036a 7FF5B7AE 		bpl	.L340
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4297              		.loc 2 510 37 discriminator 1 view .LVU1225
 4298 036e FFF7FEFF 		bl	DM42_Ticker
 4299              	.LVL393:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4300              		.loc 2 510 37 discriminator 1 view .LVU1226
 4301 0372 8B4A     		ldr	r2, .L427+4
 4302 0374 8B4B     		ldr	r3, .L427+8
 4303 0376 02FB0030 		mla	r0, r2, r0, r3
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4304              		.loc 2 510 32 discriminator 1 view .LVU1227
 4305 037a B0F1333F 		cmp	r0, #858993459
 4306 037e BFF4ADAE 		bcs	.L340
 511:src/console.c ****       finish_LEQ();
 4307              		.loc 2 511 7 is_stmt 1 view .LVU1228
 511:src/console.c ****       finish_LEQ();
 4308              		.loc 2 511 21 is_stmt 0 view .LVU1229
 4309 0382 8420     		movs	r0, #132
 4310 0384 FFF7FEFF 		bl	is_dot
 4311              	.LVL394:
 511:src/console.c ****       finish_LEQ();
 4312              		.loc 2 511 7 view .LVU1230
 4313 0388 B0FA80F1 		clz	r1, r0
 4314 038c 4909     		lsrs	r1, r1, #5
 4315 038e 8420     		movs	r0, #132
 4316 0390 FFF7FEFF 		bl	dot
 4317              	.LVL395:
 512:src/console.c ****     }
 4318              		.loc 2 512 7 is_stmt 1 view .LVU1231
 4319 0394 FFF7FEFF 		bl	finish_LEQ
 4320              	.LVL396:
 4321 0398 A0E6     		b	.L340
 4322              	.LVL397:
 4323              	.L420:
 4324              		.loc 2 541 43 is_stmt 0 discriminator 2 view .LVU1232
 4325 039a 834B     		ldr	r3, .L427+12
 4326 039c 1B68     		ldr	r3, [r3]
 4327 039e 002B     		cmp	r3, #0
 4328 03a0 3FF463AE 		beq	.L324
 4329 03a4 94E7     		b	.L366
 4330              	.LVL398:
 4331              	.L344:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4332              		.loc 2 521 7 is_stmt 1 view .LVU1233
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4333              		.loc 2 527 7 view .LVU1234
 535:src/console.c **** 	remapped = do_multi (remapped);
 4334              		.loc 2 535 7 view .LVU1235
 4335              	.LBB162:
 4336              	.LBB148:
 4337              	.LBB145:
  68:src/console.c ****   }
 4338              		.loc 2 68 12 is_stmt 0 view .LVU1236
ARM GAS  /tmp/cc7Wa57o.s 			page 120


 4339 03a6 4FF00C09 		mov	r9, #12
 4340              	.LVL399:
 4341              	.L378:
  68:src/console.c ****   }
 4342              		.loc 2 68 12 view .LVU1237
 4343              	.LBE145:
 4344              	.LBE148:
 4345              	.LBE162:
 536:src/console.c **** 	display_current_menu();
 4346              		.loc 2 536 2 is_stmt 1 view .LVU1238
 536:src/console.c **** 	display_current_menu();
 4347              		.loc 2 536 13 is_stmt 0 view .LVU1239
 4348 03aa 3123     		movs	r3, #49
 4349 03ac CDF80C90 		str	r9, [sp, #12]
 4350 03b0 8DF80830 		strb	r3, [sp, #8]
 4351 03b4 6D46     		mov	r5, sp
 4352 03b6 0DF1080A 		add	r10, sp, #8
 4353 03ba 9AE80600 		ldm	r10, {r1, r2}
 4354 03be 2846     		mov	r0, r5
 4355 03c0 FFF7FEFF 		bl	do_multi
 4356              	.LVL400:
 4357 03c4 95E80300 		ldm	r5, {r0, r1}
 4358 03c8 8AE80300 		stm	r10, {r0, r1}
 4359 03cc 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 4360              	.LVL401:
 536:src/console.c **** 	display_current_menu();
 4361              		.loc 2 536 13 view .LVU1240
 4362 03d0 DDF80C90 		ldr	r9, [sp, #12]
 4363              	.LVL402:
 537:src/console.c ****       }
 4364              		.loc 2 537 2 is_stmt 1 view .LVU1241
 4365 03d4 FFF7FEFF 		bl	display_current_menu
 4366              	.LVL403:
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4367              		.loc 2 539 7 view .LVU1242
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4368              		.loc 2 539 10 is_stmt 0 view .LVU1243
 4369 03d8 322D     		cmp	r5, #50
 4370 03da 7FF46DAF 		bne	.L421
 4371              	.L377:
 542:src/console.c ****     }
 543:src/console.c ****   }
 544:src/console.c ****   save_ram_file(0);
 4372              		.loc 2 544 3 is_stmt 1 view .LVU1244
 4373 03de 0020     		movs	r0, #0
 545:src/console.c ****   //  free_storage();
 546:src/console.c ****   return;
 547:src/console.c **** }
 4374              		.loc 2 547 1 is_stmt 0 view .LVU1245
 4375 03e0 38B0     		add	sp, sp, #224
 4376              		.cfi_remember_state
 4377              		.cfi_def_cfa_offset 32
 4378              		@ sp needed
 4379 03e2 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 4380              		.cfi_restore 14
 4381              		.cfi_restore 10
 4382              		.cfi_restore 9
ARM GAS  /tmp/cc7Wa57o.s 			page 121


 4383              		.cfi_restore 8
 4384              		.cfi_restore 7
 4385              		.cfi_restore 6
 4386              		.cfi_restore 5
 4387              		.cfi_restore 4
 4388              		.cfi_def_cfa_offset 0
 4389              	.LVL404:
 544:src/console.c ****   //  free_storage();
 4390              		.loc 2 544 3 view .LVU1246
 4391 03e6 FFF7FEBF 		b	save_ram_file
 4392              	.LVL405:
 4393              	.L407:
 4394              		.cfi_restore_state
 4395              	.LBB163:
 4396              	.LBB149:
  72:src/console.c ****   }
 4397              		.loc 2 72 5 is_stmt 1 view .LVU1247
  72:src/console.c ****   }
 4398              		.loc 2 72 27 is_stmt 0 view .LVU1248
 4399 03ea 704B     		ldr	r3, .L427+16
 4400              	.L404:
 124:src/console.c ****     break;
 4401              		.loc 2 124 26 view .LVU1249
 4402 03ec 03EBC502 		add	r2, r3, r5, lsl #3
 4403 03f0 92E80300 		ldm	r2, {r0, r1}
 4404 03f4 0DF1080A 		add	r10, sp, #8
 4405 03f8 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4406              	.LVL406:
 124:src/console.c ****     break;
 4407              		.loc 2 124 26 view .LVU1250
 4408 03fc 8946     		mov	r9, r1
 4409              	.LVL407:
 124:src/console.c ****     break;
 4410              		.loc 2 124 26 view .LVU1251
 4411 03fe 8AE80300 		stm	r10, {r0, r1}
 4412 0402 36E7     		b	.L343
 4413              	.LVL408:
 4414              	.L406:
  64:src/console.c **** 
 4415              		.loc 2 64 16 is_stmt 1 view .LVU1252
  64:src/console.c **** 
 4416              		.loc 2 64 23 is_stmt 0 view .LVU1253
 4417 0404 6A4B     		ldr	r3, .L427+20
 4418 0406 2CE7     		b	.L405
 4419              	.LVL409:
 4420              	.L417:
  64:src/console.c **** 
 4421              		.loc 2 64 23 view .LVU1254
 4422              	.LBE149:
 4423              	.LBE163:
 4424              	.LBB164:
 4425              	.LBB157:
 125:src/menu.c    ****   }
 4426              		.loc 1 125 5 is_stmt 1 view .LVU1255
 125:src/menu.c    ****   }
 4427              		.loc 1 125 18 is_stmt 0 view .LVU1256
 4428 0408 6A49     		ldr	r1, .L427+24
ARM GAS  /tmp/cc7Wa57o.s 			page 122


 4429              	.LVL410:
 125:src/menu.c    ****   }
 4430              		.loc 1 125 18 view .LVU1257
 4431 040a 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4432 040c 1170     		strb	r1, [r2]
 4433 040e D5E6     		b	.L372
 4434              	.LVL411:
 4435              	.L359:
 125:src/menu.c    ****   }
 4436              		.loc 1 125 18 view .LVU1258
 4437              	.LBE157:
 4438              	.LBE164:
 4439              	.LBB165:
 4440              	.LBB150:
  95:src/console.c ****   }
 4441              		.loc 2 95 5 is_stmt 1 view .LVU1259
  95:src/console.c ****   }
 4442              		.loc 2 95 9 is_stmt 0 view .LVU1260
 4443 0410 FFF7FEFF 		bl	cur_shift
 4444              	.LVL412:
  95:src/console.c ****   }
 4445              		.loc 2 95 8 view .LVU1261
 4446 0414 0128     		cmp	r0, #1
 4447 0416 56D0     		beq	.L422
 4448              	.L346:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4449              		.loc 2 98 3 is_stmt 1 view .LVU1262
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4450              		.loc 2 98 8 is_stmt 0 view .LVU1263
 4451 0418 FFF7FEFF 		bl	get_alpha_state
 4452              	.LVL413:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4453              		.loc 2 98 6 view .LVU1264
 4454 041c D8B3     		cbz	r0, .L360
  99:src/console.c ****       switch (cur_shift()) { 
 4455              		.loc 2 99 5 is_stmt 1 view .LVU1265
  99:src/console.c ****       switch (cur_shift()) { 
 4456              		.loc 2 99 8 is_stmt 0 view .LVU1266
 4457 041e 1C2D     		cmp	r5, #28
 4458 0420 00F08580 		beq	.L423
 116:src/console.c ****   }
 4459              		.loc 2 116 5 is_stmt 1 view .LVU1267
 116:src/console.c ****   }
 4460              		.loc 2 116 26 is_stmt 0 view .LVU1268
 4461 0424 644B     		ldr	r3, .L427+28
 4462 0426 E1E7     		b	.L404
 4463              	.L353:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4464              		.loc 2 79 5 is_stmt 1 view .LVU1269
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4465              		.loc 2 79 9 is_stmt 0 view .LVU1270
 4466 0428 FFF7FEFF 		bl	cur_shift
 4467              	.LVL414:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4468              		.loc 2 79 8 view .LVU1271
 4469 042c 0028     		cmp	r0, #0
 4470 042e 7FF47BAE 		bne	.L354
ARM GAS  /tmp/cc7Wa57o.s 			page 123


  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4471              		.loc 2 79 33 is_stmt 1 view .LVU1272
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4472              		.loc 2 79 51 is_stmt 0 view .LVU1273
 4473 0432 DDE90801 		ldrd	r0, r1, [sp, #32]
 4474 0436 0DF1080A 		add	r10, sp, #8
 4475 043a 8AE80300 		stm	r10, {r0, r1}
 4476 043e 9DF82050 		ldrb	r5, [sp, #32]	@ zero_extendqisi2
 4477              	.LVL415:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4478              		.loc 2 79 51 view .LVU1274
 4479 0442 8946     		mov	r9, r1
 4480              	.LVL416:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4481              		.loc 2 79 51 view .LVU1275
 4482 0444 15E7     		b	.L343
 4483              	.LVL417:
 4484              	.L415:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4485              		.loc 2 91 33 is_stmt 1 view .LVU1276
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4486              		.loc 2 91 51 is_stmt 0 view .LVU1277
 4487 0446 DDE92801 		ldrd	r0, r1, [sp, #160]
 4488 044a 0DF1080A 		add	r10, sp, #8
 4489 044e 8AE80300 		stm	r10, {r0, r1}
 4490 0452 9DF8A050 		ldrb	r5, [sp, #160]	@ zero_extendqisi2
 4491              	.LVL418:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4492              		.loc 2 91 51 view .LVU1278
 4493 0456 8946     		mov	r9, r1
 4494              	.LVL419:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4495              		.loc 2 91 51 view .LVU1279
 4496 0458 0BE7     		b	.L343
 4497              	.LVL420:
 4498              	.L413:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4499              		.loc 2 88 33 is_stmt 1 view .LVU1280
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4500              		.loc 2 88 51 is_stmt 0 view .LVU1281
 4501 045a DDE92001 		ldrd	r0, r1, [sp, #128]
 4502 045e 0DF1080A 		add	r10, sp, #8
 4503 0462 8AE80300 		stm	r10, {r0, r1}
 4504 0466 9DF88050 		ldrb	r5, [sp, #128]	@ zero_extendqisi2
 4505              	.LVL421:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4506              		.loc 2 88 51 view .LVU1282
 4507 046a 8946     		mov	r9, r1
 4508              	.LVL422:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4509              		.loc 2 88 51 view .LVU1283
 4510 046c 01E7     		b	.L343
 4511              	.LVL423:
 4512              	.L411:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4513              		.loc 2 85 33 is_stmt 1 view .LVU1284
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
ARM GAS  /tmp/cc7Wa57o.s 			page 124


 4514              		.loc 2 85 51 is_stmt 0 view .LVU1285
 4515 046e DDE91801 		ldrd	r0, r1, [sp, #96]
 4516 0472 0DF1080A 		add	r10, sp, #8
 4517 0476 8AE80300 		stm	r10, {r0, r1}
 4518 047a 9DF86050 		ldrb	r5, [sp, #96]	@ zero_extendqisi2
 4519              	.LVL424:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4520              		.loc 2 85 51 view .LVU1286
 4521 047e 8946     		mov	r9, r1
 4522              	.LVL425:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4523              		.loc 2 85 51 view .LVU1287
 4524 0480 F7E6     		b	.L343
 4525              	.LVL426:
 4526              	.L409:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4527              		.loc 2 82 33 is_stmt 1 view .LVU1288
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4528              		.loc 2 82 51 is_stmt 0 view .LVU1289
 4529 0482 DDE91001 		ldrd	r0, r1, [sp, #64]
 4530 0486 0DF1080A 		add	r10, sp, #8
 4531 048a 8AE80300 		stm	r10, {r0, r1}
 4532 048e 9DF84050 		ldrb	r5, [sp, #64]	@ zero_extendqisi2
 4533              	.LVL427:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4534              		.loc 2 82 51 view .LVU1290
 4535 0492 8946     		mov	r9, r1
 4536              	.LVL428:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4537              		.loc 2 82 51 view .LVU1291
 4538 0494 EDE6     		b	.L343
 4539              	.LVL429:
 4540              	.L360:
 119:src/console.c ****   case SHIFT_N:    
 4541              		.loc 2 119 3 is_stmt 1 view .LVU1292
 119:src/console.c ****   case SHIFT_N:    
 4542              		.loc 2 119 11 is_stmt 0 view .LVU1293
 4543 0496 FFF7FEFF 		bl	cur_shift
 4544              	.LVL430:
 119:src/console.c ****   case SHIFT_N:    
 4545              		.loc 2 119 3 view .LVU1294
 4546 049a 0128     		cmp	r0, #1
 4547 049c 45D0     		beq	.L367
 4548 049e 0228     		cmp	r0, #2
 4549 04a0 02D0     		beq	.L368
 4550 04a2 70B1     		cbz	r0, .L369
  58:src/console.c **** 
 4551              		.loc 2 58 41 view .LVU1295
 4552 04a4 EDB2     		uxtb	r5, r5
 4553              	.LVL431:
  58:src/console.c **** 
 4554              		.loc 2 58 41 view .LVU1296
 4555 04a6 E4E6     		b	.L343
 4556              	.LVL432:
 4557              	.L368:
 125:src/console.c ****   case SHIFT_G:
 4558              		.loc 2 125 5 is_stmt 1 view .LVU1297
ARM GAS  /tmp/cc7Wa57o.s 			page 125


 127:src/console.c ****     break;
 4559              		.loc 2 127 5 view .LVU1298
 127:src/console.c ****     break;
 4560              		.loc 2 127 26 is_stmt 0 view .LVU1299
 4561 04a8 444B     		ldr	r3, .L427+32
 4562 04aa 03EBC502 		add	r2, r3, r5, lsl #3
 4563 04ae 92E80300 		ldm	r2, {r0, r1}
 4564 04b2 0DF1080A 		add	r10, sp, #8
 4565 04b6 8AE80300 		stm	r10, {r0, r1}
 4566 04ba 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4567              	.LVL433:
 127:src/console.c ****     break;
 4568              		.loc 2 127 26 view .LVU1300
 4569 04be 8946     		mov	r9, r1
 4570              	.LVL434:
 127:src/console.c ****     break;
 4571              		.loc 2 127 26 view .LVU1301
 4572 04c0 D7E6     		b	.L343
 4573              	.LVL435:
 4574              	.L369:
 121:src/console.c ****     break;
 4575              		.loc 2 121 5 is_stmt 1 view .LVU1302
 121:src/console.c ****     break;
 4576              		.loc 2 121 24 is_stmt 0 view .LVU1303
 4577 04c2 3F4B     		ldr	r3, .L427+36
 4578 04c4 92E7     		b	.L404
 4579              	.L422:
  95:src/console.c ****   }
 4580              		.loc 2 95 33 is_stmt 1 view .LVU1304
  95:src/console.c ****   }
 4581              		.loc 2 95 51 is_stmt 0 view .LVU1305
 4582 04c6 DDE93201 		ldrd	r0, r1, [sp, #200]
 4583 04ca 0DF1080A 		add	r10, sp, #8
 4584 04ce 8AE80300 		stm	r10, {r0, r1}
 4585 04d2 9DF8C850 		ldrb	r5, [sp, #200]	@ zero_extendqisi2
 4586              	.LVL436:
  95:src/console.c ****   }
 4587              		.loc 2 95 51 view .LVU1306
 4588 04d6 8946     		mov	r9, r1
 4589              	.LVL437:
  95:src/console.c ****   }
 4590              		.loc 2 95 51 view .LVU1307
 4591 04d8 CBE6     		b	.L343
 4592              	.LVL438:
 4593              	.L414:
  89:src/console.c ****   case KEY_F5:
 4594              		.loc 2 89 33 is_stmt 1 view .LVU1308
  89:src/console.c ****   case KEY_F5:
 4595              		.loc 2 89 51 is_stmt 0 view .LVU1309
 4596 04da DDE92201 		ldrd	r0, r1, [sp, #136]
 4597 04de 0DF1080A 		add	r10, sp, #8
 4598 04e2 8AE80300 		stm	r10, {r0, r1}
 4599 04e6 9DF88850 		ldrb	r5, [sp, #136]	@ zero_extendqisi2
 4600              	.LVL439:
  89:src/console.c ****   case KEY_F5:
 4601              		.loc 2 89 51 view .LVU1310
 4602 04ea 8946     		mov	r9, r1
ARM GAS  /tmp/cc7Wa57o.s 			page 126


 4603              	.LVL440:
  89:src/console.c ****   case KEY_F5:
 4604              		.loc 2 89 51 view .LVU1311
 4605 04ec C1E6     		b	.L343
 4606              	.LVL441:
 4607              	.L416:
  92:src/console.c ****   case KEY_F6:
 4608              		.loc 2 92 33 is_stmt 1 view .LVU1312
  92:src/console.c ****   case KEY_F6:
 4609              		.loc 2 92 51 is_stmt 0 view .LVU1313
 4610 04ee DDE92A01 		ldrd	r0, r1, [sp, #168]
 4611 04f2 0DF1080A 		add	r10, sp, #8
 4612 04f6 8AE80300 		stm	r10, {r0, r1}
 4613 04fa 9DF8A850 		ldrb	r5, [sp, #168]	@ zero_extendqisi2
 4614              	.LVL442:
  92:src/console.c ****   case KEY_F6:
 4615              		.loc 2 92 51 view .LVU1314
 4616 04fe 8946     		mov	r9, r1
 4617              	.LVL443:
  92:src/console.c ****   case KEY_F6:
 4618              		.loc 2 92 51 view .LVU1315
 4619 0500 B7E6     		b	.L343
 4620              	.LVL444:
 4621              	.L412:
  86:src/console.c ****   case KEY_F4:
 4622              		.loc 2 86 33 is_stmt 1 view .LVU1316
  86:src/console.c ****   case KEY_F4:
 4623              		.loc 2 86 51 is_stmt 0 view .LVU1317
 4624 0502 DDE91A01 		ldrd	r0, r1, [sp, #104]
 4625 0506 0DF1080A 		add	r10, sp, #8
 4626 050a 8AE80300 		stm	r10, {r0, r1}
 4627 050e 9DF86850 		ldrb	r5, [sp, #104]	@ zero_extendqisi2
 4628              	.LVL445:
  86:src/console.c ****   case KEY_F4:
 4629              		.loc 2 86 51 view .LVU1318
 4630 0512 8946     		mov	r9, r1
 4631              	.LVL446:
  86:src/console.c ****   case KEY_F4:
 4632              		.loc 2 86 51 view .LVU1319
 4633 0514 ADE6     		b	.L343
 4634              	.LVL447:
 4635              	.L410:
  83:src/console.c ****   case KEY_F3:
 4636              		.loc 2 83 33 is_stmt 1 view .LVU1320
  83:src/console.c ****   case KEY_F3:
 4637              		.loc 2 83 51 is_stmt 0 view .LVU1321
 4638 0516 DDE91201 		ldrd	r0, r1, [sp, #72]
 4639 051a 0DF1080A 		add	r10, sp, #8
 4640 051e 8AE80300 		stm	r10, {r0, r1}
 4641 0522 9DF84850 		ldrb	r5, [sp, #72]	@ zero_extendqisi2
 4642              	.LVL448:
  83:src/console.c ****   case KEY_F3:
 4643              		.loc 2 83 51 view .LVU1322
 4644 0526 8946     		mov	r9, r1
 4645              	.LVL449:
  83:src/console.c ****   case KEY_F3:
 4646              		.loc 2 83 51 view .LVU1323
ARM GAS  /tmp/cc7Wa57o.s 			page 127


 4647 0528 A3E6     		b	.L343
 4648              	.LVL450:
 4649              	.L367:
 122:src/console.c ****   case SHIFT_F:
 4650              		.loc 2 122 5 is_stmt 1 view .LVU1324
 124:src/console.c ****     break;
 4651              		.loc 2 124 5 view .LVU1325
 124:src/console.c ****     break;
 4652              		.loc 2 124 26 is_stmt 0 view .LVU1326
 4653 052a 264B     		ldr	r3, .L427+40
 4654 052c 5EE7     		b	.L404
 4655              	.L423:
 100:src/console.c ****       case SHIFT_N:
 4656              		.loc 2 100 7 is_stmt 1 view .LVU1327
 100:src/console.c ****       case SHIFT_N:
 4657              		.loc 2 100 15 is_stmt 0 view .LVU1328
 4658 052e FFF7FEFF 		bl	cur_shift
 4659              	.LVL451:
 100:src/console.c ****       case SHIFT_N:
 4660              		.loc 2 100 7 view .LVU1329
 4661 0532 0328     		cmp	r0, #3
 4662 0534 28D8     		bhi	.L362
 4663 0536 0128     		cmp	r0, #1
 4664 0538 11D8     		bhi	.L363
 4665 053a E0B1     		cbz	r0, .L424
 103:src/console.c ****       case SHIFT_F:
 4666              		.loc 2 103 2 is_stmt 1 view .LVU1330
 105:src/console.c **** 	break;
 4667              		.loc 2 105 2 view .LVU1331
 105:src/console.c **** 	break;
 4668              		.loc 2 105 23 is_stmt 0 view .LVU1332
 4669 053c 224B     		ldr	r3, .L427+44
 4670 053e 93E80300 		ldm	r3, {r0, r1}
 4671 0542 0DF1080A 		add	r10, sp, #8
 4672 0546 8AE80300 		stm	r10, {r0, r1}
 4673              	.LVL452:
 105:src/console.c **** 	break;
 4674              		.loc 2 105 23 view .LVU1333
 4675              	.LBE150:
 4676              	.LBE165:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4677              		.loc 2 521 7 is_stmt 1 view .LVU1334
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4678              		.loc 2 527 7 view .LVU1335
 535:src/console.c **** 	remapped = do_multi (remapped);
 4679              		.loc 2 535 7 view .LVU1336
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4680              		.loc 2 539 7 view .LVU1337
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4681              		.loc 2 540 7 view .LVU1338
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4682              		.loc 2 540 7 is_stmt 0 view .LVU1339
 4683 054a 2A22     		movs	r2, #42
 4684 054c 0023     		movs	r3, #0
 4685 054e 8DF80820 		strb	r2, [sp, #8]
 4686 0552 0393     		str	r3, [sp, #12]
 4687 0554 9AE80300 		ldm	r10, {r0, r1}
ARM GAS  /tmp/cc7Wa57o.s 			page 128


 4688 0558 FFF7FEFF 		bl	process_keycode_with_shift
 4689              	.LVL453:
 541:src/console.c ****     }
 4690              		.loc 2 541 7 is_stmt 1 view .LVU1340
 4691 055c B8E6     		b	.L366
 4692              	.LVL454:
 4693              	.L363:
 4694              	.LBB166:
 4695              	.LBB151:
 106:src/console.c ****       case SHIFT_G:
 4696              		.loc 2 106 2 view .LVU1341
 108:src/console.c **** 	break;
 4697              		.loc 2 108 2 view .LVU1342
 108:src/console.c **** 	break;
 4698              		.loc 2 108 9 is_stmt 0 view .LVU1343
 4699 055e 1B4B     		ldr	r3, .L427+48
 4700 0560 7FE6     		b	.L405
 4701              	.L408:
  80:src/console.c ****   case KEY_F2:
 4702              		.loc 2 80 33 is_stmt 1 view .LVU1344
  80:src/console.c ****   case KEY_F2:
 4703              		.loc 2 80 51 is_stmt 0 view .LVU1345
 4704 0562 DDE90A01 		ldrd	r0, r1, [sp, #40]
 4705 0566 0DF1080A 		add	r10, sp, #8
 4706 056a 8AE80300 		stm	r10, {r0, r1}
 4707 056e 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 4708              	.LVL455:
  80:src/console.c ****   case KEY_F2:
 4709              		.loc 2 80 51 view .LVU1346
 4710 0572 8946     		mov	r9, r1
 4711              	.LVL456:
  80:src/console.c ****   case KEY_F2:
 4712              		.loc 2 80 51 view .LVU1347
 4713 0574 7DE6     		b	.L343
 4714              	.LVL457:
 4715              	.L424:
 102:src/console.c **** 	break;
 4716              		.loc 2 102 2 is_stmt 1 view .LVU1348
 102:src/console.c **** 	break;
 4717              		.loc 2 102 21 is_stmt 0 view .LVU1349
 4718 0576 164B     		ldr	r3, .L427+52
 4719 0578 93E80300 		ldm	r3, {r0, r1}
 4720 057c 0DF1080A 		add	r10, sp, #8
 4721 0580 8AE80300 		stm	r10, {r0, r1}
 4722              	.LVL458:
 102:src/console.c **** 	break;
 4723              		.loc 2 102 21 view .LVU1350
 4724              	.LBE151:
 4725              	.LBE166:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4726              		.loc 2 521 7 is_stmt 1 view .LVU1351
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4727              		.loc 2 527 7 view .LVU1352
 535:src/console.c **** 	remapped = do_multi (remapped);
 4728              		.loc 2 535 7 view .LVU1353
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4729              		.loc 2 539 7 view .LVU1354
ARM GAS  /tmp/cc7Wa57o.s 			page 129


 4730              	.LBB167:
 4731              	.LBB152:
 102:src/console.c **** 	break;
 4732              		.loc 2 102 21 is_stmt 0 view .LVU1355
 4733 0584 2925     		movs	r5, #41
 4734              	.LVL459:
 102:src/console.c **** 	break;
 4735              		.loc 2 102 21 view .LVU1356
 4736 0586 99E6     		b	.L365
 4737              	.LVL460:
 4738              	.L362:
 102:src/console.c **** 	break;
 4739              		.loc 2 102 21 view .LVU1357
 4740              	.LBE152:
 4741              	.LBE167:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4742              		.loc 2 521 7 is_stmt 1 view .LVU1358
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4743              		.loc 2 527 7 view .LVU1359
 535:src/console.c **** 	remapped = do_multi (remapped);
 4744              		.loc 2 535 7 view .LVU1360
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4745              		.loc 2 539 7 view .LVU1361
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4746              		.loc 2 540 7 view .LVU1362
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4747              		.loc 2 540 7 is_stmt 0 view .LVU1363
 4748 0588 0023     		movs	r3, #0
 4749 058a 8DF80850 		strb	r5, [sp, #8]
 4750 058e 0298     		ldr	r0, [sp, #8]
 4751 0590 0393     		str	r3, [sp, #12]
 4752 0592 1946     		mov	r1, r3
 4753 0594 FFF7FEFF 		bl	process_keycode_with_shift
 4754              	.LVL461:
 541:src/console.c ****     }
 4755              		.loc 2 541 7 is_stmt 1 view .LVU1364
 4756 0598 9AE6     		b	.L366
 4757              	.L428:
 4758 059a 00BF     		.align	2
 4759              	.L427:
 4760 059c 00000000 		.word	StopWatchStatus
 4761 05a0 CDCCCCCC 		.word	-858993459
 4762 05a4 99999919 		.word	429496729
 4763 05a8 00000000 		.word	JustStopped
 4764 05ac 00000000 		.word	.LANCHOR12
 4765 05b0 00000000 		.word	.LANCHOR11
 4766 05b4 00000000 		.word	.LANCHOR2
 4767 05b8 00000000 		.word	.LANCHOR16
 4768 05bc 00000000 		.word	.LANCHOR17
 4769 05c0 00000000 		.word	.LANCHOR13
 4770 05c4 00000000 		.word	.LANCHOR14
 4771 05c8 E0000000 		.word	.LANCHOR14+224
 4772 05cc 00000000 		.word	.LANCHOR15
 4773 05d0 E0000000 		.word	.LANCHOR13+224
 4774              		.cfi_endproc
 4775              	.LFE34:
 4777              		.global	n_p
ARM GAS  /tmp/cc7Wa57o.s 			page 130


 4778              		.comm	print_string,22,4
 4779              		.global	spaces
 4780              		.global	release
 4781              		.global	h_shift
 4782              		.global	g_shift
 4783              		.global	f_shift
 4784              		.global	heartbeat
 4785              		.global	no_key
 4786              		.global	MID_MENU
 4787              		.section	.rodata.str1.4,"aMS",%progbits,1
 4788              		.align	2
 4789              	.LC18:
 4790 0000 53797374 		.ascii	"System!\000"
 4790      656D2100 
 4791              		.global	mid_menu
 4792              		.global	default_menu
 4793              		.global	last_menu
 4794              		.global	current_menu
 4795              		.global	cmplx_key_string
 4796              		.align	2
 4797              	.LC19:
 4798 0008 43505800 		.ascii	"CPX\000"
 4799              		.global	arrow_key_string
 4800              		.align	2
 4801              	.LC20:
 4802 000c 2D2D0D00 		.ascii	"--\015\000"
 4803              		.global	UserMenu
 4804              		.section	.rodata
 4805              		.align	2
 4806              		.set	.LANCHOR5,. + 0
 4807              	.LC0:
 4808 0000 2C       		.byte	44
 4809 0001 000000   		.space	3
 4810 0004 FFFFFFFF 		.word	-1
 4811              	.LC1:
 4812 0008 2D       		.byte	45
 4813 0009 000000   		.space	3
 4814 000c FFFFFFFF 		.word	-1
 4815              	.LC14:
 4816 0010 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4816      2A2B0708 
 4816      091C0B0C 
 4816      0D0E0F
 4817 001f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4817      13141516 
 4817      00121819 
 4817      1A
 4818 002c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4818      1E1F2000 
 4818      21222324 
 4818      25
 4819              		.section	.bss.current_menu,"aw",%nobits
 4820              		.set	.LANCHOR1,. + 0
 4823              	current_menu:
 4824 0000 00       		.space	1
 4825              		.section	.bss.default_menu,"aw",%nobits
 4826              		.set	.LANCHOR2,. + 0
ARM GAS  /tmp/cc7Wa57o.s 			page 131


 4829              	default_menu:
 4830 0000 00       		.space	1
 4831              		.section	.bss.last_menu,"aw",%nobits
 4832              		.set	.LANCHOR3,. + 0
 4835              	last_menu:
 4836 0000 00       		.space	1
 4837              		.section	.bss.mdots,"aw",%nobits
 4838              		.align	2
 4839              		.set	.LANCHOR0,. + 0
 4842              	mdots:
 4843 0000 00000000 		.space	400
 4843      00000000 
 4843      00000000 
 4843      00000000 
 4843      00000000 
 4844              		.section	.bss.n_p,"aw",%nobits
 4845              		.align	2
 4848              	n_p:
 4849 0000 00000000 		.space	4
 4850              		.section	.bss.start_ticks,"aw",%nobits
 4851              		.align	2
 4852              		.set	.LANCHOR8,. + 0
 4855              	start_ticks:
 4856 0000 00000000 		.space	4
 4857              		.section	.data.UserMenu,"aw"
 4858              		.align	2
 4859              		.set	.LANCHOR4,. + 0
 4862              	UserMenu:
 4863 0000 55736572 		.ascii	"User Menu\000"
 4863      204D656E 
 4863      7500
 4864 000a 00000000 		.space	5
 4864      00
 4865 000f 00       		.space	1
 4866 0010 2E       		.byte	46
 4867 0011 000000   		.space	3
 4868 0014 FFFFFFFF 		.word	-1
 4869 0018 2E       		.byte	46
 4870 0019 000000   		.space	3
 4871 001c FFFFFFFF 		.word	-1
 4872 0020 00       		.ascii	"\000"
 4873 0021 00000000 		.space	7
 4873      000000
 4874 0028 00       		.ascii	"\000"
 4875 0029 00000000 		.space	7
 4875      000000
 4876 0030 2E       		.byte	46
 4877 0031 000000   		.space	3
 4878 0034 FFFFFFFF 		.word	-1
 4879 0038 2E       		.byte	46
 4880 0039 000000   		.space	3
 4881 003c FFFFFFFF 		.word	-1
 4882 0040 00       		.ascii	"\000"
 4883 0041 00000000 		.space	7
 4883      000000
 4884 0048 00       		.ascii	"\000"
 4885 0049 00000000 		.space	7
ARM GAS  /tmp/cc7Wa57o.s 			page 132


 4885      000000
 4886 0050 2E       		.byte	46
 4887 0051 000000   		.space	3
 4888 0054 FFFFFFFF 		.word	-1
 4889 0058 2E       		.byte	46
 4890 0059 000000   		.space	3
 4891 005c FFFFFFFF 		.word	-1
 4892 0060 00       		.ascii	"\000"
 4893 0061 00000000 		.space	7
 4893      000000
 4894 0068 00       		.ascii	"\000"
 4895 0069 00000000 		.space	7
 4895      000000
 4896 0070 2E       		.byte	46
 4897 0071 000000   		.space	3
 4898 0074 FFFFFFFF 		.word	-1
 4899 0078 2E       		.byte	46
 4900 0079 000000   		.space	3
 4901 007c FFFFFFFF 		.word	-1
 4902 0080 00       		.ascii	"\000"
 4903 0081 00000000 		.space	7
 4903      000000
 4904 0088 00       		.ascii	"\000"
 4905 0089 00000000 		.space	7
 4905      000000
 4906 0090 2C       		.byte	44
 4907 0091 000000   		.space	3
 4908 0094 FFFFFFFF 		.word	-1
 4909 0098 2E       		.byte	46
 4910 0099 000000   		.space	3
 4911 009c FFFFFFFF 		.word	-1
 4912 00a0 2D2D0D00 		.ascii	"--\015\000"
 4913 00a4 00000000 		.space	4
 4914 00a8 00       		.ascii	"\000"
 4915 00a9 00000000 		.space	7
 4915      000000
 4916 00b0 2D       		.byte	45
 4917 00b1 000000   		.space	3
 4918 00b4 FFFFFFFF 		.word	-1
 4919 00b8 31       		.byte	49
 4920 00b9 000000   		.space	3
 4921 00bc 0B000000 		.word	11
 4922 00c0 43505800 		.ascii	"CPX\000"
 4923 00c4 00000000 		.space	4
 4924 00c8 00       		.ascii	"\000"
 4925 00c9 00000000 		.space	7
 4925      000000
 4926              		.section	.data.arrow_key_string,"aw"
 4927              		.align	2
 4928              		.set	.LANCHOR6,. + 0
 4931              	arrow_key_string:
 4932 0000 0C000000 		.word	.LC20
 4933              		.section	.data.cmplx_key_string,"aw"
 4934              		.align	2
 4935              		.set	.LANCHOR7,. + 0
 4938              	cmplx_key_string:
 4939 0000 08000000 		.word	.LC19
ARM GAS  /tmp/cc7Wa57o.s 			page 133


 4940              		.section	.data.f_shift,"aw"
 4941              		.align	2
 4944              	f_shift:
 4945 0000 29       		.byte	41
 4946 0001 000000   		.space	3
 4947 0004 FFFFFFFF 		.word	-1
 4948              		.section	.data.g_shift,"aw"
 4949              		.align	2
 4952              	g_shift:
 4953 0000 2A       		.byte	42
 4954 0001 000000   		.space	3
 4955 0004 FFFFFFFF 		.word	-1
 4956              		.section	.data.h_shift,"aw"
 4957              		.align	2
 4958              		.set	.LANCHOR15,. + 0
 4961              	h_shift:
 4962 0000 2B       		.byte	43
 4963 0001 000000   		.space	3
 4964 0004 FFFFFFFF 		.word	-1
 4965              		.section	.data.heartbeat,"aw"
 4966              		.align	2
 4967              		.set	.LANCHOR19,. + 0
 4970              	heartbeat:
 4971 0000 62       		.byte	98
 4972 0001 000000   		.space	3
 4973 0004 FFFFFFFF 		.word	-1
 4974              		.section	.data.no_key,"aw"
 4975              		.align	2
 4976              		.set	.LANCHOR10,. + 0
 4979              	no_key:
 4980 0000 2E       		.byte	46
 4981 0001 000000   		.space	3
 4982 0004 00000000 		.word	0
 4983              		.section	.data.release,"aw"
 4984              		.align	2
 4985              		.set	.LANCHOR11,. + 0
 4988              	release:
 4989 0000 63       		.byte	99
 4990 0001 000000   		.space	3
 4991 0004 FFFFFFFF 		.word	-1
 4992              		.section	.data.spaces,"aw"
 4993              		.align	2
 4994              		.set	.LANCHOR9,. + 0
 4997              	spaces:
 4998 0000 20202020 		.ascii	"                     \000"
 4998      20202020 
 4998      20202020 
 4998      20202020 
 4998      20202020 
 4999              		.section	.rodata.MID_MENU,"a"
 5000              		.align	2
 5001              		.set	.LANCHOR18,. + 0
 5004              	MID_MENU:
 5005 0000 00000000 		.word	.LC18
 5006 0004 00000000 		.word	mid_menu
 5007 0008 00000000 		.word	0
 5008 000c 00000000 		.word	0
ARM GAS  /tmp/cc7Wa57o.s 			page 134


 5009              		.section	.rodata.Menus,"a"
 5010              		.align	2
 5013              	Menus:
 5014 0000 4D5F426C 		.ascii	"M_Blank\000"
 5014      616E6B00 
 5015 0008 00000000 		.space	7
 5015      000000
 5016 000f 00       		.space	1
 5017 0010 2E       		.byte	46
 5018 0011 000000   		.space	3
 5019 0014 FFFFFFFF 		.word	-1
 5020 0018 2E       		.byte	46
 5021 0019 000000   		.space	3
 5022 001c FFFFFFFF 		.word	-1
 5023 0020 00       		.ascii	"\000"
 5024 0021 00000000 		.space	7
 5024      000000
 5025 0028 00       		.ascii	"\000"
 5026 0029 00000000 		.space	7
 5026      000000
 5027 0030 2E       		.byte	46
 5028 0031 000000   		.space	3
 5029 0034 FFFFFFFF 		.word	-1
 5030 0038 2E       		.byte	46
 5031 0039 000000   		.space	3
 5032 003c FFFFFFFF 		.word	-1
 5033 0040 00       		.ascii	"\000"
 5034 0041 00000000 		.space	7
 5034      000000
 5035 0048 00       		.ascii	"\000"
 5036 0049 00000000 		.space	7
 5036      000000
 5037 0050 2E       		.byte	46
 5038 0051 000000   		.space	3
 5039 0054 FFFFFFFF 		.word	-1
 5040 0058 2E       		.byte	46
 5041 0059 000000   		.space	3
 5042 005c FFFFFFFF 		.word	-1
 5043 0060 00       		.ascii	"\000"
 5044 0061 00000000 		.space	7
 5044      000000
 5045 0068 00       		.ascii	"\000"
 5046 0069 00000000 		.space	7
 5046      000000
 5047 0070 2E       		.byte	46
 5048 0071 000000   		.space	3
 5049 0074 FFFFFFFF 		.word	-1
 5050 0078 2E       		.byte	46
 5051 0079 000000   		.space	3
 5052 007c FFFFFFFF 		.word	-1
 5053 0080 00       		.ascii	"\000"
 5054 0081 00000000 		.space	7
 5054      000000
 5055 0088 00       		.ascii	"\000"
 5056 0089 00000000 		.space	7
 5056      000000
 5057 0090 2C       		.byte	44
ARM GAS  /tmp/cc7Wa57o.s 			page 135


 5058 0091 000000   		.space	3
 5059 0094 FFFFFFFF 		.word	-1
 5060 0098 2E       		.byte	46
 5061 0099 000000   		.space	3
 5062 009c FFFFFFFF 		.word	-1
 5063 00a0 2D2D0D00 		.ascii	"--\015\000"
 5064 00a4 00000000 		.space	4
 5065 00a8 00       		.ascii	"\000"
 5066 00a9 00000000 		.space	7
 5066      000000
 5067 00b0 2D       		.byte	45
 5068 00b1 000000   		.space	3
 5069 00b4 FFFFFFFF 		.word	-1
 5070 00b8 31       		.byte	49
 5071 00b9 000000   		.space	3
 5072 00bc 0B000000 		.word	11
 5073 00c0 43505800 		.ascii	"CPX\000"
 5074 00c4 00000000 		.space	4
 5075 00c8 00       		.ascii	"\000"
 5076 00c9 00000000 		.space	7
 5076      000000
 5077 00d0 4D5F436C 		.ascii	"M_Clear\000"
 5077      65617200 
 5078 00d8 00000000 		.space	7
 5078      000000
 5079 00df 00       		.space	1
 5080 00e0 10       		.byte	16
 5081 00e1 000000   		.space	3
 5082 00e4 01000000 		.word	1
 5083 00e8 34       		.byte	52
 5084 00e9 000000   		.space	3
 5085 00ec 44010000 		.word	324
 5086 00f0 434C5072 		.ascii	"CLProg\000"
 5086      6F6700
 5087 00f7 00       		.space	1
 5088 00f8 434C5041 		.ascii	"CLPAll\000"
 5088      6C6C00
 5089 00ff 00       		.space	1
 5090 0100 10       		.byte	16
 5091 0101 000000   		.space	3
 5092 0104 02000000 		.word	2
 5093 0108 34       		.byte	52
 5094 0109 000000   		.space	3
 5095 010c 3E010000 		.word	318
 5096 0110 434C9100 		.ascii	"CL\221\000"
 5097 0114 00000000 		.space	4
 5098 0118 434C5265 		.ascii	"CLReg\000"
 5098      6700
 5099 011e 0000     		.space	2
 5100 0120 10       		.byte	16
 5101 0121 000000   		.space	3
 5102 0124 03000000 		.word	3
 5103 0128 34       		.byte	52
 5104 0129 000000   		.space	3
 5105 012c 74010000 		.word	372
 5106 0130 434C7800 		.ascii	"CLx\000"
 5107 0134 00000000 		.space	4
ARM GAS  /tmp/cc7Wa57o.s 			page 136


 5108 0138 434C06A0 		.ascii	"CL\006\240\000"
 5108      00
 5109 013d 000000   		.space	3
 5110 0140 34       		.byte	52
 5111 0141 000000   		.space	3
 5112 0144 40010000 		.word	320
 5113 0148 34       		.byte	52
 5114 0149 000000   		.space	3
 5115 014c 41010000 		.word	321
 5116 0150 434C5374 		.ascii	"CLStk\000"
 5116      6B00
 5117 0156 0000     		.space	2
 5118 0158 434C416C 		.ascii	"CLAll\000"
 5118      6C00
 5119 015e 0000     		.space	2
 5120 0160 2C       		.byte	44
 5121 0161 000000   		.space	3
 5122 0164 FFFFFFFF 		.word	-1
 5123 0168 2E       		.byte	46
 5124 0169 000000   		.space	3
 5125 016c FFFFFFFF 		.word	-1
 5126 0170 2D2D0D00 		.ascii	"--\015\000"
 5127 0174 00000000 		.space	4
 5128 0178 00       		.ascii	"\000"
 5129 0179 00000000 		.space	7
 5129      000000
 5130 0180 2D       		.byte	45
 5131 0181 000000   		.space	3
 5132 0184 FFFFFFFF 		.word	-1
 5133 0188 2E       		.byte	46
 5134 0189 000000   		.space	3
 5135 018c FFFFFFFF 		.word	-1
 5136 0190 43505800 		.ascii	"CPX\000"
 5137 0194 00000000 		.space	4
 5138 0198 00       		.ascii	"\000"
 5139 0199 00000000 		.space	7
 5139      000000
 5140 01a0 4D5F4469 		.ascii	"M_Disp\000"
 5140      737000
 5141 01a7 00000000 		.space	8
 5141      00000000 
 5142 01af 00       		.space	1
 5143 01b0 00       		.byte	0
 5144 01b1 000000   		.space	3
 5145 01b4 03000000 		.word	3
 5146 01b8 05       		.byte	5
 5147 01b9 000000   		.space	3
 5148 01bc 01000000 		.word	1
 5149 01c0 414C4C00 		.ascii	"ALL\000"
 5150 01c4 00000000 		.space	4
 5151 01c8 6120622F 		.ascii	"a b/c\000"
 5151      6300
 5152 01ce 0000     		.space	2
 5153 01d0 01       		.byte	1
 5154 01d1 000000   		.space	3
 5155 01d4 03000000 		.word	3
 5156 01d8 05       		.byte	5
ARM GAS  /tmp/cc7Wa57o.s 			page 137


 5157 01d9 000000   		.space	3
 5158 01dc 02000000 		.word	2
 5159 01e0 46495800 		.ascii	"FIX\000"
 5160 01e4 00000000 		.space	4
 5161 01e8 642F6300 		.ascii	"d/c\000"
 5162 01ec 00000000 		.space	4
 5163 01f0 02       		.byte	2
 5164 01f1 000000   		.space	3
 5165 01f4 03000000 		.word	3
 5166 01f8 06       		.byte	6
 5167 01f9 000000   		.space	3
 5168 01fc 01000000 		.word	1
 5169 0200 53434900 		.ascii	"SCI\000"
 5170 0204 00000000 		.space	4
 5171 0208 482E4D53 		.ascii	"H.MS\000"
 5171      00
 5172 020d 000000   		.space	3
 5173 0210 03       		.byte	3
 5174 0211 000000   		.space	3
 5175 0214 03000000 		.word	3
 5176 0218 07       		.byte	7
 5177 0219 000000   		.space	3
 5178 021c 01000000 		.word	1
 5179 0220 454E4700 		.ascii	"ENG\000"
 5180 0224 00000000 		.space	4
 5181 0228 482E6400 		.ascii	"H.d\000"
 5182 022c 00000000 		.space	4
 5183 0230 2C       		.byte	44
 5184 0231 000000   		.space	3
 5185 0234 FFFFFFFF 		.word	-1
 5186 0238 26       		.byte	38
 5187 0239 000000   		.space	3
 5188 023c 03000000 		.word	3
 5189 0240 2D2D0D00 		.ascii	"--\015\000"
 5190 0244 00000000 		.space	4
 5191 0248 2E2F2C00 		.ascii	"./,\000"
 5192 024c 00000000 		.space	4
 5193 0250 2D       		.byte	45
 5194 0251 000000   		.space	3
 5195 0254 FFFFFFFF 		.word	-1
 5196 0258 2E       		.byte	46
 5197 0259 000000   		.space	3
 5198 025c FFFFFFFF 		.word	-1
 5199 0260 43505800 		.ascii	"CPX\000"
 5200 0264 00000000 		.space	4
 5201 0268 00       		.ascii	"\000"
 5202 0269 00000000 		.space	7
 5202      000000
 5203 0270 4D5F4261 		.ascii	"M_Base\000"
 5203      736500
 5204 0277 00000000 		.space	8
 5204      00000000 
 5205 027f 00       		.space	1
 5206 0280 0E       		.byte	14
 5207 0281 000000   		.space	3
 5208 0284 01000000 		.word	1
 5209 0288 0E       		.byte	14
ARM GAS  /tmp/cc7Wa57o.s 			page 138


 5210 0289 000000   		.space	3
 5211 028c 03000000 		.word	3
 5212 0290 42494E00 		.ascii	"BIN\000"
 5213 0294 00000000 		.space	4
 5214 0298 6E6F7400 		.ascii	"not\000"
 5215 029c 00000000 		.space	4
 5216 02a0 0E       		.byte	14
 5217 02a1 000000   		.space	3
 5218 02a4 02000000 		.word	2
 5219 02a8 13       		.byte	19
 5220 02a9 000000   		.space	3
 5221 02ac 03000000 		.word	3
 5222 02b0 4F435400 		.ascii	"OCT\000"
 5223 02b4 00000000 		.space	4
 5224 02b8 616E6400 		.ascii	"and\000"
 5225 02bc 00000000 		.space	4
 5226 02c0 0F       		.byte	15
 5227 02c1 000000   		.space	3
 5228 02c4 01000000 		.word	1
 5229 02c8 14       		.byte	20
 5230 02c9 000000   		.space	3
 5231 02cc 03000000 		.word	3
 5232 02d0 44454300 		.ascii	"DEC\000"
 5233 02d4 00000000 		.space	4
 5234 02d8 6F7200   		.ascii	"or\000"
 5235 02db 00000000 		.space	5
 5235      00
 5236 02e0 0F       		.byte	15
 5237 02e1 000000   		.space	3
 5238 02e4 02000000 		.word	2
 5239 02e8 15       		.byte	21
 5240 02e9 000000   		.space	3
 5241 02ec 03000000 		.word	3
 5242 02f0 48455800 		.ascii	"HEX\000"
 5243 02f4 00000000 		.space	4
 5244 02f8 786F7200 		.ascii	"xor\000"
 5245 02fc 00000000 		.space	4
 5246 0300 2C       		.byte	44
 5247 0301 000000   		.space	3
 5248 0304 FFFFFFFF 		.word	-1
 5249 0308 16       		.byte	22
 5250 0309 000000   		.space	3
 5251 030c 03000000 		.word	3
 5252 0310 2D2D0D00 		.ascii	"--\015\000"
 5253 0314 00000000 		.space	4
 5254 0318 524D4452 		.ascii	"RMDR\000"
 5254      00
 5255 031d 000000   		.space	3
 5256 0320 2D       		.byte	45
 5257 0321 000000   		.space	3
 5258 0324 FFFFFFFF 		.word	-1
 5259 0328 07       		.byte	7
 5260 0329 000000   		.space	3
 5261 032c 01000000 		.word	1
 5262 0330 43505800 		.ascii	"CPX\000"
 5263 0334 00000000 		.space	4
 5264 0338 482E6400 		.ascii	"H.d\000"
ARM GAS  /tmp/cc7Wa57o.s 			page 139


 5265 033c 00000000 		.space	4
 5266 0340 4D5F416E 		.ascii	"M_Angles\000"
 5266      676C6573 
 5266      00
 5267 0349 00000000 		.space	6
 5267      0000
 5268 034f 00       		.space	1
 5269 0350 06       		.byte	6
 5270 0351 000000   		.space	3
 5271 0354 02000000 		.word	2
 5272 0358 04       		.byte	4
 5273 0359 000000   		.space	3
 5274 035c 01000000 		.word	1
 5275 0360 44454700 		.ascii	"DEG\000"
 5276 0364 00000000 		.space	4
 5277 0368 500D5200 		.ascii	"P\015R\000"
 5278 036c 00000000 		.space	4
 5279 0370 07       		.byte	7
 5280 0371 000000   		.space	3
 5281 0374 02000000 		.word	2
 5282 0378 04       		.byte	4
 5283 0379 000000   		.space	3
 5284 037c 02000000 		.word	2
 5285 0380 52414400 		.ascii	"RAD\000"
 5286 0384 00000000 		.space	4
 5287 0388 520D5000 		.ascii	"R\015P\000"
 5288 038c 00000000 		.space	4
 5289 0390 08       		.byte	8
 5290 0391 000000   		.space	3
 5291 0394 02000000 		.word	2
 5292 0398 00       		.byte	0
 5293 0399 000000   		.space	3
 5294 039c 01000000 		.word	1
 5295 03a0 47524144 		.ascii	"GRAD\000"
 5295      00
 5296 03a5 000000   		.space	3
 5297 03a8 48595000 		.ascii	"HYP\000"
 5298 03ac 00000000 		.space	4
 5299 03b0 06       		.byte	6
 5300 03b1 000000   		.space	3
 5301 03b4 01000000 		.word	1
 5302 03b8 07       		.byte	7
 5303 03b9 000000   		.space	3
 5304 03bc 01000000 		.word	1
 5305 03c0 482E4D53 		.ascii	"H.MS\000"
 5305      00
 5306 03c5 000000   		.space	3
 5307 03c8 482E6400 		.ascii	"H.d\000"
 5308 03cc 00000000 		.space	4
 5309 03d0 2C       		.byte	44
 5310 03d1 000000   		.space	3
 5311 03d4 FFFFFFFF 		.word	-1
 5312 03d8 00       		.byte	0
 5313 03d9 000000   		.space	3
 5314 03dc 02000000 		.word	2
 5315 03e0 2D2D0D00 		.ascii	"--\015\000"
 5316 03e4 00000000 		.space	4
ARM GAS  /tmp/cc7Wa57o.s 			page 140


 5317 03e8 4859509D 		.ascii	"HYP\235\000"
 5317      00
 5318 03ed 000000   		.space	3
 5319 03f0 2D       		.byte	45
 5320 03f1 000000   		.space	3
 5321 03f4 FFFFFFFF 		.word	-1
 5322 03f8 2E       		.byte	46
 5323 03f9 000000   		.space	3
 5324 03fc FFFFFFFF 		.word	-1
 5325 0400 43505800 		.ascii	"CPX\000"
 5326 0404 00000000 		.space	4
 5327 0408 00       		.ascii	"\000"
 5328 0409 00000000 		.space	7
 5328      000000
 5329 0410 4D5F4D69 		.ascii	"M_Misc\000"
 5329      736300
 5330 0417 00000000 		.space	8
 5330      00000000 
 5331 041f 00       		.space	1
 5332 0420 25       		.byte	37
 5333 0421 000000   		.space	3
 5334 0424 01000000 		.word	1
 5335 0428 14       		.byte	20
 5336 0429 000000   		.space	3
 5337 042c 01000000 		.word	1
 5338 0430 7C587C00 		.ascii	"|X|\000"
 5339 0434 00000000 		.space	4
 5340 0438 329C00   		.ascii	"2\234\000"
 5341 043b 00000000 		.space	5
 5341      00
 5342 0440 25       		.byte	37
 5343 0441 000000   		.space	3
 5344 0444 02000000 		.word	2
 5345 0448 14       		.byte	20
 5346 0449 000000   		.space	3
 5347 044c 02000000 		.word	2
 5348 0450 524E4400 		.ascii	"RND\000"
 5349 0454 00000000 		.space	4
 5350 0458 4C6F67BA 		.ascii	"Log\272\000"
 5350      00
 5351 045d 000000   		.space	3
 5352 0460 26       		.byte	38
 5353 0461 000000   		.space	3
 5354 0464 01000000 		.word	1
 5355 0468 15       		.byte	21
 5356 0469 000000   		.space	3
 5357 046c 02000000 		.word	2
 5358 0470 49506172 		.ascii	"IPart\000"
 5358      7400
 5359 0476 0000     		.space	2
 5360 0478 4C6F678B 		.ascii	"Log\213\000"
 5360      00
 5361 047d 000000   		.space	3
 5362 0480 26       		.byte	38
 5363 0481 000000   		.space	3
 5364 0484 02000000 		.word	2
 5365 0488 16       		.byte	22
ARM GAS  /tmp/cc7Wa57o.s 			page 141


 5366 0489 000000   		.space	3
 5367 048c 02000000 		.word	2
 5368 0490 46506172 		.ascii	"FPart\000"
 5368      7400
 5369 0496 0000     		.space	2
 5370 0498 7C7C656C 		.ascii	"||el\000"
 5370      00
 5371 049d 000000   		.space	3
 5372 04a0 2C       		.byte	44
 5373 04a1 000000   		.space	3
 5374 04a4 FFFFFFFF 		.word	-1
 5375 04a8 22       		.byte	34
 5376 04a9 000000   		.space	3
 5377 04ac 02000000 		.word	2
 5378 04b0 2D2D0D00 		.ascii	"--\015\000"
 5379 04b4 00000000 		.space	4
 5380 04b8 832500   		.ascii	"\203%\000"
 5381 04bb 00000000 		.space	5
 5381      00
 5382 04c0 2D       		.byte	45
 5383 04c1 000000   		.space	3
 5384 04c4 FFFFFFFF 		.word	-1
 5385 04c8 2E       		.byte	46
 5386 04c9 000000   		.space	3
 5387 04cc FFFFFFFF 		.word	-1
 5388 04d0 43505800 		.ascii	"CPX\000"
 5389 04d4 00000000 		.space	4
 5390 04d8 00       		.ascii	"\000"
 5391 04d9 00000000 		.space	7
 5391      000000
 5392 04e0 4D5F5377 		.ascii	"M_Swap\000"
 5392      617000
 5393 04e7 00000000 		.space	8
 5393      00000000 
 5394 04ef 00       		.space	1
 5395 04f0 0D       		.byte	13
 5396 04f1 000000   		.space	3
 5397 04f4 01000000 		.word	1
 5398 04f8 34       		.byte	52
 5399 04f9 000000   		.space	3
 5400 04fc 00A60000 		.word	42496
 5401 0500 53686F77 		.ascii	"Show\016\000"
 5401      0E00
 5402 0506 0000     		.space	2
 5403 0508 5B175D00 		.ascii	"[\027]\000"
 5404 050c 00000000 		.space	4
 5405 0510 0D       		.byte	13
 5406 0511 000000   		.space	3
 5407 0514 02000000 		.word	2
 5408 0518 2E       		.byte	46
 5409 0519 000000   		.space	3
 5410 051c FFFFFFFF 		.word	-1
 5411 0520 53686F77 		.ascii	"Show\015\000"
 5411      0D00
 5412 0526 0000     		.space	2
 5413 0528 00       		.ascii	"\000"
 5414 0529 00000000 		.space	7
ARM GAS  /tmp/cc7Wa57o.s 			page 142


 5414      000000
 5415 0530 0D       		.byte	13
 5416 0531 000000   		.space	3
 5417 0534 03000000 		.word	3
 5418 0538 34       		.byte	52
 5419 0539 000000   		.space	3
 5420 053c 00330000 		.word	13056
 5421 0540 78173F00 		.ascii	"x\027?\000"
 5422 0544 00000000 		.space	4
 5423 0548 7A173F00 		.ascii	"z\027?\000"
 5424 054c 00000000 		.space	4
 5425 0550 34       		.byte	52
 5426 0551 000000   		.space	3
 5427 0554 00320000 		.word	12800
 5428 0558 34       		.byte	52
 5429 0559 000000   		.space	3
 5430 055c 00340000 		.word	13312
 5431 0560 79173F00 		.ascii	"y\027?\000"
 5432 0564 00000000 		.space	4
 5433 0568 74173F00 		.ascii	"t\027?\000"
 5434 056c 00000000 		.space	4
 5435 0570 2C       		.byte	44
 5436 0571 000000   		.space	3
 5437 0574 FFFFFFFF 		.word	-1
 5438 0578 2E       		.byte	46
 5439 0579 000000   		.space	3
 5440 057c FFFFFFFF 		.word	-1
 5441 0580 2D2D0D00 		.ascii	"--\015\000"
 5442 0584 00000000 		.space	4
 5443 0588 00       		.ascii	"\000"
 5444 0589 00000000 		.space	7
 5444      000000
 5445 0590 2D       		.byte	45
 5446 0591 000000   		.space	3
 5447 0594 FFFFFFFF 		.word	-1
 5448 0598 2E       		.byte	46
 5449 0599 000000   		.space	3
 5450 059c FFFFFFFF 		.word	-1
 5451 05a0 43505800 		.ascii	"CPX\000"
 5452 05a4 00000000 		.space	4
 5453 05a8 00       		.ascii	"\000"
 5454 05a9 00000000 		.space	7
 5454      000000
 5455 05b0 4D5F5072 		.ascii	"M_Program\000"
 5455      6F677261 
 5455      6D00
 5456 05ba 00000000 		.space	5
 5456      00
 5457 05bf 00       		.space	1
 5458 05c0 27       		.byte	39
 5459 05c1 000000   		.space	3
 5460 05c4 01000000 		.word	1
 5461 05c8 28       		.byte	40
 5462 05c9 000000   		.space	3
 5463 05cc 01000000 		.word	1
 5464 05d0 4C424C00 		.ascii	"LBL\000"
 5465 05d4 00000000 		.space	4
ARM GAS  /tmp/cc7Wa57o.s 			page 143


 5466 05d8 44534500 		.ascii	"DSE\000"
 5467 05dc 00000000 		.space	4
 5468 05e0 27       		.byte	39
 5469 05e1 000000   		.space	3
 5470 05e4 02000000 		.word	2
 5471 05e8 28       		.byte	40
 5472 05e9 000000   		.space	3
 5473 05ec 02000000 		.word	2
 5474 05f0 52544E00 		.ascii	"RTN\000"
 5475 05f4 00000000 		.space	4
 5476 05f8 49534700 		.ascii	"ISG\000"
 5477 05fc 00000000 		.space	4
 5478 0600 25       		.byte	37
 5479 0601 000000   		.space	3
 5480 0604 03000000 		.word	3
 5481 0608 34       		.byte	52
 5482 0609 000000   		.space	3
 5483 060c 00600000 		.word	24576
 5484 0610 50617573 		.ascii	"Pause\000"
 5484      6500
 5485 0616 0000     		.space	2
 5486 0618 44454300 		.ascii	"DEC\000"
 5487 061c 00000000 		.space	4
 5488 0620 12       		.byte	18
 5489 0621 000000   		.space	3
 5490 0624 03000000 		.word	3
 5491 0628 34       		.byte	52
 5492 0629 000000   		.space	3
 5493 062c 00610000 		.word	24832
 5494 0630 47544F00 		.ascii	"GTO\000"
 5495 0634 00000000 		.space	4
 5496 0638 494E4300 		.ascii	"INC\000"
 5497 063c 00000000 		.space	4
 5498 0640 2C       		.byte	44
 5499 0641 000000   		.space	3
 5500 0644 FFFFFFFF 		.word	-1
 5501 0648 34       		.byte	52
 5502 0649 000000   		.space	3
 5503 064c 00570000 		.word	22272
 5504 0650 2D2D0D00 		.ascii	"--\015\000"
 5505 0654 00000000 		.space	4
 5506 0658 4241434B 		.ascii	"BACK\000"
 5506      00
 5507 065d 000000   		.space	3
 5508 0660 2D       		.byte	45
 5509 0661 000000   		.space	3
 5510 0664 FFFFFFFF 		.word	-1
 5511 0668 34       		.byte	52
 5512 0669 000000   		.space	3
 5513 066c 00560000 		.word	22016
 5514 0670 43505800 		.ascii	"CPX\000"
 5515 0674 00000000 		.space	4
 5516 0678 534B4950 		.ascii	"SKIP\000"
 5516      00
 5517 067d 000000   		.space	3
 5518 0680 4D5F5365 		.ascii	"M_Setup1\000"
 5518      74757031 
ARM GAS  /tmp/cc7Wa57o.s 			page 144


 5518      00
 5519 0689 00000000 		.space	6
 5519      0000
 5520 068f 00       		.space	1
 5521 0690 32       		.byte	50
 5522 0691 000000   		.space	3
 5523 0694 00000000 		.word	0
 5524 0698 30       		.byte	48
 5525 0699 000000   		.space	3
 5526 069c 00000000 		.word	0
 5527 06a0 45584954 		.ascii	"EXIT\000"
 5527      00
 5528 06a5 000000   		.space	3
 5529 06a8 53797374 		.ascii	"System\000"
 5529      656D00
 5530 06af 00       		.space	1
 5531 06b0 31       		.byte	49
 5532 06b1 000000   		.space	3
 5533 06b4 09000000 		.word	9
 5534 06b8 2E       		.byte	46
 5535 06b9 000000   		.space	3
 5536 06bc FFFFFFFF 		.word	-1
 5537 06c0 48454C50 		.ascii	"HELP\000"
 5537      00
 5538 06c5 000000   		.space	3
 5539 06c8 00       		.ascii	"\000"
 5540 06c9 00000000 		.space	7
 5540      000000
 5541 06d0 31       		.byte	49
 5542 06d1 000000   		.space	3
 5543 06d4 02000000 		.word	2
 5544 06d8 31       		.byte	49
 5545 06d9 000000   		.space	3
 5546 06dc 06000000 		.word	6
 5547 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5547      4F00
 5548 06e6 0000     		.space	2
 5549 06e8 53765241 		.ascii	"SvRAM\000"
 5549      4D00
 5550 06ee 0000     		.space	2
 5551 06f0 31       		.byte	49
 5552 06f1 000000   		.space	3
 5553 06f4 03000000 		.word	3
 5554 06f8 31       		.byte	49
 5555 06f9 000000   		.space	3
 5556 06fc 07000000 		.word	7
 5557 0700 4F6E5243 		.ascii	"OnRCL\000"
 5557      4C00
 5558 0706 0000     		.space	2
 5559 0708 4C645241 		.ascii	"LdRAM\000"
 5559      4D00
 5560 070e 0000     		.space	2
 5561 0710 2C       		.byte	44
 5562 0711 000000   		.space	3
 5563 0714 FFFFFFFF 		.word	-1
 5564 0718 2E       		.byte	46
 5565 0719 000000   		.space	3
ARM GAS  /tmp/cc7Wa57o.s 			page 145


 5566 071c FFFFFFFF 		.word	-1
 5567 0720 2D2D0D00 		.ascii	"--\015\000"
 5568 0724 00000000 		.space	4
 5569 0728 00       		.ascii	"\000"
 5570 0729 00000000 		.space	7
 5570      000000
 5571 0730 2D       		.byte	45
 5572 0731 000000   		.space	3
 5573 0734 FFFFFFFF 		.word	-1
 5574 0738 2E       		.byte	46
 5575 0739 000000   		.space	3
 5576 073c FFFFFFFF 		.word	-1
 5577 0740 43505800 		.ascii	"CPX\000"
 5578 0744 00000000 		.space	4
 5579 0748 00       		.ascii	"\000"
 5580 0749 00000000 		.space	7
 5580      000000
 5581 0750 4D5F4172 		.ascii	"M_Arrow\000"
 5581      726F7700 
 5582 0758 00000000 		.space	7
 5582      000000
 5583 075f 00       		.space	1
 5584 0760 0E       		.byte	14
 5585 0761 000000   		.space	3
 5586 0764 01000000 		.word	1
 5587 0768 06       		.byte	6
 5588 0769 000000   		.space	3
 5589 076c 02000000 		.word	2
 5590 0770 0D42696E 		.ascii	"\015Bin\000"
 5590      00
 5591 0775 000000   		.space	3
 5592 0778 0D444547 		.ascii	"\015DEG\000"
 5592      00
 5593 077d 000000   		.space	3
 5594 0780 0E       		.byte	14
 5595 0781 000000   		.space	3
 5596 0784 02000000 		.word	2
 5597 0788 07       		.byte	7
 5598 0789 000000   		.space	3
 5599 078c 02000000 		.word	2
 5600 0790 0D4F6374 		.ascii	"\015Oct\000"
 5600      00
 5601 0795 000000   		.space	3
 5602 0798 0D524144 		.ascii	"\015RAD\000"
 5602      00
 5603 079d 000000   		.space	3
 5604 07a0 0F       		.byte	15
 5605 07a1 000000   		.space	3
 5606 07a4 01000000 		.word	1
 5607 07a8 08       		.byte	8
 5608 07a9 000000   		.space	3
 5609 07ac 02000000 		.word	2
 5610 07b0 0D446563 		.ascii	"\015Dec\000"
 5610      00
 5611 07b5 000000   		.space	3
 5612 07b8 0D477261 		.ascii	"\015Grad\000"
 5612      6400
ARM GAS  /tmp/cc7Wa57o.s 			page 146


 5613 07be 0000     		.space	2
 5614 07c0 0F       		.byte	15
 5615 07c1 000000   		.space	3
 5616 07c4 02000000 		.word	2
 5617 07c8 06       		.byte	6
 5618 07c9 000000   		.space	3
 5619 07cc 01000000 		.word	1
 5620 07d0 0D486578 		.ascii	"\015Hex\000"
 5620      00
 5621 07d5 000000   		.space	3
 5622 07d8 0D484D53 		.ascii	"\015HMS\000"
 5622      00
 5623 07dd 000000   		.space	3
 5624 07e0 2C       		.byte	44
 5625 07e1 000000   		.space	3
 5626 07e4 FFFFFFFF 		.word	-1
 5627 07e8 07       		.byte	7
 5628 07e9 000000   		.space	3
 5629 07ec 01000000 		.word	1
 5630 07f0 2D2D0D00 		.ascii	"--\015\000"
 5631 07f4 00000000 		.space	4
 5632 07f8 484D530D 		.ascii	"HMS\015\000"
 5632      00
 5633 07fd 000000   		.space	3
 5634 0800 2D       		.byte	45
 5635 0801 000000   		.space	3
 5636 0804 FFFFFFFF 		.word	-1
 5637 0808 2E       		.byte	46
 5638 0809 000000   		.space	3
 5639 080c FFFFFFFF 		.word	-1
 5640 0810 43505800 		.ascii	"CPX\000"
 5641 0814 00000000 		.space	4
 5642 0818 00       		.ascii	"\000"
 5643 0819 00000000 		.space	7
 5643      000000
 5644 0820 4D5F466C 		.ascii	"M_Flags\000"
 5644      61677300 
 5645 0828 00000000 		.space	7
 5645      000000
 5646 082f 00       		.space	1
 5647 0830 1E       		.byte	30
 5648 0831 000000   		.space	3
 5649 0834 01000000 		.word	1
 5650 0838 34       		.byte	52
 5651 0839 000000   		.space	3
 5652 083c 00740000 		.word	29696
 5653 0840 53465F00 		.ascii	"SF_\000"
 5654 0844 00000000 		.space	4
 5655 0848 46533F00 		.ascii	"FS?\000"
 5656 084c 00000000 		.space	4
 5657 0850 1E       		.byte	30
 5658 0851 000000   		.space	3
 5659 0854 02000000 		.word	2
 5660 0858 34       		.byte	52
 5661 0859 000000   		.space	3
 5662 085c 00750000 		.word	29952
 5663 0860 43465F00 		.ascii	"CF_\000"
ARM GAS  /tmp/cc7Wa57o.s 			page 147


 5664 0864 00000000 		.space	4
 5665 0868 46433F00 		.ascii	"FC?\000"
 5666 086c 00000000 		.space	4
 5667 0870 1F       		.byte	31
 5668 0871 000000   		.space	3
 5669 0874 01000000 		.word	1
 5670 0878 34       		.byte	52
 5671 0879 000000   		.space	3
 5672 087c 00500000 		.word	20480
 5673 0880 783D3F00 		.ascii	"x=?\000"
 5674 0884 00000000 		.space	4
 5675 0888 783C3F00 		.ascii	"x<?\000"
 5676 088c 00000000 		.space	4
 5677 0890 1F       		.byte	31
 5678 0891 000000   		.space	3
 5679 0894 02000000 		.word	2
 5680 0898 34       		.byte	52
 5681 0899 000000   		.space	3
 5682 089c 00510000 		.word	20736
 5683 08a0 780B3F00 		.ascii	"x\013?\000"
 5684 08a4 00000000 		.space	4
 5685 08a8 783C3D3F 		.ascii	"x<=?\000"
 5685      00
 5686 08ad 000000   		.space	3
 5687 08b0 2C       		.byte	44
 5688 08b1 000000   		.space	3
 5689 08b4 FFFFFFFF 		.word	-1
 5690 08b8 34       		.byte	52
 5691 08b9 000000   		.space	3
 5692 08bc 00530000 		.word	21248
 5693 08c0 2D2D0D00 		.ascii	"--\015\000"
 5694 08c4 00000000 		.space	4
 5695 08c8 783E3D3F 		.ascii	"x>=?\000"
 5695      00
 5696 08cd 000000   		.space	3
 5697 08d0 2D       		.byte	45
 5698 08d1 000000   		.space	3
 5699 08d4 FFFFFFFF 		.word	-1
 5700 08d8 34       		.byte	52
 5701 08d9 000000   		.space	3
 5702 08dc 00520000 		.word	20992
 5703 08e0 43505800 		.ascii	"CPX\000"
 5704 08e4 00000000 		.space	4
 5705 08e8 783E3F00 		.ascii	"x>?\000"
 5706 08ec 00000000 		.space	4
 5707 08f0 4D5F5072 		.ascii	"M_Prob\000"
 5707      6F6200
 5708 08f7 00000000 		.space	8
 5708      00000000 
 5709 08ff 00       		.space	1
 5710 0900 18       		.byte	24
 5711 0901 000000   		.space	3
 5712 0904 03000000 		.word	3
 5713 0908 34       		.byte	52
 5714 0909 000000   		.space	3
 5715 090c 31020000 		.word	561
 5716 0910 46616374 		.ascii	"Fact!\000"
ARM GAS  /tmp/cc7Wa57o.s 			page 148


 5716      2100
 5717 0916 0000     		.space	2
 5718 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5718      00
 5719 091d 000000   		.space	3
 5720 0920 18       		.byte	24
 5721 0921 000000   		.space	3
 5722 0924 01000000 		.word	1
 5723 0928 19       		.byte	25
 5724 0929 000000   		.space	3
 5725 092c 01000000 		.word	1
 5726 0930 43792C78 		.ascii	"Cy,x\000"
 5726      00
 5727 0935 000000   		.space	3
 5728 0938 9400     		.ascii	"\224\000"
 5729 093a 00000000 		.space	6
 5729      0000
 5730 0940 18       		.byte	24
 5731 0941 000000   		.space	3
 5732 0944 02000000 		.word	2
 5733 0948 19       		.byte	25
 5734 0949 000000   		.space	3
 5735 094c 02000000 		.word	2
 5736 0950 50792C78 		.ascii	"Py,x\000"
 5736      00
 5737 0955 000000   		.space	3
 5738 0958 949D00   		.ascii	"\224\235\000"
 5739 095b 00000000 		.space	5
 5739      00
 5740 0960 08       		.byte	8
 5741 0961 000000   		.space	3
 5742 0964 01000000 		.word	1
 5743 0968 34       		.byte	52
 5744 0969 000000   		.space	3
 5745 096c 34010000 		.word	308
 5746 0970 52414E23 		.ascii	"RAN#\000"
 5746      00
 5747 0975 000000   		.space	3
 5748 0978 53454544 		.ascii	"SEED\000"
 5748      00
 5749 097d 000000   		.space	3
 5750 0980 2C       		.byte	44
 5751 0981 000000   		.space	3
 5752 0984 FFFFFFFF 		.word	-1
 5753 0988 2E       		.byte	46
 5754 0989 000000   		.space	3
 5755 098c FFFFFFFF 		.word	-1
 5756 0990 2D2D0D00 		.ascii	"--\015\000"
 5757 0994 00000000 		.space	4
 5758 0998 00       		.ascii	"\000"
 5759 0999 00000000 		.space	7
 5759      000000
 5760 09a0 2D       		.byte	45
 5761 09a1 000000   		.space	3
 5762 09a4 FFFFFFFF 		.word	-1
 5763 09a8 2E       		.byte	46
 5764 09a9 000000   		.space	3
ARM GAS  /tmp/cc7Wa57o.s 			page 149


 5765 09ac FFFFFFFF 		.word	-1
 5766 09b0 43505800 		.ascii	"CPX\000"
 5767 09b4 00000000 		.space	4
 5768 09b8 00       		.ascii	"\000"
 5769 09b9 00000000 		.space	7
 5769      000000
 5770 09c0 4D5F5374 		.ascii	"M_Stats\000"
 5770      61747300 
 5771 09c8 00000000 		.space	7
 5771      000000
 5772 09cf 00       		.space	1
 5773 09d0 1A       		.byte	26
 5774 09d1 000000   		.space	3
 5775 09d4 01000000 		.word	1
 5776 09d8 1A       		.byte	26
 5777 09d9 000000   		.space	3
 5778 09dc 02000000 		.word	2
 5779 09e0 0100     		.ascii	"\001\000"
 5780 09e2 00000000 		.space	6
 5780      0000
 5781 09e8 532E442E 		.ascii	"S.D.\000"
 5781      00
 5782 09ed 000000   		.space	3
 5783 09f0 1B       		.byte	27
 5784 09f1 000000   		.space	3
 5785 09f4 01000000 		.word	1
 5786 09f8 34       		.byte	52
 5787 09f9 000000   		.space	3
 5788 09fc 74020000 		.word	628
 5789 0a00 792D6861 		.ascii	"y-hat\000"
 5789      7400
 5790 0a06 0000     		.space	2
 5791 0a08 782D6861 		.ascii	"x-hat\000"
 5791      7400
 5792 0a0e 0000     		.space	2
 5793 0a10 34       		.byte	52
 5794 0a11 000000   		.space	3
 5795 0a14 27010000 		.word	295
 5796 0a18 34       		.byte	52
 5797 0a19 000000   		.space	3
 5798 0a1c 28010000 		.word	296
 5799 0a20 434F5252 		.ascii	"CORR\000"
 5799      00
 5800 0a25 000000   		.space	3
 5801 0a28 4C2E522E 		.ascii	"L.R.\000"
 5801      00
 5802 0a2d 000000   		.space	3
 5803 0a30 34       		.byte	52
 5804 0a31 000000   		.space	3
 5805 0a34 32010000 		.word	306
 5806 0a38 34       		.byte	52
 5807 0a39 000000   		.space	3
 5808 0a3c 31010000 		.word	305
 5809 0a40 42657374 		.ascii	"BestF\000"
 5809      4600
 5810 0a46 0000     		.space	2
 5811 0a48 4C6F6746 		.ascii	"LogFit\000"
ARM GAS  /tmp/cc7Wa57o.s 			page 150


 5811      697400
 5812 0a4f 00       		.space	1
 5813 0a50 34       		.byte	52
 5814 0a51 000000   		.space	3
 5815 0a54 2E010000 		.word	302
 5816 0a58 34       		.byte	52
 5817 0a59 000000   		.space	3
 5818 0a5c 2F010000 		.word	303
 5819 0a60 4C696E65 		.ascii	"Linear\000"
 5819      617200
 5820 0a67 00       		.space	1
 5821 0a68 45787046 		.ascii	"ExpFit\000"
 5821      697400
 5822 0a6f 00       		.space	1
 5823 0a70 2D       		.byte	45
 5824 0a71 000000   		.space	3
 5825 0a74 FFFFFFFF 		.word	-1
 5826 0a78 34       		.byte	52
 5827 0a79 000000   		.space	3
 5828 0a7c 30010000 		.word	304
 5829 0a80 43505800 		.ascii	"CPX\000"
 5830 0a84 00000000 		.space	4
 5831 0a88 50777246 		.ascii	"PwrFit\000"
 5831      697400
 5832 0a8f 00       		.space	1
 5833 0a90 4D5F5365 		.ascii	"M_Setup2\000"
 5833      74757032 
 5833      00
 5834 0a99 00000000 		.space	6
 5834      0000
 5835 0a9f 00       		.space	1
 5836 0aa0 31       		.byte	49
 5837 0aa1 000000   		.space	3
 5838 0aa4 04000000 		.word	4
 5839 0aa8 2E       		.byte	46
 5840 0aa9 000000   		.space	3
 5841 0aac FFFFFFFF 		.word	-1
 5842 0ab0 53764C49 		.ascii	"SvLIB\000"
 5842      4200
 5843 0ab6 0000     		.space	2
 5844 0ab8 00       		.ascii	"\000"
 5845 0ab9 00000000 		.space	7
 5845      000000
 5846 0ac0 31       		.byte	49
 5847 0ac1 000000   		.space	3
 5848 0ac4 05000000 		.word	5
 5849 0ac8 2E       		.byte	46
 5850 0ac9 000000   		.space	3
 5851 0acc FFFFFFFF 		.word	-1
 5852 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5852      4200
 5853 0ad6 0000     		.space	2
 5854 0ad8 00       		.ascii	"\000"
 5855 0ad9 00000000 		.space	7
 5855      000000
 5856 0ae0 31       		.byte	49
 5857 0ae1 000000   		.space	3
ARM GAS  /tmp/cc7Wa57o.s 			page 151


 5858 0ae4 0A000000 		.word	10
 5859 0ae8 34       		.byte	52
 5860 0ae9 000000   		.space	3
 5861 0aec B2010000 		.word	434
 5862 0af0 53764350 		.ascii	"SvCPRG\000"
 5862      524700
 5863 0af7 00       		.space	1
 5864 0af8 5053544F 		.ascii	"PSTO\000"
 5864      00
 5865 0afd 000000   		.space	3
 5866 0b00 31       		.byte	49
 5867 0b01 000000   		.space	3
 5868 0b04 08000000 		.word	8
 5869 0b08 34       		.byte	52
 5870 0b09 000000   		.space	3
 5871 0b0c B1010000 		.word	433
 5872 0b10 4C645052 		.ascii	"LdPRG\000"
 5872      4700
 5873 0b16 0000     		.space	2
 5874 0b18 5052434C 		.ascii	"PRCL\000"
 5874      00
 5875 0b1d 000000   		.space	3
 5876 0b20 2C       		.byte	44
 5877 0b21 000000   		.space	3
 5878 0b24 FFFFFFFF 		.word	-1
 5879 0b28 2E       		.byte	46
 5880 0b29 000000   		.space	3
 5881 0b2c FFFFFFFF 		.word	-1
 5882 0b30 2D2D0D00 		.ascii	"--\015\000"
 5883 0b34 00000000 		.space	4
 5884 0b38 00       		.ascii	"\000"
 5885 0b39 00000000 		.space	7
 5885      000000
 5886 0b40 2D       		.byte	45
 5887 0b41 000000   		.space	3
 5888 0b44 FFFFFFFF 		.word	-1
 5889 0b48 2E       		.byte	46
 5890 0b49 000000   		.space	3
 5891 0b4c FFFFFFFF 		.word	-1
 5892 0b50 43505800 		.ascii	"CPX\000"
 5893 0b54 00000000 		.space	4
 5894 0b58 00       		.ascii	"\000"
 5895 0b59 00000000 		.space	7
 5895      000000
 5896 0b60 4D5F536F 		.ascii	"M_Solve\000"
 5896      6C766500 
 5897 0b68 00000000 		.space	7
 5897      000000
 5898 0b6f 00       		.space	1
 5899 0b70 20       		.byte	32
 5900 0b71 000000   		.space	3
 5901 0b74 01000000 		.word	1
 5902 0b78 34       		.byte	52
 5903 0b79 000000   		.space	3
 5904 0b7c 00690000 		.word	26880
 5905 0b80 534C5600 		.ascii	"SLV\000"
 5906 0b84 00000000 		.space	4
ARM GAS  /tmp/cc7Wa57o.s 			page 152


 5907 0b88 66272878 		.ascii	"f'(x)\000"
 5907      2900
 5908 0b8e 0000     		.space	2
 5909 0b90 20       		.byte	32
 5910 0b91 000000   		.space	3
 5911 0b94 02000000 		.word	2
 5912 0b98 34       		.byte	52
 5913 0b99 000000   		.space	3
 5914 0b9c 006A0000 		.word	27136
 5915 0ba0 04206478 		.ascii	"\004 dx\000"
 5915      00
 5916 0ba5 000000   		.space	3
 5917 0ba8 66272728 		.ascii	"f''(x)\000"
 5917      782900
 5918 0baf 00       		.space	1
 5919 0bb0 21       		.byte	33
 5920 0bb1 000000   		.space	3
 5921 0bb4 02000000 		.word	2
 5922 0bb8 2E       		.byte	46
 5923 0bb9 000000   		.space	3
 5924 0bbc FFFFFFFF 		.word	-1
 5925 0bc0 53554D00 		.ascii	"SUM\000"
 5926 0bc4 00000000 		.space	4
 5927 0bc8 00       		.ascii	"\000"
 5928 0bc9 00000000 		.space	7
 5928      000000
 5929 0bd0 21       		.byte	33
 5930 0bd1 000000   		.space	3
 5931 0bd4 01000000 		.word	1
 5932 0bd8 2E       		.byte	46
 5933 0bd9 000000   		.space	3
 5934 0bdc FFFFFFFF 		.word	-1
 5935 0be0 50524F44 		.ascii	"PROD\000"
 5935      00
 5936 0be5 000000   		.space	3
 5937 0be8 00       		.ascii	"\000"
 5938 0be9 00000000 		.space	7
 5938      000000
 5939 0bf0 2C       		.byte	44
 5940 0bf1 000000   		.space	3
 5941 0bf4 FFFFFFFF 		.word	-1
 5942 0bf8 2E       		.byte	46
 5943 0bf9 000000   		.space	3
 5944 0bfc FFFFFFFF 		.word	-1
 5945 0c00 2D2D0D00 		.ascii	"--\015\000"
 5946 0c04 00000000 		.space	4
 5947 0c08 00       		.ascii	"\000"
 5948 0c09 00000000 		.space	7
 5948      000000
 5949 0c10 2D       		.byte	45
 5950 0c11 000000   		.space	3
 5951 0c14 FFFFFFFF 		.word	-1
 5952 0c18 2E       		.byte	46
 5953 0c19 000000   		.space	3
 5954 0c1c FFFFFFFF 		.word	-1
 5955 0c20 43505800 		.ascii	"CPX\000"
 5956 0c24 00000000 		.space	4
ARM GAS  /tmp/cc7Wa57o.s 			page 153


 5957 0c28 00       		.ascii	"\000"
 5958 0c29 00000000 		.space	7
 5958      000000
 5959 0c30 4D5F426C 		.ascii	"M_Blank2\000"
 5959      616E6B32 
 5959      00
 5960 0c39 00000000 		.space	6
 5960      0000
 5961 0c3f 00       		.space	1
 5962 0c40 28       		.byte	40
 5963 0c41 000000   		.space	3
 5964 0c44 03000000 		.word	3
 5965 0c48 2E       		.byte	46
 5966 0c49 000000   		.space	3
 5967 0c4c FFFFFFFF 		.word	-1
 5968 0c50 912B00   		.ascii	"\221+\000"
 5969 0c53 00000000 		.space	5
 5969      00
 5970 0c58 00       		.ascii	"\000"
 5971 0c59 00000000 		.space	7
 5971      000000
 5972 0c60 16       		.byte	22
 5973 0c61 000000   		.space	3
 5974 0c64 01000000 		.word	1
 5975 0c68 2E       		.byte	46
 5976 0c69 000000   		.space	3
 5977 0c6c FFFFFFFF 		.word	-1
 5978 0c70 312F5800 		.ascii	"1/X\000"
 5979 0c74 00000000 		.space	4
 5980 0c78 00       		.ascii	"\000"
 5981 0c79 00000000 		.space	7
 5981      000000
 5982 0c80 1C       		.byte	28
 5983 0c81 000000   		.space	3
 5984 0c84 01000000 		.word	1
 5985 0c88 2E       		.byte	46
 5986 0c89 000000   		.space	3
 5987 0c8c FFFFFFFF 		.word	-1
 5988 0c90 035800   		.ascii	"\003X\000"
 5989 0c93 00000000 		.space	5
 5989      00
 5990 0c98 00       		.ascii	"\000"
 5991 0c99 00000000 		.space	7
 5991      000000
 5992 0ca0 13       		.byte	19
 5993 0ca1 000000   		.space	3
 5994 0ca4 02000000 		.word	2
 5995 0ca8 2E       		.byte	46
 5996 0ca9 000000   		.space	3
 5997 0cac FFFFFFFF 		.word	-1
 5998 0cb0 4C4F4700 		.ascii	"LOG\000"
 5999 0cb4 00000000 		.space	4
 6000 0cb8 00       		.ascii	"\000"
 6001 0cb9 00000000 		.space	7
 6001      000000
 6002 0cc0 2C       		.byte	44
 6003 0cc1 000000   		.space	3
ARM GAS  /tmp/cc7Wa57o.s 			page 154


 6004 0cc4 FFFFFFFF 		.word	-1
 6005 0cc8 2E       		.byte	46
 6006 0cc9 000000   		.space	3
 6007 0ccc FFFFFFFF 		.word	-1
 6008 0cd0 2D2D0D00 		.ascii	"--\015\000"
 6009 0cd4 00000000 		.space	4
 6010 0cd8 00       		.ascii	"\000"
 6011 0cd9 00000000 		.space	7
 6011      000000
 6012 0ce0 2D       		.byte	45
 6013 0ce1 000000   		.space	3
 6014 0ce4 FFFFFFFF 		.word	-1
 6015 0ce8 2E       		.byte	46
 6016 0ce9 000000   		.space	3
 6017 0cec FFFFFFFF 		.word	-1
 6018 0cf0 43505800 		.ascii	"CPX\000"
 6019 0cf4 00000000 		.space	4
 6020 0cf8 00       		.ascii	"\000"
 6021 0cf9 00000000 		.space	7
 6021      000000
 6022 0d00 4D5F416C 		.ascii	"M_Alpha\000"
 6022      70686100 
 6023 0d08 00000000 		.space	7
 6023      000000
 6024 0d0f 00       		.space	1
 6025 0d10 34       		.byte	52
 6026 0d11 000000   		.space	3
 6027 0d14 78010000 		.word	376
 6028 0d18 34       		.byte	52
 6029 0d19 000000   		.space	3
 6030 0d1c 6D010000 		.word	365
 6031 0d20 582D3EA0 		.ascii	"X->\240\000"
 6031      00
 6032 0d25 000000   		.space	3
 6033 0d28 A054494D 		.ascii	"\240TIME\000"
 6033      4500
 6034 0d2e 0000     		.space	2
 6035 0d30 34       		.byte	52
 6036 0d31 000000   		.space	3
 6037 0d34 77010000 		.word	375
 6038 0d38 34       		.byte	52
 6039 0d39 000000   		.space	3
 6040 0d3c 6C010000 		.word	364
 6041 0d40 A02D3E58 		.ascii	"\240->X\000"
 6041      00
 6042 0d45 000000   		.space	3
 6043 0d48 A0444154 		.ascii	"\240DATE\000"
 6043      4500
 6044 0d4e 0000     		.space	2
 6045 0d50 34       		.byte	52
 6046 0d51 000000   		.space	3
 6047 0d54 00480000 		.word	18432
 6048 0d58 34       		.byte	52
 6049 0d59 000000   		.space	3
 6050 0d5c 6A010000 		.word	362
 6051 0d60 A0495000 		.ascii	"\240IP\000"
 6052 0d64 00000000 		.space	4
ARM GAS  /tmp/cc7Wa57o.s 			page 155


 6053 0d68 A0444159 		.ascii	"\240DAY\000"
 6053      00
 6054 0d6d 000000   		.space	3
 6055 0d70 34       		.byte	52
 6056 0d71 000000   		.space	3
 6057 0d74 76010000 		.word	374
 6058 0d78 34       		.byte	52
 6059 0d79 000000   		.space	3
 6060 0d7c 6B010000 		.word	363
 6061 0d80 A04C454E 		.ascii	"\240LENG\000"
 6061      4700
 6062 0d86 0000     		.space	2
 6063 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 6063      4800
 6064 0d8e 0000     		.space	2
 6065 0d90 2C       		.byte	44
 6066 0d91 000000   		.space	3
 6067 0d94 FFFFFFFF 		.word	-1
 6068 0d98 2C       		.byte	44
 6069 0d99 000000   		.space	3
 6070 0d9c 01000000 		.word	1
 6071 0da0 2D2D0D00 		.ascii	"--\015\000"
 6072 0da4 00000000 		.space	4
 6073 0da8 00       		.ascii	"\000"
 6074 0da9 00000000 		.space	7
 6074      000000
 6075 0db0 2D       		.byte	45
 6076 0db1 000000   		.space	3
 6077 0db4 FFFFFFFF 		.word	-1
 6078 0db8 2D       		.byte	45
 6079 0db9 000000   		.space	3
 6080 0dbc 01000000 		.word	1
 6081 0dc0 43505800 		.ascii	"CPX\000"
 6082 0dc4 00000000 		.space	4
 6083 0dc8 00       		.ascii	"\000"
 6084 0dc9 00000000 		.space	7
 6084      000000
 6085 0dd0 4D5F435F 		.ascii	"M_C_Lock\000"
 6085      4C6F636B 
 6085      00
 6086 0dd9 00000000 		.space	6
 6086      0000
 6087 0ddf 00       		.space	1
 6088 0de0 18       		.byte	24
 6089 0de1 000000   		.space	3
 6090 0de4 02000000 		.word	2
 6091 0de8 04       		.byte	4
 6092 0de9 000000   		.space	3
 6093 0dec 02000000 		.word	2
 6094 0df0 504F4C41 		.ascii	"POLAR\000"
 6094      5200
 6095 0df6 0000     		.space	2
 6096 0df8 0D205000 		.ascii	"\015 P\000"
 6097 0dfc 00000000 		.space	4
 6098 0e00 18       		.byte	24
 6099 0e01 000000   		.space	3
 6100 0e04 01000000 		.word	1
ARM GAS  /tmp/cc7Wa57o.s 			page 156


 6101 0e08 04       		.byte	4
 6102 0e09 000000   		.space	3
 6103 0e0c 01000000 		.word	1
 6104 0e10 52454354 		.ascii	"RECT\000"
 6104      00
 6105 0e15 000000   		.space	3
 6106 0e18 0D205200 		.ascii	"\015 R\000"
 6107 0e1c 00000000 		.space	4
 6108 0e20 0E       		.byte	14
 6109 0e21 000000   		.space	3
 6110 0e24 01000000 		.word	1
 6111 0e28 0E       		.byte	14
 6112 0e29 000000   		.space	3
 6113 0e2c 03000000 		.word	3
 6114 0e30 2B2F2D06 		.ascii	"+/-\006Im\000"
 6114      496D00
 6115 0e37 00       		.space	1
 6116 0e38 2B2F2D06 		.ascii	"+/-\006Re\000"
 6116      526500
 6117 0e3f 00       		.space	1
 6118 0e40 0D       		.byte	13
 6119 0e41 000000   		.space	3
 6120 0e44 02000000 		.word	2
 6121 0e48 00       		.byte	0
 6122 0e49 000000   		.space	3
 6123 0e4c 01000000 		.word	1
 6124 0e50 52651749 		.ascii	"Re\027Im\000"
 6124      6D00
 6125 0e56 0000     		.space	2
 6126 0e58 48595000 		.ascii	"HYP\000"
 6127 0e5c 00000000 		.space	4
 6128 0e60 2C       		.byte	44
 6129 0e61 000000   		.space	3
 6130 0e64 FFFFFFFF 		.word	-1
 6131 0e68 0F       		.byte	15
 6132 0e69 000000   		.space	3
 6133 0e6c 01000000 		.word	1
 6134 0e70 2D2D0D00 		.ascii	"--\015\000"
 6135 0e74 00000000 		.space	4
 6136 0e78 1106AF00 		.ascii	"\021\006\257\000"
 6137 0e7c 00000000 		.space	4
 6138 0e80 2D       		.byte	45
 6139 0e81 000000   		.space	3
 6140 0e84 FFFFFFFF 		.word	-1
 6141 0e88 0C       		.byte	12
 6142 0e89 000000   		.space	3
 6143 0e8c 01000000 		.word	1
 6144 0e90 43505800 		.ascii	"CPX\000"
 6145 0e94 00000000 		.space	4
 6146 0e98 1106434E 		.ascii	"\021\006CNST\000"
 6146      535400
 6147 0e9f 00       		.space	1
 6148 0ea0 4D5F436C 		.ascii	"M_Clear_C\000"
 6148      6561725F 
 6148      4300
 6149 0eaa 00000000 		.space	5
 6149      00
ARM GAS  /tmp/cc7Wa57o.s 			page 157


 6150 0eaf 00       		.space	1
 6151 0eb0 2E       		.byte	46
 6152 0eb1 000000   		.space	3
 6153 0eb4 FFFFFFFF 		.word	-1
 6154 0eb8 2E       		.byte	46
 6155 0eb9 000000   		.space	3
 6156 0ebc FFFFFFFF 		.word	-1
 6157 0ec0 00       		.ascii	"\000"
 6158 0ec1 00000000 		.space	7
 6158      000000
 6159 0ec8 00       		.ascii	"\000"
 6160 0ec9 00000000 		.space	7
 6160      000000
 6161 0ed0 2E       		.byte	46
 6162 0ed1 000000   		.space	3
 6163 0ed4 FFFFFFFF 		.word	-1
 6164 0ed8 2E       		.byte	46
 6165 0ed9 000000   		.space	3
 6166 0edc FFFFFFFF 		.word	-1
 6167 0ee0 00       		.ascii	"\000"
 6168 0ee1 00000000 		.space	7
 6168      000000
 6169 0ee8 00       		.ascii	"\000"
 6170 0ee9 00000000 		.space	7
 6170      000000
 6171 0ef0 10       		.byte	16
 6172 0ef1 000000   		.space	3
 6173 0ef4 03000000 		.word	3
 6174 0ef8 34       		.byte	52
 6175 0ef9 000000   		.space	3
 6176 0efc 74010000 		.word	372
 6177 0f00 434C7800 		.ascii	"CLx\000"
 6178 0f04 00000000 		.space	4
 6179 0f08 434C06A0 		.ascii	"CL\006\240\000"
 6179      00
 6180 0f0d 000000   		.space	3
 6181 0f10 34       		.byte	52
 6182 0f11 000000   		.space	3
 6183 0f14 40010000 		.word	320
 6184 0f18 2E       		.byte	46
 6185 0f19 000000   		.space	3
 6186 0f1c FFFFFFFF 		.word	-1
 6187 0f20 434C5374 		.ascii	"CLStk\000"
 6187      6B00
 6188 0f26 0000     		.space	2
 6189 0f28 00       		.ascii	"\000"
 6190 0f29 00000000 		.space	7
 6190      000000
 6191 0f30 2C       		.byte	44
 6192 0f31 000000   		.space	3
 6193 0f34 FFFFFFFF 		.word	-1
 6194 0f38 2E       		.byte	46
 6195 0f39 000000   		.space	3
 6196 0f3c FFFFFFFF 		.word	-1
 6197 0f40 2D2D0D00 		.ascii	"--\015\000"
 6198 0f44 00000000 		.space	4
 6199 0f48 00       		.ascii	"\000"
ARM GAS  /tmp/cc7Wa57o.s 			page 158


 6200 0f49 00000000 		.space	7
 6200      000000
 6201 0f50 2D       		.byte	45
 6202 0f51 000000   		.space	3
 6203 0f54 FFFFFFFF 		.word	-1
 6204 0f58 2E       		.byte	46
 6205 0f59 000000   		.space	3
 6206 0f5c FFFFFFFF 		.word	-1
 6207 0f60 43505800 		.ascii	"CPX\000"
 6208 0f64 00000000 		.space	4
 6209 0f68 00       		.ascii	"\000"
 6210 0f69 00000000 		.space	7
 6210      000000
 6211 0f70 4D5F5377 		.ascii	"M_Swap_C\000"
 6211      61705F43 
 6211      00
 6212 0f79 00000000 		.space	6
 6212      0000
 6213 0f7f 00       		.space	1
 6214 0f80 0D       		.byte	13
 6215 0f81 000000   		.space	3
 6216 0f84 01000000 		.word	1
 6217 0f88 2E       		.byte	46
 6218 0f89 000000   		.space	3
 6219 0f8c FFFFFFFF 		.word	-1
 6220 0f90 53686F77 		.ascii	"Show\016\000"
 6220      0E00
 6221 0f96 0000     		.space	2
 6222 0f98 00       		.ascii	"\000"
 6223 0f99 00000000 		.space	7
 6223      000000
 6224 0fa0 0D       		.byte	13
 6225 0fa1 000000   		.space	3
 6226 0fa4 02000000 		.word	2
 6227 0fa8 2E       		.byte	46
 6228 0fa9 000000   		.space	3
 6229 0fac FFFFFFFF 		.word	-1
 6230 0fb0 53686F77 		.ascii	"Show\015\000"
 6230      0D00
 6231 0fb6 0000     		.space	2
 6232 0fb8 00       		.ascii	"\000"
 6233 0fb9 00000000 		.space	7
 6233      000000
 6234 0fc0 0D       		.byte	13
 6235 0fc1 000000   		.space	3
 6236 0fc4 03000000 		.word	3
 6237 0fc8 2E       		.byte	46
 6238 0fc9 000000   		.space	3
 6239 0fcc FFFFFFFF 		.word	-1
 6240 0fd0 78173F00 		.ascii	"x\027?\000"
 6241 0fd4 00000000 		.space	4
 6242 0fd8 00       		.ascii	"\000"
 6243 0fd9 00000000 		.space	7
 6243      000000
 6244 0fe0 2E       		.byte	46
 6245 0fe1 000000   		.space	3
 6246 0fe4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc7Wa57o.s 			page 159


 6247 0fe8 2E       		.byte	46
 6248 0fe9 000000   		.space	3
 6249 0fec FFFFFFFF 		.word	-1
 6250 0ff0 00       		.ascii	"\000"
 6251 0ff1 00000000 		.space	7
 6251      000000
 6252 0ff8 00       		.ascii	"\000"
 6253 0ff9 00000000 		.space	7
 6253      000000
 6254 1000 2C       		.byte	44
 6255 1001 000000   		.space	3
 6256 1004 FFFFFFFF 		.word	-1
 6257 1008 2E       		.byte	46
 6258 1009 000000   		.space	3
 6259 100c FFFFFFFF 		.word	-1
 6260 1010 2D2D0D00 		.ascii	"--\015\000"
 6261 1014 00000000 		.space	4
 6262 1018 00       		.ascii	"\000"
 6263 1019 00000000 		.space	7
 6263      000000
 6264 1020 2D       		.byte	45
 6265 1021 000000   		.space	3
 6266 1024 FFFFFFFF 		.word	-1
 6267 1028 2E       		.byte	46
 6268 1029 000000   		.space	3
 6269 102c FFFFFFFF 		.word	-1
 6270 1030 43505800 		.ascii	"CPX\000"
 6271 1034 00000000 		.space	4
 6272 1038 00       		.ascii	"\000"
 6273 1039 00000000 		.space	7
 6273      000000
 6274 1040 4D5F4172 		.ascii	"M_Arrow_C\000"
 6274      726F775F 
 6274      4300
 6275 104a 00000000 		.space	5
 6275      00
 6276 104f 00       		.space	1
 6277 1050 2E       		.byte	46
 6278 1051 000000   		.space	3
 6279 1054 FFFFFFFF 		.word	-1
 6280 1058 06       		.byte	6
 6281 1059 000000   		.space	3
 6282 105c 02000000 		.word	2
 6283 1060 00       		.ascii	"\000"
 6284 1061 00000000 		.space	7
 6284      000000
 6285 1068 44454700 		.ascii	"DEG\000"
 6286 106c 00000000 		.space	4
 6287 1070 2E       		.byte	46
 6288 1071 000000   		.space	3
 6289 1074 FFFFFFFF 		.word	-1
 6290 1078 07       		.byte	7
 6291 1079 000000   		.space	3
 6292 107c 02000000 		.word	2
 6293 1080 00       		.ascii	"\000"
 6294 1081 00000000 		.space	7
 6294      000000
ARM GAS  /tmp/cc7Wa57o.s 			page 160


 6295 1088 52414400 		.ascii	"RAD\000"
 6296 108c 00000000 		.space	4
 6297 1090 2E       		.byte	46
 6298 1091 000000   		.space	3
 6299 1094 FFFFFFFF 		.word	-1
 6300 1098 08       		.byte	8
 6301 1099 000000   		.space	3
 6302 109c 02000000 		.word	2
 6303 10a0 00       		.ascii	"\000"
 6304 10a1 00000000 		.space	7
 6304      000000
 6305 10a8 47726164 		.ascii	"Grad\000"
 6305      00
 6306 10ad 000000   		.space	3
 6307 10b0 2E       		.byte	46
 6308 10b1 000000   		.space	3
 6309 10b4 FFFFFFFF 		.word	-1
 6310 10b8 06       		.byte	6
 6311 10b9 000000   		.space	3
 6312 10bc 01000000 		.word	1
 6313 10c0 00       		.ascii	"\000"
 6314 10c1 00000000 		.space	7
 6314      000000
 6315 10c8 0D484D53 		.ascii	"\015HMS\000"
 6315      00
 6316 10cd 000000   		.space	3
 6317 10d0 2C       		.byte	44
 6318 10d1 000000   		.space	3
 6319 10d4 FFFFFFFF 		.word	-1
 6320 10d8 07       		.byte	7
 6321 10d9 000000   		.space	3
 6322 10dc 01000000 		.word	1
 6323 10e0 2D2D0D00 		.ascii	"--\015\000"
 6324 10e4 00000000 		.space	4
 6325 10e8 484D530D 		.ascii	"HMS\015\000"
 6325      00
 6326 10ed 000000   		.space	3
 6327 10f0 2D       		.byte	45
 6328 10f1 000000   		.space	3
 6329 10f4 FFFFFFFF 		.word	-1
 6330 10f8 2E       		.byte	46
 6331 10f9 000000   		.space	3
 6332 10fc FFFFFFFF 		.word	-1
 6333 1100 43505800 		.ascii	"CPX\000"
 6334 1104 00000000 		.space	4
 6335 1108 00       		.ascii	"\000"
 6336 1109 00000000 		.space	7
 6336      000000
 6337 1110 4D5F5072 		.ascii	"M_Prob_C\000"
 6337      6F625F43 
 6337      00
 6338 1119 00000000 		.space	6
 6338      0000
 6339 111f 00       		.space	1
 6340 1120 18       		.byte	24
 6341 1121 000000   		.space	3
 6342 1124 03000000 		.word	3
ARM GAS  /tmp/cc7Wa57o.s 			page 161


 6343 1128 34       		.byte	52
 6344 1129 000000   		.space	3
 6345 112c 31050000 		.word	1329
 6346 1130 14062100 		.ascii	"\024\006!\000"
 6347 1134 00000000 		.space	4
 6348 1138 14064C6E 		.ascii	"\024\006Ln\006\202\000"
 6348      068200
 6349 113f 00       		.space	1
 6350 1140 34       		.byte	52
 6351 1141 000000   		.space	3
 6352 1144 12060000 		.word	1554
 6353 1148 2E       		.byte	46
 6354 1149 000000   		.space	3
 6355 114c FFFFFFFF 		.word	-1
 6356 1150 14064379 		.ascii	"\024\006Cy,x\000"
 6356      2C7800
 6357 1157 00       		.space	1
 6358 1158 00       		.ascii	"\000"
 6359 1159 00000000 		.space	7
 6359      000000
 6360 1160 34       		.byte	52
 6361 1161 000000   		.space	3
 6362 1164 13060000 		.word	1555
 6363 1168 2E       		.byte	46
 6364 1169 000000   		.space	3
 6365 116c FFFFFFFF 		.word	-1
 6366 1170 14065079 		.ascii	"\024\006Py,x\000"
 6366      2C7800
 6367 1177 00       		.space	1
 6368 1178 00       		.ascii	"\000"
 6369 1179 00000000 		.space	7
 6369      000000
 6370 1180 2E       		.byte	46
 6371 1181 000000   		.space	3
 6372 1184 FFFFFFFF 		.word	-1
 6373 1188 2E       		.byte	46
 6374 1189 000000   		.space	3
 6375 118c FFFFFFFF 		.word	-1
 6376 1190 00       		.ascii	"\000"
 6377 1191 00000000 		.space	7
 6377      000000
 6378 1198 00       		.ascii	"\000"
 6379 1199 00000000 		.space	7
 6379      000000
 6380 11a0 2C       		.byte	44
 6381 11a1 000000   		.space	3
 6382 11a4 FFFFFFFF 		.word	-1
 6383 11a8 2E       		.byte	46
 6384 11a9 000000   		.space	3
 6385 11ac FFFFFFFF 		.word	-1
 6386 11b0 2D2D0D00 		.ascii	"--\015\000"
 6387 11b4 00000000 		.space	4
 6388 11b8 00       		.ascii	"\000"
 6389 11b9 00000000 		.space	7
 6389      000000
 6390 11c0 2D       		.byte	45
 6391 11c1 000000   		.space	3
ARM GAS  /tmp/cc7Wa57o.s 			page 162


 6392 11c4 FFFFFFFF 		.word	-1
 6393 11c8 2E       		.byte	46
 6394 11c9 000000   		.space	3
 6395 11cc FFFFFFFF 		.word	-1
 6396 11d0 43505800 		.ascii	"CPX\000"
 6397 11d4 00000000 		.space	4
 6398 11d8 00       		.ascii	"\000"
 6399 11d9 00000000 		.space	7
 6399      000000
 6400 11e0 4D5F426C 		.ascii	"M_Blank2_C\000"
 6400      616E6B32 
 6400      5F4300
 6401 11eb 00000000 		.space	4
 6402 11ef 00       		.space	1
 6403 11f0 00       		.byte	0
 6404 11f1 000000   		.space	3
 6405 11f4 01000000 		.word	1
 6406 11f8 2E       		.byte	46
 6407 11f9 000000   		.space	3
 6408 11fc FFFFFFFF 		.word	-1
 6409 1200 48595000 		.ascii	"HYP\000"
 6410 1204 00000000 		.space	4
 6411 1208 00       		.ascii	"\000"
 6412 1209 00000000 		.space	7
 6412      000000
 6413 1210 16       		.byte	22
 6414 1211 000000   		.space	3
 6415 1214 01000000 		.word	1
 6416 1218 2E       		.byte	46
 6417 1219 000000   		.space	3
 6418 121c FFFFFFFF 		.word	-1
 6419 1220 312F5800 		.ascii	"1/X\000"
 6420 1224 00000000 		.space	4
 6421 1228 00       		.ascii	"\000"
 6422 1229 00000000 		.space	7
 6422      000000
 6423 1230 1C       		.byte	28
 6424 1231 000000   		.space	3
 6425 1234 01000000 		.word	1
 6426 1238 2E       		.byte	46
 6427 1239 000000   		.space	3
 6428 123c FFFFFFFF 		.word	-1
 6429 1240 035800   		.ascii	"\003X\000"
 6430 1243 00000000 		.space	5
 6430      00
 6431 1248 00       		.ascii	"\000"
 6432 1249 00000000 		.space	7
 6432      000000
 6433 1250 13       		.byte	19
 6434 1251 000000   		.space	3
 6435 1254 02000000 		.word	2
 6436 1258 2E       		.byte	46
 6437 1259 000000   		.space	3
 6438 125c FFFFFFFF 		.word	-1
 6439 1260 4C4F4700 		.ascii	"LOG\000"
 6440 1264 00000000 		.space	4
 6441 1268 00       		.ascii	"\000"
ARM GAS  /tmp/cc7Wa57o.s 			page 163


 6442 1269 00000000 		.space	7
 6442      000000
 6443 1270 2C       		.byte	44
 6444 1271 000000   		.space	3
 6445 1274 FFFFFFFF 		.word	-1
 6446 1278 2E       		.byte	46
 6447 1279 000000   		.space	3
 6448 127c FFFFFFFF 		.word	-1
 6449 1280 2D2D0D00 		.ascii	"--\015\000"
 6450 1284 00000000 		.space	4
 6451 1288 00       		.ascii	"\000"
 6452 1289 00000000 		.space	7
 6452      000000
 6453 1290 2D       		.byte	45
 6454 1291 000000   		.space	3
 6455 1294 FFFFFFFF 		.word	-1
 6456 1298 2E       		.byte	46
 6457 1299 000000   		.space	3
 6458 129c FFFFFFFF 		.word	-1
 6459 12a0 43505800 		.ascii	"CPX\000"
 6460 12a4 00000000 		.space	4
 6461 12a8 00       		.ascii	"\000"
 6462 12a9 00000000 		.space	7
 6462      000000
 6463 12b0 4D5F4D69 		.ascii	"M_Misc_C\000"
 6463      73635F43 
 6463      00
 6464 12b9 00000000 		.space	6
 6464      0000
 6465 12bf 00       		.space	1
 6466 12c0 25       		.byte	37
 6467 12c1 000000   		.space	3
 6468 12c4 01000000 		.word	1
 6469 12c8 14       		.byte	20
 6470 12c9 000000   		.space	3
 6471 12cc 01000000 		.word	1
 6472 12d0 7C7A7C00 		.ascii	"|z|\000"
 6473 12d4 00000000 		.space	4
 6474 12d8 14329C00 		.ascii	"\0242\234\000"
 6475 12dc 00000000 		.space	4
 6476 12e0 25       		.byte	37
 6477 12e1 000000   		.space	3
 6478 12e4 02000000 		.word	2
 6479 12e8 14       		.byte	20
 6480 12e9 000000   		.space	3
 6481 12ec 02000000 		.word	2
 6482 12f0 524E4400 		.ascii	"RND\000"
 6483 12f4 00000000 		.space	4
 6484 12f8 144C6F67 		.ascii	"\024Log\272\000"
 6484      BA00
 6485 12fe 0000     		.space	2
 6486 1300 26       		.byte	38
 6487 1301 000000   		.space	3
 6488 1304 01000000 		.word	1
 6489 1308 15       		.byte	21
 6490 1309 000000   		.space	3
 6491 130c 02000000 		.word	2
ARM GAS  /tmp/cc7Wa57o.s 			page 164


 6492 1310 300D5265 		.ascii	"0\015Re\000"
 6492      00
 6493 1315 000000   		.space	3
 6494 1318 144C6F67 		.ascii	"\024Log\213\000"
 6494      8B00
 6495 131e 0000     		.space	2
 6496 1320 26       		.byte	38
 6497 1321 000000   		.space	3
 6498 1324 02000000 		.word	2
 6499 1328 16       		.byte	22
 6500 1329 000000   		.space	3
 6501 132c 02000000 		.word	2
 6502 1330 300D496D 		.ascii	"0\015Im\000"
 6502      00
 6503 1335 000000   		.space	3
 6504 1338 147C7C65 		.ascii	"\024||el\000"
 6504      6C00
 6505 133e 0000     		.space	2
 6506 1340 2C       		.byte	44
 6507 1341 000000   		.space	3
 6508 1344 FFFFFFFF 		.word	-1
 6509 1348 1C       		.byte	28
 6510 1349 000000   		.space	3
 6511 134c 03000000 		.word	3
 6512 1350 2D2D0D00 		.ascii	"--\015\000"
 6513 1354 00000000 		.space	4
 6514 1358 142E1C00 		.ascii	"\024.\034\000"
 6515 135c 00000000 		.space	4
 6516 1360 2D       		.byte	45
 6517 1361 000000   		.space	3
 6518 1364 FFFFFFFF 		.word	-1
 6519 1368 16       		.byte	22
 6520 1369 000000   		.space	3
 6521 136c 03000000 		.word	3
 6522 1370 43505800 		.ascii	"CPX\000"
 6523 1374 00000000 		.space	4
 6524 1378 142E2F00 		.ascii	"\024./\000"
 6525 137c 00000000 		.space	4
 6526 1380 4D5F5573 		.ascii	"M_Usermenu\000"
 6526      65726D65 
 6526      6E7500
 6527 138b 00000000 		.space	4
 6528 138f 00       		.space	1
 6529 1390 34       		.byte	52
 6530 1391 000000   		.space	3
 6531 1394 00FB0000 		.word	64256
 6532 1398 2E       		.byte	46
 6533 1399 000000   		.space	3
 6534 139c FFFFFFFF 		.word	-1
 6535 13a0 554D454E 		.ascii	"UMEN\000"
 6535      00
 6536 13a5 000000   		.space	3
 6537 13a8 00       		.ascii	"\000"
 6538 13a9 00000000 		.space	7
 6538      000000
 6539 13b0 34       		.byte	52
 6540 13b1 000000   		.space	3
ARM GAS  /tmp/cc7Wa57o.s 			page 165


 6541 13b4 55FB4D31 		.word	827194197
 6542 13b8 34       		.byte	52
 6543 13b9 000000   		.space	3
 6544 13bc 55FB4D34 		.word	877525845
 6545 13c0 554D3100 		.ascii	"UM1\000"
 6546 13c4 00000000 		.space	4
 6547 13c8 554D3400 		.ascii	"UM4\000"
 6548 13cc 00000000 		.space	4
 6549 13d0 34       		.byte	52
 6550 13d1 000000   		.space	3
 6551 13d4 55FB4D32 		.word	843971413
 6552 13d8 34       		.byte	52
 6553 13d9 000000   		.space	3
 6554 13dc 55FB4D35 		.word	894303061
 6555 13e0 554D3200 		.ascii	"UM2\000"
 6556 13e4 00000000 		.space	4
 6557 13e8 554D3500 		.ascii	"UM5\000"
 6558 13ec 00000000 		.space	4
 6559 13f0 34       		.byte	52
 6560 13f1 000000   		.space	3
 6561 13f4 55FB4D33 		.word	860748629
 6562 13f8 34       		.byte	52
 6563 13f9 000000   		.space	3
 6564 13fc 55FB4D36 		.word	911080277
 6565 1400 554D3300 		.ascii	"UM3\000"
 6566 1404 00000000 		.space	4
 6567 1408 554D3600 		.ascii	"UM6\000"
 6568 140c 00000000 		.space	4
 6569 1410 2C       		.byte	44
 6570 1411 000000   		.space	3
 6571 1414 FFFFFFFF 		.word	-1
 6572 1418 1C       		.byte	28
 6573 1419 000000   		.space	3
 6574 141c 03000000 		.word	3
 6575 1420 2D2D0D00 		.ascii	"--\015\000"
 6576 1424 00000000 		.space	4
 6577 1428 00       		.ascii	"\000"
 6578 1429 00000000 		.space	7
 6578      000000
 6579 1430 2D       		.byte	45
 6580 1431 000000   		.space	3
 6581 1434 FFFFFFFF 		.word	-1
 6582 1438 16       		.byte	22
 6583 1439 000000   		.space	3
 6584 143c 03000000 		.word	3
 6585 1440 43505800 		.ascii	"CPX\000"
 6586 1444 00000000 		.space	4
 6587 1448 00       		.ascii	"\000"
 6588 1449 00000000 		.space	7
 6588      000000
 6589 1450 4D5F5072 		.ascii	"M_Print\000"
 6589      696E7400 
 6590 1458 00000000 		.space	7
 6590      000000
 6591 145f 00       		.space	1
 6592 1460 34       		.byte	52
 6593 1461 000000   		.space	3
ARM GAS  /tmp/cc7Wa57o.s 			page 166


 6594 1464 D9010000 		.word	473
 6595 1468 34       		.byte	52
 6596 1469 000000   		.space	3
 6597 146c DA010000 		.word	474
 6598 1470 92064F6E 		.ascii	"\222\006On\000"
 6598      00
 6599 1475 000000   		.space	3
 6600 1478 92064F66 		.ascii	"\222\006Off\000"
 6600      6600
 6601 147e 0000     		.space	2
 6602 1480 34       		.byte	52
 6603 1481 000000   		.space	3
 6604 1484 00AF0000 		.word	44800
 6605 1488 34       		.byte	52
 6606 1489 000000   		.space	3
 6607 148c 00B60000 		.word	46592
 6608 1490 92064D6F 		.ascii	"\222\006Mode\000"
 6608      646500
 6609 1497 00       		.space	1
 6610 1498 92064462 		.ascii	"\222\006DbSp\000"
 6610      537000
 6611 149f 00       		.space	1
 6612 14a0 34       		.byte	52
 6613 14a1 000000   		.space	3
 6614 14a4 BC010000 		.word	444
 6615 14a8 34       		.byte	52
 6616 14a9 000000   		.space	3
 6617 14ac BD010000 		.word	445
 6618 14b0 92065072 		.ascii	"\222\006Prog\000"
 6618      6F6700
 6619 14b7 00       		.space	1
 6620 14b8 92065265 		.ascii	"\222\006Regs\000"
 6620      677300
 6621 14bf 00       		.space	1
 6622 14c0 34       		.byte	52
 6623 14c1 000000   		.space	3
 6624 14c4 BE010000 		.word	446
 6625 14c8 34       		.byte	52
 6626 14c9 000000   		.space	3
 6627 14cc BF010000 		.word	447
 6628 14d0 92065374 		.ascii	"\222\006Stk\000"
 6628      6B00
 6629 14d6 0000     		.space	2
 6630 14d8 92069100 		.ascii	"\222\006\221\000"
 6631 14dc 00000000 		.space	4
 6632 14e0 2C       		.byte	44
 6633 14e1 000000   		.space	3
 6634 14e4 FFFFFFFF 		.word	-1
 6635 14e8 34       		.byte	52
 6636 14e9 000000   		.space	3
 6637 14ec C0010000 		.word	448
 6638 14f0 2D2D0D00 		.ascii	"--\015\000"
 6639 14f4 00000000 		.space	4
 6640 14f8 9206A000 		.ascii	"\222\006\240\000"
 6641 14fc 00000000 		.space	4
 6642 1500 2D       		.byte	45
 6643 1501 000000   		.space	3
ARM GAS  /tmp/cc7Wa57o.s 			page 167


 6644 1504 FFFFFFFF 		.word	-1
 6645 1508 34       		.byte	52
 6646 1509 000000   		.space	3
 6647 150c C3010000 		.word	451
 6648 1510 43505800 		.ascii	"CPX\000"
 6649 1514 00000000 		.space	4
 6650 1518 92064144 		.ascii	"\222\006ADV\000"
 6650      5600
 6651 151e 0000     		.space	2
 6652              		.section	.rodata.mapping_alpha.11141,"a"
 6653              		.align	2
 6654              		.set	.LANCHOR16,. + 0
 6657              	mapping_alpha.11141:
 6658 0000 63       		.byte	99
 6659 0001 000000   		.space	3
 6660 0004 FFFFFFFF 		.word	-1
 6661 0008 00       		.byte	0
 6662 0009 000000   		.space	3
 6663 000c FFFFFFFF 		.word	-1
 6664 0010 01       		.byte	1
 6665 0011 000000   		.space	3
 6666 0014 FFFFFFFF 		.word	-1
 6667 0018 02       		.byte	2
 6668 0019 000000   		.space	3
 6669 001c FFFFFFFF 		.word	-1
 6670 0020 03       		.byte	3
 6671 0021 000000   		.space	3
 6672 0024 FFFFFFFF 		.word	-1
 6673 0028 04       		.byte	4
 6674 0029 000000   		.space	3
 6675 002c FFFFFFFF 		.word	-1
 6676 0030 05       		.byte	5
 6677 0031 000000   		.space	3
 6678 0034 FFFFFFFF 		.word	-1
 6679 0038 06       		.byte	6
 6680 0039 000000   		.space	3
 6681 003c FFFFFFFF 		.word	-1
 6682 0040 07       		.byte	7
 6683 0041 000000   		.space	3
 6684 0044 FFFFFFFF 		.word	-1
 6685 0048 08       		.byte	8
 6686 0049 000000   		.space	3
 6687 004c FFFFFFFF 		.word	-1
 6688 0050 09       		.byte	9
 6689 0051 000000   		.space	3
 6690 0054 FFFFFFFF 		.word	-1
 6691 0058 0A       		.byte	10
 6692 0059 000000   		.space	3
 6693 005c FFFFFFFF 		.word	-1
 6694 0060 0B       		.byte	11
 6695 0061 000000   		.space	3
 6696 0064 FFFFFFFF 		.word	-1
 6697 0068 0C       		.byte	12
 6698 0069 000000   		.space	3
 6699 006c FFFFFFFF 		.word	-1
 6700 0070 0D       		.byte	13
 6701 0071 000000   		.space	3
ARM GAS  /tmp/cc7Wa57o.s 			page 168


 6702 0074 FFFFFFFF 		.word	-1
 6703 0078 0E       		.byte	14
 6704 0079 000000   		.space	3
 6705 007c FFFFFFFF 		.word	-1
 6706 0080 0F       		.byte	15
 6707 0081 000000   		.space	3
 6708 0084 FFFFFFFF 		.word	-1
 6709 0088 10       		.byte	16
 6710 0089 000000   		.space	3
 6711 008c FFFFFFFF 		.word	-1
 6712 0090 12       		.byte	18
 6713 0091 000000   		.space	3
 6714 0094 FFFFFFFF 		.word	-1
 6715 0098 13       		.byte	19
 6716 0099 000000   		.space	3
 6717 009c FFFFFFFF 		.word	-1
 6718 00a0 14       		.byte	20
 6719 00a1 000000   		.space	3
 6720 00a4 FFFFFFFF 		.word	-1
 6721 00a8 15       		.byte	21
 6722 00a9 000000   		.space	3
 6723 00ac FFFFFFFF 		.word	-1
 6724 00b0 16       		.byte	22
 6725 00b1 000000   		.space	3
 6726 00b4 FFFFFFFF 		.word	-1
 6727 00b8 18       		.byte	24
 6728 00b9 000000   		.space	3
 6729 00bc FFFFFFFF 		.word	-1
 6730 00c0 19       		.byte	25
 6731 00c1 000000   		.space	3
 6732 00c4 FFFFFFFF 		.word	-1
 6733 00c8 1A       		.byte	26
 6734 00c9 000000   		.space	3
 6735 00cc FFFFFFFF 		.word	-1
 6736 00d0 1B       		.byte	27
 6737 00d1 000000   		.space	3
 6738 00d4 FFFFFFFF 		.word	-1
 6739 00d8 1C       		.byte	28
 6740 00d9 000000   		.space	3
 6741 00dc FFFFFFFF 		.word	-1
 6742 00e0 1E       		.byte	30
 6743 00e1 000000   		.space	3
 6744 00e4 FFFFFFFF 		.word	-1
 6745 00e8 1F       		.byte	31
 6746 00e9 000000   		.space	3
 6747 00ec FFFFFFFF 		.word	-1
 6748 00f0 20       		.byte	32
 6749 00f1 000000   		.space	3
 6750 00f4 FFFFFFFF 		.word	-1
 6751 00f8 21       		.byte	33
 6752 00f9 000000   		.space	3
 6753 00fc FFFFFFFF 		.word	-1
 6754 0100 22       		.byte	34
 6755 0101 000000   		.space	3
 6756 0104 FFFFFFFF 		.word	-1
 6757 0108 24       		.byte	36
 6758 0109 000000   		.space	3
ARM GAS  /tmp/cc7Wa57o.s 			page 169


 6759 010c FFFFFFFF 		.word	-1
 6760 0110 25       		.byte	37
 6761 0111 000000   		.space	3
 6762 0114 FFFFFFFF 		.word	-1
 6763 0118 26       		.byte	38
 6764 0119 000000   		.space	3
 6765 011c FFFFFFFF 		.word	-1
 6766 0120 27       		.byte	39
 6767 0121 000000   		.space	3
 6768 0124 FFFFFFFF 		.word	-1
 6769 0128 28       		.byte	40
 6770 0129 000000   		.space	3
 6771 012c FFFFFFFF 		.word	-1
 6772 0130 2E       		.byte	46
 6773 0131 000000   		.space	3
 6774 0134 FFFFFFFF 		.word	-1
 6775 0138 2E       		.byte	46
 6776 0139 000000   		.space	3
 6777 013c FFFFFFFF 		.word	-1
 6778 0140 2E       		.byte	46
 6779 0141 000000   		.space	3
 6780 0144 FFFFFFFF 		.word	-1
 6781 0148 2E       		.byte	46
 6782 0149 000000   		.space	3
 6783 014c FFFFFFFF 		.word	-1
 6784 0150 2C       		.byte	44
 6785 0151 000000   		.space	3
 6786 0154 FFFFFFFF 		.word	-1
 6787 0158 2D       		.byte	45
 6788 0159 000000   		.space	3
 6789 015c FFFFFFFF 		.word	-1
 6790 0160 2E       		.byte	46
 6791 0161 000000   		.space	3
 6792 0164 FFFFFFFF 		.word	-1
 6793 0168 2E       		.byte	46
 6794 0169 000000   		.space	3
 6795 016c FFFFFFFF 		.word	-1
 6796 0170 2E       		.byte	46
 6797 0171 000000   		.space	3
 6798 0174 FFFFFFFF 		.word	-1
 6799              		.section	.rodata.mapping_fshift.11139,"a"
 6800              		.align	2
 6801              		.set	.LANCHOR14,. + 0
 6804              	mapping_fshift.11139:
 6805 0000 63       		.byte	99
 6806 0001 000000   		.space	3
 6807 0004 FFFFFFFF 		.word	-1
 6808 0008 22       		.byte	34
 6809 0009 000000   		.space	3
 6810 000c 03000000 		.word	3
 6811 0010 15       		.byte	21
 6812 0011 000000   		.space	3
 6813 0014 01000000 		.word	1
 6814 0018 1C       		.byte	28
 6815 0019 000000   		.space	3
 6816 001c 02000000 		.word	2
 6817 0020 13       		.byte	19
ARM GAS  /tmp/cc7Wa57o.s 			page 170


 6818 0021 000000   		.space	3
 6819 0024 01000000 		.word	1
 6820 0028 12       		.byte	18
 6821 0029 000000   		.space	3
 6822 002c 01000000 		.word	1
 6823 0030 12       		.byte	18
 6824 0031 000000   		.space	3
 6825 0034 03000000 		.word	3
 6826 0038 31       		.byte	49
 6827 0039 000000   		.space	3
 6828 003c 0F000000 		.word	15
 6829 0040 22       		.byte	34
 6830 0041 000000   		.space	3
 6831 0044 01000000 		.word	1
 6832 0048 0F       		.byte	15
 6833 0049 000000   		.space	3
 6834 004c 03000000 		.word	3
 6835 0050 01       		.byte	1
 6836 0051 000000   		.space	3
 6837 0054 02000000 		.word	2
 6838 0058 02       		.byte	2
 6839 0059 000000   		.space	3
 6840 005c 02000000 		.word	2
 6841 0060 03       		.byte	3
 6842 0061 000000   		.space	3
 6843 0064 02000000 		.word	2
 6844 0068 0C       		.byte	12
 6845 0069 000000   		.space	3
 6846 006c 01000000 		.word	1
 6847 0070 34       		.byte	52
 6848 0071 000000   		.space	3
 6849 0074 6C2A0000 		.word	10860
 6850 0078 2F       		.byte	47
 6851 0079 000000   		.space	3
 6852 007c 04000000 		.word	4
 6853 0080 2F       		.byte	47
 6854 0081 000000   		.space	3
 6855 0084 02000000 		.word	2
 6856 0088 2F       		.byte	47
 6857 0089 000000   		.space	3
 6858 008c 01000000 		.word	1
 6859 0090 18       		.byte	24
 6860 0091 000000   		.space	3
 6861 0094 00000000 		.word	0
 6862 0098 20       		.byte	32
 6863 0099 000000   		.space	3
 6864 009c 01000000 		.word	1
 6865 00a0 2F       		.byte	47
 6866 00a1 000000   		.space	3
 6867 00a4 0E000000 		.word	14
 6868 00a8 1C       		.byte	28
 6869 00a9 000000   		.space	3
 6870 00ac 03000000 		.word	3
 6871 00b0 2F       		.byte	47
 6872 00b1 000000   		.space	3
 6873 00b4 0C000000 		.word	12
 6874 00b8 1E       		.byte	30
ARM GAS  /tmp/cc7Wa57o.s 			page 171


 6875 00b9 000000   		.space	3
 6876 00bc 00000000 		.word	0
 6877 00c0 2F       		.byte	47
 6878 00c1 000000   		.space	3
 6879 00c4 03000000 		.word	3
 6880 00c8 04       		.byte	4
 6881 00c9 000000   		.space	3
 6882 00cc 03000000 		.word	3
 6883 00d0 2F       		.byte	47
 6884 00d1 000000   		.space	3
 6885 00d4 0A000000 		.word	10
 6886 00d8 2F       		.byte	47
 6887 00d9 000000   		.space	3
 6888 00dc 0B000000 		.word	11
 6889 00e0 2A       		.byte	42
 6890 00e1 000000   		.space	3
 6891 00e4 00000000 		.word	0
 6892 00e8 31       		.byte	49
 6893 00e9 000000   		.space	3
 6894 00ec 0D000000 		.word	13
 6895 00f0 2F       		.byte	47
 6896 00f1 000000   		.space	3
 6897 00f4 63000000 		.word	99
 6898 00f8 20       		.byte	32
 6899 00f9 000000   		.space	3
 6900 00fc 03000000 		.word	3
 6901 0100 2F       		.byte	47
 6902 0101 000000   		.space	3
 6903 0104 19000000 		.word	25
 6904 0108 24       		.byte	36
 6905 0109 000000   		.space	3
 6906 010c 03000000 		.word	3
 6907 0110 2F       		.byte	47
 6908 0111 000000   		.space	3
 6909 0114 08000000 		.word	8
 6910 0118 0D       		.byte	13
 6911 0119 000000   		.space	3
 6912 011c 01000000 		.word	1
 6913 0120 27       		.byte	39
 6914 0121 000000   		.space	3
 6915 0124 03000000 		.word	3
 6916 0128 06       		.byte	6
 6917 0129 000000   		.space	3
 6918 012c 03000000 		.word	3
 6919 0130 2E       		.byte	46
 6920 0131 000000   		.space	3
 6921 0134 00000000 		.word	0
 6922 0138 2E       		.byte	46
 6923 0139 000000   		.space	3
 6924 013c 00000000 		.word	0
 6925 0140 2E       		.byte	46
 6926 0141 000000   		.space	3
 6927 0144 00000000 		.word	0
 6928 0148 2E       		.byte	46
 6929 0149 000000   		.space	3
 6930 014c 00000000 		.word	0
 6931 0150 2E       		.byte	46
ARM GAS  /tmp/cc7Wa57o.s 			page 172


 6932 0151 000000   		.space	3
 6933 0154 00000000 		.word	0
 6934 0158 2E       		.byte	46
 6935 0159 000000   		.space	3
 6936 015c 00000000 		.word	0
 6937 0160 2E       		.byte	46
 6938 0161 000000   		.space	3
 6939 0164 00000000 		.word	0
 6940 0168 2F       		.byte	47
 6941 0169 000000   		.space	3
 6942 016c FFFFFFFF 		.word	-1
 6943 0170 2F       		.byte	47
 6944 0171 000000   		.space	3
 6945 0174 05000000 		.word	5
 6946              		.section	.rodata.mapping_gshift.11140,"a"
 6947              		.align	2
 6948              		.set	.LANCHOR17,. + 0
 6951              	mapping_gshift.11140:
 6952 0000 63       		.byte	99
 6953 0001 000000   		.space	3
 6954 0004 FFFFFFFF 		.word	-1
 6955 0008 28       		.byte	40
 6956 0009 000000   		.space	3
 6957 000c 03000000 		.word	3
 6958 0010 16       		.byte	22
 6959 0011 000000   		.space	3
 6960 0014 01000000 		.word	1
 6961 0018 1C       		.byte	28
 6962 0019 000000   		.space	3
 6963 001c 01000000 		.word	1
 6964 0020 13       		.byte	19
 6965 0021 000000   		.space	3
 6966 0024 02000000 		.word	2
 6967 0028 2E       		.byte	46
 6968 0029 000000   		.space	3
 6969 002c 00000000 		.word	0
 6970 0030 2E       		.byte	46
 6971 0031 000000   		.space	3
 6972 0034 00000000 		.word	0
 6973 0038 2E       		.byte	46
 6974 0039 000000   		.space	3
 6975 003c 00000000 		.word	0
 6976 0040 07       		.byte	7
 6977 0041 000000   		.space	3
 6978 0044 03000000 		.word	3
 6979 0048 08       		.byte	8
 6980 0049 000000   		.space	3
 6981 004c 03000000 		.word	3
 6982 0050 2F       		.byte	47
 6983 0051 000000   		.space	3
 6984 0054 04000000 		.word	4
 6985 0058 2F       		.byte	47
 6986 0059 000000   		.space	3
 6987 005c 04000000 		.word	4
 6988 0060 2F       		.byte	47
 6989 0061 000000   		.space	3
 6990 0064 04000000 		.word	4
ARM GAS  /tmp/cc7Wa57o.s 			page 173


 6991 0068 0C       		.byte	12
 6992 0069 000000   		.space	3
 6993 006c 02000000 		.word	2
 6994 0070 2F       		.byte	47
 6995 0071 000000   		.space	3
 6996 0074 06000000 		.word	6
 6997 0078 05       		.byte	5
 6998 0079 000000   		.space	3
 6999 007c 03000000 		.word	3
 7000 0080 2E       		.byte	46
 7001 0081 000000   		.space	3
 7002 0084 00000000 		.word	0
 7003 0088 2E       		.byte	46
 7004 0089 000000   		.space	3
 7005 008c 00000000 		.word	0
 7006 0090 2E       		.byte	46
 7007 0091 000000   		.space	3
 7008 0094 00000000 		.word	0
 7009 0098 2E       		.byte	46
 7010 0099 000000   		.space	3
 7011 009c 00000000 		.word	0
 7012 00a0 2E       		.byte	46
 7013 00a1 000000   		.space	3
 7014 00a4 00000000 		.word	0
 7015 00a8 1B       		.byte	27
 7016 00a9 000000   		.space	3
 7017 00ac 03000000 		.word	3
 7018 00b0 1A       		.byte	26
 7019 00b1 000000   		.space	3
 7020 00b4 03000000 		.word	3
 7021 00b8 2E       		.byte	46
 7022 00b9 000000   		.space	3
 7023 00bc 00000000 		.word	0
 7024 00c0 2E       		.byte	46
 7025 00c1 000000   		.space	3
 7026 00c4 00000000 		.word	0
 7027 00c8 0C       		.byte	12
 7028 00c9 000000   		.space	3
 7029 00cc 03000000 		.word	3
 7030 00d0 1F       		.byte	31
 7031 00d1 000000   		.space	3
 7032 00d4 03000000 		.word	3
 7033 00d8 19       		.byte	25
 7034 00d9 000000   		.space	3
 7035 00dc 03000000 		.word	3
 7036 00e0 2A       		.byte	42
 7037 00e1 000000   		.space	3
 7038 00e4 FFFFFFFF 		.word	-1
 7039 00e8 2E       		.byte	46
 7040 00e9 000000   		.space	3
 7041 00ec 00000000 		.word	0
 7042 00f0 2F       		.byte	47
 7043 00f1 000000   		.space	3
 7044 00f4 18000000 		.word	24
 7045 00f8 21       		.byte	33
 7046 00f9 000000   		.space	3
 7047 00fc 03000000 		.word	3
ARM GAS  /tmp/cc7Wa57o.s 			page 174


 7048 0100 2E       		.byte	46
 7049 0101 000000   		.space	3
 7050 0104 00000000 		.word	0
 7051 0108 24       		.byte	36
 7052 0109 000000   		.space	3
 7053 010c 02000000 		.word	2
 7054 0110 2F       		.byte	47
 7055 0111 000000   		.space	3
 7056 0114 0D000000 		.word	13
 7057 0118 2E       		.byte	46
 7058 0119 000000   		.space	3
 7059 011c 00000000 		.word	0
 7060 0120 2F       		.byte	47
 7061 0121 000000   		.space	3
 7062 0124 07000000 		.word	7
 7063 0128 1E       		.byte	30
 7064 0129 000000   		.space	3
 7065 012c 03000000 		.word	3
 7066 0130 2E       		.byte	46
 7067 0131 000000   		.space	3
 7068 0134 00000000 		.word	0
 7069 0138 2E       		.byte	46
 7070 0139 000000   		.space	3
 7071 013c 00000000 		.word	0
 7072 0140 2E       		.byte	46
 7073 0141 000000   		.space	3
 7074 0144 00000000 		.word	0
 7075 0148 2E       		.byte	46
 7076 0149 000000   		.space	3
 7077 014c 00000000 		.word	0
 7078 0150 2E       		.byte	46
 7079 0151 000000   		.space	3
 7080 0154 00000000 		.word	0
 7081 0158 2E       		.byte	46
 7082 0159 000000   		.space	3
 7083 015c 00000000 		.word	0
 7084 0160 2E       		.byte	46
 7085 0161 000000   		.space	3
 7086 0164 00000000 		.word	0
 7087 0168 2E       		.byte	46
 7088 0169 000000   		.space	3
 7089 016c 00000000 		.word	0
 7090 0170 2E       		.byte	46
 7091 0171 000000   		.space	3
 7092 0174 00000000 		.word	0
 7093              		.section	.rodata.mapping_none.11138,"a"
 7094              		.align	2
 7095              		.set	.LANCHOR13,. + 0
 7098              	mapping_none.11138:
 7099 0000 63       		.byte	99
 7100 0001 000000   		.space	3
 7101 0004 FFFFFFFF 		.word	-1
 7102 0008 00       		.byte	0
 7103 0009 000000   		.space	3
 7104 000c 00000000 		.word	0
 7105 0010 01       		.byte	1
 7106 0011 000000   		.space	3
ARM GAS  /tmp/cc7Wa57o.s 			page 175


 7107 0014 00000000 		.word	0
 7108 0018 03       		.byte	3
 7109 0019 000000   		.space	3
 7110 001c 00000000 		.word	0
 7111 0020 13       		.byte	19
 7112 0021 000000   		.space	3
 7113 0024 02000000 		.word	2
 7114 0028 12       		.byte	18
 7115 0029 000000   		.space	3
 7116 002c 02000000 		.word	2
 7117 0030 12       		.byte	18
 7118 0031 000000   		.space	3
 7119 0034 00000000 		.word	0
 7120 0038 06       		.byte	6
 7121 0039 000000   		.space	3
 7122 003c 00000000 		.word	0
 7123 0040 07       		.byte	7
 7124 0041 000000   		.space	3
 7125 0044 00000000 		.word	0
 7126 0048 08       		.byte	8
 7127 0049 000000   		.space	3
 7128 004c 00000000 		.word	0
 7129 0050 01       		.byte	1
 7130 0051 000000   		.space	3
 7131 0054 01000000 		.word	1
 7132 0058 02       		.byte	2
 7133 0059 000000   		.space	3
 7134 005c 01000000 		.word	1
 7135 0060 03       		.byte	3
 7136 0061 000000   		.space	3
 7137 0064 01000000 		.word	1
 7138 0068 0C       		.byte	12
 7139 0069 000000   		.space	3
 7140 006c 00000000 		.word	0
 7141 0070 0D       		.byte	13
 7142 0071 000000   		.space	3
 7143 0074 00000000 		.word	0
 7144 0078 0E       		.byte	14
 7145 0079 000000   		.space	3
 7146 007c 00000000 		.word	0
 7147 0080 0F       		.byte	15
 7148 0081 000000   		.space	3
 7149 0084 00000000 		.word	0
 7150 0088 10       		.byte	16
 7151 0089 000000   		.space	3
 7152 008c 00000000 		.word	0
 7153 0090 18       		.byte	24
 7154 0091 000000   		.space	3
 7155 0094 00000000 		.word	0
 7156 0098 13       		.byte	19
 7157 0099 000000   		.space	3
 7158 009c 00000000 		.word	0
 7159 00a0 14       		.byte	20
 7160 00a1 000000   		.space	3
 7161 00a4 00000000 		.word	0
 7162 00a8 15       		.byte	21
 7163 00a9 000000   		.space	3
ARM GAS  /tmp/cc7Wa57o.s 			page 176


 7164 00ac 00000000 		.word	0
 7165 00b0 16       		.byte	22
 7166 00b1 000000   		.space	3
 7167 00b4 00000000 		.word	0
 7168 00b8 1E       		.byte	30
 7169 00b9 000000   		.space	3
 7170 00bc 00000000 		.word	0
 7171 00c0 19       		.byte	25
 7172 00c1 000000   		.space	3
 7173 00c4 00000000 		.word	0
 7174 00c8 1A       		.byte	26
 7175 00c9 000000   		.space	3
 7176 00cc 00000000 		.word	0
 7177 00d0 1B       		.byte	27
 7178 00d1 000000   		.space	3
 7179 00d4 00000000 		.word	0
 7180 00d8 1C       		.byte	28
 7181 00d9 000000   		.space	3
 7182 00dc 00000000 		.word	0
 7183 00e0 29       		.byte	41
 7184 00e1 000000   		.space	3
 7185 00e4 00000000 		.word	0
 7186 00e8 1F       		.byte	31
 7187 00e9 000000   		.space	3
 7188 00ec 00000000 		.word	0
 7189 00f0 20       		.byte	32
 7190 00f1 000000   		.space	3
 7191 00f4 00000000 		.word	0
 7192 00f8 21       		.byte	33
 7193 00f9 000000   		.space	3
 7194 00fc 00000000 		.word	0
 7195 0100 22       		.byte	34
 7196 0101 000000   		.space	3
 7197 0104 00000000 		.word	0
 7198 0108 24       		.byte	36
 7199 0109 000000   		.space	3
 7200 010c 00000000 		.word	0
 7201 0110 25       		.byte	37
 7202 0111 000000   		.space	3
 7203 0114 00000000 		.word	0
 7204 0118 26       		.byte	38
 7205 0119 000000   		.space	3
 7206 011c 00000000 		.word	0
 7207 0120 27       		.byte	39
 7208 0121 000000   		.space	3
 7209 0124 00000000 		.word	0
 7210 0128 28       		.byte	40
 7211 0129 000000   		.space	3
 7212 012c 00000000 		.word	0
 7213 0130 2E       		.byte	46
 7214 0131 000000   		.space	3
 7215 0134 00000000 		.word	0
 7216 0138 2E       		.byte	46
 7217 0139 000000   		.space	3
 7218 013c 00000000 		.word	0
 7219 0140 2E       		.byte	46
 7220 0141 000000   		.space	3
ARM GAS  /tmp/cc7Wa57o.s 			page 177


 7221 0144 00000000 		.word	0
 7222 0148 2E       		.byte	46
 7223 0149 000000   		.space	3
 7224 014c 00000000 		.word	0
 7225 0150 2E       		.byte	46
 7226 0151 000000   		.space	3
 7227 0154 00000000 		.word	0
 7228 0158 2E       		.byte	46
 7229 0159 000000   		.space	3
 7230 015c 00000000 		.word	0
 7231 0160 2E       		.byte	46
 7232 0161 000000   		.space	3
 7233 0164 00000000 		.word	0
 7234 0168 2E       		.byte	46
 7235 0169 000000   		.space	3
 7236 016c 00000000 		.word	0
 7237 0170 2E       		.byte	46
 7238 0171 000000   		.space	3
 7239 0174 00000000 		.word	0
 7240              		.section	.rodata.mapping_running.11142,"a"
 7241              		.align	2
 7242              		.set	.LANCHOR12,. + 0
 7245              	mapping_running.11142:
 7246 0000 63       		.byte	99
 7247 0001 000000   		.space	3
 7248 0004 FFFFFFFF 		.word	-1
 7249 0008 00       		.byte	0
 7250 0009 000000   		.space	3
 7251 000c 00000000 		.word	0
 7252 0010 01       		.byte	1
 7253 0011 000000   		.space	3
 7254 0014 00000000 		.word	0
 7255 0018 02       		.byte	2
 7256 0019 000000   		.space	3
 7257 001c 00000000 		.word	0
 7258 0020 03       		.byte	3
 7259 0021 000000   		.space	3
 7260 0024 00000000 		.word	0
 7261 0028 04       		.byte	4
 7262 0029 000000   		.space	3
 7263 002c 00000000 		.word	0
 7264 0030 12       		.byte	18
 7265 0031 000000   		.space	3
 7266 0034 00000000 		.word	0
 7267 0038 06       		.byte	6
 7268 0039 000000   		.space	3
 7269 003c 00000000 		.word	0
 7270 0040 07       		.byte	7
 7271 0041 000000   		.space	3
 7272 0044 00000000 		.word	0
 7273 0048 08       		.byte	8
 7274 0049 000000   		.space	3
 7275 004c 00000000 		.word	0
 7276 0050 09       		.byte	9
 7277 0051 000000   		.space	3
 7278 0054 00000000 		.word	0
 7279 0058 0A       		.byte	10
ARM GAS  /tmp/cc7Wa57o.s 			page 178


 7280 0059 000000   		.space	3
 7281 005c 00000000 		.word	0
 7282 0060 0B       		.byte	11
 7283 0061 000000   		.space	3
 7284 0064 00000000 		.word	0
 7285 0068 0C       		.byte	12
 7286 0069 000000   		.space	3
 7287 006c 00000000 		.word	0
 7288 0070 0D       		.byte	13
 7289 0071 000000   		.space	3
 7290 0074 00000000 		.word	0
 7291 0078 0E       		.byte	14
 7292 0079 000000   		.space	3
 7293 007c 00000000 		.word	0
 7294 0080 0F       		.byte	15
 7295 0081 000000   		.space	3
 7296 0084 00000000 		.word	0
 7297 0088 10       		.byte	16
 7298 0089 000000   		.space	3
 7299 008c 00000000 		.word	0
 7300 0090 18       		.byte	24
 7301 0091 000000   		.space	3
 7302 0094 00000000 		.word	0
 7303 0098 13       		.byte	19
 7304 0099 000000   		.space	3
 7305 009c 00000000 		.word	0
 7306 00a0 14       		.byte	20
 7307 00a1 000000   		.space	3
 7308 00a4 00000000 		.word	0
 7309 00a8 15       		.byte	21
 7310 00a9 000000   		.space	3
 7311 00ac 00000000 		.word	0
 7312 00b0 16       		.byte	22
 7313 00b1 000000   		.space	3
 7314 00b4 00000000 		.word	0
 7315 00b8 1E       		.byte	30
 7316 00b9 000000   		.space	3
 7317 00bc 00000000 		.word	0
 7318 00c0 19       		.byte	25
 7319 00c1 000000   		.space	3
 7320 00c4 00000000 		.word	0
 7321 00c8 1A       		.byte	26
 7322 00c9 000000   		.space	3
 7323 00cc 00000000 		.word	0
 7324 00d0 1B       		.byte	27
 7325 00d1 000000   		.space	3
 7326 00d4 00000000 		.word	0
 7327 00d8 1C       		.byte	28
 7328 00d9 000000   		.space	3
 7329 00dc 00000000 		.word	0
 7330 00e0 09       		.byte	9
 7331 00e1 000000   		.space	3
 7332 00e4 00000000 		.word	0
 7333 00e8 1F       		.byte	31
 7334 00e9 000000   		.space	3
 7335 00ec 00000000 		.word	0
 7336 00f0 20       		.byte	32
ARM GAS  /tmp/cc7Wa57o.s 			page 179


 7337 00f1 000000   		.space	3
 7338 00f4 00000000 		.word	0
 7339 00f8 21       		.byte	33
 7340 00f9 000000   		.space	3
 7341 00fc 00000000 		.word	0
 7342 0100 22       		.byte	34
 7343 0101 000000   		.space	3
 7344 0104 00000000 		.word	0
 7345 0108 24       		.byte	36
 7346 0109 000000   		.space	3
 7347 010c 00000000 		.word	0
 7348 0110 25       		.byte	37
 7349 0111 000000   		.space	3
 7350 0114 00000000 		.word	0
 7351 0118 26       		.byte	38
 7352 0119 000000   		.space	3
 7353 011c 00000000 		.word	0
 7354 0120 27       		.byte	39
 7355 0121 000000   		.space	3
 7356 0124 00000000 		.word	0
 7357 0128 28       		.byte	40
 7358 0129 000000   		.space	3
 7359 012c 00000000 		.word	0
 7360 0130 2E       		.byte	46
 7361 0131 000000   		.space	3
 7362 0134 00000000 		.word	0
 7363 0138 2E       		.byte	46
 7364 0139 000000   		.space	3
 7365 013c 00000000 		.word	0
 7366 0140 2E       		.byte	46
 7367 0141 000000   		.space	3
 7368 0144 00000000 		.word	0
 7369 0148 2E       		.byte	46
 7370 0149 000000   		.space	3
 7371 014c 00000000 		.word	0
 7372 0150 04       		.byte	4
 7373 0151 000000   		.space	3
 7374 0154 00000000 		.word	0
 7375 0158 05       		.byte	5
 7376 0159 000000   		.space	3
 7377 015c 00000000 		.word	0
 7378 0160 2E       		.byte	46
 7379 0161 000000   		.space	3
 7380 0164 00000000 		.word	0
 7381 0168 2E       		.byte	46
 7382 0169 000000   		.space	3
 7383 016c 00000000 		.word	0
 7384 0170 2E       		.byte	46
 7385 0171 000000   		.space	3
 7386 0174 00000000 		.word	0
 7387              		.section	.rodata.mid_menu,"a"
 7388              		.align	2
 7391              	mid_menu:
 7392 0000 C8C40B00 		.ascii	"\310\304\013\000"
 7393              		.text
 7394              	.Letext0:
 7395              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
ARM GAS  /tmp/cc7Wa57o.s 			page 180


 7396              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 7397              		.file 6 "/usr/include/newlib/sys/_types.h"
 7398              		.file 7 "/usr/include/newlib/sys/reent.h"
 7399              		.file 8 "/usr/include/newlib/sys/lock.h"
 7400              		.file 9 "/usr/include/newlib/stdlib.h"
 7401              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 7402              		.file 11 "/usr/include/newlib/ctype.h"
 7403              		.file 12 "dmcp/ff_ifc.h"
 7404              		.file 13 "dmcp/dmcp.h"
 7405              		.file 14 "src/keys.h"
 7406              		.file 15 "src/menu.h"
 7407              		.file 16 "src/decNumber/decContext.h"
 7408              		.file 17 "src/decNumber/decNumber.h"
 7409              		.file 18 "src/decNumber/decimal64.h"
 7410              		.file 19 "src/decNumber/decimal128.h"
 7411              		.file 20 "src/xeq.h"
 7412              		.file 21 "src/data.h"
 7413              		.file 22 "src/display.h"
 7414              		.file 23 "src/consts.h"
 7415              		.file 24 "src/storage.h"
 7416              		.file 25 "src/catalogues.h"
 7417              		.file 26 "src/stopwatch.h"
 7418              		.file 27 "src/lcd.h"
 7419              		.file 28 "/usr/include/newlib/string.h"
 7420              		.file 29 "/usr/include/newlib/stdio.h"
 7421              		.file 30 "<built-in>"
ARM GAS  /tmp/cc7Wa57o.s 			page 181


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/cc7Wa57o.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/cc7Wa57o.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/cc7Wa57o.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/cc7Wa57o.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/cc7Wa57o.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/cc7Wa57o.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/cc7Wa57o.s:428    .text.set_menu_label.constprop.0:0000000000000134 $d
     /tmp/cc7Wa57o.s:435    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/cc7Wa57o.s:466    .text.disp_about:0000000000000000 $t
     /tmp/cc7Wa57o.s:474    .text.disp_about:0000000000000000 disp_about
     /tmp/cc7Wa57o.s:680    .text.disp_about:00000000000000d4 $d
     /tmp/cc7Wa57o.s:704    .text.run_menu_item:0000000000000000 $t
     /tmp/cc7Wa57o.s:712    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/cc7Wa57o.s:752    .text.set_menu:0000000000000000 $t
     /tmp/cc7Wa57o.s:760    .text.set_menu:0000000000000000 set_menu
     /tmp/cc7Wa57o.s:815    .text.set_menu:000000000000002c $d
     /tmp/cc7Wa57o.s:822    .text.set_default_menu:0000000000000000 $t
     /tmp/cc7Wa57o.s:830    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/cc7Wa57o.s:904    .text.set_default_menu:000000000000002c $d
     /tmp/cc7Wa57o.s:913    .text.toggle_default_menu:0000000000000000 $t
     /tmp/cc7Wa57o.s:921    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/cc7Wa57o.s:1023   .text.toggle_default_menu:0000000000000044 $d
     /tmp/cc7Wa57o.s:1034   .text.get_menu:0000000000000000 $t
     /tmp/cc7Wa57o.s:1042   .text.get_menu:0000000000000000 get_menu
     /tmp/cc7Wa57o.s:1058   .text.get_menu:0000000000000008 $d
     /tmp/cc7Wa57o.s:1063   .text.get_last_menu:0000000000000000 $t
     /tmp/cc7Wa57o.s:1071   .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/cc7Wa57o.s:1087   .text.get_last_menu:0000000000000008 $d
     /tmp/cc7Wa57o.s:1092   .text.set_last_menu:0000000000000000 $t
     /tmp/cc7Wa57o.s:1100   .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/cc7Wa57o.s:1175   .text.set_last_menu:000000000000002c $d
     /tmp/cc7Wa57o.s:1184   .text.mdot:0000000000000000 $t
     /tmp/cc7Wa57o.s:1192   .text.mdot:0000000000000000 mdot
     /tmp/cc7Wa57o.s:1283   .text.mdot:000000000000003c $d
     /tmp/cc7Wa57o.s:1288   .text.get_current_menu_ref:0000000000000000 $t
     /tmp/cc7Wa57o.s:1296   .text.get_current_menu_ref:0000000000000000 get_current_menu_ref
     /tmp/cc7Wa57o.s:1338   .text.get_current_menu_ref:0000000000000028 $d
     /tmp/cc7Wa57o.s:1442   .text.get_current_menu_ref:000000000000007c $d
     /tmp/cc7Wa57o.s:5013   .rodata.Menus:0000000000000000 Menus
     /tmp/cc7Wa57o.s:1450   .text.display_menu:0000000000000000 $t
     /tmp/cc7Wa57o.s:1458   .text.display_menu:0000000000000000 display_menu
     /tmp/cc7Wa57o.s:1706   .text.display_menu:000000000000010c $d
     /tmp/cc7Wa57o.s:1713   .text.display_current_menu:0000000000000000 $t
     /tmp/cc7Wa57o.s:1721   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/cc7Wa57o.s:1757   .text.all_menu_dots:0000000000000000 $t
     /tmp/cc7Wa57o.s:1765   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/cc7Wa57o.s:1849   .text.all_menu_dots:0000000000000038 $d
     /tmp/cc7Wa57o.s:1854   .text.umen_store:0000000000000000 $t
     /tmp/cc7Wa57o.s:1862   .text.umen_store:0000000000000000 umen_store
     /tmp/cc7Wa57o.s:1963   .text.umen_store:0000000000000050 $d
     /tmp/cc7Wa57o.s:1968   .text.build_user_menu_from_program:0000000000000000 $t
     /tmp/cc7Wa57o.s:1976   .text.build_user_menu_from_program:0000000000000000 build_user_menu_from_program
     /tmp/cc7Wa57o.s:2387   .text.build_user_menu_from_program:0000000000000180 $d
     /tmp/cc7Wa57o.s:2400   .text.build_user_menu:0000000000000000 $t
     /tmp/cc7Wa57o.s:2408   .text.build_user_menu:0000000000000000 build_user_menu
ARM GAS  /tmp/cc7Wa57o.s 			page 182


     /tmp/cc7Wa57o.s:2424   .text.build_user_menu:0000000000000008 $d
     /tmp/cc7Wa57o.s:2429   .text.shutdown:0000000000000000 $t
     /tmp/cc7Wa57o.s:2437   .text.shutdown:0000000000000000 shutdown
     /tmp/cc7Wa57o.s:2455   .text.shutdown:000000000000000c $d
     /tmp/cc7Wa57o.s:2460   .text.is_key_pressed:0000000000000000 $t
     /tmp/cc7Wa57o.s:2468   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/cc7Wa57o.s:2491   .text.is_key_pressed:0000000000000010 $d
     /tmp/cc7Wa57o.s:2496   .text.get_key:0000000000000000 $t
     /tmp/cc7Wa57o.s:2504   .text.get_key:0000000000000000 get_key
     /tmp/cc7Wa57o.s:2519   .text.get_key:0000000000000004 $d
     /tmp/cc7Wa57o.s:2524   .text.put_key:0000000000000000 $t
     /tmp/cc7Wa57o.s:2532   .text.put_key:0000000000000000 put_key
     /tmp/cc7Wa57o.s:2611   .text.put_key:000000000000003c $d
     /tmp/cc7Wa57o.s:2617   .text.shift_down:0000000000000000 $t
     /tmp/cc7Wa57o.s:2625   .text.shift_down:0000000000000000 shift_down
     /tmp/cc7Wa57o.s:2640   .text.start_key_timer:0000000000000000 $t
     /tmp/cc7Wa57o.s:2648   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/cc7Wa57o.s:2672   .text.start_key_timer:000000000000000c $d
     /tmp/cc7Wa57o.s:2678   .text.keyticks:0000000000000000 $t
     /tmp/cc7Wa57o.s:2686   .text.keyticks:0000000000000000 keyticks
     /tmp/cc7Wa57o.s:2717   .text.keyticks:0000000000000018 $d
     /tmp/cc7Wa57o.s:2723   .text.moveto:0000000000000000 $t
     /tmp/cc7Wa57o.s:2731   .text.moveto:0000000000000000 moveto
     /tmp/cc7Wa57o.s:2791   .text.moveto:000000000000002c $d
     /tmp/cc7Wa57o.s:2798   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/cc7Wa57o.s:2802   .text.print_debug:0000000000000000 $t
     /tmp/cc7Wa57o.s:2810   .text.print_debug:0000000000000000 print_debug
     /tmp/cc7Wa57o.s:2912   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/cc7Wa57o.s:2923   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/cc7Wa57o.s:2927   .text.print_debug2:0000000000000000 $t
     /tmp/cc7Wa57o.s:2935   .text.print_debug2:0000000000000000 print_debug2
     /tmp/cc7Wa57o.s:3037   .text.print_debug2:0000000000000064 $d
     /tmp/cc7Wa57o.s:3048   .text.do_now:0000000000000000 $t
     /tmp/cc7Wa57o.s:3056   .text.do_now:0000000000000000 do_now
     /tmp/cc7Wa57o.s:3091   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/cc7Wa57o.s:3095   .text.do_multi:0000000000000000 $t
     /tmp/cc7Wa57o.s:3103   .text.do_multi:0000000000000000 do_multi
     /tmp/cc7Wa57o.s:3133   .text.do_multi:0000000000000016 $d
     /tmp/cc7Wa57o.s:3147   .text.do_multi:0000000000000024 $t
     /tmp/cc7Wa57o.s:3565   .text.do_multi:00000000000001c0 $d
     /tmp/cc7Wa57o.s:3579   .text.program_main:0000000000000000 $t
     /tmp/cc7Wa57o.s:3587   .text.program_main:0000000000000000 program_main
     /tmp/cc7Wa57o.s:3852   .text.program_main:000000000000011c $d
     /tmp/cc7Wa57o.s:3858   .text.program_main:0000000000000128 $t
     /tmp/cc7Wa57o.s:4251   .text.program_main:00000000000002dc $d
     /tmp/cc7Wa57o.s:4292   .text.program_main:0000000000000364 $t
     /tmp/cc7Wa57o.s:4760   .text.program_main:000000000000059c $d
     /tmp/cc7Wa57o.s:4848   .bss.n_p:0000000000000000 n_p
     /tmp/cc7Wa57o.s:4997   .data.spaces:0000000000000000 spaces
     /tmp/cc7Wa57o.s:4988   .data.release:0000000000000000 release
     /tmp/cc7Wa57o.s:4961   .data.h_shift:0000000000000000 h_shift
     /tmp/cc7Wa57o.s:4952   .data.g_shift:0000000000000000 g_shift
     /tmp/cc7Wa57o.s:4944   .data.f_shift:0000000000000000 f_shift
     /tmp/cc7Wa57o.s:4970   .data.heartbeat:0000000000000000 heartbeat
     /tmp/cc7Wa57o.s:4979   .data.no_key:0000000000000000 no_key
     /tmp/cc7Wa57o.s:5004   .rodata.MID_MENU:0000000000000000 MID_MENU
ARM GAS  /tmp/cc7Wa57o.s 			page 183


     /tmp/cc7Wa57o.s:4788   .rodata.str1.4:0000000000000000 $d
     /tmp/cc7Wa57o.s:7391   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/cc7Wa57o.s:4829   .bss.default_menu:0000000000000000 default_menu
     /tmp/cc7Wa57o.s:4835   .bss.last_menu:0000000000000000 last_menu
     /tmp/cc7Wa57o.s:4823   .bss.current_menu:0000000000000000 current_menu
     /tmp/cc7Wa57o.s:4938   .data.cmplx_key_string:0000000000000000 cmplx_key_string
     /tmp/cc7Wa57o.s:4931   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/cc7Wa57o.s:4862   .data.UserMenu:0000000000000000 UserMenu
     /tmp/cc7Wa57o.s:4805   .rodata:0000000000000000 $d
     /tmp/cc7Wa57o.s:4824   .bss.current_menu:0000000000000000 $d
     /tmp/cc7Wa57o.s:4830   .bss.default_menu:0000000000000000 $d
     /tmp/cc7Wa57o.s:4836   .bss.last_menu:0000000000000000 $d
     /tmp/cc7Wa57o.s:4838   .bss.mdots:0000000000000000 $d
     /tmp/cc7Wa57o.s:4842   .bss.mdots:0000000000000000 mdots
     /tmp/cc7Wa57o.s:4845   .bss.n_p:0000000000000000 $d
     /tmp/cc7Wa57o.s:4851   .bss.start_ticks:0000000000000000 $d
     /tmp/cc7Wa57o.s:4855   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/cc7Wa57o.s:4858   .data.UserMenu:0000000000000000 $d
     /tmp/cc7Wa57o.s:4927   .data.arrow_key_string:0000000000000000 $d
     /tmp/cc7Wa57o.s:4934   .data.cmplx_key_string:0000000000000000 $d
     /tmp/cc7Wa57o.s:4941   .data.f_shift:0000000000000000 $d
     /tmp/cc7Wa57o.s:4949   .data.g_shift:0000000000000000 $d
     /tmp/cc7Wa57o.s:4957   .data.h_shift:0000000000000000 $d
     /tmp/cc7Wa57o.s:4966   .data.heartbeat:0000000000000000 $d
     /tmp/cc7Wa57o.s:4975   .data.no_key:0000000000000000 $d
     /tmp/cc7Wa57o.s:4984   .data.release:0000000000000000 $d
     /tmp/cc7Wa57o.s:4993   .data.spaces:0000000000000000 $d
     /tmp/cc7Wa57o.s:5000   .rodata.MID_MENU:0000000000000000 $d
     /tmp/cc7Wa57o.s:5010   .rodata.Menus:0000000000000000 $d
     /tmp/cc7Wa57o.s:6653   .rodata.mapping_alpha.11141:0000000000000000 $d
     /tmp/cc7Wa57o.s:6657   .rodata.mapping_alpha.11141:0000000000000000 mapping_alpha.11141
     /tmp/cc7Wa57o.s:6800   .rodata.mapping_fshift.11139:0000000000000000 $d
     /tmp/cc7Wa57o.s:6804   .rodata.mapping_fshift.11139:0000000000000000 mapping_fshift.11139
     /tmp/cc7Wa57o.s:6947   .rodata.mapping_gshift.11140:0000000000000000 $d
     /tmp/cc7Wa57o.s:6951   .rodata.mapping_gshift.11140:0000000000000000 mapping_gshift.11140
     /tmp/cc7Wa57o.s:7094   .rodata.mapping_none.11138:0000000000000000 $d
     /tmp/cc7Wa57o.s:7098   .rodata.mapping_none.11138:0000000000000000 mapping_none.11138
     /tmp/cc7Wa57o.s:7241   .rodata.mapping_running.11142:0000000000000000 $d
     /tmp/cc7Wa57o.s:7245   .rodata.mapping_running.11142:0000000000000000 mapping_running.11142
     /tmp/cc7Wa57o.s:7388   .rodata.mid_menu:0000000000000000 $d
     /tmp/cc7Wa57o.s:1353   .text.get_current_menu_ref:0000000000000037 $d
     /tmp/cc7Wa57o.s:1353   .text.get_current_menu_ref:0000000000000038 $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
RectPolConv
xcopy
SvnRevision
memcpy
main_ram
pixel_length
strncpy
findmultilbl
do_inc
getprog
ARM GAS  /tmp/cc7Wa57o.s 			page 184


prt_umen
catcmd
strcpy
sprintf
process_keycode_with_shift
reset_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
KeyCallback
JustDisplayed
Pause
Running
DM42_Ticker
is_dot
dot
finish_LEQ
get_alpha_state
StopWatchStatus
JustStopped

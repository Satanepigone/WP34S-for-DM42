ARM GAS  /tmp/cc67ZUo8.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_menu_label.constprop.0:
  27              	.LVL0:
  28              	.LFB25:
  29              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** void set_menu ( int new_menu ) {
   4:src/menu.c    ****   int m = current_menu;
   5:src/menu.c    ****   if (new_menu == current_menu) {
   6:src/menu.c    ****     current_menu = 0;
   7:src/menu.c    ****   }
   8:src/menu.c    ****   else if (new_menu == -1) {
   9:src/menu.c    ****     current_menu = last_menu;
  10:src/menu.c    ****   }
  11:src/menu.c    ****   else {
  12:src/menu.c    ****     current_menu = new_menu;
  13:src/menu.c    ****   }
  14:src/menu.c    ****   last_menu = m;
  15:src/menu.c    **** }
  16:src/menu.c    **** 
  17:src/menu.c    **** int get_menu () {
  18:src/menu.c    ****   return current_menu;
  19:src/menu.c    **** }
  20:src/menu.c    **** 
  21:src/menu.c    **** void display_current_menu () {
  22:src/menu.c    ****   display_menu (current_menu);
  23:src/menu.c    **** }
  24:src/menu.c    **** 
  25:src/menu.c    **** void set_last_menu () {
  26:src/menu.c    ****   set_menu (last_menu);
  27:src/menu.c    **** }
  28:src/menu.c    **** 
  29:src/menu.c    **** static unsigned char mdots[200][2];
ARM GAS  /tmp/cc67ZUo8.s 			page 2


  30:src/menu.c    **** 
  31:src/menu.c    **** static const struct _menu Menus[] = {
  32:src/menu.c    ****   {
  33:src/menu.c    ****     "Blank", // 0
  34:src/menu.c    ****     { 
  35:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  36:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  37:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  38:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  39:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  40:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  41:src/menu.c    ****     }    
  42:src/menu.c    ****   },
  43:src/menu.c    ****   {
  44:src/menu.c    ****     "Clear", // 1
  45:src/menu.c    ****     { 
  46:src/menu.c    ****       { { K24, 1 }, NO_KEY, "CLProg", "" },
  47:src/menu.c    ****       { { K24, 2 }, NO_KEY, "CL\221", "" },
  48:src/menu.c    ****       { { K24, 3 }, NO_KEY, "CL X", "" },
  49:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  50:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  51:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  52:src/menu.c    ****     }    
  53:src/menu.c    ****   },
  54:src/menu.c    ****   {
  55:src/menu.c    ****     "DISP", // 2
  56:src/menu.c    ****     { 
  57:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
  58:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
  59:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
  60:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
  61:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
  62:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  63:src/menu.c    ****     }
  64:src/menu.c    ****   },
  65:src/menu.c    ****   {
  66:src/menu.c    ****     "BASE", // 3
  67:src/menu.c    ****     { 
  68:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
  69:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
  70:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
  71:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
  72:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
  73:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
  74:src/menu.c    ****     }
  75:src/menu.c    ****   },
  76:src/menu.c    ****   {
  77:src/menu.c    ****     "ANGLES", // 4
  78:src/menu.c    ****     { 
  79:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
  80:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
  81:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
  82:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
  83:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
  84:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  85:src/menu.c    ****     }
  86:src/menu.c    ****       
ARM GAS  /tmp/cc67ZUo8.s 			page 3


  87:src/menu.c    ****   },
  88:src/menu.c    ****   {
  89:src/menu.c    ****     "MISC", // 5
  90:src/menu.c    ****     { 
  91:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
  92:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
  93:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
  94:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
  95:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
  96:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  97:src/menu.c    ****     }
  98:src/menu.c    ****   },
  99:src/menu.c    ****   {
 100:src/menu.c    ****     "X<>Y Key", // 6
 101:src/menu.c    ****     { 
 102:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 103:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 104:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 105:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 106:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 107:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 108:src/menu.c    ****     }    
 109:src/menu.c    ****   },
 110:src/menu.c    ****   {
 111:src/menu.c    ****     "Program", // 7
 112:src/menu.c    ****     { 
 113:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 114:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 115:src/menu.c    ****       { { K61, 3 }, NO_KEY, "Pause", "" },
 116:src/menu.c    ****       { { K30, 3 }, NO_KEY, "GTO", "" },
 117:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 118:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 119:src/menu.c    ****     }
 120:src/menu.c    ****   },
 121:src/menu.c    ****   {
 122:src/menu.c    ****     "Setup 1", // 8
 123:src/menu.c    ****     { 
 124:src/menu.c    ****       { { K_EXIT, 0}, NO_KEY, "EXIT", "" },
 125:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 126:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 127:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 128:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 129:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 130:src/menu.c    ****     }
 131:src/menu.c    ****   },
 132:src/menu.c    ****   {
 133:src/menu.c    ****     "Arrow", // 9
 134:src/menu.c    ****     { 
 135:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 136:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 137:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 138:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "2HMS" },
 139:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS2" },
 140:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 141:src/menu.c    ****     }
 142:src/menu.c    ****   },
 143:src/menu.c    ****   {
ARM GAS  /tmp/cc67ZUo8.s 			page 4


 144:src/menu.c    ****     "Flags", // 10
 145:src/menu.c    ****     { 
 146:src/menu.c    ****       { { K50, 1 }, NO_KEY, "SF_", "" },
 147:src/menu.c    ****       { { K50, 2 }, NO_KEY, "CF_", "" },
 148:src/menu.c    ****       { { K51, 1 }, NO_KEY, "x=?", "" },
 149:src/menu.c    ****       { { K51, 2 }, NO_KEY, "x\013?", "" },
 150:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 151:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 152:src/menu.c    ****     }
 153:src/menu.c    ****   },
 154:src/menu.c    ****   {
 155:src/menu.c    ****     "Probability", // 11
 156:src/menu.c    ****     { 
 157:src/menu.c    ****       { { K40, 3 }, { K41, 1 }, "Fact!", "\224" },
 158:src/menu.c    ****       { { K40, 1 }, { K41, 2 }, "Cy,x", "\224\235" },
 159:src/menu.c    ****       { { K40, 2 }, NO_KEY, "Py,x", "" },
 160:src/menu.c    ****       { { K12, 1 }, NO_KEY, "RAN#", "" },
 161:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 162:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 163:src/menu.c    ****     }
 164:src/menu.c    ****   },
 165:src/menu.c    ****   {
 166:src/menu.c    ****     "Statistics", // 12
 167:src/menu.c    ****     { 
 168:src/menu.c    ****       { { K42, 1 }, { K43, 3 }, "Xbar", "SUMS" },
 169:src/menu.c    ****       { { K43, 1 }, NO_KEY, "Yhat", "" },
 170:src/menu.c    ****       { { K42, 2 }, NO_KEY, "s", "" },
 171:src/menu.c    ****       { { K43, 2 }, NO_KEY, "r", "" },
 172:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 173:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 174:src/menu.c    ****     }
 175:src/menu.c    ****   },
 176:src/menu.c    ****   {
 177:src/menu.c    ****     "Setup 2", // 13
 178:src/menu.c    ****     { 
 179:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 180:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 181:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 182:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 183:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 184:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 185:src/menu.c    ****     }
 186:src/menu.c    ****   },
 187:src/menu.c    ****   {
 188:src/menu.c    ****     "Integ/Sum/Prod", // 14
 189:src/menu.c    ****     { 
 190:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 191:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 192:src/menu.c    ****       { { K53, 1 }, NO_KEY, "SUM", "" },
 193:src/menu.c    ****       { { K53, 2 }, NO_KEY, "PROD", "" },
 194:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 195:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 196:src/menu.c    ****     }
 197:src/menu.c    ****   },
 198:src/menu.c    **** };  
 199:src/menu.c    **** 
 200:src/menu.c    **** /* This code is the set_status_sized code with small changes
ARM GAS  /tmp/cc67ZUo8.s 			page 5


 201:src/menu.c    ****  * and non-DM42 code removed.
 202:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 203:src/menu.c    ****  */
 204:src/menu.c    **** #define MENU_WIDTH 32
 205:src/menu.c    **** 
 206:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  30              		.loc 1 206 13 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 544
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 207:src/menu.c    ****   // dotcol is the number of the starting dot column
 208:src/menu.c    ****   // shifted is 1 if shifted
 209:src/menu.c    ****   unsigned short int posns[257];
  34              		.loc 1 209 3 view .LVU1
 210:src/menu.c    **** 
 211:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 212:src/menu.c    ****   int posns_state = 255;
  35              		.loc 1 212 3 view .LVU2
 213:src/menu.c    **** 
 214:src/menu.c    ****   int x = dotcol;
  36              		.loc 1 214 3 view .LVU3
 206:src/menu.c    ****   // dotcol is the number of the starting dot column
  37              		.loc 1 206 13 is_stmt 0 view .LVU4
  38 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  39              		.cfi_def_cfa_offset 36
  40              		.cfi_offset 4, -36
  41              		.cfi_offset 5, -32
  42              		.cfi_offset 6, -28
  43              		.cfi_offset 7, -24
  44              		.cfi_offset 8, -20
  45              		.cfi_offset 9, -16
  46              		.cfi_offset 10, -12
  47              		.cfi_offset 11, -8
  48              		.cfi_offset 14, -4
  49 0004 ADF5097D 		sub	sp, sp, #548
  50              		.cfi_def_cfa_offset 584
 206:src/menu.c    ****   // dotcol is the number of the starting dot column
  51              		.loc 1 206 13 view .LVU5
  52 0008 CDE90102 		strd	r0, r2, [sp, #4]
 215:src/menu.c    ****   int i, j, xmax;
 216:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  53              		.loc 1 216 18 view .LVU6
  54 000c 0029     		cmp	r1, #0
  55 000e B4BF     		ite	lt
  56 0010 01F11F03 		addlt	r3, r1, #31
  57 0014 0B46     		movge	r3, r1
 217:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 218:src/menu.c    **** 
 219:src/menu.c    ****   forceDispPlot=0;
  58              		.loc 1 219 16 view .LVU7
  59 0016 4848     		ldr	r0, .L36
  60              	.LVL1:
 206:src/menu.c    ****   // dotcol is the number of the starting dot column
  61              		.loc 1 206 13 view .LVU8
  62 0018 0F46     		mov	r7, r1
  63              	.LVL2:
 215:src/menu.c    ****   int i, j, xmax;
ARM GAS  /tmp/cc67ZUo8.s 			page 6


  64              		.loc 1 215 3 is_stmt 1 view .LVU9
 216:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  65              		.loc 1 216 3 view .LVU10
 220:src/menu.c    **** 
 221:src/menu.c    **** #ifdef RP_PREFIX
 222:src/menu.c    ****   RectPolConv = 0;
  66              		.loc 1 222 15 is_stmt 0 view .LVU11
  67 001a 4849     		ldr	r1, .L36+4
  68              	.LVL3:
 219:src/menu.c    **** 
  69              		.loc 1 219 16 view .LVU12
  70 001c 0022     		movs	r2, #0
  71              	.LVL4:
 219:src/menu.c    **** 
  72              		.loc 1 219 16 view .LVU13
  73 001e 0270     		strb	r2, [r0]
  74              		.loc 1 222 15 view .LVU14
  75 0020 0A60     		str	r2, [r1]
 223:src/menu.c    **** #endif
 224:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
  76              		.loc 1 224 10 view .LVU15
  77 0022 019A     		ldr	r2, [sp, #4]
  78 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 216:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  79              		.loc 1 216 30 view .LVU16
  80 0026 23F01F03 		bic	r3, r3, #31
 216:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  81              		.loc 1 216 8 view .LVU17
  82 002a 03F12009 		add	r9, r3, #32
  83              	.LVL5:
 217:src/menu.c    **** 
  84              		.loc 1 217 3 is_stmt 1 view .LVU18
 219:src/menu.c    **** 
  85              		.loc 1 219 3 view .LVU19
 222:src/menu.c    **** #endif
  86              		.loc 1 222 3 view .LVU20
  87              		.loc 1 224 3 view .LVU21
  88              		.loc 1 224 9 view .LVU22
  89 002e 002D     		cmp	r5, #0
  90 0030 78D0     		beq	.L1
  91              		.loc 1 224 23 is_stmt 0 view .LVU23
  92 0032 4F45     		cmp	r7, r9
  93 0034 76DC     		bgt	.L1
  94              	.LBB33:
 225:src/menu.c    ****     int c;
 226:src/menu.c    ****     int width;
 227:src/menu.c    ****     unsigned char cmap[6];
 228:src/menu.c    **** 
 229:src/menu.c    ****     int real_width;
 230:src/menu.c    ****     int current_smallp;
 231:src/menu.c    **** 
 232:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 233:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 234:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 235:src/menu.c    ****     //           01 -> (not used)
 236:src/menu.c    ****     //           10 -> use big font
 237:src/menu.c    ****     //           11 -> use small font
ARM GAS  /tmp/cc67ZUo8.s 			page 7


 238:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 239:src/menu.c    ****     if (str[0] == '\007') {
  95              		.loc 1 239 8 view .LVU24
  96 0036 072D     		cmp	r5, #7
  97              	.LBE33:
 212:src/menu.c    **** 
  98              		.loc 1 212 7 view .LVU25
  99 0038 4FF0FF04 		mov	r4, #255
 100              	.LVL6:
 101              	.LBB50:
 225:src/menu.c    ****     int c;
 102              		.loc 1 225 5 is_stmt 1 view .LVU26
 226:src/menu.c    ****     unsigned char cmap[6];
 103              		.loc 1 226 5 view .LVU27
 227:src/menu.c    **** 
 104              		.loc 1 227 5 view .LVU28
 229:src/menu.c    ****     int current_smallp;
 105              		.loc 1 229 5 view .LVU29
 230:src/menu.c    **** 
 106              		.loc 1 230 5 view .LVU30
 107              		.loc 1 239 5 view .LVU31
 240:src/menu.c    ****       width = str[1] & 0x1F;
 241:src/menu.c    ****       switch (str[1] & 0x60) {
 242:src/menu.c    ****       default:
 243:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 244:src/menu.c    **** 	break;
 245:src/menu.c    ****       case 0x40:	current_smallp = 0;
 246:src/menu.c    **** 	break;
 247:src/menu.c    ****       case 0x60:	current_smallp = 1;
 108              		.loc 1 247 33 is_stmt 0 view .LVU32
 109 003c 4FF0010A 		mov	r10, #1
 239:src/menu.c    ****       width = str[1] & 0x1F;
 110              		.loc 1 239 8 view .LVU33
 111 0040 64D1     		bne	.L5
 112              	.LVL7:
 113              	.L34:
 240:src/menu.c    ****       width = str[1] & 0x1F;
 114              		.loc 1 240 7 is_stmt 1 view .LVU34
 240:src/menu.c    ****       width = str[1] & 0x1F;
 115              		.loc 1 240 18 is_stmt 0 view .LVU35
 116 0042 019B     		ldr	r3, [sp, #4]
 117 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 118 0046 06F06003 		and	r3, r6, #96
 241:src/menu.c    ****       default:
 119              		.loc 1 241 7 view .LVU36
 120 004a 402B     		cmp	r3, #64
 240:src/menu.c    ****       width = str[1] & 0x1F;
 121              		.loc 1 240 13 view .LVU37
 122 004c 06F01F06 		and	r6, r6, #31
 123              	.LVL8:
 241:src/menu.c    ****       default:
 124              		.loc 1 241 7 is_stmt 1 view .LVU38
 125 0050 6CD0     		beq	.L28
 126 0052 602B     		cmp	r3, #96
 127 0054 6AD1     		bne	.L28
 128              		.loc 1 247 18 view .LVU39
 129              	.LVL9:
ARM GAS  /tmp/cc67ZUo8.s 			page 8


 248:src/menu.c    **** 	break;
 130              		.loc 1 248 2 view .LVU40
 249:src/menu.c    ****       }
 250:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 131              		.loc 1 250 7 view .LVU41
 132              		.loc 1 250 11 is_stmt 0 view .LVU42
 133 0056 019B     		ldr	r3, [sp, #4]
 134 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 247:src/menu.c    **** 	break;
 135              		.loc 1 247 33 view .LVU43
 136 005a 0123     		movs	r3, #1
 137 005c 0093     		str	r3, [sp]
 138 005e 00F58075 		add	r5, r0, #256
 139              	.LVL10:
 140              	.L9:
 251:src/menu.c    ****       str += 3;
 141              		.loc 1 251 7 is_stmt 1 view .LVU44
 252:src/menu.c    **** 
 253:src/menu.c    ****       real_width = charlengths(c);
 142              		.loc 1 253 20 is_stmt 0 view .LVU45
 143 0062 2846     		mov	r0, r5
 144 0064 FFF7FEFF 		bl	charlengths
 145              	.LVL11:
 251:src/menu.c    ****       str += 3;
 146              		.loc 1 251 11 view .LVU46
 147 0068 019B     		ldr	r3, [sp, #4]
 148 006a 0333     		adds	r3, r3, #3
 149 006c 0193     		str	r3, [sp, #4]
 150              	.LVL12:
 151              		.loc 1 253 7 is_stmt 1 view .LVU47
 254:src/menu.c    ****     } else {
 255:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 256:src/menu.c    ****       real_width = width = charlengths(c);
 257:src/menu.c    ****       current_smallp = smallp;
 258:src/menu.c    ****     }
 259:src/menu.c    **** 
 260:src/menu.c    ****     if (x + real_width > xmax)
 152              		.loc 1 260 5 view .LVU48
 153              		.loc 1 260 11 is_stmt 0 view .LVU49
 154 006e C319     		adds	r3, r0, r7
 155              	.LVL13:
 156              		.loc 1 260 8 view .LVU50
 157 0070 9945     		cmp	r9, r3
 158 0072 57DB     		blt	.L1
 159              	.L35:
 261:src/menu.c    ****       break;
 262:src/menu.c    **** 
 263:src/menu.c    ****     if (posns_state != current_smallp) {
 160              		.loc 1 263 5 is_stmt 1 view .LVU51
 161              		.loc 1 263 8 is_stmt 0 view .LVU52
 162 0074 009B     		ldr	r3, [sp]
 163 0076 A342     		cmp	r3, r4
 264:src/menu.c    ****       findlengths(posns, current_smallp);
 164              		.loc 1 264 7 view .LVU53
 165 0078 07AB     		add	r3, sp, #28
 263:src/menu.c    ****       findlengths(posns, current_smallp);
 166              		.loc 1 263 8 view .LVU54
ARM GAS  /tmp/cc67ZUo8.s 			page 9


 167 007a 05D0     		beq	.L12
 168              		.loc 1 264 7 is_stmt 1 view .LVU55
 169 007c 1846     		mov	r0, r3
 170              	.LVL14:
 171              		.loc 1 264 7 is_stmt 0 view .LVU56
 172 007e 0099     		ldr	r1, [sp]
 173 0080 0393     		str	r3, [sp, #12]
 174 0082 FFF7FEFF 		bl	findlengths
 175              	.LVL15:
 176 0086 039B     		ldr	r3, [sp, #12]
 265:src/menu.c    ****       posns_state = current_smallp;
 177              		.loc 1 265 7 is_stmt 1 view .LVU57
 178              	.LVL16:
 179              	.L12:
 266:src/menu.c    ****     }
 267:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 180              		.loc 1 267 5 view .LVU58
 181 0088 009A     		ldr	r2, [sp]
 182 008a 2846     		mov	r0, r5
 183 008c 05A9     		add	r1, sp, #20
 184 008e FFF7FEFF 		bl	unpackchar
 185              	.LVL17:
 268:src/menu.c    **** 
 269:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 186              		.loc 1 269 5 view .LVU59
 187              		.loc 1 269 15 view .LVU60
 188 0092 029B     		ldr	r3, [sp, #8]
 189 0094 03EB4704 		add	r4, r3, r7, lsl #1
 190 0098 294B     		ldr	r3, .L36+8
 191 009a 0DF1140B 		add	fp, sp, #20
 192 009e 1C44     		add	r4, r4, r3
 267:src/menu.c    **** 
 193              		.loc 1 267 5 is_stmt 0 view .LVU61
 194 00a0 4FF0050E 		mov	lr, #5
 195 00a4 A9EB0705 		sub	r5, r9, r7
 196              	.LVL18:
 197              	.L13:
 270:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 198              		.loc 1 270 17 is_stmt 1 view .LVU62
 199              		.loc 1 270 7 is_stmt 0 view .LVU63
 200 00a8 002E     		cmp	r6, #0
 201 00aa 1FDD     		ble	.L19
 271:src/menu.c    **** 	if (x+j >= xmax)
 202              		.loc 1 271 2 is_stmt 1 view .LVU64
 203              		.loc 1 271 5 is_stmt 0 view .LVU65
 204 00ac B945     		cmp	r9, r7
 205 00ae 1DDD     		ble	.L19
 206              	.LBB34:
 207              	.LBB35:
 208              	.LBB36:
 209              	.LBB37:
 272:src/menu.c    **** 	  break;
 273:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 274:src/menu.c    ****       }
 275:src/menu.c    ****     }
 276:src/menu.c    ****     x += width;
 277:src/menu.c    ****   }
ARM GAS  /tmp/cc67ZUo8.s 			page 10


 278:src/menu.c    **** }
 279:src/menu.c    **** 
 280:src/menu.c    **** 
 281:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 282:src/menu.c    **** 
 283:src/menu.c    **** int pixel_length(const char *s, int smallp)
 284:src/menu.c    **** {
 285:src/menu.c    ****   int len = 0;
 286:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 287:src/menu.c    ****   while (*s != '\0') {
 288:src/menu.c    ****     if (s[0] == '\007') {
 289:src/menu.c    ****       len += s[1] & 0x1F;
 290:src/menu.c    ****       s += 3;
 291:src/menu.c    ****       continue;
 292:src/menu.c    ****     }
 293:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 294:src/menu.c    ****   }
 295:src/menu.c    ****   return len;
 296:src/menu.c    **** }
 297:src/menu.c    **** */
 298:src/menu.c    **** 
 299:src/menu.c    **** 
 300:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 301:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 302:src/menu.c    ****   if (on) {
 303:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 304:src/menu.c    ****   }
 305:src/menu.c    ****   else {
 306:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 210              		.loc 1 306 25 view .LVU66
 211 00b0 0AFA0EFC 		lsl	ip, r10, lr
 212              		.loc 1 306 17 view .LVU67
 213 00b4 4FFA8CFC 		sxtb	ip, ip
 214              	.LBE37:
 215              	.LBE36:
 216              	.LBE35:
 217              	.LBE34:
 273:src/menu.c    ****       }
 218              		.loc 1 273 31 view .LVU68
 219 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 220              	.LBB47:
 221              	.LBB44:
 222              	.LBB41:
 223              	.LBB38:
 224              		.loc 1 306 17 view .LVU69
 225 00bc 6FEA0C08 		mvn	r8, ip
 226              	.LBE38:
 227              	.LBE41:
 228              	.LBE44:
 229              	.LBE47:
 270:src/menu.c    **** 	if (x+j >= xmax)
 230              		.loc 1 270 13 view .LVU70
 231 00c0 0023     		movs	r3, #0
 232 00c2 01E0     		b	.L14
 233              	.LVL19:
 234              	.L18:
 271:src/menu.c    **** 	  break;
ARM GAS  /tmp/cc67ZUo8.s 			page 11


 235              		.loc 1 271 5 view .LVU71
 236 00c4 9D42     		cmp	r5, r3
 237 00c6 11D0     		beq	.L19
 238              	.LVL20:
 239              	.L14:
 273:src/menu.c    ****       }
 240              		.loc 1 273 2 is_stmt 1 view .LVU72
 241              	.LBB48:
 242              	.LBI34:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 243              		.loc 1 300 6 view .LVU73
 244              	.LBB45:
 301:src/menu.c    ****   if (on) {
 245              		.loc 1 301 3 view .LVU74
 246              	.LBB42:
 247              	.LBI36:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 248              		.loc 1 300 6 view .LVU75
 249              	.LBB39:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 250              		.loc 1 302 3 view .LVU76
 251              	.LBE39:
 252              	.LBE42:
 301:src/menu.c    ****   if (on) {
 253              		.loc 1 301 6 is_stmt 0 view .LVU77
 254 00c8 DA19     		adds	r2, r3, r7
 255              	.LVL21:
 301:src/menu.c    ****   if (on) {
 256              		.loc 1 301 6 view .LVU78
 257 00ca C72A     		cmp	r2, #199
 258              	.LBE45:
 259              	.LBE48:
 273:src/menu.c    ****       }
 260              		.loc 1 273 46 view .LVU79
 261 00cc 40FA03F1 		asr	r1, r0, r3
 262              	.LBB49:
 263              	.LBB46:
 301:src/menu.c    ****   if (on) {
 264              		.loc 1 301 6 view .LVU80
 265 00d0 09D8     		bhi	.L16
 266              	.LBB43:
 267              	.LBB40:
 303:src/menu.c    ****   }
 268              		.loc 1 303 5 is_stmt 1 view .LVU81
 269              		.loc 1 306 5 view .LVU82
 303:src/menu.c    ****   }
 270              		.loc 1 303 17 is_stmt 0 view .LVU83
 271 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 272              	.LVL22:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 273              		.loc 1 302 6 view .LVU84
 274 00d6 C907     		lsls	r1, r1, #31
 303:src/menu.c    ****   }
 275              		.loc 1 303 17 view .LVU85
 276 00d8 4CBF     		ite	mi
 277 00da 4CEA0202 		orrmi	r2, ip, r2
 278              		.loc 1 306 17 view .LVU86
ARM GAS  /tmp/cc67ZUo8.s 			page 12


 279 00de 08EA0202 		andpl	r2, r8, r2
 280 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 281              	.L16:
 282              	.LBE40:
 283              	.LBE43:
 284              	.LBE46:
 285              	.LBE49:
 271:src/menu.c    **** 	  break;
 286              		.loc 1 271 2 is_stmt 1 view .LVU87
 287              	.LVL23:
 270:src/menu.c    **** 	if (x+j >= xmax)
 288              		.loc 1 270 26 view .LVU88
 270:src/menu.c    **** 	if (x+j >= xmax)
 289              		.loc 1 270 27 is_stmt 0 view .LVU89
 290 00e6 0133     		adds	r3, r3, #1
 291              	.LVL24:
 270:src/menu.c    **** 	if (x+j >= xmax)
 292              		.loc 1 270 17 is_stmt 1 view .LVU90
 270:src/menu.c    **** 	if (x+j >= xmax)
 293              		.loc 1 270 7 is_stmt 0 view .LVU91
 294 00e8 B342     		cmp	r3, r6
 295 00ea EBD1     		bne	.L18
 296              	.LVL25:
 297              	.L19:
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 298              		.loc 1 269 20 is_stmt 1 view .LVU92
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 299              		.loc 1 269 15 view .LVU93
 300 00ec 0EF1FF3E 		add	lr, lr, #-1
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 301              		.loc 1 269 5 is_stmt 0 view .LVU94
 302 00f0 BEF1FF3F 		cmp	lr, #-1
 303 00f4 0BF1010B 		add	fp, fp, #1
 304              	.LVL26:
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 305              		.loc 1 269 5 view .LVU95
 306 00f8 D6D1     		bne	.L13
 276:src/menu.c    ****   }
 307              		.loc 1 276 5 is_stmt 1 view .LVU96
 308              	.LBE50:
 224:src/menu.c    ****     int c;
 309              		.loc 1 224 10 is_stmt 0 view .LVU97
 310 00fa 019B     		ldr	r3, [sp, #4]
 311 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 312              	.LBB51:
 276:src/menu.c    ****   }
 313              		.loc 1 276 7 view .LVU98
 314 00fe 3744     		add	r7, r7, r6
 315              	.LVL27:
 276:src/menu.c    ****   }
 316              		.loc 1 276 7 view .LVU99
 317              	.LBE51:
 224:src/menu.c    ****     int c;
 318              		.loc 1 224 9 is_stmt 1 view .LVU100
 319 0100 85B1     		cbz	r5, .L1
 224:src/menu.c    ****     int c;
 320              		.loc 1 224 23 is_stmt 0 view .LVU101
ARM GAS  /tmp/cc67ZUo8.s 			page 13


 321 0102 B945     		cmp	r9, r7
 322 0104 0EDB     		blt	.L1
 323              	.LBB52:
 239:src/menu.c    ****       width = str[1] & 0x1F;
 324              		.loc 1 239 8 view .LVU102
 325 0106 072D     		cmp	r5, #7
 326              	.LBE52:
 327 0108 009C     		ldr	r4, [sp]
 328              	.LBB53:
 225:src/menu.c    ****     int width;
 329              		.loc 1 225 5 is_stmt 1 view .LVU103
 226:src/menu.c    ****     unsigned char cmap[6];
 330              		.loc 1 226 5 view .LVU104
 227:src/menu.c    **** 
 331              		.loc 1 227 5 view .LVU105
 229:src/menu.c    ****     int current_smallp;
 332              		.loc 1 229 5 view .LVU106
 230:src/menu.c    **** 
 333              		.loc 1 230 5 view .LVU107
 239:src/menu.c    ****       width = str[1] & 0x1F;
 334              		.loc 1 239 5 view .LVU108
 239:src/menu.c    ****       width = str[1] & 0x1F;
 335              		.loc 1 239 8 is_stmt 0 view .LVU109
 336 010a 9AD0     		beq	.L34
 337              	.LVL28:
 338              	.L5:
 255:src/menu.c    ****       real_width = width = charlengths(c);
 339              		.loc 1 255 7 is_stmt 1 view .LVU110
 256:src/menu.c    ****       current_smallp = smallp;
 340              		.loc 1 256 28 is_stmt 0 view .LVU111
 341 010c 2846     		mov	r0, r5
 342 010e FFF7FEFF 		bl	charlengths
 343              	.LVL29:
 255:src/menu.c    ****       real_width = width = charlengths(c);
 344              		.loc 1 255 31 view .LVU112
 345 0112 019B     		ldr	r3, [sp, #4]
 346 0114 0133     		adds	r3, r3, #1
 347 0116 0193     		str	r3, [sp, #4]
 348              	.LVL30:
 256:src/menu.c    ****       current_smallp = smallp;
 349              		.loc 1 256 7 is_stmt 1 view .LVU113
 257:src/menu.c    ****     }
 350              		.loc 1 257 7 view .LVU114
 257:src/menu.c    ****     }
 351              		.loc 1 257 22 is_stmt 0 view .LVU115
 352 0118 0023     		movs	r3, #0
 353              	.LVL31:
 257:src/menu.c    ****     }
 354              		.loc 1 257 22 view .LVU116
 355 011a 0093     		str	r3, [sp]
 356              	.LVL32:
 260:src/menu.c    ****       break;
 357              		.loc 1 260 11 view .LVU117
 358 011c C319     		adds	r3, r0, r7
 359              	.LVL33:
 260:src/menu.c    ****       break;
 360              		.loc 1 260 8 view .LVU118
ARM GAS  /tmp/cc67ZUo8.s 			page 14


 361 011e 9945     		cmp	r9, r3
 256:src/menu.c    ****       current_smallp = smallp;
 362              		.loc 1 256 28 view .LVU119
 363 0120 0646     		mov	r6, r0
 260:src/menu.c    ****       break;
 364              		.loc 1 260 5 is_stmt 1 view .LVU120
 260:src/menu.c    ****       break;
 365              		.loc 1 260 8 is_stmt 0 view .LVU121
 366 0122 A7DA     		bge	.L35
 367              	.LVL34:
 368              	.L1:
 260:src/menu.c    ****       break;
 369              		.loc 1 260 8 view .LVU122
 370              	.LBE53:
 278:src/menu.c    **** 
 371              		.loc 1 278 1 view .LVU123
 372 0124 0DF5097D 		add	sp, sp, #548
 373              		.cfi_remember_state
 374              		.cfi_def_cfa_offset 36
 375              		@ sp needed
 376 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 377              	.LVL35:
 378              	.L28:
 379              		.cfi_restore_state
 380              	.LBB54:
 250:src/menu.c    ****       str += 3;
 381              		.loc 1 250 7 is_stmt 1 view .LVU124
 250:src/menu.c    ****       str += 3;
 382              		.loc 1 250 11 is_stmt 0 view .LVU125
 383 012c 019B     		ldr	r3, [sp, #4]
 384 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 243:src/menu.c    **** 	break;
 385              		.loc 1 243 33 view .LVU126
 386 0130 0023     		movs	r3, #0
 387 0132 0093     		str	r3, [sp]
 388 0134 95E7     		b	.L9
 389              	.L37:
 390 0136 00BF     		.align	2
 391              	.L36:
 392 0138 00000000 		.word	forceDispPlot
 393 013c 00000000 		.word	RectPolConv
 394 0140 00000000 		.word	.LANCHOR0
 395              	.LBE54:
 396              		.cfi_endproc
 397              	.LFE25:
 399              		.section	.text.set_menu,"ax",%progbits
 400              		.align	1
 401              		.p2align 2,,3
 402              		.global	set_menu
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu fpv4-sp-d16
 408              	set_menu:
 409              	.LVL36:
 410              	.LFB3:
   3:src/menu.c    ****   int m = current_menu;
ARM GAS  /tmp/cc67ZUo8.s 			page 15


 411              		.loc 1 3 32 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              		@ link register save eliminated.
   4:src/menu.c    ****   if (new_menu == current_menu) {
 416              		.loc 1 4 3 view .LVU128
   4:src/menu.c    ****   if (new_menu == current_menu) {
 417              		.loc 1 4 7 is_stmt 0 view .LVU129
 418 0000 084A     		ldr	r2, .L43
 419 0002 1368     		ldr	r3, [r2]
 420              	.LVL37:
   5:src/menu.c    ****     current_menu = 0;
 421              		.loc 1 5 3 is_stmt 1 view .LVU130
   5:src/menu.c    ****     current_menu = 0;
 422              		.loc 1 5 6 is_stmt 0 view .LVU131
 423 0004 8342     		cmp	r3, r0
 424 0006 07D0     		beq	.L42
   8:src/menu.c    ****     current_menu = last_menu;
 425              		.loc 1 8 8 is_stmt 1 view .LVU132
   9:src/menu.c    ****   }
 426              		.loc 1 9 18 is_stmt 0 view .LVU133
 427 0008 0749     		ldr	r1, .L43+4
   8:src/menu.c    ****     current_menu = last_menu;
 428              		.loc 1 8 11 view .LVU134
 429 000a B0F1FF3F 		cmp	r0, #-1
   9:src/menu.c    ****   }
 430              		.loc 1 9 5 is_stmt 1 view .LVU135
   9:src/menu.c    ****   }
 431              		.loc 1 9 18 is_stmt 0 view .LVU136
 432 000e 08BF     		it	eq
 433 0010 0868     		ldreq	r0, [r1]
 434              	.LVL38:
  12:src/menu.c    ****   }
 435              		.loc 1 12 5 is_stmt 1 view .LVU137
  12:src/menu.c    ****   }
 436              		.loc 1 12 18 is_stmt 0 view .LVU138
 437 0012 1060     		str	r0, [r2]
  14:src/menu.c    **** }
 438              		.loc 1 14 3 is_stmt 1 view .LVU139
  14:src/menu.c    **** }
 439              		.loc 1 14 13 is_stmt 0 view .LVU140
 440 0014 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 441              		.loc 1 15 1 view .LVU141
 442 0016 7047     		bx	lr
 443              	.LVL39:
 444              	.L42:
   6:src/menu.c    ****   }
 445              		.loc 1 6 5 is_stmt 1 view .LVU142
   6:src/menu.c    ****   }
 446              		.loc 1 6 18 is_stmt 0 view .LVU143
 447 0018 0021     		movs	r1, #0
 448 001a 1160     		str	r1, [r2]
 449 001c 0249     		ldr	r1, .L43+4
  14:src/menu.c    **** }
 450              		.loc 1 14 3 is_stmt 1 view .LVU144
ARM GAS  /tmp/cc67ZUo8.s 			page 16


  14:src/menu.c    **** }
 451              		.loc 1 14 13 is_stmt 0 view .LVU145
 452 001e 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 453              		.loc 1 15 1 view .LVU146
 454 0020 7047     		bx	lr
 455              	.L44:
 456 0022 00BF     		.align	2
 457              	.L43:
 458 0024 00000000 		.word	.LANCHOR1
 459 0028 00000000 		.word	.LANCHOR2
 460              		.cfi_endproc
 461              	.LFE3:
 463              		.section	.text.get_menu,"ax",%progbits
 464              		.align	1
 465              		.p2align 2,,3
 466              		.global	get_menu
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv4-sp-d16
 472              	get_menu:
 473              	.LFB4:
  17:src/menu.c    ****   return current_menu;
 474              		.loc 1 17 17 is_stmt 1 view -0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
  18:src/menu.c    **** }
 479              		.loc 1 18 3 view .LVU148
  18:src/menu.c    **** }
 480              		.loc 1 18 10 is_stmt 0 view .LVU149
 481 0000 014B     		ldr	r3, .L46
  19:src/menu.c    **** 
 482              		.loc 1 19 1 view .LVU150
 483 0002 1868     		ldr	r0, [r3]
 484 0004 7047     		bx	lr
 485              	.L47:
 486 0006 00BF     		.align	2
 487              	.L46:
 488 0008 00000000 		.word	.LANCHOR1
 489              		.cfi_endproc
 490              	.LFE4:
 492              		.section	.text.set_last_menu,"ax",%progbits
 493              		.align	1
 494              		.p2align 2,,3
 495              		.global	set_last_menu
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu fpv4-sp-d16
 501              	set_last_menu:
 502              	.LFB6:
  25:src/menu.c    ****   set_menu (last_menu);
 503              		.loc 1 25 23 is_stmt 1 view -0
 504              		.cfi_startproc
ARM GAS  /tmp/cc67ZUo8.s 			page 17


 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
  26:src/menu.c    **** }
 508              		.loc 1 26 3 view .LVU152
 509 0000 044B     		ldr	r3, .L52
 510              	.LBB55:
 511              	.LBB56:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 512              		.loc 1 4 7 is_stmt 0 view .LVU153
 513 0002 0549     		ldr	r1, .L52+4
 514              	.LBE56:
 515              	.LBE55:
  26:src/menu.c    **** }
 516              		.loc 1 26 3 view .LVU154
 517 0004 1868     		ldr	r0, [r3]
 518              	.LVL40:
 519              	.LBB58:
 520              	.LBI55:
   3:src/menu.c    ****   int m = current_menu;
 521              		.loc 1 3 6 is_stmt 1 view .LVU155
 522              	.LBB57:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 523              		.loc 1 4 3 view .LVU156
   4:src/menu.c    ****   if (new_menu == current_menu) {
 524              		.loc 1 4 7 is_stmt 0 view .LVU157
 525 0006 0A68     		ldr	r2, [r1]
 526              	.LVL41:
   5:src/menu.c    ****     current_menu = 0;
 527              		.loc 1 5 3 is_stmt 1 view .LVU158
  14:src/menu.c    **** }
 528              		.loc 1 14 13 is_stmt 0 view .LVU159
 529 0008 1A60     		str	r2, [r3]
   5:src/menu.c    ****     current_menu = 0;
 530              		.loc 1 5 6 view .LVU160
 531 000a 9042     		cmp	r0, r2
   6:src/menu.c    ****   }
 532              		.loc 1 6 5 is_stmt 1 view .LVU161
   6:src/menu.c    ****   }
 533              		.loc 1 6 18 is_stmt 0 view .LVU162
 534 000c 08BF     		it	eq
 535 000e 0020     		moveq	r0, #0
 536              	.LVL42:
   8:src/menu.c    ****     current_menu = last_menu;
 537              		.loc 1 8 8 is_stmt 1 view .LVU163
  12:src/menu.c    ****   }
 538              		.loc 1 12 18 is_stmt 0 view .LVU164
 539 0010 0860     		str	r0, [r1]
  14:src/menu.c    **** }
 540              		.loc 1 14 3 is_stmt 1 view .LVU165
 541              	.LVL43:
  14:src/menu.c    **** }
 542              		.loc 1 14 3 is_stmt 0 view .LVU166
 543              	.LBE57:
 544              	.LBE58:
  27:src/menu.c    **** 
 545              		.loc 1 27 1 view .LVU167
ARM GAS  /tmp/cc67ZUo8.s 			page 18


 546 0012 7047     		bx	lr
 547              	.L53:
 548              		.align	2
 549              	.L52:
 550 0014 00000000 		.word	.LANCHOR2
 551 0018 00000000 		.word	.LANCHOR1
 552              		.cfi_endproc
 553              	.LFE6:
 555              		.section	.text.mdot,"ax",%progbits
 556              		.align	1
 557              		.p2align 2,,3
 558              		.global	mdot
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu fpv4-sp-d16
 564              	mdot:
 565              	.LVL44:
 566              	.LFB8:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 567              		.loc 1 300 40 is_stmt 1 view -0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 301:src/menu.c    ****   if (on) {
 572              		.loc 1 301 3 view .LVU169
 301:src/menu.c    ****   if (on) {
 573              		.loc 1 301 6 is_stmt 0 view .LVU170
 574 0000 C728     		cmp	r0, #199
 575 0002 1AD8     		bhi	.L58
 576              	.LVL45:
 577              	.LBB61:
 578              	.LBI61:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 579              		.loc 1 300 6 is_stmt 1 view .LVU171
 580              	.LBB62:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 581              		.loc 1 302 3 view .LVU172
 582              	.LBE62:
 583              	.LBE61:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 584              		.loc 1 300 40 is_stmt 0 view .LVU173
 585 0004 10B4     		push	{r4}
 586              		.cfi_def_cfa_offset 4
 587              		.cfi_offset 4, -4
 588              	.LBB65:
 589              	.LBB63:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 590              		.loc 1 302 6 view .LVU174
 591 0006 63B9     		cbnz	r3, .L61
 592              		.loc 1 306 5 is_stmt 1 view .LVU175
 593              		.loc 1 306 17 is_stmt 0 view .LVU176
 594 0008 0C4B     		ldr	r3, .L62
 595              	.LVL46:
 596              		.loc 1 306 17 view .LVU177
 597 000a 03EB4000 		add	r0, r3, r0, lsl #1
ARM GAS  /tmp/cc67ZUo8.s 			page 19


 598              	.LVL47:
 599              		.loc 1 306 25 view .LVU178
 600 000e 0124     		movs	r4, #1
 601              		.loc 1 306 17 view .LVU179
 602 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 603              		.loc 1 306 25 view .LVU180
 604 0012 04FA01F1 		lsl	r1, r4, r1
 605              	.LVL48:
 606              		.loc 1 306 17 view .LVU181
 607 0016 23EA0101 		bic	r1, r3, r1
 608 001a 8154     		strb	r1, [r0, r2]
 609              	.LVL49:
 610              		.loc 1 306 17 view .LVU182
 611              	.LBE63:
 612              	.LBE65:
 307:src/menu.c    ****   }
 308:src/menu.c    **** }
 613              		.loc 1 308 1 view .LVU183
 614 001c 5DF8044B 		ldr	r4, [sp], #4
 615              		.cfi_remember_state
 616              		.cfi_restore 4
 617              		.cfi_def_cfa_offset 0
 618 0020 7047     		bx	lr
 619              	.LVL50:
 620              	.L61:
 621              		.cfi_restore_state
 622              	.LBB66:
 623              	.LBB64:
 303:src/menu.c    ****   }
 624              		.loc 1 303 5 is_stmt 1 view .LVU184
 303:src/menu.c    ****   }
 625              		.loc 1 303 17 is_stmt 0 view .LVU185
 626 0022 064B     		ldr	r3, .L62
 627              	.LVL51:
 303:src/menu.c    ****   }
 628              		.loc 1 303 17 view .LVU186
 629 0024 03EB4000 		add	r0, r3, r0, lsl #1
 630              	.LVL52:
 303:src/menu.c    ****   }
 631              		.loc 1 303 24 view .LVU187
 632 0028 0124     		movs	r4, #1
 303:src/menu.c    ****   }
 633              		.loc 1 303 17 view .LVU188
 634 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 303:src/menu.c    ****   }
 635              		.loc 1 303 24 view .LVU189
 636 002c 04FA01F1 		lsl	r1, r4, r1
 637              	.LVL53:
 303:src/menu.c    ****   }
 638              		.loc 1 303 17 view .LVU190
 639 0030 1943     		orrs	r1, r1, r3
 640 0032 8154     		strb	r1, [r0, r2]
 641              	.LBE64:
 642              	.LBE66:
 643              		.loc 1 308 1 view .LVU191
 644 0034 5DF8044B 		ldr	r4, [sp], #4
 645              		.cfi_restore 4
ARM GAS  /tmp/cc67ZUo8.s 			page 20


 646              		.cfi_def_cfa_offset 0
 647 0038 7047     		bx	lr
 648              	.LVL54:
 649              	.L58:
 650              		.loc 1 308 1 view .LVU192
 651 003a 7047     		bx	lr
 652              	.L63:
 653              		.align	2
 654              	.L62:
 655 003c 00000000 		.word	.LANCHOR0
 656              		.cfi_endproc
 657              	.LFE8:
 659              		.section	.text.display_menu,"ax",%progbits
 660              		.align	1
 661              		.p2align 2,,3
 662              		.global	display_menu
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu fpv4-sp-d16
 668              	display_menu:
 669              	.LVL55:
 670              	.LFB9:
 309:src/menu.c    **** 
 310:src/menu.c    **** 
 311:src/menu.c    **** void display_menu (int current_menu) {
 671              		.loc 1 311 38 is_stmt 1 view -0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 312:src/menu.c    ****   int len = 0;
 675              		.loc 1 312 3 view .LVU194
 313:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 676              		.loc 1 313 3 view .LVU195
 311:src/menu.c    ****   int len = 0;
 677              		.loc 1 311 38 is_stmt 0 view .LVU196
 678 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 679              		.cfi_def_cfa_offset 36
 680              		.cfi_offset 4, -36
 681              		.cfi_offset 5, -32
 682              		.cfi_offset 6, -28
 683              		.cfi_offset 7, -24
 684              		.cfi_offset 8, -20
 685              		.cfi_offset 9, -16
 686              		.cfi_offset 10, -12
 687              		.cfi_offset 11, -8
 688              		.cfi_offset 14, -4
 689 0004 83B0     		sub	sp, sp, #12
 690              		.cfi_def_cfa_offset 48
 691              		.loc 1 313 3 view .LVU197
 692 0006 0024     		movs	r4, #0
 693 0008 404F     		ldr	r7, .L82
 694 000a 0094     		str	r4, [sp]
 695 000c 3423     		movs	r3, #52
 696 000e 4FF4C872 		mov	r2, #400
 697 0012 BC21     		movs	r1, #188
 311:src/menu.c    ****   int len = 0;
ARM GAS  /tmp/cc67ZUo8.s 			page 21


 698              		.loc 1 311 38 view .LVU198
 699 0014 0646     		mov	r6, r0
 700              		.loc 1 313 3 view .LVU199
 701 0016 2046     		mov	r0, r4
 702              	.LVL56:
 703              		.loc 1 313 3 view .LVU200
 704 0018 B847     		blx	r7
 705              	.LVL57:
 314:src/menu.c    ****   //  if (current_menu == 0) return; // Menu 0 is blank
 315:src/menu.c    ****   // Not blank now - includes arrow and cmplx like all the others.
 316:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 706              		.loc 1 316 3 is_stmt 1 view .LVU201
 707 001a 3D4D     		ldr	r5, .L82+4
 708 001c FF23     		movs	r3, #255
 709 001e 0093     		str	r3, [sp]
 710 0020 4FF4C872 		mov	r2, #400
 711 0024 0123     		movs	r3, #1
 712 0026 BC21     		movs	r1, #188
 713 0028 2046     		mov	r0, r4
 714 002a B847     		blx	r7
 715              	.LVL58:
 317:src/menu.c    ****   //Clear previous menu
 318:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 716              		.loc 1 318 3 view .LVU202
 717              	.LBB67:
 718              		.loc 1 318 8 view .LVU203
 719              		.loc 1 318 21 view .LVU204
 319:src/menu.c    ****     mdots[col][0] = 0;
 720              		.loc 1 319 19 is_stmt 0 view .LVU205
 721 002c 2246     		mov	r2, r4
 722 002e 05F5C871 		add	r1, r5, #400
 723              	.LBE67:
 316:src/menu.c    ****   //Clear previous menu
 724              		.loc 1 316 3 view .LVU206
 725 0032 2B46     		mov	r3, r5
 726              	.LVL59:
 727              	.L65:
 728              	.LBB68:
 729              		.loc 1 319 5 is_stmt 1 discriminator 3 view .LVU207
 730              		.loc 1 319 19 is_stmt 0 discriminator 3 view .LVU208
 731 0034 1A70     		strb	r2, [r3]
 320:src/menu.c    ****     mdots[col][1] = 0;
 732              		.loc 1 320 5 is_stmt 1 discriminator 3 view .LVU209
 733              		.loc 1 320 19 is_stmt 0 discriminator 3 view .LVU210
 734 0036 5A70     		strb	r2, [r3, #1]
 318:src/menu.c    ****     mdots[col][0] = 0;
 735              		.loc 1 318 32 is_stmt 1 discriminator 3 view .LVU211
 318:src/menu.c    ****     mdots[col][0] = 0;
 736              		.loc 1 318 21 discriminator 3 view .LVU212
 737 0038 0233     		adds	r3, r3, #2
 318:src/menu.c    ****     mdots[col][0] = 0;
 738              		.loc 1 318 3 is_stmt 0 discriminator 3 view .LVU213
 739 003a 9942     		cmp	r1, r3
 740 003c FAD1     		bne	.L65
 741 003e 354B     		ldr	r3, .L82+8
 742 0040 D022     		movs	r2, #208
 743 0042 02FB0636 		mla	r6, r2, r6, r3
ARM GAS  /tmp/cc67ZUo8.s 			page 22


 744              	.LVL60:
 318:src/menu.c    ****     mdots[col][0] = 0;
 745              		.loc 1 318 3 discriminator 3 view .LVU214
 746 0046 2036     		adds	r6, r6, #32
 318:src/menu.c    ****     mdots[col][0] = 0;
 747              		.loc 1 318 3 view .LVU215
 748 0048 0024     		movs	r4, #0
 749              	.LVL61:
 750              	.L66:
 318:src/menu.c    ****     mdots[col][0] = 0;
 751              		.loc 1 318 3 view .LVU216
 752              	.LBE68:
 753              	.LBB69:
 321:src/menu.c    ****   }
 322:src/menu.c    **** 
 323:src/menu.c    ****   // Draw menu items
 324:src/menu.c    ****   // 
 325:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 326:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 327:src/menu.c    ****     // Unshifted first
 328:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small fo
 754              		.loc 1 328 5 is_stmt 1 view .LVU217
 755              		.loc 1 328 11 is_stmt 0 view .LVU218
 756 004a 0021     		movs	r1, #0
 757 004c 3046     		mov	r0, r6
 758 004e FFF7FEFF 		bl	pixel_length
 759              	.LVL62:
 329:src/menu.c    ****     /*
 330:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 331:src/menu.c    ****     */
 332:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 )
 760              		.loc 1 332 5 is_stmt 1 view .LVU219
 761              		.loc 1 332 87 is_stmt 0 view .LVU220
 762 0052 C0F12000 		rsb	r0, r0, #32
 763              	.LVL63:
 764              		.loc 1 332 93 view .LVU221
 765 0056 00EBD070 		add	r0, r0, r0, lsr #31
 766              		.loc 1 332 5 view .LVU222
 767 005a 04EB6001 		add	r1, r4, r0, asr #1
 768 005e 0022     		movs	r2, #0
 769 0060 3046     		mov	r0, r6
 770 0062 06F10807 		add	r7, r6, #8
 771 0066 FFF7FEFF 		bl	set_menu_label.constprop.0
 772              	.LVL64:
 333:src/menu.c    ****     // Now shifted ...	
 334:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small font
 773              		.loc 1 334 5 is_stmt 1 view .LVU223
 774              		.loc 1 334 11 is_stmt 0 view .LVU224
 775 006a 0021     		movs	r1, #0
 776 006c 3846     		mov	r0, r7
 777 006e FFF7FEFF 		bl	pixel_length
 778              	.LVL65:
 335:src/menu.c    ****     len = item*32 + (32-len)/2;
 779              		.loc 1 335 5 is_stmt 1 view .LVU225
 780              		.loc 1 335 24 is_stmt 0 view .LVU226
 781 0072 C0F12000 		rsb	r0, r0, #32
 782              	.LVL66:
ARM GAS  /tmp/cc67ZUo8.s 			page 23


 783              		.loc 1 335 29 view .LVU227
 784 0076 00EBD070 		add	r0, r0, r0, lsr #31
 785              	.LVL67:
 336:src/menu.c    ****     if (len<0) len = 0;
 786              		.loc 1 336 5 is_stmt 1 view .LVU228
 335:src/menu.c    ****     len = item*32 + (32-len)/2;
 787              		.loc 1 335 9 is_stmt 0 view .LVU229
 788 007a 04EB6001 		add	r1, r4, r0, asr #1
 789              	.LVL68:
 335:src/menu.c    ****     len = item*32 + (32-len)/2;
 790              		.loc 1 335 9 view .LVU230
 791 007e C729     		cmp	r1, #199
 792 0080 A8BF     		it	ge
 793 0082 C721     		movge	r1, #199
 794              	.LVL69:
 337:src/menu.c    ****     if (len>199) len = 199;
 338:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 795              		.loc 1 338 5 is_stmt 1 view .LVU231
 796 0084 21EAE171 		bic	r1, r1, r1, asr #31
 797              	.LVL70:
 798              		.loc 1 338 5 is_stmt 0 view .LVU232
 799 0088 3846     		mov	r0, r7
 800 008a 2034     		adds	r4, r4, #32
 801 008c 0122     		movs	r2, #1
 802 008e FFF7FEFF 		bl	set_menu_label.constprop.0
 803              	.LVL71:
 325:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 804              		.loc 1 325 32 is_stmt 1 view .LVU233
 325:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 805              		.loc 1 325 22 view .LVU234
 325:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 806              		.loc 1 325 3 is_stmt 0 view .LVU235
 807 0092 C02C     		cmp	r4, #192
 808 0094 06F12006 		add	r6, r6, #32
 809 0098 D7D1     		bne	.L66
 810 009a 1F4E     		ldr	r6, .L82+12
 811              	.LBE69:
 812              	.LBB70:
 813              	.LBB71:
 339:src/menu.c    ****   }
 340:src/menu.c    **** 
 341:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 342:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 343:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 344:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 345:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 814              		.loc 1 345 2 view .LVU236
 815 009c DFF86C90 		ldr	r9, .L82
 816 00a0 6FEA050A 		mvn	r10, r5
 817 00a4 06F5C87B 		add	fp, r6, #400
 818              	.LBE71:
 819              	.LBE70:
 820              	.LBB73:
 325:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 821              		.loc 1 325 3 view .LVU237
 822 00a8 771E     		subs	r7, r6, #1
 823              	.LBE73:
ARM GAS  /tmp/cc67ZUo8.s 			page 24


 824              	.LBB74:
 825              	.LBB72:
 826              		.loc 1 345 2 view .LVU238
 827 00aa 4FF0FF08 		mov	r8, #255
 828              	.L67:
 829              	.LVL72:
 342:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 830              		.loc 1 342 23 is_stmt 1 view .LVU239
 831 00ae 0AEB0605 		add	r5, r10, r6
 342:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 832              		.loc 1 342 14 is_stmt 0 view .LVU240
 833 00b2 0024     		movs	r4, #0
 834              	.LVL73:
 835              	.L70:
 343:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 836              		.loc 1 343 7 is_stmt 1 view .LVU241
 837              		.loc 1 345 2 view .LVU242
 343:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 838              		.loc 1 343 22 is_stmt 0 view .LVU243
 839 00b4 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 343:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 840              		.loc 1 343 40 view .LVU244
 841 00b8 2241     		asrs	r2, r2, r4
 842              		.loc 1 345 2 view .LVU245
 843 00ba A4EB8401 		sub	r1, r4, r4, lsl #2
 844 00be 0323     		movs	r3, #3
 343:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 845              		.loc 1 343 10 view .LVU246
 846 00c0 12F0010F 		tst	r2, #1
 847              		.loc 1 345 2 view .LVU247
 848 00c4 01F1E901 		add	r1, r1, #233
 849 00c8 1A46     		mov	r2, r3
 850 00ca 2846     		mov	r0, r5
 343:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 851              		.loc 1 343 10 view .LVU248
 852 00cc 02D0     		beq	.L68
 853              		.loc 1 345 2 view .LVU249
 854 00ce CDF80080 		str	r8, [sp]
 855 00d2 C847     		blx	r9
 856              	.LVL74:
 857              	.L68:
 346:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 858              		.loc 1 346 7 is_stmt 1 view .LVU250
 347:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 348:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 859              		.loc 1 348 2 view .LVU251
 346:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 860              		.loc 1 346 22 is_stmt 0 view .LVU252
 861 00d4 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 346:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 862              		.loc 1 346 40 view .LVU253
 863 00d6 2241     		asrs	r2, r2, r4
 864              		.loc 1 348 2 view .LVU254
 865 00d8 A4EB8401 		sub	r1, r4, r4, lsl #2
 866 00dc 0323     		movs	r3, #3
 346:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 867              		.loc 1 346 10 view .LVU255
ARM GAS  /tmp/cc67ZUo8.s 			page 25


 868 00de 12F0010F 		tst	r2, #1
 869              		.loc 1 348 2 view .LVU256
 870 00e2 01F1D001 		add	r1, r1, #208
 871 00e6 1A46     		mov	r2, r3
 872 00e8 04F10104 		add	r4, r4, #1
 873              	.LVL75:
 874              		.loc 1 348 2 view .LVU257
 875 00ec 2846     		mov	r0, r5
 346:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 876              		.loc 1 346 10 view .LVU258
 877 00ee 02D0     		beq	.L69
 878              		.loc 1 348 2 view .LVU259
 879 00f0 CDF80080 		str	r8, [sp]
 880 00f4 C847     		blx	r9
 881              	.LVL76:
 882              	.L69:
 342:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 883              		.loc 1 342 32 is_stmt 1 discriminator 2 view .LVU260
 342:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 884              		.loc 1 342 23 discriminator 2 view .LVU261
 342:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 885              		.loc 1 342 5 is_stmt 0 discriminator 2 view .LVU262
 886 00f6 062C     		cmp	r4, #6
 887 00f8 DCD1     		bne	.L70
 888              	.LBE72:
 341:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 889              		.loc 1 341 32 is_stmt 1 discriminator 2 view .LVU263
 341:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 890              		.loc 1 341 21 discriminator 2 view .LVU264
 891 00fa 0236     		adds	r6, r6, #2
 341:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 892              		.loc 1 341 3 is_stmt 0 discriminator 2 view .LVU265
 893 00fc B345     		cmp	fp, r6
 894 00fe 07F10207 		add	r7, r7, #2
 895 0102 D4D1     		bne	.L67
 896              	.LBE74:
 349:src/menu.c    ****     }
 350:src/menu.c    ****   }
 351:src/menu.c    **** }
 897              		.loc 1 351 1 view .LVU266
 898 0104 03B0     		add	sp, sp, #12
 899              		.cfi_def_cfa_offset 36
 900              		@ sp needed
 901 0106 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 902              	.LVL77:
 903              	.L83:
 904              		.loc 1 351 1 view .LVU267
 905 010a 00BF     		.align	2
 906              	.L82:
 907 010c 3D020008 		.word	134218301
 908 0110 00000000 		.word	.LANCHOR0
 909 0114 00000000 		.word	.LANCHOR3
 910 0118 01000000 		.word	.LANCHOR0+1
 911              		.cfi_endproc
 912              	.LFE9:
 914              		.section	.text.display_current_menu,"ax",%progbits
 915              		.align	1
ARM GAS  /tmp/cc67ZUo8.s 			page 26


 916              		.p2align 2,,3
 917              		.global	display_current_menu
 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu fpv4-sp-d16
 923              	display_current_menu:
 924              	.LFB5:
  21:src/menu.c    ****   display_menu (current_menu);
 925              		.loc 1 21 30 is_stmt 1 view -0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
  22:src/menu.c    **** }
 930              		.loc 1 22 3 view .LVU269
 931 0000 014B     		ldr	r3, .L85
 932 0002 1868     		ldr	r0, [r3]
 933 0004 FFF7FEBF 		b	display_menu
 934              	.LVL78:
 935              	.L86:
 936              		.align	2
 937              	.L85:
 938 0008 00000000 		.word	.LANCHOR1
 939              		.cfi_endproc
 940              	.LFE5:
 942              		.section	.text.shutdown,"ax",%progbits
 943              		.align	1
 944              		.p2align 2,,3
 945              		.global	shutdown
 946              		.syntax unified
 947              		.thumb
 948              		.thumb_func
 949              		.fpu fpv4-sp-d16
 951              	shutdown:
 952              	.LFB11:
 953              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
ARM GAS  /tmp/cc67ZUo8.s 			page 27


  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** const uint8_t mid_menu[] = {
  46:src/console.c ****     MI_SYSTEM_ENTER,
  47:src/console.c ****     MI_MSC,
  48:src/console.c ****     0 }; // Terminator
  49:src/console.c **** 
  50:src/console.c **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  51:src/console.c **** 
  52:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  53:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  54:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  55:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  56:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  57:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  58:src/console.c **** 
  59:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  60:src/console.c **** 
  61:src/console.c **** static struct _ndmap remap (const int c) {
  62:src/console.c **** 
  63:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  64:src/console.c **** 
  65:src/console.c **** #include "keytran.c"
  66:src/console.c **** 
  67:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  68:src/console.c **** 
  69:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  70:src/console.c **** 
  71:src/console.c ****   if (c == 44 ) {
  72:src/console.c ****     // Start click 
  73:src/console.c ****     start_buzzer_freq(4400); sys_delay(10); stop_buzzer();
  74:src/console.c ****     // Make screenshot - allow to report errors
  75:src/console.c ****     if ( create_screenshot(1) == 2 ) {
  76:src/console.c ****       // Was error just wait for confirmation
  77:src/console.c ****       wait_for_key_press();
ARM GAS  /tmp/cc67ZUo8.s 			page 28


  78:src/console.c ****     }
  79:src/console.c ****     // End click
  80:src/console.c ****     start_buzzer_freq(8800); sys_delay(10); stop_buzzer();
  81:src/console.c ****     return no_key;
  82:src/console.c ****   }
  83:src/console.c **** 
  84:src/console.c ****   
  85:src/console.c ****   if ( get_alpha_state() ) {
  86:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  87:src/console.c ****       switch (cur_shift()) { 
  88:src/console.c ****       case SHIFT_N:
  89:src/console.c **** 	return mapping_none[c]; // N -> F
  90:src/console.c **** 	break;
  91:src/console.c ****       case SHIFT_F:
  92:src/console.c **** 	return mapping_fshift[c]; // F -> G
  93:src/console.c **** 	break;
  94:src/console.c ****       case SHIFT_G:
  95:src/console.c **** 	return h_shift; // G -> H
  96:src/console.c **** 	break;
  97:src/console.c ****       case SHIFT_H:
  98:src/console.c **** 	return h_shift; // H -> N
  99:src/console.c ****       default:
 100:src/console.c **** 	return no_change;
 101:src/console.c ****       }
 102:src/console.c ****     }
 103:src/console.c ****     return mapping_alpha [c];
 104:src/console.c ****   }
 105:src/console.c ****     
 106:src/console.c ****   switch (c) {
 107:src/console.c ****   case KEY_F1:
 108:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
 109:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 110:src/console.c ****   case KEY_F2:
 111:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
 112:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 113:src/console.c ****   case KEY_F3:
 114:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 115:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 116:src/console.c ****   case KEY_F4:
 117:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 118:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 119:src/console.c ****   case KEY_F5:
 120:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 121:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 122:src/console.c ****   case KEY_F6:
 123:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 124:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 125:src/console.c ****   }
 126:src/console.c ****   
 127:src/console.c ****   switch (cur_shift()) {
 128:src/console.c ****   case SHIFT_N:    
 129:src/console.c ****     return mapping_none[c];
 130:src/console.c ****     break;
 131:src/console.c ****   case SHIFT_F:
 132:src/console.c ****     return mapping_fshift[c];
 133:src/console.c ****     break;
 134:src/console.c ****   case SHIFT_G:
ARM GAS  /tmp/cc67ZUo8.s 			page 29


 135:src/console.c ****     return mapping_gshift[c];
 136:src/console.c ****     break;
 137:src/console.c ****   default:
 138:src/console.c ****     return no_change;
 139:src/console.c ****   }
 140:src/console.c **** }
 141:src/console.c **** 
 142:src/console.c **** #endif
 143:src/console.c **** 
 144:src/console.c **** void shutdown( void )
 145:src/console.c **** {
 954              		.loc 2 145 1 view -0
 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 0
 957              		@ frame_needed = 0, uses_anonymous_args = 0
 958              		@ link register save eliminated.
 146:src/console.c **** #ifndef DM42
 147:src/console.c ****   checksum_all();
 148:src/console.c ****   setuptty( 1 );
 149:src/console.c ****   save_statefile( NULL );
 150:src/console.c ****   exit( 0 );
 151:src/console.c **** #else
 152:src/console.c ****   //  save_ram_file(0);
 153:src/console.c ****   SET_ST(STAT_PGM_END);
 959              		.loc 2 153 3 view .LVU271
 960 0000 024A     		ldr	r2, .L88
 961 0002 1368     		ldr	r3, [r2]
 962 0004 43F40073 		orr	r3, r3, #512
 963 0008 1360     		str	r3, [r2]
 154:src/console.c **** #endif
 155:src/console.c **** }
 964              		.loc 2 155 1 is_stmt 0 view .LVU272
 965 000a 7047     		bx	lr
 966              	.L89:
 967              		.align	2
 968              	.L88:
 969 000c 00200010 		.word	268443648
 970              		.cfi_endproc
 971              	.LFE11:
 973              		.section	.text.is_key_pressed,"ax",%progbits
 974              		.align	1
 975              		.p2align 2,,3
 976              		.global	is_key_pressed
 977              		.syntax unified
 978              		.thumb
 979              		.thumb_func
 980              		.fpu fpv4-sp-d16
 982              	is_key_pressed:
 983              	.LFB12:
 156:src/console.c **** 
 157:src/console.c **** 
 158:src/console.c **** /*
 159:src/console.c ****  *  Dummies
 160:src/console.c ****  */
 161:src/console.c **** int is_key_pressed(void) 
 162:src/console.c **** {
 984              		.loc 2 162 1 is_stmt 1 view -0
ARM GAS  /tmp/cc67ZUo8.s 			page 30


 985              		.cfi_startproc
 986              		@ args = 0, pretend = 0, frame = 0
 987              		@ frame_needed = 0, uses_anonymous_args = 0
 163:src/console.c **** #ifdef DM42
 164:src/console.c ****   return !key_empty();
 988              		.loc 2 164 3 view .LVU274
 162:src/console.c **** #ifdef DM42
 989              		.loc 2 162 1 is_stmt 0 view .LVU275
 990 0000 08B5     		push	{r3, lr}
 991              		.cfi_def_cfa_offset 8
 992              		.cfi_offset 3, -8
 993              		.cfi_offset 14, -4
 994              		.loc 2 164 11 view .LVU276
 995 0002 034B     		ldr	r3, .L92
 996 0004 9847     		blx	r3
 997              	.LVL79:
 165:src/console.c **** #else
 166:src/console.c ****   return 0;
 167:src/console.c **** #endif
 168:src/console.c **** }
 998              		.loc 2 168 1 view .LVU277
 999 0006 B0FA80F0 		clz	r0, r0
 1000 000a 4009     		lsrs	r0, r0, #5
 1001 000c 08BD     		pop	{r3, pc}
 1002              	.L93:
 1003 000e 00BF     		.align	2
 1004              	.L92:
 1005 0010 7D030008 		.word	134218621
 1006              		.cfi_endproc
 1007              	.LFE12:
 1009              		.section	.text.get_key,"ax",%progbits
 1010              		.align	1
 1011              		.p2align 2,,3
 1012              		.global	get_key
 1013              		.syntax unified
 1014              		.thumb
 1015              		.thumb_func
 1016              		.fpu fpv4-sp-d16
 1018              	get_key:
 1019              	.LFB13:
 169:src/console.c **** 
 170:src/console.c **** int get_key(void)
 171:src/console.c **** {
 1020              		.loc 2 171 1 is_stmt 1 view -0
 1021              		.cfi_startproc
 1022              		@ args = 0, pretend = 0, frame = 0
 1023              		@ frame_needed = 0, uses_anonymous_args = 0
 1024              		@ link register save eliminated.
 172:src/console.c ****   #ifdef DM42
 173:src/console.c ****   return key_pop();
 1025              		.loc 2 173 3 view .LVU279
 1026              		.loc 2 173 10 is_stmt 0 view .LVU280
 1027 0000 004B     		ldr	r3, .L95
 1028 0002 1847     		bx	r3
 1029              	.LVL80:
 1030              	.L96:
 1031              		.align	2
ARM GAS  /tmp/cc67ZUo8.s 			page 31


 1032              	.L95:
 1033 0004 89030008 		.word	134218633
 1034              		.cfi_endproc
 1035              	.LFE13:
 1037              		.section	.text.put_key,"ax",%progbits
 1038              		.align	1
 1039              		.p2align 2,,3
 1040              		.global	put_key
 1041              		.syntax unified
 1042              		.thumb
 1043              		.thumb_func
 1044              		.fpu fpv4-sp-d16
 1046              	put_key:
 1047              	.LVL81:
 1048              	.LFB14:
 174:src/console.c ****   #else
 175:src/console.c ****   return 0;
 176:src/console.c ****   #endif
 177:src/console.c **** }
 178:src/console.c **** 
 179:src/console.c **** int put_key( int k )
 180:src/console.c **** {
 1049              		.loc 2 180 1 is_stmt 1 view -0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 0
 1052              		@ frame_needed = 0, uses_anonymous_args = 0
 1053              		@ link register save eliminated.
 181:src/console.c ****   #ifdef DM42
 182:src/console.c ****   return key_push(k);
 1054              		.loc 2 182 3 view .LVU282
 1055              		.loc 2 182 10 is_stmt 0 view .LVU283
 1056 0000 004B     		ldr	r3, .L98
 1057 0002 1847     		bx	r3
 1058              	.LVL82:
 1059              	.L99:
 1060              		.loc 2 182 10 view .LVU284
 1061              		.align	2
 1062              	.L98:
 1063 0004 81030008 		.word	134218625
 1064              		.cfi_endproc
 1065              	.LFE14:
 1067              		.section	.text.shift_down,"ax",%progbits
 1068              		.align	1
 1069              		.p2align 2,,3
 1070              		.global	shift_down
 1071              		.syntax unified
 1072              		.thumb
 1073              		.thumb_func
 1074              		.fpu fpv4-sp-d16
 1076              	shift_down:
 1077              	.LFB15:
 183:src/console.c ****   #else
 184:src/console.c ****   return k;
 185:src/console.c ****   #endif
 186:src/console.c **** }
 187:src/console.c **** 
 188:src/console.c **** enum shifts shift_down(void)
ARM GAS  /tmp/cc67ZUo8.s 			page 32


 189:src/console.c **** {
 1078              		.loc 2 189 1 is_stmt 1 view -0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 0
 1081              		@ frame_needed = 0, uses_anonymous_args = 0
 1082              		@ link register save eliminated.
 190:src/console.c **** 	return SHIFT_N;
 1083              		.loc 2 190 2 view .LVU286
 191:src/console.c **** }
 1084              		.loc 2 191 1 is_stmt 0 view .LVU287
 1085 0000 0020     		movs	r0, #0
 1086 0002 7047     		bx	lr
 1087              		.cfi_endproc
 1088              	.LFE15:
 1090              		.section	.text.start_key_timer,"ax",%progbits
 1091              		.align	1
 1092              		.p2align 2,,3
 1093              		.global	start_key_timer
 1094              		.syntax unified
 1095              		.thumb
 1096              		.thumb_func
 1097              		.fpu fpv4-sp-d16
 1099              	start_key_timer:
 1100              	.LFB16:
 192:src/console.c **** 
 193:src/console.c **** #ifndef DM42   // No serial operations for DM42
 194:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 195:src/console.c **** /*
 196:src/console.c ****  *  Open a COM port for transmission
 197:src/console.c ****  */
 198:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 199:src/console.c **** {
 200:src/console.c **** 	return 0;
 201:src/console.c **** }
 202:src/console.c **** 
 203:src/console.c **** 
 204:src/console.c **** /*
 205:src/console.c ****  *  Close the COM port after transmission is complete
 206:src/console.c ****  */
 207:src/console.c **** extern void close_port( void )
 208:src/console.c **** {
 209:src/console.c **** }
 210:src/console.c **** 
 211:src/console.c **** 
 212:src/console.c **** /*
 213:src/console.c ****  *  Output a single byte to the serial
 214:src/console.c ****  */
 215:src/console.c **** void put_byte( unsigned char byte )
 216:src/console.c **** {
 217:src/console.c **** 	report_err(ERR_PROG_BAD);
 218:src/console.c **** }
 219:src/console.c **** 
 220:src/console.c **** 
 221:src/console.c **** /*
 222:src/console.c ****  *  Force buffer flush
 223:src/console.c ****  */
 224:src/console.c **** void flush_comm( void )
ARM GAS  /tmp/cc67ZUo8.s 			page 33


 225:src/console.c **** {
 226:src/console.c **** }
 227:src/console.c **** 
 228:src/console.c **** #endif
 229:src/console.c **** #endif
 230:src/console.c **** 
 231:src/console.c **** 
 232:src/console.c **** /*
 233:src/console.c ****  *  Main loop
 234:src/console.c ****  */
 235:src/console.c **** #ifdef DM42
 236:src/console.c **** void start_key_timer (void);
 237:src/console.c **** int keyticks (void);
 238:src/console.c **** void moveto (int line, int x);
 239:src/console.c **** 
 240:src/console.c **** static int start_ticks;
 241:src/console.c **** 
 242:src/console.c **** void start_key_timer() {
 1101              		.loc 2 242 24 is_stmt 1 view -0
 1102              		.cfi_startproc
 1103              		@ args = 0, pretend = 0, frame = 0
 1104              		@ frame_needed = 0, uses_anonymous_args = 0
 243:src/console.c ****     start_ticks = get_rtc_ticks();
 1105              		.loc 2 243 5 view .LVU289
 242:src/console.c ****     start_ticks = get_rtc_ticks();
 1106              		.loc 2 242 24 is_stmt 0 view .LVU290
 1107 0000 08B5     		push	{r3, lr}
 1108              		.cfi_def_cfa_offset 8
 1109              		.cfi_offset 3, -8
 1110              		.cfi_offset 14, -4
 1111              		.loc 2 243 19 view .LVU291
 1112 0002 024B     		ldr	r3, .L103
 1113 0004 9847     		blx	r3
 1114              	.LVL83:
 1115              		.loc 2 243 17 view .LVU292
 1116 0006 024B     		ldr	r3, .L103+4
 1117 0008 1860     		str	r0, [r3]
 244:src/console.c **** }
 1118              		.loc 2 244 1 view .LVU293
 1119 000a 08BD     		pop	{r3, pc}
 1120              	.L104:
 1121              		.align	2
 1122              	.L103:
 1123 000c B9040008 		.word	134218937
 1124 0010 00000000 		.word	.LANCHOR4
 1125              		.cfi_endproc
 1126              	.LFE16:
 1128              		.section	.text.keyticks,"ax",%progbits
 1129              		.align	1
 1130              		.p2align 2,,3
 1131              		.global	keyticks
 1132              		.syntax unified
 1133              		.thumb
 1134              		.thumb_func
 1135              		.fpu fpv4-sp-d16
 1137              	keyticks:
 1138              	.LFB17:
ARM GAS  /tmp/cc67ZUo8.s 			page 34


 245:src/console.c **** 
 246:src/console.c **** int keyticks () {
 1139              		.loc 2 246 17 is_stmt 1 view -0
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 0
 1142              		@ frame_needed = 0, uses_anonymous_args = 0
 247:src/console.c ****   int i;
 1143              		.loc 2 247 3 view .LVU295
 248:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1144              		.loc 2 248 3 view .LVU296
 246:src/console.c ****   int i;
 1145              		.loc 2 246 17 is_stmt 0 view .LVU297
 1146 0000 08B5     		push	{r3, lr}
 1147              		.cfi_def_cfa_offset 8
 1148              		.cfi_offset 3, -8
 1149              		.cfi_offset 14, -4
 1150              		.loc 2 248 8 view .LVU298
 1151 0002 054B     		ldr	r3, .L107
 1152 0004 9847     		blx	r3
 1153              	.LVL84:
 249:src/console.c ****   return i >> 8;
 1154              		.loc 2 249 3 is_stmt 1 view .LVU299
 248:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1155              		.loc 2 248 24 is_stmt 0 view .LVU300
 1156 0006 054B     		ldr	r3, .L107+4
 1157 0008 1B68     		ldr	r3, [r3]
 1158 000a C01A     		subs	r0, r0, r3
 1159              	.LVL85:
 248:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1160              		.loc 2 248 38 view .LVU301
 1161 000c 00EB8000 		add	r0, r0, r0, lsl #2
 250:src/console.c **** }
 1162              		.loc 2 250 1 view .LVU302
 1163 0010 40F3D710 		sbfx	r0, r0, #7, #24
 1164 0014 08BD     		pop	{r3, pc}
 1165              	.L108:
 1166 0016 00BF     		.align	2
 1167              	.L107:
 1168 0018 B9040008 		.word	134218937
 1169 001c 00000000 		.word	.LANCHOR4
 1170              		.cfi_endproc
 1171              	.LFE17:
 1173              		.section	.text.moveto,"ax",%progbits
 1174              		.align	1
 1175              		.p2align 2,,3
 1176              		.global	moveto
 1177              		.syntax unified
 1178              		.thumb
 1179              		.thumb_func
 1180              		.fpu fpv4-sp-d16
 1182              	moveto:
 1183              	.LVL86:
 1184              	.LFB18:
 251:src/console.c **** 
 252:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 253:src/console.c **** char print_string[22];
 254:src/console.c **** int n_p = 0;
ARM GAS  /tmp/cc67ZUo8.s 			page 35


 255:src/console.c **** 
 256:src/console.c **** 
 257:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 1185              		.loc 2 257 30 is_stmt 1 view -0
 1186              		.cfi_startproc
 1187              		@ args = 0, pretend = 0, frame = 0
 1188              		@ frame_needed = 0, uses_anonymous_args = 0
 258:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1189              		.loc 2 258 3 view .LVU304
 257:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1190              		.loc 2 257 30 is_stmt 0 view .LVU305
 1191 0000 70B5     		push	{r4, r5, r6, lr}
 1192              		.cfi_def_cfa_offset 16
 1193              		.cfi_offset 4, -16
 1194              		.cfi_offset 5, -12
 1195              		.cfi_offset 6, -8
 1196              		.cfi_offset 14, -4
 1197              		.loc 2 258 3 view .LVU306
 1198 0002 0A4D     		ldr	r5, .L111
 1199 0004 0A4B     		ldr	r3, .L111+4
 257:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1200              		.loc 2 257 30 view .LVU307
 1201 0006 0246     		mov	r2, r0
 1202 0008 0C46     		mov	r4, r1
 1203              		.loc 2 258 3 view .LVU308
 1204 000a A86B     		ldr	r0, [r5, #56]
 1205              	.LVL87:
 1206              		.loc 2 258 3 view .LVU309
 1207 000c 511E     		subs	r1, r2, #1
 1208              	.LVL88:
 1209              		.loc 2 258 3 view .LVU310
 1210 000e 9847     		blx	r3
 1211              	.LVL89:
 259:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1212              		.loc 2 259 3 is_stmt 1 view .LVU311
 1213 0010 A86B     		ldr	r0, [r5, #56]
 1214 0012 084B     		ldr	r3, .L111+8
 1215              		.loc 2 259 33 is_stmt 0 view .LVU312
 1216 0014 0168     		ldr	r1, [r0]
 1217              		.loc 2 259 3 view .LVU313
 1218 0016 B0F90620 		ldrsh	r2, [r0, #6]
 1219              		.loc 2 259 33 view .LVU314
 1220 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 1221              		.loc 2 259 43 view .LVU315
 1222 001c 013C     		subs	r4, r4, #1
 1223              	.LVL90:
 1224              		.loc 2 259 40 view .LVU316
 1225 001e 04FB01F1 		mul	r1, r4, r1
 1226              		.loc 2 259 3 view .LVU317
 1227 0022 1431     		adds	r1, r1, #20
 260:src/console.c **** }
 1228              		.loc 2 260 1 view .LVU318
 1229 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1230              		.cfi_restore 14
 1231              		.cfi_restore 6
 1232              		.cfi_restore 5
 1233              		.cfi_restore 4
ARM GAS  /tmp/cc67ZUo8.s 			page 36


 1234              		.cfi_def_cfa_offset 0
 1235              	.LVL91:
 259:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1236              		.loc 2 259 3 view .LVU319
 1237 0028 1847     		bx	r3	@ indirect register sibling call
 1238              	.LVL92:
 1239              	.L112:
 1240 002a 00BF     		.align	2
 1241              	.L111:
 1242 002c 00200010 		.word	268443648
 1243 0030 69020008 		.word	134218345
 1244 0034 6D020008 		.word	134218349
 1245              		.cfi_endproc
 1246              	.LFE18:
 1248              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 1249              		.align	2
 1250              	.LC0:
 1251 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 1251      673A2025 
 1251      34692C25 
 1251      346900
 1252              		.section	.text.print_debug,"ax",%progbits
 1253              		.align	1
 1254              		.p2align 2,,3
 1255              		.global	print_debug
 1256              		.syntax unified
 1257              		.thumb
 1258              		.thumb_func
 1259              		.fpu fpv4-sp-d16
 1261              	print_debug:
 1262              	.LVL93:
 1263              	.LFB19:
 261:src/console.c **** 
 262:src/console.c **** void print_debug (int i, int j) {
 1264              		.loc 2 262 33 is_stmt 1 view -0
 1265              		.cfi_startproc
 1266              		@ args = 0, pretend = 0, frame = 8
 1267              		@ frame_needed = 0, uses_anonymous_args = 0
 263:src/console.c ****   strcpy( print_string, spaces );
 1268              		.loc 2 263 3 view .LVU321
 262:src/console.c ****   strcpy( print_string, spaces );
 1269              		.loc 2 262 33 is_stmt 0 view .LVU322
 1270 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1271              		.cfi_def_cfa_offset 24
 1272              		.cfi_offset 4, -24
 1273              		.cfi_offset 5, -20
 1274              		.cfi_offset 6, -16
 1275              		.cfi_offset 7, -12
 1276              		.cfi_offset 8, -8
 1277              		.cfi_offset 14, -4
 1278              		.loc 2 263 3 view .LVU323
 1279 0004 174C     		ldr	r4, .L115
 1280 0006 184F     		ldr	r7, .L115+4
 264:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 265:src/console.c ****   moveto (3, 1);
 266:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1281              		.loc 2 266 3 view .LVU324
ARM GAS  /tmp/cc67ZUo8.s 			page 37


 1282 0008 184E     		ldr	r6, .L115+8
 1283 000a 194D     		ldr	r5, .L115+12
 267:src/console.c ****   lcd_refresh();
 1284              		.loc 2 267 3 view .LVU325
 1285 000c DFF86C80 		ldr	r8, .L115+24
 262:src/console.c ****   strcpy( print_string, spaces );
 1286              		.loc 2 262 33 view .LVU326
 1287 0010 82B0     		sub	sp, sp, #8
 1288              		.cfi_def_cfa_offset 32
 262:src/console.c ****   strcpy( print_string, spaces );
 1289              		.loc 2 262 33 view .LVU327
 1290 0012 0190     		str	r0, [sp, #4]
 1291 0014 0091     		str	r1, [sp]
 263:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1292              		.loc 2 263 3 view .LVU328
 1293 0016 2046     		mov	r0, r4
 1294              	.LVL94:
 263:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1295              		.loc 2 263 3 view .LVU329
 1296 0018 3946     		mov	r1, r7
 1297              	.LVL95:
 263:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1298              		.loc 2 263 3 view .LVU330
 1299 001a FFF7FEFF 		bl	strcpy
 1300              	.LVL96:
 264:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1301              		.loc 2 264 3 is_stmt 1 view .LVU331
 1302 001e DDE90032 		ldrd	r3, r2, [sp]
 1303 0022 1449     		ldr	r1, .L115+16
 1304 0024 2046     		mov	r0, r4
 1305 0026 FFF7FEFF 		bl	sprintf
 1306              	.LVL97:
 265:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1307              		.loc 2 265 3 view .LVU332
 1308 002a 0121     		movs	r1, #1
 1309 002c 0320     		movs	r0, #3
 1310 002e FFF7FEFF 		bl	moveto
 1311              	.LVL98:
 266:src/console.c ****   lcd_refresh();
 1312              		.loc 2 266 3 view .LVU333
 1313 0032 2146     		mov	r1, r4
 1314 0034 B06B     		ldr	r0, [r6, #56]
 1315 0036 A847     		blx	r5
 1316              	.LVL99:
 1317              		.loc 2 267 3 view .LVU334
 1318 0038 C047     		blx	r8
 1319              	.LVL100:
 268:src/console.c ****   sys_delay (2500);
 1320              		.loc 2 268 3 view .LVU335
 1321 003a 0F4B     		ldr	r3, .L115+20
 1322 003c 40F6C410 		movw	r0, #2500
 1323 0040 9847     		blx	r3
 1324              	.LVL101:
 269:src/console.c ****   /* wait_for_key_press(); */
 270:src/console.c ****   //  key_pop_all();
 271:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 272:src/console.c ****   // key_pop_all();
ARM GAS  /tmp/cc67ZUo8.s 			page 38


 273:src/console.c ****   strcpy( print_string, spaces );
 1325              		.loc 2 273 3 view .LVU336
 1326 0042 3946     		mov	r1, r7
 1327 0044 2046     		mov	r0, r4
 1328 0046 FFF7FEFF 		bl	strcpy
 1329              	.LVL102:
 274:src/console.c ****   moveto (3, 1);
 1330              		.loc 2 274 3 view .LVU337
 1331 004a 0121     		movs	r1, #1
 1332 004c 0320     		movs	r0, #3
 1333 004e FFF7FEFF 		bl	moveto
 1334              	.LVL103:
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1335              		.loc 2 275 3 view .LVU338
 1336 0052 B06B     		ldr	r0, [r6, #56]
 1337 0054 2146     		mov	r1, r4
 1338 0056 A847     		blx	r5
 1339              	.LVL104:
 276:src/console.c ****   lcd_refresh();
 1340              		.loc 2 276 3 view .LVU339
 1341 0058 4346     		mov	r3, r8
 277:src/console.c ****   // while (key_empty()<=0);; // wait for release
 278:src/console.c ****   // key_pop_all();
 279:src/console.c **** }
 1342              		.loc 2 279 1 is_stmt 0 view .LVU340
 1343 005a 02B0     		add	sp, sp, #8
 1344              		.cfi_def_cfa_offset 24
 1345              	.LVL105:
 1346              		.loc 2 279 1 view .LVU341
 1347              		@ sp needed
 1348 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1349              		.cfi_restore 14
 1350              		.cfi_restore 8
 1351              		.cfi_restore 7
 1352              		.cfi_restore 6
 1353              		.cfi_restore 5
 1354              		.cfi_restore 4
 1355              		.cfi_def_cfa_offset 0
 1356              	.LVL106:
 276:src/console.c ****   lcd_refresh();
 1357              		.loc 2 276 3 view .LVU342
 1358 0060 1847     		bx	r3	@ indirect register sibling call
 1359              	.LVL107:
 1360              	.L116:
 1361 0062 00BF     		.align	2
 1362              	.L115:
 1363 0064 00000000 		.word	print_string
 1364 0068 00000000 		.word	.LANCHOR5
 1365 006c 00200010 		.word	268443648
 1366 0070 B1020008 		.word	134218417
 1367 0074 00000000 		.word	.LC0
 1368 0078 05040008 		.word	134218757
 1369 007c 31020008 		.word	134218289
 1370              		.cfi_endproc
 1371              	.LFE19:
 1373              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 1374              		.align	2
ARM GAS  /tmp/cc67ZUo8.s 			page 39


 1375              	.LC1:
 1376 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 1376      692C2531 
 1376      337300
 1377              		.section	.text.print_debug2,"ax",%progbits
 1378              		.align	1
 1379              		.p2align 2,,3
 1380              		.global	print_debug2
 1381              		.syntax unified
 1382              		.thumb
 1383              		.thumb_func
 1384              		.fpu fpv4-sp-d16
 1386              	print_debug2:
 1387              	.LVL108:
 1388              	.LFB20:
 280:src/console.c **** 
 281:src/console.c **** void print_debug2 (int i, char* j) {
 1389              		.loc 2 281 36 is_stmt 1 view -0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 8
 1392              		@ frame_needed = 0, uses_anonymous_args = 0
 282:src/console.c ****   strcpy( print_string, spaces );
 1393              		.loc 2 282 3 view .LVU344
 281:src/console.c ****   strcpy( print_string, spaces );
 1394              		.loc 2 281 36 is_stmt 0 view .LVU345
 1395 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1396              		.cfi_def_cfa_offset 24
 1397              		.cfi_offset 4, -24
 1398              		.cfi_offset 5, -20
 1399              		.cfi_offset 6, -16
 1400              		.cfi_offset 7, -12
 1401              		.cfi_offset 8, -8
 1402              		.cfi_offset 14, -4
 1403              		.loc 2 282 3 view .LVU346
 1404 0004 174C     		ldr	r4, .L119
 1405 0006 184F     		ldr	r7, .L119+4
 283:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 284:src/console.c ****   moveto (3, 1);
 285:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1406              		.loc 2 285 3 view .LVU347
 1407 0008 184E     		ldr	r6, .L119+8
 1408 000a 194D     		ldr	r5, .L119+12
 286:src/console.c ****   lcd_refresh();
 1409              		.loc 2 286 3 view .LVU348
 1410 000c DFF86C80 		ldr	r8, .L119+24
 281:src/console.c ****   strcpy( print_string, spaces );
 1411              		.loc 2 281 36 view .LVU349
 1412 0010 82B0     		sub	sp, sp, #8
 1413              		.cfi_def_cfa_offset 32
 281:src/console.c ****   strcpy( print_string, spaces );
 1414              		.loc 2 281 36 view .LVU350
 1415 0012 0190     		str	r0, [sp, #4]
 1416 0014 0091     		str	r1, [sp]
 282:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1417              		.loc 2 282 3 view .LVU351
 1418 0016 2046     		mov	r0, r4
 1419              	.LVL109:
ARM GAS  /tmp/cc67ZUo8.s 			page 40


 282:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1420              		.loc 2 282 3 view .LVU352
 1421 0018 3946     		mov	r1, r7
 1422              	.LVL110:
 282:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1423              		.loc 2 282 3 view .LVU353
 1424 001a FFF7FEFF 		bl	strcpy
 1425              	.LVL111:
 283:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1426              		.loc 2 283 3 is_stmt 1 view .LVU354
 1427 001e DDE90032 		ldrd	r3, r2, [sp]
 1428 0022 1449     		ldr	r1, .L119+16
 1429 0024 2046     		mov	r0, r4
 1430 0026 FFF7FEFF 		bl	sprintf
 1431              	.LVL112:
 284:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1432              		.loc 2 284 3 view .LVU355
 1433 002a 0121     		movs	r1, #1
 1434 002c 0320     		movs	r0, #3
 1435 002e FFF7FEFF 		bl	moveto
 1436              	.LVL113:
 285:src/console.c ****   lcd_refresh();
 1437              		.loc 2 285 3 view .LVU356
 1438 0032 2146     		mov	r1, r4
 1439 0034 B06B     		ldr	r0, [r6, #56]
 1440 0036 A847     		blx	r5
 1441              	.LVL114:
 1442              		.loc 2 286 3 view .LVU357
 1443 0038 C047     		blx	r8
 1444              	.LVL115:
 287:src/console.c ****   sys_delay (2500);
 1445              		.loc 2 287 3 view .LVU358
 1446 003a 0F4B     		ldr	r3, .L119+20
 1447 003c 40F6C410 		movw	r0, #2500
 1448 0040 9847     		blx	r3
 1449              	.LVL116:
 288:src/console.c ****   /* wait_for_key_press(); */
 289:src/console.c ****   //  key_pop_all();
 290:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 291:src/console.c ****   // key_pop_all();
 292:src/console.c ****   strcpy( print_string, spaces );
 1450              		.loc 2 292 3 view .LVU359
 1451 0042 3946     		mov	r1, r7
 1452 0044 2046     		mov	r0, r4
 1453 0046 FFF7FEFF 		bl	strcpy
 1454              	.LVL117:
 293:src/console.c ****   moveto (3, 1);
 1455              		.loc 2 293 3 view .LVU360
 1456 004a 0121     		movs	r1, #1
 1457 004c 0320     		movs	r0, #3
 1458 004e FFF7FEFF 		bl	moveto
 1459              	.LVL118:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1460              		.loc 2 294 3 view .LVU361
 1461 0052 B06B     		ldr	r0, [r6, #56]
 1462 0054 2146     		mov	r1, r4
 1463 0056 A847     		blx	r5
ARM GAS  /tmp/cc67ZUo8.s 			page 41


 1464              	.LVL119:
 295:src/console.c ****   lcd_refresh();
 1465              		.loc 2 295 3 view .LVU362
 1466 0058 4346     		mov	r3, r8
 296:src/console.c ****   // while (key_empty()<=0);; // wait for release
 297:src/console.c ****   // key_pop_all();
 298:src/console.c **** }
 1467              		.loc 2 298 1 is_stmt 0 view .LVU363
 1468 005a 02B0     		add	sp, sp, #8
 1469              		.cfi_def_cfa_offset 24
 1470              	.LVL120:
 1471              		.loc 2 298 1 view .LVU364
 1472              		@ sp needed
 1473 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1474              		.cfi_restore 14
 1475              		.cfi_restore 8
 1476              		.cfi_restore 7
 1477              		.cfi_restore 6
 1478              		.cfi_restore 5
 1479              		.cfi_restore 4
 1480              		.cfi_def_cfa_offset 0
 1481              	.LVL121:
 295:src/console.c ****   lcd_refresh();
 1482              		.loc 2 295 3 view .LVU365
 1483 0060 1847     		bx	r3	@ indirect register sibling call
 1484              	.LVL122:
 1485              	.L120:
 1486 0062 00BF     		.align	2
 1487              	.L119:
 1488 0064 00000000 		.word	print_string
 1489 0068 00000000 		.word	.LANCHOR5
 1490 006c 00200010 		.word	268443648
 1491 0070 B1020008 		.word	134218417
 1492 0074 00000000 		.word	.LC1
 1493 0078 05040008 		.word	134218757
 1494 007c 31020008 		.word	134218289
 1495              		.cfi_endproc
 1496              	.LFE20:
 1498              		.section	.text.do_now,"ax",%progbits
 1499              		.align	1
 1500              		.p2align 2,,3
 1501              		.global	do_now
 1502              		.syntax unified
 1503              		.thumb
 1504              		.thumb_func
 1505              		.fpu fpv4-sp-d16
 1507              	do_now:
 1508              	.LVL123:
 1509              	.LFB21:
 299:src/console.c **** 
 300:src/console.c **** void do_now (int key, int shift) {
 1510              		.loc 2 300 34 is_stmt 1 view -0
 1511              		.cfi_startproc
 1512              		@ args = 0, pretend = 0, frame = 8
 1513              		@ frame_needed = 0, uses_anonymous_args = 0
 1514              		@ link register save eliminated.
 301:src/console.c ****   struct _ndmap temp;
ARM GAS  /tmp/cc67ZUo8.s 			page 42


 1515              		.loc 2 301 3 view .LVU367
 302:src/console.c ****   temp.key_34s = key;
 1516              		.loc 2 302 3 view .LVU368
 300:src/console.c ****   struct _ndmap temp;
 1517              		.loc 2 300 34 is_stmt 0 view .LVU369
 1518 0000 82B0     		sub	sp, sp, #8
 1519              		.cfi_def_cfa_offset 8
 303:src/console.c ****   temp.shift = shift;
 304:src/console.c ****   process_keycode_with_shift (temp);
 1520              		.loc 2 304 3 view .LVU370
 1521 0002 02AB     		add	r3, sp, #8
 302:src/console.c ****   temp.shift = shift;
 1522              		.loc 2 302 16 view .LVU371
 1523 0004 8DF80000 		strb	r0, [sp]
 303:src/console.c ****   temp.shift = shift;
 1524              		.loc 2 303 3 is_stmt 1 view .LVU372
 303:src/console.c ****   temp.shift = shift;
 1525              		.loc 2 303 14 is_stmt 0 view .LVU373
 1526 0008 0191     		str	r1, [sp, #4]
 1527              		.loc 2 304 3 is_stmt 1 view .LVU374
 1528 000a 13E90300 		ldmdb	r3, {r0, r1}
 1529              	.LVL124:
 305:src/console.c **** }
 1530              		.loc 2 305 1 is_stmt 0 view .LVU375
 1531 000e 02B0     		add	sp, sp, #8
 1532              		.cfi_def_cfa_offset 0
 1533              		@ sp needed
 304:src/console.c **** }
 1534              		.loc 2 304 3 view .LVU376
 1535 0010 FFF7FEBF 		b	process_keycode_with_shift
 1536              	.LVL125:
 304:src/console.c **** }
 1537              		.loc 2 304 3 view .LVU377
 1538              		.cfi_endproc
 1539              	.LFE21:
 1541              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 1542              		.align	2
 1543              	.LC2:
 1544 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 1544      502F7770 
 1544      3334735F 
 1544      68656C70 
 1544      2E68746D 
 1545              		.section	.text.do_multi,"ax",%progbits
 1546              		.align	1
 1547              		.p2align 2,,3
 1548              		.global	do_multi
 1549              		.syntax unified
 1550              		.thumb
 1551              		.thumb_func
 1552              		.fpu fpv4-sp-d16
 1554              	do_multi:
 1555              	.LVL126:
 1556              	.LFB22:
 306:src/console.c **** 
 307:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 1557              		.loc 2 307 42 is_stmt 1 view -0
ARM GAS  /tmp/cc67ZUo8.s 			page 43


 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 16
 1560              		@ frame_needed = 0, uses_anonymous_args = 0
 1561              		.loc 2 307 42 is_stmt 0 view .LVU379
 1562 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1563              		.cfi_def_cfa_offset 24
 1564              		.cfi_offset 4, -24
 1565              		.cfi_offset 5, -20
 1566              		.cfi_offset 6, -16
 1567              		.cfi_offset 7, -12
 1568              		.cfi_offset 8, -8
 1569              		.cfi_offset 14, -4
 1570 0004 84B0     		sub	sp, sp, #16
 1571              		.cfi_def_cfa_offset 40
 1572              	.LVL127:
 308:src/console.c ****   switch(r.shift) {
 1573              		.loc 2 308 3 is_stmt 1 view .LVU380
 307:src/console.c ****   switch(r.shift) {
 1574              		.loc 2 307 42 is_stmt 0 view .LVU381
 1575 0006 6C46     		mov	r4, sp
 1576 0008 531E     		subs	r3, r2, #1
 1577 000a 84E80600 		stm	r4, {r1, r2}
 1578              	.LVL128:
 307:src/console.c ****   switch(r.shift) {
 1579              		.loc 2 307 42 view .LVU382
 1580 000e 0546     		mov	r5, r0
 1581 0010 092B     		cmp	r3, #9
 1582 0012 00F28780 		bhi	.L124
 1583 0016 DFE803F0 		tbb	[pc, r3]
 1584              	.L126:
 1585 001a 18       		.byte	(.L135-.L126)/2
 1586 001b 36       		.byte	(.L134-.L126)/2
 1587 001c 40       		.byte	(.L133-.L126)/2
 1588 001d 4A       		.byte	(.L132-.L126)/2
 1589 001e 54       		.byte	(.L131-.L126)/2
 1590 001f 5E       		.byte	(.L130-.L126)/2
 1591 0020 68       		.byte	(.L129-.L126)/2
 1592 0021 72       		.byte	(.L128-.L126)/2
 1593 0022 7B       		.byte	(.L127-.L126)/2
 1594 0023 05       		.byte	(.L125-.L126)/2
 1595              		.p2align 1
 1596              	.L125:
 309:src/console.c ****   case LASTX: // Last x via RCL L
 310:src/console.c ****     do_now (K11, 0); // RCL
 311:src/console.c ****     do_now (K_RELEASE,0); // release
 312:src/console.c ****     do_now (K15,0); // TAN key
 313:src/console.c ****     r.key_34s = K_RELEASE;
 314:src/console.c ****     r.shift = 0; // set up for release;
 315:src/console.c ****     break;
 316:src/console.c ****   case ONSTO: // flash_backup()
 317:src/console.c ****     flash_backup(OP_SAVE);
 318:src/console.c ****     r = no_key;
 319:src/console.c ****     break;
 320:src/console.c ****   case ONRCL: // flash_restore()
 321:src/console.c ****     flash_restore(OP_LOAD);
 322:src/console.c ****     r = no_key;
 323:src/console.c ****     break;
ARM GAS  /tmp/cc67ZUo8.s 			page 44


 324:src/console.c ****   case WRLIB: // save library file
 325:src/console.c ****     save_lib_file(1);
 326:src/console.c ****     r = no_key;
 327:src/console.c ****     break;
 328:src/console.c ****   case LLIB: // load library file
 329:src/console.c ****     load_lib_file(1);
 330:src/console.c ****     r = no_key;
 331:src/console.c ****     break;
 332:src/console.c ****   case WRTST: // save state file
 333:src/console.c ****     save_ram_file(1);
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
 336:src/console.c ****   case LDST:
 337:src/console.c ****     load_ram_file(1);
 338:src/console.c ****     r = no_key;
 339:src/console.c ****     break;
 340:src/console.c ****   case LDPRG:
 341:src/console.c ****     load_prog_file();
 342:src/console.c ****     r = no_key;
 343:src/console.c ****     break;
 344:src/console.c ****   case SVPRG:
 345:src/console.c ****     save_prog_file();
 1597              		.loc 2 345 5 is_stmt 1 view .LVU383
 1598 0024 FFF7FEFF 		bl	save_prog_file
 1599              	.LVL129:
 346:src/console.c ****     r = no_key;
 1600              		.loc 2 346 5 view .LVU384
 1601              		.loc 2 346 7 is_stmt 0 view .LVU385
 1602 0028 424B     		ldr	r3, .L138
 1603 002a 93E80300 		ldm	r3, {r0, r1}
 1604 002e 84E80300 		stm	r4, {r0, r1}
 1605 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1606              	.LVL130:
 347:src/console.c ****     break;
 1607              		.loc 2 347 5 is_stmt 1 view .LVU386
 1608              	.L136:
 348:src/console.c ****   case HELP:
 349:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 350:src/console.c ****     r = no_key;
 351:src/console.c ****     break;
 352:src/console.c ****   default:
 353:src/console.c ****     r = no_key;
 354:src/console.c ****   }
 355:src/console.c ****   return r;
 1609              		.loc 2 355 3 view .LVU387
 1610              		.loc 2 355 10 is_stmt 0 view .LVU388
 1611 0034 8DF80030 		strb	r3, [sp]
 1612 0038 0191     		str	r1, [sp, #4]
 1613 003a 94E80300 		ldm	r4, {r0, r1}
 1614              	.LVL131:
 1615              		.loc 2 355 10 view .LVU389
 1616 003e 85E80300 		stm	r5, {r0, r1}
 356:src/console.c **** }
 1617              		.loc 2 356 1 view .LVU390
 1618 0042 2846     		mov	r0, r5
 1619 0044 04B0     		add	sp, sp, #16
 1620              		.cfi_remember_state
ARM GAS  /tmp/cc67ZUo8.s 			page 45


 1621              		.cfi_def_cfa_offset 24
 1622              		@ sp needed
 1623 0046 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1624              	.LVL132:
 1625              	.L135:
 1626              		.cfi_restore_state
 310:src/console.c ****     do_now (K_RELEASE,0); // release
 1627              		.loc 2 310 5 is_stmt 1 view .LVU391
 1628              	.LBB75:
 1629              	.LBI75:
 300:src/console.c ****   struct _ndmap temp;
 1630              		.loc 2 300 6 view .LVU392
 1631              	.LBB76:
 301:src/console.c ****   temp.key_34s = key;
 1632              		.loc 2 301 3 view .LVU393
 302:src/console.c ****   temp.shift = shift;
 1633              		.loc 2 302 3 view .LVU394
 302:src/console.c ****   temp.shift = shift;
 1634              		.loc 2 302 16 is_stmt 0 view .LVU395
 1635 004a 0723     		movs	r3, #7
 303:src/console.c ****   process_keycode_with_shift (temp);
 1636              		.loc 2 303 14 view .LVU396
 1637 004c 0026     		movs	r6, #0
 302:src/console.c ****   temp.shift = shift;
 1638              		.loc 2 302 16 view .LVU397
 1639 004e 8DF80830 		strb	r3, [sp, #8]
 303:src/console.c ****   process_keycode_with_shift (temp);
 1640              		.loc 2 303 3 is_stmt 1 view .LVU398
 304:src/console.c **** }
 1641              		.loc 2 304 3 is_stmt 0 view .LVU399
 1642 0052 0DF10808 		add	r8, sp, #8
 303:src/console.c ****   process_keycode_with_shift (temp);
 1643              		.loc 2 303 14 view .LVU400
 1644 0056 0396     		str	r6, [sp, #12]
 304:src/console.c **** }
 1645              		.loc 2 304 3 is_stmt 1 view .LVU401
 1646 0058 98E80300 		ldm	r8, {r0, r1}
 1647              	.LVL133:
 304:src/console.c **** }
 1648              		.loc 2 304 3 is_stmt 0 view .LVU402
 1649              	.LBE76:
 1650              	.LBE75:
 1651              	.LBB78:
 1652              	.LBB79:
 302:src/console.c ****   temp.shift = shift;
 1653              		.loc 2 302 16 view .LVU403
 1654 005c 6327     		movs	r7, #99
 1655              	.LBE79:
 1656              	.LBE78:
 1657              	.LBB81:
 1658              	.LBB77:
 304:src/console.c **** }
 1659              		.loc 2 304 3 view .LVU404
 1660 005e FFF7FEFF 		bl	process_keycode_with_shift
 1661              	.LVL134:
 304:src/console.c **** }
 1662              		.loc 2 304 3 view .LVU405
ARM GAS  /tmp/cc67ZUo8.s 			page 46


 1663              	.LBE77:
 1664              	.LBE81:
 311:src/console.c ****     do_now (K15,0); // TAN key
 1665              		.loc 2 311 5 is_stmt 1 view .LVU406
 1666              	.LBB82:
 1667              	.LBI78:
 300:src/console.c ****   struct _ndmap temp;
 1668              		.loc 2 300 6 view .LVU407
 1669              	.LBB80:
 301:src/console.c ****   temp.key_34s = key;
 1670              		.loc 2 301 3 view .LVU408
 302:src/console.c ****   temp.shift = shift;
 1671              		.loc 2 302 3 view .LVU409
 303:src/console.c ****   process_keycode_with_shift (temp);
 1672              		.loc 2 303 14 is_stmt 0 view .LVU410
 1673 0062 0396     		str	r6, [sp, #12]
 302:src/console.c ****   temp.shift = shift;
 1674              		.loc 2 302 16 view .LVU411
 1675 0064 8DF80870 		strb	r7, [sp, #8]
 303:src/console.c ****   process_keycode_with_shift (temp);
 1676              		.loc 2 303 3 is_stmt 1 view .LVU412
 304:src/console.c **** }
 1677              		.loc 2 304 3 view .LVU413
 1678 0068 98E80300 		ldm	r8, {r0, r1}
 1679 006c FFF7FEFF 		bl	process_keycode_with_shift
 1680              	.LVL135:
 304:src/console.c **** }
 1681              		.loc 2 304 3 is_stmt 0 view .LVU414
 1682              	.LBE80:
 1683              	.LBE82:
 312:src/console.c ****     r.key_34s = K_RELEASE;
 1684              		.loc 2 312 5 is_stmt 1 view .LVU415
 1685              	.LBB83:
 1686              	.LBI83:
 300:src/console.c ****   struct _ndmap temp;
 1687              		.loc 2 300 6 view .LVU416
 1688              	.LBB84:
 301:src/console.c ****   temp.key_34s = key;
 1689              		.loc 2 301 3 view .LVU417
 302:src/console.c ****   temp.shift = shift;
 1690              		.loc 2 302 3 view .LVU418
 302:src/console.c ****   temp.shift = shift;
 1691              		.loc 2 302 16 is_stmt 0 view .LVU419
 1692 0070 0B23     		movs	r3, #11
 1693 0072 8DF80830 		strb	r3, [sp, #8]
 303:src/console.c ****   process_keycode_with_shift (temp);
 1694              		.loc 2 303 3 is_stmt 1 view .LVU420
 304:src/console.c **** }
 1695              		.loc 2 304 3 view .LVU421
 303:src/console.c ****   process_keycode_with_shift (temp);
 1696              		.loc 2 303 14 is_stmt 0 view .LVU422
 1697 0076 0396     		str	r6, [sp, #12]
 304:src/console.c **** }
 1698              		.loc 2 304 3 view .LVU423
 1699 0078 98E80300 		ldm	r8, {r0, r1}
 1700 007c FFF7FEFF 		bl	process_keycode_with_shift
 1701              	.LVL136:
ARM GAS  /tmp/cc67ZUo8.s 			page 47


 304:src/console.c **** }
 1702              		.loc 2 304 3 view .LVU424
 1703              	.LBE84:
 1704              	.LBE83:
 313:src/console.c ****     r.shift = 0; // set up for release;
 1705              		.loc 2 313 5 is_stmt 1 view .LVU425
 314:src/console.c ****     break;
 1706              		.loc 2 314 5 view .LVU426
 315:src/console.c ****   case ONSTO: // flash_backup()
 1707              		.loc 2 315 5 view .LVU427
 314:src/console.c ****     break;
 1708              		.loc 2 314 13 is_stmt 0 view .LVU428
 1709 0080 3146     		mov	r1, r6
 313:src/console.c ****     r.shift = 0; // set up for release;
 1710              		.loc 2 313 15 view .LVU429
 1711 0082 3B46     		mov	r3, r7
 315:src/console.c ****   case ONSTO: // flash_backup()
 1712              		.loc 2 315 5 view .LVU430
 1713 0084 D6E7     		b	.L136
 1714              	.LVL137:
 1715              	.L134:
 317:src/console.c ****     r = no_key;
 1716              		.loc 2 317 5 is_stmt 1 view .LVU431
 1717 0086 AD20     		movs	r0, #173
 1718              	.LVL138:
 317:src/console.c ****     r = no_key;
 1719              		.loc 2 317 5 is_stmt 0 view .LVU432
 1720 0088 FFF7FEFF 		bl	flash_backup
 1721              	.LVL139:
 318:src/console.c ****     break;
 1722              		.loc 2 318 5 is_stmt 1 view .LVU433
 318:src/console.c ****     break;
 1723              		.loc 2 318 7 is_stmt 0 view .LVU434
 1724 008c 294B     		ldr	r3, .L138
 1725 008e 93E80300 		ldm	r3, {r0, r1}
 1726 0092 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1727              	.LVL140:
 319:src/console.c ****   case ONRCL: // flash_restore()
 1728              		.loc 2 319 5 is_stmt 1 view .LVU435
 318:src/console.c ****     break;
 1729              		.loc 2 318 7 is_stmt 0 view .LVU436
 1730 0094 84E80300 		stm	r4, {r0, r1}
 319:src/console.c ****   case ONRCL: // flash_restore()
 1731              		.loc 2 319 5 view .LVU437
 1732 0098 CCE7     		b	.L136
 1733              	.LVL141:
 1734              	.L133:
 321:src/console.c ****     r = no_key;
 1735              		.loc 2 321 5 is_stmt 1 view .LVU438
 1736 009a AE20     		movs	r0, #174
 1737              	.LVL142:
 321:src/console.c ****     r = no_key;
 1738              		.loc 2 321 5 is_stmt 0 view .LVU439
 1739 009c FFF7FEFF 		bl	flash_restore
 1740              	.LVL143:
 322:src/console.c ****     break;
 1741              		.loc 2 322 5 is_stmt 1 view .LVU440
ARM GAS  /tmp/cc67ZUo8.s 			page 48


 322:src/console.c ****     break;
 1742              		.loc 2 322 7 is_stmt 0 view .LVU441
 1743 00a0 244B     		ldr	r3, .L138
 1744 00a2 93E80300 		ldm	r3, {r0, r1}
 1745 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1746              	.LVL144:
 323:src/console.c ****   case WRLIB: // save library file
 1747              		.loc 2 323 5 is_stmt 1 view .LVU442
 322:src/console.c ****     break;
 1748              		.loc 2 322 7 is_stmt 0 view .LVU443
 1749 00a8 84E80300 		stm	r4, {r0, r1}
 323:src/console.c ****   case WRLIB: // save library file
 1750              		.loc 2 323 5 view .LVU444
 1751 00ac C2E7     		b	.L136
 1752              	.LVL145:
 1753              	.L132:
 325:src/console.c ****     r = no_key;
 1754              		.loc 2 325 5 is_stmt 1 view .LVU445
 1755 00ae 0120     		movs	r0, #1
 1756              	.LVL146:
 325:src/console.c ****     r = no_key;
 1757              		.loc 2 325 5 is_stmt 0 view .LVU446
 1758 00b0 FFF7FEFF 		bl	save_lib_file
 1759              	.LVL147:
 326:src/console.c ****     break;
 1760              		.loc 2 326 5 is_stmt 1 view .LVU447
 326:src/console.c ****     break;
 1761              		.loc 2 326 7 is_stmt 0 view .LVU448
 1762 00b4 1F4B     		ldr	r3, .L138
 1763 00b6 93E80300 		ldm	r3, {r0, r1}
 1764 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1765              	.LVL148:
 327:src/console.c ****   case LLIB: // load library file
 1766              		.loc 2 327 5 is_stmt 1 view .LVU449
 326:src/console.c ****     break;
 1767              		.loc 2 326 7 is_stmt 0 view .LVU450
 1768 00bc 84E80300 		stm	r4, {r0, r1}
 327:src/console.c ****   case LLIB: // load library file
 1769              		.loc 2 327 5 view .LVU451
 1770 00c0 B8E7     		b	.L136
 1771              	.LVL149:
 1772              	.L131:
 329:src/console.c ****     r = no_key;
 1773              		.loc 2 329 5 is_stmt 1 view .LVU452
 1774 00c2 0120     		movs	r0, #1
 1775              	.LVL150:
 329:src/console.c ****     r = no_key;
 1776              		.loc 2 329 5 is_stmt 0 view .LVU453
 1777 00c4 FFF7FEFF 		bl	load_lib_file
 1778              	.LVL151:
 330:src/console.c ****     break;
 1779              		.loc 2 330 5 is_stmt 1 view .LVU454
 330:src/console.c ****     break;
 1780              		.loc 2 330 7 is_stmt 0 view .LVU455
 1781 00c8 1A4B     		ldr	r3, .L138
 1782 00ca 93E80300 		ldm	r3, {r0, r1}
 1783 00ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/cc67ZUo8.s 			page 49


 1784              	.LVL152:
 331:src/console.c ****   case WRTST: // save state file
 1785              		.loc 2 331 5 is_stmt 1 view .LVU456
 330:src/console.c ****     break;
 1786              		.loc 2 330 7 is_stmt 0 view .LVU457
 1787 00d0 84E80300 		stm	r4, {r0, r1}
 331:src/console.c ****   case WRTST: // save state file
 1788              		.loc 2 331 5 view .LVU458
 1789 00d4 AEE7     		b	.L136
 1790              	.LVL153:
 1791              	.L130:
 333:src/console.c ****     r = no_key;
 1792              		.loc 2 333 5 is_stmt 1 view .LVU459
 1793 00d6 0120     		movs	r0, #1
 1794              	.LVL154:
 333:src/console.c ****     r = no_key;
 1795              		.loc 2 333 5 is_stmt 0 view .LVU460
 1796 00d8 FFF7FEFF 		bl	save_ram_file
 1797              	.LVL155:
 334:src/console.c ****     break;
 1798              		.loc 2 334 5 is_stmt 1 view .LVU461
 334:src/console.c ****     break;
 1799              		.loc 2 334 7 is_stmt 0 view .LVU462
 1800 00dc 154B     		ldr	r3, .L138
 1801 00de 93E80300 		ldm	r3, {r0, r1}
 1802 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1803              	.LVL156:
 335:src/console.c ****   case LDST:
 1804              		.loc 2 335 5 is_stmt 1 view .LVU463
 334:src/console.c ****     break;
 1805              		.loc 2 334 7 is_stmt 0 view .LVU464
 1806 00e4 84E80300 		stm	r4, {r0, r1}
 335:src/console.c ****   case LDST:
 1807              		.loc 2 335 5 view .LVU465
 1808 00e8 A4E7     		b	.L136
 1809              	.LVL157:
 1810              	.L129:
 337:src/console.c ****     r = no_key;
 1811              		.loc 2 337 5 is_stmt 1 view .LVU466
 1812 00ea 0120     		movs	r0, #1
 1813              	.LVL158:
 337:src/console.c ****     r = no_key;
 1814              		.loc 2 337 5 is_stmt 0 view .LVU467
 1815 00ec FFF7FEFF 		bl	load_ram_file
 1816              	.LVL159:
 338:src/console.c ****     break;
 1817              		.loc 2 338 5 is_stmt 1 view .LVU468
 338:src/console.c ****     break;
 1818              		.loc 2 338 7 is_stmt 0 view .LVU469
 1819 00f0 104B     		ldr	r3, .L138
 1820 00f2 93E80300 		ldm	r3, {r0, r1}
 1821 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1822              	.LVL160:
 339:src/console.c ****   case LDPRG:
 1823              		.loc 2 339 5 is_stmt 1 view .LVU470
 338:src/console.c ****     break;
 1824              		.loc 2 338 7 is_stmt 0 view .LVU471
ARM GAS  /tmp/cc67ZUo8.s 			page 50


 1825 00f8 84E80300 		stm	r4, {r0, r1}
 339:src/console.c ****   case LDPRG:
 1826              		.loc 2 339 5 view .LVU472
 1827 00fc 9AE7     		b	.L136
 1828              	.LVL161:
 1829              	.L128:
 341:src/console.c ****     r = no_key;
 1830              		.loc 2 341 5 is_stmt 1 view .LVU473
 1831 00fe FFF7FEFF 		bl	load_prog_file
 1832              	.LVL162:
 342:src/console.c ****     break;
 1833              		.loc 2 342 5 view .LVU474
 342:src/console.c ****     break;
 1834              		.loc 2 342 7 is_stmt 0 view .LVU475
 1835 0102 0C4B     		ldr	r3, .L138
 1836 0104 93E80300 		ldm	r3, {r0, r1}
 1837 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1838              	.LVL163:
 343:src/console.c ****   case SVPRG:
 1839              		.loc 2 343 5 is_stmt 1 view .LVU476
 342:src/console.c ****     break;
 1840              		.loc 2 342 7 is_stmt 0 view .LVU477
 1841 010a 84E80300 		stm	r4, {r0, r1}
 343:src/console.c ****   case SVPRG:
 1842              		.loc 2 343 5 view .LVU478
 1843 010e 91E7     		b	.L136
 1844              	.LVL164:
 1845              	.L127:
 349:src/console.c ****     r = no_key;
 1846              		.loc 2 349 5 is_stmt 1 view .LVU479
 1847 0110 094B     		ldr	r3, .L138+4
 1848 0112 0A48     		ldr	r0, .L138+8
 1849              	.LVL165:
 349:src/console.c ****     r = no_key;
 1850              		.loc 2 349 5 is_stmt 0 view .LVU480
 1851 0114 9847     		blx	r3
 1852              	.LVL166:
 350:src/console.c ****     break;
 1853              		.loc 2 350 5 is_stmt 1 view .LVU481
 350:src/console.c ****     break;
 1854              		.loc 2 350 7 is_stmt 0 view .LVU482
 1855 0116 074B     		ldr	r3, .L138
 1856 0118 93E80300 		ldm	r3, {r0, r1}
 1857 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1858              	.LVL167:
 351:src/console.c ****   default:
 1859              		.loc 2 351 5 is_stmt 1 view .LVU483
 350:src/console.c ****     break;
 1860              		.loc 2 350 7 is_stmt 0 view .LVU484
 1861 011e 84E80300 		stm	r4, {r0, r1}
 351:src/console.c ****   default:
 1862              		.loc 2 351 5 view .LVU485
 1863 0122 87E7     		b	.L136
 1864              	.LVL168:
 1865              	.L124:
 353:src/console.c ****   }
 1866              		.loc 2 353 5 is_stmt 1 view .LVU486
ARM GAS  /tmp/cc67ZUo8.s 			page 51


 353:src/console.c ****   }
 1867              		.loc 2 353 7 is_stmt 0 view .LVU487
 1868 0124 034B     		ldr	r3, .L138
 1869 0126 93E80300 		ldm	r3, {r0, r1}
 1870              	.LVL169:
 353:src/console.c ****   }
 1871              		.loc 2 353 7 view .LVU488
 1872 012a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1873              	.LVL170:
 353:src/console.c ****   }
 1874              		.loc 2 353 7 view .LVU489
 1875 012c 84E80300 		stm	r4, {r0, r1}
 1876 0130 80E7     		b	.L136
 1877              	.L139:
 1878 0132 00BF     		.align	2
 1879              	.L138:
 1880 0134 00000000 		.word	.LANCHOR6
 1881 0138 49040008 		.word	134218825
 1882 013c 00000000 		.word	.LC2
 1883              		.cfi_endproc
 1884              	.LFE22:
 1886              		.section	.text.program_main,"ax",%progbits
 1887              		.align	1
 1888              		.p2align 2,,3
 1889              		.global	program_main
 1890              		.syntax unified
 1891              		.thumb
 1892              		.thumb_func
 1893              		.fpu fpv4-sp-d16
 1895              	program_main:
 1896              	.LFB23:
 357:src/console.c **** 
 358:src/console.c **** void program_main(){
 1897              		.loc 2 358 20 is_stmt 1 view -0
 1898              		.cfi_startproc
 1899              		@ args = 0, pretend = 0, frame = 16
 1900              		@ frame_needed = 0, uses_anonymous_args = 0
 359:src/console.c ****   int c;
 1901              		.loc 2 359 3 view .LVU491
 360:src/console.c ****   struct _ndmap remapped;
 1902              		.loc 2 360 3 view .LVU492
 361:src/console.c **** 
 362:src/console.c ****   init_mem();
 1903              		.loc 2 362 3 view .LVU493
 358:src/console.c ****   int c;
 1904              		.loc 2 358 20 is_stmt 0 view .LVU494
 1905 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1906              		.cfi_def_cfa_offset 32
 1907              		.cfi_offset 4, -32
 1908              		.cfi_offset 5, -28
 1909              		.cfi_offset 6, -24
 1910              		.cfi_offset 7, -20
 1911              		.cfi_offset 8, -16
 1912              		.cfi_offset 9, -12
 1913              		.cfi_offset 10, -8
 1914              		.cfi_offset 14, -4
 1915 0004 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/cc67ZUo8.s 			page 52


 1916              		.cfi_def_cfa_offset 48
 1917              		.loc 2 362 3 view .LVU495
 1918 0006 FFF7FEFF 		bl	init_mem
 1919              	.LVL171:
 363:src/console.c ****   init_RegionTab();
 1920              		.loc 2 363 3 is_stmt 1 view .LVU496
 1921 000a FFF7FEFF 		bl	init_RegionTab
 1922              	.LVL172:
 364:src/console.c ****   init_34s();
 1923              		.loc 2 364 3 view .LVU497
 1924 000e FFF7FEFF 		bl	init_34s
 1925              	.LVL173:
 365:src/console.c ****   State2.flags = 1;  
 1926              		.loc 2 365 3 view .LVU498
 1927              		.loc 2 365 16 is_stmt 0 view .LVU499
 1928 0012 A54A     		ldr	r2, .L233
 1929 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 1930 0016 43F00103 		orr	r3, r3, #1
 1931 001a 1376     		strb	r3, [r2, #24]
 366:src/console.c ****   check_create_wp34sdir();
 1932              		.loc 2 366 3 is_stmt 1 view .LVU500
 1933 001c FFF7FEFF 		bl	check_create_wp34sdir
 1934              	.LVL174:
 367:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 1935              		.loc 2 367 3 view .LVU501
 1936              		.loc 2 367 8 is_stmt 0 view .LVU502
 1937 0020 0020     		movs	r0, #0
 1938 0022 FFF7FEFF 		bl	load_ram_file
 1939              	.LVL175:
 1940              		.loc 2 367 6 view .LVU503
 1941 0026 08B9     		cbnz	r0, .L141
 1942              		.loc 2 367 26 is_stmt 1 discriminator 1 view .LVU504
 1943              		.loc 2 367 34 is_stmt 0 discriminator 1 view .LVU505
 1944 0028 A04B     		ldr	r3, .L233+4
 1945 002a 1860     		str	r0, [r3]
 1946              	.L141:
 368:src/console.c ****   load_backup_file(0);
 1947              		.loc 2 368 3 is_stmt 1 view .LVU506
 1948 002c 0020     		movs	r0, #0
 369:src/console.c ****   load_lib_file(0);
 370:src/console.c ****   t20->newln = 0;
 1949              		.loc 2 370 3 is_stmt 0 view .LVU507
 1950 002e A04C     		ldr	r4, .L233+8
 1951              	.LBB99:
 1952              	.LBB100:
  22:src/menu.c    **** }
 1953              		.loc 1 22 3 view .LVU508
 1954 0030 A04E     		ldr	r6, .L233+12
 1955              	.LBE100:
 1956              	.LBE99:
 371:src/console.c ****   t20->lnfill = 0;
 372:src/console.c ****   t20->fixed = 1;
 373:src/console.c ****   t20->xspc = -2;
 374:src/console.c ****   t20->bgfill = 0;
 375:src/console.c ****   
 376:src/console.c ****   display();
 377:src/console.c ****   display_current_menu();
ARM GAS  /tmp/cc67ZUo8.s 			page 53


 378:src/console.c ****   lcd_refresh();
 379:src/console.c ****   JustDisplayed = 0;
 380:src/console.c ****   /*
 381:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 382:src/console.c ****     Sleeps peacefully while waiting for a key.
 383:src/console.c ****     Handles (in principle!) turning off and on.
 384:src/console.c ****     =================
 385:src/console.c ****     Main event loop
 386:src/console.c ****     =================
 387:src/console.c **** 
 388:src/console.c ****     Status flags:
 389:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 390:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 391:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 392:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 393:src/console.c ****   */
 394:src/console.c ****   for(;;) {
 395:src/console.c **** 
 396:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 397:src/console.c ****       {
 398:src/console.c **** 	CLR_ST(STAT_RUNNING);
 399:src/console.c **** 	sys_sleep();
 400:src/console.c ****       }
 401:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 1957              		.loc 2 401 35 view .LVU509
 1958 0032 A14F     		ldr	r7, .L233+16
 402:src/console.c ****     {
 403:src/console.c ****       CLR_ST(STAT_RUNNING);
 404:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 1959              		.loc 2 404 7 view .LVU510
 1960 0034 DFF80083 		ldr	r8, .L233+144
 368:src/console.c ****   load_lib_file(0);
 1961              		.loc 2 368 3 view .LVU511
 1962 0038 FFF7FEFF 		bl	load_backup_file
 1963              	.LVL176:
 369:src/console.c ****   t20->newln = 0;
 1964              		.loc 2 369 3 is_stmt 1 view .LVU512
 1965 003c 0020     		movs	r0, #0
 1966 003e FFF7FEFF 		bl	load_lib_file
 1967              	.LVL177:
 370:src/console.c ****   t20->lnfill = 0;
 1968              		.loc 2 370 3 view .LVU513
 1969 0042 236B     		ldr	r3, [r4, #48]
 371:src/console.c ****   t20->fixed = 1;
 1970              		.loc 2 371 3 view .LVU514
 372:src/console.c ****   t20->xspc = -2;
 1971              		.loc 2 372 3 view .LVU515
 372:src/console.c ****   t20->xspc = -2;
 1972              		.loc 2 372 14 is_stmt 0 view .LVU516
 1973 0044 0122     		movs	r2, #1
 1974 0046 1A74     		strb	r2, [r3, #16]
 373:src/console.c ****   t20->bgfill = 0;
 1975              		.loc 2 373 3 is_stmt 1 view .LVU517
 374:src/console.c ****   
 1976              		.loc 2 374 15 is_stmt 0 view .LVU518
 1977 0048 0025     		movs	r5, #0
 373:src/console.c ****   t20->bgfill = 0;
ARM GAS  /tmp/cc67ZUo8.s 			page 54


 1978              		.loc 2 373 13 view .LVU519
 1979 004a FE22     		movs	r2, #254
 1980 004c 9A73     		strb	r2, [r3, #14]
 374:src/console.c ****   
 1981              		.loc 2 374 3 is_stmt 1 view .LVU520
 374:src/console.c ****   
 1982              		.loc 2 374 15 is_stmt 0 view .LVU521
 1983 004e 5D82     		strh	r5, [r3, #18]	@ movhi
 370:src/console.c ****   t20->lnfill = 0;
 1984              		.loc 2 370 14 view .LVU522
 1985 0050 1D75     		strb	r5, [r3, #20]
 376:src/console.c ****   display_current_menu();
 1986              		.loc 2 376 3 is_stmt 1 view .LVU523
 1987 0052 FFF7FEFF 		bl	display
 1988              	.LVL178:
 377:src/console.c ****   lcd_refresh();
 1989              		.loc 2 377 3 view .LVU524
 1990              	.LBB102:
 1991              	.LBI99:
  21:src/menu.c    ****   display_menu (current_menu);
 1992              		.loc 1 21 6 view .LVU525
 1993              	.LBB101:
  22:src/menu.c    **** }
 1994              		.loc 1 22 3 view .LVU526
 1995 0056 3068     		ldr	r0, [r6]
 1996 0058 FFF7FEFF 		bl	display_menu
 1997              	.LVL179:
 1998              	.LBE101:
 1999              	.LBE102:
 378:src/console.c ****   JustDisplayed = 0;
 2000              		.loc 2 378 3 view .LVU527
 2001 005c 974B     		ldr	r3, .L233+20
 2002 005e 9847     		blx	r3
 2003              	.LVL180:
 379:src/console.c ****   /*
 2004              		.loc 2 379 3 view .LVU528
 379:src/console.c ****   /*
 2005              		.loc 2 379 17 is_stmt 0 view .LVU529
 2006 0060 974B     		ldr	r3, .L233+24
 2007 0062 1D60     		str	r5, [r3]
 2008              	.L142:
 394:src/console.c **** 
 2009              		.loc 2 394 3 is_stmt 1 view .LVU530
 396:src/console.c ****       {
 2010              		.loc 2 396 5 view .LVU531
 396:src/console.c ****       {
 2011              		.loc 2 396 10 is_stmt 0 view .LVU532
 2012 0064 2368     		ldr	r3, [r4]
 396:src/console.c ****       {
 2013              		.loc 2 396 8 view .LVU533
 2014 0066 9A05     		lsls	r2, r3, #22
 2015 0068 40F18B80 		bpl	.L143
 2016              	.L220:
 396:src/console.c ****       {
 2017              		.loc 2 396 30 discriminator 1 view .LVU534
 2018 006c 2368     		ldr	r3, [r4]
 396:src/console.c ****       {
ARM GAS  /tmp/cc67ZUo8.s 			page 55


 2019              		.loc 2 396 27 discriminator 1 view .LVU535
 2020 006e 5B07     		lsls	r3, r3, #29
 2021 0070 40F18780 		bpl	.L143
 398:src/console.c **** 	sys_sleep();
 2022              		.loc 2 398 2 is_stmt 1 view .LVU536
 2023 0074 2368     		ldr	r3, [r4]
 399:src/console.c ****       }
 2024              		.loc 2 399 2 is_stmt 0 view .LVU537
 2025 0076 934A     		ldr	r2, .L233+28
 398:src/console.c **** 	sys_sleep();
 2026              		.loc 2 398 2 view .LVU538
 2027 0078 23F00203 		bic	r3, r3, #2
 2028 007c 2360     		str	r3, [r4]
 399:src/console.c ****       }
 2029              		.loc 2 399 2 is_stmt 1 view .LVU539
 2030 007e 9047     		blx	r2
 2031              	.LVL181:
 2032              	.L144:
 405:src/console.c ****       sys_sleep();
 406:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 407:src/console.c **** 	key_push (K_HEARTBEAT);
 408:src/console.c **** 	if (Pause > 0) Pause--;
 409:src/console.c ****       }
 410:src/console.c ****       sys_timer_disable(0); // stop timer
 411:src/console.c ****     }
 412:src/console.c ****     
 413:src/console.c ****     // Wakeup in off state or going to sleep
 414:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 2033              		.loc 2 414 5 view .LVU540
 2034              		.loc 2 414 9 is_stmt 0 view .LVU541
 2035 0080 2368     		ldr	r3, [r4]
 2036              		.loc 2 414 8 view .LVU542
 2037 0082 9D05     		lsls	r5, r3, #22
 2038 0084 00F1A480 		bmi	.L150
 2039              	.L221:
 2040              		.loc 2 414 29 discriminator 1 view .LVU543
 2041 0088 2368     		ldr	r3, [r4]
 2042              		.loc 2 414 26 discriminator 1 view .LVU544
 2043 008a 5807     		lsls	r0, r3, #29
 2044 008c 00F1A080 		bmi	.L150
 415:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 416:src/console.c ****         // Going to off mode
 417:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 418:src/console.c ****         draw_power_off_image(1);
 419:src/console.c **** 
 420:src/console.c ****         LCD_power_off(0);
 421:src/console.c ****         SET_ST(STAT_SUSPENDED);
 422:src/console.c ****         SET_ST(STAT_OFF);
 423:src/console.c ****       }
 424:src/console.c ****       // Already in OFF -> just continue to sleep above
 425:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 426:src/console.c ****       // thus reaching the sleep()
 427:src/console.c ****     }
 428:src/console.c **** 
 429:src/console.c ****     // Well, we are woken-up
 430:src/console.c ****     SET_ST(STAT_RUNNING);
 2045              		.loc 2 430 5 is_stmt 1 view .LVU545
ARM GAS  /tmp/cc67ZUo8.s 			page 56


 2046 0090 2368     		ldr	r3, [r4]
 2047 0092 43F00203 		orr	r3, r3, #2
 2048 0096 2360     		str	r3, [r4]
 431:src/console.c **** 
 432:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 433:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 2049              		.loc 2 433 5 view .LVU546
 2050 0098 2368     		ldr	r3, [r4]
 2051 009a 23F00403 		bic	r3, r3, #4
 2052 009e 2360     		str	r3, [r4]
 434:src/console.c **** 
 435:src/console.c ****     // Get up from OFF state
 436:src/console.c ****     if ( ST(STAT_OFF) ) {
 2053              		.loc 2 436 5 view .LVU547
 2054              		.loc 2 436 10 is_stmt 0 view .LVU548
 2055 00a0 2368     		ldr	r3, [r4]
 2056              		.loc 2 436 8 view .LVU549
 2057 00a2 D906     		lsls	r1, r3, #27
 2058 00a4 0CD5     		bpl	.L155
 437:src/console.c ****       LCD_power_on();
 2059              		.loc 2 437 7 is_stmt 1 view .LVU550
 2060 00a6 884B     		ldr	r3, .L233+32
 2061 00a8 9847     		blx	r3
 2062              	.LVL182:
 438:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 2063              		.loc 2 438 7 view .LVU551
 2064 00aa 884B     		ldr	r3, .L233+36
 2065 00ac 9847     		blx	r3
 2066              	.LVL183:
 439:src/console.c **** 
 440:src/console.c ****       CLR_ST(STAT_OFF);
 2067              		.loc 2 440 7 view .LVU552
 2068 00ae 2368     		ldr	r3, [r4]
 441:src/console.c **** 
 442:src/console.c ****       if ( !lcd_get_buf_cleared() )
 2069              		.loc 2 442 13 is_stmt 0 view .LVU553
 2070 00b0 874A     		ldr	r2, .L233+40
 440:src/console.c **** 
 2071              		.loc 2 440 7 view .LVU554
 2072 00b2 23F01003 		bic	r3, r3, #16
 2073 00b6 2360     		str	r3, [r4]
 2074              		.loc 2 442 7 is_stmt 1 view .LVU555
 2075              		.loc 2 442 13 is_stmt 0 view .LVU556
 2076 00b8 9047     		blx	r2
 2077              	.LVL184:
 2078              		.loc 2 442 10 view .LVU557
 2079 00ba 08B9     		cbnz	r0, .L155
 443:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 2080              		.loc 2 443 9 is_stmt 1 view .LVU558
 2081 00bc 854B     		ldr	r3, .L233+44
 2082 00be 9847     		blx	r3
 2083              	.LVL185:
 2084              	.L155:
 444:src/console.c ****     }
 445:src/console.c **** 
 446:src/console.c ****     // Key is ready -> clear auto off timer
 447:src/console.c ****     //    if ( !key_empty() )
ARM GAS  /tmp/cc67ZUo8.s 			page 57


 448:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 449:src/console.c ****     // Fetch the key
 450:src/console.c ****     //  < 0 -> No key event
 451:src/console.c ****     //  > 0 -> Key pressed
 452:src/console.c ****     // == 0 -> Key released
 453:src/console.c ****     c = key_pop();
 2085              		.loc 2 453 5 view .LVU559
 2086              		.loc 2 453 9 is_stmt 0 view .LVU560
 2087 00c0 854B     		ldr	r3, .L233+48
 2088 00c2 9847     		blx	r3
 2089              	.LVL186:
 454:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2090              		.loc 2 454 8 view .LVU561
 2091 00c4 6228     		cmp	r0, #98
 453:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2092              		.loc 2 453 9 view .LVU562
 2093 00c6 8246     		mov	r10, r0
 2094              	.LVL187:
 2095              		.loc 2 454 5 is_stmt 1 view .LVU563
 2096              		.loc 2 454 8 is_stmt 0 view .LVU564
 2097 00c8 00F0A980 		beq	.L157
 2098              		.loc 2 454 29 discriminator 1 view .LVU565
 2099 00cc 0028     		cmp	r0, #0
 2100 00ce 40F3A380 		ble	.L158
 455:src/console.c ****       reset_auto_off();
 2101              		.loc 2 455 7 is_stmt 1 view .LVU566
 2102 00d2 824B     		ldr	r3, .L233+52
 2103 00d4 9847     		blx	r3
 2104              	.LVL188:
 456:src/console.c ****       start_key_timer();
 2105              		.loc 2 456 7 view .LVU567
 2106              	.LBB103:
 2107              	.LBI103:
 242:src/console.c ****     start_ticks = get_rtc_ticks();
 2108              		.loc 2 242 6 view .LVU568
 2109              	.LBB104:
 243:src/console.c **** }
 2110              		.loc 2 243 5 view .LVU569
 243:src/console.c **** }
 2111              		.loc 2 243 19 is_stmt 0 view .LVU570
 2112 00d6 824B     		ldr	r3, .L233+56
 2113 00d8 9847     		blx	r3
 2114              	.LVL189:
 243:src/console.c **** }
 2115              		.loc 2 243 17 view .LVU571
 2116 00da 824B     		ldr	r3, .L233+60
 2117              	.LBE104:
 2118              	.LBE103:
 2119              	.LBB106:
 2120              	.LBB107:
  69:src/console.c **** 
 2121              		.loc 2 69 6 view .LVU572
 2122 00dc BAF1630F 		cmp	r10, #99
 2123              	.LBE107:
 2124              	.LBE106:
 2125              	.LBB119:
 2126              	.LBB105:
ARM GAS  /tmp/cc67ZUo8.s 			page 58


 243:src/console.c **** }
 2127              		.loc 2 243 17 view .LVU573
 2128 00e0 1860     		str	r0, [r3]
 2129              	.LBE105:
 2130              	.LBE119:
 457:src/console.c ****     }
 458:src/console.c ****     if (c >= 0) {
 2131              		.loc 2 458 5 is_stmt 1 view .LVU574
 459:src/console.c ****       remapped = remap(c);
 2132              		.loc 2 459 7 view .LVU575
 2133              	.LVL190:
 2134              	.LBB120:
 2135              	.LBI106:
  61:src/console.c **** 
 2136              		.loc 2 61 22 view .LVU576
 2137              	.LBB108:
  63:src/console.c **** 
 2138              		.loc 2 63 3 view .LVU577
 2139              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 2140              		.loc 3 1 1 view .LVU578
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
ARM GAS  /tmp/cc67ZUo8.s 			page 59


  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 2141              		.loc 3 59 3 view .LVU579
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU, 14}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
ARM GAS  /tmp/cc67ZUo8.s 			page 60


  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_NOP, 0}, // no function
  96:src/keytran.c ****     {K_NOP, 0}, // no function
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 2142              		.loc 3 117 3 view .LVU580
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
ARM GAS  /tmp/cc67ZUo8.s 			page 61


 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 0}, // Exit
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 2143              		.loc 3 175 1 view .LVU581
  67:src/console.c **** 
 2144              		.loc 2 67 3 view .LVU582
  69:src/console.c **** 
 2145              		.loc 2 69 3 view .LVU583
  69:src/console.c **** 
 2146              		.loc 2 69 6 is_stmt 0 view .LVU584
 2147 00e2 00F04A81 		beq	.L215
  71:src/console.c ****     // Start click 
 2148              		.loc 2 71 3 is_stmt 1 view .LVU585
  71:src/console.c ****     // Start click 
 2149              		.loc 2 71 6 is_stmt 0 view .LVU586
 2150 00e6 BAF12C0F 		cmp	r10, #44
 2151 00ea 00F0C180 		beq	.L216
 2152              	.LVL191:
 2153              	.L161:
  85:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2154              		.loc 2 85 3 is_stmt 1 view .LVU587
  85:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2155              		.loc 2 85 8 is_stmt 0 view .LVU588
 2156 00ee FFF7FEFF 		bl	get_alpha_state
 2157              	.LVL192:
  85:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2158              		.loc 2 85 6 view .LVU589
 2159 00f2 0028     		cmp	r0, #0
 2160 00f4 00F08380 		beq	.L163
  86:src/console.c ****       switch (cur_shift()) { 
 2161              		.loc 2 86 5 is_stmt 1 view .LVU590
  86:src/console.c ****       switch (cur_shift()) { 
 2162              		.loc 2 86 8 is_stmt 0 view .LVU591
 2163 00f8 BAF11C0F 		cmp	r10, #28
ARM GAS  /tmp/cc67ZUo8.s 			page 62


 2164 00fc 00F04C81 		beq	.L217
 103:src/console.c ****   }
 2165              		.loc 2 103 5 is_stmt 1 view .LVU592
 103:src/console.c ****   }
 2166              		.loc 2 103 26 is_stmt 0 view .LVU593
 2167 0100 794B     		ldr	r3, .L233+64
 2168              	.L213:
 132:src/console.c ****     break;
 2169              		.loc 2 132 26 view .LVU594
 2170 0102 03EBCA02 		add	r2, r3, r10, lsl #3
 2171 0106 92E80300 		ldm	r2, {r0, r1}
 2172 010a 0DF10809 		add	r9, sp, #8
 2173 010e 13F83AA0 		ldrb	r10, [r3, r10, lsl #3]	@ zero_extendqisi2
 2174              	.LVL193:
 132:src/console.c ****     break;
 2175              		.loc 2 132 26 view .LVU595
 2176 0112 89E80300 		stm	r9, {r0, r1}
 2177 0116 0D46     		mov	r5, r1
 2178              	.LVL194:
 2179              	.L160:
 132:src/console.c ****     break;
 2180              		.loc 2 132 26 view .LVU596
 2181              	.LBE108:
 2182              	.LBE120:
 460:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2183              		.loc 2 460 7 is_stmt 1 view .LVU597
 2184              		.loc 2 460 10 is_stmt 0 view .LVU598
 2185 0118 BAF12F0F 		cmp	r10, #47
 2186 011c 00F08D80 		beq	.L218
 2187              	.LVL195:
 2188              	.L186:
 461:src/console.c **** 	set_menu ( remapped.shift );
 462:src/console.c **** 	display_current_menu ();
 463:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 464:src/console.c **** 	case SHIFT_F:
 465:src/console.c **** 	  remapped = f_shift; // F -> N
 466:src/console.c **** 	  break;
 467:src/console.c **** 	case SHIFT_G:
 468:src/console.c **** 	  remapped = g_shift; // G -> N
 469:src/console.c **** 	  break;
 470:src/console.c **** 	case SHIFT_H:
 471:src/console.c **** 	  remapped = h_shift; // H -> N
 472:src/console.c **** 	default:
 473:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 474:src/console.c **** 	}
 475:src/console.c ****       }
 476:src/console.c ****       if (remapped.key_34s == K_SYS) {
 2189              		.loc 2 476 7 is_stmt 1 view .LVU599
 2190              		.loc 2 476 10 is_stmt 0 view .LVU600
 2191 0120 BAF1300F 		cmp	r10, #48
 2192 0124 18D1     		bne	.L192
 477:src/console.c **** 	SET_ST(STAT_MENU);
 2193              		.loc 2 477 2 is_stmt 1 view .LVU601
 2194 0126 2368     		ldr	r3, [r4]
 478:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 2195              		.loc 2 478 2 is_stmt 0 view .LVU602
 2196 0128 704D     		ldr	r5, .L233+68
ARM GAS  /tmp/cc67ZUo8.s 			page 63


 2197              	.LVL196:
 2198              		.loc 2 478 2 view .LVU603
 2199 012a 7148     		ldr	r0, .L233+72
 2200 012c 0022     		movs	r2, #0
 477:src/console.c **** 	SET_ST(STAT_MENU);
 2201              		.loc 2 477 2 view .LVU604
 2202 012e 43F04003 		orr	r3, r3, #64
 2203              		.loc 2 478 2 view .LVU605
 2204 0132 1146     		mov	r1, r2
 477:src/console.c **** 	SET_ST(STAT_MENU);
 2205              		.loc 2 477 2 view .LVU606
 2206 0134 2360     		str	r3, [r4]
 2207              		.loc 2 478 2 is_stmt 1 view .LVU607
 2208 0136 A847     		blx	r5
 2209              	.LVL197:
 479:src/console.c **** 	CLR_ST(STAT_MENU);
 2210              		.loc 2 479 2 view .LVU608
 480:src/console.c **** 	remapped =  no_key;
 2211              		.loc 2 480 11 is_stmt 0 view .LVU609
 2212 0138 6E4B     		ldr	r3, .L233+76
 479:src/console.c **** 	CLR_ST(STAT_MENU);
 2213              		.loc 2 479 2 view .LVU610
 2214 013a 2268     		ldr	r2, [r4]
 2215              		.loc 2 480 11 view .LVU611
 2216 013c 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2217              	.LVL198:
 2218              		.loc 2 480 11 view .LVU612
 2219 0140 93E80300 		ldm	r3, {r0, r1}
 479:src/console.c **** 	CLR_ST(STAT_MENU);
 2220              		.loc 2 479 2 view .LVU613
 2221 0144 22F04002 		bic	r2, r2, #64
 2222 0148 2260     		str	r2, [r4]
 2223              		.loc 2 480 2 is_stmt 1 view .LVU614
 2224              	.LVL199:
 2225              		.loc 2 480 11 is_stmt 0 view .LVU615
 2226 014a 04AA     		add	r2, sp, #16
 2227 014c 02E90300 		stmdb	r2, {r0, r1}
 2228              	.LBB121:
 2229              	.LBB122:
  22:src/menu.c    **** }
 2230              		.loc 1 22 3 view .LVU616
 2231 0150 3068     		ldr	r0, [r6]
 2232              	.LBE122:
 2233              	.LBE121:
 2234              		.loc 2 480 11 view .LVU617
 2235 0152 0D46     		mov	r5, r1
 2236              	.LVL200:
 481:src/console.c **** 	display_current_menu();
 2237              		.loc 2 481 2 is_stmt 1 view .LVU618
 2238              	.LBB124:
 2239              	.LBI121:
  21:src/menu.c    ****   display_menu (current_menu);
 2240              		.loc 1 21 6 view .LVU619
 2241              	.LBB123:
  22:src/menu.c    **** }
 2242              		.loc 1 22 3 view .LVU620
 2243 0154 FFF7FEFF 		bl	display_menu
ARM GAS  /tmp/cc67ZUo8.s 			page 64


 2244              	.LVL201:
 2245              	.L192:
  22:src/menu.c    **** }
 2246              		.loc 1 22 3 is_stmt 0 view .LVU621
 2247              	.LBE123:
 2248              	.LBE124:
 482:src/console.c ****       }
 483:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 2249              		.loc 2 483 7 is_stmt 1 view .LVU622
 2250              		.loc 2 483 10 is_stmt 0 view .LVU623
 2251 0158 BAF1310F 		cmp	r10, #49
 2252 015c 00F0EE80 		beq	.L219
 484:src/console.c **** 	remapped = do_multi (remapped);
 485:src/console.c **** 	display_current_menu();
 486:src/console.c ****       }
 487:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 2253              		.loc 2 487 7 is_stmt 1 view .LVU624
 2254              		.loc 2 487 10 is_stmt 0 view .LVU625
 2255 0160 BAF1320F 		cmp	r10, #50
 2256 0164 00F00381 		beq	.L194
 2257              	.LVL202:
 2258              	.L214:
 2259              		.loc 2 487 10 view .LVU626
 2260 0168 0DF10809 		add	r9, sp, #8
 2261              	.L165:
 488:src/console.c ****       process_keycode_with_shift(remapped);
 2262              		.loc 2 488 7 is_stmt 1 view .LVU627
 2263              	.LVL203:
 2264              		.loc 2 488 7 is_stmt 0 view .LVU628
 2265 016c 8DF808A0 		strb	r10, [sp, #8]
 2266 0170 0395     		str	r5, [sp, #12]
 2267 0172 99E80300 		ldm	r9, {r0, r1}
 2268 0176 FFF7FEFF 		bl	process_keycode_with_shift
 2269              	.LVL204:
 394:src/console.c **** 
 2270              		.loc 2 394 3 is_stmt 1 view .LVU629
 396:src/console.c ****       {
 2271              		.loc 2 396 5 view .LVU630
 396:src/console.c ****       {
 2272              		.loc 2 396 10 is_stmt 0 view .LVU631
 2273 017a 2368     		ldr	r3, [r4]
 396:src/console.c ****       {
 2274              		.loc 2 396 8 view .LVU632
 2275 017c 9A05     		lsls	r2, r3, #22
 2276 017e 3FF575AF 		bmi	.L220
 2277              	.LVL205:
 2278              	.L143:
 401:src/console.c ****     {
 2279              		.loc 2 401 10 is_stmt 1 view .LVU633
 401:src/console.c ****     {
 2280              		.loc 2 401 15 is_stmt 0 view .LVU634
 2281 0182 2568     		ldr	r5, [r4]
 401:src/console.c ****     {
 2282              		.loc 2 401 13 view .LVU635
 2283 0184 15F40075 		ands	r5, r5, #512
 2284 0188 7FF47AAF 		bne	.L144
 401:src/console.c ****     {
ARM GAS  /tmp/cc67ZUo8.s 			page 65


 2285              		.loc 2 401 35 discriminator 1 view .LVU636
 2286 018c B847     		blx	r7
 2287              	.LVL206:
 401:src/console.c ****     {
 2288              		.loc 2 401 32 discriminator 1 view .LVU637
 2289 018e 0028     		cmp	r0, #0
 2290 0190 3FF476AF 		beq	.L144
 403:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2291              		.loc 2 403 7 is_stmt 1 view .LVU638
 2292 0194 2368     		ldr	r3, [r4]
 2293 0196 23F00203 		bic	r3, r3, #2
 404:src/console.c ****       sys_sleep();
 2294              		.loc 2 404 7 is_stmt 0 view .LVU639
 2295 019a 2846     		mov	r0, r5
 2296 019c 6421     		movs	r1, #100
 403:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2297              		.loc 2 403 7 view .LVU640
 2298 019e 2360     		str	r3, [r4]
 404:src/console.c ****       sys_sleep();
 2299              		.loc 2 404 7 is_stmt 1 view .LVU641
 2300 01a0 C047     		blx	r8
 2301              	.LVL207:
 405:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 2302              		.loc 2 405 7 view .LVU642
 2303 01a2 484B     		ldr	r3, .L233+28
 2304 01a4 9847     		blx	r3
 2305              	.LVL208:
 406:src/console.c **** 	key_push (K_HEARTBEAT);
 2306              		.loc 2 406 7 view .LVU643
 406:src/console.c **** 	key_push (K_HEARTBEAT);
 2307              		.loc 2 406 11 is_stmt 0 view .LVU644
 2308 01a6 544B     		ldr	r3, .L233+80
 2309 01a8 2846     		mov	r0, r5
 2310 01aa 9847     		blx	r3
 2311              	.LVL209:
 406:src/console.c **** 	key_push (K_HEARTBEAT);
 2312              		.loc 2 406 10 view .LVU645
 2313 01ac 48B1     		cbz	r0, .L148
 407:src/console.c **** 	if (Pause > 0) Pause--;
 2314              		.loc 2 407 2 is_stmt 1 view .LVU646
 2315 01ae 534B     		ldr	r3, .L233+84
 2316 01b0 6220     		movs	r0, #98
 2317 01b2 9847     		blx	r3
 2318              	.LVL210:
 408:src/console.c ****       }
 2319              		.loc 2 408 2 view .LVU647
 408:src/console.c ****       }
 2320              		.loc 2 408 12 is_stmt 0 view .LVU648
 2321 01b4 524B     		ldr	r3, .L233+88
 2322 01b6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 408:src/console.c ****       }
 2323              		.loc 2 408 5 view .LVU649
 2324 01b8 1AB1     		cbz	r2, .L148
 408:src/console.c ****       }
 2325              		.loc 2 408 17 is_stmt 1 discriminator 1 view .LVU650
 408:src/console.c ****       }
 2326              		.loc 2 408 22 is_stmt 0 discriminator 1 view .LVU651
ARM GAS  /tmp/cc67ZUo8.s 			page 66


 2327 01ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2328 01bc 013A     		subs	r2, r2, #1
 2329 01be D2B2     		uxtb	r2, r2
 2330 01c0 1A70     		strb	r2, [r3]
 2331              	.L148:
 410:src/console.c ****     }
 2332              		.loc 2 410 7 is_stmt 1 view .LVU652
 2333 01c2 504B     		ldr	r3, .L233+92
 2334 01c4 0020     		movs	r0, #0
 2335 01c6 9847     		blx	r3
 2336              	.LVL211:
 414:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2337              		.loc 2 414 5 view .LVU653
 414:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2338              		.loc 2 414 9 is_stmt 0 view .LVU654
 2339 01c8 2368     		ldr	r3, [r4]
 414:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2340              		.loc 2 414 8 view .LVU655
 2341 01ca 9D05     		lsls	r5, r3, #22
 2342 01cc 7FF55CAF 		bpl	.L221
 2343              	.L150:
 415:src/console.c ****         // Going to off mode
 2344              		.loc 2 415 7 is_stmt 1 view .LVU656
 415:src/console.c ****         // Going to off mode
 2345              		.loc 2 415 12 is_stmt 0 view .LVU657
 2346 01d0 2568     		ldr	r5, [r4]
 415:src/console.c ****         // Going to off mode
 2347              		.loc 2 415 10 view .LVU658
 2348 01d2 15F00405 		ands	r5, r5, #4
 2349 01d6 7FF445AF 		bne	.L142
 417:src/console.c ****         draw_power_off_image(1);
 2350              		.loc 2 417 9 is_stmt 1 view .LVU659
 2351 01da 4B4B     		ldr	r3, .L233+96
 2352 01dc 2846     		mov	r0, r5
 2353 01de 9847     		blx	r3
 2354              	.LVL212:
 418:src/console.c **** 
 2355              		.loc 2 418 9 view .LVU660
 2356 01e0 4A4B     		ldr	r3, .L233+100
 2357 01e2 0120     		movs	r0, #1
 2358 01e4 9847     		blx	r3
 2359              	.LVL213:
 420:src/console.c ****         SET_ST(STAT_SUSPENDED);
 2360              		.loc 2 420 9 view .LVU661
 2361 01e6 4A4B     		ldr	r3, .L233+104
 2362 01e8 2846     		mov	r0, r5
 2363 01ea 9847     		blx	r3
 2364              	.LVL214:
 421:src/console.c ****         SET_ST(STAT_OFF);
 2365              		.loc 2 421 9 view .LVU662
 2366 01ec 2368     		ldr	r3, [r4]
 2367 01ee 43F00403 		orr	r3, r3, #4
 2368 01f2 2360     		str	r3, [r4]
 422:src/console.c ****       }
 2369              		.loc 2 422 9 view .LVU663
 2370 01f4 2368     		ldr	r3, [r4]
 2371 01f6 43F01003 		orr	r3, r3, #16
ARM GAS  /tmp/cc67ZUo8.s 			page 67


 2372 01fa 2360     		str	r3, [r4]
 2373 01fc 32E7     		b	.L142
 2374              	.LVL215:
 2375              	.L163:
 2376              	.LBB125:
 2377              	.LBB109:
 106:src/console.c ****   case KEY_F1:
 2378              		.loc 2 106 3 view .LVU664
 2379 01fe AAF12603 		sub	r3, r10, #38
 2380 0202 052B     		cmp	r3, #5
 2381 0204 00F24381 		bhi	.L169
 2382 0208 DFE813F0 		tbh	[pc, r3, lsl #1]
 2383              	.L171:
 2384 020c 1C01     		.2byte	(.L176-.L171)/2
 2385 020e 2501     		.2byte	(.L175-.L171)/2
 2386 0210 2D01     		.2byte	(.L174-.L171)/2
 2387 0212 0E01     		.2byte	(.L173-.L171)/2
 2388 0214 FB00     		.2byte	(.L172-.L171)/2
 2389 0216 E000     		.2byte	(.L170-.L171)/2
 2390              	.LVL216:
 2391              		.p2align 1
 2392              	.L158:
 106:src/console.c ****   case KEY_F1:
 2393              		.loc 2 106 3 is_stmt 0 view .LVU665
 2394              	.LBE109:
 2395              	.LBE125:
 458:src/console.c ****       remapped = remap(c);
 2396              		.loc 2 458 5 is_stmt 1 view .LVU666
 458:src/console.c ****       remapped = remap(c);
 2397              		.loc 2 458 8 is_stmt 0 view .LVU667
 2398 0218 7FF424AF 		bne	.L142
 2399 021c 67E7     		b	.L161
 2400              	.L157:
 458:src/console.c ****       remapped = remap(c);
 2401              		.loc 2 458 5 is_stmt 1 view .LVU668
 459:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2402              		.loc 2 459 7 view .LVU669
 2403              	.LVL217:
 2404              	.LBB126:
  61:src/console.c **** 
 2405              		.loc 2 61 22 view .LVU670
 2406              	.LBB110:
  63:src/console.c **** 
 2407              		.loc 2 63 3 view .LVU671
   1:src/keytran.c ****     {K_RELEASE, -1},
 2408              		.loc 3 1 1 view .LVU672
  59:src/keytran.c ****     {K_RELEASE, -1},
 2409              		.loc 3 59 3 view .LVU673
 117:src/keytran.c ****     {K_RELEASE, -1},
 2410              		.loc 3 117 3 view .LVU674
 2411              		.loc 3 175 1 view .LVU675
  67:src/console.c **** 
 2412              		.loc 2 67 3 view .LVU676
  67:src/console.c **** 
 2413              		.loc 2 67 23 view .LVU677
  67:src/console.c **** 
 2414              		.loc 2 67 30 is_stmt 0 view .LVU678
ARM GAS  /tmp/cc67ZUo8.s 			page 68


 2415 021e 3D4B     		ldr	r3, .L233+108
 2416              	.LVL218:
 2417              	.L212:
  67:src/console.c **** 
 2418              		.loc 2 67 30 view .LVU679
 2419 0220 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2420              	.LVL219:
  67:src/console.c **** 
 2421              		.loc 2 67 30 view .LVU680
 2422 0224 93E80300 		ldm	r3, {r0, r1}
 2423 0228 0DF10809 		add	r9, sp, #8
 2424              	.LBE110:
 2425              	.LBE126:
 460:src/console.c **** 	set_menu ( remapped.shift );
 2426              		.loc 2 460 10 view .LVU681
 2427 022c BAF12F0F 		cmp	r10, #47
 2428              	.LBB127:
 2429              	.LBB111:
  67:src/console.c **** 
 2430              		.loc 2 67 30 view .LVU682
 2431 0230 89E80300 		stm	r9, {r0, r1}
 2432 0234 0D46     		mov	r5, r1
 2433              	.LVL220:
  67:src/console.c **** 
 2434              		.loc 2 67 30 view .LVU683
 2435              	.LBE111:
 2436              	.LBE127:
 460:src/console.c **** 	set_menu ( remapped.shift );
 2437              		.loc 2 460 7 is_stmt 1 view .LVU684
 460:src/console.c **** 	set_menu ( remapped.shift );
 2438              		.loc 2 460 10 is_stmt 0 view .LVU685
 2439 0236 7FF473AF 		bne	.L186
 2440              	.LVL221:
 2441              	.L218:
 461:src/console.c **** 	display_current_menu ();
 2442              		.loc 2 461 2 is_stmt 1 view .LVU686
 2443              	.LBB128:
 2444              	.LBI128:
   3:src/menu.c    ****   int m = current_menu;
 2445              		.loc 1 3 6 view .LVU687
 2446              	.LBB129:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2447              		.loc 1 4 3 view .LVU688
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2448              		.loc 1 4 7 is_stmt 0 view .LVU689
 2449 023a 3368     		ldr	r3, [r6]
 2450              	.LVL222:
   5:src/menu.c    ****     current_menu = 0;
 2451              		.loc 1 5 3 is_stmt 1 view .LVU690
   5:src/menu.c    ****     current_menu = 0;
 2452              		.loc 1 5 6 is_stmt 0 view .LVU691
 2453 023c AB42     		cmp	r3, r5
 2454 023e 00F0A180 		beq	.L187
   8:src/menu.c    ****     current_menu = last_menu;
 2455              		.loc 1 8 8 is_stmt 1 view .LVU692
   8:src/menu.c    ****     current_menu = last_menu;
 2456              		.loc 1 8 11 is_stmt 0 view .LVU693
ARM GAS  /tmp/cc67ZUo8.s 			page 69


 2457 0242 6A1C     		adds	r2, r5, #1
 2458 0244 00F0A480 		beq	.L222
 2459              	.LVL223:
 2460              	.L188:
  12:src/menu.c    ****   }
 2461              		.loc 1 12 5 is_stmt 1 view .LVU694
 2462 0248 334A     		ldr	r2, .L233+112
  12:src/menu.c    ****   }
 2463              		.loc 1 12 18 is_stmt 0 view .LVU695
 2464 024a 3560     		str	r5, [r6]
 2465              	.LVL224:
 2466              	.L190:
  14:src/menu.c    **** }
 2467              		.loc 1 14 3 is_stmt 1 view .LVU696
 2468              	.LBE129:
 2469              	.LBE128:
 2470              	.LBB133:
 2471              	.LBB134:
  22:src/menu.c    **** }
 2472              		.loc 1 22 3 is_stmt 0 view .LVU697
 2473 024c 2846     		mov	r0, r5
 2474              	.LBE134:
 2475              	.LBE133:
 2476              	.LBB136:
 2477              	.LBB130:
  14:src/menu.c    **** }
 2478              		.loc 1 14 13 view .LVU698
 2479 024e 1360     		str	r3, [r2]
 2480              	.LBE130:
 2481              	.LBE136:
 462:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 2482              		.loc 2 462 2 is_stmt 1 view .LVU699
 2483              	.LBB137:
 2484              	.LBI133:
  21:src/menu.c    ****   display_menu (current_menu);
 2485              		.loc 1 21 6 view .LVU700
 2486              	.LBB135:
  22:src/menu.c    **** }
 2487              		.loc 1 22 3 view .LVU701
 2488 0250 FFF7FEFF 		bl	display_menu
 2489              	.LVL225:
 2490              	.LBE135:
 2491              	.LBE137:
 463:src/console.c **** 	case SHIFT_F:
 2492              		.loc 2 463 2 view .LVU702
 463:src/console.c **** 	case SHIFT_F:
 2493              		.loc 2 463 10 is_stmt 0 view .LVU703
 2494 0254 FFF7FEFF 		bl	cur_shift
 2495              	.LVL226:
 463:src/console.c **** 	case SHIFT_F:
 2496              		.loc 2 463 2 view .LVU704
 2497 0258 0228     		cmp	r0, #2
 465:src/console.c **** 	  break;
 2498              		.loc 2 465 4 is_stmt 1 view .LVU705
 465:src/console.c **** 	  break;
 2499              		.loc 2 465 13 is_stmt 0 view .LVU706
 2500 025a 14BF     		ite	ne
ARM GAS  /tmp/cc67ZUo8.s 			page 70


 2501 025c 2F4B     		ldrne	r3, .L233+116
 468:src/console.c **** 	  break;
 2502              		.loc 2 468 4 is_stmt 1 view .LVU707
 468:src/console.c **** 	  break;
 2503              		.loc 2 468 13 is_stmt 0 view .LVU708
 2504 025e 304B     		ldreq	r3, .L233+120
 2505 0260 93E80300 		ldm	r3, {r0, r1}
 2506 0264 89E80300 		stm	r9, {r0, r1}
 2507 0268 0D46     		mov	r5, r1
 2508 026a 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2509              	.LVL227:
 469:src/console.c **** 	case SHIFT_H:
 2510              		.loc 2 469 4 is_stmt 1 view .LVU709
 2511 026e 57E7     		b	.L186
 2512              	.LVL228:
 2513              	.L216:
 2514              	.LBB138:
 2515              	.LBB112:
  73:src/console.c ****     // Make screenshot - allow to report errors
 2516              		.loc 2 73 5 view .LVU710
 2517 0270 2C4B     		ldr	r3, .L233+124
 2518 0272 41F23010 		movw	r0, #4400
 2519 0276 9847     		blx	r3
 2520              	.LVL229:
  73:src/console.c ****     // Make screenshot - allow to report errors
 2521              		.loc 2 73 30 view .LVU711
 2522 0278 0A20     		movs	r0, #10
 2523 027a 2B4B     		ldr	r3, .L233+128
 2524 027c 9847     		blx	r3
 2525              	.LVL230:
  73:src/console.c ****     // Make screenshot - allow to report errors
 2526              		.loc 2 73 45 view .LVU712
 2527 027e 2B4B     		ldr	r3, .L233+132
 2528 0280 9847     		blx	r3
 2529              	.LVL231:
  75:src/console.c ****       // Was error just wait for confirmation
 2530              		.loc 2 75 5 view .LVU713
  75:src/console.c ****       // Was error just wait for confirmation
 2531              		.loc 2 75 10 is_stmt 0 view .LVU714
 2532 0282 2B4B     		ldr	r3, .L233+136
 2533 0284 0120     		movs	r0, #1
 2534 0286 9847     		blx	r3
 2535              	.LVL232:
  75:src/console.c ****       // Was error just wait for confirmation
 2536              		.loc 2 75 8 view .LVU715
 2537 0288 0228     		cmp	r0, #2
 2538 028a 01D1     		bne	.L162
  77:src/console.c ****     }
 2539              		.loc 2 77 7 is_stmt 1 view .LVU716
 2540 028c 294B     		ldr	r3, .L233+140
 2541 028e 9847     		blx	r3
 2542              	.LVL233:
 2543              	.L162:
  80:src/console.c ****     return no_key;
 2544              		.loc 2 80 5 view .LVU717
 2545 0290 244B     		ldr	r3, .L233+124
 2546 0292 42F26020 		movw	r0, #8800
ARM GAS  /tmp/cc67ZUo8.s 			page 71


 2547 0296 9847     		blx	r3
 2548              	.LVL234:
  80:src/console.c ****     return no_key;
 2549              		.loc 2 80 30 view .LVU718
 2550 0298 234B     		ldr	r3, .L233+128
 2551 029a 0A20     		movs	r0, #10
 2552 029c 9847     		blx	r3
 2553              	.LVL235:
  80:src/console.c ****     return no_key;
 2554              		.loc 2 80 45 view .LVU719
 2555 029e 234B     		ldr	r3, .L233+132
 2556 02a0 9847     		blx	r3
 2557              	.LVL236:
  81:src/console.c ****   }
 2558              		.loc 2 81 5 view .LVU720
  81:src/console.c ****   }
 2559              		.loc 2 81 12 is_stmt 0 view .LVU721
 2560 02a2 144B     		ldr	r3, .L233+76
 2561 02a4 BCE7     		b	.L212
 2562              	.L234:
 2563 02a6 00BF     		.align	2
 2564              	.L233:
 2565 02a8 00000000 		.word	StateWhileOn
 2566 02ac 00000000 		.word	DispMsg
 2567 02b0 00200010 		.word	268443648
 2568 02b4 00000000 		.word	.LANCHOR1
 2569 02b8 7D030008 		.word	134218621
 2570 02bc 31020008 		.word	134218289
 2571 02c0 00000000 		.word	JustDisplayed
 2572 02c4 19040008 		.word	134218777
 2573 02c8 19020008 		.word	134218265
 2574 02cc E5020008 		.word	134218469
 2575 02d0 59020008 		.word	134218329
 2576 02d4 35020008 		.word	134218293
 2577 02d8 89030008 		.word	134218633
 2578 02dc B9030008 		.word	134218681
 2579 02e0 B9040008 		.word	134218937
 2580 02e4 00000000 		.word	.LANCHOR4
 2581 02e8 00000000 		.word	.LANCHOR11
 2582 02ec 59030008 		.word	134218585
 2583 02f0 00000000 		.word	.LANCHOR15
 2584 02f4 00000000 		.word	.LANCHOR6
 2585 02f8 01040008 		.word	134218753
 2586 02fc 81030008 		.word	134218625
 2587 0300 00000000 		.word	Pause
 2588 0304 F5030008 		.word	134218741
 2589 0308 55020008 		.word	134218325
 2590 030c 2D040008 		.word	134218797
 2591 0310 1D020008 		.word	134218269
 2592 0314 00000000 		.word	.LANCHOR16
 2593 0318 00000000 		.word	.LANCHOR2
 2594 031c 00000000 		.word	.LANCHOR13
 2595 0320 00000000 		.word	.LANCHOR14
 2596 0324 F5020008 		.word	134218485
 2597 0328 05040008 		.word	134218757
 2598 032c F9020008 		.word	134218489
 2599 0330 79030008 		.word	134218617
ARM GAS  /tmp/cc67ZUo8.s 			page 72


 2600 0334 99030008 		.word	134218649
 2601 0338 F9030008 		.word	134218745
 2602              	.LVL237:
 2603              	.L219:
  81:src/console.c ****   }
 2604              		.loc 2 81 12 view .LVU722
 2605              	.LBE112:
 2606              	.LBE138:
 484:src/console.c **** 	display_current_menu();
 2607              		.loc 2 484 2 is_stmt 1 view .LVU723
 484:src/console.c **** 	display_current_menu();
 2608              		.loc 2 484 13 is_stmt 0 view .LVU724
 2609 033c 8DF808A0 		strb	r10, [sp, #8]
 2610 0340 0395     		str	r5, [sp, #12]
 2611 0342 0DF10809 		add	r9, sp, #8
 2612 0346 6D46     		mov	r5, sp
 2613              	.LVL238:
 484:src/console.c **** 	display_current_menu();
 2614              		.loc 2 484 13 view .LVU725
 2615 0348 99E80600 		ldm	r9, {r1, r2}
 2616 034c 2846     		mov	r0, r5
 2617 034e FFF7FEFF 		bl	do_multi
 2618              	.LVL239:
 2619 0352 95E80300 		ldm	r5, {r0, r1}
 2620 0356 89E80300 		stm	r9, {r0, r1}
 2621              	.LVL240:
 484:src/console.c **** 	display_current_menu();
 2622              		.loc 2 484 13 view .LVU726
 2623 035a 9DF808A0 		ldrb	r10, [sp, #8]	@ zero_extendqisi2
 2624              	.LVL241:
 2625              	.LBB139:
 2626              	.LBB140:
  22:src/menu.c    **** }
 2627              		.loc 1 22 3 view .LVU727
 2628 035e 3068     		ldr	r0, [r6]
 2629              	.LBE140:
 2630              	.LBE139:
 484:src/console.c **** 	display_current_menu();
 2631              		.loc 2 484 13 view .LVU728
 2632 0360 039D     		ldr	r5, [sp, #12]
 2633              	.LVL242:
 485:src/console.c ****       }
 2634              		.loc 2 485 2 is_stmt 1 view .LVU729
 2635              	.LBB142:
 2636              	.LBI139:
  21:src/menu.c    ****   display_menu (current_menu);
 2637              		.loc 1 21 6 view .LVU730
 2638              	.LBB141:
  22:src/menu.c    **** }
 2639              		.loc 1 22 3 view .LVU731
 2640 0362 FFF7FEFF 		bl	display_menu
 2641              	.LVL243:
  22:src/menu.c    **** }
 2642              		.loc 1 22 3 is_stmt 0 view .LVU732
 2643              	.LBE141:
 2644              	.LBE142:
 487:src/console.c ****       process_keycode_with_shift(remapped);
ARM GAS  /tmp/cc67ZUo8.s 			page 73


 2645              		.loc 2 487 7 is_stmt 1 view .LVU733
 487:src/console.c ****       process_keycode_with_shift(remapped);
 2646              		.loc 2 487 10 is_stmt 0 view .LVU734
 2647 0366 BAF1320F 		cmp	r10, #50
 2648 036a 7FF4FDAE 		bne	.L214
 2649              	.LVL244:
 2650              	.L194:
 489:src/console.c ****     }
 490:src/console.c ****   }
 491:src/console.c ****   save_ram_file(0);
 2651              		.loc 2 491 3 is_stmt 1 view .LVU735
 2652 036e 0020     		movs	r0, #0
 492:src/console.c ****   return;
 493:src/console.c **** }
 2653              		.loc 2 493 1 is_stmt 0 view .LVU736
 2654 0370 04B0     		add	sp, sp, #16
 2655              		.cfi_remember_state
 2656              		.cfi_def_cfa_offset 32
 2657              		@ sp needed
 2658 0372 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2659              		.cfi_restore 14
 2660              		.cfi_restore 10
 2661              		.cfi_restore 9
 2662              		.cfi_restore 8
 2663              		.cfi_restore 7
 2664              		.cfi_restore 6
 2665              		.cfi_restore 5
 2666              		.cfi_restore 4
 2667              		.cfi_def_cfa_offset 0
 491:src/console.c ****   return;
 2668              		.loc 2 491 3 view .LVU737
 2669 0376 FFF7FEBF 		b	save_ram_file
 2670              	.LVL245:
 2671              	.L215:
 2672              		.cfi_restore_state
 2673              	.LBB143:
 2674              	.LBB113:
  69:src/console.c **** 
 2675              		.loc 2 69 16 is_stmt 1 view .LVU738
  69:src/console.c **** 
 2676              		.loc 2 69 23 is_stmt 0 view .LVU739
 2677 037a 864B     		ldr	r3, .L235
 2678 037c 50E7     		b	.L212
 2679              	.LVL246:
 2680              	.L197:
  69:src/console.c **** 
 2681              		.loc 2 69 23 view .LVU740
 2682              	.LBE113:
 2683              	.LBE143:
 2684              	.LBB144:
 2685              	.LBB131:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2686              		.loc 1 4 7 view .LVU741
 2687 037e 1D46     		mov	r5, r3
 2688 0380 0DF10809 		add	r9, sp, #8
 2689              	.LVL247:
 2690              	.L187:
ARM GAS  /tmp/cc67ZUo8.s 			page 74


   6:src/menu.c    ****   }
 2691              		.loc 1 6 5 is_stmt 1 view .LVU742
   6:src/menu.c    ****   }
 2692              		.loc 1 6 18 is_stmt 0 view .LVU743
 2693 0384 0022     		movs	r2, #0
 2694 0386 2B46     		mov	r3, r5
 2695              	.LVL248:
   6:src/menu.c    ****   }
 2696              		.loc 1 6 18 view .LVU744
 2697 0388 3260     		str	r2, [r6]
 2698              	.LVL249:
   6:src/menu.c    ****   }
 2699              		.loc 1 6 18 view .LVU745
 2700 038a 1546     		mov	r5, r2
 2701 038c 824A     		ldr	r2, .L235+4
 2702 038e 5DE7     		b	.L190
 2703              	.LVL250:
 2704              	.L222:
   9:src/menu.c    ****   }
 2705              		.loc 1 9 5 is_stmt 1 view .LVU746
   9:src/menu.c    ****   }
 2706              		.loc 1 9 18 is_stmt 0 view .LVU747
 2707 0390 814A     		ldr	r2, .L235+4
 2708 0392 1568     		ldr	r5, [r2]
 2709              	.LVL251:
   9:src/menu.c    ****   }
 2710              		.loc 1 9 18 view .LVU748
 2711 0394 3560     		str	r5, [r6]
 2712 0396 59E7     		b	.L190
 2713              	.LVL252:
 2714              	.L217:
   9:src/menu.c    ****   }
 2715              		.loc 1 9 18 view .LVU749
 2716              	.LBE131:
 2717              	.LBE144:
 2718              	.LBB145:
 2719              	.LBB114:
  87:src/console.c ****       case SHIFT_N:
 2720              		.loc 2 87 7 is_stmt 1 view .LVU750
  87:src/console.c ****       case SHIFT_N:
 2721              		.loc 2 87 15 is_stmt 0 view .LVU751
 2722 0398 FFF7FEFF 		bl	cur_shift
 2723              	.LVL253:
  87:src/console.c ****       case SHIFT_N:
 2724              		.loc 2 87 7 view .LVU752
 2725 039c 0328     		cmp	r0, #3
  87:src/console.c ****       case SHIFT_N:
 2726              		.loc 2 87 15 view .LVU753
 2727 039e 0546     		mov	r5, r0
  87:src/console.c ****       case SHIFT_N:
 2728              		.loc 2 87 7 view .LVU754
 2729 03a0 00F2B280 		bhi	.L195
 2730 03a4 0128     		cmp	r0, #1
 2731 03a6 6CD8     		bhi	.L166
 2732 03a8 0028     		cmp	r0, #0
 2733 03aa 7ED0     		beq	.L223
  90:src/console.c ****       case SHIFT_F:
ARM GAS  /tmp/cc67ZUo8.s 			page 75


 2734              		.loc 2 90 2 is_stmt 1 view .LVU755
  92:src/console.c **** 	break;
 2735              		.loc 2 92 2 view .LVU756
  92:src/console.c **** 	break;
 2736              		.loc 2 92 23 is_stmt 0 view .LVU757
 2737 03ac 7B4B     		ldr	r3, .L235+8
 2738 03ae 93E80300 		ldm	r3, {r0, r1}
 2739 03b2 0DF10809 		add	r9, sp, #8
 2740 03b6 89E80300 		stm	r9, {r0, r1}
 2741              	.LVL254:
  92:src/console.c **** 	break;
 2742              		.loc 2 92 23 view .LVU758
 2743              	.LBE114:
 2744              	.LBE145:
 460:src/console.c **** 	set_menu ( remapped.shift );
 2745              		.loc 2 460 7 is_stmt 1 view .LVU759
 476:src/console.c **** 	SET_ST(STAT_MENU);
 2746              		.loc 2 476 7 view .LVU760
 483:src/console.c **** 	remapped = do_multi (remapped);
 2747              		.loc 2 483 7 view .LVU761
 487:src/console.c ****       process_keycode_with_shift(remapped);
 2748              		.loc 2 487 7 view .LVU762
 2749              	.LBB146:
 2750              	.LBB115:
  92:src/console.c **** 	break;
 2751              		.loc 2 92 23 is_stmt 0 view .LVU763
 2752 03ba 0025     		movs	r5, #0
 2753 03bc 4FF02A0A 		mov	r10, #42
 2754              	.LVL255:
  92:src/console.c **** 	break;
 2755              		.loc 2 92 23 view .LVU764
 2756 03c0 D4E6     		b	.L165
 2757              	.LVL256:
 2758              	.L181:
 121:src/console.c ****   case KEY_F6:
 2759              		.loc 2 121 5 is_stmt 1 view .LVU765
 121:src/console.c ****   case KEY_F6:
 2760              		.loc 2 121 9 is_stmt 0 view .LVU766
 2761 03c2 FFF7FEFF 		bl	cur_shift
 2762              	.LVL257:
 121:src/console.c ****   case KEY_F6:
 2763              		.loc 2 121 8 view .LVU767
 2764 03c6 0128     		cmp	r0, #1
 2765 03c8 00F0B480 		beq	.L224
 2766              	.L170:
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2767              		.loc 2 123 5 is_stmt 1 view .LVU768
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2768              		.loc 2 123 9 is_stmt 0 view .LVU769
 2769 03cc FFF7FEFF 		bl	cur_shift
 2770              	.LVL258:
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2771              		.loc 2 123 8 view .LVU770
 2772 03d0 0028     		cmp	r0, #0
 2773 03d2 58D1     		bne	.L182
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2774              		.loc 2 123 33 is_stmt 1 view .LVU771
ARM GAS  /tmp/cc67ZUo8.s 			page 76


 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2775              		.loc 2 123 67 is_stmt 0 view .LVU772
 2776 03d4 3168     		ldr	r1, [r6]
 2777 03d6 724A     		ldr	r2, .L235+12
 2778 03d8 D023     		movs	r3, #208
 2779 03da 03FB01F3 		mul	r3, r3, r1
 2780 03de D018     		adds	r0, r2, r3
 2781 03e0 D0E92C01 		ldrd	r0, r1, [r0, #176]
 2782 03e4 B033     		adds	r3, r3, #176
 2783              	.L211:
 2784 03e6 0DF10809 		add	r9, sp, #8
 2785 03ea 12F803A0 		ldrb	r10, [r2, r3]	@ zero_extendqisi2
 2786              	.LVL259:
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2787              		.loc 2 123 67 view .LVU773
 2788 03ee 89E80300 		stm	r9, {r0, r1}
 2789 03f2 1344     		add	r3, r3, r2
 2790 03f4 5D68     		ldr	r5, [r3, #4]
 2791              	.LVL260:
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2792              		.loc 2 123 67 view .LVU774
 2793 03f6 8FE6     		b	.L160
 2794              	.LVL261:
 2795              	.L180:
 118:src/console.c ****   case KEY_F5:
 2796              		.loc 2 118 5 is_stmt 1 view .LVU775
 118:src/console.c ****   case KEY_F5:
 2797              		.loc 2 118 9 is_stmt 0 view .LVU776
 2798 03f8 FFF7FEFF 		bl	cur_shift
 2799              	.LVL262:
 118:src/console.c ****   case KEY_F5:
 2800              		.loc 2 118 8 view .LVU777
 2801 03fc 0128     		cmp	r0, #1
 2802 03fe 00F08580 		beq	.L225
 2803              	.L172:
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2804              		.loc 2 120 5 is_stmt 1 view .LVU778
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2805              		.loc 2 120 9 is_stmt 0 view .LVU779
 2806 0402 FFF7FEFF 		bl	cur_shift
 2807              	.LVL263:
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2808              		.loc 2 120 8 view .LVU780
 2809 0406 0028     		cmp	r0, #0
 2810 0408 DBD1     		bne	.L181
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2811              		.loc 2 120 33 is_stmt 1 view .LVU781
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2812              		.loc 2 120 67 is_stmt 0 view .LVU782
 2813 040a 3168     		ldr	r1, [r6]
 2814 040c 644A     		ldr	r2, .L235+12
 2815 040e D023     		movs	r3, #208
 2816 0410 03FB01F3 		mul	r3, r3, r1
 2817 0414 D018     		adds	r0, r2, r3
 2818 0416 D0E92401 		ldrd	r0, r1, [r0, #144]
 2819 041a 9033     		adds	r3, r3, #144
 2820 041c E3E7     		b	.L211
ARM GAS  /tmp/cc67ZUo8.s 			page 77


 2821              	.L179:
 115:src/console.c ****   case KEY_F4:
 2822              		.loc 2 115 5 is_stmt 1 view .LVU783
 115:src/console.c ****   case KEY_F4:
 2823              		.loc 2 115 9 is_stmt 0 view .LVU784
 2824 041e FFF7FEFF 		bl	cur_shift
 2825              	.LVL264:
 115:src/console.c ****   case KEY_F4:
 2826              		.loc 2 115 8 view .LVU785
 2827 0422 0128     		cmp	r0, #1
 2828 0424 00F09080 		beq	.L226
 2829              	.L173:
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2830              		.loc 2 117 5 is_stmt 1 view .LVU786
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2831              		.loc 2 117 9 is_stmt 0 view .LVU787
 2832 0428 FFF7FEFF 		bl	cur_shift
 2833              	.LVL265:
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2834              		.loc 2 117 8 view .LVU788
 2835 042c 0028     		cmp	r0, #0
 2836 042e E3D1     		bne	.L180
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2837              		.loc 2 117 33 is_stmt 1 view .LVU789
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2838              		.loc 2 117 67 is_stmt 0 view .LVU790
 2839 0430 3168     		ldr	r1, [r6]
 2840 0432 5B4A     		ldr	r2, .L235+12
 2841 0434 D023     		movs	r3, #208
 2842 0436 03FB01F3 		mul	r3, r3, r1
 2843 043a D018     		adds	r0, r2, r3
 2844 043c D0E91C01 		ldrd	r0, r1, [r0, #112]
 2845 0440 7033     		adds	r3, r3, #112
 2846 0442 D0E7     		b	.L211
 2847              	.L176:
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2848              		.loc 2 108 5 is_stmt 1 view .LVU791
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2849              		.loc 2 108 9 is_stmt 0 view .LVU792
 2850 0444 FFF7FEFF 		bl	cur_shift
 2851              	.LVL266:
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2852              		.loc 2 108 8 view .LVU793
 2853 0448 0028     		cmp	r0, #0
 2854 044a 42D0     		beq	.L227
 109:src/console.c ****   case KEY_F2:
 2855              		.loc 2 109 5 is_stmt 1 view .LVU794
 109:src/console.c ****   case KEY_F2:
 2856              		.loc 2 109 9 is_stmt 0 view .LVU795
 2857 044c FFF7FEFF 		bl	cur_shift
 2858              	.LVL267:
 109:src/console.c ****   case KEY_F2:
 2859              		.loc 2 109 8 view .LVU796
 2860 0450 0128     		cmp	r0, #1
 2861 0452 00F09580 		beq	.L228
 2862              	.L175:
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
ARM GAS  /tmp/cc67ZUo8.s 			page 78


 2863              		.loc 2 111 5 is_stmt 1 view .LVU797
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2864              		.loc 2 111 9 is_stmt 0 view .LVU798
 2865 0456 FFF7FEFF 		bl	cur_shift
 2866              	.LVL268:
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2867              		.loc 2 111 8 view .LVU799
 2868 045a 80B3     		cbz	r0, .L229
 112:src/console.c ****   case KEY_F3:
 2869              		.loc 2 112 5 is_stmt 1 view .LVU800
 112:src/console.c ****   case KEY_F3:
 2870              		.loc 2 112 9 is_stmt 0 view .LVU801
 2871 045c FFF7FEFF 		bl	cur_shift
 2872              	.LVL269:
 112:src/console.c ****   case KEY_F3:
 2873              		.loc 2 112 8 view .LVU802
 2874 0460 0128     		cmp	r0, #1
 2875 0462 00F08380 		beq	.L230
 2876              	.L174:
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2877              		.loc 2 114 5 is_stmt 1 view .LVU803
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2878              		.loc 2 114 9 is_stmt 0 view .LVU804
 2879 0466 FFF7FEFF 		bl	cur_shift
 2880              	.LVL270:
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2881              		.loc 2 114 8 view .LVU805
 2882 046a 0028     		cmp	r0, #0
 2883 046c D7D1     		bne	.L179
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2884              		.loc 2 114 33 is_stmt 1 view .LVU806
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2885              		.loc 2 114 67 is_stmt 0 view .LVU807
 2886 046e 3168     		ldr	r1, [r6]
 2887 0470 4B4A     		ldr	r2, .L235+12
 2888 0472 D023     		movs	r3, #208
 2889 0474 03FB01F3 		mul	r3, r3, r1
 2890 0478 D018     		adds	r0, r2, r3
 2891 047a D0E91401 		ldrd	r0, r1, [r0, #80]
 2892 047e 5033     		adds	r3, r3, #80
 2893 0480 B1E7     		b	.L211
 2894              	.L166:
  93:src/console.c ****       case SHIFT_G:
 2895              		.loc 2 93 2 is_stmt 1 view .LVU808
  95:src/console.c **** 	break;
 2896              		.loc 2 95 2 view .LVU809
  95:src/console.c **** 	break;
 2897              		.loc 2 95 9 is_stmt 0 view .LVU810
 2898 0482 484B     		ldr	r3, .L235+16
 2899 0484 CCE6     		b	.L212
 2900              	.L182:
 124:src/console.c ****   }
 2901              		.loc 2 124 5 is_stmt 1 view .LVU811
 124:src/console.c ****   }
 2902              		.loc 2 124 9 is_stmt 0 view .LVU812
 2903 0486 FFF7FEFF 		bl	cur_shift
 2904              	.LVL271:
ARM GAS  /tmp/cc67ZUo8.s 			page 79


 124:src/console.c ****   }
 2905              		.loc 2 124 8 view .LVU813
 2906 048a 0128     		cmp	r0, #1
 2907 048c 48D0     		beq	.L231
 2908              	.L169:
 127:src/console.c ****   case SHIFT_N:    
 2909              		.loc 2 127 3 is_stmt 1 view .LVU814
 127:src/console.c ****   case SHIFT_N:    
 2910              		.loc 2 127 11 is_stmt 0 view .LVU815
 2911 048e FFF7FEFF 		bl	cur_shift
 2912              	.LVL272:
 127:src/console.c ****   case SHIFT_N:    
 2913              		.loc 2 127 3 view .LVU816
 2914 0492 0128     		cmp	r0, #1
 2915 0494 27D0     		beq	.L183
 2916 0496 0228     		cmp	r0, #2
 2917 0498 29D0     		beq	.L184
 2918 049a 30B3     		cbz	r0, .L185
  63:src/console.c **** 
 2919              		.loc 2 63 41 view .LVU817
 2920 049c 5FFA8AFA 		uxtb	r10, r10
 2921              	.LVL273:
  63:src/console.c **** 
 2922              		.loc 2 63 41 view .LVU818
 2923              	.LBE115:
 2924              	.LBE146:
 460:src/console.c **** 	set_menu ( remapped.shift );
 2925              		.loc 2 460 7 is_stmt 1 view .LVU819
 460:src/console.c **** 	set_menu ( remapped.shift );
 2926              		.loc 2 460 10 is_stmt 0 view .LVU820
 2927 04a0 BAF12F0F 		cmp	r10, #47
 2928 04a4 5AD0     		beq	.L232
 2929              	.LBB147:
 2930              	.LBB116:
 138:src/console.c ****   }
 2931              		.loc 2 138 12 view .LVU821
 2932 04a6 0025     		movs	r5, #0
 2933 04a8 3AE6     		b	.L186
 2934              	.LVL274:
 2935              	.L223:
  89:src/console.c **** 	break;
 2936              		.loc 2 89 2 is_stmt 1 view .LVU822
  89:src/console.c **** 	break;
 2937              		.loc 2 89 21 is_stmt 0 view .LVU823
 2938 04aa 3F4A     		ldr	r2, .L235+20
 2939 04ac 92E80300 		ldm	r2, {r0, r1}
 2940 04b0 0DF10809 		add	r9, sp, #8
 2941 04b4 89E80300 		stm	r9, {r0, r1}
 2942              	.LVL275:
  89:src/console.c **** 	break;
 2943              		.loc 2 89 21 view .LVU824
 2944              	.LBE116:
 2945              	.LBE147:
 460:src/console.c **** 	set_menu ( remapped.shift );
 2946              		.loc 2 460 7 is_stmt 1 view .LVU825
 476:src/console.c **** 	SET_ST(STAT_MENU);
 2947              		.loc 2 476 7 view .LVU826
ARM GAS  /tmp/cc67ZUo8.s 			page 80


 483:src/console.c **** 	remapped = do_multi (remapped);
 2948              		.loc 2 483 7 view .LVU827
 487:src/console.c ****       process_keycode_with_shift(remapped);
 2949              		.loc 2 487 7 view .LVU828
 2950              	.LBB148:
 2951              	.LBB117:
  89:src/console.c **** 	break;
 2952              		.loc 2 89 21 is_stmt 0 view .LVU829
 2953 04b8 4FF0290A 		mov	r10, #41
 2954              	.LVL276:
  89:src/console.c **** 	break;
 2955              		.loc 2 89 21 view .LVU830
 2956 04bc 56E6     		b	.L165
 2957              	.LVL277:
 2958              	.L229:
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2959              		.loc 2 111 33 is_stmt 1 view .LVU831
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2960              		.loc 2 111 67 is_stmt 0 view .LVU832
 2961 04be 3168     		ldr	r1, [r6]
 2962 04c0 374A     		ldr	r2, .L235+12
 2963 04c2 D023     		movs	r3, #208
 2964 04c4 03FB01F3 		mul	r3, r3, r1
 2965 04c8 D018     		adds	r0, r2, r3
 2966 04ca D0E90C01 		ldrd	r0, r1, [r0, #48]
 2967 04ce 3033     		adds	r3, r3, #48
 2968 04d0 89E7     		b	.L211
 2969              	.L227:
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2970              		.loc 2 108 33 is_stmt 1 view .LVU833
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2971              		.loc 2 108 67 is_stmt 0 view .LVU834
 2972 04d2 3168     		ldr	r1, [r6]
 2973 04d4 324A     		ldr	r2, .L235+12
 2974 04d6 D023     		movs	r3, #208
 2975 04d8 03FB01F3 		mul	r3, r3, r1
 2976 04dc D018     		adds	r0, r2, r3
 2977 04de D0E90401 		ldrd	r0, r1, [r0, #16]
 2978 04e2 1033     		adds	r3, r3, #16
 2979 04e4 7FE7     		b	.L211
 2980              	.L183:
 130:src/console.c ****   case SHIFT_F:
 2981              		.loc 2 130 5 is_stmt 1 view .LVU835
 132:src/console.c ****     break;
 2982              		.loc 2 132 5 view .LVU836
 132:src/console.c ****     break;
 2983              		.loc 2 132 26 is_stmt 0 view .LVU837
 2984 04e6 314B     		ldr	r3, .L235+24
 2985 04e8 0BE6     		b	.L213
 2986              	.L185:
 129:src/console.c ****     break;
 2987              		.loc 2 129 5 is_stmt 1 view .LVU838
 129:src/console.c ****     break;
 2988              		.loc 2 129 24 is_stmt 0 view .LVU839
 2989 04ea 314B     		ldr	r3, .L235+28
 2990 04ec 09E6     		b	.L213
 2991              	.L184:
ARM GAS  /tmp/cc67ZUo8.s 			page 81


 133:src/console.c ****   case SHIFT_G:
 2992              		.loc 2 133 5 is_stmt 1 view .LVU840
 135:src/console.c ****     break;
 2993              		.loc 2 135 5 view .LVU841
 135:src/console.c ****     break;
 2994              		.loc 2 135 26 is_stmt 0 view .LVU842
 2995 04ee 314B     		ldr	r3, .L235+32
 2996 04f0 03EBCA02 		add	r2, r3, r10, lsl #3
 2997 04f4 92E80300 		ldm	r2, {r0, r1}
 2998 04f8 0DF10809 		add	r9, sp, #8
 2999 04fc 89E80300 		stm	r9, {r0, r1}
 3000 0500 13F83AA0 		ldrb	r10, [r3, r10, lsl #3]	@ zero_extendqisi2
 3001              	.LVL278:
 135:src/console.c ****     break;
 3002              		.loc 2 135 26 view .LVU843
 3003 0504 0D46     		mov	r5, r1
 3004              	.LVL279:
 135:src/console.c ****     break;
 3005              		.loc 2 135 26 view .LVU844
 3006 0506 07E6     		b	.L160
 3007              	.LVL280:
 3008              	.L195:
  87:src/console.c ****       case SHIFT_N:
 3009              		.loc 2 87 7 view .LVU845
 3010 0508 0025     		movs	r5, #0
 3011 050a 2DE6     		b	.L214
 3012              	.L225:
 118:src/console.c ****   case KEY_F5:
 3013              		.loc 2 118 33 is_stmt 1 view .LVU846
 118:src/console.c ****   case KEY_F5:
 3014              		.loc 2 118 67 is_stmt 0 view .LVU847
 3015 050c 3168     		ldr	r1, [r6]
 3016 050e 244A     		ldr	r2, .L235+12
 3017 0510 D023     		movs	r3, #208
 3018 0512 03FB01F3 		mul	r3, r3, r1
 3019 0516 D018     		adds	r0, r2, r3
 3020 0518 D0E91E01 		ldrd	r0, r1, [r0, #120]
 3021 051c 7833     		adds	r3, r3, #120
 3022 051e 62E7     		b	.L211
 3023              	.L231:
 124:src/console.c ****   }
 3024              		.loc 2 124 33 is_stmt 1 view .LVU848
 124:src/console.c ****   }
 3025              		.loc 2 124 67 is_stmt 0 view .LVU849
 3026 0520 3168     		ldr	r1, [r6]
 3027 0522 1F4A     		ldr	r2, .L235+12
 3028 0524 D023     		movs	r3, #208
 3029 0526 03FB01F3 		mul	r3, r3, r1
 3030 052a D018     		adds	r0, r2, r3
 3031 052c D0E92E01 		ldrd	r0, r1, [r0, #184]
 3032 0530 B833     		adds	r3, r3, #184
 3033 0532 58E7     		b	.L211
 3034              	.L224:
 121:src/console.c ****   case KEY_F6:
 3035              		.loc 2 121 33 is_stmt 1 view .LVU850
 121:src/console.c ****   case KEY_F6:
 3036              		.loc 2 121 67 is_stmt 0 view .LVU851
ARM GAS  /tmp/cc67ZUo8.s 			page 82


 3037 0534 3168     		ldr	r1, [r6]
 3038 0536 1A4A     		ldr	r2, .L235+12
 3039 0538 D023     		movs	r3, #208
 3040 053a 03FB01F3 		mul	r3, r3, r1
 3041 053e D018     		adds	r0, r2, r3
 3042 0540 D0E92601 		ldrd	r0, r1, [r0, #152]
 3043 0544 9833     		adds	r3, r3, #152
 3044 0546 4EE7     		b	.L211
 3045              	.L226:
 115:src/console.c ****   case KEY_F4:
 3046              		.loc 2 115 33 is_stmt 1 view .LVU852
 115:src/console.c ****   case KEY_F4:
 3047              		.loc 2 115 67 is_stmt 0 view .LVU853
 3048 0548 3168     		ldr	r1, [r6]
 3049 054a 154A     		ldr	r2, .L235+12
 3050 054c D023     		movs	r3, #208
 3051 054e 03FB01F3 		mul	r3, r3, r1
 3052 0552 D018     		adds	r0, r2, r3
 3053 0554 D0E91601 		ldrd	r0, r1, [r0, #88]
 3054 0558 5833     		adds	r3, r3, #88
 3055 055a 44E7     		b	.L211
 3056              	.LVL281:
 3057              	.L232:
 115:src/console.c ****   case KEY_F4:
 3058              		.loc 2 115 67 view .LVU854
 3059              	.LBE117:
 3060              	.LBE148:
 461:src/console.c **** 	display_current_menu ();
 3061              		.loc 2 461 2 is_stmt 1 view .LVU855
 3062              	.LBB149:
   3:src/menu.c    ****   int m = current_menu;
 3063              		.loc 1 3 6 view .LVU856
 3064              	.LBB132:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3065              		.loc 1 4 3 view .LVU857
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3066              		.loc 1 4 7 is_stmt 0 view .LVU858
 3067 055c 3368     		ldr	r3, [r6]
 3068              	.LVL282:
   5:src/menu.c    ****     current_menu = 0;
 3069              		.loc 1 5 3 is_stmt 1 view .LVU859
   5:src/menu.c    ****     current_menu = 0;
 3070              		.loc 1 5 6 is_stmt 0 view .LVU860
 3071 055e 002B     		cmp	r3, #0
 3072 0560 3FF40DAF 		beq	.L197
 3073              	.LBE132:
 3074              	.LBE149:
 3075              	.LBB150:
 3076              	.LBB118:
 138:src/console.c ****   }
 3077              		.loc 2 138 12 view .LVU861
 3078 0564 0025     		movs	r5, #0
 3079 0566 0DF10809 		add	r9, sp, #8
 3080 056a 6DE6     		b	.L188
 3081              	.LVL283:
 3082              	.L230:
 112:src/console.c ****   case KEY_F3:
ARM GAS  /tmp/cc67ZUo8.s 			page 83


 3083              		.loc 2 112 33 is_stmt 1 view .LVU862
 112:src/console.c ****   case KEY_F3:
 3084              		.loc 2 112 67 is_stmt 0 view .LVU863
 3085 056c 3168     		ldr	r1, [r6]
 3086 056e 0C4A     		ldr	r2, .L235+12
 3087 0570 D023     		movs	r3, #208
 3088 0572 03FB01F3 		mul	r3, r3, r1
 3089 0576 D018     		adds	r0, r2, r3
 3090 0578 D0E90E01 		ldrd	r0, r1, [r0, #56]
 3091 057c 3833     		adds	r3, r3, #56
 3092 057e 32E7     		b	.L211
 3093              	.L228:
 109:src/console.c ****   case KEY_F2:
 3094              		.loc 2 109 33 is_stmt 1 view .LVU864
 109:src/console.c ****   case KEY_F2:
 3095              		.loc 2 109 67 is_stmt 0 view .LVU865
 3096 0580 3168     		ldr	r1, [r6]
 3097 0582 074A     		ldr	r2, .L235+12
 3098 0584 D023     		movs	r3, #208
 3099 0586 03FB01F3 		mul	r3, r3, r1
 3100 058a D018     		adds	r0, r2, r3
 3101 058c D0E90601 		ldrd	r0, r1, [r0, #24]
 3102 0590 1833     		adds	r3, r3, #24
 3103 0592 28E7     		b	.L211
 3104              	.L236:
 3105              		.align	2
 3106              	.L235:
 3107 0594 00000000 		.word	.LANCHOR7
 3108 0598 00000000 		.word	.LANCHOR2
 3109 059c E0000000 		.word	.LANCHOR9+224
 3110 05a0 00000000 		.word	.LANCHOR3
 3111 05a4 00000000 		.word	.LANCHOR10
 3112 05a8 E0000000 		.word	.LANCHOR8+224
 3113 05ac 00000000 		.word	.LANCHOR9
 3114 05b0 00000000 		.word	.LANCHOR8
 3115 05b4 00000000 		.word	.LANCHOR12
 3116              	.LBE118:
 3117              	.LBE150:
 3118              		.cfi_endproc
 3119              	.LFE23:
 3121              		.global	n_p
 3122              		.comm	print_string,22,4
 3123              		.global	spaces
 3124              		.global	release
 3125              		.global	h_shift
 3126              		.global	g_shift
 3127              		.global	f_shift
 3128              		.global	heartbeat
 3129              		.global	no_key
 3130              		.global	MID_MENU
 3131              		.section	.rodata.str1.4,"aMS",%progbits,1
 3132              		.align	2
 3133              	.LC3:
 3134 0000 53797374 		.ascii	"System!\000"
 3134      656D2100 
 3135              		.global	mid_menu
 3136              		.section	.bss.current_menu,"aw",%nobits
ARM GAS  /tmp/cc67ZUo8.s 			page 84


 3137              		.align	2
 3138              		.set	.LANCHOR1,. + 0
 3141              	current_menu:
 3142 0000 00000000 		.space	4
 3143              		.section	.bss.last_menu,"aw",%nobits
 3144              		.align	2
 3145              		.set	.LANCHOR2,. + 0
 3148              	last_menu:
 3149 0000 00000000 		.space	4
 3150              		.section	.bss.mdots,"aw",%nobits
 3151              		.align	2
 3152              		.set	.LANCHOR0,. + 0
 3155              	mdots:
 3156 0000 00000000 		.space	400
 3156      00000000 
 3156      00000000 
 3156      00000000 
 3156      00000000 
 3157              		.section	.bss.n_p,"aw",%nobits
 3158              		.align	2
 3161              	n_p:
 3162 0000 00000000 		.space	4
 3163              		.section	.bss.start_ticks,"aw",%nobits
 3164              		.align	2
 3165              		.set	.LANCHOR4,. + 0
 3168              	start_ticks:
 3169 0000 00000000 		.space	4
 3170              		.section	.data.f_shift,"aw"
 3171              		.align	2
 3172              		.set	.LANCHOR13,. + 0
 3175              	f_shift:
 3176 0000 29       		.byte	41
 3177 0001 000000   		.space	3
 3178 0004 FFFFFFFF 		.word	-1
 3179              		.section	.data.g_shift,"aw"
 3180              		.align	2
 3181              		.set	.LANCHOR14,. + 0
 3184              	g_shift:
 3185 0000 2A       		.byte	42
 3186 0001 000000   		.space	3
 3187 0004 FFFFFFFF 		.word	-1
 3188              		.section	.data.h_shift,"aw"
 3189              		.align	2
 3190              		.set	.LANCHOR10,. + 0
 3193              	h_shift:
 3194 0000 2B       		.byte	43
 3195 0001 000000   		.space	3
 3196 0004 FFFFFFFF 		.word	-1
 3197              		.section	.data.heartbeat,"aw"
 3198              		.align	2
 3199              		.set	.LANCHOR16,. + 0
 3202              	heartbeat:
 3203 0000 62       		.byte	98
 3204 0001 000000   		.space	3
 3205 0004 FFFFFFFF 		.word	-1
 3206              		.section	.data.no_key,"aw"
 3207              		.align	2
ARM GAS  /tmp/cc67ZUo8.s 			page 85


 3208              		.set	.LANCHOR6,. + 0
 3211              	no_key:
 3212 0000 2E       		.byte	46
 3213 0001 000000   		.space	3
 3214 0004 00000000 		.word	0
 3215              		.section	.data.release,"aw"
 3216              		.align	2
 3217              		.set	.LANCHOR7,. + 0
 3220              	release:
 3221 0000 63       		.byte	99
 3222 0001 000000   		.space	3
 3223 0004 FFFFFFFF 		.word	-1
 3224              		.section	.data.spaces,"aw"
 3225              		.align	2
 3226              		.set	.LANCHOR5,. + 0
 3229              	spaces:
 3230 0000 20202020 		.ascii	"                     \000"
 3230      20202020 
 3230      20202020 
 3230      20202020 
 3230      20202020 
 3231              		.section	.rodata.MID_MENU,"a"
 3232              		.align	2
 3233              		.set	.LANCHOR15,. + 0
 3236              	MID_MENU:
 3237 0000 00000000 		.word	.LC3
 3238 0004 00000000 		.word	mid_menu
 3239 0008 00000000 		.word	0
 3240 000c 00000000 		.word	0
 3241              		.section	.rodata.Menus,"a"
 3242              		.align	2
 3243              		.set	.LANCHOR3,. + 0
 3246              	Menus:
 3247 0000 426C616E 		.ascii	"Blank\000"
 3247      6B00
 3248 0006 00000000 		.space	9
 3248      00000000 
 3248      00
 3249 000f 00       		.space	1
 3250 0010 2E       		.byte	46
 3251 0011 000000   		.space	3
 3252 0014 FFFFFFFF 		.word	-1
 3253 0018 2E       		.byte	46
 3254 0019 000000   		.space	3
 3255 001c FFFFFFFF 		.word	-1
 3256 0020 00       		.ascii	"\000"
 3257 0021 00000000 		.space	7
 3257      000000
 3258 0028 00       		.ascii	"\000"
 3259 0029 00000000 		.space	7
 3259      000000
 3260 0030 2E       		.byte	46
 3261 0031 000000   		.space	3
 3262 0034 FFFFFFFF 		.word	-1
 3263 0038 2E       		.byte	46
 3264 0039 000000   		.space	3
 3265 003c FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc67ZUo8.s 			page 86


 3266 0040 00       		.ascii	"\000"
 3267 0041 00000000 		.space	7
 3267      000000
 3268 0048 00       		.ascii	"\000"
 3269 0049 00000000 		.space	7
 3269      000000
 3270 0050 2E       		.byte	46
 3271 0051 000000   		.space	3
 3272 0054 FFFFFFFF 		.word	-1
 3273 0058 2E       		.byte	46
 3274 0059 000000   		.space	3
 3275 005c FFFFFFFF 		.word	-1
 3276 0060 00       		.ascii	"\000"
 3277 0061 00000000 		.space	7
 3277      000000
 3278 0068 00       		.ascii	"\000"
 3279 0069 00000000 		.space	7
 3279      000000
 3280 0070 2E       		.byte	46
 3281 0071 000000   		.space	3
 3282 0074 FFFFFFFF 		.word	-1
 3283 0078 2E       		.byte	46
 3284 0079 000000   		.space	3
 3285 007c FFFFFFFF 		.word	-1
 3286 0080 00       		.ascii	"\000"
 3287 0081 00000000 		.space	7
 3287      000000
 3288 0088 00       		.ascii	"\000"
 3289 0089 00000000 		.space	7
 3289      000000
 3290 0090 2C       		.byte	44
 3291 0091 000000   		.space	3
 3292 0094 FFFFFFFF 		.word	-1
 3293 0098 2E       		.byte	46
 3294 0099 000000   		.space	3
 3295 009c FFFFFFFF 		.word	-1
 3296 00a0 2D2D0D00 		.ascii	"--\015\000"
 3297 00a4 00000000 		.space	4
 3298 00a8 00       		.ascii	"\000"
 3299 00a9 00000000 		.space	7
 3299      000000
 3300 00b0 2D       		.byte	45
 3301 00b1 000000   		.space	3
 3302 00b4 FFFFFFFF 		.word	-1
 3303 00b8 2E       		.byte	46
 3304 00b9 000000   		.space	3
 3305 00bc FFFFFFFF 		.word	-1
 3306 00c0 43505800 		.ascii	"CPX\000"
 3307 00c4 00000000 		.space	4
 3308 00c8 00       		.ascii	"\000"
 3309 00c9 00000000 		.space	7
 3309      000000
 3310 00d0 436C6561 		.ascii	"Clear\000"
 3310      7200
 3311 00d6 00000000 		.space	9
 3311      00000000 
 3311      00
ARM GAS  /tmp/cc67ZUo8.s 			page 87


 3312 00df 00       		.space	1
 3313 00e0 10       		.byte	16
 3314 00e1 000000   		.space	3
 3315 00e4 01000000 		.word	1
 3316 00e8 2E       		.byte	46
 3317 00e9 000000   		.space	3
 3318 00ec FFFFFFFF 		.word	-1
 3319 00f0 434C5072 		.ascii	"CLProg\000"
 3319      6F6700
 3320 00f7 00       		.space	1
 3321 00f8 00       		.ascii	"\000"
 3322 00f9 00000000 		.space	7
 3322      000000
 3323 0100 10       		.byte	16
 3324 0101 000000   		.space	3
 3325 0104 02000000 		.word	2
 3326 0108 2E       		.byte	46
 3327 0109 000000   		.space	3
 3328 010c FFFFFFFF 		.word	-1
 3329 0110 434C9100 		.ascii	"CL\221\000"
 3330 0114 00000000 		.space	4
 3331 0118 00       		.ascii	"\000"
 3332 0119 00000000 		.space	7
 3332      000000
 3333 0120 10       		.byte	16
 3334 0121 000000   		.space	3
 3335 0124 03000000 		.word	3
 3336 0128 2E       		.byte	46
 3337 0129 000000   		.space	3
 3338 012c FFFFFFFF 		.word	-1
 3339 0130 434C2058 		.ascii	"CL X\000"
 3339      00
 3340 0135 000000   		.space	3
 3341 0138 00       		.ascii	"\000"
 3342 0139 00000000 		.space	7
 3342      000000
 3343 0140 2E       		.byte	46
 3344 0141 000000   		.space	3
 3345 0144 FFFFFFFF 		.word	-1
 3346 0148 2E       		.byte	46
 3347 0149 000000   		.space	3
 3348 014c FFFFFFFF 		.word	-1
 3349 0150 00       		.ascii	"\000"
 3350 0151 00000000 		.space	7
 3350      000000
 3351 0158 00       		.ascii	"\000"
 3352 0159 00000000 		.space	7
 3352      000000
 3353 0160 2C       		.byte	44
 3354 0161 000000   		.space	3
 3355 0164 FFFFFFFF 		.word	-1
 3356 0168 2E       		.byte	46
 3357 0169 000000   		.space	3
 3358 016c FFFFFFFF 		.word	-1
 3359 0170 2D2D0D00 		.ascii	"--\015\000"
 3360 0174 00000000 		.space	4
 3361 0178 00       		.ascii	"\000"
ARM GAS  /tmp/cc67ZUo8.s 			page 88


 3362 0179 00000000 		.space	7
 3362      000000
 3363 0180 2D       		.byte	45
 3364 0181 000000   		.space	3
 3365 0184 FFFFFFFF 		.word	-1
 3366 0188 2E       		.byte	46
 3367 0189 000000   		.space	3
 3368 018c FFFFFFFF 		.word	-1
 3369 0190 43505800 		.ascii	"CPX\000"
 3370 0194 00000000 		.space	4
 3371 0198 00       		.ascii	"\000"
 3372 0199 00000000 		.space	7
 3372      000000
 3373 01a0 44495350 		.ascii	"DISP\000"
 3373      00
 3374 01a5 00000000 		.space	10
 3374      00000000 
 3374      0000
 3375 01af 00       		.space	1
 3376 01b0 00       		.byte	0
 3377 01b1 000000   		.space	3
 3378 01b4 03000000 		.word	3
 3379 01b8 05       		.byte	5
 3380 01b9 000000   		.space	3
 3381 01bc 01000000 		.word	1
 3382 01c0 414C4C00 		.ascii	"ALL\000"
 3383 01c4 00000000 		.space	4
 3384 01c8 6120622F 		.ascii	"a b/c\000"
 3384      6300
 3385 01ce 0000     		.space	2
 3386 01d0 01       		.byte	1
 3387 01d1 000000   		.space	3
 3388 01d4 03000000 		.word	3
 3389 01d8 05       		.byte	5
 3390 01d9 000000   		.space	3
 3391 01dc 02000000 		.word	2
 3392 01e0 46495800 		.ascii	"FIX\000"
 3393 01e4 00000000 		.space	4
 3394 01e8 642F6300 		.ascii	"d/c\000"
 3395 01ec 00000000 		.space	4
 3396 01f0 02       		.byte	2
 3397 01f1 000000   		.space	3
 3398 01f4 03000000 		.word	3
 3399 01f8 06       		.byte	6
 3400 01f9 000000   		.space	3
 3401 01fc 01000000 		.word	1
 3402 0200 53434900 		.ascii	"SCI\000"
 3403 0204 00000000 		.space	4
 3404 0208 482E4D53 		.ascii	"H.MS\000"
 3404      00
 3405 020d 000000   		.space	3
 3406 0210 03       		.byte	3
 3407 0211 000000   		.space	3
 3408 0214 03000000 		.word	3
 3409 0218 07       		.byte	7
 3410 0219 000000   		.space	3
 3411 021c 01000000 		.word	1
ARM GAS  /tmp/cc67ZUo8.s 			page 89


 3412 0220 454E4700 		.ascii	"ENG\000"
 3413 0224 00000000 		.space	4
 3414 0228 482E6400 		.ascii	"H.d\000"
 3415 022c 00000000 		.space	4
 3416 0230 2C       		.byte	44
 3417 0231 000000   		.space	3
 3418 0234 FFFFFFFF 		.word	-1
 3419 0238 26       		.byte	38
 3420 0239 000000   		.space	3
 3421 023c 03000000 		.word	3
 3422 0240 2D2D0D00 		.ascii	"--\015\000"
 3423 0244 00000000 		.space	4
 3424 0248 2E2F2C00 		.ascii	"./,\000"
 3425 024c 00000000 		.space	4
 3426 0250 2D       		.byte	45
 3427 0251 000000   		.space	3
 3428 0254 FFFFFFFF 		.word	-1
 3429 0258 2E       		.byte	46
 3430 0259 000000   		.space	3
 3431 025c FFFFFFFF 		.word	-1
 3432 0260 43505800 		.ascii	"CPX\000"
 3433 0264 00000000 		.space	4
 3434 0268 00       		.ascii	"\000"
 3435 0269 00000000 		.space	7
 3435      000000
 3436 0270 42415345 		.ascii	"BASE\000"
 3436      00
 3437 0275 00000000 		.space	10
 3437      00000000 
 3437      0000
 3438 027f 00       		.space	1
 3439 0280 0E       		.byte	14
 3440 0281 000000   		.space	3
 3441 0284 01000000 		.word	1
 3442 0288 0E       		.byte	14
 3443 0289 000000   		.space	3
 3444 028c 03000000 		.word	3
 3445 0290 42494E00 		.ascii	"BIN\000"
 3446 0294 00000000 		.space	4
 3447 0298 6E6F7400 		.ascii	"not\000"
 3448 029c 00000000 		.space	4
 3449 02a0 0E       		.byte	14
 3450 02a1 000000   		.space	3
 3451 02a4 02000000 		.word	2
 3452 02a8 13       		.byte	19
 3453 02a9 000000   		.space	3
 3454 02ac 03000000 		.word	3
 3455 02b0 4F435400 		.ascii	"OCT\000"
 3456 02b4 00000000 		.space	4
 3457 02b8 616E6400 		.ascii	"and\000"
 3458 02bc 00000000 		.space	4
 3459 02c0 0F       		.byte	15
 3460 02c1 000000   		.space	3
 3461 02c4 01000000 		.word	1
 3462 02c8 14       		.byte	20
 3463 02c9 000000   		.space	3
 3464 02cc 03000000 		.word	3
ARM GAS  /tmp/cc67ZUo8.s 			page 90


 3465 02d0 44454300 		.ascii	"DEC\000"
 3466 02d4 00000000 		.space	4
 3467 02d8 6F7200   		.ascii	"or\000"
 3468 02db 00000000 		.space	5
 3468      00
 3469 02e0 0F       		.byte	15
 3470 02e1 000000   		.space	3
 3471 02e4 02000000 		.word	2
 3472 02e8 15       		.byte	21
 3473 02e9 000000   		.space	3
 3474 02ec 03000000 		.word	3
 3475 02f0 48455800 		.ascii	"HEX\000"
 3476 02f4 00000000 		.space	4
 3477 02f8 786F7200 		.ascii	"xor\000"
 3478 02fc 00000000 		.space	4
 3479 0300 2C       		.byte	44
 3480 0301 000000   		.space	3
 3481 0304 FFFFFFFF 		.word	-1
 3482 0308 16       		.byte	22
 3483 0309 000000   		.space	3
 3484 030c 03000000 		.word	3
 3485 0310 2D2D0D00 		.ascii	"--\015\000"
 3486 0314 00000000 		.space	4
 3487 0318 524D4452 		.ascii	"RMDR\000"
 3487      00
 3488 031d 000000   		.space	3
 3489 0320 2D       		.byte	45
 3490 0321 000000   		.space	3
 3491 0324 FFFFFFFF 		.word	-1
 3492 0328 07       		.byte	7
 3493 0329 000000   		.space	3
 3494 032c 01000000 		.word	1
 3495 0330 43505800 		.ascii	"CPX\000"
 3496 0334 00000000 		.space	4
 3497 0338 482E6400 		.ascii	"H.d\000"
 3498 033c 00000000 		.space	4
 3499 0340 414E474C 		.ascii	"ANGLES\000"
 3499      455300
 3500 0347 00000000 		.space	8
 3500      00000000 
 3501 034f 00       		.space	1
 3502 0350 06       		.byte	6
 3503 0351 000000   		.space	3
 3504 0354 02000000 		.word	2
 3505 0358 04       		.byte	4
 3506 0359 000000   		.space	3
 3507 035c 01000000 		.word	1
 3508 0360 44454700 		.ascii	"DEG\000"
 3509 0364 00000000 		.space	4
 3510 0368 500D5200 		.ascii	"P\015R\000"
 3511 036c 00000000 		.space	4
 3512 0370 07       		.byte	7
 3513 0371 000000   		.space	3
 3514 0374 02000000 		.word	2
 3515 0378 04       		.byte	4
 3516 0379 000000   		.space	3
 3517 037c 02000000 		.word	2
ARM GAS  /tmp/cc67ZUo8.s 			page 91


 3518 0380 52414400 		.ascii	"RAD\000"
 3519 0384 00000000 		.space	4
 3520 0388 520D5000 		.ascii	"R\015P\000"
 3521 038c 00000000 		.space	4
 3522 0390 08       		.byte	8
 3523 0391 000000   		.space	3
 3524 0394 02000000 		.word	2
 3525 0398 00       		.byte	0
 3526 0399 000000   		.space	3
 3527 039c 01000000 		.word	1
 3528 03a0 47524144 		.ascii	"GRAD\000"
 3528      00
 3529 03a5 000000   		.space	3
 3530 03a8 48595000 		.ascii	"HYP\000"
 3531 03ac 00000000 		.space	4
 3532 03b0 06       		.byte	6
 3533 03b1 000000   		.space	3
 3534 03b4 01000000 		.word	1
 3535 03b8 07       		.byte	7
 3536 03b9 000000   		.space	3
 3537 03bc 01000000 		.word	1
 3538 03c0 482E4D53 		.ascii	"H.MS\000"
 3538      00
 3539 03c5 000000   		.space	3
 3540 03c8 482E6400 		.ascii	"H.d\000"
 3541 03cc 00000000 		.space	4
 3542 03d0 2C       		.byte	44
 3543 03d1 000000   		.space	3
 3544 03d4 FFFFFFFF 		.word	-1
 3545 03d8 00       		.byte	0
 3546 03d9 000000   		.space	3
 3547 03dc 02000000 		.word	2
 3548 03e0 2D2D0D00 		.ascii	"--\015\000"
 3549 03e4 00000000 		.space	4
 3550 03e8 4859509D 		.ascii	"HYP\235\000"
 3550      00
 3551 03ed 000000   		.space	3
 3552 03f0 2D       		.byte	45
 3553 03f1 000000   		.space	3
 3554 03f4 FFFFFFFF 		.word	-1
 3555 03f8 2E       		.byte	46
 3556 03f9 000000   		.space	3
 3557 03fc FFFFFFFF 		.word	-1
 3558 0400 43505800 		.ascii	"CPX\000"
 3559 0404 00000000 		.space	4
 3560 0408 00       		.ascii	"\000"
 3561 0409 00000000 		.space	7
 3561      000000
 3562 0410 4D495343 		.ascii	"MISC\000"
 3562      00
 3563 0415 00000000 		.space	10
 3563      00000000 
 3563      0000
 3564 041f 00       		.space	1
 3565 0420 25       		.byte	37
 3566 0421 000000   		.space	3
 3567 0424 01000000 		.word	1
ARM GAS  /tmp/cc67ZUo8.s 			page 92


 3568 0428 14       		.byte	20
 3569 0429 000000   		.space	3
 3570 042c 01000000 		.word	1
 3571 0430 7C587C00 		.ascii	"|X|\000"
 3572 0434 00000000 		.space	4
 3573 0438 329C00   		.ascii	"2\234\000"
 3574 043b 00000000 		.space	5
 3574      00
 3575 0440 25       		.byte	37
 3576 0441 000000   		.space	3
 3577 0444 02000000 		.word	2
 3578 0448 14       		.byte	20
 3579 0449 000000   		.space	3
 3580 044c 02000000 		.word	2
 3581 0450 524E4400 		.ascii	"RND\000"
 3582 0454 00000000 		.space	4
 3583 0458 4C6F67BA 		.ascii	"Log\272\000"
 3583      00
 3584 045d 000000   		.space	3
 3585 0460 26       		.byte	38
 3586 0461 000000   		.space	3
 3587 0464 01000000 		.word	1
 3588 0468 15       		.byte	21
 3589 0469 000000   		.space	3
 3590 046c 02000000 		.word	2
 3591 0470 49506172 		.ascii	"IPart\000"
 3591      7400
 3592 0476 0000     		.space	2
 3593 0478 4C6F678B 		.ascii	"Log\213\000"
 3593      00
 3594 047d 000000   		.space	3
 3595 0480 26       		.byte	38
 3596 0481 000000   		.space	3
 3597 0484 02000000 		.word	2
 3598 0488 16       		.byte	22
 3599 0489 000000   		.space	3
 3600 048c 02000000 		.word	2
 3601 0490 46506172 		.ascii	"FPart\000"
 3601      7400
 3602 0496 0000     		.space	2
 3603 0498 7C7C656C 		.ascii	"||el\000"
 3603      00
 3604 049d 000000   		.space	3
 3605 04a0 2C       		.byte	44
 3606 04a1 000000   		.space	3
 3607 04a4 FFFFFFFF 		.word	-1
 3608 04a8 22       		.byte	34
 3609 04a9 000000   		.space	3
 3610 04ac 02000000 		.word	2
 3611 04b0 2D2D0D00 		.ascii	"--\015\000"
 3612 04b4 00000000 		.space	4
 3613 04b8 832500   		.ascii	"\203%\000"
 3614 04bb 00000000 		.space	5
 3614      00
 3615 04c0 2D       		.byte	45
 3616 04c1 000000   		.space	3
 3617 04c4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc67ZUo8.s 			page 93


 3618 04c8 2E       		.byte	46
 3619 04c9 000000   		.space	3
 3620 04cc FFFFFFFF 		.word	-1
 3621 04d0 43505800 		.ascii	"CPX\000"
 3622 04d4 00000000 		.space	4
 3623 04d8 00       		.ascii	"\000"
 3624 04d9 00000000 		.space	7
 3624      000000
 3625 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 3625      204B6579 
 3625      00
 3626 04e9 00000000 		.space	6
 3626      0000
 3627 04ef 00       		.space	1
 3628 04f0 0D       		.byte	13
 3629 04f1 000000   		.space	3
 3630 04f4 01000000 		.word	1
 3631 04f8 2E       		.byte	46
 3632 04f9 000000   		.space	3
 3633 04fc FFFFFFFF 		.word	-1
 3634 0500 53686F77 		.ascii	"Show\016\000"
 3634      0E00
 3635 0506 0000     		.space	2
 3636 0508 00       		.ascii	"\000"
 3637 0509 00000000 		.space	7
 3637      000000
 3638 0510 0D       		.byte	13
 3639 0511 000000   		.space	3
 3640 0514 02000000 		.word	2
 3641 0518 2E       		.byte	46
 3642 0519 000000   		.space	3
 3643 051c FFFFFFFF 		.word	-1
 3644 0520 53686F77 		.ascii	"Show\015\000"
 3644      0D00
 3645 0526 0000     		.space	2
 3646 0528 00       		.ascii	"\000"
 3647 0529 00000000 		.space	7
 3647      000000
 3648 0530 0D       		.byte	13
 3649 0531 000000   		.space	3
 3650 0534 03000000 		.word	3
 3651 0538 2E       		.byte	46
 3652 0539 000000   		.space	3
 3653 053c FFFFFFFF 		.word	-1
 3654 0540 78173F00 		.ascii	"x\027?\000"
 3655 0544 00000000 		.space	4
 3656 0548 00       		.ascii	"\000"
 3657 0549 00000000 		.space	7
 3657      000000
 3658 0550 2E       		.byte	46
 3659 0551 000000   		.space	3
 3660 0554 FFFFFFFF 		.word	-1
 3661 0558 2E       		.byte	46
 3662 0559 000000   		.space	3
 3663 055c FFFFFFFF 		.word	-1
 3664 0560 00       		.ascii	"\000"
 3665 0561 00000000 		.space	7
ARM GAS  /tmp/cc67ZUo8.s 			page 94


 3665      000000
 3666 0568 00       		.ascii	"\000"
 3667 0569 00000000 		.space	7
 3667      000000
 3668 0570 2C       		.byte	44
 3669 0571 000000   		.space	3
 3670 0574 FFFFFFFF 		.word	-1
 3671 0578 2E       		.byte	46
 3672 0579 000000   		.space	3
 3673 057c FFFFFFFF 		.word	-1
 3674 0580 2D2D0D00 		.ascii	"--\015\000"
 3675 0584 00000000 		.space	4
 3676 0588 00       		.ascii	"\000"
 3677 0589 00000000 		.space	7
 3677      000000
 3678 0590 2D       		.byte	45
 3679 0591 000000   		.space	3
 3680 0594 FFFFFFFF 		.word	-1
 3681 0598 2E       		.byte	46
 3682 0599 000000   		.space	3
 3683 059c FFFFFFFF 		.word	-1
 3684 05a0 43505800 		.ascii	"CPX\000"
 3685 05a4 00000000 		.space	4
 3686 05a8 00       		.ascii	"\000"
 3687 05a9 00000000 		.space	7
 3687      000000
 3688 05b0 50726F67 		.ascii	"Program\000"
 3688      72616D00 
 3689 05b8 00000000 		.space	7
 3689      000000
 3690 05bf 00       		.space	1
 3691 05c0 27       		.byte	39
 3692 05c1 000000   		.space	3
 3693 05c4 01000000 		.word	1
 3694 05c8 28       		.byte	40
 3695 05c9 000000   		.space	3
 3696 05cc 01000000 		.word	1
 3697 05d0 4C424C00 		.ascii	"LBL\000"
 3698 05d4 00000000 		.space	4
 3699 05d8 44534500 		.ascii	"DSE\000"
 3700 05dc 00000000 		.space	4
 3701 05e0 27       		.byte	39
 3702 05e1 000000   		.space	3
 3703 05e4 02000000 		.word	2
 3704 05e8 28       		.byte	40
 3705 05e9 000000   		.space	3
 3706 05ec 02000000 		.word	2
 3707 05f0 52544E00 		.ascii	"RTN\000"
 3708 05f4 00000000 		.space	4
 3709 05f8 49534700 		.ascii	"ISG\000"
 3710 05fc 00000000 		.space	4
 3711 0600 25       		.byte	37
 3712 0601 000000   		.space	3
 3713 0604 03000000 		.word	3
 3714 0608 2E       		.byte	46
 3715 0609 000000   		.space	3
 3716 060c FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc67ZUo8.s 			page 95


 3717 0610 50617573 		.ascii	"Pause\000"
 3717      6500
 3718 0616 0000     		.space	2
 3719 0618 00       		.ascii	"\000"
 3720 0619 00000000 		.space	7
 3720      000000
 3721 0620 12       		.byte	18
 3722 0621 000000   		.space	3
 3723 0624 03000000 		.word	3
 3724 0628 2E       		.byte	46
 3725 0629 000000   		.space	3
 3726 062c FFFFFFFF 		.word	-1
 3727 0630 47544F00 		.ascii	"GTO\000"
 3728 0634 00000000 		.space	4
 3729 0638 00       		.ascii	"\000"
 3730 0639 00000000 		.space	7
 3730      000000
 3731 0640 2C       		.byte	44
 3732 0641 000000   		.space	3
 3733 0644 FFFFFFFF 		.word	-1
 3734 0648 2E       		.byte	46
 3735 0649 000000   		.space	3
 3736 064c FFFFFFFF 		.word	-1
 3737 0650 2D2D0D00 		.ascii	"--\015\000"
 3738 0654 00000000 		.space	4
 3739 0658 00       		.ascii	"\000"
 3740 0659 00000000 		.space	7
 3740      000000
 3741 0660 2D       		.byte	45
 3742 0661 000000   		.space	3
 3743 0664 FFFFFFFF 		.word	-1
 3744 0668 2E       		.byte	46
 3745 0669 000000   		.space	3
 3746 066c FFFFFFFF 		.word	-1
 3747 0670 43505800 		.ascii	"CPX\000"
 3748 0674 00000000 		.space	4
 3749 0678 00       		.ascii	"\000"
 3750 0679 00000000 		.space	7
 3750      000000
 3751 0680 53657475 		.ascii	"Setup 1\000"
 3751      70203100 
 3752 0688 00000000 		.space	7
 3752      000000
 3753 068f 00       		.space	1
 3754 0690 32       		.byte	50
 3755 0691 000000   		.space	3
 3756 0694 00000000 		.word	0
 3757 0698 2E       		.byte	46
 3758 0699 000000   		.space	3
 3759 069c FFFFFFFF 		.word	-1
 3760 06a0 45584954 		.ascii	"EXIT\000"
 3760      00
 3761 06a5 000000   		.space	3
 3762 06a8 00       		.ascii	"\000"
 3763 06a9 00000000 		.space	7
 3763      000000
 3764 06b0 31       		.byte	49
ARM GAS  /tmp/cc67ZUo8.s 			page 96


 3765 06b1 000000   		.space	3
 3766 06b4 09000000 		.word	9
 3767 06b8 2E       		.byte	46
 3768 06b9 000000   		.space	3
 3769 06bc FFFFFFFF 		.word	-1
 3770 06c0 48454C50 		.ascii	"HELP\000"
 3770      00
 3771 06c5 000000   		.space	3
 3772 06c8 00       		.ascii	"\000"
 3773 06c9 00000000 		.space	7
 3773      000000
 3774 06d0 31       		.byte	49
 3775 06d1 000000   		.space	3
 3776 06d4 02000000 		.word	2
 3777 06d8 31       		.byte	49
 3778 06d9 000000   		.space	3
 3779 06dc 06000000 		.word	6
 3780 06e0 4F6E5354 		.ascii	"OnSTO\000"
 3780      4F00
 3781 06e6 0000     		.space	2
 3782 06e8 53765241 		.ascii	"SvRAM\000"
 3782      4D00
 3783 06ee 0000     		.space	2
 3784 06f0 31       		.byte	49
 3785 06f1 000000   		.space	3
 3786 06f4 03000000 		.word	3
 3787 06f8 31       		.byte	49
 3788 06f9 000000   		.space	3
 3789 06fc 07000000 		.word	7
 3790 0700 4F6E5243 		.ascii	"OnRCL\000"
 3790      4C00
 3791 0706 0000     		.space	2
 3792 0708 4C645241 		.ascii	"LdRAM\000"
 3792      4D00
 3793 070e 0000     		.space	2
 3794 0710 2C       		.byte	44
 3795 0711 000000   		.space	3
 3796 0714 FFFFFFFF 		.word	-1
 3797 0718 2E       		.byte	46
 3798 0719 000000   		.space	3
 3799 071c FFFFFFFF 		.word	-1
 3800 0720 2D2D0D00 		.ascii	"--\015\000"
 3801 0724 00000000 		.space	4
 3802 0728 00       		.ascii	"\000"
 3803 0729 00000000 		.space	7
 3803      000000
 3804 0730 2D       		.byte	45
 3805 0731 000000   		.space	3
 3806 0734 FFFFFFFF 		.word	-1
 3807 0738 2E       		.byte	46
 3808 0739 000000   		.space	3
 3809 073c FFFFFFFF 		.word	-1
 3810 0740 43505800 		.ascii	"CPX\000"
 3811 0744 00000000 		.space	4
 3812 0748 00       		.ascii	"\000"
 3813 0749 00000000 		.space	7
 3813      000000
ARM GAS  /tmp/cc67ZUo8.s 			page 97


 3814 0750 4172726F 		.ascii	"Arrow\000"
 3814      7700
 3815 0756 00000000 		.space	9
 3815      00000000 
 3815      00
 3816 075f 00       		.space	1
 3817 0760 0E       		.byte	14
 3818 0761 000000   		.space	3
 3819 0764 01000000 		.word	1
 3820 0768 06       		.byte	6
 3821 0769 000000   		.space	3
 3822 076c 02000000 		.word	2
 3823 0770 42696E00 		.ascii	"Bin\000"
 3824 0774 00000000 		.space	4
 3825 0778 44454700 		.ascii	"DEG\000"
 3826 077c 00000000 		.space	4
 3827 0780 0E       		.byte	14
 3828 0781 000000   		.space	3
 3829 0784 02000000 		.word	2
 3830 0788 07       		.byte	7
 3831 0789 000000   		.space	3
 3832 078c 02000000 		.word	2
 3833 0790 4F637400 		.ascii	"Oct\000"
 3834 0794 00000000 		.space	4
 3835 0798 52414400 		.ascii	"RAD\000"
 3836 079c 00000000 		.space	4
 3837 07a0 0F       		.byte	15
 3838 07a1 000000   		.space	3
 3839 07a4 01000000 		.word	1
 3840 07a8 08       		.byte	8
 3841 07a9 000000   		.space	3
 3842 07ac 02000000 		.word	2
 3843 07b0 44656300 		.ascii	"Dec\000"
 3844 07b4 00000000 		.space	4
 3845 07b8 47726164 		.ascii	"Grad\000"
 3845      00
 3846 07bd 000000   		.space	3
 3847 07c0 0F       		.byte	15
 3848 07c1 000000   		.space	3
 3849 07c4 02000000 		.word	2
 3850 07c8 06       		.byte	6
 3851 07c9 000000   		.space	3
 3852 07cc 01000000 		.word	1
 3853 07d0 48657800 		.ascii	"Hex\000"
 3854 07d4 00000000 		.space	4
 3855 07d8 32484D53 		.ascii	"2HMS\000"
 3855      00
 3856 07dd 000000   		.space	3
 3857 07e0 2C       		.byte	44
 3858 07e1 000000   		.space	3
 3859 07e4 FFFFFFFF 		.word	-1
 3860 07e8 07       		.byte	7
 3861 07e9 000000   		.space	3
 3862 07ec 01000000 		.word	1
 3863 07f0 2D2D0D00 		.ascii	"--\015\000"
 3864 07f4 00000000 		.space	4
 3865 07f8 484D5332 		.ascii	"HMS2\000"
ARM GAS  /tmp/cc67ZUo8.s 			page 98


 3865      00
 3866 07fd 000000   		.space	3
 3867 0800 2D       		.byte	45
 3868 0801 000000   		.space	3
 3869 0804 FFFFFFFF 		.word	-1
 3870 0808 2E       		.byte	46
 3871 0809 000000   		.space	3
 3872 080c FFFFFFFF 		.word	-1
 3873 0810 43505800 		.ascii	"CPX\000"
 3874 0814 00000000 		.space	4
 3875 0818 00       		.ascii	"\000"
 3876 0819 00000000 		.space	7
 3876      000000
 3877 0820 466C6167 		.ascii	"Flags\000"
 3877      7300
 3878 0826 00000000 		.space	9
 3878      00000000 
 3878      00
 3879 082f 00       		.space	1
 3880 0830 1E       		.byte	30
 3881 0831 000000   		.space	3
 3882 0834 01000000 		.word	1
 3883 0838 2E       		.byte	46
 3884 0839 000000   		.space	3
 3885 083c FFFFFFFF 		.word	-1
 3886 0840 53465F00 		.ascii	"SF_\000"
 3887 0844 00000000 		.space	4
 3888 0848 00       		.ascii	"\000"
 3889 0849 00000000 		.space	7
 3889      000000
 3890 0850 1E       		.byte	30
 3891 0851 000000   		.space	3
 3892 0854 02000000 		.word	2
 3893 0858 2E       		.byte	46
 3894 0859 000000   		.space	3
 3895 085c FFFFFFFF 		.word	-1
 3896 0860 43465F00 		.ascii	"CF_\000"
 3897 0864 00000000 		.space	4
 3898 0868 00       		.ascii	"\000"
 3899 0869 00000000 		.space	7
 3899      000000
 3900 0870 1F       		.byte	31
 3901 0871 000000   		.space	3
 3902 0874 01000000 		.word	1
 3903 0878 2E       		.byte	46
 3904 0879 000000   		.space	3
 3905 087c FFFFFFFF 		.word	-1
 3906 0880 783D3F00 		.ascii	"x=?\000"
 3907 0884 00000000 		.space	4
 3908 0888 00       		.ascii	"\000"
 3909 0889 00000000 		.space	7
 3909      000000
 3910 0890 1F       		.byte	31
 3911 0891 000000   		.space	3
 3912 0894 02000000 		.word	2
 3913 0898 2E       		.byte	46
 3914 0899 000000   		.space	3
ARM GAS  /tmp/cc67ZUo8.s 			page 99


 3915 089c FFFFFFFF 		.word	-1
 3916 08a0 780B3F00 		.ascii	"x\013?\000"
 3917 08a4 00000000 		.space	4
 3918 08a8 00       		.ascii	"\000"
 3919 08a9 00000000 		.space	7
 3919      000000
 3920 08b0 2C       		.byte	44
 3921 08b1 000000   		.space	3
 3922 08b4 FFFFFFFF 		.word	-1
 3923 08b8 2E       		.byte	46
 3924 08b9 000000   		.space	3
 3925 08bc FFFFFFFF 		.word	-1
 3926 08c0 2D2D0D00 		.ascii	"--\015\000"
 3927 08c4 00000000 		.space	4
 3928 08c8 00       		.ascii	"\000"
 3929 08c9 00000000 		.space	7
 3929      000000
 3930 08d0 2D       		.byte	45
 3931 08d1 000000   		.space	3
 3932 08d4 FFFFFFFF 		.word	-1
 3933 08d8 2E       		.byte	46
 3934 08d9 000000   		.space	3
 3935 08dc FFFFFFFF 		.word	-1
 3936 08e0 43505800 		.ascii	"CPX\000"
 3937 08e4 00000000 		.space	4
 3938 08e8 00       		.ascii	"\000"
 3939 08e9 00000000 		.space	7
 3939      000000
 3940 08f0 50726F62 		.ascii	"Probability\000"
 3940      6162696C 
 3940      69747900 
 3941 08fc 000000   		.space	3
 3942 08ff 00       		.space	1
 3943 0900 18       		.byte	24
 3944 0901 000000   		.space	3
 3945 0904 03000000 		.word	3
 3946 0908 19       		.byte	25
 3947 0909 000000   		.space	3
 3948 090c 01000000 		.word	1
 3949 0910 46616374 		.ascii	"Fact!\000"
 3949      2100
 3950 0916 0000     		.space	2
 3951 0918 9400     		.ascii	"\224\000"
 3952 091a 00000000 		.space	6
 3952      0000
 3953 0920 18       		.byte	24
 3954 0921 000000   		.space	3
 3955 0924 01000000 		.word	1
 3956 0928 19       		.byte	25
 3957 0929 000000   		.space	3
 3958 092c 02000000 		.word	2
 3959 0930 43792C78 		.ascii	"Cy,x\000"
 3959      00
 3960 0935 000000   		.space	3
 3961 0938 949D00   		.ascii	"\224\235\000"
 3962 093b 00000000 		.space	5
 3962      00
ARM GAS  /tmp/cc67ZUo8.s 			page 100


 3963 0940 18       		.byte	24
 3964 0941 000000   		.space	3
 3965 0944 02000000 		.word	2
 3966 0948 2E       		.byte	46
 3967 0949 000000   		.space	3
 3968 094c FFFFFFFF 		.word	-1
 3969 0950 50792C78 		.ascii	"Py,x\000"
 3969      00
 3970 0955 000000   		.space	3
 3971 0958 00       		.ascii	"\000"
 3972 0959 00000000 		.space	7
 3972      000000
 3973 0960 08       		.byte	8
 3974 0961 000000   		.space	3
 3975 0964 01000000 		.word	1
 3976 0968 2E       		.byte	46
 3977 0969 000000   		.space	3
 3978 096c FFFFFFFF 		.word	-1
 3979 0970 52414E23 		.ascii	"RAN#\000"
 3979      00
 3980 0975 000000   		.space	3
 3981 0978 00       		.ascii	"\000"
 3982 0979 00000000 		.space	7
 3982      000000
 3983 0980 2C       		.byte	44
 3984 0981 000000   		.space	3
 3985 0984 FFFFFFFF 		.word	-1
 3986 0988 2E       		.byte	46
 3987 0989 000000   		.space	3
 3988 098c FFFFFFFF 		.word	-1
 3989 0990 2D2D0D00 		.ascii	"--\015\000"
 3990 0994 00000000 		.space	4
 3991 0998 00       		.ascii	"\000"
 3992 0999 00000000 		.space	7
 3992      000000
 3993 09a0 2D       		.byte	45
 3994 09a1 000000   		.space	3
 3995 09a4 FFFFFFFF 		.word	-1
 3996 09a8 2E       		.byte	46
 3997 09a9 000000   		.space	3
 3998 09ac FFFFFFFF 		.word	-1
 3999 09b0 43505800 		.ascii	"CPX\000"
 4000 09b4 00000000 		.space	4
 4001 09b8 00       		.ascii	"\000"
 4002 09b9 00000000 		.space	7
 4002      000000
 4003 09c0 53746174 		.ascii	"Statistics\000"
 4003      69737469 
 4003      637300
 4004 09cb 00000000 		.space	4
 4005 09cf 00       		.space	1
 4006 09d0 1A       		.byte	26
 4007 09d1 000000   		.space	3
 4008 09d4 01000000 		.word	1
 4009 09d8 1B       		.byte	27
 4010 09d9 000000   		.space	3
 4011 09dc 03000000 		.word	3
ARM GAS  /tmp/cc67ZUo8.s 			page 101


 4012 09e0 58626172 		.ascii	"Xbar\000"
 4012      00
 4013 09e5 000000   		.space	3
 4014 09e8 53554D53 		.ascii	"SUMS\000"
 4014      00
 4015 09ed 000000   		.space	3
 4016 09f0 1B       		.byte	27
 4017 09f1 000000   		.space	3
 4018 09f4 01000000 		.word	1
 4019 09f8 2E       		.byte	46
 4020 09f9 000000   		.space	3
 4021 09fc FFFFFFFF 		.word	-1
 4022 0a00 59686174 		.ascii	"Yhat\000"
 4022      00
 4023 0a05 000000   		.space	3
 4024 0a08 00       		.ascii	"\000"
 4025 0a09 00000000 		.space	7
 4025      000000
 4026 0a10 1A       		.byte	26
 4027 0a11 000000   		.space	3
 4028 0a14 02000000 		.word	2
 4029 0a18 2E       		.byte	46
 4030 0a19 000000   		.space	3
 4031 0a1c FFFFFFFF 		.word	-1
 4032 0a20 7300     		.ascii	"s\000"
 4033 0a22 00000000 		.space	6
 4033      0000
 4034 0a28 00       		.ascii	"\000"
 4035 0a29 00000000 		.space	7
 4035      000000
 4036 0a30 1B       		.byte	27
 4037 0a31 000000   		.space	3
 4038 0a34 02000000 		.word	2
 4039 0a38 2E       		.byte	46
 4040 0a39 000000   		.space	3
 4041 0a3c FFFFFFFF 		.word	-1
 4042 0a40 7200     		.ascii	"r\000"
 4043 0a42 00000000 		.space	6
 4043      0000
 4044 0a48 00       		.ascii	"\000"
 4045 0a49 00000000 		.space	7
 4045      000000
 4046 0a50 2C       		.byte	44
 4047 0a51 000000   		.space	3
 4048 0a54 FFFFFFFF 		.word	-1
 4049 0a58 2E       		.byte	46
 4050 0a59 000000   		.space	3
 4051 0a5c FFFFFFFF 		.word	-1
 4052 0a60 2D2D0D00 		.ascii	"--\015\000"
 4053 0a64 00000000 		.space	4
 4054 0a68 00       		.ascii	"\000"
 4055 0a69 00000000 		.space	7
 4055      000000
 4056 0a70 2D       		.byte	45
 4057 0a71 000000   		.space	3
 4058 0a74 FFFFFFFF 		.word	-1
 4059 0a78 2E       		.byte	46
ARM GAS  /tmp/cc67ZUo8.s 			page 102


 4060 0a79 000000   		.space	3
 4061 0a7c FFFFFFFF 		.word	-1
 4062 0a80 43505800 		.ascii	"CPX\000"
 4063 0a84 00000000 		.space	4
 4064 0a88 00       		.ascii	"\000"
 4065 0a89 00000000 		.space	7
 4065      000000
 4066 0a90 53657475 		.ascii	"Setup 2\000"
 4066      70203200 
 4067 0a98 00000000 		.space	7
 4067      000000
 4068 0a9f 00       		.space	1
 4069 0aa0 31       		.byte	49
 4070 0aa1 000000   		.space	3
 4071 0aa4 04000000 		.word	4
 4072 0aa8 2E       		.byte	46
 4073 0aa9 000000   		.space	3
 4074 0aac FFFFFFFF 		.word	-1
 4075 0ab0 53764C49 		.ascii	"SvLIB\000"
 4075      4200
 4076 0ab6 0000     		.space	2
 4077 0ab8 00       		.ascii	"\000"
 4078 0ab9 00000000 		.space	7
 4078      000000
 4079 0ac0 31       		.byte	49
 4080 0ac1 000000   		.space	3
 4081 0ac4 05000000 		.word	5
 4082 0ac8 2E       		.byte	46
 4083 0ac9 000000   		.space	3
 4084 0acc FFFFFFFF 		.word	-1
 4085 0ad0 4C644C49 		.ascii	"LdLIB\000"
 4085      4200
 4086 0ad6 0000     		.space	2
 4087 0ad8 00       		.ascii	"\000"
 4088 0ad9 00000000 		.space	7
 4088      000000
 4089 0ae0 31       		.byte	49
 4090 0ae1 000000   		.space	3
 4091 0ae4 0A000000 		.word	10
 4092 0ae8 2E       		.byte	46
 4093 0ae9 000000   		.space	3
 4094 0aec FFFFFFFF 		.word	-1
 4095 0af0 53764350 		.ascii	"SvCPRG\000"
 4095      524700
 4096 0af7 00       		.space	1
 4097 0af8 00       		.ascii	"\000"
 4098 0af9 00000000 		.space	7
 4098      000000
 4099 0b00 31       		.byte	49
 4100 0b01 000000   		.space	3
 4101 0b04 08000000 		.word	8
 4102 0b08 2E       		.byte	46
 4103 0b09 000000   		.space	3
 4104 0b0c FFFFFFFF 		.word	-1
 4105 0b10 4C645052 		.ascii	"LdPRG\000"
 4105      4700
 4106 0b16 0000     		.space	2
ARM GAS  /tmp/cc67ZUo8.s 			page 103


 4107 0b18 00       		.ascii	"\000"
 4108 0b19 00000000 		.space	7
 4108      000000
 4109 0b20 2C       		.byte	44
 4110 0b21 000000   		.space	3
 4111 0b24 FFFFFFFF 		.word	-1
 4112 0b28 2E       		.byte	46
 4113 0b29 000000   		.space	3
 4114 0b2c FFFFFFFF 		.word	-1
 4115 0b30 2D2D0D00 		.ascii	"--\015\000"
 4116 0b34 00000000 		.space	4
 4117 0b38 00       		.ascii	"\000"
 4118 0b39 00000000 		.space	7
 4118      000000
 4119 0b40 2D       		.byte	45
 4120 0b41 000000   		.space	3
 4121 0b44 FFFFFFFF 		.word	-1
 4122 0b48 2E       		.byte	46
 4123 0b49 000000   		.space	3
 4124 0b4c FFFFFFFF 		.word	-1
 4125 0b50 43505800 		.ascii	"CPX\000"
 4126 0b54 00000000 		.space	4
 4127 0b58 00       		.ascii	"\000"
 4128 0b59 00000000 		.space	7
 4128      000000
 4129 0b60 496E7465 		.ascii	"Integ/Sum/Prod\000"
 4129      672F5375 
 4129      6D2F5072 
 4129      6F6400
 4130 0b6f 00       		.space	1
 4131 0b70 20       		.byte	32
 4132 0b71 000000   		.space	3
 4133 0b74 01000000 		.word	1
 4134 0b78 2E       		.byte	46
 4135 0b79 000000   		.space	3
 4136 0b7c FFFFFFFF 		.word	-1
 4137 0b80 534C5600 		.ascii	"SLV\000"
 4138 0b84 00000000 		.space	4
 4139 0b88 00       		.ascii	"\000"
 4140 0b89 00000000 		.space	7
 4140      000000
 4141 0b90 20       		.byte	32
 4142 0b91 000000   		.space	3
 4143 0b94 02000000 		.word	2
 4144 0b98 2E       		.byte	46
 4145 0b99 000000   		.space	3
 4146 0b9c FFFFFFFF 		.word	-1
 4147 0ba0 04206478 		.ascii	"\004 dx\000"
 4147      00
 4148 0ba5 000000   		.space	3
 4149 0ba8 00       		.ascii	"\000"
 4150 0ba9 00000000 		.space	7
 4150      000000
 4151 0bb0 21       		.byte	33
 4152 0bb1 000000   		.space	3
 4153 0bb4 01000000 		.word	1
 4154 0bb8 2E       		.byte	46
ARM GAS  /tmp/cc67ZUo8.s 			page 104


 4155 0bb9 000000   		.space	3
 4156 0bbc FFFFFFFF 		.word	-1
 4157 0bc0 53554D00 		.ascii	"SUM\000"
 4158 0bc4 00000000 		.space	4
 4159 0bc8 00       		.ascii	"\000"
 4160 0bc9 00000000 		.space	7
 4160      000000
 4161 0bd0 21       		.byte	33
 4162 0bd1 000000   		.space	3
 4163 0bd4 02000000 		.word	2
 4164 0bd8 2E       		.byte	46
 4165 0bd9 000000   		.space	3
 4166 0bdc FFFFFFFF 		.word	-1
 4167 0be0 50524F44 		.ascii	"PROD\000"
 4167      00
 4168 0be5 000000   		.space	3
 4169 0be8 00       		.ascii	"\000"
 4170 0be9 00000000 		.space	7
 4170      000000
 4171 0bf0 2C       		.byte	44
 4172 0bf1 000000   		.space	3
 4173 0bf4 FFFFFFFF 		.word	-1
 4174 0bf8 2E       		.byte	46
 4175 0bf9 000000   		.space	3
 4176 0bfc FFFFFFFF 		.word	-1
 4177 0c00 2D2D0D00 		.ascii	"--\015\000"
 4178 0c04 00000000 		.space	4
 4179 0c08 00       		.ascii	"\000"
 4180 0c09 00000000 		.space	7
 4180      000000
 4181 0c10 2D       		.byte	45
 4182 0c11 000000   		.space	3
 4183 0c14 FFFFFFFF 		.word	-1
 4184 0c18 2E       		.byte	46
 4185 0c19 000000   		.space	3
 4186 0c1c FFFFFFFF 		.word	-1
 4187 0c20 43505800 		.ascii	"CPX\000"
 4188 0c24 00000000 		.space	4
 4189 0c28 00       		.ascii	"\000"
 4190 0c29 00000000 		.space	7
 4190      000000
 4191              		.section	.rodata.mapping_alpha.10870,"a"
 4192              		.align	2
 4193              		.set	.LANCHOR11,. + 0
 4196              	mapping_alpha.10870:
 4197 0000 63       		.byte	99
 4198 0001 000000   		.space	3
 4199 0004 FFFFFFFF 		.word	-1
 4200 0008 00       		.byte	0
 4201 0009 000000   		.space	3
 4202 000c FFFFFFFF 		.word	-1
 4203 0010 01       		.byte	1
 4204 0011 000000   		.space	3
 4205 0014 FFFFFFFF 		.word	-1
 4206 0018 02       		.byte	2
 4207 0019 000000   		.space	3
 4208 001c FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc67ZUo8.s 			page 105


 4209 0020 03       		.byte	3
 4210 0021 000000   		.space	3
 4211 0024 FFFFFFFF 		.word	-1
 4212 0028 04       		.byte	4
 4213 0029 000000   		.space	3
 4214 002c FFFFFFFF 		.word	-1
 4215 0030 05       		.byte	5
 4216 0031 000000   		.space	3
 4217 0034 FFFFFFFF 		.word	-1
 4218 0038 06       		.byte	6
 4219 0039 000000   		.space	3
 4220 003c FFFFFFFF 		.word	-1
 4221 0040 07       		.byte	7
 4222 0041 000000   		.space	3
 4223 0044 FFFFFFFF 		.word	-1
 4224 0048 08       		.byte	8
 4225 0049 000000   		.space	3
 4226 004c FFFFFFFF 		.word	-1
 4227 0050 09       		.byte	9
 4228 0051 000000   		.space	3
 4229 0054 FFFFFFFF 		.word	-1
 4230 0058 0A       		.byte	10
 4231 0059 000000   		.space	3
 4232 005c FFFFFFFF 		.word	-1
 4233 0060 0B       		.byte	11
 4234 0061 000000   		.space	3
 4235 0064 FFFFFFFF 		.word	-1
 4236 0068 0C       		.byte	12
 4237 0069 000000   		.space	3
 4238 006c FFFFFFFF 		.word	-1
 4239 0070 0D       		.byte	13
 4240 0071 000000   		.space	3
 4241 0074 FFFFFFFF 		.word	-1
 4242 0078 0E       		.byte	14
 4243 0079 000000   		.space	3
 4244 007c FFFFFFFF 		.word	-1
 4245 0080 0F       		.byte	15
 4246 0081 000000   		.space	3
 4247 0084 FFFFFFFF 		.word	-1
 4248 0088 10       		.byte	16
 4249 0089 000000   		.space	3
 4250 008c FFFFFFFF 		.word	-1
 4251 0090 12       		.byte	18
 4252 0091 000000   		.space	3
 4253 0094 FFFFFFFF 		.word	-1
 4254 0098 13       		.byte	19
 4255 0099 000000   		.space	3
 4256 009c FFFFFFFF 		.word	-1
 4257 00a0 14       		.byte	20
 4258 00a1 000000   		.space	3
 4259 00a4 FFFFFFFF 		.word	-1
 4260 00a8 15       		.byte	21
 4261 00a9 000000   		.space	3
 4262 00ac FFFFFFFF 		.word	-1
 4263 00b0 16       		.byte	22
 4264 00b1 000000   		.space	3
 4265 00b4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc67ZUo8.s 			page 106


 4266 00b8 18       		.byte	24
 4267 00b9 000000   		.space	3
 4268 00bc FFFFFFFF 		.word	-1
 4269 00c0 19       		.byte	25
 4270 00c1 000000   		.space	3
 4271 00c4 FFFFFFFF 		.word	-1
 4272 00c8 1A       		.byte	26
 4273 00c9 000000   		.space	3
 4274 00cc FFFFFFFF 		.word	-1
 4275 00d0 1B       		.byte	27
 4276 00d1 000000   		.space	3
 4277 00d4 FFFFFFFF 		.word	-1
 4278 00d8 1C       		.byte	28
 4279 00d9 000000   		.space	3
 4280 00dc FFFFFFFF 		.word	-1
 4281 00e0 1E       		.byte	30
 4282 00e1 000000   		.space	3
 4283 00e4 FFFFFFFF 		.word	-1
 4284 00e8 1F       		.byte	31
 4285 00e9 000000   		.space	3
 4286 00ec FFFFFFFF 		.word	-1
 4287 00f0 20       		.byte	32
 4288 00f1 000000   		.space	3
 4289 00f4 FFFFFFFF 		.word	-1
 4290 00f8 21       		.byte	33
 4291 00f9 000000   		.space	3
 4292 00fc FFFFFFFF 		.word	-1
 4293 0100 22       		.byte	34
 4294 0101 000000   		.space	3
 4295 0104 FFFFFFFF 		.word	-1
 4296 0108 24       		.byte	36
 4297 0109 000000   		.space	3
 4298 010c FFFFFFFF 		.word	-1
 4299 0110 25       		.byte	37
 4300 0111 000000   		.space	3
 4301 0114 FFFFFFFF 		.word	-1
 4302 0118 26       		.byte	38
 4303 0119 000000   		.space	3
 4304 011c FFFFFFFF 		.word	-1
 4305 0120 27       		.byte	39
 4306 0121 000000   		.space	3
 4307 0124 FFFFFFFF 		.word	-1
 4308 0128 28       		.byte	40
 4309 0129 000000   		.space	3
 4310 012c FFFFFFFF 		.word	-1
 4311 0130 2E       		.byte	46
 4312 0131 000000   		.space	3
 4313 0134 FFFFFFFF 		.word	-1
 4314 0138 2E       		.byte	46
 4315 0139 000000   		.space	3
 4316 013c FFFFFFFF 		.word	-1
 4317 0140 2E       		.byte	46
 4318 0141 000000   		.space	3
 4319 0144 FFFFFFFF 		.word	-1
 4320 0148 2E       		.byte	46
 4321 0149 000000   		.space	3
 4322 014c FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc67ZUo8.s 			page 107


 4323 0150 2C       		.byte	44
 4324 0151 000000   		.space	3
 4325 0154 FFFFFFFF 		.word	-1
 4326 0158 2E       		.byte	46
 4327 0159 000000   		.space	3
 4328 015c FFFFFFFF 		.word	-1
 4329 0160 2E       		.byte	46
 4330 0161 000000   		.space	3
 4331 0164 FFFFFFFF 		.word	-1
 4332 0168 2E       		.byte	46
 4333 0169 000000   		.space	3
 4334 016c FFFFFFFF 		.word	-1
 4335 0170 2E       		.byte	46
 4336 0171 000000   		.space	3
 4337 0174 FFFFFFFF 		.word	-1
 4338              		.section	.rodata.mapping_fshift.10868,"a"
 4339              		.align	2
 4340              		.set	.LANCHOR9,. + 0
 4343              	mapping_fshift.10868:
 4344 0000 63       		.byte	99
 4345 0001 000000   		.space	3
 4346 0004 FFFFFFFF 		.word	-1
 4347 0008 22       		.byte	34
 4348 0009 000000   		.space	3
 4349 000c 03000000 		.word	3
 4350 0010 15       		.byte	21
 4351 0011 000000   		.space	3
 4352 0014 01000000 		.word	1
 4353 0018 1C       		.byte	28
 4354 0019 000000   		.space	3
 4355 001c 02000000 		.word	2
 4356 0020 13       		.byte	19
 4357 0021 000000   		.space	3
 4358 0024 01000000 		.word	1
 4359 0028 12       		.byte	18
 4360 0029 000000   		.space	3
 4361 002c 01000000 		.word	1
 4362 0030 12       		.byte	18
 4363 0031 000000   		.space	3
 4364 0034 03000000 		.word	3
 4365 0038 2D       		.byte	45
 4366 0039 000000   		.space	3
 4367 003c 00000000 		.word	0
 4368 0040 22       		.byte	34
 4369 0041 000000   		.space	3
 4370 0044 01000000 		.word	1
 4371 0048 0F       		.byte	15
 4372 0049 000000   		.space	3
 4373 004c 03000000 		.word	3
 4374 0050 01       		.byte	1
 4375 0051 000000   		.space	3
 4376 0054 02000000 		.word	2
 4377 0058 02       		.byte	2
 4378 0059 000000   		.space	3
 4379 005c 02000000 		.word	2
 4380 0060 03       		.byte	3
 4381 0061 000000   		.space	3
ARM GAS  /tmp/cc67ZUo8.s 			page 108


 4382 0064 02000000 		.word	2
 4383 0068 0C       		.byte	12
 4384 0069 000000   		.space	3
 4385 006c 01000000 		.word	1
 4386 0070 31       		.byte	49
 4387 0071 000000   		.space	3
 4388 0074 01000000 		.word	1
 4389 0078 2F       		.byte	47
 4390 0079 000000   		.space	3
 4391 007c 04000000 		.word	4
 4392 0080 2F       		.byte	47
 4393 0081 000000   		.space	3
 4394 0084 02000000 		.word	2
 4395 0088 2F       		.byte	47
 4396 0089 000000   		.space	3
 4397 008c 01000000 		.word	1
 4398 0090 18       		.byte	24
 4399 0091 000000   		.space	3
 4400 0094 00000000 		.word	0
 4401 0098 20       		.byte	32
 4402 0099 000000   		.space	3
 4403 009c 01000000 		.word	1
 4404 00a0 2F       		.byte	47
 4405 00a1 000000   		.space	3
 4406 00a4 0E000000 		.word	14
 4407 00a8 1C       		.byte	28
 4408 00a9 000000   		.space	3
 4409 00ac 03000000 		.word	3
 4410 00b0 2F       		.byte	47
 4411 00b1 000000   		.space	3
 4412 00b4 0C000000 		.word	12
 4413 00b8 1E       		.byte	30
 4414 00b9 000000   		.space	3
 4415 00bc 00000000 		.word	0
 4416 00c0 2F       		.byte	47
 4417 00c1 000000   		.space	3
 4418 00c4 03000000 		.word	3
 4419 00c8 04       		.byte	4
 4420 00c9 000000   		.space	3
 4421 00cc 03000000 		.word	3
 4422 00d0 2F       		.byte	47
 4423 00d1 000000   		.space	3
 4424 00d4 0A000000 		.word	10
 4425 00d8 2F       		.byte	47
 4426 00d9 000000   		.space	3
 4427 00dc 0B000000 		.word	11
 4428 00e0 2A       		.byte	42
 4429 00e1 000000   		.space	3
 4430 00e4 00000000 		.word	0
 4431 00e8 2E       		.byte	46
 4432 00e9 000000   		.space	3
 4433 00ec 00000000 		.word	0
 4434 00f0 2E       		.byte	46
 4435 00f1 000000   		.space	3
 4436 00f4 00000000 		.word	0
 4437 00f8 20       		.byte	32
 4438 00f9 000000   		.space	3
ARM GAS  /tmp/cc67ZUo8.s 			page 109


 4439 00fc 03000000 		.word	3
 4440 0100 2E       		.byte	46
 4441 0101 000000   		.space	3
 4442 0104 00000000 		.word	0
 4443 0108 24       		.byte	36
 4444 0109 000000   		.space	3
 4445 010c 03000000 		.word	3
 4446 0110 2F       		.byte	47
 4447 0111 000000   		.space	3
 4448 0114 08000000 		.word	8
 4449 0118 0D       		.byte	13
 4450 0119 000000   		.space	3
 4451 011c 01000000 		.word	1
 4452 0120 27       		.byte	39
 4453 0121 000000   		.space	3
 4454 0124 03000000 		.word	3
 4455 0128 06       		.byte	6
 4456 0129 000000   		.space	3
 4457 012c 03000000 		.word	3
 4458 0130 2E       		.byte	46
 4459 0131 000000   		.space	3
 4460 0134 00000000 		.word	0
 4461 0138 2E       		.byte	46
 4462 0139 000000   		.space	3
 4463 013c 00000000 		.word	0
 4464 0140 2E       		.byte	46
 4465 0141 000000   		.space	3
 4466 0144 00000000 		.word	0
 4467 0148 2E       		.byte	46
 4468 0149 000000   		.space	3
 4469 014c 00000000 		.word	0
 4470 0150 2E       		.byte	46
 4471 0151 000000   		.space	3
 4472 0154 00000000 		.word	0
 4473 0158 2E       		.byte	46
 4474 0159 000000   		.space	3
 4475 015c 00000000 		.word	0
 4476 0160 2E       		.byte	46
 4477 0161 000000   		.space	3
 4478 0164 00000000 		.word	0
 4479 0168 2F       		.byte	47
 4480 0169 000000   		.space	3
 4481 016c FFFFFFFF 		.word	-1
 4482 0170 2F       		.byte	47
 4483 0171 000000   		.space	3
 4484 0174 05000000 		.word	5
 4485              		.section	.rodata.mapping_gshift.10869,"a"
 4486              		.align	2
 4487              		.set	.LANCHOR12,. + 0
 4490              	mapping_gshift.10869:
 4491 0000 63       		.byte	99
 4492 0001 000000   		.space	3
 4493 0004 FFFFFFFF 		.word	-1
 4494 0008 28       		.byte	40
 4495 0009 000000   		.space	3
 4496 000c 03000000 		.word	3
 4497 0010 16       		.byte	22
ARM GAS  /tmp/cc67ZUo8.s 			page 110


 4498 0011 000000   		.space	3
 4499 0014 01000000 		.word	1
 4500 0018 1C       		.byte	28
 4501 0019 000000   		.space	3
 4502 001c 01000000 		.word	1
 4503 0020 13       		.byte	19
 4504 0021 000000   		.space	3
 4505 0024 02000000 		.word	2
 4506 0028 2E       		.byte	46
 4507 0029 000000   		.space	3
 4508 002c 00000000 		.word	0
 4509 0030 2E       		.byte	46
 4510 0031 000000   		.space	3
 4511 0034 00000000 		.word	0
 4512 0038 2E       		.byte	46
 4513 0039 000000   		.space	3
 4514 003c 00000000 		.word	0
 4515 0040 07       		.byte	7
 4516 0041 000000   		.space	3
 4517 0044 03000000 		.word	3
 4518 0048 08       		.byte	8
 4519 0049 000000   		.space	3
 4520 004c 03000000 		.word	3
 4521 0050 2F       		.byte	47
 4522 0051 000000   		.space	3
 4523 0054 04000000 		.word	4
 4524 0058 2F       		.byte	47
 4525 0059 000000   		.space	3
 4526 005c 04000000 		.word	4
 4527 0060 2F       		.byte	47
 4528 0061 000000   		.space	3
 4529 0064 04000000 		.word	4
 4530 0068 0C       		.byte	12
 4531 0069 000000   		.space	3
 4532 006c 02000000 		.word	2
 4533 0070 2F       		.byte	47
 4534 0071 000000   		.space	3
 4535 0074 06000000 		.word	6
 4536 0078 05       		.byte	5
 4537 0079 000000   		.space	3
 4538 007c 03000000 		.word	3
 4539 0080 2E       		.byte	46
 4540 0081 000000   		.space	3
 4541 0084 00000000 		.word	0
 4542 0088 2E       		.byte	46
 4543 0089 000000   		.space	3
 4544 008c 00000000 		.word	0
 4545 0090 2E       		.byte	46
 4546 0091 000000   		.space	3
 4547 0094 00000000 		.word	0
 4548 0098 2E       		.byte	46
 4549 0099 000000   		.space	3
 4550 009c 00000000 		.word	0
 4551 00a0 2E       		.byte	46
 4552 00a1 000000   		.space	3
 4553 00a4 00000000 		.word	0
 4554 00a8 1B       		.byte	27
ARM GAS  /tmp/cc67ZUo8.s 			page 111


 4555 00a9 000000   		.space	3
 4556 00ac 03000000 		.word	3
 4557 00b0 1A       		.byte	26
 4558 00b1 000000   		.space	3
 4559 00b4 03000000 		.word	3
 4560 00b8 2E       		.byte	46
 4561 00b9 000000   		.space	3
 4562 00bc 00000000 		.word	0
 4563 00c0 2E       		.byte	46
 4564 00c1 000000   		.space	3
 4565 00c4 00000000 		.word	0
 4566 00c8 0C       		.byte	12
 4567 00c9 000000   		.space	3
 4568 00cc 03000000 		.word	3
 4569 00d0 1F       		.byte	31
 4570 00d1 000000   		.space	3
 4571 00d4 03000000 		.word	3
 4572 00d8 19       		.byte	25
 4573 00d9 000000   		.space	3
 4574 00dc 03000000 		.word	3
 4575 00e0 2A       		.byte	42
 4576 00e1 000000   		.space	3
 4577 00e4 FFFFFFFF 		.word	-1
 4578 00e8 2E       		.byte	46
 4579 00e9 000000   		.space	3
 4580 00ec 00000000 		.word	0
 4581 00f0 2E       		.byte	46
 4582 00f1 000000   		.space	3
 4583 00f4 00000000 		.word	0
 4584 00f8 21       		.byte	33
 4585 00f9 000000   		.space	3
 4586 00fc 03000000 		.word	3
 4587 0100 2E       		.byte	46
 4588 0101 000000   		.space	3
 4589 0104 00000000 		.word	0
 4590 0108 24       		.byte	36
 4591 0109 000000   		.space	3
 4592 010c 00000000 		.word	0
 4593 0110 2F       		.byte	47
 4594 0111 000000   		.space	3
 4595 0114 0D000000 		.word	13
 4596 0118 2E       		.byte	46
 4597 0119 000000   		.space	3
 4598 011c 00000000 		.word	0
 4599 0120 2F       		.byte	47
 4600 0121 000000   		.space	3
 4601 0124 07000000 		.word	7
 4602 0128 1E       		.byte	30
 4603 0129 000000   		.space	3
 4604 012c 03000000 		.word	3
 4605 0130 2E       		.byte	46
 4606 0131 000000   		.space	3
 4607 0134 00000000 		.word	0
 4608 0138 2E       		.byte	46
 4609 0139 000000   		.space	3
 4610 013c 00000000 		.word	0
 4611 0140 2E       		.byte	46
ARM GAS  /tmp/cc67ZUo8.s 			page 112


 4612 0141 000000   		.space	3
 4613 0144 00000000 		.word	0
 4614 0148 2E       		.byte	46
 4615 0149 000000   		.space	3
 4616 014c 00000000 		.word	0
 4617 0150 2E       		.byte	46
 4618 0151 000000   		.space	3
 4619 0154 00000000 		.word	0
 4620 0158 2E       		.byte	46
 4621 0159 000000   		.space	3
 4622 015c 00000000 		.word	0
 4623 0160 2E       		.byte	46
 4624 0161 000000   		.space	3
 4625 0164 00000000 		.word	0
 4626 0168 2E       		.byte	46
 4627 0169 000000   		.space	3
 4628 016c 00000000 		.word	0
 4629 0170 2E       		.byte	46
 4630 0171 000000   		.space	3
 4631 0174 00000000 		.word	0
 4632              		.section	.rodata.mapping_none.10867,"a"
 4633              		.align	2
 4634              		.set	.LANCHOR8,. + 0
 4637              	mapping_none.10867:
 4638 0000 63       		.byte	99
 4639 0001 000000   		.space	3
 4640 0004 FFFFFFFF 		.word	-1
 4641 0008 00       		.byte	0
 4642 0009 000000   		.space	3
 4643 000c 00000000 		.word	0
 4644 0010 01       		.byte	1
 4645 0011 000000   		.space	3
 4646 0014 00000000 		.word	0
 4647 0018 03       		.byte	3
 4648 0019 000000   		.space	3
 4649 001c 00000000 		.word	0
 4650 0020 13       		.byte	19
 4651 0021 000000   		.space	3
 4652 0024 02000000 		.word	2
 4653 0028 12       		.byte	18
 4654 0029 000000   		.space	3
 4655 002c 02000000 		.word	2
 4656 0030 12       		.byte	18
 4657 0031 000000   		.space	3
 4658 0034 00000000 		.word	0
 4659 0038 06       		.byte	6
 4660 0039 000000   		.space	3
 4661 003c 00000000 		.word	0
 4662 0040 07       		.byte	7
 4663 0041 000000   		.space	3
 4664 0044 00000000 		.word	0
 4665 0048 08       		.byte	8
 4666 0049 000000   		.space	3
 4667 004c 00000000 		.word	0
 4668 0050 01       		.byte	1
 4669 0051 000000   		.space	3
 4670 0054 01000000 		.word	1
ARM GAS  /tmp/cc67ZUo8.s 			page 113


 4671 0058 02       		.byte	2
 4672 0059 000000   		.space	3
 4673 005c 01000000 		.word	1
 4674 0060 03       		.byte	3
 4675 0061 000000   		.space	3
 4676 0064 01000000 		.word	1
 4677 0068 0C       		.byte	12
 4678 0069 000000   		.space	3
 4679 006c 00000000 		.word	0
 4680 0070 0D       		.byte	13
 4681 0071 000000   		.space	3
 4682 0074 00000000 		.word	0
 4683 0078 0E       		.byte	14
 4684 0079 000000   		.space	3
 4685 007c 00000000 		.word	0
 4686 0080 0F       		.byte	15
 4687 0081 000000   		.space	3
 4688 0084 00000000 		.word	0
 4689 0088 10       		.byte	16
 4690 0089 000000   		.space	3
 4691 008c 00000000 		.word	0
 4692 0090 18       		.byte	24
 4693 0091 000000   		.space	3
 4694 0094 00000000 		.word	0
 4695 0098 13       		.byte	19
 4696 0099 000000   		.space	3
 4697 009c 00000000 		.word	0
 4698 00a0 14       		.byte	20
 4699 00a1 000000   		.space	3
 4700 00a4 00000000 		.word	0
 4701 00a8 15       		.byte	21
 4702 00a9 000000   		.space	3
 4703 00ac 00000000 		.word	0
 4704 00b0 16       		.byte	22
 4705 00b1 000000   		.space	3
 4706 00b4 00000000 		.word	0
 4707 00b8 1E       		.byte	30
 4708 00b9 000000   		.space	3
 4709 00bc 00000000 		.word	0
 4710 00c0 19       		.byte	25
 4711 00c1 000000   		.space	3
 4712 00c4 00000000 		.word	0
 4713 00c8 1A       		.byte	26
 4714 00c9 000000   		.space	3
 4715 00cc 00000000 		.word	0
 4716 00d0 1B       		.byte	27
 4717 00d1 000000   		.space	3
 4718 00d4 00000000 		.word	0
 4719 00d8 1C       		.byte	28
 4720 00d9 000000   		.space	3
 4721 00dc 00000000 		.word	0
 4722 00e0 29       		.byte	41
 4723 00e1 000000   		.space	3
 4724 00e4 00000000 		.word	0
 4725 00e8 1F       		.byte	31
 4726 00e9 000000   		.space	3
 4727 00ec 00000000 		.word	0
ARM GAS  /tmp/cc67ZUo8.s 			page 114


 4728 00f0 20       		.byte	32
 4729 00f1 000000   		.space	3
 4730 00f4 00000000 		.word	0
 4731 00f8 21       		.byte	33
 4732 00f9 000000   		.space	3
 4733 00fc 00000000 		.word	0
 4734 0100 22       		.byte	34
 4735 0101 000000   		.space	3
 4736 0104 00000000 		.word	0
 4737 0108 24       		.byte	36
 4738 0109 000000   		.space	3
 4739 010c 00000000 		.word	0
 4740 0110 25       		.byte	37
 4741 0111 000000   		.space	3
 4742 0114 00000000 		.word	0
 4743 0118 26       		.byte	38
 4744 0119 000000   		.space	3
 4745 011c 00000000 		.word	0
 4746 0120 27       		.byte	39
 4747 0121 000000   		.space	3
 4748 0124 00000000 		.word	0
 4749 0128 28       		.byte	40
 4750 0129 000000   		.space	3
 4751 012c 00000000 		.word	0
 4752 0130 2E       		.byte	46
 4753 0131 000000   		.space	3
 4754 0134 00000000 		.word	0
 4755 0138 2E       		.byte	46
 4756 0139 000000   		.space	3
 4757 013c 00000000 		.word	0
 4758 0140 2E       		.byte	46
 4759 0141 000000   		.space	3
 4760 0144 00000000 		.word	0
 4761 0148 2E       		.byte	46
 4762 0149 000000   		.space	3
 4763 014c 00000000 		.word	0
 4764 0150 2E       		.byte	46
 4765 0151 000000   		.space	3
 4766 0154 00000000 		.word	0
 4767 0158 2E       		.byte	46
 4768 0159 000000   		.space	3
 4769 015c 00000000 		.word	0
 4770 0160 2E       		.byte	46
 4771 0161 000000   		.space	3
 4772 0164 00000000 		.word	0
 4773 0168 2E       		.byte	46
 4774 0169 000000   		.space	3
 4775 016c 00000000 		.word	0
 4776 0170 2E       		.byte	46
 4777 0171 000000   		.space	3
 4778 0174 00000000 		.word	0
 4779              		.section	.rodata.mid_menu,"a"
 4780              		.align	2
 4783              	mid_menu:
 4784 0000 C8C400   		.ascii	"\310\304\000"
 4785              		.text
 4786              	.Letext0:
ARM GAS  /tmp/cc67ZUo8.s 			page 115


 4787              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 4788              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 4789              		.file 6 "/usr/include/newlib/sys/_types.h"
 4790              		.file 7 "/usr/include/newlib/sys/reent.h"
 4791              		.file 8 "/usr/include/newlib/sys/lock.h"
 4792              		.file 9 "/usr/include/newlib/stdlib.h"
 4793              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 4794              		.file 11 "/usr/include/newlib/ctype.h"
 4795              		.file 12 "dmcp/ff_ifc.h"
 4796              		.file 13 "dmcp/dmcp.h"
 4797              		.file 14 "src/keys.h"
 4798              		.file 15 "src/decNumber/decContext.h"
 4799              		.file 16 "src/decNumber/decNumber.h"
 4800              		.file 17 "src/decNumber/decimal64.h"
 4801              		.file 18 "src/decNumber/decimal128.h"
 4802              		.file 19 "src/xeq.h"
 4803              		.file 20 "src/data.h"
 4804              		.file 21 "src/display.h"
 4805              		.file 22 "src/consts.h"
 4806              		.file 23 "src/storage.h"
 4807              		.file 24 "src/catalogues.h"
 4808              		.file 25 "src/menu.h"
 4809              		.file 26 "/usr/include/newlib/string.h"
 4810              		.file 27 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/cc67ZUo8.s 			page 116


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/cc67ZUo8.s:18     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/cc67ZUo8.s:26     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/cc67ZUo8.s:392    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/cc67ZUo8.s:400    .text.set_menu:0000000000000000 $t
     /tmp/cc67ZUo8.s:408    .text.set_menu:0000000000000000 set_menu
     /tmp/cc67ZUo8.s:458    .text.set_menu:0000000000000024 $d
     /tmp/cc67ZUo8.s:464    .text.get_menu:0000000000000000 $t
     /tmp/cc67ZUo8.s:472    .text.get_menu:0000000000000000 get_menu
     /tmp/cc67ZUo8.s:488    .text.get_menu:0000000000000008 $d
     /tmp/cc67ZUo8.s:493    .text.set_last_menu:0000000000000000 $t
     /tmp/cc67ZUo8.s:501    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/cc67ZUo8.s:550    .text.set_last_menu:0000000000000014 $d
     /tmp/cc67ZUo8.s:556    .text.mdot:0000000000000000 $t
     /tmp/cc67ZUo8.s:564    .text.mdot:0000000000000000 mdot
     /tmp/cc67ZUo8.s:655    .text.mdot:000000000000003c $d
     /tmp/cc67ZUo8.s:660    .text.display_menu:0000000000000000 $t
     /tmp/cc67ZUo8.s:668    .text.display_menu:0000000000000000 display_menu
     /tmp/cc67ZUo8.s:907    .text.display_menu:000000000000010c $d
     /tmp/cc67ZUo8.s:915    .text.display_current_menu:0000000000000000 $t
     /tmp/cc67ZUo8.s:923    .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/cc67ZUo8.s:938    .text.display_current_menu:0000000000000008 $d
     /tmp/cc67ZUo8.s:943    .text.shutdown:0000000000000000 $t
     /tmp/cc67ZUo8.s:951    .text.shutdown:0000000000000000 shutdown
     /tmp/cc67ZUo8.s:969    .text.shutdown:000000000000000c $d
     /tmp/cc67ZUo8.s:974    .text.is_key_pressed:0000000000000000 $t
     /tmp/cc67ZUo8.s:982    .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/cc67ZUo8.s:1005   .text.is_key_pressed:0000000000000010 $d
     /tmp/cc67ZUo8.s:1010   .text.get_key:0000000000000000 $t
     /tmp/cc67ZUo8.s:1018   .text.get_key:0000000000000000 get_key
     /tmp/cc67ZUo8.s:1033   .text.get_key:0000000000000004 $d
     /tmp/cc67ZUo8.s:1038   .text.put_key:0000000000000000 $t
     /tmp/cc67ZUo8.s:1046   .text.put_key:0000000000000000 put_key
     /tmp/cc67ZUo8.s:1063   .text.put_key:0000000000000004 $d
     /tmp/cc67ZUo8.s:1068   .text.shift_down:0000000000000000 $t
     /tmp/cc67ZUo8.s:1076   .text.shift_down:0000000000000000 shift_down
     /tmp/cc67ZUo8.s:1091   .text.start_key_timer:0000000000000000 $t
     /tmp/cc67ZUo8.s:1099   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/cc67ZUo8.s:1123   .text.start_key_timer:000000000000000c $d
     /tmp/cc67ZUo8.s:1129   .text.keyticks:0000000000000000 $t
     /tmp/cc67ZUo8.s:1137   .text.keyticks:0000000000000000 keyticks
     /tmp/cc67ZUo8.s:1168   .text.keyticks:0000000000000018 $d
     /tmp/cc67ZUo8.s:1174   .text.moveto:0000000000000000 $t
     /tmp/cc67ZUo8.s:1182   .text.moveto:0000000000000000 moveto
     /tmp/cc67ZUo8.s:1242   .text.moveto:000000000000002c $d
     /tmp/cc67ZUo8.s:1249   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/cc67ZUo8.s:1253   .text.print_debug:0000000000000000 $t
     /tmp/cc67ZUo8.s:1261   .text.print_debug:0000000000000000 print_debug
     /tmp/cc67ZUo8.s:1363   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/cc67ZUo8.s:1374   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/cc67ZUo8.s:1378   .text.print_debug2:0000000000000000 $t
     /tmp/cc67ZUo8.s:1386   .text.print_debug2:0000000000000000 print_debug2
     /tmp/cc67ZUo8.s:1488   .text.print_debug2:0000000000000064 $d
     /tmp/cc67ZUo8.s:1499   .text.do_now:0000000000000000 $t
     /tmp/cc67ZUo8.s:1507   .text.do_now:0000000000000000 do_now
ARM GAS  /tmp/cc67ZUo8.s 			page 117


     /tmp/cc67ZUo8.s:1542   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/cc67ZUo8.s:1546   .text.do_multi:0000000000000000 $t
     /tmp/cc67ZUo8.s:1554   .text.do_multi:0000000000000000 do_multi
     /tmp/cc67ZUo8.s:1585   .text.do_multi:000000000000001a $d
     /tmp/cc67ZUo8.s:1595   .text.do_multi:0000000000000024 $t
     /tmp/cc67ZUo8.s:1880   .text.do_multi:0000000000000134 $d
     /tmp/cc67ZUo8.s:1887   .text.program_main:0000000000000000 $t
     /tmp/cc67ZUo8.s:1895   .text.program_main:0000000000000000 program_main
     /tmp/cc67ZUo8.s:2384   .text.program_main:000000000000020c $d
     /tmp/cc67ZUo8.s:2391   .text.program_main:0000000000000218 $t
     /tmp/cc67ZUo8.s:2565   .text.program_main:00000000000002a8 $d
     /tmp/cc67ZUo8.s:2609   .text.program_main:000000000000033c $t
     /tmp/cc67ZUo8.s:3107   .text.program_main:0000000000000594 $d
     /tmp/cc67ZUo8.s:3161   .bss.n_p:0000000000000000 n_p
     /tmp/cc67ZUo8.s:3229   .data.spaces:0000000000000000 spaces
     /tmp/cc67ZUo8.s:3220   .data.release:0000000000000000 release
     /tmp/cc67ZUo8.s:3193   .data.h_shift:0000000000000000 h_shift
     /tmp/cc67ZUo8.s:3184   .data.g_shift:0000000000000000 g_shift
     /tmp/cc67ZUo8.s:3175   .data.f_shift:0000000000000000 f_shift
     /tmp/cc67ZUo8.s:3202   .data.heartbeat:0000000000000000 heartbeat
     /tmp/cc67ZUo8.s:3211   .data.no_key:0000000000000000 no_key
     /tmp/cc67ZUo8.s:3236   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/cc67ZUo8.s:3132   .rodata.str1.4:0000000000000000 $d
     /tmp/cc67ZUo8.s:4783   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/cc67ZUo8.s:3137   .bss.current_menu:0000000000000000 $d
     /tmp/cc67ZUo8.s:3141   .bss.current_menu:0000000000000000 current_menu
     /tmp/cc67ZUo8.s:3144   .bss.last_menu:0000000000000000 $d
     /tmp/cc67ZUo8.s:3148   .bss.last_menu:0000000000000000 last_menu
     /tmp/cc67ZUo8.s:3151   .bss.mdots:0000000000000000 $d
     /tmp/cc67ZUo8.s:3155   .bss.mdots:0000000000000000 mdots
     /tmp/cc67ZUo8.s:3158   .bss.n_p:0000000000000000 $d
     /tmp/cc67ZUo8.s:3164   .bss.start_ticks:0000000000000000 $d
     /tmp/cc67ZUo8.s:3168   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/cc67ZUo8.s:3171   .data.f_shift:0000000000000000 $d
     /tmp/cc67ZUo8.s:3180   .data.g_shift:0000000000000000 $d
     /tmp/cc67ZUo8.s:3189   .data.h_shift:0000000000000000 $d
     /tmp/cc67ZUo8.s:3198   .data.heartbeat:0000000000000000 $d
     /tmp/cc67ZUo8.s:3207   .data.no_key:0000000000000000 $d
     /tmp/cc67ZUo8.s:3216   .data.release:0000000000000000 $d
     /tmp/cc67ZUo8.s:3225   .data.spaces:0000000000000000 $d
     /tmp/cc67ZUo8.s:3232   .rodata.MID_MENU:0000000000000000 $d
     /tmp/cc67ZUo8.s:3242   .rodata.Menus:0000000000000000 $d
     /tmp/cc67ZUo8.s:3246   .rodata.Menus:0000000000000000 Menus
     /tmp/cc67ZUo8.s:4192   .rodata.mapping_alpha.10870:0000000000000000 $d
     /tmp/cc67ZUo8.s:4196   .rodata.mapping_alpha.10870:0000000000000000 mapping_alpha.10870
     /tmp/cc67ZUo8.s:4339   .rodata.mapping_fshift.10868:0000000000000000 $d
     /tmp/cc67ZUo8.s:4343   .rodata.mapping_fshift.10868:0000000000000000 mapping_fshift.10868
     /tmp/cc67ZUo8.s:4486   .rodata.mapping_gshift.10869:0000000000000000 $d
     /tmp/cc67ZUo8.s:4490   .rodata.mapping_gshift.10869:0000000000000000 mapping_gshift.10869
     /tmp/cc67ZUo8.s:4633   .rodata.mapping_none.10867:0000000000000000 $d
     /tmp/cc67ZUo8.s:4637   .rodata.mapping_none.10867:0000000000000000 mapping_none.10867
     /tmp/cc67ZUo8.s:4780   .rodata.mid_menu:0000000000000000 $d

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
ARM GAS  /tmp/cc67ZUo8.s 			page 118


forceDispPlot
RectPolConv
pixel_length
strcpy
sprintf
process_keycode_with_shift
save_prog_file
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
get_alpha_state
cur_shift
StateWhileOn
DispMsg
JustDisplayed
Pause

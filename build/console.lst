ARM GAS  /tmp/ccGGa0st.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC1:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** /* 
   4:src/menu.c    ****  * System menu stuff
   5:src/menu.c    ****  */
   6:src/menu.c    **** 
   7:src/menu.c    **** #define MI_ABOUT_PGM 11
   8:src/menu.c    **** 
   9:src/menu.c    **** const uint8_t mid_menu[] = {
  10:src/menu.c    ****     MI_SYSTEM_ENTER,
  11:src/menu.c    ****     MI_MSC,
  12:src/menu.c    ****     MI_ABOUT_PGM,
  13:src/menu.c    ****     0 }; // Terminator
  14:src/menu.c    **** 
  15:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  16:src/menu.c    **** 
  17:src/menu.c    **** void disp_about(void);
  18:src/menu.c    **** 
  19:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  20:src/menu.c    ****   int ret = 0;
  21:src/menu.c    **** 
  22:src/menu.c    ****   switch(line_id) {
  23:src/menu.c    ****     case MI_ABOUT_PGM:
ARM GAS  /tmp/ccGGa0st.s 			page 2


  24:src/menu.c    ****       disp_about();
  25:src/menu.c    ****       break;
  26:src/menu.c    **** 
  27:src/menu.c    ****      default:
  28:src/menu.c    ****       ret = MRET_UNIMPL;
  29:src/menu.c    ****       break;
  30:src/menu.c    ****   }
  31:src/menu.c    **** 
  32:src/menu.c    ****   return ret;
  33:src/menu.c    **** }
  34:src/menu.c    **** 
  35:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 35 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  36:src/menu.c    ****   const char * ln;
  40              		.loc 1 36 3 view .LVU1
  37:src/menu.c    **** 
  38:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 38 3 view .LVU2
  39:src/menu.c    **** 
  40:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  41:src/menu.c    **** 
  42:src/menu.c    ****   default:
  43:src/menu.c    ****     ln = NULL;
  42              		.loc 1 43 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  38:src/menu.c    **** 
  44              		.loc 1 38 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
  44:src/menu.c    ****     break;
  45:src/menu.c    ****   }
  46:src/menu.c    **** 
  47:src/menu.c    ****   return ln;
  48:src/menu.c    **** }
  46              		.loc 1 48 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 48 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC1
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccGGa0st.s 			page 3


  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB30:
  49:src/menu.c    **** 
  50:src/menu.c    **** void disp_about() {
  51:src/menu.c    ****   lcd_clear_buf();
  52:src/menu.c    ****   lcd_writeClr(t24);
  53:src/menu.c    **** 
  54:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  55:src/menu.c    ****   lcd_printR(t24, "WP34s calculator for DM42:");
  56:src/menu.c    ****   t24->y += 5;
  57:src/menu.c    **** #ifdef TOP_ROW
  58:src/menu.c    ****   lcd_print(t24, "with top row for annunciators,");
  59:src/menu.c    ****   lcd_print(t24, "a longer alpha display,");
  60:src/menu.c    ****   lcd_print(t24, "and some annunciators renamed.");
  61:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  62:src/menu.c    ****   lcd_print(t24, "with a longer alpha display");
  63:src/menu.c    ****   lcd_print(t24, "than the original calculator,");
  64:src/menu.c    ****   lcd_print(t24, "and some annunciators renamed.");
  65:src/menu.c    ****   #else
  66:src/menu.c    ****   lcd_print(t24, "Just like the original calculator");
  67:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed.");
  68:src/menu.c    **** #endif
  69:src/menu.c    ****   t24->y += 5;
  70:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
  71:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
  72:src/menu.c    **** 
  73:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
  74:src/menu.c    ****   t24->x = 20;
  75:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
  76:src/menu.c    **** 
  77:src/menu.c    ****   lcd_refresh();
  78:src/menu.c    **** 
  79:src/menu.c    ****   wait_for_key_press();
  80:src/menu.c    **** }
  81:src/menu.c    **** 
  82:src/menu.c    **** /*
  83:src/menu.c    ****  * WP34s menu code
  84:src/menu.c    ****  */
  85:src/menu.c    **** 
  86:src/menu.c    **** void set_menu ( int new_menu ) {
  87:src/menu.c    ****   int m = current_menu;
  88:src/menu.c    ****   if (new_menu == current_menu) { // return to default
  89:src/menu.c    ****     current_menu = default_menu;
  90:src/menu.c    ****   }
  91:src/menu.c    ****   else if (new_menu == -1) { // go to last menu
  92:src/menu.c    ****     current_menu = last_menu;
  93:src/menu.c    ****   }
  94:src/menu.c    ****   else {
  95:src/menu.c    ****     current_menu = new_menu; // change to new menu
  96:src/menu.c    ****   }
  97:src/menu.c    ****   if (m != 9) last_menu = m; // store menu as last menu unless it's arrow!
  98:src/menu.c    **** }
  99:src/menu.c    **** 
 100:src/menu.c    **** void toggle_default_menu () {
 101:src/menu.c    ****   if (current_menu == default_menu) {
 102:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
ARM GAS  /tmp/ccGGa0st.s 			page 4


 103:src/menu.c    ****   }
 104:src/menu.c    **** }
 105:src/menu.c    **** 
 106:src/menu.c    **** int get_menu () {
 107:src/menu.c    ****   return current_menu;
 108:src/menu.c    **** }
 109:src/menu.c    **** 
 110:src/menu.c    **** void display_current_menu () {
 111:src/menu.c    ****   display_menu (current_menu);
 112:src/menu.c    **** }
 113:src/menu.c    **** 
 114:src/menu.c    **** void set_last_menu () {
 115:src/menu.c    ****   set_menu (last_menu);
 116:src/menu.c    **** }
 117:src/menu.c    **** 
 118:src/menu.c    **** static unsigned char mdots[200][2];
 119:src/menu.c    **** 
 120:src/menu.c    **** static const struct _menu Menus[] = {
 121:src/menu.c    ****   {
 122:src/menu.c    ****     "Blank", // 0
 123:src/menu.c    ****     { 
 124:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 125:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 126:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 127:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 128:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 129:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 130:src/menu.c    ****     }    
 131:src/menu.c    ****   },
 132:src/menu.c    ****   {
 133:src/menu.c    ****     "Clear", // 1
 134:src/menu.c    ****     { 
 135:src/menu.c    ****       { { K24, 1 }, NO_KEY, "CLProg", "" },
 136:src/menu.c    ****       { { K24, 2 }, NO_KEY, "CL\221", "" },
 137:src/menu.c    ****       { { K24, 3 }, NO_KEY, "CL X", "" },
 138:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 139:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 140:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 141:src/menu.c    ****     }    
 142:src/menu.c    ****   },
 143:src/menu.c    ****   {
 144:src/menu.c    ****     "DISP", // 2
 145:src/menu.c    ****     { 
 146:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 147:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 148:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 149:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 150:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 151:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 152:src/menu.c    ****     }
 153:src/menu.c    ****   },
 154:src/menu.c    ****   {
 155:src/menu.c    ****     "BASE", // 3
 156:src/menu.c    ****     { 
 157:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 158:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 159:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
ARM GAS  /tmp/ccGGa0st.s 			page 5


 160:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 161:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 162:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 163:src/menu.c    ****     }
 164:src/menu.c    ****   },
 165:src/menu.c    ****   {
 166:src/menu.c    ****     "ANGLES", // 4
 167:src/menu.c    ****     { 
 168:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 169:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 170:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 171:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 172:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 173:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 174:src/menu.c    ****     }
 175:src/menu.c    ****       
 176:src/menu.c    ****   },
 177:src/menu.c    ****   {
 178:src/menu.c    ****     "MISC", // 5
 179:src/menu.c    ****     { 
 180:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 181:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 182:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 183:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 184:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 185:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 186:src/menu.c    ****     }
 187:src/menu.c    ****   },
 188:src/menu.c    ****   {
 189:src/menu.c    ****     "X<>Y Key", // 6
 190:src/menu.c    ****     { 
 191:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 192:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 193:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 194:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 195:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 196:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 197:src/menu.c    ****     }    
 198:src/menu.c    ****   },
 199:src/menu.c    ****   {
 200:src/menu.c    ****     "Program", // 7
 201:src/menu.c    ****     { 
 202:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 203:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 204:src/menu.c    ****       { { K61, 3 }, NO_KEY, "Pause", "" },
 205:src/menu.c    ****       { { K30, 3 }, NO_KEY, "GTO", "" },
 206:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 207:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 208:src/menu.c    ****     }
 209:src/menu.c    ****   },
 210:src/menu.c    ****   {
 211:src/menu.c    ****     "Setup 1", // 8
 212:src/menu.c    ****     { 
 213:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 214:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 215:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 216:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
ARM GAS  /tmp/ccGGa0st.s 			page 6


 217:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 218:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 219:src/menu.c    ****     }
 220:src/menu.c    ****   },
 221:src/menu.c    ****   {
 222:src/menu.c    ****     "Arrow", // 9
 223:src/menu.c    ****     { 
 224:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 225:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 226:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 227:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "\015HMS" },
 228:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 229:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 230:src/menu.c    ****     }
 231:src/menu.c    ****   },
 232:src/menu.c    ****   {
 233:src/menu.c    ****     "Flags", // 10
 234:src/menu.c    ****     { 
 235:src/menu.c    ****       { { K50, 1 }, NO_KEY, "SF_", "" },
 236:src/menu.c    ****       { { K50, 2 }, NO_KEY, "CF_", "" },
 237:src/menu.c    ****       { { K51, 1 }, NO_KEY, "x=?", "" },
 238:src/menu.c    ****       { { K51, 2 }, NO_KEY, "x\013?", "" },
 239:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 240:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 241:src/menu.c    ****     }
 242:src/menu.c    ****   },
 243:src/menu.c    ****   {
 244:src/menu.c    ****     "Probability", // 11
 245:src/menu.c    ****     { 
 246:src/menu.c    ****       { { K40, 3 }, { K41, 1 }, "Fact!", "\224" },
 247:src/menu.c    ****       { { K40, 1 }, { K41, 2 }, "Cy,x", "\224\235" },
 248:src/menu.c    ****       { { K40, 2 }, NO_KEY, "Py,x", "" },
 249:src/menu.c    ****       { { K12, 1 }, NO_KEY, "RAN#", "" },
 250:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 251:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 252:src/menu.c    ****     }
 253:src/menu.c    ****   },
 254:src/menu.c    ****   {
 255:src/menu.c    ****     "Statistics", // 12
 256:src/menu.c    ****     { 
 257:src/menu.c    ****       { { K42, 1 }, { K43, 3 }, "Xbar", "SUMS" },
 258:src/menu.c    ****       { { K43, 1 }, NO_KEY, "Yhat", "" },
 259:src/menu.c    ****       { { K42, 2 }, NO_KEY, "s", "" },
 260:src/menu.c    ****       { { K43, 2 }, NO_KEY, "r", "" },
 261:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 262:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 263:src/menu.c    ****     }
 264:src/menu.c    ****   },
 265:src/menu.c    ****   {
 266:src/menu.c    ****     "Setup 2", // 13
 267:src/menu.c    ****     { 
 268:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 269:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 270:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 271:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 272:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 273:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
ARM GAS  /tmp/ccGGa0st.s 			page 7


 274:src/menu.c    ****     }
 275:src/menu.c    ****   },
 276:src/menu.c    ****   {
 277:src/menu.c    ****     "Integ/Sum/Prod", // 14
 278:src/menu.c    ****     { 
 279:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 280:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 281:src/menu.c    ****       { { K53, 1 }, NO_KEY, "SUM", "" },
 282:src/menu.c    ****       { { K53, 2 }, NO_KEY, "PROD", "" },
 283:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 284:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 285:src/menu.c    ****     }
 286:src/menu.c    ****   },
 287:src/menu.c    ****   {
 288:src/menu.c    ****     "Blank with A-D", // 15
 289:src/menu.c    ****     { 
 290:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 291:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 292:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 293:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 294:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 295:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 296:src/menu.c    ****     }    
 297:src/menu.c    ****   },
 298:src/menu.c    **** };  
 299:src/menu.c    **** 
 300:src/menu.c    **** /* This code is the set_status_sized code with small changes
 301:src/menu.c    ****  * and non-DM42 code removed.
 302:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 303:src/menu.c    ****  */
 304:src/menu.c    **** #define MENU_WIDTH 32
 305:src/menu.c    **** 
 306:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 306 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 307:src/menu.c    ****   // dotcol is the number of the starting dot column
 308:src/menu.c    ****   // shifted is 1 if shifted
 309:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 309 3 view .LVU8
 310:src/menu.c    **** 
 311:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 312:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 312 3 view .LVU9
 313:src/menu.c    **** 
 314:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 314 3 view .LVU10
 306:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 306 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
ARM GAS  /tmp/ccGGa0st.s 			page 8


  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 306:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 306 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 315:src/menu.c    ****   int i, j, xmax;
 316:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 316 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
  96 000e B4BF     		ite	lt
  97 0010 01F11F03 		addlt	r3, r1, #31
  98 0014 0B46     		movge	r3, r1
 317:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 318:src/menu.c    **** 
 319:src/menu.c    ****   forceDispPlot=0;
  99              		.loc 1 319 16 view .LVU14
 100 0016 4848     		ldr	r0, .L41
 101              	.LVL3:
 306:src/menu.c    ****   // dotcol is the number of the starting dot column
 102              		.loc 1 306 13 view .LVU15
 103 0018 0F46     		mov	r7, r1
 104              	.LVL4:
 315:src/menu.c    ****   int i, j, xmax;
 105              		.loc 1 315 3 is_stmt 1 view .LVU16
 316:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 106              		.loc 1 316 3 view .LVU17
 320:src/menu.c    **** 
 321:src/menu.c    **** #ifdef RP_PREFIX
 322:src/menu.c    ****   RectPolConv = 0;
 107              		.loc 1 322 15 is_stmt 0 view .LVU18
 108 001a 4849     		ldr	r1, .L41+4
 109              	.LVL5:
 319:src/menu.c    **** 
 110              		.loc 1 319 16 view .LVU19
 111 001c 0022     		movs	r2, #0
 112              	.LVL6:
 319:src/menu.c    **** 
 113              		.loc 1 319 16 view .LVU20
 114 001e 0270     		strb	r2, [r0]
 115              		.loc 1 322 15 view .LVU21
 116 0020 0A60     		str	r2, [r1]
 323:src/menu.c    **** #endif
 324:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 117              		.loc 1 324 10 view .LVU22
 118 0022 019A     		ldr	r2, [sp, #4]
 119 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 316:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 120              		.loc 1 316 30 view .LVU23
 121 0026 23F01F03 		bic	r3, r3, #31
 316:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 122              		.loc 1 316 8 view .LVU24
 123 002a 03F12009 		add	r9, r3, #32
 124              	.LVL7:
ARM GAS  /tmp/ccGGa0st.s 			page 9


 317:src/menu.c    **** 
 125              		.loc 1 317 3 is_stmt 1 view .LVU25
 319:src/menu.c    **** 
 126              		.loc 1 319 3 view .LVU26
 322:src/menu.c    **** #endif
 127              		.loc 1 322 3 view .LVU27
 128              		.loc 1 324 3 view .LVU28
 129              		.loc 1 324 9 view .LVU29
 130 002e 002D     		cmp	r5, #0
 131 0030 78D0     		beq	.L7
 132              		.loc 1 324 23 is_stmt 0 view .LVU30
 133 0032 4F45     		cmp	r7, r9
 134 0034 76DC     		bgt	.L7
 135              	.LBB39:
 325:src/menu.c    ****     int c;
 326:src/menu.c    ****     int width;
 327:src/menu.c    ****     unsigned char cmap[6];
 328:src/menu.c    **** 
 329:src/menu.c    ****     int real_width;
 330:src/menu.c    ****     int current_smallp;
 331:src/menu.c    **** 
 332:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 333:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 334:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 335:src/menu.c    ****     //           01 -> (not used)
 336:src/menu.c    ****     //           10 -> use big font
 337:src/menu.c    ****     //           11 -> use small font
 338:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 339:src/menu.c    ****     if (str[0] == '\007') {
 136              		.loc 1 339 8 view .LVU31
 137 0036 072D     		cmp	r5, #7
 138              	.LBE39:
 312:src/menu.c    **** 
 139              		.loc 1 312 7 view .LVU32
 140 0038 4FF0FF04 		mov	r4, #255
 141              	.LVL8:
 142              	.LBB56:
 325:src/menu.c    ****     int c;
 143              		.loc 1 325 5 is_stmt 1 view .LVU33
 326:src/menu.c    ****     unsigned char cmap[6];
 144              		.loc 1 326 5 view .LVU34
 327:src/menu.c    **** 
 145              		.loc 1 327 5 view .LVU35
 329:src/menu.c    ****     int current_smallp;
 146              		.loc 1 329 5 view .LVU36
 330:src/menu.c    **** 
 147              		.loc 1 330 5 view .LVU37
 148              		.loc 1 339 5 view .LVU38
 340:src/menu.c    ****       width = str[1] & 0x1F;
 341:src/menu.c    ****       switch (str[1] & 0x60) {
 342:src/menu.c    ****       default:
 343:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 344:src/menu.c    **** 	break;
 345:src/menu.c    ****       case 0x40:	current_smallp = 0;
 346:src/menu.c    **** 	break;
 347:src/menu.c    ****       case 0x60:	current_smallp = 1;
 149              		.loc 1 347 33 is_stmt 0 view .LVU39
ARM GAS  /tmp/ccGGa0st.s 			page 10


 150 003c 4FF0010A 		mov	r10, #1
 339:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 339 8 view .LVU40
 152 0040 64D1     		bne	.L11
 153              	.LVL9:
 154              	.L39:
 340:src/menu.c    ****       width = str[1] & 0x1F;
 155              		.loc 1 340 7 is_stmt 1 view .LVU41
 340:src/menu.c    ****       width = str[1] & 0x1F;
 156              		.loc 1 340 18 is_stmt 0 view .LVU42
 157 0042 019B     		ldr	r3, [sp, #4]
 158 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 159 0046 06F06003 		and	r3, r6, #96
 341:src/menu.c    ****       default:
 160              		.loc 1 341 7 view .LVU43
 161 004a 402B     		cmp	r3, #64
 340:src/menu.c    ****       width = str[1] & 0x1F;
 162              		.loc 1 340 13 view .LVU44
 163 004c 06F01F06 		and	r6, r6, #31
 164              	.LVL10:
 341:src/menu.c    ****       default:
 165              		.loc 1 341 7 is_stmt 1 view .LVU45
 166 0050 6CD0     		beq	.L34
 167 0052 602B     		cmp	r3, #96
 168 0054 6AD1     		bne	.L34
 169              		.loc 1 347 18 view .LVU46
 170              	.LVL11:
 348:src/menu.c    **** 	break;
 171              		.loc 1 348 2 view .LVU47
 349:src/menu.c    ****       }
 350:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 172              		.loc 1 350 7 view .LVU48
 173              		.loc 1 350 11 is_stmt 0 view .LVU49
 174 0056 019B     		ldr	r3, [sp, #4]
 175 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 347:src/menu.c    **** 	break;
 176              		.loc 1 347 33 view .LVU50
 177 005a 0123     		movs	r3, #1
 178 005c 0093     		str	r3, [sp]
 179 005e 00F58075 		add	r5, r0, #256
 180              	.LVL12:
 181              	.L15:
 351:src/menu.c    ****       str += 3;
 182              		.loc 1 351 7 is_stmt 1 view .LVU51
 352:src/menu.c    **** 
 353:src/menu.c    ****       real_width = charlengths(c);
 183              		.loc 1 353 20 is_stmt 0 view .LVU52
 184 0062 2846     		mov	r0, r5
 185 0064 FFF7FEFF 		bl	charlengths
 186              	.LVL13:
 351:src/menu.c    ****       str += 3;
 187              		.loc 1 351 11 view .LVU53
 188 0068 019B     		ldr	r3, [sp, #4]
 189 006a 0333     		adds	r3, r3, #3
 190 006c 0193     		str	r3, [sp, #4]
 191              	.LVL14:
 192              		.loc 1 353 7 is_stmt 1 view .LVU54
ARM GAS  /tmp/ccGGa0st.s 			page 11


 354:src/menu.c    ****     } else {
 355:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 356:src/menu.c    ****       real_width = width = charlengths(c);
 357:src/menu.c    ****       current_smallp = smallp;
 358:src/menu.c    ****     }
 359:src/menu.c    **** 
 360:src/menu.c    ****     if (x + real_width > xmax)
 193              		.loc 1 360 5 view .LVU55
 194              		.loc 1 360 11 is_stmt 0 view .LVU56
 195 006e C319     		adds	r3, r0, r7
 196              	.LVL15:
 197              		.loc 1 360 8 view .LVU57
 198 0070 9945     		cmp	r9, r3
 199 0072 57DB     		blt	.L7
 200              	.L40:
 361:src/menu.c    ****       break;
 362:src/menu.c    **** 
 363:src/menu.c    ****     if (posns_state != current_smallp) {
 201              		.loc 1 363 5 is_stmt 1 view .LVU58
 202              		.loc 1 363 8 is_stmt 0 view .LVU59
 203 0074 009B     		ldr	r3, [sp]
 204 0076 A342     		cmp	r3, r4
 364:src/menu.c    ****       findlengths(posns, current_smallp);
 205              		.loc 1 364 7 view .LVU60
 206 0078 07AB     		add	r3, sp, #28
 363:src/menu.c    ****       findlengths(posns, current_smallp);
 207              		.loc 1 363 8 view .LVU61
 208 007a 05D0     		beq	.L18
 209              		.loc 1 364 7 is_stmt 1 view .LVU62
 210 007c 1846     		mov	r0, r3
 211              	.LVL16:
 212              		.loc 1 364 7 is_stmt 0 view .LVU63
 213 007e 0099     		ldr	r1, [sp]
 214 0080 0393     		str	r3, [sp, #12]
 215 0082 FFF7FEFF 		bl	findlengths
 216              	.LVL17:
 217 0086 039B     		ldr	r3, [sp, #12]
 365:src/menu.c    ****       posns_state = current_smallp;
 218              		.loc 1 365 7 is_stmt 1 view .LVU64
 219              	.LVL18:
 220              	.L18:
 366:src/menu.c    ****     }
 367:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 221              		.loc 1 367 5 view .LVU65
 222 0088 009A     		ldr	r2, [sp]
 223 008a 2846     		mov	r0, r5
 224 008c 05A9     		add	r1, sp, #20
 225 008e FFF7FEFF 		bl	unpackchar
 226              	.LVL19:
 368:src/menu.c    **** 
 369:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 227              		.loc 1 369 5 view .LVU66
 228              		.loc 1 369 15 view .LVU67
 229 0092 029B     		ldr	r3, [sp, #8]
 230 0094 03EB4704 		add	r4, r3, r7, lsl #1
 231 0098 294B     		ldr	r3, .L41+8
 232 009a 0DF1140B 		add	fp, sp, #20
ARM GAS  /tmp/ccGGa0st.s 			page 12


 233 009e 1C44     		add	r4, r4, r3
 367:src/menu.c    **** 
 234              		.loc 1 367 5 is_stmt 0 view .LVU68
 235 00a0 4FF0050E 		mov	lr, #5
 236 00a4 A9EB0705 		sub	r5, r9, r7
 237              	.LVL20:
 238              	.L19:
 370:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 239              		.loc 1 370 17 is_stmt 1 view .LVU69
 240              		.loc 1 370 7 is_stmt 0 view .LVU70
 241 00a8 002E     		cmp	r6, #0
 242 00aa 1FDD     		ble	.L25
 371:src/menu.c    **** 	if (x+j >= xmax)
 243              		.loc 1 371 2 is_stmt 1 view .LVU71
 244              		.loc 1 371 5 is_stmt 0 view .LVU72
 245 00ac B945     		cmp	r9, r7
 246 00ae 1DDD     		ble	.L25
 247              	.LBB40:
 248              	.LBB41:
 249              	.LBB42:
 250              	.LBB43:
 372:src/menu.c    **** 	  break;
 373:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 374:src/menu.c    ****       }
 375:src/menu.c    ****     }
 376:src/menu.c    ****     x += width;
 377:src/menu.c    ****   }
 378:src/menu.c    **** }
 379:src/menu.c    **** 
 380:src/menu.c    **** 
 381:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 382:src/menu.c    **** 
 383:src/menu.c    **** int pixel_length(const char *s, int smallp)
 384:src/menu.c    **** {
 385:src/menu.c    ****   int len = 0;
 386:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 387:src/menu.c    ****   while (*s != '\0') {
 388:src/menu.c    ****     if (s[0] == '\007') {
 389:src/menu.c    ****       len += s[1] & 0x1F;
 390:src/menu.c    ****       s += 3;
 391:src/menu.c    ****       continue;
 392:src/menu.c    ****     }
 393:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 394:src/menu.c    ****   }
 395:src/menu.c    ****   return len;
 396:src/menu.c    **** }
 397:src/menu.c    **** */
 398:src/menu.c    **** 
 399:src/menu.c    **** 
 400:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 401:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 402:src/menu.c    ****   if (on) {
 403:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 404:src/menu.c    ****   }
 405:src/menu.c    ****   else {
 406:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 251              		.loc 1 406 25 view .LVU73
ARM GAS  /tmp/ccGGa0st.s 			page 13


 252 00b0 0AFA0EFC 		lsl	ip, r10, lr
 253              		.loc 1 406 17 view .LVU74
 254 00b4 4FFA8CFC 		sxtb	ip, ip
 255              	.LBE43:
 256              	.LBE42:
 257              	.LBE41:
 258              	.LBE40:
 373:src/menu.c    ****       }
 259              		.loc 1 373 31 view .LVU75
 260 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 261              	.LBB53:
 262              	.LBB50:
 263              	.LBB47:
 264              	.LBB44:
 265              		.loc 1 406 17 view .LVU76
 266 00bc 6FEA0C08 		mvn	r8, ip
 267              	.LBE44:
 268              	.LBE47:
 269              	.LBE50:
 270              	.LBE53:
 370:src/menu.c    **** 	if (x+j >= xmax)
 271              		.loc 1 370 13 view .LVU77
 272 00c0 0023     		movs	r3, #0
 273 00c2 01E0     		b	.L20
 274              	.LVL21:
 275              	.L24:
 371:src/menu.c    **** 	  break;
 276              		.loc 1 371 5 view .LVU78
 277 00c4 9D42     		cmp	r5, r3
 278 00c6 11D0     		beq	.L25
 279              	.LVL22:
 280              	.L20:
 373:src/menu.c    ****       }
 281              		.loc 1 373 2 is_stmt 1 view .LVU79
 282              	.LBB54:
 283              	.LBI40:
 400:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 400 6 view .LVU80
 285              	.LBB51:
 401:src/menu.c    ****   if (on) {
 286              		.loc 1 401 3 view .LVU81
 287              	.LBB48:
 288              	.LBI42:
 400:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 289              		.loc 1 400 6 view .LVU82
 290              	.LBB45:
 402:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 291              		.loc 1 402 3 view .LVU83
 292              	.LBE45:
 293              	.LBE48:
 401:src/menu.c    ****   if (on) {
 294              		.loc 1 401 6 is_stmt 0 view .LVU84
 295 00c8 DA19     		adds	r2, r3, r7
 296              	.LVL23:
 401:src/menu.c    ****   if (on) {
 297              		.loc 1 401 6 view .LVU85
 298 00ca C72A     		cmp	r2, #199
ARM GAS  /tmp/ccGGa0st.s 			page 14


 299              	.LBE51:
 300              	.LBE54:
 373:src/menu.c    ****       }
 301              		.loc 1 373 46 view .LVU86
 302 00cc 40FA03F1 		asr	r1, r0, r3
 303              	.LBB55:
 304              	.LBB52:
 401:src/menu.c    ****   if (on) {
 305              		.loc 1 401 6 view .LVU87
 306 00d0 09D8     		bhi	.L22
 307              	.LBB49:
 308              	.LBB46:
 403:src/menu.c    ****   }
 309              		.loc 1 403 5 is_stmt 1 view .LVU88
 310              		.loc 1 406 5 view .LVU89
 403:src/menu.c    ****   }
 311              		.loc 1 403 17 is_stmt 0 view .LVU90
 312 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 313              	.LVL24:
 402:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 314              		.loc 1 402 6 view .LVU91
 315 00d6 C907     		lsls	r1, r1, #31
 403:src/menu.c    ****   }
 316              		.loc 1 403 17 view .LVU92
 317 00d8 4CBF     		ite	mi
 318 00da 4CEA0202 		orrmi	r2, ip, r2
 319              		.loc 1 406 17 view .LVU93
 320 00de 08EA0202 		andpl	r2, r8, r2
 321 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 322              	.L22:
 323              	.LBE46:
 324              	.LBE49:
 325              	.LBE52:
 326              	.LBE55:
 371:src/menu.c    **** 	  break;
 327              		.loc 1 371 2 is_stmt 1 view .LVU94
 328              	.LVL25:
 370:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 370 26 view .LVU95
 370:src/menu.c    **** 	if (x+j >= xmax)
 330              		.loc 1 370 27 is_stmt 0 view .LVU96
 331 00e6 0133     		adds	r3, r3, #1
 332              	.LVL26:
 370:src/menu.c    **** 	if (x+j >= xmax)
 333              		.loc 1 370 17 is_stmt 1 view .LVU97
 370:src/menu.c    **** 	if (x+j >= xmax)
 334              		.loc 1 370 7 is_stmt 0 view .LVU98
 335 00e8 B342     		cmp	r3, r6
 336 00ea EBD1     		bne	.L24
 337              	.LVL27:
 338              	.L25:
 369:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 339              		.loc 1 369 20 is_stmt 1 view .LVU99
 369:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 340              		.loc 1 369 15 view .LVU100
 341 00ec 0EF1FF3E 		add	lr, lr, #-1
 369:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
ARM GAS  /tmp/ccGGa0st.s 			page 15


 342              		.loc 1 369 5 is_stmt 0 view .LVU101
 343 00f0 BEF1FF3F 		cmp	lr, #-1
 344 00f4 0BF1010B 		add	fp, fp, #1
 345              	.LVL28:
 369:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 346              		.loc 1 369 5 view .LVU102
 347 00f8 D6D1     		bne	.L19
 376:src/menu.c    ****   }
 348              		.loc 1 376 5 is_stmt 1 view .LVU103
 349              	.LBE56:
 324:src/menu.c    ****     int c;
 350              		.loc 1 324 10 is_stmt 0 view .LVU104
 351 00fa 019B     		ldr	r3, [sp, #4]
 352 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 353              	.LBB57:
 376:src/menu.c    ****   }
 354              		.loc 1 376 7 view .LVU105
 355 00fe 3744     		add	r7, r7, r6
 356              	.LVL29:
 376:src/menu.c    ****   }
 357              		.loc 1 376 7 view .LVU106
 358              	.LBE57:
 324:src/menu.c    ****     int c;
 359              		.loc 1 324 9 is_stmt 1 view .LVU107
 360 0100 85B1     		cbz	r5, .L7
 324:src/menu.c    ****     int c;
 361              		.loc 1 324 23 is_stmt 0 view .LVU108
 362 0102 B945     		cmp	r9, r7
 363 0104 0EDB     		blt	.L7
 364              	.LBB58:
 339:src/menu.c    ****       width = str[1] & 0x1F;
 365              		.loc 1 339 8 view .LVU109
 366 0106 072D     		cmp	r5, #7
 367              	.LBE58:
 368 0108 009C     		ldr	r4, [sp]
 369              	.LBB59:
 325:src/menu.c    ****     int width;
 370              		.loc 1 325 5 is_stmt 1 view .LVU110
 326:src/menu.c    ****     unsigned char cmap[6];
 371              		.loc 1 326 5 view .LVU111
 327:src/menu.c    **** 
 372              		.loc 1 327 5 view .LVU112
 329:src/menu.c    ****     int current_smallp;
 373              		.loc 1 329 5 view .LVU113
 330:src/menu.c    **** 
 374              		.loc 1 330 5 view .LVU114
 339:src/menu.c    ****       width = str[1] & 0x1F;
 375              		.loc 1 339 5 view .LVU115
 339:src/menu.c    ****       width = str[1] & 0x1F;
 376              		.loc 1 339 8 is_stmt 0 view .LVU116
 377 010a 9AD0     		beq	.L39
 378              	.LVL30:
 379              	.L11:
 355:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 355 7 is_stmt 1 view .LVU117
 356:src/menu.c    ****       current_smallp = smallp;
 381              		.loc 1 356 28 is_stmt 0 view .LVU118
ARM GAS  /tmp/ccGGa0st.s 			page 16


 382 010c 2846     		mov	r0, r5
 383 010e FFF7FEFF 		bl	charlengths
 384              	.LVL31:
 355:src/menu.c    ****       real_width = width = charlengths(c);
 385              		.loc 1 355 31 view .LVU119
 386 0112 019B     		ldr	r3, [sp, #4]
 387 0114 0133     		adds	r3, r3, #1
 388 0116 0193     		str	r3, [sp, #4]
 389              	.LVL32:
 356:src/menu.c    ****       current_smallp = smallp;
 390              		.loc 1 356 7 is_stmt 1 view .LVU120
 357:src/menu.c    ****     }
 391              		.loc 1 357 7 view .LVU121
 357:src/menu.c    ****     }
 392              		.loc 1 357 22 is_stmt 0 view .LVU122
 393 0118 0023     		movs	r3, #0
 394              	.LVL33:
 357:src/menu.c    ****     }
 395              		.loc 1 357 22 view .LVU123
 396 011a 0093     		str	r3, [sp]
 397              	.LVL34:
 360:src/menu.c    ****       break;
 398              		.loc 1 360 11 view .LVU124
 399 011c C319     		adds	r3, r0, r7
 400              	.LVL35:
 360:src/menu.c    ****       break;
 401              		.loc 1 360 8 view .LVU125
 402 011e 9945     		cmp	r9, r3
 356:src/menu.c    ****       current_smallp = smallp;
 403              		.loc 1 356 28 view .LVU126
 404 0120 0646     		mov	r6, r0
 360:src/menu.c    ****       break;
 405              		.loc 1 360 5 is_stmt 1 view .LVU127
 360:src/menu.c    ****       break;
 406              		.loc 1 360 8 is_stmt 0 view .LVU128
 407 0122 A7DA     		bge	.L40
 408              	.LVL36:
 409              	.L7:
 360:src/menu.c    ****       break;
 410              		.loc 1 360 8 view .LVU129
 411              	.LBE59:
 378:src/menu.c    **** 
 412              		.loc 1 378 1 view .LVU130
 413 0124 0DF5097D 		add	sp, sp, #548
 414              		.cfi_remember_state
 415              		.cfi_def_cfa_offset 36
 416              		@ sp needed
 417 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 418              	.LVL37:
 419              	.L34:
 420              		.cfi_restore_state
 421              	.LBB60:
 350:src/menu.c    ****       str += 3;
 422              		.loc 1 350 7 is_stmt 1 view .LVU131
 350:src/menu.c    ****       str += 3;
 423              		.loc 1 350 11 is_stmt 0 view .LVU132
 424 012c 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/ccGGa0st.s 			page 17


 425 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 343:src/menu.c    **** 	break;
 426              		.loc 1 343 33 view .LVU133
 427 0130 0023     		movs	r3, #0
 428 0132 0093     		str	r3, [sp]
 429 0134 95E7     		b	.L15
 430              	.L42:
 431 0136 00BF     		.align	2
 432              	.L41:
 433 0138 00000000 		.word	forceDispPlot
 434 013c 00000000 		.word	RectPolConv
 435 0140 00000000 		.word	.LANCHOR0
 436              	.LBE60:
 437              		.cfi_endproc
 438              	.LFE30:
 440              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 441              		.align	2
 442              	.LC2:
 443 0000 57503334 		.ascii	"WP34s calculator for DM42:\000"
 443      73206361 
 443      6C63756C 
 443      61746F72 
 443      20666F72 
 444 001b 00       		.align	2
 445              	.LC3:
 446 001c 4A757374 		.ascii	"Just like the original calculator\000"
 446      206C696B 
 446      65207468 
 446      65206F72 
 446      6967696E 
 447 003e 0000     		.align	2
 448              	.LC4:
 449 0040 62757420 		.ascii	"but with some annunciators renamed.\000"
 449      77697468 
 449      20736F6D 
 449      6520616E 
 449      6E756E63 
 450              		.align	2
 451              	.LC5:
 452 0064 54686973 		.ascii	"This software is neither provided\000"
 452      20736F66 
 452      74776172 
 452      65206973 
 452      206E6569 
 453 0086 0000     		.align	2
 454              	.LC6:
 455 0088 6279206E 		.ascii	"by nor supported by SwissMicros.\000"
 455      6F722073 
 455      7570706F 
 455      72746564 
 455      20627920 
 456 00a9 000000   		.align	2
 457              	.LC7:
 458 00ac 20202020 		.ascii	"    Press EXIT key to continue...\000"
 458      50726573 
 458      73204558 
 458      4954206B 
ARM GAS  /tmp/ccGGa0st.s 			page 18


 458      65792074 
 459              		.section	.text.disp_about,"ax",%progbits
 460              		.align	1
 461              		.p2align 2,,3
 462              		.global	disp_about
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv4-sp-d16
 468              	disp_about:
 469              	.LFB5:
  50:src/menu.c    ****   lcd_clear_buf();
 470              		.loc 1 50 19 is_stmt 1 view -0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
  51:src/menu.c    ****   lcd_writeClr(t24);
 474              		.loc 1 51 3 view .LVU135
  50:src/menu.c    ****   lcd_clear_buf();
 475              		.loc 1 50 19 is_stmt 0 view .LVU136
 476 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 477              		.cfi_def_cfa_offset 24
 478              		.cfi_offset 4, -24
 479              		.cfi_offset 5, -20
 480              		.cfi_offset 6, -16
 481              		.cfi_offset 7, -12
 482              		.cfi_offset 8, -8
 483              		.cfi_offset 14, -4
  52:src/menu.c    **** 
 484              		.loc 1 52 3 view .LVU137
 485 0004 1E4C     		ldr	r4, .L45
  51:src/menu.c    ****   lcd_writeClr(t24);
 486              		.loc 1 51 3 view .LVU138
 487 0006 1F4B     		ldr	r3, .L45+4
  55:src/menu.c    ****   t24->y += 5;
 488              		.loc 1 55 3 view .LVU139
 489 0008 1F4D     		ldr	r5, .L45+8
  51:src/menu.c    ****   lcd_writeClr(t24);
 490              		.loc 1 51 3 view .LVU140
 491 000a 9847     		blx	r3
 492              	.LVL38:
  52:src/menu.c    **** 
 493              		.loc 1 52 3 is_stmt 1 view .LVU141
 494 000c 606B     		ldr	r0, [r4, #52]
 495 000e 1F4B     		ldr	r3, .L45+12
 496 0010 9847     		blx	r3
 497              	.LVL39:
  54:src/menu.c    ****   lcd_printR(t24, "WP34s calculator for DM42:");
 498              		.loc 1 54 3 view .LVU142
 499 0012 0522     		movs	r2, #5
 500 0014 606B     		ldr	r0, [r4, #52]
 501 0016 1E4B     		ldr	r3, .L45+16
 502 0018 0021     		movs	r1, #0
 503 001a 9847     		blx	r3
 504              	.LVL40:
  55:src/menu.c    ****   t24->y += 5;
 505              		.loc 1 55 3 view .LVU143
ARM GAS  /tmp/ccGGa0st.s 			page 19


  55:src/menu.c    ****   t24->y += 5;
 506              		.loc 1 55 3 view .LVU144
 507 001c 606B     		ldr	r0, [r4, #52]
 508 001e 1D49     		ldr	r1, .L45+20
 509 0020 0126     		movs	r6, #1
 510 0022 4674     		strb	r6, [r0, #17]
  55:src/menu.c    ****   t24->y += 5;
 511              		.loc 1 55 3 view .LVU145
 512 0024 A847     		blx	r5
 513              	.LVL41:
  55:src/menu.c    ****   t24->y += 5;
 514              		.loc 1 55 3 view .LVU146
 515 0026 606B     		ldr	r0, [r4, #52]
  66:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed.");
 516              		.loc 1 66 3 is_stmt 0 view .LVU147
 517 0028 1B49     		ldr	r1, .L45+24
  56:src/menu.c    **** #ifdef TOP_ROW
 518              		.loc 1 56 10 view .LVU148
 519 002a C388     		ldrh	r3, [r0, #6]
  55:src/menu.c    ****   t24->y += 5;
 520              		.loc 1 55 3 view .LVU149
 521 002c 0027     		movs	r7, #0
  56:src/menu.c    **** #ifdef TOP_ROW
 522              		.loc 1 56 10 view .LVU150
 523 002e 0533     		adds	r3, r3, #5
 524 0030 C380     		strh	r3, [r0, #6]	@ movhi
  55:src/menu.c    ****   t24->y += 5;
 525              		.loc 1 55 3 view .LVU151
 526 0032 4774     		strb	r7, [r0, #17]
  55:src/menu.c    ****   t24->y += 5;
 527              		.loc 1 55 3 is_stmt 1 view .LVU152
  56:src/menu.c    **** #ifdef TOP_ROW
 528              		.loc 1 56 3 view .LVU153
  66:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed.");
 529              		.loc 1 66 3 view .LVU154
 530 0034 A847     		blx	r5
 531              	.LVL42:
  67:src/menu.c    **** #endif
 532              		.loc 1 67 3 view .LVU155
 533 0036 606B     		ldr	r0, [r4, #52]
 534 0038 1849     		ldr	r1, .L45+28
 535 003a A847     		blx	r5
 536              	.LVL43:
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 537              		.loc 1 69 3 view .LVU156
 538 003c 606B     		ldr	r0, [r4, #52]
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 539              		.loc 1 70 3 is_stmt 0 view .LVU157
 540 003e 1849     		ldr	r1, .L45+32
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 541              		.loc 1 69 10 view .LVU158
 542 0040 C388     		ldrh	r3, [r0, #6]
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 543              		.loc 1 70 3 view .LVU159
 544 0042 4674     		strb	r6, [r0, #17]
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 545              		.loc 1 69 10 view .LVU160
ARM GAS  /tmp/ccGGa0st.s 			page 20


 546 0044 0533     		adds	r3, r3, #5
 547 0046 C380     		strh	r3, [r0, #6]	@ movhi
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 548              		.loc 1 70 3 is_stmt 1 view .LVU161
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 549              		.loc 1 70 3 view .LVU162
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 550              		.loc 1 70 3 view .LVU163
 551 0048 A847     		blx	r5
 552              	.LVL44:
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 553              		.loc 1 70 3 view .LVU164
 554 004a 606B     		ldr	r0, [r4, #52]
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 555              		.loc 1 70 3 view .LVU165
  71:src/menu.c    **** 
 556              		.loc 1 71 3 view .LVU166
  71:src/menu.c    **** 
 557              		.loc 1 71 3 view .LVU167
 558 004c 1549     		ldr	r1, .L45+36
 559 004e 4674     		strb	r6, [r0, #17]
  71:src/menu.c    **** 
 560              		.loc 1 71 3 view .LVU168
 561 0050 A847     		blx	r5
 562              	.LVL45:
  71:src/menu.c    **** 
 563              		.loc 1 71 3 view .LVU169
 564 0052 606B     		ldr	r0, [r4, #52]
  73:src/menu.c    ****   t24->x = 20;
 565              		.loc 1 73 20 is_stmt 0 view .LVU170
 566 0054 144B     		ldr	r3, .L45+40
  71:src/menu.c    **** 
 567              		.loc 1 71 3 view .LVU171
 568 0056 4774     		strb	r7, [r0, #17]
  71:src/menu.c    **** 
 569              		.loc 1 71 3 is_stmt 1 view .LVU172
  73:src/menu.c    ****   t24->x = 20;
 570              		.loc 1 73 3 view .LVU173
  73:src/menu.c    ****   t24->x = 20;
 571              		.loc 1 73 20 is_stmt 0 view .LVU174
 572 0058 9847     		blx	r3
 573              	.LVL46:
  73:src/menu.c    ****   t24->x = 20;
 574              		.loc 1 73 3 view .LVU175
 575 005a 636B     		ldr	r3, [r4, #52]
  75:src/menu.c    **** 
 576              		.loc 1 75 3 view .LVU176
 577 005c 1349     		ldr	r1, .L45+44
 578 005e 5E74     		strb	r6, [r3, #17]
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 579              		.loc 1 74 10 view .LVU177
 580 0060 1422     		movs	r2, #20
  73:src/menu.c    ****   t24->x = 20;
 581              		.loc 1 73 39 view .LVU178
 582 0062 C0F1EB00 		rsb	r0, r0, #235
  73:src/menu.c    ****   t24->x = 20;
 583              		.loc 1 73 10 view .LVU179
ARM GAS  /tmp/ccGGa0st.s 			page 21


 584 0066 D880     		strh	r0, [r3, #6]	@ movhi
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 585              		.loc 1 74 3 is_stmt 1 view .LVU180
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 586              		.loc 1 74 10 is_stmt 0 view .LVU181
 587 0068 9A80     		strh	r2, [r3, #4]	@ movhi
  75:src/menu.c    **** 
 588              		.loc 1 75 3 is_stmt 1 view .LVU182
  75:src/menu.c    **** 
 589              		.loc 1 75 3 view .LVU183
  75:src/menu.c    **** 
 590              		.loc 1 75 3 view .LVU184
 591 006a 1846     		mov	r0, r3
 592 006c A847     		blx	r5
 593              	.LVL47:
  75:src/menu.c    **** 
 594              		.loc 1 75 3 view .LVU185
 595 006e 626B     		ldr	r2, [r4, #52]
  77:src/menu.c    **** 
 596              		.loc 1 77 3 is_stmt 0 view .LVU186
 597 0070 0F4B     		ldr	r3, .L45+48
  75:src/menu.c    **** 
 598              		.loc 1 75 3 view .LVU187
 599 0072 5774     		strb	r7, [r2, #17]
  75:src/menu.c    **** 
 600              		.loc 1 75 3 is_stmt 1 view .LVU188
  77:src/menu.c    **** 
 601              		.loc 1 77 3 view .LVU189
 602 0074 9847     		blx	r3
 603              	.LVL48:
  79:src/menu.c    **** }
 604              		.loc 1 79 3 view .LVU190
  80:src/menu.c    **** 
 605              		.loc 1 80 1 is_stmt 0 view .LVU191
 606 0076 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 607              		.cfi_restore 14
 608              		.cfi_restore 8
 609              		.cfi_restore 7
 610              		.cfi_restore 6
 611              		.cfi_restore 5
 612              		.cfi_restore 4
 613              		.cfi_def_cfa_offset 0
  79:src/menu.c    **** }
 614              		.loc 1 79 3 view .LVU192
 615 007a 0E4B     		ldr	r3, .L45+52
 616 007c 1847     		bx	r3	@ indirect register sibling call
 617              	.LVL49:
 618              	.L46:
 619 007e 00BF     		.align	2
 620              	.L45:
 621 0080 00200010 		.word	268443648
 622 0084 2D020008 		.word	134218285
 623 0088 B1020008 		.word	134218417
 624 008c 65020008 		.word	134218341
 625 0090 6D020008 		.word	134218349
 626 0094 00000000 		.word	.LC2
 627 0098 1C000000 		.word	.LC3
ARM GAS  /tmp/ccGGa0st.s 			page 22


 628 009c 40000000 		.word	.LC4
 629 00a0 64000000 		.word	.LC5
 630 00a4 88000000 		.word	.LC6
 631 00a8 71020008 		.word	134218353
 632 00ac AC000000 		.word	.LC7
 633 00b0 31020008 		.word	134218289
 634 00b4 99030008 		.word	134218649
 635              		.cfi_endproc
 636              	.LFE5:
 638              		.section	.text.run_menu_item,"ax",%progbits
 639              		.align	1
 640              		.p2align 2,,3
 641              		.global	run_menu_item
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	run_menu_item:
 648              	.LVL50:
 649              	.LFB3:
  19:src/menu.c    ****   int ret = 0;
 650              		.loc 1 19 36 is_stmt 1 view -0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
  20:src/menu.c    **** 
 654              		.loc 1 20 3 view .LVU194
  22:src/menu.c    ****     case MI_ABOUT_PGM:
 655              		.loc 1 22 3 view .LVU195
 656 0000 0B28     		cmp	r0, #11
 657 0002 04D1     		bne	.L49
  24:src/menu.c    ****       break;
 658              		.loc 1 24 7 view .LVU196
  19:src/menu.c    ****   int ret = 0;
 659              		.loc 1 19 36 is_stmt 0 view .LVU197
 660 0004 08B5     		push	{r3, lr}
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 3, -8
 663              		.cfi_offset 14, -4
  24:src/menu.c    ****       break;
 664              		.loc 1 24 7 view .LVU198
 665 0006 FFF7FEFF 		bl	disp_about
 666              	.LVL51:
  25:src/menu.c    **** 
 667              		.loc 1 25 7 is_stmt 1 view .LVU199
  20:src/menu.c    **** 
 668              		.loc 1 20 7 is_stmt 0 view .LVU200
 669 000a 0020     		movs	r0, #0
  33:src/menu.c    **** 
 670              		.loc 1 33 1 view .LVU201
 671 000c 08BD     		pop	{r3, pc}
 672              	.LVL52:
 673              	.L49:
 674              		.cfi_def_cfa_offset 0
 675              		.cfi_restore 3
 676              		.cfi_restore 14
  28:src/menu.c    ****       break;
ARM GAS  /tmp/ccGGa0st.s 			page 23


 677              		.loc 1 28 11 view .LVU202
 678 000e 4FF0FF30 		mov	r0, #-1
 679              	.LVL53:
  32:src/menu.c    **** }
 680              		.loc 1 32 3 is_stmt 1 view .LVU203
  33:src/menu.c    **** 
 681              		.loc 1 33 1 is_stmt 0 view .LVU204
 682 0012 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE3:
 686              		.section	.text.set_menu,"ax",%progbits
 687              		.align	1
 688              		.p2align 2,,3
 689              		.global	set_menu
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu fpv4-sp-d16
 695              	set_menu:
 696              	.LVL54:
 697              	.LFB6:
  86:src/menu.c    ****   int m = current_menu;
 698              		.loc 1 86 32 is_stmt 1 view -0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 703              		.loc 1 87 3 view .LVU206
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 704              		.loc 1 87 7 is_stmt 0 view .LVU207
 705 0000 094A     		ldr	r2, .L63
 706 0002 1368     		ldr	r3, [r2]
 707              	.LVL55:
  88:src/menu.c    ****     current_menu = default_menu;
 708              		.loc 1 88 3 is_stmt 1 view .LVU208
  88:src/menu.c    ****     current_menu = default_menu;
 709              		.loc 1 88 6 is_stmt 0 view .LVU209
 710 0004 8342     		cmp	r3, r0
 711 0006 0AD0     		beq	.L62
  91:src/menu.c    ****     current_menu = last_menu;
 712              		.loc 1 91 8 is_stmt 1 view .LVU210
  91:src/menu.c    ****     current_menu = last_menu;
 713              		.loc 1 91 11 is_stmt 0 view .LVU211
 714 0008 411C     		adds	r1, r0, #1
  92:src/menu.c    ****   }
 715              		.loc 1 92 5 is_stmt 1 view .LVU212
  92:src/menu.c    ****   }
 716              		.loc 1 92 18 is_stmt 0 view .LVU213
 717 000a 09BF     		itett	eq
 718 000c 0749     		ldreq	r1, .L63+4
  95:src/menu.c    ****   }
 719              		.loc 1 95 18 view .LVU214
 720 000e 1060     		strne	r0, [r2]
  92:src/menu.c    ****   }
 721              		.loc 1 92 18 view .LVU215
 722 0010 0968     		ldreq	r1, [r1]
ARM GAS  /tmp/ccGGa0st.s 			page 24


 723 0012 1160     		streq	r1, [r2]
  95:src/menu.c    ****   }
 724              		.loc 1 95 5 is_stmt 1 view .LVU216
 725              	.L56:
  97:src/menu.c    **** }
 726              		.loc 1 97 3 view .LVU217
  97:src/menu.c    **** }
 727              		.loc 1 97 6 is_stmt 0 view .LVU218
 728 0014 092B     		cmp	r3, #9
  97:src/menu.c    **** }
 729              		.loc 1 97 15 is_stmt 1 view .LVU219
  97:src/menu.c    **** }
 730              		.loc 1 97 25 is_stmt 0 view .LVU220
 731 0016 1CBF     		itt	ne
 732 0018 044A     		ldrne	r2, .L63+4
 733 001a 1360     		strne	r3, [r2]
  98:src/menu.c    **** 
 734              		.loc 1 98 1 view .LVU221
 735 001c 7047     		bx	lr
 736              	.L62:
  89:src/menu.c    ****   }
 737              		.loc 1 89 5 is_stmt 1 view .LVU222
  89:src/menu.c    ****   }
 738              		.loc 1 89 18 is_stmt 0 view .LVU223
 739 001e 0449     		ldr	r1, .L63+8
 740 0020 0968     		ldr	r1, [r1]
 741 0022 1160     		str	r1, [r2]
 742 0024 F6E7     		b	.L56
 743              	.L64:
 744 0026 00BF     		.align	2
 745              	.L63:
 746 0028 00000000 		.word	.LANCHOR1
 747 002c 00000000 		.word	.LANCHOR3
 748 0030 00000000 		.word	.LANCHOR2
 749              		.cfi_endproc
 750              	.LFE6:
 752              		.section	.text.toggle_default_menu,"ax",%progbits
 753              		.align	1
 754              		.p2align 2,,3
 755              		.global	toggle_default_menu
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 759              		.fpu fpv4-sp-d16
 761              	toggle_default_menu:
 762              	.LFB7:
 100:src/menu.c    ****   if (current_menu == default_menu) {
 763              		.loc 1 100 29 is_stmt 1 view -0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767              		@ link register save eliminated.
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 768              		.loc 1 101 3 view .LVU225
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 769              		.loc 1 101 20 is_stmt 0 view .LVU226
 770 0000 0549     		ldr	r1, .L67
ARM GAS  /tmp/ccGGa0st.s 			page 25


 771 0002 064A     		ldr	r2, .L67+4
 772 0004 0868     		ldr	r0, [r1]
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 773              		.loc 1 101 6 view .LVU227
 774 0006 1368     		ldr	r3, [r2]
 775 0008 8342     		cmp	r3, r0
 776 000a 03D1     		bne	.L65
 102:src/menu.c    ****   }
 777              		.loc 1 102 5 is_stmt 1 view .LVU228
 102:src/menu.c    ****   }
 778              		.loc 1 102 38 is_stmt 0 view .LVU229
 779 000c C3F10F03 		rsb	r3, r3, #15
 102:src/menu.c    ****   }
 780              		.loc 1 102 33 view .LVU230
 781 0010 0B60     		str	r3, [r1]
 102:src/menu.c    ****   }
 782              		.loc 1 102 18 view .LVU231
 783 0012 1360     		str	r3, [r2]
 784              	.L65:
 104:src/menu.c    **** 
 785              		.loc 1 104 1 view .LVU232
 786 0014 7047     		bx	lr
 787              	.L68:
 788 0016 00BF     		.align	2
 789              	.L67:
 790 0018 00000000 		.word	.LANCHOR2
 791 001c 00000000 		.word	.LANCHOR1
 792              		.cfi_endproc
 793              	.LFE7:
 795              		.section	.text.get_menu,"ax",%progbits
 796              		.align	1
 797              		.p2align 2,,3
 798              		.global	get_menu
 799              		.syntax unified
 800              		.thumb
 801              		.thumb_func
 802              		.fpu fpv4-sp-d16
 804              	get_menu:
 805              	.LFB8:
 106:src/menu.c    ****   return current_menu;
 806              		.loc 1 106 17 is_stmt 1 view -0
 807              		.cfi_startproc
 808              		@ args = 0, pretend = 0, frame = 0
 809              		@ frame_needed = 0, uses_anonymous_args = 0
 810              		@ link register save eliminated.
 107:src/menu.c    **** }
 811              		.loc 1 107 3 view .LVU234
 107:src/menu.c    **** }
 812              		.loc 1 107 10 is_stmt 0 view .LVU235
 813 0000 014B     		ldr	r3, .L70
 108:src/menu.c    **** 
 814              		.loc 1 108 1 view .LVU236
 815 0002 1868     		ldr	r0, [r3]
 816 0004 7047     		bx	lr
 817              	.L71:
 818 0006 00BF     		.align	2
 819              	.L70:
ARM GAS  /tmp/ccGGa0st.s 			page 26


 820 0008 00000000 		.word	.LANCHOR1
 821              		.cfi_endproc
 822              	.LFE8:
 824              		.section	.text.set_last_menu,"ax",%progbits
 825              		.align	1
 826              		.p2align 2,,3
 827              		.global	set_last_menu
 828              		.syntax unified
 829              		.thumb
 830              		.thumb_func
 831              		.fpu fpv4-sp-d16
 833              	set_last_menu:
 834              	.LFB10:
 114:src/menu.c    ****   set_menu (last_menu);
 835              		.loc 1 114 23 is_stmt 1 view -0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 839              		@ link register save eliminated.
 115:src/menu.c    **** }
 840              		.loc 1 115 3 view .LVU238
 841 0000 0649     		ldr	r1, .L80
 842              	.LBB61:
 843              	.LBB62:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 844              		.loc 1 87 7 is_stmt 0 view .LVU239
 845 0002 074A     		ldr	r2, .L80+4
 846              	.LBE62:
 847              	.LBE61:
 115:src/menu.c    **** }
 848              		.loc 1 115 3 view .LVU240
 849 0004 0868     		ldr	r0, [r1]
 850              	.LVL56:
 851              	.LBB64:
 852              	.LBI61:
  86:src/menu.c    ****   int m = current_menu;
 853              		.loc 1 86 6 is_stmt 1 view .LVU241
 854              	.LBB63:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 855              		.loc 1 87 3 view .LVU242
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 856              		.loc 1 87 7 is_stmt 0 view .LVU243
 857 0006 1368     		ldr	r3, [r2]
 858              	.LVL57:
  88:src/menu.c    ****     current_menu = default_menu;
 859              		.loc 1 88 3 is_stmt 1 view .LVU244
  88:src/menu.c    ****     current_menu = default_menu;
 860              		.loc 1 88 6 is_stmt 0 view .LVU245
 861 0008 9842     		cmp	r0, r3
  89:src/menu.c    ****   }
 862              		.loc 1 89 5 is_stmt 1 view .LVU246
  89:src/menu.c    ****   }
 863              		.loc 1 89 18 is_stmt 0 view .LVU247
 864 000a 04BF     		itt	eq
 865 000c 0548     		ldreq	r0, .L80+8
 866              	.LVL58:
  89:src/menu.c    ****   }
ARM GAS  /tmp/ccGGa0st.s 			page 27


 867              		.loc 1 89 18 view .LVU248
 868 000e 0068     		ldreq	r0, [r0]
  91:src/menu.c    ****     current_menu = last_menu;
 869              		.loc 1 91 8 is_stmt 1 view .LVU249
  95:src/menu.c    ****   }
 870              		.loc 1 95 18 is_stmt 0 view .LVU250
 871 0010 1060     		str	r0, [r2]
  97:src/menu.c    **** }
 872              		.loc 1 97 3 is_stmt 1 view .LVU251
  97:src/menu.c    **** }
 873              		.loc 1 97 6 is_stmt 0 view .LVU252
 874 0012 092B     		cmp	r3, #9
  97:src/menu.c    **** }
 875              		.loc 1 97 15 is_stmt 1 view .LVU253
  97:src/menu.c    **** }
 876              		.loc 1 97 25 is_stmt 0 view .LVU254
 877 0014 18BF     		it	ne
 878 0016 0B60     		strne	r3, [r1]
 879              	.LVL59:
  97:src/menu.c    **** }
 880              		.loc 1 97 25 view .LVU255
 881              	.LBE63:
 882              	.LBE64:
 116:src/menu.c    **** 
 883              		.loc 1 116 1 view .LVU256
 884 0018 7047     		bx	lr
 885              	.L81:
 886 001a 00BF     		.align	2
 887              	.L80:
 888 001c 00000000 		.word	.LANCHOR3
 889 0020 00000000 		.word	.LANCHOR1
 890 0024 00000000 		.word	.LANCHOR2
 891              		.cfi_endproc
 892              	.LFE10:
 894              		.section	.text.mdot,"ax",%progbits
 895              		.align	1
 896              		.p2align 2,,3
 897              		.global	mdot
 898              		.syntax unified
 899              		.thumb
 900              		.thumb_func
 901              		.fpu fpv4-sp-d16
 903              	mdot:
 904              	.LVL60:
 905              	.LFB12:
 400:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 906              		.loc 1 400 40 is_stmt 1 view -0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910              		@ link register save eliminated.
 401:src/menu.c    ****   if (on) {
 911              		.loc 1 401 3 view .LVU258
 401:src/menu.c    ****   if (on) {
 912              		.loc 1 401 6 is_stmt 0 view .LVU259
 913 0000 C728     		cmp	r0, #199
 914 0002 1AD8     		bhi	.L86
ARM GAS  /tmp/ccGGa0st.s 			page 28


 915              	.LVL61:
 916              	.LBB67:
 917              	.LBI67:
 400:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 918              		.loc 1 400 6 is_stmt 1 view .LVU260
 919              	.LBB68:
 402:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 920              		.loc 1 402 3 view .LVU261
 921              	.LBE68:
 922              	.LBE67:
 400:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 923              		.loc 1 400 40 is_stmt 0 view .LVU262
 924 0004 10B4     		push	{r4}
 925              		.cfi_def_cfa_offset 4
 926              		.cfi_offset 4, -4
 927              	.LBB71:
 928              	.LBB69:
 402:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 929              		.loc 1 402 6 view .LVU263
 930 0006 63B9     		cbnz	r3, .L89
 931              		.loc 1 406 5 is_stmt 1 view .LVU264
 932              		.loc 1 406 17 is_stmt 0 view .LVU265
 933 0008 0C4B     		ldr	r3, .L90
 934              	.LVL62:
 935              		.loc 1 406 17 view .LVU266
 936 000a 03EB4000 		add	r0, r3, r0, lsl #1
 937              	.LVL63:
 938              		.loc 1 406 25 view .LVU267
 939 000e 0124     		movs	r4, #1
 940              		.loc 1 406 17 view .LVU268
 941 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 942              		.loc 1 406 25 view .LVU269
 943 0012 04FA01F1 		lsl	r1, r4, r1
 944              	.LVL64:
 945              		.loc 1 406 17 view .LVU270
 946 0016 23EA0101 		bic	r1, r3, r1
 947 001a 8154     		strb	r1, [r0, r2]
 948              	.LVL65:
 949              		.loc 1 406 17 view .LVU271
 950              	.LBE69:
 951              	.LBE71:
 407:src/menu.c    ****   }
 408:src/menu.c    **** }
 952              		.loc 1 408 1 view .LVU272
 953 001c 5DF8044B 		ldr	r4, [sp], #4
 954              		.cfi_remember_state
 955              		.cfi_restore 4
 956              		.cfi_def_cfa_offset 0
 957 0020 7047     		bx	lr
 958              	.LVL66:
 959              	.L89:
 960              		.cfi_restore_state
 961              	.LBB72:
 962              	.LBB70:
 403:src/menu.c    ****   }
 963              		.loc 1 403 5 is_stmt 1 view .LVU273
 403:src/menu.c    ****   }
ARM GAS  /tmp/ccGGa0st.s 			page 29


 964              		.loc 1 403 17 is_stmt 0 view .LVU274
 965 0022 064B     		ldr	r3, .L90
 966              	.LVL67:
 403:src/menu.c    ****   }
 967              		.loc 1 403 17 view .LVU275
 968 0024 03EB4000 		add	r0, r3, r0, lsl #1
 969              	.LVL68:
 403:src/menu.c    ****   }
 970              		.loc 1 403 24 view .LVU276
 971 0028 0124     		movs	r4, #1
 403:src/menu.c    ****   }
 972              		.loc 1 403 17 view .LVU277
 973 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 403:src/menu.c    ****   }
 974              		.loc 1 403 24 view .LVU278
 975 002c 04FA01F1 		lsl	r1, r4, r1
 976              	.LVL69:
 403:src/menu.c    ****   }
 977              		.loc 1 403 17 view .LVU279
 978 0030 1943     		orrs	r1, r1, r3
 979 0032 8154     		strb	r1, [r0, r2]
 980              	.LBE70:
 981              	.LBE72:
 982              		.loc 1 408 1 view .LVU280
 983 0034 5DF8044B 		ldr	r4, [sp], #4
 984              		.cfi_restore 4
 985              		.cfi_def_cfa_offset 0
 986 0038 7047     		bx	lr
 987              	.LVL70:
 988              	.L86:
 989              		.loc 1 408 1 view .LVU281
 990 003a 7047     		bx	lr
 991              	.L91:
 992              		.align	2
 993              	.L90:
 994 003c 00000000 		.word	.LANCHOR0
 995              		.cfi_endproc
 996              	.LFE12:
 998              		.section	.text.display_menu,"ax",%progbits
 999              		.align	1
 1000              		.p2align 2,,3
 1001              		.global	display_menu
 1002              		.syntax unified
 1003              		.thumb
 1004              		.thumb_func
 1005              		.fpu fpv4-sp-d16
 1007              	display_menu:
 1008              	.LVL71:
 1009              	.LFB13:
 409:src/menu.c    **** 
 410:src/menu.c    **** 
 411:src/menu.c    **** void display_menu (int current_menu) {
 1010              		.loc 1 411 38 is_stmt 1 view -0
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 0
 1013              		@ frame_needed = 0, uses_anonymous_args = 0
 412:src/menu.c    ****   int len = 0;
ARM GAS  /tmp/ccGGa0st.s 			page 30


 1014              		.loc 1 412 3 view .LVU283
 413:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1015              		.loc 1 413 3 view .LVU284
 411:src/menu.c    ****   int len = 0;
 1016              		.loc 1 411 38 is_stmt 0 view .LVU285
 1017 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1018              		.cfi_def_cfa_offset 36
 1019              		.cfi_offset 4, -36
 1020              		.cfi_offset 5, -32
 1021              		.cfi_offset 6, -28
 1022              		.cfi_offset 7, -24
 1023              		.cfi_offset 8, -20
 1024              		.cfi_offset 9, -16
 1025              		.cfi_offset 10, -12
 1026              		.cfi_offset 11, -8
 1027              		.cfi_offset 14, -4
 1028 0004 83B0     		sub	sp, sp, #12
 1029              		.cfi_def_cfa_offset 48
 1030              		.loc 1 413 3 view .LVU286
 1031 0006 0024     		movs	r4, #0
 1032 0008 404F     		ldr	r7, .L110
 1033 000a 0094     		str	r4, [sp]
 1034 000c 3423     		movs	r3, #52
 1035 000e 4FF4C872 		mov	r2, #400
 1036 0012 BC21     		movs	r1, #188
 411:src/menu.c    ****   int len = 0;
 1037              		.loc 1 411 38 view .LVU287
 1038 0014 0646     		mov	r6, r0
 1039              		.loc 1 413 3 view .LVU288
 1040 0016 2046     		mov	r0, r4
 1041              	.LVL72:
 1042              		.loc 1 413 3 view .LVU289
 1043 0018 B847     		blx	r7
 1044              	.LVL73:
 414:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1045              		.loc 1 414 3 is_stmt 1 view .LVU290
 1046 001a 3D4D     		ldr	r5, .L110+4
 1047 001c FF23     		movs	r3, #255
 1048 001e 0093     		str	r3, [sp]
 1049 0020 4FF4C872 		mov	r2, #400
 1050 0024 0123     		movs	r3, #1
 1051 0026 BC21     		movs	r1, #188
 1052 0028 2046     		mov	r0, r4
 1053 002a B847     		blx	r7
 1054              	.LVL74:
 415:src/menu.c    ****   //Clear previous menu
 416:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1055              		.loc 1 416 3 view .LVU291
 1056              	.LBB73:
 1057              		.loc 1 416 8 view .LVU292
 1058              		.loc 1 416 21 view .LVU293
 417:src/menu.c    ****     mdots[col][0] = 0;
 1059              		.loc 1 417 19 is_stmt 0 view .LVU294
 1060 002c 2246     		mov	r2, r4
 1061 002e 05F5C871 		add	r1, r5, #400
 1062              	.LBE73:
 414:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
ARM GAS  /tmp/ccGGa0st.s 			page 31


 1063              		.loc 1 414 3 view .LVU295
 1064 0032 2B46     		mov	r3, r5
 1065              	.LVL75:
 1066              	.L93:
 1067              	.LBB74:
 1068              		.loc 1 417 5 is_stmt 1 discriminator 3 view .LVU296
 1069              		.loc 1 417 19 is_stmt 0 discriminator 3 view .LVU297
 1070 0034 1A70     		strb	r2, [r3]
 418:src/menu.c    ****     mdots[col][1] = 0;
 1071              		.loc 1 418 5 is_stmt 1 discriminator 3 view .LVU298
 1072              		.loc 1 418 19 is_stmt 0 discriminator 3 view .LVU299
 1073 0036 5A70     		strb	r2, [r3, #1]
 416:src/menu.c    ****     mdots[col][0] = 0;
 1074              		.loc 1 416 32 is_stmt 1 discriminator 3 view .LVU300
 416:src/menu.c    ****     mdots[col][0] = 0;
 1075              		.loc 1 416 21 discriminator 3 view .LVU301
 1076 0038 0233     		adds	r3, r3, #2
 416:src/menu.c    ****     mdots[col][0] = 0;
 1077              		.loc 1 416 3 is_stmt 0 discriminator 3 view .LVU302
 1078 003a 9942     		cmp	r1, r3
 1079 003c FAD1     		bne	.L93
 1080 003e 354B     		ldr	r3, .L110+8
 1081 0040 D022     		movs	r2, #208
 1082 0042 02FB0636 		mla	r6, r2, r6, r3
 1083              	.LVL76:
 416:src/menu.c    ****     mdots[col][0] = 0;
 1084              		.loc 1 416 3 discriminator 3 view .LVU303
 1085 0046 2036     		adds	r6, r6, #32
 416:src/menu.c    ****     mdots[col][0] = 0;
 1086              		.loc 1 416 3 view .LVU304
 1087 0048 0024     		movs	r4, #0
 1088              	.LVL77:
 1089              	.L94:
 416:src/menu.c    ****     mdots[col][0] = 0;
 1090              		.loc 1 416 3 view .LVU305
 1091              	.LBE74:
 1092              	.LBB75:
 419:src/menu.c    ****   }
 420:src/menu.c    **** 
 421:src/menu.c    ****   // Draw menu items
 422:src/menu.c    ****   // 
 423:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 424:src/menu.c    ****     /*
 425:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 426:src/menu.c    ****     */
 427:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 428:src/menu.c    ****     // Unshifted first
 429:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small fo
 1093              		.loc 1 429 5 is_stmt 1 view .LVU306
 1094              		.loc 1 429 11 is_stmt 0 view .LVU307
 1095 004a 0021     		movs	r1, #0
 1096 004c 3046     		mov	r0, r6
 1097 004e FFF7FEFF 		bl	pixel_length
 1098              	.LVL78:
 430:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 )
 1099              		.loc 1 430 5 is_stmt 1 view .LVU308
 1100              		.loc 1 430 87 is_stmt 0 view .LVU309
ARM GAS  /tmp/ccGGa0st.s 			page 32


 1101 0052 C0F12000 		rsb	r0, r0, #32
 1102              	.LVL79:
 1103              		.loc 1 430 93 view .LVU310
 1104 0056 00EBD070 		add	r0, r0, r0, lsr #31
 1105              		.loc 1 430 5 view .LVU311
 1106 005a 04EB6001 		add	r1, r4, r0, asr #1
 1107 005e 0022     		movs	r2, #0
 1108 0060 3046     		mov	r0, r6
 1109 0062 06F10807 		add	r7, r6, #8
 1110 0066 FFF7FEFF 		bl	set_menu_label.constprop.0
 1111              	.LVL80:
 431:src/menu.c    ****     // Now shifted ...	
 432:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small font
 1112              		.loc 1 432 5 is_stmt 1 view .LVU312
 1113              		.loc 1 432 11 is_stmt 0 view .LVU313
 1114 006a 0021     		movs	r1, #0
 1115 006c 3846     		mov	r0, r7
 1116 006e FFF7FEFF 		bl	pixel_length
 1117              	.LVL81:
 433:src/menu.c    ****     len = item*32 + (32-len)/2;
 1118              		.loc 1 433 5 is_stmt 1 view .LVU314
 1119              		.loc 1 433 24 is_stmt 0 view .LVU315
 1120 0072 C0F12000 		rsb	r0, r0, #32
 1121              	.LVL82:
 1122              		.loc 1 433 29 view .LVU316
 1123 0076 00EBD070 		add	r0, r0, r0, lsr #31
 1124              	.LVL83:
 434:src/menu.c    ****     if (len<0) len = 0;
 1125              		.loc 1 434 5 is_stmt 1 view .LVU317
 433:src/menu.c    ****     len = item*32 + (32-len)/2;
 1126              		.loc 1 433 9 is_stmt 0 view .LVU318
 1127 007a 04EB6001 		add	r1, r4, r0, asr #1
 1128              	.LVL84:
 433:src/menu.c    ****     len = item*32 + (32-len)/2;
 1129              		.loc 1 433 9 view .LVU319
 1130 007e C729     		cmp	r1, #199
 1131 0080 A8BF     		it	ge
 1132 0082 C721     		movge	r1, #199
 1133              	.LVL85:
 435:src/menu.c    ****     if (len>199) len = 199;
 436:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 1134              		.loc 1 436 5 is_stmt 1 view .LVU320
 1135 0084 21EAE171 		bic	r1, r1, r1, asr #31
 1136              	.LVL86:
 1137              		.loc 1 436 5 is_stmt 0 view .LVU321
 1138 0088 3846     		mov	r0, r7
 1139 008a 2034     		adds	r4, r4, #32
 1140 008c 0122     		movs	r2, #1
 1141 008e FFF7FEFF 		bl	set_menu_label.constprop.0
 1142              	.LVL87:
 423:src/menu.c    ****     /*
 1143              		.loc 1 423 32 is_stmt 1 view .LVU322
 423:src/menu.c    ****     /*
 1144              		.loc 1 423 22 view .LVU323
 423:src/menu.c    ****     /*
 1145              		.loc 1 423 3 is_stmt 0 view .LVU324
 1146 0092 C02C     		cmp	r4, #192
ARM GAS  /tmp/ccGGa0st.s 			page 33


 1147 0094 06F12006 		add	r6, r6, #32
 1148 0098 D7D1     		bne	.L94
 1149 009a 1F4E     		ldr	r6, .L110+12
 1150              	.LBE75:
 1151              	.LBB76:
 1152              	.LBB77:
 437:src/menu.c    ****   }
 438:src/menu.c    **** 
 439:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 440:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 441:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 442:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 443:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1153              		.loc 1 443 2 view .LVU325
 1154 009c DFF86C90 		ldr	r9, .L110
 1155 00a0 C5F1040A 		rsb	r10, r5, #4
 1156 00a4 06F5C47B 		add	fp, r6, #392
 1157              	.LBE77:
 1158              	.LBE76:
 1159              	.LBB79:
 423:src/menu.c    ****     /*
 1160              		.loc 1 423 3 view .LVU326
 1161 00a8 771E     		subs	r7, r6, #1
 1162              	.LBE79:
 1163              	.LBB80:
 1164              	.LBB78:
 1165              		.loc 1 443 2 view .LVU327
 1166 00aa 4FF0FF08 		mov	r8, #255
 1167              	.L95:
 1168              	.LVL88:
 440:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1169              		.loc 1 440 23 is_stmt 1 view .LVU328
 1170 00ae 0AEB0705 		add	r5, r10, r7
 440:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1171              		.loc 1 440 14 is_stmt 0 view .LVU329
 1172 00b2 0024     		movs	r4, #0
 1173              	.LVL89:
 1174              	.L98:
 441:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1175              		.loc 1 441 7 is_stmt 1 view .LVU330
 1176              		.loc 1 443 2 view .LVU331
 441:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1177              		.loc 1 441 22 is_stmt 0 view .LVU332
 1178 00b4 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 441:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1179              		.loc 1 441 40 view .LVU333
 1180 00b8 2241     		asrs	r2, r2, r4
 1181              		.loc 1 443 2 view .LVU334
 1182 00ba A4EB8401 		sub	r1, r4, r4, lsl #2
 1183 00be 0323     		movs	r3, #3
 441:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1184              		.loc 1 441 10 view .LVU335
 1185 00c0 12F0010F 		tst	r2, #1
 1186              		.loc 1 443 2 view .LVU336
 1187 00c4 01F1E901 		add	r1, r1, #233
 1188 00c8 1A46     		mov	r2, r3
 1189 00ca 2846     		mov	r0, r5
ARM GAS  /tmp/ccGGa0st.s 			page 34


 441:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1190              		.loc 1 441 10 view .LVU337
 1191 00cc 02D0     		beq	.L96
 1192              		.loc 1 443 2 view .LVU338
 1193 00ce CDF80080 		str	r8, [sp]
 1194 00d2 C847     		blx	r9
 1195              	.LVL90:
 1196              	.L96:
 444:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1197              		.loc 1 444 7 is_stmt 1 view .LVU339
 445:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 446:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1198              		.loc 1 446 2 view .LVU340
 444:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1199              		.loc 1 444 22 is_stmt 0 view .LVU341
 1200 00d4 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 444:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1201              		.loc 1 444 40 view .LVU342
 1202 00d6 2241     		asrs	r2, r2, r4
 1203              		.loc 1 446 2 view .LVU343
 1204 00d8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1205 00dc 0323     		movs	r3, #3
 444:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1206              		.loc 1 444 10 view .LVU344
 1207 00de 12F0010F 		tst	r2, #1
 1208              		.loc 1 446 2 view .LVU345
 1209 00e2 01F1D001 		add	r1, r1, #208
 1210 00e6 1A46     		mov	r2, r3
 1211 00e8 04F10104 		add	r4, r4, #1
 1212              	.LVL91:
 1213              		.loc 1 446 2 view .LVU346
 1214 00ec 2846     		mov	r0, r5
 444:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1215              		.loc 1 444 10 view .LVU347
 1216 00ee 02D0     		beq	.L97
 1217              		.loc 1 446 2 view .LVU348
 1218 00f0 CDF80080 		str	r8, [sp]
 1219 00f4 C847     		blx	r9
 1220              	.LVL92:
 1221              	.L97:
 440:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1222              		.loc 1 440 32 is_stmt 1 discriminator 2 view .LVU349
 440:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1223              		.loc 1 440 23 discriminator 2 view .LVU350
 440:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1224              		.loc 1 440 5 is_stmt 0 discriminator 2 view .LVU351
 1225 00f6 062C     		cmp	r4, #6
 1226 00f8 DCD1     		bne	.L98
 1227              	.LBE78:
 439:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1228              		.loc 1 439 32 is_stmt 1 discriminator 2 view .LVU352
 439:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1229              		.loc 1 439 21 discriminator 2 view .LVU353
 1230 00fa 0236     		adds	r6, r6, #2
 439:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1231              		.loc 1 439 3 is_stmt 0 discriminator 2 view .LVU354
 1232 00fc B345     		cmp	fp, r6
ARM GAS  /tmp/ccGGa0st.s 			page 35


 1233 00fe 07F10207 		add	r7, r7, #2
 1234 0102 D4D1     		bne	.L95
 1235              	.LBE80:
 447:src/menu.c    ****     }
 448:src/menu.c    ****   }
 449:src/menu.c    **** }
 1236              		.loc 1 449 1 view .LVU355
 1237 0104 03B0     		add	sp, sp, #12
 1238              		.cfi_def_cfa_offset 36
 1239              		@ sp needed
 1240 0106 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1241              	.LVL93:
 1242              	.L111:
 1243              		.loc 1 449 1 view .LVU356
 1244 010a 00BF     		.align	2
 1245              	.L110:
 1246 010c 3D020008 		.word	134218301
 1247 0110 00000000 		.word	.LANCHOR0
 1248 0114 00000000 		.word	.LANCHOR4
 1249 0118 01000000 		.word	.LANCHOR0+1
 1250              		.cfi_endproc
 1251              	.LFE13:
 1253              		.section	.text.display_current_menu,"ax",%progbits
 1254              		.align	1
 1255              		.p2align 2,,3
 1256              		.global	display_current_menu
 1257              		.syntax unified
 1258              		.thumb
 1259              		.thumb_func
 1260              		.fpu fpv4-sp-d16
 1262              	display_current_menu:
 1263              	.LFB9:
 110:src/menu.c    ****   display_menu (current_menu);
 1264              		.loc 1 110 30 is_stmt 1 view -0
 1265              		.cfi_startproc
 1266              		@ args = 0, pretend = 0, frame = 0
 1267              		@ frame_needed = 0, uses_anonymous_args = 0
 1268              		@ link register save eliminated.
 111:src/menu.c    **** }
 1269              		.loc 1 111 3 view .LVU358
 1270 0000 014B     		ldr	r3, .L113
 1271 0002 1868     		ldr	r0, [r3]
 1272 0004 FFF7FEBF 		b	display_menu
 1273              	.LVL94:
 1274              	.L114:
 1275              		.align	2
 1276              	.L113:
 1277 0008 00000000 		.word	.LANCHOR1
 1278              		.cfi_endproc
 1279              	.LFE9:
 1281              		.section	.text.all_menu_dots,"ax",%progbits
 1282              		.align	1
 1283              		.p2align 2,,3
 1284              		.global	all_menu_dots
 1285              		.syntax unified
 1286              		.thumb
 1287              		.thumb_func
ARM GAS  /tmp/ccGGa0st.s 			page 36


 1288              		.fpu fpv4-sp-d16
 1290              	all_menu_dots:
 1291              	.LFB14:
 450:src/menu.c    **** 
 451:src/menu.c    **** void all_menu_dots () {
 1292              		.loc 1 451 23 view -0
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 0
 1295              		@ frame_needed = 0, uses_anonymous_args = 0
 452:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1296              		.loc 1 452 3 view .LVU360
 1297              	.LBB81:
 1298              		.loc 1 452 8 view .LVU361
 1299              	.LVL95:
 1300              		.loc 1 452 21 view .LVU362
 1301              	.LBE81:
 451:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1302              		.loc 1 451 23 is_stmt 0 view .LVU363
 1303 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1304              		.cfi_def_cfa_offset 20
 1305              		.cfi_offset 4, -20
 1306              		.cfi_offset 5, -16
 1307              		.cfi_offset 6, -12
 1308              		.cfi_offset 7, -8
 1309              		.cfi_offset 14, -4
 1310              	.LBB85:
 1311              	.LBB82:
 453:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 454:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1312              		.loc 1 454 2 view .LVU364
 1313 0002 0D4E     		ldr	r6, .L121
 1314              	.LBE82:
 1315              	.LBE85:
 451:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1316              		.loc 1 451 23 view .LVU365
 1317 0004 83B0     		sub	sp, sp, #12
 1318              		.cfi_def_cfa_offset 32
 451:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1319              		.loc 1 451 23 view .LVU366
 1320 0006 0025     		movs	r5, #0
 1321              	.LBB86:
 1322              	.LBB83:
 1323              		.loc 1 454 2 view .LVU367
 1324 0008 FF27     		movs	r7, #255
 1325              	.LVL96:
 1326              	.L116:
 453:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1327              		.loc 1 453 23 is_stmt 1 view .LVU368
 1328              	.LBE83:
 1329              	.LBE86:
 451:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1330              		.loc 1 451 23 is_stmt 0 view .LVU369
 1331 000a E924     		movs	r4, #233
 1332              	.LVL97:
 1333              	.L117:
 1334              	.LBB87:
 1335              	.LBB84:
ARM GAS  /tmp/ccGGa0st.s 			page 37


 1336              		.loc 1 454 2 is_stmt 1 discriminator 3 view .LVU370
 1337 000c 0323     		movs	r3, #3
 1338 000e 1A46     		mov	r2, r3
 1339 0010 2146     		mov	r1, r4
 1340 0012 2846     		mov	r0, r5
 1341 0014 0097     		str	r7, [sp]
 1342 0016 B047     		blx	r6
 1343              	.LVL98:
 455:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1344              		.loc 1 455 2 discriminator 3 view .LVU371
 1345 0018 0323     		movs	r3, #3
 1346 001a A4F11901 		sub	r1, r4, #25
 1347 001e 0097     		str	r7, [sp]
 1348 0020 1A46     		mov	r2, r3
 1349 0022 2846     		mov	r0, r5
 1350 0024 033C     		subs	r4, r4, #3
 1351 0026 B047     		blx	r6
 1352              	.LVL99:
 453:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1353              		.loc 1 453 32 discriminator 3 view .LVU372
 453:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1354              		.loc 1 453 23 discriminator 3 view .LVU373
 453:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1355              		.loc 1 453 5 is_stmt 0 discriminator 3 view .LVU374
 1356 0028 D72C     		cmp	r4, #215
 1357 002a EFD1     		bne	.L117
 1358              	.LBE84:
 452:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1359              		.loc 1 452 32 is_stmt 1 discriminator 2 view .LVU375
 452:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1360              		.loc 1 452 21 discriminator 2 view .LVU376
 1361 002c 0235     		adds	r5, r5, #2
 452:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1362              		.loc 1 452 3 is_stmt 0 discriminator 2 view .LVU377
 1363 002e B5F5C87F 		cmp	r5, #400
 1364 0032 EAD1     		bne	.L116
 1365              	.LBE87:
 456:src/menu.c    ****     }
 457:src/menu.c    ****   }
 458:src/menu.c    **** }  
 1366              		.loc 1 458 1 view .LVU378
 1367 0034 03B0     		add	sp, sp, #12
 1368              		.cfi_def_cfa_offset 20
 1369              		@ sp needed
 1370 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1371              	.L122:
 1372              		.align	2
 1373              	.L121:
 1374 0038 3D020008 		.word	134218301
 1375              		.cfi_endproc
 1376              	.LFE14:
 1378              		.section	.text.shutdown,"ax",%progbits
 1379              		.align	1
 1380              		.p2align 2,,3
 1381              		.global	shutdown
 1382              		.syntax unified
 1383              		.thumb
ARM GAS  /tmp/ccGGa0st.s 			page 38


 1384              		.thumb_func
 1385              		.fpu fpv4-sp-d16
 1387              	shutdown:
 1388              	.LFB16:
 1389              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  46:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  47:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  48:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  49:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  50:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  51:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  52:src/console.c **** 
ARM GAS  /tmp/ccGGa0st.s 			page 39


  53:src/console.c **** static struct _ndmap remap (const int c) {
  54:src/console.c **** 
  55:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  56:src/console.c **** 
  57:src/console.c **** #include "keytran.c"
  58:src/console.c **** 
  59:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  60:src/console.c **** 
  61:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  62:src/console.c **** 
  63:src/console.c ****   if (c == 44 ) {
  64:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  65:src/console.c ****     return sshot;
  66:src/console.c ****   }
  67:src/console.c ****   
  68:src/console.c ****   if ( get_alpha_state() ) {
  69:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  70:src/console.c ****       switch (cur_shift()) { 
  71:src/console.c ****       case SHIFT_N:
  72:src/console.c **** 	return mapping_none[c]; // N -> F
  73:src/console.c **** 	break;
  74:src/console.c ****       case SHIFT_F:
  75:src/console.c **** 	return mapping_fshift[c]; // F -> G
  76:src/console.c **** 	break;
  77:src/console.c ****       case SHIFT_G:
  78:src/console.c **** 	return h_shift; // G -> H
  79:src/console.c **** 	break;
  80:src/console.c ****       case SHIFT_H:
  81:src/console.c **** 	return h_shift; // H -> N
  82:src/console.c ****       default:
  83:src/console.c **** 	return no_change;
  84:src/console.c ****       }
  85:src/console.c ****     }
  86:src/console.c ****     return mapping_alpha [c];
  87:src/console.c ****   }
  88:src/console.c **** 
  89:src/console.c ****   if (Running | Pause) {
  90:src/console.c ****     return mapping_running[c];
  91:src/console.c ****   }
  92:src/console.c ****   
  93:src/console.c ****   switch (c) {
  94:src/console.c ****   case KEY_F1:
  95:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
  96:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
  97:src/console.c ****   case KEY_F2:
  98:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
  99:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 100:src/console.c ****   case KEY_F3:
 101:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 102:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 103:src/console.c ****   case KEY_F4:
 104:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 105:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 106:src/console.c ****   case KEY_F5:
 107:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 109:src/console.c ****   case KEY_F6:
ARM GAS  /tmp/ccGGa0st.s 			page 40


 110:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 112:src/console.c ****   }
 113:src/console.c ****   
 114:src/console.c ****   switch (cur_shift()) {
 115:src/console.c ****   case SHIFT_N:    
 116:src/console.c ****     return mapping_none[c];
 117:src/console.c ****     break;
 118:src/console.c ****   case SHIFT_F:
 119:src/console.c ****     return mapping_fshift[c];
 120:src/console.c ****     break;
 121:src/console.c ****   case SHIFT_G:
 122:src/console.c ****     return mapping_gshift[c];
 123:src/console.c ****     break;
 124:src/console.c ****   default:
 125:src/console.c ****     return no_change;
 126:src/console.c ****   }
 127:src/console.c **** }
 128:src/console.c **** 
 129:src/console.c **** #endif
 130:src/console.c **** 
 131:src/console.c **** void shutdown( void )
 132:src/console.c **** {
 1390              		.loc 2 132 1 is_stmt 1 view -0
 1391              		.cfi_startproc
 1392              		@ args = 0, pretend = 0, frame = 0
 1393              		@ frame_needed = 0, uses_anonymous_args = 0
 1394              		@ link register save eliminated.
 133:src/console.c **** #ifndef DM42
 134:src/console.c ****   checksum_all();
 135:src/console.c ****   setuptty( 1 );
 136:src/console.c ****   save_statefile( NULL );
 137:src/console.c ****   exit( 0 );
 138:src/console.c **** #else
 139:src/console.c ****   //  save_ram_file(0);
 140:src/console.c ****   SET_ST(STAT_PGM_END);
 1395              		.loc 2 140 3 view .LVU380
 1396 0000 024A     		ldr	r2, .L124
 1397 0002 1368     		ldr	r3, [r2]
 1398 0004 43F40073 		orr	r3, r3, #512
 1399 0008 1360     		str	r3, [r2]
 141:src/console.c **** #endif
 142:src/console.c **** }
 1400              		.loc 2 142 1 is_stmt 0 view .LVU381
 1401 000a 7047     		bx	lr
 1402              	.L125:
 1403              		.align	2
 1404              	.L124:
 1405 000c 00200010 		.word	268443648
 1406              		.cfi_endproc
 1407              	.LFE16:
 1409              		.section	.text.is_key_pressed,"ax",%progbits
 1410              		.align	1
 1411              		.p2align 2,,3
 1412              		.global	is_key_pressed
 1413              		.syntax unified
 1414              		.thumb
ARM GAS  /tmp/ccGGa0st.s 			page 41


 1415              		.thumb_func
 1416              		.fpu fpv4-sp-d16
 1418              	is_key_pressed:
 1419              	.LFB17:
 143:src/console.c **** 
 144:src/console.c **** 
 145:src/console.c **** /*
 146:src/console.c ****  *  Dummies
 147:src/console.c ****  */
 148:src/console.c **** int is_key_pressed(void) 
 149:src/console.c **** {
 1420              		.loc 2 149 1 is_stmt 1 view -0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 0
 1423              		@ frame_needed = 0, uses_anonymous_args = 0
 150:src/console.c **** #ifdef DM42
 151:src/console.c ****   return !key_empty();
 1424              		.loc 2 151 3 view .LVU383
 149:src/console.c **** #ifdef DM42
 1425              		.loc 2 149 1 is_stmt 0 view .LVU384
 1426 0000 08B5     		push	{r3, lr}
 1427              		.cfi_def_cfa_offset 8
 1428              		.cfi_offset 3, -8
 1429              		.cfi_offset 14, -4
 1430              		.loc 2 151 11 view .LVU385
 1431 0002 034B     		ldr	r3, .L128
 1432 0004 9847     		blx	r3
 1433              	.LVL100:
 152:src/console.c **** #else
 153:src/console.c ****   return 0;
 154:src/console.c **** #endif
 155:src/console.c **** }
 1434              		.loc 2 155 1 view .LVU386
 1435 0006 B0FA80F0 		clz	r0, r0
 1436 000a 4009     		lsrs	r0, r0, #5
 1437 000c 08BD     		pop	{r3, pc}
 1438              	.L129:
 1439 000e 00BF     		.align	2
 1440              	.L128:
 1441 0010 7D030008 		.word	134218621
 1442              		.cfi_endproc
 1443              	.LFE17:
 1445              		.section	.text.get_key,"ax",%progbits
 1446              		.align	1
 1447              		.p2align 2,,3
 1448              		.global	get_key
 1449              		.syntax unified
 1450              		.thumb
 1451              		.thumb_func
 1452              		.fpu fpv4-sp-d16
 1454              	get_key:
 1455              	.LFB18:
 156:src/console.c **** 
 157:src/console.c **** int get_key(void)
 158:src/console.c **** {
 1456              		.loc 2 158 1 is_stmt 1 view -0
 1457              		.cfi_startproc
ARM GAS  /tmp/ccGGa0st.s 			page 42


 1458              		@ args = 0, pretend = 0, frame = 0
 1459              		@ frame_needed = 0, uses_anonymous_args = 0
 1460              		@ link register save eliminated.
 159:src/console.c ****   #ifdef DM42
 160:src/console.c ****   return key_pop();
 1461              		.loc 2 160 3 view .LVU388
 1462              		.loc 2 160 10 is_stmt 0 view .LVU389
 1463 0000 004B     		ldr	r3, .L131
 1464 0002 1847     		bx	r3
 1465              	.LVL101:
 1466              	.L132:
 1467              		.align	2
 1468              	.L131:
 1469 0004 89030008 		.word	134218633
 1470              		.cfi_endproc
 1471              	.LFE18:
 1473              		.section	.text.put_key,"ax",%progbits
 1474              		.align	1
 1475              		.p2align 2,,3
 1476              		.global	put_key
 1477              		.syntax unified
 1478              		.thumb
 1479              		.thumb_func
 1480              		.fpu fpv4-sp-d16
 1482              	put_key:
 1483              	.LVL102:
 1484              	.LFB19:
 161:src/console.c ****   #else
 162:src/console.c ****   return 0;
 163:src/console.c ****   #endif
 164:src/console.c **** }
 165:src/console.c **** 
 166:src/console.c **** /*
 167:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 168:src/console.c ****  * 
 169:src/console.c ****  */
 170:src/console.c **** int put_key( int k )
 171:src/console.c **** {
 1485              		.loc 2 171 1 is_stmt 1 view -0
 1486              		.cfi_startproc
 1487              		@ args = 0, pretend = 0, frame = 48
 1488              		@ frame_needed = 0, uses_anonymous_args = 0
 1489              		@ link register save eliminated.
 172:src/console.c ****   #ifdef DM42
 173:src/console.c ****   const char wp34s_to_DM42[] = {
 1490              		.loc 2 173 3 view .LVU391
 171:src/console.c ****   #ifdef DM42
 1491              		.loc 2 171 1 is_stmt 0 view .LVU392
 1492 0000 70B4     		push	{r4, r5, r6}
 1493              		.cfi_def_cfa_offset 12
 1494              		.cfi_offset 4, -12
 1495              		.cfi_offset 5, -8
 1496              		.cfi_offset 6, -4
 1497              		.loc 2 173 14 view .LVU393
 1498 0002 0E4D     		ldr	r5, .L136
 171:src/console.c ****   #ifdef DM42
 1499              		.loc 2 171 1 view .LVU394
ARM GAS  /tmp/ccGGa0st.s 			page 43


 1500 0004 0646     		mov	r6, r0
 1501              		.loc 2 173 14 view .LVU395
 1502 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1503              	.LVL103:
 171:src/console.c ****   #ifdef DM42
 1504              		.loc 2 171 1 view .LVU396
 1505 0008 8DB0     		sub	sp, sp, #52
 1506              		.cfi_def_cfa_offset 64
 1507              		.loc 2 173 14 view .LVU397
 1508 000a 01AC     		add	r4, sp, #4
 1509 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1510 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1511 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1512 0012 95E80700 		ldm	r5, {r0, r1, r2}
 1513 0016 03C4     		stmia	r4!, {r0, r1}
 174:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 175:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 176:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 177:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 178:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 179:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 180:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 181:src/console.c ****   
 182:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 1514              		.loc 2 182 6 view .LVU398
 1515 0018 282E     		cmp	r6, #40
 173:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 1516              		.loc 2 173 14 view .LVU399
 1517 001a 2270     		strb	r2, [r4]
 1518              		.loc 2 182 3 is_stmt 1 view .LVU400
 1519              		.loc 2 182 6 is_stmt 0 view .LVU401
 1520 001c 08D8     		bhi	.L134
 183:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 1521              		.loc 2 183 5 is_stmt 1 view .LVU402
 1522              		.loc 2 183 36 is_stmt 0 view .LVU403
 1523 001e 0CAB     		add	r3, sp, #48
 1524 0020 3046     		mov	r0, r6
 1525 0022 1844     		add	r0, r0, r3
 1526              		.loc 2 183 12 view .LVU404
 1527 0024 064B     		ldr	r3, .L136+4
 1528 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 184:src/console.c ****   }
 185:src/console.c ****   else {
 186:src/console.c ****     return -1;
 187:src/console.c ****   }
 188:src/console.c ****   #else
 189:src/console.c ****   return k;
 190:src/console.c ****   #endif
 191:src/console.c **** }
 1529              		.loc 2 191 1 view .LVU405
 1530 002a 0DB0     		add	sp, sp, #52
 1531              		.cfi_remember_state
 1532              		.cfi_def_cfa_offset 12
 1533              		@ sp needed
 1534 002c 70BC     		pop	{r4, r5, r6}
 1535              		.cfi_restore 6
 1536              		.cfi_restore 5
ARM GAS  /tmp/ccGGa0st.s 			page 44


 1537              		.cfi_restore 4
 1538              		.cfi_def_cfa_offset 0
 1539              	.LVL104:
 183:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 1540              		.loc 2 183 12 view .LVU406
 1541 002e 1847     		bx	r3
 1542              	.LVL105:
 1543              	.L134:
 1544              		.cfi_restore_state
 1545              		.loc 2 191 1 view .LVU407
 1546 0030 4FF0FF30 		mov	r0, #-1
 1547 0034 0DB0     		add	sp, sp, #52
 1548              		.cfi_def_cfa_offset 12
 1549              		@ sp needed
 1550 0036 70BC     		pop	{r4, r5, r6}
 1551              		.cfi_restore 6
 1552              		.cfi_restore 5
 1553              		.cfi_restore 4
 1554              		.cfi_def_cfa_offset 0
 1555              	.LVL106:
 1556              		.loc 2 191 1 view .LVU408
 1557 0038 7047     		bx	lr
 1558              	.L137:
 1559 003a 00BF     		.align	2
 1560              	.L136:
 1561 003c 00000000 		.word	.LANCHOR5
 1562 0040 81030008 		.word	134218625
 1563              		.cfi_endproc
 1564              	.LFE19:
 1566              		.section	.text.shift_down,"ax",%progbits
 1567              		.align	1
 1568              		.p2align 2,,3
 1569              		.global	shift_down
 1570              		.syntax unified
 1571              		.thumb
 1572              		.thumb_func
 1573              		.fpu fpv4-sp-d16
 1575              	shift_down:
 1576              	.LFB20:
 192:src/console.c **** 
 193:src/console.c **** enum shifts shift_down(void)
 194:src/console.c **** {
 1577              		.loc 2 194 1 is_stmt 1 view -0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 0
 1580              		@ frame_needed = 0, uses_anonymous_args = 0
 1581              		@ link register save eliminated.
 195:src/console.c **** 	return SHIFT_N;
 1582              		.loc 2 195 2 view .LVU410
 196:src/console.c **** }
 1583              		.loc 2 196 1 is_stmt 0 view .LVU411
 1584 0000 0020     		movs	r0, #0
 1585 0002 7047     		bx	lr
 1586              		.cfi_endproc
 1587              	.LFE20:
 1589              		.section	.text.start_key_timer,"ax",%progbits
 1590              		.align	1
ARM GAS  /tmp/ccGGa0st.s 			page 45


 1591              		.p2align 2,,3
 1592              		.global	start_key_timer
 1593              		.syntax unified
 1594              		.thumb
 1595              		.thumb_func
 1596              		.fpu fpv4-sp-d16
 1598              	start_key_timer:
 1599              	.LFB21:
 197:src/console.c **** 
 198:src/console.c **** #ifndef DM42   // No serial operations for DM42
 199:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 200:src/console.c **** /*
 201:src/console.c ****  *  Open a COM port for transmission
 202:src/console.c ****  */
 203:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 204:src/console.c **** {
 205:src/console.c **** 	return 0;
 206:src/console.c **** }
 207:src/console.c **** 
 208:src/console.c **** 
 209:src/console.c **** /*
 210:src/console.c ****  *  Close the COM port after transmission is complete
 211:src/console.c ****  */
 212:src/console.c **** extern void close_port( void )
 213:src/console.c **** {
 214:src/console.c **** }
 215:src/console.c **** 
 216:src/console.c **** 
 217:src/console.c **** /*
 218:src/console.c ****  *  Output a single byte to the serial
 219:src/console.c ****  */
 220:src/console.c **** void put_byte( unsigned char byte )
 221:src/console.c **** {
 222:src/console.c **** 	report_err(ERR_PROG_BAD);
 223:src/console.c **** }
 224:src/console.c **** 
 225:src/console.c **** 
 226:src/console.c **** /*
 227:src/console.c ****  *  Force buffer flush
 228:src/console.c ****  */
 229:src/console.c **** void flush_comm( void )
 230:src/console.c **** {
 231:src/console.c **** }
 232:src/console.c **** 
 233:src/console.c **** #endif
 234:src/console.c **** #endif
 235:src/console.c **** 
 236:src/console.c **** 
 237:src/console.c **** /*
 238:src/console.c ****  *  Main loop
 239:src/console.c ****  */
 240:src/console.c **** #ifdef DM42
 241:src/console.c **** void start_key_timer (void);
 242:src/console.c **** long int keyticks (void);
 243:src/console.c **** void moveto (int line, int x);
 244:src/console.c **** 
 245:src/console.c **** static long int start_ticks;
ARM GAS  /tmp/ccGGa0st.s 			page 46


 246:src/console.c **** 
 247:src/console.c **** void start_key_timer() {
 1600              		.loc 2 247 24 is_stmt 1 view -0
 1601              		.cfi_startproc
 1602              		@ args = 0, pretend = 0, frame = 0
 1603              		@ frame_needed = 0, uses_anonymous_args = 0
 248:src/console.c ****     start_ticks = get_rtc_ticks();
 1604              		.loc 2 248 5 view .LVU413
 247:src/console.c ****     start_ticks = get_rtc_ticks();
 1605              		.loc 2 247 24 is_stmt 0 view .LVU414
 1606 0000 08B5     		push	{r3, lr}
 1607              		.cfi_def_cfa_offset 8
 1608              		.cfi_offset 3, -8
 1609              		.cfi_offset 14, -4
 1610              		.loc 2 248 19 view .LVU415
 1611 0002 024B     		ldr	r3, .L141
 1612 0004 9847     		blx	r3
 1613              	.LVL107:
 1614              		.loc 2 248 17 view .LVU416
 1615 0006 024B     		ldr	r3, .L141+4
 1616 0008 1860     		str	r0, [r3]
 249:src/console.c **** }
 1617              		.loc 2 249 1 view .LVU417
 1618 000a 08BD     		pop	{r3, pc}
 1619              	.L142:
 1620              		.align	2
 1621              	.L141:
 1622 000c B9040008 		.word	134218937
 1623 0010 00000000 		.word	.LANCHOR6
 1624              		.cfi_endproc
 1625              	.LFE21:
 1627              		.section	.text.keyticks,"ax",%progbits
 1628              		.align	1
 1629              		.p2align 2,,3
 1630              		.global	keyticks
 1631              		.syntax unified
 1632              		.thumb
 1633              		.thumb_func
 1634              		.fpu fpv4-sp-d16
 1636              	keyticks:
 1637              	.LFB22:
 250:src/console.c **** 
 251:src/console.c **** long int keyticks () {
 1638              		.loc 2 251 22 is_stmt 1 view -0
 1639              		.cfi_startproc
 1640              		@ args = 0, pretend = 0, frame = 0
 1641              		@ frame_needed = 0, uses_anonymous_args = 0
 252:src/console.c ****   long int i;
 1642              		.loc 2 252 3 view .LVU419
 253:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1643              		.loc 2 253 3 view .LVU420
 251:src/console.c ****   long int i;
 1644              		.loc 2 251 22 is_stmt 0 view .LVU421
 1645 0000 08B5     		push	{r3, lr}
 1646              		.cfi_def_cfa_offset 8
 1647              		.cfi_offset 3, -8
 1648              		.cfi_offset 14, -4
ARM GAS  /tmp/ccGGa0st.s 			page 47


 1649              		.loc 2 253 8 view .LVU422
 1650 0002 054B     		ldr	r3, .L145
 1651 0004 9847     		blx	r3
 1652              	.LVL108:
 254:src/console.c ****   return i >> 8;
 1653              		.loc 2 254 3 is_stmt 1 view .LVU423
 253:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1654              		.loc 2 253 24 is_stmt 0 view .LVU424
 1655 0006 054B     		ldr	r3, .L145+4
 1656 0008 1B68     		ldr	r3, [r3]
 1657 000a C01A     		subs	r0, r0, r3
 1658              	.LVL109:
 253:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1659              		.loc 2 253 38 view .LVU425
 1660 000c 00EB8000 		add	r0, r0, r0, lsl #2
 255:src/console.c **** }
 1661              		.loc 2 255 1 view .LVU426
 1662 0010 40F3D710 		sbfx	r0, r0, #7, #24
 1663 0014 08BD     		pop	{r3, pc}
 1664              	.L146:
 1665 0016 00BF     		.align	2
 1666              	.L145:
 1667 0018 B9040008 		.word	134218937
 1668 001c 00000000 		.word	.LANCHOR6
 1669              		.cfi_endproc
 1670              	.LFE22:
 1672              		.section	.text.moveto,"ax",%progbits
 1673              		.align	1
 1674              		.p2align 2,,3
 1675              		.global	moveto
 1676              		.syntax unified
 1677              		.thumb
 1678              		.thumb_func
 1679              		.fpu fpv4-sp-d16
 1681              	moveto:
 1682              	.LVL110:
 1683              	.LFB23:
 256:src/console.c **** 
 257:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 258:src/console.c **** char print_string[22];
 259:src/console.c **** int n_p = 0;
 260:src/console.c **** 
 261:src/console.c **** 
 262:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 1684              		.loc 2 262 30 is_stmt 1 view -0
 1685              		.cfi_startproc
 1686              		@ args = 0, pretend = 0, frame = 0
 1687              		@ frame_needed = 0, uses_anonymous_args = 0
 263:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1688              		.loc 2 263 3 view .LVU428
 262:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1689              		.loc 2 262 30 is_stmt 0 view .LVU429
 1690 0000 70B5     		push	{r4, r5, r6, lr}
 1691              		.cfi_def_cfa_offset 16
 1692              		.cfi_offset 4, -16
 1693              		.cfi_offset 5, -12
 1694              		.cfi_offset 6, -8
ARM GAS  /tmp/ccGGa0st.s 			page 48


 1695              		.cfi_offset 14, -4
 1696              		.loc 2 263 3 view .LVU430
 1697 0002 0A4D     		ldr	r5, .L149
 1698 0004 0A4B     		ldr	r3, .L149+4
 262:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1699              		.loc 2 262 30 view .LVU431
 1700 0006 0246     		mov	r2, r0
 1701 0008 0C46     		mov	r4, r1
 1702              		.loc 2 263 3 view .LVU432
 1703 000a A86B     		ldr	r0, [r5, #56]
 1704              	.LVL111:
 1705              		.loc 2 263 3 view .LVU433
 1706 000c 511E     		subs	r1, r2, #1
 1707              	.LVL112:
 1708              		.loc 2 263 3 view .LVU434
 1709 000e 9847     		blx	r3
 1710              	.LVL113:
 264:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1711              		.loc 2 264 3 is_stmt 1 view .LVU435
 1712 0010 A86B     		ldr	r0, [r5, #56]
 1713 0012 084B     		ldr	r3, .L149+8
 1714              		.loc 2 264 33 is_stmt 0 view .LVU436
 1715 0014 0168     		ldr	r1, [r0]
 1716              		.loc 2 264 3 view .LVU437
 1717 0016 B0F90620 		ldrsh	r2, [r0, #6]
 1718              		.loc 2 264 33 view .LVU438
 1719 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 1720              		.loc 2 264 43 view .LVU439
 1721 001c 013C     		subs	r4, r4, #1
 1722              	.LVL114:
 1723              		.loc 2 264 40 view .LVU440
 1724 001e 04FB01F1 		mul	r1, r4, r1
 1725              		.loc 2 264 3 view .LVU441
 1726 0022 1431     		adds	r1, r1, #20
 265:src/console.c **** }
 1727              		.loc 2 265 1 view .LVU442
 1728 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1729              		.cfi_restore 14
 1730              		.cfi_restore 6
 1731              		.cfi_restore 5
 1732              		.cfi_restore 4
 1733              		.cfi_def_cfa_offset 0
 1734              	.LVL115:
 264:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1735              		.loc 2 264 3 view .LVU443
 1736 0028 1847     		bx	r3	@ indirect register sibling call
 1737              	.LVL116:
 1738              	.L150:
 1739 002a 00BF     		.align	2
 1740              	.L149:
 1741 002c 00200010 		.word	268443648
 1742 0030 69020008 		.word	134218345
 1743 0034 6D020008 		.word	134218349
 1744              		.cfi_endproc
 1745              	.LFE23:
 1747              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 1748              		.align	2
ARM GAS  /tmp/ccGGa0st.s 			page 49


 1749              	.LC9:
 1750 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 1750      673A2025 
 1750      34692C25 
 1750      346900
 1751              		.section	.text.print_debug,"ax",%progbits
 1752              		.align	1
 1753              		.p2align 2,,3
 1754              		.global	print_debug
 1755              		.syntax unified
 1756              		.thumb
 1757              		.thumb_func
 1758              		.fpu fpv4-sp-d16
 1760              	print_debug:
 1761              	.LVL117:
 1762              	.LFB24:
 266:src/console.c **** 
 267:src/console.c **** void print_debug (int i, int j) {
 1763              		.loc 2 267 33 is_stmt 1 view -0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 8
 1766              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/console.c ****   strcpy( print_string, spaces );
 1767              		.loc 2 268 3 view .LVU445
 267:src/console.c ****   strcpy( print_string, spaces );
 1768              		.loc 2 267 33 is_stmt 0 view .LVU446
 1769 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1770              		.cfi_def_cfa_offset 24
 1771              		.cfi_offset 4, -24
 1772              		.cfi_offset 5, -20
 1773              		.cfi_offset 6, -16
 1774              		.cfi_offset 7, -12
 1775              		.cfi_offset 8, -8
 1776              		.cfi_offset 14, -4
 1777              		.loc 2 268 3 view .LVU447
 1778 0004 164C     		ldr	r4, .L153
 1779 0006 174F     		ldr	r7, .L153+4
 269:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 270:src/console.c ****   moveto (3, 1);
 271:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1780              		.loc 2 271 3 view .LVU448
 1781 0008 174E     		ldr	r6, .L153+8
 1782 000a 184D     		ldr	r5, .L153+12
 272:src/console.c ****   lcd_refresh();
 1783              		.loc 2 272 3 view .LVU449
 1784 000c DFF86880 		ldr	r8, .L153+24
 267:src/console.c ****   strcpy( print_string, spaces );
 1785              		.loc 2 267 33 view .LVU450
 1786 0010 82B0     		sub	sp, sp, #8
 1787              		.cfi_def_cfa_offset 32
 267:src/console.c ****   strcpy( print_string, spaces );
 1788              		.loc 2 267 33 view .LVU451
 1789 0012 0190     		str	r0, [sp, #4]
 1790 0014 0091     		str	r1, [sp]
 268:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1791              		.loc 2 268 3 view .LVU452
 1792 0016 2046     		mov	r0, r4
ARM GAS  /tmp/ccGGa0st.s 			page 50


 1793              	.LVL118:
 268:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1794              		.loc 2 268 3 view .LVU453
 1795 0018 3946     		mov	r1, r7
 1796              	.LVL119:
 268:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1797              		.loc 2 268 3 view .LVU454
 1798 001a FFF7FEFF 		bl	strcpy
 1799              	.LVL120:
 269:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1800              		.loc 2 269 3 is_stmt 1 view .LVU455
 1801 001e DDE90032 		ldrd	r3, r2, [sp]
 1802 0022 1349     		ldr	r1, .L153+16
 1803 0024 2046     		mov	r0, r4
 1804 0026 FFF7FEFF 		bl	sprintf
 1805              	.LVL121:
 270:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1806              		.loc 2 270 3 view .LVU456
 1807 002a 0121     		movs	r1, #1
 1808 002c 0320     		movs	r0, #3
 1809 002e FFF7FEFF 		bl	moveto
 1810              	.LVL122:
 271:src/console.c ****   lcd_refresh();
 1811              		.loc 2 271 3 view .LVU457
 1812 0032 2146     		mov	r1, r4
 1813 0034 B06B     		ldr	r0, [r6, #56]
 1814 0036 A847     		blx	r5
 1815              	.LVL123:
 1816              		.loc 2 272 3 view .LVU458
 1817 0038 C047     		blx	r8
 1818              	.LVL124:
 273:src/console.c ****   sys_delay (100);
 1819              		.loc 2 273 3 view .LVU459
 1820 003a 0E4B     		ldr	r3, .L153+20
 1821 003c 6420     		movs	r0, #100
 1822 003e 9847     		blx	r3
 1823              	.LVL125:
 274:src/console.c ****   /* wait_for_key_press(); */
 275:src/console.c ****   //  key_pop_all();
 276:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 277:src/console.c ****   // key_pop_all();
 278:src/console.c ****   strcpy( print_string, spaces );
 1824              		.loc 2 278 3 view .LVU460
 1825 0040 3946     		mov	r1, r7
 1826 0042 2046     		mov	r0, r4
 1827 0044 FFF7FEFF 		bl	strcpy
 1828              	.LVL126:
 279:src/console.c ****   moveto (3, 1);
 1829              		.loc 2 279 3 view .LVU461
 1830 0048 0121     		movs	r1, #1
 1831 004a 0320     		movs	r0, #3
 1832 004c FFF7FEFF 		bl	moveto
 1833              	.LVL127:
 280:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1834              		.loc 2 280 3 view .LVU462
 1835 0050 B06B     		ldr	r0, [r6, #56]
 1836 0052 2146     		mov	r1, r4
ARM GAS  /tmp/ccGGa0st.s 			page 51


 1837 0054 A847     		blx	r5
 1838              	.LVL128:
 281:src/console.c ****   lcd_refresh();
 1839              		.loc 2 281 3 view .LVU463
 1840 0056 4346     		mov	r3, r8
 282:src/console.c ****   // while (key_empty()<=0);; // wait for release
 283:src/console.c ****   // key_pop_all();
 284:src/console.c **** }
 1841              		.loc 2 284 1 is_stmt 0 view .LVU464
 1842 0058 02B0     		add	sp, sp, #8
 1843              		.cfi_def_cfa_offset 24
 1844              	.LVL129:
 1845              		.loc 2 284 1 view .LVU465
 1846              		@ sp needed
 1847 005a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1848              		.cfi_restore 14
 1849              		.cfi_restore 8
 1850              		.cfi_restore 7
 1851              		.cfi_restore 6
 1852              		.cfi_restore 5
 1853              		.cfi_restore 4
 1854              		.cfi_def_cfa_offset 0
 1855              	.LVL130:
 281:src/console.c ****   lcd_refresh();
 1856              		.loc 2 281 3 view .LVU466
 1857 005e 1847     		bx	r3	@ indirect register sibling call
 1858              	.LVL131:
 1859              	.L154:
 1860              		.align	2
 1861              	.L153:
 1862 0060 00000000 		.word	print_string
 1863 0064 00000000 		.word	.LANCHOR7
 1864 0068 00200010 		.word	268443648
 1865 006c B1020008 		.word	134218417
 1866 0070 00000000 		.word	.LC9
 1867 0074 05040008 		.word	134218757
 1868 0078 31020008 		.word	134218289
 1869              		.cfi_endproc
 1870              	.LFE24:
 1872              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 1873              		.align	2
 1874              	.LC10:
 1875 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 1875      692C2531 
 1875      337300
 1876              		.section	.text.print_debug2,"ax",%progbits
 1877              		.align	1
 1878              		.p2align 2,,3
 1879              		.global	print_debug2
 1880              		.syntax unified
 1881              		.thumb
 1882              		.thumb_func
 1883              		.fpu fpv4-sp-d16
 1885              	print_debug2:
 1886              	.LVL132:
 1887              	.LFB25:
 285:src/console.c **** 
ARM GAS  /tmp/ccGGa0st.s 			page 52


 286:src/console.c **** void print_debug2 (int i, char* j) {
 1888              		.loc 2 286 36 is_stmt 1 view -0
 1889              		.cfi_startproc
 1890              		@ args = 0, pretend = 0, frame = 8
 1891              		@ frame_needed = 0, uses_anonymous_args = 0
 287:src/console.c ****   strcpy( print_string, spaces );
 1892              		.loc 2 287 3 view .LVU468
 286:src/console.c ****   strcpy( print_string, spaces );
 1893              		.loc 2 286 36 is_stmt 0 view .LVU469
 1894 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1895              		.cfi_def_cfa_offset 24
 1896              		.cfi_offset 4, -24
 1897              		.cfi_offset 5, -20
 1898              		.cfi_offset 6, -16
 1899              		.cfi_offset 7, -12
 1900              		.cfi_offset 8, -8
 1901              		.cfi_offset 14, -4
 1902              		.loc 2 287 3 view .LVU470
 1903 0004 174C     		ldr	r4, .L157
 1904 0006 184F     		ldr	r7, .L157+4
 288:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 289:src/console.c ****   moveto (3, 1);
 290:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1905              		.loc 2 290 3 view .LVU471
 1906 0008 184E     		ldr	r6, .L157+8
 1907 000a 194D     		ldr	r5, .L157+12
 291:src/console.c ****   lcd_refresh();
 1908              		.loc 2 291 3 view .LVU472
 1909 000c DFF86C80 		ldr	r8, .L157+24
 286:src/console.c ****   strcpy( print_string, spaces );
 1910              		.loc 2 286 36 view .LVU473
 1911 0010 82B0     		sub	sp, sp, #8
 1912              		.cfi_def_cfa_offset 32
 286:src/console.c ****   strcpy( print_string, spaces );
 1913              		.loc 2 286 36 view .LVU474
 1914 0012 0190     		str	r0, [sp, #4]
 1915 0014 0091     		str	r1, [sp]
 287:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1916              		.loc 2 287 3 view .LVU475
 1917 0016 2046     		mov	r0, r4
 1918              	.LVL133:
 287:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1919              		.loc 2 287 3 view .LVU476
 1920 0018 3946     		mov	r1, r7
 1921              	.LVL134:
 287:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1922              		.loc 2 287 3 view .LVU477
 1923 001a FFF7FEFF 		bl	strcpy
 1924              	.LVL135:
 288:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1925              		.loc 2 288 3 is_stmt 1 view .LVU478
 1926 001e DDE90032 		ldrd	r3, r2, [sp]
 1927 0022 1449     		ldr	r1, .L157+16
 1928 0024 2046     		mov	r0, r4
 1929 0026 FFF7FEFF 		bl	sprintf
 1930              	.LVL136:
 289:src/console.c ****   lcd_print (fReg , (const char*) print_string );
ARM GAS  /tmp/ccGGa0st.s 			page 53


 1931              		.loc 2 289 3 view .LVU479
 1932 002a 0121     		movs	r1, #1
 1933 002c 0320     		movs	r0, #3
 1934 002e FFF7FEFF 		bl	moveto
 1935              	.LVL137:
 290:src/console.c ****   lcd_refresh();
 1936              		.loc 2 290 3 view .LVU480
 1937 0032 2146     		mov	r1, r4
 1938 0034 B06B     		ldr	r0, [r6, #56]
 1939 0036 A847     		blx	r5
 1940              	.LVL138:
 1941              		.loc 2 291 3 view .LVU481
 1942 0038 C047     		blx	r8
 1943              	.LVL139:
 292:src/console.c ****   sys_delay (2500);
 1944              		.loc 2 292 3 view .LVU482
 1945 003a 0F4B     		ldr	r3, .L157+20
 1946 003c 40F6C410 		movw	r0, #2500
 1947 0040 9847     		blx	r3
 1948              	.LVL140:
 293:src/console.c ****   /* wait_for_key_press(); */
 294:src/console.c ****   //  key_pop_all();
 295:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 296:src/console.c ****   // key_pop_all();
 297:src/console.c ****   strcpy( print_string, spaces );
 1949              		.loc 2 297 3 view .LVU483
 1950 0042 3946     		mov	r1, r7
 1951 0044 2046     		mov	r0, r4
 1952 0046 FFF7FEFF 		bl	strcpy
 1953              	.LVL141:
 298:src/console.c ****   moveto (3, 1);
 1954              		.loc 2 298 3 view .LVU484
 1955 004a 0121     		movs	r1, #1
 1956 004c 0320     		movs	r0, #3
 1957 004e FFF7FEFF 		bl	moveto
 1958              	.LVL142:
 299:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1959              		.loc 2 299 3 view .LVU485
 1960 0052 B06B     		ldr	r0, [r6, #56]
 1961 0054 2146     		mov	r1, r4
 1962 0056 A847     		blx	r5
 1963              	.LVL143:
 300:src/console.c ****   lcd_refresh();
 1964              		.loc 2 300 3 view .LVU486
 1965 0058 4346     		mov	r3, r8
 301:src/console.c ****   // while (key_empty()<=0);; // wait for release
 302:src/console.c ****   // key_pop_all();
 303:src/console.c **** }
 1966              		.loc 2 303 1 is_stmt 0 view .LVU487
 1967 005a 02B0     		add	sp, sp, #8
 1968              		.cfi_def_cfa_offset 24
 1969              	.LVL144:
 1970              		.loc 2 303 1 view .LVU488
 1971              		@ sp needed
 1972 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1973              		.cfi_restore 14
 1974              		.cfi_restore 8
ARM GAS  /tmp/ccGGa0st.s 			page 54


 1975              		.cfi_restore 7
 1976              		.cfi_restore 6
 1977              		.cfi_restore 5
 1978              		.cfi_restore 4
 1979              		.cfi_def_cfa_offset 0
 1980              	.LVL145:
 300:src/console.c ****   lcd_refresh();
 1981              		.loc 2 300 3 view .LVU489
 1982 0060 1847     		bx	r3	@ indirect register sibling call
 1983              	.LVL146:
 1984              	.L158:
 1985 0062 00BF     		.align	2
 1986              	.L157:
 1987 0064 00000000 		.word	print_string
 1988 0068 00000000 		.word	.LANCHOR7
 1989 006c 00200010 		.word	268443648
 1990 0070 B1020008 		.word	134218417
 1991 0074 00000000 		.word	.LC10
 1992 0078 05040008 		.word	134218757
 1993 007c 31020008 		.word	134218289
 1994              		.cfi_endproc
 1995              	.LFE25:
 1997              		.section	.text.do_now,"ax",%progbits
 1998              		.align	1
 1999              		.p2align 2,,3
 2000              		.global	do_now
 2001              		.syntax unified
 2002              		.thumb
 2003              		.thumb_func
 2004              		.fpu fpv4-sp-d16
 2006              	do_now:
 2007              	.LVL147:
 2008              	.LFB26:
 304:src/console.c **** 
 305:src/console.c **** void do_now (int key, int shift) {
 2009              		.loc 2 305 34 is_stmt 1 view -0
 2010              		.cfi_startproc
 2011              		@ args = 0, pretend = 0, frame = 8
 2012              		@ frame_needed = 0, uses_anonymous_args = 0
 2013              		@ link register save eliminated.
 306:src/console.c ****   struct _ndmap temp;
 2014              		.loc 2 306 3 view .LVU491
 307:src/console.c ****   temp.key_34s = key;
 2015              		.loc 2 307 3 view .LVU492
 305:src/console.c ****   struct _ndmap temp;
 2016              		.loc 2 305 34 is_stmt 0 view .LVU493
 2017 0000 82B0     		sub	sp, sp, #8
 2018              		.cfi_def_cfa_offset 8
 308:src/console.c ****   temp.shift = shift;
 309:src/console.c ****   process_keycode_with_shift (temp);
 2019              		.loc 2 309 3 view .LVU494
 2020 0002 02AB     		add	r3, sp, #8
 307:src/console.c ****   temp.shift = shift;
 2021              		.loc 2 307 16 view .LVU495
 2022 0004 8DF80000 		strb	r0, [sp]
 308:src/console.c ****   temp.shift = shift;
 2023              		.loc 2 308 3 is_stmt 1 view .LVU496
ARM GAS  /tmp/ccGGa0st.s 			page 55


 308:src/console.c ****   temp.shift = shift;
 2024              		.loc 2 308 14 is_stmt 0 view .LVU497
 2025 0008 0191     		str	r1, [sp, #4]
 2026              		.loc 2 309 3 is_stmt 1 view .LVU498
 2027 000a 13E90300 		ldmdb	r3, {r0, r1}
 2028              	.LVL148:
 310:src/console.c **** }
 2029              		.loc 2 310 1 is_stmt 0 view .LVU499
 2030 000e 02B0     		add	sp, sp, #8
 2031              		.cfi_def_cfa_offset 0
 2032              		@ sp needed
 309:src/console.c **** }
 2033              		.loc 2 309 3 view .LVU500
 2034 0010 FFF7FEBF 		b	process_keycode_with_shift
 2035              	.LVL149:
 309:src/console.c **** }
 2036              		.loc 2 309 3 view .LVU501
 2037              		.cfi_endproc
 2038              	.LFE26:
 2040              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 2041              		.align	2
 2042              	.LC11:
 2043 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 2043      502F7770 
 2043      3334735F 
 2043      68656C70 
 2043      2E68746D 
 2044              		.section	.text.do_multi,"ax",%progbits
 2045              		.align	1
 2046              		.p2align 2,,3
 2047              		.global	do_multi
 2048              		.syntax unified
 2049              		.thumb
 2050              		.thumb_func
 2051              		.fpu fpv4-sp-d16
 2053              	do_multi:
 2054              	.LVL150:
 2055              	.LFB27:
 311:src/console.c **** 
 312:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 2056              		.loc 2 312 42 is_stmt 1 view -0
 2057              		.cfi_startproc
 2058              		@ args = 0, pretend = 0, frame = 16
 2059              		@ frame_needed = 0, uses_anonymous_args = 0
 2060              		.loc 2 312 42 is_stmt 0 view .LVU503
 2061 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2062              		.cfi_def_cfa_offset 24
 2063              		.cfi_offset 4, -24
 2064              		.cfi_offset 5, -20
 2065              		.cfi_offset 6, -16
 2066              		.cfi_offset 7, -12
 2067              		.cfi_offset 8, -8
 2068              		.cfi_offset 14, -4
 2069 0004 84B0     		sub	sp, sp, #16
 2070              		.cfi_def_cfa_offset 40
 2071              	.LVL151:
 313:src/console.c ****   switch(r.shift) {
ARM GAS  /tmp/ccGGa0st.s 			page 56


 2072              		.loc 2 313 3 is_stmt 1 view .LVU504
 312:src/console.c ****   switch(r.shift) {
 2073              		.loc 2 312 42 is_stmt 0 view .LVU505
 2074 0006 6C46     		mov	r4, sp
 2075 0008 531E     		subs	r3, r2, #1
 2076 000a 84E80600 		stm	r4, {r1, r2}
 2077              	.LVL152:
 312:src/console.c ****   switch(r.shift) {
 2078              		.loc 2 312 42 view .LVU506
 2079 000e 0546     		mov	r5, r0
 2080 0010 0C2B     		cmp	r3, #12
 2081 0012 0FD8     		bhi	.L162
 2082 0014 DFE803F0 		tbb	[pc, r3]
 2083              	.L164:
 2084 0018 15       		.byte	(.L176-.L164)/2
 2085 0019 3D       		.byte	(.L175-.L164)/2
 2086 001a 47       		.byte	(.L174-.L164)/2
 2087 001b 51       		.byte	(.L173-.L164)/2
 2088 001c 5B       		.byte	(.L172-.L164)/2
 2089 001d 65       		.byte	(.L171-.L164)/2
 2090 001e 6F       		.byte	(.L170-.L164)/2
 2091 001f 79       		.byte	(.L169-.L164)/2
 2092 0020 82       		.byte	(.L168-.L164)/2
 2093 0021 8C       		.byte	(.L167-.L164)/2
 2094 0022 95       		.byte	(.L166-.L164)/2
 2095 0023 9E       		.byte	(.L165-.L164)/2
 2096 0024 07       		.byte	(.L163-.L164)/2
 2097 0025 00       		.p2align 1
 2098              	.L163:
 314:src/console.c ****   case LASTX: // Last x via RCL L
 315:src/console.c ****     do_now (K11, 0); // RCL
 316:src/console.c ****     do_now (K_RELEASE,0); // release
 317:src/console.c ****     do_now (K15,0); // TAN key
 318:src/console.c ****     r.key_34s = K_RELEASE;
 319:src/console.c ****     r.shift = 0; // set up for release;
 320:src/console.c ****     break;
 321:src/console.c ****   case ONSTO: // flash_backup()
 322:src/console.c ****     flash_backup(OP_SAVE);
 323:src/console.c ****     r = no_key;
 324:src/console.c ****     break;
 325:src/console.c ****   case ONRCL: // flash_restore()
 326:src/console.c ****     flash_restore(OP_LOAD);
 327:src/console.c ****     r = no_key;
 328:src/console.c ****     break;
 329:src/console.c ****   case WRLIB: // save library file
 330:src/console.c ****     save_lib_file(1);
 331:src/console.c ****     r = no_key;
 332:src/console.c ****     break;
 333:src/console.c ****   case LLIB: // load library file
 334:src/console.c ****     load_lib_file(1);
 335:src/console.c ****     r = no_key;
 336:src/console.c ****     break;
 337:src/console.c ****   case WRTST: // save state file
 338:src/console.c ****     save_ram_file(1);
 339:src/console.c ****     r = no_key;
 340:src/console.c ****     break;
 341:src/console.c ****   case LDST:
ARM GAS  /tmp/ccGGa0st.s 			page 57


 342:src/console.c ****     load_ram_file(1);
 343:src/console.c ****     r = no_key;
 344:src/console.c ****     break;
 345:src/console.c ****   case LDPRG:
 346:src/console.c ****     load_prog_file();
 347:src/console.c ****     r = no_key;
 348:src/console.c ****     break;
 349:src/console.c ****   case SVPRG:
 350:src/console.c ****     save_prog_file();
 351:src/console.c ****     r = no_key;
 352:src/console.c ****     break;
 353:src/console.c ****   case HELP:
 354:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 355:src/console.c ****     r = no_key;
 356:src/console.c ****     break;
 357:src/console.c ****   case DOTS:
 358:src/console.c ****     do_all_dots();
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 362:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 363:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 364:src/console.c ****     r = no_key;
 365:src/console.c ****     break;
 366:src/console.c ****   case DEFMEN:
 367:src/console.c ****     toggle_default_menu();
 2099              		.loc 2 367 5 is_stmt 1 view .LVU507
 2100              	.LBB88:
 2101              	.LBI88:
 100:src/menu.c    ****   if (current_menu == default_menu) {
 2102              		.loc 1 100 6 view .LVU508
 2103              	.LBB89:
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2104              		.loc 1 101 3 view .LVU509
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2105              		.loc 1 101 20 is_stmt 0 view .LVU510
 2106 0026 5A49     		ldr	r1, .L181
 2107 0028 5A4A     		ldr	r2, .L181+4
 2108 002a 0868     		ldr	r0, [r1]
 2109              	.LVL153:
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2110              		.loc 1 101 6 view .LVU511
 2111 002c 1368     		ldr	r3, [r2]
 2112 002e 8342     		cmp	r3, r0
 2113 0030 00F0A980 		beq	.L180
 2114              	.L162:
 2115              	.LBE89:
 2116              	.LBE88:
 368:src/console.c ****     r = no_key;
 369:src/console.c ****     break;
 370:src/console.c ****   default:
 371:src/console.c ****     r = no_key;
 2117              		.loc 2 371 5 is_stmt 1 view .LVU512
 2118              		.loc 2 371 7 is_stmt 0 view .LVU513
 2119 0034 584B     		ldr	r3, .L181+8
 2120 0036 93E80300 		ldm	r3, {r0, r1}
 2121 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccGGa0st.s 			page 58


 2122              	.LVL154:
 2123              		.loc 2 371 7 view .LVU514
 2124 003c 84E80300 		stm	r4, {r0, r1}
 2125 0040 1CE0     		b	.L177
 2126              	.LVL155:
 2127              	.L176:
 315:src/console.c ****     do_now (K_RELEASE,0); // release
 2128              		.loc 2 315 5 is_stmt 1 view .LVU515
 2129              	.LBB91:
 2130              	.LBI91:
 305:src/console.c ****   struct _ndmap temp;
 2131              		.loc 2 305 6 view .LVU516
 2132              	.LBB92:
 306:src/console.c ****   temp.key_34s = key;
 2133              		.loc 2 306 3 view .LVU517
 307:src/console.c ****   temp.shift = shift;
 2134              		.loc 2 307 3 view .LVU518
 307:src/console.c ****   temp.shift = shift;
 2135              		.loc 2 307 16 is_stmt 0 view .LVU519
 2136 0042 0723     		movs	r3, #7
 308:src/console.c ****   process_keycode_with_shift (temp);
 2137              		.loc 2 308 14 view .LVU520
 2138 0044 0026     		movs	r6, #0
 307:src/console.c ****   temp.shift = shift;
 2139              		.loc 2 307 16 view .LVU521
 2140 0046 8DF80830 		strb	r3, [sp, #8]
 308:src/console.c ****   process_keycode_with_shift (temp);
 2141              		.loc 2 308 3 is_stmt 1 view .LVU522
 309:src/console.c **** }
 2142              		.loc 2 309 3 is_stmt 0 view .LVU523
 2143 004a 0DF10808 		add	r8, sp, #8
 308:src/console.c ****   process_keycode_with_shift (temp);
 2144              		.loc 2 308 14 view .LVU524
 2145 004e 0396     		str	r6, [sp, #12]
 309:src/console.c **** }
 2146              		.loc 2 309 3 is_stmt 1 view .LVU525
 2147 0050 98E80300 		ldm	r8, {r0, r1}
 2148              	.LVL156:
 309:src/console.c **** }
 2149              		.loc 2 309 3 is_stmt 0 view .LVU526
 2150              	.LBE92:
 2151              	.LBE91:
 2152              	.LBB94:
 2153              	.LBB95:
 307:src/console.c ****   temp.shift = shift;
 2154              		.loc 2 307 16 view .LVU527
 2155 0054 6327     		movs	r7, #99
 2156              	.LBE95:
 2157              	.LBE94:
 2158              	.LBB97:
 2159              	.LBB93:
 309:src/console.c **** }
 2160              		.loc 2 309 3 view .LVU528
 2161 0056 FFF7FEFF 		bl	process_keycode_with_shift
 2162              	.LVL157:
 309:src/console.c **** }
 2163              		.loc 2 309 3 view .LVU529
ARM GAS  /tmp/ccGGa0st.s 			page 59


 2164              	.LBE93:
 2165              	.LBE97:
 316:src/console.c ****     do_now (K15,0); // TAN key
 2166              		.loc 2 316 5 is_stmt 1 view .LVU530
 2167              	.LBB98:
 2168              	.LBI94:
 305:src/console.c ****   struct _ndmap temp;
 2169              		.loc 2 305 6 view .LVU531
 2170              	.LBB96:
 306:src/console.c ****   temp.key_34s = key;
 2171              		.loc 2 306 3 view .LVU532
 307:src/console.c ****   temp.shift = shift;
 2172              		.loc 2 307 3 view .LVU533
 308:src/console.c ****   process_keycode_with_shift (temp);
 2173              		.loc 2 308 14 is_stmt 0 view .LVU534
 2174 005a 0396     		str	r6, [sp, #12]
 307:src/console.c ****   temp.shift = shift;
 2175              		.loc 2 307 16 view .LVU535
 2176 005c 8DF80870 		strb	r7, [sp, #8]
 308:src/console.c ****   process_keycode_with_shift (temp);
 2177              		.loc 2 308 3 is_stmt 1 view .LVU536
 309:src/console.c **** }
 2178              		.loc 2 309 3 view .LVU537
 2179 0060 98E80300 		ldm	r8, {r0, r1}
 2180 0064 FFF7FEFF 		bl	process_keycode_with_shift
 2181              	.LVL158:
 309:src/console.c **** }
 2182              		.loc 2 309 3 is_stmt 0 view .LVU538
 2183              	.LBE96:
 2184              	.LBE98:
 317:src/console.c ****     r.key_34s = K_RELEASE;
 2185              		.loc 2 317 5 is_stmt 1 view .LVU539
 2186              	.LBB99:
 2187              	.LBI99:
 305:src/console.c ****   struct _ndmap temp;
 2188              		.loc 2 305 6 view .LVU540
 2189              	.LBB100:
 306:src/console.c ****   temp.key_34s = key;
 2190              		.loc 2 306 3 view .LVU541
 307:src/console.c ****   temp.shift = shift;
 2191              		.loc 2 307 3 view .LVU542
 307:src/console.c ****   temp.shift = shift;
 2192              		.loc 2 307 16 is_stmt 0 view .LVU543
 2193 0068 0B23     		movs	r3, #11
 2194 006a 8DF80830 		strb	r3, [sp, #8]
 308:src/console.c ****   process_keycode_with_shift (temp);
 2195              		.loc 2 308 3 is_stmt 1 view .LVU544
 309:src/console.c **** }
 2196              		.loc 2 309 3 view .LVU545
 308:src/console.c ****   process_keycode_with_shift (temp);
 2197              		.loc 2 308 14 is_stmt 0 view .LVU546
 2198 006e 0396     		str	r6, [sp, #12]
 309:src/console.c **** }
 2199              		.loc 2 309 3 view .LVU547
 2200 0070 98E80300 		ldm	r8, {r0, r1}
 2201 0074 FFF7FEFF 		bl	process_keycode_with_shift
 2202              	.LVL159:
ARM GAS  /tmp/ccGGa0st.s 			page 60


 309:src/console.c **** }
 2203              		.loc 2 309 3 view .LVU548
 2204              	.LBE100:
 2205              	.LBE99:
 318:src/console.c ****     r.shift = 0; // set up for release;
 2206              		.loc 2 318 5 is_stmt 1 view .LVU549
 319:src/console.c ****     break;
 2207              		.loc 2 319 5 view .LVU550
 320:src/console.c ****   case ONSTO: // flash_backup()
 2208              		.loc 2 320 5 view .LVU551
 319:src/console.c ****     break;
 2209              		.loc 2 319 13 is_stmt 0 view .LVU552
 2210 0078 3146     		mov	r1, r6
 318:src/console.c ****     r.shift = 0; // set up for release;
 2211              		.loc 2 318 15 view .LVU553
 2212 007a 3B46     		mov	r3, r7
 2213              	.LVL160:
 2214              	.L177:
 372:src/console.c ****   }
 373:src/console.c ****   return r;
 2215              		.loc 2 373 3 is_stmt 1 view .LVU554
 2216              		.loc 2 373 10 is_stmt 0 view .LVU555
 2217 007c 8DF80030 		strb	r3, [sp]
 2218 0080 0191     		str	r1, [sp, #4]
 2219 0082 94E80300 		ldm	r4, {r0, r1}
 2220              	.LVL161:
 2221              		.loc 2 373 10 view .LVU556
 2222 0086 85E80300 		stm	r5, {r0, r1}
 374:src/console.c **** }
 2223              		.loc 2 374 1 view .LVU557
 2224 008a 2846     		mov	r0, r5
 2225 008c 04B0     		add	sp, sp, #16
 2226              		.cfi_remember_state
 2227              		.cfi_def_cfa_offset 24
 2228              		@ sp needed
 2229 008e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2230              	.LVL162:
 2231              	.L175:
 2232              		.cfi_restore_state
 322:src/console.c ****     r = no_key;
 2233              		.loc 2 322 5 is_stmt 1 view .LVU558
 2234 0092 AD20     		movs	r0, #173
 2235              	.LVL163:
 322:src/console.c ****     r = no_key;
 2236              		.loc 2 322 5 is_stmt 0 view .LVU559
 2237 0094 FFF7FEFF 		bl	flash_backup
 2238              	.LVL164:
 323:src/console.c ****     break;
 2239              		.loc 2 323 5 is_stmt 1 view .LVU560
 323:src/console.c ****     break;
 2240              		.loc 2 323 7 is_stmt 0 view .LVU561
 2241 0098 3F4B     		ldr	r3, .L181+8
 2242 009a 93E80300 		ldm	r3, {r0, r1}
 2243 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2244              	.LVL165:
 324:src/console.c ****   case ONRCL: // flash_restore()
 2245              		.loc 2 324 5 is_stmt 1 view .LVU562
ARM GAS  /tmp/ccGGa0st.s 			page 61


 323:src/console.c ****     break;
 2246              		.loc 2 323 7 is_stmt 0 view .LVU563
 2247 00a0 84E80300 		stm	r4, {r0, r1}
 324:src/console.c ****   case ONRCL: // flash_restore()
 2248              		.loc 2 324 5 view .LVU564
 2249 00a4 EAE7     		b	.L177
 2250              	.LVL166:
 2251              	.L174:
 326:src/console.c ****     r = no_key;
 2252              		.loc 2 326 5 is_stmt 1 view .LVU565
 2253 00a6 AE20     		movs	r0, #174
 2254              	.LVL167:
 326:src/console.c ****     r = no_key;
 2255              		.loc 2 326 5 is_stmt 0 view .LVU566
 2256 00a8 FFF7FEFF 		bl	flash_restore
 2257              	.LVL168:
 327:src/console.c ****     break;
 2258              		.loc 2 327 5 is_stmt 1 view .LVU567
 327:src/console.c ****     break;
 2259              		.loc 2 327 7 is_stmt 0 view .LVU568
 2260 00ac 3A4B     		ldr	r3, .L181+8
 2261 00ae 93E80300 		ldm	r3, {r0, r1}
 2262 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2263              	.LVL169:
 328:src/console.c ****   case WRLIB: // save library file
 2264              		.loc 2 328 5 is_stmt 1 view .LVU569
 327:src/console.c ****     break;
 2265              		.loc 2 327 7 is_stmt 0 view .LVU570
 2266 00b4 84E80300 		stm	r4, {r0, r1}
 328:src/console.c ****   case WRLIB: // save library file
 2267              		.loc 2 328 5 view .LVU571
 2268 00b8 E0E7     		b	.L177
 2269              	.LVL170:
 2270              	.L173:
 330:src/console.c ****     r = no_key;
 2271              		.loc 2 330 5 is_stmt 1 view .LVU572
 2272 00ba 0120     		movs	r0, #1
 2273              	.LVL171:
 330:src/console.c ****     r = no_key;
 2274              		.loc 2 330 5 is_stmt 0 view .LVU573
 2275 00bc FFF7FEFF 		bl	save_lib_file
 2276              	.LVL172:
 331:src/console.c ****     break;
 2277              		.loc 2 331 5 is_stmt 1 view .LVU574
 331:src/console.c ****     break;
 2278              		.loc 2 331 7 is_stmt 0 view .LVU575
 2279 00c0 354B     		ldr	r3, .L181+8
 2280 00c2 93E80300 		ldm	r3, {r0, r1}
 2281 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2282              	.LVL173:
 332:src/console.c ****   case LLIB: // load library file
 2283              		.loc 2 332 5 is_stmt 1 view .LVU576
 331:src/console.c ****     break;
 2284              		.loc 2 331 7 is_stmt 0 view .LVU577
 2285 00c8 84E80300 		stm	r4, {r0, r1}
 332:src/console.c ****   case LLIB: // load library file
 2286              		.loc 2 332 5 view .LVU578
ARM GAS  /tmp/ccGGa0st.s 			page 62


 2287 00cc D6E7     		b	.L177
 2288              	.LVL174:
 2289              	.L172:
 334:src/console.c ****     r = no_key;
 2290              		.loc 2 334 5 is_stmt 1 view .LVU579
 2291 00ce 0120     		movs	r0, #1
 2292              	.LVL175:
 334:src/console.c ****     r = no_key;
 2293              		.loc 2 334 5 is_stmt 0 view .LVU580
 2294 00d0 FFF7FEFF 		bl	load_lib_file
 2295              	.LVL176:
 335:src/console.c ****     break;
 2296              		.loc 2 335 5 is_stmt 1 view .LVU581
 335:src/console.c ****     break;
 2297              		.loc 2 335 7 is_stmt 0 view .LVU582
 2298 00d4 304B     		ldr	r3, .L181+8
 2299 00d6 93E80300 		ldm	r3, {r0, r1}
 2300 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2301              	.LVL177:
 336:src/console.c ****   case WRTST: // save state file
 2302              		.loc 2 336 5 is_stmt 1 view .LVU583
 335:src/console.c ****     break;
 2303              		.loc 2 335 7 is_stmt 0 view .LVU584
 2304 00dc 84E80300 		stm	r4, {r0, r1}
 336:src/console.c ****   case WRTST: // save state file
 2305              		.loc 2 336 5 view .LVU585
 2306 00e0 CCE7     		b	.L177
 2307              	.LVL178:
 2308              	.L171:
 338:src/console.c ****     r = no_key;
 2309              		.loc 2 338 5 is_stmt 1 view .LVU586
 2310 00e2 0120     		movs	r0, #1
 2311              	.LVL179:
 338:src/console.c ****     r = no_key;
 2312              		.loc 2 338 5 is_stmt 0 view .LVU587
 2313 00e4 FFF7FEFF 		bl	save_ram_file
 2314              	.LVL180:
 339:src/console.c ****     break;
 2315              		.loc 2 339 5 is_stmt 1 view .LVU588
 339:src/console.c ****     break;
 2316              		.loc 2 339 7 is_stmt 0 view .LVU589
 2317 00e8 2B4B     		ldr	r3, .L181+8
 2318 00ea 93E80300 		ldm	r3, {r0, r1}
 2319 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2320              	.LVL181:
 340:src/console.c ****   case LDST:
 2321              		.loc 2 340 5 is_stmt 1 view .LVU590
 339:src/console.c ****     break;
 2322              		.loc 2 339 7 is_stmt 0 view .LVU591
 2323 00f0 84E80300 		stm	r4, {r0, r1}
 340:src/console.c ****   case LDST:
 2324              		.loc 2 340 5 view .LVU592
 2325 00f4 C2E7     		b	.L177
 2326              	.LVL182:
 2327              	.L170:
 342:src/console.c ****     r = no_key;
 2328              		.loc 2 342 5 is_stmt 1 view .LVU593
ARM GAS  /tmp/ccGGa0st.s 			page 63


 2329 00f6 0120     		movs	r0, #1
 2330              	.LVL183:
 342:src/console.c ****     r = no_key;
 2331              		.loc 2 342 5 is_stmt 0 view .LVU594
 2332 00f8 FFF7FEFF 		bl	load_ram_file
 2333              	.LVL184:
 343:src/console.c ****     break;
 2334              		.loc 2 343 5 is_stmt 1 view .LVU595
 343:src/console.c ****     break;
 2335              		.loc 2 343 7 is_stmt 0 view .LVU596
 2336 00fc 264B     		ldr	r3, .L181+8
 2337 00fe 93E80300 		ldm	r3, {r0, r1}
 2338 0102 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2339              	.LVL185:
 344:src/console.c ****   case LDPRG:
 2340              		.loc 2 344 5 is_stmt 1 view .LVU597
 343:src/console.c ****     break;
 2341              		.loc 2 343 7 is_stmt 0 view .LVU598
 2342 0104 84E80300 		stm	r4, {r0, r1}
 344:src/console.c ****   case LDPRG:
 2343              		.loc 2 344 5 view .LVU599
 2344 0108 B8E7     		b	.L177
 2345              	.LVL186:
 2346              	.L169:
 346:src/console.c ****     r = no_key;
 2347              		.loc 2 346 5 is_stmt 1 view .LVU600
 2348 010a FFF7FEFF 		bl	load_prog_file
 2349              	.LVL187:
 347:src/console.c ****     break;
 2350              		.loc 2 347 5 view .LVU601
 347:src/console.c ****     break;
 2351              		.loc 2 347 7 is_stmt 0 view .LVU602
 2352 010e 224B     		ldr	r3, .L181+8
 2353 0110 93E80300 		ldm	r3, {r0, r1}
 2354 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2355              	.LVL188:
 348:src/console.c ****   case SVPRG:
 2356              		.loc 2 348 5 is_stmt 1 view .LVU603
 347:src/console.c ****     break;
 2357              		.loc 2 347 7 is_stmt 0 view .LVU604
 2358 0116 84E80300 		stm	r4, {r0, r1}
 348:src/console.c ****   case SVPRG:
 2359              		.loc 2 348 5 view .LVU605
 2360 011a AFE7     		b	.L177
 2361              	.LVL189:
 2362              	.L168:
 354:src/console.c ****     r = no_key;
 2363              		.loc 2 354 5 is_stmt 1 view .LVU606
 2364 011c 1F4B     		ldr	r3, .L181+12
 2365 011e 2048     		ldr	r0, .L181+16
 2366              	.LVL190:
 354:src/console.c ****     r = no_key;
 2367              		.loc 2 354 5 is_stmt 0 view .LVU607
 2368 0120 9847     		blx	r3
 2369              	.LVL191:
 355:src/console.c ****     break;
 2370              		.loc 2 355 5 is_stmt 1 view .LVU608
ARM GAS  /tmp/ccGGa0st.s 			page 64


 355:src/console.c ****     break;
 2371              		.loc 2 355 7 is_stmt 0 view .LVU609
 2372 0122 1D4B     		ldr	r3, .L181+8
 2373 0124 93E80300 		ldm	r3, {r0, r1}
 2374 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2375              	.LVL192:
 356:src/console.c ****   case DOTS:
 2376              		.loc 2 356 5 is_stmt 1 view .LVU610
 355:src/console.c ****     break;
 2377              		.loc 2 355 7 is_stmt 0 view .LVU611
 2378 012a 84E80300 		stm	r4, {r0, r1}
 356:src/console.c ****   case DOTS:
 2379              		.loc 2 356 5 view .LVU612
 2380 012e A5E7     		b	.L177
 2381              	.LVL193:
 2382              	.L167:
 350:src/console.c ****     r = no_key;
 2383              		.loc 2 350 5 is_stmt 1 view .LVU613
 2384 0130 FFF7FEFF 		bl	save_prog_file
 2385              	.LVL194:
 351:src/console.c ****     break;
 2386              		.loc 2 351 5 view .LVU614
 351:src/console.c ****     break;
 2387              		.loc 2 351 7 is_stmt 0 view .LVU615
 2388 0134 184B     		ldr	r3, .L181+8
 2389 0136 93E80300 		ldm	r3, {r0, r1}
 2390 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2391              	.LVL195:
 352:src/console.c ****   case HELP:
 2392              		.loc 2 352 5 is_stmt 1 view .LVU616
 351:src/console.c ****     break;
 2393              		.loc 2 351 7 is_stmt 0 view .LVU617
 2394 013c 84E80300 		stm	r4, {r0, r1}
 352:src/console.c ****   case HELP:
 2395              		.loc 2 352 5 view .LVU618
 2396 0140 9CE7     		b	.L177
 2397              	.LVL196:
 2398              	.L166:
 358:src/console.c ****     r = no_key;
 2399              		.loc 2 358 5 is_stmt 1 view .LVU619
 2400 0142 FFF7FEFF 		bl	do_all_dots
 2401              	.LVL197:
 359:src/console.c ****     break;
 2402              		.loc 2 359 5 view .LVU620
 359:src/console.c ****     break;
 2403              		.loc 2 359 7 is_stmt 0 view .LVU621
 2404 0146 144B     		ldr	r3, .L181+8
 2405 0148 93E80300 		ldm	r3, {r0, r1}
 2406 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2407              	.LVL198:
 360:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 2408              		.loc 2 360 5 is_stmt 1 view .LVU622
 359:src/console.c ****     break;
 2409              		.loc 2 359 7 is_stmt 0 view .LVU623
 2410 014e 84E80300 		stm	r4, {r0, r1}
 360:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 2411              		.loc 2 360 5 view .LVU624
ARM GAS  /tmp/ccGGa0st.s 			page 65


 2412 0152 93E7     		b	.L177
 2413              	.LVL199:
 2414              	.L165:
 362:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 2415              		.loc 2 362 5 is_stmt 1 view .LVU625
 2416              	.LBB101:
 2417              	.LBI101:
 305:src/console.c ****   struct _ndmap temp;
 2418              		.loc 2 305 6 view .LVU626
 2419              	.LBB102:
 306:src/console.c ****   temp.key_34s = key;
 2420              		.loc 2 306 3 view .LVU627
 307:src/console.c ****   temp.shift = shift;
 2421              		.loc 2 307 3 view .LVU628
 307:src/console.c ****   temp.shift = shift;
 2422              		.loc 2 307 16 is_stmt 0 view .LVU629
 2423 0154 6323     		movs	r3, #99
 308:src/console.c ****   process_keycode_with_shift (temp);
 2424              		.loc 2 308 14 view .LVU630
 2425 0156 0027     		movs	r7, #0
 307:src/console.c ****   temp.shift = shift;
 2426              		.loc 2 307 16 view .LVU631
 2427 0158 8DF80830 		strb	r3, [sp, #8]
 308:src/console.c ****   process_keycode_with_shift (temp);
 2428              		.loc 2 308 3 is_stmt 1 view .LVU632
 308:src/console.c ****   process_keycode_with_shift (temp);
 2429              		.loc 2 308 14 is_stmt 0 view .LVU633
 2430 015c 0397     		str	r7, [sp, #12]
 309:src/console.c **** }
 2431              		.loc 2 309 3 is_stmt 1 view .LVU634
 2432 015e 02AE     		add	r6, sp, #8
 2433 0160 96E80300 		ldm	r6, {r0, r1}
 2434              	.LVL200:
 309:src/console.c **** }
 2435              		.loc 2 309 3 is_stmt 0 view .LVU635
 2436 0164 FFF7FEFF 		bl	process_keycode_with_shift
 2437              	.LVL201:
 309:src/console.c **** }
 2438              		.loc 2 309 3 view .LVU636
 2439              	.LBE102:
 2440              	.LBE101:
 363:src/console.c ****     r = no_key;
 2441              		.loc 2 363 5 is_stmt 1 view .LVU637
 2442              	.LBB103:
 2443              	.LBI103:
 305:src/console.c ****   struct _ndmap temp;
 2444              		.loc 2 305 6 view .LVU638
 2445              	.LBB104:
 306:src/console.c ****   temp.key_34s = key;
 2446              		.loc 2 306 3 view .LVU639
 307:src/console.c ****   temp.shift = shift;
 2447              		.loc 2 307 3 view .LVU640
 307:src/console.c ****   temp.shift = shift;
 2448              		.loc 2 307 16 is_stmt 0 view .LVU641
 2449 0168 3323     		movs	r3, #51
 2450 016a 8DF80830 		strb	r3, [sp, #8]
 308:src/console.c ****   process_keycode_with_shift (temp);
ARM GAS  /tmp/ccGGa0st.s 			page 66


 2451              		.loc 2 308 3 is_stmt 1 view .LVU642
 309:src/console.c **** }
 2452              		.loc 2 309 3 view .LVU643
 308:src/console.c ****   process_keycode_with_shift (temp);
 2453              		.loc 2 308 14 is_stmt 0 view .LVU644
 2454 016e 0397     		str	r7, [sp, #12]
 309:src/console.c **** }
 2455              		.loc 2 309 3 view .LVU645
 2456 0170 96E80300 		ldm	r6, {r0, r1}
 2457 0174 FFF7FEFF 		bl	process_keycode_with_shift
 2458              	.LVL202:
 309:src/console.c **** }
 2459              		.loc 2 309 3 view .LVU646
 2460              	.LBE104:
 2461              	.LBE103:
 364:src/console.c ****     break;
 2462              		.loc 2 364 5 is_stmt 1 view .LVU647
 364:src/console.c ****     break;
 2463              		.loc 2 364 7 is_stmt 0 view .LVU648
 2464 0178 074B     		ldr	r3, .L181+8
 2465 017a 93E80300 		ldm	r3, {r0, r1}
 2466 017e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2467              	.LVL203:
 365:src/console.c ****   case DEFMEN:
 2468              		.loc 2 365 5 is_stmt 1 view .LVU649
 364:src/console.c ****     break;
 2469              		.loc 2 364 7 is_stmt 0 view .LVU650
 2470 0180 84E80300 		stm	r4, {r0, r1}
 365:src/console.c ****   case DEFMEN:
 2471              		.loc 2 365 5 view .LVU651
 2472 0184 7AE7     		b	.L177
 2473              	.LVL204:
 2474              	.L180:
 2475              	.LBB105:
 2476              	.LBB90:
 102:src/menu.c    ****   }
 2477              		.loc 1 102 5 is_stmt 1 view .LVU652
 102:src/menu.c    ****   }
 2478              		.loc 1 102 38 is_stmt 0 view .LVU653
 2479 0186 C3F10F03 		rsb	r3, r3, #15
 102:src/menu.c    ****   }
 2480              		.loc 1 102 33 view .LVU654
 2481 018a 0B60     		str	r3, [r1]
 102:src/menu.c    ****   }
 2482              		.loc 1 102 18 view .LVU655
 2483 018c 1360     		str	r3, [r2]
 2484              	.LBE90:
 2485              	.LBE105:
 368:src/console.c ****     break;
 2486              		.loc 2 368 5 is_stmt 1 view .LVU656
 2487 018e 51E7     		b	.L162
 2488              	.L182:
 2489              		.align	2
 2490              	.L181:
 2491 0190 00000000 		.word	.LANCHOR2
 2492 0194 00000000 		.word	.LANCHOR1
 2493 0198 00000000 		.word	.LANCHOR8
ARM GAS  /tmp/ccGGa0st.s 			page 67


 2494 019c 49040008 		.word	134218825
 2495 01a0 00000000 		.word	.LC11
 2496              		.cfi_endproc
 2497              	.LFE27:
 2499              		.section	.text.program_main,"ax",%progbits
 2500              		.align	1
 2501              		.p2align 2,,3
 2502              		.global	program_main
 2503              		.syntax unified
 2504              		.thumb
 2505              		.thumb_func
 2506              		.fpu fpv4-sp-d16
 2508              	program_main:
 2509              	.LFB28:
 375:src/console.c **** 
 376:src/console.c **** void program_main(){
 2510              		.loc 2 376 20 view -0
 2511              		.cfi_startproc
 2512              		@ args = 0, pretend = 0, frame = 16
 2513              		@ frame_needed = 0, uses_anonymous_args = 0
 377:src/console.c ****   int c;
 2514              		.loc 2 377 3 view .LVU658
 378:src/console.c ****   struct _ndmap remapped;
 2515              		.loc 2 378 3 view .LVU659
 379:src/console.c **** 
 380:src/console.c ****   init_mem();
 2516              		.loc 2 380 3 view .LVU660
 376:src/console.c ****   int c;
 2517              		.loc 2 376 20 is_stmt 0 view .LVU661
 2518 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2519              		.cfi_def_cfa_offset 32
 2520              		.cfi_offset 4, -32
 2521              		.cfi_offset 5, -28
 2522              		.cfi_offset 6, -24
 2523              		.cfi_offset 7, -20
 2524              		.cfi_offset 8, -16
 2525              		.cfi_offset 9, -12
 2526              		.cfi_offset 10, -8
 2527              		.cfi_offset 14, -4
 2528 0004 84B0     		sub	sp, sp, #16
 2529              		.cfi_def_cfa_offset 48
 2530              		.loc 2 380 3 view .LVU662
 2531 0006 FFF7FEFF 		bl	init_mem
 2532              	.LVL205:
 381:src/console.c ****   init_RegionTab();
 2533              		.loc 2 381 3 is_stmt 1 view .LVU663
 2534 000a FFF7FEFF 		bl	init_RegionTab
 2535              	.LVL206:
 382:src/console.c ****   init_34s();
 2536              		.loc 2 382 3 view .LVU664
 2537 000e FFF7FEFF 		bl	init_34s
 2538              	.LVL207:
 383:src/console.c ****   State2.flags = 1;  
 2539              		.loc 2 383 3 view .LVU665
 2540              		.loc 2 383 16 is_stmt 0 view .LVU666
 2541 0012 AC4A     		ldr	r2, .L282
 2542 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
ARM GAS  /tmp/ccGGa0st.s 			page 68


 2543 0016 43F00103 		orr	r3, r3, #1
 2544 001a 1376     		strb	r3, [r2, #24]
 384:src/console.c ****   check_create_wp34sdir();
 2545              		.loc 2 384 3 is_stmt 1 view .LVU667
 2546 001c FFF7FEFF 		bl	check_create_wp34sdir
 2547              	.LVL208:
 385:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 2548              		.loc 2 385 3 view .LVU668
 2549              		.loc 2 385 8 is_stmt 0 view .LVU669
 2550 0020 0020     		movs	r0, #0
 2551 0022 FFF7FEFF 		bl	load_ram_file
 2552              	.LVL209:
 2553              		.loc 2 385 6 view .LVU670
 2554 0026 08B9     		cbnz	r0, .L184
 2555              		.loc 2 385 26 is_stmt 1 discriminator 1 view .LVU671
 2556              		.loc 2 385 34 is_stmt 0 discriminator 1 view .LVU672
 2557 0028 A74B     		ldr	r3, .L282+4
 2558 002a 1860     		str	r0, [r3]
 2559              	.L184:
 386:src/console.c ****   load_backup_file(0);
 2560              		.loc 2 386 3 is_stmt 1 view .LVU673
 387:src/console.c ****   load_lib_file(0);
 388:src/console.c ****   t20->newln = 0;
 2561              		.loc 2 388 3 is_stmt 0 view .LVU674
 2562 002c A74C     		ldr	r4, .L282+8
 2563              	.LBB121:
 2564              	.LBB122:
 111:src/menu.c    **** }
 2565              		.loc 1 111 3 view .LVU675
 2566 002e A84E     		ldr	r6, .L282+12
 2567              	.LBE122:
 2568              	.LBE121:
 389:src/console.c ****   t20->lnfill = 0;
 390:src/console.c ****   t20->fixed = 1;
 391:src/console.c ****   t20->xspc = -2;
 392:src/console.c ****   t20->bgfill = 0;
 393:src/console.c ****   run_menu_item_app = run_menu_item;
 394:src/console.c ****   menu_line_str_app = menu_line_str;
 395:src/console.c **** 
 396:src/console.c ****   display();
 397:src/console.c ****   display_current_menu();
 398:src/console.c ****   lcd_refresh();
 399:src/console.c ****   JustDisplayed = 0;
 400:src/console.c ****   /*
 401:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 402:src/console.c ****     Sleeps peacefully while waiting for a key.
 403:src/console.c ****     Handles (in principle!) turning off and on.
 404:src/console.c ****     =================
 405:src/console.c ****     Main event loop
 406:src/console.c ****     =================
 407:src/console.c **** 
 408:src/console.c ****     Status flags:
 409:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 410:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 411:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 412:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 413:src/console.c ****   */
ARM GAS  /tmp/ccGGa0st.s 			page 69


 414:src/console.c ****   for(;;) {
 415:src/console.c **** 
 416:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 417:src/console.c ****       {
 418:src/console.c **** 	CLR_ST(STAT_RUNNING);
 419:src/console.c **** 	sys_sleep();
 420:src/console.c ****       }
 421:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 2569              		.loc 2 421 35 view .LVU676
 2570 0030 A84F     		ldr	r7, .L282+16
 422:src/console.c ****     {
 423:src/console.c ****       CLR_ST(STAT_RUNNING);
 424:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2571              		.loc 2 424 7 view .LVU677
 2572 0032 DFF82083 		ldr	r8, .L282+144
 386:src/console.c ****   load_lib_file(0);
 2573              		.loc 2 386 3 view .LVU678
 2574 0036 0020     		movs	r0, #0
 2575 0038 FFF7FEFF 		bl	load_backup_file
 2576              	.LVL210:
 387:src/console.c ****   t20->newln = 0;
 2577              		.loc 2 387 3 is_stmt 1 view .LVU679
 2578 003c 0020     		movs	r0, #0
 2579 003e FFF7FEFF 		bl	load_lib_file
 2580              	.LVL211:
 388:src/console.c ****   t20->lnfill = 0;
 2581              		.loc 2 388 3 view .LVU680
 2582 0042 236B     		ldr	r3, [r4, #48]
 389:src/console.c ****   t20->fixed = 1;
 2583              		.loc 2 389 3 view .LVU681
 390:src/console.c ****   t20->xspc = -2;
 2584              		.loc 2 390 3 view .LVU682
 393:src/console.c ****   menu_line_str_app = menu_line_str;
 2585              		.loc 2 393 21 is_stmt 0 view .LVU683
 2586 0044 A44A     		ldr	r2, .L282+20
 390:src/console.c ****   t20->xspc = -2;
 2587              		.loc 2 390 14 view .LVU684
 2588 0046 0121     		movs	r1, #1
 2589 0048 1974     		strb	r1, [r3, #16]
 391:src/console.c ****   t20->bgfill = 0;
 2590              		.loc 2 391 3 is_stmt 1 view .LVU685
 392:src/console.c ****   run_menu_item_app = run_menu_item;
 2591              		.loc 2 392 15 is_stmt 0 view .LVU686
 2592 004a 0025     		movs	r5, #0
 391:src/console.c ****   t20->bgfill = 0;
 2593              		.loc 2 391 13 view .LVU687
 2594 004c FE21     		movs	r1, #254
 2595 004e 9973     		strb	r1, [r3, #14]
 392:src/console.c ****   run_menu_item_app = run_menu_item;
 2596              		.loc 2 392 3 is_stmt 1 view .LVU688
 392:src/console.c ****   run_menu_item_app = run_menu_item;
 2597              		.loc 2 392 15 is_stmt 0 view .LVU689
 2598 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 388:src/console.c ****   t20->lnfill = 0;
 2599              		.loc 2 388 14 view .LVU690
 2600 0052 1D75     		strb	r5, [r3, #20]
 393:src/console.c ****   menu_line_str_app = menu_line_str;
ARM GAS  /tmp/ccGGa0st.s 			page 70


 2601              		.loc 2 393 3 is_stmt 1 view .LVU691
 394:src/console.c **** 
 2602              		.loc 2 394 21 is_stmt 0 view .LVU692
 2603 0054 A14B     		ldr	r3, .L282+24
 393:src/console.c ****   menu_line_str_app = menu_line_str;
 2604              		.loc 2 393 21 view .LVU693
 2605 0056 E260     		str	r2, [r4, #12]
 394:src/console.c **** 
 2606              		.loc 2 394 3 is_stmt 1 view .LVU694
 394:src/console.c **** 
 2607              		.loc 2 394 21 is_stmt 0 view .LVU695
 2608 0058 2361     		str	r3, [r4, #16]
 396:src/console.c ****   display_current_menu();
 2609              		.loc 2 396 3 is_stmt 1 view .LVU696
 2610 005a FFF7FEFF 		bl	display
 2611              	.LVL212:
 397:src/console.c ****   lcd_refresh();
 2612              		.loc 2 397 3 view .LVU697
 2613              	.LBB124:
 2614              	.LBI121:
 110:src/menu.c    ****   display_menu (current_menu);
 2615              		.loc 1 110 6 view .LVU698
 2616              	.LBB123:
 111:src/menu.c    **** }
 2617              		.loc 1 111 3 view .LVU699
 2618 005e 3068     		ldr	r0, [r6]
 2619 0060 FFF7FEFF 		bl	display_menu
 2620              	.LVL213:
 2621              	.LBE123:
 2622              	.LBE124:
 398:src/console.c ****   JustDisplayed = 0;
 2623              		.loc 2 398 3 view .LVU700
 2624 0064 9E4B     		ldr	r3, .L282+28
 2625 0066 9847     		blx	r3
 2626              	.LVL214:
 399:src/console.c ****   /*
 2627              		.loc 2 399 3 view .LVU701
 399:src/console.c ****   /*
 2628              		.loc 2 399 17 is_stmt 0 view .LVU702
 2629 0068 9E4B     		ldr	r3, .L282+32
 2630 006a 1D60     		str	r5, [r3]
 2631              	.L185:
 414:src/console.c **** 
 2632              		.loc 2 414 3 is_stmt 1 view .LVU703
 416:src/console.c ****       {
 2633              		.loc 2 416 5 view .LVU704
 416:src/console.c ****       {
 2634              		.loc 2 416 10 is_stmt 0 view .LVU705
 2635 006c 2368     		ldr	r3, [r4]
 416:src/console.c ****       {
 2636              		.loc 2 416 8 view .LVU706
 2637 006e 9D05     		lsls	r5, r3, #22
 2638 0070 40F18380 		bpl	.L186
 2639              	.L266:
 416:src/console.c ****       {
 2640              		.loc 2 416 30 discriminator 1 view .LVU707
 2641 0074 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccGGa0st.s 			page 71


 416:src/console.c ****       {
 2642              		.loc 2 416 27 discriminator 1 view .LVU708
 2643 0076 5807     		lsls	r0, r3, #29
 2644 0078 7FD5     		bpl	.L186
 418:src/console.c **** 	sys_sleep();
 2645              		.loc 2 418 2 is_stmt 1 view .LVU709
 2646 007a 2368     		ldr	r3, [r4]
 419:src/console.c ****       }
 2647              		.loc 2 419 2 is_stmt 0 view .LVU710
 2648 007c 9A4A     		ldr	r2, .L282+36
 418:src/console.c **** 	sys_sleep();
 2649              		.loc 2 418 2 view .LVU711
 2650 007e 23F00203 		bic	r3, r3, #2
 2651 0082 2360     		str	r3, [r4]
 419:src/console.c ****       }
 2652              		.loc 2 419 2 is_stmt 1 view .LVU712
 2653 0084 9047     		blx	r2
 2654              	.LVL215:
 2655              	.L187:
 425:src/console.c ****       sys_sleep();
 426:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 427:src/console.c **** 	key_push (K_HEARTBEAT);
 428:src/console.c **** 	if (Pause > 0) Pause--;
 429:src/console.c ****       }
 430:src/console.c ****       sys_timer_disable(0); // stop timer
 431:src/console.c ****     }
 432:src/console.c ****     
 433:src/console.c ****     // Wakeup in off state or going to sleep
 434:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 2656              		.loc 2 434 5 view .LVU713
 2657              		.loc 2 434 9 is_stmt 0 view .LVU714
 2658 0086 2368     		ldr	r3, [r4]
 2659              		.loc 2 434 8 view .LVU715
 2660 0088 9905     		lsls	r1, r3, #22
 2661 008a 00F19C80 		bmi	.L193
 2662              	.L267:
 2663              		.loc 2 434 29 discriminator 1 view .LVU716
 2664 008e 2368     		ldr	r3, [r4]
 2665              		.loc 2 434 26 discriminator 1 view .LVU717
 2666 0090 5A07     		lsls	r2, r3, #29
 2667 0092 00F19880 		bmi	.L193
 435:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 436:src/console.c ****         // Going to off mode
 437:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 438:src/console.c ****         draw_power_off_image(1);
 439:src/console.c **** 
 440:src/console.c ****         LCD_power_off(0);
 441:src/console.c ****         SET_ST(STAT_SUSPENDED);
 442:src/console.c ****         SET_ST(STAT_OFF);
 443:src/console.c ****       }
 444:src/console.c ****       // Already in OFF -> just continue to sleep above
 445:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 446:src/console.c ****       // thus reaching the sleep()
 447:src/console.c ****     }
 448:src/console.c **** 
 449:src/console.c ****     // Well, we are woken-up
 450:src/console.c ****     SET_ST(STAT_RUNNING);
ARM GAS  /tmp/ccGGa0st.s 			page 72


 2668              		.loc 2 450 5 is_stmt 1 view .LVU718
 2669 0096 2368     		ldr	r3, [r4]
 2670 0098 43F00203 		orr	r3, r3, #2
 2671 009c 2360     		str	r3, [r4]
 451:src/console.c **** 
 452:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 453:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 2672              		.loc 2 453 5 view .LVU719
 2673 009e 2368     		ldr	r3, [r4]
 2674 00a0 23F00403 		bic	r3, r3, #4
 2675 00a4 2360     		str	r3, [r4]
 454:src/console.c **** 
 455:src/console.c ****     // Get up from OFF state
 456:src/console.c ****     if ( ST(STAT_OFF) ) {
 2676              		.loc 2 456 5 view .LVU720
 2677              		.loc 2 456 10 is_stmt 0 view .LVU721
 2678 00a6 2368     		ldr	r3, [r4]
 2679              		.loc 2 456 8 view .LVU722
 2680 00a8 DB06     		lsls	r3, r3, #27
 2681 00aa 0ED5     		bpl	.L198
 457:src/console.c ****       LCD_power_on();
 2682              		.loc 2 457 7 is_stmt 1 view .LVU723
 2683 00ac 8F4B     		ldr	r3, .L282+40
 2684 00ae 9847     		blx	r3
 2685              	.LVL216:
 458:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 2686              		.loc 2 458 7 view .LVU724
 2687 00b0 8F4B     		ldr	r3, .L282+44
 2688 00b2 9847     		blx	r3
 2689              	.LVL217:
 459:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 2690              		.loc 2 459 7 view .LVU725
 2691 00b4 8F4B     		ldr	r3, .L282+48
 2692 00b6 9847     		blx	r3
 2693              	.LVL218:
 460:src/console.c **** 
 461:src/console.c ****       CLR_ST(STAT_OFF);
 2694              		.loc 2 461 7 view .LVU726
 2695 00b8 2368     		ldr	r3, [r4]
 462:src/console.c **** 
 463:src/console.c ****       if ( !lcd_get_buf_cleared() )
 2696              		.loc 2 463 13 is_stmt 0 view .LVU727
 2697 00ba 8F4A     		ldr	r2, .L282+52
 461:src/console.c **** 
 2698              		.loc 2 461 7 view .LVU728
 2699 00bc 23F01003 		bic	r3, r3, #16
 2700 00c0 2360     		str	r3, [r4]
 2701              		.loc 2 463 7 is_stmt 1 view .LVU729
 2702              		.loc 2 463 13 is_stmt 0 view .LVU730
 2703 00c2 9047     		blx	r2
 2704              	.LVL219:
 2705              		.loc 2 463 10 view .LVU731
 2706 00c4 08B9     		cbnz	r0, .L198
 464:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 2707              		.loc 2 464 9 is_stmt 1 view .LVU732
 2708 00c6 8D4B     		ldr	r3, .L282+56
 2709 00c8 9847     		blx	r3
ARM GAS  /tmp/ccGGa0st.s 			page 73


 2710              	.LVL220:
 2711              	.L198:
 465:src/console.c ****     }
 466:src/console.c **** 
 467:src/console.c ****     // Key is ready -> clear auto off timer
 468:src/console.c ****     //    if ( !key_empty() )
 469:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 470:src/console.c ****     // Fetch the key
 471:src/console.c ****     //  < 0 -> No key event
 472:src/console.c ****     //  > 0 -> Key pressed
 473:src/console.c ****     // == 0 -> Key released
 474:src/console.c ****     c = key_pop();
 2712              		.loc 2 474 5 view .LVU733
 2713              		.loc 2 474 9 is_stmt 0 view .LVU734
 2714 00ca 8D4B     		ldr	r3, .L282+60
 2715 00cc 9847     		blx	r3
 2716              	.LVL221:
 475:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2717              		.loc 2 475 8 view .LVU735
 2718 00ce 6228     		cmp	r0, #98
 474:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2719              		.loc 2 474 9 view .LVU736
 2720 00d0 0546     		mov	r5, r0
 2721              	.LVL222:
 2722              		.loc 2 475 5 is_stmt 1 view .LVU737
 2723              		.loc 2 475 8 is_stmt 0 view .LVU738
 2724 00d2 00F09280 		beq	.L200
 2725              		.loc 2 475 29 discriminator 1 view .LVU739
 2726 00d6 0028     		cmp	r0, #0
 2727 00d8 40F38C80 		ble	.L201
 476:src/console.c ****       reset_auto_off();
 2728              		.loc 2 476 7 is_stmt 1 view .LVU740
 2729 00dc 894B     		ldr	r3, .L282+64
 2730 00de 9847     		blx	r3
 2731              	.LVL223:
 477:src/console.c ****       start_key_timer();
 2732              		.loc 2 477 7 view .LVU741
 2733              	.LBB125:
 2734              	.LBI125:
 247:src/console.c ****     start_ticks = get_rtc_ticks();
 2735              		.loc 2 247 6 view .LVU742
 2736              	.LBB126:
 248:src/console.c **** }
 2737              		.loc 2 248 5 view .LVU743
 248:src/console.c **** }
 2738              		.loc 2 248 19 is_stmt 0 view .LVU744
 2739 00e0 894B     		ldr	r3, .L282+68
 2740 00e2 9847     		blx	r3
 2741              	.LVL224:
 248:src/console.c **** }
 2742              		.loc 2 248 17 view .LVU745
 2743 00e4 894B     		ldr	r3, .L282+72
 2744              	.LBE126:
 2745              	.LBE125:
 2746              	.LBB128:
 2747              	.LBB129:
  61:src/console.c **** 
ARM GAS  /tmp/ccGGa0st.s 			page 74


 2748              		.loc 2 61 6 view .LVU746
 2749 00e6 632D     		cmp	r5, #99
 2750              	.LBE129:
 2751              	.LBE128:
 2752              	.LBB140:
 2753              	.LBB127:
 248:src/console.c **** }
 2754              		.loc 2 248 17 view .LVU747
 2755 00e8 1860     		str	r0, [r3]
 2756              	.LBE127:
 2757              	.LBE140:
 478:src/console.c ****     }
 479:src/console.c ****     if (c >= 0) {
 2758              		.loc 2 479 5 is_stmt 1 view .LVU748
 480:src/console.c ****       remapped = remap(c);
 2759              		.loc 2 480 7 view .LVU749
 2760              	.LVL225:
 2761              	.LBB141:
 2762              	.LBI128:
  53:src/console.c **** 
 2763              		.loc 2 53 22 view .LVU750
 2764              	.LBB131:
  55:src/console.c **** 
 2765              		.loc 2 55 3 view .LVU751
 2766              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 2767              		.loc 3 1 1 view .LVU752
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
ARM GAS  /tmp/ccGGa0st.s 			page 75


  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 2768              		.loc 3 59 3 view .LVU753
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU, 14}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
ARM GAS  /tmp/ccGGa0st.s 			page 76


  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  96:src/keytran.c ****     {K_NOP, 0}, // no function
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 2769              		.loc 3 117 3 view .LVU754
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
ARM GAS  /tmp/ccGGa0st.s 			page 77


 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 2770              		.loc 3 175 1 view .LVU755
 176:src/keytran.c ****     {K_RELEASE, -1},
 177:src/keytran.c ****     // Top row of DM42 1--6
 178:src/keytran.c ****     {K00, -1},
 179:src/keytran.c ****     {K01, -1},
 180:src/keytran.c ****     {K02, -1},
 181:src/keytran.c ****     {K03, -1},
 182:src/keytran.c ****     {K04, -1},
 183:src/keytran.c ****     {K05, -1},
 184:src/keytran.c ****     // Next row of DM42 7--12
 185:src/keytran.c ****     {K10, -1},
 186:src/keytran.c ****     {K11, -1},
 187:src/keytran.c ****     {K12, -1},
 188:src/keytran.c ****     {K13, -1},
 189:src/keytran.c ****     {K14, -1},
 190:src/keytran.c ****     {K15, -1},
 191:src/keytran.c ****     // Third row of DM42 13--17
 192:src/keytran.c ****     {K20, -1},
 193:src/keytran.c ****     {K21, -1},
 194:src/keytran.c ****     {K22, -1},
 195:src/keytran.c ****     {K23, -1},
 196:src/keytran.c ****     {K24, -1},
 197:src/keytran.c ****     // Fourth row of DM42 18--22
 198:src/keytran.c ****     {K30, -1},
 199:src/keytran.c ****     {K31, -1},
ARM GAS  /tmp/ccGGa0st.s 			page 78


 200:src/keytran.c ****     {K32, -1},
 201:src/keytran.c ****     {K33, -1},
 202:src/keytran.c ****     {K34, -1},
 203:src/keytran.c ****     // Fifth row of DM42 23--27
 204:src/keytran.c ****     {K40, -1},
 205:src/keytran.c ****     {K41, -1},
 206:src/keytran.c ****     {K42, -1},
 207:src/keytran.c ****     {K43, -1},
 208:src/keytran.c ****     {K44, -1},
 209:src/keytran.c ****     // Sixth row of DM42 28--32
 210:src/keytran.c ****     {K50, -1},
 211:src/keytran.c ****     {K51, -1},
 212:src/keytran.c ****     {K52, -1},
 213:src/keytran.c ****     {K53, -1},
 214:src/keytran.c ****     {K54, -1},
 215:src/keytran.c ****     // Last row of DM42 33--37
 216:src/keytran.c ****     {K60, -1},
 217:src/keytran.c ****     {K61, -1},
 218:src/keytran.c ****     {K62, -1},
 219:src/keytran.c ****     {K63, -1},
 220:src/keytran.c ****     {K64, -1},
 221:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 222:src/keytran.c ****     {K_NOP, -1},
 223:src/keytran.c ****     {K_NOP, -1},
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_ARROW, -1}, //F5 is always K_ARROW in all menus
 227:src/keytran.c ****     {K_NOP, -1},
 228:src/keytran.c ****     {K_NOP, -1},
 229:src/keytran.c ****     {K_NOP, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c **** };
 232:src/keytran.c **** 
 233:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 2771              		.loc 3 233 1 view .LVU756
  59:src/console.c **** 
 2772              		.loc 2 59 3 view .LVU757
  61:src/console.c **** 
 2773              		.loc 2 61 3 view .LVU758
  61:src/console.c **** 
 2774              		.loc 2 61 6 is_stmt 0 view .LVU759
 2775 00ea 00F0E280 		beq	.L263
  63:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 2776              		.loc 2 63 3 is_stmt 1 view .LVU760
  63:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 2777              		.loc 2 63 6 is_stmt 0 view .LVU761
 2778 00ee 2C2D     		cmp	r5, #44
 2779 00f0 00F0AB80 		beq	.L239
 2780              	.LVL226:
 2781              	.L238:
  68:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2782              		.loc 2 68 3 is_stmt 1 view .LVU762
  68:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2783              		.loc 2 68 8 is_stmt 0 view .LVU763
 2784 00f4 FFF7FEFF 		bl	get_alpha_state
 2785              	.LVL227:
  68:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
ARM GAS  /tmp/ccGGa0st.s 			page 79


 2786              		.loc 2 68 6 view .LVU764
 2787 00f8 0028     		cmp	r0, #0
 2788 00fa 00F0C980 		beq	.L205
  69:src/console.c ****       switch (cur_shift()) { 
 2789              		.loc 2 69 5 is_stmt 1 view .LVU765
  69:src/console.c ****       switch (cur_shift()) { 
 2790              		.loc 2 69 8 is_stmt 0 view .LVU766
 2791 00fe 1C2D     		cmp	r5, #28
 2792 0100 00F03A81 		beq	.L264
  86:src/console.c ****   }
 2793              		.loc 2 86 5 is_stmt 1 view .LVU767
  86:src/console.c ****   }
 2794              		.loc 2 86 26 is_stmt 0 view .LVU768
 2795 0104 824B     		ldr	r3, .L282+76
 2796              	.L260:
 119:src/console.c ****     break;
 2797              		.loc 2 119 26 view .LVU769
 2798 0106 03EBC502 		add	r2, r3, r5, lsl #3
 2799 010a 92E80300 		ldm	r2, {r0, r1}
 2800 010e 0DF1080A 		add	r10, sp, #8
 2801 0112 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 2802              	.LVL228:
 119:src/console.c ****     break;
 2803              		.loc 2 119 26 view .LVU770
 2804 0116 8AE80300 		stm	r10, {r0, r1}
 2805 011a 8946     		mov	r9, r1
 2806              	.LVL229:
 2807              	.L203:
 119:src/console.c ****     break;
 2808              		.loc 2 119 26 view .LVU771
 2809              	.LBE131:
 2810              	.LBE141:
 481:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2811              		.loc 2 481 7 is_stmt 1 view .LVU772
 2812              		.loc 2 481 10 is_stmt 0 view .LVU773
 2813 011c 2F2D     		cmp	r5, #47
 2814 011e 77D0     		beq	.L265
 2815              	.LVL230:
 2816              	.L228:
 482:src/console.c **** 	set_menu ( remapped.shift );
 483:src/console.c **** 	display_current_menu ();
 484:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 485:src/console.c **** 	case SHIFT_F:
 486:src/console.c **** 	  remapped = f_shift; // F -> N
 487:src/console.c **** 	  break;
 488:src/console.c **** 	case SHIFT_G:
 489:src/console.c **** 	  remapped = g_shift; // G -> N
 490:src/console.c **** 	  break;
 491:src/console.c **** 	case SHIFT_H:
 492:src/console.c **** 	  remapped = h_shift; // H -> N
 493:src/console.c **** 	default:
 494:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 495:src/console.c **** 	}
 496:src/console.c ****       }
 497:src/console.c ****       if (remapped.key_34s == K_SYS) {
 2817              		.loc 2 497 7 is_stmt 1 view .LVU774
 2818              		.loc 2 497 10 is_stmt 0 view .LVU775
ARM GAS  /tmp/ccGGa0st.s 			page 80


 2819 0120 302D     		cmp	r5, #48
 2820 0122 17D1     		bne	.L235
 498:src/console.c **** 	SET_ST(STAT_MENU);
 2821              		.loc 2 498 2 is_stmt 1 view .LVU776
 2822 0124 2368     		ldr	r3, [r4]
 499:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 2823              		.loc 2 499 2 is_stmt 0 view .LVU777
 2824 0126 7B4D     		ldr	r5, .L282+80
 2825              	.LVL231:
 2826              		.loc 2 499 2 view .LVU778
 2827 0128 7B48     		ldr	r0, .L282+84
 2828 012a 0022     		movs	r2, #0
 498:src/console.c **** 	SET_ST(STAT_MENU);
 2829              		.loc 2 498 2 view .LVU779
 2830 012c 43F04003 		orr	r3, r3, #64
 2831              		.loc 2 499 2 view .LVU780
 2832 0130 1146     		mov	r1, r2
 498:src/console.c **** 	SET_ST(STAT_MENU);
 2833              		.loc 2 498 2 view .LVU781
 2834 0132 2360     		str	r3, [r4]
 2835              		.loc 2 499 2 is_stmt 1 view .LVU782
 2836 0134 A847     		blx	r5
 2837              	.LVL232:
 500:src/console.c **** 	CLR_ST(STAT_MENU);
 2838              		.loc 2 500 2 view .LVU783
 501:src/console.c **** 	remapped =  no_key;
 2839              		.loc 2 501 11 is_stmt 0 view .LVU784
 2840 0136 794B     		ldr	r3, .L282+88
 500:src/console.c **** 	CLR_ST(STAT_MENU);
 2841              		.loc 2 500 2 view .LVU785
 2842 0138 2268     		ldr	r2, [r4]
 2843              		.loc 2 501 11 view .LVU786
 2844 013a 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 2845 013c 93E80300 		ldm	r3, {r0, r1}
 500:src/console.c **** 	CLR_ST(STAT_MENU);
 2846              		.loc 2 500 2 view .LVU787
 2847 0140 22F04002 		bic	r2, r2, #64
 2848 0144 2260     		str	r2, [r4]
 2849              		.loc 2 501 2 is_stmt 1 view .LVU788
 2850              	.LVL233:
 2851              		.loc 2 501 11 is_stmt 0 view .LVU789
 2852 0146 04AA     		add	r2, sp, #16
 2853 0148 02E90300 		stmdb	r2, {r0, r1}
 2854              	.LBB142:
 2855              	.LBB143:
 111:src/menu.c    **** }
 2856              		.loc 1 111 3 view .LVU790
 2857 014c 3068     		ldr	r0, [r6]
 2858              	.LBE143:
 2859              	.LBE142:
 2860              		.loc 2 501 11 view .LVU791
 2861 014e 8946     		mov	r9, r1
 2862              	.LVL234:
 502:src/console.c **** 	display_current_menu();
 2863              		.loc 2 502 2 is_stmt 1 view .LVU792
 2864              	.LBB145:
 2865              	.LBI142:
ARM GAS  /tmp/ccGGa0st.s 			page 81


 110:src/menu.c    ****   display_menu (current_menu);
 2866              		.loc 1 110 6 view .LVU793
 2867              	.LBB144:
 111:src/menu.c    **** }
 2868              		.loc 1 111 3 view .LVU794
 2869 0150 FFF7FEFF 		bl	display_menu
 2870              	.LVL235:
 2871              	.L235:
 111:src/menu.c    **** }
 2872              		.loc 1 111 3 is_stmt 0 view .LVU795
 2873              	.LBE144:
 2874              	.LBE145:
 503:src/console.c ****       }
 504:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 2875              		.loc 2 504 7 is_stmt 1 view .LVU796
 2876              		.loc 2 504 10 is_stmt 0 view .LVU797
 2877 0154 312D     		cmp	r5, #49
 2878 0156 7AD0     		beq	.L204
 505:src/console.c **** 	remapped = do_multi (remapped);
 506:src/console.c **** 	display_current_menu();
 507:src/console.c ****       }
 508:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 2879              		.loc 2 508 7 is_stmt 1 view .LVU798
 2880              		.loc 2 508 10 is_stmt 0 view .LVU799
 2881 0158 322D     		cmp	r5, #50
 2882 015a 00F09380 		beq	.L237
 2883              	.LVL236:
 2884              	.L262:
 2885              		.loc 2 508 10 view .LVU800
 2886 015e 0DF1080A 		add	r10, sp, #8
 2887              	.L207:
 2888              	.LVL237:
 509:src/console.c ****       process_keycode_with_shift(remapped);
 2889              		.loc 2 509 7 is_stmt 1 view .LVU801
 2890              		.loc 2 509 7 is_stmt 0 view .LVU802
 2891 0162 8DF80850 		strb	r5, [sp, #8]
 2892 0166 CDF80C90 		str	r9, [sp, #12]
 2893 016a 9AE80300 		ldm	r10, {r0, r1}
 2894 016e FFF7FEFF 		bl	process_keycode_with_shift
 2895              	.LVL238:
 414:src/console.c **** 
 2896              		.loc 2 414 3 is_stmt 1 view .LVU803
 416:src/console.c ****       {
 2897              		.loc 2 416 5 view .LVU804
 416:src/console.c ****       {
 2898              		.loc 2 416 10 is_stmt 0 view .LVU805
 2899 0172 2368     		ldr	r3, [r4]
 416:src/console.c ****       {
 2900              		.loc 2 416 8 view .LVU806
 2901 0174 9D05     		lsls	r5, r3, #22
 2902              	.LVL239:
 416:src/console.c ****       {
 2903              		.loc 2 416 8 view .LVU807
 2904 0176 3FF57DAF 		bmi	.L266
 2905              	.LVL240:
 2906              	.L186:
 421:src/console.c ****     {
ARM GAS  /tmp/ccGGa0st.s 			page 82


 2907              		.loc 2 421 10 is_stmt 1 view .LVU808
 421:src/console.c ****     {
 2908              		.loc 2 421 15 is_stmt 0 view .LVU809
 2909 017a 2568     		ldr	r5, [r4]
 421:src/console.c ****     {
 2910              		.loc 2 421 13 view .LVU810
 2911 017c 15F40075 		ands	r5, r5, #512
 2912 0180 81D1     		bne	.L187
 421:src/console.c ****     {
 2913              		.loc 2 421 35 discriminator 1 view .LVU811
 2914 0182 B847     		blx	r7
 2915              	.LVL241:
 421:src/console.c ****     {
 2916              		.loc 2 421 32 discriminator 1 view .LVU812
 2917 0184 0028     		cmp	r0, #0
 2918 0186 3FF47EAF 		beq	.L187
 423:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2919              		.loc 2 423 7 is_stmt 1 view .LVU813
 2920 018a 2368     		ldr	r3, [r4]
 2921 018c 23F00203 		bic	r3, r3, #2
 424:src/console.c ****       sys_sleep();
 2922              		.loc 2 424 7 is_stmt 0 view .LVU814
 2923 0190 2846     		mov	r0, r5
 2924 0192 6421     		movs	r1, #100
 423:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2925              		.loc 2 423 7 view .LVU815
 2926 0194 2360     		str	r3, [r4]
 424:src/console.c ****       sys_sleep();
 2927              		.loc 2 424 7 is_stmt 1 view .LVU816
 2928 0196 C047     		blx	r8
 2929              	.LVL242:
 425:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 2930              		.loc 2 425 7 view .LVU817
 2931 0198 534B     		ldr	r3, .L282+36
 2932 019a 9847     		blx	r3
 2933              	.LVL243:
 426:src/console.c **** 	key_push (K_HEARTBEAT);
 2934              		.loc 2 426 7 view .LVU818
 426:src/console.c **** 	key_push (K_HEARTBEAT);
 2935              		.loc 2 426 11 is_stmt 0 view .LVU819
 2936 019c 604B     		ldr	r3, .L282+92
 2937 019e 2846     		mov	r0, r5
 2938 01a0 9847     		blx	r3
 2939              	.LVL244:
 426:src/console.c **** 	key_push (K_HEARTBEAT);
 2940              		.loc 2 426 10 view .LVU820
 2941 01a2 48B1     		cbz	r0, .L191
 427:src/console.c **** 	if (Pause > 0) Pause--;
 2942              		.loc 2 427 2 is_stmt 1 view .LVU821
 2943 01a4 5F4B     		ldr	r3, .L282+96
 2944 01a6 6220     		movs	r0, #98
 2945 01a8 9847     		blx	r3
 2946              	.LVL245:
 428:src/console.c ****       }
 2947              		.loc 2 428 2 view .LVU822
 428:src/console.c ****       }
 2948              		.loc 2 428 12 is_stmt 0 view .LVU823
ARM GAS  /tmp/ccGGa0st.s 			page 83


 2949 01aa 5F4B     		ldr	r3, .L282+100
 2950 01ac 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 428:src/console.c ****       }
 2951              		.loc 2 428 5 view .LVU824
 2952 01ae 1AB1     		cbz	r2, .L191
 428:src/console.c ****       }
 2953              		.loc 2 428 17 is_stmt 1 discriminator 1 view .LVU825
 428:src/console.c ****       }
 2954              		.loc 2 428 22 is_stmt 0 discriminator 1 view .LVU826
 2955 01b0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2956 01b2 013A     		subs	r2, r2, #1
 2957 01b4 D2B2     		uxtb	r2, r2
 2958 01b6 1A70     		strb	r2, [r3]
 2959              	.L191:
 430:src/console.c ****     }
 2960              		.loc 2 430 7 is_stmt 1 view .LVU827
 2961 01b8 5C4B     		ldr	r3, .L282+104
 2962 01ba 0020     		movs	r0, #0
 2963 01bc 9847     		blx	r3
 2964              	.LVL246:
 434:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2965              		.loc 2 434 5 view .LVU828
 434:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2966              		.loc 2 434 9 is_stmt 0 view .LVU829
 2967 01be 2368     		ldr	r3, [r4]
 434:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2968              		.loc 2 434 8 view .LVU830
 2969 01c0 9905     		lsls	r1, r3, #22
 2970 01c2 7FF564AF 		bpl	.L267
 2971              	.L193:
 435:src/console.c ****         // Going to off mode
 2972              		.loc 2 435 7 is_stmt 1 view .LVU831
 435:src/console.c ****         // Going to off mode
 2973              		.loc 2 435 12 is_stmt 0 view .LVU832
 2974 01c6 2568     		ldr	r5, [r4]
 435:src/console.c ****         // Going to off mode
 2975              		.loc 2 435 10 view .LVU833
 2976 01c8 15F00405 		ands	r5, r5, #4
 2977 01cc 7FF44EAF 		bne	.L185
 437:src/console.c ****         draw_power_off_image(1);
 2978              		.loc 2 437 9 is_stmt 1 view .LVU834
 2979 01d0 574B     		ldr	r3, .L282+108
 2980 01d2 2846     		mov	r0, r5
 2981 01d4 9847     		blx	r3
 2982              	.LVL247:
 438:src/console.c **** 
 2983              		.loc 2 438 9 view .LVU835
 2984 01d6 574B     		ldr	r3, .L282+112
 2985 01d8 0120     		movs	r0, #1
 2986 01da 9847     		blx	r3
 2987              	.LVL248:
 440:src/console.c ****         SET_ST(STAT_SUSPENDED);
 2988              		.loc 2 440 9 view .LVU836
 2989 01dc 564B     		ldr	r3, .L282+116
 2990 01de 2846     		mov	r0, r5
 2991 01e0 9847     		blx	r3
 2992              	.LVL249:
ARM GAS  /tmp/ccGGa0st.s 			page 84


 441:src/console.c ****         SET_ST(STAT_OFF);
 2993              		.loc 2 441 9 view .LVU837
 2994 01e2 2368     		ldr	r3, [r4]
 2995 01e4 43F00403 		orr	r3, r3, #4
 2996 01e8 2360     		str	r3, [r4]
 442:src/console.c ****       }
 2997              		.loc 2 442 9 view .LVU838
 2998 01ea 2368     		ldr	r3, [r4]
 2999 01ec 43F01003 		orr	r3, r3, #16
 3000 01f0 2360     		str	r3, [r4]
 3001 01f2 3BE7     		b	.L185
 3002              	.LVL250:
 3003              	.L201:
 479:src/console.c ****       remapped = remap(c);
 3004              		.loc 2 479 5 view .LVU839
 479:src/console.c ****       remapped = remap(c);
 3005              		.loc 2 479 8 is_stmt 0 view .LVU840
 3006 01f4 7FF43AAF 		bne	.L185
 3007 01f8 7CE7     		b	.L238
 3008              	.L200:
 479:src/console.c ****       remapped = remap(c);
 3009              		.loc 2 479 5 is_stmt 1 view .LVU841
 480:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3010              		.loc 2 480 7 view .LVU842
 3011              	.LVL251:
 3012              	.LBB146:
  53:src/console.c **** 
 3013              		.loc 2 53 22 view .LVU843
 3014              	.LBB132:
  55:src/console.c **** 
 3015              		.loc 2 55 3 view .LVU844
   1:src/keytran.c ****     // Top row of DM42 1--6
 3016              		.loc 3 1 1 view .LVU845
  59:src/keytran.c ****     {K_RELEASE, -1},
 3017              		.loc 3 59 3 view .LVU846
 117:src/keytran.c ****     {K_RELEASE, -1},
 3018              		.loc 3 117 3 view .LVU847
 175:src/keytran.c ****     {K_RELEASE, -1},
 3019              		.loc 3 175 1 view .LVU848
 3020              		.loc 3 233 1 view .LVU849
  59:src/console.c **** 
 3021              		.loc 2 59 3 view .LVU850
  59:src/console.c **** 
 3022              		.loc 2 59 23 view .LVU851
  59:src/console.c **** 
 3023              		.loc 2 59 30 is_stmt 0 view .LVU852
 3024 01fa 504B     		ldr	r3, .L282+120
 3025              	.LVL252:
 3026              	.L261:
  59:src/console.c **** 
 3027              		.loc 2 59 30 view .LVU853
 3028 01fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3029              	.LVL253:
  59:src/console.c **** 
 3030              		.loc 2 59 30 view .LVU854
 3031 01fe 93E80300 		ldm	r3, {r0, r1}
 3032 0202 0DF1080A 		add	r10, sp, #8
ARM GAS  /tmp/ccGGa0st.s 			page 85


 3033              	.LBE132:
 3034              	.LBE146:
 481:src/console.c **** 	set_menu ( remapped.shift );
 3035              		.loc 2 481 10 view .LVU855
 3036 0206 2F2D     		cmp	r5, #47
 3037              	.LBB147:
 3038              	.LBB133:
  59:src/console.c **** 
 3039              		.loc 2 59 30 view .LVU856
 3040 0208 8AE80300 		stm	r10, {r0, r1}
 3041 020c 8946     		mov	r9, r1
 3042              	.LVL254:
  59:src/console.c **** 
 3043              		.loc 2 59 30 view .LVU857
 3044              	.LBE133:
 3045              	.LBE147:
 481:src/console.c **** 	set_menu ( remapped.shift );
 3046              		.loc 2 481 7 is_stmt 1 view .LVU858
 481:src/console.c **** 	set_menu ( remapped.shift );
 3047              		.loc 2 481 10 is_stmt 0 view .LVU859
 3048 020e 87D1     		bne	.L228
 3049              	.LVL255:
 3050              	.L265:
 482:src/console.c **** 	display_current_menu ();
 3051              		.loc 2 482 2 is_stmt 1 view .LVU860
 3052              	.LBB148:
 3053              	.LBI148:
  86:src/menu.c    ****   int m = current_menu;
 3054              		.loc 1 86 6 view .LVU861
 3055              	.LBB149:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3056              		.loc 1 87 3 view .LVU862
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3057              		.loc 1 87 7 is_stmt 0 view .LVU863
 3058 0210 3368     		ldr	r3, [r6]
 3059              	.LVL256:
  88:src/menu.c    ****     current_menu = default_menu;
 3060              		.loc 1 88 3 is_stmt 1 view .LVU864
  88:src/menu.c    ****     current_menu = default_menu;
 3061              		.loc 1 88 6 is_stmt 0 view .LVU865
 3062 0212 4B45     		cmp	r3, r9
 3063 0214 4FD0     		beq	.L268
  91:src/menu.c    ****     current_menu = last_menu;
 3064              		.loc 1 91 8 is_stmt 1 view .LVU866
  91:src/menu.c    ****     current_menu = last_menu;
 3065              		.loc 1 91 11 is_stmt 0 view .LVU867
 3066 0216 B9F1FF3F 		cmp	r9, #-1
 3067 021a 00F0A580 		beq	.L269
 3068              	.LVL257:
 3069              	.L229:
  95:src/menu.c    ****   }
 3070              		.loc 1 95 5 is_stmt 1 view .LVU868
  95:src/menu.c    ****   }
 3071              		.loc 1 95 18 is_stmt 0 view .LVU869
 3072 021e C6F80090 		str	r9, [r6]
 3073              	.LVL258:
 3074              	.L232:
ARM GAS  /tmp/ccGGa0st.s 			page 86


  97:src/menu.c    **** }
 3075              		.loc 1 97 3 is_stmt 1 view .LVU870
  97:src/menu.c    **** }
 3076              		.loc 1 97 6 is_stmt 0 view .LVU871
 3077 0222 092B     		cmp	r3, #9
 3078 0224 01D0     		beq	.L233
 3079              	.L230:
  97:src/menu.c    **** }
 3080              		.loc 1 97 15 is_stmt 1 view .LVU872
  97:src/menu.c    **** }
 3081              		.loc 1 97 25 is_stmt 0 view .LVU873
 3082 0226 464A     		ldr	r2, .L282+124
 3083 0228 1360     		str	r3, [r2]
 3084              	.L233:
  97:src/menu.c    **** }
 3085              		.loc 1 97 25 view .LVU874
 3086              	.LBE149:
 3087              	.LBE148:
 483:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 3088              		.loc 2 483 2 is_stmt 1 view .LVU875
 3089              	.LBB154:
 3090              	.LBI154:
 110:src/menu.c    ****   display_menu (current_menu);
 3091              		.loc 1 110 6 view .LVU876
 3092              	.LBB155:
 111:src/menu.c    **** }
 3093              		.loc 1 111 3 view .LVU877
 3094 022a 4846     		mov	r0, r9
 3095 022c FFF7FEFF 		bl	display_menu
 3096              	.LVL259:
 3097              	.LBE155:
 3098              	.LBE154:
 484:src/console.c **** 	case SHIFT_F:
 3099              		.loc 2 484 2 view .LVU878
 484:src/console.c **** 	case SHIFT_F:
 3100              		.loc 2 484 10 is_stmt 0 view .LVU879
 3101 0230 FFF7FEFF 		bl	cur_shift
 3102              	.LVL260:
 484:src/console.c **** 	case SHIFT_F:
 3103              		.loc 2 484 2 view .LVU880
 3104 0234 0228     		cmp	r0, #2
 3105 0236 00F08F80 		beq	.L234
 486:src/console.c **** 	  break;
 3106              		.loc 2 486 4 is_stmt 1 view .LVU881
 486:src/console.c **** 	  break;
 3107              		.loc 2 486 13 is_stmt 0 view .LVU882
 3108 023a 424B     		ldr	r3, .L282+128
 3109 023c 93E80300 		ldm	r3, {r0, r1}
 3110 0240 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3111              	.LVL261:
 486:src/console.c **** 	  break;
 3112              		.loc 2 486 13 view .LVU883
 3113 0242 8AE80300 		stm	r10, {r0, r1}
 3114 0246 8946     		mov	r9, r1
 3115              	.LVL262:
 487:src/console.c **** 	case SHIFT_G:
 3116              		.loc 2 487 4 is_stmt 1 view .LVU884
ARM GAS  /tmp/ccGGa0st.s 			page 87


 3117 0248 6AE7     		b	.L228
 3118              	.LVL263:
 3119              	.L239:
 3120              	.LBB156:
 3121              	.LBB134:
 3122              	.LBB130:
  65:src/console.c ****   }
 3123              		.loc 2 65 12 is_stmt 0 view .LVU885
 3124 024a 4FF00C09 		mov	r9, #12
 3125              	.LVL264:
 3126              	.L204:
  65:src/console.c ****   }
 3127              		.loc 2 65 12 view .LVU886
 3128              	.LBE130:
 3129              	.LBE134:
 3130              	.LBE156:
 505:src/console.c **** 	display_current_menu();
 3131              		.loc 2 505 2 is_stmt 1 view .LVU887
 505:src/console.c **** 	display_current_menu();
 3132              		.loc 2 505 13 is_stmt 0 view .LVU888
 3133 024e 3123     		movs	r3, #49
 3134 0250 CDF80C90 		str	r9, [sp, #12]
 3135 0254 8DF80830 		strb	r3, [sp, #8]
 3136 0258 6D46     		mov	r5, sp
 3137 025a 0DF1080A 		add	r10, sp, #8
 3138 025e 9AE80600 		ldm	r10, {r1, r2}
 3139 0262 2846     		mov	r0, r5
 3140 0264 FFF7FEFF 		bl	do_multi
 3141              	.LVL265:
 3142 0268 95E80300 		ldm	r5, {r0, r1}
 3143 026c 8AE80300 		stm	r10, {r0, r1}
 3144 0270 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 3145              	.LVL266:
 3146              	.LBB157:
 3147              	.LBB158:
 111:src/menu.c    **** }
 3148              		.loc 1 111 3 view .LVU889
 3149 0274 3068     		ldr	r0, [r6]
 3150              	.LBE158:
 3151              	.LBE157:
 505:src/console.c **** 	display_current_menu();
 3152              		.loc 2 505 13 view .LVU890
 3153 0276 DDF80C90 		ldr	r9, [sp, #12]
 3154              	.LVL267:
 506:src/console.c ****       }
 3155              		.loc 2 506 2 is_stmt 1 view .LVU891
 3156              	.LBB160:
 3157              	.LBI157:
 110:src/menu.c    ****   display_menu (current_menu);
 3158              		.loc 1 110 6 view .LVU892
 3159              	.LBB159:
 111:src/menu.c    **** }
 3160              		.loc 1 111 3 view .LVU893
 3161 027a FFF7FEFF 		bl	display_menu
 3162              	.LVL268:
 111:src/menu.c    **** }
 3163              		.loc 1 111 3 is_stmt 0 view .LVU894
ARM GAS  /tmp/ccGGa0st.s 			page 88


 3164              	.LBE159:
 3165              	.LBE160:
 508:src/console.c ****       process_keycode_with_shift(remapped);
 3166              		.loc 2 508 7 is_stmt 1 view .LVU895
 508:src/console.c ****       process_keycode_with_shift(remapped);
 3167              		.loc 2 508 10 is_stmt 0 view .LVU896
 3168 027e 322D     		cmp	r5, #50
 3169 0280 7FF46DAF 		bne	.L262
 3170              	.LVL269:
 3171              	.L237:
 510:src/console.c ****     }
 511:src/console.c ****   }
 512:src/console.c ****   save_ram_file(0);
 3172              		.loc 2 512 3 is_stmt 1 view .LVU897
 3173 0284 0020     		movs	r0, #0
 513:src/console.c ****   //  free_storage();
 514:src/console.c ****   return;
 515:src/console.c **** }
 3174              		.loc 2 515 1 is_stmt 0 view .LVU898
 3175 0286 04B0     		add	sp, sp, #16
 3176              		.cfi_remember_state
 3177              		.cfi_def_cfa_offset 32
 3178              		@ sp needed
 3179 0288 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 3180              		.cfi_restore 14
 3181              		.cfi_restore 10
 3182              		.cfi_restore 9
 3183              		.cfi_restore 8
 3184              		.cfi_restore 7
 3185              		.cfi_restore 6
 3186              		.cfi_restore 5
 3187              		.cfi_restore 4
 3188              		.cfi_def_cfa_offset 0
 3189              	.LVL270:
 512:src/console.c ****   //  free_storage();
 3190              		.loc 2 512 3 view .LVU899
 3191 028c FFF7FEBF 		b	save_ram_file
 3192              	.LVL271:
 3193              	.L205:
 3194              		.cfi_restore_state
 3195              	.LBB161:
 3196              	.LBB135:
  89:src/console.c ****     return mapping_running[c];
 3197              		.loc 2 89 3 is_stmt 1 view .LVU900
  89:src/console.c ****     return mapping_running[c];
 3198              		.loc 2 89 15 is_stmt 0 view .LVU901
 3199 0290 254A     		ldr	r2, .L282+100
 3200 0292 2D4B     		ldr	r3, .L282+132
 3201 0294 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3202 0296 1B68     		ldr	r3, [r3]
  89:src/console.c ****     return mapping_running[c];
 3203              		.loc 2 89 6 view .LVU902
 3204 0298 51EA0309 		orrs	r9, r1, r3
 3205 029c 6AD1     		bne	.L270
  93:src/console.c ****   case KEY_F1:
 3206              		.loc 2 93 3 is_stmt 1 view .LVU903
 3207 029e A5F12603 		sub	r3, r5, #38
ARM GAS  /tmp/ccGGa0st.s 			page 89


 3208 02a2 052B     		cmp	r3, #5
 3209 02a4 00F2BB80 		bhi	.L211
 3210 02a8 DFE803F0 		tbb	[pc, r3]
 3211              	.L213:
 3212 02ac CC       		.byte	(.L218-.L213)/2
 3213 02ad 80       		.byte	(.L217-.L213)/2
 3214 02ae 8A       		.byte	(.L216-.L213)/2
 3215 02af 93       		.byte	(.L215-.L213)/2
 3216 02b0 9C       		.byte	(.L214-.L213)/2
 3217 02b1 A5       		.byte	(.L212-.L213)/2
 3218              		.p2align 1
 3219              	.L263:
  61:src/console.c **** 
 3220              		.loc 2 61 16 view .LVU904
  61:src/console.c **** 
 3221              		.loc 2 61 23 is_stmt 0 view .LVU905
 3222 02b2 264B     		ldr	r3, .L282+136
 3223 02b4 A2E7     		b	.L261
 3224              	.LVL272:
 3225              	.L268:
  61:src/console.c **** 
 3226              		.loc 2 61 23 view .LVU906
 3227              	.LBE135:
 3228              	.LBE161:
 3229              	.LBB162:
 3230              	.LBB150:
  89:src/menu.c    ****   }
 3231              		.loc 1 89 5 is_stmt 1 view .LVU907
  89:src/menu.c    ****   }
 3232              		.loc 1 89 18 is_stmt 0 view .LVU908
 3233 02b6 264B     		ldr	r3, .L282+140
 3234              	.LVL273:
  89:src/menu.c    ****   }
 3235              		.loc 1 89 18 view .LVU909
 3236 02b8 1A68     		ldr	r2, [r3]
 3237 02ba 3260     		str	r2, [r6]
 3238              	.LVL274:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3239              		.loc 1 87 7 view .LVU910
 3240 02bc 4B46     		mov	r3, r9
  89:src/menu.c    ****   }
 3241              		.loc 1 89 18 view .LVU911
 3242 02be 9146     		mov	r9, r2
 3243              	.LVL275:
  89:src/menu.c    ****   }
 3244              		.loc 1 89 18 view .LVU912
 3245 02c0 AFE7     		b	.L232
 3246              	.L283:
 3247 02c2 00BF     		.align	2
 3248              	.L282:
 3249 02c4 00000000 		.word	StateWhileOn
 3250 02c8 00000000 		.word	DispMsg
 3251 02cc 00200010 		.word	268443648
 3252 02d0 00000000 		.word	.LANCHOR1
 3253 02d4 7D030008 		.word	134218621
 3254 02d8 00000000 		.word	run_menu_item
 3255 02dc 00000000 		.word	menu_line_str
ARM GAS  /tmp/ccGGa0st.s 			page 90


 3256 02e0 31020008 		.word	134218289
 3257 02e4 00000000 		.word	JustDisplayed
 3258 02e8 19040008 		.word	134218777
 3259 02ec 19020008 		.word	134218265
 3260 02f0 91030008 		.word	134218641
 3261 02f4 E5020008 		.word	134218469
 3262 02f8 59020008 		.word	134218329
 3263 02fc 35020008 		.word	134218293
 3264 0300 89030008 		.word	134218633
 3265 0304 B9030008 		.word	134218681
 3266 0308 B9040008 		.word	134218937
 3267 030c 00000000 		.word	.LANCHOR6
 3268 0310 00000000 		.word	.LANCHOR13
 3269 0314 59030008 		.word	134218585
 3270 0318 00000000 		.word	.LANCHOR18
 3271 031c 00000000 		.word	.LANCHOR8
 3272 0320 01040008 		.word	134218753
 3273 0324 81030008 		.word	134218625
 3274 0328 00000000 		.word	Pause
 3275 032c F5030008 		.word	134218741
 3276 0330 55020008 		.word	134218325
 3277 0334 2D040008 		.word	134218797
 3278 0338 1D020008 		.word	134218269
 3279 033c 00000000 		.word	.LANCHOR19
 3280 0340 00000000 		.word	.LANCHOR3
 3281 0344 00000000 		.word	.LANCHOR16
 3282 0348 00000000 		.word	Running
 3283 034c 00000000 		.word	.LANCHOR9
 3284 0350 00000000 		.word	.LANCHOR2
 3285 0354 F9030008 		.word	134218745
 3286              	.LVL276:
 3287              	.L234:
  89:src/menu.c    ****   }
 3288              		.loc 1 89 18 view .LVU913
 3289              	.LBE150:
 3290              	.LBE162:
 489:src/console.c **** 	  break;
 3291              		.loc 2 489 4 is_stmt 1 view .LVU914
 489:src/console.c **** 	  break;
 3292              		.loc 2 489 13 is_stmt 0 view .LVU915
 3293 0358 8A4B     		ldr	r3, .L284
 3294 035a 93E80300 		ldm	r3, {r0, r1}
 3295 035e 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3296              	.LVL277:
 489:src/console.c **** 	  break;
 3297              		.loc 2 489 13 view .LVU916
 3298 0360 8AE80300 		stm	r10, {r0, r1}
 3299 0364 8946     		mov	r9, r1
 3300              	.LVL278:
 490:src/console.c **** 	case SHIFT_H:
 3301              		.loc 2 490 4 is_stmt 1 view .LVU917
 3302 0366 DBE6     		b	.L228
 3303              	.LVL279:
 3304              	.L269:
 3305              	.LBB163:
 3306              	.LBB151:
  92:src/menu.c    ****   }
ARM GAS  /tmp/ccGGa0st.s 			page 91


 3307              		.loc 1 92 5 view .LVU918
  92:src/menu.c    ****   }
 3308              		.loc 1 92 18 is_stmt 0 view .LVU919
 3309 0368 874A     		ldr	r2, .L284+4
 3310 036a D2F80090 		ldr	r9, [r2]
 3311              	.LVL280:
  92:src/menu.c    ****   }
 3312              		.loc 1 92 18 view .LVU920
 3313 036e C6F80090 		str	r9, [r6]
 3314 0372 56E7     		b	.L232
 3315              	.LVL281:
 3316              	.L270:
  92:src/menu.c    ****   }
 3317              		.loc 1 92 18 view .LVU921
 3318              	.LBE151:
 3319              	.LBE163:
 3320              	.LBB164:
 3321              	.LBB136:
  90:src/console.c ****   }
 3322              		.loc 2 90 5 is_stmt 1 view .LVU922
  90:src/console.c ****   }
 3323              		.loc 2 90 27 is_stmt 0 view .LVU923
 3324 0374 854B     		ldr	r3, .L284+8
 3325 0376 C6E6     		b	.L260
 3326              	.L264:
  70:src/console.c ****       case SHIFT_N:
 3327              		.loc 2 70 7 is_stmt 1 view .LVU924
  70:src/console.c ****       case SHIFT_N:
 3328              		.loc 2 70 15 is_stmt 0 view .LVU925
 3329 0378 FFF7FEFF 		bl	cur_shift
 3330              	.LVL282:
  70:src/console.c ****       case SHIFT_N:
 3331              		.loc 2 70 7 view .LVU926
 3332 037c 0328     		cmp	r0, #3
  70:src/console.c ****       case SHIFT_N:
 3333              		.loc 2 70 15 view .LVU927
 3334 037e 0346     		mov	r3, r0
  70:src/console.c ****       case SHIFT_N:
 3335              		.loc 2 70 7 view .LVU928
 3336 0380 00F2B980 		bhi	.L240
 3337 0384 0128     		cmp	r0, #1
 3338 0386 43D8     		bhi	.L208
 3339 0388 0028     		cmp	r0, #0
 3340 038a 71D0     		beq	.L271
  73:src/console.c ****       case SHIFT_F:
 3341              		.loc 2 73 2 is_stmt 1 view .LVU929
  75:src/console.c **** 	break;
 3342              		.loc 2 75 2 view .LVU930
  75:src/console.c **** 	break;
 3343              		.loc 2 75 23 is_stmt 0 view .LVU931
 3344 038c 804B     		ldr	r3, .L284+12
 3345 038e 93E80300 		ldm	r3, {r0, r1}
 3346 0392 0DF1080A 		add	r10, sp, #8
 3347 0396 8AE80300 		stm	r10, {r0, r1}
 3348              	.LVL283:
  75:src/console.c **** 	break;
 3349              		.loc 2 75 23 view .LVU932
ARM GAS  /tmp/ccGGa0st.s 			page 92


 3350              	.LBE136:
 3351              	.LBE164:
 481:src/console.c **** 	set_menu ( remapped.shift );
 3352              		.loc 2 481 7 is_stmt 1 view .LVU933
 497:src/console.c **** 	SET_ST(STAT_MENU);
 3353              		.loc 2 497 7 view .LVU934
 504:src/console.c **** 	remapped = do_multi (remapped);
 3354              		.loc 2 504 7 view .LVU935
 508:src/console.c ****       process_keycode_with_shift(remapped);
 3355              		.loc 2 508 7 view .LVU936
 3356              	.LBB165:
 3357              	.LBB137:
  75:src/console.c **** 	break;
 3358              		.loc 2 75 23 is_stmt 0 view .LVU937
 3359 039a 4FF00009 		mov	r9, #0
 3360 039e 2A25     		movs	r5, #42
 3361              	.LVL284:
  75:src/console.c **** 	break;
 3362              		.loc 2 75 23 view .LVU938
 3363 03a0 DFE6     		b	.L207
 3364              	.LVL285:
 3365              	.L219:
  96:src/console.c ****   case KEY_F2:
 3366              		.loc 2 96 5 is_stmt 1 view .LVU939
  96:src/console.c ****   case KEY_F2:
 3367              		.loc 2 96 9 is_stmt 0 view .LVU940
 3368 03a2 FFF7FEFF 		bl	cur_shift
 3369              	.LVL286:
  96:src/console.c ****   case KEY_F2:
 3370              		.loc 2 96 8 view .LVU941
 3371 03a6 0128     		cmp	r0, #1
 3372 03a8 00F0DA80 		beq	.L272
 3373              	.L217:
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3374              		.loc 2 98 5 is_stmt 1 view .LVU942
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3375              		.loc 2 98 9 is_stmt 0 view .LVU943
 3376 03ac FFF7FEFF 		bl	cur_shift
 3377              	.LVL287:
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3378              		.loc 2 98 8 view .LVU944
 3379 03b0 0028     		cmp	r0, #0
 3380 03b2 00F08580 		beq	.L273
  99:src/console.c ****   case KEY_F3:
 3381              		.loc 2 99 5 is_stmt 1 view .LVU945
  99:src/console.c ****   case KEY_F3:
 3382              		.loc 2 99 9 is_stmt 0 view .LVU946
 3383 03b6 FFF7FEFF 		bl	cur_shift
 3384              	.LVL288:
  99:src/console.c ****   case KEY_F3:
 3385              		.loc 2 99 8 view .LVU947
 3386 03ba 0128     		cmp	r0, #1
 3387 03bc 00F0C680 		beq	.L274
 3388              	.L216:
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3389              		.loc 2 101 5 is_stmt 1 view .LVU948
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
ARM GAS  /tmp/ccGGa0st.s 			page 93


 3390              		.loc 2 101 9 is_stmt 0 view .LVU949
 3391 03c0 FFF7FEFF 		bl	cur_shift
 3392              	.LVL289:
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3393              		.loc 2 101 8 view .LVU950
 3394 03c4 0028     		cmp	r0, #0
 3395 03c6 71D0     		beq	.L275
 102:src/console.c ****   case KEY_F4:
 3396              		.loc 2 102 5 is_stmt 1 view .LVU951
 102:src/console.c ****   case KEY_F4:
 3397              		.loc 2 102 9 is_stmt 0 view .LVU952
 3398 03c8 FFF7FEFF 		bl	cur_shift
 3399              	.LVL290:
 102:src/console.c ****   case KEY_F4:
 3400              		.loc 2 102 8 view .LVU953
 3401 03cc 0128     		cmp	r0, #1
 3402 03ce 00F09580 		beq	.L276
 3403              	.L215:
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3404              		.loc 2 104 5 is_stmt 1 view .LVU954
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3405              		.loc 2 104 9 is_stmt 0 view .LVU955
 3406 03d2 FFF7FEFF 		bl	cur_shift
 3407              	.LVL291:
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3408              		.loc 2 104 8 view .LVU956
 3409 03d6 0028     		cmp	r0, #0
 3410 03d8 5ED0     		beq	.L277
 105:src/console.c ****   case KEY_F5:
 3411              		.loc 2 105 5 is_stmt 1 view .LVU957
 105:src/console.c ****   case KEY_F5:
 3412              		.loc 2 105 9 is_stmt 0 view .LVU958
 3413 03da FFF7FEFF 		bl	cur_shift
 3414              	.LVL292:
 105:src/console.c ****   case KEY_F5:
 3415              		.loc 2 105 8 view .LVU959
 3416 03de 0128     		cmp	r0, #1
 3417 03e0 00F0AA80 		beq	.L278
 3418              	.L214:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3419              		.loc 2 107 5 is_stmt 1 view .LVU960
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3420              		.loc 2 107 9 is_stmt 0 view .LVU961
 3421 03e4 FFF7FEFF 		bl	cur_shift
 3422              	.LVL293:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3423              		.loc 2 107 8 view .LVU962
 3424 03e8 0028     		cmp	r0, #0
 3425 03ea 4BD0     		beq	.L279
 108:src/console.c ****   case KEY_F6:
 3426              		.loc 2 108 5 is_stmt 1 view .LVU963
 108:src/console.c ****   case KEY_F6:
 3427              		.loc 2 108 9 is_stmt 0 view .LVU964
 3428 03ec FFF7FEFF 		bl	cur_shift
 3429              	.LVL294:
 108:src/console.c ****   case KEY_F6:
 3430              		.loc 2 108 8 view .LVU965
ARM GAS  /tmp/ccGGa0st.s 			page 94


 3431 03f0 0128     		cmp	r0, #1
 3432 03f2 00F08D80 		beq	.L280
 3433              	.L212:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3434              		.loc 2 110 5 is_stmt 1 view .LVU966
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3435              		.loc 2 110 9 is_stmt 0 view .LVU967
 3436 03f6 FFF7FEFF 		bl	cur_shift
 3437              	.LVL295:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3438              		.loc 2 110 8 view .LVU968
 3439 03fa 58B9     		cbnz	r0, .L224
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3440              		.loc 2 110 33 is_stmt 1 view .LVU969
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3441              		.loc 2 110 67 is_stmt 0 view .LVU970
 3442 03fc 3168     		ldr	r1, [r6]
 3443 03fe 654A     		ldr	r2, .L284+16
 3444 0400 D023     		movs	r3, #208
 3445 0402 03FB01F3 		mul	r3, r3, r1
 3446 0406 D018     		adds	r0, r2, r3
 3447 0408 D0E92C01 		ldrd	r0, r1, [r0, #176]
 3448 040c B033     		adds	r3, r3, #176
 3449 040e 26E0     		b	.L259
 3450              	.L208:
  76:src/console.c ****       case SHIFT_G:
 3451              		.loc 2 76 2 is_stmt 1 view .LVU971
  78:src/console.c **** 	break;
 3452              		.loc 2 78 2 view .LVU972
  78:src/console.c **** 	break;
 3453              		.loc 2 78 9 is_stmt 0 view .LVU973
 3454 0410 614B     		ldr	r3, .L284+20
 3455 0412 F3E6     		b	.L261
 3456              	.L224:
 111:src/console.c ****   }
 3457              		.loc 2 111 5 is_stmt 1 view .LVU974
 111:src/console.c ****   }
 3458              		.loc 2 111 9 is_stmt 0 view .LVU975
 3459 0414 FFF7FEFF 		bl	cur_shift
 3460              	.LVL296:
 111:src/console.c ****   }
 3461              		.loc 2 111 8 view .LVU976
 3462 0418 0128     		cmp	r0, #1
 3463 041a 00F08380 		beq	.L281
 3464              	.L211:
 114:src/console.c ****   case SHIFT_N:    
 3465              		.loc 2 114 3 is_stmt 1 view .LVU977
 114:src/console.c ****   case SHIFT_N:    
 3466              		.loc 2 114 11 is_stmt 0 view .LVU978
 3467 041e FFF7FEFF 		bl	cur_shift
 3468              	.LVL297:
 114:src/console.c ****   case SHIFT_N:    
 3469              		.loc 2 114 3 view .LVU979
 3470 0422 0128     		cmp	r0, #1
 3471 0424 65D0     		beq	.L225
 3472 0426 0228     		cmp	r0, #2
 3473 0428 56D0     		beq	.L226
ARM GAS  /tmp/ccGGa0st.s 			page 95


 3474 042a 0028     		cmp	r0, #0
 3475 042c 52D0     		beq	.L227
  55:src/console.c **** 
 3476              		.loc 2 55 41 view .LVU980
 3477 042e EDB2     		uxtb	r5, r5
 3478              	.LVL298:
  55:src/console.c **** 
 3479              		.loc 2 55 41 view .LVU981
 3480              	.LBE137:
 3481              	.LBE165:
 481:src/console.c **** 	set_menu ( remapped.shift );
 3482              		.loc 2 481 7 is_stmt 1 view .LVU982
 481:src/console.c **** 	set_menu ( remapped.shift );
 3483              		.loc 2 481 10 is_stmt 0 view .LVU983
 3484 0430 2F2D     		cmp	r5, #47
 3485 0432 7FF475AE 		bne	.L228
 482:src/console.c **** 	display_current_menu ();
 3486              		.loc 2 482 2 is_stmt 1 view .LVU984
 3487              	.LVL299:
 3488              	.LBB166:
  86:src/menu.c    ****   int m = current_menu;
 3489              		.loc 1 86 6 view .LVU985
 3490              	.LBB152:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3491              		.loc 1 87 3 view .LVU986
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3492              		.loc 1 87 7 is_stmt 0 view .LVU987
 3493 0436 3368     		ldr	r3, [r6]
 3494              	.LVL300:
  88:src/menu.c    ****     current_menu = default_menu;
 3495              		.loc 1 88 3 is_stmt 1 view .LVU988
  88:src/menu.c    ****     current_menu = default_menu;
 3496              		.loc 1 88 6 is_stmt 0 view .LVU989
 3497 0438 002B     		cmp	r3, #0
 3498 043a 00F09B80 		beq	.L257
 3499 043e 0DF1080A 		add	r10, sp, #8
 3500 0442 ECE6     		b	.L229
 3501              	.LVL301:
 3502              	.L218:
  88:src/menu.c    ****     current_menu = default_menu;
 3503              		.loc 1 88 6 view .LVU990
 3504              	.LBE152:
 3505              	.LBE166:
 3506              	.LBB167:
 3507              	.LBB138:
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3508              		.loc 2 95 5 is_stmt 1 view .LVU991
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3509              		.loc 2 95 9 is_stmt 0 view .LVU992
 3510 0444 FFF7FEFF 		bl	cur_shift
 3511              	.LVL302:
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3512              		.loc 2 95 8 view .LVU993
 3513 0448 0028     		cmp	r0, #0
 3514 044a AAD1     		bne	.L219
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3515              		.loc 2 95 33 is_stmt 1 view .LVU994
ARM GAS  /tmp/ccGGa0st.s 			page 96


  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3516              		.loc 2 95 67 is_stmt 0 view .LVU995
 3517 044c 3168     		ldr	r1, [r6]
 3518 044e 514A     		ldr	r2, .L284+16
 3519 0450 D023     		movs	r3, #208
 3520 0452 03FB01F3 		mul	r3, r3, r1
 3521 0456 D018     		adds	r0, r2, r3
 3522 0458 D0E90401 		ldrd	r0, r1, [r0, #16]
 3523 045c 1033     		adds	r3, r3, #16
 3524              	.L259:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3525              		.loc 2 110 67 view .LVU996
 3526 045e 0DF1080A 		add	r10, sp, #8
 3527 0462 D55C     		ldrb	r5, [r2, r3]	@ zero_extendqisi2
 3528              	.LVL303:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3529              		.loc 2 110 67 view .LVU997
 3530 0464 8AE80300 		stm	r10, {r0, r1}
 3531 0468 1344     		add	r3, r3, r2
 3532 046a D3F80490 		ldr	r9, [r3, #4]
 3533              	.LVL304:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3534              		.loc 2 110 67 view .LVU998
 3535 046e 55E6     		b	.L203
 3536              	.LVL305:
 3537              	.L271:
  72:src/console.c **** 	break;
 3538              		.loc 2 72 2 is_stmt 1 view .LVU999
  72:src/console.c **** 	break;
 3539              		.loc 2 72 21 is_stmt 0 view .LVU1000
 3540 0470 4A4A     		ldr	r2, .L284+24
 3541 0472 92E80300 		ldm	r2, {r0, r1}
 3542 0476 0DF1080A 		add	r10, sp, #8
 3543 047a 8AE80300 		stm	r10, {r0, r1}
 3544              	.LVL306:
  72:src/console.c **** 	break;
 3545              		.loc 2 72 21 view .LVU1001
 3546              	.LBE138:
 3547              	.LBE167:
 481:src/console.c **** 	set_menu ( remapped.shift );
 3548              		.loc 2 481 7 is_stmt 1 view .LVU1002
 497:src/console.c **** 	SET_ST(STAT_MENU);
 3549              		.loc 2 497 7 view .LVU1003
 504:src/console.c **** 	remapped = do_multi (remapped);
 3550              		.loc 2 504 7 view .LVU1004
 508:src/console.c ****       process_keycode_with_shift(remapped);
 3551              		.loc 2 508 7 view .LVU1005
 3552              	.LBB168:
 3553              	.LBB139:
  72:src/console.c **** 	break;
 3554              		.loc 2 72 21 is_stmt 0 view .LVU1006
 3555 047e 9946     		mov	r9, r3
 3556 0480 2925     		movs	r5, #41
 3557              	.LVL307:
  72:src/console.c **** 	break;
 3558              		.loc 2 72 21 view .LVU1007
 3559 0482 6EE6     		b	.L207
ARM GAS  /tmp/ccGGa0st.s 			page 97


 3560              	.LVL308:
 3561              	.L279:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3562              		.loc 2 107 33 is_stmt 1 view .LVU1008
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3563              		.loc 2 107 67 is_stmt 0 view .LVU1009
 3564 0484 3168     		ldr	r1, [r6]
 3565 0486 434A     		ldr	r2, .L284+16
 3566 0488 D023     		movs	r3, #208
 3567 048a 03FB01F3 		mul	r3, r3, r1
 3568 048e D018     		adds	r0, r2, r3
 3569 0490 D0E92401 		ldrd	r0, r1, [r0, #144]
 3570 0494 9033     		adds	r3, r3, #144
 3571 0496 E2E7     		b	.L259
 3572              	.L277:
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3573              		.loc 2 104 33 is_stmt 1 view .LVU1010
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3574              		.loc 2 104 67 is_stmt 0 view .LVU1011
 3575 0498 3168     		ldr	r1, [r6]
 3576 049a 3E4A     		ldr	r2, .L284+16
 3577 049c D023     		movs	r3, #208
 3578 049e 03FB01F3 		mul	r3, r3, r1
 3579 04a2 D018     		adds	r0, r2, r3
 3580 04a4 D0E91C01 		ldrd	r0, r1, [r0, #112]
 3581 04a8 7033     		adds	r3, r3, #112
 3582 04aa D8E7     		b	.L259
 3583              	.L275:
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3584              		.loc 2 101 33 is_stmt 1 view .LVU1012
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3585              		.loc 2 101 67 is_stmt 0 view .LVU1013
 3586 04ac 3168     		ldr	r1, [r6]
 3587 04ae 394A     		ldr	r2, .L284+16
 3588 04b0 D023     		movs	r3, #208
 3589 04b2 03FB01F3 		mul	r3, r3, r1
 3590 04b6 D018     		adds	r0, r2, r3
 3591 04b8 D0E91401 		ldrd	r0, r1, [r0, #80]
 3592 04bc 5033     		adds	r3, r3, #80
 3593 04be CEE7     		b	.L259
 3594              	.L273:
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3595              		.loc 2 98 33 is_stmt 1 view .LVU1014
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3596              		.loc 2 98 67 is_stmt 0 view .LVU1015
 3597 04c0 3168     		ldr	r1, [r6]
 3598 04c2 344A     		ldr	r2, .L284+16
 3599 04c4 D023     		movs	r3, #208
 3600 04c6 03FB01F3 		mul	r3, r3, r1
 3601 04ca D018     		adds	r0, r2, r3
 3602 04cc D0E90C01 		ldrd	r0, r1, [r0, #48]
 3603 04d0 3033     		adds	r3, r3, #48
 3604 04d2 C4E7     		b	.L259
 3605              	.L227:
 116:src/console.c ****     break;
 3606              		.loc 2 116 5 is_stmt 1 view .LVU1016
 116:src/console.c ****     break;
ARM GAS  /tmp/ccGGa0st.s 			page 98


 3607              		.loc 2 116 24 is_stmt 0 view .LVU1017
 3608 04d4 324B     		ldr	r3, .L284+28
 3609 04d6 16E6     		b	.L260
 3610              	.L226:
 120:src/console.c ****   case SHIFT_G:
 3611              		.loc 2 120 5 is_stmt 1 view .LVU1018
 122:src/console.c ****     break;
 3612              		.loc 2 122 5 view .LVU1019
 122:src/console.c ****     break;
 3613              		.loc 2 122 26 is_stmt 0 view .LVU1020
 3614 04d8 324B     		ldr	r3, .L284+32
 3615 04da 03EBC502 		add	r2, r3, r5, lsl #3
 3616 04de 92E80300 		ldm	r2, {r0, r1}
 3617 04e2 0DF1080A 		add	r10, sp, #8
 3618 04e6 8AE80300 		stm	r10, {r0, r1}
 3619 04ea 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 3620              	.LVL309:
 122:src/console.c ****     break;
 3621              		.loc 2 122 26 view .LVU1021
 3622 04ee 8946     		mov	r9, r1
 3623              	.LVL310:
 122:src/console.c ****     break;
 3624              		.loc 2 122 26 view .LVU1022
 3625 04f0 14E6     		b	.L203
 3626              	.LVL311:
 3627              	.L225:
 117:src/console.c ****   case SHIFT_F:
 3628              		.loc 2 117 5 is_stmt 1 view .LVU1023
 119:src/console.c ****     break;
 3629              		.loc 2 119 5 view .LVU1024
 119:src/console.c ****     break;
 3630              		.loc 2 119 26 is_stmt 0 view .LVU1025
 3631 04f2 2D4B     		ldr	r3, .L284+36
 3632 04f4 07E6     		b	.L260
 3633              	.L240:
  70:src/console.c ****       case SHIFT_N:
 3634              		.loc 2 70 7 view .LVU1026
 3635 04f6 4FF00009 		mov	r9, #0
 3636 04fa 30E6     		b	.L262
 3637              	.L276:
 102:src/console.c ****   case KEY_F4:
 3638              		.loc 2 102 33 is_stmt 1 view .LVU1027
 102:src/console.c ****   case KEY_F4:
 3639              		.loc 2 102 67 is_stmt 0 view .LVU1028
 3640 04fc 3168     		ldr	r1, [r6]
 3641 04fe 254A     		ldr	r2, .L284+16
 3642 0500 D023     		movs	r3, #208
 3643 0502 03FB01F3 		mul	r3, r3, r1
 3644 0506 D018     		adds	r0, r2, r3
 3645 0508 D0E91601 		ldrd	r0, r1, [r0, #88]
 3646 050c 5833     		adds	r3, r3, #88
 3647 050e A6E7     		b	.L259
 3648              	.L280:
 108:src/console.c ****   case KEY_F6:
 3649              		.loc 2 108 33 is_stmt 1 view .LVU1029
 108:src/console.c ****   case KEY_F6:
 3650              		.loc 2 108 67 is_stmt 0 view .LVU1030
ARM GAS  /tmp/ccGGa0st.s 			page 99


 3651 0510 3168     		ldr	r1, [r6]
 3652 0512 204A     		ldr	r2, .L284+16
 3653 0514 D023     		movs	r3, #208
 3654 0516 03FB01F3 		mul	r3, r3, r1
 3655 051a D018     		adds	r0, r2, r3
 3656 051c D0E92601 		ldrd	r0, r1, [r0, #152]
 3657 0520 9833     		adds	r3, r3, #152
 3658 0522 9CE7     		b	.L259
 3659              	.L281:
 111:src/console.c ****   }
 3660              		.loc 2 111 33 is_stmt 1 view .LVU1031
 111:src/console.c ****   }
 3661              		.loc 2 111 67 is_stmt 0 view .LVU1032
 3662 0524 3168     		ldr	r1, [r6]
 3663 0526 1B4A     		ldr	r2, .L284+16
 3664 0528 D023     		movs	r3, #208
 3665 052a 03FB01F3 		mul	r3, r3, r1
 3666 052e D018     		adds	r0, r2, r3
 3667 0530 D0E92E01 		ldrd	r0, r1, [r0, #184]
 3668 0534 B833     		adds	r3, r3, #184
 3669 0536 92E7     		b	.L259
 3670              	.L278:
 105:src/console.c ****   case KEY_F5:
 3671              		.loc 2 105 33 is_stmt 1 view .LVU1033
 105:src/console.c ****   case KEY_F5:
 3672              		.loc 2 105 67 is_stmt 0 view .LVU1034
 3673 0538 3168     		ldr	r1, [r6]
 3674 053a 164A     		ldr	r2, .L284+16
 3675 053c D023     		movs	r3, #208
 3676 053e 03FB01F3 		mul	r3, r3, r1
 3677 0542 D018     		adds	r0, r2, r3
 3678 0544 D0E91E01 		ldrd	r0, r1, [r0, #120]
 3679 0548 7833     		adds	r3, r3, #120
 3680 054a 88E7     		b	.L259
 3681              	.L274:
  99:src/console.c ****   case KEY_F3:
 3682              		.loc 2 99 33 is_stmt 1 view .LVU1035
  99:src/console.c ****   case KEY_F3:
 3683              		.loc 2 99 67 is_stmt 0 view .LVU1036
 3684 054c 3168     		ldr	r1, [r6]
 3685 054e 114A     		ldr	r2, .L284+16
 3686 0550 D023     		movs	r3, #208
 3687 0552 03FB01F3 		mul	r3, r3, r1
 3688 0556 D018     		adds	r0, r2, r3
 3689 0558 D0E90E01 		ldrd	r0, r1, [r0, #56]
 3690 055c 3833     		adds	r3, r3, #56
 3691 055e 7EE7     		b	.L259
 3692              	.L272:
  96:src/console.c ****   case KEY_F2:
 3693              		.loc 2 96 33 is_stmt 1 view .LVU1037
  96:src/console.c ****   case KEY_F2:
 3694              		.loc 2 96 67 is_stmt 0 view .LVU1038
 3695 0560 3168     		ldr	r1, [r6]
 3696 0562 0C4A     		ldr	r2, .L284+16
 3697 0564 D023     		movs	r3, #208
 3698 0566 03FB01F3 		mul	r3, r3, r1
 3699 056a D018     		adds	r0, r2, r3
ARM GAS  /tmp/ccGGa0st.s 			page 100


 3700 056c D0E90601 		ldrd	r0, r1, [r0, #24]
 3701 0570 1833     		adds	r3, r3, #24
 3702 0572 74E7     		b	.L259
 3703              	.LVL312:
 3704              	.L257:
  96:src/console.c ****   case KEY_F2:
 3705              		.loc 2 96 67 view .LVU1039
 3706              	.LBE139:
 3707              	.LBE168:
 3708              	.LBB169:
 3709              	.LBB153:
  89:src/menu.c    ****   }
 3710              		.loc 1 89 5 is_stmt 1 view .LVU1040
  89:src/menu.c    ****   }
 3711              		.loc 1 89 18 is_stmt 0 view .LVU1041
 3712 0574 0D4A     		ldr	r2, .L284+40
 3713 0576 D2F80090 		ldr	r9, [r2]
 3714 057a C6F80090 		str	r9, [r6]
  97:src/menu.c    **** }
 3715              		.loc 1 97 3 is_stmt 1 view .LVU1042
 3716 057e 0DF1080A 		add	r10, sp, #8
 3717 0582 50E6     		b	.L230
 3718              	.L285:
 3719              		.align	2
 3720              	.L284:
 3721 0584 00000000 		.word	.LANCHOR17
 3722 0588 00000000 		.word	.LANCHOR3
 3723 058c 00000000 		.word	.LANCHOR14
 3724 0590 E0000000 		.word	.LANCHOR11+224
 3725 0594 00000000 		.word	.LANCHOR4
 3726 0598 00000000 		.word	.LANCHOR12
 3727 059c E0000000 		.word	.LANCHOR10+224
 3728 05a0 00000000 		.word	.LANCHOR10
 3729 05a4 00000000 		.word	.LANCHOR15
 3730 05a8 00000000 		.word	.LANCHOR11
 3731 05ac 00000000 		.word	.LANCHOR2
 3732              	.LBE153:
 3733              	.LBE169:
 3734              		.cfi_endproc
 3735              	.LFE28:
 3737              		.global	n_p
 3738              		.comm	print_string,22,4
 3739              		.global	spaces
 3740              		.global	release
 3741              		.global	h_shift
 3742              		.global	g_shift
 3743              		.global	f_shift
 3744              		.global	heartbeat
 3745              		.global	no_key
 3746              		.global	MID_MENU
 3747              		.section	.rodata.str1.4,"aMS",%progbits,1
 3748              		.align	2
 3749              	.LC12:
 3750 0000 53797374 		.ascii	"System!\000"
 3750      656D2100 
 3751              		.global	mid_menu
 3752              		.section	.rodata
ARM GAS  /tmp/ccGGa0st.s 			page 101


 3753              		.align	2
 3754              		.set	.LANCHOR5,. + 0
 3755              	.LC8:
 3756 0000 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 3756      2A2B0708 
 3756      091C0B0C 
 3756      0D0E0F
 3757 000f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 3757      13141516 
 3757      00121819 
 3757      1A
 3758 001c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 3758      1E1F2000 
 3758      21222324 
 3758      25
 3759              		.section	.bss.current_menu,"aw",%nobits
 3760              		.align	2
 3761              		.set	.LANCHOR1,. + 0
 3764              	current_menu:
 3765 0000 00000000 		.space	4
 3766              		.section	.bss.default_menu,"aw",%nobits
 3767              		.align	2
 3768              		.set	.LANCHOR2,. + 0
 3771              	default_menu:
 3772 0000 00000000 		.space	4
 3773              		.section	.bss.last_menu,"aw",%nobits
 3774              		.align	2
 3775              		.set	.LANCHOR3,. + 0
 3778              	last_menu:
 3779 0000 00000000 		.space	4
 3780              		.section	.bss.mdots,"aw",%nobits
 3781              		.align	2
 3782              		.set	.LANCHOR0,. + 0
 3785              	mdots:
 3786 0000 00000000 		.space	400
 3786      00000000 
 3786      00000000 
 3786      00000000 
 3786      00000000 
 3787              		.section	.bss.n_p,"aw",%nobits
 3788              		.align	2
 3791              	n_p:
 3792 0000 00000000 		.space	4
 3793              		.section	.bss.start_ticks,"aw",%nobits
 3794              		.align	2
 3795              		.set	.LANCHOR6,. + 0
 3798              	start_ticks:
 3799 0000 00000000 		.space	4
 3800              		.section	.data.f_shift,"aw"
 3801              		.align	2
 3802              		.set	.LANCHOR16,. + 0
 3805              	f_shift:
 3806 0000 29       		.byte	41
 3807 0001 000000   		.space	3
 3808 0004 FFFFFFFF 		.word	-1
 3809              		.section	.data.g_shift,"aw"
 3810              		.align	2
ARM GAS  /tmp/ccGGa0st.s 			page 102


 3811              		.set	.LANCHOR17,. + 0
 3814              	g_shift:
 3815 0000 2A       		.byte	42
 3816 0001 000000   		.space	3
 3817 0004 FFFFFFFF 		.word	-1
 3818              		.section	.data.h_shift,"aw"
 3819              		.align	2
 3820              		.set	.LANCHOR12,. + 0
 3823              	h_shift:
 3824 0000 2B       		.byte	43
 3825 0001 000000   		.space	3
 3826 0004 FFFFFFFF 		.word	-1
 3827              		.section	.data.heartbeat,"aw"
 3828              		.align	2
 3829              		.set	.LANCHOR19,. + 0
 3832              	heartbeat:
 3833 0000 62       		.byte	98
 3834 0001 000000   		.space	3
 3835 0004 FFFFFFFF 		.word	-1
 3836              		.section	.data.no_key,"aw"
 3837              		.align	2
 3838              		.set	.LANCHOR8,. + 0
 3841              	no_key:
 3842 0000 2E       		.byte	46
 3843 0001 000000   		.space	3
 3844 0004 00000000 		.word	0
 3845              		.section	.data.release,"aw"
 3846              		.align	2
 3847              		.set	.LANCHOR9,. + 0
 3850              	release:
 3851 0000 63       		.byte	99
 3852 0001 000000   		.space	3
 3853 0004 FFFFFFFF 		.word	-1
 3854              		.section	.data.spaces,"aw"
 3855              		.align	2
 3856              		.set	.LANCHOR7,. + 0
 3859              	spaces:
 3860 0000 20202020 		.ascii	"                     \000"
 3860      20202020 
 3860      20202020 
 3860      20202020 
 3860      20202020 
 3861              		.section	.rodata.MID_MENU,"a"
 3862              		.align	2
 3863              		.set	.LANCHOR18,. + 0
 3866              	MID_MENU:
 3867 0000 00000000 		.word	.LC12
 3868 0004 00000000 		.word	mid_menu
 3869 0008 00000000 		.word	0
 3870 000c 00000000 		.word	0
 3871              		.section	.rodata.Menus,"a"
 3872              		.align	2
 3873              		.set	.LANCHOR4,. + 0
 3876              	Menus:
 3877 0000 426C616E 		.ascii	"Blank\000"
 3877      6B00
 3878 0006 00000000 		.space	9
ARM GAS  /tmp/ccGGa0st.s 			page 103


 3878      00000000 
 3878      00
 3879 000f 00       		.space	1
 3880 0010 2E       		.byte	46
 3881 0011 000000   		.space	3
 3882 0014 FFFFFFFF 		.word	-1
 3883 0018 2E       		.byte	46
 3884 0019 000000   		.space	3
 3885 001c FFFFFFFF 		.word	-1
 3886 0020 00       		.ascii	"\000"
 3887 0021 00000000 		.space	7
 3887      000000
 3888 0028 00       		.ascii	"\000"
 3889 0029 00000000 		.space	7
 3889      000000
 3890 0030 2E       		.byte	46
 3891 0031 000000   		.space	3
 3892 0034 FFFFFFFF 		.word	-1
 3893 0038 2E       		.byte	46
 3894 0039 000000   		.space	3
 3895 003c FFFFFFFF 		.word	-1
 3896 0040 00       		.ascii	"\000"
 3897 0041 00000000 		.space	7
 3897      000000
 3898 0048 00       		.ascii	"\000"
 3899 0049 00000000 		.space	7
 3899      000000
 3900 0050 2E       		.byte	46
 3901 0051 000000   		.space	3
 3902 0054 FFFFFFFF 		.word	-1
 3903 0058 2E       		.byte	46
 3904 0059 000000   		.space	3
 3905 005c FFFFFFFF 		.word	-1
 3906 0060 00       		.ascii	"\000"
 3907 0061 00000000 		.space	7
 3907      000000
 3908 0068 00       		.ascii	"\000"
 3909 0069 00000000 		.space	7
 3909      000000
 3910 0070 2E       		.byte	46
 3911 0071 000000   		.space	3
 3912 0074 FFFFFFFF 		.word	-1
 3913 0078 2E       		.byte	46
 3914 0079 000000   		.space	3
 3915 007c FFFFFFFF 		.word	-1
 3916 0080 00       		.ascii	"\000"
 3917 0081 00000000 		.space	7
 3917      000000
 3918 0088 00       		.ascii	"\000"
 3919 0089 00000000 		.space	7
 3919      000000
 3920 0090 2C       		.byte	44
 3921 0091 000000   		.space	3
 3922 0094 FFFFFFFF 		.word	-1
 3923 0098 2E       		.byte	46
 3924 0099 000000   		.space	3
 3925 009c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccGGa0st.s 			page 104


 3926 00a0 2D2D0D00 		.ascii	"--\015\000"
 3927 00a4 00000000 		.space	4
 3928 00a8 00       		.ascii	"\000"
 3929 00a9 00000000 		.space	7
 3929      000000
 3930 00b0 2D       		.byte	45
 3931 00b1 000000   		.space	3
 3932 00b4 FFFFFFFF 		.word	-1
 3933 00b8 2E       		.byte	46
 3934 00b9 000000   		.space	3
 3935 00bc FFFFFFFF 		.word	-1
 3936 00c0 43505800 		.ascii	"CPX\000"
 3937 00c4 00000000 		.space	4
 3938 00c8 00       		.ascii	"\000"
 3939 00c9 00000000 		.space	7
 3939      000000
 3940 00d0 436C6561 		.ascii	"Clear\000"
 3940      7200
 3941 00d6 00000000 		.space	9
 3941      00000000 
 3941      00
 3942 00df 00       		.space	1
 3943 00e0 10       		.byte	16
 3944 00e1 000000   		.space	3
 3945 00e4 01000000 		.word	1
 3946 00e8 2E       		.byte	46
 3947 00e9 000000   		.space	3
 3948 00ec FFFFFFFF 		.word	-1
 3949 00f0 434C5072 		.ascii	"CLProg\000"
 3949      6F6700
 3950 00f7 00       		.space	1
 3951 00f8 00       		.ascii	"\000"
 3952 00f9 00000000 		.space	7
 3952      000000
 3953 0100 10       		.byte	16
 3954 0101 000000   		.space	3
 3955 0104 02000000 		.word	2
 3956 0108 2E       		.byte	46
 3957 0109 000000   		.space	3
 3958 010c FFFFFFFF 		.word	-1
 3959 0110 434C9100 		.ascii	"CL\221\000"
 3960 0114 00000000 		.space	4
 3961 0118 00       		.ascii	"\000"
 3962 0119 00000000 		.space	7
 3962      000000
 3963 0120 10       		.byte	16
 3964 0121 000000   		.space	3
 3965 0124 03000000 		.word	3
 3966 0128 2E       		.byte	46
 3967 0129 000000   		.space	3
 3968 012c FFFFFFFF 		.word	-1
 3969 0130 434C2058 		.ascii	"CL X\000"
 3969      00
 3970 0135 000000   		.space	3
 3971 0138 00       		.ascii	"\000"
 3972 0139 00000000 		.space	7
 3972      000000
ARM GAS  /tmp/ccGGa0st.s 			page 105


 3973 0140 2E       		.byte	46
 3974 0141 000000   		.space	3
 3975 0144 FFFFFFFF 		.word	-1
 3976 0148 2E       		.byte	46
 3977 0149 000000   		.space	3
 3978 014c FFFFFFFF 		.word	-1
 3979 0150 00       		.ascii	"\000"
 3980 0151 00000000 		.space	7
 3980      000000
 3981 0158 00       		.ascii	"\000"
 3982 0159 00000000 		.space	7
 3982      000000
 3983 0160 2C       		.byte	44
 3984 0161 000000   		.space	3
 3985 0164 FFFFFFFF 		.word	-1
 3986 0168 2E       		.byte	46
 3987 0169 000000   		.space	3
 3988 016c FFFFFFFF 		.word	-1
 3989 0170 2D2D0D00 		.ascii	"--\015\000"
 3990 0174 00000000 		.space	4
 3991 0178 00       		.ascii	"\000"
 3992 0179 00000000 		.space	7
 3992      000000
 3993 0180 2D       		.byte	45
 3994 0181 000000   		.space	3
 3995 0184 FFFFFFFF 		.word	-1
 3996 0188 2E       		.byte	46
 3997 0189 000000   		.space	3
 3998 018c FFFFFFFF 		.word	-1
 3999 0190 43505800 		.ascii	"CPX\000"
 4000 0194 00000000 		.space	4
 4001 0198 00       		.ascii	"\000"
 4002 0199 00000000 		.space	7
 4002      000000
 4003 01a0 44495350 		.ascii	"DISP\000"
 4003      00
 4004 01a5 00000000 		.space	10
 4004      00000000 
 4004      0000
 4005 01af 00       		.space	1
 4006 01b0 00       		.byte	0
 4007 01b1 000000   		.space	3
 4008 01b4 03000000 		.word	3
 4009 01b8 05       		.byte	5
 4010 01b9 000000   		.space	3
 4011 01bc 01000000 		.word	1
 4012 01c0 414C4C00 		.ascii	"ALL\000"
 4013 01c4 00000000 		.space	4
 4014 01c8 6120622F 		.ascii	"a b/c\000"
 4014      6300
 4015 01ce 0000     		.space	2
 4016 01d0 01       		.byte	1
 4017 01d1 000000   		.space	3
 4018 01d4 03000000 		.word	3
 4019 01d8 05       		.byte	5
 4020 01d9 000000   		.space	3
 4021 01dc 02000000 		.word	2
ARM GAS  /tmp/ccGGa0st.s 			page 106


 4022 01e0 46495800 		.ascii	"FIX\000"
 4023 01e4 00000000 		.space	4
 4024 01e8 642F6300 		.ascii	"d/c\000"
 4025 01ec 00000000 		.space	4
 4026 01f0 02       		.byte	2
 4027 01f1 000000   		.space	3
 4028 01f4 03000000 		.word	3
 4029 01f8 06       		.byte	6
 4030 01f9 000000   		.space	3
 4031 01fc 01000000 		.word	1
 4032 0200 53434900 		.ascii	"SCI\000"
 4033 0204 00000000 		.space	4
 4034 0208 482E4D53 		.ascii	"H.MS\000"
 4034      00
 4035 020d 000000   		.space	3
 4036 0210 03       		.byte	3
 4037 0211 000000   		.space	3
 4038 0214 03000000 		.word	3
 4039 0218 07       		.byte	7
 4040 0219 000000   		.space	3
 4041 021c 01000000 		.word	1
 4042 0220 454E4700 		.ascii	"ENG\000"
 4043 0224 00000000 		.space	4
 4044 0228 482E6400 		.ascii	"H.d\000"
 4045 022c 00000000 		.space	4
 4046 0230 2C       		.byte	44
 4047 0231 000000   		.space	3
 4048 0234 FFFFFFFF 		.word	-1
 4049 0238 26       		.byte	38
 4050 0239 000000   		.space	3
 4051 023c 03000000 		.word	3
 4052 0240 2D2D0D00 		.ascii	"--\015\000"
 4053 0244 00000000 		.space	4
 4054 0248 2E2F2C00 		.ascii	"./,\000"
 4055 024c 00000000 		.space	4
 4056 0250 2D       		.byte	45
 4057 0251 000000   		.space	3
 4058 0254 FFFFFFFF 		.word	-1
 4059 0258 2E       		.byte	46
 4060 0259 000000   		.space	3
 4061 025c FFFFFFFF 		.word	-1
 4062 0260 43505800 		.ascii	"CPX\000"
 4063 0264 00000000 		.space	4
 4064 0268 00       		.ascii	"\000"
 4065 0269 00000000 		.space	7
 4065      000000
 4066 0270 42415345 		.ascii	"BASE\000"
 4066      00
 4067 0275 00000000 		.space	10
 4067      00000000 
 4067      0000
 4068 027f 00       		.space	1
 4069 0280 0E       		.byte	14
 4070 0281 000000   		.space	3
 4071 0284 01000000 		.word	1
 4072 0288 0E       		.byte	14
 4073 0289 000000   		.space	3
ARM GAS  /tmp/ccGGa0st.s 			page 107


 4074 028c 03000000 		.word	3
 4075 0290 42494E00 		.ascii	"BIN\000"
 4076 0294 00000000 		.space	4
 4077 0298 6E6F7400 		.ascii	"not\000"
 4078 029c 00000000 		.space	4
 4079 02a0 0E       		.byte	14
 4080 02a1 000000   		.space	3
 4081 02a4 02000000 		.word	2
 4082 02a8 13       		.byte	19
 4083 02a9 000000   		.space	3
 4084 02ac 03000000 		.word	3
 4085 02b0 4F435400 		.ascii	"OCT\000"
 4086 02b4 00000000 		.space	4
 4087 02b8 616E6400 		.ascii	"and\000"
 4088 02bc 00000000 		.space	4
 4089 02c0 0F       		.byte	15
 4090 02c1 000000   		.space	3
 4091 02c4 01000000 		.word	1
 4092 02c8 14       		.byte	20
 4093 02c9 000000   		.space	3
 4094 02cc 03000000 		.word	3
 4095 02d0 44454300 		.ascii	"DEC\000"
 4096 02d4 00000000 		.space	4
 4097 02d8 6F7200   		.ascii	"or\000"
 4098 02db 00000000 		.space	5
 4098      00
 4099 02e0 0F       		.byte	15
 4100 02e1 000000   		.space	3
 4101 02e4 02000000 		.word	2
 4102 02e8 15       		.byte	21
 4103 02e9 000000   		.space	3
 4104 02ec 03000000 		.word	3
 4105 02f0 48455800 		.ascii	"HEX\000"
 4106 02f4 00000000 		.space	4
 4107 02f8 786F7200 		.ascii	"xor\000"
 4108 02fc 00000000 		.space	4
 4109 0300 2C       		.byte	44
 4110 0301 000000   		.space	3
 4111 0304 FFFFFFFF 		.word	-1
 4112 0308 16       		.byte	22
 4113 0309 000000   		.space	3
 4114 030c 03000000 		.word	3
 4115 0310 2D2D0D00 		.ascii	"--\015\000"
 4116 0314 00000000 		.space	4
 4117 0318 524D4452 		.ascii	"RMDR\000"
 4117      00
 4118 031d 000000   		.space	3
 4119 0320 2D       		.byte	45
 4120 0321 000000   		.space	3
 4121 0324 FFFFFFFF 		.word	-1
 4122 0328 07       		.byte	7
 4123 0329 000000   		.space	3
 4124 032c 01000000 		.word	1
 4125 0330 43505800 		.ascii	"CPX\000"
 4126 0334 00000000 		.space	4
 4127 0338 482E6400 		.ascii	"H.d\000"
 4128 033c 00000000 		.space	4
ARM GAS  /tmp/ccGGa0st.s 			page 108


 4129 0340 414E474C 		.ascii	"ANGLES\000"
 4129      455300
 4130 0347 00000000 		.space	8
 4130      00000000 
 4131 034f 00       		.space	1
 4132 0350 06       		.byte	6
 4133 0351 000000   		.space	3
 4134 0354 02000000 		.word	2
 4135 0358 04       		.byte	4
 4136 0359 000000   		.space	3
 4137 035c 01000000 		.word	1
 4138 0360 44454700 		.ascii	"DEG\000"
 4139 0364 00000000 		.space	4
 4140 0368 500D5200 		.ascii	"P\015R\000"
 4141 036c 00000000 		.space	4
 4142 0370 07       		.byte	7
 4143 0371 000000   		.space	3
 4144 0374 02000000 		.word	2
 4145 0378 04       		.byte	4
 4146 0379 000000   		.space	3
 4147 037c 02000000 		.word	2
 4148 0380 52414400 		.ascii	"RAD\000"
 4149 0384 00000000 		.space	4
 4150 0388 520D5000 		.ascii	"R\015P\000"
 4151 038c 00000000 		.space	4
 4152 0390 08       		.byte	8
 4153 0391 000000   		.space	3
 4154 0394 02000000 		.word	2
 4155 0398 00       		.byte	0
 4156 0399 000000   		.space	3
 4157 039c 01000000 		.word	1
 4158 03a0 47524144 		.ascii	"GRAD\000"
 4158      00
 4159 03a5 000000   		.space	3
 4160 03a8 48595000 		.ascii	"HYP\000"
 4161 03ac 00000000 		.space	4
 4162 03b0 06       		.byte	6
 4163 03b1 000000   		.space	3
 4164 03b4 01000000 		.word	1
 4165 03b8 07       		.byte	7
 4166 03b9 000000   		.space	3
 4167 03bc 01000000 		.word	1
 4168 03c0 482E4D53 		.ascii	"H.MS\000"
 4168      00
 4169 03c5 000000   		.space	3
 4170 03c8 482E6400 		.ascii	"H.d\000"
 4171 03cc 00000000 		.space	4
 4172 03d0 2C       		.byte	44
 4173 03d1 000000   		.space	3
 4174 03d4 FFFFFFFF 		.word	-1
 4175 03d8 00       		.byte	0
 4176 03d9 000000   		.space	3
 4177 03dc 02000000 		.word	2
 4178 03e0 2D2D0D00 		.ascii	"--\015\000"
 4179 03e4 00000000 		.space	4
 4180 03e8 4859509D 		.ascii	"HYP\235\000"
 4180      00
ARM GAS  /tmp/ccGGa0st.s 			page 109


 4181 03ed 000000   		.space	3
 4182 03f0 2D       		.byte	45
 4183 03f1 000000   		.space	3
 4184 03f4 FFFFFFFF 		.word	-1
 4185 03f8 2E       		.byte	46
 4186 03f9 000000   		.space	3
 4187 03fc FFFFFFFF 		.word	-1
 4188 0400 43505800 		.ascii	"CPX\000"
 4189 0404 00000000 		.space	4
 4190 0408 00       		.ascii	"\000"
 4191 0409 00000000 		.space	7
 4191      000000
 4192 0410 4D495343 		.ascii	"MISC\000"
 4192      00
 4193 0415 00000000 		.space	10
 4193      00000000 
 4193      0000
 4194 041f 00       		.space	1
 4195 0420 25       		.byte	37
 4196 0421 000000   		.space	3
 4197 0424 01000000 		.word	1
 4198 0428 14       		.byte	20
 4199 0429 000000   		.space	3
 4200 042c 01000000 		.word	1
 4201 0430 7C587C00 		.ascii	"|X|\000"
 4202 0434 00000000 		.space	4
 4203 0438 329C00   		.ascii	"2\234\000"
 4204 043b 00000000 		.space	5
 4204      00
 4205 0440 25       		.byte	37
 4206 0441 000000   		.space	3
 4207 0444 02000000 		.word	2
 4208 0448 14       		.byte	20
 4209 0449 000000   		.space	3
 4210 044c 02000000 		.word	2
 4211 0450 524E4400 		.ascii	"RND\000"
 4212 0454 00000000 		.space	4
 4213 0458 4C6F67BA 		.ascii	"Log\272\000"
 4213      00
 4214 045d 000000   		.space	3
 4215 0460 26       		.byte	38
 4216 0461 000000   		.space	3
 4217 0464 01000000 		.word	1
 4218 0468 15       		.byte	21
 4219 0469 000000   		.space	3
 4220 046c 02000000 		.word	2
 4221 0470 49506172 		.ascii	"IPart\000"
 4221      7400
 4222 0476 0000     		.space	2
 4223 0478 4C6F678B 		.ascii	"Log\213\000"
 4223      00
 4224 047d 000000   		.space	3
 4225 0480 26       		.byte	38
 4226 0481 000000   		.space	3
 4227 0484 02000000 		.word	2
 4228 0488 16       		.byte	22
 4229 0489 000000   		.space	3
ARM GAS  /tmp/ccGGa0st.s 			page 110


 4230 048c 02000000 		.word	2
 4231 0490 46506172 		.ascii	"FPart\000"
 4231      7400
 4232 0496 0000     		.space	2
 4233 0498 7C7C656C 		.ascii	"||el\000"
 4233      00
 4234 049d 000000   		.space	3
 4235 04a0 2C       		.byte	44
 4236 04a1 000000   		.space	3
 4237 04a4 FFFFFFFF 		.word	-1
 4238 04a8 22       		.byte	34
 4239 04a9 000000   		.space	3
 4240 04ac 02000000 		.word	2
 4241 04b0 2D2D0D00 		.ascii	"--\015\000"
 4242 04b4 00000000 		.space	4
 4243 04b8 832500   		.ascii	"\203%\000"
 4244 04bb 00000000 		.space	5
 4244      00
 4245 04c0 2D       		.byte	45
 4246 04c1 000000   		.space	3
 4247 04c4 FFFFFFFF 		.word	-1
 4248 04c8 2E       		.byte	46
 4249 04c9 000000   		.space	3
 4250 04cc FFFFFFFF 		.word	-1
 4251 04d0 43505800 		.ascii	"CPX\000"
 4252 04d4 00000000 		.space	4
 4253 04d8 00       		.ascii	"\000"
 4254 04d9 00000000 		.space	7
 4254      000000
 4255 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 4255      204B6579 
 4255      00
 4256 04e9 00000000 		.space	6
 4256      0000
 4257 04ef 00       		.space	1
 4258 04f0 0D       		.byte	13
 4259 04f1 000000   		.space	3
 4260 04f4 01000000 		.word	1
 4261 04f8 2E       		.byte	46
 4262 04f9 000000   		.space	3
 4263 04fc FFFFFFFF 		.word	-1
 4264 0500 53686F77 		.ascii	"Show\016\000"
 4264      0E00
 4265 0506 0000     		.space	2
 4266 0508 00       		.ascii	"\000"
 4267 0509 00000000 		.space	7
 4267      000000
 4268 0510 0D       		.byte	13
 4269 0511 000000   		.space	3
 4270 0514 02000000 		.word	2
 4271 0518 2E       		.byte	46
 4272 0519 000000   		.space	3
 4273 051c FFFFFFFF 		.word	-1
 4274 0520 53686F77 		.ascii	"Show\015\000"
 4274      0D00
 4275 0526 0000     		.space	2
 4276 0528 00       		.ascii	"\000"
ARM GAS  /tmp/ccGGa0st.s 			page 111


 4277 0529 00000000 		.space	7
 4277      000000
 4278 0530 0D       		.byte	13
 4279 0531 000000   		.space	3
 4280 0534 03000000 		.word	3
 4281 0538 2E       		.byte	46
 4282 0539 000000   		.space	3
 4283 053c FFFFFFFF 		.word	-1
 4284 0540 78173F00 		.ascii	"x\027?\000"
 4285 0544 00000000 		.space	4
 4286 0548 00       		.ascii	"\000"
 4287 0549 00000000 		.space	7
 4287      000000
 4288 0550 2E       		.byte	46
 4289 0551 000000   		.space	3
 4290 0554 FFFFFFFF 		.word	-1
 4291 0558 2E       		.byte	46
 4292 0559 000000   		.space	3
 4293 055c FFFFFFFF 		.word	-1
 4294 0560 00       		.ascii	"\000"
 4295 0561 00000000 		.space	7
 4295      000000
 4296 0568 00       		.ascii	"\000"
 4297 0569 00000000 		.space	7
 4297      000000
 4298 0570 2C       		.byte	44
 4299 0571 000000   		.space	3
 4300 0574 FFFFFFFF 		.word	-1
 4301 0578 2E       		.byte	46
 4302 0579 000000   		.space	3
 4303 057c FFFFFFFF 		.word	-1
 4304 0580 2D2D0D00 		.ascii	"--\015\000"
 4305 0584 00000000 		.space	4
 4306 0588 00       		.ascii	"\000"
 4307 0589 00000000 		.space	7
 4307      000000
 4308 0590 2D       		.byte	45
 4309 0591 000000   		.space	3
 4310 0594 FFFFFFFF 		.word	-1
 4311 0598 2E       		.byte	46
 4312 0599 000000   		.space	3
 4313 059c FFFFFFFF 		.word	-1
 4314 05a0 43505800 		.ascii	"CPX\000"
 4315 05a4 00000000 		.space	4
 4316 05a8 00       		.ascii	"\000"
 4317 05a9 00000000 		.space	7
 4317      000000
 4318 05b0 50726F67 		.ascii	"Program\000"
 4318      72616D00 
 4319 05b8 00000000 		.space	7
 4319      000000
 4320 05bf 00       		.space	1
 4321 05c0 27       		.byte	39
 4322 05c1 000000   		.space	3
 4323 05c4 01000000 		.word	1
 4324 05c8 28       		.byte	40
 4325 05c9 000000   		.space	3
ARM GAS  /tmp/ccGGa0st.s 			page 112


 4326 05cc 01000000 		.word	1
 4327 05d0 4C424C00 		.ascii	"LBL\000"
 4328 05d4 00000000 		.space	4
 4329 05d8 44534500 		.ascii	"DSE\000"
 4330 05dc 00000000 		.space	4
 4331 05e0 27       		.byte	39
 4332 05e1 000000   		.space	3
 4333 05e4 02000000 		.word	2
 4334 05e8 28       		.byte	40
 4335 05e9 000000   		.space	3
 4336 05ec 02000000 		.word	2
 4337 05f0 52544E00 		.ascii	"RTN\000"
 4338 05f4 00000000 		.space	4
 4339 05f8 49534700 		.ascii	"ISG\000"
 4340 05fc 00000000 		.space	4
 4341 0600 25       		.byte	37
 4342 0601 000000   		.space	3
 4343 0604 03000000 		.word	3
 4344 0608 2E       		.byte	46
 4345 0609 000000   		.space	3
 4346 060c FFFFFFFF 		.word	-1
 4347 0610 50617573 		.ascii	"Pause\000"
 4347      6500
 4348 0616 0000     		.space	2
 4349 0618 00       		.ascii	"\000"
 4350 0619 00000000 		.space	7
 4350      000000
 4351 0620 12       		.byte	18
 4352 0621 000000   		.space	3
 4353 0624 03000000 		.word	3
 4354 0628 2E       		.byte	46
 4355 0629 000000   		.space	3
 4356 062c FFFFFFFF 		.word	-1
 4357 0630 47544F00 		.ascii	"GTO\000"
 4358 0634 00000000 		.space	4
 4359 0638 00       		.ascii	"\000"
 4360 0639 00000000 		.space	7
 4360      000000
 4361 0640 2C       		.byte	44
 4362 0641 000000   		.space	3
 4363 0644 FFFFFFFF 		.word	-1
 4364 0648 2E       		.byte	46
 4365 0649 000000   		.space	3
 4366 064c FFFFFFFF 		.word	-1
 4367 0650 2D2D0D00 		.ascii	"--\015\000"
 4368 0654 00000000 		.space	4
 4369 0658 00       		.ascii	"\000"
 4370 0659 00000000 		.space	7
 4370      000000
 4371 0660 2D       		.byte	45
 4372 0661 000000   		.space	3
 4373 0664 FFFFFFFF 		.word	-1
 4374 0668 2E       		.byte	46
 4375 0669 000000   		.space	3
 4376 066c FFFFFFFF 		.word	-1
 4377 0670 43505800 		.ascii	"CPX\000"
 4378 0674 00000000 		.space	4
ARM GAS  /tmp/ccGGa0st.s 			page 113


 4379 0678 00       		.ascii	"\000"
 4380 0679 00000000 		.space	7
 4380      000000
 4381 0680 53657475 		.ascii	"Setup 1\000"
 4381      70203100 
 4382 0688 00000000 		.space	7
 4382      000000
 4383 068f 00       		.space	1
 4384 0690 32       		.byte	50
 4385 0691 000000   		.space	3
 4386 0694 00000000 		.word	0
 4387 0698 30       		.byte	48
 4388 0699 000000   		.space	3
 4389 069c 00000000 		.word	0
 4390 06a0 45584954 		.ascii	"EXIT\000"
 4390      00
 4391 06a5 000000   		.space	3
 4392 06a8 53797374 		.ascii	"System\000"
 4392      656D00
 4393 06af 00       		.space	1
 4394 06b0 31       		.byte	49
 4395 06b1 000000   		.space	3
 4396 06b4 09000000 		.word	9
 4397 06b8 2E       		.byte	46
 4398 06b9 000000   		.space	3
 4399 06bc FFFFFFFF 		.word	-1
 4400 06c0 48454C50 		.ascii	"HELP\000"
 4400      00
 4401 06c5 000000   		.space	3
 4402 06c8 00       		.ascii	"\000"
 4403 06c9 00000000 		.space	7
 4403      000000
 4404 06d0 31       		.byte	49
 4405 06d1 000000   		.space	3
 4406 06d4 02000000 		.word	2
 4407 06d8 31       		.byte	49
 4408 06d9 000000   		.space	3
 4409 06dc 06000000 		.word	6
 4410 06e0 4F6E5354 		.ascii	"OnSTO\000"
 4410      4F00
 4411 06e6 0000     		.space	2
 4412 06e8 53765241 		.ascii	"SvRAM\000"
 4412      4D00
 4413 06ee 0000     		.space	2
 4414 06f0 31       		.byte	49
 4415 06f1 000000   		.space	3
 4416 06f4 03000000 		.word	3
 4417 06f8 31       		.byte	49
 4418 06f9 000000   		.space	3
 4419 06fc 07000000 		.word	7
 4420 0700 4F6E5243 		.ascii	"OnRCL\000"
 4420      4C00
 4421 0706 0000     		.space	2
 4422 0708 4C645241 		.ascii	"LdRAM\000"
 4422      4D00
 4423 070e 0000     		.space	2
 4424 0710 2C       		.byte	44
ARM GAS  /tmp/ccGGa0st.s 			page 114


 4425 0711 000000   		.space	3
 4426 0714 FFFFFFFF 		.word	-1
 4427 0718 2E       		.byte	46
 4428 0719 000000   		.space	3
 4429 071c FFFFFFFF 		.word	-1
 4430 0720 2D2D0D00 		.ascii	"--\015\000"
 4431 0724 00000000 		.space	4
 4432 0728 00       		.ascii	"\000"
 4433 0729 00000000 		.space	7
 4433      000000
 4434 0730 2D       		.byte	45
 4435 0731 000000   		.space	3
 4436 0734 FFFFFFFF 		.word	-1
 4437 0738 2E       		.byte	46
 4438 0739 000000   		.space	3
 4439 073c FFFFFFFF 		.word	-1
 4440 0740 43505800 		.ascii	"CPX\000"
 4441 0744 00000000 		.space	4
 4442 0748 00       		.ascii	"\000"
 4443 0749 00000000 		.space	7
 4443      000000
 4444 0750 4172726F 		.ascii	"Arrow\000"
 4444      7700
 4445 0756 00000000 		.space	9
 4445      00000000 
 4445      00
 4446 075f 00       		.space	1
 4447 0760 0E       		.byte	14
 4448 0761 000000   		.space	3
 4449 0764 01000000 		.word	1
 4450 0768 06       		.byte	6
 4451 0769 000000   		.space	3
 4452 076c 02000000 		.word	2
 4453 0770 42696E00 		.ascii	"Bin\000"
 4454 0774 00000000 		.space	4
 4455 0778 44454700 		.ascii	"DEG\000"
 4456 077c 00000000 		.space	4
 4457 0780 0E       		.byte	14
 4458 0781 000000   		.space	3
 4459 0784 02000000 		.word	2
 4460 0788 07       		.byte	7
 4461 0789 000000   		.space	3
 4462 078c 02000000 		.word	2
 4463 0790 4F637400 		.ascii	"Oct\000"
 4464 0794 00000000 		.space	4
 4465 0798 52414400 		.ascii	"RAD\000"
 4466 079c 00000000 		.space	4
 4467 07a0 0F       		.byte	15
 4468 07a1 000000   		.space	3
 4469 07a4 01000000 		.word	1
 4470 07a8 08       		.byte	8
 4471 07a9 000000   		.space	3
 4472 07ac 02000000 		.word	2
 4473 07b0 44656300 		.ascii	"Dec\000"
 4474 07b4 00000000 		.space	4
 4475 07b8 47726164 		.ascii	"Grad\000"
 4475      00
ARM GAS  /tmp/ccGGa0st.s 			page 115


 4476 07bd 000000   		.space	3
 4477 07c0 0F       		.byte	15
 4478 07c1 000000   		.space	3
 4479 07c4 02000000 		.word	2
 4480 07c8 06       		.byte	6
 4481 07c9 000000   		.space	3
 4482 07cc 01000000 		.word	1
 4483 07d0 48657800 		.ascii	"Hex\000"
 4484 07d4 00000000 		.space	4
 4485 07d8 0D484D53 		.ascii	"\015HMS\000"
 4485      00
 4486 07dd 000000   		.space	3
 4487 07e0 2C       		.byte	44
 4488 07e1 000000   		.space	3
 4489 07e4 FFFFFFFF 		.word	-1
 4490 07e8 07       		.byte	7
 4491 07e9 000000   		.space	3
 4492 07ec 01000000 		.word	1
 4493 07f0 2D2D0D00 		.ascii	"--\015\000"
 4494 07f4 00000000 		.space	4
 4495 07f8 484D530D 		.ascii	"HMS\015\000"
 4495      00
 4496 07fd 000000   		.space	3
 4497 0800 2D       		.byte	45
 4498 0801 000000   		.space	3
 4499 0804 FFFFFFFF 		.word	-1
 4500 0808 2E       		.byte	46
 4501 0809 000000   		.space	3
 4502 080c FFFFFFFF 		.word	-1
 4503 0810 43505800 		.ascii	"CPX\000"
 4504 0814 00000000 		.space	4
 4505 0818 00       		.ascii	"\000"
 4506 0819 00000000 		.space	7
 4506      000000
 4507 0820 466C6167 		.ascii	"Flags\000"
 4507      7300
 4508 0826 00000000 		.space	9
 4508      00000000 
 4508      00
 4509 082f 00       		.space	1
 4510 0830 1E       		.byte	30
 4511 0831 000000   		.space	3
 4512 0834 01000000 		.word	1
 4513 0838 2E       		.byte	46
 4514 0839 000000   		.space	3
 4515 083c FFFFFFFF 		.word	-1
 4516 0840 53465F00 		.ascii	"SF_\000"
 4517 0844 00000000 		.space	4
 4518 0848 00       		.ascii	"\000"
 4519 0849 00000000 		.space	7
 4519      000000
 4520 0850 1E       		.byte	30
 4521 0851 000000   		.space	3
 4522 0854 02000000 		.word	2
 4523 0858 2E       		.byte	46
 4524 0859 000000   		.space	3
 4525 085c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccGGa0st.s 			page 116


 4526 0860 43465F00 		.ascii	"CF_\000"
 4527 0864 00000000 		.space	4
 4528 0868 00       		.ascii	"\000"
 4529 0869 00000000 		.space	7
 4529      000000
 4530 0870 1F       		.byte	31
 4531 0871 000000   		.space	3
 4532 0874 01000000 		.word	1
 4533 0878 2E       		.byte	46
 4534 0879 000000   		.space	3
 4535 087c FFFFFFFF 		.word	-1
 4536 0880 783D3F00 		.ascii	"x=?\000"
 4537 0884 00000000 		.space	4
 4538 0888 00       		.ascii	"\000"
 4539 0889 00000000 		.space	7
 4539      000000
 4540 0890 1F       		.byte	31
 4541 0891 000000   		.space	3
 4542 0894 02000000 		.word	2
 4543 0898 2E       		.byte	46
 4544 0899 000000   		.space	3
 4545 089c FFFFFFFF 		.word	-1
 4546 08a0 780B3F00 		.ascii	"x\013?\000"
 4547 08a4 00000000 		.space	4
 4548 08a8 00       		.ascii	"\000"
 4549 08a9 00000000 		.space	7
 4549      000000
 4550 08b0 2C       		.byte	44
 4551 08b1 000000   		.space	3
 4552 08b4 FFFFFFFF 		.word	-1
 4553 08b8 2E       		.byte	46
 4554 08b9 000000   		.space	3
 4555 08bc FFFFFFFF 		.word	-1
 4556 08c0 2D2D0D00 		.ascii	"--\015\000"
 4557 08c4 00000000 		.space	4
 4558 08c8 00       		.ascii	"\000"
 4559 08c9 00000000 		.space	7
 4559      000000
 4560 08d0 2D       		.byte	45
 4561 08d1 000000   		.space	3
 4562 08d4 FFFFFFFF 		.word	-1
 4563 08d8 2E       		.byte	46
 4564 08d9 000000   		.space	3
 4565 08dc FFFFFFFF 		.word	-1
 4566 08e0 43505800 		.ascii	"CPX\000"
 4567 08e4 00000000 		.space	4
 4568 08e8 00       		.ascii	"\000"
 4569 08e9 00000000 		.space	7
 4569      000000
 4570 08f0 50726F62 		.ascii	"Probability\000"
 4570      6162696C 
 4570      69747900 
 4571 08fc 000000   		.space	3
 4572 08ff 00       		.space	1
 4573 0900 18       		.byte	24
 4574 0901 000000   		.space	3
 4575 0904 03000000 		.word	3
ARM GAS  /tmp/ccGGa0st.s 			page 117


 4576 0908 19       		.byte	25
 4577 0909 000000   		.space	3
 4578 090c 01000000 		.word	1
 4579 0910 46616374 		.ascii	"Fact!\000"
 4579      2100
 4580 0916 0000     		.space	2
 4581 0918 9400     		.ascii	"\224\000"
 4582 091a 00000000 		.space	6
 4582      0000
 4583 0920 18       		.byte	24
 4584 0921 000000   		.space	3
 4585 0924 01000000 		.word	1
 4586 0928 19       		.byte	25
 4587 0929 000000   		.space	3
 4588 092c 02000000 		.word	2
 4589 0930 43792C78 		.ascii	"Cy,x\000"
 4589      00
 4590 0935 000000   		.space	3
 4591 0938 949D00   		.ascii	"\224\235\000"
 4592 093b 00000000 		.space	5
 4592      00
 4593 0940 18       		.byte	24
 4594 0941 000000   		.space	3
 4595 0944 02000000 		.word	2
 4596 0948 2E       		.byte	46
 4597 0949 000000   		.space	3
 4598 094c FFFFFFFF 		.word	-1
 4599 0950 50792C78 		.ascii	"Py,x\000"
 4599      00
 4600 0955 000000   		.space	3
 4601 0958 00       		.ascii	"\000"
 4602 0959 00000000 		.space	7
 4602      000000
 4603 0960 08       		.byte	8
 4604 0961 000000   		.space	3
 4605 0964 01000000 		.word	1
 4606 0968 2E       		.byte	46
 4607 0969 000000   		.space	3
 4608 096c FFFFFFFF 		.word	-1
 4609 0970 52414E23 		.ascii	"RAN#\000"
 4609      00
 4610 0975 000000   		.space	3
 4611 0978 00       		.ascii	"\000"
 4612 0979 00000000 		.space	7
 4612      000000
 4613 0980 2C       		.byte	44
 4614 0981 000000   		.space	3
 4615 0984 FFFFFFFF 		.word	-1
 4616 0988 2E       		.byte	46
 4617 0989 000000   		.space	3
 4618 098c FFFFFFFF 		.word	-1
 4619 0990 2D2D0D00 		.ascii	"--\015\000"
 4620 0994 00000000 		.space	4
 4621 0998 00       		.ascii	"\000"
 4622 0999 00000000 		.space	7
 4622      000000
 4623 09a0 2D       		.byte	45
ARM GAS  /tmp/ccGGa0st.s 			page 118


 4624 09a1 000000   		.space	3
 4625 09a4 FFFFFFFF 		.word	-1
 4626 09a8 2E       		.byte	46
 4627 09a9 000000   		.space	3
 4628 09ac FFFFFFFF 		.word	-1
 4629 09b0 43505800 		.ascii	"CPX\000"
 4630 09b4 00000000 		.space	4
 4631 09b8 00       		.ascii	"\000"
 4632 09b9 00000000 		.space	7
 4632      000000
 4633 09c0 53746174 		.ascii	"Statistics\000"
 4633      69737469 
 4633      637300
 4634 09cb 00000000 		.space	4
 4635 09cf 00       		.space	1
 4636 09d0 1A       		.byte	26
 4637 09d1 000000   		.space	3
 4638 09d4 01000000 		.word	1
 4639 09d8 1B       		.byte	27
 4640 09d9 000000   		.space	3
 4641 09dc 03000000 		.word	3
 4642 09e0 58626172 		.ascii	"Xbar\000"
 4642      00
 4643 09e5 000000   		.space	3
 4644 09e8 53554D53 		.ascii	"SUMS\000"
 4644      00
 4645 09ed 000000   		.space	3
 4646 09f0 1B       		.byte	27
 4647 09f1 000000   		.space	3
 4648 09f4 01000000 		.word	1
 4649 09f8 2E       		.byte	46
 4650 09f9 000000   		.space	3
 4651 09fc FFFFFFFF 		.word	-1
 4652 0a00 59686174 		.ascii	"Yhat\000"
 4652      00
 4653 0a05 000000   		.space	3
 4654 0a08 00       		.ascii	"\000"
 4655 0a09 00000000 		.space	7
 4655      000000
 4656 0a10 1A       		.byte	26
 4657 0a11 000000   		.space	3
 4658 0a14 02000000 		.word	2
 4659 0a18 2E       		.byte	46
 4660 0a19 000000   		.space	3
 4661 0a1c FFFFFFFF 		.word	-1
 4662 0a20 7300     		.ascii	"s\000"
 4663 0a22 00000000 		.space	6
 4663      0000
 4664 0a28 00       		.ascii	"\000"
 4665 0a29 00000000 		.space	7
 4665      000000
 4666 0a30 1B       		.byte	27
 4667 0a31 000000   		.space	3
 4668 0a34 02000000 		.word	2
 4669 0a38 2E       		.byte	46
 4670 0a39 000000   		.space	3
 4671 0a3c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccGGa0st.s 			page 119


 4672 0a40 7200     		.ascii	"r\000"
 4673 0a42 00000000 		.space	6
 4673      0000
 4674 0a48 00       		.ascii	"\000"
 4675 0a49 00000000 		.space	7
 4675      000000
 4676 0a50 2C       		.byte	44
 4677 0a51 000000   		.space	3
 4678 0a54 FFFFFFFF 		.word	-1
 4679 0a58 2E       		.byte	46
 4680 0a59 000000   		.space	3
 4681 0a5c FFFFFFFF 		.word	-1
 4682 0a60 2D2D0D00 		.ascii	"--\015\000"
 4683 0a64 00000000 		.space	4
 4684 0a68 00       		.ascii	"\000"
 4685 0a69 00000000 		.space	7
 4685      000000
 4686 0a70 2D       		.byte	45
 4687 0a71 000000   		.space	3
 4688 0a74 FFFFFFFF 		.word	-1
 4689 0a78 31       		.byte	49
 4690 0a79 000000   		.space	3
 4691 0a7c 0B000000 		.word	11
 4692 0a80 43505800 		.ascii	"CPX\000"
 4693 0a84 00000000 		.space	4
 4694 0a88 00       		.ascii	"\000"
 4695 0a89 00000000 		.space	7
 4695      000000
 4696 0a90 53657475 		.ascii	"Setup 2\000"
 4696      70203200 
 4697 0a98 00000000 		.space	7
 4697      000000
 4698 0a9f 00       		.space	1
 4699 0aa0 31       		.byte	49
 4700 0aa1 000000   		.space	3
 4701 0aa4 04000000 		.word	4
 4702 0aa8 2E       		.byte	46
 4703 0aa9 000000   		.space	3
 4704 0aac FFFFFFFF 		.word	-1
 4705 0ab0 53764C49 		.ascii	"SvLIB\000"
 4705      4200
 4706 0ab6 0000     		.space	2
 4707 0ab8 00       		.ascii	"\000"
 4708 0ab9 00000000 		.space	7
 4708      000000
 4709 0ac0 31       		.byte	49
 4710 0ac1 000000   		.space	3
 4711 0ac4 05000000 		.word	5
 4712 0ac8 2E       		.byte	46
 4713 0ac9 000000   		.space	3
 4714 0acc FFFFFFFF 		.word	-1
 4715 0ad0 4C644C49 		.ascii	"LdLIB\000"
 4715      4200
 4716 0ad6 0000     		.space	2
 4717 0ad8 00       		.ascii	"\000"
 4718 0ad9 00000000 		.space	7
 4718      000000
ARM GAS  /tmp/ccGGa0st.s 			page 120


 4719 0ae0 31       		.byte	49
 4720 0ae1 000000   		.space	3
 4721 0ae4 0A000000 		.word	10
 4722 0ae8 2E       		.byte	46
 4723 0ae9 000000   		.space	3
 4724 0aec FFFFFFFF 		.word	-1
 4725 0af0 53764350 		.ascii	"SvCPRG\000"
 4725      524700
 4726 0af7 00       		.space	1
 4727 0af8 00       		.ascii	"\000"
 4728 0af9 00000000 		.space	7
 4728      000000
 4729 0b00 31       		.byte	49
 4730 0b01 000000   		.space	3
 4731 0b04 08000000 		.word	8
 4732 0b08 2E       		.byte	46
 4733 0b09 000000   		.space	3
 4734 0b0c FFFFFFFF 		.word	-1
 4735 0b10 4C645052 		.ascii	"LdPRG\000"
 4735      4700
 4736 0b16 0000     		.space	2
 4737 0b18 00       		.ascii	"\000"
 4738 0b19 00000000 		.space	7
 4738      000000
 4739 0b20 2C       		.byte	44
 4740 0b21 000000   		.space	3
 4741 0b24 FFFFFFFF 		.word	-1
 4742 0b28 2E       		.byte	46
 4743 0b29 000000   		.space	3
 4744 0b2c FFFFFFFF 		.word	-1
 4745 0b30 2D2D0D00 		.ascii	"--\015\000"
 4746 0b34 00000000 		.space	4
 4747 0b38 00       		.ascii	"\000"
 4748 0b39 00000000 		.space	7
 4748      000000
 4749 0b40 2D       		.byte	45
 4750 0b41 000000   		.space	3
 4751 0b44 FFFFFFFF 		.word	-1
 4752 0b48 2E       		.byte	46
 4753 0b49 000000   		.space	3
 4754 0b4c FFFFFFFF 		.word	-1
 4755 0b50 43505800 		.ascii	"CPX\000"
 4756 0b54 00000000 		.space	4
 4757 0b58 00       		.ascii	"\000"
 4758 0b59 00000000 		.space	7
 4758      000000
 4759 0b60 496E7465 		.ascii	"Integ/Sum/Prod\000"
 4759      672F5375 
 4759      6D2F5072 
 4759      6F6400
 4760 0b6f 00       		.space	1
 4761 0b70 20       		.byte	32
 4762 0b71 000000   		.space	3
 4763 0b74 01000000 		.word	1
 4764 0b78 2E       		.byte	46
 4765 0b79 000000   		.space	3
 4766 0b7c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccGGa0st.s 			page 121


 4767 0b80 534C5600 		.ascii	"SLV\000"
 4768 0b84 00000000 		.space	4
 4769 0b88 00       		.ascii	"\000"
 4770 0b89 00000000 		.space	7
 4770      000000
 4771 0b90 20       		.byte	32
 4772 0b91 000000   		.space	3
 4773 0b94 02000000 		.word	2
 4774 0b98 2E       		.byte	46
 4775 0b99 000000   		.space	3
 4776 0b9c FFFFFFFF 		.word	-1
 4777 0ba0 04206478 		.ascii	"\004 dx\000"
 4777      00
 4778 0ba5 000000   		.space	3
 4779 0ba8 00       		.ascii	"\000"
 4780 0ba9 00000000 		.space	7
 4780      000000
 4781 0bb0 21       		.byte	33
 4782 0bb1 000000   		.space	3
 4783 0bb4 01000000 		.word	1
 4784 0bb8 2E       		.byte	46
 4785 0bb9 000000   		.space	3
 4786 0bbc FFFFFFFF 		.word	-1
 4787 0bc0 53554D00 		.ascii	"SUM\000"
 4788 0bc4 00000000 		.space	4
 4789 0bc8 00       		.ascii	"\000"
 4790 0bc9 00000000 		.space	7
 4790      000000
 4791 0bd0 21       		.byte	33
 4792 0bd1 000000   		.space	3
 4793 0bd4 02000000 		.word	2
 4794 0bd8 2E       		.byte	46
 4795 0bd9 000000   		.space	3
 4796 0bdc FFFFFFFF 		.word	-1
 4797 0be0 50524F44 		.ascii	"PROD\000"
 4797      00
 4798 0be5 000000   		.space	3
 4799 0be8 00       		.ascii	"\000"
 4800 0be9 00000000 		.space	7
 4800      000000
 4801 0bf0 2C       		.byte	44
 4802 0bf1 000000   		.space	3
 4803 0bf4 FFFFFFFF 		.word	-1
 4804 0bf8 2E       		.byte	46
 4805 0bf9 000000   		.space	3
 4806 0bfc FFFFFFFF 		.word	-1
 4807 0c00 2D2D0D00 		.ascii	"--\015\000"
 4808 0c04 00000000 		.space	4
 4809 0c08 00       		.ascii	"\000"
 4810 0c09 00000000 		.space	7
 4810      000000
 4811 0c10 2D       		.byte	45
 4812 0c11 000000   		.space	3
 4813 0c14 FFFFFFFF 		.word	-1
 4814 0c18 2E       		.byte	46
 4815 0c19 000000   		.space	3
 4816 0c1c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccGGa0st.s 			page 122


 4817 0c20 43505800 		.ascii	"CPX\000"
 4818 0c24 00000000 		.space	4
 4819 0c28 00       		.ascii	"\000"
 4820 0c29 00000000 		.space	7
 4820      000000
 4821 0c30 426C616E 		.ascii	"Blank with A-D\000"
 4821      6B207769 
 4821      74682041 
 4821      2D4400
 4822 0c3f 00       		.space	1
 4823 0c40 28       		.byte	40
 4824 0c41 000000   		.space	3
 4825 0c44 03000000 		.word	3
 4826 0c48 2E       		.byte	46
 4827 0c49 000000   		.space	3
 4828 0c4c FFFFFFFF 		.word	-1
 4829 0c50 912B00   		.ascii	"\221+\000"
 4830 0c53 00000000 		.space	5
 4830      00
 4831 0c58 00       		.ascii	"\000"
 4832 0c59 00000000 		.space	7
 4832      000000
 4833 0c60 16       		.byte	22
 4834 0c61 000000   		.space	3
 4835 0c64 01000000 		.word	1
 4836 0c68 2E       		.byte	46
 4837 0c69 000000   		.space	3
 4838 0c6c FFFFFFFF 		.word	-1
 4839 0c70 312F5800 		.ascii	"1/X\000"
 4840 0c74 00000000 		.space	4
 4841 0c78 00       		.ascii	"\000"
 4842 0c79 00000000 		.space	7
 4842      000000
 4843 0c80 1C       		.byte	28
 4844 0c81 000000   		.space	3
 4845 0c84 01000000 		.word	1
 4846 0c88 2E       		.byte	46
 4847 0c89 000000   		.space	3
 4848 0c8c FFFFFFFF 		.word	-1
 4849 0c90 035800   		.ascii	"\003X\000"
 4850 0c93 00000000 		.space	5
 4850      00
 4851 0c98 00       		.ascii	"\000"
 4852 0c99 00000000 		.space	7
 4852      000000
 4853 0ca0 13       		.byte	19
 4854 0ca1 000000   		.space	3
 4855 0ca4 02000000 		.word	2
 4856 0ca8 2E       		.byte	46
 4857 0ca9 000000   		.space	3
 4858 0cac FFFFFFFF 		.word	-1
 4859 0cb0 4C4F4700 		.ascii	"LOG\000"
 4860 0cb4 00000000 		.space	4
 4861 0cb8 00       		.ascii	"\000"
 4862 0cb9 00000000 		.space	7
 4862      000000
 4863 0cc0 2C       		.byte	44
ARM GAS  /tmp/ccGGa0st.s 			page 123


 4864 0cc1 000000   		.space	3
 4865 0cc4 FFFFFFFF 		.word	-1
 4866 0cc8 2E       		.byte	46
 4867 0cc9 000000   		.space	3
 4868 0ccc FFFFFFFF 		.word	-1
 4869 0cd0 2D2D0D00 		.ascii	"--\015\000"
 4870 0cd4 00000000 		.space	4
 4871 0cd8 00       		.ascii	"\000"
 4872 0cd9 00000000 		.space	7
 4872      000000
 4873 0ce0 2D       		.byte	45
 4874 0ce1 000000   		.space	3
 4875 0ce4 FFFFFFFF 		.word	-1
 4876 0ce8 2E       		.byte	46
 4877 0ce9 000000   		.space	3
 4878 0cec FFFFFFFF 		.word	-1
 4879 0cf0 43505800 		.ascii	"CPX\000"
 4880 0cf4 00000000 		.space	4
 4881 0cf8 00       		.ascii	"\000"
 4882 0cf9 00000000 		.space	7
 4882      000000
 4883              		.section	.rodata.mapping_alpha.10908,"a"
 4884              		.align	2
 4885              		.set	.LANCHOR13,. + 0
 4888              	mapping_alpha.10908:
 4889 0000 63       		.byte	99
 4890 0001 000000   		.space	3
 4891 0004 FFFFFFFF 		.word	-1
 4892 0008 00       		.byte	0
 4893 0009 000000   		.space	3
 4894 000c FFFFFFFF 		.word	-1
 4895 0010 01       		.byte	1
 4896 0011 000000   		.space	3
 4897 0014 FFFFFFFF 		.word	-1
 4898 0018 02       		.byte	2
 4899 0019 000000   		.space	3
 4900 001c FFFFFFFF 		.word	-1
 4901 0020 03       		.byte	3
 4902 0021 000000   		.space	3
 4903 0024 FFFFFFFF 		.word	-1
 4904 0028 04       		.byte	4
 4905 0029 000000   		.space	3
 4906 002c FFFFFFFF 		.word	-1
 4907 0030 05       		.byte	5
 4908 0031 000000   		.space	3
 4909 0034 FFFFFFFF 		.word	-1
 4910 0038 06       		.byte	6
 4911 0039 000000   		.space	3
 4912 003c FFFFFFFF 		.word	-1
 4913 0040 07       		.byte	7
 4914 0041 000000   		.space	3
 4915 0044 FFFFFFFF 		.word	-1
 4916 0048 08       		.byte	8
 4917 0049 000000   		.space	3
 4918 004c FFFFFFFF 		.word	-1
 4919 0050 09       		.byte	9
 4920 0051 000000   		.space	3
ARM GAS  /tmp/ccGGa0st.s 			page 124


 4921 0054 FFFFFFFF 		.word	-1
 4922 0058 0A       		.byte	10
 4923 0059 000000   		.space	3
 4924 005c FFFFFFFF 		.word	-1
 4925 0060 0B       		.byte	11
 4926 0061 000000   		.space	3
 4927 0064 FFFFFFFF 		.word	-1
 4928 0068 0C       		.byte	12
 4929 0069 000000   		.space	3
 4930 006c FFFFFFFF 		.word	-1
 4931 0070 0D       		.byte	13
 4932 0071 000000   		.space	3
 4933 0074 FFFFFFFF 		.word	-1
 4934 0078 0E       		.byte	14
 4935 0079 000000   		.space	3
 4936 007c FFFFFFFF 		.word	-1
 4937 0080 0F       		.byte	15
 4938 0081 000000   		.space	3
 4939 0084 FFFFFFFF 		.word	-1
 4940 0088 10       		.byte	16
 4941 0089 000000   		.space	3
 4942 008c FFFFFFFF 		.word	-1
 4943 0090 12       		.byte	18
 4944 0091 000000   		.space	3
 4945 0094 FFFFFFFF 		.word	-1
 4946 0098 13       		.byte	19
 4947 0099 000000   		.space	3
 4948 009c FFFFFFFF 		.word	-1
 4949 00a0 14       		.byte	20
 4950 00a1 000000   		.space	3
 4951 00a4 FFFFFFFF 		.word	-1
 4952 00a8 15       		.byte	21
 4953 00a9 000000   		.space	3
 4954 00ac FFFFFFFF 		.word	-1
 4955 00b0 16       		.byte	22
 4956 00b1 000000   		.space	3
 4957 00b4 FFFFFFFF 		.word	-1
 4958 00b8 18       		.byte	24
 4959 00b9 000000   		.space	3
 4960 00bc FFFFFFFF 		.word	-1
 4961 00c0 19       		.byte	25
 4962 00c1 000000   		.space	3
 4963 00c4 FFFFFFFF 		.word	-1
 4964 00c8 1A       		.byte	26
 4965 00c9 000000   		.space	3
 4966 00cc FFFFFFFF 		.word	-1
 4967 00d0 1B       		.byte	27
 4968 00d1 000000   		.space	3
 4969 00d4 FFFFFFFF 		.word	-1
 4970 00d8 1C       		.byte	28
 4971 00d9 000000   		.space	3
 4972 00dc FFFFFFFF 		.word	-1
 4973 00e0 1E       		.byte	30
 4974 00e1 000000   		.space	3
 4975 00e4 FFFFFFFF 		.word	-1
 4976 00e8 1F       		.byte	31
 4977 00e9 000000   		.space	3
ARM GAS  /tmp/ccGGa0st.s 			page 125


 4978 00ec FFFFFFFF 		.word	-1
 4979 00f0 20       		.byte	32
 4980 00f1 000000   		.space	3
 4981 00f4 FFFFFFFF 		.word	-1
 4982 00f8 21       		.byte	33
 4983 00f9 000000   		.space	3
 4984 00fc FFFFFFFF 		.word	-1
 4985 0100 22       		.byte	34
 4986 0101 000000   		.space	3
 4987 0104 FFFFFFFF 		.word	-1
 4988 0108 24       		.byte	36
 4989 0109 000000   		.space	3
 4990 010c FFFFFFFF 		.word	-1
 4991 0110 25       		.byte	37
 4992 0111 000000   		.space	3
 4993 0114 FFFFFFFF 		.word	-1
 4994 0118 26       		.byte	38
 4995 0119 000000   		.space	3
 4996 011c FFFFFFFF 		.word	-1
 4997 0120 27       		.byte	39
 4998 0121 000000   		.space	3
 4999 0124 FFFFFFFF 		.word	-1
 5000 0128 28       		.byte	40
 5001 0129 000000   		.space	3
 5002 012c FFFFFFFF 		.word	-1
 5003 0130 2E       		.byte	46
 5004 0131 000000   		.space	3
 5005 0134 FFFFFFFF 		.word	-1
 5006 0138 2E       		.byte	46
 5007 0139 000000   		.space	3
 5008 013c FFFFFFFF 		.word	-1
 5009 0140 2E       		.byte	46
 5010 0141 000000   		.space	3
 5011 0144 FFFFFFFF 		.word	-1
 5012 0148 2E       		.byte	46
 5013 0149 000000   		.space	3
 5014 014c FFFFFFFF 		.word	-1
 5015 0150 2C       		.byte	44
 5016 0151 000000   		.space	3
 5017 0154 FFFFFFFF 		.word	-1
 5018 0158 2E       		.byte	46
 5019 0159 000000   		.space	3
 5020 015c FFFFFFFF 		.word	-1
 5021 0160 2E       		.byte	46
 5022 0161 000000   		.space	3
 5023 0164 FFFFFFFF 		.word	-1
 5024 0168 2E       		.byte	46
 5025 0169 000000   		.space	3
 5026 016c FFFFFFFF 		.word	-1
 5027 0170 2E       		.byte	46
 5028 0171 000000   		.space	3
 5029 0174 FFFFFFFF 		.word	-1
 5030              		.section	.rodata.mapping_fshift.10906,"a"
 5031              		.align	2
 5032              		.set	.LANCHOR11,. + 0
 5035              	mapping_fshift.10906:
 5036 0000 63       		.byte	99
ARM GAS  /tmp/ccGGa0st.s 			page 126


 5037 0001 000000   		.space	3
 5038 0004 FFFFFFFF 		.word	-1
 5039 0008 22       		.byte	34
 5040 0009 000000   		.space	3
 5041 000c 03000000 		.word	3
 5042 0010 15       		.byte	21
 5043 0011 000000   		.space	3
 5044 0014 01000000 		.word	1
 5045 0018 1C       		.byte	28
 5046 0019 000000   		.space	3
 5047 001c 02000000 		.word	2
 5048 0020 13       		.byte	19
 5049 0021 000000   		.space	3
 5050 0024 01000000 		.word	1
 5051 0028 12       		.byte	18
 5052 0029 000000   		.space	3
 5053 002c 01000000 		.word	1
 5054 0030 12       		.byte	18
 5055 0031 000000   		.space	3
 5056 0034 03000000 		.word	3
 5057 0038 2D       		.byte	45
 5058 0039 000000   		.space	3
 5059 003c 00000000 		.word	0
 5060 0040 22       		.byte	34
 5061 0041 000000   		.space	3
 5062 0044 01000000 		.word	1
 5063 0048 0F       		.byte	15
 5064 0049 000000   		.space	3
 5065 004c 03000000 		.word	3
 5066 0050 01       		.byte	1
 5067 0051 000000   		.space	3
 5068 0054 02000000 		.word	2
 5069 0058 02       		.byte	2
 5070 0059 000000   		.space	3
 5071 005c 02000000 		.word	2
 5072 0060 03       		.byte	3
 5073 0061 000000   		.space	3
 5074 0064 02000000 		.word	2
 5075 0068 0C       		.byte	12
 5076 0069 000000   		.space	3
 5077 006c 01000000 		.word	1
 5078 0070 31       		.byte	49
 5079 0071 000000   		.space	3
 5080 0074 01000000 		.word	1
 5081 0078 2F       		.byte	47
 5082 0079 000000   		.space	3
 5083 007c 04000000 		.word	4
 5084 0080 2F       		.byte	47
 5085 0081 000000   		.space	3
 5086 0084 02000000 		.word	2
 5087 0088 2F       		.byte	47
 5088 0089 000000   		.space	3
 5089 008c 01000000 		.word	1
 5090 0090 18       		.byte	24
 5091 0091 000000   		.space	3
 5092 0094 00000000 		.word	0
 5093 0098 20       		.byte	32
ARM GAS  /tmp/ccGGa0st.s 			page 127


 5094 0099 000000   		.space	3
 5095 009c 01000000 		.word	1
 5096 00a0 2F       		.byte	47
 5097 00a1 000000   		.space	3
 5098 00a4 0E000000 		.word	14
 5099 00a8 1C       		.byte	28
 5100 00a9 000000   		.space	3
 5101 00ac 03000000 		.word	3
 5102 00b0 2F       		.byte	47
 5103 00b1 000000   		.space	3
 5104 00b4 0C000000 		.word	12
 5105 00b8 1E       		.byte	30
 5106 00b9 000000   		.space	3
 5107 00bc 00000000 		.word	0
 5108 00c0 2F       		.byte	47
 5109 00c1 000000   		.space	3
 5110 00c4 03000000 		.word	3
 5111 00c8 04       		.byte	4
 5112 00c9 000000   		.space	3
 5113 00cc 03000000 		.word	3
 5114 00d0 2F       		.byte	47
 5115 00d1 000000   		.space	3
 5116 00d4 0A000000 		.word	10
 5117 00d8 2F       		.byte	47
 5118 00d9 000000   		.space	3
 5119 00dc 0B000000 		.word	11
 5120 00e0 2A       		.byte	42
 5121 00e1 000000   		.space	3
 5122 00e4 00000000 		.word	0
 5123 00e8 31       		.byte	49
 5124 00e9 000000   		.space	3
 5125 00ec 0D000000 		.word	13
 5126 00f0 2E       		.byte	46
 5127 00f1 000000   		.space	3
 5128 00f4 00000000 		.word	0
 5129 00f8 20       		.byte	32
 5130 00f9 000000   		.space	3
 5131 00fc 03000000 		.word	3
 5132 0100 2E       		.byte	46
 5133 0101 000000   		.space	3
 5134 0104 00000000 		.word	0
 5135 0108 24       		.byte	36
 5136 0109 000000   		.space	3
 5137 010c 03000000 		.word	3
 5138 0110 2F       		.byte	47
 5139 0111 000000   		.space	3
 5140 0114 08000000 		.word	8
 5141 0118 0D       		.byte	13
 5142 0119 000000   		.space	3
 5143 011c 01000000 		.word	1
 5144 0120 27       		.byte	39
 5145 0121 000000   		.space	3
 5146 0124 03000000 		.word	3
 5147 0128 06       		.byte	6
 5148 0129 000000   		.space	3
 5149 012c 03000000 		.word	3
 5150 0130 2E       		.byte	46
ARM GAS  /tmp/ccGGa0st.s 			page 128


 5151 0131 000000   		.space	3
 5152 0134 00000000 		.word	0
 5153 0138 2E       		.byte	46
 5154 0139 000000   		.space	3
 5155 013c 00000000 		.word	0
 5156 0140 2E       		.byte	46
 5157 0141 000000   		.space	3
 5158 0144 00000000 		.word	0
 5159 0148 2E       		.byte	46
 5160 0149 000000   		.space	3
 5161 014c 00000000 		.word	0
 5162 0150 2E       		.byte	46
 5163 0151 000000   		.space	3
 5164 0154 00000000 		.word	0
 5165 0158 2E       		.byte	46
 5166 0159 000000   		.space	3
 5167 015c 00000000 		.word	0
 5168 0160 2E       		.byte	46
 5169 0161 000000   		.space	3
 5170 0164 00000000 		.word	0
 5171 0168 2F       		.byte	47
 5172 0169 000000   		.space	3
 5173 016c FFFFFFFF 		.word	-1
 5174 0170 2F       		.byte	47
 5175 0171 000000   		.space	3
 5176 0174 05000000 		.word	5
 5177              		.section	.rodata.mapping_gshift.10907,"a"
 5178              		.align	2
 5179              		.set	.LANCHOR15,. + 0
 5182              	mapping_gshift.10907:
 5183 0000 63       		.byte	99
 5184 0001 000000   		.space	3
 5185 0004 FFFFFFFF 		.word	-1
 5186 0008 28       		.byte	40
 5187 0009 000000   		.space	3
 5188 000c 03000000 		.word	3
 5189 0010 16       		.byte	22
 5190 0011 000000   		.space	3
 5191 0014 01000000 		.word	1
 5192 0018 1C       		.byte	28
 5193 0019 000000   		.space	3
 5194 001c 01000000 		.word	1
 5195 0020 13       		.byte	19
 5196 0021 000000   		.space	3
 5197 0024 02000000 		.word	2
 5198 0028 2E       		.byte	46
 5199 0029 000000   		.space	3
 5200 002c 00000000 		.word	0
 5201 0030 2E       		.byte	46
 5202 0031 000000   		.space	3
 5203 0034 00000000 		.word	0
 5204 0038 2E       		.byte	46
 5205 0039 000000   		.space	3
 5206 003c 00000000 		.word	0
 5207 0040 07       		.byte	7
 5208 0041 000000   		.space	3
 5209 0044 03000000 		.word	3
ARM GAS  /tmp/ccGGa0st.s 			page 129


 5210 0048 08       		.byte	8
 5211 0049 000000   		.space	3
 5212 004c 03000000 		.word	3
 5213 0050 2F       		.byte	47
 5214 0051 000000   		.space	3
 5215 0054 04000000 		.word	4
 5216 0058 2F       		.byte	47
 5217 0059 000000   		.space	3
 5218 005c 04000000 		.word	4
 5219 0060 2F       		.byte	47
 5220 0061 000000   		.space	3
 5221 0064 04000000 		.word	4
 5222 0068 0C       		.byte	12
 5223 0069 000000   		.space	3
 5224 006c 02000000 		.word	2
 5225 0070 2F       		.byte	47
 5226 0071 000000   		.space	3
 5227 0074 06000000 		.word	6
 5228 0078 05       		.byte	5
 5229 0079 000000   		.space	3
 5230 007c 03000000 		.word	3
 5231 0080 2E       		.byte	46
 5232 0081 000000   		.space	3
 5233 0084 00000000 		.word	0
 5234 0088 2E       		.byte	46
 5235 0089 000000   		.space	3
 5236 008c 00000000 		.word	0
 5237 0090 2E       		.byte	46
 5238 0091 000000   		.space	3
 5239 0094 00000000 		.word	0
 5240 0098 2E       		.byte	46
 5241 0099 000000   		.space	3
 5242 009c 00000000 		.word	0
 5243 00a0 2E       		.byte	46
 5244 00a1 000000   		.space	3
 5245 00a4 00000000 		.word	0
 5246 00a8 1B       		.byte	27
 5247 00a9 000000   		.space	3
 5248 00ac 03000000 		.word	3
 5249 00b0 1A       		.byte	26
 5250 00b1 000000   		.space	3
 5251 00b4 03000000 		.word	3
 5252 00b8 2E       		.byte	46
 5253 00b9 000000   		.space	3
 5254 00bc 00000000 		.word	0
 5255 00c0 2E       		.byte	46
 5256 00c1 000000   		.space	3
 5257 00c4 00000000 		.word	0
 5258 00c8 0C       		.byte	12
 5259 00c9 000000   		.space	3
 5260 00cc 03000000 		.word	3
 5261 00d0 1F       		.byte	31
 5262 00d1 000000   		.space	3
 5263 00d4 03000000 		.word	3
 5264 00d8 19       		.byte	25
 5265 00d9 000000   		.space	3
 5266 00dc 03000000 		.word	3
ARM GAS  /tmp/ccGGa0st.s 			page 130


 5267 00e0 2A       		.byte	42
 5268 00e1 000000   		.space	3
 5269 00e4 FFFFFFFF 		.word	-1
 5270 00e8 2E       		.byte	46
 5271 00e9 000000   		.space	3
 5272 00ec 00000000 		.word	0
 5273 00f0 2E       		.byte	46
 5274 00f1 000000   		.space	3
 5275 00f4 00000000 		.word	0
 5276 00f8 21       		.byte	33
 5277 00f9 000000   		.space	3
 5278 00fc 03000000 		.word	3
 5279 0100 2E       		.byte	46
 5280 0101 000000   		.space	3
 5281 0104 00000000 		.word	0
 5282 0108 24       		.byte	36
 5283 0109 000000   		.space	3
 5284 010c 02000000 		.word	2
 5285 0110 2F       		.byte	47
 5286 0111 000000   		.space	3
 5287 0114 0D000000 		.word	13
 5288 0118 2E       		.byte	46
 5289 0119 000000   		.space	3
 5290 011c 00000000 		.word	0
 5291 0120 2F       		.byte	47
 5292 0121 000000   		.space	3
 5293 0124 07000000 		.word	7
 5294 0128 1E       		.byte	30
 5295 0129 000000   		.space	3
 5296 012c 03000000 		.word	3
 5297 0130 2E       		.byte	46
 5298 0131 000000   		.space	3
 5299 0134 00000000 		.word	0
 5300 0138 2E       		.byte	46
 5301 0139 000000   		.space	3
 5302 013c 00000000 		.word	0
 5303 0140 2E       		.byte	46
 5304 0141 000000   		.space	3
 5305 0144 00000000 		.word	0
 5306 0148 2E       		.byte	46
 5307 0149 000000   		.space	3
 5308 014c 00000000 		.word	0
 5309 0150 2E       		.byte	46
 5310 0151 000000   		.space	3
 5311 0154 00000000 		.word	0
 5312 0158 2E       		.byte	46
 5313 0159 000000   		.space	3
 5314 015c 00000000 		.word	0
 5315 0160 2E       		.byte	46
 5316 0161 000000   		.space	3
 5317 0164 00000000 		.word	0
 5318 0168 2E       		.byte	46
 5319 0169 000000   		.space	3
 5320 016c 00000000 		.word	0
 5321 0170 2E       		.byte	46
 5322 0171 000000   		.space	3
 5323 0174 00000000 		.word	0
ARM GAS  /tmp/ccGGa0st.s 			page 131


 5324              		.section	.rodata.mapping_none.10905,"a"
 5325              		.align	2
 5326              		.set	.LANCHOR10,. + 0
 5329              	mapping_none.10905:
 5330 0000 63       		.byte	99
 5331 0001 000000   		.space	3
 5332 0004 FFFFFFFF 		.word	-1
 5333 0008 00       		.byte	0
 5334 0009 000000   		.space	3
 5335 000c 00000000 		.word	0
 5336 0010 01       		.byte	1
 5337 0011 000000   		.space	3
 5338 0014 00000000 		.word	0
 5339 0018 03       		.byte	3
 5340 0019 000000   		.space	3
 5341 001c 00000000 		.word	0
 5342 0020 13       		.byte	19
 5343 0021 000000   		.space	3
 5344 0024 02000000 		.word	2
 5345 0028 12       		.byte	18
 5346 0029 000000   		.space	3
 5347 002c 02000000 		.word	2
 5348 0030 12       		.byte	18
 5349 0031 000000   		.space	3
 5350 0034 00000000 		.word	0
 5351 0038 06       		.byte	6
 5352 0039 000000   		.space	3
 5353 003c 00000000 		.word	0
 5354 0040 07       		.byte	7
 5355 0041 000000   		.space	3
 5356 0044 00000000 		.word	0
 5357 0048 08       		.byte	8
 5358 0049 000000   		.space	3
 5359 004c 00000000 		.word	0
 5360 0050 01       		.byte	1
 5361 0051 000000   		.space	3
 5362 0054 01000000 		.word	1
 5363 0058 02       		.byte	2
 5364 0059 000000   		.space	3
 5365 005c 01000000 		.word	1
 5366 0060 03       		.byte	3
 5367 0061 000000   		.space	3
 5368 0064 01000000 		.word	1
 5369 0068 0C       		.byte	12
 5370 0069 000000   		.space	3
 5371 006c 00000000 		.word	0
 5372 0070 0D       		.byte	13
 5373 0071 000000   		.space	3
 5374 0074 00000000 		.word	0
 5375 0078 0E       		.byte	14
 5376 0079 000000   		.space	3
 5377 007c 00000000 		.word	0
 5378 0080 0F       		.byte	15
 5379 0081 000000   		.space	3
 5380 0084 00000000 		.word	0
 5381 0088 10       		.byte	16
 5382 0089 000000   		.space	3
ARM GAS  /tmp/ccGGa0st.s 			page 132


 5383 008c 00000000 		.word	0
 5384 0090 18       		.byte	24
 5385 0091 000000   		.space	3
 5386 0094 00000000 		.word	0
 5387 0098 13       		.byte	19
 5388 0099 000000   		.space	3
 5389 009c 00000000 		.word	0
 5390 00a0 14       		.byte	20
 5391 00a1 000000   		.space	3
 5392 00a4 00000000 		.word	0
 5393 00a8 15       		.byte	21
 5394 00a9 000000   		.space	3
 5395 00ac 00000000 		.word	0
 5396 00b0 16       		.byte	22
 5397 00b1 000000   		.space	3
 5398 00b4 00000000 		.word	0
 5399 00b8 1E       		.byte	30
 5400 00b9 000000   		.space	3
 5401 00bc 00000000 		.word	0
 5402 00c0 19       		.byte	25
 5403 00c1 000000   		.space	3
 5404 00c4 00000000 		.word	0
 5405 00c8 1A       		.byte	26
 5406 00c9 000000   		.space	3
 5407 00cc 00000000 		.word	0
 5408 00d0 1B       		.byte	27
 5409 00d1 000000   		.space	3
 5410 00d4 00000000 		.word	0
 5411 00d8 1C       		.byte	28
 5412 00d9 000000   		.space	3
 5413 00dc 00000000 		.word	0
 5414 00e0 29       		.byte	41
 5415 00e1 000000   		.space	3
 5416 00e4 00000000 		.word	0
 5417 00e8 1F       		.byte	31
 5418 00e9 000000   		.space	3
 5419 00ec 00000000 		.word	0
 5420 00f0 20       		.byte	32
 5421 00f1 000000   		.space	3
 5422 00f4 00000000 		.word	0
 5423 00f8 21       		.byte	33
 5424 00f9 000000   		.space	3
 5425 00fc 00000000 		.word	0
 5426 0100 22       		.byte	34
 5427 0101 000000   		.space	3
 5428 0104 00000000 		.word	0
 5429 0108 24       		.byte	36
 5430 0109 000000   		.space	3
 5431 010c 00000000 		.word	0
 5432 0110 25       		.byte	37
 5433 0111 000000   		.space	3
 5434 0114 00000000 		.word	0
 5435 0118 26       		.byte	38
 5436 0119 000000   		.space	3
 5437 011c 00000000 		.word	0
 5438 0120 27       		.byte	39
 5439 0121 000000   		.space	3
ARM GAS  /tmp/ccGGa0st.s 			page 133


 5440 0124 00000000 		.word	0
 5441 0128 28       		.byte	40
 5442 0129 000000   		.space	3
 5443 012c 00000000 		.word	0
 5444 0130 2E       		.byte	46
 5445 0131 000000   		.space	3
 5446 0134 00000000 		.word	0
 5447 0138 2E       		.byte	46
 5448 0139 000000   		.space	3
 5449 013c 00000000 		.word	0
 5450 0140 2E       		.byte	46
 5451 0141 000000   		.space	3
 5452 0144 00000000 		.word	0
 5453 0148 2E       		.byte	46
 5454 0149 000000   		.space	3
 5455 014c 00000000 		.word	0
 5456 0150 2E       		.byte	46
 5457 0151 000000   		.space	3
 5458 0154 00000000 		.word	0
 5459 0158 2E       		.byte	46
 5460 0159 000000   		.space	3
 5461 015c 00000000 		.word	0
 5462 0160 2E       		.byte	46
 5463 0161 000000   		.space	3
 5464 0164 00000000 		.word	0
 5465 0168 2E       		.byte	46
 5466 0169 000000   		.space	3
 5467 016c 00000000 		.word	0
 5468 0170 2E       		.byte	46
 5469 0171 000000   		.space	3
 5470 0174 00000000 		.word	0
 5471              		.section	.rodata.mapping_running.10909,"a"
 5472              		.align	2
 5473              		.set	.LANCHOR14,. + 0
 5476              	mapping_running.10909:
 5477 0000 63       		.byte	99
 5478 0001 000000   		.space	3
 5479 0004 FFFFFFFF 		.word	-1
 5480 0008 00       		.byte	0
 5481 0009 000000   		.space	3
 5482 000c 00000000 		.word	0
 5483 0010 01       		.byte	1
 5484 0011 000000   		.space	3
 5485 0014 00000000 		.word	0
 5486 0018 02       		.byte	2
 5487 0019 000000   		.space	3
 5488 001c 00000000 		.word	0
 5489 0020 03       		.byte	3
 5490 0021 000000   		.space	3
 5491 0024 00000000 		.word	0
 5492 0028 04       		.byte	4
 5493 0029 000000   		.space	3
 5494 002c 00000000 		.word	0
 5495 0030 12       		.byte	18
 5496 0031 000000   		.space	3
 5497 0034 00000000 		.word	0
 5498 0038 06       		.byte	6
ARM GAS  /tmp/ccGGa0st.s 			page 134


 5499 0039 000000   		.space	3
 5500 003c 00000000 		.word	0
 5501 0040 07       		.byte	7
 5502 0041 000000   		.space	3
 5503 0044 00000000 		.word	0
 5504 0048 08       		.byte	8
 5505 0049 000000   		.space	3
 5506 004c 00000000 		.word	0
 5507 0050 09       		.byte	9
 5508 0051 000000   		.space	3
 5509 0054 00000000 		.word	0
 5510 0058 0A       		.byte	10
 5511 0059 000000   		.space	3
 5512 005c 00000000 		.word	0
 5513 0060 0B       		.byte	11
 5514 0061 000000   		.space	3
 5515 0064 00000000 		.word	0
 5516 0068 0C       		.byte	12
 5517 0069 000000   		.space	3
 5518 006c 00000000 		.word	0
 5519 0070 0D       		.byte	13
 5520 0071 000000   		.space	3
 5521 0074 00000000 		.word	0
 5522 0078 0E       		.byte	14
 5523 0079 000000   		.space	3
 5524 007c 00000000 		.word	0
 5525 0080 0F       		.byte	15
 5526 0081 000000   		.space	3
 5527 0084 00000000 		.word	0
 5528 0088 10       		.byte	16
 5529 0089 000000   		.space	3
 5530 008c 00000000 		.word	0
 5531 0090 18       		.byte	24
 5532 0091 000000   		.space	3
 5533 0094 00000000 		.word	0
 5534 0098 13       		.byte	19
 5535 0099 000000   		.space	3
 5536 009c 00000000 		.word	0
 5537 00a0 14       		.byte	20
 5538 00a1 000000   		.space	3
 5539 00a4 00000000 		.word	0
 5540 00a8 15       		.byte	21
 5541 00a9 000000   		.space	3
 5542 00ac 00000000 		.word	0
 5543 00b0 16       		.byte	22
 5544 00b1 000000   		.space	3
 5545 00b4 00000000 		.word	0
 5546 00b8 1E       		.byte	30
 5547 00b9 000000   		.space	3
 5548 00bc 00000000 		.word	0
 5549 00c0 19       		.byte	25
 5550 00c1 000000   		.space	3
 5551 00c4 00000000 		.word	0
 5552 00c8 1A       		.byte	26
 5553 00c9 000000   		.space	3
 5554 00cc 00000000 		.word	0
 5555 00d0 1B       		.byte	27
ARM GAS  /tmp/ccGGa0st.s 			page 135


 5556 00d1 000000   		.space	3
 5557 00d4 00000000 		.word	0
 5558 00d8 1C       		.byte	28
 5559 00d9 000000   		.space	3
 5560 00dc 00000000 		.word	0
 5561 00e0 09       		.byte	9
 5562 00e1 000000   		.space	3
 5563 00e4 00000000 		.word	0
 5564 00e8 1F       		.byte	31
 5565 00e9 000000   		.space	3
 5566 00ec 00000000 		.word	0
 5567 00f0 20       		.byte	32
 5568 00f1 000000   		.space	3
 5569 00f4 00000000 		.word	0
 5570 00f8 21       		.byte	33
 5571 00f9 000000   		.space	3
 5572 00fc 00000000 		.word	0
 5573 0100 22       		.byte	34
 5574 0101 000000   		.space	3
 5575 0104 00000000 		.word	0
 5576 0108 24       		.byte	36
 5577 0109 000000   		.space	3
 5578 010c 00000000 		.word	0
 5579 0110 25       		.byte	37
 5580 0111 000000   		.space	3
 5581 0114 00000000 		.word	0
 5582 0118 26       		.byte	38
 5583 0119 000000   		.space	3
 5584 011c 00000000 		.word	0
 5585 0120 27       		.byte	39
 5586 0121 000000   		.space	3
 5587 0124 00000000 		.word	0
 5588 0128 28       		.byte	40
 5589 0129 000000   		.space	3
 5590 012c 00000000 		.word	0
 5591 0130 2E       		.byte	46
 5592 0131 000000   		.space	3
 5593 0134 00000000 		.word	0
 5594 0138 2E       		.byte	46
 5595 0139 000000   		.space	3
 5596 013c 00000000 		.word	0
 5597 0140 2E       		.byte	46
 5598 0141 000000   		.space	3
 5599 0144 00000000 		.word	0
 5600 0148 2E       		.byte	46
 5601 0149 000000   		.space	3
 5602 014c 00000000 		.word	0
 5603 0150 04       		.byte	4
 5604 0151 000000   		.space	3
 5605 0154 00000000 		.word	0
 5606 0158 05       		.byte	5
 5607 0159 000000   		.space	3
 5608 015c 00000000 		.word	0
 5609 0160 2E       		.byte	46
 5610 0161 000000   		.space	3
 5611 0164 00000000 		.word	0
 5612 0168 2E       		.byte	46
ARM GAS  /tmp/ccGGa0st.s 			page 136


 5613 0169 000000   		.space	3
 5614 016c 00000000 		.word	0
 5615 0170 2E       		.byte	46
 5616 0171 000000   		.space	3
 5617 0174 00000000 		.word	0
 5618              		.section	.rodata.mid_menu,"a"
 5619              		.align	2
 5622              	mid_menu:
 5623 0000 C8C40B00 		.ascii	"\310\304\013\000"
 5624              		.text
 5625              	.Letext0:
 5626              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 5627              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 5628              		.file 6 "/usr/include/newlib/sys/_types.h"
 5629              		.file 7 "/usr/include/newlib/sys/reent.h"
 5630              		.file 8 "/usr/include/newlib/sys/lock.h"
 5631              		.file 9 "/usr/include/newlib/stdlib.h"
 5632              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 5633              		.file 11 "/usr/include/newlib/ctype.h"
 5634              		.file 12 "dmcp/ff_ifc.h"
 5635              		.file 13 "dmcp/dmcp.h"
 5636              		.file 14 "src/keys.h"
 5637              		.file 15 "src/decNumber/decContext.h"
 5638              		.file 16 "src/decNumber/decNumber.h"
 5639              		.file 17 "src/decNumber/decimal64.h"
 5640              		.file 18 "src/decNumber/decimal128.h"
 5641              		.file 19 "src/xeq.h"
 5642              		.file 20 "src/data.h"
 5643              		.file 21 "src/display.h"
 5644              		.file 22 "src/consts.h"
 5645              		.file 23 "src/storage.h"
 5646              		.file 24 "src/catalogues.h"
 5647              		.file 25 "src/menu.h"
 5648              		.file 26 "src/lcd.h"
 5649              		.file 27 "/usr/include/newlib/string.h"
 5650              		.file 28 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccGGa0st.s 			page 137


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccGGa0st.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/ccGGa0st.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/ccGGa0st.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/ccGGa0st.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/ccGGa0st.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccGGa0st.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccGGa0st.s:433    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/ccGGa0st.s:441    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/ccGGa0st.s:460    .text.disp_about:0000000000000000 $t
     /tmp/ccGGa0st.s:468    .text.disp_about:0000000000000000 disp_about
     /tmp/ccGGa0st.s:621    .text.disp_about:0000000000000080 $d
     /tmp/ccGGa0st.s:639    .text.run_menu_item:0000000000000000 $t
     /tmp/ccGGa0st.s:647    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/ccGGa0st.s:687    .text.set_menu:0000000000000000 $t
     /tmp/ccGGa0st.s:695    .text.set_menu:0000000000000000 set_menu
     /tmp/ccGGa0st.s:746    .text.set_menu:0000000000000028 $d
     /tmp/ccGGa0st.s:753    .text.toggle_default_menu:0000000000000000 $t
     /tmp/ccGGa0st.s:761    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/ccGGa0st.s:790    .text.toggle_default_menu:0000000000000018 $d
     /tmp/ccGGa0st.s:796    .text.get_menu:0000000000000000 $t
     /tmp/ccGGa0st.s:804    .text.get_menu:0000000000000000 get_menu
     /tmp/ccGGa0st.s:820    .text.get_menu:0000000000000008 $d
     /tmp/ccGGa0st.s:825    .text.set_last_menu:0000000000000000 $t
     /tmp/ccGGa0st.s:833    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccGGa0st.s:888    .text.set_last_menu:000000000000001c $d
     /tmp/ccGGa0st.s:895    .text.mdot:0000000000000000 $t
     /tmp/ccGGa0st.s:903    .text.mdot:0000000000000000 mdot
     /tmp/ccGGa0st.s:994    .text.mdot:000000000000003c $d
     /tmp/ccGGa0st.s:999    .text.display_menu:0000000000000000 $t
     /tmp/ccGGa0st.s:1007   .text.display_menu:0000000000000000 display_menu
     /tmp/ccGGa0st.s:1246   .text.display_menu:000000000000010c $d
     /tmp/ccGGa0st.s:1254   .text.display_current_menu:0000000000000000 $t
     /tmp/ccGGa0st.s:1262   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccGGa0st.s:1277   .text.display_current_menu:0000000000000008 $d
     /tmp/ccGGa0st.s:1282   .text.all_menu_dots:0000000000000000 $t
     /tmp/ccGGa0st.s:1290   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccGGa0st.s:1374   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccGGa0st.s:1379   .text.shutdown:0000000000000000 $t
     /tmp/ccGGa0st.s:1387   .text.shutdown:0000000000000000 shutdown
     /tmp/ccGGa0st.s:1405   .text.shutdown:000000000000000c $d
     /tmp/ccGGa0st.s:1410   .text.is_key_pressed:0000000000000000 $t
     /tmp/ccGGa0st.s:1418   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccGGa0st.s:1441   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccGGa0st.s:1446   .text.get_key:0000000000000000 $t
     /tmp/ccGGa0st.s:1454   .text.get_key:0000000000000000 get_key
     /tmp/ccGGa0st.s:1469   .text.get_key:0000000000000004 $d
     /tmp/ccGGa0st.s:1474   .text.put_key:0000000000000000 $t
     /tmp/ccGGa0st.s:1482   .text.put_key:0000000000000000 put_key
     /tmp/ccGGa0st.s:1561   .text.put_key:000000000000003c $d
     /tmp/ccGGa0st.s:1567   .text.shift_down:0000000000000000 $t
     /tmp/ccGGa0st.s:1575   .text.shift_down:0000000000000000 shift_down
     /tmp/ccGGa0st.s:1590   .text.start_key_timer:0000000000000000 $t
     /tmp/ccGGa0st.s:1598   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccGGa0st.s:1622   .text.start_key_timer:000000000000000c $d
     /tmp/ccGGa0st.s:1628   .text.keyticks:0000000000000000 $t
ARM GAS  /tmp/ccGGa0st.s 			page 138


     /tmp/ccGGa0st.s:1636   .text.keyticks:0000000000000000 keyticks
     /tmp/ccGGa0st.s:1667   .text.keyticks:0000000000000018 $d
     /tmp/ccGGa0st.s:1673   .text.moveto:0000000000000000 $t
     /tmp/ccGGa0st.s:1681   .text.moveto:0000000000000000 moveto
     /tmp/ccGGa0st.s:1741   .text.moveto:000000000000002c $d
     /tmp/ccGGa0st.s:1748   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccGGa0st.s:1752   .text.print_debug:0000000000000000 $t
     /tmp/ccGGa0st.s:1760   .text.print_debug:0000000000000000 print_debug
     /tmp/ccGGa0st.s:1862   .text.print_debug:0000000000000060 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccGGa0st.s:1873   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccGGa0st.s:1877   .text.print_debug2:0000000000000000 $t
     /tmp/ccGGa0st.s:1885   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccGGa0st.s:1987   .text.print_debug2:0000000000000064 $d
     /tmp/ccGGa0st.s:1998   .text.do_now:0000000000000000 $t
     /tmp/ccGGa0st.s:2006   .text.do_now:0000000000000000 do_now
     /tmp/ccGGa0st.s:2041   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccGGa0st.s:2045   .text.do_multi:0000000000000000 $t
     /tmp/ccGGa0st.s:2053   .text.do_multi:0000000000000000 do_multi
     /tmp/ccGGa0st.s:2084   .text.do_multi:0000000000000018 $d
     /tmp/ccGGa0st.s:2491   .text.do_multi:0000000000000190 $d
     /tmp/ccGGa0st.s:2500   .text.program_main:0000000000000000 $t
     /tmp/ccGGa0st.s:2508   .text.program_main:0000000000000000 program_main
     /tmp/ccGGa0st.s:3212   .text.program_main:00000000000002ac $d
     /tmp/ccGGa0st.s:3218   .text.program_main:00000000000002b2 $t
     /tmp/ccGGa0st.s:3249   .text.program_main:00000000000002c4 $d
     /tmp/ccGGa0st.s:3293   .text.program_main:0000000000000358 $t
     /tmp/ccGGa0st.s:3721   .text.program_main:0000000000000584 $d
     /tmp/ccGGa0st.s:3791   .bss.n_p:0000000000000000 n_p
     /tmp/ccGGa0st.s:3859   .data.spaces:0000000000000000 spaces
     /tmp/ccGGa0st.s:3850   .data.release:0000000000000000 release
     /tmp/ccGGa0st.s:3823   .data.h_shift:0000000000000000 h_shift
     /tmp/ccGGa0st.s:3814   .data.g_shift:0000000000000000 g_shift
     /tmp/ccGGa0st.s:3805   .data.f_shift:0000000000000000 f_shift
     /tmp/ccGGa0st.s:3832   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccGGa0st.s:3841   .data.no_key:0000000000000000 no_key
     /tmp/ccGGa0st.s:3866   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccGGa0st.s:3748   .rodata.str1.4:0000000000000000 $d
     /tmp/ccGGa0st.s:5622   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccGGa0st.s:3753   .rodata:0000000000000000 $d
     /tmp/ccGGa0st.s:3760   .bss.current_menu:0000000000000000 $d
     /tmp/ccGGa0st.s:3764   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccGGa0st.s:3767   .bss.default_menu:0000000000000000 $d
     /tmp/ccGGa0st.s:3771   .bss.default_menu:0000000000000000 default_menu
     /tmp/ccGGa0st.s:3774   .bss.last_menu:0000000000000000 $d
     /tmp/ccGGa0st.s:3778   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccGGa0st.s:3781   .bss.mdots:0000000000000000 $d
     /tmp/ccGGa0st.s:3785   .bss.mdots:0000000000000000 mdots
     /tmp/ccGGa0st.s:3788   .bss.n_p:0000000000000000 $d
     /tmp/ccGGa0st.s:3794   .bss.start_ticks:0000000000000000 $d
     /tmp/ccGGa0st.s:3798   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccGGa0st.s:3801   .data.f_shift:0000000000000000 $d
     /tmp/ccGGa0st.s:3810   .data.g_shift:0000000000000000 $d
     /tmp/ccGGa0st.s:3819   .data.h_shift:0000000000000000 $d
     /tmp/ccGGa0st.s:3828   .data.heartbeat:0000000000000000 $d
     /tmp/ccGGa0st.s:3837   .data.no_key:0000000000000000 $d
     /tmp/ccGGa0st.s:3846   .data.release:0000000000000000 $d
ARM GAS  /tmp/ccGGa0st.s 			page 139


     /tmp/ccGGa0st.s:3855   .data.spaces:0000000000000000 $d
     /tmp/ccGGa0st.s:3862   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccGGa0st.s:3872   .rodata.Menus:0000000000000000 $d
     /tmp/ccGGa0st.s:3876   .rodata.Menus:0000000000000000 Menus
     /tmp/ccGGa0st.s:4884   .rodata.mapping_alpha.10908:0000000000000000 $d
     /tmp/ccGGa0st.s:4888   .rodata.mapping_alpha.10908:0000000000000000 mapping_alpha.10908
     /tmp/ccGGa0st.s:5031   .rodata.mapping_fshift.10906:0000000000000000 $d
     /tmp/ccGGa0st.s:5035   .rodata.mapping_fshift.10906:0000000000000000 mapping_fshift.10906
     /tmp/ccGGa0st.s:5178   .rodata.mapping_gshift.10907:0000000000000000 $d
     /tmp/ccGGa0st.s:5182   .rodata.mapping_gshift.10907:0000000000000000 mapping_gshift.10907
     /tmp/ccGGa0st.s:5325   .rodata.mapping_none.10905:0000000000000000 $d
     /tmp/ccGGa0st.s:5329   .rodata.mapping_none.10905:0000000000000000 mapping_none.10905
     /tmp/ccGGa0st.s:5472   .rodata.mapping_running.10909:0000000000000000 $d
     /tmp/ccGGa0st.s:5476   .rodata.mapping_running.10909:0000000000000000 mapping_running.10909
     /tmp/ccGGa0st.s:5619   .rodata.mid_menu:0000000000000000 $d
     /tmp/ccGGa0st.s:2097   .text.do_multi:0000000000000025 $d
     /tmp/ccGGa0st.s:2097   .text.do_multi:0000000000000026 $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
pixel_length
strcpy
sprintf
process_keycode_with_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
get_alpha_state
cur_shift
StateWhileOn
DispMsg
JustDisplayed
Pause
Running

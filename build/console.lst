ARM GAS  /tmp/ccG96vrG.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_menu_label.constprop.0:
  27              	.LVL0:
  28              	.LFB25:
  29              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** void set_menu ( int new_menu ) {
   4:src/menu.c    ****   int m = current_menu;
   5:src/menu.c    ****   if (new_menu == current_menu) {
   6:src/menu.c    ****     current_menu = 0;
   7:src/menu.c    ****   }
   8:src/menu.c    ****   else if (new_menu == -1) {
   9:src/menu.c    ****     current_menu = last_menu;
  10:src/menu.c    ****   }
  11:src/menu.c    ****   else {
  12:src/menu.c    ****     current_menu = new_menu;
  13:src/menu.c    ****   }
  14:src/menu.c    ****   last_menu = m;
  15:src/menu.c    **** }
  16:src/menu.c    **** 
  17:src/menu.c    **** int get_menu () {
  18:src/menu.c    ****   return current_menu;
  19:src/menu.c    **** }
  20:src/menu.c    **** 
  21:src/menu.c    **** void display_current_menu () {
  22:src/menu.c    ****   display_menu (current_menu);
  23:src/menu.c    **** }
  24:src/menu.c    **** 
  25:src/menu.c    **** void set_last_menu () {
  26:src/menu.c    ****   set_menu (last_menu);
  27:src/menu.c    **** }
  28:src/menu.c    **** 
  29:src/menu.c    **** static unsigned char mdots[200][2];
ARM GAS  /tmp/ccG96vrG.s 			page 2


  30:src/menu.c    **** 
  31:src/menu.c    **** static const struct _menu Menus[] = {
  32:src/menu.c    ****   {
  33:src/menu.c    ****     "Blank", // 0
  34:src/menu.c    ****     { 
  35:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  36:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  37:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  38:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  39:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  40:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  41:src/menu.c    ****     }    
  42:src/menu.c    ****   },
  43:src/menu.c    ****   {
  44:src/menu.c    ****     "Clear", // 1
  45:src/menu.c    ****     { 
  46:src/menu.c    ****       { { K24, 1 }, NO_KEY, "CLProg", "" },
  47:src/menu.c    ****       { { K24, 2 }, NO_KEY, "CL\221", "" },
  48:src/menu.c    ****       { { K24, 3 }, NO_KEY, "CL X", "" },
  49:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  50:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  51:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  52:src/menu.c    ****     }    
  53:src/menu.c    ****   },
  54:src/menu.c    ****   {
  55:src/menu.c    ****     "DISP", // 2
  56:src/menu.c    ****     { 
  57:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
  58:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
  59:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
  60:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
  61:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
  62:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  63:src/menu.c    ****     }
  64:src/menu.c    ****   },
  65:src/menu.c    ****   {
  66:src/menu.c    ****     "BASE", // 3
  67:src/menu.c    ****     { 
  68:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
  69:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
  70:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
  71:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
  72:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
  73:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  74:src/menu.c    ****     }
  75:src/menu.c    ****   },
  76:src/menu.c    ****   {
  77:src/menu.c    ****     "ANGLES", // 4
  78:src/menu.c    ****     { 
  79:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
  80:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
  81:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
  82:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
  83:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
  84:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  85:src/menu.c    ****     }
  86:src/menu.c    ****       
ARM GAS  /tmp/ccG96vrG.s 			page 3


  87:src/menu.c    ****   },
  88:src/menu.c    ****   {
  89:src/menu.c    ****     "MISC", // 5
  90:src/menu.c    ****     { 
  91:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
  92:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
  93:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
  94:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
  95:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
  96:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  97:src/menu.c    ****     }
  98:src/menu.c    ****   },
  99:src/menu.c    ****   {
 100:src/menu.c    ****     "X<>Y Key", // 6
 101:src/menu.c    ****     { 
 102:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 103:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 104:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 105:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 106:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 107:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 108:src/menu.c    ****     }    
 109:src/menu.c    ****   },
 110:src/menu.c    ****   {
 111:src/menu.c    ****     "Program", // 7
 112:src/menu.c    ****     { 
 113:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 114:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 115:src/menu.c    ****       { { K61, 3 }, NO_KEY, "Pause", "" },
 116:src/menu.c    ****       { { K30, 3 }, NO_KEY, "GTO", "" },
 117:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 118:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 119:src/menu.c    ****     }
 120:src/menu.c    ****   },
 121:src/menu.c    ****   {
 122:src/menu.c    ****     "Setup 1", // 8
 123:src/menu.c    ****     { 
 124:src/menu.c    ****       { { K_SYS, 0}, NO_KEY, "System", "" },
 125:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 126:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 127:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 128:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 129:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 130:src/menu.c    ****     }
 131:src/menu.c    ****   },
 132:src/menu.c    ****   {
 133:src/menu.c    ****     "Arrow", // 9
 134:src/menu.c    ****     { 
 135:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 136:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 137:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 138:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "2HMS" },
 139:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS2" },
 140:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 141:src/menu.c    ****     }
 142:src/menu.c    ****   },
 143:src/menu.c    ****   {
ARM GAS  /tmp/ccG96vrG.s 			page 4


 144:src/menu.c    ****     "Flags", // 10
 145:src/menu.c    ****     { 
 146:src/menu.c    ****       { { K50, 1 }, NO_KEY, "SF_", "" },
 147:src/menu.c    ****       { { K50, 2 }, NO_KEY, "CF_", "" },
 148:src/menu.c    ****       { { K51, 1 }, NO_KEY, "x=?", "" },
 149:src/menu.c    ****       { { K51, 2 }, NO_KEY, "x\013?", "" },
 150:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 151:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 152:src/menu.c    ****     }
 153:src/menu.c    ****   },
 154:src/menu.c    ****   {
 155:src/menu.c    ****     "Probability", // 11
 156:src/menu.c    ****     { 
 157:src/menu.c    ****       { { K40, 3 }, { K41, 1 }, "Fact!", "\224" },
 158:src/menu.c    ****       { { K40, 1 }, { K41, 2 }, "Cy,x", "\224\235" },
 159:src/menu.c    ****       { { K40, 2 }, NO_KEY, "Py,x", "" },
 160:src/menu.c    ****       { { K12, 1 }, NO_KEY, "RAN#", "" },
 161:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 162:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 163:src/menu.c    ****     }
 164:src/menu.c    ****   },
 165:src/menu.c    ****   {
 166:src/menu.c    ****     "Statistics", // 12
 167:src/menu.c    ****     { 
 168:src/menu.c    ****       { { K42, 1 }, { K43, 3 }, "Xbar", "SUMS" },
 169:src/menu.c    ****       { { K43, 1 }, NO_KEY, "Yhat", "" },
 170:src/menu.c    ****       { { K42, 2 }, NO_KEY, "s", "" },
 171:src/menu.c    ****       { { K43, 2 }, NO_KEY, "r", "" },
 172:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 173:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 174:src/menu.c    ****     }
 175:src/menu.c    ****   },
 176:src/menu.c    ****   {
 177:src/menu.c    ****     "Setup 2", // 13
 178:src/menu.c    ****     { 
 179:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 180:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 181:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 182:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 183:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 184:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 185:src/menu.c    ****     }
 186:src/menu.c    ****   },
 187:src/menu.c    ****   {
 188:src/menu.c    ****     "Integ/Sum/Prod", // 14
 189:src/menu.c    ****     { 
 190:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 191:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 192:src/menu.c    ****       { { K53, 1 }, NO_KEY, "SUM", "" },
 193:src/menu.c    ****       { { K53, 2 }, NO_KEY, "PROD", "" },
 194:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 195:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 196:src/menu.c    ****     }
 197:src/menu.c    ****   },
 198:src/menu.c    **** };  
 199:src/menu.c    **** 
 200:src/menu.c    **** /* This code is the set_status_sized code with small changes
ARM GAS  /tmp/ccG96vrG.s 			page 5


 201:src/menu.c    ****  * and non-DM42 code removed.
 202:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 203:src/menu.c    ****  */
 204:src/menu.c    **** #define MENU_WIDTH 32
 205:src/menu.c    **** 
 206:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  30              		.loc 1 206 13 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 544
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 207:src/menu.c    ****   // dotcol is the number of the starting dot column
 208:src/menu.c    ****   // shifted is 1 if shifted
 209:src/menu.c    ****   unsigned short int posns[257];
  34              		.loc 1 209 3 view .LVU1
 210:src/menu.c    **** 
 211:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 212:src/menu.c    ****   int posns_state = 255;
  35              		.loc 1 212 3 view .LVU2
 213:src/menu.c    **** 
 214:src/menu.c    ****   int x = dotcol;
  36              		.loc 1 214 3 view .LVU3
 206:src/menu.c    ****   // dotcol is the number of the starting dot column
  37              		.loc 1 206 13 is_stmt 0 view .LVU4
  38 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  39              		.cfi_def_cfa_offset 36
  40              		.cfi_offset 4, -36
  41              		.cfi_offset 5, -32
  42              		.cfi_offset 6, -28
  43              		.cfi_offset 7, -24
  44              		.cfi_offset 8, -20
  45              		.cfi_offset 9, -16
  46              		.cfi_offset 10, -12
  47              		.cfi_offset 11, -8
  48              		.cfi_offset 14, -4
  49 0004 ADF5097D 		sub	sp, sp, #548
  50              		.cfi_def_cfa_offset 584
 206:src/menu.c    ****   // dotcol is the number of the starting dot column
  51              		.loc 1 206 13 view .LVU5
  52 0008 CDE90102 		strd	r0, r2, [sp, #4]
 215:src/menu.c    ****   int i, j, xmax;
 216:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  53              		.loc 1 216 18 view .LVU6
  54 000c 0029     		cmp	r1, #0
  55 000e B4BF     		ite	lt
  56 0010 01F11F03 		addlt	r3, r1, #31
  57 0014 0B46     		movge	r3, r1
 217:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 218:src/menu.c    **** 
 219:src/menu.c    ****   forceDispPlot=0;
  58              		.loc 1 219 16 view .LVU7
  59 0016 4848     		ldr	r0, .L36
  60              	.LVL1:
 206:src/menu.c    ****   // dotcol is the number of the starting dot column
  61              		.loc 1 206 13 view .LVU8
  62 0018 0F46     		mov	r7, r1
  63              	.LVL2:
 215:src/menu.c    ****   int i, j, xmax;
ARM GAS  /tmp/ccG96vrG.s 			page 6


  64              		.loc 1 215 3 is_stmt 1 view .LVU9
 216:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  65              		.loc 1 216 3 view .LVU10
 220:src/menu.c    **** 
 221:src/menu.c    **** #ifdef RP_PREFIX
 222:src/menu.c    ****   RectPolConv = 0;
  66              		.loc 1 222 15 is_stmt 0 view .LVU11
  67 001a 4849     		ldr	r1, .L36+4
  68              	.LVL3:
 219:src/menu.c    **** 
  69              		.loc 1 219 16 view .LVU12
  70 001c 0022     		movs	r2, #0
  71              	.LVL4:
 219:src/menu.c    **** 
  72              		.loc 1 219 16 view .LVU13
  73 001e 0270     		strb	r2, [r0]
  74              		.loc 1 222 15 view .LVU14
  75 0020 0A60     		str	r2, [r1]
 223:src/menu.c    **** #endif
 224:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
  76              		.loc 1 224 10 view .LVU15
  77 0022 019A     		ldr	r2, [sp, #4]
  78 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 216:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  79              		.loc 1 216 30 view .LVU16
  80 0026 23F01F03 		bic	r3, r3, #31
 216:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  81              		.loc 1 216 8 view .LVU17
  82 002a 03F12009 		add	r9, r3, #32
  83              	.LVL5:
 217:src/menu.c    **** 
  84              		.loc 1 217 3 is_stmt 1 view .LVU18
 219:src/menu.c    **** 
  85              		.loc 1 219 3 view .LVU19
 222:src/menu.c    **** #endif
  86              		.loc 1 222 3 view .LVU20
  87              		.loc 1 224 3 view .LVU21
  88              		.loc 1 224 9 view .LVU22
  89 002e 002D     		cmp	r5, #0
  90 0030 78D0     		beq	.L1
  91              		.loc 1 224 23 is_stmt 0 view .LVU23
  92 0032 4F45     		cmp	r7, r9
  93 0034 76DC     		bgt	.L1
  94              	.LBB33:
 225:src/menu.c    ****     int c;
 226:src/menu.c    ****     int width;
 227:src/menu.c    ****     unsigned char cmap[6];
 228:src/menu.c    **** 
 229:src/menu.c    ****     int real_width;
 230:src/menu.c    ****     int current_smallp;
 231:src/menu.c    **** 
 232:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 233:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 234:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 235:src/menu.c    ****     //           01 -> (not used)
 236:src/menu.c    ****     //           10 -> use big font
 237:src/menu.c    ****     //           11 -> use small font
ARM GAS  /tmp/ccG96vrG.s 			page 7


 238:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 239:src/menu.c    ****     if (str[0] == '\007') {
  95              		.loc 1 239 8 view .LVU24
  96 0036 072D     		cmp	r5, #7
  97              	.LBE33:
 212:src/menu.c    **** 
  98              		.loc 1 212 7 view .LVU25
  99 0038 4FF0FF04 		mov	r4, #255
 100              	.LVL6:
 101              	.LBB50:
 225:src/menu.c    ****     int c;
 102              		.loc 1 225 5 is_stmt 1 view .LVU26
 226:src/menu.c    ****     unsigned char cmap[6];
 103              		.loc 1 226 5 view .LVU27
 227:src/menu.c    **** 
 104              		.loc 1 227 5 view .LVU28
 229:src/menu.c    ****     int current_smallp;
 105              		.loc 1 229 5 view .LVU29
 230:src/menu.c    **** 
 106              		.loc 1 230 5 view .LVU30
 107              		.loc 1 239 5 view .LVU31
 240:src/menu.c    ****       width = str[1] & 0x1F;
 241:src/menu.c    ****       switch (str[1] & 0x60) {
 242:src/menu.c    ****       default:
 243:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 244:src/menu.c    **** 	break;
 245:src/menu.c    ****       case 0x40:	current_smallp = 0;
 246:src/menu.c    **** 	break;
 247:src/menu.c    ****       case 0x60:	current_smallp = 1;
 108              		.loc 1 247 33 is_stmt 0 view .LVU32
 109 003c 4FF0010A 		mov	r10, #1
 239:src/menu.c    ****       width = str[1] & 0x1F;
 110              		.loc 1 239 8 view .LVU33
 111 0040 64D1     		bne	.L5
 112              	.LVL7:
 113              	.L34:
 240:src/menu.c    ****       width = str[1] & 0x1F;
 114              		.loc 1 240 7 is_stmt 1 view .LVU34
 240:src/menu.c    ****       width = str[1] & 0x1F;
 115              		.loc 1 240 18 is_stmt 0 view .LVU35
 116 0042 019B     		ldr	r3, [sp, #4]
 117 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 118 0046 06F06003 		and	r3, r6, #96
 241:src/menu.c    ****       default:
 119              		.loc 1 241 7 view .LVU36
 120 004a 402B     		cmp	r3, #64
 240:src/menu.c    ****       width = str[1] & 0x1F;
 121              		.loc 1 240 13 view .LVU37
 122 004c 06F01F06 		and	r6, r6, #31
 123              	.LVL8:
 241:src/menu.c    ****       default:
 124              		.loc 1 241 7 is_stmt 1 view .LVU38
 125 0050 6CD0     		beq	.L28
 126 0052 602B     		cmp	r3, #96
 127 0054 6AD1     		bne	.L28
 128              		.loc 1 247 18 view .LVU39
 129              	.LVL9:
ARM GAS  /tmp/ccG96vrG.s 			page 8


 248:src/menu.c    **** 	break;
 130              		.loc 1 248 2 view .LVU40
 249:src/menu.c    ****       }
 250:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 131              		.loc 1 250 7 view .LVU41
 132              		.loc 1 250 11 is_stmt 0 view .LVU42
 133 0056 019B     		ldr	r3, [sp, #4]
 134 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 247:src/menu.c    **** 	break;
 135              		.loc 1 247 33 view .LVU43
 136 005a 0123     		movs	r3, #1
 137 005c 0093     		str	r3, [sp]
 138 005e 00F58075 		add	r5, r0, #256
 139              	.LVL10:
 140              	.L9:
 251:src/menu.c    ****       str += 3;
 141              		.loc 1 251 7 is_stmt 1 view .LVU44
 252:src/menu.c    **** 
 253:src/menu.c    ****       real_width = charlengths(c);
 142              		.loc 1 253 20 is_stmt 0 view .LVU45
 143 0062 2846     		mov	r0, r5
 144 0064 FFF7FEFF 		bl	charlengths
 145              	.LVL11:
 251:src/menu.c    ****       str += 3;
 146              		.loc 1 251 11 view .LVU46
 147 0068 019B     		ldr	r3, [sp, #4]
 148 006a 0333     		adds	r3, r3, #3
 149 006c 0193     		str	r3, [sp, #4]
 150              	.LVL12:
 151              		.loc 1 253 7 is_stmt 1 view .LVU47
 254:src/menu.c    ****     } else {
 255:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 256:src/menu.c    ****       real_width = width = charlengths(c);
 257:src/menu.c    ****       current_smallp = smallp;
 258:src/menu.c    ****     }
 259:src/menu.c    **** 
 260:src/menu.c    ****     if (x + real_width > xmax)
 152              		.loc 1 260 5 view .LVU48
 153              		.loc 1 260 11 is_stmt 0 view .LVU49
 154 006e C319     		adds	r3, r0, r7
 155              	.LVL13:
 156              		.loc 1 260 8 view .LVU50
 157 0070 9945     		cmp	r9, r3
 158 0072 57DB     		blt	.L1
 159              	.L35:
 261:src/menu.c    ****       break;
 262:src/menu.c    **** 
 263:src/menu.c    ****     if (posns_state != current_smallp) {
 160              		.loc 1 263 5 is_stmt 1 view .LVU51
 161              		.loc 1 263 8 is_stmt 0 view .LVU52
 162 0074 009B     		ldr	r3, [sp]
 163 0076 A342     		cmp	r3, r4
 264:src/menu.c    ****       findlengths(posns, current_smallp);
 164              		.loc 1 264 7 view .LVU53
 165 0078 07AB     		add	r3, sp, #28
 263:src/menu.c    ****       findlengths(posns, current_smallp);
 166              		.loc 1 263 8 view .LVU54
ARM GAS  /tmp/ccG96vrG.s 			page 9


 167 007a 05D0     		beq	.L12
 168              		.loc 1 264 7 is_stmt 1 view .LVU55
 169 007c 1846     		mov	r0, r3
 170              	.LVL14:
 171              		.loc 1 264 7 is_stmt 0 view .LVU56
 172 007e 0099     		ldr	r1, [sp]
 173 0080 0393     		str	r3, [sp, #12]
 174 0082 FFF7FEFF 		bl	findlengths
 175              	.LVL15:
 176 0086 039B     		ldr	r3, [sp, #12]
 265:src/menu.c    ****       posns_state = current_smallp;
 177              		.loc 1 265 7 is_stmt 1 view .LVU57
 178              	.LVL16:
 179              	.L12:
 266:src/menu.c    ****     }
 267:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 180              		.loc 1 267 5 view .LVU58
 181 0088 009A     		ldr	r2, [sp]
 182 008a 2846     		mov	r0, r5
 183 008c 05A9     		add	r1, sp, #20
 184 008e FFF7FEFF 		bl	unpackchar
 185              	.LVL17:
 268:src/menu.c    **** 
 269:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 186              		.loc 1 269 5 view .LVU59
 187              		.loc 1 269 15 view .LVU60
 188 0092 029B     		ldr	r3, [sp, #8]
 189 0094 03EB4704 		add	r4, r3, r7, lsl #1
 190 0098 294B     		ldr	r3, .L36+8
 191 009a 0DF1140B 		add	fp, sp, #20
 192 009e 1C44     		add	r4, r4, r3
 267:src/menu.c    **** 
 193              		.loc 1 267 5 is_stmt 0 view .LVU61
 194 00a0 4FF0050E 		mov	lr, #5
 195 00a4 A9EB0705 		sub	r5, r9, r7
 196              	.LVL18:
 197              	.L13:
 270:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 198              		.loc 1 270 17 is_stmt 1 view .LVU62
 199              		.loc 1 270 7 is_stmt 0 view .LVU63
 200 00a8 002E     		cmp	r6, #0
 201 00aa 1FDD     		ble	.L19
 271:src/menu.c    **** 	if (x+j >= xmax)
 202              		.loc 1 271 2 is_stmt 1 view .LVU64
 203              		.loc 1 271 5 is_stmt 0 view .LVU65
 204 00ac B945     		cmp	r9, r7
 205 00ae 1DDD     		ble	.L19
 206              	.LBB34:
 207              	.LBB35:
 208              	.LBB36:
 209              	.LBB37:
 272:src/menu.c    **** 	  break;
 273:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 274:src/menu.c    ****       }
 275:src/menu.c    ****     }
 276:src/menu.c    ****     x += width;
 277:src/menu.c    ****   }
ARM GAS  /tmp/ccG96vrG.s 			page 10


 278:src/menu.c    **** }
 279:src/menu.c    **** 
 280:src/menu.c    **** 
 281:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 282:src/menu.c    **** 
 283:src/menu.c    **** int pixel_length(const char *s, int smallp)
 284:src/menu.c    **** {
 285:src/menu.c    ****   int len = 0;
 286:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 287:src/menu.c    ****   while (*s != '\0') {
 288:src/menu.c    ****     if (s[0] == '\007') {
 289:src/menu.c    ****       len += s[1] & 0x1F;
 290:src/menu.c    ****       s += 3;
 291:src/menu.c    ****       continue;
 292:src/menu.c    ****     }
 293:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 294:src/menu.c    ****   }
 295:src/menu.c    ****   return len;
 296:src/menu.c    **** }
 297:src/menu.c    **** */
 298:src/menu.c    **** 
 299:src/menu.c    **** 
 300:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 301:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 302:src/menu.c    ****   if (on) {
 303:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 304:src/menu.c    ****   }
 305:src/menu.c    ****   else {
 306:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 210              		.loc 1 306 25 view .LVU66
 211 00b0 0AFA0EFC 		lsl	ip, r10, lr
 212              		.loc 1 306 17 view .LVU67
 213 00b4 4FFA8CFC 		sxtb	ip, ip
 214              	.LBE37:
 215              	.LBE36:
 216              	.LBE35:
 217              	.LBE34:
 273:src/menu.c    ****       }
 218              		.loc 1 273 31 view .LVU68
 219 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 220              	.LBB47:
 221              	.LBB44:
 222              	.LBB41:
 223              	.LBB38:
 224              		.loc 1 306 17 view .LVU69
 225 00bc 6FEA0C08 		mvn	r8, ip
 226              	.LBE38:
 227              	.LBE41:
 228              	.LBE44:
 229              	.LBE47:
 270:src/menu.c    **** 	if (x+j >= xmax)
 230              		.loc 1 270 13 view .LVU70
 231 00c0 0023     		movs	r3, #0
 232 00c2 01E0     		b	.L14
 233              	.LVL19:
 234              	.L18:
 271:src/menu.c    **** 	  break;
ARM GAS  /tmp/ccG96vrG.s 			page 11


 235              		.loc 1 271 5 view .LVU71
 236 00c4 9D42     		cmp	r5, r3
 237 00c6 11D0     		beq	.L19
 238              	.LVL20:
 239              	.L14:
 273:src/menu.c    ****       }
 240              		.loc 1 273 2 is_stmt 1 view .LVU72
 241              	.LBB48:
 242              	.LBI34:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 243              		.loc 1 300 6 view .LVU73
 244              	.LBB45:
 301:src/menu.c    ****   if (on) {
 245              		.loc 1 301 3 view .LVU74
 246              	.LBB42:
 247              	.LBI36:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 248              		.loc 1 300 6 view .LVU75
 249              	.LBB39:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 250              		.loc 1 302 3 view .LVU76
 251              	.LBE39:
 252              	.LBE42:
 301:src/menu.c    ****   if (on) {
 253              		.loc 1 301 6 is_stmt 0 view .LVU77
 254 00c8 DA19     		adds	r2, r3, r7
 255              	.LVL21:
 301:src/menu.c    ****   if (on) {
 256              		.loc 1 301 6 view .LVU78
 257 00ca C72A     		cmp	r2, #199
 258              	.LBE45:
 259              	.LBE48:
 273:src/menu.c    ****       }
 260              		.loc 1 273 46 view .LVU79
 261 00cc 40FA03F1 		asr	r1, r0, r3
 262              	.LBB49:
 263              	.LBB46:
 301:src/menu.c    ****   if (on) {
 264              		.loc 1 301 6 view .LVU80
 265 00d0 09D8     		bhi	.L16
 266              	.LBB43:
 267              	.LBB40:
 303:src/menu.c    ****   }
 268              		.loc 1 303 5 is_stmt 1 view .LVU81
 269              		.loc 1 306 5 view .LVU82
 303:src/menu.c    ****   }
 270              		.loc 1 303 17 is_stmt 0 view .LVU83
 271 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 272              	.LVL22:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 273              		.loc 1 302 6 view .LVU84
 274 00d6 C907     		lsls	r1, r1, #31
 303:src/menu.c    ****   }
 275              		.loc 1 303 17 view .LVU85
 276 00d8 4CBF     		ite	mi
 277 00da 4CEA0202 		orrmi	r2, ip, r2
 278              		.loc 1 306 17 view .LVU86
ARM GAS  /tmp/ccG96vrG.s 			page 12


 279 00de 08EA0202 		andpl	r2, r8, r2
 280 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 281              	.L16:
 282              	.LBE40:
 283              	.LBE43:
 284              	.LBE46:
 285              	.LBE49:
 271:src/menu.c    **** 	  break;
 286              		.loc 1 271 2 is_stmt 1 view .LVU87
 287              	.LVL23:
 270:src/menu.c    **** 	if (x+j >= xmax)
 288              		.loc 1 270 26 view .LVU88
 270:src/menu.c    **** 	if (x+j >= xmax)
 289              		.loc 1 270 27 is_stmt 0 view .LVU89
 290 00e6 0133     		adds	r3, r3, #1
 291              	.LVL24:
 270:src/menu.c    **** 	if (x+j >= xmax)
 292              		.loc 1 270 17 is_stmt 1 view .LVU90
 270:src/menu.c    **** 	if (x+j >= xmax)
 293              		.loc 1 270 7 is_stmt 0 view .LVU91
 294 00e8 B342     		cmp	r3, r6
 295 00ea EBD1     		bne	.L18
 296              	.LVL25:
 297              	.L19:
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 298              		.loc 1 269 20 is_stmt 1 view .LVU92
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 299              		.loc 1 269 15 view .LVU93
 300 00ec 0EF1FF3E 		add	lr, lr, #-1
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 301              		.loc 1 269 5 is_stmt 0 view .LVU94
 302 00f0 BEF1FF3F 		cmp	lr, #-1
 303 00f4 0BF1010B 		add	fp, fp, #1
 304              	.LVL26:
 269:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 305              		.loc 1 269 5 view .LVU95
 306 00f8 D6D1     		bne	.L13
 276:src/menu.c    ****   }
 307              		.loc 1 276 5 is_stmt 1 view .LVU96
 308              	.LBE50:
 224:src/menu.c    ****     int c;
 309              		.loc 1 224 10 is_stmt 0 view .LVU97
 310 00fa 019B     		ldr	r3, [sp, #4]
 311 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 312              	.LBB51:
 276:src/menu.c    ****   }
 313              		.loc 1 276 7 view .LVU98
 314 00fe 3744     		add	r7, r7, r6
 315              	.LVL27:
 276:src/menu.c    ****   }
 316              		.loc 1 276 7 view .LVU99
 317              	.LBE51:
 224:src/menu.c    ****     int c;
 318              		.loc 1 224 9 is_stmt 1 view .LVU100
 319 0100 85B1     		cbz	r5, .L1
 224:src/menu.c    ****     int c;
 320              		.loc 1 224 23 is_stmt 0 view .LVU101
ARM GAS  /tmp/ccG96vrG.s 			page 13


 321 0102 B945     		cmp	r9, r7
 322 0104 0EDB     		blt	.L1
 323              	.LBB52:
 239:src/menu.c    ****       width = str[1] & 0x1F;
 324              		.loc 1 239 8 view .LVU102
 325 0106 072D     		cmp	r5, #7
 326              	.LBE52:
 327 0108 009C     		ldr	r4, [sp]
 328              	.LBB53:
 225:src/menu.c    ****     int width;
 329              		.loc 1 225 5 is_stmt 1 view .LVU103
 226:src/menu.c    ****     unsigned char cmap[6];
 330              		.loc 1 226 5 view .LVU104
 227:src/menu.c    **** 
 331              		.loc 1 227 5 view .LVU105
 229:src/menu.c    ****     int current_smallp;
 332              		.loc 1 229 5 view .LVU106
 230:src/menu.c    **** 
 333              		.loc 1 230 5 view .LVU107
 239:src/menu.c    ****       width = str[1] & 0x1F;
 334              		.loc 1 239 5 view .LVU108
 239:src/menu.c    ****       width = str[1] & 0x1F;
 335              		.loc 1 239 8 is_stmt 0 view .LVU109
 336 010a 9AD0     		beq	.L34
 337              	.LVL28:
 338              	.L5:
 255:src/menu.c    ****       real_width = width = charlengths(c);
 339              		.loc 1 255 7 is_stmt 1 view .LVU110
 256:src/menu.c    ****       current_smallp = smallp;
 340              		.loc 1 256 28 is_stmt 0 view .LVU111
 341 010c 2846     		mov	r0, r5
 342 010e FFF7FEFF 		bl	charlengths
 343              	.LVL29:
 255:src/menu.c    ****       real_width = width = charlengths(c);
 344              		.loc 1 255 31 view .LVU112
 345 0112 019B     		ldr	r3, [sp, #4]
 346 0114 0133     		adds	r3, r3, #1
 347 0116 0193     		str	r3, [sp, #4]
 348              	.LVL30:
 256:src/menu.c    ****       current_smallp = smallp;
 349              		.loc 1 256 7 is_stmt 1 view .LVU113
 257:src/menu.c    ****     }
 350              		.loc 1 257 7 view .LVU114
 257:src/menu.c    ****     }
 351              		.loc 1 257 22 is_stmt 0 view .LVU115
 352 0118 0023     		movs	r3, #0
 353              	.LVL31:
 257:src/menu.c    ****     }
 354              		.loc 1 257 22 view .LVU116
 355 011a 0093     		str	r3, [sp]
 356              	.LVL32:
 260:src/menu.c    ****       break;
 357              		.loc 1 260 11 view .LVU117
 358 011c C319     		adds	r3, r0, r7
 359              	.LVL33:
 260:src/menu.c    ****       break;
 360              		.loc 1 260 8 view .LVU118
ARM GAS  /tmp/ccG96vrG.s 			page 14


 361 011e 9945     		cmp	r9, r3
 256:src/menu.c    ****       current_smallp = smallp;
 362              		.loc 1 256 28 view .LVU119
 363 0120 0646     		mov	r6, r0
 260:src/menu.c    ****       break;
 364              		.loc 1 260 5 is_stmt 1 view .LVU120
 260:src/menu.c    ****       break;
 365              		.loc 1 260 8 is_stmt 0 view .LVU121
 366 0122 A7DA     		bge	.L35
 367              	.LVL34:
 368              	.L1:
 260:src/menu.c    ****       break;
 369              		.loc 1 260 8 view .LVU122
 370              	.LBE53:
 278:src/menu.c    **** 
 371              		.loc 1 278 1 view .LVU123
 372 0124 0DF5097D 		add	sp, sp, #548
 373              		.cfi_remember_state
 374              		.cfi_def_cfa_offset 36
 375              		@ sp needed
 376 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 377              	.LVL35:
 378              	.L28:
 379              		.cfi_restore_state
 380              	.LBB54:
 250:src/menu.c    ****       str += 3;
 381              		.loc 1 250 7 is_stmt 1 view .LVU124
 250:src/menu.c    ****       str += 3;
 382              		.loc 1 250 11 is_stmt 0 view .LVU125
 383 012c 019B     		ldr	r3, [sp, #4]
 384 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 243:src/menu.c    **** 	break;
 385              		.loc 1 243 33 view .LVU126
 386 0130 0023     		movs	r3, #0
 387 0132 0093     		str	r3, [sp]
 388 0134 95E7     		b	.L9
 389              	.L37:
 390 0136 00BF     		.align	2
 391              	.L36:
 392 0138 00000000 		.word	forceDispPlot
 393 013c 00000000 		.word	RectPolConv
 394 0140 00000000 		.word	.LANCHOR0
 395              	.LBE54:
 396              		.cfi_endproc
 397              	.LFE25:
 399              		.section	.text.set_menu,"ax",%progbits
 400              		.align	1
 401              		.p2align 2,,3
 402              		.global	set_menu
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu fpv4-sp-d16
 408              	set_menu:
 409              	.LVL36:
 410              	.LFB3:
   3:src/menu.c    ****   int m = current_menu;
ARM GAS  /tmp/ccG96vrG.s 			page 15


 411              		.loc 1 3 32 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              		@ link register save eliminated.
   4:src/menu.c    ****   if (new_menu == current_menu) {
 416              		.loc 1 4 3 view .LVU128
   4:src/menu.c    ****   if (new_menu == current_menu) {
 417              		.loc 1 4 7 is_stmt 0 view .LVU129
 418 0000 084A     		ldr	r2, .L43
 419 0002 1368     		ldr	r3, [r2]
 420              	.LVL37:
   5:src/menu.c    ****     current_menu = 0;
 421              		.loc 1 5 3 is_stmt 1 view .LVU130
   5:src/menu.c    ****     current_menu = 0;
 422              		.loc 1 5 6 is_stmt 0 view .LVU131
 423 0004 8342     		cmp	r3, r0
 424 0006 07D0     		beq	.L42
   8:src/menu.c    ****     current_menu = last_menu;
 425              		.loc 1 8 8 is_stmt 1 view .LVU132
   9:src/menu.c    ****   }
 426              		.loc 1 9 18 is_stmt 0 view .LVU133
 427 0008 0749     		ldr	r1, .L43+4
   8:src/menu.c    ****     current_menu = last_menu;
 428              		.loc 1 8 11 view .LVU134
 429 000a B0F1FF3F 		cmp	r0, #-1
   9:src/menu.c    ****   }
 430              		.loc 1 9 5 is_stmt 1 view .LVU135
   9:src/menu.c    ****   }
 431              		.loc 1 9 18 is_stmt 0 view .LVU136
 432 000e 08BF     		it	eq
 433 0010 0868     		ldreq	r0, [r1]
 434              	.LVL38:
  12:src/menu.c    ****   }
 435              		.loc 1 12 5 is_stmt 1 view .LVU137
  12:src/menu.c    ****   }
 436              		.loc 1 12 18 is_stmt 0 view .LVU138
 437 0012 1060     		str	r0, [r2]
  14:src/menu.c    **** }
 438              		.loc 1 14 3 is_stmt 1 view .LVU139
  14:src/menu.c    **** }
 439              		.loc 1 14 13 is_stmt 0 view .LVU140
 440 0014 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 441              		.loc 1 15 1 view .LVU141
 442 0016 7047     		bx	lr
 443              	.LVL39:
 444              	.L42:
   6:src/menu.c    ****   }
 445              		.loc 1 6 5 is_stmt 1 view .LVU142
   6:src/menu.c    ****   }
 446              		.loc 1 6 18 is_stmt 0 view .LVU143
 447 0018 0021     		movs	r1, #0
 448 001a 1160     		str	r1, [r2]
 449 001c 0249     		ldr	r1, .L43+4
  14:src/menu.c    **** }
 450              		.loc 1 14 3 is_stmt 1 view .LVU144
ARM GAS  /tmp/ccG96vrG.s 			page 16


  14:src/menu.c    **** }
 451              		.loc 1 14 13 is_stmt 0 view .LVU145
 452 001e 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 453              		.loc 1 15 1 view .LVU146
 454 0020 7047     		bx	lr
 455              	.L44:
 456 0022 00BF     		.align	2
 457              	.L43:
 458 0024 00000000 		.word	.LANCHOR1
 459 0028 00000000 		.word	.LANCHOR2
 460              		.cfi_endproc
 461              	.LFE3:
 463              		.section	.text.get_menu,"ax",%progbits
 464              		.align	1
 465              		.p2align 2,,3
 466              		.global	get_menu
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv4-sp-d16
 472              	get_menu:
 473              	.LFB4:
  17:src/menu.c    ****   return current_menu;
 474              		.loc 1 17 17 is_stmt 1 view -0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
  18:src/menu.c    **** }
 479              		.loc 1 18 3 view .LVU148
  18:src/menu.c    **** }
 480              		.loc 1 18 10 is_stmt 0 view .LVU149
 481 0000 014B     		ldr	r3, .L46
  19:src/menu.c    **** 
 482              		.loc 1 19 1 view .LVU150
 483 0002 1868     		ldr	r0, [r3]
 484 0004 7047     		bx	lr
 485              	.L47:
 486 0006 00BF     		.align	2
 487              	.L46:
 488 0008 00000000 		.word	.LANCHOR1
 489              		.cfi_endproc
 490              	.LFE4:
 492              		.section	.text.set_last_menu,"ax",%progbits
 493              		.align	1
 494              		.p2align 2,,3
 495              		.global	set_last_menu
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu fpv4-sp-d16
 501              	set_last_menu:
 502              	.LFB6:
  25:src/menu.c    ****   set_menu (last_menu);
 503              		.loc 1 25 23 is_stmt 1 view -0
 504              		.cfi_startproc
ARM GAS  /tmp/ccG96vrG.s 			page 17


 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
  26:src/menu.c    **** }
 508              		.loc 1 26 3 view .LVU152
 509 0000 044B     		ldr	r3, .L52
 510              	.LBB55:
 511              	.LBB56:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 512              		.loc 1 4 7 is_stmt 0 view .LVU153
 513 0002 0549     		ldr	r1, .L52+4
 514              	.LBE56:
 515              	.LBE55:
  26:src/menu.c    **** }
 516              		.loc 1 26 3 view .LVU154
 517 0004 1868     		ldr	r0, [r3]
 518              	.LVL40:
 519              	.LBB58:
 520              	.LBI55:
   3:src/menu.c    ****   int m = current_menu;
 521              		.loc 1 3 6 is_stmt 1 view .LVU155
 522              	.LBB57:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 523              		.loc 1 4 3 view .LVU156
   4:src/menu.c    ****   if (new_menu == current_menu) {
 524              		.loc 1 4 7 is_stmt 0 view .LVU157
 525 0006 0A68     		ldr	r2, [r1]
 526              	.LVL41:
   5:src/menu.c    ****     current_menu = 0;
 527              		.loc 1 5 3 is_stmt 1 view .LVU158
  14:src/menu.c    **** }
 528              		.loc 1 14 13 is_stmt 0 view .LVU159
 529 0008 1A60     		str	r2, [r3]
   5:src/menu.c    ****     current_menu = 0;
 530              		.loc 1 5 6 view .LVU160
 531 000a 9042     		cmp	r0, r2
   6:src/menu.c    ****   }
 532              		.loc 1 6 5 is_stmt 1 view .LVU161
   6:src/menu.c    ****   }
 533              		.loc 1 6 18 is_stmt 0 view .LVU162
 534 000c 08BF     		it	eq
 535 000e 0020     		moveq	r0, #0
 536              	.LVL42:
   8:src/menu.c    ****     current_menu = last_menu;
 537              		.loc 1 8 8 is_stmt 1 view .LVU163
  12:src/menu.c    ****   }
 538              		.loc 1 12 18 is_stmt 0 view .LVU164
 539 0010 0860     		str	r0, [r1]
  14:src/menu.c    **** }
 540              		.loc 1 14 3 is_stmt 1 view .LVU165
 541              	.LVL43:
  14:src/menu.c    **** }
 542              		.loc 1 14 3 is_stmt 0 view .LVU166
 543              	.LBE57:
 544              	.LBE58:
  27:src/menu.c    **** 
 545              		.loc 1 27 1 view .LVU167
ARM GAS  /tmp/ccG96vrG.s 			page 18


 546 0012 7047     		bx	lr
 547              	.L53:
 548              		.align	2
 549              	.L52:
 550 0014 00000000 		.word	.LANCHOR2
 551 0018 00000000 		.word	.LANCHOR1
 552              		.cfi_endproc
 553              	.LFE6:
 555              		.section	.text.mdot,"ax",%progbits
 556              		.align	1
 557              		.p2align 2,,3
 558              		.global	mdot
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu fpv4-sp-d16
 564              	mdot:
 565              	.LVL44:
 566              	.LFB8:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 567              		.loc 1 300 40 is_stmt 1 view -0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 301:src/menu.c    ****   if (on) {
 572              		.loc 1 301 3 view .LVU169
 301:src/menu.c    ****   if (on) {
 573              		.loc 1 301 6 is_stmt 0 view .LVU170
 574 0000 C728     		cmp	r0, #199
 575 0002 1AD8     		bhi	.L58
 576              	.LVL45:
 577              	.LBB61:
 578              	.LBI61:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 579              		.loc 1 300 6 is_stmt 1 view .LVU171
 580              	.LBB62:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 581              		.loc 1 302 3 view .LVU172
 582              	.LBE62:
 583              	.LBE61:
 300:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 584              		.loc 1 300 40 is_stmt 0 view .LVU173
 585 0004 10B4     		push	{r4}
 586              		.cfi_def_cfa_offset 4
 587              		.cfi_offset 4, -4
 588              	.LBB65:
 589              	.LBB63:
 302:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 590              		.loc 1 302 6 view .LVU174
 591 0006 63B9     		cbnz	r3, .L61
 592              		.loc 1 306 5 is_stmt 1 view .LVU175
 593              		.loc 1 306 17 is_stmt 0 view .LVU176
 594 0008 0C4B     		ldr	r3, .L62
 595              	.LVL46:
 596              		.loc 1 306 17 view .LVU177
 597 000a 03EB4000 		add	r0, r3, r0, lsl #1
ARM GAS  /tmp/ccG96vrG.s 			page 19


 598              	.LVL47:
 599              		.loc 1 306 25 view .LVU178
 600 000e 0124     		movs	r4, #1
 601              		.loc 1 306 17 view .LVU179
 602 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 603              		.loc 1 306 25 view .LVU180
 604 0012 04FA01F1 		lsl	r1, r4, r1
 605              	.LVL48:
 606              		.loc 1 306 17 view .LVU181
 607 0016 23EA0101 		bic	r1, r3, r1
 608 001a 8154     		strb	r1, [r0, r2]
 609              	.LVL49:
 610              		.loc 1 306 17 view .LVU182
 611              	.LBE63:
 612              	.LBE65:
 307:src/menu.c    ****   }
 308:src/menu.c    **** }
 613              		.loc 1 308 1 view .LVU183
 614 001c 5DF8044B 		ldr	r4, [sp], #4
 615              		.cfi_remember_state
 616              		.cfi_restore 4
 617              		.cfi_def_cfa_offset 0
 618 0020 7047     		bx	lr
 619              	.LVL50:
 620              	.L61:
 621              		.cfi_restore_state
 622              	.LBB66:
 623              	.LBB64:
 303:src/menu.c    ****   }
 624              		.loc 1 303 5 is_stmt 1 view .LVU184
 303:src/menu.c    ****   }
 625              		.loc 1 303 17 is_stmt 0 view .LVU185
 626 0022 064B     		ldr	r3, .L62
 627              	.LVL51:
 303:src/menu.c    ****   }
 628              		.loc 1 303 17 view .LVU186
 629 0024 03EB4000 		add	r0, r3, r0, lsl #1
 630              	.LVL52:
 303:src/menu.c    ****   }
 631              		.loc 1 303 24 view .LVU187
 632 0028 0124     		movs	r4, #1
 303:src/menu.c    ****   }
 633              		.loc 1 303 17 view .LVU188
 634 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 303:src/menu.c    ****   }
 635              		.loc 1 303 24 view .LVU189
 636 002c 04FA01F1 		lsl	r1, r4, r1
 637              	.LVL53:
 303:src/menu.c    ****   }
 638              		.loc 1 303 17 view .LVU190
 639 0030 1943     		orrs	r1, r1, r3
 640 0032 8154     		strb	r1, [r0, r2]
 641              	.LBE64:
 642              	.LBE66:
 643              		.loc 1 308 1 view .LVU191
 644 0034 5DF8044B 		ldr	r4, [sp], #4
 645              		.cfi_restore 4
ARM GAS  /tmp/ccG96vrG.s 			page 20


 646              		.cfi_def_cfa_offset 0
 647 0038 7047     		bx	lr
 648              	.LVL54:
 649              	.L58:
 650              		.loc 1 308 1 view .LVU192
 651 003a 7047     		bx	lr
 652              	.L63:
 653              		.align	2
 654              	.L62:
 655 003c 00000000 		.word	.LANCHOR0
 656              		.cfi_endproc
 657              	.LFE8:
 659              		.section	.text.display_menu,"ax",%progbits
 660              		.align	1
 661              		.p2align 2,,3
 662              		.global	display_menu
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu fpv4-sp-d16
 668              	display_menu:
 669              	.LVL55:
 670              	.LFB9:
 309:src/menu.c    **** 
 310:src/menu.c    **** 
 311:src/menu.c    **** void display_menu (int current_menu) {
 671              		.loc 1 311 38 is_stmt 1 view -0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 312:src/menu.c    ****   int len = 0;
 675              		.loc 1 312 3 view .LVU194
 313:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 676              		.loc 1 313 3 view .LVU195
 311:src/menu.c    ****   int len = 0;
 677              		.loc 1 311 38 is_stmt 0 view .LVU196
 678 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 679              		.cfi_def_cfa_offset 36
 680              		.cfi_offset 4, -36
 681              		.cfi_offset 5, -32
 682              		.cfi_offset 6, -28
 683              		.cfi_offset 7, -24
 684              		.cfi_offset 8, -20
 685              		.cfi_offset 9, -16
 686              		.cfi_offset 10, -12
 687              		.cfi_offset 11, -8
 688              		.cfi_offset 14, -4
 689 0004 83B0     		sub	sp, sp, #12
 690              		.cfi_def_cfa_offset 48
 691              		.loc 1 313 3 view .LVU197
 692 0006 0024     		movs	r4, #0
 693 0008 404F     		ldr	r7, .L82
 694 000a 0094     		str	r4, [sp]
 695 000c 3423     		movs	r3, #52
 696 000e 4FF4C872 		mov	r2, #400
 697 0012 BC21     		movs	r1, #188
 311:src/menu.c    ****   int len = 0;
ARM GAS  /tmp/ccG96vrG.s 			page 21


 698              		.loc 1 311 38 view .LVU198
 699 0014 0646     		mov	r6, r0
 700              		.loc 1 313 3 view .LVU199
 701 0016 2046     		mov	r0, r4
 702              	.LVL56:
 703              		.loc 1 313 3 view .LVU200
 704 0018 B847     		blx	r7
 705              	.LVL57:
 314:src/menu.c    ****   //  if (current_menu == 0) return; // Menu 0 is blank
 315:src/menu.c    ****   // Not blank now - includes arrow and cmplx like all the others.
 316:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 706              		.loc 1 316 3 is_stmt 1 view .LVU201
 707 001a 3D4D     		ldr	r5, .L82+4
 708 001c FF23     		movs	r3, #255
 709 001e 0093     		str	r3, [sp]
 710 0020 4FF4C872 		mov	r2, #400
 711 0024 0123     		movs	r3, #1
 712 0026 BC21     		movs	r1, #188
 713 0028 2046     		mov	r0, r4
 714 002a B847     		blx	r7
 715              	.LVL58:
 317:src/menu.c    ****   //Clear previous menu
 318:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 716              		.loc 1 318 3 view .LVU202
 717              	.LBB67:
 718              		.loc 1 318 8 view .LVU203
 719              		.loc 1 318 21 view .LVU204
 319:src/menu.c    ****     mdots[col][0] = 0;
 720              		.loc 1 319 19 is_stmt 0 view .LVU205
 721 002c 2246     		mov	r2, r4
 722 002e 05F5C871 		add	r1, r5, #400
 723              	.LBE67:
 316:src/menu.c    ****   //Clear previous menu
 724              		.loc 1 316 3 view .LVU206
 725 0032 2B46     		mov	r3, r5
 726              	.LVL59:
 727              	.L65:
 728              	.LBB68:
 729              		.loc 1 319 5 is_stmt 1 discriminator 3 view .LVU207
 730              		.loc 1 319 19 is_stmt 0 discriminator 3 view .LVU208
 731 0034 1A70     		strb	r2, [r3]
 320:src/menu.c    ****     mdots[col][1] = 0;
 732              		.loc 1 320 5 is_stmt 1 discriminator 3 view .LVU209
 733              		.loc 1 320 19 is_stmt 0 discriminator 3 view .LVU210
 734 0036 5A70     		strb	r2, [r3, #1]
 318:src/menu.c    ****     mdots[col][0] = 0;
 735              		.loc 1 318 32 is_stmt 1 discriminator 3 view .LVU211
 318:src/menu.c    ****     mdots[col][0] = 0;
 736              		.loc 1 318 21 discriminator 3 view .LVU212
 737 0038 0233     		adds	r3, r3, #2
 318:src/menu.c    ****     mdots[col][0] = 0;
 738              		.loc 1 318 3 is_stmt 0 discriminator 3 view .LVU213
 739 003a 9942     		cmp	r1, r3
 740 003c FAD1     		bne	.L65
 741 003e 354B     		ldr	r3, .L82+8
 742 0040 D022     		movs	r2, #208
 743 0042 02FB0636 		mla	r6, r2, r6, r3
ARM GAS  /tmp/ccG96vrG.s 			page 22


 744              	.LVL60:
 318:src/menu.c    ****     mdots[col][0] = 0;
 745              		.loc 1 318 3 discriminator 3 view .LVU214
 746 0046 2036     		adds	r6, r6, #32
 318:src/menu.c    ****     mdots[col][0] = 0;
 747              		.loc 1 318 3 view .LVU215
 748 0048 0024     		movs	r4, #0
 749              	.LVL61:
 750              	.L66:
 318:src/menu.c    ****     mdots[col][0] = 0;
 751              		.loc 1 318 3 view .LVU216
 752              	.LBE68:
 753              	.LBB69:
 321:src/menu.c    ****   }
 322:src/menu.c    **** 
 323:src/menu.c    ****   // Draw menu items
 324:src/menu.c    ****   // 
 325:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 326:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 327:src/menu.c    ****     // Unshifted first
 328:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small fo
 754              		.loc 1 328 5 is_stmt 1 view .LVU217
 755              		.loc 1 328 11 is_stmt 0 view .LVU218
 756 004a 0021     		movs	r1, #0
 757 004c 3046     		mov	r0, r6
 758 004e FFF7FEFF 		bl	pixel_length
 759              	.LVL62:
 329:src/menu.c    ****     /*
 330:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 331:src/menu.c    ****     */
 332:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 )
 760              		.loc 1 332 5 is_stmt 1 view .LVU219
 761              		.loc 1 332 87 is_stmt 0 view .LVU220
 762 0052 C0F12000 		rsb	r0, r0, #32
 763              	.LVL63:
 764              		.loc 1 332 93 view .LVU221
 765 0056 00EBD070 		add	r0, r0, r0, lsr #31
 766              		.loc 1 332 5 view .LVU222
 767 005a 04EB6001 		add	r1, r4, r0, asr #1
 768 005e 0022     		movs	r2, #0
 769 0060 3046     		mov	r0, r6
 770 0062 06F10807 		add	r7, r6, #8
 771 0066 FFF7FEFF 		bl	set_menu_label.constprop.0
 772              	.LVL64:
 333:src/menu.c    ****     // Now shifted ...	
 334:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small font
 773              		.loc 1 334 5 is_stmt 1 view .LVU223
 774              		.loc 1 334 11 is_stmt 0 view .LVU224
 775 006a 0021     		movs	r1, #0
 776 006c 3846     		mov	r0, r7
 777 006e FFF7FEFF 		bl	pixel_length
 778              	.LVL65:
 335:src/menu.c    ****     len = item*32 + (32-len)/2;
 779              		.loc 1 335 5 is_stmt 1 view .LVU225
 780              		.loc 1 335 24 is_stmt 0 view .LVU226
 781 0072 C0F12000 		rsb	r0, r0, #32
 782              	.LVL66:
ARM GAS  /tmp/ccG96vrG.s 			page 23


 783              		.loc 1 335 29 view .LVU227
 784 0076 00EBD070 		add	r0, r0, r0, lsr #31
 785              	.LVL67:
 336:src/menu.c    ****     if (len<0) len = 0;
 786              		.loc 1 336 5 is_stmt 1 view .LVU228
 335:src/menu.c    ****     len = item*32 + (32-len)/2;
 787              		.loc 1 335 9 is_stmt 0 view .LVU229
 788 007a 04EB6001 		add	r1, r4, r0, asr #1
 789              	.LVL68:
 335:src/menu.c    ****     len = item*32 + (32-len)/2;
 790              		.loc 1 335 9 view .LVU230
 791 007e C729     		cmp	r1, #199
 792 0080 A8BF     		it	ge
 793 0082 C721     		movge	r1, #199
 794              	.LVL69:
 337:src/menu.c    ****     if (len>199) len = 199;
 338:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 795              		.loc 1 338 5 is_stmt 1 view .LVU231
 796 0084 21EAE171 		bic	r1, r1, r1, asr #31
 797              	.LVL70:
 798              		.loc 1 338 5 is_stmt 0 view .LVU232
 799 0088 3846     		mov	r0, r7
 800 008a 2034     		adds	r4, r4, #32
 801 008c 0122     		movs	r2, #1
 802 008e FFF7FEFF 		bl	set_menu_label.constprop.0
 803              	.LVL71:
 325:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 804              		.loc 1 325 32 is_stmt 1 view .LVU233
 325:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 805              		.loc 1 325 22 view .LVU234
 325:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 806              		.loc 1 325 3 is_stmt 0 view .LVU235
 807 0092 C02C     		cmp	r4, #192
 808 0094 06F12006 		add	r6, r6, #32
 809 0098 D7D1     		bne	.L66
 810 009a 1F4E     		ldr	r6, .L82+12
 811              	.LBE69:
 812              	.LBB70:
 813              	.LBB71:
 339:src/menu.c    ****   }
 340:src/menu.c    **** 
 341:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 342:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 343:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 344:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 345:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 814              		.loc 1 345 2 view .LVU236
 815 009c DFF86C90 		ldr	r9, .L82
 816 00a0 6FEA050A 		mvn	r10, r5
 817 00a4 06F5C87B 		add	fp, r6, #400
 818              	.LBE71:
 819              	.LBE70:
 820              	.LBB73:
 325:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 821              		.loc 1 325 3 view .LVU237
 822 00a8 771E     		subs	r7, r6, #1
 823              	.LBE73:
ARM GAS  /tmp/ccG96vrG.s 			page 24


 824              	.LBB74:
 825              	.LBB72:
 826              		.loc 1 345 2 view .LVU238
 827 00aa 4FF0FF08 		mov	r8, #255
 828              	.L67:
 829              	.LVL72:
 342:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 830              		.loc 1 342 23 is_stmt 1 view .LVU239
 831 00ae 0AEB0605 		add	r5, r10, r6
 342:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 832              		.loc 1 342 14 is_stmt 0 view .LVU240
 833 00b2 0024     		movs	r4, #0
 834              	.LVL73:
 835              	.L70:
 343:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 836              		.loc 1 343 7 is_stmt 1 view .LVU241
 837              		.loc 1 345 2 view .LVU242
 343:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 838              		.loc 1 343 22 is_stmt 0 view .LVU243
 839 00b4 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 343:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 840              		.loc 1 343 40 view .LVU244
 841 00b8 2241     		asrs	r2, r2, r4
 842              		.loc 1 345 2 view .LVU245
 843 00ba A4EB8401 		sub	r1, r4, r4, lsl #2
 844 00be 0323     		movs	r3, #3
 343:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 845              		.loc 1 343 10 view .LVU246
 846 00c0 12F0010F 		tst	r2, #1
 847              		.loc 1 345 2 view .LVU247
 848 00c4 01F1E901 		add	r1, r1, #233
 849 00c8 1A46     		mov	r2, r3
 850 00ca 2846     		mov	r0, r5
 343:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 851              		.loc 1 343 10 view .LVU248
 852 00cc 02D0     		beq	.L68
 853              		.loc 1 345 2 view .LVU249
 854 00ce CDF80080 		str	r8, [sp]
 855 00d2 C847     		blx	r9
 856              	.LVL74:
 857              	.L68:
 346:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 858              		.loc 1 346 7 is_stmt 1 view .LVU250
 347:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 348:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 859              		.loc 1 348 2 view .LVU251
 346:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 860              		.loc 1 346 22 is_stmt 0 view .LVU252
 861 00d4 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 346:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 862              		.loc 1 346 40 view .LVU253
 863 00d6 2241     		asrs	r2, r2, r4
 864              		.loc 1 348 2 view .LVU254
 865 00d8 A4EB8401 		sub	r1, r4, r4, lsl #2
 866 00dc 0323     		movs	r3, #3
 346:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 867              		.loc 1 346 10 view .LVU255
ARM GAS  /tmp/ccG96vrG.s 			page 25


 868 00de 12F0010F 		tst	r2, #1
 869              		.loc 1 348 2 view .LVU256
 870 00e2 01F1D001 		add	r1, r1, #208
 871 00e6 1A46     		mov	r2, r3
 872 00e8 04F10104 		add	r4, r4, #1
 873              	.LVL75:
 874              		.loc 1 348 2 view .LVU257
 875 00ec 2846     		mov	r0, r5
 346:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 876              		.loc 1 346 10 view .LVU258
 877 00ee 02D0     		beq	.L69
 878              		.loc 1 348 2 view .LVU259
 879 00f0 CDF80080 		str	r8, [sp]
 880 00f4 C847     		blx	r9
 881              	.LVL76:
 882              	.L69:
 342:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 883              		.loc 1 342 32 is_stmt 1 discriminator 2 view .LVU260
 342:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 884              		.loc 1 342 23 discriminator 2 view .LVU261
 342:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 885              		.loc 1 342 5 is_stmt 0 discriminator 2 view .LVU262
 886 00f6 062C     		cmp	r4, #6
 887 00f8 DCD1     		bne	.L70
 888              	.LBE72:
 341:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 889              		.loc 1 341 32 is_stmt 1 discriminator 2 view .LVU263
 341:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 890              		.loc 1 341 21 discriminator 2 view .LVU264
 891 00fa 0236     		adds	r6, r6, #2
 341:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 892              		.loc 1 341 3 is_stmt 0 discriminator 2 view .LVU265
 893 00fc B345     		cmp	fp, r6
 894 00fe 07F10207 		add	r7, r7, #2
 895 0102 D4D1     		bne	.L67
 896              	.LBE74:
 349:src/menu.c    ****     }
 350:src/menu.c    ****   }
 351:src/menu.c    **** }
 897              		.loc 1 351 1 view .LVU266
 898 0104 03B0     		add	sp, sp, #12
 899              		.cfi_def_cfa_offset 36
 900              		@ sp needed
 901 0106 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 902              	.LVL77:
 903              	.L83:
 904              		.loc 1 351 1 view .LVU267
 905 010a 00BF     		.align	2
 906              	.L82:
 907 010c 3D020008 		.word	134218301
 908 0110 00000000 		.word	.LANCHOR0
 909 0114 00000000 		.word	.LANCHOR3
 910 0118 01000000 		.word	.LANCHOR0+1
 911              		.cfi_endproc
 912              	.LFE9:
 914              		.section	.text.display_current_menu,"ax",%progbits
 915              		.align	1
ARM GAS  /tmp/ccG96vrG.s 			page 26


 916              		.p2align 2,,3
 917              		.global	display_current_menu
 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu fpv4-sp-d16
 923              	display_current_menu:
 924              	.LFB5:
  21:src/menu.c    ****   display_menu (current_menu);
 925              		.loc 1 21 30 is_stmt 1 view -0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
  22:src/menu.c    **** }
 930              		.loc 1 22 3 view .LVU269
 931 0000 014B     		ldr	r3, .L85
 932 0002 1868     		ldr	r0, [r3]
 933 0004 FFF7FEBF 		b	display_menu
 934              	.LVL78:
 935              	.L86:
 936              		.align	2
 937              	.L85:
 938 0008 00000000 		.word	.LANCHOR1
 939              		.cfi_endproc
 940              	.LFE5:
 942              		.section	.text.shutdown,"ax",%progbits
 943              		.align	1
 944              		.p2align 2,,3
 945              		.global	shutdown
 946              		.syntax unified
 947              		.thumb
 948              		.thumb_func
 949              		.fpu fpv4-sp-d16
 951              	shutdown:
 952              	.LFB11:
 953              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
ARM GAS  /tmp/ccG96vrG.s 			page 27


  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** const uint8_t mid_menu[] = {
  46:src/console.c ****     MI_SYSTEM_ENTER,
  47:src/console.c ****     0 }; // Terminator
  48:src/console.c **** 
  49:src/console.c **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  50:src/console.c **** 
  51:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  52:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  53:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  54:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  55:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  56:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  57:src/console.c **** 
  58:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  59:src/console.c **** 
  60:src/console.c **** static struct _ndmap remap (const int c) {
  61:src/console.c **** 
  62:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  63:src/console.c **** 
  64:src/console.c **** #include "keytran.c"
  65:src/console.c **** 
  66:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  67:src/console.c **** 
  68:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  69:src/console.c **** 
  70:src/console.c ****   if (c == 44 ) {
  71:src/console.c ****     // Start click 
  72:src/console.c ****     start_buzzer_freq(4400); sys_delay(10); stop_buzzer();
  73:src/console.c ****     // Make screenshot - allow to report errors
  74:src/console.c ****     if ( create_screenshot(1) == 2 ) {
  75:src/console.c ****       // Was error just wait for confirmation
  76:src/console.c ****       wait_for_key_press();
  77:src/console.c ****     }
ARM GAS  /tmp/ccG96vrG.s 			page 28


  78:src/console.c ****     // End click
  79:src/console.c ****     start_buzzer_freq(8800); sys_delay(10); stop_buzzer();
  80:src/console.c ****     return no_key;
  81:src/console.c ****   }
  82:src/console.c **** 
  83:src/console.c ****   
  84:src/console.c ****   if ( get_alpha_state() ) {
  85:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  86:src/console.c ****       switch (cur_shift()) { 
  87:src/console.c ****       case SHIFT_N:
  88:src/console.c **** 	return mapping_none[c]; // N -> F
  89:src/console.c **** 	break;
  90:src/console.c ****       case SHIFT_F:
  91:src/console.c **** 	return mapping_fshift[c]; // F -> G
  92:src/console.c **** 	break;
  93:src/console.c ****       case SHIFT_G:
  94:src/console.c **** 	return h_shift; // G -> H
  95:src/console.c **** 	break;
  96:src/console.c ****       case SHIFT_H:
  97:src/console.c **** 	return h_shift; // H -> N
  98:src/console.c ****       default:
  99:src/console.c **** 	return no_change;
 100:src/console.c ****       }
 101:src/console.c ****     }
 102:src/console.c ****     return mapping_alpha [c];
 103:src/console.c ****   }
 104:src/console.c ****     
 105:src/console.c ****   switch (c) {
 106:src/console.c ****   case KEY_F1:
 107:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 109:src/console.c ****   case KEY_F2:
 110:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 112:src/console.c ****   case KEY_F3:
 113:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 115:src/console.c ****   case KEY_F4:
 116:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 118:src/console.c ****   case KEY_F5:
 119:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 121:src/console.c ****   case KEY_F6:
 122:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 124:src/console.c ****   }
 125:src/console.c ****   
 126:src/console.c ****   switch (cur_shift()) {
 127:src/console.c ****   case SHIFT_N:    
 128:src/console.c ****     return mapping_none[c];
 129:src/console.c ****     break;
 130:src/console.c ****   case SHIFT_F:
 131:src/console.c ****     return mapping_fshift[c];
 132:src/console.c ****     break;
 133:src/console.c ****   case SHIFT_G:
 134:src/console.c ****     return mapping_gshift[c];
ARM GAS  /tmp/ccG96vrG.s 			page 29


 135:src/console.c ****     break;
 136:src/console.c ****   default:
 137:src/console.c ****     return no_change;
 138:src/console.c ****   }
 139:src/console.c **** }
 140:src/console.c **** 
 141:src/console.c **** #endif
 142:src/console.c **** 
 143:src/console.c **** void shutdown( void )
 144:src/console.c **** {
 954              		.loc 2 144 1 view -0
 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 0
 957              		@ frame_needed = 0, uses_anonymous_args = 0
 145:src/console.c **** #ifndef DM42
 146:src/console.c ****   checksum_all();
 147:src/console.c ****   setuptty( 1 );
 148:src/console.c ****   save_statefile( NULL );
 149:src/console.c ****   exit( 0 );
 150:src/console.c **** #else
 151:src/console.c ****   save_ram_file(0);
 958              		.loc 2 151 3 view .LVU271
 144:src/console.c **** #ifndef DM42
 959              		.loc 2 144 1 is_stmt 0 view .LVU272
 960 0000 08B5     		push	{r3, lr}
 961              		.cfi_def_cfa_offset 8
 962              		.cfi_offset 3, -8
 963              		.cfi_offset 14, -4
 964              		.loc 2 151 3 view .LVU273
 965 0002 0020     		movs	r0, #0
 966 0004 FFF7FEFF 		bl	save_ram_file
 967              	.LVL79:
 152:src/console.c ****   SET_ST(STAT_PGM_END);
 968              		.loc 2 152 3 is_stmt 1 view .LVU274
 969 0008 024A     		ldr	r2, .L89
 970 000a 1368     		ldr	r3, [r2]
 971 000c 43F40073 		orr	r3, r3, #512
 972 0010 1360     		str	r3, [r2]
 153:src/console.c **** #endif
 154:src/console.c **** }
 973              		.loc 2 154 1 is_stmt 0 view .LVU275
 974 0012 08BD     		pop	{r3, pc}
 975              	.L90:
 976              		.align	2
 977              	.L89:
 978 0014 00200010 		.word	268443648
 979              		.cfi_endproc
 980              	.LFE11:
 982              		.section	.text.is_key_pressed,"ax",%progbits
 983              		.align	1
 984              		.p2align 2,,3
 985              		.global	is_key_pressed
 986              		.syntax unified
 987              		.thumb
 988              		.thumb_func
 989              		.fpu fpv4-sp-d16
 991              	is_key_pressed:
ARM GAS  /tmp/ccG96vrG.s 			page 30


 992              	.LFB12:
 155:src/console.c **** 
 156:src/console.c **** 
 157:src/console.c **** /*
 158:src/console.c ****  *  Dummies
 159:src/console.c ****  */
 160:src/console.c **** int is_key_pressed(void) 
 161:src/console.c **** {
 993              		.loc 2 161 1 is_stmt 1 view -0
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 0
 996              		@ frame_needed = 0, uses_anonymous_args = 0
 162:src/console.c **** #ifdef DM42
 163:src/console.c ****   return !key_empty();
 997              		.loc 2 163 3 view .LVU277
 161:src/console.c **** #ifdef DM42
 998              		.loc 2 161 1 is_stmt 0 view .LVU278
 999 0000 08B5     		push	{r3, lr}
 1000              		.cfi_def_cfa_offset 8
 1001              		.cfi_offset 3, -8
 1002              		.cfi_offset 14, -4
 1003              		.loc 2 163 11 view .LVU279
 1004 0002 034B     		ldr	r3, .L93
 1005 0004 9847     		blx	r3
 1006              	.LVL80:
 164:src/console.c **** #else
 165:src/console.c ****   return 0;
 166:src/console.c **** #endif
 167:src/console.c **** }
 1007              		.loc 2 167 1 view .LVU280
 1008 0006 B0FA80F0 		clz	r0, r0
 1009 000a 4009     		lsrs	r0, r0, #5
 1010 000c 08BD     		pop	{r3, pc}
 1011              	.L94:
 1012 000e 00BF     		.align	2
 1013              	.L93:
 1014 0010 7D030008 		.word	134218621
 1015              		.cfi_endproc
 1016              	.LFE12:
 1018              		.section	.text.get_key,"ax",%progbits
 1019              		.align	1
 1020              		.p2align 2,,3
 1021              		.global	get_key
 1022              		.syntax unified
 1023              		.thumb
 1024              		.thumb_func
 1025              		.fpu fpv4-sp-d16
 1027              	get_key:
 1028              	.LFB13:
 168:src/console.c **** 
 169:src/console.c **** int get_key(void)
 170:src/console.c **** {
 1029              		.loc 2 170 1 is_stmt 1 view -0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 0
 1032              		@ frame_needed = 0, uses_anonymous_args = 0
 1033              		@ link register save eliminated.
ARM GAS  /tmp/ccG96vrG.s 			page 31


 171:src/console.c ****   #ifdef DM42
 172:src/console.c ****   return key_pop();
 1034              		.loc 2 172 3 view .LVU282
 1035              		.loc 2 172 10 is_stmt 0 view .LVU283
 1036 0000 004B     		ldr	r3, .L96
 1037 0002 1847     		bx	r3
 1038              	.LVL81:
 1039              	.L97:
 1040              		.align	2
 1041              	.L96:
 1042 0004 89030008 		.word	134218633
 1043              		.cfi_endproc
 1044              	.LFE13:
 1046              		.section	.text.put_key,"ax",%progbits
 1047              		.align	1
 1048              		.p2align 2,,3
 1049              		.global	put_key
 1050              		.syntax unified
 1051              		.thumb
 1052              		.thumb_func
 1053              		.fpu fpv4-sp-d16
 1055              	put_key:
 1056              	.LVL82:
 1057              	.LFB14:
 173:src/console.c ****   #else
 174:src/console.c ****   return 0;
 175:src/console.c ****   #endif
 176:src/console.c **** }
 177:src/console.c **** 
 178:src/console.c **** int put_key( int k )
 179:src/console.c **** {
 1058              		.loc 2 179 1 is_stmt 1 view -0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062              		@ link register save eliminated.
 180:src/console.c ****   #ifdef DM42
 181:src/console.c ****   return key_push(k);
 1063              		.loc 2 181 3 view .LVU285
 1064              		.loc 2 181 10 is_stmt 0 view .LVU286
 1065 0000 004B     		ldr	r3, .L99
 1066 0002 1847     		bx	r3
 1067              	.LVL83:
 1068              	.L100:
 1069              		.loc 2 181 10 view .LVU287
 1070              		.align	2
 1071              	.L99:
 1072 0004 81030008 		.word	134218625
 1073              		.cfi_endproc
 1074              	.LFE14:
 1076              		.section	.text.shift_down,"ax",%progbits
 1077              		.align	1
 1078              		.p2align 2,,3
 1079              		.global	shift_down
 1080              		.syntax unified
 1081              		.thumb
 1082              		.thumb_func
ARM GAS  /tmp/ccG96vrG.s 			page 32


 1083              		.fpu fpv4-sp-d16
 1085              	shift_down:
 1086              	.LFB15:
 182:src/console.c ****   #else
 183:src/console.c ****   return k;
 184:src/console.c ****   #endif
 185:src/console.c **** }
 186:src/console.c **** 
 187:src/console.c **** enum shifts shift_down(void)
 188:src/console.c **** {
 1087              		.loc 2 188 1 is_stmt 1 view -0
 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 0
 1090              		@ frame_needed = 0, uses_anonymous_args = 0
 1091              		@ link register save eliminated.
 189:src/console.c **** 	return SHIFT_N;
 1092              		.loc 2 189 2 view .LVU289
 190:src/console.c **** }
 1093              		.loc 2 190 1 is_stmt 0 view .LVU290
 1094 0000 0020     		movs	r0, #0
 1095 0002 7047     		bx	lr
 1096              		.cfi_endproc
 1097              	.LFE15:
 1099              		.section	.text.start_key_timer,"ax",%progbits
 1100              		.align	1
 1101              		.p2align 2,,3
 1102              		.global	start_key_timer
 1103              		.syntax unified
 1104              		.thumb
 1105              		.thumb_func
 1106              		.fpu fpv4-sp-d16
 1108              	start_key_timer:
 1109              	.LFB16:
 191:src/console.c **** 
 192:src/console.c **** #ifndef DM42   // No serial operations for DM42
 193:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 194:src/console.c **** /*
 195:src/console.c ****  *  Open a COM port for transmission
 196:src/console.c ****  */
 197:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 198:src/console.c **** {
 199:src/console.c **** 	return 0;
 200:src/console.c **** }
 201:src/console.c **** 
 202:src/console.c **** 
 203:src/console.c **** /*
 204:src/console.c ****  *  Close the COM port after transmission is complete
 205:src/console.c ****  */
 206:src/console.c **** extern void close_port( void )
 207:src/console.c **** {
 208:src/console.c **** }
 209:src/console.c **** 
 210:src/console.c **** 
 211:src/console.c **** /*
 212:src/console.c ****  *  Output a single byte to the serial
 213:src/console.c ****  */
 214:src/console.c **** void put_byte( unsigned char byte )
ARM GAS  /tmp/ccG96vrG.s 			page 33


 215:src/console.c **** {
 216:src/console.c **** 	report_err(ERR_PROG_BAD);
 217:src/console.c **** }
 218:src/console.c **** 
 219:src/console.c **** 
 220:src/console.c **** /*
 221:src/console.c ****  *  Force buffer flush
 222:src/console.c ****  */
 223:src/console.c **** void flush_comm( void )
 224:src/console.c **** {
 225:src/console.c **** }
 226:src/console.c **** 
 227:src/console.c **** #endif
 228:src/console.c **** #endif
 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Main loop
 233:src/console.c ****  */
 234:src/console.c **** #ifdef DM42
 235:src/console.c **** void start_key_timer (void);
 236:src/console.c **** int keyticks (void);
 237:src/console.c **** void moveto (int line, int x);
 238:src/console.c **** 
 239:src/console.c **** static int start_ticks;
 240:src/console.c **** 
 241:src/console.c **** void start_key_timer() {
 1110              		.loc 2 241 24 is_stmt 1 view -0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 242:src/console.c ****     start_ticks = get_rtc_ticks();
 1114              		.loc 2 242 5 view .LVU292
 241:src/console.c ****     start_ticks = get_rtc_ticks();
 1115              		.loc 2 241 24 is_stmt 0 view .LVU293
 1116 0000 08B5     		push	{r3, lr}
 1117              		.cfi_def_cfa_offset 8
 1118              		.cfi_offset 3, -8
 1119              		.cfi_offset 14, -4
 1120              		.loc 2 242 19 view .LVU294
 1121 0002 024B     		ldr	r3, .L104
 1122 0004 9847     		blx	r3
 1123              	.LVL84:
 1124              		.loc 2 242 17 view .LVU295
 1125 0006 024B     		ldr	r3, .L104+4
 1126 0008 1860     		str	r0, [r3]
 243:src/console.c **** }
 1127              		.loc 2 243 1 view .LVU296
 1128 000a 08BD     		pop	{r3, pc}
 1129              	.L105:
 1130              		.align	2
 1131              	.L104:
 1132 000c B9040008 		.word	134218937
 1133 0010 00000000 		.word	.LANCHOR4
 1134              		.cfi_endproc
 1135              	.LFE16:
 1137              		.section	.text.keyticks,"ax",%progbits
ARM GAS  /tmp/ccG96vrG.s 			page 34


 1138              		.align	1
 1139              		.p2align 2,,3
 1140              		.global	keyticks
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1144              		.fpu fpv4-sp-d16
 1146              	keyticks:
 1147              	.LFB17:
 244:src/console.c **** 
 245:src/console.c **** int keyticks () {
 1148              		.loc 2 245 17 is_stmt 1 view -0
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 0
 1151              		@ frame_needed = 0, uses_anonymous_args = 0
 246:src/console.c ****   int i;
 1152              		.loc 2 246 3 view .LVU298
 247:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1153              		.loc 2 247 3 view .LVU299
 245:src/console.c ****   int i;
 1154              		.loc 2 245 17 is_stmt 0 view .LVU300
 1155 0000 08B5     		push	{r3, lr}
 1156              		.cfi_def_cfa_offset 8
 1157              		.cfi_offset 3, -8
 1158              		.cfi_offset 14, -4
 1159              		.loc 2 247 8 view .LVU301
 1160 0002 054B     		ldr	r3, .L108
 1161 0004 9847     		blx	r3
 1162              	.LVL85:
 248:src/console.c ****   return i >> 8;
 1163              		.loc 2 248 3 is_stmt 1 view .LVU302
 247:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1164              		.loc 2 247 24 is_stmt 0 view .LVU303
 1165 0006 054B     		ldr	r3, .L108+4
 1166 0008 1B68     		ldr	r3, [r3]
 1167 000a C01A     		subs	r0, r0, r3
 1168              	.LVL86:
 247:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1169              		.loc 2 247 38 view .LVU304
 1170 000c 00EB8000 		add	r0, r0, r0, lsl #2
 249:src/console.c **** }
 1171              		.loc 2 249 1 view .LVU305
 1172 0010 40F3D710 		sbfx	r0, r0, #7, #24
 1173 0014 08BD     		pop	{r3, pc}
 1174              	.L109:
 1175 0016 00BF     		.align	2
 1176              	.L108:
 1177 0018 B9040008 		.word	134218937
 1178 001c 00000000 		.word	.LANCHOR4
 1179              		.cfi_endproc
 1180              	.LFE17:
 1182              		.section	.text.moveto,"ax",%progbits
 1183              		.align	1
 1184              		.p2align 2,,3
 1185              		.global	moveto
 1186              		.syntax unified
 1187              		.thumb
ARM GAS  /tmp/ccG96vrG.s 			page 35


 1188              		.thumb_func
 1189              		.fpu fpv4-sp-d16
 1191              	moveto:
 1192              	.LVL87:
 1193              	.LFB18:
 250:src/console.c **** 
 251:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 252:src/console.c **** char print_string[22];
 253:src/console.c **** int n_p = 0;
 254:src/console.c **** 
 255:src/console.c **** 
 256:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 1194              		.loc 2 256 30 is_stmt 1 view -0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 0
 1197              		@ frame_needed = 0, uses_anonymous_args = 0
 257:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1198              		.loc 2 257 3 view .LVU307
 256:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1199              		.loc 2 256 30 is_stmt 0 view .LVU308
 1200 0000 70B5     		push	{r4, r5, r6, lr}
 1201              		.cfi_def_cfa_offset 16
 1202              		.cfi_offset 4, -16
 1203              		.cfi_offset 5, -12
 1204              		.cfi_offset 6, -8
 1205              		.cfi_offset 14, -4
 1206              		.loc 2 257 3 view .LVU309
 1207 0002 0A4D     		ldr	r5, .L112
 1208 0004 0A4B     		ldr	r3, .L112+4
 256:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1209              		.loc 2 256 30 view .LVU310
 1210 0006 0246     		mov	r2, r0
 1211 0008 0C46     		mov	r4, r1
 1212              		.loc 2 257 3 view .LVU311
 1213 000a A86B     		ldr	r0, [r5, #56]
 1214              	.LVL88:
 1215              		.loc 2 257 3 view .LVU312
 1216 000c 511E     		subs	r1, r2, #1
 1217              	.LVL89:
 1218              		.loc 2 257 3 view .LVU313
 1219 000e 9847     		blx	r3
 1220              	.LVL90:
 258:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1221              		.loc 2 258 3 is_stmt 1 view .LVU314
 1222 0010 A86B     		ldr	r0, [r5, #56]
 1223 0012 084B     		ldr	r3, .L112+8
 1224              		.loc 2 258 33 is_stmt 0 view .LVU315
 1225 0014 0168     		ldr	r1, [r0]
 1226              		.loc 2 258 3 view .LVU316
 1227 0016 B0F90620 		ldrsh	r2, [r0, #6]
 1228              		.loc 2 258 33 view .LVU317
 1229 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 1230              		.loc 2 258 43 view .LVU318
 1231 001c 013C     		subs	r4, r4, #1
 1232              	.LVL91:
 1233              		.loc 2 258 40 view .LVU319
 1234 001e 04FB01F1 		mul	r1, r4, r1
ARM GAS  /tmp/ccG96vrG.s 			page 36


 1235              		.loc 2 258 3 view .LVU320
 1236 0022 1431     		adds	r1, r1, #20
 259:src/console.c **** }
 1237              		.loc 2 259 1 view .LVU321
 1238 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1239              		.cfi_restore 14
 1240              		.cfi_restore 6
 1241              		.cfi_restore 5
 1242              		.cfi_restore 4
 1243              		.cfi_def_cfa_offset 0
 1244              	.LVL92:
 258:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1245              		.loc 2 258 3 view .LVU322
 1246 0028 1847     		bx	r3	@ indirect register sibling call
 1247              	.LVL93:
 1248              	.L113:
 1249 002a 00BF     		.align	2
 1250              	.L112:
 1251 002c 00200010 		.word	268443648
 1252 0030 69020008 		.word	134218345
 1253 0034 6D020008 		.word	134218349
 1254              		.cfi_endproc
 1255              	.LFE18:
 1257              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 1258              		.align	2
 1259              	.LC0:
 1260 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 1260      673A2025 
 1260      34692C25 
 1260      346900
 1261              		.section	.text.print_debug,"ax",%progbits
 1262              		.align	1
 1263              		.p2align 2,,3
 1264              		.global	print_debug
 1265              		.syntax unified
 1266              		.thumb
 1267              		.thumb_func
 1268              		.fpu fpv4-sp-d16
 1270              	print_debug:
 1271              	.LVL94:
 1272              	.LFB19:
 260:src/console.c **** 
 261:src/console.c **** void print_debug (int i, int j) {
 1273              		.loc 2 261 33 is_stmt 1 view -0
 1274              		.cfi_startproc
 1275              		@ args = 0, pretend = 0, frame = 8
 1276              		@ frame_needed = 0, uses_anonymous_args = 0
 262:src/console.c ****   strcpy( print_string, spaces );
 1277              		.loc 2 262 3 view .LVU324
 261:src/console.c ****   strcpy( print_string, spaces );
 1278              		.loc 2 261 33 is_stmt 0 view .LVU325
 1279 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1280              		.cfi_def_cfa_offset 24
 1281              		.cfi_offset 4, -24
 1282              		.cfi_offset 5, -20
 1283              		.cfi_offset 6, -16
 1284              		.cfi_offset 7, -12
ARM GAS  /tmp/ccG96vrG.s 			page 37


 1285              		.cfi_offset 8, -8
 1286              		.cfi_offset 14, -4
 1287              		.loc 2 262 3 view .LVU326
 1288 0004 174C     		ldr	r4, .L116
 1289 0006 184F     		ldr	r7, .L116+4
 263:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 264:src/console.c ****   moveto (3, 1);
 265:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1290              		.loc 2 265 3 view .LVU327
 1291 0008 184E     		ldr	r6, .L116+8
 1292 000a 194D     		ldr	r5, .L116+12
 266:src/console.c ****   lcd_refresh();
 1293              		.loc 2 266 3 view .LVU328
 1294 000c DFF86C80 		ldr	r8, .L116+24
 261:src/console.c ****   strcpy( print_string, spaces );
 1295              		.loc 2 261 33 view .LVU329
 1296 0010 82B0     		sub	sp, sp, #8
 1297              		.cfi_def_cfa_offset 32
 261:src/console.c ****   strcpy( print_string, spaces );
 1298              		.loc 2 261 33 view .LVU330
 1299 0012 0190     		str	r0, [sp, #4]
 1300 0014 0091     		str	r1, [sp]
 262:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1301              		.loc 2 262 3 view .LVU331
 1302 0016 2046     		mov	r0, r4
 1303              	.LVL95:
 262:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1304              		.loc 2 262 3 view .LVU332
 1305 0018 3946     		mov	r1, r7
 1306              	.LVL96:
 262:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1307              		.loc 2 262 3 view .LVU333
 1308 001a FFF7FEFF 		bl	strcpy
 1309              	.LVL97:
 263:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1310              		.loc 2 263 3 is_stmt 1 view .LVU334
 1311 001e DDE90032 		ldrd	r3, r2, [sp]
 1312 0022 1449     		ldr	r1, .L116+16
 1313 0024 2046     		mov	r0, r4
 1314 0026 FFF7FEFF 		bl	sprintf
 1315              	.LVL98:
 264:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1316              		.loc 2 264 3 view .LVU335
 1317 002a 0121     		movs	r1, #1
 1318 002c 0320     		movs	r0, #3
 1319 002e FFF7FEFF 		bl	moveto
 1320              	.LVL99:
 265:src/console.c ****   lcd_refresh();
 1321              		.loc 2 265 3 view .LVU336
 1322 0032 2146     		mov	r1, r4
 1323 0034 B06B     		ldr	r0, [r6, #56]
 1324 0036 A847     		blx	r5
 1325              	.LVL100:
 1326              		.loc 2 266 3 view .LVU337
 1327 0038 C047     		blx	r8
 1328              	.LVL101:
 267:src/console.c ****   sys_delay (2500);
ARM GAS  /tmp/ccG96vrG.s 			page 38


 1329              		.loc 2 267 3 view .LVU338
 1330 003a 0F4B     		ldr	r3, .L116+20
 1331 003c 40F6C410 		movw	r0, #2500
 1332 0040 9847     		blx	r3
 1333              	.LVL102:
 268:src/console.c ****   /* wait_for_key_press(); */
 269:src/console.c ****   //  key_pop_all();
 270:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 271:src/console.c ****   // key_pop_all();
 272:src/console.c ****   strcpy( print_string, spaces );
 1334              		.loc 2 272 3 view .LVU339
 1335 0042 3946     		mov	r1, r7
 1336 0044 2046     		mov	r0, r4
 1337 0046 FFF7FEFF 		bl	strcpy
 1338              	.LVL103:
 273:src/console.c ****   moveto (3, 1);
 1339              		.loc 2 273 3 view .LVU340
 1340 004a 0121     		movs	r1, #1
 1341 004c 0320     		movs	r0, #3
 1342 004e FFF7FEFF 		bl	moveto
 1343              	.LVL104:
 274:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1344              		.loc 2 274 3 view .LVU341
 1345 0052 B06B     		ldr	r0, [r6, #56]
 1346 0054 2146     		mov	r1, r4
 1347 0056 A847     		blx	r5
 1348              	.LVL105:
 275:src/console.c ****   lcd_refresh();
 1349              		.loc 2 275 3 view .LVU342
 1350 0058 4346     		mov	r3, r8
 276:src/console.c ****   // while (key_empty()<=0);; // wait for release
 277:src/console.c ****   // key_pop_all();
 278:src/console.c **** }
 1351              		.loc 2 278 1 is_stmt 0 view .LVU343
 1352 005a 02B0     		add	sp, sp, #8
 1353              		.cfi_def_cfa_offset 24
 1354              	.LVL106:
 1355              		.loc 2 278 1 view .LVU344
 1356              		@ sp needed
 1357 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1358              		.cfi_restore 14
 1359              		.cfi_restore 8
 1360              		.cfi_restore 7
 1361              		.cfi_restore 6
 1362              		.cfi_restore 5
 1363              		.cfi_restore 4
 1364              		.cfi_def_cfa_offset 0
 1365              	.LVL107:
 275:src/console.c ****   lcd_refresh();
 1366              		.loc 2 275 3 view .LVU345
 1367 0060 1847     		bx	r3	@ indirect register sibling call
 1368              	.LVL108:
 1369              	.L117:
 1370 0062 00BF     		.align	2
 1371              	.L116:
 1372 0064 00000000 		.word	print_string
 1373 0068 00000000 		.word	.LANCHOR5
ARM GAS  /tmp/ccG96vrG.s 			page 39


 1374 006c 00200010 		.word	268443648
 1375 0070 B1020008 		.word	134218417
 1376 0074 00000000 		.word	.LC0
 1377 0078 05040008 		.word	134218757
 1378 007c 31020008 		.word	134218289
 1379              		.cfi_endproc
 1380              	.LFE19:
 1382              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 1383              		.align	2
 1384              	.LC1:
 1385 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 1385      692C2531 
 1385      337300
 1386              		.section	.text.print_debug2,"ax",%progbits
 1387              		.align	1
 1388              		.p2align 2,,3
 1389              		.global	print_debug2
 1390              		.syntax unified
 1391              		.thumb
 1392              		.thumb_func
 1393              		.fpu fpv4-sp-d16
 1395              	print_debug2:
 1396              	.LVL109:
 1397              	.LFB20:
 279:src/console.c **** 
 280:src/console.c **** void print_debug2 (int i, char* j) {
 1398              		.loc 2 280 36 is_stmt 1 view -0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 8
 1401              		@ frame_needed = 0, uses_anonymous_args = 0
 281:src/console.c ****   strcpy( print_string, spaces );
 1402              		.loc 2 281 3 view .LVU347
 280:src/console.c ****   strcpy( print_string, spaces );
 1403              		.loc 2 280 36 is_stmt 0 view .LVU348
 1404 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1405              		.cfi_def_cfa_offset 24
 1406              		.cfi_offset 4, -24
 1407              		.cfi_offset 5, -20
 1408              		.cfi_offset 6, -16
 1409              		.cfi_offset 7, -12
 1410              		.cfi_offset 8, -8
 1411              		.cfi_offset 14, -4
 1412              		.loc 2 281 3 view .LVU349
 1413 0004 174C     		ldr	r4, .L120
 1414 0006 184F     		ldr	r7, .L120+4
 282:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 283:src/console.c ****   moveto (3, 1);
 284:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1415              		.loc 2 284 3 view .LVU350
 1416 0008 184E     		ldr	r6, .L120+8
 1417 000a 194D     		ldr	r5, .L120+12
 285:src/console.c ****   lcd_refresh();
 1418              		.loc 2 285 3 view .LVU351
 1419 000c DFF86C80 		ldr	r8, .L120+24
 280:src/console.c ****   strcpy( print_string, spaces );
 1420              		.loc 2 280 36 view .LVU352
 1421 0010 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccG96vrG.s 			page 40


 1422              		.cfi_def_cfa_offset 32
 280:src/console.c ****   strcpy( print_string, spaces );
 1423              		.loc 2 280 36 view .LVU353
 1424 0012 0190     		str	r0, [sp, #4]
 1425 0014 0091     		str	r1, [sp]
 281:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1426              		.loc 2 281 3 view .LVU354
 1427 0016 2046     		mov	r0, r4
 1428              	.LVL110:
 281:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1429              		.loc 2 281 3 view .LVU355
 1430 0018 3946     		mov	r1, r7
 1431              	.LVL111:
 281:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1432              		.loc 2 281 3 view .LVU356
 1433 001a FFF7FEFF 		bl	strcpy
 1434              	.LVL112:
 282:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1435              		.loc 2 282 3 is_stmt 1 view .LVU357
 1436 001e DDE90032 		ldrd	r3, r2, [sp]
 1437 0022 1449     		ldr	r1, .L120+16
 1438 0024 2046     		mov	r0, r4
 1439 0026 FFF7FEFF 		bl	sprintf
 1440              	.LVL113:
 283:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1441              		.loc 2 283 3 view .LVU358
 1442 002a 0121     		movs	r1, #1
 1443 002c 0320     		movs	r0, #3
 1444 002e FFF7FEFF 		bl	moveto
 1445              	.LVL114:
 284:src/console.c ****   lcd_refresh();
 1446              		.loc 2 284 3 view .LVU359
 1447 0032 2146     		mov	r1, r4
 1448 0034 B06B     		ldr	r0, [r6, #56]
 1449 0036 A847     		blx	r5
 1450              	.LVL115:
 1451              		.loc 2 285 3 view .LVU360
 1452 0038 C047     		blx	r8
 1453              	.LVL116:
 286:src/console.c ****   sys_delay (2500);
 1454              		.loc 2 286 3 view .LVU361
 1455 003a 0F4B     		ldr	r3, .L120+20
 1456 003c 40F6C410 		movw	r0, #2500
 1457 0040 9847     		blx	r3
 1458              	.LVL117:
 287:src/console.c ****   /* wait_for_key_press(); */
 288:src/console.c ****   //  key_pop_all();
 289:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 290:src/console.c ****   // key_pop_all();
 291:src/console.c ****   strcpy( print_string, spaces );
 1459              		.loc 2 291 3 view .LVU362
 1460 0042 3946     		mov	r1, r7
 1461 0044 2046     		mov	r0, r4
 1462 0046 FFF7FEFF 		bl	strcpy
 1463              	.LVL118:
 292:src/console.c ****   moveto (3, 1);
 1464              		.loc 2 292 3 view .LVU363
ARM GAS  /tmp/ccG96vrG.s 			page 41


 1465 004a 0121     		movs	r1, #1
 1466 004c 0320     		movs	r0, #3
 1467 004e FFF7FEFF 		bl	moveto
 1468              	.LVL119:
 293:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1469              		.loc 2 293 3 view .LVU364
 1470 0052 B06B     		ldr	r0, [r6, #56]
 1471 0054 2146     		mov	r1, r4
 1472 0056 A847     		blx	r5
 1473              	.LVL120:
 294:src/console.c ****   lcd_refresh();
 1474              		.loc 2 294 3 view .LVU365
 1475 0058 4346     		mov	r3, r8
 295:src/console.c ****   // while (key_empty()<=0);; // wait for release
 296:src/console.c ****   // key_pop_all();
 297:src/console.c **** }
 1476              		.loc 2 297 1 is_stmt 0 view .LVU366
 1477 005a 02B0     		add	sp, sp, #8
 1478              		.cfi_def_cfa_offset 24
 1479              	.LVL121:
 1480              		.loc 2 297 1 view .LVU367
 1481              		@ sp needed
 1482 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1483              		.cfi_restore 14
 1484              		.cfi_restore 8
 1485              		.cfi_restore 7
 1486              		.cfi_restore 6
 1487              		.cfi_restore 5
 1488              		.cfi_restore 4
 1489              		.cfi_def_cfa_offset 0
 1490              	.LVL122:
 294:src/console.c ****   lcd_refresh();
 1491              		.loc 2 294 3 view .LVU368
 1492 0060 1847     		bx	r3	@ indirect register sibling call
 1493              	.LVL123:
 1494              	.L121:
 1495 0062 00BF     		.align	2
 1496              	.L120:
 1497 0064 00000000 		.word	print_string
 1498 0068 00000000 		.word	.LANCHOR5
 1499 006c 00200010 		.word	268443648
 1500 0070 B1020008 		.word	134218417
 1501 0074 00000000 		.word	.LC1
 1502 0078 05040008 		.word	134218757
 1503 007c 31020008 		.word	134218289
 1504              		.cfi_endproc
 1505              	.LFE20:
 1507              		.section	.text.do_now,"ax",%progbits
 1508              		.align	1
 1509              		.p2align 2,,3
 1510              		.global	do_now
 1511              		.syntax unified
 1512              		.thumb
 1513              		.thumb_func
 1514              		.fpu fpv4-sp-d16
 1516              	do_now:
 1517              	.LVL124:
ARM GAS  /tmp/ccG96vrG.s 			page 42


 1518              	.LFB21:
 298:src/console.c **** 
 299:src/console.c **** void do_now (int key, int shift) {
 1519              		.loc 2 299 34 is_stmt 1 view -0
 1520              		.cfi_startproc
 1521              		@ args = 0, pretend = 0, frame = 8
 1522              		@ frame_needed = 0, uses_anonymous_args = 0
 1523              		@ link register save eliminated.
 300:src/console.c ****   struct _ndmap temp;
 1524              		.loc 2 300 3 view .LVU370
 301:src/console.c ****   temp.key_34s = key;
 1525              		.loc 2 301 3 view .LVU371
 299:src/console.c ****   struct _ndmap temp;
 1526              		.loc 2 299 34 is_stmt 0 view .LVU372
 1527 0000 82B0     		sub	sp, sp, #8
 1528              		.cfi_def_cfa_offset 8
 302:src/console.c ****   temp.shift = shift;
 303:src/console.c ****   process_keycode_with_shift (temp);
 1529              		.loc 2 303 3 view .LVU373
 1530 0002 02AB     		add	r3, sp, #8
 301:src/console.c ****   temp.shift = shift;
 1531              		.loc 2 301 16 view .LVU374
 1532 0004 8DF80000 		strb	r0, [sp]
 302:src/console.c ****   temp.shift = shift;
 1533              		.loc 2 302 3 is_stmt 1 view .LVU375
 302:src/console.c ****   temp.shift = shift;
 1534              		.loc 2 302 14 is_stmt 0 view .LVU376
 1535 0008 0191     		str	r1, [sp, #4]
 1536              		.loc 2 303 3 is_stmt 1 view .LVU377
 1537 000a 13E90300 		ldmdb	r3, {r0, r1}
 1538              	.LVL125:
 304:src/console.c **** }
 1539              		.loc 2 304 1 is_stmt 0 view .LVU378
 1540 000e 02B0     		add	sp, sp, #8
 1541              		.cfi_def_cfa_offset 0
 1542              		@ sp needed
 303:src/console.c **** }
 1543              		.loc 2 303 3 view .LVU379
 1544 0010 FFF7FEBF 		b	process_keycode_with_shift
 1545              	.LVL126:
 303:src/console.c **** }
 1546              		.loc 2 303 3 view .LVU380
 1547              		.cfi_endproc
 1548              	.LFE21:
 1550              		.section	.text.do_multi,"ax",%progbits
 1551              		.align	1
 1552              		.p2align 2,,3
 1553              		.global	do_multi
 1554              		.syntax unified
 1555              		.thumb
 1556              		.thumb_func
 1557              		.fpu fpv4-sp-d16
 1559              	do_multi:
 1560              	.LVL127:
 1561              	.LFB22:
 305:src/console.c **** 
 306:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
ARM GAS  /tmp/ccG96vrG.s 			page 43


 1562              		.loc 2 306 42 is_stmt 1 view -0
 1563              		.cfi_startproc
 1564              		@ args = 0, pretend = 0, frame = 16
 1565              		@ frame_needed = 0, uses_anonymous_args = 0
 1566              		.loc 2 306 42 is_stmt 0 view .LVU382
 1567 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1568              		.cfi_def_cfa_offset 24
 1569              		.cfi_offset 4, -24
 1570              		.cfi_offset 5, -20
 1571              		.cfi_offset 6, -16
 1572              		.cfi_offset 7, -12
 1573              		.cfi_offset 8, -8
 1574              		.cfi_offset 14, -4
 1575 0004 84B0     		sub	sp, sp, #16
 1576              		.cfi_def_cfa_offset 40
 1577              	.LVL128:
 307:src/console.c ****   switch(r.shift) {
 1578              		.loc 2 307 3 is_stmt 1 view .LVU383
 306:src/console.c ****   switch(r.shift) {
 1579              		.loc 2 306 42 is_stmt 0 view .LVU384
 1580 0006 6C46     		mov	r4, sp
 1581 0008 531E     		subs	r3, r2, #1
 1582 000a 84E80600 		stm	r4, {r1, r2}
 1583              	.LVL129:
 306:src/console.c ****   switch(r.shift) {
 1584              		.loc 2 306 42 view .LVU385
 1585 000e 0546     		mov	r5, r0
 1586 0010 092B     		cmp	r3, #9
 1587 0012 7CD8     		bhi	.L125
 1588 0014 DFE803F0 		tbb	[pc, r3]
 1589              	.L127:
 1590 0018 18       		.byte	(.L135-.L127)/2
 1591 0019 36       		.byte	(.L134-.L127)/2
 1592 001a 40       		.byte	(.L133-.L127)/2
 1593 001b 4A       		.byte	(.L132-.L127)/2
 1594 001c 54       		.byte	(.L131-.L127)/2
 1595 001d 5E       		.byte	(.L130-.L127)/2
 1596 001e 68       		.byte	(.L129-.L127)/2
 1597 001f 72       		.byte	(.L128-.L127)/2
 1598 0020 7B       		.byte	(.L125-.L127)/2
 1599 0021 05       		.byte	(.L126-.L127)/2
 1600              		.p2align 1
 1601              	.L126:
 308:src/console.c ****   case LASTX: // Last x via RCL L
 309:src/console.c ****     do_now (K11, 0); // RCL
 310:src/console.c ****     do_now (K_RELEASE,0); // release
 311:src/console.c ****     do_now (K15,0); // TAN key
 312:src/console.c ****     r.key_34s = K_RELEASE;
 313:src/console.c ****     r.shift = 0; // set up for release;
 314:src/console.c ****     break;
 315:src/console.c ****   case ONSTO: // flash_backup()
 316:src/console.c ****     flash_backup(OP_SAVE);
 317:src/console.c ****     r = no_key;
 318:src/console.c ****     break;
 319:src/console.c ****   case ONRCL: // flash_restore()
 320:src/console.c ****     flash_restore(OP_LOAD);
 321:src/console.c ****     r = no_key;
ARM GAS  /tmp/ccG96vrG.s 			page 44


 322:src/console.c ****     break;
 323:src/console.c ****   case WRLIB: // save library file
 324:src/console.c ****     save_lib_file(1);
 325:src/console.c ****     r = no_key;
 326:src/console.c ****     break;
 327:src/console.c ****   case LLIB: // load library file
 328:src/console.c ****     load_lib_file(1);
 329:src/console.c ****     r = no_key;
 330:src/console.c ****     break;
 331:src/console.c ****   case WRTST: // save state file
 332:src/console.c ****     save_ram_file(1);
 333:src/console.c ****     r = no_key;
 334:src/console.c ****     break;
 335:src/console.c ****   case LDST:
 336:src/console.c ****     load_ram_file(1);
 337:src/console.c ****     r = no_key;
 338:src/console.c ****     break;
 339:src/console.c ****   case LDPRG:
 340:src/console.c ****     load_prog_file();
 341:src/console.c ****     r = no_key;
 342:src/console.c ****     break;
 343:src/console.c ****   case SVPRG:
 344:src/console.c ****     save_prog_file();
 1602              		.loc 2 344 5 is_stmt 1 view .LVU386
 1603 0022 FFF7FEFF 		bl	save_prog_file
 1604              	.LVL130:
 345:src/console.c ****     r = no_key;
 1605              		.loc 2 345 5 view .LVU387
 1606              		.loc 2 345 7 is_stmt 0 view .LVU388
 1607 0026 3D4B     		ldr	r3, .L138
 1608 0028 93E80300 		ldm	r3, {r0, r1}
 1609 002c 84E80300 		stm	r4, {r0, r1}
 1610 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1611              	.LVL131:
 346:src/console.c ****     break;
 1612              		.loc 2 346 5 is_stmt 1 view .LVU389
 1613              	.L136:
 347:src/console.c ****   default:
 348:src/console.c ****     r = no_key;
 349:src/console.c ****   }
 350:src/console.c ****   return r;
 1614              		.loc 2 350 3 view .LVU390
 1615              		.loc 2 350 10 is_stmt 0 view .LVU391
 1616 0032 8DF80030 		strb	r3, [sp]
 1617 0036 0191     		str	r1, [sp, #4]
 1618 0038 94E80300 		ldm	r4, {r0, r1}
 1619              	.LVL132:
 1620              		.loc 2 350 10 view .LVU392
 1621 003c 85E80300 		stm	r5, {r0, r1}
 351:src/console.c **** }
 1622              		.loc 2 351 1 view .LVU393
 1623 0040 2846     		mov	r0, r5
 1624 0042 04B0     		add	sp, sp, #16
 1625              		.cfi_remember_state
 1626              		.cfi_def_cfa_offset 24
 1627              		@ sp needed
 1628 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /tmp/ccG96vrG.s 			page 45


 1629              	.LVL133:
 1630              	.L135:
 1631              		.cfi_restore_state
 309:src/console.c ****     do_now (K_RELEASE,0); // release
 1632              		.loc 2 309 5 is_stmt 1 view .LVU394
 1633              	.LBB75:
 1634              	.LBI75:
 299:src/console.c ****   struct _ndmap temp;
 1635              		.loc 2 299 6 view .LVU395
 1636              	.LBB76:
 300:src/console.c ****   temp.key_34s = key;
 1637              		.loc 2 300 3 view .LVU396
 301:src/console.c ****   temp.shift = shift;
 1638              		.loc 2 301 3 view .LVU397
 301:src/console.c ****   temp.shift = shift;
 1639              		.loc 2 301 16 is_stmt 0 view .LVU398
 1640 0048 0723     		movs	r3, #7
 302:src/console.c ****   process_keycode_with_shift (temp);
 1641              		.loc 2 302 14 view .LVU399
 1642 004a 0026     		movs	r6, #0
 301:src/console.c ****   temp.shift = shift;
 1643              		.loc 2 301 16 view .LVU400
 1644 004c 8DF80830 		strb	r3, [sp, #8]
 302:src/console.c ****   process_keycode_with_shift (temp);
 1645              		.loc 2 302 3 is_stmt 1 view .LVU401
 303:src/console.c **** }
 1646              		.loc 2 303 3 is_stmt 0 view .LVU402
 1647 0050 0DF10808 		add	r8, sp, #8
 302:src/console.c ****   process_keycode_with_shift (temp);
 1648              		.loc 2 302 14 view .LVU403
 1649 0054 0396     		str	r6, [sp, #12]
 303:src/console.c **** }
 1650              		.loc 2 303 3 is_stmt 1 view .LVU404
 1651 0056 98E80300 		ldm	r8, {r0, r1}
 1652              	.LVL134:
 303:src/console.c **** }
 1653              		.loc 2 303 3 is_stmt 0 view .LVU405
 1654              	.LBE76:
 1655              	.LBE75:
 1656              	.LBB78:
 1657              	.LBB79:
 301:src/console.c ****   temp.shift = shift;
 1658              		.loc 2 301 16 view .LVU406
 1659 005a 6327     		movs	r7, #99
 1660              	.LBE79:
 1661              	.LBE78:
 1662              	.LBB81:
 1663              	.LBB77:
 303:src/console.c **** }
 1664              		.loc 2 303 3 view .LVU407
 1665 005c FFF7FEFF 		bl	process_keycode_with_shift
 1666              	.LVL135:
 303:src/console.c **** }
 1667              		.loc 2 303 3 view .LVU408
 1668              	.LBE77:
 1669              	.LBE81:
 310:src/console.c ****     do_now (K15,0); // TAN key
ARM GAS  /tmp/ccG96vrG.s 			page 46


 1670              		.loc 2 310 5 is_stmt 1 view .LVU409
 1671              	.LBB82:
 1672              	.LBI78:
 299:src/console.c ****   struct _ndmap temp;
 1673              		.loc 2 299 6 view .LVU410
 1674              	.LBB80:
 300:src/console.c ****   temp.key_34s = key;
 1675              		.loc 2 300 3 view .LVU411
 301:src/console.c ****   temp.shift = shift;
 1676              		.loc 2 301 3 view .LVU412
 302:src/console.c ****   process_keycode_with_shift (temp);
 1677              		.loc 2 302 14 is_stmt 0 view .LVU413
 1678 0060 0396     		str	r6, [sp, #12]
 301:src/console.c ****   temp.shift = shift;
 1679              		.loc 2 301 16 view .LVU414
 1680 0062 8DF80870 		strb	r7, [sp, #8]
 302:src/console.c ****   process_keycode_with_shift (temp);
 1681              		.loc 2 302 3 is_stmt 1 view .LVU415
 303:src/console.c **** }
 1682              		.loc 2 303 3 view .LVU416
 1683 0066 98E80300 		ldm	r8, {r0, r1}
 1684 006a FFF7FEFF 		bl	process_keycode_with_shift
 1685              	.LVL136:
 303:src/console.c **** }
 1686              		.loc 2 303 3 is_stmt 0 view .LVU417
 1687              	.LBE80:
 1688              	.LBE82:
 311:src/console.c ****     r.key_34s = K_RELEASE;
 1689              		.loc 2 311 5 is_stmt 1 view .LVU418
 1690              	.LBB83:
 1691              	.LBI83:
 299:src/console.c ****   struct _ndmap temp;
 1692              		.loc 2 299 6 view .LVU419
 1693              	.LBB84:
 300:src/console.c ****   temp.key_34s = key;
 1694              		.loc 2 300 3 view .LVU420
 301:src/console.c ****   temp.shift = shift;
 1695              		.loc 2 301 3 view .LVU421
 301:src/console.c ****   temp.shift = shift;
 1696              		.loc 2 301 16 is_stmt 0 view .LVU422
 1697 006e 0B23     		movs	r3, #11
 1698 0070 8DF80830 		strb	r3, [sp, #8]
 302:src/console.c ****   process_keycode_with_shift (temp);
 1699              		.loc 2 302 3 is_stmt 1 view .LVU423
 303:src/console.c **** }
 1700              		.loc 2 303 3 view .LVU424
 302:src/console.c ****   process_keycode_with_shift (temp);
 1701              		.loc 2 302 14 is_stmt 0 view .LVU425
 1702 0074 0396     		str	r6, [sp, #12]
 303:src/console.c **** }
 1703              		.loc 2 303 3 view .LVU426
 1704 0076 98E80300 		ldm	r8, {r0, r1}
 1705 007a FFF7FEFF 		bl	process_keycode_with_shift
 1706              	.LVL137:
 303:src/console.c **** }
 1707              		.loc 2 303 3 view .LVU427
 1708              	.LBE84:
ARM GAS  /tmp/ccG96vrG.s 			page 47


 1709              	.LBE83:
 312:src/console.c ****     r.shift = 0; // set up for release;
 1710              		.loc 2 312 5 is_stmt 1 view .LVU428
 313:src/console.c ****     break;
 1711              		.loc 2 313 5 view .LVU429
 314:src/console.c ****   case ONSTO: // flash_backup()
 1712              		.loc 2 314 5 view .LVU430
 313:src/console.c ****     break;
 1713              		.loc 2 313 13 is_stmt 0 view .LVU431
 1714 007e 3146     		mov	r1, r6
 312:src/console.c ****     r.shift = 0; // set up for release;
 1715              		.loc 2 312 15 view .LVU432
 1716 0080 3B46     		mov	r3, r7
 314:src/console.c ****   case ONSTO: // flash_backup()
 1717              		.loc 2 314 5 view .LVU433
 1718 0082 D6E7     		b	.L136
 1719              	.LVL138:
 1720              	.L134:
 316:src/console.c ****     r = no_key;
 1721              		.loc 2 316 5 is_stmt 1 view .LVU434
 1722 0084 AD20     		movs	r0, #173
 1723              	.LVL139:
 316:src/console.c ****     r = no_key;
 1724              		.loc 2 316 5 is_stmt 0 view .LVU435
 1725 0086 FFF7FEFF 		bl	flash_backup
 1726              	.LVL140:
 317:src/console.c ****     break;
 1727              		.loc 2 317 5 is_stmt 1 view .LVU436
 317:src/console.c ****     break;
 1728              		.loc 2 317 7 is_stmt 0 view .LVU437
 1729 008a 244B     		ldr	r3, .L138
 1730 008c 93E80300 		ldm	r3, {r0, r1}
 1731 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1732              	.LVL141:
 318:src/console.c ****   case ONRCL: // flash_restore()
 1733              		.loc 2 318 5 is_stmt 1 view .LVU438
 317:src/console.c ****     break;
 1734              		.loc 2 317 7 is_stmt 0 view .LVU439
 1735 0092 84E80300 		stm	r4, {r0, r1}
 318:src/console.c ****   case ONRCL: // flash_restore()
 1736              		.loc 2 318 5 view .LVU440
 1737 0096 CCE7     		b	.L136
 1738              	.LVL142:
 1739              	.L133:
 320:src/console.c ****     r = no_key;
 1740              		.loc 2 320 5 is_stmt 1 view .LVU441
 1741 0098 AE20     		movs	r0, #174
 1742              	.LVL143:
 320:src/console.c ****     r = no_key;
 1743              		.loc 2 320 5 is_stmt 0 view .LVU442
 1744 009a FFF7FEFF 		bl	flash_restore
 1745              	.LVL144:
 321:src/console.c ****     break;
 1746              		.loc 2 321 5 is_stmt 1 view .LVU443
 321:src/console.c ****     break;
 1747              		.loc 2 321 7 is_stmt 0 view .LVU444
 1748 009e 1F4B     		ldr	r3, .L138
ARM GAS  /tmp/ccG96vrG.s 			page 48


 1749 00a0 93E80300 		ldm	r3, {r0, r1}
 1750 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1751              	.LVL145:
 322:src/console.c ****   case WRLIB: // save library file
 1752              		.loc 2 322 5 is_stmt 1 view .LVU445
 321:src/console.c ****     break;
 1753              		.loc 2 321 7 is_stmt 0 view .LVU446
 1754 00a6 84E80300 		stm	r4, {r0, r1}
 322:src/console.c ****   case WRLIB: // save library file
 1755              		.loc 2 322 5 view .LVU447
 1756 00aa C2E7     		b	.L136
 1757              	.LVL146:
 1758              	.L132:
 324:src/console.c ****     r = no_key;
 1759              		.loc 2 324 5 is_stmt 1 view .LVU448
 1760 00ac 0120     		movs	r0, #1
 1761              	.LVL147:
 324:src/console.c ****     r = no_key;
 1762              		.loc 2 324 5 is_stmt 0 view .LVU449
 1763 00ae FFF7FEFF 		bl	save_lib_file
 1764              	.LVL148:
 325:src/console.c ****     break;
 1765              		.loc 2 325 5 is_stmt 1 view .LVU450
 325:src/console.c ****     break;
 1766              		.loc 2 325 7 is_stmt 0 view .LVU451
 1767 00b2 1A4B     		ldr	r3, .L138
 1768 00b4 93E80300 		ldm	r3, {r0, r1}
 1769 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1770              	.LVL149:
 326:src/console.c ****   case LLIB: // load library file
 1771              		.loc 2 326 5 is_stmt 1 view .LVU452
 325:src/console.c ****     break;
 1772              		.loc 2 325 7 is_stmt 0 view .LVU453
 1773 00ba 84E80300 		stm	r4, {r0, r1}
 326:src/console.c ****   case LLIB: // load library file
 1774              		.loc 2 326 5 view .LVU454
 1775 00be B8E7     		b	.L136
 1776              	.LVL150:
 1777              	.L131:
 328:src/console.c ****     r = no_key;
 1778              		.loc 2 328 5 is_stmt 1 view .LVU455
 1779 00c0 0120     		movs	r0, #1
 1780              	.LVL151:
 328:src/console.c ****     r = no_key;
 1781              		.loc 2 328 5 is_stmt 0 view .LVU456
 1782 00c2 FFF7FEFF 		bl	load_lib_file
 1783              	.LVL152:
 329:src/console.c ****     break;
 1784              		.loc 2 329 5 is_stmt 1 view .LVU457
 329:src/console.c ****     break;
 1785              		.loc 2 329 7 is_stmt 0 view .LVU458
 1786 00c6 154B     		ldr	r3, .L138
 1787 00c8 93E80300 		ldm	r3, {r0, r1}
 1788 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1789              	.LVL153:
 330:src/console.c ****   case WRTST: // save state file
 1790              		.loc 2 330 5 is_stmt 1 view .LVU459
ARM GAS  /tmp/ccG96vrG.s 			page 49


 329:src/console.c ****     break;
 1791              		.loc 2 329 7 is_stmt 0 view .LVU460
 1792 00ce 84E80300 		stm	r4, {r0, r1}
 330:src/console.c ****   case WRTST: // save state file
 1793              		.loc 2 330 5 view .LVU461
 1794 00d2 AEE7     		b	.L136
 1795              	.LVL154:
 1796              	.L130:
 332:src/console.c ****     r = no_key;
 1797              		.loc 2 332 5 is_stmt 1 view .LVU462
 1798 00d4 0120     		movs	r0, #1
 1799              	.LVL155:
 332:src/console.c ****     r = no_key;
 1800              		.loc 2 332 5 is_stmt 0 view .LVU463
 1801 00d6 FFF7FEFF 		bl	save_ram_file
 1802              	.LVL156:
 333:src/console.c ****     break;
 1803              		.loc 2 333 5 is_stmt 1 view .LVU464
 333:src/console.c ****     break;
 1804              		.loc 2 333 7 is_stmt 0 view .LVU465
 1805 00da 104B     		ldr	r3, .L138
 1806 00dc 93E80300 		ldm	r3, {r0, r1}
 1807 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1808              	.LVL157:
 334:src/console.c ****   case LDST:
 1809              		.loc 2 334 5 is_stmt 1 view .LVU466
 333:src/console.c ****     break;
 1810              		.loc 2 333 7 is_stmt 0 view .LVU467
 1811 00e2 84E80300 		stm	r4, {r0, r1}
 334:src/console.c ****   case LDST:
 1812              		.loc 2 334 5 view .LVU468
 1813 00e6 A4E7     		b	.L136
 1814              	.LVL158:
 1815              	.L129:
 336:src/console.c ****     r = no_key;
 1816              		.loc 2 336 5 is_stmt 1 view .LVU469
 1817 00e8 0120     		movs	r0, #1
 1818              	.LVL159:
 336:src/console.c ****     r = no_key;
 1819              		.loc 2 336 5 is_stmt 0 view .LVU470
 1820 00ea FFF7FEFF 		bl	load_ram_file
 1821              	.LVL160:
 337:src/console.c ****     break;
 1822              		.loc 2 337 5 is_stmt 1 view .LVU471
 337:src/console.c ****     break;
 1823              		.loc 2 337 7 is_stmt 0 view .LVU472
 1824 00ee 0B4B     		ldr	r3, .L138
 1825 00f0 93E80300 		ldm	r3, {r0, r1}
 1826 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1827              	.LVL161:
 338:src/console.c ****   case LDPRG:
 1828              		.loc 2 338 5 is_stmt 1 view .LVU473
 337:src/console.c ****     break;
 1829              		.loc 2 337 7 is_stmt 0 view .LVU474
 1830 00f6 84E80300 		stm	r4, {r0, r1}
 338:src/console.c ****   case LDPRG:
 1831              		.loc 2 338 5 view .LVU475
ARM GAS  /tmp/ccG96vrG.s 			page 50


 1832 00fa 9AE7     		b	.L136
 1833              	.LVL162:
 1834              	.L128:
 340:src/console.c ****     r = no_key;
 1835              		.loc 2 340 5 is_stmt 1 view .LVU476
 1836 00fc FFF7FEFF 		bl	load_prog_file
 1837              	.LVL163:
 341:src/console.c ****     break;
 1838              		.loc 2 341 5 view .LVU477
 341:src/console.c ****     break;
 1839              		.loc 2 341 7 is_stmt 0 view .LVU478
 1840 0100 064B     		ldr	r3, .L138
 1841 0102 93E80300 		ldm	r3, {r0, r1}
 1842 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1843              	.LVL164:
 342:src/console.c ****   case SVPRG:
 1844              		.loc 2 342 5 is_stmt 1 view .LVU479
 341:src/console.c ****     break;
 1845              		.loc 2 341 7 is_stmt 0 view .LVU480
 1846 0108 84E80300 		stm	r4, {r0, r1}
 342:src/console.c ****   case SVPRG:
 1847              		.loc 2 342 5 view .LVU481
 1848 010c 91E7     		b	.L136
 1849              	.LVL165:
 1850              	.L125:
 348:src/console.c ****   }
 1851              		.loc 2 348 5 is_stmt 1 view .LVU482
 348:src/console.c ****   }
 1852              		.loc 2 348 7 is_stmt 0 view .LVU483
 1853 010e 034B     		ldr	r3, .L138
 1854 0110 93E80300 		ldm	r3, {r0, r1}
 1855              	.LVL166:
 348:src/console.c ****   }
 1856              		.loc 2 348 7 view .LVU484
 1857 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1858              	.LVL167:
 348:src/console.c ****   }
 1859              		.loc 2 348 7 view .LVU485
 1860 0116 84E80300 		stm	r4, {r0, r1}
 1861 011a 8AE7     		b	.L136
 1862              	.L139:
 1863              		.align	2
 1864              	.L138:
 1865 011c 00000000 		.word	.LANCHOR6
 1866              		.cfi_endproc
 1867              	.LFE22:
 1869              		.section	.text.program_main,"ax",%progbits
 1870              		.align	1
 1871              		.p2align 2,,3
 1872              		.global	program_main
 1873              		.syntax unified
 1874              		.thumb
 1875              		.thumb_func
 1876              		.fpu fpv4-sp-d16
 1878              	program_main:
 1879              	.LFB23:
 352:src/console.c **** 
ARM GAS  /tmp/ccG96vrG.s 			page 51


 353:src/console.c **** void program_main(){
 1880              		.loc 2 353 20 is_stmt 1 view -0
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 24
 1883              		@ frame_needed = 0, uses_anonymous_args = 0
 354:src/console.c ****   int c;
 1884              		.loc 2 354 3 view .LVU487
 355:src/console.c ****   struct _ndmap remapped;
 1885              		.loc 2 355 3 view .LVU488
 356:src/console.c **** 
 357:src/console.c ****   init_mem();
 1886              		.loc 2 357 3 view .LVU489
 353:src/console.c ****   int c;
 1887              		.loc 2 353 20 is_stmt 0 view .LVU490
 1888 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1889              		.cfi_def_cfa_offset 36
 1890              		.cfi_offset 4, -36
 1891              		.cfi_offset 5, -32
 1892              		.cfi_offset 6, -28
 1893              		.cfi_offset 7, -24
 1894              		.cfi_offset 8, -20
 1895              		.cfi_offset 9, -16
 1896              		.cfi_offset 10, -12
 1897              		.cfi_offset 11, -8
 1898              		.cfi_offset 14, -4
 1899 0004 87B0     		sub	sp, sp, #28
 1900              		.cfi_def_cfa_offset 64
 1901              		.loc 2 357 3 view .LVU491
 1902 0006 FFF7FEFF 		bl	init_mem
 1903              	.LVL168:
 358:src/console.c ****   init_RegionTab();
 1904              		.loc 2 358 3 is_stmt 1 view .LVU492
 1905 000a FFF7FEFF 		bl	init_RegionTab
 1906              	.LVL169:
 359:src/console.c ****   init_34s();
 1907              		.loc 2 359 3 view .LVU493
 1908 000e FFF7FEFF 		bl	init_34s
 1909              	.LVL170:
 360:src/console.c ****   State2.flags = 1;  
 1910              		.loc 2 360 3 view .LVU494
 1911              		.loc 2 360 16 is_stmt 0 view .LVU495
 1912 0012 B64A     		ldr	r2, .L225
 1913 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 1914 0016 43F00103 		orr	r3, r3, #1
 1915 001a 1376     		strb	r3, [r2, #24]
 361:src/console.c ****   check_create_wp34sdir();
 1916              		.loc 2 361 3 is_stmt 1 view .LVU496
 1917 001c FFF7FEFF 		bl	check_create_wp34sdir
 1918              	.LVL171:
 362:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 1919              		.loc 2 362 3 view .LVU497
 1920              		.loc 2 362 8 is_stmt 0 view .LVU498
 1921 0020 0020     		movs	r0, #0
 1922 0022 FFF7FEFF 		bl	load_ram_file
 1923              	.LVL172:
 1924              		.loc 2 362 6 view .LVU499
 1925 0026 08B9     		cbnz	r0, .L141
ARM GAS  /tmp/ccG96vrG.s 			page 52


 1926              		.loc 2 362 26 is_stmt 1 discriminator 1 view .LVU500
 1927              		.loc 2 362 34 is_stmt 0 discriminator 1 view .LVU501
 1928 0028 B14B     		ldr	r3, .L225+4
 1929 002a 1860     		str	r0, [r3]
 1930              	.L141:
 363:src/console.c ****   load_backup_file(0);
 1931              		.loc 2 363 3 is_stmt 1 view .LVU502
 1932 002c 0020     		movs	r0, #0
 364:src/console.c ****   load_lib_file(0);
 365:src/console.c ****   t20->newln = 0;
 1933              		.loc 2 365 3 is_stmt 0 view .LVU503
 1934 002e B14C     		ldr	r4, .L225+8
 1935              	.LBB99:
 1936              	.LBB100:
  22:src/menu.c    **** }
 1937              		.loc 1 22 3 view .LVU504
 1938 0030 DFF828B3 		ldr	fp, .L225+112
 1939 0034 DFF82893 		ldr	r9, .L225+116
 1940              	.LBE100:
 1941              	.LBE99:
 366:src/console.c ****   t20->lnfill = 0;
 367:src/console.c ****   t20->fixed = 1;
 368:src/console.c ****   t20->xspc = -2;
 369:src/console.c ****   t20->bgfill = 0;
 370:src/console.c ****   
 371:src/console.c ****   display();
 372:src/console.c ****   display_current_menu();
 373:src/console.c ****   lcd_refresh();
 374:src/console.c ****   JustDisplayed = 0;
 375:src/console.c ****   /*
 376:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 377:src/console.c ****     Sleeps peacefully while waiting for a key.
 378:src/console.c ****     Handles (in principle!) turning off and on.
 379:src/console.c ****     =================
 380:src/console.c ****     Main event loop
 381:src/console.c ****     =================
 382:src/console.c **** 
 383:src/console.c ****     Status flags:
 384:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 385:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 386:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 387:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 388:src/console.c ****   */
 389:src/console.c ****   for(;;) {
 390:src/console.c **** 
 391:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 392:src/console.c ****       {
 393:src/console.c **** 	CLR_ST(STAT_RUNNING);
 394:src/console.c **** 	sys_sleep();
 395:src/console.c ****       }
 396:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 1942              		.loc 2 396 35 view .LVU505
 1943 0038 AF4E     		ldr	r6, .L225+12
 397:src/console.c ****     {
 398:src/console.c ****       CLR_ST(STAT_RUNNING);
 399:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 1944              		.loc 2 399 7 view .LVU506
ARM GAS  /tmp/ccG96vrG.s 			page 53


 1945 003a DFF82883 		ldr	r8, .L225+120
 363:src/console.c ****   load_lib_file(0);
 1946              		.loc 2 363 3 view .LVU507
 1947 003e FFF7FEFF 		bl	load_backup_file
 1948              	.LVL173:
 364:src/console.c ****   t20->newln = 0;
 1949              		.loc 2 364 3 is_stmt 1 view .LVU508
 1950 0042 0020     		movs	r0, #0
 1951 0044 FFF7FEFF 		bl	load_lib_file
 1952              	.LVL174:
 365:src/console.c ****   t20->lnfill = 0;
 1953              		.loc 2 365 3 view .LVU509
 1954 0048 236B     		ldr	r3, [r4, #48]
 366:src/console.c ****   t20->fixed = 1;
 1955              		.loc 2 366 3 view .LVU510
 367:src/console.c ****   t20->xspc = -2;
 1956              		.loc 2 367 3 view .LVU511
 367:src/console.c ****   t20->xspc = -2;
 1957              		.loc 2 367 14 is_stmt 0 view .LVU512
 1958 004a 0121     		movs	r1, #1
 368:src/console.c ****   t20->bgfill = 0;
 1959              		.loc 2 368 13 view .LVU513
 1960 004c FE22     		movs	r2, #254
 369:src/console.c ****   
 1961              		.loc 2 369 15 view .LVU514
 1962 004e 0025     		movs	r5, #0
 367:src/console.c ****   t20->xspc = -2;
 1963              		.loc 2 367 14 view .LVU515
 1964 0050 1974     		strb	r1, [r3, #16]
 368:src/console.c ****   t20->bgfill = 0;
 1965              		.loc 2 368 3 is_stmt 1 view .LVU516
 368:src/console.c ****   t20->bgfill = 0;
 1966              		.loc 2 368 13 is_stmt 0 view .LVU517
 1967 0052 9A73     		strb	r2, [r3, #14]
 369:src/console.c ****   
 1968              		.loc 2 369 3 is_stmt 1 view .LVU518
 369:src/console.c ****   
 1969              		.loc 2 369 15 is_stmt 0 view .LVU519
 1970 0054 5D82     		strh	r5, [r3, #18]	@ movhi
 365:src/console.c ****   t20->lnfill = 0;
 1971              		.loc 2 365 14 view .LVU520
 1972 0056 1D75     		strb	r5, [r3, #20]
 371:src/console.c ****   display_current_menu();
 1973              		.loc 2 371 3 is_stmt 1 view .LVU521
 1974 0058 FFF7FEFF 		bl	display
 1975              	.LVL175:
 372:src/console.c ****   lcd_refresh();
 1976              		.loc 2 372 3 view .LVU522
 1977              	.LBB102:
 1978              	.LBI99:
  21:src/menu.c    ****   display_menu (current_menu);
 1979              		.loc 1 21 6 view .LVU523
 1980              	.LBB101:
  22:src/menu.c    **** }
 1981              		.loc 1 22 3 view .LVU524
 1982 005c DBF80000 		ldr	r0, [fp]
 1983 0060 FFF7FEFF 		bl	display_menu
ARM GAS  /tmp/ccG96vrG.s 			page 54


 1984              	.LVL176:
 1985              	.LBE101:
 1986              	.LBE102:
 373:src/console.c ****   JustDisplayed = 0;
 1987              		.loc 2 373 3 view .LVU525
 1988 0064 A54B     		ldr	r3, .L225+16
 1989 0066 9847     		blx	r3
 1990              	.LVL177:
 374:src/console.c ****   /*
 1991              		.loc 2 374 3 view .LVU526
 374:src/console.c ****   /*
 1992              		.loc 2 374 17 is_stmt 0 view .LVU527
 1993 0068 A54B     		ldr	r3, .L225+20
 1994 006a 1D60     		str	r5, [r3]
 1995 006c 04AD     		add	r5, sp, #16
 1996              	.L142:
 389:src/console.c **** 
 1997              		.loc 2 389 3 is_stmt 1 view .LVU528
 391:src/console.c ****       {
 1998              		.loc 2 391 5 view .LVU529
 391:src/console.c ****       {
 1999              		.loc 2 391 10 is_stmt 0 view .LVU530
 2000 006e 2368     		ldr	r3, [r4]
 391:src/console.c ****       {
 2001              		.loc 2 391 8 view .LVU531
 2002 0070 9F05     		lsls	r7, r3, #22
 2003 0072 40F18180 		bpl	.L143
 2004              	.L214:
 391:src/console.c ****       {
 2005              		.loc 2 391 30 discriminator 1 view .LVU532
 2006 0076 2368     		ldr	r3, [r4]
 391:src/console.c ****       {
 2007              		.loc 2 391 27 discriminator 1 view .LVU533
 2008 0078 5807     		lsls	r0, r3, #29
 2009 007a 7DD5     		bpl	.L143
 393:src/console.c **** 	sys_sleep();
 2010              		.loc 2 393 2 is_stmt 1 view .LVU534
 2011 007c 2368     		ldr	r3, [r4]
 394:src/console.c ****       }
 2012              		.loc 2 394 2 is_stmt 0 view .LVU535
 2013 007e A14A     		ldr	r2, .L225+24
 393:src/console.c **** 	sys_sleep();
 2014              		.loc 2 393 2 view .LVU536
 2015 0080 23F00203 		bic	r3, r3, #2
 2016 0084 2360     		str	r3, [r4]
 394:src/console.c ****       }
 2017              		.loc 2 394 2 is_stmt 1 view .LVU537
 2018 0086 9047     		blx	r2
 2019              	.LVL178:
 2020              	.L144:
 400:src/console.c ****       sys_sleep();
 401:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 402:src/console.c **** 	key_push (K_HEARTBEAT);
 403:src/console.c **** 	if (Pause > 0) Pause--;
 404:src/console.c ****       }
 405:src/console.c ****       sys_timer_disable(0); // stop timer
 406:src/console.c ****     }
ARM GAS  /tmp/ccG96vrG.s 			page 55


 407:src/console.c ****     
 408:src/console.c ****     // Wakeup in off state or going to sleep
 409:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 2021              		.loc 2 409 5 view .LVU538
 2022              		.loc 2 409 9 is_stmt 0 view .LVU539
 2023 0088 2368     		ldr	r3, [r4]
 2024              		.loc 2 409 8 view .LVU540
 2025 008a 9905     		lsls	r1, r3, #22
 2026 008c 00F19B80 		bmi	.L150
 2027              	.L215:
 2028              		.loc 2 409 29 discriminator 1 view .LVU541
 2029 0090 2368     		ldr	r3, [r4]
 2030              		.loc 2 409 26 discriminator 1 view .LVU542
 2031 0092 5A07     		lsls	r2, r3, #29
 2032 0094 00F19780 		bmi	.L150
 410:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 411:src/console.c ****         // Going to off mode
 412:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 413:src/console.c ****         draw_power_off_image(1);
 414:src/console.c **** 
 415:src/console.c ****         LCD_power_off(0);
 416:src/console.c ****         SET_ST(STAT_SUSPENDED);
 417:src/console.c ****         SET_ST(STAT_OFF);
 418:src/console.c ****       }
 419:src/console.c ****       // Already in OFF -> just continue to sleep above
 420:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 421:src/console.c ****       // thus reaching the sleep()
 422:src/console.c ****     }
 423:src/console.c **** 
 424:src/console.c ****     // Well, we are woken-up
 425:src/console.c ****     SET_ST(STAT_RUNNING);
 2033              		.loc 2 425 5 is_stmt 1 view .LVU543
 2034 0098 2368     		ldr	r3, [r4]
 2035 009a 43F00203 		orr	r3, r3, #2
 2036 009e 2360     		str	r3, [r4]
 426:src/console.c **** 
 427:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 428:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 2037              		.loc 2 428 5 view .LVU544
 2038 00a0 2368     		ldr	r3, [r4]
 2039 00a2 23F00403 		bic	r3, r3, #4
 2040 00a6 2360     		str	r3, [r4]
 429:src/console.c **** 
 430:src/console.c ****     // Get up from OFF state
 431:src/console.c ****     if ( ST(STAT_OFF) ) {
 2041              		.loc 2 431 5 view .LVU545
 2042              		.loc 2 431 10 is_stmt 0 view .LVU546
 2043 00a8 2368     		ldr	r3, [r4]
 2044              		.loc 2 431 8 view .LVU547
 2045 00aa DB06     		lsls	r3, r3, #27
 2046 00ac 0CD5     		bpl	.L155
 432:src/console.c ****       LCD_power_on();
 2047              		.loc 2 432 7 is_stmt 1 view .LVU548
 2048 00ae 964B     		ldr	r3, .L225+28
 2049 00b0 9847     		blx	r3
 2050              	.LVL179:
 433:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
ARM GAS  /tmp/ccG96vrG.s 			page 56


 2051              		.loc 2 433 7 view .LVU549
 2052 00b2 964B     		ldr	r3, .L225+32
 2053 00b4 9847     		blx	r3
 2054              	.LVL180:
 434:src/console.c **** 
 435:src/console.c ****       CLR_ST(STAT_OFF);
 2055              		.loc 2 435 7 view .LVU550
 2056 00b6 2368     		ldr	r3, [r4]
 436:src/console.c **** 
 437:src/console.c ****       if ( !lcd_get_buf_cleared() )
 2057              		.loc 2 437 13 is_stmt 0 view .LVU551
 2058 00b8 954A     		ldr	r2, .L225+36
 435:src/console.c **** 
 2059              		.loc 2 435 7 view .LVU552
 2060 00ba 23F01003 		bic	r3, r3, #16
 2061 00be 2360     		str	r3, [r4]
 2062              		.loc 2 437 7 is_stmt 1 view .LVU553
 2063              		.loc 2 437 13 is_stmt 0 view .LVU554
 2064 00c0 9047     		blx	r2
 2065              	.LVL181:
 2066              		.loc 2 437 10 view .LVU555
 2067 00c2 08B9     		cbnz	r0, .L155
 438:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 2068              		.loc 2 438 9 is_stmt 1 view .LVU556
 2069 00c4 934B     		ldr	r3, .L225+40
 2070 00c6 9847     		blx	r3
 2071              	.LVL182:
 2072              	.L155:
 439:src/console.c ****     }
 440:src/console.c **** 
 441:src/console.c ****     // Key is ready -> clear auto off timer
 442:src/console.c ****     //    if ( !key_empty() )
 443:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 444:src/console.c ****     // Fetch the key
 445:src/console.c ****     //  < 0 -> No key event
 446:src/console.c ****     //  > 0 -> Key pressed
 447:src/console.c ****     // == 0 -> Key released
 448:src/console.c ****     c = key_pop();
 2073              		.loc 2 448 5 view .LVU557
 2074              		.loc 2 448 9 is_stmt 0 view .LVU558
 2075 00c8 934B     		ldr	r3, .L225+44
 2076 00ca 9847     		blx	r3
 2077              	.LVL183:
 449:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2078              		.loc 2 449 8 view .LVU559
 2079 00cc 6228     		cmp	r0, #98
 448:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2080              		.loc 2 448 9 view .LVU560
 2081 00ce 8246     		mov	r10, r0
 2082              	.LVL184:
 2083              		.loc 2 449 5 is_stmt 1 view .LVU561
 2084              		.loc 2 449 8 is_stmt 0 view .LVU562
 2085 00d0 00F09981 		beq	.L157
 2086              		.loc 2 449 29 discriminator 1 view .LVU563
 2087 00d4 0028     		cmp	r0, #0
 2088 00d6 40F39381 		ble	.L158
 450:src/console.c ****       reset_auto_off();
ARM GAS  /tmp/ccG96vrG.s 			page 57


 2089              		.loc 2 450 7 is_stmt 1 view .LVU564
 2090 00da 904B     		ldr	r3, .L225+48
 2091 00dc 9847     		blx	r3
 2092              	.LVL185:
 451:src/console.c ****       start_key_timer();
 2093              		.loc 2 451 7 view .LVU565
 2094              	.LBB103:
 2095              	.LBI103:
 241:src/console.c ****     start_ticks = get_rtc_ticks();
 2096              		.loc 2 241 6 view .LVU566
 2097              	.LBB104:
 242:src/console.c **** }
 2098              		.loc 2 242 5 view .LVU567
 242:src/console.c **** }
 2099              		.loc 2 242 19 is_stmt 0 view .LVU568
 2100 00de 904B     		ldr	r3, .L225+52
 2101 00e0 9847     		blx	r3
 2102              	.LVL186:
 242:src/console.c **** }
 2103              		.loc 2 242 17 view .LVU569
 2104 00e2 904B     		ldr	r3, .L225+56
 2105              	.LBE104:
 2106              	.LBE103:
 2107              	.LBB106:
 2108              	.LBB107:
  68:src/console.c **** 
 2109              		.loc 2 68 6 view .LVU570
 2110 00e4 BAF1630F 		cmp	r10, #99
 2111              	.LBE107:
 2112              	.LBE106:
 2113              	.LBB119:
 2114              	.LBB105:
 242:src/console.c **** }
 2115              		.loc 2 242 17 view .LVU571
 2116 00e8 1860     		str	r0, [r3]
 2117              	.LBE105:
 2118              	.LBE119:
 452:src/console.c ****     }
 453:src/console.c ****     if (c >= 0) {
 2119              		.loc 2 453 5 is_stmt 1 view .LVU572
 454:src/console.c ****       remapped = remap(c);
 2120              		.loc 2 454 7 view .LVU573
 2121              	.LVL187:
 2122              	.LBB120:
 2123              	.LBI106:
  60:src/console.c **** 
 2124              		.loc 2 60 22 view .LVU574
 2125              	.LBB108:
  62:src/console.c **** 
 2126              		.loc 2 62 3 view .LVU575
 2127              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 2128              		.loc 3 1 1 view .LVU576
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
ARM GAS  /tmp/ccG96vrG.s 			page 58


   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 2129              		.loc 3 59 3 view .LVU577
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
ARM GAS  /tmp/ccG96vrG.s 			page 59


  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU, 14}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_NOP, 0}, // no function
  96:src/keytran.c ****     {K_NOP, 0}, // no function
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 2130              		.loc 3 117 3 view .LVU578
ARM GAS  /tmp/ccG96vrG.s 			page 60


 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 0}, // Exit
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
ARM GAS  /tmp/ccG96vrG.s 			page 61


 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 2131              		.loc 3 175 1 view .LVU579
  66:src/console.c **** 
 2132              		.loc 2 66 3 view .LVU580
  68:src/console.c **** 
 2133              		.loc 2 68 3 view .LVU581
  68:src/console.c **** 
 2134              		.loc 2 68 6 is_stmt 0 view .LVU582
 2135 00ea 00F0CE81 		beq	.L209
  70:src/console.c ****     // Start click 
 2136              		.loc 2 70 3 is_stmt 1 view .LVU583
  70:src/console.c ****     // Start click 
 2137              		.loc 2 70 6 is_stmt 0 view .LVU584
 2138 00ee BAF12C0F 		cmp	r10, #44
 2139 00f2 00F09081 		beq	.L210
 2140              	.LVL188:
 2141              	.L161:
  84:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2142              		.loc 2 84 3 is_stmt 1 view .LVU585
  84:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2143              		.loc 2 84 8 is_stmt 0 view .LVU586
 2144 00f6 FFF7FEFF 		bl	get_alpha_state
 2145              	.LVL189:
  84:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2146              		.loc 2 84 6 view .LVU587
 2147 00fa 0028     		cmp	r0, #0
 2148 00fc 7AD0     		beq	.L163
  85:src/console.c ****       switch (cur_shift()) { 
 2149              		.loc 2 85 5 is_stmt 1 view .LVU588
  85:src/console.c ****       switch (cur_shift()) { 
 2150              		.loc 2 85 8 is_stmt 0 view .LVU589
 2151 00fe BAF11C0F 		cmp	r10, #28
 2152 0102 00F0D781 		beq	.L211
 102:src/console.c ****   }
 2153              		.loc 2 102 5 is_stmt 1 view .LVU590
 102:src/console.c ****   }
 2154              		.loc 2 102 26 is_stmt 0 view .LVU591
 2155 0106 884A     		ldr	r2, .L225+60
 2156              	.L208:
 131:src/console.c ****     break;
 2157              		.loc 2 131 26 view .LVU592
 2158 0108 02EBCA03 		add	r3, r2, r10, lsl #3
 2159 010c 93E80300 		ldm	r3, {r0, r1}
 2160 0110 12F83A30 		ldrb	r3, [r2, r10, lsl #3]	@ zero_extendqisi2
 2161              	.LVL190:
 131:src/console.c ****     break;
 2162              		.loc 2 131 26 view .LVU593
 2163 0114 85E80300 		stm	r5, {r0, r1}
 2164 0118 8A46     		mov	r10, r1
 2165              	.LVL191:
 2166              	.L160:
 131:src/console.c ****     break;
 2167              		.loc 2 131 26 view .LVU594
 2168              	.LBE108:
 2169              	.LBE120:
 455:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2170              		.loc 2 455 7 is_stmt 1 view .LVU595
ARM GAS  /tmp/ccG96vrG.s 			page 62


 2171              		.loc 2 455 10 is_stmt 0 view .LVU596
 2172 011a 2F2B     		cmp	r3, #47
 2173 011c 00F09480 		beq	.L212
 2174              	.LVL192:
 2175              	.L185:
 456:src/console.c **** 	set_menu ( remapped.shift );
 457:src/console.c **** 	display_current_menu ();
 458:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 459:src/console.c **** 	case SHIFT_F:
 460:src/console.c **** 	  remapped = f_shift; // F -> N
 461:src/console.c **** 	  break;
 462:src/console.c **** 	case SHIFT_G:
 463:src/console.c **** 	  remapped = g_shift; // G -> N
 464:src/console.c **** 	  break;
 465:src/console.c **** 	case SHIFT_H:
 466:src/console.c **** 	  remapped = h_shift; // H -> N
 467:src/console.c **** 	default:
 468:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 469:src/console.c **** 	}
 470:src/console.c ****       }
 471:src/console.c ****       if (remapped.key_34s == K_SYS) {
 2176              		.loc 2 471 7 is_stmt 1 view .LVU597
 2177              		.loc 2 471 10 is_stmt 0 view .LVU598
 2178 0120 302B     		cmp	r3, #48
 2179 0122 1AD1     		bne	.L191
 472:src/console.c **** 	SET_ST(STAT_MENU);
 2180              		.loc 2 472 2 is_stmt 1 view .LVU599
 2181 0124 2368     		ldr	r3, [r4]
 2182              	.LVL193:
 473:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 2183              		.loc 2 473 2 is_stmt 0 view .LVU600
 2184 0126 DFF840A2 		ldr	r10, .L225+124
 2185              	.LVL194:
 2186              		.loc 2 473 2 view .LVU601
 2187 012a 8048     		ldr	r0, .L225+64
 2188 012c 0022     		movs	r2, #0
 472:src/console.c **** 	SET_ST(STAT_MENU);
 2189              		.loc 2 472 2 view .LVU602
 2190 012e 43F04003 		orr	r3, r3, #64
 2191              		.loc 2 473 2 view .LVU603
 2192 0132 1146     		mov	r1, r2
 472:src/console.c **** 	SET_ST(STAT_MENU);
 2193              		.loc 2 472 2 view .LVU604
 2194 0134 2360     		str	r3, [r4]
 2195              		.loc 2 473 2 is_stmt 1 view .LVU605
 2196 0136 D047     		blx	r10
 2197              	.LVL195:
 474:src/console.c **** 	CLR_ST(STAT_MENU);
 2198              		.loc 2 474 2 view .LVU606
 2199 0138 2368     		ldr	r3, [r4]
 2200 013a 23F04003 		bic	r3, r3, #64
 2201 013e 2360     		str	r3, [r4]
 475:src/console.c **** 	remapped =  no_key;
 2202              		.loc 2 475 2 view .LVU607
 2203              		.loc 2 475 11 is_stmt 0 view .LVU608
 2204 0140 7B4B     		ldr	r3, .L225+68
 2205 0142 93E80300 		ldm	r3, {r0, r1}
ARM GAS  /tmp/ccG96vrG.s 			page 63


 2206 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2207 0148 0193     		str	r3, [sp, #4]
 2208              	.LVL196:
 2209              		.loc 2 475 11 view .LVU609
 2210 014a 85E80300 		stm	r5, {r0, r1}
 2211              	.LBB121:
 2212              	.LBB122:
  22:src/menu.c    **** }
 2213              		.loc 1 22 3 view .LVU610
 2214 014e DBF80000 		ldr	r0, [fp]
 2215              	.LBE122:
 2216              	.LBE121:
 2217              		.loc 2 475 11 view .LVU611
 2218 0152 8A46     		mov	r10, r1
 2219              	.LVL197:
 476:src/console.c **** 	display_current_menu();
 2220              		.loc 2 476 2 is_stmt 1 view .LVU612
 2221              	.LBB124:
 2222              	.LBI121:
  21:src/menu.c    ****   display_menu (current_menu);
 2223              		.loc 1 21 6 view .LVU613
 2224              	.LBB123:
  22:src/menu.c    **** }
 2225              		.loc 1 22 3 view .LVU614
 2226 0154 FFF7FEFF 		bl	display_menu
 2227              	.LVL198:
  22:src/menu.c    **** }
 2228              		.loc 1 22 3 is_stmt 0 view .LVU615
 2229 0158 019B     		ldr	r3, [sp, #4]
 2230              	.LVL199:
 2231              	.L191:
  22:src/menu.c    **** }
 2232              		.loc 1 22 3 view .LVU616
 2233              	.LBE123:
 2234              	.LBE124:
 477:src/console.c ****       }
 478:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 2235              		.loc 2 478 7 is_stmt 1 view .LVU617
 2236              		.loc 2 478 10 is_stmt 0 view .LVU618
 2237 015a 312B     		cmp	r3, #49
 2238 015c 00F07C81 		beq	.L213
 2239              	.LVL200:
 2240              	.L165:
 479:src/console.c **** 	remapped = do_multi (remapped);
 480:src/console.c **** 	display_current_menu();
 481:src/console.c ****       }
 482:src/console.c ****       process_keycode_with_shift(remapped);
 2241              		.loc 2 482 7 is_stmt 1 view .LVU619
 2242              		.loc 2 482 7 is_stmt 0 view .LVU620
 2243 0160 8DF81030 		strb	r3, [sp, #16]
 2244 0164 CDF814A0 		str	r10, [sp, #20]
 2245 0168 95E80300 		ldm	r5, {r0, r1}
 2246 016c FFF7FEFF 		bl	process_keycode_with_shift
 2247              	.LVL201:
 389:src/console.c **** 
 2248              		.loc 2 389 3 is_stmt 1 view .LVU621
 391:src/console.c ****       {
ARM GAS  /tmp/ccG96vrG.s 			page 64


 2249              		.loc 2 391 5 view .LVU622
 391:src/console.c ****       {
 2250              		.loc 2 391 10 is_stmt 0 view .LVU623
 2251 0170 2368     		ldr	r3, [r4]
 391:src/console.c ****       {
 2252              		.loc 2 391 8 view .LVU624
 2253 0172 9F05     		lsls	r7, r3, #22
 2254 0174 3FF57FAF 		bmi	.L214
 2255              	.LVL202:
 2256              	.L143:
 396:src/console.c ****     {
 2257              		.loc 2 396 10 is_stmt 1 view .LVU625
 396:src/console.c ****     {
 2258              		.loc 2 396 15 is_stmt 0 view .LVU626
 2259 0178 2068     		ldr	r0, [r4]
 396:src/console.c ****     {
 2260              		.loc 2 396 13 view .LVU627
 2261 017a 10F4007A 		ands	r10, r0, #512
 2262 017e 83D1     		bne	.L144
 396:src/console.c ****     {
 2263              		.loc 2 396 35 discriminator 1 view .LVU628
 2264 0180 B047     		blx	r6
 2265              	.LVL203:
 396:src/console.c ****     {
 2266              		.loc 2 396 32 discriminator 1 view .LVU629
 2267 0182 0028     		cmp	r0, #0
 2268 0184 80D0     		beq	.L144
 398:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2269              		.loc 2 398 7 is_stmt 1 view .LVU630
 2270 0186 2368     		ldr	r3, [r4]
 2271 0188 23F00203 		bic	r3, r3, #2
 399:src/console.c ****       sys_sleep();
 2272              		.loc 2 399 7 is_stmt 0 view .LVU631
 2273 018c 5046     		mov	r0, r10
 2274 018e 6421     		movs	r1, #100
 398:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2275              		.loc 2 398 7 view .LVU632
 2276 0190 2360     		str	r3, [r4]
 399:src/console.c ****       sys_sleep();
 2277              		.loc 2 399 7 is_stmt 1 view .LVU633
 2278 0192 C047     		blx	r8
 2279              	.LVL204:
 400:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 2280              		.loc 2 400 7 view .LVU634
 2281 0194 5B4B     		ldr	r3, .L225+24
 2282 0196 9847     		blx	r3
 2283              	.LVL205:
 401:src/console.c **** 	key_push (K_HEARTBEAT);
 2284              		.loc 2 401 7 view .LVU635
 401:src/console.c **** 	key_push (K_HEARTBEAT);
 2285              		.loc 2 401 11 is_stmt 0 view .LVU636
 2286 0198 664B     		ldr	r3, .L225+72
 2287 019a 5046     		mov	r0, r10
 2288 019c 9847     		blx	r3
 2289              	.LVL206:
 401:src/console.c **** 	key_push (K_HEARTBEAT);
 2290              		.loc 2 401 10 view .LVU637
ARM GAS  /tmp/ccG96vrG.s 			page 65


 2291 019e 58B1     		cbz	r0, .L148
 402:src/console.c **** 	if (Pause > 0) Pause--;
 2292              		.loc 2 402 2 is_stmt 1 view .LVU638
 2293 01a0 654B     		ldr	r3, .L225+76
 2294 01a2 6220     		movs	r0, #98
 2295 01a4 9847     		blx	r3
 2296              	.LVL207:
 403:src/console.c ****       }
 2297              		.loc 2 403 2 view .LVU639
 403:src/console.c ****       }
 2298              		.loc 2 403 12 is_stmt 0 view .LVU640
 2299 01a6 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 403:src/console.c ****       }
 2300              		.loc 2 403 5 view .LVU641
 2301 01aa 2BB1     		cbz	r3, .L148
 403:src/console.c ****       }
 2302              		.loc 2 403 17 is_stmt 1 discriminator 1 view .LVU642
 403:src/console.c ****       }
 2303              		.loc 2 403 22 is_stmt 0 discriminator 1 view .LVU643
 2304 01ac 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 2305 01b0 013B     		subs	r3, r3, #1
 2306 01b2 DBB2     		uxtb	r3, r3
 2307 01b4 89F80030 		strb	r3, [r9]
 2308              	.L148:
 405:src/console.c ****     }
 2309              		.loc 2 405 7 is_stmt 1 view .LVU644
 2310 01b8 604B     		ldr	r3, .L225+80
 2311 01ba 0020     		movs	r0, #0
 2312 01bc 9847     		blx	r3
 2313              	.LVL208:
 409:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2314              		.loc 2 409 5 view .LVU645
 409:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2315              		.loc 2 409 9 is_stmt 0 view .LVU646
 2316 01be 2368     		ldr	r3, [r4]
 409:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2317              		.loc 2 409 8 view .LVU647
 2318 01c0 9905     		lsls	r1, r3, #22
 2319 01c2 7FF565AF 		bpl	.L215
 2320              	.L150:
 410:src/console.c ****         // Going to off mode
 2321              		.loc 2 410 7 is_stmt 1 view .LVU648
 410:src/console.c ****         // Going to off mode
 2322              		.loc 2 410 12 is_stmt 0 view .LVU649
 2323 01c6 2068     		ldr	r0, [r4]
 410:src/console.c ****         // Going to off mode
 2324              		.loc 2 410 10 view .LVU650
 2325 01c8 10F0040A 		ands	r10, r0, #4
 2326 01cc 7FF44FAF 		bne	.L142
 412:src/console.c ****         draw_power_off_image(1);
 2327              		.loc 2 412 9 is_stmt 1 view .LVU651
 2328 01d0 5B4B     		ldr	r3, .L225+84
 2329 01d2 5046     		mov	r0, r10
 2330 01d4 9847     		blx	r3
 2331              	.LVL209:
 413:src/console.c **** 
 2332              		.loc 2 413 9 view .LVU652
ARM GAS  /tmp/ccG96vrG.s 			page 66


 2333 01d6 5B4B     		ldr	r3, .L225+88
 2334 01d8 0120     		movs	r0, #1
 2335 01da 9847     		blx	r3
 2336              	.LVL210:
 415:src/console.c ****         SET_ST(STAT_SUSPENDED);
 2337              		.loc 2 415 9 view .LVU653
 2338 01dc 5A4B     		ldr	r3, .L225+92
 2339 01de 5046     		mov	r0, r10
 2340 01e0 9847     		blx	r3
 2341              	.LVL211:
 416:src/console.c ****         SET_ST(STAT_OFF);
 2342              		.loc 2 416 9 view .LVU654
 2343 01e2 2368     		ldr	r3, [r4]
 2344 01e4 43F00403 		orr	r3, r3, #4
 2345 01e8 2360     		str	r3, [r4]
 417:src/console.c ****       }
 2346              		.loc 2 417 9 view .LVU655
 2347 01ea 2368     		ldr	r3, [r4]
 2348 01ec 43F01003 		orr	r3, r3, #16
 2349 01f0 2360     		str	r3, [r4]
 2350 01f2 3CE7     		b	.L142
 2351              	.LVL212:
 2352              	.L163:
 2353              	.LBB125:
 2354              	.LBB109:
 105:src/console.c ****   case KEY_F1:
 2355              		.loc 2 105 3 view .LVU656
 2356 01f4 AAF12603 		sub	r3, r10, #38
 2357 01f8 052B     		cmp	r3, #5
 2358 01fa 00F27381 		bhi	.L168
 2359 01fe DFE813F0 		tbh	[pc, r3, lsl #1]
 2360              	.L170:
 2361 0202 EA00     		.2byte	(.L175-.L170)/2
 2362 0204 D400     		.2byte	(.L174-.L170)/2
 2363 0206 BA00     		.2byte	(.L173-.L170)/2
 2364 0208 5F00     		.2byte	(.L172-.L170)/2
 2365 020a 4500     		.2byte	(.L171-.L170)/2
 2366 020c 0B00     		.2byte	(.L169-.L170)/2
 2367              		.p2align 1
 2368              	.L180:
 120:src/console.c ****   case KEY_F6:
 2369              		.loc 2 120 5 view .LVU657
 120:src/console.c ****   case KEY_F6:
 2370              		.loc 2 120 9 is_stmt 0 view .LVU658
 2371 020e FFF7FEFF 		bl	cur_shift
 2372              	.LVL213:
 120:src/console.c ****   case KEY_F6:
 2373              		.loc 2 120 8 view .LVU659
 2374 0212 0128     		cmp	r0, #1
 2375 0214 00F09181 		beq	.L216
 2376              	.L169:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2377              		.loc 2 122 5 is_stmt 1 view .LVU660
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2378              		.loc 2 122 9 is_stmt 0 view .LVU661
 2379 0218 FFF7FEFF 		bl	cur_shift
 2380              	.LVL214:
ARM GAS  /tmp/ccG96vrG.s 			page 67


 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2381              		.loc 2 122 8 view .LVU662
 2382 021c 0028     		cmp	r0, #0
 2383 021e 40F05D81 		bne	.L181
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2384              		.loc 2 122 33 is_stmt 1 view .LVU663
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2385              		.loc 2 122 67 is_stmt 0 view .LVU664
 2386 0222 DBF80030 		ldr	r3, [fp]
 2387 0226 494F     		ldr	r7, .L225+96
 2388 0228 D022     		movs	r2, #208
 2389 022a 02FB03F2 		mul	r2, r2, r3
 2390 022e BB18     		adds	r3, r7, r2
 2391 0230 D3E92C01 		ldrd	r0, r1, [r3, #176]
 2392 0234 B032     		adds	r2, r2, #176
 2393 0236 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2394              	.LVL215:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2395              		.loc 2 122 67 view .LVU665
 2396 0238 85E80300 		stm	r5, {r0, r1}
 2397 023c 3A44     		add	r2, r2, r7
 2398              	.LBE109:
 2399              	.LBE125:
 455:src/console.c **** 	set_menu ( remapped.shift );
 2400              		.loc 2 455 10 view .LVU666
 2401 023e 2F2B     		cmp	r3, #47
 2402              	.LBB126:
 2403              	.LBB110:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2404              		.loc 2 122 67 view .LVU667
 2405 0240 D2F804A0 		ldr	r10, [r2, #4]
 2406              	.LVL216:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2407              		.loc 2 122 67 view .LVU668
 2408              	.LBE110:
 2409              	.LBE126:
 455:src/console.c **** 	set_menu ( remapped.shift );
 2410              		.loc 2 455 7 is_stmt 1 view .LVU669
 455:src/console.c **** 	set_menu ( remapped.shift );
 2411              		.loc 2 455 10 is_stmt 0 view .LVU670
 2412 0244 7FF46CAF 		bne	.L185
 2413              	.L212:
 456:src/console.c **** 	display_current_menu ();
 2414              		.loc 2 456 2 is_stmt 1 view .LVU671
 2415              	.LVL217:
 2416              	.LBB127:
 2417              	.LBI127:
   3:src/menu.c    ****   if (new_menu == current_menu) {
 2418              		.loc 1 3 6 view .LVU672
 2419              	.LBB128:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2420              		.loc 1 4 3 view .LVU673
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2421              		.loc 1 4 7 is_stmt 0 view .LVU674
 2422 0248 DBF80030 		ldr	r3, [fp]
 2423              	.LVL218:
   5:src/menu.c    ****     current_menu = 0;
ARM GAS  /tmp/ccG96vrG.s 			page 68


 2424              		.loc 1 5 3 is_stmt 1 view .LVU675
   5:src/menu.c    ****     current_menu = 0;
 2425              		.loc 1 5 6 is_stmt 0 view .LVU676
 2426 024c 5345     		cmp	r3, r10
 2427 024e 00F02581 		beq	.L186
   8:src/menu.c    ****     current_menu = last_menu;
 2428              		.loc 1 8 8 is_stmt 1 view .LVU677
   8:src/menu.c    ****     current_menu = last_menu;
 2429              		.loc 1 8 11 is_stmt 0 view .LVU678
 2430 0252 BAF1FF3F 		cmp	r10, #-1
 2431 0256 00F02781 		beq	.L217
 2432              	.LVL219:
 2433              	.L187:
  12:src/menu.c    ****   }
 2434              		.loc 1 12 5 is_stmt 1 view .LVU679
  12:src/menu.c    ****   }
 2435              		.loc 1 12 18 is_stmt 0 view .LVU680
 2436 025a CBF800A0 		str	r10, [fp]
 2437              	.LVL220:
 2438              	.L189:
  14:src/menu.c    **** }
 2439              		.loc 1 14 3 is_stmt 1 view .LVU681
  14:src/menu.c    **** }
 2440              		.loc 1 14 13 is_stmt 0 view .LVU682
 2441 025e 3C4A     		ldr	r2, .L225+100
 2442              	.LBE128:
 2443              	.LBE127:
 2444              	.LBB132:
 2445              	.LBB133:
  22:src/menu.c    **** }
 2446              		.loc 1 22 3 view .LVU683
 2447 0260 5046     		mov	r0, r10
 2448              	.LBE133:
 2449              	.LBE132:
 2450              	.LBB135:
 2451              	.LBB129:
  14:src/menu.c    **** }
 2452              		.loc 1 14 13 view .LVU684
 2453 0262 1360     		str	r3, [r2]
 2454              	.LBE129:
 2455              	.LBE135:
 457:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 2456              		.loc 2 457 2 is_stmt 1 view .LVU685
 2457              	.LBB136:
 2458              	.LBI132:
  21:src/menu.c    ****   display_menu (current_menu);
 2459              		.loc 1 21 6 view .LVU686
 2460              	.LBB134:
  22:src/menu.c    **** }
 2461              		.loc 1 22 3 view .LVU687
 2462 0264 FFF7FEFF 		bl	display_menu
 2463              	.LVL221:
 2464              	.LBE134:
 2465              	.LBE136:
 458:src/console.c **** 	case SHIFT_F:
 2466              		.loc 2 458 2 view .LVU688
 458:src/console.c **** 	case SHIFT_F:
ARM GAS  /tmp/ccG96vrG.s 			page 69


 2467              		.loc 2 458 10 is_stmt 0 view .LVU689
 2468 0268 FFF7FEFF 		bl	cur_shift
 2469              	.LVL222:
 458:src/console.c **** 	case SHIFT_F:
 2470              		.loc 2 458 2 view .LVU690
 2471 026c 0228     		cmp	r0, #2
 460:src/console.c **** 	  break;
 2472              		.loc 2 460 4 is_stmt 1 view .LVU691
 460:src/console.c **** 	  break;
 2473              		.loc 2 460 13 is_stmt 0 view .LVU692
 2474 026e 14BF     		ite	ne
 2475 0270 384B     		ldrne	r3, .L225+104
 463:src/console.c **** 	  break;
 2476              		.loc 2 463 4 is_stmt 1 view .LVU693
 463:src/console.c **** 	  break;
 2477              		.loc 2 463 13 is_stmt 0 view .LVU694
 2478 0272 394B     		ldreq	r3, .L225+108
 2479 0274 93E80300 		ldm	r3, {r0, r1}
 2480 0278 85E80300 		stm	r5, {r0, r1}
 2481 027c 8A46     		mov	r10, r1
 2482 027e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2483              	.LVL223:
 464:src/console.c **** 	case SHIFT_H:
 2484              		.loc 2 464 4 is_stmt 1 view .LVU695
 2485 0280 4EE7     		b	.L185
 2486              	.LVL224:
 2487              	.L179:
 2488              	.LBB137:
 2489              	.LBB111:
 117:src/console.c ****   case KEY_F5:
 2490              		.loc 2 117 5 view .LVU696
 117:src/console.c ****   case KEY_F5:
 2491              		.loc 2 117 9 is_stmt 0 view .LVU697
 2492 0282 FFF7FEFF 		bl	cur_shift
 2493              	.LVL225:
 117:src/console.c ****   case KEY_F5:
 2494              		.loc 2 117 8 view .LVU698
 2495 0286 0128     		cmp	r0, #1
 2496 0288 00F06881 		beq	.L218
 2497              	.L171:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2498              		.loc 2 119 5 is_stmt 1 view .LVU699
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2499              		.loc 2 119 9 is_stmt 0 view .LVU700
 2500 028c FFF7FEFF 		bl	cur_shift
 2501              	.LVL226:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2502              		.loc 2 119 8 view .LVU701
 2503 0290 0028     		cmp	r0, #0
 2504 0292 BCD1     		bne	.L180
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2505              		.loc 2 119 33 is_stmt 1 view .LVU702
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2506              		.loc 2 119 67 is_stmt 0 view .LVU703
 2507 0294 DBF80030 		ldr	r3, [fp]
 2508 0298 2C4F     		ldr	r7, .L225+96
 2509 029a D022     		movs	r2, #208
ARM GAS  /tmp/ccG96vrG.s 			page 70


 2510 029c 02FB03F2 		mul	r2, r2, r3
 2511 02a0 BB18     		adds	r3, r7, r2
 2512 02a2 D3E92401 		ldrd	r0, r1, [r3, #144]
 2513 02a6 9032     		adds	r2, r2, #144
 2514 02a8 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2515              	.LVL227:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2516              		.loc 2 119 67 view .LVU704
 2517 02aa 85E80300 		stm	r5, {r0, r1}
 2518 02ae 3A44     		add	r2, r2, r7
 2519 02b0 D2F804A0 		ldr	r10, [r2, #4]
 2520              	.LVL228:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2521              		.loc 2 119 67 view .LVU705
 2522 02b4 31E7     		b	.L160
 2523              	.LVL229:
 2524              	.L178:
 114:src/console.c ****   case KEY_F4:
 2525              		.loc 2 114 5 is_stmt 1 view .LVU706
 114:src/console.c ****   case KEY_F4:
 2526              		.loc 2 114 9 is_stmt 0 view .LVU707
 2527 02b6 FFF7FEFF 		bl	cur_shift
 2528              	.LVL230:
 114:src/console.c ****   case KEY_F4:
 2529              		.loc 2 114 8 view .LVU708
 2530 02ba 0128     		cmp	r0, #1
 2531 02bc 00F05F81 		beq	.L219
 2532              	.L172:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2533              		.loc 2 116 5 is_stmt 1 view .LVU709
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2534              		.loc 2 116 9 is_stmt 0 view .LVU710
 2535 02c0 FFF7FEFF 		bl	cur_shift
 2536              	.LVL231:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2537              		.loc 2 116 8 view .LVU711
 2538 02c4 0028     		cmp	r0, #0
 2539 02c6 DCD1     		bne	.L179
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2540              		.loc 2 116 33 is_stmt 1 view .LVU712
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2541              		.loc 2 116 67 is_stmt 0 view .LVU713
 2542 02c8 DBF80030 		ldr	r3, [fp]
 2543 02cc 1F4F     		ldr	r7, .L225+96
 2544 02ce D022     		movs	r2, #208
 2545 02d0 02FB03F2 		mul	r2, r2, r3
 2546 02d4 BB18     		adds	r3, r7, r2
 2547 02d6 D3E91C01 		ldrd	r0, r1, [r3, #112]
 2548 02da 7032     		adds	r2, r2, #112
 2549 02dc BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2550              	.LVL232:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2551              		.loc 2 116 67 view .LVU714
 2552 02de 85E80300 		stm	r5, {r0, r1}
 2553 02e2 3A44     		add	r2, r2, r7
 2554 02e4 D2F804A0 		ldr	r10, [r2, #4]
 2555              	.LVL233:
ARM GAS  /tmp/ccG96vrG.s 			page 71


 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2556              		.loc 2 116 67 view .LVU715
 2557 02e8 17E7     		b	.L160
 2558              	.L226:
 2559 02ea 00BF     		.align	2
 2560              	.L225:
 2561 02ec 00000000 		.word	StateWhileOn
 2562 02f0 00000000 		.word	DispMsg
 2563 02f4 00200010 		.word	268443648
 2564 02f8 7D030008 		.word	134218621
 2565 02fc 31020008 		.word	134218289
 2566 0300 00000000 		.word	JustDisplayed
 2567 0304 19040008 		.word	134218777
 2568 0308 19020008 		.word	134218265
 2569 030c E5020008 		.word	134218469
 2570 0310 59020008 		.word	134218329
 2571 0314 35020008 		.word	134218293
 2572 0318 89030008 		.word	134218633
 2573 031c B9030008 		.word	134218681
 2574 0320 B9040008 		.word	134218937
 2575 0324 00000000 		.word	.LANCHOR4
 2576 0328 00000000 		.word	.LANCHOR11
 2577 032c 00000000 		.word	.LANCHOR15
 2578 0330 00000000 		.word	.LANCHOR6
 2579 0334 01040008 		.word	134218753
 2580 0338 81030008 		.word	134218625
 2581 033c F5030008 		.word	134218741
 2582 0340 55020008 		.word	134218325
 2583 0344 2D040008 		.word	134218797
 2584 0348 1D020008 		.word	134218269
 2585 034c 00000000 		.word	.LANCHOR3
 2586 0350 00000000 		.word	.LANCHOR2
 2587 0354 00000000 		.word	.LANCHOR13
 2588 0358 00000000 		.word	.LANCHOR14
 2589 035c 00000000 		.word	.LANCHOR1
 2590 0360 00000000 		.word	Pause
 2591 0364 F9030008 		.word	134218745
 2592 0368 59030008 		.word	134218585
 2593              	.LVL234:
 2594              	.L177:
 111:src/console.c ****   case KEY_F3:
 2595              		.loc 2 111 5 is_stmt 1 view .LVU716
 111:src/console.c ****   case KEY_F3:
 2596              		.loc 2 111 9 is_stmt 0 view .LVU717
 2597 036c FFF7FEFF 		bl	cur_shift
 2598              	.LVL235:
 111:src/console.c ****   case KEY_F3:
 2599              		.loc 2 111 8 view .LVU718
 2600 0370 0128     		cmp	r0, #1
 2601 0372 00F01581 		beq	.L220
 2602              	.L173:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2603              		.loc 2 113 5 is_stmt 1 view .LVU719
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2604              		.loc 2 113 9 is_stmt 0 view .LVU720
 2605 0376 FFF7FEFF 		bl	cur_shift
 2606              	.LVL236:
ARM GAS  /tmp/ccG96vrG.s 			page 72


 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2607              		.loc 2 113 8 view .LVU721
 2608 037a 0028     		cmp	r0, #0
 2609 037c 9BD1     		bne	.L178
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2610              		.loc 2 113 33 is_stmt 1 view .LVU722
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2611              		.loc 2 113 67 is_stmt 0 view .LVU723
 2612 037e DBF80030 		ldr	r3, [fp]
 2613 0382 AA4F     		ldr	r7, .L227
 2614 0384 D022     		movs	r2, #208
 2615 0386 02FB03F2 		mul	r2, r2, r3
 2616 038a BB18     		adds	r3, r7, r2
 2617 038c D3E91401 		ldrd	r0, r1, [r3, #80]
 2618 0390 5032     		adds	r2, r2, #80
 2619 0392 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2620              	.LVL237:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2621              		.loc 2 113 67 view .LVU724
 2622 0394 85E80300 		stm	r5, {r0, r1}
 2623 0398 3A44     		add	r2, r2, r7
 2624 039a D2F804A0 		ldr	r10, [r2, #4]
 2625              	.LVL238:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2626              		.loc 2 113 67 view .LVU725
 2627 039e BCE6     		b	.L160
 2628              	.LVL239:
 2629              	.L176:
 108:src/console.c ****   case KEY_F2:
 2630              		.loc 2 108 5 is_stmt 1 view .LVU726
 108:src/console.c ****   case KEY_F2:
 2631              		.loc 2 108 9 is_stmt 0 view .LVU727
 2632 03a0 FFF7FEFF 		bl	cur_shift
 2633              	.LVL240:
 108:src/console.c ****   case KEY_F2:
 2634              		.loc 2 108 8 view .LVU728
 2635 03a4 0128     		cmp	r0, #1
 2636 03a6 00F00C81 		beq	.L221
 2637              	.L174:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2638              		.loc 2 110 5 is_stmt 1 view .LVU729
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2639              		.loc 2 110 9 is_stmt 0 view .LVU730
 2640 03aa FFF7FEFF 		bl	cur_shift
 2641              	.LVL241:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2642              		.loc 2 110 8 view .LVU731
 2643 03ae 0028     		cmp	r0, #0
 2644 03b0 DCD1     		bne	.L177
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2645              		.loc 2 110 33 is_stmt 1 view .LVU732
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2646              		.loc 2 110 67 is_stmt 0 view .LVU733
 2647 03b2 DBF80030 		ldr	r3, [fp]
 2648 03b6 D022     		movs	r2, #208
 2649 03b8 02FB03F2 		mul	r2, r2, r3
 2650 03bc 9B4B     		ldr	r3, .L227
ARM GAS  /tmp/ccG96vrG.s 			page 73


 2651 03be 1F46     		mov	r7, r3
 2652 03c0 1344     		add	r3, r3, r2
 2653 03c2 D3E90C01 		ldrd	r0, r1, [r3, #48]
 2654 03c6 3032     		adds	r2, r2, #48
 2655 03c8 85E80300 		stm	r5, {r0, r1}
 2656 03cc BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2657              	.LVL242:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2658              		.loc 2 110 67 view .LVU734
 2659 03ce 3A44     		add	r2, r2, r7
 2660 03d0 D2F804A0 		ldr	r10, [r2, #4]
 2661              	.LVL243:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2662              		.loc 2 110 67 view .LVU735
 2663 03d4 A1E6     		b	.L160
 2664              	.LVL244:
 2665              	.L175:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2666              		.loc 2 107 5 is_stmt 1 view .LVU736
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2667              		.loc 2 107 9 is_stmt 0 view .LVU737
 2668 03d6 FFF7FEFF 		bl	cur_shift
 2669              	.LVL245:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2670              		.loc 2 107 8 view .LVU738
 2671 03da 0028     		cmp	r0, #0
 2672 03dc E0D1     		bne	.L176
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2673              		.loc 2 107 33 is_stmt 1 view .LVU739
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2674              		.loc 2 107 67 is_stmt 0 view .LVU740
 2675 03de DBF80030 		ldr	r3, [fp]
 2676 03e2 924F     		ldr	r7, .L227
 2677 03e4 D022     		movs	r2, #208
 2678 03e6 02FB03F2 		mul	r2, r2, r3
 2679 03ea BB18     		adds	r3, r7, r2
 2680 03ec D3E90401 		ldrd	r0, r1, [r3, #16]
 2681 03f0 1032     		adds	r2, r2, #16
 2682 03f2 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2683              	.LVL246:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2684              		.loc 2 107 67 view .LVU741
 2685 03f4 85E80300 		stm	r5, {r0, r1}
 2686 03f8 3A44     		add	r2, r2, r7
 2687 03fa D2F804A0 		ldr	r10, [r2, #4]
 2688              	.LVL247:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2689              		.loc 2 107 67 view .LVU742
 2690 03fe 8CE6     		b	.L160
 2691              	.LVL248:
 2692              	.L158:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2693              		.loc 2 107 67 view .LVU743
 2694              	.LBE111:
 2695              	.LBE137:
 453:src/console.c ****       remapped = remap(c);
 2696              		.loc 2 453 5 is_stmt 1 view .LVU744
ARM GAS  /tmp/ccG96vrG.s 			page 74


 453:src/console.c ****       remapped = remap(c);
 2697              		.loc 2 453 8 is_stmt 0 view .LVU745
 2698 0400 7FF435AE 		bne	.L142
 2699 0404 77E6     		b	.L161
 2700              	.L157:
 453:src/console.c ****       remapped = remap(c);
 2701              		.loc 2 453 5 is_stmt 1 view .LVU746
 454:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2702              		.loc 2 454 7 view .LVU747
 2703              	.LVL249:
 2704              	.LBB138:
  60:src/console.c **** 
 2705              		.loc 2 60 22 view .LVU748
 2706              	.LBB112:
  62:src/console.c **** 
 2707              		.loc 2 62 3 view .LVU749
   1:src/keytran.c ****     {K_RELEASE, -1},
 2708              		.loc 3 1 1 view .LVU750
  59:src/keytran.c ****     {K_RELEASE, -1},
 2709              		.loc 3 59 3 view .LVU751
 117:src/keytran.c ****     {K_RELEASE, -1},
 2710              		.loc 3 117 3 view .LVU752
 2711              		.loc 3 175 1 view .LVU753
  66:src/console.c **** 
 2712              		.loc 2 66 3 view .LVU754
  66:src/console.c **** 
 2713              		.loc 2 66 23 view .LVU755
  66:src/console.c **** 
 2714              		.loc 2 66 30 is_stmt 0 view .LVU756
 2715 0406 8A4B     		ldr	r3, .L227+4
 2716 0408 93E80300 		ldm	r3, {r0, r1}
 2717              	.LVL250:
  66:src/console.c **** 
 2718              		.loc 2 66 30 view .LVU757
 2719 040c 85E80300 		stm	r5, {r0, r1}
 2720 0410 8A46     		mov	r10, r1
 2721              	.LVL251:
  66:src/console.c **** 
 2722              		.loc 2 66 30 view .LVU758
 2723 0412 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2724              	.LVL252:
  66:src/console.c **** 
 2725              		.loc 2 66 30 view .LVU759
 2726 0414 81E6     		b	.L160
 2727              	.LVL253:
 2728              	.L210:
  72:src/console.c ****     // Make screenshot - allow to report errors
 2729              		.loc 2 72 5 is_stmt 1 view .LVU760
 2730 0416 874B     		ldr	r3, .L227+8
 2731 0418 41F23010 		movw	r0, #4400
 2732 041c 9847     		blx	r3
 2733              	.LVL254:
  72:src/console.c ****     // Make screenshot - allow to report errors
 2734              		.loc 2 72 30 view .LVU761
 2735 041e 0A20     		movs	r0, #10
 2736 0420 854B     		ldr	r3, .L227+12
 2737 0422 9847     		blx	r3
ARM GAS  /tmp/ccG96vrG.s 			page 75


 2738              	.LVL255:
  72:src/console.c ****     // Make screenshot - allow to report errors
 2739              		.loc 2 72 45 view .LVU762
 2740 0424 854B     		ldr	r3, .L227+16
 2741 0426 9847     		blx	r3
 2742              	.LVL256:
  74:src/console.c ****       // Was error just wait for confirmation
 2743              		.loc 2 74 5 view .LVU763
  74:src/console.c ****       // Was error just wait for confirmation
 2744              		.loc 2 74 10 is_stmt 0 view .LVU764
 2745 0428 854B     		ldr	r3, .L227+20
 2746 042a 0120     		movs	r0, #1
 2747 042c 9847     		blx	r3
 2748              	.LVL257:
  74:src/console.c ****       // Was error just wait for confirmation
 2749              		.loc 2 74 8 view .LVU765
 2750 042e 0228     		cmp	r0, #2
 2751 0430 01D1     		bne	.L162
  76:src/console.c ****     }
 2752              		.loc 2 76 7 is_stmt 1 view .LVU766
 2753 0432 844B     		ldr	r3, .L227+24
 2754 0434 9847     		blx	r3
 2755              	.LVL258:
 2756              	.L162:
  79:src/console.c ****     return no_key;
 2757              		.loc 2 79 5 view .LVU767
 2758 0436 7F4B     		ldr	r3, .L227+8
 2759 0438 42F26020 		movw	r0, #8800
 2760 043c 9847     		blx	r3
 2761              	.LVL259:
  79:src/console.c ****     return no_key;
 2762              		.loc 2 79 30 view .LVU768
 2763 043e 0A20     		movs	r0, #10
 2764 0440 7D4B     		ldr	r3, .L227+12
 2765 0442 9847     		blx	r3
 2766              	.LVL260:
  79:src/console.c ****     return no_key;
 2767              		.loc 2 79 45 view .LVU769
 2768 0444 7D4B     		ldr	r3, .L227+16
 2769 0446 9847     		blx	r3
 2770              	.LVL261:
  80:src/console.c ****   }
 2771              		.loc 2 80 5 view .LVU770
  80:src/console.c ****   }
 2772              		.loc 2 80 12 is_stmt 0 view .LVU771
 2773 0448 7F4B     		ldr	r3, .L227+28
 2774 044a 93E80300 		ldm	r3, {r0, r1}
 2775 044e 85E80300 		stm	r5, {r0, r1}
 2776 0452 8A46     		mov	r10, r1
 2777              	.LVL262:
  80:src/console.c ****   }
 2778              		.loc 2 80 12 view .LVU772
 2779 0454 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2780              	.LVL263:
  80:src/console.c ****   }
 2781              		.loc 2 80 12 view .LVU773
 2782 0456 60E6     		b	.L160
ARM GAS  /tmp/ccG96vrG.s 			page 76


 2783              	.LVL264:
 2784              	.L213:
  80:src/console.c ****   }
 2785              		.loc 2 80 12 view .LVU774
 2786              	.LBE112:
 2787              	.LBE138:
 479:src/console.c **** 	display_current_menu();
 2788              		.loc 2 479 2 is_stmt 1 view .LVU775
 479:src/console.c **** 	display_current_menu();
 2789              		.loc 2 479 13 is_stmt 0 view .LVU776
 2790 0458 8DF81030 		strb	r3, [sp, #16]
 2791 045c CDF814A0 		str	r10, [sp, #20]
 2792 0460 95E80600 		ldm	r5, {r1, r2}
 2793 0464 02A8     		add	r0, sp, #8
 2794 0466 FFF7FEFF 		bl	do_multi
 2795              	.LVL265:
 479:src/console.c **** 	display_current_menu();
 2796              		.loc 2 479 13 view .LVU777
 2797 046a 02AB     		add	r3, sp, #8
 2798 046c 93E80300 		ldm	r3, {r0, r1}
 2799 0470 85E80300 		stm	r5, {r0, r1}
 2800              	.LVL266:
 2801              	.LBB139:
 2802              	.LBB140:
  22:src/menu.c    **** }
 2803              		.loc 1 22 3 view .LVU778
 2804 0474 DBF80000 		ldr	r0, [fp]
 2805              	.LBE140:
 2806              	.LBE139:
 479:src/console.c **** 	display_current_menu();
 2807              		.loc 2 479 13 view .LVU779
 2808 0478 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 2809 047c 0193     		str	r3, [sp, #4]
 2810              	.LVL267:
 479:src/console.c **** 	display_current_menu();
 2811              		.loc 2 479 13 view .LVU780
 2812 047e DDF814A0 		ldr	r10, [sp, #20]
 2813              	.LVL268:
 480:src/console.c ****       }
 2814              		.loc 2 480 2 is_stmt 1 view .LVU781
 2815              	.LBB142:
 2816              	.LBI139:
  21:src/menu.c    ****   display_menu (current_menu);
 2817              		.loc 1 21 6 view .LVU782
 2818              	.LBB141:
  22:src/menu.c    **** }
 2819              		.loc 1 22 3 view .LVU783
 2820 0482 FFF7FEFF 		bl	display_menu
 2821              	.LVL269:
  23:src/menu.c    **** 
 2822              		.loc 1 23 1 is_stmt 0 view .LVU784
 2823 0486 019B     		ldr	r3, [sp, #4]
 2824 0488 6AE6     		b	.L165
 2825              	.LVL270:
 2826              	.L209:
  23:src/menu.c    **** 
 2827              		.loc 1 23 1 view .LVU785
ARM GAS  /tmp/ccG96vrG.s 			page 77


 2828              	.LBE141:
 2829              	.LBE142:
 2830              	.LBB143:
 2831              	.LBB113:
  68:src/console.c **** 
 2832              		.loc 2 68 16 is_stmt 1 view .LVU786
  68:src/console.c **** 
 2833              		.loc 2 68 23 is_stmt 0 view .LVU787
 2834 048a 704B     		ldr	r3, .L227+32
 2835 048c 93E80300 		ldm	r3, {r0, r1}
 2836 0490 85E80300 		stm	r5, {r0, r1}
 2837 0494 8A46     		mov	r10, r1
 2838              	.LVL271:
  68:src/console.c **** 
 2839              		.loc 2 68 23 view .LVU788
 2840 0496 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2841              	.LVL272:
  68:src/console.c **** 
 2842              		.loc 2 68 23 view .LVU789
 2843 0498 3FE6     		b	.L160
 2844              	.LVL273:
 2845              	.L194:
  68:src/console.c **** 
 2846              		.loc 2 68 23 view .LVU790
 2847              	.LBE113:
 2848              	.LBE143:
 2849              	.LBB144:
 2850              	.LBB130:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2851              		.loc 1 4 7 view .LVU791
 2852 049a 9A46     		mov	r10, r3
 2853              	.LVL274:
 2854              	.L186:
   6:src/menu.c    ****   }
 2855              		.loc 1 6 5 is_stmt 1 view .LVU792
   6:src/menu.c    ****   }
 2856              		.loc 1 6 18 is_stmt 0 view .LVU793
 2857 049c 0022     		movs	r2, #0
 2858 049e 5346     		mov	r3, r10
 2859              	.LVL275:
   6:src/menu.c    ****   }
 2860              		.loc 1 6 18 view .LVU794
 2861 04a0 CBF80020 		str	r2, [fp]
 2862              	.LVL276:
   6:src/menu.c    ****   }
 2863              		.loc 1 6 18 view .LVU795
 2864 04a4 9246     		mov	r10, r2
 2865 04a6 DAE6     		b	.L189
 2866              	.LVL277:
 2867              	.L217:
   9:src/menu.c    ****   }
 2868              		.loc 1 9 5 is_stmt 1 view .LVU796
   9:src/menu.c    ****   }
 2869              		.loc 1 9 18 is_stmt 0 view .LVU797
 2870 04a8 694A     		ldr	r2, .L227+36
 2871 04aa D2F800A0 		ldr	r10, [r2]
 2872              	.LVL278:
ARM GAS  /tmp/ccG96vrG.s 			page 78


   9:src/menu.c    ****   }
 2873              		.loc 1 9 18 view .LVU798
 2874 04ae CBF800A0 		str	r10, [fp]
 2875 04b2 D4E6     		b	.L189
 2876              	.LVL279:
 2877              	.L211:
   9:src/menu.c    ****   }
 2878              		.loc 1 9 18 view .LVU799
 2879              	.LBE130:
 2880              	.LBE144:
 2881              	.LBB145:
 2882              	.LBB114:
  86:src/console.c ****       case SHIFT_N:
 2883              		.loc 2 86 7 is_stmt 1 view .LVU800
  86:src/console.c ****       case SHIFT_N:
 2884              		.loc 2 86 15 is_stmt 0 view .LVU801
 2885 04b4 FFF7FEFF 		bl	cur_shift
 2886              	.LVL280:
  86:src/console.c ****       case SHIFT_N:
 2887              		.loc 2 86 7 view .LVU802
 2888 04b8 0328     		cmp	r0, #3
  86:src/console.c ****       case SHIFT_N:
 2889              		.loc 2 86 15 view .LVU803
 2890 04ba 0346     		mov	r3, r0
  86:src/console.c ****       case SHIFT_N:
 2891              		.loc 2 86 7 view .LVU804
 2892 04bc 00F2A980 		bhi	.L192
 2893 04c0 0128     		cmp	r0, #1
 2894 04c2 21D8     		bhi	.L166
 2895 04c4 0028     		cmp	r0, #0
 2896 04c6 00F08D80 		beq	.L222
  89:src/console.c ****       case SHIFT_F:
 2897              		.loc 2 89 2 is_stmt 1 view .LVU805
  91:src/console.c **** 	break;
 2898              		.loc 2 91 2 view .LVU806
  91:src/console.c **** 	break;
 2899              		.loc 2 91 23 is_stmt 0 view .LVU807
 2900 04ca 624B     		ldr	r3, .L227+40
 2901 04cc 93E80300 		ldm	r3, {r0, r1}
 2902 04d0 4FF0000A 		mov	r10, #0
 2903              	.LVL281:
  91:src/console.c **** 	break;
 2904              		.loc 2 91 23 view .LVU808
 2905 04d4 85E80300 		stm	r5, {r0, r1}
 2906              	.LVL282:
  91:src/console.c **** 	break;
 2907              		.loc 2 91 23 view .LVU809
 2908              	.LBE114:
 2909              	.LBE145:
 455:src/console.c **** 	set_menu ( remapped.shift );
 2910              		.loc 2 455 7 is_stmt 1 view .LVU810
 471:src/console.c **** 	SET_ST(STAT_MENU);
 2911              		.loc 2 471 7 view .LVU811
 478:src/console.c **** 	remapped = do_multi (remapped);
 2912              		.loc 2 478 7 view .LVU812
 2913              	.LBB146:
 2914              	.LBB115:
ARM GAS  /tmp/ccG96vrG.s 			page 79


  91:src/console.c **** 	break;
 2915              		.loc 2 91 23 is_stmt 0 view .LVU813
 2916 04d8 2A23     		movs	r3, #42
 2917 04da 41E6     		b	.L165
 2918              	.LVL283:
 2919              	.L181:
 123:src/console.c ****   }
 2920              		.loc 2 123 5 is_stmt 1 view .LVU814
 123:src/console.c ****   }
 2921              		.loc 2 123 9 is_stmt 0 view .LVU815
 2922 04dc FFF7FEFF 		bl	cur_shift
 2923              	.LVL284:
 123:src/console.c ****   }
 2924              		.loc 2 123 8 view .LVU816
 2925 04e0 0128     		cmp	r0, #1
 2926 04e2 19D0     		beq	.L223
 2927              	.L168:
 126:src/console.c ****   case SHIFT_N:    
 2928              		.loc 2 126 3 is_stmt 1 view .LVU817
 126:src/console.c ****   case SHIFT_N:    
 2929              		.loc 2 126 11 is_stmt 0 view .LVU818
 2930 04e4 FFF7FEFF 		bl	cur_shift
 2931              	.LVL285:
 126:src/console.c ****   case SHIFT_N:    
 2932              		.loc 2 126 3 view .LVU819
 2933 04e8 0128     		cmp	r0, #1
 2934 04ea 00F09080 		beq	.L182
 2935 04ee 0228     		cmp	r0, #2
 2936 04f0 00F08280 		beq	.L183
 2937 04f4 0028     		cmp	r0, #0
 2938 04f6 7DD0     		beq	.L184
  62:src/console.c **** 
 2939              		.loc 2 62 41 view .LVU820
 2940 04f8 5FFA8AF3 		uxtb	r3, r10
 2941              	.LVL286:
  62:src/console.c **** 
 2942              		.loc 2 62 41 view .LVU821
 2943              	.LBE115:
 2944              	.LBE146:
 455:src/console.c **** 	set_menu ( remapped.shift );
 2945              		.loc 2 455 7 is_stmt 1 view .LVU822
 455:src/console.c **** 	set_menu ( remapped.shift );
 2946              		.loc 2 455 10 is_stmt 0 view .LVU823
 2947 04fc 2F2B     		cmp	r3, #47
 2948 04fe 00F08C80 		beq	.L224
 2949              	.LBB147:
 2950              	.LBB116:
 137:src/console.c ****   }
 2951              		.loc 2 137 12 view .LVU824
 2952 0502 4FF0000A 		mov	r10, #0
 2953              	.LVL287:
 137:src/console.c ****   }
 2954              		.loc 2 137 12 view .LVU825
 2955 0506 0BE6     		b	.L185
 2956              	.LVL288:
 2957              	.L166:
  92:src/console.c ****       case SHIFT_G:
ARM GAS  /tmp/ccG96vrG.s 			page 80


 2958              		.loc 2 92 2 is_stmt 1 view .LVU826
  94:src/console.c **** 	break;
 2959              		.loc 2 94 2 view .LVU827
  94:src/console.c **** 	break;
 2960              		.loc 2 94 9 is_stmt 0 view .LVU828
 2961 0508 534B     		ldr	r3, .L227+44
 2962 050a 93E80300 		ldm	r3, {r0, r1}
 2963 050e 85E80300 		stm	r5, {r0, r1}
 2964 0512 8A46     		mov	r10, r1
 2965              	.LVL289:
  94:src/console.c **** 	break;
 2966              		.loc 2 94 9 view .LVU829
 2967 0514 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2968              	.LVL290:
  94:src/console.c **** 	break;
 2969              		.loc 2 94 9 view .LVU830
 2970 0516 00E6     		b	.L160
 2971              	.LVL291:
 2972              	.L223:
 123:src/console.c ****   }
 2973              		.loc 2 123 33 is_stmt 1 view .LVU831
 123:src/console.c ****   }
 2974              		.loc 2 123 67 is_stmt 0 view .LVU832
 2975 0518 DBF80030 		ldr	r3, [fp]
 2976 051c 434F     		ldr	r7, .L227
 2977 051e D022     		movs	r2, #208
 2978 0520 02FB03F2 		mul	r2, r2, r3
 2979 0524 BB18     		adds	r3, r7, r2
 2980 0526 D3E92E01 		ldrd	r0, r1, [r3, #184]
 2981 052a B832     		adds	r2, r2, #184
 2982 052c BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2983              	.LVL292:
 123:src/console.c ****   }
 2984              		.loc 2 123 67 view .LVU833
 2985 052e 85E80300 		stm	r5, {r0, r1}
 2986 0532 3A44     		add	r2, r2, r7
 2987 0534 D2F804A0 		ldr	r10, [r2, #4]
 2988              	.LVL293:
 123:src/console.c ****   }
 2989              		.loc 2 123 67 view .LVU834
 2990 0538 EFE5     		b	.L160
 2991              	.LVL294:
 2992              	.L216:
 120:src/console.c ****   case KEY_F6:
 2993              		.loc 2 120 33 is_stmt 1 view .LVU835
 120:src/console.c ****   case KEY_F6:
 2994              		.loc 2 120 67 is_stmt 0 view .LVU836
 2995 053a DBF80030 		ldr	r3, [fp]
 2996 053e 3B4F     		ldr	r7, .L227
 2997 0540 D022     		movs	r2, #208
 2998 0542 02FB03F2 		mul	r2, r2, r3
 2999 0546 BB18     		adds	r3, r7, r2
 3000 0548 D3E92601 		ldrd	r0, r1, [r3, #152]
 3001 054c 9832     		adds	r2, r2, #152
 3002 054e BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3003              	.LVL295:
 120:src/console.c ****   case KEY_F6:
ARM GAS  /tmp/ccG96vrG.s 			page 81


 3004              		.loc 2 120 67 view .LVU837
 3005 0550 85E80300 		stm	r5, {r0, r1}
 3006 0554 3A44     		add	r2, r2, r7
 3007 0556 D2F804A0 		ldr	r10, [r2, #4]
 3008              	.LVL296:
 120:src/console.c ****   case KEY_F6:
 3009              		.loc 2 120 67 view .LVU838
 3010 055a DEE5     		b	.L160
 3011              	.LVL297:
 3012              	.L218:
 117:src/console.c ****   case KEY_F5:
 3013              		.loc 2 117 33 is_stmt 1 view .LVU839
 117:src/console.c ****   case KEY_F5:
 3014              		.loc 2 117 67 is_stmt 0 view .LVU840
 3015 055c DBF80030 		ldr	r3, [fp]
 3016 0560 324F     		ldr	r7, .L227
 3017 0562 D022     		movs	r2, #208
 3018 0564 02FB03F2 		mul	r2, r2, r3
 3019 0568 BB18     		adds	r3, r7, r2
 3020 056a D3E91E01 		ldrd	r0, r1, [r3, #120]
 3021 056e 7832     		adds	r2, r2, #120
 3022 0570 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3023              	.LVL298:
 117:src/console.c ****   case KEY_F5:
 3024              		.loc 2 117 67 view .LVU841
 3025 0572 85E80300 		stm	r5, {r0, r1}
 3026 0576 3A44     		add	r2, r2, r7
 3027 0578 D2F804A0 		ldr	r10, [r2, #4]
 3028              	.LVL299:
 117:src/console.c ****   case KEY_F5:
 3029              		.loc 2 117 67 view .LVU842
 3030 057c CDE5     		b	.L160
 3031              	.LVL300:
 3032              	.L219:
 114:src/console.c ****   case KEY_F4:
 3033              		.loc 2 114 33 is_stmt 1 view .LVU843
 114:src/console.c ****   case KEY_F4:
 3034              		.loc 2 114 67 is_stmt 0 view .LVU844
 3035 057e DBF80030 		ldr	r3, [fp]
 3036 0582 2A4F     		ldr	r7, .L227
 3037 0584 D022     		movs	r2, #208
 3038 0586 02FB03F2 		mul	r2, r2, r3
 3039 058a BB18     		adds	r3, r7, r2
 3040 058c D3E91601 		ldrd	r0, r1, [r3, #88]
 3041 0590 5832     		adds	r2, r2, #88
 3042 0592 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3043              	.LVL301:
 114:src/console.c ****   case KEY_F4:
 3044              		.loc 2 114 67 view .LVU845
 3045 0594 85E80300 		stm	r5, {r0, r1}
 3046 0598 3A44     		add	r2, r2, r7
 3047 059a D2F804A0 		ldr	r10, [r2, #4]
 3048              	.LVL302:
 114:src/console.c ****   case KEY_F4:
 3049              		.loc 2 114 67 view .LVU846
 3050 059e BCE5     		b	.L160
 3051              	.LVL303:
ARM GAS  /tmp/ccG96vrG.s 			page 82


 3052              	.L220:
 111:src/console.c ****   case KEY_F3:
 3053              		.loc 2 111 33 is_stmt 1 view .LVU847
 111:src/console.c ****   case KEY_F3:
 3054              		.loc 2 111 67 is_stmt 0 view .LVU848
 3055 05a0 DBF80030 		ldr	r3, [fp]
 3056 05a4 214F     		ldr	r7, .L227
 3057 05a6 D022     		movs	r2, #208
 3058 05a8 02FB03F2 		mul	r2, r2, r3
 3059 05ac BB18     		adds	r3, r7, r2
 3060 05ae D3E90E01 		ldrd	r0, r1, [r3, #56]
 3061 05b2 3832     		adds	r2, r2, #56
 3062 05b4 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3063              	.LVL304:
 111:src/console.c ****   case KEY_F3:
 3064              		.loc 2 111 67 view .LVU849
 3065 05b6 85E80300 		stm	r5, {r0, r1}
 3066 05ba 3A44     		add	r2, r2, r7
 3067 05bc D2F804A0 		ldr	r10, [r2, #4]
 3068              	.LVL305:
 111:src/console.c ****   case KEY_F3:
 3069              		.loc 2 111 67 view .LVU850
 3070 05c0 ABE5     		b	.L160
 3071              	.LVL306:
 3072              	.L221:
 108:src/console.c ****   case KEY_F2:
 3073              		.loc 2 108 33 is_stmt 1 view .LVU851
 108:src/console.c ****   case KEY_F2:
 3074              		.loc 2 108 67 is_stmt 0 view .LVU852
 3075 05c2 DBF80030 		ldr	r3, [fp]
 3076 05c6 194F     		ldr	r7, .L227
 3077 05c8 D022     		movs	r2, #208
 3078 05ca 02FB03F2 		mul	r2, r2, r3
 3079 05ce BB18     		adds	r3, r7, r2
 3080 05d0 D3E90601 		ldrd	r0, r1, [r3, #24]
 3081 05d4 1832     		adds	r2, r2, #24
 3082 05d6 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3083              	.LVL307:
 108:src/console.c ****   case KEY_F2:
 3084              		.loc 2 108 67 view .LVU853
 3085 05d8 85E80300 		stm	r5, {r0, r1}
 3086 05dc 3A44     		add	r2, r2, r7
 3087 05de D2F804A0 		ldr	r10, [r2, #4]
 3088              	.LVL308:
 108:src/console.c ****   case KEY_F2:
 3089              		.loc 2 108 67 view .LVU854
 3090 05e2 9AE5     		b	.L160
 3091              	.LVL309:
 3092              	.L222:
  88:src/console.c **** 	break;
 3093              		.loc 2 88 2 is_stmt 1 view .LVU855
  88:src/console.c **** 	break;
 3094              		.loc 2 88 21 is_stmt 0 view .LVU856
 3095 05e4 1D4A     		ldr	r2, .L227+48
 3096 05e6 92E80300 		ldm	r2, {r0, r1}
 3097 05ea 9A46     		mov	r10, r3
 3098              	.LVL310:
ARM GAS  /tmp/ccG96vrG.s 			page 83


  88:src/console.c **** 	break;
 3099              		.loc 2 88 21 view .LVU857
 3100 05ec 85E80300 		stm	r5, {r0, r1}
 3101              	.LVL311:
  88:src/console.c **** 	break;
 3102              		.loc 2 88 21 view .LVU858
 3103              	.LBE116:
 3104              	.LBE147:
 455:src/console.c **** 	set_menu ( remapped.shift );
 3105              		.loc 2 455 7 is_stmt 1 view .LVU859
 471:src/console.c **** 	SET_ST(STAT_MENU);
 3106              		.loc 2 471 7 view .LVU860
 478:src/console.c **** 	remapped = do_multi (remapped);
 3107              		.loc 2 478 7 view .LVU861
 3108              	.LBB148:
 3109              	.LBB117:
  88:src/console.c **** 	break;
 3110              		.loc 2 88 21 is_stmt 0 view .LVU862
 3111 05f0 2923     		movs	r3, #41
 3112 05f2 B5E5     		b	.L165
 3113              	.LVL312:
 3114              	.L184:
 128:src/console.c ****     break;
 3115              		.loc 2 128 5 is_stmt 1 view .LVU863
 128:src/console.c ****     break;
 3116              		.loc 2 128 24 is_stmt 0 view .LVU864
 3117 05f4 1A4A     		ldr	r2, .L227+52
 3118 05f6 87E5     		b	.L208
 3119              	.L183:
 132:src/console.c ****   case SHIFT_G:
 3120              		.loc 2 132 5 is_stmt 1 view .LVU865
 134:src/console.c ****     break;
 3121              		.loc 2 134 5 view .LVU866
 134:src/console.c ****     break;
 3122              		.loc 2 134 26 is_stmt 0 view .LVU867
 3123 05f8 1A4A     		ldr	r2, .L227+56
 3124 05fa 02EBCA03 		add	r3, r2, r10, lsl #3
 3125 05fe 93E80300 		ldm	r3, {r0, r1}
 3126 0602 12F83A30 		ldrb	r3, [r2, r10, lsl #3]	@ zero_extendqisi2
 3127              	.LVL313:
 134:src/console.c ****     break;
 3128              		.loc 2 134 26 view .LVU868
 3129 0606 85E80300 		stm	r5, {r0, r1}
 3130 060a 8A46     		mov	r10, r1
 3131              	.LVL314:
 134:src/console.c ****     break;
 3132              		.loc 2 134 26 view .LVU869
 3133 060c 85E5     		b	.L160
 3134              	.LVL315:
 3135              	.L182:
 129:src/console.c ****   case SHIFT_F:
 3136              		.loc 2 129 5 is_stmt 1 view .LVU870
 131:src/console.c ****     break;
 3137              		.loc 2 131 5 view .LVU871
 131:src/console.c ****     break;
 3138              		.loc 2 131 26 is_stmt 0 view .LVU872
 3139 060e 164A     		ldr	r2, .L227+60
ARM GAS  /tmp/ccG96vrG.s 			page 84


 3140 0610 7AE5     		b	.L208
 3141              	.L192:
  86:src/console.c ****       case SHIFT_N:
 3142              		.loc 2 86 7 view .LVU873
 3143 0612 5346     		mov	r3, r10
 3144 0614 4FF0000A 		mov	r10, #0
 3145              	.LVL316:
  86:src/console.c ****       case SHIFT_N:
 3146              		.loc 2 86 7 view .LVU874
 3147 0618 A2E5     		b	.L165
 3148              	.LVL317:
 3149              	.L224:
  86:src/console.c ****       case SHIFT_N:
 3150              		.loc 2 86 7 view .LVU875
 3151              	.LBE117:
 3152              	.LBE148:
 456:src/console.c **** 	display_current_menu ();
 3153              		.loc 2 456 2 is_stmt 1 view .LVU876
 3154              	.LBB149:
   3:src/menu.c    ****   if (new_menu == current_menu) {
 3155              		.loc 1 3 6 view .LVU877
 3156              	.LBB131:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3157              		.loc 1 4 3 view .LVU878
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3158              		.loc 1 4 7 is_stmt 0 view .LVU879
 3159 061a DBF80030 		ldr	r3, [fp]
 3160              	.LVL318:
   5:src/menu.c    ****     current_menu = 0;
 3161              		.loc 1 5 3 is_stmt 1 view .LVU880
   5:src/menu.c    ****     current_menu = 0;
 3162              		.loc 1 5 6 is_stmt 0 view .LVU881
 3163 061e 002B     		cmp	r3, #0
 3164 0620 3FF43BAF 		beq	.L194
 3165              	.LBE131:
 3166              	.LBE149:
 3167              	.LBB150:
 3168              	.LBB118:
 137:src/console.c ****   }
 3169              		.loc 2 137 12 view .LVU882
 3170 0624 4FF0000A 		mov	r10, #0
 3171              	.LVL319:
 137:src/console.c ****   }
 3172              		.loc 2 137 12 view .LVU883
 3173 0628 17E6     		b	.L187
 3174              	.L228:
 3175 062a 00BF     		.align	2
 3176              	.L227:
 3177 062c 00000000 		.word	.LANCHOR3
 3178 0630 00000000 		.word	.LANCHOR16
 3179 0634 F5020008 		.word	134218485
 3180 0638 05040008 		.word	134218757
 3181 063c F9020008 		.word	134218489
 3182 0640 79030008 		.word	134218617
 3183 0644 99030008 		.word	134218649
 3184 0648 00000000 		.word	.LANCHOR6
 3185 064c 00000000 		.word	.LANCHOR7
ARM GAS  /tmp/ccG96vrG.s 			page 85


 3186 0650 00000000 		.word	.LANCHOR2
 3187 0654 E0000000 		.word	.LANCHOR9+224
 3188 0658 00000000 		.word	.LANCHOR10
 3189 065c E0000000 		.word	.LANCHOR8+224
 3190 0660 00000000 		.word	.LANCHOR8
 3191 0664 00000000 		.word	.LANCHOR12
 3192 0668 00000000 		.word	.LANCHOR9
 3193              	.LBE118:
 3194              	.LBE150:
 3195              		.cfi_endproc
 3196              	.LFE23:
 3198              		.global	n_p
 3199              		.comm	print_string,22,4
 3200              		.global	spaces
 3201              		.global	release
 3202              		.global	h_shift
 3203              		.global	g_shift
 3204              		.global	f_shift
 3205              		.global	heartbeat
 3206              		.global	no_key
 3207              		.global	MID_MENU
 3208              		.section	.rodata.str1.4,"aMS",%progbits,1
 3209              		.align	2
 3210              	.LC2:
 3211 0000 53797374 		.ascii	"System!\000"
 3211      656D2100 
 3212              		.global	mid_menu
 3213              		.section	.bss.current_menu,"aw",%nobits
 3214              		.align	2
 3215              		.set	.LANCHOR1,. + 0
 3218              	current_menu:
 3219 0000 00000000 		.space	4
 3220              		.section	.bss.last_menu,"aw",%nobits
 3221              		.align	2
 3222              		.set	.LANCHOR2,. + 0
 3225              	last_menu:
 3226 0000 00000000 		.space	4
 3227              		.section	.bss.mdots,"aw",%nobits
 3228              		.align	2
 3229              		.set	.LANCHOR0,. + 0
 3232              	mdots:
 3233 0000 00000000 		.space	400
 3233      00000000 
 3233      00000000 
 3233      00000000 
 3233      00000000 
 3234              		.section	.bss.n_p,"aw",%nobits
 3235              		.align	2
 3238              	n_p:
 3239 0000 00000000 		.space	4
 3240              		.section	.bss.start_ticks,"aw",%nobits
 3241              		.align	2
 3242              		.set	.LANCHOR4,. + 0
 3245              	start_ticks:
 3246 0000 00000000 		.space	4
 3247              		.section	.data.f_shift,"aw"
 3248              		.align	2
ARM GAS  /tmp/ccG96vrG.s 			page 86


 3249              		.set	.LANCHOR13,. + 0
 3252              	f_shift:
 3253 0000 29       		.byte	41
 3254 0001 000000   		.space	3
 3255 0004 FFFFFFFF 		.word	-1
 3256              		.section	.data.g_shift,"aw"
 3257              		.align	2
 3258              		.set	.LANCHOR14,. + 0
 3261              	g_shift:
 3262 0000 2A       		.byte	42
 3263 0001 000000   		.space	3
 3264 0004 FFFFFFFF 		.word	-1
 3265              		.section	.data.h_shift,"aw"
 3266              		.align	2
 3267              		.set	.LANCHOR10,. + 0
 3270              	h_shift:
 3271 0000 2B       		.byte	43
 3272 0001 000000   		.space	3
 3273 0004 FFFFFFFF 		.word	-1
 3274              		.section	.data.heartbeat,"aw"
 3275              		.align	2
 3276              		.set	.LANCHOR16,. + 0
 3279              	heartbeat:
 3280 0000 62       		.byte	98
 3281 0001 000000   		.space	3
 3282 0004 FFFFFFFF 		.word	-1
 3283              		.section	.data.no_key,"aw"
 3284              		.align	2
 3285              		.set	.LANCHOR6,. + 0
 3288              	no_key:
 3289 0000 2E       		.byte	46
 3290 0001 000000   		.space	3
 3291 0004 00000000 		.word	0
 3292              		.section	.data.release,"aw"
 3293              		.align	2
 3294              		.set	.LANCHOR7,. + 0
 3297              	release:
 3298 0000 63       		.byte	99
 3299 0001 000000   		.space	3
 3300 0004 FFFFFFFF 		.word	-1
 3301              		.section	.data.spaces,"aw"
 3302              		.align	2
 3303              		.set	.LANCHOR5,. + 0
 3306              	spaces:
 3307 0000 20202020 		.ascii	"                     \000"
 3307      20202020 
 3307      20202020 
 3307      20202020 
 3307      20202020 
 3308              		.section	.rodata.MID_MENU,"a"
 3309              		.align	2
 3310              		.set	.LANCHOR15,. + 0
 3313              	MID_MENU:
 3314 0000 00000000 		.word	.LC2
 3315 0004 00000000 		.word	mid_menu
 3316 0008 00000000 		.word	0
 3317 000c 00000000 		.word	0
ARM GAS  /tmp/ccG96vrG.s 			page 87


 3318              		.section	.rodata.Menus,"a"
 3319              		.align	2
 3320              		.set	.LANCHOR3,. + 0
 3323              	Menus:
 3324 0000 426C616E 		.ascii	"Blank\000"
 3324      6B00
 3325 0006 00000000 		.space	9
 3325      00000000 
 3325      00
 3326 000f 00       		.space	1
 3327 0010 2E       		.byte	46
 3328 0011 000000   		.space	3
 3329 0014 FFFFFFFF 		.word	-1
 3330 0018 2E       		.byte	46
 3331 0019 000000   		.space	3
 3332 001c FFFFFFFF 		.word	-1
 3333 0020 00       		.ascii	"\000"
 3334 0021 00000000 		.space	7
 3334      000000
 3335 0028 00       		.ascii	"\000"
 3336 0029 00000000 		.space	7
 3336      000000
 3337 0030 2E       		.byte	46
 3338 0031 000000   		.space	3
 3339 0034 FFFFFFFF 		.word	-1
 3340 0038 2E       		.byte	46
 3341 0039 000000   		.space	3
 3342 003c FFFFFFFF 		.word	-1
 3343 0040 00       		.ascii	"\000"
 3344 0041 00000000 		.space	7
 3344      000000
 3345 0048 00       		.ascii	"\000"
 3346 0049 00000000 		.space	7
 3346      000000
 3347 0050 2E       		.byte	46
 3348 0051 000000   		.space	3
 3349 0054 FFFFFFFF 		.word	-1
 3350 0058 2E       		.byte	46
 3351 0059 000000   		.space	3
 3352 005c FFFFFFFF 		.word	-1
 3353 0060 00       		.ascii	"\000"
 3354 0061 00000000 		.space	7
 3354      000000
 3355 0068 00       		.ascii	"\000"
 3356 0069 00000000 		.space	7
 3356      000000
 3357 0070 2E       		.byte	46
 3358 0071 000000   		.space	3
 3359 0074 FFFFFFFF 		.word	-1
 3360 0078 2E       		.byte	46
 3361 0079 000000   		.space	3
 3362 007c FFFFFFFF 		.word	-1
 3363 0080 00       		.ascii	"\000"
 3364 0081 00000000 		.space	7
 3364      000000
 3365 0088 00       		.ascii	"\000"
 3366 0089 00000000 		.space	7
ARM GAS  /tmp/ccG96vrG.s 			page 88


 3366      000000
 3367 0090 2C       		.byte	44
 3368 0091 000000   		.space	3
 3369 0094 FFFFFFFF 		.word	-1
 3370 0098 2E       		.byte	46
 3371 0099 000000   		.space	3
 3372 009c FFFFFFFF 		.word	-1
 3373 00a0 2D2D0D00 		.ascii	"--\015\000"
 3374 00a4 00000000 		.space	4
 3375 00a8 00       		.ascii	"\000"
 3376 00a9 00000000 		.space	7
 3376      000000
 3377 00b0 2D       		.byte	45
 3378 00b1 000000   		.space	3
 3379 00b4 FFFFFFFF 		.word	-1
 3380 00b8 2E       		.byte	46
 3381 00b9 000000   		.space	3
 3382 00bc FFFFFFFF 		.word	-1
 3383 00c0 43505800 		.ascii	"CPX\000"
 3384 00c4 00000000 		.space	4
 3385 00c8 00       		.ascii	"\000"
 3386 00c9 00000000 		.space	7
 3386      000000
 3387 00d0 436C6561 		.ascii	"Clear\000"
 3387      7200
 3388 00d6 00000000 		.space	9
 3388      00000000 
 3388      00
 3389 00df 00       		.space	1
 3390 00e0 10       		.byte	16
 3391 00e1 000000   		.space	3
 3392 00e4 01000000 		.word	1
 3393 00e8 2E       		.byte	46
 3394 00e9 000000   		.space	3
 3395 00ec FFFFFFFF 		.word	-1
 3396 00f0 434C5072 		.ascii	"CLProg\000"
 3396      6F6700
 3397 00f7 00       		.space	1
 3398 00f8 00       		.ascii	"\000"
 3399 00f9 00000000 		.space	7
 3399      000000
 3400 0100 10       		.byte	16
 3401 0101 000000   		.space	3
 3402 0104 02000000 		.word	2
 3403 0108 2E       		.byte	46
 3404 0109 000000   		.space	3
 3405 010c FFFFFFFF 		.word	-1
 3406 0110 434C9100 		.ascii	"CL\221\000"
 3407 0114 00000000 		.space	4
 3408 0118 00       		.ascii	"\000"
 3409 0119 00000000 		.space	7
 3409      000000
 3410 0120 10       		.byte	16
 3411 0121 000000   		.space	3
 3412 0124 03000000 		.word	3
 3413 0128 2E       		.byte	46
 3414 0129 000000   		.space	3
ARM GAS  /tmp/ccG96vrG.s 			page 89


 3415 012c FFFFFFFF 		.word	-1
 3416 0130 434C2058 		.ascii	"CL X\000"
 3416      00
 3417 0135 000000   		.space	3
 3418 0138 00       		.ascii	"\000"
 3419 0139 00000000 		.space	7
 3419      000000
 3420 0140 2E       		.byte	46
 3421 0141 000000   		.space	3
 3422 0144 FFFFFFFF 		.word	-1
 3423 0148 2E       		.byte	46
 3424 0149 000000   		.space	3
 3425 014c FFFFFFFF 		.word	-1
 3426 0150 00       		.ascii	"\000"
 3427 0151 00000000 		.space	7
 3427      000000
 3428 0158 00       		.ascii	"\000"
 3429 0159 00000000 		.space	7
 3429      000000
 3430 0160 2C       		.byte	44
 3431 0161 000000   		.space	3
 3432 0164 FFFFFFFF 		.word	-1
 3433 0168 2E       		.byte	46
 3434 0169 000000   		.space	3
 3435 016c FFFFFFFF 		.word	-1
 3436 0170 2D2D0D00 		.ascii	"--\015\000"
 3437 0174 00000000 		.space	4
 3438 0178 00       		.ascii	"\000"
 3439 0179 00000000 		.space	7
 3439      000000
 3440 0180 2D       		.byte	45
 3441 0181 000000   		.space	3
 3442 0184 FFFFFFFF 		.word	-1
 3443 0188 2E       		.byte	46
 3444 0189 000000   		.space	3
 3445 018c FFFFFFFF 		.word	-1
 3446 0190 43505800 		.ascii	"CPX\000"
 3447 0194 00000000 		.space	4
 3448 0198 00       		.ascii	"\000"
 3449 0199 00000000 		.space	7
 3449      000000
 3450 01a0 44495350 		.ascii	"DISP\000"
 3450      00
 3451 01a5 00000000 		.space	10
 3451      00000000 
 3451      0000
 3452 01af 00       		.space	1
 3453 01b0 00       		.byte	0
 3454 01b1 000000   		.space	3
 3455 01b4 03000000 		.word	3
 3456 01b8 05       		.byte	5
 3457 01b9 000000   		.space	3
 3458 01bc 01000000 		.word	1
 3459 01c0 414C4C00 		.ascii	"ALL\000"
 3460 01c4 00000000 		.space	4
 3461 01c8 6120622F 		.ascii	"a b/c\000"
 3461      6300
ARM GAS  /tmp/ccG96vrG.s 			page 90


 3462 01ce 0000     		.space	2
 3463 01d0 01       		.byte	1
 3464 01d1 000000   		.space	3
 3465 01d4 03000000 		.word	3
 3466 01d8 05       		.byte	5
 3467 01d9 000000   		.space	3
 3468 01dc 02000000 		.word	2
 3469 01e0 46495800 		.ascii	"FIX\000"
 3470 01e4 00000000 		.space	4
 3471 01e8 642F6300 		.ascii	"d/c\000"
 3472 01ec 00000000 		.space	4
 3473 01f0 02       		.byte	2
 3474 01f1 000000   		.space	3
 3475 01f4 03000000 		.word	3
 3476 01f8 06       		.byte	6
 3477 01f9 000000   		.space	3
 3478 01fc 01000000 		.word	1
 3479 0200 53434900 		.ascii	"SCI\000"
 3480 0204 00000000 		.space	4
 3481 0208 482E4D53 		.ascii	"H.MS\000"
 3481      00
 3482 020d 000000   		.space	3
 3483 0210 03       		.byte	3
 3484 0211 000000   		.space	3
 3485 0214 03000000 		.word	3
 3486 0218 07       		.byte	7
 3487 0219 000000   		.space	3
 3488 021c 01000000 		.word	1
 3489 0220 454E4700 		.ascii	"ENG\000"
 3490 0224 00000000 		.space	4
 3491 0228 482E6400 		.ascii	"H.d\000"
 3492 022c 00000000 		.space	4
 3493 0230 2C       		.byte	44
 3494 0231 000000   		.space	3
 3495 0234 FFFFFFFF 		.word	-1
 3496 0238 26       		.byte	38
 3497 0239 000000   		.space	3
 3498 023c 03000000 		.word	3
 3499 0240 2D2D0D00 		.ascii	"--\015\000"
 3500 0244 00000000 		.space	4
 3501 0248 2E2F2C00 		.ascii	"./,\000"
 3502 024c 00000000 		.space	4
 3503 0250 2D       		.byte	45
 3504 0251 000000   		.space	3
 3505 0254 FFFFFFFF 		.word	-1
 3506 0258 2E       		.byte	46
 3507 0259 000000   		.space	3
 3508 025c FFFFFFFF 		.word	-1
 3509 0260 43505800 		.ascii	"CPX\000"
 3510 0264 00000000 		.space	4
 3511 0268 00       		.ascii	"\000"
 3512 0269 00000000 		.space	7
 3512      000000
 3513 0270 42415345 		.ascii	"BASE\000"
 3513      00
 3514 0275 00000000 		.space	10
 3514      00000000 
ARM GAS  /tmp/ccG96vrG.s 			page 91


 3514      0000
 3515 027f 00       		.space	1
 3516 0280 0E       		.byte	14
 3517 0281 000000   		.space	3
 3518 0284 01000000 		.word	1
 3519 0288 0E       		.byte	14
 3520 0289 000000   		.space	3
 3521 028c 03000000 		.word	3
 3522 0290 42494E00 		.ascii	"BIN\000"
 3523 0294 00000000 		.space	4
 3524 0298 6E6F7400 		.ascii	"not\000"
 3525 029c 00000000 		.space	4
 3526 02a0 0E       		.byte	14
 3527 02a1 000000   		.space	3
 3528 02a4 02000000 		.word	2
 3529 02a8 13       		.byte	19
 3530 02a9 000000   		.space	3
 3531 02ac 03000000 		.word	3
 3532 02b0 4F435400 		.ascii	"OCT\000"
 3533 02b4 00000000 		.space	4
 3534 02b8 616E6400 		.ascii	"and\000"
 3535 02bc 00000000 		.space	4
 3536 02c0 0F       		.byte	15
 3537 02c1 000000   		.space	3
 3538 02c4 01000000 		.word	1
 3539 02c8 14       		.byte	20
 3540 02c9 000000   		.space	3
 3541 02cc 03000000 		.word	3
 3542 02d0 44454300 		.ascii	"DEC\000"
 3543 02d4 00000000 		.space	4
 3544 02d8 6F7200   		.ascii	"or\000"
 3545 02db 00000000 		.space	5
 3545      00
 3546 02e0 0F       		.byte	15
 3547 02e1 000000   		.space	3
 3548 02e4 02000000 		.word	2
 3549 02e8 15       		.byte	21
 3550 02e9 000000   		.space	3
 3551 02ec 03000000 		.word	3
 3552 02f0 48455800 		.ascii	"HEX\000"
 3553 02f4 00000000 		.space	4
 3554 02f8 786F7200 		.ascii	"xor\000"
 3555 02fc 00000000 		.space	4
 3556 0300 2C       		.byte	44
 3557 0301 000000   		.space	3
 3558 0304 FFFFFFFF 		.word	-1
 3559 0308 16       		.byte	22
 3560 0309 000000   		.space	3
 3561 030c 03000000 		.word	3
 3562 0310 2D2D0D00 		.ascii	"--\015\000"
 3563 0314 00000000 		.space	4
 3564 0318 524D4452 		.ascii	"RMDR\000"
 3564      00
 3565 031d 000000   		.space	3
 3566 0320 2D       		.byte	45
 3567 0321 000000   		.space	3
 3568 0324 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccG96vrG.s 			page 92


 3569 0328 2E       		.byte	46
 3570 0329 000000   		.space	3
 3571 032c FFFFFFFF 		.word	-1
 3572 0330 43505800 		.ascii	"CPX\000"
 3573 0334 00000000 		.space	4
 3574 0338 00       		.ascii	"\000"
 3575 0339 00000000 		.space	7
 3575      000000
 3576 0340 414E474C 		.ascii	"ANGLES\000"
 3576      455300
 3577 0347 00000000 		.space	8
 3577      00000000 
 3578 034f 00       		.space	1
 3579 0350 06       		.byte	6
 3580 0351 000000   		.space	3
 3581 0354 02000000 		.word	2
 3582 0358 04       		.byte	4
 3583 0359 000000   		.space	3
 3584 035c 01000000 		.word	1
 3585 0360 44454700 		.ascii	"DEG\000"
 3586 0364 00000000 		.space	4
 3587 0368 500D5200 		.ascii	"P\015R\000"
 3588 036c 00000000 		.space	4
 3589 0370 07       		.byte	7
 3590 0371 000000   		.space	3
 3591 0374 02000000 		.word	2
 3592 0378 04       		.byte	4
 3593 0379 000000   		.space	3
 3594 037c 02000000 		.word	2
 3595 0380 52414400 		.ascii	"RAD\000"
 3596 0384 00000000 		.space	4
 3597 0388 520D5000 		.ascii	"R\015P\000"
 3598 038c 00000000 		.space	4
 3599 0390 08       		.byte	8
 3600 0391 000000   		.space	3
 3601 0394 02000000 		.word	2
 3602 0398 00       		.byte	0
 3603 0399 000000   		.space	3
 3604 039c 01000000 		.word	1
 3605 03a0 47524144 		.ascii	"GRAD\000"
 3605      00
 3606 03a5 000000   		.space	3
 3607 03a8 48595000 		.ascii	"HYP\000"
 3608 03ac 00000000 		.space	4
 3609 03b0 06       		.byte	6
 3610 03b1 000000   		.space	3
 3611 03b4 01000000 		.word	1
 3612 03b8 07       		.byte	7
 3613 03b9 000000   		.space	3
 3614 03bc 01000000 		.word	1
 3615 03c0 482E4D53 		.ascii	"H.MS\000"
 3615      00
 3616 03c5 000000   		.space	3
 3617 03c8 482E6400 		.ascii	"H.d\000"
 3618 03cc 00000000 		.space	4
 3619 03d0 2C       		.byte	44
 3620 03d1 000000   		.space	3
ARM GAS  /tmp/ccG96vrG.s 			page 93


 3621 03d4 FFFFFFFF 		.word	-1
 3622 03d8 00       		.byte	0
 3623 03d9 000000   		.space	3
 3624 03dc 02000000 		.word	2
 3625 03e0 2D2D0D00 		.ascii	"--\015\000"
 3626 03e4 00000000 		.space	4
 3627 03e8 4859509D 		.ascii	"HYP\235\000"
 3627      00
 3628 03ed 000000   		.space	3
 3629 03f0 2D       		.byte	45
 3630 03f1 000000   		.space	3
 3631 03f4 FFFFFFFF 		.word	-1
 3632 03f8 2E       		.byte	46
 3633 03f9 000000   		.space	3
 3634 03fc FFFFFFFF 		.word	-1
 3635 0400 43505800 		.ascii	"CPX\000"
 3636 0404 00000000 		.space	4
 3637 0408 00       		.ascii	"\000"
 3638 0409 00000000 		.space	7
 3638      000000
 3639 0410 4D495343 		.ascii	"MISC\000"
 3639      00
 3640 0415 00000000 		.space	10
 3640      00000000 
 3640      0000
 3641 041f 00       		.space	1
 3642 0420 25       		.byte	37
 3643 0421 000000   		.space	3
 3644 0424 01000000 		.word	1
 3645 0428 14       		.byte	20
 3646 0429 000000   		.space	3
 3647 042c 01000000 		.word	1
 3648 0430 7C587C00 		.ascii	"|X|\000"
 3649 0434 00000000 		.space	4
 3650 0438 329C00   		.ascii	"2\234\000"
 3651 043b 00000000 		.space	5
 3651      00
 3652 0440 25       		.byte	37
 3653 0441 000000   		.space	3
 3654 0444 02000000 		.word	2
 3655 0448 14       		.byte	20
 3656 0449 000000   		.space	3
 3657 044c 02000000 		.word	2
 3658 0450 524E4400 		.ascii	"RND\000"
 3659 0454 00000000 		.space	4
 3660 0458 4C6F67BA 		.ascii	"Log\272\000"
 3660      00
 3661 045d 000000   		.space	3
 3662 0460 26       		.byte	38
 3663 0461 000000   		.space	3
 3664 0464 01000000 		.word	1
 3665 0468 15       		.byte	21
 3666 0469 000000   		.space	3
 3667 046c 02000000 		.word	2
 3668 0470 49506172 		.ascii	"IPart\000"
 3668      7400
 3669 0476 0000     		.space	2
ARM GAS  /tmp/ccG96vrG.s 			page 94


 3670 0478 4C6F678B 		.ascii	"Log\213\000"
 3670      00
 3671 047d 000000   		.space	3
 3672 0480 26       		.byte	38
 3673 0481 000000   		.space	3
 3674 0484 02000000 		.word	2
 3675 0488 16       		.byte	22
 3676 0489 000000   		.space	3
 3677 048c 02000000 		.word	2
 3678 0490 46506172 		.ascii	"FPart\000"
 3678      7400
 3679 0496 0000     		.space	2
 3680 0498 7C7C656C 		.ascii	"||el\000"
 3680      00
 3681 049d 000000   		.space	3
 3682 04a0 2C       		.byte	44
 3683 04a1 000000   		.space	3
 3684 04a4 FFFFFFFF 		.word	-1
 3685 04a8 22       		.byte	34
 3686 04a9 000000   		.space	3
 3687 04ac 02000000 		.word	2
 3688 04b0 2D2D0D00 		.ascii	"--\015\000"
 3689 04b4 00000000 		.space	4
 3690 04b8 832500   		.ascii	"\203%\000"
 3691 04bb 00000000 		.space	5
 3691      00
 3692 04c0 2D       		.byte	45
 3693 04c1 000000   		.space	3
 3694 04c4 FFFFFFFF 		.word	-1
 3695 04c8 2E       		.byte	46
 3696 04c9 000000   		.space	3
 3697 04cc FFFFFFFF 		.word	-1
 3698 04d0 43505800 		.ascii	"CPX\000"
 3699 04d4 00000000 		.space	4
 3700 04d8 00       		.ascii	"\000"
 3701 04d9 00000000 		.space	7
 3701      000000
 3702 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 3702      204B6579 
 3702      00
 3703 04e9 00000000 		.space	6
 3703      0000
 3704 04ef 00       		.space	1
 3705 04f0 0D       		.byte	13
 3706 04f1 000000   		.space	3
 3707 04f4 01000000 		.word	1
 3708 04f8 2E       		.byte	46
 3709 04f9 000000   		.space	3
 3710 04fc FFFFFFFF 		.word	-1
 3711 0500 53686F77 		.ascii	"Show\016\000"
 3711      0E00
 3712 0506 0000     		.space	2
 3713 0508 00       		.ascii	"\000"
 3714 0509 00000000 		.space	7
 3714      000000
 3715 0510 0D       		.byte	13
 3716 0511 000000   		.space	3
ARM GAS  /tmp/ccG96vrG.s 			page 95


 3717 0514 02000000 		.word	2
 3718 0518 2E       		.byte	46
 3719 0519 000000   		.space	3
 3720 051c FFFFFFFF 		.word	-1
 3721 0520 53686F77 		.ascii	"Show\015\000"
 3721      0D00
 3722 0526 0000     		.space	2
 3723 0528 00       		.ascii	"\000"
 3724 0529 00000000 		.space	7
 3724      000000
 3725 0530 0D       		.byte	13
 3726 0531 000000   		.space	3
 3727 0534 03000000 		.word	3
 3728 0538 2E       		.byte	46
 3729 0539 000000   		.space	3
 3730 053c FFFFFFFF 		.word	-1
 3731 0540 78173F00 		.ascii	"x\027?\000"
 3732 0544 00000000 		.space	4
 3733 0548 00       		.ascii	"\000"
 3734 0549 00000000 		.space	7
 3734      000000
 3735 0550 2E       		.byte	46
 3736 0551 000000   		.space	3
 3737 0554 FFFFFFFF 		.word	-1
 3738 0558 2E       		.byte	46
 3739 0559 000000   		.space	3
 3740 055c FFFFFFFF 		.word	-1
 3741 0560 00       		.ascii	"\000"
 3742 0561 00000000 		.space	7
 3742      000000
 3743 0568 00       		.ascii	"\000"
 3744 0569 00000000 		.space	7
 3744      000000
 3745 0570 2C       		.byte	44
 3746 0571 000000   		.space	3
 3747 0574 FFFFFFFF 		.word	-1
 3748 0578 2E       		.byte	46
 3749 0579 000000   		.space	3
 3750 057c FFFFFFFF 		.word	-1
 3751 0580 2D2D0D00 		.ascii	"--\015\000"
 3752 0584 00000000 		.space	4
 3753 0588 00       		.ascii	"\000"
 3754 0589 00000000 		.space	7
 3754      000000
 3755 0590 2D       		.byte	45
 3756 0591 000000   		.space	3
 3757 0594 FFFFFFFF 		.word	-1
 3758 0598 2E       		.byte	46
 3759 0599 000000   		.space	3
 3760 059c FFFFFFFF 		.word	-1
 3761 05a0 43505800 		.ascii	"CPX\000"
 3762 05a4 00000000 		.space	4
 3763 05a8 00       		.ascii	"\000"
 3764 05a9 00000000 		.space	7
 3764      000000
 3765 05b0 50726F67 		.ascii	"Program\000"
 3765      72616D00 
ARM GAS  /tmp/ccG96vrG.s 			page 96


 3766 05b8 00000000 		.space	7
 3766      000000
 3767 05bf 00       		.space	1
 3768 05c0 27       		.byte	39
 3769 05c1 000000   		.space	3
 3770 05c4 01000000 		.word	1
 3771 05c8 28       		.byte	40
 3772 05c9 000000   		.space	3
 3773 05cc 01000000 		.word	1
 3774 05d0 4C424C00 		.ascii	"LBL\000"
 3775 05d4 00000000 		.space	4
 3776 05d8 44534500 		.ascii	"DSE\000"
 3777 05dc 00000000 		.space	4
 3778 05e0 27       		.byte	39
 3779 05e1 000000   		.space	3
 3780 05e4 02000000 		.word	2
 3781 05e8 28       		.byte	40
 3782 05e9 000000   		.space	3
 3783 05ec 02000000 		.word	2
 3784 05f0 52544E00 		.ascii	"RTN\000"
 3785 05f4 00000000 		.space	4
 3786 05f8 49534700 		.ascii	"ISG\000"
 3787 05fc 00000000 		.space	4
 3788 0600 25       		.byte	37
 3789 0601 000000   		.space	3
 3790 0604 03000000 		.word	3
 3791 0608 2E       		.byte	46
 3792 0609 000000   		.space	3
 3793 060c FFFFFFFF 		.word	-1
 3794 0610 50617573 		.ascii	"Pause\000"
 3794      6500
 3795 0616 0000     		.space	2
 3796 0618 00       		.ascii	"\000"
 3797 0619 00000000 		.space	7
 3797      000000
 3798 0620 12       		.byte	18
 3799 0621 000000   		.space	3
 3800 0624 03000000 		.word	3
 3801 0628 2E       		.byte	46
 3802 0629 000000   		.space	3
 3803 062c FFFFFFFF 		.word	-1
 3804 0630 47544F00 		.ascii	"GTO\000"
 3805 0634 00000000 		.space	4
 3806 0638 00       		.ascii	"\000"
 3807 0639 00000000 		.space	7
 3807      000000
 3808 0640 2C       		.byte	44
 3809 0641 000000   		.space	3
 3810 0644 FFFFFFFF 		.word	-1
 3811 0648 2E       		.byte	46
 3812 0649 000000   		.space	3
 3813 064c FFFFFFFF 		.word	-1
 3814 0650 2D2D0D00 		.ascii	"--\015\000"
 3815 0654 00000000 		.space	4
 3816 0658 00       		.ascii	"\000"
 3817 0659 00000000 		.space	7
 3817      000000
ARM GAS  /tmp/ccG96vrG.s 			page 97


 3818 0660 2D       		.byte	45
 3819 0661 000000   		.space	3
 3820 0664 FFFFFFFF 		.word	-1
 3821 0668 2E       		.byte	46
 3822 0669 000000   		.space	3
 3823 066c FFFFFFFF 		.word	-1
 3824 0670 43505800 		.ascii	"CPX\000"
 3825 0674 00000000 		.space	4
 3826 0678 00       		.ascii	"\000"
 3827 0679 00000000 		.space	7
 3827      000000
 3828 0680 53657475 		.ascii	"Setup 1\000"
 3828      70203100 
 3829 0688 00000000 		.space	7
 3829      000000
 3830 068f 00       		.space	1
 3831 0690 30       		.byte	48
 3832 0691 000000   		.space	3
 3833 0694 00000000 		.word	0
 3834 0698 2E       		.byte	46
 3835 0699 000000   		.space	3
 3836 069c FFFFFFFF 		.word	-1
 3837 06a0 53797374 		.ascii	"System\000"
 3837      656D00
 3838 06a7 00       		.space	1
 3839 06a8 00       		.ascii	"\000"
 3840 06a9 00000000 		.space	7
 3840      000000
 3841 06b0 31       		.byte	49
 3842 06b1 000000   		.space	3
 3843 06b4 09000000 		.word	9
 3844 06b8 2E       		.byte	46
 3845 06b9 000000   		.space	3
 3846 06bc FFFFFFFF 		.word	-1
 3847 06c0 48454C50 		.ascii	"HELP\000"
 3847      00
 3848 06c5 000000   		.space	3
 3849 06c8 00       		.ascii	"\000"
 3850 06c9 00000000 		.space	7
 3850      000000
 3851 06d0 31       		.byte	49
 3852 06d1 000000   		.space	3
 3853 06d4 02000000 		.word	2
 3854 06d8 31       		.byte	49
 3855 06d9 000000   		.space	3
 3856 06dc 06000000 		.word	6
 3857 06e0 4F6E5354 		.ascii	"OnSTO\000"
 3857      4F00
 3858 06e6 0000     		.space	2
 3859 06e8 53765241 		.ascii	"SvRAM\000"
 3859      4D00
 3860 06ee 0000     		.space	2
 3861 06f0 31       		.byte	49
 3862 06f1 000000   		.space	3
 3863 06f4 03000000 		.word	3
 3864 06f8 31       		.byte	49
 3865 06f9 000000   		.space	3
ARM GAS  /tmp/ccG96vrG.s 			page 98


 3866 06fc 07000000 		.word	7
 3867 0700 4F6E5243 		.ascii	"OnRCL\000"
 3867      4C00
 3868 0706 0000     		.space	2
 3869 0708 4C645241 		.ascii	"LdRAM\000"
 3869      4D00
 3870 070e 0000     		.space	2
 3871 0710 2C       		.byte	44
 3872 0711 000000   		.space	3
 3873 0714 FFFFFFFF 		.word	-1
 3874 0718 2E       		.byte	46
 3875 0719 000000   		.space	3
 3876 071c FFFFFFFF 		.word	-1
 3877 0720 2D2D0D00 		.ascii	"--\015\000"
 3878 0724 00000000 		.space	4
 3879 0728 00       		.ascii	"\000"
 3880 0729 00000000 		.space	7
 3880      000000
 3881 0730 2D       		.byte	45
 3882 0731 000000   		.space	3
 3883 0734 FFFFFFFF 		.word	-1
 3884 0738 2E       		.byte	46
 3885 0739 000000   		.space	3
 3886 073c FFFFFFFF 		.word	-1
 3887 0740 43505800 		.ascii	"CPX\000"
 3888 0744 00000000 		.space	4
 3889 0748 00       		.ascii	"\000"
 3890 0749 00000000 		.space	7
 3890      000000
 3891 0750 4172726F 		.ascii	"Arrow\000"
 3891      7700
 3892 0756 00000000 		.space	9
 3892      00000000 
 3892      00
 3893 075f 00       		.space	1
 3894 0760 0E       		.byte	14
 3895 0761 000000   		.space	3
 3896 0764 01000000 		.word	1
 3897 0768 06       		.byte	6
 3898 0769 000000   		.space	3
 3899 076c 02000000 		.word	2
 3900 0770 42696E00 		.ascii	"Bin\000"
 3901 0774 00000000 		.space	4
 3902 0778 44454700 		.ascii	"DEG\000"
 3903 077c 00000000 		.space	4
 3904 0780 0E       		.byte	14
 3905 0781 000000   		.space	3
 3906 0784 02000000 		.word	2
 3907 0788 07       		.byte	7
 3908 0789 000000   		.space	3
 3909 078c 02000000 		.word	2
 3910 0790 4F637400 		.ascii	"Oct\000"
 3911 0794 00000000 		.space	4
 3912 0798 52414400 		.ascii	"RAD\000"
 3913 079c 00000000 		.space	4
 3914 07a0 0F       		.byte	15
 3915 07a1 000000   		.space	3
ARM GAS  /tmp/ccG96vrG.s 			page 99


 3916 07a4 01000000 		.word	1
 3917 07a8 08       		.byte	8
 3918 07a9 000000   		.space	3
 3919 07ac 02000000 		.word	2
 3920 07b0 44656300 		.ascii	"Dec\000"
 3921 07b4 00000000 		.space	4
 3922 07b8 47726164 		.ascii	"Grad\000"
 3922      00
 3923 07bd 000000   		.space	3
 3924 07c0 0F       		.byte	15
 3925 07c1 000000   		.space	3
 3926 07c4 02000000 		.word	2
 3927 07c8 06       		.byte	6
 3928 07c9 000000   		.space	3
 3929 07cc 01000000 		.word	1
 3930 07d0 48657800 		.ascii	"Hex\000"
 3931 07d4 00000000 		.space	4
 3932 07d8 32484D53 		.ascii	"2HMS\000"
 3932      00
 3933 07dd 000000   		.space	3
 3934 07e0 2C       		.byte	44
 3935 07e1 000000   		.space	3
 3936 07e4 FFFFFFFF 		.word	-1
 3937 07e8 07       		.byte	7
 3938 07e9 000000   		.space	3
 3939 07ec 01000000 		.word	1
 3940 07f0 2D2D0D00 		.ascii	"--\015\000"
 3941 07f4 00000000 		.space	4
 3942 07f8 484D5332 		.ascii	"HMS2\000"
 3942      00
 3943 07fd 000000   		.space	3
 3944 0800 2D       		.byte	45
 3945 0801 000000   		.space	3
 3946 0804 FFFFFFFF 		.word	-1
 3947 0808 2E       		.byte	46
 3948 0809 000000   		.space	3
 3949 080c FFFFFFFF 		.word	-1
 3950 0810 43505800 		.ascii	"CPX\000"
 3951 0814 00000000 		.space	4
 3952 0818 00       		.ascii	"\000"
 3953 0819 00000000 		.space	7
 3953      000000
 3954 0820 466C6167 		.ascii	"Flags\000"
 3954      7300
 3955 0826 00000000 		.space	9
 3955      00000000 
 3955      00
 3956 082f 00       		.space	1
 3957 0830 1E       		.byte	30
 3958 0831 000000   		.space	3
 3959 0834 01000000 		.word	1
 3960 0838 2E       		.byte	46
 3961 0839 000000   		.space	3
 3962 083c FFFFFFFF 		.word	-1
 3963 0840 53465F00 		.ascii	"SF_\000"
 3964 0844 00000000 		.space	4
 3965 0848 00       		.ascii	"\000"
ARM GAS  /tmp/ccG96vrG.s 			page 100


 3966 0849 00000000 		.space	7
 3966      000000
 3967 0850 1E       		.byte	30
 3968 0851 000000   		.space	3
 3969 0854 02000000 		.word	2
 3970 0858 2E       		.byte	46
 3971 0859 000000   		.space	3
 3972 085c FFFFFFFF 		.word	-1
 3973 0860 43465F00 		.ascii	"CF_\000"
 3974 0864 00000000 		.space	4
 3975 0868 00       		.ascii	"\000"
 3976 0869 00000000 		.space	7
 3976      000000
 3977 0870 1F       		.byte	31
 3978 0871 000000   		.space	3
 3979 0874 01000000 		.word	1
 3980 0878 2E       		.byte	46
 3981 0879 000000   		.space	3
 3982 087c FFFFFFFF 		.word	-1
 3983 0880 783D3F00 		.ascii	"x=?\000"
 3984 0884 00000000 		.space	4
 3985 0888 00       		.ascii	"\000"
 3986 0889 00000000 		.space	7
 3986      000000
 3987 0890 1F       		.byte	31
 3988 0891 000000   		.space	3
 3989 0894 02000000 		.word	2
 3990 0898 2E       		.byte	46
 3991 0899 000000   		.space	3
 3992 089c FFFFFFFF 		.word	-1
 3993 08a0 780B3F00 		.ascii	"x\013?\000"
 3994 08a4 00000000 		.space	4
 3995 08a8 00       		.ascii	"\000"
 3996 08a9 00000000 		.space	7
 3996      000000
 3997 08b0 2C       		.byte	44
 3998 08b1 000000   		.space	3
 3999 08b4 FFFFFFFF 		.word	-1
 4000 08b8 2E       		.byte	46
 4001 08b9 000000   		.space	3
 4002 08bc FFFFFFFF 		.word	-1
 4003 08c0 2D2D0D00 		.ascii	"--\015\000"
 4004 08c4 00000000 		.space	4
 4005 08c8 00       		.ascii	"\000"
 4006 08c9 00000000 		.space	7
 4006      000000
 4007 08d0 2D       		.byte	45
 4008 08d1 000000   		.space	3
 4009 08d4 FFFFFFFF 		.word	-1
 4010 08d8 2E       		.byte	46
 4011 08d9 000000   		.space	3
 4012 08dc FFFFFFFF 		.word	-1
 4013 08e0 43505800 		.ascii	"CPX\000"
 4014 08e4 00000000 		.space	4
 4015 08e8 00       		.ascii	"\000"
 4016 08e9 00000000 		.space	7
 4016      000000
ARM GAS  /tmp/ccG96vrG.s 			page 101


 4017 08f0 50726F62 		.ascii	"Probability\000"
 4017      6162696C 
 4017      69747900 
 4018 08fc 000000   		.space	3
 4019 08ff 00       		.space	1
 4020 0900 18       		.byte	24
 4021 0901 000000   		.space	3
 4022 0904 03000000 		.word	3
 4023 0908 19       		.byte	25
 4024 0909 000000   		.space	3
 4025 090c 01000000 		.word	1
 4026 0910 46616374 		.ascii	"Fact!\000"
 4026      2100
 4027 0916 0000     		.space	2
 4028 0918 9400     		.ascii	"\224\000"
 4029 091a 00000000 		.space	6
 4029      0000
 4030 0920 18       		.byte	24
 4031 0921 000000   		.space	3
 4032 0924 01000000 		.word	1
 4033 0928 19       		.byte	25
 4034 0929 000000   		.space	3
 4035 092c 02000000 		.word	2
 4036 0930 43792C78 		.ascii	"Cy,x\000"
 4036      00
 4037 0935 000000   		.space	3
 4038 0938 949D00   		.ascii	"\224\235\000"
 4039 093b 00000000 		.space	5
 4039      00
 4040 0940 18       		.byte	24
 4041 0941 000000   		.space	3
 4042 0944 02000000 		.word	2
 4043 0948 2E       		.byte	46
 4044 0949 000000   		.space	3
 4045 094c FFFFFFFF 		.word	-1
 4046 0950 50792C78 		.ascii	"Py,x\000"
 4046      00
 4047 0955 000000   		.space	3
 4048 0958 00       		.ascii	"\000"
 4049 0959 00000000 		.space	7
 4049      000000
 4050 0960 08       		.byte	8
 4051 0961 000000   		.space	3
 4052 0964 01000000 		.word	1
 4053 0968 2E       		.byte	46
 4054 0969 000000   		.space	3
 4055 096c FFFFFFFF 		.word	-1
 4056 0970 52414E23 		.ascii	"RAN#\000"
 4056      00
 4057 0975 000000   		.space	3
 4058 0978 00       		.ascii	"\000"
 4059 0979 00000000 		.space	7
 4059      000000
 4060 0980 2C       		.byte	44
 4061 0981 000000   		.space	3
 4062 0984 FFFFFFFF 		.word	-1
 4063 0988 2E       		.byte	46
ARM GAS  /tmp/ccG96vrG.s 			page 102


 4064 0989 000000   		.space	3
 4065 098c FFFFFFFF 		.word	-1
 4066 0990 2D2D0D00 		.ascii	"--\015\000"
 4067 0994 00000000 		.space	4
 4068 0998 00       		.ascii	"\000"
 4069 0999 00000000 		.space	7
 4069      000000
 4070 09a0 2D       		.byte	45
 4071 09a1 000000   		.space	3
 4072 09a4 FFFFFFFF 		.word	-1
 4073 09a8 2E       		.byte	46
 4074 09a9 000000   		.space	3
 4075 09ac FFFFFFFF 		.word	-1
 4076 09b0 43505800 		.ascii	"CPX\000"
 4077 09b4 00000000 		.space	4
 4078 09b8 00       		.ascii	"\000"
 4079 09b9 00000000 		.space	7
 4079      000000
 4080 09c0 53746174 		.ascii	"Statistics\000"
 4080      69737469 
 4080      637300
 4081 09cb 00000000 		.space	4
 4082 09cf 00       		.space	1
 4083 09d0 1A       		.byte	26
 4084 09d1 000000   		.space	3
 4085 09d4 01000000 		.word	1
 4086 09d8 1B       		.byte	27
 4087 09d9 000000   		.space	3
 4088 09dc 03000000 		.word	3
 4089 09e0 58626172 		.ascii	"Xbar\000"
 4089      00
 4090 09e5 000000   		.space	3
 4091 09e8 53554D53 		.ascii	"SUMS\000"
 4091      00
 4092 09ed 000000   		.space	3
 4093 09f0 1B       		.byte	27
 4094 09f1 000000   		.space	3
 4095 09f4 01000000 		.word	1
 4096 09f8 2E       		.byte	46
 4097 09f9 000000   		.space	3
 4098 09fc FFFFFFFF 		.word	-1
 4099 0a00 59686174 		.ascii	"Yhat\000"
 4099      00
 4100 0a05 000000   		.space	3
 4101 0a08 00       		.ascii	"\000"
 4102 0a09 00000000 		.space	7
 4102      000000
 4103 0a10 1A       		.byte	26
 4104 0a11 000000   		.space	3
 4105 0a14 02000000 		.word	2
 4106 0a18 2E       		.byte	46
 4107 0a19 000000   		.space	3
 4108 0a1c FFFFFFFF 		.word	-1
 4109 0a20 7300     		.ascii	"s\000"
 4110 0a22 00000000 		.space	6
 4110      0000
 4111 0a28 00       		.ascii	"\000"
ARM GAS  /tmp/ccG96vrG.s 			page 103


 4112 0a29 00000000 		.space	7
 4112      000000
 4113 0a30 1B       		.byte	27
 4114 0a31 000000   		.space	3
 4115 0a34 02000000 		.word	2
 4116 0a38 2E       		.byte	46
 4117 0a39 000000   		.space	3
 4118 0a3c FFFFFFFF 		.word	-1
 4119 0a40 7200     		.ascii	"r\000"
 4120 0a42 00000000 		.space	6
 4120      0000
 4121 0a48 00       		.ascii	"\000"
 4122 0a49 00000000 		.space	7
 4122      000000
 4123 0a50 2C       		.byte	44
 4124 0a51 000000   		.space	3
 4125 0a54 FFFFFFFF 		.word	-1
 4126 0a58 2E       		.byte	46
 4127 0a59 000000   		.space	3
 4128 0a5c FFFFFFFF 		.word	-1
 4129 0a60 2D2D0D00 		.ascii	"--\015\000"
 4130 0a64 00000000 		.space	4
 4131 0a68 00       		.ascii	"\000"
 4132 0a69 00000000 		.space	7
 4132      000000
 4133 0a70 2D       		.byte	45
 4134 0a71 000000   		.space	3
 4135 0a74 FFFFFFFF 		.word	-1
 4136 0a78 2E       		.byte	46
 4137 0a79 000000   		.space	3
 4138 0a7c FFFFFFFF 		.word	-1
 4139 0a80 43505800 		.ascii	"CPX\000"
 4140 0a84 00000000 		.space	4
 4141 0a88 00       		.ascii	"\000"
 4142 0a89 00000000 		.space	7
 4142      000000
 4143 0a90 53657475 		.ascii	"Setup 2\000"
 4143      70203200 
 4144 0a98 00000000 		.space	7
 4144      000000
 4145 0a9f 00       		.space	1
 4146 0aa0 31       		.byte	49
 4147 0aa1 000000   		.space	3
 4148 0aa4 04000000 		.word	4
 4149 0aa8 2E       		.byte	46
 4150 0aa9 000000   		.space	3
 4151 0aac FFFFFFFF 		.word	-1
 4152 0ab0 53764C49 		.ascii	"SvLIB\000"
 4152      4200
 4153 0ab6 0000     		.space	2
 4154 0ab8 00       		.ascii	"\000"
 4155 0ab9 00000000 		.space	7
 4155      000000
 4156 0ac0 31       		.byte	49
 4157 0ac1 000000   		.space	3
 4158 0ac4 05000000 		.word	5
 4159 0ac8 2E       		.byte	46
ARM GAS  /tmp/ccG96vrG.s 			page 104


 4160 0ac9 000000   		.space	3
 4161 0acc FFFFFFFF 		.word	-1
 4162 0ad0 4C644C49 		.ascii	"LdLIB\000"
 4162      4200
 4163 0ad6 0000     		.space	2
 4164 0ad8 00       		.ascii	"\000"
 4165 0ad9 00000000 		.space	7
 4165      000000
 4166 0ae0 31       		.byte	49
 4167 0ae1 000000   		.space	3
 4168 0ae4 0A000000 		.word	10
 4169 0ae8 2E       		.byte	46
 4170 0ae9 000000   		.space	3
 4171 0aec FFFFFFFF 		.word	-1
 4172 0af0 53764350 		.ascii	"SvCPRG\000"
 4172      524700
 4173 0af7 00       		.space	1
 4174 0af8 00       		.ascii	"\000"
 4175 0af9 00000000 		.space	7
 4175      000000
 4176 0b00 31       		.byte	49
 4177 0b01 000000   		.space	3
 4178 0b04 08000000 		.word	8
 4179 0b08 2E       		.byte	46
 4180 0b09 000000   		.space	3
 4181 0b0c FFFFFFFF 		.word	-1
 4182 0b10 4C645052 		.ascii	"LdPRG\000"
 4182      4700
 4183 0b16 0000     		.space	2
 4184 0b18 00       		.ascii	"\000"
 4185 0b19 00000000 		.space	7
 4185      000000
 4186 0b20 2C       		.byte	44
 4187 0b21 000000   		.space	3
 4188 0b24 FFFFFFFF 		.word	-1
 4189 0b28 2E       		.byte	46
 4190 0b29 000000   		.space	3
 4191 0b2c FFFFFFFF 		.word	-1
 4192 0b30 2D2D0D00 		.ascii	"--\015\000"
 4193 0b34 00000000 		.space	4
 4194 0b38 00       		.ascii	"\000"
 4195 0b39 00000000 		.space	7
 4195      000000
 4196 0b40 2D       		.byte	45
 4197 0b41 000000   		.space	3
 4198 0b44 FFFFFFFF 		.word	-1
 4199 0b48 2E       		.byte	46
 4200 0b49 000000   		.space	3
 4201 0b4c FFFFFFFF 		.word	-1
 4202 0b50 43505800 		.ascii	"CPX\000"
 4203 0b54 00000000 		.space	4
 4204 0b58 00       		.ascii	"\000"
 4205 0b59 00000000 		.space	7
 4205      000000
 4206 0b60 496E7465 		.ascii	"Integ/Sum/Prod\000"
 4206      672F5375 
 4206      6D2F5072 
ARM GAS  /tmp/ccG96vrG.s 			page 105


 4206      6F6400
 4207 0b6f 00       		.space	1
 4208 0b70 20       		.byte	32
 4209 0b71 000000   		.space	3
 4210 0b74 01000000 		.word	1
 4211 0b78 2E       		.byte	46
 4212 0b79 000000   		.space	3
 4213 0b7c FFFFFFFF 		.word	-1
 4214 0b80 534C5600 		.ascii	"SLV\000"
 4215 0b84 00000000 		.space	4
 4216 0b88 00       		.ascii	"\000"
 4217 0b89 00000000 		.space	7
 4217      000000
 4218 0b90 20       		.byte	32
 4219 0b91 000000   		.space	3
 4220 0b94 02000000 		.word	2
 4221 0b98 2E       		.byte	46
 4222 0b99 000000   		.space	3
 4223 0b9c FFFFFFFF 		.word	-1
 4224 0ba0 04206478 		.ascii	"\004 dx\000"
 4224      00
 4225 0ba5 000000   		.space	3
 4226 0ba8 00       		.ascii	"\000"
 4227 0ba9 00000000 		.space	7
 4227      000000
 4228 0bb0 21       		.byte	33
 4229 0bb1 000000   		.space	3
 4230 0bb4 01000000 		.word	1
 4231 0bb8 2E       		.byte	46
 4232 0bb9 000000   		.space	3
 4233 0bbc FFFFFFFF 		.word	-1
 4234 0bc0 53554D00 		.ascii	"SUM\000"
 4235 0bc4 00000000 		.space	4
 4236 0bc8 00       		.ascii	"\000"
 4237 0bc9 00000000 		.space	7
 4237      000000
 4238 0bd0 21       		.byte	33
 4239 0bd1 000000   		.space	3
 4240 0bd4 02000000 		.word	2
 4241 0bd8 2E       		.byte	46
 4242 0bd9 000000   		.space	3
 4243 0bdc FFFFFFFF 		.word	-1
 4244 0be0 50524F44 		.ascii	"PROD\000"
 4244      00
 4245 0be5 000000   		.space	3
 4246 0be8 00       		.ascii	"\000"
 4247 0be9 00000000 		.space	7
 4247      000000
 4248 0bf0 2C       		.byte	44
 4249 0bf1 000000   		.space	3
 4250 0bf4 FFFFFFFF 		.word	-1
 4251 0bf8 2E       		.byte	46
 4252 0bf9 000000   		.space	3
 4253 0bfc FFFFFFFF 		.word	-1
 4254 0c00 2D2D0D00 		.ascii	"--\015\000"
 4255 0c04 00000000 		.space	4
 4256 0c08 00       		.ascii	"\000"
ARM GAS  /tmp/ccG96vrG.s 			page 106


 4257 0c09 00000000 		.space	7
 4257      000000
 4258 0c10 2D       		.byte	45
 4259 0c11 000000   		.space	3
 4260 0c14 FFFFFFFF 		.word	-1
 4261 0c18 2E       		.byte	46
 4262 0c19 000000   		.space	3
 4263 0c1c FFFFFFFF 		.word	-1
 4264 0c20 43505800 		.ascii	"CPX\000"
 4265 0c24 00000000 		.space	4
 4266 0c28 00       		.ascii	"\000"
 4267 0c29 00000000 		.space	7
 4267      000000
 4268              		.section	.rodata.mapping_alpha.10869,"a"
 4269              		.align	2
 4270              		.set	.LANCHOR11,. + 0
 4273              	mapping_alpha.10869:
 4274 0000 63       		.byte	99
 4275 0001 000000   		.space	3
 4276 0004 FFFFFFFF 		.word	-1
 4277 0008 00       		.byte	0
 4278 0009 000000   		.space	3
 4279 000c FFFFFFFF 		.word	-1
 4280 0010 01       		.byte	1
 4281 0011 000000   		.space	3
 4282 0014 FFFFFFFF 		.word	-1
 4283 0018 02       		.byte	2
 4284 0019 000000   		.space	3
 4285 001c FFFFFFFF 		.word	-1
 4286 0020 03       		.byte	3
 4287 0021 000000   		.space	3
 4288 0024 FFFFFFFF 		.word	-1
 4289 0028 04       		.byte	4
 4290 0029 000000   		.space	3
 4291 002c FFFFFFFF 		.word	-1
 4292 0030 05       		.byte	5
 4293 0031 000000   		.space	3
 4294 0034 FFFFFFFF 		.word	-1
 4295 0038 06       		.byte	6
 4296 0039 000000   		.space	3
 4297 003c FFFFFFFF 		.word	-1
 4298 0040 07       		.byte	7
 4299 0041 000000   		.space	3
 4300 0044 FFFFFFFF 		.word	-1
 4301 0048 08       		.byte	8
 4302 0049 000000   		.space	3
 4303 004c FFFFFFFF 		.word	-1
 4304 0050 09       		.byte	9
 4305 0051 000000   		.space	3
 4306 0054 FFFFFFFF 		.word	-1
 4307 0058 0A       		.byte	10
 4308 0059 000000   		.space	3
 4309 005c FFFFFFFF 		.word	-1
 4310 0060 0B       		.byte	11
 4311 0061 000000   		.space	3
 4312 0064 FFFFFFFF 		.word	-1
 4313 0068 0C       		.byte	12
ARM GAS  /tmp/ccG96vrG.s 			page 107


 4314 0069 000000   		.space	3
 4315 006c FFFFFFFF 		.word	-1
 4316 0070 0D       		.byte	13
 4317 0071 000000   		.space	3
 4318 0074 FFFFFFFF 		.word	-1
 4319 0078 0E       		.byte	14
 4320 0079 000000   		.space	3
 4321 007c FFFFFFFF 		.word	-1
 4322 0080 0F       		.byte	15
 4323 0081 000000   		.space	3
 4324 0084 FFFFFFFF 		.word	-1
 4325 0088 10       		.byte	16
 4326 0089 000000   		.space	3
 4327 008c FFFFFFFF 		.word	-1
 4328 0090 12       		.byte	18
 4329 0091 000000   		.space	3
 4330 0094 FFFFFFFF 		.word	-1
 4331 0098 13       		.byte	19
 4332 0099 000000   		.space	3
 4333 009c FFFFFFFF 		.word	-1
 4334 00a0 14       		.byte	20
 4335 00a1 000000   		.space	3
 4336 00a4 FFFFFFFF 		.word	-1
 4337 00a8 15       		.byte	21
 4338 00a9 000000   		.space	3
 4339 00ac FFFFFFFF 		.word	-1
 4340 00b0 16       		.byte	22
 4341 00b1 000000   		.space	3
 4342 00b4 FFFFFFFF 		.word	-1
 4343 00b8 18       		.byte	24
 4344 00b9 000000   		.space	3
 4345 00bc FFFFFFFF 		.word	-1
 4346 00c0 19       		.byte	25
 4347 00c1 000000   		.space	3
 4348 00c4 FFFFFFFF 		.word	-1
 4349 00c8 1A       		.byte	26
 4350 00c9 000000   		.space	3
 4351 00cc FFFFFFFF 		.word	-1
 4352 00d0 1B       		.byte	27
 4353 00d1 000000   		.space	3
 4354 00d4 FFFFFFFF 		.word	-1
 4355 00d8 1C       		.byte	28
 4356 00d9 000000   		.space	3
 4357 00dc FFFFFFFF 		.word	-1
 4358 00e0 1E       		.byte	30
 4359 00e1 000000   		.space	3
 4360 00e4 FFFFFFFF 		.word	-1
 4361 00e8 1F       		.byte	31
 4362 00e9 000000   		.space	3
 4363 00ec FFFFFFFF 		.word	-1
 4364 00f0 20       		.byte	32
 4365 00f1 000000   		.space	3
 4366 00f4 FFFFFFFF 		.word	-1
 4367 00f8 21       		.byte	33
 4368 00f9 000000   		.space	3
 4369 00fc FFFFFFFF 		.word	-1
 4370 0100 22       		.byte	34
ARM GAS  /tmp/ccG96vrG.s 			page 108


 4371 0101 000000   		.space	3
 4372 0104 FFFFFFFF 		.word	-1
 4373 0108 24       		.byte	36
 4374 0109 000000   		.space	3
 4375 010c FFFFFFFF 		.word	-1
 4376 0110 25       		.byte	37
 4377 0111 000000   		.space	3
 4378 0114 FFFFFFFF 		.word	-1
 4379 0118 26       		.byte	38
 4380 0119 000000   		.space	3
 4381 011c FFFFFFFF 		.word	-1
 4382 0120 27       		.byte	39
 4383 0121 000000   		.space	3
 4384 0124 FFFFFFFF 		.word	-1
 4385 0128 28       		.byte	40
 4386 0129 000000   		.space	3
 4387 012c FFFFFFFF 		.word	-1
 4388 0130 2E       		.byte	46
 4389 0131 000000   		.space	3
 4390 0134 FFFFFFFF 		.word	-1
 4391 0138 2E       		.byte	46
 4392 0139 000000   		.space	3
 4393 013c FFFFFFFF 		.word	-1
 4394 0140 2E       		.byte	46
 4395 0141 000000   		.space	3
 4396 0144 FFFFFFFF 		.word	-1
 4397 0148 2E       		.byte	46
 4398 0149 000000   		.space	3
 4399 014c FFFFFFFF 		.word	-1
 4400 0150 2C       		.byte	44
 4401 0151 000000   		.space	3
 4402 0154 FFFFFFFF 		.word	-1
 4403 0158 2E       		.byte	46
 4404 0159 000000   		.space	3
 4405 015c FFFFFFFF 		.word	-1
 4406 0160 2E       		.byte	46
 4407 0161 000000   		.space	3
 4408 0164 FFFFFFFF 		.word	-1
 4409 0168 2E       		.byte	46
 4410 0169 000000   		.space	3
 4411 016c FFFFFFFF 		.word	-1
 4412 0170 2E       		.byte	46
 4413 0171 000000   		.space	3
 4414 0174 FFFFFFFF 		.word	-1
 4415              		.section	.rodata.mapping_fshift.10867,"a"
 4416              		.align	2
 4417              		.set	.LANCHOR9,. + 0
 4420              	mapping_fshift.10867:
 4421 0000 63       		.byte	99
 4422 0001 000000   		.space	3
 4423 0004 FFFFFFFF 		.word	-1
 4424 0008 22       		.byte	34
 4425 0009 000000   		.space	3
 4426 000c 03000000 		.word	3
 4427 0010 15       		.byte	21
 4428 0011 000000   		.space	3
 4429 0014 01000000 		.word	1
ARM GAS  /tmp/ccG96vrG.s 			page 109


 4430 0018 1C       		.byte	28
 4431 0019 000000   		.space	3
 4432 001c 02000000 		.word	2
 4433 0020 13       		.byte	19
 4434 0021 000000   		.space	3
 4435 0024 01000000 		.word	1
 4436 0028 12       		.byte	18
 4437 0029 000000   		.space	3
 4438 002c 01000000 		.word	1
 4439 0030 12       		.byte	18
 4440 0031 000000   		.space	3
 4441 0034 03000000 		.word	3
 4442 0038 2D       		.byte	45
 4443 0039 000000   		.space	3
 4444 003c 00000000 		.word	0
 4445 0040 22       		.byte	34
 4446 0041 000000   		.space	3
 4447 0044 01000000 		.word	1
 4448 0048 0F       		.byte	15
 4449 0049 000000   		.space	3
 4450 004c 03000000 		.word	3
 4451 0050 01       		.byte	1
 4452 0051 000000   		.space	3
 4453 0054 02000000 		.word	2
 4454 0058 02       		.byte	2
 4455 0059 000000   		.space	3
 4456 005c 02000000 		.word	2
 4457 0060 03       		.byte	3
 4458 0061 000000   		.space	3
 4459 0064 02000000 		.word	2
 4460 0068 0C       		.byte	12
 4461 0069 000000   		.space	3
 4462 006c 01000000 		.word	1
 4463 0070 31       		.byte	49
 4464 0071 000000   		.space	3
 4465 0074 01000000 		.word	1
 4466 0078 2F       		.byte	47
 4467 0079 000000   		.space	3
 4468 007c 04000000 		.word	4
 4469 0080 2F       		.byte	47
 4470 0081 000000   		.space	3
 4471 0084 02000000 		.word	2
 4472 0088 2F       		.byte	47
 4473 0089 000000   		.space	3
 4474 008c 01000000 		.word	1
 4475 0090 18       		.byte	24
 4476 0091 000000   		.space	3
 4477 0094 00000000 		.word	0
 4478 0098 20       		.byte	32
 4479 0099 000000   		.space	3
 4480 009c 01000000 		.word	1
 4481 00a0 2F       		.byte	47
 4482 00a1 000000   		.space	3
 4483 00a4 0E000000 		.word	14
 4484 00a8 1C       		.byte	28
 4485 00a9 000000   		.space	3
 4486 00ac 03000000 		.word	3
ARM GAS  /tmp/ccG96vrG.s 			page 110


 4487 00b0 2F       		.byte	47
 4488 00b1 000000   		.space	3
 4489 00b4 0C000000 		.word	12
 4490 00b8 1E       		.byte	30
 4491 00b9 000000   		.space	3
 4492 00bc 00000000 		.word	0
 4493 00c0 2F       		.byte	47
 4494 00c1 000000   		.space	3
 4495 00c4 03000000 		.word	3
 4496 00c8 04       		.byte	4
 4497 00c9 000000   		.space	3
 4498 00cc 03000000 		.word	3
 4499 00d0 2F       		.byte	47
 4500 00d1 000000   		.space	3
 4501 00d4 0A000000 		.word	10
 4502 00d8 2F       		.byte	47
 4503 00d9 000000   		.space	3
 4504 00dc 0B000000 		.word	11
 4505 00e0 2A       		.byte	42
 4506 00e1 000000   		.space	3
 4507 00e4 00000000 		.word	0
 4508 00e8 2E       		.byte	46
 4509 00e9 000000   		.space	3
 4510 00ec 00000000 		.word	0
 4511 00f0 2E       		.byte	46
 4512 00f1 000000   		.space	3
 4513 00f4 00000000 		.word	0
 4514 00f8 20       		.byte	32
 4515 00f9 000000   		.space	3
 4516 00fc 03000000 		.word	3
 4517 0100 2E       		.byte	46
 4518 0101 000000   		.space	3
 4519 0104 00000000 		.word	0
 4520 0108 24       		.byte	36
 4521 0109 000000   		.space	3
 4522 010c 03000000 		.word	3
 4523 0110 2F       		.byte	47
 4524 0111 000000   		.space	3
 4525 0114 08000000 		.word	8
 4526 0118 0D       		.byte	13
 4527 0119 000000   		.space	3
 4528 011c 01000000 		.word	1
 4529 0120 27       		.byte	39
 4530 0121 000000   		.space	3
 4531 0124 03000000 		.word	3
 4532 0128 06       		.byte	6
 4533 0129 000000   		.space	3
 4534 012c 03000000 		.word	3
 4535 0130 2E       		.byte	46
 4536 0131 000000   		.space	3
 4537 0134 00000000 		.word	0
 4538 0138 2E       		.byte	46
 4539 0139 000000   		.space	3
 4540 013c 00000000 		.word	0
 4541 0140 2E       		.byte	46
 4542 0141 000000   		.space	3
 4543 0144 00000000 		.word	0
ARM GAS  /tmp/ccG96vrG.s 			page 111


 4544 0148 2E       		.byte	46
 4545 0149 000000   		.space	3
 4546 014c 00000000 		.word	0
 4547 0150 2E       		.byte	46
 4548 0151 000000   		.space	3
 4549 0154 00000000 		.word	0
 4550 0158 2E       		.byte	46
 4551 0159 000000   		.space	3
 4552 015c 00000000 		.word	0
 4553 0160 2E       		.byte	46
 4554 0161 000000   		.space	3
 4555 0164 00000000 		.word	0
 4556 0168 2F       		.byte	47
 4557 0169 000000   		.space	3
 4558 016c FFFFFFFF 		.word	-1
 4559 0170 2F       		.byte	47
 4560 0171 000000   		.space	3
 4561 0174 05000000 		.word	5
 4562              		.section	.rodata.mapping_gshift.10868,"a"
 4563              		.align	2
 4564              		.set	.LANCHOR12,. + 0
 4567              	mapping_gshift.10868:
 4568 0000 63       		.byte	99
 4569 0001 000000   		.space	3
 4570 0004 FFFFFFFF 		.word	-1
 4571 0008 28       		.byte	40
 4572 0009 000000   		.space	3
 4573 000c 03000000 		.word	3
 4574 0010 16       		.byte	22
 4575 0011 000000   		.space	3
 4576 0014 01000000 		.word	1
 4577 0018 1C       		.byte	28
 4578 0019 000000   		.space	3
 4579 001c 01000000 		.word	1
 4580 0020 13       		.byte	19
 4581 0021 000000   		.space	3
 4582 0024 02000000 		.word	2
 4583 0028 2E       		.byte	46
 4584 0029 000000   		.space	3
 4585 002c 00000000 		.word	0
 4586 0030 2E       		.byte	46
 4587 0031 000000   		.space	3
 4588 0034 00000000 		.word	0
 4589 0038 2E       		.byte	46
 4590 0039 000000   		.space	3
 4591 003c 00000000 		.word	0
 4592 0040 07       		.byte	7
 4593 0041 000000   		.space	3
 4594 0044 03000000 		.word	3
 4595 0048 08       		.byte	8
 4596 0049 000000   		.space	3
 4597 004c 03000000 		.word	3
 4598 0050 2F       		.byte	47
 4599 0051 000000   		.space	3
 4600 0054 04000000 		.word	4
 4601 0058 2F       		.byte	47
 4602 0059 000000   		.space	3
ARM GAS  /tmp/ccG96vrG.s 			page 112


 4603 005c 04000000 		.word	4
 4604 0060 2F       		.byte	47
 4605 0061 000000   		.space	3
 4606 0064 04000000 		.word	4
 4607 0068 0C       		.byte	12
 4608 0069 000000   		.space	3
 4609 006c 02000000 		.word	2
 4610 0070 2F       		.byte	47
 4611 0071 000000   		.space	3
 4612 0074 06000000 		.word	6
 4613 0078 05       		.byte	5
 4614 0079 000000   		.space	3
 4615 007c 03000000 		.word	3
 4616 0080 2E       		.byte	46
 4617 0081 000000   		.space	3
 4618 0084 00000000 		.word	0
 4619 0088 2E       		.byte	46
 4620 0089 000000   		.space	3
 4621 008c 00000000 		.word	0
 4622 0090 2E       		.byte	46
 4623 0091 000000   		.space	3
 4624 0094 00000000 		.word	0
 4625 0098 2E       		.byte	46
 4626 0099 000000   		.space	3
 4627 009c 00000000 		.word	0
 4628 00a0 2E       		.byte	46
 4629 00a1 000000   		.space	3
 4630 00a4 00000000 		.word	0
 4631 00a8 1B       		.byte	27
 4632 00a9 000000   		.space	3
 4633 00ac 03000000 		.word	3
 4634 00b0 1A       		.byte	26
 4635 00b1 000000   		.space	3
 4636 00b4 03000000 		.word	3
 4637 00b8 2E       		.byte	46
 4638 00b9 000000   		.space	3
 4639 00bc 00000000 		.word	0
 4640 00c0 2E       		.byte	46
 4641 00c1 000000   		.space	3
 4642 00c4 00000000 		.word	0
 4643 00c8 0C       		.byte	12
 4644 00c9 000000   		.space	3
 4645 00cc 03000000 		.word	3
 4646 00d0 1F       		.byte	31
 4647 00d1 000000   		.space	3
 4648 00d4 03000000 		.word	3
 4649 00d8 19       		.byte	25
 4650 00d9 000000   		.space	3
 4651 00dc 03000000 		.word	3
 4652 00e0 2A       		.byte	42
 4653 00e1 000000   		.space	3
 4654 00e4 FFFFFFFF 		.word	-1
 4655 00e8 2E       		.byte	46
 4656 00e9 000000   		.space	3
 4657 00ec 00000000 		.word	0
 4658 00f0 2E       		.byte	46
 4659 00f1 000000   		.space	3
ARM GAS  /tmp/ccG96vrG.s 			page 113


 4660 00f4 00000000 		.word	0
 4661 00f8 21       		.byte	33
 4662 00f9 000000   		.space	3
 4663 00fc 03000000 		.word	3
 4664 0100 2E       		.byte	46
 4665 0101 000000   		.space	3
 4666 0104 00000000 		.word	0
 4667 0108 24       		.byte	36
 4668 0109 000000   		.space	3
 4669 010c 00000000 		.word	0
 4670 0110 2F       		.byte	47
 4671 0111 000000   		.space	3
 4672 0114 0D000000 		.word	13
 4673 0118 2E       		.byte	46
 4674 0119 000000   		.space	3
 4675 011c 00000000 		.word	0
 4676 0120 2F       		.byte	47
 4677 0121 000000   		.space	3
 4678 0124 07000000 		.word	7
 4679 0128 1E       		.byte	30
 4680 0129 000000   		.space	3
 4681 012c 03000000 		.word	3
 4682 0130 2E       		.byte	46
 4683 0131 000000   		.space	3
 4684 0134 00000000 		.word	0
 4685 0138 2E       		.byte	46
 4686 0139 000000   		.space	3
 4687 013c 00000000 		.word	0
 4688 0140 2E       		.byte	46
 4689 0141 000000   		.space	3
 4690 0144 00000000 		.word	0
 4691 0148 2E       		.byte	46
 4692 0149 000000   		.space	3
 4693 014c 00000000 		.word	0
 4694 0150 2E       		.byte	46
 4695 0151 000000   		.space	3
 4696 0154 00000000 		.word	0
 4697 0158 2E       		.byte	46
 4698 0159 000000   		.space	3
 4699 015c 00000000 		.word	0
 4700 0160 2E       		.byte	46
 4701 0161 000000   		.space	3
 4702 0164 00000000 		.word	0
 4703 0168 2E       		.byte	46
 4704 0169 000000   		.space	3
 4705 016c 00000000 		.word	0
 4706 0170 2E       		.byte	46
 4707 0171 000000   		.space	3
 4708 0174 00000000 		.word	0
 4709              		.section	.rodata.mapping_none.10866,"a"
 4710              		.align	2
 4711              		.set	.LANCHOR8,. + 0
 4714              	mapping_none.10866:
 4715 0000 63       		.byte	99
 4716 0001 000000   		.space	3
 4717 0004 FFFFFFFF 		.word	-1
 4718 0008 00       		.byte	0
ARM GAS  /tmp/ccG96vrG.s 			page 114


 4719 0009 000000   		.space	3
 4720 000c 00000000 		.word	0
 4721 0010 01       		.byte	1
 4722 0011 000000   		.space	3
 4723 0014 00000000 		.word	0
 4724 0018 03       		.byte	3
 4725 0019 000000   		.space	3
 4726 001c 00000000 		.word	0
 4727 0020 13       		.byte	19
 4728 0021 000000   		.space	3
 4729 0024 02000000 		.word	2
 4730 0028 12       		.byte	18
 4731 0029 000000   		.space	3
 4732 002c 02000000 		.word	2
 4733 0030 12       		.byte	18
 4734 0031 000000   		.space	3
 4735 0034 00000000 		.word	0
 4736 0038 06       		.byte	6
 4737 0039 000000   		.space	3
 4738 003c 00000000 		.word	0
 4739 0040 07       		.byte	7
 4740 0041 000000   		.space	3
 4741 0044 00000000 		.word	0
 4742 0048 08       		.byte	8
 4743 0049 000000   		.space	3
 4744 004c 00000000 		.word	0
 4745 0050 01       		.byte	1
 4746 0051 000000   		.space	3
 4747 0054 01000000 		.word	1
 4748 0058 02       		.byte	2
 4749 0059 000000   		.space	3
 4750 005c 01000000 		.word	1
 4751 0060 03       		.byte	3
 4752 0061 000000   		.space	3
 4753 0064 01000000 		.word	1
 4754 0068 0C       		.byte	12
 4755 0069 000000   		.space	3
 4756 006c 00000000 		.word	0
 4757 0070 0D       		.byte	13
 4758 0071 000000   		.space	3
 4759 0074 00000000 		.word	0
 4760 0078 0E       		.byte	14
 4761 0079 000000   		.space	3
 4762 007c 00000000 		.word	0
 4763 0080 0F       		.byte	15
 4764 0081 000000   		.space	3
 4765 0084 00000000 		.word	0
 4766 0088 10       		.byte	16
 4767 0089 000000   		.space	3
 4768 008c 00000000 		.word	0
 4769 0090 18       		.byte	24
 4770 0091 000000   		.space	3
 4771 0094 00000000 		.word	0
 4772 0098 13       		.byte	19
 4773 0099 000000   		.space	3
 4774 009c 00000000 		.word	0
 4775 00a0 14       		.byte	20
ARM GAS  /tmp/ccG96vrG.s 			page 115


 4776 00a1 000000   		.space	3
 4777 00a4 00000000 		.word	0
 4778 00a8 15       		.byte	21
 4779 00a9 000000   		.space	3
 4780 00ac 00000000 		.word	0
 4781 00b0 16       		.byte	22
 4782 00b1 000000   		.space	3
 4783 00b4 00000000 		.word	0
 4784 00b8 1E       		.byte	30
 4785 00b9 000000   		.space	3
 4786 00bc 00000000 		.word	0
 4787 00c0 19       		.byte	25
 4788 00c1 000000   		.space	3
 4789 00c4 00000000 		.word	0
 4790 00c8 1A       		.byte	26
 4791 00c9 000000   		.space	3
 4792 00cc 00000000 		.word	0
 4793 00d0 1B       		.byte	27
 4794 00d1 000000   		.space	3
 4795 00d4 00000000 		.word	0
 4796 00d8 1C       		.byte	28
 4797 00d9 000000   		.space	3
 4798 00dc 00000000 		.word	0
 4799 00e0 29       		.byte	41
 4800 00e1 000000   		.space	3
 4801 00e4 00000000 		.word	0
 4802 00e8 1F       		.byte	31
 4803 00e9 000000   		.space	3
 4804 00ec 00000000 		.word	0
 4805 00f0 20       		.byte	32
 4806 00f1 000000   		.space	3
 4807 00f4 00000000 		.word	0
 4808 00f8 21       		.byte	33
 4809 00f9 000000   		.space	3
 4810 00fc 00000000 		.word	0
 4811 0100 22       		.byte	34
 4812 0101 000000   		.space	3
 4813 0104 00000000 		.word	0
 4814 0108 24       		.byte	36
 4815 0109 000000   		.space	3
 4816 010c 00000000 		.word	0
 4817 0110 25       		.byte	37
 4818 0111 000000   		.space	3
 4819 0114 00000000 		.word	0
 4820 0118 26       		.byte	38
 4821 0119 000000   		.space	3
 4822 011c 00000000 		.word	0
 4823 0120 27       		.byte	39
 4824 0121 000000   		.space	3
 4825 0124 00000000 		.word	0
 4826 0128 28       		.byte	40
 4827 0129 000000   		.space	3
 4828 012c 00000000 		.word	0
 4829 0130 2E       		.byte	46
 4830 0131 000000   		.space	3
 4831 0134 00000000 		.word	0
 4832 0138 2E       		.byte	46
ARM GAS  /tmp/ccG96vrG.s 			page 116


 4833 0139 000000   		.space	3
 4834 013c 00000000 		.word	0
 4835 0140 2E       		.byte	46
 4836 0141 000000   		.space	3
 4837 0144 00000000 		.word	0
 4838 0148 2E       		.byte	46
 4839 0149 000000   		.space	3
 4840 014c 00000000 		.word	0
 4841 0150 2E       		.byte	46
 4842 0151 000000   		.space	3
 4843 0154 00000000 		.word	0
 4844 0158 2E       		.byte	46
 4845 0159 000000   		.space	3
 4846 015c 00000000 		.word	0
 4847 0160 2E       		.byte	46
 4848 0161 000000   		.space	3
 4849 0164 00000000 		.word	0
 4850 0168 2E       		.byte	46
 4851 0169 000000   		.space	3
 4852 016c 00000000 		.word	0
 4853 0170 2E       		.byte	46
 4854 0171 000000   		.space	3
 4855 0174 00000000 		.word	0
 4856              		.section	.rodata.mid_menu,"a"
 4857              		.align	2
 4860              	mid_menu:
 4861 0000 C800     		.ascii	"\310\000"
 4862              		.text
 4863              	.Letext0:
 4864              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 4865              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 4866              		.file 6 "/usr/include/newlib/sys/_types.h"
 4867              		.file 7 "/usr/include/newlib/sys/reent.h"
 4868              		.file 8 "/usr/include/newlib/sys/lock.h"
 4869              		.file 9 "/usr/include/newlib/stdlib.h"
 4870              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 4871              		.file 11 "/usr/include/newlib/ctype.h"
 4872              		.file 12 "dmcp/ff_ifc.h"
 4873              		.file 13 "dmcp/dmcp.h"
 4874              		.file 14 "src/keys.h"
 4875              		.file 15 "src/decNumber/decContext.h"
 4876              		.file 16 "src/decNumber/decNumber.h"
 4877              		.file 17 "src/decNumber/decimal64.h"
 4878              		.file 18 "src/decNumber/decimal128.h"
 4879              		.file 19 "src/xeq.h"
 4880              		.file 20 "src/data.h"
 4881              		.file 21 "src/display.h"
 4882              		.file 22 "src/consts.h"
 4883              		.file 23 "src/storage.h"
 4884              		.file 24 "src/catalogues.h"
 4885              		.file 25 "src/menu.h"
 4886              		.file 26 "/usr/include/newlib/string.h"
 4887              		.file 27 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccG96vrG.s 			page 117


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccG96vrG.s:18     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccG96vrG.s:26     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccG96vrG.s:392    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/ccG96vrG.s:400    .text.set_menu:0000000000000000 $t
     /tmp/ccG96vrG.s:408    .text.set_menu:0000000000000000 set_menu
     /tmp/ccG96vrG.s:458    .text.set_menu:0000000000000024 $d
     /tmp/ccG96vrG.s:464    .text.get_menu:0000000000000000 $t
     /tmp/ccG96vrG.s:472    .text.get_menu:0000000000000000 get_menu
     /tmp/ccG96vrG.s:488    .text.get_menu:0000000000000008 $d
     /tmp/ccG96vrG.s:493    .text.set_last_menu:0000000000000000 $t
     /tmp/ccG96vrG.s:501    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccG96vrG.s:550    .text.set_last_menu:0000000000000014 $d
     /tmp/ccG96vrG.s:556    .text.mdot:0000000000000000 $t
     /tmp/ccG96vrG.s:564    .text.mdot:0000000000000000 mdot
     /tmp/ccG96vrG.s:655    .text.mdot:000000000000003c $d
     /tmp/ccG96vrG.s:660    .text.display_menu:0000000000000000 $t
     /tmp/ccG96vrG.s:668    .text.display_menu:0000000000000000 display_menu
     /tmp/ccG96vrG.s:907    .text.display_menu:000000000000010c $d
     /tmp/ccG96vrG.s:915    .text.display_current_menu:0000000000000000 $t
     /tmp/ccG96vrG.s:923    .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccG96vrG.s:938    .text.display_current_menu:0000000000000008 $d
     /tmp/ccG96vrG.s:943    .text.shutdown:0000000000000000 $t
     /tmp/ccG96vrG.s:951    .text.shutdown:0000000000000000 shutdown
     /tmp/ccG96vrG.s:978    .text.shutdown:0000000000000014 $d
     /tmp/ccG96vrG.s:983    .text.is_key_pressed:0000000000000000 $t
     /tmp/ccG96vrG.s:991    .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccG96vrG.s:1014   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccG96vrG.s:1019   .text.get_key:0000000000000000 $t
     /tmp/ccG96vrG.s:1027   .text.get_key:0000000000000000 get_key
     /tmp/ccG96vrG.s:1042   .text.get_key:0000000000000004 $d
     /tmp/ccG96vrG.s:1047   .text.put_key:0000000000000000 $t
     /tmp/ccG96vrG.s:1055   .text.put_key:0000000000000000 put_key
     /tmp/ccG96vrG.s:1072   .text.put_key:0000000000000004 $d
     /tmp/ccG96vrG.s:1077   .text.shift_down:0000000000000000 $t
     /tmp/ccG96vrG.s:1085   .text.shift_down:0000000000000000 shift_down
     /tmp/ccG96vrG.s:1100   .text.start_key_timer:0000000000000000 $t
     /tmp/ccG96vrG.s:1108   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccG96vrG.s:1132   .text.start_key_timer:000000000000000c $d
     /tmp/ccG96vrG.s:1138   .text.keyticks:0000000000000000 $t
     /tmp/ccG96vrG.s:1146   .text.keyticks:0000000000000000 keyticks
     /tmp/ccG96vrG.s:1177   .text.keyticks:0000000000000018 $d
     /tmp/ccG96vrG.s:1183   .text.moveto:0000000000000000 $t
     /tmp/ccG96vrG.s:1191   .text.moveto:0000000000000000 moveto
     /tmp/ccG96vrG.s:1251   .text.moveto:000000000000002c $d
     /tmp/ccG96vrG.s:1258   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccG96vrG.s:1262   .text.print_debug:0000000000000000 $t
     /tmp/ccG96vrG.s:1270   .text.print_debug:0000000000000000 print_debug
     /tmp/ccG96vrG.s:1372   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccG96vrG.s:1383   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccG96vrG.s:1387   .text.print_debug2:0000000000000000 $t
     /tmp/ccG96vrG.s:1395   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccG96vrG.s:1497   .text.print_debug2:0000000000000064 $d
     /tmp/ccG96vrG.s:1508   .text.do_now:0000000000000000 $t
     /tmp/ccG96vrG.s:1516   .text.do_now:0000000000000000 do_now
ARM GAS  /tmp/ccG96vrG.s 			page 118


     /tmp/ccG96vrG.s:1551   .text.do_multi:0000000000000000 $t
     /tmp/ccG96vrG.s:1559   .text.do_multi:0000000000000000 do_multi
     /tmp/ccG96vrG.s:1590   .text.do_multi:0000000000000018 $d
     /tmp/ccG96vrG.s:1600   .text.do_multi:0000000000000022 $t
     /tmp/ccG96vrG.s:1865   .text.do_multi:000000000000011c $d
     /tmp/ccG96vrG.s:1870   .text.program_main:0000000000000000 $t
     /tmp/ccG96vrG.s:1878   .text.program_main:0000000000000000 program_main
     /tmp/ccG96vrG.s:2361   .text.program_main:0000000000000202 $d
     /tmp/ccG96vrG.s:2367   .text.program_main:000000000000020e $t
     /tmp/ccG96vrG.s:2561   .text.program_main:00000000000002ec $d
     /tmp/ccG96vrG.s:2597   .text.program_main:000000000000036c $t
     /tmp/ccG96vrG.s:3177   .text.program_main:000000000000062c $d
     /tmp/ccG96vrG.s:3238   .bss.n_p:0000000000000000 n_p
     /tmp/ccG96vrG.s:3306   .data.spaces:0000000000000000 spaces
     /tmp/ccG96vrG.s:3297   .data.release:0000000000000000 release
     /tmp/ccG96vrG.s:3270   .data.h_shift:0000000000000000 h_shift
     /tmp/ccG96vrG.s:3261   .data.g_shift:0000000000000000 g_shift
     /tmp/ccG96vrG.s:3252   .data.f_shift:0000000000000000 f_shift
     /tmp/ccG96vrG.s:3279   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccG96vrG.s:3288   .data.no_key:0000000000000000 no_key
     /tmp/ccG96vrG.s:3313   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccG96vrG.s:3209   .rodata.str1.4:0000000000000000 $d
     /tmp/ccG96vrG.s:4860   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccG96vrG.s:3214   .bss.current_menu:0000000000000000 $d
     /tmp/ccG96vrG.s:3218   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccG96vrG.s:3221   .bss.last_menu:0000000000000000 $d
     /tmp/ccG96vrG.s:3225   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccG96vrG.s:3228   .bss.mdots:0000000000000000 $d
     /tmp/ccG96vrG.s:3232   .bss.mdots:0000000000000000 mdots
     /tmp/ccG96vrG.s:3235   .bss.n_p:0000000000000000 $d
     /tmp/ccG96vrG.s:3241   .bss.start_ticks:0000000000000000 $d
     /tmp/ccG96vrG.s:3245   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccG96vrG.s:3248   .data.f_shift:0000000000000000 $d
     /tmp/ccG96vrG.s:3257   .data.g_shift:0000000000000000 $d
     /tmp/ccG96vrG.s:3266   .data.h_shift:0000000000000000 $d
     /tmp/ccG96vrG.s:3275   .data.heartbeat:0000000000000000 $d
     /tmp/ccG96vrG.s:3284   .data.no_key:0000000000000000 $d
     /tmp/ccG96vrG.s:3293   .data.release:0000000000000000 $d
     /tmp/ccG96vrG.s:3302   .data.spaces:0000000000000000 $d
     /tmp/ccG96vrG.s:3309   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccG96vrG.s:3319   .rodata.Menus:0000000000000000 $d
     /tmp/ccG96vrG.s:3323   .rodata.Menus:0000000000000000 Menus
     /tmp/ccG96vrG.s:4269   .rodata.mapping_alpha.10869:0000000000000000 $d
     /tmp/ccG96vrG.s:4273   .rodata.mapping_alpha.10869:0000000000000000 mapping_alpha.10869
     /tmp/ccG96vrG.s:4416   .rodata.mapping_fshift.10867:0000000000000000 $d
     /tmp/ccG96vrG.s:4420   .rodata.mapping_fshift.10867:0000000000000000 mapping_fshift.10867
     /tmp/ccG96vrG.s:4563   .rodata.mapping_gshift.10868:0000000000000000 $d
     /tmp/ccG96vrG.s:4567   .rodata.mapping_gshift.10868:0000000000000000 mapping_gshift.10868
     /tmp/ccG96vrG.s:4710   .rodata.mapping_none.10866:0000000000000000 $d
     /tmp/ccG96vrG.s:4714   .rodata.mapping_none.10866:0000000000000000 mapping_none.10866
     /tmp/ccG96vrG.s:4857   .rodata.mid_menu:0000000000000000 $d

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
ARM GAS  /tmp/ccG96vrG.s 			page 119


RectPolConv
pixel_length
save_ram_file
strcpy
sprintf
process_keycode_with_shift
save_prog_file
flash_backup
flash_restore
save_lib_file
load_lib_file
load_ram_file
load_prog_file
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
get_alpha_state
cur_shift
StateWhileOn
DispMsg
JustDisplayed
Pause

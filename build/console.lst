ARM GAS  /tmp/ccYL8bSL.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC3:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** //#include <menu.h>
   2:src/menu.c    **** extern const char SvnRevision[4];
   3:src/menu.c    **** 
   4:src/menu.c    **** struct _menu UserMenu =
   5:src/menu.c    ****   {
   6:src/menu.c    ****     "User Menu", 
   7:src/menu.c    ****     {
   8:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   9:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  10:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  11:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  12:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  13:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
  14:src/menu.c    ****     }
  15:src/menu.c    ****   };
  16:src/menu.c    **** 
  17:src/menu.c    **** const char* arrow_key_string = "--\015";
  18:src/menu.c    **** const char* cmplx_key_string = "CPX";
  19:src/menu.c    **** 
  20:src/menu.c    **** menu_name current_menu = 0;
  21:src/menu.c    **** menu_name last_menu = 0;
  22:src/menu.c    **** menu_name default_menu = 0;
  23:src/menu.c    **** 
ARM GAS  /tmp/ccYL8bSL.s 			page 2


  24:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted);
  25:src/menu.c    **** 
  26:src/menu.c    **** 
  27:src/menu.c    **** 
  28:src/menu.c    **** /* 
  29:src/menu.c    ****  * System menu stuff
  30:src/menu.c    ****  */
  31:src/menu.c    **** 
  32:src/menu.c    **** #define MI_ABOUT_PGM 11
  33:src/menu.c    **** 
  34:src/menu.c    **** const uint8_t mid_menu[] = {
  35:src/menu.c    ****     MI_SYSTEM_ENTER,
  36:src/menu.c    ****     MI_MSC,
  37:src/menu.c    ****     MI_ABOUT_PGM,
  38:src/menu.c    ****     0 }; // Terminator
  39:src/menu.c    **** 
  40:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  41:src/menu.c    **** 
  42:src/menu.c    **** void disp_about(void);
  43:src/menu.c    **** 
  44:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  45:src/menu.c    ****   int ret = 0;
  46:src/menu.c    **** 
  47:src/menu.c    ****   switch(line_id) {
  48:src/menu.c    ****     case MI_ABOUT_PGM:
  49:src/menu.c    ****       disp_about();
  50:src/menu.c    ****       break;
  51:src/menu.c    **** 
  52:src/menu.c    ****      default:
  53:src/menu.c    ****       ret = MRET_UNIMPL;
  54:src/menu.c    ****       break;
  55:src/menu.c    ****   }
  56:src/menu.c    **** 
  57:src/menu.c    ****   return ret;
  58:src/menu.c    **** }
  59:src/menu.c    **** 
  60:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 60 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  61:src/menu.c    ****   const char * ln;
  40              		.loc 1 61 3 view .LVU1
  62:src/menu.c    **** 
  63:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 63 3 view .LVU2
  64:src/menu.c    **** 
  65:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  66:src/menu.c    **** 
  67:src/menu.c    ****   default:
  68:src/menu.c    ****     ln = NULL;
  42              		.loc 1 68 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  63:src/menu.c    **** 
  44              		.loc 1 63 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
ARM GAS  /tmp/ccYL8bSL.s 			page 3


  69:src/menu.c    ****     break;
  70:src/menu.c    ****   }
  71:src/menu.c    **** 
  72:src/menu.c    ****   return ln;
  73:src/menu.c    **** }
  46              		.loc 1 73 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 73 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC3
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB37:
  74:src/menu.c    **** 
  75:src/menu.c    **** void disp_about() {
  76:src/menu.c    ****   char title[] = "WP 34C calculator for DM42: v     ";
  77:src/menu.c    **** 
  78:src/menu.c    ****   xcopy ((title + 29), SvnRevision, 4);
  79:src/menu.c    **** 
  80:src/menu.c    ****   lcd_clear_buf();
  81:src/menu.c    ****   lcd_writeClr(t24);
  82:src/menu.c    **** 
  83:src/menu.c    **** 
  84:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  85:src/menu.c    ****   lcd_putsR(t24, title);
  86:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
  87:src/menu.c    ****   t20->newln = 1;
  88:src/menu.c    **** #ifdef TOP_ROW
  89:src/menu.c    ****   lcd_puts(t20, "With longer alpha display and top row,");
  90:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  91:src/menu.c    ****   lcd_puts(t20, "With a longer alpha display,");
  92:src/menu.c    **** #else
  93:src/menu.c    ****   lcd_puts(t20, "Same display layout as the original WP34S,");
  94:src/menu.c    **** #endif
  95:src/menu.c    ****   lcd_puts(t20, "and some annunciators renamed.");
  96:src/menu.c    ****   lcd_puts(t20, "Includes printing, stopwatch,");
  97:src/menu.c    ****   lcd_puts(t20, "entry RPN, extended file handling,");
  98:src/menu.c    ****   lcd_puts(t20, "user-defined menus, and");
  99:src/menu.c    ****   lcd_puts(t20, "complex lock mode.");
 100:src/menu.c    **** 
 101:src/menu.c    ****   t20->y += 5;
 102:src/menu.c    **** 
ARM GAS  /tmp/ccYL8bSL.s 			page 4


 103:src/menu.c    ****   t20->bgfill = 1;
 104:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 105:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 106:src/menu.c    ****   t20->bgfill = 0;
 107:src/menu.c    ****   t20->newln = 0;
 108:src/menu.c    ****   
 109:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
 110:src/menu.c    ****   t24->x = 20;
 111:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 112:src/menu.c    **** 
 113:src/menu.c    ****   lcd_refresh();
 114:src/menu.c    **** 
 115:src/menu.c    ****   wait_for_key_press();
 116:src/menu.c    **** }
 117:src/menu.c    **** 
 118:src/menu.c    **** /*
 119:src/menu.c    ****  * WP34s menu code
 120:src/menu.c    ****  */
 121:src/menu.c    **** 
 122:src/menu.c    **** void set_menu ( menu_name new_menu ) {
 123:src/menu.c    ****   menu_name m = current_menu;
 124:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 125:src/menu.c    ****     current_menu = default_menu;
 126:src/menu.c    ****   }
 127:src/menu.c    ****   else if (new_menu == M_Last) { // go to last menu
 128:src/menu.c    ****     current_menu = last_menu;
 129:src/menu.c    ****   }
 130:src/menu.c    ****   else {
 131:src/menu.c    ****     current_menu = new_menu; // change to new menu
 132:src/menu.c    ****   }
 133:src/menu.c    ****   if ( (m != M_Arrow) && (m != M_Alpha) ) last_menu = m;
 134:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 135:src/menu.c    **** }
 136:src/menu.c    **** 
 137:src/menu.c    **** void set_default_menu () {
 138:src/menu.c    ****   set_menu (default_menu);
 139:src/menu.c    **** }
 140:src/menu.c    **** 
 141:src/menu.c    **** void toggle_default_menu () {
 142:src/menu.c    ****   if (current_menu == M_Blank) {
 143:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 144:src/menu.c    ****     return;
 145:src/menu.c    ****   }
 146:src/menu.c    ****   else if (current_menu == M_Blank2) {
 147:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 148:src/menu.c    ****   }
 149:src/menu.c    ****   else {
 150:src/menu.c    ****     set_default_menu();
 151:src/menu.c    ****   }
 152:src/menu.c    **** }
 153:src/menu.c    **** 
 154:src/menu.c    **** menu_name get_menu () {
 155:src/menu.c    ****   return current_menu;
 156:src/menu.c    **** }
 157:src/menu.c    **** 
 158:src/menu.c    **** menu_name get_last_menu () {
 159:src/menu.c    ****   return last_menu;
ARM GAS  /tmp/ccYL8bSL.s 			page 5


 160:src/menu.c    **** }
 161:src/menu.c    **** 
 162:src/menu.c    **** void display_current_menu () {
 163:src/menu.c    ****   display_menu (get_current_menu_ref());
 164:src/menu.c    **** }
 165:src/menu.c    **** 
 166:src/menu.c    **** void set_last_menu () {
 167:src/menu.c    ****   set_menu (M_Last);
 168:src/menu.c    **** }
 169:src/menu.c    **** 
 170:src/menu.c    **** static unsigned char mdots[200][2];
 171:src/menu.c    **** 
 172:src/menu.c    **** static const struct _menu Menus[] = {
 173:src/menu.c    ****   {
 174:src/menu.c    ****     "M_Blank", // 0
 175:src/menu.c    ****     { 
 176:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 177:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 178:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 179:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 180:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 181:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 182:src/menu.c    ****     }    
 183:src/menu.c    ****   },
 184:src/menu.c    ****   {
 185:src/menu.c    ****     "M_Clear", // 1
 186:src/menu.c    ****     { 
 187:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 188:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 189:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 190:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 191:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 192:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 193:src/menu.c    ****     }    
 194:src/menu.c    ****   },
 195:src/menu.c    ****   {
 196:src/menu.c    ****     "M_Disp", // 2
 197:src/menu.c    ****     { 
 198:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 199:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 200:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 201:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 202:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 203:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 204:src/menu.c    ****     }
 205:src/menu.c    ****   },
 206:src/menu.c    ****   {
 207:src/menu.c    ****     "M_Base", // 3
 208:src/menu.c    ****     { 
 209:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 210:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 211:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 212:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 213:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 214:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 215:src/menu.c    ****     }
 216:src/menu.c    ****   },
ARM GAS  /tmp/ccYL8bSL.s 			page 6


 217:src/menu.c    ****   {
 218:src/menu.c    ****     "M_Angles", // 4
 219:src/menu.c    ****     { 
 220:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 221:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 222:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 223:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 224:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 225:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 226:src/menu.c    ****     }
 227:src/menu.c    ****       
 228:src/menu.c    ****   },
 229:src/menu.c    ****   {
 230:src/menu.c    ****     "M_Misc", // 5
 231:src/menu.c    ****     { 
 232:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 233:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 234:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 235:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 236:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 237:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 238:src/menu.c    ****     }
 239:src/menu.c    ****   },
 240:src/menu.c    ****   {
 241:src/menu.c    ****     "M_Swap", // 6
 242:src/menu.c    ****     { 
 243:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 244:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 245:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 246:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 247:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 248:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 249:src/menu.c    ****     }    
 250:src/menu.c    ****   },
 251:src/menu.c    ****   {
 252:src/menu.c    ****     "M_Program", // 7
 253:src/menu.c    ****     { 
 254:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 255:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 256:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 257:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 258:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 259:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 260:src/menu.c    ****     }
 261:src/menu.c    ****   },
 262:src/menu.c    ****   {
 263:src/menu.c    ****     "M_Setup1", // 8
 264:src/menu.c    ****     { 
 265:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 266:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 267:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 268:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 269:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 270:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 271:src/menu.c    ****     }
 272:src/menu.c    ****   },
 273:src/menu.c    ****   {
ARM GAS  /tmp/ccYL8bSL.s 			page 7


 274:src/menu.c    ****     "M_Arrow", // 9
 275:src/menu.c    ****     { 
 276:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "\015Bin", "\015DEG" },
 277:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "\015Oct", "\015RAD" },
 278:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "\015Dec", "\015Grad" },
 279:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "\015Hex", "\015HMS" },
 280:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 281:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 282:src/menu.c    ****     }
 283:src/menu.c    ****   },
 284:src/menu.c    ****   {
 285:src/menu.c    ****     "M_Flags", // 10
 286:src/menu.c    ****     { 
 287:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
 288:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 289:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 290:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 291:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 292:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 293:src/menu.c    ****     }
 294:src/menu.c    ****   },
 295:src/menu.c    ****   {
 296:src/menu.c    ****     "M_Prob", // 11
 297:src/menu.c    ****     { 
 298:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 299:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 300:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 301:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 302:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 303:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 304:src/menu.c    ****     }
 305:src/menu.c    ****   },
 306:src/menu.c    ****   {
 307:src/menu.c    ****     "M_Stats", // 12
 308:src/menu.c    ****     /*
 309:src/menu.c    ****      *xbar, sd;
 310:src/menu.c    ****      *yhat, xhat;
 311:src/menu.c    ****      *corr, L.R.;
 312:src/menu.c    ****      *best, linear;
 313:src/menu.c    ****      *ln, exp;
 314:src/menu.c    ****      *cmplx, power;
 315:src/menu.c    ****      *No, sums is already on g9.
 316:src/menu.c    ****      */
 317:src/menu.c    ****     { 
 318:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 319:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 320:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 321:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 322:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 323:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 324:src/menu.c    ****     }
 325:src/menu.c    ****   },
 326:src/menu.c    ****   {
 327:src/menu.c    ****     "M_Setup2", // 13
 328:src/menu.c    ****     { 
 329:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 330:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
ARM GAS  /tmp/ccYL8bSL.s 			page 8


 331:src/menu.c    ****       { { K_MULTI, SVPRG }, { K_OP, OP_NIL | OP_PSTO }, "SvCPRG", "PSTO" },
 332:src/menu.c    ****       { { K_MULTI, LDPRG }, { K_OP, OP_NIL | OP_PRCL }, "LdPRG", "PRCL" },
 333:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 334:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 335:src/menu.c    ****     }
 336:src/menu.c    ****   },
 337:src/menu.c    ****   {
 338:src/menu.c    ****     "M_Solve", // 14
 339:src/menu.c    ****     { 
 340:src/menu.c    ****       { { K52, 1 }, { K_OP, RARG_BASEOP(RARG_DERIV)}, "SLV", "f'(x)" },
 341:src/menu.c    ****       { { K52, 2 }, { K_OP, RARG_BASEOP(RARG_2DERIV)}, "\004 dx", "f''(x)" },
 342:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 343:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 344:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 345:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 346:src/menu.c    ****     }
 347:src/menu.c    ****   },
 348:src/menu.c    ****   {
 349:src/menu.c    ****     "M_Blank2", // 15
 350:src/menu.c    ****     { 
 351:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 352:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 353:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 354:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 355:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 356:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 357:src/menu.c    ****     }    
 358:src/menu.c    ****   },
 359:src/menu.c    ****   {
 360:src/menu.c    ****     "M_Alpha", // 16
 361:src/menu.c    ****     { 
 362:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 363:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 364:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 365:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 366:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 367:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 368:src/menu.c    ****     }    
 369:src/menu.c    ****   },
 370:src/menu.c    ****   {
 371:src/menu.c    ****     "M_C_Lock", // 17
 372:src/menu.c    ****     { 
 373:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 374:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 375:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "+/-\006Im", "+/-\006Re" },
 376:src/menu.c    ****       { { K21, 2 }, { K00, 1 }, "Re\027Im", "HYP" },
 377:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 378:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 379:src/menu.c    ****     }    
 380:src/menu.c    ****   },
 381:src/menu.c    ****   {
 382:src/menu.c    ****     "M_Clear_C", // 18
 383:src/menu.c    ****     { 
 384:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 385:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 386:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 387:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, NO_KEY, "CLStk", "" },
ARM GAS  /tmp/ccYL8bSL.s 			page 9


 388:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 389:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 390:src/menu.c    ****     }    
 391:src/menu.c    ****   },
 392:src/menu.c    ****   {
 393:src/menu.c    ****     "M_Swap_C", // 19
 394:src/menu.c    ****     { 
 395:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 396:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 397:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 398:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 399:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 400:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 401:src/menu.c    ****     }    
 402:src/menu.c    ****   },
 403:src/menu.c    ****   {
 404:src/menu.c    ****     "M_Arrow_C", // 20
 405:src/menu.c    ****     { 
 406:src/menu.c    ****       { NO_KEY, { K10, 2 }, "", "DEG" },
 407:src/menu.c    ****       { NO_KEY, { K11, 2 }, "", "RAD" },
 408:src/menu.c    ****       { NO_KEY, { K12, 2 }, "", "Grad" },
 409:src/menu.c    ****       { NO_KEY, { K10, 1 }, "", "\015HMS" },
 410:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 411:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 412:src/menu.c    ****     }
 413:src/menu.c    ****   },
 414:src/menu.c    ****   {
 415:src/menu.c    ****     "M_Prob_C", // 21
 416:src/menu.c    ****     { 
 417:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_CMON | OP_LNGAMMA }, "\024\006!", "\024\006Ln\006\202" },
 418:src/menu.c    ****       { { K_OP, OP_CDYA | OP_COMB }, NO_KEY, "\024\006Cy,x", "" },
 419:src/menu.c    ****       { { K_OP, OP_CDYA | OP_PERM }, NO_KEY, "\024\006Py,x", "" },
 420:src/menu.c    ****       { NO_KEY, NO_KEY , "", "" },
 421:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 422:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 423:src/menu.c    ****     }
 424:src/menu.c    ****   },
 425:src/menu.c    ****   {
 426:src/menu.c    ****     "M_Blank2_C", // 22
 427:src/menu.c    ****     { 
 428:src/menu.c    ****       { { K00, 1 }, NO_KEY, "HYP", "" },
 429:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 430:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 431:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 432:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 433:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 434:src/menu.c    ****     }    
 435:src/menu.c    ****   },
 436:src/menu.c    ****   {
 437:src/menu.c    ****     "M_Misc_C", // 23
 438:src/menu.c    ****     { 
 439:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|z|", "\0242\234" },
 440:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "\024Log\272" },
 441:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "0\015Re", "\024Log\213" },
 442:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "0\015Im", "\024||el" },
 443:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "\024.\034" },
 444:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "\024./" },
ARM GAS  /tmp/ccYL8bSL.s 			page 10


 445:src/menu.c    ****     }
 446:src/menu.c    ****   },
 447:src/menu.c    ****   {
 448:src/menu.c    ****     "M_Usermenu", // 24
 449:src/menu.c    ****     { 
 450:src/menu.c    ****       { { K_OP, 0x0000fb00  }, NO_KEY, "UMEN", "" },
 451:src/menu.c    ****       { { K_OP, 0x314dfb55 }, { K_OP, 0x344dfb55 }, "UM1", "UM4" },
 452:src/menu.c    ****       { { K_OP, 0x324dfb55 }, { K_OP, 0x354dfb55 }, "UM2", "UM5" },
 453:src/menu.c    ****       { { K_OP, 0x334dfb55 }, { K_OP, 0x364dfb55 }, "UM3", "UM6" },
 454:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "" },
 455:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "" },
 456:src/menu.c    ****     }
 457:src/menu.c    ****   },
 458:src/menu.c    ****   {
 459:src/menu.c    ****     "M_Print", // 25
 460:src/menu.c    ****     { 
 461:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_ON  }, { K_OP, OP_NIL | OP_PRINT_OFF }, "\222\006On", "\222\006Of
 462:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_PMODE) }, { K_OP, RARG_BASEOP(RARG_DBLSP) }, "\222\006Mode", "\222
 463:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_PGM }, { K_OP, OP_NIL | OP_PRINT_REGS }, "\222\006Prog", "\222\00
 464:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_STACK }, { K_OP, OP_NIL | OP_PRINT_SIGMA }, "\222\006Stk", "\222\
 465:src/menu.c    ****       { ARROW_KEY, { K_OP, OP_NIL | OP_PRINT_ALPHA }, "--\015", "\222\006\240" },
 466:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PRINT_ADV }, "CPX", "\222\006ADV" },
 467:src/menu.c    ****     }
 468:src/menu.c    ****   },
 469:src/menu.c    **** 
 470:src/menu.c    **** };  
 471:src/menu.c    **** 
 472:src/menu.c    **** /* This code is the set_status_sized code with small changes
 473:src/menu.c    ****  * and non-DM42 code removed.
 474:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 475:src/menu.c    ****  */
 476:src/menu.c    **** #define MENU_WIDTH 32
 477:src/menu.c    **** 
 478:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 478 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 479:src/menu.c    ****   // dotcol is the number of the starting dot column
 480:src/menu.c    ****   // shifted is 1 if shifted
 481:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 481 3 view .LVU8
 482:src/menu.c    **** 
 483:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 484:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 484 3 view .LVU9
 485:src/menu.c    **** 
 486:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 486 3 view .LVU10
 478:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 478 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
ARM GAS  /tmp/ccYL8bSL.s 			page 11


  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 478:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 478 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 487:src/menu.c    ****   int i, j, xmax;
 488:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 488 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
 489:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 490:src/menu.c    **** 
 491:src/menu.c    **** #ifdef RP_PREFIX
 492:src/menu.c    ****   RectPolConv = 0;
  96              		.loc 1 492 15 view .LVU14
  97 000e 494A     		ldr	r2, .L41
  98              	.LVL3:
 488:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  99              		.loc 1 488 18 view .LVU15
 100 0010 B4BF     		ite	lt
 101 0012 01F11F03 		addlt	r3, r1, #31
 102 0016 0B46     		movge	r3, r1
 478:src/menu.c    ****   // dotcol is the number of the starting dot column
 103              		.loc 1 478 13 view .LVU16
 104 0018 0F46     		mov	r7, r1
 105              	.LVL4:
 487:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
 106              		.loc 1 487 3 is_stmt 1 view .LVU17
 488:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 107              		.loc 1 488 3 view .LVU18
 108              		.loc 1 492 15 is_stmt 0 view .LVU19
 109 001a 0021     		movs	r1, #0
 110              	.LVL5:
 111              		.loc 1 492 15 view .LVU20
 112 001c 1160     		str	r1, [r2]
 493:src/menu.c    **** #endif
 494:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 113              		.loc 1 494 10 view .LVU21
 114 001e 019A     		ldr	r2, [sp, #4]
 115 0020 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 488:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 116              		.loc 1 488 30 view .LVU22
 117 0022 23F01F03 		bic	r3, r3, #31
 488:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 118              		.loc 1 488 8 view .LVU23
 119 0026 03F12009 		add	r9, r3, #32
 120              	.LVL6:
 489:src/menu.c    **** 
 121              		.loc 1 489 3 is_stmt 1 view .LVU24
 492:src/menu.c    **** #endif
 122              		.loc 1 492 3 view .LVU25
 123              		.loc 1 494 3 view .LVU26
 124              		.loc 1 494 9 view .LVU27
ARM GAS  /tmp/ccYL8bSL.s 			page 12


 125 002a 002D     		cmp	r5, #0
 126 002c 78D0     		beq	.L7
 127              		.loc 1 494 23 is_stmt 0 view .LVU28
 128 002e 4F45     		cmp	r7, r9
 129 0030 76DC     		bgt	.L7
 130              	.LBB39:
 495:src/menu.c    ****     int c;
 496:src/menu.c    ****     int width;
 497:src/menu.c    ****     unsigned char cmap[6];
 498:src/menu.c    **** 
 499:src/menu.c    ****     int real_width;
 500:src/menu.c    ****     int current_smallp;
 501:src/menu.c    **** 
 502:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 503:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 504:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 505:src/menu.c    ****     //           01 -> (not used)
 506:src/menu.c    ****     //           10 -> use big font
 507:src/menu.c    ****     //           11 -> use small font
 508:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 509:src/menu.c    ****     if (str[0] == '\007') {
 131              		.loc 1 509 8 view .LVU29
 132 0032 072D     		cmp	r5, #7
 133              	.LBE39:
 484:src/menu.c    **** 
 134              		.loc 1 484 7 view .LVU30
 135 0034 4FF0FF04 		mov	r4, #255
 136              	.LVL7:
 137              	.LBB56:
 495:src/menu.c    ****     int c;
 138              		.loc 1 495 5 is_stmt 1 view .LVU31
 496:src/menu.c    ****     unsigned char cmap[6];
 139              		.loc 1 496 5 view .LVU32
 497:src/menu.c    **** 
 140              		.loc 1 497 5 view .LVU33
 499:src/menu.c    ****     int current_smallp;
 141              		.loc 1 499 5 view .LVU34
 500:src/menu.c    **** 
 142              		.loc 1 500 5 view .LVU35
 143              		.loc 1 509 5 view .LVU36
 510:src/menu.c    ****       width = str[1] & 0x1F;
 511:src/menu.c    ****       switch (str[1] & 0x60) {
 512:src/menu.c    ****       default:
 513:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 514:src/menu.c    **** 	break;
 515:src/menu.c    ****       case 0x40:	current_smallp = 0;
 516:src/menu.c    **** 	break;
 517:src/menu.c    ****       case 0x60:	current_smallp = 1;
 144              		.loc 1 517 33 is_stmt 0 view .LVU37
 145 0038 4FF0010A 		mov	r10, #1
 509:src/menu.c    ****       width = str[1] & 0x1F;
 146              		.loc 1 509 8 view .LVU38
 147 003c 64D1     		bne	.L11
 148              	.LVL8:
 149              	.L39:
 510:src/menu.c    ****       width = str[1] & 0x1F;
 150              		.loc 1 510 7 is_stmt 1 view .LVU39
ARM GAS  /tmp/ccYL8bSL.s 			page 13


 510:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 510 18 is_stmt 0 view .LVU40
 152 003e 019B     		ldr	r3, [sp, #4]
 153 0040 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 154 0042 06F06003 		and	r3, r6, #96
 511:src/menu.c    ****       default:
 155              		.loc 1 511 7 view .LVU41
 156 0046 402B     		cmp	r3, #64
 510:src/menu.c    ****       width = str[1] & 0x1F;
 157              		.loc 1 510 13 view .LVU42
 158 0048 06F01F06 		and	r6, r6, #31
 159              	.LVL9:
 511:src/menu.c    ****       default:
 160              		.loc 1 511 7 is_stmt 1 view .LVU43
 161 004c 6CD0     		beq	.L34
 162 004e 602B     		cmp	r3, #96
 163 0050 6AD1     		bne	.L34
 164              		.loc 1 517 18 view .LVU44
 165              	.LVL10:
 518:src/menu.c    **** 	break;
 166              		.loc 1 518 2 view .LVU45
 519:src/menu.c    ****       }
 520:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 167              		.loc 1 520 7 view .LVU46
 168              		.loc 1 520 11 is_stmt 0 view .LVU47
 169 0052 019B     		ldr	r3, [sp, #4]
 170 0054 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 517:src/menu.c    **** 	break;
 171              		.loc 1 517 33 view .LVU48
 172 0056 0123     		movs	r3, #1
 173 0058 0093     		str	r3, [sp]
 174 005a 00F58075 		add	r5, r0, #256
 175              	.LVL11:
 176              	.L15:
 521:src/menu.c    ****       str += 3;
 177              		.loc 1 521 7 is_stmt 1 view .LVU49
 522:src/menu.c    **** 
 523:src/menu.c    ****       real_width = charlengths(c);
 178              		.loc 1 523 20 is_stmt 0 view .LVU50
 179 005e 2846     		mov	r0, r5
 180 0060 FFF7FEFF 		bl	charlengths
 181              	.LVL12:
 521:src/menu.c    ****       str += 3;
 182              		.loc 1 521 11 view .LVU51
 183 0064 019B     		ldr	r3, [sp, #4]
 184 0066 0333     		adds	r3, r3, #3
 185 0068 0193     		str	r3, [sp, #4]
 186              	.LVL13:
 187              		.loc 1 523 7 is_stmt 1 view .LVU52
 524:src/menu.c    ****     } else {
 525:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 526:src/menu.c    ****       real_width = width = charlengths(c);
 527:src/menu.c    ****       current_smallp = smallp;
 528:src/menu.c    ****     }
 529:src/menu.c    **** 
 530:src/menu.c    ****     if (x + real_width > xmax)
 188              		.loc 1 530 5 view .LVU53
ARM GAS  /tmp/ccYL8bSL.s 			page 14


 189              		.loc 1 530 11 is_stmt 0 view .LVU54
 190 006a C319     		adds	r3, r0, r7
 191              	.LVL14:
 192              		.loc 1 530 8 view .LVU55
 193 006c 9945     		cmp	r9, r3
 194 006e 57DB     		blt	.L7
 195              	.L40:
 531:src/menu.c    ****       break;
 532:src/menu.c    **** 
 533:src/menu.c    ****     if (posns_state != current_smallp) {
 196              		.loc 1 533 5 is_stmt 1 view .LVU56
 197              		.loc 1 533 8 is_stmt 0 view .LVU57
 198 0070 009B     		ldr	r3, [sp]
 199 0072 A342     		cmp	r3, r4
 534:src/menu.c    ****       findlengths(posns, current_smallp);
 200              		.loc 1 534 7 view .LVU58
 201 0074 07AB     		add	r3, sp, #28
 533:src/menu.c    ****       findlengths(posns, current_smallp);
 202              		.loc 1 533 8 view .LVU59
 203 0076 05D0     		beq	.L18
 204              		.loc 1 534 7 is_stmt 1 view .LVU60
 205 0078 1846     		mov	r0, r3
 206              	.LVL15:
 207              		.loc 1 534 7 is_stmt 0 view .LVU61
 208 007a 0099     		ldr	r1, [sp]
 209 007c 0393     		str	r3, [sp, #12]
 210 007e FFF7FEFF 		bl	findlengths
 211              	.LVL16:
 212 0082 039B     		ldr	r3, [sp, #12]
 535:src/menu.c    ****       posns_state = current_smallp;
 213              		.loc 1 535 7 is_stmt 1 view .LVU62
 214              	.LVL17:
 215              	.L18:
 536:src/menu.c    ****     }
 537:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 216              		.loc 1 537 5 view .LVU63
 217 0084 009A     		ldr	r2, [sp]
 218 0086 2846     		mov	r0, r5
 219 0088 05A9     		add	r1, sp, #20
 220 008a FFF7FEFF 		bl	unpackchar
 221              	.LVL18:
 538:src/menu.c    **** 
 539:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 222              		.loc 1 539 5 view .LVU64
 223              		.loc 1 539 15 view .LVU65
 224 008e 029B     		ldr	r3, [sp, #8]
 225 0090 03EB4704 		add	r4, r3, r7, lsl #1
 226 0094 284B     		ldr	r3, .L41+4
 227 0096 0DF1140B 		add	fp, sp, #20
 228 009a 1C44     		add	r4, r4, r3
 537:src/menu.c    **** 
 229              		.loc 1 537 5 is_stmt 0 view .LVU66
 230 009c 4FF0050E 		mov	lr, #5
 231 00a0 A9EB0705 		sub	r5, r9, r7
 232              	.LVL19:
 233              	.L19:
 540:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
ARM GAS  /tmp/ccYL8bSL.s 			page 15


 234              		.loc 1 540 17 is_stmt 1 view .LVU67
 235              		.loc 1 540 7 is_stmt 0 view .LVU68
 236 00a4 002E     		cmp	r6, #0
 237 00a6 1FDD     		ble	.L25
 541:src/menu.c    **** 	if (x+j >= xmax)
 238              		.loc 1 541 2 is_stmt 1 view .LVU69
 239              		.loc 1 541 5 is_stmt 0 view .LVU70
 240 00a8 B945     		cmp	r9, r7
 241 00aa 1DDD     		ble	.L25
 242              	.LBB40:
 243              	.LBB41:
 244              	.LBB42:
 245              	.LBB43:
 542:src/menu.c    **** 	  break;
 543:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 544:src/menu.c    ****       }
 545:src/menu.c    ****     }
 546:src/menu.c    ****     x += width;
 547:src/menu.c    ****   }
 548:src/menu.c    **** }
 549:src/menu.c    **** 
 550:src/menu.c    **** 
 551:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 552:src/menu.c    **** 
 553:src/menu.c    **** int pixel_length(const char *s, int smallp)
 554:src/menu.c    **** {
 555:src/menu.c    ****   int len = 0;
 556:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 557:src/menu.c    ****   while (*s != '\0') {
 558:src/menu.c    ****     if (s[0] == '\007') {
 559:src/menu.c    ****       len += s[1] & 0x1F;
 560:src/menu.c    ****       s += 3;
 561:src/menu.c    ****       continue;
 562:src/menu.c    ****     }
 563:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 564:src/menu.c    ****   }
 565:src/menu.c    ****   return len;
 566:src/menu.c    **** }
 567:src/menu.c    **** */
 568:src/menu.c    **** 
 569:src/menu.c    **** 
 570:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 571:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 572:src/menu.c    ****   if (on) {
 573:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 574:src/menu.c    ****   }
 575:src/menu.c    ****   else {
 576:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 246              		.loc 1 576 25 view .LVU71
 247 00ac 0AFA0EFC 		lsl	ip, r10, lr
 248              		.loc 1 576 17 view .LVU72
 249 00b0 4FFA8CFC 		sxtb	ip, ip
 250              	.LBE43:
 251              	.LBE42:
 252              	.LBE41:
 253              	.LBE40:
 543:src/menu.c    ****       }
ARM GAS  /tmp/ccYL8bSL.s 			page 16


 254              		.loc 1 543 31 view .LVU73
 255 00b4 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 256              	.LBB53:
 257              	.LBB50:
 258              	.LBB47:
 259              	.LBB44:
 260              		.loc 1 576 17 view .LVU74
 261 00b8 6FEA0C08 		mvn	r8, ip
 262              	.LBE44:
 263              	.LBE47:
 264              	.LBE50:
 265              	.LBE53:
 540:src/menu.c    **** 	if (x+j >= xmax)
 266              		.loc 1 540 13 view .LVU75
 267 00bc 0023     		movs	r3, #0
 268 00be 01E0     		b	.L20
 269              	.LVL20:
 270              	.L24:
 541:src/menu.c    **** 	  break;
 271              		.loc 1 541 5 view .LVU76
 272 00c0 9D42     		cmp	r5, r3
 273 00c2 11D0     		beq	.L25
 274              	.LVL21:
 275              	.L20:
 543:src/menu.c    ****       }
 276              		.loc 1 543 2 is_stmt 1 view .LVU77
 277              	.LBB54:
 278              	.LBI40:
 570:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 279              		.loc 1 570 6 view .LVU78
 280              	.LBB51:
 571:src/menu.c    ****   if (on) {
 281              		.loc 1 571 3 view .LVU79
 282              	.LBB48:
 283              	.LBI42:
 570:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 570 6 view .LVU80
 285              	.LBB45:
 572:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 286              		.loc 1 572 3 view .LVU81
 287              	.LBE45:
 288              	.LBE48:
 571:src/menu.c    ****   if (on) {
 289              		.loc 1 571 6 is_stmt 0 view .LVU82
 290 00c4 DA19     		adds	r2, r3, r7
 291              	.LVL22:
 571:src/menu.c    ****   if (on) {
 292              		.loc 1 571 6 view .LVU83
 293 00c6 C72A     		cmp	r2, #199
 294              	.LBE51:
 295              	.LBE54:
 543:src/menu.c    ****       }
 296              		.loc 1 543 46 view .LVU84
 297 00c8 40FA03F1 		asr	r1, r0, r3
 298              	.LBB55:
 299              	.LBB52:
 571:src/menu.c    ****   if (on) {
ARM GAS  /tmp/ccYL8bSL.s 			page 17


 300              		.loc 1 571 6 view .LVU85
 301 00cc 09D8     		bhi	.L22
 302              	.LBB49:
 303              	.LBB46:
 573:src/menu.c    ****   }
 304              		.loc 1 573 5 is_stmt 1 view .LVU86
 305              		.loc 1 576 5 view .LVU87
 573:src/menu.c    ****   }
 306              		.loc 1 573 17 is_stmt 0 view .LVU88
 307 00ce 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 308              	.LVL23:
 572:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 309              		.loc 1 572 6 view .LVU89
 310 00d2 C907     		lsls	r1, r1, #31
 573:src/menu.c    ****   }
 311              		.loc 1 573 17 view .LVU90
 312 00d4 4CBF     		ite	mi
 313 00d6 4CEA0202 		orrmi	r2, ip, r2
 314              		.loc 1 576 17 view .LVU91
 315 00da 08EA0202 		andpl	r2, r8, r2
 316 00de 04F81320 		strb	r2, [r4, r3, lsl #1]
 317              	.L22:
 318              	.LBE46:
 319              	.LBE49:
 320              	.LBE52:
 321              	.LBE55:
 541:src/menu.c    **** 	  break;
 322              		.loc 1 541 2 is_stmt 1 view .LVU92
 323              	.LVL24:
 540:src/menu.c    **** 	if (x+j >= xmax)
 324              		.loc 1 540 26 view .LVU93
 540:src/menu.c    **** 	if (x+j >= xmax)
 325              		.loc 1 540 27 is_stmt 0 view .LVU94
 326 00e2 0133     		adds	r3, r3, #1
 327              	.LVL25:
 540:src/menu.c    **** 	if (x+j >= xmax)
 328              		.loc 1 540 17 is_stmt 1 view .LVU95
 540:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 540 7 is_stmt 0 view .LVU96
 330 00e4 B342     		cmp	r3, r6
 331 00e6 EBD1     		bne	.L24
 332              	.LVL26:
 333              	.L25:
 539:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 334              		.loc 1 539 20 is_stmt 1 view .LVU97
 539:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 335              		.loc 1 539 15 view .LVU98
 336 00e8 0EF1FF3E 		add	lr, lr, #-1
 539:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 337              		.loc 1 539 5 is_stmt 0 view .LVU99
 338 00ec BEF1FF3F 		cmp	lr, #-1
 339 00f0 0BF1010B 		add	fp, fp, #1
 340              	.LVL27:
 539:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 341              		.loc 1 539 5 view .LVU100
 342 00f4 D6D1     		bne	.L19
 546:src/menu.c    ****   }
ARM GAS  /tmp/ccYL8bSL.s 			page 18


 343              		.loc 1 546 5 is_stmt 1 view .LVU101
 344              	.LBE56:
 494:src/menu.c    ****     int c;
 345              		.loc 1 494 10 is_stmt 0 view .LVU102
 346 00f6 019B     		ldr	r3, [sp, #4]
 347 00f8 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 348              	.LBB57:
 546:src/menu.c    ****   }
 349              		.loc 1 546 7 view .LVU103
 350 00fa 3744     		add	r7, r7, r6
 351              	.LVL28:
 546:src/menu.c    ****   }
 352              		.loc 1 546 7 view .LVU104
 353              	.LBE57:
 494:src/menu.c    ****     int c;
 354              		.loc 1 494 9 is_stmt 1 view .LVU105
 355 00fc 85B1     		cbz	r5, .L7
 494:src/menu.c    ****     int c;
 356              		.loc 1 494 23 is_stmt 0 view .LVU106
 357 00fe B945     		cmp	r9, r7
 358 0100 0EDB     		blt	.L7
 359              	.LBB58:
 509:src/menu.c    ****       width = str[1] & 0x1F;
 360              		.loc 1 509 8 view .LVU107
 361 0102 072D     		cmp	r5, #7
 362              	.LBE58:
 363 0104 009C     		ldr	r4, [sp]
 364              	.LBB59:
 495:src/menu.c    ****     int width;
 365              		.loc 1 495 5 is_stmt 1 view .LVU108
 496:src/menu.c    ****     unsigned char cmap[6];
 366              		.loc 1 496 5 view .LVU109
 497:src/menu.c    **** 
 367              		.loc 1 497 5 view .LVU110
 499:src/menu.c    ****     int current_smallp;
 368              		.loc 1 499 5 view .LVU111
 500:src/menu.c    **** 
 369              		.loc 1 500 5 view .LVU112
 509:src/menu.c    ****       width = str[1] & 0x1F;
 370              		.loc 1 509 5 view .LVU113
 509:src/menu.c    ****       width = str[1] & 0x1F;
 371              		.loc 1 509 8 is_stmt 0 view .LVU114
 372 0106 9AD0     		beq	.L39
 373              	.LVL29:
 374              	.L11:
 525:src/menu.c    ****       real_width = width = charlengths(c);
 375              		.loc 1 525 7 is_stmt 1 view .LVU115
 526:src/menu.c    ****       current_smallp = smallp;
 376              		.loc 1 526 28 is_stmt 0 view .LVU116
 377 0108 2846     		mov	r0, r5
 378 010a FFF7FEFF 		bl	charlengths
 379              	.LVL30:
 525:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 525 31 view .LVU117
 381 010e 019B     		ldr	r3, [sp, #4]
 382 0110 0133     		adds	r3, r3, #1
 383 0112 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccYL8bSL.s 			page 19


 384              	.LVL31:
 526:src/menu.c    ****       current_smallp = smallp;
 385              		.loc 1 526 7 is_stmt 1 view .LVU118
 527:src/menu.c    ****     }
 386              		.loc 1 527 7 view .LVU119
 527:src/menu.c    ****     }
 387              		.loc 1 527 22 is_stmt 0 view .LVU120
 388 0114 0023     		movs	r3, #0
 389              	.LVL32:
 527:src/menu.c    ****     }
 390              		.loc 1 527 22 view .LVU121
 391 0116 0093     		str	r3, [sp]
 392              	.LVL33:
 530:src/menu.c    ****       break;
 393              		.loc 1 530 11 view .LVU122
 394 0118 C319     		adds	r3, r0, r7
 395              	.LVL34:
 530:src/menu.c    ****       break;
 396              		.loc 1 530 8 view .LVU123
 397 011a 9945     		cmp	r9, r3
 526:src/menu.c    ****       current_smallp = smallp;
 398              		.loc 1 526 28 view .LVU124
 399 011c 0646     		mov	r6, r0
 530:src/menu.c    ****       break;
 400              		.loc 1 530 5 is_stmt 1 view .LVU125
 530:src/menu.c    ****       break;
 401              		.loc 1 530 8 is_stmt 0 view .LVU126
 402 011e A7DA     		bge	.L40
 403              	.LVL35:
 404              	.L7:
 530:src/menu.c    ****       break;
 405              		.loc 1 530 8 view .LVU127
 406              	.LBE59:
 548:src/menu.c    **** 
 407              		.loc 1 548 1 view .LVU128
 408 0120 0DF5097D 		add	sp, sp, #548
 409              		.cfi_remember_state
 410              		.cfi_def_cfa_offset 36
 411              		@ sp needed
 412 0124 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 413              	.LVL36:
 414              	.L34:
 415              		.cfi_restore_state
 416              	.LBB60:
 520:src/menu.c    ****       str += 3;
 417              		.loc 1 520 7 is_stmt 1 view .LVU129
 520:src/menu.c    ****       str += 3;
 418              		.loc 1 520 11 is_stmt 0 view .LVU130
 419 0128 019B     		ldr	r3, [sp, #4]
 420 012a 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 513:src/menu.c    **** 	break;
 421              		.loc 1 513 33 view .LVU131
 422 012c 0023     		movs	r3, #0
 423 012e 0093     		str	r3, [sp]
 424 0130 95E7     		b	.L15
 425              	.L42:
 426 0132 00BF     		.align	2
ARM GAS  /tmp/ccYL8bSL.s 			page 20


 427              	.L41:
 428 0134 00000000 		.word	RectPolConv
 429 0138 00000000 		.word	.LANCHOR0
 430              	.LBE60:
 431              		.cfi_endproc
 432              	.LFE37:
 434              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 435              		.align	2
 436              	.LC5:
 437 0000 53616D65 		.ascii	"Same display layout as the original WP34S,\000"
 437      20646973 
 437      706C6179 
 437      206C6179 
 437      6F757420 
 438 002b 00       		.align	2
 439              	.LC6:
 440 002c 616E6420 		.ascii	"and some annunciators renamed.\000"
 440      736F6D65 
 440      20616E6E 
 440      756E6369 
 440      61746F72 
 441 004b 00       		.align	2
 442              	.LC7:
 443 004c 496E636C 		.ascii	"Includes printing, stopwatch,\000"
 443      75646573 
 443      20707269 
 443      6E74696E 
 443      672C2073 
 444 006a 0000     		.align	2
 445              	.LC8:
 446 006c 656E7472 		.ascii	"entry RPN, extended file handling,\000"
 446      79205250 
 446      4E2C2065 
 446      7874656E 
 446      64656420 
 447 008f 00       		.align	2
 448              	.LC9:
 449 0090 75736572 		.ascii	"user-defined menus, and\000"
 449      2D646566 
 449      696E6564 
 449      206D656E 
 449      75732C20 
 450              		.align	2
 451              	.LC10:
 452 00a8 636F6D70 		.ascii	"complex lock mode.\000"
 452      6C657820 
 452      6C6F636B 
 452      206D6F64 
 452      652E00
 453 00bb 00       		.align	2
 454              	.LC11:
 455 00bc 4E656974 		.ascii	"Neither provided by          \000"
 455      68657220 
 455      70726F76 
 455      69646564 
 455      20627920 
 456 00da 0000     		.align	2
ARM GAS  /tmp/ccYL8bSL.s 			page 21


 457              	.LC12:
 458 00dc 6E6F7220 		.ascii	"nor supported by SwissMicros.\000"
 458      73757070 
 458      6F727465 
 458      64206279 
 458      20537769 
 459 00fa 0000     		.align	2
 460              	.LC13:
 461 00fc 20202020 		.ascii	"    Press EXIT key to continue...\000"
 461      50726573 
 461      73204558 
 461      4954206B 
 461      65792074 
 462 011e 0000     		.align	2
 463              	.LC4:
 464 0120 57502033 		.ascii	"WP 34C calculator for DM42: v     \000"
 464      34432063 
 464      616C6375 
 464      6C61746F 
 464      7220666F 
 465              		.section	.text.disp_about,"ax",%progbits
 466              		.align	1
 467              		.p2align 2,,3
 468              		.global	disp_about
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 472              		.fpu fpv4-sp-d16
 474              	disp_about:
 475              	.LFB5:
  75:src/menu.c    ****   char title[] = "WP 34C calculator for DM42: v     ";
 476              		.loc 1 75 19 is_stmt 1 view -0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 40
 479              		@ frame_needed = 0, uses_anonymous_args = 0
  76:src/menu.c    **** 
 480              		.loc 1 76 3 view .LVU133
  75:src/menu.c    ****   char title[] = "WP 34C calculator for DM42: v     ";
 481              		.loc 1 75 19 is_stmt 0 view .LVU134
 482 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 483              		.cfi_def_cfa_offset 24
 484              		.cfi_offset 4, -24
 485              		.cfi_offset 5, -20
 486              		.cfi_offset 6, -16
 487              		.cfi_offset 7, -12
 488              		.cfi_offset 8, -8
 489              		.cfi_offset 14, -4
  76:src/menu.c    **** 
 490              		.loc 1 76 8 view .LVU135
 491 0004 334E     		ldr	r6, .L45
  81:src/menu.c    **** 
 492              		.loc 1 81 3 view .LVU136
 493 0006 344C     		ldr	r4, .L45+4
  84:src/menu.c    ****   lcd_putsR(t24, title);
 494              		.loc 1 84 3 view .LVU137
 495 0008 DFF81481 		ldr	r8, .L45+76
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
ARM GAS  /tmp/ccYL8bSL.s 			page 22


 496              		.loc 1 85 3 view .LVU138
 497 000c 334F     		ldr	r7, .L45+8
  76:src/menu.c    **** 
 498              		.loc 1 76 8 view .LVU139
 499 000e 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
  75:src/menu.c    ****   char title[] = "WP 34C calculator for DM42: v     ";
 500              		.loc 1 75 19 view .LVU140
 501 0010 8AB0     		sub	sp, sp, #40
 502              		.cfi_def_cfa_offset 64
  76:src/menu.c    **** 
 503              		.loc 1 76 8 view .LVU141
 504 0012 01AD     		add	r5, sp, #4
 505 0014 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 506 0016 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 507 0018 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 508 001a 3368     		ldr	r3, [r6]
 509 001c 25F8023B 		strh	r3, [r5], #2	@ movhi
  78:src/menu.c    **** 
 510              		.loc 1 78 3 view .LVU142
 511 0020 2F49     		ldr	r1, .L45+12
 512 0022 0422     		movs	r2, #4
  76:src/menu.c    **** 
 513              		.loc 1 76 8 view .LVU143
 514 0024 1B0C     		lsrs	r3, r3, #16
  78:src/menu.c    **** 
 515              		.loc 1 78 3 view .LVU144
 516 0026 0DF12100 		add	r0, sp, #33
  76:src/menu.c    **** 
 517              		.loc 1 76 8 view .LVU145
 518 002a 2B70     		strb	r3, [r5]
  78:src/menu.c    **** 
 519              		.loc 1 78 3 is_stmt 1 view .LVU146
 520 002c FFF7FEFF 		bl	xcopy
 521              	.LVL37:
  80:src/menu.c    ****   lcd_writeClr(t24);
 522              		.loc 1 80 3 view .LVU147
 523 0030 2C4B     		ldr	r3, .L45+16
 524 0032 9847     		blx	r3
 525              	.LVL38:
  81:src/menu.c    **** 
 526              		.loc 1 81 3 view .LVU148
 527 0034 2C4B     		ldr	r3, .L45+20
 528 0036 606B     		ldr	r0, [r4, #52]
 529 0038 9847     		blx	r3
 530              	.LVL39:
  84:src/menu.c    ****   lcd_putsR(t24, title);
 531              		.loc 1 84 3 view .LVU149
 532 003a 606B     		ldr	r0, [r4, #52]
 533 003c 0522     		movs	r2, #5
 534 003e 0021     		movs	r1, #0
 535 0040 C047     		blx	r8
 536              	.LVL40:
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 537              		.loc 1 85 3 view .LVU150
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 538              		.loc 1 85 3 view .LVU151
 539 0042 606B     		ldr	r0, [r4, #52]
ARM GAS  /tmp/ccYL8bSL.s 			page 23


 540 0044 0125     		movs	r5, #1
 541 0046 4574     		strb	r5, [r0, #17]
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 542              		.loc 1 85 3 view .LVU152
 543 0048 01A9     		add	r1, sp, #4
 544 004a B847     		blx	r7
 545              	.LVL41:
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 546              		.loc 1 85 3 view .LVU153
 547 004c 636B     		ldr	r3, [r4, #52]
 548 004e 0026     		movs	r6, #0
 549 0050 5E74     		strb	r6, [r3, #17]
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 550              		.loc 1 85 3 view .LVU154
  86:src/menu.c    ****   t20->newln = 1;
 551              		.loc 1 86 3 view .LVU155
 552 0052 B3F90620 		ldrsh	r2, [r3, #6]
 553 0056 B3F90410 		ldrsh	r1, [r3, #4]
 554 005a 206B     		ldr	r0, [r4, #48]
 555 005c C047     		blx	r8
 556              	.LVL42:
  87:src/menu.c    **** #ifdef TOP_ROW
 557              		.loc 1 87 3 view .LVU156
 558 005e 206B     		ldr	r0, [r4, #48]
  93:src/menu.c    **** #endif
 559              		.loc 1 93 3 is_stmt 0 view .LVU157
 560 0060 2249     		ldr	r1, .L45+24
  87:src/menu.c    **** #ifdef TOP_ROW
 561              		.loc 1 87 14 view .LVU158
 562 0062 0575     		strb	r5, [r0, #20]
  93:src/menu.c    **** #endif
 563              		.loc 1 93 3 is_stmt 1 view .LVU159
 564 0064 B847     		blx	r7
 565              	.LVL43:
  95:src/menu.c    ****   lcd_puts(t20, "Includes printing, stopwatch,");
 566              		.loc 1 95 3 view .LVU160
 567 0066 206B     		ldr	r0, [r4, #48]
 568 0068 2149     		ldr	r1, .L45+28
 569 006a B847     		blx	r7
 570              	.LVL44:
  96:src/menu.c    ****   lcd_puts(t20, "entry RPN, extended file handling,");
 571              		.loc 1 96 3 view .LVU161
 572 006c 206B     		ldr	r0, [r4, #48]
 573 006e 2149     		ldr	r1, .L45+32
 574 0070 B847     		blx	r7
 575              	.LVL45:
  97:src/menu.c    ****   lcd_puts(t20, "user-defined menus, and");
 576              		.loc 1 97 3 view .LVU162
 577 0072 206B     		ldr	r0, [r4, #48]
 578 0074 2049     		ldr	r1, .L45+36
 579 0076 B847     		blx	r7
 580              	.LVL46:
  98:src/menu.c    ****   lcd_puts(t20, "complex lock mode.");
 581              		.loc 1 98 3 view .LVU163
 582 0078 206B     		ldr	r0, [r4, #48]
 583 007a 2049     		ldr	r1, .L45+40
 584 007c B847     		blx	r7
ARM GAS  /tmp/ccYL8bSL.s 			page 24


 585              	.LVL47:
  99:src/menu.c    **** 
 586              		.loc 1 99 3 view .LVU164
 587 007e 206B     		ldr	r0, [r4, #48]
 588 0080 1F49     		ldr	r1, .L45+44
 589 0082 B847     		blx	r7
 590              	.LVL48:
 101:src/menu.c    **** 
 591              		.loc 1 101 3 view .LVU165
 592 0084 206B     		ldr	r0, [r4, #48]
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 593              		.loc 1 104 3 is_stmt 0 view .LVU166
 594 0086 1F49     		ldr	r1, .L45+48
 101:src/menu.c    **** 
 595              		.loc 1 101 10 view .LVU167
 596 0088 C388     		ldrh	r3, [r0, #6]
 103:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 597              		.loc 1 103 15 view .LVU168
 598 008a 8574     		strb	r5, [r0, #18]
 101:src/menu.c    **** 
 599              		.loc 1 101 10 view .LVU169
 600 008c 0533     		adds	r3, r3, #5
 601 008e C380     		strh	r3, [r0, #6]	@ movhi
 103:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 602              		.loc 1 103 3 is_stmt 1 view .LVU170
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 603              		.loc 1 104 3 view .LVU171
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 604              		.loc 1 104 3 view .LVU172
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 605              		.loc 1 104 3 view .LVU173
 606 0090 4574     		strb	r5, [r0, #17]
 607 0092 B847     		blx	r7
 608              	.LVL49:
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 609              		.loc 1 104 3 view .LVU174
 610 0094 206B     		ldr	r0, [r4, #48]
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 611              		.loc 1 104 3 view .LVU175
 105:src/menu.c    ****   t20->bgfill = 0;
 612              		.loc 1 105 3 view .LVU176
 105:src/menu.c    ****   t20->bgfill = 0;
 613              		.loc 1 105 3 view .LVU177
 614 0096 1C49     		ldr	r1, .L45+52
 615 0098 4574     		strb	r5, [r0, #17]
 105:src/menu.c    ****   t20->bgfill = 0;
 616              		.loc 1 105 3 view .LVU178
 617 009a B847     		blx	r7
 618              	.LVL50:
 105:src/menu.c    ****   t20->bgfill = 0;
 619              		.loc 1 105 3 view .LVU179
 620 009c 236B     		ldr	r3, [r4, #48]
 109:src/menu.c    ****   t24->x = 20;
 621              		.loc 1 109 20 is_stmt 0 view .LVU180
 622 009e 1B4A     		ldr	r2, .L45+56
 105:src/menu.c    ****   t20->bgfill = 0;
 623              		.loc 1 105 3 view .LVU181
ARM GAS  /tmp/ccYL8bSL.s 			page 25


 624 00a0 5E74     		strb	r6, [r3, #17]
 105:src/menu.c    ****   t20->bgfill = 0;
 625              		.loc 1 105 3 is_stmt 1 view .LVU182
 106:src/menu.c    ****   t20->newln = 0;
 626              		.loc 1 106 3 view .LVU183
 106:src/menu.c    ****   t20->newln = 0;
 627              		.loc 1 106 15 is_stmt 0 view .LVU184
 628 00a2 9E74     		strb	r6, [r3, #18]
 107:src/menu.c    ****   
 629              		.loc 1 107 3 is_stmt 1 view .LVU185
 107:src/menu.c    ****   
 630              		.loc 1 107 14 is_stmt 0 view .LVU186
 631 00a4 1E75     		strb	r6, [r3, #20]
 109:src/menu.c    ****   t24->x = 20;
 632              		.loc 1 109 3 is_stmt 1 view .LVU187
 109:src/menu.c    ****   t24->x = 20;
 633              		.loc 1 109 20 is_stmt 0 view .LVU188
 634 00a6 606B     		ldr	r0, [r4, #52]
 635 00a8 9047     		blx	r2
 636              	.LVL51:
 109:src/menu.c    ****   t24->x = 20;
 637              		.loc 1 109 3 view .LVU189
 638 00aa 636B     		ldr	r3, [r4, #52]
 111:src/menu.c    **** 
 639              		.loc 1 111 3 view .LVU190
 640 00ac 184A     		ldr	r2, .L45+60
 641 00ae 5D74     		strb	r5, [r3, #17]
 109:src/menu.c    ****   t24->x = 20;
 642              		.loc 1 109 39 view .LVU191
 643 00b0 C0F1EB00 		rsb	r0, r0, #235
 110:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 644              		.loc 1 110 10 view .LVU192
 645 00b4 1421     		movs	r1, #20
 109:src/menu.c    ****   t24->x = 20;
 646              		.loc 1 109 10 view .LVU193
 647 00b6 D880     		strh	r0, [r3, #6]	@ movhi
 110:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 648              		.loc 1 110 3 is_stmt 1 view .LVU194
 110:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 649              		.loc 1 110 10 is_stmt 0 view .LVU195
 650 00b8 9980     		strh	r1, [r3, #4]	@ movhi
 111:src/menu.c    **** 
 651              		.loc 1 111 3 is_stmt 1 view .LVU196
 111:src/menu.c    **** 
 652              		.loc 1 111 3 view .LVU197
 111:src/menu.c    **** 
 653              		.loc 1 111 3 view .LVU198
 654 00ba 1846     		mov	r0, r3
 655 00bc 1549     		ldr	r1, .L45+64
 656 00be 9047     		blx	r2
 657              	.LVL52:
 111:src/menu.c    **** 
 658              		.loc 1 111 3 view .LVU199
 659 00c0 626B     		ldr	r2, [r4, #52]
 113:src/menu.c    **** 
 660              		.loc 1 113 3 is_stmt 0 view .LVU200
 661 00c2 154B     		ldr	r3, .L45+68
ARM GAS  /tmp/ccYL8bSL.s 			page 26


 111:src/menu.c    **** 
 662              		.loc 1 111 3 view .LVU201
 663 00c4 5674     		strb	r6, [r2, #17]
 111:src/menu.c    **** 
 664              		.loc 1 111 3 is_stmt 1 view .LVU202
 113:src/menu.c    **** 
 665              		.loc 1 113 3 view .LVU203
 666 00c6 9847     		blx	r3
 667              	.LVL53:
 115:src/menu.c    **** }
 668              		.loc 1 115 3 view .LVU204
 669 00c8 144B     		ldr	r3, .L45+72
 670 00ca 9847     		blx	r3
 671              	.LVL54:
 116:src/menu.c    **** 
 672              		.loc 1 116 1 is_stmt 0 view .LVU205
 673 00cc 0AB0     		add	sp, sp, #40
 674              		.cfi_def_cfa_offset 24
 675              		@ sp needed
 676 00ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 677              	.L46:
 678 00d2 00BF     		.align	2
 679              	.L45:
 680 00d4 20010000 		.word	.LC4
 681 00d8 00200010 		.word	268443648
 682 00dc 7D020008 		.word	134218365
 683 00e0 00000000 		.word	SvnRevision
 684 00e4 2D020008 		.word	134218285
 685 00e8 65020008 		.word	134218341
 686 00ec 00000000 		.word	.LC5
 687 00f0 2C000000 		.word	.LC6
 688 00f4 4C000000 		.word	.LC7
 689 00f8 6C000000 		.word	.LC8
 690 00fc 90000000 		.word	.LC9
 691 0100 A8000000 		.word	.LC10
 692 0104 BC000000 		.word	.LC11
 693 0108 DC000000 		.word	.LC12
 694 010c 71020008 		.word	134218353
 695 0110 B1020008 		.word	134218417
 696 0114 FC000000 		.word	.LC13
 697 0118 31020008 		.word	134218289
 698 011c 99030008 		.word	134218649
 699 0120 6D020008 		.word	134218349
 700              		.cfi_endproc
 701              	.LFE5:
 703              		.section	.text.run_menu_item,"ax",%progbits
 704              		.align	1
 705              		.p2align 2,,3
 706              		.global	run_menu_item
 707              		.syntax unified
 708              		.thumb
 709              		.thumb_func
 710              		.fpu fpv4-sp-d16
 712              	run_menu_item:
 713              	.LVL55:
 714              	.LFB3:
  44:src/menu.c    ****   int ret = 0;
ARM GAS  /tmp/ccYL8bSL.s 			page 27


 715              		.loc 1 44 36 is_stmt 1 view -0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
  45:src/menu.c    **** 
 719              		.loc 1 45 3 view .LVU207
  47:src/menu.c    ****     case MI_ABOUT_PGM:
 720              		.loc 1 47 3 view .LVU208
 721 0000 0B28     		cmp	r0, #11
 722 0002 04D1     		bne	.L49
  49:src/menu.c    ****       break;
 723              		.loc 1 49 7 view .LVU209
  44:src/menu.c    ****   int ret = 0;
 724              		.loc 1 44 36 is_stmt 0 view .LVU210
 725 0004 08B5     		push	{r3, lr}
 726              		.cfi_def_cfa_offset 8
 727              		.cfi_offset 3, -8
 728              		.cfi_offset 14, -4
  49:src/menu.c    ****       break;
 729              		.loc 1 49 7 view .LVU211
 730 0006 FFF7FEFF 		bl	disp_about
 731              	.LVL56:
  50:src/menu.c    **** 
 732              		.loc 1 50 7 is_stmt 1 view .LVU212
  45:src/menu.c    **** 
 733              		.loc 1 45 7 is_stmt 0 view .LVU213
 734 000a 0020     		movs	r0, #0
  58:src/menu.c    **** 
 735              		.loc 1 58 1 view .LVU214
 736 000c 08BD     		pop	{r3, pc}
 737              	.LVL57:
 738              	.L49:
 739              		.cfi_def_cfa_offset 0
 740              		.cfi_restore 3
 741              		.cfi_restore 14
  53:src/menu.c    ****       break;
 742              		.loc 1 53 11 view .LVU215
 743 000e 4FF0FF30 		mov	r0, #-1
 744              	.LVL58:
  57:src/menu.c    **** }
 745              		.loc 1 57 3 is_stmt 1 view .LVU216
  58:src/menu.c    **** 
 746              		.loc 1 58 1 is_stmt 0 view .LVU217
 747 0012 7047     		bx	lr
 748              		.cfi_endproc
 749              	.LFE3:
 751              		.section	.text.set_menu,"ax",%progbits
 752              		.align	1
 753              		.p2align 2,,3
 754              		.global	set_menu
 755              		.syntax unified
 756              		.thumb
 757              		.thumb_func
 758              		.fpu fpv4-sp-d16
 760              	set_menu:
 761              	.LVL59:
 762              	.LFB6:
ARM GAS  /tmp/ccYL8bSL.s 			page 28


 122:src/menu.c    ****   menu_name m = current_menu;
 763              		.loc 1 122 38 is_stmt 1 view -0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767              		@ link register save eliminated.
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 768              		.loc 1 123 3 view .LVU219
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 769              		.loc 1 123 13 is_stmt 0 view .LVU220
 770 0000 0A4A     		ldr	r2, .L66
 771 0002 92F90030 		ldrsb	r3, [r2]
 772              	.LVL60:
 124:src/menu.c    ****     current_menu = default_menu;
 773              		.loc 1 124 3 is_stmt 1 view .LVU221
 124:src/menu.c    ****     current_menu = default_menu;
 774              		.loc 1 124 6 is_stmt 0 view .LVU222
 775 0006 8342     		cmp	r3, r0
 776 0008 0CD0     		beq	.L65
 127:src/menu.c    ****     current_menu = last_menu;
 777              		.loc 1 127 8 is_stmt 1 view .LVU223
 127:src/menu.c    ****     current_menu = last_menu;
 778              		.loc 1 127 11 is_stmt 0 view .LVU224
 779 000a 411C     		adds	r1, r0, #1
 128:src/menu.c    ****   }
 780              		.loc 1 128 5 is_stmt 1 view .LVU225
 128:src/menu.c    ****   }
 781              		.loc 1 128 18 is_stmt 0 view .LVU226
 782 000c 09BF     		itett	eq
 783 000e 0849     		ldreq	r1, .L66+4
 131:src/menu.c    ****   }
 784              		.loc 1 131 18 view .LVU227
 785 0010 1070     		strbne	r0, [r2]
 128:src/menu.c    ****   }
 786              		.loc 1 128 18 view .LVU228
 787 0012 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 788 0014 1170     		strbeq	r1, [r2]
 131:src/menu.c    ****   }
 789              		.loc 1 131 5 is_stmt 1 view .LVU229
 790              	.L56:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 791              		.loc 1 133 3 view .LVU230
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 792              		.loc 1 133 6 is_stmt 0 view .LVU231
 793 0016 092B     		cmp	r3, #9
 794 0018 03D0     		beq	.L54
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 795              		.loc 1 133 23 discriminator 1 view .LVU232
 796 001a 102B     		cmp	r3, #16
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 797              		.loc 1 133 43 is_stmt 1 discriminator 1 view .LVU233
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 798              		.loc 1 133 53 is_stmt 0 discriminator 1 view .LVU234
 799 001c 1CBF     		itt	ne
 800 001e 044A     		ldrne	r2, .L66+4
 801 0020 1370     		strbne	r3, [r2]
 802              	.L54:
ARM GAS  /tmp/ccYL8bSL.s 			page 29


 135:src/menu.c    **** 
 803              		.loc 1 135 1 view .LVU235
 804 0022 7047     		bx	lr
 805              	.L65:
 125:src/menu.c    ****   }
 806              		.loc 1 125 5 is_stmt 1 view .LVU236
 125:src/menu.c    ****   }
 807              		.loc 1 125 18 is_stmt 0 view .LVU237
 808 0024 0349     		ldr	r1, .L66+8
 809 0026 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 810 0028 1170     		strb	r1, [r2]
 811 002a F4E7     		b	.L56
 812              	.L67:
 813              		.align	2
 814              	.L66:
 815 002c 00000000 		.word	.LANCHOR1
 816 0030 00000000 		.word	.LANCHOR3
 817 0034 00000000 		.word	.LANCHOR2
 818              		.cfi_endproc
 819              	.LFE6:
 821              		.section	.text.set_default_menu,"ax",%progbits
 822              		.align	1
 823              		.p2align 2,,3
 824              		.global	set_default_menu
 825              		.syntax unified
 826              		.thumb
 827              		.thumb_func
 828              		.fpu fpv4-sp-d16
 830              	set_default_menu:
 831              	.LFB7:
 137:src/menu.c    ****   set_menu (default_menu);
 832              		.loc 1 137 26 is_stmt 1 view -0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 0
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 836              		@ link register save eliminated.
 138:src/menu.c    **** }
 837              		.loc 1 138 3 view .LVU239
 838 0000 0A4B     		ldr	r3, .L80
 839              	.LBB61:
 840              	.LBB62:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 841              		.loc 1 123 13 is_stmt 0 view .LVU240
 842 0002 0B49     		ldr	r1, .L80+4
 843              	.LBE62:
 844              	.LBE61:
 138:src/menu.c    **** }
 845              		.loc 1 138 3 view .LVU241
 846 0004 93F90020 		ldrsb	r2, [r3]
 847              	.LVL61:
 848              	.LBB65:
 849              	.LBI61:
 122:src/menu.c    ****   menu_name m = current_menu;
 850              		.loc 1 122 6 is_stmt 1 view .LVU242
 851              	.LBB63:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 852              		.loc 1 123 3 view .LVU243
ARM GAS  /tmp/ccYL8bSL.s 			page 30


 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 853              		.loc 1 123 13 is_stmt 0 view .LVU244
 854 0008 91F90030 		ldrsb	r3, [r1]
 855              	.LVL62:
 124:src/menu.c    ****     current_menu = default_menu;
 856              		.loc 1 124 3 is_stmt 1 view .LVU245
 124:src/menu.c    ****     current_menu = default_menu;
 857              		.loc 1 124 6 is_stmt 0 view .LVU246
 858 000c 9A42     		cmp	r2, r3
 859 000e 0BD0     		beq	.L79
 127:src/menu.c    ****     current_menu = last_menu;
 860              		.loc 1 127 8 is_stmt 1 view .LVU247
 127:src/menu.c    ****     current_menu = last_menu;
 861              		.loc 1 127 11 is_stmt 0 view .LVU248
 862 0010 501C     		adds	r0, r2, #1
 128:src/menu.c    ****   }
 863              		.loc 1 128 5 is_stmt 1 view .LVU249
 128:src/menu.c    ****   }
 864              		.loc 1 128 18 is_stmt 0 view .LVU250
 865 0012 04BF     		itt	eq
 866 0014 074A     		ldreq	r2, .L80+8
 867              	.LVL63:
 128:src/menu.c    ****   }
 868              		.loc 1 128 18 view .LVU251
 869 0016 1278     		ldrbeq	r2, [r2]	@ zero_extendqisi2
 131:src/menu.c    ****   }
 870              		.loc 1 131 5 is_stmt 1 view .LVU252
 131:src/menu.c    ****   }
 871              		.loc 1 131 18 is_stmt 0 view .LVU253
 872 0018 0A70     		strb	r2, [r1]
 873              	.LVL64:
 874              	.L70:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 875              		.loc 1 133 3 is_stmt 1 view .LVU254
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 876              		.loc 1 133 6 is_stmt 0 view .LVU255
 877 001a 092B     		cmp	r3, #9
 878 001c 03D0     		beq	.L68
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 879              		.loc 1 133 23 view .LVU256
 880 001e 102B     		cmp	r3, #16
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 881              		.loc 1 133 43 is_stmt 1 view .LVU257
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 882              		.loc 1 133 53 is_stmt 0 view .LVU258
 883 0020 1CBF     		itt	ne
 884 0022 044A     		ldrne	r2, .L80+8
 885 0024 1370     		strbne	r3, [r2]
 886              	.LVL65:
 887              	.L68:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 888              		.loc 1 133 53 view .LVU259
 889              	.LBE63:
 890              	.LBE65:
 139:src/menu.c    **** 
 891              		.loc 1 139 1 view .LVU260
 892 0026 7047     		bx	lr
ARM GAS  /tmp/ccYL8bSL.s 			page 31


 893              	.LVL66:
 894              	.L79:
 895              	.LBB66:
 896              	.LBB64:
 125:src/menu.c    ****   }
 897              		.loc 1 125 5 is_stmt 1 view .LVU261
 125:src/menu.c    ****   }
 898              		.loc 1 125 18 is_stmt 0 view .LVU262
 899 0028 0B70     		strb	r3, [r1]
 900 002a F6E7     		b	.L70
 901              	.L81:
 902              		.align	2
 903              	.L80:
 904 002c 00000000 		.word	.LANCHOR2
 905 0030 00000000 		.word	.LANCHOR1
 906 0034 00000000 		.word	.LANCHOR3
 907              	.LBE64:
 908              	.LBE66:
 909              		.cfi_endproc
 910              	.LFE7:
 912              		.section	.text.toggle_default_menu,"ax",%progbits
 913              		.align	1
 914              		.p2align 2,,3
 915              		.global	toggle_default_menu
 916              		.syntax unified
 917              		.thumb
 918              		.thumb_func
 919              		.fpu fpv4-sp-d16
 921              	toggle_default_menu:
 922              	.LFB8:
 141:src/menu.c    ****   if (current_menu == M_Blank) {
 923              		.loc 1 141 29 is_stmt 1 view -0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 0
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 927              		@ link register save eliminated.
 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 928              		.loc 1 142 3 view .LVU264
 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 929              		.loc 1 142 20 is_stmt 0 view .LVU265
 930 0000 104A     		ldr	r2, .L98
 143:src/menu.c    ****     return;
 931              		.loc 1 143 33 view .LVU266
 932 0002 1149     		ldr	r1, .L98+4
 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 933              		.loc 1 142 20 view .LVU267
 934 0004 92F90030 		ldrsb	r3, [r2]
 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 935              		.loc 1 142 6 view .LVU268
 936 0008 ABB1     		cbz	r3, .L95
 146:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 937              		.loc 1 146 8 is_stmt 1 view .LVU269
 146:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 938              		.loc 1 146 11 is_stmt 0 view .LVU270
 939 000a 0F2B     		cmp	r3, #15
 940 000c 0FD0     		beq	.L96
 150:src/menu.c    ****   }
ARM GAS  /tmp/ccYL8bSL.s 			page 32


 941              		.loc 1 150 5 is_stmt 1 view .LVU271
 942              	.LBB67:
 943              	.LBI67:
 137:src/menu.c    ****   set_menu (default_menu);
 944              		.loc 1 137 6 view .LVU272
 945              	.LBB68:
 138:src/menu.c    **** }
 946              		.loc 1 138 3 view .LVU273
 947 000e 91F90010 		ldrsb	r1, [r1]
 948              	.LVL67:
 949              	.LBB69:
 950              	.LBI69:
 122:src/menu.c    ****   menu_name m = current_menu;
 951              		.loc 1 122 6 view .LVU274
 952              	.LBB70:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 953              		.loc 1 123 3 view .LVU275
 124:src/menu.c    ****     current_menu = default_menu;
 954              		.loc 1 124 3 view .LVU276
 124:src/menu.c    ****     current_menu = default_menu;
 955              		.loc 1 124 6 is_stmt 0 view .LVU277
 956 0012 8B42     		cmp	r3, r1
 957 0014 13D0     		beq	.L97
 127:src/menu.c    ****     current_menu = last_menu;
 958              		.loc 1 127 8 is_stmt 1 view .LVU278
 127:src/menu.c    ****     current_menu = last_menu;
 959              		.loc 1 127 11 is_stmt 0 view .LVU279
 960 0016 481C     		adds	r0, r1, #1
 128:src/menu.c    ****   }
 961              		.loc 1 128 5 is_stmt 1 view .LVU280
 128:src/menu.c    ****   }
 962              		.loc 1 128 18 is_stmt 0 view .LVU281
 963 0018 04BF     		itt	eq
 964 001a 0C49     		ldreq	r1, .L98+8
 965              	.LVL68:
 128:src/menu.c    ****   }
 966              		.loc 1 128 18 view .LVU282
 967 001c 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 131:src/menu.c    ****   }
 968              		.loc 1 131 5 is_stmt 1 view .LVU283
 131:src/menu.c    ****   }
 969              		.loc 1 131 18 is_stmt 0 view .LVU284
 970 001e 1170     		strb	r1, [r2]
 971              	.LVL69:
 972              	.L87:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 973              		.loc 1 133 3 is_stmt 1 view .LVU285
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 974              		.loc 1 133 6 is_stmt 0 view .LVU286
 975 0020 092B     		cmp	r3, #9
 976 0022 03D0     		beq	.L82
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 977              		.loc 1 133 23 view .LVU287
 978 0024 102B     		cmp	r3, #16
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 979              		.loc 1 133 43 is_stmt 1 view .LVU288
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
ARM GAS  /tmp/ccYL8bSL.s 			page 33


 980              		.loc 1 133 53 is_stmt 0 view .LVU289
 981 0026 1CBF     		itt	ne
 982 0028 084A     		ldrne	r2, .L98+8
 983 002a 1370     		strbne	r3, [r2]
 984              	.LVL70:
 985              	.L82:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 986              		.loc 1 133 53 view .LVU290
 987              	.LBE70:
 988              	.LBE69:
 989              	.LBE68:
 990              	.LBE67:
 152:src/menu.c    **** 
 991              		.loc 1 152 1 view .LVU291
 992 002c 7047     		bx	lr
 993              	.L96:
 147:src/menu.c    ****   }
 994              		.loc 1 147 5 is_stmt 1 view .LVU292
 147:src/menu.c    ****   }
 995              		.loc 1 147 33 is_stmt 0 view .LVU293
 996 002e 0023     		movs	r3, #0
 997 0030 0B70     		strb	r3, [r1]
 147:src/menu.c    ****   }
 998              		.loc 1 147 18 view .LVU294
 999 0032 1370     		strb	r3, [r2]
 1000 0034 7047     		bx	lr
 1001              	.L95:
 143:src/menu.c    ****     return;
 1002              		.loc 1 143 5 is_stmt 1 view .LVU295
 143:src/menu.c    ****     return;
 1003              		.loc 1 143 33 is_stmt 0 view .LVU296
 1004 0036 0F23     		movs	r3, #15
 1005 0038 0B70     		strb	r3, [r1]
 143:src/menu.c    ****     return;
 1006              		.loc 1 143 18 view .LVU297
 1007 003a 1370     		strb	r3, [r2]
 144:src/menu.c    ****   }
 1008              		.loc 1 144 5 is_stmt 1 view .LVU298
 1009 003c 7047     		bx	lr
 1010              	.LVL71:
 1011              	.L97:
 1012              	.LBB74:
 1013              	.LBB73:
 1014              	.LBB72:
 1015              	.LBB71:
 125:src/menu.c    ****   }
 1016              		.loc 1 125 5 view .LVU299
 125:src/menu.c    ****   }
 1017              		.loc 1 125 18 is_stmt 0 view .LVU300
 1018 003e 1370     		strb	r3, [r2]
 1019 0040 EEE7     		b	.L87
 1020              	.L99:
 1021 0042 00BF     		.align	2
 1022              	.L98:
 1023 0044 00000000 		.word	.LANCHOR1
 1024 0048 00000000 		.word	.LANCHOR2
 1025 004c 00000000 		.word	.LANCHOR3
ARM GAS  /tmp/ccYL8bSL.s 			page 34


 1026              	.LBE71:
 1027              	.LBE72:
 1028              	.LBE73:
 1029              	.LBE74:
 1030              		.cfi_endproc
 1031              	.LFE8:
 1033              		.section	.text.get_menu,"ax",%progbits
 1034              		.align	1
 1035              		.p2align 2,,3
 1036              		.global	get_menu
 1037              		.syntax unified
 1038              		.thumb
 1039              		.thumb_func
 1040              		.fpu fpv4-sp-d16
 1042              	get_menu:
 1043              	.LFB9:
 154:src/menu.c    ****   return current_menu;
 1044              		.loc 1 154 23 is_stmt 1 view -0
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 0
 1047              		@ frame_needed = 0, uses_anonymous_args = 0
 1048              		@ link register save eliminated.
 155:src/menu.c    **** }
 1049              		.loc 1 155 3 view .LVU302
 155:src/menu.c    **** }
 1050              		.loc 1 155 10 is_stmt 0 view .LVU303
 1051 0000 014B     		ldr	r3, .L101
 156:src/menu.c    **** 
 1052              		.loc 1 156 1 view .LVU304
 1053 0002 93F90000 		ldrsb	r0, [r3]
 1054 0006 7047     		bx	lr
 1055              	.L102:
 1056              		.align	2
 1057              	.L101:
 1058 0008 00000000 		.word	.LANCHOR1
 1059              		.cfi_endproc
 1060              	.LFE9:
 1062              		.section	.text.get_last_menu,"ax",%progbits
 1063              		.align	1
 1064              		.p2align 2,,3
 1065              		.global	get_last_menu
 1066              		.syntax unified
 1067              		.thumb
 1068              		.thumb_func
 1069              		.fpu fpv4-sp-d16
 1071              	get_last_menu:
 1072              	.LFB10:
 158:src/menu.c    ****   return last_menu;
 1073              		.loc 1 158 28 is_stmt 1 view -0
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 0
 1076              		@ frame_needed = 0, uses_anonymous_args = 0
 1077              		@ link register save eliminated.
 159:src/menu.c    **** }
 1078              		.loc 1 159 3 view .LVU306
 159:src/menu.c    **** }
 1079              		.loc 1 159 10 is_stmt 0 view .LVU307
ARM GAS  /tmp/ccYL8bSL.s 			page 35


 1080 0000 014B     		ldr	r3, .L104
 160:src/menu.c    **** 
 1081              		.loc 1 160 1 view .LVU308
 1082 0002 93F90000 		ldrsb	r0, [r3]
 1083 0006 7047     		bx	lr
 1084              	.L105:
 1085              		.align	2
 1086              	.L104:
 1087 0008 00000000 		.word	.LANCHOR3
 1088              		.cfi_endproc
 1089              	.LFE10:
 1091              		.section	.text.set_last_menu,"ax",%progbits
 1092              		.align	1
 1093              		.p2align 2,,3
 1094              		.global	set_last_menu
 1095              		.syntax unified
 1096              		.thumb
 1097              		.thumb_func
 1098              		.fpu fpv4-sp-d16
 1100              	set_last_menu:
 1101              	.LFB12:
 166:src/menu.c    ****   set_menu (M_Last);
 1102              		.loc 1 166 23 is_stmt 1 view -0
 1103              		.cfi_startproc
 1104              		@ args = 0, pretend = 0, frame = 0
 1105              		@ frame_needed = 0, uses_anonymous_args = 0
 1106              		@ link register save eliminated.
 167:src/menu.c    **** }
 1107              		.loc 1 167 3 view .LVU310
 1108              	.LVL72:
 1109              	.LBB75:
 1110              	.LBI75:
 122:src/menu.c    ****   menu_name m = current_menu;
 1111              		.loc 1 122 6 view .LVU311
 1112              	.LBB76:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1113              		.loc 1 123 3 view .LVU312
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1114              		.loc 1 123 13 is_stmt 0 view .LVU313
 1115 0000 0A4A     		ldr	r2, .L119
 1116 0002 92F90030 		ldrsb	r3, [r2]
 1117              	.LVL73:
 124:src/menu.c    ****     current_menu = default_menu;
 1118              		.loc 1 124 3 is_stmt 1 view .LVU314
 124:src/menu.c    ****     current_menu = default_menu;
 1119              		.loc 1 124 6 is_stmt 0 view .LVU315
 1120 0006 591C     		adds	r1, r3, #1
 1121 0008 09D0     		beq	.L116
 127:src/menu.c    ****     current_menu = last_menu;
 1122              		.loc 1 127 8 is_stmt 1 view .LVU316
 128:src/menu.c    ****   }
 1123              		.loc 1 128 5 view .LVU317
 128:src/menu.c    ****   }
 1124              		.loc 1 128 18 is_stmt 0 view .LVU318
 1125 000a 0949     		ldr	r1, .L119+4
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1126              		.loc 1 133 6 view .LVU319
ARM GAS  /tmp/ccYL8bSL.s 			page 36


 1127 000c 092B     		cmp	r3, #9
 128:src/menu.c    ****   }
 1128              		.loc 1 128 18 view .LVU320
 1129 000e 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1130 0010 1070     		strb	r0, [r2]
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1131              		.loc 1 133 3 is_stmt 1 view .LVU321
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1132              		.loc 1 133 6 is_stmt 0 view .LVU322
 1133 0012 00D1     		bne	.L117
 1134              	.L106:
 1135              	.LBE76:
 1136              	.LBE75:
 168:src/menu.c    **** 
 1137              		.loc 1 168 1 view .LVU323
 1138 0014 7047     		bx	lr
 1139              	.L117:
 1140              	.LBB79:
 1141              	.LBB77:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1142              		.loc 1 133 23 view .LVU324
 1143 0016 102B     		cmp	r3, #16
 1144 0018 FCD0     		beq	.L106
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1145              		.loc 1 133 43 is_stmt 1 view .LVU325
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1146              		.loc 1 133 53 is_stmt 0 view .LVU326
 1147 001a 0B70     		strb	r3, [r1]
 1148              	.LVL74:
 1149              	.L118:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1150              		.loc 1 133 53 view .LVU327
 1151              	.LBE77:
 1152              	.LBE79:
 168:src/menu.c    **** 
 1153              		.loc 1 168 1 view .LVU328
 1154 001c 7047     		bx	lr
 1155              	.LVL75:
 1156              	.L116:
 1157              	.LBB80:
 1158              	.LBB78:
 125:src/menu.c    ****   }
 1159              		.loc 1 125 5 is_stmt 1 view .LVU329
 125:src/menu.c    ****   }
 1160              		.loc 1 125 18 is_stmt 0 view .LVU330
 1161 001e 0548     		ldr	r0, .L119+8
 1162 0020 0349     		ldr	r1, .L119+4
 1163 0022 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1164 0024 1070     		strb	r0, [r2]
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1165              		.loc 1 133 3 is_stmt 1 view .LVU331
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1166              		.loc 1 133 43 view .LVU332
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1167              		.loc 1 133 53 is_stmt 0 view .LVU333
 1168 0026 0B70     		strb	r3, [r1]
 1169              	.LVL76:
ARM GAS  /tmp/ccYL8bSL.s 			page 37


 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1170              		.loc 1 133 53 view .LVU334
 1171 0028 F8E7     		b	.L118
 1172              	.L120:
 1173 002a 00BF     		.align	2
 1174              	.L119:
 1175 002c 00000000 		.word	.LANCHOR1
 1176 0030 00000000 		.word	.LANCHOR3
 1177 0034 00000000 		.word	.LANCHOR2
 1178              	.LBE78:
 1179              	.LBE80:
 1180              		.cfi_endproc
 1181              	.LFE12:
 1183              		.section	.text.mdot,"ax",%progbits
 1184              		.align	1
 1185              		.p2align 2,,3
 1186              		.global	mdot
 1187              		.syntax unified
 1188              		.thumb
 1189              		.thumb_func
 1190              		.fpu fpv4-sp-d16
 1192              	mdot:
 1193              	.LVL77:
 1194              	.LFB14:
 570:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1195              		.loc 1 570 40 is_stmt 1 view -0
 1196              		.cfi_startproc
 1197              		@ args = 0, pretend = 0, frame = 0
 1198              		@ frame_needed = 0, uses_anonymous_args = 0
 1199              		@ link register save eliminated.
 571:src/menu.c    ****   if (on) {
 1200              		.loc 1 571 3 view .LVU336
 571:src/menu.c    ****   if (on) {
 1201              		.loc 1 571 6 is_stmt 0 view .LVU337
 1202 0000 C728     		cmp	r0, #199
 1203 0002 1AD8     		bhi	.L125
 1204              	.LVL78:
 1205              	.LBB83:
 1206              	.LBI83:
 570:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1207              		.loc 1 570 6 is_stmt 1 view .LVU338
 1208              	.LBB84:
 572:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1209              		.loc 1 572 3 view .LVU339
 1210              	.LBE84:
 1211              	.LBE83:
 570:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1212              		.loc 1 570 40 is_stmt 0 view .LVU340
 1213 0004 10B4     		push	{r4}
 1214              		.cfi_def_cfa_offset 4
 1215              		.cfi_offset 4, -4
 1216              	.LBB87:
 1217              	.LBB85:
 572:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1218              		.loc 1 572 6 view .LVU341
 1219 0006 63B9     		cbnz	r3, .L128
 1220              		.loc 1 576 5 is_stmt 1 view .LVU342
ARM GAS  /tmp/ccYL8bSL.s 			page 38


 1221              		.loc 1 576 17 is_stmt 0 view .LVU343
 1222 0008 0C4B     		ldr	r3, .L129
 1223              	.LVL79:
 1224              		.loc 1 576 17 view .LVU344
 1225 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1226              	.LVL80:
 1227              		.loc 1 576 25 view .LVU345
 1228 000e 0124     		movs	r4, #1
 1229              		.loc 1 576 17 view .LVU346
 1230 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1231              		.loc 1 576 25 view .LVU347
 1232 0012 04FA01F1 		lsl	r1, r4, r1
 1233              	.LVL81:
 1234              		.loc 1 576 17 view .LVU348
 1235 0016 23EA0101 		bic	r1, r3, r1
 1236 001a 8154     		strb	r1, [r0, r2]
 1237              	.LVL82:
 1238              		.loc 1 576 17 view .LVU349
 1239              	.LBE85:
 1240              	.LBE87:
 577:src/menu.c    ****   }
 578:src/menu.c    **** }
 1241              		.loc 1 578 1 view .LVU350
 1242 001c 5DF8044B 		ldr	r4, [sp], #4
 1243              		.cfi_remember_state
 1244              		.cfi_restore 4
 1245              		.cfi_def_cfa_offset 0
 1246 0020 7047     		bx	lr
 1247              	.LVL83:
 1248              	.L128:
 1249              		.cfi_restore_state
 1250              	.LBB88:
 1251              	.LBB86:
 573:src/menu.c    ****   }
 1252              		.loc 1 573 5 is_stmt 1 view .LVU351
 573:src/menu.c    ****   }
 1253              		.loc 1 573 17 is_stmt 0 view .LVU352
 1254 0022 064B     		ldr	r3, .L129
 1255              	.LVL84:
 573:src/menu.c    ****   }
 1256              		.loc 1 573 17 view .LVU353
 1257 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1258              	.LVL85:
 573:src/menu.c    ****   }
 1259              		.loc 1 573 24 view .LVU354
 1260 0028 0124     		movs	r4, #1
 573:src/menu.c    ****   }
 1261              		.loc 1 573 17 view .LVU355
 1262 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 573:src/menu.c    ****   }
 1263              		.loc 1 573 24 view .LVU356
 1264 002c 04FA01F1 		lsl	r1, r4, r1
 1265              	.LVL86:
 573:src/menu.c    ****   }
 1266              		.loc 1 573 17 view .LVU357
 1267 0030 1943     		orrs	r1, r1, r3
 1268 0032 8154     		strb	r1, [r0, r2]
ARM GAS  /tmp/ccYL8bSL.s 			page 39


 1269              	.LBE86:
 1270              	.LBE88:
 1271              		.loc 1 578 1 view .LVU358
 1272 0034 5DF8044B 		ldr	r4, [sp], #4
 1273              		.cfi_restore 4
 1274              		.cfi_def_cfa_offset 0
 1275 0038 7047     		bx	lr
 1276              	.LVL87:
 1277              	.L125:
 1278              		.loc 1 578 1 view .LVU359
 1279 003a 7047     		bx	lr
 1280              	.L130:
 1281              		.align	2
 1282              	.L129:
 1283 003c 00000000 		.word	.LANCHOR0
 1284              		.cfi_endproc
 1285              	.LFE14:
 1287              		.section	.text.get_current_menu_ref,"ax",%progbits
 1288              		.align	1
 1289              		.p2align 2,,3
 1290              		.global	get_current_menu_ref
 1291              		.syntax unified
 1292              		.thumb
 1293              		.thumb_func
 1294              		.fpu fpv4-sp-d16
 1296              	get_current_menu_ref:
 1297              	.LVL88:
 1298              	.LFB15:
 579:src/menu.c    **** 
 580:src/menu.c    **** struct _menu get_current_menu_ref() {
 1299              		.loc 1 580 37 is_stmt 1 view -0
 1300              		.cfi_startproc
 1301              		@ args = 0, pretend = 0, frame = 0
 1302              		@ frame_needed = 0, uses_anonymous_args = 0
 581:src/menu.c    ****   int i = current_menu;
 1303              		.loc 1 581 3 view .LVU361
 580:src/menu.c    ****   int i = current_menu;
 1304              		.loc 1 580 37 is_stmt 0 view .LVU362
 1305 0000 08B5     		push	{r3, lr}
 1306              		.cfi_def_cfa_offset 8
 1307              		.cfi_offset 3, -8
 1308              		.cfi_offset 14, -4
 582:src/menu.c    ****   if (C_LOCKED)
 1309              		.loc 1 582 7 view .LVU363
 1310 0002 294B     		ldr	r3, .L147
 581:src/menu.c    ****   int i = current_menu;
 1311              		.loc 1 581 7 view .LVU364
 1312 0004 294A     		ldr	r2, .L147+4
 1313              		.loc 1 582 7 view .LVU365
 1314 0006 1B68     		ldr	r3, [r3]
 581:src/menu.c    ****   int i = current_menu;
 1315              		.loc 1 581 7 view .LVU366
 1316 0008 92F90010 		ldrsb	r1, [r2]
 1317              	.LVL89:
 1318              		.loc 1 582 3 is_stmt 1 view .LVU367
 1319              		.loc 1 582 7 is_stmt 0 view .LVU368
 1320 000c 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
ARM GAS  /tmp/ccYL8bSL.s 			page 40


 1321              		.loc 1 582 6 view .LVU369
 1322 0010 03F04102 		and	r2, r3, #65
 1323 0014 412A     		cmp	r2, #65
 580:src/menu.c    ****   int i = current_menu;
 1324              		.loc 1 580 37 view .LVU370
 1325 0016 0346     		mov	r3, r0
 1326              		.loc 1 582 6 view .LVU371
 1327 0018 0BD0     		beq	.L145
 1328              	.LVL90:
 1329              	.L132:
 583:src/menu.c    ****     switch (current_menu) {
 584:src/menu.c    ****     case (M_Clear):
 585:src/menu.c    ****       i = M_Clear_C;
 586:src/menu.c    ****       break;
 587:src/menu.c    ****     case (M_Swap):
 588:src/menu.c    ****       i = M_Swap_C;
 589:src/menu.c    ****       break;
 590:src/menu.c    ****     case (M_Arrow):
 591:src/menu.c    ****       i = M_Arrow_C;
 592:src/menu.c    ****       break;
 593:src/menu.c    ****     case (M_Prob):
 594:src/menu.c    ****       i = M_Prob_C;
 595:src/menu.c    ****       break;
 596:src/menu.c    ****     case (M_Blank2):
 597:src/menu.c    ****       i = M_Blank2_C;
 598:src/menu.c    ****       break;
 599:src/menu.c    ****     case (M_Misc):
 600:src/menu.c    ****       i = M_Misc_C;
 601:src/menu.c    ****       break;
 602:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 603:src/menu.c    ****     case (M_Flags):// so don't display them.
 604:src/menu.c    ****     case (M_Stats):
 605:src/menu.c    ****     case (M_Setup2):
 606:src/menu.c    ****     case (M_Solve):
 607:src/menu.c    ****     case (M_Program):
 608:src/menu.c    ****       i = M_C_Lock;
 609:src/menu.c    ****     default:;
 1330              		.loc 1 609 13 is_stmt 1 view .LVU372
 610:src/menu.c    ****     }
 611:src/menu.c    ****   if (current_menu == M_User) {
 1331              		.loc 1 611 3 view .LVU373
 1332              		.loc 1 611 6 is_stmt 0 view .LVU374
 1333 001a 6329     		cmp	r1, #99
 1334 001c 32D0     		beq	.L146
 1335              	.LVL91:
 1336              	.L137:
 612:src/menu.c    ****     return UserMenu;
 613:src/menu.c    ****   }
 614:src/menu.c    ****   else {
 615:src/menu.c    ****     return Menus[i];
 1337              		.loc 1 615 5 is_stmt 1 view .LVU375
 1338              		.loc 1 615 17 is_stmt 0 view .LVU376
 1339 001e 2448     		ldr	r0, .L147+8
 1340 0020 D022     		movs	r2, #208
 1341 0022 02FB0101 		mla	r1, r2, r1, r0
 1342              	.LVL92:
 1343              		.loc 1 615 17 view .LVU377
ARM GAS  /tmp/ccYL8bSL.s 			page 41


 1344 0026 1846     		mov	r0, r3
 1345 0028 FFF7FEFF 		bl	memcpy
 1346              	.LVL93:
 1347              		.loc 1 615 17 view .LVU378
 1348 002c 0346     		mov	r3, r0
 616:src/menu.c    ****   }
 617:src/menu.c    **** }
 1349              		.loc 1 617 1 view .LVU379
 1350 002e 1846     		mov	r0, r3
 1351 0030 08BD     		pop	{r3, pc}
 1352              	.LVL94:
 1353              	.L145:
 583:src/menu.c    ****     case (M_Clear):
 1354              		.loc 1 583 5 is_stmt 1 view .LVU380
 1355 0032 4A1E     		subs	r2, r1, #1
 1356 0034 0E2A     		cmp	r2, #14
 1357 0036 F0D8     		bhi	.L132
 1358 0038 01A0     		adr	r0, .L134
 1359 003a 50F822F0 		ldr	pc, [r0, r2, lsl #2]
 1360              	.LVL95:
 1361 003e 00BF     		.p2align 2
 1362              	.L134:
 1363 0040 A5000000 		.word	.L140+1
 1364 0044 1B000000 		.word	.L132+1
 1365 0048 A1000000 		.word	.L135+1
 1366 004c 1B000000 		.word	.L132+1
 1367 0050 9D000000 		.word	.L139+1
 1368 0054 81000000 		.word	.L138+1
 1369 0058 A1000000 		.word	.L135+1
 1370 005c 1B000000 		.word	.L132+1
 1371 0060 7D000000 		.word	.L143+1
 1372 0064 A1000000 		.word	.L135+1
 1373 0068 99000000 		.word	.L136+1
 1374 006c A1000000 		.word	.L135+1
 1375 0070 A1000000 		.word	.L135+1
 1376 0074 A1000000 		.word	.L135+1
 1377 0078 95000000 		.word	.L133+1
 1378              		.p2align 1
 1379              	.L143:
 591:src/menu.c    ****       break;
 1380              		.loc 1 591 9 is_stmt 0 view .LVU381
 1381 007c 1421     		movs	r1, #20
 1382              	.LVL96:
 591:src/menu.c    ****       break;
 1383              		.loc 1 591 9 view .LVU382
 1384 007e CEE7     		b	.L137
 1385              	.LVL97:
 1386              	.L138:
 582:src/menu.c    ****     switch (current_menu) {
 1387              		.loc 1 582 6 view .LVU383
 1388 0080 1321     		movs	r1, #19
 1389              	.LVL98:
 582:src/menu.c    ****     switch (current_menu) {
 1390              		.loc 1 582 6 view .LVU384
 1391 0082 CCE7     		b	.L137
 1392              	.LVL99:
 1393              	.L146:
ARM GAS  /tmp/ccYL8bSL.s 			page 42


 612:src/menu.c    ****   }
 1394              		.loc 1 612 5 is_stmt 1 view .LVU385
 612:src/menu.c    ****   }
 1395              		.loc 1 612 12 is_stmt 0 view .LVU386
 1396 0084 0B49     		ldr	r1, .L147+12
 1397              	.LVL100:
 612:src/menu.c    ****   }
 1398              		.loc 1 612 12 view .LVU387
 1399 0086 D022     		movs	r2, #208
 1400 0088 1846     		mov	r0, r3
 1401 008a FFF7FEFF 		bl	memcpy
 1402              	.LVL101:
 612:src/menu.c    ****   }
 1403              		.loc 1 612 12 view .LVU388
 1404 008e 0346     		mov	r3, r0
 1405              		.loc 1 617 1 view .LVU389
 1406 0090 1846     		mov	r0, r3
 1407 0092 08BD     		pop	{r3, pc}
 1408              	.LVL102:
 1409              	.L133:
 597:src/menu.c    ****       break;
 1410              		.loc 1 597 7 is_stmt 1 view .LVU390
 598:src/menu.c    ****     case (M_Misc):
 1411              		.loc 1 598 7 view .LVU391
 597:src/menu.c    ****       break;
 1412              		.loc 1 597 9 is_stmt 0 view .LVU392
 1413 0094 1621     		movs	r1, #22
 598:src/menu.c    ****     case (M_Misc):
 1414              		.loc 1 598 7 view .LVU393
 1415 0096 C2E7     		b	.L137
 1416              	.LVL103:
 1417              	.L136:
 594:src/menu.c    ****       break;
 1418              		.loc 1 594 7 is_stmt 1 view .LVU394
 595:src/menu.c    ****     case (M_Blank2):
 1419              		.loc 1 595 7 view .LVU395
 594:src/menu.c    ****       break;
 1420              		.loc 1 594 9 is_stmt 0 view .LVU396
 1421 0098 1521     		movs	r1, #21
 595:src/menu.c    ****     case (M_Blank2):
 1422              		.loc 1 595 7 view .LVU397
 1423 009a C0E7     		b	.L137
 1424              	.LVL104:
 1425              	.L139:
 600:src/menu.c    ****       break;
 1426              		.loc 1 600 7 is_stmt 1 view .LVU398
 601:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1427              		.loc 1 601 7 view .LVU399
 600:src/menu.c    ****       break;
 1428              		.loc 1 600 9 is_stmt 0 view .LVU400
 1429 009c 1721     		movs	r1, #23
 601:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1430              		.loc 1 601 7 view .LVU401
 1431 009e BEE7     		b	.L137
 1432              	.LVL105:
 1433              	.L135:
 608:src/menu.c    ****     default:;
ARM GAS  /tmp/ccYL8bSL.s 			page 43


 1434              		.loc 1 608 7 is_stmt 1 view .LVU402
 608:src/menu.c    ****     default:;
 1435              		.loc 1 608 9 is_stmt 0 view .LVU403
 1436 00a0 1121     		movs	r1, #17
 1437 00a2 BCE7     		b	.L137
 1438              	.LVL106:
 1439              	.L140:
 585:src/menu.c    ****       break;
 1440              		.loc 1 585 9 view .LVU404
 1441 00a4 1221     		movs	r1, #18
 1442              	.LVL107:
 585:src/menu.c    ****       break;
 1443              		.loc 1 585 9 view .LVU405
 1444 00a6 BAE7     		b	.L137
 1445              	.L148:
 1446              		.align	2
 1447              	.L147:
 1448 00a8 00000000 		.word	main_ram
 1449 00ac 00000000 		.word	.LANCHOR1
 1450 00b0 00000000 		.word	Menus
 1451 00b4 00000000 		.word	.LANCHOR4
 1452              		.cfi_endproc
 1453              	.LFE15:
 1455              		.section	.text.display_menu,"ax",%progbits
 1456              		.align	1
 1457              		.p2align 2,,3
 1458              		.global	display_menu
 1459              		.syntax unified
 1460              		.thumb
 1461              		.thumb_func
 1462              		.fpu fpv4-sp-d16
 1464              	display_menu:
 1465              	.LFB16:
 618:src/menu.c    **** 
 619:src/menu.c    **** void display_menu (struct _menu Ref) {
 1466              		.loc 1 619 38 is_stmt 1 view -0
 1467              		.cfi_startproc
 1468              		@ args = 208, pretend = 16, frame = 0
 1469              		@ frame_needed = 0, uses_anonymous_args = 0
 620:src/menu.c    ****   int len = 0;
 1470              		.loc 1 620 3 view .LVU407
 1471              	.LVL108:
 621:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1472              		.loc 1 621 3 view .LVU408
 619:src/menu.c    ****   int len = 0;
 1473              		.loc 1 619 38 is_stmt 0 view .LVU409
 1474 0000 84B0     		sub	sp, sp, #16
 1475              		.cfi_def_cfa_offset 16
 1476 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1477              		.cfi_def_cfa_offset 52
 1478              		.cfi_offset 4, -52
 1479              		.cfi_offset 5, -48
 1480              		.cfi_offset 6, -44
 1481              		.cfi_offset 7, -40
 1482              		.cfi_offset 8, -36
 1483              		.cfi_offset 9, -32
 1484              		.cfi_offset 10, -28
ARM GAS  /tmp/ccYL8bSL.s 			page 44


 1485              		.cfi_offset 11, -24
 1486              		.cfi_offset 14, -20
 1487 0006 83B0     		sub	sp, sp, #12
 1488              		.cfi_def_cfa_offset 64
 1489              		.loc 1 621 3 view .LVU410
 1490 0008 0024     		movs	r4, #0
 619:src/menu.c    ****   int len = 0;
 1491              		.loc 1 619 38 view .LVU411
 1492 000a 0CAD     		add	r5, sp, #48
 1493 000c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1494              		.loc 1 621 3 view .LVU412
 1495 0010 3E4E     		ldr	r6, .L167
 1496 0012 0094     		str	r4, [sp]
 1497 0014 2046     		mov	r0, r4
 1498 0016 3423     		movs	r3, #52
 1499 0018 4FF4C872 		mov	r2, #400
 1500 001c BC21     		movs	r1, #188
 1501 001e B047     		blx	r6
 1502              	.LVL109:
 622:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1503              		.loc 1 622 3 is_stmt 1 view .LVU413
 1504 0020 3B4D     		ldr	r5, .L167+4
 1505 0022 FF23     		movs	r3, #255
 1506 0024 0093     		str	r3, [sp]
 1507 0026 4FF4C872 		mov	r2, #400
 1508 002a 0123     		movs	r3, #1
 1509 002c BC21     		movs	r1, #188
 1510 002e 2046     		mov	r0, r4
 1511 0030 B047     		blx	r6
 1512              	.LVL110:
 623:src/menu.c    ****   //Clear previous menu
 624:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1513              		.loc 1 624 3 view .LVU414
 1514              	.LBB89:
 1515              		.loc 1 624 8 view .LVU415
 1516              		.loc 1 624 21 view .LVU416
 625:src/menu.c    ****     mdots[col][0] = 0;
 1517              		.loc 1 625 19 is_stmt 0 view .LVU417
 1518 0032 2246     		mov	r2, r4
 1519 0034 05F5C871 		add	r1, r5, #400
 1520              	.LBE89:
 622:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1521              		.loc 1 622 3 view .LVU418
 1522 0038 2B46     		mov	r3, r5
 1523              	.LVL111:
 1524              	.L150:
 1525              	.LBB90:
 1526              		.loc 1 625 5 is_stmt 1 discriminator 3 view .LVU419
 1527              		.loc 1 625 19 is_stmt 0 discriminator 3 view .LVU420
 1528 003a 1A70     		strb	r2, [r3]
 626:src/menu.c    ****     mdots[col][1] = 0;
 1529              		.loc 1 626 5 is_stmt 1 discriminator 3 view .LVU421
 1530              		.loc 1 626 19 is_stmt 0 discriminator 3 view .LVU422
 1531 003c 5A70     		strb	r2, [r3, #1]
 624:src/menu.c    ****     mdots[col][0] = 0;
 1532              		.loc 1 624 32 is_stmt 1 discriminator 3 view .LVU423
 624:src/menu.c    ****     mdots[col][0] = 0;
ARM GAS  /tmp/ccYL8bSL.s 			page 45


 1533              		.loc 1 624 21 discriminator 3 view .LVU424
 1534 003e 0233     		adds	r3, r3, #2
 624:src/menu.c    ****     mdots[col][0] = 0;
 1535              		.loc 1 624 3 is_stmt 0 discriminator 3 view .LVU425
 1536 0040 9942     		cmp	r1, r3
 1537 0042 FAD1     		bne	.L150
 1538 0044 14AE     		add	r6, sp, #80
 624:src/menu.c    ****     mdots[col][0] = 0;
 1539              		.loc 1 624 3 view .LVU426
 1540 0046 0024     		movs	r4, #0
 1541              	.LVL112:
 1542              	.L151:
 624:src/menu.c    ****     mdots[col][0] = 0;
 1543              		.loc 1 624 3 view .LVU427
 1544              	.LBE90:
 1545              	.LBB91:
 627:src/menu.c    ****   }
 628:src/menu.c    **** 
 629:src/menu.c    ****   // Draw menu items
 630:src/menu.c    ****   // 
 631:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 632:src/menu.c    ****     /*
 633:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 634:src/menu.c    ****     */
 635:src/menu.c    ****     // Label is Ref.keys[item].unshifted_label
 636:src/menu.c    ****     // Unshifted first
 637:src/menu.c    ****       len = pixel_length (Ref.keys[item].unshifted_label, 0); // 0 means not small font
 1546              		.loc 1 637 7 is_stmt 1 view .LVU428
 1547              		.loc 1 637 13 is_stmt 0 view .LVU429
 1548 0048 0021     		movs	r1, #0
 1549 004a 3046     		mov	r0, r6
 1550 004c FFF7FEFF 		bl	pixel_length
 1551              	.LVL113:
 638:src/menu.c    ****       set_menu_label ( Ref.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1552              		.loc 1 638 7 is_stmt 1 view .LVU430
 1553              		.loc 1 638 73 is_stmt 0 view .LVU431
 1554 0050 C0F12000 		rsb	r0, r0, #32
 1555              	.LVL114:
 1556              		.loc 1 638 79 view .LVU432
 1557 0054 00EBD070 		add	r0, r0, r0, lsr #31
 1558              		.loc 1 638 7 view .LVU433
 1559 0058 04EB6001 		add	r1, r4, r0, asr #1
 1560 005c 0022     		movs	r2, #0
 1561 005e 3046     		mov	r0, r6
 1562 0060 06F10807 		add	r7, r6, #8
 1563 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1564              	.LVL115:
 639:src/menu.c    ****       // Now shifted ...	
 640:src/menu.c    ****       len = pixel_length (Ref.keys[item].shifted_label, 0); // 0 means not small font
 1565              		.loc 1 640 7 is_stmt 1 view .LVU434
 1566              		.loc 1 640 13 is_stmt 0 view .LVU435
 1567 0068 0021     		movs	r1, #0
 1568 006a 3846     		mov	r0, r7
 1569 006c FFF7FEFF 		bl	pixel_length
 1570              	.LVL116:
 641:src/menu.c    ****       len = item*32 + (32-len)/2;
 1571              		.loc 1 641 7 is_stmt 1 view .LVU436
ARM GAS  /tmp/ccYL8bSL.s 			page 46


 1572              		.loc 1 641 26 is_stmt 0 view .LVU437
 1573 0070 C0F12000 		rsb	r0, r0, #32
 1574              	.LVL117:
 1575              		.loc 1 641 31 view .LVU438
 1576 0074 00EBD070 		add	r0, r0, r0, lsr #31
 1577              	.LVL118:
 642:src/menu.c    ****       if (len<0) len = 0;
 1578              		.loc 1 642 7 is_stmt 1 view .LVU439
 641:src/menu.c    ****       len = item*32 + (32-len)/2;
 1579              		.loc 1 641 11 is_stmt 0 view .LVU440
 1580 0078 04EB6001 		add	r1, r4, r0, asr #1
 1581              	.LVL119:
 641:src/menu.c    ****       len = item*32 + (32-len)/2;
 1582              		.loc 1 641 11 view .LVU441
 1583 007c C729     		cmp	r1, #199
 1584 007e A8BF     		it	ge
 1585 0080 C721     		movge	r1, #199
 1586              	.LVL120:
 643:src/menu.c    ****       if (len>199) len = 199;
 644:src/menu.c    ****       set_menu_label ( Ref.keys[item].shifted_label, 0, len, 1 );
 1587              		.loc 1 644 7 is_stmt 1 view .LVU442
 1588 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1589              	.LVL121:
 1590              		.loc 1 644 7 is_stmt 0 view .LVU443
 1591 0086 3846     		mov	r0, r7
 1592 0088 2034     		adds	r4, r4, #32
 1593 008a 0122     		movs	r2, #1
 1594 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1595              	.LVL122:
 631:src/menu.c    ****     /*
 1596              		.loc 1 631 32 is_stmt 1 view .LVU444
 631:src/menu.c    ****     /*
 1597              		.loc 1 631 22 view .LVU445
 631:src/menu.c    ****     /*
 1598              		.loc 1 631 3 is_stmt 0 view .LVU446
 1599 0090 C02C     		cmp	r4, #192
 1600 0092 06F12006 		add	r6, r6, #32
 1601 0096 D7D1     		bne	.L151
 1602 0098 1E4E     		ldr	r6, .L167+8
 1603              	.LBE91:
 1604              	.LBB92:
 1605              	.LBB93:
 645:src/menu.c    ****   }
 646:src/menu.c    **** 
 647:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 648:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 649:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 650:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 651:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1606              		.loc 1 651 2 view .LVU447
 1607 009a DFF87090 		ldr	r9, .L167
 1608 009e C5F1040A 		rsb	r10, r5, #4
 1609 00a2 06F5C47B 		add	fp, r6, #392
 1610              	.LBE93:
 1611              	.LBE92:
 1612              	.LBB95:
 631:src/menu.c    ****     /*
ARM GAS  /tmp/ccYL8bSL.s 			page 47


 1613              		.loc 1 631 3 view .LVU448
 1614 00a6 771E     		subs	r7, r6, #1
 1615              	.LBE95:
 1616              	.LBB96:
 1617              	.LBB94:
 1618              		.loc 1 651 2 view .LVU449
 1619 00a8 4FF0FF08 		mov	r8, #255
 1620              	.L152:
 1621              	.LVL123:
 648:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1622              		.loc 1 648 23 is_stmt 1 view .LVU450
 1623 00ac 0AEB0705 		add	r5, r10, r7
 648:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1624              		.loc 1 648 14 is_stmt 0 view .LVU451
 1625 00b0 0024     		movs	r4, #0
 1626              	.LVL124:
 1627              	.L155:
 649:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1628              		.loc 1 649 7 is_stmt 1 view .LVU452
 1629              		.loc 1 651 2 view .LVU453
 649:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1630              		.loc 1 649 22 is_stmt 0 view .LVU454
 1631 00b2 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 649:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1632              		.loc 1 649 40 view .LVU455
 1633 00b6 2241     		asrs	r2, r2, r4
 1634              		.loc 1 651 2 view .LVU456
 1635 00b8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1636 00bc 0323     		movs	r3, #3
 649:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1637              		.loc 1 649 10 view .LVU457
 1638 00be 12F0010F 		tst	r2, #1
 1639              		.loc 1 651 2 view .LVU458
 1640 00c2 01F1E901 		add	r1, r1, #233
 1641 00c6 1A46     		mov	r2, r3
 1642 00c8 2846     		mov	r0, r5
 649:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1643              		.loc 1 649 10 view .LVU459
 1644 00ca 02D0     		beq	.L153
 1645              		.loc 1 651 2 view .LVU460
 1646 00cc CDF80080 		str	r8, [sp]
 1647 00d0 C847     		blx	r9
 1648              	.LVL125:
 1649              	.L153:
 652:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1650              		.loc 1 652 7 is_stmt 1 view .LVU461
 653:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 654:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1651              		.loc 1 654 2 view .LVU462
 652:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1652              		.loc 1 652 22 is_stmt 0 view .LVU463
 1653 00d2 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 652:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1654              		.loc 1 652 40 view .LVU464
 1655 00d4 2241     		asrs	r2, r2, r4
 1656              		.loc 1 654 2 view .LVU465
 1657 00d6 A4EB8401 		sub	r1, r4, r4, lsl #2
ARM GAS  /tmp/ccYL8bSL.s 			page 48


 1658 00da 0323     		movs	r3, #3
 652:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1659              		.loc 1 652 10 view .LVU466
 1660 00dc 12F0010F 		tst	r2, #1
 1661              		.loc 1 654 2 view .LVU467
 1662 00e0 01F1D001 		add	r1, r1, #208
 1663 00e4 1A46     		mov	r2, r3
 1664 00e6 04F10104 		add	r4, r4, #1
 1665              	.LVL126:
 1666              		.loc 1 654 2 view .LVU468
 1667 00ea 2846     		mov	r0, r5
 652:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1668              		.loc 1 652 10 view .LVU469
 1669 00ec 02D0     		beq	.L154
 1670              		.loc 1 654 2 view .LVU470
 1671 00ee CDF80080 		str	r8, [sp]
 1672 00f2 C847     		blx	r9
 1673              	.LVL127:
 1674              	.L154:
 648:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1675              		.loc 1 648 32 is_stmt 1 discriminator 2 view .LVU471
 648:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1676              		.loc 1 648 23 discriminator 2 view .LVU472
 648:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1677              		.loc 1 648 5 is_stmt 0 discriminator 2 view .LVU473
 1678 00f4 062C     		cmp	r4, #6
 1679 00f6 DCD1     		bne	.L155
 1680              	.LBE94:
 647:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1681              		.loc 1 647 32 is_stmt 1 discriminator 2 view .LVU474
 647:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1682              		.loc 1 647 21 discriminator 2 view .LVU475
 1683 00f8 0236     		adds	r6, r6, #2
 647:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1684              		.loc 1 647 3 is_stmt 0 discriminator 2 view .LVU476
 1685 00fa B345     		cmp	fp, r6
 1686 00fc 07F10207 		add	r7, r7, #2
 1687 0100 D4D1     		bne	.L152
 1688              	.LBE96:
 655:src/menu.c    ****     }
 656:src/menu.c    ****   }
 657:src/menu.c    **** }
 1689              		.loc 1 657 1 view .LVU477
 1690 0102 03B0     		add	sp, sp, #12
 1691              		.cfi_def_cfa_offset 52
 1692              		@ sp needed
 1693 0104 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1694              		.cfi_restore 14
 1695              		.cfi_restore 11
 1696              		.cfi_restore 10
 1697              		.cfi_restore 9
 1698              		.cfi_restore 8
 1699              		.cfi_restore 7
 1700              		.cfi_restore 6
 1701              		.cfi_restore 5
 1702              		.cfi_restore 4
 1703              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccYL8bSL.s 			page 49


 1704              	.LVL128:
 1705              		.loc 1 657 1 view .LVU478
 1706 0108 04B0     		add	sp, sp, #16
 1707              		.cfi_def_cfa_offset 0
 1708 010a 7047     		bx	lr
 1709              	.L168:
 1710              		.align	2
 1711              	.L167:
 1712 010c 3D020008 		.word	134218301
 1713 0110 00000000 		.word	.LANCHOR0
 1714 0114 01000000 		.word	.LANCHOR0+1
 1715              		.cfi_endproc
 1716              	.LFE16:
 1718              		.section	.text.display_current_menu,"ax",%progbits
 1719              		.align	1
 1720              		.p2align 2,,3
 1721              		.global	display_current_menu
 1722              		.syntax unified
 1723              		.thumb
 1724              		.thumb_func
 1725              		.fpu fpv4-sp-d16
 1727              	display_current_menu:
 1728              	.LFB11:
 162:src/menu.c    ****   display_menu (get_current_menu_ref());
 1729              		.loc 1 162 30 is_stmt 1 view -0
 1730              		.cfi_startproc
 1731              		@ args = 0, pretend = 0, frame = 208
 1732              		@ frame_needed = 0, uses_anonymous_args = 0
 163:src/menu.c    **** }
 1733              		.loc 1 163 3 view .LVU480
 162:src/menu.c    ****   display_menu (get_current_menu_ref());
 1734              		.loc 1 162 30 is_stmt 0 view .LVU481
 1735 0000 10B5     		push	{r4, lr}
 1736              		.cfi_def_cfa_offset 8
 1737              		.cfi_offset 4, -8
 1738              		.cfi_offset 14, -4
 1739 0002 E4B0     		sub	sp, sp, #400
 1740              		.cfi_def_cfa_offset 408
 163:src/menu.c    **** }
 1741              		.loc 1 163 3 view .LVU482
 1742 0004 30AC     		add	r4, sp, #192
 1743 0006 2046     		mov	r0, r4
 1744 0008 FFF7FEFF 		bl	get_current_menu_ref
 1745              	.LVL129:
 1746 000c 34A9     		add	r1, sp, #208
 1747 000e C022     		movs	r2, #192
 1748 0010 6846     		mov	r0, sp
 1749 0012 FFF7FEFF 		bl	memcpy
 1750              	.LVL130:
 1751 0016 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1752 001a FFF7FEFF 		bl	display_menu
 1753              	.LVL131:
 164:src/menu.c    **** 
 1754              		.loc 1 164 1 view .LVU483
 1755 001e 64B0     		add	sp, sp, #400
 1756              		.cfi_def_cfa_offset 8
 1757              		@ sp needed
ARM GAS  /tmp/ccYL8bSL.s 			page 50


 1758 0020 10BD     		pop	{r4, pc}
 1759              		.cfi_endproc
 1760              	.LFE11:
 1762 0022 00BF     		.section	.text.all_menu_dots,"ax",%progbits
 1763              		.align	1
 1764              		.p2align 2,,3
 1765              		.global	all_menu_dots
 1766              		.syntax unified
 1767              		.thumb
 1768              		.thumb_func
 1769              		.fpu fpv4-sp-d16
 1771              	all_menu_dots:
 1772              	.LFB17:
 658:src/menu.c    **** 
 659:src/menu.c    **** void all_menu_dots () {
 1773              		.loc 1 659 23 is_stmt 1 view -0
 1774              		.cfi_startproc
 1775              		@ args = 0, pretend = 0, frame = 0
 1776              		@ frame_needed = 0, uses_anonymous_args = 0
 660:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1777              		.loc 1 660 3 view .LVU485
 1778              	.LBB97:
 1779              		.loc 1 660 8 view .LVU486
 1780              	.LVL132:
 1781              		.loc 1 660 21 view .LVU487
 1782              	.LBE97:
 659:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1783              		.loc 1 659 23 is_stmt 0 view .LVU488
 1784 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1785              		.cfi_def_cfa_offset 20
 1786              		.cfi_offset 4, -20
 1787              		.cfi_offset 5, -16
 1788              		.cfi_offset 6, -12
 1789              		.cfi_offset 7, -8
 1790              		.cfi_offset 14, -4
 1791              	.LBB101:
 1792              	.LBB98:
 661:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 662:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1793              		.loc 1 662 2 view .LVU489
 1794 0002 0D4E     		ldr	r6, .L177
 1795              	.LBE98:
 1796              	.LBE101:
 659:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1797              		.loc 1 659 23 view .LVU490
 1798 0004 83B0     		sub	sp, sp, #12
 1799              		.cfi_def_cfa_offset 32
 659:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1800              		.loc 1 659 23 view .LVU491
 1801 0006 0025     		movs	r5, #0
 1802              	.LBB102:
 1803              	.LBB99:
 1804              		.loc 1 662 2 view .LVU492
 1805 0008 FF27     		movs	r7, #255
 1806              	.LVL133:
 1807              	.L172:
 661:src/menu.c    ****     for (int row = 0; row < 6; row++) {
ARM GAS  /tmp/ccYL8bSL.s 			page 51


 1808              		.loc 1 661 23 is_stmt 1 view .LVU493
 1809              	.LBE99:
 1810              	.LBE102:
 659:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1811              		.loc 1 659 23 is_stmt 0 view .LVU494
 1812 000a E924     		movs	r4, #233
 1813              	.LVL134:
 1814              	.L173:
 1815              	.LBB103:
 1816              	.LBB100:
 1817              		.loc 1 662 2 is_stmt 1 discriminator 3 view .LVU495
 1818 000c 0323     		movs	r3, #3
 1819 000e 1A46     		mov	r2, r3
 1820 0010 2146     		mov	r1, r4
 1821 0012 2846     		mov	r0, r5
 1822 0014 0097     		str	r7, [sp]
 1823 0016 B047     		blx	r6
 1824              	.LVL135:
 663:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1825              		.loc 1 663 2 discriminator 3 view .LVU496
 1826 0018 0323     		movs	r3, #3
 1827 001a A4F11901 		sub	r1, r4, #25
 1828 001e 0097     		str	r7, [sp]
 1829 0020 1A46     		mov	r2, r3
 1830 0022 2846     		mov	r0, r5
 1831 0024 033C     		subs	r4, r4, #3
 1832 0026 B047     		blx	r6
 1833              	.LVL136:
 661:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1834              		.loc 1 661 32 discriminator 3 view .LVU497
 661:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1835              		.loc 1 661 23 discriminator 3 view .LVU498
 661:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1836              		.loc 1 661 5 is_stmt 0 discriminator 3 view .LVU499
 1837 0028 D72C     		cmp	r4, #215
 1838 002a EFD1     		bne	.L173
 1839              	.LBE100:
 660:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1840              		.loc 1 660 32 is_stmt 1 discriminator 2 view .LVU500
 660:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1841              		.loc 1 660 21 discriminator 2 view .LVU501
 1842 002c 0235     		adds	r5, r5, #2
 660:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1843              		.loc 1 660 3 is_stmt 0 discriminator 2 view .LVU502
 1844 002e B5F5C87F 		cmp	r5, #400
 1845 0032 EAD1     		bne	.L172
 1846              	.LBE103:
 664:src/menu.c    ****     }
 665:src/menu.c    ****   }
 666:src/menu.c    **** }  
 1847              		.loc 1 666 1 view .LVU503
 1848 0034 03B0     		add	sp, sp, #12
 1849              		.cfi_def_cfa_offset 20
 1850              		@ sp needed
 1851 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1852              	.L178:
 1853              		.align	2
ARM GAS  /tmp/ccYL8bSL.s 			page 52


 1854              	.L177:
 1855 0038 3D020008 		.word	134218301
 1856              		.cfi_endproc
 1857              	.LFE17:
 1859              		.section	.text.umen_store,"ax",%progbits
 1860              		.align	1
 1861              		.p2align 2,,3
 1862              		.global	umen_store
 1863              		.syntax unified
 1864              		.thumb
 1865              		.thumb_func
 1866              		.fpu fpv4-sp-d16
 1868              	umen_store:
 1869              	.LVL137:
 1870              	.LFB20:
 667:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1);
 668:src/menu.c    **** 
 669:src/menu.c    **** void build_user_menu(void){
 670:src/menu.c    ****   // find the label 'MNU'
 671:src/menu.c    ****    const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 672:src/menu.c    ****    build_user_menu_from_program (lbl);
 673:src/menu.c    **** }
 674:src/menu.c    **** 
 675:src/menu.c    **** void build_user_menu_from_program(int lbl)
 676:src/menu.c    **** {
 677:src/menu.c    ****   // find the label 'MNU'
 678:src/menu.c    ****   // const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 679:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 680:src/menu.c    ****   int i=0;
 681:src/menu.c    ****   s_opcode op;
 682:src/menu.c    ****   opcode opc;
 683:src/menu.c    ****   char buf1[16];
 684:src/menu.c    ****   char *p = buf1;
 685:src/menu.c    ****   char c;
 686:src/menu.c    ****   int finished = 0;
 687:src/menu.c    **** 
 688:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 689:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 690:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 691:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 692:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 693:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 694:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 695:src/menu.c    ****   }
 696:src/menu.c    ****   while (pc && i < 12) {
 697:src/menu.c    **** 
 698:src/menu.c    ****     pc = do_inc(pc, 0);
 699:src/menu.c    ****     opc = getprog(pc);
 700:src/menu.c    ****     op = (s_opcode) opc;
 701:src/menu.c    **** 
 702:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 703:src/menu.c    ****       break;
 704:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 705:src/menu.c    ****       if (i==4) {
 706:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 707:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 708:src/menu.c    ****       }
ARM GAS  /tmp/ccYL8bSL.s 			page 53


 709:src/menu.c    ****       else if (i==5) {
 710:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 711:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 712:src/menu.c    ****       }
 713:src/menu.c    ****       i += 1;
 714:src/menu.c    ****       continue;
 715:src/menu.c    ****     }
 716:src/menu.c    **** 
 717:src/menu.c    ****     if (isDBL(opc) && (opDBL(opc) == DBL_ALPHA)) { // is it double alpha?
 718:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 719:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 720:src/menu.c    **** 	i++;
 721:src/menu.c    ****     	p = buf1;
 722:src/menu.c    **** 	finished = 0;
 723:src/menu.c    ****       } // ..and start reading the new alpha
 724:src/menu.c    ****       *p++ = opc & 0xff; // character 1
 725:src/menu.c    ****       c = (opc >> 16) & 0xff;
 726:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 727:src/menu.c    **** 	*p++ = c;
 728:src/menu.c    **** 	c = opc>>24;
 729:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 730:src/menu.c    **** 	  *p++ = c;
 731:src/menu.c    ****       }
 732:src/menu.c    ****       *p = '\0'; // no ++: next character can overwrite the 0.
 733:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 734:src/menu.c    **** 	finished = 1;
 735:src/menu.c    ****       }
 736:src/menu.c    ****     }
 737:src/menu.c    ****     else { // Not a DBL_ALPHA op - the usual case
 738:src/menu.c    ****       if ( p == buf1 ) { // no alpha label to use
 739:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 740:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 741:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 742:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 743:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 744:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 745:src/menu.c    **** 	  }
 746:src/menu.c    **** 	  else {
 747:src/menu.c    **** 	    prt_umen(opc, buf1); // display rarg with argument
 748:src/menu.c    **** 	  }
 749:src/menu.c    **** 	}
 750:src/menu.c    **** 	else {
 751:src/menu.c    **** 	  prt_umen(opc, buf1); // display non-rarg thing
 752:src/menu.c    **** 	}
 753:src/menu.c    ****       }
 754:src/menu.c    ****       else { // there is an alpha label to use, so reset
 755:src/menu.c    **** 	p = buf1;
 756:src/menu.c    **** 	finished = 0;
 757:src/menu.c    ****       }
 758:src/menu.c    ****       umen_store (i, opc, buf1);
 759:src/menu.c    ****       i++;
 760:src/menu.c    ****     }
 761:src/menu.c    ****   }
 762:src/menu.c    **** }
 763:src/menu.c    **** 
 764:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1) {
 1871              		.loc 1 764 49 is_stmt 1 view -0
ARM GAS  /tmp/ccYL8bSL.s 			page 54


 1872              		.cfi_startproc
 1873              		@ args = 0, pretend = 0, frame = 0
 1874              		@ frame_needed = 0, uses_anonymous_args = 0
 765:src/menu.c    **** #pragma GCC diagnostic push
 766:src/menu.c    **** #pragma GCC diagnostic ignored "-Wstringop-truncation"
 767:src/menu.c    ****     if (i<6) {
 1875              		.loc 1 767 5 view .LVU505
 1876              		.loc 1 767 8 is_stmt 0 view .LVU506
 1877 0000 0528     		cmp	r0, #5
 764:src/menu.c    **** #pragma GCC diagnostic push
 1878              		.loc 1 764 49 view .LVU507
 1879 0002 70B5     		push	{r4, r5, r6, lr}
 1880              		.cfi_def_cfa_offset 16
 1881              		.cfi_offset 4, -16
 1882              		.cfi_offset 5, -12
 1883              		.cfi_offset 6, -8
 1884              		.cfi_offset 14, -4
 764:src/menu.c    **** #pragma GCC diagnostic push
 1885              		.loc 1 764 49 view .LVU508
 1886 0004 0D46     		mov	r5, r1
 1887 0006 0446     		mov	r4, r0
 1888 0008 1146     		mov	r1, r2
 1889              	.LVL138:
 1890              		.loc 1 767 8 view .LVU509
 1891 000a 0FDC     		bgt	.L180
 1892              	.LBB109:
 768:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1893              		.loc 1 768 7 is_stmt 1 view .LVU510
 1894              		.loc 1 768 31 is_stmt 0 view .LVU511
 1895 000c 104E     		ldr	r6, .L183
 1896 000e 0130     		adds	r0, r0, #1
 1897              	.LVL139:
 769:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1898              		.loc 1 769 42 view .LVU512
 1899 0010 06EB4414 		add	r4, r6, r4, lsl #5
 1900              	.LVL140:
 768:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1901              		.loc 1 768 7 view .LVU513
 1902 0014 0722     		movs	r2, #7
 1903              	.LVL141:
 768:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1904              		.loc 1 768 7 view .LVU514
 1905 0016 06EB4010 		add	r0, r6, r0, lsl #5
 1906              	.LVL142:
 768:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1907              		.loc 1 768 7 view .LVU515
 1908 001a FFF7FEFF 		bl	strncpy
 1909              	.LVL143:
 1910              		.loc 1 769 7 is_stmt 1 view .LVU516
 1911              		.loc 1 769 42 is_stmt 0 view .LVU517
 1912 001e 0022     		movs	r2, #0
 770:src/menu.c    ****       UserMenu.keys[i].unshifted = (struct _ndmap) {K_OP, opc};
 1913              		.loc 1 770 34 view .LVU518
 1914 0020 3423     		movs	r3, #52
 769:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1915              		.loc 1 769 42 view .LVU519
 1916 0022 84F82720 		strb	r2, [r4, #39]
ARM GAS  /tmp/ccYL8bSL.s 			page 55


 1917              		.loc 1 770 7 is_stmt 1 view .LVU520
 1918              		.loc 1 770 34 is_stmt 0 view .LVU521
 1919 0026 2374     		strb	r3, [r4, #16]
 1920 0028 6561     		str	r5, [r4, #20]
 1921              	.LBE109:
 771:src/menu.c    ****     }
 772:src/menu.c    ****     else {
 773:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 774:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 775:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 776:src/menu.c    ****     }
 777:src/menu.c    **** #pragma GCC diagnostic pop
 778:src/menu.c    **** }  
 1922              		.loc 1 778 1 view .LVU522
 1923 002a 70BD     		pop	{r4, r5, r6, pc}
 1924              	.LVL144:
 1925              	.L180:
 1926              	.LBB110:
 1927              	.LBI110:
 764:src/menu.c    **** #pragma GCC diagnostic push
 1928              		.loc 1 764 6 is_stmt 1 view .LVU523
 1929              	.LBB111:
 1930              	.LBB112:
 773:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1931              		.loc 1 773 7 view .LVU524
 773:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1932              		.loc 1 773 30 is_stmt 0 view .LVU525
 1933 002c 841F     		subs	r4, r0, #6
 773:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1934              		.loc 1 773 33 view .LVU526
 1935 002e 084E     		ldr	r6, .L183
 1936 0030 6401     		lsls	r4, r4, #5
 1937 0032 04F12800 		add	r0, r4, #40
 1938              	.LVL145:
 773:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1939              		.loc 1 773 7 view .LVU527
 1940 0036 0722     		movs	r2, #7
 774:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1941              		.loc 1 774 42 view .LVU528
 1942 0038 3444     		add	r4, r4, r6
 773:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1943              		.loc 1 773 7 view .LVU529
 1944 003a 3044     		add	r0, r0, r6
 1945 003c FFF7FEFF 		bl	strncpy
 1946              	.LVL146:
 774:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1947              		.loc 1 774 7 is_stmt 1 view .LVU530
 774:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1948              		.loc 1 774 42 is_stmt 0 view .LVU531
 1949 0040 0022     		movs	r2, #0
 775:src/menu.c    ****     }
 1950              		.loc 1 775 34 view .LVU532
 1951 0042 3423     		movs	r3, #52
 774:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1952              		.loc 1 774 42 view .LVU533
 1953 0044 84F82F20 		strb	r2, [r4, #47]
 775:src/menu.c    ****     }
ARM GAS  /tmp/ccYL8bSL.s 			page 56


 1954              		.loc 1 775 7 is_stmt 1 view .LVU534
 1955              	.LVL147:
 775:src/menu.c    ****     }
 1956              		.loc 1 775 34 is_stmt 0 view .LVU535
 1957 0048 2376     		strb	r3, [r4, #24]
 1958 004a E561     		str	r5, [r4, #28]
 1959              	.LBE112:
 1960              	.LBE111:
 1961              	.LBE110:
 1962              		.loc 1 778 1 view .LVU536
 1963 004c 70BD     		pop	{r4, r5, r6, pc}
 1964              	.LVL148:
 1965              	.L184:
 1966              		.loc 1 778 1 view .LVU537
 1967 004e 00BF     		.align	2
 1968              	.L183:
 1969 0050 00000000 		.word	.LANCHOR4
 1970              		.cfi_endproc
 1971              	.LFE20:
 1973              		.section	.text.build_user_menu_from_program,"ax",%progbits
 1974              		.align	1
 1975              		.p2align 2,,3
 1976              		.global	build_user_menu_from_program
 1977              		.syntax unified
 1978              		.thumb
 1979              		.thumb_func
 1980              		.fpu fpv4-sp-d16
 1982              	build_user_menu_from_program:
 1983              	.LVL149:
 1984              	.LFB19:
 676:src/menu.c    ****   // find the label 'MNU'
 1985              		.loc 1 676 1 is_stmt 1 view -0
 1986              		.cfi_startproc
 1987              		@ args = 0, pretend = 0, frame = 16
 1988              		@ frame_needed = 0, uses_anonymous_args = 0
 679:src/menu.c    ****   int i=0;
 1989              		.loc 1 679 3 view .LVU539
 676:src/menu.c    ****   // find the label 'MNU'
 1990              		.loc 1 676 1 is_stmt 0 view .LVU540
 1991 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1992              		.cfi_def_cfa_offset 36
 1993              		.cfi_offset 4, -36
 1994              		.cfi_offset 5, -32
 1995              		.cfi_offset 6, -28
 1996              		.cfi_offset 7, -24
 1997              		.cfi_offset 8, -20
 1998              		.cfi_offset 9, -16
 1999              		.cfi_offset 10, -12
 2000              		.cfi_offset 11, -8
 2001              		.cfi_offset 14, -4
 679:src/menu.c    ****   int i=0;
 2002              		.loc 1 679 21 view .LVU541
 2003 0004 0021     		movs	r1, #0
 676:src/menu.c    ****   // find the label 'MNU'
 2004              		.loc 1 676 1 view .LVU542
 2005 0006 85B0     		sub	sp, sp, #20
 2006              		.cfi_def_cfa_offset 56
ARM GAS  /tmp/ccYL8bSL.s 			page 57


 679:src/menu.c    ****   int i=0;
 2007              		.loc 1 679 21 view .LVU543
 2008 0008 FFF7FEFF 		bl	findmultilbl
 2009              	.LVL150:
 679:src/menu.c    ****   int i=0;
 2010              		.loc 1 679 21 view .LVU544
 2011 000c 5C4B     		ldr	r3, .L236
 2012 000e 0546     		mov	r5, r0
 2013              	.LVL151:
 680:src/menu.c    ****   s_opcode op;
 2014              		.loc 1 680 3 is_stmt 1 view .LVU545
 681:src/menu.c    ****   opcode opc;
 2015              		.loc 1 681 3 view .LVU546
 682:src/menu.c    ****   char buf1[16];
 2016              		.loc 1 682 3 view .LVU547
 683:src/menu.c    ****   char *p = buf1;
 2017              		.loc 1 683 3 view .LVU548
 684:src/menu.c    ****   char c;
 2018              		.loc 1 684 3 view .LVU549
 685:src/menu.c    ****   int finished = 0;
 2019              		.loc 1 685 3 view .LVU550
 686:src/menu.c    **** 
 2020              		.loc 1 686 3 view .LVU551
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2021              		.loc 1 688 3 view .LVU552
 2022              	.LBB113:
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2023              		.loc 1 688 8 view .LVU553
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2024              		.loc 1 688 19 view .LVU554
 689:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2025              		.loc 1 689 43 is_stmt 0 view .LVU555
 2026 0010 0022     		movs	r2, #0
 2027 0012 03F1C000 		add	r0, r3, #192
 2028              	.LVL152:
 691:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2029              		.loc 1 691 42 view .LVU556
 2030 0016 2E21     		movs	r1, #46
 2031              	.LVL153:
 2032              	.L186:
 689:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2033              		.loc 1 689 7 is_stmt 1 discriminator 3 view .LVU557
 689:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2034              		.loc 1 689 43 is_stmt 0 discriminator 3 view .LVU558
 2035 0018 83F82020 		strb	r2, [r3, #32]
 690:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 2036              		.loc 1 690 7 is_stmt 1 discriminator 3 view .LVU559
 690:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 2037              		.loc 1 690 40 is_stmt 0 discriminator 3 view .LVU560
 2038 001c 5A61     		str	r2, [r3, #20]
 691:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2039              		.loc 1 691 7 is_stmt 1 discriminator 3 view .LVU561
 691:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2040              		.loc 1 691 42 is_stmt 0 discriminator 3 view .LVU562
 2041 001e 1974     		strb	r1, [r3, #16]
 692:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 2042              		.loc 1 692 7 is_stmt 1 discriminator 3 view .LVU563
ARM GAS  /tmp/ccYL8bSL.s 			page 58


 692:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 2043              		.loc 1 692 41 is_stmt 0 discriminator 3 view .LVU564
 2044 0020 83F82820 		strb	r2, [r3, #40]
 693:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 2045              		.loc 1 693 7 is_stmt 1 discriminator 3 view .LVU565
 693:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 2046              		.loc 1 693 38 is_stmt 0 discriminator 3 view .LVU566
 2047 0024 DA61     		str	r2, [r3, #28]
 694:src/menu.c    ****   }
 2048              		.loc 1 694 7 is_stmt 1 discriminator 3 view .LVU567
 694:src/menu.c    ****   }
 2049              		.loc 1 694 40 is_stmt 0 discriminator 3 view .LVU568
 2050 0026 1976     		strb	r1, [r3, #24]
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2051              		.loc 1 688 24 is_stmt 1 discriminator 3 view .LVU569
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2052              		.loc 1 688 19 discriminator 3 view .LVU570
 2053 0028 2033     		adds	r3, r3, #32
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2054              		.loc 1 688 3 is_stmt 0 discriminator 3 view .LVU571
 2055 002a 8342     		cmp	r3, r0
 2056 002c F4D1     		bne	.L186
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2057              		.loc 1 688 3 discriminator 3 view .LVU572
 2058              	.LBE113:
 696:src/menu.c    **** 
 2059              		.loc 1 696 9 is_stmt 1 view .LVU573
 2060 002e 65B3     		cbz	r5, .L185
 2061              	.LBB114:
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2062              		.loc 1 710 29 is_stmt 0 view .LVU574
 2063 0030 DFF86891 		ldr	r9, .L236+28
 2064              	.LBE114:
 686:src/menu.c    **** 
 2065              		.loc 1 686 7 view .LVU575
 2066 0034 4FF00008 		mov	r8, #0
 684:src/menu.c    ****   char c;
 2067              		.loc 1 684 9 view .LVU576
 2068 0038 6E46     		mov	r6, sp
 2069              	.LBB115:
 707:src/menu.c    ****       }
 2070              		.loc 1 707 2 view .LVU577
 2071 003a A9F1100A 		sub	r10, r9, #16
 2072              	.LBE115:
 680:src/menu.c    ****   s_opcode op;
 2073              		.loc 1 680 7 view .LVU578
 2074 003e C346     		mov	fp, r8
 684:src/menu.c    ****   char c;
 2075              		.loc 1 684 9 view .LVU579
 2076 0040 3746     		mov	r7, r6
 2077              	.LVL154:
 2078              	.L187:
 698:src/menu.c    ****     opc = getprog(pc);
 2079              		.loc 1 698 5 is_stmt 1 view .LVU580
 698:src/menu.c    ****     opc = getprog(pc);
 2080              		.loc 1 698 10 is_stmt 0 view .LVU581
 2081 0042 2846     		mov	r0, r5
ARM GAS  /tmp/ccYL8bSL.s 			page 59


 2082 0044 0021     		movs	r1, #0
 2083 0046 FFF7FEFF 		bl	do_inc
 2084              	.LVL155:
 2085 004a 0546     		mov	r5, r0
 2086              	.LVL156:
 699:src/menu.c    ****     op = (s_opcode) opc;
 2087              		.loc 1 699 5 is_stmt 1 view .LVU582
 699:src/menu.c    ****     op = (s_opcode) opc;
 2088              		.loc 1 699 11 is_stmt 0 view .LVU583
 2089 004c FFF7FEFF 		bl	getprog
 2090              	.LVL157:
 700:src/menu.c    **** 
 2091              		.loc 1 700 8 view .LVU584
 2092 0050 83B2     		uxth	r3, r0
 702:src/menu.c    ****       break;
 2093              		.loc 1 702 8 view .LVU585
 2094 0052 B3F59D7F 		cmp	r3, #314
 699:src/menu.c    ****     op = (s_opcode) opc;
 2095              		.loc 1 699 11 view .LVU586
 2096 0056 0446     		mov	r4, r0
 2097              	.LVL158:
 700:src/menu.c    **** 
 2098              		.loc 1 700 5 is_stmt 1 view .LVU587
 702:src/menu.c    ****       break;
 2099              		.loc 1 702 5 view .LVU588
 702:src/menu.c    ****       break;
 2100              		.loc 1 702 8 is_stmt 0 view .LVU589
 2101 0058 17D0     		beq	.L185
 704:src/menu.c    ****       if (i==4) {
 2102              		.loc 1 704 5 is_stmt 1 view .LVU590
 704:src/menu.c    ****       if (i==4) {
 2103              		.loc 1 704 8 is_stmt 0 view .LVU591
 2104 005a B3F5807F 		cmp	r3, #256
 2105 005e 43D0     		beq	.L228
 717:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2106              		.loc 1 717 5 is_stmt 1 view .LVU592
 717:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2107              		.loc 1 717 9 is_stmt 0 view .LVU593
 2108 0060 00F47042 		and	r2, r0, #61440
 717:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2109              		.loc 1 717 8 view .LVU594
 2110 0064 B2F5704F 		cmp	r2, #61440
 2111 0068 12D0     		beq	.L229
 2112              	.L193:
 738:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2113              		.loc 1 738 7 is_stmt 1 view .LVU595
 738:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2114              		.loc 1 738 10 is_stmt 0 view .LVU596
 2115 006a B742     		cmp	r7, r6
 2116 006c 26D0     		beq	.L230
 756:src/menu.c    ****       }
 2117              		.loc 1 756 11 view .LVU597
 2118 006e 4FF00008 		mov	r8, #0
 2119              	.LVL159:
 2120              	.L199:
 758:src/menu.c    ****       i++;
 2121              		.loc 1 758 7 is_stmt 1 view .LVU598
ARM GAS  /tmp/ccYL8bSL.s 			page 60


 2122 0072 5846     		mov	r0, fp
 2123 0074 2146     		mov	r1, r4
 2124 0076 3246     		mov	r2, r6
 2125 0078 FFF7FEFF 		bl	umen_store
 2126              	.LVL160:
 759:src/menu.c    ****     }
 2127              		.loc 1 759 7 view .LVU599
 759:src/menu.c    ****     }
 2128              		.loc 1 759 8 is_stmt 0 view .LVU600
 2129 007c 0BF1010B 		add	fp, fp, #1
 2130              	.LVL161:
 759:src/menu.c    ****     }
 2131              		.loc 1 759 8 view .LVU601
 2132 0080 3746     		mov	r7, r6
 2133              	.LVL162:
 2134              	.L192:
 696:src/menu.c    **** 
 2135              		.loc 1 696 9 is_stmt 1 view .LVU602
 2136 0082 15B1     		cbz	r5, .L185
 696:src/menu.c    **** 
 2137              		.loc 1 696 13 is_stmt 0 discriminator 1 view .LVU603
 2138 0084 BBF10C0F 		cmp	fp, #12
 2139 0088 DBD1     		bne	.L187
 2140              	.LVL163:
 2141              	.L185:
 762:src/menu.c    **** 
 2142              		.loc 1 762 1 view .LVU604
 2143 008a 05B0     		add	sp, sp, #20
 2144              		.cfi_remember_state
 2145              		.cfi_def_cfa_offset 36
 2146              		@ sp needed
 2147 008c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2148              	.LVL164:
 2149              	.L229:
 2150              		.cfi_restore_state
 717:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2151              		.loc 1 717 24 discriminator 1 view .LVU605
 2152 0090 C0F30321 		ubfx	r1, r0, #8, #4
 717:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2153              		.loc 1 717 20 discriminator 1 view .LVU606
 2154 0094 0A29     		cmp	r1, #10
 2155 0096 E8D1     		bne	.L193
 718:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2156              		.loc 1 718 7 is_stmt 1 view .LVU607
 718:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2157              		.loc 1 718 10 is_stmt 0 view .LVU608
 2158 0098 B8F1000F 		cmp	r8, #0
 2159 009c 40D1     		bne	.L194
 718:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2160              		.loc 1 718 29 discriminator 1 view .LVU609
 2161 009e BB1B     		subs	r3, r7, r6
 2162              	.LVL165:
 718:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2163              		.loc 1 718 24 discriminator 1 view .LVU610
 2164 00a0 062B     		cmp	r3, #6
 2165 00a2 3DD0     		beq	.L194
 2166              	.LVL166:
ARM GAS  /tmp/ccYL8bSL.s 			page 61


 724:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2167              		.loc 1 724 7 is_stmt 1 view .LVU611
 726:src/menu.c    **** 	*p++ = c;
 2168              		.loc 1 726 10 is_stmt 0 view .LVU612
 2169 00a4 14F47F0F 		tst	r4, #16711680
 724:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2170              		.loc 1 724 12 view .LVU613
 2171 00a8 3C70     		strb	r4, [r7]
 725:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2172              		.loc 1 725 7 is_stmt 1 view .LVU614
 725:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2173              		.loc 1 725 9 is_stmt 0 view .LVU615
 2174 00aa C4F30743 		ubfx	r3, r4, #16, #8
 2175              	.LVL167:
 726:src/menu.c    **** 	*p++ = c;
 2176              		.loc 1 726 7 is_stmt 1 view .LVU616
 726:src/menu.c    **** 	*p++ = c;
 2177              		.loc 1 726 10 is_stmt 0 view .LVU617
 2178 00ae 24D1     		bne	.L231
 2179              	.LVL168:
 2180              	.L196:
 724:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2181              		.loc 1 724 9 view .LVU618
 2182 00b0 0137     		adds	r7, r7, #1
 2183              	.LVL169:
 2184              	.L198:
 732:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2185              		.loc 1 732 7 is_stmt 1 view .LVU619
 732:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2186              		.loc 1 732 10 is_stmt 0 view .LVU620
 2187 00b2 0023     		movs	r3, #0
 2188 00b4 3B70     		strb	r3, [r7]
 733:src/menu.c    **** 	finished = 1;
 2189              		.loc 1 733 7 is_stmt 1 view .LVU621
 734:src/menu.c    ****       }
 2190              		.loc 1 734 11 is_stmt 0 view .LVU622
 2191 00b6 4FF00108 		mov	r8, #1
 2192 00ba E2E7     		b	.L192
 2193              	.LVL170:
 2194              	.L230:
 739:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2195              		.loc 1 739 2 is_stmt 1 view .LVU623
 2196 00bc A0B2     		uxth	r0, r4
 2197              	.LVL171:
 739:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2198              		.loc 1 739 5 is_stmt 0 view .LVU624
 2199 00be 72B1     		cbz	r2, .L200
 739:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2200              		.loc 1 739 6 discriminator 1 view .LVU625
 2201 00c0 B2F5704F 		cmp	r2, #61440
 2202 00c4 0BD0     		beq	.L200
 2203              	.LBB116:
 740:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2204              		.loc 1 740 4 is_stmt 1 view .LVU626
 740:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2205              		.loc 1 740 26 is_stmt 0 view .LVU627
 2206 00c6 1B0A     		lsrs	r3, r3, #8
ARM GAS  /tmp/ccYL8bSL.s 			page 62


 2207              	.LVL172:
 740:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2208              		.loc 1 740 26 view .LVU628
 2209 00c8 203B     		subs	r3, r3, #32
 2210 00ca DBB2     		uxtb	r3, r3
 2211              	.LVL173:
 741:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2212              		.loc 1 741 4 is_stmt 1 view .LVU629
 741:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2213              		.loc 1 741 7 is_stmt 0 view .LVU630
 2214 00cc 242B     		cmp	r3, #36
 2215 00ce 06D0     		beq	.L200
 741:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2216              		.loc 1 741 28 discriminator 1 view .LVU631
 2217 00d0 6C2B     		cmp	r3, #108
 2218 00d2 04D0     		beq	.L200
 742:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 2219              		.loc 1 742 9 view .LVU632
 2220 00d4 012B     		cmp	r3, #1
 2221 00d6 02D9     		bls	.L200
 743:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2222              		.loc 1 743 9 view .LVU633
 2223 00d8 10F0FF0F 		tst	r0, #255
 2224 00dc 4BD0     		beq	.L232
 2225              	.LVL174:
 2226              	.L200:
 743:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2227              		.loc 1 743 9 view .LVU634
 2228              	.LBE116:
 751:src/menu.c    **** 	}
 2229              		.loc 1 751 4 is_stmt 1 view .LVU635
 2230 00de 3146     		mov	r1, r6
 2231 00e0 2046     		mov	r0, r4
 2232 00e2 FFF7FEFF 		bl	prt_umen
 2233              	.LVL175:
 2234 00e6 C4E7     		b	.L199
 2235              	.LVL176:
 2236              	.L228:
 705:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2237              		.loc 1 705 7 view .LVU636
 705:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2238              		.loc 1 705 10 is_stmt 0 view .LVU637
 2239 00e8 BBF1040F 		cmp	fp, #4
 2240 00ec 28D0     		beq	.L233
 709:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2241              		.loc 1 709 12 is_stmt 1 view .LVU638
 709:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2242              		.loc 1 709 15 is_stmt 0 view .LVU639
 2243 00ee BBF1050F 		cmp	fp, #5
 2244 00f2 32D0     		beq	.L234
 2245              	.LVL177:
 2246              	.L191:
 713:src/menu.c    ****       continue;
 2247              		.loc 1 713 7 is_stmt 1 view .LVU640
 713:src/menu.c    ****       continue;
 2248              		.loc 1 713 9 is_stmt 0 view .LVU641
 2249 00f4 0BF1010B 		add	fp, fp, #1
ARM GAS  /tmp/ccYL8bSL.s 			page 63


 2250              	.LVL178:
 714:src/menu.c    ****     }
 2251              		.loc 1 714 7 is_stmt 1 view .LVU642
 2252 00f8 C3E7     		b	.L192
 2253              	.LVL179:
 2254              	.L231:
 727:src/menu.c    **** 	c = opc>>24;
 2255              		.loc 1 727 2 view .LVU643
 727:src/menu.c    **** 	c = opc>>24;
 2256              		.loc 1 727 7 is_stmt 0 view .LVU644
 2257 00fa 7B70     		strb	r3, [r7, #1]
 728:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2258              		.loc 1 728 2 is_stmt 1 view .LVU645
 729:src/menu.c    **** 	  *p++ = c;
 2259              		.loc 1 729 5 is_stmt 0 view .LVU646
 2260 00fc 230E     		lsrs	r3, r4, #24
 2261              	.LVL180:
 728:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2262              		.loc 1 728 4 view .LVU647
 2263 00fe 4FEA1461 		lsr	r1, r4, #24
 2264              	.LVL181:
 729:src/menu.c    **** 	  *p++ = c;
 2265              		.loc 1 729 2 is_stmt 1 view .LVU648
 729:src/menu.c    **** 	  *p++ = c;
 2266              		.loc 1 729 5 is_stmt 0 view .LVU649
 2267 0102 36D0     		beq	.L235
 730:src/menu.c    ****       }
 2268              		.loc 1 730 4 is_stmt 1 view .LVU650
 730:src/menu.c    ****       }
 2269              		.loc 1 730 6 is_stmt 0 view .LVU651
 2270 0104 FB1C     		adds	r3, r7, #3
 2271              	.LVL182:
 733:src/menu.c    **** 	finished = 1;
 2272              		.loc 1 733 26 view .LVU652
 2273 0106 A3EB0608 		sub	r8, r3, r6
 733:src/menu.c    **** 	finished = 1;
 2274              		.loc 1 733 21 view .LVU653
 2275 010a A8F10608 		sub	r8, r8, #6
 732:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2276              		.loc 1 732 10 view .LVU654
 2277 010e 0022     		movs	r2, #0
 733:src/menu.c    **** 	finished = 1;
 2278              		.loc 1 733 21 view .LVU655
 2279 0110 B8FA88F8 		clz	r8, r8
 730:src/menu.c    ****       }
 2280              		.loc 1 730 9 view .LVU656
 2281 0114 B970     		strb	r1, [r7, #2]
 732:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2282              		.loc 1 732 7 is_stmt 1 view .LVU657
 732:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2283              		.loc 1 732 10 is_stmt 0 view .LVU658
 2284 0116 FA70     		strb	r2, [r7, #3]
 733:src/menu.c    **** 	finished = 1;
 2285              		.loc 1 733 7 is_stmt 1 view .LVU659
 733:src/menu.c    **** 	finished = 1;
 2286              		.loc 1 733 21 is_stmt 0 view .LVU660
 2287 0118 4FEA5818 		lsr	r8, r8, #5
ARM GAS  /tmp/ccYL8bSL.s 			page 64


 730:src/menu.c    ****       }
 2288              		.loc 1 730 6 view .LVU661
 2289 011c 1F46     		mov	r7, r3
 2290 011e B0E7     		b	.L192
 2291              	.LVL183:
 2292              	.L194:
 719:src/menu.c    **** 	i++;
 2293              		.loc 1 719 2 is_stmt 1 view .LVU662
 2294 0120 5846     		mov	r0, fp
 2295              	.LVL184:
 719:src/menu.c    **** 	i++;
 2296              		.loc 1 719 2 is_stmt 0 view .LVU663
 2297 0122 3246     		mov	r2, r6
 2298 0124 4FF48071 		mov	r1, #256
 721:src/menu.c    **** 	finished = 0;
 2299              		.loc 1 721 8 view .LVU664
 2300 0128 3746     		mov	r7, r6
 2301              	.LVL185:
 719:src/menu.c    **** 	i++;
 2302              		.loc 1 719 2 view .LVU665
 2303 012a FFF7FEFF 		bl	umen_store
 2304              	.LVL186:
 720:src/menu.c    ****     	p = buf1;
 2305              		.loc 1 720 2 is_stmt 1 view .LVU666
 726:src/menu.c    **** 	*p++ = c;
 2306              		.loc 1 726 10 is_stmt 0 view .LVU667
 2307 012e 14F47F0F 		tst	r4, #16711680
 720:src/menu.c    ****     	p = buf1;
 2308              		.loc 1 720 3 view .LVU668
 2309 0132 0BF1010B 		add	fp, fp, #1
 2310              	.LVL187:
 721:src/menu.c    **** 	finished = 0;
 2311              		.loc 1 721 6 is_stmt 1 view .LVU669
 722:src/menu.c    ****       } // ..and start reading the new alpha
 2312              		.loc 1 722 2 view .LVU670
 724:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2313              		.loc 1 724 7 view .LVU671
 724:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2314              		.loc 1 724 12 is_stmt 0 view .LVU672
 2315 0136 3C70     		strb	r4, [r7]
 725:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2316              		.loc 1 725 7 is_stmt 1 view .LVU673
 725:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2317              		.loc 1 725 9 is_stmt 0 view .LVU674
 2318 0138 C4F30743 		ubfx	r3, r4, #16, #8
 2319              	.LVL188:
 726:src/menu.c    **** 	*p++ = c;
 2320              		.loc 1 726 7 is_stmt 1 view .LVU675
 726:src/menu.c    **** 	*p++ = c;
 2321              		.loc 1 726 10 is_stmt 0 view .LVU676
 2322 013c B8D0     		beq	.L196
 2323              	.LVL189:
 726:src/menu.c    **** 	*p++ = c;
 2324              		.loc 1 726 10 view .LVU677
 2325 013e DCE7     		b	.L231
 2326              	.LVL190:
 2327              	.L233:
ARM GAS  /tmp/ccYL8bSL.s 			page 65


 2328              	.LBB117:
 706:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2329              		.loc 1 706 2 is_stmt 1 view .LVU678
 706:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2330              		.loc 1 706 29 is_stmt 0 view .LVU679
 2331 0140 104B     		ldr	r3, .L236+4
 2332              	.LVL191:
 707:src/menu.c    ****       }
 2333              		.loc 1 707 2 view .LVU680
 2334 0142 114C     		ldr	r4, .L236+8
 706:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2335              		.loc 1 706 29 view .LVU681
 2336 0144 93E80300 		ldm	r3, {r0, r1}
 2337              	.LVL192:
 706:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2338              		.loc 1 706 29 view .LVU682
 2339 0148 104B     		ldr	r3, .L236+12
 707:src/menu.c    ****       }
 2340              		.loc 1 707 2 view .LVU683
 2341 014a 0522     		movs	r2, #5
 706:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2342              		.loc 1 706 29 view .LVU684
 2343 014c 83E80300 		stm	r3, {r0, r1}
 707:src/menu.c    ****       }
 2344              		.loc 1 707 2 is_stmt 1 view .LVU685
 2345 0150 2168     		ldr	r1, [r4]
 2346 0152 5046     		mov	r0, r10
 2347 0154 FFF7FEFF 		bl	strncpy
 2348              	.LVL193:
 2349              	.LBE117:
 2350 0158 CCE7     		b	.L191
 2351              	.LVL194:
 2352              	.L234:
 2353              	.LBB118:
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2354              		.loc 1 710 2 view .LVU686
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2355              		.loc 1 710 29 is_stmt 0 view .LVU687
 2356 015a 0D4B     		ldr	r3, .L236+16
 2357              	.LVL195:
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2358              		.loc 1 710 29 view .LVU688
 2359 015c 93E80300 		ldm	r3, {r0, r1}
 2360              	.LVL196:
 711:src/menu.c    ****       }
 2361              		.loc 1 711 2 view .LVU689
 2362 0160 0C4B     		ldr	r3, .L236+20
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2363              		.loc 1 710 29 view .LVU690
 2364 0162 89E80300 		stm	r9, {r0, r1}
 711:src/menu.c    ****       }
 2365              		.loc 1 711 2 is_stmt 1 view .LVU691
 2366 0166 5A46     		mov	r2, fp
 2367 0168 1968     		ldr	r1, [r3]
 2368 016a 0B48     		ldr	r0, .L236+24
 2369 016c FFF7FEFF 		bl	strncpy
 2370              	.LVL197:
ARM GAS  /tmp/ccYL8bSL.s 			page 66


 2371 0170 C0E7     		b	.L191
 2372              	.LVL198:
 2373              	.L235:
 711:src/menu.c    ****       }
 2374              		.loc 1 711 2 is_stmt 0 view .LVU692
 2375              	.LBE118:
 727:src/menu.c    **** 	c = opc>>24;
 2376              		.loc 1 727 4 view .LVU693
 2377 0172 0237     		adds	r7, r7, #2
 2378              	.LVL199:
 727:src/menu.c    **** 	c = opc>>24;
 2379              		.loc 1 727 4 view .LVU694
 2380 0174 9DE7     		b	.L198
 2381              	.LVL200:
 2382              	.L232:
 2383              	.LBB119:
 744:src/menu.c    **** 	  }
 2384              		.loc 1 744 6 is_stmt 1 view .LVU695
 2385 0176 3146     		mov	r1, r6
 2386 0178 FFF7FEFF 		bl	catcmd
 2387              	.LVL201:
 744:src/menu.c    **** 	  }
 2388              		.loc 1 744 6 is_stmt 0 view .LVU696
 2389 017c 79E7     		b	.L199
 2390              	.L237:
 2391 017e 00BF     		.align	2
 2392              	.L236:
 2393 0180 00000000 		.word	.LANCHOR4
 2394 0184 00000000 		.word	.LANCHOR5
 2395 0188 00000000 		.word	.LANCHOR6
 2396 018c 90000000 		.word	.LANCHOR4+144
 2397 0190 08000000 		.word	.LANCHOR5+8
 2398 0194 00000000 		.word	.LANCHOR7
 2399 0198 C0000000 		.word	.LANCHOR4+192
 2400 019c B0000000 		.word	.LANCHOR4+176
 2401              	.LBE119:
 2402              		.cfi_endproc
 2403              	.LFE19:
 2405              		.section	.text.build_user_menu,"ax",%progbits
 2406              		.align	1
 2407              		.p2align 2,,3
 2408              		.global	build_user_menu
 2409              		.syntax unified
 2410              		.thumb
 2411              		.thumb_func
 2412              		.fpu fpv4-sp-d16
 2414              	build_user_menu:
 2415              	.LFB18:
 669:src/menu.c    ****   // find the label 'MNU'
 2416              		.loc 1 669 27 is_stmt 1 view -0
 2417              		.cfi_startproc
 2418              		@ args = 0, pretend = 0, frame = 0
 2419              		@ frame_needed = 0, uses_anonymous_args = 0
 2420              		@ link register save eliminated.
 671:src/menu.c    ****    build_user_menu_from_program (lbl);
 2421              		.loc 1 671 4 view .LVU698
 2422              	.LVL202:
ARM GAS  /tmp/ccYL8bSL.s 			page 67


 672:src/menu.c    **** }
 2423              		.loc 1 672 4 view .LVU699
 2424 0000 0148     		ldr	r0, .L239
 2425 0002 FFF7FEBF 		b	build_user_menu_from_program
 2426              	.LVL203:
 2427              	.L240:
 2428 0006 00BF     		.align	2
 2429              	.L239:
 2430 0008 4DF04E55 		.word	1431236685
 2431              		.cfi_endproc
 2432              	.LFE18:
 2434              		.section	.text.shutdown,"ax",%progbits
 2435              		.align	1
 2436              		.p2align 2,,3
 2437              		.global	shutdown
 2438              		.syntax unified
 2439              		.thumb
 2440              		.thumb_func
 2441              		.fpu fpv4-sp-d16
 2443              	shutdown:
 2444              	.LFB22:
 2445              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
ARM GAS  /tmp/ccYL8bSL.s 			page 68


  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #ifdef INCLUDE_STOPWATCH
  39:src/console.c **** #include "stopwatch.h"
  40:src/console.c **** #endif
  41:src/console.c **** #undef DM42SAFE
  42:src/console.c **** 
  43:src/console.c **** 
  44:src/console.c **** #ifdef DM42
  45:src/console.c **** 
  46:src/console.c **** #include <menu.c>
  47:src/console.c **** 
  48:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  49:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  50:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  51:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  52:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  53:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  54:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  55:src/console.c **** 
  56:src/console.c **** static struct _ndmap remap (const int c) {
  57:src/console.c **** 
  58:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  59:src/console.c **** 
  60:src/console.c **** #include "keytran.c"
  61:src/console.c **** 
  62:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  63:src/console.c **** 
  64:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  65:src/console.c **** 
  66:src/console.c ****   if (c == 44 ) {
  67:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  68:src/console.c ****     return sshot;
  69:src/console.c ****   }
  70:src/console.c ****   
  71:src/console.c ****   if (Running | Pause) {
  72:src/console.c ****     return mapping_running[c];
  73:src/console.c ****   }
  74:src/console.c **** 
  75:src/console.c ****   struct _menu Ref = get_current_menu_ref();
  76:src/console.c ****   
  77:src/console.c ****   switch (c) {
  78:src/console.c ****   case KEY_F1:
  79:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[0].unshifted;
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
  81:src/console.c ****   case KEY_F2:
  82:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[1].unshifted;
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
  84:src/console.c ****   case KEY_F3:
  85:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[2].unshifted;
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
  87:src/console.c ****   case KEY_F4:
  88:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[3].unshifted;
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
  90:src/console.c ****   case KEY_F5:
  91:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[4].unshifted;
  92:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
ARM GAS  /tmp/ccYL8bSL.s 			page 69


  93:src/console.c ****   case KEY_F6:
  94:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[5].unshifted;
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
  96:src/console.c ****   }
  97:src/console.c **** 
  98:src/console.c ****   if ( get_alpha_state() ) {
  99:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 100:src/console.c ****       switch (cur_shift()) { 
 101:src/console.c ****       case SHIFT_N:
 102:src/console.c **** 	return mapping_none[c]; // N -> F
 103:src/console.c **** 	break;
 104:src/console.c ****       case SHIFT_F:
 105:src/console.c **** 	return mapping_fshift[c]; // F -> G
 106:src/console.c **** 	break;
 107:src/console.c ****       case SHIFT_G:
 108:src/console.c **** 	return h_shift; // G -> H
 109:src/console.c **** 	break;
 110:src/console.c ****       case SHIFT_H:
 111:src/console.c **** 	return h_shift; // H -> N
 112:src/console.c ****       default:
 113:src/console.c **** 	return no_change;
 114:src/console.c ****       }
 115:src/console.c ****     }
 116:src/console.c ****     return mapping_alpha [c];
 117:src/console.c ****   }
 118:src/console.c **** 
 119:src/console.c ****   switch (cur_shift()) {
 120:src/console.c ****   case SHIFT_N:    
 121:src/console.c ****     return mapping_none[c];
 122:src/console.c ****     break;
 123:src/console.c ****   case SHIFT_F:
 124:src/console.c ****     return mapping_fshift[c];
 125:src/console.c ****     break;
 126:src/console.c ****   case SHIFT_G:
 127:src/console.c ****     return mapping_gshift[c];
 128:src/console.c ****     break;
 129:src/console.c ****   default:
 130:src/console.c ****     return no_change;
 131:src/console.c ****   }
 132:src/console.c **** }
 133:src/console.c **** 
 134:src/console.c **** #endif
 135:src/console.c **** 
 136:src/console.c **** void shutdown( void )
 137:src/console.c **** {
 2446              		.loc 2 137 1 view -0
 2447              		.cfi_startproc
 2448              		@ args = 0, pretend = 0, frame = 0
 2449              		@ frame_needed = 0, uses_anonymous_args = 0
 2450              		@ link register save eliminated.
 138:src/console.c **** #ifndef DM42
 139:src/console.c ****   checksum_all();
 140:src/console.c ****   setuptty( 1 );
 141:src/console.c ****   save_statefile( NULL );
 142:src/console.c ****   exit( 0 );
 143:src/console.c **** #else
 144:src/console.c ****   //  save_ram_file(0);
ARM GAS  /tmp/ccYL8bSL.s 			page 70


 145:src/console.c ****   SET_ST(STAT_PGM_END);
 2451              		.loc 2 145 3 view .LVU701
 2452 0000 024A     		ldr	r2, .L242
 2453 0002 1368     		ldr	r3, [r2]
 2454 0004 43F40073 		orr	r3, r3, #512
 2455 0008 1360     		str	r3, [r2]
 146:src/console.c **** #endif
 147:src/console.c **** }
 2456              		.loc 2 147 1 is_stmt 0 view .LVU702
 2457 000a 7047     		bx	lr
 2458              	.L243:
 2459              		.align	2
 2460              	.L242:
 2461 000c 00200010 		.word	268443648
 2462              		.cfi_endproc
 2463              	.LFE22:
 2465              		.section	.text.is_key_pressed,"ax",%progbits
 2466              		.align	1
 2467              		.p2align 2,,3
 2468              		.global	is_key_pressed
 2469              		.syntax unified
 2470              		.thumb
 2471              		.thumb_func
 2472              		.fpu fpv4-sp-d16
 2474              	is_key_pressed:
 2475              	.LFB23:
 148:src/console.c **** 
 149:src/console.c **** 
 150:src/console.c **** /*
 151:src/console.c ****  *  Dummies
 152:src/console.c ****  */
 153:src/console.c **** int is_key_pressed(void) 
 154:src/console.c **** {
 2476              		.loc 2 154 1 is_stmt 1 view -0
 2477              		.cfi_startproc
 2478              		@ args = 0, pretend = 0, frame = 0
 2479              		@ frame_needed = 0, uses_anonymous_args = 0
 155:src/console.c **** #ifdef DM42
 156:src/console.c ****   return !key_empty();
 2480              		.loc 2 156 3 view .LVU704
 154:src/console.c **** #ifdef DM42
 2481              		.loc 2 154 1 is_stmt 0 view .LVU705
 2482 0000 08B5     		push	{r3, lr}
 2483              		.cfi_def_cfa_offset 8
 2484              		.cfi_offset 3, -8
 2485              		.cfi_offset 14, -4
 2486              		.loc 2 156 11 view .LVU706
 2487 0002 034B     		ldr	r3, .L246
 2488 0004 9847     		blx	r3
 2489              	.LVL204:
 157:src/console.c **** #else
 158:src/console.c ****   return 0;
 159:src/console.c **** #endif
 160:src/console.c **** }
 2490              		.loc 2 160 1 view .LVU707
 2491 0006 B0FA80F0 		clz	r0, r0
 2492 000a 4009     		lsrs	r0, r0, #5
ARM GAS  /tmp/ccYL8bSL.s 			page 71


 2493 000c 08BD     		pop	{r3, pc}
 2494              	.L247:
 2495 000e 00BF     		.align	2
 2496              	.L246:
 2497 0010 7D030008 		.word	134218621
 2498              		.cfi_endproc
 2499              	.LFE23:
 2501              		.section	.text.get_key,"ax",%progbits
 2502              		.align	1
 2503              		.p2align 2,,3
 2504              		.global	get_key
 2505              		.syntax unified
 2506              		.thumb
 2507              		.thumb_func
 2508              		.fpu fpv4-sp-d16
 2510              	get_key:
 2511              	.LFB24:
 161:src/console.c **** 
 162:src/console.c **** int get_key(void)
 163:src/console.c **** {
 2512              		.loc 2 163 1 is_stmt 1 view -0
 2513              		.cfi_startproc
 2514              		@ args = 0, pretend = 0, frame = 0
 2515              		@ frame_needed = 0, uses_anonymous_args = 0
 2516              		@ link register save eliminated.
 164:src/console.c ****   #ifdef DM42
 165:src/console.c ****   return key_pop();
 2517              		.loc 2 165 3 view .LVU709
 2518              		.loc 2 165 10 is_stmt 0 view .LVU710
 2519 0000 004B     		ldr	r3, .L249
 2520 0002 1847     		bx	r3
 2521              	.LVL205:
 2522              	.L250:
 2523              		.align	2
 2524              	.L249:
 2525 0004 89030008 		.word	134218633
 2526              		.cfi_endproc
 2527              	.LFE24:
 2529              		.section	.text.put_key,"ax",%progbits
 2530              		.align	1
 2531              		.p2align 2,,3
 2532              		.global	put_key
 2533              		.syntax unified
 2534              		.thumb
 2535              		.thumb_func
 2536              		.fpu fpv4-sp-d16
 2538              	put_key:
 2539              	.LVL206:
 2540              	.LFB25:
 166:src/console.c ****   #else
 167:src/console.c ****   return 0;
 168:src/console.c ****   #endif
 169:src/console.c **** }
 170:src/console.c **** 
 171:src/console.c **** /*
 172:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 173:src/console.c ****  * 
ARM GAS  /tmp/ccYL8bSL.s 			page 72


 174:src/console.c ****  */
 175:src/console.c **** int put_key( int k )
 176:src/console.c **** {
 2541              		.loc 2 176 1 is_stmt 1 view -0
 2542              		.cfi_startproc
 2543              		@ args = 0, pretend = 0, frame = 48
 2544              		@ frame_needed = 0, uses_anonymous_args = 0
 2545              		@ link register save eliminated.
 177:src/console.c ****   #ifdef DM42
 178:src/console.c ****   const char wp34s_to_DM42[] = {
 2546              		.loc 2 178 3 view .LVU712
 176:src/console.c ****   #ifdef DM42
 2547              		.loc 2 176 1 is_stmt 0 view .LVU713
 2548 0000 70B4     		push	{r4, r5, r6}
 2549              		.cfi_def_cfa_offset 12
 2550              		.cfi_offset 4, -12
 2551              		.cfi_offset 5, -8
 2552              		.cfi_offset 6, -4
 2553              		.loc 2 178 14 view .LVU714
 2554 0002 0E4D     		ldr	r5, .L254
 176:src/console.c ****   #ifdef DM42
 2555              		.loc 2 176 1 view .LVU715
 2556 0004 0646     		mov	r6, r0
 2557              		.loc 2 178 14 view .LVU716
 2558 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2559              	.LVL207:
 176:src/console.c ****   #ifdef DM42
 2560              		.loc 2 176 1 view .LVU717
 2561 0008 8DB0     		sub	sp, sp, #52
 2562              		.cfi_def_cfa_offset 64
 2563              		.loc 2 178 14 view .LVU718
 2564 000a 01AC     		add	r4, sp, #4
 2565 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2566 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2567 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2568 0012 95E80700 		ldm	r5, {r0, r1, r2}
 2569 0016 03C4     		stmia	r4!, {r0, r1}
 179:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 180:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 181:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 182:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 183:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 184:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 185:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 186:src/console.c ****   
 187:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 2570              		.loc 2 187 6 view .LVU719
 2571 0018 282E     		cmp	r6, #40
 178:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 2572              		.loc 2 178 14 view .LVU720
 2573 001a 2270     		strb	r2, [r4]
 2574              		.loc 2 187 3 is_stmt 1 view .LVU721
 2575              		.loc 2 187 6 is_stmt 0 view .LVU722
 2576 001c 08D8     		bhi	.L252
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2577              		.loc 2 188 5 is_stmt 1 view .LVU723
 2578              		.loc 2 188 36 is_stmt 0 view .LVU724
ARM GAS  /tmp/ccYL8bSL.s 			page 73


 2579 001e 0CAB     		add	r3, sp, #48
 2580 0020 3046     		mov	r0, r6
 2581 0022 1844     		add	r0, r0, r3
 2582              		.loc 2 188 12 view .LVU725
 2583 0024 064B     		ldr	r3, .L254+4
 2584 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 189:src/console.c ****   }
 190:src/console.c ****   else {
 191:src/console.c ****     return -1;
 192:src/console.c ****   }
 193:src/console.c ****   #else
 194:src/console.c ****   return k;
 195:src/console.c ****   #endif
 196:src/console.c **** }
 2585              		.loc 2 196 1 view .LVU726
 2586 002a 0DB0     		add	sp, sp, #52
 2587              		.cfi_remember_state
 2588              		.cfi_def_cfa_offset 12
 2589              		@ sp needed
 2590 002c 70BC     		pop	{r4, r5, r6}
 2591              		.cfi_restore 6
 2592              		.cfi_restore 5
 2593              		.cfi_restore 4
 2594              		.cfi_def_cfa_offset 0
 2595              	.LVL208:
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2596              		.loc 2 188 12 view .LVU727
 2597 002e 1847     		bx	r3
 2598              	.LVL209:
 2599              	.L252:
 2600              		.cfi_restore_state
 2601              		.loc 2 196 1 view .LVU728
 2602 0030 4FF0FF30 		mov	r0, #-1
 2603 0034 0DB0     		add	sp, sp, #52
 2604              		.cfi_def_cfa_offset 12
 2605              		@ sp needed
 2606 0036 70BC     		pop	{r4, r5, r6}
 2607              		.cfi_restore 6
 2608              		.cfi_restore 5
 2609              		.cfi_restore 4
 2610              		.cfi_def_cfa_offset 0
 2611              	.LVL210:
 2612              		.loc 2 196 1 view .LVU729
 2613 0038 7047     		bx	lr
 2614              	.L255:
 2615 003a 00BF     		.align	2
 2616              	.L254:
 2617 003c 10000000 		.word	.LANCHOR5+16
 2618 0040 81030008 		.word	134218625
 2619              		.cfi_endproc
 2620              	.LFE25:
 2622              		.section	.text.shift_down,"ax",%progbits
 2623              		.align	1
 2624              		.p2align 2,,3
 2625              		.global	shift_down
 2626              		.syntax unified
 2627              		.thumb
ARM GAS  /tmp/ccYL8bSL.s 			page 74


 2628              		.thumb_func
 2629              		.fpu fpv4-sp-d16
 2631              	shift_down:
 2632              	.LFB26:
 197:src/console.c **** 
 198:src/console.c **** enum shifts shift_down(void)
 199:src/console.c **** {
 2633              		.loc 2 199 1 is_stmt 1 view -0
 2634              		.cfi_startproc
 2635              		@ args = 0, pretend = 0, frame = 0
 2636              		@ frame_needed = 0, uses_anonymous_args = 0
 2637              		@ link register save eliminated.
 200:src/console.c **** 	return SHIFT_N;
 2638              		.loc 2 200 2 view .LVU731
 201:src/console.c **** }
 2639              		.loc 2 201 1 is_stmt 0 view .LVU732
 2640 0000 0020     		movs	r0, #0
 2641 0002 7047     		bx	lr
 2642              		.cfi_endproc
 2643              	.LFE26:
 2645              		.section	.text.start_key_timer,"ax",%progbits
 2646              		.align	1
 2647              		.p2align 2,,3
 2648              		.global	start_key_timer
 2649              		.syntax unified
 2650              		.thumb
 2651              		.thumb_func
 2652              		.fpu fpv4-sp-d16
 2654              	start_key_timer:
 2655              	.LFB27:
 202:src/console.c **** 
 203:src/console.c **** #ifndef DM42   // No serial operations for DM42
 204:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 205:src/console.c **** /*
 206:src/console.c ****  *  Open a COM port for transmission
 207:src/console.c ****  */
 208:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 209:src/console.c **** {
 210:src/console.c **** 	return 0;
 211:src/console.c **** }
 212:src/console.c **** 
 213:src/console.c **** 
 214:src/console.c **** /*
 215:src/console.c ****  *  Close the COM port after transmission is complete
 216:src/console.c ****  */
 217:src/console.c **** extern void close_port( void )
 218:src/console.c **** {
 219:src/console.c **** }
 220:src/console.c **** 
 221:src/console.c **** 
 222:src/console.c **** /*
 223:src/console.c ****  *  Output a single byte to the serial
 224:src/console.c ****  */
 225:src/console.c **** void put_byte( unsigned char byte )
 226:src/console.c **** {
 227:src/console.c **** 	report_err(ERR_PROG_BAD);
 228:src/console.c **** }
ARM GAS  /tmp/ccYL8bSL.s 			page 75


 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Force buffer flush
 233:src/console.c ****  */
 234:src/console.c **** void flush_comm( void )
 235:src/console.c **** {
 236:src/console.c **** }
 237:src/console.c **** 
 238:src/console.c **** #endif
 239:src/console.c **** #endif
 240:src/console.c **** 
 241:src/console.c **** 
 242:src/console.c **** /*
 243:src/console.c ****  *  Main loop
 244:src/console.c ****  */
 245:src/console.c **** #ifdef DM42
 246:src/console.c **** void start_key_timer (void);
 247:src/console.c **** long int keyticks (void);
 248:src/console.c **** void moveto (int line, int x);
 249:src/console.c **** 
 250:src/console.c **** static long int start_ticks;
 251:src/console.c **** 
 252:src/console.c **** void start_key_timer() {
 2656              		.loc 2 252 24 is_stmt 1 view -0
 2657              		.cfi_startproc
 2658              		@ args = 0, pretend = 0, frame = 0
 2659              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/console.c ****     start_ticks = get_rtc_ticks();
 2660              		.loc 2 253 5 view .LVU734
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 2661              		.loc 2 252 24 is_stmt 0 view .LVU735
 2662 0000 08B5     		push	{r3, lr}
 2663              		.cfi_def_cfa_offset 8
 2664              		.cfi_offset 3, -8
 2665              		.cfi_offset 14, -4
 2666              		.loc 2 253 19 view .LVU736
 2667 0002 024B     		ldr	r3, .L259
 2668 0004 9847     		blx	r3
 2669              	.LVL211:
 2670              		.loc 2 253 17 view .LVU737
 2671 0006 024B     		ldr	r3, .L259+4
 2672 0008 1860     		str	r0, [r3]
 254:src/console.c **** }
 2673              		.loc 2 254 1 view .LVU738
 2674 000a 08BD     		pop	{r3, pc}
 2675              	.L260:
 2676              		.align	2
 2677              	.L259:
 2678 000c B9040008 		.word	134218937
 2679 0010 00000000 		.word	.LANCHOR8
 2680              		.cfi_endproc
 2681              	.LFE27:
 2683              		.section	.text.keyticks,"ax",%progbits
 2684              		.align	1
 2685              		.p2align 2,,3
 2686              		.global	keyticks
ARM GAS  /tmp/ccYL8bSL.s 			page 76


 2687              		.syntax unified
 2688              		.thumb
 2689              		.thumb_func
 2690              		.fpu fpv4-sp-d16
 2692              	keyticks:
 2693              	.LFB28:
 255:src/console.c **** 
 256:src/console.c **** long int keyticks () {
 2694              		.loc 2 256 22 is_stmt 1 view -0
 2695              		.cfi_startproc
 2696              		@ args = 0, pretend = 0, frame = 0
 2697              		@ frame_needed = 0, uses_anonymous_args = 0
 257:src/console.c ****   long int i;
 2698              		.loc 2 257 3 view .LVU740
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2699              		.loc 2 258 3 view .LVU741
 256:src/console.c ****   long int i;
 2700              		.loc 2 256 22 is_stmt 0 view .LVU742
 2701 0000 08B5     		push	{r3, lr}
 2702              		.cfi_def_cfa_offset 8
 2703              		.cfi_offset 3, -8
 2704              		.cfi_offset 14, -4
 2705              		.loc 2 258 8 view .LVU743
 2706 0002 054B     		ldr	r3, .L263
 2707 0004 9847     		blx	r3
 2708              	.LVL212:
 259:src/console.c ****   return i >> 8;
 2709              		.loc 2 259 3 is_stmt 1 view .LVU744
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2710              		.loc 2 258 24 is_stmt 0 view .LVU745
 2711 0006 054B     		ldr	r3, .L263+4
 2712 0008 1B68     		ldr	r3, [r3]
 2713 000a C01A     		subs	r0, r0, r3
 2714              	.LVL213:
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2715              		.loc 2 258 38 view .LVU746
 2716 000c 00EB8000 		add	r0, r0, r0, lsl #2
 260:src/console.c **** }
 2717              		.loc 2 260 1 view .LVU747
 2718 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2719 0014 08BD     		pop	{r3, pc}
 2720              	.L264:
 2721 0016 00BF     		.align	2
 2722              	.L263:
 2723 0018 B9040008 		.word	134218937
 2724 001c 00000000 		.word	.LANCHOR8
 2725              		.cfi_endproc
 2726              	.LFE28:
 2728              		.section	.text.moveto,"ax",%progbits
 2729              		.align	1
 2730              		.p2align 2,,3
 2731              		.global	moveto
 2732              		.syntax unified
 2733              		.thumb
 2734              		.thumb_func
 2735              		.fpu fpv4-sp-d16
 2737              	moveto:
ARM GAS  /tmp/ccYL8bSL.s 			page 77


 2738              	.LVL214:
 2739              	.LFB29:
 261:src/console.c **** 
 262:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 263:src/console.c **** char print_string[22];
 264:src/console.c **** int n_p = 0;
 265:src/console.c **** 
 266:src/console.c **** 
 267:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2740              		.loc 2 267 30 is_stmt 1 view -0
 2741              		.cfi_startproc
 2742              		@ args = 0, pretend = 0, frame = 0
 2743              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2744              		.loc 2 268 3 view .LVU749
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2745              		.loc 2 267 30 is_stmt 0 view .LVU750
 2746 0000 70B5     		push	{r4, r5, r6, lr}
 2747              		.cfi_def_cfa_offset 16
 2748              		.cfi_offset 4, -16
 2749              		.cfi_offset 5, -12
 2750              		.cfi_offset 6, -8
 2751              		.cfi_offset 14, -4
 2752              		.loc 2 268 3 view .LVU751
 2753 0002 0A4D     		ldr	r5, .L267
 2754 0004 0A4B     		ldr	r3, .L267+4
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2755              		.loc 2 267 30 view .LVU752
 2756 0006 0246     		mov	r2, r0
 2757 0008 0C46     		mov	r4, r1
 2758              		.loc 2 268 3 view .LVU753
 2759 000a A86B     		ldr	r0, [r5, #56]
 2760              	.LVL215:
 2761              		.loc 2 268 3 view .LVU754
 2762 000c 511E     		subs	r1, r2, #1
 2763              	.LVL216:
 2764              		.loc 2 268 3 view .LVU755
 2765 000e 9847     		blx	r3
 2766              	.LVL217:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2767              		.loc 2 269 3 is_stmt 1 view .LVU756
 2768 0010 A86B     		ldr	r0, [r5, #56]
 2769 0012 084B     		ldr	r3, .L267+8
 2770              		.loc 2 269 33 is_stmt 0 view .LVU757
 2771 0014 0168     		ldr	r1, [r0]
 2772              		.loc 2 269 3 view .LVU758
 2773 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2774              		.loc 2 269 33 view .LVU759
 2775 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2776              		.loc 2 269 43 view .LVU760
 2777 001c 013C     		subs	r4, r4, #1
 2778              	.LVL218:
 2779              		.loc 2 269 40 view .LVU761
 2780 001e 04FB01F1 		mul	r1, r4, r1
 2781              		.loc 2 269 3 view .LVU762
 2782 0022 1431     		adds	r1, r1, #20
 270:src/console.c **** }
ARM GAS  /tmp/ccYL8bSL.s 			page 78


 2783              		.loc 2 270 1 view .LVU763
 2784 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2785              		.cfi_restore 14
 2786              		.cfi_restore 6
 2787              		.cfi_restore 5
 2788              		.cfi_restore 4
 2789              		.cfi_def_cfa_offset 0
 2790              	.LVL219:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2791              		.loc 2 269 3 view .LVU764
 2792 0028 1847     		bx	r3	@ indirect register sibling call
 2793              	.LVL220:
 2794              	.L268:
 2795 002a 00BF     		.align	2
 2796              	.L267:
 2797 002c 00200010 		.word	268443648
 2798 0030 69020008 		.word	134218345
 2799 0034 6D020008 		.word	134218349
 2800              		.cfi_endproc
 2801              	.LFE29:
 2803              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2804              		.align	2
 2805              	.LC15:
 2806 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2806      673A2025 
 2806      34692C25 
 2806      346900
 2807              		.section	.text.print_debug,"ax",%progbits
 2808              		.align	1
 2809              		.p2align 2,,3
 2810              		.global	print_debug
 2811              		.syntax unified
 2812              		.thumb
 2813              		.thumb_func
 2814              		.fpu fpv4-sp-d16
 2816              	print_debug:
 2817              	.LVL221:
 2818              	.LFB30:
 271:src/console.c **** 
 272:src/console.c **** void print_debug (int i, int j) {
 2819              		.loc 2 272 33 is_stmt 1 view -0
 2820              		.cfi_startproc
 2821              		@ args = 0, pretend = 0, frame = 8
 2822              		@ frame_needed = 0, uses_anonymous_args = 0
 273:src/console.c ****   strcpy( print_string, spaces );
 2823              		.loc 2 273 3 view .LVU766
 272:src/console.c ****   strcpy( print_string, spaces );
 2824              		.loc 2 272 33 is_stmt 0 view .LVU767
 2825 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2826              		.cfi_def_cfa_offset 24
 2827              		.cfi_offset 4, -24
 2828              		.cfi_offset 5, -20
 2829              		.cfi_offset 6, -16
 2830              		.cfi_offset 7, -12
 2831              		.cfi_offset 8, -8
 2832              		.cfi_offset 14, -4
 2833              		.loc 2 273 3 view .LVU768
ARM GAS  /tmp/ccYL8bSL.s 			page 79


 2834 0004 174C     		ldr	r4, .L271
 2835 0006 184F     		ldr	r7, .L271+4
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 275:src/console.c ****   moveto (3, 1);
 276:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2836              		.loc 2 276 3 view .LVU769
 2837 0008 184E     		ldr	r6, .L271+8
 2838 000a 194D     		ldr	r5, .L271+12
 277:src/console.c ****   lcd_refresh();
 2839              		.loc 2 277 3 view .LVU770
 2840 000c DFF86C80 		ldr	r8, .L271+24
 272:src/console.c ****   strcpy( print_string, spaces );
 2841              		.loc 2 272 33 view .LVU771
 2842 0010 82B0     		sub	sp, sp, #8
 2843              		.cfi_def_cfa_offset 32
 272:src/console.c ****   strcpy( print_string, spaces );
 2844              		.loc 2 272 33 view .LVU772
 2845 0012 0190     		str	r0, [sp, #4]
 2846 0014 0091     		str	r1, [sp]
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2847              		.loc 2 273 3 view .LVU773
 2848 0016 2046     		mov	r0, r4
 2849              	.LVL222:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2850              		.loc 2 273 3 view .LVU774
 2851 0018 3946     		mov	r1, r7
 2852              	.LVL223:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2853              		.loc 2 273 3 view .LVU775
 2854 001a FFF7FEFF 		bl	strcpy
 2855              	.LVL224:
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2856              		.loc 2 274 3 is_stmt 1 view .LVU776
 2857 001e DDE90032 		ldrd	r3, r2, [sp]
 2858 0022 1449     		ldr	r1, .L271+16
 2859 0024 2046     		mov	r0, r4
 2860 0026 FFF7FEFF 		bl	sprintf
 2861              	.LVL225:
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2862              		.loc 2 275 3 view .LVU777
 2863 002a 0121     		movs	r1, #1
 2864 002c 0320     		movs	r0, #3
 2865 002e FFF7FEFF 		bl	moveto
 2866              	.LVL226:
 276:src/console.c ****   lcd_refresh();
 2867              		.loc 2 276 3 view .LVU778
 2868 0032 2146     		mov	r1, r4
 2869 0034 B06B     		ldr	r0, [r6, #56]
 2870 0036 A847     		blx	r5
 2871              	.LVL227:
 2872              		.loc 2 277 3 view .LVU779
 2873 0038 C047     		blx	r8
 2874              	.LVL228:
 278:src/console.c ****   sys_delay (1000);
 2875              		.loc 2 278 3 view .LVU780
 2876 003a 0F4B     		ldr	r3, .L271+20
 2877 003c 4FF47A70 		mov	r0, #1000
ARM GAS  /tmp/ccYL8bSL.s 			page 80


 2878 0040 9847     		blx	r3
 2879              	.LVL229:
 279:src/console.c ****   /* wait_for_key_press(); */
 280:src/console.c ****   //  key_pop_all();
 281:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 282:src/console.c ****   // key_pop_all();
 283:src/console.c ****   strcpy( print_string, spaces );
 2880              		.loc 2 283 3 view .LVU781
 2881 0042 3946     		mov	r1, r7
 2882 0044 2046     		mov	r0, r4
 2883 0046 FFF7FEFF 		bl	strcpy
 2884              	.LVL230:
 284:src/console.c ****   moveto (3, 1);
 2885              		.loc 2 284 3 view .LVU782
 2886 004a 0121     		movs	r1, #1
 2887 004c 0320     		movs	r0, #3
 2888 004e FFF7FEFF 		bl	moveto
 2889              	.LVL231:
 285:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2890              		.loc 2 285 3 view .LVU783
 2891 0052 B06B     		ldr	r0, [r6, #56]
 2892 0054 2146     		mov	r1, r4
 2893 0056 A847     		blx	r5
 2894              	.LVL232:
 286:src/console.c ****   lcd_refresh();
 2895              		.loc 2 286 3 view .LVU784
 2896 0058 4346     		mov	r3, r8
 287:src/console.c ****   // while (key_empty()<=0);; // wait for release
 288:src/console.c ****   // key_pop_all();
 289:src/console.c **** }
 2897              		.loc 2 289 1 is_stmt 0 view .LVU785
 2898 005a 02B0     		add	sp, sp, #8
 2899              		.cfi_def_cfa_offset 24
 2900              	.LVL233:
 2901              		.loc 2 289 1 view .LVU786
 2902              		@ sp needed
 2903 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2904              		.cfi_restore 14
 2905              		.cfi_restore 8
 2906              		.cfi_restore 7
 2907              		.cfi_restore 6
 2908              		.cfi_restore 5
 2909              		.cfi_restore 4
 2910              		.cfi_def_cfa_offset 0
 2911              	.LVL234:
 286:src/console.c ****   lcd_refresh();
 2912              		.loc 2 286 3 view .LVU787
 2913 0060 1847     		bx	r3	@ indirect register sibling call
 2914              	.LVL235:
 2915              	.L272:
 2916 0062 00BF     		.align	2
 2917              	.L271:
 2918 0064 00000000 		.word	print_string
 2919 0068 00000000 		.word	.LANCHOR9
 2920 006c 00200010 		.word	268443648
 2921 0070 B1020008 		.word	134218417
 2922 0074 00000000 		.word	.LC15
ARM GAS  /tmp/ccYL8bSL.s 			page 81


 2923 0078 05040008 		.word	134218757
 2924 007c 31020008 		.word	134218289
 2925              		.cfi_endproc
 2926              	.LFE30:
 2928              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2929              		.align	2
 2930              	.LC16:
 2931 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2931      692C2531 
 2931      337300
 2932              		.section	.text.print_debug2,"ax",%progbits
 2933              		.align	1
 2934              		.p2align 2,,3
 2935              		.global	print_debug2
 2936              		.syntax unified
 2937              		.thumb
 2938              		.thumb_func
 2939              		.fpu fpv4-sp-d16
 2941              	print_debug2:
 2942              	.LVL236:
 2943              	.LFB31:
 290:src/console.c **** 
 291:src/console.c **** void print_debug2 (int i, char* j) {
 2944              		.loc 2 291 36 is_stmt 1 view -0
 2945              		.cfi_startproc
 2946              		@ args = 0, pretend = 0, frame = 8
 2947              		@ frame_needed = 0, uses_anonymous_args = 0
 292:src/console.c ****   strcpy( print_string, spaces );
 2948              		.loc 2 292 3 view .LVU789
 291:src/console.c ****   strcpy( print_string, spaces );
 2949              		.loc 2 291 36 is_stmt 0 view .LVU790
 2950 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2951              		.cfi_def_cfa_offset 24
 2952              		.cfi_offset 4, -24
 2953              		.cfi_offset 5, -20
 2954              		.cfi_offset 6, -16
 2955              		.cfi_offset 7, -12
 2956              		.cfi_offset 8, -8
 2957              		.cfi_offset 14, -4
 2958              		.loc 2 292 3 view .LVU791
 2959 0004 174C     		ldr	r4, .L275
 2960 0006 184F     		ldr	r7, .L275+4
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 294:src/console.c ****   moveto (3, 1);
 295:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2961              		.loc 2 295 3 view .LVU792
 2962 0008 184E     		ldr	r6, .L275+8
 2963 000a 194D     		ldr	r5, .L275+12
 296:src/console.c ****   lcd_refresh();
 2964              		.loc 2 296 3 view .LVU793
 2965 000c DFF86C80 		ldr	r8, .L275+24
 291:src/console.c ****   strcpy( print_string, spaces );
 2966              		.loc 2 291 36 view .LVU794
 2967 0010 82B0     		sub	sp, sp, #8
 2968              		.cfi_def_cfa_offset 32
 291:src/console.c ****   strcpy( print_string, spaces );
 2969              		.loc 2 291 36 view .LVU795
ARM GAS  /tmp/ccYL8bSL.s 			page 82


 2970 0012 0190     		str	r0, [sp, #4]
 2971 0014 0091     		str	r1, [sp]
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2972              		.loc 2 292 3 view .LVU796
 2973 0016 2046     		mov	r0, r4
 2974              	.LVL237:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2975              		.loc 2 292 3 view .LVU797
 2976 0018 3946     		mov	r1, r7
 2977              	.LVL238:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2978              		.loc 2 292 3 view .LVU798
 2979 001a FFF7FEFF 		bl	strcpy
 2980              	.LVL239:
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2981              		.loc 2 293 3 is_stmt 1 view .LVU799
 2982 001e DDE90032 		ldrd	r3, r2, [sp]
 2983 0022 1449     		ldr	r1, .L275+16
 2984 0024 2046     		mov	r0, r4
 2985 0026 FFF7FEFF 		bl	sprintf
 2986              	.LVL240:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2987              		.loc 2 294 3 view .LVU800
 2988 002a 0121     		movs	r1, #1
 2989 002c 0320     		movs	r0, #3
 2990 002e FFF7FEFF 		bl	moveto
 2991              	.LVL241:
 295:src/console.c ****   lcd_refresh();
 2992              		.loc 2 295 3 view .LVU801
 2993 0032 2146     		mov	r1, r4
 2994 0034 B06B     		ldr	r0, [r6, #56]
 2995 0036 A847     		blx	r5
 2996              	.LVL242:
 2997              		.loc 2 296 3 view .LVU802
 2998 0038 C047     		blx	r8
 2999              	.LVL243:
 297:src/console.c ****   sys_delay (2500);
 3000              		.loc 2 297 3 view .LVU803
 3001 003a 0F4B     		ldr	r3, .L275+20
 3002 003c 40F6C410 		movw	r0, #2500
 3003 0040 9847     		blx	r3
 3004              	.LVL244:
 298:src/console.c ****   /* wait_for_key_press(); */
 299:src/console.c ****   //  key_pop_all();
 300:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 301:src/console.c ****   // key_pop_all();
 302:src/console.c ****   strcpy( print_string, spaces );
 3005              		.loc 2 302 3 view .LVU804
 3006 0042 3946     		mov	r1, r7
 3007 0044 2046     		mov	r0, r4
 3008 0046 FFF7FEFF 		bl	strcpy
 3009              	.LVL245:
 303:src/console.c ****   moveto (3, 1);
 3010              		.loc 2 303 3 view .LVU805
 3011 004a 0121     		movs	r1, #1
 3012 004c 0320     		movs	r0, #3
 3013 004e FFF7FEFF 		bl	moveto
ARM GAS  /tmp/ccYL8bSL.s 			page 83


 3014              	.LVL246:
 304:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 3015              		.loc 2 304 3 view .LVU806
 3016 0052 B06B     		ldr	r0, [r6, #56]
 3017 0054 2146     		mov	r1, r4
 3018 0056 A847     		blx	r5
 3019              	.LVL247:
 305:src/console.c ****   lcd_refresh();
 3020              		.loc 2 305 3 view .LVU807
 3021 0058 4346     		mov	r3, r8
 306:src/console.c ****   // while (key_empty()<=0);; // wait for release
 307:src/console.c ****   // key_pop_all();
 308:src/console.c **** }
 3022              		.loc 2 308 1 is_stmt 0 view .LVU808
 3023 005a 02B0     		add	sp, sp, #8
 3024              		.cfi_def_cfa_offset 24
 3025              	.LVL248:
 3026              		.loc 2 308 1 view .LVU809
 3027              		@ sp needed
 3028 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3029              		.cfi_restore 14
 3030              		.cfi_restore 8
 3031              		.cfi_restore 7
 3032              		.cfi_restore 6
 3033              		.cfi_restore 5
 3034              		.cfi_restore 4
 3035              		.cfi_def_cfa_offset 0
 3036              	.LVL249:
 305:src/console.c ****   lcd_refresh();
 3037              		.loc 2 305 3 view .LVU810
 3038 0060 1847     		bx	r3	@ indirect register sibling call
 3039              	.LVL250:
 3040              	.L276:
 3041 0062 00BF     		.align	2
 3042              	.L275:
 3043 0064 00000000 		.word	print_string
 3044 0068 00000000 		.word	.LANCHOR9
 3045 006c 00200010 		.word	268443648
 3046 0070 B1020008 		.word	134218417
 3047 0074 00000000 		.word	.LC16
 3048 0078 05040008 		.word	134218757
 3049 007c 31020008 		.word	134218289
 3050              		.cfi_endproc
 3051              	.LFE31:
 3053              		.section	.text.do_now,"ax",%progbits
 3054              		.align	1
 3055              		.p2align 2,,3
 3056              		.global	do_now
 3057              		.syntax unified
 3058              		.thumb
 3059              		.thumb_func
 3060              		.fpu fpv4-sp-d16
 3062              	do_now:
 3063              	.LVL251:
 3064              	.LFB32:
 309:src/console.c **** 
 310:src/console.c **** void do_now (int key, int shift) { // key and shift are like the output of remapped
ARM GAS  /tmp/ccYL8bSL.s 			page 84


 3065              		.loc 2 310 34 is_stmt 1 view -0
 3066              		.cfi_startproc
 3067              		@ args = 0, pretend = 0, frame = 8
 3068              		@ frame_needed = 0, uses_anonymous_args = 0
 3069              		@ link register save eliminated.
 311:src/console.c ****   struct _ndmap temp;
 3070              		.loc 2 311 3 view .LVU812
 312:src/console.c ****   temp.key_34s = key;
 3071              		.loc 2 312 3 view .LVU813
 310:src/console.c ****   struct _ndmap temp;
 3072              		.loc 2 310 34 is_stmt 0 view .LVU814
 3073 0000 82B0     		sub	sp, sp, #8
 3074              		.cfi_def_cfa_offset 8
 313:src/console.c ****   temp.shift = shift;
 314:src/console.c ****   process_keycode_with_shift (temp);
 3075              		.loc 2 314 3 view .LVU815
 3076 0002 02AB     		add	r3, sp, #8
 312:src/console.c ****   temp.shift = shift;
 3077              		.loc 2 312 16 view .LVU816
 3078 0004 8DF80000 		strb	r0, [sp]
 313:src/console.c ****   temp.shift = shift;
 3079              		.loc 2 313 3 is_stmt 1 view .LVU817
 313:src/console.c ****   temp.shift = shift;
 3080              		.loc 2 313 14 is_stmt 0 view .LVU818
 3081 0008 0191     		str	r1, [sp, #4]
 3082              		.loc 2 314 3 is_stmt 1 view .LVU819
 3083 000a 13E90300 		ldmdb	r3, {r0, r1}
 3084              	.LVL252:
 315:src/console.c **** }
 3085              		.loc 2 315 1 is_stmt 0 view .LVU820
 3086 000e 02B0     		add	sp, sp, #8
 3087              		.cfi_def_cfa_offset 0
 3088              		@ sp needed
 314:src/console.c **** }
 3089              		.loc 2 314 3 view .LVU821
 3090 0010 FFF7FEBF 		b	process_keycode_with_shift
 3091              	.LVL253:
 314:src/console.c **** }
 3092              		.loc 2 314 3 view .LVU822
 3093              		.cfi_endproc
 3094              	.LFE32:
 3096              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 3097              		.align	2
 3098              	.LC17:
 3099 0000 2F48454C 		.ascii	"/HELP/wp34c_help.html\000"
 3099      502F7770 
 3099      3334635F 
 3099      68656C70 
 3099      2E68746D 
 3100              		.section	.text.do_multi,"ax",%progbits
 3101              		.align	1
 3102              		.p2align 2,,3
 3103              		.global	do_multi
 3104              		.syntax unified
 3105              		.thumb
 3106              		.thumb_func
 3107              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccYL8bSL.s 			page 85


 3109              	do_multi:
 3110              	.LVL254:
 3111              	.LFB33:
 316:src/console.c **** 
 317:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 3112              		.loc 2 317 42 is_stmt 1 view -0
 3113              		.cfi_startproc
 3114              		@ args = 0, pretend = 0, frame = 16
 3115              		@ frame_needed = 0, uses_anonymous_args = 0
 3116              		.loc 2 317 42 is_stmt 0 view .LVU824
 3117 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3118              		.cfi_def_cfa_offset 20
 3119              		.cfi_offset 4, -20
 3120              		.cfi_offset 5, -16
 3121              		.cfi_offset 6, -12
 3122              		.cfi_offset 7, -8
 3123              		.cfi_offset 14, -4
 3124 0002 85B0     		sub	sp, sp, #20
 3125              		.cfi_def_cfa_offset 40
 3126              	.LVL255:
 318:src/console.c ****   switch(r.shift) {
 3127              		.loc 2 318 3 is_stmt 1 view .LVU825
 317:src/console.c ****   switch(r.shift) {
 3128              		.loc 2 317 42 is_stmt 0 view .LVU826
 3129 0004 6C46     		mov	r4, sp
 3130 0006 931E     		subs	r3, r2, #2
 3131 0008 84E80600 		stm	r4, {r1, r2}
 3132              	.LVL256:
 317:src/console.c ****   switch(r.shift) {
 3133              		.loc 2 317 42 view .LVU827
 3134 000c 0546     		mov	r5, r0
 3135 000e 0D2B     		cmp	r3, #13
 3136 0010 20D8     		bhi	.L280
 3137 0012 DFE803F0 		tbb	[pc, r3]
 3138              	.L282:
 3139 0016 2C       		.byte	(.L295-.L282)/2
 3140 0017 37       		.byte	(.L294-.L282)/2
 3141 0018 42       		.byte	(.L293-.L282)/2
 3142 0019 4D       		.byte	(.L292-.L282)/2
 3143 001a 58       		.byte	(.L291-.L282)/2
 3144 001b 63       		.byte	(.L290-.L282)/2
 3145 001c 6E       		.byte	(.L289-.L282)/2
 3146 001d 78       		.byte	(.L288-.L282)/2
 3147 001e 83       		.byte	(.L287-.L282)/2
 3148 001f 8D       		.byte	(.L286-.L282)/2
 3149 0020 97       		.byte	(.L285-.L282)/2
 3150 0021 AA       		.byte	(.L284-.L282)/2
 3151 0022 B4       		.byte	(.L283-.L282)/2
 3152 0023 07       		.byte	(.L281-.L282)/2
 3153              		.p2align 1
 3154              	.L281:
 319:src/console.c ****   /* case LASTX: // Last x via RCL L */
 320:src/console.c ****   /*   do_now (K11, 0); // RCL */
 321:src/console.c ****   /*   do_now (K_RELEASE,0); // release */
 322:src/console.c ****   /*   do_now (K15,0); // TAN key */
 323:src/console.c ****   /*   r.key_34s = K_RELEASE; */
 324:src/console.c ****   /*   r.shift = 0; // set up for release; */
ARM GAS  /tmp/ccYL8bSL.s 			page 86


 325:src/console.c ****   /*   break; */
 326:src/console.c ****   case ONSTO: // flash_backup()
 327:src/console.c ****     flash_backup(OP_SAVE);
 328:src/console.c ****     reset_shift();
 329:src/console.c ****     r = no_key;
 330:src/console.c ****     break;
 331:src/console.c ****   case ONRCL: // flash_restore()
 332:src/console.c ****     flash_restore(OP_LOAD);
 333:src/console.c ****     reset_shift();
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
 336:src/console.c ****   case WRLIB: // save library file
 337:src/console.c ****     save_lib_file(1);
 338:src/console.c ****     reset_shift();
 339:src/console.c ****     r = no_key;
 340:src/console.c ****     break;
 341:src/console.c ****   case LLIB: // load library file
 342:src/console.c ****     load_lib_file(1);
 343:src/console.c ****     reset_shift();
 344:src/console.c ****     r = no_key;
 345:src/console.c ****     break;
 346:src/console.c ****   case WRTST: // save state file
 347:src/console.c ****     save_ram_file(1);
 348:src/console.c ****     reset_shift();
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case LDST:
 352:src/console.c ****     load_ram_file(1);
 353:src/console.c ****     reset_shift();
 354:src/console.c ****     r = no_key;
 355:src/console.c ****     break;
 356:src/console.c ****   case LDPRG:
 357:src/console.c ****     load_prog_file();
 358:src/console.c ****     reset_shift();
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case SVPRG:
 362:src/console.c ****     save_prog_file();
 363:src/console.c ****     reset_shift();
 364:src/console.c ****     r = no_key;
 365:src/console.c ****     break;
 366:src/console.c ****   case HELP:
 367:src/console.c ****     run_help_file("/HELP/wp34c_help.html");
 368:src/console.c ****     reset_shift();
 369:src/console.c ****     r = no_key;
 370:src/console.c ****     break;
 371:src/console.c ****   case DOTS:
 372:src/console.c ****     do_all_dots();
 373:src/console.c ****     reset_shift();
 374:src/console.c ****     r = no_key;
 375:src/console.c ****     break;
 376:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 377:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 378:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 379:src/console.c ****     r = no_key;
 380:src/console.c ****     break;
 381:src/console.c ****   case DEFMEN:
ARM GAS  /tmp/ccYL8bSL.s 			page 87


 382:src/console.c ****     toggle_default_menu();
 383:src/console.c ****     reset_shift();
 384:src/console.c ****     r = no_key;
 385:src/console.c ****     break;
 386:src/console.c ****   case SETUMEN:
 387:src/console.c ****     build_user_menu();
 388:src/console.c ****     reset_shift();
 389:src/console.c ****     r = no_key;;
 390:src/console.c ****     break;
 391:src/console.c ****   case KCPX:
 392:src/console.c ****     if (C_LOCKED) {
 3155              		.loc 2 392 5 is_stmt 1 view .LVU828
 3156              		.loc 2 392 9 is_stmt 0 view .LVU829
 3157 0024 644B     		ldr	r3, .L310
 3158 0026 1B68     		ldr	r3, [r3]
 3159 0028 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 3160              		.loc 2 392 8 view .LVU830
 3161 002c 03F04103 		and	r3, r3, #65
 3162 0030 412B     		cmp	r3, #65
 3163 0032 40F0AF80 		bne	.L297
 393:src/console.c ****       set_menu(M_C_Lock);
 3164              		.loc 2 393 7 is_stmt 1 view .LVU831
 3165              	.LVL257:
 3166              	.LBB120:
 3167              	.LBI120:
 122:src/menu.c    ****   menu_name m = current_menu;
 3168              		.loc 1 122 6 view .LVU832
 3169              	.LBB121:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3170              		.loc 1 123 3 view .LVU833
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3171              		.loc 1 123 13 is_stmt 0 view .LVU834
 3172 0036 614A     		ldr	r2, .L310+4
 3173 0038 92F90030 		ldrsb	r3, [r2]
 3174              	.LVL258:
 124:src/menu.c    ****     current_menu = default_menu;
 3175              		.loc 1 124 3 is_stmt 1 view .LVU835
 124:src/menu.c    ****     current_menu = default_menu;
 3176              		.loc 1 124 6 is_stmt 0 view .LVU836
 3177 003c 112B     		cmp	r3, #17
 3178 003e 00F0B580 		beq	.L309
 127:src/menu.c    ****     current_menu = last_menu;
 3179              		.loc 1 127 8 is_stmt 1 view .LVU837
 131:src/menu.c    ****   }
 3180              		.loc 1 131 5 view .LVU838
 131:src/menu.c    ****   }
 3181              		.loc 1 131 18 is_stmt 0 view .LVU839
 3182 0042 1121     		movs	r1, #17
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3183              		.loc 1 133 6 view .LVU840
 3184 0044 092B     		cmp	r3, #9
 131:src/menu.c    ****   }
 3185              		.loc 1 131 18 view .LVU841
 3186 0046 1170     		strb	r1, [r2]
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3187              		.loc 1 133 3 is_stmt 1 view .LVU842
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
ARM GAS  /tmp/ccYL8bSL.s 			page 88


 3188              		.loc 1 133 6 is_stmt 0 view .LVU843
 3189 0048 02D0     		beq	.L300
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3190              		.loc 1 133 23 view .LVU844
 3191 004a 102B     		cmp	r3, #16
 3192 004c 40F0B180 		bne	.L299
 3193              	.L300:
 3194              	.LVL259:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3195              		.loc 1 133 23 view .LVU845
 3196              	.LBE121:
 3197              	.LBE120:
 394:src/console.c ****       reset_shift();
 3198              		.loc 2 394 7 is_stmt 1 view .LVU846
 3199 0050 FFF7FEFF 		bl	reset_shift
 3200              	.LVL260:
 3201              	.L280:
 395:src/console.c ****     }
 396:src/console.c ****     else {
 397:src/console.c ****       do_now (K_CMPLX, 0);
 398:src/console.c ****       do_now (K_RELEASE, 0);
 399:src/console.c ****       r = no_key;
 400:src/console.c ****     }
 401:src/console.c ****   default:
 402:src/console.c ****     r = no_key;
 3202              		.loc 2 402 5 view .LVU847
 3203              		.loc 2 402 7 is_stmt 0 view .LVU848
 3204 0054 5A4B     		ldr	r3, .L310+8
 3205 0056 93E80300 		ldm	r3, {r0, r1}
 3206 005a 84E80300 		stm	r4, {r0, r1}
 3207              	.LVL261:
 3208              	.L296:
 403:src/console.c ****   }
 404:src/console.c ****   return r;
 3209              		.loc 2 404 3 is_stmt 1 view .LVU849
 3210              		.loc 2 404 10 is_stmt 0 view .LVU850
 3211 005e 0191     		str	r1, [sp, #4]
 3212 0060 94E80300 		ldm	r4, {r0, r1}
 3213              	.LVL262:
 3214              		.loc 2 404 10 view .LVU851
 3215 0064 85E80300 		stm	r5, {r0, r1}
 405:src/console.c **** }
 3216              		.loc 2 405 1 view .LVU852
 3217 0068 2846     		mov	r0, r5
 3218 006a 05B0     		add	sp, sp, #20
 3219              		.cfi_remember_state
 3220              		.cfi_def_cfa_offset 20
 3221              		@ sp needed
 3222 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 3223              	.LVL263:
 3224              	.L295:
 3225              		.cfi_restore_state
 327:src/console.c ****     reset_shift();
 3226              		.loc 2 327 5 is_stmt 1 view .LVU853
 3227 006e AD20     		movs	r0, #173
 3228              	.LVL264:
 327:src/console.c ****     reset_shift();
ARM GAS  /tmp/ccYL8bSL.s 			page 89


 3229              		.loc 2 327 5 is_stmt 0 view .LVU854
 3230 0070 FFF7FEFF 		bl	flash_backup
 3231              	.LVL265:
 328:src/console.c ****     r = no_key;
 3232              		.loc 2 328 5 is_stmt 1 view .LVU855
 3233 0074 FFF7FEFF 		bl	reset_shift
 3234              	.LVL266:
 329:src/console.c ****     break;
 3235              		.loc 2 329 5 view .LVU856
 329:src/console.c ****     break;
 3236              		.loc 2 329 7 is_stmt 0 view .LVU857
 3237 0078 514B     		ldr	r3, .L310+8
 3238 007a 93E80300 		ldm	r3, {r0, r1}
 3239 007e 84E80300 		stm	r4, {r0, r1}
 3240              	.LVL267:
 330:src/console.c ****   case ONRCL: // flash_restore()
 3241              		.loc 2 330 5 is_stmt 1 view .LVU858
 3242 0082 ECE7     		b	.L296
 3243              	.LVL268:
 3244              	.L294:
 332:src/console.c ****     reset_shift();
 3245              		.loc 2 332 5 view .LVU859
 3246 0084 AE20     		movs	r0, #174
 3247              	.LVL269:
 332:src/console.c ****     reset_shift();
 3248              		.loc 2 332 5 is_stmt 0 view .LVU860
 3249 0086 FFF7FEFF 		bl	flash_restore
 3250              	.LVL270:
 333:src/console.c ****     r = no_key;
 3251              		.loc 2 333 5 is_stmt 1 view .LVU861
 3252 008a FFF7FEFF 		bl	reset_shift
 3253              	.LVL271:
 334:src/console.c ****     break;
 3254              		.loc 2 334 5 view .LVU862
 334:src/console.c ****     break;
 3255              		.loc 2 334 7 is_stmt 0 view .LVU863
 3256 008e 4C4B     		ldr	r3, .L310+8
 3257 0090 93E80300 		ldm	r3, {r0, r1}
 3258 0094 84E80300 		stm	r4, {r0, r1}
 3259              	.LVL272:
 335:src/console.c ****   case WRLIB: // save library file
 3260              		.loc 2 335 5 is_stmt 1 view .LVU864
 3261 0098 E1E7     		b	.L296
 3262              	.LVL273:
 3263              	.L293:
 337:src/console.c ****     reset_shift();
 3264              		.loc 2 337 5 view .LVU865
 3265 009a 0120     		movs	r0, #1
 3266              	.LVL274:
 337:src/console.c ****     reset_shift();
 3267              		.loc 2 337 5 is_stmt 0 view .LVU866
 3268 009c FFF7FEFF 		bl	save_lib_file
 3269              	.LVL275:
 338:src/console.c ****     r = no_key;
 3270              		.loc 2 338 5 is_stmt 1 view .LVU867
 3271 00a0 FFF7FEFF 		bl	reset_shift
 3272              	.LVL276:
ARM GAS  /tmp/ccYL8bSL.s 			page 90


 339:src/console.c ****     break;
 3273              		.loc 2 339 5 view .LVU868
 339:src/console.c ****     break;
 3274              		.loc 2 339 7 is_stmt 0 view .LVU869
 3275 00a4 464B     		ldr	r3, .L310+8
 3276 00a6 93E80300 		ldm	r3, {r0, r1}
 3277 00aa 84E80300 		stm	r4, {r0, r1}
 3278              	.LVL277:
 340:src/console.c ****   case LLIB: // load library file
 3279              		.loc 2 340 5 is_stmt 1 view .LVU870
 3280 00ae D6E7     		b	.L296
 3281              	.LVL278:
 3282              	.L292:
 342:src/console.c ****     reset_shift();
 3283              		.loc 2 342 5 view .LVU871
 3284 00b0 0120     		movs	r0, #1
 3285              	.LVL279:
 342:src/console.c ****     reset_shift();
 3286              		.loc 2 342 5 is_stmt 0 view .LVU872
 3287 00b2 FFF7FEFF 		bl	load_lib_file
 3288              	.LVL280:
 343:src/console.c ****     r = no_key;
 3289              		.loc 2 343 5 is_stmt 1 view .LVU873
 3290 00b6 FFF7FEFF 		bl	reset_shift
 3291              	.LVL281:
 344:src/console.c ****     break;
 3292              		.loc 2 344 5 view .LVU874
 344:src/console.c ****     break;
 3293              		.loc 2 344 7 is_stmt 0 view .LVU875
 3294 00ba 414B     		ldr	r3, .L310+8
 3295 00bc 93E80300 		ldm	r3, {r0, r1}
 3296 00c0 84E80300 		stm	r4, {r0, r1}
 3297              	.LVL282:
 345:src/console.c ****   case WRTST: // save state file
 3298              		.loc 2 345 5 is_stmt 1 view .LVU876
 3299 00c4 CBE7     		b	.L296
 3300              	.LVL283:
 3301              	.L291:
 347:src/console.c ****     reset_shift();
 3302              		.loc 2 347 5 view .LVU877
 3303 00c6 0120     		movs	r0, #1
 3304              	.LVL284:
 347:src/console.c ****     reset_shift();
 3305              		.loc 2 347 5 is_stmt 0 view .LVU878
 3306 00c8 FFF7FEFF 		bl	save_ram_file
 3307              	.LVL285:
 348:src/console.c ****     r = no_key;
 3308              		.loc 2 348 5 is_stmt 1 view .LVU879
 3309 00cc FFF7FEFF 		bl	reset_shift
 3310              	.LVL286:
 349:src/console.c ****     break;
 3311              		.loc 2 349 5 view .LVU880
 349:src/console.c ****     break;
 3312              		.loc 2 349 7 is_stmt 0 view .LVU881
 3313 00d0 3B4B     		ldr	r3, .L310+8
 3314 00d2 93E80300 		ldm	r3, {r0, r1}
 3315 00d6 84E80300 		stm	r4, {r0, r1}
ARM GAS  /tmp/ccYL8bSL.s 			page 91


 3316              	.LVL287:
 350:src/console.c ****   case LDST:
 3317              		.loc 2 350 5 is_stmt 1 view .LVU882
 3318 00da C0E7     		b	.L296
 3319              	.LVL288:
 3320              	.L290:
 352:src/console.c ****     reset_shift();
 3321              		.loc 2 352 5 view .LVU883
 3322 00dc 0120     		movs	r0, #1
 3323              	.LVL289:
 352:src/console.c ****     reset_shift();
 3324              		.loc 2 352 5 is_stmt 0 view .LVU884
 3325 00de FFF7FEFF 		bl	load_ram_file
 3326              	.LVL290:
 353:src/console.c ****     r = no_key;
 3327              		.loc 2 353 5 is_stmt 1 view .LVU885
 3328 00e2 FFF7FEFF 		bl	reset_shift
 3329              	.LVL291:
 354:src/console.c ****     break;
 3330              		.loc 2 354 5 view .LVU886
 354:src/console.c ****     break;
 3331              		.loc 2 354 7 is_stmt 0 view .LVU887
 3332 00e6 364B     		ldr	r3, .L310+8
 3333 00e8 93E80300 		ldm	r3, {r0, r1}
 3334 00ec 84E80300 		stm	r4, {r0, r1}
 3335              	.LVL292:
 355:src/console.c ****   case LDPRG:
 3336              		.loc 2 355 5 is_stmt 1 view .LVU888
 3337 00f0 B5E7     		b	.L296
 3338              	.LVL293:
 3339              	.L289:
 357:src/console.c ****     reset_shift();
 3340              		.loc 2 357 5 view .LVU889
 3341 00f2 FFF7FEFF 		bl	load_prog_file
 3342              	.LVL294:
 358:src/console.c ****     r = no_key;
 3343              		.loc 2 358 5 view .LVU890
 3344 00f6 FFF7FEFF 		bl	reset_shift
 3345              	.LVL295:
 359:src/console.c ****     break;
 3346              		.loc 2 359 5 view .LVU891
 359:src/console.c ****     break;
 3347              		.loc 2 359 7 is_stmt 0 view .LVU892
 3348 00fa 314B     		ldr	r3, .L310+8
 3349 00fc 93E80300 		ldm	r3, {r0, r1}
 3350 0100 84E80300 		stm	r4, {r0, r1}
 3351              	.LVL296:
 360:src/console.c ****   case SVPRG:
 3352              		.loc 2 360 5 is_stmt 1 view .LVU893
 3353 0104 ABE7     		b	.L296
 3354              	.LVL297:
 3355              	.L288:
 367:src/console.c ****     reset_shift();
 3356              		.loc 2 367 5 view .LVU894
 3357 0106 2F4B     		ldr	r3, .L310+12
 3358 0108 2F48     		ldr	r0, .L310+16
 3359              	.LVL298:
ARM GAS  /tmp/ccYL8bSL.s 			page 92


 367:src/console.c ****     reset_shift();
 3360              		.loc 2 367 5 is_stmt 0 view .LVU895
 3361 010a 9847     		blx	r3
 3362              	.LVL299:
 368:src/console.c ****     r = no_key;
 3363              		.loc 2 368 5 is_stmt 1 view .LVU896
 3364 010c FFF7FEFF 		bl	reset_shift
 3365              	.LVL300:
 369:src/console.c ****     break;
 3366              		.loc 2 369 5 view .LVU897
 369:src/console.c ****     break;
 3367              		.loc 2 369 7 is_stmt 0 view .LVU898
 3368 0110 2B4B     		ldr	r3, .L310+8
 3369 0112 93E80300 		ldm	r3, {r0, r1}
 3370 0116 84E80300 		stm	r4, {r0, r1}
 3371              	.LVL301:
 370:src/console.c ****   case DOTS:
 3372              		.loc 2 370 5 is_stmt 1 view .LVU899
 3373 011a A0E7     		b	.L296
 3374              	.LVL302:
 3375              	.L287:
 362:src/console.c ****     reset_shift();
 3376              		.loc 2 362 5 view .LVU900
 3377 011c FFF7FEFF 		bl	save_prog_file
 3378              	.LVL303:
 363:src/console.c ****     r = no_key;
 3379              		.loc 2 363 5 view .LVU901
 3380 0120 FFF7FEFF 		bl	reset_shift
 3381              	.LVL304:
 364:src/console.c ****     break;
 3382              		.loc 2 364 5 view .LVU902
 364:src/console.c ****     break;
 3383              		.loc 2 364 7 is_stmt 0 view .LVU903
 3384 0124 264B     		ldr	r3, .L310+8
 3385 0126 93E80300 		ldm	r3, {r0, r1}
 3386 012a 84E80300 		stm	r4, {r0, r1}
 3387              	.LVL305:
 365:src/console.c ****   case HELP:
 3388              		.loc 2 365 5 is_stmt 1 view .LVU904
 3389 012e 96E7     		b	.L296
 3390              	.LVL306:
 3391              	.L286:
 372:src/console.c ****     reset_shift();
 3392              		.loc 2 372 5 view .LVU905
 3393 0130 FFF7FEFF 		bl	do_all_dots
 3394              	.LVL307:
 373:src/console.c ****     r = no_key;
 3395              		.loc 2 373 5 view .LVU906
 3396 0134 FFF7FEFF 		bl	reset_shift
 3397              	.LVL308:
 374:src/console.c ****     break;
 3398              		.loc 2 374 5 view .LVU907
 374:src/console.c ****     break;
 3399              		.loc 2 374 7 is_stmt 0 view .LVU908
 3400 0138 214B     		ldr	r3, .L310+8
 3401 013a 93E80300 		ldm	r3, {r0, r1}
 3402 013e 84E80300 		stm	r4, {r0, r1}
ARM GAS  /tmp/ccYL8bSL.s 			page 93


 3403              	.LVL309:
 375:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 3404              		.loc 2 375 5 is_stmt 1 view .LVU909
 3405 0142 8CE7     		b	.L296
 3406              	.LVL310:
 3407              	.L285:
 377:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 3408              		.loc 2 377 5 view .LVU910
 3409              	.LBB123:
 3410              	.LBI123:
 310:src/console.c ****   struct _ndmap temp;
 3411              		.loc 2 310 6 view .LVU911
 3412              	.LBB124:
 311:src/console.c ****   temp.key_34s = key;
 3413              		.loc 2 311 3 view .LVU912
 312:src/console.c ****   temp.shift = shift;
 3414              		.loc 2 312 3 view .LVU913
 312:src/console.c ****   temp.shift = shift;
 3415              		.loc 2 312 16 is_stmt 0 view .LVU914
 3416 0144 6323     		movs	r3, #99
 313:src/console.c ****   process_keycode_with_shift (temp);
 3417              		.loc 2 313 14 view .LVU915
 3418 0146 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3419              		.loc 2 312 16 view .LVU916
 3420 0148 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3421              		.loc 2 313 3 is_stmt 1 view .LVU917
 313:src/console.c ****   process_keycode_with_shift (temp);
 3422              		.loc 2 313 14 is_stmt 0 view .LVU918
 3423 014c 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3424              		.loc 2 314 3 is_stmt 1 view .LVU919
 3425 014e 02AE     		add	r6, sp, #8
 3426 0150 96E80300 		ldm	r6, {r0, r1}
 3427              	.LVL311:
 314:src/console.c **** }
 3428              		.loc 2 314 3 is_stmt 0 view .LVU920
 3429 0154 FFF7FEFF 		bl	process_keycode_with_shift
 3430              	.LVL312:
 314:src/console.c **** }
 3431              		.loc 2 314 3 view .LVU921
 3432              	.LBE124:
 3433              	.LBE123:
 378:src/console.c ****     r = no_key;
 3434              		.loc 2 378 5 is_stmt 1 view .LVU922
 3435              	.LBB125:
 3436              	.LBI125:
 310:src/console.c ****   struct _ndmap temp;
 3437              		.loc 2 310 6 view .LVU923
 3438              	.LBB126:
 311:src/console.c ****   temp.key_34s = key;
 3439              		.loc 2 311 3 view .LVU924
 312:src/console.c ****   temp.shift = shift;
 3440              		.loc 2 312 3 view .LVU925
 312:src/console.c ****   temp.shift = shift;
 3441              		.loc 2 312 16 is_stmt 0 view .LVU926
ARM GAS  /tmp/ccYL8bSL.s 			page 94


 3442 0158 3323     		movs	r3, #51
 3443              	.LVL313:
 3444              	.L308:
 312:src/console.c ****   temp.shift = shift;
 3445              		.loc 2 312 16 view .LVU927
 3446              	.LBE126:
 3447              	.LBE125:
 3448              	.LBB127:
 3449              	.LBB128:
 313:src/console.c ****   process_keycode_with_shift (temp);
 3450              		.loc 2 313 14 view .LVU928
 3451 015a 0397     		str	r7, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 3452              		.loc 2 312 16 view .LVU929
 3453 015c 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3454              		.loc 2 313 3 is_stmt 1 view .LVU930
 314:src/console.c **** }
 3455              		.loc 2 314 3 view .LVU931
 3456 0160 96E80300 		ldm	r6, {r0, r1}
 3457 0164 FFF7FEFF 		bl	process_keycode_with_shift
 3458              	.LVL314:
 3459              	.LBE128:
 3460              	.LBE127:
 399:src/console.c ****     }
 3461              		.loc 2 399 7 view .LVU932
 399:src/console.c ****     }
 3462              		.loc 2 399 7 is_stmt 0 view .LVU933
 3463 0168 74E7     		b	.L280
 3464              	.LVL315:
 3465              	.L284:
 382:src/console.c ****     reset_shift();
 3466              		.loc 2 382 5 is_stmt 1 view .LVU934
 3467 016a FFF7FEFF 		bl	toggle_default_menu
 3468              	.LVL316:
 383:src/console.c ****     r = no_key;
 3469              		.loc 2 383 5 view .LVU935
 3470 016e FFF7FEFF 		bl	reset_shift
 3471              	.LVL317:
 384:src/console.c ****     break;
 3472              		.loc 2 384 5 view .LVU936
 384:src/console.c ****     break;
 3473              		.loc 2 384 7 is_stmt 0 view .LVU937
 3474 0172 134B     		ldr	r3, .L310+8
 3475 0174 93E80300 		ldm	r3, {r0, r1}
 3476 0178 84E80300 		stm	r4, {r0, r1}
 3477              	.LVL318:
 385:src/console.c ****   case SETUMEN:
 3478              		.loc 2 385 5 is_stmt 1 view .LVU938
 3479 017c 6FE7     		b	.L296
 3480              	.LVL319:
 3481              	.L283:
 387:src/console.c ****     reset_shift();
 3482              		.loc 2 387 5 view .LVU939
 3483              	.LBB130:
 3484              	.LBI130:
 669:src/menu.c    ****   // find the label 'MNU'
ARM GAS  /tmp/ccYL8bSL.s 			page 95


 3485              		.loc 1 669 6 view .LVU940
 3486              	.LBB131:
 671:src/menu.c    ****    build_user_menu_from_program (lbl);
 3487              		.loc 1 671 4 view .LVU941
 672:src/menu.c    **** }
 3488              		.loc 1 672 4 view .LVU942
 3489 017e 1348     		ldr	r0, .L310+20
 3490              	.LVL320:
 672:src/menu.c    **** }
 3491              		.loc 1 672 4 is_stmt 0 view .LVU943
 3492 0180 FFF7FEFF 		bl	build_user_menu_from_program
 3493              	.LVL321:
 3494              	.LBE131:
 3495              	.LBE130:
 388:src/console.c ****     r = no_key;;
 3496              		.loc 2 388 5 is_stmt 1 view .LVU944
 3497 0184 FFF7FEFF 		bl	reset_shift
 3498              	.LVL322:
 389:src/console.c ****     break;
 3499              		.loc 2 389 5 view .LVU945
 389:src/console.c ****     break;
 3500              		.loc 2 389 7 is_stmt 0 view .LVU946
 3501 0188 0D4B     		ldr	r3, .L310+8
 3502 018a 93E80300 		ldm	r3, {r0, r1}
 3503 018e 84E80300 		stm	r4, {r0, r1}
 3504              	.LVL323:
 389:src/console.c ****     break;
 3505              		.loc 2 389 16 is_stmt 1 view .LVU947
 390:src/console.c ****   case KCPX:
 3506              		.loc 2 390 5 view .LVU948
 3507 0192 64E7     		b	.L296
 3508              	.LVL324:
 3509              	.L297:
 397:src/console.c ****       do_now (K_RELEASE, 0);
 3510              		.loc 2 397 7 view .LVU949
 3511              	.LBB132:
 3512              	.LBI132:
 310:src/console.c ****   struct _ndmap temp;
 3513              		.loc 2 310 6 view .LVU950
 3514              	.LBB133:
 311:src/console.c ****   temp.key_34s = key;
 3515              		.loc 2 311 3 view .LVU951
 312:src/console.c ****   temp.shift = shift;
 3516              		.loc 2 312 3 view .LVU952
 312:src/console.c ****   temp.shift = shift;
 3517              		.loc 2 312 16 is_stmt 0 view .LVU953
 3518 0194 2D23     		movs	r3, #45
 313:src/console.c ****   process_keycode_with_shift (temp);
 3519              		.loc 2 313 14 view .LVU954
 3520 0196 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3521              		.loc 2 312 16 view .LVU955
 3522 0198 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3523              		.loc 2 313 3 is_stmt 1 view .LVU956
 313:src/console.c ****   process_keycode_with_shift (temp);
 3524              		.loc 2 313 14 is_stmt 0 view .LVU957
ARM GAS  /tmp/ccYL8bSL.s 			page 96


 3525 019c 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3526              		.loc 2 314 3 is_stmt 1 view .LVU958
 3527 019e 02AE     		add	r6, sp, #8
 3528 01a0 96E80300 		ldm	r6, {r0, r1}
 3529              	.LVL325:
 314:src/console.c **** }
 3530              		.loc 2 314 3 is_stmt 0 view .LVU959
 3531 01a4 FFF7FEFF 		bl	process_keycode_with_shift
 3532              	.LVL326:
 314:src/console.c **** }
 3533              		.loc 2 314 3 view .LVU960
 3534              	.LBE133:
 3535              	.LBE132:
 398:src/console.c ****       r = no_key;
 3536              		.loc 2 398 7 is_stmt 1 view .LVU961
 3537              	.LBB134:
 3538              	.LBI127:
 310:src/console.c ****   struct _ndmap temp;
 3539              		.loc 2 310 6 view .LVU962
 3540              	.LBB129:
 311:src/console.c ****   temp.key_34s = key;
 3541              		.loc 2 311 3 view .LVU963
 312:src/console.c ****   temp.shift = shift;
 3542              		.loc 2 312 3 view .LVU964
 312:src/console.c ****   temp.shift = shift;
 3543              		.loc 2 312 16 is_stmt 0 view .LVU965
 3544 01a8 6323     		movs	r3, #99
 3545 01aa D6E7     		b	.L308
 3546              	.LVL327:
 3547              	.L309:
 312:src/console.c ****   temp.shift = shift;
 3548              		.loc 2 312 16 view .LVU966
 3549              	.LBE129:
 3550              	.LBE134:
 3551              	.LBB135:
 3552              	.LBB122:
 125:src/menu.c    ****   }
 3553              		.loc 1 125 5 is_stmt 1 view .LVU967
 125:src/menu.c    ****   }
 3554              		.loc 1 125 18 is_stmt 0 view .LVU968
 3555 01ac 0849     		ldr	r1, .L310+24
 3556 01ae 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3557 01b0 1170     		strb	r1, [r2]
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3558              		.loc 1 133 3 is_stmt 1 view .LVU969
 3559              	.L299:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3560              		.loc 1 133 43 view .LVU970
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3561              		.loc 1 133 53 is_stmt 0 view .LVU971
 3562 01b2 084A     		ldr	r2, .L310+28
 3563 01b4 1370     		strb	r3, [r2]
 3564 01b6 4BE7     		b	.L300
 3565              	.L311:
 3566              		.align	2
 3567              	.L310:
ARM GAS  /tmp/ccYL8bSL.s 			page 97


 3568 01b8 00000000 		.word	main_ram
 3569 01bc 00000000 		.word	.LANCHOR1
 3570 01c0 00000000 		.word	.LANCHOR10
 3571 01c4 49040008 		.word	134218825
 3572 01c8 00000000 		.word	.LC17
 3573 01cc 4DF04E55 		.word	1431236685
 3574 01d0 00000000 		.word	.LANCHOR2
 3575 01d4 00000000 		.word	.LANCHOR3
 3576              	.LBE122:
 3577              	.LBE135:
 3578              		.cfi_endproc
 3579              	.LFE33:
 3581              		.section	.text.program_main,"ax",%progbits
 3582              		.align	1
 3583              		.p2align 2,,3
 3584              		.global	program_main
 3585              		.syntax unified
 3586              		.thumb
 3587              		.thumb_func
 3588              		.fpu fpv4-sp-d16
 3590              	program_main:
 3591              	.LFB34:
 406:src/console.c **** 
 407:src/console.c **** void program_main(){
 3592              		.loc 2 407 20 is_stmt 1 view -0
 3593              		.cfi_startproc
 3594              		@ args = 0, pretend = 0, frame = 224
 3595              		@ frame_needed = 0, uses_anonymous_args = 0
 408:src/console.c ****   int c;
 3596              		.loc 2 408 3 view .LVU973
 409:src/console.c ****   struct _ndmap remapped;
 3597              		.loc 2 409 3 view .LVU974
 410:src/console.c **** 
 411:src/console.c ****   init_mem();
 3598              		.loc 2 411 3 view .LVU975
 407:src/console.c ****   int c;
 3599              		.loc 2 407 20 is_stmt 0 view .LVU976
 3600 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3601              		.cfi_def_cfa_offset 32
 3602              		.cfi_offset 4, -32
 3603              		.cfi_offset 5, -28
 3604              		.cfi_offset 6, -24
 3605              		.cfi_offset 7, -20
 3606              		.cfi_offset 8, -16
 3607              		.cfi_offset 9, -12
 3608              		.cfi_offset 10, -8
 3609              		.cfi_offset 14, -4
 3610 0004 B8B0     		sub	sp, sp, #224
 3611              		.cfi_def_cfa_offset 256
 3612              		.loc 2 411 3 view .LVU977
 3613 0006 FFF7FEFF 		bl	init_mem
 3614              	.LVL328:
 412:src/console.c ****   init_RegionTab();
 3615              		.loc 2 412 3 is_stmt 1 view .LVU978
 3616 000a FFF7FEFF 		bl	init_RegionTab
 3617              	.LVL329:
 413:src/console.c ****   init_34s();
ARM GAS  /tmp/ccYL8bSL.s 			page 98


 3618              		.loc 2 413 3 view .LVU979
 3619 000e FFF7FEFF 		bl	init_34s
 3620              	.LVL330:
 414:src/console.c ****   State2.flags = 1;  
 3621              		.loc 2 414 3 view .LVU980
 3622              		.loc 2 414 16 is_stmt 0 view .LVU981
 3623 0012 B24A     		ldr	r2, .L415
 3624 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3625 0016 43F00103 		orr	r3, r3, #1
 3626 001a 1376     		strb	r3, [r2, #24]
 415:src/console.c ****   check_create_wp34sdir();
 3627              		.loc 2 415 3 is_stmt 1 view .LVU982
 3628 001c FFF7FEFF 		bl	check_create_wp34sdir
 3629              	.LVL331:
 416:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3630              		.loc 2 416 3 view .LVU983
 3631              		.loc 2 416 8 is_stmt 0 view .LVU984
 3632 0020 0020     		movs	r0, #0
 3633 0022 FFF7FEFF 		bl	load_ram_file
 3634              	.LVL332:
 3635              		.loc 2 416 6 view .LVU985
 3636 0026 08B9     		cbnz	r0, .L313
 3637              		.loc 2 416 26 is_stmt 1 discriminator 1 view .LVU986
 3638              		.loc 2 416 34 is_stmt 0 discriminator 1 view .LVU987
 3639 0028 AD4B     		ldr	r3, .L415+4
 3640 002a 1860     		str	r0, [r3]
 3641              	.L313:
 417:src/console.c ****   load_backup_file(0);
 3642              		.loc 2 417 3 is_stmt 1 view .LVU988
 418:src/console.c ****   load_lib_file(0);
 419:src/console.c ****   t20->newln = 0;
 3643              		.loc 2 419 3 is_stmt 0 view .LVU989
 3644 002c AD4C     		ldr	r4, .L415+8
 3645 002e AE4E     		ldr	r6, .L415+12
 420:src/console.c ****   t20->lnfill = 0;
 421:src/console.c ****   t20->fixed = 1;
 422:src/console.c ****   t20->xspc = -2;
 423:src/console.c ****   t20->bgfill = 0;
 424:src/console.c ****   run_menu_item_app = run_menu_item;
 425:src/console.c ****   menu_line_str_app = menu_line_str;
 426:src/console.c **** 
 427:src/console.c ****   display();
 428:src/console.c ****   display_current_menu();
 429:src/console.c ****   lcd_refresh();
 430:src/console.c ****   JustDisplayed = 0;
 431:src/console.c ****   /*
 432:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 433:src/console.c ****     Sleeps peacefully while waiting for a key.
 434:src/console.c ****     Handles (in principle!) turning off and on.
 435:src/console.c ****     =================
 436:src/console.c ****     Main event loop
 437:src/console.c ****     =================
 438:src/console.c **** 
 439:src/console.c ****     Status flags:
 440:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 441:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 442:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
ARM GAS  /tmp/ccYL8bSL.s 			page 99


 443:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 444:src/console.c ****   */
 445:src/console.c ****   for(;;) {
 446:src/console.c **** 
 447:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 448:src/console.c ****       {
 449:src/console.c **** 	CLR_ST(STAT_RUNNING);
 450:src/console.c **** 	sys_sleep();
 451:src/console.c ****       }
 452:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 3646              		.loc 2 452 35 view .LVU990
 3647 0030 AE4F     		ldr	r7, .L415+16
 453:src/console.c ****     {
 454:src/console.c ****       CLR_ST(STAT_RUNNING);
 455:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3648              		.loc 2 455 7 view .LVU991
 3649 0032 DFF82C83 		ldr	r8, .L415+132
 417:src/console.c ****   load_lib_file(0);
 3650              		.loc 2 417 3 view .LVU992
 3651 0036 0020     		movs	r0, #0
 3652 0038 FFF7FEFF 		bl	load_backup_file
 3653              	.LVL333:
 418:src/console.c ****   t20->newln = 0;
 3654              		.loc 2 418 3 is_stmt 1 view .LVU993
 3655 003c 0020     		movs	r0, #0
 3656 003e FFF7FEFF 		bl	load_lib_file
 3657              	.LVL334:
 419:src/console.c ****   t20->lnfill = 0;
 3658              		.loc 2 419 3 view .LVU994
 3659 0042 236B     		ldr	r3, [r4, #48]
 420:src/console.c ****   t20->fixed = 1;
 3660              		.loc 2 420 3 view .LVU995
 421:src/console.c ****   t20->xspc = -2;
 3661              		.loc 2 421 3 view .LVU996
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3662              		.loc 2 424 21 is_stmt 0 view .LVU997
 3663 0044 AA4A     		ldr	r2, .L415+20
 421:src/console.c ****   t20->xspc = -2;
 3664              		.loc 2 421 14 view .LVU998
 3665 0046 0121     		movs	r1, #1
 3666 0048 1974     		strb	r1, [r3, #16]
 422:src/console.c ****   t20->bgfill = 0;
 3667              		.loc 2 422 3 is_stmt 1 view .LVU999
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3668              		.loc 2 423 15 is_stmt 0 view .LVU1000
 3669 004a 0025     		movs	r5, #0
 422:src/console.c ****   t20->bgfill = 0;
 3670              		.loc 2 422 13 view .LVU1001
 3671 004c FE21     		movs	r1, #254
 3672 004e 9973     		strb	r1, [r3, #14]
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3673              		.loc 2 423 3 is_stmt 1 view .LVU1002
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3674              		.loc 2 423 15 is_stmt 0 view .LVU1003
 3675 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 419:src/console.c ****   t20->lnfill = 0;
 3676              		.loc 2 419 14 view .LVU1004
ARM GAS  /tmp/ccYL8bSL.s 			page 100


 3677 0052 1D75     		strb	r5, [r3, #20]
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3678              		.loc 2 424 3 is_stmt 1 view .LVU1005
 425:src/console.c **** 
 3679              		.loc 2 425 21 is_stmt 0 view .LVU1006
 3680 0054 A74B     		ldr	r3, .L415+24
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3681              		.loc 2 424 21 view .LVU1007
 3682 0056 E260     		str	r2, [r4, #12]
 425:src/console.c **** 
 3683              		.loc 2 425 3 is_stmt 1 view .LVU1008
 425:src/console.c **** 
 3684              		.loc 2 425 21 is_stmt 0 view .LVU1009
 3685 0058 2361     		str	r3, [r4, #16]
 427:src/console.c ****   display_current_menu();
 3686              		.loc 2 427 3 is_stmt 1 view .LVU1010
 3687 005a FFF7FEFF 		bl	display
 3688              	.LVL335:
 428:src/console.c ****   lcd_refresh();
 3689              		.loc 2 428 3 view .LVU1011
 3690 005e FFF7FEFF 		bl	display_current_menu
 3691              	.LVL336:
 429:src/console.c ****   JustDisplayed = 0;
 3692              		.loc 2 429 3 view .LVU1012
 3693 0062 A54B     		ldr	r3, .L415+28
 3694 0064 9847     		blx	r3
 3695              	.LVL337:
 430:src/console.c ****   /*
 3696              		.loc 2 430 3 view .LVU1013
 430:src/console.c ****   /*
 3697              		.loc 2 430 17 is_stmt 0 view .LVU1014
 3698 0066 A54B     		ldr	r3, .L415+32
 3699 0068 1D60     		str	r5, [r3]
 3700              	.L314:
 445:src/console.c **** 
 3701              		.loc 2 445 3 is_stmt 1 view .LVU1015
 447:src/console.c ****       {
 3702              		.loc 2 447 5 view .LVU1016
 447:src/console.c ****       {
 3703              		.loc 2 447 10 is_stmt 0 view .LVU1017
 3704 006a 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3705              		.loc 2 447 8 view .LVU1018
 3706 006c 9B05     		lsls	r3, r3, #22
 3707 006e 40F1B980 		bpl	.L315
 447:src/console.c ****       {
 3708              		.loc 2 447 30 discriminator 1 view .LVU1019
 3709 0072 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3710              		.loc 2 447 27 discriminator 1 view .LVU1020
 3711 0074 5D07     		lsls	r5, r3, #29
 3712 0076 40F1B580 		bpl	.L315
 449:src/console.c **** 	sys_sleep();
 3713              		.loc 2 449 2 is_stmt 1 view .LVU1021
 3714 007a 2368     		ldr	r3, [r4]
 450:src/console.c ****       }
 3715              		.loc 2 450 2 is_stmt 0 view .LVU1022
ARM GAS  /tmp/ccYL8bSL.s 			page 101


 3716 007c A04A     		ldr	r2, .L415+36
 449:src/console.c **** 	sys_sleep();
 3717              		.loc 2 449 2 view .LVU1023
 3718 007e 23F00203 		bic	r3, r3, #2
 3719 0082 2360     		str	r3, [r4]
 450:src/console.c ****       }
 3720              		.loc 2 450 2 is_stmt 1 view .LVU1024
 3721 0084 9047     		blx	r2
 3722              	.LVL338:
 3723              	.L316:
 456:src/console.c ****       sys_sleep();
 457:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 458:src/console.c **** 	key_push (K_HEARTBEAT);
 459:src/console.c **** 	if (Pause > 0) Pause--;
 460:src/console.c ****       }
 461:src/console.c ****       sys_timer_disable(0); // stop timer
 462:src/console.c ****     }
 463:src/console.c ****     
 464:src/console.c ****     // Wakeup in off state or going to sleep
 465:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3724              		.loc 2 465 5 view .LVU1025
 3725              		.loc 2 465 9 is_stmt 0 view .LVU1026
 3726 0086 2368     		ldr	r3, [r4]
 3727              		.loc 2 465 8 view .LVU1027
 3728 0088 9805     		lsls	r0, r3, #22
 3729 008a 00F1D280 		bmi	.L322
 3730              	.L408:
 3731              		.loc 2 465 29 discriminator 1 view .LVU1028
 3732 008e 2368     		ldr	r3, [r4]
 3733              		.loc 2 465 26 discriminator 1 view .LVU1029
 3734 0090 5907     		lsls	r1, r3, #29
 3735 0092 00F1CE80 		bmi	.L322
 466:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 467:src/console.c ****         // Going to off mode
 468:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 469:src/console.c ****         draw_power_off_image(1);
 470:src/console.c **** 
 471:src/console.c ****         LCD_power_off(0);
 472:src/console.c ****         SET_ST(STAT_SUSPENDED);
 473:src/console.c ****         SET_ST(STAT_OFF);
 474:src/console.c ****       }
 475:src/console.c ****       // Already in OFF -> just continue to sleep above
 476:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 477:src/console.c ****       // thus reaching the sleep()
 478:src/console.c ****     }
 479:src/console.c **** 
 480:src/console.c ****     // Well, we are woken-up
 481:src/console.c ****     SET_ST(STAT_RUNNING);
 3736              		.loc 2 481 5 is_stmt 1 view .LVU1030
 3737 0096 2368     		ldr	r3, [r4]
 3738 0098 43F00203 		orr	r3, r3, #2
 3739 009c 2360     		str	r3, [r4]
 482:src/console.c **** 
 483:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 484:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3740              		.loc 2 484 5 view .LVU1031
 3741 009e 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccYL8bSL.s 			page 102


 3742 00a0 23F00403 		bic	r3, r3, #4
 3743 00a4 2360     		str	r3, [r4]
 485:src/console.c **** 
 486:src/console.c ****     // Get up from OFF state
 487:src/console.c ****     if ( ST(STAT_OFF) ) {
 3744              		.loc 2 487 5 view .LVU1032
 3745              		.loc 2 487 10 is_stmt 0 view .LVU1033
 3746 00a6 2368     		ldr	r3, [r4]
 3747              		.loc 2 487 8 view .LVU1034
 3748 00a8 DA06     		lsls	r2, r3, #27
 3749 00aa 0ED5     		bpl	.L327
 488:src/console.c ****       LCD_power_on();
 3750              		.loc 2 488 7 is_stmt 1 view .LVU1035
 3751 00ac 954B     		ldr	r3, .L415+40
 3752 00ae 9847     		blx	r3
 3753              	.LVL339:
 489:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3754              		.loc 2 489 7 view .LVU1036
 3755 00b0 954B     		ldr	r3, .L415+44
 3756 00b2 9847     		blx	r3
 3757              	.LVL340:
 490:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3758              		.loc 2 490 7 view .LVU1037
 3759 00b4 954B     		ldr	r3, .L415+48
 3760 00b6 9847     		blx	r3
 3761              	.LVL341:
 491:src/console.c **** 
 492:src/console.c ****       CLR_ST(STAT_OFF);
 3762              		.loc 2 492 7 view .LVU1038
 3763 00b8 2368     		ldr	r3, [r4]
 493:src/console.c **** 
 494:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3764              		.loc 2 494 13 is_stmt 0 view .LVU1039
 3765 00ba 954A     		ldr	r2, .L415+52
 492:src/console.c **** 
 3766              		.loc 2 492 7 view .LVU1040
 3767 00bc 23F01003 		bic	r3, r3, #16
 3768 00c0 2360     		str	r3, [r4]
 3769              		.loc 2 494 7 is_stmt 1 view .LVU1041
 3770              		.loc 2 494 13 is_stmt 0 view .LVU1042
 3771 00c2 9047     		blx	r2
 3772              	.LVL342:
 3773              		.loc 2 494 10 view .LVU1043
 3774 00c4 08B9     		cbnz	r0, .L327
 495:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3775              		.loc 2 495 9 is_stmt 1 view .LVU1044
 3776 00c6 934B     		ldr	r3, .L415+56
 3777 00c8 9847     		blx	r3
 3778              	.LVL343:
 3779              	.L327:
 496:src/console.c ****     }
 497:src/console.c **** 
 498:src/console.c ****     // Key is ready -> clear auto off timer
 499:src/console.c ****     //    if ( !key_empty() )
 500:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 501:src/console.c ****     // Fetch the key
 502:src/console.c ****     //  < 0 -> No key event
ARM GAS  /tmp/ccYL8bSL.s 			page 103


 503:src/console.c ****     //  > 0 -> Key pressed
 504:src/console.c ****     // == 0 -> Key released
 505:src/console.c ****     c = key_pop();
 3780              		.loc 2 505 5 view .LVU1045
 3781              		.loc 2 505 9 is_stmt 0 view .LVU1046
 3782 00ca 934B     		ldr	r3, .L415+60
 3783 00cc 9847     		blx	r3
 3784              	.LVL344:
 506:src/console.c **** #ifdef INCLUDE_STOPWATCH
 507:src/console.c ****     if ( KeyCallback != NULL ) {
 3785              		.loc 2 507 22 view .LVU1047
 3786 00ce 3368     		ldr	r3, [r6]
 505:src/console.c **** #ifdef INCLUDE_STOPWATCH
 3787              		.loc 2 505 9 view .LVU1048
 3788 00d0 0546     		mov	r5, r0
 3789              	.LVL345:
 3790              		.loc 2 507 5 is_stmt 1 view .LVU1049
 3791              		.loc 2 507 8 is_stmt 0 view .LVU1050
 3792 00d2 002B     		cmp	r3, #0
 3793 00d4 00F04681 		beq	.L329
 508:src/console.c ****       c = (*KeyCallback)( c );
 3794              		.loc 2 508 7 is_stmt 1 view .LVU1051
 3795              		.loc 2 508 12 is_stmt 0 view .LVU1052
 3796 00d8 9847     		blx	r3
 3797              	.LVL346:
 3798              		.loc 2 508 12 view .LVU1053
 3799 00da 0546     		mov	r5, r0
 3800              	.LVL347:
 3801              	.L330:
 509:src/console.c ****     }
 510:src/console.c ****     else if ( StopWatchRunning && ( Ticker % STOPWATCH_BLINK ) == 0 ) {
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 512:src/console.c ****       finish_LEQ();
 513:src/console.c ****     }
 514:src/console.c **** #endif
 515:src/console.c ****     if ( (c != K_HEARTBEAT) && (c >= 0) ) {
 3802              		.loc 2 515 5 is_stmt 1 view .LVU1054
 3803              		.loc 2 515 8 is_stmt 0 view .LVU1055
 3804 00dc 622D     		cmp	r5, #98
 3805 00de 00F0BF80 		beq	.L331
 3806              		.loc 2 515 29 discriminator 1 view .LVU1056
 3807 00e2 002D     		cmp	r5, #0
 3808 00e4 C1DB     		blt	.L314
 516:src/console.c ****       reset_auto_off();
 3809              		.loc 2 516 7 is_stmt 1 view .LVU1057
 3810 00e6 8D4B     		ldr	r3, .L415+64
 3811 00e8 9847     		blx	r3
 3812              	.LVL348:
 517:src/console.c ****       //      start_key_timer();
 518:src/console.c ****     }
 519:src/console.c ****     if (c >= 0) {
 3813              		.loc 2 519 5 view .LVU1058
 520:src/console.c ****       remapped = remap(c);
 3814              		.loc 2 520 7 view .LVU1059
 3815              	.LBB143:
 3816              	.LBI143:
  56:src/console.c **** 
ARM GAS  /tmp/ccYL8bSL.s 			page 104


 3817              		.loc 2 56 22 view .LVU1060
 3818              	.LBB144:
  58:src/console.c **** 
 3819              		.loc 2 58 3 view .LVU1061
 3820              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3821              		.loc 3 1 1 view .LVU1062
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
ARM GAS  /tmp/ccYL8bSL.s 			page 105


  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3822              		.loc 3 59 3 view .LVU1063
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX}, // Complex
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     //    {K_MULTI, 1}, // lastX 
  78:src/keytran.c ****     {K_OP, RARG( RARG_RCL, regL_idx )}, // lastX 
  79:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
  80:src/keytran.c ****     {K_SETMENU,  M_Disp}, // DISP menu
  81:src/keytran.c ****     {K_SETMENU,  M_Clear}, // CLR menu
  82:src/keytran.c ****     // Fourth row of DM42 18--22
  83:src/keytran.c ****     {K40, 0}, // up-arrow
  84:src/keytran.c ****     {K52, 1}, // SLV
  85:src/keytran.c ****     {K_SETMENU,  M_Solve}, // Integral/sum/product menu
  86:src/keytran.c ****     {K44, 3}, // MATRIX cat
  87:src/keytran.c ****     {K_SETMENU,  M_Stats}, // STATS menu
  88:src/keytran.c ****     // Fifth row of DM42 23--27
  89:src/keytran.c ****     {K50, 0}, // down-arrow
  90:src/keytran.c ****     {K_SETMENU,  M_Base}, // BASE menu 
  91:src/keytran.c ****     {K04, 3}, // CONV cat
  92:src/keytran.c ****     {K_SETMENU,  M_Flags}, // FLAGS menu
  93:src/keytran.c ****     {K_SETMENU,  M_Prob}, // PROBS menu
  94:src/keytran.c ****     // Sixth row of DM42 28--32
  95:src/keytran.c ****     {K_G, 0}, // gshift
  96:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  97:src/keytran.c ****     {K_SETMENU,  M_User}, // select user menu
  98:src/keytran.c ****     {K52, 3}, // P.FCN cat
  99:src/keytran.c ****     {K_SETMENU, M_Print}, // Print menu
 100:src/keytran.c ****     // Last row of DM42 33--37
 101:src/keytran.c ****     {K60, 3}, // off
 102:src/keytran.c ****     {K_SETMENU,  M_Setup1}, // SETUP menu
 103:src/keytran.c ****     {K21, 1}, // <(
 104:src/keytran.c ****     {K63, 3}, // P/R
 105:src/keytran.c ****     {K10, 3}, // CAT cat
 106:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 107:src/keytran.c ****     {K_NOP, 0},
ARM GAS  /tmp/ccYL8bSL.s 			page 106


 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_NOP, 0},
 114:src/keytran.c ****     {K_SETMENU,  M_Last}, // last menu
 115:src/keytran.c ****     {K_SETMENU,  M_Misc}, // MISC menu!
 116:src/keytran.c ****   };
 117:src/keytran.c **** 
 118:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3823              		.loc 3 118 3 view .LVU1064
 119:src/keytran.c ****     {K_RELEASE, -1},
 120:src/keytran.c ****     // Top row of DM42 1--6
 121:src/keytran.c ****     {K64, 3}, // sig+
 122:src/keytran.c ****     {K34, 1}, // 1/x
 123:src/keytran.c ****     {K44, 1}, // sqrt x
 124:src/keytran.c ****     {K31, 2}, // 10^x
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     {K_NOP, 0}, // no function
 127:src/keytran.c ****     // Next row of DM42 7--12
 128:src/keytran.c ****     {K_NOP, 0}, // no function
 129:src/keytran.c ****     {K11, 3}, // View
 130:src/keytran.c ****     {K12, 3}, // Rup
 131:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 133:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 134:src/keytran.c ****     // Third row of DM42 13--17
 135:src/keytran.c ****     {K20, 2}, // fill
 136:src/keytran.c ****     {K_SETMENU,  M_Swap}, // X<>Y menu
 137:src/keytran.c ****     {K05, 3}, // MODE cat
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     {K_NOP, 0}, // no function
 140:src/keytran.c ****     // Fourth row of DM42 18--22
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K_NOP, 0}, // no function
 144:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 145:src/keytran.c ****     {K42, 3}, // STAT catalogue
 146:src/keytran.c ****     // Fifth row of DM42 23--27
 147:src/keytran.c ****     {K_NOP, 0}, // no function 
 148:src/keytran.c ****     {K_NOP, 0}, // no function
 149:src/keytran.c ****     {K20, 3}, // CONST catalogue
 150:src/keytran.c ****     {K51, 3}, // TEST catalogue
 151:src/keytran.c ****     {K41, 3}, // PROB catalogue
 152:src/keytran.c ****     // Sixth row of DM42 28--32
 153:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     //    {K_MULTI, SETUMEN}, // Set up user menu
 156:src/keytran.c ****     {K_SETMENU, M_Usermenu}, //User menu create
 157:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 158:src/keytran.c ****     {K_NOP, 0}, // no function
 159:src/keytran.c ****     // Last row of DM42 33--37
 160:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 161:src/keytran.c ****     {K_SETMENU,  M_Setup2}, // SETUP2 menu
 162:src/keytran.c ****     {K_NOP, 0}, // no function
 163:src/keytran.c ****     {K_SETMENU,  M_Program}, // P.FCN menu
ARM GAS  /tmp/ccYL8bSL.s 			page 107


 164:src/keytran.c ****     {K50, 3}, // Status
 165:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****     {K_NOP, 0},
 174:src/keytran.c ****     {K_NOP, 0},
 175:src/keytran.c ****   };
 176:src/keytran.c **** 
 177:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3824              		.loc 3 177 1 view .LVU1065
 178:src/keytran.c ****     {K_RELEASE, -1},
 179:src/keytran.c ****     // Top row of DM42 1--6
 180:src/keytran.c ****     {K00, -1},
 181:src/keytran.c ****     {K01, -1},
 182:src/keytran.c ****     {K02, -1},
 183:src/keytran.c ****     {K03, -1},
 184:src/keytran.c ****     {K04, -1},
 185:src/keytran.c ****     {K05, -1},
 186:src/keytran.c ****     // Next row of DM42 7--12
 187:src/keytran.c ****     {K10, -1},
 188:src/keytran.c ****     {K11, -1},
 189:src/keytran.c ****     {K12, -1},
 190:src/keytran.c ****     {K13, -1},
 191:src/keytran.c ****     {K14, -1},
 192:src/keytran.c ****     {K15, -1},
 193:src/keytran.c ****     // Third row of DM42 13--17
 194:src/keytran.c ****     {K20, -1},
 195:src/keytran.c ****     {K21, -1},
 196:src/keytran.c ****     {K22, -1},
 197:src/keytran.c ****     {K23, -1},
 198:src/keytran.c ****     {K24, -1},
 199:src/keytran.c ****     // Fourth row of DM42 18--22
 200:src/keytran.c ****     {K30, -1},
 201:src/keytran.c ****     {K31, -1},
 202:src/keytran.c ****     {K32, -1},
 203:src/keytran.c ****     {K33, -1},
 204:src/keytran.c ****     {K34, -1},
 205:src/keytran.c ****     // Fifth row of DM42 23--27
 206:src/keytran.c ****     {K40, -1},
 207:src/keytran.c ****     {K41, -1},
 208:src/keytran.c ****     {K42, -1},
 209:src/keytran.c ****     {K43, -1},
 210:src/keytran.c ****     {K44, -1},
 211:src/keytran.c ****     // Sixth row of DM42 28--32
 212:src/keytran.c ****     {K50, -1},
 213:src/keytran.c ****     {K51, -1},
 214:src/keytran.c ****     {K52, -1},
 215:src/keytran.c ****     {K53, -1},
 216:src/keytran.c ****     {K54, -1},
 217:src/keytran.c ****     // Last row of DM42 33--37
 218:src/keytran.c ****     {K60, -1},
 219:src/keytran.c ****     {K61, -1},
ARM GAS  /tmp/ccYL8bSL.s 			page 108


 220:src/keytran.c ****     {K62, -1},
 221:src/keytran.c ****     {K63, -1},
 222:src/keytran.c ****     {K64, -1},
 223:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_NOP, -1},
 227:src/keytran.c ****     {K_NOP, -1},
 228:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 229:src/keytran.c ****     {K_CMPLX, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c ****     {K_NOP, -1},
 232:src/keytran.c ****     {K_NOP, -1},
 233:src/keytran.c **** };
 234:src/keytran.c **** 
 235:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3825              		.loc 3 235 1 view .LVU1066
  62:src/console.c **** 
 3826              		.loc 2 62 3 view .LVU1067
  64:src/console.c **** 
 3827              		.loc 2 64 3 view .LVU1068
  64:src/console.c **** 
 3828              		.loc 2 64 6 is_stmt 0 view .LVU1069
 3829 00ea 632D     		cmp	r5, #99
 3830 00ec 00F08A81 		beq	.L396
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3831              		.loc 2 66 3 is_stmt 1 view .LVU1070
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3832              		.loc 2 66 6 is_stmt 0 view .LVU1071
 3833 00f0 2C2D     		cmp	r5, #44
 3834 00f2 00F05881 		beq	.L334
  71:src/console.c ****     return mapping_running[c];
 3835              		.loc 2 71 3 is_stmt 1 view .LVU1072
  71:src/console.c ****     return mapping_running[c];
 3836              		.loc 2 71 15 is_stmt 0 view .LVU1073
 3837 00f6 8A4A     		ldr	r2, .L415+68
 3838 00f8 8A4B     		ldr	r3, .L415+72
 3839 00fa 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3840 00fe 1968     		ldr	r1, [r3]
  71:src/console.c ****     return mapping_running[c];
 3841              		.loc 2 71 6 view .LVU1074
 3842 0100 59EA0109 		orrs	r9, r9, r1
 3843 0104 40F07181 		bne	.L397
  75:src/console.c ****   
 3844              		.loc 2 75 3 is_stmt 1 view .LVU1075
  75:src/console.c ****   
 3845              		.loc 2 75 22 is_stmt 0 view .LVU1076
 3846 0108 04A8     		add	r0, sp, #16
 3847 010a FFF7FEFF 		bl	get_current_menu_ref
 3848              	.LVL349:
  77:src/console.c ****   case KEY_F1:
 3849              		.loc 2 77 3 is_stmt 1 view .LVU1077
 3850 010e A5F12603 		sub	r3, r5, #38
 3851 0112 052B     		cmp	r3, #5
 3852 0114 00F28081 		bhi	.L336
 3853 0118 DFE813F0 		tbh	[pc, r3, lsl #1]
 3854              	.L338:
ARM GAS  /tmp/ccYL8bSL.s 			page 109


 3855 011c 8601     		.2byte	(.L343-.L338)/2
 3856 011e 0B00     		.2byte	(.L342-.L338)/2
 3857 0120 1500     		.2byte	(.L341-.L338)/2
 3858 0122 1F00     		.2byte	(.L340-.L338)/2
 3859 0124 2900     		.2byte	(.L339-.L338)/2
 3860 0126 3300     		.2byte	(.L337-.L338)/2
 3861              		.p2align 1
 3862              	.L344:
  80:src/console.c ****   case KEY_F2:
 3863              		.loc 2 80 5 view .LVU1078
  80:src/console.c ****   case KEY_F2:
 3864              		.loc 2 80 9 is_stmt 0 view .LVU1079
 3865 0128 FFF7FEFF 		bl	cur_shift
 3866              	.LVL350:
  80:src/console.c ****   case KEY_F2:
 3867              		.loc 2 80 8 view .LVU1080
 3868 012c 0128     		cmp	r0, #1
 3869 012e 00F01882 		beq	.L398
 3870              	.L342:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3871              		.loc 2 82 5 is_stmt 1 view .LVU1081
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3872              		.loc 2 82 9 is_stmt 0 view .LVU1082
 3873 0132 FFF7FEFF 		bl	cur_shift
 3874              	.LVL351:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3875              		.loc 2 82 8 view .LVU1083
 3876 0136 0028     		cmp	r0, #0
 3877 0138 00F0A381 		beq	.L399
  83:src/console.c ****   case KEY_F3:
 3878              		.loc 2 83 5 is_stmt 1 view .LVU1084
  83:src/console.c ****   case KEY_F3:
 3879              		.loc 2 83 9 is_stmt 0 view .LVU1085
 3880 013c FFF7FEFF 		bl	cur_shift
 3881              	.LVL352:
  83:src/console.c ****   case KEY_F3:
 3882              		.loc 2 83 8 view .LVU1086
 3883 0140 0128     		cmp	r0, #1
 3884 0142 00F0E881 		beq	.L400
 3885              	.L341:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3886              		.loc 2 85 5 is_stmt 1 view .LVU1087
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3887              		.loc 2 85 9 is_stmt 0 view .LVU1088
 3888 0146 FFF7FEFF 		bl	cur_shift
 3889              	.LVL353:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3890              		.loc 2 85 8 view .LVU1089
 3891 014a 0028     		cmp	r0, #0
 3892 014c 00F08F81 		beq	.L401
  86:src/console.c ****   case KEY_F4:
 3893              		.loc 2 86 5 is_stmt 1 view .LVU1090
  86:src/console.c ****   case KEY_F4:
 3894              		.loc 2 86 9 is_stmt 0 view .LVU1091
 3895 0150 FFF7FEFF 		bl	cur_shift
 3896              	.LVL354:
  86:src/console.c ****   case KEY_F4:
ARM GAS  /tmp/ccYL8bSL.s 			page 110


 3897              		.loc 2 86 8 view .LVU1092
 3898 0154 0128     		cmp	r0, #1
 3899 0156 00F0D481 		beq	.L402
 3900              	.L340:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3901              		.loc 2 88 5 is_stmt 1 view .LVU1093
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3902              		.loc 2 88 9 is_stmt 0 view .LVU1094
 3903 015a FFF7FEFF 		bl	cur_shift
 3904              	.LVL355:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3905              		.loc 2 88 8 view .LVU1095
 3906 015e 0028     		cmp	r0, #0
 3907 0160 00F07B81 		beq	.L403
  89:src/console.c ****   case KEY_F5:
 3908              		.loc 2 89 5 is_stmt 1 view .LVU1096
  89:src/console.c ****   case KEY_F5:
 3909              		.loc 2 89 9 is_stmt 0 view .LVU1097
 3910 0164 FFF7FEFF 		bl	cur_shift
 3911              	.LVL356:
  89:src/console.c ****   case KEY_F5:
 3912              		.loc 2 89 8 view .LVU1098
 3913 0168 0128     		cmp	r0, #1
 3914 016a 00F0B681 		beq	.L404
 3915              	.L339:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3916              		.loc 2 91 5 is_stmt 1 view .LVU1099
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3917              		.loc 2 91 9 is_stmt 0 view .LVU1100
 3918 016e FFF7FEFF 		bl	cur_shift
 3919              	.LVL357:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3920              		.loc 2 91 8 view .LVU1101
 3921 0172 0028     		cmp	r0, #0
 3922 0174 00F06781 		beq	.L405
  92:src/console.c ****   case KEY_F6:
 3923              		.loc 2 92 5 is_stmt 1 view .LVU1102
  92:src/console.c ****   case KEY_F6:
 3924              		.loc 2 92 9 is_stmt 0 view .LVU1103
 3925 0178 FFF7FEFF 		bl	cur_shift
 3926              	.LVL358:
  92:src/console.c ****   case KEY_F6:
 3927              		.loc 2 92 8 view .LVU1104
 3928 017c 0128     		cmp	r0, #1
 3929 017e 00F0B681 		beq	.L406
 3930              	.L337:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3931              		.loc 2 94 5 is_stmt 1 view .LVU1105
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3932              		.loc 2 94 9 is_stmt 0 view .LVU1106
 3933 0182 FFF7FEFF 		bl	cur_shift
 3934              	.LVL359:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3935              		.loc 2 94 8 view .LVU1107
 3936 0186 0028     		cmp	r0, #0
 3937 0188 40F04281 		bne	.L349
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
ARM GAS  /tmp/ccYL8bSL.s 			page 111


 3938              		.loc 2 94 33 is_stmt 1 view .LVU1108
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3939              		.loc 2 94 51 is_stmt 0 view .LVU1109
 3940 018c DDE93001 		ldrd	r0, r1, [sp, #192]
 3941 0190 9DF8C050 		ldrb	r5, [sp, #192]	@ zero_extendqisi2
 3942              	.LVL360:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3943              		.loc 2 94 51 view .LVU1110
 3944 0194 0DF1080A 		add	r10, sp, #8
 3945              	.LBE144:
 3946              	.LBE143:
 521:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3947              		.loc 2 521 10 view .LVU1111
 3948 0198 2F2D     		cmp	r5, #47
 3949              	.LBB153:
 3950              	.LBB146:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3951              		.loc 2 94 51 view .LVU1112
 3952 019a 8AE80300 		stm	r10, {r0, r1}
 3953 019e 8946     		mov	r9, r1
 3954              	.LVL361:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3955              		.loc 2 94 51 view .LVU1113
 3956              	.LBE146:
 3957              	.LBE153:
 3958              		.loc 2 521 7 is_stmt 1 view .LVU1114
 3959              		.loc 2 521 10 is_stmt 0 view .LVU1115
 3960 01a0 69D1     		bne	.L360
 3961              	.LVL362:
 3962              	.L409:
 522:src/console.c **** 	set_menu ( remapped.shift );
 3963              		.loc 2 522 2 is_stmt 1 view .LVU1116
 3964              	.LBB154:
 3965              	.LBB155:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3966              		.loc 1 123 13 is_stmt 0 view .LVU1117
 3967 01a2 614A     		ldr	r2, .L415+76
 3968 01a4 92F90030 		ldrsb	r3, [r2]
 3969              	.LBE155:
 3970              	.LBE154:
 3971              		.loc 2 522 2 view .LVU1118
 3972 01a8 4FFA89F1 		sxtb	r1, r9
 3973              	.LVL363:
 3974              	.LBB158:
 3975              	.LBI154:
 122:src/menu.c    ****   menu_name m = current_menu;
 3976              		.loc 1 122 6 is_stmt 1 view .LVU1119
 3977              	.LBB156:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3978              		.loc 1 123 3 view .LVU1120
 124:src/menu.c    ****     current_menu = default_menu;
 3979              		.loc 1 124 3 view .LVU1121
 124:src/menu.c    ****     current_menu = default_menu;
 3980              		.loc 1 124 6 is_stmt 0 view .LVU1122
 3981 01ac 9942     		cmp	r1, r3
 3982 01ae 00F02B81 		beq	.L407
 127:src/menu.c    ****     current_menu = last_menu;
ARM GAS  /tmp/ccYL8bSL.s 			page 112


 3983              		.loc 1 127 8 is_stmt 1 view .LVU1123
 127:src/menu.c    ****     current_menu = last_menu;
 3984              		.loc 1 127 11 is_stmt 0 view .LVU1124
 3985 01b2 481C     		adds	r0, r1, #1
 128:src/menu.c    ****   }
 3986              		.loc 1 128 5 is_stmt 1 view .LVU1125
 128:src/menu.c    ****   }
 3987              		.loc 1 128 18 is_stmt 0 view .LVU1126
 3988 01b4 04BF     		itt	eq
 3989 01b6 5D49     		ldreq	r1, .L415+80
 3990              	.LVL364:
 128:src/menu.c    ****   }
 3991              		.loc 1 128 18 view .LVU1127
 3992 01b8 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 131:src/menu.c    ****   }
 3993              		.loc 1 131 5 is_stmt 1 view .LVU1128
 131:src/menu.c    ****   }
 3994              		.loc 1 131 18 is_stmt 0 view .LVU1129
 3995 01ba 1170     		strb	r1, [r2]
 3996              	.LVL365:
 3997              	.L362:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3998              		.loc 1 133 3 is_stmt 1 view .LVU1130
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3999              		.loc 1 133 6 is_stmt 0 view .LVU1131
 4000 01bc 092B     		cmp	r3, #9
 4001 01be 03D0     		beq	.L364
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4002              		.loc 1 133 23 view .LVU1132
 4003 01c0 102B     		cmp	r3, #16
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4004              		.loc 1 133 43 is_stmt 1 view .LVU1133
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4005              		.loc 1 133 53 is_stmt 0 view .LVU1134
 4006 01c2 1CBF     		itt	ne
 4007 01c4 594A     		ldrne	r2, .L415+80
 4008 01c6 1370     		strbne	r3, [r2]
 4009              	.L364:
 4010              	.LVL366:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4011              		.loc 1 133 53 view .LVU1135
 4012              	.LBE156:
 4013              	.LBE158:
 523:src/console.c **** 	display_current_menu ();
 4014              		.loc 2 523 2 is_stmt 1 view .LVU1136
 4015 01c8 FFF7FEFF 		bl	display_current_menu
 4016              	.LVL367:
 524:src/console.c **** 	reset_shift();
 4017              		.loc 2 524 2 view .LVU1137
 4018 01cc FFF7FEFF 		bl	reset_shift
 4019              	.LVL368:
 525:src/console.c **** 	remapped = no_key;
 4020              		.loc 2 525 2 view .LVU1138
 4021              		.loc 2 525 11 is_stmt 0 view .LVU1139
 4022 01d0 574B     		ldr	r3, .L415+84
 4023 01d2 93E80300 		ldm	r3, {r0, r1}
 4024 01d6 0DF1080A 		add	r10, sp, #8
ARM GAS  /tmp/ccYL8bSL.s 			page 113


 4025 01da 8AE80300 		stm	r10, {r0, r1}
 4026 01de 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4027              	.LVL369:
 4028              		.loc 2 525 11 view .LVU1140
 4029 01e0 8946     		mov	r9, r1
 4030              	.LVL370:
 4031              		.loc 2 525 11 view .LVU1141
 4032 01e2 48E0     		b	.L360
 4033              	.LVL371:
 4034              	.L315:
 452:src/console.c ****     {
 4035              		.loc 2 452 10 is_stmt 1 view .LVU1142
 452:src/console.c ****     {
 4036              		.loc 2 452 15 is_stmt 0 view .LVU1143
 4037 01e4 2568     		ldr	r5, [r4]
 452:src/console.c ****     {
 4038              		.loc 2 452 13 view .LVU1144
 4039 01e6 15F40075 		ands	r5, r5, #512
 4040 01ea 7FF44CAF 		bne	.L316
 452:src/console.c ****     {
 4041              		.loc 2 452 35 discriminator 1 view .LVU1145
 4042 01ee B847     		blx	r7
 4043              	.LVL372:
 452:src/console.c ****     {
 4044              		.loc 2 452 32 discriminator 1 view .LVU1146
 4045 01f0 0028     		cmp	r0, #0
 4046 01f2 3FF448AF 		beq	.L316
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 4047              		.loc 2 454 7 is_stmt 1 view .LVU1147
 4048 01f6 2368     		ldr	r3, [r4]
 4049 01f8 23F00203 		bic	r3, r3, #2
 455:src/console.c ****       sys_sleep();
 4050              		.loc 2 455 7 is_stmt 0 view .LVU1148
 4051 01fc 2846     		mov	r0, r5
 4052 01fe 6421     		movs	r1, #100
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 4053              		.loc 2 454 7 view .LVU1149
 4054 0200 2360     		str	r3, [r4]
 455:src/console.c ****       sys_sleep();
 4055              		.loc 2 455 7 is_stmt 1 view .LVU1150
 4056 0202 C047     		blx	r8
 4057              	.LVL373:
 456:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 4058              		.loc 2 456 7 view .LVU1151
 4059 0204 3E4B     		ldr	r3, .L415+36
 4060 0206 9847     		blx	r3
 4061              	.LVL374:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4062              		.loc 2 457 7 view .LVU1152
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4063              		.loc 2 457 11 is_stmt 0 view .LVU1153
 4064 0208 4A4B     		ldr	r3, .L415+88
 4065 020a 2846     		mov	r0, r5
 4066 020c 9847     		blx	r3
 4067              	.LVL375:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4068              		.loc 2 457 10 view .LVU1154
ARM GAS  /tmp/ccYL8bSL.s 			page 114


 4069 020e 48B1     		cbz	r0, .L320
 458:src/console.c **** 	if (Pause > 0) Pause--;
 4070              		.loc 2 458 2 is_stmt 1 view .LVU1155
 4071 0210 494B     		ldr	r3, .L415+92
 4072 0212 6220     		movs	r0, #98
 4073 0214 9847     		blx	r3
 4074              	.LVL376:
 459:src/console.c ****       }
 4075              		.loc 2 459 2 view .LVU1156
 459:src/console.c ****       }
 4076              		.loc 2 459 12 is_stmt 0 view .LVU1157
 4077 0216 424B     		ldr	r3, .L415+68
 4078 0218 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 459:src/console.c ****       }
 4079              		.loc 2 459 5 view .LVU1158
 4080 021a 1AB1     		cbz	r2, .L320
 459:src/console.c ****       }
 4081              		.loc 2 459 17 is_stmt 1 discriminator 1 view .LVU1159
 459:src/console.c ****       }
 4082              		.loc 2 459 22 is_stmt 0 discriminator 1 view .LVU1160
 4083 021c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4084 021e 013A     		subs	r2, r2, #1
 4085 0220 D2B2     		uxtb	r2, r2
 4086 0222 1A70     		strb	r2, [r3]
 4087              	.L320:
 461:src/console.c ****     }
 4088              		.loc 2 461 7 is_stmt 1 view .LVU1161
 4089 0224 454B     		ldr	r3, .L415+96
 4090 0226 0020     		movs	r0, #0
 4091 0228 9847     		blx	r3
 4092              	.LVL377:
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4093              		.loc 2 465 5 view .LVU1162
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4094              		.loc 2 465 9 is_stmt 0 view .LVU1163
 4095 022a 2368     		ldr	r3, [r4]
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4096              		.loc 2 465 8 view .LVU1164
 4097 022c 9805     		lsls	r0, r3, #22
 4098 022e 7FF52EAF 		bpl	.L408
 4099              	.L322:
 466:src/console.c ****         // Going to off mode
 4100              		.loc 2 466 7 is_stmt 1 view .LVU1165
 466:src/console.c ****         // Going to off mode
 4101              		.loc 2 466 12 is_stmt 0 view .LVU1166
 4102 0232 2568     		ldr	r5, [r4]
 466:src/console.c ****         // Going to off mode
 4103              		.loc 2 466 10 view .LVU1167
 4104 0234 15F00405 		ands	r5, r5, #4
 4105 0238 7FF417AF 		bne	.L314
 468:src/console.c ****         draw_power_off_image(1);
 4106              		.loc 2 468 9 is_stmt 1 view .LVU1168
 4107 023c 404B     		ldr	r3, .L415+100
 4108 023e 2846     		mov	r0, r5
 4109 0240 9847     		blx	r3
 4110              	.LVL378:
 469:src/console.c **** 
ARM GAS  /tmp/ccYL8bSL.s 			page 115


 4111              		.loc 2 469 9 view .LVU1169
 4112 0242 404B     		ldr	r3, .L415+104
 4113 0244 0120     		movs	r0, #1
 4114 0246 9847     		blx	r3
 4115              	.LVL379:
 471:src/console.c ****         SET_ST(STAT_SUSPENDED);
 4116              		.loc 2 471 9 view .LVU1170
 4117 0248 3F4B     		ldr	r3, .L415+108
 4118 024a 2846     		mov	r0, r5
 4119 024c 9847     		blx	r3
 4120              	.LVL380:
 472:src/console.c ****         SET_ST(STAT_OFF);
 4121              		.loc 2 472 9 view .LVU1171
 4122 024e 2368     		ldr	r3, [r4]
 4123 0250 43F00403 		orr	r3, r3, #4
 4124 0254 2360     		str	r3, [r4]
 473:src/console.c ****       }
 4125              		.loc 2 473 9 view .LVU1172
 4126 0256 2368     		ldr	r3, [r4]
 4127 0258 43F01003 		orr	r3, r3, #16
 4128 025c 2360     		str	r3, [r4]
 4129 025e 04E7     		b	.L314
 4130              	.LVL381:
 4131              	.L331:
 519:src/console.c ****       remapped = remap(c);
 4132              		.loc 2 519 5 view .LVU1173
 520:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 4133              		.loc 2 520 7 view .LVU1174
 4134              	.LBB159:
  56:src/console.c **** 
 4135              		.loc 2 56 22 view .LVU1175
 4136              	.LBB147:
  58:src/console.c **** 
 4137              		.loc 2 58 3 view .LVU1176
   1:src/keytran.c ****     {K_RELEASE, -1},
 4138              		.loc 3 1 1 view .LVU1177
  59:src/keytran.c ****     {K_RELEASE, -1},
 4139              		.loc 3 59 3 view .LVU1178
 118:src/keytran.c ****     {K_RELEASE, -1},
 4140              		.loc 3 118 3 view .LVU1179
 177:src/keytran.c ****     {K_RELEASE, -1},
 4141              		.loc 3 177 1 view .LVU1180
 4142              		.loc 3 235 1 view .LVU1181
  62:src/console.c **** 
 4143              		.loc 2 62 3 view .LVU1182
  62:src/console.c **** 
 4144              		.loc 2 62 23 view .LVU1183
  62:src/console.c **** 
 4145              		.loc 2 62 30 is_stmt 0 view .LVU1184
 4146 0260 3A4B     		ldr	r3, .L415+112
 4147              	.LVL382:
 4148              	.L395:
  62:src/console.c **** 
 4149              		.loc 2 62 30 view .LVU1185
 4150 0262 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4151              	.LVL383:
  62:src/console.c **** 
ARM GAS  /tmp/ccYL8bSL.s 			page 116


 4152              		.loc 2 62 30 view .LVU1186
 4153 0264 93E80300 		ldm	r3, {r0, r1}
 4154 0268 0DF1080A 		add	r10, sp, #8
 4155 026c 8AE80300 		stm	r10, {r0, r1}
 4156 0270 8946     		mov	r9, r1
 4157              	.LVL384:
 4158              	.L333:
  62:src/console.c **** 
 4159              		.loc 2 62 30 view .LVU1187
 4160              	.LBE147:
 4161              	.LBE159:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4162              		.loc 2 521 7 is_stmt 1 view .LVU1188
 521:src/console.c **** 	set_menu ( remapped.shift );
 4163              		.loc 2 521 10 is_stmt 0 view .LVU1189
 4164 0272 2F2D     		cmp	r5, #47
 4165 0274 95D0     		beq	.L409
 4166              	.L360:
 526:src/console.c ****       }
 527:src/console.c ****       if (remapped.key_34s == K_SYS) {
 4167              		.loc 2 527 7 is_stmt 1 view .LVU1190
 4168              		.loc 2 527 10 is_stmt 0 view .LVU1191
 4169 0276 302D     		cmp	r5, #48
 4170 0278 19D1     		bne	.L365
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4171              		.loc 2 528 2 is_stmt 1 view .LVU1192
 4172 027a 2368     		ldr	r3, [r4]
 529:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 4173              		.loc 2 529 2 is_stmt 0 view .LVU1193
 4174 027c 344D     		ldr	r5, .L415+116
 4175              	.LVL385:
 4176              		.loc 2 529 2 view .LVU1194
 4177 027e 3548     		ldr	r0, .L415+120
 4178 0280 0022     		movs	r2, #0
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4179              		.loc 2 528 2 view .LVU1195
 4180 0282 43F04003 		orr	r3, r3, #64
 4181              		.loc 2 529 2 view .LVU1196
 4182 0286 1146     		mov	r1, r2
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4183              		.loc 2 528 2 view .LVU1197
 4184 0288 2360     		str	r3, [r4]
 4185              		.loc 2 529 2 is_stmt 1 view .LVU1198
 4186 028a A847     		blx	r5
 4187              	.LVL386:
 530:src/console.c **** 	CLR_ST(STAT_MENU);
 4188              		.loc 2 530 2 view .LVU1199
 4189 028c 2368     		ldr	r3, [r4]
 4190 028e 23F04003 		bic	r3, r3, #64
 4191 0292 2360     		str	r3, [r4]
 531:src/console.c **** 	reset_shift();
 4192              		.loc 2 531 2 view .LVU1200
 4193 0294 FFF7FEFF 		bl	reset_shift
 4194              	.LVL387:
 532:src/console.c **** 	remapped =  no_key;
 4195              		.loc 2 532 2 view .LVU1201
 4196              		.loc 2 532 11 is_stmt 0 view .LVU1202
ARM GAS  /tmp/ccYL8bSL.s 			page 117


 4197 0298 254B     		ldr	r3, .L415+84
 4198 029a 93E80300 		ldm	r3, {r0, r1}
 4199 029e 0DF1080A 		add	r10, sp, #8
 4200 02a2 8AE80300 		stm	r10, {r0, r1}
 4201 02a6 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4202              	.LVL388:
 4203              		.loc 2 532 11 view .LVU1203
 4204 02a8 8946     		mov	r9, r1
 4205              	.LVL389:
 533:src/console.c **** 	display_current_menu();
 4206              		.loc 2 533 2 is_stmt 1 view .LVU1204
 4207 02aa FFF7FEFF 		bl	display_current_menu
 4208              	.LVL390:
 4209              	.L365:
 534:src/console.c ****       }
 535:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 4210              		.loc 2 535 7 view .LVU1205
 4211              		.loc 2 535 10 is_stmt 0 view .LVU1206
 4212 02ae 312D     		cmp	r5, #49
 4213 02b0 7BD0     		beq	.L368
 536:src/console.c **** 	remapped = do_multi (remapped);
 537:src/console.c **** 	display_current_menu();
 538:src/console.c ****       }
 539:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 4214              		.loc 2 539 7 is_stmt 1 view .LVU1207
 4215              		.loc 2 539 10 is_stmt 0 view .LVU1208
 4216 02b2 322D     		cmp	r5, #50
 4217 02b4 00F09380 		beq	.L367
 4218              	.L411:
 4219              		.loc 2 539 10 view .LVU1209
 4220 02b8 0DF1080A 		add	r10, sp, #8
 4221              	.LVL391:
 4222              	.L355:
 540:src/console.c ****       process_keycode_with_shift(remapped);
 4223              		.loc 2 540 7 is_stmt 1 view .LVU1210
 4224              		.loc 2 540 7 is_stmt 0 view .LVU1211
 4225 02bc 8DF80850 		strb	r5, [sp, #8]
 4226 02c0 CDF80C90 		str	r9, [sp, #12]
 4227 02c4 9AE80300 		ldm	r10, {r0, r1}
 4228 02c8 FFF7FEFF 		bl	process_keycode_with_shift
 4229              	.LVL392:
 541:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4230              		.loc 2 541 7 is_stmt 1 view .LVU1212
 4231              		.loc 2 541 10 is_stmt 0 view .LVU1213
 4232 02cc 622D     		cmp	r5, #98
 4233 02ce 64D0     		beq	.L410
 4234              	.LVL393:
 4235              	.L356:
 4236              		.loc 2 541 59 is_stmt 1 view .LVU1214
 4237              	.LBB160:
 4238              	.LBI160:
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 4239              		.loc 2 252 6 view .LVU1215
 4240              	.LBB161:
 253:src/console.c **** }
 4241              		.loc 2 253 5 view .LVU1216
 253:src/console.c **** }
ARM GAS  /tmp/ccYL8bSL.s 			page 118


 4242              		.loc 2 253 19 is_stmt 0 view .LVU1217
 4243 02d0 214B     		ldr	r3, .L415+124
 4244 02d2 9847     		blx	r3
 4245              	.LVL394:
 253:src/console.c **** }
 4246              		.loc 2 253 17 view .LVU1218
 4247 02d4 214B     		ldr	r3, .L415+128
 4248 02d6 1860     		str	r0, [r3]
 254:src/console.c **** 
 4249              		.loc 2 254 1 view .LVU1219
 4250 02d8 C7E6     		b	.L314
 4251              	.L416:
 4252 02da 00BF     		.align	2
 4253              	.L415:
 4254 02dc 00000000 		.word	StateWhileOn
 4255 02e0 00000000 		.word	DispMsg
 4256 02e4 00200010 		.word	268443648
 4257 02e8 00000000 		.word	KeyCallback
 4258 02ec 7D030008 		.word	134218621
 4259 02f0 00000000 		.word	run_menu_item
 4260 02f4 00000000 		.word	menu_line_str
 4261 02f8 31020008 		.word	134218289
 4262 02fc 00000000 		.word	JustDisplayed
 4263 0300 19040008 		.word	134218777
 4264 0304 19020008 		.word	134218265
 4265 0308 91030008 		.word	134218641
 4266 030c E5020008 		.word	134218469
 4267 0310 59020008 		.word	134218329
 4268 0314 35020008 		.word	134218293
 4269 0318 89030008 		.word	134218633
 4270 031c B9030008 		.word	134218681
 4271 0320 00000000 		.word	Pause
 4272 0324 00000000 		.word	Running
 4273 0328 00000000 		.word	.LANCHOR1
 4274 032c 00000000 		.word	.LANCHOR3
 4275 0330 00000000 		.word	.LANCHOR10
 4276 0334 01040008 		.word	134218753
 4277 0338 81030008 		.word	134218625
 4278 033c F5030008 		.word	134218741
 4279 0340 55020008 		.word	134218325
 4280 0344 2D040008 		.word	134218797
 4281 0348 1D020008 		.word	134218269
 4282 034c 00000000 		.word	.LANCHOR19
 4283 0350 59030008 		.word	134218585
 4284 0354 00000000 		.word	.LANCHOR18
 4285 0358 B9040008 		.word	134218937
 4286 035c 00000000 		.word	.LANCHOR8
 4287 0360 F9030008 		.word	134218745
 4288              	.LVL395:
 4289              	.L329:
 254:src/console.c **** 
 4290              		.loc 2 254 1 view .LVU1220
 4291              	.LBE161:
 4292              	.LBE160:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4293              		.loc 2 510 10 is_stmt 1 view .LVU1221
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
ARM GAS  /tmp/ccYL8bSL.s 			page 119


 4294              		.loc 2 510 15 is_stmt 0 view .LVU1222
 4295 0364 8D4B     		ldr	r3, .L417
 4296 0366 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4297              		.loc 2 510 13 view .LVU1223
 4298 0368 DB07     		lsls	r3, r3, #31
 4299 036a 7FF5B7AE 		bpl	.L330
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4300              		.loc 2 510 37 discriminator 1 view .LVU1224
 4301 036e FFF7FEFF 		bl	DM42_Ticker
 4302              	.LVL396:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4303              		.loc 2 510 37 discriminator 1 view .LVU1225
 4304 0372 8B4A     		ldr	r2, .L417+4
 4305 0374 8B4B     		ldr	r3, .L417+8
 4306 0376 02FB0030 		mla	r0, r2, r0, r3
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4307              		.loc 2 510 32 discriminator 1 view .LVU1226
 4308 037a B0F1333F 		cmp	r0, #858993459
 4309 037e BFF4ADAE 		bcs	.L330
 511:src/console.c ****       finish_LEQ();
 4310              		.loc 2 511 7 is_stmt 1 view .LVU1227
 511:src/console.c ****       finish_LEQ();
 4311              		.loc 2 511 21 is_stmt 0 view .LVU1228
 4312 0382 8420     		movs	r0, #132
 4313 0384 FFF7FEFF 		bl	is_dot
 4314              	.LVL397:
 511:src/console.c ****       finish_LEQ();
 4315              		.loc 2 511 7 view .LVU1229
 4316 0388 B0FA80F1 		clz	r1, r0
 4317 038c 4909     		lsrs	r1, r1, #5
 4318 038e 8420     		movs	r0, #132
 4319 0390 FFF7FEFF 		bl	dot
 4320              	.LVL398:
 512:src/console.c ****     }
 4321              		.loc 2 512 7 is_stmt 1 view .LVU1230
 4322 0394 FFF7FEFF 		bl	finish_LEQ
 4323              	.LVL399:
 4324 0398 A0E6     		b	.L330
 4325              	.LVL400:
 4326              	.L410:
 4327              		.loc 2 541 43 is_stmt 0 discriminator 2 view .LVU1231
 4328 039a 834B     		ldr	r3, .L417+12
 4329 039c 1B68     		ldr	r3, [r3]
 4330 039e 002B     		cmp	r3, #0
 4331 03a0 3FF463AE 		beq	.L314
 4332 03a4 94E7     		b	.L356
 4333              	.LVL401:
 4334              	.L334:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4335              		.loc 2 521 7 is_stmt 1 view .LVU1232
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4336              		.loc 2 527 7 view .LVU1233
 535:src/console.c **** 	remapped = do_multi (remapped);
 4337              		.loc 2 535 7 view .LVU1234
 4338              	.LBB162:
 4339              	.LBB148:
ARM GAS  /tmp/ccYL8bSL.s 			page 120


 4340              	.LBB145:
  68:src/console.c ****   }
 4341              		.loc 2 68 12 is_stmt 0 view .LVU1235
 4342 03a6 4FF00C09 		mov	r9, #12
 4343              	.LVL402:
 4344              	.L368:
  68:src/console.c ****   }
 4345              		.loc 2 68 12 view .LVU1236
 4346              	.LBE145:
 4347              	.LBE148:
 4348              	.LBE162:
 536:src/console.c **** 	display_current_menu();
 4349              		.loc 2 536 2 is_stmt 1 view .LVU1237
 536:src/console.c **** 	display_current_menu();
 4350              		.loc 2 536 13 is_stmt 0 view .LVU1238
 4351 03aa 3123     		movs	r3, #49
 4352 03ac CDF80C90 		str	r9, [sp, #12]
 4353 03b0 8DF80830 		strb	r3, [sp, #8]
 4354 03b4 6D46     		mov	r5, sp
 4355 03b6 0DF1080A 		add	r10, sp, #8
 4356 03ba 9AE80600 		ldm	r10, {r1, r2}
 4357 03be 2846     		mov	r0, r5
 4358 03c0 FFF7FEFF 		bl	do_multi
 4359              	.LVL403:
 4360 03c4 95E80300 		ldm	r5, {r0, r1}
 4361 03c8 8AE80300 		stm	r10, {r0, r1}
 4362 03cc 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 4363              	.LVL404:
 536:src/console.c **** 	display_current_menu();
 4364              		.loc 2 536 13 view .LVU1239
 4365 03d0 DDF80C90 		ldr	r9, [sp, #12]
 4366              	.LVL405:
 537:src/console.c ****       }
 4367              		.loc 2 537 2 is_stmt 1 view .LVU1240
 4368 03d4 FFF7FEFF 		bl	display_current_menu
 4369              	.LVL406:
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4370              		.loc 2 539 7 view .LVU1241
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4371              		.loc 2 539 10 is_stmt 0 view .LVU1242
 4372 03d8 322D     		cmp	r5, #50
 4373 03da 7FF46DAF 		bne	.L411
 4374              	.L367:
 542:src/console.c ****     }
 543:src/console.c ****   }
 544:src/console.c ****   save_ram_file(0);
 4375              		.loc 2 544 3 is_stmt 1 view .LVU1243
 4376 03de 0020     		movs	r0, #0
 545:src/console.c ****   //  free_storage();
 546:src/console.c ****   return;
 547:src/console.c **** }
 4377              		.loc 2 547 1 is_stmt 0 view .LVU1244
 4378 03e0 38B0     		add	sp, sp, #224
 4379              		.cfi_remember_state
 4380              		.cfi_def_cfa_offset 32
 4381              		@ sp needed
 4382 03e2 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
ARM GAS  /tmp/ccYL8bSL.s 			page 121


 4383              		.cfi_restore 14
 4384              		.cfi_restore 10
 4385              		.cfi_restore 9
 4386              		.cfi_restore 8
 4387              		.cfi_restore 7
 4388              		.cfi_restore 6
 4389              		.cfi_restore 5
 4390              		.cfi_restore 4
 4391              		.cfi_def_cfa_offset 0
 4392              	.LVL407:
 544:src/console.c ****   //  free_storage();
 4393              		.loc 2 544 3 view .LVU1245
 4394 03e6 FFF7FEBF 		b	save_ram_file
 4395              	.LVL408:
 4396              	.L397:
 4397              		.cfi_restore_state
 4398              	.LBB163:
 4399              	.LBB149:
  72:src/console.c ****   }
 4400              		.loc 2 72 5 is_stmt 1 view .LVU1246
  72:src/console.c ****   }
 4401              		.loc 2 72 27 is_stmt 0 view .LVU1247
 4402 03ea 704B     		ldr	r3, .L417+16
 4403              	.L394:
 124:src/console.c ****     break;
 4404              		.loc 2 124 26 view .LVU1248
 4405 03ec 03EBC502 		add	r2, r3, r5, lsl #3
 4406 03f0 92E80300 		ldm	r2, {r0, r1}
 4407 03f4 0DF1080A 		add	r10, sp, #8
 4408 03f8 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4409              	.LVL409:
 124:src/console.c ****     break;
 4410              		.loc 2 124 26 view .LVU1249
 4411 03fc 8946     		mov	r9, r1
 4412              	.LVL410:
 124:src/console.c ****     break;
 4413              		.loc 2 124 26 view .LVU1250
 4414 03fe 8AE80300 		stm	r10, {r0, r1}
 4415 0402 36E7     		b	.L333
 4416              	.LVL411:
 4417              	.L396:
  64:src/console.c **** 
 4418              		.loc 2 64 16 is_stmt 1 view .LVU1251
  64:src/console.c **** 
 4419              		.loc 2 64 23 is_stmt 0 view .LVU1252
 4420 0404 6A4B     		ldr	r3, .L417+20
 4421 0406 2CE7     		b	.L395
 4422              	.LVL412:
 4423              	.L407:
  64:src/console.c **** 
 4424              		.loc 2 64 23 view .LVU1253
 4425              	.LBE149:
 4426              	.LBE163:
 4427              	.LBB164:
 4428              	.LBB157:
 125:src/menu.c    ****   }
 4429              		.loc 1 125 5 is_stmt 1 view .LVU1254
ARM GAS  /tmp/ccYL8bSL.s 			page 122


 125:src/menu.c    ****   }
 4430              		.loc 1 125 18 is_stmt 0 view .LVU1255
 4431 0408 6A49     		ldr	r1, .L417+24
 4432              	.LVL413:
 125:src/menu.c    ****   }
 4433              		.loc 1 125 18 view .LVU1256
 4434 040a 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4435 040c 1170     		strb	r1, [r2]
 4436 040e D5E6     		b	.L362
 4437              	.LVL414:
 4438              	.L349:
 125:src/menu.c    ****   }
 4439              		.loc 1 125 18 view .LVU1257
 4440              	.LBE157:
 4441              	.LBE164:
 4442              	.LBB165:
 4443              	.LBB150:
  95:src/console.c ****   }
 4444              		.loc 2 95 5 is_stmt 1 view .LVU1258
  95:src/console.c ****   }
 4445              		.loc 2 95 9 is_stmt 0 view .LVU1259
 4446 0410 FFF7FEFF 		bl	cur_shift
 4447              	.LVL415:
  95:src/console.c ****   }
 4448              		.loc 2 95 8 view .LVU1260
 4449 0414 0128     		cmp	r0, #1
 4450 0416 56D0     		beq	.L412
 4451              	.L336:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4452              		.loc 2 98 3 is_stmt 1 view .LVU1261
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4453              		.loc 2 98 8 is_stmt 0 view .LVU1262
 4454 0418 FFF7FEFF 		bl	get_alpha_state
 4455              	.LVL416:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4456              		.loc 2 98 6 view .LVU1263
 4457 041c D8B3     		cbz	r0, .L350
  99:src/console.c ****       switch (cur_shift()) { 
 4458              		.loc 2 99 5 is_stmt 1 view .LVU1264
  99:src/console.c ****       switch (cur_shift()) { 
 4459              		.loc 2 99 8 is_stmt 0 view .LVU1265
 4460 041e 1C2D     		cmp	r5, #28
 4461 0420 00F08580 		beq	.L413
 116:src/console.c ****   }
 4462              		.loc 2 116 5 is_stmt 1 view .LVU1266
 116:src/console.c ****   }
 4463              		.loc 2 116 26 is_stmt 0 view .LVU1267
 4464 0424 644B     		ldr	r3, .L417+28
 4465 0426 E1E7     		b	.L394
 4466              	.L343:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4467              		.loc 2 79 5 is_stmt 1 view .LVU1268
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4468              		.loc 2 79 9 is_stmt 0 view .LVU1269
 4469 0428 FFF7FEFF 		bl	cur_shift
 4470              	.LVL417:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
ARM GAS  /tmp/ccYL8bSL.s 			page 123


 4471              		.loc 2 79 8 view .LVU1270
 4472 042c 0028     		cmp	r0, #0
 4473 042e 7FF47BAE 		bne	.L344
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4474              		.loc 2 79 33 is_stmt 1 view .LVU1271
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4475              		.loc 2 79 51 is_stmt 0 view .LVU1272
 4476 0432 DDE90801 		ldrd	r0, r1, [sp, #32]
 4477 0436 0DF1080A 		add	r10, sp, #8
 4478 043a 8AE80300 		stm	r10, {r0, r1}
 4479 043e 9DF82050 		ldrb	r5, [sp, #32]	@ zero_extendqisi2
 4480              	.LVL418:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4481              		.loc 2 79 51 view .LVU1273
 4482 0442 8946     		mov	r9, r1
 4483              	.LVL419:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4484              		.loc 2 79 51 view .LVU1274
 4485 0444 15E7     		b	.L333
 4486              	.LVL420:
 4487              	.L405:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4488              		.loc 2 91 33 is_stmt 1 view .LVU1275
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4489              		.loc 2 91 51 is_stmt 0 view .LVU1276
 4490 0446 DDE92801 		ldrd	r0, r1, [sp, #160]
 4491 044a 0DF1080A 		add	r10, sp, #8
 4492 044e 8AE80300 		stm	r10, {r0, r1}
 4493 0452 9DF8A050 		ldrb	r5, [sp, #160]	@ zero_extendqisi2
 4494              	.LVL421:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4495              		.loc 2 91 51 view .LVU1277
 4496 0456 8946     		mov	r9, r1
 4497              	.LVL422:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4498              		.loc 2 91 51 view .LVU1278
 4499 0458 0BE7     		b	.L333
 4500              	.LVL423:
 4501              	.L403:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4502              		.loc 2 88 33 is_stmt 1 view .LVU1279
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4503              		.loc 2 88 51 is_stmt 0 view .LVU1280
 4504 045a DDE92001 		ldrd	r0, r1, [sp, #128]
 4505 045e 0DF1080A 		add	r10, sp, #8
 4506 0462 8AE80300 		stm	r10, {r0, r1}
 4507 0466 9DF88050 		ldrb	r5, [sp, #128]	@ zero_extendqisi2
 4508              	.LVL424:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4509              		.loc 2 88 51 view .LVU1281
 4510 046a 8946     		mov	r9, r1
 4511              	.LVL425:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4512              		.loc 2 88 51 view .LVU1282
 4513 046c 01E7     		b	.L333
 4514              	.LVL426:
 4515              	.L401:
ARM GAS  /tmp/ccYL8bSL.s 			page 124


  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4516              		.loc 2 85 33 is_stmt 1 view .LVU1283
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4517              		.loc 2 85 51 is_stmt 0 view .LVU1284
 4518 046e DDE91801 		ldrd	r0, r1, [sp, #96]
 4519 0472 0DF1080A 		add	r10, sp, #8
 4520 0476 8AE80300 		stm	r10, {r0, r1}
 4521 047a 9DF86050 		ldrb	r5, [sp, #96]	@ zero_extendqisi2
 4522              	.LVL427:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4523              		.loc 2 85 51 view .LVU1285
 4524 047e 8946     		mov	r9, r1
 4525              	.LVL428:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4526              		.loc 2 85 51 view .LVU1286
 4527 0480 F7E6     		b	.L333
 4528              	.LVL429:
 4529              	.L399:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4530              		.loc 2 82 33 is_stmt 1 view .LVU1287
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4531              		.loc 2 82 51 is_stmt 0 view .LVU1288
 4532 0482 DDE91001 		ldrd	r0, r1, [sp, #64]
 4533 0486 0DF1080A 		add	r10, sp, #8
 4534 048a 8AE80300 		stm	r10, {r0, r1}
 4535 048e 9DF84050 		ldrb	r5, [sp, #64]	@ zero_extendqisi2
 4536              	.LVL430:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4537              		.loc 2 82 51 view .LVU1289
 4538 0492 8946     		mov	r9, r1
 4539              	.LVL431:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4540              		.loc 2 82 51 view .LVU1290
 4541 0494 EDE6     		b	.L333
 4542              	.LVL432:
 4543              	.L350:
 119:src/console.c ****   case SHIFT_N:    
 4544              		.loc 2 119 3 is_stmt 1 view .LVU1291
 119:src/console.c ****   case SHIFT_N:    
 4545              		.loc 2 119 11 is_stmt 0 view .LVU1292
 4546 0496 FFF7FEFF 		bl	cur_shift
 4547              	.LVL433:
 119:src/console.c ****   case SHIFT_N:    
 4548              		.loc 2 119 3 view .LVU1293
 4549 049a 0128     		cmp	r0, #1
 4550 049c 45D0     		beq	.L357
 4551 049e 0228     		cmp	r0, #2
 4552 04a0 02D0     		beq	.L358
 4553 04a2 70B1     		cbz	r0, .L359
  58:src/console.c **** 
 4554              		.loc 2 58 41 view .LVU1294
 4555 04a4 EDB2     		uxtb	r5, r5
 4556              	.LVL434:
  58:src/console.c **** 
 4557              		.loc 2 58 41 view .LVU1295
 4558 04a6 E4E6     		b	.L333
 4559              	.LVL435:
ARM GAS  /tmp/ccYL8bSL.s 			page 125


 4560              	.L358:
 125:src/console.c ****   case SHIFT_G:
 4561              		.loc 2 125 5 is_stmt 1 view .LVU1296
 127:src/console.c ****     break;
 4562              		.loc 2 127 5 view .LVU1297
 127:src/console.c ****     break;
 4563              		.loc 2 127 26 is_stmt 0 view .LVU1298
 4564 04a8 444B     		ldr	r3, .L417+32
 4565 04aa 03EBC502 		add	r2, r3, r5, lsl #3
 4566 04ae 92E80300 		ldm	r2, {r0, r1}
 4567 04b2 0DF1080A 		add	r10, sp, #8
 4568 04b6 8AE80300 		stm	r10, {r0, r1}
 4569 04ba 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4570              	.LVL436:
 127:src/console.c ****     break;
 4571              		.loc 2 127 26 view .LVU1299
 4572 04be 8946     		mov	r9, r1
 4573              	.LVL437:
 127:src/console.c ****     break;
 4574              		.loc 2 127 26 view .LVU1300
 4575 04c0 D7E6     		b	.L333
 4576              	.LVL438:
 4577              	.L359:
 121:src/console.c ****     break;
 4578              		.loc 2 121 5 is_stmt 1 view .LVU1301
 121:src/console.c ****     break;
 4579              		.loc 2 121 24 is_stmt 0 view .LVU1302
 4580 04c2 3F4B     		ldr	r3, .L417+36
 4581 04c4 92E7     		b	.L394
 4582              	.L412:
  95:src/console.c ****   }
 4583              		.loc 2 95 33 is_stmt 1 view .LVU1303
  95:src/console.c ****   }
 4584              		.loc 2 95 51 is_stmt 0 view .LVU1304
 4585 04c6 DDE93201 		ldrd	r0, r1, [sp, #200]
 4586 04ca 0DF1080A 		add	r10, sp, #8
 4587 04ce 8AE80300 		stm	r10, {r0, r1}
 4588 04d2 9DF8C850 		ldrb	r5, [sp, #200]	@ zero_extendqisi2
 4589              	.LVL439:
  95:src/console.c ****   }
 4590              		.loc 2 95 51 view .LVU1305
 4591 04d6 8946     		mov	r9, r1
 4592              	.LVL440:
  95:src/console.c ****   }
 4593              		.loc 2 95 51 view .LVU1306
 4594 04d8 CBE6     		b	.L333
 4595              	.LVL441:
 4596              	.L404:
  89:src/console.c ****   case KEY_F5:
 4597              		.loc 2 89 33 is_stmt 1 view .LVU1307
  89:src/console.c ****   case KEY_F5:
 4598              		.loc 2 89 51 is_stmt 0 view .LVU1308
 4599 04da DDE92201 		ldrd	r0, r1, [sp, #136]
 4600 04de 0DF1080A 		add	r10, sp, #8
 4601 04e2 8AE80300 		stm	r10, {r0, r1}
 4602 04e6 9DF88850 		ldrb	r5, [sp, #136]	@ zero_extendqisi2
 4603              	.LVL442:
ARM GAS  /tmp/ccYL8bSL.s 			page 126


  89:src/console.c ****   case KEY_F5:
 4604              		.loc 2 89 51 view .LVU1309
 4605 04ea 8946     		mov	r9, r1
 4606              	.LVL443:
  89:src/console.c ****   case KEY_F5:
 4607              		.loc 2 89 51 view .LVU1310
 4608 04ec C1E6     		b	.L333
 4609              	.LVL444:
 4610              	.L406:
  92:src/console.c ****   case KEY_F6:
 4611              		.loc 2 92 33 is_stmt 1 view .LVU1311
  92:src/console.c ****   case KEY_F6:
 4612              		.loc 2 92 51 is_stmt 0 view .LVU1312
 4613 04ee DDE92A01 		ldrd	r0, r1, [sp, #168]
 4614 04f2 0DF1080A 		add	r10, sp, #8
 4615 04f6 8AE80300 		stm	r10, {r0, r1}
 4616 04fa 9DF8A850 		ldrb	r5, [sp, #168]	@ zero_extendqisi2
 4617              	.LVL445:
  92:src/console.c ****   case KEY_F6:
 4618              		.loc 2 92 51 view .LVU1313
 4619 04fe 8946     		mov	r9, r1
 4620              	.LVL446:
  92:src/console.c ****   case KEY_F6:
 4621              		.loc 2 92 51 view .LVU1314
 4622 0500 B7E6     		b	.L333
 4623              	.LVL447:
 4624              	.L402:
  86:src/console.c ****   case KEY_F4:
 4625              		.loc 2 86 33 is_stmt 1 view .LVU1315
  86:src/console.c ****   case KEY_F4:
 4626              		.loc 2 86 51 is_stmt 0 view .LVU1316
 4627 0502 DDE91A01 		ldrd	r0, r1, [sp, #104]
 4628 0506 0DF1080A 		add	r10, sp, #8
 4629 050a 8AE80300 		stm	r10, {r0, r1}
 4630 050e 9DF86850 		ldrb	r5, [sp, #104]	@ zero_extendqisi2
 4631              	.LVL448:
  86:src/console.c ****   case KEY_F4:
 4632              		.loc 2 86 51 view .LVU1317
 4633 0512 8946     		mov	r9, r1
 4634              	.LVL449:
  86:src/console.c ****   case KEY_F4:
 4635              		.loc 2 86 51 view .LVU1318
 4636 0514 ADE6     		b	.L333
 4637              	.LVL450:
 4638              	.L400:
  83:src/console.c ****   case KEY_F3:
 4639              		.loc 2 83 33 is_stmt 1 view .LVU1319
  83:src/console.c ****   case KEY_F3:
 4640              		.loc 2 83 51 is_stmt 0 view .LVU1320
 4641 0516 DDE91201 		ldrd	r0, r1, [sp, #72]
 4642 051a 0DF1080A 		add	r10, sp, #8
 4643 051e 8AE80300 		stm	r10, {r0, r1}
 4644 0522 9DF84850 		ldrb	r5, [sp, #72]	@ zero_extendqisi2
 4645              	.LVL451:
  83:src/console.c ****   case KEY_F3:
 4646              		.loc 2 83 51 view .LVU1321
 4647 0526 8946     		mov	r9, r1
ARM GAS  /tmp/ccYL8bSL.s 			page 127


 4648              	.LVL452:
  83:src/console.c ****   case KEY_F3:
 4649              		.loc 2 83 51 view .LVU1322
 4650 0528 A3E6     		b	.L333
 4651              	.LVL453:
 4652              	.L357:
 122:src/console.c ****   case SHIFT_F:
 4653              		.loc 2 122 5 is_stmt 1 view .LVU1323
 124:src/console.c ****     break;
 4654              		.loc 2 124 5 view .LVU1324
 124:src/console.c ****     break;
 4655              		.loc 2 124 26 is_stmt 0 view .LVU1325
 4656 052a 264B     		ldr	r3, .L417+40
 4657 052c 5EE7     		b	.L394
 4658              	.L413:
 100:src/console.c ****       case SHIFT_N:
 4659              		.loc 2 100 7 is_stmt 1 view .LVU1326
 100:src/console.c ****       case SHIFT_N:
 4660              		.loc 2 100 15 is_stmt 0 view .LVU1327
 4661 052e FFF7FEFF 		bl	cur_shift
 4662              	.LVL454:
 100:src/console.c ****       case SHIFT_N:
 4663              		.loc 2 100 7 view .LVU1328
 4664 0532 0328     		cmp	r0, #3
 4665 0534 28D8     		bhi	.L352
 4666 0536 0128     		cmp	r0, #1
 4667 0538 11D8     		bhi	.L353
 4668 053a E0B1     		cbz	r0, .L414
 103:src/console.c ****       case SHIFT_F:
 4669              		.loc 2 103 2 is_stmt 1 view .LVU1329
 105:src/console.c **** 	break;
 4670              		.loc 2 105 2 view .LVU1330
 105:src/console.c **** 	break;
 4671              		.loc 2 105 23 is_stmt 0 view .LVU1331
 4672 053c 224B     		ldr	r3, .L417+44
 4673 053e 93E80300 		ldm	r3, {r0, r1}
 4674 0542 0DF1080A 		add	r10, sp, #8
 4675 0546 8AE80300 		stm	r10, {r0, r1}
 4676              	.LVL455:
 105:src/console.c **** 	break;
 4677              		.loc 2 105 23 view .LVU1332
 4678              	.LBE150:
 4679              	.LBE165:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4680              		.loc 2 521 7 is_stmt 1 view .LVU1333
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4681              		.loc 2 527 7 view .LVU1334
 535:src/console.c **** 	remapped = do_multi (remapped);
 4682              		.loc 2 535 7 view .LVU1335
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4683              		.loc 2 539 7 view .LVU1336
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4684              		.loc 2 540 7 view .LVU1337
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4685              		.loc 2 540 7 is_stmt 0 view .LVU1338
 4686 054a 2A22     		movs	r2, #42
 4687 054c 0023     		movs	r3, #0
ARM GAS  /tmp/ccYL8bSL.s 			page 128


 4688 054e 8DF80820 		strb	r2, [sp, #8]
 4689 0552 0393     		str	r3, [sp, #12]
 4690 0554 9AE80300 		ldm	r10, {r0, r1}
 4691 0558 FFF7FEFF 		bl	process_keycode_with_shift
 4692              	.LVL456:
 541:src/console.c ****     }
 4693              		.loc 2 541 7 is_stmt 1 view .LVU1339
 4694 055c B8E6     		b	.L356
 4695              	.LVL457:
 4696              	.L353:
 4697              	.LBB166:
 4698              	.LBB151:
 106:src/console.c ****       case SHIFT_G:
 4699              		.loc 2 106 2 view .LVU1340
 108:src/console.c **** 	break;
 4700              		.loc 2 108 2 view .LVU1341
 108:src/console.c **** 	break;
 4701              		.loc 2 108 9 is_stmt 0 view .LVU1342
 4702 055e 1B4B     		ldr	r3, .L417+48
 4703 0560 7FE6     		b	.L395
 4704              	.L398:
  80:src/console.c ****   case KEY_F2:
 4705              		.loc 2 80 33 is_stmt 1 view .LVU1343
  80:src/console.c ****   case KEY_F2:
 4706              		.loc 2 80 51 is_stmt 0 view .LVU1344
 4707 0562 DDE90A01 		ldrd	r0, r1, [sp, #40]
 4708 0566 0DF1080A 		add	r10, sp, #8
 4709 056a 8AE80300 		stm	r10, {r0, r1}
 4710 056e 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 4711              	.LVL458:
  80:src/console.c ****   case KEY_F2:
 4712              		.loc 2 80 51 view .LVU1345
 4713 0572 8946     		mov	r9, r1
 4714              	.LVL459:
  80:src/console.c ****   case KEY_F2:
 4715              		.loc 2 80 51 view .LVU1346
 4716 0574 7DE6     		b	.L333
 4717              	.LVL460:
 4718              	.L414:
 102:src/console.c **** 	break;
 4719              		.loc 2 102 2 is_stmt 1 view .LVU1347
 102:src/console.c **** 	break;
 4720              		.loc 2 102 21 is_stmt 0 view .LVU1348
 4721 0576 164B     		ldr	r3, .L417+52
 4722 0578 93E80300 		ldm	r3, {r0, r1}
 4723 057c 0DF1080A 		add	r10, sp, #8
 4724 0580 8AE80300 		stm	r10, {r0, r1}
 4725              	.LVL461:
 102:src/console.c **** 	break;
 4726              		.loc 2 102 21 view .LVU1349
 4727              	.LBE151:
 4728              	.LBE166:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4729              		.loc 2 521 7 is_stmt 1 view .LVU1350
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4730              		.loc 2 527 7 view .LVU1351
 535:src/console.c **** 	remapped = do_multi (remapped);
ARM GAS  /tmp/ccYL8bSL.s 			page 129


 4731              		.loc 2 535 7 view .LVU1352
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4732              		.loc 2 539 7 view .LVU1353
 4733              	.LBB167:
 4734              	.LBB152:
 102:src/console.c **** 	break;
 4735              		.loc 2 102 21 is_stmt 0 view .LVU1354
 4736 0584 2925     		movs	r5, #41
 4737              	.LVL462:
 102:src/console.c **** 	break;
 4738              		.loc 2 102 21 view .LVU1355
 4739 0586 99E6     		b	.L355
 4740              	.LVL463:
 4741              	.L352:
 102:src/console.c **** 	break;
 4742              		.loc 2 102 21 view .LVU1356
 4743              	.LBE152:
 4744              	.LBE167:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4745              		.loc 2 521 7 is_stmt 1 view .LVU1357
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4746              		.loc 2 527 7 view .LVU1358
 535:src/console.c **** 	remapped = do_multi (remapped);
 4747              		.loc 2 535 7 view .LVU1359
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4748              		.loc 2 539 7 view .LVU1360
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4749              		.loc 2 540 7 view .LVU1361
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4750              		.loc 2 540 7 is_stmt 0 view .LVU1362
 4751 0588 0023     		movs	r3, #0
 4752 058a 8DF80850 		strb	r5, [sp, #8]
 4753 058e 0298     		ldr	r0, [sp, #8]
 4754 0590 0393     		str	r3, [sp, #12]
 4755 0592 1946     		mov	r1, r3
 4756 0594 FFF7FEFF 		bl	process_keycode_with_shift
 4757              	.LVL464:
 541:src/console.c ****     }
 4758              		.loc 2 541 7 is_stmt 1 view .LVU1363
 4759 0598 9AE6     		b	.L356
 4760              	.L418:
 4761 059a 00BF     		.align	2
 4762              	.L417:
 4763 059c 00000000 		.word	StopWatchStatus
 4764 05a0 CDCCCCCC 		.word	-858993459
 4765 05a4 99999919 		.word	429496729
 4766 05a8 00000000 		.word	JustStopped
 4767 05ac 00000000 		.word	.LANCHOR12
 4768 05b0 00000000 		.word	.LANCHOR11
 4769 05b4 00000000 		.word	.LANCHOR2
 4770 05b8 00000000 		.word	.LANCHOR16
 4771 05bc 00000000 		.word	.LANCHOR17
 4772 05c0 00000000 		.word	.LANCHOR13
 4773 05c4 00000000 		.word	.LANCHOR14
 4774 05c8 E0000000 		.word	.LANCHOR14+224
 4775 05cc 00000000 		.word	.LANCHOR15
 4776 05d0 E0000000 		.word	.LANCHOR13+224
ARM GAS  /tmp/ccYL8bSL.s 			page 130


 4777              		.cfi_endproc
 4778              	.LFE34:
 4780              		.global	n_p
 4781              		.comm	print_string,22,4
 4782              		.global	spaces
 4783              		.global	release
 4784              		.global	h_shift
 4785              		.global	g_shift
 4786              		.global	f_shift
 4787              		.global	heartbeat
 4788              		.global	no_key
 4789              		.global	MID_MENU
 4790              		.section	.rodata.str1.4,"aMS",%progbits,1
 4791              		.align	2
 4792              	.LC18:
 4793 0000 53797374 		.ascii	"System!\000"
 4793      656D2100 
 4794              		.global	mid_menu
 4795              		.global	default_menu
 4796              		.global	last_menu
 4797              		.global	current_menu
 4798              		.global	cmplx_key_string
 4799              		.align	2
 4800              	.LC19:
 4801 0008 43505800 		.ascii	"CPX\000"
 4802              		.global	arrow_key_string
 4803              		.align	2
 4804              	.LC20:
 4805 000c 2D2D0D00 		.ascii	"--\015\000"
 4806              		.global	UserMenu
 4807              		.section	.rodata
 4808              		.align	2
 4809              		.set	.LANCHOR5,. + 0
 4810              	.LC0:
 4811 0000 2C       		.byte	44
 4812 0001 000000   		.space	3
 4813 0004 FFFFFFFF 		.word	-1
 4814              	.LC1:
 4815 0008 2D       		.byte	45
 4816 0009 000000   		.space	3
 4817 000c FFFFFFFF 		.word	-1
 4818              	.LC14:
 4819 0010 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4819      2A2B0708 
 4819      091C0B0C 
 4819      0D0E0F
 4820 001f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4820      13141516 
 4820      00121819 
 4820      1A
 4821 002c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4821      1E1F2000 
 4821      21222324 
 4821      25
 4822              		.section	.bss.current_menu,"aw",%nobits
 4823              		.set	.LANCHOR1,. + 0
 4826              	current_menu:
ARM GAS  /tmp/ccYL8bSL.s 			page 131


 4827 0000 00       		.space	1
 4828              		.section	.bss.default_menu,"aw",%nobits
 4829              		.set	.LANCHOR2,. + 0
 4832              	default_menu:
 4833 0000 00       		.space	1
 4834              		.section	.bss.last_menu,"aw",%nobits
 4835              		.set	.LANCHOR3,. + 0
 4838              	last_menu:
 4839 0000 00       		.space	1
 4840              		.section	.bss.mdots,"aw",%nobits
 4841              		.align	2
 4842              		.set	.LANCHOR0,. + 0
 4845              	mdots:
 4846 0000 00000000 		.space	400
 4846      00000000 
 4846      00000000 
 4846      00000000 
 4846      00000000 
 4847              		.section	.bss.n_p,"aw",%nobits
 4848              		.align	2
 4851              	n_p:
 4852 0000 00000000 		.space	4
 4853              		.section	.bss.start_ticks,"aw",%nobits
 4854              		.align	2
 4855              		.set	.LANCHOR8,. + 0
 4858              	start_ticks:
 4859 0000 00000000 		.space	4
 4860              		.section	.data.UserMenu,"aw"
 4861              		.align	2
 4862              		.set	.LANCHOR4,. + 0
 4865              	UserMenu:
 4866 0000 55736572 		.ascii	"User Menu\000"
 4866      204D656E 
 4866      7500
 4867 000a 00000000 		.space	5
 4867      00
 4868 000f 00       		.space	1
 4869 0010 2E       		.byte	46
 4870 0011 000000   		.space	3
 4871 0014 FFFFFFFF 		.word	-1
 4872 0018 2E       		.byte	46
 4873 0019 000000   		.space	3
 4874 001c FFFFFFFF 		.word	-1
 4875 0020 00       		.ascii	"\000"
 4876 0021 00000000 		.space	7
 4876      000000
 4877 0028 00       		.ascii	"\000"
 4878 0029 00000000 		.space	7
 4878      000000
 4879 0030 2E       		.byte	46
 4880 0031 000000   		.space	3
 4881 0034 FFFFFFFF 		.word	-1
 4882 0038 2E       		.byte	46
 4883 0039 000000   		.space	3
 4884 003c FFFFFFFF 		.word	-1
 4885 0040 00       		.ascii	"\000"
 4886 0041 00000000 		.space	7
ARM GAS  /tmp/ccYL8bSL.s 			page 132


 4886      000000
 4887 0048 00       		.ascii	"\000"
 4888 0049 00000000 		.space	7
 4888      000000
 4889 0050 2E       		.byte	46
 4890 0051 000000   		.space	3
 4891 0054 FFFFFFFF 		.word	-1
 4892 0058 2E       		.byte	46
 4893 0059 000000   		.space	3
 4894 005c FFFFFFFF 		.word	-1
 4895 0060 00       		.ascii	"\000"
 4896 0061 00000000 		.space	7
 4896      000000
 4897 0068 00       		.ascii	"\000"
 4898 0069 00000000 		.space	7
 4898      000000
 4899 0070 2E       		.byte	46
 4900 0071 000000   		.space	3
 4901 0074 FFFFFFFF 		.word	-1
 4902 0078 2E       		.byte	46
 4903 0079 000000   		.space	3
 4904 007c FFFFFFFF 		.word	-1
 4905 0080 00       		.ascii	"\000"
 4906 0081 00000000 		.space	7
 4906      000000
 4907 0088 00       		.ascii	"\000"
 4908 0089 00000000 		.space	7
 4908      000000
 4909 0090 2C       		.byte	44
 4910 0091 000000   		.space	3
 4911 0094 FFFFFFFF 		.word	-1
 4912 0098 2E       		.byte	46
 4913 0099 000000   		.space	3
 4914 009c FFFFFFFF 		.word	-1
 4915 00a0 2D2D0D00 		.ascii	"--\015\000"
 4916 00a4 00000000 		.space	4
 4917 00a8 00       		.ascii	"\000"
 4918 00a9 00000000 		.space	7
 4918      000000
 4919 00b0 2D       		.byte	45
 4920 00b1 000000   		.space	3
 4921 00b4 FFFFFFFF 		.word	-1
 4922 00b8 31       		.byte	49
 4923 00b9 000000   		.space	3
 4924 00bc 0B000000 		.word	11
 4925 00c0 43505800 		.ascii	"CPX\000"
 4926 00c4 00000000 		.space	4
 4927 00c8 00       		.ascii	"\000"
 4928 00c9 00000000 		.space	7
 4928      000000
 4929              		.section	.data.arrow_key_string,"aw"
 4930              		.align	2
 4931              		.set	.LANCHOR6,. + 0
 4934              	arrow_key_string:
 4935 0000 0C000000 		.word	.LC20
 4936              		.section	.data.cmplx_key_string,"aw"
 4937              		.align	2
ARM GAS  /tmp/ccYL8bSL.s 			page 133


 4938              		.set	.LANCHOR7,. + 0
 4941              	cmplx_key_string:
 4942 0000 08000000 		.word	.LC19
 4943              		.section	.data.f_shift,"aw"
 4944              		.align	2
 4947              	f_shift:
 4948 0000 29       		.byte	41
 4949 0001 000000   		.space	3
 4950 0004 FFFFFFFF 		.word	-1
 4951              		.section	.data.g_shift,"aw"
 4952              		.align	2
 4955              	g_shift:
 4956 0000 2A       		.byte	42
 4957 0001 000000   		.space	3
 4958 0004 FFFFFFFF 		.word	-1
 4959              		.section	.data.h_shift,"aw"
 4960              		.align	2
 4961              		.set	.LANCHOR15,. + 0
 4964              	h_shift:
 4965 0000 2B       		.byte	43
 4966 0001 000000   		.space	3
 4967 0004 FFFFFFFF 		.word	-1
 4968              		.section	.data.heartbeat,"aw"
 4969              		.align	2
 4970              		.set	.LANCHOR19,. + 0
 4973              	heartbeat:
 4974 0000 62       		.byte	98
 4975 0001 000000   		.space	3
 4976 0004 FFFFFFFF 		.word	-1
 4977              		.section	.data.no_key,"aw"
 4978              		.align	2
 4979              		.set	.LANCHOR10,. + 0
 4982              	no_key:
 4983 0000 2E       		.byte	46
 4984 0001 000000   		.space	3
 4985 0004 00000000 		.word	0
 4986              		.section	.data.release,"aw"
 4987              		.align	2
 4988              		.set	.LANCHOR11,. + 0
 4991              	release:
 4992 0000 63       		.byte	99
 4993 0001 000000   		.space	3
 4994 0004 FFFFFFFF 		.word	-1
 4995              		.section	.data.spaces,"aw"
 4996              		.align	2
 4997              		.set	.LANCHOR9,. + 0
 5000              	spaces:
 5001 0000 20202020 		.ascii	"                     \000"
 5001      20202020 
 5001      20202020 
 5001      20202020 
 5001      20202020 
 5002              		.section	.rodata.MID_MENU,"a"
 5003              		.align	2
 5004              		.set	.LANCHOR18,. + 0
 5007              	MID_MENU:
 5008 0000 00000000 		.word	.LC18
ARM GAS  /tmp/ccYL8bSL.s 			page 134


 5009 0004 00000000 		.word	mid_menu
 5010 0008 00000000 		.word	0
 5011 000c 00000000 		.word	0
 5012              		.section	.rodata.Menus,"a"
 5013              		.align	2
 5016              	Menus:
 5017 0000 4D5F426C 		.ascii	"M_Blank\000"
 5017      616E6B00 
 5018 0008 00000000 		.space	7
 5018      000000
 5019 000f 00       		.space	1
 5020 0010 2E       		.byte	46
 5021 0011 000000   		.space	3
 5022 0014 FFFFFFFF 		.word	-1
 5023 0018 2E       		.byte	46
 5024 0019 000000   		.space	3
 5025 001c FFFFFFFF 		.word	-1
 5026 0020 00       		.ascii	"\000"
 5027 0021 00000000 		.space	7
 5027      000000
 5028 0028 00       		.ascii	"\000"
 5029 0029 00000000 		.space	7
 5029      000000
 5030 0030 2E       		.byte	46
 5031 0031 000000   		.space	3
 5032 0034 FFFFFFFF 		.word	-1
 5033 0038 2E       		.byte	46
 5034 0039 000000   		.space	3
 5035 003c FFFFFFFF 		.word	-1
 5036 0040 00       		.ascii	"\000"
 5037 0041 00000000 		.space	7
 5037      000000
 5038 0048 00       		.ascii	"\000"
 5039 0049 00000000 		.space	7
 5039      000000
 5040 0050 2E       		.byte	46
 5041 0051 000000   		.space	3
 5042 0054 FFFFFFFF 		.word	-1
 5043 0058 2E       		.byte	46
 5044 0059 000000   		.space	3
 5045 005c FFFFFFFF 		.word	-1
 5046 0060 00       		.ascii	"\000"
 5047 0061 00000000 		.space	7
 5047      000000
 5048 0068 00       		.ascii	"\000"
 5049 0069 00000000 		.space	7
 5049      000000
 5050 0070 2E       		.byte	46
 5051 0071 000000   		.space	3
 5052 0074 FFFFFFFF 		.word	-1
 5053 0078 2E       		.byte	46
 5054 0079 000000   		.space	3
 5055 007c FFFFFFFF 		.word	-1
 5056 0080 00       		.ascii	"\000"
 5057 0081 00000000 		.space	7
 5057      000000
 5058 0088 00       		.ascii	"\000"
ARM GAS  /tmp/ccYL8bSL.s 			page 135


 5059 0089 00000000 		.space	7
 5059      000000
 5060 0090 2C       		.byte	44
 5061 0091 000000   		.space	3
 5062 0094 FFFFFFFF 		.word	-1
 5063 0098 2E       		.byte	46
 5064 0099 000000   		.space	3
 5065 009c FFFFFFFF 		.word	-1
 5066 00a0 2D2D0D00 		.ascii	"--\015\000"
 5067 00a4 00000000 		.space	4
 5068 00a8 00       		.ascii	"\000"
 5069 00a9 00000000 		.space	7
 5069      000000
 5070 00b0 2D       		.byte	45
 5071 00b1 000000   		.space	3
 5072 00b4 FFFFFFFF 		.word	-1
 5073 00b8 31       		.byte	49
 5074 00b9 000000   		.space	3
 5075 00bc 0B000000 		.word	11
 5076 00c0 43505800 		.ascii	"CPX\000"
 5077 00c4 00000000 		.space	4
 5078 00c8 00       		.ascii	"\000"
 5079 00c9 00000000 		.space	7
 5079      000000
 5080 00d0 4D5F436C 		.ascii	"M_Clear\000"
 5080      65617200 
 5081 00d8 00000000 		.space	7
 5081      000000
 5082 00df 00       		.space	1
 5083 00e0 10       		.byte	16
 5084 00e1 000000   		.space	3
 5085 00e4 01000000 		.word	1
 5086 00e8 34       		.byte	52
 5087 00e9 000000   		.space	3
 5088 00ec 44010000 		.word	324
 5089 00f0 434C5072 		.ascii	"CLProg\000"
 5089      6F6700
 5090 00f7 00       		.space	1
 5091 00f8 434C5041 		.ascii	"CLPAll\000"
 5091      6C6C00
 5092 00ff 00       		.space	1
 5093 0100 10       		.byte	16
 5094 0101 000000   		.space	3
 5095 0104 02000000 		.word	2
 5096 0108 34       		.byte	52
 5097 0109 000000   		.space	3
 5098 010c 3E010000 		.word	318
 5099 0110 434C9100 		.ascii	"CL\221\000"
 5100 0114 00000000 		.space	4
 5101 0118 434C5265 		.ascii	"CLReg\000"
 5101      6700
 5102 011e 0000     		.space	2
 5103 0120 10       		.byte	16
 5104 0121 000000   		.space	3
 5105 0124 03000000 		.word	3
 5106 0128 34       		.byte	52
 5107 0129 000000   		.space	3
ARM GAS  /tmp/ccYL8bSL.s 			page 136


 5108 012c 74010000 		.word	372
 5109 0130 434C7800 		.ascii	"CLx\000"
 5110 0134 00000000 		.space	4
 5111 0138 434C06A0 		.ascii	"CL\006\240\000"
 5111      00
 5112 013d 000000   		.space	3
 5113 0140 34       		.byte	52
 5114 0141 000000   		.space	3
 5115 0144 40010000 		.word	320
 5116 0148 34       		.byte	52
 5117 0149 000000   		.space	3
 5118 014c 41010000 		.word	321
 5119 0150 434C5374 		.ascii	"CLStk\000"
 5119      6B00
 5120 0156 0000     		.space	2
 5121 0158 434C416C 		.ascii	"CLAll\000"
 5121      6C00
 5122 015e 0000     		.space	2
 5123 0160 2C       		.byte	44
 5124 0161 000000   		.space	3
 5125 0164 FFFFFFFF 		.word	-1
 5126 0168 2E       		.byte	46
 5127 0169 000000   		.space	3
 5128 016c FFFFFFFF 		.word	-1
 5129 0170 2D2D0D00 		.ascii	"--\015\000"
 5130 0174 00000000 		.space	4
 5131 0178 00       		.ascii	"\000"
 5132 0179 00000000 		.space	7
 5132      000000
 5133 0180 2D       		.byte	45
 5134 0181 000000   		.space	3
 5135 0184 FFFFFFFF 		.word	-1
 5136 0188 2E       		.byte	46
 5137 0189 000000   		.space	3
 5138 018c FFFFFFFF 		.word	-1
 5139 0190 43505800 		.ascii	"CPX\000"
 5140 0194 00000000 		.space	4
 5141 0198 00       		.ascii	"\000"
 5142 0199 00000000 		.space	7
 5142      000000
 5143 01a0 4D5F4469 		.ascii	"M_Disp\000"
 5143      737000
 5144 01a7 00000000 		.space	8
 5144      00000000 
 5145 01af 00       		.space	1
 5146 01b0 00       		.byte	0
 5147 01b1 000000   		.space	3
 5148 01b4 03000000 		.word	3
 5149 01b8 05       		.byte	5
 5150 01b9 000000   		.space	3
 5151 01bc 01000000 		.word	1
 5152 01c0 414C4C00 		.ascii	"ALL\000"
 5153 01c4 00000000 		.space	4
 5154 01c8 6120622F 		.ascii	"a b/c\000"
 5154      6300
 5155 01ce 0000     		.space	2
 5156 01d0 01       		.byte	1
ARM GAS  /tmp/ccYL8bSL.s 			page 137


 5157 01d1 000000   		.space	3
 5158 01d4 03000000 		.word	3
 5159 01d8 05       		.byte	5
 5160 01d9 000000   		.space	3
 5161 01dc 02000000 		.word	2
 5162 01e0 46495800 		.ascii	"FIX\000"
 5163 01e4 00000000 		.space	4
 5164 01e8 642F6300 		.ascii	"d/c\000"
 5165 01ec 00000000 		.space	4
 5166 01f0 02       		.byte	2
 5167 01f1 000000   		.space	3
 5168 01f4 03000000 		.word	3
 5169 01f8 06       		.byte	6
 5170 01f9 000000   		.space	3
 5171 01fc 01000000 		.word	1
 5172 0200 53434900 		.ascii	"SCI\000"
 5173 0204 00000000 		.space	4
 5174 0208 482E4D53 		.ascii	"H.MS\000"
 5174      00
 5175 020d 000000   		.space	3
 5176 0210 03       		.byte	3
 5177 0211 000000   		.space	3
 5178 0214 03000000 		.word	3
 5179 0218 07       		.byte	7
 5180 0219 000000   		.space	3
 5181 021c 01000000 		.word	1
 5182 0220 454E4700 		.ascii	"ENG\000"
 5183 0224 00000000 		.space	4
 5184 0228 482E6400 		.ascii	"H.d\000"
 5185 022c 00000000 		.space	4
 5186 0230 2C       		.byte	44
 5187 0231 000000   		.space	3
 5188 0234 FFFFFFFF 		.word	-1
 5189 0238 26       		.byte	38
 5190 0239 000000   		.space	3
 5191 023c 03000000 		.word	3
 5192 0240 2D2D0D00 		.ascii	"--\015\000"
 5193 0244 00000000 		.space	4
 5194 0248 2E2F2C00 		.ascii	"./,\000"
 5195 024c 00000000 		.space	4
 5196 0250 2D       		.byte	45
 5197 0251 000000   		.space	3
 5198 0254 FFFFFFFF 		.word	-1
 5199 0258 2E       		.byte	46
 5200 0259 000000   		.space	3
 5201 025c FFFFFFFF 		.word	-1
 5202 0260 43505800 		.ascii	"CPX\000"
 5203 0264 00000000 		.space	4
 5204 0268 00       		.ascii	"\000"
 5205 0269 00000000 		.space	7
 5205      000000
 5206 0270 4D5F4261 		.ascii	"M_Base\000"
 5206      736500
 5207 0277 00000000 		.space	8
 5207      00000000 
 5208 027f 00       		.space	1
 5209 0280 0E       		.byte	14
ARM GAS  /tmp/ccYL8bSL.s 			page 138


 5210 0281 000000   		.space	3
 5211 0284 01000000 		.word	1
 5212 0288 0E       		.byte	14
 5213 0289 000000   		.space	3
 5214 028c 03000000 		.word	3
 5215 0290 42494E00 		.ascii	"BIN\000"
 5216 0294 00000000 		.space	4
 5217 0298 6E6F7400 		.ascii	"not\000"
 5218 029c 00000000 		.space	4
 5219 02a0 0E       		.byte	14
 5220 02a1 000000   		.space	3
 5221 02a4 02000000 		.word	2
 5222 02a8 13       		.byte	19
 5223 02a9 000000   		.space	3
 5224 02ac 03000000 		.word	3
 5225 02b0 4F435400 		.ascii	"OCT\000"
 5226 02b4 00000000 		.space	4
 5227 02b8 616E6400 		.ascii	"and\000"
 5228 02bc 00000000 		.space	4
 5229 02c0 0F       		.byte	15
 5230 02c1 000000   		.space	3
 5231 02c4 01000000 		.word	1
 5232 02c8 14       		.byte	20
 5233 02c9 000000   		.space	3
 5234 02cc 03000000 		.word	3
 5235 02d0 44454300 		.ascii	"DEC\000"
 5236 02d4 00000000 		.space	4
 5237 02d8 6F7200   		.ascii	"or\000"
 5238 02db 00000000 		.space	5
 5238      00
 5239 02e0 0F       		.byte	15
 5240 02e1 000000   		.space	3
 5241 02e4 02000000 		.word	2
 5242 02e8 15       		.byte	21
 5243 02e9 000000   		.space	3
 5244 02ec 03000000 		.word	3
 5245 02f0 48455800 		.ascii	"HEX\000"
 5246 02f4 00000000 		.space	4
 5247 02f8 786F7200 		.ascii	"xor\000"
 5248 02fc 00000000 		.space	4
 5249 0300 2C       		.byte	44
 5250 0301 000000   		.space	3
 5251 0304 FFFFFFFF 		.word	-1
 5252 0308 16       		.byte	22
 5253 0309 000000   		.space	3
 5254 030c 03000000 		.word	3
 5255 0310 2D2D0D00 		.ascii	"--\015\000"
 5256 0314 00000000 		.space	4
 5257 0318 524D4452 		.ascii	"RMDR\000"
 5257      00
 5258 031d 000000   		.space	3
 5259 0320 2D       		.byte	45
 5260 0321 000000   		.space	3
 5261 0324 FFFFFFFF 		.word	-1
 5262 0328 07       		.byte	7
 5263 0329 000000   		.space	3
 5264 032c 01000000 		.word	1
ARM GAS  /tmp/ccYL8bSL.s 			page 139


 5265 0330 43505800 		.ascii	"CPX\000"
 5266 0334 00000000 		.space	4
 5267 0338 482E6400 		.ascii	"H.d\000"
 5268 033c 00000000 		.space	4
 5269 0340 4D5F416E 		.ascii	"M_Angles\000"
 5269      676C6573 
 5269      00
 5270 0349 00000000 		.space	6
 5270      0000
 5271 034f 00       		.space	1
 5272 0350 06       		.byte	6
 5273 0351 000000   		.space	3
 5274 0354 02000000 		.word	2
 5275 0358 04       		.byte	4
 5276 0359 000000   		.space	3
 5277 035c 01000000 		.word	1
 5278 0360 44454700 		.ascii	"DEG\000"
 5279 0364 00000000 		.space	4
 5280 0368 500D5200 		.ascii	"P\015R\000"
 5281 036c 00000000 		.space	4
 5282 0370 07       		.byte	7
 5283 0371 000000   		.space	3
 5284 0374 02000000 		.word	2
 5285 0378 04       		.byte	4
 5286 0379 000000   		.space	3
 5287 037c 02000000 		.word	2
 5288 0380 52414400 		.ascii	"RAD\000"
 5289 0384 00000000 		.space	4
 5290 0388 520D5000 		.ascii	"R\015P\000"
 5291 038c 00000000 		.space	4
 5292 0390 08       		.byte	8
 5293 0391 000000   		.space	3
 5294 0394 02000000 		.word	2
 5295 0398 00       		.byte	0
 5296 0399 000000   		.space	3
 5297 039c 01000000 		.word	1
 5298 03a0 47524144 		.ascii	"GRAD\000"
 5298      00
 5299 03a5 000000   		.space	3
 5300 03a8 48595000 		.ascii	"HYP\000"
 5301 03ac 00000000 		.space	4
 5302 03b0 06       		.byte	6
 5303 03b1 000000   		.space	3
 5304 03b4 01000000 		.word	1
 5305 03b8 07       		.byte	7
 5306 03b9 000000   		.space	3
 5307 03bc 01000000 		.word	1
 5308 03c0 482E4D53 		.ascii	"H.MS\000"
 5308      00
 5309 03c5 000000   		.space	3
 5310 03c8 482E6400 		.ascii	"H.d\000"
 5311 03cc 00000000 		.space	4
 5312 03d0 2C       		.byte	44
 5313 03d1 000000   		.space	3
 5314 03d4 FFFFFFFF 		.word	-1
 5315 03d8 00       		.byte	0
 5316 03d9 000000   		.space	3
ARM GAS  /tmp/ccYL8bSL.s 			page 140


 5317 03dc 02000000 		.word	2
 5318 03e0 2D2D0D00 		.ascii	"--\015\000"
 5319 03e4 00000000 		.space	4
 5320 03e8 4859509D 		.ascii	"HYP\235\000"
 5320      00
 5321 03ed 000000   		.space	3
 5322 03f0 2D       		.byte	45
 5323 03f1 000000   		.space	3
 5324 03f4 FFFFFFFF 		.word	-1
 5325 03f8 2E       		.byte	46
 5326 03f9 000000   		.space	3
 5327 03fc FFFFFFFF 		.word	-1
 5328 0400 43505800 		.ascii	"CPX\000"
 5329 0404 00000000 		.space	4
 5330 0408 00       		.ascii	"\000"
 5331 0409 00000000 		.space	7
 5331      000000
 5332 0410 4D5F4D69 		.ascii	"M_Misc\000"
 5332      736300
 5333 0417 00000000 		.space	8
 5333      00000000 
 5334 041f 00       		.space	1
 5335 0420 25       		.byte	37
 5336 0421 000000   		.space	3
 5337 0424 01000000 		.word	1
 5338 0428 14       		.byte	20
 5339 0429 000000   		.space	3
 5340 042c 01000000 		.word	1
 5341 0430 7C587C00 		.ascii	"|X|\000"
 5342 0434 00000000 		.space	4
 5343 0438 329C00   		.ascii	"2\234\000"
 5344 043b 00000000 		.space	5
 5344      00
 5345 0440 25       		.byte	37
 5346 0441 000000   		.space	3
 5347 0444 02000000 		.word	2
 5348 0448 14       		.byte	20
 5349 0449 000000   		.space	3
 5350 044c 02000000 		.word	2
 5351 0450 524E4400 		.ascii	"RND\000"
 5352 0454 00000000 		.space	4
 5353 0458 4C6F67BA 		.ascii	"Log\272\000"
 5353      00
 5354 045d 000000   		.space	3
 5355 0460 26       		.byte	38
 5356 0461 000000   		.space	3
 5357 0464 01000000 		.word	1
 5358 0468 15       		.byte	21
 5359 0469 000000   		.space	3
 5360 046c 02000000 		.word	2
 5361 0470 49506172 		.ascii	"IPart\000"
 5361      7400
 5362 0476 0000     		.space	2
 5363 0478 4C6F678B 		.ascii	"Log\213\000"
 5363      00
 5364 047d 000000   		.space	3
 5365 0480 26       		.byte	38
ARM GAS  /tmp/ccYL8bSL.s 			page 141


 5366 0481 000000   		.space	3
 5367 0484 02000000 		.word	2
 5368 0488 16       		.byte	22
 5369 0489 000000   		.space	3
 5370 048c 02000000 		.word	2
 5371 0490 46506172 		.ascii	"FPart\000"
 5371      7400
 5372 0496 0000     		.space	2
 5373 0498 7C7C656C 		.ascii	"||el\000"
 5373      00
 5374 049d 000000   		.space	3
 5375 04a0 2C       		.byte	44
 5376 04a1 000000   		.space	3
 5377 04a4 FFFFFFFF 		.word	-1
 5378 04a8 22       		.byte	34
 5379 04a9 000000   		.space	3
 5380 04ac 02000000 		.word	2
 5381 04b0 2D2D0D00 		.ascii	"--\015\000"
 5382 04b4 00000000 		.space	4
 5383 04b8 832500   		.ascii	"\203%\000"
 5384 04bb 00000000 		.space	5
 5384      00
 5385 04c0 2D       		.byte	45
 5386 04c1 000000   		.space	3
 5387 04c4 FFFFFFFF 		.word	-1
 5388 04c8 2E       		.byte	46
 5389 04c9 000000   		.space	3
 5390 04cc FFFFFFFF 		.word	-1
 5391 04d0 43505800 		.ascii	"CPX\000"
 5392 04d4 00000000 		.space	4
 5393 04d8 00       		.ascii	"\000"
 5394 04d9 00000000 		.space	7
 5394      000000
 5395 04e0 4D5F5377 		.ascii	"M_Swap\000"
 5395      617000
 5396 04e7 00000000 		.space	8
 5396      00000000 
 5397 04ef 00       		.space	1
 5398 04f0 0D       		.byte	13
 5399 04f1 000000   		.space	3
 5400 04f4 01000000 		.word	1
 5401 04f8 34       		.byte	52
 5402 04f9 000000   		.space	3
 5403 04fc 00A60000 		.word	42496
 5404 0500 53686F77 		.ascii	"Show\016\000"
 5404      0E00
 5405 0506 0000     		.space	2
 5406 0508 5B175D00 		.ascii	"[\027]\000"
 5407 050c 00000000 		.space	4
 5408 0510 0D       		.byte	13
 5409 0511 000000   		.space	3
 5410 0514 02000000 		.word	2
 5411 0518 2E       		.byte	46
 5412 0519 000000   		.space	3
 5413 051c FFFFFFFF 		.word	-1
 5414 0520 53686F77 		.ascii	"Show\015\000"
 5414      0D00
ARM GAS  /tmp/ccYL8bSL.s 			page 142


 5415 0526 0000     		.space	2
 5416 0528 00       		.ascii	"\000"
 5417 0529 00000000 		.space	7
 5417      000000
 5418 0530 0D       		.byte	13
 5419 0531 000000   		.space	3
 5420 0534 03000000 		.word	3
 5421 0538 34       		.byte	52
 5422 0539 000000   		.space	3
 5423 053c 00330000 		.word	13056
 5424 0540 78173F00 		.ascii	"x\027?\000"
 5425 0544 00000000 		.space	4
 5426 0548 7A173F00 		.ascii	"z\027?\000"
 5427 054c 00000000 		.space	4
 5428 0550 34       		.byte	52
 5429 0551 000000   		.space	3
 5430 0554 00320000 		.word	12800
 5431 0558 34       		.byte	52
 5432 0559 000000   		.space	3
 5433 055c 00340000 		.word	13312
 5434 0560 79173F00 		.ascii	"y\027?\000"
 5435 0564 00000000 		.space	4
 5436 0568 74173F00 		.ascii	"t\027?\000"
 5437 056c 00000000 		.space	4
 5438 0570 2C       		.byte	44
 5439 0571 000000   		.space	3
 5440 0574 FFFFFFFF 		.word	-1
 5441 0578 2E       		.byte	46
 5442 0579 000000   		.space	3
 5443 057c FFFFFFFF 		.word	-1
 5444 0580 2D2D0D00 		.ascii	"--\015\000"
 5445 0584 00000000 		.space	4
 5446 0588 00       		.ascii	"\000"
 5447 0589 00000000 		.space	7
 5447      000000
 5448 0590 2D       		.byte	45
 5449 0591 000000   		.space	3
 5450 0594 FFFFFFFF 		.word	-1
 5451 0598 2E       		.byte	46
 5452 0599 000000   		.space	3
 5453 059c FFFFFFFF 		.word	-1
 5454 05a0 43505800 		.ascii	"CPX\000"
 5455 05a4 00000000 		.space	4
 5456 05a8 00       		.ascii	"\000"
 5457 05a9 00000000 		.space	7
 5457      000000
 5458 05b0 4D5F5072 		.ascii	"M_Program\000"
 5458      6F677261 
 5458      6D00
 5459 05ba 00000000 		.space	5
 5459      00
 5460 05bf 00       		.space	1
 5461 05c0 27       		.byte	39
 5462 05c1 000000   		.space	3
 5463 05c4 01000000 		.word	1
 5464 05c8 28       		.byte	40
 5465 05c9 000000   		.space	3
ARM GAS  /tmp/ccYL8bSL.s 			page 143


 5466 05cc 01000000 		.word	1
 5467 05d0 4C424C00 		.ascii	"LBL\000"
 5468 05d4 00000000 		.space	4
 5469 05d8 44534500 		.ascii	"DSE\000"
 5470 05dc 00000000 		.space	4
 5471 05e0 27       		.byte	39
 5472 05e1 000000   		.space	3
 5473 05e4 02000000 		.word	2
 5474 05e8 28       		.byte	40
 5475 05e9 000000   		.space	3
 5476 05ec 02000000 		.word	2
 5477 05f0 52544E00 		.ascii	"RTN\000"
 5478 05f4 00000000 		.space	4
 5479 05f8 49534700 		.ascii	"ISG\000"
 5480 05fc 00000000 		.space	4
 5481 0600 25       		.byte	37
 5482 0601 000000   		.space	3
 5483 0604 03000000 		.word	3
 5484 0608 34       		.byte	52
 5485 0609 000000   		.space	3
 5486 060c 00600000 		.word	24576
 5487 0610 50617573 		.ascii	"Pause\000"
 5487      6500
 5488 0616 0000     		.space	2
 5489 0618 44454300 		.ascii	"DEC\000"
 5490 061c 00000000 		.space	4
 5491 0620 12       		.byte	18
 5492 0621 000000   		.space	3
 5493 0624 03000000 		.word	3
 5494 0628 34       		.byte	52
 5495 0629 000000   		.space	3
 5496 062c 00610000 		.word	24832
 5497 0630 47544F00 		.ascii	"GTO\000"
 5498 0634 00000000 		.space	4
 5499 0638 494E4300 		.ascii	"INC\000"
 5500 063c 00000000 		.space	4
 5501 0640 2C       		.byte	44
 5502 0641 000000   		.space	3
 5503 0644 FFFFFFFF 		.word	-1
 5504 0648 34       		.byte	52
 5505 0649 000000   		.space	3
 5506 064c 00570000 		.word	22272
 5507 0650 2D2D0D00 		.ascii	"--\015\000"
 5508 0654 00000000 		.space	4
 5509 0658 4241434B 		.ascii	"BACK\000"
 5509      00
 5510 065d 000000   		.space	3
 5511 0660 2D       		.byte	45
 5512 0661 000000   		.space	3
 5513 0664 FFFFFFFF 		.word	-1
 5514 0668 34       		.byte	52
 5515 0669 000000   		.space	3
 5516 066c 00560000 		.word	22016
 5517 0670 43505800 		.ascii	"CPX\000"
 5518 0674 00000000 		.space	4
 5519 0678 534B4950 		.ascii	"SKIP\000"
 5519      00
ARM GAS  /tmp/ccYL8bSL.s 			page 144


 5520 067d 000000   		.space	3
 5521 0680 4D5F5365 		.ascii	"M_Setup1\000"
 5521      74757031 
 5521      00
 5522 0689 00000000 		.space	6
 5522      0000
 5523 068f 00       		.space	1
 5524 0690 32       		.byte	50
 5525 0691 000000   		.space	3
 5526 0694 00000000 		.word	0
 5527 0698 30       		.byte	48
 5528 0699 000000   		.space	3
 5529 069c 00000000 		.word	0
 5530 06a0 45584954 		.ascii	"EXIT\000"
 5530      00
 5531 06a5 000000   		.space	3
 5532 06a8 53797374 		.ascii	"System\000"
 5532      656D00
 5533 06af 00       		.space	1
 5534 06b0 31       		.byte	49
 5535 06b1 000000   		.space	3
 5536 06b4 09000000 		.word	9
 5537 06b8 2E       		.byte	46
 5538 06b9 000000   		.space	3
 5539 06bc FFFFFFFF 		.word	-1
 5540 06c0 48454C50 		.ascii	"HELP\000"
 5540      00
 5541 06c5 000000   		.space	3
 5542 06c8 00       		.ascii	"\000"
 5543 06c9 00000000 		.space	7
 5543      000000
 5544 06d0 31       		.byte	49
 5545 06d1 000000   		.space	3
 5546 06d4 02000000 		.word	2
 5547 06d8 31       		.byte	49
 5548 06d9 000000   		.space	3
 5549 06dc 06000000 		.word	6
 5550 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5550      4F00
 5551 06e6 0000     		.space	2
 5552 06e8 53765241 		.ascii	"SvRAM\000"
 5552      4D00
 5553 06ee 0000     		.space	2
 5554 06f0 31       		.byte	49
 5555 06f1 000000   		.space	3
 5556 06f4 03000000 		.word	3
 5557 06f8 31       		.byte	49
 5558 06f9 000000   		.space	3
 5559 06fc 07000000 		.word	7
 5560 0700 4F6E5243 		.ascii	"OnRCL\000"
 5560      4C00
 5561 0706 0000     		.space	2
 5562 0708 4C645241 		.ascii	"LdRAM\000"
 5562      4D00
 5563 070e 0000     		.space	2
 5564 0710 2C       		.byte	44
 5565 0711 000000   		.space	3
ARM GAS  /tmp/ccYL8bSL.s 			page 145


 5566 0714 FFFFFFFF 		.word	-1
 5567 0718 2E       		.byte	46
 5568 0719 000000   		.space	3
 5569 071c FFFFFFFF 		.word	-1
 5570 0720 2D2D0D00 		.ascii	"--\015\000"
 5571 0724 00000000 		.space	4
 5572 0728 00       		.ascii	"\000"
 5573 0729 00000000 		.space	7
 5573      000000
 5574 0730 2D       		.byte	45
 5575 0731 000000   		.space	3
 5576 0734 FFFFFFFF 		.word	-1
 5577 0738 2E       		.byte	46
 5578 0739 000000   		.space	3
 5579 073c FFFFFFFF 		.word	-1
 5580 0740 43505800 		.ascii	"CPX\000"
 5581 0744 00000000 		.space	4
 5582 0748 00       		.ascii	"\000"
 5583 0749 00000000 		.space	7
 5583      000000
 5584 0750 4D5F4172 		.ascii	"M_Arrow\000"
 5584      726F7700 
 5585 0758 00000000 		.space	7
 5585      000000
 5586 075f 00       		.space	1
 5587 0760 0E       		.byte	14
 5588 0761 000000   		.space	3
 5589 0764 01000000 		.word	1
 5590 0768 06       		.byte	6
 5591 0769 000000   		.space	3
 5592 076c 02000000 		.word	2
 5593 0770 0D42696E 		.ascii	"\015Bin\000"
 5593      00
 5594 0775 000000   		.space	3
 5595 0778 0D444547 		.ascii	"\015DEG\000"
 5595      00
 5596 077d 000000   		.space	3
 5597 0780 0E       		.byte	14
 5598 0781 000000   		.space	3
 5599 0784 02000000 		.word	2
 5600 0788 07       		.byte	7
 5601 0789 000000   		.space	3
 5602 078c 02000000 		.word	2
 5603 0790 0D4F6374 		.ascii	"\015Oct\000"
 5603      00
 5604 0795 000000   		.space	3
 5605 0798 0D524144 		.ascii	"\015RAD\000"
 5605      00
 5606 079d 000000   		.space	3
 5607 07a0 0F       		.byte	15
 5608 07a1 000000   		.space	3
 5609 07a4 01000000 		.word	1
 5610 07a8 08       		.byte	8
 5611 07a9 000000   		.space	3
 5612 07ac 02000000 		.word	2
 5613 07b0 0D446563 		.ascii	"\015Dec\000"
 5613      00
ARM GAS  /tmp/ccYL8bSL.s 			page 146


 5614 07b5 000000   		.space	3
 5615 07b8 0D477261 		.ascii	"\015Grad\000"
 5615      6400
 5616 07be 0000     		.space	2
 5617 07c0 0F       		.byte	15
 5618 07c1 000000   		.space	3
 5619 07c4 02000000 		.word	2
 5620 07c8 06       		.byte	6
 5621 07c9 000000   		.space	3
 5622 07cc 01000000 		.word	1
 5623 07d0 0D486578 		.ascii	"\015Hex\000"
 5623      00
 5624 07d5 000000   		.space	3
 5625 07d8 0D484D53 		.ascii	"\015HMS\000"
 5625      00
 5626 07dd 000000   		.space	3
 5627 07e0 2C       		.byte	44
 5628 07e1 000000   		.space	3
 5629 07e4 FFFFFFFF 		.word	-1
 5630 07e8 07       		.byte	7
 5631 07e9 000000   		.space	3
 5632 07ec 01000000 		.word	1
 5633 07f0 2D2D0D00 		.ascii	"--\015\000"
 5634 07f4 00000000 		.space	4
 5635 07f8 484D530D 		.ascii	"HMS\015\000"
 5635      00
 5636 07fd 000000   		.space	3
 5637 0800 2D       		.byte	45
 5638 0801 000000   		.space	3
 5639 0804 FFFFFFFF 		.word	-1
 5640 0808 2E       		.byte	46
 5641 0809 000000   		.space	3
 5642 080c FFFFFFFF 		.word	-1
 5643 0810 43505800 		.ascii	"CPX\000"
 5644 0814 00000000 		.space	4
 5645 0818 00       		.ascii	"\000"
 5646 0819 00000000 		.space	7
 5646      000000
 5647 0820 4D5F466C 		.ascii	"M_Flags\000"
 5647      61677300 
 5648 0828 00000000 		.space	7
 5648      000000
 5649 082f 00       		.space	1
 5650 0830 1E       		.byte	30
 5651 0831 000000   		.space	3
 5652 0834 01000000 		.word	1
 5653 0838 34       		.byte	52
 5654 0839 000000   		.space	3
 5655 083c 00740000 		.word	29696
 5656 0840 53465F00 		.ascii	"SF_\000"
 5657 0844 00000000 		.space	4
 5658 0848 46533F00 		.ascii	"FS?\000"
 5659 084c 00000000 		.space	4
 5660 0850 1E       		.byte	30
 5661 0851 000000   		.space	3
 5662 0854 02000000 		.word	2
 5663 0858 34       		.byte	52
ARM GAS  /tmp/ccYL8bSL.s 			page 147


 5664 0859 000000   		.space	3
 5665 085c 00750000 		.word	29952
 5666 0860 43465F00 		.ascii	"CF_\000"
 5667 0864 00000000 		.space	4
 5668 0868 46433F00 		.ascii	"FC?\000"
 5669 086c 00000000 		.space	4
 5670 0870 1F       		.byte	31
 5671 0871 000000   		.space	3
 5672 0874 01000000 		.word	1
 5673 0878 34       		.byte	52
 5674 0879 000000   		.space	3
 5675 087c 00500000 		.word	20480
 5676 0880 783D3F00 		.ascii	"x=?\000"
 5677 0884 00000000 		.space	4
 5678 0888 783C3F00 		.ascii	"x<?\000"
 5679 088c 00000000 		.space	4
 5680 0890 1F       		.byte	31
 5681 0891 000000   		.space	3
 5682 0894 02000000 		.word	2
 5683 0898 34       		.byte	52
 5684 0899 000000   		.space	3
 5685 089c 00510000 		.word	20736
 5686 08a0 780B3F00 		.ascii	"x\013?\000"
 5687 08a4 00000000 		.space	4
 5688 08a8 783C3D3F 		.ascii	"x<=?\000"
 5688      00
 5689 08ad 000000   		.space	3
 5690 08b0 2C       		.byte	44
 5691 08b1 000000   		.space	3
 5692 08b4 FFFFFFFF 		.word	-1
 5693 08b8 34       		.byte	52
 5694 08b9 000000   		.space	3
 5695 08bc 00530000 		.word	21248
 5696 08c0 2D2D0D00 		.ascii	"--\015\000"
 5697 08c4 00000000 		.space	4
 5698 08c8 783E3D3F 		.ascii	"x>=?\000"
 5698      00
 5699 08cd 000000   		.space	3
 5700 08d0 2D       		.byte	45
 5701 08d1 000000   		.space	3
 5702 08d4 FFFFFFFF 		.word	-1
 5703 08d8 34       		.byte	52
 5704 08d9 000000   		.space	3
 5705 08dc 00520000 		.word	20992
 5706 08e0 43505800 		.ascii	"CPX\000"
 5707 08e4 00000000 		.space	4
 5708 08e8 783E3F00 		.ascii	"x>?\000"
 5709 08ec 00000000 		.space	4
 5710 08f0 4D5F5072 		.ascii	"M_Prob\000"
 5710      6F6200
 5711 08f7 00000000 		.space	8
 5711      00000000 
 5712 08ff 00       		.space	1
 5713 0900 18       		.byte	24
 5714 0901 000000   		.space	3
 5715 0904 03000000 		.word	3
 5716 0908 34       		.byte	52
ARM GAS  /tmp/ccYL8bSL.s 			page 148


 5717 0909 000000   		.space	3
 5718 090c 31020000 		.word	561
 5719 0910 46616374 		.ascii	"Fact!\000"
 5719      2100
 5720 0916 0000     		.space	2
 5721 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5721      00
 5722 091d 000000   		.space	3
 5723 0920 18       		.byte	24
 5724 0921 000000   		.space	3
 5725 0924 01000000 		.word	1
 5726 0928 19       		.byte	25
 5727 0929 000000   		.space	3
 5728 092c 01000000 		.word	1
 5729 0930 43792C78 		.ascii	"Cy,x\000"
 5729      00
 5730 0935 000000   		.space	3
 5731 0938 9400     		.ascii	"\224\000"
 5732 093a 00000000 		.space	6
 5732      0000
 5733 0940 18       		.byte	24
 5734 0941 000000   		.space	3
 5735 0944 02000000 		.word	2
 5736 0948 19       		.byte	25
 5737 0949 000000   		.space	3
 5738 094c 02000000 		.word	2
 5739 0950 50792C78 		.ascii	"Py,x\000"
 5739      00
 5740 0955 000000   		.space	3
 5741 0958 949D00   		.ascii	"\224\235\000"
 5742 095b 00000000 		.space	5
 5742      00
 5743 0960 08       		.byte	8
 5744 0961 000000   		.space	3
 5745 0964 01000000 		.word	1
 5746 0968 34       		.byte	52
 5747 0969 000000   		.space	3
 5748 096c 34010000 		.word	308
 5749 0970 52414E23 		.ascii	"RAN#\000"
 5749      00
 5750 0975 000000   		.space	3
 5751 0978 53454544 		.ascii	"SEED\000"
 5751      00
 5752 097d 000000   		.space	3
 5753 0980 2C       		.byte	44
 5754 0981 000000   		.space	3
 5755 0984 FFFFFFFF 		.word	-1
 5756 0988 2E       		.byte	46
 5757 0989 000000   		.space	3
 5758 098c FFFFFFFF 		.word	-1
 5759 0990 2D2D0D00 		.ascii	"--\015\000"
 5760 0994 00000000 		.space	4
 5761 0998 00       		.ascii	"\000"
 5762 0999 00000000 		.space	7
 5762      000000
 5763 09a0 2D       		.byte	45
 5764 09a1 000000   		.space	3
ARM GAS  /tmp/ccYL8bSL.s 			page 149


 5765 09a4 FFFFFFFF 		.word	-1
 5766 09a8 2E       		.byte	46
 5767 09a9 000000   		.space	3
 5768 09ac FFFFFFFF 		.word	-1
 5769 09b0 43505800 		.ascii	"CPX\000"
 5770 09b4 00000000 		.space	4
 5771 09b8 00       		.ascii	"\000"
 5772 09b9 00000000 		.space	7
 5772      000000
 5773 09c0 4D5F5374 		.ascii	"M_Stats\000"
 5773      61747300 
 5774 09c8 00000000 		.space	7
 5774      000000
 5775 09cf 00       		.space	1
 5776 09d0 1A       		.byte	26
 5777 09d1 000000   		.space	3
 5778 09d4 01000000 		.word	1
 5779 09d8 1A       		.byte	26
 5780 09d9 000000   		.space	3
 5781 09dc 02000000 		.word	2
 5782 09e0 0100     		.ascii	"\001\000"
 5783 09e2 00000000 		.space	6
 5783      0000
 5784 09e8 532E442E 		.ascii	"S.D.\000"
 5784      00
 5785 09ed 000000   		.space	3
 5786 09f0 1B       		.byte	27
 5787 09f1 000000   		.space	3
 5788 09f4 01000000 		.word	1
 5789 09f8 34       		.byte	52
 5790 09f9 000000   		.space	3
 5791 09fc 74020000 		.word	628
 5792 0a00 792D6861 		.ascii	"y-hat\000"
 5792      7400
 5793 0a06 0000     		.space	2
 5794 0a08 782D6861 		.ascii	"x-hat\000"
 5794      7400
 5795 0a0e 0000     		.space	2
 5796 0a10 34       		.byte	52
 5797 0a11 000000   		.space	3
 5798 0a14 27010000 		.word	295
 5799 0a18 34       		.byte	52
 5800 0a19 000000   		.space	3
 5801 0a1c 28010000 		.word	296
 5802 0a20 434F5252 		.ascii	"CORR\000"
 5802      00
 5803 0a25 000000   		.space	3
 5804 0a28 4C2E522E 		.ascii	"L.R.\000"
 5804      00
 5805 0a2d 000000   		.space	3
 5806 0a30 34       		.byte	52
 5807 0a31 000000   		.space	3
 5808 0a34 32010000 		.word	306
 5809 0a38 34       		.byte	52
 5810 0a39 000000   		.space	3
 5811 0a3c 31010000 		.word	305
 5812 0a40 42657374 		.ascii	"BestF\000"
ARM GAS  /tmp/ccYL8bSL.s 			page 150


 5812      4600
 5813 0a46 0000     		.space	2
 5814 0a48 4C6F6746 		.ascii	"LogFit\000"
 5814      697400
 5815 0a4f 00       		.space	1
 5816 0a50 34       		.byte	52
 5817 0a51 000000   		.space	3
 5818 0a54 2E010000 		.word	302
 5819 0a58 34       		.byte	52
 5820 0a59 000000   		.space	3
 5821 0a5c 2F010000 		.word	303
 5822 0a60 4C696E65 		.ascii	"Linear\000"
 5822      617200
 5823 0a67 00       		.space	1
 5824 0a68 45787046 		.ascii	"ExpFit\000"
 5824      697400
 5825 0a6f 00       		.space	1
 5826 0a70 2D       		.byte	45
 5827 0a71 000000   		.space	3
 5828 0a74 FFFFFFFF 		.word	-1
 5829 0a78 34       		.byte	52
 5830 0a79 000000   		.space	3
 5831 0a7c 30010000 		.word	304
 5832 0a80 43505800 		.ascii	"CPX\000"
 5833 0a84 00000000 		.space	4
 5834 0a88 50777246 		.ascii	"PwrFit\000"
 5834      697400
 5835 0a8f 00       		.space	1
 5836 0a90 4D5F5365 		.ascii	"M_Setup2\000"
 5836      74757032 
 5836      00
 5837 0a99 00000000 		.space	6
 5837      0000
 5838 0a9f 00       		.space	1
 5839 0aa0 31       		.byte	49
 5840 0aa1 000000   		.space	3
 5841 0aa4 04000000 		.word	4
 5842 0aa8 2E       		.byte	46
 5843 0aa9 000000   		.space	3
 5844 0aac FFFFFFFF 		.word	-1
 5845 0ab0 53764C49 		.ascii	"SvLIB\000"
 5845      4200
 5846 0ab6 0000     		.space	2
 5847 0ab8 00       		.ascii	"\000"
 5848 0ab9 00000000 		.space	7
 5848      000000
 5849 0ac0 31       		.byte	49
 5850 0ac1 000000   		.space	3
 5851 0ac4 05000000 		.word	5
 5852 0ac8 2E       		.byte	46
 5853 0ac9 000000   		.space	3
 5854 0acc FFFFFFFF 		.word	-1
 5855 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5855      4200
 5856 0ad6 0000     		.space	2
 5857 0ad8 00       		.ascii	"\000"
 5858 0ad9 00000000 		.space	7
ARM GAS  /tmp/ccYL8bSL.s 			page 151


 5858      000000
 5859 0ae0 31       		.byte	49
 5860 0ae1 000000   		.space	3
 5861 0ae4 0A000000 		.word	10
 5862 0ae8 34       		.byte	52
 5863 0ae9 000000   		.space	3
 5864 0aec B2010000 		.word	434
 5865 0af0 53764350 		.ascii	"SvCPRG\000"
 5865      524700
 5866 0af7 00       		.space	1
 5867 0af8 5053544F 		.ascii	"PSTO\000"
 5867      00
 5868 0afd 000000   		.space	3
 5869 0b00 31       		.byte	49
 5870 0b01 000000   		.space	3
 5871 0b04 08000000 		.word	8
 5872 0b08 34       		.byte	52
 5873 0b09 000000   		.space	3
 5874 0b0c B1010000 		.word	433
 5875 0b10 4C645052 		.ascii	"LdPRG\000"
 5875      4700
 5876 0b16 0000     		.space	2
 5877 0b18 5052434C 		.ascii	"PRCL\000"
 5877      00
 5878 0b1d 000000   		.space	3
 5879 0b20 2C       		.byte	44
 5880 0b21 000000   		.space	3
 5881 0b24 FFFFFFFF 		.word	-1
 5882 0b28 2E       		.byte	46
 5883 0b29 000000   		.space	3
 5884 0b2c FFFFFFFF 		.word	-1
 5885 0b30 2D2D0D00 		.ascii	"--\015\000"
 5886 0b34 00000000 		.space	4
 5887 0b38 00       		.ascii	"\000"
 5888 0b39 00000000 		.space	7
 5888      000000
 5889 0b40 2D       		.byte	45
 5890 0b41 000000   		.space	3
 5891 0b44 FFFFFFFF 		.word	-1
 5892 0b48 2E       		.byte	46
 5893 0b49 000000   		.space	3
 5894 0b4c FFFFFFFF 		.word	-1
 5895 0b50 43505800 		.ascii	"CPX\000"
 5896 0b54 00000000 		.space	4
 5897 0b58 00       		.ascii	"\000"
 5898 0b59 00000000 		.space	7
 5898      000000
 5899 0b60 4D5F536F 		.ascii	"M_Solve\000"
 5899      6C766500 
 5900 0b68 00000000 		.space	7
 5900      000000
 5901 0b6f 00       		.space	1
 5902 0b70 20       		.byte	32
 5903 0b71 000000   		.space	3
 5904 0b74 01000000 		.word	1
 5905 0b78 34       		.byte	52
 5906 0b79 000000   		.space	3
ARM GAS  /tmp/ccYL8bSL.s 			page 152


 5907 0b7c 00690000 		.word	26880
 5908 0b80 534C5600 		.ascii	"SLV\000"
 5909 0b84 00000000 		.space	4
 5910 0b88 66272878 		.ascii	"f'(x)\000"
 5910      2900
 5911 0b8e 0000     		.space	2
 5912 0b90 20       		.byte	32
 5913 0b91 000000   		.space	3
 5914 0b94 02000000 		.word	2
 5915 0b98 34       		.byte	52
 5916 0b99 000000   		.space	3
 5917 0b9c 006A0000 		.word	27136
 5918 0ba0 04206478 		.ascii	"\004 dx\000"
 5918      00
 5919 0ba5 000000   		.space	3
 5920 0ba8 66272728 		.ascii	"f''(x)\000"
 5920      782900
 5921 0baf 00       		.space	1
 5922 0bb0 21       		.byte	33
 5923 0bb1 000000   		.space	3
 5924 0bb4 02000000 		.word	2
 5925 0bb8 2E       		.byte	46
 5926 0bb9 000000   		.space	3
 5927 0bbc FFFFFFFF 		.word	-1
 5928 0bc0 53554D00 		.ascii	"SUM\000"
 5929 0bc4 00000000 		.space	4
 5930 0bc8 00       		.ascii	"\000"
 5931 0bc9 00000000 		.space	7
 5931      000000
 5932 0bd0 21       		.byte	33
 5933 0bd1 000000   		.space	3
 5934 0bd4 01000000 		.word	1
 5935 0bd8 2E       		.byte	46
 5936 0bd9 000000   		.space	3
 5937 0bdc FFFFFFFF 		.word	-1
 5938 0be0 50524F44 		.ascii	"PROD\000"
 5938      00
 5939 0be5 000000   		.space	3
 5940 0be8 00       		.ascii	"\000"
 5941 0be9 00000000 		.space	7
 5941      000000
 5942 0bf0 2C       		.byte	44
 5943 0bf1 000000   		.space	3
 5944 0bf4 FFFFFFFF 		.word	-1
 5945 0bf8 2E       		.byte	46
 5946 0bf9 000000   		.space	3
 5947 0bfc FFFFFFFF 		.word	-1
 5948 0c00 2D2D0D00 		.ascii	"--\015\000"
 5949 0c04 00000000 		.space	4
 5950 0c08 00       		.ascii	"\000"
 5951 0c09 00000000 		.space	7
 5951      000000
 5952 0c10 2D       		.byte	45
 5953 0c11 000000   		.space	3
 5954 0c14 FFFFFFFF 		.word	-1
 5955 0c18 2E       		.byte	46
 5956 0c19 000000   		.space	3
ARM GAS  /tmp/ccYL8bSL.s 			page 153


 5957 0c1c FFFFFFFF 		.word	-1
 5958 0c20 43505800 		.ascii	"CPX\000"
 5959 0c24 00000000 		.space	4
 5960 0c28 00       		.ascii	"\000"
 5961 0c29 00000000 		.space	7
 5961      000000
 5962 0c30 4D5F426C 		.ascii	"M_Blank2\000"
 5962      616E6B32 
 5962      00
 5963 0c39 00000000 		.space	6
 5963      0000
 5964 0c3f 00       		.space	1
 5965 0c40 28       		.byte	40
 5966 0c41 000000   		.space	3
 5967 0c44 03000000 		.word	3
 5968 0c48 2E       		.byte	46
 5969 0c49 000000   		.space	3
 5970 0c4c FFFFFFFF 		.word	-1
 5971 0c50 912B00   		.ascii	"\221+\000"
 5972 0c53 00000000 		.space	5
 5972      00
 5973 0c58 00       		.ascii	"\000"
 5974 0c59 00000000 		.space	7
 5974      000000
 5975 0c60 16       		.byte	22
 5976 0c61 000000   		.space	3
 5977 0c64 01000000 		.word	1
 5978 0c68 2E       		.byte	46
 5979 0c69 000000   		.space	3
 5980 0c6c FFFFFFFF 		.word	-1
 5981 0c70 312F5800 		.ascii	"1/X\000"
 5982 0c74 00000000 		.space	4
 5983 0c78 00       		.ascii	"\000"
 5984 0c79 00000000 		.space	7
 5984      000000
 5985 0c80 1C       		.byte	28
 5986 0c81 000000   		.space	3
 5987 0c84 01000000 		.word	1
 5988 0c88 2E       		.byte	46
 5989 0c89 000000   		.space	3
 5990 0c8c FFFFFFFF 		.word	-1
 5991 0c90 035800   		.ascii	"\003X\000"
 5992 0c93 00000000 		.space	5
 5992      00
 5993 0c98 00       		.ascii	"\000"
 5994 0c99 00000000 		.space	7
 5994      000000
 5995 0ca0 13       		.byte	19
 5996 0ca1 000000   		.space	3
 5997 0ca4 02000000 		.word	2
 5998 0ca8 2E       		.byte	46
 5999 0ca9 000000   		.space	3
 6000 0cac FFFFFFFF 		.word	-1
 6001 0cb0 4C4F4700 		.ascii	"LOG\000"
 6002 0cb4 00000000 		.space	4
 6003 0cb8 00       		.ascii	"\000"
 6004 0cb9 00000000 		.space	7
ARM GAS  /tmp/ccYL8bSL.s 			page 154


 6004      000000
 6005 0cc0 2C       		.byte	44
 6006 0cc1 000000   		.space	3
 6007 0cc4 FFFFFFFF 		.word	-1
 6008 0cc8 2E       		.byte	46
 6009 0cc9 000000   		.space	3
 6010 0ccc FFFFFFFF 		.word	-1
 6011 0cd0 2D2D0D00 		.ascii	"--\015\000"
 6012 0cd4 00000000 		.space	4
 6013 0cd8 00       		.ascii	"\000"
 6014 0cd9 00000000 		.space	7
 6014      000000
 6015 0ce0 2D       		.byte	45
 6016 0ce1 000000   		.space	3
 6017 0ce4 FFFFFFFF 		.word	-1
 6018 0ce8 2E       		.byte	46
 6019 0ce9 000000   		.space	3
 6020 0cec FFFFFFFF 		.word	-1
 6021 0cf0 43505800 		.ascii	"CPX\000"
 6022 0cf4 00000000 		.space	4
 6023 0cf8 00       		.ascii	"\000"
 6024 0cf9 00000000 		.space	7
 6024      000000
 6025 0d00 4D5F416C 		.ascii	"M_Alpha\000"
 6025      70686100 
 6026 0d08 00000000 		.space	7
 6026      000000
 6027 0d0f 00       		.space	1
 6028 0d10 34       		.byte	52
 6029 0d11 000000   		.space	3
 6030 0d14 78010000 		.word	376
 6031 0d18 34       		.byte	52
 6032 0d19 000000   		.space	3
 6033 0d1c 6D010000 		.word	365
 6034 0d20 582D3EA0 		.ascii	"X->\240\000"
 6034      00
 6035 0d25 000000   		.space	3
 6036 0d28 A054494D 		.ascii	"\240TIME\000"
 6036      4500
 6037 0d2e 0000     		.space	2
 6038 0d30 34       		.byte	52
 6039 0d31 000000   		.space	3
 6040 0d34 77010000 		.word	375
 6041 0d38 34       		.byte	52
 6042 0d39 000000   		.space	3
 6043 0d3c 6C010000 		.word	364
 6044 0d40 A02D3E58 		.ascii	"\240->X\000"
 6044      00
 6045 0d45 000000   		.space	3
 6046 0d48 A0444154 		.ascii	"\240DATE\000"
 6046      4500
 6047 0d4e 0000     		.space	2
 6048 0d50 34       		.byte	52
 6049 0d51 000000   		.space	3
 6050 0d54 00480000 		.word	18432
 6051 0d58 34       		.byte	52
 6052 0d59 000000   		.space	3
ARM GAS  /tmp/ccYL8bSL.s 			page 155


 6053 0d5c 6A010000 		.word	362
 6054 0d60 A0495000 		.ascii	"\240IP\000"
 6055 0d64 00000000 		.space	4
 6056 0d68 A0444159 		.ascii	"\240DAY\000"
 6056      00
 6057 0d6d 000000   		.space	3
 6058 0d70 34       		.byte	52
 6059 0d71 000000   		.space	3
 6060 0d74 76010000 		.word	374
 6061 0d78 34       		.byte	52
 6062 0d79 000000   		.space	3
 6063 0d7c 6B010000 		.word	363
 6064 0d80 A04C454E 		.ascii	"\240LENG\000"
 6064      4700
 6065 0d86 0000     		.space	2
 6066 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 6066      4800
 6067 0d8e 0000     		.space	2
 6068 0d90 2C       		.byte	44
 6069 0d91 000000   		.space	3
 6070 0d94 FFFFFFFF 		.word	-1
 6071 0d98 2C       		.byte	44
 6072 0d99 000000   		.space	3
 6073 0d9c 01000000 		.word	1
 6074 0da0 2D2D0D00 		.ascii	"--\015\000"
 6075 0da4 00000000 		.space	4
 6076 0da8 00       		.ascii	"\000"
 6077 0da9 00000000 		.space	7
 6077      000000
 6078 0db0 2D       		.byte	45
 6079 0db1 000000   		.space	3
 6080 0db4 FFFFFFFF 		.word	-1
 6081 0db8 2D       		.byte	45
 6082 0db9 000000   		.space	3
 6083 0dbc 01000000 		.word	1
 6084 0dc0 43505800 		.ascii	"CPX\000"
 6085 0dc4 00000000 		.space	4
 6086 0dc8 00       		.ascii	"\000"
 6087 0dc9 00000000 		.space	7
 6087      000000
 6088 0dd0 4D5F435F 		.ascii	"M_C_Lock\000"
 6088      4C6F636B 
 6088      00
 6089 0dd9 00000000 		.space	6
 6089      0000
 6090 0ddf 00       		.space	1
 6091 0de0 18       		.byte	24
 6092 0de1 000000   		.space	3
 6093 0de4 02000000 		.word	2
 6094 0de8 04       		.byte	4
 6095 0de9 000000   		.space	3
 6096 0dec 02000000 		.word	2
 6097 0df0 504F4C41 		.ascii	"POLAR\000"
 6097      5200
 6098 0df6 0000     		.space	2
 6099 0df8 0D205000 		.ascii	"\015 P\000"
 6100 0dfc 00000000 		.space	4
ARM GAS  /tmp/ccYL8bSL.s 			page 156


 6101 0e00 18       		.byte	24
 6102 0e01 000000   		.space	3
 6103 0e04 01000000 		.word	1
 6104 0e08 04       		.byte	4
 6105 0e09 000000   		.space	3
 6106 0e0c 01000000 		.word	1
 6107 0e10 52454354 		.ascii	"RECT\000"
 6107      00
 6108 0e15 000000   		.space	3
 6109 0e18 0D205200 		.ascii	"\015 R\000"
 6110 0e1c 00000000 		.space	4
 6111 0e20 0E       		.byte	14
 6112 0e21 000000   		.space	3
 6113 0e24 01000000 		.word	1
 6114 0e28 0E       		.byte	14
 6115 0e29 000000   		.space	3
 6116 0e2c 03000000 		.word	3
 6117 0e30 2B2F2D06 		.ascii	"+/-\006Im\000"
 6117      496D00
 6118 0e37 00       		.space	1
 6119 0e38 2B2F2D06 		.ascii	"+/-\006Re\000"
 6119      526500
 6120 0e3f 00       		.space	1
 6121 0e40 0D       		.byte	13
 6122 0e41 000000   		.space	3
 6123 0e44 02000000 		.word	2
 6124 0e48 00       		.byte	0
 6125 0e49 000000   		.space	3
 6126 0e4c 01000000 		.word	1
 6127 0e50 52651749 		.ascii	"Re\027Im\000"
 6127      6D00
 6128 0e56 0000     		.space	2
 6129 0e58 48595000 		.ascii	"HYP\000"
 6130 0e5c 00000000 		.space	4
 6131 0e60 2C       		.byte	44
 6132 0e61 000000   		.space	3
 6133 0e64 FFFFFFFF 		.word	-1
 6134 0e68 0F       		.byte	15
 6135 0e69 000000   		.space	3
 6136 0e6c 01000000 		.word	1
 6137 0e70 2D2D0D00 		.ascii	"--\015\000"
 6138 0e74 00000000 		.space	4
 6139 0e78 1106AF00 		.ascii	"\021\006\257\000"
 6140 0e7c 00000000 		.space	4
 6141 0e80 2D       		.byte	45
 6142 0e81 000000   		.space	3
 6143 0e84 FFFFFFFF 		.word	-1
 6144 0e88 0C       		.byte	12
 6145 0e89 000000   		.space	3
 6146 0e8c 01000000 		.word	1
 6147 0e90 43505800 		.ascii	"CPX\000"
 6148 0e94 00000000 		.space	4
 6149 0e98 1106434E 		.ascii	"\021\006CNST\000"
 6149      535400
 6150 0e9f 00       		.space	1
 6151 0ea0 4D5F436C 		.ascii	"M_Clear_C\000"
 6151      6561725F 
ARM GAS  /tmp/ccYL8bSL.s 			page 157


 6151      4300
 6152 0eaa 00000000 		.space	5
 6152      00
 6153 0eaf 00       		.space	1
 6154 0eb0 2E       		.byte	46
 6155 0eb1 000000   		.space	3
 6156 0eb4 FFFFFFFF 		.word	-1
 6157 0eb8 2E       		.byte	46
 6158 0eb9 000000   		.space	3
 6159 0ebc FFFFFFFF 		.word	-1
 6160 0ec0 00       		.ascii	"\000"
 6161 0ec1 00000000 		.space	7
 6161      000000
 6162 0ec8 00       		.ascii	"\000"
 6163 0ec9 00000000 		.space	7
 6163      000000
 6164 0ed0 2E       		.byte	46
 6165 0ed1 000000   		.space	3
 6166 0ed4 FFFFFFFF 		.word	-1
 6167 0ed8 2E       		.byte	46
 6168 0ed9 000000   		.space	3
 6169 0edc FFFFFFFF 		.word	-1
 6170 0ee0 00       		.ascii	"\000"
 6171 0ee1 00000000 		.space	7
 6171      000000
 6172 0ee8 00       		.ascii	"\000"
 6173 0ee9 00000000 		.space	7
 6173      000000
 6174 0ef0 10       		.byte	16
 6175 0ef1 000000   		.space	3
 6176 0ef4 03000000 		.word	3
 6177 0ef8 34       		.byte	52
 6178 0ef9 000000   		.space	3
 6179 0efc 74010000 		.word	372
 6180 0f00 434C7800 		.ascii	"CLx\000"
 6181 0f04 00000000 		.space	4
 6182 0f08 434C06A0 		.ascii	"CL\006\240\000"
 6182      00
 6183 0f0d 000000   		.space	3
 6184 0f10 34       		.byte	52
 6185 0f11 000000   		.space	3
 6186 0f14 40010000 		.word	320
 6187 0f18 2E       		.byte	46
 6188 0f19 000000   		.space	3
 6189 0f1c FFFFFFFF 		.word	-1
 6190 0f20 434C5374 		.ascii	"CLStk\000"
 6190      6B00
 6191 0f26 0000     		.space	2
 6192 0f28 00       		.ascii	"\000"
 6193 0f29 00000000 		.space	7
 6193      000000
 6194 0f30 2C       		.byte	44
 6195 0f31 000000   		.space	3
 6196 0f34 FFFFFFFF 		.word	-1
 6197 0f38 2E       		.byte	46
 6198 0f39 000000   		.space	3
 6199 0f3c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccYL8bSL.s 			page 158


 6200 0f40 2D2D0D00 		.ascii	"--\015\000"
 6201 0f44 00000000 		.space	4
 6202 0f48 00       		.ascii	"\000"
 6203 0f49 00000000 		.space	7
 6203      000000
 6204 0f50 2D       		.byte	45
 6205 0f51 000000   		.space	3
 6206 0f54 FFFFFFFF 		.word	-1
 6207 0f58 2E       		.byte	46
 6208 0f59 000000   		.space	3
 6209 0f5c FFFFFFFF 		.word	-1
 6210 0f60 43505800 		.ascii	"CPX\000"
 6211 0f64 00000000 		.space	4
 6212 0f68 00       		.ascii	"\000"
 6213 0f69 00000000 		.space	7
 6213      000000
 6214 0f70 4D5F5377 		.ascii	"M_Swap_C\000"
 6214      61705F43 
 6214      00
 6215 0f79 00000000 		.space	6
 6215      0000
 6216 0f7f 00       		.space	1
 6217 0f80 0D       		.byte	13
 6218 0f81 000000   		.space	3
 6219 0f84 01000000 		.word	1
 6220 0f88 2E       		.byte	46
 6221 0f89 000000   		.space	3
 6222 0f8c FFFFFFFF 		.word	-1
 6223 0f90 53686F77 		.ascii	"Show\016\000"
 6223      0E00
 6224 0f96 0000     		.space	2
 6225 0f98 00       		.ascii	"\000"
 6226 0f99 00000000 		.space	7
 6226      000000
 6227 0fa0 0D       		.byte	13
 6228 0fa1 000000   		.space	3
 6229 0fa4 02000000 		.word	2
 6230 0fa8 2E       		.byte	46
 6231 0fa9 000000   		.space	3
 6232 0fac FFFFFFFF 		.word	-1
 6233 0fb0 53686F77 		.ascii	"Show\015\000"
 6233      0D00
 6234 0fb6 0000     		.space	2
 6235 0fb8 00       		.ascii	"\000"
 6236 0fb9 00000000 		.space	7
 6236      000000
 6237 0fc0 0D       		.byte	13
 6238 0fc1 000000   		.space	3
 6239 0fc4 03000000 		.word	3
 6240 0fc8 2E       		.byte	46
 6241 0fc9 000000   		.space	3
 6242 0fcc FFFFFFFF 		.word	-1
 6243 0fd0 78173F00 		.ascii	"x\027?\000"
 6244 0fd4 00000000 		.space	4
 6245 0fd8 00       		.ascii	"\000"
 6246 0fd9 00000000 		.space	7
 6246      000000
ARM GAS  /tmp/ccYL8bSL.s 			page 159


 6247 0fe0 2E       		.byte	46
 6248 0fe1 000000   		.space	3
 6249 0fe4 FFFFFFFF 		.word	-1
 6250 0fe8 2E       		.byte	46
 6251 0fe9 000000   		.space	3
 6252 0fec FFFFFFFF 		.word	-1
 6253 0ff0 00       		.ascii	"\000"
 6254 0ff1 00000000 		.space	7
 6254      000000
 6255 0ff8 00       		.ascii	"\000"
 6256 0ff9 00000000 		.space	7
 6256      000000
 6257 1000 2C       		.byte	44
 6258 1001 000000   		.space	3
 6259 1004 FFFFFFFF 		.word	-1
 6260 1008 2E       		.byte	46
 6261 1009 000000   		.space	3
 6262 100c FFFFFFFF 		.word	-1
 6263 1010 2D2D0D00 		.ascii	"--\015\000"
 6264 1014 00000000 		.space	4
 6265 1018 00       		.ascii	"\000"
 6266 1019 00000000 		.space	7
 6266      000000
 6267 1020 2D       		.byte	45
 6268 1021 000000   		.space	3
 6269 1024 FFFFFFFF 		.word	-1
 6270 1028 2E       		.byte	46
 6271 1029 000000   		.space	3
 6272 102c FFFFFFFF 		.word	-1
 6273 1030 43505800 		.ascii	"CPX\000"
 6274 1034 00000000 		.space	4
 6275 1038 00       		.ascii	"\000"
 6276 1039 00000000 		.space	7
 6276      000000
 6277 1040 4D5F4172 		.ascii	"M_Arrow_C\000"
 6277      726F775F 
 6277      4300
 6278 104a 00000000 		.space	5
 6278      00
 6279 104f 00       		.space	1
 6280 1050 2E       		.byte	46
 6281 1051 000000   		.space	3
 6282 1054 FFFFFFFF 		.word	-1
 6283 1058 06       		.byte	6
 6284 1059 000000   		.space	3
 6285 105c 02000000 		.word	2
 6286 1060 00       		.ascii	"\000"
 6287 1061 00000000 		.space	7
 6287      000000
 6288 1068 44454700 		.ascii	"DEG\000"
 6289 106c 00000000 		.space	4
 6290 1070 2E       		.byte	46
 6291 1071 000000   		.space	3
 6292 1074 FFFFFFFF 		.word	-1
 6293 1078 07       		.byte	7
 6294 1079 000000   		.space	3
 6295 107c 02000000 		.word	2
ARM GAS  /tmp/ccYL8bSL.s 			page 160


 6296 1080 00       		.ascii	"\000"
 6297 1081 00000000 		.space	7
 6297      000000
 6298 1088 52414400 		.ascii	"RAD\000"
 6299 108c 00000000 		.space	4
 6300 1090 2E       		.byte	46
 6301 1091 000000   		.space	3
 6302 1094 FFFFFFFF 		.word	-1
 6303 1098 08       		.byte	8
 6304 1099 000000   		.space	3
 6305 109c 02000000 		.word	2
 6306 10a0 00       		.ascii	"\000"
 6307 10a1 00000000 		.space	7
 6307      000000
 6308 10a8 47726164 		.ascii	"Grad\000"
 6308      00
 6309 10ad 000000   		.space	3
 6310 10b0 2E       		.byte	46
 6311 10b1 000000   		.space	3
 6312 10b4 FFFFFFFF 		.word	-1
 6313 10b8 06       		.byte	6
 6314 10b9 000000   		.space	3
 6315 10bc 01000000 		.word	1
 6316 10c0 00       		.ascii	"\000"
 6317 10c1 00000000 		.space	7
 6317      000000
 6318 10c8 0D484D53 		.ascii	"\015HMS\000"
 6318      00
 6319 10cd 000000   		.space	3
 6320 10d0 2C       		.byte	44
 6321 10d1 000000   		.space	3
 6322 10d4 FFFFFFFF 		.word	-1
 6323 10d8 07       		.byte	7
 6324 10d9 000000   		.space	3
 6325 10dc 01000000 		.word	1
 6326 10e0 2D2D0D00 		.ascii	"--\015\000"
 6327 10e4 00000000 		.space	4
 6328 10e8 484D530D 		.ascii	"HMS\015\000"
 6328      00
 6329 10ed 000000   		.space	3
 6330 10f0 2D       		.byte	45
 6331 10f1 000000   		.space	3
 6332 10f4 FFFFFFFF 		.word	-1
 6333 10f8 2E       		.byte	46
 6334 10f9 000000   		.space	3
 6335 10fc FFFFFFFF 		.word	-1
 6336 1100 43505800 		.ascii	"CPX\000"
 6337 1104 00000000 		.space	4
 6338 1108 00       		.ascii	"\000"
 6339 1109 00000000 		.space	7
 6339      000000
 6340 1110 4D5F5072 		.ascii	"M_Prob_C\000"
 6340      6F625F43 
 6340      00
 6341 1119 00000000 		.space	6
 6341      0000
 6342 111f 00       		.space	1
ARM GAS  /tmp/ccYL8bSL.s 			page 161


 6343 1120 18       		.byte	24
 6344 1121 000000   		.space	3
 6345 1124 03000000 		.word	3
 6346 1128 34       		.byte	52
 6347 1129 000000   		.space	3
 6348 112c 31050000 		.word	1329
 6349 1130 14062100 		.ascii	"\024\006!\000"
 6350 1134 00000000 		.space	4
 6351 1138 14064C6E 		.ascii	"\024\006Ln\006\202\000"
 6351      068200
 6352 113f 00       		.space	1
 6353 1140 34       		.byte	52
 6354 1141 000000   		.space	3
 6355 1144 12060000 		.word	1554
 6356 1148 2E       		.byte	46
 6357 1149 000000   		.space	3
 6358 114c FFFFFFFF 		.word	-1
 6359 1150 14064379 		.ascii	"\024\006Cy,x\000"
 6359      2C7800
 6360 1157 00       		.space	1
 6361 1158 00       		.ascii	"\000"
 6362 1159 00000000 		.space	7
 6362      000000
 6363 1160 34       		.byte	52
 6364 1161 000000   		.space	3
 6365 1164 13060000 		.word	1555
 6366 1168 2E       		.byte	46
 6367 1169 000000   		.space	3
 6368 116c FFFFFFFF 		.word	-1
 6369 1170 14065079 		.ascii	"\024\006Py,x\000"
 6369      2C7800
 6370 1177 00       		.space	1
 6371 1178 00       		.ascii	"\000"
 6372 1179 00000000 		.space	7
 6372      000000
 6373 1180 2E       		.byte	46
 6374 1181 000000   		.space	3
 6375 1184 FFFFFFFF 		.word	-1
 6376 1188 2E       		.byte	46
 6377 1189 000000   		.space	3
 6378 118c FFFFFFFF 		.word	-1
 6379 1190 00       		.ascii	"\000"
 6380 1191 00000000 		.space	7
 6380      000000
 6381 1198 00       		.ascii	"\000"
 6382 1199 00000000 		.space	7
 6382      000000
 6383 11a0 2C       		.byte	44
 6384 11a1 000000   		.space	3
 6385 11a4 FFFFFFFF 		.word	-1
 6386 11a8 2E       		.byte	46
 6387 11a9 000000   		.space	3
 6388 11ac FFFFFFFF 		.word	-1
 6389 11b0 2D2D0D00 		.ascii	"--\015\000"
 6390 11b4 00000000 		.space	4
 6391 11b8 00       		.ascii	"\000"
 6392 11b9 00000000 		.space	7
ARM GAS  /tmp/ccYL8bSL.s 			page 162


 6392      000000
 6393 11c0 2D       		.byte	45
 6394 11c1 000000   		.space	3
 6395 11c4 FFFFFFFF 		.word	-1
 6396 11c8 2E       		.byte	46
 6397 11c9 000000   		.space	3
 6398 11cc FFFFFFFF 		.word	-1
 6399 11d0 43505800 		.ascii	"CPX\000"
 6400 11d4 00000000 		.space	4
 6401 11d8 00       		.ascii	"\000"
 6402 11d9 00000000 		.space	7
 6402      000000
 6403 11e0 4D5F426C 		.ascii	"M_Blank2_C\000"
 6403      616E6B32 
 6403      5F4300
 6404 11eb 00000000 		.space	4
 6405 11ef 00       		.space	1
 6406 11f0 00       		.byte	0
 6407 11f1 000000   		.space	3
 6408 11f4 01000000 		.word	1
 6409 11f8 2E       		.byte	46
 6410 11f9 000000   		.space	3
 6411 11fc FFFFFFFF 		.word	-1
 6412 1200 48595000 		.ascii	"HYP\000"
 6413 1204 00000000 		.space	4
 6414 1208 00       		.ascii	"\000"
 6415 1209 00000000 		.space	7
 6415      000000
 6416 1210 16       		.byte	22
 6417 1211 000000   		.space	3
 6418 1214 01000000 		.word	1
 6419 1218 2E       		.byte	46
 6420 1219 000000   		.space	3
 6421 121c FFFFFFFF 		.word	-1
 6422 1220 312F5800 		.ascii	"1/X\000"
 6423 1224 00000000 		.space	4
 6424 1228 00       		.ascii	"\000"
 6425 1229 00000000 		.space	7
 6425      000000
 6426 1230 1C       		.byte	28
 6427 1231 000000   		.space	3
 6428 1234 01000000 		.word	1
 6429 1238 2E       		.byte	46
 6430 1239 000000   		.space	3
 6431 123c FFFFFFFF 		.word	-1
 6432 1240 035800   		.ascii	"\003X\000"
 6433 1243 00000000 		.space	5
 6433      00
 6434 1248 00       		.ascii	"\000"
 6435 1249 00000000 		.space	7
 6435      000000
 6436 1250 13       		.byte	19
 6437 1251 000000   		.space	3
 6438 1254 02000000 		.word	2
 6439 1258 2E       		.byte	46
 6440 1259 000000   		.space	3
 6441 125c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccYL8bSL.s 			page 163


 6442 1260 4C4F4700 		.ascii	"LOG\000"
 6443 1264 00000000 		.space	4
 6444 1268 00       		.ascii	"\000"
 6445 1269 00000000 		.space	7
 6445      000000
 6446 1270 2C       		.byte	44
 6447 1271 000000   		.space	3
 6448 1274 FFFFFFFF 		.word	-1
 6449 1278 2E       		.byte	46
 6450 1279 000000   		.space	3
 6451 127c FFFFFFFF 		.word	-1
 6452 1280 2D2D0D00 		.ascii	"--\015\000"
 6453 1284 00000000 		.space	4
 6454 1288 00       		.ascii	"\000"
 6455 1289 00000000 		.space	7
 6455      000000
 6456 1290 2D       		.byte	45
 6457 1291 000000   		.space	3
 6458 1294 FFFFFFFF 		.word	-1
 6459 1298 2E       		.byte	46
 6460 1299 000000   		.space	3
 6461 129c FFFFFFFF 		.word	-1
 6462 12a0 43505800 		.ascii	"CPX\000"
 6463 12a4 00000000 		.space	4
 6464 12a8 00       		.ascii	"\000"
 6465 12a9 00000000 		.space	7
 6465      000000
 6466 12b0 4D5F4D69 		.ascii	"M_Misc_C\000"
 6466      73635F43 
 6466      00
 6467 12b9 00000000 		.space	6
 6467      0000
 6468 12bf 00       		.space	1
 6469 12c0 25       		.byte	37
 6470 12c1 000000   		.space	3
 6471 12c4 01000000 		.word	1
 6472 12c8 14       		.byte	20
 6473 12c9 000000   		.space	3
 6474 12cc 01000000 		.word	1
 6475 12d0 7C7A7C00 		.ascii	"|z|\000"
 6476 12d4 00000000 		.space	4
 6477 12d8 14329C00 		.ascii	"\0242\234\000"
 6478 12dc 00000000 		.space	4
 6479 12e0 25       		.byte	37
 6480 12e1 000000   		.space	3
 6481 12e4 02000000 		.word	2
 6482 12e8 14       		.byte	20
 6483 12e9 000000   		.space	3
 6484 12ec 02000000 		.word	2
 6485 12f0 524E4400 		.ascii	"RND\000"
 6486 12f4 00000000 		.space	4
 6487 12f8 144C6F67 		.ascii	"\024Log\272\000"
 6487      BA00
 6488 12fe 0000     		.space	2
 6489 1300 26       		.byte	38
 6490 1301 000000   		.space	3
 6491 1304 01000000 		.word	1
ARM GAS  /tmp/ccYL8bSL.s 			page 164


 6492 1308 15       		.byte	21
 6493 1309 000000   		.space	3
 6494 130c 02000000 		.word	2
 6495 1310 300D5265 		.ascii	"0\015Re\000"
 6495      00
 6496 1315 000000   		.space	3
 6497 1318 144C6F67 		.ascii	"\024Log\213\000"
 6497      8B00
 6498 131e 0000     		.space	2
 6499 1320 26       		.byte	38
 6500 1321 000000   		.space	3
 6501 1324 02000000 		.word	2
 6502 1328 16       		.byte	22
 6503 1329 000000   		.space	3
 6504 132c 02000000 		.word	2
 6505 1330 300D496D 		.ascii	"0\015Im\000"
 6505      00
 6506 1335 000000   		.space	3
 6507 1338 147C7C65 		.ascii	"\024||el\000"
 6507      6C00
 6508 133e 0000     		.space	2
 6509 1340 2C       		.byte	44
 6510 1341 000000   		.space	3
 6511 1344 FFFFFFFF 		.word	-1
 6512 1348 1C       		.byte	28
 6513 1349 000000   		.space	3
 6514 134c 03000000 		.word	3
 6515 1350 2D2D0D00 		.ascii	"--\015\000"
 6516 1354 00000000 		.space	4
 6517 1358 142E1C00 		.ascii	"\024.\034\000"
 6518 135c 00000000 		.space	4
 6519 1360 2D       		.byte	45
 6520 1361 000000   		.space	3
 6521 1364 FFFFFFFF 		.word	-1
 6522 1368 16       		.byte	22
 6523 1369 000000   		.space	3
 6524 136c 03000000 		.word	3
 6525 1370 43505800 		.ascii	"CPX\000"
 6526 1374 00000000 		.space	4
 6527 1378 142E2F00 		.ascii	"\024./\000"
 6528 137c 00000000 		.space	4
 6529 1380 4D5F5573 		.ascii	"M_Usermenu\000"
 6529      65726D65 
 6529      6E7500
 6530 138b 00000000 		.space	4
 6531 138f 00       		.space	1
 6532 1390 34       		.byte	52
 6533 1391 000000   		.space	3
 6534 1394 00FB0000 		.word	64256
 6535 1398 2E       		.byte	46
 6536 1399 000000   		.space	3
 6537 139c FFFFFFFF 		.word	-1
 6538 13a0 554D454E 		.ascii	"UMEN\000"
 6538      00
 6539 13a5 000000   		.space	3
 6540 13a8 00       		.ascii	"\000"
 6541 13a9 00000000 		.space	7
ARM GAS  /tmp/ccYL8bSL.s 			page 165


 6541      000000
 6542 13b0 34       		.byte	52
 6543 13b1 000000   		.space	3
 6544 13b4 55FB4D31 		.word	827194197
 6545 13b8 34       		.byte	52
 6546 13b9 000000   		.space	3
 6547 13bc 55FB4D34 		.word	877525845
 6548 13c0 554D3100 		.ascii	"UM1\000"
 6549 13c4 00000000 		.space	4
 6550 13c8 554D3400 		.ascii	"UM4\000"
 6551 13cc 00000000 		.space	4
 6552 13d0 34       		.byte	52
 6553 13d1 000000   		.space	3
 6554 13d4 55FB4D32 		.word	843971413
 6555 13d8 34       		.byte	52
 6556 13d9 000000   		.space	3
 6557 13dc 55FB4D35 		.word	894303061
 6558 13e0 554D3200 		.ascii	"UM2\000"
 6559 13e4 00000000 		.space	4
 6560 13e8 554D3500 		.ascii	"UM5\000"
 6561 13ec 00000000 		.space	4
 6562 13f0 34       		.byte	52
 6563 13f1 000000   		.space	3
 6564 13f4 55FB4D33 		.word	860748629
 6565 13f8 34       		.byte	52
 6566 13f9 000000   		.space	3
 6567 13fc 55FB4D36 		.word	911080277
 6568 1400 554D3300 		.ascii	"UM3\000"
 6569 1404 00000000 		.space	4
 6570 1408 554D3600 		.ascii	"UM6\000"
 6571 140c 00000000 		.space	4
 6572 1410 2C       		.byte	44
 6573 1411 000000   		.space	3
 6574 1414 FFFFFFFF 		.word	-1
 6575 1418 1C       		.byte	28
 6576 1419 000000   		.space	3
 6577 141c 03000000 		.word	3
 6578 1420 2D2D0D00 		.ascii	"--\015\000"
 6579 1424 00000000 		.space	4
 6580 1428 00       		.ascii	"\000"
 6581 1429 00000000 		.space	7
 6581      000000
 6582 1430 2D       		.byte	45
 6583 1431 000000   		.space	3
 6584 1434 FFFFFFFF 		.word	-1
 6585 1438 16       		.byte	22
 6586 1439 000000   		.space	3
 6587 143c 03000000 		.word	3
 6588 1440 43505800 		.ascii	"CPX\000"
 6589 1444 00000000 		.space	4
 6590 1448 00       		.ascii	"\000"
 6591 1449 00000000 		.space	7
 6591      000000
 6592 1450 4D5F5072 		.ascii	"M_Print\000"
 6592      696E7400 
 6593 1458 00000000 		.space	7
 6593      000000
ARM GAS  /tmp/ccYL8bSL.s 			page 166


 6594 145f 00       		.space	1
 6595 1460 34       		.byte	52
 6596 1461 000000   		.space	3
 6597 1464 D9010000 		.word	473
 6598 1468 34       		.byte	52
 6599 1469 000000   		.space	3
 6600 146c DA010000 		.word	474
 6601 1470 92064F6E 		.ascii	"\222\006On\000"
 6601      00
 6602 1475 000000   		.space	3
 6603 1478 92064F66 		.ascii	"\222\006Off\000"
 6603      6600
 6604 147e 0000     		.space	2
 6605 1480 34       		.byte	52
 6606 1481 000000   		.space	3
 6607 1484 00AF0000 		.word	44800
 6608 1488 34       		.byte	52
 6609 1489 000000   		.space	3
 6610 148c 00B60000 		.word	46592
 6611 1490 92064D6F 		.ascii	"\222\006Mode\000"
 6611      646500
 6612 1497 00       		.space	1
 6613 1498 92064462 		.ascii	"\222\006DbSp\000"
 6613      537000
 6614 149f 00       		.space	1
 6615 14a0 34       		.byte	52
 6616 14a1 000000   		.space	3
 6617 14a4 BC010000 		.word	444
 6618 14a8 34       		.byte	52
 6619 14a9 000000   		.space	3
 6620 14ac BD010000 		.word	445
 6621 14b0 92065072 		.ascii	"\222\006Prog\000"
 6621      6F6700
 6622 14b7 00       		.space	1
 6623 14b8 92065265 		.ascii	"\222\006Regs\000"
 6623      677300
 6624 14bf 00       		.space	1
 6625 14c0 34       		.byte	52
 6626 14c1 000000   		.space	3
 6627 14c4 BE010000 		.word	446
 6628 14c8 34       		.byte	52
 6629 14c9 000000   		.space	3
 6630 14cc BF010000 		.word	447
 6631 14d0 92065374 		.ascii	"\222\006Stk\000"
 6631      6B00
 6632 14d6 0000     		.space	2
 6633 14d8 92069100 		.ascii	"\222\006\221\000"
 6634 14dc 00000000 		.space	4
 6635 14e0 2C       		.byte	44
 6636 14e1 000000   		.space	3
 6637 14e4 FFFFFFFF 		.word	-1
 6638 14e8 34       		.byte	52
 6639 14e9 000000   		.space	3
 6640 14ec C0010000 		.word	448
 6641 14f0 2D2D0D00 		.ascii	"--\015\000"
 6642 14f4 00000000 		.space	4
 6643 14f8 9206A000 		.ascii	"\222\006\240\000"
ARM GAS  /tmp/ccYL8bSL.s 			page 167


 6644 14fc 00000000 		.space	4
 6645 1500 2D       		.byte	45
 6646 1501 000000   		.space	3
 6647 1504 FFFFFFFF 		.word	-1
 6648 1508 34       		.byte	52
 6649 1509 000000   		.space	3
 6650 150c C3010000 		.word	451
 6651 1510 43505800 		.ascii	"CPX\000"
 6652 1514 00000000 		.space	4
 6653 1518 92064144 		.ascii	"\222\006ADV\000"
 6653      5600
 6654 151e 0000     		.space	2
 6655              		.section	.rodata.mapping_alpha.11152,"a"
 6656              		.align	2
 6657              		.set	.LANCHOR16,. + 0
 6660              	mapping_alpha.11152:
 6661 0000 63       		.byte	99
 6662 0001 000000   		.space	3
 6663 0004 FFFFFFFF 		.word	-1
 6664 0008 00       		.byte	0
 6665 0009 000000   		.space	3
 6666 000c FFFFFFFF 		.word	-1
 6667 0010 01       		.byte	1
 6668 0011 000000   		.space	3
 6669 0014 FFFFFFFF 		.word	-1
 6670 0018 02       		.byte	2
 6671 0019 000000   		.space	3
 6672 001c FFFFFFFF 		.word	-1
 6673 0020 03       		.byte	3
 6674 0021 000000   		.space	3
 6675 0024 FFFFFFFF 		.word	-1
 6676 0028 04       		.byte	4
 6677 0029 000000   		.space	3
 6678 002c FFFFFFFF 		.word	-1
 6679 0030 05       		.byte	5
 6680 0031 000000   		.space	3
 6681 0034 FFFFFFFF 		.word	-1
 6682 0038 06       		.byte	6
 6683 0039 000000   		.space	3
 6684 003c FFFFFFFF 		.word	-1
 6685 0040 07       		.byte	7
 6686 0041 000000   		.space	3
 6687 0044 FFFFFFFF 		.word	-1
 6688 0048 08       		.byte	8
 6689 0049 000000   		.space	3
 6690 004c FFFFFFFF 		.word	-1
 6691 0050 09       		.byte	9
 6692 0051 000000   		.space	3
 6693 0054 FFFFFFFF 		.word	-1
 6694 0058 0A       		.byte	10
 6695 0059 000000   		.space	3
 6696 005c FFFFFFFF 		.word	-1
 6697 0060 0B       		.byte	11
 6698 0061 000000   		.space	3
 6699 0064 FFFFFFFF 		.word	-1
 6700 0068 0C       		.byte	12
 6701 0069 000000   		.space	3
ARM GAS  /tmp/ccYL8bSL.s 			page 168


 6702 006c FFFFFFFF 		.word	-1
 6703 0070 0D       		.byte	13
 6704 0071 000000   		.space	3
 6705 0074 FFFFFFFF 		.word	-1
 6706 0078 0E       		.byte	14
 6707 0079 000000   		.space	3
 6708 007c FFFFFFFF 		.word	-1
 6709 0080 0F       		.byte	15
 6710 0081 000000   		.space	3
 6711 0084 FFFFFFFF 		.word	-1
 6712 0088 10       		.byte	16
 6713 0089 000000   		.space	3
 6714 008c FFFFFFFF 		.word	-1
 6715 0090 12       		.byte	18
 6716 0091 000000   		.space	3
 6717 0094 FFFFFFFF 		.word	-1
 6718 0098 13       		.byte	19
 6719 0099 000000   		.space	3
 6720 009c FFFFFFFF 		.word	-1
 6721 00a0 14       		.byte	20
 6722 00a1 000000   		.space	3
 6723 00a4 FFFFFFFF 		.word	-1
 6724 00a8 15       		.byte	21
 6725 00a9 000000   		.space	3
 6726 00ac FFFFFFFF 		.word	-1
 6727 00b0 16       		.byte	22
 6728 00b1 000000   		.space	3
 6729 00b4 FFFFFFFF 		.word	-1
 6730 00b8 18       		.byte	24
 6731 00b9 000000   		.space	3
 6732 00bc FFFFFFFF 		.word	-1
 6733 00c0 19       		.byte	25
 6734 00c1 000000   		.space	3
 6735 00c4 FFFFFFFF 		.word	-1
 6736 00c8 1A       		.byte	26
 6737 00c9 000000   		.space	3
 6738 00cc FFFFFFFF 		.word	-1
 6739 00d0 1B       		.byte	27
 6740 00d1 000000   		.space	3
 6741 00d4 FFFFFFFF 		.word	-1
 6742 00d8 1C       		.byte	28
 6743 00d9 000000   		.space	3
 6744 00dc FFFFFFFF 		.word	-1
 6745 00e0 1E       		.byte	30
 6746 00e1 000000   		.space	3
 6747 00e4 FFFFFFFF 		.word	-1
 6748 00e8 1F       		.byte	31
 6749 00e9 000000   		.space	3
 6750 00ec FFFFFFFF 		.word	-1
 6751 00f0 20       		.byte	32
 6752 00f1 000000   		.space	3
 6753 00f4 FFFFFFFF 		.word	-1
 6754 00f8 21       		.byte	33
 6755 00f9 000000   		.space	3
 6756 00fc FFFFFFFF 		.word	-1
 6757 0100 22       		.byte	34
 6758 0101 000000   		.space	3
ARM GAS  /tmp/ccYL8bSL.s 			page 169


 6759 0104 FFFFFFFF 		.word	-1
 6760 0108 24       		.byte	36
 6761 0109 000000   		.space	3
 6762 010c FFFFFFFF 		.word	-1
 6763 0110 25       		.byte	37
 6764 0111 000000   		.space	3
 6765 0114 FFFFFFFF 		.word	-1
 6766 0118 26       		.byte	38
 6767 0119 000000   		.space	3
 6768 011c FFFFFFFF 		.word	-1
 6769 0120 27       		.byte	39
 6770 0121 000000   		.space	3
 6771 0124 FFFFFFFF 		.word	-1
 6772 0128 28       		.byte	40
 6773 0129 000000   		.space	3
 6774 012c FFFFFFFF 		.word	-1
 6775 0130 2E       		.byte	46
 6776 0131 000000   		.space	3
 6777 0134 FFFFFFFF 		.word	-1
 6778 0138 2E       		.byte	46
 6779 0139 000000   		.space	3
 6780 013c FFFFFFFF 		.word	-1
 6781 0140 2E       		.byte	46
 6782 0141 000000   		.space	3
 6783 0144 FFFFFFFF 		.word	-1
 6784 0148 2E       		.byte	46
 6785 0149 000000   		.space	3
 6786 014c FFFFFFFF 		.word	-1
 6787 0150 2C       		.byte	44
 6788 0151 000000   		.space	3
 6789 0154 FFFFFFFF 		.word	-1
 6790 0158 2D       		.byte	45
 6791 0159 000000   		.space	3
 6792 015c FFFFFFFF 		.word	-1
 6793 0160 2E       		.byte	46
 6794 0161 000000   		.space	3
 6795 0164 FFFFFFFF 		.word	-1
 6796 0168 2E       		.byte	46
 6797 0169 000000   		.space	3
 6798 016c FFFFFFFF 		.word	-1
 6799 0170 2E       		.byte	46
 6800 0171 000000   		.space	3
 6801 0174 FFFFFFFF 		.word	-1
 6802              		.section	.rodata.mapping_fshift.11150,"a"
 6803              		.align	2
 6804              		.set	.LANCHOR14,. + 0
 6807              	mapping_fshift.11150:
 6808 0000 63       		.byte	99
 6809 0001 000000   		.space	3
 6810 0004 FFFFFFFF 		.word	-1
 6811 0008 22       		.byte	34
 6812 0009 000000   		.space	3
 6813 000c 03000000 		.word	3
 6814 0010 15       		.byte	21
 6815 0011 000000   		.space	3
 6816 0014 01000000 		.word	1
 6817 0018 1C       		.byte	28
ARM GAS  /tmp/ccYL8bSL.s 			page 170


 6818 0019 000000   		.space	3
 6819 001c 02000000 		.word	2
 6820 0020 13       		.byte	19
 6821 0021 000000   		.space	3
 6822 0024 01000000 		.word	1
 6823 0028 12       		.byte	18
 6824 0029 000000   		.space	3
 6825 002c 01000000 		.word	1
 6826 0030 12       		.byte	18
 6827 0031 000000   		.space	3
 6828 0034 03000000 		.word	3
 6829 0038 31       		.byte	49
 6830 0039 000000   		.space	3
 6831 003c 0F000000 		.word	15
 6832 0040 22       		.byte	34
 6833 0041 000000   		.space	3
 6834 0044 01000000 		.word	1
 6835 0048 0F       		.byte	15
 6836 0049 000000   		.space	3
 6837 004c 03000000 		.word	3
 6838 0050 01       		.byte	1
 6839 0051 000000   		.space	3
 6840 0054 02000000 		.word	2
 6841 0058 02       		.byte	2
 6842 0059 000000   		.space	3
 6843 005c 02000000 		.word	2
 6844 0060 03       		.byte	3
 6845 0061 000000   		.space	3
 6846 0064 02000000 		.word	2
 6847 0068 0C       		.byte	12
 6848 0069 000000   		.space	3
 6849 006c 01000000 		.word	1
 6850 0070 34       		.byte	52
 6851 0071 000000   		.space	3
 6852 0074 6C2A0000 		.word	10860
 6853 0078 2F       		.byte	47
 6854 0079 000000   		.space	3
 6855 007c 04000000 		.word	4
 6856 0080 2F       		.byte	47
 6857 0081 000000   		.space	3
 6858 0084 02000000 		.word	2
 6859 0088 2F       		.byte	47
 6860 0089 000000   		.space	3
 6861 008c 01000000 		.word	1
 6862 0090 18       		.byte	24
 6863 0091 000000   		.space	3
 6864 0094 00000000 		.word	0
 6865 0098 20       		.byte	32
 6866 0099 000000   		.space	3
 6867 009c 01000000 		.word	1
 6868 00a0 2F       		.byte	47
 6869 00a1 000000   		.space	3
 6870 00a4 0E000000 		.word	14
 6871 00a8 1C       		.byte	28
 6872 00a9 000000   		.space	3
 6873 00ac 03000000 		.word	3
 6874 00b0 2F       		.byte	47
ARM GAS  /tmp/ccYL8bSL.s 			page 171


 6875 00b1 000000   		.space	3
 6876 00b4 0C000000 		.word	12
 6877 00b8 1E       		.byte	30
 6878 00b9 000000   		.space	3
 6879 00bc 00000000 		.word	0
 6880 00c0 2F       		.byte	47
 6881 00c1 000000   		.space	3
 6882 00c4 03000000 		.word	3
 6883 00c8 04       		.byte	4
 6884 00c9 000000   		.space	3
 6885 00cc 03000000 		.word	3
 6886 00d0 2F       		.byte	47
 6887 00d1 000000   		.space	3
 6888 00d4 0A000000 		.word	10
 6889 00d8 2F       		.byte	47
 6890 00d9 000000   		.space	3
 6891 00dc 0B000000 		.word	11
 6892 00e0 2A       		.byte	42
 6893 00e1 000000   		.space	3
 6894 00e4 00000000 		.word	0
 6895 00e8 31       		.byte	49
 6896 00e9 000000   		.space	3
 6897 00ec 0D000000 		.word	13
 6898 00f0 2F       		.byte	47
 6899 00f1 000000   		.space	3
 6900 00f4 63000000 		.word	99
 6901 00f8 20       		.byte	32
 6902 00f9 000000   		.space	3
 6903 00fc 03000000 		.word	3
 6904 0100 2F       		.byte	47
 6905 0101 000000   		.space	3
 6906 0104 19000000 		.word	25
 6907 0108 24       		.byte	36
 6908 0109 000000   		.space	3
 6909 010c 03000000 		.word	3
 6910 0110 2F       		.byte	47
 6911 0111 000000   		.space	3
 6912 0114 08000000 		.word	8
 6913 0118 0D       		.byte	13
 6914 0119 000000   		.space	3
 6915 011c 01000000 		.word	1
 6916 0120 27       		.byte	39
 6917 0121 000000   		.space	3
 6918 0124 03000000 		.word	3
 6919 0128 06       		.byte	6
 6920 0129 000000   		.space	3
 6921 012c 03000000 		.word	3
 6922 0130 2E       		.byte	46
 6923 0131 000000   		.space	3
 6924 0134 00000000 		.word	0
 6925 0138 2E       		.byte	46
 6926 0139 000000   		.space	3
 6927 013c 00000000 		.word	0
 6928 0140 2E       		.byte	46
 6929 0141 000000   		.space	3
 6930 0144 00000000 		.word	0
 6931 0148 2E       		.byte	46
ARM GAS  /tmp/ccYL8bSL.s 			page 172


 6932 0149 000000   		.space	3
 6933 014c 00000000 		.word	0
 6934 0150 2E       		.byte	46
 6935 0151 000000   		.space	3
 6936 0154 00000000 		.word	0
 6937 0158 2E       		.byte	46
 6938 0159 000000   		.space	3
 6939 015c 00000000 		.word	0
 6940 0160 2E       		.byte	46
 6941 0161 000000   		.space	3
 6942 0164 00000000 		.word	0
 6943 0168 2F       		.byte	47
 6944 0169 000000   		.space	3
 6945 016c FFFFFFFF 		.word	-1
 6946 0170 2F       		.byte	47
 6947 0171 000000   		.space	3
 6948 0174 05000000 		.word	5
 6949              		.section	.rodata.mapping_gshift.11151,"a"
 6950              		.align	2
 6951              		.set	.LANCHOR17,. + 0
 6954              	mapping_gshift.11151:
 6955 0000 63       		.byte	99
 6956 0001 000000   		.space	3
 6957 0004 FFFFFFFF 		.word	-1
 6958 0008 28       		.byte	40
 6959 0009 000000   		.space	3
 6960 000c 03000000 		.word	3
 6961 0010 16       		.byte	22
 6962 0011 000000   		.space	3
 6963 0014 01000000 		.word	1
 6964 0018 1C       		.byte	28
 6965 0019 000000   		.space	3
 6966 001c 01000000 		.word	1
 6967 0020 13       		.byte	19
 6968 0021 000000   		.space	3
 6969 0024 02000000 		.word	2
 6970 0028 2E       		.byte	46
 6971 0029 000000   		.space	3
 6972 002c 00000000 		.word	0
 6973 0030 2E       		.byte	46
 6974 0031 000000   		.space	3
 6975 0034 00000000 		.word	0
 6976 0038 2E       		.byte	46
 6977 0039 000000   		.space	3
 6978 003c 00000000 		.word	0
 6979 0040 07       		.byte	7
 6980 0041 000000   		.space	3
 6981 0044 03000000 		.word	3
 6982 0048 08       		.byte	8
 6983 0049 000000   		.space	3
 6984 004c 03000000 		.word	3
 6985 0050 2F       		.byte	47
 6986 0051 000000   		.space	3
 6987 0054 04000000 		.word	4
 6988 0058 2F       		.byte	47
 6989 0059 000000   		.space	3
 6990 005c 04000000 		.word	4
ARM GAS  /tmp/ccYL8bSL.s 			page 173


 6991 0060 2F       		.byte	47
 6992 0061 000000   		.space	3
 6993 0064 04000000 		.word	4
 6994 0068 0C       		.byte	12
 6995 0069 000000   		.space	3
 6996 006c 02000000 		.word	2
 6997 0070 2F       		.byte	47
 6998 0071 000000   		.space	3
 6999 0074 06000000 		.word	6
 7000 0078 05       		.byte	5
 7001 0079 000000   		.space	3
 7002 007c 03000000 		.word	3
 7003 0080 2E       		.byte	46
 7004 0081 000000   		.space	3
 7005 0084 00000000 		.word	0
 7006 0088 2E       		.byte	46
 7007 0089 000000   		.space	3
 7008 008c 00000000 		.word	0
 7009 0090 2E       		.byte	46
 7010 0091 000000   		.space	3
 7011 0094 00000000 		.word	0
 7012 0098 2E       		.byte	46
 7013 0099 000000   		.space	3
 7014 009c 00000000 		.word	0
 7015 00a0 2E       		.byte	46
 7016 00a1 000000   		.space	3
 7017 00a4 00000000 		.word	0
 7018 00a8 1B       		.byte	27
 7019 00a9 000000   		.space	3
 7020 00ac 03000000 		.word	3
 7021 00b0 1A       		.byte	26
 7022 00b1 000000   		.space	3
 7023 00b4 03000000 		.word	3
 7024 00b8 2E       		.byte	46
 7025 00b9 000000   		.space	3
 7026 00bc 00000000 		.word	0
 7027 00c0 2E       		.byte	46
 7028 00c1 000000   		.space	3
 7029 00c4 00000000 		.word	0
 7030 00c8 0C       		.byte	12
 7031 00c9 000000   		.space	3
 7032 00cc 03000000 		.word	3
 7033 00d0 1F       		.byte	31
 7034 00d1 000000   		.space	3
 7035 00d4 03000000 		.word	3
 7036 00d8 19       		.byte	25
 7037 00d9 000000   		.space	3
 7038 00dc 03000000 		.word	3
 7039 00e0 2A       		.byte	42
 7040 00e1 000000   		.space	3
 7041 00e4 FFFFFFFF 		.word	-1
 7042 00e8 2E       		.byte	46
 7043 00e9 000000   		.space	3
 7044 00ec 00000000 		.word	0
 7045 00f0 2F       		.byte	47
 7046 00f1 000000   		.space	3
 7047 00f4 18000000 		.word	24
ARM GAS  /tmp/ccYL8bSL.s 			page 174


 7048 00f8 21       		.byte	33
 7049 00f9 000000   		.space	3
 7050 00fc 03000000 		.word	3
 7051 0100 2E       		.byte	46
 7052 0101 000000   		.space	3
 7053 0104 00000000 		.word	0
 7054 0108 24       		.byte	36
 7055 0109 000000   		.space	3
 7056 010c 02000000 		.word	2
 7057 0110 2F       		.byte	47
 7058 0111 000000   		.space	3
 7059 0114 0D000000 		.word	13
 7060 0118 2E       		.byte	46
 7061 0119 000000   		.space	3
 7062 011c 00000000 		.word	0
 7063 0120 2F       		.byte	47
 7064 0121 000000   		.space	3
 7065 0124 07000000 		.word	7
 7066 0128 1E       		.byte	30
 7067 0129 000000   		.space	3
 7068 012c 03000000 		.word	3
 7069 0130 2E       		.byte	46
 7070 0131 000000   		.space	3
 7071 0134 00000000 		.word	0
 7072 0138 2E       		.byte	46
 7073 0139 000000   		.space	3
 7074 013c 00000000 		.word	0
 7075 0140 2E       		.byte	46
 7076 0141 000000   		.space	3
 7077 0144 00000000 		.word	0
 7078 0148 2E       		.byte	46
 7079 0149 000000   		.space	3
 7080 014c 00000000 		.word	0
 7081 0150 2E       		.byte	46
 7082 0151 000000   		.space	3
 7083 0154 00000000 		.word	0
 7084 0158 2E       		.byte	46
 7085 0159 000000   		.space	3
 7086 015c 00000000 		.word	0
 7087 0160 2E       		.byte	46
 7088 0161 000000   		.space	3
 7089 0164 00000000 		.word	0
 7090 0168 2E       		.byte	46
 7091 0169 000000   		.space	3
 7092 016c 00000000 		.word	0
 7093 0170 2E       		.byte	46
 7094 0171 000000   		.space	3
 7095 0174 00000000 		.word	0
 7096              		.section	.rodata.mapping_none.11149,"a"
 7097              		.align	2
 7098              		.set	.LANCHOR13,. + 0
 7101              	mapping_none.11149:
 7102 0000 63       		.byte	99
 7103 0001 000000   		.space	3
 7104 0004 FFFFFFFF 		.word	-1
 7105 0008 00       		.byte	0
 7106 0009 000000   		.space	3
ARM GAS  /tmp/ccYL8bSL.s 			page 175


 7107 000c 00000000 		.word	0
 7108 0010 01       		.byte	1
 7109 0011 000000   		.space	3
 7110 0014 00000000 		.word	0
 7111 0018 03       		.byte	3
 7112 0019 000000   		.space	3
 7113 001c 00000000 		.word	0
 7114 0020 13       		.byte	19
 7115 0021 000000   		.space	3
 7116 0024 02000000 		.word	2
 7117 0028 12       		.byte	18
 7118 0029 000000   		.space	3
 7119 002c 02000000 		.word	2
 7120 0030 12       		.byte	18
 7121 0031 000000   		.space	3
 7122 0034 00000000 		.word	0
 7123 0038 06       		.byte	6
 7124 0039 000000   		.space	3
 7125 003c 00000000 		.word	0
 7126 0040 07       		.byte	7
 7127 0041 000000   		.space	3
 7128 0044 00000000 		.word	0
 7129 0048 08       		.byte	8
 7130 0049 000000   		.space	3
 7131 004c 00000000 		.word	0
 7132 0050 01       		.byte	1
 7133 0051 000000   		.space	3
 7134 0054 01000000 		.word	1
 7135 0058 02       		.byte	2
 7136 0059 000000   		.space	3
 7137 005c 01000000 		.word	1
 7138 0060 03       		.byte	3
 7139 0061 000000   		.space	3
 7140 0064 01000000 		.word	1
 7141 0068 0C       		.byte	12
 7142 0069 000000   		.space	3
 7143 006c 00000000 		.word	0
 7144 0070 0D       		.byte	13
 7145 0071 000000   		.space	3
 7146 0074 00000000 		.word	0
 7147 0078 0E       		.byte	14
 7148 0079 000000   		.space	3
 7149 007c 00000000 		.word	0
 7150 0080 0F       		.byte	15
 7151 0081 000000   		.space	3
 7152 0084 00000000 		.word	0
 7153 0088 10       		.byte	16
 7154 0089 000000   		.space	3
 7155 008c 00000000 		.word	0
 7156 0090 18       		.byte	24
 7157 0091 000000   		.space	3
 7158 0094 00000000 		.word	0
 7159 0098 13       		.byte	19
 7160 0099 000000   		.space	3
 7161 009c 00000000 		.word	0
 7162 00a0 14       		.byte	20
 7163 00a1 000000   		.space	3
ARM GAS  /tmp/ccYL8bSL.s 			page 176


 7164 00a4 00000000 		.word	0
 7165 00a8 15       		.byte	21
 7166 00a9 000000   		.space	3
 7167 00ac 00000000 		.word	0
 7168 00b0 16       		.byte	22
 7169 00b1 000000   		.space	3
 7170 00b4 00000000 		.word	0
 7171 00b8 1E       		.byte	30
 7172 00b9 000000   		.space	3
 7173 00bc 00000000 		.word	0
 7174 00c0 19       		.byte	25
 7175 00c1 000000   		.space	3
 7176 00c4 00000000 		.word	0
 7177 00c8 1A       		.byte	26
 7178 00c9 000000   		.space	3
 7179 00cc 00000000 		.word	0
 7180 00d0 1B       		.byte	27
 7181 00d1 000000   		.space	3
 7182 00d4 00000000 		.word	0
 7183 00d8 1C       		.byte	28
 7184 00d9 000000   		.space	3
 7185 00dc 00000000 		.word	0
 7186 00e0 29       		.byte	41
 7187 00e1 000000   		.space	3
 7188 00e4 00000000 		.word	0
 7189 00e8 1F       		.byte	31
 7190 00e9 000000   		.space	3
 7191 00ec 00000000 		.word	0
 7192 00f0 20       		.byte	32
 7193 00f1 000000   		.space	3
 7194 00f4 00000000 		.word	0
 7195 00f8 21       		.byte	33
 7196 00f9 000000   		.space	3
 7197 00fc 00000000 		.word	0
 7198 0100 22       		.byte	34
 7199 0101 000000   		.space	3
 7200 0104 00000000 		.word	0
 7201 0108 24       		.byte	36
 7202 0109 000000   		.space	3
 7203 010c 00000000 		.word	0
 7204 0110 25       		.byte	37
 7205 0111 000000   		.space	3
 7206 0114 00000000 		.word	0
 7207 0118 26       		.byte	38
 7208 0119 000000   		.space	3
 7209 011c 00000000 		.word	0
 7210 0120 27       		.byte	39
 7211 0121 000000   		.space	3
 7212 0124 00000000 		.word	0
 7213 0128 28       		.byte	40
 7214 0129 000000   		.space	3
 7215 012c 00000000 		.word	0
 7216 0130 2E       		.byte	46
 7217 0131 000000   		.space	3
 7218 0134 00000000 		.word	0
 7219 0138 2E       		.byte	46
 7220 0139 000000   		.space	3
ARM GAS  /tmp/ccYL8bSL.s 			page 177


 7221 013c 00000000 		.word	0
 7222 0140 2E       		.byte	46
 7223 0141 000000   		.space	3
 7224 0144 00000000 		.word	0
 7225 0148 2E       		.byte	46
 7226 0149 000000   		.space	3
 7227 014c 00000000 		.word	0
 7228 0150 2E       		.byte	46
 7229 0151 000000   		.space	3
 7230 0154 00000000 		.word	0
 7231 0158 2E       		.byte	46
 7232 0159 000000   		.space	3
 7233 015c 00000000 		.word	0
 7234 0160 2E       		.byte	46
 7235 0161 000000   		.space	3
 7236 0164 00000000 		.word	0
 7237 0168 2E       		.byte	46
 7238 0169 000000   		.space	3
 7239 016c 00000000 		.word	0
 7240 0170 2E       		.byte	46
 7241 0171 000000   		.space	3
 7242 0174 00000000 		.word	0
 7243              		.section	.rodata.mapping_running.11153,"a"
 7244              		.align	2
 7245              		.set	.LANCHOR12,. + 0
 7248              	mapping_running.11153:
 7249 0000 63       		.byte	99
 7250 0001 000000   		.space	3
 7251 0004 FFFFFFFF 		.word	-1
 7252 0008 00       		.byte	0
 7253 0009 000000   		.space	3
 7254 000c 00000000 		.word	0
 7255 0010 01       		.byte	1
 7256 0011 000000   		.space	3
 7257 0014 00000000 		.word	0
 7258 0018 02       		.byte	2
 7259 0019 000000   		.space	3
 7260 001c 00000000 		.word	0
 7261 0020 03       		.byte	3
 7262 0021 000000   		.space	3
 7263 0024 00000000 		.word	0
 7264 0028 04       		.byte	4
 7265 0029 000000   		.space	3
 7266 002c 00000000 		.word	0
 7267 0030 12       		.byte	18
 7268 0031 000000   		.space	3
 7269 0034 00000000 		.word	0
 7270 0038 06       		.byte	6
 7271 0039 000000   		.space	3
 7272 003c 00000000 		.word	0
 7273 0040 07       		.byte	7
 7274 0041 000000   		.space	3
 7275 0044 00000000 		.word	0
 7276 0048 08       		.byte	8
 7277 0049 000000   		.space	3
 7278 004c 00000000 		.word	0
 7279 0050 09       		.byte	9
ARM GAS  /tmp/ccYL8bSL.s 			page 178


 7280 0051 000000   		.space	3
 7281 0054 00000000 		.word	0
 7282 0058 0A       		.byte	10
 7283 0059 000000   		.space	3
 7284 005c 00000000 		.word	0
 7285 0060 0B       		.byte	11
 7286 0061 000000   		.space	3
 7287 0064 00000000 		.word	0
 7288 0068 0C       		.byte	12
 7289 0069 000000   		.space	3
 7290 006c 00000000 		.word	0
 7291 0070 0D       		.byte	13
 7292 0071 000000   		.space	3
 7293 0074 00000000 		.word	0
 7294 0078 0E       		.byte	14
 7295 0079 000000   		.space	3
 7296 007c 00000000 		.word	0
 7297 0080 0F       		.byte	15
 7298 0081 000000   		.space	3
 7299 0084 00000000 		.word	0
 7300 0088 10       		.byte	16
 7301 0089 000000   		.space	3
 7302 008c 00000000 		.word	0
 7303 0090 18       		.byte	24
 7304 0091 000000   		.space	3
 7305 0094 00000000 		.word	0
 7306 0098 13       		.byte	19
 7307 0099 000000   		.space	3
 7308 009c 00000000 		.word	0
 7309 00a0 14       		.byte	20
 7310 00a1 000000   		.space	3
 7311 00a4 00000000 		.word	0
 7312 00a8 15       		.byte	21
 7313 00a9 000000   		.space	3
 7314 00ac 00000000 		.word	0
 7315 00b0 16       		.byte	22
 7316 00b1 000000   		.space	3
 7317 00b4 00000000 		.word	0
 7318 00b8 1E       		.byte	30
 7319 00b9 000000   		.space	3
 7320 00bc 00000000 		.word	0
 7321 00c0 19       		.byte	25
 7322 00c1 000000   		.space	3
 7323 00c4 00000000 		.word	0
 7324 00c8 1A       		.byte	26
 7325 00c9 000000   		.space	3
 7326 00cc 00000000 		.word	0
 7327 00d0 1B       		.byte	27
 7328 00d1 000000   		.space	3
 7329 00d4 00000000 		.word	0
 7330 00d8 1C       		.byte	28
 7331 00d9 000000   		.space	3
 7332 00dc 00000000 		.word	0
 7333 00e0 09       		.byte	9
 7334 00e1 000000   		.space	3
 7335 00e4 00000000 		.word	0
 7336 00e8 1F       		.byte	31
ARM GAS  /tmp/ccYL8bSL.s 			page 179


 7337 00e9 000000   		.space	3
 7338 00ec 00000000 		.word	0
 7339 00f0 20       		.byte	32
 7340 00f1 000000   		.space	3
 7341 00f4 00000000 		.word	0
 7342 00f8 21       		.byte	33
 7343 00f9 000000   		.space	3
 7344 00fc 00000000 		.word	0
 7345 0100 22       		.byte	34
 7346 0101 000000   		.space	3
 7347 0104 00000000 		.word	0
 7348 0108 24       		.byte	36
 7349 0109 000000   		.space	3
 7350 010c 00000000 		.word	0
 7351 0110 25       		.byte	37
 7352 0111 000000   		.space	3
 7353 0114 00000000 		.word	0
 7354 0118 26       		.byte	38
 7355 0119 000000   		.space	3
 7356 011c 00000000 		.word	0
 7357 0120 27       		.byte	39
 7358 0121 000000   		.space	3
 7359 0124 00000000 		.word	0
 7360 0128 28       		.byte	40
 7361 0129 000000   		.space	3
 7362 012c 00000000 		.word	0
 7363 0130 2E       		.byte	46
 7364 0131 000000   		.space	3
 7365 0134 00000000 		.word	0
 7366 0138 2E       		.byte	46
 7367 0139 000000   		.space	3
 7368 013c 00000000 		.word	0
 7369 0140 2E       		.byte	46
 7370 0141 000000   		.space	3
 7371 0144 00000000 		.word	0
 7372 0148 2E       		.byte	46
 7373 0149 000000   		.space	3
 7374 014c 00000000 		.word	0
 7375 0150 04       		.byte	4
 7376 0151 000000   		.space	3
 7377 0154 00000000 		.word	0
 7378 0158 05       		.byte	5
 7379 0159 000000   		.space	3
 7380 015c 00000000 		.word	0
 7381 0160 2E       		.byte	46
 7382 0161 000000   		.space	3
 7383 0164 00000000 		.word	0
 7384 0168 2E       		.byte	46
 7385 0169 000000   		.space	3
 7386 016c 00000000 		.word	0
 7387 0170 2E       		.byte	46
 7388 0171 000000   		.space	3
 7389 0174 00000000 		.word	0
 7390              		.section	.rodata.mid_menu,"a"
 7391              		.align	2
 7394              	mid_menu:
 7395 0000 C8C40B00 		.ascii	"\310\304\013\000"
ARM GAS  /tmp/ccYL8bSL.s 			page 180


 7396              		.text
 7397              	.Letext0:
 7398              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 7399              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 7400              		.file 6 "/usr/include/newlib/sys/_types.h"
 7401              		.file 7 "/usr/include/newlib/sys/reent.h"
 7402              		.file 8 "/usr/include/newlib/sys/lock.h"
 7403              		.file 9 "/usr/include/newlib/stdlib.h"
 7404              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 7405              		.file 11 "/usr/include/newlib/ctype.h"
 7406              		.file 12 "dmcp/ff_ifc.h"
 7407              		.file 13 "dmcp/dmcp.h"
 7408              		.file 14 "src/keys.h"
 7409              		.file 15 "src/menu.h"
 7410              		.file 16 "src/decNumber/decContext.h"
 7411              		.file 17 "src/decNumber/decNumber.h"
 7412              		.file 18 "src/decNumber/decimal64.h"
 7413              		.file 19 "src/decNumber/decimal128.h"
 7414              		.file 20 "src/xeq.h"
 7415              		.file 21 "src/data.h"
 7416              		.file 22 "src/display.h"
 7417              		.file 23 "src/consts.h"
 7418              		.file 24 "src/storage.h"
 7419              		.file 25 "src/catalogues.h"
 7420              		.file 26 "src/stopwatch.h"
 7421              		.file 27 "src/lcd.h"
 7422              		.file 28 "/usr/include/newlib/string.h"
 7423              		.file 29 "/usr/include/newlib/stdio.h"
 7424              		.file 30 "<built-in>"
ARM GAS  /tmp/ccYL8bSL.s 			page 181


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccYL8bSL.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/ccYL8bSL.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/ccYL8bSL.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/ccYL8bSL.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/ccYL8bSL.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccYL8bSL.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccYL8bSL.s:428    .text.set_menu_label.constprop.0:0000000000000134 $d
     /tmp/ccYL8bSL.s:435    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/ccYL8bSL.s:466    .text.disp_about:0000000000000000 $t
     /tmp/ccYL8bSL.s:474    .text.disp_about:0000000000000000 disp_about
     /tmp/ccYL8bSL.s:680    .text.disp_about:00000000000000d4 $d
     /tmp/ccYL8bSL.s:704    .text.run_menu_item:0000000000000000 $t
     /tmp/ccYL8bSL.s:712    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/ccYL8bSL.s:752    .text.set_menu:0000000000000000 $t
     /tmp/ccYL8bSL.s:760    .text.set_menu:0000000000000000 set_menu
     /tmp/ccYL8bSL.s:815    .text.set_menu:000000000000002c $d
     /tmp/ccYL8bSL.s:822    .text.set_default_menu:0000000000000000 $t
     /tmp/ccYL8bSL.s:830    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/ccYL8bSL.s:904    .text.set_default_menu:000000000000002c $d
     /tmp/ccYL8bSL.s:913    .text.toggle_default_menu:0000000000000000 $t
     /tmp/ccYL8bSL.s:921    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/ccYL8bSL.s:1023   .text.toggle_default_menu:0000000000000044 $d
     /tmp/ccYL8bSL.s:1034   .text.get_menu:0000000000000000 $t
     /tmp/ccYL8bSL.s:1042   .text.get_menu:0000000000000000 get_menu
     /tmp/ccYL8bSL.s:1058   .text.get_menu:0000000000000008 $d
     /tmp/ccYL8bSL.s:1063   .text.get_last_menu:0000000000000000 $t
     /tmp/ccYL8bSL.s:1071   .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/ccYL8bSL.s:1087   .text.get_last_menu:0000000000000008 $d
     /tmp/ccYL8bSL.s:1092   .text.set_last_menu:0000000000000000 $t
     /tmp/ccYL8bSL.s:1100   .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccYL8bSL.s:1175   .text.set_last_menu:000000000000002c $d
     /tmp/ccYL8bSL.s:1184   .text.mdot:0000000000000000 $t
     /tmp/ccYL8bSL.s:1192   .text.mdot:0000000000000000 mdot
     /tmp/ccYL8bSL.s:1283   .text.mdot:000000000000003c $d
     /tmp/ccYL8bSL.s:1288   .text.get_current_menu_ref:0000000000000000 $t
     /tmp/ccYL8bSL.s:1296   .text.get_current_menu_ref:0000000000000000 get_current_menu_ref
     /tmp/ccYL8bSL.s:1363   .text.get_current_menu_ref:0000000000000040 $d
     /tmp/ccYL8bSL.s:1378   .text.get_current_menu_ref:000000000000007c $t
     /tmp/ccYL8bSL.s:1448   .text.get_current_menu_ref:00000000000000a8 $d
     /tmp/ccYL8bSL.s:5016   .rodata.Menus:0000000000000000 Menus
     /tmp/ccYL8bSL.s:1456   .text.display_menu:0000000000000000 $t
     /tmp/ccYL8bSL.s:1464   .text.display_menu:0000000000000000 display_menu
     /tmp/ccYL8bSL.s:1712   .text.display_menu:000000000000010c $d
     /tmp/ccYL8bSL.s:1719   .text.display_current_menu:0000000000000000 $t
     /tmp/ccYL8bSL.s:1727   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccYL8bSL.s:1763   .text.all_menu_dots:0000000000000000 $t
     /tmp/ccYL8bSL.s:1771   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccYL8bSL.s:1855   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccYL8bSL.s:1860   .text.umen_store:0000000000000000 $t
     /tmp/ccYL8bSL.s:1868   .text.umen_store:0000000000000000 umen_store
     /tmp/ccYL8bSL.s:1969   .text.umen_store:0000000000000050 $d
     /tmp/ccYL8bSL.s:1974   .text.build_user_menu_from_program:0000000000000000 $t
     /tmp/ccYL8bSL.s:1982   .text.build_user_menu_from_program:0000000000000000 build_user_menu_from_program
     /tmp/ccYL8bSL.s:2393   .text.build_user_menu_from_program:0000000000000180 $d
     /tmp/ccYL8bSL.s:2406   .text.build_user_menu:0000000000000000 $t
ARM GAS  /tmp/ccYL8bSL.s 			page 182


     /tmp/ccYL8bSL.s:2414   .text.build_user_menu:0000000000000000 build_user_menu
     /tmp/ccYL8bSL.s:2430   .text.build_user_menu:0000000000000008 $d
     /tmp/ccYL8bSL.s:2435   .text.shutdown:0000000000000000 $t
     /tmp/ccYL8bSL.s:2443   .text.shutdown:0000000000000000 shutdown
     /tmp/ccYL8bSL.s:2461   .text.shutdown:000000000000000c $d
     /tmp/ccYL8bSL.s:2466   .text.is_key_pressed:0000000000000000 $t
     /tmp/ccYL8bSL.s:2474   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccYL8bSL.s:2497   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccYL8bSL.s:2502   .text.get_key:0000000000000000 $t
     /tmp/ccYL8bSL.s:2510   .text.get_key:0000000000000000 get_key
     /tmp/ccYL8bSL.s:2525   .text.get_key:0000000000000004 $d
     /tmp/ccYL8bSL.s:2530   .text.put_key:0000000000000000 $t
     /tmp/ccYL8bSL.s:2538   .text.put_key:0000000000000000 put_key
     /tmp/ccYL8bSL.s:2617   .text.put_key:000000000000003c $d
     /tmp/ccYL8bSL.s:2623   .text.shift_down:0000000000000000 $t
     /tmp/ccYL8bSL.s:2631   .text.shift_down:0000000000000000 shift_down
     /tmp/ccYL8bSL.s:2646   .text.start_key_timer:0000000000000000 $t
     /tmp/ccYL8bSL.s:2654   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccYL8bSL.s:2678   .text.start_key_timer:000000000000000c $d
     /tmp/ccYL8bSL.s:2684   .text.keyticks:0000000000000000 $t
     /tmp/ccYL8bSL.s:2692   .text.keyticks:0000000000000000 keyticks
     /tmp/ccYL8bSL.s:2723   .text.keyticks:0000000000000018 $d
     /tmp/ccYL8bSL.s:2729   .text.moveto:0000000000000000 $t
     /tmp/ccYL8bSL.s:2737   .text.moveto:0000000000000000 moveto
     /tmp/ccYL8bSL.s:2797   .text.moveto:000000000000002c $d
     /tmp/ccYL8bSL.s:2804   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccYL8bSL.s:2808   .text.print_debug:0000000000000000 $t
     /tmp/ccYL8bSL.s:2816   .text.print_debug:0000000000000000 print_debug
     /tmp/ccYL8bSL.s:2918   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccYL8bSL.s:2929   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccYL8bSL.s:2933   .text.print_debug2:0000000000000000 $t
     /tmp/ccYL8bSL.s:2941   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccYL8bSL.s:3043   .text.print_debug2:0000000000000064 $d
     /tmp/ccYL8bSL.s:3054   .text.do_now:0000000000000000 $t
     /tmp/ccYL8bSL.s:3062   .text.do_now:0000000000000000 do_now
     /tmp/ccYL8bSL.s:3097   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccYL8bSL.s:3101   .text.do_multi:0000000000000000 $t
     /tmp/ccYL8bSL.s:3109   .text.do_multi:0000000000000000 do_multi
     /tmp/ccYL8bSL.s:3139   .text.do_multi:0000000000000016 $d
     /tmp/ccYL8bSL.s:3153   .text.do_multi:0000000000000024 $t
     /tmp/ccYL8bSL.s:3568   .text.do_multi:00000000000001b8 $d
     /tmp/ccYL8bSL.s:3582   .text.program_main:0000000000000000 $t
     /tmp/ccYL8bSL.s:3590   .text.program_main:0000000000000000 program_main
     /tmp/ccYL8bSL.s:3855   .text.program_main:000000000000011c $d
     /tmp/ccYL8bSL.s:3861   .text.program_main:0000000000000128 $t
     /tmp/ccYL8bSL.s:4254   .text.program_main:00000000000002dc $d
     /tmp/ccYL8bSL.s:4295   .text.program_main:0000000000000364 $t
     /tmp/ccYL8bSL.s:4763   .text.program_main:000000000000059c $d
     /tmp/ccYL8bSL.s:4851   .bss.n_p:0000000000000000 n_p
     /tmp/ccYL8bSL.s:5000   .data.spaces:0000000000000000 spaces
     /tmp/ccYL8bSL.s:4991   .data.release:0000000000000000 release
     /tmp/ccYL8bSL.s:4964   .data.h_shift:0000000000000000 h_shift
     /tmp/ccYL8bSL.s:4955   .data.g_shift:0000000000000000 g_shift
     /tmp/ccYL8bSL.s:4947   .data.f_shift:0000000000000000 f_shift
     /tmp/ccYL8bSL.s:4973   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccYL8bSL.s:4982   .data.no_key:0000000000000000 no_key
ARM GAS  /tmp/ccYL8bSL.s 			page 183


     /tmp/ccYL8bSL.s:5007   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccYL8bSL.s:4791   .rodata.str1.4:0000000000000000 $d
     /tmp/ccYL8bSL.s:7394   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccYL8bSL.s:4832   .bss.default_menu:0000000000000000 default_menu
     /tmp/ccYL8bSL.s:4838   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccYL8bSL.s:4826   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccYL8bSL.s:4941   .data.cmplx_key_string:0000000000000000 cmplx_key_string
     /tmp/ccYL8bSL.s:4934   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/ccYL8bSL.s:4865   .data.UserMenu:0000000000000000 UserMenu
     /tmp/ccYL8bSL.s:4808   .rodata:0000000000000000 $d
     /tmp/ccYL8bSL.s:4827   .bss.current_menu:0000000000000000 $d
     /tmp/ccYL8bSL.s:4833   .bss.default_menu:0000000000000000 $d
     /tmp/ccYL8bSL.s:4839   .bss.last_menu:0000000000000000 $d
     /tmp/ccYL8bSL.s:4841   .bss.mdots:0000000000000000 $d
     /tmp/ccYL8bSL.s:4845   .bss.mdots:0000000000000000 mdots
     /tmp/ccYL8bSL.s:4848   .bss.n_p:0000000000000000 $d
     /tmp/ccYL8bSL.s:4854   .bss.start_ticks:0000000000000000 $d
     /tmp/ccYL8bSL.s:4858   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccYL8bSL.s:4861   .data.UserMenu:0000000000000000 $d
     /tmp/ccYL8bSL.s:4930   .data.arrow_key_string:0000000000000000 $d
     /tmp/ccYL8bSL.s:4937   .data.cmplx_key_string:0000000000000000 $d
     /tmp/ccYL8bSL.s:4944   .data.f_shift:0000000000000000 $d
     /tmp/ccYL8bSL.s:4952   .data.g_shift:0000000000000000 $d
     /tmp/ccYL8bSL.s:4960   .data.h_shift:0000000000000000 $d
     /tmp/ccYL8bSL.s:4969   .data.heartbeat:0000000000000000 $d
     /tmp/ccYL8bSL.s:4978   .data.no_key:0000000000000000 $d
     /tmp/ccYL8bSL.s:4987   .data.release:0000000000000000 $d
     /tmp/ccYL8bSL.s:4996   .data.spaces:0000000000000000 $d
     /tmp/ccYL8bSL.s:5003   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccYL8bSL.s:5013   .rodata.Menus:0000000000000000 $d
     /tmp/ccYL8bSL.s:6656   .rodata.mapping_alpha.11152:0000000000000000 $d
     /tmp/ccYL8bSL.s:6660   .rodata.mapping_alpha.11152:0000000000000000 mapping_alpha.11152
     /tmp/ccYL8bSL.s:6803   .rodata.mapping_fshift.11150:0000000000000000 $d
     /tmp/ccYL8bSL.s:6807   .rodata.mapping_fshift.11150:0000000000000000 mapping_fshift.11150
     /tmp/ccYL8bSL.s:6950   .rodata.mapping_gshift.11151:0000000000000000 $d
     /tmp/ccYL8bSL.s:6954   .rodata.mapping_gshift.11151:0000000000000000 mapping_gshift.11151
     /tmp/ccYL8bSL.s:7097   .rodata.mapping_none.11149:0000000000000000 $d
     /tmp/ccYL8bSL.s:7101   .rodata.mapping_none.11149:0000000000000000 mapping_none.11149
     /tmp/ccYL8bSL.s:7244   .rodata.mapping_running.11153:0000000000000000 $d
     /tmp/ccYL8bSL.s:7248   .rodata.mapping_running.11153:0000000000000000 mapping_running.11153
     /tmp/ccYL8bSL.s:7391   .rodata.mid_menu:0000000000000000 $d

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
RectPolConv
xcopy
SvnRevision
memcpy
main_ram
pixel_length
strncpy
findmultilbl
do_inc
getprog
prt_umen
ARM GAS  /tmp/ccYL8bSL.s 			page 184


catcmd
strcpy
sprintf
process_keycode_with_shift
reset_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
KeyCallback
JustDisplayed
Pause
Running
DM42_Ticker
is_dot
dot
finish_LEQ
get_alpha_state
StopWatchStatus
JustStopped

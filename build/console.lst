ARM GAS  /tmp/cccWRI8T.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC3:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** //#include <menu.h>
   2:src/menu.c    **** struct _menu UserMenu =
   3:src/menu.c    ****   {
   4:src/menu.c    ****     "User Menu", 
   5:src/menu.c    ****     {
   6:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   7:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   8:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   9:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  10:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  11:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
  12:src/menu.c    ****     }
  13:src/menu.c    ****   };
  14:src/menu.c    **** 
  15:src/menu.c    **** const char* arrow_key_string = "--\015";
  16:src/menu.c    **** const char* cmplx_key_string = "CPX";
  17:src/menu.c    **** 
  18:src/menu.c    **** menu_name current_menu = 0;
  19:src/menu.c    **** menu_name last_menu = 0;
  20:src/menu.c    **** menu_name default_menu = 0;
  21:src/menu.c    **** 
  22:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted);
  23:src/menu.c    **** 
ARM GAS  /tmp/cccWRI8T.s 			page 2


  24:src/menu.c    **** 
  25:src/menu.c    **** 
  26:src/menu.c    **** /* 
  27:src/menu.c    ****  * System menu stuff
  28:src/menu.c    ****  */
  29:src/menu.c    **** 
  30:src/menu.c    **** #define MI_ABOUT_PGM 11
  31:src/menu.c    **** 
  32:src/menu.c    **** const uint8_t mid_menu[] = {
  33:src/menu.c    ****     MI_SYSTEM_ENTER,
  34:src/menu.c    ****     MI_MSC,
  35:src/menu.c    ****     MI_ABOUT_PGM,
  36:src/menu.c    ****     0 }; // Terminator
  37:src/menu.c    **** 
  38:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  39:src/menu.c    **** 
  40:src/menu.c    **** void disp_about(void);
  41:src/menu.c    **** 
  42:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  43:src/menu.c    ****   int ret = 0;
  44:src/menu.c    **** 
  45:src/menu.c    ****   switch(line_id) {
  46:src/menu.c    ****     case MI_ABOUT_PGM:
  47:src/menu.c    ****       disp_about();
  48:src/menu.c    ****       break;
  49:src/menu.c    **** 
  50:src/menu.c    ****      default:
  51:src/menu.c    ****       ret = MRET_UNIMPL;
  52:src/menu.c    ****       break;
  53:src/menu.c    ****   }
  54:src/menu.c    **** 
  55:src/menu.c    ****   return ret;
  56:src/menu.c    **** }
  57:src/menu.c    **** 
  58:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 58 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  59:src/menu.c    ****   const char * ln;
  40              		.loc 1 59 3 view .LVU1
  60:src/menu.c    **** 
  61:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 61 3 view .LVU2
  62:src/menu.c    **** 
  63:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  64:src/menu.c    **** 
  65:src/menu.c    ****   default:
  66:src/menu.c    ****     ln = NULL;
  42              		.loc 1 66 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  61:src/menu.c    **** 
  44              		.loc 1 61 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
  67:src/menu.c    ****     break;
  68:src/menu.c    ****   }
ARM GAS  /tmp/cccWRI8T.s 			page 3


  69:src/menu.c    **** 
  70:src/menu.c    ****   return ln;
  71:src/menu.c    **** }
  46              		.loc 1 71 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 71 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC3
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB37:
  72:src/menu.c    **** 
  73:src/menu.c    **** void disp_about() {
  74:src/menu.c    ****   lcd_clear_buf();
  75:src/menu.c    ****   lcd_writeClr(t24);
  76:src/menu.c    **** 
  77:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  78:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
  79:src/menu.c    ****   t24->y += 5;
  80:src/menu.c    **** #ifdef TOP_ROW
  81:src/menu.c    ****   lcd_print(t24, "top row version,");
  82:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
  83:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  84:src/menu.c    ****   lcd_print(t24, "with a longer alpha display,");
  85:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  86:src/menu.c    ****   #else
  87:src/menu.c    ****   lcd_print(t24, "Just like the original calculator");
  88:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed,");
  89:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  90:src/menu.c    **** #endif
  91:src/menu.c    ****   t24->y += 5;
  92:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
  93:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
  94:src/menu.c    **** 
  95:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
  96:src/menu.c    ****   t24->x = 20;
  97:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
  98:src/menu.c    **** 
  99:src/menu.c    ****   lcd_refresh();
 100:src/menu.c    **** 
 101:src/menu.c    ****   wait_for_key_press();
 102:src/menu.c    **** }
ARM GAS  /tmp/cccWRI8T.s 			page 4


 103:src/menu.c    **** 
 104:src/menu.c    **** /*
 105:src/menu.c    ****  * WP34s menu code
 106:src/menu.c    ****  */
 107:src/menu.c    **** 
 108:src/menu.c    **** void set_menu ( menu_name new_menu ) {
 109:src/menu.c    ****   menu_name m = current_menu;
 110:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 111:src/menu.c    ****     current_menu = default_menu;
 112:src/menu.c    ****   }
 113:src/menu.c    ****   else if (new_menu == M_Last) { // go to last menu
 114:src/menu.c    ****     current_menu = last_menu;
 115:src/menu.c    ****   }
 116:src/menu.c    ****   else {
 117:src/menu.c    ****     current_menu = new_menu; // change to new menu
 118:src/menu.c    ****   }
 119:src/menu.c    ****   if ( (m != M_Arrow) && (m != M_Alpha) ) last_menu = m;
 120:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 121:src/menu.c    **** }
 122:src/menu.c    **** 
 123:src/menu.c    **** void set_default_menu () {
 124:src/menu.c    ****   set_menu (default_menu);
 125:src/menu.c    **** }
 126:src/menu.c    **** 
 127:src/menu.c    **** void toggle_default_menu () {
 128:src/menu.c    ****   if (current_menu == M_Blank) {
 129:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 130:src/menu.c    ****     return;
 131:src/menu.c    ****   }
 132:src/menu.c    ****   else if (current_menu == M_Blank2) {
 133:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 134:src/menu.c    ****   }
 135:src/menu.c    ****   else {
 136:src/menu.c    ****     set_default_menu();
 137:src/menu.c    ****   }
 138:src/menu.c    **** }
 139:src/menu.c    **** 
 140:src/menu.c    **** menu_name get_menu () {
 141:src/menu.c    ****   return current_menu;
 142:src/menu.c    **** }
 143:src/menu.c    **** 
 144:src/menu.c    **** menu_name get_last_menu () {
 145:src/menu.c    ****   return last_menu;
 146:src/menu.c    **** }
 147:src/menu.c    **** 
 148:src/menu.c    **** void display_current_menu () {
 149:src/menu.c    ****   display_menu (get_current_menu_ref());
 150:src/menu.c    **** }
 151:src/menu.c    **** 
 152:src/menu.c    **** void set_last_menu () {
 153:src/menu.c    ****   set_menu (M_Last);
 154:src/menu.c    **** }
 155:src/menu.c    **** 
 156:src/menu.c    **** static unsigned char mdots[200][2];
 157:src/menu.c    **** 
 158:src/menu.c    **** static const struct _menu Menus[] = {
 159:src/menu.c    ****   {
ARM GAS  /tmp/cccWRI8T.s 			page 5


 160:src/menu.c    ****     "M_Blank", // 0
 161:src/menu.c    ****     { 
 162:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 163:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 164:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 165:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 166:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 167:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 168:src/menu.c    ****     }    
 169:src/menu.c    ****   },
 170:src/menu.c    ****   {
 171:src/menu.c    ****     "M_Clear", // 1
 172:src/menu.c    ****     { 
 173:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 174:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 175:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 176:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 177:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 178:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 179:src/menu.c    ****     }    
 180:src/menu.c    ****   },
 181:src/menu.c    ****   {
 182:src/menu.c    ****     "M_Disp", // 2
 183:src/menu.c    ****     { 
 184:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 185:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 186:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 187:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 188:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 189:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 190:src/menu.c    ****     }
 191:src/menu.c    ****   },
 192:src/menu.c    ****   {
 193:src/menu.c    ****     "M_Base", // 3
 194:src/menu.c    ****     { 
 195:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 196:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 197:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 198:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 199:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 200:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 201:src/menu.c    ****     }
 202:src/menu.c    ****   },
 203:src/menu.c    ****   {
 204:src/menu.c    ****     "M_Angles", // 4
 205:src/menu.c    ****     { 
 206:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 207:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 208:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 209:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 210:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 211:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 212:src/menu.c    ****     }
 213:src/menu.c    ****       
 214:src/menu.c    ****   },
 215:src/menu.c    ****   {
 216:src/menu.c    ****     "M_Misc", // 5
ARM GAS  /tmp/cccWRI8T.s 			page 6


 217:src/menu.c    ****     { 
 218:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 219:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 220:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 221:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 222:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 223:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 224:src/menu.c    ****     }
 225:src/menu.c    ****   },
 226:src/menu.c    ****   {
 227:src/menu.c    ****     "M_Swap", // 6
 228:src/menu.c    ****     { 
 229:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 230:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 231:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 232:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 233:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 234:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 235:src/menu.c    ****     }    
 236:src/menu.c    ****   },
 237:src/menu.c    ****   {
 238:src/menu.c    ****     "M_Program", // 7
 239:src/menu.c    ****     { 
 240:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 241:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 242:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 243:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 244:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 245:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 246:src/menu.c    ****     }
 247:src/menu.c    ****   },
 248:src/menu.c    ****   {
 249:src/menu.c    ****     "M_Setup1", // 8
 250:src/menu.c    ****     { 
 251:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 252:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 253:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 254:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 255:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 256:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 257:src/menu.c    ****     }
 258:src/menu.c    ****   },
 259:src/menu.c    ****   {
 260:src/menu.c    ****     "M_Arrow", // 9
 261:src/menu.c    ****     { 
 262:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 263:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 264:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 265:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "\015HMS" },
 266:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 267:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 268:src/menu.c    ****     }
 269:src/menu.c    ****   },
 270:src/menu.c    ****   {
 271:src/menu.c    ****     "M_Flags", // 10
 272:src/menu.c    ****     { 
 273:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
ARM GAS  /tmp/cccWRI8T.s 			page 7


 274:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 275:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 276:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 277:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 278:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 279:src/menu.c    ****     }
 280:src/menu.c    ****   },
 281:src/menu.c    ****   {
 282:src/menu.c    ****     "M_Prob", // 11
 283:src/menu.c    ****     { 
 284:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 285:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 286:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 287:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 288:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 289:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 290:src/menu.c    ****     }
 291:src/menu.c    ****   },
 292:src/menu.c    ****   {
 293:src/menu.c    ****     "M_Stats", // 12
 294:src/menu.c    ****     /*
 295:src/menu.c    ****      *xbar, sd;
 296:src/menu.c    ****      *yhat, xhat;
 297:src/menu.c    ****      *corr, L.R.;
 298:src/menu.c    ****      *best, linear;
 299:src/menu.c    ****      *ln, exp;
 300:src/menu.c    ****      *cmplx, power;
 301:src/menu.c    ****      *No, sums is already on g9.
 302:src/menu.c    ****      */
 303:src/menu.c    ****     { 
 304:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 305:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 306:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 307:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 308:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 309:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 310:src/menu.c    ****     }
 311:src/menu.c    ****   },
 312:src/menu.c    ****   {
 313:src/menu.c    ****     "M_Setup2", // 13
 314:src/menu.c    ****     { 
 315:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 316:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 317:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 318:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 319:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 320:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 321:src/menu.c    ****     }
 322:src/menu.c    ****   },
 323:src/menu.c    ****   {
 324:src/menu.c    ****     "M_Solve", // 14
 325:src/menu.c    ****     { 
 326:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 327:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 328:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 329:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 330:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
ARM GAS  /tmp/cccWRI8T.s 			page 8


 331:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 332:src/menu.c    ****     }
 333:src/menu.c    ****   },
 334:src/menu.c    ****   {
 335:src/menu.c    ****     "M_Blank2", // 15
 336:src/menu.c    ****     { 
 337:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 338:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 339:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 340:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 341:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 342:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 343:src/menu.c    ****     }    
 344:src/menu.c    ****   },
 345:src/menu.c    ****   {
 346:src/menu.c    ****     "M_Alpha", // 16
 347:src/menu.c    ****     { 
 348:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 349:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 350:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 351:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 352:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 353:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 354:src/menu.c    ****     }    
 355:src/menu.c    ****   },
 356:src/menu.c    ****   {
 357:src/menu.c    ****     "M_C_Lock", // 17
 358:src/menu.c    ****     { 
 359:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 360:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 361:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "CHS\006y", "CHS\006x" },
 362:src/menu.c    ****       { { K21, 1 }, { K00, 1 }, "x\027y", "HYP" },
 363:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 364:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 365:src/menu.c    ****     }    
 366:src/menu.c    ****   },
 367:src/menu.c    ****   {
 368:src/menu.c    ****     "M_Clear_C", // 18
 369:src/menu.c    ****     { 
 370:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 371:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 372:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 373:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, NO_KEY, "CLStk", "" },
 374:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 375:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 376:src/menu.c    ****     }    
 377:src/menu.c    ****   },
 378:src/menu.c    ****   {
 379:src/menu.c    ****     "M_Swap_C", // 19
 380:src/menu.c    ****     { 
 381:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 382:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 383:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 384:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 385:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 386:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 387:src/menu.c    ****     }    
ARM GAS  /tmp/cccWRI8T.s 			page 9


 388:src/menu.c    ****   },
 389:src/menu.c    ****   {
 390:src/menu.c    ****     "M_Arrow_C", // 20
 391:src/menu.c    ****     { 
 392:src/menu.c    ****       { NO_KEY, { K10, 2 }, "", "DEG" },
 393:src/menu.c    ****       { NO_KEY, { K11, 2 }, "", "RAD" },
 394:src/menu.c    ****       { NO_KEY, { K12, 2 }, "", "Grad" },
 395:src/menu.c    ****       { NO_KEY, { K10, 1 }, "", "\015HMS" },
 396:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 397:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 398:src/menu.c    ****     }
 399:src/menu.c    ****   },
 400:src/menu.c    ****   {
 401:src/menu.c    ****     "M_Prob_C", // 21
 402:src/menu.c    ****     { 
 403:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_CMON | OP_LNGAMMA }, "\024\006!", "\024\006Ln\006\202" },
 404:src/menu.c    ****       { { K_OP, OP_CDYA | OP_COMB }, NO_KEY, "\024\006Cy,x", "" },
 405:src/menu.c    ****       { { K_OP, OP_CDYA | OP_PERM }, NO_KEY, "\024\006Py,x", "" },
 406:src/menu.c    ****       { NO_KEY, NO_KEY , "", "" },
 407:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 408:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 409:src/menu.c    ****     }
 410:src/menu.c    ****   },
 411:src/menu.c    ****   {
 412:src/menu.c    ****     "M_Blank2_C", // 22
 413:src/menu.c    ****     { 
 414:src/menu.c    ****       { { K00, 1 }, NO_KEY, "HYP", "" },
 415:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 416:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 417:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 418:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 419:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 420:src/menu.c    ****     }    
 421:src/menu.c    ****   },
 422:src/menu.c    ****   {
 423:src/menu.c    ****     "M_Misc_C", // 23
 424:src/menu.c    ****     { 
 425:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 426:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 427:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "0\015Re", "Log\213" },
 428:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "0\015Im", "||el" },
 429:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", ".\034" },
 430:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "./" },
 431:src/menu.c    ****     }
 432:src/menu.c    ****   },
 433:src/menu.c    ****   {
 434:src/menu.c    ****     "M_Usermenu", // 24
 435:src/menu.c    ****     { 
 436:src/menu.c    ****       { { K_OP, 0x0000fb00  }, NO_KEY, "UMEN", "" },
 437:src/menu.c    ****       { { K_OP, 0x314dfb55 }, { K_OP, 0x344dfb55 }, "UM1", "UM4" },
 438:src/menu.c    ****       { { K_OP, 0x324dfb55 }, { K_OP, 0x354dfb55 }, "UM2", "UM5" },
 439:src/menu.c    ****       { { K_OP, 0x334dfb55 }, { K_OP, 0x364dfb55 }, "UM3", "UM6" },
 440:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "" },
 441:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "" },
 442:src/menu.c    ****     }
 443:src/menu.c    ****   },
 444:src/menu.c    **** 
ARM GAS  /tmp/cccWRI8T.s 			page 10


 445:src/menu.c    **** };  
 446:src/menu.c    **** 
 447:src/menu.c    **** /* This code is the set_status_sized code with small changes
 448:src/menu.c    ****  * and non-DM42 code removed.
 449:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 450:src/menu.c    ****  */
 451:src/menu.c    **** #define MENU_WIDTH 32
 452:src/menu.c    **** 
 453:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 453 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 454:src/menu.c    ****   // dotcol is the number of the starting dot column
 455:src/menu.c    ****   // shifted is 1 if shifted
 456:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 456 3 view .LVU8
 457:src/menu.c    **** 
 458:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 459:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 459 3 view .LVU9
 460:src/menu.c    **** 
 461:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 461 3 view .LVU10
 453:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 453 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 453:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 453 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 462:src/menu.c    ****   int i, j, xmax;
 463:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 463 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
  96 000e B4BF     		ite	lt
  97 0010 01F11F03 		addlt	r3, r1, #31
  98 0014 0B46     		movge	r3, r1
 464:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 465:src/menu.c    **** 
 466:src/menu.c    ****   forceDispPlot=0;
  99              		.loc 1 466 16 view .LVU14
 100 0016 4848     		ldr	r0, .L41
 101              	.LVL3:
 453:src/menu.c    ****   // dotcol is the number of the starting dot column
 102              		.loc 1 453 13 view .LVU15
ARM GAS  /tmp/cccWRI8T.s 			page 11


 103 0018 0F46     		mov	r7, r1
 104              	.LVL4:
 462:src/menu.c    ****   int i, j, xmax;
 105              		.loc 1 462 3 is_stmt 1 view .LVU16
 463:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 106              		.loc 1 463 3 view .LVU17
 467:src/menu.c    **** 
 468:src/menu.c    **** #ifdef RP_PREFIX
 469:src/menu.c    ****   RectPolConv = 0;
 107              		.loc 1 469 15 is_stmt 0 view .LVU18
 108 001a 4849     		ldr	r1, .L41+4
 109              	.LVL5:
 466:src/menu.c    **** 
 110              		.loc 1 466 16 view .LVU19
 111 001c 0022     		movs	r2, #0
 112              	.LVL6:
 466:src/menu.c    **** 
 113              		.loc 1 466 16 view .LVU20
 114 001e 0270     		strb	r2, [r0]
 115              		.loc 1 469 15 view .LVU21
 116 0020 0A60     		str	r2, [r1]
 470:src/menu.c    **** #endif
 471:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 117              		.loc 1 471 10 view .LVU22
 118 0022 019A     		ldr	r2, [sp, #4]
 119 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 463:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 120              		.loc 1 463 30 view .LVU23
 121 0026 23F01F03 		bic	r3, r3, #31
 463:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 122              		.loc 1 463 8 view .LVU24
 123 002a 03F12009 		add	r9, r3, #32
 124              	.LVL7:
 464:src/menu.c    **** 
 125              		.loc 1 464 3 is_stmt 1 view .LVU25
 466:src/menu.c    **** 
 126              		.loc 1 466 3 view .LVU26
 469:src/menu.c    **** #endif
 127              		.loc 1 469 3 view .LVU27
 128              		.loc 1 471 3 view .LVU28
 129              		.loc 1 471 9 view .LVU29
 130 002e 002D     		cmp	r5, #0
 131 0030 78D0     		beq	.L7
 132              		.loc 1 471 23 is_stmt 0 view .LVU30
 133 0032 4F45     		cmp	r7, r9
 134 0034 76DC     		bgt	.L7
 135              	.LBB45:
 472:src/menu.c    ****     int c;
 473:src/menu.c    ****     int width;
 474:src/menu.c    ****     unsigned char cmap[6];
 475:src/menu.c    **** 
 476:src/menu.c    ****     int real_width;
 477:src/menu.c    ****     int current_smallp;
 478:src/menu.c    **** 
 479:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 480:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 481:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
ARM GAS  /tmp/cccWRI8T.s 			page 12


 482:src/menu.c    ****     //           01 -> (not used)
 483:src/menu.c    ****     //           10 -> use big font
 484:src/menu.c    ****     //           11 -> use small font
 485:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 486:src/menu.c    ****     if (str[0] == '\007') {
 136              		.loc 1 486 8 view .LVU31
 137 0036 072D     		cmp	r5, #7
 138              	.LBE45:
 459:src/menu.c    **** 
 139              		.loc 1 459 7 view .LVU32
 140 0038 4FF0FF04 		mov	r4, #255
 141              	.LVL8:
 142              	.LBB62:
 472:src/menu.c    ****     int c;
 143              		.loc 1 472 5 is_stmt 1 view .LVU33
 473:src/menu.c    ****     unsigned char cmap[6];
 144              		.loc 1 473 5 view .LVU34
 474:src/menu.c    **** 
 145              		.loc 1 474 5 view .LVU35
 476:src/menu.c    ****     int current_smallp;
 146              		.loc 1 476 5 view .LVU36
 477:src/menu.c    **** 
 147              		.loc 1 477 5 view .LVU37
 148              		.loc 1 486 5 view .LVU38
 487:src/menu.c    ****       width = str[1] & 0x1F;
 488:src/menu.c    ****       switch (str[1] & 0x60) {
 489:src/menu.c    ****       default:
 490:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 491:src/menu.c    **** 	break;
 492:src/menu.c    ****       case 0x40:	current_smallp = 0;
 493:src/menu.c    **** 	break;
 494:src/menu.c    ****       case 0x60:	current_smallp = 1;
 149              		.loc 1 494 33 is_stmt 0 view .LVU39
 150 003c 4FF0010A 		mov	r10, #1
 486:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 486 8 view .LVU40
 152 0040 64D1     		bne	.L11
 153              	.LVL9:
 154              	.L39:
 487:src/menu.c    ****       width = str[1] & 0x1F;
 155              		.loc 1 487 7 is_stmt 1 view .LVU41
 487:src/menu.c    ****       width = str[1] & 0x1F;
 156              		.loc 1 487 18 is_stmt 0 view .LVU42
 157 0042 019B     		ldr	r3, [sp, #4]
 158 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 159 0046 06F06003 		and	r3, r6, #96
 488:src/menu.c    ****       default:
 160              		.loc 1 488 7 view .LVU43
 161 004a 402B     		cmp	r3, #64
 487:src/menu.c    ****       width = str[1] & 0x1F;
 162              		.loc 1 487 13 view .LVU44
 163 004c 06F01F06 		and	r6, r6, #31
 164              	.LVL10:
 488:src/menu.c    ****       default:
 165              		.loc 1 488 7 is_stmt 1 view .LVU45
 166 0050 6CD0     		beq	.L34
 167 0052 602B     		cmp	r3, #96
ARM GAS  /tmp/cccWRI8T.s 			page 13


 168 0054 6AD1     		bne	.L34
 169              		.loc 1 494 18 view .LVU46
 170              	.LVL11:
 495:src/menu.c    **** 	break;
 171              		.loc 1 495 2 view .LVU47
 496:src/menu.c    ****       }
 497:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 172              		.loc 1 497 7 view .LVU48
 173              		.loc 1 497 11 is_stmt 0 view .LVU49
 174 0056 019B     		ldr	r3, [sp, #4]
 175 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 494:src/menu.c    **** 	break;
 176              		.loc 1 494 33 view .LVU50
 177 005a 0123     		movs	r3, #1
 178 005c 0093     		str	r3, [sp]
 179 005e 00F58075 		add	r5, r0, #256
 180              	.LVL12:
 181              	.L15:
 498:src/menu.c    ****       str += 3;
 182              		.loc 1 498 7 is_stmt 1 view .LVU51
 499:src/menu.c    **** 
 500:src/menu.c    ****       real_width = charlengths(c);
 183              		.loc 1 500 20 is_stmt 0 view .LVU52
 184 0062 2846     		mov	r0, r5
 185 0064 FFF7FEFF 		bl	charlengths
 186              	.LVL13:
 498:src/menu.c    ****       str += 3;
 187              		.loc 1 498 11 view .LVU53
 188 0068 019B     		ldr	r3, [sp, #4]
 189 006a 0333     		adds	r3, r3, #3
 190 006c 0193     		str	r3, [sp, #4]
 191              	.LVL14:
 192              		.loc 1 500 7 is_stmt 1 view .LVU54
 501:src/menu.c    ****     } else {
 502:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 503:src/menu.c    ****       real_width = width = charlengths(c);
 504:src/menu.c    ****       current_smallp = smallp;
 505:src/menu.c    ****     }
 506:src/menu.c    **** 
 507:src/menu.c    ****     if (x + real_width > xmax)
 193              		.loc 1 507 5 view .LVU55
 194              		.loc 1 507 11 is_stmt 0 view .LVU56
 195 006e C319     		adds	r3, r0, r7
 196              	.LVL15:
 197              		.loc 1 507 8 view .LVU57
 198 0070 9945     		cmp	r9, r3
 199 0072 57DB     		blt	.L7
 200              	.L40:
 508:src/menu.c    ****       break;
 509:src/menu.c    **** 
 510:src/menu.c    ****     if (posns_state != current_smallp) {
 201              		.loc 1 510 5 is_stmt 1 view .LVU58
 202              		.loc 1 510 8 is_stmt 0 view .LVU59
 203 0074 009B     		ldr	r3, [sp]
 204 0076 A342     		cmp	r3, r4
 511:src/menu.c    ****       findlengths(posns, current_smallp);
 205              		.loc 1 511 7 view .LVU60
ARM GAS  /tmp/cccWRI8T.s 			page 14


 206 0078 07AB     		add	r3, sp, #28
 510:src/menu.c    ****       findlengths(posns, current_smallp);
 207              		.loc 1 510 8 view .LVU61
 208 007a 05D0     		beq	.L18
 209              		.loc 1 511 7 is_stmt 1 view .LVU62
 210 007c 1846     		mov	r0, r3
 211              	.LVL16:
 212              		.loc 1 511 7 is_stmt 0 view .LVU63
 213 007e 0099     		ldr	r1, [sp]
 214 0080 0393     		str	r3, [sp, #12]
 215 0082 FFF7FEFF 		bl	findlengths
 216              	.LVL17:
 217 0086 039B     		ldr	r3, [sp, #12]
 512:src/menu.c    ****       posns_state = current_smallp;
 218              		.loc 1 512 7 is_stmt 1 view .LVU64
 219              	.LVL18:
 220              	.L18:
 513:src/menu.c    ****     }
 514:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 221              		.loc 1 514 5 view .LVU65
 222 0088 009A     		ldr	r2, [sp]
 223 008a 2846     		mov	r0, r5
 224 008c 05A9     		add	r1, sp, #20
 225 008e FFF7FEFF 		bl	unpackchar
 226              	.LVL19:
 515:src/menu.c    **** 
 516:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 227              		.loc 1 516 5 view .LVU66
 228              		.loc 1 516 15 view .LVU67
 229 0092 029B     		ldr	r3, [sp, #8]
 230 0094 03EB4704 		add	r4, r3, r7, lsl #1
 231 0098 294B     		ldr	r3, .L41+8
 232 009a 0DF1140B 		add	fp, sp, #20
 233 009e 1C44     		add	r4, r4, r3
 514:src/menu.c    **** 
 234              		.loc 1 514 5 is_stmt 0 view .LVU68
 235 00a0 4FF0050E 		mov	lr, #5
 236 00a4 A9EB0705 		sub	r5, r9, r7
 237              	.LVL20:
 238              	.L19:
 517:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 239              		.loc 1 517 17 is_stmt 1 view .LVU69
 240              		.loc 1 517 7 is_stmt 0 view .LVU70
 241 00a8 002E     		cmp	r6, #0
 242 00aa 1FDD     		ble	.L25
 518:src/menu.c    **** 	if (x+j >= xmax)
 243              		.loc 1 518 2 is_stmt 1 view .LVU71
 244              		.loc 1 518 5 is_stmt 0 view .LVU72
 245 00ac B945     		cmp	r9, r7
 246 00ae 1DDD     		ble	.L25
 247              	.LBB46:
 248              	.LBB47:
 249              	.LBB48:
 250              	.LBB49:
 519:src/menu.c    **** 	  break;
 520:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 521:src/menu.c    ****       }
ARM GAS  /tmp/cccWRI8T.s 			page 15


 522:src/menu.c    ****     }
 523:src/menu.c    ****     x += width;
 524:src/menu.c    ****   }
 525:src/menu.c    **** }
 526:src/menu.c    **** 
 527:src/menu.c    **** 
 528:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 529:src/menu.c    **** 
 530:src/menu.c    **** int pixel_length(const char *s, int smallp)
 531:src/menu.c    **** {
 532:src/menu.c    ****   int len = 0;
 533:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 534:src/menu.c    ****   while (*s != '\0') {
 535:src/menu.c    ****     if (s[0] == '\007') {
 536:src/menu.c    ****       len += s[1] & 0x1F;
 537:src/menu.c    ****       s += 3;
 538:src/menu.c    ****       continue;
 539:src/menu.c    ****     }
 540:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 541:src/menu.c    ****   }
 542:src/menu.c    ****   return len;
 543:src/menu.c    **** }
 544:src/menu.c    **** */
 545:src/menu.c    **** 
 546:src/menu.c    **** 
 547:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 548:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 549:src/menu.c    ****   if (on) {
 550:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 551:src/menu.c    ****   }
 552:src/menu.c    ****   else {
 553:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 251              		.loc 1 553 25 view .LVU73
 252 00b0 0AFA0EFC 		lsl	ip, r10, lr
 253              		.loc 1 553 17 view .LVU74
 254 00b4 4FFA8CFC 		sxtb	ip, ip
 255              	.LBE49:
 256              	.LBE48:
 257              	.LBE47:
 258              	.LBE46:
 520:src/menu.c    ****       }
 259              		.loc 1 520 31 view .LVU75
 260 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 261              	.LBB59:
 262              	.LBB56:
 263              	.LBB53:
 264              	.LBB50:
 265              		.loc 1 553 17 view .LVU76
 266 00bc 6FEA0C08 		mvn	r8, ip
 267              	.LBE50:
 268              	.LBE53:
 269              	.LBE56:
 270              	.LBE59:
 517:src/menu.c    **** 	if (x+j >= xmax)
 271              		.loc 1 517 13 view .LVU77
 272 00c0 0023     		movs	r3, #0
 273 00c2 01E0     		b	.L20
ARM GAS  /tmp/cccWRI8T.s 			page 16


 274              	.LVL21:
 275              	.L24:
 518:src/menu.c    **** 	  break;
 276              		.loc 1 518 5 view .LVU78
 277 00c4 9D42     		cmp	r5, r3
 278 00c6 11D0     		beq	.L25
 279              	.LVL22:
 280              	.L20:
 520:src/menu.c    ****       }
 281              		.loc 1 520 2 is_stmt 1 view .LVU79
 282              	.LBB60:
 283              	.LBI46:
 547:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 547 6 view .LVU80
 285              	.LBB57:
 548:src/menu.c    ****   if (on) {
 286              		.loc 1 548 3 view .LVU81
 287              	.LBB54:
 288              	.LBI48:
 547:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 289              		.loc 1 547 6 view .LVU82
 290              	.LBB51:
 549:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 291              		.loc 1 549 3 view .LVU83
 292              	.LBE51:
 293              	.LBE54:
 548:src/menu.c    ****   if (on) {
 294              		.loc 1 548 6 is_stmt 0 view .LVU84
 295 00c8 DA19     		adds	r2, r3, r7
 296              	.LVL23:
 548:src/menu.c    ****   if (on) {
 297              		.loc 1 548 6 view .LVU85
 298 00ca C72A     		cmp	r2, #199
 299              	.LBE57:
 300              	.LBE60:
 520:src/menu.c    ****       }
 301              		.loc 1 520 46 view .LVU86
 302 00cc 40FA03F1 		asr	r1, r0, r3
 303              	.LBB61:
 304              	.LBB58:
 548:src/menu.c    ****   if (on) {
 305              		.loc 1 548 6 view .LVU87
 306 00d0 09D8     		bhi	.L22
 307              	.LBB55:
 308              	.LBB52:
 550:src/menu.c    ****   }
 309              		.loc 1 550 5 is_stmt 1 view .LVU88
 310              		.loc 1 553 5 view .LVU89
 550:src/menu.c    ****   }
 311              		.loc 1 550 17 is_stmt 0 view .LVU90
 312 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 313              	.LVL24:
 549:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 314              		.loc 1 549 6 view .LVU91
 315 00d6 C907     		lsls	r1, r1, #31
 550:src/menu.c    ****   }
 316              		.loc 1 550 17 view .LVU92
ARM GAS  /tmp/cccWRI8T.s 			page 17


 317 00d8 4CBF     		ite	mi
 318 00da 4CEA0202 		orrmi	r2, ip, r2
 319              		.loc 1 553 17 view .LVU93
 320 00de 08EA0202 		andpl	r2, r8, r2
 321 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 322              	.L22:
 323              	.LBE52:
 324              	.LBE55:
 325              	.LBE58:
 326              	.LBE61:
 518:src/menu.c    **** 	  break;
 327              		.loc 1 518 2 is_stmt 1 view .LVU94
 328              	.LVL25:
 517:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 517 26 view .LVU95
 517:src/menu.c    **** 	if (x+j >= xmax)
 330              		.loc 1 517 27 is_stmt 0 view .LVU96
 331 00e6 0133     		adds	r3, r3, #1
 332              	.LVL26:
 517:src/menu.c    **** 	if (x+j >= xmax)
 333              		.loc 1 517 17 is_stmt 1 view .LVU97
 517:src/menu.c    **** 	if (x+j >= xmax)
 334              		.loc 1 517 7 is_stmt 0 view .LVU98
 335 00e8 B342     		cmp	r3, r6
 336 00ea EBD1     		bne	.L24
 337              	.LVL27:
 338              	.L25:
 516:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 339              		.loc 1 516 20 is_stmt 1 view .LVU99
 516:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 340              		.loc 1 516 15 view .LVU100
 341 00ec 0EF1FF3E 		add	lr, lr, #-1
 516:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 342              		.loc 1 516 5 is_stmt 0 view .LVU101
 343 00f0 BEF1FF3F 		cmp	lr, #-1
 344 00f4 0BF1010B 		add	fp, fp, #1
 345              	.LVL28:
 516:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 346              		.loc 1 516 5 view .LVU102
 347 00f8 D6D1     		bne	.L19
 523:src/menu.c    ****   }
 348              		.loc 1 523 5 is_stmt 1 view .LVU103
 349              	.LBE62:
 471:src/menu.c    ****     int c;
 350              		.loc 1 471 10 is_stmt 0 view .LVU104
 351 00fa 019B     		ldr	r3, [sp, #4]
 352 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 353              	.LBB63:
 523:src/menu.c    ****   }
 354              		.loc 1 523 7 view .LVU105
 355 00fe 3744     		add	r7, r7, r6
 356              	.LVL29:
 523:src/menu.c    ****   }
 357              		.loc 1 523 7 view .LVU106
 358              	.LBE63:
 471:src/menu.c    ****     int c;
 359              		.loc 1 471 9 is_stmt 1 view .LVU107
ARM GAS  /tmp/cccWRI8T.s 			page 18


 360 0100 85B1     		cbz	r5, .L7
 471:src/menu.c    ****     int c;
 361              		.loc 1 471 23 is_stmt 0 view .LVU108
 362 0102 B945     		cmp	r9, r7
 363 0104 0EDB     		blt	.L7
 364              	.LBB64:
 486:src/menu.c    ****       width = str[1] & 0x1F;
 365              		.loc 1 486 8 view .LVU109
 366 0106 072D     		cmp	r5, #7
 367              	.LBE64:
 368 0108 009C     		ldr	r4, [sp]
 369              	.LBB65:
 472:src/menu.c    ****     int width;
 370              		.loc 1 472 5 is_stmt 1 view .LVU110
 473:src/menu.c    ****     unsigned char cmap[6];
 371              		.loc 1 473 5 view .LVU111
 474:src/menu.c    **** 
 372              		.loc 1 474 5 view .LVU112
 476:src/menu.c    ****     int current_smallp;
 373              		.loc 1 476 5 view .LVU113
 477:src/menu.c    **** 
 374              		.loc 1 477 5 view .LVU114
 486:src/menu.c    ****       width = str[1] & 0x1F;
 375              		.loc 1 486 5 view .LVU115
 486:src/menu.c    ****       width = str[1] & 0x1F;
 376              		.loc 1 486 8 is_stmt 0 view .LVU116
 377 010a 9AD0     		beq	.L39
 378              	.LVL30:
 379              	.L11:
 502:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 502 7 is_stmt 1 view .LVU117
 503:src/menu.c    ****       current_smallp = smallp;
 381              		.loc 1 503 28 is_stmt 0 view .LVU118
 382 010c 2846     		mov	r0, r5
 383 010e FFF7FEFF 		bl	charlengths
 384              	.LVL31:
 502:src/menu.c    ****       real_width = width = charlengths(c);
 385              		.loc 1 502 31 view .LVU119
 386 0112 019B     		ldr	r3, [sp, #4]
 387 0114 0133     		adds	r3, r3, #1
 388 0116 0193     		str	r3, [sp, #4]
 389              	.LVL32:
 503:src/menu.c    ****       current_smallp = smallp;
 390              		.loc 1 503 7 is_stmt 1 view .LVU120
 504:src/menu.c    ****     }
 391              		.loc 1 504 7 view .LVU121
 504:src/menu.c    ****     }
 392              		.loc 1 504 22 is_stmt 0 view .LVU122
 393 0118 0023     		movs	r3, #0
 394              	.LVL33:
 504:src/menu.c    ****     }
 395              		.loc 1 504 22 view .LVU123
 396 011a 0093     		str	r3, [sp]
 397              	.LVL34:
 507:src/menu.c    ****       break;
 398              		.loc 1 507 11 view .LVU124
 399 011c C319     		adds	r3, r0, r7
ARM GAS  /tmp/cccWRI8T.s 			page 19


 400              	.LVL35:
 507:src/menu.c    ****       break;
 401              		.loc 1 507 8 view .LVU125
 402 011e 9945     		cmp	r9, r3
 503:src/menu.c    ****       current_smallp = smallp;
 403              		.loc 1 503 28 view .LVU126
 404 0120 0646     		mov	r6, r0
 507:src/menu.c    ****       break;
 405              		.loc 1 507 5 is_stmt 1 view .LVU127
 507:src/menu.c    ****       break;
 406              		.loc 1 507 8 is_stmt 0 view .LVU128
 407 0122 A7DA     		bge	.L40
 408              	.LVL36:
 409              	.L7:
 507:src/menu.c    ****       break;
 410              		.loc 1 507 8 view .LVU129
 411              	.LBE65:
 525:src/menu.c    **** 
 412              		.loc 1 525 1 view .LVU130
 413 0124 0DF5097D 		add	sp, sp, #548
 414              		.cfi_remember_state
 415              		.cfi_def_cfa_offset 36
 416              		@ sp needed
 417 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 418              	.LVL37:
 419              	.L34:
 420              		.cfi_restore_state
 421              	.LBB66:
 497:src/menu.c    ****       str += 3;
 422              		.loc 1 497 7 is_stmt 1 view .LVU131
 497:src/menu.c    ****       str += 3;
 423              		.loc 1 497 11 is_stmt 0 view .LVU132
 424 012c 019B     		ldr	r3, [sp, #4]
 425 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 490:src/menu.c    **** 	break;
 426              		.loc 1 490 33 view .LVU133
 427 0130 0023     		movs	r3, #0
 428 0132 0093     		str	r3, [sp]
 429 0134 95E7     		b	.L15
 430              	.L42:
 431 0136 00BF     		.align	2
 432              	.L41:
 433 0138 00000000 		.word	forceDispPlot
 434 013c 00000000 		.word	RectPolConv
 435 0140 00000000 		.word	.LANCHOR0
 436              	.LBE66:
 437              		.cfi_endproc
 438              	.LFE37:
 440              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 441              		.align	2
 442              	.LC4:
 443 0000 57503334 		.ascii	"WP34C calculator for DM42:\000"
 443      43206361 
 443      6C63756C 
 443      61746F72 
 443      20666F72 
 444 001b 00       		.align	2
ARM GAS  /tmp/cccWRI8T.s 			page 20


 445              	.LC5:
 446 001c 746F7020 		.ascii	"top row version,\000"
 446      726F7720 
 446      76657273 
 446      696F6E2C 
 446      00
 447 002d 000000   		.align	2
 448              	.LC6:
 449 0030 696E636C 		.ascii	"including COMPLEX LOCK mode!\000"
 449      7564696E 
 449      6720434F 
 449      4D504C45 
 449      58204C4F 
 450 004d 000000   		.align	2
 451              	.LC7:
 452 0050 54686973 		.ascii	"This software is neither provided\000"
 452      20736F66 
 452      74776172 
 452      65206973 
 452      206E6569 
 453 0072 0000     		.align	2
 454              	.LC8:
 455 0074 6279206E 		.ascii	"by nor supported by SwissMicros.\000"
 455      6F722073 
 455      7570706F 
 455      72746564 
 455      20627920 
 456 0095 000000   		.align	2
 457              	.LC9:
 458 0098 20202020 		.ascii	"    Press EXIT key to continue...\000"
 458      50726573 
 458      73204558 
 458      4954206B 
 458      65792074 
 459              		.section	.text.disp_about,"ax",%progbits
 460              		.align	1
 461              		.p2align 2,,3
 462              		.global	disp_about
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv4-sp-d16
 468              	disp_about:
 469              	.LFB5:
  73:src/menu.c    ****   lcd_clear_buf();
 470              		.loc 1 73 19 is_stmt 1 view -0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
  74:src/menu.c    ****   lcd_writeClr(t24);
 474              		.loc 1 74 3 view .LVU135
  73:src/menu.c    ****   lcd_clear_buf();
 475              		.loc 1 73 19 is_stmt 0 view .LVU136
 476 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 477              		.cfi_def_cfa_offset 24
 478              		.cfi_offset 4, -24
 479              		.cfi_offset 5, -20
ARM GAS  /tmp/cccWRI8T.s 			page 21


 480              		.cfi_offset 6, -16
 481              		.cfi_offset 7, -12
 482              		.cfi_offset 8, -8
 483              		.cfi_offset 14, -4
  75:src/menu.c    **** 
 484              		.loc 1 75 3 view .LVU137
 485 0004 1E4C     		ldr	r4, .L45
  74:src/menu.c    ****   lcd_writeClr(t24);
 486              		.loc 1 74 3 view .LVU138
 487 0006 1F4B     		ldr	r3, .L45+4
  78:src/menu.c    ****   t24->y += 5;
 488              		.loc 1 78 3 view .LVU139
 489 0008 1F4D     		ldr	r5, .L45+8
  74:src/menu.c    ****   lcd_writeClr(t24);
 490              		.loc 1 74 3 view .LVU140
 491 000a 9847     		blx	r3
 492              	.LVL38:
  75:src/menu.c    **** 
 493              		.loc 1 75 3 is_stmt 1 view .LVU141
 494 000c 606B     		ldr	r0, [r4, #52]
 495 000e 1F4B     		ldr	r3, .L45+12
 496 0010 9847     		blx	r3
 497              	.LVL39:
  77:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
 498              		.loc 1 77 3 view .LVU142
 499 0012 0522     		movs	r2, #5
 500 0014 606B     		ldr	r0, [r4, #52]
 501 0016 1E4B     		ldr	r3, .L45+16
 502 0018 0021     		movs	r1, #0
 503 001a 9847     		blx	r3
 504              	.LVL40:
  78:src/menu.c    ****   t24->y += 5;
 505              		.loc 1 78 3 view .LVU143
  78:src/menu.c    ****   t24->y += 5;
 506              		.loc 1 78 3 view .LVU144
 507 001c 606B     		ldr	r0, [r4, #52]
 508 001e 1D49     		ldr	r1, .L45+20
 509 0020 0126     		movs	r6, #1
 510 0022 4674     		strb	r6, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 511              		.loc 1 78 3 view .LVU145
 512 0024 A847     		blx	r5
 513              	.LVL41:
  78:src/menu.c    ****   t24->y += 5;
 514              		.loc 1 78 3 view .LVU146
 515 0026 606B     		ldr	r0, [r4, #52]
  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 516              		.loc 1 81 3 is_stmt 0 view .LVU147
 517 0028 1B49     		ldr	r1, .L45+24
  79:src/menu.c    **** #ifdef TOP_ROW
 518              		.loc 1 79 10 view .LVU148
 519 002a C388     		ldrh	r3, [r0, #6]
  78:src/menu.c    ****   t24->y += 5;
 520              		.loc 1 78 3 view .LVU149
 521 002c 0027     		movs	r7, #0
  79:src/menu.c    **** #ifdef TOP_ROW
 522              		.loc 1 79 10 view .LVU150
ARM GAS  /tmp/cccWRI8T.s 			page 22


 523 002e 0533     		adds	r3, r3, #5
 524 0030 C380     		strh	r3, [r0, #6]	@ movhi
  78:src/menu.c    ****   t24->y += 5;
 525              		.loc 1 78 3 view .LVU151
 526 0032 4774     		strb	r7, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 527              		.loc 1 78 3 is_stmt 1 view .LVU152
  79:src/menu.c    **** #ifdef TOP_ROW
 528              		.loc 1 79 3 view .LVU153
  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 529              		.loc 1 81 3 view .LVU154
 530 0034 A847     		blx	r5
 531              	.LVL42:
  82:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 532              		.loc 1 82 3 view .LVU155
 533 0036 606B     		ldr	r0, [r4, #52]
 534 0038 1849     		ldr	r1, .L45+28
 535 003a A847     		blx	r5
 536              	.LVL43:
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 537              		.loc 1 91 3 view .LVU156
 538 003c 606B     		ldr	r0, [r4, #52]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 539              		.loc 1 92 3 is_stmt 0 view .LVU157
 540 003e 1849     		ldr	r1, .L45+32
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 541              		.loc 1 91 10 view .LVU158
 542 0040 C388     		ldrh	r3, [r0, #6]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 543              		.loc 1 92 3 view .LVU159
 544 0042 4674     		strb	r6, [r0, #17]
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 545              		.loc 1 91 10 view .LVU160
 546 0044 0533     		adds	r3, r3, #5
 547 0046 C380     		strh	r3, [r0, #6]	@ movhi
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 548              		.loc 1 92 3 is_stmt 1 view .LVU161
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 549              		.loc 1 92 3 view .LVU162
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 550              		.loc 1 92 3 view .LVU163
 551 0048 A847     		blx	r5
 552              	.LVL44:
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 553              		.loc 1 92 3 view .LVU164
 554 004a 606B     		ldr	r0, [r4, #52]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 555              		.loc 1 92 3 view .LVU165
  93:src/menu.c    **** 
 556              		.loc 1 93 3 view .LVU166
  93:src/menu.c    **** 
 557              		.loc 1 93 3 view .LVU167
 558 004c 1549     		ldr	r1, .L45+36
 559 004e 4674     		strb	r6, [r0, #17]
  93:src/menu.c    **** 
 560              		.loc 1 93 3 view .LVU168
 561 0050 A847     		blx	r5
ARM GAS  /tmp/cccWRI8T.s 			page 23


 562              	.LVL45:
  93:src/menu.c    **** 
 563              		.loc 1 93 3 view .LVU169
 564 0052 606B     		ldr	r0, [r4, #52]
  95:src/menu.c    ****   t24->x = 20;
 565              		.loc 1 95 20 is_stmt 0 view .LVU170
 566 0054 144B     		ldr	r3, .L45+40
  93:src/menu.c    **** 
 567              		.loc 1 93 3 view .LVU171
 568 0056 4774     		strb	r7, [r0, #17]
  93:src/menu.c    **** 
 569              		.loc 1 93 3 is_stmt 1 view .LVU172
  95:src/menu.c    ****   t24->x = 20;
 570              		.loc 1 95 3 view .LVU173
  95:src/menu.c    ****   t24->x = 20;
 571              		.loc 1 95 20 is_stmt 0 view .LVU174
 572 0058 9847     		blx	r3
 573              	.LVL46:
  95:src/menu.c    ****   t24->x = 20;
 574              		.loc 1 95 3 view .LVU175
 575 005a 636B     		ldr	r3, [r4, #52]
  97:src/menu.c    **** 
 576              		.loc 1 97 3 view .LVU176
 577 005c 1349     		ldr	r1, .L45+44
 578 005e 5E74     		strb	r6, [r3, #17]
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 579              		.loc 1 96 10 view .LVU177
 580 0060 1422     		movs	r2, #20
  95:src/menu.c    ****   t24->x = 20;
 581              		.loc 1 95 39 view .LVU178
 582 0062 C0F1EB00 		rsb	r0, r0, #235
  95:src/menu.c    ****   t24->x = 20;
 583              		.loc 1 95 10 view .LVU179
 584 0066 D880     		strh	r0, [r3, #6]	@ movhi
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 585              		.loc 1 96 3 is_stmt 1 view .LVU180
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 586              		.loc 1 96 10 is_stmt 0 view .LVU181
 587 0068 9A80     		strh	r2, [r3, #4]	@ movhi
  97:src/menu.c    **** 
 588              		.loc 1 97 3 is_stmt 1 view .LVU182
  97:src/menu.c    **** 
 589              		.loc 1 97 3 view .LVU183
  97:src/menu.c    **** 
 590              		.loc 1 97 3 view .LVU184
 591 006a 1846     		mov	r0, r3
 592 006c A847     		blx	r5
 593              	.LVL47:
  97:src/menu.c    **** 
 594              		.loc 1 97 3 view .LVU185
 595 006e 626B     		ldr	r2, [r4, #52]
  99:src/menu.c    **** 
 596              		.loc 1 99 3 is_stmt 0 view .LVU186
 597 0070 0F4B     		ldr	r3, .L45+48
  97:src/menu.c    **** 
 598              		.loc 1 97 3 view .LVU187
 599 0072 5774     		strb	r7, [r2, #17]
ARM GAS  /tmp/cccWRI8T.s 			page 24


  97:src/menu.c    **** 
 600              		.loc 1 97 3 is_stmt 1 view .LVU188
  99:src/menu.c    **** 
 601              		.loc 1 99 3 view .LVU189
 602 0074 9847     		blx	r3
 603              	.LVL48:
 101:src/menu.c    **** }
 604              		.loc 1 101 3 view .LVU190
 102:src/menu.c    **** 
 605              		.loc 1 102 1 is_stmt 0 view .LVU191
 606 0076 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 607              		.cfi_restore 14
 608              		.cfi_restore 8
 609              		.cfi_restore 7
 610              		.cfi_restore 6
 611              		.cfi_restore 5
 612              		.cfi_restore 4
 613              		.cfi_def_cfa_offset 0
 101:src/menu.c    **** }
 614              		.loc 1 101 3 view .LVU192
 615 007a 0E4B     		ldr	r3, .L45+52
 616 007c 1847     		bx	r3	@ indirect register sibling call
 617              	.LVL49:
 618              	.L46:
 619 007e 00BF     		.align	2
 620              	.L45:
 621 0080 00200010 		.word	268443648
 622 0084 2D020008 		.word	134218285
 623 0088 B1020008 		.word	134218417
 624 008c 65020008 		.word	134218341
 625 0090 6D020008 		.word	134218349
 626 0094 00000000 		.word	.LC4
 627 0098 1C000000 		.word	.LC5
 628 009c 30000000 		.word	.LC6
 629 00a0 50000000 		.word	.LC7
 630 00a4 74000000 		.word	.LC8
 631 00a8 71020008 		.word	134218353
 632 00ac 98000000 		.word	.LC9
 633 00b0 31020008 		.word	134218289
 634 00b4 99030008 		.word	134218649
 635              		.cfi_endproc
 636              	.LFE5:
 638              		.section	.text.run_menu_item,"ax",%progbits
 639              		.align	1
 640              		.p2align 2,,3
 641              		.global	run_menu_item
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	run_menu_item:
 648              	.LVL50:
 649              	.LFB3:
  42:src/menu.c    ****   int ret = 0;
 650              		.loc 1 42 36 is_stmt 1 view -0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cccWRI8T.s 			page 25


 653              		@ frame_needed = 0, uses_anonymous_args = 0
  43:src/menu.c    **** 
 654              		.loc 1 43 3 view .LVU194
  45:src/menu.c    ****     case MI_ABOUT_PGM:
 655              		.loc 1 45 3 view .LVU195
 656 0000 0B28     		cmp	r0, #11
 657 0002 04D1     		bne	.L49
  47:src/menu.c    ****       break;
 658              		.loc 1 47 7 view .LVU196
  42:src/menu.c    ****   int ret = 0;
 659              		.loc 1 42 36 is_stmt 0 view .LVU197
 660 0004 08B5     		push	{r3, lr}
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 3, -8
 663              		.cfi_offset 14, -4
  47:src/menu.c    ****       break;
 664              		.loc 1 47 7 view .LVU198
 665 0006 FFF7FEFF 		bl	disp_about
 666              	.LVL51:
  48:src/menu.c    **** 
 667              		.loc 1 48 7 is_stmt 1 view .LVU199
  43:src/menu.c    **** 
 668              		.loc 1 43 7 is_stmt 0 view .LVU200
 669 000a 0020     		movs	r0, #0
  56:src/menu.c    **** 
 670              		.loc 1 56 1 view .LVU201
 671 000c 08BD     		pop	{r3, pc}
 672              	.LVL52:
 673              	.L49:
 674              		.cfi_def_cfa_offset 0
 675              		.cfi_restore 3
 676              		.cfi_restore 14
  51:src/menu.c    ****       break;
 677              		.loc 1 51 11 view .LVU202
 678 000e 4FF0FF30 		mov	r0, #-1
 679              	.LVL53:
  55:src/menu.c    **** }
 680              		.loc 1 55 3 is_stmt 1 view .LVU203
  56:src/menu.c    **** 
 681              		.loc 1 56 1 is_stmt 0 view .LVU204
 682 0012 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE3:
 686              		.section	.text.set_menu,"ax",%progbits
 687              		.align	1
 688              		.p2align 2,,3
 689              		.global	set_menu
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu fpv4-sp-d16
 695              	set_menu:
 696              	.LVL54:
 697              	.LFB6:
 108:src/menu.c    ****   menu_name m = current_menu;
 698              		.loc 1 108 38 is_stmt 1 view -0
 699              		.cfi_startproc
ARM GAS  /tmp/cccWRI8T.s 			page 26


 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 703              		.loc 1 109 3 view .LVU206
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 704              		.loc 1 109 13 is_stmt 0 view .LVU207
 705 0000 0A4A     		ldr	r2, .L66
 706 0002 92F90030 		ldrsb	r3, [r2]
 707              	.LVL55:
 110:src/menu.c    ****     current_menu = default_menu;
 708              		.loc 1 110 3 is_stmt 1 view .LVU208
 110:src/menu.c    ****     current_menu = default_menu;
 709              		.loc 1 110 6 is_stmt 0 view .LVU209
 710 0006 8342     		cmp	r3, r0
 711 0008 0CD0     		beq	.L65
 113:src/menu.c    ****     current_menu = last_menu;
 712              		.loc 1 113 8 is_stmt 1 view .LVU210
 113:src/menu.c    ****     current_menu = last_menu;
 713              		.loc 1 113 11 is_stmt 0 view .LVU211
 714 000a 411C     		adds	r1, r0, #1
 114:src/menu.c    ****   }
 715              		.loc 1 114 5 is_stmt 1 view .LVU212
 114:src/menu.c    ****   }
 716              		.loc 1 114 18 is_stmt 0 view .LVU213
 717 000c 09BF     		itett	eq
 718 000e 0849     		ldreq	r1, .L66+4
 117:src/menu.c    ****   }
 719              		.loc 1 117 18 view .LVU214
 720 0010 1070     		strbne	r0, [r2]
 114:src/menu.c    ****   }
 721              		.loc 1 114 18 view .LVU215
 722 0012 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 723 0014 1170     		strbeq	r1, [r2]
 117:src/menu.c    ****   }
 724              		.loc 1 117 5 is_stmt 1 view .LVU216
 725              	.L56:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 726              		.loc 1 119 3 view .LVU217
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 727              		.loc 1 119 6 is_stmt 0 view .LVU218
 728 0016 092B     		cmp	r3, #9
 729 0018 03D0     		beq	.L54
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 730              		.loc 1 119 23 discriminator 1 view .LVU219
 731 001a 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 732              		.loc 1 119 43 is_stmt 1 discriminator 1 view .LVU220
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 733              		.loc 1 119 53 is_stmt 0 discriminator 1 view .LVU221
 734 001c 1CBF     		itt	ne
 735 001e 044A     		ldrne	r2, .L66+4
 736 0020 1370     		strbne	r3, [r2]
 737              	.L54:
 121:src/menu.c    **** 
 738              		.loc 1 121 1 view .LVU222
 739 0022 7047     		bx	lr
ARM GAS  /tmp/cccWRI8T.s 			page 27


 740              	.L65:
 111:src/menu.c    ****   }
 741              		.loc 1 111 5 is_stmt 1 view .LVU223
 111:src/menu.c    ****   }
 742              		.loc 1 111 18 is_stmt 0 view .LVU224
 743 0024 0349     		ldr	r1, .L66+8
 744 0026 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 745 0028 1170     		strb	r1, [r2]
 746 002a F4E7     		b	.L56
 747              	.L67:
 748              		.align	2
 749              	.L66:
 750 002c 00000000 		.word	.LANCHOR1
 751 0030 00000000 		.word	.LANCHOR3
 752 0034 00000000 		.word	.LANCHOR2
 753              		.cfi_endproc
 754              	.LFE6:
 756              		.section	.text.set_default_menu,"ax",%progbits
 757              		.align	1
 758              		.p2align 2,,3
 759              		.global	set_default_menu
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 763              		.fpu fpv4-sp-d16
 765              	set_default_menu:
 766              	.LFB7:
 123:src/menu.c    ****   set_menu (default_menu);
 767              		.loc 1 123 26 is_stmt 1 view -0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 124:src/menu.c    **** }
 772              		.loc 1 124 3 view .LVU226
 773 0000 0A4B     		ldr	r3, .L80
 774              	.LBB67:
 775              	.LBB68:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 776              		.loc 1 109 13 is_stmt 0 view .LVU227
 777 0002 0B49     		ldr	r1, .L80+4
 778              	.LBE68:
 779              	.LBE67:
 124:src/menu.c    **** }
 780              		.loc 1 124 3 view .LVU228
 781 0004 93F90020 		ldrsb	r2, [r3]
 782              	.LVL56:
 783              	.LBB71:
 784              	.LBI67:
 108:src/menu.c    ****   menu_name m = current_menu;
 785              		.loc 1 108 6 is_stmt 1 view .LVU229
 786              	.LBB69:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 787              		.loc 1 109 3 view .LVU230
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 788              		.loc 1 109 13 is_stmt 0 view .LVU231
 789 0008 91F90030 		ldrsb	r3, [r1]
ARM GAS  /tmp/cccWRI8T.s 			page 28


 790              	.LVL57:
 110:src/menu.c    ****     current_menu = default_menu;
 791              		.loc 1 110 3 is_stmt 1 view .LVU232
 110:src/menu.c    ****     current_menu = default_menu;
 792              		.loc 1 110 6 is_stmt 0 view .LVU233
 793 000c 9A42     		cmp	r2, r3
 794 000e 0BD0     		beq	.L79
 113:src/menu.c    ****     current_menu = last_menu;
 795              		.loc 1 113 8 is_stmt 1 view .LVU234
 113:src/menu.c    ****     current_menu = last_menu;
 796              		.loc 1 113 11 is_stmt 0 view .LVU235
 797 0010 501C     		adds	r0, r2, #1
 114:src/menu.c    ****   }
 798              		.loc 1 114 5 is_stmt 1 view .LVU236
 114:src/menu.c    ****   }
 799              		.loc 1 114 18 is_stmt 0 view .LVU237
 800 0012 04BF     		itt	eq
 801 0014 074A     		ldreq	r2, .L80+8
 802              	.LVL58:
 114:src/menu.c    ****   }
 803              		.loc 1 114 18 view .LVU238
 804 0016 1278     		ldrbeq	r2, [r2]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 805              		.loc 1 117 5 is_stmt 1 view .LVU239
 117:src/menu.c    ****   }
 806              		.loc 1 117 18 is_stmt 0 view .LVU240
 807 0018 0A70     		strb	r2, [r1]
 808              	.LVL59:
 809              	.L70:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 810              		.loc 1 119 3 is_stmt 1 view .LVU241
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 811              		.loc 1 119 6 is_stmt 0 view .LVU242
 812 001a 092B     		cmp	r3, #9
 813 001c 03D0     		beq	.L68
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 814              		.loc 1 119 23 view .LVU243
 815 001e 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 816              		.loc 1 119 43 is_stmt 1 view .LVU244
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 817              		.loc 1 119 53 is_stmt 0 view .LVU245
 818 0020 1CBF     		itt	ne
 819 0022 044A     		ldrne	r2, .L80+8
 820 0024 1370     		strbne	r3, [r2]
 821              	.LVL60:
 822              	.L68:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 823              		.loc 1 119 53 view .LVU246
 824              	.LBE69:
 825              	.LBE71:
 125:src/menu.c    **** 
 826              		.loc 1 125 1 view .LVU247
 827 0026 7047     		bx	lr
 828              	.LVL61:
 829              	.L79:
 830              	.LBB72:
ARM GAS  /tmp/cccWRI8T.s 			page 29


 831              	.LBB70:
 111:src/menu.c    ****   }
 832              		.loc 1 111 5 is_stmt 1 view .LVU248
 111:src/menu.c    ****   }
 833              		.loc 1 111 18 is_stmt 0 view .LVU249
 834 0028 0B70     		strb	r3, [r1]
 835 002a F6E7     		b	.L70
 836              	.L81:
 837              		.align	2
 838              	.L80:
 839 002c 00000000 		.word	.LANCHOR2
 840 0030 00000000 		.word	.LANCHOR1
 841 0034 00000000 		.word	.LANCHOR3
 842              	.LBE70:
 843              	.LBE72:
 844              		.cfi_endproc
 845              	.LFE7:
 847              		.section	.text.toggle_default_menu,"ax",%progbits
 848              		.align	1
 849              		.p2align 2,,3
 850              		.global	toggle_default_menu
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 854              		.fpu fpv4-sp-d16
 856              	toggle_default_menu:
 857              	.LFB8:
 127:src/menu.c    ****   if (current_menu == M_Blank) {
 858              		.loc 1 127 29 is_stmt 1 view -0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 0
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862              		@ link register save eliminated.
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 863              		.loc 1 128 3 view .LVU251
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 864              		.loc 1 128 20 is_stmt 0 view .LVU252
 865 0000 104A     		ldr	r2, .L98
 129:src/menu.c    ****     return;
 866              		.loc 1 129 33 view .LVU253
 867 0002 1149     		ldr	r1, .L98+4
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 868              		.loc 1 128 20 view .LVU254
 869 0004 92F90030 		ldrsb	r3, [r2]
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 870              		.loc 1 128 6 view .LVU255
 871 0008 ABB1     		cbz	r3, .L95
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 872              		.loc 1 132 8 is_stmt 1 view .LVU256
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 873              		.loc 1 132 11 is_stmt 0 view .LVU257
 874 000a 0F2B     		cmp	r3, #15
 875 000c 0FD0     		beq	.L96
 136:src/menu.c    ****   }
 876              		.loc 1 136 5 is_stmt 1 view .LVU258
 877              	.LBB73:
 878              	.LBI73:
ARM GAS  /tmp/cccWRI8T.s 			page 30


 123:src/menu.c    ****   set_menu (default_menu);
 879              		.loc 1 123 6 view .LVU259
 880              	.LBB74:
 124:src/menu.c    **** }
 881              		.loc 1 124 3 view .LVU260
 882 000e 91F90010 		ldrsb	r1, [r1]
 883              	.LVL62:
 884              	.LBB75:
 885              	.LBI75:
 108:src/menu.c    ****   menu_name m = current_menu;
 886              		.loc 1 108 6 view .LVU261
 887              	.LBB76:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 888              		.loc 1 109 3 view .LVU262
 110:src/menu.c    ****     current_menu = default_menu;
 889              		.loc 1 110 3 view .LVU263
 110:src/menu.c    ****     current_menu = default_menu;
 890              		.loc 1 110 6 is_stmt 0 view .LVU264
 891 0012 8B42     		cmp	r3, r1
 892 0014 13D0     		beq	.L97
 113:src/menu.c    ****     current_menu = last_menu;
 893              		.loc 1 113 8 is_stmt 1 view .LVU265
 113:src/menu.c    ****     current_menu = last_menu;
 894              		.loc 1 113 11 is_stmt 0 view .LVU266
 895 0016 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 896              		.loc 1 114 5 is_stmt 1 view .LVU267
 114:src/menu.c    ****   }
 897              		.loc 1 114 18 is_stmt 0 view .LVU268
 898 0018 04BF     		itt	eq
 899 001a 0C49     		ldreq	r1, .L98+8
 900              	.LVL63:
 114:src/menu.c    ****   }
 901              		.loc 1 114 18 view .LVU269
 902 001c 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 903              		.loc 1 117 5 is_stmt 1 view .LVU270
 117:src/menu.c    ****   }
 904              		.loc 1 117 18 is_stmt 0 view .LVU271
 905 001e 1170     		strb	r1, [r2]
 906              	.LVL64:
 907              	.L87:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 908              		.loc 1 119 3 is_stmt 1 view .LVU272
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 909              		.loc 1 119 6 is_stmt 0 view .LVU273
 910 0020 092B     		cmp	r3, #9
 911 0022 03D0     		beq	.L82
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 912              		.loc 1 119 23 view .LVU274
 913 0024 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 914              		.loc 1 119 43 is_stmt 1 view .LVU275
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 915              		.loc 1 119 53 is_stmt 0 view .LVU276
 916 0026 1CBF     		itt	ne
 917 0028 084A     		ldrne	r2, .L98+8
ARM GAS  /tmp/cccWRI8T.s 			page 31


 918 002a 1370     		strbne	r3, [r2]
 919              	.LVL65:
 920              	.L82:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 921              		.loc 1 119 53 view .LVU277
 922              	.LBE76:
 923              	.LBE75:
 924              	.LBE74:
 925              	.LBE73:
 138:src/menu.c    **** 
 926              		.loc 1 138 1 view .LVU278
 927 002c 7047     		bx	lr
 928              	.L96:
 133:src/menu.c    ****   }
 929              		.loc 1 133 5 is_stmt 1 view .LVU279
 133:src/menu.c    ****   }
 930              		.loc 1 133 33 is_stmt 0 view .LVU280
 931 002e 0023     		movs	r3, #0
 932 0030 0B70     		strb	r3, [r1]
 133:src/menu.c    ****   }
 933              		.loc 1 133 18 view .LVU281
 934 0032 1370     		strb	r3, [r2]
 935 0034 7047     		bx	lr
 936              	.L95:
 129:src/menu.c    ****     return;
 937              		.loc 1 129 5 is_stmt 1 view .LVU282
 129:src/menu.c    ****     return;
 938              		.loc 1 129 33 is_stmt 0 view .LVU283
 939 0036 0F23     		movs	r3, #15
 940 0038 0B70     		strb	r3, [r1]
 129:src/menu.c    ****     return;
 941              		.loc 1 129 18 view .LVU284
 942 003a 1370     		strb	r3, [r2]
 130:src/menu.c    ****   }
 943              		.loc 1 130 5 is_stmt 1 view .LVU285
 944 003c 7047     		bx	lr
 945              	.LVL66:
 946              	.L97:
 947              	.LBB80:
 948              	.LBB79:
 949              	.LBB78:
 950              	.LBB77:
 111:src/menu.c    ****   }
 951              		.loc 1 111 5 view .LVU286
 111:src/menu.c    ****   }
 952              		.loc 1 111 18 is_stmt 0 view .LVU287
 953 003e 1370     		strb	r3, [r2]
 954 0040 EEE7     		b	.L87
 955              	.L99:
 956 0042 00BF     		.align	2
 957              	.L98:
 958 0044 00000000 		.word	.LANCHOR1
 959 0048 00000000 		.word	.LANCHOR2
 960 004c 00000000 		.word	.LANCHOR3
 961              	.LBE77:
 962              	.LBE78:
 963              	.LBE79:
ARM GAS  /tmp/cccWRI8T.s 			page 32


 964              	.LBE80:
 965              		.cfi_endproc
 966              	.LFE8:
 968              		.section	.text.get_menu,"ax",%progbits
 969              		.align	1
 970              		.p2align 2,,3
 971              		.global	get_menu
 972              		.syntax unified
 973              		.thumb
 974              		.thumb_func
 975              		.fpu fpv4-sp-d16
 977              	get_menu:
 978              	.LFB9:
 140:src/menu.c    ****   return current_menu;
 979              		.loc 1 140 23 is_stmt 1 view -0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 0
 982              		@ frame_needed = 0, uses_anonymous_args = 0
 983              		@ link register save eliminated.
 141:src/menu.c    **** }
 984              		.loc 1 141 3 view .LVU289
 141:src/menu.c    **** }
 985              		.loc 1 141 10 is_stmt 0 view .LVU290
 986 0000 014B     		ldr	r3, .L101
 142:src/menu.c    **** 
 987              		.loc 1 142 1 view .LVU291
 988 0002 93F90000 		ldrsb	r0, [r3]
 989 0006 7047     		bx	lr
 990              	.L102:
 991              		.align	2
 992              	.L101:
 993 0008 00000000 		.word	.LANCHOR1
 994              		.cfi_endproc
 995              	.LFE9:
 997              		.section	.text.get_last_menu,"ax",%progbits
 998              		.align	1
 999              		.p2align 2,,3
 1000              		.global	get_last_menu
 1001              		.syntax unified
 1002              		.thumb
 1003              		.thumb_func
 1004              		.fpu fpv4-sp-d16
 1006              	get_last_menu:
 1007              	.LFB10:
 144:src/menu.c    ****   return last_menu;
 1008              		.loc 1 144 28 is_stmt 1 view -0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 0
 1011              		@ frame_needed = 0, uses_anonymous_args = 0
 1012              		@ link register save eliminated.
 145:src/menu.c    **** }
 1013              		.loc 1 145 3 view .LVU293
 145:src/menu.c    **** }
 1014              		.loc 1 145 10 is_stmt 0 view .LVU294
 1015 0000 014B     		ldr	r3, .L104
 146:src/menu.c    **** 
 1016              		.loc 1 146 1 view .LVU295
ARM GAS  /tmp/cccWRI8T.s 			page 33


 1017 0002 93F90000 		ldrsb	r0, [r3]
 1018 0006 7047     		bx	lr
 1019              	.L105:
 1020              		.align	2
 1021              	.L104:
 1022 0008 00000000 		.word	.LANCHOR3
 1023              		.cfi_endproc
 1024              	.LFE10:
 1026              		.section	.text.set_last_menu,"ax",%progbits
 1027              		.align	1
 1028              		.p2align 2,,3
 1029              		.global	set_last_menu
 1030              		.syntax unified
 1031              		.thumb
 1032              		.thumb_func
 1033              		.fpu fpv4-sp-d16
 1035              	set_last_menu:
 1036              	.LFB12:
 152:src/menu.c    ****   set_menu (M_Last);
 1037              		.loc 1 152 23 is_stmt 1 view -0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 0
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041              		@ link register save eliminated.
 153:src/menu.c    **** }
 1042              		.loc 1 153 3 view .LVU297
 1043              	.LVL67:
 1044              	.LBB81:
 1045              	.LBI81:
 108:src/menu.c    ****   menu_name m = current_menu;
 1046              		.loc 1 108 6 view .LVU298
 1047              	.LBB82:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1048              		.loc 1 109 3 view .LVU299
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1049              		.loc 1 109 13 is_stmt 0 view .LVU300
 1050 0000 0A4A     		ldr	r2, .L119
 1051 0002 92F90030 		ldrsb	r3, [r2]
 1052              	.LVL68:
 110:src/menu.c    ****     current_menu = default_menu;
 1053              		.loc 1 110 3 is_stmt 1 view .LVU301
 110:src/menu.c    ****     current_menu = default_menu;
 1054              		.loc 1 110 6 is_stmt 0 view .LVU302
 1055 0006 591C     		adds	r1, r3, #1
 1056 0008 09D0     		beq	.L116
 113:src/menu.c    ****     current_menu = last_menu;
 1057              		.loc 1 113 8 is_stmt 1 view .LVU303
 114:src/menu.c    ****   }
 1058              		.loc 1 114 5 view .LVU304
 114:src/menu.c    ****   }
 1059              		.loc 1 114 18 is_stmt 0 view .LVU305
 1060 000a 0949     		ldr	r1, .L119+4
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1061              		.loc 1 119 6 view .LVU306
 1062 000c 092B     		cmp	r3, #9
 114:src/menu.c    ****   }
 1063              		.loc 1 114 18 view .LVU307
ARM GAS  /tmp/cccWRI8T.s 			page 34


 1064 000e 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1065 0010 1070     		strb	r0, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1066              		.loc 1 119 3 is_stmt 1 view .LVU308
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1067              		.loc 1 119 6 is_stmt 0 view .LVU309
 1068 0012 00D1     		bne	.L117
 1069              	.L106:
 1070              	.LBE82:
 1071              	.LBE81:
 154:src/menu.c    **** 
 1072              		.loc 1 154 1 view .LVU310
 1073 0014 7047     		bx	lr
 1074              	.L117:
 1075              	.LBB85:
 1076              	.LBB83:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1077              		.loc 1 119 23 view .LVU311
 1078 0016 102B     		cmp	r3, #16
 1079 0018 FCD0     		beq	.L106
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1080              		.loc 1 119 43 is_stmt 1 view .LVU312
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1081              		.loc 1 119 53 is_stmt 0 view .LVU313
 1082 001a 0B70     		strb	r3, [r1]
 1083              	.LVL69:
 1084              	.L118:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1085              		.loc 1 119 53 view .LVU314
 1086              	.LBE83:
 1087              	.LBE85:
 154:src/menu.c    **** 
 1088              		.loc 1 154 1 view .LVU315
 1089 001c 7047     		bx	lr
 1090              	.LVL70:
 1091              	.L116:
 1092              	.LBB86:
 1093              	.LBB84:
 111:src/menu.c    ****   }
 1094              		.loc 1 111 5 is_stmt 1 view .LVU316
 111:src/menu.c    ****   }
 1095              		.loc 1 111 18 is_stmt 0 view .LVU317
 1096 001e 0548     		ldr	r0, .L119+8
 1097 0020 0349     		ldr	r1, .L119+4
 1098 0022 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1099 0024 1070     		strb	r0, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1100              		.loc 1 119 3 is_stmt 1 view .LVU318
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1101              		.loc 1 119 43 view .LVU319
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1102              		.loc 1 119 53 is_stmt 0 view .LVU320
 1103 0026 0B70     		strb	r3, [r1]
 1104              	.LVL71:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1105              		.loc 1 119 53 view .LVU321
 1106 0028 F8E7     		b	.L118
ARM GAS  /tmp/cccWRI8T.s 			page 35


 1107              	.L120:
 1108 002a 00BF     		.align	2
 1109              	.L119:
 1110 002c 00000000 		.word	.LANCHOR1
 1111 0030 00000000 		.word	.LANCHOR3
 1112 0034 00000000 		.word	.LANCHOR2
 1113              	.LBE84:
 1114              	.LBE86:
 1115              		.cfi_endproc
 1116              	.LFE12:
 1118              		.section	.text.mdot,"ax",%progbits
 1119              		.align	1
 1120              		.p2align 2,,3
 1121              		.global	mdot
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu fpv4-sp-d16
 1127              	mdot:
 1128              	.LVL72:
 1129              	.LFB14:
 547:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1130              		.loc 1 547 40 is_stmt 1 view -0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 1134              		@ link register save eliminated.
 548:src/menu.c    ****   if (on) {
 1135              		.loc 1 548 3 view .LVU323
 548:src/menu.c    ****   if (on) {
 1136              		.loc 1 548 6 is_stmt 0 view .LVU324
 1137 0000 C728     		cmp	r0, #199
 1138 0002 1AD8     		bhi	.L125
 1139              	.LVL73:
 1140              	.LBB89:
 1141              	.LBI89:
 547:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1142              		.loc 1 547 6 is_stmt 1 view .LVU325
 1143              	.LBB90:
 549:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1144              		.loc 1 549 3 view .LVU326
 1145              	.LBE90:
 1146              	.LBE89:
 547:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1147              		.loc 1 547 40 is_stmt 0 view .LVU327
 1148 0004 10B4     		push	{r4}
 1149              		.cfi_def_cfa_offset 4
 1150              		.cfi_offset 4, -4
 1151              	.LBB93:
 1152              	.LBB91:
 549:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1153              		.loc 1 549 6 view .LVU328
 1154 0006 63B9     		cbnz	r3, .L128
 1155              		.loc 1 553 5 is_stmt 1 view .LVU329
 1156              		.loc 1 553 17 is_stmt 0 view .LVU330
 1157 0008 0C4B     		ldr	r3, .L129
 1158              	.LVL74:
ARM GAS  /tmp/cccWRI8T.s 			page 36


 1159              		.loc 1 553 17 view .LVU331
 1160 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1161              	.LVL75:
 1162              		.loc 1 553 25 view .LVU332
 1163 000e 0124     		movs	r4, #1
 1164              		.loc 1 553 17 view .LVU333
 1165 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1166              		.loc 1 553 25 view .LVU334
 1167 0012 04FA01F1 		lsl	r1, r4, r1
 1168              	.LVL76:
 1169              		.loc 1 553 17 view .LVU335
 1170 0016 23EA0101 		bic	r1, r3, r1
 1171 001a 8154     		strb	r1, [r0, r2]
 1172              	.LVL77:
 1173              		.loc 1 553 17 view .LVU336
 1174              	.LBE91:
 1175              	.LBE93:
 554:src/menu.c    ****   }
 555:src/menu.c    **** }
 1176              		.loc 1 555 1 view .LVU337
 1177 001c 5DF8044B 		ldr	r4, [sp], #4
 1178              		.cfi_remember_state
 1179              		.cfi_restore 4
 1180              		.cfi_def_cfa_offset 0
 1181 0020 7047     		bx	lr
 1182              	.LVL78:
 1183              	.L128:
 1184              		.cfi_restore_state
 1185              	.LBB94:
 1186              	.LBB92:
 550:src/menu.c    ****   }
 1187              		.loc 1 550 5 is_stmt 1 view .LVU338
 550:src/menu.c    ****   }
 1188              		.loc 1 550 17 is_stmt 0 view .LVU339
 1189 0022 064B     		ldr	r3, .L129
 1190              	.LVL79:
 550:src/menu.c    ****   }
 1191              		.loc 1 550 17 view .LVU340
 1192 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1193              	.LVL80:
 550:src/menu.c    ****   }
 1194              		.loc 1 550 24 view .LVU341
 1195 0028 0124     		movs	r4, #1
 550:src/menu.c    ****   }
 1196              		.loc 1 550 17 view .LVU342
 1197 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 550:src/menu.c    ****   }
 1198              		.loc 1 550 24 view .LVU343
 1199 002c 04FA01F1 		lsl	r1, r4, r1
 1200              	.LVL81:
 550:src/menu.c    ****   }
 1201              		.loc 1 550 17 view .LVU344
 1202 0030 1943     		orrs	r1, r1, r3
 1203 0032 8154     		strb	r1, [r0, r2]
 1204              	.LBE92:
 1205              	.LBE94:
 1206              		.loc 1 555 1 view .LVU345
ARM GAS  /tmp/cccWRI8T.s 			page 37


 1207 0034 5DF8044B 		ldr	r4, [sp], #4
 1208              		.cfi_restore 4
 1209              		.cfi_def_cfa_offset 0
 1210 0038 7047     		bx	lr
 1211              	.LVL82:
 1212              	.L125:
 1213              		.loc 1 555 1 view .LVU346
 1214 003a 7047     		bx	lr
 1215              	.L130:
 1216              		.align	2
 1217              	.L129:
 1218 003c 00000000 		.word	.LANCHOR0
 1219              		.cfi_endproc
 1220              	.LFE14:
 1222              		.section	.text.get_current_menu_ref,"ax",%progbits
 1223              		.align	1
 1224              		.p2align 2,,3
 1225              		.global	get_current_menu_ref
 1226              		.syntax unified
 1227              		.thumb
 1228              		.thumb_func
 1229              		.fpu fpv4-sp-d16
 1231              	get_current_menu_ref:
 1232              	.LVL83:
 1233              	.LFB15:
 556:src/menu.c    **** 
 557:src/menu.c    **** struct _menu get_current_menu_ref() {
 1234              		.loc 1 557 37 is_stmt 1 view -0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 0
 1237              		@ frame_needed = 0, uses_anonymous_args = 0
 558:src/menu.c    ****   int i = current_menu;
 1238              		.loc 1 558 3 view .LVU348
 557:src/menu.c    ****   int i = current_menu;
 1239              		.loc 1 557 37 is_stmt 0 view .LVU349
 1240 0000 08B5     		push	{r3, lr}
 1241              		.cfi_def_cfa_offset 8
 1242              		.cfi_offset 3, -8
 1243              		.cfi_offset 14, -4
 559:src/menu.c    ****   if (C_LOCKED)
 1244              		.loc 1 559 7 view .LVU350
 1245 0002 294B     		ldr	r3, .L147
 558:src/menu.c    ****   int i = current_menu;
 1246              		.loc 1 558 7 view .LVU351
 1247 0004 294A     		ldr	r2, .L147+4
 1248              		.loc 1 559 7 view .LVU352
 1249 0006 1B68     		ldr	r3, [r3]
 558:src/menu.c    ****   int i = current_menu;
 1250              		.loc 1 558 7 view .LVU353
 1251 0008 92F90010 		ldrsb	r1, [r2]
 1252              	.LVL84:
 1253              		.loc 1 559 3 is_stmt 1 view .LVU354
 1254              		.loc 1 559 7 is_stmt 0 view .LVU355
 1255 000c 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 1256              		.loc 1 559 6 view .LVU356
 1257 0010 03F04102 		and	r2, r3, #65
 1258 0014 412A     		cmp	r2, #65
ARM GAS  /tmp/cccWRI8T.s 			page 38


 557:src/menu.c    ****   int i = current_menu;
 1259              		.loc 1 557 37 view .LVU357
 1260 0016 0346     		mov	r3, r0
 1261              		.loc 1 559 6 view .LVU358
 1262 0018 0BD0     		beq	.L145
 1263              	.LVL85:
 1264              	.L132:
 560:src/menu.c    ****     switch (current_menu) {
 561:src/menu.c    ****     case (M_Clear):
 562:src/menu.c    ****       i = M_Clear_C;
 563:src/menu.c    ****       break;
 564:src/menu.c    ****     case (M_Swap):
 565:src/menu.c    ****       i = M_Swap_C;
 566:src/menu.c    ****       break;
 567:src/menu.c    ****     case (M_Arrow):
 568:src/menu.c    ****       i = M_Arrow_C;
 569:src/menu.c    ****       break;
 570:src/menu.c    ****     case (M_Prob):
 571:src/menu.c    ****       i = M_Prob_C;
 572:src/menu.c    ****       break;
 573:src/menu.c    ****     case (M_Blank2):
 574:src/menu.c    ****       i = M_Blank2_C;
 575:src/menu.c    ****       break;
 576:src/menu.c    ****     case (M_Misc):
 577:src/menu.c    ****       i = M_Misc_C;
 578:src/menu.c    ****       break;
 579:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 580:src/menu.c    ****     case (M_Flags):// so don't display them.
 581:src/menu.c    ****     case (M_Stats):
 582:src/menu.c    ****     case (M_Setup2):
 583:src/menu.c    ****     case (M_Solve):
 584:src/menu.c    ****     case (M_Program):
 585:src/menu.c    ****       i = M_C_Lock;
 586:src/menu.c    ****     default:;
 1265              		.loc 1 586 13 is_stmt 1 view .LVU359
 587:src/menu.c    ****     }
 588:src/menu.c    ****   if (current_menu == M_User) {
 1266              		.loc 1 588 3 view .LVU360
 1267              		.loc 1 588 6 is_stmt 0 view .LVU361
 1268 001a 6329     		cmp	r1, #99
 1269 001c 32D0     		beq	.L146
 1270              	.LVL86:
 1271              	.L137:
 589:src/menu.c    ****     return UserMenu;
 590:src/menu.c    ****   }
 591:src/menu.c    ****   else {
 592:src/menu.c    ****     return Menus[i];
 1272              		.loc 1 592 5 is_stmt 1 view .LVU362
 1273              		.loc 1 592 17 is_stmt 0 view .LVU363
 1274 001e 2448     		ldr	r0, .L147+8
 1275 0020 D022     		movs	r2, #208
 1276 0022 02FB0101 		mla	r1, r2, r1, r0
 1277              	.LVL87:
 1278              		.loc 1 592 17 view .LVU364
 1279 0026 1846     		mov	r0, r3
 1280 0028 FFF7FEFF 		bl	memcpy
 1281              	.LVL88:
ARM GAS  /tmp/cccWRI8T.s 			page 39


 1282              		.loc 1 592 17 view .LVU365
 1283 002c 0346     		mov	r3, r0
 593:src/menu.c    ****   }
 594:src/menu.c    **** }
 1284              		.loc 1 594 1 view .LVU366
 1285 002e 1846     		mov	r0, r3
 1286 0030 08BD     		pop	{r3, pc}
 1287              	.LVL89:
 1288              	.L145:
 560:src/menu.c    ****     case (M_Clear):
 1289              		.loc 1 560 5 is_stmt 1 view .LVU367
 1290 0032 4A1E     		subs	r2, r1, #1
 1291 0034 0E2A     		cmp	r2, #14
 1292 0036 F0D8     		bhi	.L132
 1293 0038 01A0     		adr	r0, .L134
 1294 003a 50F822F0 		ldr	pc, [r0, r2, lsl #2]
 1295              	.LVL90:
 1296 003e 00BF     		.p2align 2
 1297              	.L134:
 1298 0040 A5000000 		.word	.L140+1
 1299 0044 1B000000 		.word	.L132+1
 1300 0048 A1000000 		.word	.L135+1
 1301 004c 1B000000 		.word	.L132+1
 1302 0050 9D000000 		.word	.L139+1
 1303 0054 81000000 		.word	.L138+1
 1304 0058 A1000000 		.word	.L135+1
 1305 005c 1B000000 		.word	.L132+1
 1306 0060 7D000000 		.word	.L143+1
 1307 0064 A1000000 		.word	.L135+1
 1308 0068 99000000 		.word	.L136+1
 1309 006c A1000000 		.word	.L135+1
 1310 0070 A1000000 		.word	.L135+1
 1311 0074 A1000000 		.word	.L135+1
 1312 0078 95000000 		.word	.L133+1
 1313              		.p2align 1
 1314              	.L143:
 568:src/menu.c    ****       break;
 1315              		.loc 1 568 9 is_stmt 0 view .LVU368
 1316 007c 1421     		movs	r1, #20
 1317              	.LVL91:
 568:src/menu.c    ****       break;
 1318              		.loc 1 568 9 view .LVU369
 1319 007e CEE7     		b	.L137
 1320              	.LVL92:
 1321              	.L138:
 559:src/menu.c    ****     switch (current_menu) {
 1322              		.loc 1 559 6 view .LVU370
 1323 0080 1321     		movs	r1, #19
 1324              	.LVL93:
 559:src/menu.c    ****     switch (current_menu) {
 1325              		.loc 1 559 6 view .LVU371
 1326 0082 CCE7     		b	.L137
 1327              	.LVL94:
 1328              	.L146:
 589:src/menu.c    ****   }
 1329              		.loc 1 589 5 is_stmt 1 view .LVU372
 589:src/menu.c    ****   }
ARM GAS  /tmp/cccWRI8T.s 			page 40


 1330              		.loc 1 589 12 is_stmt 0 view .LVU373
 1331 0084 0B49     		ldr	r1, .L147+12
 1332              	.LVL95:
 589:src/menu.c    ****   }
 1333              		.loc 1 589 12 view .LVU374
 1334 0086 D022     		movs	r2, #208
 1335 0088 1846     		mov	r0, r3
 1336 008a FFF7FEFF 		bl	memcpy
 1337              	.LVL96:
 589:src/menu.c    ****   }
 1338              		.loc 1 589 12 view .LVU375
 1339 008e 0346     		mov	r3, r0
 1340              		.loc 1 594 1 view .LVU376
 1341 0090 1846     		mov	r0, r3
 1342 0092 08BD     		pop	{r3, pc}
 1343              	.LVL97:
 1344              	.L133:
 574:src/menu.c    ****       break;
 1345              		.loc 1 574 7 is_stmt 1 view .LVU377
 575:src/menu.c    ****     case (M_Misc):
 1346              		.loc 1 575 7 view .LVU378
 574:src/menu.c    ****       break;
 1347              		.loc 1 574 9 is_stmt 0 view .LVU379
 1348 0094 1621     		movs	r1, #22
 575:src/menu.c    ****     case (M_Misc):
 1349              		.loc 1 575 7 view .LVU380
 1350 0096 C2E7     		b	.L137
 1351              	.LVL98:
 1352              	.L136:
 571:src/menu.c    ****       break;
 1353              		.loc 1 571 7 is_stmt 1 view .LVU381
 572:src/menu.c    ****     case (M_Blank2):
 1354              		.loc 1 572 7 view .LVU382
 571:src/menu.c    ****       break;
 1355              		.loc 1 571 9 is_stmt 0 view .LVU383
 1356 0098 1521     		movs	r1, #21
 572:src/menu.c    ****     case (M_Blank2):
 1357              		.loc 1 572 7 view .LVU384
 1358 009a C0E7     		b	.L137
 1359              	.LVL99:
 1360              	.L139:
 577:src/menu.c    ****       break;
 1361              		.loc 1 577 7 is_stmt 1 view .LVU385
 578:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1362              		.loc 1 578 7 view .LVU386
 577:src/menu.c    ****       break;
 1363              		.loc 1 577 9 is_stmt 0 view .LVU387
 1364 009c 1721     		movs	r1, #23
 578:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1365              		.loc 1 578 7 view .LVU388
 1366 009e BEE7     		b	.L137
 1367              	.LVL100:
 1368              	.L135:
 585:src/menu.c    ****     default:;
 1369              		.loc 1 585 7 is_stmt 1 view .LVU389
 585:src/menu.c    ****     default:;
 1370              		.loc 1 585 9 is_stmt 0 view .LVU390
ARM GAS  /tmp/cccWRI8T.s 			page 41


 1371 00a0 1121     		movs	r1, #17
 1372 00a2 BCE7     		b	.L137
 1373              	.LVL101:
 1374              	.L140:
 562:src/menu.c    ****       break;
 1375              		.loc 1 562 9 view .LVU391
 1376 00a4 1221     		movs	r1, #18
 1377              	.LVL102:
 562:src/menu.c    ****       break;
 1378              		.loc 1 562 9 view .LVU392
 1379 00a6 BAE7     		b	.L137
 1380              	.L148:
 1381              		.align	2
 1382              	.L147:
 1383 00a8 00000000 		.word	main_ram
 1384 00ac 00000000 		.word	.LANCHOR1
 1385 00b0 00000000 		.word	Menus
 1386 00b4 00000000 		.word	.LANCHOR4
 1387              		.cfi_endproc
 1388              	.LFE15:
 1390              		.section	.text.display_menu,"ax",%progbits
 1391              		.align	1
 1392              		.p2align 2,,3
 1393              		.global	display_menu
 1394              		.syntax unified
 1395              		.thumb
 1396              		.thumb_func
 1397              		.fpu fpv4-sp-d16
 1399              	display_menu:
 1400              	.LFB16:
 595:src/menu.c    **** 
 596:src/menu.c    **** void display_menu (struct _menu Ref) {
 1401              		.loc 1 596 38 is_stmt 1 view -0
 1402              		.cfi_startproc
 1403              		@ args = 208, pretend = 16, frame = 0
 1404              		@ frame_needed = 0, uses_anonymous_args = 0
 597:src/menu.c    ****   int len = 0;
 1405              		.loc 1 597 3 view .LVU394
 1406              	.LVL103:
 598:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1407              		.loc 1 598 3 view .LVU395
 596:src/menu.c    ****   int len = 0;
 1408              		.loc 1 596 38 is_stmt 0 view .LVU396
 1409 0000 84B0     		sub	sp, sp, #16
 1410              		.cfi_def_cfa_offset 16
 1411 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1412              		.cfi_def_cfa_offset 52
 1413              		.cfi_offset 4, -52
 1414              		.cfi_offset 5, -48
 1415              		.cfi_offset 6, -44
 1416              		.cfi_offset 7, -40
 1417              		.cfi_offset 8, -36
 1418              		.cfi_offset 9, -32
 1419              		.cfi_offset 10, -28
 1420              		.cfi_offset 11, -24
 1421              		.cfi_offset 14, -20
 1422 0006 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/cccWRI8T.s 			page 42


 1423              		.cfi_def_cfa_offset 64
 1424              		.loc 1 598 3 view .LVU397
 1425 0008 0024     		movs	r4, #0
 596:src/menu.c    ****   int len = 0;
 1426              		.loc 1 596 38 view .LVU398
 1427 000a 0CAD     		add	r5, sp, #48
 1428 000c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1429              		.loc 1 598 3 view .LVU399
 1430 0010 3E4E     		ldr	r6, .L167
 1431 0012 0094     		str	r4, [sp]
 1432 0014 2046     		mov	r0, r4
 1433 0016 3423     		movs	r3, #52
 1434 0018 4FF4C872 		mov	r2, #400
 1435 001c BC21     		movs	r1, #188
 1436 001e B047     		blx	r6
 1437              	.LVL104:
 599:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1438              		.loc 1 599 3 is_stmt 1 view .LVU400
 1439 0020 3B4D     		ldr	r5, .L167+4
 1440 0022 FF23     		movs	r3, #255
 1441 0024 0093     		str	r3, [sp]
 1442 0026 4FF4C872 		mov	r2, #400
 1443 002a 0123     		movs	r3, #1
 1444 002c BC21     		movs	r1, #188
 1445 002e 2046     		mov	r0, r4
 1446 0030 B047     		blx	r6
 1447              	.LVL105:
 600:src/menu.c    ****   //Clear previous menu
 601:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1448              		.loc 1 601 3 view .LVU401
 1449              	.LBB95:
 1450              		.loc 1 601 8 view .LVU402
 1451              		.loc 1 601 21 view .LVU403
 602:src/menu.c    ****     mdots[col][0] = 0;
 1452              		.loc 1 602 19 is_stmt 0 view .LVU404
 1453 0032 2246     		mov	r2, r4
 1454 0034 05F5C871 		add	r1, r5, #400
 1455              	.LBE95:
 599:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1456              		.loc 1 599 3 view .LVU405
 1457 0038 2B46     		mov	r3, r5
 1458              	.LVL106:
 1459              	.L150:
 1460              	.LBB96:
 1461              		.loc 1 602 5 is_stmt 1 discriminator 3 view .LVU406
 1462              		.loc 1 602 19 is_stmt 0 discriminator 3 view .LVU407
 1463 003a 1A70     		strb	r2, [r3]
 603:src/menu.c    ****     mdots[col][1] = 0;
 1464              		.loc 1 603 5 is_stmt 1 discriminator 3 view .LVU408
 1465              		.loc 1 603 19 is_stmt 0 discriminator 3 view .LVU409
 1466 003c 5A70     		strb	r2, [r3, #1]
 601:src/menu.c    ****     mdots[col][0] = 0;
 1467              		.loc 1 601 32 is_stmt 1 discriminator 3 view .LVU410
 601:src/menu.c    ****     mdots[col][0] = 0;
 1468              		.loc 1 601 21 discriminator 3 view .LVU411
 1469 003e 0233     		adds	r3, r3, #2
 601:src/menu.c    ****     mdots[col][0] = 0;
ARM GAS  /tmp/cccWRI8T.s 			page 43


 1470              		.loc 1 601 3 is_stmt 0 discriminator 3 view .LVU412
 1471 0040 9942     		cmp	r1, r3
 1472 0042 FAD1     		bne	.L150
 1473 0044 14AE     		add	r6, sp, #80
 601:src/menu.c    ****     mdots[col][0] = 0;
 1474              		.loc 1 601 3 view .LVU413
 1475 0046 0024     		movs	r4, #0
 1476              	.LVL107:
 1477              	.L151:
 601:src/menu.c    ****     mdots[col][0] = 0;
 1478              		.loc 1 601 3 view .LVU414
 1479              	.LBE96:
 1480              	.LBB97:
 604:src/menu.c    ****   }
 605:src/menu.c    **** 
 606:src/menu.c    ****   // Draw menu items
 607:src/menu.c    ****   // 
 608:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 609:src/menu.c    ****     /*
 610:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 611:src/menu.c    ****     */
 612:src/menu.c    ****     // Label is Ref.keys[item].unshifted_label
 613:src/menu.c    ****     // Unshifted first
 614:src/menu.c    ****       len = pixel_length (Ref.keys[item].unshifted_label, 0); // 0 means not small font
 1481              		.loc 1 614 7 is_stmt 1 view .LVU415
 1482              		.loc 1 614 13 is_stmt 0 view .LVU416
 1483 0048 0021     		movs	r1, #0
 1484 004a 3046     		mov	r0, r6
 1485 004c FFF7FEFF 		bl	pixel_length
 1486              	.LVL108:
 615:src/menu.c    ****       set_menu_label ( Ref.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1487              		.loc 1 615 7 is_stmt 1 view .LVU417
 1488              		.loc 1 615 73 is_stmt 0 view .LVU418
 1489 0050 C0F12000 		rsb	r0, r0, #32
 1490              	.LVL109:
 1491              		.loc 1 615 79 view .LVU419
 1492 0054 00EBD070 		add	r0, r0, r0, lsr #31
 1493              		.loc 1 615 7 view .LVU420
 1494 0058 04EB6001 		add	r1, r4, r0, asr #1
 1495 005c 0022     		movs	r2, #0
 1496 005e 3046     		mov	r0, r6
 1497 0060 06F10807 		add	r7, r6, #8
 1498 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1499              	.LVL110:
 616:src/menu.c    ****       // Now shifted ...	
 617:src/menu.c    ****       len = pixel_length (Ref.keys[item].shifted_label, 0); // 0 means not small font
 1500              		.loc 1 617 7 is_stmt 1 view .LVU421
 1501              		.loc 1 617 13 is_stmt 0 view .LVU422
 1502 0068 0021     		movs	r1, #0
 1503 006a 3846     		mov	r0, r7
 1504 006c FFF7FEFF 		bl	pixel_length
 1505              	.LVL111:
 618:src/menu.c    ****       len = item*32 + (32-len)/2;
 1506              		.loc 1 618 7 is_stmt 1 view .LVU423
 1507              		.loc 1 618 26 is_stmt 0 view .LVU424
 1508 0070 C0F12000 		rsb	r0, r0, #32
 1509              	.LVL112:
ARM GAS  /tmp/cccWRI8T.s 			page 44


 1510              		.loc 1 618 31 view .LVU425
 1511 0074 00EBD070 		add	r0, r0, r0, lsr #31
 1512              	.LVL113:
 619:src/menu.c    ****       if (len<0) len = 0;
 1513              		.loc 1 619 7 is_stmt 1 view .LVU426
 618:src/menu.c    ****       len = item*32 + (32-len)/2;
 1514              		.loc 1 618 11 is_stmt 0 view .LVU427
 1515 0078 04EB6001 		add	r1, r4, r0, asr #1
 1516              	.LVL114:
 618:src/menu.c    ****       len = item*32 + (32-len)/2;
 1517              		.loc 1 618 11 view .LVU428
 1518 007c C729     		cmp	r1, #199
 1519 007e A8BF     		it	ge
 1520 0080 C721     		movge	r1, #199
 1521              	.LVL115:
 620:src/menu.c    ****       if (len>199) len = 199;
 621:src/menu.c    ****       set_menu_label ( Ref.keys[item].shifted_label, 0, len, 1 );
 1522              		.loc 1 621 7 is_stmt 1 view .LVU429
 1523 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1524              	.LVL116:
 1525              		.loc 1 621 7 is_stmt 0 view .LVU430
 1526 0086 3846     		mov	r0, r7
 1527 0088 2034     		adds	r4, r4, #32
 1528 008a 0122     		movs	r2, #1
 1529 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1530              	.LVL117:
 608:src/menu.c    ****     /*
 1531              		.loc 1 608 32 is_stmt 1 view .LVU431
 608:src/menu.c    ****     /*
 1532              		.loc 1 608 22 view .LVU432
 608:src/menu.c    ****     /*
 1533              		.loc 1 608 3 is_stmt 0 view .LVU433
 1534 0090 C02C     		cmp	r4, #192
 1535 0092 06F12006 		add	r6, r6, #32
 1536 0096 D7D1     		bne	.L151
 1537 0098 1E4E     		ldr	r6, .L167+8
 1538              	.LBE97:
 1539              	.LBB98:
 1540              	.LBB99:
 622:src/menu.c    ****   }
 623:src/menu.c    **** 
 624:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 625:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 626:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 627:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 628:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1541              		.loc 1 628 2 view .LVU434
 1542 009a DFF87090 		ldr	r9, .L167
 1543 009e C5F1040A 		rsb	r10, r5, #4
 1544 00a2 06F5C47B 		add	fp, r6, #392
 1545              	.LBE99:
 1546              	.LBE98:
 1547              	.LBB101:
 608:src/menu.c    ****     /*
 1548              		.loc 1 608 3 view .LVU435
 1549 00a6 771E     		subs	r7, r6, #1
 1550              	.LBE101:
ARM GAS  /tmp/cccWRI8T.s 			page 45


 1551              	.LBB102:
 1552              	.LBB100:
 1553              		.loc 1 628 2 view .LVU436
 1554 00a8 4FF0FF08 		mov	r8, #255
 1555              	.L152:
 1556              	.LVL118:
 625:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1557              		.loc 1 625 23 is_stmt 1 view .LVU437
 1558 00ac 0AEB0705 		add	r5, r10, r7
 625:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1559              		.loc 1 625 14 is_stmt 0 view .LVU438
 1560 00b0 0024     		movs	r4, #0
 1561              	.LVL119:
 1562              	.L155:
 626:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1563              		.loc 1 626 7 is_stmt 1 view .LVU439
 1564              		.loc 1 628 2 view .LVU440
 626:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1565              		.loc 1 626 22 is_stmt 0 view .LVU441
 1566 00b2 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 626:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1567              		.loc 1 626 40 view .LVU442
 1568 00b6 2241     		asrs	r2, r2, r4
 1569              		.loc 1 628 2 view .LVU443
 1570 00b8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1571 00bc 0323     		movs	r3, #3
 626:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1572              		.loc 1 626 10 view .LVU444
 1573 00be 12F0010F 		tst	r2, #1
 1574              		.loc 1 628 2 view .LVU445
 1575 00c2 01F1E901 		add	r1, r1, #233
 1576 00c6 1A46     		mov	r2, r3
 1577 00c8 2846     		mov	r0, r5
 626:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1578              		.loc 1 626 10 view .LVU446
 1579 00ca 02D0     		beq	.L153
 1580              		.loc 1 628 2 view .LVU447
 1581 00cc CDF80080 		str	r8, [sp]
 1582 00d0 C847     		blx	r9
 1583              	.LVL120:
 1584              	.L153:
 629:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1585              		.loc 1 629 7 is_stmt 1 view .LVU448
 630:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 631:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1586              		.loc 1 631 2 view .LVU449
 629:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1587              		.loc 1 629 22 is_stmt 0 view .LVU450
 1588 00d2 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 629:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1589              		.loc 1 629 40 view .LVU451
 1590 00d4 2241     		asrs	r2, r2, r4
 1591              		.loc 1 631 2 view .LVU452
 1592 00d6 A4EB8401 		sub	r1, r4, r4, lsl #2
 1593 00da 0323     		movs	r3, #3
 629:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1594              		.loc 1 629 10 view .LVU453
ARM GAS  /tmp/cccWRI8T.s 			page 46


 1595 00dc 12F0010F 		tst	r2, #1
 1596              		.loc 1 631 2 view .LVU454
 1597 00e0 01F1D001 		add	r1, r1, #208
 1598 00e4 1A46     		mov	r2, r3
 1599 00e6 04F10104 		add	r4, r4, #1
 1600              	.LVL121:
 1601              		.loc 1 631 2 view .LVU455
 1602 00ea 2846     		mov	r0, r5
 629:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1603              		.loc 1 629 10 view .LVU456
 1604 00ec 02D0     		beq	.L154
 1605              		.loc 1 631 2 view .LVU457
 1606 00ee CDF80080 		str	r8, [sp]
 1607 00f2 C847     		blx	r9
 1608              	.LVL122:
 1609              	.L154:
 625:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1610              		.loc 1 625 32 is_stmt 1 discriminator 2 view .LVU458
 625:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1611              		.loc 1 625 23 discriminator 2 view .LVU459
 625:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1612              		.loc 1 625 5 is_stmt 0 discriminator 2 view .LVU460
 1613 00f4 062C     		cmp	r4, #6
 1614 00f6 DCD1     		bne	.L155
 1615              	.LBE100:
 624:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1616              		.loc 1 624 32 is_stmt 1 discriminator 2 view .LVU461
 624:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1617              		.loc 1 624 21 discriminator 2 view .LVU462
 1618 00f8 0236     		adds	r6, r6, #2
 624:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1619              		.loc 1 624 3 is_stmt 0 discriminator 2 view .LVU463
 1620 00fa B345     		cmp	fp, r6
 1621 00fc 07F10207 		add	r7, r7, #2
 1622 0100 D4D1     		bne	.L152
 1623              	.LBE102:
 632:src/menu.c    ****     }
 633:src/menu.c    ****   }
 634:src/menu.c    **** }
 1624              		.loc 1 634 1 view .LVU464
 1625 0102 03B0     		add	sp, sp, #12
 1626              		.cfi_def_cfa_offset 52
 1627              		@ sp needed
 1628 0104 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1629              		.cfi_restore 14
 1630              		.cfi_restore 11
 1631              		.cfi_restore 10
 1632              		.cfi_restore 9
 1633              		.cfi_restore 8
 1634              		.cfi_restore 7
 1635              		.cfi_restore 6
 1636              		.cfi_restore 5
 1637              		.cfi_restore 4
 1638              		.cfi_def_cfa_offset 16
 1639              	.LVL123:
 1640              		.loc 1 634 1 view .LVU465
 1641 0108 04B0     		add	sp, sp, #16
ARM GAS  /tmp/cccWRI8T.s 			page 47


 1642              		.cfi_def_cfa_offset 0
 1643 010a 7047     		bx	lr
 1644              	.L168:
 1645              		.align	2
 1646              	.L167:
 1647 010c 3D020008 		.word	134218301
 1648 0110 00000000 		.word	.LANCHOR0
 1649 0114 01000000 		.word	.LANCHOR0+1
 1650              		.cfi_endproc
 1651              	.LFE16:
 1653              		.section	.text.display_current_menu,"ax",%progbits
 1654              		.align	1
 1655              		.p2align 2,,3
 1656              		.global	display_current_menu
 1657              		.syntax unified
 1658              		.thumb
 1659              		.thumb_func
 1660              		.fpu fpv4-sp-d16
 1662              	display_current_menu:
 1663              	.LFB11:
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1664              		.loc 1 148 30 is_stmt 1 view -0
 1665              		.cfi_startproc
 1666              		@ args = 0, pretend = 0, frame = 208
 1667              		@ frame_needed = 0, uses_anonymous_args = 0
 149:src/menu.c    **** }
 1668              		.loc 1 149 3 view .LVU467
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1669              		.loc 1 148 30 is_stmt 0 view .LVU468
 1670 0000 10B5     		push	{r4, lr}
 1671              		.cfi_def_cfa_offset 8
 1672              		.cfi_offset 4, -8
 1673              		.cfi_offset 14, -4
 1674 0002 E4B0     		sub	sp, sp, #400
 1675              		.cfi_def_cfa_offset 408
 149:src/menu.c    **** }
 1676              		.loc 1 149 3 view .LVU469
 1677 0004 30AC     		add	r4, sp, #192
 1678 0006 2046     		mov	r0, r4
 1679 0008 FFF7FEFF 		bl	get_current_menu_ref
 1680              	.LVL124:
 1681 000c 34A9     		add	r1, sp, #208
 1682 000e C022     		movs	r2, #192
 1683 0010 6846     		mov	r0, sp
 1684 0012 FFF7FEFF 		bl	memcpy
 1685              	.LVL125:
 1686 0016 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1687 001a FFF7FEFF 		bl	display_menu
 1688              	.LVL126:
 150:src/menu.c    **** 
 1689              		.loc 1 150 1 view .LVU470
 1690 001e 64B0     		add	sp, sp, #400
 1691              		.cfi_def_cfa_offset 8
 1692              		@ sp needed
 1693 0020 10BD     		pop	{r4, pc}
 1694              		.cfi_endproc
 1695              	.LFE11:
ARM GAS  /tmp/cccWRI8T.s 			page 48


 1697 0022 00BF     		.section	.text.all_menu_dots,"ax",%progbits
 1698              		.align	1
 1699              		.p2align 2,,3
 1700              		.global	all_menu_dots
 1701              		.syntax unified
 1702              		.thumb
 1703              		.thumb_func
 1704              		.fpu fpv4-sp-d16
 1706              	all_menu_dots:
 1707              	.LFB17:
 635:src/menu.c    **** 
 636:src/menu.c    **** void all_menu_dots () {
 1708              		.loc 1 636 23 is_stmt 1 view -0
 1709              		.cfi_startproc
 1710              		@ args = 0, pretend = 0, frame = 0
 1711              		@ frame_needed = 0, uses_anonymous_args = 0
 637:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1712              		.loc 1 637 3 view .LVU472
 1713              	.LBB103:
 1714              		.loc 1 637 8 view .LVU473
 1715              	.LVL127:
 1716              		.loc 1 637 21 view .LVU474
 1717              	.LBE103:
 636:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1718              		.loc 1 636 23 is_stmt 0 view .LVU475
 1719 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1720              		.cfi_def_cfa_offset 20
 1721              		.cfi_offset 4, -20
 1722              		.cfi_offset 5, -16
 1723              		.cfi_offset 6, -12
 1724              		.cfi_offset 7, -8
 1725              		.cfi_offset 14, -4
 1726              	.LBB107:
 1727              	.LBB104:
 638:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 639:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1728              		.loc 1 639 2 view .LVU476
 1729 0002 0D4E     		ldr	r6, .L177
 1730              	.LBE104:
 1731              	.LBE107:
 636:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1732              		.loc 1 636 23 view .LVU477
 1733 0004 83B0     		sub	sp, sp, #12
 1734              		.cfi_def_cfa_offset 32
 636:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1735              		.loc 1 636 23 view .LVU478
 1736 0006 0025     		movs	r5, #0
 1737              	.LBB108:
 1738              	.LBB105:
 1739              		.loc 1 639 2 view .LVU479
 1740 0008 FF27     		movs	r7, #255
 1741              	.LVL128:
 1742              	.L172:
 638:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1743              		.loc 1 638 23 is_stmt 1 view .LVU480
 1744              	.LBE105:
 1745              	.LBE108:
ARM GAS  /tmp/cccWRI8T.s 			page 49


 636:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1746              		.loc 1 636 23 is_stmt 0 view .LVU481
 1747 000a E924     		movs	r4, #233
 1748              	.LVL129:
 1749              	.L173:
 1750              	.LBB109:
 1751              	.LBB106:
 1752              		.loc 1 639 2 is_stmt 1 discriminator 3 view .LVU482
 1753 000c 0323     		movs	r3, #3
 1754 000e 1A46     		mov	r2, r3
 1755 0010 2146     		mov	r1, r4
 1756 0012 2846     		mov	r0, r5
 1757 0014 0097     		str	r7, [sp]
 1758 0016 B047     		blx	r6
 1759              	.LVL130:
 640:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1760              		.loc 1 640 2 discriminator 3 view .LVU483
 1761 0018 0323     		movs	r3, #3
 1762 001a A4F11901 		sub	r1, r4, #25
 1763 001e 0097     		str	r7, [sp]
 1764 0020 1A46     		mov	r2, r3
 1765 0022 2846     		mov	r0, r5
 1766 0024 033C     		subs	r4, r4, #3
 1767 0026 B047     		blx	r6
 1768              	.LVL131:
 638:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1769              		.loc 1 638 32 discriminator 3 view .LVU484
 638:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1770              		.loc 1 638 23 discriminator 3 view .LVU485
 638:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1771              		.loc 1 638 5 is_stmt 0 discriminator 3 view .LVU486
 1772 0028 D72C     		cmp	r4, #215
 1773 002a EFD1     		bne	.L173
 1774              	.LBE106:
 637:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1775              		.loc 1 637 32 is_stmt 1 discriminator 2 view .LVU487
 637:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1776              		.loc 1 637 21 discriminator 2 view .LVU488
 1777 002c 0235     		adds	r5, r5, #2
 637:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1778              		.loc 1 637 3 is_stmt 0 discriminator 2 view .LVU489
 1779 002e B5F5C87F 		cmp	r5, #400
 1780 0032 EAD1     		bne	.L172
 1781              	.LBE109:
 641:src/menu.c    ****     }
 642:src/menu.c    ****   }
 643:src/menu.c    **** }  
 1782              		.loc 1 643 1 view .LVU490
 1783 0034 03B0     		add	sp, sp, #12
 1784              		.cfi_def_cfa_offset 20
 1785              		@ sp needed
 1786 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1787              	.L178:
 1788              		.align	2
 1789              	.L177:
 1790 0038 3D020008 		.word	134218301
 1791              		.cfi_endproc
ARM GAS  /tmp/cccWRI8T.s 			page 50


 1792              	.LFE17:
 1794              		.section	.text.umen_store,"ax",%progbits
 1795              		.align	1
 1796              		.p2align 2,,3
 1797              		.global	umen_store
 1798              		.syntax unified
 1799              		.thumb
 1800              		.thumb_func
 1801              		.fpu fpv4-sp-d16
 1803              	umen_store:
 1804              	.LVL132:
 1805              	.LFB20:
 644:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1);
 645:src/menu.c    **** 
 646:src/menu.c    **** void build_user_menu(void){
 647:src/menu.c    ****   // find the label 'MNU'
 648:src/menu.c    ****    const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 649:src/menu.c    ****    build_user_menu_from_program (lbl);
 650:src/menu.c    **** }
 651:src/menu.c    **** 
 652:src/menu.c    **** void build_user_menu_from_program(int lbl)
 653:src/menu.c    **** {
 654:src/menu.c    ****   // find the label 'MNU'
 655:src/menu.c    ****   // const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 656:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 657:src/menu.c    ****   int i=0;
 658:src/menu.c    ****   s_opcode op;
 659:src/menu.c    ****   opcode opc;
 660:src/menu.c    ****   char buf1[16];
 661:src/menu.c    ****   char *p = buf1;
 662:src/menu.c    ****   char c;
 663:src/menu.c    ****   int finished = 0;
 664:src/menu.c    **** 
 665:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 666:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 667:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 668:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 669:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 670:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 671:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 672:src/menu.c    ****   }
 673:src/menu.c    ****   while (pc && i < 12) {
 674:src/menu.c    **** 
 675:src/menu.c    ****     pc = do_inc(pc, 0);
 676:src/menu.c    ****     opc = getprog(pc);
 677:src/menu.c    ****     op = (s_opcode) opc;
 678:src/menu.c    **** 
 679:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 680:src/menu.c    ****       break;
 681:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 682:src/menu.c    ****       if (i==4) {
 683:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 684:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 685:src/menu.c    ****       }
 686:src/menu.c    ****       else if (i==5) {
 687:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 688:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
ARM GAS  /tmp/cccWRI8T.s 			page 51


 689:src/menu.c    ****       }
 690:src/menu.c    ****       i += 1;
 691:src/menu.c    ****       continue;
 692:src/menu.c    ****     }
 693:src/menu.c    **** 
 694:src/menu.c    ****     if (isDBL(opc) && (opDBL(opc) == DBL_ALPHA)) { // is it double alpha?
 695:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 696:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 697:src/menu.c    **** 	i++;
 698:src/menu.c    ****     	p = buf1;
 699:src/menu.c    **** 	finished = 0;
 700:src/menu.c    ****       } // ..and start reading the new alpha
 701:src/menu.c    ****       *p++ = opc & 0xff; // character 1
 702:src/menu.c    ****       c = (opc >> 16) & 0xff;
 703:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 704:src/menu.c    **** 	*p++ = c;
 705:src/menu.c    **** 	c = opc>>24;
 706:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 707:src/menu.c    **** 	  *p++ = c;
 708:src/menu.c    ****       }
 709:src/menu.c    ****       *p = '\0'; // no ++: next character can overwrite the 0.
 710:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 711:src/menu.c    **** 	finished = 1;
 712:src/menu.c    ****       }
 713:src/menu.c    ****     }
 714:src/menu.c    ****     else { // Not a DBL_ALPHA op - the usual case
 715:src/menu.c    ****       if ( p == buf1 ) { // no alpha label to use
 716:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 717:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 718:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 719:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 720:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 721:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 722:src/menu.c    **** 	  }
 723:src/menu.c    **** 	  else {
 724:src/menu.c    **** 	    prt_umen(opc, buf1); // display rarg with argument
 725:src/menu.c    **** 	  }
 726:src/menu.c    **** 	}
 727:src/menu.c    **** 	else {
 728:src/menu.c    **** 	  prt_umen(opc, buf1); // display non-rarg thing
 729:src/menu.c    **** 	}
 730:src/menu.c    ****       }
 731:src/menu.c    ****       else { // there is an alpha label to use, so reset
 732:src/menu.c    **** 	p = buf1;
 733:src/menu.c    **** 	finished = 0;
 734:src/menu.c    ****       }
 735:src/menu.c    ****       umen_store (i, opc, buf1);
 736:src/menu.c    ****       i++;
 737:src/menu.c    ****     }
 738:src/menu.c    ****   }
 739:src/menu.c    **** }
 740:src/menu.c    **** 
 741:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1) {
 1806              		.loc 1 741 49 is_stmt 1 view -0
 1807              		.cfi_startproc
 1808              		@ args = 0, pretend = 0, frame = 0
 1809              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cccWRI8T.s 			page 52


 742:src/menu.c    **** #pragma GCC diagnostic push
 743:src/menu.c    **** #pragma GCC diagnostic ignored "-Wstringop-truncation"
 744:src/menu.c    ****     if (i<6) {
 1810              		.loc 1 744 5 view .LVU492
 1811              		.loc 1 744 8 is_stmt 0 view .LVU493
 1812 0000 0528     		cmp	r0, #5
 741:src/menu.c    **** #pragma GCC diagnostic push
 1813              		.loc 1 741 49 view .LVU494
 1814 0002 70B5     		push	{r4, r5, r6, lr}
 1815              		.cfi_def_cfa_offset 16
 1816              		.cfi_offset 4, -16
 1817              		.cfi_offset 5, -12
 1818              		.cfi_offset 6, -8
 1819              		.cfi_offset 14, -4
 741:src/menu.c    **** #pragma GCC diagnostic push
 1820              		.loc 1 741 49 view .LVU495
 1821 0004 0D46     		mov	r5, r1
 1822 0006 0446     		mov	r4, r0
 1823 0008 1146     		mov	r1, r2
 1824              	.LVL133:
 1825              		.loc 1 744 8 view .LVU496
 1826 000a 0FDC     		bgt	.L180
 1827              	.LBB115:
 745:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1828              		.loc 1 745 7 is_stmt 1 view .LVU497
 1829              		.loc 1 745 31 is_stmt 0 view .LVU498
 1830 000c 104E     		ldr	r6, .L183
 1831 000e 0130     		adds	r0, r0, #1
 1832              	.LVL134:
 746:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1833              		.loc 1 746 42 view .LVU499
 1834 0010 06EB4414 		add	r4, r6, r4, lsl #5
 1835              	.LVL135:
 745:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1836              		.loc 1 745 7 view .LVU500
 1837 0014 0722     		movs	r2, #7
 1838              	.LVL136:
 745:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1839              		.loc 1 745 7 view .LVU501
 1840 0016 06EB4010 		add	r0, r6, r0, lsl #5
 1841              	.LVL137:
 745:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1842              		.loc 1 745 7 view .LVU502
 1843 001a FFF7FEFF 		bl	strncpy
 1844              	.LVL138:
 1845              		.loc 1 746 7 is_stmt 1 view .LVU503
 1846              		.loc 1 746 42 is_stmt 0 view .LVU504
 1847 001e 0022     		movs	r2, #0
 747:src/menu.c    ****       UserMenu.keys[i].unshifted = (struct _ndmap) {K_OP, opc};
 1848              		.loc 1 747 34 view .LVU505
 1849 0020 3423     		movs	r3, #52
 746:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1850              		.loc 1 746 42 view .LVU506
 1851 0022 84F82720 		strb	r2, [r4, #39]
 1852              		.loc 1 747 7 is_stmt 1 view .LVU507
 1853              		.loc 1 747 34 is_stmt 0 view .LVU508
 1854 0026 2374     		strb	r3, [r4, #16]
ARM GAS  /tmp/cccWRI8T.s 			page 53


 1855 0028 6561     		str	r5, [r4, #20]
 1856              	.LBE115:
 748:src/menu.c    ****     }
 749:src/menu.c    ****     else {
 750:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 751:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 752:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 753:src/menu.c    ****     }
 754:src/menu.c    **** #pragma GCC diagnostic pop
 755:src/menu.c    **** }  
 1857              		.loc 1 755 1 view .LVU509
 1858 002a 70BD     		pop	{r4, r5, r6, pc}
 1859              	.LVL139:
 1860              	.L180:
 1861              	.LBB116:
 1862              	.LBI116:
 741:src/menu.c    **** #pragma GCC diagnostic push
 1863              		.loc 1 741 6 is_stmt 1 view .LVU510
 1864              	.LBB117:
 1865              	.LBB118:
 750:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1866              		.loc 1 750 7 view .LVU511
 750:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1867              		.loc 1 750 30 is_stmt 0 view .LVU512
 1868 002c 841F     		subs	r4, r0, #6
 750:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1869              		.loc 1 750 33 view .LVU513
 1870 002e 084E     		ldr	r6, .L183
 1871 0030 6401     		lsls	r4, r4, #5
 1872 0032 04F12800 		add	r0, r4, #40
 1873              	.LVL140:
 750:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1874              		.loc 1 750 7 view .LVU514
 1875 0036 0722     		movs	r2, #7
 751:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1876              		.loc 1 751 42 view .LVU515
 1877 0038 3444     		add	r4, r4, r6
 750:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1878              		.loc 1 750 7 view .LVU516
 1879 003a 3044     		add	r0, r0, r6
 1880 003c FFF7FEFF 		bl	strncpy
 1881              	.LVL141:
 751:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1882              		.loc 1 751 7 is_stmt 1 view .LVU517
 751:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1883              		.loc 1 751 42 is_stmt 0 view .LVU518
 1884 0040 0022     		movs	r2, #0
 752:src/menu.c    ****     }
 1885              		.loc 1 752 34 view .LVU519
 1886 0042 3423     		movs	r3, #52
 751:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1887              		.loc 1 751 42 view .LVU520
 1888 0044 84F82F20 		strb	r2, [r4, #47]
 752:src/menu.c    ****     }
 1889              		.loc 1 752 7 is_stmt 1 view .LVU521
 1890              	.LVL142:
 752:src/menu.c    ****     }
ARM GAS  /tmp/cccWRI8T.s 			page 54


 1891              		.loc 1 752 34 is_stmt 0 view .LVU522
 1892 0048 2376     		strb	r3, [r4, #24]
 1893 004a E561     		str	r5, [r4, #28]
 1894              	.LBE118:
 1895              	.LBE117:
 1896              	.LBE116:
 1897              		.loc 1 755 1 view .LVU523
 1898 004c 70BD     		pop	{r4, r5, r6, pc}
 1899              	.LVL143:
 1900              	.L184:
 1901              		.loc 1 755 1 view .LVU524
 1902 004e 00BF     		.align	2
 1903              	.L183:
 1904 0050 00000000 		.word	.LANCHOR4
 1905              		.cfi_endproc
 1906              	.LFE20:
 1908              		.section	.text.build_user_menu_from_program,"ax",%progbits
 1909              		.align	1
 1910              		.p2align 2,,3
 1911              		.global	build_user_menu_from_program
 1912              		.syntax unified
 1913              		.thumb
 1914              		.thumb_func
 1915              		.fpu fpv4-sp-d16
 1917              	build_user_menu_from_program:
 1918              	.LVL144:
 1919              	.LFB19:
 653:src/menu.c    ****   // find the label 'MNU'
 1920              		.loc 1 653 1 is_stmt 1 view -0
 1921              		.cfi_startproc
 1922              		@ args = 0, pretend = 0, frame = 16
 1923              		@ frame_needed = 0, uses_anonymous_args = 0
 656:src/menu.c    ****   int i=0;
 1924              		.loc 1 656 3 view .LVU526
 653:src/menu.c    ****   // find the label 'MNU'
 1925              		.loc 1 653 1 is_stmt 0 view .LVU527
 1926 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1927              		.cfi_def_cfa_offset 36
 1928              		.cfi_offset 4, -36
 1929              		.cfi_offset 5, -32
 1930              		.cfi_offset 6, -28
 1931              		.cfi_offset 7, -24
 1932              		.cfi_offset 8, -20
 1933              		.cfi_offset 9, -16
 1934              		.cfi_offset 10, -12
 1935              		.cfi_offset 11, -8
 1936              		.cfi_offset 14, -4
 656:src/menu.c    ****   int i=0;
 1937              		.loc 1 656 21 view .LVU528
 1938 0004 0021     		movs	r1, #0
 653:src/menu.c    ****   // find the label 'MNU'
 1939              		.loc 1 653 1 view .LVU529
 1940 0006 85B0     		sub	sp, sp, #20
 1941              		.cfi_def_cfa_offset 56
 656:src/menu.c    ****   int i=0;
 1942              		.loc 1 656 21 view .LVU530
 1943 0008 FFF7FEFF 		bl	findmultilbl
ARM GAS  /tmp/cccWRI8T.s 			page 55


 1944              	.LVL145:
 656:src/menu.c    ****   int i=0;
 1945              		.loc 1 656 21 view .LVU531
 1946 000c 5C4B     		ldr	r3, .L236
 1947 000e 0546     		mov	r5, r0
 1948              	.LVL146:
 657:src/menu.c    ****   s_opcode op;
 1949              		.loc 1 657 3 is_stmt 1 view .LVU532
 658:src/menu.c    ****   opcode opc;
 1950              		.loc 1 658 3 view .LVU533
 659:src/menu.c    ****   char buf1[16];
 1951              		.loc 1 659 3 view .LVU534
 660:src/menu.c    ****   char *p = buf1;
 1952              		.loc 1 660 3 view .LVU535
 661:src/menu.c    ****   char c;
 1953              		.loc 1 661 3 view .LVU536
 662:src/menu.c    ****   int finished = 0;
 1954              		.loc 1 662 3 view .LVU537
 663:src/menu.c    **** 
 1955              		.loc 1 663 3 view .LVU538
 665:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1956              		.loc 1 665 3 view .LVU539
 1957              	.LBB119:
 665:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1958              		.loc 1 665 8 view .LVU540
 665:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1959              		.loc 1 665 19 view .LVU541
 666:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1960              		.loc 1 666 43 is_stmt 0 view .LVU542
 1961 0010 0022     		movs	r2, #0
 1962 0012 03F1C000 		add	r0, r3, #192
 1963              	.LVL147:
 668:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1964              		.loc 1 668 42 view .LVU543
 1965 0016 2E21     		movs	r1, #46
 1966              	.LVL148:
 1967              	.L186:
 666:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1968              		.loc 1 666 7 is_stmt 1 discriminator 3 view .LVU544
 666:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1969              		.loc 1 666 43 is_stmt 0 discriminator 3 view .LVU545
 1970 0018 83F82020 		strb	r2, [r3, #32]
 667:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1971              		.loc 1 667 7 is_stmt 1 discriminator 3 view .LVU546
 667:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1972              		.loc 1 667 40 is_stmt 0 discriminator 3 view .LVU547
 1973 001c 5A61     		str	r2, [r3, #20]
 668:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1974              		.loc 1 668 7 is_stmt 1 discriminator 3 view .LVU548
 668:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1975              		.loc 1 668 42 is_stmt 0 discriminator 3 view .LVU549
 1976 001e 1974     		strb	r1, [r3, #16]
 669:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1977              		.loc 1 669 7 is_stmt 1 discriminator 3 view .LVU550
 669:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1978              		.loc 1 669 41 is_stmt 0 discriminator 3 view .LVU551
 1979 0020 83F82820 		strb	r2, [r3, #40]
ARM GAS  /tmp/cccWRI8T.s 			page 56


 670:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1980              		.loc 1 670 7 is_stmt 1 discriminator 3 view .LVU552
 670:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1981              		.loc 1 670 38 is_stmt 0 discriminator 3 view .LVU553
 1982 0024 DA61     		str	r2, [r3, #28]
 671:src/menu.c    ****   }
 1983              		.loc 1 671 7 is_stmt 1 discriminator 3 view .LVU554
 671:src/menu.c    ****   }
 1984              		.loc 1 671 40 is_stmt 0 discriminator 3 view .LVU555
 1985 0026 1976     		strb	r1, [r3, #24]
 665:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1986              		.loc 1 665 24 is_stmt 1 discriminator 3 view .LVU556
 665:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1987              		.loc 1 665 19 discriminator 3 view .LVU557
 1988 0028 2033     		adds	r3, r3, #32
 665:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1989              		.loc 1 665 3 is_stmt 0 discriminator 3 view .LVU558
 1990 002a 8342     		cmp	r3, r0
 1991 002c F4D1     		bne	.L186
 665:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1992              		.loc 1 665 3 discriminator 3 view .LVU559
 1993              	.LBE119:
 673:src/menu.c    **** 
 1994              		.loc 1 673 9 is_stmt 1 view .LVU560
 1995 002e 65B3     		cbz	r5, .L185
 1996              	.LBB120:
 687:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1997              		.loc 1 687 29 is_stmt 0 view .LVU561
 1998 0030 DFF86891 		ldr	r9, .L236+28
 1999              	.LBE120:
 663:src/menu.c    **** 
 2000              		.loc 1 663 7 view .LVU562
 2001 0034 4FF00008 		mov	r8, #0
 661:src/menu.c    ****   char c;
 2002              		.loc 1 661 9 view .LVU563
 2003 0038 6E46     		mov	r6, sp
 2004              	.LBB121:
 684:src/menu.c    ****       }
 2005              		.loc 1 684 2 view .LVU564
 2006 003a A9F1100A 		sub	r10, r9, #16
 2007              	.LBE121:
 657:src/menu.c    ****   s_opcode op;
 2008              		.loc 1 657 7 view .LVU565
 2009 003e C346     		mov	fp, r8
 661:src/menu.c    ****   char c;
 2010              		.loc 1 661 9 view .LVU566
 2011 0040 3746     		mov	r7, r6
 2012              	.LVL149:
 2013              	.L187:
 675:src/menu.c    ****     opc = getprog(pc);
 2014              		.loc 1 675 5 is_stmt 1 view .LVU567
 675:src/menu.c    ****     opc = getprog(pc);
 2015              		.loc 1 675 10 is_stmt 0 view .LVU568
 2016 0042 2846     		mov	r0, r5
 2017 0044 0021     		movs	r1, #0
 2018 0046 FFF7FEFF 		bl	do_inc
 2019              	.LVL150:
ARM GAS  /tmp/cccWRI8T.s 			page 57


 2020 004a 0546     		mov	r5, r0
 2021              	.LVL151:
 676:src/menu.c    ****     op = (s_opcode) opc;
 2022              		.loc 1 676 5 is_stmt 1 view .LVU569
 676:src/menu.c    ****     op = (s_opcode) opc;
 2023              		.loc 1 676 11 is_stmt 0 view .LVU570
 2024 004c FFF7FEFF 		bl	getprog
 2025              	.LVL152:
 677:src/menu.c    **** 
 2026              		.loc 1 677 8 view .LVU571
 2027 0050 83B2     		uxth	r3, r0
 679:src/menu.c    ****       break;
 2028              		.loc 1 679 8 view .LVU572
 2029 0052 B3F59D7F 		cmp	r3, #314
 676:src/menu.c    ****     op = (s_opcode) opc;
 2030              		.loc 1 676 11 view .LVU573
 2031 0056 0446     		mov	r4, r0
 2032              	.LVL153:
 677:src/menu.c    **** 
 2033              		.loc 1 677 5 is_stmt 1 view .LVU574
 679:src/menu.c    ****       break;
 2034              		.loc 1 679 5 view .LVU575
 679:src/menu.c    ****       break;
 2035              		.loc 1 679 8 is_stmt 0 view .LVU576
 2036 0058 17D0     		beq	.L185
 681:src/menu.c    ****       if (i==4) {
 2037              		.loc 1 681 5 is_stmt 1 view .LVU577
 681:src/menu.c    ****       if (i==4) {
 2038              		.loc 1 681 8 is_stmt 0 view .LVU578
 2039 005a B3F5807F 		cmp	r3, #256
 2040 005e 43D0     		beq	.L228
 694:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2041              		.loc 1 694 5 is_stmt 1 view .LVU579
 694:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2042              		.loc 1 694 9 is_stmt 0 view .LVU580
 2043 0060 00F47042 		and	r2, r0, #61440
 694:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2044              		.loc 1 694 8 view .LVU581
 2045 0064 B2F5704F 		cmp	r2, #61440
 2046 0068 12D0     		beq	.L229
 2047              	.L193:
 715:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2048              		.loc 1 715 7 is_stmt 1 view .LVU582
 715:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2049              		.loc 1 715 10 is_stmt 0 view .LVU583
 2050 006a B742     		cmp	r7, r6
 2051 006c 26D0     		beq	.L230
 733:src/menu.c    ****       }
 2052              		.loc 1 733 11 view .LVU584
 2053 006e 4FF00008 		mov	r8, #0
 2054              	.LVL154:
 2055              	.L199:
 735:src/menu.c    ****       i++;
 2056              		.loc 1 735 7 is_stmt 1 view .LVU585
 2057 0072 5846     		mov	r0, fp
 2058 0074 2146     		mov	r1, r4
 2059 0076 3246     		mov	r2, r6
ARM GAS  /tmp/cccWRI8T.s 			page 58


 2060 0078 FFF7FEFF 		bl	umen_store
 2061              	.LVL155:
 736:src/menu.c    ****     }
 2062              		.loc 1 736 7 view .LVU586
 736:src/menu.c    ****     }
 2063              		.loc 1 736 8 is_stmt 0 view .LVU587
 2064 007c 0BF1010B 		add	fp, fp, #1
 2065              	.LVL156:
 736:src/menu.c    ****     }
 2066              		.loc 1 736 8 view .LVU588
 2067 0080 3746     		mov	r7, r6
 2068              	.LVL157:
 2069              	.L192:
 673:src/menu.c    **** 
 2070              		.loc 1 673 9 is_stmt 1 view .LVU589
 2071 0082 15B1     		cbz	r5, .L185
 673:src/menu.c    **** 
 2072              		.loc 1 673 13 is_stmt 0 discriminator 1 view .LVU590
 2073 0084 BBF10C0F 		cmp	fp, #12
 2074 0088 DBD1     		bne	.L187
 2075              	.LVL158:
 2076              	.L185:
 739:src/menu.c    **** 
 2077              		.loc 1 739 1 view .LVU591
 2078 008a 05B0     		add	sp, sp, #20
 2079              		.cfi_remember_state
 2080              		.cfi_def_cfa_offset 36
 2081              		@ sp needed
 2082 008c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2083              	.LVL159:
 2084              	.L229:
 2085              		.cfi_restore_state
 694:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2086              		.loc 1 694 24 discriminator 1 view .LVU592
 2087 0090 C0F30321 		ubfx	r1, r0, #8, #4
 694:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2088              		.loc 1 694 20 discriminator 1 view .LVU593
 2089 0094 0A29     		cmp	r1, #10
 2090 0096 E8D1     		bne	.L193
 695:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2091              		.loc 1 695 7 is_stmt 1 view .LVU594
 695:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2092              		.loc 1 695 10 is_stmt 0 view .LVU595
 2093 0098 B8F1000F 		cmp	r8, #0
 2094 009c 40D1     		bne	.L194
 695:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2095              		.loc 1 695 29 discriminator 1 view .LVU596
 2096 009e BB1B     		subs	r3, r7, r6
 2097              	.LVL160:
 695:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2098              		.loc 1 695 24 discriminator 1 view .LVU597
 2099 00a0 062B     		cmp	r3, #6
 2100 00a2 3DD0     		beq	.L194
 2101              	.LVL161:
 701:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2102              		.loc 1 701 7 is_stmt 1 view .LVU598
 703:src/menu.c    **** 	*p++ = c;
ARM GAS  /tmp/cccWRI8T.s 			page 59


 2103              		.loc 1 703 10 is_stmt 0 view .LVU599
 2104 00a4 14F47F0F 		tst	r4, #16711680
 701:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2105              		.loc 1 701 12 view .LVU600
 2106 00a8 3C70     		strb	r4, [r7]
 702:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2107              		.loc 1 702 7 is_stmt 1 view .LVU601
 702:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2108              		.loc 1 702 9 is_stmt 0 view .LVU602
 2109 00aa C4F30743 		ubfx	r3, r4, #16, #8
 2110              	.LVL162:
 703:src/menu.c    **** 	*p++ = c;
 2111              		.loc 1 703 7 is_stmt 1 view .LVU603
 703:src/menu.c    **** 	*p++ = c;
 2112              		.loc 1 703 10 is_stmt 0 view .LVU604
 2113 00ae 24D1     		bne	.L231
 2114              	.LVL163:
 2115              	.L196:
 701:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2116              		.loc 1 701 9 view .LVU605
 2117 00b0 0137     		adds	r7, r7, #1
 2118              	.LVL164:
 2119              	.L198:
 709:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2120              		.loc 1 709 7 is_stmt 1 view .LVU606
 709:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2121              		.loc 1 709 10 is_stmt 0 view .LVU607
 2122 00b2 0023     		movs	r3, #0
 2123 00b4 3B70     		strb	r3, [r7]
 710:src/menu.c    **** 	finished = 1;
 2124              		.loc 1 710 7 is_stmt 1 view .LVU608
 711:src/menu.c    ****       }
 2125              		.loc 1 711 11 is_stmt 0 view .LVU609
 2126 00b6 4FF00108 		mov	r8, #1
 2127 00ba E2E7     		b	.L192
 2128              	.LVL165:
 2129              	.L230:
 716:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2130              		.loc 1 716 2 is_stmt 1 view .LVU610
 2131 00bc A0B2     		uxth	r0, r4
 2132              	.LVL166:
 716:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2133              		.loc 1 716 5 is_stmt 0 view .LVU611
 2134 00be 72B1     		cbz	r2, .L200
 716:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2135              		.loc 1 716 6 discriminator 1 view .LVU612
 2136 00c0 B2F5704F 		cmp	r2, #61440
 2137 00c4 0BD0     		beq	.L200
 2138              	.LBB122:
 717:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2139              		.loc 1 717 4 is_stmt 1 view .LVU613
 717:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2140              		.loc 1 717 26 is_stmt 0 view .LVU614
 2141 00c6 1B0A     		lsrs	r3, r3, #8
 2142              	.LVL167:
 717:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2143              		.loc 1 717 26 view .LVU615
ARM GAS  /tmp/cccWRI8T.s 			page 60


 2144 00c8 203B     		subs	r3, r3, #32
 2145 00ca DBB2     		uxtb	r3, r3
 2146              	.LVL168:
 718:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2147              		.loc 1 718 4 is_stmt 1 view .LVU616
 718:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2148              		.loc 1 718 7 is_stmt 0 view .LVU617
 2149 00cc 242B     		cmp	r3, #36
 2150 00ce 06D0     		beq	.L200
 718:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2151              		.loc 1 718 28 discriminator 1 view .LVU618
 2152 00d0 6C2B     		cmp	r3, #108
 2153 00d2 04D0     		beq	.L200
 719:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 2154              		.loc 1 719 9 view .LVU619
 2155 00d4 012B     		cmp	r3, #1
 2156 00d6 02D9     		bls	.L200
 720:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2157              		.loc 1 720 9 view .LVU620
 2158 00d8 10F0FF0F 		tst	r0, #255
 2159 00dc 4BD0     		beq	.L232
 2160              	.LVL169:
 2161              	.L200:
 720:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2162              		.loc 1 720 9 view .LVU621
 2163              	.LBE122:
 728:src/menu.c    **** 	}
 2164              		.loc 1 728 4 is_stmt 1 view .LVU622
 2165 00de 3146     		mov	r1, r6
 2166 00e0 2046     		mov	r0, r4
 2167 00e2 FFF7FEFF 		bl	prt_umen
 2168              	.LVL170:
 2169 00e6 C4E7     		b	.L199
 2170              	.LVL171:
 2171              	.L228:
 682:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2172              		.loc 1 682 7 view .LVU623
 682:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2173              		.loc 1 682 10 is_stmt 0 view .LVU624
 2174 00e8 BBF1040F 		cmp	fp, #4
 2175 00ec 28D0     		beq	.L233
 686:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2176              		.loc 1 686 12 is_stmt 1 view .LVU625
 686:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2177              		.loc 1 686 15 is_stmt 0 view .LVU626
 2178 00ee BBF1050F 		cmp	fp, #5
 2179 00f2 32D0     		beq	.L234
 2180              	.LVL172:
 2181              	.L191:
 690:src/menu.c    ****       continue;
 2182              		.loc 1 690 7 is_stmt 1 view .LVU627
 690:src/menu.c    ****       continue;
 2183              		.loc 1 690 9 is_stmt 0 view .LVU628
 2184 00f4 0BF1010B 		add	fp, fp, #1
 2185              	.LVL173:
 691:src/menu.c    ****     }
 2186              		.loc 1 691 7 is_stmt 1 view .LVU629
ARM GAS  /tmp/cccWRI8T.s 			page 61


 2187 00f8 C3E7     		b	.L192
 2188              	.LVL174:
 2189              	.L231:
 704:src/menu.c    **** 	c = opc>>24;
 2190              		.loc 1 704 2 view .LVU630
 704:src/menu.c    **** 	c = opc>>24;
 2191              		.loc 1 704 7 is_stmt 0 view .LVU631
 2192 00fa 7B70     		strb	r3, [r7, #1]
 705:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2193              		.loc 1 705 2 is_stmt 1 view .LVU632
 706:src/menu.c    **** 	  *p++ = c;
 2194              		.loc 1 706 5 is_stmt 0 view .LVU633
 2195 00fc 230E     		lsrs	r3, r4, #24
 2196              	.LVL175:
 705:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2197              		.loc 1 705 4 view .LVU634
 2198 00fe 4FEA1461 		lsr	r1, r4, #24
 2199              	.LVL176:
 706:src/menu.c    **** 	  *p++ = c;
 2200              		.loc 1 706 2 is_stmt 1 view .LVU635
 706:src/menu.c    **** 	  *p++ = c;
 2201              		.loc 1 706 5 is_stmt 0 view .LVU636
 2202 0102 36D0     		beq	.L235
 707:src/menu.c    ****       }
 2203              		.loc 1 707 4 is_stmt 1 view .LVU637
 707:src/menu.c    ****       }
 2204              		.loc 1 707 6 is_stmt 0 view .LVU638
 2205 0104 FB1C     		adds	r3, r7, #3
 2206              	.LVL177:
 710:src/menu.c    **** 	finished = 1;
 2207              		.loc 1 710 26 view .LVU639
 2208 0106 A3EB0608 		sub	r8, r3, r6
 710:src/menu.c    **** 	finished = 1;
 2209              		.loc 1 710 21 view .LVU640
 2210 010a A8F10608 		sub	r8, r8, #6
 709:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2211              		.loc 1 709 10 view .LVU641
 2212 010e 0022     		movs	r2, #0
 710:src/menu.c    **** 	finished = 1;
 2213              		.loc 1 710 21 view .LVU642
 2214 0110 B8FA88F8 		clz	r8, r8
 707:src/menu.c    ****       }
 2215              		.loc 1 707 9 view .LVU643
 2216 0114 B970     		strb	r1, [r7, #2]
 709:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2217              		.loc 1 709 7 is_stmt 1 view .LVU644
 709:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2218              		.loc 1 709 10 is_stmt 0 view .LVU645
 2219 0116 FA70     		strb	r2, [r7, #3]
 710:src/menu.c    **** 	finished = 1;
 2220              		.loc 1 710 7 is_stmt 1 view .LVU646
 710:src/menu.c    **** 	finished = 1;
 2221              		.loc 1 710 21 is_stmt 0 view .LVU647
 2222 0118 4FEA5818 		lsr	r8, r8, #5
 707:src/menu.c    ****       }
 2223              		.loc 1 707 6 view .LVU648
 2224 011c 1F46     		mov	r7, r3
ARM GAS  /tmp/cccWRI8T.s 			page 62


 2225 011e B0E7     		b	.L192
 2226              	.LVL178:
 2227              	.L194:
 696:src/menu.c    **** 	i++;
 2228              		.loc 1 696 2 is_stmt 1 view .LVU649
 2229 0120 5846     		mov	r0, fp
 2230              	.LVL179:
 696:src/menu.c    **** 	i++;
 2231              		.loc 1 696 2 is_stmt 0 view .LVU650
 2232 0122 3246     		mov	r2, r6
 2233 0124 4FF48071 		mov	r1, #256
 698:src/menu.c    **** 	finished = 0;
 2234              		.loc 1 698 8 view .LVU651
 2235 0128 3746     		mov	r7, r6
 2236              	.LVL180:
 696:src/menu.c    **** 	i++;
 2237              		.loc 1 696 2 view .LVU652
 2238 012a FFF7FEFF 		bl	umen_store
 2239              	.LVL181:
 697:src/menu.c    ****     	p = buf1;
 2240              		.loc 1 697 2 is_stmt 1 view .LVU653
 703:src/menu.c    **** 	*p++ = c;
 2241              		.loc 1 703 10 is_stmt 0 view .LVU654
 2242 012e 14F47F0F 		tst	r4, #16711680
 697:src/menu.c    ****     	p = buf1;
 2243              		.loc 1 697 3 view .LVU655
 2244 0132 0BF1010B 		add	fp, fp, #1
 2245              	.LVL182:
 698:src/menu.c    **** 	finished = 0;
 2246              		.loc 1 698 6 is_stmt 1 view .LVU656
 699:src/menu.c    ****       } // ..and start reading the new alpha
 2247              		.loc 1 699 2 view .LVU657
 701:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2248              		.loc 1 701 7 view .LVU658
 701:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2249              		.loc 1 701 12 is_stmt 0 view .LVU659
 2250 0136 3C70     		strb	r4, [r7]
 702:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2251              		.loc 1 702 7 is_stmt 1 view .LVU660
 702:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2252              		.loc 1 702 9 is_stmt 0 view .LVU661
 2253 0138 C4F30743 		ubfx	r3, r4, #16, #8
 2254              	.LVL183:
 703:src/menu.c    **** 	*p++ = c;
 2255              		.loc 1 703 7 is_stmt 1 view .LVU662
 703:src/menu.c    **** 	*p++ = c;
 2256              		.loc 1 703 10 is_stmt 0 view .LVU663
 2257 013c B8D0     		beq	.L196
 2258              	.LVL184:
 703:src/menu.c    **** 	*p++ = c;
 2259              		.loc 1 703 10 view .LVU664
 2260 013e DCE7     		b	.L231
 2261              	.LVL185:
 2262              	.L233:
 2263              	.LBB123:
 683:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2264              		.loc 1 683 2 is_stmt 1 view .LVU665
ARM GAS  /tmp/cccWRI8T.s 			page 63


 683:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2265              		.loc 1 683 29 is_stmt 0 view .LVU666
 2266 0140 104B     		ldr	r3, .L236+4
 2267              	.LVL186:
 684:src/menu.c    ****       }
 2268              		.loc 1 684 2 view .LVU667
 2269 0142 114C     		ldr	r4, .L236+8
 683:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2270              		.loc 1 683 29 view .LVU668
 2271 0144 93E80300 		ldm	r3, {r0, r1}
 2272              	.LVL187:
 683:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2273              		.loc 1 683 29 view .LVU669
 2274 0148 104B     		ldr	r3, .L236+12
 684:src/menu.c    ****       }
 2275              		.loc 1 684 2 view .LVU670
 2276 014a 0522     		movs	r2, #5
 683:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2277              		.loc 1 683 29 view .LVU671
 2278 014c 83E80300 		stm	r3, {r0, r1}
 684:src/menu.c    ****       }
 2279              		.loc 1 684 2 is_stmt 1 view .LVU672
 2280 0150 2168     		ldr	r1, [r4]
 2281 0152 5046     		mov	r0, r10
 2282 0154 FFF7FEFF 		bl	strncpy
 2283              	.LVL188:
 2284              	.LBE123:
 2285 0158 CCE7     		b	.L191
 2286              	.LVL189:
 2287              	.L234:
 2288              	.LBB124:
 687:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2289              		.loc 1 687 2 view .LVU673
 687:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2290              		.loc 1 687 29 is_stmt 0 view .LVU674
 2291 015a 0D4B     		ldr	r3, .L236+16
 2292              	.LVL190:
 687:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2293              		.loc 1 687 29 view .LVU675
 2294 015c 93E80300 		ldm	r3, {r0, r1}
 2295              	.LVL191:
 688:src/menu.c    ****       }
 2296              		.loc 1 688 2 view .LVU676
 2297 0160 0C4B     		ldr	r3, .L236+20
 687:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2298              		.loc 1 687 29 view .LVU677
 2299 0162 89E80300 		stm	r9, {r0, r1}
 688:src/menu.c    ****       }
 2300              		.loc 1 688 2 is_stmt 1 view .LVU678
 2301 0166 5A46     		mov	r2, fp
 2302 0168 1968     		ldr	r1, [r3]
 2303 016a 0B48     		ldr	r0, .L236+24
 2304 016c FFF7FEFF 		bl	strncpy
 2305              	.LVL192:
 2306 0170 C0E7     		b	.L191
 2307              	.LVL193:
 2308              	.L235:
ARM GAS  /tmp/cccWRI8T.s 			page 64


 688:src/menu.c    ****       }
 2309              		.loc 1 688 2 is_stmt 0 view .LVU679
 2310              	.LBE124:
 704:src/menu.c    **** 	c = opc>>24;
 2311              		.loc 1 704 4 view .LVU680
 2312 0172 0237     		adds	r7, r7, #2
 2313              	.LVL194:
 704:src/menu.c    **** 	c = opc>>24;
 2314              		.loc 1 704 4 view .LVU681
 2315 0174 9DE7     		b	.L198
 2316              	.LVL195:
 2317              	.L232:
 2318              	.LBB125:
 721:src/menu.c    **** 	  }
 2319              		.loc 1 721 6 is_stmt 1 view .LVU682
 2320 0176 3146     		mov	r1, r6
 2321 0178 FFF7FEFF 		bl	catcmd
 2322              	.LVL196:
 721:src/menu.c    **** 	  }
 2323              		.loc 1 721 6 is_stmt 0 view .LVU683
 2324 017c 79E7     		b	.L199
 2325              	.L237:
 2326 017e 00BF     		.align	2
 2327              	.L236:
 2328 0180 00000000 		.word	.LANCHOR4
 2329 0184 00000000 		.word	.LANCHOR5
 2330 0188 00000000 		.word	.LANCHOR6
 2331 018c 90000000 		.word	.LANCHOR4+144
 2332 0190 08000000 		.word	.LANCHOR5+8
 2333 0194 00000000 		.word	.LANCHOR7
 2334 0198 C0000000 		.word	.LANCHOR4+192
 2335 019c B0000000 		.word	.LANCHOR4+176
 2336              	.LBE125:
 2337              		.cfi_endproc
 2338              	.LFE19:
 2340              		.section	.text.build_user_menu,"ax",%progbits
 2341              		.align	1
 2342              		.p2align 2,,3
 2343              		.global	build_user_menu
 2344              		.syntax unified
 2345              		.thumb
 2346              		.thumb_func
 2347              		.fpu fpv4-sp-d16
 2349              	build_user_menu:
 2350              	.LFB18:
 646:src/menu.c    ****   // find the label 'MNU'
 2351              		.loc 1 646 27 is_stmt 1 view -0
 2352              		.cfi_startproc
 2353              		@ args = 0, pretend = 0, frame = 0
 2354              		@ frame_needed = 0, uses_anonymous_args = 0
 2355              		@ link register save eliminated.
 648:src/menu.c    ****    build_user_menu_from_program (lbl);
 2356              		.loc 1 648 4 view .LVU685
 2357              	.LVL197:
 649:src/menu.c    **** }
 2358              		.loc 1 649 4 view .LVU686
 2359 0000 0148     		ldr	r0, .L239
ARM GAS  /tmp/cccWRI8T.s 			page 65


 2360 0002 FFF7FEBF 		b	build_user_menu_from_program
 2361              	.LVL198:
 2362              	.L240:
 2363 0006 00BF     		.align	2
 2364              	.L239:
 2365 0008 4DF04E55 		.word	1431236685
 2366              		.cfi_endproc
 2367              	.LFE18:
 2369              		.section	.text.shutdown,"ax",%progbits
 2370              		.align	1
 2371              		.p2align 2,,3
 2372              		.global	shutdown
 2373              		.syntax unified
 2374              		.thumb
 2375              		.thumb_func
 2376              		.fpu fpv4-sp-d16
 2378              	shutdown:
 2379              	.LFB22:
 2380              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #ifdef INCLUDE_STOPWATCH
ARM GAS  /tmp/cccWRI8T.s 			page 66


  39:src/console.c **** #include "stopwatch.h"
  40:src/console.c **** #endif
  41:src/console.c **** #undef DM42SAFE
  42:src/console.c **** 
  43:src/console.c **** 
  44:src/console.c **** #ifdef DM42
  45:src/console.c **** 
  46:src/console.c **** #include <menu.c>
  47:src/console.c **** 
  48:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  49:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  50:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  51:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  52:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  53:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  54:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  55:src/console.c **** 
  56:src/console.c **** static struct _ndmap remap (const int c) {
  57:src/console.c **** 
  58:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  59:src/console.c **** 
  60:src/console.c **** #include "keytran.c"
  61:src/console.c **** 
  62:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  63:src/console.c **** 
  64:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  65:src/console.c **** 
  66:src/console.c ****   if (c == 44 ) {
  67:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  68:src/console.c ****     return sshot;
  69:src/console.c ****   }
  70:src/console.c ****   
  71:src/console.c ****   if (Running | Pause) {
  72:src/console.c ****     return mapping_running[c];
  73:src/console.c ****   }
  74:src/console.c **** 
  75:src/console.c ****   struct _menu Ref = get_current_menu_ref();
  76:src/console.c ****   
  77:src/console.c ****   switch (c) {
  78:src/console.c ****   case KEY_F1:
  79:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[0].unshifted;
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
  81:src/console.c ****   case KEY_F2:
  82:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[1].unshifted;
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
  84:src/console.c ****   case KEY_F3:
  85:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[2].unshifted;
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
  87:src/console.c ****   case KEY_F4:
  88:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[3].unshifted;
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
  90:src/console.c ****   case KEY_F5:
  91:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[4].unshifted;
  92:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
  93:src/console.c ****   case KEY_F6:
  94:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[5].unshifted;
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
ARM GAS  /tmp/cccWRI8T.s 			page 67


  96:src/console.c ****   }
  97:src/console.c **** 
  98:src/console.c ****   if ( get_alpha_state() ) {
  99:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 100:src/console.c ****       switch (cur_shift()) { 
 101:src/console.c ****       case SHIFT_N:
 102:src/console.c **** 	return mapping_none[c]; // N -> F
 103:src/console.c **** 	break;
 104:src/console.c ****       case SHIFT_F:
 105:src/console.c **** 	return mapping_fshift[c]; // F -> G
 106:src/console.c **** 	break;
 107:src/console.c ****       case SHIFT_G:
 108:src/console.c **** 	return h_shift; // G -> H
 109:src/console.c **** 	break;
 110:src/console.c ****       case SHIFT_H:
 111:src/console.c **** 	return h_shift; // H -> N
 112:src/console.c ****       default:
 113:src/console.c **** 	return no_change;
 114:src/console.c ****       }
 115:src/console.c ****     }
 116:src/console.c ****     return mapping_alpha [c];
 117:src/console.c ****   }
 118:src/console.c **** 
 119:src/console.c ****   switch (cur_shift()) {
 120:src/console.c ****   case SHIFT_N:    
 121:src/console.c ****     return mapping_none[c];
 122:src/console.c ****     break;
 123:src/console.c ****   case SHIFT_F:
 124:src/console.c ****     return mapping_fshift[c];
 125:src/console.c ****     break;
 126:src/console.c ****   case SHIFT_G:
 127:src/console.c ****     return mapping_gshift[c];
 128:src/console.c ****     break;
 129:src/console.c ****   default:
 130:src/console.c ****     return no_change;
 131:src/console.c ****   }
 132:src/console.c **** }
 133:src/console.c **** 
 134:src/console.c **** #endif
 135:src/console.c **** 
 136:src/console.c **** void shutdown( void )
 137:src/console.c **** {
 2381              		.loc 2 137 1 view -0
 2382              		.cfi_startproc
 2383              		@ args = 0, pretend = 0, frame = 0
 2384              		@ frame_needed = 0, uses_anonymous_args = 0
 2385              		@ link register save eliminated.
 138:src/console.c **** #ifndef DM42
 139:src/console.c ****   checksum_all();
 140:src/console.c ****   setuptty( 1 );
 141:src/console.c ****   save_statefile( NULL );
 142:src/console.c ****   exit( 0 );
 143:src/console.c **** #else
 144:src/console.c ****   //  save_ram_file(0);
 145:src/console.c ****   SET_ST(STAT_PGM_END);
 2386              		.loc 2 145 3 view .LVU688
 2387 0000 024A     		ldr	r2, .L242
ARM GAS  /tmp/cccWRI8T.s 			page 68


 2388 0002 1368     		ldr	r3, [r2]
 2389 0004 43F40073 		orr	r3, r3, #512
 2390 0008 1360     		str	r3, [r2]
 146:src/console.c **** #endif
 147:src/console.c **** }
 2391              		.loc 2 147 1 is_stmt 0 view .LVU689
 2392 000a 7047     		bx	lr
 2393              	.L243:
 2394              		.align	2
 2395              	.L242:
 2396 000c 00200010 		.word	268443648
 2397              		.cfi_endproc
 2398              	.LFE22:
 2400              		.section	.text.is_key_pressed,"ax",%progbits
 2401              		.align	1
 2402              		.p2align 2,,3
 2403              		.global	is_key_pressed
 2404              		.syntax unified
 2405              		.thumb
 2406              		.thumb_func
 2407              		.fpu fpv4-sp-d16
 2409              	is_key_pressed:
 2410              	.LFB23:
 148:src/console.c **** 
 149:src/console.c **** 
 150:src/console.c **** /*
 151:src/console.c ****  *  Dummies
 152:src/console.c ****  */
 153:src/console.c **** int is_key_pressed(void) 
 154:src/console.c **** {
 2411              		.loc 2 154 1 is_stmt 1 view -0
 2412              		.cfi_startproc
 2413              		@ args = 0, pretend = 0, frame = 0
 2414              		@ frame_needed = 0, uses_anonymous_args = 0
 155:src/console.c **** #ifdef DM42
 156:src/console.c ****   return !key_empty();
 2415              		.loc 2 156 3 view .LVU691
 154:src/console.c **** #ifdef DM42
 2416              		.loc 2 154 1 is_stmt 0 view .LVU692
 2417 0000 08B5     		push	{r3, lr}
 2418              		.cfi_def_cfa_offset 8
 2419              		.cfi_offset 3, -8
 2420              		.cfi_offset 14, -4
 2421              		.loc 2 156 11 view .LVU693
 2422 0002 034B     		ldr	r3, .L246
 2423 0004 9847     		blx	r3
 2424              	.LVL199:
 157:src/console.c **** #else
 158:src/console.c ****   return 0;
 159:src/console.c **** #endif
 160:src/console.c **** }
 2425              		.loc 2 160 1 view .LVU694
 2426 0006 B0FA80F0 		clz	r0, r0
 2427 000a 4009     		lsrs	r0, r0, #5
 2428 000c 08BD     		pop	{r3, pc}
 2429              	.L247:
 2430 000e 00BF     		.align	2
ARM GAS  /tmp/cccWRI8T.s 			page 69


 2431              	.L246:
 2432 0010 7D030008 		.word	134218621
 2433              		.cfi_endproc
 2434              	.LFE23:
 2436              		.section	.text.get_key,"ax",%progbits
 2437              		.align	1
 2438              		.p2align 2,,3
 2439              		.global	get_key
 2440              		.syntax unified
 2441              		.thumb
 2442              		.thumb_func
 2443              		.fpu fpv4-sp-d16
 2445              	get_key:
 2446              	.LFB24:
 161:src/console.c **** 
 162:src/console.c **** int get_key(void)
 163:src/console.c **** {
 2447              		.loc 2 163 1 is_stmt 1 view -0
 2448              		.cfi_startproc
 2449              		@ args = 0, pretend = 0, frame = 0
 2450              		@ frame_needed = 0, uses_anonymous_args = 0
 2451              		@ link register save eliminated.
 164:src/console.c ****   #ifdef DM42
 165:src/console.c ****   return key_pop();
 2452              		.loc 2 165 3 view .LVU696
 2453              		.loc 2 165 10 is_stmt 0 view .LVU697
 2454 0000 004B     		ldr	r3, .L249
 2455 0002 1847     		bx	r3
 2456              	.LVL200:
 2457              	.L250:
 2458              		.align	2
 2459              	.L249:
 2460 0004 89030008 		.word	134218633
 2461              		.cfi_endproc
 2462              	.LFE24:
 2464              		.section	.text.put_key,"ax",%progbits
 2465              		.align	1
 2466              		.p2align 2,,3
 2467              		.global	put_key
 2468              		.syntax unified
 2469              		.thumb
 2470              		.thumb_func
 2471              		.fpu fpv4-sp-d16
 2473              	put_key:
 2474              	.LVL201:
 2475              	.LFB25:
 166:src/console.c ****   #else
 167:src/console.c ****   return 0;
 168:src/console.c ****   #endif
 169:src/console.c **** }
 170:src/console.c **** 
 171:src/console.c **** /*
 172:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 173:src/console.c ****  * 
 174:src/console.c ****  */
 175:src/console.c **** int put_key( int k )
 176:src/console.c **** {
ARM GAS  /tmp/cccWRI8T.s 			page 70


 2476              		.loc 2 176 1 is_stmt 1 view -0
 2477              		.cfi_startproc
 2478              		@ args = 0, pretend = 0, frame = 48
 2479              		@ frame_needed = 0, uses_anonymous_args = 0
 2480              		@ link register save eliminated.
 177:src/console.c ****   #ifdef DM42
 178:src/console.c ****   const char wp34s_to_DM42[] = {
 2481              		.loc 2 178 3 view .LVU699
 176:src/console.c ****   #ifdef DM42
 2482              		.loc 2 176 1 is_stmt 0 view .LVU700
 2483 0000 70B4     		push	{r4, r5, r6}
 2484              		.cfi_def_cfa_offset 12
 2485              		.cfi_offset 4, -12
 2486              		.cfi_offset 5, -8
 2487              		.cfi_offset 6, -4
 2488              		.loc 2 178 14 view .LVU701
 2489 0002 0E4D     		ldr	r5, .L254
 176:src/console.c ****   #ifdef DM42
 2490              		.loc 2 176 1 view .LVU702
 2491 0004 0646     		mov	r6, r0
 2492              		.loc 2 178 14 view .LVU703
 2493 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2494              	.LVL202:
 176:src/console.c ****   #ifdef DM42
 2495              		.loc 2 176 1 view .LVU704
 2496 0008 8DB0     		sub	sp, sp, #52
 2497              		.cfi_def_cfa_offset 64
 2498              		.loc 2 178 14 view .LVU705
 2499 000a 01AC     		add	r4, sp, #4
 2500 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2501 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2502 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2503 0012 95E80700 		ldm	r5, {r0, r1, r2}
 2504 0016 03C4     		stmia	r4!, {r0, r1}
 179:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 180:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 181:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 182:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 183:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 184:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 185:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 186:src/console.c ****   
 187:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 2505              		.loc 2 187 6 view .LVU706
 2506 0018 282E     		cmp	r6, #40
 178:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 2507              		.loc 2 178 14 view .LVU707
 2508 001a 2270     		strb	r2, [r4]
 2509              		.loc 2 187 3 is_stmt 1 view .LVU708
 2510              		.loc 2 187 6 is_stmt 0 view .LVU709
 2511 001c 08D8     		bhi	.L252
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2512              		.loc 2 188 5 is_stmt 1 view .LVU710
 2513              		.loc 2 188 36 is_stmt 0 view .LVU711
 2514 001e 0CAB     		add	r3, sp, #48
 2515 0020 3046     		mov	r0, r6
 2516 0022 1844     		add	r0, r0, r3
ARM GAS  /tmp/cccWRI8T.s 			page 71


 2517              		.loc 2 188 12 view .LVU712
 2518 0024 064B     		ldr	r3, .L254+4
 2519 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 189:src/console.c ****   }
 190:src/console.c ****   else {
 191:src/console.c ****     return -1;
 192:src/console.c ****   }
 193:src/console.c ****   #else
 194:src/console.c ****   return k;
 195:src/console.c ****   #endif
 196:src/console.c **** }
 2520              		.loc 2 196 1 view .LVU713
 2521 002a 0DB0     		add	sp, sp, #52
 2522              		.cfi_remember_state
 2523              		.cfi_def_cfa_offset 12
 2524              		@ sp needed
 2525 002c 70BC     		pop	{r4, r5, r6}
 2526              		.cfi_restore 6
 2527              		.cfi_restore 5
 2528              		.cfi_restore 4
 2529              		.cfi_def_cfa_offset 0
 2530              	.LVL203:
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2531              		.loc 2 188 12 view .LVU714
 2532 002e 1847     		bx	r3
 2533              	.LVL204:
 2534              	.L252:
 2535              		.cfi_restore_state
 2536              		.loc 2 196 1 view .LVU715
 2537 0030 4FF0FF30 		mov	r0, #-1
 2538 0034 0DB0     		add	sp, sp, #52
 2539              		.cfi_def_cfa_offset 12
 2540              		@ sp needed
 2541 0036 70BC     		pop	{r4, r5, r6}
 2542              		.cfi_restore 6
 2543              		.cfi_restore 5
 2544              		.cfi_restore 4
 2545              		.cfi_def_cfa_offset 0
 2546              	.LVL205:
 2547              		.loc 2 196 1 view .LVU716
 2548 0038 7047     		bx	lr
 2549              	.L255:
 2550 003a 00BF     		.align	2
 2551              	.L254:
 2552 003c 10000000 		.word	.LANCHOR5+16
 2553 0040 81030008 		.word	134218625
 2554              		.cfi_endproc
 2555              	.LFE25:
 2557              		.section	.text.shift_down,"ax",%progbits
 2558              		.align	1
 2559              		.p2align 2,,3
 2560              		.global	shift_down
 2561              		.syntax unified
 2562              		.thumb
 2563              		.thumb_func
 2564              		.fpu fpv4-sp-d16
 2566              	shift_down:
ARM GAS  /tmp/cccWRI8T.s 			page 72


 2567              	.LFB26:
 197:src/console.c **** 
 198:src/console.c **** enum shifts shift_down(void)
 199:src/console.c **** {
 2568              		.loc 2 199 1 is_stmt 1 view -0
 2569              		.cfi_startproc
 2570              		@ args = 0, pretend = 0, frame = 0
 2571              		@ frame_needed = 0, uses_anonymous_args = 0
 2572              		@ link register save eliminated.
 200:src/console.c **** 	return SHIFT_N;
 2573              		.loc 2 200 2 view .LVU718
 201:src/console.c **** }
 2574              		.loc 2 201 1 is_stmt 0 view .LVU719
 2575 0000 0020     		movs	r0, #0
 2576 0002 7047     		bx	lr
 2577              		.cfi_endproc
 2578              	.LFE26:
 2580              		.section	.text.start_key_timer,"ax",%progbits
 2581              		.align	1
 2582              		.p2align 2,,3
 2583              		.global	start_key_timer
 2584              		.syntax unified
 2585              		.thumb
 2586              		.thumb_func
 2587              		.fpu fpv4-sp-d16
 2589              	start_key_timer:
 2590              	.LFB27:
 202:src/console.c **** 
 203:src/console.c **** #ifndef DM42   // No serial operations for DM42
 204:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 205:src/console.c **** /*
 206:src/console.c ****  *  Open a COM port for transmission
 207:src/console.c ****  */
 208:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 209:src/console.c **** {
 210:src/console.c **** 	return 0;
 211:src/console.c **** }
 212:src/console.c **** 
 213:src/console.c **** 
 214:src/console.c **** /*
 215:src/console.c ****  *  Close the COM port after transmission is complete
 216:src/console.c ****  */
 217:src/console.c **** extern void close_port( void )
 218:src/console.c **** {
 219:src/console.c **** }
 220:src/console.c **** 
 221:src/console.c **** 
 222:src/console.c **** /*
 223:src/console.c ****  *  Output a single byte to the serial
 224:src/console.c ****  */
 225:src/console.c **** void put_byte( unsigned char byte )
 226:src/console.c **** {
 227:src/console.c **** 	report_err(ERR_PROG_BAD);
 228:src/console.c **** }
 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
ARM GAS  /tmp/cccWRI8T.s 			page 73


 232:src/console.c ****  *  Force buffer flush
 233:src/console.c ****  */
 234:src/console.c **** void flush_comm( void )
 235:src/console.c **** {
 236:src/console.c **** }
 237:src/console.c **** 
 238:src/console.c **** #endif
 239:src/console.c **** #endif
 240:src/console.c **** 
 241:src/console.c **** 
 242:src/console.c **** /*
 243:src/console.c ****  *  Main loop
 244:src/console.c ****  */
 245:src/console.c **** #ifdef DM42
 246:src/console.c **** void start_key_timer (void);
 247:src/console.c **** long int keyticks (void);
 248:src/console.c **** void moveto (int line, int x);
 249:src/console.c **** 
 250:src/console.c **** static long int start_ticks;
 251:src/console.c **** 
 252:src/console.c **** void start_key_timer() {
 2591              		.loc 2 252 24 is_stmt 1 view -0
 2592              		.cfi_startproc
 2593              		@ args = 0, pretend = 0, frame = 0
 2594              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/console.c ****     start_ticks = get_rtc_ticks();
 2595              		.loc 2 253 5 view .LVU721
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 2596              		.loc 2 252 24 is_stmt 0 view .LVU722
 2597 0000 08B5     		push	{r3, lr}
 2598              		.cfi_def_cfa_offset 8
 2599              		.cfi_offset 3, -8
 2600              		.cfi_offset 14, -4
 2601              		.loc 2 253 19 view .LVU723
 2602 0002 024B     		ldr	r3, .L259
 2603 0004 9847     		blx	r3
 2604              	.LVL206:
 2605              		.loc 2 253 17 view .LVU724
 2606 0006 024B     		ldr	r3, .L259+4
 2607 0008 1860     		str	r0, [r3]
 254:src/console.c **** }
 2608              		.loc 2 254 1 view .LVU725
 2609 000a 08BD     		pop	{r3, pc}
 2610              	.L260:
 2611              		.align	2
 2612              	.L259:
 2613 000c B9040008 		.word	134218937
 2614 0010 00000000 		.word	.LANCHOR8
 2615              		.cfi_endproc
 2616              	.LFE27:
 2618              		.section	.text.keyticks,"ax",%progbits
 2619              		.align	1
 2620              		.p2align 2,,3
 2621              		.global	keyticks
 2622              		.syntax unified
 2623              		.thumb
 2624              		.thumb_func
ARM GAS  /tmp/cccWRI8T.s 			page 74


 2625              		.fpu fpv4-sp-d16
 2627              	keyticks:
 2628              	.LFB28:
 255:src/console.c **** 
 256:src/console.c **** long int keyticks () {
 2629              		.loc 2 256 22 is_stmt 1 view -0
 2630              		.cfi_startproc
 2631              		@ args = 0, pretend = 0, frame = 0
 2632              		@ frame_needed = 0, uses_anonymous_args = 0
 257:src/console.c ****   long int i;
 2633              		.loc 2 257 3 view .LVU727
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2634              		.loc 2 258 3 view .LVU728
 256:src/console.c ****   long int i;
 2635              		.loc 2 256 22 is_stmt 0 view .LVU729
 2636 0000 08B5     		push	{r3, lr}
 2637              		.cfi_def_cfa_offset 8
 2638              		.cfi_offset 3, -8
 2639              		.cfi_offset 14, -4
 2640              		.loc 2 258 8 view .LVU730
 2641 0002 054B     		ldr	r3, .L263
 2642 0004 9847     		blx	r3
 2643              	.LVL207:
 259:src/console.c ****   return i >> 8;
 2644              		.loc 2 259 3 is_stmt 1 view .LVU731
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2645              		.loc 2 258 24 is_stmt 0 view .LVU732
 2646 0006 054B     		ldr	r3, .L263+4
 2647 0008 1B68     		ldr	r3, [r3]
 2648 000a C01A     		subs	r0, r0, r3
 2649              	.LVL208:
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2650              		.loc 2 258 38 view .LVU733
 2651 000c 00EB8000 		add	r0, r0, r0, lsl #2
 260:src/console.c **** }
 2652              		.loc 2 260 1 view .LVU734
 2653 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2654 0014 08BD     		pop	{r3, pc}
 2655              	.L264:
 2656 0016 00BF     		.align	2
 2657              	.L263:
 2658 0018 B9040008 		.word	134218937
 2659 001c 00000000 		.word	.LANCHOR8
 2660              		.cfi_endproc
 2661              	.LFE28:
 2663              		.section	.text.moveto,"ax",%progbits
 2664              		.align	1
 2665              		.p2align 2,,3
 2666              		.global	moveto
 2667              		.syntax unified
 2668              		.thumb
 2669              		.thumb_func
 2670              		.fpu fpv4-sp-d16
 2672              	moveto:
 2673              	.LVL209:
 2674              	.LFB29:
 261:src/console.c **** 
ARM GAS  /tmp/cccWRI8T.s 			page 75


 262:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 263:src/console.c **** char print_string[22];
 264:src/console.c **** int n_p = 0;
 265:src/console.c **** 
 266:src/console.c **** 
 267:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2675              		.loc 2 267 30 is_stmt 1 view -0
 2676              		.cfi_startproc
 2677              		@ args = 0, pretend = 0, frame = 0
 2678              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2679              		.loc 2 268 3 view .LVU736
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2680              		.loc 2 267 30 is_stmt 0 view .LVU737
 2681 0000 70B5     		push	{r4, r5, r6, lr}
 2682              		.cfi_def_cfa_offset 16
 2683              		.cfi_offset 4, -16
 2684              		.cfi_offset 5, -12
 2685              		.cfi_offset 6, -8
 2686              		.cfi_offset 14, -4
 2687              		.loc 2 268 3 view .LVU738
 2688 0002 0A4D     		ldr	r5, .L267
 2689 0004 0A4B     		ldr	r3, .L267+4
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2690              		.loc 2 267 30 view .LVU739
 2691 0006 0246     		mov	r2, r0
 2692 0008 0C46     		mov	r4, r1
 2693              		.loc 2 268 3 view .LVU740
 2694 000a A86B     		ldr	r0, [r5, #56]
 2695              	.LVL210:
 2696              		.loc 2 268 3 view .LVU741
 2697 000c 511E     		subs	r1, r2, #1
 2698              	.LVL211:
 2699              		.loc 2 268 3 view .LVU742
 2700 000e 9847     		blx	r3
 2701              	.LVL212:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2702              		.loc 2 269 3 is_stmt 1 view .LVU743
 2703 0010 A86B     		ldr	r0, [r5, #56]
 2704 0012 084B     		ldr	r3, .L267+8
 2705              		.loc 2 269 33 is_stmt 0 view .LVU744
 2706 0014 0168     		ldr	r1, [r0]
 2707              		.loc 2 269 3 view .LVU745
 2708 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2709              		.loc 2 269 33 view .LVU746
 2710 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2711              		.loc 2 269 43 view .LVU747
 2712 001c 013C     		subs	r4, r4, #1
 2713              	.LVL213:
 2714              		.loc 2 269 40 view .LVU748
 2715 001e 04FB01F1 		mul	r1, r4, r1
 2716              		.loc 2 269 3 view .LVU749
 2717 0022 1431     		adds	r1, r1, #20
 270:src/console.c **** }
 2718              		.loc 2 270 1 view .LVU750
 2719 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2720              		.cfi_restore 14
ARM GAS  /tmp/cccWRI8T.s 			page 76


 2721              		.cfi_restore 6
 2722              		.cfi_restore 5
 2723              		.cfi_restore 4
 2724              		.cfi_def_cfa_offset 0
 2725              	.LVL214:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2726              		.loc 2 269 3 view .LVU751
 2727 0028 1847     		bx	r3	@ indirect register sibling call
 2728              	.LVL215:
 2729              	.L268:
 2730 002a 00BF     		.align	2
 2731              	.L267:
 2732 002c 00200010 		.word	268443648
 2733 0030 69020008 		.word	134218345
 2734 0034 6D020008 		.word	134218349
 2735              		.cfi_endproc
 2736              	.LFE29:
 2738              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2739              		.align	2
 2740              	.LC11:
 2741 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2741      673A2025 
 2741      34692C25 
 2741      346900
 2742              		.section	.text.print_debug,"ax",%progbits
 2743              		.align	1
 2744              		.p2align 2,,3
 2745              		.global	print_debug
 2746              		.syntax unified
 2747              		.thumb
 2748              		.thumb_func
 2749              		.fpu fpv4-sp-d16
 2751              	print_debug:
 2752              	.LVL216:
 2753              	.LFB30:
 271:src/console.c **** 
 272:src/console.c **** void print_debug (int i, int j) {
 2754              		.loc 2 272 33 is_stmt 1 view -0
 2755              		.cfi_startproc
 2756              		@ args = 0, pretend = 0, frame = 8
 2757              		@ frame_needed = 0, uses_anonymous_args = 0
 273:src/console.c ****   strcpy( print_string, spaces );
 2758              		.loc 2 273 3 view .LVU753
 272:src/console.c ****   strcpy( print_string, spaces );
 2759              		.loc 2 272 33 is_stmt 0 view .LVU754
 2760 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2761              		.cfi_def_cfa_offset 24
 2762              		.cfi_offset 4, -24
 2763              		.cfi_offset 5, -20
 2764              		.cfi_offset 6, -16
 2765              		.cfi_offset 7, -12
 2766              		.cfi_offset 8, -8
 2767              		.cfi_offset 14, -4
 2768              		.loc 2 273 3 view .LVU755
 2769 0004 174C     		ldr	r4, .L271
 2770 0006 184F     		ldr	r7, .L271+4
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
ARM GAS  /tmp/cccWRI8T.s 			page 77


 275:src/console.c ****   moveto (3, 1);
 276:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2771              		.loc 2 276 3 view .LVU756
 2772 0008 184E     		ldr	r6, .L271+8
 2773 000a 194D     		ldr	r5, .L271+12
 277:src/console.c ****   lcd_refresh();
 2774              		.loc 2 277 3 view .LVU757
 2775 000c DFF86C80 		ldr	r8, .L271+24
 272:src/console.c ****   strcpy( print_string, spaces );
 2776              		.loc 2 272 33 view .LVU758
 2777 0010 82B0     		sub	sp, sp, #8
 2778              		.cfi_def_cfa_offset 32
 272:src/console.c ****   strcpy( print_string, spaces );
 2779              		.loc 2 272 33 view .LVU759
 2780 0012 0190     		str	r0, [sp, #4]
 2781 0014 0091     		str	r1, [sp]
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2782              		.loc 2 273 3 view .LVU760
 2783 0016 2046     		mov	r0, r4
 2784              	.LVL217:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2785              		.loc 2 273 3 view .LVU761
 2786 0018 3946     		mov	r1, r7
 2787              	.LVL218:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2788              		.loc 2 273 3 view .LVU762
 2789 001a FFF7FEFF 		bl	strcpy
 2790              	.LVL219:
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2791              		.loc 2 274 3 is_stmt 1 view .LVU763
 2792 001e DDE90032 		ldrd	r3, r2, [sp]
 2793 0022 1449     		ldr	r1, .L271+16
 2794 0024 2046     		mov	r0, r4
 2795 0026 FFF7FEFF 		bl	sprintf
 2796              	.LVL220:
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2797              		.loc 2 275 3 view .LVU764
 2798 002a 0121     		movs	r1, #1
 2799 002c 0320     		movs	r0, #3
 2800 002e FFF7FEFF 		bl	moveto
 2801              	.LVL221:
 276:src/console.c ****   lcd_refresh();
 2802              		.loc 2 276 3 view .LVU765
 2803 0032 2146     		mov	r1, r4
 2804 0034 B06B     		ldr	r0, [r6, #56]
 2805 0036 A847     		blx	r5
 2806              	.LVL222:
 2807              		.loc 2 277 3 view .LVU766
 2808 0038 C047     		blx	r8
 2809              	.LVL223:
 278:src/console.c ****   sys_delay (1000);
 2810              		.loc 2 278 3 view .LVU767
 2811 003a 0F4B     		ldr	r3, .L271+20
 2812 003c 4FF47A70 		mov	r0, #1000
 2813 0040 9847     		blx	r3
 2814              	.LVL224:
 279:src/console.c ****   /* wait_for_key_press(); */
ARM GAS  /tmp/cccWRI8T.s 			page 78


 280:src/console.c ****   //  key_pop_all();
 281:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 282:src/console.c ****   // key_pop_all();
 283:src/console.c ****   strcpy( print_string, spaces );
 2815              		.loc 2 283 3 view .LVU768
 2816 0042 3946     		mov	r1, r7
 2817 0044 2046     		mov	r0, r4
 2818 0046 FFF7FEFF 		bl	strcpy
 2819              	.LVL225:
 284:src/console.c ****   moveto (3, 1);
 2820              		.loc 2 284 3 view .LVU769
 2821 004a 0121     		movs	r1, #1
 2822 004c 0320     		movs	r0, #3
 2823 004e FFF7FEFF 		bl	moveto
 2824              	.LVL226:
 285:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2825              		.loc 2 285 3 view .LVU770
 2826 0052 B06B     		ldr	r0, [r6, #56]
 2827 0054 2146     		mov	r1, r4
 2828 0056 A847     		blx	r5
 2829              	.LVL227:
 286:src/console.c ****   lcd_refresh();
 2830              		.loc 2 286 3 view .LVU771
 2831 0058 4346     		mov	r3, r8
 287:src/console.c ****   // while (key_empty()<=0);; // wait for release
 288:src/console.c ****   // key_pop_all();
 289:src/console.c **** }
 2832              		.loc 2 289 1 is_stmt 0 view .LVU772
 2833 005a 02B0     		add	sp, sp, #8
 2834              		.cfi_def_cfa_offset 24
 2835              	.LVL228:
 2836              		.loc 2 289 1 view .LVU773
 2837              		@ sp needed
 2838 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2839              		.cfi_restore 14
 2840              		.cfi_restore 8
 2841              		.cfi_restore 7
 2842              		.cfi_restore 6
 2843              		.cfi_restore 5
 2844              		.cfi_restore 4
 2845              		.cfi_def_cfa_offset 0
 2846              	.LVL229:
 286:src/console.c ****   lcd_refresh();
 2847              		.loc 2 286 3 view .LVU774
 2848 0060 1847     		bx	r3	@ indirect register sibling call
 2849              	.LVL230:
 2850              	.L272:
 2851 0062 00BF     		.align	2
 2852              	.L271:
 2853 0064 00000000 		.word	print_string
 2854 0068 00000000 		.word	.LANCHOR9
 2855 006c 00200010 		.word	268443648
 2856 0070 B1020008 		.word	134218417
 2857 0074 00000000 		.word	.LC11
 2858 0078 05040008 		.word	134218757
 2859 007c 31020008 		.word	134218289
 2860              		.cfi_endproc
ARM GAS  /tmp/cccWRI8T.s 			page 79


 2861              	.LFE30:
 2863              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2864              		.align	2
 2865              	.LC12:
 2866 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2866      692C2531 
 2866      337300
 2867              		.section	.text.print_debug2,"ax",%progbits
 2868              		.align	1
 2869              		.p2align 2,,3
 2870              		.global	print_debug2
 2871              		.syntax unified
 2872              		.thumb
 2873              		.thumb_func
 2874              		.fpu fpv4-sp-d16
 2876              	print_debug2:
 2877              	.LVL231:
 2878              	.LFB31:
 290:src/console.c **** 
 291:src/console.c **** void print_debug2 (int i, char* j) {
 2879              		.loc 2 291 36 is_stmt 1 view -0
 2880              		.cfi_startproc
 2881              		@ args = 0, pretend = 0, frame = 8
 2882              		@ frame_needed = 0, uses_anonymous_args = 0
 292:src/console.c ****   strcpy( print_string, spaces );
 2883              		.loc 2 292 3 view .LVU776
 291:src/console.c ****   strcpy( print_string, spaces );
 2884              		.loc 2 291 36 is_stmt 0 view .LVU777
 2885 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2886              		.cfi_def_cfa_offset 24
 2887              		.cfi_offset 4, -24
 2888              		.cfi_offset 5, -20
 2889              		.cfi_offset 6, -16
 2890              		.cfi_offset 7, -12
 2891              		.cfi_offset 8, -8
 2892              		.cfi_offset 14, -4
 2893              		.loc 2 292 3 view .LVU778
 2894 0004 174C     		ldr	r4, .L275
 2895 0006 184F     		ldr	r7, .L275+4
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 294:src/console.c ****   moveto (3, 1);
 295:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2896              		.loc 2 295 3 view .LVU779
 2897 0008 184E     		ldr	r6, .L275+8
 2898 000a 194D     		ldr	r5, .L275+12
 296:src/console.c ****   lcd_refresh();
 2899              		.loc 2 296 3 view .LVU780
 2900 000c DFF86C80 		ldr	r8, .L275+24
 291:src/console.c ****   strcpy( print_string, spaces );
 2901              		.loc 2 291 36 view .LVU781
 2902 0010 82B0     		sub	sp, sp, #8
 2903              		.cfi_def_cfa_offset 32
 291:src/console.c ****   strcpy( print_string, spaces );
 2904              		.loc 2 291 36 view .LVU782
 2905 0012 0190     		str	r0, [sp, #4]
 2906 0014 0091     		str	r1, [sp]
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
ARM GAS  /tmp/cccWRI8T.s 			page 80


 2907              		.loc 2 292 3 view .LVU783
 2908 0016 2046     		mov	r0, r4
 2909              	.LVL232:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2910              		.loc 2 292 3 view .LVU784
 2911 0018 3946     		mov	r1, r7
 2912              	.LVL233:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2913              		.loc 2 292 3 view .LVU785
 2914 001a FFF7FEFF 		bl	strcpy
 2915              	.LVL234:
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2916              		.loc 2 293 3 is_stmt 1 view .LVU786
 2917 001e DDE90032 		ldrd	r3, r2, [sp]
 2918 0022 1449     		ldr	r1, .L275+16
 2919 0024 2046     		mov	r0, r4
 2920 0026 FFF7FEFF 		bl	sprintf
 2921              	.LVL235:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2922              		.loc 2 294 3 view .LVU787
 2923 002a 0121     		movs	r1, #1
 2924 002c 0320     		movs	r0, #3
 2925 002e FFF7FEFF 		bl	moveto
 2926              	.LVL236:
 295:src/console.c ****   lcd_refresh();
 2927              		.loc 2 295 3 view .LVU788
 2928 0032 2146     		mov	r1, r4
 2929 0034 B06B     		ldr	r0, [r6, #56]
 2930 0036 A847     		blx	r5
 2931              	.LVL237:
 2932              		.loc 2 296 3 view .LVU789
 2933 0038 C047     		blx	r8
 2934              	.LVL238:
 297:src/console.c ****   sys_delay (2500);
 2935              		.loc 2 297 3 view .LVU790
 2936 003a 0F4B     		ldr	r3, .L275+20
 2937 003c 40F6C410 		movw	r0, #2500
 2938 0040 9847     		blx	r3
 2939              	.LVL239:
 298:src/console.c ****   /* wait_for_key_press(); */
 299:src/console.c ****   //  key_pop_all();
 300:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 301:src/console.c ****   // key_pop_all();
 302:src/console.c ****   strcpy( print_string, spaces );
 2940              		.loc 2 302 3 view .LVU791
 2941 0042 3946     		mov	r1, r7
 2942 0044 2046     		mov	r0, r4
 2943 0046 FFF7FEFF 		bl	strcpy
 2944              	.LVL240:
 303:src/console.c ****   moveto (3, 1);
 2945              		.loc 2 303 3 view .LVU792
 2946 004a 0121     		movs	r1, #1
 2947 004c 0320     		movs	r0, #3
 2948 004e FFF7FEFF 		bl	moveto
 2949              	.LVL241:
 304:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2950              		.loc 2 304 3 view .LVU793
ARM GAS  /tmp/cccWRI8T.s 			page 81


 2951 0052 B06B     		ldr	r0, [r6, #56]
 2952 0054 2146     		mov	r1, r4
 2953 0056 A847     		blx	r5
 2954              	.LVL242:
 305:src/console.c ****   lcd_refresh();
 2955              		.loc 2 305 3 view .LVU794
 2956 0058 4346     		mov	r3, r8
 306:src/console.c ****   // while (key_empty()<=0);; // wait for release
 307:src/console.c ****   // key_pop_all();
 308:src/console.c **** }
 2957              		.loc 2 308 1 is_stmt 0 view .LVU795
 2958 005a 02B0     		add	sp, sp, #8
 2959              		.cfi_def_cfa_offset 24
 2960              	.LVL243:
 2961              		.loc 2 308 1 view .LVU796
 2962              		@ sp needed
 2963 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2964              		.cfi_restore 14
 2965              		.cfi_restore 8
 2966              		.cfi_restore 7
 2967              		.cfi_restore 6
 2968              		.cfi_restore 5
 2969              		.cfi_restore 4
 2970              		.cfi_def_cfa_offset 0
 2971              	.LVL244:
 305:src/console.c ****   lcd_refresh();
 2972              		.loc 2 305 3 view .LVU797
 2973 0060 1847     		bx	r3	@ indirect register sibling call
 2974              	.LVL245:
 2975              	.L276:
 2976 0062 00BF     		.align	2
 2977              	.L275:
 2978 0064 00000000 		.word	print_string
 2979 0068 00000000 		.word	.LANCHOR9
 2980 006c 00200010 		.word	268443648
 2981 0070 B1020008 		.word	134218417
 2982 0074 00000000 		.word	.LC12
 2983 0078 05040008 		.word	134218757
 2984 007c 31020008 		.word	134218289
 2985              		.cfi_endproc
 2986              	.LFE31:
 2988              		.section	.text.do_now,"ax",%progbits
 2989              		.align	1
 2990              		.p2align 2,,3
 2991              		.global	do_now
 2992              		.syntax unified
 2993              		.thumb
 2994              		.thumb_func
 2995              		.fpu fpv4-sp-d16
 2997              	do_now:
 2998              	.LVL246:
 2999              	.LFB32:
 309:src/console.c **** 
 310:src/console.c **** void do_now (int key, int shift) { // key and shift are like the output of remapped
 3000              		.loc 2 310 34 is_stmt 1 view -0
 3001              		.cfi_startproc
 3002              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cccWRI8T.s 			page 82


 3003              		@ frame_needed = 0, uses_anonymous_args = 0
 3004              		@ link register save eliminated.
 311:src/console.c ****   struct _ndmap temp;
 3005              		.loc 2 311 3 view .LVU799
 312:src/console.c ****   temp.key_34s = key;
 3006              		.loc 2 312 3 view .LVU800
 310:src/console.c ****   struct _ndmap temp;
 3007              		.loc 2 310 34 is_stmt 0 view .LVU801
 3008 0000 82B0     		sub	sp, sp, #8
 3009              		.cfi_def_cfa_offset 8
 313:src/console.c ****   temp.shift = shift;
 314:src/console.c ****   process_keycode_with_shift (temp);
 3010              		.loc 2 314 3 view .LVU802
 3011 0002 02AB     		add	r3, sp, #8
 312:src/console.c ****   temp.shift = shift;
 3012              		.loc 2 312 16 view .LVU803
 3013 0004 8DF80000 		strb	r0, [sp]
 313:src/console.c ****   temp.shift = shift;
 3014              		.loc 2 313 3 is_stmt 1 view .LVU804
 313:src/console.c ****   temp.shift = shift;
 3015              		.loc 2 313 14 is_stmt 0 view .LVU805
 3016 0008 0191     		str	r1, [sp, #4]
 3017              		.loc 2 314 3 is_stmt 1 view .LVU806
 3018 000a 13E90300 		ldmdb	r3, {r0, r1}
 3019              	.LVL247:
 315:src/console.c **** }
 3020              		.loc 2 315 1 is_stmt 0 view .LVU807
 3021 000e 02B0     		add	sp, sp, #8
 3022              		.cfi_def_cfa_offset 0
 3023              		@ sp needed
 314:src/console.c **** }
 3024              		.loc 2 314 3 view .LVU808
 3025 0010 FFF7FEBF 		b	process_keycode_with_shift
 3026              	.LVL248:
 314:src/console.c **** }
 3027              		.loc 2 314 3 view .LVU809
 3028              		.cfi_endproc
 3029              	.LFE32:
 3031              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 3032              		.align	2
 3033              	.LC13:
 3034 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 3034      502F7770 
 3034      3334735F 
 3034      68656C70 
 3034      2E68746D 
 3035              		.section	.text.do_multi,"ax",%progbits
 3036              		.align	1
 3037              		.p2align 2,,3
 3038              		.global	do_multi
 3039              		.syntax unified
 3040              		.thumb
 3041              		.thumb_func
 3042              		.fpu fpv4-sp-d16
 3044              	do_multi:
 3045              	.LVL249:
 3046              	.LFB33:
ARM GAS  /tmp/cccWRI8T.s 			page 83


 316:src/console.c **** 
 317:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 3047              		.loc 2 317 42 is_stmt 1 view -0
 3048              		.cfi_startproc
 3049              		@ args = 0, pretend = 0, frame = 16
 3050              		@ frame_needed = 0, uses_anonymous_args = 0
 3051              		.loc 2 317 42 is_stmt 0 view .LVU811
 3052 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3053              		.cfi_def_cfa_offset 24
 3054              		.cfi_offset 4, -24
 3055              		.cfi_offset 5, -20
 3056              		.cfi_offset 6, -16
 3057              		.cfi_offset 7, -12
 3058              		.cfi_offset 8, -8
 3059              		.cfi_offset 14, -4
 3060 0004 84B0     		sub	sp, sp, #16
 3061              		.cfi_def_cfa_offset 40
 3062              	.LVL250:
 318:src/console.c ****   switch(r.shift) {
 3063              		.loc 2 318 3 is_stmt 1 view .LVU812
 317:src/console.c ****   switch(r.shift) {
 3064              		.loc 2 317 42 is_stmt 0 view .LVU813
 3065 0006 6C46     		mov	r4, sp
 3066 0008 531E     		subs	r3, r2, #1
 3067 000a 84E80600 		stm	r4, {r1, r2}
 3068              	.LVL251:
 317:src/console.c ****   switch(r.shift) {
 3069              		.loc 2 317 42 view .LVU814
 3070 000e 0546     		mov	r5, r0
 3071 0010 0E2B     		cmp	r3, #14
 3072 0012 00F28A80 		bhi	.L280
 3073 0016 DFE803F0 		tbb	[pc, r3]
 3074              	.L282:
 3075 001a 21       		.byte	(.L296-.L282)/2
 3076 001b 49       		.byte	(.L295-.L282)/2
 3077 001c 55       		.byte	(.L294-.L282)/2
 3078 001d 59       		.byte	(.L293-.L282)/2
 3079 001e 5D       		.byte	(.L292-.L282)/2
 3080 001f 61       		.byte	(.L291-.L282)/2
 3081 0020 65       		.byte	(.L290-.L282)/2
 3082 0021 69       		.byte	(.L289-.L282)/2
 3083 0022 6C       		.byte	(.L288-.L282)/2
 3084 0023 70       		.byte	(.L287-.L282)/2
 3085 0024 73       		.byte	(.L286-.L282)/2
 3086 0025 76       		.byte	(.L285-.L282)/2
 3087 0026 8F       		.byte	(.L284-.L282)/2
 3088 0027 92       		.byte	(.L283-.L282)/2
 3089 0028 08       		.byte	(.L281-.L282)/2
 3090 0029 00       		.p2align 1
 3091              	.L281:
 319:src/console.c ****   case LASTX: // Last x via RCL L
 320:src/console.c ****     do_now (K11, 0); // RCL
 321:src/console.c ****     do_now (K_RELEASE,0); // release
 322:src/console.c ****     do_now (K15,0); // TAN key
 323:src/console.c ****     r.key_34s = K_RELEASE;
 324:src/console.c ****     r.shift = 0; // set up for release;
 325:src/console.c ****     break;
ARM GAS  /tmp/cccWRI8T.s 			page 84


 326:src/console.c ****   case ONSTO: // flash_backup()
 327:src/console.c ****     flash_backup(OP_SAVE);
 328:src/console.c ****     reset_shift();
 329:src/console.c ****     r = no_key;
 330:src/console.c ****     break;
 331:src/console.c ****   case ONRCL: // flash_restore()
 332:src/console.c ****     flash_restore(OP_LOAD);
 333:src/console.c ****     reset_shift();
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
 336:src/console.c ****   case WRLIB: // save library file
 337:src/console.c ****     save_lib_file(1);
 338:src/console.c ****     reset_shift();
 339:src/console.c ****     r = no_key;
 340:src/console.c ****     break;
 341:src/console.c ****   case LLIB: // load library file
 342:src/console.c ****     load_lib_file(1);
 343:src/console.c ****     reset_shift();
 344:src/console.c ****     r = no_key;
 345:src/console.c ****     break;
 346:src/console.c ****   case WRTST: // save state file
 347:src/console.c ****     save_ram_file(1);
 348:src/console.c ****     reset_shift();
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case LDST:
 352:src/console.c ****     load_ram_file(1);
 353:src/console.c ****     reset_shift();
 354:src/console.c ****     r = no_key;
 355:src/console.c ****     break;
 356:src/console.c ****   case LDPRG:
 357:src/console.c ****     load_prog_file();
 358:src/console.c ****     reset_shift();
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case SVPRG:
 362:src/console.c ****     save_prog_file();
 363:src/console.c ****     reset_shift();
 364:src/console.c ****     r = no_key;
 365:src/console.c ****     break;
 366:src/console.c ****   case HELP:
 367:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 368:src/console.c ****     reset_shift();
 369:src/console.c ****     r = no_key;
 370:src/console.c ****     break;
 371:src/console.c ****   case DOTS:
 372:src/console.c ****     do_all_dots();
 373:src/console.c ****     reset_shift();
 374:src/console.c ****     r = no_key;
 375:src/console.c ****     break;
 376:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 377:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 378:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 379:src/console.c ****     r = no_key;
 380:src/console.c ****     break;
 381:src/console.c ****   case DEFMEN:
 382:src/console.c ****     toggle_default_menu();
ARM GAS  /tmp/cccWRI8T.s 			page 85


 383:src/console.c ****     reset_shift();
 384:src/console.c ****     r = no_key;
 385:src/console.c ****     break;
 386:src/console.c ****   case SETUMEN:
 387:src/console.c ****     build_user_menu();
 388:src/console.c ****     reset_shift();
 389:src/console.c ****     r = no_key;;
 390:src/console.c ****     break;
 391:src/console.c ****   case KCPX:
 392:src/console.c ****     if (C_LOCKED) {
 3092              		.loc 2 392 5 is_stmt 1 view .LVU815
 3093              		.loc 2 392 9 is_stmt 0 view .LVU816
 3094 002a 504B     		ldr	r3, .L312
 3095 002c 1B68     		ldr	r3, [r3]
 3096 002e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 3097              		.loc 2 392 8 view .LVU817
 3098 0032 03F04103 		and	r3, r3, #65
 3099 0036 412B     		cmp	r3, #65
 3100 0038 40F08580 		bne	.L298
 393:src/console.c ****       set_menu(M_C_Lock);
 3101              		.loc 2 393 7 is_stmt 1 view .LVU818
 3102              	.LVL252:
 3103              	.LBB126:
 3104              	.LBI126:
 108:src/menu.c    ****   menu_name m = current_menu;
 3105              		.loc 1 108 6 view .LVU819
 3106              	.LBB127:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3107              		.loc 1 109 3 view .LVU820
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3108              		.loc 1 109 13 is_stmt 0 view .LVU821
 3109 003c 4C4A     		ldr	r2, .L312+4
 3110 003e 92F90030 		ldrsb	r3, [r2]
 3111              	.LVL253:
 110:src/menu.c    ****     current_menu = default_menu;
 3112              		.loc 1 110 3 is_stmt 1 view .LVU822
 110:src/menu.c    ****     current_menu = default_menu;
 3113              		.loc 1 110 6 is_stmt 0 view .LVU823
 3114 0042 112B     		cmp	r3, #17
 3115 0044 00F08B80 		beq	.L311
 113:src/menu.c    ****     current_menu = last_menu;
 3116              		.loc 1 113 8 is_stmt 1 view .LVU824
 117:src/menu.c    ****   }
 3117              		.loc 1 117 5 view .LVU825
 117:src/menu.c    ****   }
 3118              		.loc 1 117 18 is_stmt 0 view .LVU826
 3119 0048 1121     		movs	r1, #17
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3120              		.loc 1 119 6 view .LVU827
 3121 004a 092B     		cmp	r3, #9
 117:src/menu.c    ****   }
 3122              		.loc 1 117 18 view .LVU828
 3123 004c 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3124              		.loc 1 119 3 is_stmt 1 view .LVU829
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3125              		.loc 1 119 6 is_stmt 0 view .LVU830
ARM GAS  /tmp/cccWRI8T.s 			page 86


 3126 004e 02D0     		beq	.L301
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3127              		.loc 1 119 23 view .LVU831
 3128 0050 102B     		cmp	r3, #16
 3129 0052 40F08780 		bne	.L300
 3130              	.L301:
 3131              	.LVL254:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3132              		.loc 1 119 23 view .LVU832
 3133              	.LBE127:
 3134              	.LBE126:
 394:src/console.c ****       reset_shift();
 3135              		.loc 2 394 7 is_stmt 1 view .LVU833
 3136 0056 FFF7FEFF 		bl	reset_shift
 3137              	.LVL255:
 3138              		.loc 2 394 7 is_stmt 0 view .LVU834
 3139 005a 66E0     		b	.L280
 3140              	.LVL256:
 3141              	.L296:
 320:src/console.c ****     do_now (K_RELEASE,0); // release
 3142              		.loc 2 320 5 is_stmt 1 view .LVU835
 3143              	.LBB129:
 3144              	.LBI129:
 310:src/console.c ****   struct _ndmap temp;
 3145              		.loc 2 310 6 view .LVU836
 3146              	.LBB130:
 311:src/console.c ****   temp.key_34s = key;
 3147              		.loc 2 311 3 view .LVU837
 312:src/console.c ****   temp.shift = shift;
 3148              		.loc 2 312 3 view .LVU838
 312:src/console.c ****   temp.shift = shift;
 3149              		.loc 2 312 16 is_stmt 0 view .LVU839
 3150 005c 0723     		movs	r3, #7
 313:src/console.c ****   process_keycode_with_shift (temp);
 3151              		.loc 2 313 14 view .LVU840
 3152 005e 0026     		movs	r6, #0
 312:src/console.c ****   temp.shift = shift;
 3153              		.loc 2 312 16 view .LVU841
 3154 0060 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3155              		.loc 2 313 3 is_stmt 1 view .LVU842
 314:src/console.c **** }
 3156              		.loc 2 314 3 is_stmt 0 view .LVU843
 3157 0064 0DF10808 		add	r8, sp, #8
 313:src/console.c ****   process_keycode_with_shift (temp);
 3158              		.loc 2 313 14 view .LVU844
 3159 0068 0396     		str	r6, [sp, #12]
 314:src/console.c **** }
 3160              		.loc 2 314 3 is_stmt 1 view .LVU845
 3161 006a 98E80300 		ldm	r8, {r0, r1}
 3162              	.LVL257:
 314:src/console.c **** }
 3163              		.loc 2 314 3 is_stmt 0 view .LVU846
 3164              	.LBE130:
 3165              	.LBE129:
 3166              	.LBB132:
 3167              	.LBB133:
ARM GAS  /tmp/cccWRI8T.s 			page 87


 312:src/console.c ****   temp.shift = shift;
 3168              		.loc 2 312 16 view .LVU847
 3169 006e 6327     		movs	r7, #99
 3170              	.LBE133:
 3171              	.LBE132:
 3172              	.LBB135:
 3173              	.LBB131:
 314:src/console.c **** }
 3174              		.loc 2 314 3 view .LVU848
 3175 0070 FFF7FEFF 		bl	process_keycode_with_shift
 3176              	.LVL258:
 314:src/console.c **** }
 3177              		.loc 2 314 3 view .LVU849
 3178              	.LBE131:
 3179              	.LBE135:
 321:src/console.c ****     do_now (K15,0); // TAN key
 3180              		.loc 2 321 5 is_stmt 1 view .LVU850
 3181              	.LBB136:
 3182              	.LBI132:
 310:src/console.c ****   struct _ndmap temp;
 3183              		.loc 2 310 6 view .LVU851
 3184              	.LBB134:
 311:src/console.c ****   temp.key_34s = key;
 3185              		.loc 2 311 3 view .LVU852
 312:src/console.c ****   temp.shift = shift;
 3186              		.loc 2 312 3 view .LVU853
 313:src/console.c ****   process_keycode_with_shift (temp);
 3187              		.loc 2 313 14 is_stmt 0 view .LVU854
 3188 0074 0396     		str	r6, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 3189              		.loc 2 312 16 view .LVU855
 3190 0076 8DF80870 		strb	r7, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3191              		.loc 2 313 3 is_stmt 1 view .LVU856
 314:src/console.c **** }
 3192              		.loc 2 314 3 view .LVU857
 3193 007a 98E80300 		ldm	r8, {r0, r1}
 3194 007e FFF7FEFF 		bl	process_keycode_with_shift
 3195              	.LVL259:
 314:src/console.c **** }
 3196              		.loc 2 314 3 is_stmt 0 view .LVU858
 3197              	.LBE134:
 3198              	.LBE136:
 322:src/console.c ****     r.key_34s = K_RELEASE;
 3199              		.loc 2 322 5 is_stmt 1 view .LVU859
 3200              	.LBB137:
 3201              	.LBI137:
 310:src/console.c ****   struct _ndmap temp;
 3202              		.loc 2 310 6 view .LVU860
 3203              	.LBB138:
 311:src/console.c ****   temp.key_34s = key;
 3204              		.loc 2 311 3 view .LVU861
 312:src/console.c ****   temp.shift = shift;
 3205              		.loc 2 312 3 view .LVU862
 312:src/console.c ****   temp.shift = shift;
 3206              		.loc 2 312 16 is_stmt 0 view .LVU863
 3207 0082 0B23     		movs	r3, #11
ARM GAS  /tmp/cccWRI8T.s 			page 88


 3208 0084 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3209              		.loc 2 313 3 is_stmt 1 view .LVU864
 314:src/console.c **** }
 3210              		.loc 2 314 3 view .LVU865
 313:src/console.c ****   process_keycode_with_shift (temp);
 3211              		.loc 2 313 14 is_stmt 0 view .LVU866
 3212 0088 0396     		str	r6, [sp, #12]
 314:src/console.c **** }
 3213              		.loc 2 314 3 view .LVU867
 3214 008a 98E80300 		ldm	r8, {r0, r1}
 3215 008e FFF7FEFF 		bl	process_keycode_with_shift
 3216              	.LVL260:
 314:src/console.c **** }
 3217              		.loc 2 314 3 view .LVU868
 3218              	.LBE138:
 3219              	.LBE137:
 323:src/console.c ****     r.shift = 0; // set up for release;
 3220              		.loc 2 323 5 is_stmt 1 view .LVU869
 324:src/console.c ****     break;
 3221              		.loc 2 324 5 view .LVU870
 325:src/console.c ****   case ONSTO: // flash_backup()
 3222              		.loc 2 325 5 view .LVU871
 324:src/console.c ****     break;
 3223              		.loc 2 324 13 is_stmt 0 view .LVU872
 3224 0092 3146     		mov	r1, r6
 323:src/console.c ****     r.shift = 0; // set up for release;
 3225              		.loc 2 323 15 view .LVU873
 3226 0094 3B46     		mov	r3, r7
 3227              	.LVL261:
 3228              	.L297:
 395:src/console.c ****     }
 396:src/console.c ****     else {
 397:src/console.c ****       do_now (K_CMPLX, 0);
 398:src/console.c ****       do_now (K_RELEASE, 0);
 399:src/console.c ****       r = no_key;
 400:src/console.c ****     }
 401:src/console.c ****   default:
 402:src/console.c ****     r = no_key;
 403:src/console.c ****   }
 404:src/console.c ****   return r;
 3229              		.loc 2 404 3 is_stmt 1 view .LVU874
 3230              		.loc 2 404 10 is_stmt 0 view .LVU875
 3231 0096 8DF80030 		strb	r3, [sp]
 3232 009a 0191     		str	r1, [sp, #4]
 3233 009c 94E80300 		ldm	r4, {r0, r1}
 3234              	.LVL262:
 3235              		.loc 2 404 10 view .LVU876
 3236 00a0 85E80300 		stm	r5, {r0, r1}
 405:src/console.c **** }
 3237              		.loc 2 405 1 view .LVU877
 3238 00a4 2846     		mov	r0, r5
 3239 00a6 04B0     		add	sp, sp, #16
 3240              		.cfi_remember_state
 3241              		.cfi_def_cfa_offset 24
 3242              		@ sp needed
 3243 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /tmp/cccWRI8T.s 			page 89


 3244              	.LVL263:
 3245              	.L295:
 3246              		.cfi_restore_state
 327:src/console.c ****     reset_shift();
 3247              		.loc 2 327 5 is_stmt 1 view .LVU878
 3248 00ac AD20     		movs	r0, #173
 3249              	.LVL264:
 327:src/console.c ****     reset_shift();
 3250              		.loc 2 327 5 is_stmt 0 view .LVU879
 3251 00ae FFF7FEFF 		bl	flash_backup
 3252              	.LVL265:
 328:src/console.c ****     r = no_key;
 3253              		.loc 2 328 5 is_stmt 1 view .LVU880
 3254              	.L309:
 333:src/console.c ****     r = no_key;
 3255              		.loc 2 333 5 view .LVU881
 3256 00b2 FFF7FEFF 		bl	reset_shift
 3257              	.LVL266:
 334:src/console.c ****     break;
 3258              		.loc 2 334 5 view .LVU882
 334:src/console.c ****     break;
 3259              		.loc 2 334 7 is_stmt 0 view .LVU883
 3260 00b6 2F4B     		ldr	r3, .L312+8
 3261 00b8 93E80300 		ldm	r3, {r0, r1}
 3262 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3263              	.LVL267:
 335:src/console.c ****   case WRLIB: // save library file
 3264              		.loc 2 335 5 is_stmt 1 view .LVU884
 334:src/console.c ****     break;
 3265              		.loc 2 334 7 is_stmt 0 view .LVU885
 3266 00be 84E80300 		stm	r4, {r0, r1}
 335:src/console.c ****   case WRLIB: // save library file
 3267              		.loc 2 335 5 view .LVU886
 3268 00c2 E8E7     		b	.L297
 3269              	.LVL268:
 3270              	.L294:
 332:src/console.c ****     reset_shift();
 3271              		.loc 2 332 5 is_stmt 1 view .LVU887
 3272 00c4 AE20     		movs	r0, #174
 3273              	.LVL269:
 332:src/console.c ****     reset_shift();
 3274              		.loc 2 332 5 is_stmt 0 view .LVU888
 3275 00c6 FFF7FEFF 		bl	flash_restore
 3276              	.LVL270:
 3277 00ca F2E7     		b	.L309
 3278              	.LVL271:
 3279              	.L293:
 337:src/console.c ****     reset_shift();
 3280              		.loc 2 337 5 is_stmt 1 view .LVU889
 3281 00cc 0120     		movs	r0, #1
 3282              	.LVL272:
 337:src/console.c ****     reset_shift();
 3283              		.loc 2 337 5 is_stmt 0 view .LVU890
 3284 00ce FFF7FEFF 		bl	save_lib_file
 3285              	.LVL273:
 338:src/console.c ****     r = no_key;
 3286              		.loc 2 338 5 is_stmt 1 view .LVU891
ARM GAS  /tmp/cccWRI8T.s 			page 90


 3287 00d2 EEE7     		b	.L309
 3288              	.LVL274:
 3289              	.L292:
 342:src/console.c ****     reset_shift();
 3290              		.loc 2 342 5 view .LVU892
 3291 00d4 0120     		movs	r0, #1
 3292              	.LVL275:
 342:src/console.c ****     reset_shift();
 3293              		.loc 2 342 5 is_stmt 0 view .LVU893
 3294 00d6 FFF7FEFF 		bl	load_lib_file
 3295              	.LVL276:
 343:src/console.c ****     r = no_key;
 3296              		.loc 2 343 5 is_stmt 1 view .LVU894
 3297 00da EAE7     		b	.L309
 3298              	.LVL277:
 3299              	.L291:
 347:src/console.c ****     reset_shift();
 3300              		.loc 2 347 5 view .LVU895
 3301 00dc 0120     		movs	r0, #1
 3302              	.LVL278:
 347:src/console.c ****     reset_shift();
 3303              		.loc 2 347 5 is_stmt 0 view .LVU896
 3304 00de FFF7FEFF 		bl	save_ram_file
 3305              	.LVL279:
 348:src/console.c ****     r = no_key;
 3306              		.loc 2 348 5 is_stmt 1 view .LVU897
 3307 00e2 E6E7     		b	.L309
 3308              	.LVL280:
 3309              	.L290:
 352:src/console.c ****     reset_shift();
 3310              		.loc 2 352 5 view .LVU898
 3311 00e4 0120     		movs	r0, #1
 3312              	.LVL281:
 352:src/console.c ****     reset_shift();
 3313              		.loc 2 352 5 is_stmt 0 view .LVU899
 3314 00e6 FFF7FEFF 		bl	load_ram_file
 3315              	.LVL282:
 353:src/console.c ****     r = no_key;
 3316              		.loc 2 353 5 is_stmt 1 view .LVU900
 3317 00ea E2E7     		b	.L309
 3318              	.LVL283:
 3319              	.L289:
 357:src/console.c ****     reset_shift();
 3320              		.loc 2 357 5 view .LVU901
 3321 00ec FFF7FEFF 		bl	load_prog_file
 3322              	.LVL284:
 358:src/console.c ****     r = no_key;
 3323              		.loc 2 358 5 view .LVU902
 3324 00f0 DFE7     		b	.L309
 3325              	.LVL285:
 3326              	.L288:
 367:src/console.c ****     reset_shift();
 3327              		.loc 2 367 5 view .LVU903
 3328 00f2 214B     		ldr	r3, .L312+12
 3329 00f4 2148     		ldr	r0, .L312+16
 3330              	.LVL286:
 367:src/console.c ****     reset_shift();
ARM GAS  /tmp/cccWRI8T.s 			page 91


 3331              		.loc 2 367 5 is_stmt 0 view .LVU904
 3332 00f6 9847     		blx	r3
 3333              	.LVL287:
 368:src/console.c ****     r = no_key;
 3334              		.loc 2 368 5 is_stmt 1 view .LVU905
 3335 00f8 DBE7     		b	.L309
 3336              	.LVL288:
 3337              	.L287:
 362:src/console.c ****     reset_shift();
 3338              		.loc 2 362 5 view .LVU906
 3339 00fa FFF7FEFF 		bl	save_prog_file
 3340              	.LVL289:
 363:src/console.c ****     r = no_key;
 3341              		.loc 2 363 5 view .LVU907
 3342 00fe D8E7     		b	.L309
 3343              	.LVL290:
 3344              	.L286:
 372:src/console.c ****     reset_shift();
 3345              		.loc 2 372 5 view .LVU908
 3346 0100 FFF7FEFF 		bl	do_all_dots
 3347              	.LVL291:
 373:src/console.c ****     r = no_key;
 3348              		.loc 2 373 5 view .LVU909
 3349 0104 D5E7     		b	.L309
 3350              	.LVL292:
 3351              	.L285:
 377:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 3352              		.loc 2 377 5 view .LVU910
 3353              	.LBB139:
 3354              	.LBI139:
 310:src/console.c ****   struct _ndmap temp;
 3355              		.loc 2 310 6 view .LVU911
 3356              	.LBB140:
 311:src/console.c ****   temp.key_34s = key;
 3357              		.loc 2 311 3 view .LVU912
 312:src/console.c ****   temp.shift = shift;
 3358              		.loc 2 312 3 view .LVU913
 312:src/console.c ****   temp.shift = shift;
 3359              		.loc 2 312 16 is_stmt 0 view .LVU914
 3360 0106 6323     		movs	r3, #99
 313:src/console.c ****   process_keycode_with_shift (temp);
 3361              		.loc 2 313 14 view .LVU915
 3362 0108 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3363              		.loc 2 312 16 view .LVU916
 3364 010a 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3365              		.loc 2 313 3 is_stmt 1 view .LVU917
 313:src/console.c ****   process_keycode_with_shift (temp);
 3366              		.loc 2 313 14 is_stmt 0 view .LVU918
 3367 010e 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3368              		.loc 2 314 3 is_stmt 1 view .LVU919
 3369 0110 02AE     		add	r6, sp, #8
 3370 0112 96E80300 		ldm	r6, {r0, r1}
 3371              	.LVL293:
 314:src/console.c **** }
ARM GAS  /tmp/cccWRI8T.s 			page 92


 3372              		.loc 2 314 3 is_stmt 0 view .LVU920
 3373 0116 FFF7FEFF 		bl	process_keycode_with_shift
 3374              	.LVL294:
 314:src/console.c **** }
 3375              		.loc 2 314 3 view .LVU921
 3376              	.LBE140:
 3377              	.LBE139:
 378:src/console.c ****     r = no_key;
 3378              		.loc 2 378 5 is_stmt 1 view .LVU922
 3379              	.LBB141:
 3380              	.LBI141:
 310:src/console.c ****   struct _ndmap temp;
 3381              		.loc 2 310 6 view .LVU923
 3382              	.LBB142:
 311:src/console.c ****   temp.key_34s = key;
 3383              		.loc 2 311 3 view .LVU924
 312:src/console.c ****   temp.shift = shift;
 3384              		.loc 2 312 3 view .LVU925
 312:src/console.c ****   temp.shift = shift;
 3385              		.loc 2 312 16 is_stmt 0 view .LVU926
 3386 011a 3323     		movs	r3, #51
 3387              	.LVL295:
 3388              	.L310:
 312:src/console.c ****   temp.shift = shift;
 3389              		.loc 2 312 16 view .LVU927
 3390              	.LBE142:
 3391              	.LBE141:
 3392              	.LBB143:
 3393              	.LBB144:
 313:src/console.c ****   process_keycode_with_shift (temp);
 3394              		.loc 2 313 14 view .LVU928
 3395 011c 0397     		str	r7, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 3396              		.loc 2 312 16 view .LVU929
 3397 011e 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3398              		.loc 2 313 3 is_stmt 1 view .LVU930
 314:src/console.c **** }
 3399              		.loc 2 314 3 view .LVU931
 3400 0122 96E80300 		ldm	r6, {r0, r1}
 3401 0126 FFF7FEFF 		bl	process_keycode_with_shift
 3402              	.LVL296:
 3403              	.LBE144:
 3404              	.LBE143:
 399:src/console.c ****     }
 3405              		.loc 2 399 7 view .LVU932
 3406              	.L280:
 402:src/console.c ****   }
 3407              		.loc 2 402 5 view .LVU933
 402:src/console.c ****   }
 3408              		.loc 2 402 7 is_stmt 0 view .LVU934
 3409 012a 124B     		ldr	r3, .L312+8
 3410 012c 93E80300 		ldm	r3, {r0, r1}
 3411 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3412              	.LVL297:
 402:src/console.c ****   }
 3413              		.loc 2 402 7 view .LVU935
ARM GAS  /tmp/cccWRI8T.s 			page 93


 3414 0132 84E80300 		stm	r4, {r0, r1}
 3415 0136 AEE7     		b	.L297
 3416              	.LVL298:
 3417              	.L284:
 382:src/console.c ****     reset_shift();
 3418              		.loc 2 382 5 is_stmt 1 view .LVU936
 3419 0138 FFF7FEFF 		bl	toggle_default_menu
 3420              	.LVL299:
 383:src/console.c ****     r = no_key;
 3421              		.loc 2 383 5 view .LVU937
 3422 013c B9E7     		b	.L309
 3423              	.LVL300:
 3424              	.L283:
 387:src/console.c ****     reset_shift();
 3425              		.loc 2 387 5 view .LVU938
 3426              	.LBB146:
 3427              	.LBI146:
 646:src/menu.c    ****   // find the label 'MNU'
 3428              		.loc 1 646 6 view .LVU939
 3429              	.LBB147:
 648:src/menu.c    ****    build_user_menu_from_program (lbl);
 3430              		.loc 1 648 4 view .LVU940
 649:src/menu.c    **** }
 3431              		.loc 1 649 4 view .LVU941
 3432 013e 1048     		ldr	r0, .L312+20
 3433              	.LVL301:
 649:src/menu.c    **** }
 3434              		.loc 1 649 4 is_stmt 0 view .LVU942
 3435 0140 FFF7FEFF 		bl	build_user_menu_from_program
 3436              	.LVL302:
 3437              	.LBE147:
 3438              	.LBE146:
 388:src/console.c ****     r = no_key;;
 3439              		.loc 2 388 5 is_stmt 1 view .LVU943
 3440 0144 B5E7     		b	.L309
 3441              	.LVL303:
 3442              	.L298:
 397:src/console.c ****       do_now (K_RELEASE, 0);
 3443              		.loc 2 397 7 view .LVU944
 3444              	.LBB148:
 3445              	.LBI148:
 310:src/console.c ****   struct _ndmap temp;
 3446              		.loc 2 310 6 view .LVU945
 3447              	.LBB149:
 311:src/console.c ****   temp.key_34s = key;
 3448              		.loc 2 311 3 view .LVU946
 312:src/console.c ****   temp.shift = shift;
 3449              		.loc 2 312 3 view .LVU947
 312:src/console.c ****   temp.shift = shift;
 3450              		.loc 2 312 16 is_stmt 0 view .LVU948
 3451 0146 2D23     		movs	r3, #45
 313:src/console.c ****   process_keycode_with_shift (temp);
 3452              		.loc 2 313 14 view .LVU949
 3453 0148 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3454              		.loc 2 312 16 view .LVU950
 3455 014a 8DF80830 		strb	r3, [sp, #8]
ARM GAS  /tmp/cccWRI8T.s 			page 94


 313:src/console.c ****   process_keycode_with_shift (temp);
 3456              		.loc 2 313 3 is_stmt 1 view .LVU951
 313:src/console.c ****   process_keycode_with_shift (temp);
 3457              		.loc 2 313 14 is_stmt 0 view .LVU952
 3458 014e 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3459              		.loc 2 314 3 is_stmt 1 view .LVU953
 3460 0150 02AE     		add	r6, sp, #8
 3461 0152 96E80300 		ldm	r6, {r0, r1}
 3462              	.LVL304:
 314:src/console.c **** }
 3463              		.loc 2 314 3 is_stmt 0 view .LVU954
 3464 0156 FFF7FEFF 		bl	process_keycode_with_shift
 3465              	.LVL305:
 314:src/console.c **** }
 3466              		.loc 2 314 3 view .LVU955
 3467              	.LBE149:
 3468              	.LBE148:
 398:src/console.c ****       r = no_key;
 3469              		.loc 2 398 7 is_stmt 1 view .LVU956
 3470              	.LBB150:
 3471              	.LBI143:
 310:src/console.c ****   struct _ndmap temp;
 3472              		.loc 2 310 6 view .LVU957
 3473              	.LBB145:
 311:src/console.c ****   temp.key_34s = key;
 3474              		.loc 2 311 3 view .LVU958
 312:src/console.c ****   temp.shift = shift;
 3475              		.loc 2 312 3 view .LVU959
 312:src/console.c ****   temp.shift = shift;
 3476              		.loc 2 312 16 is_stmt 0 view .LVU960
 3477 015a 6323     		movs	r3, #99
 3478 015c DEE7     		b	.L310
 3479              	.LVL306:
 3480              	.L311:
 312:src/console.c ****   temp.shift = shift;
 3481              		.loc 2 312 16 view .LVU961
 3482              	.LBE145:
 3483              	.LBE150:
 3484              	.LBB151:
 3485              	.LBB128:
 111:src/menu.c    ****   }
 3486              		.loc 1 111 5 is_stmt 1 view .LVU962
 111:src/menu.c    ****   }
 3487              		.loc 1 111 18 is_stmt 0 view .LVU963
 3488 015e 0949     		ldr	r1, .L312+24
 3489 0160 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3490 0162 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3491              		.loc 1 119 3 is_stmt 1 view .LVU964
 3492              	.L300:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3493              		.loc 1 119 43 view .LVU965
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3494              		.loc 1 119 53 is_stmt 0 view .LVU966
 3495 0164 084A     		ldr	r2, .L312+28
 3496 0166 1370     		strb	r3, [r2]
ARM GAS  /tmp/cccWRI8T.s 			page 95


 3497 0168 75E7     		b	.L301
 3498              	.L313:
 3499 016a 00BF     		.align	2
 3500              	.L312:
 3501 016c 00000000 		.word	main_ram
 3502 0170 00000000 		.word	.LANCHOR1
 3503 0174 00000000 		.word	.LANCHOR10
 3504 0178 49040008 		.word	134218825
 3505 017c 00000000 		.word	.LC13
 3506 0180 4DF04E55 		.word	1431236685
 3507 0184 00000000 		.word	.LANCHOR2
 3508 0188 00000000 		.word	.LANCHOR3
 3509              	.LBE128:
 3510              	.LBE151:
 3511              		.cfi_endproc
 3512              	.LFE33:
 3514              		.section	.text.program_main,"ax",%progbits
 3515              		.align	1
 3516              		.p2align 2,,3
 3517              		.global	program_main
 3518              		.syntax unified
 3519              		.thumb
 3520              		.thumb_func
 3521              		.fpu fpv4-sp-d16
 3523              	program_main:
 3524              	.LFB34:
 406:src/console.c **** 
 407:src/console.c **** void program_main(){
 3525              		.loc 2 407 20 is_stmt 1 view -0
 3526              		.cfi_startproc
 3527              		@ args = 0, pretend = 0, frame = 224
 3528              		@ frame_needed = 0, uses_anonymous_args = 0
 408:src/console.c ****   int c;
 3529              		.loc 2 408 3 view .LVU968
 409:src/console.c ****   struct _ndmap remapped;
 3530              		.loc 2 409 3 view .LVU969
 410:src/console.c **** 
 411:src/console.c ****   init_mem();
 3531              		.loc 2 411 3 view .LVU970
 407:src/console.c ****   int c;
 3532              		.loc 2 407 20 is_stmt 0 view .LVU971
 3533 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3534              		.cfi_def_cfa_offset 32
 3535              		.cfi_offset 4, -32
 3536              		.cfi_offset 5, -28
 3537              		.cfi_offset 6, -24
 3538              		.cfi_offset 7, -20
 3539              		.cfi_offset 8, -16
 3540              		.cfi_offset 9, -12
 3541              		.cfi_offset 10, -8
 3542              		.cfi_offset 14, -4
 3543 0004 B8B0     		sub	sp, sp, #224
 3544              		.cfi_def_cfa_offset 256
 3545              		.loc 2 411 3 view .LVU972
 3546 0006 FFF7FEFF 		bl	init_mem
 3547              	.LVL307:
 412:src/console.c ****   init_RegionTab();
ARM GAS  /tmp/cccWRI8T.s 			page 96


 3548              		.loc 2 412 3 is_stmt 1 view .LVU973
 3549 000a FFF7FEFF 		bl	init_RegionTab
 3550              	.LVL308:
 413:src/console.c ****   init_34s();
 3551              		.loc 2 413 3 view .LVU974
 3552 000e FFF7FEFF 		bl	init_34s
 3553              	.LVL309:
 414:src/console.c ****   State2.flags = 1;  
 3554              		.loc 2 414 3 view .LVU975
 3555              		.loc 2 414 16 is_stmt 0 view .LVU976
 3556 0012 B34A     		ldr	r2, .L415
 3557 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3558 0016 43F00103 		orr	r3, r3, #1
 3559 001a 1376     		strb	r3, [r2, #24]
 415:src/console.c ****   check_create_wp34sdir();
 3560              		.loc 2 415 3 is_stmt 1 view .LVU977
 3561 001c FFF7FEFF 		bl	check_create_wp34sdir
 3562              	.LVL310:
 416:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3563              		.loc 2 416 3 view .LVU978
 3564              		.loc 2 416 8 is_stmt 0 view .LVU979
 3565 0020 0020     		movs	r0, #0
 3566 0022 FFF7FEFF 		bl	load_ram_file
 3567              	.LVL311:
 3568              		.loc 2 416 6 view .LVU980
 3569 0026 08B9     		cbnz	r0, .L315
 3570              		.loc 2 416 26 is_stmt 1 discriminator 1 view .LVU981
 3571              		.loc 2 416 34 is_stmt 0 discriminator 1 view .LVU982
 3572 0028 AE4B     		ldr	r3, .L415+4
 3573 002a 1860     		str	r0, [r3]
 3574              	.L315:
 417:src/console.c ****   load_backup_file(0);
 3575              		.loc 2 417 3 is_stmt 1 view .LVU983
 418:src/console.c ****   load_lib_file(0);
 419:src/console.c ****   t20->newln = 0;
 3576              		.loc 2 419 3 is_stmt 0 view .LVU984
 3577 002c AE4C     		ldr	r4, .L415+8
 3578 002e AF4E     		ldr	r6, .L415+12
 420:src/console.c ****   t20->lnfill = 0;
 421:src/console.c ****   t20->fixed = 1;
 422:src/console.c ****   t20->xspc = -2;
 423:src/console.c ****   t20->bgfill = 0;
 424:src/console.c ****   run_menu_item_app = run_menu_item;
 425:src/console.c ****   menu_line_str_app = menu_line_str;
 426:src/console.c **** 
 427:src/console.c ****   display();
 428:src/console.c ****   display_current_menu();
 429:src/console.c ****   lcd_refresh();
 430:src/console.c ****   JustDisplayed = 0;
 431:src/console.c ****   /*
 432:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 433:src/console.c ****     Sleeps peacefully while waiting for a key.
 434:src/console.c ****     Handles (in principle!) turning off and on.
 435:src/console.c ****     =================
 436:src/console.c ****     Main event loop
 437:src/console.c ****     =================
 438:src/console.c **** 
ARM GAS  /tmp/cccWRI8T.s 			page 97


 439:src/console.c ****     Status flags:
 440:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 441:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 442:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 443:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 444:src/console.c ****   */
 445:src/console.c ****   for(;;) {
 446:src/console.c **** 
 447:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 448:src/console.c ****       {
 449:src/console.c **** 	CLR_ST(STAT_RUNNING);
 450:src/console.c **** 	sys_sleep();
 451:src/console.c ****       }
 452:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 3579              		.loc 2 452 35 view .LVU985
 3580 0030 AF4F     		ldr	r7, .L415+16
 453:src/console.c ****     {
 454:src/console.c ****       CLR_ST(STAT_RUNNING);
 455:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3581              		.loc 2 455 7 view .LVU986
 3582 0032 DFF83083 		ldr	r8, .L415+132
 417:src/console.c ****   load_lib_file(0);
 3583              		.loc 2 417 3 view .LVU987
 3584 0036 0020     		movs	r0, #0
 3585 0038 FFF7FEFF 		bl	load_backup_file
 3586              	.LVL312:
 418:src/console.c ****   t20->newln = 0;
 3587              		.loc 2 418 3 is_stmt 1 view .LVU988
 3588 003c 0020     		movs	r0, #0
 3589 003e FFF7FEFF 		bl	load_lib_file
 3590              	.LVL313:
 419:src/console.c ****   t20->lnfill = 0;
 3591              		.loc 2 419 3 view .LVU989
 3592 0042 236B     		ldr	r3, [r4, #48]
 420:src/console.c ****   t20->fixed = 1;
 3593              		.loc 2 420 3 view .LVU990
 421:src/console.c ****   t20->xspc = -2;
 3594              		.loc 2 421 3 view .LVU991
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3595              		.loc 2 424 21 is_stmt 0 view .LVU992
 3596 0044 AB4A     		ldr	r2, .L415+20
 421:src/console.c ****   t20->xspc = -2;
 3597              		.loc 2 421 14 view .LVU993
 3598 0046 0121     		movs	r1, #1
 3599 0048 1974     		strb	r1, [r3, #16]
 422:src/console.c ****   t20->bgfill = 0;
 3600              		.loc 2 422 3 is_stmt 1 view .LVU994
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3601              		.loc 2 423 15 is_stmt 0 view .LVU995
 3602 004a 0025     		movs	r5, #0
 422:src/console.c ****   t20->bgfill = 0;
 3603              		.loc 2 422 13 view .LVU996
 3604 004c FE21     		movs	r1, #254
 3605 004e 9973     		strb	r1, [r3, #14]
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3606              		.loc 2 423 3 is_stmt 1 view .LVU997
 423:src/console.c ****   run_menu_item_app = run_menu_item;
ARM GAS  /tmp/cccWRI8T.s 			page 98


 3607              		.loc 2 423 15 is_stmt 0 view .LVU998
 3608 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 419:src/console.c ****   t20->lnfill = 0;
 3609              		.loc 2 419 14 view .LVU999
 3610 0052 1D75     		strb	r5, [r3, #20]
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3611              		.loc 2 424 3 is_stmt 1 view .LVU1000
 425:src/console.c **** 
 3612              		.loc 2 425 21 is_stmt 0 view .LVU1001
 3613 0054 A84B     		ldr	r3, .L415+24
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3614              		.loc 2 424 21 view .LVU1002
 3615 0056 E260     		str	r2, [r4, #12]
 425:src/console.c **** 
 3616              		.loc 2 425 3 is_stmt 1 view .LVU1003
 425:src/console.c **** 
 3617              		.loc 2 425 21 is_stmt 0 view .LVU1004
 3618 0058 2361     		str	r3, [r4, #16]
 427:src/console.c ****   display_current_menu();
 3619              		.loc 2 427 3 is_stmt 1 view .LVU1005
 3620 005a FFF7FEFF 		bl	display
 3621              	.LVL314:
 428:src/console.c ****   lcd_refresh();
 3622              		.loc 2 428 3 view .LVU1006
 3623 005e FFF7FEFF 		bl	display_current_menu
 3624              	.LVL315:
 429:src/console.c ****   JustDisplayed = 0;
 3625              		.loc 2 429 3 view .LVU1007
 3626 0062 A64B     		ldr	r3, .L415+28
 3627 0064 9847     		blx	r3
 3628              	.LVL316:
 430:src/console.c ****   /*
 3629              		.loc 2 430 3 view .LVU1008
 430:src/console.c ****   /*
 3630              		.loc 2 430 17 is_stmt 0 view .LVU1009
 3631 0066 A64B     		ldr	r3, .L415+32
 3632 0068 1D60     		str	r5, [r3]
 3633              	.L316:
 445:src/console.c **** 
 3634              		.loc 2 445 3 is_stmt 1 view .LVU1010
 447:src/console.c ****       {
 3635              		.loc 2 447 5 view .LVU1011
 447:src/console.c ****       {
 3636              		.loc 2 447 10 is_stmt 0 view .LVU1012
 3637 006a 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3638              		.loc 2 447 8 view .LVU1013
 3639 006c 9B05     		lsls	r3, r3, #22
 3640 006e 40F1BE80 		bpl	.L317
 447:src/console.c ****       {
 3641              		.loc 2 447 30 discriminator 1 view .LVU1014
 3642 0072 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3643              		.loc 2 447 27 discriminator 1 view .LVU1015
 3644 0074 5D07     		lsls	r5, r3, #29
 3645 0076 40F1BA80 		bpl	.L317
 449:src/console.c **** 	sys_sleep();
ARM GAS  /tmp/cccWRI8T.s 			page 99


 3646              		.loc 2 449 2 is_stmt 1 view .LVU1016
 3647 007a 2368     		ldr	r3, [r4]
 450:src/console.c ****       }
 3648              		.loc 2 450 2 is_stmt 0 view .LVU1017
 3649 007c A14A     		ldr	r2, .L415+36
 449:src/console.c **** 	sys_sleep();
 3650              		.loc 2 449 2 view .LVU1018
 3651 007e 23F00203 		bic	r3, r3, #2
 3652 0082 2360     		str	r3, [r4]
 450:src/console.c ****       }
 3653              		.loc 2 450 2 is_stmt 1 view .LVU1019
 3654 0084 9047     		blx	r2
 3655              	.LVL317:
 3656              	.L318:
 456:src/console.c ****       sys_sleep();
 457:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 458:src/console.c **** 	key_push (K_HEARTBEAT);
 459:src/console.c **** 	if (Pause > 0) Pause--;
 460:src/console.c ****       }
 461:src/console.c ****       sys_timer_disable(0); // stop timer
 462:src/console.c ****     }
 463:src/console.c ****     
 464:src/console.c ****     // Wakeup in off state or going to sleep
 465:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3657              		.loc 2 465 5 view .LVU1020
 3658              		.loc 2 465 9 is_stmt 0 view .LVU1021
 3659 0086 2368     		ldr	r3, [r4]
 3660              		.loc 2 465 8 view .LVU1022
 3661 0088 9805     		lsls	r0, r3, #22
 3662 008a 00F1D780 		bmi	.L324
 3663              	.L410:
 3664              		.loc 2 465 29 discriminator 1 view .LVU1023
 3665 008e 2368     		ldr	r3, [r4]
 3666              		.loc 2 465 26 discriminator 1 view .LVU1024
 3667 0090 5907     		lsls	r1, r3, #29
 3668 0092 00F1D380 		bmi	.L324
 466:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 467:src/console.c ****         // Going to off mode
 468:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 469:src/console.c ****         draw_power_off_image(1);
 470:src/console.c **** 
 471:src/console.c ****         LCD_power_off(0);
 472:src/console.c ****         SET_ST(STAT_SUSPENDED);
 473:src/console.c ****         SET_ST(STAT_OFF);
 474:src/console.c ****       }
 475:src/console.c ****       // Already in OFF -> just continue to sleep above
 476:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 477:src/console.c ****       // thus reaching the sleep()
 478:src/console.c ****     }
 479:src/console.c **** 
 480:src/console.c ****     // Well, we are woken-up
 481:src/console.c ****     SET_ST(STAT_RUNNING);
 3669              		.loc 2 481 5 is_stmt 1 view .LVU1025
 3670 0096 2368     		ldr	r3, [r4]
 3671 0098 43F00203 		orr	r3, r3, #2
 3672 009c 2360     		str	r3, [r4]
 482:src/console.c **** 
ARM GAS  /tmp/cccWRI8T.s 			page 100


 483:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 484:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3673              		.loc 2 484 5 view .LVU1026
 3674 009e 2368     		ldr	r3, [r4]
 3675 00a0 23F00403 		bic	r3, r3, #4
 3676 00a4 2360     		str	r3, [r4]
 485:src/console.c **** 
 486:src/console.c ****     // Get up from OFF state
 487:src/console.c ****     if ( ST(STAT_OFF) ) {
 3677              		.loc 2 487 5 view .LVU1027
 3678              		.loc 2 487 10 is_stmt 0 view .LVU1028
 3679 00a6 2368     		ldr	r3, [r4]
 3680              		.loc 2 487 8 view .LVU1029
 3681 00a8 DA06     		lsls	r2, r3, #27
 3682 00aa 0ED5     		bpl	.L329
 488:src/console.c ****       LCD_power_on();
 3683              		.loc 2 488 7 is_stmt 1 view .LVU1030
 3684 00ac 964B     		ldr	r3, .L415+40
 3685 00ae 9847     		blx	r3
 3686              	.LVL318:
 489:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3687              		.loc 2 489 7 view .LVU1031
 3688 00b0 964B     		ldr	r3, .L415+44
 3689 00b2 9847     		blx	r3
 3690              	.LVL319:
 490:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3691              		.loc 2 490 7 view .LVU1032
 3692 00b4 964B     		ldr	r3, .L415+48
 3693 00b6 9847     		blx	r3
 3694              	.LVL320:
 491:src/console.c **** 
 492:src/console.c ****       CLR_ST(STAT_OFF);
 3695              		.loc 2 492 7 view .LVU1033
 3696 00b8 2368     		ldr	r3, [r4]
 493:src/console.c **** 
 494:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3697              		.loc 2 494 13 is_stmt 0 view .LVU1034
 3698 00ba 964A     		ldr	r2, .L415+52
 492:src/console.c **** 
 3699              		.loc 2 492 7 view .LVU1035
 3700 00bc 23F01003 		bic	r3, r3, #16
 3701 00c0 2360     		str	r3, [r4]
 3702              		.loc 2 494 7 is_stmt 1 view .LVU1036
 3703              		.loc 2 494 13 is_stmt 0 view .LVU1037
 3704 00c2 9047     		blx	r2
 3705              	.LVL321:
 3706              		.loc 2 494 10 view .LVU1038
 3707 00c4 08B9     		cbnz	r0, .L329
 495:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3708              		.loc 2 495 9 is_stmt 1 view .LVU1039
 3709 00c6 944B     		ldr	r3, .L415+56
 3710 00c8 9847     		blx	r3
 3711              	.LVL322:
 3712              	.L329:
 496:src/console.c ****     }
 497:src/console.c **** 
 498:src/console.c ****     // Key is ready -> clear auto off timer
ARM GAS  /tmp/cccWRI8T.s 			page 101


 499:src/console.c ****     //    if ( !key_empty() )
 500:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 501:src/console.c ****     // Fetch the key
 502:src/console.c ****     //  < 0 -> No key event
 503:src/console.c ****     //  > 0 -> Key pressed
 504:src/console.c ****     // == 0 -> Key released
 505:src/console.c ****     c = key_pop();
 3713              		.loc 2 505 5 view .LVU1040
 3714              		.loc 2 505 9 is_stmt 0 view .LVU1041
 3715 00ca 944B     		ldr	r3, .L415+60
 3716 00cc 9847     		blx	r3
 3717              	.LVL323:
 506:src/console.c **** #ifdef INCLUDE_STOPWATCH
 507:src/console.c ****     if ( KeyCallback != NULL ) {
 3718              		.loc 2 507 22 view .LVU1042
 3719 00ce 3368     		ldr	r3, [r6]
 505:src/console.c **** #ifdef INCLUDE_STOPWATCH
 3720              		.loc 2 505 9 view .LVU1043
 3721 00d0 0546     		mov	r5, r0
 3722              	.LVL324:
 3723              		.loc 2 507 5 is_stmt 1 view .LVU1044
 3724              		.loc 2 507 8 is_stmt 0 view .LVU1045
 3725 00d2 002B     		cmp	r3, #0
 3726 00d4 00F04881 		beq	.L331
 508:src/console.c ****       c = (*KeyCallback)( c );
 3727              		.loc 2 508 7 is_stmt 1 view .LVU1046
 3728              		.loc 2 508 12 is_stmt 0 view .LVU1047
 3729 00d8 9847     		blx	r3
 3730              	.LVL325:
 3731              		.loc 2 508 12 view .LVU1048
 3732 00da 0546     		mov	r5, r0
 3733              	.LVL326:
 3734              	.L332:
 509:src/console.c ****     }
 510:src/console.c ****     else if ( StopWatchRunning && ( Ticker % STOPWATCH_BLINK ) == 0 ) {
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 512:src/console.c ****       finish_LEQ();
 513:src/console.c ****     }
 514:src/console.c **** #endif
 515:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 3735              		.loc 2 515 5 is_stmt 1 view .LVU1049
 3736              		.loc 2 515 8 is_stmt 0 view .LVU1050
 3737 00dc 622D     		cmp	r5, #98
 3738 00de 00F0C780 		beq	.L333
 3739              		.loc 2 515 29 discriminator 1 view .LVU1051
 3740 00e2 002D     		cmp	r5, #0
 3741 00e4 40F3C180 		ble	.L334
 516:src/console.c ****       reset_auto_off();
 3742              		.loc 2 516 7 is_stmt 1 view .LVU1052
 3743 00e8 8D4B     		ldr	r3, .L415+64
 3744 00ea 9847     		blx	r3
 3745              	.LVL327:
 517:src/console.c ****       start_key_timer();
 3746              		.loc 2 517 7 view .LVU1053
 3747              	.LBB159:
 3748              	.LBI159:
 252:src/console.c ****     start_ticks = get_rtc_ticks();
ARM GAS  /tmp/cccWRI8T.s 			page 102


 3749              		.loc 2 252 6 view .LVU1054
 3750              	.LBB160:
 253:src/console.c **** }
 3751              		.loc 2 253 5 view .LVU1055
 253:src/console.c **** }
 3752              		.loc 2 253 19 is_stmt 0 view .LVU1056
 3753 00ec 8D4B     		ldr	r3, .L415+68
 3754 00ee 9847     		blx	r3
 3755              	.LVL328:
 253:src/console.c **** }
 3756              		.loc 2 253 17 view .LVU1057
 3757 00f0 8D4B     		ldr	r3, .L415+72
 3758              	.LBE160:
 3759              	.LBE159:
 3760              	.LBB162:
 3761              	.LBB163:
  64:src/console.c **** 
 3762              		.loc 2 64 6 view .LVU1058
 3763 00f2 632D     		cmp	r5, #99
 3764              	.LBE163:
 3765              	.LBE162:
 3766              	.LBB173:
 3767              	.LBB161:
 253:src/console.c **** }
 3768              		.loc 2 253 17 view .LVU1059
 3769 00f4 1860     		str	r0, [r3]
 3770              	.LBE161:
 3771              	.LBE173:
 518:src/console.c ****     }
 519:src/console.c ****     if (c >= 0) {
 3772              		.loc 2 519 5 is_stmt 1 view .LVU1060
 520:src/console.c ****       remapped = remap(c);
 3773              		.loc 2 520 7 view .LVU1061
 3774              	.LVL329:
 3775              	.LBB174:
 3776              	.LBI162:
  56:src/console.c **** 
 3777              		.loc 2 56 22 view .LVU1062
 3778              	.LBB165:
  58:src/console.c **** 
 3779              		.loc 2 58 3 view .LVU1063
 3780              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3781              		.loc 3 1 1 view .LVU1064
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
ARM GAS  /tmp/cccWRI8T.s 			page 103


  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3782              		.loc 3 59 3 view .LVU1065
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX}, // Complex
  70:src/keytran.c ****     {K54, 1}, // %
ARM GAS  /tmp/cccWRI8T.s 			page 104


  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU,  M_Disp}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU,  M_Clear}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU,  M_Solve}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU,  M_Stats}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU,  M_Base}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU,  M_Flags}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU,  M_Prob}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  96:src/keytran.c ****     {K_SETMENU,  M_User}, // select user menu
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU,  M_Setup1}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU,  M_Last}, // last menu
 114:src/keytran.c ****     {K_SETMENU,  M_Misc}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3783              		.loc 3 117 3 view .LVU1066
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
ARM GAS  /tmp/cccWRI8T.s 			page 105


 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU,  M_Swap}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     //    {K_MULTI, SETUMEN}, // Set up user menu
 155:src/keytran.c ****     {K_SETMENU, M_Usermenu}, //User menu create
 156:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 157:src/keytran.c ****     {K_NOP, 0}, // no function
 158:src/keytran.c ****     // Last row of DM42 33--37
 159:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 160:src/keytran.c ****     {K_SETMENU,  M_Setup2}, // SETUP2 menu
 161:src/keytran.c ****     {K_NOP, 0}, // no function
 162:src/keytran.c ****     {K_SETMENU,  M_Program}, // P.FCN menu
 163:src/keytran.c ****     {K50, 3}, // Status
 164:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****     {K_NOP, 0},
 174:src/keytran.c ****   };
 175:src/keytran.c **** 
 176:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3784              		.loc 3 176 1 view .LVU1067
 177:src/keytran.c ****     {K_RELEASE, -1},
 178:src/keytran.c ****     // Top row of DM42 1--6
 179:src/keytran.c ****     {K00, -1},
 180:src/keytran.c ****     {K01, -1},
 181:src/keytran.c ****     {K02, -1},
 182:src/keytran.c ****     {K03, -1},
ARM GAS  /tmp/cccWRI8T.s 			page 106


 183:src/keytran.c ****     {K04, -1},
 184:src/keytran.c ****     {K05, -1},
 185:src/keytran.c ****     // Next row of DM42 7--12
 186:src/keytran.c ****     {K10, -1},
 187:src/keytran.c ****     {K11, -1},
 188:src/keytran.c ****     {K12, -1},
 189:src/keytran.c ****     {K13, -1},
 190:src/keytran.c ****     {K14, -1},
 191:src/keytran.c ****     {K15, -1},
 192:src/keytran.c ****     // Third row of DM42 13--17
 193:src/keytran.c ****     {K20, -1},
 194:src/keytran.c ****     {K21, -1},
 195:src/keytran.c ****     {K22, -1},
 196:src/keytran.c ****     {K23, -1},
 197:src/keytran.c ****     {K24, -1},
 198:src/keytran.c ****     // Fourth row of DM42 18--22
 199:src/keytran.c ****     {K30, -1},
 200:src/keytran.c ****     {K31, -1},
 201:src/keytran.c ****     {K32, -1},
 202:src/keytran.c ****     {K33, -1},
 203:src/keytran.c ****     {K34, -1},
 204:src/keytran.c ****     // Fifth row of DM42 23--27
 205:src/keytran.c ****     {K40, -1},
 206:src/keytran.c ****     {K41, -1},
 207:src/keytran.c ****     {K42, -1},
 208:src/keytran.c ****     {K43, -1},
 209:src/keytran.c ****     {K44, -1},
 210:src/keytran.c ****     // Sixth row of DM42 28--32
 211:src/keytran.c ****     {K50, -1},
 212:src/keytran.c ****     {K51, -1},
 213:src/keytran.c ****     {K52, -1},
 214:src/keytran.c ****     {K53, -1},
 215:src/keytran.c ****     {K54, -1},
 216:src/keytran.c ****     // Last row of DM42 33--37
 217:src/keytran.c ****     {K60, -1},
 218:src/keytran.c ****     {K61, -1},
 219:src/keytran.c ****     {K62, -1},
 220:src/keytran.c ****     {K63, -1},
 221:src/keytran.c ****     {K64, -1},
 222:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 223:src/keytran.c ****     {K_NOP, -1},
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_NOP, -1},
 227:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 228:src/keytran.c ****     {K_CMPLX, -1},
 229:src/keytran.c ****     {K_NOP, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c ****     {K_NOP, -1},
 232:src/keytran.c **** };
 233:src/keytran.c **** 
 234:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3785              		.loc 3 234 1 view .LVU1068
  62:src/console.c **** 
 3786              		.loc 2 62 3 view .LVU1069
  64:src/console.c **** 
 3787              		.loc 2 64 3 view .LVU1070
ARM GAS  /tmp/cccWRI8T.s 			page 107


  64:src/console.c **** 
 3788              		.loc 2 64 6 is_stmt 0 view .LVU1071
 3789 00f6 00F08181 		beq	.L398
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3790              		.loc 2 66 3 is_stmt 1 view .LVU1072
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3791              		.loc 2 66 6 is_stmt 0 view .LVU1073
 3792 00fa 2C2D     		cmp	r5, #44
 3793 00fc 00F04F81 		beq	.L337
 3794              	.LVL330:
 3795              	.L371:
  71:src/console.c ****     return mapping_running[c];
 3796              		.loc 2 71 3 is_stmt 1 view .LVU1074
  71:src/console.c ****     return mapping_running[c];
 3797              		.loc 2 71 15 is_stmt 0 view .LVU1075
 3798 0100 8A4A     		ldr	r2, .L415+76
 3799 0102 8B4B     		ldr	r3, .L415+80
 3800 0104 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3801 0108 1968     		ldr	r1, [r3]
  71:src/console.c ****     return mapping_running[c];
 3802              		.loc 2 71 6 view .LVU1076
 3803 010a 59EA0109 		orrs	r9, r9, r1
 3804 010e 40F06881 		bne	.L399
  75:src/console.c ****   
 3805              		.loc 2 75 3 is_stmt 1 view .LVU1077
  75:src/console.c ****   
 3806              		.loc 2 75 22 is_stmt 0 view .LVU1078
 3807 0112 04A8     		add	r0, sp, #16
 3808 0114 FFF7FEFF 		bl	get_current_menu_ref
 3809              	.LVL331:
  77:src/console.c ****   case KEY_F1:
 3810              		.loc 2 77 3 is_stmt 1 view .LVU1079
 3811 0118 A5F12603 		sub	r3, r5, #38
 3812 011c 052B     		cmp	r3, #5
 3813 011e 00F27781 		bhi	.L339
 3814 0122 DFE813F0 		tbh	[pc, r3, lsl #1]
 3815              	.L341:
 3816 0126 7D01     		.2byte	(.L346-.L341)/2
 3817 0128 0B00     		.2byte	(.L345-.L341)/2
 3818 012a 1500     		.2byte	(.L344-.L341)/2
 3819 012c 1F00     		.2byte	(.L343-.L341)/2
 3820 012e 2900     		.2byte	(.L342-.L341)/2
 3821 0130 3300     		.2byte	(.L340-.L341)/2
 3822              		.p2align 1
 3823              	.L347:
  80:src/console.c ****   case KEY_F2:
 3824              		.loc 2 80 5 view .LVU1080
  80:src/console.c ****   case KEY_F2:
 3825              		.loc 2 80 9 is_stmt 0 view .LVU1081
 3826 0132 FFF7FEFF 		bl	cur_shift
 3827              	.LVL332:
  80:src/console.c ****   case KEY_F2:
 3828              		.loc 2 80 8 view .LVU1082
 3829 0136 0128     		cmp	r0, #1
 3830 0138 00F00882 		beq	.L400
 3831              	.L345:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
ARM GAS  /tmp/cccWRI8T.s 			page 108


 3832              		.loc 2 82 5 is_stmt 1 view .LVU1083
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3833              		.loc 2 82 9 is_stmt 0 view .LVU1084
 3834 013c FFF7FEFF 		bl	cur_shift
 3835              	.LVL333:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3836              		.loc 2 82 8 view .LVU1085
 3837 0140 0028     		cmp	r0, #0
 3838 0142 00F09A81 		beq	.L401
  83:src/console.c ****   case KEY_F3:
 3839              		.loc 2 83 5 is_stmt 1 view .LVU1086
  83:src/console.c ****   case KEY_F3:
 3840              		.loc 2 83 9 is_stmt 0 view .LVU1087
 3841 0146 FFF7FEFF 		bl	cur_shift
 3842              	.LVL334:
  83:src/console.c ****   case KEY_F3:
 3843              		.loc 2 83 8 view .LVU1088
 3844 014a 0128     		cmp	r0, #1
 3845 014c 00F0DF81 		beq	.L402
 3846              	.L344:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3847              		.loc 2 85 5 is_stmt 1 view .LVU1089
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3848              		.loc 2 85 9 is_stmt 0 view .LVU1090
 3849 0150 FFF7FEFF 		bl	cur_shift
 3850              	.LVL335:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3851              		.loc 2 85 8 view .LVU1091
 3852 0154 0028     		cmp	r0, #0
 3853 0156 00F08681 		beq	.L403
  86:src/console.c ****   case KEY_F4:
 3854              		.loc 2 86 5 is_stmt 1 view .LVU1092
  86:src/console.c ****   case KEY_F4:
 3855              		.loc 2 86 9 is_stmt 0 view .LVU1093
 3856 015a FFF7FEFF 		bl	cur_shift
 3857              	.LVL336:
  86:src/console.c ****   case KEY_F4:
 3858              		.loc 2 86 8 view .LVU1094
 3859 015e 0128     		cmp	r0, #1
 3860 0160 00F0CB81 		beq	.L404
 3861              	.L343:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3862              		.loc 2 88 5 is_stmt 1 view .LVU1095
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3863              		.loc 2 88 9 is_stmt 0 view .LVU1096
 3864 0164 FFF7FEFF 		bl	cur_shift
 3865              	.LVL337:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3866              		.loc 2 88 8 view .LVU1097
 3867 0168 0028     		cmp	r0, #0
 3868 016a 00F07281 		beq	.L405
  89:src/console.c ****   case KEY_F5:
 3869              		.loc 2 89 5 is_stmt 1 view .LVU1098
  89:src/console.c ****   case KEY_F5:
 3870              		.loc 2 89 9 is_stmt 0 view .LVU1099
 3871 016e FFF7FEFF 		bl	cur_shift
 3872              	.LVL338:
ARM GAS  /tmp/cccWRI8T.s 			page 109


  89:src/console.c ****   case KEY_F5:
 3873              		.loc 2 89 8 view .LVU1100
 3874 0172 0128     		cmp	r0, #1
 3875 0174 00F0AD81 		beq	.L406
 3876              	.L342:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3877              		.loc 2 91 5 is_stmt 1 view .LVU1101
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3878              		.loc 2 91 9 is_stmt 0 view .LVU1102
 3879 0178 FFF7FEFF 		bl	cur_shift
 3880              	.LVL339:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3881              		.loc 2 91 8 view .LVU1103
 3882 017c 0028     		cmp	r0, #0
 3883 017e 00F05E81 		beq	.L407
  92:src/console.c ****   case KEY_F6:
 3884              		.loc 2 92 5 is_stmt 1 view .LVU1104
  92:src/console.c ****   case KEY_F6:
 3885              		.loc 2 92 9 is_stmt 0 view .LVU1105
 3886 0182 FFF7FEFF 		bl	cur_shift
 3887              	.LVL340:
  92:src/console.c ****   case KEY_F6:
 3888              		.loc 2 92 8 view .LVU1106
 3889 0186 0128     		cmp	r0, #1
 3890 0188 00F0AD81 		beq	.L408
 3891              	.L340:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3892              		.loc 2 94 5 is_stmt 1 view .LVU1107
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3893              		.loc 2 94 9 is_stmt 0 view .LVU1108
 3894 018c FFF7FEFF 		bl	cur_shift
 3895              	.LVL341:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3896              		.loc 2 94 8 view .LVU1109
 3897 0190 0028     		cmp	r0, #0
 3898 0192 40F03981 		bne	.L352
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3899              		.loc 2 94 33 is_stmt 1 view .LVU1110
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3900              		.loc 2 94 51 is_stmt 0 view .LVU1111
 3901 0196 DDE93001 		ldrd	r0, r1, [sp, #192]
 3902 019a 9DF8C050 		ldrb	r5, [sp, #192]	@ zero_extendqisi2
 3903              	.LVL342:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3904              		.loc 2 94 51 view .LVU1112
 3905 019e 0DF1080A 		add	r10, sp, #8
 3906              	.LBE165:
 3907              	.LBE174:
 521:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3908              		.loc 2 521 10 view .LVU1113
 3909 01a2 2F2D     		cmp	r5, #47
 3910              	.LBB175:
 3911              	.LBB166:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3912              		.loc 2 94 51 view .LVU1114
 3913 01a4 8AE80300 		stm	r10, {r0, r1}
 3914 01a8 8946     		mov	r9, r1
ARM GAS  /tmp/cccWRI8T.s 			page 110


 3915              	.LVL343:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3916              		.loc 2 94 51 view .LVU1115
 3917              	.LBE166:
 3918              	.LBE175:
 3919              		.loc 2 521 7 is_stmt 1 view .LVU1116
 3920              		.loc 2 521 10 is_stmt 0 view .LVU1117
 3921 01aa 6CD1     		bne	.L363
 3922              	.LVL344:
 3923              	.L411:
 522:src/console.c **** 	set_menu ( remapped.shift );
 3924              		.loc 2 522 2 is_stmt 1 view .LVU1118
 3925              	.LBB176:
 3926              	.LBB177:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3927              		.loc 1 109 13 is_stmt 0 view .LVU1119
 3928 01ac 614A     		ldr	r2, .L415+84
 3929 01ae 92F90030 		ldrsb	r3, [r2]
 3930              	.LBE177:
 3931              	.LBE176:
 3932              		.loc 2 522 2 view .LVU1120
 3933 01b2 4FFA89F1 		sxtb	r1, r9
 3934              	.LVL345:
 3935              	.LBB180:
 3936              	.LBI176:
 108:src/menu.c    ****   menu_name m = current_menu;
 3937              		.loc 1 108 6 is_stmt 1 view .LVU1121
 3938              	.LBB178:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3939              		.loc 1 109 3 view .LVU1122
 110:src/menu.c    ****     current_menu = default_menu;
 3940              		.loc 1 110 3 view .LVU1123
 110:src/menu.c    ****     current_menu = default_menu;
 3941              		.loc 1 110 6 is_stmt 0 view .LVU1124
 3942 01b6 9942     		cmp	r1, r3
 3943 01b8 00F02281 		beq	.L409
 113:src/menu.c    ****     current_menu = last_menu;
 3944              		.loc 1 113 8 is_stmt 1 view .LVU1125
 113:src/menu.c    ****     current_menu = last_menu;
 3945              		.loc 1 113 11 is_stmt 0 view .LVU1126
 3946 01bc 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 3947              		.loc 1 114 5 is_stmt 1 view .LVU1127
 114:src/menu.c    ****   }
 3948              		.loc 1 114 18 is_stmt 0 view .LVU1128
 3949 01be 04BF     		itt	eq
 3950 01c0 5D49     		ldreq	r1, .L415+88
 3951              	.LVL346:
 114:src/menu.c    ****   }
 3952              		.loc 1 114 18 view .LVU1129
 3953 01c2 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 3954              		.loc 1 117 5 is_stmt 1 view .LVU1130
 117:src/menu.c    ****   }
 3955              		.loc 1 117 18 is_stmt 0 view .LVU1131
 3956 01c4 1170     		strb	r1, [r2]
 3957              	.LVL347:
ARM GAS  /tmp/cccWRI8T.s 			page 111


 3958              	.L365:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3959              		.loc 1 119 3 is_stmt 1 view .LVU1132
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3960              		.loc 1 119 6 is_stmt 0 view .LVU1133
 3961 01c6 092B     		cmp	r3, #9
 3962 01c8 03D0     		beq	.L367
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3963              		.loc 1 119 23 view .LVU1134
 3964 01ca 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3965              		.loc 1 119 43 is_stmt 1 view .LVU1135
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3966              		.loc 1 119 53 is_stmt 0 view .LVU1136
 3967 01cc 1CBF     		itt	ne
 3968 01ce 5A4A     		ldrne	r2, .L415+88
 3969 01d0 1370     		strbne	r3, [r2]
 3970              	.L367:
 3971              	.LVL348:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3972              		.loc 1 119 53 view .LVU1137
 3973              	.LBE178:
 3974              	.LBE180:
 523:src/console.c **** 	display_current_menu ();
 3975              		.loc 2 523 2 is_stmt 1 view .LVU1138
 3976 01d2 FFF7FEFF 		bl	display_current_menu
 3977              	.LVL349:
 524:src/console.c **** 	reset_shift();
 3978              		.loc 2 524 2 view .LVU1139
 3979 01d6 FFF7FEFF 		bl	reset_shift
 3980              	.LVL350:
 525:src/console.c **** 	remapped = no_key;
 3981              		.loc 2 525 2 view .LVU1140
 3982              		.loc 2 525 11 is_stmt 0 view .LVU1141
 3983 01da 584B     		ldr	r3, .L415+92
 3984 01dc 93E80300 		ldm	r3, {r0, r1}
 3985 01e0 0DF1080A 		add	r10, sp, #8
 3986 01e4 8AE80300 		stm	r10, {r0, r1}
 3987 01e8 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3988              	.LVL351:
 3989              		.loc 2 525 11 view .LVU1142
 3990 01ea 8946     		mov	r9, r1
 3991              	.LVL352:
 3992              		.loc 2 525 11 view .LVU1143
 3993 01ec 4BE0     		b	.L363
 3994              	.LVL353:
 3995              	.L317:
 452:src/console.c ****     {
 3996              		.loc 2 452 10 is_stmt 1 view .LVU1144
 452:src/console.c ****     {
 3997              		.loc 2 452 15 is_stmt 0 view .LVU1145
 3998 01ee 2568     		ldr	r5, [r4]
 452:src/console.c ****     {
 3999              		.loc 2 452 13 view .LVU1146
 4000 01f0 15F40075 		ands	r5, r5, #512
 4001 01f4 7FF447AF 		bne	.L318
 452:src/console.c ****     {
ARM GAS  /tmp/cccWRI8T.s 			page 112


 4002              		.loc 2 452 35 discriminator 1 view .LVU1147
 4003 01f8 B847     		blx	r7
 4004              	.LVL354:
 452:src/console.c ****     {
 4005              		.loc 2 452 32 discriminator 1 view .LVU1148
 4006 01fa 0028     		cmp	r0, #0
 4007 01fc 3FF443AF 		beq	.L318
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 4008              		.loc 2 454 7 is_stmt 1 view .LVU1149
 4009 0200 2368     		ldr	r3, [r4]
 4010 0202 23F00203 		bic	r3, r3, #2
 455:src/console.c ****       sys_sleep();
 4011              		.loc 2 455 7 is_stmt 0 view .LVU1150
 4012 0206 2846     		mov	r0, r5
 4013 0208 6421     		movs	r1, #100
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 4014              		.loc 2 454 7 view .LVU1151
 4015 020a 2360     		str	r3, [r4]
 455:src/console.c ****       sys_sleep();
 4016              		.loc 2 455 7 is_stmt 1 view .LVU1152
 4017 020c C047     		blx	r8
 4018              	.LVL355:
 456:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 4019              		.loc 2 456 7 view .LVU1153
 4020 020e 3D4B     		ldr	r3, .L415+36
 4021 0210 9847     		blx	r3
 4022              	.LVL356:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4023              		.loc 2 457 7 view .LVU1154
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4024              		.loc 2 457 11 is_stmt 0 view .LVU1155
 4025 0212 4B4B     		ldr	r3, .L415+96
 4026 0214 2846     		mov	r0, r5
 4027 0216 9847     		blx	r3
 4028              	.LVL357:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4029              		.loc 2 457 10 view .LVU1156
 4030 0218 48B1     		cbz	r0, .L322
 458:src/console.c **** 	if (Pause > 0) Pause--;
 4031              		.loc 2 458 2 is_stmt 1 view .LVU1157
 4032 021a 4A4B     		ldr	r3, .L415+100
 4033 021c 6220     		movs	r0, #98
 4034 021e 9847     		blx	r3
 4035              	.LVL358:
 459:src/console.c ****       }
 4036              		.loc 2 459 2 view .LVU1158
 459:src/console.c ****       }
 4037              		.loc 2 459 12 is_stmt 0 view .LVU1159
 4038 0220 424B     		ldr	r3, .L415+76
 4039 0222 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 459:src/console.c ****       }
 4040              		.loc 2 459 5 view .LVU1160
 4041 0224 1AB1     		cbz	r2, .L322
 459:src/console.c ****       }
 4042              		.loc 2 459 17 is_stmt 1 discriminator 1 view .LVU1161
 459:src/console.c ****       }
 4043              		.loc 2 459 22 is_stmt 0 discriminator 1 view .LVU1162
ARM GAS  /tmp/cccWRI8T.s 			page 113


 4044 0226 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4045 0228 013A     		subs	r2, r2, #1
 4046 022a D2B2     		uxtb	r2, r2
 4047 022c 1A70     		strb	r2, [r3]
 4048              	.L322:
 461:src/console.c ****     }
 4049              		.loc 2 461 7 is_stmt 1 view .LVU1163
 4050 022e 464B     		ldr	r3, .L415+104
 4051 0230 0020     		movs	r0, #0
 4052 0232 9847     		blx	r3
 4053              	.LVL359:
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4054              		.loc 2 465 5 view .LVU1164
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4055              		.loc 2 465 9 is_stmt 0 view .LVU1165
 4056 0234 2368     		ldr	r3, [r4]
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4057              		.loc 2 465 8 view .LVU1166
 4058 0236 9805     		lsls	r0, r3, #22
 4059 0238 7FF529AF 		bpl	.L410
 4060              	.L324:
 466:src/console.c ****         // Going to off mode
 4061              		.loc 2 466 7 is_stmt 1 view .LVU1167
 466:src/console.c ****         // Going to off mode
 4062              		.loc 2 466 12 is_stmt 0 view .LVU1168
 4063 023c 2568     		ldr	r5, [r4]
 466:src/console.c ****         // Going to off mode
 4064              		.loc 2 466 10 view .LVU1169
 4065 023e 15F00405 		ands	r5, r5, #4
 4066 0242 7FF412AF 		bne	.L316
 468:src/console.c ****         draw_power_off_image(1);
 4067              		.loc 2 468 9 is_stmt 1 view .LVU1170
 4068 0246 414B     		ldr	r3, .L415+108
 4069 0248 2846     		mov	r0, r5
 4070 024a 9847     		blx	r3
 4071              	.LVL360:
 469:src/console.c **** 
 4072              		.loc 2 469 9 view .LVU1171
 4073 024c 404B     		ldr	r3, .L415+112
 4074 024e 0120     		movs	r0, #1
 4075 0250 9847     		blx	r3
 4076              	.LVL361:
 471:src/console.c ****         SET_ST(STAT_SUSPENDED);
 4077              		.loc 2 471 9 view .LVU1172
 4078 0252 404B     		ldr	r3, .L415+116
 4079 0254 2846     		mov	r0, r5
 4080 0256 9847     		blx	r3
 4081              	.LVL362:
 472:src/console.c ****         SET_ST(STAT_OFF);
 4082              		.loc 2 472 9 view .LVU1173
 4083 0258 2368     		ldr	r3, [r4]
 4084 025a 43F00403 		orr	r3, r3, #4
 4085 025e 2360     		str	r3, [r4]
 473:src/console.c ****       }
 4086              		.loc 2 473 9 view .LVU1174
 4087 0260 2368     		ldr	r3, [r4]
 4088 0262 43F01003 		orr	r3, r3, #16
ARM GAS  /tmp/cccWRI8T.s 			page 114


 4089 0266 2360     		str	r3, [r4]
 4090 0268 FFE6     		b	.L316
 4091              	.LVL363:
 4092              	.L334:
 519:src/console.c ****       remapped = remap(c);
 4093              		.loc 2 519 5 view .LVU1175
 519:src/console.c ****       remapped = remap(c);
 4094              		.loc 2 519 8 is_stmt 0 view .LVU1176
 4095 026a 7FF4FEAE 		bne	.L316
 4096 026e 47E7     		b	.L371
 4097              	.L333:
 519:src/console.c ****       remapped = remap(c);
 4098              		.loc 2 519 5 is_stmt 1 view .LVU1177
 520:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 4099              		.loc 2 520 7 view .LVU1178
 4100              	.LVL364:
 4101              	.LBB181:
  56:src/console.c **** 
 4102              		.loc 2 56 22 view .LVU1179
 4103              	.LBB167:
  58:src/console.c **** 
 4104              		.loc 2 58 3 view .LVU1180
   1:src/keytran.c ****     {K_RELEASE, -1},
 4105              		.loc 3 1 1 view .LVU1181
  59:src/keytran.c ****     {K_RELEASE, -1},
 4106              		.loc 3 59 3 view .LVU1182
 117:src/keytran.c ****     {K_RELEASE, -1},
 4107              		.loc 3 117 3 view .LVU1183
 176:src/keytran.c ****     {K_RELEASE, -1},
 4108              		.loc 3 176 1 view .LVU1184
 4109              		.loc 3 234 1 view .LVU1185
  62:src/console.c **** 
 4110              		.loc 2 62 3 view .LVU1186
  62:src/console.c **** 
 4111              		.loc 2 62 23 view .LVU1187
  62:src/console.c **** 
 4112              		.loc 2 62 30 is_stmt 0 view .LVU1188
 4113 0270 394B     		ldr	r3, .L415+120
 4114              	.LVL365:
 4115              	.L396:
  62:src/console.c **** 
 4116              		.loc 2 62 30 view .LVU1189
 4117 0272 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4118              	.LVL366:
  62:src/console.c **** 
 4119              		.loc 2 62 30 view .LVU1190
 4120 0274 93E80300 		ldm	r3, {r0, r1}
 4121 0278 0DF1080A 		add	r10, sp, #8
 4122 027c 8AE80300 		stm	r10, {r0, r1}
 4123 0280 8946     		mov	r9, r1
 4124              	.LVL367:
 4125              	.L336:
  62:src/console.c **** 
 4126              		.loc 2 62 30 view .LVU1191
 4127              	.LBE167:
 4128              	.LBE181:
 521:src/console.c **** 	set_menu ( remapped.shift );
ARM GAS  /tmp/cccWRI8T.s 			page 115


 4129              		.loc 2 521 7 is_stmt 1 view .LVU1192
 521:src/console.c **** 	set_menu ( remapped.shift );
 4130              		.loc 2 521 10 is_stmt 0 view .LVU1193
 4131 0282 2F2D     		cmp	r5, #47
 4132 0284 92D0     		beq	.L411
 4133              	.L363:
 526:src/console.c ****       }
 527:src/console.c ****       if (remapped.key_34s == K_SYS) {
 4134              		.loc 2 527 7 is_stmt 1 view .LVU1194
 4135              		.loc 2 527 10 is_stmt 0 view .LVU1195
 4136 0286 302D     		cmp	r5, #48
 4137 0288 19D1     		bne	.L368
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4138              		.loc 2 528 2 is_stmt 1 view .LVU1196
 4139 028a 2368     		ldr	r3, [r4]
 529:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 4140              		.loc 2 529 2 is_stmt 0 view .LVU1197
 4141 028c 334D     		ldr	r5, .L415+124
 4142              	.LVL368:
 4143              		.loc 2 529 2 view .LVU1198
 4144 028e 3448     		ldr	r0, .L415+128
 4145 0290 0022     		movs	r2, #0
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4146              		.loc 2 528 2 view .LVU1199
 4147 0292 43F04003 		orr	r3, r3, #64
 4148              		.loc 2 529 2 view .LVU1200
 4149 0296 1146     		mov	r1, r2
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4150              		.loc 2 528 2 view .LVU1201
 4151 0298 2360     		str	r3, [r4]
 4152              		.loc 2 529 2 is_stmt 1 view .LVU1202
 4153 029a A847     		blx	r5
 4154              	.LVL369:
 530:src/console.c **** 	CLR_ST(STAT_MENU);
 4155              		.loc 2 530 2 view .LVU1203
 4156 029c 2368     		ldr	r3, [r4]
 4157 029e 23F04003 		bic	r3, r3, #64
 4158 02a2 2360     		str	r3, [r4]
 531:src/console.c **** 	reset_shift();
 4159              		.loc 2 531 2 view .LVU1204
 4160 02a4 FFF7FEFF 		bl	reset_shift
 4161              	.LVL370:
 532:src/console.c **** 	remapped =  no_key;
 4162              		.loc 2 532 2 view .LVU1205
 4163              		.loc 2 532 11 is_stmt 0 view .LVU1206
 4164 02a8 244B     		ldr	r3, .L415+92
 4165 02aa 93E80300 		ldm	r3, {r0, r1}
 4166 02ae 0DF1080A 		add	r10, sp, #8
 4167 02b2 8AE80300 		stm	r10, {r0, r1}
 4168 02b6 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4169              	.LVL371:
 4170              		.loc 2 532 11 view .LVU1207
 4171 02b8 8946     		mov	r9, r1
 4172              	.LVL372:
 533:src/console.c **** 	display_current_menu();
 4173              		.loc 2 533 2 is_stmt 1 view .LVU1208
 4174 02ba FFF7FEFF 		bl	display_current_menu
ARM GAS  /tmp/cccWRI8T.s 			page 116


 4175              	.LVL373:
 4176              	.L368:
 534:src/console.c ****       }
 535:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 4177              		.loc 2 535 7 view .LVU1209
 4178              		.loc 2 535 10 is_stmt 0 view .LVU1210
 4179 02be 312D     		cmp	r5, #49
 4180 02c0 6FD0     		beq	.L372
 536:src/console.c **** 	remapped = do_multi (remapped);
 537:src/console.c **** 	display_current_menu();
 538:src/console.c ****       }
 539:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 4181              		.loc 2 539 7 is_stmt 1 view .LVU1211
 4182              		.loc 2 539 10 is_stmt 0 view .LVU1212
 4183 02c2 322D     		cmp	r5, #50
 4184 02c4 00F08780 		beq	.L370
 4185              	.LVL374:
 4186              	.L397:
 4187              		.loc 2 539 10 view .LVU1213
 4188 02c8 0DF1080A 		add	r10, sp, #8
 4189              	.L359:
 4190              	.LVL375:
 540:src/console.c ****       process_keycode_with_shift(remapped);
 4191              		.loc 2 540 7 is_stmt 1 view .LVU1214
 4192              		.loc 2 540 7 is_stmt 0 view .LVU1215
 4193 02cc 8DF80850 		strb	r5, [sp, #8]
 4194 02d0 CDF80C90 		str	r9, [sp, #12]
 4195 02d4 9AE80300 		ldm	r10, {r0, r1}
 4196 02d8 FFF7FEFF 		bl	process_keycode_with_shift
 4197              	.LVL376:
 4198 02dc C5E6     		b	.L316
 4199              	.L416:
 4200 02de 00BF     		.align	2
 4201              	.L415:
 4202 02e0 00000000 		.word	StateWhileOn
 4203 02e4 00000000 		.word	DispMsg
 4204 02e8 00200010 		.word	268443648
 4205 02ec 00000000 		.word	KeyCallback
 4206 02f0 7D030008 		.word	134218621
 4207 02f4 00000000 		.word	run_menu_item
 4208 02f8 00000000 		.word	menu_line_str
 4209 02fc 31020008 		.word	134218289
 4210 0300 00000000 		.word	JustDisplayed
 4211 0304 19040008 		.word	134218777
 4212 0308 19020008 		.word	134218265
 4213 030c 91030008 		.word	134218641
 4214 0310 E5020008 		.word	134218469
 4215 0314 59020008 		.word	134218329
 4216 0318 35020008 		.word	134218293
 4217 031c 89030008 		.word	134218633
 4218 0320 B9030008 		.word	134218681
 4219 0324 B9040008 		.word	134218937
 4220 0328 00000000 		.word	.LANCHOR8
 4221 032c 00000000 		.word	Pause
 4222 0330 00000000 		.word	Running
 4223 0334 00000000 		.word	.LANCHOR1
 4224 0338 00000000 		.word	.LANCHOR3
ARM GAS  /tmp/cccWRI8T.s 			page 117


 4225 033c 00000000 		.word	.LANCHOR10
 4226 0340 01040008 		.word	134218753
 4227 0344 81030008 		.word	134218625
 4228 0348 F5030008 		.word	134218741
 4229 034c 55020008 		.word	134218325
 4230 0350 2D040008 		.word	134218797
 4231 0354 1D020008 		.word	134218269
 4232 0358 00000000 		.word	.LANCHOR19
 4233 035c 59030008 		.word	134218585
 4234 0360 00000000 		.word	.LANCHOR18
 4235 0364 F9030008 		.word	134218745
 4236              	.LVL377:
 4237              	.L331:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4238              		.loc 2 510 10 is_stmt 1 view .LVU1216
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4239              		.loc 2 510 15 is_stmt 0 view .LVU1217
 4240 0368 824B     		ldr	r3, .L417
 4241 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4242              		.loc 2 510 13 view .LVU1218
 4243 036c DB07     		lsls	r3, r3, #31
 4244 036e 7FF5B5AE 		bpl	.L332
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4245              		.loc 2 510 37 discriminator 1 view .LVU1219
 4246 0372 FFF7FEFF 		bl	DM42_Ticker
 4247              	.LVL378:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4248              		.loc 2 510 37 discriminator 1 view .LVU1220
 4249 0376 804A     		ldr	r2, .L417+4
 4250 0378 804B     		ldr	r3, .L417+8
 4251 037a 02FB0030 		mla	r0, r2, r0, r3
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4252              		.loc 2 510 32 discriminator 1 view .LVU1221
 4253 037e B0F1333F 		cmp	r0, #858993459
 4254 0382 BFF4ABAE 		bcs	.L332
 511:src/console.c ****       finish_LEQ();
 4255              		.loc 2 511 7 is_stmt 1 view .LVU1222
 511:src/console.c ****       finish_LEQ();
 4256              		.loc 2 511 21 is_stmt 0 view .LVU1223
 4257 0386 8420     		movs	r0, #132
 4258 0388 FFF7FEFF 		bl	is_dot
 4259              	.LVL379:
 511:src/console.c ****       finish_LEQ();
 4260              		.loc 2 511 7 view .LVU1224
 4261 038c B0FA80F1 		clz	r1, r0
 4262 0390 4909     		lsrs	r1, r1, #5
 4263 0392 8420     		movs	r0, #132
 4264 0394 FFF7FEFF 		bl	dot
 4265              	.LVL380:
 512:src/console.c ****     }
 4266              		.loc 2 512 7 is_stmt 1 view .LVU1225
 4267 0398 FFF7FEFF 		bl	finish_LEQ
 4268              	.LVL381:
 4269 039c 9EE6     		b	.L332
 4270              	.LVL382:
 4271              	.L337:
ARM GAS  /tmp/cccWRI8T.s 			page 118


 521:src/console.c **** 	set_menu ( remapped.shift );
 4272              		.loc 2 521 7 view .LVU1226
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4273              		.loc 2 527 7 view .LVU1227
 535:src/console.c **** 	remapped = do_multi (remapped);
 4274              		.loc 2 535 7 view .LVU1228
 4275              	.LBB182:
 4276              	.LBB168:
 4277              	.LBB164:
  68:src/console.c ****   }
 4278              		.loc 2 68 12 is_stmt 0 view .LVU1229
 4279 039e 4FF00C09 		mov	r9, #12
 4280              	.LVL383:
 4281              	.L372:
  68:src/console.c ****   }
 4282              		.loc 2 68 12 view .LVU1230
 4283              	.LBE164:
 4284              	.LBE168:
 4285              	.LBE182:
 536:src/console.c **** 	display_current_menu();
 4286              		.loc 2 536 2 is_stmt 1 view .LVU1231
 536:src/console.c **** 	display_current_menu();
 4287              		.loc 2 536 13 is_stmt 0 view .LVU1232
 4288 03a2 3123     		movs	r3, #49
 4289 03a4 CDF80C90 		str	r9, [sp, #12]
 4290 03a8 8DF80830 		strb	r3, [sp, #8]
 4291 03ac 6D46     		mov	r5, sp
 4292 03ae 0DF1080A 		add	r10, sp, #8
 4293 03b2 9AE80600 		ldm	r10, {r1, r2}
 4294 03b6 2846     		mov	r0, r5
 4295 03b8 FFF7FEFF 		bl	do_multi
 4296              	.LVL384:
 4297 03bc 95E80300 		ldm	r5, {r0, r1}
 4298 03c0 8AE80300 		stm	r10, {r0, r1}
 4299 03c4 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 4300              	.LVL385:
 536:src/console.c **** 	display_current_menu();
 4301              		.loc 2 536 13 view .LVU1233
 4302 03c8 DDF80C90 		ldr	r9, [sp, #12]
 4303              	.LVL386:
 537:src/console.c ****       }
 4304              		.loc 2 537 2 is_stmt 1 view .LVU1234
 4305 03cc FFF7FEFF 		bl	display_current_menu
 4306              	.LVL387:
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4307              		.loc 2 539 7 view .LVU1235
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4308              		.loc 2 539 10 is_stmt 0 view .LVU1236
 4309 03d0 322D     		cmp	r5, #50
 4310 03d2 7FF479AF 		bne	.L397
 4311              	.L370:
 541:src/console.c ****     }
 542:src/console.c ****   }
 543:src/console.c ****   save_ram_file(0);
 4312              		.loc 2 543 3 is_stmt 1 view .LVU1237
 4313 03d6 0020     		movs	r0, #0
 544:src/console.c ****   //  free_storage();
ARM GAS  /tmp/cccWRI8T.s 			page 119


 545:src/console.c ****   return;
 546:src/console.c **** }
 4314              		.loc 2 546 1 is_stmt 0 view .LVU1238
 4315 03d8 38B0     		add	sp, sp, #224
 4316              		.cfi_remember_state
 4317              		.cfi_def_cfa_offset 32
 4318              		@ sp needed
 4319 03da BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 4320              		.cfi_restore 14
 4321              		.cfi_restore 10
 4322              		.cfi_restore 9
 4323              		.cfi_restore 8
 4324              		.cfi_restore 7
 4325              		.cfi_restore 6
 4326              		.cfi_restore 5
 4327              		.cfi_restore 4
 4328              		.cfi_def_cfa_offset 0
 4329              	.LVL388:
 543:src/console.c ****   //  free_storage();
 4330              		.loc 2 543 3 view .LVU1239
 4331 03de FFF7FEBF 		b	save_ram_file
 4332              	.LVL389:
 4333              	.L399:
 4334              		.cfi_restore_state
 4335              	.LBB183:
 4336              	.LBB169:
  72:src/console.c ****   }
 4337              		.loc 2 72 5 is_stmt 1 view .LVU1240
  72:src/console.c ****   }
 4338              		.loc 2 72 27 is_stmt 0 view .LVU1241
 4339 03e2 674B     		ldr	r3, .L417+12
 4340              	.L395:
 124:src/console.c ****     break;
 4341              		.loc 2 124 26 view .LVU1242
 4342 03e4 03EBC502 		add	r2, r3, r5, lsl #3
 4343 03e8 92E80300 		ldm	r2, {r0, r1}
 4344 03ec 0DF1080A 		add	r10, sp, #8
 4345 03f0 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4346              	.LVL390:
 124:src/console.c ****     break;
 4347              		.loc 2 124 26 view .LVU1243
 4348 03f4 8946     		mov	r9, r1
 4349              	.LVL391:
 124:src/console.c ****     break;
 4350              		.loc 2 124 26 view .LVU1244
 4351 03f6 8AE80300 		stm	r10, {r0, r1}
 4352 03fa 42E7     		b	.L336
 4353              	.LVL392:
 4354              	.L398:
  64:src/console.c **** 
 4355              		.loc 2 64 16 is_stmt 1 view .LVU1245
  64:src/console.c **** 
 4356              		.loc 2 64 23 is_stmt 0 view .LVU1246
 4357 03fc 614B     		ldr	r3, .L417+16
 4358 03fe 38E7     		b	.L396
 4359              	.LVL393:
 4360              	.L409:
ARM GAS  /tmp/cccWRI8T.s 			page 120


  64:src/console.c **** 
 4361              		.loc 2 64 23 view .LVU1247
 4362              	.LBE169:
 4363              	.LBE183:
 4364              	.LBB184:
 4365              	.LBB179:
 111:src/menu.c    ****   }
 4366              		.loc 1 111 5 is_stmt 1 view .LVU1248
 111:src/menu.c    ****   }
 4367              		.loc 1 111 18 is_stmt 0 view .LVU1249
 4368 0400 6149     		ldr	r1, .L417+20
 4369              	.LVL394:
 111:src/menu.c    ****   }
 4370              		.loc 1 111 18 view .LVU1250
 4371 0402 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4372 0404 1170     		strb	r1, [r2]
 4373 0406 DEE6     		b	.L365
 4374              	.LVL395:
 4375              	.L352:
 111:src/menu.c    ****   }
 4376              		.loc 1 111 18 view .LVU1251
 4377              	.LBE179:
 4378              	.LBE184:
 4379              	.LBB185:
 4380              	.LBB170:
  95:src/console.c ****   }
 4381              		.loc 2 95 5 is_stmt 1 view .LVU1252
  95:src/console.c ****   }
 4382              		.loc 2 95 9 is_stmt 0 view .LVU1253
 4383 0408 FFF7FEFF 		bl	cur_shift
 4384              	.LVL396:
  95:src/console.c ****   }
 4385              		.loc 2 95 8 view .LVU1254
 4386 040c 0128     		cmp	r0, #1
 4387 040e 56D0     		beq	.L412
 4388              	.L339:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4389              		.loc 2 98 3 is_stmt 1 view .LVU1255
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4390              		.loc 2 98 8 is_stmt 0 view .LVU1256
 4391 0410 FFF7FEFF 		bl	get_alpha_state
 4392              	.LVL397:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4393              		.loc 2 98 6 view .LVU1257
 4394 0414 D8B3     		cbz	r0, .L353
  99:src/console.c ****       switch (cur_shift()) { 
 4395              		.loc 2 99 5 is_stmt 1 view .LVU1258
  99:src/console.c ****       switch (cur_shift()) { 
 4396              		.loc 2 99 8 is_stmt 0 view .LVU1259
 4397 0416 1C2D     		cmp	r5, #28
 4398 0418 00F08580 		beq	.L413
 116:src/console.c ****   }
 4399              		.loc 2 116 5 is_stmt 1 view .LVU1260
 116:src/console.c ****   }
 4400              		.loc 2 116 26 is_stmt 0 view .LVU1261
 4401 041c 5B4B     		ldr	r3, .L417+24
 4402 041e E1E7     		b	.L395
ARM GAS  /tmp/cccWRI8T.s 			page 121


 4403              	.L346:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4404              		.loc 2 79 5 is_stmt 1 view .LVU1262
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4405              		.loc 2 79 9 is_stmt 0 view .LVU1263
 4406 0420 FFF7FEFF 		bl	cur_shift
 4407              	.LVL398:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4408              		.loc 2 79 8 view .LVU1264
 4409 0424 0028     		cmp	r0, #0
 4410 0426 7FF484AE 		bne	.L347
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4411              		.loc 2 79 33 is_stmt 1 view .LVU1265
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4412              		.loc 2 79 51 is_stmt 0 view .LVU1266
 4413 042a DDE90801 		ldrd	r0, r1, [sp, #32]
 4414 042e 0DF1080A 		add	r10, sp, #8
 4415 0432 8AE80300 		stm	r10, {r0, r1}
 4416 0436 9DF82050 		ldrb	r5, [sp, #32]	@ zero_extendqisi2
 4417              	.LVL399:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4418              		.loc 2 79 51 view .LVU1267
 4419 043a 8946     		mov	r9, r1
 4420              	.LVL400:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4421              		.loc 2 79 51 view .LVU1268
 4422 043c 21E7     		b	.L336
 4423              	.LVL401:
 4424              	.L407:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4425              		.loc 2 91 33 is_stmt 1 view .LVU1269
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4426              		.loc 2 91 51 is_stmt 0 view .LVU1270
 4427 043e DDE92801 		ldrd	r0, r1, [sp, #160]
 4428 0442 0DF1080A 		add	r10, sp, #8
 4429 0446 8AE80300 		stm	r10, {r0, r1}
 4430 044a 9DF8A050 		ldrb	r5, [sp, #160]	@ zero_extendqisi2
 4431              	.LVL402:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4432              		.loc 2 91 51 view .LVU1271
 4433 044e 8946     		mov	r9, r1
 4434              	.LVL403:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4435              		.loc 2 91 51 view .LVU1272
 4436 0450 17E7     		b	.L336
 4437              	.LVL404:
 4438              	.L405:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4439              		.loc 2 88 33 is_stmt 1 view .LVU1273
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4440              		.loc 2 88 51 is_stmt 0 view .LVU1274
 4441 0452 DDE92001 		ldrd	r0, r1, [sp, #128]
 4442 0456 0DF1080A 		add	r10, sp, #8
 4443 045a 8AE80300 		stm	r10, {r0, r1}
 4444 045e 9DF88050 		ldrb	r5, [sp, #128]	@ zero_extendqisi2
 4445              	.LVL405:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
ARM GAS  /tmp/cccWRI8T.s 			page 122


 4446              		.loc 2 88 51 view .LVU1275
 4447 0462 8946     		mov	r9, r1
 4448              	.LVL406:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4449              		.loc 2 88 51 view .LVU1276
 4450 0464 0DE7     		b	.L336
 4451              	.LVL407:
 4452              	.L403:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4453              		.loc 2 85 33 is_stmt 1 view .LVU1277
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4454              		.loc 2 85 51 is_stmt 0 view .LVU1278
 4455 0466 DDE91801 		ldrd	r0, r1, [sp, #96]
 4456 046a 0DF1080A 		add	r10, sp, #8
 4457 046e 8AE80300 		stm	r10, {r0, r1}
 4458 0472 9DF86050 		ldrb	r5, [sp, #96]	@ zero_extendqisi2
 4459              	.LVL408:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4460              		.loc 2 85 51 view .LVU1279
 4461 0476 8946     		mov	r9, r1
 4462              	.LVL409:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4463              		.loc 2 85 51 view .LVU1280
 4464 0478 03E7     		b	.L336
 4465              	.LVL410:
 4466              	.L401:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4467              		.loc 2 82 33 is_stmt 1 view .LVU1281
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4468              		.loc 2 82 51 is_stmt 0 view .LVU1282
 4469 047a DDE91001 		ldrd	r0, r1, [sp, #64]
 4470 047e 0DF1080A 		add	r10, sp, #8
 4471 0482 8AE80300 		stm	r10, {r0, r1}
 4472 0486 9DF84050 		ldrb	r5, [sp, #64]	@ zero_extendqisi2
 4473              	.LVL411:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4474              		.loc 2 82 51 view .LVU1283
 4475 048a 8946     		mov	r9, r1
 4476              	.LVL412:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4477              		.loc 2 82 51 view .LVU1284
 4478 048c F9E6     		b	.L336
 4479              	.LVL413:
 4480              	.L353:
 119:src/console.c ****   case SHIFT_N:    
 4481              		.loc 2 119 3 is_stmt 1 view .LVU1285
 119:src/console.c ****   case SHIFT_N:    
 4482              		.loc 2 119 11 is_stmt 0 view .LVU1286
 4483 048e FFF7FEFF 		bl	cur_shift
 4484              	.LVL414:
 119:src/console.c ****   case SHIFT_N:    
 4485              		.loc 2 119 3 view .LVU1287
 4486 0492 0128     		cmp	r0, #1
 4487 0494 45D0     		beq	.L360
 4488 0496 0228     		cmp	r0, #2
 4489 0498 02D0     		beq	.L361
 4490 049a 70B1     		cbz	r0, .L362
ARM GAS  /tmp/cccWRI8T.s 			page 123


  58:src/console.c **** 
 4491              		.loc 2 58 41 view .LVU1288
 4492 049c EDB2     		uxtb	r5, r5
 4493              	.LVL415:
  58:src/console.c **** 
 4494              		.loc 2 58 41 view .LVU1289
 4495 049e F0E6     		b	.L336
 4496              	.LVL416:
 4497              	.L361:
 125:src/console.c ****   case SHIFT_G:
 4498              		.loc 2 125 5 is_stmt 1 view .LVU1290
 127:src/console.c ****     break;
 4499              		.loc 2 127 5 view .LVU1291
 127:src/console.c ****     break;
 4500              		.loc 2 127 26 is_stmt 0 view .LVU1292
 4501 04a0 3B4B     		ldr	r3, .L417+28
 4502 04a2 03EBC502 		add	r2, r3, r5, lsl #3
 4503 04a6 92E80300 		ldm	r2, {r0, r1}
 4504 04aa 0DF1080A 		add	r10, sp, #8
 4505 04ae 8AE80300 		stm	r10, {r0, r1}
 4506 04b2 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4507              	.LVL417:
 127:src/console.c ****     break;
 4508              		.loc 2 127 26 view .LVU1293
 4509 04b6 8946     		mov	r9, r1
 4510              	.LVL418:
 127:src/console.c ****     break;
 4511              		.loc 2 127 26 view .LVU1294
 4512 04b8 E3E6     		b	.L336
 4513              	.LVL419:
 4514              	.L362:
 121:src/console.c ****     break;
 4515              		.loc 2 121 5 is_stmt 1 view .LVU1295
 121:src/console.c ****     break;
 4516              		.loc 2 121 24 is_stmt 0 view .LVU1296
 4517 04ba 364B     		ldr	r3, .L417+32
 4518 04bc 92E7     		b	.L395
 4519              	.L412:
  95:src/console.c ****   }
 4520              		.loc 2 95 33 is_stmt 1 view .LVU1297
  95:src/console.c ****   }
 4521              		.loc 2 95 51 is_stmt 0 view .LVU1298
 4522 04be DDE93201 		ldrd	r0, r1, [sp, #200]
 4523 04c2 0DF1080A 		add	r10, sp, #8
 4524 04c6 8AE80300 		stm	r10, {r0, r1}
 4525 04ca 9DF8C850 		ldrb	r5, [sp, #200]	@ zero_extendqisi2
 4526              	.LVL420:
  95:src/console.c ****   }
 4527              		.loc 2 95 51 view .LVU1299
 4528 04ce 8946     		mov	r9, r1
 4529              	.LVL421:
  95:src/console.c ****   }
 4530              		.loc 2 95 51 view .LVU1300
 4531 04d0 D7E6     		b	.L336
 4532              	.LVL422:
 4533              	.L406:
  89:src/console.c ****   case KEY_F5:
ARM GAS  /tmp/cccWRI8T.s 			page 124


 4534              		.loc 2 89 33 is_stmt 1 view .LVU1301
  89:src/console.c ****   case KEY_F5:
 4535              		.loc 2 89 51 is_stmt 0 view .LVU1302
 4536 04d2 DDE92201 		ldrd	r0, r1, [sp, #136]
 4537 04d6 0DF1080A 		add	r10, sp, #8
 4538 04da 8AE80300 		stm	r10, {r0, r1}
 4539 04de 9DF88850 		ldrb	r5, [sp, #136]	@ zero_extendqisi2
 4540              	.LVL423:
  89:src/console.c ****   case KEY_F5:
 4541              		.loc 2 89 51 view .LVU1303
 4542 04e2 8946     		mov	r9, r1
 4543              	.LVL424:
  89:src/console.c ****   case KEY_F5:
 4544              		.loc 2 89 51 view .LVU1304
 4545 04e4 CDE6     		b	.L336
 4546              	.LVL425:
 4547              	.L408:
  92:src/console.c ****   case KEY_F6:
 4548              		.loc 2 92 33 is_stmt 1 view .LVU1305
  92:src/console.c ****   case KEY_F6:
 4549              		.loc 2 92 51 is_stmt 0 view .LVU1306
 4550 04e6 DDE92A01 		ldrd	r0, r1, [sp, #168]
 4551 04ea 0DF1080A 		add	r10, sp, #8
 4552 04ee 8AE80300 		stm	r10, {r0, r1}
 4553 04f2 9DF8A850 		ldrb	r5, [sp, #168]	@ zero_extendqisi2
 4554              	.LVL426:
  92:src/console.c ****   case KEY_F6:
 4555              		.loc 2 92 51 view .LVU1307
 4556 04f6 8946     		mov	r9, r1
 4557              	.LVL427:
  92:src/console.c ****   case KEY_F6:
 4558              		.loc 2 92 51 view .LVU1308
 4559 04f8 C3E6     		b	.L336
 4560              	.LVL428:
 4561              	.L404:
  86:src/console.c ****   case KEY_F4:
 4562              		.loc 2 86 33 is_stmt 1 view .LVU1309
  86:src/console.c ****   case KEY_F4:
 4563              		.loc 2 86 51 is_stmt 0 view .LVU1310
 4564 04fa DDE91A01 		ldrd	r0, r1, [sp, #104]
 4565 04fe 0DF1080A 		add	r10, sp, #8
 4566 0502 8AE80300 		stm	r10, {r0, r1}
 4567 0506 9DF86850 		ldrb	r5, [sp, #104]	@ zero_extendqisi2
 4568              	.LVL429:
  86:src/console.c ****   case KEY_F4:
 4569              		.loc 2 86 51 view .LVU1311
 4570 050a 8946     		mov	r9, r1
 4571              	.LVL430:
  86:src/console.c ****   case KEY_F4:
 4572              		.loc 2 86 51 view .LVU1312
 4573 050c B9E6     		b	.L336
 4574              	.LVL431:
 4575              	.L402:
  83:src/console.c ****   case KEY_F3:
 4576              		.loc 2 83 33 is_stmt 1 view .LVU1313
  83:src/console.c ****   case KEY_F3:
 4577              		.loc 2 83 51 is_stmt 0 view .LVU1314
ARM GAS  /tmp/cccWRI8T.s 			page 125


 4578 050e DDE91201 		ldrd	r0, r1, [sp, #72]
 4579 0512 0DF1080A 		add	r10, sp, #8
 4580 0516 8AE80300 		stm	r10, {r0, r1}
 4581 051a 9DF84850 		ldrb	r5, [sp, #72]	@ zero_extendqisi2
 4582              	.LVL432:
  83:src/console.c ****   case KEY_F3:
 4583              		.loc 2 83 51 view .LVU1315
 4584 051e 8946     		mov	r9, r1
 4585              	.LVL433:
  83:src/console.c ****   case KEY_F3:
 4586              		.loc 2 83 51 view .LVU1316
 4587 0520 AFE6     		b	.L336
 4588              	.LVL434:
 4589              	.L360:
 122:src/console.c ****   case SHIFT_F:
 4590              		.loc 2 122 5 is_stmt 1 view .LVU1317
 124:src/console.c ****     break;
 4591              		.loc 2 124 5 view .LVU1318
 124:src/console.c ****     break;
 4592              		.loc 2 124 26 is_stmt 0 view .LVU1319
 4593 0522 1D4B     		ldr	r3, .L417+36
 4594 0524 5EE7     		b	.L395
 4595              	.L413:
 100:src/console.c ****       case SHIFT_N:
 4596              		.loc 2 100 7 is_stmt 1 view .LVU1320
 100:src/console.c ****       case SHIFT_N:
 4597              		.loc 2 100 15 is_stmt 0 view .LVU1321
 4598 0526 FFF7FEFF 		bl	cur_shift
 4599              	.LVL435:
 100:src/console.c ****       case SHIFT_N:
 4600              		.loc 2 100 7 view .LVU1322
 4601 052a 0328     		cmp	r0, #3
 4602 052c 3FF6CCAE 		bhi	.L397
 4603 0530 0128     		cmp	r0, #1
 4604 0532 09D8     		bhi	.L356
 4605 0534 A0B1     		cbz	r0, .L414
 103:src/console.c ****       case SHIFT_F:
 4606              		.loc 2 103 2 is_stmt 1 view .LVU1323
 105:src/console.c **** 	break;
 4607              		.loc 2 105 2 view .LVU1324
 105:src/console.c **** 	break;
 4608              		.loc 2 105 23 is_stmt 0 view .LVU1325
 4609 0536 194B     		ldr	r3, .L417+40
 4610 0538 93E80300 		ldm	r3, {r0, r1}
 4611 053c 0DF1080A 		add	r10, sp, #8
 4612 0540 8AE80300 		stm	r10, {r0, r1}
 4613              	.LVL436:
 105:src/console.c **** 	break;
 4614              		.loc 2 105 23 view .LVU1326
 4615              	.LBE170:
 4616              	.LBE185:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4617              		.loc 2 521 7 is_stmt 1 view .LVU1327
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4618              		.loc 2 527 7 view .LVU1328
 535:src/console.c **** 	remapped = do_multi (remapped);
 4619              		.loc 2 535 7 view .LVU1329
ARM GAS  /tmp/cccWRI8T.s 			page 126


 539:src/console.c ****       process_keycode_with_shift(remapped);
 4620              		.loc 2 539 7 view .LVU1330
 4621              	.LBB186:
 4622              	.LBB171:
 105:src/console.c **** 	break;
 4623              		.loc 2 105 23 is_stmt 0 view .LVU1331
 4624 0544 2A25     		movs	r5, #42
 4625              	.LVL437:
 105:src/console.c **** 	break;
 4626              		.loc 2 105 23 view .LVU1332
 4627 0546 C1E6     		b	.L359
 4628              	.LVL438:
 4629              	.L356:
 106:src/console.c ****       case SHIFT_G:
 4630              		.loc 2 106 2 is_stmt 1 view .LVU1333
 108:src/console.c **** 	break;
 4631              		.loc 2 108 2 view .LVU1334
 108:src/console.c **** 	break;
 4632              		.loc 2 108 9 is_stmt 0 view .LVU1335
 4633 0548 154B     		ldr	r3, .L417+44
 4634 054a 92E6     		b	.L396
 4635              	.L400:
  80:src/console.c ****   case KEY_F2:
 4636              		.loc 2 80 33 is_stmt 1 view .LVU1336
  80:src/console.c ****   case KEY_F2:
 4637              		.loc 2 80 51 is_stmt 0 view .LVU1337
 4638 054c DDE90A01 		ldrd	r0, r1, [sp, #40]
 4639 0550 0DF1080A 		add	r10, sp, #8
 4640 0554 8AE80300 		stm	r10, {r0, r1}
 4641 0558 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 4642              	.LVL439:
  80:src/console.c ****   case KEY_F2:
 4643              		.loc 2 80 51 view .LVU1338
 4644 055c 8946     		mov	r9, r1
 4645              	.LVL440:
  80:src/console.c ****   case KEY_F2:
 4646              		.loc 2 80 51 view .LVU1339
 4647 055e 90E6     		b	.L336
 4648              	.LVL441:
 4649              	.L414:
 102:src/console.c **** 	break;
 4650              		.loc 2 102 2 is_stmt 1 view .LVU1340
 102:src/console.c **** 	break;
 4651              		.loc 2 102 21 is_stmt 0 view .LVU1341
 4652 0560 104B     		ldr	r3, .L417+48
 4653 0562 93E80300 		ldm	r3, {r0, r1}
 4654 0566 0DF1080A 		add	r10, sp, #8
 4655 056a 8AE80300 		stm	r10, {r0, r1}
 4656              	.LVL442:
 102:src/console.c **** 	break;
 4657              		.loc 2 102 21 view .LVU1342
 4658              	.LBE171:
 4659              	.LBE186:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4660              		.loc 2 521 7 is_stmt 1 view .LVU1343
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4661              		.loc 2 527 7 view .LVU1344
ARM GAS  /tmp/cccWRI8T.s 			page 127


 535:src/console.c **** 	remapped = do_multi (remapped);
 4662              		.loc 2 535 7 view .LVU1345
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4663              		.loc 2 539 7 view .LVU1346
 4664              	.LBB187:
 4665              	.LBB172:
 102:src/console.c **** 	break;
 4666              		.loc 2 102 21 is_stmt 0 view .LVU1347
 4667 056e 2925     		movs	r5, #41
 4668              	.LVL443:
 102:src/console.c **** 	break;
 4669              		.loc 2 102 21 view .LVU1348
 4670 0570 ACE6     		b	.L359
 4671              	.L418:
 4672 0572 00BF     		.align	2
 4673              	.L417:
 4674 0574 00000000 		.word	StopWatchStatus
 4675 0578 CDCCCCCC 		.word	-858993459
 4676 057c 99999919 		.word	429496729
 4677 0580 00000000 		.word	.LANCHOR12
 4678 0584 00000000 		.word	.LANCHOR11
 4679 0588 00000000 		.word	.LANCHOR2
 4680 058c 00000000 		.word	.LANCHOR16
 4681 0590 00000000 		.word	.LANCHOR17
 4682 0594 00000000 		.word	.LANCHOR13
 4683 0598 00000000 		.word	.LANCHOR14
 4684 059c E0000000 		.word	.LANCHOR14+224
 4685 05a0 00000000 		.word	.LANCHOR15
 4686 05a4 E0000000 		.word	.LANCHOR13+224
 4687              	.LBE172:
 4688              	.LBE187:
 4689              		.cfi_endproc
 4690              	.LFE34:
 4692              		.global	n_p
 4693              		.comm	print_string,22,4
 4694              		.global	spaces
 4695              		.global	release
 4696              		.global	h_shift
 4697              		.global	g_shift
 4698              		.global	f_shift
 4699              		.global	heartbeat
 4700              		.global	no_key
 4701              		.global	MID_MENU
 4702              		.section	.rodata.str1.4,"aMS",%progbits,1
 4703              		.align	2
 4704              	.LC14:
 4705 0000 53797374 		.ascii	"System!\000"
 4705      656D2100 
 4706              		.global	mid_menu
 4707              		.global	default_menu
 4708              		.global	last_menu
 4709              		.global	current_menu
 4710              		.global	cmplx_key_string
 4711              		.align	2
 4712              	.LC15:
 4713 0008 43505800 		.ascii	"CPX\000"
 4714              		.global	arrow_key_string
ARM GAS  /tmp/cccWRI8T.s 			page 128


 4715              		.align	2
 4716              	.LC16:
 4717 000c 2D2D0D00 		.ascii	"--\015\000"
 4718              		.global	UserMenu
 4719              		.section	.rodata
 4720              		.align	2
 4721              		.set	.LANCHOR5,. + 0
 4722              	.LC0:
 4723 0000 2C       		.byte	44
 4724 0001 000000   		.space	3
 4725 0004 FFFFFFFF 		.word	-1
 4726              	.LC1:
 4727 0008 2D       		.byte	45
 4728 0009 000000   		.space	3
 4729 000c FFFFFFFF 		.word	-1
 4730              	.LC10:
 4731 0010 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4731      2A2B0708 
 4731      091C0B0C 
 4731      0D0E0F
 4732 001f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4732      13141516 
 4732      00121819 
 4732      1A
 4733 002c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4733      1E1F2000 
 4733      21222324 
 4733      25
 4734              		.section	.bss.current_menu,"aw",%nobits
 4735              		.set	.LANCHOR1,. + 0
 4738              	current_menu:
 4739 0000 00       		.space	1
 4740              		.section	.bss.default_menu,"aw",%nobits
 4741              		.set	.LANCHOR2,. + 0
 4744              	default_menu:
 4745 0000 00       		.space	1
 4746              		.section	.bss.last_menu,"aw",%nobits
 4747              		.set	.LANCHOR3,. + 0
 4750              	last_menu:
 4751 0000 00       		.space	1
 4752              		.section	.bss.mdots,"aw",%nobits
 4753              		.align	2
 4754              		.set	.LANCHOR0,. + 0
 4757              	mdots:
 4758 0000 00000000 		.space	400
 4758      00000000 
 4758      00000000 
 4758      00000000 
 4758      00000000 
 4759              		.section	.bss.n_p,"aw",%nobits
 4760              		.align	2
 4763              	n_p:
 4764 0000 00000000 		.space	4
 4765              		.section	.bss.start_ticks,"aw",%nobits
 4766              		.align	2
 4767              		.set	.LANCHOR8,. + 0
 4770              	start_ticks:
ARM GAS  /tmp/cccWRI8T.s 			page 129


 4771 0000 00000000 		.space	4
 4772              		.section	.data.UserMenu,"aw"
 4773              		.align	2
 4774              		.set	.LANCHOR4,. + 0
 4777              	UserMenu:
 4778 0000 55736572 		.ascii	"User Menu\000"
 4778      204D656E 
 4778      7500
 4779 000a 00000000 		.space	5
 4779      00
 4780 000f 00       		.space	1
 4781 0010 2E       		.byte	46
 4782 0011 000000   		.space	3
 4783 0014 FFFFFFFF 		.word	-1
 4784 0018 2E       		.byte	46
 4785 0019 000000   		.space	3
 4786 001c FFFFFFFF 		.word	-1
 4787 0020 00       		.ascii	"\000"
 4788 0021 00000000 		.space	7
 4788      000000
 4789 0028 00       		.ascii	"\000"
 4790 0029 00000000 		.space	7
 4790      000000
 4791 0030 2E       		.byte	46
 4792 0031 000000   		.space	3
 4793 0034 FFFFFFFF 		.word	-1
 4794 0038 2E       		.byte	46
 4795 0039 000000   		.space	3
 4796 003c FFFFFFFF 		.word	-1
 4797 0040 00       		.ascii	"\000"
 4798 0041 00000000 		.space	7
 4798      000000
 4799 0048 00       		.ascii	"\000"
 4800 0049 00000000 		.space	7
 4800      000000
 4801 0050 2E       		.byte	46
 4802 0051 000000   		.space	3
 4803 0054 FFFFFFFF 		.word	-1
 4804 0058 2E       		.byte	46
 4805 0059 000000   		.space	3
 4806 005c FFFFFFFF 		.word	-1
 4807 0060 00       		.ascii	"\000"
 4808 0061 00000000 		.space	7
 4808      000000
 4809 0068 00       		.ascii	"\000"
 4810 0069 00000000 		.space	7
 4810      000000
 4811 0070 2E       		.byte	46
 4812 0071 000000   		.space	3
 4813 0074 FFFFFFFF 		.word	-1
 4814 0078 2E       		.byte	46
 4815 0079 000000   		.space	3
 4816 007c FFFFFFFF 		.word	-1
 4817 0080 00       		.ascii	"\000"
 4818 0081 00000000 		.space	7
 4818      000000
 4819 0088 00       		.ascii	"\000"
ARM GAS  /tmp/cccWRI8T.s 			page 130


 4820 0089 00000000 		.space	7
 4820      000000
 4821 0090 2C       		.byte	44
 4822 0091 000000   		.space	3
 4823 0094 FFFFFFFF 		.word	-1
 4824 0098 2E       		.byte	46
 4825 0099 000000   		.space	3
 4826 009c FFFFFFFF 		.word	-1
 4827 00a0 2D2D0D00 		.ascii	"--\015\000"
 4828 00a4 00000000 		.space	4
 4829 00a8 00       		.ascii	"\000"
 4830 00a9 00000000 		.space	7
 4830      000000
 4831 00b0 2D       		.byte	45
 4832 00b1 000000   		.space	3
 4833 00b4 FFFFFFFF 		.word	-1
 4834 00b8 31       		.byte	49
 4835 00b9 000000   		.space	3
 4836 00bc 0B000000 		.word	11
 4837 00c0 43505800 		.ascii	"CPX\000"
 4838 00c4 00000000 		.space	4
 4839 00c8 00       		.ascii	"\000"
 4840 00c9 00000000 		.space	7
 4840      000000
 4841              		.section	.data.arrow_key_string,"aw"
 4842              		.align	2
 4843              		.set	.LANCHOR6,. + 0
 4846              	arrow_key_string:
 4847 0000 0C000000 		.word	.LC16
 4848              		.section	.data.cmplx_key_string,"aw"
 4849              		.align	2
 4850              		.set	.LANCHOR7,. + 0
 4853              	cmplx_key_string:
 4854 0000 08000000 		.word	.LC15
 4855              		.section	.data.f_shift,"aw"
 4856              		.align	2
 4859              	f_shift:
 4860 0000 29       		.byte	41
 4861 0001 000000   		.space	3
 4862 0004 FFFFFFFF 		.word	-1
 4863              		.section	.data.g_shift,"aw"
 4864              		.align	2
 4867              	g_shift:
 4868 0000 2A       		.byte	42
 4869 0001 000000   		.space	3
 4870 0004 FFFFFFFF 		.word	-1
 4871              		.section	.data.h_shift,"aw"
 4872              		.align	2
 4873              		.set	.LANCHOR15,. + 0
 4876              	h_shift:
 4877 0000 2B       		.byte	43
 4878 0001 000000   		.space	3
 4879 0004 FFFFFFFF 		.word	-1
 4880              		.section	.data.heartbeat,"aw"
 4881              		.align	2
 4882              		.set	.LANCHOR19,. + 0
 4885              	heartbeat:
ARM GAS  /tmp/cccWRI8T.s 			page 131


 4886 0000 62       		.byte	98
 4887 0001 000000   		.space	3
 4888 0004 FFFFFFFF 		.word	-1
 4889              		.section	.data.no_key,"aw"
 4890              		.align	2
 4891              		.set	.LANCHOR10,. + 0
 4894              	no_key:
 4895 0000 2E       		.byte	46
 4896 0001 000000   		.space	3
 4897 0004 00000000 		.word	0
 4898              		.section	.data.release,"aw"
 4899              		.align	2
 4900              		.set	.LANCHOR11,. + 0
 4903              	release:
 4904 0000 63       		.byte	99
 4905 0001 000000   		.space	3
 4906 0004 FFFFFFFF 		.word	-1
 4907              		.section	.data.spaces,"aw"
 4908              		.align	2
 4909              		.set	.LANCHOR9,. + 0
 4912              	spaces:
 4913 0000 20202020 		.ascii	"                     \000"
 4913      20202020 
 4913      20202020 
 4913      20202020 
 4913      20202020 
 4914              		.section	.rodata.MID_MENU,"a"
 4915              		.align	2
 4916              		.set	.LANCHOR18,. + 0
 4919              	MID_MENU:
 4920 0000 00000000 		.word	.LC14
 4921 0004 00000000 		.word	mid_menu
 4922 0008 00000000 		.word	0
 4923 000c 00000000 		.word	0
 4924              		.section	.rodata.Menus,"a"
 4925              		.align	2
 4928              	Menus:
 4929 0000 4D5F426C 		.ascii	"M_Blank\000"
 4929      616E6B00 
 4930 0008 00000000 		.space	7
 4930      000000
 4931 000f 00       		.space	1
 4932 0010 2E       		.byte	46
 4933 0011 000000   		.space	3
 4934 0014 FFFFFFFF 		.word	-1
 4935 0018 2E       		.byte	46
 4936 0019 000000   		.space	3
 4937 001c FFFFFFFF 		.word	-1
 4938 0020 00       		.ascii	"\000"
 4939 0021 00000000 		.space	7
 4939      000000
 4940 0028 00       		.ascii	"\000"
 4941 0029 00000000 		.space	7
 4941      000000
 4942 0030 2E       		.byte	46
 4943 0031 000000   		.space	3
 4944 0034 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cccWRI8T.s 			page 132


 4945 0038 2E       		.byte	46
 4946 0039 000000   		.space	3
 4947 003c FFFFFFFF 		.word	-1
 4948 0040 00       		.ascii	"\000"
 4949 0041 00000000 		.space	7
 4949      000000
 4950 0048 00       		.ascii	"\000"
 4951 0049 00000000 		.space	7
 4951      000000
 4952 0050 2E       		.byte	46
 4953 0051 000000   		.space	3
 4954 0054 FFFFFFFF 		.word	-1
 4955 0058 2E       		.byte	46
 4956 0059 000000   		.space	3
 4957 005c FFFFFFFF 		.word	-1
 4958 0060 00       		.ascii	"\000"
 4959 0061 00000000 		.space	7
 4959      000000
 4960 0068 00       		.ascii	"\000"
 4961 0069 00000000 		.space	7
 4961      000000
 4962 0070 2E       		.byte	46
 4963 0071 000000   		.space	3
 4964 0074 FFFFFFFF 		.word	-1
 4965 0078 2E       		.byte	46
 4966 0079 000000   		.space	3
 4967 007c FFFFFFFF 		.word	-1
 4968 0080 00       		.ascii	"\000"
 4969 0081 00000000 		.space	7
 4969      000000
 4970 0088 00       		.ascii	"\000"
 4971 0089 00000000 		.space	7
 4971      000000
 4972 0090 2C       		.byte	44
 4973 0091 000000   		.space	3
 4974 0094 FFFFFFFF 		.word	-1
 4975 0098 2E       		.byte	46
 4976 0099 000000   		.space	3
 4977 009c FFFFFFFF 		.word	-1
 4978 00a0 2D2D0D00 		.ascii	"--\015\000"
 4979 00a4 00000000 		.space	4
 4980 00a8 00       		.ascii	"\000"
 4981 00a9 00000000 		.space	7
 4981      000000
 4982 00b0 2D       		.byte	45
 4983 00b1 000000   		.space	3
 4984 00b4 FFFFFFFF 		.word	-1
 4985 00b8 31       		.byte	49
 4986 00b9 000000   		.space	3
 4987 00bc 0B000000 		.word	11
 4988 00c0 43505800 		.ascii	"CPX\000"
 4989 00c4 00000000 		.space	4
 4990 00c8 00       		.ascii	"\000"
 4991 00c9 00000000 		.space	7
 4991      000000
 4992 00d0 4D5F436C 		.ascii	"M_Clear\000"
 4992      65617200 
ARM GAS  /tmp/cccWRI8T.s 			page 133


 4993 00d8 00000000 		.space	7
 4993      000000
 4994 00df 00       		.space	1
 4995 00e0 10       		.byte	16
 4996 00e1 000000   		.space	3
 4997 00e4 01000000 		.word	1
 4998 00e8 34       		.byte	52
 4999 00e9 000000   		.space	3
 5000 00ec 44010000 		.word	324
 5001 00f0 434C5072 		.ascii	"CLProg\000"
 5001      6F6700
 5002 00f7 00       		.space	1
 5003 00f8 434C5041 		.ascii	"CLPAll\000"
 5003      6C6C00
 5004 00ff 00       		.space	1
 5005 0100 10       		.byte	16
 5006 0101 000000   		.space	3
 5007 0104 02000000 		.word	2
 5008 0108 34       		.byte	52
 5009 0109 000000   		.space	3
 5010 010c 3E010000 		.word	318
 5011 0110 434C9100 		.ascii	"CL\221\000"
 5012 0114 00000000 		.space	4
 5013 0118 434C5265 		.ascii	"CLReg\000"
 5013      6700
 5014 011e 0000     		.space	2
 5015 0120 10       		.byte	16
 5016 0121 000000   		.space	3
 5017 0124 03000000 		.word	3
 5018 0128 34       		.byte	52
 5019 0129 000000   		.space	3
 5020 012c 74010000 		.word	372
 5021 0130 434C7800 		.ascii	"CLx\000"
 5022 0134 00000000 		.space	4
 5023 0138 434C06A0 		.ascii	"CL\006\240\000"
 5023      00
 5024 013d 000000   		.space	3
 5025 0140 34       		.byte	52
 5026 0141 000000   		.space	3
 5027 0144 40010000 		.word	320
 5028 0148 34       		.byte	52
 5029 0149 000000   		.space	3
 5030 014c 41010000 		.word	321
 5031 0150 434C5374 		.ascii	"CLStk\000"
 5031      6B00
 5032 0156 0000     		.space	2
 5033 0158 434C416C 		.ascii	"CLAll\000"
 5033      6C00
 5034 015e 0000     		.space	2
 5035 0160 2C       		.byte	44
 5036 0161 000000   		.space	3
 5037 0164 FFFFFFFF 		.word	-1
 5038 0168 2E       		.byte	46
 5039 0169 000000   		.space	3
 5040 016c FFFFFFFF 		.word	-1
 5041 0170 2D2D0D00 		.ascii	"--\015\000"
 5042 0174 00000000 		.space	4
ARM GAS  /tmp/cccWRI8T.s 			page 134


 5043 0178 00       		.ascii	"\000"
 5044 0179 00000000 		.space	7
 5044      000000
 5045 0180 2D       		.byte	45
 5046 0181 000000   		.space	3
 5047 0184 FFFFFFFF 		.word	-1
 5048 0188 2E       		.byte	46
 5049 0189 000000   		.space	3
 5050 018c FFFFFFFF 		.word	-1
 5051 0190 43505800 		.ascii	"CPX\000"
 5052 0194 00000000 		.space	4
 5053 0198 00       		.ascii	"\000"
 5054 0199 00000000 		.space	7
 5054      000000
 5055 01a0 4D5F4469 		.ascii	"M_Disp\000"
 5055      737000
 5056 01a7 00000000 		.space	8
 5056      00000000 
 5057 01af 00       		.space	1
 5058 01b0 00       		.byte	0
 5059 01b1 000000   		.space	3
 5060 01b4 03000000 		.word	3
 5061 01b8 05       		.byte	5
 5062 01b9 000000   		.space	3
 5063 01bc 01000000 		.word	1
 5064 01c0 414C4C00 		.ascii	"ALL\000"
 5065 01c4 00000000 		.space	4
 5066 01c8 6120622F 		.ascii	"a b/c\000"
 5066      6300
 5067 01ce 0000     		.space	2
 5068 01d0 01       		.byte	1
 5069 01d1 000000   		.space	3
 5070 01d4 03000000 		.word	3
 5071 01d8 05       		.byte	5
 5072 01d9 000000   		.space	3
 5073 01dc 02000000 		.word	2
 5074 01e0 46495800 		.ascii	"FIX\000"
 5075 01e4 00000000 		.space	4
 5076 01e8 642F6300 		.ascii	"d/c\000"
 5077 01ec 00000000 		.space	4
 5078 01f0 02       		.byte	2
 5079 01f1 000000   		.space	3
 5080 01f4 03000000 		.word	3
 5081 01f8 06       		.byte	6
 5082 01f9 000000   		.space	3
 5083 01fc 01000000 		.word	1
 5084 0200 53434900 		.ascii	"SCI\000"
 5085 0204 00000000 		.space	4
 5086 0208 482E4D53 		.ascii	"H.MS\000"
 5086      00
 5087 020d 000000   		.space	3
 5088 0210 03       		.byte	3
 5089 0211 000000   		.space	3
 5090 0214 03000000 		.word	3
 5091 0218 07       		.byte	7
 5092 0219 000000   		.space	3
 5093 021c 01000000 		.word	1
ARM GAS  /tmp/cccWRI8T.s 			page 135


 5094 0220 454E4700 		.ascii	"ENG\000"
 5095 0224 00000000 		.space	4
 5096 0228 482E6400 		.ascii	"H.d\000"
 5097 022c 00000000 		.space	4
 5098 0230 2C       		.byte	44
 5099 0231 000000   		.space	3
 5100 0234 FFFFFFFF 		.word	-1
 5101 0238 26       		.byte	38
 5102 0239 000000   		.space	3
 5103 023c 03000000 		.word	3
 5104 0240 2D2D0D00 		.ascii	"--\015\000"
 5105 0244 00000000 		.space	4
 5106 0248 2E2F2C00 		.ascii	"./,\000"
 5107 024c 00000000 		.space	4
 5108 0250 2D       		.byte	45
 5109 0251 000000   		.space	3
 5110 0254 FFFFFFFF 		.word	-1
 5111 0258 2E       		.byte	46
 5112 0259 000000   		.space	3
 5113 025c FFFFFFFF 		.word	-1
 5114 0260 43505800 		.ascii	"CPX\000"
 5115 0264 00000000 		.space	4
 5116 0268 00       		.ascii	"\000"
 5117 0269 00000000 		.space	7
 5117      000000
 5118 0270 4D5F4261 		.ascii	"M_Base\000"
 5118      736500
 5119 0277 00000000 		.space	8
 5119      00000000 
 5120 027f 00       		.space	1
 5121 0280 0E       		.byte	14
 5122 0281 000000   		.space	3
 5123 0284 01000000 		.word	1
 5124 0288 0E       		.byte	14
 5125 0289 000000   		.space	3
 5126 028c 03000000 		.word	3
 5127 0290 42494E00 		.ascii	"BIN\000"
 5128 0294 00000000 		.space	4
 5129 0298 6E6F7400 		.ascii	"not\000"
 5130 029c 00000000 		.space	4
 5131 02a0 0E       		.byte	14
 5132 02a1 000000   		.space	3
 5133 02a4 02000000 		.word	2
 5134 02a8 13       		.byte	19
 5135 02a9 000000   		.space	3
 5136 02ac 03000000 		.word	3
 5137 02b0 4F435400 		.ascii	"OCT\000"
 5138 02b4 00000000 		.space	4
 5139 02b8 616E6400 		.ascii	"and\000"
 5140 02bc 00000000 		.space	4
 5141 02c0 0F       		.byte	15
 5142 02c1 000000   		.space	3
 5143 02c4 01000000 		.word	1
 5144 02c8 14       		.byte	20
 5145 02c9 000000   		.space	3
 5146 02cc 03000000 		.word	3
 5147 02d0 44454300 		.ascii	"DEC\000"
ARM GAS  /tmp/cccWRI8T.s 			page 136


 5148 02d4 00000000 		.space	4
 5149 02d8 6F7200   		.ascii	"or\000"
 5150 02db 00000000 		.space	5
 5150      00
 5151 02e0 0F       		.byte	15
 5152 02e1 000000   		.space	3
 5153 02e4 02000000 		.word	2
 5154 02e8 15       		.byte	21
 5155 02e9 000000   		.space	3
 5156 02ec 03000000 		.word	3
 5157 02f0 48455800 		.ascii	"HEX\000"
 5158 02f4 00000000 		.space	4
 5159 02f8 786F7200 		.ascii	"xor\000"
 5160 02fc 00000000 		.space	4
 5161 0300 2C       		.byte	44
 5162 0301 000000   		.space	3
 5163 0304 FFFFFFFF 		.word	-1
 5164 0308 16       		.byte	22
 5165 0309 000000   		.space	3
 5166 030c 03000000 		.word	3
 5167 0310 2D2D0D00 		.ascii	"--\015\000"
 5168 0314 00000000 		.space	4
 5169 0318 524D4452 		.ascii	"RMDR\000"
 5169      00
 5170 031d 000000   		.space	3
 5171 0320 2D       		.byte	45
 5172 0321 000000   		.space	3
 5173 0324 FFFFFFFF 		.word	-1
 5174 0328 07       		.byte	7
 5175 0329 000000   		.space	3
 5176 032c 01000000 		.word	1
 5177 0330 43505800 		.ascii	"CPX\000"
 5178 0334 00000000 		.space	4
 5179 0338 482E6400 		.ascii	"H.d\000"
 5180 033c 00000000 		.space	4
 5181 0340 4D5F416E 		.ascii	"M_Angles\000"
 5181      676C6573 
 5181      00
 5182 0349 00000000 		.space	6
 5182      0000
 5183 034f 00       		.space	1
 5184 0350 06       		.byte	6
 5185 0351 000000   		.space	3
 5186 0354 02000000 		.word	2
 5187 0358 04       		.byte	4
 5188 0359 000000   		.space	3
 5189 035c 01000000 		.word	1
 5190 0360 44454700 		.ascii	"DEG\000"
 5191 0364 00000000 		.space	4
 5192 0368 500D5200 		.ascii	"P\015R\000"
 5193 036c 00000000 		.space	4
 5194 0370 07       		.byte	7
 5195 0371 000000   		.space	3
 5196 0374 02000000 		.word	2
 5197 0378 04       		.byte	4
 5198 0379 000000   		.space	3
 5199 037c 02000000 		.word	2
ARM GAS  /tmp/cccWRI8T.s 			page 137


 5200 0380 52414400 		.ascii	"RAD\000"
 5201 0384 00000000 		.space	4
 5202 0388 520D5000 		.ascii	"R\015P\000"
 5203 038c 00000000 		.space	4
 5204 0390 08       		.byte	8
 5205 0391 000000   		.space	3
 5206 0394 02000000 		.word	2
 5207 0398 00       		.byte	0
 5208 0399 000000   		.space	3
 5209 039c 01000000 		.word	1
 5210 03a0 47524144 		.ascii	"GRAD\000"
 5210      00
 5211 03a5 000000   		.space	3
 5212 03a8 48595000 		.ascii	"HYP\000"
 5213 03ac 00000000 		.space	4
 5214 03b0 06       		.byte	6
 5215 03b1 000000   		.space	3
 5216 03b4 01000000 		.word	1
 5217 03b8 07       		.byte	7
 5218 03b9 000000   		.space	3
 5219 03bc 01000000 		.word	1
 5220 03c0 482E4D53 		.ascii	"H.MS\000"
 5220      00
 5221 03c5 000000   		.space	3
 5222 03c8 482E6400 		.ascii	"H.d\000"
 5223 03cc 00000000 		.space	4
 5224 03d0 2C       		.byte	44
 5225 03d1 000000   		.space	3
 5226 03d4 FFFFFFFF 		.word	-1
 5227 03d8 00       		.byte	0
 5228 03d9 000000   		.space	3
 5229 03dc 02000000 		.word	2
 5230 03e0 2D2D0D00 		.ascii	"--\015\000"
 5231 03e4 00000000 		.space	4
 5232 03e8 4859509D 		.ascii	"HYP\235\000"
 5232      00
 5233 03ed 000000   		.space	3
 5234 03f0 2D       		.byte	45
 5235 03f1 000000   		.space	3
 5236 03f4 FFFFFFFF 		.word	-1
 5237 03f8 2E       		.byte	46
 5238 03f9 000000   		.space	3
 5239 03fc FFFFFFFF 		.word	-1
 5240 0400 43505800 		.ascii	"CPX\000"
 5241 0404 00000000 		.space	4
 5242 0408 00       		.ascii	"\000"
 5243 0409 00000000 		.space	7
 5243      000000
 5244 0410 4D5F4D69 		.ascii	"M_Misc\000"
 5244      736300
 5245 0417 00000000 		.space	8
 5245      00000000 
 5246 041f 00       		.space	1
 5247 0420 25       		.byte	37
 5248 0421 000000   		.space	3
 5249 0424 01000000 		.word	1
 5250 0428 14       		.byte	20
ARM GAS  /tmp/cccWRI8T.s 			page 138


 5251 0429 000000   		.space	3
 5252 042c 01000000 		.word	1
 5253 0430 7C587C00 		.ascii	"|X|\000"
 5254 0434 00000000 		.space	4
 5255 0438 329C00   		.ascii	"2\234\000"
 5256 043b 00000000 		.space	5
 5256      00
 5257 0440 25       		.byte	37
 5258 0441 000000   		.space	3
 5259 0444 02000000 		.word	2
 5260 0448 14       		.byte	20
 5261 0449 000000   		.space	3
 5262 044c 02000000 		.word	2
 5263 0450 524E4400 		.ascii	"RND\000"
 5264 0454 00000000 		.space	4
 5265 0458 4C6F67BA 		.ascii	"Log\272\000"
 5265      00
 5266 045d 000000   		.space	3
 5267 0460 26       		.byte	38
 5268 0461 000000   		.space	3
 5269 0464 01000000 		.word	1
 5270 0468 15       		.byte	21
 5271 0469 000000   		.space	3
 5272 046c 02000000 		.word	2
 5273 0470 49506172 		.ascii	"IPart\000"
 5273      7400
 5274 0476 0000     		.space	2
 5275 0478 4C6F678B 		.ascii	"Log\213\000"
 5275      00
 5276 047d 000000   		.space	3
 5277 0480 26       		.byte	38
 5278 0481 000000   		.space	3
 5279 0484 02000000 		.word	2
 5280 0488 16       		.byte	22
 5281 0489 000000   		.space	3
 5282 048c 02000000 		.word	2
 5283 0490 46506172 		.ascii	"FPart\000"
 5283      7400
 5284 0496 0000     		.space	2
 5285 0498 7C7C656C 		.ascii	"||el\000"
 5285      00
 5286 049d 000000   		.space	3
 5287 04a0 2C       		.byte	44
 5288 04a1 000000   		.space	3
 5289 04a4 FFFFFFFF 		.word	-1
 5290 04a8 22       		.byte	34
 5291 04a9 000000   		.space	3
 5292 04ac 02000000 		.word	2
 5293 04b0 2D2D0D00 		.ascii	"--\015\000"
 5294 04b4 00000000 		.space	4
 5295 04b8 832500   		.ascii	"\203%\000"
 5296 04bb 00000000 		.space	5
 5296      00
 5297 04c0 2D       		.byte	45
 5298 04c1 000000   		.space	3
 5299 04c4 FFFFFFFF 		.word	-1
 5300 04c8 2E       		.byte	46
ARM GAS  /tmp/cccWRI8T.s 			page 139


 5301 04c9 000000   		.space	3
 5302 04cc FFFFFFFF 		.word	-1
 5303 04d0 43505800 		.ascii	"CPX\000"
 5304 04d4 00000000 		.space	4
 5305 04d8 00       		.ascii	"\000"
 5306 04d9 00000000 		.space	7
 5306      000000
 5307 04e0 4D5F5377 		.ascii	"M_Swap\000"
 5307      617000
 5308 04e7 00000000 		.space	8
 5308      00000000 
 5309 04ef 00       		.space	1
 5310 04f0 0D       		.byte	13
 5311 04f1 000000   		.space	3
 5312 04f4 01000000 		.word	1
 5313 04f8 34       		.byte	52
 5314 04f9 000000   		.space	3
 5315 04fc 00A60000 		.word	42496
 5316 0500 53686F77 		.ascii	"Show\016\000"
 5316      0E00
 5317 0506 0000     		.space	2
 5318 0508 5B175D00 		.ascii	"[\027]\000"
 5319 050c 00000000 		.space	4
 5320 0510 0D       		.byte	13
 5321 0511 000000   		.space	3
 5322 0514 02000000 		.word	2
 5323 0518 2E       		.byte	46
 5324 0519 000000   		.space	3
 5325 051c FFFFFFFF 		.word	-1
 5326 0520 53686F77 		.ascii	"Show\015\000"
 5326      0D00
 5327 0526 0000     		.space	2
 5328 0528 00       		.ascii	"\000"
 5329 0529 00000000 		.space	7
 5329      000000
 5330 0530 0D       		.byte	13
 5331 0531 000000   		.space	3
 5332 0534 03000000 		.word	3
 5333 0538 34       		.byte	52
 5334 0539 000000   		.space	3
 5335 053c 00330000 		.word	13056
 5336 0540 78173F00 		.ascii	"x\027?\000"
 5337 0544 00000000 		.space	4
 5338 0548 7A173F00 		.ascii	"z\027?\000"
 5339 054c 00000000 		.space	4
 5340 0550 34       		.byte	52
 5341 0551 000000   		.space	3
 5342 0554 00320000 		.word	12800
 5343 0558 34       		.byte	52
 5344 0559 000000   		.space	3
 5345 055c 00340000 		.word	13312
 5346 0560 79173F00 		.ascii	"y\027?\000"
 5347 0564 00000000 		.space	4
 5348 0568 74173F00 		.ascii	"t\027?\000"
 5349 056c 00000000 		.space	4
 5350 0570 2C       		.byte	44
 5351 0571 000000   		.space	3
ARM GAS  /tmp/cccWRI8T.s 			page 140


 5352 0574 FFFFFFFF 		.word	-1
 5353 0578 2E       		.byte	46
 5354 0579 000000   		.space	3
 5355 057c FFFFFFFF 		.word	-1
 5356 0580 2D2D0D00 		.ascii	"--\015\000"
 5357 0584 00000000 		.space	4
 5358 0588 00       		.ascii	"\000"
 5359 0589 00000000 		.space	7
 5359      000000
 5360 0590 2D       		.byte	45
 5361 0591 000000   		.space	3
 5362 0594 FFFFFFFF 		.word	-1
 5363 0598 2E       		.byte	46
 5364 0599 000000   		.space	3
 5365 059c FFFFFFFF 		.word	-1
 5366 05a0 43505800 		.ascii	"CPX\000"
 5367 05a4 00000000 		.space	4
 5368 05a8 00       		.ascii	"\000"
 5369 05a9 00000000 		.space	7
 5369      000000
 5370 05b0 4D5F5072 		.ascii	"M_Program\000"
 5370      6F677261 
 5370      6D00
 5371 05ba 00000000 		.space	5
 5371      00
 5372 05bf 00       		.space	1
 5373 05c0 27       		.byte	39
 5374 05c1 000000   		.space	3
 5375 05c4 01000000 		.word	1
 5376 05c8 28       		.byte	40
 5377 05c9 000000   		.space	3
 5378 05cc 01000000 		.word	1
 5379 05d0 4C424C00 		.ascii	"LBL\000"
 5380 05d4 00000000 		.space	4
 5381 05d8 44534500 		.ascii	"DSE\000"
 5382 05dc 00000000 		.space	4
 5383 05e0 27       		.byte	39
 5384 05e1 000000   		.space	3
 5385 05e4 02000000 		.word	2
 5386 05e8 28       		.byte	40
 5387 05e9 000000   		.space	3
 5388 05ec 02000000 		.word	2
 5389 05f0 52544E00 		.ascii	"RTN\000"
 5390 05f4 00000000 		.space	4
 5391 05f8 49534700 		.ascii	"ISG\000"
 5392 05fc 00000000 		.space	4
 5393 0600 25       		.byte	37
 5394 0601 000000   		.space	3
 5395 0604 03000000 		.word	3
 5396 0608 34       		.byte	52
 5397 0609 000000   		.space	3
 5398 060c 00600000 		.word	24576
 5399 0610 50617573 		.ascii	"Pause\000"
 5399      6500
 5400 0616 0000     		.space	2
 5401 0618 44454300 		.ascii	"DEC\000"
 5402 061c 00000000 		.space	4
ARM GAS  /tmp/cccWRI8T.s 			page 141


 5403 0620 12       		.byte	18
 5404 0621 000000   		.space	3
 5405 0624 03000000 		.word	3
 5406 0628 34       		.byte	52
 5407 0629 000000   		.space	3
 5408 062c 00610000 		.word	24832
 5409 0630 47544F00 		.ascii	"GTO\000"
 5410 0634 00000000 		.space	4
 5411 0638 494E4300 		.ascii	"INC\000"
 5412 063c 00000000 		.space	4
 5413 0640 2C       		.byte	44
 5414 0641 000000   		.space	3
 5415 0644 FFFFFFFF 		.word	-1
 5416 0648 34       		.byte	52
 5417 0649 000000   		.space	3
 5418 064c 00570000 		.word	22272
 5419 0650 2D2D0D00 		.ascii	"--\015\000"
 5420 0654 00000000 		.space	4
 5421 0658 4241434B 		.ascii	"BACK\000"
 5421      00
 5422 065d 000000   		.space	3
 5423 0660 2D       		.byte	45
 5424 0661 000000   		.space	3
 5425 0664 FFFFFFFF 		.word	-1
 5426 0668 34       		.byte	52
 5427 0669 000000   		.space	3
 5428 066c 00560000 		.word	22016
 5429 0670 43505800 		.ascii	"CPX\000"
 5430 0674 00000000 		.space	4
 5431 0678 534B4950 		.ascii	"SKIP\000"
 5431      00
 5432 067d 000000   		.space	3
 5433 0680 4D5F5365 		.ascii	"M_Setup1\000"
 5433      74757031 
 5433      00
 5434 0689 00000000 		.space	6
 5434      0000
 5435 068f 00       		.space	1
 5436 0690 32       		.byte	50
 5437 0691 000000   		.space	3
 5438 0694 00000000 		.word	0
 5439 0698 30       		.byte	48
 5440 0699 000000   		.space	3
 5441 069c 00000000 		.word	0
 5442 06a0 45584954 		.ascii	"EXIT\000"
 5442      00
 5443 06a5 000000   		.space	3
 5444 06a8 53797374 		.ascii	"System\000"
 5444      656D00
 5445 06af 00       		.space	1
 5446 06b0 31       		.byte	49
 5447 06b1 000000   		.space	3
 5448 06b4 09000000 		.word	9
 5449 06b8 2E       		.byte	46
 5450 06b9 000000   		.space	3
 5451 06bc FFFFFFFF 		.word	-1
 5452 06c0 48454C50 		.ascii	"HELP\000"
ARM GAS  /tmp/cccWRI8T.s 			page 142


 5452      00
 5453 06c5 000000   		.space	3
 5454 06c8 00       		.ascii	"\000"
 5455 06c9 00000000 		.space	7
 5455      000000
 5456 06d0 31       		.byte	49
 5457 06d1 000000   		.space	3
 5458 06d4 02000000 		.word	2
 5459 06d8 31       		.byte	49
 5460 06d9 000000   		.space	3
 5461 06dc 06000000 		.word	6
 5462 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5462      4F00
 5463 06e6 0000     		.space	2
 5464 06e8 53765241 		.ascii	"SvRAM\000"
 5464      4D00
 5465 06ee 0000     		.space	2
 5466 06f0 31       		.byte	49
 5467 06f1 000000   		.space	3
 5468 06f4 03000000 		.word	3
 5469 06f8 31       		.byte	49
 5470 06f9 000000   		.space	3
 5471 06fc 07000000 		.word	7
 5472 0700 4F6E5243 		.ascii	"OnRCL\000"
 5472      4C00
 5473 0706 0000     		.space	2
 5474 0708 4C645241 		.ascii	"LdRAM\000"
 5474      4D00
 5475 070e 0000     		.space	2
 5476 0710 2C       		.byte	44
 5477 0711 000000   		.space	3
 5478 0714 FFFFFFFF 		.word	-1
 5479 0718 2E       		.byte	46
 5480 0719 000000   		.space	3
 5481 071c FFFFFFFF 		.word	-1
 5482 0720 2D2D0D00 		.ascii	"--\015\000"
 5483 0724 00000000 		.space	4
 5484 0728 00       		.ascii	"\000"
 5485 0729 00000000 		.space	7
 5485      000000
 5486 0730 2D       		.byte	45
 5487 0731 000000   		.space	3
 5488 0734 FFFFFFFF 		.word	-1
 5489 0738 2E       		.byte	46
 5490 0739 000000   		.space	3
 5491 073c FFFFFFFF 		.word	-1
 5492 0740 43505800 		.ascii	"CPX\000"
 5493 0744 00000000 		.space	4
 5494 0748 00       		.ascii	"\000"
 5495 0749 00000000 		.space	7
 5495      000000
 5496 0750 4D5F4172 		.ascii	"M_Arrow\000"
 5496      726F7700 
 5497 0758 00000000 		.space	7
 5497      000000
 5498 075f 00       		.space	1
 5499 0760 0E       		.byte	14
ARM GAS  /tmp/cccWRI8T.s 			page 143


 5500 0761 000000   		.space	3
 5501 0764 01000000 		.word	1
 5502 0768 06       		.byte	6
 5503 0769 000000   		.space	3
 5504 076c 02000000 		.word	2
 5505 0770 42696E00 		.ascii	"Bin\000"
 5506 0774 00000000 		.space	4
 5507 0778 44454700 		.ascii	"DEG\000"
 5508 077c 00000000 		.space	4
 5509 0780 0E       		.byte	14
 5510 0781 000000   		.space	3
 5511 0784 02000000 		.word	2
 5512 0788 07       		.byte	7
 5513 0789 000000   		.space	3
 5514 078c 02000000 		.word	2
 5515 0790 4F637400 		.ascii	"Oct\000"
 5516 0794 00000000 		.space	4
 5517 0798 52414400 		.ascii	"RAD\000"
 5518 079c 00000000 		.space	4
 5519 07a0 0F       		.byte	15
 5520 07a1 000000   		.space	3
 5521 07a4 01000000 		.word	1
 5522 07a8 08       		.byte	8
 5523 07a9 000000   		.space	3
 5524 07ac 02000000 		.word	2
 5525 07b0 44656300 		.ascii	"Dec\000"
 5526 07b4 00000000 		.space	4
 5527 07b8 47726164 		.ascii	"Grad\000"
 5527      00
 5528 07bd 000000   		.space	3
 5529 07c0 0F       		.byte	15
 5530 07c1 000000   		.space	3
 5531 07c4 02000000 		.word	2
 5532 07c8 06       		.byte	6
 5533 07c9 000000   		.space	3
 5534 07cc 01000000 		.word	1
 5535 07d0 48657800 		.ascii	"Hex\000"
 5536 07d4 00000000 		.space	4
 5537 07d8 0D484D53 		.ascii	"\015HMS\000"
 5537      00
 5538 07dd 000000   		.space	3
 5539 07e0 2C       		.byte	44
 5540 07e1 000000   		.space	3
 5541 07e4 FFFFFFFF 		.word	-1
 5542 07e8 07       		.byte	7
 5543 07e9 000000   		.space	3
 5544 07ec 01000000 		.word	1
 5545 07f0 2D2D0D00 		.ascii	"--\015\000"
 5546 07f4 00000000 		.space	4
 5547 07f8 484D530D 		.ascii	"HMS\015\000"
 5547      00
 5548 07fd 000000   		.space	3
 5549 0800 2D       		.byte	45
 5550 0801 000000   		.space	3
 5551 0804 FFFFFFFF 		.word	-1
 5552 0808 2E       		.byte	46
 5553 0809 000000   		.space	3
ARM GAS  /tmp/cccWRI8T.s 			page 144


 5554 080c FFFFFFFF 		.word	-1
 5555 0810 43505800 		.ascii	"CPX\000"
 5556 0814 00000000 		.space	4
 5557 0818 00       		.ascii	"\000"
 5558 0819 00000000 		.space	7
 5558      000000
 5559 0820 4D5F466C 		.ascii	"M_Flags\000"
 5559      61677300 
 5560 0828 00000000 		.space	7
 5560      000000
 5561 082f 00       		.space	1
 5562 0830 1E       		.byte	30
 5563 0831 000000   		.space	3
 5564 0834 01000000 		.word	1
 5565 0838 34       		.byte	52
 5566 0839 000000   		.space	3
 5567 083c 00740000 		.word	29696
 5568 0840 53465F00 		.ascii	"SF_\000"
 5569 0844 00000000 		.space	4
 5570 0848 46533F00 		.ascii	"FS?\000"
 5571 084c 00000000 		.space	4
 5572 0850 1E       		.byte	30
 5573 0851 000000   		.space	3
 5574 0854 02000000 		.word	2
 5575 0858 34       		.byte	52
 5576 0859 000000   		.space	3
 5577 085c 00750000 		.word	29952
 5578 0860 43465F00 		.ascii	"CF_\000"
 5579 0864 00000000 		.space	4
 5580 0868 46433F00 		.ascii	"FC?\000"
 5581 086c 00000000 		.space	4
 5582 0870 1F       		.byte	31
 5583 0871 000000   		.space	3
 5584 0874 01000000 		.word	1
 5585 0878 34       		.byte	52
 5586 0879 000000   		.space	3
 5587 087c 00500000 		.word	20480
 5588 0880 783D3F00 		.ascii	"x=?\000"
 5589 0884 00000000 		.space	4
 5590 0888 783C3F00 		.ascii	"x<?\000"
 5591 088c 00000000 		.space	4
 5592 0890 1F       		.byte	31
 5593 0891 000000   		.space	3
 5594 0894 02000000 		.word	2
 5595 0898 34       		.byte	52
 5596 0899 000000   		.space	3
 5597 089c 00510000 		.word	20736
 5598 08a0 780B3F00 		.ascii	"x\013?\000"
 5599 08a4 00000000 		.space	4
 5600 08a8 783C3D3F 		.ascii	"x<=?\000"
 5600      00
 5601 08ad 000000   		.space	3
 5602 08b0 2C       		.byte	44
 5603 08b1 000000   		.space	3
 5604 08b4 FFFFFFFF 		.word	-1
 5605 08b8 34       		.byte	52
 5606 08b9 000000   		.space	3
ARM GAS  /tmp/cccWRI8T.s 			page 145


 5607 08bc 00530000 		.word	21248
 5608 08c0 2D2D0D00 		.ascii	"--\015\000"
 5609 08c4 00000000 		.space	4
 5610 08c8 783E3D3F 		.ascii	"x>=?\000"
 5610      00
 5611 08cd 000000   		.space	3
 5612 08d0 2D       		.byte	45
 5613 08d1 000000   		.space	3
 5614 08d4 FFFFFFFF 		.word	-1
 5615 08d8 34       		.byte	52
 5616 08d9 000000   		.space	3
 5617 08dc 00520000 		.word	20992
 5618 08e0 43505800 		.ascii	"CPX\000"
 5619 08e4 00000000 		.space	4
 5620 08e8 783E3F00 		.ascii	"x>?\000"
 5621 08ec 00000000 		.space	4
 5622 08f0 4D5F5072 		.ascii	"M_Prob\000"
 5622      6F6200
 5623 08f7 00000000 		.space	8
 5623      00000000 
 5624 08ff 00       		.space	1
 5625 0900 18       		.byte	24
 5626 0901 000000   		.space	3
 5627 0904 03000000 		.word	3
 5628 0908 34       		.byte	52
 5629 0909 000000   		.space	3
 5630 090c 31020000 		.word	561
 5631 0910 46616374 		.ascii	"Fact!\000"
 5631      2100
 5632 0916 0000     		.space	2
 5633 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5633      00
 5634 091d 000000   		.space	3
 5635 0920 18       		.byte	24
 5636 0921 000000   		.space	3
 5637 0924 01000000 		.word	1
 5638 0928 19       		.byte	25
 5639 0929 000000   		.space	3
 5640 092c 01000000 		.word	1
 5641 0930 43792C78 		.ascii	"Cy,x\000"
 5641      00
 5642 0935 000000   		.space	3
 5643 0938 9400     		.ascii	"\224\000"
 5644 093a 00000000 		.space	6
 5644      0000
 5645 0940 18       		.byte	24
 5646 0941 000000   		.space	3
 5647 0944 02000000 		.word	2
 5648 0948 19       		.byte	25
 5649 0949 000000   		.space	3
 5650 094c 02000000 		.word	2
 5651 0950 50792C78 		.ascii	"Py,x\000"
 5651      00
 5652 0955 000000   		.space	3
 5653 0958 949D00   		.ascii	"\224\235\000"
 5654 095b 00000000 		.space	5
 5654      00
ARM GAS  /tmp/cccWRI8T.s 			page 146


 5655 0960 08       		.byte	8
 5656 0961 000000   		.space	3
 5657 0964 01000000 		.word	1
 5658 0968 34       		.byte	52
 5659 0969 000000   		.space	3
 5660 096c 34010000 		.word	308
 5661 0970 52414E23 		.ascii	"RAN#\000"
 5661      00
 5662 0975 000000   		.space	3
 5663 0978 53454544 		.ascii	"SEED\000"
 5663      00
 5664 097d 000000   		.space	3
 5665 0980 2C       		.byte	44
 5666 0981 000000   		.space	3
 5667 0984 FFFFFFFF 		.word	-1
 5668 0988 2E       		.byte	46
 5669 0989 000000   		.space	3
 5670 098c FFFFFFFF 		.word	-1
 5671 0990 2D2D0D00 		.ascii	"--\015\000"
 5672 0994 00000000 		.space	4
 5673 0998 00       		.ascii	"\000"
 5674 0999 00000000 		.space	7
 5674      000000
 5675 09a0 2D       		.byte	45
 5676 09a1 000000   		.space	3
 5677 09a4 FFFFFFFF 		.word	-1
 5678 09a8 2E       		.byte	46
 5679 09a9 000000   		.space	3
 5680 09ac FFFFFFFF 		.word	-1
 5681 09b0 43505800 		.ascii	"CPX\000"
 5682 09b4 00000000 		.space	4
 5683 09b8 00       		.ascii	"\000"
 5684 09b9 00000000 		.space	7
 5684      000000
 5685 09c0 4D5F5374 		.ascii	"M_Stats\000"
 5685      61747300 
 5686 09c8 00000000 		.space	7
 5686      000000
 5687 09cf 00       		.space	1
 5688 09d0 1A       		.byte	26
 5689 09d1 000000   		.space	3
 5690 09d4 01000000 		.word	1
 5691 09d8 1A       		.byte	26
 5692 09d9 000000   		.space	3
 5693 09dc 02000000 		.word	2
 5694 09e0 0100     		.ascii	"\001\000"
 5695 09e2 00000000 		.space	6
 5695      0000
 5696 09e8 532E442E 		.ascii	"S.D.\000"
 5696      00
 5697 09ed 000000   		.space	3
 5698 09f0 1B       		.byte	27
 5699 09f1 000000   		.space	3
 5700 09f4 01000000 		.word	1
 5701 09f8 34       		.byte	52
 5702 09f9 000000   		.space	3
 5703 09fc 74020000 		.word	628
ARM GAS  /tmp/cccWRI8T.s 			page 147


 5704 0a00 792D6861 		.ascii	"y-hat\000"
 5704      7400
 5705 0a06 0000     		.space	2
 5706 0a08 782D6861 		.ascii	"x-hat\000"
 5706      7400
 5707 0a0e 0000     		.space	2
 5708 0a10 34       		.byte	52
 5709 0a11 000000   		.space	3
 5710 0a14 27010000 		.word	295
 5711 0a18 34       		.byte	52
 5712 0a19 000000   		.space	3
 5713 0a1c 28010000 		.word	296
 5714 0a20 434F5252 		.ascii	"CORR\000"
 5714      00
 5715 0a25 000000   		.space	3
 5716 0a28 4C2E522E 		.ascii	"L.R.\000"
 5716      00
 5717 0a2d 000000   		.space	3
 5718 0a30 34       		.byte	52
 5719 0a31 000000   		.space	3
 5720 0a34 32010000 		.word	306
 5721 0a38 34       		.byte	52
 5722 0a39 000000   		.space	3
 5723 0a3c 31010000 		.word	305
 5724 0a40 42657374 		.ascii	"BestF\000"
 5724      4600
 5725 0a46 0000     		.space	2
 5726 0a48 4C6F6746 		.ascii	"LogFit\000"
 5726      697400
 5727 0a4f 00       		.space	1
 5728 0a50 34       		.byte	52
 5729 0a51 000000   		.space	3
 5730 0a54 2E010000 		.word	302
 5731 0a58 34       		.byte	52
 5732 0a59 000000   		.space	3
 5733 0a5c 2F010000 		.word	303
 5734 0a60 4C696E65 		.ascii	"Linear\000"
 5734      617200
 5735 0a67 00       		.space	1
 5736 0a68 45787046 		.ascii	"ExpFit\000"
 5736      697400
 5737 0a6f 00       		.space	1
 5738 0a70 2D       		.byte	45
 5739 0a71 000000   		.space	3
 5740 0a74 FFFFFFFF 		.word	-1
 5741 0a78 34       		.byte	52
 5742 0a79 000000   		.space	3
 5743 0a7c 30010000 		.word	304
 5744 0a80 43505800 		.ascii	"CPX\000"
 5745 0a84 00000000 		.space	4
 5746 0a88 50777246 		.ascii	"PwrFit\000"
 5746      697400
 5747 0a8f 00       		.space	1
 5748 0a90 4D5F5365 		.ascii	"M_Setup2\000"
 5748      74757032 
 5748      00
 5749 0a99 00000000 		.space	6
ARM GAS  /tmp/cccWRI8T.s 			page 148


 5749      0000
 5750 0a9f 00       		.space	1
 5751 0aa0 31       		.byte	49
 5752 0aa1 000000   		.space	3
 5753 0aa4 04000000 		.word	4
 5754 0aa8 2E       		.byte	46
 5755 0aa9 000000   		.space	3
 5756 0aac FFFFFFFF 		.word	-1
 5757 0ab0 53764C49 		.ascii	"SvLIB\000"
 5757      4200
 5758 0ab6 0000     		.space	2
 5759 0ab8 00       		.ascii	"\000"
 5760 0ab9 00000000 		.space	7
 5760      000000
 5761 0ac0 31       		.byte	49
 5762 0ac1 000000   		.space	3
 5763 0ac4 05000000 		.word	5
 5764 0ac8 2E       		.byte	46
 5765 0ac9 000000   		.space	3
 5766 0acc FFFFFFFF 		.word	-1
 5767 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5767      4200
 5768 0ad6 0000     		.space	2
 5769 0ad8 00       		.ascii	"\000"
 5770 0ad9 00000000 		.space	7
 5770      000000
 5771 0ae0 31       		.byte	49
 5772 0ae1 000000   		.space	3
 5773 0ae4 0A000000 		.word	10
 5774 0ae8 2E       		.byte	46
 5775 0ae9 000000   		.space	3
 5776 0aec FFFFFFFF 		.word	-1
 5777 0af0 53764350 		.ascii	"SvCPRG\000"
 5777      524700
 5778 0af7 00       		.space	1
 5779 0af8 00       		.ascii	"\000"
 5780 0af9 00000000 		.space	7
 5780      000000
 5781 0b00 31       		.byte	49
 5782 0b01 000000   		.space	3
 5783 0b04 08000000 		.word	8
 5784 0b08 2E       		.byte	46
 5785 0b09 000000   		.space	3
 5786 0b0c FFFFFFFF 		.word	-1
 5787 0b10 4C645052 		.ascii	"LdPRG\000"
 5787      4700
 5788 0b16 0000     		.space	2
 5789 0b18 00       		.ascii	"\000"
 5790 0b19 00000000 		.space	7
 5790      000000
 5791 0b20 2C       		.byte	44
 5792 0b21 000000   		.space	3
 5793 0b24 FFFFFFFF 		.word	-1
 5794 0b28 2E       		.byte	46
 5795 0b29 000000   		.space	3
 5796 0b2c FFFFFFFF 		.word	-1
 5797 0b30 2D2D0D00 		.ascii	"--\015\000"
ARM GAS  /tmp/cccWRI8T.s 			page 149


 5798 0b34 00000000 		.space	4
 5799 0b38 00       		.ascii	"\000"
 5800 0b39 00000000 		.space	7
 5800      000000
 5801 0b40 2D       		.byte	45
 5802 0b41 000000   		.space	3
 5803 0b44 FFFFFFFF 		.word	-1
 5804 0b48 2E       		.byte	46
 5805 0b49 000000   		.space	3
 5806 0b4c FFFFFFFF 		.word	-1
 5807 0b50 43505800 		.ascii	"CPX\000"
 5808 0b54 00000000 		.space	4
 5809 0b58 00       		.ascii	"\000"
 5810 0b59 00000000 		.space	7
 5810      000000
 5811 0b60 4D5F536F 		.ascii	"M_Solve\000"
 5811      6C766500 
 5812 0b68 00000000 		.space	7
 5812      000000
 5813 0b6f 00       		.space	1
 5814 0b70 20       		.byte	32
 5815 0b71 000000   		.space	3
 5816 0b74 01000000 		.word	1
 5817 0b78 2E       		.byte	46
 5818 0b79 000000   		.space	3
 5819 0b7c FFFFFFFF 		.word	-1
 5820 0b80 534C5600 		.ascii	"SLV\000"
 5821 0b84 00000000 		.space	4
 5822 0b88 00       		.ascii	"\000"
 5823 0b89 00000000 		.space	7
 5823      000000
 5824 0b90 20       		.byte	32
 5825 0b91 000000   		.space	3
 5826 0b94 02000000 		.word	2
 5827 0b98 2E       		.byte	46
 5828 0b99 000000   		.space	3
 5829 0b9c FFFFFFFF 		.word	-1
 5830 0ba0 04206478 		.ascii	"\004 dx\000"
 5830      00
 5831 0ba5 000000   		.space	3
 5832 0ba8 00       		.ascii	"\000"
 5833 0ba9 00000000 		.space	7
 5833      000000
 5834 0bb0 21       		.byte	33
 5835 0bb1 000000   		.space	3
 5836 0bb4 02000000 		.word	2
 5837 0bb8 2E       		.byte	46
 5838 0bb9 000000   		.space	3
 5839 0bbc FFFFFFFF 		.word	-1
 5840 0bc0 53554D00 		.ascii	"SUM\000"
 5841 0bc4 00000000 		.space	4
 5842 0bc8 00       		.ascii	"\000"
 5843 0bc9 00000000 		.space	7
 5843      000000
 5844 0bd0 21       		.byte	33
 5845 0bd1 000000   		.space	3
 5846 0bd4 01000000 		.word	1
ARM GAS  /tmp/cccWRI8T.s 			page 150


 5847 0bd8 2E       		.byte	46
 5848 0bd9 000000   		.space	3
 5849 0bdc FFFFFFFF 		.word	-1
 5850 0be0 50524F44 		.ascii	"PROD\000"
 5850      00
 5851 0be5 000000   		.space	3
 5852 0be8 00       		.ascii	"\000"
 5853 0be9 00000000 		.space	7
 5853      000000
 5854 0bf0 2C       		.byte	44
 5855 0bf1 000000   		.space	3
 5856 0bf4 FFFFFFFF 		.word	-1
 5857 0bf8 2E       		.byte	46
 5858 0bf9 000000   		.space	3
 5859 0bfc FFFFFFFF 		.word	-1
 5860 0c00 2D2D0D00 		.ascii	"--\015\000"
 5861 0c04 00000000 		.space	4
 5862 0c08 00       		.ascii	"\000"
 5863 0c09 00000000 		.space	7
 5863      000000
 5864 0c10 2D       		.byte	45
 5865 0c11 000000   		.space	3
 5866 0c14 FFFFFFFF 		.word	-1
 5867 0c18 2E       		.byte	46
 5868 0c19 000000   		.space	3
 5869 0c1c FFFFFFFF 		.word	-1
 5870 0c20 43505800 		.ascii	"CPX\000"
 5871 0c24 00000000 		.space	4
 5872 0c28 00       		.ascii	"\000"
 5873 0c29 00000000 		.space	7
 5873      000000
 5874 0c30 4D5F426C 		.ascii	"M_Blank2\000"
 5874      616E6B32 
 5874      00
 5875 0c39 00000000 		.space	6
 5875      0000
 5876 0c3f 00       		.space	1
 5877 0c40 28       		.byte	40
 5878 0c41 000000   		.space	3
 5879 0c44 03000000 		.word	3
 5880 0c48 2E       		.byte	46
 5881 0c49 000000   		.space	3
 5882 0c4c FFFFFFFF 		.word	-1
 5883 0c50 912B00   		.ascii	"\221+\000"
 5884 0c53 00000000 		.space	5
 5884      00
 5885 0c58 00       		.ascii	"\000"
 5886 0c59 00000000 		.space	7
 5886      000000
 5887 0c60 16       		.byte	22
 5888 0c61 000000   		.space	3
 5889 0c64 01000000 		.word	1
 5890 0c68 2E       		.byte	46
 5891 0c69 000000   		.space	3
 5892 0c6c FFFFFFFF 		.word	-1
 5893 0c70 312F5800 		.ascii	"1/X\000"
 5894 0c74 00000000 		.space	4
ARM GAS  /tmp/cccWRI8T.s 			page 151


 5895 0c78 00       		.ascii	"\000"
 5896 0c79 00000000 		.space	7
 5896      000000
 5897 0c80 1C       		.byte	28
 5898 0c81 000000   		.space	3
 5899 0c84 01000000 		.word	1
 5900 0c88 2E       		.byte	46
 5901 0c89 000000   		.space	3
 5902 0c8c FFFFFFFF 		.word	-1
 5903 0c90 035800   		.ascii	"\003X\000"
 5904 0c93 00000000 		.space	5
 5904      00
 5905 0c98 00       		.ascii	"\000"
 5906 0c99 00000000 		.space	7
 5906      000000
 5907 0ca0 13       		.byte	19
 5908 0ca1 000000   		.space	3
 5909 0ca4 02000000 		.word	2
 5910 0ca8 2E       		.byte	46
 5911 0ca9 000000   		.space	3
 5912 0cac FFFFFFFF 		.word	-1
 5913 0cb0 4C4F4700 		.ascii	"LOG\000"
 5914 0cb4 00000000 		.space	4
 5915 0cb8 00       		.ascii	"\000"
 5916 0cb9 00000000 		.space	7
 5916      000000
 5917 0cc0 2C       		.byte	44
 5918 0cc1 000000   		.space	3
 5919 0cc4 FFFFFFFF 		.word	-1
 5920 0cc8 2E       		.byte	46
 5921 0cc9 000000   		.space	3
 5922 0ccc FFFFFFFF 		.word	-1
 5923 0cd0 2D2D0D00 		.ascii	"--\015\000"
 5924 0cd4 00000000 		.space	4
 5925 0cd8 00       		.ascii	"\000"
 5926 0cd9 00000000 		.space	7
 5926      000000
 5927 0ce0 2D       		.byte	45
 5928 0ce1 000000   		.space	3
 5929 0ce4 FFFFFFFF 		.word	-1
 5930 0ce8 2E       		.byte	46
 5931 0ce9 000000   		.space	3
 5932 0cec FFFFFFFF 		.word	-1
 5933 0cf0 43505800 		.ascii	"CPX\000"
 5934 0cf4 00000000 		.space	4
 5935 0cf8 00       		.ascii	"\000"
 5936 0cf9 00000000 		.space	7
 5936      000000
 5937 0d00 4D5F416C 		.ascii	"M_Alpha\000"
 5937      70686100 
 5938 0d08 00000000 		.space	7
 5938      000000
 5939 0d0f 00       		.space	1
 5940 0d10 34       		.byte	52
 5941 0d11 000000   		.space	3
 5942 0d14 78010000 		.word	376
 5943 0d18 34       		.byte	52
ARM GAS  /tmp/cccWRI8T.s 			page 152


 5944 0d19 000000   		.space	3
 5945 0d1c 6D010000 		.word	365
 5946 0d20 582D3EA0 		.ascii	"X->\240\000"
 5946      00
 5947 0d25 000000   		.space	3
 5948 0d28 A054494D 		.ascii	"\240TIME\000"
 5948      4500
 5949 0d2e 0000     		.space	2
 5950 0d30 34       		.byte	52
 5951 0d31 000000   		.space	3
 5952 0d34 77010000 		.word	375
 5953 0d38 34       		.byte	52
 5954 0d39 000000   		.space	3
 5955 0d3c 6C010000 		.word	364
 5956 0d40 A02D3E58 		.ascii	"\240->X\000"
 5956      00
 5957 0d45 000000   		.space	3
 5958 0d48 A0444154 		.ascii	"\240DATE\000"
 5958      4500
 5959 0d4e 0000     		.space	2
 5960 0d50 34       		.byte	52
 5961 0d51 000000   		.space	3
 5962 0d54 00480000 		.word	18432
 5963 0d58 34       		.byte	52
 5964 0d59 000000   		.space	3
 5965 0d5c 6A010000 		.word	362
 5966 0d60 A0495000 		.ascii	"\240IP\000"
 5967 0d64 00000000 		.space	4
 5968 0d68 A0444159 		.ascii	"\240DAY\000"
 5968      00
 5969 0d6d 000000   		.space	3
 5970 0d70 34       		.byte	52
 5971 0d71 000000   		.space	3
 5972 0d74 76010000 		.word	374
 5973 0d78 34       		.byte	52
 5974 0d79 000000   		.space	3
 5975 0d7c 6B010000 		.word	363
 5976 0d80 A04C454E 		.ascii	"\240LENG\000"
 5976      4700
 5977 0d86 0000     		.space	2
 5978 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 5978      4800
 5979 0d8e 0000     		.space	2
 5980 0d90 2C       		.byte	44
 5981 0d91 000000   		.space	3
 5982 0d94 FFFFFFFF 		.word	-1
 5983 0d98 2C       		.byte	44
 5984 0d99 000000   		.space	3
 5985 0d9c 01000000 		.word	1
 5986 0da0 2D2D0D00 		.ascii	"--\015\000"
 5987 0da4 00000000 		.space	4
 5988 0da8 00       		.ascii	"\000"
 5989 0da9 00000000 		.space	7
 5989      000000
 5990 0db0 2D       		.byte	45
 5991 0db1 000000   		.space	3
 5992 0db4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cccWRI8T.s 			page 153


 5993 0db8 2D       		.byte	45
 5994 0db9 000000   		.space	3
 5995 0dbc 01000000 		.word	1
 5996 0dc0 43505800 		.ascii	"CPX\000"
 5997 0dc4 00000000 		.space	4
 5998 0dc8 00       		.ascii	"\000"
 5999 0dc9 00000000 		.space	7
 5999      000000
 6000 0dd0 4D5F435F 		.ascii	"M_C_Lock\000"
 6000      4C6F636B 
 6000      00
 6001 0dd9 00000000 		.space	6
 6001      0000
 6002 0ddf 00       		.space	1
 6003 0de0 18       		.byte	24
 6004 0de1 000000   		.space	3
 6005 0de4 02000000 		.word	2
 6006 0de8 04       		.byte	4
 6007 0de9 000000   		.space	3
 6008 0dec 02000000 		.word	2
 6009 0df0 504F4C41 		.ascii	"POLAR\000"
 6009      5200
 6010 0df6 0000     		.space	2
 6011 0df8 0D205000 		.ascii	"\015 P\000"
 6012 0dfc 00000000 		.space	4
 6013 0e00 18       		.byte	24
 6014 0e01 000000   		.space	3
 6015 0e04 01000000 		.word	1
 6016 0e08 04       		.byte	4
 6017 0e09 000000   		.space	3
 6018 0e0c 01000000 		.word	1
 6019 0e10 52454354 		.ascii	"RECT\000"
 6019      00
 6020 0e15 000000   		.space	3
 6021 0e18 0D205200 		.ascii	"\015 R\000"
 6022 0e1c 00000000 		.space	4
 6023 0e20 0E       		.byte	14
 6024 0e21 000000   		.space	3
 6025 0e24 01000000 		.word	1
 6026 0e28 0E       		.byte	14
 6027 0e29 000000   		.space	3
 6028 0e2c 03000000 		.word	3
 6029 0e30 43485306 		.ascii	"CHS\006y\000"
 6029      7900
 6030 0e36 0000     		.space	2
 6031 0e38 43485306 		.ascii	"CHS\006x\000"
 6031      7800
 6032 0e3e 0000     		.space	2
 6033 0e40 0D       		.byte	13
 6034 0e41 000000   		.space	3
 6035 0e44 01000000 		.word	1
 6036 0e48 00       		.byte	0
 6037 0e49 000000   		.space	3
 6038 0e4c 01000000 		.word	1
 6039 0e50 78177900 		.ascii	"x\027y\000"
 6040 0e54 00000000 		.space	4
 6041 0e58 48595000 		.ascii	"HYP\000"
ARM GAS  /tmp/cccWRI8T.s 			page 154


 6042 0e5c 00000000 		.space	4
 6043 0e60 2C       		.byte	44
 6044 0e61 000000   		.space	3
 6045 0e64 FFFFFFFF 		.word	-1
 6046 0e68 0F       		.byte	15
 6047 0e69 000000   		.space	3
 6048 0e6c 01000000 		.word	1
 6049 0e70 2D2D0D00 		.ascii	"--\015\000"
 6050 0e74 00000000 		.space	4
 6051 0e78 1106AF00 		.ascii	"\021\006\257\000"
 6052 0e7c 00000000 		.space	4
 6053 0e80 2D       		.byte	45
 6054 0e81 000000   		.space	3
 6055 0e84 FFFFFFFF 		.word	-1
 6056 0e88 0C       		.byte	12
 6057 0e89 000000   		.space	3
 6058 0e8c 01000000 		.word	1
 6059 0e90 43505800 		.ascii	"CPX\000"
 6060 0e94 00000000 		.space	4
 6061 0e98 1106434E 		.ascii	"\021\006CNST\000"
 6061      535400
 6062 0e9f 00       		.space	1
 6063 0ea0 4D5F436C 		.ascii	"M_Clear_C\000"
 6063      6561725F 
 6063      4300
 6064 0eaa 00000000 		.space	5
 6064      00
 6065 0eaf 00       		.space	1
 6066 0eb0 2E       		.byte	46
 6067 0eb1 000000   		.space	3
 6068 0eb4 FFFFFFFF 		.word	-1
 6069 0eb8 2E       		.byte	46
 6070 0eb9 000000   		.space	3
 6071 0ebc FFFFFFFF 		.word	-1
 6072 0ec0 00       		.ascii	"\000"
 6073 0ec1 00000000 		.space	7
 6073      000000
 6074 0ec8 00       		.ascii	"\000"
 6075 0ec9 00000000 		.space	7
 6075      000000
 6076 0ed0 2E       		.byte	46
 6077 0ed1 000000   		.space	3
 6078 0ed4 FFFFFFFF 		.word	-1
 6079 0ed8 2E       		.byte	46
 6080 0ed9 000000   		.space	3
 6081 0edc FFFFFFFF 		.word	-1
 6082 0ee0 00       		.ascii	"\000"
 6083 0ee1 00000000 		.space	7
 6083      000000
 6084 0ee8 00       		.ascii	"\000"
 6085 0ee9 00000000 		.space	7
 6085      000000
 6086 0ef0 10       		.byte	16
 6087 0ef1 000000   		.space	3
 6088 0ef4 03000000 		.word	3
 6089 0ef8 34       		.byte	52
 6090 0ef9 000000   		.space	3
ARM GAS  /tmp/cccWRI8T.s 			page 155


 6091 0efc 74010000 		.word	372
 6092 0f00 434C7800 		.ascii	"CLx\000"
 6093 0f04 00000000 		.space	4
 6094 0f08 434C06A0 		.ascii	"CL\006\240\000"
 6094      00
 6095 0f0d 000000   		.space	3
 6096 0f10 34       		.byte	52
 6097 0f11 000000   		.space	3
 6098 0f14 40010000 		.word	320
 6099 0f18 2E       		.byte	46
 6100 0f19 000000   		.space	3
 6101 0f1c FFFFFFFF 		.word	-1
 6102 0f20 434C5374 		.ascii	"CLStk\000"
 6102      6B00
 6103 0f26 0000     		.space	2
 6104 0f28 00       		.ascii	"\000"
 6105 0f29 00000000 		.space	7
 6105      000000
 6106 0f30 2C       		.byte	44
 6107 0f31 000000   		.space	3
 6108 0f34 FFFFFFFF 		.word	-1
 6109 0f38 2E       		.byte	46
 6110 0f39 000000   		.space	3
 6111 0f3c FFFFFFFF 		.word	-1
 6112 0f40 2D2D0D00 		.ascii	"--\015\000"
 6113 0f44 00000000 		.space	4
 6114 0f48 00       		.ascii	"\000"
 6115 0f49 00000000 		.space	7
 6115      000000
 6116 0f50 2D       		.byte	45
 6117 0f51 000000   		.space	3
 6118 0f54 FFFFFFFF 		.word	-1
 6119 0f58 2E       		.byte	46
 6120 0f59 000000   		.space	3
 6121 0f5c FFFFFFFF 		.word	-1
 6122 0f60 43505800 		.ascii	"CPX\000"
 6123 0f64 00000000 		.space	4
 6124 0f68 00       		.ascii	"\000"
 6125 0f69 00000000 		.space	7
 6125      000000
 6126 0f70 4D5F5377 		.ascii	"M_Swap_C\000"
 6126      61705F43 
 6126      00
 6127 0f79 00000000 		.space	6
 6127      0000
 6128 0f7f 00       		.space	1
 6129 0f80 0D       		.byte	13
 6130 0f81 000000   		.space	3
 6131 0f84 01000000 		.word	1
 6132 0f88 2E       		.byte	46
 6133 0f89 000000   		.space	3
 6134 0f8c FFFFFFFF 		.word	-1
 6135 0f90 53686F77 		.ascii	"Show\016\000"
 6135      0E00
 6136 0f96 0000     		.space	2
 6137 0f98 00       		.ascii	"\000"
 6138 0f99 00000000 		.space	7
ARM GAS  /tmp/cccWRI8T.s 			page 156


 6138      000000
 6139 0fa0 0D       		.byte	13
 6140 0fa1 000000   		.space	3
 6141 0fa4 02000000 		.word	2
 6142 0fa8 2E       		.byte	46
 6143 0fa9 000000   		.space	3
 6144 0fac FFFFFFFF 		.word	-1
 6145 0fb0 53686F77 		.ascii	"Show\015\000"
 6145      0D00
 6146 0fb6 0000     		.space	2
 6147 0fb8 00       		.ascii	"\000"
 6148 0fb9 00000000 		.space	7
 6148      000000
 6149 0fc0 0D       		.byte	13
 6150 0fc1 000000   		.space	3
 6151 0fc4 03000000 		.word	3
 6152 0fc8 2E       		.byte	46
 6153 0fc9 000000   		.space	3
 6154 0fcc FFFFFFFF 		.word	-1
 6155 0fd0 78173F00 		.ascii	"x\027?\000"
 6156 0fd4 00000000 		.space	4
 6157 0fd8 00       		.ascii	"\000"
 6158 0fd9 00000000 		.space	7
 6158      000000
 6159 0fe0 2E       		.byte	46
 6160 0fe1 000000   		.space	3
 6161 0fe4 FFFFFFFF 		.word	-1
 6162 0fe8 2E       		.byte	46
 6163 0fe9 000000   		.space	3
 6164 0fec FFFFFFFF 		.word	-1
 6165 0ff0 00       		.ascii	"\000"
 6166 0ff1 00000000 		.space	7
 6166      000000
 6167 0ff8 00       		.ascii	"\000"
 6168 0ff9 00000000 		.space	7
 6168      000000
 6169 1000 2C       		.byte	44
 6170 1001 000000   		.space	3
 6171 1004 FFFFFFFF 		.word	-1
 6172 1008 2E       		.byte	46
 6173 1009 000000   		.space	3
 6174 100c FFFFFFFF 		.word	-1
 6175 1010 2D2D0D00 		.ascii	"--\015\000"
 6176 1014 00000000 		.space	4
 6177 1018 00       		.ascii	"\000"
 6178 1019 00000000 		.space	7
 6178      000000
 6179 1020 2D       		.byte	45
 6180 1021 000000   		.space	3
 6181 1024 FFFFFFFF 		.word	-1
 6182 1028 2E       		.byte	46
 6183 1029 000000   		.space	3
 6184 102c FFFFFFFF 		.word	-1
 6185 1030 43505800 		.ascii	"CPX\000"
 6186 1034 00000000 		.space	4
 6187 1038 00       		.ascii	"\000"
 6188 1039 00000000 		.space	7
ARM GAS  /tmp/cccWRI8T.s 			page 157


 6188      000000
 6189 1040 4D5F4172 		.ascii	"M_Arrow_C\000"
 6189      726F775F 
 6189      4300
 6190 104a 00000000 		.space	5
 6190      00
 6191 104f 00       		.space	1
 6192 1050 2E       		.byte	46
 6193 1051 000000   		.space	3
 6194 1054 FFFFFFFF 		.word	-1
 6195 1058 06       		.byte	6
 6196 1059 000000   		.space	3
 6197 105c 02000000 		.word	2
 6198 1060 00       		.ascii	"\000"
 6199 1061 00000000 		.space	7
 6199      000000
 6200 1068 44454700 		.ascii	"DEG\000"
 6201 106c 00000000 		.space	4
 6202 1070 2E       		.byte	46
 6203 1071 000000   		.space	3
 6204 1074 FFFFFFFF 		.word	-1
 6205 1078 07       		.byte	7
 6206 1079 000000   		.space	3
 6207 107c 02000000 		.word	2
 6208 1080 00       		.ascii	"\000"
 6209 1081 00000000 		.space	7
 6209      000000
 6210 1088 52414400 		.ascii	"RAD\000"
 6211 108c 00000000 		.space	4
 6212 1090 2E       		.byte	46
 6213 1091 000000   		.space	3
 6214 1094 FFFFFFFF 		.word	-1
 6215 1098 08       		.byte	8
 6216 1099 000000   		.space	3
 6217 109c 02000000 		.word	2
 6218 10a0 00       		.ascii	"\000"
 6219 10a1 00000000 		.space	7
 6219      000000
 6220 10a8 47726164 		.ascii	"Grad\000"
 6220      00
 6221 10ad 000000   		.space	3
 6222 10b0 2E       		.byte	46
 6223 10b1 000000   		.space	3
 6224 10b4 FFFFFFFF 		.word	-1
 6225 10b8 06       		.byte	6
 6226 10b9 000000   		.space	3
 6227 10bc 01000000 		.word	1
 6228 10c0 00       		.ascii	"\000"
 6229 10c1 00000000 		.space	7
 6229      000000
 6230 10c8 0D484D53 		.ascii	"\015HMS\000"
 6230      00
 6231 10cd 000000   		.space	3
 6232 10d0 2C       		.byte	44
 6233 10d1 000000   		.space	3
 6234 10d4 FFFFFFFF 		.word	-1
 6235 10d8 07       		.byte	7
ARM GAS  /tmp/cccWRI8T.s 			page 158


 6236 10d9 000000   		.space	3
 6237 10dc 01000000 		.word	1
 6238 10e0 2D2D0D00 		.ascii	"--\015\000"
 6239 10e4 00000000 		.space	4
 6240 10e8 484D530D 		.ascii	"HMS\015\000"
 6240      00
 6241 10ed 000000   		.space	3
 6242 10f0 2D       		.byte	45
 6243 10f1 000000   		.space	3
 6244 10f4 FFFFFFFF 		.word	-1
 6245 10f8 2E       		.byte	46
 6246 10f9 000000   		.space	3
 6247 10fc FFFFFFFF 		.word	-1
 6248 1100 43505800 		.ascii	"CPX\000"
 6249 1104 00000000 		.space	4
 6250 1108 00       		.ascii	"\000"
 6251 1109 00000000 		.space	7
 6251      000000
 6252 1110 4D5F5072 		.ascii	"M_Prob_C\000"
 6252      6F625F43 
 6252      00
 6253 1119 00000000 		.space	6
 6253      0000
 6254 111f 00       		.space	1
 6255 1120 18       		.byte	24
 6256 1121 000000   		.space	3
 6257 1124 03000000 		.word	3
 6258 1128 34       		.byte	52
 6259 1129 000000   		.space	3
 6260 112c 31050000 		.word	1329
 6261 1130 14062100 		.ascii	"\024\006!\000"
 6262 1134 00000000 		.space	4
 6263 1138 14064C6E 		.ascii	"\024\006Ln\006\202\000"
 6263      068200
 6264 113f 00       		.space	1
 6265 1140 34       		.byte	52
 6266 1141 000000   		.space	3
 6267 1144 12060000 		.word	1554
 6268 1148 2E       		.byte	46
 6269 1149 000000   		.space	3
 6270 114c FFFFFFFF 		.word	-1
 6271 1150 14064379 		.ascii	"\024\006Cy,x\000"
 6271      2C7800
 6272 1157 00       		.space	1
 6273 1158 00       		.ascii	"\000"
 6274 1159 00000000 		.space	7
 6274      000000
 6275 1160 34       		.byte	52
 6276 1161 000000   		.space	3
 6277 1164 13060000 		.word	1555
 6278 1168 2E       		.byte	46
 6279 1169 000000   		.space	3
 6280 116c FFFFFFFF 		.word	-1
 6281 1170 14065079 		.ascii	"\024\006Py,x\000"
 6281      2C7800
 6282 1177 00       		.space	1
 6283 1178 00       		.ascii	"\000"
ARM GAS  /tmp/cccWRI8T.s 			page 159


 6284 1179 00000000 		.space	7
 6284      000000
 6285 1180 2E       		.byte	46
 6286 1181 000000   		.space	3
 6287 1184 FFFFFFFF 		.word	-1
 6288 1188 2E       		.byte	46
 6289 1189 000000   		.space	3
 6290 118c FFFFFFFF 		.word	-1
 6291 1190 00       		.ascii	"\000"
 6292 1191 00000000 		.space	7
 6292      000000
 6293 1198 00       		.ascii	"\000"
 6294 1199 00000000 		.space	7
 6294      000000
 6295 11a0 2C       		.byte	44
 6296 11a1 000000   		.space	3
 6297 11a4 FFFFFFFF 		.word	-1
 6298 11a8 2E       		.byte	46
 6299 11a9 000000   		.space	3
 6300 11ac FFFFFFFF 		.word	-1
 6301 11b0 2D2D0D00 		.ascii	"--\015\000"
 6302 11b4 00000000 		.space	4
 6303 11b8 00       		.ascii	"\000"
 6304 11b9 00000000 		.space	7
 6304      000000
 6305 11c0 2D       		.byte	45
 6306 11c1 000000   		.space	3
 6307 11c4 FFFFFFFF 		.word	-1
 6308 11c8 2E       		.byte	46
 6309 11c9 000000   		.space	3
 6310 11cc FFFFFFFF 		.word	-1
 6311 11d0 43505800 		.ascii	"CPX\000"
 6312 11d4 00000000 		.space	4
 6313 11d8 00       		.ascii	"\000"
 6314 11d9 00000000 		.space	7
 6314      000000
 6315 11e0 4D5F426C 		.ascii	"M_Blank2_C\000"
 6315      616E6B32 
 6315      5F4300
 6316 11eb 00000000 		.space	4
 6317 11ef 00       		.space	1
 6318 11f0 00       		.byte	0
 6319 11f1 000000   		.space	3
 6320 11f4 01000000 		.word	1
 6321 11f8 2E       		.byte	46
 6322 11f9 000000   		.space	3
 6323 11fc FFFFFFFF 		.word	-1
 6324 1200 48595000 		.ascii	"HYP\000"
 6325 1204 00000000 		.space	4
 6326 1208 00       		.ascii	"\000"
 6327 1209 00000000 		.space	7
 6327      000000
 6328 1210 16       		.byte	22
 6329 1211 000000   		.space	3
 6330 1214 01000000 		.word	1
 6331 1218 2E       		.byte	46
 6332 1219 000000   		.space	3
ARM GAS  /tmp/cccWRI8T.s 			page 160


 6333 121c FFFFFFFF 		.word	-1
 6334 1220 312F5800 		.ascii	"1/X\000"
 6335 1224 00000000 		.space	4
 6336 1228 00       		.ascii	"\000"
 6337 1229 00000000 		.space	7
 6337      000000
 6338 1230 1C       		.byte	28
 6339 1231 000000   		.space	3
 6340 1234 01000000 		.word	1
 6341 1238 2E       		.byte	46
 6342 1239 000000   		.space	3
 6343 123c FFFFFFFF 		.word	-1
 6344 1240 035800   		.ascii	"\003X\000"
 6345 1243 00000000 		.space	5
 6345      00
 6346 1248 00       		.ascii	"\000"
 6347 1249 00000000 		.space	7
 6347      000000
 6348 1250 13       		.byte	19
 6349 1251 000000   		.space	3
 6350 1254 02000000 		.word	2
 6351 1258 2E       		.byte	46
 6352 1259 000000   		.space	3
 6353 125c FFFFFFFF 		.word	-1
 6354 1260 4C4F4700 		.ascii	"LOG\000"
 6355 1264 00000000 		.space	4
 6356 1268 00       		.ascii	"\000"
 6357 1269 00000000 		.space	7
 6357      000000
 6358 1270 2C       		.byte	44
 6359 1271 000000   		.space	3
 6360 1274 FFFFFFFF 		.word	-1
 6361 1278 2E       		.byte	46
 6362 1279 000000   		.space	3
 6363 127c FFFFFFFF 		.word	-1
 6364 1280 2D2D0D00 		.ascii	"--\015\000"
 6365 1284 00000000 		.space	4
 6366 1288 00       		.ascii	"\000"
 6367 1289 00000000 		.space	7
 6367      000000
 6368 1290 2D       		.byte	45
 6369 1291 000000   		.space	3
 6370 1294 FFFFFFFF 		.word	-1
 6371 1298 2E       		.byte	46
 6372 1299 000000   		.space	3
 6373 129c FFFFFFFF 		.word	-1
 6374 12a0 43505800 		.ascii	"CPX\000"
 6375 12a4 00000000 		.space	4
 6376 12a8 00       		.ascii	"\000"
 6377 12a9 00000000 		.space	7
 6377      000000
 6378 12b0 4D5F4D69 		.ascii	"M_Misc_C\000"
 6378      73635F43 
 6378      00
 6379 12b9 00000000 		.space	6
 6379      0000
 6380 12bf 00       		.space	1
ARM GAS  /tmp/cccWRI8T.s 			page 161


 6381 12c0 25       		.byte	37
 6382 12c1 000000   		.space	3
 6383 12c4 01000000 		.word	1
 6384 12c8 14       		.byte	20
 6385 12c9 000000   		.space	3
 6386 12cc 01000000 		.word	1
 6387 12d0 7C587C00 		.ascii	"|X|\000"
 6388 12d4 00000000 		.space	4
 6389 12d8 329C00   		.ascii	"2\234\000"
 6390 12db 00000000 		.space	5
 6390      00
 6391 12e0 25       		.byte	37
 6392 12e1 000000   		.space	3
 6393 12e4 02000000 		.word	2
 6394 12e8 14       		.byte	20
 6395 12e9 000000   		.space	3
 6396 12ec 02000000 		.word	2
 6397 12f0 524E4400 		.ascii	"RND\000"
 6398 12f4 00000000 		.space	4
 6399 12f8 4C6F67BA 		.ascii	"Log\272\000"
 6399      00
 6400 12fd 000000   		.space	3
 6401 1300 26       		.byte	38
 6402 1301 000000   		.space	3
 6403 1304 01000000 		.word	1
 6404 1308 15       		.byte	21
 6405 1309 000000   		.space	3
 6406 130c 02000000 		.word	2
 6407 1310 300D5265 		.ascii	"0\015Re\000"
 6407      00
 6408 1315 000000   		.space	3
 6409 1318 4C6F678B 		.ascii	"Log\213\000"
 6409      00
 6410 131d 000000   		.space	3
 6411 1320 26       		.byte	38
 6412 1321 000000   		.space	3
 6413 1324 02000000 		.word	2
 6414 1328 16       		.byte	22
 6415 1329 000000   		.space	3
 6416 132c 02000000 		.word	2
 6417 1330 300D496D 		.ascii	"0\015Im\000"
 6417      00
 6418 1335 000000   		.space	3
 6419 1338 7C7C656C 		.ascii	"||el\000"
 6419      00
 6420 133d 000000   		.space	3
 6421 1340 2C       		.byte	44
 6422 1341 000000   		.space	3
 6423 1344 FFFFFFFF 		.word	-1
 6424 1348 1C       		.byte	28
 6425 1349 000000   		.space	3
 6426 134c 03000000 		.word	3
 6427 1350 2D2D0D00 		.ascii	"--\015\000"
 6428 1354 00000000 		.space	4
 6429 1358 2E1C00   		.ascii	".\034\000"
 6430 135b 00000000 		.space	5
 6430      00
ARM GAS  /tmp/cccWRI8T.s 			page 162


 6431 1360 2D       		.byte	45
 6432 1361 000000   		.space	3
 6433 1364 FFFFFFFF 		.word	-1
 6434 1368 16       		.byte	22
 6435 1369 000000   		.space	3
 6436 136c 03000000 		.word	3
 6437 1370 43505800 		.ascii	"CPX\000"
 6438 1374 00000000 		.space	4
 6439 1378 2E2F00   		.ascii	"./\000"
 6440 137b 00000000 		.space	5
 6440      00
 6441 1380 4D5F5573 		.ascii	"M_Usermenu\000"
 6441      65726D65 
 6441      6E7500
 6442 138b 00000000 		.space	4
 6443 138f 00       		.space	1
 6444 1390 34       		.byte	52
 6445 1391 000000   		.space	3
 6446 1394 00FB0000 		.word	64256
 6447 1398 2E       		.byte	46
 6448 1399 000000   		.space	3
 6449 139c FFFFFFFF 		.word	-1
 6450 13a0 554D454E 		.ascii	"UMEN\000"
 6450      00
 6451 13a5 000000   		.space	3
 6452 13a8 00       		.ascii	"\000"
 6453 13a9 00000000 		.space	7
 6453      000000
 6454 13b0 34       		.byte	52
 6455 13b1 000000   		.space	3
 6456 13b4 55FB4D31 		.word	827194197
 6457 13b8 34       		.byte	52
 6458 13b9 000000   		.space	3
 6459 13bc 55FB4D34 		.word	877525845
 6460 13c0 554D3100 		.ascii	"UM1\000"
 6461 13c4 00000000 		.space	4
 6462 13c8 554D3400 		.ascii	"UM4\000"
 6463 13cc 00000000 		.space	4
 6464 13d0 34       		.byte	52
 6465 13d1 000000   		.space	3
 6466 13d4 55FB4D32 		.word	843971413
 6467 13d8 34       		.byte	52
 6468 13d9 000000   		.space	3
 6469 13dc 55FB4D35 		.word	894303061
 6470 13e0 554D3200 		.ascii	"UM2\000"
 6471 13e4 00000000 		.space	4
 6472 13e8 554D3500 		.ascii	"UM5\000"
 6473 13ec 00000000 		.space	4
 6474 13f0 34       		.byte	52
 6475 13f1 000000   		.space	3
 6476 13f4 55FB4D33 		.word	860748629
 6477 13f8 34       		.byte	52
 6478 13f9 000000   		.space	3
 6479 13fc 55FB4D36 		.word	911080277
 6480 1400 554D3300 		.ascii	"UM3\000"
 6481 1404 00000000 		.space	4
 6482 1408 554D3600 		.ascii	"UM6\000"
ARM GAS  /tmp/cccWRI8T.s 			page 163


 6483 140c 00000000 		.space	4
 6484 1410 2C       		.byte	44
 6485 1411 000000   		.space	3
 6486 1414 FFFFFFFF 		.word	-1
 6487 1418 1C       		.byte	28
 6488 1419 000000   		.space	3
 6489 141c 03000000 		.word	3
 6490 1420 2D2D0D00 		.ascii	"--\015\000"
 6491 1424 00000000 		.space	4
 6492 1428 00       		.ascii	"\000"
 6493 1429 00000000 		.space	7
 6493      000000
 6494 1430 2D       		.byte	45
 6495 1431 000000   		.space	3
 6496 1434 FFFFFFFF 		.word	-1
 6497 1438 16       		.byte	22
 6498 1439 000000   		.space	3
 6499 143c 03000000 		.word	3
 6500 1440 43505800 		.ascii	"CPX\000"
 6501 1444 00000000 		.space	4
 6502 1448 00       		.ascii	"\000"
 6503 1449 00000000 		.space	7
 6503      000000
 6504              		.section	.rodata.mapping_alpha.11131,"a"
 6505              		.align	2
 6506              		.set	.LANCHOR16,. + 0
 6509              	mapping_alpha.11131:
 6510 0000 63       		.byte	99
 6511 0001 000000   		.space	3
 6512 0004 FFFFFFFF 		.word	-1
 6513 0008 00       		.byte	0
 6514 0009 000000   		.space	3
 6515 000c FFFFFFFF 		.word	-1
 6516 0010 01       		.byte	1
 6517 0011 000000   		.space	3
 6518 0014 FFFFFFFF 		.word	-1
 6519 0018 02       		.byte	2
 6520 0019 000000   		.space	3
 6521 001c FFFFFFFF 		.word	-1
 6522 0020 03       		.byte	3
 6523 0021 000000   		.space	3
 6524 0024 FFFFFFFF 		.word	-1
 6525 0028 04       		.byte	4
 6526 0029 000000   		.space	3
 6527 002c FFFFFFFF 		.word	-1
 6528 0030 05       		.byte	5
 6529 0031 000000   		.space	3
 6530 0034 FFFFFFFF 		.word	-1
 6531 0038 06       		.byte	6
 6532 0039 000000   		.space	3
 6533 003c FFFFFFFF 		.word	-1
 6534 0040 07       		.byte	7
 6535 0041 000000   		.space	3
 6536 0044 FFFFFFFF 		.word	-1
 6537 0048 08       		.byte	8
 6538 0049 000000   		.space	3
 6539 004c FFFFFFFF 		.word	-1
ARM GAS  /tmp/cccWRI8T.s 			page 164


 6540 0050 09       		.byte	9
 6541 0051 000000   		.space	3
 6542 0054 FFFFFFFF 		.word	-1
 6543 0058 0A       		.byte	10
 6544 0059 000000   		.space	3
 6545 005c FFFFFFFF 		.word	-1
 6546 0060 0B       		.byte	11
 6547 0061 000000   		.space	3
 6548 0064 FFFFFFFF 		.word	-1
 6549 0068 0C       		.byte	12
 6550 0069 000000   		.space	3
 6551 006c FFFFFFFF 		.word	-1
 6552 0070 0D       		.byte	13
 6553 0071 000000   		.space	3
 6554 0074 FFFFFFFF 		.word	-1
 6555 0078 0E       		.byte	14
 6556 0079 000000   		.space	3
 6557 007c FFFFFFFF 		.word	-1
 6558 0080 0F       		.byte	15
 6559 0081 000000   		.space	3
 6560 0084 FFFFFFFF 		.word	-1
 6561 0088 10       		.byte	16
 6562 0089 000000   		.space	3
 6563 008c FFFFFFFF 		.word	-1
 6564 0090 12       		.byte	18
 6565 0091 000000   		.space	3
 6566 0094 FFFFFFFF 		.word	-1
 6567 0098 13       		.byte	19
 6568 0099 000000   		.space	3
 6569 009c FFFFFFFF 		.word	-1
 6570 00a0 14       		.byte	20
 6571 00a1 000000   		.space	3
 6572 00a4 FFFFFFFF 		.word	-1
 6573 00a8 15       		.byte	21
 6574 00a9 000000   		.space	3
 6575 00ac FFFFFFFF 		.word	-1
 6576 00b0 16       		.byte	22
 6577 00b1 000000   		.space	3
 6578 00b4 FFFFFFFF 		.word	-1
 6579 00b8 18       		.byte	24
 6580 00b9 000000   		.space	3
 6581 00bc FFFFFFFF 		.word	-1
 6582 00c0 19       		.byte	25
 6583 00c1 000000   		.space	3
 6584 00c4 FFFFFFFF 		.word	-1
 6585 00c8 1A       		.byte	26
 6586 00c9 000000   		.space	3
 6587 00cc FFFFFFFF 		.word	-1
 6588 00d0 1B       		.byte	27
 6589 00d1 000000   		.space	3
 6590 00d4 FFFFFFFF 		.word	-1
 6591 00d8 1C       		.byte	28
 6592 00d9 000000   		.space	3
 6593 00dc FFFFFFFF 		.word	-1
 6594 00e0 1E       		.byte	30
 6595 00e1 000000   		.space	3
 6596 00e4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cccWRI8T.s 			page 165


 6597 00e8 1F       		.byte	31
 6598 00e9 000000   		.space	3
 6599 00ec FFFFFFFF 		.word	-1
 6600 00f0 20       		.byte	32
 6601 00f1 000000   		.space	3
 6602 00f4 FFFFFFFF 		.word	-1
 6603 00f8 21       		.byte	33
 6604 00f9 000000   		.space	3
 6605 00fc FFFFFFFF 		.word	-1
 6606 0100 22       		.byte	34
 6607 0101 000000   		.space	3
 6608 0104 FFFFFFFF 		.word	-1
 6609 0108 24       		.byte	36
 6610 0109 000000   		.space	3
 6611 010c FFFFFFFF 		.word	-1
 6612 0110 25       		.byte	37
 6613 0111 000000   		.space	3
 6614 0114 FFFFFFFF 		.word	-1
 6615 0118 26       		.byte	38
 6616 0119 000000   		.space	3
 6617 011c FFFFFFFF 		.word	-1
 6618 0120 27       		.byte	39
 6619 0121 000000   		.space	3
 6620 0124 FFFFFFFF 		.word	-1
 6621 0128 28       		.byte	40
 6622 0129 000000   		.space	3
 6623 012c FFFFFFFF 		.word	-1
 6624 0130 2E       		.byte	46
 6625 0131 000000   		.space	3
 6626 0134 FFFFFFFF 		.word	-1
 6627 0138 2E       		.byte	46
 6628 0139 000000   		.space	3
 6629 013c FFFFFFFF 		.word	-1
 6630 0140 2E       		.byte	46
 6631 0141 000000   		.space	3
 6632 0144 FFFFFFFF 		.word	-1
 6633 0148 2E       		.byte	46
 6634 0149 000000   		.space	3
 6635 014c FFFFFFFF 		.word	-1
 6636 0150 2C       		.byte	44
 6637 0151 000000   		.space	3
 6638 0154 FFFFFFFF 		.word	-1
 6639 0158 2D       		.byte	45
 6640 0159 000000   		.space	3
 6641 015c FFFFFFFF 		.word	-1
 6642 0160 2E       		.byte	46
 6643 0161 000000   		.space	3
 6644 0164 FFFFFFFF 		.word	-1
 6645 0168 2E       		.byte	46
 6646 0169 000000   		.space	3
 6647 016c FFFFFFFF 		.word	-1
 6648 0170 2E       		.byte	46
 6649 0171 000000   		.space	3
 6650 0174 FFFFFFFF 		.word	-1
 6651              		.section	.rodata.mapping_fshift.11129,"a"
 6652              		.align	2
 6653              		.set	.LANCHOR14,. + 0
ARM GAS  /tmp/cccWRI8T.s 			page 166


 6656              	mapping_fshift.11129:
 6657 0000 63       		.byte	99
 6658 0001 000000   		.space	3
 6659 0004 FFFFFFFF 		.word	-1
 6660 0008 22       		.byte	34
 6661 0009 000000   		.space	3
 6662 000c 03000000 		.word	3
 6663 0010 15       		.byte	21
 6664 0011 000000   		.space	3
 6665 0014 01000000 		.word	1
 6666 0018 1C       		.byte	28
 6667 0019 000000   		.space	3
 6668 001c 02000000 		.word	2
 6669 0020 13       		.byte	19
 6670 0021 000000   		.space	3
 6671 0024 01000000 		.word	1
 6672 0028 12       		.byte	18
 6673 0029 000000   		.space	3
 6674 002c 01000000 		.word	1
 6675 0030 12       		.byte	18
 6676 0031 000000   		.space	3
 6677 0034 03000000 		.word	3
 6678 0038 31       		.byte	49
 6679 0039 000000   		.space	3
 6680 003c 0F000000 		.word	15
 6681 0040 22       		.byte	34
 6682 0041 000000   		.space	3
 6683 0044 01000000 		.word	1
 6684 0048 0F       		.byte	15
 6685 0049 000000   		.space	3
 6686 004c 03000000 		.word	3
 6687 0050 01       		.byte	1
 6688 0051 000000   		.space	3
 6689 0054 02000000 		.word	2
 6690 0058 02       		.byte	2
 6691 0059 000000   		.space	3
 6692 005c 02000000 		.word	2
 6693 0060 03       		.byte	3
 6694 0061 000000   		.space	3
 6695 0064 02000000 		.word	2
 6696 0068 0C       		.byte	12
 6697 0069 000000   		.space	3
 6698 006c 01000000 		.word	1
 6699 0070 31       		.byte	49
 6700 0071 000000   		.space	3
 6701 0074 01000000 		.word	1
 6702 0078 2F       		.byte	47
 6703 0079 000000   		.space	3
 6704 007c 04000000 		.word	4
 6705 0080 2F       		.byte	47
 6706 0081 000000   		.space	3
 6707 0084 02000000 		.word	2
 6708 0088 2F       		.byte	47
 6709 0089 000000   		.space	3
 6710 008c 01000000 		.word	1
 6711 0090 18       		.byte	24
 6712 0091 000000   		.space	3
ARM GAS  /tmp/cccWRI8T.s 			page 167


 6713 0094 00000000 		.word	0
 6714 0098 20       		.byte	32
 6715 0099 000000   		.space	3
 6716 009c 01000000 		.word	1
 6717 00a0 2F       		.byte	47
 6718 00a1 000000   		.space	3
 6719 00a4 0E000000 		.word	14
 6720 00a8 1C       		.byte	28
 6721 00a9 000000   		.space	3
 6722 00ac 03000000 		.word	3
 6723 00b0 2F       		.byte	47
 6724 00b1 000000   		.space	3
 6725 00b4 0C000000 		.word	12
 6726 00b8 1E       		.byte	30
 6727 00b9 000000   		.space	3
 6728 00bc 00000000 		.word	0
 6729 00c0 2F       		.byte	47
 6730 00c1 000000   		.space	3
 6731 00c4 03000000 		.word	3
 6732 00c8 04       		.byte	4
 6733 00c9 000000   		.space	3
 6734 00cc 03000000 		.word	3
 6735 00d0 2F       		.byte	47
 6736 00d1 000000   		.space	3
 6737 00d4 0A000000 		.word	10
 6738 00d8 2F       		.byte	47
 6739 00d9 000000   		.space	3
 6740 00dc 0B000000 		.word	11
 6741 00e0 2A       		.byte	42
 6742 00e1 000000   		.space	3
 6743 00e4 00000000 		.word	0
 6744 00e8 31       		.byte	49
 6745 00e9 000000   		.space	3
 6746 00ec 0D000000 		.word	13
 6747 00f0 2F       		.byte	47
 6748 00f1 000000   		.space	3
 6749 00f4 63000000 		.word	99
 6750 00f8 20       		.byte	32
 6751 00f9 000000   		.space	3
 6752 00fc 03000000 		.word	3
 6753 0100 2E       		.byte	46
 6754 0101 000000   		.space	3
 6755 0104 00000000 		.word	0
 6756 0108 24       		.byte	36
 6757 0109 000000   		.space	3
 6758 010c 03000000 		.word	3
 6759 0110 2F       		.byte	47
 6760 0111 000000   		.space	3
 6761 0114 08000000 		.word	8
 6762 0118 0D       		.byte	13
 6763 0119 000000   		.space	3
 6764 011c 01000000 		.word	1
 6765 0120 27       		.byte	39
 6766 0121 000000   		.space	3
 6767 0124 03000000 		.word	3
 6768 0128 06       		.byte	6
 6769 0129 000000   		.space	3
ARM GAS  /tmp/cccWRI8T.s 			page 168


 6770 012c 03000000 		.word	3
 6771 0130 2E       		.byte	46
 6772 0131 000000   		.space	3
 6773 0134 00000000 		.word	0
 6774 0138 2E       		.byte	46
 6775 0139 000000   		.space	3
 6776 013c 00000000 		.word	0
 6777 0140 2E       		.byte	46
 6778 0141 000000   		.space	3
 6779 0144 00000000 		.word	0
 6780 0148 2E       		.byte	46
 6781 0149 000000   		.space	3
 6782 014c 00000000 		.word	0
 6783 0150 2E       		.byte	46
 6784 0151 000000   		.space	3
 6785 0154 00000000 		.word	0
 6786 0158 2E       		.byte	46
 6787 0159 000000   		.space	3
 6788 015c 00000000 		.word	0
 6789 0160 2E       		.byte	46
 6790 0161 000000   		.space	3
 6791 0164 00000000 		.word	0
 6792 0168 2F       		.byte	47
 6793 0169 000000   		.space	3
 6794 016c FFFFFFFF 		.word	-1
 6795 0170 2F       		.byte	47
 6796 0171 000000   		.space	3
 6797 0174 05000000 		.word	5
 6798              		.section	.rodata.mapping_gshift.11130,"a"
 6799              		.align	2
 6800              		.set	.LANCHOR17,. + 0
 6803              	mapping_gshift.11130:
 6804 0000 63       		.byte	99
 6805 0001 000000   		.space	3
 6806 0004 FFFFFFFF 		.word	-1
 6807 0008 28       		.byte	40
 6808 0009 000000   		.space	3
 6809 000c 03000000 		.word	3
 6810 0010 16       		.byte	22
 6811 0011 000000   		.space	3
 6812 0014 01000000 		.word	1
 6813 0018 1C       		.byte	28
 6814 0019 000000   		.space	3
 6815 001c 01000000 		.word	1
 6816 0020 13       		.byte	19
 6817 0021 000000   		.space	3
 6818 0024 02000000 		.word	2
 6819 0028 2E       		.byte	46
 6820 0029 000000   		.space	3
 6821 002c 00000000 		.word	0
 6822 0030 2E       		.byte	46
 6823 0031 000000   		.space	3
 6824 0034 00000000 		.word	0
 6825 0038 2E       		.byte	46
 6826 0039 000000   		.space	3
 6827 003c 00000000 		.word	0
 6828 0040 07       		.byte	7
ARM GAS  /tmp/cccWRI8T.s 			page 169


 6829 0041 000000   		.space	3
 6830 0044 03000000 		.word	3
 6831 0048 08       		.byte	8
 6832 0049 000000   		.space	3
 6833 004c 03000000 		.word	3
 6834 0050 2F       		.byte	47
 6835 0051 000000   		.space	3
 6836 0054 04000000 		.word	4
 6837 0058 2F       		.byte	47
 6838 0059 000000   		.space	3
 6839 005c 04000000 		.word	4
 6840 0060 2F       		.byte	47
 6841 0061 000000   		.space	3
 6842 0064 04000000 		.word	4
 6843 0068 0C       		.byte	12
 6844 0069 000000   		.space	3
 6845 006c 02000000 		.word	2
 6846 0070 2F       		.byte	47
 6847 0071 000000   		.space	3
 6848 0074 06000000 		.word	6
 6849 0078 05       		.byte	5
 6850 0079 000000   		.space	3
 6851 007c 03000000 		.word	3
 6852 0080 2E       		.byte	46
 6853 0081 000000   		.space	3
 6854 0084 00000000 		.word	0
 6855 0088 2E       		.byte	46
 6856 0089 000000   		.space	3
 6857 008c 00000000 		.word	0
 6858 0090 2E       		.byte	46
 6859 0091 000000   		.space	3
 6860 0094 00000000 		.word	0
 6861 0098 2E       		.byte	46
 6862 0099 000000   		.space	3
 6863 009c 00000000 		.word	0
 6864 00a0 2E       		.byte	46
 6865 00a1 000000   		.space	3
 6866 00a4 00000000 		.word	0
 6867 00a8 1B       		.byte	27
 6868 00a9 000000   		.space	3
 6869 00ac 03000000 		.word	3
 6870 00b0 1A       		.byte	26
 6871 00b1 000000   		.space	3
 6872 00b4 03000000 		.word	3
 6873 00b8 2E       		.byte	46
 6874 00b9 000000   		.space	3
 6875 00bc 00000000 		.word	0
 6876 00c0 2E       		.byte	46
 6877 00c1 000000   		.space	3
 6878 00c4 00000000 		.word	0
 6879 00c8 0C       		.byte	12
 6880 00c9 000000   		.space	3
 6881 00cc 03000000 		.word	3
 6882 00d0 1F       		.byte	31
 6883 00d1 000000   		.space	3
 6884 00d4 03000000 		.word	3
 6885 00d8 19       		.byte	25
ARM GAS  /tmp/cccWRI8T.s 			page 170


 6886 00d9 000000   		.space	3
 6887 00dc 03000000 		.word	3
 6888 00e0 2A       		.byte	42
 6889 00e1 000000   		.space	3
 6890 00e4 FFFFFFFF 		.word	-1
 6891 00e8 2E       		.byte	46
 6892 00e9 000000   		.space	3
 6893 00ec 00000000 		.word	0
 6894 00f0 2F       		.byte	47
 6895 00f1 000000   		.space	3
 6896 00f4 18000000 		.word	24
 6897 00f8 21       		.byte	33
 6898 00f9 000000   		.space	3
 6899 00fc 03000000 		.word	3
 6900 0100 2E       		.byte	46
 6901 0101 000000   		.space	3
 6902 0104 00000000 		.word	0
 6903 0108 24       		.byte	36
 6904 0109 000000   		.space	3
 6905 010c 02000000 		.word	2
 6906 0110 2F       		.byte	47
 6907 0111 000000   		.space	3
 6908 0114 0D000000 		.word	13
 6909 0118 2E       		.byte	46
 6910 0119 000000   		.space	3
 6911 011c 00000000 		.word	0
 6912 0120 2F       		.byte	47
 6913 0121 000000   		.space	3
 6914 0124 07000000 		.word	7
 6915 0128 1E       		.byte	30
 6916 0129 000000   		.space	3
 6917 012c 03000000 		.word	3
 6918 0130 2E       		.byte	46
 6919 0131 000000   		.space	3
 6920 0134 00000000 		.word	0
 6921 0138 2E       		.byte	46
 6922 0139 000000   		.space	3
 6923 013c 00000000 		.word	0
 6924 0140 2E       		.byte	46
 6925 0141 000000   		.space	3
 6926 0144 00000000 		.word	0
 6927 0148 2E       		.byte	46
 6928 0149 000000   		.space	3
 6929 014c 00000000 		.word	0
 6930 0150 2E       		.byte	46
 6931 0151 000000   		.space	3
 6932 0154 00000000 		.word	0
 6933 0158 2E       		.byte	46
 6934 0159 000000   		.space	3
 6935 015c 00000000 		.word	0
 6936 0160 2E       		.byte	46
 6937 0161 000000   		.space	3
 6938 0164 00000000 		.word	0
 6939 0168 2E       		.byte	46
 6940 0169 000000   		.space	3
 6941 016c 00000000 		.word	0
 6942 0170 2E       		.byte	46
ARM GAS  /tmp/cccWRI8T.s 			page 171


 6943 0171 000000   		.space	3
 6944 0174 00000000 		.word	0
 6945              		.section	.rodata.mapping_none.11128,"a"
 6946              		.align	2
 6947              		.set	.LANCHOR13,. + 0
 6950              	mapping_none.11128:
 6951 0000 63       		.byte	99
 6952 0001 000000   		.space	3
 6953 0004 FFFFFFFF 		.word	-1
 6954 0008 00       		.byte	0
 6955 0009 000000   		.space	3
 6956 000c 00000000 		.word	0
 6957 0010 01       		.byte	1
 6958 0011 000000   		.space	3
 6959 0014 00000000 		.word	0
 6960 0018 03       		.byte	3
 6961 0019 000000   		.space	3
 6962 001c 00000000 		.word	0
 6963 0020 13       		.byte	19
 6964 0021 000000   		.space	3
 6965 0024 02000000 		.word	2
 6966 0028 12       		.byte	18
 6967 0029 000000   		.space	3
 6968 002c 02000000 		.word	2
 6969 0030 12       		.byte	18
 6970 0031 000000   		.space	3
 6971 0034 00000000 		.word	0
 6972 0038 06       		.byte	6
 6973 0039 000000   		.space	3
 6974 003c 00000000 		.word	0
 6975 0040 07       		.byte	7
 6976 0041 000000   		.space	3
 6977 0044 00000000 		.word	0
 6978 0048 08       		.byte	8
 6979 0049 000000   		.space	3
 6980 004c 00000000 		.word	0
 6981 0050 01       		.byte	1
 6982 0051 000000   		.space	3
 6983 0054 01000000 		.word	1
 6984 0058 02       		.byte	2
 6985 0059 000000   		.space	3
 6986 005c 01000000 		.word	1
 6987 0060 03       		.byte	3
 6988 0061 000000   		.space	3
 6989 0064 01000000 		.word	1
 6990 0068 0C       		.byte	12
 6991 0069 000000   		.space	3
 6992 006c 00000000 		.word	0
 6993 0070 0D       		.byte	13
 6994 0071 000000   		.space	3
 6995 0074 00000000 		.word	0
 6996 0078 0E       		.byte	14
 6997 0079 000000   		.space	3
 6998 007c 00000000 		.word	0
 6999 0080 0F       		.byte	15
 7000 0081 000000   		.space	3
 7001 0084 00000000 		.word	0
ARM GAS  /tmp/cccWRI8T.s 			page 172


 7002 0088 10       		.byte	16
 7003 0089 000000   		.space	3
 7004 008c 00000000 		.word	0
 7005 0090 18       		.byte	24
 7006 0091 000000   		.space	3
 7007 0094 00000000 		.word	0
 7008 0098 13       		.byte	19
 7009 0099 000000   		.space	3
 7010 009c 00000000 		.word	0
 7011 00a0 14       		.byte	20
 7012 00a1 000000   		.space	3
 7013 00a4 00000000 		.word	0
 7014 00a8 15       		.byte	21
 7015 00a9 000000   		.space	3
 7016 00ac 00000000 		.word	0
 7017 00b0 16       		.byte	22
 7018 00b1 000000   		.space	3
 7019 00b4 00000000 		.word	0
 7020 00b8 1E       		.byte	30
 7021 00b9 000000   		.space	3
 7022 00bc 00000000 		.word	0
 7023 00c0 19       		.byte	25
 7024 00c1 000000   		.space	3
 7025 00c4 00000000 		.word	0
 7026 00c8 1A       		.byte	26
 7027 00c9 000000   		.space	3
 7028 00cc 00000000 		.word	0
 7029 00d0 1B       		.byte	27
 7030 00d1 000000   		.space	3
 7031 00d4 00000000 		.word	0
 7032 00d8 1C       		.byte	28
 7033 00d9 000000   		.space	3
 7034 00dc 00000000 		.word	0
 7035 00e0 29       		.byte	41
 7036 00e1 000000   		.space	3
 7037 00e4 00000000 		.word	0
 7038 00e8 1F       		.byte	31
 7039 00e9 000000   		.space	3
 7040 00ec 00000000 		.word	0
 7041 00f0 20       		.byte	32
 7042 00f1 000000   		.space	3
 7043 00f4 00000000 		.word	0
 7044 00f8 21       		.byte	33
 7045 00f9 000000   		.space	3
 7046 00fc 00000000 		.word	0
 7047 0100 22       		.byte	34
 7048 0101 000000   		.space	3
 7049 0104 00000000 		.word	0
 7050 0108 24       		.byte	36
 7051 0109 000000   		.space	3
 7052 010c 00000000 		.word	0
 7053 0110 25       		.byte	37
 7054 0111 000000   		.space	3
 7055 0114 00000000 		.word	0
 7056 0118 26       		.byte	38
 7057 0119 000000   		.space	3
 7058 011c 00000000 		.word	0
ARM GAS  /tmp/cccWRI8T.s 			page 173


 7059 0120 27       		.byte	39
 7060 0121 000000   		.space	3
 7061 0124 00000000 		.word	0
 7062 0128 28       		.byte	40
 7063 0129 000000   		.space	3
 7064 012c 00000000 		.word	0
 7065 0130 2E       		.byte	46
 7066 0131 000000   		.space	3
 7067 0134 00000000 		.word	0
 7068 0138 2E       		.byte	46
 7069 0139 000000   		.space	3
 7070 013c 00000000 		.word	0
 7071 0140 2E       		.byte	46
 7072 0141 000000   		.space	3
 7073 0144 00000000 		.word	0
 7074 0148 2E       		.byte	46
 7075 0149 000000   		.space	3
 7076 014c 00000000 		.word	0
 7077 0150 2E       		.byte	46
 7078 0151 000000   		.space	3
 7079 0154 00000000 		.word	0
 7080 0158 2E       		.byte	46
 7081 0159 000000   		.space	3
 7082 015c 00000000 		.word	0
 7083 0160 2E       		.byte	46
 7084 0161 000000   		.space	3
 7085 0164 00000000 		.word	0
 7086 0168 2E       		.byte	46
 7087 0169 000000   		.space	3
 7088 016c 00000000 		.word	0
 7089 0170 2E       		.byte	46
 7090 0171 000000   		.space	3
 7091 0174 00000000 		.word	0
 7092              		.section	.rodata.mapping_running.11132,"a"
 7093              		.align	2
 7094              		.set	.LANCHOR12,. + 0
 7097              	mapping_running.11132:
 7098 0000 63       		.byte	99
 7099 0001 000000   		.space	3
 7100 0004 FFFFFFFF 		.word	-1
 7101 0008 00       		.byte	0
 7102 0009 000000   		.space	3
 7103 000c 00000000 		.word	0
 7104 0010 01       		.byte	1
 7105 0011 000000   		.space	3
 7106 0014 00000000 		.word	0
 7107 0018 02       		.byte	2
 7108 0019 000000   		.space	3
 7109 001c 00000000 		.word	0
 7110 0020 03       		.byte	3
 7111 0021 000000   		.space	3
 7112 0024 00000000 		.word	0
 7113 0028 04       		.byte	4
 7114 0029 000000   		.space	3
 7115 002c 00000000 		.word	0
 7116 0030 12       		.byte	18
 7117 0031 000000   		.space	3
ARM GAS  /tmp/cccWRI8T.s 			page 174


 7118 0034 00000000 		.word	0
 7119 0038 06       		.byte	6
 7120 0039 000000   		.space	3
 7121 003c 00000000 		.word	0
 7122 0040 07       		.byte	7
 7123 0041 000000   		.space	3
 7124 0044 00000000 		.word	0
 7125 0048 08       		.byte	8
 7126 0049 000000   		.space	3
 7127 004c 00000000 		.word	0
 7128 0050 09       		.byte	9
 7129 0051 000000   		.space	3
 7130 0054 00000000 		.word	0
 7131 0058 0A       		.byte	10
 7132 0059 000000   		.space	3
 7133 005c 00000000 		.word	0
 7134 0060 0B       		.byte	11
 7135 0061 000000   		.space	3
 7136 0064 00000000 		.word	0
 7137 0068 0C       		.byte	12
 7138 0069 000000   		.space	3
 7139 006c 00000000 		.word	0
 7140 0070 0D       		.byte	13
 7141 0071 000000   		.space	3
 7142 0074 00000000 		.word	0
 7143 0078 0E       		.byte	14
 7144 0079 000000   		.space	3
 7145 007c 00000000 		.word	0
 7146 0080 0F       		.byte	15
 7147 0081 000000   		.space	3
 7148 0084 00000000 		.word	0
 7149 0088 10       		.byte	16
 7150 0089 000000   		.space	3
 7151 008c 00000000 		.word	0
 7152 0090 18       		.byte	24
 7153 0091 000000   		.space	3
 7154 0094 00000000 		.word	0
 7155 0098 13       		.byte	19
 7156 0099 000000   		.space	3
 7157 009c 00000000 		.word	0
 7158 00a0 14       		.byte	20
 7159 00a1 000000   		.space	3
 7160 00a4 00000000 		.word	0
 7161 00a8 15       		.byte	21
 7162 00a9 000000   		.space	3
 7163 00ac 00000000 		.word	0
 7164 00b0 16       		.byte	22
 7165 00b1 000000   		.space	3
 7166 00b4 00000000 		.word	0
 7167 00b8 1E       		.byte	30
 7168 00b9 000000   		.space	3
 7169 00bc 00000000 		.word	0
 7170 00c0 19       		.byte	25
 7171 00c1 000000   		.space	3
 7172 00c4 00000000 		.word	0
 7173 00c8 1A       		.byte	26
 7174 00c9 000000   		.space	3
ARM GAS  /tmp/cccWRI8T.s 			page 175


 7175 00cc 00000000 		.word	0
 7176 00d0 1B       		.byte	27
 7177 00d1 000000   		.space	3
 7178 00d4 00000000 		.word	0
 7179 00d8 1C       		.byte	28
 7180 00d9 000000   		.space	3
 7181 00dc 00000000 		.word	0
 7182 00e0 09       		.byte	9
 7183 00e1 000000   		.space	3
 7184 00e4 00000000 		.word	0
 7185 00e8 1F       		.byte	31
 7186 00e9 000000   		.space	3
 7187 00ec 00000000 		.word	0
 7188 00f0 20       		.byte	32
 7189 00f1 000000   		.space	3
 7190 00f4 00000000 		.word	0
 7191 00f8 21       		.byte	33
 7192 00f9 000000   		.space	3
 7193 00fc 00000000 		.word	0
 7194 0100 22       		.byte	34
 7195 0101 000000   		.space	3
 7196 0104 00000000 		.word	0
 7197 0108 24       		.byte	36
 7198 0109 000000   		.space	3
 7199 010c 00000000 		.word	0
 7200 0110 25       		.byte	37
 7201 0111 000000   		.space	3
 7202 0114 00000000 		.word	0
 7203 0118 26       		.byte	38
 7204 0119 000000   		.space	3
 7205 011c 00000000 		.word	0
 7206 0120 27       		.byte	39
 7207 0121 000000   		.space	3
 7208 0124 00000000 		.word	0
 7209 0128 28       		.byte	40
 7210 0129 000000   		.space	3
 7211 012c 00000000 		.word	0
 7212 0130 2E       		.byte	46
 7213 0131 000000   		.space	3
 7214 0134 00000000 		.word	0
 7215 0138 2E       		.byte	46
 7216 0139 000000   		.space	3
 7217 013c 00000000 		.word	0
 7218 0140 2E       		.byte	46
 7219 0141 000000   		.space	3
 7220 0144 00000000 		.word	0
 7221 0148 2E       		.byte	46
 7222 0149 000000   		.space	3
 7223 014c 00000000 		.word	0
 7224 0150 04       		.byte	4
 7225 0151 000000   		.space	3
 7226 0154 00000000 		.word	0
 7227 0158 05       		.byte	5
 7228 0159 000000   		.space	3
 7229 015c 00000000 		.word	0
 7230 0160 2E       		.byte	46
 7231 0161 000000   		.space	3
ARM GAS  /tmp/cccWRI8T.s 			page 176


 7232 0164 00000000 		.word	0
 7233 0168 2E       		.byte	46
 7234 0169 000000   		.space	3
 7235 016c 00000000 		.word	0
 7236 0170 2E       		.byte	46
 7237 0171 000000   		.space	3
 7238 0174 00000000 		.word	0
 7239              		.section	.rodata.mid_menu,"a"
 7240              		.align	2
 7243              	mid_menu:
 7244 0000 C8C40B00 		.ascii	"\310\304\013\000"
 7245              		.text
 7246              	.Letext0:
 7247              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 7248              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 7249              		.file 6 "/usr/include/newlib/sys/_types.h"
 7250              		.file 7 "/usr/include/newlib/sys/reent.h"
 7251              		.file 8 "/usr/include/newlib/sys/lock.h"
 7252              		.file 9 "/usr/include/newlib/stdlib.h"
 7253              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 7254              		.file 11 "/usr/include/newlib/ctype.h"
 7255              		.file 12 "dmcp/ff_ifc.h"
 7256              		.file 13 "dmcp/dmcp.h"
 7257              		.file 14 "src/keys.h"
 7258              		.file 15 "src/menu.h"
 7259              		.file 16 "src/decNumber/decContext.h"
 7260              		.file 17 "src/decNumber/decNumber.h"
 7261              		.file 18 "src/decNumber/decimal64.h"
 7262              		.file 19 "src/decNumber/decimal128.h"
 7263              		.file 20 "src/xeq.h"
 7264              		.file 21 "src/data.h"
 7265              		.file 22 "src/display.h"
 7266              		.file 23 "src/consts.h"
 7267              		.file 24 "src/storage.h"
 7268              		.file 25 "src/catalogues.h"
 7269              		.file 26 "src/stopwatch.h"
 7270              		.file 27 "src/lcd.h"
 7271              		.file 28 "/usr/include/newlib/string.h"
 7272              		.file 29 "/usr/include/newlib/stdio.h"
 7273              		.file 30 "<built-in>"
ARM GAS  /tmp/cccWRI8T.s 			page 177


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/cccWRI8T.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/cccWRI8T.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/cccWRI8T.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/cccWRI8T.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/cccWRI8T.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/cccWRI8T.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/cccWRI8T.s:433    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/cccWRI8T.s:441    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/cccWRI8T.s:460    .text.disp_about:0000000000000000 $t
     /tmp/cccWRI8T.s:468    .text.disp_about:0000000000000000 disp_about
     /tmp/cccWRI8T.s:621    .text.disp_about:0000000000000080 $d
     /tmp/cccWRI8T.s:639    .text.run_menu_item:0000000000000000 $t
     /tmp/cccWRI8T.s:647    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/cccWRI8T.s:687    .text.set_menu:0000000000000000 $t
     /tmp/cccWRI8T.s:695    .text.set_menu:0000000000000000 set_menu
     /tmp/cccWRI8T.s:750    .text.set_menu:000000000000002c $d
     /tmp/cccWRI8T.s:757    .text.set_default_menu:0000000000000000 $t
     /tmp/cccWRI8T.s:765    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/cccWRI8T.s:839    .text.set_default_menu:000000000000002c $d
     /tmp/cccWRI8T.s:848    .text.toggle_default_menu:0000000000000000 $t
     /tmp/cccWRI8T.s:856    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/cccWRI8T.s:958    .text.toggle_default_menu:0000000000000044 $d
     /tmp/cccWRI8T.s:969    .text.get_menu:0000000000000000 $t
     /tmp/cccWRI8T.s:977    .text.get_menu:0000000000000000 get_menu
     /tmp/cccWRI8T.s:993    .text.get_menu:0000000000000008 $d
     /tmp/cccWRI8T.s:998    .text.get_last_menu:0000000000000000 $t
     /tmp/cccWRI8T.s:1006   .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/cccWRI8T.s:1022   .text.get_last_menu:0000000000000008 $d
     /tmp/cccWRI8T.s:1027   .text.set_last_menu:0000000000000000 $t
     /tmp/cccWRI8T.s:1035   .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/cccWRI8T.s:1110   .text.set_last_menu:000000000000002c $d
     /tmp/cccWRI8T.s:1119   .text.mdot:0000000000000000 $t
     /tmp/cccWRI8T.s:1127   .text.mdot:0000000000000000 mdot
     /tmp/cccWRI8T.s:1218   .text.mdot:000000000000003c $d
     /tmp/cccWRI8T.s:1223   .text.get_current_menu_ref:0000000000000000 $t
     /tmp/cccWRI8T.s:1231   .text.get_current_menu_ref:0000000000000000 get_current_menu_ref
     /tmp/cccWRI8T.s:1298   .text.get_current_menu_ref:0000000000000040 $d
     /tmp/cccWRI8T.s:1313   .text.get_current_menu_ref:000000000000007c $t
     /tmp/cccWRI8T.s:1383   .text.get_current_menu_ref:00000000000000a8 $d
     /tmp/cccWRI8T.s:4928   .rodata.Menus:0000000000000000 Menus
     /tmp/cccWRI8T.s:1391   .text.display_menu:0000000000000000 $t
     /tmp/cccWRI8T.s:1399   .text.display_menu:0000000000000000 display_menu
     /tmp/cccWRI8T.s:1647   .text.display_menu:000000000000010c $d
     /tmp/cccWRI8T.s:1654   .text.display_current_menu:0000000000000000 $t
     /tmp/cccWRI8T.s:1662   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/cccWRI8T.s:1698   .text.all_menu_dots:0000000000000000 $t
     /tmp/cccWRI8T.s:1706   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/cccWRI8T.s:1790   .text.all_menu_dots:0000000000000038 $d
     /tmp/cccWRI8T.s:1795   .text.umen_store:0000000000000000 $t
     /tmp/cccWRI8T.s:1803   .text.umen_store:0000000000000000 umen_store
     /tmp/cccWRI8T.s:1904   .text.umen_store:0000000000000050 $d
     /tmp/cccWRI8T.s:1909   .text.build_user_menu_from_program:0000000000000000 $t
     /tmp/cccWRI8T.s:1917   .text.build_user_menu_from_program:0000000000000000 build_user_menu_from_program
     /tmp/cccWRI8T.s:2328   .text.build_user_menu_from_program:0000000000000180 $d
     /tmp/cccWRI8T.s:2341   .text.build_user_menu:0000000000000000 $t
ARM GAS  /tmp/cccWRI8T.s 			page 178


     /tmp/cccWRI8T.s:2349   .text.build_user_menu:0000000000000000 build_user_menu
     /tmp/cccWRI8T.s:2365   .text.build_user_menu:0000000000000008 $d
     /tmp/cccWRI8T.s:2370   .text.shutdown:0000000000000000 $t
     /tmp/cccWRI8T.s:2378   .text.shutdown:0000000000000000 shutdown
     /tmp/cccWRI8T.s:2396   .text.shutdown:000000000000000c $d
     /tmp/cccWRI8T.s:2401   .text.is_key_pressed:0000000000000000 $t
     /tmp/cccWRI8T.s:2409   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/cccWRI8T.s:2432   .text.is_key_pressed:0000000000000010 $d
     /tmp/cccWRI8T.s:2437   .text.get_key:0000000000000000 $t
     /tmp/cccWRI8T.s:2445   .text.get_key:0000000000000000 get_key
     /tmp/cccWRI8T.s:2460   .text.get_key:0000000000000004 $d
     /tmp/cccWRI8T.s:2465   .text.put_key:0000000000000000 $t
     /tmp/cccWRI8T.s:2473   .text.put_key:0000000000000000 put_key
     /tmp/cccWRI8T.s:2552   .text.put_key:000000000000003c $d
     /tmp/cccWRI8T.s:2558   .text.shift_down:0000000000000000 $t
     /tmp/cccWRI8T.s:2566   .text.shift_down:0000000000000000 shift_down
     /tmp/cccWRI8T.s:2581   .text.start_key_timer:0000000000000000 $t
     /tmp/cccWRI8T.s:2589   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/cccWRI8T.s:2613   .text.start_key_timer:000000000000000c $d
     /tmp/cccWRI8T.s:2619   .text.keyticks:0000000000000000 $t
     /tmp/cccWRI8T.s:2627   .text.keyticks:0000000000000000 keyticks
     /tmp/cccWRI8T.s:2658   .text.keyticks:0000000000000018 $d
     /tmp/cccWRI8T.s:2664   .text.moveto:0000000000000000 $t
     /tmp/cccWRI8T.s:2672   .text.moveto:0000000000000000 moveto
     /tmp/cccWRI8T.s:2732   .text.moveto:000000000000002c $d
     /tmp/cccWRI8T.s:2739   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/cccWRI8T.s:2743   .text.print_debug:0000000000000000 $t
     /tmp/cccWRI8T.s:2751   .text.print_debug:0000000000000000 print_debug
     /tmp/cccWRI8T.s:2853   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/cccWRI8T.s:2864   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/cccWRI8T.s:2868   .text.print_debug2:0000000000000000 $t
     /tmp/cccWRI8T.s:2876   .text.print_debug2:0000000000000000 print_debug2
     /tmp/cccWRI8T.s:2978   .text.print_debug2:0000000000000064 $d
     /tmp/cccWRI8T.s:2989   .text.do_now:0000000000000000 $t
     /tmp/cccWRI8T.s:2997   .text.do_now:0000000000000000 do_now
     /tmp/cccWRI8T.s:3032   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/cccWRI8T.s:3036   .text.do_multi:0000000000000000 $t
     /tmp/cccWRI8T.s:3044   .text.do_multi:0000000000000000 do_multi
     /tmp/cccWRI8T.s:3075   .text.do_multi:000000000000001a $d
     /tmp/cccWRI8T.s:3501   .text.do_multi:000000000000016c $d
     /tmp/cccWRI8T.s:3515   .text.program_main:0000000000000000 $t
     /tmp/cccWRI8T.s:3523   .text.program_main:0000000000000000 program_main
     /tmp/cccWRI8T.s:3816   .text.program_main:0000000000000126 $d
     /tmp/cccWRI8T.s:3822   .text.program_main:0000000000000132 $t
     /tmp/cccWRI8T.s:4202   .text.program_main:00000000000002e0 $d
     /tmp/cccWRI8T.s:4240   .text.program_main:0000000000000368 $t
     /tmp/cccWRI8T.s:4674   .text.program_main:0000000000000574 $d
     /tmp/cccWRI8T.s:4763   .bss.n_p:0000000000000000 n_p
     /tmp/cccWRI8T.s:4912   .data.spaces:0000000000000000 spaces
     /tmp/cccWRI8T.s:4903   .data.release:0000000000000000 release
     /tmp/cccWRI8T.s:4876   .data.h_shift:0000000000000000 h_shift
     /tmp/cccWRI8T.s:4867   .data.g_shift:0000000000000000 g_shift
     /tmp/cccWRI8T.s:4859   .data.f_shift:0000000000000000 f_shift
     /tmp/cccWRI8T.s:4885   .data.heartbeat:0000000000000000 heartbeat
     /tmp/cccWRI8T.s:4894   .data.no_key:0000000000000000 no_key
     /tmp/cccWRI8T.s:4919   .rodata.MID_MENU:0000000000000000 MID_MENU
ARM GAS  /tmp/cccWRI8T.s 			page 179


     /tmp/cccWRI8T.s:4703   .rodata.str1.4:0000000000000000 $d
     /tmp/cccWRI8T.s:7243   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/cccWRI8T.s:4744   .bss.default_menu:0000000000000000 default_menu
     /tmp/cccWRI8T.s:4750   .bss.last_menu:0000000000000000 last_menu
     /tmp/cccWRI8T.s:4738   .bss.current_menu:0000000000000000 current_menu
     /tmp/cccWRI8T.s:4853   .data.cmplx_key_string:0000000000000000 cmplx_key_string
     /tmp/cccWRI8T.s:4846   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/cccWRI8T.s:4777   .data.UserMenu:0000000000000000 UserMenu
     /tmp/cccWRI8T.s:4720   .rodata:0000000000000000 $d
     /tmp/cccWRI8T.s:4739   .bss.current_menu:0000000000000000 $d
     /tmp/cccWRI8T.s:4745   .bss.default_menu:0000000000000000 $d
     /tmp/cccWRI8T.s:4751   .bss.last_menu:0000000000000000 $d
     /tmp/cccWRI8T.s:4753   .bss.mdots:0000000000000000 $d
     /tmp/cccWRI8T.s:4757   .bss.mdots:0000000000000000 mdots
     /tmp/cccWRI8T.s:4760   .bss.n_p:0000000000000000 $d
     /tmp/cccWRI8T.s:4766   .bss.start_ticks:0000000000000000 $d
     /tmp/cccWRI8T.s:4770   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/cccWRI8T.s:4773   .data.UserMenu:0000000000000000 $d
     /tmp/cccWRI8T.s:4842   .data.arrow_key_string:0000000000000000 $d
     /tmp/cccWRI8T.s:4849   .data.cmplx_key_string:0000000000000000 $d
     /tmp/cccWRI8T.s:4856   .data.f_shift:0000000000000000 $d
     /tmp/cccWRI8T.s:4864   .data.g_shift:0000000000000000 $d
     /tmp/cccWRI8T.s:4872   .data.h_shift:0000000000000000 $d
     /tmp/cccWRI8T.s:4881   .data.heartbeat:0000000000000000 $d
     /tmp/cccWRI8T.s:4890   .data.no_key:0000000000000000 $d
     /tmp/cccWRI8T.s:4899   .data.release:0000000000000000 $d
     /tmp/cccWRI8T.s:4908   .data.spaces:0000000000000000 $d
     /tmp/cccWRI8T.s:4915   .rodata.MID_MENU:0000000000000000 $d
     /tmp/cccWRI8T.s:4925   .rodata.Menus:0000000000000000 $d
     /tmp/cccWRI8T.s:6505   .rodata.mapping_alpha.11131:0000000000000000 $d
     /tmp/cccWRI8T.s:6509   .rodata.mapping_alpha.11131:0000000000000000 mapping_alpha.11131
     /tmp/cccWRI8T.s:6652   .rodata.mapping_fshift.11129:0000000000000000 $d
     /tmp/cccWRI8T.s:6656   .rodata.mapping_fshift.11129:0000000000000000 mapping_fshift.11129
     /tmp/cccWRI8T.s:6799   .rodata.mapping_gshift.11130:0000000000000000 $d
     /tmp/cccWRI8T.s:6803   .rodata.mapping_gshift.11130:0000000000000000 mapping_gshift.11130
     /tmp/cccWRI8T.s:6946   .rodata.mapping_none.11128:0000000000000000 $d
     /tmp/cccWRI8T.s:6950   .rodata.mapping_none.11128:0000000000000000 mapping_none.11128
     /tmp/cccWRI8T.s:7093   .rodata.mapping_running.11132:0000000000000000 $d
     /tmp/cccWRI8T.s:7097   .rodata.mapping_running.11132:0000000000000000 mapping_running.11132
     /tmp/cccWRI8T.s:7240   .rodata.mid_menu:0000000000000000 $d
     /tmp/cccWRI8T.s:3090   .text.do_multi:0000000000000029 $d
     /tmp/cccWRI8T.s:3090   .text.do_multi:000000000000002a $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
memcpy
main_ram
pixel_length
strncpy
findmultilbl
do_inc
getprog
prt_umen
ARM GAS  /tmp/cccWRI8T.s 			page 180


catcmd
strcpy
sprintf
process_keycode_with_shift
reset_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
KeyCallback
JustDisplayed
Pause
Running
DM42_Ticker
is_dot
dot
finish_LEQ
get_alpha_state
StopWatchStatus

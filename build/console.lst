ARM GAS  /tmp/ccVzm1xY.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC3:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** //#include <menu.h>
   2:src/menu.c    **** struct _menu UserMenu =
   3:src/menu.c    ****   {
   4:src/menu.c    ****     "User Menu", 
   5:src/menu.c    ****     {
   6:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   7:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   8:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   9:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  10:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  11:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
  12:src/menu.c    ****     }
  13:src/menu.c    ****   };
  14:src/menu.c    **** 
  15:src/menu.c    **** const char* arrow_key_string = "--\015";
  16:src/menu.c    **** const char* cmplx_key_string = "CPX";
  17:src/menu.c    **** 
  18:src/menu.c    **** menu_name current_menu = 0;
  19:src/menu.c    **** menu_name last_menu = 0;
  20:src/menu.c    **** menu_name default_menu = 0;
  21:src/menu.c    **** 
  22:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted);
  23:src/menu.c    **** 
ARM GAS  /tmp/ccVzm1xY.s 			page 2


  24:src/menu.c    **** 
  25:src/menu.c    **** 
  26:src/menu.c    **** /* 
  27:src/menu.c    ****  * System menu stuff
  28:src/menu.c    ****  */
  29:src/menu.c    **** 
  30:src/menu.c    **** #define MI_ABOUT_PGM 11
  31:src/menu.c    **** 
  32:src/menu.c    **** const uint8_t mid_menu[] = {
  33:src/menu.c    ****     MI_SYSTEM_ENTER,
  34:src/menu.c    ****     MI_MSC,
  35:src/menu.c    ****     MI_ABOUT_PGM,
  36:src/menu.c    ****     0 }; // Terminator
  37:src/menu.c    **** 
  38:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  39:src/menu.c    **** 
  40:src/menu.c    **** void disp_about(void);
  41:src/menu.c    **** 
  42:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  43:src/menu.c    ****   int ret = 0;
  44:src/menu.c    **** 
  45:src/menu.c    ****   switch(line_id) {
  46:src/menu.c    ****     case MI_ABOUT_PGM:
  47:src/menu.c    ****       disp_about();
  48:src/menu.c    ****       break;
  49:src/menu.c    **** 
  50:src/menu.c    ****      default:
  51:src/menu.c    ****       ret = MRET_UNIMPL;
  52:src/menu.c    ****       break;
  53:src/menu.c    ****   }
  54:src/menu.c    **** 
  55:src/menu.c    ****   return ret;
  56:src/menu.c    **** }
  57:src/menu.c    **** 
  58:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 58 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  59:src/menu.c    ****   const char * ln;
  40              		.loc 1 59 3 view .LVU1
  60:src/menu.c    **** 
  61:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 61 3 view .LVU2
  62:src/menu.c    **** 
  63:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  64:src/menu.c    **** 
  65:src/menu.c    ****   default:
  66:src/menu.c    ****     ln = NULL;
  42              		.loc 1 66 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  61:src/menu.c    **** 
  44              		.loc 1 61 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
  67:src/menu.c    ****     break;
  68:src/menu.c    ****   }
ARM GAS  /tmp/ccVzm1xY.s 			page 3


  69:src/menu.c    **** 
  70:src/menu.c    ****   return ln;
  71:src/menu.c    **** }
  46              		.loc 1 71 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 71 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC3
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB37:
  72:src/menu.c    **** 
  73:src/menu.c    **** void disp_about() {
  74:src/menu.c    ****   lcd_clear_buf();
  75:src/menu.c    ****   lcd_writeClr(t24);
  76:src/menu.c    **** 
  77:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  78:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
  79:src/menu.c    ****   t24->y += 5;
  80:src/menu.c    **** #ifdef TOP_ROW
  81:src/menu.c    ****   lcd_print(t24, "top row version,");
  82:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
  83:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  84:src/menu.c    ****   lcd_print(t24, "with a longer alpha display,");
  85:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  86:src/menu.c    ****   #else
  87:src/menu.c    ****   lcd_print(t24, "Just like the original calculator");
  88:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed,");
  89:src/menu.c    ****   lcd_print(t24, "and COMPLEX LOCK mode!");
  90:src/menu.c    **** #endif
  91:src/menu.c    ****   t24->y += 5;
  92:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
  93:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
  94:src/menu.c    **** 
  95:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
  96:src/menu.c    ****   t24->x = 20;
  97:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
  98:src/menu.c    **** 
  99:src/menu.c    ****   lcd_refresh();
 100:src/menu.c    **** 
 101:src/menu.c    ****   wait_for_key_press();
 102:src/menu.c    **** }
ARM GAS  /tmp/ccVzm1xY.s 			page 4


 103:src/menu.c    **** 
 104:src/menu.c    **** /*
 105:src/menu.c    ****  * WP34s menu code
 106:src/menu.c    ****  */
 107:src/menu.c    **** 
 108:src/menu.c    **** void set_menu ( menu_name new_menu ) {
 109:src/menu.c    ****   menu_name m = current_menu;
 110:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 111:src/menu.c    ****     current_menu = default_menu;
 112:src/menu.c    ****   }
 113:src/menu.c    ****   else if (new_menu == M_Last) { // go to last menu
 114:src/menu.c    ****     current_menu = last_menu;
 115:src/menu.c    ****   }
 116:src/menu.c    ****   else {
 117:src/menu.c    ****     current_menu = new_menu; // change to new menu
 118:src/menu.c    ****   }
 119:src/menu.c    ****   if ( (m != M_Arrow) && (m != M_Alpha) ) last_menu = m;
 120:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 121:src/menu.c    **** }
 122:src/menu.c    **** 
 123:src/menu.c    **** void set_default_menu () {
 124:src/menu.c    ****   set_menu (default_menu);
 125:src/menu.c    **** }
 126:src/menu.c    **** 
 127:src/menu.c    **** void toggle_default_menu () {
 128:src/menu.c    ****   if (current_menu == M_Blank) {
 129:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 130:src/menu.c    ****     return;
 131:src/menu.c    ****   }
 132:src/menu.c    ****   else if (current_menu == M_Blank2) {
 133:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 134:src/menu.c    ****   }
 135:src/menu.c    ****   else {
 136:src/menu.c    ****     set_default_menu();
 137:src/menu.c    ****   }
 138:src/menu.c    **** }
 139:src/menu.c    **** 
 140:src/menu.c    **** menu_name get_menu () {
 141:src/menu.c    ****   return current_menu;
 142:src/menu.c    **** }
 143:src/menu.c    **** 
 144:src/menu.c    **** menu_name get_last_menu () {
 145:src/menu.c    ****   return last_menu;
 146:src/menu.c    **** }
 147:src/menu.c    **** 
 148:src/menu.c    **** void display_current_menu () {
 149:src/menu.c    ****   display_menu (get_current_menu_ref());
 150:src/menu.c    **** }
 151:src/menu.c    **** 
 152:src/menu.c    **** void set_last_menu () {
 153:src/menu.c    ****   set_menu (M_Last);
 154:src/menu.c    **** }
 155:src/menu.c    **** 
 156:src/menu.c    **** static unsigned char mdots[200][2];
 157:src/menu.c    **** 
 158:src/menu.c    **** static const struct _menu Menus[] = {
 159:src/menu.c    ****   {
ARM GAS  /tmp/ccVzm1xY.s 			page 5


 160:src/menu.c    ****     "M_Blank", // 0
 161:src/menu.c    ****     { 
 162:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 163:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 164:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 165:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 166:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 167:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 168:src/menu.c    ****     }    
 169:src/menu.c    ****   },
 170:src/menu.c    ****   {
 171:src/menu.c    ****     "M_Clear", // 1
 172:src/menu.c    ****     { 
 173:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 174:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 175:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 176:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 177:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 178:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 179:src/menu.c    ****     }    
 180:src/menu.c    ****   },
 181:src/menu.c    ****   {
 182:src/menu.c    ****     "M_Disp", // 2
 183:src/menu.c    ****     { 
 184:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 185:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 186:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 187:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 188:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 189:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 190:src/menu.c    ****     }
 191:src/menu.c    ****   },
 192:src/menu.c    ****   {
 193:src/menu.c    ****     "M_Base", // 3
 194:src/menu.c    ****     { 
 195:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 196:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 197:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 198:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 199:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 200:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 201:src/menu.c    ****     }
 202:src/menu.c    ****   },
 203:src/menu.c    ****   {
 204:src/menu.c    ****     "M_Angles", // 4
 205:src/menu.c    ****     { 
 206:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 207:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 208:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 209:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 210:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 211:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 212:src/menu.c    ****     }
 213:src/menu.c    ****       
 214:src/menu.c    ****   },
 215:src/menu.c    ****   {
 216:src/menu.c    ****     "M_Misc", // 5
ARM GAS  /tmp/ccVzm1xY.s 			page 6


 217:src/menu.c    ****     { 
 218:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 219:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 220:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 221:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 222:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 223:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 224:src/menu.c    ****     }
 225:src/menu.c    ****   },
 226:src/menu.c    ****   {
 227:src/menu.c    ****     "M_Swap", // 6
 228:src/menu.c    ****     { 
 229:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 230:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 231:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 232:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 233:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 234:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 235:src/menu.c    ****     }    
 236:src/menu.c    ****   },
 237:src/menu.c    ****   {
 238:src/menu.c    ****     "M_Program", // 7
 239:src/menu.c    ****     { 
 240:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 241:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 242:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 243:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 244:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 245:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 246:src/menu.c    ****     }
 247:src/menu.c    ****   },
 248:src/menu.c    ****   {
 249:src/menu.c    ****     "M_Setup1", // 8
 250:src/menu.c    ****     { 
 251:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 252:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 253:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 254:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 255:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 256:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 257:src/menu.c    ****     }
 258:src/menu.c    ****   },
 259:src/menu.c    ****   {
 260:src/menu.c    ****     "M_Arrow", // 9
 261:src/menu.c    ****     { 
 262:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "\015Bin", "\015DEG" },
 263:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "\015Oct", "\015RAD" },
 264:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "\015Dec", "\015Grad" },
 265:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "\015Hex", "\015HMS" },
 266:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 267:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 268:src/menu.c    ****     }
 269:src/menu.c    ****   },
 270:src/menu.c    ****   {
 271:src/menu.c    ****     "M_Flags", // 10
 272:src/menu.c    ****     { 
 273:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
ARM GAS  /tmp/ccVzm1xY.s 			page 7


 274:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 275:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 276:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 277:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 278:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 279:src/menu.c    ****     }
 280:src/menu.c    ****   },
 281:src/menu.c    ****   {
 282:src/menu.c    ****     "M_Prob", // 11
 283:src/menu.c    ****     { 
 284:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 285:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 286:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 287:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 288:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 289:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 290:src/menu.c    ****     }
 291:src/menu.c    ****   },
 292:src/menu.c    ****   {
 293:src/menu.c    ****     "M_Stats", // 12
 294:src/menu.c    ****     /*
 295:src/menu.c    ****      *xbar, sd;
 296:src/menu.c    ****      *yhat, xhat;
 297:src/menu.c    ****      *corr, L.R.;
 298:src/menu.c    ****      *best, linear;
 299:src/menu.c    ****      *ln, exp;
 300:src/menu.c    ****      *cmplx, power;
 301:src/menu.c    ****      *No, sums is already on g9.
 302:src/menu.c    ****      */
 303:src/menu.c    ****     { 
 304:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 305:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 306:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 307:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 308:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 309:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 310:src/menu.c    ****     }
 311:src/menu.c    ****   },
 312:src/menu.c    ****   {
 313:src/menu.c    ****     "M_Setup2", // 13
 314:src/menu.c    ****     { 
 315:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 316:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 317:src/menu.c    ****       { { K_MULTI, SVPRG }, { K_OP, OP_NIL | OP_PSTO }, "SvCPRG", "PSTO" },
 318:src/menu.c    ****       { { K_MULTI, LDPRG }, { K_OP, OP_NIL | OP_PRCL }, "LdPRG", "PRCL" },
 319:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 320:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 321:src/menu.c    ****     }
 322:src/menu.c    ****   },
 323:src/menu.c    ****   {
 324:src/menu.c    ****     "M_Solve", // 14
 325:src/menu.c    ****     { 
 326:src/menu.c    ****       { { K52, 1 }, { K_OP, RARG_BASEOP(RARG_DERIV)}, "SLV", "f'(x)" },
 327:src/menu.c    ****       { { K52, 2 }, { K_OP, RARG_BASEOP(RARG_2DERIV)}, "\004 dx", "f''(x)" },
 328:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 329:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 330:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
ARM GAS  /tmp/ccVzm1xY.s 			page 8


 331:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 332:src/menu.c    ****     }
 333:src/menu.c    ****   },
 334:src/menu.c    ****   {
 335:src/menu.c    ****     "M_Blank2", // 15
 336:src/menu.c    ****     { 
 337:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 338:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 339:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 340:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 341:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 342:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 343:src/menu.c    ****     }    
 344:src/menu.c    ****   },
 345:src/menu.c    ****   {
 346:src/menu.c    ****     "M_Alpha", // 16
 347:src/menu.c    ****     { 
 348:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 349:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 350:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 351:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 352:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 353:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 354:src/menu.c    ****     }    
 355:src/menu.c    ****   },
 356:src/menu.c    ****   {
 357:src/menu.c    ****     "M_C_Lock", // 17
 358:src/menu.c    ****     { 
 359:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 360:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 361:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "+/-\006Im", "+/-\006Re" },
 362:src/menu.c    ****       { { K21, 2 }, { K00, 1 }, "Re\027Im", "HYP" },
 363:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 364:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 365:src/menu.c    ****     }    
 366:src/menu.c    ****   },
 367:src/menu.c    ****   {
 368:src/menu.c    ****     "M_Clear_C", // 18
 369:src/menu.c    ****     { 
 370:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 371:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 372:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 373:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, NO_KEY, "CLStk", "" },
 374:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 375:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 376:src/menu.c    ****     }    
 377:src/menu.c    ****   },
 378:src/menu.c    ****   {
 379:src/menu.c    ****     "M_Swap_C", // 19
 380:src/menu.c    ****     { 
 381:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 382:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 383:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 384:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 385:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 386:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 387:src/menu.c    ****     }    
ARM GAS  /tmp/ccVzm1xY.s 			page 9


 388:src/menu.c    ****   },
 389:src/menu.c    ****   {
 390:src/menu.c    ****     "M_Arrow_C", // 20
 391:src/menu.c    ****     { 
 392:src/menu.c    ****       { NO_KEY, { K10, 2 }, "", "DEG" },
 393:src/menu.c    ****       { NO_KEY, { K11, 2 }, "", "RAD" },
 394:src/menu.c    ****       { NO_KEY, { K12, 2 }, "", "Grad" },
 395:src/menu.c    ****       { NO_KEY, { K10, 1 }, "", "\015HMS" },
 396:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 397:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 398:src/menu.c    ****     }
 399:src/menu.c    ****   },
 400:src/menu.c    ****   {
 401:src/menu.c    ****     "M_Prob_C", // 21
 402:src/menu.c    ****     { 
 403:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_CMON | OP_LNGAMMA }, "\024\006!", "\024\006Ln\006\202" },
 404:src/menu.c    ****       { { K_OP, OP_CDYA | OP_COMB }, NO_KEY, "\024\006Cy,x", "" },
 405:src/menu.c    ****       { { K_OP, OP_CDYA | OP_PERM }, NO_KEY, "\024\006Py,x", "" },
 406:src/menu.c    ****       { NO_KEY, NO_KEY , "", "" },
 407:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 408:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 409:src/menu.c    ****     }
 410:src/menu.c    ****   },
 411:src/menu.c    ****   {
 412:src/menu.c    ****     "M_Blank2_C", // 22
 413:src/menu.c    ****     { 
 414:src/menu.c    ****       { { K00, 1 }, NO_KEY, "HYP", "" },
 415:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 416:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 417:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 418:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 419:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 420:src/menu.c    ****     }    
 421:src/menu.c    ****   },
 422:src/menu.c    ****   {
 423:src/menu.c    ****     "M_Misc_C", // 23
 424:src/menu.c    ****     { 
 425:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|z|", "\0242\234" },
 426:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "\024Log\272" },
 427:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "0\015Re", "\024Log\213" },
 428:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "0\015Im", "\024||el" },
 429:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "\024.\034" },
 430:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "\024./" },
 431:src/menu.c    ****     }
 432:src/menu.c    ****   },
 433:src/menu.c    ****   {
 434:src/menu.c    ****     "M_Usermenu", // 24
 435:src/menu.c    ****     { 
 436:src/menu.c    ****       { { K_OP, 0x0000fb00  }, NO_KEY, "UMEN", "" },
 437:src/menu.c    ****       { { K_OP, 0x314dfb55 }, { K_OP, 0x344dfb55 }, "UM1", "UM4" },
 438:src/menu.c    ****       { { K_OP, 0x324dfb55 }, { K_OP, 0x354dfb55 }, "UM2", "UM5" },
 439:src/menu.c    ****       { { K_OP, 0x334dfb55 }, { K_OP, 0x364dfb55 }, "UM3", "UM6" },
 440:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "" },
 441:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "" },
 442:src/menu.c    ****     }
 443:src/menu.c    ****   },
 444:src/menu.c    ****   {
ARM GAS  /tmp/ccVzm1xY.s 			page 10


 445:src/menu.c    ****     "M_Print", // 25
 446:src/menu.c    ****     { 
 447:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_ON  }, { K_OP, OP_NIL | OP_PRINT_OFF }, "\222\006On", "\222\006Of
 448:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_PMODE) }, { K_OP, RARG_BASEOP(RARG_DBLSP) }, "\222\006Mode", "\222
 449:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_PGM }, { K_OP, OP_NIL | OP_PRINT_REGS }, "\222\006Prog", "\222\00
 450:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_STACK }, { K_OP, OP_NIL | OP_PRINT_SIGMA }, "\222\006Stk", "\222\
 451:src/menu.c    ****       { ARROW_KEY, { K_OP, OP_NIL | OP_PRINT_ALPHA }, "--\015", "\222\006\240" },
 452:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PRINT_ADV }, "CPX", "\222\006ADV" },
 453:src/menu.c    ****     }
 454:src/menu.c    ****   },
 455:src/menu.c    **** 
 456:src/menu.c    **** };  
 457:src/menu.c    **** 
 458:src/menu.c    **** /* This code is the set_status_sized code with small changes
 459:src/menu.c    ****  * and non-DM42 code removed.
 460:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 461:src/menu.c    ****  */
 462:src/menu.c    **** #define MENU_WIDTH 32
 463:src/menu.c    **** 
 464:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 464 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 465:src/menu.c    ****   // dotcol is the number of the starting dot column
 466:src/menu.c    ****   // shifted is 1 if shifted
 467:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 467 3 view .LVU8
 468:src/menu.c    **** 
 469:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 470:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 470 3 view .LVU9
 471:src/menu.c    **** 
 472:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 472 3 view .LVU10
 464:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 464 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 464:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 464 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 473:src/menu.c    ****   int i, j, xmax;
 474:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 474 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
ARM GAS  /tmp/ccVzm1xY.s 			page 11


  96 000e B4BF     		ite	lt
  97 0010 01F11F03 		addlt	r3, r1, #31
  98 0014 0B46     		movge	r3, r1
 475:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 476:src/menu.c    **** 
 477:src/menu.c    ****   forceDispPlot=0;
  99              		.loc 1 477 16 view .LVU14
 100 0016 4848     		ldr	r0, .L41
 101              	.LVL3:
 464:src/menu.c    ****   // dotcol is the number of the starting dot column
 102              		.loc 1 464 13 view .LVU15
 103 0018 0F46     		mov	r7, r1
 104              	.LVL4:
 473:src/menu.c    ****   int i, j, xmax;
 105              		.loc 1 473 3 is_stmt 1 view .LVU16
 474:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 106              		.loc 1 474 3 view .LVU17
 478:src/menu.c    **** 
 479:src/menu.c    **** #ifdef RP_PREFIX
 480:src/menu.c    ****   RectPolConv = 0;
 107              		.loc 1 480 15 is_stmt 0 view .LVU18
 108 001a 4849     		ldr	r1, .L41+4
 109              	.LVL5:
 477:src/menu.c    **** 
 110              		.loc 1 477 16 view .LVU19
 111 001c 0022     		movs	r2, #0
 112              	.LVL6:
 477:src/menu.c    **** 
 113              		.loc 1 477 16 view .LVU20
 114 001e 0270     		strb	r2, [r0]
 115              		.loc 1 480 15 view .LVU21
 116 0020 0A60     		str	r2, [r1]
 481:src/menu.c    **** #endif
 482:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 117              		.loc 1 482 10 view .LVU22
 118 0022 019A     		ldr	r2, [sp, #4]
 119 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 474:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 120              		.loc 1 474 30 view .LVU23
 121 0026 23F01F03 		bic	r3, r3, #31
 474:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 122              		.loc 1 474 8 view .LVU24
 123 002a 03F12009 		add	r9, r3, #32
 124              	.LVL7:
 475:src/menu.c    **** 
 125              		.loc 1 475 3 is_stmt 1 view .LVU25
 477:src/menu.c    **** 
 126              		.loc 1 477 3 view .LVU26
 480:src/menu.c    **** #endif
 127              		.loc 1 480 3 view .LVU27
 128              		.loc 1 482 3 view .LVU28
 129              		.loc 1 482 9 view .LVU29
 130 002e 002D     		cmp	r5, #0
 131 0030 78D0     		beq	.L7
 132              		.loc 1 482 23 is_stmt 0 view .LVU30
 133 0032 4F45     		cmp	r7, r9
 134 0034 76DC     		bgt	.L7
ARM GAS  /tmp/ccVzm1xY.s 			page 12


 135              	.LBB39:
 483:src/menu.c    ****     int c;
 484:src/menu.c    ****     int width;
 485:src/menu.c    ****     unsigned char cmap[6];
 486:src/menu.c    **** 
 487:src/menu.c    ****     int real_width;
 488:src/menu.c    ****     int current_smallp;
 489:src/menu.c    **** 
 490:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 491:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 492:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 493:src/menu.c    ****     //           01 -> (not used)
 494:src/menu.c    ****     //           10 -> use big font
 495:src/menu.c    ****     //           11 -> use small font
 496:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 497:src/menu.c    ****     if (str[0] == '\007') {
 136              		.loc 1 497 8 view .LVU31
 137 0036 072D     		cmp	r5, #7
 138              	.LBE39:
 470:src/menu.c    **** 
 139              		.loc 1 470 7 view .LVU32
 140 0038 4FF0FF04 		mov	r4, #255
 141              	.LVL8:
 142              	.LBB56:
 483:src/menu.c    ****     int c;
 143              		.loc 1 483 5 is_stmt 1 view .LVU33
 484:src/menu.c    ****     unsigned char cmap[6];
 144              		.loc 1 484 5 view .LVU34
 485:src/menu.c    **** 
 145              		.loc 1 485 5 view .LVU35
 487:src/menu.c    ****     int current_smallp;
 146              		.loc 1 487 5 view .LVU36
 488:src/menu.c    **** 
 147              		.loc 1 488 5 view .LVU37
 148              		.loc 1 497 5 view .LVU38
 498:src/menu.c    ****       width = str[1] & 0x1F;
 499:src/menu.c    ****       switch (str[1] & 0x60) {
 500:src/menu.c    ****       default:
 501:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 502:src/menu.c    **** 	break;
 503:src/menu.c    ****       case 0x40:	current_smallp = 0;
 504:src/menu.c    **** 	break;
 505:src/menu.c    ****       case 0x60:	current_smallp = 1;
 149              		.loc 1 505 33 is_stmt 0 view .LVU39
 150 003c 4FF0010A 		mov	r10, #1
 497:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 497 8 view .LVU40
 152 0040 64D1     		bne	.L11
 153              	.LVL9:
 154              	.L39:
 498:src/menu.c    ****       width = str[1] & 0x1F;
 155              		.loc 1 498 7 is_stmt 1 view .LVU41
 498:src/menu.c    ****       width = str[1] & 0x1F;
 156              		.loc 1 498 18 is_stmt 0 view .LVU42
 157 0042 019B     		ldr	r3, [sp, #4]
 158 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 159 0046 06F06003 		and	r3, r6, #96
ARM GAS  /tmp/ccVzm1xY.s 			page 13


 499:src/menu.c    ****       default:
 160              		.loc 1 499 7 view .LVU43
 161 004a 402B     		cmp	r3, #64
 498:src/menu.c    ****       width = str[1] & 0x1F;
 162              		.loc 1 498 13 view .LVU44
 163 004c 06F01F06 		and	r6, r6, #31
 164              	.LVL10:
 499:src/menu.c    ****       default:
 165              		.loc 1 499 7 is_stmt 1 view .LVU45
 166 0050 6CD0     		beq	.L34
 167 0052 602B     		cmp	r3, #96
 168 0054 6AD1     		bne	.L34
 169              		.loc 1 505 18 view .LVU46
 170              	.LVL11:
 506:src/menu.c    **** 	break;
 171              		.loc 1 506 2 view .LVU47
 507:src/menu.c    ****       }
 508:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 172              		.loc 1 508 7 view .LVU48
 173              		.loc 1 508 11 is_stmt 0 view .LVU49
 174 0056 019B     		ldr	r3, [sp, #4]
 175 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 505:src/menu.c    **** 	break;
 176              		.loc 1 505 33 view .LVU50
 177 005a 0123     		movs	r3, #1
 178 005c 0093     		str	r3, [sp]
 179 005e 00F58075 		add	r5, r0, #256
 180              	.LVL12:
 181              	.L15:
 509:src/menu.c    ****       str += 3;
 182              		.loc 1 509 7 is_stmt 1 view .LVU51
 510:src/menu.c    **** 
 511:src/menu.c    ****       real_width = charlengths(c);
 183              		.loc 1 511 20 is_stmt 0 view .LVU52
 184 0062 2846     		mov	r0, r5
 185 0064 FFF7FEFF 		bl	charlengths
 186              	.LVL13:
 509:src/menu.c    ****       str += 3;
 187              		.loc 1 509 11 view .LVU53
 188 0068 019B     		ldr	r3, [sp, #4]
 189 006a 0333     		adds	r3, r3, #3
 190 006c 0193     		str	r3, [sp, #4]
 191              	.LVL14:
 192              		.loc 1 511 7 is_stmt 1 view .LVU54
 512:src/menu.c    ****     } else {
 513:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 514:src/menu.c    ****       real_width = width = charlengths(c);
 515:src/menu.c    ****       current_smallp = smallp;
 516:src/menu.c    ****     }
 517:src/menu.c    **** 
 518:src/menu.c    ****     if (x + real_width > xmax)
 193              		.loc 1 518 5 view .LVU55
 194              		.loc 1 518 11 is_stmt 0 view .LVU56
 195 006e C319     		adds	r3, r0, r7
 196              	.LVL15:
 197              		.loc 1 518 8 view .LVU57
 198 0070 9945     		cmp	r9, r3
ARM GAS  /tmp/ccVzm1xY.s 			page 14


 199 0072 57DB     		blt	.L7
 200              	.L40:
 519:src/menu.c    ****       break;
 520:src/menu.c    **** 
 521:src/menu.c    ****     if (posns_state != current_smallp) {
 201              		.loc 1 521 5 is_stmt 1 view .LVU58
 202              		.loc 1 521 8 is_stmt 0 view .LVU59
 203 0074 009B     		ldr	r3, [sp]
 204 0076 A342     		cmp	r3, r4
 522:src/menu.c    ****       findlengths(posns, current_smallp);
 205              		.loc 1 522 7 view .LVU60
 206 0078 07AB     		add	r3, sp, #28
 521:src/menu.c    ****       findlengths(posns, current_smallp);
 207              		.loc 1 521 8 view .LVU61
 208 007a 05D0     		beq	.L18
 209              		.loc 1 522 7 is_stmt 1 view .LVU62
 210 007c 1846     		mov	r0, r3
 211              	.LVL16:
 212              		.loc 1 522 7 is_stmt 0 view .LVU63
 213 007e 0099     		ldr	r1, [sp]
 214 0080 0393     		str	r3, [sp, #12]
 215 0082 FFF7FEFF 		bl	findlengths
 216              	.LVL17:
 217 0086 039B     		ldr	r3, [sp, #12]
 523:src/menu.c    ****       posns_state = current_smallp;
 218              		.loc 1 523 7 is_stmt 1 view .LVU64
 219              	.LVL18:
 220              	.L18:
 524:src/menu.c    ****     }
 525:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 221              		.loc 1 525 5 view .LVU65
 222 0088 009A     		ldr	r2, [sp]
 223 008a 2846     		mov	r0, r5
 224 008c 05A9     		add	r1, sp, #20
 225 008e FFF7FEFF 		bl	unpackchar
 226              	.LVL19:
 526:src/menu.c    **** 
 527:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 227              		.loc 1 527 5 view .LVU66
 228              		.loc 1 527 15 view .LVU67
 229 0092 029B     		ldr	r3, [sp, #8]
 230 0094 03EB4704 		add	r4, r3, r7, lsl #1
 231 0098 294B     		ldr	r3, .L41+8
 232 009a 0DF1140B 		add	fp, sp, #20
 233 009e 1C44     		add	r4, r4, r3
 525:src/menu.c    **** 
 234              		.loc 1 525 5 is_stmt 0 view .LVU68
 235 00a0 4FF0050E 		mov	lr, #5
 236 00a4 A9EB0705 		sub	r5, r9, r7
 237              	.LVL20:
 238              	.L19:
 528:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 239              		.loc 1 528 17 is_stmt 1 view .LVU69
 240              		.loc 1 528 7 is_stmt 0 view .LVU70
 241 00a8 002E     		cmp	r6, #0
 242 00aa 1FDD     		ble	.L25
 529:src/menu.c    **** 	if (x+j >= xmax)
ARM GAS  /tmp/ccVzm1xY.s 			page 15


 243              		.loc 1 529 2 is_stmt 1 view .LVU71
 244              		.loc 1 529 5 is_stmt 0 view .LVU72
 245 00ac B945     		cmp	r9, r7
 246 00ae 1DDD     		ble	.L25
 247              	.LBB40:
 248              	.LBB41:
 249              	.LBB42:
 250              	.LBB43:
 530:src/menu.c    **** 	  break;
 531:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 532:src/menu.c    ****       }
 533:src/menu.c    ****     }
 534:src/menu.c    ****     x += width;
 535:src/menu.c    ****   }
 536:src/menu.c    **** }
 537:src/menu.c    **** 
 538:src/menu.c    **** 
 539:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 540:src/menu.c    **** 
 541:src/menu.c    **** int pixel_length(const char *s, int smallp)
 542:src/menu.c    **** {
 543:src/menu.c    ****   int len = 0;
 544:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 545:src/menu.c    ****   while (*s != '\0') {
 546:src/menu.c    ****     if (s[0] == '\007') {
 547:src/menu.c    ****       len += s[1] & 0x1F;
 548:src/menu.c    ****       s += 3;
 549:src/menu.c    ****       continue;
 550:src/menu.c    ****     }
 551:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 552:src/menu.c    ****   }
 553:src/menu.c    ****   return len;
 554:src/menu.c    **** }
 555:src/menu.c    **** */
 556:src/menu.c    **** 
 557:src/menu.c    **** 
 558:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 559:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 560:src/menu.c    ****   if (on) {
 561:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 562:src/menu.c    ****   }
 563:src/menu.c    ****   else {
 564:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 251              		.loc 1 564 25 view .LVU73
 252 00b0 0AFA0EFC 		lsl	ip, r10, lr
 253              		.loc 1 564 17 view .LVU74
 254 00b4 4FFA8CFC 		sxtb	ip, ip
 255              	.LBE43:
 256              	.LBE42:
 257              	.LBE41:
 258              	.LBE40:
 531:src/menu.c    ****       }
 259              		.loc 1 531 31 view .LVU75
 260 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 261              	.LBB53:
 262              	.LBB50:
 263              	.LBB47:
ARM GAS  /tmp/ccVzm1xY.s 			page 16


 264              	.LBB44:
 265              		.loc 1 564 17 view .LVU76
 266 00bc 6FEA0C08 		mvn	r8, ip
 267              	.LBE44:
 268              	.LBE47:
 269              	.LBE50:
 270              	.LBE53:
 528:src/menu.c    **** 	if (x+j >= xmax)
 271              		.loc 1 528 13 view .LVU77
 272 00c0 0023     		movs	r3, #0
 273 00c2 01E0     		b	.L20
 274              	.LVL21:
 275              	.L24:
 529:src/menu.c    **** 	  break;
 276              		.loc 1 529 5 view .LVU78
 277 00c4 9D42     		cmp	r5, r3
 278 00c6 11D0     		beq	.L25
 279              	.LVL22:
 280              	.L20:
 531:src/menu.c    ****       }
 281              		.loc 1 531 2 is_stmt 1 view .LVU79
 282              	.LBB54:
 283              	.LBI40:
 558:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 558 6 view .LVU80
 285              	.LBB51:
 559:src/menu.c    ****   if (on) {
 286              		.loc 1 559 3 view .LVU81
 287              	.LBB48:
 288              	.LBI42:
 558:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 289              		.loc 1 558 6 view .LVU82
 290              	.LBB45:
 560:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 291              		.loc 1 560 3 view .LVU83
 292              	.LBE45:
 293              	.LBE48:
 559:src/menu.c    ****   if (on) {
 294              		.loc 1 559 6 is_stmt 0 view .LVU84
 295 00c8 DA19     		adds	r2, r3, r7
 296              	.LVL23:
 559:src/menu.c    ****   if (on) {
 297              		.loc 1 559 6 view .LVU85
 298 00ca C72A     		cmp	r2, #199
 299              	.LBE51:
 300              	.LBE54:
 531:src/menu.c    ****       }
 301              		.loc 1 531 46 view .LVU86
 302 00cc 40FA03F1 		asr	r1, r0, r3
 303              	.LBB55:
 304              	.LBB52:
 559:src/menu.c    ****   if (on) {
 305              		.loc 1 559 6 view .LVU87
 306 00d0 09D8     		bhi	.L22
 307              	.LBB49:
 308              	.LBB46:
 561:src/menu.c    ****   }
ARM GAS  /tmp/ccVzm1xY.s 			page 17


 309              		.loc 1 561 5 is_stmt 1 view .LVU88
 310              		.loc 1 564 5 view .LVU89
 561:src/menu.c    ****   }
 311              		.loc 1 561 17 is_stmt 0 view .LVU90
 312 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 313              	.LVL24:
 560:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 314              		.loc 1 560 6 view .LVU91
 315 00d6 C907     		lsls	r1, r1, #31
 561:src/menu.c    ****   }
 316              		.loc 1 561 17 view .LVU92
 317 00d8 4CBF     		ite	mi
 318 00da 4CEA0202 		orrmi	r2, ip, r2
 319              		.loc 1 564 17 view .LVU93
 320 00de 08EA0202 		andpl	r2, r8, r2
 321 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 322              	.L22:
 323              	.LBE46:
 324              	.LBE49:
 325              	.LBE52:
 326              	.LBE55:
 529:src/menu.c    **** 	  break;
 327              		.loc 1 529 2 is_stmt 1 view .LVU94
 328              	.LVL25:
 528:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 528 26 view .LVU95
 528:src/menu.c    **** 	if (x+j >= xmax)
 330              		.loc 1 528 27 is_stmt 0 view .LVU96
 331 00e6 0133     		adds	r3, r3, #1
 332              	.LVL26:
 528:src/menu.c    **** 	if (x+j >= xmax)
 333              		.loc 1 528 17 is_stmt 1 view .LVU97
 528:src/menu.c    **** 	if (x+j >= xmax)
 334              		.loc 1 528 7 is_stmt 0 view .LVU98
 335 00e8 B342     		cmp	r3, r6
 336 00ea EBD1     		bne	.L24
 337              	.LVL27:
 338              	.L25:
 527:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 339              		.loc 1 527 20 is_stmt 1 view .LVU99
 527:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 340              		.loc 1 527 15 view .LVU100
 341 00ec 0EF1FF3E 		add	lr, lr, #-1
 527:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 342              		.loc 1 527 5 is_stmt 0 view .LVU101
 343 00f0 BEF1FF3F 		cmp	lr, #-1
 344 00f4 0BF1010B 		add	fp, fp, #1
 345              	.LVL28:
 527:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 346              		.loc 1 527 5 view .LVU102
 347 00f8 D6D1     		bne	.L19
 534:src/menu.c    ****   }
 348              		.loc 1 534 5 is_stmt 1 view .LVU103
 349              	.LBE56:
 482:src/menu.c    ****     int c;
 350              		.loc 1 482 10 is_stmt 0 view .LVU104
 351 00fa 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/ccVzm1xY.s 			page 18


 352 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 353              	.LBB57:
 534:src/menu.c    ****   }
 354              		.loc 1 534 7 view .LVU105
 355 00fe 3744     		add	r7, r7, r6
 356              	.LVL29:
 534:src/menu.c    ****   }
 357              		.loc 1 534 7 view .LVU106
 358              	.LBE57:
 482:src/menu.c    ****     int c;
 359              		.loc 1 482 9 is_stmt 1 view .LVU107
 360 0100 85B1     		cbz	r5, .L7
 482:src/menu.c    ****     int c;
 361              		.loc 1 482 23 is_stmt 0 view .LVU108
 362 0102 B945     		cmp	r9, r7
 363 0104 0EDB     		blt	.L7
 364              	.LBB58:
 497:src/menu.c    ****       width = str[1] & 0x1F;
 365              		.loc 1 497 8 view .LVU109
 366 0106 072D     		cmp	r5, #7
 367              	.LBE58:
 368 0108 009C     		ldr	r4, [sp]
 369              	.LBB59:
 483:src/menu.c    ****     int width;
 370              		.loc 1 483 5 is_stmt 1 view .LVU110
 484:src/menu.c    ****     unsigned char cmap[6];
 371              		.loc 1 484 5 view .LVU111
 485:src/menu.c    **** 
 372              		.loc 1 485 5 view .LVU112
 487:src/menu.c    ****     int current_smallp;
 373              		.loc 1 487 5 view .LVU113
 488:src/menu.c    **** 
 374              		.loc 1 488 5 view .LVU114
 497:src/menu.c    ****       width = str[1] & 0x1F;
 375              		.loc 1 497 5 view .LVU115
 497:src/menu.c    ****       width = str[1] & 0x1F;
 376              		.loc 1 497 8 is_stmt 0 view .LVU116
 377 010a 9AD0     		beq	.L39
 378              	.LVL30:
 379              	.L11:
 513:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 513 7 is_stmt 1 view .LVU117
 514:src/menu.c    ****       current_smallp = smallp;
 381              		.loc 1 514 28 is_stmt 0 view .LVU118
 382 010c 2846     		mov	r0, r5
 383 010e FFF7FEFF 		bl	charlengths
 384              	.LVL31:
 513:src/menu.c    ****       real_width = width = charlengths(c);
 385              		.loc 1 513 31 view .LVU119
 386 0112 019B     		ldr	r3, [sp, #4]
 387 0114 0133     		adds	r3, r3, #1
 388 0116 0193     		str	r3, [sp, #4]
 389              	.LVL32:
 514:src/menu.c    ****       current_smallp = smallp;
 390              		.loc 1 514 7 is_stmt 1 view .LVU120
 515:src/menu.c    ****     }
 391              		.loc 1 515 7 view .LVU121
ARM GAS  /tmp/ccVzm1xY.s 			page 19


 515:src/menu.c    ****     }
 392              		.loc 1 515 22 is_stmt 0 view .LVU122
 393 0118 0023     		movs	r3, #0
 394              	.LVL33:
 515:src/menu.c    ****     }
 395              		.loc 1 515 22 view .LVU123
 396 011a 0093     		str	r3, [sp]
 397              	.LVL34:
 518:src/menu.c    ****       break;
 398              		.loc 1 518 11 view .LVU124
 399 011c C319     		adds	r3, r0, r7
 400              	.LVL35:
 518:src/menu.c    ****       break;
 401              		.loc 1 518 8 view .LVU125
 402 011e 9945     		cmp	r9, r3
 514:src/menu.c    ****       current_smallp = smallp;
 403              		.loc 1 514 28 view .LVU126
 404 0120 0646     		mov	r6, r0
 518:src/menu.c    ****       break;
 405              		.loc 1 518 5 is_stmt 1 view .LVU127
 518:src/menu.c    ****       break;
 406              		.loc 1 518 8 is_stmt 0 view .LVU128
 407 0122 A7DA     		bge	.L40
 408              	.LVL36:
 409              	.L7:
 518:src/menu.c    ****       break;
 410              		.loc 1 518 8 view .LVU129
 411              	.LBE59:
 536:src/menu.c    **** 
 412              		.loc 1 536 1 view .LVU130
 413 0124 0DF5097D 		add	sp, sp, #548
 414              		.cfi_remember_state
 415              		.cfi_def_cfa_offset 36
 416              		@ sp needed
 417 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 418              	.LVL37:
 419              	.L34:
 420              		.cfi_restore_state
 421              	.LBB60:
 508:src/menu.c    ****       str += 3;
 422              		.loc 1 508 7 is_stmt 1 view .LVU131
 508:src/menu.c    ****       str += 3;
 423              		.loc 1 508 11 is_stmt 0 view .LVU132
 424 012c 019B     		ldr	r3, [sp, #4]
 425 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 501:src/menu.c    **** 	break;
 426              		.loc 1 501 33 view .LVU133
 427 0130 0023     		movs	r3, #0
 428 0132 0093     		str	r3, [sp]
 429 0134 95E7     		b	.L15
 430              	.L42:
 431 0136 00BF     		.align	2
 432              	.L41:
 433 0138 00000000 		.word	forceDispPlot
 434 013c 00000000 		.word	RectPolConv
 435 0140 00000000 		.word	.LANCHOR0
 436              	.LBE60:
ARM GAS  /tmp/ccVzm1xY.s 			page 20


 437              		.cfi_endproc
 438              	.LFE37:
 440              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 441              		.align	2
 442              	.LC4:
 443 0000 57503334 		.ascii	"WP34C calculator for DM42:\000"
 443      43206361 
 443      6C63756C 
 443      61746F72 
 443      20666F72 
 444 001b 00       		.align	2
 445              	.LC5:
 446 001c 746F7020 		.ascii	"top row version,\000"
 446      726F7720 
 446      76657273 
 446      696F6E2C 
 446      00
 447 002d 000000   		.align	2
 448              	.LC6:
 449 0030 696E636C 		.ascii	"including COMPLEX LOCK mode!\000"
 449      7564696E 
 449      6720434F 
 449      4D504C45 
 449      58204C4F 
 450 004d 000000   		.align	2
 451              	.LC7:
 452 0050 54686973 		.ascii	"This software is neither provided\000"
 452      20736F66 
 452      74776172 
 452      65206973 
 452      206E6569 
 453 0072 0000     		.align	2
 454              	.LC8:
 455 0074 6279206E 		.ascii	"by nor supported by SwissMicros.\000"
 455      6F722073 
 455      7570706F 
 455      72746564 
 455      20627920 
 456 0095 000000   		.align	2
 457              	.LC9:
 458 0098 20202020 		.ascii	"    Press EXIT key to continue...\000"
 458      50726573 
 458      73204558 
 458      4954206B 
 458      65792074 
 459              		.section	.text.disp_about,"ax",%progbits
 460              		.align	1
 461              		.p2align 2,,3
 462              		.global	disp_about
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv4-sp-d16
 468              	disp_about:
 469              	.LFB5:
  73:src/menu.c    ****   lcd_clear_buf();
 470              		.loc 1 73 19 is_stmt 1 view -0
ARM GAS  /tmp/ccVzm1xY.s 			page 21


 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
  74:src/menu.c    ****   lcd_writeClr(t24);
 474              		.loc 1 74 3 view .LVU135
  73:src/menu.c    ****   lcd_clear_buf();
 475              		.loc 1 73 19 is_stmt 0 view .LVU136
 476 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 477              		.cfi_def_cfa_offset 24
 478              		.cfi_offset 4, -24
 479              		.cfi_offset 5, -20
 480              		.cfi_offset 6, -16
 481              		.cfi_offset 7, -12
 482              		.cfi_offset 8, -8
 483              		.cfi_offset 14, -4
  75:src/menu.c    **** 
 484              		.loc 1 75 3 view .LVU137
 485 0004 1E4C     		ldr	r4, .L45
  74:src/menu.c    ****   lcd_writeClr(t24);
 486              		.loc 1 74 3 view .LVU138
 487 0006 1F4B     		ldr	r3, .L45+4
  78:src/menu.c    ****   t24->y += 5;
 488              		.loc 1 78 3 view .LVU139
 489 0008 1F4D     		ldr	r5, .L45+8
  74:src/menu.c    ****   lcd_writeClr(t24);
 490              		.loc 1 74 3 view .LVU140
 491 000a 9847     		blx	r3
 492              	.LVL38:
  75:src/menu.c    **** 
 493              		.loc 1 75 3 is_stmt 1 view .LVU141
 494 000c 606B     		ldr	r0, [r4, #52]
 495 000e 1F4B     		ldr	r3, .L45+12
 496 0010 9847     		blx	r3
 497              	.LVL39:
  77:src/menu.c    ****   lcd_printR(t24, "WP34C calculator for DM42:");
 498              		.loc 1 77 3 view .LVU142
 499 0012 0522     		movs	r2, #5
 500 0014 606B     		ldr	r0, [r4, #52]
 501 0016 1E4B     		ldr	r3, .L45+16
 502 0018 0021     		movs	r1, #0
 503 001a 9847     		blx	r3
 504              	.LVL40:
  78:src/menu.c    ****   t24->y += 5;
 505              		.loc 1 78 3 view .LVU143
  78:src/menu.c    ****   t24->y += 5;
 506              		.loc 1 78 3 view .LVU144
 507 001c 606B     		ldr	r0, [r4, #52]
 508 001e 1D49     		ldr	r1, .L45+20
 509 0020 0126     		movs	r6, #1
 510 0022 4674     		strb	r6, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 511              		.loc 1 78 3 view .LVU145
 512 0024 A847     		blx	r5
 513              	.LVL41:
  78:src/menu.c    ****   t24->y += 5;
 514              		.loc 1 78 3 view .LVU146
 515 0026 606B     		ldr	r0, [r4, #52]
ARM GAS  /tmp/ccVzm1xY.s 			page 22


  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 516              		.loc 1 81 3 is_stmt 0 view .LVU147
 517 0028 1B49     		ldr	r1, .L45+24
  79:src/menu.c    **** #ifdef TOP_ROW
 518              		.loc 1 79 10 view .LVU148
 519 002a C388     		ldrh	r3, [r0, #6]
  78:src/menu.c    ****   t24->y += 5;
 520              		.loc 1 78 3 view .LVU149
 521 002c 0027     		movs	r7, #0
  79:src/menu.c    **** #ifdef TOP_ROW
 522              		.loc 1 79 10 view .LVU150
 523 002e 0533     		adds	r3, r3, #5
 524 0030 C380     		strh	r3, [r0, #6]	@ movhi
  78:src/menu.c    ****   t24->y += 5;
 525              		.loc 1 78 3 view .LVU151
 526 0032 4774     		strb	r7, [r0, #17]
  78:src/menu.c    ****   t24->y += 5;
 527              		.loc 1 78 3 is_stmt 1 view .LVU152
  79:src/menu.c    **** #ifdef TOP_ROW
 528              		.loc 1 79 3 view .LVU153
  81:src/menu.c    ****   lcd_print(t24, "including COMPLEX LOCK mode!");
 529              		.loc 1 81 3 view .LVU154
 530 0034 A847     		blx	r5
 531              	.LVL42:
  82:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 532              		.loc 1 82 3 view .LVU155
 533 0036 606B     		ldr	r0, [r4, #52]
 534 0038 1849     		ldr	r1, .L45+28
 535 003a A847     		blx	r5
 536              	.LVL43:
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 537              		.loc 1 91 3 view .LVU156
 538 003c 606B     		ldr	r0, [r4, #52]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 539              		.loc 1 92 3 is_stmt 0 view .LVU157
 540 003e 1849     		ldr	r1, .L45+32
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 541              		.loc 1 91 10 view .LVU158
 542 0040 C388     		ldrh	r3, [r0, #6]
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 543              		.loc 1 92 3 view .LVU159
 544 0042 4674     		strb	r6, [r0, #17]
  91:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 545              		.loc 1 91 10 view .LVU160
 546 0044 0533     		adds	r3, r3, #5
 547 0046 C380     		strh	r3, [r0, #6]	@ movhi
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 548              		.loc 1 92 3 is_stmt 1 view .LVU161
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 549              		.loc 1 92 3 view .LVU162
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 550              		.loc 1 92 3 view .LVU163
 551 0048 A847     		blx	r5
 552              	.LVL44:
  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 553              		.loc 1 92 3 view .LVU164
 554 004a 606B     		ldr	r0, [r4, #52]
ARM GAS  /tmp/ccVzm1xY.s 			page 23


  92:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 555              		.loc 1 92 3 view .LVU165
  93:src/menu.c    **** 
 556              		.loc 1 93 3 view .LVU166
  93:src/menu.c    **** 
 557              		.loc 1 93 3 view .LVU167
 558 004c 1549     		ldr	r1, .L45+36
 559 004e 4674     		strb	r6, [r0, #17]
  93:src/menu.c    **** 
 560              		.loc 1 93 3 view .LVU168
 561 0050 A847     		blx	r5
 562              	.LVL45:
  93:src/menu.c    **** 
 563              		.loc 1 93 3 view .LVU169
 564 0052 606B     		ldr	r0, [r4, #52]
  95:src/menu.c    ****   t24->x = 20;
 565              		.loc 1 95 20 is_stmt 0 view .LVU170
 566 0054 144B     		ldr	r3, .L45+40
  93:src/menu.c    **** 
 567              		.loc 1 93 3 view .LVU171
 568 0056 4774     		strb	r7, [r0, #17]
  93:src/menu.c    **** 
 569              		.loc 1 93 3 is_stmt 1 view .LVU172
  95:src/menu.c    ****   t24->x = 20;
 570              		.loc 1 95 3 view .LVU173
  95:src/menu.c    ****   t24->x = 20;
 571              		.loc 1 95 20 is_stmt 0 view .LVU174
 572 0058 9847     		blx	r3
 573              	.LVL46:
  95:src/menu.c    ****   t24->x = 20;
 574              		.loc 1 95 3 view .LVU175
 575 005a 636B     		ldr	r3, [r4, #52]
  97:src/menu.c    **** 
 576              		.loc 1 97 3 view .LVU176
 577 005c 1349     		ldr	r1, .L45+44
 578 005e 5E74     		strb	r6, [r3, #17]
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 579              		.loc 1 96 10 view .LVU177
 580 0060 1422     		movs	r2, #20
  95:src/menu.c    ****   t24->x = 20;
 581              		.loc 1 95 39 view .LVU178
 582 0062 C0F1EB00 		rsb	r0, r0, #235
  95:src/menu.c    ****   t24->x = 20;
 583              		.loc 1 95 10 view .LVU179
 584 0066 D880     		strh	r0, [r3, #6]	@ movhi
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 585              		.loc 1 96 3 is_stmt 1 view .LVU180
  96:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 586              		.loc 1 96 10 is_stmt 0 view .LVU181
 587 0068 9A80     		strh	r2, [r3, #4]	@ movhi
  97:src/menu.c    **** 
 588              		.loc 1 97 3 is_stmt 1 view .LVU182
  97:src/menu.c    **** 
 589              		.loc 1 97 3 view .LVU183
  97:src/menu.c    **** 
 590              		.loc 1 97 3 view .LVU184
 591 006a 1846     		mov	r0, r3
ARM GAS  /tmp/ccVzm1xY.s 			page 24


 592 006c A847     		blx	r5
 593              	.LVL47:
  97:src/menu.c    **** 
 594              		.loc 1 97 3 view .LVU185
 595 006e 626B     		ldr	r2, [r4, #52]
  99:src/menu.c    **** 
 596              		.loc 1 99 3 is_stmt 0 view .LVU186
 597 0070 0F4B     		ldr	r3, .L45+48
  97:src/menu.c    **** 
 598              		.loc 1 97 3 view .LVU187
 599 0072 5774     		strb	r7, [r2, #17]
  97:src/menu.c    **** 
 600              		.loc 1 97 3 is_stmt 1 view .LVU188
  99:src/menu.c    **** 
 601              		.loc 1 99 3 view .LVU189
 602 0074 9847     		blx	r3
 603              	.LVL48:
 101:src/menu.c    **** }
 604              		.loc 1 101 3 view .LVU190
 102:src/menu.c    **** 
 605              		.loc 1 102 1 is_stmt 0 view .LVU191
 606 0076 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 607              		.cfi_restore 14
 608              		.cfi_restore 8
 609              		.cfi_restore 7
 610              		.cfi_restore 6
 611              		.cfi_restore 5
 612              		.cfi_restore 4
 613              		.cfi_def_cfa_offset 0
 101:src/menu.c    **** }
 614              		.loc 1 101 3 view .LVU192
 615 007a 0E4B     		ldr	r3, .L45+52
 616 007c 1847     		bx	r3	@ indirect register sibling call
 617              	.LVL49:
 618              	.L46:
 619 007e 00BF     		.align	2
 620              	.L45:
 621 0080 00200010 		.word	268443648
 622 0084 2D020008 		.word	134218285
 623 0088 B1020008 		.word	134218417
 624 008c 65020008 		.word	134218341
 625 0090 6D020008 		.word	134218349
 626 0094 00000000 		.word	.LC4
 627 0098 1C000000 		.word	.LC5
 628 009c 30000000 		.word	.LC6
 629 00a0 50000000 		.word	.LC7
 630 00a4 74000000 		.word	.LC8
 631 00a8 71020008 		.word	134218353
 632 00ac 98000000 		.word	.LC9
 633 00b0 31020008 		.word	134218289
 634 00b4 99030008 		.word	134218649
 635              		.cfi_endproc
 636              	.LFE5:
 638              		.section	.text.run_menu_item,"ax",%progbits
 639              		.align	1
 640              		.p2align 2,,3
 641              		.global	run_menu_item
ARM GAS  /tmp/ccVzm1xY.s 			page 25


 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	run_menu_item:
 648              	.LVL50:
 649              	.LFB3:
  42:src/menu.c    ****   int ret = 0;
 650              		.loc 1 42 36 is_stmt 1 view -0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
  43:src/menu.c    **** 
 654              		.loc 1 43 3 view .LVU194
  45:src/menu.c    ****     case MI_ABOUT_PGM:
 655              		.loc 1 45 3 view .LVU195
 656 0000 0B28     		cmp	r0, #11
 657 0002 04D1     		bne	.L49
  47:src/menu.c    ****       break;
 658              		.loc 1 47 7 view .LVU196
  42:src/menu.c    ****   int ret = 0;
 659              		.loc 1 42 36 is_stmt 0 view .LVU197
 660 0004 08B5     		push	{r3, lr}
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 3, -8
 663              		.cfi_offset 14, -4
  47:src/menu.c    ****       break;
 664              		.loc 1 47 7 view .LVU198
 665 0006 FFF7FEFF 		bl	disp_about
 666              	.LVL51:
  48:src/menu.c    **** 
 667              		.loc 1 48 7 is_stmt 1 view .LVU199
  43:src/menu.c    **** 
 668              		.loc 1 43 7 is_stmt 0 view .LVU200
 669 000a 0020     		movs	r0, #0
  56:src/menu.c    **** 
 670              		.loc 1 56 1 view .LVU201
 671 000c 08BD     		pop	{r3, pc}
 672              	.LVL52:
 673              	.L49:
 674              		.cfi_def_cfa_offset 0
 675              		.cfi_restore 3
 676              		.cfi_restore 14
  51:src/menu.c    ****       break;
 677              		.loc 1 51 11 view .LVU202
 678 000e 4FF0FF30 		mov	r0, #-1
 679              	.LVL53:
  55:src/menu.c    **** }
 680              		.loc 1 55 3 is_stmt 1 view .LVU203
  56:src/menu.c    **** 
 681              		.loc 1 56 1 is_stmt 0 view .LVU204
 682 0012 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE3:
 686              		.section	.text.set_menu,"ax",%progbits
 687              		.align	1
 688              		.p2align 2,,3
ARM GAS  /tmp/ccVzm1xY.s 			page 26


 689              		.global	set_menu
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu fpv4-sp-d16
 695              	set_menu:
 696              	.LVL54:
 697              	.LFB6:
 108:src/menu.c    ****   menu_name m = current_menu;
 698              		.loc 1 108 38 is_stmt 1 view -0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 703              		.loc 1 109 3 view .LVU206
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 704              		.loc 1 109 13 is_stmt 0 view .LVU207
 705 0000 0A4A     		ldr	r2, .L66
 706 0002 92F90030 		ldrsb	r3, [r2]
 707              	.LVL55:
 110:src/menu.c    ****     current_menu = default_menu;
 708              		.loc 1 110 3 is_stmt 1 view .LVU208
 110:src/menu.c    ****     current_menu = default_menu;
 709              		.loc 1 110 6 is_stmt 0 view .LVU209
 710 0006 8342     		cmp	r3, r0
 711 0008 0CD0     		beq	.L65
 113:src/menu.c    ****     current_menu = last_menu;
 712              		.loc 1 113 8 is_stmt 1 view .LVU210
 113:src/menu.c    ****     current_menu = last_menu;
 713              		.loc 1 113 11 is_stmt 0 view .LVU211
 714 000a 411C     		adds	r1, r0, #1
 114:src/menu.c    ****   }
 715              		.loc 1 114 5 is_stmt 1 view .LVU212
 114:src/menu.c    ****   }
 716              		.loc 1 114 18 is_stmt 0 view .LVU213
 717 000c 09BF     		itett	eq
 718 000e 0849     		ldreq	r1, .L66+4
 117:src/menu.c    ****   }
 719              		.loc 1 117 18 view .LVU214
 720 0010 1070     		strbne	r0, [r2]
 114:src/menu.c    ****   }
 721              		.loc 1 114 18 view .LVU215
 722 0012 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 723 0014 1170     		strbeq	r1, [r2]
 117:src/menu.c    ****   }
 724              		.loc 1 117 5 is_stmt 1 view .LVU216
 725              	.L56:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 726              		.loc 1 119 3 view .LVU217
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 727              		.loc 1 119 6 is_stmt 0 view .LVU218
 728 0016 092B     		cmp	r3, #9
 729 0018 03D0     		beq	.L54
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 730              		.loc 1 119 23 discriminator 1 view .LVU219
 731 001a 102B     		cmp	r3, #16
ARM GAS  /tmp/ccVzm1xY.s 			page 27


 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 732              		.loc 1 119 43 is_stmt 1 discriminator 1 view .LVU220
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 733              		.loc 1 119 53 is_stmt 0 discriminator 1 view .LVU221
 734 001c 1CBF     		itt	ne
 735 001e 044A     		ldrne	r2, .L66+4
 736 0020 1370     		strbne	r3, [r2]
 737              	.L54:
 121:src/menu.c    **** 
 738              		.loc 1 121 1 view .LVU222
 739 0022 7047     		bx	lr
 740              	.L65:
 111:src/menu.c    ****   }
 741              		.loc 1 111 5 is_stmt 1 view .LVU223
 111:src/menu.c    ****   }
 742              		.loc 1 111 18 is_stmt 0 view .LVU224
 743 0024 0349     		ldr	r1, .L66+8
 744 0026 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 745 0028 1170     		strb	r1, [r2]
 746 002a F4E7     		b	.L56
 747              	.L67:
 748              		.align	2
 749              	.L66:
 750 002c 00000000 		.word	.LANCHOR1
 751 0030 00000000 		.word	.LANCHOR3
 752 0034 00000000 		.word	.LANCHOR2
 753              		.cfi_endproc
 754              	.LFE6:
 756              		.section	.text.set_default_menu,"ax",%progbits
 757              		.align	1
 758              		.p2align 2,,3
 759              		.global	set_default_menu
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 763              		.fpu fpv4-sp-d16
 765              	set_default_menu:
 766              	.LFB7:
 123:src/menu.c    ****   set_menu (default_menu);
 767              		.loc 1 123 26 is_stmt 1 view -0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 124:src/menu.c    **** }
 772              		.loc 1 124 3 view .LVU226
 773 0000 0A4B     		ldr	r3, .L80
 774              	.LBB61:
 775              	.LBB62:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 776              		.loc 1 109 13 is_stmt 0 view .LVU227
 777 0002 0B49     		ldr	r1, .L80+4
 778              	.LBE62:
 779              	.LBE61:
 124:src/menu.c    **** }
 780              		.loc 1 124 3 view .LVU228
 781 0004 93F90020 		ldrsb	r2, [r3]
ARM GAS  /tmp/ccVzm1xY.s 			page 28


 782              	.LVL56:
 783              	.LBB65:
 784              	.LBI61:
 108:src/menu.c    ****   menu_name m = current_menu;
 785              		.loc 1 108 6 is_stmt 1 view .LVU229
 786              	.LBB63:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 787              		.loc 1 109 3 view .LVU230
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 788              		.loc 1 109 13 is_stmt 0 view .LVU231
 789 0008 91F90030 		ldrsb	r3, [r1]
 790              	.LVL57:
 110:src/menu.c    ****     current_menu = default_menu;
 791              		.loc 1 110 3 is_stmt 1 view .LVU232
 110:src/menu.c    ****     current_menu = default_menu;
 792              		.loc 1 110 6 is_stmt 0 view .LVU233
 793 000c 9A42     		cmp	r2, r3
 794 000e 0BD0     		beq	.L79
 113:src/menu.c    ****     current_menu = last_menu;
 795              		.loc 1 113 8 is_stmt 1 view .LVU234
 113:src/menu.c    ****     current_menu = last_menu;
 796              		.loc 1 113 11 is_stmt 0 view .LVU235
 797 0010 501C     		adds	r0, r2, #1
 114:src/menu.c    ****   }
 798              		.loc 1 114 5 is_stmt 1 view .LVU236
 114:src/menu.c    ****   }
 799              		.loc 1 114 18 is_stmt 0 view .LVU237
 800 0012 04BF     		itt	eq
 801 0014 074A     		ldreq	r2, .L80+8
 802              	.LVL58:
 114:src/menu.c    ****   }
 803              		.loc 1 114 18 view .LVU238
 804 0016 1278     		ldrbeq	r2, [r2]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 805              		.loc 1 117 5 is_stmt 1 view .LVU239
 117:src/menu.c    ****   }
 806              		.loc 1 117 18 is_stmt 0 view .LVU240
 807 0018 0A70     		strb	r2, [r1]
 808              	.LVL59:
 809              	.L70:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 810              		.loc 1 119 3 is_stmt 1 view .LVU241
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 811              		.loc 1 119 6 is_stmt 0 view .LVU242
 812 001a 092B     		cmp	r3, #9
 813 001c 03D0     		beq	.L68
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 814              		.loc 1 119 23 view .LVU243
 815 001e 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 816              		.loc 1 119 43 is_stmt 1 view .LVU244
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 817              		.loc 1 119 53 is_stmt 0 view .LVU245
 818 0020 1CBF     		itt	ne
 819 0022 044A     		ldrne	r2, .L80+8
 820 0024 1370     		strbne	r3, [r2]
 821              	.LVL60:
ARM GAS  /tmp/ccVzm1xY.s 			page 29


 822              	.L68:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 823              		.loc 1 119 53 view .LVU246
 824              	.LBE63:
 825              	.LBE65:
 125:src/menu.c    **** 
 826              		.loc 1 125 1 view .LVU247
 827 0026 7047     		bx	lr
 828              	.LVL61:
 829              	.L79:
 830              	.LBB66:
 831              	.LBB64:
 111:src/menu.c    ****   }
 832              		.loc 1 111 5 is_stmt 1 view .LVU248
 111:src/menu.c    ****   }
 833              		.loc 1 111 18 is_stmt 0 view .LVU249
 834 0028 0B70     		strb	r3, [r1]
 835 002a F6E7     		b	.L70
 836              	.L81:
 837              		.align	2
 838              	.L80:
 839 002c 00000000 		.word	.LANCHOR2
 840 0030 00000000 		.word	.LANCHOR1
 841 0034 00000000 		.word	.LANCHOR3
 842              	.LBE64:
 843              	.LBE66:
 844              		.cfi_endproc
 845              	.LFE7:
 847              		.section	.text.toggle_default_menu,"ax",%progbits
 848              		.align	1
 849              		.p2align 2,,3
 850              		.global	toggle_default_menu
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 854              		.fpu fpv4-sp-d16
 856              	toggle_default_menu:
 857              	.LFB8:
 127:src/menu.c    ****   if (current_menu == M_Blank) {
 858              		.loc 1 127 29 is_stmt 1 view -0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 0
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862              		@ link register save eliminated.
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 863              		.loc 1 128 3 view .LVU251
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 864              		.loc 1 128 20 is_stmt 0 view .LVU252
 865 0000 104A     		ldr	r2, .L98
 129:src/menu.c    ****     return;
 866              		.loc 1 129 33 view .LVU253
 867 0002 1149     		ldr	r1, .L98+4
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 868              		.loc 1 128 20 view .LVU254
 869 0004 92F90030 		ldrsb	r3, [r2]
 128:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 870              		.loc 1 128 6 view .LVU255
ARM GAS  /tmp/ccVzm1xY.s 			page 30


 871 0008 ABB1     		cbz	r3, .L95
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 872              		.loc 1 132 8 is_stmt 1 view .LVU256
 132:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 873              		.loc 1 132 11 is_stmt 0 view .LVU257
 874 000a 0F2B     		cmp	r3, #15
 875 000c 0FD0     		beq	.L96
 136:src/menu.c    ****   }
 876              		.loc 1 136 5 is_stmt 1 view .LVU258
 877              	.LBB67:
 878              	.LBI67:
 123:src/menu.c    ****   set_menu (default_menu);
 879              		.loc 1 123 6 view .LVU259
 880              	.LBB68:
 124:src/menu.c    **** }
 881              		.loc 1 124 3 view .LVU260
 882 000e 91F90010 		ldrsb	r1, [r1]
 883              	.LVL62:
 884              	.LBB69:
 885              	.LBI69:
 108:src/menu.c    ****   menu_name m = current_menu;
 886              		.loc 1 108 6 view .LVU261
 887              	.LBB70:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 888              		.loc 1 109 3 view .LVU262
 110:src/menu.c    ****     current_menu = default_menu;
 889              		.loc 1 110 3 view .LVU263
 110:src/menu.c    ****     current_menu = default_menu;
 890              		.loc 1 110 6 is_stmt 0 view .LVU264
 891 0012 8B42     		cmp	r3, r1
 892 0014 13D0     		beq	.L97
 113:src/menu.c    ****     current_menu = last_menu;
 893              		.loc 1 113 8 is_stmt 1 view .LVU265
 113:src/menu.c    ****     current_menu = last_menu;
 894              		.loc 1 113 11 is_stmt 0 view .LVU266
 895 0016 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 896              		.loc 1 114 5 is_stmt 1 view .LVU267
 114:src/menu.c    ****   }
 897              		.loc 1 114 18 is_stmt 0 view .LVU268
 898 0018 04BF     		itt	eq
 899 001a 0C49     		ldreq	r1, .L98+8
 900              	.LVL63:
 114:src/menu.c    ****   }
 901              		.loc 1 114 18 view .LVU269
 902 001c 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 903              		.loc 1 117 5 is_stmt 1 view .LVU270
 117:src/menu.c    ****   }
 904              		.loc 1 117 18 is_stmt 0 view .LVU271
 905 001e 1170     		strb	r1, [r2]
 906              	.LVL64:
 907              	.L87:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 908              		.loc 1 119 3 is_stmt 1 view .LVU272
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 909              		.loc 1 119 6 is_stmt 0 view .LVU273
ARM GAS  /tmp/ccVzm1xY.s 			page 31


 910 0020 092B     		cmp	r3, #9
 911 0022 03D0     		beq	.L82
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 912              		.loc 1 119 23 view .LVU274
 913 0024 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 914              		.loc 1 119 43 is_stmt 1 view .LVU275
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 915              		.loc 1 119 53 is_stmt 0 view .LVU276
 916 0026 1CBF     		itt	ne
 917 0028 084A     		ldrne	r2, .L98+8
 918 002a 1370     		strbne	r3, [r2]
 919              	.LVL65:
 920              	.L82:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 921              		.loc 1 119 53 view .LVU277
 922              	.LBE70:
 923              	.LBE69:
 924              	.LBE68:
 925              	.LBE67:
 138:src/menu.c    **** 
 926              		.loc 1 138 1 view .LVU278
 927 002c 7047     		bx	lr
 928              	.L96:
 133:src/menu.c    ****   }
 929              		.loc 1 133 5 is_stmt 1 view .LVU279
 133:src/menu.c    ****   }
 930              		.loc 1 133 33 is_stmt 0 view .LVU280
 931 002e 0023     		movs	r3, #0
 932 0030 0B70     		strb	r3, [r1]
 133:src/menu.c    ****   }
 933              		.loc 1 133 18 view .LVU281
 934 0032 1370     		strb	r3, [r2]
 935 0034 7047     		bx	lr
 936              	.L95:
 129:src/menu.c    ****     return;
 937              		.loc 1 129 5 is_stmt 1 view .LVU282
 129:src/menu.c    ****     return;
 938              		.loc 1 129 33 is_stmt 0 view .LVU283
 939 0036 0F23     		movs	r3, #15
 940 0038 0B70     		strb	r3, [r1]
 129:src/menu.c    ****     return;
 941              		.loc 1 129 18 view .LVU284
 942 003a 1370     		strb	r3, [r2]
 130:src/menu.c    ****   }
 943              		.loc 1 130 5 is_stmt 1 view .LVU285
 944 003c 7047     		bx	lr
 945              	.LVL66:
 946              	.L97:
 947              	.LBB74:
 948              	.LBB73:
 949              	.LBB72:
 950              	.LBB71:
 111:src/menu.c    ****   }
 951              		.loc 1 111 5 view .LVU286
 111:src/menu.c    ****   }
 952              		.loc 1 111 18 is_stmt 0 view .LVU287
ARM GAS  /tmp/ccVzm1xY.s 			page 32


 953 003e 1370     		strb	r3, [r2]
 954 0040 EEE7     		b	.L87
 955              	.L99:
 956 0042 00BF     		.align	2
 957              	.L98:
 958 0044 00000000 		.word	.LANCHOR1
 959 0048 00000000 		.word	.LANCHOR2
 960 004c 00000000 		.word	.LANCHOR3
 961              	.LBE71:
 962              	.LBE72:
 963              	.LBE73:
 964              	.LBE74:
 965              		.cfi_endproc
 966              	.LFE8:
 968              		.section	.text.get_menu,"ax",%progbits
 969              		.align	1
 970              		.p2align 2,,3
 971              		.global	get_menu
 972              		.syntax unified
 973              		.thumb
 974              		.thumb_func
 975              		.fpu fpv4-sp-d16
 977              	get_menu:
 978              	.LFB9:
 140:src/menu.c    ****   return current_menu;
 979              		.loc 1 140 23 is_stmt 1 view -0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 0
 982              		@ frame_needed = 0, uses_anonymous_args = 0
 983              		@ link register save eliminated.
 141:src/menu.c    **** }
 984              		.loc 1 141 3 view .LVU289
 141:src/menu.c    **** }
 985              		.loc 1 141 10 is_stmt 0 view .LVU290
 986 0000 014B     		ldr	r3, .L101
 142:src/menu.c    **** 
 987              		.loc 1 142 1 view .LVU291
 988 0002 93F90000 		ldrsb	r0, [r3]
 989 0006 7047     		bx	lr
 990              	.L102:
 991              		.align	2
 992              	.L101:
 993 0008 00000000 		.word	.LANCHOR1
 994              		.cfi_endproc
 995              	.LFE9:
 997              		.section	.text.get_last_menu,"ax",%progbits
 998              		.align	1
 999              		.p2align 2,,3
 1000              		.global	get_last_menu
 1001              		.syntax unified
 1002              		.thumb
 1003              		.thumb_func
 1004              		.fpu fpv4-sp-d16
 1006              	get_last_menu:
 1007              	.LFB10:
 144:src/menu.c    ****   return last_menu;
 1008              		.loc 1 144 28 is_stmt 1 view -0
ARM GAS  /tmp/ccVzm1xY.s 			page 33


 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 0
 1011              		@ frame_needed = 0, uses_anonymous_args = 0
 1012              		@ link register save eliminated.
 145:src/menu.c    **** }
 1013              		.loc 1 145 3 view .LVU293
 145:src/menu.c    **** }
 1014              		.loc 1 145 10 is_stmt 0 view .LVU294
 1015 0000 014B     		ldr	r3, .L104
 146:src/menu.c    **** 
 1016              		.loc 1 146 1 view .LVU295
 1017 0002 93F90000 		ldrsb	r0, [r3]
 1018 0006 7047     		bx	lr
 1019              	.L105:
 1020              		.align	2
 1021              	.L104:
 1022 0008 00000000 		.word	.LANCHOR3
 1023              		.cfi_endproc
 1024              	.LFE10:
 1026              		.section	.text.set_last_menu,"ax",%progbits
 1027              		.align	1
 1028              		.p2align 2,,3
 1029              		.global	set_last_menu
 1030              		.syntax unified
 1031              		.thumb
 1032              		.thumb_func
 1033              		.fpu fpv4-sp-d16
 1035              	set_last_menu:
 1036              	.LFB12:
 152:src/menu.c    ****   set_menu (M_Last);
 1037              		.loc 1 152 23 is_stmt 1 view -0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 0
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041              		@ link register save eliminated.
 153:src/menu.c    **** }
 1042              		.loc 1 153 3 view .LVU297
 1043              	.LVL67:
 1044              	.LBB75:
 1045              	.LBI75:
 108:src/menu.c    ****   menu_name m = current_menu;
 1046              		.loc 1 108 6 view .LVU298
 1047              	.LBB76:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1048              		.loc 1 109 3 view .LVU299
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1049              		.loc 1 109 13 is_stmt 0 view .LVU300
 1050 0000 0A4A     		ldr	r2, .L119
 1051 0002 92F90030 		ldrsb	r3, [r2]
 1052              	.LVL68:
 110:src/menu.c    ****     current_menu = default_menu;
 1053              		.loc 1 110 3 is_stmt 1 view .LVU301
 110:src/menu.c    ****     current_menu = default_menu;
 1054              		.loc 1 110 6 is_stmt 0 view .LVU302
 1055 0006 591C     		adds	r1, r3, #1
 1056 0008 09D0     		beq	.L116
 113:src/menu.c    ****     current_menu = last_menu;
ARM GAS  /tmp/ccVzm1xY.s 			page 34


 1057              		.loc 1 113 8 is_stmt 1 view .LVU303
 114:src/menu.c    ****   }
 1058              		.loc 1 114 5 view .LVU304
 114:src/menu.c    ****   }
 1059              		.loc 1 114 18 is_stmt 0 view .LVU305
 1060 000a 0949     		ldr	r1, .L119+4
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1061              		.loc 1 119 6 view .LVU306
 1062 000c 092B     		cmp	r3, #9
 114:src/menu.c    ****   }
 1063              		.loc 1 114 18 view .LVU307
 1064 000e 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1065 0010 1070     		strb	r0, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1066              		.loc 1 119 3 is_stmt 1 view .LVU308
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1067              		.loc 1 119 6 is_stmt 0 view .LVU309
 1068 0012 00D1     		bne	.L117
 1069              	.L106:
 1070              	.LBE76:
 1071              	.LBE75:
 154:src/menu.c    **** 
 1072              		.loc 1 154 1 view .LVU310
 1073 0014 7047     		bx	lr
 1074              	.L117:
 1075              	.LBB79:
 1076              	.LBB77:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1077              		.loc 1 119 23 view .LVU311
 1078 0016 102B     		cmp	r3, #16
 1079 0018 FCD0     		beq	.L106
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1080              		.loc 1 119 43 is_stmt 1 view .LVU312
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1081              		.loc 1 119 53 is_stmt 0 view .LVU313
 1082 001a 0B70     		strb	r3, [r1]
 1083              	.LVL69:
 1084              	.L118:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1085              		.loc 1 119 53 view .LVU314
 1086              	.LBE77:
 1087              	.LBE79:
 154:src/menu.c    **** 
 1088              		.loc 1 154 1 view .LVU315
 1089 001c 7047     		bx	lr
 1090              	.LVL70:
 1091              	.L116:
 1092              	.LBB80:
 1093              	.LBB78:
 111:src/menu.c    ****   }
 1094              		.loc 1 111 5 is_stmt 1 view .LVU316
 111:src/menu.c    ****   }
 1095              		.loc 1 111 18 is_stmt 0 view .LVU317
 1096 001e 0548     		ldr	r0, .L119+8
 1097 0020 0349     		ldr	r1, .L119+4
 1098 0022 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1099 0024 1070     		strb	r0, [r2]
ARM GAS  /tmp/ccVzm1xY.s 			page 35


 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1100              		.loc 1 119 3 is_stmt 1 view .LVU318
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1101              		.loc 1 119 43 view .LVU319
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1102              		.loc 1 119 53 is_stmt 0 view .LVU320
 1103 0026 0B70     		strb	r3, [r1]
 1104              	.LVL71:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1105              		.loc 1 119 53 view .LVU321
 1106 0028 F8E7     		b	.L118
 1107              	.L120:
 1108 002a 00BF     		.align	2
 1109              	.L119:
 1110 002c 00000000 		.word	.LANCHOR1
 1111 0030 00000000 		.word	.LANCHOR3
 1112 0034 00000000 		.word	.LANCHOR2
 1113              	.LBE78:
 1114              	.LBE80:
 1115              		.cfi_endproc
 1116              	.LFE12:
 1118              		.section	.text.mdot,"ax",%progbits
 1119              		.align	1
 1120              		.p2align 2,,3
 1121              		.global	mdot
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu fpv4-sp-d16
 1127              	mdot:
 1128              	.LVL72:
 1129              	.LFB14:
 558:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1130              		.loc 1 558 40 is_stmt 1 view -0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 1134              		@ link register save eliminated.
 559:src/menu.c    ****   if (on) {
 1135              		.loc 1 559 3 view .LVU323
 559:src/menu.c    ****   if (on) {
 1136              		.loc 1 559 6 is_stmt 0 view .LVU324
 1137 0000 C728     		cmp	r0, #199
 1138 0002 1AD8     		bhi	.L125
 1139              	.LVL73:
 1140              	.LBB83:
 1141              	.LBI83:
 558:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1142              		.loc 1 558 6 is_stmt 1 view .LVU325
 1143              	.LBB84:
 560:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1144              		.loc 1 560 3 view .LVU326
 1145              	.LBE84:
 1146              	.LBE83:
 558:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1147              		.loc 1 558 40 is_stmt 0 view .LVU327
 1148 0004 10B4     		push	{r4}
ARM GAS  /tmp/ccVzm1xY.s 			page 36


 1149              		.cfi_def_cfa_offset 4
 1150              		.cfi_offset 4, -4
 1151              	.LBB87:
 1152              	.LBB85:
 560:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1153              		.loc 1 560 6 view .LVU328
 1154 0006 63B9     		cbnz	r3, .L128
 1155              		.loc 1 564 5 is_stmt 1 view .LVU329
 1156              		.loc 1 564 17 is_stmt 0 view .LVU330
 1157 0008 0C4B     		ldr	r3, .L129
 1158              	.LVL74:
 1159              		.loc 1 564 17 view .LVU331
 1160 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1161              	.LVL75:
 1162              		.loc 1 564 25 view .LVU332
 1163 000e 0124     		movs	r4, #1
 1164              		.loc 1 564 17 view .LVU333
 1165 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1166              		.loc 1 564 25 view .LVU334
 1167 0012 04FA01F1 		lsl	r1, r4, r1
 1168              	.LVL76:
 1169              		.loc 1 564 17 view .LVU335
 1170 0016 23EA0101 		bic	r1, r3, r1
 1171 001a 8154     		strb	r1, [r0, r2]
 1172              	.LVL77:
 1173              		.loc 1 564 17 view .LVU336
 1174              	.LBE85:
 1175              	.LBE87:
 565:src/menu.c    ****   }
 566:src/menu.c    **** }
 1176              		.loc 1 566 1 view .LVU337
 1177 001c 5DF8044B 		ldr	r4, [sp], #4
 1178              		.cfi_remember_state
 1179              		.cfi_restore 4
 1180              		.cfi_def_cfa_offset 0
 1181 0020 7047     		bx	lr
 1182              	.LVL78:
 1183              	.L128:
 1184              		.cfi_restore_state
 1185              	.LBB88:
 1186              	.LBB86:
 561:src/menu.c    ****   }
 1187              		.loc 1 561 5 is_stmt 1 view .LVU338
 561:src/menu.c    ****   }
 1188              		.loc 1 561 17 is_stmt 0 view .LVU339
 1189 0022 064B     		ldr	r3, .L129
 1190              	.LVL79:
 561:src/menu.c    ****   }
 1191              		.loc 1 561 17 view .LVU340
 1192 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1193              	.LVL80:
 561:src/menu.c    ****   }
 1194              		.loc 1 561 24 view .LVU341
 1195 0028 0124     		movs	r4, #1
 561:src/menu.c    ****   }
 1196              		.loc 1 561 17 view .LVU342
 1197 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
ARM GAS  /tmp/ccVzm1xY.s 			page 37


 561:src/menu.c    ****   }
 1198              		.loc 1 561 24 view .LVU343
 1199 002c 04FA01F1 		lsl	r1, r4, r1
 1200              	.LVL81:
 561:src/menu.c    ****   }
 1201              		.loc 1 561 17 view .LVU344
 1202 0030 1943     		orrs	r1, r1, r3
 1203 0032 8154     		strb	r1, [r0, r2]
 1204              	.LBE86:
 1205              	.LBE88:
 1206              		.loc 1 566 1 view .LVU345
 1207 0034 5DF8044B 		ldr	r4, [sp], #4
 1208              		.cfi_restore 4
 1209              		.cfi_def_cfa_offset 0
 1210 0038 7047     		bx	lr
 1211              	.LVL82:
 1212              	.L125:
 1213              		.loc 1 566 1 view .LVU346
 1214 003a 7047     		bx	lr
 1215              	.L130:
 1216              		.align	2
 1217              	.L129:
 1218 003c 00000000 		.word	.LANCHOR0
 1219              		.cfi_endproc
 1220              	.LFE14:
 1222              		.section	.text.get_current_menu_ref,"ax",%progbits
 1223              		.align	1
 1224              		.p2align 2,,3
 1225              		.global	get_current_menu_ref
 1226              		.syntax unified
 1227              		.thumb
 1228              		.thumb_func
 1229              		.fpu fpv4-sp-d16
 1231              	get_current_menu_ref:
 1232              	.LVL83:
 1233              	.LFB15:
 567:src/menu.c    **** 
 568:src/menu.c    **** struct _menu get_current_menu_ref() {
 1234              		.loc 1 568 37 is_stmt 1 view -0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 0
 1237              		@ frame_needed = 0, uses_anonymous_args = 0
 569:src/menu.c    ****   int i = current_menu;
 1238              		.loc 1 569 3 view .LVU348
 570:src/menu.c    ****   if (C_LOCKED)
 1239              		.loc 1 570 7 is_stmt 0 view .LVU349
 1240 0000 1E4A     		ldr	r2, .L151
 569:src/menu.c    ****   int i = current_menu;
 1241              		.loc 1 569 7 view .LVU350
 1242 0002 1F4B     		ldr	r3, .L151+4
 1243              		.loc 1 570 7 view .LVU351
 1244 0004 1268     		ldr	r2, [r2]
 568:src/menu.c    ****   int i = current_menu;
 1245              		.loc 1 568 37 view .LVU352
 1246 0006 10B5     		push	{r4, lr}
 1247              		.cfi_def_cfa_offset 8
 1248              		.cfi_offset 4, -8
ARM GAS  /tmp/ccVzm1xY.s 			page 38


 1249              		.cfi_offset 14, -4
 1250              		.loc 1 570 7 view .LVU353
 1251 0008 92F8E447 		ldrb	r4, [r2, #2020]	@ zero_extendqisi2
 569:src/menu.c    ****   int i = current_menu;
 1252              		.loc 1 569 7 view .LVU354
 1253 000c 93F90010 		ldrsb	r1, [r3]
 1254              	.LVL84:
 1255              		.loc 1 570 3 is_stmt 1 view .LVU355
 568:src/menu.c    ****   int i = current_menu;
 1256              		.loc 1 568 37 is_stmt 0 view .LVU356
 1257 0010 0346     		mov	r3, r0
 1258              		.loc 1 570 6 view .LVU357
 1259 0012 6007     		lsls	r0, r4, #29
 1260              	.LVL85:
 1261              		.loc 1 570 6 view .LVU358
 1262 0014 1DD5     		bpl	.L132
 1263              		.loc 1 570 7 discriminator 1 view .LVU359
 1264 0016 92F8DE27 		ldrb	r2, [r2, #2014]	@ zero_extendqisi2
 1265 001a 5207     		lsls	r2, r2, #29
 1266 001c 19D5     		bpl	.L132
 571:src/menu.c    ****     switch (current_menu) {
 1267              		.loc 1 571 5 is_stmt 1 view .LVU360
 1268 001e 4A1E     		subs	r2, r1, #1
 1269 0020 0E2A     		cmp	r2, #14
 1270 0022 16D8     		bhi	.L132
 1271 0024 DFE802F0 		tbb	[pc, r2]
 1272              	.L134:
 1273 0028 27       		.byte	(.L140-.L134)/2
 1274 0029 15       		.byte	(.L132-.L134)/2
 1275 002a 25       		.byte	(.L135-.L134)/2
 1276 002b 15       		.byte	(.L132-.L134)/2
 1277 002c 23       		.byte	(.L139-.L134)/2
 1278 002d 13       		.byte	(.L138-.L134)/2
 1279 002e 25       		.byte	(.L135-.L134)/2
 1280 002f 15       		.byte	(.L132-.L134)/2
 1281 0030 08       		.byte	(.L143-.L134)/2
 1282 0031 25       		.byte	(.L135-.L134)/2
 1283 0032 21       		.byte	(.L136-.L134)/2
 1284 0033 25       		.byte	(.L135-.L134)/2
 1285 0034 25       		.byte	(.L135-.L134)/2
 1286 0035 25       		.byte	(.L135-.L134)/2
 1287 0036 1F       		.byte	(.L133-.L134)/2
 1288 0037 00       		.p2align 1
 1289              	.L143:
 572:src/menu.c    ****     case (M_Clear):
 573:src/menu.c    ****       i = M_Clear_C;
 574:src/menu.c    ****       break;
 575:src/menu.c    ****     case (M_Swap):
 576:src/menu.c    ****       i = M_Swap_C;
 577:src/menu.c    ****       break;
 578:src/menu.c    ****     case (M_Arrow):
 579:src/menu.c    ****       i = M_Arrow_C;
 1290              		.loc 1 579 9 is_stmt 0 view .LVU361
 1291 0038 1421     		movs	r1, #20
 1292              	.LVL86:
 1293              	.L137:
 580:src/menu.c    ****       break;
ARM GAS  /tmp/ccVzm1xY.s 			page 39


 581:src/menu.c    ****     case (M_Prob):
 582:src/menu.c    ****       i = M_Prob_C;
 583:src/menu.c    ****       break;
 584:src/menu.c    ****     case (M_Blank2):
 585:src/menu.c    ****       i = M_Blank2_C;
 586:src/menu.c    ****       break;
 587:src/menu.c    ****     case (M_Misc):
 588:src/menu.c    ****       i = M_Misc_C;
 589:src/menu.c    ****       break;
 590:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 591:src/menu.c    ****     case (M_Flags):// so don't display them.
 592:src/menu.c    ****     case (M_Stats):
 593:src/menu.c    ****     case (M_Setup2):
 594:src/menu.c    ****     case (M_Solve):
 595:src/menu.c    ****     case (M_Program):
 596:src/menu.c    ****       i = M_C_Lock;
 597:src/menu.c    ****     default:;
 598:src/menu.c    ****     }
 599:src/menu.c    ****   if (current_menu == M_User) {
 600:src/menu.c    ****     return UserMenu;
 601:src/menu.c    ****   }
 602:src/menu.c    ****   else {
 603:src/menu.c    ****     return Menus[i];
 1294              		.loc 1 603 5 is_stmt 1 view .LVU362
 1295              		.loc 1 603 17 is_stmt 0 view .LVU363
 1296 003a 1248     		ldr	r0, .L151+8
 1297 003c D022     		movs	r2, #208
 1298 003e 02FB0101 		mla	r1, r2, r1, r0
 1299              	.LVL87:
 1300              		.loc 1 603 17 view .LVU364
 1301 0042 1846     		mov	r0, r3
 1302 0044 FFF7FEFF 		bl	memcpy
 1303              	.LVL88:
 1304              		.loc 1 603 17 view .LVU365
 1305 0048 0346     		mov	r3, r0
 604:src/menu.c    ****   }
 605:src/menu.c    **** }
 1306              		.loc 1 605 1 view .LVU366
 1307 004a 1846     		mov	r0, r3
 1308 004c 10BD     		pop	{r4, pc}
 1309              	.LVL89:
 1310              	.L138:
 570:src/menu.c    ****     switch (current_menu) {
 1311              		.loc 1 570 7 view .LVU367
 1312 004e 1321     		movs	r1, #19
 1313              	.LVL90:
 570:src/menu.c    ****     switch (current_menu) {
 1314              		.loc 1 570 7 view .LVU368
 1315 0050 F3E7     		b	.L137
 1316              	.LVL91:
 1317              	.L132:
 597:src/menu.c    ****     }
 1318              		.loc 1 597 13 is_stmt 1 view .LVU369
 599:src/menu.c    ****     return UserMenu;
 1319              		.loc 1 599 3 view .LVU370
 599:src/menu.c    ****     return UserMenu;
 1320              		.loc 1 599 6 is_stmt 0 view .LVU371
ARM GAS  /tmp/ccVzm1xY.s 			page 40


 1321 0052 6329     		cmp	r1, #99
 1322 0054 F1D1     		bne	.L137
 600:src/menu.c    ****   }
 1323              		.loc 1 600 5 is_stmt 1 view .LVU372
 600:src/menu.c    ****   }
 1324              		.loc 1 600 12 is_stmt 0 view .LVU373
 1325 0056 0C49     		ldr	r1, .L151+12
 1326              	.LVL92:
 600:src/menu.c    ****   }
 1327              		.loc 1 600 12 view .LVU374
 1328 0058 D022     		movs	r2, #208
 1329 005a 1846     		mov	r0, r3
 1330 005c FFF7FEFF 		bl	memcpy
 1331              	.LVL93:
 600:src/menu.c    ****   }
 1332              		.loc 1 600 12 view .LVU375
 1333 0060 0346     		mov	r3, r0
 1334              		.loc 1 605 1 view .LVU376
 1335 0062 1846     		mov	r0, r3
 1336 0064 10BD     		pop	{r4, pc}
 1337              	.LVL94:
 1338              	.L133:
 585:src/menu.c    ****       break;
 1339              		.loc 1 585 7 is_stmt 1 view .LVU377
 586:src/menu.c    ****     case (M_Misc):
 1340              		.loc 1 586 7 view .LVU378
 585:src/menu.c    ****       break;
 1341              		.loc 1 585 9 is_stmt 0 view .LVU379
 1342 0066 1621     		movs	r1, #22
 586:src/menu.c    ****     case (M_Misc):
 1343              		.loc 1 586 7 view .LVU380
 1344 0068 E7E7     		b	.L137
 1345              	.LVL95:
 1346              	.L136:
 582:src/menu.c    ****       break;
 1347              		.loc 1 582 7 is_stmt 1 view .LVU381
 583:src/menu.c    ****     case (M_Blank2):
 1348              		.loc 1 583 7 view .LVU382
 582:src/menu.c    ****       break;
 1349              		.loc 1 582 9 is_stmt 0 view .LVU383
 1350 006a 1521     		movs	r1, #21
 583:src/menu.c    ****     case (M_Blank2):
 1351              		.loc 1 583 7 view .LVU384
 1352 006c E5E7     		b	.L137
 1353              	.LVL96:
 1354              	.L139:
 588:src/menu.c    ****       break;
 1355              		.loc 1 588 7 is_stmt 1 view .LVU385
 589:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1356              		.loc 1 589 7 view .LVU386
 588:src/menu.c    ****       break;
 1357              		.loc 1 588 9 is_stmt 0 view .LVU387
 1358 006e 1721     		movs	r1, #23
 589:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1359              		.loc 1 589 7 view .LVU388
 1360 0070 E3E7     		b	.L137
 1361              	.LVL97:
ARM GAS  /tmp/ccVzm1xY.s 			page 41


 1362              	.L135:
 596:src/menu.c    ****     default:;
 1363              		.loc 1 596 7 is_stmt 1 view .LVU389
 596:src/menu.c    ****     default:;
 1364              		.loc 1 596 9 is_stmt 0 view .LVU390
 1365 0072 1121     		movs	r1, #17
 1366 0074 E1E7     		b	.L137
 1367              	.LVL98:
 1368              	.L140:
 573:src/menu.c    ****       break;
 1369              		.loc 1 573 9 view .LVU391
 1370 0076 1221     		movs	r1, #18
 1371              	.LVL99:
 573:src/menu.c    ****       break;
 1372              		.loc 1 573 9 view .LVU392
 1373 0078 DFE7     		b	.L137
 1374              	.L152:
 1375 007a 00BF     		.align	2
 1376              	.L151:
 1377 007c 00000000 		.word	main_ram
 1378 0080 00000000 		.word	.LANCHOR1
 1379 0084 00000000 		.word	Menus
 1380 0088 00000000 		.word	.LANCHOR4
 1381              		.cfi_endproc
 1382              	.LFE15:
 1384              		.section	.text.display_menu,"ax",%progbits
 1385              		.align	1
 1386              		.p2align 2,,3
 1387              		.global	display_menu
 1388              		.syntax unified
 1389              		.thumb
 1390              		.thumb_func
 1391              		.fpu fpv4-sp-d16
 1393              	display_menu:
 1394              	.LFB16:
 606:src/menu.c    **** 
 607:src/menu.c    **** void display_menu (struct _menu Ref) {
 1395              		.loc 1 607 38 is_stmt 1 view -0
 1396              		.cfi_startproc
 1397              		@ args = 208, pretend = 16, frame = 0
 1398              		@ frame_needed = 0, uses_anonymous_args = 0
 608:src/menu.c    ****   int len = 0;
 1399              		.loc 1 608 3 view .LVU394
 1400              	.LVL100:
 609:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1401              		.loc 1 609 3 view .LVU395
 607:src/menu.c    ****   int len = 0;
 1402              		.loc 1 607 38 is_stmt 0 view .LVU396
 1403 0000 84B0     		sub	sp, sp, #16
 1404              		.cfi_def_cfa_offset 16
 1405 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1406              		.cfi_def_cfa_offset 52
 1407              		.cfi_offset 4, -52
 1408              		.cfi_offset 5, -48
 1409              		.cfi_offset 6, -44
 1410              		.cfi_offset 7, -40
 1411              		.cfi_offset 8, -36
ARM GAS  /tmp/ccVzm1xY.s 			page 42


 1412              		.cfi_offset 9, -32
 1413              		.cfi_offset 10, -28
 1414              		.cfi_offset 11, -24
 1415              		.cfi_offset 14, -20
 1416 0006 83B0     		sub	sp, sp, #12
 1417              		.cfi_def_cfa_offset 64
 1418              		.loc 1 609 3 view .LVU397
 1419 0008 0024     		movs	r4, #0
 607:src/menu.c    ****   int len = 0;
 1420              		.loc 1 607 38 view .LVU398
 1421 000a 0CAD     		add	r5, sp, #48
 1422 000c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1423              		.loc 1 609 3 view .LVU399
 1424 0010 3E4E     		ldr	r6, .L171
 1425 0012 0094     		str	r4, [sp]
 1426 0014 2046     		mov	r0, r4
 1427 0016 3423     		movs	r3, #52
 1428 0018 4FF4C872 		mov	r2, #400
 1429 001c BC21     		movs	r1, #188
 1430 001e B047     		blx	r6
 1431              	.LVL101:
 610:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1432              		.loc 1 610 3 is_stmt 1 view .LVU400
 1433 0020 3B4D     		ldr	r5, .L171+4
 1434 0022 FF23     		movs	r3, #255
 1435 0024 0093     		str	r3, [sp]
 1436 0026 4FF4C872 		mov	r2, #400
 1437 002a 0123     		movs	r3, #1
 1438 002c BC21     		movs	r1, #188
 1439 002e 2046     		mov	r0, r4
 1440 0030 B047     		blx	r6
 1441              	.LVL102:
 611:src/menu.c    ****   //Clear previous menu
 612:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1442              		.loc 1 612 3 view .LVU401
 1443              	.LBB89:
 1444              		.loc 1 612 8 view .LVU402
 1445              		.loc 1 612 21 view .LVU403
 613:src/menu.c    ****     mdots[col][0] = 0;
 1446              		.loc 1 613 19 is_stmt 0 view .LVU404
 1447 0032 2246     		mov	r2, r4
 1448 0034 05F5C871 		add	r1, r5, #400
 1449              	.LBE89:
 610:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1450              		.loc 1 610 3 view .LVU405
 1451 0038 2B46     		mov	r3, r5
 1452              	.LVL103:
 1453              	.L154:
 1454              	.LBB90:
 1455              		.loc 1 613 5 is_stmt 1 discriminator 3 view .LVU406
 1456              		.loc 1 613 19 is_stmt 0 discriminator 3 view .LVU407
 1457 003a 1A70     		strb	r2, [r3]
 614:src/menu.c    ****     mdots[col][1] = 0;
 1458              		.loc 1 614 5 is_stmt 1 discriminator 3 view .LVU408
 1459              		.loc 1 614 19 is_stmt 0 discriminator 3 view .LVU409
 1460 003c 5A70     		strb	r2, [r3, #1]
 612:src/menu.c    ****     mdots[col][0] = 0;
ARM GAS  /tmp/ccVzm1xY.s 			page 43


 1461              		.loc 1 612 32 is_stmt 1 discriminator 3 view .LVU410
 612:src/menu.c    ****     mdots[col][0] = 0;
 1462              		.loc 1 612 21 discriminator 3 view .LVU411
 1463 003e 0233     		adds	r3, r3, #2
 612:src/menu.c    ****     mdots[col][0] = 0;
 1464              		.loc 1 612 3 is_stmt 0 discriminator 3 view .LVU412
 1465 0040 9942     		cmp	r1, r3
 1466 0042 FAD1     		bne	.L154
 1467 0044 14AE     		add	r6, sp, #80
 612:src/menu.c    ****     mdots[col][0] = 0;
 1468              		.loc 1 612 3 view .LVU413
 1469 0046 0024     		movs	r4, #0
 1470              	.LVL104:
 1471              	.L155:
 612:src/menu.c    ****     mdots[col][0] = 0;
 1472              		.loc 1 612 3 view .LVU414
 1473              	.LBE90:
 1474              	.LBB91:
 615:src/menu.c    ****   }
 616:src/menu.c    **** 
 617:src/menu.c    ****   // Draw menu items
 618:src/menu.c    ****   // 
 619:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 620:src/menu.c    ****     /*
 621:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 622:src/menu.c    ****     */
 623:src/menu.c    ****     // Label is Ref.keys[item].unshifted_label
 624:src/menu.c    ****     // Unshifted first
 625:src/menu.c    ****       len = pixel_length (Ref.keys[item].unshifted_label, 0); // 0 means not small font
 1475              		.loc 1 625 7 is_stmt 1 view .LVU415
 1476              		.loc 1 625 13 is_stmt 0 view .LVU416
 1477 0048 0021     		movs	r1, #0
 1478 004a 3046     		mov	r0, r6
 1479 004c FFF7FEFF 		bl	pixel_length
 1480              	.LVL105:
 626:src/menu.c    ****       set_menu_label ( Ref.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1481              		.loc 1 626 7 is_stmt 1 view .LVU417
 1482              		.loc 1 626 73 is_stmt 0 view .LVU418
 1483 0050 C0F12000 		rsb	r0, r0, #32
 1484              	.LVL106:
 1485              		.loc 1 626 79 view .LVU419
 1486 0054 00EBD070 		add	r0, r0, r0, lsr #31
 1487              		.loc 1 626 7 view .LVU420
 1488 0058 04EB6001 		add	r1, r4, r0, asr #1
 1489 005c 0022     		movs	r2, #0
 1490 005e 3046     		mov	r0, r6
 1491 0060 06F10807 		add	r7, r6, #8
 1492 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1493              	.LVL107:
 627:src/menu.c    ****       // Now shifted ...	
 628:src/menu.c    ****       len = pixel_length (Ref.keys[item].shifted_label, 0); // 0 means not small font
 1494              		.loc 1 628 7 is_stmt 1 view .LVU421
 1495              		.loc 1 628 13 is_stmt 0 view .LVU422
 1496 0068 0021     		movs	r1, #0
 1497 006a 3846     		mov	r0, r7
 1498 006c FFF7FEFF 		bl	pixel_length
 1499              	.LVL108:
ARM GAS  /tmp/ccVzm1xY.s 			page 44


 629:src/menu.c    ****       len = item*32 + (32-len)/2;
 1500              		.loc 1 629 7 is_stmt 1 view .LVU423
 1501              		.loc 1 629 26 is_stmt 0 view .LVU424
 1502 0070 C0F12000 		rsb	r0, r0, #32
 1503              	.LVL109:
 1504              		.loc 1 629 31 view .LVU425
 1505 0074 00EBD070 		add	r0, r0, r0, lsr #31
 1506              	.LVL110:
 630:src/menu.c    ****       if (len<0) len = 0;
 1507              		.loc 1 630 7 is_stmt 1 view .LVU426
 629:src/menu.c    ****       len = item*32 + (32-len)/2;
 1508              		.loc 1 629 11 is_stmt 0 view .LVU427
 1509 0078 04EB6001 		add	r1, r4, r0, asr #1
 1510              	.LVL111:
 629:src/menu.c    ****       len = item*32 + (32-len)/2;
 1511              		.loc 1 629 11 view .LVU428
 1512 007c C729     		cmp	r1, #199
 1513 007e A8BF     		it	ge
 1514 0080 C721     		movge	r1, #199
 1515              	.LVL112:
 631:src/menu.c    ****       if (len>199) len = 199;
 632:src/menu.c    ****       set_menu_label ( Ref.keys[item].shifted_label, 0, len, 1 );
 1516              		.loc 1 632 7 is_stmt 1 view .LVU429
 1517 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1518              	.LVL113:
 1519              		.loc 1 632 7 is_stmt 0 view .LVU430
 1520 0086 3846     		mov	r0, r7
 1521 0088 2034     		adds	r4, r4, #32
 1522 008a 0122     		movs	r2, #1
 1523 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1524              	.LVL114:
 619:src/menu.c    ****     /*
 1525              		.loc 1 619 32 is_stmt 1 view .LVU431
 619:src/menu.c    ****     /*
 1526              		.loc 1 619 22 view .LVU432
 619:src/menu.c    ****     /*
 1527              		.loc 1 619 3 is_stmt 0 view .LVU433
 1528 0090 C02C     		cmp	r4, #192
 1529 0092 06F12006 		add	r6, r6, #32
 1530 0096 D7D1     		bne	.L155
 1531 0098 1E4E     		ldr	r6, .L171+8
 1532              	.LBE91:
 1533              	.LBB92:
 1534              	.LBB93:
 633:src/menu.c    ****   }
 634:src/menu.c    **** 
 635:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 636:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 637:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 638:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 639:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1535              		.loc 1 639 2 view .LVU434
 1536 009a DFF87090 		ldr	r9, .L171
 1537 009e C5F1040A 		rsb	r10, r5, #4
 1538 00a2 06F5C47B 		add	fp, r6, #392
 1539              	.LBE93:
 1540              	.LBE92:
ARM GAS  /tmp/ccVzm1xY.s 			page 45


 1541              	.LBB95:
 619:src/menu.c    ****     /*
 1542              		.loc 1 619 3 view .LVU435
 1543 00a6 771E     		subs	r7, r6, #1
 1544              	.LBE95:
 1545              	.LBB96:
 1546              	.LBB94:
 1547              		.loc 1 639 2 view .LVU436
 1548 00a8 4FF0FF08 		mov	r8, #255
 1549              	.L156:
 1550              	.LVL115:
 636:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1551              		.loc 1 636 23 is_stmt 1 view .LVU437
 1552 00ac 0AEB0705 		add	r5, r10, r7
 636:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1553              		.loc 1 636 14 is_stmt 0 view .LVU438
 1554 00b0 0024     		movs	r4, #0
 1555              	.LVL116:
 1556              	.L159:
 637:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1557              		.loc 1 637 7 is_stmt 1 view .LVU439
 1558              		.loc 1 639 2 view .LVU440
 637:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1559              		.loc 1 637 22 is_stmt 0 view .LVU441
 1560 00b2 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 637:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1561              		.loc 1 637 40 view .LVU442
 1562 00b6 2241     		asrs	r2, r2, r4
 1563              		.loc 1 639 2 view .LVU443
 1564 00b8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1565 00bc 0323     		movs	r3, #3
 637:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1566              		.loc 1 637 10 view .LVU444
 1567 00be 12F0010F 		tst	r2, #1
 1568              		.loc 1 639 2 view .LVU445
 1569 00c2 01F1E901 		add	r1, r1, #233
 1570 00c6 1A46     		mov	r2, r3
 1571 00c8 2846     		mov	r0, r5
 637:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1572              		.loc 1 637 10 view .LVU446
 1573 00ca 02D0     		beq	.L157
 1574              		.loc 1 639 2 view .LVU447
 1575 00cc CDF80080 		str	r8, [sp]
 1576 00d0 C847     		blx	r9
 1577              	.LVL117:
 1578              	.L157:
 640:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1579              		.loc 1 640 7 is_stmt 1 view .LVU448
 641:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 642:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1580              		.loc 1 642 2 view .LVU449
 640:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1581              		.loc 1 640 22 is_stmt 0 view .LVU450
 1582 00d2 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 640:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1583              		.loc 1 640 40 view .LVU451
 1584 00d4 2241     		asrs	r2, r2, r4
ARM GAS  /tmp/ccVzm1xY.s 			page 46


 1585              		.loc 1 642 2 view .LVU452
 1586 00d6 A4EB8401 		sub	r1, r4, r4, lsl #2
 1587 00da 0323     		movs	r3, #3
 640:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1588              		.loc 1 640 10 view .LVU453
 1589 00dc 12F0010F 		tst	r2, #1
 1590              		.loc 1 642 2 view .LVU454
 1591 00e0 01F1D001 		add	r1, r1, #208
 1592 00e4 1A46     		mov	r2, r3
 1593 00e6 04F10104 		add	r4, r4, #1
 1594              	.LVL118:
 1595              		.loc 1 642 2 view .LVU455
 1596 00ea 2846     		mov	r0, r5
 640:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1597              		.loc 1 640 10 view .LVU456
 1598 00ec 02D0     		beq	.L158
 1599              		.loc 1 642 2 view .LVU457
 1600 00ee CDF80080 		str	r8, [sp]
 1601 00f2 C847     		blx	r9
 1602              	.LVL119:
 1603              	.L158:
 636:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1604              		.loc 1 636 32 is_stmt 1 discriminator 2 view .LVU458
 636:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1605              		.loc 1 636 23 discriminator 2 view .LVU459
 636:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1606              		.loc 1 636 5 is_stmt 0 discriminator 2 view .LVU460
 1607 00f4 062C     		cmp	r4, #6
 1608 00f6 DCD1     		bne	.L159
 1609              	.LBE94:
 635:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1610              		.loc 1 635 32 is_stmt 1 discriminator 2 view .LVU461
 635:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1611              		.loc 1 635 21 discriminator 2 view .LVU462
 1612 00f8 0236     		adds	r6, r6, #2
 635:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1613              		.loc 1 635 3 is_stmt 0 discriminator 2 view .LVU463
 1614 00fa B345     		cmp	fp, r6
 1615 00fc 07F10207 		add	r7, r7, #2
 1616 0100 D4D1     		bne	.L156
 1617              	.LBE96:
 643:src/menu.c    ****     }
 644:src/menu.c    ****   }
 645:src/menu.c    **** }
 1618              		.loc 1 645 1 view .LVU464
 1619 0102 03B0     		add	sp, sp, #12
 1620              		.cfi_def_cfa_offset 52
 1621              		@ sp needed
 1622 0104 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1623              		.cfi_restore 14
 1624              		.cfi_restore 11
 1625              		.cfi_restore 10
 1626              		.cfi_restore 9
 1627              		.cfi_restore 8
 1628              		.cfi_restore 7
 1629              		.cfi_restore 6
 1630              		.cfi_restore 5
ARM GAS  /tmp/ccVzm1xY.s 			page 47


 1631              		.cfi_restore 4
 1632              		.cfi_def_cfa_offset 16
 1633              	.LVL120:
 1634              		.loc 1 645 1 view .LVU465
 1635 0108 04B0     		add	sp, sp, #16
 1636              		.cfi_def_cfa_offset 0
 1637 010a 7047     		bx	lr
 1638              	.L172:
 1639              		.align	2
 1640              	.L171:
 1641 010c 3D020008 		.word	134218301
 1642 0110 00000000 		.word	.LANCHOR0
 1643 0114 01000000 		.word	.LANCHOR0+1
 1644              		.cfi_endproc
 1645              	.LFE16:
 1647              		.section	.text.display_current_menu,"ax",%progbits
 1648              		.align	1
 1649              		.p2align 2,,3
 1650              		.global	display_current_menu
 1651              		.syntax unified
 1652              		.thumb
 1653              		.thumb_func
 1654              		.fpu fpv4-sp-d16
 1656              	display_current_menu:
 1657              	.LFB11:
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1658              		.loc 1 148 30 is_stmt 1 view -0
 1659              		.cfi_startproc
 1660              		@ args = 0, pretend = 0, frame = 208
 1661              		@ frame_needed = 0, uses_anonymous_args = 0
 149:src/menu.c    **** }
 1662              		.loc 1 149 3 view .LVU467
 148:src/menu.c    ****   display_menu (get_current_menu_ref());
 1663              		.loc 1 148 30 is_stmt 0 view .LVU468
 1664 0000 10B5     		push	{r4, lr}
 1665              		.cfi_def_cfa_offset 8
 1666              		.cfi_offset 4, -8
 1667              		.cfi_offset 14, -4
 1668 0002 E4B0     		sub	sp, sp, #400
 1669              		.cfi_def_cfa_offset 408
 149:src/menu.c    **** }
 1670              		.loc 1 149 3 view .LVU469
 1671 0004 30AC     		add	r4, sp, #192
 1672 0006 2046     		mov	r0, r4
 1673 0008 FFF7FEFF 		bl	get_current_menu_ref
 1674              	.LVL121:
 1675 000c 34A9     		add	r1, sp, #208
 1676 000e C022     		movs	r2, #192
 1677 0010 6846     		mov	r0, sp
 1678 0012 FFF7FEFF 		bl	memcpy
 1679              	.LVL122:
 1680 0016 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1681 001a FFF7FEFF 		bl	display_menu
 1682              	.LVL123:
 150:src/menu.c    **** 
 1683              		.loc 1 150 1 view .LVU470
 1684 001e 64B0     		add	sp, sp, #400
ARM GAS  /tmp/ccVzm1xY.s 			page 48


 1685              		.cfi_def_cfa_offset 8
 1686              		@ sp needed
 1687 0020 10BD     		pop	{r4, pc}
 1688              		.cfi_endproc
 1689              	.LFE11:
 1691 0022 00BF     		.section	.text.all_menu_dots,"ax",%progbits
 1692              		.align	1
 1693              		.p2align 2,,3
 1694              		.global	all_menu_dots
 1695              		.syntax unified
 1696              		.thumb
 1697              		.thumb_func
 1698              		.fpu fpv4-sp-d16
 1700              	all_menu_dots:
 1701              	.LFB17:
 646:src/menu.c    **** 
 647:src/menu.c    **** void all_menu_dots () {
 1702              		.loc 1 647 23 is_stmt 1 view -0
 1703              		.cfi_startproc
 1704              		@ args = 0, pretend = 0, frame = 0
 1705              		@ frame_needed = 0, uses_anonymous_args = 0
 648:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1706              		.loc 1 648 3 view .LVU472
 1707              	.LBB97:
 1708              		.loc 1 648 8 view .LVU473
 1709              	.LVL124:
 1710              		.loc 1 648 21 view .LVU474
 1711              	.LBE97:
 647:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1712              		.loc 1 647 23 is_stmt 0 view .LVU475
 1713 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1714              		.cfi_def_cfa_offset 20
 1715              		.cfi_offset 4, -20
 1716              		.cfi_offset 5, -16
 1717              		.cfi_offset 6, -12
 1718              		.cfi_offset 7, -8
 1719              		.cfi_offset 14, -4
 1720              	.LBB101:
 1721              	.LBB98:
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 650:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1722              		.loc 1 650 2 view .LVU476
 1723 0002 0D4E     		ldr	r6, .L181
 1724              	.LBE98:
 1725              	.LBE101:
 647:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1726              		.loc 1 647 23 view .LVU477
 1727 0004 83B0     		sub	sp, sp, #12
 1728              		.cfi_def_cfa_offset 32
 647:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1729              		.loc 1 647 23 view .LVU478
 1730 0006 0025     		movs	r5, #0
 1731              	.LBB102:
 1732              	.LBB99:
 1733              		.loc 1 650 2 view .LVU479
 1734 0008 FF27     		movs	r7, #255
 1735              	.LVL125:
ARM GAS  /tmp/ccVzm1xY.s 			page 49


 1736              	.L176:
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1737              		.loc 1 649 23 is_stmt 1 view .LVU480
 1738              	.LBE99:
 1739              	.LBE102:
 647:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1740              		.loc 1 647 23 is_stmt 0 view .LVU481
 1741 000a E924     		movs	r4, #233
 1742              	.LVL126:
 1743              	.L177:
 1744              	.LBB103:
 1745              	.LBB100:
 1746              		.loc 1 650 2 is_stmt 1 discriminator 3 view .LVU482
 1747 000c 0323     		movs	r3, #3
 1748 000e 1A46     		mov	r2, r3
 1749 0010 2146     		mov	r1, r4
 1750 0012 2846     		mov	r0, r5
 1751 0014 0097     		str	r7, [sp]
 1752 0016 B047     		blx	r6
 1753              	.LVL127:
 651:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1754              		.loc 1 651 2 discriminator 3 view .LVU483
 1755 0018 0323     		movs	r3, #3
 1756 001a A4F11901 		sub	r1, r4, #25
 1757 001e 0097     		str	r7, [sp]
 1758 0020 1A46     		mov	r2, r3
 1759 0022 2846     		mov	r0, r5
 1760 0024 033C     		subs	r4, r4, #3
 1761 0026 B047     		blx	r6
 1762              	.LVL128:
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1763              		.loc 1 649 32 discriminator 3 view .LVU484
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1764              		.loc 1 649 23 discriminator 3 view .LVU485
 649:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1765              		.loc 1 649 5 is_stmt 0 discriminator 3 view .LVU486
 1766 0028 D72C     		cmp	r4, #215
 1767 002a EFD1     		bne	.L177
 1768              	.LBE100:
 648:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1769              		.loc 1 648 32 is_stmt 1 discriminator 2 view .LVU487
 648:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1770              		.loc 1 648 21 discriminator 2 view .LVU488
 1771 002c 0235     		adds	r5, r5, #2
 648:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1772              		.loc 1 648 3 is_stmt 0 discriminator 2 view .LVU489
 1773 002e B5F5C87F 		cmp	r5, #400
 1774 0032 EAD1     		bne	.L176
 1775              	.LBE103:
 652:src/menu.c    ****     }
 653:src/menu.c    ****   }
 654:src/menu.c    **** }  
 1776              		.loc 1 654 1 view .LVU490
 1777 0034 03B0     		add	sp, sp, #12
 1778              		.cfi_def_cfa_offset 20
 1779              		@ sp needed
 1780 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccVzm1xY.s 			page 50


 1781              	.L182:
 1782              		.align	2
 1783              	.L181:
 1784 0038 3D020008 		.word	134218301
 1785              		.cfi_endproc
 1786              	.LFE17:
 1788              		.section	.text.umen_store,"ax",%progbits
 1789              		.align	1
 1790              		.p2align 2,,3
 1791              		.global	umen_store
 1792              		.syntax unified
 1793              		.thumb
 1794              		.thumb_func
 1795              		.fpu fpv4-sp-d16
 1797              	umen_store:
 1798              	.LVL129:
 1799              	.LFB20:
 655:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1);
 656:src/menu.c    **** 
 657:src/menu.c    **** void build_user_menu(void){
 658:src/menu.c    ****   // find the label 'MNU'
 659:src/menu.c    ****    const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 660:src/menu.c    ****    build_user_menu_from_program (lbl);
 661:src/menu.c    **** }
 662:src/menu.c    **** 
 663:src/menu.c    **** void build_user_menu_from_program(int lbl)
 664:src/menu.c    **** {
 665:src/menu.c    ****   // find the label 'MNU'
 666:src/menu.c    ****   // const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 667:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 668:src/menu.c    ****   int i=0;
 669:src/menu.c    ****   s_opcode op;
 670:src/menu.c    ****   opcode opc;
 671:src/menu.c    ****   char buf1[16];
 672:src/menu.c    ****   char *p = buf1;
 673:src/menu.c    ****   char c;
 674:src/menu.c    ****   int finished = 0;
 675:src/menu.c    **** 
 676:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 677:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 678:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 679:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 680:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 681:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 682:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 683:src/menu.c    ****   }
 684:src/menu.c    ****   while (pc && i < 12) {
 685:src/menu.c    **** 
 686:src/menu.c    ****     pc = do_inc(pc, 0);
 687:src/menu.c    ****     opc = getprog(pc);
 688:src/menu.c    ****     op = (s_opcode) opc;
 689:src/menu.c    **** 
 690:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 691:src/menu.c    ****       break;
 692:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 693:src/menu.c    ****       if (i==4) {
 694:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
ARM GAS  /tmp/ccVzm1xY.s 			page 51


 695:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 696:src/menu.c    ****       }
 697:src/menu.c    ****       else if (i==5) {
 698:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 699:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 700:src/menu.c    ****       }
 701:src/menu.c    ****       i += 1;
 702:src/menu.c    ****       continue;
 703:src/menu.c    ****     }
 704:src/menu.c    **** 
 705:src/menu.c    ****     if (isDBL(opc) && (opDBL(opc) == DBL_ALPHA)) { // is it double alpha?
 706:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 707:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 708:src/menu.c    **** 	i++;
 709:src/menu.c    ****     	p = buf1;
 710:src/menu.c    **** 	finished = 0;
 711:src/menu.c    ****       } // ..and start reading the new alpha
 712:src/menu.c    ****       *p++ = opc & 0xff; // character 1
 713:src/menu.c    ****       c = (opc >> 16) & 0xff;
 714:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 715:src/menu.c    **** 	*p++ = c;
 716:src/menu.c    **** 	c = opc>>24;
 717:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 718:src/menu.c    **** 	  *p++ = c;
 719:src/menu.c    ****       }
 720:src/menu.c    ****       *p = '\0'; // no ++: next character can overwrite the 0.
 721:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 722:src/menu.c    **** 	finished = 1;
 723:src/menu.c    ****       }
 724:src/menu.c    ****     }
 725:src/menu.c    ****     else { // Not a DBL_ALPHA op - the usual case
 726:src/menu.c    ****       if ( p == buf1 ) { // no alpha label to use
 727:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 728:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 729:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 730:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 731:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 732:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 733:src/menu.c    **** 	  }
 734:src/menu.c    **** 	  else {
 735:src/menu.c    **** 	    prt_umen(opc, buf1); // display rarg with argument
 736:src/menu.c    **** 	  }
 737:src/menu.c    **** 	}
 738:src/menu.c    **** 	else {
 739:src/menu.c    **** 	  prt_umen(opc, buf1); // display non-rarg thing
 740:src/menu.c    **** 	}
 741:src/menu.c    ****       }
 742:src/menu.c    ****       else { // there is an alpha label to use, so reset
 743:src/menu.c    **** 	p = buf1;
 744:src/menu.c    **** 	finished = 0;
 745:src/menu.c    ****       }
 746:src/menu.c    ****       umen_store (i, opc, buf1);
 747:src/menu.c    ****       i++;
 748:src/menu.c    ****     }
 749:src/menu.c    ****   }
 750:src/menu.c    **** }
 751:src/menu.c    **** 
ARM GAS  /tmp/ccVzm1xY.s 			page 52


 752:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1) {
 1800              		.loc 1 752 49 is_stmt 1 view -0
 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 0
 1803              		@ frame_needed = 0, uses_anonymous_args = 0
 753:src/menu.c    **** #pragma GCC diagnostic push
 754:src/menu.c    **** #pragma GCC diagnostic ignored "-Wstringop-truncation"
 755:src/menu.c    ****     if (i<6) {
 1804              		.loc 1 755 5 view .LVU492
 1805              		.loc 1 755 8 is_stmt 0 view .LVU493
 1806 0000 0528     		cmp	r0, #5
 752:src/menu.c    **** #pragma GCC diagnostic push
 1807              		.loc 1 752 49 view .LVU494
 1808 0002 70B5     		push	{r4, r5, r6, lr}
 1809              		.cfi_def_cfa_offset 16
 1810              		.cfi_offset 4, -16
 1811              		.cfi_offset 5, -12
 1812              		.cfi_offset 6, -8
 1813              		.cfi_offset 14, -4
 752:src/menu.c    **** #pragma GCC diagnostic push
 1814              		.loc 1 752 49 view .LVU495
 1815 0004 0D46     		mov	r5, r1
 1816 0006 0446     		mov	r4, r0
 1817 0008 1146     		mov	r1, r2
 1818              	.LVL130:
 1819              		.loc 1 755 8 view .LVU496
 1820 000a 0FDC     		bgt	.L184
 1821              	.LBB109:
 756:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1822              		.loc 1 756 7 is_stmt 1 view .LVU497
 1823              		.loc 1 756 31 is_stmt 0 view .LVU498
 1824 000c 104E     		ldr	r6, .L187
 1825 000e 0130     		adds	r0, r0, #1
 1826              	.LVL131:
 757:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1827              		.loc 1 757 42 view .LVU499
 1828 0010 06EB4414 		add	r4, r6, r4, lsl #5
 1829              	.LVL132:
 756:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1830              		.loc 1 756 7 view .LVU500
 1831 0014 0722     		movs	r2, #7
 1832              	.LVL133:
 756:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1833              		.loc 1 756 7 view .LVU501
 1834 0016 06EB4010 		add	r0, r6, r0, lsl #5
 1835              	.LVL134:
 756:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1836              		.loc 1 756 7 view .LVU502
 1837 001a FFF7FEFF 		bl	strncpy
 1838              	.LVL135:
 1839              		.loc 1 757 7 is_stmt 1 view .LVU503
 1840              		.loc 1 757 42 is_stmt 0 view .LVU504
 1841 001e 0022     		movs	r2, #0
 758:src/menu.c    ****       UserMenu.keys[i].unshifted = (struct _ndmap) {K_OP, opc};
 1842              		.loc 1 758 34 view .LVU505
 1843 0020 3423     		movs	r3, #52
 757:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
ARM GAS  /tmp/ccVzm1xY.s 			page 53


 1844              		.loc 1 757 42 view .LVU506
 1845 0022 84F82720 		strb	r2, [r4, #39]
 1846              		.loc 1 758 7 is_stmt 1 view .LVU507
 1847              		.loc 1 758 34 is_stmt 0 view .LVU508
 1848 0026 2374     		strb	r3, [r4, #16]
 1849 0028 6561     		str	r5, [r4, #20]
 1850              	.LBE109:
 759:src/menu.c    ****     }
 760:src/menu.c    ****     else {
 761:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 762:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 763:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 764:src/menu.c    ****     }
 765:src/menu.c    **** #pragma GCC diagnostic pop
 766:src/menu.c    **** }  
 1851              		.loc 1 766 1 view .LVU509
 1852 002a 70BD     		pop	{r4, r5, r6, pc}
 1853              	.LVL136:
 1854              	.L184:
 1855              	.LBB110:
 1856              	.LBI110:
 752:src/menu.c    **** #pragma GCC diagnostic push
 1857              		.loc 1 752 6 is_stmt 1 view .LVU510
 1858              	.LBB111:
 1859              	.LBB112:
 761:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1860              		.loc 1 761 7 view .LVU511
 761:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1861              		.loc 1 761 30 is_stmt 0 view .LVU512
 1862 002c 841F     		subs	r4, r0, #6
 761:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1863              		.loc 1 761 33 view .LVU513
 1864 002e 084E     		ldr	r6, .L187
 1865 0030 6401     		lsls	r4, r4, #5
 1866 0032 04F12800 		add	r0, r4, #40
 1867              	.LVL137:
 761:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1868              		.loc 1 761 7 view .LVU514
 1869 0036 0722     		movs	r2, #7
 762:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1870              		.loc 1 762 42 view .LVU515
 1871 0038 3444     		add	r4, r4, r6
 761:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1872              		.loc 1 761 7 view .LVU516
 1873 003a 3044     		add	r0, r0, r6
 1874 003c FFF7FEFF 		bl	strncpy
 1875              	.LVL138:
 762:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1876              		.loc 1 762 7 is_stmt 1 view .LVU517
 762:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1877              		.loc 1 762 42 is_stmt 0 view .LVU518
 1878 0040 0022     		movs	r2, #0
 763:src/menu.c    ****     }
 1879              		.loc 1 763 34 view .LVU519
 1880 0042 3423     		movs	r3, #52
 762:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1881              		.loc 1 762 42 view .LVU520
ARM GAS  /tmp/ccVzm1xY.s 			page 54


 1882 0044 84F82F20 		strb	r2, [r4, #47]
 763:src/menu.c    ****     }
 1883              		.loc 1 763 7 is_stmt 1 view .LVU521
 1884              	.LVL139:
 763:src/menu.c    ****     }
 1885              		.loc 1 763 34 is_stmt 0 view .LVU522
 1886 0048 2376     		strb	r3, [r4, #24]
 1887 004a E561     		str	r5, [r4, #28]
 1888              	.LBE112:
 1889              	.LBE111:
 1890              	.LBE110:
 1891              		.loc 1 766 1 view .LVU523
 1892 004c 70BD     		pop	{r4, r5, r6, pc}
 1893              	.LVL140:
 1894              	.L188:
 1895              		.loc 1 766 1 view .LVU524
 1896 004e 00BF     		.align	2
 1897              	.L187:
 1898 0050 00000000 		.word	.LANCHOR4
 1899              		.cfi_endproc
 1900              	.LFE20:
 1902              		.section	.text.build_user_menu_from_program,"ax",%progbits
 1903              		.align	1
 1904              		.p2align 2,,3
 1905              		.global	build_user_menu_from_program
 1906              		.syntax unified
 1907              		.thumb
 1908              		.thumb_func
 1909              		.fpu fpv4-sp-d16
 1911              	build_user_menu_from_program:
 1912              	.LVL141:
 1913              	.LFB19:
 664:src/menu.c    ****   // find the label 'MNU'
 1914              		.loc 1 664 1 is_stmt 1 view -0
 1915              		.cfi_startproc
 1916              		@ args = 0, pretend = 0, frame = 16
 1917              		@ frame_needed = 0, uses_anonymous_args = 0
 667:src/menu.c    ****   int i=0;
 1918              		.loc 1 667 3 view .LVU526
 664:src/menu.c    ****   // find the label 'MNU'
 1919              		.loc 1 664 1 is_stmt 0 view .LVU527
 1920 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1921              		.cfi_def_cfa_offset 36
 1922              		.cfi_offset 4, -36
 1923              		.cfi_offset 5, -32
 1924              		.cfi_offset 6, -28
 1925              		.cfi_offset 7, -24
 1926              		.cfi_offset 8, -20
 1927              		.cfi_offset 9, -16
 1928              		.cfi_offset 10, -12
 1929              		.cfi_offset 11, -8
 1930              		.cfi_offset 14, -4
 667:src/menu.c    ****   int i=0;
 1931              		.loc 1 667 21 view .LVU528
 1932 0004 0021     		movs	r1, #0
 664:src/menu.c    ****   // find the label 'MNU'
 1933              		.loc 1 664 1 view .LVU529
ARM GAS  /tmp/ccVzm1xY.s 			page 55


 1934 0006 85B0     		sub	sp, sp, #20
 1935              		.cfi_def_cfa_offset 56
 667:src/menu.c    ****   int i=0;
 1936              		.loc 1 667 21 view .LVU530
 1937 0008 FFF7FEFF 		bl	findmultilbl
 1938              	.LVL142:
 667:src/menu.c    ****   int i=0;
 1939              		.loc 1 667 21 view .LVU531
 1940 000c 5C4B     		ldr	r3, .L240
 1941 000e 0546     		mov	r5, r0
 1942              	.LVL143:
 668:src/menu.c    ****   s_opcode op;
 1943              		.loc 1 668 3 is_stmt 1 view .LVU532
 669:src/menu.c    ****   opcode opc;
 1944              		.loc 1 669 3 view .LVU533
 670:src/menu.c    ****   char buf1[16];
 1945              		.loc 1 670 3 view .LVU534
 671:src/menu.c    ****   char *p = buf1;
 1946              		.loc 1 671 3 view .LVU535
 672:src/menu.c    ****   char c;
 1947              		.loc 1 672 3 view .LVU536
 673:src/menu.c    ****   int finished = 0;
 1948              		.loc 1 673 3 view .LVU537
 674:src/menu.c    **** 
 1949              		.loc 1 674 3 view .LVU538
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1950              		.loc 1 676 3 view .LVU539
 1951              	.LBB113:
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1952              		.loc 1 676 8 view .LVU540
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1953              		.loc 1 676 19 view .LVU541
 677:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1954              		.loc 1 677 43 is_stmt 0 view .LVU542
 1955 0010 0022     		movs	r2, #0
 1956 0012 03F1C000 		add	r0, r3, #192
 1957              	.LVL144:
 679:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1958              		.loc 1 679 42 view .LVU543
 1959 0016 2E21     		movs	r1, #46
 1960              	.LVL145:
 1961              	.L190:
 677:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1962              		.loc 1 677 7 is_stmt 1 discriminator 3 view .LVU544
 677:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 1963              		.loc 1 677 43 is_stmt 0 discriminator 3 view .LVU545
 1964 0018 83F82020 		strb	r2, [r3, #32]
 678:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1965              		.loc 1 678 7 is_stmt 1 discriminator 3 view .LVU546
 678:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 1966              		.loc 1 678 40 is_stmt 0 discriminator 3 view .LVU547
 1967 001c 5A61     		str	r2, [r3, #20]
 679:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1968              		.loc 1 679 7 is_stmt 1 discriminator 3 view .LVU548
 679:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 1969              		.loc 1 679 42 is_stmt 0 discriminator 3 view .LVU549
 1970 001e 1974     		strb	r1, [r3, #16]
ARM GAS  /tmp/ccVzm1xY.s 			page 56


 680:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1971              		.loc 1 680 7 is_stmt 1 discriminator 3 view .LVU550
 680:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 1972              		.loc 1 680 41 is_stmt 0 discriminator 3 view .LVU551
 1973 0020 83F82820 		strb	r2, [r3, #40]
 681:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1974              		.loc 1 681 7 is_stmt 1 discriminator 3 view .LVU552
 681:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 1975              		.loc 1 681 38 is_stmt 0 discriminator 3 view .LVU553
 1976 0024 DA61     		str	r2, [r3, #28]
 682:src/menu.c    ****   }
 1977              		.loc 1 682 7 is_stmt 1 discriminator 3 view .LVU554
 682:src/menu.c    ****   }
 1978              		.loc 1 682 40 is_stmt 0 discriminator 3 view .LVU555
 1979 0026 1976     		strb	r1, [r3, #24]
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1980              		.loc 1 676 24 is_stmt 1 discriminator 3 view .LVU556
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1981              		.loc 1 676 19 discriminator 3 view .LVU557
 1982 0028 2033     		adds	r3, r3, #32
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1983              		.loc 1 676 3 is_stmt 0 discriminator 3 view .LVU558
 1984 002a 8342     		cmp	r3, r0
 1985 002c F4D1     		bne	.L190
 676:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 1986              		.loc 1 676 3 discriminator 3 view .LVU559
 1987              	.LBE113:
 684:src/menu.c    **** 
 1988              		.loc 1 684 9 is_stmt 1 view .LVU560
 1989 002e 65B3     		cbz	r5, .L189
 1990              	.LBB114:
 698:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 1991              		.loc 1 698 29 is_stmt 0 view .LVU561
 1992 0030 DFF86891 		ldr	r9, .L240+28
 1993              	.LBE114:
 674:src/menu.c    **** 
 1994              		.loc 1 674 7 view .LVU562
 1995 0034 4FF00008 		mov	r8, #0
 672:src/menu.c    ****   char c;
 1996              		.loc 1 672 9 view .LVU563
 1997 0038 6E46     		mov	r6, sp
 1998              	.LBB115:
 695:src/menu.c    ****       }
 1999              		.loc 1 695 2 view .LVU564
 2000 003a A9F1100A 		sub	r10, r9, #16
 2001              	.LBE115:
 668:src/menu.c    ****   s_opcode op;
 2002              		.loc 1 668 7 view .LVU565
 2003 003e C346     		mov	fp, r8
 672:src/menu.c    ****   char c;
 2004              		.loc 1 672 9 view .LVU566
 2005 0040 3746     		mov	r7, r6
 2006              	.LVL146:
 2007              	.L191:
 686:src/menu.c    ****     opc = getprog(pc);
 2008              		.loc 1 686 5 is_stmt 1 view .LVU567
 686:src/menu.c    ****     opc = getprog(pc);
ARM GAS  /tmp/ccVzm1xY.s 			page 57


 2009              		.loc 1 686 10 is_stmt 0 view .LVU568
 2010 0042 2846     		mov	r0, r5
 2011 0044 0021     		movs	r1, #0
 2012 0046 FFF7FEFF 		bl	do_inc
 2013              	.LVL147:
 2014 004a 0546     		mov	r5, r0
 2015              	.LVL148:
 687:src/menu.c    ****     op = (s_opcode) opc;
 2016              		.loc 1 687 5 is_stmt 1 view .LVU569
 687:src/menu.c    ****     op = (s_opcode) opc;
 2017              		.loc 1 687 11 is_stmt 0 view .LVU570
 2018 004c FFF7FEFF 		bl	getprog
 2019              	.LVL149:
 688:src/menu.c    **** 
 2020              		.loc 1 688 8 view .LVU571
 2021 0050 83B2     		uxth	r3, r0
 690:src/menu.c    ****       break;
 2022              		.loc 1 690 8 view .LVU572
 2023 0052 B3F59D7F 		cmp	r3, #314
 687:src/menu.c    ****     op = (s_opcode) opc;
 2024              		.loc 1 687 11 view .LVU573
 2025 0056 0446     		mov	r4, r0
 2026              	.LVL150:
 688:src/menu.c    **** 
 2027              		.loc 1 688 5 is_stmt 1 view .LVU574
 690:src/menu.c    ****       break;
 2028              		.loc 1 690 5 view .LVU575
 690:src/menu.c    ****       break;
 2029              		.loc 1 690 8 is_stmt 0 view .LVU576
 2030 0058 17D0     		beq	.L189
 692:src/menu.c    ****       if (i==4) {
 2031              		.loc 1 692 5 is_stmt 1 view .LVU577
 692:src/menu.c    ****       if (i==4) {
 2032              		.loc 1 692 8 is_stmt 0 view .LVU578
 2033 005a B3F5807F 		cmp	r3, #256
 2034 005e 43D0     		beq	.L232
 705:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2035              		.loc 1 705 5 is_stmt 1 view .LVU579
 705:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2036              		.loc 1 705 9 is_stmt 0 view .LVU580
 2037 0060 00F47042 		and	r2, r0, #61440
 705:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2038              		.loc 1 705 8 view .LVU581
 2039 0064 B2F5704F 		cmp	r2, #61440
 2040 0068 12D0     		beq	.L233
 2041              	.L197:
 726:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2042              		.loc 1 726 7 is_stmt 1 view .LVU582
 726:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2043              		.loc 1 726 10 is_stmt 0 view .LVU583
 2044 006a B742     		cmp	r7, r6
 2045 006c 26D0     		beq	.L234
 744:src/menu.c    ****       }
 2046              		.loc 1 744 11 view .LVU584
 2047 006e 4FF00008 		mov	r8, #0
 2048              	.LVL151:
 2049              	.L203:
ARM GAS  /tmp/ccVzm1xY.s 			page 58


 746:src/menu.c    ****       i++;
 2050              		.loc 1 746 7 is_stmt 1 view .LVU585
 2051 0072 5846     		mov	r0, fp
 2052 0074 2146     		mov	r1, r4
 2053 0076 3246     		mov	r2, r6
 2054 0078 FFF7FEFF 		bl	umen_store
 2055              	.LVL152:
 747:src/menu.c    ****     }
 2056              		.loc 1 747 7 view .LVU586
 747:src/menu.c    ****     }
 2057              		.loc 1 747 8 is_stmt 0 view .LVU587
 2058 007c 0BF1010B 		add	fp, fp, #1
 2059              	.LVL153:
 747:src/menu.c    ****     }
 2060              		.loc 1 747 8 view .LVU588
 2061 0080 3746     		mov	r7, r6
 2062              	.LVL154:
 2063              	.L196:
 684:src/menu.c    **** 
 2064              		.loc 1 684 9 is_stmt 1 view .LVU589
 2065 0082 15B1     		cbz	r5, .L189
 684:src/menu.c    **** 
 2066              		.loc 1 684 13 is_stmt 0 discriminator 1 view .LVU590
 2067 0084 BBF10C0F 		cmp	fp, #12
 2068 0088 DBD1     		bne	.L191
 2069              	.LVL155:
 2070              	.L189:
 750:src/menu.c    **** 
 2071              		.loc 1 750 1 view .LVU591
 2072 008a 05B0     		add	sp, sp, #20
 2073              		.cfi_remember_state
 2074              		.cfi_def_cfa_offset 36
 2075              		@ sp needed
 2076 008c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2077              	.LVL156:
 2078              	.L233:
 2079              		.cfi_restore_state
 705:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2080              		.loc 1 705 24 discriminator 1 view .LVU592
 2081 0090 C0F30321 		ubfx	r1, r0, #8, #4
 705:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2082              		.loc 1 705 20 discriminator 1 view .LVU593
 2083 0094 0A29     		cmp	r1, #10
 2084 0096 E8D1     		bne	.L197
 706:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2085              		.loc 1 706 7 is_stmt 1 view .LVU594
 706:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2086              		.loc 1 706 10 is_stmt 0 view .LVU595
 2087 0098 B8F1000F 		cmp	r8, #0
 2088 009c 40D1     		bne	.L198
 706:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2089              		.loc 1 706 29 discriminator 1 view .LVU596
 2090 009e BB1B     		subs	r3, r7, r6
 2091              	.LVL157:
 706:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2092              		.loc 1 706 24 discriminator 1 view .LVU597
 2093 00a0 062B     		cmp	r3, #6
ARM GAS  /tmp/ccVzm1xY.s 			page 59


 2094 00a2 3DD0     		beq	.L198
 2095              	.LVL158:
 712:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2096              		.loc 1 712 7 is_stmt 1 view .LVU598
 714:src/menu.c    **** 	*p++ = c;
 2097              		.loc 1 714 10 is_stmt 0 view .LVU599
 2098 00a4 14F47F0F 		tst	r4, #16711680
 712:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2099              		.loc 1 712 12 view .LVU600
 2100 00a8 3C70     		strb	r4, [r7]
 713:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2101              		.loc 1 713 7 is_stmt 1 view .LVU601
 713:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2102              		.loc 1 713 9 is_stmt 0 view .LVU602
 2103 00aa C4F30743 		ubfx	r3, r4, #16, #8
 2104              	.LVL159:
 714:src/menu.c    **** 	*p++ = c;
 2105              		.loc 1 714 7 is_stmt 1 view .LVU603
 714:src/menu.c    **** 	*p++ = c;
 2106              		.loc 1 714 10 is_stmt 0 view .LVU604
 2107 00ae 24D1     		bne	.L235
 2108              	.LVL160:
 2109              	.L200:
 712:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2110              		.loc 1 712 9 view .LVU605
 2111 00b0 0137     		adds	r7, r7, #1
 2112              	.LVL161:
 2113              	.L202:
 720:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2114              		.loc 1 720 7 is_stmt 1 view .LVU606
 720:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2115              		.loc 1 720 10 is_stmt 0 view .LVU607
 2116 00b2 0023     		movs	r3, #0
 2117 00b4 3B70     		strb	r3, [r7]
 721:src/menu.c    **** 	finished = 1;
 2118              		.loc 1 721 7 is_stmt 1 view .LVU608
 722:src/menu.c    ****       }
 2119              		.loc 1 722 11 is_stmt 0 view .LVU609
 2120 00b6 4FF00108 		mov	r8, #1
 2121 00ba E2E7     		b	.L196
 2122              	.LVL162:
 2123              	.L234:
 727:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2124              		.loc 1 727 2 is_stmt 1 view .LVU610
 2125 00bc A0B2     		uxth	r0, r4
 2126              	.LVL163:
 727:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2127              		.loc 1 727 5 is_stmt 0 view .LVU611
 2128 00be 72B1     		cbz	r2, .L204
 727:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2129              		.loc 1 727 6 discriminator 1 view .LVU612
 2130 00c0 B2F5704F 		cmp	r2, #61440
 2131 00c4 0BD0     		beq	.L204
 2132              	.LBB116:
 728:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2133              		.loc 1 728 4 is_stmt 1 view .LVU613
 728:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
ARM GAS  /tmp/ccVzm1xY.s 			page 60


 2134              		.loc 1 728 26 is_stmt 0 view .LVU614
 2135 00c6 1B0A     		lsrs	r3, r3, #8
 2136              	.LVL164:
 728:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2137              		.loc 1 728 26 view .LVU615
 2138 00c8 203B     		subs	r3, r3, #32
 2139 00ca DBB2     		uxtb	r3, r3
 2140              	.LVL165:
 729:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2141              		.loc 1 729 4 is_stmt 1 view .LVU616
 729:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2142              		.loc 1 729 7 is_stmt 0 view .LVU617
 2143 00cc 242B     		cmp	r3, #36
 2144 00ce 06D0     		beq	.L204
 729:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2145              		.loc 1 729 28 discriminator 1 view .LVU618
 2146 00d0 6C2B     		cmp	r3, #108
 2147 00d2 04D0     		beq	.L204
 730:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 2148              		.loc 1 730 9 view .LVU619
 2149 00d4 012B     		cmp	r3, #1
 2150 00d6 02D9     		bls	.L204
 731:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2151              		.loc 1 731 9 view .LVU620
 2152 00d8 10F0FF0F 		tst	r0, #255
 2153 00dc 4BD0     		beq	.L236
 2154              	.LVL166:
 2155              	.L204:
 731:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2156              		.loc 1 731 9 view .LVU621
 2157              	.LBE116:
 739:src/menu.c    **** 	}
 2158              		.loc 1 739 4 is_stmt 1 view .LVU622
 2159 00de 3146     		mov	r1, r6
 2160 00e0 2046     		mov	r0, r4
 2161 00e2 FFF7FEFF 		bl	prt_umen
 2162              	.LVL167:
 2163 00e6 C4E7     		b	.L203
 2164              	.LVL168:
 2165              	.L232:
 693:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2166              		.loc 1 693 7 view .LVU623
 693:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2167              		.loc 1 693 10 is_stmt 0 view .LVU624
 2168 00e8 BBF1040F 		cmp	fp, #4
 2169 00ec 28D0     		beq	.L237
 697:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2170              		.loc 1 697 12 is_stmt 1 view .LVU625
 697:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2171              		.loc 1 697 15 is_stmt 0 view .LVU626
 2172 00ee BBF1050F 		cmp	fp, #5
 2173 00f2 32D0     		beq	.L238
 2174              	.LVL169:
 2175              	.L195:
 701:src/menu.c    ****       continue;
 2176              		.loc 1 701 7 is_stmt 1 view .LVU627
 701:src/menu.c    ****       continue;
ARM GAS  /tmp/ccVzm1xY.s 			page 61


 2177              		.loc 1 701 9 is_stmt 0 view .LVU628
 2178 00f4 0BF1010B 		add	fp, fp, #1
 2179              	.LVL170:
 702:src/menu.c    ****     }
 2180              		.loc 1 702 7 is_stmt 1 view .LVU629
 2181 00f8 C3E7     		b	.L196
 2182              	.LVL171:
 2183              	.L235:
 715:src/menu.c    **** 	c = opc>>24;
 2184              		.loc 1 715 2 view .LVU630
 715:src/menu.c    **** 	c = opc>>24;
 2185              		.loc 1 715 7 is_stmt 0 view .LVU631
 2186 00fa 7B70     		strb	r3, [r7, #1]
 716:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2187              		.loc 1 716 2 is_stmt 1 view .LVU632
 717:src/menu.c    **** 	  *p++ = c;
 2188              		.loc 1 717 5 is_stmt 0 view .LVU633
 2189 00fc 230E     		lsrs	r3, r4, #24
 2190              	.LVL172:
 716:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2191              		.loc 1 716 4 view .LVU634
 2192 00fe 4FEA1461 		lsr	r1, r4, #24
 2193              	.LVL173:
 717:src/menu.c    **** 	  *p++ = c;
 2194              		.loc 1 717 2 is_stmt 1 view .LVU635
 717:src/menu.c    **** 	  *p++ = c;
 2195              		.loc 1 717 5 is_stmt 0 view .LVU636
 2196 0102 36D0     		beq	.L239
 718:src/menu.c    ****       }
 2197              		.loc 1 718 4 is_stmt 1 view .LVU637
 718:src/menu.c    ****       }
 2198              		.loc 1 718 6 is_stmt 0 view .LVU638
 2199 0104 FB1C     		adds	r3, r7, #3
 2200              	.LVL174:
 721:src/menu.c    **** 	finished = 1;
 2201              		.loc 1 721 26 view .LVU639
 2202 0106 A3EB0608 		sub	r8, r3, r6
 721:src/menu.c    **** 	finished = 1;
 2203              		.loc 1 721 21 view .LVU640
 2204 010a A8F10608 		sub	r8, r8, #6
 720:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2205              		.loc 1 720 10 view .LVU641
 2206 010e 0022     		movs	r2, #0
 721:src/menu.c    **** 	finished = 1;
 2207              		.loc 1 721 21 view .LVU642
 2208 0110 B8FA88F8 		clz	r8, r8
 718:src/menu.c    ****       }
 2209              		.loc 1 718 9 view .LVU643
 2210 0114 B970     		strb	r1, [r7, #2]
 720:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2211              		.loc 1 720 7 is_stmt 1 view .LVU644
 720:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2212              		.loc 1 720 10 is_stmt 0 view .LVU645
 2213 0116 FA70     		strb	r2, [r7, #3]
 721:src/menu.c    **** 	finished = 1;
 2214              		.loc 1 721 7 is_stmt 1 view .LVU646
 721:src/menu.c    **** 	finished = 1;
ARM GAS  /tmp/ccVzm1xY.s 			page 62


 2215              		.loc 1 721 21 is_stmt 0 view .LVU647
 2216 0118 4FEA5818 		lsr	r8, r8, #5
 718:src/menu.c    ****       }
 2217              		.loc 1 718 6 view .LVU648
 2218 011c 1F46     		mov	r7, r3
 2219 011e B0E7     		b	.L196
 2220              	.LVL175:
 2221              	.L198:
 707:src/menu.c    **** 	i++;
 2222              		.loc 1 707 2 is_stmt 1 view .LVU649
 2223 0120 5846     		mov	r0, fp
 2224              	.LVL176:
 707:src/menu.c    **** 	i++;
 2225              		.loc 1 707 2 is_stmt 0 view .LVU650
 2226 0122 3246     		mov	r2, r6
 2227 0124 4FF48071 		mov	r1, #256
 709:src/menu.c    **** 	finished = 0;
 2228              		.loc 1 709 8 view .LVU651
 2229 0128 3746     		mov	r7, r6
 2230              	.LVL177:
 707:src/menu.c    **** 	i++;
 2231              		.loc 1 707 2 view .LVU652
 2232 012a FFF7FEFF 		bl	umen_store
 2233              	.LVL178:
 708:src/menu.c    ****     	p = buf1;
 2234              		.loc 1 708 2 is_stmt 1 view .LVU653
 714:src/menu.c    **** 	*p++ = c;
 2235              		.loc 1 714 10 is_stmt 0 view .LVU654
 2236 012e 14F47F0F 		tst	r4, #16711680
 708:src/menu.c    ****     	p = buf1;
 2237              		.loc 1 708 3 view .LVU655
 2238 0132 0BF1010B 		add	fp, fp, #1
 2239              	.LVL179:
 709:src/menu.c    **** 	finished = 0;
 2240              		.loc 1 709 6 is_stmt 1 view .LVU656
 710:src/menu.c    ****       } // ..and start reading the new alpha
 2241              		.loc 1 710 2 view .LVU657
 712:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2242              		.loc 1 712 7 view .LVU658
 712:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2243              		.loc 1 712 12 is_stmt 0 view .LVU659
 2244 0136 3C70     		strb	r4, [r7]
 713:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2245              		.loc 1 713 7 is_stmt 1 view .LVU660
 713:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2246              		.loc 1 713 9 is_stmt 0 view .LVU661
 2247 0138 C4F30743 		ubfx	r3, r4, #16, #8
 2248              	.LVL180:
 714:src/menu.c    **** 	*p++ = c;
 2249              		.loc 1 714 7 is_stmt 1 view .LVU662
 714:src/menu.c    **** 	*p++ = c;
 2250              		.loc 1 714 10 is_stmt 0 view .LVU663
 2251 013c B8D0     		beq	.L200
 2252              	.LVL181:
 714:src/menu.c    **** 	*p++ = c;
 2253              		.loc 1 714 10 view .LVU664
 2254 013e DCE7     		b	.L235
ARM GAS  /tmp/ccVzm1xY.s 			page 63


 2255              	.LVL182:
 2256              	.L237:
 2257              	.LBB117:
 694:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2258              		.loc 1 694 2 is_stmt 1 view .LVU665
 694:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2259              		.loc 1 694 29 is_stmt 0 view .LVU666
 2260 0140 104B     		ldr	r3, .L240+4
 2261              	.LVL183:
 695:src/menu.c    ****       }
 2262              		.loc 1 695 2 view .LVU667
 2263 0142 114C     		ldr	r4, .L240+8
 694:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2264              		.loc 1 694 29 view .LVU668
 2265 0144 93E80300 		ldm	r3, {r0, r1}
 2266              	.LVL184:
 694:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2267              		.loc 1 694 29 view .LVU669
 2268 0148 104B     		ldr	r3, .L240+12
 695:src/menu.c    ****       }
 2269              		.loc 1 695 2 view .LVU670
 2270 014a 0522     		movs	r2, #5
 694:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2271              		.loc 1 694 29 view .LVU671
 2272 014c 83E80300 		stm	r3, {r0, r1}
 695:src/menu.c    ****       }
 2273              		.loc 1 695 2 is_stmt 1 view .LVU672
 2274 0150 2168     		ldr	r1, [r4]
 2275 0152 5046     		mov	r0, r10
 2276 0154 FFF7FEFF 		bl	strncpy
 2277              	.LVL185:
 2278              	.LBE117:
 2279 0158 CCE7     		b	.L195
 2280              	.LVL186:
 2281              	.L238:
 2282              	.LBB118:
 698:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2283              		.loc 1 698 2 view .LVU673
 698:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2284              		.loc 1 698 29 is_stmt 0 view .LVU674
 2285 015a 0D4B     		ldr	r3, .L240+16
 2286              	.LVL187:
 698:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2287              		.loc 1 698 29 view .LVU675
 2288 015c 93E80300 		ldm	r3, {r0, r1}
 2289              	.LVL188:
 699:src/menu.c    ****       }
 2290              		.loc 1 699 2 view .LVU676
 2291 0160 0C4B     		ldr	r3, .L240+20
 698:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2292              		.loc 1 698 29 view .LVU677
 2293 0162 89E80300 		stm	r9, {r0, r1}
 699:src/menu.c    ****       }
 2294              		.loc 1 699 2 is_stmt 1 view .LVU678
 2295 0166 5A46     		mov	r2, fp
 2296 0168 1968     		ldr	r1, [r3]
 2297 016a 0B48     		ldr	r0, .L240+24
ARM GAS  /tmp/ccVzm1xY.s 			page 64


 2298 016c FFF7FEFF 		bl	strncpy
 2299              	.LVL189:
 2300 0170 C0E7     		b	.L195
 2301              	.LVL190:
 2302              	.L239:
 699:src/menu.c    ****       }
 2303              		.loc 1 699 2 is_stmt 0 view .LVU679
 2304              	.LBE118:
 715:src/menu.c    **** 	c = opc>>24;
 2305              		.loc 1 715 4 view .LVU680
 2306 0172 0237     		adds	r7, r7, #2
 2307              	.LVL191:
 715:src/menu.c    **** 	c = opc>>24;
 2308              		.loc 1 715 4 view .LVU681
 2309 0174 9DE7     		b	.L202
 2310              	.LVL192:
 2311              	.L236:
 2312              	.LBB119:
 732:src/menu.c    **** 	  }
 2313              		.loc 1 732 6 is_stmt 1 view .LVU682
 2314 0176 3146     		mov	r1, r6
 2315 0178 FFF7FEFF 		bl	catcmd
 2316              	.LVL193:
 732:src/menu.c    **** 	  }
 2317              		.loc 1 732 6 is_stmt 0 view .LVU683
 2318 017c 79E7     		b	.L203
 2319              	.L241:
 2320 017e 00BF     		.align	2
 2321              	.L240:
 2322 0180 00000000 		.word	.LANCHOR4
 2323 0184 00000000 		.word	.LANCHOR5
 2324 0188 00000000 		.word	.LANCHOR6
 2325 018c 90000000 		.word	.LANCHOR4+144
 2326 0190 08000000 		.word	.LANCHOR5+8
 2327 0194 00000000 		.word	.LANCHOR7
 2328 0198 C0000000 		.word	.LANCHOR4+192
 2329 019c B0000000 		.word	.LANCHOR4+176
 2330              	.LBE119:
 2331              		.cfi_endproc
 2332              	.LFE19:
 2334              		.section	.text.build_user_menu,"ax",%progbits
 2335              		.align	1
 2336              		.p2align 2,,3
 2337              		.global	build_user_menu
 2338              		.syntax unified
 2339              		.thumb
 2340              		.thumb_func
 2341              		.fpu fpv4-sp-d16
 2343              	build_user_menu:
 2344              	.LFB18:
 657:src/menu.c    ****   // find the label 'MNU'
 2345              		.loc 1 657 27 is_stmt 1 view -0
 2346              		.cfi_startproc
 2347              		@ args = 0, pretend = 0, frame = 0
 2348              		@ frame_needed = 0, uses_anonymous_args = 0
 2349              		@ link register save eliminated.
 659:src/menu.c    ****    build_user_menu_from_program (lbl);
ARM GAS  /tmp/ccVzm1xY.s 			page 65


 2350              		.loc 1 659 4 view .LVU685
 2351              	.LVL194:
 660:src/menu.c    **** }
 2352              		.loc 1 660 4 view .LVU686
 2353 0000 0148     		ldr	r0, .L243
 2354 0002 FFF7FEBF 		b	build_user_menu_from_program
 2355              	.LVL195:
 2356              	.L244:
 2357 0006 00BF     		.align	2
 2358              	.L243:
 2359 0008 4DF04E55 		.word	1431236685
 2360              		.cfi_endproc
 2361              	.LFE18:
 2363              		.section	.text.shutdown,"ax",%progbits
 2364              		.align	1
 2365              		.p2align 2,,3
 2366              		.global	shutdown
 2367              		.syntax unified
 2368              		.thumb
 2369              		.thumb_func
 2370              		.fpu fpv4-sp-d16
 2372              	shutdown:
 2373              	.LFB22:
 2374              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
ARM GAS  /tmp/ccVzm1xY.s 			page 66


  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #ifdef INCLUDE_STOPWATCH
  39:src/console.c **** #include "stopwatch.h"
  40:src/console.c **** #endif
  41:src/console.c **** #undef DM42SAFE
  42:src/console.c **** 
  43:src/console.c **** 
  44:src/console.c **** #ifdef DM42
  45:src/console.c **** 
  46:src/console.c **** #include <menu.c>
  47:src/console.c **** 
  48:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  49:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  50:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  51:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  52:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  53:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  54:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  55:src/console.c **** 
  56:src/console.c **** static struct _ndmap remap (const int c) {
  57:src/console.c **** 
  58:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  59:src/console.c **** 
  60:src/console.c **** #include "keytran.c"
  61:src/console.c **** 
  62:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  63:src/console.c **** 
  64:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  65:src/console.c **** 
  66:src/console.c ****   if (c == 44 ) {
  67:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  68:src/console.c ****     return sshot;
  69:src/console.c ****   }
  70:src/console.c ****   
  71:src/console.c ****   if (Running | Pause) {
  72:src/console.c ****     return mapping_running[c];
  73:src/console.c ****   }
  74:src/console.c **** 
  75:src/console.c ****   struct _menu Ref = get_current_menu_ref();
  76:src/console.c ****   
  77:src/console.c ****   switch (c) {
  78:src/console.c ****   case KEY_F1:
  79:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[0].unshifted;
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
  81:src/console.c ****   case KEY_F2:
  82:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[1].unshifted;
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
  84:src/console.c ****   case KEY_F3:
  85:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[2].unshifted;
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
  87:src/console.c ****   case KEY_F4:
  88:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[3].unshifted;
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
  90:src/console.c ****   case KEY_F5:
ARM GAS  /tmp/ccVzm1xY.s 			page 67


  91:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[4].unshifted;
  92:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
  93:src/console.c ****   case KEY_F6:
  94:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[5].unshifted;
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
  96:src/console.c ****   }
  97:src/console.c **** 
  98:src/console.c ****   if ( get_alpha_state() ) {
  99:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 100:src/console.c ****       switch (cur_shift()) { 
 101:src/console.c ****       case SHIFT_N:
 102:src/console.c **** 	return mapping_none[c]; // N -> F
 103:src/console.c **** 	break;
 104:src/console.c ****       case SHIFT_F:
 105:src/console.c **** 	return mapping_fshift[c]; // F -> G
 106:src/console.c **** 	break;
 107:src/console.c ****       case SHIFT_G:
 108:src/console.c **** 	return h_shift; // G -> H
 109:src/console.c **** 	break;
 110:src/console.c ****       case SHIFT_H:
 111:src/console.c **** 	return h_shift; // H -> N
 112:src/console.c ****       default:
 113:src/console.c **** 	return no_change;
 114:src/console.c ****       }
 115:src/console.c ****     }
 116:src/console.c ****     return mapping_alpha [c];
 117:src/console.c ****   }
 118:src/console.c **** 
 119:src/console.c ****   switch (cur_shift()) {
 120:src/console.c ****   case SHIFT_N:    
 121:src/console.c ****     return mapping_none[c];
 122:src/console.c ****     break;
 123:src/console.c ****   case SHIFT_F:
 124:src/console.c ****     return mapping_fshift[c];
 125:src/console.c ****     break;
 126:src/console.c ****   case SHIFT_G:
 127:src/console.c ****     return mapping_gshift[c];
 128:src/console.c ****     break;
 129:src/console.c ****   default:
 130:src/console.c ****     return no_change;
 131:src/console.c ****   }
 132:src/console.c **** }
 133:src/console.c **** 
 134:src/console.c **** #endif
 135:src/console.c **** 
 136:src/console.c **** void shutdown( void )
 137:src/console.c **** {
 2375              		.loc 2 137 1 view -0
 2376              		.cfi_startproc
 2377              		@ args = 0, pretend = 0, frame = 0
 2378              		@ frame_needed = 0, uses_anonymous_args = 0
 2379              		@ link register save eliminated.
 138:src/console.c **** #ifndef DM42
 139:src/console.c ****   checksum_all();
 140:src/console.c ****   setuptty( 1 );
 141:src/console.c ****   save_statefile( NULL );
 142:src/console.c ****   exit( 0 );
ARM GAS  /tmp/ccVzm1xY.s 			page 68


 143:src/console.c **** #else
 144:src/console.c ****   //  save_ram_file(0);
 145:src/console.c ****   SET_ST(STAT_PGM_END);
 2380              		.loc 2 145 3 view .LVU688
 2381 0000 024A     		ldr	r2, .L246
 2382 0002 1368     		ldr	r3, [r2]
 2383 0004 43F40073 		orr	r3, r3, #512
 2384 0008 1360     		str	r3, [r2]
 146:src/console.c **** #endif
 147:src/console.c **** }
 2385              		.loc 2 147 1 is_stmt 0 view .LVU689
 2386 000a 7047     		bx	lr
 2387              	.L247:
 2388              		.align	2
 2389              	.L246:
 2390 000c 00200010 		.word	268443648
 2391              		.cfi_endproc
 2392              	.LFE22:
 2394              		.section	.text.is_key_pressed,"ax",%progbits
 2395              		.align	1
 2396              		.p2align 2,,3
 2397              		.global	is_key_pressed
 2398              		.syntax unified
 2399              		.thumb
 2400              		.thumb_func
 2401              		.fpu fpv4-sp-d16
 2403              	is_key_pressed:
 2404              	.LFB23:
 148:src/console.c **** 
 149:src/console.c **** 
 150:src/console.c **** /*
 151:src/console.c ****  *  Dummies
 152:src/console.c ****  */
 153:src/console.c **** int is_key_pressed(void) 
 154:src/console.c **** {
 2405              		.loc 2 154 1 is_stmt 1 view -0
 2406              		.cfi_startproc
 2407              		@ args = 0, pretend = 0, frame = 0
 2408              		@ frame_needed = 0, uses_anonymous_args = 0
 155:src/console.c **** #ifdef DM42
 156:src/console.c ****   return !key_empty();
 2409              		.loc 2 156 3 view .LVU691
 154:src/console.c **** #ifdef DM42
 2410              		.loc 2 154 1 is_stmt 0 view .LVU692
 2411 0000 08B5     		push	{r3, lr}
 2412              		.cfi_def_cfa_offset 8
 2413              		.cfi_offset 3, -8
 2414              		.cfi_offset 14, -4
 2415              		.loc 2 156 11 view .LVU693
 2416 0002 034B     		ldr	r3, .L250
 2417 0004 9847     		blx	r3
 2418              	.LVL196:
 157:src/console.c **** #else
 158:src/console.c ****   return 0;
 159:src/console.c **** #endif
 160:src/console.c **** }
 2419              		.loc 2 160 1 view .LVU694
ARM GAS  /tmp/ccVzm1xY.s 			page 69


 2420 0006 B0FA80F0 		clz	r0, r0
 2421 000a 4009     		lsrs	r0, r0, #5
 2422 000c 08BD     		pop	{r3, pc}
 2423              	.L251:
 2424 000e 00BF     		.align	2
 2425              	.L250:
 2426 0010 7D030008 		.word	134218621
 2427              		.cfi_endproc
 2428              	.LFE23:
 2430              		.section	.text.get_key,"ax",%progbits
 2431              		.align	1
 2432              		.p2align 2,,3
 2433              		.global	get_key
 2434              		.syntax unified
 2435              		.thumb
 2436              		.thumb_func
 2437              		.fpu fpv4-sp-d16
 2439              	get_key:
 2440              	.LFB24:
 161:src/console.c **** 
 162:src/console.c **** int get_key(void)
 163:src/console.c **** {
 2441              		.loc 2 163 1 is_stmt 1 view -0
 2442              		.cfi_startproc
 2443              		@ args = 0, pretend = 0, frame = 0
 2444              		@ frame_needed = 0, uses_anonymous_args = 0
 2445              		@ link register save eliminated.
 164:src/console.c ****   #ifdef DM42
 165:src/console.c ****   return key_pop();
 2446              		.loc 2 165 3 view .LVU696
 2447              		.loc 2 165 10 is_stmt 0 view .LVU697
 2448 0000 004B     		ldr	r3, .L253
 2449 0002 1847     		bx	r3
 2450              	.LVL197:
 2451              	.L254:
 2452              		.align	2
 2453              	.L253:
 2454 0004 89030008 		.word	134218633
 2455              		.cfi_endproc
 2456              	.LFE24:
 2458              		.section	.text.put_key,"ax",%progbits
 2459              		.align	1
 2460              		.p2align 2,,3
 2461              		.global	put_key
 2462              		.syntax unified
 2463              		.thumb
 2464              		.thumb_func
 2465              		.fpu fpv4-sp-d16
 2467              	put_key:
 2468              	.LVL198:
 2469              	.LFB25:
 166:src/console.c ****   #else
 167:src/console.c ****   return 0;
 168:src/console.c ****   #endif
 169:src/console.c **** }
 170:src/console.c **** 
 171:src/console.c **** /*
ARM GAS  /tmp/ccVzm1xY.s 			page 70


 172:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 173:src/console.c ****  * 
 174:src/console.c ****  */
 175:src/console.c **** int put_key( int k )
 176:src/console.c **** {
 2470              		.loc 2 176 1 is_stmt 1 view -0
 2471              		.cfi_startproc
 2472              		@ args = 0, pretend = 0, frame = 48
 2473              		@ frame_needed = 0, uses_anonymous_args = 0
 2474              		@ link register save eliminated.
 177:src/console.c ****   #ifdef DM42
 178:src/console.c ****   const char wp34s_to_DM42[] = {
 2475              		.loc 2 178 3 view .LVU699
 176:src/console.c ****   #ifdef DM42
 2476              		.loc 2 176 1 is_stmt 0 view .LVU700
 2477 0000 70B4     		push	{r4, r5, r6}
 2478              		.cfi_def_cfa_offset 12
 2479              		.cfi_offset 4, -12
 2480              		.cfi_offset 5, -8
 2481              		.cfi_offset 6, -4
 2482              		.loc 2 178 14 view .LVU701
 2483 0002 0E4D     		ldr	r5, .L258
 176:src/console.c ****   #ifdef DM42
 2484              		.loc 2 176 1 view .LVU702
 2485 0004 0646     		mov	r6, r0
 2486              		.loc 2 178 14 view .LVU703
 2487 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2488              	.LVL199:
 176:src/console.c ****   #ifdef DM42
 2489              		.loc 2 176 1 view .LVU704
 2490 0008 8DB0     		sub	sp, sp, #52
 2491              		.cfi_def_cfa_offset 64
 2492              		.loc 2 178 14 view .LVU705
 2493 000a 01AC     		add	r4, sp, #4
 2494 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2495 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2496 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2497 0012 95E80700 		ldm	r5, {r0, r1, r2}
 2498 0016 03C4     		stmia	r4!, {r0, r1}
 179:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 180:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 181:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 182:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 183:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 184:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 185:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 186:src/console.c ****   
 187:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 2499              		.loc 2 187 6 view .LVU706
 2500 0018 282E     		cmp	r6, #40
 178:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 2501              		.loc 2 178 14 view .LVU707
 2502 001a 2270     		strb	r2, [r4]
 2503              		.loc 2 187 3 is_stmt 1 view .LVU708
 2504              		.loc 2 187 6 is_stmt 0 view .LVU709
 2505 001c 08D8     		bhi	.L256
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
ARM GAS  /tmp/ccVzm1xY.s 			page 71


 2506              		.loc 2 188 5 is_stmt 1 view .LVU710
 2507              		.loc 2 188 36 is_stmt 0 view .LVU711
 2508 001e 0CAB     		add	r3, sp, #48
 2509 0020 3046     		mov	r0, r6
 2510 0022 1844     		add	r0, r0, r3
 2511              		.loc 2 188 12 view .LVU712
 2512 0024 064B     		ldr	r3, .L258+4
 2513 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 189:src/console.c ****   }
 190:src/console.c ****   else {
 191:src/console.c ****     return -1;
 192:src/console.c ****   }
 193:src/console.c ****   #else
 194:src/console.c ****   return k;
 195:src/console.c ****   #endif
 196:src/console.c **** }
 2514              		.loc 2 196 1 view .LVU713
 2515 002a 0DB0     		add	sp, sp, #52
 2516              		.cfi_remember_state
 2517              		.cfi_def_cfa_offset 12
 2518              		@ sp needed
 2519 002c 70BC     		pop	{r4, r5, r6}
 2520              		.cfi_restore 6
 2521              		.cfi_restore 5
 2522              		.cfi_restore 4
 2523              		.cfi_def_cfa_offset 0
 2524              	.LVL200:
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2525              		.loc 2 188 12 view .LVU714
 2526 002e 1847     		bx	r3
 2527              	.LVL201:
 2528              	.L256:
 2529              		.cfi_restore_state
 2530              		.loc 2 196 1 view .LVU715
 2531 0030 4FF0FF30 		mov	r0, #-1
 2532 0034 0DB0     		add	sp, sp, #52
 2533              		.cfi_def_cfa_offset 12
 2534              		@ sp needed
 2535 0036 70BC     		pop	{r4, r5, r6}
 2536              		.cfi_restore 6
 2537              		.cfi_restore 5
 2538              		.cfi_restore 4
 2539              		.cfi_def_cfa_offset 0
 2540              	.LVL202:
 2541              		.loc 2 196 1 view .LVU716
 2542 0038 7047     		bx	lr
 2543              	.L259:
 2544 003a 00BF     		.align	2
 2545              	.L258:
 2546 003c 10000000 		.word	.LANCHOR5+16
 2547 0040 81030008 		.word	134218625
 2548              		.cfi_endproc
 2549              	.LFE25:
 2551              		.section	.text.shift_down,"ax",%progbits
 2552              		.align	1
 2553              		.p2align 2,,3
 2554              		.global	shift_down
ARM GAS  /tmp/ccVzm1xY.s 			page 72


 2555              		.syntax unified
 2556              		.thumb
 2557              		.thumb_func
 2558              		.fpu fpv4-sp-d16
 2560              	shift_down:
 2561              	.LFB26:
 197:src/console.c **** 
 198:src/console.c **** enum shifts shift_down(void)
 199:src/console.c **** {
 2562              		.loc 2 199 1 is_stmt 1 view -0
 2563              		.cfi_startproc
 2564              		@ args = 0, pretend = 0, frame = 0
 2565              		@ frame_needed = 0, uses_anonymous_args = 0
 2566              		@ link register save eliminated.
 200:src/console.c **** 	return SHIFT_N;
 2567              		.loc 2 200 2 view .LVU718
 201:src/console.c **** }
 2568              		.loc 2 201 1 is_stmt 0 view .LVU719
 2569 0000 0020     		movs	r0, #0
 2570 0002 7047     		bx	lr
 2571              		.cfi_endproc
 2572              	.LFE26:
 2574              		.section	.text.start_key_timer,"ax",%progbits
 2575              		.align	1
 2576              		.p2align 2,,3
 2577              		.global	start_key_timer
 2578              		.syntax unified
 2579              		.thumb
 2580              		.thumb_func
 2581              		.fpu fpv4-sp-d16
 2583              	start_key_timer:
 2584              	.LFB27:
 202:src/console.c **** 
 203:src/console.c **** #ifndef DM42   // No serial operations for DM42
 204:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 205:src/console.c **** /*
 206:src/console.c ****  *  Open a COM port for transmission
 207:src/console.c ****  */
 208:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 209:src/console.c **** {
 210:src/console.c **** 	return 0;
 211:src/console.c **** }
 212:src/console.c **** 
 213:src/console.c **** 
 214:src/console.c **** /*
 215:src/console.c ****  *  Close the COM port after transmission is complete
 216:src/console.c ****  */
 217:src/console.c **** extern void close_port( void )
 218:src/console.c **** {
 219:src/console.c **** }
 220:src/console.c **** 
 221:src/console.c **** 
 222:src/console.c **** /*
 223:src/console.c ****  *  Output a single byte to the serial
 224:src/console.c ****  */
 225:src/console.c **** void put_byte( unsigned char byte )
 226:src/console.c **** {
ARM GAS  /tmp/ccVzm1xY.s 			page 73


 227:src/console.c **** 	report_err(ERR_PROG_BAD);
 228:src/console.c **** }
 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Force buffer flush
 233:src/console.c ****  */
 234:src/console.c **** void flush_comm( void )
 235:src/console.c **** {
 236:src/console.c **** }
 237:src/console.c **** 
 238:src/console.c **** #endif
 239:src/console.c **** #endif
 240:src/console.c **** 
 241:src/console.c **** 
 242:src/console.c **** /*
 243:src/console.c ****  *  Main loop
 244:src/console.c ****  */
 245:src/console.c **** #ifdef DM42
 246:src/console.c **** void start_key_timer (void);
 247:src/console.c **** long int keyticks (void);
 248:src/console.c **** void moveto (int line, int x);
 249:src/console.c **** 
 250:src/console.c **** static long int start_ticks;
 251:src/console.c **** 
 252:src/console.c **** void start_key_timer() {
 2585              		.loc 2 252 24 is_stmt 1 view -0
 2586              		.cfi_startproc
 2587              		@ args = 0, pretend = 0, frame = 0
 2588              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/console.c ****     start_ticks = get_rtc_ticks();
 2589              		.loc 2 253 5 view .LVU721
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 2590              		.loc 2 252 24 is_stmt 0 view .LVU722
 2591 0000 08B5     		push	{r3, lr}
 2592              		.cfi_def_cfa_offset 8
 2593              		.cfi_offset 3, -8
 2594              		.cfi_offset 14, -4
 2595              		.loc 2 253 19 view .LVU723
 2596 0002 024B     		ldr	r3, .L263
 2597 0004 9847     		blx	r3
 2598              	.LVL203:
 2599              		.loc 2 253 17 view .LVU724
 2600 0006 024B     		ldr	r3, .L263+4
 2601 0008 1860     		str	r0, [r3]
 254:src/console.c **** }
 2602              		.loc 2 254 1 view .LVU725
 2603 000a 08BD     		pop	{r3, pc}
 2604              	.L264:
 2605              		.align	2
 2606              	.L263:
 2607 000c B9040008 		.word	134218937
 2608 0010 00000000 		.word	.LANCHOR8
 2609              		.cfi_endproc
 2610              	.LFE27:
 2612              		.section	.text.keyticks,"ax",%progbits
 2613              		.align	1
ARM GAS  /tmp/ccVzm1xY.s 			page 74


 2614              		.p2align 2,,3
 2615              		.global	keyticks
 2616              		.syntax unified
 2617              		.thumb
 2618              		.thumb_func
 2619              		.fpu fpv4-sp-d16
 2621              	keyticks:
 2622              	.LFB28:
 255:src/console.c **** 
 256:src/console.c **** long int keyticks () {
 2623              		.loc 2 256 22 is_stmt 1 view -0
 2624              		.cfi_startproc
 2625              		@ args = 0, pretend = 0, frame = 0
 2626              		@ frame_needed = 0, uses_anonymous_args = 0
 257:src/console.c ****   long int i;
 2627              		.loc 2 257 3 view .LVU727
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2628              		.loc 2 258 3 view .LVU728
 256:src/console.c ****   long int i;
 2629              		.loc 2 256 22 is_stmt 0 view .LVU729
 2630 0000 08B5     		push	{r3, lr}
 2631              		.cfi_def_cfa_offset 8
 2632              		.cfi_offset 3, -8
 2633              		.cfi_offset 14, -4
 2634              		.loc 2 258 8 view .LVU730
 2635 0002 054B     		ldr	r3, .L267
 2636 0004 9847     		blx	r3
 2637              	.LVL204:
 259:src/console.c ****   return i >> 8;
 2638              		.loc 2 259 3 is_stmt 1 view .LVU731
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2639              		.loc 2 258 24 is_stmt 0 view .LVU732
 2640 0006 054B     		ldr	r3, .L267+4
 2641 0008 1B68     		ldr	r3, [r3]
 2642 000a C01A     		subs	r0, r0, r3
 2643              	.LVL205:
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2644              		.loc 2 258 38 view .LVU733
 2645 000c 00EB8000 		add	r0, r0, r0, lsl #2
 260:src/console.c **** }
 2646              		.loc 2 260 1 view .LVU734
 2647 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2648 0014 08BD     		pop	{r3, pc}
 2649              	.L268:
 2650 0016 00BF     		.align	2
 2651              	.L267:
 2652 0018 B9040008 		.word	134218937
 2653 001c 00000000 		.word	.LANCHOR8
 2654              		.cfi_endproc
 2655              	.LFE28:
 2657              		.section	.text.moveto,"ax",%progbits
 2658              		.align	1
 2659              		.p2align 2,,3
 2660              		.global	moveto
 2661              		.syntax unified
 2662              		.thumb
 2663              		.thumb_func
ARM GAS  /tmp/ccVzm1xY.s 			page 75


 2664              		.fpu fpv4-sp-d16
 2666              	moveto:
 2667              	.LVL206:
 2668              	.LFB29:
 261:src/console.c **** 
 262:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 263:src/console.c **** char print_string[22];
 264:src/console.c **** int n_p = 0;
 265:src/console.c **** 
 266:src/console.c **** 
 267:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2669              		.loc 2 267 30 is_stmt 1 view -0
 2670              		.cfi_startproc
 2671              		@ args = 0, pretend = 0, frame = 0
 2672              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2673              		.loc 2 268 3 view .LVU736
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2674              		.loc 2 267 30 is_stmt 0 view .LVU737
 2675 0000 70B5     		push	{r4, r5, r6, lr}
 2676              		.cfi_def_cfa_offset 16
 2677              		.cfi_offset 4, -16
 2678              		.cfi_offset 5, -12
 2679              		.cfi_offset 6, -8
 2680              		.cfi_offset 14, -4
 2681              		.loc 2 268 3 view .LVU738
 2682 0002 0A4D     		ldr	r5, .L271
 2683 0004 0A4B     		ldr	r3, .L271+4
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2684              		.loc 2 267 30 view .LVU739
 2685 0006 0246     		mov	r2, r0
 2686 0008 0C46     		mov	r4, r1
 2687              		.loc 2 268 3 view .LVU740
 2688 000a A86B     		ldr	r0, [r5, #56]
 2689              	.LVL207:
 2690              		.loc 2 268 3 view .LVU741
 2691 000c 511E     		subs	r1, r2, #1
 2692              	.LVL208:
 2693              		.loc 2 268 3 view .LVU742
 2694 000e 9847     		blx	r3
 2695              	.LVL209:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2696              		.loc 2 269 3 is_stmt 1 view .LVU743
 2697 0010 A86B     		ldr	r0, [r5, #56]
 2698 0012 084B     		ldr	r3, .L271+8
 2699              		.loc 2 269 33 is_stmt 0 view .LVU744
 2700 0014 0168     		ldr	r1, [r0]
 2701              		.loc 2 269 3 view .LVU745
 2702 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2703              		.loc 2 269 33 view .LVU746
 2704 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2705              		.loc 2 269 43 view .LVU747
 2706 001c 013C     		subs	r4, r4, #1
 2707              	.LVL210:
 2708              		.loc 2 269 40 view .LVU748
 2709 001e 04FB01F1 		mul	r1, r4, r1
 2710              		.loc 2 269 3 view .LVU749
ARM GAS  /tmp/ccVzm1xY.s 			page 76


 2711 0022 1431     		adds	r1, r1, #20
 270:src/console.c **** }
 2712              		.loc 2 270 1 view .LVU750
 2713 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2714              		.cfi_restore 14
 2715              		.cfi_restore 6
 2716              		.cfi_restore 5
 2717              		.cfi_restore 4
 2718              		.cfi_def_cfa_offset 0
 2719              	.LVL211:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2720              		.loc 2 269 3 view .LVU751
 2721 0028 1847     		bx	r3	@ indirect register sibling call
 2722              	.LVL212:
 2723              	.L272:
 2724 002a 00BF     		.align	2
 2725              	.L271:
 2726 002c 00200010 		.word	268443648
 2727 0030 69020008 		.word	134218345
 2728 0034 6D020008 		.word	134218349
 2729              		.cfi_endproc
 2730              	.LFE29:
 2732              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2733              		.align	2
 2734              	.LC11:
 2735 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2735      673A2025 
 2735      34692C25 
 2735      346900
 2736              		.section	.text.print_debug,"ax",%progbits
 2737              		.align	1
 2738              		.p2align 2,,3
 2739              		.global	print_debug
 2740              		.syntax unified
 2741              		.thumb
 2742              		.thumb_func
 2743              		.fpu fpv4-sp-d16
 2745              	print_debug:
 2746              	.LVL213:
 2747              	.LFB30:
 271:src/console.c **** 
 272:src/console.c **** void print_debug (int i, int j) {
 2748              		.loc 2 272 33 is_stmt 1 view -0
 2749              		.cfi_startproc
 2750              		@ args = 0, pretend = 0, frame = 8
 2751              		@ frame_needed = 0, uses_anonymous_args = 0
 273:src/console.c ****   strcpy( print_string, spaces );
 2752              		.loc 2 273 3 view .LVU753
 272:src/console.c ****   strcpy( print_string, spaces );
 2753              		.loc 2 272 33 is_stmt 0 view .LVU754
 2754 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2755              		.cfi_def_cfa_offset 24
 2756              		.cfi_offset 4, -24
 2757              		.cfi_offset 5, -20
 2758              		.cfi_offset 6, -16
 2759              		.cfi_offset 7, -12
 2760              		.cfi_offset 8, -8
ARM GAS  /tmp/ccVzm1xY.s 			page 77


 2761              		.cfi_offset 14, -4
 2762              		.loc 2 273 3 view .LVU755
 2763 0004 174C     		ldr	r4, .L275
 2764 0006 184F     		ldr	r7, .L275+4
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 275:src/console.c ****   moveto (3, 1);
 276:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2765              		.loc 2 276 3 view .LVU756
 2766 0008 184E     		ldr	r6, .L275+8
 2767 000a 194D     		ldr	r5, .L275+12
 277:src/console.c ****   lcd_refresh();
 2768              		.loc 2 277 3 view .LVU757
 2769 000c DFF86C80 		ldr	r8, .L275+24
 272:src/console.c ****   strcpy( print_string, spaces );
 2770              		.loc 2 272 33 view .LVU758
 2771 0010 82B0     		sub	sp, sp, #8
 2772              		.cfi_def_cfa_offset 32
 272:src/console.c ****   strcpy( print_string, spaces );
 2773              		.loc 2 272 33 view .LVU759
 2774 0012 0190     		str	r0, [sp, #4]
 2775 0014 0091     		str	r1, [sp]
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2776              		.loc 2 273 3 view .LVU760
 2777 0016 2046     		mov	r0, r4
 2778              	.LVL214:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2779              		.loc 2 273 3 view .LVU761
 2780 0018 3946     		mov	r1, r7
 2781              	.LVL215:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2782              		.loc 2 273 3 view .LVU762
 2783 001a FFF7FEFF 		bl	strcpy
 2784              	.LVL216:
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2785              		.loc 2 274 3 is_stmt 1 view .LVU763
 2786 001e DDE90032 		ldrd	r3, r2, [sp]
 2787 0022 1449     		ldr	r1, .L275+16
 2788 0024 2046     		mov	r0, r4
 2789 0026 FFF7FEFF 		bl	sprintf
 2790              	.LVL217:
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2791              		.loc 2 275 3 view .LVU764
 2792 002a 0121     		movs	r1, #1
 2793 002c 0320     		movs	r0, #3
 2794 002e FFF7FEFF 		bl	moveto
 2795              	.LVL218:
 276:src/console.c ****   lcd_refresh();
 2796              		.loc 2 276 3 view .LVU765
 2797 0032 2146     		mov	r1, r4
 2798 0034 B06B     		ldr	r0, [r6, #56]
 2799 0036 A847     		blx	r5
 2800              	.LVL219:
 2801              		.loc 2 277 3 view .LVU766
 2802 0038 C047     		blx	r8
 2803              	.LVL220:
 278:src/console.c ****   sys_delay (1000);
 2804              		.loc 2 278 3 view .LVU767
ARM GAS  /tmp/ccVzm1xY.s 			page 78


 2805 003a 0F4B     		ldr	r3, .L275+20
 2806 003c 4FF47A70 		mov	r0, #1000
 2807 0040 9847     		blx	r3
 2808              	.LVL221:
 279:src/console.c ****   /* wait_for_key_press(); */
 280:src/console.c ****   //  key_pop_all();
 281:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 282:src/console.c ****   // key_pop_all();
 283:src/console.c ****   strcpy( print_string, spaces );
 2809              		.loc 2 283 3 view .LVU768
 2810 0042 3946     		mov	r1, r7
 2811 0044 2046     		mov	r0, r4
 2812 0046 FFF7FEFF 		bl	strcpy
 2813              	.LVL222:
 284:src/console.c ****   moveto (3, 1);
 2814              		.loc 2 284 3 view .LVU769
 2815 004a 0121     		movs	r1, #1
 2816 004c 0320     		movs	r0, #3
 2817 004e FFF7FEFF 		bl	moveto
 2818              	.LVL223:
 285:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2819              		.loc 2 285 3 view .LVU770
 2820 0052 B06B     		ldr	r0, [r6, #56]
 2821 0054 2146     		mov	r1, r4
 2822 0056 A847     		blx	r5
 2823              	.LVL224:
 286:src/console.c ****   lcd_refresh();
 2824              		.loc 2 286 3 view .LVU771
 2825 0058 4346     		mov	r3, r8
 287:src/console.c ****   // while (key_empty()<=0);; // wait for release
 288:src/console.c ****   // key_pop_all();
 289:src/console.c **** }
 2826              		.loc 2 289 1 is_stmt 0 view .LVU772
 2827 005a 02B0     		add	sp, sp, #8
 2828              		.cfi_def_cfa_offset 24
 2829              	.LVL225:
 2830              		.loc 2 289 1 view .LVU773
 2831              		@ sp needed
 2832 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2833              		.cfi_restore 14
 2834              		.cfi_restore 8
 2835              		.cfi_restore 7
 2836              		.cfi_restore 6
 2837              		.cfi_restore 5
 2838              		.cfi_restore 4
 2839              		.cfi_def_cfa_offset 0
 2840              	.LVL226:
 286:src/console.c ****   lcd_refresh();
 2841              		.loc 2 286 3 view .LVU774
 2842 0060 1847     		bx	r3	@ indirect register sibling call
 2843              	.LVL227:
 2844              	.L276:
 2845 0062 00BF     		.align	2
 2846              	.L275:
 2847 0064 00000000 		.word	print_string
 2848 0068 00000000 		.word	.LANCHOR9
 2849 006c 00200010 		.word	268443648
ARM GAS  /tmp/ccVzm1xY.s 			page 79


 2850 0070 B1020008 		.word	134218417
 2851 0074 00000000 		.word	.LC11
 2852 0078 05040008 		.word	134218757
 2853 007c 31020008 		.word	134218289
 2854              		.cfi_endproc
 2855              	.LFE30:
 2857              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2858              		.align	2
 2859              	.LC12:
 2860 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2860      692C2531 
 2860      337300
 2861              		.section	.text.print_debug2,"ax",%progbits
 2862              		.align	1
 2863              		.p2align 2,,3
 2864              		.global	print_debug2
 2865              		.syntax unified
 2866              		.thumb
 2867              		.thumb_func
 2868              		.fpu fpv4-sp-d16
 2870              	print_debug2:
 2871              	.LVL228:
 2872              	.LFB31:
 290:src/console.c **** 
 291:src/console.c **** void print_debug2 (int i, char* j) {
 2873              		.loc 2 291 36 is_stmt 1 view -0
 2874              		.cfi_startproc
 2875              		@ args = 0, pretend = 0, frame = 8
 2876              		@ frame_needed = 0, uses_anonymous_args = 0
 292:src/console.c ****   strcpy( print_string, spaces );
 2877              		.loc 2 292 3 view .LVU776
 291:src/console.c ****   strcpy( print_string, spaces );
 2878              		.loc 2 291 36 is_stmt 0 view .LVU777
 2879 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2880              		.cfi_def_cfa_offset 24
 2881              		.cfi_offset 4, -24
 2882              		.cfi_offset 5, -20
 2883              		.cfi_offset 6, -16
 2884              		.cfi_offset 7, -12
 2885              		.cfi_offset 8, -8
 2886              		.cfi_offset 14, -4
 2887              		.loc 2 292 3 view .LVU778
 2888 0004 174C     		ldr	r4, .L279
 2889 0006 184F     		ldr	r7, .L279+4
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 294:src/console.c ****   moveto (3, 1);
 295:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2890              		.loc 2 295 3 view .LVU779
 2891 0008 184E     		ldr	r6, .L279+8
 2892 000a 194D     		ldr	r5, .L279+12
 296:src/console.c ****   lcd_refresh();
 2893              		.loc 2 296 3 view .LVU780
 2894 000c DFF86C80 		ldr	r8, .L279+24
 291:src/console.c ****   strcpy( print_string, spaces );
 2895              		.loc 2 291 36 view .LVU781
 2896 0010 82B0     		sub	sp, sp, #8
 2897              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccVzm1xY.s 			page 80


 291:src/console.c ****   strcpy( print_string, spaces );
 2898              		.loc 2 291 36 view .LVU782
 2899 0012 0190     		str	r0, [sp, #4]
 2900 0014 0091     		str	r1, [sp]
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2901              		.loc 2 292 3 view .LVU783
 2902 0016 2046     		mov	r0, r4
 2903              	.LVL229:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2904              		.loc 2 292 3 view .LVU784
 2905 0018 3946     		mov	r1, r7
 2906              	.LVL230:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2907              		.loc 2 292 3 view .LVU785
 2908 001a FFF7FEFF 		bl	strcpy
 2909              	.LVL231:
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2910              		.loc 2 293 3 is_stmt 1 view .LVU786
 2911 001e DDE90032 		ldrd	r3, r2, [sp]
 2912 0022 1449     		ldr	r1, .L279+16
 2913 0024 2046     		mov	r0, r4
 2914 0026 FFF7FEFF 		bl	sprintf
 2915              	.LVL232:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2916              		.loc 2 294 3 view .LVU787
 2917 002a 0121     		movs	r1, #1
 2918 002c 0320     		movs	r0, #3
 2919 002e FFF7FEFF 		bl	moveto
 2920              	.LVL233:
 295:src/console.c ****   lcd_refresh();
 2921              		.loc 2 295 3 view .LVU788
 2922 0032 2146     		mov	r1, r4
 2923 0034 B06B     		ldr	r0, [r6, #56]
 2924 0036 A847     		blx	r5
 2925              	.LVL234:
 2926              		.loc 2 296 3 view .LVU789
 2927 0038 C047     		blx	r8
 2928              	.LVL235:
 297:src/console.c ****   sys_delay (2500);
 2929              		.loc 2 297 3 view .LVU790
 2930 003a 0F4B     		ldr	r3, .L279+20
 2931 003c 40F6C410 		movw	r0, #2500
 2932 0040 9847     		blx	r3
 2933              	.LVL236:
 298:src/console.c ****   /* wait_for_key_press(); */
 299:src/console.c ****   //  key_pop_all();
 300:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 301:src/console.c ****   // key_pop_all();
 302:src/console.c ****   strcpy( print_string, spaces );
 2934              		.loc 2 302 3 view .LVU791
 2935 0042 3946     		mov	r1, r7
 2936 0044 2046     		mov	r0, r4
 2937 0046 FFF7FEFF 		bl	strcpy
 2938              	.LVL237:
 303:src/console.c ****   moveto (3, 1);
 2939              		.loc 2 303 3 view .LVU792
 2940 004a 0121     		movs	r1, #1
ARM GAS  /tmp/ccVzm1xY.s 			page 81


 2941 004c 0320     		movs	r0, #3
 2942 004e FFF7FEFF 		bl	moveto
 2943              	.LVL238:
 304:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2944              		.loc 2 304 3 view .LVU793
 2945 0052 B06B     		ldr	r0, [r6, #56]
 2946 0054 2146     		mov	r1, r4
 2947 0056 A847     		blx	r5
 2948              	.LVL239:
 305:src/console.c ****   lcd_refresh();
 2949              		.loc 2 305 3 view .LVU794
 2950 0058 4346     		mov	r3, r8
 306:src/console.c ****   // while (key_empty()<=0);; // wait for release
 307:src/console.c ****   // key_pop_all();
 308:src/console.c **** }
 2951              		.loc 2 308 1 is_stmt 0 view .LVU795
 2952 005a 02B0     		add	sp, sp, #8
 2953              		.cfi_def_cfa_offset 24
 2954              	.LVL240:
 2955              		.loc 2 308 1 view .LVU796
 2956              		@ sp needed
 2957 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2958              		.cfi_restore 14
 2959              		.cfi_restore 8
 2960              		.cfi_restore 7
 2961              		.cfi_restore 6
 2962              		.cfi_restore 5
 2963              		.cfi_restore 4
 2964              		.cfi_def_cfa_offset 0
 2965              	.LVL241:
 305:src/console.c ****   lcd_refresh();
 2966              		.loc 2 305 3 view .LVU797
 2967 0060 1847     		bx	r3	@ indirect register sibling call
 2968              	.LVL242:
 2969              	.L280:
 2970 0062 00BF     		.align	2
 2971              	.L279:
 2972 0064 00000000 		.word	print_string
 2973 0068 00000000 		.word	.LANCHOR9
 2974 006c 00200010 		.word	268443648
 2975 0070 B1020008 		.word	134218417
 2976 0074 00000000 		.word	.LC12
 2977 0078 05040008 		.word	134218757
 2978 007c 31020008 		.word	134218289
 2979              		.cfi_endproc
 2980              	.LFE31:
 2982              		.section	.text.do_now,"ax",%progbits
 2983              		.align	1
 2984              		.p2align 2,,3
 2985              		.global	do_now
 2986              		.syntax unified
 2987              		.thumb
 2988              		.thumb_func
 2989              		.fpu fpv4-sp-d16
 2991              	do_now:
 2992              	.LVL243:
 2993              	.LFB32:
ARM GAS  /tmp/ccVzm1xY.s 			page 82


 309:src/console.c **** 
 310:src/console.c **** void do_now (int key, int shift) { // key and shift are like the output of remapped
 2994              		.loc 2 310 34 is_stmt 1 view -0
 2995              		.cfi_startproc
 2996              		@ args = 0, pretend = 0, frame = 8
 2997              		@ frame_needed = 0, uses_anonymous_args = 0
 2998              		@ link register save eliminated.
 311:src/console.c ****   struct _ndmap temp;
 2999              		.loc 2 311 3 view .LVU799
 312:src/console.c ****   temp.key_34s = key;
 3000              		.loc 2 312 3 view .LVU800
 310:src/console.c ****   struct _ndmap temp;
 3001              		.loc 2 310 34 is_stmt 0 view .LVU801
 3002 0000 82B0     		sub	sp, sp, #8
 3003              		.cfi_def_cfa_offset 8
 313:src/console.c ****   temp.shift = shift;
 314:src/console.c ****   process_keycode_with_shift (temp);
 3004              		.loc 2 314 3 view .LVU802
 3005 0002 02AB     		add	r3, sp, #8
 312:src/console.c ****   temp.shift = shift;
 3006              		.loc 2 312 16 view .LVU803
 3007 0004 8DF80000 		strb	r0, [sp]
 313:src/console.c ****   temp.shift = shift;
 3008              		.loc 2 313 3 is_stmt 1 view .LVU804
 313:src/console.c ****   temp.shift = shift;
 3009              		.loc 2 313 14 is_stmt 0 view .LVU805
 3010 0008 0191     		str	r1, [sp, #4]
 3011              		.loc 2 314 3 is_stmt 1 view .LVU806
 3012 000a 13E90300 		ldmdb	r3, {r0, r1}
 3013              	.LVL244:
 315:src/console.c **** }
 3014              		.loc 2 315 1 is_stmt 0 view .LVU807
 3015 000e 02B0     		add	sp, sp, #8
 3016              		.cfi_def_cfa_offset 0
 3017              		@ sp needed
 314:src/console.c **** }
 3018              		.loc 2 314 3 view .LVU808
 3019 0010 FFF7FEBF 		b	process_keycode_with_shift
 3020              	.LVL245:
 314:src/console.c **** }
 3021              		.loc 2 314 3 view .LVU809
 3022              		.cfi_endproc
 3023              	.LFE32:
 3025              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 3026              		.align	2
 3027              	.LC13:
 3028 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 3028      502F7770 
 3028      3334735F 
 3028      68656C70 
 3028      2E68746D 
 3029              		.section	.text.do_multi,"ax",%progbits
 3030              		.align	1
 3031              		.p2align 2,,3
 3032              		.global	do_multi
 3033              		.syntax unified
 3034              		.thumb
ARM GAS  /tmp/ccVzm1xY.s 			page 83


 3035              		.thumb_func
 3036              		.fpu fpv4-sp-d16
 3038              	do_multi:
 3039              	.LVL246:
 3040              	.LFB33:
 316:src/console.c **** 
 317:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 3041              		.loc 2 317 42 is_stmt 1 view -0
 3042              		.cfi_startproc
 3043              		@ args = 0, pretend = 0, frame = 16
 3044              		@ frame_needed = 0, uses_anonymous_args = 0
 3045              		.loc 2 317 42 is_stmt 0 view .LVU811
 3046 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3047              		.cfi_def_cfa_offset 20
 3048              		.cfi_offset 4, -20
 3049              		.cfi_offset 5, -16
 3050              		.cfi_offset 6, -12
 3051              		.cfi_offset 7, -8
 3052              		.cfi_offset 14, -4
 3053 0002 85B0     		sub	sp, sp, #20
 3054              		.cfi_def_cfa_offset 40
 3055              	.LVL247:
 318:src/console.c ****   switch(r.shift) {
 3056              		.loc 2 318 3 is_stmt 1 view .LVU812
 317:src/console.c ****   switch(r.shift) {
 3057              		.loc 2 317 42 is_stmt 0 view .LVU813
 3058 0004 6C46     		mov	r4, sp
 3059 0006 931E     		subs	r3, r2, #2
 3060 0008 84E80600 		stm	r4, {r1, r2}
 3061              	.LVL248:
 317:src/console.c ****   switch(r.shift) {
 3062              		.loc 2 317 42 view .LVU814
 3063 000c 0546     		mov	r5, r0
 3064 000e 0D2B     		cmp	r3, #13
 3065 0010 23D8     		bhi	.L284
 3066 0012 DFE803F0 		tbb	[pc, r3]
 3067              	.L286:
 3068 0016 2F       		.byte	(.L299-.L286)/2
 3069 0017 3A       		.byte	(.L298-.L286)/2
 3070 0018 45       		.byte	(.L297-.L286)/2
 3071 0019 50       		.byte	(.L296-.L286)/2
 3072 001a 5B       		.byte	(.L295-.L286)/2
 3073 001b 66       		.byte	(.L294-.L286)/2
 3074 001c 71       		.byte	(.L293-.L286)/2
 3075 001d 7B       		.byte	(.L292-.L286)/2
 3076 001e 86       		.byte	(.L291-.L286)/2
 3077 001f 90       		.byte	(.L290-.L286)/2
 3078 0020 9A       		.byte	(.L289-.L286)/2
 3079 0021 AD       		.byte	(.L288-.L286)/2
 3080 0022 B7       		.byte	(.L287-.L286)/2
 3081 0023 07       		.byte	(.L285-.L286)/2
 3082              		.p2align 1
 3083              	.L285:
 319:src/console.c ****   /* case LASTX: // Last x via RCL L */
 320:src/console.c ****   /*   do_now (K11, 0); // RCL */
 321:src/console.c ****   /*   do_now (K_RELEASE,0); // release */
 322:src/console.c ****   /*   do_now (K15,0); // TAN key */
ARM GAS  /tmp/ccVzm1xY.s 			page 84


 323:src/console.c ****   /*   r.key_34s = K_RELEASE; */
 324:src/console.c ****   /*   r.shift = 0; // set up for release; */
 325:src/console.c ****   /*   break; */
 326:src/console.c ****   case ONSTO: // flash_backup()
 327:src/console.c ****     flash_backup(OP_SAVE);
 328:src/console.c ****     reset_shift();
 329:src/console.c ****     r = no_key;
 330:src/console.c ****     break;
 331:src/console.c ****   case ONRCL: // flash_restore()
 332:src/console.c ****     flash_restore(OP_LOAD);
 333:src/console.c ****     reset_shift();
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
 336:src/console.c ****   case WRLIB: // save library file
 337:src/console.c ****     save_lib_file(1);
 338:src/console.c ****     reset_shift();
 339:src/console.c ****     r = no_key;
 340:src/console.c ****     break;
 341:src/console.c ****   case LLIB: // load library file
 342:src/console.c ****     load_lib_file(1);
 343:src/console.c ****     reset_shift();
 344:src/console.c ****     r = no_key;
 345:src/console.c ****     break;
 346:src/console.c ****   case WRTST: // save state file
 347:src/console.c ****     save_ram_file(1);
 348:src/console.c ****     reset_shift();
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case LDST:
 352:src/console.c ****     load_ram_file(1);
 353:src/console.c ****     reset_shift();
 354:src/console.c ****     r = no_key;
 355:src/console.c ****     break;
 356:src/console.c ****   case LDPRG:
 357:src/console.c ****     load_prog_file();
 358:src/console.c ****     reset_shift();
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case SVPRG:
 362:src/console.c ****     save_prog_file();
 363:src/console.c ****     reset_shift();
 364:src/console.c ****     r = no_key;
 365:src/console.c ****     break;
 366:src/console.c ****   case HELP:
 367:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 368:src/console.c ****     reset_shift();
 369:src/console.c ****     r = no_key;
 370:src/console.c ****     break;
 371:src/console.c ****   case DOTS:
 372:src/console.c ****     do_all_dots();
 373:src/console.c ****     reset_shift();
 374:src/console.c ****     r = no_key;
 375:src/console.c ****     break;
 376:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 377:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 378:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 379:src/console.c ****     r = no_key;
ARM GAS  /tmp/ccVzm1xY.s 			page 85


 380:src/console.c ****     break;
 381:src/console.c ****   case DEFMEN:
 382:src/console.c ****     toggle_default_menu();
 383:src/console.c ****     reset_shift();
 384:src/console.c ****     r = no_key;
 385:src/console.c ****     break;
 386:src/console.c ****   case SETUMEN:
 387:src/console.c ****     build_user_menu();
 388:src/console.c ****     reset_shift();
 389:src/console.c ****     r = no_key;;
 390:src/console.c ****     break;
 391:src/console.c ****   case KCPX:
 392:src/console.c ****     if (C_LOCKED) {
 3084              		.loc 2 392 5 is_stmt 1 view .LVU815
 3085              		.loc 2 392 9 is_stmt 0 view .LVU816
 3086 0024 664B     		ldr	r3, .L320
 3087 0026 1B68     		ldr	r3, [r3]
 3088 0028 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 3089              		.loc 2 392 8 view .LVU817
 3090 002c 5207     		lsls	r2, r2, #29
 3091 002e 40F1B480 		bpl	.L301
 3092              		.loc 2 392 9 discriminator 1 view .LVU818
 3093 0032 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 3094 0036 5B07     		lsls	r3, r3, #29
 3095 0038 40F1AF80 		bpl	.L301
 393:src/console.c ****       set_menu(M_C_Lock);
 3096              		.loc 2 393 7 is_stmt 1 view .LVU819
 3097              	.LVL249:
 3098              	.LBB120:
 3099              	.LBI120:
 108:src/menu.c    ****   menu_name m = current_menu;
 3100              		.loc 1 108 6 view .LVU820
 3101              	.LBB121:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3102              		.loc 1 109 3 view .LVU821
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3103              		.loc 1 109 13 is_stmt 0 view .LVU822
 3104 003c 614A     		ldr	r2, .L320+4
 3105 003e 92F90030 		ldrsb	r3, [r2]
 3106              	.LVL250:
 110:src/menu.c    ****     current_menu = default_menu;
 3107              		.loc 1 110 3 is_stmt 1 view .LVU823
 110:src/menu.c    ****     current_menu = default_menu;
 3108              		.loc 1 110 6 is_stmt 0 view .LVU824
 3109 0042 112B     		cmp	r3, #17
 3110 0044 00F0B580 		beq	.L319
 113:src/menu.c    ****     current_menu = last_menu;
 3111              		.loc 1 113 8 is_stmt 1 view .LVU825
 117:src/menu.c    ****   }
 3112              		.loc 1 117 5 view .LVU826
 117:src/menu.c    ****   }
 3113              		.loc 1 117 18 is_stmt 0 view .LVU827
 3114 0048 1121     		movs	r1, #17
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3115              		.loc 1 119 6 view .LVU828
 3116 004a 092B     		cmp	r3, #9
 117:src/menu.c    ****   }
ARM GAS  /tmp/ccVzm1xY.s 			page 86


 3117              		.loc 1 117 18 view .LVU829
 3118 004c 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3119              		.loc 1 119 3 is_stmt 1 view .LVU830
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3120              		.loc 1 119 6 is_stmt 0 view .LVU831
 3121 004e 02D0     		beq	.L304
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3122              		.loc 1 119 23 view .LVU832
 3123 0050 102B     		cmp	r3, #16
 3124 0052 40F0B180 		bne	.L303
 3125              	.L304:
 3126              	.LVL251:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3127              		.loc 1 119 23 view .LVU833
 3128              	.LBE121:
 3129              	.LBE120:
 394:src/console.c ****       reset_shift();
 3130              		.loc 2 394 7 is_stmt 1 view .LVU834
 3131 0056 FFF7FEFF 		bl	reset_shift
 3132              	.LVL252:
 3133              	.L284:
 395:src/console.c ****     }
 396:src/console.c ****     else {
 397:src/console.c ****       do_now (K_CMPLX, 0);
 398:src/console.c ****       do_now (K_RELEASE, 0);
 399:src/console.c ****       r = no_key;
 400:src/console.c ****     }
 401:src/console.c ****   default:
 402:src/console.c ****     r = no_key;
 3134              		.loc 2 402 5 view .LVU835
 3135              		.loc 2 402 7 is_stmt 0 view .LVU836
 3136 005a 5B4B     		ldr	r3, .L320+8
 3137 005c 93E80300 		ldm	r3, {r0, r1}
 3138 0060 84E80300 		stm	r4, {r0, r1}
 3139              	.LVL253:
 3140              	.L300:
 403:src/console.c ****   }
 404:src/console.c ****   return r;
 3141              		.loc 2 404 3 is_stmt 1 view .LVU837
 3142              		.loc 2 404 10 is_stmt 0 view .LVU838
 3143 0064 0191     		str	r1, [sp, #4]
 3144 0066 94E80300 		ldm	r4, {r0, r1}
 3145              	.LVL254:
 3146              		.loc 2 404 10 view .LVU839
 3147 006a 85E80300 		stm	r5, {r0, r1}
 405:src/console.c **** }
 3148              		.loc 2 405 1 view .LVU840
 3149 006e 2846     		mov	r0, r5
 3150 0070 05B0     		add	sp, sp, #20
 3151              		.cfi_remember_state
 3152              		.cfi_def_cfa_offset 20
 3153              		@ sp needed
 3154 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 3155              	.LVL255:
 3156              	.L299:
 3157              		.cfi_restore_state
ARM GAS  /tmp/ccVzm1xY.s 			page 87


 327:src/console.c ****     reset_shift();
 3158              		.loc 2 327 5 is_stmt 1 view .LVU841
 3159 0074 AD20     		movs	r0, #173
 3160              	.LVL256:
 327:src/console.c ****     reset_shift();
 3161              		.loc 2 327 5 is_stmt 0 view .LVU842
 3162 0076 FFF7FEFF 		bl	flash_backup
 3163              	.LVL257:
 328:src/console.c ****     r = no_key;
 3164              		.loc 2 328 5 is_stmt 1 view .LVU843
 3165 007a FFF7FEFF 		bl	reset_shift
 3166              	.LVL258:
 329:src/console.c ****     break;
 3167              		.loc 2 329 5 view .LVU844
 329:src/console.c ****     break;
 3168              		.loc 2 329 7 is_stmt 0 view .LVU845
 3169 007e 524B     		ldr	r3, .L320+8
 3170 0080 93E80300 		ldm	r3, {r0, r1}
 3171 0084 84E80300 		stm	r4, {r0, r1}
 3172              	.LVL259:
 330:src/console.c ****   case ONRCL: // flash_restore()
 3173              		.loc 2 330 5 is_stmt 1 view .LVU846
 3174 0088 ECE7     		b	.L300
 3175              	.LVL260:
 3176              	.L298:
 332:src/console.c ****     reset_shift();
 3177              		.loc 2 332 5 view .LVU847
 3178 008a AE20     		movs	r0, #174
 3179              	.LVL261:
 332:src/console.c ****     reset_shift();
 3180              		.loc 2 332 5 is_stmt 0 view .LVU848
 3181 008c FFF7FEFF 		bl	flash_restore
 3182              	.LVL262:
 333:src/console.c ****     r = no_key;
 3183              		.loc 2 333 5 is_stmt 1 view .LVU849
 3184 0090 FFF7FEFF 		bl	reset_shift
 3185              	.LVL263:
 334:src/console.c ****     break;
 3186              		.loc 2 334 5 view .LVU850
 334:src/console.c ****     break;
 3187              		.loc 2 334 7 is_stmt 0 view .LVU851
 3188 0094 4C4B     		ldr	r3, .L320+8
 3189 0096 93E80300 		ldm	r3, {r0, r1}
 3190 009a 84E80300 		stm	r4, {r0, r1}
 3191              	.LVL264:
 335:src/console.c ****   case WRLIB: // save library file
 3192              		.loc 2 335 5 is_stmt 1 view .LVU852
 3193 009e E1E7     		b	.L300
 3194              	.LVL265:
 3195              	.L297:
 337:src/console.c ****     reset_shift();
 3196              		.loc 2 337 5 view .LVU853
 3197 00a0 0120     		movs	r0, #1
 3198              	.LVL266:
 337:src/console.c ****     reset_shift();
 3199              		.loc 2 337 5 is_stmt 0 view .LVU854
 3200 00a2 FFF7FEFF 		bl	save_lib_file
ARM GAS  /tmp/ccVzm1xY.s 			page 88


 3201              	.LVL267:
 338:src/console.c ****     r = no_key;
 3202              		.loc 2 338 5 is_stmt 1 view .LVU855
 3203 00a6 FFF7FEFF 		bl	reset_shift
 3204              	.LVL268:
 339:src/console.c ****     break;
 3205              		.loc 2 339 5 view .LVU856
 339:src/console.c ****     break;
 3206              		.loc 2 339 7 is_stmt 0 view .LVU857
 3207 00aa 474B     		ldr	r3, .L320+8
 3208 00ac 93E80300 		ldm	r3, {r0, r1}
 3209 00b0 84E80300 		stm	r4, {r0, r1}
 3210              	.LVL269:
 340:src/console.c ****   case LLIB: // load library file
 3211              		.loc 2 340 5 is_stmt 1 view .LVU858
 3212 00b4 D6E7     		b	.L300
 3213              	.LVL270:
 3214              	.L296:
 342:src/console.c ****     reset_shift();
 3215              		.loc 2 342 5 view .LVU859
 3216 00b6 0120     		movs	r0, #1
 3217              	.LVL271:
 342:src/console.c ****     reset_shift();
 3218              		.loc 2 342 5 is_stmt 0 view .LVU860
 3219 00b8 FFF7FEFF 		bl	load_lib_file
 3220              	.LVL272:
 343:src/console.c ****     r = no_key;
 3221              		.loc 2 343 5 is_stmt 1 view .LVU861
 3222 00bc FFF7FEFF 		bl	reset_shift
 3223              	.LVL273:
 344:src/console.c ****     break;
 3224              		.loc 2 344 5 view .LVU862
 344:src/console.c ****     break;
 3225              		.loc 2 344 7 is_stmt 0 view .LVU863
 3226 00c0 414B     		ldr	r3, .L320+8
 3227 00c2 93E80300 		ldm	r3, {r0, r1}
 3228 00c6 84E80300 		stm	r4, {r0, r1}
 3229              	.LVL274:
 345:src/console.c ****   case WRTST: // save state file
 3230              		.loc 2 345 5 is_stmt 1 view .LVU864
 3231 00ca CBE7     		b	.L300
 3232              	.LVL275:
 3233              	.L295:
 347:src/console.c ****     reset_shift();
 3234              		.loc 2 347 5 view .LVU865
 3235 00cc 0120     		movs	r0, #1
 3236              	.LVL276:
 347:src/console.c ****     reset_shift();
 3237              		.loc 2 347 5 is_stmt 0 view .LVU866
 3238 00ce FFF7FEFF 		bl	save_ram_file
 3239              	.LVL277:
 348:src/console.c ****     r = no_key;
 3240              		.loc 2 348 5 is_stmt 1 view .LVU867
 3241 00d2 FFF7FEFF 		bl	reset_shift
 3242              	.LVL278:
 349:src/console.c ****     break;
 3243              		.loc 2 349 5 view .LVU868
ARM GAS  /tmp/ccVzm1xY.s 			page 89


 349:src/console.c ****     break;
 3244              		.loc 2 349 7 is_stmt 0 view .LVU869
 3245 00d6 3C4B     		ldr	r3, .L320+8
 3246 00d8 93E80300 		ldm	r3, {r0, r1}
 3247 00dc 84E80300 		stm	r4, {r0, r1}
 3248              	.LVL279:
 350:src/console.c ****   case LDST:
 3249              		.loc 2 350 5 is_stmt 1 view .LVU870
 3250 00e0 C0E7     		b	.L300
 3251              	.LVL280:
 3252              	.L294:
 352:src/console.c ****     reset_shift();
 3253              		.loc 2 352 5 view .LVU871
 3254 00e2 0120     		movs	r0, #1
 3255              	.LVL281:
 352:src/console.c ****     reset_shift();
 3256              		.loc 2 352 5 is_stmt 0 view .LVU872
 3257 00e4 FFF7FEFF 		bl	load_ram_file
 3258              	.LVL282:
 353:src/console.c ****     r = no_key;
 3259              		.loc 2 353 5 is_stmt 1 view .LVU873
 3260 00e8 FFF7FEFF 		bl	reset_shift
 3261              	.LVL283:
 354:src/console.c ****     break;
 3262              		.loc 2 354 5 view .LVU874
 354:src/console.c ****     break;
 3263              		.loc 2 354 7 is_stmt 0 view .LVU875
 3264 00ec 364B     		ldr	r3, .L320+8
 3265 00ee 93E80300 		ldm	r3, {r0, r1}
 3266 00f2 84E80300 		stm	r4, {r0, r1}
 3267              	.LVL284:
 355:src/console.c ****   case LDPRG:
 3268              		.loc 2 355 5 is_stmt 1 view .LVU876
 3269 00f6 B5E7     		b	.L300
 3270              	.LVL285:
 3271              	.L293:
 357:src/console.c ****     reset_shift();
 3272              		.loc 2 357 5 view .LVU877
 3273 00f8 FFF7FEFF 		bl	load_prog_file
 3274              	.LVL286:
 358:src/console.c ****     r = no_key;
 3275              		.loc 2 358 5 view .LVU878
 3276 00fc FFF7FEFF 		bl	reset_shift
 3277              	.LVL287:
 359:src/console.c ****     break;
 3278              		.loc 2 359 5 view .LVU879
 359:src/console.c ****     break;
 3279              		.loc 2 359 7 is_stmt 0 view .LVU880
 3280 0100 314B     		ldr	r3, .L320+8
 3281 0102 93E80300 		ldm	r3, {r0, r1}
 3282 0106 84E80300 		stm	r4, {r0, r1}
 3283              	.LVL288:
 360:src/console.c ****   case SVPRG:
 3284              		.loc 2 360 5 is_stmt 1 view .LVU881
 3285 010a ABE7     		b	.L300
 3286              	.LVL289:
 3287              	.L292:
ARM GAS  /tmp/ccVzm1xY.s 			page 90


 367:src/console.c ****     reset_shift();
 3288              		.loc 2 367 5 view .LVU882
 3289 010c 2F4B     		ldr	r3, .L320+12
 3290 010e 3048     		ldr	r0, .L320+16
 3291              	.LVL290:
 367:src/console.c ****     reset_shift();
 3292              		.loc 2 367 5 is_stmt 0 view .LVU883
 3293 0110 9847     		blx	r3
 3294              	.LVL291:
 368:src/console.c ****     r = no_key;
 3295              		.loc 2 368 5 is_stmt 1 view .LVU884
 3296 0112 FFF7FEFF 		bl	reset_shift
 3297              	.LVL292:
 369:src/console.c ****     break;
 3298              		.loc 2 369 5 view .LVU885
 369:src/console.c ****     break;
 3299              		.loc 2 369 7 is_stmt 0 view .LVU886
 3300 0116 2C4B     		ldr	r3, .L320+8
 3301 0118 93E80300 		ldm	r3, {r0, r1}
 3302 011c 84E80300 		stm	r4, {r0, r1}
 3303              	.LVL293:
 370:src/console.c ****   case DOTS:
 3304              		.loc 2 370 5 is_stmt 1 view .LVU887
 3305 0120 A0E7     		b	.L300
 3306              	.LVL294:
 3307              	.L291:
 362:src/console.c ****     reset_shift();
 3308              		.loc 2 362 5 view .LVU888
 3309 0122 FFF7FEFF 		bl	save_prog_file
 3310              	.LVL295:
 363:src/console.c ****     r = no_key;
 3311              		.loc 2 363 5 view .LVU889
 3312 0126 FFF7FEFF 		bl	reset_shift
 3313              	.LVL296:
 364:src/console.c ****     break;
 3314              		.loc 2 364 5 view .LVU890
 364:src/console.c ****     break;
 3315              		.loc 2 364 7 is_stmt 0 view .LVU891
 3316 012a 274B     		ldr	r3, .L320+8
 3317 012c 93E80300 		ldm	r3, {r0, r1}
 3318 0130 84E80300 		stm	r4, {r0, r1}
 3319              	.LVL297:
 365:src/console.c ****   case HELP:
 3320              		.loc 2 365 5 is_stmt 1 view .LVU892
 3321 0134 96E7     		b	.L300
 3322              	.LVL298:
 3323              	.L290:
 372:src/console.c ****     reset_shift();
 3324              		.loc 2 372 5 view .LVU893
 3325 0136 FFF7FEFF 		bl	do_all_dots
 3326              	.LVL299:
 373:src/console.c ****     r = no_key;
 3327              		.loc 2 373 5 view .LVU894
 3328 013a FFF7FEFF 		bl	reset_shift
 3329              	.LVL300:
 374:src/console.c ****     break;
 3330              		.loc 2 374 5 view .LVU895
ARM GAS  /tmp/ccVzm1xY.s 			page 91


 374:src/console.c ****     break;
 3331              		.loc 2 374 7 is_stmt 0 view .LVU896
 3332 013e 224B     		ldr	r3, .L320+8
 3333 0140 93E80300 		ldm	r3, {r0, r1}
 3334 0144 84E80300 		stm	r4, {r0, r1}
 3335              	.LVL301:
 375:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 3336              		.loc 2 375 5 is_stmt 1 view .LVU897
 3337 0148 8CE7     		b	.L300
 3338              	.LVL302:
 3339              	.L289:
 377:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 3340              		.loc 2 377 5 view .LVU898
 3341              	.LBB123:
 3342              	.LBI123:
 310:src/console.c ****   struct _ndmap temp;
 3343              		.loc 2 310 6 view .LVU899
 3344              	.LBB124:
 311:src/console.c ****   temp.key_34s = key;
 3345              		.loc 2 311 3 view .LVU900
 312:src/console.c ****   temp.shift = shift;
 3346              		.loc 2 312 3 view .LVU901
 312:src/console.c ****   temp.shift = shift;
 3347              		.loc 2 312 16 is_stmt 0 view .LVU902
 3348 014a 6323     		movs	r3, #99
 313:src/console.c ****   process_keycode_with_shift (temp);
 3349              		.loc 2 313 14 view .LVU903
 3350 014c 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3351              		.loc 2 312 16 view .LVU904
 3352 014e 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3353              		.loc 2 313 3 is_stmt 1 view .LVU905
 313:src/console.c ****   process_keycode_with_shift (temp);
 3354              		.loc 2 313 14 is_stmt 0 view .LVU906
 3355 0152 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3356              		.loc 2 314 3 is_stmt 1 view .LVU907
 3357 0154 02AE     		add	r6, sp, #8
 3358 0156 96E80300 		ldm	r6, {r0, r1}
 3359              	.LVL303:
 314:src/console.c **** }
 3360              		.loc 2 314 3 is_stmt 0 view .LVU908
 3361 015a FFF7FEFF 		bl	process_keycode_with_shift
 3362              	.LVL304:
 314:src/console.c **** }
 3363              		.loc 2 314 3 view .LVU909
 3364              	.LBE124:
 3365              	.LBE123:
 378:src/console.c ****     r = no_key;
 3366              		.loc 2 378 5 is_stmt 1 view .LVU910
 3367              	.LBB125:
 3368              	.LBI125:
 310:src/console.c ****   struct _ndmap temp;
 3369              		.loc 2 310 6 view .LVU911
 3370              	.LBB126:
 311:src/console.c ****   temp.key_34s = key;
ARM GAS  /tmp/ccVzm1xY.s 			page 92


 3371              		.loc 2 311 3 view .LVU912
 312:src/console.c ****   temp.shift = shift;
 3372              		.loc 2 312 3 view .LVU913
 312:src/console.c ****   temp.shift = shift;
 3373              		.loc 2 312 16 is_stmt 0 view .LVU914
 3374 015e 3323     		movs	r3, #51
 3375              	.LVL305:
 3376              	.L318:
 312:src/console.c ****   temp.shift = shift;
 3377              		.loc 2 312 16 view .LVU915
 3378              	.LBE126:
 3379              	.LBE125:
 3380              	.LBB127:
 3381              	.LBB128:
 313:src/console.c ****   process_keycode_with_shift (temp);
 3382              		.loc 2 313 14 view .LVU916
 3383 0160 0397     		str	r7, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 3384              		.loc 2 312 16 view .LVU917
 3385 0162 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3386              		.loc 2 313 3 is_stmt 1 view .LVU918
 314:src/console.c **** }
 3387              		.loc 2 314 3 view .LVU919
 3388 0166 96E80300 		ldm	r6, {r0, r1}
 3389 016a FFF7FEFF 		bl	process_keycode_with_shift
 3390              	.LVL306:
 3391              	.LBE128:
 3392              	.LBE127:
 399:src/console.c ****     }
 3393              		.loc 2 399 7 view .LVU920
 399:src/console.c ****     }
 3394              		.loc 2 399 7 is_stmt 0 view .LVU921
 3395 016e 74E7     		b	.L284
 3396              	.LVL307:
 3397              	.L288:
 382:src/console.c ****     reset_shift();
 3398              		.loc 2 382 5 is_stmt 1 view .LVU922
 3399 0170 FFF7FEFF 		bl	toggle_default_menu
 3400              	.LVL308:
 383:src/console.c ****     r = no_key;
 3401              		.loc 2 383 5 view .LVU923
 3402 0174 FFF7FEFF 		bl	reset_shift
 3403              	.LVL309:
 384:src/console.c ****     break;
 3404              		.loc 2 384 5 view .LVU924
 384:src/console.c ****     break;
 3405              		.loc 2 384 7 is_stmt 0 view .LVU925
 3406 0178 134B     		ldr	r3, .L320+8
 3407 017a 93E80300 		ldm	r3, {r0, r1}
 3408 017e 84E80300 		stm	r4, {r0, r1}
 3409              	.LVL310:
 385:src/console.c ****   case SETUMEN:
 3410              		.loc 2 385 5 is_stmt 1 view .LVU926
 3411 0182 6FE7     		b	.L300
 3412              	.LVL311:
 3413              	.L287:
ARM GAS  /tmp/ccVzm1xY.s 			page 93


 387:src/console.c ****     reset_shift();
 3414              		.loc 2 387 5 view .LVU927
 3415              	.LBB130:
 3416              	.LBI130:
 657:src/menu.c    ****   // find the label 'MNU'
 3417              		.loc 1 657 6 view .LVU928
 3418              	.LBB131:
 659:src/menu.c    ****    build_user_menu_from_program (lbl);
 3419              		.loc 1 659 4 view .LVU929
 660:src/menu.c    **** }
 3420              		.loc 1 660 4 view .LVU930
 3421 0184 1348     		ldr	r0, .L320+20
 3422              	.LVL312:
 660:src/menu.c    **** }
 3423              		.loc 1 660 4 is_stmt 0 view .LVU931
 3424 0186 FFF7FEFF 		bl	build_user_menu_from_program
 3425              	.LVL313:
 3426              	.LBE131:
 3427              	.LBE130:
 388:src/console.c ****     r = no_key;;
 3428              		.loc 2 388 5 is_stmt 1 view .LVU932
 3429 018a FFF7FEFF 		bl	reset_shift
 3430              	.LVL314:
 389:src/console.c ****     break;
 3431              		.loc 2 389 5 view .LVU933
 389:src/console.c ****     break;
 3432              		.loc 2 389 7 is_stmt 0 view .LVU934
 3433 018e 0E4B     		ldr	r3, .L320+8
 3434 0190 93E80300 		ldm	r3, {r0, r1}
 3435 0194 84E80300 		stm	r4, {r0, r1}
 3436              	.LVL315:
 389:src/console.c ****     break;
 3437              		.loc 2 389 16 is_stmt 1 view .LVU935
 390:src/console.c ****   case KCPX:
 3438              		.loc 2 390 5 view .LVU936
 3439 0198 64E7     		b	.L300
 3440              	.LVL316:
 3441              	.L301:
 397:src/console.c ****       do_now (K_RELEASE, 0);
 3442              		.loc 2 397 7 view .LVU937
 3443              	.LBB132:
 3444              	.LBI132:
 310:src/console.c ****   struct _ndmap temp;
 3445              		.loc 2 310 6 view .LVU938
 3446              	.LBB133:
 311:src/console.c ****   temp.key_34s = key;
 3447              		.loc 2 311 3 view .LVU939
 312:src/console.c ****   temp.shift = shift;
 3448              		.loc 2 312 3 view .LVU940
 312:src/console.c ****   temp.shift = shift;
 3449              		.loc 2 312 16 is_stmt 0 view .LVU941
 3450 019a 2D23     		movs	r3, #45
 313:src/console.c ****   process_keycode_with_shift (temp);
 3451              		.loc 2 313 14 view .LVU942
 3452 019c 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3453              		.loc 2 312 16 view .LVU943
ARM GAS  /tmp/ccVzm1xY.s 			page 94


 3454 019e 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3455              		.loc 2 313 3 is_stmt 1 view .LVU944
 313:src/console.c ****   process_keycode_with_shift (temp);
 3456              		.loc 2 313 14 is_stmt 0 view .LVU945
 3457 01a2 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3458              		.loc 2 314 3 is_stmt 1 view .LVU946
 3459 01a4 02AE     		add	r6, sp, #8
 3460 01a6 96E80300 		ldm	r6, {r0, r1}
 3461              	.LVL317:
 314:src/console.c **** }
 3462              		.loc 2 314 3 is_stmt 0 view .LVU947
 3463 01aa FFF7FEFF 		bl	process_keycode_with_shift
 3464              	.LVL318:
 314:src/console.c **** }
 3465              		.loc 2 314 3 view .LVU948
 3466              	.LBE133:
 3467              	.LBE132:
 398:src/console.c ****       r = no_key;
 3468              		.loc 2 398 7 is_stmt 1 view .LVU949
 3469              	.LBB134:
 3470              	.LBI127:
 310:src/console.c ****   struct _ndmap temp;
 3471              		.loc 2 310 6 view .LVU950
 3472              	.LBB129:
 311:src/console.c ****   temp.key_34s = key;
 3473              		.loc 2 311 3 view .LVU951
 312:src/console.c ****   temp.shift = shift;
 3474              		.loc 2 312 3 view .LVU952
 312:src/console.c ****   temp.shift = shift;
 3475              		.loc 2 312 16 is_stmt 0 view .LVU953
 3476 01ae 6323     		movs	r3, #99
 3477 01b0 D6E7     		b	.L318
 3478              	.LVL319:
 3479              	.L319:
 312:src/console.c ****   temp.shift = shift;
 3480              		.loc 2 312 16 view .LVU954
 3481              	.LBE129:
 3482              	.LBE134:
 3483              	.LBB135:
 3484              	.LBB122:
 111:src/menu.c    ****   }
 3485              		.loc 1 111 5 is_stmt 1 view .LVU955
 111:src/menu.c    ****   }
 3486              		.loc 1 111 18 is_stmt 0 view .LVU956
 3487 01b2 0949     		ldr	r1, .L320+24
 3488 01b4 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3489 01b6 1170     		strb	r1, [r2]
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3490              		.loc 1 119 3 is_stmt 1 view .LVU957
 3491              	.L303:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3492              		.loc 1 119 43 view .LVU958
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3493              		.loc 1 119 53 is_stmt 0 view .LVU959
 3494 01b8 084A     		ldr	r2, .L320+28
ARM GAS  /tmp/ccVzm1xY.s 			page 95


 3495 01ba 1370     		strb	r3, [r2]
 3496 01bc 4BE7     		b	.L304
 3497              	.L321:
 3498 01be 00BF     		.align	2
 3499              	.L320:
 3500 01c0 00000000 		.word	main_ram
 3501 01c4 00000000 		.word	.LANCHOR1
 3502 01c8 00000000 		.word	.LANCHOR10
 3503 01cc 49040008 		.word	134218825
 3504 01d0 00000000 		.word	.LC13
 3505 01d4 4DF04E55 		.word	1431236685
 3506 01d8 00000000 		.word	.LANCHOR2
 3507 01dc 00000000 		.word	.LANCHOR3
 3508              	.LBE122:
 3509              	.LBE135:
 3510              		.cfi_endproc
 3511              	.LFE33:
 3513              		.section	.text.program_main,"ax",%progbits
 3514              		.align	1
 3515              		.p2align 2,,3
 3516              		.global	program_main
 3517              		.syntax unified
 3518              		.thumb
 3519              		.thumb_func
 3520              		.fpu fpv4-sp-d16
 3522              	program_main:
 3523              	.LFB34:
 406:src/console.c **** 
 407:src/console.c **** void program_main(){
 3524              		.loc 2 407 20 is_stmt 1 view -0
 3525              		.cfi_startproc
 3526              		@ args = 0, pretend = 0, frame = 224
 3527              		@ frame_needed = 0, uses_anonymous_args = 0
 408:src/console.c ****   int c;
 3528              		.loc 2 408 3 view .LVU961
 409:src/console.c ****   struct _ndmap remapped;
 3529              		.loc 2 409 3 view .LVU962
 410:src/console.c **** 
 411:src/console.c ****   init_mem();
 3530              		.loc 2 411 3 view .LVU963
 407:src/console.c ****   int c;
 3531              		.loc 2 407 20 is_stmt 0 view .LVU964
 3532 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3533              		.cfi_def_cfa_offset 32
 3534              		.cfi_offset 4, -32
 3535              		.cfi_offset 5, -28
 3536              		.cfi_offset 6, -24
 3537              		.cfi_offset 7, -20
 3538              		.cfi_offset 8, -16
 3539              		.cfi_offset 9, -12
 3540              		.cfi_offset 10, -8
 3541              		.cfi_offset 14, -4
 3542 0004 B8B0     		sub	sp, sp, #224
 3543              		.cfi_def_cfa_offset 256
 3544              		.loc 2 411 3 view .LVU965
 3545 0006 FFF7FEFF 		bl	init_mem
 3546              	.LVL320:
ARM GAS  /tmp/ccVzm1xY.s 			page 96


 412:src/console.c ****   init_RegionTab();
 3547              		.loc 2 412 3 is_stmt 1 view .LVU966
 3548 000a FFF7FEFF 		bl	init_RegionTab
 3549              	.LVL321:
 413:src/console.c ****   init_34s();
 3550              		.loc 2 413 3 view .LVU967
 3551 000e FFF7FEFF 		bl	init_34s
 3552              	.LVL322:
 414:src/console.c ****   State2.flags = 1;  
 3553              		.loc 2 414 3 view .LVU968
 3554              		.loc 2 414 16 is_stmt 0 view .LVU969
 3555 0012 B24A     		ldr	r2, .L425
 3556 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3557 0016 43F00103 		orr	r3, r3, #1
 3558 001a 1376     		strb	r3, [r2, #24]
 415:src/console.c ****   check_create_wp34sdir();
 3559              		.loc 2 415 3 is_stmt 1 view .LVU970
 3560 001c FFF7FEFF 		bl	check_create_wp34sdir
 3561              	.LVL323:
 416:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3562              		.loc 2 416 3 view .LVU971
 3563              		.loc 2 416 8 is_stmt 0 view .LVU972
 3564 0020 0020     		movs	r0, #0
 3565 0022 FFF7FEFF 		bl	load_ram_file
 3566              	.LVL324:
 3567              		.loc 2 416 6 view .LVU973
 3568 0026 08B9     		cbnz	r0, .L323
 3569              		.loc 2 416 26 is_stmt 1 discriminator 1 view .LVU974
 3570              		.loc 2 416 34 is_stmt 0 discriminator 1 view .LVU975
 3571 0028 AD4B     		ldr	r3, .L425+4
 3572 002a 1860     		str	r0, [r3]
 3573              	.L323:
 417:src/console.c ****   load_backup_file(0);
 3574              		.loc 2 417 3 is_stmt 1 view .LVU976
 418:src/console.c ****   load_lib_file(0);
 419:src/console.c ****   t20->newln = 0;
 3575              		.loc 2 419 3 is_stmt 0 view .LVU977
 3576 002c AD4C     		ldr	r4, .L425+8
 3577 002e AE4E     		ldr	r6, .L425+12
 420:src/console.c ****   t20->lnfill = 0;
 421:src/console.c ****   t20->fixed = 1;
 422:src/console.c ****   t20->xspc = -2;
 423:src/console.c ****   t20->bgfill = 0;
 424:src/console.c ****   run_menu_item_app = run_menu_item;
 425:src/console.c ****   menu_line_str_app = menu_line_str;
 426:src/console.c **** 
 427:src/console.c ****   display();
 428:src/console.c ****   display_current_menu();
 429:src/console.c ****   lcd_refresh();
 430:src/console.c ****   JustDisplayed = 0;
 431:src/console.c ****   /*
 432:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 433:src/console.c ****     Sleeps peacefully while waiting for a key.
 434:src/console.c ****     Handles (in principle!) turning off and on.
 435:src/console.c ****     =================
 436:src/console.c ****     Main event loop
 437:src/console.c ****     =================
ARM GAS  /tmp/ccVzm1xY.s 			page 97


 438:src/console.c **** 
 439:src/console.c ****     Status flags:
 440:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 441:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 442:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 443:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 444:src/console.c ****   */
 445:src/console.c ****   for(;;) {
 446:src/console.c **** 
 447:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 448:src/console.c ****       {
 449:src/console.c **** 	CLR_ST(STAT_RUNNING);
 450:src/console.c **** 	sys_sleep();
 451:src/console.c ****       }
 452:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 3578              		.loc 2 452 35 view .LVU978
 3579 0030 AE4F     		ldr	r7, .L425+16
 453:src/console.c ****     {
 454:src/console.c ****       CLR_ST(STAT_RUNNING);
 455:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3580              		.loc 2 455 7 view .LVU979
 3581 0032 DFF82C83 		ldr	r8, .L425+132
 417:src/console.c ****   load_lib_file(0);
 3582              		.loc 2 417 3 view .LVU980
 3583 0036 0020     		movs	r0, #0
 3584 0038 FFF7FEFF 		bl	load_backup_file
 3585              	.LVL325:
 418:src/console.c ****   t20->newln = 0;
 3586              		.loc 2 418 3 is_stmt 1 view .LVU981
 3587 003c 0020     		movs	r0, #0
 3588 003e FFF7FEFF 		bl	load_lib_file
 3589              	.LVL326:
 419:src/console.c ****   t20->lnfill = 0;
 3590              		.loc 2 419 3 view .LVU982
 3591 0042 236B     		ldr	r3, [r4, #48]
 420:src/console.c ****   t20->fixed = 1;
 3592              		.loc 2 420 3 view .LVU983
 421:src/console.c ****   t20->xspc = -2;
 3593              		.loc 2 421 3 view .LVU984
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3594              		.loc 2 424 21 is_stmt 0 view .LVU985
 3595 0044 AA4A     		ldr	r2, .L425+20
 421:src/console.c ****   t20->xspc = -2;
 3596              		.loc 2 421 14 view .LVU986
 3597 0046 0121     		movs	r1, #1
 3598 0048 1974     		strb	r1, [r3, #16]
 422:src/console.c ****   t20->bgfill = 0;
 3599              		.loc 2 422 3 is_stmt 1 view .LVU987
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3600              		.loc 2 423 15 is_stmt 0 view .LVU988
 3601 004a 0025     		movs	r5, #0
 422:src/console.c ****   t20->bgfill = 0;
 3602              		.loc 2 422 13 view .LVU989
 3603 004c FE21     		movs	r1, #254
 3604 004e 9973     		strb	r1, [r3, #14]
 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3605              		.loc 2 423 3 is_stmt 1 view .LVU990
ARM GAS  /tmp/ccVzm1xY.s 			page 98


 423:src/console.c ****   run_menu_item_app = run_menu_item;
 3606              		.loc 2 423 15 is_stmt 0 view .LVU991
 3607 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 419:src/console.c ****   t20->lnfill = 0;
 3608              		.loc 2 419 14 view .LVU992
 3609 0052 1D75     		strb	r5, [r3, #20]
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3610              		.loc 2 424 3 is_stmt 1 view .LVU993
 425:src/console.c **** 
 3611              		.loc 2 425 21 is_stmt 0 view .LVU994
 3612 0054 A74B     		ldr	r3, .L425+24
 424:src/console.c ****   menu_line_str_app = menu_line_str;
 3613              		.loc 2 424 21 view .LVU995
 3614 0056 E260     		str	r2, [r4, #12]
 425:src/console.c **** 
 3615              		.loc 2 425 3 is_stmt 1 view .LVU996
 425:src/console.c **** 
 3616              		.loc 2 425 21 is_stmt 0 view .LVU997
 3617 0058 2361     		str	r3, [r4, #16]
 427:src/console.c ****   display_current_menu();
 3618              		.loc 2 427 3 is_stmt 1 view .LVU998
 3619 005a FFF7FEFF 		bl	display
 3620              	.LVL327:
 428:src/console.c ****   lcd_refresh();
 3621              		.loc 2 428 3 view .LVU999
 3622 005e FFF7FEFF 		bl	display_current_menu
 3623              	.LVL328:
 429:src/console.c ****   JustDisplayed = 0;
 3624              		.loc 2 429 3 view .LVU1000
 3625 0062 A54B     		ldr	r3, .L425+28
 3626 0064 9847     		blx	r3
 3627              	.LVL329:
 430:src/console.c ****   /*
 3628              		.loc 2 430 3 view .LVU1001
 430:src/console.c ****   /*
 3629              		.loc 2 430 17 is_stmt 0 view .LVU1002
 3630 0066 A54B     		ldr	r3, .L425+32
 3631 0068 1D60     		str	r5, [r3]
 3632              	.L324:
 445:src/console.c **** 
 3633              		.loc 2 445 3 is_stmt 1 view .LVU1003
 447:src/console.c ****       {
 3634              		.loc 2 447 5 view .LVU1004
 447:src/console.c ****       {
 3635              		.loc 2 447 10 is_stmt 0 view .LVU1005
 3636 006a 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3637              		.loc 2 447 8 view .LVU1006
 3638 006c 9B05     		lsls	r3, r3, #22
 3639 006e 40F1B980 		bpl	.L325
 447:src/console.c ****       {
 3640              		.loc 2 447 30 discriminator 1 view .LVU1007
 3641 0072 2368     		ldr	r3, [r4]
 447:src/console.c ****       {
 3642              		.loc 2 447 27 discriminator 1 view .LVU1008
 3643 0074 5D07     		lsls	r5, r3, #29
 3644 0076 40F1B580 		bpl	.L325
ARM GAS  /tmp/ccVzm1xY.s 			page 99


 449:src/console.c **** 	sys_sleep();
 3645              		.loc 2 449 2 is_stmt 1 view .LVU1009
 3646 007a 2368     		ldr	r3, [r4]
 450:src/console.c ****       }
 3647              		.loc 2 450 2 is_stmt 0 view .LVU1010
 3648 007c A04A     		ldr	r2, .L425+36
 449:src/console.c **** 	sys_sleep();
 3649              		.loc 2 449 2 view .LVU1011
 3650 007e 23F00203 		bic	r3, r3, #2
 3651 0082 2360     		str	r3, [r4]
 450:src/console.c ****       }
 3652              		.loc 2 450 2 is_stmt 1 view .LVU1012
 3653 0084 9047     		blx	r2
 3654              	.LVL330:
 3655              	.L326:
 456:src/console.c ****       sys_sleep();
 457:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 458:src/console.c **** 	key_push (K_HEARTBEAT);
 459:src/console.c **** 	if (Pause > 0) Pause--;
 460:src/console.c ****       }
 461:src/console.c ****       sys_timer_disable(0); // stop timer
 462:src/console.c ****     }
 463:src/console.c ****     
 464:src/console.c ****     // Wakeup in off state or going to sleep
 465:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3656              		.loc 2 465 5 view .LVU1013
 3657              		.loc 2 465 9 is_stmt 0 view .LVU1014
 3658 0086 2368     		ldr	r3, [r4]
 3659              		.loc 2 465 8 view .LVU1015
 3660 0088 9805     		lsls	r0, r3, #22
 3661 008a 00F1D280 		bmi	.L332
 3662              	.L418:
 3663              		.loc 2 465 29 discriminator 1 view .LVU1016
 3664 008e 2368     		ldr	r3, [r4]
 3665              		.loc 2 465 26 discriminator 1 view .LVU1017
 3666 0090 5907     		lsls	r1, r3, #29
 3667 0092 00F1CE80 		bmi	.L332
 466:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 467:src/console.c ****         // Going to off mode
 468:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 469:src/console.c ****         draw_power_off_image(1);
 470:src/console.c **** 
 471:src/console.c ****         LCD_power_off(0);
 472:src/console.c ****         SET_ST(STAT_SUSPENDED);
 473:src/console.c ****         SET_ST(STAT_OFF);
 474:src/console.c ****       }
 475:src/console.c ****       // Already in OFF -> just continue to sleep above
 476:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 477:src/console.c ****       // thus reaching the sleep()
 478:src/console.c ****     }
 479:src/console.c **** 
 480:src/console.c ****     // Well, we are woken-up
 481:src/console.c ****     SET_ST(STAT_RUNNING);
 3668              		.loc 2 481 5 is_stmt 1 view .LVU1018
 3669 0096 2368     		ldr	r3, [r4]
 3670 0098 43F00203 		orr	r3, r3, #2
 3671 009c 2360     		str	r3, [r4]
ARM GAS  /tmp/ccVzm1xY.s 			page 100


 482:src/console.c **** 
 483:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 484:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3672              		.loc 2 484 5 view .LVU1019
 3673 009e 2368     		ldr	r3, [r4]
 3674 00a0 23F00403 		bic	r3, r3, #4
 3675 00a4 2360     		str	r3, [r4]
 485:src/console.c **** 
 486:src/console.c ****     // Get up from OFF state
 487:src/console.c ****     if ( ST(STAT_OFF) ) {
 3676              		.loc 2 487 5 view .LVU1020
 3677              		.loc 2 487 10 is_stmt 0 view .LVU1021
 3678 00a6 2368     		ldr	r3, [r4]
 3679              		.loc 2 487 8 view .LVU1022
 3680 00a8 DA06     		lsls	r2, r3, #27
 3681 00aa 0ED5     		bpl	.L337
 488:src/console.c ****       LCD_power_on();
 3682              		.loc 2 488 7 is_stmt 1 view .LVU1023
 3683 00ac 954B     		ldr	r3, .L425+40
 3684 00ae 9847     		blx	r3
 3685              	.LVL331:
 489:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3686              		.loc 2 489 7 view .LVU1024
 3687 00b0 954B     		ldr	r3, .L425+44
 3688 00b2 9847     		blx	r3
 3689              	.LVL332:
 490:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3690              		.loc 2 490 7 view .LVU1025
 3691 00b4 954B     		ldr	r3, .L425+48
 3692 00b6 9847     		blx	r3
 3693              	.LVL333:
 491:src/console.c **** 
 492:src/console.c ****       CLR_ST(STAT_OFF);
 3694              		.loc 2 492 7 view .LVU1026
 3695 00b8 2368     		ldr	r3, [r4]
 493:src/console.c **** 
 494:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3696              		.loc 2 494 13 is_stmt 0 view .LVU1027
 3697 00ba 954A     		ldr	r2, .L425+52
 492:src/console.c **** 
 3698              		.loc 2 492 7 view .LVU1028
 3699 00bc 23F01003 		bic	r3, r3, #16
 3700 00c0 2360     		str	r3, [r4]
 3701              		.loc 2 494 7 is_stmt 1 view .LVU1029
 3702              		.loc 2 494 13 is_stmt 0 view .LVU1030
 3703 00c2 9047     		blx	r2
 3704              	.LVL334:
 3705              		.loc 2 494 10 view .LVU1031
 3706 00c4 08B9     		cbnz	r0, .L337
 495:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3707              		.loc 2 495 9 is_stmt 1 view .LVU1032
 3708 00c6 934B     		ldr	r3, .L425+56
 3709 00c8 9847     		blx	r3
 3710              	.LVL335:
 3711              	.L337:
 496:src/console.c ****     }
 497:src/console.c **** 
ARM GAS  /tmp/ccVzm1xY.s 			page 101


 498:src/console.c ****     // Key is ready -> clear auto off timer
 499:src/console.c ****     //    if ( !key_empty() )
 500:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 501:src/console.c ****     // Fetch the key
 502:src/console.c ****     //  < 0 -> No key event
 503:src/console.c ****     //  > 0 -> Key pressed
 504:src/console.c ****     // == 0 -> Key released
 505:src/console.c ****     c = key_pop();
 3712              		.loc 2 505 5 view .LVU1033
 3713              		.loc 2 505 9 is_stmt 0 view .LVU1034
 3714 00ca 934B     		ldr	r3, .L425+60
 3715 00cc 9847     		blx	r3
 3716              	.LVL336:
 506:src/console.c **** #ifdef INCLUDE_STOPWATCH
 507:src/console.c ****     if ( KeyCallback != NULL ) {
 3717              		.loc 2 507 22 view .LVU1035
 3718 00ce 3368     		ldr	r3, [r6]
 505:src/console.c **** #ifdef INCLUDE_STOPWATCH
 3719              		.loc 2 505 9 view .LVU1036
 3720 00d0 0546     		mov	r5, r0
 3721              	.LVL337:
 3722              		.loc 2 507 5 is_stmt 1 view .LVU1037
 3723              		.loc 2 507 8 is_stmt 0 view .LVU1038
 3724 00d2 002B     		cmp	r3, #0
 3725 00d4 00F04681 		beq	.L339
 508:src/console.c ****       c = (*KeyCallback)( c );
 3726              		.loc 2 508 7 is_stmt 1 view .LVU1039
 3727              		.loc 2 508 12 is_stmt 0 view .LVU1040
 3728 00d8 9847     		blx	r3
 3729              	.LVL338:
 3730              		.loc 2 508 12 view .LVU1041
 3731 00da 0546     		mov	r5, r0
 3732              	.LVL339:
 3733              	.L340:
 509:src/console.c ****     }
 510:src/console.c ****     else if ( StopWatchRunning && ( Ticker % STOPWATCH_BLINK ) == 0 ) {
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 512:src/console.c ****       finish_LEQ();
 513:src/console.c ****     }
 514:src/console.c **** #endif
 515:src/console.c ****     if ( (c != K_HEARTBEAT) && (c >= 0) ) {
 3734              		.loc 2 515 5 is_stmt 1 view .LVU1042
 3735              		.loc 2 515 8 is_stmt 0 view .LVU1043
 3736 00dc 622D     		cmp	r5, #98
 3737 00de 00F0BF80 		beq	.L341
 3738              		.loc 2 515 29 discriminator 1 view .LVU1044
 3739 00e2 002D     		cmp	r5, #0
 3740 00e4 C1DB     		blt	.L324
 516:src/console.c ****       reset_auto_off();
 3741              		.loc 2 516 7 is_stmt 1 view .LVU1045
 3742 00e6 8D4B     		ldr	r3, .L425+64
 3743 00e8 9847     		blx	r3
 3744              	.LVL340:
 517:src/console.c ****       //      start_key_timer();
 518:src/console.c ****     }
 519:src/console.c ****     if (c >= 0) {
 3745              		.loc 2 519 5 view .LVU1046
ARM GAS  /tmp/ccVzm1xY.s 			page 102


 520:src/console.c ****       remapped = remap(c);
 3746              		.loc 2 520 7 view .LVU1047
 3747              	.LBB143:
 3748              	.LBI143:
  56:src/console.c **** 
 3749              		.loc 2 56 22 view .LVU1048
 3750              	.LBB144:
  58:src/console.c **** 
 3751              		.loc 2 58 3 view .LVU1049
 3752              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3753              		.loc 3 1 1 view .LVU1050
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
ARM GAS  /tmp/ccVzm1xY.s 			page 103


  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3754              		.loc 3 59 3 view .LVU1051
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX}, // Complex
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     //    {K_MULTI, 1}, // lastX 
  78:src/keytran.c ****     {K_OP, RARG( RARG_RCL, regL_idx )}, // lastX 
  79:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
  80:src/keytran.c ****     {K_SETMENU,  M_Disp}, // DISP menu
  81:src/keytran.c ****     {K_SETMENU,  M_Clear}, // CLR menu
  82:src/keytran.c ****     // Fourth row of DM42 18--22
  83:src/keytran.c ****     {K40, 0}, // up-arrow
  84:src/keytran.c ****     {K52, 1}, // SLV
  85:src/keytran.c ****     {K_SETMENU,  M_Solve}, // Integral/sum/product menu
  86:src/keytran.c ****     {K44, 3}, // MATRIX cat
  87:src/keytran.c ****     {K_SETMENU,  M_Stats}, // STATS menu
  88:src/keytran.c ****     // Fifth row of DM42 23--27
  89:src/keytran.c ****     {K50, 0}, // down-arrow
  90:src/keytran.c ****     {K_SETMENU,  M_Base}, // BASE menu 
  91:src/keytran.c ****     {K04, 3}, // CONV cat
  92:src/keytran.c ****     {K_SETMENU,  M_Flags}, // FLAGS menu
  93:src/keytran.c ****     {K_SETMENU,  M_Prob}, // PROBS menu
  94:src/keytran.c ****     // Sixth row of DM42 28--32
  95:src/keytran.c ****     {K_G, 0}, // gshift
  96:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  97:src/keytran.c ****     {K_SETMENU,  M_User}, // select user menu
  98:src/keytran.c ****     {K52, 3}, // P.FCN cat
  99:src/keytran.c ****     {K_SETMENU, M_Print}, // Print menu
 100:src/keytran.c ****     // Last row of DM42 33--37
 101:src/keytran.c ****     {K60, 3}, // off
 102:src/keytran.c ****     {K_SETMENU,  M_Setup1}, // SETUP menu
ARM GAS  /tmp/ccVzm1xY.s 			page 104


 103:src/keytran.c ****     {K21, 1}, // <(
 104:src/keytran.c ****     {K63, 3}, // P/R
 105:src/keytran.c ****     {K10, 3}, // CAT cat
 106:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_NOP, 0},
 114:src/keytran.c ****     {K_SETMENU,  M_Last}, // last menu
 115:src/keytran.c ****     {K_SETMENU,  M_Misc}, // MISC menu!
 116:src/keytran.c ****   };
 117:src/keytran.c **** 
 118:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3755              		.loc 3 118 3 view .LVU1052
 119:src/keytran.c ****     {K_RELEASE, -1},
 120:src/keytran.c ****     // Top row of DM42 1--6
 121:src/keytran.c ****     {K64, 3}, // sig+
 122:src/keytran.c ****     {K34, 1}, // 1/x
 123:src/keytran.c ****     {K44, 1}, // sqrt x
 124:src/keytran.c ****     {K31, 2}, // 10^x
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     {K_NOP, 0}, // no function
 127:src/keytran.c ****     // Next row of DM42 7--12
 128:src/keytran.c ****     {K_NOP, 0}, // no function
 129:src/keytran.c ****     {K11, 3}, // View
 130:src/keytran.c ****     {K12, 3}, // Rup
 131:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 133:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 134:src/keytran.c ****     // Third row of DM42 13--17
 135:src/keytran.c ****     {K20, 2}, // fill
 136:src/keytran.c ****     {K_SETMENU,  M_Swap}, // X<>Y menu
 137:src/keytran.c ****     {K05, 3}, // MODE cat
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     {K_NOP, 0}, // no function
 140:src/keytran.c ****     // Fourth row of DM42 18--22
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K_NOP, 0}, // no function
 144:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 145:src/keytran.c ****     {K42, 3}, // STAT catalogue
 146:src/keytran.c ****     // Fifth row of DM42 23--27
 147:src/keytran.c ****     {K_NOP, 0}, // no function 
 148:src/keytran.c ****     {K_NOP, 0}, // no function
 149:src/keytran.c ****     {K20, 3}, // CONST catalogue
 150:src/keytran.c ****     {K51, 3}, // TEST catalogue
 151:src/keytran.c ****     {K41, 3}, // PROB catalogue
 152:src/keytran.c ****     // Sixth row of DM42 28--32
 153:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     //    {K_MULTI, SETUMEN}, // Set up user menu
 156:src/keytran.c ****     {K_SETMENU, M_Usermenu}, //User menu create
 157:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 158:src/keytran.c ****     {K_NOP, 0}, // no function
ARM GAS  /tmp/ccVzm1xY.s 			page 105


 159:src/keytran.c ****     // Last row of DM42 33--37
 160:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 161:src/keytran.c ****     {K_SETMENU,  M_Setup2}, // SETUP2 menu
 162:src/keytran.c ****     {K_NOP, 0}, // no function
 163:src/keytran.c ****     {K_SETMENU,  M_Program}, // P.FCN menu
 164:src/keytran.c ****     {K50, 3}, // Status
 165:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****     {K_NOP, 0},
 174:src/keytran.c ****     {K_NOP, 0},
 175:src/keytran.c ****   };
 176:src/keytran.c **** 
 177:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3756              		.loc 3 177 1 view .LVU1053
 178:src/keytran.c ****     {K_RELEASE, -1},
 179:src/keytran.c ****     // Top row of DM42 1--6
 180:src/keytran.c ****     {K00, -1},
 181:src/keytran.c ****     {K01, -1},
 182:src/keytran.c ****     {K02, -1},
 183:src/keytran.c ****     {K03, -1},
 184:src/keytran.c ****     {K04, -1},
 185:src/keytran.c ****     {K05, -1},
 186:src/keytran.c ****     // Next row of DM42 7--12
 187:src/keytran.c ****     {K10, -1},
 188:src/keytran.c ****     {K11, -1},
 189:src/keytran.c ****     {K12, -1},
 190:src/keytran.c ****     {K13, -1},
 191:src/keytran.c ****     {K14, -1},
 192:src/keytran.c ****     {K15, -1},
 193:src/keytran.c ****     // Third row of DM42 13--17
 194:src/keytran.c ****     {K20, -1},
 195:src/keytran.c ****     {K21, -1},
 196:src/keytran.c ****     {K22, -1},
 197:src/keytran.c ****     {K23, -1},
 198:src/keytran.c ****     {K24, -1},
 199:src/keytran.c ****     // Fourth row of DM42 18--22
 200:src/keytran.c ****     {K30, -1},
 201:src/keytran.c ****     {K31, -1},
 202:src/keytran.c ****     {K32, -1},
 203:src/keytran.c ****     {K33, -1},
 204:src/keytran.c ****     {K34, -1},
 205:src/keytran.c ****     // Fifth row of DM42 23--27
 206:src/keytran.c ****     {K40, -1},
 207:src/keytran.c ****     {K41, -1},
 208:src/keytran.c ****     {K42, -1},
 209:src/keytran.c ****     {K43, -1},
 210:src/keytran.c ****     {K44, -1},
 211:src/keytran.c ****     // Sixth row of DM42 28--32
 212:src/keytran.c ****     {K50, -1},
 213:src/keytran.c ****     {K51, -1},
 214:src/keytran.c ****     {K52, -1},
ARM GAS  /tmp/ccVzm1xY.s 			page 106


 215:src/keytran.c ****     {K53, -1},
 216:src/keytran.c ****     {K54, -1},
 217:src/keytran.c ****     // Last row of DM42 33--37
 218:src/keytran.c ****     {K60, -1},
 219:src/keytran.c ****     {K61, -1},
 220:src/keytran.c ****     {K62, -1},
 221:src/keytran.c ****     {K63, -1},
 222:src/keytran.c ****     {K64, -1},
 223:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_NOP, -1},
 227:src/keytran.c ****     {K_NOP, -1},
 228:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 229:src/keytran.c ****     {K_CMPLX, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c ****     {K_NOP, -1},
 232:src/keytran.c ****     {K_NOP, -1},
 233:src/keytran.c **** };
 234:src/keytran.c **** 
 235:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3757              		.loc 3 235 1 view .LVU1054
  62:src/console.c **** 
 3758              		.loc 2 62 3 view .LVU1055
  64:src/console.c **** 
 3759              		.loc 2 64 3 view .LVU1056
  64:src/console.c **** 
 3760              		.loc 2 64 6 is_stmt 0 view .LVU1057
 3761 00ea 632D     		cmp	r5, #99
 3762 00ec 00F08A81 		beq	.L406
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3763              		.loc 2 66 3 is_stmt 1 view .LVU1058
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3764              		.loc 2 66 6 is_stmt 0 view .LVU1059
 3765 00f0 2C2D     		cmp	r5, #44
 3766 00f2 00F05881 		beq	.L344
  71:src/console.c ****     return mapping_running[c];
 3767              		.loc 2 71 3 is_stmt 1 view .LVU1060
  71:src/console.c ****     return mapping_running[c];
 3768              		.loc 2 71 15 is_stmt 0 view .LVU1061
 3769 00f6 8A4A     		ldr	r2, .L425+68
 3770 00f8 8A4B     		ldr	r3, .L425+72
 3771 00fa 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3772 00fe 1968     		ldr	r1, [r3]
  71:src/console.c ****     return mapping_running[c];
 3773              		.loc 2 71 6 view .LVU1062
 3774 0100 59EA0109 		orrs	r9, r9, r1
 3775 0104 40F07181 		bne	.L407
  75:src/console.c ****   
 3776              		.loc 2 75 3 is_stmt 1 view .LVU1063
  75:src/console.c ****   
 3777              		.loc 2 75 22 is_stmt 0 view .LVU1064
 3778 0108 04A8     		add	r0, sp, #16
 3779 010a FFF7FEFF 		bl	get_current_menu_ref
 3780              	.LVL341:
  77:src/console.c ****   case KEY_F1:
 3781              		.loc 2 77 3 is_stmt 1 view .LVU1065
ARM GAS  /tmp/ccVzm1xY.s 			page 107


 3782 010e A5F12603 		sub	r3, r5, #38
 3783 0112 052B     		cmp	r3, #5
 3784 0114 00F28081 		bhi	.L346
 3785 0118 DFE813F0 		tbh	[pc, r3, lsl #1]
 3786              	.L348:
 3787 011c 8601     		.2byte	(.L353-.L348)/2
 3788 011e 0B00     		.2byte	(.L352-.L348)/2
 3789 0120 1500     		.2byte	(.L351-.L348)/2
 3790 0122 1F00     		.2byte	(.L350-.L348)/2
 3791 0124 2900     		.2byte	(.L349-.L348)/2
 3792 0126 3300     		.2byte	(.L347-.L348)/2
 3793              		.p2align 1
 3794              	.L354:
  80:src/console.c ****   case KEY_F2:
 3795              		.loc 2 80 5 view .LVU1066
  80:src/console.c ****   case KEY_F2:
 3796              		.loc 2 80 9 is_stmt 0 view .LVU1067
 3797 0128 FFF7FEFF 		bl	cur_shift
 3798              	.LVL342:
  80:src/console.c ****   case KEY_F2:
 3799              		.loc 2 80 8 view .LVU1068
 3800 012c 0128     		cmp	r0, #1
 3801 012e 00F01882 		beq	.L408
 3802              	.L352:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3803              		.loc 2 82 5 is_stmt 1 view .LVU1069
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3804              		.loc 2 82 9 is_stmt 0 view .LVU1070
 3805 0132 FFF7FEFF 		bl	cur_shift
 3806              	.LVL343:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3807              		.loc 2 82 8 view .LVU1071
 3808 0136 0028     		cmp	r0, #0
 3809 0138 00F0A381 		beq	.L409
  83:src/console.c ****   case KEY_F3:
 3810              		.loc 2 83 5 is_stmt 1 view .LVU1072
  83:src/console.c ****   case KEY_F3:
 3811              		.loc 2 83 9 is_stmt 0 view .LVU1073
 3812 013c FFF7FEFF 		bl	cur_shift
 3813              	.LVL344:
  83:src/console.c ****   case KEY_F3:
 3814              		.loc 2 83 8 view .LVU1074
 3815 0140 0128     		cmp	r0, #1
 3816 0142 00F0E881 		beq	.L410
 3817              	.L351:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3818              		.loc 2 85 5 is_stmt 1 view .LVU1075
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3819              		.loc 2 85 9 is_stmt 0 view .LVU1076
 3820 0146 FFF7FEFF 		bl	cur_shift
 3821              	.LVL345:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3822              		.loc 2 85 8 view .LVU1077
 3823 014a 0028     		cmp	r0, #0
 3824 014c 00F08F81 		beq	.L411
  86:src/console.c ****   case KEY_F4:
 3825              		.loc 2 86 5 is_stmt 1 view .LVU1078
ARM GAS  /tmp/ccVzm1xY.s 			page 108


  86:src/console.c ****   case KEY_F4:
 3826              		.loc 2 86 9 is_stmt 0 view .LVU1079
 3827 0150 FFF7FEFF 		bl	cur_shift
 3828              	.LVL346:
  86:src/console.c ****   case KEY_F4:
 3829              		.loc 2 86 8 view .LVU1080
 3830 0154 0128     		cmp	r0, #1
 3831 0156 00F0D481 		beq	.L412
 3832              	.L350:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3833              		.loc 2 88 5 is_stmt 1 view .LVU1081
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3834              		.loc 2 88 9 is_stmt 0 view .LVU1082
 3835 015a FFF7FEFF 		bl	cur_shift
 3836              	.LVL347:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3837              		.loc 2 88 8 view .LVU1083
 3838 015e 0028     		cmp	r0, #0
 3839 0160 00F07B81 		beq	.L413
  89:src/console.c ****   case KEY_F5:
 3840              		.loc 2 89 5 is_stmt 1 view .LVU1084
  89:src/console.c ****   case KEY_F5:
 3841              		.loc 2 89 9 is_stmt 0 view .LVU1085
 3842 0164 FFF7FEFF 		bl	cur_shift
 3843              	.LVL348:
  89:src/console.c ****   case KEY_F5:
 3844              		.loc 2 89 8 view .LVU1086
 3845 0168 0128     		cmp	r0, #1
 3846 016a 00F0B681 		beq	.L414
 3847              	.L349:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3848              		.loc 2 91 5 is_stmt 1 view .LVU1087
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3849              		.loc 2 91 9 is_stmt 0 view .LVU1088
 3850 016e FFF7FEFF 		bl	cur_shift
 3851              	.LVL349:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3852              		.loc 2 91 8 view .LVU1089
 3853 0172 0028     		cmp	r0, #0
 3854 0174 00F06781 		beq	.L415
  92:src/console.c ****   case KEY_F6:
 3855              		.loc 2 92 5 is_stmt 1 view .LVU1090
  92:src/console.c ****   case KEY_F6:
 3856              		.loc 2 92 9 is_stmt 0 view .LVU1091
 3857 0178 FFF7FEFF 		bl	cur_shift
 3858              	.LVL350:
  92:src/console.c ****   case KEY_F6:
 3859              		.loc 2 92 8 view .LVU1092
 3860 017c 0128     		cmp	r0, #1
 3861 017e 00F0B681 		beq	.L416
 3862              	.L347:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3863              		.loc 2 94 5 is_stmt 1 view .LVU1093
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3864              		.loc 2 94 9 is_stmt 0 view .LVU1094
 3865 0182 FFF7FEFF 		bl	cur_shift
 3866              	.LVL351:
ARM GAS  /tmp/ccVzm1xY.s 			page 109


  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3867              		.loc 2 94 8 view .LVU1095
 3868 0186 0028     		cmp	r0, #0
 3869 0188 40F04281 		bne	.L359
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3870              		.loc 2 94 33 is_stmt 1 view .LVU1096
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3871              		.loc 2 94 51 is_stmt 0 view .LVU1097
 3872 018c DDE93001 		ldrd	r0, r1, [sp, #192]
 3873 0190 9DF8C050 		ldrb	r5, [sp, #192]	@ zero_extendqisi2
 3874              	.LVL352:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3875              		.loc 2 94 51 view .LVU1098
 3876 0194 0DF1080A 		add	r10, sp, #8
 3877              	.LBE144:
 3878              	.LBE143:
 521:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3879              		.loc 2 521 10 view .LVU1099
 3880 0198 2F2D     		cmp	r5, #47
 3881              	.LBB153:
 3882              	.LBB146:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3883              		.loc 2 94 51 view .LVU1100
 3884 019a 8AE80300 		stm	r10, {r0, r1}
 3885 019e 8946     		mov	r9, r1
 3886              	.LVL353:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3887              		.loc 2 94 51 view .LVU1101
 3888              	.LBE146:
 3889              	.LBE153:
 3890              		.loc 2 521 7 is_stmt 1 view .LVU1102
 3891              		.loc 2 521 10 is_stmt 0 view .LVU1103
 3892 01a0 69D1     		bne	.L370
 3893              	.LVL354:
 3894              	.L419:
 522:src/console.c **** 	set_menu ( remapped.shift );
 3895              		.loc 2 522 2 is_stmt 1 view .LVU1104
 3896              	.LBB154:
 3897              	.LBB155:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3898              		.loc 1 109 13 is_stmt 0 view .LVU1105
 3899 01a2 614A     		ldr	r2, .L425+76
 3900 01a4 92F90030 		ldrsb	r3, [r2]
 3901              	.LBE155:
 3902              	.LBE154:
 3903              		.loc 2 522 2 view .LVU1106
 3904 01a8 4FFA89F1 		sxtb	r1, r9
 3905              	.LVL355:
 3906              	.LBB158:
 3907              	.LBI154:
 108:src/menu.c    ****   menu_name m = current_menu;
 3908              		.loc 1 108 6 is_stmt 1 view .LVU1107
 3909              	.LBB156:
 109:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3910              		.loc 1 109 3 view .LVU1108
 110:src/menu.c    ****     current_menu = default_menu;
 3911              		.loc 1 110 3 view .LVU1109
ARM GAS  /tmp/ccVzm1xY.s 			page 110


 110:src/menu.c    ****     current_menu = default_menu;
 3912              		.loc 1 110 6 is_stmt 0 view .LVU1110
 3913 01ac 9942     		cmp	r1, r3
 3914 01ae 00F02B81 		beq	.L417
 113:src/menu.c    ****     current_menu = last_menu;
 3915              		.loc 1 113 8 is_stmt 1 view .LVU1111
 113:src/menu.c    ****     current_menu = last_menu;
 3916              		.loc 1 113 11 is_stmt 0 view .LVU1112
 3917 01b2 481C     		adds	r0, r1, #1
 114:src/menu.c    ****   }
 3918              		.loc 1 114 5 is_stmt 1 view .LVU1113
 114:src/menu.c    ****   }
 3919              		.loc 1 114 18 is_stmt 0 view .LVU1114
 3920 01b4 04BF     		itt	eq
 3921 01b6 5D49     		ldreq	r1, .L425+80
 3922              	.LVL356:
 114:src/menu.c    ****   }
 3923              		.loc 1 114 18 view .LVU1115
 3924 01b8 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 117:src/menu.c    ****   }
 3925              		.loc 1 117 5 is_stmt 1 view .LVU1116
 117:src/menu.c    ****   }
 3926              		.loc 1 117 18 is_stmt 0 view .LVU1117
 3927 01ba 1170     		strb	r1, [r2]
 3928              	.LVL357:
 3929              	.L372:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3930              		.loc 1 119 3 is_stmt 1 view .LVU1118
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3931              		.loc 1 119 6 is_stmt 0 view .LVU1119
 3932 01bc 092B     		cmp	r3, #9
 3933 01be 03D0     		beq	.L374
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3934              		.loc 1 119 23 view .LVU1120
 3935 01c0 102B     		cmp	r3, #16
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3936              		.loc 1 119 43 is_stmt 1 view .LVU1121
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3937              		.loc 1 119 53 is_stmt 0 view .LVU1122
 3938 01c2 1CBF     		itt	ne
 3939 01c4 594A     		ldrne	r2, .L425+80
 3940 01c6 1370     		strbne	r3, [r2]
 3941              	.L374:
 3942              	.LVL358:
 119:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3943              		.loc 1 119 53 view .LVU1123
 3944              	.LBE156:
 3945              	.LBE158:
 523:src/console.c **** 	display_current_menu ();
 3946              		.loc 2 523 2 is_stmt 1 view .LVU1124
 3947 01c8 FFF7FEFF 		bl	display_current_menu
 3948              	.LVL359:
 524:src/console.c **** 	reset_shift();
 3949              		.loc 2 524 2 view .LVU1125
 3950 01cc FFF7FEFF 		bl	reset_shift
 3951              	.LVL360:
 525:src/console.c **** 	remapped = no_key;
ARM GAS  /tmp/ccVzm1xY.s 			page 111


 3952              		.loc 2 525 2 view .LVU1126
 3953              		.loc 2 525 11 is_stmt 0 view .LVU1127
 3954 01d0 574B     		ldr	r3, .L425+84
 3955 01d2 93E80300 		ldm	r3, {r0, r1}
 3956 01d6 0DF1080A 		add	r10, sp, #8
 3957 01da 8AE80300 		stm	r10, {r0, r1}
 3958 01de 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3959              	.LVL361:
 3960              		.loc 2 525 11 view .LVU1128
 3961 01e0 8946     		mov	r9, r1
 3962              	.LVL362:
 3963              		.loc 2 525 11 view .LVU1129
 3964 01e2 48E0     		b	.L370
 3965              	.LVL363:
 3966              	.L325:
 452:src/console.c ****     {
 3967              		.loc 2 452 10 is_stmt 1 view .LVU1130
 452:src/console.c ****     {
 3968              		.loc 2 452 15 is_stmt 0 view .LVU1131
 3969 01e4 2568     		ldr	r5, [r4]
 452:src/console.c ****     {
 3970              		.loc 2 452 13 view .LVU1132
 3971 01e6 15F40075 		ands	r5, r5, #512
 3972 01ea 7FF44CAF 		bne	.L326
 452:src/console.c ****     {
 3973              		.loc 2 452 35 discriminator 1 view .LVU1133
 3974 01ee B847     		blx	r7
 3975              	.LVL364:
 452:src/console.c ****     {
 3976              		.loc 2 452 32 discriminator 1 view .LVU1134
 3977 01f0 0028     		cmp	r0, #0
 3978 01f2 3FF448AF 		beq	.L326
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3979              		.loc 2 454 7 is_stmt 1 view .LVU1135
 3980 01f6 2368     		ldr	r3, [r4]
 3981 01f8 23F00203 		bic	r3, r3, #2
 455:src/console.c ****       sys_sleep();
 3982              		.loc 2 455 7 is_stmt 0 view .LVU1136
 3983 01fc 2846     		mov	r0, r5
 3984 01fe 6421     		movs	r1, #100
 454:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3985              		.loc 2 454 7 view .LVU1137
 3986 0200 2360     		str	r3, [r4]
 455:src/console.c ****       sys_sleep();
 3987              		.loc 2 455 7 is_stmt 1 view .LVU1138
 3988 0202 C047     		blx	r8
 3989              	.LVL365:
 456:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 3990              		.loc 2 456 7 view .LVU1139
 3991 0204 3E4B     		ldr	r3, .L425+36
 3992 0206 9847     		blx	r3
 3993              	.LVL366:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 3994              		.loc 2 457 7 view .LVU1140
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 3995              		.loc 2 457 11 is_stmt 0 view .LVU1141
 3996 0208 4A4B     		ldr	r3, .L425+88
ARM GAS  /tmp/ccVzm1xY.s 			page 112


 3997 020a 2846     		mov	r0, r5
 3998 020c 9847     		blx	r3
 3999              	.LVL367:
 457:src/console.c **** 	key_push (K_HEARTBEAT);
 4000              		.loc 2 457 10 view .LVU1142
 4001 020e 48B1     		cbz	r0, .L330
 458:src/console.c **** 	if (Pause > 0) Pause--;
 4002              		.loc 2 458 2 is_stmt 1 view .LVU1143
 4003 0210 494B     		ldr	r3, .L425+92
 4004 0212 6220     		movs	r0, #98
 4005 0214 9847     		blx	r3
 4006              	.LVL368:
 459:src/console.c ****       }
 4007              		.loc 2 459 2 view .LVU1144
 459:src/console.c ****       }
 4008              		.loc 2 459 12 is_stmt 0 view .LVU1145
 4009 0216 424B     		ldr	r3, .L425+68
 4010 0218 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 459:src/console.c ****       }
 4011              		.loc 2 459 5 view .LVU1146
 4012 021a 1AB1     		cbz	r2, .L330
 459:src/console.c ****       }
 4013              		.loc 2 459 17 is_stmt 1 discriminator 1 view .LVU1147
 459:src/console.c ****       }
 4014              		.loc 2 459 22 is_stmt 0 discriminator 1 view .LVU1148
 4015 021c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4016 021e 013A     		subs	r2, r2, #1
 4017 0220 D2B2     		uxtb	r2, r2
 4018 0222 1A70     		strb	r2, [r3]
 4019              	.L330:
 461:src/console.c ****     }
 4020              		.loc 2 461 7 is_stmt 1 view .LVU1149
 4021 0224 454B     		ldr	r3, .L425+96
 4022 0226 0020     		movs	r0, #0
 4023 0228 9847     		blx	r3
 4024              	.LVL369:
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4025              		.loc 2 465 5 view .LVU1150
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4026              		.loc 2 465 9 is_stmt 0 view .LVU1151
 4027 022a 2368     		ldr	r3, [r4]
 465:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4028              		.loc 2 465 8 view .LVU1152
 4029 022c 9805     		lsls	r0, r3, #22
 4030 022e 7FF52EAF 		bpl	.L418
 4031              	.L332:
 466:src/console.c ****         // Going to off mode
 4032              		.loc 2 466 7 is_stmt 1 view .LVU1153
 466:src/console.c ****         // Going to off mode
 4033              		.loc 2 466 12 is_stmt 0 view .LVU1154
 4034 0232 2568     		ldr	r5, [r4]
 466:src/console.c ****         // Going to off mode
 4035              		.loc 2 466 10 view .LVU1155
 4036 0234 15F00405 		ands	r5, r5, #4
 4037 0238 7FF417AF 		bne	.L324
 468:src/console.c ****         draw_power_off_image(1);
 4038              		.loc 2 468 9 is_stmt 1 view .LVU1156
ARM GAS  /tmp/ccVzm1xY.s 			page 113


 4039 023c 404B     		ldr	r3, .L425+100
 4040 023e 2846     		mov	r0, r5
 4041 0240 9847     		blx	r3
 4042              	.LVL370:
 469:src/console.c **** 
 4043              		.loc 2 469 9 view .LVU1157
 4044 0242 404B     		ldr	r3, .L425+104
 4045 0244 0120     		movs	r0, #1
 4046 0246 9847     		blx	r3
 4047              	.LVL371:
 471:src/console.c ****         SET_ST(STAT_SUSPENDED);
 4048              		.loc 2 471 9 view .LVU1158
 4049 0248 3F4B     		ldr	r3, .L425+108
 4050 024a 2846     		mov	r0, r5
 4051 024c 9847     		blx	r3
 4052              	.LVL372:
 472:src/console.c ****         SET_ST(STAT_OFF);
 4053              		.loc 2 472 9 view .LVU1159
 4054 024e 2368     		ldr	r3, [r4]
 4055 0250 43F00403 		orr	r3, r3, #4
 4056 0254 2360     		str	r3, [r4]
 473:src/console.c ****       }
 4057              		.loc 2 473 9 view .LVU1160
 4058 0256 2368     		ldr	r3, [r4]
 4059 0258 43F01003 		orr	r3, r3, #16
 4060 025c 2360     		str	r3, [r4]
 4061 025e 04E7     		b	.L324
 4062              	.LVL373:
 4063              	.L341:
 519:src/console.c ****       remapped = remap(c);
 4064              		.loc 2 519 5 view .LVU1161
 520:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 4065              		.loc 2 520 7 view .LVU1162
 4066              	.LBB159:
  56:src/console.c **** 
 4067              		.loc 2 56 22 view .LVU1163
 4068              	.LBB147:
  58:src/console.c **** 
 4069              		.loc 2 58 3 view .LVU1164
   1:src/keytran.c ****     {K_RELEASE, -1},
 4070              		.loc 3 1 1 view .LVU1165
  59:src/keytran.c ****     {K_RELEASE, -1},
 4071              		.loc 3 59 3 view .LVU1166
 118:src/keytran.c ****     {K_RELEASE, -1},
 4072              		.loc 3 118 3 view .LVU1167
 177:src/keytran.c ****     {K_RELEASE, -1},
 4073              		.loc 3 177 1 view .LVU1168
 4074              		.loc 3 235 1 view .LVU1169
  62:src/console.c **** 
 4075              		.loc 2 62 3 view .LVU1170
  62:src/console.c **** 
 4076              		.loc 2 62 23 view .LVU1171
  62:src/console.c **** 
 4077              		.loc 2 62 30 is_stmt 0 view .LVU1172
 4078 0260 3A4B     		ldr	r3, .L425+112
 4079              	.LVL374:
 4080              	.L405:
ARM GAS  /tmp/ccVzm1xY.s 			page 114


  62:src/console.c **** 
 4081              		.loc 2 62 30 view .LVU1173
 4082 0262 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4083              	.LVL375:
  62:src/console.c **** 
 4084              		.loc 2 62 30 view .LVU1174
 4085 0264 93E80300 		ldm	r3, {r0, r1}
 4086 0268 0DF1080A 		add	r10, sp, #8
 4087 026c 8AE80300 		stm	r10, {r0, r1}
 4088 0270 8946     		mov	r9, r1
 4089              	.LVL376:
 4090              	.L343:
  62:src/console.c **** 
 4091              		.loc 2 62 30 view .LVU1175
 4092              	.LBE147:
 4093              	.LBE159:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4094              		.loc 2 521 7 is_stmt 1 view .LVU1176
 521:src/console.c **** 	set_menu ( remapped.shift );
 4095              		.loc 2 521 10 is_stmt 0 view .LVU1177
 4096 0272 2F2D     		cmp	r5, #47
 4097 0274 95D0     		beq	.L419
 4098              	.L370:
 526:src/console.c ****       }
 527:src/console.c ****       if (remapped.key_34s == K_SYS) {
 4099              		.loc 2 527 7 is_stmt 1 view .LVU1178
 4100              		.loc 2 527 10 is_stmt 0 view .LVU1179
 4101 0276 302D     		cmp	r5, #48
 4102 0278 19D1     		bne	.L375
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4103              		.loc 2 528 2 is_stmt 1 view .LVU1180
 4104 027a 2368     		ldr	r3, [r4]
 529:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 4105              		.loc 2 529 2 is_stmt 0 view .LVU1181
 4106 027c 344D     		ldr	r5, .L425+116
 4107              	.LVL377:
 4108              		.loc 2 529 2 view .LVU1182
 4109 027e 3548     		ldr	r0, .L425+120
 4110 0280 0022     		movs	r2, #0
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4111              		.loc 2 528 2 view .LVU1183
 4112 0282 43F04003 		orr	r3, r3, #64
 4113              		.loc 2 529 2 view .LVU1184
 4114 0286 1146     		mov	r1, r2
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4115              		.loc 2 528 2 view .LVU1185
 4116 0288 2360     		str	r3, [r4]
 4117              		.loc 2 529 2 is_stmt 1 view .LVU1186
 4118 028a A847     		blx	r5
 4119              	.LVL378:
 530:src/console.c **** 	CLR_ST(STAT_MENU);
 4120              		.loc 2 530 2 view .LVU1187
 4121 028c 2368     		ldr	r3, [r4]
 4122 028e 23F04003 		bic	r3, r3, #64
 4123 0292 2360     		str	r3, [r4]
 531:src/console.c **** 	reset_shift();
 4124              		.loc 2 531 2 view .LVU1188
ARM GAS  /tmp/ccVzm1xY.s 			page 115


 4125 0294 FFF7FEFF 		bl	reset_shift
 4126              	.LVL379:
 532:src/console.c **** 	remapped =  no_key;
 4127              		.loc 2 532 2 view .LVU1189
 4128              		.loc 2 532 11 is_stmt 0 view .LVU1190
 4129 0298 254B     		ldr	r3, .L425+84
 4130 029a 93E80300 		ldm	r3, {r0, r1}
 4131 029e 0DF1080A 		add	r10, sp, #8
 4132 02a2 8AE80300 		stm	r10, {r0, r1}
 4133 02a6 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4134              	.LVL380:
 4135              		.loc 2 532 11 view .LVU1191
 4136 02a8 8946     		mov	r9, r1
 4137              	.LVL381:
 533:src/console.c **** 	display_current_menu();
 4138              		.loc 2 533 2 is_stmt 1 view .LVU1192
 4139 02aa FFF7FEFF 		bl	display_current_menu
 4140              	.LVL382:
 4141              	.L375:
 534:src/console.c ****       }
 535:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 4142              		.loc 2 535 7 view .LVU1193
 4143              		.loc 2 535 10 is_stmt 0 view .LVU1194
 4144 02ae 312D     		cmp	r5, #49
 4145 02b0 7BD0     		beq	.L378
 536:src/console.c **** 	remapped = do_multi (remapped);
 537:src/console.c **** 	display_current_menu();
 538:src/console.c ****       }
 539:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 4146              		.loc 2 539 7 is_stmt 1 view .LVU1195
 4147              		.loc 2 539 10 is_stmt 0 view .LVU1196
 4148 02b2 322D     		cmp	r5, #50
 4149 02b4 00F09380 		beq	.L377
 4150              	.L421:
 4151              		.loc 2 539 10 view .LVU1197
 4152 02b8 0DF1080A 		add	r10, sp, #8
 4153              	.LVL383:
 4154              	.L365:
 540:src/console.c ****       process_keycode_with_shift(remapped);
 4155              		.loc 2 540 7 is_stmt 1 view .LVU1198
 4156              		.loc 2 540 7 is_stmt 0 view .LVU1199
 4157 02bc 8DF80850 		strb	r5, [sp, #8]
 4158 02c0 CDF80C90 		str	r9, [sp, #12]
 4159 02c4 9AE80300 		ldm	r10, {r0, r1}
 4160 02c8 FFF7FEFF 		bl	process_keycode_with_shift
 4161              	.LVL384:
 541:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4162              		.loc 2 541 7 is_stmt 1 view .LVU1200
 4163              		.loc 2 541 10 is_stmt 0 view .LVU1201
 4164 02cc 622D     		cmp	r5, #98
 4165 02ce 64D0     		beq	.L420
 4166              	.LVL385:
 4167              	.L366:
 4168              		.loc 2 541 59 is_stmt 1 view .LVU1202
 4169              	.LBB160:
 4170              	.LBI160:
 252:src/console.c ****     start_ticks = get_rtc_ticks();
ARM GAS  /tmp/ccVzm1xY.s 			page 116


 4171              		.loc 2 252 6 view .LVU1203
 4172              	.LBB161:
 253:src/console.c **** }
 4173              		.loc 2 253 5 view .LVU1204
 253:src/console.c **** }
 4174              		.loc 2 253 19 is_stmt 0 view .LVU1205
 4175 02d0 214B     		ldr	r3, .L425+124
 4176 02d2 9847     		blx	r3
 4177              	.LVL386:
 253:src/console.c **** }
 4178              		.loc 2 253 17 view .LVU1206
 4179 02d4 214B     		ldr	r3, .L425+128
 4180 02d6 1860     		str	r0, [r3]
 254:src/console.c **** 
 4181              		.loc 2 254 1 view .LVU1207
 4182 02d8 C7E6     		b	.L324
 4183              	.L426:
 4184 02da 00BF     		.align	2
 4185              	.L425:
 4186 02dc 00000000 		.word	StateWhileOn
 4187 02e0 00000000 		.word	DispMsg
 4188 02e4 00200010 		.word	268443648
 4189 02e8 00000000 		.word	KeyCallback
 4190 02ec 7D030008 		.word	134218621
 4191 02f0 00000000 		.word	run_menu_item
 4192 02f4 00000000 		.word	menu_line_str
 4193 02f8 31020008 		.word	134218289
 4194 02fc 00000000 		.word	JustDisplayed
 4195 0300 19040008 		.word	134218777
 4196 0304 19020008 		.word	134218265
 4197 0308 91030008 		.word	134218641
 4198 030c E5020008 		.word	134218469
 4199 0310 59020008 		.word	134218329
 4200 0314 35020008 		.word	134218293
 4201 0318 89030008 		.word	134218633
 4202 031c B9030008 		.word	134218681
 4203 0320 00000000 		.word	Pause
 4204 0324 00000000 		.word	Running
 4205 0328 00000000 		.word	.LANCHOR1
 4206 032c 00000000 		.word	.LANCHOR3
 4207 0330 00000000 		.word	.LANCHOR10
 4208 0334 01040008 		.word	134218753
 4209 0338 81030008 		.word	134218625
 4210 033c F5030008 		.word	134218741
 4211 0340 55020008 		.word	134218325
 4212 0344 2D040008 		.word	134218797
 4213 0348 1D020008 		.word	134218269
 4214 034c 00000000 		.word	.LANCHOR19
 4215 0350 59030008 		.word	134218585
 4216 0354 00000000 		.word	.LANCHOR18
 4217 0358 B9040008 		.word	134218937
 4218 035c 00000000 		.word	.LANCHOR8
 4219 0360 F9030008 		.word	134218745
 4220              	.LVL387:
 4221              	.L339:
 254:src/console.c **** 
 4222              		.loc 2 254 1 view .LVU1208
ARM GAS  /tmp/ccVzm1xY.s 			page 117


 4223              	.LBE161:
 4224              	.LBE160:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4225              		.loc 2 510 10 is_stmt 1 view .LVU1209
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4226              		.loc 2 510 15 is_stmt 0 view .LVU1210
 4227 0364 8D4B     		ldr	r3, .L427
 4228 0366 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4229              		.loc 2 510 13 view .LVU1211
 4230 0368 DB07     		lsls	r3, r3, #31
 4231 036a 7FF5B7AE 		bpl	.L340
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4232              		.loc 2 510 37 discriminator 1 view .LVU1212
 4233 036e FFF7FEFF 		bl	DM42_Ticker
 4234              	.LVL388:
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4235              		.loc 2 510 37 discriminator 1 view .LVU1213
 4236 0372 8B4A     		ldr	r2, .L427+4
 4237 0374 8B4B     		ldr	r3, .L427+8
 4238 0376 02FB0030 		mla	r0, r2, r0, r3
 510:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4239              		.loc 2 510 32 discriminator 1 view .LVU1214
 4240 037a B0F1333F 		cmp	r0, #858993459
 4241 037e BFF4ADAE 		bcs	.L340
 511:src/console.c ****       finish_LEQ();
 4242              		.loc 2 511 7 is_stmt 1 view .LVU1215
 511:src/console.c ****       finish_LEQ();
 4243              		.loc 2 511 21 is_stmt 0 view .LVU1216
 4244 0382 8420     		movs	r0, #132
 4245 0384 FFF7FEFF 		bl	is_dot
 4246              	.LVL389:
 511:src/console.c ****       finish_LEQ();
 4247              		.loc 2 511 7 view .LVU1217
 4248 0388 B0FA80F1 		clz	r1, r0
 4249 038c 4909     		lsrs	r1, r1, #5
 4250 038e 8420     		movs	r0, #132
 4251 0390 FFF7FEFF 		bl	dot
 4252              	.LVL390:
 512:src/console.c ****     }
 4253              		.loc 2 512 7 is_stmt 1 view .LVU1218
 4254 0394 FFF7FEFF 		bl	finish_LEQ
 4255              	.LVL391:
 4256 0398 A0E6     		b	.L340
 4257              	.LVL392:
 4258              	.L420:
 4259              		.loc 2 541 43 is_stmt 0 discriminator 2 view .LVU1219
 4260 039a 834B     		ldr	r3, .L427+12
 4261 039c 1B68     		ldr	r3, [r3]
 4262 039e 002B     		cmp	r3, #0
 4263 03a0 3FF463AE 		beq	.L324
 4264 03a4 94E7     		b	.L366
 4265              	.LVL393:
 4266              	.L344:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4267              		.loc 2 521 7 is_stmt 1 view .LVU1220
 527:src/console.c **** 	SET_ST(STAT_MENU);
ARM GAS  /tmp/ccVzm1xY.s 			page 118


 4268              		.loc 2 527 7 view .LVU1221
 535:src/console.c **** 	remapped = do_multi (remapped);
 4269              		.loc 2 535 7 view .LVU1222
 4270              	.LBB162:
 4271              	.LBB148:
 4272              	.LBB145:
  68:src/console.c ****   }
 4273              		.loc 2 68 12 is_stmt 0 view .LVU1223
 4274 03a6 4FF00C09 		mov	r9, #12
 4275              	.LVL394:
 4276              	.L378:
  68:src/console.c ****   }
 4277              		.loc 2 68 12 view .LVU1224
 4278              	.LBE145:
 4279              	.LBE148:
 4280              	.LBE162:
 536:src/console.c **** 	display_current_menu();
 4281              		.loc 2 536 2 is_stmt 1 view .LVU1225
 536:src/console.c **** 	display_current_menu();
 4282              		.loc 2 536 13 is_stmt 0 view .LVU1226
 4283 03aa 3123     		movs	r3, #49
 4284 03ac CDF80C90 		str	r9, [sp, #12]
 4285 03b0 8DF80830 		strb	r3, [sp, #8]
 4286 03b4 6D46     		mov	r5, sp
 4287 03b6 0DF1080A 		add	r10, sp, #8
 4288 03ba 9AE80600 		ldm	r10, {r1, r2}
 4289 03be 2846     		mov	r0, r5
 4290 03c0 FFF7FEFF 		bl	do_multi
 4291              	.LVL395:
 4292 03c4 95E80300 		ldm	r5, {r0, r1}
 4293 03c8 8AE80300 		stm	r10, {r0, r1}
 4294 03cc 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 4295              	.LVL396:
 536:src/console.c **** 	display_current_menu();
 4296              		.loc 2 536 13 view .LVU1227
 4297 03d0 DDF80C90 		ldr	r9, [sp, #12]
 4298              	.LVL397:
 537:src/console.c ****       }
 4299              		.loc 2 537 2 is_stmt 1 view .LVU1228
 4300 03d4 FFF7FEFF 		bl	display_current_menu
 4301              	.LVL398:
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4302              		.loc 2 539 7 view .LVU1229
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4303              		.loc 2 539 10 is_stmt 0 view .LVU1230
 4304 03d8 322D     		cmp	r5, #50
 4305 03da 7FF46DAF 		bne	.L421
 4306              	.L377:
 542:src/console.c ****     }
 543:src/console.c ****   }
 544:src/console.c ****   save_ram_file(0);
 4307              		.loc 2 544 3 is_stmt 1 view .LVU1231
 4308 03de 0020     		movs	r0, #0
 545:src/console.c ****   //  free_storage();
 546:src/console.c ****   return;
 547:src/console.c **** }
 4309              		.loc 2 547 1 is_stmt 0 view .LVU1232
ARM GAS  /tmp/ccVzm1xY.s 			page 119


 4310 03e0 38B0     		add	sp, sp, #224
 4311              		.cfi_remember_state
 4312              		.cfi_def_cfa_offset 32
 4313              		@ sp needed
 4314 03e2 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 4315              		.cfi_restore 14
 4316              		.cfi_restore 10
 4317              		.cfi_restore 9
 4318              		.cfi_restore 8
 4319              		.cfi_restore 7
 4320              		.cfi_restore 6
 4321              		.cfi_restore 5
 4322              		.cfi_restore 4
 4323              		.cfi_def_cfa_offset 0
 4324              	.LVL399:
 544:src/console.c ****   //  free_storage();
 4325              		.loc 2 544 3 view .LVU1233
 4326 03e6 FFF7FEBF 		b	save_ram_file
 4327              	.LVL400:
 4328              	.L407:
 4329              		.cfi_restore_state
 4330              	.LBB163:
 4331              	.LBB149:
  72:src/console.c ****   }
 4332              		.loc 2 72 5 is_stmt 1 view .LVU1234
  72:src/console.c ****   }
 4333              		.loc 2 72 27 is_stmt 0 view .LVU1235
 4334 03ea 704B     		ldr	r3, .L427+16
 4335              	.L404:
 124:src/console.c ****     break;
 4336              		.loc 2 124 26 view .LVU1236
 4337 03ec 03EBC502 		add	r2, r3, r5, lsl #3
 4338 03f0 92E80300 		ldm	r2, {r0, r1}
 4339 03f4 0DF1080A 		add	r10, sp, #8
 4340 03f8 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4341              	.LVL401:
 124:src/console.c ****     break;
 4342              		.loc 2 124 26 view .LVU1237
 4343 03fc 8946     		mov	r9, r1
 4344              	.LVL402:
 124:src/console.c ****     break;
 4345              		.loc 2 124 26 view .LVU1238
 4346 03fe 8AE80300 		stm	r10, {r0, r1}
 4347 0402 36E7     		b	.L343
 4348              	.LVL403:
 4349              	.L406:
  64:src/console.c **** 
 4350              		.loc 2 64 16 is_stmt 1 view .LVU1239
  64:src/console.c **** 
 4351              		.loc 2 64 23 is_stmt 0 view .LVU1240
 4352 0404 6A4B     		ldr	r3, .L427+20
 4353 0406 2CE7     		b	.L405
 4354              	.LVL404:
 4355              	.L417:
  64:src/console.c **** 
 4356              		.loc 2 64 23 view .LVU1241
 4357              	.LBE149:
ARM GAS  /tmp/ccVzm1xY.s 			page 120


 4358              	.LBE163:
 4359              	.LBB164:
 4360              	.LBB157:
 111:src/menu.c    ****   }
 4361              		.loc 1 111 5 is_stmt 1 view .LVU1242
 111:src/menu.c    ****   }
 4362              		.loc 1 111 18 is_stmt 0 view .LVU1243
 4363 0408 6A49     		ldr	r1, .L427+24
 4364              	.LVL405:
 111:src/menu.c    ****   }
 4365              		.loc 1 111 18 view .LVU1244
 4366 040a 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4367 040c 1170     		strb	r1, [r2]
 4368 040e D5E6     		b	.L372
 4369              	.LVL406:
 4370              	.L359:
 111:src/menu.c    ****   }
 4371              		.loc 1 111 18 view .LVU1245
 4372              	.LBE157:
 4373              	.LBE164:
 4374              	.LBB165:
 4375              	.LBB150:
  95:src/console.c ****   }
 4376              		.loc 2 95 5 is_stmt 1 view .LVU1246
  95:src/console.c ****   }
 4377              		.loc 2 95 9 is_stmt 0 view .LVU1247
 4378 0410 FFF7FEFF 		bl	cur_shift
 4379              	.LVL407:
  95:src/console.c ****   }
 4380              		.loc 2 95 8 view .LVU1248
 4381 0414 0128     		cmp	r0, #1
 4382 0416 56D0     		beq	.L422
 4383              	.L346:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4384              		.loc 2 98 3 is_stmt 1 view .LVU1249
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4385              		.loc 2 98 8 is_stmt 0 view .LVU1250
 4386 0418 FFF7FEFF 		bl	get_alpha_state
 4387              	.LVL408:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4388              		.loc 2 98 6 view .LVU1251
 4389 041c D8B3     		cbz	r0, .L360
  99:src/console.c ****       switch (cur_shift()) { 
 4390              		.loc 2 99 5 is_stmt 1 view .LVU1252
  99:src/console.c ****       switch (cur_shift()) { 
 4391              		.loc 2 99 8 is_stmt 0 view .LVU1253
 4392 041e 1C2D     		cmp	r5, #28
 4393 0420 00F08580 		beq	.L423
 116:src/console.c ****   }
 4394              		.loc 2 116 5 is_stmt 1 view .LVU1254
 116:src/console.c ****   }
 4395              		.loc 2 116 26 is_stmt 0 view .LVU1255
 4396 0424 644B     		ldr	r3, .L427+28
 4397 0426 E1E7     		b	.L404
 4398              	.L353:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4399              		.loc 2 79 5 is_stmt 1 view .LVU1256
ARM GAS  /tmp/ccVzm1xY.s 			page 121


  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4400              		.loc 2 79 9 is_stmt 0 view .LVU1257
 4401 0428 FFF7FEFF 		bl	cur_shift
 4402              	.LVL409:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4403              		.loc 2 79 8 view .LVU1258
 4404 042c 0028     		cmp	r0, #0
 4405 042e 7FF47BAE 		bne	.L354
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4406              		.loc 2 79 33 is_stmt 1 view .LVU1259
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4407              		.loc 2 79 51 is_stmt 0 view .LVU1260
 4408 0432 DDE90801 		ldrd	r0, r1, [sp, #32]
 4409 0436 0DF1080A 		add	r10, sp, #8
 4410 043a 8AE80300 		stm	r10, {r0, r1}
 4411 043e 9DF82050 		ldrb	r5, [sp, #32]	@ zero_extendqisi2
 4412              	.LVL410:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4413              		.loc 2 79 51 view .LVU1261
 4414 0442 8946     		mov	r9, r1
 4415              	.LVL411:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4416              		.loc 2 79 51 view .LVU1262
 4417 0444 15E7     		b	.L343
 4418              	.LVL412:
 4419              	.L415:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4420              		.loc 2 91 33 is_stmt 1 view .LVU1263
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4421              		.loc 2 91 51 is_stmt 0 view .LVU1264
 4422 0446 DDE92801 		ldrd	r0, r1, [sp, #160]
 4423 044a 0DF1080A 		add	r10, sp, #8
 4424 044e 8AE80300 		stm	r10, {r0, r1}
 4425 0452 9DF8A050 		ldrb	r5, [sp, #160]	@ zero_extendqisi2
 4426              	.LVL413:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4427              		.loc 2 91 51 view .LVU1265
 4428 0456 8946     		mov	r9, r1
 4429              	.LVL414:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4430              		.loc 2 91 51 view .LVU1266
 4431 0458 0BE7     		b	.L343
 4432              	.LVL415:
 4433              	.L413:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4434              		.loc 2 88 33 is_stmt 1 view .LVU1267
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4435              		.loc 2 88 51 is_stmt 0 view .LVU1268
 4436 045a DDE92001 		ldrd	r0, r1, [sp, #128]
 4437 045e 0DF1080A 		add	r10, sp, #8
 4438 0462 8AE80300 		stm	r10, {r0, r1}
 4439 0466 9DF88050 		ldrb	r5, [sp, #128]	@ zero_extendqisi2
 4440              	.LVL416:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4441              		.loc 2 88 51 view .LVU1269
 4442 046a 8946     		mov	r9, r1
 4443              	.LVL417:
ARM GAS  /tmp/ccVzm1xY.s 			page 122


  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4444              		.loc 2 88 51 view .LVU1270
 4445 046c 01E7     		b	.L343
 4446              	.LVL418:
 4447              	.L411:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4448              		.loc 2 85 33 is_stmt 1 view .LVU1271
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4449              		.loc 2 85 51 is_stmt 0 view .LVU1272
 4450 046e DDE91801 		ldrd	r0, r1, [sp, #96]
 4451 0472 0DF1080A 		add	r10, sp, #8
 4452 0476 8AE80300 		stm	r10, {r0, r1}
 4453 047a 9DF86050 		ldrb	r5, [sp, #96]	@ zero_extendqisi2
 4454              	.LVL419:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4455              		.loc 2 85 51 view .LVU1273
 4456 047e 8946     		mov	r9, r1
 4457              	.LVL420:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4458              		.loc 2 85 51 view .LVU1274
 4459 0480 F7E6     		b	.L343
 4460              	.LVL421:
 4461              	.L409:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4462              		.loc 2 82 33 is_stmt 1 view .LVU1275
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4463              		.loc 2 82 51 is_stmt 0 view .LVU1276
 4464 0482 DDE91001 		ldrd	r0, r1, [sp, #64]
 4465 0486 0DF1080A 		add	r10, sp, #8
 4466 048a 8AE80300 		stm	r10, {r0, r1}
 4467 048e 9DF84050 		ldrb	r5, [sp, #64]	@ zero_extendqisi2
 4468              	.LVL422:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4469              		.loc 2 82 51 view .LVU1277
 4470 0492 8946     		mov	r9, r1
 4471              	.LVL423:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4472              		.loc 2 82 51 view .LVU1278
 4473 0494 EDE6     		b	.L343
 4474              	.LVL424:
 4475              	.L360:
 119:src/console.c ****   case SHIFT_N:    
 4476              		.loc 2 119 3 is_stmt 1 view .LVU1279
 119:src/console.c ****   case SHIFT_N:    
 4477              		.loc 2 119 11 is_stmt 0 view .LVU1280
 4478 0496 FFF7FEFF 		bl	cur_shift
 4479              	.LVL425:
 119:src/console.c ****   case SHIFT_N:    
 4480              		.loc 2 119 3 view .LVU1281
 4481 049a 0128     		cmp	r0, #1
 4482 049c 45D0     		beq	.L367
 4483 049e 0228     		cmp	r0, #2
 4484 04a0 02D0     		beq	.L368
 4485 04a2 70B1     		cbz	r0, .L369
  58:src/console.c **** 
 4486              		.loc 2 58 41 view .LVU1282
 4487 04a4 EDB2     		uxtb	r5, r5
ARM GAS  /tmp/ccVzm1xY.s 			page 123


 4488              	.LVL426:
  58:src/console.c **** 
 4489              		.loc 2 58 41 view .LVU1283
 4490 04a6 E4E6     		b	.L343
 4491              	.LVL427:
 4492              	.L368:
 125:src/console.c ****   case SHIFT_G:
 4493              		.loc 2 125 5 is_stmt 1 view .LVU1284
 127:src/console.c ****     break;
 4494              		.loc 2 127 5 view .LVU1285
 127:src/console.c ****     break;
 4495              		.loc 2 127 26 is_stmt 0 view .LVU1286
 4496 04a8 444B     		ldr	r3, .L427+32
 4497 04aa 03EBC502 		add	r2, r3, r5, lsl #3
 4498 04ae 92E80300 		ldm	r2, {r0, r1}
 4499 04b2 0DF1080A 		add	r10, sp, #8
 4500 04b6 8AE80300 		stm	r10, {r0, r1}
 4501 04ba 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4502              	.LVL428:
 127:src/console.c ****     break;
 4503              		.loc 2 127 26 view .LVU1287
 4504 04be 8946     		mov	r9, r1
 4505              	.LVL429:
 127:src/console.c ****     break;
 4506              		.loc 2 127 26 view .LVU1288
 4507 04c0 D7E6     		b	.L343
 4508              	.LVL430:
 4509              	.L369:
 121:src/console.c ****     break;
 4510              		.loc 2 121 5 is_stmt 1 view .LVU1289
 121:src/console.c ****     break;
 4511              		.loc 2 121 24 is_stmt 0 view .LVU1290
 4512 04c2 3F4B     		ldr	r3, .L427+36
 4513 04c4 92E7     		b	.L404
 4514              	.L422:
  95:src/console.c ****   }
 4515              		.loc 2 95 33 is_stmt 1 view .LVU1291
  95:src/console.c ****   }
 4516              		.loc 2 95 51 is_stmt 0 view .LVU1292
 4517 04c6 DDE93201 		ldrd	r0, r1, [sp, #200]
 4518 04ca 0DF1080A 		add	r10, sp, #8
 4519 04ce 8AE80300 		stm	r10, {r0, r1}
 4520 04d2 9DF8C850 		ldrb	r5, [sp, #200]	@ zero_extendqisi2
 4521              	.LVL431:
  95:src/console.c ****   }
 4522              		.loc 2 95 51 view .LVU1293
 4523 04d6 8946     		mov	r9, r1
 4524              	.LVL432:
  95:src/console.c ****   }
 4525              		.loc 2 95 51 view .LVU1294
 4526 04d8 CBE6     		b	.L343
 4527              	.LVL433:
 4528              	.L414:
  89:src/console.c ****   case KEY_F5:
 4529              		.loc 2 89 33 is_stmt 1 view .LVU1295
  89:src/console.c ****   case KEY_F5:
 4530              		.loc 2 89 51 is_stmt 0 view .LVU1296
ARM GAS  /tmp/ccVzm1xY.s 			page 124


 4531 04da DDE92201 		ldrd	r0, r1, [sp, #136]
 4532 04de 0DF1080A 		add	r10, sp, #8
 4533 04e2 8AE80300 		stm	r10, {r0, r1}
 4534 04e6 9DF88850 		ldrb	r5, [sp, #136]	@ zero_extendqisi2
 4535              	.LVL434:
  89:src/console.c ****   case KEY_F5:
 4536              		.loc 2 89 51 view .LVU1297
 4537 04ea 8946     		mov	r9, r1
 4538              	.LVL435:
  89:src/console.c ****   case KEY_F5:
 4539              		.loc 2 89 51 view .LVU1298
 4540 04ec C1E6     		b	.L343
 4541              	.LVL436:
 4542              	.L416:
  92:src/console.c ****   case KEY_F6:
 4543              		.loc 2 92 33 is_stmt 1 view .LVU1299
  92:src/console.c ****   case KEY_F6:
 4544              		.loc 2 92 51 is_stmt 0 view .LVU1300
 4545 04ee DDE92A01 		ldrd	r0, r1, [sp, #168]
 4546 04f2 0DF1080A 		add	r10, sp, #8
 4547 04f6 8AE80300 		stm	r10, {r0, r1}
 4548 04fa 9DF8A850 		ldrb	r5, [sp, #168]	@ zero_extendqisi2
 4549              	.LVL437:
  92:src/console.c ****   case KEY_F6:
 4550              		.loc 2 92 51 view .LVU1301
 4551 04fe 8946     		mov	r9, r1
 4552              	.LVL438:
  92:src/console.c ****   case KEY_F6:
 4553              		.loc 2 92 51 view .LVU1302
 4554 0500 B7E6     		b	.L343
 4555              	.LVL439:
 4556              	.L412:
  86:src/console.c ****   case KEY_F4:
 4557              		.loc 2 86 33 is_stmt 1 view .LVU1303
  86:src/console.c ****   case KEY_F4:
 4558              		.loc 2 86 51 is_stmt 0 view .LVU1304
 4559 0502 DDE91A01 		ldrd	r0, r1, [sp, #104]
 4560 0506 0DF1080A 		add	r10, sp, #8
 4561 050a 8AE80300 		stm	r10, {r0, r1}
 4562 050e 9DF86850 		ldrb	r5, [sp, #104]	@ zero_extendqisi2
 4563              	.LVL440:
  86:src/console.c ****   case KEY_F4:
 4564              		.loc 2 86 51 view .LVU1305
 4565 0512 8946     		mov	r9, r1
 4566              	.LVL441:
  86:src/console.c ****   case KEY_F4:
 4567              		.loc 2 86 51 view .LVU1306
 4568 0514 ADE6     		b	.L343
 4569              	.LVL442:
 4570              	.L410:
  83:src/console.c ****   case KEY_F3:
 4571              		.loc 2 83 33 is_stmt 1 view .LVU1307
  83:src/console.c ****   case KEY_F3:
 4572              		.loc 2 83 51 is_stmt 0 view .LVU1308
 4573 0516 DDE91201 		ldrd	r0, r1, [sp, #72]
 4574 051a 0DF1080A 		add	r10, sp, #8
 4575 051e 8AE80300 		stm	r10, {r0, r1}
ARM GAS  /tmp/ccVzm1xY.s 			page 125


 4576 0522 9DF84850 		ldrb	r5, [sp, #72]	@ zero_extendqisi2
 4577              	.LVL443:
  83:src/console.c ****   case KEY_F3:
 4578              		.loc 2 83 51 view .LVU1309
 4579 0526 8946     		mov	r9, r1
 4580              	.LVL444:
  83:src/console.c ****   case KEY_F3:
 4581              		.loc 2 83 51 view .LVU1310
 4582 0528 A3E6     		b	.L343
 4583              	.LVL445:
 4584              	.L367:
 122:src/console.c ****   case SHIFT_F:
 4585              		.loc 2 122 5 is_stmt 1 view .LVU1311
 124:src/console.c ****     break;
 4586              		.loc 2 124 5 view .LVU1312
 124:src/console.c ****     break;
 4587              		.loc 2 124 26 is_stmt 0 view .LVU1313
 4588 052a 264B     		ldr	r3, .L427+40
 4589 052c 5EE7     		b	.L404
 4590              	.L423:
 100:src/console.c ****       case SHIFT_N:
 4591              		.loc 2 100 7 is_stmt 1 view .LVU1314
 100:src/console.c ****       case SHIFT_N:
 4592              		.loc 2 100 15 is_stmt 0 view .LVU1315
 4593 052e FFF7FEFF 		bl	cur_shift
 4594              	.LVL446:
 100:src/console.c ****       case SHIFT_N:
 4595              		.loc 2 100 7 view .LVU1316
 4596 0532 0328     		cmp	r0, #3
 4597 0534 28D8     		bhi	.L362
 4598 0536 0128     		cmp	r0, #1
 4599 0538 11D8     		bhi	.L363
 4600 053a E0B1     		cbz	r0, .L424
 103:src/console.c ****       case SHIFT_F:
 4601              		.loc 2 103 2 is_stmt 1 view .LVU1317
 105:src/console.c **** 	break;
 4602              		.loc 2 105 2 view .LVU1318
 105:src/console.c **** 	break;
 4603              		.loc 2 105 23 is_stmt 0 view .LVU1319
 4604 053c 224B     		ldr	r3, .L427+44
 4605 053e 93E80300 		ldm	r3, {r0, r1}
 4606 0542 0DF1080A 		add	r10, sp, #8
 4607 0546 8AE80300 		stm	r10, {r0, r1}
 4608              	.LVL447:
 105:src/console.c **** 	break;
 4609              		.loc 2 105 23 view .LVU1320
 4610              	.LBE150:
 4611              	.LBE165:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4612              		.loc 2 521 7 is_stmt 1 view .LVU1321
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4613              		.loc 2 527 7 view .LVU1322
 535:src/console.c **** 	remapped = do_multi (remapped);
 4614              		.loc 2 535 7 view .LVU1323
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4615              		.loc 2 539 7 view .LVU1324
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
ARM GAS  /tmp/ccVzm1xY.s 			page 126


 4616              		.loc 2 540 7 view .LVU1325
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4617              		.loc 2 540 7 is_stmt 0 view .LVU1326
 4618 054a 2A22     		movs	r2, #42
 4619 054c 0023     		movs	r3, #0
 4620 054e 8DF80820 		strb	r2, [sp, #8]
 4621 0552 0393     		str	r3, [sp, #12]
 4622 0554 9AE80300 		ldm	r10, {r0, r1}
 4623 0558 FFF7FEFF 		bl	process_keycode_with_shift
 4624              	.LVL448:
 541:src/console.c ****     }
 4625              		.loc 2 541 7 is_stmt 1 view .LVU1327
 4626 055c B8E6     		b	.L366
 4627              	.LVL449:
 4628              	.L363:
 4629              	.LBB166:
 4630              	.LBB151:
 106:src/console.c ****       case SHIFT_G:
 4631              		.loc 2 106 2 view .LVU1328
 108:src/console.c **** 	break;
 4632              		.loc 2 108 2 view .LVU1329
 108:src/console.c **** 	break;
 4633              		.loc 2 108 9 is_stmt 0 view .LVU1330
 4634 055e 1B4B     		ldr	r3, .L427+48
 4635 0560 7FE6     		b	.L405
 4636              	.L408:
  80:src/console.c ****   case KEY_F2:
 4637              		.loc 2 80 33 is_stmt 1 view .LVU1331
  80:src/console.c ****   case KEY_F2:
 4638              		.loc 2 80 51 is_stmt 0 view .LVU1332
 4639 0562 DDE90A01 		ldrd	r0, r1, [sp, #40]
 4640 0566 0DF1080A 		add	r10, sp, #8
 4641 056a 8AE80300 		stm	r10, {r0, r1}
 4642 056e 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 4643              	.LVL450:
  80:src/console.c ****   case KEY_F2:
 4644              		.loc 2 80 51 view .LVU1333
 4645 0572 8946     		mov	r9, r1
 4646              	.LVL451:
  80:src/console.c ****   case KEY_F2:
 4647              		.loc 2 80 51 view .LVU1334
 4648 0574 7DE6     		b	.L343
 4649              	.LVL452:
 4650              	.L424:
 102:src/console.c **** 	break;
 4651              		.loc 2 102 2 is_stmt 1 view .LVU1335
 102:src/console.c **** 	break;
 4652              		.loc 2 102 21 is_stmt 0 view .LVU1336
 4653 0576 164B     		ldr	r3, .L427+52
 4654 0578 93E80300 		ldm	r3, {r0, r1}
 4655 057c 0DF1080A 		add	r10, sp, #8
 4656 0580 8AE80300 		stm	r10, {r0, r1}
 4657              	.LVL453:
 102:src/console.c **** 	break;
 4658              		.loc 2 102 21 view .LVU1337
 4659              	.LBE151:
 4660              	.LBE166:
ARM GAS  /tmp/ccVzm1xY.s 			page 127


 521:src/console.c **** 	set_menu ( remapped.shift );
 4661              		.loc 2 521 7 is_stmt 1 view .LVU1338
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4662              		.loc 2 527 7 view .LVU1339
 535:src/console.c **** 	remapped = do_multi (remapped);
 4663              		.loc 2 535 7 view .LVU1340
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4664              		.loc 2 539 7 view .LVU1341
 4665              	.LBB167:
 4666              	.LBB152:
 102:src/console.c **** 	break;
 4667              		.loc 2 102 21 is_stmt 0 view .LVU1342
 4668 0584 2925     		movs	r5, #41
 4669              	.LVL454:
 102:src/console.c **** 	break;
 4670              		.loc 2 102 21 view .LVU1343
 4671 0586 99E6     		b	.L365
 4672              	.LVL455:
 4673              	.L362:
 102:src/console.c **** 	break;
 4674              		.loc 2 102 21 view .LVU1344
 4675              	.LBE152:
 4676              	.LBE167:
 521:src/console.c **** 	set_menu ( remapped.shift );
 4677              		.loc 2 521 7 is_stmt 1 view .LVU1345
 527:src/console.c **** 	SET_ST(STAT_MENU);
 4678              		.loc 2 527 7 view .LVU1346
 535:src/console.c **** 	remapped = do_multi (remapped);
 4679              		.loc 2 535 7 view .LVU1347
 539:src/console.c ****       process_keycode_with_shift(remapped);
 4680              		.loc 2 539 7 view .LVU1348
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4681              		.loc 2 540 7 view .LVU1349
 540:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4682              		.loc 2 540 7 is_stmt 0 view .LVU1350
 4683 0588 0023     		movs	r3, #0
 4684 058a 8DF80850 		strb	r5, [sp, #8]
 4685 058e 0298     		ldr	r0, [sp, #8]
 4686 0590 0393     		str	r3, [sp, #12]
 4687 0592 1946     		mov	r1, r3
 4688 0594 FFF7FEFF 		bl	process_keycode_with_shift
 4689              	.LVL456:
 541:src/console.c ****     }
 4690              		.loc 2 541 7 is_stmt 1 view .LVU1351
 4691 0598 9AE6     		b	.L366
 4692              	.L428:
 4693 059a 00BF     		.align	2
 4694              	.L427:
 4695 059c 00000000 		.word	StopWatchStatus
 4696 05a0 CDCCCCCC 		.word	-858993459
 4697 05a4 99999919 		.word	429496729
 4698 05a8 00000000 		.word	JustStopped
 4699 05ac 00000000 		.word	.LANCHOR12
 4700 05b0 00000000 		.word	.LANCHOR11
 4701 05b4 00000000 		.word	.LANCHOR2
 4702 05b8 00000000 		.word	.LANCHOR16
 4703 05bc 00000000 		.word	.LANCHOR17
ARM GAS  /tmp/ccVzm1xY.s 			page 128


 4704 05c0 00000000 		.word	.LANCHOR13
 4705 05c4 00000000 		.word	.LANCHOR14
 4706 05c8 E0000000 		.word	.LANCHOR14+224
 4707 05cc 00000000 		.word	.LANCHOR15
 4708 05d0 E0000000 		.word	.LANCHOR13+224
 4709              		.cfi_endproc
 4710              	.LFE34:
 4712              		.global	n_p
 4713              		.comm	print_string,22,4
 4714              		.global	spaces
 4715              		.global	release
 4716              		.global	h_shift
 4717              		.global	g_shift
 4718              		.global	f_shift
 4719              		.global	heartbeat
 4720              		.global	no_key
 4721              		.global	MID_MENU
 4722              		.section	.rodata.str1.4,"aMS",%progbits,1
 4723              		.align	2
 4724              	.LC14:
 4725 0000 53797374 		.ascii	"System!\000"
 4725      656D2100 
 4726              		.global	mid_menu
 4727              		.global	default_menu
 4728              		.global	last_menu
 4729              		.global	current_menu
 4730              		.global	cmplx_key_string
 4731              		.align	2
 4732              	.LC15:
 4733 0008 43505800 		.ascii	"CPX\000"
 4734              		.global	arrow_key_string
 4735              		.align	2
 4736              	.LC16:
 4737 000c 2D2D0D00 		.ascii	"--\015\000"
 4738              		.global	UserMenu
 4739              		.section	.rodata
 4740              		.align	2
 4741              		.set	.LANCHOR5,. + 0
 4742              	.LC0:
 4743 0000 2C       		.byte	44
 4744 0001 000000   		.space	3
 4745 0004 FFFFFFFF 		.word	-1
 4746              	.LC1:
 4747 0008 2D       		.byte	45
 4748 0009 000000   		.space	3
 4749 000c FFFFFFFF 		.word	-1
 4750              	.LC10:
 4751 0010 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4751      2A2B0708 
 4751      091C0B0C 
 4751      0D0E0F
 4752 001f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4752      13141516 
 4752      00121819 
 4752      1A
 4753 002c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4753      1E1F2000 
ARM GAS  /tmp/ccVzm1xY.s 			page 129


 4753      21222324 
 4753      25
 4754              		.section	.bss.current_menu,"aw",%nobits
 4755              		.set	.LANCHOR1,. + 0
 4758              	current_menu:
 4759 0000 00       		.space	1
 4760              		.section	.bss.default_menu,"aw",%nobits
 4761              		.set	.LANCHOR2,. + 0
 4764              	default_menu:
 4765 0000 00       		.space	1
 4766              		.section	.bss.last_menu,"aw",%nobits
 4767              		.set	.LANCHOR3,. + 0
 4770              	last_menu:
 4771 0000 00       		.space	1
 4772              		.section	.bss.mdots,"aw",%nobits
 4773              		.align	2
 4774              		.set	.LANCHOR0,. + 0
 4777              	mdots:
 4778 0000 00000000 		.space	400
 4778      00000000 
 4778      00000000 
 4778      00000000 
 4778      00000000 
 4779              		.section	.bss.n_p,"aw",%nobits
 4780              		.align	2
 4783              	n_p:
 4784 0000 00000000 		.space	4
 4785              		.section	.bss.start_ticks,"aw",%nobits
 4786              		.align	2
 4787              		.set	.LANCHOR8,. + 0
 4790              	start_ticks:
 4791 0000 00000000 		.space	4
 4792              		.section	.data.UserMenu,"aw"
 4793              		.align	2
 4794              		.set	.LANCHOR4,. + 0
 4797              	UserMenu:
 4798 0000 55736572 		.ascii	"User Menu\000"
 4798      204D656E 
 4798      7500
 4799 000a 00000000 		.space	5
 4799      00
 4800 000f 00       		.space	1
 4801 0010 2E       		.byte	46
 4802 0011 000000   		.space	3
 4803 0014 FFFFFFFF 		.word	-1
 4804 0018 2E       		.byte	46
 4805 0019 000000   		.space	3
 4806 001c FFFFFFFF 		.word	-1
 4807 0020 00       		.ascii	"\000"
 4808 0021 00000000 		.space	7
 4808      000000
 4809 0028 00       		.ascii	"\000"
 4810 0029 00000000 		.space	7
 4810      000000
 4811 0030 2E       		.byte	46
 4812 0031 000000   		.space	3
 4813 0034 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccVzm1xY.s 			page 130


 4814 0038 2E       		.byte	46
 4815 0039 000000   		.space	3
 4816 003c FFFFFFFF 		.word	-1
 4817 0040 00       		.ascii	"\000"
 4818 0041 00000000 		.space	7
 4818      000000
 4819 0048 00       		.ascii	"\000"
 4820 0049 00000000 		.space	7
 4820      000000
 4821 0050 2E       		.byte	46
 4822 0051 000000   		.space	3
 4823 0054 FFFFFFFF 		.word	-1
 4824 0058 2E       		.byte	46
 4825 0059 000000   		.space	3
 4826 005c FFFFFFFF 		.word	-1
 4827 0060 00       		.ascii	"\000"
 4828 0061 00000000 		.space	7
 4828      000000
 4829 0068 00       		.ascii	"\000"
 4830 0069 00000000 		.space	7
 4830      000000
 4831 0070 2E       		.byte	46
 4832 0071 000000   		.space	3
 4833 0074 FFFFFFFF 		.word	-1
 4834 0078 2E       		.byte	46
 4835 0079 000000   		.space	3
 4836 007c FFFFFFFF 		.word	-1
 4837 0080 00       		.ascii	"\000"
 4838 0081 00000000 		.space	7
 4838      000000
 4839 0088 00       		.ascii	"\000"
 4840 0089 00000000 		.space	7
 4840      000000
 4841 0090 2C       		.byte	44
 4842 0091 000000   		.space	3
 4843 0094 FFFFFFFF 		.word	-1
 4844 0098 2E       		.byte	46
 4845 0099 000000   		.space	3
 4846 009c FFFFFFFF 		.word	-1
 4847 00a0 2D2D0D00 		.ascii	"--\015\000"
 4848 00a4 00000000 		.space	4
 4849 00a8 00       		.ascii	"\000"
 4850 00a9 00000000 		.space	7
 4850      000000
 4851 00b0 2D       		.byte	45
 4852 00b1 000000   		.space	3
 4853 00b4 FFFFFFFF 		.word	-1
 4854 00b8 31       		.byte	49
 4855 00b9 000000   		.space	3
 4856 00bc 0B000000 		.word	11
 4857 00c0 43505800 		.ascii	"CPX\000"
 4858 00c4 00000000 		.space	4
 4859 00c8 00       		.ascii	"\000"
 4860 00c9 00000000 		.space	7
 4860      000000
 4861              		.section	.data.arrow_key_string,"aw"
 4862              		.align	2
ARM GAS  /tmp/ccVzm1xY.s 			page 131


 4863              		.set	.LANCHOR6,. + 0
 4866              	arrow_key_string:
 4867 0000 0C000000 		.word	.LC16
 4868              		.section	.data.cmplx_key_string,"aw"
 4869              		.align	2
 4870              		.set	.LANCHOR7,. + 0
 4873              	cmplx_key_string:
 4874 0000 08000000 		.word	.LC15
 4875              		.section	.data.f_shift,"aw"
 4876              		.align	2
 4879              	f_shift:
 4880 0000 29       		.byte	41
 4881 0001 000000   		.space	3
 4882 0004 FFFFFFFF 		.word	-1
 4883              		.section	.data.g_shift,"aw"
 4884              		.align	2
 4887              	g_shift:
 4888 0000 2A       		.byte	42
 4889 0001 000000   		.space	3
 4890 0004 FFFFFFFF 		.word	-1
 4891              		.section	.data.h_shift,"aw"
 4892              		.align	2
 4893              		.set	.LANCHOR15,. + 0
 4896              	h_shift:
 4897 0000 2B       		.byte	43
 4898 0001 000000   		.space	3
 4899 0004 FFFFFFFF 		.word	-1
 4900              		.section	.data.heartbeat,"aw"
 4901              		.align	2
 4902              		.set	.LANCHOR19,. + 0
 4905              	heartbeat:
 4906 0000 62       		.byte	98
 4907 0001 000000   		.space	3
 4908 0004 FFFFFFFF 		.word	-1
 4909              		.section	.data.no_key,"aw"
 4910              		.align	2
 4911              		.set	.LANCHOR10,. + 0
 4914              	no_key:
 4915 0000 2E       		.byte	46
 4916 0001 000000   		.space	3
 4917 0004 00000000 		.word	0
 4918              		.section	.data.release,"aw"
 4919              		.align	2
 4920              		.set	.LANCHOR11,. + 0
 4923              	release:
 4924 0000 63       		.byte	99
 4925 0001 000000   		.space	3
 4926 0004 FFFFFFFF 		.word	-1
 4927              		.section	.data.spaces,"aw"
 4928              		.align	2
 4929              		.set	.LANCHOR9,. + 0
 4932              	spaces:
 4933 0000 20202020 		.ascii	"                     \000"
 4933      20202020 
 4933      20202020 
 4933      20202020 
 4933      20202020 
ARM GAS  /tmp/ccVzm1xY.s 			page 132


 4934              		.section	.rodata.MID_MENU,"a"
 4935              		.align	2
 4936              		.set	.LANCHOR18,. + 0
 4939              	MID_MENU:
 4940 0000 00000000 		.word	.LC14
 4941 0004 00000000 		.word	mid_menu
 4942 0008 00000000 		.word	0
 4943 000c 00000000 		.word	0
 4944              		.section	.rodata.Menus,"a"
 4945              		.align	2
 4948              	Menus:
 4949 0000 4D5F426C 		.ascii	"M_Blank\000"
 4949      616E6B00 
 4950 0008 00000000 		.space	7
 4950      000000
 4951 000f 00       		.space	1
 4952 0010 2E       		.byte	46
 4953 0011 000000   		.space	3
 4954 0014 FFFFFFFF 		.word	-1
 4955 0018 2E       		.byte	46
 4956 0019 000000   		.space	3
 4957 001c FFFFFFFF 		.word	-1
 4958 0020 00       		.ascii	"\000"
 4959 0021 00000000 		.space	7
 4959      000000
 4960 0028 00       		.ascii	"\000"
 4961 0029 00000000 		.space	7
 4961      000000
 4962 0030 2E       		.byte	46
 4963 0031 000000   		.space	3
 4964 0034 FFFFFFFF 		.word	-1
 4965 0038 2E       		.byte	46
 4966 0039 000000   		.space	3
 4967 003c FFFFFFFF 		.word	-1
 4968 0040 00       		.ascii	"\000"
 4969 0041 00000000 		.space	7
 4969      000000
 4970 0048 00       		.ascii	"\000"
 4971 0049 00000000 		.space	7
 4971      000000
 4972 0050 2E       		.byte	46
 4973 0051 000000   		.space	3
 4974 0054 FFFFFFFF 		.word	-1
 4975 0058 2E       		.byte	46
 4976 0059 000000   		.space	3
 4977 005c FFFFFFFF 		.word	-1
 4978 0060 00       		.ascii	"\000"
 4979 0061 00000000 		.space	7
 4979      000000
 4980 0068 00       		.ascii	"\000"
 4981 0069 00000000 		.space	7
 4981      000000
 4982 0070 2E       		.byte	46
 4983 0071 000000   		.space	3
 4984 0074 FFFFFFFF 		.word	-1
 4985 0078 2E       		.byte	46
 4986 0079 000000   		.space	3
ARM GAS  /tmp/ccVzm1xY.s 			page 133


 4987 007c FFFFFFFF 		.word	-1
 4988 0080 00       		.ascii	"\000"
 4989 0081 00000000 		.space	7
 4989      000000
 4990 0088 00       		.ascii	"\000"
 4991 0089 00000000 		.space	7
 4991      000000
 4992 0090 2C       		.byte	44
 4993 0091 000000   		.space	3
 4994 0094 FFFFFFFF 		.word	-1
 4995 0098 2E       		.byte	46
 4996 0099 000000   		.space	3
 4997 009c FFFFFFFF 		.word	-1
 4998 00a0 2D2D0D00 		.ascii	"--\015\000"
 4999 00a4 00000000 		.space	4
 5000 00a8 00       		.ascii	"\000"
 5001 00a9 00000000 		.space	7
 5001      000000
 5002 00b0 2D       		.byte	45
 5003 00b1 000000   		.space	3
 5004 00b4 FFFFFFFF 		.word	-1
 5005 00b8 31       		.byte	49
 5006 00b9 000000   		.space	3
 5007 00bc 0B000000 		.word	11
 5008 00c0 43505800 		.ascii	"CPX\000"
 5009 00c4 00000000 		.space	4
 5010 00c8 00       		.ascii	"\000"
 5011 00c9 00000000 		.space	7
 5011      000000
 5012 00d0 4D5F436C 		.ascii	"M_Clear\000"
 5012      65617200 
 5013 00d8 00000000 		.space	7
 5013      000000
 5014 00df 00       		.space	1
 5015 00e0 10       		.byte	16
 5016 00e1 000000   		.space	3
 5017 00e4 01000000 		.word	1
 5018 00e8 34       		.byte	52
 5019 00e9 000000   		.space	3
 5020 00ec 44010000 		.word	324
 5021 00f0 434C5072 		.ascii	"CLProg\000"
 5021      6F6700
 5022 00f7 00       		.space	1
 5023 00f8 434C5041 		.ascii	"CLPAll\000"
 5023      6C6C00
 5024 00ff 00       		.space	1
 5025 0100 10       		.byte	16
 5026 0101 000000   		.space	3
 5027 0104 02000000 		.word	2
 5028 0108 34       		.byte	52
 5029 0109 000000   		.space	3
 5030 010c 3E010000 		.word	318
 5031 0110 434C9100 		.ascii	"CL\221\000"
 5032 0114 00000000 		.space	4
 5033 0118 434C5265 		.ascii	"CLReg\000"
 5033      6700
 5034 011e 0000     		.space	2
ARM GAS  /tmp/ccVzm1xY.s 			page 134


 5035 0120 10       		.byte	16
 5036 0121 000000   		.space	3
 5037 0124 03000000 		.word	3
 5038 0128 34       		.byte	52
 5039 0129 000000   		.space	3
 5040 012c 74010000 		.word	372
 5041 0130 434C7800 		.ascii	"CLx\000"
 5042 0134 00000000 		.space	4
 5043 0138 434C06A0 		.ascii	"CL\006\240\000"
 5043      00
 5044 013d 000000   		.space	3
 5045 0140 34       		.byte	52
 5046 0141 000000   		.space	3
 5047 0144 40010000 		.word	320
 5048 0148 34       		.byte	52
 5049 0149 000000   		.space	3
 5050 014c 41010000 		.word	321
 5051 0150 434C5374 		.ascii	"CLStk\000"
 5051      6B00
 5052 0156 0000     		.space	2
 5053 0158 434C416C 		.ascii	"CLAll\000"
 5053      6C00
 5054 015e 0000     		.space	2
 5055 0160 2C       		.byte	44
 5056 0161 000000   		.space	3
 5057 0164 FFFFFFFF 		.word	-1
 5058 0168 2E       		.byte	46
 5059 0169 000000   		.space	3
 5060 016c FFFFFFFF 		.word	-1
 5061 0170 2D2D0D00 		.ascii	"--\015\000"
 5062 0174 00000000 		.space	4
 5063 0178 00       		.ascii	"\000"
 5064 0179 00000000 		.space	7
 5064      000000
 5065 0180 2D       		.byte	45
 5066 0181 000000   		.space	3
 5067 0184 FFFFFFFF 		.word	-1
 5068 0188 2E       		.byte	46
 5069 0189 000000   		.space	3
 5070 018c FFFFFFFF 		.word	-1
 5071 0190 43505800 		.ascii	"CPX\000"
 5072 0194 00000000 		.space	4
 5073 0198 00       		.ascii	"\000"
 5074 0199 00000000 		.space	7
 5074      000000
 5075 01a0 4D5F4469 		.ascii	"M_Disp\000"
 5075      737000
 5076 01a7 00000000 		.space	8
 5076      00000000 
 5077 01af 00       		.space	1
 5078 01b0 00       		.byte	0
 5079 01b1 000000   		.space	3
 5080 01b4 03000000 		.word	3
 5081 01b8 05       		.byte	5
 5082 01b9 000000   		.space	3
 5083 01bc 01000000 		.word	1
 5084 01c0 414C4C00 		.ascii	"ALL\000"
ARM GAS  /tmp/ccVzm1xY.s 			page 135


 5085 01c4 00000000 		.space	4
 5086 01c8 6120622F 		.ascii	"a b/c\000"
 5086      6300
 5087 01ce 0000     		.space	2
 5088 01d0 01       		.byte	1
 5089 01d1 000000   		.space	3
 5090 01d4 03000000 		.word	3
 5091 01d8 05       		.byte	5
 5092 01d9 000000   		.space	3
 5093 01dc 02000000 		.word	2
 5094 01e0 46495800 		.ascii	"FIX\000"
 5095 01e4 00000000 		.space	4
 5096 01e8 642F6300 		.ascii	"d/c\000"
 5097 01ec 00000000 		.space	4
 5098 01f0 02       		.byte	2
 5099 01f1 000000   		.space	3
 5100 01f4 03000000 		.word	3
 5101 01f8 06       		.byte	6
 5102 01f9 000000   		.space	3
 5103 01fc 01000000 		.word	1
 5104 0200 53434900 		.ascii	"SCI\000"
 5105 0204 00000000 		.space	4
 5106 0208 482E4D53 		.ascii	"H.MS\000"
 5106      00
 5107 020d 000000   		.space	3
 5108 0210 03       		.byte	3
 5109 0211 000000   		.space	3
 5110 0214 03000000 		.word	3
 5111 0218 07       		.byte	7
 5112 0219 000000   		.space	3
 5113 021c 01000000 		.word	1
 5114 0220 454E4700 		.ascii	"ENG\000"
 5115 0224 00000000 		.space	4
 5116 0228 482E6400 		.ascii	"H.d\000"
 5117 022c 00000000 		.space	4
 5118 0230 2C       		.byte	44
 5119 0231 000000   		.space	3
 5120 0234 FFFFFFFF 		.word	-1
 5121 0238 26       		.byte	38
 5122 0239 000000   		.space	3
 5123 023c 03000000 		.word	3
 5124 0240 2D2D0D00 		.ascii	"--\015\000"
 5125 0244 00000000 		.space	4
 5126 0248 2E2F2C00 		.ascii	"./,\000"
 5127 024c 00000000 		.space	4
 5128 0250 2D       		.byte	45
 5129 0251 000000   		.space	3
 5130 0254 FFFFFFFF 		.word	-1
 5131 0258 2E       		.byte	46
 5132 0259 000000   		.space	3
 5133 025c FFFFFFFF 		.word	-1
 5134 0260 43505800 		.ascii	"CPX\000"
 5135 0264 00000000 		.space	4
 5136 0268 00       		.ascii	"\000"
 5137 0269 00000000 		.space	7
 5137      000000
 5138 0270 4D5F4261 		.ascii	"M_Base\000"
ARM GAS  /tmp/ccVzm1xY.s 			page 136


 5138      736500
 5139 0277 00000000 		.space	8
 5139      00000000 
 5140 027f 00       		.space	1
 5141 0280 0E       		.byte	14
 5142 0281 000000   		.space	3
 5143 0284 01000000 		.word	1
 5144 0288 0E       		.byte	14
 5145 0289 000000   		.space	3
 5146 028c 03000000 		.word	3
 5147 0290 42494E00 		.ascii	"BIN\000"
 5148 0294 00000000 		.space	4
 5149 0298 6E6F7400 		.ascii	"not\000"
 5150 029c 00000000 		.space	4
 5151 02a0 0E       		.byte	14
 5152 02a1 000000   		.space	3
 5153 02a4 02000000 		.word	2
 5154 02a8 13       		.byte	19
 5155 02a9 000000   		.space	3
 5156 02ac 03000000 		.word	3
 5157 02b0 4F435400 		.ascii	"OCT\000"
 5158 02b4 00000000 		.space	4
 5159 02b8 616E6400 		.ascii	"and\000"
 5160 02bc 00000000 		.space	4
 5161 02c0 0F       		.byte	15
 5162 02c1 000000   		.space	3
 5163 02c4 01000000 		.word	1
 5164 02c8 14       		.byte	20
 5165 02c9 000000   		.space	3
 5166 02cc 03000000 		.word	3
 5167 02d0 44454300 		.ascii	"DEC\000"
 5168 02d4 00000000 		.space	4
 5169 02d8 6F7200   		.ascii	"or\000"
 5170 02db 00000000 		.space	5
 5170      00
 5171 02e0 0F       		.byte	15
 5172 02e1 000000   		.space	3
 5173 02e4 02000000 		.word	2
 5174 02e8 15       		.byte	21
 5175 02e9 000000   		.space	3
 5176 02ec 03000000 		.word	3
 5177 02f0 48455800 		.ascii	"HEX\000"
 5178 02f4 00000000 		.space	4
 5179 02f8 786F7200 		.ascii	"xor\000"
 5180 02fc 00000000 		.space	4
 5181 0300 2C       		.byte	44
 5182 0301 000000   		.space	3
 5183 0304 FFFFFFFF 		.word	-1
 5184 0308 16       		.byte	22
 5185 0309 000000   		.space	3
 5186 030c 03000000 		.word	3
 5187 0310 2D2D0D00 		.ascii	"--\015\000"
 5188 0314 00000000 		.space	4
 5189 0318 524D4452 		.ascii	"RMDR\000"
 5189      00
 5190 031d 000000   		.space	3
 5191 0320 2D       		.byte	45
ARM GAS  /tmp/ccVzm1xY.s 			page 137


 5192 0321 000000   		.space	3
 5193 0324 FFFFFFFF 		.word	-1
 5194 0328 07       		.byte	7
 5195 0329 000000   		.space	3
 5196 032c 01000000 		.word	1
 5197 0330 43505800 		.ascii	"CPX\000"
 5198 0334 00000000 		.space	4
 5199 0338 482E6400 		.ascii	"H.d\000"
 5200 033c 00000000 		.space	4
 5201 0340 4D5F416E 		.ascii	"M_Angles\000"
 5201      676C6573 
 5201      00
 5202 0349 00000000 		.space	6
 5202      0000
 5203 034f 00       		.space	1
 5204 0350 06       		.byte	6
 5205 0351 000000   		.space	3
 5206 0354 02000000 		.word	2
 5207 0358 04       		.byte	4
 5208 0359 000000   		.space	3
 5209 035c 01000000 		.word	1
 5210 0360 44454700 		.ascii	"DEG\000"
 5211 0364 00000000 		.space	4
 5212 0368 500D5200 		.ascii	"P\015R\000"
 5213 036c 00000000 		.space	4
 5214 0370 07       		.byte	7
 5215 0371 000000   		.space	3
 5216 0374 02000000 		.word	2
 5217 0378 04       		.byte	4
 5218 0379 000000   		.space	3
 5219 037c 02000000 		.word	2
 5220 0380 52414400 		.ascii	"RAD\000"
 5221 0384 00000000 		.space	4
 5222 0388 520D5000 		.ascii	"R\015P\000"
 5223 038c 00000000 		.space	4
 5224 0390 08       		.byte	8
 5225 0391 000000   		.space	3
 5226 0394 02000000 		.word	2
 5227 0398 00       		.byte	0
 5228 0399 000000   		.space	3
 5229 039c 01000000 		.word	1
 5230 03a0 47524144 		.ascii	"GRAD\000"
 5230      00
 5231 03a5 000000   		.space	3
 5232 03a8 48595000 		.ascii	"HYP\000"
 5233 03ac 00000000 		.space	4
 5234 03b0 06       		.byte	6
 5235 03b1 000000   		.space	3
 5236 03b4 01000000 		.word	1
 5237 03b8 07       		.byte	7
 5238 03b9 000000   		.space	3
 5239 03bc 01000000 		.word	1
 5240 03c0 482E4D53 		.ascii	"H.MS\000"
 5240      00
 5241 03c5 000000   		.space	3
 5242 03c8 482E6400 		.ascii	"H.d\000"
 5243 03cc 00000000 		.space	4
ARM GAS  /tmp/ccVzm1xY.s 			page 138


 5244 03d0 2C       		.byte	44
 5245 03d1 000000   		.space	3
 5246 03d4 FFFFFFFF 		.word	-1
 5247 03d8 00       		.byte	0
 5248 03d9 000000   		.space	3
 5249 03dc 02000000 		.word	2
 5250 03e0 2D2D0D00 		.ascii	"--\015\000"
 5251 03e4 00000000 		.space	4
 5252 03e8 4859509D 		.ascii	"HYP\235\000"
 5252      00
 5253 03ed 000000   		.space	3
 5254 03f0 2D       		.byte	45
 5255 03f1 000000   		.space	3
 5256 03f4 FFFFFFFF 		.word	-1
 5257 03f8 2E       		.byte	46
 5258 03f9 000000   		.space	3
 5259 03fc FFFFFFFF 		.word	-1
 5260 0400 43505800 		.ascii	"CPX\000"
 5261 0404 00000000 		.space	4
 5262 0408 00       		.ascii	"\000"
 5263 0409 00000000 		.space	7
 5263      000000
 5264 0410 4D5F4D69 		.ascii	"M_Misc\000"
 5264      736300
 5265 0417 00000000 		.space	8
 5265      00000000 
 5266 041f 00       		.space	1
 5267 0420 25       		.byte	37
 5268 0421 000000   		.space	3
 5269 0424 01000000 		.word	1
 5270 0428 14       		.byte	20
 5271 0429 000000   		.space	3
 5272 042c 01000000 		.word	1
 5273 0430 7C587C00 		.ascii	"|X|\000"
 5274 0434 00000000 		.space	4
 5275 0438 329C00   		.ascii	"2\234\000"
 5276 043b 00000000 		.space	5
 5276      00
 5277 0440 25       		.byte	37
 5278 0441 000000   		.space	3
 5279 0444 02000000 		.word	2
 5280 0448 14       		.byte	20
 5281 0449 000000   		.space	3
 5282 044c 02000000 		.word	2
 5283 0450 524E4400 		.ascii	"RND\000"
 5284 0454 00000000 		.space	4
 5285 0458 4C6F67BA 		.ascii	"Log\272\000"
 5285      00
 5286 045d 000000   		.space	3
 5287 0460 26       		.byte	38
 5288 0461 000000   		.space	3
 5289 0464 01000000 		.word	1
 5290 0468 15       		.byte	21
 5291 0469 000000   		.space	3
 5292 046c 02000000 		.word	2
 5293 0470 49506172 		.ascii	"IPart\000"
 5293      7400
ARM GAS  /tmp/ccVzm1xY.s 			page 139


 5294 0476 0000     		.space	2
 5295 0478 4C6F678B 		.ascii	"Log\213\000"
 5295      00
 5296 047d 000000   		.space	3
 5297 0480 26       		.byte	38
 5298 0481 000000   		.space	3
 5299 0484 02000000 		.word	2
 5300 0488 16       		.byte	22
 5301 0489 000000   		.space	3
 5302 048c 02000000 		.word	2
 5303 0490 46506172 		.ascii	"FPart\000"
 5303      7400
 5304 0496 0000     		.space	2
 5305 0498 7C7C656C 		.ascii	"||el\000"
 5305      00
 5306 049d 000000   		.space	3
 5307 04a0 2C       		.byte	44
 5308 04a1 000000   		.space	3
 5309 04a4 FFFFFFFF 		.word	-1
 5310 04a8 22       		.byte	34
 5311 04a9 000000   		.space	3
 5312 04ac 02000000 		.word	2
 5313 04b0 2D2D0D00 		.ascii	"--\015\000"
 5314 04b4 00000000 		.space	4
 5315 04b8 832500   		.ascii	"\203%\000"
 5316 04bb 00000000 		.space	5
 5316      00
 5317 04c0 2D       		.byte	45
 5318 04c1 000000   		.space	3
 5319 04c4 FFFFFFFF 		.word	-1
 5320 04c8 2E       		.byte	46
 5321 04c9 000000   		.space	3
 5322 04cc FFFFFFFF 		.word	-1
 5323 04d0 43505800 		.ascii	"CPX\000"
 5324 04d4 00000000 		.space	4
 5325 04d8 00       		.ascii	"\000"
 5326 04d9 00000000 		.space	7
 5326      000000
 5327 04e0 4D5F5377 		.ascii	"M_Swap\000"
 5327      617000
 5328 04e7 00000000 		.space	8
 5328      00000000 
 5329 04ef 00       		.space	1
 5330 04f0 0D       		.byte	13
 5331 04f1 000000   		.space	3
 5332 04f4 01000000 		.word	1
 5333 04f8 34       		.byte	52
 5334 04f9 000000   		.space	3
 5335 04fc 00A60000 		.word	42496
 5336 0500 53686F77 		.ascii	"Show\016\000"
 5336      0E00
 5337 0506 0000     		.space	2
 5338 0508 5B175D00 		.ascii	"[\027]\000"
 5339 050c 00000000 		.space	4
 5340 0510 0D       		.byte	13
 5341 0511 000000   		.space	3
 5342 0514 02000000 		.word	2
ARM GAS  /tmp/ccVzm1xY.s 			page 140


 5343 0518 2E       		.byte	46
 5344 0519 000000   		.space	3
 5345 051c FFFFFFFF 		.word	-1
 5346 0520 53686F77 		.ascii	"Show\015\000"
 5346      0D00
 5347 0526 0000     		.space	2
 5348 0528 00       		.ascii	"\000"
 5349 0529 00000000 		.space	7
 5349      000000
 5350 0530 0D       		.byte	13
 5351 0531 000000   		.space	3
 5352 0534 03000000 		.word	3
 5353 0538 34       		.byte	52
 5354 0539 000000   		.space	3
 5355 053c 00330000 		.word	13056
 5356 0540 78173F00 		.ascii	"x\027?\000"
 5357 0544 00000000 		.space	4
 5358 0548 7A173F00 		.ascii	"z\027?\000"
 5359 054c 00000000 		.space	4
 5360 0550 34       		.byte	52
 5361 0551 000000   		.space	3
 5362 0554 00320000 		.word	12800
 5363 0558 34       		.byte	52
 5364 0559 000000   		.space	3
 5365 055c 00340000 		.word	13312
 5366 0560 79173F00 		.ascii	"y\027?\000"
 5367 0564 00000000 		.space	4
 5368 0568 74173F00 		.ascii	"t\027?\000"
 5369 056c 00000000 		.space	4
 5370 0570 2C       		.byte	44
 5371 0571 000000   		.space	3
 5372 0574 FFFFFFFF 		.word	-1
 5373 0578 2E       		.byte	46
 5374 0579 000000   		.space	3
 5375 057c FFFFFFFF 		.word	-1
 5376 0580 2D2D0D00 		.ascii	"--\015\000"
 5377 0584 00000000 		.space	4
 5378 0588 00       		.ascii	"\000"
 5379 0589 00000000 		.space	7
 5379      000000
 5380 0590 2D       		.byte	45
 5381 0591 000000   		.space	3
 5382 0594 FFFFFFFF 		.word	-1
 5383 0598 2E       		.byte	46
 5384 0599 000000   		.space	3
 5385 059c FFFFFFFF 		.word	-1
 5386 05a0 43505800 		.ascii	"CPX\000"
 5387 05a4 00000000 		.space	4
 5388 05a8 00       		.ascii	"\000"
 5389 05a9 00000000 		.space	7
 5389      000000
 5390 05b0 4D5F5072 		.ascii	"M_Program\000"
 5390      6F677261 
 5390      6D00
 5391 05ba 00000000 		.space	5
 5391      00
 5392 05bf 00       		.space	1
ARM GAS  /tmp/ccVzm1xY.s 			page 141


 5393 05c0 27       		.byte	39
 5394 05c1 000000   		.space	3
 5395 05c4 01000000 		.word	1
 5396 05c8 28       		.byte	40
 5397 05c9 000000   		.space	3
 5398 05cc 01000000 		.word	1
 5399 05d0 4C424C00 		.ascii	"LBL\000"
 5400 05d4 00000000 		.space	4
 5401 05d8 44534500 		.ascii	"DSE\000"
 5402 05dc 00000000 		.space	4
 5403 05e0 27       		.byte	39
 5404 05e1 000000   		.space	3
 5405 05e4 02000000 		.word	2
 5406 05e8 28       		.byte	40
 5407 05e9 000000   		.space	3
 5408 05ec 02000000 		.word	2
 5409 05f0 52544E00 		.ascii	"RTN\000"
 5410 05f4 00000000 		.space	4
 5411 05f8 49534700 		.ascii	"ISG\000"
 5412 05fc 00000000 		.space	4
 5413 0600 25       		.byte	37
 5414 0601 000000   		.space	3
 5415 0604 03000000 		.word	3
 5416 0608 34       		.byte	52
 5417 0609 000000   		.space	3
 5418 060c 00600000 		.word	24576
 5419 0610 50617573 		.ascii	"Pause\000"
 5419      6500
 5420 0616 0000     		.space	2
 5421 0618 44454300 		.ascii	"DEC\000"
 5422 061c 00000000 		.space	4
 5423 0620 12       		.byte	18
 5424 0621 000000   		.space	3
 5425 0624 03000000 		.word	3
 5426 0628 34       		.byte	52
 5427 0629 000000   		.space	3
 5428 062c 00610000 		.word	24832
 5429 0630 47544F00 		.ascii	"GTO\000"
 5430 0634 00000000 		.space	4
 5431 0638 494E4300 		.ascii	"INC\000"
 5432 063c 00000000 		.space	4
 5433 0640 2C       		.byte	44
 5434 0641 000000   		.space	3
 5435 0644 FFFFFFFF 		.word	-1
 5436 0648 34       		.byte	52
 5437 0649 000000   		.space	3
 5438 064c 00570000 		.word	22272
 5439 0650 2D2D0D00 		.ascii	"--\015\000"
 5440 0654 00000000 		.space	4
 5441 0658 4241434B 		.ascii	"BACK\000"
 5441      00
 5442 065d 000000   		.space	3
 5443 0660 2D       		.byte	45
 5444 0661 000000   		.space	3
 5445 0664 FFFFFFFF 		.word	-1
 5446 0668 34       		.byte	52
 5447 0669 000000   		.space	3
ARM GAS  /tmp/ccVzm1xY.s 			page 142


 5448 066c 00560000 		.word	22016
 5449 0670 43505800 		.ascii	"CPX\000"
 5450 0674 00000000 		.space	4
 5451 0678 534B4950 		.ascii	"SKIP\000"
 5451      00
 5452 067d 000000   		.space	3
 5453 0680 4D5F5365 		.ascii	"M_Setup1\000"
 5453      74757031 
 5453      00
 5454 0689 00000000 		.space	6
 5454      0000
 5455 068f 00       		.space	1
 5456 0690 32       		.byte	50
 5457 0691 000000   		.space	3
 5458 0694 00000000 		.word	0
 5459 0698 30       		.byte	48
 5460 0699 000000   		.space	3
 5461 069c 00000000 		.word	0
 5462 06a0 45584954 		.ascii	"EXIT\000"
 5462      00
 5463 06a5 000000   		.space	3
 5464 06a8 53797374 		.ascii	"System\000"
 5464      656D00
 5465 06af 00       		.space	1
 5466 06b0 31       		.byte	49
 5467 06b1 000000   		.space	3
 5468 06b4 09000000 		.word	9
 5469 06b8 2E       		.byte	46
 5470 06b9 000000   		.space	3
 5471 06bc FFFFFFFF 		.word	-1
 5472 06c0 48454C50 		.ascii	"HELP\000"
 5472      00
 5473 06c5 000000   		.space	3
 5474 06c8 00       		.ascii	"\000"
 5475 06c9 00000000 		.space	7
 5475      000000
 5476 06d0 31       		.byte	49
 5477 06d1 000000   		.space	3
 5478 06d4 02000000 		.word	2
 5479 06d8 31       		.byte	49
 5480 06d9 000000   		.space	3
 5481 06dc 06000000 		.word	6
 5482 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5482      4F00
 5483 06e6 0000     		.space	2
 5484 06e8 53765241 		.ascii	"SvRAM\000"
 5484      4D00
 5485 06ee 0000     		.space	2
 5486 06f0 31       		.byte	49
 5487 06f1 000000   		.space	3
 5488 06f4 03000000 		.word	3
 5489 06f8 31       		.byte	49
 5490 06f9 000000   		.space	3
 5491 06fc 07000000 		.word	7
 5492 0700 4F6E5243 		.ascii	"OnRCL\000"
 5492      4C00
 5493 0706 0000     		.space	2
ARM GAS  /tmp/ccVzm1xY.s 			page 143


 5494 0708 4C645241 		.ascii	"LdRAM\000"
 5494      4D00
 5495 070e 0000     		.space	2
 5496 0710 2C       		.byte	44
 5497 0711 000000   		.space	3
 5498 0714 FFFFFFFF 		.word	-1
 5499 0718 2E       		.byte	46
 5500 0719 000000   		.space	3
 5501 071c FFFFFFFF 		.word	-1
 5502 0720 2D2D0D00 		.ascii	"--\015\000"
 5503 0724 00000000 		.space	4
 5504 0728 00       		.ascii	"\000"
 5505 0729 00000000 		.space	7
 5505      000000
 5506 0730 2D       		.byte	45
 5507 0731 000000   		.space	3
 5508 0734 FFFFFFFF 		.word	-1
 5509 0738 2E       		.byte	46
 5510 0739 000000   		.space	3
 5511 073c FFFFFFFF 		.word	-1
 5512 0740 43505800 		.ascii	"CPX\000"
 5513 0744 00000000 		.space	4
 5514 0748 00       		.ascii	"\000"
 5515 0749 00000000 		.space	7
 5515      000000
 5516 0750 4D5F4172 		.ascii	"M_Arrow\000"
 5516      726F7700 
 5517 0758 00000000 		.space	7
 5517      000000
 5518 075f 00       		.space	1
 5519 0760 0E       		.byte	14
 5520 0761 000000   		.space	3
 5521 0764 01000000 		.word	1
 5522 0768 06       		.byte	6
 5523 0769 000000   		.space	3
 5524 076c 02000000 		.word	2
 5525 0770 0D42696E 		.ascii	"\015Bin\000"
 5525      00
 5526 0775 000000   		.space	3
 5527 0778 0D444547 		.ascii	"\015DEG\000"
 5527      00
 5528 077d 000000   		.space	3
 5529 0780 0E       		.byte	14
 5530 0781 000000   		.space	3
 5531 0784 02000000 		.word	2
 5532 0788 07       		.byte	7
 5533 0789 000000   		.space	3
 5534 078c 02000000 		.word	2
 5535 0790 0D4F6374 		.ascii	"\015Oct\000"
 5535      00
 5536 0795 000000   		.space	3
 5537 0798 0D524144 		.ascii	"\015RAD\000"
 5537      00
 5538 079d 000000   		.space	3
 5539 07a0 0F       		.byte	15
 5540 07a1 000000   		.space	3
 5541 07a4 01000000 		.word	1
ARM GAS  /tmp/ccVzm1xY.s 			page 144


 5542 07a8 08       		.byte	8
 5543 07a9 000000   		.space	3
 5544 07ac 02000000 		.word	2
 5545 07b0 0D446563 		.ascii	"\015Dec\000"
 5545      00
 5546 07b5 000000   		.space	3
 5547 07b8 0D477261 		.ascii	"\015Grad\000"
 5547      6400
 5548 07be 0000     		.space	2
 5549 07c0 0F       		.byte	15
 5550 07c1 000000   		.space	3
 5551 07c4 02000000 		.word	2
 5552 07c8 06       		.byte	6
 5553 07c9 000000   		.space	3
 5554 07cc 01000000 		.word	1
 5555 07d0 0D486578 		.ascii	"\015Hex\000"
 5555      00
 5556 07d5 000000   		.space	3
 5557 07d8 0D484D53 		.ascii	"\015HMS\000"
 5557      00
 5558 07dd 000000   		.space	3
 5559 07e0 2C       		.byte	44
 5560 07e1 000000   		.space	3
 5561 07e4 FFFFFFFF 		.word	-1
 5562 07e8 07       		.byte	7
 5563 07e9 000000   		.space	3
 5564 07ec 01000000 		.word	1
 5565 07f0 2D2D0D00 		.ascii	"--\015\000"
 5566 07f4 00000000 		.space	4
 5567 07f8 484D530D 		.ascii	"HMS\015\000"
 5567      00
 5568 07fd 000000   		.space	3
 5569 0800 2D       		.byte	45
 5570 0801 000000   		.space	3
 5571 0804 FFFFFFFF 		.word	-1
 5572 0808 2E       		.byte	46
 5573 0809 000000   		.space	3
 5574 080c FFFFFFFF 		.word	-1
 5575 0810 43505800 		.ascii	"CPX\000"
 5576 0814 00000000 		.space	4
 5577 0818 00       		.ascii	"\000"
 5578 0819 00000000 		.space	7
 5578      000000
 5579 0820 4D5F466C 		.ascii	"M_Flags\000"
 5579      61677300 
 5580 0828 00000000 		.space	7
 5580      000000
 5581 082f 00       		.space	1
 5582 0830 1E       		.byte	30
 5583 0831 000000   		.space	3
 5584 0834 01000000 		.word	1
 5585 0838 34       		.byte	52
 5586 0839 000000   		.space	3
 5587 083c 00740000 		.word	29696
 5588 0840 53465F00 		.ascii	"SF_\000"
 5589 0844 00000000 		.space	4
 5590 0848 46533F00 		.ascii	"FS?\000"
ARM GAS  /tmp/ccVzm1xY.s 			page 145


 5591 084c 00000000 		.space	4
 5592 0850 1E       		.byte	30
 5593 0851 000000   		.space	3
 5594 0854 02000000 		.word	2
 5595 0858 34       		.byte	52
 5596 0859 000000   		.space	3
 5597 085c 00750000 		.word	29952
 5598 0860 43465F00 		.ascii	"CF_\000"
 5599 0864 00000000 		.space	4
 5600 0868 46433F00 		.ascii	"FC?\000"
 5601 086c 00000000 		.space	4
 5602 0870 1F       		.byte	31
 5603 0871 000000   		.space	3
 5604 0874 01000000 		.word	1
 5605 0878 34       		.byte	52
 5606 0879 000000   		.space	3
 5607 087c 00500000 		.word	20480
 5608 0880 783D3F00 		.ascii	"x=?\000"
 5609 0884 00000000 		.space	4
 5610 0888 783C3F00 		.ascii	"x<?\000"
 5611 088c 00000000 		.space	4
 5612 0890 1F       		.byte	31
 5613 0891 000000   		.space	3
 5614 0894 02000000 		.word	2
 5615 0898 34       		.byte	52
 5616 0899 000000   		.space	3
 5617 089c 00510000 		.word	20736
 5618 08a0 780B3F00 		.ascii	"x\013?\000"
 5619 08a4 00000000 		.space	4
 5620 08a8 783C3D3F 		.ascii	"x<=?\000"
 5620      00
 5621 08ad 000000   		.space	3
 5622 08b0 2C       		.byte	44
 5623 08b1 000000   		.space	3
 5624 08b4 FFFFFFFF 		.word	-1
 5625 08b8 34       		.byte	52
 5626 08b9 000000   		.space	3
 5627 08bc 00530000 		.word	21248
 5628 08c0 2D2D0D00 		.ascii	"--\015\000"
 5629 08c4 00000000 		.space	4
 5630 08c8 783E3D3F 		.ascii	"x>=?\000"
 5630      00
 5631 08cd 000000   		.space	3
 5632 08d0 2D       		.byte	45
 5633 08d1 000000   		.space	3
 5634 08d4 FFFFFFFF 		.word	-1
 5635 08d8 34       		.byte	52
 5636 08d9 000000   		.space	3
 5637 08dc 00520000 		.word	20992
 5638 08e0 43505800 		.ascii	"CPX\000"
 5639 08e4 00000000 		.space	4
 5640 08e8 783E3F00 		.ascii	"x>?\000"
 5641 08ec 00000000 		.space	4
 5642 08f0 4D5F5072 		.ascii	"M_Prob\000"
 5642      6F6200
 5643 08f7 00000000 		.space	8
 5643      00000000 
ARM GAS  /tmp/ccVzm1xY.s 			page 146


 5644 08ff 00       		.space	1
 5645 0900 18       		.byte	24
 5646 0901 000000   		.space	3
 5647 0904 03000000 		.word	3
 5648 0908 34       		.byte	52
 5649 0909 000000   		.space	3
 5650 090c 31020000 		.word	561
 5651 0910 46616374 		.ascii	"Fact!\000"
 5651      2100
 5652 0916 0000     		.space	2
 5653 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5653      00
 5654 091d 000000   		.space	3
 5655 0920 18       		.byte	24
 5656 0921 000000   		.space	3
 5657 0924 01000000 		.word	1
 5658 0928 19       		.byte	25
 5659 0929 000000   		.space	3
 5660 092c 01000000 		.word	1
 5661 0930 43792C78 		.ascii	"Cy,x\000"
 5661      00
 5662 0935 000000   		.space	3
 5663 0938 9400     		.ascii	"\224\000"
 5664 093a 00000000 		.space	6
 5664      0000
 5665 0940 18       		.byte	24
 5666 0941 000000   		.space	3
 5667 0944 02000000 		.word	2
 5668 0948 19       		.byte	25
 5669 0949 000000   		.space	3
 5670 094c 02000000 		.word	2
 5671 0950 50792C78 		.ascii	"Py,x\000"
 5671      00
 5672 0955 000000   		.space	3
 5673 0958 949D00   		.ascii	"\224\235\000"
 5674 095b 00000000 		.space	5
 5674      00
 5675 0960 08       		.byte	8
 5676 0961 000000   		.space	3
 5677 0964 01000000 		.word	1
 5678 0968 34       		.byte	52
 5679 0969 000000   		.space	3
 5680 096c 34010000 		.word	308
 5681 0970 52414E23 		.ascii	"RAN#\000"
 5681      00
 5682 0975 000000   		.space	3
 5683 0978 53454544 		.ascii	"SEED\000"
 5683      00
 5684 097d 000000   		.space	3
 5685 0980 2C       		.byte	44
 5686 0981 000000   		.space	3
 5687 0984 FFFFFFFF 		.word	-1
 5688 0988 2E       		.byte	46
 5689 0989 000000   		.space	3
 5690 098c FFFFFFFF 		.word	-1
 5691 0990 2D2D0D00 		.ascii	"--\015\000"
 5692 0994 00000000 		.space	4
ARM GAS  /tmp/ccVzm1xY.s 			page 147


 5693 0998 00       		.ascii	"\000"
 5694 0999 00000000 		.space	7
 5694      000000
 5695 09a0 2D       		.byte	45
 5696 09a1 000000   		.space	3
 5697 09a4 FFFFFFFF 		.word	-1
 5698 09a8 2E       		.byte	46
 5699 09a9 000000   		.space	3
 5700 09ac FFFFFFFF 		.word	-1
 5701 09b0 43505800 		.ascii	"CPX\000"
 5702 09b4 00000000 		.space	4
 5703 09b8 00       		.ascii	"\000"
 5704 09b9 00000000 		.space	7
 5704      000000
 5705 09c0 4D5F5374 		.ascii	"M_Stats\000"
 5705      61747300 
 5706 09c8 00000000 		.space	7
 5706      000000
 5707 09cf 00       		.space	1
 5708 09d0 1A       		.byte	26
 5709 09d1 000000   		.space	3
 5710 09d4 01000000 		.word	1
 5711 09d8 1A       		.byte	26
 5712 09d9 000000   		.space	3
 5713 09dc 02000000 		.word	2
 5714 09e0 0100     		.ascii	"\001\000"
 5715 09e2 00000000 		.space	6
 5715      0000
 5716 09e8 532E442E 		.ascii	"S.D.\000"
 5716      00
 5717 09ed 000000   		.space	3
 5718 09f0 1B       		.byte	27
 5719 09f1 000000   		.space	3
 5720 09f4 01000000 		.word	1
 5721 09f8 34       		.byte	52
 5722 09f9 000000   		.space	3
 5723 09fc 74020000 		.word	628
 5724 0a00 792D6861 		.ascii	"y-hat\000"
 5724      7400
 5725 0a06 0000     		.space	2
 5726 0a08 782D6861 		.ascii	"x-hat\000"
 5726      7400
 5727 0a0e 0000     		.space	2
 5728 0a10 34       		.byte	52
 5729 0a11 000000   		.space	3
 5730 0a14 27010000 		.word	295
 5731 0a18 34       		.byte	52
 5732 0a19 000000   		.space	3
 5733 0a1c 28010000 		.word	296
 5734 0a20 434F5252 		.ascii	"CORR\000"
 5734      00
 5735 0a25 000000   		.space	3
 5736 0a28 4C2E522E 		.ascii	"L.R.\000"
 5736      00
 5737 0a2d 000000   		.space	3
 5738 0a30 34       		.byte	52
 5739 0a31 000000   		.space	3
ARM GAS  /tmp/ccVzm1xY.s 			page 148


 5740 0a34 32010000 		.word	306
 5741 0a38 34       		.byte	52
 5742 0a39 000000   		.space	3
 5743 0a3c 31010000 		.word	305
 5744 0a40 42657374 		.ascii	"BestF\000"
 5744      4600
 5745 0a46 0000     		.space	2
 5746 0a48 4C6F6746 		.ascii	"LogFit\000"
 5746      697400
 5747 0a4f 00       		.space	1
 5748 0a50 34       		.byte	52
 5749 0a51 000000   		.space	3
 5750 0a54 2E010000 		.word	302
 5751 0a58 34       		.byte	52
 5752 0a59 000000   		.space	3
 5753 0a5c 2F010000 		.word	303
 5754 0a60 4C696E65 		.ascii	"Linear\000"
 5754      617200
 5755 0a67 00       		.space	1
 5756 0a68 45787046 		.ascii	"ExpFit\000"
 5756      697400
 5757 0a6f 00       		.space	1
 5758 0a70 2D       		.byte	45
 5759 0a71 000000   		.space	3
 5760 0a74 FFFFFFFF 		.word	-1
 5761 0a78 34       		.byte	52
 5762 0a79 000000   		.space	3
 5763 0a7c 30010000 		.word	304
 5764 0a80 43505800 		.ascii	"CPX\000"
 5765 0a84 00000000 		.space	4
 5766 0a88 50777246 		.ascii	"PwrFit\000"
 5766      697400
 5767 0a8f 00       		.space	1
 5768 0a90 4D5F5365 		.ascii	"M_Setup2\000"
 5768      74757032 
 5768      00
 5769 0a99 00000000 		.space	6
 5769      0000
 5770 0a9f 00       		.space	1
 5771 0aa0 31       		.byte	49
 5772 0aa1 000000   		.space	3
 5773 0aa4 04000000 		.word	4
 5774 0aa8 2E       		.byte	46
 5775 0aa9 000000   		.space	3
 5776 0aac FFFFFFFF 		.word	-1
 5777 0ab0 53764C49 		.ascii	"SvLIB\000"
 5777      4200
 5778 0ab6 0000     		.space	2
 5779 0ab8 00       		.ascii	"\000"
 5780 0ab9 00000000 		.space	7
 5780      000000
 5781 0ac0 31       		.byte	49
 5782 0ac1 000000   		.space	3
 5783 0ac4 05000000 		.word	5
 5784 0ac8 2E       		.byte	46
 5785 0ac9 000000   		.space	3
 5786 0acc FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccVzm1xY.s 			page 149


 5787 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5787      4200
 5788 0ad6 0000     		.space	2
 5789 0ad8 00       		.ascii	"\000"
 5790 0ad9 00000000 		.space	7
 5790      000000
 5791 0ae0 31       		.byte	49
 5792 0ae1 000000   		.space	3
 5793 0ae4 0A000000 		.word	10
 5794 0ae8 34       		.byte	52
 5795 0ae9 000000   		.space	3
 5796 0aec B2010000 		.word	434
 5797 0af0 53764350 		.ascii	"SvCPRG\000"
 5797      524700
 5798 0af7 00       		.space	1
 5799 0af8 5053544F 		.ascii	"PSTO\000"
 5799      00
 5800 0afd 000000   		.space	3
 5801 0b00 31       		.byte	49
 5802 0b01 000000   		.space	3
 5803 0b04 08000000 		.word	8
 5804 0b08 34       		.byte	52
 5805 0b09 000000   		.space	3
 5806 0b0c B1010000 		.word	433
 5807 0b10 4C645052 		.ascii	"LdPRG\000"
 5807      4700
 5808 0b16 0000     		.space	2
 5809 0b18 5052434C 		.ascii	"PRCL\000"
 5809      00
 5810 0b1d 000000   		.space	3
 5811 0b20 2C       		.byte	44
 5812 0b21 000000   		.space	3
 5813 0b24 FFFFFFFF 		.word	-1
 5814 0b28 2E       		.byte	46
 5815 0b29 000000   		.space	3
 5816 0b2c FFFFFFFF 		.word	-1
 5817 0b30 2D2D0D00 		.ascii	"--\015\000"
 5818 0b34 00000000 		.space	4
 5819 0b38 00       		.ascii	"\000"
 5820 0b39 00000000 		.space	7
 5820      000000
 5821 0b40 2D       		.byte	45
 5822 0b41 000000   		.space	3
 5823 0b44 FFFFFFFF 		.word	-1
 5824 0b48 2E       		.byte	46
 5825 0b49 000000   		.space	3
 5826 0b4c FFFFFFFF 		.word	-1
 5827 0b50 43505800 		.ascii	"CPX\000"
 5828 0b54 00000000 		.space	4
 5829 0b58 00       		.ascii	"\000"
 5830 0b59 00000000 		.space	7
 5830      000000
 5831 0b60 4D5F536F 		.ascii	"M_Solve\000"
 5831      6C766500 
 5832 0b68 00000000 		.space	7
 5832      000000
 5833 0b6f 00       		.space	1
ARM GAS  /tmp/ccVzm1xY.s 			page 150


 5834 0b70 20       		.byte	32
 5835 0b71 000000   		.space	3
 5836 0b74 01000000 		.word	1
 5837 0b78 34       		.byte	52
 5838 0b79 000000   		.space	3
 5839 0b7c 00690000 		.word	26880
 5840 0b80 534C5600 		.ascii	"SLV\000"
 5841 0b84 00000000 		.space	4
 5842 0b88 66272878 		.ascii	"f'(x)\000"
 5842      2900
 5843 0b8e 0000     		.space	2
 5844 0b90 20       		.byte	32
 5845 0b91 000000   		.space	3
 5846 0b94 02000000 		.word	2
 5847 0b98 34       		.byte	52
 5848 0b99 000000   		.space	3
 5849 0b9c 006A0000 		.word	27136
 5850 0ba0 04206478 		.ascii	"\004 dx\000"
 5850      00
 5851 0ba5 000000   		.space	3
 5852 0ba8 66272728 		.ascii	"f''(x)\000"
 5852      782900
 5853 0baf 00       		.space	1
 5854 0bb0 21       		.byte	33
 5855 0bb1 000000   		.space	3
 5856 0bb4 02000000 		.word	2
 5857 0bb8 2E       		.byte	46
 5858 0bb9 000000   		.space	3
 5859 0bbc FFFFFFFF 		.word	-1
 5860 0bc0 53554D00 		.ascii	"SUM\000"
 5861 0bc4 00000000 		.space	4
 5862 0bc8 00       		.ascii	"\000"
 5863 0bc9 00000000 		.space	7
 5863      000000
 5864 0bd0 21       		.byte	33
 5865 0bd1 000000   		.space	3
 5866 0bd4 01000000 		.word	1
 5867 0bd8 2E       		.byte	46
 5868 0bd9 000000   		.space	3
 5869 0bdc FFFFFFFF 		.word	-1
 5870 0be0 50524F44 		.ascii	"PROD\000"
 5870      00
 5871 0be5 000000   		.space	3
 5872 0be8 00       		.ascii	"\000"
 5873 0be9 00000000 		.space	7
 5873      000000
 5874 0bf0 2C       		.byte	44
 5875 0bf1 000000   		.space	3
 5876 0bf4 FFFFFFFF 		.word	-1
 5877 0bf8 2E       		.byte	46
 5878 0bf9 000000   		.space	3
 5879 0bfc FFFFFFFF 		.word	-1
 5880 0c00 2D2D0D00 		.ascii	"--\015\000"
 5881 0c04 00000000 		.space	4
 5882 0c08 00       		.ascii	"\000"
 5883 0c09 00000000 		.space	7
 5883      000000
ARM GAS  /tmp/ccVzm1xY.s 			page 151


 5884 0c10 2D       		.byte	45
 5885 0c11 000000   		.space	3
 5886 0c14 FFFFFFFF 		.word	-1
 5887 0c18 2E       		.byte	46
 5888 0c19 000000   		.space	3
 5889 0c1c FFFFFFFF 		.word	-1
 5890 0c20 43505800 		.ascii	"CPX\000"
 5891 0c24 00000000 		.space	4
 5892 0c28 00       		.ascii	"\000"
 5893 0c29 00000000 		.space	7
 5893      000000
 5894 0c30 4D5F426C 		.ascii	"M_Blank2\000"
 5894      616E6B32 
 5894      00
 5895 0c39 00000000 		.space	6
 5895      0000
 5896 0c3f 00       		.space	1
 5897 0c40 28       		.byte	40
 5898 0c41 000000   		.space	3
 5899 0c44 03000000 		.word	3
 5900 0c48 2E       		.byte	46
 5901 0c49 000000   		.space	3
 5902 0c4c FFFFFFFF 		.word	-1
 5903 0c50 912B00   		.ascii	"\221+\000"
 5904 0c53 00000000 		.space	5
 5904      00
 5905 0c58 00       		.ascii	"\000"
 5906 0c59 00000000 		.space	7
 5906      000000
 5907 0c60 16       		.byte	22
 5908 0c61 000000   		.space	3
 5909 0c64 01000000 		.word	1
 5910 0c68 2E       		.byte	46
 5911 0c69 000000   		.space	3
 5912 0c6c FFFFFFFF 		.word	-1
 5913 0c70 312F5800 		.ascii	"1/X\000"
 5914 0c74 00000000 		.space	4
 5915 0c78 00       		.ascii	"\000"
 5916 0c79 00000000 		.space	7
 5916      000000
 5917 0c80 1C       		.byte	28
 5918 0c81 000000   		.space	3
 5919 0c84 01000000 		.word	1
 5920 0c88 2E       		.byte	46
 5921 0c89 000000   		.space	3
 5922 0c8c FFFFFFFF 		.word	-1
 5923 0c90 035800   		.ascii	"\003X\000"
 5924 0c93 00000000 		.space	5
 5924      00
 5925 0c98 00       		.ascii	"\000"
 5926 0c99 00000000 		.space	7
 5926      000000
 5927 0ca0 13       		.byte	19
 5928 0ca1 000000   		.space	3
 5929 0ca4 02000000 		.word	2
 5930 0ca8 2E       		.byte	46
 5931 0ca9 000000   		.space	3
ARM GAS  /tmp/ccVzm1xY.s 			page 152


 5932 0cac FFFFFFFF 		.word	-1
 5933 0cb0 4C4F4700 		.ascii	"LOG\000"
 5934 0cb4 00000000 		.space	4
 5935 0cb8 00       		.ascii	"\000"
 5936 0cb9 00000000 		.space	7
 5936      000000
 5937 0cc0 2C       		.byte	44
 5938 0cc1 000000   		.space	3
 5939 0cc4 FFFFFFFF 		.word	-1
 5940 0cc8 2E       		.byte	46
 5941 0cc9 000000   		.space	3
 5942 0ccc FFFFFFFF 		.word	-1
 5943 0cd0 2D2D0D00 		.ascii	"--\015\000"
 5944 0cd4 00000000 		.space	4
 5945 0cd8 00       		.ascii	"\000"
 5946 0cd9 00000000 		.space	7
 5946      000000
 5947 0ce0 2D       		.byte	45
 5948 0ce1 000000   		.space	3
 5949 0ce4 FFFFFFFF 		.word	-1
 5950 0ce8 2E       		.byte	46
 5951 0ce9 000000   		.space	3
 5952 0cec FFFFFFFF 		.word	-1
 5953 0cf0 43505800 		.ascii	"CPX\000"
 5954 0cf4 00000000 		.space	4
 5955 0cf8 00       		.ascii	"\000"
 5956 0cf9 00000000 		.space	7
 5956      000000
 5957 0d00 4D5F416C 		.ascii	"M_Alpha\000"
 5957      70686100 
 5958 0d08 00000000 		.space	7
 5958      000000
 5959 0d0f 00       		.space	1
 5960 0d10 34       		.byte	52
 5961 0d11 000000   		.space	3
 5962 0d14 78010000 		.word	376
 5963 0d18 34       		.byte	52
 5964 0d19 000000   		.space	3
 5965 0d1c 6D010000 		.word	365
 5966 0d20 582D3EA0 		.ascii	"X->\240\000"
 5966      00
 5967 0d25 000000   		.space	3
 5968 0d28 A054494D 		.ascii	"\240TIME\000"
 5968      4500
 5969 0d2e 0000     		.space	2
 5970 0d30 34       		.byte	52
 5971 0d31 000000   		.space	3
 5972 0d34 77010000 		.word	375
 5973 0d38 34       		.byte	52
 5974 0d39 000000   		.space	3
 5975 0d3c 6C010000 		.word	364
 5976 0d40 A02D3E58 		.ascii	"\240->X\000"
 5976      00
 5977 0d45 000000   		.space	3
 5978 0d48 A0444154 		.ascii	"\240DATE\000"
 5978      4500
 5979 0d4e 0000     		.space	2
ARM GAS  /tmp/ccVzm1xY.s 			page 153


 5980 0d50 34       		.byte	52
 5981 0d51 000000   		.space	3
 5982 0d54 00480000 		.word	18432
 5983 0d58 34       		.byte	52
 5984 0d59 000000   		.space	3
 5985 0d5c 6A010000 		.word	362
 5986 0d60 A0495000 		.ascii	"\240IP\000"
 5987 0d64 00000000 		.space	4
 5988 0d68 A0444159 		.ascii	"\240DAY\000"
 5988      00
 5989 0d6d 000000   		.space	3
 5990 0d70 34       		.byte	52
 5991 0d71 000000   		.space	3
 5992 0d74 76010000 		.word	374
 5993 0d78 34       		.byte	52
 5994 0d79 000000   		.space	3
 5995 0d7c 6B010000 		.word	363
 5996 0d80 A04C454E 		.ascii	"\240LENG\000"
 5996      4700
 5997 0d86 0000     		.space	2
 5998 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 5998      4800
 5999 0d8e 0000     		.space	2
 6000 0d90 2C       		.byte	44
 6001 0d91 000000   		.space	3
 6002 0d94 FFFFFFFF 		.word	-1
 6003 0d98 2C       		.byte	44
 6004 0d99 000000   		.space	3
 6005 0d9c 01000000 		.word	1
 6006 0da0 2D2D0D00 		.ascii	"--\015\000"
 6007 0da4 00000000 		.space	4
 6008 0da8 00       		.ascii	"\000"
 6009 0da9 00000000 		.space	7
 6009      000000
 6010 0db0 2D       		.byte	45
 6011 0db1 000000   		.space	3
 6012 0db4 FFFFFFFF 		.word	-1
 6013 0db8 2D       		.byte	45
 6014 0db9 000000   		.space	3
 6015 0dbc 01000000 		.word	1
 6016 0dc0 43505800 		.ascii	"CPX\000"
 6017 0dc4 00000000 		.space	4
 6018 0dc8 00       		.ascii	"\000"
 6019 0dc9 00000000 		.space	7
 6019      000000
 6020 0dd0 4D5F435F 		.ascii	"M_C_Lock\000"
 6020      4C6F636B 
 6020      00
 6021 0dd9 00000000 		.space	6
 6021      0000
 6022 0ddf 00       		.space	1
 6023 0de0 18       		.byte	24
 6024 0de1 000000   		.space	3
 6025 0de4 02000000 		.word	2
 6026 0de8 04       		.byte	4
 6027 0de9 000000   		.space	3
 6028 0dec 02000000 		.word	2
ARM GAS  /tmp/ccVzm1xY.s 			page 154


 6029 0df0 504F4C41 		.ascii	"POLAR\000"
 6029      5200
 6030 0df6 0000     		.space	2
 6031 0df8 0D205000 		.ascii	"\015 P\000"
 6032 0dfc 00000000 		.space	4
 6033 0e00 18       		.byte	24
 6034 0e01 000000   		.space	3
 6035 0e04 01000000 		.word	1
 6036 0e08 04       		.byte	4
 6037 0e09 000000   		.space	3
 6038 0e0c 01000000 		.word	1
 6039 0e10 52454354 		.ascii	"RECT\000"
 6039      00
 6040 0e15 000000   		.space	3
 6041 0e18 0D205200 		.ascii	"\015 R\000"
 6042 0e1c 00000000 		.space	4
 6043 0e20 0E       		.byte	14
 6044 0e21 000000   		.space	3
 6045 0e24 01000000 		.word	1
 6046 0e28 0E       		.byte	14
 6047 0e29 000000   		.space	3
 6048 0e2c 03000000 		.word	3
 6049 0e30 2B2F2D06 		.ascii	"+/-\006Im\000"
 6049      496D00
 6050 0e37 00       		.space	1
 6051 0e38 2B2F2D06 		.ascii	"+/-\006Re\000"
 6051      526500
 6052 0e3f 00       		.space	1
 6053 0e40 0D       		.byte	13
 6054 0e41 000000   		.space	3
 6055 0e44 02000000 		.word	2
 6056 0e48 00       		.byte	0
 6057 0e49 000000   		.space	3
 6058 0e4c 01000000 		.word	1
 6059 0e50 52651749 		.ascii	"Re\027Im\000"
 6059      6D00
 6060 0e56 0000     		.space	2
 6061 0e58 48595000 		.ascii	"HYP\000"
 6062 0e5c 00000000 		.space	4
 6063 0e60 2C       		.byte	44
 6064 0e61 000000   		.space	3
 6065 0e64 FFFFFFFF 		.word	-1
 6066 0e68 0F       		.byte	15
 6067 0e69 000000   		.space	3
 6068 0e6c 01000000 		.word	1
 6069 0e70 2D2D0D00 		.ascii	"--\015\000"
 6070 0e74 00000000 		.space	4
 6071 0e78 1106AF00 		.ascii	"\021\006\257\000"
 6072 0e7c 00000000 		.space	4
 6073 0e80 2D       		.byte	45
 6074 0e81 000000   		.space	3
 6075 0e84 FFFFFFFF 		.word	-1
 6076 0e88 0C       		.byte	12
 6077 0e89 000000   		.space	3
 6078 0e8c 01000000 		.word	1
 6079 0e90 43505800 		.ascii	"CPX\000"
 6080 0e94 00000000 		.space	4
ARM GAS  /tmp/ccVzm1xY.s 			page 155


 6081 0e98 1106434E 		.ascii	"\021\006CNST\000"
 6081      535400
 6082 0e9f 00       		.space	1
 6083 0ea0 4D5F436C 		.ascii	"M_Clear_C\000"
 6083      6561725F 
 6083      4300
 6084 0eaa 00000000 		.space	5
 6084      00
 6085 0eaf 00       		.space	1
 6086 0eb0 2E       		.byte	46
 6087 0eb1 000000   		.space	3
 6088 0eb4 FFFFFFFF 		.word	-1
 6089 0eb8 2E       		.byte	46
 6090 0eb9 000000   		.space	3
 6091 0ebc FFFFFFFF 		.word	-1
 6092 0ec0 00       		.ascii	"\000"
 6093 0ec1 00000000 		.space	7
 6093      000000
 6094 0ec8 00       		.ascii	"\000"
 6095 0ec9 00000000 		.space	7
 6095      000000
 6096 0ed0 2E       		.byte	46
 6097 0ed1 000000   		.space	3
 6098 0ed4 FFFFFFFF 		.word	-1
 6099 0ed8 2E       		.byte	46
 6100 0ed9 000000   		.space	3
 6101 0edc FFFFFFFF 		.word	-1
 6102 0ee0 00       		.ascii	"\000"
 6103 0ee1 00000000 		.space	7
 6103      000000
 6104 0ee8 00       		.ascii	"\000"
 6105 0ee9 00000000 		.space	7
 6105      000000
 6106 0ef0 10       		.byte	16
 6107 0ef1 000000   		.space	3
 6108 0ef4 03000000 		.word	3
 6109 0ef8 34       		.byte	52
 6110 0ef9 000000   		.space	3
 6111 0efc 74010000 		.word	372
 6112 0f00 434C7800 		.ascii	"CLx\000"
 6113 0f04 00000000 		.space	4
 6114 0f08 434C06A0 		.ascii	"CL\006\240\000"
 6114      00
 6115 0f0d 000000   		.space	3
 6116 0f10 34       		.byte	52
 6117 0f11 000000   		.space	3
 6118 0f14 40010000 		.word	320
 6119 0f18 2E       		.byte	46
 6120 0f19 000000   		.space	3
 6121 0f1c FFFFFFFF 		.word	-1
 6122 0f20 434C5374 		.ascii	"CLStk\000"
 6122      6B00
 6123 0f26 0000     		.space	2
 6124 0f28 00       		.ascii	"\000"
 6125 0f29 00000000 		.space	7
 6125      000000
 6126 0f30 2C       		.byte	44
ARM GAS  /tmp/ccVzm1xY.s 			page 156


 6127 0f31 000000   		.space	3
 6128 0f34 FFFFFFFF 		.word	-1
 6129 0f38 2E       		.byte	46
 6130 0f39 000000   		.space	3
 6131 0f3c FFFFFFFF 		.word	-1
 6132 0f40 2D2D0D00 		.ascii	"--\015\000"
 6133 0f44 00000000 		.space	4
 6134 0f48 00       		.ascii	"\000"
 6135 0f49 00000000 		.space	7
 6135      000000
 6136 0f50 2D       		.byte	45
 6137 0f51 000000   		.space	3
 6138 0f54 FFFFFFFF 		.word	-1
 6139 0f58 2E       		.byte	46
 6140 0f59 000000   		.space	3
 6141 0f5c FFFFFFFF 		.word	-1
 6142 0f60 43505800 		.ascii	"CPX\000"
 6143 0f64 00000000 		.space	4
 6144 0f68 00       		.ascii	"\000"
 6145 0f69 00000000 		.space	7
 6145      000000
 6146 0f70 4D5F5377 		.ascii	"M_Swap_C\000"
 6146      61705F43 
 6146      00
 6147 0f79 00000000 		.space	6
 6147      0000
 6148 0f7f 00       		.space	1
 6149 0f80 0D       		.byte	13
 6150 0f81 000000   		.space	3
 6151 0f84 01000000 		.word	1
 6152 0f88 2E       		.byte	46
 6153 0f89 000000   		.space	3
 6154 0f8c FFFFFFFF 		.word	-1
 6155 0f90 53686F77 		.ascii	"Show\016\000"
 6155      0E00
 6156 0f96 0000     		.space	2
 6157 0f98 00       		.ascii	"\000"
 6158 0f99 00000000 		.space	7
 6158      000000
 6159 0fa0 0D       		.byte	13
 6160 0fa1 000000   		.space	3
 6161 0fa4 02000000 		.word	2
 6162 0fa8 2E       		.byte	46
 6163 0fa9 000000   		.space	3
 6164 0fac FFFFFFFF 		.word	-1
 6165 0fb0 53686F77 		.ascii	"Show\015\000"
 6165      0D00
 6166 0fb6 0000     		.space	2
 6167 0fb8 00       		.ascii	"\000"
 6168 0fb9 00000000 		.space	7
 6168      000000
 6169 0fc0 0D       		.byte	13
 6170 0fc1 000000   		.space	3
 6171 0fc4 03000000 		.word	3
 6172 0fc8 2E       		.byte	46
 6173 0fc9 000000   		.space	3
 6174 0fcc FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccVzm1xY.s 			page 157


 6175 0fd0 78173F00 		.ascii	"x\027?\000"
 6176 0fd4 00000000 		.space	4
 6177 0fd8 00       		.ascii	"\000"
 6178 0fd9 00000000 		.space	7
 6178      000000
 6179 0fe0 2E       		.byte	46
 6180 0fe1 000000   		.space	3
 6181 0fe4 FFFFFFFF 		.word	-1
 6182 0fe8 2E       		.byte	46
 6183 0fe9 000000   		.space	3
 6184 0fec FFFFFFFF 		.word	-1
 6185 0ff0 00       		.ascii	"\000"
 6186 0ff1 00000000 		.space	7
 6186      000000
 6187 0ff8 00       		.ascii	"\000"
 6188 0ff9 00000000 		.space	7
 6188      000000
 6189 1000 2C       		.byte	44
 6190 1001 000000   		.space	3
 6191 1004 FFFFFFFF 		.word	-1
 6192 1008 2E       		.byte	46
 6193 1009 000000   		.space	3
 6194 100c FFFFFFFF 		.word	-1
 6195 1010 2D2D0D00 		.ascii	"--\015\000"
 6196 1014 00000000 		.space	4
 6197 1018 00       		.ascii	"\000"
 6198 1019 00000000 		.space	7
 6198      000000
 6199 1020 2D       		.byte	45
 6200 1021 000000   		.space	3
 6201 1024 FFFFFFFF 		.word	-1
 6202 1028 2E       		.byte	46
 6203 1029 000000   		.space	3
 6204 102c FFFFFFFF 		.word	-1
 6205 1030 43505800 		.ascii	"CPX\000"
 6206 1034 00000000 		.space	4
 6207 1038 00       		.ascii	"\000"
 6208 1039 00000000 		.space	7
 6208      000000
 6209 1040 4D5F4172 		.ascii	"M_Arrow_C\000"
 6209      726F775F 
 6209      4300
 6210 104a 00000000 		.space	5
 6210      00
 6211 104f 00       		.space	1
 6212 1050 2E       		.byte	46
 6213 1051 000000   		.space	3
 6214 1054 FFFFFFFF 		.word	-1
 6215 1058 06       		.byte	6
 6216 1059 000000   		.space	3
 6217 105c 02000000 		.word	2
 6218 1060 00       		.ascii	"\000"
 6219 1061 00000000 		.space	7
 6219      000000
 6220 1068 44454700 		.ascii	"DEG\000"
 6221 106c 00000000 		.space	4
 6222 1070 2E       		.byte	46
ARM GAS  /tmp/ccVzm1xY.s 			page 158


 6223 1071 000000   		.space	3
 6224 1074 FFFFFFFF 		.word	-1
 6225 1078 07       		.byte	7
 6226 1079 000000   		.space	3
 6227 107c 02000000 		.word	2
 6228 1080 00       		.ascii	"\000"
 6229 1081 00000000 		.space	7
 6229      000000
 6230 1088 52414400 		.ascii	"RAD\000"
 6231 108c 00000000 		.space	4
 6232 1090 2E       		.byte	46
 6233 1091 000000   		.space	3
 6234 1094 FFFFFFFF 		.word	-1
 6235 1098 08       		.byte	8
 6236 1099 000000   		.space	3
 6237 109c 02000000 		.word	2
 6238 10a0 00       		.ascii	"\000"
 6239 10a1 00000000 		.space	7
 6239      000000
 6240 10a8 47726164 		.ascii	"Grad\000"
 6240      00
 6241 10ad 000000   		.space	3
 6242 10b0 2E       		.byte	46
 6243 10b1 000000   		.space	3
 6244 10b4 FFFFFFFF 		.word	-1
 6245 10b8 06       		.byte	6
 6246 10b9 000000   		.space	3
 6247 10bc 01000000 		.word	1
 6248 10c0 00       		.ascii	"\000"
 6249 10c1 00000000 		.space	7
 6249      000000
 6250 10c8 0D484D53 		.ascii	"\015HMS\000"
 6250      00
 6251 10cd 000000   		.space	3
 6252 10d0 2C       		.byte	44
 6253 10d1 000000   		.space	3
 6254 10d4 FFFFFFFF 		.word	-1
 6255 10d8 07       		.byte	7
 6256 10d9 000000   		.space	3
 6257 10dc 01000000 		.word	1
 6258 10e0 2D2D0D00 		.ascii	"--\015\000"
 6259 10e4 00000000 		.space	4
 6260 10e8 484D530D 		.ascii	"HMS\015\000"
 6260      00
 6261 10ed 000000   		.space	3
 6262 10f0 2D       		.byte	45
 6263 10f1 000000   		.space	3
 6264 10f4 FFFFFFFF 		.word	-1
 6265 10f8 2E       		.byte	46
 6266 10f9 000000   		.space	3
 6267 10fc FFFFFFFF 		.word	-1
 6268 1100 43505800 		.ascii	"CPX\000"
 6269 1104 00000000 		.space	4
 6270 1108 00       		.ascii	"\000"
 6271 1109 00000000 		.space	7
 6271      000000
 6272 1110 4D5F5072 		.ascii	"M_Prob_C\000"
ARM GAS  /tmp/ccVzm1xY.s 			page 159


 6272      6F625F43 
 6272      00
 6273 1119 00000000 		.space	6
 6273      0000
 6274 111f 00       		.space	1
 6275 1120 18       		.byte	24
 6276 1121 000000   		.space	3
 6277 1124 03000000 		.word	3
 6278 1128 34       		.byte	52
 6279 1129 000000   		.space	3
 6280 112c 31050000 		.word	1329
 6281 1130 14062100 		.ascii	"\024\006!\000"
 6282 1134 00000000 		.space	4
 6283 1138 14064C6E 		.ascii	"\024\006Ln\006\202\000"
 6283      068200
 6284 113f 00       		.space	1
 6285 1140 34       		.byte	52
 6286 1141 000000   		.space	3
 6287 1144 12060000 		.word	1554
 6288 1148 2E       		.byte	46
 6289 1149 000000   		.space	3
 6290 114c FFFFFFFF 		.word	-1
 6291 1150 14064379 		.ascii	"\024\006Cy,x\000"
 6291      2C7800
 6292 1157 00       		.space	1
 6293 1158 00       		.ascii	"\000"
 6294 1159 00000000 		.space	7
 6294      000000
 6295 1160 34       		.byte	52
 6296 1161 000000   		.space	3
 6297 1164 13060000 		.word	1555
 6298 1168 2E       		.byte	46
 6299 1169 000000   		.space	3
 6300 116c FFFFFFFF 		.word	-1
 6301 1170 14065079 		.ascii	"\024\006Py,x\000"
 6301      2C7800
 6302 1177 00       		.space	1
 6303 1178 00       		.ascii	"\000"
 6304 1179 00000000 		.space	7
 6304      000000
 6305 1180 2E       		.byte	46
 6306 1181 000000   		.space	3
 6307 1184 FFFFFFFF 		.word	-1
 6308 1188 2E       		.byte	46
 6309 1189 000000   		.space	3
 6310 118c FFFFFFFF 		.word	-1
 6311 1190 00       		.ascii	"\000"
 6312 1191 00000000 		.space	7
 6312      000000
 6313 1198 00       		.ascii	"\000"
 6314 1199 00000000 		.space	7
 6314      000000
 6315 11a0 2C       		.byte	44
 6316 11a1 000000   		.space	3
 6317 11a4 FFFFFFFF 		.word	-1
 6318 11a8 2E       		.byte	46
 6319 11a9 000000   		.space	3
ARM GAS  /tmp/ccVzm1xY.s 			page 160


 6320 11ac FFFFFFFF 		.word	-1
 6321 11b0 2D2D0D00 		.ascii	"--\015\000"
 6322 11b4 00000000 		.space	4
 6323 11b8 00       		.ascii	"\000"
 6324 11b9 00000000 		.space	7
 6324      000000
 6325 11c0 2D       		.byte	45
 6326 11c1 000000   		.space	3
 6327 11c4 FFFFFFFF 		.word	-1
 6328 11c8 2E       		.byte	46
 6329 11c9 000000   		.space	3
 6330 11cc FFFFFFFF 		.word	-1
 6331 11d0 43505800 		.ascii	"CPX\000"
 6332 11d4 00000000 		.space	4
 6333 11d8 00       		.ascii	"\000"
 6334 11d9 00000000 		.space	7
 6334      000000
 6335 11e0 4D5F426C 		.ascii	"M_Blank2_C\000"
 6335      616E6B32 
 6335      5F4300
 6336 11eb 00000000 		.space	4
 6337 11ef 00       		.space	1
 6338 11f0 00       		.byte	0
 6339 11f1 000000   		.space	3
 6340 11f4 01000000 		.word	1
 6341 11f8 2E       		.byte	46
 6342 11f9 000000   		.space	3
 6343 11fc FFFFFFFF 		.word	-1
 6344 1200 48595000 		.ascii	"HYP\000"
 6345 1204 00000000 		.space	4
 6346 1208 00       		.ascii	"\000"
 6347 1209 00000000 		.space	7
 6347      000000
 6348 1210 16       		.byte	22
 6349 1211 000000   		.space	3
 6350 1214 01000000 		.word	1
 6351 1218 2E       		.byte	46
 6352 1219 000000   		.space	3
 6353 121c FFFFFFFF 		.word	-1
 6354 1220 312F5800 		.ascii	"1/X\000"
 6355 1224 00000000 		.space	4
 6356 1228 00       		.ascii	"\000"
 6357 1229 00000000 		.space	7
 6357      000000
 6358 1230 1C       		.byte	28
 6359 1231 000000   		.space	3
 6360 1234 01000000 		.word	1
 6361 1238 2E       		.byte	46
 6362 1239 000000   		.space	3
 6363 123c FFFFFFFF 		.word	-1
 6364 1240 035800   		.ascii	"\003X\000"
 6365 1243 00000000 		.space	5
 6365      00
 6366 1248 00       		.ascii	"\000"
 6367 1249 00000000 		.space	7
 6367      000000
 6368 1250 13       		.byte	19
ARM GAS  /tmp/ccVzm1xY.s 			page 161


 6369 1251 000000   		.space	3
 6370 1254 02000000 		.word	2
 6371 1258 2E       		.byte	46
 6372 1259 000000   		.space	3
 6373 125c FFFFFFFF 		.word	-1
 6374 1260 4C4F4700 		.ascii	"LOG\000"
 6375 1264 00000000 		.space	4
 6376 1268 00       		.ascii	"\000"
 6377 1269 00000000 		.space	7
 6377      000000
 6378 1270 2C       		.byte	44
 6379 1271 000000   		.space	3
 6380 1274 FFFFFFFF 		.word	-1
 6381 1278 2E       		.byte	46
 6382 1279 000000   		.space	3
 6383 127c FFFFFFFF 		.word	-1
 6384 1280 2D2D0D00 		.ascii	"--\015\000"
 6385 1284 00000000 		.space	4
 6386 1288 00       		.ascii	"\000"
 6387 1289 00000000 		.space	7
 6387      000000
 6388 1290 2D       		.byte	45
 6389 1291 000000   		.space	3
 6390 1294 FFFFFFFF 		.word	-1
 6391 1298 2E       		.byte	46
 6392 1299 000000   		.space	3
 6393 129c FFFFFFFF 		.word	-1
 6394 12a0 43505800 		.ascii	"CPX\000"
 6395 12a4 00000000 		.space	4
 6396 12a8 00       		.ascii	"\000"
 6397 12a9 00000000 		.space	7
 6397      000000
 6398 12b0 4D5F4D69 		.ascii	"M_Misc_C\000"
 6398      73635F43 
 6398      00
 6399 12b9 00000000 		.space	6
 6399      0000
 6400 12bf 00       		.space	1
 6401 12c0 25       		.byte	37
 6402 12c1 000000   		.space	3
 6403 12c4 01000000 		.word	1
 6404 12c8 14       		.byte	20
 6405 12c9 000000   		.space	3
 6406 12cc 01000000 		.word	1
 6407 12d0 7C7A7C00 		.ascii	"|z|\000"
 6408 12d4 00000000 		.space	4
 6409 12d8 14329C00 		.ascii	"\0242\234\000"
 6410 12dc 00000000 		.space	4
 6411 12e0 25       		.byte	37
 6412 12e1 000000   		.space	3
 6413 12e4 02000000 		.word	2
 6414 12e8 14       		.byte	20
 6415 12e9 000000   		.space	3
 6416 12ec 02000000 		.word	2
 6417 12f0 524E4400 		.ascii	"RND\000"
 6418 12f4 00000000 		.space	4
 6419 12f8 144C6F67 		.ascii	"\024Log\272\000"
ARM GAS  /tmp/ccVzm1xY.s 			page 162


 6419      BA00
 6420 12fe 0000     		.space	2
 6421 1300 26       		.byte	38
 6422 1301 000000   		.space	3
 6423 1304 01000000 		.word	1
 6424 1308 15       		.byte	21
 6425 1309 000000   		.space	3
 6426 130c 02000000 		.word	2
 6427 1310 300D5265 		.ascii	"0\015Re\000"
 6427      00
 6428 1315 000000   		.space	3
 6429 1318 144C6F67 		.ascii	"\024Log\213\000"
 6429      8B00
 6430 131e 0000     		.space	2
 6431 1320 26       		.byte	38
 6432 1321 000000   		.space	3
 6433 1324 02000000 		.word	2
 6434 1328 16       		.byte	22
 6435 1329 000000   		.space	3
 6436 132c 02000000 		.word	2
 6437 1330 300D496D 		.ascii	"0\015Im\000"
 6437      00
 6438 1335 000000   		.space	3
 6439 1338 147C7C65 		.ascii	"\024||el\000"
 6439      6C00
 6440 133e 0000     		.space	2
 6441 1340 2C       		.byte	44
 6442 1341 000000   		.space	3
 6443 1344 FFFFFFFF 		.word	-1
 6444 1348 1C       		.byte	28
 6445 1349 000000   		.space	3
 6446 134c 03000000 		.word	3
 6447 1350 2D2D0D00 		.ascii	"--\015\000"
 6448 1354 00000000 		.space	4
 6449 1358 142E1C00 		.ascii	"\024.\034\000"
 6450 135c 00000000 		.space	4
 6451 1360 2D       		.byte	45
 6452 1361 000000   		.space	3
 6453 1364 FFFFFFFF 		.word	-1
 6454 1368 16       		.byte	22
 6455 1369 000000   		.space	3
 6456 136c 03000000 		.word	3
 6457 1370 43505800 		.ascii	"CPX\000"
 6458 1374 00000000 		.space	4
 6459 1378 142E2F00 		.ascii	"\024./\000"
 6460 137c 00000000 		.space	4
 6461 1380 4D5F5573 		.ascii	"M_Usermenu\000"
 6461      65726D65 
 6461      6E7500
 6462 138b 00000000 		.space	4
 6463 138f 00       		.space	1
 6464 1390 34       		.byte	52
 6465 1391 000000   		.space	3
 6466 1394 00FB0000 		.word	64256
 6467 1398 2E       		.byte	46
 6468 1399 000000   		.space	3
 6469 139c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccVzm1xY.s 			page 163


 6470 13a0 554D454E 		.ascii	"UMEN\000"
 6470      00
 6471 13a5 000000   		.space	3
 6472 13a8 00       		.ascii	"\000"
 6473 13a9 00000000 		.space	7
 6473      000000
 6474 13b0 34       		.byte	52
 6475 13b1 000000   		.space	3
 6476 13b4 55FB4D31 		.word	827194197
 6477 13b8 34       		.byte	52
 6478 13b9 000000   		.space	3
 6479 13bc 55FB4D34 		.word	877525845
 6480 13c0 554D3100 		.ascii	"UM1\000"
 6481 13c4 00000000 		.space	4
 6482 13c8 554D3400 		.ascii	"UM4\000"
 6483 13cc 00000000 		.space	4
 6484 13d0 34       		.byte	52
 6485 13d1 000000   		.space	3
 6486 13d4 55FB4D32 		.word	843971413
 6487 13d8 34       		.byte	52
 6488 13d9 000000   		.space	3
 6489 13dc 55FB4D35 		.word	894303061
 6490 13e0 554D3200 		.ascii	"UM2\000"
 6491 13e4 00000000 		.space	4
 6492 13e8 554D3500 		.ascii	"UM5\000"
 6493 13ec 00000000 		.space	4
 6494 13f0 34       		.byte	52
 6495 13f1 000000   		.space	3
 6496 13f4 55FB4D33 		.word	860748629
 6497 13f8 34       		.byte	52
 6498 13f9 000000   		.space	3
 6499 13fc 55FB4D36 		.word	911080277
 6500 1400 554D3300 		.ascii	"UM3\000"
 6501 1404 00000000 		.space	4
 6502 1408 554D3600 		.ascii	"UM6\000"
 6503 140c 00000000 		.space	4
 6504 1410 2C       		.byte	44
 6505 1411 000000   		.space	3
 6506 1414 FFFFFFFF 		.word	-1
 6507 1418 1C       		.byte	28
 6508 1419 000000   		.space	3
 6509 141c 03000000 		.word	3
 6510 1420 2D2D0D00 		.ascii	"--\015\000"
 6511 1424 00000000 		.space	4
 6512 1428 00       		.ascii	"\000"
 6513 1429 00000000 		.space	7
 6513      000000
 6514 1430 2D       		.byte	45
 6515 1431 000000   		.space	3
 6516 1434 FFFFFFFF 		.word	-1
 6517 1438 16       		.byte	22
 6518 1439 000000   		.space	3
 6519 143c 03000000 		.word	3
 6520 1440 43505800 		.ascii	"CPX\000"
 6521 1444 00000000 		.space	4
 6522 1448 00       		.ascii	"\000"
 6523 1449 00000000 		.space	7
ARM GAS  /tmp/ccVzm1xY.s 			page 164


 6523      000000
 6524 1450 4D5F5072 		.ascii	"M_Print\000"
 6524      696E7400 
 6525 1458 00000000 		.space	7
 6525      000000
 6526 145f 00       		.space	1
 6527 1460 34       		.byte	52
 6528 1461 000000   		.space	3
 6529 1464 D9010000 		.word	473
 6530 1468 34       		.byte	52
 6531 1469 000000   		.space	3
 6532 146c DA010000 		.word	474
 6533 1470 92064F6E 		.ascii	"\222\006On\000"
 6533      00
 6534 1475 000000   		.space	3
 6535 1478 92064F66 		.ascii	"\222\006Off\000"
 6535      6600
 6536 147e 0000     		.space	2
 6537 1480 34       		.byte	52
 6538 1481 000000   		.space	3
 6539 1484 00AF0000 		.word	44800
 6540 1488 34       		.byte	52
 6541 1489 000000   		.space	3
 6542 148c 00B60000 		.word	46592
 6543 1490 92064D6F 		.ascii	"\222\006Mode\000"
 6543      646500
 6544 1497 00       		.space	1
 6545 1498 92064462 		.ascii	"\222\006DbSp\000"
 6545      537000
 6546 149f 00       		.space	1
 6547 14a0 34       		.byte	52
 6548 14a1 000000   		.space	3
 6549 14a4 BC010000 		.word	444
 6550 14a8 34       		.byte	52
 6551 14a9 000000   		.space	3
 6552 14ac BD010000 		.word	445
 6553 14b0 92065072 		.ascii	"\222\006Prog\000"
 6553      6F6700
 6554 14b7 00       		.space	1
 6555 14b8 92065265 		.ascii	"\222\006Regs\000"
 6555      677300
 6556 14bf 00       		.space	1
 6557 14c0 34       		.byte	52
 6558 14c1 000000   		.space	3
 6559 14c4 BE010000 		.word	446
 6560 14c8 34       		.byte	52
 6561 14c9 000000   		.space	3
 6562 14cc BF010000 		.word	447
 6563 14d0 92065374 		.ascii	"\222\006Stk\000"
 6563      6B00
 6564 14d6 0000     		.space	2
 6565 14d8 92069100 		.ascii	"\222\006\221\000"
 6566 14dc 00000000 		.space	4
 6567 14e0 2C       		.byte	44
 6568 14e1 000000   		.space	3
 6569 14e4 FFFFFFFF 		.word	-1
 6570 14e8 34       		.byte	52
ARM GAS  /tmp/ccVzm1xY.s 			page 165


 6571 14e9 000000   		.space	3
 6572 14ec C0010000 		.word	448
 6573 14f0 2D2D0D00 		.ascii	"--\015\000"
 6574 14f4 00000000 		.space	4
 6575 14f8 9206A000 		.ascii	"\222\006\240\000"
 6576 14fc 00000000 		.space	4
 6577 1500 2D       		.byte	45
 6578 1501 000000   		.space	3
 6579 1504 FFFFFFFF 		.word	-1
 6580 1508 34       		.byte	52
 6581 1509 000000   		.space	3
 6582 150c C3010000 		.word	451
 6583 1510 43505800 		.ascii	"CPX\000"
 6584 1514 00000000 		.space	4
 6585 1518 92064144 		.ascii	"\222\006ADV\000"
 6585      5600
 6586 151e 0000     		.space	2
 6587              		.section	.rodata.mapping_alpha.11143,"a"
 6588              		.align	2
 6589              		.set	.LANCHOR16,. + 0
 6592              	mapping_alpha.11143:
 6593 0000 63       		.byte	99
 6594 0001 000000   		.space	3
 6595 0004 FFFFFFFF 		.word	-1
 6596 0008 00       		.byte	0
 6597 0009 000000   		.space	3
 6598 000c FFFFFFFF 		.word	-1
 6599 0010 01       		.byte	1
 6600 0011 000000   		.space	3
 6601 0014 FFFFFFFF 		.word	-1
 6602 0018 02       		.byte	2
 6603 0019 000000   		.space	3
 6604 001c FFFFFFFF 		.word	-1
 6605 0020 03       		.byte	3
 6606 0021 000000   		.space	3
 6607 0024 FFFFFFFF 		.word	-1
 6608 0028 04       		.byte	4
 6609 0029 000000   		.space	3
 6610 002c FFFFFFFF 		.word	-1
 6611 0030 05       		.byte	5
 6612 0031 000000   		.space	3
 6613 0034 FFFFFFFF 		.word	-1
 6614 0038 06       		.byte	6
 6615 0039 000000   		.space	3
 6616 003c FFFFFFFF 		.word	-1
 6617 0040 07       		.byte	7
 6618 0041 000000   		.space	3
 6619 0044 FFFFFFFF 		.word	-1
 6620 0048 08       		.byte	8
 6621 0049 000000   		.space	3
 6622 004c FFFFFFFF 		.word	-1
 6623 0050 09       		.byte	9
 6624 0051 000000   		.space	3
 6625 0054 FFFFFFFF 		.word	-1
 6626 0058 0A       		.byte	10
 6627 0059 000000   		.space	3
 6628 005c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccVzm1xY.s 			page 166


 6629 0060 0B       		.byte	11
 6630 0061 000000   		.space	3
 6631 0064 FFFFFFFF 		.word	-1
 6632 0068 0C       		.byte	12
 6633 0069 000000   		.space	3
 6634 006c FFFFFFFF 		.word	-1
 6635 0070 0D       		.byte	13
 6636 0071 000000   		.space	3
 6637 0074 FFFFFFFF 		.word	-1
 6638 0078 0E       		.byte	14
 6639 0079 000000   		.space	3
 6640 007c FFFFFFFF 		.word	-1
 6641 0080 0F       		.byte	15
 6642 0081 000000   		.space	3
 6643 0084 FFFFFFFF 		.word	-1
 6644 0088 10       		.byte	16
 6645 0089 000000   		.space	3
 6646 008c FFFFFFFF 		.word	-1
 6647 0090 12       		.byte	18
 6648 0091 000000   		.space	3
 6649 0094 FFFFFFFF 		.word	-1
 6650 0098 13       		.byte	19
 6651 0099 000000   		.space	3
 6652 009c FFFFFFFF 		.word	-1
 6653 00a0 14       		.byte	20
 6654 00a1 000000   		.space	3
 6655 00a4 FFFFFFFF 		.word	-1
 6656 00a8 15       		.byte	21
 6657 00a9 000000   		.space	3
 6658 00ac FFFFFFFF 		.word	-1
 6659 00b0 16       		.byte	22
 6660 00b1 000000   		.space	3
 6661 00b4 FFFFFFFF 		.word	-1
 6662 00b8 18       		.byte	24
 6663 00b9 000000   		.space	3
 6664 00bc FFFFFFFF 		.word	-1
 6665 00c0 19       		.byte	25
 6666 00c1 000000   		.space	3
 6667 00c4 FFFFFFFF 		.word	-1
 6668 00c8 1A       		.byte	26
 6669 00c9 000000   		.space	3
 6670 00cc FFFFFFFF 		.word	-1
 6671 00d0 1B       		.byte	27
 6672 00d1 000000   		.space	3
 6673 00d4 FFFFFFFF 		.word	-1
 6674 00d8 1C       		.byte	28
 6675 00d9 000000   		.space	3
 6676 00dc FFFFFFFF 		.word	-1
 6677 00e0 1E       		.byte	30
 6678 00e1 000000   		.space	3
 6679 00e4 FFFFFFFF 		.word	-1
 6680 00e8 1F       		.byte	31
 6681 00e9 000000   		.space	3
 6682 00ec FFFFFFFF 		.word	-1
 6683 00f0 20       		.byte	32
 6684 00f1 000000   		.space	3
 6685 00f4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccVzm1xY.s 			page 167


 6686 00f8 21       		.byte	33
 6687 00f9 000000   		.space	3
 6688 00fc FFFFFFFF 		.word	-1
 6689 0100 22       		.byte	34
 6690 0101 000000   		.space	3
 6691 0104 FFFFFFFF 		.word	-1
 6692 0108 24       		.byte	36
 6693 0109 000000   		.space	3
 6694 010c FFFFFFFF 		.word	-1
 6695 0110 25       		.byte	37
 6696 0111 000000   		.space	3
 6697 0114 FFFFFFFF 		.word	-1
 6698 0118 26       		.byte	38
 6699 0119 000000   		.space	3
 6700 011c FFFFFFFF 		.word	-1
 6701 0120 27       		.byte	39
 6702 0121 000000   		.space	3
 6703 0124 FFFFFFFF 		.word	-1
 6704 0128 28       		.byte	40
 6705 0129 000000   		.space	3
 6706 012c FFFFFFFF 		.word	-1
 6707 0130 2E       		.byte	46
 6708 0131 000000   		.space	3
 6709 0134 FFFFFFFF 		.word	-1
 6710 0138 2E       		.byte	46
 6711 0139 000000   		.space	3
 6712 013c FFFFFFFF 		.word	-1
 6713 0140 2E       		.byte	46
 6714 0141 000000   		.space	3
 6715 0144 FFFFFFFF 		.word	-1
 6716 0148 2E       		.byte	46
 6717 0149 000000   		.space	3
 6718 014c FFFFFFFF 		.word	-1
 6719 0150 2C       		.byte	44
 6720 0151 000000   		.space	3
 6721 0154 FFFFFFFF 		.word	-1
 6722 0158 2D       		.byte	45
 6723 0159 000000   		.space	3
 6724 015c FFFFFFFF 		.word	-1
 6725 0160 2E       		.byte	46
 6726 0161 000000   		.space	3
 6727 0164 FFFFFFFF 		.word	-1
 6728 0168 2E       		.byte	46
 6729 0169 000000   		.space	3
 6730 016c FFFFFFFF 		.word	-1
 6731 0170 2E       		.byte	46
 6732 0171 000000   		.space	3
 6733 0174 FFFFFFFF 		.word	-1
 6734              		.section	.rodata.mapping_fshift.11141,"a"
 6735              		.align	2
 6736              		.set	.LANCHOR14,. + 0
 6739              	mapping_fshift.11141:
 6740 0000 63       		.byte	99
 6741 0001 000000   		.space	3
 6742 0004 FFFFFFFF 		.word	-1
 6743 0008 22       		.byte	34
 6744 0009 000000   		.space	3
ARM GAS  /tmp/ccVzm1xY.s 			page 168


 6745 000c 03000000 		.word	3
 6746 0010 15       		.byte	21
 6747 0011 000000   		.space	3
 6748 0014 01000000 		.word	1
 6749 0018 1C       		.byte	28
 6750 0019 000000   		.space	3
 6751 001c 02000000 		.word	2
 6752 0020 13       		.byte	19
 6753 0021 000000   		.space	3
 6754 0024 01000000 		.word	1
 6755 0028 12       		.byte	18
 6756 0029 000000   		.space	3
 6757 002c 01000000 		.word	1
 6758 0030 12       		.byte	18
 6759 0031 000000   		.space	3
 6760 0034 03000000 		.word	3
 6761 0038 31       		.byte	49
 6762 0039 000000   		.space	3
 6763 003c 0F000000 		.word	15
 6764 0040 22       		.byte	34
 6765 0041 000000   		.space	3
 6766 0044 01000000 		.word	1
 6767 0048 0F       		.byte	15
 6768 0049 000000   		.space	3
 6769 004c 03000000 		.word	3
 6770 0050 01       		.byte	1
 6771 0051 000000   		.space	3
 6772 0054 02000000 		.word	2
 6773 0058 02       		.byte	2
 6774 0059 000000   		.space	3
 6775 005c 02000000 		.word	2
 6776 0060 03       		.byte	3
 6777 0061 000000   		.space	3
 6778 0064 02000000 		.word	2
 6779 0068 0C       		.byte	12
 6780 0069 000000   		.space	3
 6781 006c 01000000 		.word	1
 6782 0070 34       		.byte	52
 6783 0071 000000   		.space	3
 6784 0074 6C2A0000 		.word	10860
 6785 0078 2F       		.byte	47
 6786 0079 000000   		.space	3
 6787 007c 04000000 		.word	4
 6788 0080 2F       		.byte	47
 6789 0081 000000   		.space	3
 6790 0084 02000000 		.word	2
 6791 0088 2F       		.byte	47
 6792 0089 000000   		.space	3
 6793 008c 01000000 		.word	1
 6794 0090 18       		.byte	24
 6795 0091 000000   		.space	3
 6796 0094 00000000 		.word	0
 6797 0098 20       		.byte	32
 6798 0099 000000   		.space	3
 6799 009c 01000000 		.word	1
 6800 00a0 2F       		.byte	47
 6801 00a1 000000   		.space	3
ARM GAS  /tmp/ccVzm1xY.s 			page 169


 6802 00a4 0E000000 		.word	14
 6803 00a8 1C       		.byte	28
 6804 00a9 000000   		.space	3
 6805 00ac 03000000 		.word	3
 6806 00b0 2F       		.byte	47
 6807 00b1 000000   		.space	3
 6808 00b4 0C000000 		.word	12
 6809 00b8 1E       		.byte	30
 6810 00b9 000000   		.space	3
 6811 00bc 00000000 		.word	0
 6812 00c0 2F       		.byte	47
 6813 00c1 000000   		.space	3
 6814 00c4 03000000 		.word	3
 6815 00c8 04       		.byte	4
 6816 00c9 000000   		.space	3
 6817 00cc 03000000 		.word	3
 6818 00d0 2F       		.byte	47
 6819 00d1 000000   		.space	3
 6820 00d4 0A000000 		.word	10
 6821 00d8 2F       		.byte	47
 6822 00d9 000000   		.space	3
 6823 00dc 0B000000 		.word	11
 6824 00e0 2A       		.byte	42
 6825 00e1 000000   		.space	3
 6826 00e4 00000000 		.word	0
 6827 00e8 31       		.byte	49
 6828 00e9 000000   		.space	3
 6829 00ec 0D000000 		.word	13
 6830 00f0 2F       		.byte	47
 6831 00f1 000000   		.space	3
 6832 00f4 63000000 		.word	99
 6833 00f8 20       		.byte	32
 6834 00f9 000000   		.space	3
 6835 00fc 03000000 		.word	3
 6836 0100 2F       		.byte	47
 6837 0101 000000   		.space	3
 6838 0104 19000000 		.word	25
 6839 0108 24       		.byte	36
 6840 0109 000000   		.space	3
 6841 010c 03000000 		.word	3
 6842 0110 2F       		.byte	47
 6843 0111 000000   		.space	3
 6844 0114 08000000 		.word	8
 6845 0118 0D       		.byte	13
 6846 0119 000000   		.space	3
 6847 011c 01000000 		.word	1
 6848 0120 27       		.byte	39
 6849 0121 000000   		.space	3
 6850 0124 03000000 		.word	3
 6851 0128 06       		.byte	6
 6852 0129 000000   		.space	3
 6853 012c 03000000 		.word	3
 6854 0130 2E       		.byte	46
 6855 0131 000000   		.space	3
 6856 0134 00000000 		.word	0
 6857 0138 2E       		.byte	46
 6858 0139 000000   		.space	3
ARM GAS  /tmp/ccVzm1xY.s 			page 170


 6859 013c 00000000 		.word	0
 6860 0140 2E       		.byte	46
 6861 0141 000000   		.space	3
 6862 0144 00000000 		.word	0
 6863 0148 2E       		.byte	46
 6864 0149 000000   		.space	3
 6865 014c 00000000 		.word	0
 6866 0150 2E       		.byte	46
 6867 0151 000000   		.space	3
 6868 0154 00000000 		.word	0
 6869 0158 2E       		.byte	46
 6870 0159 000000   		.space	3
 6871 015c 00000000 		.word	0
 6872 0160 2E       		.byte	46
 6873 0161 000000   		.space	3
 6874 0164 00000000 		.word	0
 6875 0168 2F       		.byte	47
 6876 0169 000000   		.space	3
 6877 016c FFFFFFFF 		.word	-1
 6878 0170 2F       		.byte	47
 6879 0171 000000   		.space	3
 6880 0174 05000000 		.word	5
 6881              		.section	.rodata.mapping_gshift.11142,"a"
 6882              		.align	2
 6883              		.set	.LANCHOR17,. + 0
 6886              	mapping_gshift.11142:
 6887 0000 63       		.byte	99
 6888 0001 000000   		.space	3
 6889 0004 FFFFFFFF 		.word	-1
 6890 0008 28       		.byte	40
 6891 0009 000000   		.space	3
 6892 000c 03000000 		.word	3
 6893 0010 16       		.byte	22
 6894 0011 000000   		.space	3
 6895 0014 01000000 		.word	1
 6896 0018 1C       		.byte	28
 6897 0019 000000   		.space	3
 6898 001c 01000000 		.word	1
 6899 0020 13       		.byte	19
 6900 0021 000000   		.space	3
 6901 0024 02000000 		.word	2
 6902 0028 2E       		.byte	46
 6903 0029 000000   		.space	3
 6904 002c 00000000 		.word	0
 6905 0030 2E       		.byte	46
 6906 0031 000000   		.space	3
 6907 0034 00000000 		.word	0
 6908 0038 2E       		.byte	46
 6909 0039 000000   		.space	3
 6910 003c 00000000 		.word	0
 6911 0040 07       		.byte	7
 6912 0041 000000   		.space	3
 6913 0044 03000000 		.word	3
 6914 0048 08       		.byte	8
 6915 0049 000000   		.space	3
 6916 004c 03000000 		.word	3
 6917 0050 2F       		.byte	47
ARM GAS  /tmp/ccVzm1xY.s 			page 171


 6918 0051 000000   		.space	3
 6919 0054 04000000 		.word	4
 6920 0058 2F       		.byte	47
 6921 0059 000000   		.space	3
 6922 005c 04000000 		.word	4
 6923 0060 2F       		.byte	47
 6924 0061 000000   		.space	3
 6925 0064 04000000 		.word	4
 6926 0068 0C       		.byte	12
 6927 0069 000000   		.space	3
 6928 006c 02000000 		.word	2
 6929 0070 2F       		.byte	47
 6930 0071 000000   		.space	3
 6931 0074 06000000 		.word	6
 6932 0078 05       		.byte	5
 6933 0079 000000   		.space	3
 6934 007c 03000000 		.word	3
 6935 0080 2E       		.byte	46
 6936 0081 000000   		.space	3
 6937 0084 00000000 		.word	0
 6938 0088 2E       		.byte	46
 6939 0089 000000   		.space	3
 6940 008c 00000000 		.word	0
 6941 0090 2E       		.byte	46
 6942 0091 000000   		.space	3
 6943 0094 00000000 		.word	0
 6944 0098 2E       		.byte	46
 6945 0099 000000   		.space	3
 6946 009c 00000000 		.word	0
 6947 00a0 2E       		.byte	46
 6948 00a1 000000   		.space	3
 6949 00a4 00000000 		.word	0
 6950 00a8 1B       		.byte	27
 6951 00a9 000000   		.space	3
 6952 00ac 03000000 		.word	3
 6953 00b0 1A       		.byte	26
 6954 00b1 000000   		.space	3
 6955 00b4 03000000 		.word	3
 6956 00b8 2E       		.byte	46
 6957 00b9 000000   		.space	3
 6958 00bc 00000000 		.word	0
 6959 00c0 2E       		.byte	46
 6960 00c1 000000   		.space	3
 6961 00c4 00000000 		.word	0
 6962 00c8 0C       		.byte	12
 6963 00c9 000000   		.space	3
 6964 00cc 03000000 		.word	3
 6965 00d0 1F       		.byte	31
 6966 00d1 000000   		.space	3
 6967 00d4 03000000 		.word	3
 6968 00d8 19       		.byte	25
 6969 00d9 000000   		.space	3
 6970 00dc 03000000 		.word	3
 6971 00e0 2A       		.byte	42
 6972 00e1 000000   		.space	3
 6973 00e4 FFFFFFFF 		.word	-1
 6974 00e8 2E       		.byte	46
ARM GAS  /tmp/ccVzm1xY.s 			page 172


 6975 00e9 000000   		.space	3
 6976 00ec 00000000 		.word	0
 6977 00f0 2F       		.byte	47
 6978 00f1 000000   		.space	3
 6979 00f4 18000000 		.word	24
 6980 00f8 21       		.byte	33
 6981 00f9 000000   		.space	3
 6982 00fc 03000000 		.word	3
 6983 0100 2E       		.byte	46
 6984 0101 000000   		.space	3
 6985 0104 00000000 		.word	0
 6986 0108 24       		.byte	36
 6987 0109 000000   		.space	3
 6988 010c 02000000 		.word	2
 6989 0110 2F       		.byte	47
 6990 0111 000000   		.space	3
 6991 0114 0D000000 		.word	13
 6992 0118 2E       		.byte	46
 6993 0119 000000   		.space	3
 6994 011c 00000000 		.word	0
 6995 0120 2F       		.byte	47
 6996 0121 000000   		.space	3
 6997 0124 07000000 		.word	7
 6998 0128 1E       		.byte	30
 6999 0129 000000   		.space	3
 7000 012c 03000000 		.word	3
 7001 0130 2E       		.byte	46
 7002 0131 000000   		.space	3
 7003 0134 00000000 		.word	0
 7004 0138 2E       		.byte	46
 7005 0139 000000   		.space	3
 7006 013c 00000000 		.word	0
 7007 0140 2E       		.byte	46
 7008 0141 000000   		.space	3
 7009 0144 00000000 		.word	0
 7010 0148 2E       		.byte	46
 7011 0149 000000   		.space	3
 7012 014c 00000000 		.word	0
 7013 0150 2E       		.byte	46
 7014 0151 000000   		.space	3
 7015 0154 00000000 		.word	0
 7016 0158 2E       		.byte	46
 7017 0159 000000   		.space	3
 7018 015c 00000000 		.word	0
 7019 0160 2E       		.byte	46
 7020 0161 000000   		.space	3
 7021 0164 00000000 		.word	0
 7022 0168 2E       		.byte	46
 7023 0169 000000   		.space	3
 7024 016c 00000000 		.word	0
 7025 0170 2E       		.byte	46
 7026 0171 000000   		.space	3
 7027 0174 00000000 		.word	0
 7028              		.section	.rodata.mapping_none.11140,"a"
 7029              		.align	2
 7030              		.set	.LANCHOR13,. + 0
 7033              	mapping_none.11140:
ARM GAS  /tmp/ccVzm1xY.s 			page 173


 7034 0000 63       		.byte	99
 7035 0001 000000   		.space	3
 7036 0004 FFFFFFFF 		.word	-1
 7037 0008 00       		.byte	0
 7038 0009 000000   		.space	3
 7039 000c 00000000 		.word	0
 7040 0010 01       		.byte	1
 7041 0011 000000   		.space	3
 7042 0014 00000000 		.word	0
 7043 0018 03       		.byte	3
 7044 0019 000000   		.space	3
 7045 001c 00000000 		.word	0
 7046 0020 13       		.byte	19
 7047 0021 000000   		.space	3
 7048 0024 02000000 		.word	2
 7049 0028 12       		.byte	18
 7050 0029 000000   		.space	3
 7051 002c 02000000 		.word	2
 7052 0030 12       		.byte	18
 7053 0031 000000   		.space	3
 7054 0034 00000000 		.word	0
 7055 0038 06       		.byte	6
 7056 0039 000000   		.space	3
 7057 003c 00000000 		.word	0
 7058 0040 07       		.byte	7
 7059 0041 000000   		.space	3
 7060 0044 00000000 		.word	0
 7061 0048 08       		.byte	8
 7062 0049 000000   		.space	3
 7063 004c 00000000 		.word	0
 7064 0050 01       		.byte	1
 7065 0051 000000   		.space	3
 7066 0054 01000000 		.word	1
 7067 0058 02       		.byte	2
 7068 0059 000000   		.space	3
 7069 005c 01000000 		.word	1
 7070 0060 03       		.byte	3
 7071 0061 000000   		.space	3
 7072 0064 01000000 		.word	1
 7073 0068 0C       		.byte	12
 7074 0069 000000   		.space	3
 7075 006c 00000000 		.word	0
 7076 0070 0D       		.byte	13
 7077 0071 000000   		.space	3
 7078 0074 00000000 		.word	0
 7079 0078 0E       		.byte	14
 7080 0079 000000   		.space	3
 7081 007c 00000000 		.word	0
 7082 0080 0F       		.byte	15
 7083 0081 000000   		.space	3
 7084 0084 00000000 		.word	0
 7085 0088 10       		.byte	16
 7086 0089 000000   		.space	3
 7087 008c 00000000 		.word	0
 7088 0090 18       		.byte	24
 7089 0091 000000   		.space	3
 7090 0094 00000000 		.word	0
ARM GAS  /tmp/ccVzm1xY.s 			page 174


 7091 0098 13       		.byte	19
 7092 0099 000000   		.space	3
 7093 009c 00000000 		.word	0
 7094 00a0 14       		.byte	20
 7095 00a1 000000   		.space	3
 7096 00a4 00000000 		.word	0
 7097 00a8 15       		.byte	21
 7098 00a9 000000   		.space	3
 7099 00ac 00000000 		.word	0
 7100 00b0 16       		.byte	22
 7101 00b1 000000   		.space	3
 7102 00b4 00000000 		.word	0
 7103 00b8 1E       		.byte	30
 7104 00b9 000000   		.space	3
 7105 00bc 00000000 		.word	0
 7106 00c0 19       		.byte	25
 7107 00c1 000000   		.space	3
 7108 00c4 00000000 		.word	0
 7109 00c8 1A       		.byte	26
 7110 00c9 000000   		.space	3
 7111 00cc 00000000 		.word	0
 7112 00d0 1B       		.byte	27
 7113 00d1 000000   		.space	3
 7114 00d4 00000000 		.word	0
 7115 00d8 1C       		.byte	28
 7116 00d9 000000   		.space	3
 7117 00dc 00000000 		.word	0
 7118 00e0 29       		.byte	41
 7119 00e1 000000   		.space	3
 7120 00e4 00000000 		.word	0
 7121 00e8 1F       		.byte	31
 7122 00e9 000000   		.space	3
 7123 00ec 00000000 		.word	0
 7124 00f0 20       		.byte	32
 7125 00f1 000000   		.space	3
 7126 00f4 00000000 		.word	0
 7127 00f8 21       		.byte	33
 7128 00f9 000000   		.space	3
 7129 00fc 00000000 		.word	0
 7130 0100 22       		.byte	34
 7131 0101 000000   		.space	3
 7132 0104 00000000 		.word	0
 7133 0108 24       		.byte	36
 7134 0109 000000   		.space	3
 7135 010c 00000000 		.word	0
 7136 0110 25       		.byte	37
 7137 0111 000000   		.space	3
 7138 0114 00000000 		.word	0
 7139 0118 26       		.byte	38
 7140 0119 000000   		.space	3
 7141 011c 00000000 		.word	0
 7142 0120 27       		.byte	39
 7143 0121 000000   		.space	3
 7144 0124 00000000 		.word	0
 7145 0128 28       		.byte	40
 7146 0129 000000   		.space	3
 7147 012c 00000000 		.word	0
ARM GAS  /tmp/ccVzm1xY.s 			page 175


 7148 0130 2E       		.byte	46
 7149 0131 000000   		.space	3
 7150 0134 00000000 		.word	0
 7151 0138 2E       		.byte	46
 7152 0139 000000   		.space	3
 7153 013c 00000000 		.word	0
 7154 0140 2E       		.byte	46
 7155 0141 000000   		.space	3
 7156 0144 00000000 		.word	0
 7157 0148 2E       		.byte	46
 7158 0149 000000   		.space	3
 7159 014c 00000000 		.word	0
 7160 0150 2E       		.byte	46
 7161 0151 000000   		.space	3
 7162 0154 00000000 		.word	0
 7163 0158 2E       		.byte	46
 7164 0159 000000   		.space	3
 7165 015c 00000000 		.word	0
 7166 0160 2E       		.byte	46
 7167 0161 000000   		.space	3
 7168 0164 00000000 		.word	0
 7169 0168 2E       		.byte	46
 7170 0169 000000   		.space	3
 7171 016c 00000000 		.word	0
 7172 0170 2E       		.byte	46
 7173 0171 000000   		.space	3
 7174 0174 00000000 		.word	0
 7175              		.section	.rodata.mapping_running.11144,"a"
 7176              		.align	2
 7177              		.set	.LANCHOR12,. + 0
 7180              	mapping_running.11144:
 7181 0000 63       		.byte	99
 7182 0001 000000   		.space	3
 7183 0004 FFFFFFFF 		.word	-1
 7184 0008 00       		.byte	0
 7185 0009 000000   		.space	3
 7186 000c 00000000 		.word	0
 7187 0010 01       		.byte	1
 7188 0011 000000   		.space	3
 7189 0014 00000000 		.word	0
 7190 0018 02       		.byte	2
 7191 0019 000000   		.space	3
 7192 001c 00000000 		.word	0
 7193 0020 03       		.byte	3
 7194 0021 000000   		.space	3
 7195 0024 00000000 		.word	0
 7196 0028 04       		.byte	4
 7197 0029 000000   		.space	3
 7198 002c 00000000 		.word	0
 7199 0030 12       		.byte	18
 7200 0031 000000   		.space	3
 7201 0034 00000000 		.word	0
 7202 0038 06       		.byte	6
 7203 0039 000000   		.space	3
 7204 003c 00000000 		.word	0
 7205 0040 07       		.byte	7
 7206 0041 000000   		.space	3
ARM GAS  /tmp/ccVzm1xY.s 			page 176


 7207 0044 00000000 		.word	0
 7208 0048 08       		.byte	8
 7209 0049 000000   		.space	3
 7210 004c 00000000 		.word	0
 7211 0050 09       		.byte	9
 7212 0051 000000   		.space	3
 7213 0054 00000000 		.word	0
 7214 0058 0A       		.byte	10
 7215 0059 000000   		.space	3
 7216 005c 00000000 		.word	0
 7217 0060 0B       		.byte	11
 7218 0061 000000   		.space	3
 7219 0064 00000000 		.word	0
 7220 0068 0C       		.byte	12
 7221 0069 000000   		.space	3
 7222 006c 00000000 		.word	0
 7223 0070 0D       		.byte	13
 7224 0071 000000   		.space	3
 7225 0074 00000000 		.word	0
 7226 0078 0E       		.byte	14
 7227 0079 000000   		.space	3
 7228 007c 00000000 		.word	0
 7229 0080 0F       		.byte	15
 7230 0081 000000   		.space	3
 7231 0084 00000000 		.word	0
 7232 0088 10       		.byte	16
 7233 0089 000000   		.space	3
 7234 008c 00000000 		.word	0
 7235 0090 18       		.byte	24
 7236 0091 000000   		.space	3
 7237 0094 00000000 		.word	0
 7238 0098 13       		.byte	19
 7239 0099 000000   		.space	3
 7240 009c 00000000 		.word	0
 7241 00a0 14       		.byte	20
 7242 00a1 000000   		.space	3
 7243 00a4 00000000 		.word	0
 7244 00a8 15       		.byte	21
 7245 00a9 000000   		.space	3
 7246 00ac 00000000 		.word	0
 7247 00b0 16       		.byte	22
 7248 00b1 000000   		.space	3
 7249 00b4 00000000 		.word	0
 7250 00b8 1E       		.byte	30
 7251 00b9 000000   		.space	3
 7252 00bc 00000000 		.word	0
 7253 00c0 19       		.byte	25
 7254 00c1 000000   		.space	3
 7255 00c4 00000000 		.word	0
 7256 00c8 1A       		.byte	26
 7257 00c9 000000   		.space	3
 7258 00cc 00000000 		.word	0
 7259 00d0 1B       		.byte	27
 7260 00d1 000000   		.space	3
 7261 00d4 00000000 		.word	0
 7262 00d8 1C       		.byte	28
 7263 00d9 000000   		.space	3
ARM GAS  /tmp/ccVzm1xY.s 			page 177


 7264 00dc 00000000 		.word	0
 7265 00e0 09       		.byte	9
 7266 00e1 000000   		.space	3
 7267 00e4 00000000 		.word	0
 7268 00e8 1F       		.byte	31
 7269 00e9 000000   		.space	3
 7270 00ec 00000000 		.word	0
 7271 00f0 20       		.byte	32
 7272 00f1 000000   		.space	3
 7273 00f4 00000000 		.word	0
 7274 00f8 21       		.byte	33
 7275 00f9 000000   		.space	3
 7276 00fc 00000000 		.word	0
 7277 0100 22       		.byte	34
 7278 0101 000000   		.space	3
 7279 0104 00000000 		.word	0
 7280 0108 24       		.byte	36
 7281 0109 000000   		.space	3
 7282 010c 00000000 		.word	0
 7283 0110 25       		.byte	37
 7284 0111 000000   		.space	3
 7285 0114 00000000 		.word	0
 7286 0118 26       		.byte	38
 7287 0119 000000   		.space	3
 7288 011c 00000000 		.word	0
 7289 0120 27       		.byte	39
 7290 0121 000000   		.space	3
 7291 0124 00000000 		.word	0
 7292 0128 28       		.byte	40
 7293 0129 000000   		.space	3
 7294 012c 00000000 		.word	0
 7295 0130 2E       		.byte	46
 7296 0131 000000   		.space	3
 7297 0134 00000000 		.word	0
 7298 0138 2E       		.byte	46
 7299 0139 000000   		.space	3
 7300 013c 00000000 		.word	0
 7301 0140 2E       		.byte	46
 7302 0141 000000   		.space	3
 7303 0144 00000000 		.word	0
 7304 0148 2E       		.byte	46
 7305 0149 000000   		.space	3
 7306 014c 00000000 		.word	0
 7307 0150 04       		.byte	4
 7308 0151 000000   		.space	3
 7309 0154 00000000 		.word	0
 7310 0158 05       		.byte	5
 7311 0159 000000   		.space	3
 7312 015c 00000000 		.word	0
 7313 0160 2E       		.byte	46
 7314 0161 000000   		.space	3
 7315 0164 00000000 		.word	0
 7316 0168 2E       		.byte	46
 7317 0169 000000   		.space	3
 7318 016c 00000000 		.word	0
 7319 0170 2E       		.byte	46
 7320 0171 000000   		.space	3
ARM GAS  /tmp/ccVzm1xY.s 			page 178


 7321 0174 00000000 		.word	0
 7322              		.section	.rodata.mid_menu,"a"
 7323              		.align	2
 7326              	mid_menu:
 7327 0000 C8C40B00 		.ascii	"\310\304\013\000"
 7328              		.text
 7329              	.Letext0:
 7330              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 7331              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 7332              		.file 6 "/usr/include/newlib/sys/_types.h"
 7333              		.file 7 "/usr/include/newlib/sys/reent.h"
 7334              		.file 8 "/usr/include/newlib/sys/lock.h"
 7335              		.file 9 "/usr/include/newlib/stdlib.h"
 7336              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 7337              		.file 11 "/usr/include/newlib/ctype.h"
 7338              		.file 12 "dmcp/ff_ifc.h"
 7339              		.file 13 "dmcp/dmcp.h"
 7340              		.file 14 "src/keys.h"
 7341              		.file 15 "src/menu.h"
 7342              		.file 16 "src/decNumber/decContext.h"
 7343              		.file 17 "src/decNumber/decNumber.h"
 7344              		.file 18 "src/decNumber/decimal64.h"
 7345              		.file 19 "src/decNumber/decimal128.h"
 7346              		.file 20 "src/xeq.h"
 7347              		.file 21 "src/data.h"
 7348              		.file 22 "src/display.h"
 7349              		.file 23 "src/consts.h"
 7350              		.file 24 "src/storage.h"
 7351              		.file 25 "src/catalogues.h"
 7352              		.file 26 "src/stopwatch.h"
 7353              		.file 27 "src/lcd.h"
 7354              		.file 28 "/usr/include/newlib/string.h"
 7355              		.file 29 "/usr/include/newlib/stdio.h"
 7356              		.file 30 "<built-in>"
ARM GAS  /tmp/ccVzm1xY.s 			page 179


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccVzm1xY.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/ccVzm1xY.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/ccVzm1xY.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/ccVzm1xY.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/ccVzm1xY.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccVzm1xY.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccVzm1xY.s:433    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/ccVzm1xY.s:441    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/ccVzm1xY.s:460    .text.disp_about:0000000000000000 $t
     /tmp/ccVzm1xY.s:468    .text.disp_about:0000000000000000 disp_about
     /tmp/ccVzm1xY.s:621    .text.disp_about:0000000000000080 $d
     /tmp/ccVzm1xY.s:639    .text.run_menu_item:0000000000000000 $t
     /tmp/ccVzm1xY.s:647    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/ccVzm1xY.s:687    .text.set_menu:0000000000000000 $t
     /tmp/ccVzm1xY.s:695    .text.set_menu:0000000000000000 set_menu
     /tmp/ccVzm1xY.s:750    .text.set_menu:000000000000002c $d
     /tmp/ccVzm1xY.s:757    .text.set_default_menu:0000000000000000 $t
     /tmp/ccVzm1xY.s:765    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/ccVzm1xY.s:839    .text.set_default_menu:000000000000002c $d
     /tmp/ccVzm1xY.s:848    .text.toggle_default_menu:0000000000000000 $t
     /tmp/ccVzm1xY.s:856    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/ccVzm1xY.s:958    .text.toggle_default_menu:0000000000000044 $d
     /tmp/ccVzm1xY.s:969    .text.get_menu:0000000000000000 $t
     /tmp/ccVzm1xY.s:977    .text.get_menu:0000000000000000 get_menu
     /tmp/ccVzm1xY.s:993    .text.get_menu:0000000000000008 $d
     /tmp/ccVzm1xY.s:998    .text.get_last_menu:0000000000000000 $t
     /tmp/ccVzm1xY.s:1006   .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/ccVzm1xY.s:1022   .text.get_last_menu:0000000000000008 $d
     /tmp/ccVzm1xY.s:1027   .text.set_last_menu:0000000000000000 $t
     /tmp/ccVzm1xY.s:1035   .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccVzm1xY.s:1110   .text.set_last_menu:000000000000002c $d
     /tmp/ccVzm1xY.s:1119   .text.mdot:0000000000000000 $t
     /tmp/ccVzm1xY.s:1127   .text.mdot:0000000000000000 mdot
     /tmp/ccVzm1xY.s:1218   .text.mdot:000000000000003c $d
     /tmp/ccVzm1xY.s:1223   .text.get_current_menu_ref:0000000000000000 $t
     /tmp/ccVzm1xY.s:1231   .text.get_current_menu_ref:0000000000000000 get_current_menu_ref
     /tmp/ccVzm1xY.s:1273   .text.get_current_menu_ref:0000000000000028 $d
     /tmp/ccVzm1xY.s:1377   .text.get_current_menu_ref:000000000000007c $d
     /tmp/ccVzm1xY.s:4948   .rodata.Menus:0000000000000000 Menus
     /tmp/ccVzm1xY.s:1385   .text.display_menu:0000000000000000 $t
     /tmp/ccVzm1xY.s:1393   .text.display_menu:0000000000000000 display_menu
     /tmp/ccVzm1xY.s:1641   .text.display_menu:000000000000010c $d
     /tmp/ccVzm1xY.s:1648   .text.display_current_menu:0000000000000000 $t
     /tmp/ccVzm1xY.s:1656   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccVzm1xY.s:1692   .text.all_menu_dots:0000000000000000 $t
     /tmp/ccVzm1xY.s:1700   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccVzm1xY.s:1784   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccVzm1xY.s:1789   .text.umen_store:0000000000000000 $t
     /tmp/ccVzm1xY.s:1797   .text.umen_store:0000000000000000 umen_store
     /tmp/ccVzm1xY.s:1898   .text.umen_store:0000000000000050 $d
     /tmp/ccVzm1xY.s:1903   .text.build_user_menu_from_program:0000000000000000 $t
     /tmp/ccVzm1xY.s:1911   .text.build_user_menu_from_program:0000000000000000 build_user_menu_from_program
     /tmp/ccVzm1xY.s:2322   .text.build_user_menu_from_program:0000000000000180 $d
     /tmp/ccVzm1xY.s:2335   .text.build_user_menu:0000000000000000 $t
     /tmp/ccVzm1xY.s:2343   .text.build_user_menu:0000000000000000 build_user_menu
ARM GAS  /tmp/ccVzm1xY.s 			page 180


     /tmp/ccVzm1xY.s:2359   .text.build_user_menu:0000000000000008 $d
     /tmp/ccVzm1xY.s:2364   .text.shutdown:0000000000000000 $t
     /tmp/ccVzm1xY.s:2372   .text.shutdown:0000000000000000 shutdown
     /tmp/ccVzm1xY.s:2390   .text.shutdown:000000000000000c $d
     /tmp/ccVzm1xY.s:2395   .text.is_key_pressed:0000000000000000 $t
     /tmp/ccVzm1xY.s:2403   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccVzm1xY.s:2426   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccVzm1xY.s:2431   .text.get_key:0000000000000000 $t
     /tmp/ccVzm1xY.s:2439   .text.get_key:0000000000000000 get_key
     /tmp/ccVzm1xY.s:2454   .text.get_key:0000000000000004 $d
     /tmp/ccVzm1xY.s:2459   .text.put_key:0000000000000000 $t
     /tmp/ccVzm1xY.s:2467   .text.put_key:0000000000000000 put_key
     /tmp/ccVzm1xY.s:2546   .text.put_key:000000000000003c $d
     /tmp/ccVzm1xY.s:2552   .text.shift_down:0000000000000000 $t
     /tmp/ccVzm1xY.s:2560   .text.shift_down:0000000000000000 shift_down
     /tmp/ccVzm1xY.s:2575   .text.start_key_timer:0000000000000000 $t
     /tmp/ccVzm1xY.s:2583   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccVzm1xY.s:2607   .text.start_key_timer:000000000000000c $d
     /tmp/ccVzm1xY.s:2613   .text.keyticks:0000000000000000 $t
     /tmp/ccVzm1xY.s:2621   .text.keyticks:0000000000000000 keyticks
     /tmp/ccVzm1xY.s:2652   .text.keyticks:0000000000000018 $d
     /tmp/ccVzm1xY.s:2658   .text.moveto:0000000000000000 $t
     /tmp/ccVzm1xY.s:2666   .text.moveto:0000000000000000 moveto
     /tmp/ccVzm1xY.s:2726   .text.moveto:000000000000002c $d
     /tmp/ccVzm1xY.s:2733   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccVzm1xY.s:2737   .text.print_debug:0000000000000000 $t
     /tmp/ccVzm1xY.s:2745   .text.print_debug:0000000000000000 print_debug
     /tmp/ccVzm1xY.s:2847   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccVzm1xY.s:2858   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccVzm1xY.s:2862   .text.print_debug2:0000000000000000 $t
     /tmp/ccVzm1xY.s:2870   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccVzm1xY.s:2972   .text.print_debug2:0000000000000064 $d
     /tmp/ccVzm1xY.s:2983   .text.do_now:0000000000000000 $t
     /tmp/ccVzm1xY.s:2991   .text.do_now:0000000000000000 do_now
     /tmp/ccVzm1xY.s:3026   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccVzm1xY.s:3030   .text.do_multi:0000000000000000 $t
     /tmp/ccVzm1xY.s:3038   .text.do_multi:0000000000000000 do_multi
     /tmp/ccVzm1xY.s:3068   .text.do_multi:0000000000000016 $d
     /tmp/ccVzm1xY.s:3082   .text.do_multi:0000000000000024 $t
     /tmp/ccVzm1xY.s:3500   .text.do_multi:00000000000001c0 $d
     /tmp/ccVzm1xY.s:3514   .text.program_main:0000000000000000 $t
     /tmp/ccVzm1xY.s:3522   .text.program_main:0000000000000000 program_main
     /tmp/ccVzm1xY.s:3787   .text.program_main:000000000000011c $d
     /tmp/ccVzm1xY.s:3793   .text.program_main:0000000000000128 $t
     /tmp/ccVzm1xY.s:4186   .text.program_main:00000000000002dc $d
     /tmp/ccVzm1xY.s:4227   .text.program_main:0000000000000364 $t
     /tmp/ccVzm1xY.s:4695   .text.program_main:000000000000059c $d
     /tmp/ccVzm1xY.s:4783   .bss.n_p:0000000000000000 n_p
     /tmp/ccVzm1xY.s:4932   .data.spaces:0000000000000000 spaces
     /tmp/ccVzm1xY.s:4923   .data.release:0000000000000000 release
     /tmp/ccVzm1xY.s:4896   .data.h_shift:0000000000000000 h_shift
     /tmp/ccVzm1xY.s:4887   .data.g_shift:0000000000000000 g_shift
     /tmp/ccVzm1xY.s:4879   .data.f_shift:0000000000000000 f_shift
     /tmp/ccVzm1xY.s:4905   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccVzm1xY.s:4914   .data.no_key:0000000000000000 no_key
     /tmp/ccVzm1xY.s:4939   .rodata.MID_MENU:0000000000000000 MID_MENU
ARM GAS  /tmp/ccVzm1xY.s 			page 181


     /tmp/ccVzm1xY.s:4723   .rodata.str1.4:0000000000000000 $d
     /tmp/ccVzm1xY.s:7326   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccVzm1xY.s:4764   .bss.default_menu:0000000000000000 default_menu
     /tmp/ccVzm1xY.s:4770   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccVzm1xY.s:4758   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccVzm1xY.s:4873   .data.cmplx_key_string:0000000000000000 cmplx_key_string
     /tmp/ccVzm1xY.s:4866   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/ccVzm1xY.s:4797   .data.UserMenu:0000000000000000 UserMenu
     /tmp/ccVzm1xY.s:4740   .rodata:0000000000000000 $d
     /tmp/ccVzm1xY.s:4759   .bss.current_menu:0000000000000000 $d
     /tmp/ccVzm1xY.s:4765   .bss.default_menu:0000000000000000 $d
     /tmp/ccVzm1xY.s:4771   .bss.last_menu:0000000000000000 $d
     /tmp/ccVzm1xY.s:4773   .bss.mdots:0000000000000000 $d
     /tmp/ccVzm1xY.s:4777   .bss.mdots:0000000000000000 mdots
     /tmp/ccVzm1xY.s:4780   .bss.n_p:0000000000000000 $d
     /tmp/ccVzm1xY.s:4786   .bss.start_ticks:0000000000000000 $d
     /tmp/ccVzm1xY.s:4790   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccVzm1xY.s:4793   .data.UserMenu:0000000000000000 $d
     /tmp/ccVzm1xY.s:4862   .data.arrow_key_string:0000000000000000 $d
     /tmp/ccVzm1xY.s:4869   .data.cmplx_key_string:0000000000000000 $d
     /tmp/ccVzm1xY.s:4876   .data.f_shift:0000000000000000 $d
     /tmp/ccVzm1xY.s:4884   .data.g_shift:0000000000000000 $d
     /tmp/ccVzm1xY.s:4892   .data.h_shift:0000000000000000 $d
     /tmp/ccVzm1xY.s:4901   .data.heartbeat:0000000000000000 $d
     /tmp/ccVzm1xY.s:4910   .data.no_key:0000000000000000 $d
     /tmp/ccVzm1xY.s:4919   .data.release:0000000000000000 $d
     /tmp/ccVzm1xY.s:4928   .data.spaces:0000000000000000 $d
     /tmp/ccVzm1xY.s:4935   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccVzm1xY.s:4945   .rodata.Menus:0000000000000000 $d
     /tmp/ccVzm1xY.s:6588   .rodata.mapping_alpha.11143:0000000000000000 $d
     /tmp/ccVzm1xY.s:6592   .rodata.mapping_alpha.11143:0000000000000000 mapping_alpha.11143
     /tmp/ccVzm1xY.s:6735   .rodata.mapping_fshift.11141:0000000000000000 $d
     /tmp/ccVzm1xY.s:6739   .rodata.mapping_fshift.11141:0000000000000000 mapping_fshift.11141
     /tmp/ccVzm1xY.s:6882   .rodata.mapping_gshift.11142:0000000000000000 $d
     /tmp/ccVzm1xY.s:6886   .rodata.mapping_gshift.11142:0000000000000000 mapping_gshift.11142
     /tmp/ccVzm1xY.s:7029   .rodata.mapping_none.11140:0000000000000000 $d
     /tmp/ccVzm1xY.s:7033   .rodata.mapping_none.11140:0000000000000000 mapping_none.11140
     /tmp/ccVzm1xY.s:7176   .rodata.mapping_running.11144:0000000000000000 $d
     /tmp/ccVzm1xY.s:7180   .rodata.mapping_running.11144:0000000000000000 mapping_running.11144
     /tmp/ccVzm1xY.s:7323   .rodata.mid_menu:0000000000000000 $d
     /tmp/ccVzm1xY.s:1288   .text.get_current_menu_ref:0000000000000037 $d
     /tmp/ccVzm1xY.s:1288   .text.get_current_menu_ref:0000000000000038 $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
memcpy
main_ram
pixel_length
strncpy
findmultilbl
do_inc
getprog
prt_umen
ARM GAS  /tmp/ccVzm1xY.s 			page 182


catcmd
strcpy
sprintf
process_keycode_with_shift
reset_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
KeyCallback
JustDisplayed
Pause
Running
DM42_Ticker
is_dot
dot
finish_LEQ
get_alpha_state
StopWatchStatus
JustStopped

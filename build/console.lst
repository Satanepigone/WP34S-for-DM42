ARM GAS  /tmp/ccrLsn8H.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC3:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** //#include <menu.h>
   2:src/menu.c    **** extern const char SvnRevision[4];
   3:src/menu.c    **** 
   4:src/menu.c    **** struct _menu UserMenu =
   5:src/menu.c    ****   {
   6:src/menu.c    ****     "User Menu", 
   7:src/menu.c    ****     {
   8:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   9:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  10:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  11:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  12:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  13:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
  14:src/menu.c    ****     }
  15:src/menu.c    ****   };
  16:src/menu.c    **** 
  17:src/menu.c    **** const char* arrow_key_string = "--\015";
  18:src/menu.c    **** const char* cmplx_key_string = "CPX";
  19:src/menu.c    **** 
  20:src/menu.c    **** menu_name current_menu = 0;
  21:src/menu.c    **** menu_name last_menu = 0;
  22:src/menu.c    **** menu_name default_menu = 0;
  23:src/menu.c    **** 
ARM GAS  /tmp/ccrLsn8H.s 			page 2


  24:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted);
  25:src/menu.c    **** 
  26:src/menu.c    **** 
  27:src/menu.c    **** 
  28:src/menu.c    **** /* 
  29:src/menu.c    ****  * System menu stuff
  30:src/menu.c    ****  */
  31:src/menu.c    **** 
  32:src/menu.c    **** #define MI_ABOUT_PGM 11
  33:src/menu.c    **** 
  34:src/menu.c    **** const uint8_t mid_menu[] = {
  35:src/menu.c    ****     MI_SYSTEM_ENTER,
  36:src/menu.c    ****     MI_MSC,
  37:src/menu.c    ****     MI_ABOUT_PGM,
  38:src/menu.c    ****     0 }; // Terminator
  39:src/menu.c    **** 
  40:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  41:src/menu.c    **** 
  42:src/menu.c    **** void disp_about(void);
  43:src/menu.c    **** 
  44:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  45:src/menu.c    ****   int ret = 0;
  46:src/menu.c    **** 
  47:src/menu.c    ****   switch(line_id) {
  48:src/menu.c    ****     case MI_ABOUT_PGM:
  49:src/menu.c    ****       disp_about();
  50:src/menu.c    ****       break;
  51:src/menu.c    **** 
  52:src/menu.c    ****      default:
  53:src/menu.c    ****       ret = MRET_UNIMPL;
  54:src/menu.c    ****       break;
  55:src/menu.c    ****   }
  56:src/menu.c    **** 
  57:src/menu.c    ****   return ret;
  58:src/menu.c    **** }
  59:src/menu.c    **** 
  60:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 60 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  61:src/menu.c    ****   const char * ln;
  40              		.loc 1 61 3 view .LVU1
  62:src/menu.c    **** 
  63:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 63 3 view .LVU2
  64:src/menu.c    **** 
  65:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  66:src/menu.c    **** 
  67:src/menu.c    ****   default:
  68:src/menu.c    ****     ln = NULL;
  42              		.loc 1 68 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  63:src/menu.c    **** 
  44              		.loc 1 63 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
ARM GAS  /tmp/ccrLsn8H.s 			page 3


  69:src/menu.c    ****     break;
  70:src/menu.c    ****   }
  71:src/menu.c    **** 
  72:src/menu.c    ****   return ln;
  73:src/menu.c    **** }
  46              		.loc 1 73 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 73 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC3
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB37:
  74:src/menu.c    **** 
  75:src/menu.c    **** void disp_about() {
  76:src/menu.c    ****   char title[] = "WP 34C calculator for DM42: v     ";
  77:src/menu.c    **** 
  78:src/menu.c    ****   xcopy ((title + 29), SvnRevision, 4);
  79:src/menu.c    **** 
  80:src/menu.c    ****   clear_disp(); // clears buffer and zeros dots[]
  81:src/menu.c    ****   lcd_writeClr(t24);
  82:src/menu.c    **** 
  83:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  84:src/menu.c    ****   lcd_putsR(t24, title);
  85:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
  86:src/menu.c    ****   t20->newln = 1;
  87:src/menu.c    ****   t20->inv = 0;
  88:src/menu.c    **** #ifdef TOP_ROW
  89:src/menu.c    ****   lcd_puts(t20, "With longer alpha display and top row,");
  90:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  91:src/menu.c    ****   lcd_puts(t20, "With a longer alpha display,");
  92:src/menu.c    **** #else
  93:src/menu.c    ****   lcd_puts(t20, "Same display layout as the original WP34S,");
  94:src/menu.c    **** #endif
  95:src/menu.c    ****   lcd_puts(t20, "and some annunciators renamed.");
  96:src/menu.c    ****   lcd_puts(t20, "Includes printing, stopwatch,");
  97:src/menu.c    ****   lcd_puts(t20, "entry RPN, extended file handling,");
  98:src/menu.c    ****   lcd_puts(t20, "user-defined menus, and");
  99:src/menu.c    ****   lcd_puts(t20, "complex lock mode.");
 100:src/menu.c    **** 
 101:src/menu.c    ****   t20->y += 5;
 102:src/menu.c    **** 
ARM GAS  /tmp/ccrLsn8H.s 			page 4


 103:src/menu.c    ****   t20->bgfill = 1;
 104:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 105:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 106:src/menu.c    ****   t20->bgfill = 0;
 107:src/menu.c    ****   t20->newln = 0;
 108:src/menu.c    ****   
 109:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
 110:src/menu.c    ****   t24->x = 20;
 111:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 112:src/menu.c    **** 
 113:src/menu.c    ****   lcd_refresh();
 114:src/menu.c    **** 
 115:src/menu.c    ****   wait_for_key_press();
 116:src/menu.c    **** }
 117:src/menu.c    **** 
 118:src/menu.c    **** /*
 119:src/menu.c    ****  * WP34s menu code
 120:src/menu.c    ****  */
 121:src/menu.c    **** 
 122:src/menu.c    **** void set_menu ( menu_name new_menu ) {
 123:src/menu.c    ****   menu_name m = current_menu;
 124:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 125:src/menu.c    ****     current_menu = default_menu;
 126:src/menu.c    ****   }
 127:src/menu.c    ****   else if (new_menu == M_Last) { // go to last menu
 128:src/menu.c    ****     current_menu = last_menu;
 129:src/menu.c    ****   }
 130:src/menu.c    ****   else {
 131:src/menu.c    ****     current_menu = new_menu; // change to new menu
 132:src/menu.c    ****   }
 133:src/menu.c    ****   if ( (m != M_Arrow) && (m != M_Alpha) ) last_menu = m;
 134:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 135:src/menu.c    **** }
 136:src/menu.c    **** 
 137:src/menu.c    **** void set_default_menu () {
 138:src/menu.c    ****   set_menu (default_menu);
 139:src/menu.c    **** }
 140:src/menu.c    **** 
 141:src/menu.c    **** void toggle_default_menu () {
 142:src/menu.c    ****   if (current_menu == M_Blank) {
 143:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 144:src/menu.c    ****     return;
 145:src/menu.c    ****   }
 146:src/menu.c    ****   else if (current_menu == M_Blank2) {
 147:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 148:src/menu.c    ****   }
 149:src/menu.c    ****   else {
 150:src/menu.c    ****     set_default_menu();
 151:src/menu.c    ****   }
 152:src/menu.c    **** }
 153:src/menu.c    **** 
 154:src/menu.c    **** menu_name get_menu () {
 155:src/menu.c    ****   return current_menu;
 156:src/menu.c    **** }
 157:src/menu.c    **** 
 158:src/menu.c    **** menu_name get_last_menu () {
 159:src/menu.c    ****   return last_menu;
ARM GAS  /tmp/ccrLsn8H.s 			page 5


 160:src/menu.c    **** }
 161:src/menu.c    **** 
 162:src/menu.c    **** void display_current_menu () {
 163:src/menu.c    ****   display_menu (get_current_menu_ref());
 164:src/menu.c    **** }
 165:src/menu.c    **** 
 166:src/menu.c    **** void set_last_menu () {
 167:src/menu.c    ****   set_menu (M_Last);
 168:src/menu.c    **** }
 169:src/menu.c    **** 
 170:src/menu.c    **** static unsigned char mdots[200][2];
 171:src/menu.c    **** 
 172:src/menu.c    **** static const struct _menu Menus[] = {
 173:src/menu.c    ****   {
 174:src/menu.c    ****     "M_Blank", // 0
 175:src/menu.c    ****     { 
 176:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 177:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 178:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 179:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 180:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 181:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 182:src/menu.c    ****     }    
 183:src/menu.c    ****   },
 184:src/menu.c    ****   {
 185:src/menu.c    ****     "M_Clear", // 1
 186:src/menu.c    ****     { 
 187:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 188:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 189:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 190:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 191:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 192:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 193:src/menu.c    ****     }    
 194:src/menu.c    ****   },
 195:src/menu.c    ****   {
 196:src/menu.c    ****     "M_Disp", // 2
 197:src/menu.c    ****     { 
 198:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 199:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 200:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 201:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 202:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 203:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 204:src/menu.c    ****     }
 205:src/menu.c    ****   },
 206:src/menu.c    ****   {
 207:src/menu.c    ****     "M_Base", // 3
 208:src/menu.c    ****     { 
 209:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 210:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 211:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 212:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 213:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 214:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 215:src/menu.c    ****     }
 216:src/menu.c    ****   },
ARM GAS  /tmp/ccrLsn8H.s 			page 6


 217:src/menu.c    ****   {
 218:src/menu.c    ****     "M_Angles", // 4
 219:src/menu.c    ****     { 
 220:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 221:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 222:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 223:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 224:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 225:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 226:src/menu.c    ****     }
 227:src/menu.c    ****       
 228:src/menu.c    ****   },
 229:src/menu.c    ****   {
 230:src/menu.c    ****     "M_Misc", // 5
 231:src/menu.c    ****     { 
 232:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 233:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 234:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 235:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 236:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 237:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 238:src/menu.c    ****     }
 239:src/menu.c    ****   },
 240:src/menu.c    ****   {
 241:src/menu.c    ****     "M_Swap", // 6
 242:src/menu.c    ****     { 
 243:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 244:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 245:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 246:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 247:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 248:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 249:src/menu.c    ****     }    
 250:src/menu.c    ****   },
 251:src/menu.c    ****   {
 252:src/menu.c    ****     "M_Program", // 7
 253:src/menu.c    ****     { 
 254:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 255:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 256:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 257:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 258:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 259:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 260:src/menu.c    ****     }
 261:src/menu.c    ****   },
 262:src/menu.c    ****   {
 263:src/menu.c    ****     "M_Setup1", // 8
 264:src/menu.c    ****     { 
 265:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 266:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 267:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 268:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 269:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 270:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 271:src/menu.c    ****     }
 272:src/menu.c    ****   },
 273:src/menu.c    ****   {
ARM GAS  /tmp/ccrLsn8H.s 			page 7


 274:src/menu.c    ****     "M_Arrow", // 9
 275:src/menu.c    ****     { 
 276:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "\015Bin", "\015DEG" },
 277:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "\015Oct", "\015RAD" },
 278:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "\015Dec", "\015Grad" },
 279:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "\015Hex", "\015HMS" },
 280:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 281:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 282:src/menu.c    ****     }
 283:src/menu.c    ****   },
 284:src/menu.c    ****   {
 285:src/menu.c    ****     "M_Flags", // 10
 286:src/menu.c    ****     { 
 287:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
 288:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 289:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 290:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 291:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 292:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 293:src/menu.c    ****     }
 294:src/menu.c    ****   },
 295:src/menu.c    ****   {
 296:src/menu.c    ****     "M_Prob", // 11
 297:src/menu.c    ****     { 
 298:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 299:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 300:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 301:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 302:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 303:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 304:src/menu.c    ****     }
 305:src/menu.c    ****   },
 306:src/menu.c    ****   {
 307:src/menu.c    ****     "M_Stats", // 12
 308:src/menu.c    ****     /*
 309:src/menu.c    ****      *xbar, sd;
 310:src/menu.c    ****      *yhat, xhat;
 311:src/menu.c    ****      *corr, L.R.;
 312:src/menu.c    ****      *best, linear;
 313:src/menu.c    ****      *ln, exp;
 314:src/menu.c    ****      *cmplx, power;
 315:src/menu.c    ****      *No, sums is already on g9.
 316:src/menu.c    ****      */
 317:src/menu.c    ****     { 
 318:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 319:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 320:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 321:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 322:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 323:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 324:src/menu.c    ****     }
 325:src/menu.c    ****   },
 326:src/menu.c    ****   {
 327:src/menu.c    ****     "M_Setup2", // 13
 328:src/menu.c    ****     { 
 329:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 330:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
ARM GAS  /tmp/ccrLsn8H.s 			page 8


 331:src/menu.c    ****       { { K_MULTI, SVPRG }, { K_OP, OP_NIL | OP_PSTO }, "SvCPRG", "PSTO" },
 332:src/menu.c    ****       { { K_MULTI, LDPRG }, { K_OP, OP_NIL | OP_PRCL }, "LdPRG", "PRCL" },
 333:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 334:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 335:src/menu.c    ****     }
 336:src/menu.c    ****   },
 337:src/menu.c    ****   {
 338:src/menu.c    ****     "M_Solve", // 14
 339:src/menu.c    ****     { 
 340:src/menu.c    ****       { { K52, 1 }, { K_OP, RARG_BASEOP(RARG_DERIV)}, "SLV", "f'(x)" },
 341:src/menu.c    ****       { { K52, 2 }, { K_OP, RARG_BASEOP(RARG_2DERIV)}, "\004 dx", "f''(x)" },
 342:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 343:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 344:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 345:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 346:src/menu.c    ****     }
 347:src/menu.c    ****   },
 348:src/menu.c    ****   {
 349:src/menu.c    ****     "M_Blank2", // 15
 350:src/menu.c    ****     { 
 351:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 352:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 353:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 354:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 355:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 356:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 357:src/menu.c    ****     }    
 358:src/menu.c    ****   },
 359:src/menu.c    ****   {
 360:src/menu.c    ****     "M_Alpha", // 16
 361:src/menu.c    ****     { 
 362:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 363:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 364:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 365:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 366:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 367:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 368:src/menu.c    ****     }    
 369:src/menu.c    ****   },
 370:src/menu.c    ****   {
 371:src/menu.c    ****     "M_C_Lock", // 17
 372:src/menu.c    ****     { 
 373:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 374:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 375:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "+/-\006Im", "+/-\006Re" },
 376:src/menu.c    ****       { { K21, 2 }, { K00, 1 }, "Re\027Im", "HYP" },
 377:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 378:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 379:src/menu.c    ****     }    
 380:src/menu.c    ****   },
 381:src/menu.c    ****   {
 382:src/menu.c    ****     "M_Clear_C", // 18
 383:src/menu.c    ****     { 
 384:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 385:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 386:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 387:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, NO_KEY, "CLStk", "" },
ARM GAS  /tmp/ccrLsn8H.s 			page 9


 388:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 389:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 390:src/menu.c    ****     }    
 391:src/menu.c    ****   },
 392:src/menu.c    ****   {
 393:src/menu.c    ****     "M_Swap_C", // 19
 394:src/menu.c    ****     { 
 395:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 396:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 397:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 398:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 399:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 400:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 401:src/menu.c    ****     }    
 402:src/menu.c    ****   },
 403:src/menu.c    ****   {
 404:src/menu.c    ****     "M_Arrow_C", // 20
 405:src/menu.c    ****     { 
 406:src/menu.c    ****       { NO_KEY, { K10, 2 }, "", "DEG" },
 407:src/menu.c    ****       { NO_KEY, { K11, 2 }, "", "RAD" },
 408:src/menu.c    ****       { NO_KEY, { K12, 2 }, "", "Grad" },
 409:src/menu.c    ****       { NO_KEY, { K10, 1 }, "", "\015HMS" },
 410:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 411:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 412:src/menu.c    ****     }
 413:src/menu.c    ****   },
 414:src/menu.c    ****   {
 415:src/menu.c    ****     "M_Prob_C", // 21
 416:src/menu.c    ****     { 
 417:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_CMON | OP_LNGAMMA }, "\024\006!", "\024\006Ln\006\202" },
 418:src/menu.c    ****       { { K_OP, OP_CDYA | OP_COMB }, NO_KEY, "\024\006Cy,x", "" },
 419:src/menu.c    ****       { { K_OP, OP_CDYA | OP_PERM }, NO_KEY, "\024\006Py,x", "" },
 420:src/menu.c    ****       { NO_KEY, NO_KEY , "", "" },
 421:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 422:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 423:src/menu.c    ****     }
 424:src/menu.c    ****   },
 425:src/menu.c    ****   {
 426:src/menu.c    ****     "M_Blank2_C", // 22
 427:src/menu.c    ****     { 
 428:src/menu.c    ****       { { K00, 1 }, NO_KEY, "HYP", "" },
 429:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 430:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 431:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 432:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 433:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 434:src/menu.c    ****     }    
 435:src/menu.c    ****   },
 436:src/menu.c    ****   {
 437:src/menu.c    ****     "M_Misc_C", // 23
 438:src/menu.c    ****     { 
 439:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|z|", "\0242\234" },
 440:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "\024Log\272" },
 441:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "0\015Re", "\024Log\213" },
 442:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "0\015Im", "\024||el" },
 443:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "\024.\034" },
 444:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "\024./" },
ARM GAS  /tmp/ccrLsn8H.s 			page 10


 445:src/menu.c    ****     }
 446:src/menu.c    ****   },
 447:src/menu.c    ****   {
 448:src/menu.c    ****     "M_Usermenu", // 24
 449:src/menu.c    ****     { 
 450:src/menu.c    ****       { { K_OP, 0x0000fb00  }, NO_KEY, "UMEN", "" },
 451:src/menu.c    ****       { { K_OP, 0x314dfb55 }, { K_OP, 0x344dfb55 }, "UM1", "UM4" },
 452:src/menu.c    ****       { { K_OP, 0x324dfb55 }, { K_OP, 0x354dfb55 }, "UM2", "UM5" },
 453:src/menu.c    ****       { { K_OP, 0x334dfb55 }, { K_OP, 0x364dfb55 }, "UM3", "UM6" },
 454:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "" },
 455:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "" },
 456:src/menu.c    ****     }
 457:src/menu.c    ****   },
 458:src/menu.c    ****   {
 459:src/menu.c    ****     "M_Print", // 25
 460:src/menu.c    ****     { 
 461:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_ON  }, { K_OP, OP_NIL | OP_PRINT_OFF }, "\222\006On", "\222\006Of
 462:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_PMODE) }, { K_OP, RARG_BASEOP(RARG_DBLSP) }, "\222\006Mode", "\222
 463:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_PGM }, { K_OP, OP_NIL | OP_PRINT_REGS }, "\222\006Prog", "\222\00
 464:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_STACK }, { K_OP, OP_NIL | OP_PRINT_SIGMA }, "\222\006Stk", "\222\
 465:src/menu.c    ****       { ARROW_KEY, { K_OP, OP_NIL | OP_PRINT_ALPHA }, "--\015", "\222\006\240" },
 466:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PRINT_ADV }, "CPX", "\222\006ADV" },
 467:src/menu.c    ****     }
 468:src/menu.c    ****   },
 469:src/menu.c    **** 
 470:src/menu.c    **** };  
 471:src/menu.c    **** 
 472:src/menu.c    **** /* This code is the set_status_sized code with small changes
 473:src/menu.c    ****  * and non-DM42 code removed.
 474:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 475:src/menu.c    ****  */
 476:src/menu.c    **** #define MENU_WIDTH 32
 477:src/menu.c    **** 
 478:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 478 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 479:src/menu.c    ****   // dotcol is the number of the starting dot column
 480:src/menu.c    ****   // shifted is 1 if shifted
 481:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 481 3 view .LVU8
 482:src/menu.c    **** 
 483:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 484:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 484 3 view .LVU9
 485:src/menu.c    **** 
 486:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 486 3 view .LVU10
 478:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 478 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
ARM GAS  /tmp/ccrLsn8H.s 			page 11


  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 478:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 478 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 487:src/menu.c    ****   int i, j, xmax;
 488:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 488 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
 489:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 490:src/menu.c    **** 
 491:src/menu.c    **** #ifdef RP_PREFIX
 492:src/menu.c    ****   RectPolConv = 0;
  96              		.loc 1 492 15 view .LVU14
  97 000e 494A     		ldr	r2, .L41
  98              	.LVL3:
 488:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  99              		.loc 1 488 18 view .LVU15
 100 0010 B4BF     		ite	lt
 101 0012 01F11F03 		addlt	r3, r1, #31
 102 0016 0B46     		movge	r3, r1
 478:src/menu.c    ****   // dotcol is the number of the starting dot column
 103              		.loc 1 478 13 view .LVU16
 104 0018 0F46     		mov	r7, r1
 105              	.LVL4:
 487:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
 106              		.loc 1 487 3 is_stmt 1 view .LVU17
 488:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 107              		.loc 1 488 3 view .LVU18
 108              		.loc 1 492 15 is_stmt 0 view .LVU19
 109 001a 0021     		movs	r1, #0
 110              	.LVL5:
 111              		.loc 1 492 15 view .LVU20
 112 001c 1160     		str	r1, [r2]
 493:src/menu.c    **** #endif
 494:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 113              		.loc 1 494 10 view .LVU21
 114 001e 019A     		ldr	r2, [sp, #4]
 115 0020 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 488:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 116              		.loc 1 488 30 view .LVU22
 117 0022 23F01F03 		bic	r3, r3, #31
 488:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 118              		.loc 1 488 8 view .LVU23
 119 0026 03F12009 		add	r9, r3, #32
 120              	.LVL6:
 489:src/menu.c    **** 
 121              		.loc 1 489 3 is_stmt 1 view .LVU24
 492:src/menu.c    **** #endif
 122              		.loc 1 492 3 view .LVU25
 123              		.loc 1 494 3 view .LVU26
 124              		.loc 1 494 9 view .LVU27
ARM GAS  /tmp/ccrLsn8H.s 			page 12


 125 002a 002D     		cmp	r5, #0
 126 002c 78D0     		beq	.L7
 127              		.loc 1 494 23 is_stmt 0 view .LVU28
 128 002e 4F45     		cmp	r7, r9
 129 0030 76DC     		bgt	.L7
 130              	.LBB39:
 495:src/menu.c    ****     int c;
 496:src/menu.c    ****     int width;
 497:src/menu.c    ****     unsigned char cmap[6];
 498:src/menu.c    **** 
 499:src/menu.c    ****     int real_width;
 500:src/menu.c    ****     int current_smallp;
 501:src/menu.c    **** 
 502:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 503:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 504:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 505:src/menu.c    ****     //           01 -> (not used)
 506:src/menu.c    ****     //           10 -> use big font
 507:src/menu.c    ****     //           11 -> use small font
 508:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 509:src/menu.c    ****     if (str[0] == '\007') {
 131              		.loc 1 509 8 view .LVU29
 132 0032 072D     		cmp	r5, #7
 133              	.LBE39:
 484:src/menu.c    **** 
 134              		.loc 1 484 7 view .LVU30
 135 0034 4FF0FF04 		mov	r4, #255
 136              	.LVL7:
 137              	.LBB56:
 495:src/menu.c    ****     int c;
 138              		.loc 1 495 5 is_stmt 1 view .LVU31
 496:src/menu.c    ****     unsigned char cmap[6];
 139              		.loc 1 496 5 view .LVU32
 497:src/menu.c    **** 
 140              		.loc 1 497 5 view .LVU33
 499:src/menu.c    ****     int current_smallp;
 141              		.loc 1 499 5 view .LVU34
 500:src/menu.c    **** 
 142              		.loc 1 500 5 view .LVU35
 143              		.loc 1 509 5 view .LVU36
 510:src/menu.c    ****       width = str[1] & 0x1F;
 511:src/menu.c    ****       switch (str[1] & 0x60) {
 512:src/menu.c    ****       default:
 513:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 514:src/menu.c    **** 	break;
 515:src/menu.c    ****       case 0x40:	current_smallp = 0;
 516:src/menu.c    **** 	break;
 517:src/menu.c    ****       case 0x60:	current_smallp = 1;
 144              		.loc 1 517 33 is_stmt 0 view .LVU37
 145 0038 4FF0010A 		mov	r10, #1
 509:src/menu.c    ****       width = str[1] & 0x1F;
 146              		.loc 1 509 8 view .LVU38
 147 003c 64D1     		bne	.L11
 148              	.LVL8:
 149              	.L39:
 510:src/menu.c    ****       width = str[1] & 0x1F;
 150              		.loc 1 510 7 is_stmt 1 view .LVU39
ARM GAS  /tmp/ccrLsn8H.s 			page 13


 510:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 510 18 is_stmt 0 view .LVU40
 152 003e 019B     		ldr	r3, [sp, #4]
 153 0040 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 154 0042 06F06003 		and	r3, r6, #96
 511:src/menu.c    ****       default:
 155              		.loc 1 511 7 view .LVU41
 156 0046 402B     		cmp	r3, #64
 510:src/menu.c    ****       width = str[1] & 0x1F;
 157              		.loc 1 510 13 view .LVU42
 158 0048 06F01F06 		and	r6, r6, #31
 159              	.LVL9:
 511:src/menu.c    ****       default:
 160              		.loc 1 511 7 is_stmt 1 view .LVU43
 161 004c 6CD0     		beq	.L34
 162 004e 602B     		cmp	r3, #96
 163 0050 6AD1     		bne	.L34
 164              		.loc 1 517 18 view .LVU44
 165              	.LVL10:
 518:src/menu.c    **** 	break;
 166              		.loc 1 518 2 view .LVU45
 519:src/menu.c    ****       }
 520:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 167              		.loc 1 520 7 view .LVU46
 168              		.loc 1 520 11 is_stmt 0 view .LVU47
 169 0052 019B     		ldr	r3, [sp, #4]
 170 0054 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 517:src/menu.c    **** 	break;
 171              		.loc 1 517 33 view .LVU48
 172 0056 0123     		movs	r3, #1
 173 0058 0093     		str	r3, [sp]
 174 005a 00F58075 		add	r5, r0, #256
 175              	.LVL11:
 176              	.L15:
 521:src/menu.c    ****       str += 3;
 177              		.loc 1 521 7 is_stmt 1 view .LVU49
 522:src/menu.c    **** 
 523:src/menu.c    ****       real_width = charlengths(c);
 178              		.loc 1 523 20 is_stmt 0 view .LVU50
 179 005e 2846     		mov	r0, r5
 180 0060 FFF7FEFF 		bl	charlengths
 181              	.LVL12:
 521:src/menu.c    ****       str += 3;
 182              		.loc 1 521 11 view .LVU51
 183 0064 019B     		ldr	r3, [sp, #4]
 184 0066 0333     		adds	r3, r3, #3
 185 0068 0193     		str	r3, [sp, #4]
 186              	.LVL13:
 187              		.loc 1 523 7 is_stmt 1 view .LVU52
 524:src/menu.c    ****     } else {
 525:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 526:src/menu.c    ****       real_width = width = charlengths(c);
 527:src/menu.c    ****       current_smallp = smallp;
 528:src/menu.c    ****     }
 529:src/menu.c    **** 
 530:src/menu.c    ****     if (x + real_width > xmax)
 188              		.loc 1 530 5 view .LVU53
ARM GAS  /tmp/ccrLsn8H.s 			page 14


 189              		.loc 1 530 11 is_stmt 0 view .LVU54
 190 006a C319     		adds	r3, r0, r7
 191              	.LVL14:
 192              		.loc 1 530 8 view .LVU55
 193 006c 9945     		cmp	r9, r3
 194 006e 57DB     		blt	.L7
 195              	.L40:
 531:src/menu.c    ****       break;
 532:src/menu.c    **** 
 533:src/menu.c    ****     if (posns_state != current_smallp) {
 196              		.loc 1 533 5 is_stmt 1 view .LVU56
 197              		.loc 1 533 8 is_stmt 0 view .LVU57
 198 0070 009B     		ldr	r3, [sp]
 199 0072 A342     		cmp	r3, r4
 534:src/menu.c    ****       findlengths(posns, current_smallp);
 200              		.loc 1 534 7 view .LVU58
 201 0074 07AB     		add	r3, sp, #28
 533:src/menu.c    ****       findlengths(posns, current_smallp);
 202              		.loc 1 533 8 view .LVU59
 203 0076 05D0     		beq	.L18
 204              		.loc 1 534 7 is_stmt 1 view .LVU60
 205 0078 1846     		mov	r0, r3
 206              	.LVL15:
 207              		.loc 1 534 7 is_stmt 0 view .LVU61
 208 007a 0099     		ldr	r1, [sp]
 209 007c 0393     		str	r3, [sp, #12]
 210 007e FFF7FEFF 		bl	findlengths
 211              	.LVL16:
 212 0082 039B     		ldr	r3, [sp, #12]
 535:src/menu.c    ****       posns_state = current_smallp;
 213              		.loc 1 535 7 is_stmt 1 view .LVU62
 214              	.LVL17:
 215              	.L18:
 536:src/menu.c    ****     }
 537:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 216              		.loc 1 537 5 view .LVU63
 217 0084 009A     		ldr	r2, [sp]
 218 0086 2846     		mov	r0, r5
 219 0088 05A9     		add	r1, sp, #20
 220 008a FFF7FEFF 		bl	unpackchar
 221              	.LVL18:
 538:src/menu.c    **** 
 539:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 222              		.loc 1 539 5 view .LVU64
 223              		.loc 1 539 15 view .LVU65
 224 008e 029B     		ldr	r3, [sp, #8]
 225 0090 03EB4704 		add	r4, r3, r7, lsl #1
 226 0094 284B     		ldr	r3, .L41+4
 227 0096 0DF1140B 		add	fp, sp, #20
 228 009a 1C44     		add	r4, r4, r3
 537:src/menu.c    **** 
 229              		.loc 1 537 5 is_stmt 0 view .LVU66
 230 009c 4FF0050E 		mov	lr, #5
 231 00a0 A9EB0705 		sub	r5, r9, r7
 232              	.LVL19:
 233              	.L19:
 540:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
ARM GAS  /tmp/ccrLsn8H.s 			page 15


 234              		.loc 1 540 17 is_stmt 1 view .LVU67
 235              		.loc 1 540 7 is_stmt 0 view .LVU68
 236 00a4 002E     		cmp	r6, #0
 237 00a6 1FDD     		ble	.L25
 541:src/menu.c    **** 	if (x+j >= xmax)
 238              		.loc 1 541 2 is_stmt 1 view .LVU69
 239              		.loc 1 541 5 is_stmt 0 view .LVU70
 240 00a8 B945     		cmp	r9, r7
 241 00aa 1DDD     		ble	.L25
 242              	.LBB40:
 243              	.LBB41:
 244              	.LBB42:
 245              	.LBB43:
 542:src/menu.c    **** 	  break;
 543:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 544:src/menu.c    ****       }
 545:src/menu.c    ****     }
 546:src/menu.c    ****     x += width;
 547:src/menu.c    ****   }
 548:src/menu.c    **** }
 549:src/menu.c    **** 
 550:src/menu.c    **** 
 551:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 552:src/menu.c    **** 
 553:src/menu.c    **** int pixel_length(const char *s, int smallp)
 554:src/menu.c    **** {
 555:src/menu.c    ****   int len = 0;
 556:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 557:src/menu.c    ****   while (*s != '\0') {
 558:src/menu.c    ****     if (s[0] == '\007') {
 559:src/menu.c    ****       len += s[1] & 0x1F;
 560:src/menu.c    ****       s += 3;
 561:src/menu.c    ****       continue;
 562:src/menu.c    ****     }
 563:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 564:src/menu.c    ****   }
 565:src/menu.c    ****   return len;
 566:src/menu.c    **** }
 567:src/menu.c    **** */
 568:src/menu.c    **** 
 569:src/menu.c    **** 
 570:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 571:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 572:src/menu.c    ****   if (on) {
 573:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 574:src/menu.c    ****   }
 575:src/menu.c    ****   else {
 576:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 246              		.loc 1 576 25 view .LVU71
 247 00ac 0AFA0EFC 		lsl	ip, r10, lr
 248              		.loc 1 576 17 view .LVU72
 249 00b0 4FFA8CFC 		sxtb	ip, ip
 250              	.LBE43:
 251              	.LBE42:
 252              	.LBE41:
 253              	.LBE40:
 543:src/menu.c    ****       }
ARM GAS  /tmp/ccrLsn8H.s 			page 16


 254              		.loc 1 543 31 view .LVU73
 255 00b4 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 256              	.LBB53:
 257              	.LBB50:
 258              	.LBB47:
 259              	.LBB44:
 260              		.loc 1 576 17 view .LVU74
 261 00b8 6FEA0C08 		mvn	r8, ip
 262              	.LBE44:
 263              	.LBE47:
 264              	.LBE50:
 265              	.LBE53:
 540:src/menu.c    **** 	if (x+j >= xmax)
 266              		.loc 1 540 13 view .LVU75
 267 00bc 0023     		movs	r3, #0
 268 00be 01E0     		b	.L20
 269              	.LVL20:
 270              	.L24:
 541:src/menu.c    **** 	  break;
 271              		.loc 1 541 5 view .LVU76
 272 00c0 9D42     		cmp	r5, r3
 273 00c2 11D0     		beq	.L25
 274              	.LVL21:
 275              	.L20:
 543:src/menu.c    ****       }
 276              		.loc 1 543 2 is_stmt 1 view .LVU77
 277              	.LBB54:
 278              	.LBI40:
 570:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 279              		.loc 1 570 6 view .LVU78
 280              	.LBB51:
 571:src/menu.c    ****   if (on) {
 281              		.loc 1 571 3 view .LVU79
 282              	.LBB48:
 283              	.LBI42:
 570:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 570 6 view .LVU80
 285              	.LBB45:
 572:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 286              		.loc 1 572 3 view .LVU81
 287              	.LBE45:
 288              	.LBE48:
 571:src/menu.c    ****   if (on) {
 289              		.loc 1 571 6 is_stmt 0 view .LVU82
 290 00c4 DA19     		adds	r2, r3, r7
 291              	.LVL22:
 571:src/menu.c    ****   if (on) {
 292              		.loc 1 571 6 view .LVU83
 293 00c6 C72A     		cmp	r2, #199
 294              	.LBE51:
 295              	.LBE54:
 543:src/menu.c    ****       }
 296              		.loc 1 543 46 view .LVU84
 297 00c8 40FA03F1 		asr	r1, r0, r3
 298              	.LBB55:
 299              	.LBB52:
 571:src/menu.c    ****   if (on) {
ARM GAS  /tmp/ccrLsn8H.s 			page 17


 300              		.loc 1 571 6 view .LVU85
 301 00cc 09D8     		bhi	.L22
 302              	.LBB49:
 303              	.LBB46:
 573:src/menu.c    ****   }
 304              		.loc 1 573 5 is_stmt 1 view .LVU86
 305              		.loc 1 576 5 view .LVU87
 573:src/menu.c    ****   }
 306              		.loc 1 573 17 is_stmt 0 view .LVU88
 307 00ce 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 308              	.LVL23:
 572:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 309              		.loc 1 572 6 view .LVU89
 310 00d2 C907     		lsls	r1, r1, #31
 573:src/menu.c    ****   }
 311              		.loc 1 573 17 view .LVU90
 312 00d4 4CBF     		ite	mi
 313 00d6 4CEA0202 		orrmi	r2, ip, r2
 314              		.loc 1 576 17 view .LVU91
 315 00da 08EA0202 		andpl	r2, r8, r2
 316 00de 04F81320 		strb	r2, [r4, r3, lsl #1]
 317              	.L22:
 318              	.LBE46:
 319              	.LBE49:
 320              	.LBE52:
 321              	.LBE55:
 541:src/menu.c    **** 	  break;
 322              		.loc 1 541 2 is_stmt 1 view .LVU92
 323              	.LVL24:
 540:src/menu.c    **** 	if (x+j >= xmax)
 324              		.loc 1 540 26 view .LVU93
 540:src/menu.c    **** 	if (x+j >= xmax)
 325              		.loc 1 540 27 is_stmt 0 view .LVU94
 326 00e2 0133     		adds	r3, r3, #1
 327              	.LVL25:
 540:src/menu.c    **** 	if (x+j >= xmax)
 328              		.loc 1 540 17 is_stmt 1 view .LVU95
 540:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 540 7 is_stmt 0 view .LVU96
 330 00e4 B342     		cmp	r3, r6
 331 00e6 EBD1     		bne	.L24
 332              	.LVL26:
 333              	.L25:
 539:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 334              		.loc 1 539 20 is_stmt 1 view .LVU97
 539:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 335              		.loc 1 539 15 view .LVU98
 336 00e8 0EF1FF3E 		add	lr, lr, #-1
 539:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 337              		.loc 1 539 5 is_stmt 0 view .LVU99
 338 00ec BEF1FF3F 		cmp	lr, #-1
 339 00f0 0BF1010B 		add	fp, fp, #1
 340              	.LVL27:
 539:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 341              		.loc 1 539 5 view .LVU100
 342 00f4 D6D1     		bne	.L19
 546:src/menu.c    ****   }
ARM GAS  /tmp/ccrLsn8H.s 			page 18


 343              		.loc 1 546 5 is_stmt 1 view .LVU101
 344              	.LBE56:
 494:src/menu.c    ****     int c;
 345              		.loc 1 494 10 is_stmt 0 view .LVU102
 346 00f6 019B     		ldr	r3, [sp, #4]
 347 00f8 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 348              	.LBB57:
 546:src/menu.c    ****   }
 349              		.loc 1 546 7 view .LVU103
 350 00fa 3744     		add	r7, r7, r6
 351              	.LVL28:
 546:src/menu.c    ****   }
 352              		.loc 1 546 7 view .LVU104
 353              	.LBE57:
 494:src/menu.c    ****     int c;
 354              		.loc 1 494 9 is_stmt 1 view .LVU105
 355 00fc 85B1     		cbz	r5, .L7
 494:src/menu.c    ****     int c;
 356              		.loc 1 494 23 is_stmt 0 view .LVU106
 357 00fe B945     		cmp	r9, r7
 358 0100 0EDB     		blt	.L7
 359              	.LBB58:
 509:src/menu.c    ****       width = str[1] & 0x1F;
 360              		.loc 1 509 8 view .LVU107
 361 0102 072D     		cmp	r5, #7
 362              	.LBE58:
 363 0104 009C     		ldr	r4, [sp]
 364              	.LBB59:
 495:src/menu.c    ****     int width;
 365              		.loc 1 495 5 is_stmt 1 view .LVU108
 496:src/menu.c    ****     unsigned char cmap[6];
 366              		.loc 1 496 5 view .LVU109
 497:src/menu.c    **** 
 367              		.loc 1 497 5 view .LVU110
 499:src/menu.c    ****     int current_smallp;
 368              		.loc 1 499 5 view .LVU111
 500:src/menu.c    **** 
 369              		.loc 1 500 5 view .LVU112
 509:src/menu.c    ****       width = str[1] & 0x1F;
 370              		.loc 1 509 5 view .LVU113
 509:src/menu.c    ****       width = str[1] & 0x1F;
 371              		.loc 1 509 8 is_stmt 0 view .LVU114
 372 0106 9AD0     		beq	.L39
 373              	.LVL29:
 374              	.L11:
 525:src/menu.c    ****       real_width = width = charlengths(c);
 375              		.loc 1 525 7 is_stmt 1 view .LVU115
 526:src/menu.c    ****       current_smallp = smallp;
 376              		.loc 1 526 28 is_stmt 0 view .LVU116
 377 0108 2846     		mov	r0, r5
 378 010a FFF7FEFF 		bl	charlengths
 379              	.LVL30:
 525:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 525 31 view .LVU117
 381 010e 019B     		ldr	r3, [sp, #4]
 382 0110 0133     		adds	r3, r3, #1
 383 0112 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccrLsn8H.s 			page 19


 384              	.LVL31:
 526:src/menu.c    ****       current_smallp = smallp;
 385              		.loc 1 526 7 is_stmt 1 view .LVU118
 527:src/menu.c    ****     }
 386              		.loc 1 527 7 view .LVU119
 527:src/menu.c    ****     }
 387              		.loc 1 527 22 is_stmt 0 view .LVU120
 388 0114 0023     		movs	r3, #0
 389              	.LVL32:
 527:src/menu.c    ****     }
 390              		.loc 1 527 22 view .LVU121
 391 0116 0093     		str	r3, [sp]
 392              	.LVL33:
 530:src/menu.c    ****       break;
 393              		.loc 1 530 11 view .LVU122
 394 0118 C319     		adds	r3, r0, r7
 395              	.LVL34:
 530:src/menu.c    ****       break;
 396              		.loc 1 530 8 view .LVU123
 397 011a 9945     		cmp	r9, r3
 526:src/menu.c    ****       current_smallp = smallp;
 398              		.loc 1 526 28 view .LVU124
 399 011c 0646     		mov	r6, r0
 530:src/menu.c    ****       break;
 400              		.loc 1 530 5 is_stmt 1 view .LVU125
 530:src/menu.c    ****       break;
 401              		.loc 1 530 8 is_stmt 0 view .LVU126
 402 011e A7DA     		bge	.L40
 403              	.LVL35:
 404              	.L7:
 530:src/menu.c    ****       break;
 405              		.loc 1 530 8 view .LVU127
 406              	.LBE59:
 548:src/menu.c    **** 
 407              		.loc 1 548 1 view .LVU128
 408 0120 0DF5097D 		add	sp, sp, #548
 409              		.cfi_remember_state
 410              		.cfi_def_cfa_offset 36
 411              		@ sp needed
 412 0124 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 413              	.LVL36:
 414              	.L34:
 415              		.cfi_restore_state
 416              	.LBB60:
 520:src/menu.c    ****       str += 3;
 417              		.loc 1 520 7 is_stmt 1 view .LVU129
 520:src/menu.c    ****       str += 3;
 418              		.loc 1 520 11 is_stmt 0 view .LVU130
 419 0128 019B     		ldr	r3, [sp, #4]
 420 012a 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 513:src/menu.c    **** 	break;
 421              		.loc 1 513 33 view .LVU131
 422 012c 0023     		movs	r3, #0
 423 012e 0093     		str	r3, [sp]
 424 0130 95E7     		b	.L15
 425              	.L42:
 426 0132 00BF     		.align	2
ARM GAS  /tmp/ccrLsn8H.s 			page 20


 427              	.L41:
 428 0134 00000000 		.word	RectPolConv
 429 0138 00000000 		.word	.LANCHOR0
 430              	.LBE60:
 431              		.cfi_endproc
 432              	.LFE37:
 434              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 435              		.align	2
 436              	.LC5:
 437 0000 57697468 		.ascii	"With longer alpha display and top row,\000"
 437      206C6F6E 
 437      67657220 
 437      616C7068 
 437      61206469 
 438 0027 00       		.align	2
 439              	.LC6:
 440 0028 616E6420 		.ascii	"and some annunciators renamed.\000"
 440      736F6D65 
 440      20616E6E 
 440      756E6369 
 440      61746F72 
 441 0047 00       		.align	2
 442              	.LC7:
 443 0048 496E636C 		.ascii	"Includes printing, stopwatch,\000"
 443      75646573 
 443      20707269 
 443      6E74696E 
 443      672C2073 
 444 0066 0000     		.align	2
 445              	.LC8:
 446 0068 656E7472 		.ascii	"entry RPN, extended file handling,\000"
 446      79205250 
 446      4E2C2065 
 446      7874656E 
 446      64656420 
 447 008b 00       		.align	2
 448              	.LC9:
 449 008c 75736572 		.ascii	"user-defined menus, and\000"
 449      2D646566 
 449      696E6564 
 449      206D656E 
 449      75732C20 
 450              		.align	2
 451              	.LC10:
 452 00a4 636F6D70 		.ascii	"complex lock mode.\000"
 452      6C657820 
 452      6C6F636B 
 452      206D6F64 
 452      652E00
 453 00b7 00       		.align	2
 454              	.LC11:
 455 00b8 4E656974 		.ascii	"Neither provided by          \000"
 455      68657220 
 455      70726F76 
 455      69646564 
 455      20627920 
 456 00d6 0000     		.align	2
ARM GAS  /tmp/ccrLsn8H.s 			page 21


 457              	.LC12:
 458 00d8 6E6F7220 		.ascii	"nor supported by SwissMicros.\000"
 458      73757070 
 458      6F727465 
 458      64206279 
 458      20537769 
 459 00f6 0000     		.align	2
 460              	.LC13:
 461 00f8 20202020 		.ascii	"    Press EXIT key to continue...\000"
 461      50726573 
 461      73204558 
 461      4954206B 
 461      65792074 
 462 011a 0000     		.align	2
 463              	.LC4:
 464 011c 57502033 		.ascii	"WP 34C calculator for DM42: v     \000"
 464      34432063 
 464      616C6375 
 464      6C61746F 
 464      7220666F 
 465              		.section	.text.disp_about,"ax",%progbits
 466              		.align	1
 467              		.p2align 2,,3
 468              		.global	disp_about
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 472              		.fpu fpv4-sp-d16
 474              	disp_about:
 475              	.LFB5:
  75:src/menu.c    ****   char title[] = "WP 34C calculator for DM42: v     ";
 476              		.loc 1 75 19 is_stmt 1 view -0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 40
 479              		@ frame_needed = 0, uses_anonymous_args = 0
  76:src/menu.c    **** 
 480              		.loc 1 76 3 view .LVU133
  75:src/menu.c    ****   char title[] = "WP 34C calculator for DM42: v     ";
 481              		.loc 1 75 19 is_stmt 0 view .LVU134
 482 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 483              		.cfi_def_cfa_offset 24
 484              		.cfi_offset 4, -24
 485              		.cfi_offset 5, -20
 486              		.cfi_offset 6, -16
 487              		.cfi_offset 7, -12
 488              		.cfi_offset 8, -8
 489              		.cfi_offset 14, -4
  76:src/menu.c    **** 
 490              		.loc 1 76 8 view .LVU135
 491 0004 334E     		ldr	r6, .L45
  81:src/menu.c    **** 
 492              		.loc 1 81 3 view .LVU136
 493 0006 344C     		ldr	r4, .L45+4
  83:src/menu.c    ****   lcd_putsR(t24, title);
 494              		.loc 1 83 3 view .LVU137
 495 0008 DFF81081 		ldr	r8, .L45+72
  84:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
ARM GAS  /tmp/ccrLsn8H.s 			page 22


 496              		.loc 1 84 3 view .LVU138
 497 000c 334F     		ldr	r7, .L45+8
  76:src/menu.c    **** 
 498              		.loc 1 76 8 view .LVU139
 499 000e 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
  75:src/menu.c    ****   char title[] = "WP 34C calculator for DM42: v     ";
 500              		.loc 1 75 19 view .LVU140
 501 0010 8AB0     		sub	sp, sp, #40
 502              		.cfi_def_cfa_offset 64
  76:src/menu.c    **** 
 503              		.loc 1 76 8 view .LVU141
 504 0012 01AD     		add	r5, sp, #4
 505 0014 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 506 0016 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 507 0018 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 508 001a 3368     		ldr	r3, [r6]
 509 001c 25F8023B 		strh	r3, [r5], #2	@ movhi
  78:src/menu.c    **** 
 510              		.loc 1 78 3 view .LVU142
 511 0020 2F49     		ldr	r1, .L45+12
  76:src/menu.c    **** 
 512              		.loc 1 76 8 view .LVU143
 513 0022 1B0C     		lsrs	r3, r3, #16
  78:src/menu.c    **** 
 514              		.loc 1 78 3 view .LVU144
 515 0024 0422     		movs	r2, #4
 516 0026 0DF12100 		add	r0, sp, #33
  76:src/menu.c    **** 
 517              		.loc 1 76 8 view .LVU145
 518 002a 2B70     		strb	r3, [r5]
  78:src/menu.c    **** 
 519              		.loc 1 78 3 is_stmt 1 view .LVU146
 520 002c FFF7FEFF 		bl	xcopy
 521              	.LVL37:
  80:src/menu.c    ****   lcd_writeClr(t24);
 522              		.loc 1 80 3 view .LVU147
 523 0030 FFF7FEFF 		bl	clear_disp
 524              	.LVL38:
  81:src/menu.c    **** 
 525              		.loc 1 81 3 view .LVU148
 526 0034 2B4B     		ldr	r3, .L45+16
 527 0036 606B     		ldr	r0, [r4, #52]
 528 0038 9847     		blx	r3
 529              	.LVL39:
  83:src/menu.c    ****   lcd_putsR(t24, title);
 530              		.loc 1 83 3 view .LVU149
 531 003a 606B     		ldr	r0, [r4, #52]
 532 003c 0522     		movs	r2, #5
 533 003e 0021     		movs	r1, #0
 534 0040 C047     		blx	r8
 535              	.LVL40:
  84:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 536              		.loc 1 84 3 view .LVU150
  84:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 537              		.loc 1 84 3 view .LVU151
 538 0042 606B     		ldr	r0, [r4, #52]
 539 0044 0126     		movs	r6, #1
ARM GAS  /tmp/ccrLsn8H.s 			page 23


 540 0046 4674     		strb	r6, [r0, #17]
  84:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 541              		.loc 1 84 3 view .LVU152
 542 0048 01A9     		add	r1, sp, #4
 543 004a B847     		blx	r7
 544              	.LVL41:
  84:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 545              		.loc 1 84 3 view .LVU153
 546 004c 636B     		ldr	r3, [r4, #52]
 547 004e 0025     		movs	r5, #0
 548 0050 5D74     		strb	r5, [r3, #17]
  84:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 549              		.loc 1 84 3 view .LVU154
  85:src/menu.c    ****   t20->newln = 1;
 550              		.loc 1 85 3 view .LVU155
 551 0052 B3F90620 		ldrsh	r2, [r3, #6]
 552 0056 B3F90410 		ldrsh	r1, [r3, #4]
 553 005a 206B     		ldr	r0, [r4, #48]
 554 005c C047     		blx	r8
 555              	.LVL42:
  86:src/menu.c    ****   t20->inv = 0;
 556              		.loc 1 86 3 view .LVU156
 557 005e 206B     		ldr	r0, [r4, #48]
  89:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 558              		.loc 1 89 3 is_stmt 0 view .LVU157
 559 0060 2149     		ldr	r1, .L45+20
  86:src/menu.c    ****   t20->inv = 0;
 560              		.loc 1 86 14 view .LVU158
 561 0062 0675     		strb	r6, [r0, #20]
  87:src/menu.c    **** #ifdef TOP_ROW
 562              		.loc 1 87 3 is_stmt 1 view .LVU159
  87:src/menu.c    **** #ifdef TOP_ROW
 563              		.loc 1 87 12 is_stmt 0 view .LVU160
 564 0064 4574     		strb	r5, [r0, #17]
  89:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 565              		.loc 1 89 3 is_stmt 1 view .LVU161
 566 0066 B847     		blx	r7
 567              	.LVL43:
  95:src/menu.c    ****   lcd_puts(t20, "Includes printing, stopwatch,");
 568              		.loc 1 95 3 view .LVU162
 569 0068 206B     		ldr	r0, [r4, #48]
 570 006a 2049     		ldr	r1, .L45+24
 571 006c B847     		blx	r7
 572              	.LVL44:
  96:src/menu.c    ****   lcd_puts(t20, "entry RPN, extended file handling,");
 573              		.loc 1 96 3 view .LVU163
 574 006e 206B     		ldr	r0, [r4, #48]
 575 0070 1F49     		ldr	r1, .L45+28
 576 0072 B847     		blx	r7
 577              	.LVL45:
  97:src/menu.c    ****   lcd_puts(t20, "user-defined menus, and");
 578              		.loc 1 97 3 view .LVU164
 579 0074 206B     		ldr	r0, [r4, #48]
 580 0076 1F49     		ldr	r1, .L45+32
 581 0078 B847     		blx	r7
 582              	.LVL46:
  98:src/menu.c    ****   lcd_puts(t20, "complex lock mode.");
ARM GAS  /tmp/ccrLsn8H.s 			page 24


 583              		.loc 1 98 3 view .LVU165
 584 007a 206B     		ldr	r0, [r4, #48]
 585 007c 1E49     		ldr	r1, .L45+36
 586 007e B847     		blx	r7
 587              	.LVL47:
  99:src/menu.c    **** 
 588              		.loc 1 99 3 view .LVU166
 589 0080 206B     		ldr	r0, [r4, #48]
 590 0082 1E49     		ldr	r1, .L45+40
 591 0084 B847     		blx	r7
 592              	.LVL48:
 101:src/menu.c    **** 
 593              		.loc 1 101 3 view .LVU167
 594 0086 206B     		ldr	r0, [r4, #48]
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 595              		.loc 1 104 3 is_stmt 0 view .LVU168
 596 0088 1D49     		ldr	r1, .L45+44
 101:src/menu.c    **** 
 597              		.loc 1 101 10 view .LVU169
 598 008a C388     		ldrh	r3, [r0, #6]
 103:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 599              		.loc 1 103 15 view .LVU170
 600 008c 8674     		strb	r6, [r0, #18]
 101:src/menu.c    **** 
 601              		.loc 1 101 10 view .LVU171
 602 008e 0533     		adds	r3, r3, #5
 603 0090 C380     		strh	r3, [r0, #6]	@ movhi
 103:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 604              		.loc 1 103 3 is_stmt 1 view .LVU172
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 605              		.loc 1 104 3 view .LVU173
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 606              		.loc 1 104 3 view .LVU174
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 607              		.loc 1 104 3 view .LVU175
 608 0092 4674     		strb	r6, [r0, #17]
 609 0094 B847     		blx	r7
 610              	.LVL49:
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 611              		.loc 1 104 3 view .LVU176
 612 0096 206B     		ldr	r0, [r4, #48]
 104:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 613              		.loc 1 104 3 view .LVU177
 105:src/menu.c    ****   t20->bgfill = 0;
 614              		.loc 1 105 3 view .LVU178
 105:src/menu.c    ****   t20->bgfill = 0;
 615              		.loc 1 105 3 view .LVU179
 616 0098 1A49     		ldr	r1, .L45+48
 617 009a 4674     		strb	r6, [r0, #17]
 105:src/menu.c    ****   t20->bgfill = 0;
 618              		.loc 1 105 3 view .LVU180
 619 009c B847     		blx	r7
 620              	.LVL50:
 105:src/menu.c    ****   t20->bgfill = 0;
 621              		.loc 1 105 3 view .LVU181
 622 009e 236B     		ldr	r3, [r4, #48]
 109:src/menu.c    ****   t24->x = 20;
ARM GAS  /tmp/ccrLsn8H.s 			page 25


 623              		.loc 1 109 20 is_stmt 0 view .LVU182
 624 00a0 194A     		ldr	r2, .L45+52
 105:src/menu.c    ****   t20->bgfill = 0;
 625              		.loc 1 105 3 view .LVU183
 626 00a2 5D74     		strb	r5, [r3, #17]
 105:src/menu.c    ****   t20->bgfill = 0;
 627              		.loc 1 105 3 is_stmt 1 view .LVU184
 106:src/menu.c    ****   t20->newln = 0;
 628              		.loc 1 106 3 view .LVU185
 106:src/menu.c    ****   t20->newln = 0;
 629              		.loc 1 106 15 is_stmt 0 view .LVU186
 630 00a4 9D74     		strb	r5, [r3, #18]
 107:src/menu.c    ****   
 631              		.loc 1 107 3 is_stmt 1 view .LVU187
 107:src/menu.c    ****   
 632              		.loc 1 107 14 is_stmt 0 view .LVU188
 633 00a6 1D75     		strb	r5, [r3, #20]
 109:src/menu.c    ****   t24->x = 20;
 634              		.loc 1 109 3 is_stmt 1 view .LVU189
 109:src/menu.c    ****   t24->x = 20;
 635              		.loc 1 109 20 is_stmt 0 view .LVU190
 636 00a8 606B     		ldr	r0, [r4, #52]
 637 00aa 9047     		blx	r2
 638              	.LVL51:
 109:src/menu.c    ****   t24->x = 20;
 639              		.loc 1 109 3 view .LVU191
 640 00ac 636B     		ldr	r3, [r4, #52]
 111:src/menu.c    **** 
 641              		.loc 1 111 3 view .LVU192
 642 00ae 174A     		ldr	r2, .L45+56
 643 00b0 5E74     		strb	r6, [r3, #17]
 109:src/menu.c    ****   t24->x = 20;
 644              		.loc 1 109 39 view .LVU193
 645 00b2 C0F1EB00 		rsb	r0, r0, #235
 110:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 646              		.loc 1 110 10 view .LVU194
 647 00b6 1421     		movs	r1, #20
 109:src/menu.c    ****   t24->x = 20;
 648              		.loc 1 109 10 view .LVU195
 649 00b8 D880     		strh	r0, [r3, #6]	@ movhi
 110:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 650              		.loc 1 110 3 is_stmt 1 view .LVU196
 110:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 651              		.loc 1 110 10 is_stmt 0 view .LVU197
 652 00ba 9980     		strh	r1, [r3, #4]	@ movhi
 111:src/menu.c    **** 
 653              		.loc 1 111 3 is_stmt 1 view .LVU198
 111:src/menu.c    **** 
 654              		.loc 1 111 3 view .LVU199
 111:src/menu.c    **** 
 655              		.loc 1 111 3 view .LVU200
 656 00bc 1846     		mov	r0, r3
 657 00be 1449     		ldr	r1, .L45+60
 658 00c0 9047     		blx	r2
 659              	.LVL52:
 111:src/menu.c    **** 
 660              		.loc 1 111 3 view .LVU201
ARM GAS  /tmp/ccrLsn8H.s 			page 26


 661 00c2 626B     		ldr	r2, [r4, #52]
 113:src/menu.c    **** 
 662              		.loc 1 113 3 is_stmt 0 view .LVU202
 663 00c4 134B     		ldr	r3, .L45+64
 111:src/menu.c    **** 
 664              		.loc 1 111 3 view .LVU203
 665 00c6 5574     		strb	r5, [r2, #17]
 111:src/menu.c    **** 
 666              		.loc 1 111 3 is_stmt 1 view .LVU204
 113:src/menu.c    **** 
 667              		.loc 1 113 3 view .LVU205
 668 00c8 9847     		blx	r3
 669              	.LVL53:
 115:src/menu.c    **** }
 670              		.loc 1 115 3 view .LVU206
 671 00ca 134B     		ldr	r3, .L45+68
 672 00cc 9847     		blx	r3
 673              	.LVL54:
 116:src/menu.c    **** 
 674              		.loc 1 116 1 is_stmt 0 view .LVU207
 675 00ce 0AB0     		add	sp, sp, #40
 676              		.cfi_def_cfa_offset 24
 677              		@ sp needed
 678 00d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 679              	.L46:
 680              		.align	2
 681              	.L45:
 682 00d4 1C010000 		.word	.LC4
 683 00d8 00200010 		.word	268443648
 684 00dc 7D020008 		.word	134218365
 685 00e0 00000000 		.word	SvnRevision
 686 00e4 65020008 		.word	134218341
 687 00e8 00000000 		.word	.LC5
 688 00ec 28000000 		.word	.LC6
 689 00f0 48000000 		.word	.LC7
 690 00f4 68000000 		.word	.LC8
 691 00f8 8C000000 		.word	.LC9
 692 00fc A4000000 		.word	.LC10
 693 0100 B8000000 		.word	.LC11
 694 0104 D8000000 		.word	.LC12
 695 0108 71020008 		.word	134218353
 696 010c B1020008 		.word	134218417
 697 0110 F8000000 		.word	.LC13
 698 0114 31020008 		.word	134218289
 699 0118 99030008 		.word	134218649
 700 011c 6D020008 		.word	134218349
 701              		.cfi_endproc
 702              	.LFE5:
 704              		.section	.text.run_menu_item,"ax",%progbits
 705              		.align	1
 706              		.p2align 2,,3
 707              		.global	run_menu_item
 708              		.syntax unified
 709              		.thumb
 710              		.thumb_func
 711              		.fpu fpv4-sp-d16
 713              	run_menu_item:
ARM GAS  /tmp/ccrLsn8H.s 			page 27


 714              	.LVL55:
 715              	.LFB3:
  44:src/menu.c    ****   int ret = 0;
 716              		.loc 1 44 36 is_stmt 1 view -0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
  45:src/menu.c    **** 
 720              		.loc 1 45 3 view .LVU209
  47:src/menu.c    ****     case MI_ABOUT_PGM:
 721              		.loc 1 47 3 view .LVU210
 722 0000 0B28     		cmp	r0, #11
 723 0002 04D1     		bne	.L49
  49:src/menu.c    ****       break;
 724              		.loc 1 49 7 view .LVU211
  44:src/menu.c    ****   int ret = 0;
 725              		.loc 1 44 36 is_stmt 0 view .LVU212
 726 0004 08B5     		push	{r3, lr}
 727              		.cfi_def_cfa_offset 8
 728              		.cfi_offset 3, -8
 729              		.cfi_offset 14, -4
  49:src/menu.c    ****       break;
 730              		.loc 1 49 7 view .LVU213
 731 0006 FFF7FEFF 		bl	disp_about
 732              	.LVL56:
  50:src/menu.c    **** 
 733              		.loc 1 50 7 is_stmt 1 view .LVU214
  45:src/menu.c    **** 
 734              		.loc 1 45 7 is_stmt 0 view .LVU215
 735 000a 0020     		movs	r0, #0
  58:src/menu.c    **** 
 736              		.loc 1 58 1 view .LVU216
 737 000c 08BD     		pop	{r3, pc}
 738              	.LVL57:
 739              	.L49:
 740              		.cfi_def_cfa_offset 0
 741              		.cfi_restore 3
 742              		.cfi_restore 14
  53:src/menu.c    ****       break;
 743              		.loc 1 53 11 view .LVU217
 744 000e 4FF0FF30 		mov	r0, #-1
 745              	.LVL58:
  57:src/menu.c    **** }
 746              		.loc 1 57 3 is_stmt 1 view .LVU218
  58:src/menu.c    **** 
 747              		.loc 1 58 1 is_stmt 0 view .LVU219
 748 0012 7047     		bx	lr
 749              		.cfi_endproc
 750              	.LFE3:
 752              		.section	.text.set_menu,"ax",%progbits
 753              		.align	1
 754              		.p2align 2,,3
 755              		.global	set_menu
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 759              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccrLsn8H.s 			page 28


 761              	set_menu:
 762              	.LVL59:
 763              	.LFB6:
 122:src/menu.c    ****   menu_name m = current_menu;
 764              		.loc 1 122 38 is_stmt 1 view -0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 0
 767              		@ frame_needed = 0, uses_anonymous_args = 0
 768              		@ link register save eliminated.
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 769              		.loc 1 123 3 view .LVU221
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 770              		.loc 1 123 13 is_stmt 0 view .LVU222
 771 0000 0A4A     		ldr	r2, .L66
 772 0002 92F90030 		ldrsb	r3, [r2]
 773              	.LVL60:
 124:src/menu.c    ****     current_menu = default_menu;
 774              		.loc 1 124 3 is_stmt 1 view .LVU223
 124:src/menu.c    ****     current_menu = default_menu;
 775              		.loc 1 124 6 is_stmt 0 view .LVU224
 776 0006 8342     		cmp	r3, r0
 777 0008 0CD0     		beq	.L65
 127:src/menu.c    ****     current_menu = last_menu;
 778              		.loc 1 127 8 is_stmt 1 view .LVU225
 127:src/menu.c    ****     current_menu = last_menu;
 779              		.loc 1 127 11 is_stmt 0 view .LVU226
 780 000a 411C     		adds	r1, r0, #1
 128:src/menu.c    ****   }
 781              		.loc 1 128 5 is_stmt 1 view .LVU227
 128:src/menu.c    ****   }
 782              		.loc 1 128 18 is_stmt 0 view .LVU228
 783 000c 09BF     		itett	eq
 784 000e 0849     		ldreq	r1, .L66+4
 131:src/menu.c    ****   }
 785              		.loc 1 131 18 view .LVU229
 786 0010 1070     		strbne	r0, [r2]
 128:src/menu.c    ****   }
 787              		.loc 1 128 18 view .LVU230
 788 0012 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 789 0014 1170     		strbeq	r1, [r2]
 131:src/menu.c    ****   }
 790              		.loc 1 131 5 is_stmt 1 view .LVU231
 791              	.L56:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 792              		.loc 1 133 3 view .LVU232
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 793              		.loc 1 133 6 is_stmt 0 view .LVU233
 794 0016 092B     		cmp	r3, #9
 795 0018 03D0     		beq	.L54
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 796              		.loc 1 133 23 discriminator 1 view .LVU234
 797 001a 102B     		cmp	r3, #16
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 798              		.loc 1 133 43 is_stmt 1 discriminator 1 view .LVU235
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 799              		.loc 1 133 53 is_stmt 0 discriminator 1 view .LVU236
 800 001c 1CBF     		itt	ne
ARM GAS  /tmp/ccrLsn8H.s 			page 29


 801 001e 044A     		ldrne	r2, .L66+4
 802 0020 1370     		strbne	r3, [r2]
 803              	.L54:
 135:src/menu.c    **** 
 804              		.loc 1 135 1 view .LVU237
 805 0022 7047     		bx	lr
 806              	.L65:
 125:src/menu.c    ****   }
 807              		.loc 1 125 5 is_stmt 1 view .LVU238
 125:src/menu.c    ****   }
 808              		.loc 1 125 18 is_stmt 0 view .LVU239
 809 0024 0349     		ldr	r1, .L66+8
 810 0026 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 811 0028 1170     		strb	r1, [r2]
 812 002a F4E7     		b	.L56
 813              	.L67:
 814              		.align	2
 815              	.L66:
 816 002c 00000000 		.word	.LANCHOR1
 817 0030 00000000 		.word	.LANCHOR3
 818 0034 00000000 		.word	.LANCHOR2
 819              		.cfi_endproc
 820              	.LFE6:
 822              		.section	.text.set_default_menu,"ax",%progbits
 823              		.align	1
 824              		.p2align 2,,3
 825              		.global	set_default_menu
 826              		.syntax unified
 827              		.thumb
 828              		.thumb_func
 829              		.fpu fpv4-sp-d16
 831              	set_default_menu:
 832              	.LFB7:
 137:src/menu.c    ****   set_menu (default_menu);
 833              		.loc 1 137 26 is_stmt 1 view -0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 0
 836              		@ frame_needed = 0, uses_anonymous_args = 0
 837              		@ link register save eliminated.
 138:src/menu.c    **** }
 838              		.loc 1 138 3 view .LVU241
 839 0000 0A4B     		ldr	r3, .L80
 840              	.LBB61:
 841              	.LBB62:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 842              		.loc 1 123 13 is_stmt 0 view .LVU242
 843 0002 0B49     		ldr	r1, .L80+4
 844              	.LBE62:
 845              	.LBE61:
 138:src/menu.c    **** }
 846              		.loc 1 138 3 view .LVU243
 847 0004 93F90020 		ldrsb	r2, [r3]
 848              	.LVL61:
 849              	.LBB65:
 850              	.LBI61:
 122:src/menu.c    ****   menu_name m = current_menu;
 851              		.loc 1 122 6 is_stmt 1 view .LVU244
ARM GAS  /tmp/ccrLsn8H.s 			page 30


 852              	.LBB63:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 853              		.loc 1 123 3 view .LVU245
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 854              		.loc 1 123 13 is_stmt 0 view .LVU246
 855 0008 91F90030 		ldrsb	r3, [r1]
 856              	.LVL62:
 124:src/menu.c    ****     current_menu = default_menu;
 857              		.loc 1 124 3 is_stmt 1 view .LVU247
 124:src/menu.c    ****     current_menu = default_menu;
 858              		.loc 1 124 6 is_stmt 0 view .LVU248
 859 000c 9A42     		cmp	r2, r3
 860 000e 0BD0     		beq	.L79
 127:src/menu.c    ****     current_menu = last_menu;
 861              		.loc 1 127 8 is_stmt 1 view .LVU249
 127:src/menu.c    ****     current_menu = last_menu;
 862              		.loc 1 127 11 is_stmt 0 view .LVU250
 863 0010 501C     		adds	r0, r2, #1
 128:src/menu.c    ****   }
 864              		.loc 1 128 5 is_stmt 1 view .LVU251
 128:src/menu.c    ****   }
 865              		.loc 1 128 18 is_stmt 0 view .LVU252
 866 0012 04BF     		itt	eq
 867 0014 074A     		ldreq	r2, .L80+8
 868              	.LVL63:
 128:src/menu.c    ****   }
 869              		.loc 1 128 18 view .LVU253
 870 0016 1278     		ldrbeq	r2, [r2]	@ zero_extendqisi2
 131:src/menu.c    ****   }
 871              		.loc 1 131 5 is_stmt 1 view .LVU254
 131:src/menu.c    ****   }
 872              		.loc 1 131 18 is_stmt 0 view .LVU255
 873 0018 0A70     		strb	r2, [r1]
 874              	.LVL64:
 875              	.L70:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 876              		.loc 1 133 3 is_stmt 1 view .LVU256
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 877              		.loc 1 133 6 is_stmt 0 view .LVU257
 878 001a 092B     		cmp	r3, #9
 879 001c 03D0     		beq	.L68
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 880              		.loc 1 133 23 view .LVU258
 881 001e 102B     		cmp	r3, #16
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 882              		.loc 1 133 43 is_stmt 1 view .LVU259
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 883              		.loc 1 133 53 is_stmt 0 view .LVU260
 884 0020 1CBF     		itt	ne
 885 0022 044A     		ldrne	r2, .L80+8
 886 0024 1370     		strbne	r3, [r2]
 887              	.LVL65:
 888              	.L68:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 889              		.loc 1 133 53 view .LVU261
 890              	.LBE63:
 891              	.LBE65:
ARM GAS  /tmp/ccrLsn8H.s 			page 31


 139:src/menu.c    **** 
 892              		.loc 1 139 1 view .LVU262
 893 0026 7047     		bx	lr
 894              	.LVL66:
 895              	.L79:
 896              	.LBB66:
 897              	.LBB64:
 125:src/menu.c    ****   }
 898              		.loc 1 125 5 is_stmt 1 view .LVU263
 125:src/menu.c    ****   }
 899              		.loc 1 125 18 is_stmt 0 view .LVU264
 900 0028 0B70     		strb	r3, [r1]
 901 002a F6E7     		b	.L70
 902              	.L81:
 903              		.align	2
 904              	.L80:
 905 002c 00000000 		.word	.LANCHOR2
 906 0030 00000000 		.word	.LANCHOR1
 907 0034 00000000 		.word	.LANCHOR3
 908              	.LBE64:
 909              	.LBE66:
 910              		.cfi_endproc
 911              	.LFE7:
 913              		.section	.text.toggle_default_menu,"ax",%progbits
 914              		.align	1
 915              		.p2align 2,,3
 916              		.global	toggle_default_menu
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu fpv4-sp-d16
 922              	toggle_default_menu:
 923              	.LFB8:
 141:src/menu.c    ****   if (current_menu == M_Blank) {
 924              		.loc 1 141 29 is_stmt 1 view -0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928              		@ link register save eliminated.
 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 929              		.loc 1 142 3 view .LVU266
 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 930              		.loc 1 142 20 is_stmt 0 view .LVU267
 931 0000 104A     		ldr	r2, .L98
 143:src/menu.c    ****     return;
 932              		.loc 1 143 33 view .LVU268
 933 0002 1149     		ldr	r1, .L98+4
 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 934              		.loc 1 142 20 view .LVU269
 935 0004 92F90030 		ldrsb	r3, [r2]
 142:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 936              		.loc 1 142 6 view .LVU270
 937 0008 ABB1     		cbz	r3, .L95
 146:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 938              		.loc 1 146 8 is_stmt 1 view .LVU271
 146:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 939              		.loc 1 146 11 is_stmt 0 view .LVU272
ARM GAS  /tmp/ccrLsn8H.s 			page 32


 940 000a 0F2B     		cmp	r3, #15
 941 000c 0FD0     		beq	.L96
 150:src/menu.c    ****   }
 942              		.loc 1 150 5 is_stmt 1 view .LVU273
 943              	.LBB67:
 944              	.LBI67:
 137:src/menu.c    ****   set_menu (default_menu);
 945              		.loc 1 137 6 view .LVU274
 946              	.LBB68:
 138:src/menu.c    **** }
 947              		.loc 1 138 3 view .LVU275
 948 000e 91F90010 		ldrsb	r1, [r1]
 949              	.LVL67:
 950              	.LBB69:
 951              	.LBI69:
 122:src/menu.c    ****   menu_name m = current_menu;
 952              		.loc 1 122 6 view .LVU276
 953              	.LBB70:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 954              		.loc 1 123 3 view .LVU277
 124:src/menu.c    ****     current_menu = default_menu;
 955              		.loc 1 124 3 view .LVU278
 124:src/menu.c    ****     current_menu = default_menu;
 956              		.loc 1 124 6 is_stmt 0 view .LVU279
 957 0012 8B42     		cmp	r3, r1
 958 0014 13D0     		beq	.L97
 127:src/menu.c    ****     current_menu = last_menu;
 959              		.loc 1 127 8 is_stmt 1 view .LVU280
 127:src/menu.c    ****     current_menu = last_menu;
 960              		.loc 1 127 11 is_stmt 0 view .LVU281
 961 0016 481C     		adds	r0, r1, #1
 128:src/menu.c    ****   }
 962              		.loc 1 128 5 is_stmt 1 view .LVU282
 128:src/menu.c    ****   }
 963              		.loc 1 128 18 is_stmt 0 view .LVU283
 964 0018 04BF     		itt	eq
 965 001a 0C49     		ldreq	r1, .L98+8
 966              	.LVL68:
 128:src/menu.c    ****   }
 967              		.loc 1 128 18 view .LVU284
 968 001c 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 131:src/menu.c    ****   }
 969              		.loc 1 131 5 is_stmt 1 view .LVU285
 131:src/menu.c    ****   }
 970              		.loc 1 131 18 is_stmt 0 view .LVU286
 971 001e 1170     		strb	r1, [r2]
 972              	.LVL69:
 973              	.L87:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 974              		.loc 1 133 3 is_stmt 1 view .LVU287
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 975              		.loc 1 133 6 is_stmt 0 view .LVU288
 976 0020 092B     		cmp	r3, #9
 977 0022 03D0     		beq	.L82
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 978              		.loc 1 133 23 view .LVU289
 979 0024 102B     		cmp	r3, #16
ARM GAS  /tmp/ccrLsn8H.s 			page 33


 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 980              		.loc 1 133 43 is_stmt 1 view .LVU290
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 981              		.loc 1 133 53 is_stmt 0 view .LVU291
 982 0026 1CBF     		itt	ne
 983 0028 084A     		ldrne	r2, .L98+8
 984 002a 1370     		strbne	r3, [r2]
 985              	.LVL70:
 986              	.L82:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 987              		.loc 1 133 53 view .LVU292
 988              	.LBE70:
 989              	.LBE69:
 990              	.LBE68:
 991              	.LBE67:
 152:src/menu.c    **** 
 992              		.loc 1 152 1 view .LVU293
 993 002c 7047     		bx	lr
 994              	.L96:
 147:src/menu.c    ****   }
 995              		.loc 1 147 5 is_stmt 1 view .LVU294
 147:src/menu.c    ****   }
 996              		.loc 1 147 33 is_stmt 0 view .LVU295
 997 002e 0023     		movs	r3, #0
 998 0030 0B70     		strb	r3, [r1]
 147:src/menu.c    ****   }
 999              		.loc 1 147 18 view .LVU296
 1000 0032 1370     		strb	r3, [r2]
 1001 0034 7047     		bx	lr
 1002              	.L95:
 143:src/menu.c    ****     return;
 1003              		.loc 1 143 5 is_stmt 1 view .LVU297
 143:src/menu.c    ****     return;
 1004              		.loc 1 143 33 is_stmt 0 view .LVU298
 1005 0036 0F23     		movs	r3, #15
 1006 0038 0B70     		strb	r3, [r1]
 143:src/menu.c    ****     return;
 1007              		.loc 1 143 18 view .LVU299
 1008 003a 1370     		strb	r3, [r2]
 144:src/menu.c    ****   }
 1009              		.loc 1 144 5 is_stmt 1 view .LVU300
 1010 003c 7047     		bx	lr
 1011              	.LVL71:
 1012              	.L97:
 1013              	.LBB74:
 1014              	.LBB73:
 1015              	.LBB72:
 1016              	.LBB71:
 125:src/menu.c    ****   }
 1017              		.loc 1 125 5 view .LVU301
 125:src/menu.c    ****   }
 1018              		.loc 1 125 18 is_stmt 0 view .LVU302
 1019 003e 1370     		strb	r3, [r2]
 1020 0040 EEE7     		b	.L87
 1021              	.L99:
 1022 0042 00BF     		.align	2
 1023              	.L98:
ARM GAS  /tmp/ccrLsn8H.s 			page 34


 1024 0044 00000000 		.word	.LANCHOR1
 1025 0048 00000000 		.word	.LANCHOR2
 1026 004c 00000000 		.word	.LANCHOR3
 1027              	.LBE71:
 1028              	.LBE72:
 1029              	.LBE73:
 1030              	.LBE74:
 1031              		.cfi_endproc
 1032              	.LFE8:
 1034              		.section	.text.get_menu,"ax",%progbits
 1035              		.align	1
 1036              		.p2align 2,,3
 1037              		.global	get_menu
 1038              		.syntax unified
 1039              		.thumb
 1040              		.thumb_func
 1041              		.fpu fpv4-sp-d16
 1043              	get_menu:
 1044              	.LFB9:
 154:src/menu.c    ****   return current_menu;
 1045              		.loc 1 154 23 is_stmt 1 view -0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 0
 1048              		@ frame_needed = 0, uses_anonymous_args = 0
 1049              		@ link register save eliminated.
 155:src/menu.c    **** }
 1050              		.loc 1 155 3 view .LVU304
 155:src/menu.c    **** }
 1051              		.loc 1 155 10 is_stmt 0 view .LVU305
 1052 0000 014B     		ldr	r3, .L101
 156:src/menu.c    **** 
 1053              		.loc 1 156 1 view .LVU306
 1054 0002 93F90000 		ldrsb	r0, [r3]
 1055 0006 7047     		bx	lr
 1056              	.L102:
 1057              		.align	2
 1058              	.L101:
 1059 0008 00000000 		.word	.LANCHOR1
 1060              		.cfi_endproc
 1061              	.LFE9:
 1063              		.section	.text.get_last_menu,"ax",%progbits
 1064              		.align	1
 1065              		.p2align 2,,3
 1066              		.global	get_last_menu
 1067              		.syntax unified
 1068              		.thumb
 1069              		.thumb_func
 1070              		.fpu fpv4-sp-d16
 1072              	get_last_menu:
 1073              	.LFB10:
 158:src/menu.c    ****   return last_menu;
 1074              		.loc 1 158 28 is_stmt 1 view -0
 1075              		.cfi_startproc
 1076              		@ args = 0, pretend = 0, frame = 0
 1077              		@ frame_needed = 0, uses_anonymous_args = 0
 1078              		@ link register save eliminated.
 159:src/menu.c    **** }
ARM GAS  /tmp/ccrLsn8H.s 			page 35


 1079              		.loc 1 159 3 view .LVU308
 159:src/menu.c    **** }
 1080              		.loc 1 159 10 is_stmt 0 view .LVU309
 1081 0000 014B     		ldr	r3, .L104
 160:src/menu.c    **** 
 1082              		.loc 1 160 1 view .LVU310
 1083 0002 93F90000 		ldrsb	r0, [r3]
 1084 0006 7047     		bx	lr
 1085              	.L105:
 1086              		.align	2
 1087              	.L104:
 1088 0008 00000000 		.word	.LANCHOR3
 1089              		.cfi_endproc
 1090              	.LFE10:
 1092              		.section	.text.set_last_menu,"ax",%progbits
 1093              		.align	1
 1094              		.p2align 2,,3
 1095              		.global	set_last_menu
 1096              		.syntax unified
 1097              		.thumb
 1098              		.thumb_func
 1099              		.fpu fpv4-sp-d16
 1101              	set_last_menu:
 1102              	.LFB12:
 166:src/menu.c    ****   set_menu (M_Last);
 1103              		.loc 1 166 23 is_stmt 1 view -0
 1104              		.cfi_startproc
 1105              		@ args = 0, pretend = 0, frame = 0
 1106              		@ frame_needed = 0, uses_anonymous_args = 0
 1107              		@ link register save eliminated.
 167:src/menu.c    **** }
 1108              		.loc 1 167 3 view .LVU312
 1109              	.LVL72:
 1110              	.LBB75:
 1111              	.LBI75:
 122:src/menu.c    ****   menu_name m = current_menu;
 1112              		.loc 1 122 6 view .LVU313
 1113              	.LBB76:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1114              		.loc 1 123 3 view .LVU314
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1115              		.loc 1 123 13 is_stmt 0 view .LVU315
 1116 0000 0A4A     		ldr	r2, .L119
 1117 0002 92F90030 		ldrsb	r3, [r2]
 1118              	.LVL73:
 124:src/menu.c    ****     current_menu = default_menu;
 1119              		.loc 1 124 3 is_stmt 1 view .LVU316
 124:src/menu.c    ****     current_menu = default_menu;
 1120              		.loc 1 124 6 is_stmt 0 view .LVU317
 1121 0006 591C     		adds	r1, r3, #1
 1122 0008 09D0     		beq	.L116
 127:src/menu.c    ****     current_menu = last_menu;
 1123              		.loc 1 127 8 is_stmt 1 view .LVU318
 128:src/menu.c    ****   }
 1124              		.loc 1 128 5 view .LVU319
 128:src/menu.c    ****   }
 1125              		.loc 1 128 18 is_stmt 0 view .LVU320
ARM GAS  /tmp/ccrLsn8H.s 			page 36


 1126 000a 0949     		ldr	r1, .L119+4
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1127              		.loc 1 133 6 view .LVU321
 1128 000c 092B     		cmp	r3, #9
 128:src/menu.c    ****   }
 1129              		.loc 1 128 18 view .LVU322
 1130 000e 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1131 0010 1070     		strb	r0, [r2]
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1132              		.loc 1 133 3 is_stmt 1 view .LVU323
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1133              		.loc 1 133 6 is_stmt 0 view .LVU324
 1134 0012 00D1     		bne	.L117
 1135              	.L106:
 1136              	.LBE76:
 1137              	.LBE75:
 168:src/menu.c    **** 
 1138              		.loc 1 168 1 view .LVU325
 1139 0014 7047     		bx	lr
 1140              	.L117:
 1141              	.LBB79:
 1142              	.LBB77:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1143              		.loc 1 133 23 view .LVU326
 1144 0016 102B     		cmp	r3, #16
 1145 0018 FCD0     		beq	.L106
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1146              		.loc 1 133 43 is_stmt 1 view .LVU327
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1147              		.loc 1 133 53 is_stmt 0 view .LVU328
 1148 001a 0B70     		strb	r3, [r1]
 1149              	.LVL74:
 1150              	.L118:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1151              		.loc 1 133 53 view .LVU329
 1152              	.LBE77:
 1153              	.LBE79:
 168:src/menu.c    **** 
 1154              		.loc 1 168 1 view .LVU330
 1155 001c 7047     		bx	lr
 1156              	.LVL75:
 1157              	.L116:
 1158              	.LBB80:
 1159              	.LBB78:
 125:src/menu.c    ****   }
 1160              		.loc 1 125 5 is_stmt 1 view .LVU331
 125:src/menu.c    ****   }
 1161              		.loc 1 125 18 is_stmt 0 view .LVU332
 1162 001e 0548     		ldr	r0, .L119+8
 1163 0020 0349     		ldr	r1, .L119+4
 1164 0022 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1165 0024 1070     		strb	r0, [r2]
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1166              		.loc 1 133 3 is_stmt 1 view .LVU333
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1167              		.loc 1 133 43 view .LVU334
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
ARM GAS  /tmp/ccrLsn8H.s 			page 37


 1168              		.loc 1 133 53 is_stmt 0 view .LVU335
 1169 0026 0B70     		strb	r3, [r1]
 1170              	.LVL76:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1171              		.loc 1 133 53 view .LVU336
 1172 0028 F8E7     		b	.L118
 1173              	.L120:
 1174 002a 00BF     		.align	2
 1175              	.L119:
 1176 002c 00000000 		.word	.LANCHOR1
 1177 0030 00000000 		.word	.LANCHOR3
 1178 0034 00000000 		.word	.LANCHOR2
 1179              	.LBE78:
 1180              	.LBE80:
 1181              		.cfi_endproc
 1182              	.LFE12:
 1184              		.section	.text.mdot,"ax",%progbits
 1185              		.align	1
 1186              		.p2align 2,,3
 1187              		.global	mdot
 1188              		.syntax unified
 1189              		.thumb
 1190              		.thumb_func
 1191              		.fpu fpv4-sp-d16
 1193              	mdot:
 1194              	.LVL77:
 1195              	.LFB14:
 570:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1196              		.loc 1 570 40 is_stmt 1 view -0
 1197              		.cfi_startproc
 1198              		@ args = 0, pretend = 0, frame = 0
 1199              		@ frame_needed = 0, uses_anonymous_args = 0
 1200              		@ link register save eliminated.
 571:src/menu.c    ****   if (on) {
 1201              		.loc 1 571 3 view .LVU338
 571:src/menu.c    ****   if (on) {
 1202              		.loc 1 571 6 is_stmt 0 view .LVU339
 1203 0000 C728     		cmp	r0, #199
 1204 0002 1AD8     		bhi	.L125
 1205              	.LVL78:
 1206              	.LBB83:
 1207              	.LBI83:
 570:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1208              		.loc 1 570 6 is_stmt 1 view .LVU340
 1209              	.LBB84:
 572:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1210              		.loc 1 572 3 view .LVU341
 1211              	.LBE84:
 1212              	.LBE83:
 570:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1213              		.loc 1 570 40 is_stmt 0 view .LVU342
 1214 0004 10B4     		push	{r4}
 1215              		.cfi_def_cfa_offset 4
 1216              		.cfi_offset 4, -4
 1217              	.LBB87:
 1218              	.LBB85:
 572:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
ARM GAS  /tmp/ccrLsn8H.s 			page 38


 1219              		.loc 1 572 6 view .LVU343
 1220 0006 63B9     		cbnz	r3, .L128
 1221              		.loc 1 576 5 is_stmt 1 view .LVU344
 1222              		.loc 1 576 17 is_stmt 0 view .LVU345
 1223 0008 0C4B     		ldr	r3, .L129
 1224              	.LVL79:
 1225              		.loc 1 576 17 view .LVU346
 1226 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1227              	.LVL80:
 1228              		.loc 1 576 25 view .LVU347
 1229 000e 0124     		movs	r4, #1
 1230              		.loc 1 576 17 view .LVU348
 1231 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1232              		.loc 1 576 25 view .LVU349
 1233 0012 04FA01F1 		lsl	r1, r4, r1
 1234              	.LVL81:
 1235              		.loc 1 576 17 view .LVU350
 1236 0016 23EA0101 		bic	r1, r3, r1
 1237 001a 8154     		strb	r1, [r0, r2]
 1238              	.LVL82:
 1239              		.loc 1 576 17 view .LVU351
 1240              	.LBE85:
 1241              	.LBE87:
 577:src/menu.c    ****   }
 578:src/menu.c    **** }
 1242              		.loc 1 578 1 view .LVU352
 1243 001c 5DF8044B 		ldr	r4, [sp], #4
 1244              		.cfi_remember_state
 1245              		.cfi_restore 4
 1246              		.cfi_def_cfa_offset 0
 1247 0020 7047     		bx	lr
 1248              	.LVL83:
 1249              	.L128:
 1250              		.cfi_restore_state
 1251              	.LBB88:
 1252              	.LBB86:
 573:src/menu.c    ****   }
 1253              		.loc 1 573 5 is_stmt 1 view .LVU353
 573:src/menu.c    ****   }
 1254              		.loc 1 573 17 is_stmt 0 view .LVU354
 1255 0022 064B     		ldr	r3, .L129
 1256              	.LVL84:
 573:src/menu.c    ****   }
 1257              		.loc 1 573 17 view .LVU355
 1258 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1259              	.LVL85:
 573:src/menu.c    ****   }
 1260              		.loc 1 573 24 view .LVU356
 1261 0028 0124     		movs	r4, #1
 573:src/menu.c    ****   }
 1262              		.loc 1 573 17 view .LVU357
 1263 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 573:src/menu.c    ****   }
 1264              		.loc 1 573 24 view .LVU358
 1265 002c 04FA01F1 		lsl	r1, r4, r1
 1266              	.LVL86:
 573:src/menu.c    ****   }
ARM GAS  /tmp/ccrLsn8H.s 			page 39


 1267              		.loc 1 573 17 view .LVU359
 1268 0030 1943     		orrs	r1, r1, r3
 1269 0032 8154     		strb	r1, [r0, r2]
 1270              	.LBE86:
 1271              	.LBE88:
 1272              		.loc 1 578 1 view .LVU360
 1273 0034 5DF8044B 		ldr	r4, [sp], #4
 1274              		.cfi_restore 4
 1275              		.cfi_def_cfa_offset 0
 1276 0038 7047     		bx	lr
 1277              	.LVL87:
 1278              	.L125:
 1279              		.loc 1 578 1 view .LVU361
 1280 003a 7047     		bx	lr
 1281              	.L130:
 1282              		.align	2
 1283              	.L129:
 1284 003c 00000000 		.word	.LANCHOR0
 1285              		.cfi_endproc
 1286              	.LFE14:
 1288              		.section	.text.get_current_menu_ref,"ax",%progbits
 1289              		.align	1
 1290              		.p2align 2,,3
 1291              		.global	get_current_menu_ref
 1292              		.syntax unified
 1293              		.thumb
 1294              		.thumb_func
 1295              		.fpu fpv4-sp-d16
 1297              	get_current_menu_ref:
 1298              	.LVL88:
 1299              	.LFB15:
 579:src/menu.c    **** 
 580:src/menu.c    **** struct _menu get_current_menu_ref() {
 1300              		.loc 1 580 37 is_stmt 1 view -0
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 0
 1303              		@ frame_needed = 0, uses_anonymous_args = 0
 581:src/menu.c    ****   int i = current_menu;
 1304              		.loc 1 581 3 view .LVU363
 580:src/menu.c    ****   int i = current_menu;
 1305              		.loc 1 580 37 is_stmt 0 view .LVU364
 1306 0000 08B5     		push	{r3, lr}
 1307              		.cfi_def_cfa_offset 8
 1308              		.cfi_offset 3, -8
 1309              		.cfi_offset 14, -4
 582:src/menu.c    ****   if (C_LOCKED)
 1310              		.loc 1 582 7 view .LVU365
 1311 0002 294B     		ldr	r3, .L147
 581:src/menu.c    ****   int i = current_menu;
 1312              		.loc 1 581 7 view .LVU366
 1313 0004 294A     		ldr	r2, .L147+4
 1314              		.loc 1 582 7 view .LVU367
 1315 0006 1B68     		ldr	r3, [r3]
 581:src/menu.c    ****   int i = current_menu;
 1316              		.loc 1 581 7 view .LVU368
 1317 0008 92F90010 		ldrsb	r1, [r2]
 1318              	.LVL89:
ARM GAS  /tmp/ccrLsn8H.s 			page 40


 1319              		.loc 1 582 3 is_stmt 1 view .LVU369
 1320              		.loc 1 582 7 is_stmt 0 view .LVU370
 1321 000c 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 1322              		.loc 1 582 6 view .LVU371
 1323 0010 03F04102 		and	r2, r3, #65
 1324 0014 412A     		cmp	r2, #65
 580:src/menu.c    ****   int i = current_menu;
 1325              		.loc 1 580 37 view .LVU372
 1326 0016 0346     		mov	r3, r0
 1327              		.loc 1 582 6 view .LVU373
 1328 0018 0BD0     		beq	.L145
 1329              	.LVL90:
 1330              	.L132:
 583:src/menu.c    ****     switch (current_menu) {
 584:src/menu.c    ****     case (M_Clear):
 585:src/menu.c    ****       i = M_Clear_C;
 586:src/menu.c    ****       break;
 587:src/menu.c    ****     case (M_Swap):
 588:src/menu.c    ****       i = M_Swap_C;
 589:src/menu.c    ****       break;
 590:src/menu.c    ****     case (M_Arrow):
 591:src/menu.c    ****       i = M_Arrow_C;
 592:src/menu.c    ****       break;
 593:src/menu.c    ****     case (M_Prob):
 594:src/menu.c    ****       i = M_Prob_C;
 595:src/menu.c    ****       break;
 596:src/menu.c    ****     case (M_Blank2):
 597:src/menu.c    ****       i = M_Blank2_C;
 598:src/menu.c    ****       break;
 599:src/menu.c    ****     case (M_Misc):
 600:src/menu.c    ****       i = M_Misc_C;
 601:src/menu.c    ****       break;
 602:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 603:src/menu.c    ****     case (M_Flags):// so don't display them.
 604:src/menu.c    ****     case (M_Stats):
 605:src/menu.c    ****     case (M_Setup2):
 606:src/menu.c    ****     case (M_Solve):
 607:src/menu.c    ****     case (M_Program):
 608:src/menu.c    ****       i = M_C_Lock;
 609:src/menu.c    ****     default:;
 1331              		.loc 1 609 13 is_stmt 1 view .LVU374
 610:src/menu.c    ****     }
 611:src/menu.c    ****   if (current_menu == M_User) {
 1332              		.loc 1 611 3 view .LVU375
 1333              		.loc 1 611 6 is_stmt 0 view .LVU376
 1334 001a 6329     		cmp	r1, #99
 1335 001c 32D0     		beq	.L146
 1336              	.LVL91:
 1337              	.L137:
 612:src/menu.c    ****     return UserMenu;
 613:src/menu.c    ****   }
 614:src/menu.c    ****   else {
 615:src/menu.c    ****     return Menus[i];
 1338              		.loc 1 615 5 is_stmt 1 view .LVU377
 1339              		.loc 1 615 17 is_stmt 0 view .LVU378
 1340 001e 2448     		ldr	r0, .L147+8
 1341 0020 D022     		movs	r2, #208
ARM GAS  /tmp/ccrLsn8H.s 			page 41


 1342 0022 02FB0101 		mla	r1, r2, r1, r0
 1343              	.LVL92:
 1344              		.loc 1 615 17 view .LVU379
 1345 0026 1846     		mov	r0, r3
 1346 0028 FFF7FEFF 		bl	memcpy
 1347              	.LVL93:
 1348              		.loc 1 615 17 view .LVU380
 1349 002c 0346     		mov	r3, r0
 616:src/menu.c    ****   }
 617:src/menu.c    **** }
 1350              		.loc 1 617 1 view .LVU381
 1351 002e 1846     		mov	r0, r3
 1352 0030 08BD     		pop	{r3, pc}
 1353              	.LVL94:
 1354              	.L145:
 583:src/menu.c    ****     case (M_Clear):
 1355              		.loc 1 583 5 is_stmt 1 view .LVU382
 1356 0032 4A1E     		subs	r2, r1, #1
 1357 0034 0E2A     		cmp	r2, #14
 1358 0036 F0D8     		bhi	.L132
 1359 0038 01A0     		adr	r0, .L134
 1360 003a 50F822F0 		ldr	pc, [r0, r2, lsl #2]
 1361              	.LVL95:
 1362 003e 00BF     		.p2align 2
 1363              	.L134:
 1364 0040 A5000000 		.word	.L140+1
 1365 0044 1B000000 		.word	.L132+1
 1366 0048 A1000000 		.word	.L135+1
 1367 004c 1B000000 		.word	.L132+1
 1368 0050 9D000000 		.word	.L139+1
 1369 0054 81000000 		.word	.L138+1
 1370 0058 A1000000 		.word	.L135+1
 1371 005c 1B000000 		.word	.L132+1
 1372 0060 7D000000 		.word	.L143+1
 1373 0064 A1000000 		.word	.L135+1
 1374 0068 99000000 		.word	.L136+1
 1375 006c A1000000 		.word	.L135+1
 1376 0070 A1000000 		.word	.L135+1
 1377 0074 A1000000 		.word	.L135+1
 1378 0078 95000000 		.word	.L133+1
 1379              		.p2align 1
 1380              	.L143:
 591:src/menu.c    ****       break;
 1381              		.loc 1 591 9 is_stmt 0 view .LVU383
 1382 007c 1421     		movs	r1, #20
 1383              	.LVL96:
 591:src/menu.c    ****       break;
 1384              		.loc 1 591 9 view .LVU384
 1385 007e CEE7     		b	.L137
 1386              	.LVL97:
 1387              	.L138:
 582:src/menu.c    ****     switch (current_menu) {
 1388              		.loc 1 582 6 view .LVU385
 1389 0080 1321     		movs	r1, #19
 1390              	.LVL98:
 582:src/menu.c    ****     switch (current_menu) {
 1391              		.loc 1 582 6 view .LVU386
ARM GAS  /tmp/ccrLsn8H.s 			page 42


 1392 0082 CCE7     		b	.L137
 1393              	.LVL99:
 1394              	.L146:
 612:src/menu.c    ****   }
 1395              		.loc 1 612 5 is_stmt 1 view .LVU387
 612:src/menu.c    ****   }
 1396              		.loc 1 612 12 is_stmt 0 view .LVU388
 1397 0084 0B49     		ldr	r1, .L147+12
 1398              	.LVL100:
 612:src/menu.c    ****   }
 1399              		.loc 1 612 12 view .LVU389
 1400 0086 D022     		movs	r2, #208
 1401 0088 1846     		mov	r0, r3
 1402 008a FFF7FEFF 		bl	memcpy
 1403              	.LVL101:
 612:src/menu.c    ****   }
 1404              		.loc 1 612 12 view .LVU390
 1405 008e 0346     		mov	r3, r0
 1406              		.loc 1 617 1 view .LVU391
 1407 0090 1846     		mov	r0, r3
 1408 0092 08BD     		pop	{r3, pc}
 1409              	.LVL102:
 1410              	.L133:
 597:src/menu.c    ****       break;
 1411              		.loc 1 597 7 is_stmt 1 view .LVU392
 598:src/menu.c    ****     case (M_Misc):
 1412              		.loc 1 598 7 view .LVU393
 597:src/menu.c    ****       break;
 1413              		.loc 1 597 9 is_stmt 0 view .LVU394
 1414 0094 1621     		movs	r1, #22
 598:src/menu.c    ****     case (M_Misc):
 1415              		.loc 1 598 7 view .LVU395
 1416 0096 C2E7     		b	.L137
 1417              	.LVL103:
 1418              	.L136:
 594:src/menu.c    ****       break;
 1419              		.loc 1 594 7 is_stmt 1 view .LVU396
 595:src/menu.c    ****     case (M_Blank2):
 1420              		.loc 1 595 7 view .LVU397
 594:src/menu.c    ****       break;
 1421              		.loc 1 594 9 is_stmt 0 view .LVU398
 1422 0098 1521     		movs	r1, #21
 595:src/menu.c    ****     case (M_Blank2):
 1423              		.loc 1 595 7 view .LVU399
 1424 009a C0E7     		b	.L137
 1425              	.LVL104:
 1426              	.L139:
 600:src/menu.c    ****       break;
 1427              		.loc 1 600 7 is_stmt 1 view .LVU400
 601:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1428              		.loc 1 601 7 view .LVU401
 600:src/menu.c    ****       break;
 1429              		.loc 1 600 9 is_stmt 0 view .LVU402
 1430 009c 1721     		movs	r1, #23
 601:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1431              		.loc 1 601 7 view .LVU403
 1432 009e BEE7     		b	.L137
ARM GAS  /tmp/ccrLsn8H.s 			page 43


 1433              	.LVL105:
 1434              	.L135:
 608:src/menu.c    ****     default:;
 1435              		.loc 1 608 7 is_stmt 1 view .LVU404
 608:src/menu.c    ****     default:;
 1436              		.loc 1 608 9 is_stmt 0 view .LVU405
 1437 00a0 1121     		movs	r1, #17
 1438 00a2 BCE7     		b	.L137
 1439              	.LVL106:
 1440              	.L140:
 585:src/menu.c    ****       break;
 1441              		.loc 1 585 9 view .LVU406
 1442 00a4 1221     		movs	r1, #18
 1443              	.LVL107:
 585:src/menu.c    ****       break;
 1444              		.loc 1 585 9 view .LVU407
 1445 00a6 BAE7     		b	.L137
 1446              	.L148:
 1447              		.align	2
 1448              	.L147:
 1449 00a8 00000000 		.word	main_ram
 1450 00ac 00000000 		.word	.LANCHOR1
 1451 00b0 00000000 		.word	Menus
 1452 00b4 00000000 		.word	.LANCHOR4
 1453              		.cfi_endproc
 1454              	.LFE15:
 1456              		.section	.text.display_menu,"ax",%progbits
 1457              		.align	1
 1458              		.p2align 2,,3
 1459              		.global	display_menu
 1460              		.syntax unified
 1461              		.thumb
 1462              		.thumb_func
 1463              		.fpu fpv4-sp-d16
 1465              	display_menu:
 1466              	.LFB16:
 618:src/menu.c    **** 
 619:src/menu.c    **** void display_menu (struct _menu Ref) {
 1467              		.loc 1 619 38 is_stmt 1 view -0
 1468              		.cfi_startproc
 1469              		@ args = 208, pretend = 16, frame = 0
 1470              		@ frame_needed = 0, uses_anonymous_args = 0
 620:src/menu.c    ****   int len = 0;
 1471              		.loc 1 620 3 view .LVU409
 1472              	.LVL108:
 621:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1473              		.loc 1 621 3 view .LVU410
 619:src/menu.c    ****   int len = 0;
 1474              		.loc 1 619 38 is_stmt 0 view .LVU411
 1475 0000 84B0     		sub	sp, sp, #16
 1476              		.cfi_def_cfa_offset 16
 1477 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1478              		.cfi_def_cfa_offset 52
 1479              		.cfi_offset 4, -52
 1480              		.cfi_offset 5, -48
 1481              		.cfi_offset 6, -44
 1482              		.cfi_offset 7, -40
ARM GAS  /tmp/ccrLsn8H.s 			page 44


 1483              		.cfi_offset 8, -36
 1484              		.cfi_offset 9, -32
 1485              		.cfi_offset 10, -28
 1486              		.cfi_offset 11, -24
 1487              		.cfi_offset 14, -20
 1488 0006 83B0     		sub	sp, sp, #12
 1489              		.cfi_def_cfa_offset 64
 1490              		.loc 1 621 3 view .LVU412
 1491 0008 0024     		movs	r4, #0
 619:src/menu.c    ****   int len = 0;
 1492              		.loc 1 619 38 view .LVU413
 1493 000a 0CAD     		add	r5, sp, #48
 1494 000c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1495              		.loc 1 621 3 view .LVU414
 1496 0010 3E4E     		ldr	r6, .L167
 1497 0012 0094     		str	r4, [sp]
 1498 0014 2046     		mov	r0, r4
 1499 0016 3423     		movs	r3, #52
 1500 0018 4FF4C872 		mov	r2, #400
 1501 001c BC21     		movs	r1, #188
 1502 001e B047     		blx	r6
 1503              	.LVL109:
 622:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1504              		.loc 1 622 3 is_stmt 1 view .LVU415
 1505 0020 3B4D     		ldr	r5, .L167+4
 1506 0022 FF23     		movs	r3, #255
 1507 0024 0093     		str	r3, [sp]
 1508 0026 4FF4C872 		mov	r2, #400
 1509 002a 0123     		movs	r3, #1
 1510 002c BC21     		movs	r1, #188
 1511 002e 2046     		mov	r0, r4
 1512 0030 B047     		blx	r6
 1513              	.LVL110:
 623:src/menu.c    ****   //Clear previous menu
 624:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1514              		.loc 1 624 3 view .LVU416
 1515              	.LBB89:
 1516              		.loc 1 624 8 view .LVU417
 1517              		.loc 1 624 21 view .LVU418
 625:src/menu.c    ****     mdots[col][0] = 0;
 1518              		.loc 1 625 19 is_stmt 0 view .LVU419
 1519 0032 2246     		mov	r2, r4
 1520 0034 05F5C871 		add	r1, r5, #400
 1521              	.LBE89:
 622:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1522              		.loc 1 622 3 view .LVU420
 1523 0038 2B46     		mov	r3, r5
 1524              	.LVL111:
 1525              	.L150:
 1526              	.LBB90:
 1527              		.loc 1 625 5 is_stmt 1 discriminator 3 view .LVU421
 1528              		.loc 1 625 19 is_stmt 0 discriminator 3 view .LVU422
 1529 003a 1A70     		strb	r2, [r3]
 626:src/menu.c    ****     mdots[col][1] = 0;
 1530              		.loc 1 626 5 is_stmt 1 discriminator 3 view .LVU423
 1531              		.loc 1 626 19 is_stmt 0 discriminator 3 view .LVU424
 1532 003c 5A70     		strb	r2, [r3, #1]
ARM GAS  /tmp/ccrLsn8H.s 			page 45


 624:src/menu.c    ****     mdots[col][0] = 0;
 1533              		.loc 1 624 32 is_stmt 1 discriminator 3 view .LVU425
 624:src/menu.c    ****     mdots[col][0] = 0;
 1534              		.loc 1 624 21 discriminator 3 view .LVU426
 1535 003e 0233     		adds	r3, r3, #2
 624:src/menu.c    ****     mdots[col][0] = 0;
 1536              		.loc 1 624 3 is_stmt 0 discriminator 3 view .LVU427
 1537 0040 9942     		cmp	r1, r3
 1538 0042 FAD1     		bne	.L150
 1539 0044 14AE     		add	r6, sp, #80
 624:src/menu.c    ****     mdots[col][0] = 0;
 1540              		.loc 1 624 3 view .LVU428
 1541 0046 0024     		movs	r4, #0
 1542              	.LVL112:
 1543              	.L151:
 624:src/menu.c    ****     mdots[col][0] = 0;
 1544              		.loc 1 624 3 view .LVU429
 1545              	.LBE90:
 1546              	.LBB91:
 627:src/menu.c    ****   }
 628:src/menu.c    **** 
 629:src/menu.c    ****   // Draw menu items
 630:src/menu.c    ****   // 
 631:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 632:src/menu.c    ****     /*
 633:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 634:src/menu.c    ****     */
 635:src/menu.c    ****     // Label is Ref.keys[item].unshifted_label
 636:src/menu.c    ****     // Unshifted first
 637:src/menu.c    ****       len = pixel_length (Ref.keys[item].unshifted_label, 0); // 0 means not small font
 1547              		.loc 1 637 7 is_stmt 1 view .LVU430
 1548              		.loc 1 637 13 is_stmt 0 view .LVU431
 1549 0048 0021     		movs	r1, #0
 1550 004a 3046     		mov	r0, r6
 1551 004c FFF7FEFF 		bl	pixel_length
 1552              	.LVL113:
 638:src/menu.c    ****       set_menu_label ( Ref.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1553              		.loc 1 638 7 is_stmt 1 view .LVU432
 1554              		.loc 1 638 73 is_stmt 0 view .LVU433
 1555 0050 C0F12000 		rsb	r0, r0, #32
 1556              	.LVL114:
 1557              		.loc 1 638 79 view .LVU434
 1558 0054 00EBD070 		add	r0, r0, r0, lsr #31
 1559              		.loc 1 638 7 view .LVU435
 1560 0058 04EB6001 		add	r1, r4, r0, asr #1
 1561 005c 0022     		movs	r2, #0
 1562 005e 3046     		mov	r0, r6
 1563 0060 06F10807 		add	r7, r6, #8
 1564 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1565              	.LVL115:
 639:src/menu.c    ****       // Now shifted ...	
 640:src/menu.c    ****       len = pixel_length (Ref.keys[item].shifted_label, 0); // 0 means not small font
 1566              		.loc 1 640 7 is_stmt 1 view .LVU436
 1567              		.loc 1 640 13 is_stmt 0 view .LVU437
 1568 0068 0021     		movs	r1, #0
 1569 006a 3846     		mov	r0, r7
 1570 006c FFF7FEFF 		bl	pixel_length
ARM GAS  /tmp/ccrLsn8H.s 			page 46


 1571              	.LVL116:
 641:src/menu.c    ****       len = item*32 + (32-len)/2;
 1572              		.loc 1 641 7 is_stmt 1 view .LVU438
 1573              		.loc 1 641 26 is_stmt 0 view .LVU439
 1574 0070 C0F12000 		rsb	r0, r0, #32
 1575              	.LVL117:
 1576              		.loc 1 641 31 view .LVU440
 1577 0074 00EBD070 		add	r0, r0, r0, lsr #31
 1578              	.LVL118:
 642:src/menu.c    ****       if (len<0) len = 0;
 1579              		.loc 1 642 7 is_stmt 1 view .LVU441
 641:src/menu.c    ****       len = item*32 + (32-len)/2;
 1580              		.loc 1 641 11 is_stmt 0 view .LVU442
 1581 0078 04EB6001 		add	r1, r4, r0, asr #1
 1582              	.LVL119:
 641:src/menu.c    ****       len = item*32 + (32-len)/2;
 1583              		.loc 1 641 11 view .LVU443
 1584 007c C729     		cmp	r1, #199
 1585 007e A8BF     		it	ge
 1586 0080 C721     		movge	r1, #199
 1587              	.LVL120:
 643:src/menu.c    ****       if (len>199) len = 199;
 644:src/menu.c    ****       set_menu_label ( Ref.keys[item].shifted_label, 0, len, 1 );
 1588              		.loc 1 644 7 is_stmt 1 view .LVU444
 1589 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1590              	.LVL121:
 1591              		.loc 1 644 7 is_stmt 0 view .LVU445
 1592 0086 3846     		mov	r0, r7
 1593 0088 2034     		adds	r4, r4, #32
 1594 008a 0122     		movs	r2, #1
 1595 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1596              	.LVL122:
 631:src/menu.c    ****     /*
 1597              		.loc 1 631 32 is_stmt 1 view .LVU446
 631:src/menu.c    ****     /*
 1598              		.loc 1 631 22 view .LVU447
 631:src/menu.c    ****     /*
 1599              		.loc 1 631 3 is_stmt 0 view .LVU448
 1600 0090 C02C     		cmp	r4, #192
 1601 0092 06F12006 		add	r6, r6, #32
 1602 0096 D7D1     		bne	.L151
 1603 0098 1E4E     		ldr	r6, .L167+8
 1604              	.LBE91:
 1605              	.LBB92:
 1606              	.LBB93:
 645:src/menu.c    ****   }
 646:src/menu.c    **** 
 647:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 648:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 649:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 650:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 651:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1607              		.loc 1 651 2 view .LVU449
 1608 009a DFF87090 		ldr	r9, .L167
 1609 009e C5F1040A 		rsb	r10, r5, #4
 1610 00a2 06F5C47B 		add	fp, r6, #392
 1611              	.LBE93:
ARM GAS  /tmp/ccrLsn8H.s 			page 47


 1612              	.LBE92:
 1613              	.LBB95:
 631:src/menu.c    ****     /*
 1614              		.loc 1 631 3 view .LVU450
 1615 00a6 771E     		subs	r7, r6, #1
 1616              	.LBE95:
 1617              	.LBB96:
 1618              	.LBB94:
 1619              		.loc 1 651 2 view .LVU451
 1620 00a8 4FF0FF08 		mov	r8, #255
 1621              	.L152:
 1622              	.LVL123:
 648:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1623              		.loc 1 648 23 is_stmt 1 view .LVU452
 1624 00ac 0AEB0705 		add	r5, r10, r7
 648:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1625              		.loc 1 648 14 is_stmt 0 view .LVU453
 1626 00b0 0024     		movs	r4, #0
 1627              	.LVL124:
 1628              	.L155:
 649:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1629              		.loc 1 649 7 is_stmt 1 view .LVU454
 1630              		.loc 1 651 2 view .LVU455
 649:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1631              		.loc 1 649 22 is_stmt 0 view .LVU456
 1632 00b2 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 649:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1633              		.loc 1 649 40 view .LVU457
 1634 00b6 2241     		asrs	r2, r2, r4
 1635              		.loc 1 651 2 view .LVU458
 1636 00b8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1637 00bc 0323     		movs	r3, #3
 649:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1638              		.loc 1 649 10 view .LVU459
 1639 00be 12F0010F 		tst	r2, #1
 1640              		.loc 1 651 2 view .LVU460
 1641 00c2 01F1E901 		add	r1, r1, #233
 1642 00c6 1A46     		mov	r2, r3
 1643 00c8 2846     		mov	r0, r5
 649:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1644              		.loc 1 649 10 view .LVU461
 1645 00ca 02D0     		beq	.L153
 1646              		.loc 1 651 2 view .LVU462
 1647 00cc CDF80080 		str	r8, [sp]
 1648 00d0 C847     		blx	r9
 1649              	.LVL125:
 1650              	.L153:
 652:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1651              		.loc 1 652 7 is_stmt 1 view .LVU463
 653:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 654:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1652              		.loc 1 654 2 view .LVU464
 652:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1653              		.loc 1 652 22 is_stmt 0 view .LVU465
 1654 00d2 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 652:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1655              		.loc 1 652 40 view .LVU466
ARM GAS  /tmp/ccrLsn8H.s 			page 48


 1656 00d4 2241     		asrs	r2, r2, r4
 1657              		.loc 1 654 2 view .LVU467
 1658 00d6 A4EB8401 		sub	r1, r4, r4, lsl #2
 1659 00da 0323     		movs	r3, #3
 652:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1660              		.loc 1 652 10 view .LVU468
 1661 00dc 12F0010F 		tst	r2, #1
 1662              		.loc 1 654 2 view .LVU469
 1663 00e0 01F1D001 		add	r1, r1, #208
 1664 00e4 1A46     		mov	r2, r3
 1665 00e6 04F10104 		add	r4, r4, #1
 1666              	.LVL126:
 1667              		.loc 1 654 2 view .LVU470
 1668 00ea 2846     		mov	r0, r5
 652:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1669              		.loc 1 652 10 view .LVU471
 1670 00ec 02D0     		beq	.L154
 1671              		.loc 1 654 2 view .LVU472
 1672 00ee CDF80080 		str	r8, [sp]
 1673 00f2 C847     		blx	r9
 1674              	.LVL127:
 1675              	.L154:
 648:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1676              		.loc 1 648 32 is_stmt 1 discriminator 2 view .LVU473
 648:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1677              		.loc 1 648 23 discriminator 2 view .LVU474
 648:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1678              		.loc 1 648 5 is_stmt 0 discriminator 2 view .LVU475
 1679 00f4 062C     		cmp	r4, #6
 1680 00f6 DCD1     		bne	.L155
 1681              	.LBE94:
 647:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1682              		.loc 1 647 32 is_stmt 1 discriminator 2 view .LVU476
 647:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1683              		.loc 1 647 21 discriminator 2 view .LVU477
 1684 00f8 0236     		adds	r6, r6, #2
 647:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1685              		.loc 1 647 3 is_stmt 0 discriminator 2 view .LVU478
 1686 00fa B345     		cmp	fp, r6
 1687 00fc 07F10207 		add	r7, r7, #2
 1688 0100 D4D1     		bne	.L152
 1689              	.LBE96:
 655:src/menu.c    ****     }
 656:src/menu.c    ****   }
 657:src/menu.c    **** }
 1690              		.loc 1 657 1 view .LVU479
 1691 0102 03B0     		add	sp, sp, #12
 1692              		.cfi_def_cfa_offset 52
 1693              		@ sp needed
 1694 0104 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1695              		.cfi_restore 14
 1696              		.cfi_restore 11
 1697              		.cfi_restore 10
 1698              		.cfi_restore 9
 1699              		.cfi_restore 8
 1700              		.cfi_restore 7
 1701              		.cfi_restore 6
ARM GAS  /tmp/ccrLsn8H.s 			page 49


 1702              		.cfi_restore 5
 1703              		.cfi_restore 4
 1704              		.cfi_def_cfa_offset 16
 1705              	.LVL128:
 1706              		.loc 1 657 1 view .LVU480
 1707 0108 04B0     		add	sp, sp, #16
 1708              		.cfi_def_cfa_offset 0
 1709 010a 7047     		bx	lr
 1710              	.L168:
 1711              		.align	2
 1712              	.L167:
 1713 010c 3D020008 		.word	134218301
 1714 0110 00000000 		.word	.LANCHOR0
 1715 0114 01000000 		.word	.LANCHOR0+1
 1716              		.cfi_endproc
 1717              	.LFE16:
 1719              		.section	.text.display_current_menu,"ax",%progbits
 1720              		.align	1
 1721              		.p2align 2,,3
 1722              		.global	display_current_menu
 1723              		.syntax unified
 1724              		.thumb
 1725              		.thumb_func
 1726              		.fpu fpv4-sp-d16
 1728              	display_current_menu:
 1729              	.LFB11:
 162:src/menu.c    ****   display_menu (get_current_menu_ref());
 1730              		.loc 1 162 30 is_stmt 1 view -0
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 208
 1733              		@ frame_needed = 0, uses_anonymous_args = 0
 163:src/menu.c    **** }
 1734              		.loc 1 163 3 view .LVU482
 162:src/menu.c    ****   display_menu (get_current_menu_ref());
 1735              		.loc 1 162 30 is_stmt 0 view .LVU483
 1736 0000 10B5     		push	{r4, lr}
 1737              		.cfi_def_cfa_offset 8
 1738              		.cfi_offset 4, -8
 1739              		.cfi_offset 14, -4
 1740 0002 E4B0     		sub	sp, sp, #400
 1741              		.cfi_def_cfa_offset 408
 163:src/menu.c    **** }
 1742              		.loc 1 163 3 view .LVU484
 1743 0004 30AC     		add	r4, sp, #192
 1744 0006 2046     		mov	r0, r4
 1745 0008 FFF7FEFF 		bl	get_current_menu_ref
 1746              	.LVL129:
 1747 000c 34A9     		add	r1, sp, #208
 1748 000e C022     		movs	r2, #192
 1749 0010 6846     		mov	r0, sp
 1750 0012 FFF7FEFF 		bl	memcpy
 1751              	.LVL130:
 1752 0016 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1753 001a FFF7FEFF 		bl	display_menu
 1754              	.LVL131:
 164:src/menu.c    **** 
 1755              		.loc 1 164 1 view .LVU485
ARM GAS  /tmp/ccrLsn8H.s 			page 50


 1756 001e 64B0     		add	sp, sp, #400
 1757              		.cfi_def_cfa_offset 8
 1758              		@ sp needed
 1759 0020 10BD     		pop	{r4, pc}
 1760              		.cfi_endproc
 1761              	.LFE11:
 1763 0022 00BF     		.section	.text.all_menu_dots,"ax",%progbits
 1764              		.align	1
 1765              		.p2align 2,,3
 1766              		.global	all_menu_dots
 1767              		.syntax unified
 1768              		.thumb
 1769              		.thumb_func
 1770              		.fpu fpv4-sp-d16
 1772              	all_menu_dots:
 1773              	.LFB17:
 658:src/menu.c    **** 
 659:src/menu.c    **** void all_menu_dots () {
 1774              		.loc 1 659 23 is_stmt 1 view -0
 1775              		.cfi_startproc
 1776              		@ args = 0, pretend = 0, frame = 0
 1777              		@ frame_needed = 0, uses_anonymous_args = 0
 660:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1778              		.loc 1 660 3 view .LVU487
 1779              	.LBB97:
 1780              		.loc 1 660 8 view .LVU488
 1781              	.LVL132:
 1782              		.loc 1 660 21 view .LVU489
 1783              	.LBE97:
 659:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1784              		.loc 1 659 23 is_stmt 0 view .LVU490
 1785 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1786              		.cfi_def_cfa_offset 20
 1787              		.cfi_offset 4, -20
 1788              		.cfi_offset 5, -16
 1789              		.cfi_offset 6, -12
 1790              		.cfi_offset 7, -8
 1791              		.cfi_offset 14, -4
 1792              	.LBB101:
 1793              	.LBB98:
 661:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 662:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1794              		.loc 1 662 2 view .LVU491
 1795 0002 0D4E     		ldr	r6, .L177
 1796              	.LBE98:
 1797              	.LBE101:
 659:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1798              		.loc 1 659 23 view .LVU492
 1799 0004 83B0     		sub	sp, sp, #12
 1800              		.cfi_def_cfa_offset 32
 659:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1801              		.loc 1 659 23 view .LVU493
 1802 0006 0025     		movs	r5, #0
 1803              	.LBB102:
 1804              	.LBB99:
 1805              		.loc 1 662 2 view .LVU494
 1806 0008 FF27     		movs	r7, #255
ARM GAS  /tmp/ccrLsn8H.s 			page 51


 1807              	.LVL133:
 1808              	.L172:
 661:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1809              		.loc 1 661 23 is_stmt 1 view .LVU495
 1810              	.LBE99:
 1811              	.LBE102:
 659:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1812              		.loc 1 659 23 is_stmt 0 view .LVU496
 1813 000a E924     		movs	r4, #233
 1814              	.LVL134:
 1815              	.L173:
 1816              	.LBB103:
 1817              	.LBB100:
 1818              		.loc 1 662 2 is_stmt 1 discriminator 3 view .LVU497
 1819 000c 0323     		movs	r3, #3
 1820 000e 1A46     		mov	r2, r3
 1821 0010 2146     		mov	r1, r4
 1822 0012 2846     		mov	r0, r5
 1823 0014 0097     		str	r7, [sp]
 1824 0016 B047     		blx	r6
 1825              	.LVL135:
 663:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1826              		.loc 1 663 2 discriminator 3 view .LVU498
 1827 0018 0323     		movs	r3, #3
 1828 001a A4F11901 		sub	r1, r4, #25
 1829 001e 0097     		str	r7, [sp]
 1830 0020 1A46     		mov	r2, r3
 1831 0022 2846     		mov	r0, r5
 1832 0024 033C     		subs	r4, r4, #3
 1833 0026 B047     		blx	r6
 1834              	.LVL136:
 661:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1835              		.loc 1 661 32 discriminator 3 view .LVU499
 661:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1836              		.loc 1 661 23 discriminator 3 view .LVU500
 661:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1837              		.loc 1 661 5 is_stmt 0 discriminator 3 view .LVU501
 1838 0028 D72C     		cmp	r4, #215
 1839 002a EFD1     		bne	.L173
 1840              	.LBE100:
 660:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1841              		.loc 1 660 32 is_stmt 1 discriminator 2 view .LVU502
 660:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1842              		.loc 1 660 21 discriminator 2 view .LVU503
 1843 002c 0235     		adds	r5, r5, #2
 660:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1844              		.loc 1 660 3 is_stmt 0 discriminator 2 view .LVU504
 1845 002e B5F5C87F 		cmp	r5, #400
 1846 0032 EAD1     		bne	.L172
 1847              	.LBE103:
 664:src/menu.c    ****     }
 665:src/menu.c    ****   }
 666:src/menu.c    **** }  
 1848              		.loc 1 666 1 view .LVU505
 1849 0034 03B0     		add	sp, sp, #12
 1850              		.cfi_def_cfa_offset 20
 1851              		@ sp needed
ARM GAS  /tmp/ccrLsn8H.s 			page 52


 1852 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1853              	.L178:
 1854              		.align	2
 1855              	.L177:
 1856 0038 3D020008 		.word	134218301
 1857              		.cfi_endproc
 1858              	.LFE17:
 1860              		.section	.text.umen_store,"ax",%progbits
 1861              		.align	1
 1862              		.p2align 2,,3
 1863              		.global	umen_store
 1864              		.syntax unified
 1865              		.thumb
 1866              		.thumb_func
 1867              		.fpu fpv4-sp-d16
 1869              	umen_store:
 1870              	.LVL137:
 1871              	.LFB20:
 667:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1);
 668:src/menu.c    **** 
 669:src/menu.c    **** void build_user_menu(void){
 670:src/menu.c    ****   // find the label 'MNU'
 671:src/menu.c    ****    const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 672:src/menu.c    ****    build_user_menu_from_program (lbl);
 673:src/menu.c    **** }
 674:src/menu.c    **** 
 675:src/menu.c    **** void build_user_menu_from_program(int lbl)
 676:src/menu.c    **** {
 677:src/menu.c    ****   // find the label 'MNU'
 678:src/menu.c    ****   // const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 679:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 680:src/menu.c    ****   int i=0;
 681:src/menu.c    ****   s_opcode op;
 682:src/menu.c    ****   opcode opc;
 683:src/menu.c    ****   char buf1[16];
 684:src/menu.c    ****   char *p = buf1;
 685:src/menu.c    ****   char c;
 686:src/menu.c    ****   int finished = 0;
 687:src/menu.c    **** 
 688:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 689:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 690:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 691:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 692:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 693:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 694:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 695:src/menu.c    ****   }
 696:src/menu.c    ****   while (pc && i < 12) {
 697:src/menu.c    **** 
 698:src/menu.c    ****     pc = do_inc(pc, 0);
 699:src/menu.c    ****     opc = getprog(pc);
 700:src/menu.c    ****     op = (s_opcode) opc;
 701:src/menu.c    **** 
 702:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 703:src/menu.c    ****       break;
 704:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 705:src/menu.c    ****       if (i==4) {
ARM GAS  /tmp/ccrLsn8H.s 			page 53


 706:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 707:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 708:src/menu.c    ****       }
 709:src/menu.c    ****       else if (i==5) {
 710:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 711:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 712:src/menu.c    ****       }
 713:src/menu.c    ****       i += 1;
 714:src/menu.c    ****       continue;
 715:src/menu.c    ****     }
 716:src/menu.c    **** 
 717:src/menu.c    ****     if (isDBL(opc) && (opDBL(opc) == DBL_ALPHA)) { // is it double alpha?
 718:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 719:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 720:src/menu.c    **** 	i++;
 721:src/menu.c    ****     	p = buf1;
 722:src/menu.c    **** 	finished = 0;
 723:src/menu.c    ****       } // ..and start reading the new alpha
 724:src/menu.c    ****       *p++ = opc & 0xff; // character 1
 725:src/menu.c    ****       c = (opc >> 16) & 0xff;
 726:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 727:src/menu.c    **** 	*p++ = c;
 728:src/menu.c    **** 	c = opc>>24;
 729:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 730:src/menu.c    **** 	  *p++ = c;
 731:src/menu.c    ****       }
 732:src/menu.c    ****       *p = '\0'; // no ++: next character can overwrite the 0.
 733:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 734:src/menu.c    **** 	finished = 1;
 735:src/menu.c    ****       }
 736:src/menu.c    ****     }
 737:src/menu.c    ****     else { // Not a DBL_ALPHA op - the usual case
 738:src/menu.c    ****       if ( p == buf1 ) { // no alpha label to use
 739:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 740:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 741:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 742:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 743:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 744:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 745:src/menu.c    **** 	  }
 746:src/menu.c    **** 	  else {
 747:src/menu.c    **** 	    prt_umen(opc, buf1); // display rarg with argument
 748:src/menu.c    **** 	  }
 749:src/menu.c    **** 	}
 750:src/menu.c    **** 	else {
 751:src/menu.c    **** 	  prt_umen(opc, buf1); // display non-rarg thing
 752:src/menu.c    **** 	}
 753:src/menu.c    ****       }
 754:src/menu.c    ****       else { // there is an alpha label to use, so reset
 755:src/menu.c    **** 	p = buf1;
 756:src/menu.c    **** 	finished = 0;
 757:src/menu.c    ****       }
 758:src/menu.c    ****       umen_store (i, opc, buf1);
 759:src/menu.c    ****       i++;
 760:src/menu.c    ****     }
 761:src/menu.c    ****   }
 762:src/menu.c    **** }
ARM GAS  /tmp/ccrLsn8H.s 			page 54


 763:src/menu.c    **** 
 764:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1) {
 1872              		.loc 1 764 49 is_stmt 1 view -0
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 0
 1875              		@ frame_needed = 0, uses_anonymous_args = 0
 765:src/menu.c    **** #pragma GCC diagnostic push
 766:src/menu.c    **** #pragma GCC diagnostic ignored "-Wstringop-truncation"
 767:src/menu.c    ****     if (i<6) {
 1876              		.loc 1 767 5 view .LVU507
 1877              		.loc 1 767 8 is_stmt 0 view .LVU508
 1878 0000 0528     		cmp	r0, #5
 764:src/menu.c    **** #pragma GCC diagnostic push
 1879              		.loc 1 764 49 view .LVU509
 1880 0002 70B5     		push	{r4, r5, r6, lr}
 1881              		.cfi_def_cfa_offset 16
 1882              		.cfi_offset 4, -16
 1883              		.cfi_offset 5, -12
 1884              		.cfi_offset 6, -8
 1885              		.cfi_offset 14, -4
 764:src/menu.c    **** #pragma GCC diagnostic push
 1886              		.loc 1 764 49 view .LVU510
 1887 0004 0D46     		mov	r5, r1
 1888 0006 0446     		mov	r4, r0
 1889 0008 1146     		mov	r1, r2
 1890              	.LVL138:
 1891              		.loc 1 767 8 view .LVU511
 1892 000a 0FDC     		bgt	.L180
 1893              	.LBB109:
 768:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1894              		.loc 1 768 7 is_stmt 1 view .LVU512
 1895              		.loc 1 768 31 is_stmt 0 view .LVU513
 1896 000c 104E     		ldr	r6, .L183
 1897 000e 0130     		adds	r0, r0, #1
 1898              	.LVL139:
 769:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1899              		.loc 1 769 42 view .LVU514
 1900 0010 06EB4414 		add	r4, r6, r4, lsl #5
 1901              	.LVL140:
 768:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1902              		.loc 1 768 7 view .LVU515
 1903 0014 0722     		movs	r2, #7
 1904              	.LVL141:
 768:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1905              		.loc 1 768 7 view .LVU516
 1906 0016 06EB4010 		add	r0, r6, r0, lsl #5
 1907              	.LVL142:
 768:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1908              		.loc 1 768 7 view .LVU517
 1909 001a FFF7FEFF 		bl	strncpy
 1910              	.LVL143:
 1911              		.loc 1 769 7 is_stmt 1 view .LVU518
 1912              		.loc 1 769 42 is_stmt 0 view .LVU519
 1913 001e 0022     		movs	r2, #0
 770:src/menu.c    ****       UserMenu.keys[i].unshifted = (struct _ndmap) {K_OP, opc};
 1914              		.loc 1 770 34 view .LVU520
 1915 0020 3423     		movs	r3, #52
ARM GAS  /tmp/ccrLsn8H.s 			page 55


 769:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1916              		.loc 1 769 42 view .LVU521
 1917 0022 84F82720 		strb	r2, [r4, #39]
 1918              		.loc 1 770 7 is_stmt 1 view .LVU522
 1919              		.loc 1 770 34 is_stmt 0 view .LVU523
 1920 0026 2374     		strb	r3, [r4, #16]
 1921 0028 6561     		str	r5, [r4, #20]
 1922              	.LBE109:
 771:src/menu.c    ****     }
 772:src/menu.c    ****     else {
 773:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 774:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 775:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 776:src/menu.c    ****     }
 777:src/menu.c    **** #pragma GCC diagnostic pop
 778:src/menu.c    **** }  
 1923              		.loc 1 778 1 view .LVU524
 1924 002a 70BD     		pop	{r4, r5, r6, pc}
 1925              	.LVL144:
 1926              	.L180:
 1927              	.LBB110:
 1928              	.LBI110:
 764:src/menu.c    **** #pragma GCC diagnostic push
 1929              		.loc 1 764 6 is_stmt 1 view .LVU525
 1930              	.LBB111:
 1931              	.LBB112:
 773:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1932              		.loc 1 773 7 view .LVU526
 773:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1933              		.loc 1 773 30 is_stmt 0 view .LVU527
 1934 002c 841F     		subs	r4, r0, #6
 773:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1935              		.loc 1 773 33 view .LVU528
 1936 002e 084E     		ldr	r6, .L183
 1937 0030 6401     		lsls	r4, r4, #5
 1938 0032 04F12800 		add	r0, r4, #40
 1939              	.LVL145:
 773:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1940              		.loc 1 773 7 view .LVU529
 1941 0036 0722     		movs	r2, #7
 774:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1942              		.loc 1 774 42 view .LVU530
 1943 0038 3444     		add	r4, r4, r6
 773:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1944              		.loc 1 773 7 view .LVU531
 1945 003a 3044     		add	r0, r0, r6
 1946 003c FFF7FEFF 		bl	strncpy
 1947              	.LVL146:
 774:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1948              		.loc 1 774 7 is_stmt 1 view .LVU532
 774:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1949              		.loc 1 774 42 is_stmt 0 view .LVU533
 1950 0040 0022     		movs	r2, #0
 775:src/menu.c    ****     }
 1951              		.loc 1 775 34 view .LVU534
 1952 0042 3423     		movs	r3, #52
 774:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
ARM GAS  /tmp/ccrLsn8H.s 			page 56


 1953              		.loc 1 774 42 view .LVU535
 1954 0044 84F82F20 		strb	r2, [r4, #47]
 775:src/menu.c    ****     }
 1955              		.loc 1 775 7 is_stmt 1 view .LVU536
 1956              	.LVL147:
 775:src/menu.c    ****     }
 1957              		.loc 1 775 34 is_stmt 0 view .LVU537
 1958 0048 2376     		strb	r3, [r4, #24]
 1959 004a E561     		str	r5, [r4, #28]
 1960              	.LBE112:
 1961              	.LBE111:
 1962              	.LBE110:
 1963              		.loc 1 778 1 view .LVU538
 1964 004c 70BD     		pop	{r4, r5, r6, pc}
 1965              	.LVL148:
 1966              	.L184:
 1967              		.loc 1 778 1 view .LVU539
 1968 004e 00BF     		.align	2
 1969              	.L183:
 1970 0050 00000000 		.word	.LANCHOR4
 1971              		.cfi_endproc
 1972              	.LFE20:
 1974              		.section	.text.build_user_menu_from_program,"ax",%progbits
 1975              		.align	1
 1976              		.p2align 2,,3
 1977              		.global	build_user_menu_from_program
 1978              		.syntax unified
 1979              		.thumb
 1980              		.thumb_func
 1981              		.fpu fpv4-sp-d16
 1983              	build_user_menu_from_program:
 1984              	.LVL149:
 1985              	.LFB19:
 676:src/menu.c    ****   // find the label 'MNU'
 1986              		.loc 1 676 1 is_stmt 1 view -0
 1987              		.cfi_startproc
 1988              		@ args = 0, pretend = 0, frame = 16
 1989              		@ frame_needed = 0, uses_anonymous_args = 0
 679:src/menu.c    ****   int i=0;
 1990              		.loc 1 679 3 view .LVU541
 676:src/menu.c    ****   // find the label 'MNU'
 1991              		.loc 1 676 1 is_stmt 0 view .LVU542
 1992 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1993              		.cfi_def_cfa_offset 36
 1994              		.cfi_offset 4, -36
 1995              		.cfi_offset 5, -32
 1996              		.cfi_offset 6, -28
 1997              		.cfi_offset 7, -24
 1998              		.cfi_offset 8, -20
 1999              		.cfi_offset 9, -16
 2000              		.cfi_offset 10, -12
 2001              		.cfi_offset 11, -8
 2002              		.cfi_offset 14, -4
 679:src/menu.c    ****   int i=0;
 2003              		.loc 1 679 21 view .LVU543
 2004 0004 0021     		movs	r1, #0
 676:src/menu.c    ****   // find the label 'MNU'
ARM GAS  /tmp/ccrLsn8H.s 			page 57


 2005              		.loc 1 676 1 view .LVU544
 2006 0006 85B0     		sub	sp, sp, #20
 2007              		.cfi_def_cfa_offset 56
 679:src/menu.c    ****   int i=0;
 2008              		.loc 1 679 21 view .LVU545
 2009 0008 FFF7FEFF 		bl	findmultilbl
 2010              	.LVL150:
 679:src/menu.c    ****   int i=0;
 2011              		.loc 1 679 21 view .LVU546
 2012 000c 5C4B     		ldr	r3, .L236
 2013 000e 0546     		mov	r5, r0
 2014              	.LVL151:
 680:src/menu.c    ****   s_opcode op;
 2015              		.loc 1 680 3 is_stmt 1 view .LVU547
 681:src/menu.c    ****   opcode opc;
 2016              		.loc 1 681 3 view .LVU548
 682:src/menu.c    ****   char buf1[16];
 2017              		.loc 1 682 3 view .LVU549
 683:src/menu.c    ****   char *p = buf1;
 2018              		.loc 1 683 3 view .LVU550
 684:src/menu.c    ****   char c;
 2019              		.loc 1 684 3 view .LVU551
 685:src/menu.c    ****   int finished = 0;
 2020              		.loc 1 685 3 view .LVU552
 686:src/menu.c    **** 
 2021              		.loc 1 686 3 view .LVU553
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2022              		.loc 1 688 3 view .LVU554
 2023              	.LBB113:
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2024              		.loc 1 688 8 view .LVU555
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2025              		.loc 1 688 19 view .LVU556
 689:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2026              		.loc 1 689 43 is_stmt 0 view .LVU557
 2027 0010 0022     		movs	r2, #0
 2028 0012 03F1C000 		add	r0, r3, #192
 2029              	.LVL152:
 691:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2030              		.loc 1 691 42 view .LVU558
 2031 0016 2E21     		movs	r1, #46
 2032              	.LVL153:
 2033              	.L186:
 689:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2034              		.loc 1 689 7 is_stmt 1 discriminator 3 view .LVU559
 689:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2035              		.loc 1 689 43 is_stmt 0 discriminator 3 view .LVU560
 2036 0018 83F82020 		strb	r2, [r3, #32]
 690:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 2037              		.loc 1 690 7 is_stmt 1 discriminator 3 view .LVU561
 690:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 2038              		.loc 1 690 40 is_stmt 0 discriminator 3 view .LVU562
 2039 001c 5A61     		str	r2, [r3, #20]
 691:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2040              		.loc 1 691 7 is_stmt 1 discriminator 3 view .LVU563
 691:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2041              		.loc 1 691 42 is_stmt 0 discriminator 3 view .LVU564
ARM GAS  /tmp/ccrLsn8H.s 			page 58


 2042 001e 1974     		strb	r1, [r3, #16]
 692:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 2043              		.loc 1 692 7 is_stmt 1 discriminator 3 view .LVU565
 692:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 2044              		.loc 1 692 41 is_stmt 0 discriminator 3 view .LVU566
 2045 0020 83F82820 		strb	r2, [r3, #40]
 693:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 2046              		.loc 1 693 7 is_stmt 1 discriminator 3 view .LVU567
 693:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 2047              		.loc 1 693 38 is_stmt 0 discriminator 3 view .LVU568
 2048 0024 DA61     		str	r2, [r3, #28]
 694:src/menu.c    ****   }
 2049              		.loc 1 694 7 is_stmt 1 discriminator 3 view .LVU569
 694:src/menu.c    ****   }
 2050              		.loc 1 694 40 is_stmt 0 discriminator 3 view .LVU570
 2051 0026 1976     		strb	r1, [r3, #24]
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2052              		.loc 1 688 24 is_stmt 1 discriminator 3 view .LVU571
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2053              		.loc 1 688 19 discriminator 3 view .LVU572
 2054 0028 2033     		adds	r3, r3, #32
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2055              		.loc 1 688 3 is_stmt 0 discriminator 3 view .LVU573
 2056 002a 8342     		cmp	r3, r0
 2057 002c F4D1     		bne	.L186
 688:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2058              		.loc 1 688 3 discriminator 3 view .LVU574
 2059              	.LBE113:
 696:src/menu.c    **** 
 2060              		.loc 1 696 9 is_stmt 1 view .LVU575
 2061 002e 65B3     		cbz	r5, .L185
 2062              	.LBB114:
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2063              		.loc 1 710 29 is_stmt 0 view .LVU576
 2064 0030 DFF86891 		ldr	r9, .L236+28
 2065              	.LBE114:
 686:src/menu.c    **** 
 2066              		.loc 1 686 7 view .LVU577
 2067 0034 4FF00008 		mov	r8, #0
 684:src/menu.c    ****   char c;
 2068              		.loc 1 684 9 view .LVU578
 2069 0038 6E46     		mov	r6, sp
 2070              	.LBB115:
 707:src/menu.c    ****       }
 2071              		.loc 1 707 2 view .LVU579
 2072 003a A9F1100A 		sub	r10, r9, #16
 2073              	.LBE115:
 680:src/menu.c    ****   s_opcode op;
 2074              		.loc 1 680 7 view .LVU580
 2075 003e C346     		mov	fp, r8
 684:src/menu.c    ****   char c;
 2076              		.loc 1 684 9 view .LVU581
 2077 0040 3746     		mov	r7, r6
 2078              	.LVL154:
 2079              	.L187:
 698:src/menu.c    ****     opc = getprog(pc);
 2080              		.loc 1 698 5 is_stmt 1 view .LVU582
ARM GAS  /tmp/ccrLsn8H.s 			page 59


 698:src/menu.c    ****     opc = getprog(pc);
 2081              		.loc 1 698 10 is_stmt 0 view .LVU583
 2082 0042 2846     		mov	r0, r5
 2083 0044 0021     		movs	r1, #0
 2084 0046 FFF7FEFF 		bl	do_inc
 2085              	.LVL155:
 2086 004a 0546     		mov	r5, r0
 2087              	.LVL156:
 699:src/menu.c    ****     op = (s_opcode) opc;
 2088              		.loc 1 699 5 is_stmt 1 view .LVU584
 699:src/menu.c    ****     op = (s_opcode) opc;
 2089              		.loc 1 699 11 is_stmt 0 view .LVU585
 2090 004c FFF7FEFF 		bl	getprog
 2091              	.LVL157:
 700:src/menu.c    **** 
 2092              		.loc 1 700 8 view .LVU586
 2093 0050 83B2     		uxth	r3, r0
 702:src/menu.c    ****       break;
 2094              		.loc 1 702 8 view .LVU587
 2095 0052 B3F59D7F 		cmp	r3, #314
 699:src/menu.c    ****     op = (s_opcode) opc;
 2096              		.loc 1 699 11 view .LVU588
 2097 0056 0446     		mov	r4, r0
 2098              	.LVL158:
 700:src/menu.c    **** 
 2099              		.loc 1 700 5 is_stmt 1 view .LVU589
 702:src/menu.c    ****       break;
 2100              		.loc 1 702 5 view .LVU590
 702:src/menu.c    ****       break;
 2101              		.loc 1 702 8 is_stmt 0 view .LVU591
 2102 0058 17D0     		beq	.L185
 704:src/menu.c    ****       if (i==4) {
 2103              		.loc 1 704 5 is_stmt 1 view .LVU592
 704:src/menu.c    ****       if (i==4) {
 2104              		.loc 1 704 8 is_stmt 0 view .LVU593
 2105 005a B3F5807F 		cmp	r3, #256
 2106 005e 43D0     		beq	.L228
 717:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2107              		.loc 1 717 5 is_stmt 1 view .LVU594
 717:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2108              		.loc 1 717 9 is_stmt 0 view .LVU595
 2109 0060 00F47042 		and	r2, r0, #61440
 717:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2110              		.loc 1 717 8 view .LVU596
 2111 0064 B2F5704F 		cmp	r2, #61440
 2112 0068 12D0     		beq	.L229
 2113              	.L193:
 738:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2114              		.loc 1 738 7 is_stmt 1 view .LVU597
 738:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2115              		.loc 1 738 10 is_stmt 0 view .LVU598
 2116 006a B742     		cmp	r7, r6
 2117 006c 26D0     		beq	.L230
 756:src/menu.c    ****       }
 2118              		.loc 1 756 11 view .LVU599
 2119 006e 4FF00008 		mov	r8, #0
 2120              	.LVL159:
ARM GAS  /tmp/ccrLsn8H.s 			page 60


 2121              	.L199:
 758:src/menu.c    ****       i++;
 2122              		.loc 1 758 7 is_stmt 1 view .LVU600
 2123 0072 5846     		mov	r0, fp
 2124 0074 2146     		mov	r1, r4
 2125 0076 3246     		mov	r2, r6
 2126 0078 FFF7FEFF 		bl	umen_store
 2127              	.LVL160:
 759:src/menu.c    ****     }
 2128              		.loc 1 759 7 view .LVU601
 759:src/menu.c    ****     }
 2129              		.loc 1 759 8 is_stmt 0 view .LVU602
 2130 007c 0BF1010B 		add	fp, fp, #1
 2131              	.LVL161:
 759:src/menu.c    ****     }
 2132              		.loc 1 759 8 view .LVU603
 2133 0080 3746     		mov	r7, r6
 2134              	.LVL162:
 2135              	.L192:
 696:src/menu.c    **** 
 2136              		.loc 1 696 9 is_stmt 1 view .LVU604
 2137 0082 15B1     		cbz	r5, .L185
 696:src/menu.c    **** 
 2138              		.loc 1 696 13 is_stmt 0 discriminator 1 view .LVU605
 2139 0084 BBF10C0F 		cmp	fp, #12
 2140 0088 DBD1     		bne	.L187
 2141              	.LVL163:
 2142              	.L185:
 762:src/menu.c    **** 
 2143              		.loc 1 762 1 view .LVU606
 2144 008a 05B0     		add	sp, sp, #20
 2145              		.cfi_remember_state
 2146              		.cfi_def_cfa_offset 36
 2147              		@ sp needed
 2148 008c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2149              	.LVL164:
 2150              	.L229:
 2151              		.cfi_restore_state
 717:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2152              		.loc 1 717 24 discriminator 1 view .LVU607
 2153 0090 C0F30321 		ubfx	r1, r0, #8, #4
 717:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2154              		.loc 1 717 20 discriminator 1 view .LVU608
 2155 0094 0A29     		cmp	r1, #10
 2156 0096 E8D1     		bne	.L193
 718:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2157              		.loc 1 718 7 is_stmt 1 view .LVU609
 718:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2158              		.loc 1 718 10 is_stmt 0 view .LVU610
 2159 0098 B8F1000F 		cmp	r8, #0
 2160 009c 40D1     		bne	.L194
 718:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2161              		.loc 1 718 29 discriminator 1 view .LVU611
 2162 009e BB1B     		subs	r3, r7, r6
 2163              	.LVL165:
 718:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2164              		.loc 1 718 24 discriminator 1 view .LVU612
ARM GAS  /tmp/ccrLsn8H.s 			page 61


 2165 00a0 062B     		cmp	r3, #6
 2166 00a2 3DD0     		beq	.L194
 2167              	.LVL166:
 724:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2168              		.loc 1 724 7 is_stmt 1 view .LVU613
 726:src/menu.c    **** 	*p++ = c;
 2169              		.loc 1 726 10 is_stmt 0 view .LVU614
 2170 00a4 14F47F0F 		tst	r4, #16711680
 724:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2171              		.loc 1 724 12 view .LVU615
 2172 00a8 3C70     		strb	r4, [r7]
 725:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2173              		.loc 1 725 7 is_stmt 1 view .LVU616
 725:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2174              		.loc 1 725 9 is_stmt 0 view .LVU617
 2175 00aa C4F30743 		ubfx	r3, r4, #16, #8
 2176              	.LVL167:
 726:src/menu.c    **** 	*p++ = c;
 2177              		.loc 1 726 7 is_stmt 1 view .LVU618
 726:src/menu.c    **** 	*p++ = c;
 2178              		.loc 1 726 10 is_stmt 0 view .LVU619
 2179 00ae 24D1     		bne	.L231
 2180              	.LVL168:
 2181              	.L196:
 724:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2182              		.loc 1 724 9 view .LVU620
 2183 00b0 0137     		adds	r7, r7, #1
 2184              	.LVL169:
 2185              	.L198:
 732:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2186              		.loc 1 732 7 is_stmt 1 view .LVU621
 732:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2187              		.loc 1 732 10 is_stmt 0 view .LVU622
 2188 00b2 0023     		movs	r3, #0
 2189 00b4 3B70     		strb	r3, [r7]
 733:src/menu.c    **** 	finished = 1;
 2190              		.loc 1 733 7 is_stmt 1 view .LVU623
 734:src/menu.c    ****       }
 2191              		.loc 1 734 11 is_stmt 0 view .LVU624
 2192 00b6 4FF00108 		mov	r8, #1
 2193 00ba E2E7     		b	.L192
 2194              	.LVL170:
 2195              	.L230:
 739:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2196              		.loc 1 739 2 is_stmt 1 view .LVU625
 2197 00bc A0B2     		uxth	r0, r4
 2198              	.LVL171:
 739:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2199              		.loc 1 739 5 is_stmt 0 view .LVU626
 2200 00be 72B1     		cbz	r2, .L200
 739:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2201              		.loc 1 739 6 discriminator 1 view .LVU627
 2202 00c0 B2F5704F 		cmp	r2, #61440
 2203 00c4 0BD0     		beq	.L200
 2204              	.LBB116:
 740:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2205              		.loc 1 740 4 is_stmt 1 view .LVU628
ARM GAS  /tmp/ccrLsn8H.s 			page 62


 740:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2206              		.loc 1 740 26 is_stmt 0 view .LVU629
 2207 00c6 1B0A     		lsrs	r3, r3, #8
 2208              	.LVL172:
 740:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2209              		.loc 1 740 26 view .LVU630
 2210 00c8 203B     		subs	r3, r3, #32
 2211 00ca DBB2     		uxtb	r3, r3
 2212              	.LVL173:
 741:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2213              		.loc 1 741 4 is_stmt 1 view .LVU631
 741:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2214              		.loc 1 741 7 is_stmt 0 view .LVU632
 2215 00cc 242B     		cmp	r3, #36
 2216 00ce 06D0     		beq	.L200
 741:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2217              		.loc 1 741 28 discriminator 1 view .LVU633
 2218 00d0 6C2B     		cmp	r3, #108
 2219 00d2 04D0     		beq	.L200
 742:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 2220              		.loc 1 742 9 view .LVU634
 2221 00d4 012B     		cmp	r3, #1
 2222 00d6 02D9     		bls	.L200
 743:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2223              		.loc 1 743 9 view .LVU635
 2224 00d8 10F0FF0F 		tst	r0, #255
 2225 00dc 4BD0     		beq	.L232
 2226              	.LVL174:
 2227              	.L200:
 743:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2228              		.loc 1 743 9 view .LVU636
 2229              	.LBE116:
 751:src/menu.c    **** 	}
 2230              		.loc 1 751 4 is_stmt 1 view .LVU637
 2231 00de 3146     		mov	r1, r6
 2232 00e0 2046     		mov	r0, r4
 2233 00e2 FFF7FEFF 		bl	prt_umen
 2234              	.LVL175:
 2235 00e6 C4E7     		b	.L199
 2236              	.LVL176:
 2237              	.L228:
 705:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2238              		.loc 1 705 7 view .LVU638
 705:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2239              		.loc 1 705 10 is_stmt 0 view .LVU639
 2240 00e8 BBF1040F 		cmp	fp, #4
 2241 00ec 28D0     		beq	.L233
 709:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2242              		.loc 1 709 12 is_stmt 1 view .LVU640
 709:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2243              		.loc 1 709 15 is_stmt 0 view .LVU641
 2244 00ee BBF1050F 		cmp	fp, #5
 2245 00f2 32D0     		beq	.L234
 2246              	.LVL177:
 2247              	.L191:
 713:src/menu.c    ****       continue;
 2248              		.loc 1 713 7 is_stmt 1 view .LVU642
ARM GAS  /tmp/ccrLsn8H.s 			page 63


 713:src/menu.c    ****       continue;
 2249              		.loc 1 713 9 is_stmt 0 view .LVU643
 2250 00f4 0BF1010B 		add	fp, fp, #1
 2251              	.LVL178:
 714:src/menu.c    ****     }
 2252              		.loc 1 714 7 is_stmt 1 view .LVU644
 2253 00f8 C3E7     		b	.L192
 2254              	.LVL179:
 2255              	.L231:
 727:src/menu.c    **** 	c = opc>>24;
 2256              		.loc 1 727 2 view .LVU645
 727:src/menu.c    **** 	c = opc>>24;
 2257              		.loc 1 727 7 is_stmt 0 view .LVU646
 2258 00fa 7B70     		strb	r3, [r7, #1]
 728:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2259              		.loc 1 728 2 is_stmt 1 view .LVU647
 729:src/menu.c    **** 	  *p++ = c;
 2260              		.loc 1 729 5 is_stmt 0 view .LVU648
 2261 00fc 230E     		lsrs	r3, r4, #24
 2262              	.LVL180:
 728:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2263              		.loc 1 728 4 view .LVU649
 2264 00fe 4FEA1461 		lsr	r1, r4, #24
 2265              	.LVL181:
 729:src/menu.c    **** 	  *p++ = c;
 2266              		.loc 1 729 2 is_stmt 1 view .LVU650
 729:src/menu.c    **** 	  *p++ = c;
 2267              		.loc 1 729 5 is_stmt 0 view .LVU651
 2268 0102 36D0     		beq	.L235
 730:src/menu.c    ****       }
 2269              		.loc 1 730 4 is_stmt 1 view .LVU652
 730:src/menu.c    ****       }
 2270              		.loc 1 730 6 is_stmt 0 view .LVU653
 2271 0104 FB1C     		adds	r3, r7, #3
 2272              	.LVL182:
 733:src/menu.c    **** 	finished = 1;
 2273              		.loc 1 733 26 view .LVU654
 2274 0106 A3EB0608 		sub	r8, r3, r6
 733:src/menu.c    **** 	finished = 1;
 2275              		.loc 1 733 21 view .LVU655
 2276 010a A8F10608 		sub	r8, r8, #6
 732:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2277              		.loc 1 732 10 view .LVU656
 2278 010e 0022     		movs	r2, #0
 733:src/menu.c    **** 	finished = 1;
 2279              		.loc 1 733 21 view .LVU657
 2280 0110 B8FA88F8 		clz	r8, r8
 730:src/menu.c    ****       }
 2281              		.loc 1 730 9 view .LVU658
 2282 0114 B970     		strb	r1, [r7, #2]
 732:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2283              		.loc 1 732 7 is_stmt 1 view .LVU659
 732:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2284              		.loc 1 732 10 is_stmt 0 view .LVU660
 2285 0116 FA70     		strb	r2, [r7, #3]
 733:src/menu.c    **** 	finished = 1;
 2286              		.loc 1 733 7 is_stmt 1 view .LVU661
ARM GAS  /tmp/ccrLsn8H.s 			page 64


 733:src/menu.c    **** 	finished = 1;
 2287              		.loc 1 733 21 is_stmt 0 view .LVU662
 2288 0118 4FEA5818 		lsr	r8, r8, #5
 730:src/menu.c    ****       }
 2289              		.loc 1 730 6 view .LVU663
 2290 011c 1F46     		mov	r7, r3
 2291 011e B0E7     		b	.L192
 2292              	.LVL183:
 2293              	.L194:
 719:src/menu.c    **** 	i++;
 2294              		.loc 1 719 2 is_stmt 1 view .LVU664
 2295 0120 5846     		mov	r0, fp
 2296              	.LVL184:
 719:src/menu.c    **** 	i++;
 2297              		.loc 1 719 2 is_stmt 0 view .LVU665
 2298 0122 3246     		mov	r2, r6
 2299 0124 4FF48071 		mov	r1, #256
 721:src/menu.c    **** 	finished = 0;
 2300              		.loc 1 721 8 view .LVU666
 2301 0128 3746     		mov	r7, r6
 2302              	.LVL185:
 719:src/menu.c    **** 	i++;
 2303              		.loc 1 719 2 view .LVU667
 2304 012a FFF7FEFF 		bl	umen_store
 2305              	.LVL186:
 720:src/menu.c    ****     	p = buf1;
 2306              		.loc 1 720 2 is_stmt 1 view .LVU668
 726:src/menu.c    **** 	*p++ = c;
 2307              		.loc 1 726 10 is_stmt 0 view .LVU669
 2308 012e 14F47F0F 		tst	r4, #16711680
 720:src/menu.c    ****     	p = buf1;
 2309              		.loc 1 720 3 view .LVU670
 2310 0132 0BF1010B 		add	fp, fp, #1
 2311              	.LVL187:
 721:src/menu.c    **** 	finished = 0;
 2312              		.loc 1 721 6 is_stmt 1 view .LVU671
 722:src/menu.c    ****       } // ..and start reading the new alpha
 2313              		.loc 1 722 2 view .LVU672
 724:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2314              		.loc 1 724 7 view .LVU673
 724:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2315              		.loc 1 724 12 is_stmt 0 view .LVU674
 2316 0136 3C70     		strb	r4, [r7]
 725:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2317              		.loc 1 725 7 is_stmt 1 view .LVU675
 725:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2318              		.loc 1 725 9 is_stmt 0 view .LVU676
 2319 0138 C4F30743 		ubfx	r3, r4, #16, #8
 2320              	.LVL188:
 726:src/menu.c    **** 	*p++ = c;
 2321              		.loc 1 726 7 is_stmt 1 view .LVU677
 726:src/menu.c    **** 	*p++ = c;
 2322              		.loc 1 726 10 is_stmt 0 view .LVU678
 2323 013c B8D0     		beq	.L196
 2324              	.LVL189:
 726:src/menu.c    **** 	*p++ = c;
 2325              		.loc 1 726 10 view .LVU679
ARM GAS  /tmp/ccrLsn8H.s 			page 65


 2326 013e DCE7     		b	.L231
 2327              	.LVL190:
 2328              	.L233:
 2329              	.LBB117:
 706:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2330              		.loc 1 706 2 is_stmt 1 view .LVU680
 706:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2331              		.loc 1 706 29 is_stmt 0 view .LVU681
 2332 0140 104B     		ldr	r3, .L236+4
 2333              	.LVL191:
 707:src/menu.c    ****       }
 2334              		.loc 1 707 2 view .LVU682
 2335 0142 114C     		ldr	r4, .L236+8
 706:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2336              		.loc 1 706 29 view .LVU683
 2337 0144 93E80300 		ldm	r3, {r0, r1}
 2338              	.LVL192:
 706:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2339              		.loc 1 706 29 view .LVU684
 2340 0148 104B     		ldr	r3, .L236+12
 707:src/menu.c    ****       }
 2341              		.loc 1 707 2 view .LVU685
 2342 014a 0522     		movs	r2, #5
 706:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2343              		.loc 1 706 29 view .LVU686
 2344 014c 83E80300 		stm	r3, {r0, r1}
 707:src/menu.c    ****       }
 2345              		.loc 1 707 2 is_stmt 1 view .LVU687
 2346 0150 2168     		ldr	r1, [r4]
 2347 0152 5046     		mov	r0, r10
 2348 0154 FFF7FEFF 		bl	strncpy
 2349              	.LVL193:
 2350              	.LBE117:
 2351 0158 CCE7     		b	.L191
 2352              	.LVL194:
 2353              	.L234:
 2354              	.LBB118:
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2355              		.loc 1 710 2 view .LVU688
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2356              		.loc 1 710 29 is_stmt 0 view .LVU689
 2357 015a 0D4B     		ldr	r3, .L236+16
 2358              	.LVL195:
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2359              		.loc 1 710 29 view .LVU690
 2360 015c 93E80300 		ldm	r3, {r0, r1}
 2361              	.LVL196:
 711:src/menu.c    ****       }
 2362              		.loc 1 711 2 view .LVU691
 2363 0160 0C4B     		ldr	r3, .L236+20
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2364              		.loc 1 710 29 view .LVU692
 2365 0162 89E80300 		stm	r9, {r0, r1}
 711:src/menu.c    ****       }
 2366              		.loc 1 711 2 is_stmt 1 view .LVU693
 2367 0166 5A46     		mov	r2, fp
 2368 0168 1968     		ldr	r1, [r3]
ARM GAS  /tmp/ccrLsn8H.s 			page 66


 2369 016a 0B48     		ldr	r0, .L236+24
 2370 016c FFF7FEFF 		bl	strncpy
 2371              	.LVL197:
 2372 0170 C0E7     		b	.L191
 2373              	.LVL198:
 2374              	.L235:
 711:src/menu.c    ****       }
 2375              		.loc 1 711 2 is_stmt 0 view .LVU694
 2376              	.LBE118:
 727:src/menu.c    **** 	c = opc>>24;
 2377              		.loc 1 727 4 view .LVU695
 2378 0172 0237     		adds	r7, r7, #2
 2379              	.LVL199:
 727:src/menu.c    **** 	c = opc>>24;
 2380              		.loc 1 727 4 view .LVU696
 2381 0174 9DE7     		b	.L198
 2382              	.LVL200:
 2383              	.L232:
 2384              	.LBB119:
 744:src/menu.c    **** 	  }
 2385              		.loc 1 744 6 is_stmt 1 view .LVU697
 2386 0176 3146     		mov	r1, r6
 2387 0178 FFF7FEFF 		bl	catcmd
 2388              	.LVL201:
 744:src/menu.c    **** 	  }
 2389              		.loc 1 744 6 is_stmt 0 view .LVU698
 2390 017c 79E7     		b	.L199
 2391              	.L237:
 2392 017e 00BF     		.align	2
 2393              	.L236:
 2394 0180 00000000 		.word	.LANCHOR4
 2395 0184 00000000 		.word	.LANCHOR5
 2396 0188 00000000 		.word	.LANCHOR6
 2397 018c 90000000 		.word	.LANCHOR4+144
 2398 0190 08000000 		.word	.LANCHOR5+8
 2399 0194 00000000 		.word	.LANCHOR7
 2400 0198 C0000000 		.word	.LANCHOR4+192
 2401 019c B0000000 		.word	.LANCHOR4+176
 2402              	.LBE119:
 2403              		.cfi_endproc
 2404              	.LFE19:
 2406              		.section	.text.build_user_menu,"ax",%progbits
 2407              		.align	1
 2408              		.p2align 2,,3
 2409              		.global	build_user_menu
 2410              		.syntax unified
 2411              		.thumb
 2412              		.thumb_func
 2413              		.fpu fpv4-sp-d16
 2415              	build_user_menu:
 2416              	.LFB18:
 669:src/menu.c    ****   // find the label 'MNU'
 2417              		.loc 1 669 27 is_stmt 1 view -0
 2418              		.cfi_startproc
 2419              		@ args = 0, pretend = 0, frame = 0
 2420              		@ frame_needed = 0, uses_anonymous_args = 0
 2421              		@ link register save eliminated.
ARM GAS  /tmp/ccrLsn8H.s 			page 67


 671:src/menu.c    ****    build_user_menu_from_program (lbl);
 2422              		.loc 1 671 4 view .LVU700
 2423              	.LVL202:
 672:src/menu.c    **** }
 2424              		.loc 1 672 4 view .LVU701
 2425 0000 0148     		ldr	r0, .L239
 2426 0002 FFF7FEBF 		b	build_user_menu_from_program
 2427              	.LVL203:
 2428              	.L240:
 2429 0006 00BF     		.align	2
 2430              	.L239:
 2431 0008 4DF04E55 		.word	1431236685
 2432              		.cfi_endproc
 2433              	.LFE18:
 2435              		.section	.text.shutdown,"ax",%progbits
 2436              		.align	1
 2437              		.p2align 2,,3
 2438              		.global	shutdown
 2439              		.syntax unified
 2440              		.thumb
 2441              		.thumb_func
 2442              		.fpu fpv4-sp-d16
 2444              	shutdown:
 2445              	.LFB22:
 2446              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
ARM GAS  /tmp/ccrLsn8H.s 			page 68


  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #ifdef INCLUDE_STOPWATCH
  39:src/console.c **** #include "stopwatch.h"
  40:src/console.c **** #endif
  41:src/console.c **** #undef DM42SAFE
  42:src/console.c **** 
  43:src/console.c **** 
  44:src/console.c **** #ifdef DM42
  45:src/console.c **** 
  46:src/console.c **** #include <menu.c>
  47:src/console.c **** 
  48:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  49:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  50:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  51:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  52:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  53:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  54:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  55:src/console.c **** 
  56:src/console.c **** static struct _ndmap remap (const int c) {
  57:src/console.c **** 
  58:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  59:src/console.c **** 
  60:src/console.c **** #include "keytran.c"
  61:src/console.c **** 
  62:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  63:src/console.c **** 
  64:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  65:src/console.c **** 
  66:src/console.c ****   if (c == 44 ) {
  67:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  68:src/console.c ****     return sshot;
  69:src/console.c ****   }
  70:src/console.c ****   
  71:src/console.c ****   if (Running | Pause) {
  72:src/console.c ****     return mapping_running[c];
  73:src/console.c ****   }
  74:src/console.c **** 
  75:src/console.c ****   struct _menu Ref = get_current_menu_ref();
  76:src/console.c ****   
  77:src/console.c ****   switch (c) {
  78:src/console.c ****   case KEY_F1:
  79:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[0].unshifted;
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
  81:src/console.c ****   case KEY_F2:
  82:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[1].unshifted;
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
  84:src/console.c ****   case KEY_F3:
  85:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[2].unshifted;
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
  87:src/console.c ****   case KEY_F4:
  88:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[3].unshifted;
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
ARM GAS  /tmp/ccrLsn8H.s 			page 69


  90:src/console.c ****   case KEY_F5:
  91:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[4].unshifted;
  92:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
  93:src/console.c ****   case KEY_F6:
  94:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[5].unshifted;
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
  96:src/console.c ****   }
  97:src/console.c **** 
  98:src/console.c ****   if ( get_alpha_state() ) {
  99:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 100:src/console.c ****       switch (cur_shift()) { 
 101:src/console.c ****       case SHIFT_N:
 102:src/console.c **** 	return mapping_none[c]; // N -> F
 103:src/console.c **** 	break;
 104:src/console.c ****       case SHIFT_F:
 105:src/console.c **** 	return mapping_fshift[c]; // F -> G
 106:src/console.c **** 	break;
 107:src/console.c ****       case SHIFT_G:
 108:src/console.c **** 	return h_shift; // G -> H
 109:src/console.c **** 	break;
 110:src/console.c ****       case SHIFT_H:
 111:src/console.c **** 	return h_shift; // H -> N
 112:src/console.c ****       default:
 113:src/console.c **** 	return no_change;
 114:src/console.c ****       }
 115:src/console.c ****     }
 116:src/console.c ****     return mapping_alpha [c];
 117:src/console.c ****   }
 118:src/console.c **** 
 119:src/console.c ****   switch (cur_shift()) {
 120:src/console.c ****   case SHIFT_N:    
 121:src/console.c ****     return mapping_none[c];
 122:src/console.c ****     break;
 123:src/console.c ****   case SHIFT_F:
 124:src/console.c ****     return mapping_fshift[c];
 125:src/console.c ****     break;
 126:src/console.c ****   case SHIFT_G:
 127:src/console.c ****     return mapping_gshift[c];
 128:src/console.c ****     break;
 129:src/console.c ****   default:
 130:src/console.c ****     return no_change;
 131:src/console.c ****   }
 132:src/console.c **** }
 133:src/console.c **** 
 134:src/console.c **** #endif
 135:src/console.c **** 
 136:src/console.c **** void shutdown( void )
 137:src/console.c **** {
 2447              		.loc 2 137 1 view -0
 2448              		.cfi_startproc
 2449              		@ args = 0, pretend = 0, frame = 0
 2450              		@ frame_needed = 0, uses_anonymous_args = 0
 2451              		@ link register save eliminated.
 138:src/console.c **** #ifndef DM42
 139:src/console.c ****   checksum_all();
 140:src/console.c ****   setuptty( 1 );
 141:src/console.c ****   save_statefile( NULL );
ARM GAS  /tmp/ccrLsn8H.s 			page 70


 142:src/console.c ****   exit( 0 );
 143:src/console.c **** #else
 144:src/console.c ****   //  save_ram_file(0);
 145:src/console.c ****   SET_ST(STAT_PGM_END);
 2452              		.loc 2 145 3 view .LVU703
 2453 0000 024A     		ldr	r2, .L242
 2454 0002 1368     		ldr	r3, [r2]
 2455 0004 43F40073 		orr	r3, r3, #512
 2456 0008 1360     		str	r3, [r2]
 146:src/console.c **** #endif
 147:src/console.c **** }
 2457              		.loc 2 147 1 is_stmt 0 view .LVU704
 2458 000a 7047     		bx	lr
 2459              	.L243:
 2460              		.align	2
 2461              	.L242:
 2462 000c 00200010 		.word	268443648
 2463              		.cfi_endproc
 2464              	.LFE22:
 2466              		.section	.text.is_key_pressed,"ax",%progbits
 2467              		.align	1
 2468              		.p2align 2,,3
 2469              		.global	is_key_pressed
 2470              		.syntax unified
 2471              		.thumb
 2472              		.thumb_func
 2473              		.fpu fpv4-sp-d16
 2475              	is_key_pressed:
 2476              	.LFB23:
 148:src/console.c **** 
 149:src/console.c **** 
 150:src/console.c **** /*
 151:src/console.c ****  *  Dummies
 152:src/console.c ****  */
 153:src/console.c **** int is_key_pressed(void) 
 154:src/console.c **** {
 2477              		.loc 2 154 1 is_stmt 1 view -0
 2478              		.cfi_startproc
 2479              		@ args = 0, pretend = 0, frame = 0
 2480              		@ frame_needed = 0, uses_anonymous_args = 0
 155:src/console.c **** #ifdef DM42
 156:src/console.c ****   return !key_empty();
 2481              		.loc 2 156 3 view .LVU706
 154:src/console.c **** #ifdef DM42
 2482              		.loc 2 154 1 is_stmt 0 view .LVU707
 2483 0000 08B5     		push	{r3, lr}
 2484              		.cfi_def_cfa_offset 8
 2485              		.cfi_offset 3, -8
 2486              		.cfi_offset 14, -4
 2487              		.loc 2 156 11 view .LVU708
 2488 0002 034B     		ldr	r3, .L246
 2489 0004 9847     		blx	r3
 2490              	.LVL204:
 157:src/console.c **** #else
 158:src/console.c ****   return 0;
 159:src/console.c **** #endif
 160:src/console.c **** }
ARM GAS  /tmp/ccrLsn8H.s 			page 71


 2491              		.loc 2 160 1 view .LVU709
 2492 0006 B0FA80F0 		clz	r0, r0
 2493 000a 4009     		lsrs	r0, r0, #5
 2494 000c 08BD     		pop	{r3, pc}
 2495              	.L247:
 2496 000e 00BF     		.align	2
 2497              	.L246:
 2498 0010 7D030008 		.word	134218621
 2499              		.cfi_endproc
 2500              	.LFE23:
 2502              		.section	.text.get_key,"ax",%progbits
 2503              		.align	1
 2504              		.p2align 2,,3
 2505              		.global	get_key
 2506              		.syntax unified
 2507              		.thumb
 2508              		.thumb_func
 2509              		.fpu fpv4-sp-d16
 2511              	get_key:
 2512              	.LFB24:
 161:src/console.c **** 
 162:src/console.c **** int get_key(void)
 163:src/console.c **** {
 2513              		.loc 2 163 1 is_stmt 1 view -0
 2514              		.cfi_startproc
 2515              		@ args = 0, pretend = 0, frame = 0
 2516              		@ frame_needed = 0, uses_anonymous_args = 0
 2517              		@ link register save eliminated.
 164:src/console.c ****   #ifdef DM42
 165:src/console.c ****   return key_pop();
 2518              		.loc 2 165 3 view .LVU711
 2519              		.loc 2 165 10 is_stmt 0 view .LVU712
 2520 0000 004B     		ldr	r3, .L249
 2521 0002 1847     		bx	r3
 2522              	.LVL205:
 2523              	.L250:
 2524              		.align	2
 2525              	.L249:
 2526 0004 89030008 		.word	134218633
 2527              		.cfi_endproc
 2528              	.LFE24:
 2530              		.section	.text.put_key,"ax",%progbits
 2531              		.align	1
 2532              		.p2align 2,,3
 2533              		.global	put_key
 2534              		.syntax unified
 2535              		.thumb
 2536              		.thumb_func
 2537              		.fpu fpv4-sp-d16
 2539              	put_key:
 2540              	.LVL206:
 2541              	.LFB25:
 166:src/console.c ****   #else
 167:src/console.c ****   return 0;
 168:src/console.c ****   #endif
 169:src/console.c **** }
 170:src/console.c **** 
ARM GAS  /tmp/ccrLsn8H.s 			page 72


 171:src/console.c **** /*
 172:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 173:src/console.c ****  * 
 174:src/console.c ****  */
 175:src/console.c **** int put_key( int k )
 176:src/console.c **** {
 2542              		.loc 2 176 1 is_stmt 1 view -0
 2543              		.cfi_startproc
 2544              		@ args = 0, pretend = 0, frame = 48
 2545              		@ frame_needed = 0, uses_anonymous_args = 0
 2546              		@ link register save eliminated.
 177:src/console.c ****   #ifdef DM42
 178:src/console.c ****   const char wp34s_to_DM42[] = {
 2547              		.loc 2 178 3 view .LVU714
 176:src/console.c ****   #ifdef DM42
 2548              		.loc 2 176 1 is_stmt 0 view .LVU715
 2549 0000 70B4     		push	{r4, r5, r6}
 2550              		.cfi_def_cfa_offset 12
 2551              		.cfi_offset 4, -12
 2552              		.cfi_offset 5, -8
 2553              		.cfi_offset 6, -4
 2554              		.loc 2 178 14 view .LVU716
 2555 0002 0E4D     		ldr	r5, .L254
 176:src/console.c ****   #ifdef DM42
 2556              		.loc 2 176 1 view .LVU717
 2557 0004 0646     		mov	r6, r0
 2558              		.loc 2 178 14 view .LVU718
 2559 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2560              	.LVL207:
 176:src/console.c ****   #ifdef DM42
 2561              		.loc 2 176 1 view .LVU719
 2562 0008 8DB0     		sub	sp, sp, #52
 2563              		.cfi_def_cfa_offset 64
 2564              		.loc 2 178 14 view .LVU720
 2565 000a 01AC     		add	r4, sp, #4
 2566 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2567 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2568 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2569 0012 95E80700 		ldm	r5, {r0, r1, r2}
 2570 0016 03C4     		stmia	r4!, {r0, r1}
 179:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 180:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 181:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 182:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 183:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 184:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 185:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 186:src/console.c ****   
 187:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 2571              		.loc 2 187 6 view .LVU721
 2572 0018 282E     		cmp	r6, #40
 178:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 2573              		.loc 2 178 14 view .LVU722
 2574 001a 2270     		strb	r2, [r4]
 2575              		.loc 2 187 3 is_stmt 1 view .LVU723
 2576              		.loc 2 187 6 is_stmt 0 view .LVU724
 2577 001c 08D8     		bhi	.L252
ARM GAS  /tmp/ccrLsn8H.s 			page 73


 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2578              		.loc 2 188 5 is_stmt 1 view .LVU725
 2579              		.loc 2 188 36 is_stmt 0 view .LVU726
 2580 001e 0CAB     		add	r3, sp, #48
 2581 0020 3046     		mov	r0, r6
 2582 0022 1844     		add	r0, r0, r3
 2583              		.loc 2 188 12 view .LVU727
 2584 0024 064B     		ldr	r3, .L254+4
 2585 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 189:src/console.c ****   }
 190:src/console.c ****   else {
 191:src/console.c ****     return -1;
 192:src/console.c ****   }
 193:src/console.c ****   #else
 194:src/console.c ****   return k;
 195:src/console.c ****   #endif
 196:src/console.c **** }
 2586              		.loc 2 196 1 view .LVU728
 2587 002a 0DB0     		add	sp, sp, #52
 2588              		.cfi_remember_state
 2589              		.cfi_def_cfa_offset 12
 2590              		@ sp needed
 2591 002c 70BC     		pop	{r4, r5, r6}
 2592              		.cfi_restore 6
 2593              		.cfi_restore 5
 2594              		.cfi_restore 4
 2595              		.cfi_def_cfa_offset 0
 2596              	.LVL208:
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2597              		.loc 2 188 12 view .LVU729
 2598 002e 1847     		bx	r3
 2599              	.LVL209:
 2600              	.L252:
 2601              		.cfi_restore_state
 2602              		.loc 2 196 1 view .LVU730
 2603 0030 4FF0FF30 		mov	r0, #-1
 2604 0034 0DB0     		add	sp, sp, #52
 2605              		.cfi_def_cfa_offset 12
 2606              		@ sp needed
 2607 0036 70BC     		pop	{r4, r5, r6}
 2608              		.cfi_restore 6
 2609              		.cfi_restore 5
 2610              		.cfi_restore 4
 2611              		.cfi_def_cfa_offset 0
 2612              	.LVL210:
 2613              		.loc 2 196 1 view .LVU731
 2614 0038 7047     		bx	lr
 2615              	.L255:
 2616 003a 00BF     		.align	2
 2617              	.L254:
 2618 003c 10000000 		.word	.LANCHOR5+16
 2619 0040 81030008 		.word	134218625
 2620              		.cfi_endproc
 2621              	.LFE25:
 2623              		.section	.text.shift_down,"ax",%progbits
 2624              		.align	1
 2625              		.p2align 2,,3
ARM GAS  /tmp/ccrLsn8H.s 			page 74


 2626              		.global	shift_down
 2627              		.syntax unified
 2628              		.thumb
 2629              		.thumb_func
 2630              		.fpu fpv4-sp-d16
 2632              	shift_down:
 2633              	.LFB26:
 197:src/console.c **** 
 198:src/console.c **** enum shifts shift_down(void)
 199:src/console.c **** {
 2634              		.loc 2 199 1 is_stmt 1 view -0
 2635              		.cfi_startproc
 2636              		@ args = 0, pretend = 0, frame = 0
 2637              		@ frame_needed = 0, uses_anonymous_args = 0
 2638              		@ link register save eliminated.
 200:src/console.c **** 	return SHIFT_N;
 2639              		.loc 2 200 2 view .LVU733
 201:src/console.c **** }
 2640              		.loc 2 201 1 is_stmt 0 view .LVU734
 2641 0000 0020     		movs	r0, #0
 2642 0002 7047     		bx	lr
 2643              		.cfi_endproc
 2644              	.LFE26:
 2646              		.section	.text.start_key_timer,"ax",%progbits
 2647              		.align	1
 2648              		.p2align 2,,3
 2649              		.global	start_key_timer
 2650              		.syntax unified
 2651              		.thumb
 2652              		.thumb_func
 2653              		.fpu fpv4-sp-d16
 2655              	start_key_timer:
 2656              	.LFB27:
 202:src/console.c **** 
 203:src/console.c **** #ifndef DM42   // No serial operations for DM42
 204:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 205:src/console.c **** /*
 206:src/console.c ****  *  Open a COM port for transmission
 207:src/console.c ****  */
 208:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 209:src/console.c **** {
 210:src/console.c **** 	return 0;
 211:src/console.c **** }
 212:src/console.c **** 
 213:src/console.c **** 
 214:src/console.c **** /*
 215:src/console.c ****  *  Close the COM port after transmission is complete
 216:src/console.c ****  */
 217:src/console.c **** extern void close_port( void )
 218:src/console.c **** {
 219:src/console.c **** }
 220:src/console.c **** 
 221:src/console.c **** 
 222:src/console.c **** /*
 223:src/console.c ****  *  Output a single byte to the serial
 224:src/console.c ****  */
 225:src/console.c **** void put_byte( unsigned char byte )
ARM GAS  /tmp/ccrLsn8H.s 			page 75


 226:src/console.c **** {
 227:src/console.c **** 	report_err(ERR_PROG_BAD);
 228:src/console.c **** }
 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Force buffer flush
 233:src/console.c ****  */
 234:src/console.c **** void flush_comm( void )
 235:src/console.c **** {
 236:src/console.c **** }
 237:src/console.c **** 
 238:src/console.c **** #endif
 239:src/console.c **** #endif
 240:src/console.c **** 
 241:src/console.c **** 
 242:src/console.c **** /*
 243:src/console.c ****  *  Main loop
 244:src/console.c ****  */
 245:src/console.c **** #ifdef DM42
 246:src/console.c **** void start_key_timer (void);
 247:src/console.c **** long int keyticks (void);
 248:src/console.c **** void moveto (int line, int x);
 249:src/console.c **** 
 250:src/console.c **** static long int start_ticks;
 251:src/console.c **** 
 252:src/console.c **** void start_key_timer() {
 2657              		.loc 2 252 24 is_stmt 1 view -0
 2658              		.cfi_startproc
 2659              		@ args = 0, pretend = 0, frame = 0
 2660              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/console.c ****     start_ticks = get_rtc_ticks();
 2661              		.loc 2 253 5 view .LVU736
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 2662              		.loc 2 252 24 is_stmt 0 view .LVU737
 2663 0000 08B5     		push	{r3, lr}
 2664              		.cfi_def_cfa_offset 8
 2665              		.cfi_offset 3, -8
 2666              		.cfi_offset 14, -4
 2667              		.loc 2 253 19 view .LVU738
 2668 0002 024B     		ldr	r3, .L259
 2669 0004 9847     		blx	r3
 2670              	.LVL211:
 2671              		.loc 2 253 17 view .LVU739
 2672 0006 024B     		ldr	r3, .L259+4
 2673 0008 1860     		str	r0, [r3]
 254:src/console.c **** }
 2674              		.loc 2 254 1 view .LVU740
 2675 000a 08BD     		pop	{r3, pc}
 2676              	.L260:
 2677              		.align	2
 2678              	.L259:
 2679 000c B9040008 		.word	134218937
 2680 0010 00000000 		.word	.LANCHOR8
 2681              		.cfi_endproc
 2682              	.LFE27:
 2684              		.section	.text.keyticks,"ax",%progbits
ARM GAS  /tmp/ccrLsn8H.s 			page 76


 2685              		.align	1
 2686              		.p2align 2,,3
 2687              		.global	keyticks
 2688              		.syntax unified
 2689              		.thumb
 2690              		.thumb_func
 2691              		.fpu fpv4-sp-d16
 2693              	keyticks:
 2694              	.LFB28:
 255:src/console.c **** 
 256:src/console.c **** long int keyticks () {
 2695              		.loc 2 256 22 is_stmt 1 view -0
 2696              		.cfi_startproc
 2697              		@ args = 0, pretend = 0, frame = 0
 2698              		@ frame_needed = 0, uses_anonymous_args = 0
 257:src/console.c ****   long int i;
 2699              		.loc 2 257 3 view .LVU742
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2700              		.loc 2 258 3 view .LVU743
 256:src/console.c ****   long int i;
 2701              		.loc 2 256 22 is_stmt 0 view .LVU744
 2702 0000 08B5     		push	{r3, lr}
 2703              		.cfi_def_cfa_offset 8
 2704              		.cfi_offset 3, -8
 2705              		.cfi_offset 14, -4
 2706              		.loc 2 258 8 view .LVU745
 2707 0002 054B     		ldr	r3, .L263
 2708 0004 9847     		blx	r3
 2709              	.LVL212:
 259:src/console.c ****   return i >> 8;
 2710              		.loc 2 259 3 is_stmt 1 view .LVU746
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2711              		.loc 2 258 24 is_stmt 0 view .LVU747
 2712 0006 054B     		ldr	r3, .L263+4
 2713 0008 1B68     		ldr	r3, [r3]
 2714 000a C01A     		subs	r0, r0, r3
 2715              	.LVL213:
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2716              		.loc 2 258 38 view .LVU748
 2717 000c 00EB8000 		add	r0, r0, r0, lsl #2
 260:src/console.c **** }
 2718              		.loc 2 260 1 view .LVU749
 2719 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2720 0014 08BD     		pop	{r3, pc}
 2721              	.L264:
 2722 0016 00BF     		.align	2
 2723              	.L263:
 2724 0018 B9040008 		.word	134218937
 2725 001c 00000000 		.word	.LANCHOR8
 2726              		.cfi_endproc
 2727              	.LFE28:
 2729              		.section	.text.moveto,"ax",%progbits
 2730              		.align	1
 2731              		.p2align 2,,3
 2732              		.global	moveto
 2733              		.syntax unified
 2734              		.thumb
ARM GAS  /tmp/ccrLsn8H.s 			page 77


 2735              		.thumb_func
 2736              		.fpu fpv4-sp-d16
 2738              	moveto:
 2739              	.LVL214:
 2740              	.LFB29:
 261:src/console.c **** 
 262:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 263:src/console.c **** char print_string[22];
 264:src/console.c **** int n_p = 0;
 265:src/console.c **** 
 266:src/console.c **** 
 267:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2741              		.loc 2 267 30 is_stmt 1 view -0
 2742              		.cfi_startproc
 2743              		@ args = 0, pretend = 0, frame = 0
 2744              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2745              		.loc 2 268 3 view .LVU751
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2746              		.loc 2 267 30 is_stmt 0 view .LVU752
 2747 0000 70B5     		push	{r4, r5, r6, lr}
 2748              		.cfi_def_cfa_offset 16
 2749              		.cfi_offset 4, -16
 2750              		.cfi_offset 5, -12
 2751              		.cfi_offset 6, -8
 2752              		.cfi_offset 14, -4
 2753              		.loc 2 268 3 view .LVU753
 2754 0002 0A4D     		ldr	r5, .L267
 2755 0004 0A4B     		ldr	r3, .L267+4
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2756              		.loc 2 267 30 view .LVU754
 2757 0006 0246     		mov	r2, r0
 2758 0008 0C46     		mov	r4, r1
 2759              		.loc 2 268 3 view .LVU755
 2760 000a A86B     		ldr	r0, [r5, #56]
 2761              	.LVL215:
 2762              		.loc 2 268 3 view .LVU756
 2763 000c 511E     		subs	r1, r2, #1
 2764              	.LVL216:
 2765              		.loc 2 268 3 view .LVU757
 2766 000e 9847     		blx	r3
 2767              	.LVL217:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2768              		.loc 2 269 3 is_stmt 1 view .LVU758
 2769 0010 A86B     		ldr	r0, [r5, #56]
 2770 0012 084B     		ldr	r3, .L267+8
 2771              		.loc 2 269 33 is_stmt 0 view .LVU759
 2772 0014 0168     		ldr	r1, [r0]
 2773              		.loc 2 269 3 view .LVU760
 2774 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2775              		.loc 2 269 33 view .LVU761
 2776 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2777              		.loc 2 269 43 view .LVU762
 2778 001c 013C     		subs	r4, r4, #1
 2779              	.LVL218:
 2780              		.loc 2 269 40 view .LVU763
 2781 001e 04FB01F1 		mul	r1, r4, r1
ARM GAS  /tmp/ccrLsn8H.s 			page 78


 2782              		.loc 2 269 3 view .LVU764
 2783 0022 1431     		adds	r1, r1, #20
 270:src/console.c **** }
 2784              		.loc 2 270 1 view .LVU765
 2785 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2786              		.cfi_restore 14
 2787              		.cfi_restore 6
 2788              		.cfi_restore 5
 2789              		.cfi_restore 4
 2790              		.cfi_def_cfa_offset 0
 2791              	.LVL219:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2792              		.loc 2 269 3 view .LVU766
 2793 0028 1847     		bx	r3	@ indirect register sibling call
 2794              	.LVL220:
 2795              	.L268:
 2796 002a 00BF     		.align	2
 2797              	.L267:
 2798 002c 00200010 		.word	268443648
 2799 0030 69020008 		.word	134218345
 2800 0034 6D020008 		.word	134218349
 2801              		.cfi_endproc
 2802              	.LFE29:
 2804              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2805              		.align	2
 2806              	.LC15:
 2807 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2807      673A2025 
 2807      34692C25 
 2807      346900
 2808              		.section	.text.print_debug,"ax",%progbits
 2809              		.align	1
 2810              		.p2align 2,,3
 2811              		.global	print_debug
 2812              		.syntax unified
 2813              		.thumb
 2814              		.thumb_func
 2815              		.fpu fpv4-sp-d16
 2817              	print_debug:
 2818              	.LVL221:
 2819              	.LFB30:
 271:src/console.c **** 
 272:src/console.c **** void print_debug (int i, int j) {
 2820              		.loc 2 272 33 is_stmt 1 view -0
 2821              		.cfi_startproc
 2822              		@ args = 0, pretend = 0, frame = 8
 2823              		@ frame_needed = 0, uses_anonymous_args = 0
 273:src/console.c ****   strcpy( print_string, spaces );
 2824              		.loc 2 273 3 view .LVU768
 272:src/console.c ****   strcpy( print_string, spaces );
 2825              		.loc 2 272 33 is_stmt 0 view .LVU769
 2826 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2827              		.cfi_def_cfa_offset 24
 2828              		.cfi_offset 4, -24
 2829              		.cfi_offset 5, -20
 2830              		.cfi_offset 6, -16
 2831              		.cfi_offset 7, -12
ARM GAS  /tmp/ccrLsn8H.s 			page 79


 2832              		.cfi_offset 8, -8
 2833              		.cfi_offset 14, -4
 2834              		.loc 2 273 3 view .LVU770
 2835 0004 174C     		ldr	r4, .L271
 2836 0006 184F     		ldr	r7, .L271+4
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 275:src/console.c ****   moveto (3, 1);
 276:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2837              		.loc 2 276 3 view .LVU771
 2838 0008 184E     		ldr	r6, .L271+8
 2839 000a 194D     		ldr	r5, .L271+12
 277:src/console.c ****   lcd_refresh();
 2840              		.loc 2 277 3 view .LVU772
 2841 000c DFF86C80 		ldr	r8, .L271+24
 272:src/console.c ****   strcpy( print_string, spaces );
 2842              		.loc 2 272 33 view .LVU773
 2843 0010 82B0     		sub	sp, sp, #8
 2844              		.cfi_def_cfa_offset 32
 272:src/console.c ****   strcpy( print_string, spaces );
 2845              		.loc 2 272 33 view .LVU774
 2846 0012 0190     		str	r0, [sp, #4]
 2847 0014 0091     		str	r1, [sp]
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2848              		.loc 2 273 3 view .LVU775
 2849 0016 2046     		mov	r0, r4
 2850              	.LVL222:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2851              		.loc 2 273 3 view .LVU776
 2852 0018 3946     		mov	r1, r7
 2853              	.LVL223:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2854              		.loc 2 273 3 view .LVU777
 2855 001a FFF7FEFF 		bl	strcpy
 2856              	.LVL224:
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2857              		.loc 2 274 3 is_stmt 1 view .LVU778
 2858 001e DDE90032 		ldrd	r3, r2, [sp]
 2859 0022 1449     		ldr	r1, .L271+16
 2860 0024 2046     		mov	r0, r4
 2861 0026 FFF7FEFF 		bl	sprintf
 2862              	.LVL225:
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2863              		.loc 2 275 3 view .LVU779
 2864 002a 0121     		movs	r1, #1
 2865 002c 0320     		movs	r0, #3
 2866 002e FFF7FEFF 		bl	moveto
 2867              	.LVL226:
 276:src/console.c ****   lcd_refresh();
 2868              		.loc 2 276 3 view .LVU780
 2869 0032 2146     		mov	r1, r4
 2870 0034 B06B     		ldr	r0, [r6, #56]
 2871 0036 A847     		blx	r5
 2872              	.LVL227:
 2873              		.loc 2 277 3 view .LVU781
 2874 0038 C047     		blx	r8
 2875              	.LVL228:
 278:src/console.c ****   sys_delay (1000);
ARM GAS  /tmp/ccrLsn8H.s 			page 80


 2876              		.loc 2 278 3 view .LVU782
 2877 003a 0F4B     		ldr	r3, .L271+20
 2878 003c 4FF47A70 		mov	r0, #1000
 2879 0040 9847     		blx	r3
 2880              	.LVL229:
 279:src/console.c ****   /* wait_for_key_press(); */
 280:src/console.c ****   //  key_pop_all();
 281:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 282:src/console.c ****   // key_pop_all();
 283:src/console.c ****   strcpy( print_string, spaces );
 2881              		.loc 2 283 3 view .LVU783
 2882 0042 3946     		mov	r1, r7
 2883 0044 2046     		mov	r0, r4
 2884 0046 FFF7FEFF 		bl	strcpy
 2885              	.LVL230:
 284:src/console.c ****   moveto (3, 1);
 2886              		.loc 2 284 3 view .LVU784
 2887 004a 0121     		movs	r1, #1
 2888 004c 0320     		movs	r0, #3
 2889 004e FFF7FEFF 		bl	moveto
 2890              	.LVL231:
 285:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2891              		.loc 2 285 3 view .LVU785
 2892 0052 B06B     		ldr	r0, [r6, #56]
 2893 0054 2146     		mov	r1, r4
 2894 0056 A847     		blx	r5
 2895              	.LVL232:
 286:src/console.c ****   lcd_refresh();
 2896              		.loc 2 286 3 view .LVU786
 2897 0058 4346     		mov	r3, r8
 287:src/console.c ****   // while (key_empty()<=0);; // wait for release
 288:src/console.c ****   // key_pop_all();
 289:src/console.c **** }
 2898              		.loc 2 289 1 is_stmt 0 view .LVU787
 2899 005a 02B0     		add	sp, sp, #8
 2900              		.cfi_def_cfa_offset 24
 2901              	.LVL233:
 2902              		.loc 2 289 1 view .LVU788
 2903              		@ sp needed
 2904 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2905              		.cfi_restore 14
 2906              		.cfi_restore 8
 2907              		.cfi_restore 7
 2908              		.cfi_restore 6
 2909              		.cfi_restore 5
 2910              		.cfi_restore 4
 2911              		.cfi_def_cfa_offset 0
 2912              	.LVL234:
 286:src/console.c ****   lcd_refresh();
 2913              		.loc 2 286 3 view .LVU789
 2914 0060 1847     		bx	r3	@ indirect register sibling call
 2915              	.LVL235:
 2916              	.L272:
 2917 0062 00BF     		.align	2
 2918              	.L271:
 2919 0064 00000000 		.word	print_string
 2920 0068 00000000 		.word	.LANCHOR9
ARM GAS  /tmp/ccrLsn8H.s 			page 81


 2921 006c 00200010 		.word	268443648
 2922 0070 B1020008 		.word	134218417
 2923 0074 00000000 		.word	.LC15
 2924 0078 05040008 		.word	134218757
 2925 007c 31020008 		.word	134218289
 2926              		.cfi_endproc
 2927              	.LFE30:
 2929              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2930              		.align	2
 2931              	.LC16:
 2932 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2932      692C2531 
 2932      337300
 2933              		.section	.text.print_debug2,"ax",%progbits
 2934              		.align	1
 2935              		.p2align 2,,3
 2936              		.global	print_debug2
 2937              		.syntax unified
 2938              		.thumb
 2939              		.thumb_func
 2940              		.fpu fpv4-sp-d16
 2942              	print_debug2:
 2943              	.LVL236:
 2944              	.LFB31:
 290:src/console.c **** 
 291:src/console.c **** void print_debug2 (int i, char* j) {
 2945              		.loc 2 291 36 is_stmt 1 view -0
 2946              		.cfi_startproc
 2947              		@ args = 0, pretend = 0, frame = 8
 2948              		@ frame_needed = 0, uses_anonymous_args = 0
 292:src/console.c ****   strcpy( print_string, spaces );
 2949              		.loc 2 292 3 view .LVU791
 291:src/console.c ****   strcpy( print_string, spaces );
 2950              		.loc 2 291 36 is_stmt 0 view .LVU792
 2951 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2952              		.cfi_def_cfa_offset 24
 2953              		.cfi_offset 4, -24
 2954              		.cfi_offset 5, -20
 2955              		.cfi_offset 6, -16
 2956              		.cfi_offset 7, -12
 2957              		.cfi_offset 8, -8
 2958              		.cfi_offset 14, -4
 2959              		.loc 2 292 3 view .LVU793
 2960 0004 174C     		ldr	r4, .L275
 2961 0006 184F     		ldr	r7, .L275+4
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 294:src/console.c ****   moveto (3, 1);
 295:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2962              		.loc 2 295 3 view .LVU794
 2963 0008 184E     		ldr	r6, .L275+8
 2964 000a 194D     		ldr	r5, .L275+12
 296:src/console.c ****   lcd_refresh();
 2965              		.loc 2 296 3 view .LVU795
 2966 000c DFF86C80 		ldr	r8, .L275+24
 291:src/console.c ****   strcpy( print_string, spaces );
 2967              		.loc 2 291 36 view .LVU796
 2968 0010 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccrLsn8H.s 			page 82


 2969              		.cfi_def_cfa_offset 32
 291:src/console.c ****   strcpy( print_string, spaces );
 2970              		.loc 2 291 36 view .LVU797
 2971 0012 0190     		str	r0, [sp, #4]
 2972 0014 0091     		str	r1, [sp]
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2973              		.loc 2 292 3 view .LVU798
 2974 0016 2046     		mov	r0, r4
 2975              	.LVL237:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2976              		.loc 2 292 3 view .LVU799
 2977 0018 3946     		mov	r1, r7
 2978              	.LVL238:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2979              		.loc 2 292 3 view .LVU800
 2980 001a FFF7FEFF 		bl	strcpy
 2981              	.LVL239:
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2982              		.loc 2 293 3 is_stmt 1 view .LVU801
 2983 001e DDE90032 		ldrd	r3, r2, [sp]
 2984 0022 1449     		ldr	r1, .L275+16
 2985 0024 2046     		mov	r0, r4
 2986 0026 FFF7FEFF 		bl	sprintf
 2987              	.LVL240:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2988              		.loc 2 294 3 view .LVU802
 2989 002a 0121     		movs	r1, #1
 2990 002c 0320     		movs	r0, #3
 2991 002e FFF7FEFF 		bl	moveto
 2992              	.LVL241:
 295:src/console.c ****   lcd_refresh();
 2993              		.loc 2 295 3 view .LVU803
 2994 0032 2146     		mov	r1, r4
 2995 0034 B06B     		ldr	r0, [r6, #56]
 2996 0036 A847     		blx	r5
 2997              	.LVL242:
 2998              		.loc 2 296 3 view .LVU804
 2999 0038 C047     		blx	r8
 3000              	.LVL243:
 297:src/console.c ****   sys_delay (2500);
 3001              		.loc 2 297 3 view .LVU805
 3002 003a 0F4B     		ldr	r3, .L275+20
 3003 003c 40F6C410 		movw	r0, #2500
 3004 0040 9847     		blx	r3
 3005              	.LVL244:
 298:src/console.c ****   /* wait_for_key_press(); */
 299:src/console.c ****   //  key_pop_all();
 300:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 301:src/console.c ****   // key_pop_all();
 302:src/console.c ****   strcpy( print_string, spaces );
 3006              		.loc 2 302 3 view .LVU806
 3007 0042 3946     		mov	r1, r7
 3008 0044 2046     		mov	r0, r4
 3009 0046 FFF7FEFF 		bl	strcpy
 3010              	.LVL245:
 303:src/console.c ****   moveto (3, 1);
 3011              		.loc 2 303 3 view .LVU807
ARM GAS  /tmp/ccrLsn8H.s 			page 83


 3012 004a 0121     		movs	r1, #1
 3013 004c 0320     		movs	r0, #3
 3014 004e FFF7FEFF 		bl	moveto
 3015              	.LVL246:
 304:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 3016              		.loc 2 304 3 view .LVU808
 3017 0052 B06B     		ldr	r0, [r6, #56]
 3018 0054 2146     		mov	r1, r4
 3019 0056 A847     		blx	r5
 3020              	.LVL247:
 305:src/console.c ****   lcd_refresh();
 3021              		.loc 2 305 3 view .LVU809
 3022 0058 4346     		mov	r3, r8
 306:src/console.c ****   // while (key_empty()<=0);; // wait for release
 307:src/console.c ****   // key_pop_all();
 308:src/console.c **** }
 3023              		.loc 2 308 1 is_stmt 0 view .LVU810
 3024 005a 02B0     		add	sp, sp, #8
 3025              		.cfi_def_cfa_offset 24
 3026              	.LVL248:
 3027              		.loc 2 308 1 view .LVU811
 3028              		@ sp needed
 3029 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3030              		.cfi_restore 14
 3031              		.cfi_restore 8
 3032              		.cfi_restore 7
 3033              		.cfi_restore 6
 3034              		.cfi_restore 5
 3035              		.cfi_restore 4
 3036              		.cfi_def_cfa_offset 0
 3037              	.LVL249:
 305:src/console.c ****   lcd_refresh();
 3038              		.loc 2 305 3 view .LVU812
 3039 0060 1847     		bx	r3	@ indirect register sibling call
 3040              	.LVL250:
 3041              	.L276:
 3042 0062 00BF     		.align	2
 3043              	.L275:
 3044 0064 00000000 		.word	print_string
 3045 0068 00000000 		.word	.LANCHOR9
 3046 006c 00200010 		.word	268443648
 3047 0070 B1020008 		.word	134218417
 3048 0074 00000000 		.word	.LC16
 3049 0078 05040008 		.word	134218757
 3050 007c 31020008 		.word	134218289
 3051              		.cfi_endproc
 3052              	.LFE31:
 3054              		.section	.text.do_now,"ax",%progbits
 3055              		.align	1
 3056              		.p2align 2,,3
 3057              		.global	do_now
 3058              		.syntax unified
 3059              		.thumb
 3060              		.thumb_func
 3061              		.fpu fpv4-sp-d16
 3063              	do_now:
 3064              	.LVL251:
ARM GAS  /tmp/ccrLsn8H.s 			page 84


 3065              	.LFB32:
 309:src/console.c **** 
 310:src/console.c **** void do_now (int key, int shift) { // key and shift are like the output of remapped
 3066              		.loc 2 310 34 is_stmt 1 view -0
 3067              		.cfi_startproc
 3068              		@ args = 0, pretend = 0, frame = 8
 3069              		@ frame_needed = 0, uses_anonymous_args = 0
 3070              		@ link register save eliminated.
 311:src/console.c ****   struct _ndmap temp;
 3071              		.loc 2 311 3 view .LVU814
 312:src/console.c ****   temp.key_34s = key;
 3072              		.loc 2 312 3 view .LVU815
 310:src/console.c ****   struct _ndmap temp;
 3073              		.loc 2 310 34 is_stmt 0 view .LVU816
 3074 0000 82B0     		sub	sp, sp, #8
 3075              		.cfi_def_cfa_offset 8
 313:src/console.c ****   temp.shift = shift;
 314:src/console.c ****   process_keycode_with_shift (temp);
 3076              		.loc 2 314 3 view .LVU817
 3077 0002 02AB     		add	r3, sp, #8
 312:src/console.c ****   temp.shift = shift;
 3078              		.loc 2 312 16 view .LVU818
 3079 0004 8DF80000 		strb	r0, [sp]
 313:src/console.c ****   temp.shift = shift;
 3080              		.loc 2 313 3 is_stmt 1 view .LVU819
 313:src/console.c ****   temp.shift = shift;
 3081              		.loc 2 313 14 is_stmt 0 view .LVU820
 3082 0008 0191     		str	r1, [sp, #4]
 3083              		.loc 2 314 3 is_stmt 1 view .LVU821
 3084 000a 13E90300 		ldmdb	r3, {r0, r1}
 3085              	.LVL252:
 315:src/console.c **** }
 3086              		.loc 2 315 1 is_stmt 0 view .LVU822
 3087 000e 02B0     		add	sp, sp, #8
 3088              		.cfi_def_cfa_offset 0
 3089              		@ sp needed
 314:src/console.c **** }
 3090              		.loc 2 314 3 view .LVU823
 3091 0010 FFF7FEBF 		b	process_keycode_with_shift
 3092              	.LVL253:
 314:src/console.c **** }
 3093              		.loc 2 314 3 view .LVU824
 3094              		.cfi_endproc
 3095              	.LFE32:
 3097              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 3098              		.align	2
 3099              	.LC17:
 3100 0000 2F48454C 		.ascii	"/HELP/wp34c_help.html\000"
 3100      502F7770 
 3100      3334635F 
 3100      68656C70 
 3100      2E68746D 
 3101              		.section	.text.do_multi,"ax",%progbits
 3102              		.align	1
 3103              		.p2align 2,,3
 3104              		.global	do_multi
 3105              		.syntax unified
ARM GAS  /tmp/ccrLsn8H.s 			page 85


 3106              		.thumb
 3107              		.thumb_func
 3108              		.fpu fpv4-sp-d16
 3110              	do_multi:
 3111              	.LVL254:
 3112              	.LFB33:
 316:src/console.c **** 
 317:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 3113              		.loc 2 317 42 is_stmt 1 view -0
 3114              		.cfi_startproc
 3115              		@ args = 0, pretend = 0, frame = 16
 3116              		@ frame_needed = 0, uses_anonymous_args = 0
 3117              		.loc 2 317 42 is_stmt 0 view .LVU826
 3118 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3119              		.cfi_def_cfa_offset 20
 3120              		.cfi_offset 4, -20
 3121              		.cfi_offset 5, -16
 3122              		.cfi_offset 6, -12
 3123              		.cfi_offset 7, -8
 3124              		.cfi_offset 14, -4
 3125 0002 85B0     		sub	sp, sp, #20
 3126              		.cfi_def_cfa_offset 40
 3127              	.LVL255:
 318:src/console.c ****   switch(r.shift) {
 3128              		.loc 2 318 3 is_stmt 1 view .LVU827
 317:src/console.c ****   switch(r.shift) {
 3129              		.loc 2 317 42 is_stmt 0 view .LVU828
 3130 0004 6C46     		mov	r4, sp
 3131 0006 931E     		subs	r3, r2, #2
 3132 0008 84E80600 		stm	r4, {r1, r2}
 3133              	.LVL256:
 317:src/console.c ****   switch(r.shift) {
 3134              		.loc 2 317 42 view .LVU829
 3135 000c 0546     		mov	r5, r0
 3136 000e 0D2B     		cmp	r3, #13
 3137 0010 20D8     		bhi	.L280
 3138 0012 DFE803F0 		tbb	[pc, r3]
 3139              	.L282:
 3140 0016 2C       		.byte	(.L295-.L282)/2
 3141 0017 37       		.byte	(.L294-.L282)/2
 3142 0018 42       		.byte	(.L293-.L282)/2
 3143 0019 4D       		.byte	(.L292-.L282)/2
 3144 001a 58       		.byte	(.L291-.L282)/2
 3145 001b 63       		.byte	(.L290-.L282)/2
 3146 001c 6E       		.byte	(.L289-.L282)/2
 3147 001d 78       		.byte	(.L288-.L282)/2
 3148 001e 83       		.byte	(.L287-.L282)/2
 3149 001f 8D       		.byte	(.L286-.L282)/2
 3150 0020 97       		.byte	(.L285-.L282)/2
 3151 0021 AA       		.byte	(.L284-.L282)/2
 3152 0022 B4       		.byte	(.L283-.L282)/2
 3153 0023 07       		.byte	(.L281-.L282)/2
 3154              		.p2align 1
 3155              	.L281:
 319:src/console.c ****   /* case LASTX: // Last x via RCL L */
 320:src/console.c ****   /*   do_now (K11, 0); // RCL */
 321:src/console.c ****   /*   do_now (K_RELEASE,0); // release */
ARM GAS  /tmp/ccrLsn8H.s 			page 86


 322:src/console.c ****   /*   do_now (K15,0); // TAN key */
 323:src/console.c ****   /*   r.key_34s = K_RELEASE; */
 324:src/console.c ****   /*   r.shift = 0; // set up for release; */
 325:src/console.c ****   /*   break; */
 326:src/console.c ****   case ONSTO: // flash_backup()
 327:src/console.c ****     flash_backup(OP_SAVE);
 328:src/console.c ****     reset_shift();
 329:src/console.c ****     r = no_key;
 330:src/console.c ****     break;
 331:src/console.c ****   case ONRCL: // flash_restore()
 332:src/console.c ****     flash_restore(OP_LOAD);
 333:src/console.c ****     reset_shift();
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
 336:src/console.c ****   case WRLIB: // save library file
 337:src/console.c ****     save_lib_file(1);
 338:src/console.c ****     reset_shift();
 339:src/console.c ****     r = no_key;
 340:src/console.c ****     break;
 341:src/console.c ****   case LLIB: // load library file
 342:src/console.c ****     load_lib_file(1);
 343:src/console.c ****     reset_shift();
 344:src/console.c ****     r = no_key;
 345:src/console.c ****     break;
 346:src/console.c ****   case WRTST: // save state file
 347:src/console.c ****     save_ram_file(1);
 348:src/console.c ****     reset_shift();
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case LDST:
 352:src/console.c ****     load_ram_file(1);
 353:src/console.c ****     reset_shift();
 354:src/console.c ****     r = no_key;
 355:src/console.c ****     break;
 356:src/console.c ****   case LDPRG:
 357:src/console.c ****     load_prog_file();
 358:src/console.c ****     reset_shift();
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case SVPRG:
 362:src/console.c ****     save_prog_file();
 363:src/console.c ****     reset_shift();
 364:src/console.c ****     r = no_key;
 365:src/console.c ****     break;
 366:src/console.c ****   case HELP:
 367:src/console.c ****     run_help_file("/HELP/wp34c_help.html");
 368:src/console.c ****     reset_shift();
 369:src/console.c ****     r = no_key;
 370:src/console.c ****     break;
 371:src/console.c ****   case DOTS:
 372:src/console.c ****     do_all_dots();
 373:src/console.c ****     reset_shift();
 374:src/console.c ****     r = no_key;
 375:src/console.c ****     break;
 376:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 377:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 378:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
ARM GAS  /tmp/ccrLsn8H.s 			page 87


 379:src/console.c ****     r = no_key;
 380:src/console.c ****     break;
 381:src/console.c ****   case DEFMEN:
 382:src/console.c ****     toggle_default_menu();
 383:src/console.c ****     reset_shift();
 384:src/console.c ****     r = no_key;
 385:src/console.c ****     break;
 386:src/console.c ****   case SETUMEN:
 387:src/console.c ****     build_user_menu();
 388:src/console.c ****     reset_shift();
 389:src/console.c ****     r = no_key;;
 390:src/console.c ****     break;
 391:src/console.c ****   case KCPX:
 392:src/console.c ****     if (C_LOCKED) {
 3156              		.loc 2 392 5 is_stmt 1 view .LVU830
 3157              		.loc 2 392 9 is_stmt 0 view .LVU831
 3158 0024 644B     		ldr	r3, .L310
 3159 0026 1B68     		ldr	r3, [r3]
 3160 0028 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 3161              		.loc 2 392 8 view .LVU832
 3162 002c 03F04103 		and	r3, r3, #65
 3163 0030 412B     		cmp	r3, #65
 3164 0032 40F0AF80 		bne	.L297
 393:src/console.c ****       set_menu(M_C_Lock);
 3165              		.loc 2 393 7 is_stmt 1 view .LVU833
 3166              	.LVL257:
 3167              	.LBB120:
 3168              	.LBI120:
 122:src/menu.c    ****   menu_name m = current_menu;
 3169              		.loc 1 122 6 view .LVU834
 3170              	.LBB121:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3171              		.loc 1 123 3 view .LVU835
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3172              		.loc 1 123 13 is_stmt 0 view .LVU836
 3173 0036 614A     		ldr	r2, .L310+4
 3174 0038 92F90030 		ldrsb	r3, [r2]
 3175              	.LVL258:
 124:src/menu.c    ****     current_menu = default_menu;
 3176              		.loc 1 124 3 is_stmt 1 view .LVU837
 124:src/menu.c    ****     current_menu = default_menu;
 3177              		.loc 1 124 6 is_stmt 0 view .LVU838
 3178 003c 112B     		cmp	r3, #17
 3179 003e 00F0B580 		beq	.L309
 127:src/menu.c    ****     current_menu = last_menu;
 3180              		.loc 1 127 8 is_stmt 1 view .LVU839
 131:src/menu.c    ****   }
 3181              		.loc 1 131 5 view .LVU840
 131:src/menu.c    ****   }
 3182              		.loc 1 131 18 is_stmt 0 view .LVU841
 3183 0042 1121     		movs	r1, #17
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3184              		.loc 1 133 6 view .LVU842
 3185 0044 092B     		cmp	r3, #9
 131:src/menu.c    ****   }
 3186              		.loc 1 131 18 view .LVU843
 3187 0046 1170     		strb	r1, [r2]
ARM GAS  /tmp/ccrLsn8H.s 			page 88


 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3188              		.loc 1 133 3 is_stmt 1 view .LVU844
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3189              		.loc 1 133 6 is_stmt 0 view .LVU845
 3190 0048 02D0     		beq	.L300
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3191              		.loc 1 133 23 view .LVU846
 3192 004a 102B     		cmp	r3, #16
 3193 004c 40F0B180 		bne	.L299
 3194              	.L300:
 3195              	.LVL259:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3196              		.loc 1 133 23 view .LVU847
 3197              	.LBE121:
 3198              	.LBE120:
 394:src/console.c ****       reset_shift();
 3199              		.loc 2 394 7 is_stmt 1 view .LVU848
 3200 0050 FFF7FEFF 		bl	reset_shift
 3201              	.LVL260:
 3202              	.L280:
 395:src/console.c ****     }
 396:src/console.c ****     else {
 397:src/console.c ****       do_now (K_CMPLX, 0);
 398:src/console.c ****       do_now (K_RELEASE, 0);
 399:src/console.c ****       r = no_key;
 400:src/console.c ****     }
 401:src/console.c ****   default:
 402:src/console.c ****     r = no_key;
 3203              		.loc 2 402 5 view .LVU849
 3204              		.loc 2 402 7 is_stmt 0 view .LVU850
 3205 0054 5A4B     		ldr	r3, .L310+8
 3206 0056 93E80300 		ldm	r3, {r0, r1}
 3207 005a 84E80300 		stm	r4, {r0, r1}
 3208              	.LVL261:
 3209              	.L296:
 403:src/console.c ****   }
 404:src/console.c ****   return r;
 3210              		.loc 2 404 3 is_stmt 1 view .LVU851
 3211              		.loc 2 404 10 is_stmt 0 view .LVU852
 3212 005e 0191     		str	r1, [sp, #4]
 3213 0060 94E80300 		ldm	r4, {r0, r1}
 3214              	.LVL262:
 3215              		.loc 2 404 10 view .LVU853
 3216 0064 85E80300 		stm	r5, {r0, r1}
 405:src/console.c **** }
 3217              		.loc 2 405 1 view .LVU854
 3218 0068 2846     		mov	r0, r5
 3219 006a 05B0     		add	sp, sp, #20
 3220              		.cfi_remember_state
 3221              		.cfi_def_cfa_offset 20
 3222              		@ sp needed
 3223 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 3224              	.LVL263:
 3225              	.L295:
 3226              		.cfi_restore_state
 327:src/console.c ****     reset_shift();
 3227              		.loc 2 327 5 is_stmt 1 view .LVU855
ARM GAS  /tmp/ccrLsn8H.s 			page 89


 3228 006e AD20     		movs	r0, #173
 3229              	.LVL264:
 327:src/console.c ****     reset_shift();
 3230              		.loc 2 327 5 is_stmt 0 view .LVU856
 3231 0070 FFF7FEFF 		bl	flash_backup
 3232              	.LVL265:
 328:src/console.c ****     r = no_key;
 3233              		.loc 2 328 5 is_stmt 1 view .LVU857
 3234 0074 FFF7FEFF 		bl	reset_shift
 3235              	.LVL266:
 329:src/console.c ****     break;
 3236              		.loc 2 329 5 view .LVU858
 329:src/console.c ****     break;
 3237              		.loc 2 329 7 is_stmt 0 view .LVU859
 3238 0078 514B     		ldr	r3, .L310+8
 3239 007a 93E80300 		ldm	r3, {r0, r1}
 3240 007e 84E80300 		stm	r4, {r0, r1}
 3241              	.LVL267:
 330:src/console.c ****   case ONRCL: // flash_restore()
 3242              		.loc 2 330 5 is_stmt 1 view .LVU860
 3243 0082 ECE7     		b	.L296
 3244              	.LVL268:
 3245              	.L294:
 332:src/console.c ****     reset_shift();
 3246              		.loc 2 332 5 view .LVU861
 3247 0084 AE20     		movs	r0, #174
 3248              	.LVL269:
 332:src/console.c ****     reset_shift();
 3249              		.loc 2 332 5 is_stmt 0 view .LVU862
 3250 0086 FFF7FEFF 		bl	flash_restore
 3251              	.LVL270:
 333:src/console.c ****     r = no_key;
 3252              		.loc 2 333 5 is_stmt 1 view .LVU863
 3253 008a FFF7FEFF 		bl	reset_shift
 3254              	.LVL271:
 334:src/console.c ****     break;
 3255              		.loc 2 334 5 view .LVU864
 334:src/console.c ****     break;
 3256              		.loc 2 334 7 is_stmt 0 view .LVU865
 3257 008e 4C4B     		ldr	r3, .L310+8
 3258 0090 93E80300 		ldm	r3, {r0, r1}
 3259 0094 84E80300 		stm	r4, {r0, r1}
 3260              	.LVL272:
 335:src/console.c ****   case WRLIB: // save library file
 3261              		.loc 2 335 5 is_stmt 1 view .LVU866
 3262 0098 E1E7     		b	.L296
 3263              	.LVL273:
 3264              	.L293:
 337:src/console.c ****     reset_shift();
 3265              		.loc 2 337 5 view .LVU867
 3266 009a 0120     		movs	r0, #1
 3267              	.LVL274:
 337:src/console.c ****     reset_shift();
 3268              		.loc 2 337 5 is_stmt 0 view .LVU868
 3269 009c FFF7FEFF 		bl	save_lib_file
 3270              	.LVL275:
 338:src/console.c ****     r = no_key;
ARM GAS  /tmp/ccrLsn8H.s 			page 90


 3271              		.loc 2 338 5 is_stmt 1 view .LVU869
 3272 00a0 FFF7FEFF 		bl	reset_shift
 3273              	.LVL276:
 339:src/console.c ****     break;
 3274              		.loc 2 339 5 view .LVU870
 339:src/console.c ****     break;
 3275              		.loc 2 339 7 is_stmt 0 view .LVU871
 3276 00a4 464B     		ldr	r3, .L310+8
 3277 00a6 93E80300 		ldm	r3, {r0, r1}
 3278 00aa 84E80300 		stm	r4, {r0, r1}
 3279              	.LVL277:
 340:src/console.c ****   case LLIB: // load library file
 3280              		.loc 2 340 5 is_stmt 1 view .LVU872
 3281 00ae D6E7     		b	.L296
 3282              	.LVL278:
 3283              	.L292:
 342:src/console.c ****     reset_shift();
 3284              		.loc 2 342 5 view .LVU873
 3285 00b0 0120     		movs	r0, #1
 3286              	.LVL279:
 342:src/console.c ****     reset_shift();
 3287              		.loc 2 342 5 is_stmt 0 view .LVU874
 3288 00b2 FFF7FEFF 		bl	load_lib_file
 3289              	.LVL280:
 343:src/console.c ****     r = no_key;
 3290              		.loc 2 343 5 is_stmt 1 view .LVU875
 3291 00b6 FFF7FEFF 		bl	reset_shift
 3292              	.LVL281:
 344:src/console.c ****     break;
 3293              		.loc 2 344 5 view .LVU876
 344:src/console.c ****     break;
 3294              		.loc 2 344 7 is_stmt 0 view .LVU877
 3295 00ba 414B     		ldr	r3, .L310+8
 3296 00bc 93E80300 		ldm	r3, {r0, r1}
 3297 00c0 84E80300 		stm	r4, {r0, r1}
 3298              	.LVL282:
 345:src/console.c ****   case WRTST: // save state file
 3299              		.loc 2 345 5 is_stmt 1 view .LVU878
 3300 00c4 CBE7     		b	.L296
 3301              	.LVL283:
 3302              	.L291:
 347:src/console.c ****     reset_shift();
 3303              		.loc 2 347 5 view .LVU879
 3304 00c6 0120     		movs	r0, #1
 3305              	.LVL284:
 347:src/console.c ****     reset_shift();
 3306              		.loc 2 347 5 is_stmt 0 view .LVU880
 3307 00c8 FFF7FEFF 		bl	save_ram_file
 3308              	.LVL285:
 348:src/console.c ****     r = no_key;
 3309              		.loc 2 348 5 is_stmt 1 view .LVU881
 3310 00cc FFF7FEFF 		bl	reset_shift
 3311              	.LVL286:
 349:src/console.c ****     break;
 3312              		.loc 2 349 5 view .LVU882
 349:src/console.c ****     break;
 3313              		.loc 2 349 7 is_stmt 0 view .LVU883
ARM GAS  /tmp/ccrLsn8H.s 			page 91


 3314 00d0 3B4B     		ldr	r3, .L310+8
 3315 00d2 93E80300 		ldm	r3, {r0, r1}
 3316 00d6 84E80300 		stm	r4, {r0, r1}
 3317              	.LVL287:
 350:src/console.c ****   case LDST:
 3318              		.loc 2 350 5 is_stmt 1 view .LVU884
 3319 00da C0E7     		b	.L296
 3320              	.LVL288:
 3321              	.L290:
 352:src/console.c ****     reset_shift();
 3322              		.loc 2 352 5 view .LVU885
 3323 00dc 0120     		movs	r0, #1
 3324              	.LVL289:
 352:src/console.c ****     reset_shift();
 3325              		.loc 2 352 5 is_stmt 0 view .LVU886
 3326 00de FFF7FEFF 		bl	load_ram_file
 3327              	.LVL290:
 353:src/console.c ****     r = no_key;
 3328              		.loc 2 353 5 is_stmt 1 view .LVU887
 3329 00e2 FFF7FEFF 		bl	reset_shift
 3330              	.LVL291:
 354:src/console.c ****     break;
 3331              		.loc 2 354 5 view .LVU888
 354:src/console.c ****     break;
 3332              		.loc 2 354 7 is_stmt 0 view .LVU889
 3333 00e6 364B     		ldr	r3, .L310+8
 3334 00e8 93E80300 		ldm	r3, {r0, r1}
 3335 00ec 84E80300 		stm	r4, {r0, r1}
 3336              	.LVL292:
 355:src/console.c ****   case LDPRG:
 3337              		.loc 2 355 5 is_stmt 1 view .LVU890
 3338 00f0 B5E7     		b	.L296
 3339              	.LVL293:
 3340              	.L289:
 357:src/console.c ****     reset_shift();
 3341              		.loc 2 357 5 view .LVU891
 3342 00f2 FFF7FEFF 		bl	load_prog_file
 3343              	.LVL294:
 358:src/console.c ****     r = no_key;
 3344              		.loc 2 358 5 view .LVU892
 3345 00f6 FFF7FEFF 		bl	reset_shift
 3346              	.LVL295:
 359:src/console.c ****     break;
 3347              		.loc 2 359 5 view .LVU893
 359:src/console.c ****     break;
 3348              		.loc 2 359 7 is_stmt 0 view .LVU894
 3349 00fa 314B     		ldr	r3, .L310+8
 3350 00fc 93E80300 		ldm	r3, {r0, r1}
 3351 0100 84E80300 		stm	r4, {r0, r1}
 3352              	.LVL296:
 360:src/console.c ****   case SVPRG:
 3353              		.loc 2 360 5 is_stmt 1 view .LVU895
 3354 0104 ABE7     		b	.L296
 3355              	.LVL297:
 3356              	.L288:
 367:src/console.c ****     reset_shift();
 3357              		.loc 2 367 5 view .LVU896
ARM GAS  /tmp/ccrLsn8H.s 			page 92


 3358 0106 2F4B     		ldr	r3, .L310+12
 3359 0108 2F48     		ldr	r0, .L310+16
 3360              	.LVL298:
 367:src/console.c ****     reset_shift();
 3361              		.loc 2 367 5 is_stmt 0 view .LVU897
 3362 010a 9847     		blx	r3
 3363              	.LVL299:
 368:src/console.c ****     r = no_key;
 3364              		.loc 2 368 5 is_stmt 1 view .LVU898
 3365 010c FFF7FEFF 		bl	reset_shift
 3366              	.LVL300:
 369:src/console.c ****     break;
 3367              		.loc 2 369 5 view .LVU899
 369:src/console.c ****     break;
 3368              		.loc 2 369 7 is_stmt 0 view .LVU900
 3369 0110 2B4B     		ldr	r3, .L310+8
 3370 0112 93E80300 		ldm	r3, {r0, r1}
 3371 0116 84E80300 		stm	r4, {r0, r1}
 3372              	.LVL301:
 370:src/console.c ****   case DOTS:
 3373              		.loc 2 370 5 is_stmt 1 view .LVU901
 3374 011a A0E7     		b	.L296
 3375              	.LVL302:
 3376              	.L287:
 362:src/console.c ****     reset_shift();
 3377              		.loc 2 362 5 view .LVU902
 3378 011c FFF7FEFF 		bl	save_prog_file
 3379              	.LVL303:
 363:src/console.c ****     r = no_key;
 3380              		.loc 2 363 5 view .LVU903
 3381 0120 FFF7FEFF 		bl	reset_shift
 3382              	.LVL304:
 364:src/console.c ****     break;
 3383              		.loc 2 364 5 view .LVU904
 364:src/console.c ****     break;
 3384              		.loc 2 364 7 is_stmt 0 view .LVU905
 3385 0124 264B     		ldr	r3, .L310+8
 3386 0126 93E80300 		ldm	r3, {r0, r1}
 3387 012a 84E80300 		stm	r4, {r0, r1}
 3388              	.LVL305:
 365:src/console.c ****   case HELP:
 3389              		.loc 2 365 5 is_stmt 1 view .LVU906
 3390 012e 96E7     		b	.L296
 3391              	.LVL306:
 3392              	.L286:
 372:src/console.c ****     reset_shift();
 3393              		.loc 2 372 5 view .LVU907
 3394 0130 FFF7FEFF 		bl	do_all_dots
 3395              	.LVL307:
 373:src/console.c ****     r = no_key;
 3396              		.loc 2 373 5 view .LVU908
 3397 0134 FFF7FEFF 		bl	reset_shift
 3398              	.LVL308:
 374:src/console.c ****     break;
 3399              		.loc 2 374 5 view .LVU909
 374:src/console.c ****     break;
 3400              		.loc 2 374 7 is_stmt 0 view .LVU910
ARM GAS  /tmp/ccrLsn8H.s 			page 93


 3401 0138 214B     		ldr	r3, .L310+8
 3402 013a 93E80300 		ldm	r3, {r0, r1}
 3403 013e 84E80300 		stm	r4, {r0, r1}
 3404              	.LVL309:
 375:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 3405              		.loc 2 375 5 is_stmt 1 view .LVU911
 3406 0142 8CE7     		b	.L296
 3407              	.LVL310:
 3408              	.L285:
 377:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 3409              		.loc 2 377 5 view .LVU912
 3410              	.LBB123:
 3411              	.LBI123:
 310:src/console.c ****   struct _ndmap temp;
 3412              		.loc 2 310 6 view .LVU913
 3413              	.LBB124:
 311:src/console.c ****   temp.key_34s = key;
 3414              		.loc 2 311 3 view .LVU914
 312:src/console.c ****   temp.shift = shift;
 3415              		.loc 2 312 3 view .LVU915
 312:src/console.c ****   temp.shift = shift;
 3416              		.loc 2 312 16 is_stmt 0 view .LVU916
 3417 0144 6323     		movs	r3, #99
 313:src/console.c ****   process_keycode_with_shift (temp);
 3418              		.loc 2 313 14 view .LVU917
 3419 0146 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3420              		.loc 2 312 16 view .LVU918
 3421 0148 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3422              		.loc 2 313 3 is_stmt 1 view .LVU919
 313:src/console.c ****   process_keycode_with_shift (temp);
 3423              		.loc 2 313 14 is_stmt 0 view .LVU920
 3424 014c 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3425              		.loc 2 314 3 is_stmt 1 view .LVU921
 3426 014e 02AE     		add	r6, sp, #8
 3427 0150 96E80300 		ldm	r6, {r0, r1}
 3428              	.LVL311:
 314:src/console.c **** }
 3429              		.loc 2 314 3 is_stmt 0 view .LVU922
 3430 0154 FFF7FEFF 		bl	process_keycode_with_shift
 3431              	.LVL312:
 314:src/console.c **** }
 3432              		.loc 2 314 3 view .LVU923
 3433              	.LBE124:
 3434              	.LBE123:
 378:src/console.c ****     r = no_key;
 3435              		.loc 2 378 5 is_stmt 1 view .LVU924
 3436              	.LBB125:
 3437              	.LBI125:
 310:src/console.c ****   struct _ndmap temp;
 3438              		.loc 2 310 6 view .LVU925
 3439              	.LBB126:
 311:src/console.c ****   temp.key_34s = key;
 3440              		.loc 2 311 3 view .LVU926
 312:src/console.c ****   temp.shift = shift;
ARM GAS  /tmp/ccrLsn8H.s 			page 94


 3441              		.loc 2 312 3 view .LVU927
 312:src/console.c ****   temp.shift = shift;
 3442              		.loc 2 312 16 is_stmt 0 view .LVU928
 3443 0158 3323     		movs	r3, #51
 3444              	.LVL313:
 3445              	.L308:
 312:src/console.c ****   temp.shift = shift;
 3446              		.loc 2 312 16 view .LVU929
 3447              	.LBE126:
 3448              	.LBE125:
 3449              	.LBB127:
 3450              	.LBB128:
 313:src/console.c ****   process_keycode_with_shift (temp);
 3451              		.loc 2 313 14 view .LVU930
 3452 015a 0397     		str	r7, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 3453              		.loc 2 312 16 view .LVU931
 3454 015c 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3455              		.loc 2 313 3 is_stmt 1 view .LVU932
 314:src/console.c **** }
 3456              		.loc 2 314 3 view .LVU933
 3457 0160 96E80300 		ldm	r6, {r0, r1}
 3458 0164 FFF7FEFF 		bl	process_keycode_with_shift
 3459              	.LVL314:
 3460              	.LBE128:
 3461              	.LBE127:
 399:src/console.c ****     }
 3462              		.loc 2 399 7 view .LVU934
 399:src/console.c ****     }
 3463              		.loc 2 399 7 is_stmt 0 view .LVU935
 3464 0168 74E7     		b	.L280
 3465              	.LVL315:
 3466              	.L284:
 382:src/console.c ****     reset_shift();
 3467              		.loc 2 382 5 is_stmt 1 view .LVU936
 3468 016a FFF7FEFF 		bl	toggle_default_menu
 3469              	.LVL316:
 383:src/console.c ****     r = no_key;
 3470              		.loc 2 383 5 view .LVU937
 3471 016e FFF7FEFF 		bl	reset_shift
 3472              	.LVL317:
 384:src/console.c ****     break;
 3473              		.loc 2 384 5 view .LVU938
 384:src/console.c ****     break;
 3474              		.loc 2 384 7 is_stmt 0 view .LVU939
 3475 0172 134B     		ldr	r3, .L310+8
 3476 0174 93E80300 		ldm	r3, {r0, r1}
 3477 0178 84E80300 		stm	r4, {r0, r1}
 3478              	.LVL318:
 385:src/console.c ****   case SETUMEN:
 3479              		.loc 2 385 5 is_stmt 1 view .LVU940
 3480 017c 6FE7     		b	.L296
 3481              	.LVL319:
 3482              	.L283:
 387:src/console.c ****     reset_shift();
 3483              		.loc 2 387 5 view .LVU941
ARM GAS  /tmp/ccrLsn8H.s 			page 95


 3484              	.LBB130:
 3485              	.LBI130:
 669:src/menu.c    ****   // find the label 'MNU'
 3486              		.loc 1 669 6 view .LVU942
 3487              	.LBB131:
 671:src/menu.c    ****    build_user_menu_from_program (lbl);
 3488              		.loc 1 671 4 view .LVU943
 672:src/menu.c    **** }
 3489              		.loc 1 672 4 view .LVU944
 3490 017e 1348     		ldr	r0, .L310+20
 3491              	.LVL320:
 672:src/menu.c    **** }
 3492              		.loc 1 672 4 is_stmt 0 view .LVU945
 3493 0180 FFF7FEFF 		bl	build_user_menu_from_program
 3494              	.LVL321:
 3495              	.LBE131:
 3496              	.LBE130:
 388:src/console.c ****     r = no_key;;
 3497              		.loc 2 388 5 is_stmt 1 view .LVU946
 3498 0184 FFF7FEFF 		bl	reset_shift
 3499              	.LVL322:
 389:src/console.c ****     break;
 3500              		.loc 2 389 5 view .LVU947
 389:src/console.c ****     break;
 3501              		.loc 2 389 7 is_stmt 0 view .LVU948
 3502 0188 0D4B     		ldr	r3, .L310+8
 3503 018a 93E80300 		ldm	r3, {r0, r1}
 3504 018e 84E80300 		stm	r4, {r0, r1}
 3505              	.LVL323:
 389:src/console.c ****     break;
 3506              		.loc 2 389 16 is_stmt 1 view .LVU949
 390:src/console.c ****   case KCPX:
 3507              		.loc 2 390 5 view .LVU950
 3508 0192 64E7     		b	.L296
 3509              	.LVL324:
 3510              	.L297:
 397:src/console.c ****       do_now (K_RELEASE, 0);
 3511              		.loc 2 397 7 view .LVU951
 3512              	.LBB132:
 3513              	.LBI132:
 310:src/console.c ****   struct _ndmap temp;
 3514              		.loc 2 310 6 view .LVU952
 3515              	.LBB133:
 311:src/console.c ****   temp.key_34s = key;
 3516              		.loc 2 311 3 view .LVU953
 312:src/console.c ****   temp.shift = shift;
 3517              		.loc 2 312 3 view .LVU954
 312:src/console.c ****   temp.shift = shift;
 3518              		.loc 2 312 16 is_stmt 0 view .LVU955
 3519 0194 2D23     		movs	r3, #45
 313:src/console.c ****   process_keycode_with_shift (temp);
 3520              		.loc 2 313 14 view .LVU956
 3521 0196 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3522              		.loc 2 312 16 view .LVU957
 3523 0198 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
ARM GAS  /tmp/ccrLsn8H.s 			page 96


 3524              		.loc 2 313 3 is_stmt 1 view .LVU958
 313:src/console.c ****   process_keycode_with_shift (temp);
 3525              		.loc 2 313 14 is_stmt 0 view .LVU959
 3526 019c 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3527              		.loc 2 314 3 is_stmt 1 view .LVU960
 3528 019e 02AE     		add	r6, sp, #8
 3529 01a0 96E80300 		ldm	r6, {r0, r1}
 3530              	.LVL325:
 314:src/console.c **** }
 3531              		.loc 2 314 3 is_stmt 0 view .LVU961
 3532 01a4 FFF7FEFF 		bl	process_keycode_with_shift
 3533              	.LVL326:
 314:src/console.c **** }
 3534              		.loc 2 314 3 view .LVU962
 3535              	.LBE133:
 3536              	.LBE132:
 398:src/console.c ****       r = no_key;
 3537              		.loc 2 398 7 is_stmt 1 view .LVU963
 3538              	.LBB134:
 3539              	.LBI127:
 310:src/console.c ****   struct _ndmap temp;
 3540              		.loc 2 310 6 view .LVU964
 3541              	.LBB129:
 311:src/console.c ****   temp.key_34s = key;
 3542              		.loc 2 311 3 view .LVU965
 312:src/console.c ****   temp.shift = shift;
 3543              		.loc 2 312 3 view .LVU966
 312:src/console.c ****   temp.shift = shift;
 3544              		.loc 2 312 16 is_stmt 0 view .LVU967
 3545 01a8 6323     		movs	r3, #99
 3546 01aa D6E7     		b	.L308
 3547              	.LVL327:
 3548              	.L309:
 312:src/console.c ****   temp.shift = shift;
 3549              		.loc 2 312 16 view .LVU968
 3550              	.LBE129:
 3551              	.LBE134:
 3552              	.LBB135:
 3553              	.LBB122:
 125:src/menu.c    ****   }
 3554              		.loc 1 125 5 is_stmt 1 view .LVU969
 125:src/menu.c    ****   }
 3555              		.loc 1 125 18 is_stmt 0 view .LVU970
 3556 01ac 0849     		ldr	r1, .L310+24
 3557 01ae 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3558 01b0 1170     		strb	r1, [r2]
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3559              		.loc 1 133 3 is_stmt 1 view .LVU971
 3560              	.L299:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3561              		.loc 1 133 43 view .LVU972
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3562              		.loc 1 133 53 is_stmt 0 view .LVU973
 3563 01b2 084A     		ldr	r2, .L310+28
 3564 01b4 1370     		strb	r3, [r2]
 3565 01b6 4BE7     		b	.L300
ARM GAS  /tmp/ccrLsn8H.s 			page 97


 3566              	.L311:
 3567              		.align	2
 3568              	.L310:
 3569 01b8 00000000 		.word	main_ram
 3570 01bc 00000000 		.word	.LANCHOR1
 3571 01c0 00000000 		.word	.LANCHOR10
 3572 01c4 49040008 		.word	134218825
 3573 01c8 00000000 		.word	.LC17
 3574 01cc 4DF04E55 		.word	1431236685
 3575 01d0 00000000 		.word	.LANCHOR2
 3576 01d4 00000000 		.word	.LANCHOR3
 3577              	.LBE122:
 3578              	.LBE135:
 3579              		.cfi_endproc
 3580              	.LFE33:
 3582              		.section	.text.program_main,"ax",%progbits
 3583              		.align	1
 3584              		.p2align 2,,3
 3585              		.global	program_main
 3586              		.syntax unified
 3587              		.thumb
 3588              		.thumb_func
 3589              		.fpu fpv4-sp-d16
 3591              	program_main:
 3592              	.LFB34:
 406:src/console.c **** 
 407:src/console.c **** void program_main(){
 3593              		.loc 2 407 20 is_stmt 1 view -0
 3594              		.cfi_startproc
 3595              		@ args = 0, pretend = 0, frame = 224
 3596              		@ frame_needed = 0, uses_anonymous_args = 0
 408:src/console.c ****   int c;
 3597              		.loc 2 408 3 view .LVU975
 409:src/console.c ****   struct _ndmap remapped;
 3598              		.loc 2 409 3 view .LVU976
 410:src/console.c **** 
 411:src/console.c ****   init_mem();
 3599              		.loc 2 411 3 view .LVU977
 407:src/console.c ****   int c;
 3600              		.loc 2 407 20 is_stmt 0 view .LVU978
 3601 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3602              		.cfi_def_cfa_offset 32
 3603              		.cfi_offset 4, -32
 3604              		.cfi_offset 5, -28
 3605              		.cfi_offset 6, -24
 3606              		.cfi_offset 7, -20
 3607              		.cfi_offset 8, -16
 3608              		.cfi_offset 9, -12
 3609              		.cfi_offset 10, -8
 3610              		.cfi_offset 14, -4
 3611 0004 B8B0     		sub	sp, sp, #224
 3612              		.cfi_def_cfa_offset 256
 3613              		.loc 2 411 3 view .LVU979
 3614 0006 FFF7FEFF 		bl	init_mem
 3615              	.LVL328:
 412:src/console.c ****   init_RegionTab();
 3616              		.loc 2 412 3 is_stmt 1 view .LVU980
ARM GAS  /tmp/ccrLsn8H.s 			page 98


 3617 000a FFF7FEFF 		bl	init_RegionTab
 3618              	.LVL329:
 413:src/console.c ****   init_34s();
 3619              		.loc 2 413 3 view .LVU981
 3620 000e FFF7FEFF 		bl	init_34s
 3621              	.LVL330:
 414:src/console.c ****   State2.flags = 1;  
 3622              		.loc 2 414 3 view .LVU982
 3623              		.loc 2 414 16 is_stmt 0 view .LVU983
 3624 0012 954A     		ldr	r2, .L415
 3625 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3626 0016 43F00103 		orr	r3, r3, #1
 3627 001a 1376     		strb	r3, [r2, #24]
 415:src/console.c ****   check_create_wp34sdir();
 3628              		.loc 2 415 3 is_stmt 1 view .LVU984
 3629 001c FFF7FEFF 		bl	check_create_wp34sdir
 3630              	.LVL331:
 416:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3631              		.loc 2 416 3 view .LVU985
 3632              		.loc 2 416 8 is_stmt 0 view .LVU986
 3633 0020 0020     		movs	r0, #0
 3634 0022 FFF7FEFF 		bl	load_ram_file
 3635              	.LVL332:
 3636              		.loc 2 416 6 view .LVU987
 3637 0026 08B9     		cbnz	r0, .L313
 3638              		.loc 2 416 26 is_stmt 1 discriminator 1 view .LVU988
 3639              		.loc 2 416 34 is_stmt 0 discriminator 1 view .LVU989
 3640 0028 904B     		ldr	r3, .L415+4
 3641 002a 1860     		str	r0, [r3]
 3642              	.L313:
 417:src/console.c ****   load_backup_file(0);
 3643              		.loc 2 417 3 is_stmt 1 view .LVU990
 3644 002c 0020     		movs	r0, #0
 3645 002e FFF7FEFF 		bl	load_backup_file
 3646              	.LVL333:
 418:src/console.c ****   load_lib_file(0);
 3647              		.loc 2 418 3 view .LVU991
 419:src/console.c ****   lcd_clear_buf();
 420:src/console.c ****   t20->newln = 0;
 3648              		.loc 2 420 3 is_stmt 0 view .LVU992
 3649 0032 8F4C     		ldr	r4, .L415+8
 3650 0034 8F4E     		ldr	r6, .L415+12
 421:src/console.c ****   t20->lnfill = 0;
 422:src/console.c ****   t20->fixed = 1;
 423:src/console.c ****   t20->xspc = -2;
 424:src/console.c ****   t20->bgfill = 0;
 425:src/console.c ****   run_menu_item_app = run_menu_item;
 426:src/console.c ****   menu_line_str_app = menu_line_str;
 427:src/console.c **** 
 428:src/console.c ****   display();
 429:src/console.c ****   display_current_menu();
 430:src/console.c ****   lcd_refresh();
 431:src/console.c ****   JustDisplayed = 0;
 432:src/console.c ****   /*
 433:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 434:src/console.c ****     Sleeps peacefully while waiting for a key.
 435:src/console.c ****     Handles (in principle!) turning off and on.
ARM GAS  /tmp/ccrLsn8H.s 			page 99


 436:src/console.c ****     =================
 437:src/console.c ****     Main event loop
 438:src/console.c ****     =================
 439:src/console.c **** 
 440:src/console.c ****     Status flags:
 441:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 442:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 443:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 444:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 445:src/console.c ****   */
 446:src/console.c ****   for(;;) {
 447:src/console.c **** 
 448:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 449:src/console.c ****       {
 450:src/console.c **** 	CLR_ST(STAT_RUNNING);
 451:src/console.c **** 	sys_sleep();
 452:src/console.c ****       }
 453:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 3651              		.loc 2 453 35 view .LVU993
 3652 0036 904F     		ldr	r7, .L415+16
 454:src/console.c ****     {
 455:src/console.c ****       CLR_ST(STAT_RUNNING);
 456:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3653              		.loc 2 456 7 view .LVU994
 3654 0038 DFF8A082 		ldr	r8, .L415+116
 418:src/console.c ****   lcd_clear_buf();
 3655              		.loc 2 418 3 view .LVU995
 3656 003c 0020     		movs	r0, #0
 3657 003e FFF7FEFF 		bl	load_lib_file
 3658              	.LVL334:
 419:src/console.c ****   t20->newln = 0;
 3659              		.loc 2 419 3 is_stmt 1 view .LVU996
 3660 0042 8E4B     		ldr	r3, .L415+20
 3661 0044 9847     		blx	r3
 3662              	.LVL335:
 420:src/console.c ****   t20->lnfill = 0;
 3663              		.loc 2 420 3 view .LVU997
 3664 0046 236B     		ldr	r3, [r4, #48]
 421:src/console.c ****   t20->fixed = 1;
 3665              		.loc 2 421 3 view .LVU998
 422:src/console.c ****   t20->xspc = -2;
 3666              		.loc 2 422 3 view .LVU999
 425:src/console.c ****   menu_line_str_app = menu_line_str;
 3667              		.loc 2 425 21 is_stmt 0 view .LVU1000
 3668 0048 8D4A     		ldr	r2, .L415+24
 422:src/console.c ****   t20->xspc = -2;
 3669              		.loc 2 422 14 view .LVU1001
 3670 004a 0121     		movs	r1, #1
 3671 004c 1974     		strb	r1, [r3, #16]
 423:src/console.c ****   t20->bgfill = 0;
 3672              		.loc 2 423 3 is_stmt 1 view .LVU1002
 424:src/console.c ****   run_menu_item_app = run_menu_item;
 3673              		.loc 2 424 15 is_stmt 0 view .LVU1003
 3674 004e 0025     		movs	r5, #0
 423:src/console.c ****   t20->bgfill = 0;
 3675              		.loc 2 423 13 view .LVU1004
 3676 0050 FE21     		movs	r1, #254
ARM GAS  /tmp/ccrLsn8H.s 			page 100


 3677 0052 9973     		strb	r1, [r3, #14]
 424:src/console.c ****   run_menu_item_app = run_menu_item;
 3678              		.loc 2 424 3 is_stmt 1 view .LVU1005
 424:src/console.c ****   run_menu_item_app = run_menu_item;
 3679              		.loc 2 424 15 is_stmt 0 view .LVU1006
 3680 0054 5D82     		strh	r5, [r3, #18]	@ movhi
 420:src/console.c ****   t20->lnfill = 0;
 3681              		.loc 2 420 14 view .LVU1007
 3682 0056 1D75     		strb	r5, [r3, #20]
 425:src/console.c ****   menu_line_str_app = menu_line_str;
 3683              		.loc 2 425 3 is_stmt 1 view .LVU1008
 426:src/console.c **** 
 3684              		.loc 2 426 21 is_stmt 0 view .LVU1009
 3685 0058 8A4B     		ldr	r3, .L415+28
 425:src/console.c ****   menu_line_str_app = menu_line_str;
 3686              		.loc 2 425 21 view .LVU1010
 3687 005a E260     		str	r2, [r4, #12]
 426:src/console.c **** 
 3688              		.loc 2 426 3 is_stmt 1 view .LVU1011
 426:src/console.c **** 
 3689              		.loc 2 426 21 is_stmt 0 view .LVU1012
 3690 005c 2361     		str	r3, [r4, #16]
 428:src/console.c ****   display_current_menu();
 3691              		.loc 2 428 3 is_stmt 1 view .LVU1013
 3692 005e FFF7FEFF 		bl	display
 3693              	.LVL336:
 429:src/console.c ****   lcd_refresh();
 3694              		.loc 2 429 3 view .LVU1014
 3695 0062 FFF7FEFF 		bl	display_current_menu
 3696              	.LVL337:
 430:src/console.c ****   JustDisplayed = 0;
 3697              		.loc 2 430 3 view .LVU1015
 3698 0066 884B     		ldr	r3, .L415+32
 3699 0068 9847     		blx	r3
 3700              	.LVL338:
 431:src/console.c ****   /*
 3701              		.loc 2 431 3 view .LVU1016
 431:src/console.c ****   /*
 3702              		.loc 2 431 17 is_stmt 0 view .LVU1017
 3703 006a 884B     		ldr	r3, .L415+36
 3704 006c 1D60     		str	r5, [r3]
 3705              	.L314:
 446:src/console.c **** 
 3706              		.loc 2 446 3 is_stmt 1 view .LVU1018
 448:src/console.c ****       {
 3707              		.loc 2 448 5 view .LVU1019
 448:src/console.c ****       {
 3708              		.loc 2 448 10 is_stmt 0 view .LVU1020
 3709 006e 2368     		ldr	r3, [r4]
 448:src/console.c ****       {
 3710              		.loc 2 448 8 view .LVU1021
 3711 0070 9B05     		lsls	r3, r3, #22
 3712 0072 40F1BA80 		bpl	.L315
 448:src/console.c ****       {
 3713              		.loc 2 448 30 discriminator 1 view .LVU1022
 3714 0076 2368     		ldr	r3, [r4]
 448:src/console.c ****       {
ARM GAS  /tmp/ccrLsn8H.s 			page 101


 3715              		.loc 2 448 27 discriminator 1 view .LVU1023
 3716 0078 5D07     		lsls	r5, r3, #29
 3717 007a 40F1B680 		bpl	.L315
 450:src/console.c **** 	sys_sleep();
 3718              		.loc 2 450 2 is_stmt 1 view .LVU1024
 3719 007e 2368     		ldr	r3, [r4]
 451:src/console.c ****       }
 3720              		.loc 2 451 2 is_stmt 0 view .LVU1025
 3721 0080 834A     		ldr	r2, .L415+40
 450:src/console.c **** 	sys_sleep();
 3722              		.loc 2 450 2 view .LVU1026
 3723 0082 23F00203 		bic	r3, r3, #2
 3724 0086 2360     		str	r3, [r4]
 451:src/console.c ****       }
 3725              		.loc 2 451 2 is_stmt 1 view .LVU1027
 3726 0088 9047     		blx	r2
 3727              	.LVL339:
 3728              	.L316:
 457:src/console.c ****       sys_sleep();
 458:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 459:src/console.c **** 	key_push (K_HEARTBEAT);
 460:src/console.c **** 	if (Pause > 0) Pause--;
 461:src/console.c ****       }
 462:src/console.c ****       sys_timer_disable(0); // stop timer
 463:src/console.c ****     }
 464:src/console.c ****     
 465:src/console.c ****     // Wakeup in off state or going to sleep
 466:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3729              		.loc 2 466 5 view .LVU1028
 3730              		.loc 2 466 9 is_stmt 0 view .LVU1029
 3731 008a 2368     		ldr	r3, [r4]
 3732              		.loc 2 466 8 view .LVU1030
 3733 008c 9805     		lsls	r0, r3, #22
 3734 008e 00F1D380 		bmi	.L322
 3735              	.L408:
 3736              		.loc 2 466 29 discriminator 1 view .LVU1031
 3737 0092 2368     		ldr	r3, [r4]
 3738              		.loc 2 466 26 discriminator 1 view .LVU1032
 3739 0094 5907     		lsls	r1, r3, #29
 3740 0096 00F1CF80 		bmi	.L322
 467:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 468:src/console.c ****         // Going to off mode
 469:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 470:src/console.c ****         draw_power_off_image(1);
 471:src/console.c **** 
 472:src/console.c ****         LCD_power_off(0);
 473:src/console.c ****         SET_ST(STAT_SUSPENDED);
 474:src/console.c ****         SET_ST(STAT_OFF);
 475:src/console.c ****       }
 476:src/console.c ****       // Already in OFF -> just continue to sleep above
 477:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 478:src/console.c ****       // thus reaching the sleep()
 479:src/console.c ****     }
 480:src/console.c **** 
 481:src/console.c ****     // Well, we are woken-up
 482:src/console.c ****     SET_ST(STAT_RUNNING);
 3741              		.loc 2 482 5 is_stmt 1 view .LVU1033
ARM GAS  /tmp/ccrLsn8H.s 			page 102


 3742 009a 2368     		ldr	r3, [r4]
 3743 009c 43F00203 		orr	r3, r3, #2
 3744 00a0 2360     		str	r3, [r4]
 483:src/console.c **** 
 484:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 485:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3745              		.loc 2 485 5 view .LVU1034
 3746 00a2 2368     		ldr	r3, [r4]
 3747 00a4 23F00403 		bic	r3, r3, #4
 3748 00a8 2360     		str	r3, [r4]
 486:src/console.c **** 
 487:src/console.c ****     // Get up from OFF state
 488:src/console.c ****     if ( ST(STAT_OFF) ) {
 3749              		.loc 2 488 5 view .LVU1035
 3750              		.loc 2 488 10 is_stmt 0 view .LVU1036
 3751 00aa 2368     		ldr	r3, [r4]
 3752              		.loc 2 488 8 view .LVU1037
 3753 00ac DA06     		lsls	r2, r3, #27
 3754 00ae 0ED5     		bpl	.L327
 489:src/console.c ****       LCD_power_on();
 3755              		.loc 2 489 7 is_stmt 1 view .LVU1038
 3756 00b0 784B     		ldr	r3, .L415+44
 3757 00b2 9847     		blx	r3
 3758              	.LVL340:
 490:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3759              		.loc 2 490 7 view .LVU1039
 3760 00b4 784B     		ldr	r3, .L415+48
 3761 00b6 9847     		blx	r3
 3762              	.LVL341:
 491:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3763              		.loc 2 491 7 view .LVU1040
 3764 00b8 784B     		ldr	r3, .L415+52
 3765 00ba 9847     		blx	r3
 3766              	.LVL342:
 492:src/console.c **** 
 493:src/console.c ****       CLR_ST(STAT_OFF);
 3767              		.loc 2 493 7 view .LVU1041
 3768 00bc 2368     		ldr	r3, [r4]
 494:src/console.c **** 
 495:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3769              		.loc 2 495 13 is_stmt 0 view .LVU1042
 3770 00be 784A     		ldr	r2, .L415+56
 493:src/console.c **** 
 3771              		.loc 2 493 7 view .LVU1043
 3772 00c0 23F01003 		bic	r3, r3, #16
 3773 00c4 2360     		str	r3, [r4]
 3774              		.loc 2 495 7 is_stmt 1 view .LVU1044
 3775              		.loc 2 495 13 is_stmt 0 view .LVU1045
 3776 00c6 9047     		blx	r2
 3777              	.LVL343:
 3778              		.loc 2 495 10 view .LVU1046
 3779 00c8 08B9     		cbnz	r0, .L327
 496:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 3780              		.loc 2 496 9 is_stmt 1 view .LVU1047
 3781 00ca 764B     		ldr	r3, .L415+60
 3782 00cc 9847     		blx	r3
 3783              	.LVL344:
ARM GAS  /tmp/ccrLsn8H.s 			page 103


 3784              	.L327:
 497:src/console.c ****     }
 498:src/console.c **** 
 499:src/console.c ****     // Key is ready -> clear auto off timer
 500:src/console.c ****     //    if ( !key_empty() )
 501:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 502:src/console.c ****     // Fetch the key
 503:src/console.c ****     //  < 0 -> No key event
 504:src/console.c ****     //  > 0 -> Key pressed
 505:src/console.c ****     // == 0 -> Key released
 506:src/console.c ****     c = key_pop();
 3785              		.loc 2 506 5 view .LVU1048
 3786              		.loc 2 506 9 is_stmt 0 view .LVU1049
 3787 00ce 764B     		ldr	r3, .L415+64
 3788 00d0 9847     		blx	r3
 3789              	.LVL345:
 507:src/console.c **** #ifdef INCLUDE_STOPWATCH
 508:src/console.c ****     if ( KeyCallback != NULL ) {
 3790              		.loc 2 508 22 view .LVU1050
 3791 00d2 3368     		ldr	r3, [r6]
 506:src/console.c **** #ifdef INCLUDE_STOPWATCH
 3792              		.loc 2 506 9 view .LVU1051
 3793 00d4 0546     		mov	r5, r0
 3794              	.LVL346:
 3795              		.loc 2 508 5 is_stmt 1 view .LVU1052
 3796              		.loc 2 508 8 is_stmt 0 view .LVU1053
 3797 00d6 002B     		cmp	r3, #0
 3798 00d8 00F04181 		beq	.L329
 509:src/console.c ****       c = (*KeyCallback)( c );
 3799              		.loc 2 509 7 is_stmt 1 view .LVU1054
 3800              		.loc 2 509 12 is_stmt 0 view .LVU1055
 3801 00dc 9847     		blx	r3
 3802              	.LVL347:
 3803              		.loc 2 509 12 view .LVU1056
 3804 00de 0546     		mov	r5, r0
 3805              	.LVL348:
 3806              	.L330:
 510:src/console.c ****     }
 511:src/console.c ****     else if ( StopWatchRunning && ( Ticker % STOPWATCH_BLINK ) == 0 ) {
 512:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 513:src/console.c ****       lcd_refresh();
 514:src/console.c ****     }
 515:src/console.c **** #endif
 516:src/console.c ****     if ( (c != K_HEARTBEAT) && (c >= 0) ) {
 3807              		.loc 2 516 5 is_stmt 1 view .LVU1057
 3808              		.loc 2 516 8 is_stmt 0 view .LVU1058
 3809 00e0 622D     		cmp	r5, #98
 3810 00e2 00F0FD80 		beq	.L331
 3811              		.loc 2 516 29 discriminator 1 view .LVU1059
 3812 00e6 002D     		cmp	r5, #0
 3813 00e8 C1DB     		blt	.L314
 517:src/console.c ****       reset_auto_off();
 3814              		.loc 2 517 7 is_stmt 1 view .LVU1060
 3815 00ea 704B     		ldr	r3, .L415+68
 3816 00ec 9847     		blx	r3
 3817              	.LVL349:
 518:src/console.c ****       //      start_key_timer();
ARM GAS  /tmp/ccrLsn8H.s 			page 104


 519:src/console.c ****     }
 520:src/console.c ****     if (c >= 0) {
 3818              		.loc 2 520 5 view .LVU1061
 521:src/console.c ****       remapped = remap(c);
 3819              		.loc 2 521 7 view .LVU1062
 3820              	.LBB143:
 3821              	.LBI143:
  56:src/console.c **** 
 3822              		.loc 2 56 22 view .LVU1063
 3823              	.LBB144:
  58:src/console.c **** 
 3824              		.loc 2 58 3 view .LVU1064
 3825              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3826              		.loc 3 1 1 view .LVU1065
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
ARM GAS  /tmp/ccrLsn8H.s 			page 105


  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3827              		.loc 3 59 3 view .LVU1066
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX}, // Complex
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     //    {K_MULTI, 1}, // lastX 
  78:src/keytran.c ****     {K_OP, RARG( RARG_RCL, regL_idx )}, // lastX 
  79:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
  80:src/keytran.c ****     {K_SETMENU,  M_Disp}, // DISP menu
  81:src/keytran.c ****     {K_SETMENU,  M_Clear}, // CLR menu
  82:src/keytran.c ****     // Fourth row of DM42 18--22
  83:src/keytran.c ****     {K40, 0}, // up-arrow
  84:src/keytran.c ****     {K52, 1}, // SLV
  85:src/keytran.c ****     {K_SETMENU,  M_Solve}, // Integral/sum/product menu
  86:src/keytran.c ****     {K44, 3}, // MATRIX cat
  87:src/keytran.c ****     {K_SETMENU,  M_Stats}, // STATS menu
  88:src/keytran.c ****     // Fifth row of DM42 23--27
  89:src/keytran.c ****     {K50, 0}, // down-arrow
  90:src/keytran.c ****     {K_SETMENU,  M_Base}, // BASE menu 
  91:src/keytran.c ****     {K04, 3}, // CONV cat
  92:src/keytran.c ****     {K_SETMENU,  M_Flags}, // FLAGS menu
  93:src/keytran.c ****     {K_SETMENU,  M_Prob}, // PROBS menu
  94:src/keytran.c ****     // Sixth row of DM42 28--32
  95:src/keytran.c ****     {K_G, 0}, // gshift
  96:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  97:src/keytran.c ****     {K_SETMENU,  M_User}, // select user menu
  98:src/keytran.c ****     {K52, 3}, // P.FCN cat
  99:src/keytran.c ****     {K_SETMENU, M_Print}, // Print menu
ARM GAS  /tmp/ccrLsn8H.s 			page 106


 100:src/keytran.c ****     // Last row of DM42 33--37
 101:src/keytran.c ****     {K60, 3}, // off
 102:src/keytran.c ****     {K_SETMENU,  M_Setup1}, // SETUP menu
 103:src/keytran.c ****     {K21, 1}, // <(
 104:src/keytran.c ****     {K63, 3}, // P/R
 105:src/keytran.c ****     {K10, 3}, // CAT cat
 106:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_NOP, 0},
 114:src/keytran.c ****     {K_SETMENU,  M_Last}, // last menu
 115:src/keytran.c ****     {K_SETMENU,  M_Misc}, // MISC menu!
 116:src/keytran.c ****   };
 117:src/keytran.c **** 
 118:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3828              		.loc 3 118 3 view .LVU1067
 119:src/keytran.c ****     {K_RELEASE, -1},
 120:src/keytran.c ****     // Top row of DM42 1--6
 121:src/keytran.c ****     {K64, 3}, // sig+
 122:src/keytran.c ****     {K34, 1}, // 1/x
 123:src/keytran.c ****     {K44, 1}, // sqrt x
 124:src/keytran.c ****     {K31, 2}, // 10^x
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     {K_NOP, 0}, // no function
 127:src/keytran.c ****     // Next row of DM42 7--12
 128:src/keytran.c ****     {K_NOP, 0}, // no function
 129:src/keytran.c ****     {K11, 3}, // View
 130:src/keytran.c ****     {K12, 3}, // Rup
 131:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 133:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 134:src/keytran.c ****     // Third row of DM42 13--17
 135:src/keytran.c ****     {K20, 2}, // fill
 136:src/keytran.c ****     {K_SETMENU,  M_Swap}, // X<>Y menu
 137:src/keytran.c ****     {K05, 3}, // MODE cat
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     {K_NOP, 0}, // no function
 140:src/keytran.c ****     // Fourth row of DM42 18--22
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K_NOP, 0}, // no function
 144:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 145:src/keytran.c ****     {K42, 3}, // STAT catalogue
 146:src/keytran.c ****     // Fifth row of DM42 23--27
 147:src/keytran.c ****     {K_NOP, 0}, // no function 
 148:src/keytran.c ****     {K_NOP, 0}, // no function
 149:src/keytran.c ****     {K20, 3}, // CONST catalogue
 150:src/keytran.c ****     {K51, 3}, // TEST catalogue
 151:src/keytran.c ****     {K41, 3}, // PROB catalogue
 152:src/keytran.c ****     // Sixth row of DM42 28--32
 153:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     //    {K_MULTI, SETUMEN}, // Set up user menu
ARM GAS  /tmp/ccrLsn8H.s 			page 107


 156:src/keytran.c ****     {K_SETMENU, M_Usermenu}, //User menu create
 157:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 158:src/keytran.c ****     {K_NOP, 0}, // no function
 159:src/keytran.c ****     // Last row of DM42 33--37
 160:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 161:src/keytran.c ****     {K_SETMENU,  M_Setup2}, // SETUP2 menu
 162:src/keytran.c ****     {K_NOP, 0}, // no function
 163:src/keytran.c ****     {K_SETMENU,  M_Program}, // P.FCN menu
 164:src/keytran.c ****     {K50, 3}, // Status
 165:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****     {K_NOP, 0},
 174:src/keytran.c ****     {K_NOP, 0},
 175:src/keytran.c ****   };
 176:src/keytran.c **** 
 177:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3829              		.loc 3 177 1 view .LVU1068
 178:src/keytran.c ****     {K_RELEASE, -1},
 179:src/keytran.c ****     // Top row of DM42 1--6
 180:src/keytran.c ****     {K00, -1},
 181:src/keytran.c ****     {K01, -1},
 182:src/keytran.c ****     {K02, -1},
 183:src/keytran.c ****     {K03, -1},
 184:src/keytran.c ****     {K04, -1},
 185:src/keytran.c ****     {K05, -1},
 186:src/keytran.c ****     // Next row of DM42 7--12
 187:src/keytran.c ****     {K10, -1},
 188:src/keytran.c ****     {K11, -1},
 189:src/keytran.c ****     {K12, -1},
 190:src/keytran.c ****     {K13, -1},
 191:src/keytran.c ****     {K14, -1},
 192:src/keytran.c ****     {K15, -1},
 193:src/keytran.c ****     // Third row of DM42 13--17
 194:src/keytran.c ****     {K20, -1},
 195:src/keytran.c ****     {K21, -1},
 196:src/keytran.c ****     {K22, -1},
 197:src/keytran.c ****     {K23, -1},
 198:src/keytran.c ****     {K24, -1},
 199:src/keytran.c ****     // Fourth row of DM42 18--22
 200:src/keytran.c ****     {K30, -1},
 201:src/keytran.c ****     {K31, -1},
 202:src/keytran.c ****     {K32, -1},
 203:src/keytran.c ****     {K33, -1},
 204:src/keytran.c ****     {K34, -1},
 205:src/keytran.c ****     // Fifth row of DM42 23--27
 206:src/keytran.c ****     {K40, -1},
 207:src/keytran.c ****     {K41, -1},
 208:src/keytran.c ****     {K42, -1},
 209:src/keytran.c ****     {K43, -1},
 210:src/keytran.c ****     {K44, -1},
 211:src/keytran.c ****     // Sixth row of DM42 28--32
ARM GAS  /tmp/ccrLsn8H.s 			page 108


 212:src/keytran.c ****     {K50, -1},
 213:src/keytran.c ****     {K51, -1},
 214:src/keytran.c ****     {K52, -1},
 215:src/keytran.c ****     {K53, -1},
 216:src/keytran.c ****     {K54, -1},
 217:src/keytran.c ****     // Last row of DM42 33--37
 218:src/keytran.c ****     {K60, -1},
 219:src/keytran.c ****     {K61, -1},
 220:src/keytran.c ****     {K62, -1},
 221:src/keytran.c ****     {K63, -1},
 222:src/keytran.c ****     {K64, -1},
 223:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_NOP, -1},
 227:src/keytran.c ****     {K_NOP, -1},
 228:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 229:src/keytran.c ****     {K_CMPLX, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c ****     {K_NOP, -1},
 232:src/keytran.c ****     {K_NOP, -1},
 233:src/keytran.c **** };
 234:src/keytran.c **** 
 235:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3830              		.loc 3 235 1 view .LVU1069
  62:src/console.c **** 
 3831              		.loc 2 62 3 view .LVU1070
  64:src/console.c **** 
 3832              		.loc 2 64 3 view .LVU1071
  64:src/console.c **** 
 3833              		.loc 2 64 6 is_stmt 0 view .LVU1072
 3834 00ee 632D     		cmp	r5, #99
 3835 00f0 00F08481 		beq	.L396
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3836              		.loc 2 66 3 is_stmt 1 view .LVU1073
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3837              		.loc 2 66 6 is_stmt 0 view .LVU1074
 3838 00f4 2C2D     		cmp	r5, #44
 3839 00f6 00F05381 		beq	.L334
  71:src/console.c ****     return mapping_running[c];
 3840              		.loc 2 71 3 is_stmt 1 view .LVU1075
  71:src/console.c ****     return mapping_running[c];
 3841              		.loc 2 71 15 is_stmt 0 view .LVU1076
 3842 00fa 6D4A     		ldr	r2, .L415+72
 3843 00fc 6D4B     		ldr	r3, .L415+76
 3844 00fe 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3845 0102 1968     		ldr	r1, [r3]
  71:src/console.c ****     return mapping_running[c];
 3846              		.loc 2 71 6 view .LVU1077
 3847 0104 59EA0109 		orrs	r9, r9, r1
 3848 0108 40F06B81 		bne	.L397
  75:src/console.c ****   
 3849              		.loc 2 75 3 is_stmt 1 view .LVU1078
  75:src/console.c ****   
 3850              		.loc 2 75 22 is_stmt 0 view .LVU1079
 3851 010c 04A8     		add	r0, sp, #16
 3852 010e FFF7FEFF 		bl	get_current_menu_ref
ARM GAS  /tmp/ccrLsn8H.s 			page 109


 3853              	.LVL350:
  77:src/console.c ****   case KEY_F1:
 3854              		.loc 2 77 3 is_stmt 1 view .LVU1080
 3855 0112 A5F12603 		sub	r3, r5, #38
 3856 0116 052B     		cmp	r3, #5
 3857 0118 00F27A81 		bhi	.L336
 3858 011c DFE813F0 		tbh	[pc, r3, lsl #1]
 3859              	.L338:
 3860 0120 8001     		.2byte	(.L343-.L338)/2
 3861 0122 0B00     		.2byte	(.L342-.L338)/2
 3862 0124 1500     		.2byte	(.L341-.L338)/2
 3863 0126 1F00     		.2byte	(.L340-.L338)/2
 3864 0128 2900     		.2byte	(.L339-.L338)/2
 3865 012a 3300     		.2byte	(.L337-.L338)/2
 3866              		.p2align 1
 3867              	.L344:
  80:src/console.c ****   case KEY_F2:
 3868              		.loc 2 80 5 view .LVU1081
  80:src/console.c ****   case KEY_F2:
 3869              		.loc 2 80 9 is_stmt 0 view .LVU1082
 3870 012c FFF7FEFF 		bl	cur_shift
 3871              	.LVL351:
  80:src/console.c ****   case KEY_F2:
 3872              		.loc 2 80 8 view .LVU1083
 3873 0130 0128     		cmp	r0, #1
 3874 0132 00F01282 		beq	.L398
 3875              	.L342:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3876              		.loc 2 82 5 is_stmt 1 view .LVU1084
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3877              		.loc 2 82 9 is_stmt 0 view .LVU1085
 3878 0136 FFF7FEFF 		bl	cur_shift
 3879              	.LVL352:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3880              		.loc 2 82 8 view .LVU1086
 3881 013a 0028     		cmp	r0, #0
 3882 013c 00F09D81 		beq	.L399
  83:src/console.c ****   case KEY_F3:
 3883              		.loc 2 83 5 is_stmt 1 view .LVU1087
  83:src/console.c ****   case KEY_F3:
 3884              		.loc 2 83 9 is_stmt 0 view .LVU1088
 3885 0140 FFF7FEFF 		bl	cur_shift
 3886              	.LVL353:
  83:src/console.c ****   case KEY_F3:
 3887              		.loc 2 83 8 view .LVU1089
 3888 0144 0128     		cmp	r0, #1
 3889 0146 00F0E281 		beq	.L400
 3890              	.L341:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3891              		.loc 2 85 5 is_stmt 1 view .LVU1090
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3892              		.loc 2 85 9 is_stmt 0 view .LVU1091
 3893 014a FFF7FEFF 		bl	cur_shift
 3894              	.LVL354:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3895              		.loc 2 85 8 view .LVU1092
 3896 014e 0028     		cmp	r0, #0
ARM GAS  /tmp/ccrLsn8H.s 			page 110


 3897 0150 00F08981 		beq	.L401
  86:src/console.c ****   case KEY_F4:
 3898              		.loc 2 86 5 is_stmt 1 view .LVU1093
  86:src/console.c ****   case KEY_F4:
 3899              		.loc 2 86 9 is_stmt 0 view .LVU1094
 3900 0154 FFF7FEFF 		bl	cur_shift
 3901              	.LVL355:
  86:src/console.c ****   case KEY_F4:
 3902              		.loc 2 86 8 view .LVU1095
 3903 0158 0128     		cmp	r0, #1
 3904 015a 00F0CE81 		beq	.L402
 3905              	.L340:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3906              		.loc 2 88 5 is_stmt 1 view .LVU1096
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3907              		.loc 2 88 9 is_stmt 0 view .LVU1097
 3908 015e FFF7FEFF 		bl	cur_shift
 3909              	.LVL356:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3910              		.loc 2 88 8 view .LVU1098
 3911 0162 0028     		cmp	r0, #0
 3912 0164 00F07581 		beq	.L403
  89:src/console.c ****   case KEY_F5:
 3913              		.loc 2 89 5 is_stmt 1 view .LVU1099
  89:src/console.c ****   case KEY_F5:
 3914              		.loc 2 89 9 is_stmt 0 view .LVU1100
 3915 0168 FFF7FEFF 		bl	cur_shift
 3916              	.LVL357:
  89:src/console.c ****   case KEY_F5:
 3917              		.loc 2 89 8 view .LVU1101
 3918 016c 0128     		cmp	r0, #1
 3919 016e 00F0B081 		beq	.L404
 3920              	.L339:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3921              		.loc 2 91 5 is_stmt 1 view .LVU1102
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3922              		.loc 2 91 9 is_stmt 0 view .LVU1103
 3923 0172 FFF7FEFF 		bl	cur_shift
 3924              	.LVL358:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3925              		.loc 2 91 8 view .LVU1104
 3926 0176 0028     		cmp	r0, #0
 3927 0178 00F06181 		beq	.L405
  92:src/console.c ****   case KEY_F6:
 3928              		.loc 2 92 5 is_stmt 1 view .LVU1105
  92:src/console.c ****   case KEY_F6:
 3929              		.loc 2 92 9 is_stmt 0 view .LVU1106
 3930 017c FFF7FEFF 		bl	cur_shift
 3931              	.LVL359:
  92:src/console.c ****   case KEY_F6:
 3932              		.loc 2 92 8 view .LVU1107
 3933 0180 0128     		cmp	r0, #1
 3934 0182 00F0B081 		beq	.L406
 3935              	.L337:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3936              		.loc 2 94 5 is_stmt 1 view .LVU1108
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
ARM GAS  /tmp/ccrLsn8H.s 			page 111


 3937              		.loc 2 94 9 is_stmt 0 view .LVU1109
 3938 0186 FFF7FEFF 		bl	cur_shift
 3939              	.LVL360:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3940              		.loc 2 94 8 view .LVU1110
 3941 018a 0028     		cmp	r0, #0
 3942 018c 40F03C81 		bne	.L349
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3943              		.loc 2 94 33 is_stmt 1 view .LVU1111
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3944              		.loc 2 94 51 is_stmt 0 view .LVU1112
 3945 0190 DDE93001 		ldrd	r0, r1, [sp, #192]
 3946 0194 9DF8C050 		ldrb	r5, [sp, #192]	@ zero_extendqisi2
 3947              	.LVL361:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3948              		.loc 2 94 51 view .LVU1113
 3949 0198 0DF1080A 		add	r10, sp, #8
 3950              	.LBE144:
 3951              	.LBE143:
 522:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3952              		.loc 2 522 10 view .LVU1114
 3953 019c 2F2D     		cmp	r5, #47
 3954              	.LBB153:
 3955              	.LBB146:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3956              		.loc 2 94 51 view .LVU1115
 3957 019e 8AE80300 		stm	r10, {r0, r1}
 3958 01a2 8946     		mov	r9, r1
 3959              	.LVL362:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3960              		.loc 2 94 51 view .LVU1116
 3961              	.LBE146:
 3962              	.LBE153:
 3963              		.loc 2 522 7 is_stmt 1 view .LVU1117
 3964              		.loc 2 522 10 is_stmt 0 view .LVU1118
 3965 01a4 40F0A880 		bne	.L360
 3966              	.LVL363:
 3967              	.L409:
 523:src/console.c **** 	set_menu ( remapped.shift );
 3968              		.loc 2 523 2 is_stmt 1 view .LVU1119
 3969              	.LBB154:
 3970              	.LBB155:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3971              		.loc 1 123 13 is_stmt 0 view .LVU1120
 3972 01a8 434A     		ldr	r2, .L415+80
 3973 01aa 92F90030 		ldrsb	r3, [r2]
 3974              	.LBE155:
 3975              	.LBE154:
 3976              		.loc 2 523 2 view .LVU1121
 3977 01ae 4FFA89F1 		sxtb	r1, r9
 3978              	.LVL364:
 3979              	.LBB158:
 3980              	.LBI154:
 122:src/menu.c    ****   menu_name m = current_menu;
 3981              		.loc 1 122 6 is_stmt 1 view .LVU1122
 3982              	.LBB156:
 123:src/menu.c    ****   if (new_menu == current_menu) { // return to default
ARM GAS  /tmp/ccrLsn8H.s 			page 112


 3983              		.loc 1 123 3 view .LVU1123
 124:src/menu.c    ****     current_menu = default_menu;
 3984              		.loc 1 124 3 view .LVU1124
 124:src/menu.c    ****     current_menu = default_menu;
 3985              		.loc 1 124 6 is_stmt 0 view .LVU1125
 3986 01b2 9942     		cmp	r1, r3
 3987 01b4 00F02481 		beq	.L407
 127:src/menu.c    ****     current_menu = last_menu;
 3988              		.loc 1 127 8 is_stmt 1 view .LVU1126
 127:src/menu.c    ****     current_menu = last_menu;
 3989              		.loc 1 127 11 is_stmt 0 view .LVU1127
 3990 01b8 481C     		adds	r0, r1, #1
 128:src/menu.c    ****   }
 3991              		.loc 1 128 5 is_stmt 1 view .LVU1128
 128:src/menu.c    ****   }
 3992              		.loc 1 128 18 is_stmt 0 view .LVU1129
 3993 01ba 04BF     		itt	eq
 3994 01bc 3F49     		ldreq	r1, .L415+84
 3995              	.LVL365:
 128:src/menu.c    ****   }
 3996              		.loc 1 128 18 view .LVU1130
 3997 01be 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 131:src/menu.c    ****   }
 3998              		.loc 1 131 5 is_stmt 1 view .LVU1131
 131:src/menu.c    ****   }
 3999              		.loc 1 131 18 is_stmt 0 view .LVU1132
 4000 01c0 1170     		strb	r1, [r2]
 4001              	.LVL366:
 4002              	.L362:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4003              		.loc 1 133 3 is_stmt 1 view .LVU1133
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4004              		.loc 1 133 6 is_stmt 0 view .LVU1134
 4005 01c2 092B     		cmp	r3, #9
 4006 01c4 03D0     		beq	.L364
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4007              		.loc 1 133 23 view .LVU1135
 4008 01c6 102B     		cmp	r3, #16
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4009              		.loc 1 133 43 is_stmt 1 view .LVU1136
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4010              		.loc 1 133 53 is_stmt 0 view .LVU1137
 4011 01c8 1CBF     		itt	ne
 4012 01ca 3C4A     		ldrne	r2, .L415+84
 4013 01cc 1370     		strbne	r3, [r2]
 4014              	.L364:
 4015              	.LVL367:
 133:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4016              		.loc 1 133 53 view .LVU1138
 4017              	.LBE156:
 4018              	.LBE158:
 524:src/console.c **** 	display_current_menu ();
 4019              		.loc 2 524 2 is_stmt 1 view .LVU1139
 4020 01ce FFF7FEFF 		bl	display_current_menu
 4021              	.LVL368:
 525:src/console.c **** 	reset_shift();
 4022              		.loc 2 525 2 view .LVU1140
ARM GAS  /tmp/ccrLsn8H.s 			page 113


 4023 01d2 FFF7FEFF 		bl	reset_shift
 4024              	.LVL369:
 526:src/console.c **** 	remapped = no_key;
 4025              		.loc 2 526 2 view .LVU1141
 4026              		.loc 2 526 11 is_stmt 0 view .LVU1142
 4027 01d6 3A4B     		ldr	r3, .L415+88
 4028 01d8 93E80300 		ldm	r3, {r0, r1}
 4029 01dc 0DF1080A 		add	r10, sp, #8
 4030 01e0 8AE80300 		stm	r10, {r0, r1}
 4031 01e4 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4032              	.LVL370:
 4033              		.loc 2 526 11 view .LVU1143
 4034 01e6 8946     		mov	r9, r1
 4035              	.LVL371:
 4036              		.loc 2 526 11 view .LVU1144
 4037 01e8 86E0     		b	.L360
 4038              	.LVL372:
 4039              	.L315:
 453:src/console.c ****     {
 4040              		.loc 2 453 10 is_stmt 1 view .LVU1145
 453:src/console.c ****     {
 4041              		.loc 2 453 15 is_stmt 0 view .LVU1146
 4042 01ea 2568     		ldr	r5, [r4]
 453:src/console.c ****     {
 4043              		.loc 2 453 13 view .LVU1147
 4044 01ec 15F40075 		ands	r5, r5, #512
 4045 01f0 7FF44BAF 		bne	.L316
 453:src/console.c ****     {
 4046              		.loc 2 453 35 discriminator 1 view .LVU1148
 4047 01f4 B847     		blx	r7
 4048              	.LVL373:
 453:src/console.c ****     {
 4049              		.loc 2 453 32 discriminator 1 view .LVU1149
 4050 01f6 0028     		cmp	r0, #0
 4051 01f8 3FF447AF 		beq	.L316
 455:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 4052              		.loc 2 455 7 is_stmt 1 view .LVU1150
 4053 01fc 2368     		ldr	r3, [r4]
 4054 01fe 23F00203 		bic	r3, r3, #2
 456:src/console.c ****       sys_sleep();
 4055              		.loc 2 456 7 is_stmt 0 view .LVU1151
 4056 0202 2846     		mov	r0, r5
 4057 0204 6421     		movs	r1, #100
 455:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 4058              		.loc 2 455 7 view .LVU1152
 4059 0206 2360     		str	r3, [r4]
 456:src/console.c ****       sys_sleep();
 4060              		.loc 2 456 7 is_stmt 1 view .LVU1153
 4061 0208 C047     		blx	r8
 4062              	.LVL374:
 457:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 4063              		.loc 2 457 7 view .LVU1154
 4064 020a 214B     		ldr	r3, .L415+40
 4065 020c 9847     		blx	r3
 4066              	.LVL375:
 458:src/console.c **** 	key_push (K_HEARTBEAT);
 4067              		.loc 2 458 7 view .LVU1155
ARM GAS  /tmp/ccrLsn8H.s 			page 114


 458:src/console.c **** 	key_push (K_HEARTBEAT);
 4068              		.loc 2 458 11 is_stmt 0 view .LVU1156
 4069 020e 2D4B     		ldr	r3, .L415+92
 4070 0210 2846     		mov	r0, r5
 4071 0212 9847     		blx	r3
 4072              	.LVL376:
 458:src/console.c **** 	key_push (K_HEARTBEAT);
 4073              		.loc 2 458 10 view .LVU1157
 4074 0214 48B1     		cbz	r0, .L320
 459:src/console.c **** 	if (Pause > 0) Pause--;
 4075              		.loc 2 459 2 is_stmt 1 view .LVU1158
 4076 0216 2C4B     		ldr	r3, .L415+96
 4077 0218 6220     		movs	r0, #98
 4078 021a 9847     		blx	r3
 4079              	.LVL377:
 460:src/console.c ****       }
 4080              		.loc 2 460 2 view .LVU1159
 460:src/console.c ****       }
 4081              		.loc 2 460 12 is_stmt 0 view .LVU1160
 4082 021c 244B     		ldr	r3, .L415+72
 4083 021e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 460:src/console.c ****       }
 4084              		.loc 2 460 5 view .LVU1161
 4085 0220 1AB1     		cbz	r2, .L320
 460:src/console.c ****       }
 4086              		.loc 2 460 17 is_stmt 1 discriminator 1 view .LVU1162
 460:src/console.c ****       }
 4087              		.loc 2 460 22 is_stmt 0 discriminator 1 view .LVU1163
 4088 0222 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4089 0224 013A     		subs	r2, r2, #1
 4090 0226 D2B2     		uxtb	r2, r2
 4091 0228 1A70     		strb	r2, [r3]
 4092              	.L320:
 462:src/console.c ****     }
 4093              		.loc 2 462 7 is_stmt 1 view .LVU1164
 4094 022a 284B     		ldr	r3, .L415+100
 4095 022c 0020     		movs	r0, #0
 4096 022e 9847     		blx	r3
 4097              	.LVL378:
 466:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4098              		.loc 2 466 5 view .LVU1165
 466:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4099              		.loc 2 466 9 is_stmt 0 view .LVU1166
 4100 0230 2368     		ldr	r3, [r4]
 466:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4101              		.loc 2 466 8 view .LVU1167
 4102 0232 9805     		lsls	r0, r3, #22
 4103 0234 7FF52DAF 		bpl	.L408
 4104              	.L322:
 467:src/console.c ****         // Going to off mode
 4105              		.loc 2 467 7 is_stmt 1 view .LVU1168
 467:src/console.c ****         // Going to off mode
 4106              		.loc 2 467 12 is_stmt 0 view .LVU1169
 4107 0238 2568     		ldr	r5, [r4]
 467:src/console.c ****         // Going to off mode
 4108              		.loc 2 467 10 view .LVU1170
 4109 023a 15F00405 		ands	r5, r5, #4
ARM GAS  /tmp/ccrLsn8H.s 			page 115


 4110 023e 7FF416AF 		bne	.L314
 469:src/console.c ****         draw_power_off_image(1);
 4111              		.loc 2 469 9 is_stmt 1 view .LVU1171
 4112 0242 234B     		ldr	r3, .L415+104
 4113 0244 2846     		mov	r0, r5
 4114 0246 9847     		blx	r3
 4115              	.LVL379:
 470:src/console.c **** 
 4116              		.loc 2 470 9 view .LVU1172
 4117 0248 224B     		ldr	r3, .L415+108
 4118 024a 0120     		movs	r0, #1
 4119 024c 9847     		blx	r3
 4120              	.LVL380:
 472:src/console.c ****         SET_ST(STAT_SUSPENDED);
 4121              		.loc 2 472 9 view .LVU1173
 4122 024e 224B     		ldr	r3, .L415+112
 4123 0250 2846     		mov	r0, r5
 4124 0252 9847     		blx	r3
 4125              	.LVL381:
 473:src/console.c ****         SET_ST(STAT_OFF);
 4126              		.loc 2 473 9 view .LVU1174
 4127 0254 2368     		ldr	r3, [r4]
 4128 0256 43F00403 		orr	r3, r3, #4
 4129 025a 2360     		str	r3, [r4]
 474:src/console.c ****       }
 4130              		.loc 2 474 9 view .LVU1175
 4131 025c 2368     		ldr	r3, [r4]
 4132 025e 43F01003 		orr	r3, r3, #16
 4133 0262 2360     		str	r3, [r4]
 4134 0264 03E7     		b	.L314
 4135              	.L416:
 4136 0266 00BF     		.align	2
 4137              	.L415:
 4138 0268 00000000 		.word	StateWhileOn
 4139 026c 00000000 		.word	DispMsg
 4140 0270 00200010 		.word	268443648
 4141 0274 00000000 		.word	KeyCallback
 4142 0278 7D030008 		.word	134218621
 4143 027c 2D020008 		.word	134218285
 4144 0280 00000000 		.word	run_menu_item
 4145 0284 00000000 		.word	menu_line_str
 4146 0288 31020008 		.word	134218289
 4147 028c 00000000 		.word	JustDisplayed
 4148 0290 19040008 		.word	134218777
 4149 0294 19020008 		.word	134218265
 4150 0298 91030008 		.word	134218641
 4151 029c E5020008 		.word	134218469
 4152 02a0 59020008 		.word	134218329
 4153 02a4 35020008 		.word	134218293
 4154 02a8 89030008 		.word	134218633
 4155 02ac B9030008 		.word	134218681
 4156 02b0 00000000 		.word	Pause
 4157 02b4 00000000 		.word	Running
 4158 02b8 00000000 		.word	.LANCHOR1
 4159 02bc 00000000 		.word	.LANCHOR3
 4160 02c0 00000000 		.word	.LANCHOR10
 4161 02c4 01040008 		.word	134218753
ARM GAS  /tmp/ccrLsn8H.s 			page 116


 4162 02c8 81030008 		.word	134218625
 4163 02cc F5030008 		.word	134218741
 4164 02d0 55020008 		.word	134218325
 4165 02d4 2D040008 		.word	134218797
 4166 02d8 1D020008 		.word	134218269
 4167 02dc F9030008 		.word	134218745
 4168              	.LVL382:
 4169              	.L331:
 520:src/console.c ****       remapped = remap(c);
 4170              		.loc 2 520 5 view .LVU1176
 521:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 4171              		.loc 2 521 7 view .LVU1177
 4172              	.LBB159:
  56:src/console.c **** 
 4173              		.loc 2 56 22 view .LVU1178
 4174              	.LBB147:
  58:src/console.c **** 
 4175              		.loc 2 58 3 view .LVU1179
   1:src/keytran.c ****     {K_RELEASE, -1},
 4176              		.loc 3 1 1 view .LVU1180
  59:src/keytran.c ****     {K_RELEASE, -1},
 4177              		.loc 3 59 3 view .LVU1181
 118:src/keytran.c ****     {K_RELEASE, -1},
 4178              		.loc 3 118 3 view .LVU1182
 177:src/keytran.c ****     {K_RELEASE, -1},
 4179              		.loc 3 177 1 view .LVU1183
 4180              		.loc 3 235 1 view .LVU1184
  62:src/console.c **** 
 4181              		.loc 2 62 3 view .LVU1185
  62:src/console.c **** 
 4182              		.loc 2 62 23 view .LVU1186
  62:src/console.c **** 
 4183              		.loc 2 62 30 is_stmt 0 view .LVU1187
 4184 02e0 AC4B     		ldr	r3, .L417
 4185              	.LVL383:
 4186              	.L395:
  62:src/console.c **** 
 4187              		.loc 2 62 30 view .LVU1188
 4188 02e2 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4189              	.LVL384:
  62:src/console.c **** 
 4190              		.loc 2 62 30 view .LVU1189
 4191 02e4 93E80300 		ldm	r3, {r0, r1}
 4192 02e8 0DF1080A 		add	r10, sp, #8
 4193 02ec 8AE80300 		stm	r10, {r0, r1}
 4194 02f0 8946     		mov	r9, r1
 4195              	.LVL385:
 4196              	.L333:
  62:src/console.c **** 
 4197              		.loc 2 62 30 view .LVU1190
 4198              	.LBE147:
 4199              	.LBE159:
 522:src/console.c **** 	set_menu ( remapped.shift );
 4200              		.loc 2 522 7 is_stmt 1 view .LVU1191
 522:src/console.c **** 	set_menu ( remapped.shift );
 4201              		.loc 2 522 10 is_stmt 0 view .LVU1192
 4202 02f2 2F2D     		cmp	r5, #47
ARM GAS  /tmp/ccrLsn8H.s 			page 117


 4203 02f4 3FF458AF 		beq	.L409
 4204              	.L360:
 527:src/console.c ****       }
 528:src/console.c ****       if (remapped.key_34s == K_SYS) {
 4205              		.loc 2 528 7 is_stmt 1 view .LVU1193
 4206              		.loc 2 528 10 is_stmt 0 view .LVU1194
 4207 02f8 302D     		cmp	r5, #48
 4208 02fa 1BD1     		bne	.L365
 529:src/console.c **** 	SET_ST(STAT_MENU);
 4209              		.loc 2 529 2 is_stmt 1 view .LVU1195
 4210 02fc 2368     		ldr	r3, [r4]
 530:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 4211              		.loc 2 530 2 is_stmt 0 view .LVU1196
 4212 02fe A64D     		ldr	r5, .L417+4
 4213              	.LVL386:
 4214              		.loc 2 530 2 view .LVU1197
 4215 0300 A648     		ldr	r0, .L417+8
 4216 0302 0022     		movs	r2, #0
 529:src/console.c **** 	SET_ST(STAT_MENU);
 4217              		.loc 2 529 2 view .LVU1198
 4218 0304 43F04003 		orr	r3, r3, #64
 4219              		.loc 2 530 2 view .LVU1199
 4220 0308 1146     		mov	r1, r2
 529:src/console.c **** 	SET_ST(STAT_MENU);
 4221              		.loc 2 529 2 view .LVU1200
 4222 030a 2360     		str	r3, [r4]
 4223              		.loc 2 530 2 is_stmt 1 view .LVU1201
 4224 030c A847     		blx	r5
 4225              	.LVL387:
 531:src/console.c **** 	CLR_ST(STAT_MENU);
 4226              		.loc 2 531 2 view .LVU1202
 4227 030e 2368     		ldr	r3, [r4]
 4228 0310 23F04003 		bic	r3, r3, #64
 4229 0314 2360     		str	r3, [r4]
 532:src/console.c **** 	reset_shift();
 4230              		.loc 2 532 2 view .LVU1203
 4231 0316 FFF7FEFF 		bl	reset_shift
 4232              	.LVL388:
 533:src/console.c **** 	remapped =  no_key;
 4233              		.loc 2 533 2 view .LVU1204
 4234              		.loc 2 533 11 is_stmt 0 view .LVU1205
 4235 031a A14B     		ldr	r3, .L417+12
 4236 031c 93E80300 		ldm	r3, {r0, r1}
 4237 0320 0DF1080A 		add	r10, sp, #8
 4238 0324 8AE80300 		stm	r10, {r0, r1}
 4239 0328 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4240              	.LVL389:
 4241              		.loc 2 533 11 view .LVU1206
 4242 032a 8946     		mov	r9, r1
 4243              	.LVL390:
 534:src/console.c **** 	clear_disp();
 4244              		.loc 2 534 2 is_stmt 1 view .LVU1207
 4245 032c FFF7FEFF 		bl	clear_disp
 4246              	.LVL391:
 535:src/console.c **** 	display_current_menu();
 4247              		.loc 2 535 2 view .LVU1208
 4248 0330 FFF7FEFF 		bl	display_current_menu
ARM GAS  /tmp/ccrLsn8H.s 			page 118


 4249              	.LVL392:
 4250              	.L365:
 536:src/console.c ****       }
 537:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 4251              		.loc 2 537 7 view .LVU1209
 4252              		.loc 2 537 10 is_stmt 0 view .LVU1210
 4253 0334 312D     		cmp	r5, #49
 4254 0336 35D0     		beq	.L368
 538:src/console.c **** 	remapped = do_multi (remapped);
 539:src/console.c **** 	display_current_menu();
 540:src/console.c ****       }
 541:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 4255              		.loc 2 541 7 is_stmt 1 view .LVU1211
 4256              		.loc 2 541 10 is_stmt 0 view .LVU1212
 4257 0338 322D     		cmp	r5, #50
 4258 033a 4CD0     		beq	.L367
 4259              	.L411:
 4260              		.loc 2 541 10 view .LVU1213
 4261 033c 0DF1080A 		add	r10, sp, #8
 4262              	.LVL393:
 4263              	.L355:
 542:src/console.c ****       process_keycode_with_shift(remapped);
 4264              		.loc 2 542 7 is_stmt 1 view .LVU1214
 4265              		.loc 2 542 7 is_stmt 0 view .LVU1215
 4266 0340 8DF80850 		strb	r5, [sp, #8]
 4267 0344 CDF80C90 		str	r9, [sp, #12]
 4268 0348 9AE80300 		ldm	r10, {r0, r1}
 4269 034c FFF7FEFF 		bl	process_keycode_with_shift
 4270              	.LVL394:
 543:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4271              		.loc 2 543 7 is_stmt 1 view .LVU1216
 4272              		.loc 2 543 10 is_stmt 0 view .LVU1217
 4273 0350 622D     		cmp	r5, #98
 4274 0352 1FD0     		beq	.L410
 4275              	.LVL395:
 4276              	.L356:
 4277              		.loc 2 543 59 is_stmt 1 view .LVU1218
 4278              	.LBB160:
 4279              	.LBI160:
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 4280              		.loc 2 252 6 view .LVU1219
 4281              	.LBB161:
 253:src/console.c **** }
 4282              		.loc 2 253 5 view .LVU1220
 253:src/console.c **** }
 4283              		.loc 2 253 19 is_stmt 0 view .LVU1221
 4284 0354 934B     		ldr	r3, .L417+16
 4285 0356 9847     		blx	r3
 4286              	.LVL396:
 253:src/console.c **** }
 4287              		.loc 2 253 17 view .LVU1222
 4288 0358 934B     		ldr	r3, .L417+20
 4289 035a 1860     		str	r0, [r3]
 254:src/console.c **** 
 4290              		.loc 2 254 1 view .LVU1223
 4291 035c 87E6     		b	.L314
 4292              	.LVL397:
ARM GAS  /tmp/ccrLsn8H.s 			page 119


 4293              	.L329:
 254:src/console.c **** 
 4294              		.loc 2 254 1 view .LVU1224
 4295              	.LBE161:
 4296              	.LBE160:
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4297              		.loc 2 511 10 is_stmt 1 view .LVU1225
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4298              		.loc 2 511 15 is_stmt 0 view .LVU1226
 4299 035e 934B     		ldr	r3, .L417+24
 4300 0360 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4301              		.loc 2 511 13 view .LVU1227
 4302 0362 DB07     		lsls	r3, r3, #31
 4303 0364 7FF5BCAE 		bpl	.L330
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4304              		.loc 2 511 37 discriminator 1 view .LVU1228
 4305 0368 FFF7FEFF 		bl	DM42_Ticker
 4306              	.LVL398:
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4307              		.loc 2 511 37 discriminator 1 view .LVU1229
 4308 036c 904A     		ldr	r2, .L417+28
 4309 036e 914B     		ldr	r3, .L417+32
 4310 0370 02FB0030 		mla	r0, r2, r0, r3
 511:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4311              		.loc 2 511 32 discriminator 1 view .LVU1230
 4312 0374 B0F1333F 		cmp	r0, #858993459
 4313 0378 BFF4B2AE 		bcs	.L330
 512:src/console.c ****       lcd_refresh();
 4314              		.loc 2 512 7 is_stmt 1 view .LVU1231
 512:src/console.c ****       lcd_refresh();
 4315              		.loc 2 512 21 is_stmt 0 view .LVU1232
 4316 037c 8420     		movs	r0, #132
 4317 037e FFF7FEFF 		bl	is_dot
 4318              	.LVL399:
 512:src/console.c ****       lcd_refresh();
 4319              		.loc 2 512 7 view .LVU1233
 4320 0382 B0FA80F1 		clz	r1, r0
 4321 0386 4909     		lsrs	r1, r1, #5
 4322 0388 8420     		movs	r0, #132
 4323 038a FFF7FEFF 		bl	dot
 4324              	.LVL400:
 513:src/console.c ****     }
 4325              		.loc 2 513 7 is_stmt 1 view .LVU1234
 4326 038e 8A4B     		ldr	r3, .L417+36
 4327 0390 9847     		blx	r3
 4328              	.LVL401:
 4329 0392 A5E6     		b	.L330
 4330              	.LVL402:
 4331              	.L410:
 4332              		.loc 2 543 43 is_stmt 0 discriminator 2 view .LVU1235
 4333 0394 894B     		ldr	r3, .L417+40
 4334 0396 1B68     		ldr	r3, [r3]
 4335 0398 002B     		cmp	r3, #0
 4336 039a 3FF468AE 		beq	.L314
 4337 039e D9E7     		b	.L356
 4338              	.LVL403:
ARM GAS  /tmp/ccrLsn8H.s 			page 120


 4339              	.L334:
 522:src/console.c **** 	set_menu ( remapped.shift );
 4340              		.loc 2 522 7 is_stmt 1 view .LVU1236
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4341              		.loc 2 528 7 view .LVU1237
 537:src/console.c **** 	remapped = do_multi (remapped);
 4342              		.loc 2 537 7 view .LVU1238
 4343              	.LBB162:
 4344              	.LBB148:
 4345              	.LBB145:
  68:src/console.c ****   }
 4346              		.loc 2 68 12 is_stmt 0 view .LVU1239
 4347 03a0 4FF00C09 		mov	r9, #12
 4348              	.LVL404:
 4349              	.L368:
  68:src/console.c ****   }
 4350              		.loc 2 68 12 view .LVU1240
 4351              	.LBE145:
 4352              	.LBE148:
 4353              	.LBE162:
 538:src/console.c **** 	display_current_menu();
 4354              		.loc 2 538 2 is_stmt 1 view .LVU1241
 538:src/console.c **** 	display_current_menu();
 4355              		.loc 2 538 13 is_stmt 0 view .LVU1242
 4356 03a4 3123     		movs	r3, #49
 4357 03a6 CDF80C90 		str	r9, [sp, #12]
 4358 03aa 8DF80830 		strb	r3, [sp, #8]
 4359 03ae 6D46     		mov	r5, sp
 4360 03b0 0DF1080A 		add	r10, sp, #8
 4361 03b4 9AE80600 		ldm	r10, {r1, r2}
 4362 03b8 2846     		mov	r0, r5
 4363 03ba FFF7FEFF 		bl	do_multi
 4364              	.LVL405:
 4365 03be 95E80300 		ldm	r5, {r0, r1}
 4366 03c2 8AE80300 		stm	r10, {r0, r1}
 4367 03c6 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 4368              	.LVL406:
 538:src/console.c **** 	display_current_menu();
 4369              		.loc 2 538 13 view .LVU1243
 4370 03ca DDF80C90 		ldr	r9, [sp, #12]
 4371              	.LVL407:
 539:src/console.c ****       }
 4372              		.loc 2 539 2 is_stmt 1 view .LVU1244
 4373 03ce FFF7FEFF 		bl	display_current_menu
 4374              	.LVL408:
 541:src/console.c ****       process_keycode_with_shift(remapped);
 4375              		.loc 2 541 7 view .LVU1245
 541:src/console.c ****       process_keycode_with_shift(remapped);
 4376              		.loc 2 541 10 is_stmt 0 view .LVU1246
 4377 03d2 322D     		cmp	r5, #50
 4378 03d4 B2D1     		bne	.L411
 4379              	.L367:
 544:src/console.c ****     }
 545:src/console.c ****   }
 546:src/console.c ****   save_ram_file(0);
 4380              		.loc 2 546 3 is_stmt 1 view .LVU1247
 4381 03d6 0020     		movs	r0, #0
ARM GAS  /tmp/ccrLsn8H.s 			page 121


 547:src/console.c ****   //  free_storage();
 548:src/console.c ****   return;
 549:src/console.c **** }
 4382              		.loc 2 549 1 is_stmt 0 view .LVU1248
 4383 03d8 38B0     		add	sp, sp, #224
 4384              		.cfi_remember_state
 4385              		.cfi_def_cfa_offset 32
 4386              		@ sp needed
 4387 03da BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 4388              		.cfi_restore 14
 4389              		.cfi_restore 10
 4390              		.cfi_restore 9
 4391              		.cfi_restore 8
 4392              		.cfi_restore 7
 4393              		.cfi_restore 6
 4394              		.cfi_restore 5
 4395              		.cfi_restore 4
 4396              		.cfi_def_cfa_offset 0
 4397              	.LVL409:
 546:src/console.c ****   //  free_storage();
 4398              		.loc 2 546 3 view .LVU1249
 4399 03de FFF7FEBF 		b	save_ram_file
 4400              	.LVL410:
 4401              	.L397:
 4402              		.cfi_restore_state
 4403              	.LBB163:
 4404              	.LBB149:
  72:src/console.c ****   }
 4405              		.loc 2 72 5 is_stmt 1 view .LVU1250
  72:src/console.c ****   }
 4406              		.loc 2 72 27 is_stmt 0 view .LVU1251
 4407 03e2 774B     		ldr	r3, .L417+44
 4408              	.L394:
 124:src/console.c ****     break;
 4409              		.loc 2 124 26 view .LVU1252
 4410 03e4 03EBC502 		add	r2, r3, r5, lsl #3
 4411 03e8 92E80300 		ldm	r2, {r0, r1}
 4412 03ec 0DF1080A 		add	r10, sp, #8
 4413 03f0 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4414              	.LVL411:
 124:src/console.c ****     break;
 4415              		.loc 2 124 26 view .LVU1253
 4416 03f4 8946     		mov	r9, r1
 4417              	.LVL412:
 124:src/console.c ****     break;
 4418              		.loc 2 124 26 view .LVU1254
 4419 03f6 8AE80300 		stm	r10, {r0, r1}
 4420 03fa 7AE7     		b	.L333
 4421              	.LVL413:
 4422              	.L396:
  64:src/console.c **** 
 4423              		.loc 2 64 16 is_stmt 1 view .LVU1255
  64:src/console.c **** 
 4424              		.loc 2 64 23 is_stmt 0 view .LVU1256
 4425 03fc 714B     		ldr	r3, .L417+48
 4426 03fe 70E7     		b	.L395
 4427              	.LVL414:
ARM GAS  /tmp/ccrLsn8H.s 			page 122


 4428              	.L407:
  64:src/console.c **** 
 4429              		.loc 2 64 23 view .LVU1257
 4430              	.LBE149:
 4431              	.LBE163:
 4432              	.LBB164:
 4433              	.LBB157:
 125:src/menu.c    ****   }
 4434              		.loc 1 125 5 is_stmt 1 view .LVU1258
 125:src/menu.c    ****   }
 4435              		.loc 1 125 18 is_stmt 0 view .LVU1259
 4436 0400 7149     		ldr	r1, .L417+52
 4437              	.LVL415:
 125:src/menu.c    ****   }
 4438              		.loc 1 125 18 view .LVU1260
 4439 0402 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4440 0404 1170     		strb	r1, [r2]
 4441 0406 DCE6     		b	.L362
 4442              	.LVL416:
 4443              	.L349:
 125:src/menu.c    ****   }
 4444              		.loc 1 125 18 view .LVU1261
 4445              	.LBE157:
 4446              	.LBE164:
 4447              	.LBB165:
 4448              	.LBB150:
  95:src/console.c ****   }
 4449              		.loc 2 95 5 is_stmt 1 view .LVU1262
  95:src/console.c ****   }
 4450              		.loc 2 95 9 is_stmt 0 view .LVU1263
 4451 0408 FFF7FEFF 		bl	cur_shift
 4452              	.LVL417:
  95:src/console.c ****   }
 4453              		.loc 2 95 8 view .LVU1264
 4454 040c 0128     		cmp	r0, #1
 4455 040e 56D0     		beq	.L412
 4456              	.L336:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4457              		.loc 2 98 3 is_stmt 1 view .LVU1265
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4458              		.loc 2 98 8 is_stmt 0 view .LVU1266
 4459 0410 FFF7FEFF 		bl	get_alpha_state
 4460              	.LVL418:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4461              		.loc 2 98 6 view .LVU1267
 4462 0414 D8B3     		cbz	r0, .L350
  99:src/console.c ****       switch (cur_shift()) { 
 4463              		.loc 2 99 5 is_stmt 1 view .LVU1268
  99:src/console.c ****       switch (cur_shift()) { 
 4464              		.loc 2 99 8 is_stmt 0 view .LVU1269
 4465 0416 1C2D     		cmp	r5, #28
 4466 0418 00F08580 		beq	.L413
 116:src/console.c ****   }
 4467              		.loc 2 116 5 is_stmt 1 view .LVU1270
 116:src/console.c ****   }
 4468              		.loc 2 116 26 is_stmt 0 view .LVU1271
 4469 041c 6B4B     		ldr	r3, .L417+56
ARM GAS  /tmp/ccrLsn8H.s 			page 123


 4470 041e E1E7     		b	.L394
 4471              	.L343:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4472              		.loc 2 79 5 is_stmt 1 view .LVU1272
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4473              		.loc 2 79 9 is_stmt 0 view .LVU1273
 4474 0420 FFF7FEFF 		bl	cur_shift
 4475              	.LVL419:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4476              		.loc 2 79 8 view .LVU1274
 4477 0424 0028     		cmp	r0, #0
 4478 0426 7FF481AE 		bne	.L344
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4479              		.loc 2 79 33 is_stmt 1 view .LVU1275
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4480              		.loc 2 79 51 is_stmt 0 view .LVU1276
 4481 042a DDE90801 		ldrd	r0, r1, [sp, #32]
 4482 042e 0DF1080A 		add	r10, sp, #8
 4483 0432 8AE80300 		stm	r10, {r0, r1}
 4484 0436 9DF82050 		ldrb	r5, [sp, #32]	@ zero_extendqisi2
 4485              	.LVL420:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4486              		.loc 2 79 51 view .LVU1277
 4487 043a 8946     		mov	r9, r1
 4488              	.LVL421:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4489              		.loc 2 79 51 view .LVU1278
 4490 043c 59E7     		b	.L333
 4491              	.LVL422:
 4492              	.L405:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4493              		.loc 2 91 33 is_stmt 1 view .LVU1279
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4494              		.loc 2 91 51 is_stmt 0 view .LVU1280
 4495 043e DDE92801 		ldrd	r0, r1, [sp, #160]
 4496 0442 0DF1080A 		add	r10, sp, #8
 4497 0446 8AE80300 		stm	r10, {r0, r1}
 4498 044a 9DF8A050 		ldrb	r5, [sp, #160]	@ zero_extendqisi2
 4499              	.LVL423:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4500              		.loc 2 91 51 view .LVU1281
 4501 044e 8946     		mov	r9, r1
 4502              	.LVL424:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4503              		.loc 2 91 51 view .LVU1282
 4504 0450 4FE7     		b	.L333
 4505              	.LVL425:
 4506              	.L403:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4507              		.loc 2 88 33 is_stmt 1 view .LVU1283
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4508              		.loc 2 88 51 is_stmt 0 view .LVU1284
 4509 0452 DDE92001 		ldrd	r0, r1, [sp, #128]
 4510 0456 0DF1080A 		add	r10, sp, #8
 4511 045a 8AE80300 		stm	r10, {r0, r1}
 4512 045e 9DF88050 		ldrb	r5, [sp, #128]	@ zero_extendqisi2
 4513              	.LVL426:
ARM GAS  /tmp/ccrLsn8H.s 			page 124


  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4514              		.loc 2 88 51 view .LVU1285
 4515 0462 8946     		mov	r9, r1
 4516              	.LVL427:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4517              		.loc 2 88 51 view .LVU1286
 4518 0464 45E7     		b	.L333
 4519              	.LVL428:
 4520              	.L401:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4521              		.loc 2 85 33 is_stmt 1 view .LVU1287
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4522              		.loc 2 85 51 is_stmt 0 view .LVU1288
 4523 0466 DDE91801 		ldrd	r0, r1, [sp, #96]
 4524 046a 0DF1080A 		add	r10, sp, #8
 4525 046e 8AE80300 		stm	r10, {r0, r1}
 4526 0472 9DF86050 		ldrb	r5, [sp, #96]	@ zero_extendqisi2
 4527              	.LVL429:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4528              		.loc 2 85 51 view .LVU1289
 4529 0476 8946     		mov	r9, r1
 4530              	.LVL430:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4531              		.loc 2 85 51 view .LVU1290
 4532 0478 3BE7     		b	.L333
 4533              	.LVL431:
 4534              	.L399:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4535              		.loc 2 82 33 is_stmt 1 view .LVU1291
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4536              		.loc 2 82 51 is_stmt 0 view .LVU1292
 4537 047a DDE91001 		ldrd	r0, r1, [sp, #64]
 4538 047e 0DF1080A 		add	r10, sp, #8
 4539 0482 8AE80300 		stm	r10, {r0, r1}
 4540 0486 9DF84050 		ldrb	r5, [sp, #64]	@ zero_extendqisi2
 4541              	.LVL432:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4542              		.loc 2 82 51 view .LVU1293
 4543 048a 8946     		mov	r9, r1
 4544              	.LVL433:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4545              		.loc 2 82 51 view .LVU1294
 4546 048c 31E7     		b	.L333
 4547              	.LVL434:
 4548              	.L350:
 119:src/console.c ****   case SHIFT_N:    
 4549              		.loc 2 119 3 is_stmt 1 view .LVU1295
 119:src/console.c ****   case SHIFT_N:    
 4550              		.loc 2 119 11 is_stmt 0 view .LVU1296
 4551 048e FFF7FEFF 		bl	cur_shift
 4552              	.LVL435:
 119:src/console.c ****   case SHIFT_N:    
 4553              		.loc 2 119 3 view .LVU1297
 4554 0492 0128     		cmp	r0, #1
 4555 0494 45D0     		beq	.L357
 4556 0496 0228     		cmp	r0, #2
 4557 0498 02D0     		beq	.L358
ARM GAS  /tmp/ccrLsn8H.s 			page 125


 4558 049a 70B1     		cbz	r0, .L359
  58:src/console.c **** 
 4559              		.loc 2 58 41 view .LVU1298
 4560 049c EDB2     		uxtb	r5, r5
 4561              	.LVL436:
  58:src/console.c **** 
 4562              		.loc 2 58 41 view .LVU1299
 4563 049e 28E7     		b	.L333
 4564              	.LVL437:
 4565              	.L358:
 125:src/console.c ****   case SHIFT_G:
 4566              		.loc 2 125 5 is_stmt 1 view .LVU1300
 127:src/console.c ****     break;
 4567              		.loc 2 127 5 view .LVU1301
 127:src/console.c ****     break;
 4568              		.loc 2 127 26 is_stmt 0 view .LVU1302
 4569 04a0 4B4B     		ldr	r3, .L417+60
 4570 04a2 03EBC502 		add	r2, r3, r5, lsl #3
 4571 04a6 92E80300 		ldm	r2, {r0, r1}
 4572 04aa 0DF1080A 		add	r10, sp, #8
 4573 04ae 8AE80300 		stm	r10, {r0, r1}
 4574 04b2 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4575              	.LVL438:
 127:src/console.c ****     break;
 4576              		.loc 2 127 26 view .LVU1303
 4577 04b6 8946     		mov	r9, r1
 4578              	.LVL439:
 127:src/console.c ****     break;
 4579              		.loc 2 127 26 view .LVU1304
 4580 04b8 1BE7     		b	.L333
 4581              	.LVL440:
 4582              	.L359:
 121:src/console.c ****     break;
 4583              		.loc 2 121 5 is_stmt 1 view .LVU1305
 121:src/console.c ****     break;
 4584              		.loc 2 121 24 is_stmt 0 view .LVU1306
 4585 04ba 464B     		ldr	r3, .L417+64
 4586 04bc 92E7     		b	.L394
 4587              	.L412:
  95:src/console.c ****   }
 4588              		.loc 2 95 33 is_stmt 1 view .LVU1307
  95:src/console.c ****   }
 4589              		.loc 2 95 51 is_stmt 0 view .LVU1308
 4590 04be DDE93201 		ldrd	r0, r1, [sp, #200]
 4591 04c2 0DF1080A 		add	r10, sp, #8
 4592 04c6 8AE80300 		stm	r10, {r0, r1}
 4593 04ca 9DF8C850 		ldrb	r5, [sp, #200]	@ zero_extendqisi2
 4594              	.LVL441:
  95:src/console.c ****   }
 4595              		.loc 2 95 51 view .LVU1309
 4596 04ce 8946     		mov	r9, r1
 4597              	.LVL442:
  95:src/console.c ****   }
 4598              		.loc 2 95 51 view .LVU1310
 4599 04d0 0FE7     		b	.L333
 4600              	.LVL443:
 4601              	.L404:
ARM GAS  /tmp/ccrLsn8H.s 			page 126


  89:src/console.c ****   case KEY_F5:
 4602              		.loc 2 89 33 is_stmt 1 view .LVU1311
  89:src/console.c ****   case KEY_F5:
 4603              		.loc 2 89 51 is_stmt 0 view .LVU1312
 4604 04d2 DDE92201 		ldrd	r0, r1, [sp, #136]
 4605 04d6 0DF1080A 		add	r10, sp, #8
 4606 04da 8AE80300 		stm	r10, {r0, r1}
 4607 04de 9DF88850 		ldrb	r5, [sp, #136]	@ zero_extendqisi2
 4608              	.LVL444:
  89:src/console.c ****   case KEY_F5:
 4609              		.loc 2 89 51 view .LVU1313
 4610 04e2 8946     		mov	r9, r1
 4611              	.LVL445:
  89:src/console.c ****   case KEY_F5:
 4612              		.loc 2 89 51 view .LVU1314
 4613 04e4 05E7     		b	.L333
 4614              	.LVL446:
 4615              	.L406:
  92:src/console.c ****   case KEY_F6:
 4616              		.loc 2 92 33 is_stmt 1 view .LVU1315
  92:src/console.c ****   case KEY_F6:
 4617              		.loc 2 92 51 is_stmt 0 view .LVU1316
 4618 04e6 DDE92A01 		ldrd	r0, r1, [sp, #168]
 4619 04ea 0DF1080A 		add	r10, sp, #8
 4620 04ee 8AE80300 		stm	r10, {r0, r1}
 4621 04f2 9DF8A850 		ldrb	r5, [sp, #168]	@ zero_extendqisi2
 4622              	.LVL447:
  92:src/console.c ****   case KEY_F6:
 4623              		.loc 2 92 51 view .LVU1317
 4624 04f6 8946     		mov	r9, r1
 4625              	.LVL448:
  92:src/console.c ****   case KEY_F6:
 4626              		.loc 2 92 51 view .LVU1318
 4627 04f8 FBE6     		b	.L333
 4628              	.LVL449:
 4629              	.L402:
  86:src/console.c ****   case KEY_F4:
 4630              		.loc 2 86 33 is_stmt 1 view .LVU1319
  86:src/console.c ****   case KEY_F4:
 4631              		.loc 2 86 51 is_stmt 0 view .LVU1320
 4632 04fa DDE91A01 		ldrd	r0, r1, [sp, #104]
 4633 04fe 0DF1080A 		add	r10, sp, #8
 4634 0502 8AE80300 		stm	r10, {r0, r1}
 4635 0506 9DF86850 		ldrb	r5, [sp, #104]	@ zero_extendqisi2
 4636              	.LVL450:
  86:src/console.c ****   case KEY_F4:
 4637              		.loc 2 86 51 view .LVU1321
 4638 050a 8946     		mov	r9, r1
 4639              	.LVL451:
  86:src/console.c ****   case KEY_F4:
 4640              		.loc 2 86 51 view .LVU1322
 4641 050c F1E6     		b	.L333
 4642              	.LVL452:
 4643              	.L400:
  83:src/console.c ****   case KEY_F3:
 4644              		.loc 2 83 33 is_stmt 1 view .LVU1323
  83:src/console.c ****   case KEY_F3:
ARM GAS  /tmp/ccrLsn8H.s 			page 127


 4645              		.loc 2 83 51 is_stmt 0 view .LVU1324
 4646 050e DDE91201 		ldrd	r0, r1, [sp, #72]
 4647 0512 0DF1080A 		add	r10, sp, #8
 4648 0516 8AE80300 		stm	r10, {r0, r1}
 4649 051a 9DF84850 		ldrb	r5, [sp, #72]	@ zero_extendqisi2
 4650              	.LVL453:
  83:src/console.c ****   case KEY_F3:
 4651              		.loc 2 83 51 view .LVU1325
 4652 051e 8946     		mov	r9, r1
 4653              	.LVL454:
  83:src/console.c ****   case KEY_F3:
 4654              		.loc 2 83 51 view .LVU1326
 4655 0520 E7E6     		b	.L333
 4656              	.LVL455:
 4657              	.L357:
 122:src/console.c ****   case SHIFT_F:
 4658              		.loc 2 122 5 is_stmt 1 view .LVU1327
 124:src/console.c ****     break;
 4659              		.loc 2 124 5 view .LVU1328
 124:src/console.c ****     break;
 4660              		.loc 2 124 26 is_stmt 0 view .LVU1329
 4661 0522 2D4B     		ldr	r3, .L417+68
 4662 0524 5EE7     		b	.L394
 4663              	.L413:
 100:src/console.c ****       case SHIFT_N:
 4664              		.loc 2 100 7 is_stmt 1 view .LVU1330
 100:src/console.c ****       case SHIFT_N:
 4665              		.loc 2 100 15 is_stmt 0 view .LVU1331
 4666 0526 FFF7FEFF 		bl	cur_shift
 4667              	.LVL456:
 100:src/console.c ****       case SHIFT_N:
 4668              		.loc 2 100 7 view .LVU1332
 4669 052a 0328     		cmp	r0, #3
 4670 052c 28D8     		bhi	.L352
 4671 052e 0128     		cmp	r0, #1
 4672 0530 11D8     		bhi	.L353
 4673 0532 E0B1     		cbz	r0, .L414
 103:src/console.c ****       case SHIFT_F:
 4674              		.loc 2 103 2 is_stmt 1 view .LVU1333
 105:src/console.c **** 	break;
 4675              		.loc 2 105 2 view .LVU1334
 105:src/console.c **** 	break;
 4676              		.loc 2 105 23 is_stmt 0 view .LVU1335
 4677 0534 294B     		ldr	r3, .L417+72
 4678 0536 93E80300 		ldm	r3, {r0, r1}
 4679 053a 0DF1080A 		add	r10, sp, #8
 4680 053e 8AE80300 		stm	r10, {r0, r1}
 4681              	.LVL457:
 105:src/console.c **** 	break;
 4682              		.loc 2 105 23 view .LVU1336
 4683              	.LBE150:
 4684              	.LBE165:
 522:src/console.c **** 	set_menu ( remapped.shift );
 4685              		.loc 2 522 7 is_stmt 1 view .LVU1337
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4686              		.loc 2 528 7 view .LVU1338
 537:src/console.c **** 	remapped = do_multi (remapped);
ARM GAS  /tmp/ccrLsn8H.s 			page 128


 4687              		.loc 2 537 7 view .LVU1339
 541:src/console.c ****       process_keycode_with_shift(remapped);
 4688              		.loc 2 541 7 view .LVU1340
 542:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4689              		.loc 2 542 7 view .LVU1341
 542:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4690              		.loc 2 542 7 is_stmt 0 view .LVU1342
 4691 0542 2A22     		movs	r2, #42
 4692 0544 0023     		movs	r3, #0
 4693 0546 8DF80820 		strb	r2, [sp, #8]
 4694 054a 0393     		str	r3, [sp, #12]
 4695 054c 9AE80300 		ldm	r10, {r0, r1}
 4696 0550 FFF7FEFF 		bl	process_keycode_with_shift
 4697              	.LVL458:
 543:src/console.c ****     }
 4698              		.loc 2 543 7 is_stmt 1 view .LVU1343
 4699 0554 FEE6     		b	.L356
 4700              	.LVL459:
 4701              	.L353:
 4702              	.LBB166:
 4703              	.LBB151:
 106:src/console.c ****       case SHIFT_G:
 4704              		.loc 2 106 2 view .LVU1344
 108:src/console.c **** 	break;
 4705              		.loc 2 108 2 view .LVU1345
 108:src/console.c **** 	break;
 4706              		.loc 2 108 9 is_stmt 0 view .LVU1346
 4707 0556 224B     		ldr	r3, .L417+76
 4708 0558 C3E6     		b	.L395
 4709              	.L398:
  80:src/console.c ****   case KEY_F2:
 4710              		.loc 2 80 33 is_stmt 1 view .LVU1347
  80:src/console.c ****   case KEY_F2:
 4711              		.loc 2 80 51 is_stmt 0 view .LVU1348
 4712 055a DDE90A01 		ldrd	r0, r1, [sp, #40]
 4713 055e 0DF1080A 		add	r10, sp, #8
 4714 0562 8AE80300 		stm	r10, {r0, r1}
 4715 0566 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 4716              	.LVL460:
  80:src/console.c ****   case KEY_F2:
 4717              		.loc 2 80 51 view .LVU1349
 4718 056a 8946     		mov	r9, r1
 4719              	.LVL461:
  80:src/console.c ****   case KEY_F2:
 4720              		.loc 2 80 51 view .LVU1350
 4721 056c C1E6     		b	.L333
 4722              	.LVL462:
 4723              	.L414:
 102:src/console.c **** 	break;
 4724              		.loc 2 102 2 is_stmt 1 view .LVU1351
 102:src/console.c **** 	break;
 4725              		.loc 2 102 21 is_stmt 0 view .LVU1352
 4726 056e 1D4B     		ldr	r3, .L417+80
 4727 0570 93E80300 		ldm	r3, {r0, r1}
 4728 0574 0DF1080A 		add	r10, sp, #8
 4729 0578 8AE80300 		stm	r10, {r0, r1}
 4730              	.LVL463:
ARM GAS  /tmp/ccrLsn8H.s 			page 129


 102:src/console.c **** 	break;
 4731              		.loc 2 102 21 view .LVU1353
 4732              	.LBE151:
 4733              	.LBE166:
 522:src/console.c **** 	set_menu ( remapped.shift );
 4734              		.loc 2 522 7 is_stmt 1 view .LVU1354
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4735              		.loc 2 528 7 view .LVU1355
 537:src/console.c **** 	remapped = do_multi (remapped);
 4736              		.loc 2 537 7 view .LVU1356
 541:src/console.c ****       process_keycode_with_shift(remapped);
 4737              		.loc 2 541 7 view .LVU1357
 4738              	.LBB167:
 4739              	.LBB152:
 102:src/console.c **** 	break;
 4740              		.loc 2 102 21 is_stmt 0 view .LVU1358
 4741 057c 2925     		movs	r5, #41
 4742              	.LVL464:
 102:src/console.c **** 	break;
 4743              		.loc 2 102 21 view .LVU1359
 4744 057e DFE6     		b	.L355
 4745              	.LVL465:
 4746              	.L352:
 102:src/console.c **** 	break;
 4747              		.loc 2 102 21 view .LVU1360
 4748              	.LBE152:
 4749              	.LBE167:
 522:src/console.c **** 	set_menu ( remapped.shift );
 4750              		.loc 2 522 7 is_stmt 1 view .LVU1361
 528:src/console.c **** 	SET_ST(STAT_MENU);
 4751              		.loc 2 528 7 view .LVU1362
 537:src/console.c **** 	remapped = do_multi (remapped);
 4752              		.loc 2 537 7 view .LVU1363
 541:src/console.c ****       process_keycode_with_shift(remapped);
 4753              		.loc 2 541 7 view .LVU1364
 542:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4754              		.loc 2 542 7 view .LVU1365
 542:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4755              		.loc 2 542 7 is_stmt 0 view .LVU1366
 4756 0580 0023     		movs	r3, #0
 4757 0582 8DF80850 		strb	r5, [sp, #8]
 4758 0586 0298     		ldr	r0, [sp, #8]
 4759 0588 0393     		str	r3, [sp, #12]
 4760 058a 1946     		mov	r1, r3
 4761 058c FFF7FEFF 		bl	process_keycode_with_shift
 4762              	.LVL466:
 543:src/console.c ****     }
 4763              		.loc 2 543 7 is_stmt 1 view .LVU1367
 4764 0590 E0E6     		b	.L356
 4765              	.L418:
 4766 0592 00BF     		.align	2
 4767              	.L417:
 4768 0594 00000000 		.word	.LANCHOR19
 4769 0598 59030008 		.word	134218585
 4770 059c 00000000 		.word	.LANCHOR18
 4771 05a0 00000000 		.word	.LANCHOR10
 4772 05a4 B9040008 		.word	134218937
ARM GAS  /tmp/ccrLsn8H.s 			page 130


 4773 05a8 00000000 		.word	.LANCHOR8
 4774 05ac 00000000 		.word	StopWatchStatus
 4775 05b0 CDCCCCCC 		.word	-858993459
 4776 05b4 99999919 		.word	429496729
 4777 05b8 31020008 		.word	134218289
 4778 05bc 00000000 		.word	JustStopped
 4779 05c0 00000000 		.word	.LANCHOR12
 4780 05c4 00000000 		.word	.LANCHOR11
 4781 05c8 00000000 		.word	.LANCHOR2
 4782 05cc 00000000 		.word	.LANCHOR16
 4783 05d0 00000000 		.word	.LANCHOR17
 4784 05d4 00000000 		.word	.LANCHOR13
 4785 05d8 00000000 		.word	.LANCHOR14
 4786 05dc E0000000 		.word	.LANCHOR14+224
 4787 05e0 00000000 		.word	.LANCHOR15
 4788 05e4 E0000000 		.word	.LANCHOR13+224
 4789              		.cfi_endproc
 4790              	.LFE34:
 4792              		.global	n_p
 4793              		.comm	print_string,22,4
 4794              		.global	spaces
 4795              		.global	release
 4796              		.global	h_shift
 4797              		.global	g_shift
 4798              		.global	f_shift
 4799              		.global	heartbeat
 4800              		.global	no_key
 4801              		.global	MID_MENU
 4802              		.section	.rodata.str1.4,"aMS",%progbits,1
 4803              		.align	2
 4804              	.LC18:
 4805 0000 53797374 		.ascii	"System!\000"
 4805      656D2100 
 4806              		.global	mid_menu
 4807              		.global	default_menu
 4808              		.global	last_menu
 4809              		.global	current_menu
 4810              		.global	cmplx_key_string
 4811              		.align	2
 4812              	.LC19:
 4813 0008 43505800 		.ascii	"CPX\000"
 4814              		.global	arrow_key_string
 4815              		.align	2
 4816              	.LC20:
 4817 000c 2D2D0D00 		.ascii	"--\015\000"
 4818              		.global	UserMenu
 4819              		.section	.rodata
 4820              		.align	2
 4821              		.set	.LANCHOR5,. + 0
 4822              	.LC0:
 4823 0000 2C       		.byte	44
 4824 0001 000000   		.space	3
 4825 0004 FFFFFFFF 		.word	-1
 4826              	.LC1:
 4827 0008 2D       		.byte	45
 4828 0009 000000   		.space	3
 4829 000c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccrLsn8H.s 			page 131


 4830              	.LC14:
 4831 0010 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4831      2A2B0708 
 4831      091C0B0C 
 4831      0D0E0F
 4832 001f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4832      13141516 
 4832      00121819 
 4832      1A
 4833 002c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4833      1E1F2000 
 4833      21222324 
 4833      25
 4834              		.section	.bss.current_menu,"aw",%nobits
 4835              		.set	.LANCHOR1,. + 0
 4838              	current_menu:
 4839 0000 00       		.space	1
 4840              		.section	.bss.default_menu,"aw",%nobits
 4841              		.set	.LANCHOR2,. + 0
 4844              	default_menu:
 4845 0000 00       		.space	1
 4846              		.section	.bss.last_menu,"aw",%nobits
 4847              		.set	.LANCHOR3,. + 0
 4850              	last_menu:
 4851 0000 00       		.space	1
 4852              		.section	.bss.mdots,"aw",%nobits
 4853              		.align	2
 4854              		.set	.LANCHOR0,. + 0
 4857              	mdots:
 4858 0000 00000000 		.space	400
 4858      00000000 
 4858      00000000 
 4858      00000000 
 4858      00000000 
 4859              		.section	.bss.n_p,"aw",%nobits
 4860              		.align	2
 4863              	n_p:
 4864 0000 00000000 		.space	4
 4865              		.section	.bss.start_ticks,"aw",%nobits
 4866              		.align	2
 4867              		.set	.LANCHOR8,. + 0
 4870              	start_ticks:
 4871 0000 00000000 		.space	4
 4872              		.section	.data.UserMenu,"aw"
 4873              		.align	2
 4874              		.set	.LANCHOR4,. + 0
 4877              	UserMenu:
 4878 0000 55736572 		.ascii	"User Menu\000"
 4878      204D656E 
 4878      7500
 4879 000a 00000000 		.space	5
 4879      00
 4880 000f 00       		.space	1
 4881 0010 2E       		.byte	46
 4882 0011 000000   		.space	3
 4883 0014 FFFFFFFF 		.word	-1
 4884 0018 2E       		.byte	46
ARM GAS  /tmp/ccrLsn8H.s 			page 132


 4885 0019 000000   		.space	3
 4886 001c FFFFFFFF 		.word	-1
 4887 0020 00       		.ascii	"\000"
 4888 0021 00000000 		.space	7
 4888      000000
 4889 0028 00       		.ascii	"\000"
 4890 0029 00000000 		.space	7
 4890      000000
 4891 0030 2E       		.byte	46
 4892 0031 000000   		.space	3
 4893 0034 FFFFFFFF 		.word	-1
 4894 0038 2E       		.byte	46
 4895 0039 000000   		.space	3
 4896 003c FFFFFFFF 		.word	-1
 4897 0040 00       		.ascii	"\000"
 4898 0041 00000000 		.space	7
 4898      000000
 4899 0048 00       		.ascii	"\000"
 4900 0049 00000000 		.space	7
 4900      000000
 4901 0050 2E       		.byte	46
 4902 0051 000000   		.space	3
 4903 0054 FFFFFFFF 		.word	-1
 4904 0058 2E       		.byte	46
 4905 0059 000000   		.space	3
 4906 005c FFFFFFFF 		.word	-1
 4907 0060 00       		.ascii	"\000"
 4908 0061 00000000 		.space	7
 4908      000000
 4909 0068 00       		.ascii	"\000"
 4910 0069 00000000 		.space	7
 4910      000000
 4911 0070 2E       		.byte	46
 4912 0071 000000   		.space	3
 4913 0074 FFFFFFFF 		.word	-1
 4914 0078 2E       		.byte	46
 4915 0079 000000   		.space	3
 4916 007c FFFFFFFF 		.word	-1
 4917 0080 00       		.ascii	"\000"
 4918 0081 00000000 		.space	7
 4918      000000
 4919 0088 00       		.ascii	"\000"
 4920 0089 00000000 		.space	7
 4920      000000
 4921 0090 2C       		.byte	44
 4922 0091 000000   		.space	3
 4923 0094 FFFFFFFF 		.word	-1
 4924 0098 2E       		.byte	46
 4925 0099 000000   		.space	3
 4926 009c FFFFFFFF 		.word	-1
 4927 00a0 2D2D0D00 		.ascii	"--\015\000"
 4928 00a4 00000000 		.space	4
 4929 00a8 00       		.ascii	"\000"
 4930 00a9 00000000 		.space	7
 4930      000000
 4931 00b0 2D       		.byte	45
 4932 00b1 000000   		.space	3
ARM GAS  /tmp/ccrLsn8H.s 			page 133


 4933 00b4 FFFFFFFF 		.word	-1
 4934 00b8 31       		.byte	49
 4935 00b9 000000   		.space	3
 4936 00bc 0B000000 		.word	11
 4937 00c0 43505800 		.ascii	"CPX\000"
 4938 00c4 00000000 		.space	4
 4939 00c8 00       		.ascii	"\000"
 4940 00c9 00000000 		.space	7
 4940      000000
 4941              		.section	.data.arrow_key_string,"aw"
 4942              		.align	2
 4943              		.set	.LANCHOR6,. + 0
 4946              	arrow_key_string:
 4947 0000 0C000000 		.word	.LC20
 4948              		.section	.data.cmplx_key_string,"aw"
 4949              		.align	2
 4950              		.set	.LANCHOR7,. + 0
 4953              	cmplx_key_string:
 4954 0000 08000000 		.word	.LC19
 4955              		.section	.data.f_shift,"aw"
 4956              		.align	2
 4959              	f_shift:
 4960 0000 29       		.byte	41
 4961 0001 000000   		.space	3
 4962 0004 FFFFFFFF 		.word	-1
 4963              		.section	.data.g_shift,"aw"
 4964              		.align	2
 4967              	g_shift:
 4968 0000 2A       		.byte	42
 4969 0001 000000   		.space	3
 4970 0004 FFFFFFFF 		.word	-1
 4971              		.section	.data.h_shift,"aw"
 4972              		.align	2
 4973              		.set	.LANCHOR15,. + 0
 4976              	h_shift:
 4977 0000 2B       		.byte	43
 4978 0001 000000   		.space	3
 4979 0004 FFFFFFFF 		.word	-1
 4980              		.section	.data.heartbeat,"aw"
 4981              		.align	2
 4982              		.set	.LANCHOR19,. + 0
 4985              	heartbeat:
 4986 0000 62       		.byte	98
 4987 0001 000000   		.space	3
 4988 0004 FFFFFFFF 		.word	-1
 4989              		.section	.data.no_key,"aw"
 4990              		.align	2
 4991              		.set	.LANCHOR10,. + 0
 4994              	no_key:
 4995 0000 2E       		.byte	46
 4996 0001 000000   		.space	3
 4997 0004 00000000 		.word	0
 4998              		.section	.data.release,"aw"
 4999              		.align	2
 5000              		.set	.LANCHOR11,. + 0
 5003              	release:
 5004 0000 63       		.byte	99
ARM GAS  /tmp/ccrLsn8H.s 			page 134


 5005 0001 000000   		.space	3
 5006 0004 FFFFFFFF 		.word	-1
 5007              		.section	.data.spaces,"aw"
 5008              		.align	2
 5009              		.set	.LANCHOR9,. + 0
 5012              	spaces:
 5013 0000 20202020 		.ascii	"                     \000"
 5013      20202020 
 5013      20202020 
 5013      20202020 
 5013      20202020 
 5014              		.section	.rodata.MID_MENU,"a"
 5015              		.align	2
 5016              		.set	.LANCHOR18,. + 0
 5019              	MID_MENU:
 5020 0000 00000000 		.word	.LC18
 5021 0004 00000000 		.word	mid_menu
 5022 0008 00000000 		.word	0
 5023 000c 00000000 		.word	0
 5024              		.section	.rodata.Menus,"a"
 5025              		.align	2
 5028              	Menus:
 5029 0000 4D5F426C 		.ascii	"M_Blank\000"
 5029      616E6B00 
 5030 0008 00000000 		.space	7
 5030      000000
 5031 000f 00       		.space	1
 5032 0010 2E       		.byte	46
 5033 0011 000000   		.space	3
 5034 0014 FFFFFFFF 		.word	-1
 5035 0018 2E       		.byte	46
 5036 0019 000000   		.space	3
 5037 001c FFFFFFFF 		.word	-1
 5038 0020 00       		.ascii	"\000"
 5039 0021 00000000 		.space	7
 5039      000000
 5040 0028 00       		.ascii	"\000"
 5041 0029 00000000 		.space	7
 5041      000000
 5042 0030 2E       		.byte	46
 5043 0031 000000   		.space	3
 5044 0034 FFFFFFFF 		.word	-1
 5045 0038 2E       		.byte	46
 5046 0039 000000   		.space	3
 5047 003c FFFFFFFF 		.word	-1
 5048 0040 00       		.ascii	"\000"
 5049 0041 00000000 		.space	7
 5049      000000
 5050 0048 00       		.ascii	"\000"
 5051 0049 00000000 		.space	7
 5051      000000
 5052 0050 2E       		.byte	46
 5053 0051 000000   		.space	3
 5054 0054 FFFFFFFF 		.word	-1
 5055 0058 2E       		.byte	46
 5056 0059 000000   		.space	3
 5057 005c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccrLsn8H.s 			page 135


 5058 0060 00       		.ascii	"\000"
 5059 0061 00000000 		.space	7
 5059      000000
 5060 0068 00       		.ascii	"\000"
 5061 0069 00000000 		.space	7
 5061      000000
 5062 0070 2E       		.byte	46
 5063 0071 000000   		.space	3
 5064 0074 FFFFFFFF 		.word	-1
 5065 0078 2E       		.byte	46
 5066 0079 000000   		.space	3
 5067 007c FFFFFFFF 		.word	-1
 5068 0080 00       		.ascii	"\000"
 5069 0081 00000000 		.space	7
 5069      000000
 5070 0088 00       		.ascii	"\000"
 5071 0089 00000000 		.space	7
 5071      000000
 5072 0090 2C       		.byte	44
 5073 0091 000000   		.space	3
 5074 0094 FFFFFFFF 		.word	-1
 5075 0098 2E       		.byte	46
 5076 0099 000000   		.space	3
 5077 009c FFFFFFFF 		.word	-1
 5078 00a0 2D2D0D00 		.ascii	"--\015\000"
 5079 00a4 00000000 		.space	4
 5080 00a8 00       		.ascii	"\000"
 5081 00a9 00000000 		.space	7
 5081      000000
 5082 00b0 2D       		.byte	45
 5083 00b1 000000   		.space	3
 5084 00b4 FFFFFFFF 		.word	-1
 5085 00b8 31       		.byte	49
 5086 00b9 000000   		.space	3
 5087 00bc 0B000000 		.word	11
 5088 00c0 43505800 		.ascii	"CPX\000"
 5089 00c4 00000000 		.space	4
 5090 00c8 00       		.ascii	"\000"
 5091 00c9 00000000 		.space	7
 5091      000000
 5092 00d0 4D5F436C 		.ascii	"M_Clear\000"
 5092      65617200 
 5093 00d8 00000000 		.space	7
 5093      000000
 5094 00df 00       		.space	1
 5095 00e0 10       		.byte	16
 5096 00e1 000000   		.space	3
 5097 00e4 01000000 		.word	1
 5098 00e8 34       		.byte	52
 5099 00e9 000000   		.space	3
 5100 00ec 44010000 		.word	324
 5101 00f0 434C5072 		.ascii	"CLProg\000"
 5101      6F6700
 5102 00f7 00       		.space	1
 5103 00f8 434C5041 		.ascii	"CLPAll\000"
 5103      6C6C00
 5104 00ff 00       		.space	1
ARM GAS  /tmp/ccrLsn8H.s 			page 136


 5105 0100 10       		.byte	16
 5106 0101 000000   		.space	3
 5107 0104 02000000 		.word	2
 5108 0108 34       		.byte	52
 5109 0109 000000   		.space	3
 5110 010c 3E010000 		.word	318
 5111 0110 434C9100 		.ascii	"CL\221\000"
 5112 0114 00000000 		.space	4
 5113 0118 434C5265 		.ascii	"CLReg\000"
 5113      6700
 5114 011e 0000     		.space	2
 5115 0120 10       		.byte	16
 5116 0121 000000   		.space	3
 5117 0124 03000000 		.word	3
 5118 0128 34       		.byte	52
 5119 0129 000000   		.space	3
 5120 012c 74010000 		.word	372
 5121 0130 434C7800 		.ascii	"CLx\000"
 5122 0134 00000000 		.space	4
 5123 0138 434C06A0 		.ascii	"CL\006\240\000"
 5123      00
 5124 013d 000000   		.space	3
 5125 0140 34       		.byte	52
 5126 0141 000000   		.space	3
 5127 0144 40010000 		.word	320
 5128 0148 34       		.byte	52
 5129 0149 000000   		.space	3
 5130 014c 41010000 		.word	321
 5131 0150 434C5374 		.ascii	"CLStk\000"
 5131      6B00
 5132 0156 0000     		.space	2
 5133 0158 434C416C 		.ascii	"CLAll\000"
 5133      6C00
 5134 015e 0000     		.space	2
 5135 0160 2C       		.byte	44
 5136 0161 000000   		.space	3
 5137 0164 FFFFFFFF 		.word	-1
 5138 0168 2E       		.byte	46
 5139 0169 000000   		.space	3
 5140 016c FFFFFFFF 		.word	-1
 5141 0170 2D2D0D00 		.ascii	"--\015\000"
 5142 0174 00000000 		.space	4
 5143 0178 00       		.ascii	"\000"
 5144 0179 00000000 		.space	7
 5144      000000
 5145 0180 2D       		.byte	45
 5146 0181 000000   		.space	3
 5147 0184 FFFFFFFF 		.word	-1
 5148 0188 2E       		.byte	46
 5149 0189 000000   		.space	3
 5150 018c FFFFFFFF 		.word	-1
 5151 0190 43505800 		.ascii	"CPX\000"
 5152 0194 00000000 		.space	4
 5153 0198 00       		.ascii	"\000"
 5154 0199 00000000 		.space	7
 5154      000000
 5155 01a0 4D5F4469 		.ascii	"M_Disp\000"
ARM GAS  /tmp/ccrLsn8H.s 			page 137


 5155      737000
 5156 01a7 00000000 		.space	8
 5156      00000000 
 5157 01af 00       		.space	1
 5158 01b0 00       		.byte	0
 5159 01b1 000000   		.space	3
 5160 01b4 03000000 		.word	3
 5161 01b8 05       		.byte	5
 5162 01b9 000000   		.space	3
 5163 01bc 01000000 		.word	1
 5164 01c0 414C4C00 		.ascii	"ALL\000"
 5165 01c4 00000000 		.space	4
 5166 01c8 6120622F 		.ascii	"a b/c\000"
 5166      6300
 5167 01ce 0000     		.space	2
 5168 01d0 01       		.byte	1
 5169 01d1 000000   		.space	3
 5170 01d4 03000000 		.word	3
 5171 01d8 05       		.byte	5
 5172 01d9 000000   		.space	3
 5173 01dc 02000000 		.word	2
 5174 01e0 46495800 		.ascii	"FIX\000"
 5175 01e4 00000000 		.space	4
 5176 01e8 642F6300 		.ascii	"d/c\000"
 5177 01ec 00000000 		.space	4
 5178 01f0 02       		.byte	2
 5179 01f1 000000   		.space	3
 5180 01f4 03000000 		.word	3
 5181 01f8 06       		.byte	6
 5182 01f9 000000   		.space	3
 5183 01fc 01000000 		.word	1
 5184 0200 53434900 		.ascii	"SCI\000"
 5185 0204 00000000 		.space	4
 5186 0208 482E4D53 		.ascii	"H.MS\000"
 5186      00
 5187 020d 000000   		.space	3
 5188 0210 03       		.byte	3
 5189 0211 000000   		.space	3
 5190 0214 03000000 		.word	3
 5191 0218 07       		.byte	7
 5192 0219 000000   		.space	3
 5193 021c 01000000 		.word	1
 5194 0220 454E4700 		.ascii	"ENG\000"
 5195 0224 00000000 		.space	4
 5196 0228 482E6400 		.ascii	"H.d\000"
 5197 022c 00000000 		.space	4
 5198 0230 2C       		.byte	44
 5199 0231 000000   		.space	3
 5200 0234 FFFFFFFF 		.word	-1
 5201 0238 26       		.byte	38
 5202 0239 000000   		.space	3
 5203 023c 03000000 		.word	3
 5204 0240 2D2D0D00 		.ascii	"--\015\000"
 5205 0244 00000000 		.space	4
 5206 0248 2E2F2C00 		.ascii	"./,\000"
 5207 024c 00000000 		.space	4
 5208 0250 2D       		.byte	45
ARM GAS  /tmp/ccrLsn8H.s 			page 138


 5209 0251 000000   		.space	3
 5210 0254 FFFFFFFF 		.word	-1
 5211 0258 2E       		.byte	46
 5212 0259 000000   		.space	3
 5213 025c FFFFFFFF 		.word	-1
 5214 0260 43505800 		.ascii	"CPX\000"
 5215 0264 00000000 		.space	4
 5216 0268 00       		.ascii	"\000"
 5217 0269 00000000 		.space	7
 5217      000000
 5218 0270 4D5F4261 		.ascii	"M_Base\000"
 5218      736500
 5219 0277 00000000 		.space	8
 5219      00000000 
 5220 027f 00       		.space	1
 5221 0280 0E       		.byte	14
 5222 0281 000000   		.space	3
 5223 0284 01000000 		.word	1
 5224 0288 0E       		.byte	14
 5225 0289 000000   		.space	3
 5226 028c 03000000 		.word	3
 5227 0290 42494E00 		.ascii	"BIN\000"
 5228 0294 00000000 		.space	4
 5229 0298 6E6F7400 		.ascii	"not\000"
 5230 029c 00000000 		.space	4
 5231 02a0 0E       		.byte	14
 5232 02a1 000000   		.space	3
 5233 02a4 02000000 		.word	2
 5234 02a8 13       		.byte	19
 5235 02a9 000000   		.space	3
 5236 02ac 03000000 		.word	3
 5237 02b0 4F435400 		.ascii	"OCT\000"
 5238 02b4 00000000 		.space	4
 5239 02b8 616E6400 		.ascii	"and\000"
 5240 02bc 00000000 		.space	4
 5241 02c0 0F       		.byte	15
 5242 02c1 000000   		.space	3
 5243 02c4 01000000 		.word	1
 5244 02c8 14       		.byte	20
 5245 02c9 000000   		.space	3
 5246 02cc 03000000 		.word	3
 5247 02d0 44454300 		.ascii	"DEC\000"
 5248 02d4 00000000 		.space	4
 5249 02d8 6F7200   		.ascii	"or\000"
 5250 02db 00000000 		.space	5
 5250      00
 5251 02e0 0F       		.byte	15
 5252 02e1 000000   		.space	3
 5253 02e4 02000000 		.word	2
 5254 02e8 15       		.byte	21
 5255 02e9 000000   		.space	3
 5256 02ec 03000000 		.word	3
 5257 02f0 48455800 		.ascii	"HEX\000"
 5258 02f4 00000000 		.space	4
 5259 02f8 786F7200 		.ascii	"xor\000"
 5260 02fc 00000000 		.space	4
 5261 0300 2C       		.byte	44
ARM GAS  /tmp/ccrLsn8H.s 			page 139


 5262 0301 000000   		.space	3
 5263 0304 FFFFFFFF 		.word	-1
 5264 0308 16       		.byte	22
 5265 0309 000000   		.space	3
 5266 030c 03000000 		.word	3
 5267 0310 2D2D0D00 		.ascii	"--\015\000"
 5268 0314 00000000 		.space	4
 5269 0318 524D4452 		.ascii	"RMDR\000"
 5269      00
 5270 031d 000000   		.space	3
 5271 0320 2D       		.byte	45
 5272 0321 000000   		.space	3
 5273 0324 FFFFFFFF 		.word	-1
 5274 0328 07       		.byte	7
 5275 0329 000000   		.space	3
 5276 032c 01000000 		.word	1
 5277 0330 43505800 		.ascii	"CPX\000"
 5278 0334 00000000 		.space	4
 5279 0338 482E6400 		.ascii	"H.d\000"
 5280 033c 00000000 		.space	4
 5281 0340 4D5F416E 		.ascii	"M_Angles\000"
 5281      676C6573 
 5281      00
 5282 0349 00000000 		.space	6
 5282      0000
 5283 034f 00       		.space	1
 5284 0350 06       		.byte	6
 5285 0351 000000   		.space	3
 5286 0354 02000000 		.word	2
 5287 0358 04       		.byte	4
 5288 0359 000000   		.space	3
 5289 035c 01000000 		.word	1
 5290 0360 44454700 		.ascii	"DEG\000"
 5291 0364 00000000 		.space	4
 5292 0368 500D5200 		.ascii	"P\015R\000"
 5293 036c 00000000 		.space	4
 5294 0370 07       		.byte	7
 5295 0371 000000   		.space	3
 5296 0374 02000000 		.word	2
 5297 0378 04       		.byte	4
 5298 0379 000000   		.space	3
 5299 037c 02000000 		.word	2
 5300 0380 52414400 		.ascii	"RAD\000"
 5301 0384 00000000 		.space	4
 5302 0388 520D5000 		.ascii	"R\015P\000"
 5303 038c 00000000 		.space	4
 5304 0390 08       		.byte	8
 5305 0391 000000   		.space	3
 5306 0394 02000000 		.word	2
 5307 0398 00       		.byte	0
 5308 0399 000000   		.space	3
 5309 039c 01000000 		.word	1
 5310 03a0 47524144 		.ascii	"GRAD\000"
 5310      00
 5311 03a5 000000   		.space	3
 5312 03a8 48595000 		.ascii	"HYP\000"
 5313 03ac 00000000 		.space	4
ARM GAS  /tmp/ccrLsn8H.s 			page 140


 5314 03b0 06       		.byte	6
 5315 03b1 000000   		.space	3
 5316 03b4 01000000 		.word	1
 5317 03b8 07       		.byte	7
 5318 03b9 000000   		.space	3
 5319 03bc 01000000 		.word	1
 5320 03c0 482E4D53 		.ascii	"H.MS\000"
 5320      00
 5321 03c5 000000   		.space	3
 5322 03c8 482E6400 		.ascii	"H.d\000"
 5323 03cc 00000000 		.space	4
 5324 03d0 2C       		.byte	44
 5325 03d1 000000   		.space	3
 5326 03d4 FFFFFFFF 		.word	-1
 5327 03d8 00       		.byte	0
 5328 03d9 000000   		.space	3
 5329 03dc 02000000 		.word	2
 5330 03e0 2D2D0D00 		.ascii	"--\015\000"
 5331 03e4 00000000 		.space	4
 5332 03e8 4859509D 		.ascii	"HYP\235\000"
 5332      00
 5333 03ed 000000   		.space	3
 5334 03f0 2D       		.byte	45
 5335 03f1 000000   		.space	3
 5336 03f4 FFFFFFFF 		.word	-1
 5337 03f8 2E       		.byte	46
 5338 03f9 000000   		.space	3
 5339 03fc FFFFFFFF 		.word	-1
 5340 0400 43505800 		.ascii	"CPX\000"
 5341 0404 00000000 		.space	4
 5342 0408 00       		.ascii	"\000"
 5343 0409 00000000 		.space	7
 5343      000000
 5344 0410 4D5F4D69 		.ascii	"M_Misc\000"
 5344      736300
 5345 0417 00000000 		.space	8
 5345      00000000 
 5346 041f 00       		.space	1
 5347 0420 25       		.byte	37
 5348 0421 000000   		.space	3
 5349 0424 01000000 		.word	1
 5350 0428 14       		.byte	20
 5351 0429 000000   		.space	3
 5352 042c 01000000 		.word	1
 5353 0430 7C587C00 		.ascii	"|X|\000"
 5354 0434 00000000 		.space	4
 5355 0438 329C00   		.ascii	"2\234\000"
 5356 043b 00000000 		.space	5
 5356      00
 5357 0440 25       		.byte	37
 5358 0441 000000   		.space	3
 5359 0444 02000000 		.word	2
 5360 0448 14       		.byte	20
 5361 0449 000000   		.space	3
 5362 044c 02000000 		.word	2
 5363 0450 524E4400 		.ascii	"RND\000"
 5364 0454 00000000 		.space	4
ARM GAS  /tmp/ccrLsn8H.s 			page 141


 5365 0458 4C6F67BA 		.ascii	"Log\272\000"
 5365      00
 5366 045d 000000   		.space	3
 5367 0460 26       		.byte	38
 5368 0461 000000   		.space	3
 5369 0464 01000000 		.word	1
 5370 0468 15       		.byte	21
 5371 0469 000000   		.space	3
 5372 046c 02000000 		.word	2
 5373 0470 49506172 		.ascii	"IPart\000"
 5373      7400
 5374 0476 0000     		.space	2
 5375 0478 4C6F678B 		.ascii	"Log\213\000"
 5375      00
 5376 047d 000000   		.space	3
 5377 0480 26       		.byte	38
 5378 0481 000000   		.space	3
 5379 0484 02000000 		.word	2
 5380 0488 16       		.byte	22
 5381 0489 000000   		.space	3
 5382 048c 02000000 		.word	2
 5383 0490 46506172 		.ascii	"FPart\000"
 5383      7400
 5384 0496 0000     		.space	2
 5385 0498 7C7C656C 		.ascii	"||el\000"
 5385      00
 5386 049d 000000   		.space	3
 5387 04a0 2C       		.byte	44
 5388 04a1 000000   		.space	3
 5389 04a4 FFFFFFFF 		.word	-1
 5390 04a8 22       		.byte	34
 5391 04a9 000000   		.space	3
 5392 04ac 02000000 		.word	2
 5393 04b0 2D2D0D00 		.ascii	"--\015\000"
 5394 04b4 00000000 		.space	4
 5395 04b8 832500   		.ascii	"\203%\000"
 5396 04bb 00000000 		.space	5
 5396      00
 5397 04c0 2D       		.byte	45
 5398 04c1 000000   		.space	3
 5399 04c4 FFFFFFFF 		.word	-1
 5400 04c8 2E       		.byte	46
 5401 04c9 000000   		.space	3
 5402 04cc FFFFFFFF 		.word	-1
 5403 04d0 43505800 		.ascii	"CPX\000"
 5404 04d4 00000000 		.space	4
 5405 04d8 00       		.ascii	"\000"
 5406 04d9 00000000 		.space	7
 5406      000000
 5407 04e0 4D5F5377 		.ascii	"M_Swap\000"
 5407      617000
 5408 04e7 00000000 		.space	8
 5408      00000000 
 5409 04ef 00       		.space	1
 5410 04f0 0D       		.byte	13
 5411 04f1 000000   		.space	3
 5412 04f4 01000000 		.word	1
ARM GAS  /tmp/ccrLsn8H.s 			page 142


 5413 04f8 34       		.byte	52
 5414 04f9 000000   		.space	3
 5415 04fc 00A60000 		.word	42496
 5416 0500 53686F77 		.ascii	"Show\016\000"
 5416      0E00
 5417 0506 0000     		.space	2
 5418 0508 5B175D00 		.ascii	"[\027]\000"
 5419 050c 00000000 		.space	4
 5420 0510 0D       		.byte	13
 5421 0511 000000   		.space	3
 5422 0514 02000000 		.word	2
 5423 0518 2E       		.byte	46
 5424 0519 000000   		.space	3
 5425 051c FFFFFFFF 		.word	-1
 5426 0520 53686F77 		.ascii	"Show\015\000"
 5426      0D00
 5427 0526 0000     		.space	2
 5428 0528 00       		.ascii	"\000"
 5429 0529 00000000 		.space	7
 5429      000000
 5430 0530 0D       		.byte	13
 5431 0531 000000   		.space	3
 5432 0534 03000000 		.word	3
 5433 0538 34       		.byte	52
 5434 0539 000000   		.space	3
 5435 053c 00330000 		.word	13056
 5436 0540 78173F00 		.ascii	"x\027?\000"
 5437 0544 00000000 		.space	4
 5438 0548 7A173F00 		.ascii	"z\027?\000"
 5439 054c 00000000 		.space	4
 5440 0550 34       		.byte	52
 5441 0551 000000   		.space	3
 5442 0554 00320000 		.word	12800
 5443 0558 34       		.byte	52
 5444 0559 000000   		.space	3
 5445 055c 00340000 		.word	13312
 5446 0560 79173F00 		.ascii	"y\027?\000"
 5447 0564 00000000 		.space	4
 5448 0568 74173F00 		.ascii	"t\027?\000"
 5449 056c 00000000 		.space	4
 5450 0570 2C       		.byte	44
 5451 0571 000000   		.space	3
 5452 0574 FFFFFFFF 		.word	-1
 5453 0578 2E       		.byte	46
 5454 0579 000000   		.space	3
 5455 057c FFFFFFFF 		.word	-1
 5456 0580 2D2D0D00 		.ascii	"--\015\000"
 5457 0584 00000000 		.space	4
 5458 0588 00       		.ascii	"\000"
 5459 0589 00000000 		.space	7
 5459      000000
 5460 0590 2D       		.byte	45
 5461 0591 000000   		.space	3
 5462 0594 FFFFFFFF 		.word	-1
 5463 0598 2E       		.byte	46
 5464 0599 000000   		.space	3
 5465 059c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccrLsn8H.s 			page 143


 5466 05a0 43505800 		.ascii	"CPX\000"
 5467 05a4 00000000 		.space	4
 5468 05a8 00       		.ascii	"\000"
 5469 05a9 00000000 		.space	7
 5469      000000
 5470 05b0 4D5F5072 		.ascii	"M_Program\000"
 5470      6F677261 
 5470      6D00
 5471 05ba 00000000 		.space	5
 5471      00
 5472 05bf 00       		.space	1
 5473 05c0 27       		.byte	39
 5474 05c1 000000   		.space	3
 5475 05c4 01000000 		.word	1
 5476 05c8 28       		.byte	40
 5477 05c9 000000   		.space	3
 5478 05cc 01000000 		.word	1
 5479 05d0 4C424C00 		.ascii	"LBL\000"
 5480 05d4 00000000 		.space	4
 5481 05d8 44534500 		.ascii	"DSE\000"
 5482 05dc 00000000 		.space	4
 5483 05e0 27       		.byte	39
 5484 05e1 000000   		.space	3
 5485 05e4 02000000 		.word	2
 5486 05e8 28       		.byte	40
 5487 05e9 000000   		.space	3
 5488 05ec 02000000 		.word	2
 5489 05f0 52544E00 		.ascii	"RTN\000"
 5490 05f4 00000000 		.space	4
 5491 05f8 49534700 		.ascii	"ISG\000"
 5492 05fc 00000000 		.space	4
 5493 0600 25       		.byte	37
 5494 0601 000000   		.space	3
 5495 0604 03000000 		.word	3
 5496 0608 34       		.byte	52
 5497 0609 000000   		.space	3
 5498 060c 00600000 		.word	24576
 5499 0610 50617573 		.ascii	"Pause\000"
 5499      6500
 5500 0616 0000     		.space	2
 5501 0618 44454300 		.ascii	"DEC\000"
 5502 061c 00000000 		.space	4
 5503 0620 12       		.byte	18
 5504 0621 000000   		.space	3
 5505 0624 03000000 		.word	3
 5506 0628 34       		.byte	52
 5507 0629 000000   		.space	3
 5508 062c 00610000 		.word	24832
 5509 0630 47544F00 		.ascii	"GTO\000"
 5510 0634 00000000 		.space	4
 5511 0638 494E4300 		.ascii	"INC\000"
 5512 063c 00000000 		.space	4
 5513 0640 2C       		.byte	44
 5514 0641 000000   		.space	3
 5515 0644 FFFFFFFF 		.word	-1
 5516 0648 34       		.byte	52
 5517 0649 000000   		.space	3
ARM GAS  /tmp/ccrLsn8H.s 			page 144


 5518 064c 00570000 		.word	22272
 5519 0650 2D2D0D00 		.ascii	"--\015\000"
 5520 0654 00000000 		.space	4
 5521 0658 4241434B 		.ascii	"BACK\000"
 5521      00
 5522 065d 000000   		.space	3
 5523 0660 2D       		.byte	45
 5524 0661 000000   		.space	3
 5525 0664 FFFFFFFF 		.word	-1
 5526 0668 34       		.byte	52
 5527 0669 000000   		.space	3
 5528 066c 00560000 		.word	22016
 5529 0670 43505800 		.ascii	"CPX\000"
 5530 0674 00000000 		.space	4
 5531 0678 534B4950 		.ascii	"SKIP\000"
 5531      00
 5532 067d 000000   		.space	3
 5533 0680 4D5F5365 		.ascii	"M_Setup1\000"
 5533      74757031 
 5533      00
 5534 0689 00000000 		.space	6
 5534      0000
 5535 068f 00       		.space	1
 5536 0690 32       		.byte	50
 5537 0691 000000   		.space	3
 5538 0694 00000000 		.word	0
 5539 0698 30       		.byte	48
 5540 0699 000000   		.space	3
 5541 069c 00000000 		.word	0
 5542 06a0 45584954 		.ascii	"EXIT\000"
 5542      00
 5543 06a5 000000   		.space	3
 5544 06a8 53797374 		.ascii	"System\000"
 5544      656D00
 5545 06af 00       		.space	1
 5546 06b0 31       		.byte	49
 5547 06b1 000000   		.space	3
 5548 06b4 09000000 		.word	9
 5549 06b8 2E       		.byte	46
 5550 06b9 000000   		.space	3
 5551 06bc FFFFFFFF 		.word	-1
 5552 06c0 48454C50 		.ascii	"HELP\000"
 5552      00
 5553 06c5 000000   		.space	3
 5554 06c8 00       		.ascii	"\000"
 5555 06c9 00000000 		.space	7
 5555      000000
 5556 06d0 31       		.byte	49
 5557 06d1 000000   		.space	3
 5558 06d4 02000000 		.word	2
 5559 06d8 31       		.byte	49
 5560 06d9 000000   		.space	3
 5561 06dc 06000000 		.word	6
 5562 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5562      4F00
 5563 06e6 0000     		.space	2
 5564 06e8 53765241 		.ascii	"SvRAM\000"
ARM GAS  /tmp/ccrLsn8H.s 			page 145


 5564      4D00
 5565 06ee 0000     		.space	2
 5566 06f0 31       		.byte	49
 5567 06f1 000000   		.space	3
 5568 06f4 03000000 		.word	3
 5569 06f8 31       		.byte	49
 5570 06f9 000000   		.space	3
 5571 06fc 07000000 		.word	7
 5572 0700 4F6E5243 		.ascii	"OnRCL\000"
 5572      4C00
 5573 0706 0000     		.space	2
 5574 0708 4C645241 		.ascii	"LdRAM\000"
 5574      4D00
 5575 070e 0000     		.space	2
 5576 0710 2C       		.byte	44
 5577 0711 000000   		.space	3
 5578 0714 FFFFFFFF 		.word	-1
 5579 0718 2E       		.byte	46
 5580 0719 000000   		.space	3
 5581 071c FFFFFFFF 		.word	-1
 5582 0720 2D2D0D00 		.ascii	"--\015\000"
 5583 0724 00000000 		.space	4
 5584 0728 00       		.ascii	"\000"
 5585 0729 00000000 		.space	7
 5585      000000
 5586 0730 2D       		.byte	45
 5587 0731 000000   		.space	3
 5588 0734 FFFFFFFF 		.word	-1
 5589 0738 2E       		.byte	46
 5590 0739 000000   		.space	3
 5591 073c FFFFFFFF 		.word	-1
 5592 0740 43505800 		.ascii	"CPX\000"
 5593 0744 00000000 		.space	4
 5594 0748 00       		.ascii	"\000"
 5595 0749 00000000 		.space	7
 5595      000000
 5596 0750 4D5F4172 		.ascii	"M_Arrow\000"
 5596      726F7700 
 5597 0758 00000000 		.space	7
 5597      000000
 5598 075f 00       		.space	1
 5599 0760 0E       		.byte	14
 5600 0761 000000   		.space	3
 5601 0764 01000000 		.word	1
 5602 0768 06       		.byte	6
 5603 0769 000000   		.space	3
 5604 076c 02000000 		.word	2
 5605 0770 0D42696E 		.ascii	"\015Bin\000"
 5605      00
 5606 0775 000000   		.space	3
 5607 0778 0D444547 		.ascii	"\015DEG\000"
 5607      00
 5608 077d 000000   		.space	3
 5609 0780 0E       		.byte	14
 5610 0781 000000   		.space	3
 5611 0784 02000000 		.word	2
 5612 0788 07       		.byte	7
ARM GAS  /tmp/ccrLsn8H.s 			page 146


 5613 0789 000000   		.space	3
 5614 078c 02000000 		.word	2
 5615 0790 0D4F6374 		.ascii	"\015Oct\000"
 5615      00
 5616 0795 000000   		.space	3
 5617 0798 0D524144 		.ascii	"\015RAD\000"
 5617      00
 5618 079d 000000   		.space	3
 5619 07a0 0F       		.byte	15
 5620 07a1 000000   		.space	3
 5621 07a4 01000000 		.word	1
 5622 07a8 08       		.byte	8
 5623 07a9 000000   		.space	3
 5624 07ac 02000000 		.word	2
 5625 07b0 0D446563 		.ascii	"\015Dec\000"
 5625      00
 5626 07b5 000000   		.space	3
 5627 07b8 0D477261 		.ascii	"\015Grad\000"
 5627      6400
 5628 07be 0000     		.space	2
 5629 07c0 0F       		.byte	15
 5630 07c1 000000   		.space	3
 5631 07c4 02000000 		.word	2
 5632 07c8 06       		.byte	6
 5633 07c9 000000   		.space	3
 5634 07cc 01000000 		.word	1
 5635 07d0 0D486578 		.ascii	"\015Hex\000"
 5635      00
 5636 07d5 000000   		.space	3
 5637 07d8 0D484D53 		.ascii	"\015HMS\000"
 5637      00
 5638 07dd 000000   		.space	3
 5639 07e0 2C       		.byte	44
 5640 07e1 000000   		.space	3
 5641 07e4 FFFFFFFF 		.word	-1
 5642 07e8 07       		.byte	7
 5643 07e9 000000   		.space	3
 5644 07ec 01000000 		.word	1
 5645 07f0 2D2D0D00 		.ascii	"--\015\000"
 5646 07f4 00000000 		.space	4
 5647 07f8 484D530D 		.ascii	"HMS\015\000"
 5647      00
 5648 07fd 000000   		.space	3
 5649 0800 2D       		.byte	45
 5650 0801 000000   		.space	3
 5651 0804 FFFFFFFF 		.word	-1
 5652 0808 2E       		.byte	46
 5653 0809 000000   		.space	3
 5654 080c FFFFFFFF 		.word	-1
 5655 0810 43505800 		.ascii	"CPX\000"
 5656 0814 00000000 		.space	4
 5657 0818 00       		.ascii	"\000"
 5658 0819 00000000 		.space	7
 5658      000000
 5659 0820 4D5F466C 		.ascii	"M_Flags\000"
 5659      61677300 
 5660 0828 00000000 		.space	7
ARM GAS  /tmp/ccrLsn8H.s 			page 147


 5660      000000
 5661 082f 00       		.space	1
 5662 0830 1E       		.byte	30
 5663 0831 000000   		.space	3
 5664 0834 01000000 		.word	1
 5665 0838 34       		.byte	52
 5666 0839 000000   		.space	3
 5667 083c 00740000 		.word	29696
 5668 0840 53465F00 		.ascii	"SF_\000"
 5669 0844 00000000 		.space	4
 5670 0848 46533F00 		.ascii	"FS?\000"
 5671 084c 00000000 		.space	4
 5672 0850 1E       		.byte	30
 5673 0851 000000   		.space	3
 5674 0854 02000000 		.word	2
 5675 0858 34       		.byte	52
 5676 0859 000000   		.space	3
 5677 085c 00750000 		.word	29952
 5678 0860 43465F00 		.ascii	"CF_\000"
 5679 0864 00000000 		.space	4
 5680 0868 46433F00 		.ascii	"FC?\000"
 5681 086c 00000000 		.space	4
 5682 0870 1F       		.byte	31
 5683 0871 000000   		.space	3
 5684 0874 01000000 		.word	1
 5685 0878 34       		.byte	52
 5686 0879 000000   		.space	3
 5687 087c 00500000 		.word	20480
 5688 0880 783D3F00 		.ascii	"x=?\000"
 5689 0884 00000000 		.space	4
 5690 0888 783C3F00 		.ascii	"x<?\000"
 5691 088c 00000000 		.space	4
 5692 0890 1F       		.byte	31
 5693 0891 000000   		.space	3
 5694 0894 02000000 		.word	2
 5695 0898 34       		.byte	52
 5696 0899 000000   		.space	3
 5697 089c 00510000 		.word	20736
 5698 08a0 780B3F00 		.ascii	"x\013?\000"
 5699 08a4 00000000 		.space	4
 5700 08a8 783C3D3F 		.ascii	"x<=?\000"
 5700      00
 5701 08ad 000000   		.space	3
 5702 08b0 2C       		.byte	44
 5703 08b1 000000   		.space	3
 5704 08b4 FFFFFFFF 		.word	-1
 5705 08b8 34       		.byte	52
 5706 08b9 000000   		.space	3
 5707 08bc 00530000 		.word	21248
 5708 08c0 2D2D0D00 		.ascii	"--\015\000"
 5709 08c4 00000000 		.space	4
 5710 08c8 783E3D3F 		.ascii	"x>=?\000"
 5710      00
 5711 08cd 000000   		.space	3
 5712 08d0 2D       		.byte	45
 5713 08d1 000000   		.space	3
 5714 08d4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccrLsn8H.s 			page 148


 5715 08d8 34       		.byte	52
 5716 08d9 000000   		.space	3
 5717 08dc 00520000 		.word	20992
 5718 08e0 43505800 		.ascii	"CPX\000"
 5719 08e4 00000000 		.space	4
 5720 08e8 783E3F00 		.ascii	"x>?\000"
 5721 08ec 00000000 		.space	4
 5722 08f0 4D5F5072 		.ascii	"M_Prob\000"
 5722      6F6200
 5723 08f7 00000000 		.space	8
 5723      00000000 
 5724 08ff 00       		.space	1
 5725 0900 18       		.byte	24
 5726 0901 000000   		.space	3
 5727 0904 03000000 		.word	3
 5728 0908 34       		.byte	52
 5729 0909 000000   		.space	3
 5730 090c 31020000 		.word	561
 5731 0910 46616374 		.ascii	"Fact!\000"
 5731      2100
 5732 0916 0000     		.space	2
 5733 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5733      00
 5734 091d 000000   		.space	3
 5735 0920 18       		.byte	24
 5736 0921 000000   		.space	3
 5737 0924 01000000 		.word	1
 5738 0928 19       		.byte	25
 5739 0929 000000   		.space	3
 5740 092c 01000000 		.word	1
 5741 0930 43792C78 		.ascii	"Cy,x\000"
 5741      00
 5742 0935 000000   		.space	3
 5743 0938 9400     		.ascii	"\224\000"
 5744 093a 00000000 		.space	6
 5744      0000
 5745 0940 18       		.byte	24
 5746 0941 000000   		.space	3
 5747 0944 02000000 		.word	2
 5748 0948 19       		.byte	25
 5749 0949 000000   		.space	3
 5750 094c 02000000 		.word	2
 5751 0950 50792C78 		.ascii	"Py,x\000"
 5751      00
 5752 0955 000000   		.space	3
 5753 0958 949D00   		.ascii	"\224\235\000"
 5754 095b 00000000 		.space	5
 5754      00
 5755 0960 08       		.byte	8
 5756 0961 000000   		.space	3
 5757 0964 01000000 		.word	1
 5758 0968 34       		.byte	52
 5759 0969 000000   		.space	3
 5760 096c 34010000 		.word	308
 5761 0970 52414E23 		.ascii	"RAN#\000"
 5761      00
 5762 0975 000000   		.space	3
ARM GAS  /tmp/ccrLsn8H.s 			page 149


 5763 0978 53454544 		.ascii	"SEED\000"
 5763      00
 5764 097d 000000   		.space	3
 5765 0980 2C       		.byte	44
 5766 0981 000000   		.space	3
 5767 0984 FFFFFFFF 		.word	-1
 5768 0988 2E       		.byte	46
 5769 0989 000000   		.space	3
 5770 098c FFFFFFFF 		.word	-1
 5771 0990 2D2D0D00 		.ascii	"--\015\000"
 5772 0994 00000000 		.space	4
 5773 0998 00       		.ascii	"\000"
 5774 0999 00000000 		.space	7
 5774      000000
 5775 09a0 2D       		.byte	45
 5776 09a1 000000   		.space	3
 5777 09a4 FFFFFFFF 		.word	-1
 5778 09a8 2E       		.byte	46
 5779 09a9 000000   		.space	3
 5780 09ac FFFFFFFF 		.word	-1
 5781 09b0 43505800 		.ascii	"CPX\000"
 5782 09b4 00000000 		.space	4
 5783 09b8 00       		.ascii	"\000"
 5784 09b9 00000000 		.space	7
 5784      000000
 5785 09c0 4D5F5374 		.ascii	"M_Stats\000"
 5785      61747300 
 5786 09c8 00000000 		.space	7
 5786      000000
 5787 09cf 00       		.space	1
 5788 09d0 1A       		.byte	26
 5789 09d1 000000   		.space	3
 5790 09d4 01000000 		.word	1
 5791 09d8 1A       		.byte	26
 5792 09d9 000000   		.space	3
 5793 09dc 02000000 		.word	2
 5794 09e0 0100     		.ascii	"\001\000"
 5795 09e2 00000000 		.space	6
 5795      0000
 5796 09e8 532E442E 		.ascii	"S.D.\000"
 5796      00
 5797 09ed 000000   		.space	3
 5798 09f0 1B       		.byte	27
 5799 09f1 000000   		.space	3
 5800 09f4 01000000 		.word	1
 5801 09f8 34       		.byte	52
 5802 09f9 000000   		.space	3
 5803 09fc 74020000 		.word	628
 5804 0a00 792D6861 		.ascii	"y-hat\000"
 5804      7400
 5805 0a06 0000     		.space	2
 5806 0a08 782D6861 		.ascii	"x-hat\000"
 5806      7400
 5807 0a0e 0000     		.space	2
 5808 0a10 34       		.byte	52
 5809 0a11 000000   		.space	3
 5810 0a14 27010000 		.word	295
ARM GAS  /tmp/ccrLsn8H.s 			page 150


 5811 0a18 34       		.byte	52
 5812 0a19 000000   		.space	3
 5813 0a1c 28010000 		.word	296
 5814 0a20 434F5252 		.ascii	"CORR\000"
 5814      00
 5815 0a25 000000   		.space	3
 5816 0a28 4C2E522E 		.ascii	"L.R.\000"
 5816      00
 5817 0a2d 000000   		.space	3
 5818 0a30 34       		.byte	52
 5819 0a31 000000   		.space	3
 5820 0a34 32010000 		.word	306
 5821 0a38 34       		.byte	52
 5822 0a39 000000   		.space	3
 5823 0a3c 31010000 		.word	305
 5824 0a40 42657374 		.ascii	"BestF\000"
 5824      4600
 5825 0a46 0000     		.space	2
 5826 0a48 4C6F6746 		.ascii	"LogFit\000"
 5826      697400
 5827 0a4f 00       		.space	1
 5828 0a50 34       		.byte	52
 5829 0a51 000000   		.space	3
 5830 0a54 2E010000 		.word	302
 5831 0a58 34       		.byte	52
 5832 0a59 000000   		.space	3
 5833 0a5c 2F010000 		.word	303
 5834 0a60 4C696E65 		.ascii	"Linear\000"
 5834      617200
 5835 0a67 00       		.space	1
 5836 0a68 45787046 		.ascii	"ExpFit\000"
 5836      697400
 5837 0a6f 00       		.space	1
 5838 0a70 2D       		.byte	45
 5839 0a71 000000   		.space	3
 5840 0a74 FFFFFFFF 		.word	-1
 5841 0a78 34       		.byte	52
 5842 0a79 000000   		.space	3
 5843 0a7c 30010000 		.word	304
 5844 0a80 43505800 		.ascii	"CPX\000"
 5845 0a84 00000000 		.space	4
 5846 0a88 50777246 		.ascii	"PwrFit\000"
 5846      697400
 5847 0a8f 00       		.space	1
 5848 0a90 4D5F5365 		.ascii	"M_Setup2\000"
 5848      74757032 
 5848      00
 5849 0a99 00000000 		.space	6
 5849      0000
 5850 0a9f 00       		.space	1
 5851 0aa0 31       		.byte	49
 5852 0aa1 000000   		.space	3
 5853 0aa4 04000000 		.word	4
 5854 0aa8 2E       		.byte	46
 5855 0aa9 000000   		.space	3
 5856 0aac FFFFFFFF 		.word	-1
 5857 0ab0 53764C49 		.ascii	"SvLIB\000"
ARM GAS  /tmp/ccrLsn8H.s 			page 151


 5857      4200
 5858 0ab6 0000     		.space	2
 5859 0ab8 00       		.ascii	"\000"
 5860 0ab9 00000000 		.space	7
 5860      000000
 5861 0ac0 31       		.byte	49
 5862 0ac1 000000   		.space	3
 5863 0ac4 05000000 		.word	5
 5864 0ac8 2E       		.byte	46
 5865 0ac9 000000   		.space	3
 5866 0acc FFFFFFFF 		.word	-1
 5867 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5867      4200
 5868 0ad6 0000     		.space	2
 5869 0ad8 00       		.ascii	"\000"
 5870 0ad9 00000000 		.space	7
 5870      000000
 5871 0ae0 31       		.byte	49
 5872 0ae1 000000   		.space	3
 5873 0ae4 0A000000 		.word	10
 5874 0ae8 34       		.byte	52
 5875 0ae9 000000   		.space	3
 5876 0aec B2010000 		.word	434
 5877 0af0 53764350 		.ascii	"SvCPRG\000"
 5877      524700
 5878 0af7 00       		.space	1
 5879 0af8 5053544F 		.ascii	"PSTO\000"
 5879      00
 5880 0afd 000000   		.space	3
 5881 0b00 31       		.byte	49
 5882 0b01 000000   		.space	3
 5883 0b04 08000000 		.word	8
 5884 0b08 34       		.byte	52
 5885 0b09 000000   		.space	3
 5886 0b0c B1010000 		.word	433
 5887 0b10 4C645052 		.ascii	"LdPRG\000"
 5887      4700
 5888 0b16 0000     		.space	2
 5889 0b18 5052434C 		.ascii	"PRCL\000"
 5889      00
 5890 0b1d 000000   		.space	3
 5891 0b20 2C       		.byte	44
 5892 0b21 000000   		.space	3
 5893 0b24 FFFFFFFF 		.word	-1
 5894 0b28 2E       		.byte	46
 5895 0b29 000000   		.space	3
 5896 0b2c FFFFFFFF 		.word	-1
 5897 0b30 2D2D0D00 		.ascii	"--\015\000"
 5898 0b34 00000000 		.space	4
 5899 0b38 00       		.ascii	"\000"
 5900 0b39 00000000 		.space	7
 5900      000000
 5901 0b40 2D       		.byte	45
 5902 0b41 000000   		.space	3
 5903 0b44 FFFFFFFF 		.word	-1
 5904 0b48 2E       		.byte	46
 5905 0b49 000000   		.space	3
ARM GAS  /tmp/ccrLsn8H.s 			page 152


 5906 0b4c FFFFFFFF 		.word	-1
 5907 0b50 43505800 		.ascii	"CPX\000"
 5908 0b54 00000000 		.space	4
 5909 0b58 00       		.ascii	"\000"
 5910 0b59 00000000 		.space	7
 5910      000000
 5911 0b60 4D5F536F 		.ascii	"M_Solve\000"
 5911      6C766500 
 5912 0b68 00000000 		.space	7
 5912      000000
 5913 0b6f 00       		.space	1
 5914 0b70 20       		.byte	32
 5915 0b71 000000   		.space	3
 5916 0b74 01000000 		.word	1
 5917 0b78 34       		.byte	52
 5918 0b79 000000   		.space	3
 5919 0b7c 00690000 		.word	26880
 5920 0b80 534C5600 		.ascii	"SLV\000"
 5921 0b84 00000000 		.space	4
 5922 0b88 66272878 		.ascii	"f'(x)\000"
 5922      2900
 5923 0b8e 0000     		.space	2
 5924 0b90 20       		.byte	32
 5925 0b91 000000   		.space	3
 5926 0b94 02000000 		.word	2
 5927 0b98 34       		.byte	52
 5928 0b99 000000   		.space	3
 5929 0b9c 006A0000 		.word	27136
 5930 0ba0 04206478 		.ascii	"\004 dx\000"
 5930      00
 5931 0ba5 000000   		.space	3
 5932 0ba8 66272728 		.ascii	"f''(x)\000"
 5932      782900
 5933 0baf 00       		.space	1
 5934 0bb0 21       		.byte	33
 5935 0bb1 000000   		.space	3
 5936 0bb4 02000000 		.word	2
 5937 0bb8 2E       		.byte	46
 5938 0bb9 000000   		.space	3
 5939 0bbc FFFFFFFF 		.word	-1
 5940 0bc0 53554D00 		.ascii	"SUM\000"
 5941 0bc4 00000000 		.space	4
 5942 0bc8 00       		.ascii	"\000"
 5943 0bc9 00000000 		.space	7
 5943      000000
 5944 0bd0 21       		.byte	33
 5945 0bd1 000000   		.space	3
 5946 0bd4 01000000 		.word	1
 5947 0bd8 2E       		.byte	46
 5948 0bd9 000000   		.space	3
 5949 0bdc FFFFFFFF 		.word	-1
 5950 0be0 50524F44 		.ascii	"PROD\000"
 5950      00
 5951 0be5 000000   		.space	3
 5952 0be8 00       		.ascii	"\000"
 5953 0be9 00000000 		.space	7
 5953      000000
ARM GAS  /tmp/ccrLsn8H.s 			page 153


 5954 0bf0 2C       		.byte	44
 5955 0bf1 000000   		.space	3
 5956 0bf4 FFFFFFFF 		.word	-1
 5957 0bf8 2E       		.byte	46
 5958 0bf9 000000   		.space	3
 5959 0bfc FFFFFFFF 		.word	-1
 5960 0c00 2D2D0D00 		.ascii	"--\015\000"
 5961 0c04 00000000 		.space	4
 5962 0c08 00       		.ascii	"\000"
 5963 0c09 00000000 		.space	7
 5963      000000
 5964 0c10 2D       		.byte	45
 5965 0c11 000000   		.space	3
 5966 0c14 FFFFFFFF 		.word	-1
 5967 0c18 2E       		.byte	46
 5968 0c19 000000   		.space	3
 5969 0c1c FFFFFFFF 		.word	-1
 5970 0c20 43505800 		.ascii	"CPX\000"
 5971 0c24 00000000 		.space	4
 5972 0c28 00       		.ascii	"\000"
 5973 0c29 00000000 		.space	7
 5973      000000
 5974 0c30 4D5F426C 		.ascii	"M_Blank2\000"
 5974      616E6B32 
 5974      00
 5975 0c39 00000000 		.space	6
 5975      0000
 5976 0c3f 00       		.space	1
 5977 0c40 28       		.byte	40
 5978 0c41 000000   		.space	3
 5979 0c44 03000000 		.word	3
 5980 0c48 2E       		.byte	46
 5981 0c49 000000   		.space	3
 5982 0c4c FFFFFFFF 		.word	-1
 5983 0c50 912B00   		.ascii	"\221+\000"
 5984 0c53 00000000 		.space	5
 5984      00
 5985 0c58 00       		.ascii	"\000"
 5986 0c59 00000000 		.space	7
 5986      000000
 5987 0c60 16       		.byte	22
 5988 0c61 000000   		.space	3
 5989 0c64 01000000 		.word	1
 5990 0c68 2E       		.byte	46
 5991 0c69 000000   		.space	3
 5992 0c6c FFFFFFFF 		.word	-1
 5993 0c70 312F5800 		.ascii	"1/X\000"
 5994 0c74 00000000 		.space	4
 5995 0c78 00       		.ascii	"\000"
 5996 0c79 00000000 		.space	7
 5996      000000
 5997 0c80 1C       		.byte	28
 5998 0c81 000000   		.space	3
 5999 0c84 01000000 		.word	1
 6000 0c88 2E       		.byte	46
 6001 0c89 000000   		.space	3
 6002 0c8c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccrLsn8H.s 			page 154


 6003 0c90 035800   		.ascii	"\003X\000"
 6004 0c93 00000000 		.space	5
 6004      00
 6005 0c98 00       		.ascii	"\000"
 6006 0c99 00000000 		.space	7
 6006      000000
 6007 0ca0 13       		.byte	19
 6008 0ca1 000000   		.space	3
 6009 0ca4 02000000 		.word	2
 6010 0ca8 2E       		.byte	46
 6011 0ca9 000000   		.space	3
 6012 0cac FFFFFFFF 		.word	-1
 6013 0cb0 4C4F4700 		.ascii	"LOG\000"
 6014 0cb4 00000000 		.space	4
 6015 0cb8 00       		.ascii	"\000"
 6016 0cb9 00000000 		.space	7
 6016      000000
 6017 0cc0 2C       		.byte	44
 6018 0cc1 000000   		.space	3
 6019 0cc4 FFFFFFFF 		.word	-1
 6020 0cc8 2E       		.byte	46
 6021 0cc9 000000   		.space	3
 6022 0ccc FFFFFFFF 		.word	-1
 6023 0cd0 2D2D0D00 		.ascii	"--\015\000"
 6024 0cd4 00000000 		.space	4
 6025 0cd8 00       		.ascii	"\000"
 6026 0cd9 00000000 		.space	7
 6026      000000
 6027 0ce0 2D       		.byte	45
 6028 0ce1 000000   		.space	3
 6029 0ce4 FFFFFFFF 		.word	-1
 6030 0ce8 2E       		.byte	46
 6031 0ce9 000000   		.space	3
 6032 0cec FFFFFFFF 		.word	-1
 6033 0cf0 43505800 		.ascii	"CPX\000"
 6034 0cf4 00000000 		.space	4
 6035 0cf8 00       		.ascii	"\000"
 6036 0cf9 00000000 		.space	7
 6036      000000
 6037 0d00 4D5F416C 		.ascii	"M_Alpha\000"
 6037      70686100 
 6038 0d08 00000000 		.space	7
 6038      000000
 6039 0d0f 00       		.space	1
 6040 0d10 34       		.byte	52
 6041 0d11 000000   		.space	3
 6042 0d14 78010000 		.word	376
 6043 0d18 34       		.byte	52
 6044 0d19 000000   		.space	3
 6045 0d1c 6D010000 		.word	365
 6046 0d20 582D3EA0 		.ascii	"X->\240\000"
 6046      00
 6047 0d25 000000   		.space	3
 6048 0d28 A054494D 		.ascii	"\240TIME\000"
 6048      4500
 6049 0d2e 0000     		.space	2
 6050 0d30 34       		.byte	52
ARM GAS  /tmp/ccrLsn8H.s 			page 155


 6051 0d31 000000   		.space	3
 6052 0d34 77010000 		.word	375
 6053 0d38 34       		.byte	52
 6054 0d39 000000   		.space	3
 6055 0d3c 6C010000 		.word	364
 6056 0d40 A02D3E58 		.ascii	"\240->X\000"
 6056      00
 6057 0d45 000000   		.space	3
 6058 0d48 A0444154 		.ascii	"\240DATE\000"
 6058      4500
 6059 0d4e 0000     		.space	2
 6060 0d50 34       		.byte	52
 6061 0d51 000000   		.space	3
 6062 0d54 00480000 		.word	18432
 6063 0d58 34       		.byte	52
 6064 0d59 000000   		.space	3
 6065 0d5c 6A010000 		.word	362
 6066 0d60 A0495000 		.ascii	"\240IP\000"
 6067 0d64 00000000 		.space	4
 6068 0d68 A0444159 		.ascii	"\240DAY\000"
 6068      00
 6069 0d6d 000000   		.space	3
 6070 0d70 34       		.byte	52
 6071 0d71 000000   		.space	3
 6072 0d74 76010000 		.word	374
 6073 0d78 34       		.byte	52
 6074 0d79 000000   		.space	3
 6075 0d7c 6B010000 		.word	363
 6076 0d80 A04C454E 		.ascii	"\240LENG\000"
 6076      4700
 6077 0d86 0000     		.space	2
 6078 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 6078      4800
 6079 0d8e 0000     		.space	2
 6080 0d90 2C       		.byte	44
 6081 0d91 000000   		.space	3
 6082 0d94 FFFFFFFF 		.word	-1
 6083 0d98 2C       		.byte	44
 6084 0d99 000000   		.space	3
 6085 0d9c 01000000 		.word	1
 6086 0da0 2D2D0D00 		.ascii	"--\015\000"
 6087 0da4 00000000 		.space	4
 6088 0da8 00       		.ascii	"\000"
 6089 0da9 00000000 		.space	7
 6089      000000
 6090 0db0 2D       		.byte	45
 6091 0db1 000000   		.space	3
 6092 0db4 FFFFFFFF 		.word	-1
 6093 0db8 2D       		.byte	45
 6094 0db9 000000   		.space	3
 6095 0dbc 01000000 		.word	1
 6096 0dc0 43505800 		.ascii	"CPX\000"
 6097 0dc4 00000000 		.space	4
 6098 0dc8 00       		.ascii	"\000"
 6099 0dc9 00000000 		.space	7
 6099      000000
 6100 0dd0 4D5F435F 		.ascii	"M_C_Lock\000"
ARM GAS  /tmp/ccrLsn8H.s 			page 156


 6100      4C6F636B 
 6100      00
 6101 0dd9 00000000 		.space	6
 6101      0000
 6102 0ddf 00       		.space	1
 6103 0de0 18       		.byte	24
 6104 0de1 000000   		.space	3
 6105 0de4 02000000 		.word	2
 6106 0de8 04       		.byte	4
 6107 0de9 000000   		.space	3
 6108 0dec 02000000 		.word	2
 6109 0df0 504F4C41 		.ascii	"POLAR\000"
 6109      5200
 6110 0df6 0000     		.space	2
 6111 0df8 0D205000 		.ascii	"\015 P\000"
 6112 0dfc 00000000 		.space	4
 6113 0e00 18       		.byte	24
 6114 0e01 000000   		.space	3
 6115 0e04 01000000 		.word	1
 6116 0e08 04       		.byte	4
 6117 0e09 000000   		.space	3
 6118 0e0c 01000000 		.word	1
 6119 0e10 52454354 		.ascii	"RECT\000"
 6119      00
 6120 0e15 000000   		.space	3
 6121 0e18 0D205200 		.ascii	"\015 R\000"
 6122 0e1c 00000000 		.space	4
 6123 0e20 0E       		.byte	14
 6124 0e21 000000   		.space	3
 6125 0e24 01000000 		.word	1
 6126 0e28 0E       		.byte	14
 6127 0e29 000000   		.space	3
 6128 0e2c 03000000 		.word	3
 6129 0e30 2B2F2D06 		.ascii	"+/-\006Im\000"
 6129      496D00
 6130 0e37 00       		.space	1
 6131 0e38 2B2F2D06 		.ascii	"+/-\006Re\000"
 6131      526500
 6132 0e3f 00       		.space	1
 6133 0e40 0D       		.byte	13
 6134 0e41 000000   		.space	3
 6135 0e44 02000000 		.word	2
 6136 0e48 00       		.byte	0
 6137 0e49 000000   		.space	3
 6138 0e4c 01000000 		.word	1
 6139 0e50 52651749 		.ascii	"Re\027Im\000"
 6139      6D00
 6140 0e56 0000     		.space	2
 6141 0e58 48595000 		.ascii	"HYP\000"
 6142 0e5c 00000000 		.space	4
 6143 0e60 2C       		.byte	44
 6144 0e61 000000   		.space	3
 6145 0e64 FFFFFFFF 		.word	-1
 6146 0e68 0F       		.byte	15
 6147 0e69 000000   		.space	3
 6148 0e6c 01000000 		.word	1
 6149 0e70 2D2D0D00 		.ascii	"--\015\000"
ARM GAS  /tmp/ccrLsn8H.s 			page 157


 6150 0e74 00000000 		.space	4
 6151 0e78 1106AF00 		.ascii	"\021\006\257\000"
 6152 0e7c 00000000 		.space	4
 6153 0e80 2D       		.byte	45
 6154 0e81 000000   		.space	3
 6155 0e84 FFFFFFFF 		.word	-1
 6156 0e88 0C       		.byte	12
 6157 0e89 000000   		.space	3
 6158 0e8c 01000000 		.word	1
 6159 0e90 43505800 		.ascii	"CPX\000"
 6160 0e94 00000000 		.space	4
 6161 0e98 1106434E 		.ascii	"\021\006CNST\000"
 6161      535400
 6162 0e9f 00       		.space	1
 6163 0ea0 4D5F436C 		.ascii	"M_Clear_C\000"
 6163      6561725F 
 6163      4300
 6164 0eaa 00000000 		.space	5
 6164      00
 6165 0eaf 00       		.space	1
 6166 0eb0 2E       		.byte	46
 6167 0eb1 000000   		.space	3
 6168 0eb4 FFFFFFFF 		.word	-1
 6169 0eb8 2E       		.byte	46
 6170 0eb9 000000   		.space	3
 6171 0ebc FFFFFFFF 		.word	-1
 6172 0ec0 00       		.ascii	"\000"
 6173 0ec1 00000000 		.space	7
 6173      000000
 6174 0ec8 00       		.ascii	"\000"
 6175 0ec9 00000000 		.space	7
 6175      000000
 6176 0ed0 2E       		.byte	46
 6177 0ed1 000000   		.space	3
 6178 0ed4 FFFFFFFF 		.word	-1
 6179 0ed8 2E       		.byte	46
 6180 0ed9 000000   		.space	3
 6181 0edc FFFFFFFF 		.word	-1
 6182 0ee0 00       		.ascii	"\000"
 6183 0ee1 00000000 		.space	7
 6183      000000
 6184 0ee8 00       		.ascii	"\000"
 6185 0ee9 00000000 		.space	7
 6185      000000
 6186 0ef0 10       		.byte	16
 6187 0ef1 000000   		.space	3
 6188 0ef4 03000000 		.word	3
 6189 0ef8 34       		.byte	52
 6190 0ef9 000000   		.space	3
 6191 0efc 74010000 		.word	372
 6192 0f00 434C7800 		.ascii	"CLx\000"
 6193 0f04 00000000 		.space	4
 6194 0f08 434C06A0 		.ascii	"CL\006\240\000"
 6194      00
 6195 0f0d 000000   		.space	3
 6196 0f10 34       		.byte	52
 6197 0f11 000000   		.space	3
ARM GAS  /tmp/ccrLsn8H.s 			page 158


 6198 0f14 40010000 		.word	320
 6199 0f18 2E       		.byte	46
 6200 0f19 000000   		.space	3
 6201 0f1c FFFFFFFF 		.word	-1
 6202 0f20 434C5374 		.ascii	"CLStk\000"
 6202      6B00
 6203 0f26 0000     		.space	2
 6204 0f28 00       		.ascii	"\000"
 6205 0f29 00000000 		.space	7
 6205      000000
 6206 0f30 2C       		.byte	44
 6207 0f31 000000   		.space	3
 6208 0f34 FFFFFFFF 		.word	-1
 6209 0f38 2E       		.byte	46
 6210 0f39 000000   		.space	3
 6211 0f3c FFFFFFFF 		.word	-1
 6212 0f40 2D2D0D00 		.ascii	"--\015\000"
 6213 0f44 00000000 		.space	4
 6214 0f48 00       		.ascii	"\000"
 6215 0f49 00000000 		.space	7
 6215      000000
 6216 0f50 2D       		.byte	45
 6217 0f51 000000   		.space	3
 6218 0f54 FFFFFFFF 		.word	-1
 6219 0f58 2E       		.byte	46
 6220 0f59 000000   		.space	3
 6221 0f5c FFFFFFFF 		.word	-1
 6222 0f60 43505800 		.ascii	"CPX\000"
 6223 0f64 00000000 		.space	4
 6224 0f68 00       		.ascii	"\000"
 6225 0f69 00000000 		.space	7
 6225      000000
 6226 0f70 4D5F5377 		.ascii	"M_Swap_C\000"
 6226      61705F43 
 6226      00
 6227 0f79 00000000 		.space	6
 6227      0000
 6228 0f7f 00       		.space	1
 6229 0f80 0D       		.byte	13
 6230 0f81 000000   		.space	3
 6231 0f84 01000000 		.word	1
 6232 0f88 2E       		.byte	46
 6233 0f89 000000   		.space	3
 6234 0f8c FFFFFFFF 		.word	-1
 6235 0f90 53686F77 		.ascii	"Show\016\000"
 6235      0E00
 6236 0f96 0000     		.space	2
 6237 0f98 00       		.ascii	"\000"
 6238 0f99 00000000 		.space	7
 6238      000000
 6239 0fa0 0D       		.byte	13
 6240 0fa1 000000   		.space	3
 6241 0fa4 02000000 		.word	2
 6242 0fa8 2E       		.byte	46
 6243 0fa9 000000   		.space	3
 6244 0fac FFFFFFFF 		.word	-1
 6245 0fb0 53686F77 		.ascii	"Show\015\000"
ARM GAS  /tmp/ccrLsn8H.s 			page 159


 6245      0D00
 6246 0fb6 0000     		.space	2
 6247 0fb8 00       		.ascii	"\000"
 6248 0fb9 00000000 		.space	7
 6248      000000
 6249 0fc0 0D       		.byte	13
 6250 0fc1 000000   		.space	3
 6251 0fc4 03000000 		.word	3
 6252 0fc8 2E       		.byte	46
 6253 0fc9 000000   		.space	3
 6254 0fcc FFFFFFFF 		.word	-1
 6255 0fd0 78173F00 		.ascii	"x\027?\000"
 6256 0fd4 00000000 		.space	4
 6257 0fd8 00       		.ascii	"\000"
 6258 0fd9 00000000 		.space	7
 6258      000000
 6259 0fe0 2E       		.byte	46
 6260 0fe1 000000   		.space	3
 6261 0fe4 FFFFFFFF 		.word	-1
 6262 0fe8 2E       		.byte	46
 6263 0fe9 000000   		.space	3
 6264 0fec FFFFFFFF 		.word	-1
 6265 0ff0 00       		.ascii	"\000"
 6266 0ff1 00000000 		.space	7
 6266      000000
 6267 0ff8 00       		.ascii	"\000"
 6268 0ff9 00000000 		.space	7
 6268      000000
 6269 1000 2C       		.byte	44
 6270 1001 000000   		.space	3
 6271 1004 FFFFFFFF 		.word	-1
 6272 1008 2E       		.byte	46
 6273 1009 000000   		.space	3
 6274 100c FFFFFFFF 		.word	-1
 6275 1010 2D2D0D00 		.ascii	"--\015\000"
 6276 1014 00000000 		.space	4
 6277 1018 00       		.ascii	"\000"
 6278 1019 00000000 		.space	7
 6278      000000
 6279 1020 2D       		.byte	45
 6280 1021 000000   		.space	3
 6281 1024 FFFFFFFF 		.word	-1
 6282 1028 2E       		.byte	46
 6283 1029 000000   		.space	3
 6284 102c FFFFFFFF 		.word	-1
 6285 1030 43505800 		.ascii	"CPX\000"
 6286 1034 00000000 		.space	4
 6287 1038 00       		.ascii	"\000"
 6288 1039 00000000 		.space	7
 6288      000000
 6289 1040 4D5F4172 		.ascii	"M_Arrow_C\000"
 6289      726F775F 
 6289      4300
 6290 104a 00000000 		.space	5
 6290      00
 6291 104f 00       		.space	1
 6292 1050 2E       		.byte	46
ARM GAS  /tmp/ccrLsn8H.s 			page 160


 6293 1051 000000   		.space	3
 6294 1054 FFFFFFFF 		.word	-1
 6295 1058 06       		.byte	6
 6296 1059 000000   		.space	3
 6297 105c 02000000 		.word	2
 6298 1060 00       		.ascii	"\000"
 6299 1061 00000000 		.space	7
 6299      000000
 6300 1068 44454700 		.ascii	"DEG\000"
 6301 106c 00000000 		.space	4
 6302 1070 2E       		.byte	46
 6303 1071 000000   		.space	3
 6304 1074 FFFFFFFF 		.word	-1
 6305 1078 07       		.byte	7
 6306 1079 000000   		.space	3
 6307 107c 02000000 		.word	2
 6308 1080 00       		.ascii	"\000"
 6309 1081 00000000 		.space	7
 6309      000000
 6310 1088 52414400 		.ascii	"RAD\000"
 6311 108c 00000000 		.space	4
 6312 1090 2E       		.byte	46
 6313 1091 000000   		.space	3
 6314 1094 FFFFFFFF 		.word	-1
 6315 1098 08       		.byte	8
 6316 1099 000000   		.space	3
 6317 109c 02000000 		.word	2
 6318 10a0 00       		.ascii	"\000"
 6319 10a1 00000000 		.space	7
 6319      000000
 6320 10a8 47726164 		.ascii	"Grad\000"
 6320      00
 6321 10ad 000000   		.space	3
 6322 10b0 2E       		.byte	46
 6323 10b1 000000   		.space	3
 6324 10b4 FFFFFFFF 		.word	-1
 6325 10b8 06       		.byte	6
 6326 10b9 000000   		.space	3
 6327 10bc 01000000 		.word	1
 6328 10c0 00       		.ascii	"\000"
 6329 10c1 00000000 		.space	7
 6329      000000
 6330 10c8 0D484D53 		.ascii	"\015HMS\000"
 6330      00
 6331 10cd 000000   		.space	3
 6332 10d0 2C       		.byte	44
 6333 10d1 000000   		.space	3
 6334 10d4 FFFFFFFF 		.word	-1
 6335 10d8 07       		.byte	7
 6336 10d9 000000   		.space	3
 6337 10dc 01000000 		.word	1
 6338 10e0 2D2D0D00 		.ascii	"--\015\000"
 6339 10e4 00000000 		.space	4
 6340 10e8 484D530D 		.ascii	"HMS\015\000"
 6340      00
 6341 10ed 000000   		.space	3
 6342 10f0 2D       		.byte	45
ARM GAS  /tmp/ccrLsn8H.s 			page 161


 6343 10f1 000000   		.space	3
 6344 10f4 FFFFFFFF 		.word	-1
 6345 10f8 2E       		.byte	46
 6346 10f9 000000   		.space	3
 6347 10fc FFFFFFFF 		.word	-1
 6348 1100 43505800 		.ascii	"CPX\000"
 6349 1104 00000000 		.space	4
 6350 1108 00       		.ascii	"\000"
 6351 1109 00000000 		.space	7
 6351      000000
 6352 1110 4D5F5072 		.ascii	"M_Prob_C\000"
 6352      6F625F43 
 6352      00
 6353 1119 00000000 		.space	6
 6353      0000
 6354 111f 00       		.space	1
 6355 1120 18       		.byte	24
 6356 1121 000000   		.space	3
 6357 1124 03000000 		.word	3
 6358 1128 34       		.byte	52
 6359 1129 000000   		.space	3
 6360 112c 31050000 		.word	1329
 6361 1130 14062100 		.ascii	"\024\006!\000"
 6362 1134 00000000 		.space	4
 6363 1138 14064C6E 		.ascii	"\024\006Ln\006\202\000"
 6363      068200
 6364 113f 00       		.space	1
 6365 1140 34       		.byte	52
 6366 1141 000000   		.space	3
 6367 1144 12060000 		.word	1554
 6368 1148 2E       		.byte	46
 6369 1149 000000   		.space	3
 6370 114c FFFFFFFF 		.word	-1
 6371 1150 14064379 		.ascii	"\024\006Cy,x\000"
 6371      2C7800
 6372 1157 00       		.space	1
 6373 1158 00       		.ascii	"\000"
 6374 1159 00000000 		.space	7
 6374      000000
 6375 1160 34       		.byte	52
 6376 1161 000000   		.space	3
 6377 1164 13060000 		.word	1555
 6378 1168 2E       		.byte	46
 6379 1169 000000   		.space	3
 6380 116c FFFFFFFF 		.word	-1
 6381 1170 14065079 		.ascii	"\024\006Py,x\000"
 6381      2C7800
 6382 1177 00       		.space	1
 6383 1178 00       		.ascii	"\000"
 6384 1179 00000000 		.space	7
 6384      000000
 6385 1180 2E       		.byte	46
 6386 1181 000000   		.space	3
 6387 1184 FFFFFFFF 		.word	-1
 6388 1188 2E       		.byte	46
 6389 1189 000000   		.space	3
 6390 118c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccrLsn8H.s 			page 162


 6391 1190 00       		.ascii	"\000"
 6392 1191 00000000 		.space	7
 6392      000000
 6393 1198 00       		.ascii	"\000"
 6394 1199 00000000 		.space	7
 6394      000000
 6395 11a0 2C       		.byte	44
 6396 11a1 000000   		.space	3
 6397 11a4 FFFFFFFF 		.word	-1
 6398 11a8 2E       		.byte	46
 6399 11a9 000000   		.space	3
 6400 11ac FFFFFFFF 		.word	-1
 6401 11b0 2D2D0D00 		.ascii	"--\015\000"
 6402 11b4 00000000 		.space	4
 6403 11b8 00       		.ascii	"\000"
 6404 11b9 00000000 		.space	7
 6404      000000
 6405 11c0 2D       		.byte	45
 6406 11c1 000000   		.space	3
 6407 11c4 FFFFFFFF 		.word	-1
 6408 11c8 2E       		.byte	46
 6409 11c9 000000   		.space	3
 6410 11cc FFFFFFFF 		.word	-1
 6411 11d0 43505800 		.ascii	"CPX\000"
 6412 11d4 00000000 		.space	4
 6413 11d8 00       		.ascii	"\000"
 6414 11d9 00000000 		.space	7
 6414      000000
 6415 11e0 4D5F426C 		.ascii	"M_Blank2_C\000"
 6415      616E6B32 
 6415      5F4300
 6416 11eb 00000000 		.space	4
 6417 11ef 00       		.space	1
 6418 11f0 00       		.byte	0
 6419 11f1 000000   		.space	3
 6420 11f4 01000000 		.word	1
 6421 11f8 2E       		.byte	46
 6422 11f9 000000   		.space	3
 6423 11fc FFFFFFFF 		.word	-1
 6424 1200 48595000 		.ascii	"HYP\000"
 6425 1204 00000000 		.space	4
 6426 1208 00       		.ascii	"\000"
 6427 1209 00000000 		.space	7
 6427      000000
 6428 1210 16       		.byte	22
 6429 1211 000000   		.space	3
 6430 1214 01000000 		.word	1
 6431 1218 2E       		.byte	46
 6432 1219 000000   		.space	3
 6433 121c FFFFFFFF 		.word	-1
 6434 1220 312F5800 		.ascii	"1/X\000"
 6435 1224 00000000 		.space	4
 6436 1228 00       		.ascii	"\000"
 6437 1229 00000000 		.space	7
 6437      000000
 6438 1230 1C       		.byte	28
 6439 1231 000000   		.space	3
ARM GAS  /tmp/ccrLsn8H.s 			page 163


 6440 1234 01000000 		.word	1
 6441 1238 2E       		.byte	46
 6442 1239 000000   		.space	3
 6443 123c FFFFFFFF 		.word	-1
 6444 1240 035800   		.ascii	"\003X\000"
 6445 1243 00000000 		.space	5
 6445      00
 6446 1248 00       		.ascii	"\000"
 6447 1249 00000000 		.space	7
 6447      000000
 6448 1250 13       		.byte	19
 6449 1251 000000   		.space	3
 6450 1254 02000000 		.word	2
 6451 1258 2E       		.byte	46
 6452 1259 000000   		.space	3
 6453 125c FFFFFFFF 		.word	-1
 6454 1260 4C4F4700 		.ascii	"LOG\000"
 6455 1264 00000000 		.space	4
 6456 1268 00       		.ascii	"\000"
 6457 1269 00000000 		.space	7
 6457      000000
 6458 1270 2C       		.byte	44
 6459 1271 000000   		.space	3
 6460 1274 FFFFFFFF 		.word	-1
 6461 1278 2E       		.byte	46
 6462 1279 000000   		.space	3
 6463 127c FFFFFFFF 		.word	-1
 6464 1280 2D2D0D00 		.ascii	"--\015\000"
 6465 1284 00000000 		.space	4
 6466 1288 00       		.ascii	"\000"
 6467 1289 00000000 		.space	7
 6467      000000
 6468 1290 2D       		.byte	45
 6469 1291 000000   		.space	3
 6470 1294 FFFFFFFF 		.word	-1
 6471 1298 2E       		.byte	46
 6472 1299 000000   		.space	3
 6473 129c FFFFFFFF 		.word	-1
 6474 12a0 43505800 		.ascii	"CPX\000"
 6475 12a4 00000000 		.space	4
 6476 12a8 00       		.ascii	"\000"
 6477 12a9 00000000 		.space	7
 6477      000000
 6478 12b0 4D5F4D69 		.ascii	"M_Misc_C\000"
 6478      73635F43 
 6478      00
 6479 12b9 00000000 		.space	6
 6479      0000
 6480 12bf 00       		.space	1
 6481 12c0 25       		.byte	37
 6482 12c1 000000   		.space	3
 6483 12c4 01000000 		.word	1
 6484 12c8 14       		.byte	20
 6485 12c9 000000   		.space	3
 6486 12cc 01000000 		.word	1
 6487 12d0 7C7A7C00 		.ascii	"|z|\000"
 6488 12d4 00000000 		.space	4
ARM GAS  /tmp/ccrLsn8H.s 			page 164


 6489 12d8 14329C00 		.ascii	"\0242\234\000"
 6490 12dc 00000000 		.space	4
 6491 12e0 25       		.byte	37
 6492 12e1 000000   		.space	3
 6493 12e4 02000000 		.word	2
 6494 12e8 14       		.byte	20
 6495 12e9 000000   		.space	3
 6496 12ec 02000000 		.word	2
 6497 12f0 524E4400 		.ascii	"RND\000"
 6498 12f4 00000000 		.space	4
 6499 12f8 144C6F67 		.ascii	"\024Log\272\000"
 6499      BA00
 6500 12fe 0000     		.space	2
 6501 1300 26       		.byte	38
 6502 1301 000000   		.space	3
 6503 1304 01000000 		.word	1
 6504 1308 15       		.byte	21
 6505 1309 000000   		.space	3
 6506 130c 02000000 		.word	2
 6507 1310 300D5265 		.ascii	"0\015Re\000"
 6507      00
 6508 1315 000000   		.space	3
 6509 1318 144C6F67 		.ascii	"\024Log\213\000"
 6509      8B00
 6510 131e 0000     		.space	2
 6511 1320 26       		.byte	38
 6512 1321 000000   		.space	3
 6513 1324 02000000 		.word	2
 6514 1328 16       		.byte	22
 6515 1329 000000   		.space	3
 6516 132c 02000000 		.word	2
 6517 1330 300D496D 		.ascii	"0\015Im\000"
 6517      00
 6518 1335 000000   		.space	3
 6519 1338 147C7C65 		.ascii	"\024||el\000"
 6519      6C00
 6520 133e 0000     		.space	2
 6521 1340 2C       		.byte	44
 6522 1341 000000   		.space	3
 6523 1344 FFFFFFFF 		.word	-1
 6524 1348 1C       		.byte	28
 6525 1349 000000   		.space	3
 6526 134c 03000000 		.word	3
 6527 1350 2D2D0D00 		.ascii	"--\015\000"
 6528 1354 00000000 		.space	4
 6529 1358 142E1C00 		.ascii	"\024.\034\000"
 6530 135c 00000000 		.space	4
 6531 1360 2D       		.byte	45
 6532 1361 000000   		.space	3
 6533 1364 FFFFFFFF 		.word	-1
 6534 1368 16       		.byte	22
 6535 1369 000000   		.space	3
 6536 136c 03000000 		.word	3
 6537 1370 43505800 		.ascii	"CPX\000"
 6538 1374 00000000 		.space	4
 6539 1378 142E2F00 		.ascii	"\024./\000"
 6540 137c 00000000 		.space	4
ARM GAS  /tmp/ccrLsn8H.s 			page 165


 6541 1380 4D5F5573 		.ascii	"M_Usermenu\000"
 6541      65726D65 
 6541      6E7500
 6542 138b 00000000 		.space	4
 6543 138f 00       		.space	1
 6544 1390 34       		.byte	52
 6545 1391 000000   		.space	3
 6546 1394 00FB0000 		.word	64256
 6547 1398 2E       		.byte	46
 6548 1399 000000   		.space	3
 6549 139c FFFFFFFF 		.word	-1
 6550 13a0 554D454E 		.ascii	"UMEN\000"
 6550      00
 6551 13a5 000000   		.space	3
 6552 13a8 00       		.ascii	"\000"
 6553 13a9 00000000 		.space	7
 6553      000000
 6554 13b0 34       		.byte	52
 6555 13b1 000000   		.space	3
 6556 13b4 55FB4D31 		.word	827194197
 6557 13b8 34       		.byte	52
 6558 13b9 000000   		.space	3
 6559 13bc 55FB4D34 		.word	877525845
 6560 13c0 554D3100 		.ascii	"UM1\000"
 6561 13c4 00000000 		.space	4
 6562 13c8 554D3400 		.ascii	"UM4\000"
 6563 13cc 00000000 		.space	4
 6564 13d0 34       		.byte	52
 6565 13d1 000000   		.space	3
 6566 13d4 55FB4D32 		.word	843971413
 6567 13d8 34       		.byte	52
 6568 13d9 000000   		.space	3
 6569 13dc 55FB4D35 		.word	894303061
 6570 13e0 554D3200 		.ascii	"UM2\000"
 6571 13e4 00000000 		.space	4
 6572 13e8 554D3500 		.ascii	"UM5\000"
 6573 13ec 00000000 		.space	4
 6574 13f0 34       		.byte	52
 6575 13f1 000000   		.space	3
 6576 13f4 55FB4D33 		.word	860748629
 6577 13f8 34       		.byte	52
 6578 13f9 000000   		.space	3
 6579 13fc 55FB4D36 		.word	911080277
 6580 1400 554D3300 		.ascii	"UM3\000"
 6581 1404 00000000 		.space	4
 6582 1408 554D3600 		.ascii	"UM6\000"
 6583 140c 00000000 		.space	4
 6584 1410 2C       		.byte	44
 6585 1411 000000   		.space	3
 6586 1414 FFFFFFFF 		.word	-1
 6587 1418 1C       		.byte	28
 6588 1419 000000   		.space	3
 6589 141c 03000000 		.word	3
 6590 1420 2D2D0D00 		.ascii	"--\015\000"
 6591 1424 00000000 		.space	4
 6592 1428 00       		.ascii	"\000"
 6593 1429 00000000 		.space	7
ARM GAS  /tmp/ccrLsn8H.s 			page 166


 6593      000000
 6594 1430 2D       		.byte	45
 6595 1431 000000   		.space	3
 6596 1434 FFFFFFFF 		.word	-1
 6597 1438 16       		.byte	22
 6598 1439 000000   		.space	3
 6599 143c 03000000 		.word	3
 6600 1440 43505800 		.ascii	"CPX\000"
 6601 1444 00000000 		.space	4
 6602 1448 00       		.ascii	"\000"
 6603 1449 00000000 		.space	7
 6603      000000
 6604 1450 4D5F5072 		.ascii	"M_Print\000"
 6604      696E7400 
 6605 1458 00000000 		.space	7
 6605      000000
 6606 145f 00       		.space	1
 6607 1460 34       		.byte	52
 6608 1461 000000   		.space	3
 6609 1464 D9010000 		.word	473
 6610 1468 34       		.byte	52
 6611 1469 000000   		.space	3
 6612 146c DA010000 		.word	474
 6613 1470 92064F6E 		.ascii	"\222\006On\000"
 6613      00
 6614 1475 000000   		.space	3
 6615 1478 92064F66 		.ascii	"\222\006Off\000"
 6615      6600
 6616 147e 0000     		.space	2
 6617 1480 34       		.byte	52
 6618 1481 000000   		.space	3
 6619 1484 00AF0000 		.word	44800
 6620 1488 34       		.byte	52
 6621 1489 000000   		.space	3
 6622 148c 00B60000 		.word	46592
 6623 1490 92064D6F 		.ascii	"\222\006Mode\000"
 6623      646500
 6624 1497 00       		.space	1
 6625 1498 92064462 		.ascii	"\222\006DbSp\000"
 6625      537000
 6626 149f 00       		.space	1
 6627 14a0 34       		.byte	52
 6628 14a1 000000   		.space	3
 6629 14a4 BC010000 		.word	444
 6630 14a8 34       		.byte	52
 6631 14a9 000000   		.space	3
 6632 14ac BD010000 		.word	445
 6633 14b0 92065072 		.ascii	"\222\006Prog\000"
 6633      6F6700
 6634 14b7 00       		.space	1
 6635 14b8 92065265 		.ascii	"\222\006Regs\000"
 6635      677300
 6636 14bf 00       		.space	1
 6637 14c0 34       		.byte	52
 6638 14c1 000000   		.space	3
 6639 14c4 BE010000 		.word	446
 6640 14c8 34       		.byte	52
ARM GAS  /tmp/ccrLsn8H.s 			page 167


 6641 14c9 000000   		.space	3
 6642 14cc BF010000 		.word	447
 6643 14d0 92065374 		.ascii	"\222\006Stk\000"
 6643      6B00
 6644 14d6 0000     		.space	2
 6645 14d8 92069100 		.ascii	"\222\006\221\000"
 6646 14dc 00000000 		.space	4
 6647 14e0 2C       		.byte	44
 6648 14e1 000000   		.space	3
 6649 14e4 FFFFFFFF 		.word	-1
 6650 14e8 34       		.byte	52
 6651 14e9 000000   		.space	3
 6652 14ec C0010000 		.word	448
 6653 14f0 2D2D0D00 		.ascii	"--\015\000"
 6654 14f4 00000000 		.space	4
 6655 14f8 9206A000 		.ascii	"\222\006\240\000"
 6656 14fc 00000000 		.space	4
 6657 1500 2D       		.byte	45
 6658 1501 000000   		.space	3
 6659 1504 FFFFFFFF 		.word	-1
 6660 1508 34       		.byte	52
 6661 1509 000000   		.space	3
 6662 150c C3010000 		.word	451
 6663 1510 43505800 		.ascii	"CPX\000"
 6664 1514 00000000 		.space	4
 6665 1518 92064144 		.ascii	"\222\006ADV\000"
 6665      5600
 6666 151e 0000     		.space	2
 6667              		.section	.rodata.mapping_alpha.11165,"a"
 6668              		.align	2
 6669              		.set	.LANCHOR16,. + 0
 6672              	mapping_alpha.11165:
 6673 0000 63       		.byte	99
 6674 0001 000000   		.space	3
 6675 0004 FFFFFFFF 		.word	-1
 6676 0008 00       		.byte	0
 6677 0009 000000   		.space	3
 6678 000c FFFFFFFF 		.word	-1
 6679 0010 01       		.byte	1
 6680 0011 000000   		.space	3
 6681 0014 FFFFFFFF 		.word	-1
 6682 0018 02       		.byte	2
 6683 0019 000000   		.space	3
 6684 001c FFFFFFFF 		.word	-1
 6685 0020 03       		.byte	3
 6686 0021 000000   		.space	3
 6687 0024 FFFFFFFF 		.word	-1
 6688 0028 04       		.byte	4
 6689 0029 000000   		.space	3
 6690 002c FFFFFFFF 		.word	-1
 6691 0030 05       		.byte	5
 6692 0031 000000   		.space	3
 6693 0034 FFFFFFFF 		.word	-1
 6694 0038 06       		.byte	6
 6695 0039 000000   		.space	3
 6696 003c FFFFFFFF 		.word	-1
 6697 0040 07       		.byte	7
ARM GAS  /tmp/ccrLsn8H.s 			page 168


 6698 0041 000000   		.space	3
 6699 0044 FFFFFFFF 		.word	-1
 6700 0048 08       		.byte	8
 6701 0049 000000   		.space	3
 6702 004c FFFFFFFF 		.word	-1
 6703 0050 09       		.byte	9
 6704 0051 000000   		.space	3
 6705 0054 FFFFFFFF 		.word	-1
 6706 0058 0A       		.byte	10
 6707 0059 000000   		.space	3
 6708 005c FFFFFFFF 		.word	-1
 6709 0060 0B       		.byte	11
 6710 0061 000000   		.space	3
 6711 0064 FFFFFFFF 		.word	-1
 6712 0068 0C       		.byte	12
 6713 0069 000000   		.space	3
 6714 006c FFFFFFFF 		.word	-1
 6715 0070 0D       		.byte	13
 6716 0071 000000   		.space	3
 6717 0074 FFFFFFFF 		.word	-1
 6718 0078 0E       		.byte	14
 6719 0079 000000   		.space	3
 6720 007c FFFFFFFF 		.word	-1
 6721 0080 0F       		.byte	15
 6722 0081 000000   		.space	3
 6723 0084 FFFFFFFF 		.word	-1
 6724 0088 10       		.byte	16
 6725 0089 000000   		.space	3
 6726 008c FFFFFFFF 		.word	-1
 6727 0090 12       		.byte	18
 6728 0091 000000   		.space	3
 6729 0094 FFFFFFFF 		.word	-1
 6730 0098 13       		.byte	19
 6731 0099 000000   		.space	3
 6732 009c FFFFFFFF 		.word	-1
 6733 00a0 14       		.byte	20
 6734 00a1 000000   		.space	3
 6735 00a4 FFFFFFFF 		.word	-1
 6736 00a8 15       		.byte	21
 6737 00a9 000000   		.space	3
 6738 00ac FFFFFFFF 		.word	-1
 6739 00b0 16       		.byte	22
 6740 00b1 000000   		.space	3
 6741 00b4 FFFFFFFF 		.word	-1
 6742 00b8 18       		.byte	24
 6743 00b9 000000   		.space	3
 6744 00bc FFFFFFFF 		.word	-1
 6745 00c0 19       		.byte	25
 6746 00c1 000000   		.space	3
 6747 00c4 FFFFFFFF 		.word	-1
 6748 00c8 1A       		.byte	26
 6749 00c9 000000   		.space	3
 6750 00cc FFFFFFFF 		.word	-1
 6751 00d0 1B       		.byte	27
 6752 00d1 000000   		.space	3
 6753 00d4 FFFFFFFF 		.word	-1
 6754 00d8 1C       		.byte	28
ARM GAS  /tmp/ccrLsn8H.s 			page 169


 6755 00d9 000000   		.space	3
 6756 00dc FFFFFFFF 		.word	-1
 6757 00e0 1E       		.byte	30
 6758 00e1 000000   		.space	3
 6759 00e4 FFFFFFFF 		.word	-1
 6760 00e8 1F       		.byte	31
 6761 00e9 000000   		.space	3
 6762 00ec FFFFFFFF 		.word	-1
 6763 00f0 20       		.byte	32
 6764 00f1 000000   		.space	3
 6765 00f4 FFFFFFFF 		.word	-1
 6766 00f8 21       		.byte	33
 6767 00f9 000000   		.space	3
 6768 00fc FFFFFFFF 		.word	-1
 6769 0100 22       		.byte	34
 6770 0101 000000   		.space	3
 6771 0104 FFFFFFFF 		.word	-1
 6772 0108 24       		.byte	36
 6773 0109 000000   		.space	3
 6774 010c FFFFFFFF 		.word	-1
 6775 0110 25       		.byte	37
 6776 0111 000000   		.space	3
 6777 0114 FFFFFFFF 		.word	-1
 6778 0118 26       		.byte	38
 6779 0119 000000   		.space	3
 6780 011c FFFFFFFF 		.word	-1
 6781 0120 27       		.byte	39
 6782 0121 000000   		.space	3
 6783 0124 FFFFFFFF 		.word	-1
 6784 0128 28       		.byte	40
 6785 0129 000000   		.space	3
 6786 012c FFFFFFFF 		.word	-1
 6787 0130 2E       		.byte	46
 6788 0131 000000   		.space	3
 6789 0134 FFFFFFFF 		.word	-1
 6790 0138 2E       		.byte	46
 6791 0139 000000   		.space	3
 6792 013c FFFFFFFF 		.word	-1
 6793 0140 2E       		.byte	46
 6794 0141 000000   		.space	3
 6795 0144 FFFFFFFF 		.word	-1
 6796 0148 2E       		.byte	46
 6797 0149 000000   		.space	3
 6798 014c FFFFFFFF 		.word	-1
 6799 0150 2C       		.byte	44
 6800 0151 000000   		.space	3
 6801 0154 FFFFFFFF 		.word	-1
 6802 0158 2D       		.byte	45
 6803 0159 000000   		.space	3
 6804 015c FFFFFFFF 		.word	-1
 6805 0160 2E       		.byte	46
 6806 0161 000000   		.space	3
 6807 0164 FFFFFFFF 		.word	-1
 6808 0168 2E       		.byte	46
 6809 0169 000000   		.space	3
 6810 016c FFFFFFFF 		.word	-1
 6811 0170 2E       		.byte	46
ARM GAS  /tmp/ccrLsn8H.s 			page 170


 6812 0171 000000   		.space	3
 6813 0174 FFFFFFFF 		.word	-1
 6814              		.section	.rodata.mapping_fshift.11163,"a"
 6815              		.align	2
 6816              		.set	.LANCHOR14,. + 0
 6819              	mapping_fshift.11163:
 6820 0000 63       		.byte	99
 6821 0001 000000   		.space	3
 6822 0004 FFFFFFFF 		.word	-1
 6823 0008 22       		.byte	34
 6824 0009 000000   		.space	3
 6825 000c 03000000 		.word	3
 6826 0010 15       		.byte	21
 6827 0011 000000   		.space	3
 6828 0014 01000000 		.word	1
 6829 0018 1C       		.byte	28
 6830 0019 000000   		.space	3
 6831 001c 02000000 		.word	2
 6832 0020 13       		.byte	19
 6833 0021 000000   		.space	3
 6834 0024 01000000 		.word	1
 6835 0028 12       		.byte	18
 6836 0029 000000   		.space	3
 6837 002c 01000000 		.word	1
 6838 0030 12       		.byte	18
 6839 0031 000000   		.space	3
 6840 0034 03000000 		.word	3
 6841 0038 31       		.byte	49
 6842 0039 000000   		.space	3
 6843 003c 0F000000 		.word	15
 6844 0040 22       		.byte	34
 6845 0041 000000   		.space	3
 6846 0044 01000000 		.word	1
 6847 0048 0F       		.byte	15
 6848 0049 000000   		.space	3
 6849 004c 03000000 		.word	3
 6850 0050 01       		.byte	1
 6851 0051 000000   		.space	3
 6852 0054 02000000 		.word	2
 6853 0058 02       		.byte	2
 6854 0059 000000   		.space	3
 6855 005c 02000000 		.word	2
 6856 0060 03       		.byte	3
 6857 0061 000000   		.space	3
 6858 0064 02000000 		.word	2
 6859 0068 0C       		.byte	12
 6860 0069 000000   		.space	3
 6861 006c 01000000 		.word	1
 6862 0070 34       		.byte	52
 6863 0071 000000   		.space	3
 6864 0074 6C2A0000 		.word	10860
 6865 0078 2F       		.byte	47
 6866 0079 000000   		.space	3
 6867 007c 04000000 		.word	4
 6868 0080 2F       		.byte	47
 6869 0081 000000   		.space	3
 6870 0084 02000000 		.word	2
ARM GAS  /tmp/ccrLsn8H.s 			page 171


 6871 0088 2F       		.byte	47
 6872 0089 000000   		.space	3
 6873 008c 01000000 		.word	1
 6874 0090 18       		.byte	24
 6875 0091 000000   		.space	3
 6876 0094 00000000 		.word	0
 6877 0098 20       		.byte	32
 6878 0099 000000   		.space	3
 6879 009c 01000000 		.word	1
 6880 00a0 2F       		.byte	47
 6881 00a1 000000   		.space	3
 6882 00a4 0E000000 		.word	14
 6883 00a8 1C       		.byte	28
 6884 00a9 000000   		.space	3
 6885 00ac 03000000 		.word	3
 6886 00b0 2F       		.byte	47
 6887 00b1 000000   		.space	3
 6888 00b4 0C000000 		.word	12
 6889 00b8 1E       		.byte	30
 6890 00b9 000000   		.space	3
 6891 00bc 00000000 		.word	0
 6892 00c0 2F       		.byte	47
 6893 00c1 000000   		.space	3
 6894 00c4 03000000 		.word	3
 6895 00c8 04       		.byte	4
 6896 00c9 000000   		.space	3
 6897 00cc 03000000 		.word	3
 6898 00d0 2F       		.byte	47
 6899 00d1 000000   		.space	3
 6900 00d4 0A000000 		.word	10
 6901 00d8 2F       		.byte	47
 6902 00d9 000000   		.space	3
 6903 00dc 0B000000 		.word	11
 6904 00e0 2A       		.byte	42
 6905 00e1 000000   		.space	3
 6906 00e4 00000000 		.word	0
 6907 00e8 31       		.byte	49
 6908 00e9 000000   		.space	3
 6909 00ec 0D000000 		.word	13
 6910 00f0 2F       		.byte	47
 6911 00f1 000000   		.space	3
 6912 00f4 63000000 		.word	99
 6913 00f8 20       		.byte	32
 6914 00f9 000000   		.space	3
 6915 00fc 03000000 		.word	3
 6916 0100 2F       		.byte	47
 6917 0101 000000   		.space	3
 6918 0104 19000000 		.word	25
 6919 0108 24       		.byte	36
 6920 0109 000000   		.space	3
 6921 010c 03000000 		.word	3
 6922 0110 2F       		.byte	47
 6923 0111 000000   		.space	3
 6924 0114 08000000 		.word	8
 6925 0118 0D       		.byte	13
 6926 0119 000000   		.space	3
 6927 011c 01000000 		.word	1
ARM GAS  /tmp/ccrLsn8H.s 			page 172


 6928 0120 27       		.byte	39
 6929 0121 000000   		.space	3
 6930 0124 03000000 		.word	3
 6931 0128 06       		.byte	6
 6932 0129 000000   		.space	3
 6933 012c 03000000 		.word	3
 6934 0130 2E       		.byte	46
 6935 0131 000000   		.space	3
 6936 0134 00000000 		.word	0
 6937 0138 2E       		.byte	46
 6938 0139 000000   		.space	3
 6939 013c 00000000 		.word	0
 6940 0140 2E       		.byte	46
 6941 0141 000000   		.space	3
 6942 0144 00000000 		.word	0
 6943 0148 2E       		.byte	46
 6944 0149 000000   		.space	3
 6945 014c 00000000 		.word	0
 6946 0150 2E       		.byte	46
 6947 0151 000000   		.space	3
 6948 0154 00000000 		.word	0
 6949 0158 2E       		.byte	46
 6950 0159 000000   		.space	3
 6951 015c 00000000 		.word	0
 6952 0160 2E       		.byte	46
 6953 0161 000000   		.space	3
 6954 0164 00000000 		.word	0
 6955 0168 2F       		.byte	47
 6956 0169 000000   		.space	3
 6957 016c FFFFFFFF 		.word	-1
 6958 0170 2F       		.byte	47
 6959 0171 000000   		.space	3
 6960 0174 05000000 		.word	5
 6961              		.section	.rodata.mapping_gshift.11164,"a"
 6962              		.align	2
 6963              		.set	.LANCHOR17,. + 0
 6966              	mapping_gshift.11164:
 6967 0000 63       		.byte	99
 6968 0001 000000   		.space	3
 6969 0004 FFFFFFFF 		.word	-1
 6970 0008 28       		.byte	40
 6971 0009 000000   		.space	3
 6972 000c 03000000 		.word	3
 6973 0010 16       		.byte	22
 6974 0011 000000   		.space	3
 6975 0014 01000000 		.word	1
 6976 0018 1C       		.byte	28
 6977 0019 000000   		.space	3
 6978 001c 01000000 		.word	1
 6979 0020 13       		.byte	19
 6980 0021 000000   		.space	3
 6981 0024 02000000 		.word	2
 6982 0028 2E       		.byte	46
 6983 0029 000000   		.space	3
 6984 002c 00000000 		.word	0
 6985 0030 2E       		.byte	46
 6986 0031 000000   		.space	3
ARM GAS  /tmp/ccrLsn8H.s 			page 173


 6987 0034 00000000 		.word	0
 6988 0038 2E       		.byte	46
 6989 0039 000000   		.space	3
 6990 003c 00000000 		.word	0
 6991 0040 07       		.byte	7
 6992 0041 000000   		.space	3
 6993 0044 03000000 		.word	3
 6994 0048 08       		.byte	8
 6995 0049 000000   		.space	3
 6996 004c 03000000 		.word	3
 6997 0050 2F       		.byte	47
 6998 0051 000000   		.space	3
 6999 0054 04000000 		.word	4
 7000 0058 2F       		.byte	47
 7001 0059 000000   		.space	3
 7002 005c 04000000 		.word	4
 7003 0060 2F       		.byte	47
 7004 0061 000000   		.space	3
 7005 0064 04000000 		.word	4
 7006 0068 0C       		.byte	12
 7007 0069 000000   		.space	3
 7008 006c 02000000 		.word	2
 7009 0070 2F       		.byte	47
 7010 0071 000000   		.space	3
 7011 0074 06000000 		.word	6
 7012 0078 05       		.byte	5
 7013 0079 000000   		.space	3
 7014 007c 03000000 		.word	3
 7015 0080 2E       		.byte	46
 7016 0081 000000   		.space	3
 7017 0084 00000000 		.word	0
 7018 0088 2E       		.byte	46
 7019 0089 000000   		.space	3
 7020 008c 00000000 		.word	0
 7021 0090 2E       		.byte	46
 7022 0091 000000   		.space	3
 7023 0094 00000000 		.word	0
 7024 0098 2E       		.byte	46
 7025 0099 000000   		.space	3
 7026 009c 00000000 		.word	0
 7027 00a0 2E       		.byte	46
 7028 00a1 000000   		.space	3
 7029 00a4 00000000 		.word	0
 7030 00a8 1B       		.byte	27
 7031 00a9 000000   		.space	3
 7032 00ac 03000000 		.word	3
 7033 00b0 1A       		.byte	26
 7034 00b1 000000   		.space	3
 7035 00b4 03000000 		.word	3
 7036 00b8 2E       		.byte	46
 7037 00b9 000000   		.space	3
 7038 00bc 00000000 		.word	0
 7039 00c0 2E       		.byte	46
 7040 00c1 000000   		.space	3
 7041 00c4 00000000 		.word	0
 7042 00c8 0C       		.byte	12
 7043 00c9 000000   		.space	3
ARM GAS  /tmp/ccrLsn8H.s 			page 174


 7044 00cc 03000000 		.word	3
 7045 00d0 1F       		.byte	31
 7046 00d1 000000   		.space	3
 7047 00d4 03000000 		.word	3
 7048 00d8 19       		.byte	25
 7049 00d9 000000   		.space	3
 7050 00dc 03000000 		.word	3
 7051 00e0 2A       		.byte	42
 7052 00e1 000000   		.space	3
 7053 00e4 FFFFFFFF 		.word	-1
 7054 00e8 2E       		.byte	46
 7055 00e9 000000   		.space	3
 7056 00ec 00000000 		.word	0
 7057 00f0 2F       		.byte	47
 7058 00f1 000000   		.space	3
 7059 00f4 18000000 		.word	24
 7060 00f8 21       		.byte	33
 7061 00f9 000000   		.space	3
 7062 00fc 03000000 		.word	3
 7063 0100 2E       		.byte	46
 7064 0101 000000   		.space	3
 7065 0104 00000000 		.word	0
 7066 0108 24       		.byte	36
 7067 0109 000000   		.space	3
 7068 010c 02000000 		.word	2
 7069 0110 2F       		.byte	47
 7070 0111 000000   		.space	3
 7071 0114 0D000000 		.word	13
 7072 0118 2E       		.byte	46
 7073 0119 000000   		.space	3
 7074 011c 00000000 		.word	0
 7075 0120 2F       		.byte	47
 7076 0121 000000   		.space	3
 7077 0124 07000000 		.word	7
 7078 0128 1E       		.byte	30
 7079 0129 000000   		.space	3
 7080 012c 03000000 		.word	3
 7081 0130 2E       		.byte	46
 7082 0131 000000   		.space	3
 7083 0134 00000000 		.word	0
 7084 0138 2E       		.byte	46
 7085 0139 000000   		.space	3
 7086 013c 00000000 		.word	0
 7087 0140 2E       		.byte	46
 7088 0141 000000   		.space	3
 7089 0144 00000000 		.word	0
 7090 0148 2E       		.byte	46
 7091 0149 000000   		.space	3
 7092 014c 00000000 		.word	0
 7093 0150 2E       		.byte	46
 7094 0151 000000   		.space	3
 7095 0154 00000000 		.word	0
 7096 0158 2E       		.byte	46
 7097 0159 000000   		.space	3
 7098 015c 00000000 		.word	0
 7099 0160 2E       		.byte	46
 7100 0161 000000   		.space	3
ARM GAS  /tmp/ccrLsn8H.s 			page 175


 7101 0164 00000000 		.word	0
 7102 0168 2E       		.byte	46
 7103 0169 000000   		.space	3
 7104 016c 00000000 		.word	0
 7105 0170 2E       		.byte	46
 7106 0171 000000   		.space	3
 7107 0174 00000000 		.word	0
 7108              		.section	.rodata.mapping_none.11162,"a"
 7109              		.align	2
 7110              		.set	.LANCHOR13,. + 0
 7113              	mapping_none.11162:
 7114 0000 63       		.byte	99
 7115 0001 000000   		.space	3
 7116 0004 FFFFFFFF 		.word	-1
 7117 0008 00       		.byte	0
 7118 0009 000000   		.space	3
 7119 000c 00000000 		.word	0
 7120 0010 01       		.byte	1
 7121 0011 000000   		.space	3
 7122 0014 00000000 		.word	0
 7123 0018 03       		.byte	3
 7124 0019 000000   		.space	3
 7125 001c 00000000 		.word	0
 7126 0020 13       		.byte	19
 7127 0021 000000   		.space	3
 7128 0024 02000000 		.word	2
 7129 0028 12       		.byte	18
 7130 0029 000000   		.space	3
 7131 002c 02000000 		.word	2
 7132 0030 12       		.byte	18
 7133 0031 000000   		.space	3
 7134 0034 00000000 		.word	0
 7135 0038 06       		.byte	6
 7136 0039 000000   		.space	3
 7137 003c 00000000 		.word	0
 7138 0040 07       		.byte	7
 7139 0041 000000   		.space	3
 7140 0044 00000000 		.word	0
 7141 0048 08       		.byte	8
 7142 0049 000000   		.space	3
 7143 004c 00000000 		.word	0
 7144 0050 01       		.byte	1
 7145 0051 000000   		.space	3
 7146 0054 01000000 		.word	1
 7147 0058 02       		.byte	2
 7148 0059 000000   		.space	3
 7149 005c 01000000 		.word	1
 7150 0060 03       		.byte	3
 7151 0061 000000   		.space	3
 7152 0064 01000000 		.word	1
 7153 0068 0C       		.byte	12
 7154 0069 000000   		.space	3
 7155 006c 00000000 		.word	0
 7156 0070 0D       		.byte	13
 7157 0071 000000   		.space	3
 7158 0074 00000000 		.word	0
 7159 0078 0E       		.byte	14
ARM GAS  /tmp/ccrLsn8H.s 			page 176


 7160 0079 000000   		.space	3
 7161 007c 00000000 		.word	0
 7162 0080 0F       		.byte	15
 7163 0081 000000   		.space	3
 7164 0084 00000000 		.word	0
 7165 0088 10       		.byte	16
 7166 0089 000000   		.space	3
 7167 008c 00000000 		.word	0
 7168 0090 18       		.byte	24
 7169 0091 000000   		.space	3
 7170 0094 00000000 		.word	0
 7171 0098 13       		.byte	19
 7172 0099 000000   		.space	3
 7173 009c 00000000 		.word	0
 7174 00a0 14       		.byte	20
 7175 00a1 000000   		.space	3
 7176 00a4 00000000 		.word	0
 7177 00a8 15       		.byte	21
 7178 00a9 000000   		.space	3
 7179 00ac 00000000 		.word	0
 7180 00b0 16       		.byte	22
 7181 00b1 000000   		.space	3
 7182 00b4 00000000 		.word	0
 7183 00b8 1E       		.byte	30
 7184 00b9 000000   		.space	3
 7185 00bc 00000000 		.word	0
 7186 00c0 19       		.byte	25
 7187 00c1 000000   		.space	3
 7188 00c4 00000000 		.word	0
 7189 00c8 1A       		.byte	26
 7190 00c9 000000   		.space	3
 7191 00cc 00000000 		.word	0
 7192 00d0 1B       		.byte	27
 7193 00d1 000000   		.space	3
 7194 00d4 00000000 		.word	0
 7195 00d8 1C       		.byte	28
 7196 00d9 000000   		.space	3
 7197 00dc 00000000 		.word	0
 7198 00e0 29       		.byte	41
 7199 00e1 000000   		.space	3
 7200 00e4 00000000 		.word	0
 7201 00e8 1F       		.byte	31
 7202 00e9 000000   		.space	3
 7203 00ec 00000000 		.word	0
 7204 00f0 20       		.byte	32
 7205 00f1 000000   		.space	3
 7206 00f4 00000000 		.word	0
 7207 00f8 21       		.byte	33
 7208 00f9 000000   		.space	3
 7209 00fc 00000000 		.word	0
 7210 0100 22       		.byte	34
 7211 0101 000000   		.space	3
 7212 0104 00000000 		.word	0
 7213 0108 24       		.byte	36
 7214 0109 000000   		.space	3
 7215 010c 00000000 		.word	0
 7216 0110 25       		.byte	37
ARM GAS  /tmp/ccrLsn8H.s 			page 177


 7217 0111 000000   		.space	3
 7218 0114 00000000 		.word	0
 7219 0118 26       		.byte	38
 7220 0119 000000   		.space	3
 7221 011c 00000000 		.word	0
 7222 0120 27       		.byte	39
 7223 0121 000000   		.space	3
 7224 0124 00000000 		.word	0
 7225 0128 28       		.byte	40
 7226 0129 000000   		.space	3
 7227 012c 00000000 		.word	0
 7228 0130 2E       		.byte	46
 7229 0131 000000   		.space	3
 7230 0134 00000000 		.word	0
 7231 0138 2E       		.byte	46
 7232 0139 000000   		.space	3
 7233 013c 00000000 		.word	0
 7234 0140 2E       		.byte	46
 7235 0141 000000   		.space	3
 7236 0144 00000000 		.word	0
 7237 0148 2E       		.byte	46
 7238 0149 000000   		.space	3
 7239 014c 00000000 		.word	0
 7240 0150 2E       		.byte	46
 7241 0151 000000   		.space	3
 7242 0154 00000000 		.word	0
 7243 0158 2E       		.byte	46
 7244 0159 000000   		.space	3
 7245 015c 00000000 		.word	0
 7246 0160 2E       		.byte	46
 7247 0161 000000   		.space	3
 7248 0164 00000000 		.word	0
 7249 0168 2E       		.byte	46
 7250 0169 000000   		.space	3
 7251 016c 00000000 		.word	0
 7252 0170 2E       		.byte	46
 7253 0171 000000   		.space	3
 7254 0174 00000000 		.word	0
 7255              		.section	.rodata.mapping_running.11166,"a"
 7256              		.align	2
 7257              		.set	.LANCHOR12,. + 0
 7260              	mapping_running.11166:
 7261 0000 63       		.byte	99
 7262 0001 000000   		.space	3
 7263 0004 FFFFFFFF 		.word	-1
 7264 0008 00       		.byte	0
 7265 0009 000000   		.space	3
 7266 000c 00000000 		.word	0
 7267 0010 01       		.byte	1
 7268 0011 000000   		.space	3
 7269 0014 00000000 		.word	0
 7270 0018 02       		.byte	2
 7271 0019 000000   		.space	3
 7272 001c 00000000 		.word	0
 7273 0020 03       		.byte	3
 7274 0021 000000   		.space	3
 7275 0024 00000000 		.word	0
ARM GAS  /tmp/ccrLsn8H.s 			page 178


 7276 0028 04       		.byte	4
 7277 0029 000000   		.space	3
 7278 002c 00000000 		.word	0
 7279 0030 12       		.byte	18
 7280 0031 000000   		.space	3
 7281 0034 00000000 		.word	0
 7282 0038 06       		.byte	6
 7283 0039 000000   		.space	3
 7284 003c 00000000 		.word	0
 7285 0040 07       		.byte	7
 7286 0041 000000   		.space	3
 7287 0044 00000000 		.word	0
 7288 0048 08       		.byte	8
 7289 0049 000000   		.space	3
 7290 004c 00000000 		.word	0
 7291 0050 09       		.byte	9
 7292 0051 000000   		.space	3
 7293 0054 00000000 		.word	0
 7294 0058 0A       		.byte	10
 7295 0059 000000   		.space	3
 7296 005c 00000000 		.word	0
 7297 0060 0B       		.byte	11
 7298 0061 000000   		.space	3
 7299 0064 00000000 		.word	0
 7300 0068 0C       		.byte	12
 7301 0069 000000   		.space	3
 7302 006c 00000000 		.word	0
 7303 0070 0D       		.byte	13
 7304 0071 000000   		.space	3
 7305 0074 00000000 		.word	0
 7306 0078 0E       		.byte	14
 7307 0079 000000   		.space	3
 7308 007c 00000000 		.word	0
 7309 0080 0F       		.byte	15
 7310 0081 000000   		.space	3
 7311 0084 00000000 		.word	0
 7312 0088 10       		.byte	16
 7313 0089 000000   		.space	3
 7314 008c 00000000 		.word	0
 7315 0090 18       		.byte	24
 7316 0091 000000   		.space	3
 7317 0094 00000000 		.word	0
 7318 0098 13       		.byte	19
 7319 0099 000000   		.space	3
 7320 009c 00000000 		.word	0
 7321 00a0 14       		.byte	20
 7322 00a1 000000   		.space	3
 7323 00a4 00000000 		.word	0
 7324 00a8 15       		.byte	21
 7325 00a9 000000   		.space	3
 7326 00ac 00000000 		.word	0
 7327 00b0 16       		.byte	22
 7328 00b1 000000   		.space	3
 7329 00b4 00000000 		.word	0
 7330 00b8 1E       		.byte	30
 7331 00b9 000000   		.space	3
 7332 00bc 00000000 		.word	0
ARM GAS  /tmp/ccrLsn8H.s 			page 179


 7333 00c0 19       		.byte	25
 7334 00c1 000000   		.space	3
 7335 00c4 00000000 		.word	0
 7336 00c8 1A       		.byte	26
 7337 00c9 000000   		.space	3
 7338 00cc 00000000 		.word	0
 7339 00d0 1B       		.byte	27
 7340 00d1 000000   		.space	3
 7341 00d4 00000000 		.word	0
 7342 00d8 1C       		.byte	28
 7343 00d9 000000   		.space	3
 7344 00dc 00000000 		.word	0
 7345 00e0 09       		.byte	9
 7346 00e1 000000   		.space	3
 7347 00e4 00000000 		.word	0
 7348 00e8 1F       		.byte	31
 7349 00e9 000000   		.space	3
 7350 00ec 00000000 		.word	0
 7351 00f0 20       		.byte	32
 7352 00f1 000000   		.space	3
 7353 00f4 00000000 		.word	0
 7354 00f8 21       		.byte	33
 7355 00f9 000000   		.space	3
 7356 00fc 00000000 		.word	0
 7357 0100 22       		.byte	34
 7358 0101 000000   		.space	3
 7359 0104 00000000 		.word	0
 7360 0108 24       		.byte	36
 7361 0109 000000   		.space	3
 7362 010c 00000000 		.word	0
 7363 0110 25       		.byte	37
 7364 0111 000000   		.space	3
 7365 0114 00000000 		.word	0
 7366 0118 26       		.byte	38
 7367 0119 000000   		.space	3
 7368 011c 00000000 		.word	0
 7369 0120 27       		.byte	39
 7370 0121 000000   		.space	3
 7371 0124 00000000 		.word	0
 7372 0128 28       		.byte	40
 7373 0129 000000   		.space	3
 7374 012c 00000000 		.word	0
 7375 0130 2E       		.byte	46
 7376 0131 000000   		.space	3
 7377 0134 00000000 		.word	0
 7378 0138 2E       		.byte	46
 7379 0139 000000   		.space	3
 7380 013c 00000000 		.word	0
 7381 0140 2E       		.byte	46
 7382 0141 000000   		.space	3
 7383 0144 00000000 		.word	0
 7384 0148 2E       		.byte	46
 7385 0149 000000   		.space	3
 7386 014c 00000000 		.word	0
 7387 0150 04       		.byte	4
 7388 0151 000000   		.space	3
 7389 0154 00000000 		.word	0
ARM GAS  /tmp/ccrLsn8H.s 			page 180


 7390 0158 05       		.byte	5
 7391 0159 000000   		.space	3
 7392 015c 00000000 		.word	0
 7393 0160 2E       		.byte	46
 7394 0161 000000   		.space	3
 7395 0164 00000000 		.word	0
 7396 0168 2E       		.byte	46
 7397 0169 000000   		.space	3
 7398 016c 00000000 		.word	0
 7399 0170 2E       		.byte	46
 7400 0171 000000   		.space	3
 7401 0174 00000000 		.word	0
 7402              		.section	.rodata.mid_menu,"a"
 7403              		.align	2
 7406              	mid_menu:
 7407 0000 C8C40B00 		.ascii	"\310\304\013\000"
 7408              		.text
 7409              	.Letext0:
 7410              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 7411              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 7412              		.file 6 "/usr/include/newlib/sys/_types.h"
 7413              		.file 7 "/usr/include/newlib/sys/reent.h"
 7414              		.file 8 "/usr/include/newlib/sys/lock.h"
 7415              		.file 9 "/usr/include/newlib/stdlib.h"
 7416              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 7417              		.file 11 "/usr/include/newlib/ctype.h"
 7418              		.file 12 "dmcp/ff_ifc.h"
 7419              		.file 13 "dmcp/dmcp.h"
 7420              		.file 14 "src/keys.h"
 7421              		.file 15 "src/menu.h"
 7422              		.file 16 "src/decNumber/decContext.h"
 7423              		.file 17 "src/decNumber/decNumber.h"
 7424              		.file 18 "src/decNumber/decimal64.h"
 7425              		.file 19 "src/decNumber/decimal128.h"
 7426              		.file 20 "src/xeq.h"
 7427              		.file 21 "src/data.h"
 7428              		.file 22 "src/display.h"
 7429              		.file 23 "src/consts.h"
 7430              		.file 24 "src/storage.h"
 7431              		.file 25 "src/catalogues.h"
 7432              		.file 26 "src/stopwatch.h"
 7433              		.file 27 "src/lcd.h"
 7434              		.file 28 "/usr/include/newlib/string.h"
 7435              		.file 29 "/usr/include/newlib/stdio.h"
 7436              		.file 30 "<built-in>"
ARM GAS  /tmp/ccrLsn8H.s 			page 181


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccrLsn8H.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/ccrLsn8H.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/ccrLsn8H.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/ccrLsn8H.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/ccrLsn8H.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccrLsn8H.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccrLsn8H.s:428    .text.set_menu_label.constprop.0:0000000000000134 $d
     /tmp/ccrLsn8H.s:435    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/ccrLsn8H.s:466    .text.disp_about:0000000000000000 $t
     /tmp/ccrLsn8H.s:474    .text.disp_about:0000000000000000 disp_about
     /tmp/ccrLsn8H.s:682    .text.disp_about:00000000000000d4 $d
     /tmp/ccrLsn8H.s:705    .text.run_menu_item:0000000000000000 $t
     /tmp/ccrLsn8H.s:713    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/ccrLsn8H.s:753    .text.set_menu:0000000000000000 $t
     /tmp/ccrLsn8H.s:761    .text.set_menu:0000000000000000 set_menu
     /tmp/ccrLsn8H.s:816    .text.set_menu:000000000000002c $d
     /tmp/ccrLsn8H.s:823    .text.set_default_menu:0000000000000000 $t
     /tmp/ccrLsn8H.s:831    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/ccrLsn8H.s:905    .text.set_default_menu:000000000000002c $d
     /tmp/ccrLsn8H.s:914    .text.toggle_default_menu:0000000000000000 $t
     /tmp/ccrLsn8H.s:922    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/ccrLsn8H.s:1024   .text.toggle_default_menu:0000000000000044 $d
     /tmp/ccrLsn8H.s:1035   .text.get_menu:0000000000000000 $t
     /tmp/ccrLsn8H.s:1043   .text.get_menu:0000000000000000 get_menu
     /tmp/ccrLsn8H.s:1059   .text.get_menu:0000000000000008 $d
     /tmp/ccrLsn8H.s:1064   .text.get_last_menu:0000000000000000 $t
     /tmp/ccrLsn8H.s:1072   .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/ccrLsn8H.s:1088   .text.get_last_menu:0000000000000008 $d
     /tmp/ccrLsn8H.s:1093   .text.set_last_menu:0000000000000000 $t
     /tmp/ccrLsn8H.s:1101   .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccrLsn8H.s:1176   .text.set_last_menu:000000000000002c $d
     /tmp/ccrLsn8H.s:1185   .text.mdot:0000000000000000 $t
     /tmp/ccrLsn8H.s:1193   .text.mdot:0000000000000000 mdot
     /tmp/ccrLsn8H.s:1284   .text.mdot:000000000000003c $d
     /tmp/ccrLsn8H.s:1289   .text.get_current_menu_ref:0000000000000000 $t
     /tmp/ccrLsn8H.s:1297   .text.get_current_menu_ref:0000000000000000 get_current_menu_ref
     /tmp/ccrLsn8H.s:1364   .text.get_current_menu_ref:0000000000000040 $d
     /tmp/ccrLsn8H.s:1379   .text.get_current_menu_ref:000000000000007c $t
     /tmp/ccrLsn8H.s:1449   .text.get_current_menu_ref:00000000000000a8 $d
     /tmp/ccrLsn8H.s:5028   .rodata.Menus:0000000000000000 Menus
     /tmp/ccrLsn8H.s:1457   .text.display_menu:0000000000000000 $t
     /tmp/ccrLsn8H.s:1465   .text.display_menu:0000000000000000 display_menu
     /tmp/ccrLsn8H.s:1713   .text.display_menu:000000000000010c $d
     /tmp/ccrLsn8H.s:1720   .text.display_current_menu:0000000000000000 $t
     /tmp/ccrLsn8H.s:1728   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccrLsn8H.s:1764   .text.all_menu_dots:0000000000000000 $t
     /tmp/ccrLsn8H.s:1772   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccrLsn8H.s:1856   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccrLsn8H.s:1861   .text.umen_store:0000000000000000 $t
     /tmp/ccrLsn8H.s:1869   .text.umen_store:0000000000000000 umen_store
     /tmp/ccrLsn8H.s:1970   .text.umen_store:0000000000000050 $d
     /tmp/ccrLsn8H.s:1975   .text.build_user_menu_from_program:0000000000000000 $t
     /tmp/ccrLsn8H.s:1983   .text.build_user_menu_from_program:0000000000000000 build_user_menu_from_program
     /tmp/ccrLsn8H.s:2394   .text.build_user_menu_from_program:0000000000000180 $d
     /tmp/ccrLsn8H.s:2407   .text.build_user_menu:0000000000000000 $t
ARM GAS  /tmp/ccrLsn8H.s 			page 182


     /tmp/ccrLsn8H.s:2415   .text.build_user_menu:0000000000000000 build_user_menu
     /tmp/ccrLsn8H.s:2431   .text.build_user_menu:0000000000000008 $d
     /tmp/ccrLsn8H.s:2436   .text.shutdown:0000000000000000 $t
     /tmp/ccrLsn8H.s:2444   .text.shutdown:0000000000000000 shutdown
     /tmp/ccrLsn8H.s:2462   .text.shutdown:000000000000000c $d
     /tmp/ccrLsn8H.s:2467   .text.is_key_pressed:0000000000000000 $t
     /tmp/ccrLsn8H.s:2475   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccrLsn8H.s:2498   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccrLsn8H.s:2503   .text.get_key:0000000000000000 $t
     /tmp/ccrLsn8H.s:2511   .text.get_key:0000000000000000 get_key
     /tmp/ccrLsn8H.s:2526   .text.get_key:0000000000000004 $d
     /tmp/ccrLsn8H.s:2531   .text.put_key:0000000000000000 $t
     /tmp/ccrLsn8H.s:2539   .text.put_key:0000000000000000 put_key
     /tmp/ccrLsn8H.s:2618   .text.put_key:000000000000003c $d
     /tmp/ccrLsn8H.s:2624   .text.shift_down:0000000000000000 $t
     /tmp/ccrLsn8H.s:2632   .text.shift_down:0000000000000000 shift_down
     /tmp/ccrLsn8H.s:2647   .text.start_key_timer:0000000000000000 $t
     /tmp/ccrLsn8H.s:2655   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccrLsn8H.s:2679   .text.start_key_timer:000000000000000c $d
     /tmp/ccrLsn8H.s:2685   .text.keyticks:0000000000000000 $t
     /tmp/ccrLsn8H.s:2693   .text.keyticks:0000000000000000 keyticks
     /tmp/ccrLsn8H.s:2724   .text.keyticks:0000000000000018 $d
     /tmp/ccrLsn8H.s:2730   .text.moveto:0000000000000000 $t
     /tmp/ccrLsn8H.s:2738   .text.moveto:0000000000000000 moveto
     /tmp/ccrLsn8H.s:2798   .text.moveto:000000000000002c $d
     /tmp/ccrLsn8H.s:2805   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccrLsn8H.s:2809   .text.print_debug:0000000000000000 $t
     /tmp/ccrLsn8H.s:2817   .text.print_debug:0000000000000000 print_debug
     /tmp/ccrLsn8H.s:2919   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccrLsn8H.s:2930   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccrLsn8H.s:2934   .text.print_debug2:0000000000000000 $t
     /tmp/ccrLsn8H.s:2942   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccrLsn8H.s:3044   .text.print_debug2:0000000000000064 $d
     /tmp/ccrLsn8H.s:3055   .text.do_now:0000000000000000 $t
     /tmp/ccrLsn8H.s:3063   .text.do_now:0000000000000000 do_now
     /tmp/ccrLsn8H.s:3098   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccrLsn8H.s:3102   .text.do_multi:0000000000000000 $t
     /tmp/ccrLsn8H.s:3110   .text.do_multi:0000000000000000 do_multi
     /tmp/ccrLsn8H.s:3140   .text.do_multi:0000000000000016 $d
     /tmp/ccrLsn8H.s:3154   .text.do_multi:0000000000000024 $t
     /tmp/ccrLsn8H.s:3569   .text.do_multi:00000000000001b8 $d
     /tmp/ccrLsn8H.s:3583   .text.program_main:0000000000000000 $t
     /tmp/ccrLsn8H.s:3591   .text.program_main:0000000000000000 program_main
     /tmp/ccrLsn8H.s:3860   .text.program_main:0000000000000120 $d
     /tmp/ccrLsn8H.s:3866   .text.program_main:000000000000012c $t
     /tmp/ccrLsn8H.s:4138   .text.program_main:0000000000000268 $d
     /tmp/ccrLsn8H.s:4184   .text.program_main:00000000000002e0 $t
     /tmp/ccrLsn8H.s:4768   .text.program_main:0000000000000594 $d
     /tmp/ccrLsn8H.s:4863   .bss.n_p:0000000000000000 n_p
     /tmp/ccrLsn8H.s:5012   .data.spaces:0000000000000000 spaces
     /tmp/ccrLsn8H.s:5003   .data.release:0000000000000000 release
     /tmp/ccrLsn8H.s:4976   .data.h_shift:0000000000000000 h_shift
     /tmp/ccrLsn8H.s:4967   .data.g_shift:0000000000000000 g_shift
     /tmp/ccrLsn8H.s:4959   .data.f_shift:0000000000000000 f_shift
     /tmp/ccrLsn8H.s:4985   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccrLsn8H.s:4994   .data.no_key:0000000000000000 no_key
ARM GAS  /tmp/ccrLsn8H.s 			page 183


     /tmp/ccrLsn8H.s:5019   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccrLsn8H.s:4803   .rodata.str1.4:0000000000000000 $d
     /tmp/ccrLsn8H.s:7406   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccrLsn8H.s:4844   .bss.default_menu:0000000000000000 default_menu
     /tmp/ccrLsn8H.s:4850   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccrLsn8H.s:4838   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccrLsn8H.s:4953   .data.cmplx_key_string:0000000000000000 cmplx_key_string
     /tmp/ccrLsn8H.s:4946   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/ccrLsn8H.s:4877   .data.UserMenu:0000000000000000 UserMenu
     /tmp/ccrLsn8H.s:4820   .rodata:0000000000000000 $d
     /tmp/ccrLsn8H.s:4839   .bss.current_menu:0000000000000000 $d
     /tmp/ccrLsn8H.s:4845   .bss.default_menu:0000000000000000 $d
     /tmp/ccrLsn8H.s:4851   .bss.last_menu:0000000000000000 $d
     /tmp/ccrLsn8H.s:4853   .bss.mdots:0000000000000000 $d
     /tmp/ccrLsn8H.s:4857   .bss.mdots:0000000000000000 mdots
     /tmp/ccrLsn8H.s:4860   .bss.n_p:0000000000000000 $d
     /tmp/ccrLsn8H.s:4866   .bss.start_ticks:0000000000000000 $d
     /tmp/ccrLsn8H.s:4870   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccrLsn8H.s:4873   .data.UserMenu:0000000000000000 $d
     /tmp/ccrLsn8H.s:4942   .data.arrow_key_string:0000000000000000 $d
     /tmp/ccrLsn8H.s:4949   .data.cmplx_key_string:0000000000000000 $d
     /tmp/ccrLsn8H.s:4956   .data.f_shift:0000000000000000 $d
     /tmp/ccrLsn8H.s:4964   .data.g_shift:0000000000000000 $d
     /tmp/ccrLsn8H.s:4972   .data.h_shift:0000000000000000 $d
     /tmp/ccrLsn8H.s:4981   .data.heartbeat:0000000000000000 $d
     /tmp/ccrLsn8H.s:4990   .data.no_key:0000000000000000 $d
     /tmp/ccrLsn8H.s:4999   .data.release:0000000000000000 $d
     /tmp/ccrLsn8H.s:5008   .data.spaces:0000000000000000 $d
     /tmp/ccrLsn8H.s:5015   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccrLsn8H.s:5025   .rodata.Menus:0000000000000000 $d
     /tmp/ccrLsn8H.s:6668   .rodata.mapping_alpha.11165:0000000000000000 $d
     /tmp/ccrLsn8H.s:6672   .rodata.mapping_alpha.11165:0000000000000000 mapping_alpha.11165
     /tmp/ccrLsn8H.s:6815   .rodata.mapping_fshift.11163:0000000000000000 $d
     /tmp/ccrLsn8H.s:6819   .rodata.mapping_fshift.11163:0000000000000000 mapping_fshift.11163
     /tmp/ccrLsn8H.s:6962   .rodata.mapping_gshift.11164:0000000000000000 $d
     /tmp/ccrLsn8H.s:6966   .rodata.mapping_gshift.11164:0000000000000000 mapping_gshift.11164
     /tmp/ccrLsn8H.s:7109   .rodata.mapping_none.11162:0000000000000000 $d
     /tmp/ccrLsn8H.s:7113   .rodata.mapping_none.11162:0000000000000000 mapping_none.11162
     /tmp/ccrLsn8H.s:7256   .rodata.mapping_running.11166:0000000000000000 $d
     /tmp/ccrLsn8H.s:7260   .rodata.mapping_running.11166:0000000000000000 mapping_running.11166
     /tmp/ccrLsn8H.s:7403   .rodata.mid_menu:0000000000000000 $d

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
RectPolConv
xcopy
clear_disp
SvnRevision
memcpy
main_ram
pixel_length
strncpy
findmultilbl
do_inc
getprog
ARM GAS  /tmp/ccrLsn8H.s 			page 184


prt_umen
catcmd
strcpy
sprintf
process_keycode_with_shift
reset_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
KeyCallback
JustDisplayed
Pause
Running
DM42_Ticker
is_dot
dot
get_alpha_state
StopWatchStatus
JustStopped

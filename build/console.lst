ARM GAS  /tmp/ccLcrImZ.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC1:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** /* 
   4:src/menu.c    ****  * System menu stuff
   5:src/menu.c    ****  */
   6:src/menu.c    **** 
   7:src/menu.c    **** #define MI_ABOUT_PGM 11
   8:src/menu.c    **** 
   9:src/menu.c    **** const uint8_t mid_menu[] = {
  10:src/menu.c    ****     MI_SYSTEM_ENTER,
  11:src/menu.c    ****     MI_MSC,
  12:src/menu.c    ****     MI_ABOUT_PGM,
  13:src/menu.c    ****     0 }; // Terminator
  14:src/menu.c    **** 
  15:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  16:src/menu.c    **** 
  17:src/menu.c    **** void disp_about(void);
  18:src/menu.c    **** 
  19:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  20:src/menu.c    ****   int ret = 0;
  21:src/menu.c    **** 
  22:src/menu.c    ****   switch(line_id) {
  23:src/menu.c    ****     case MI_ABOUT_PGM:
ARM GAS  /tmp/ccLcrImZ.s 			page 2


  24:src/menu.c    ****       disp_about();
  25:src/menu.c    ****       break;
  26:src/menu.c    **** 
  27:src/menu.c    ****      default:
  28:src/menu.c    ****       ret = MRET_UNIMPL;
  29:src/menu.c    ****       break;
  30:src/menu.c    ****   }
  31:src/menu.c    **** 
  32:src/menu.c    ****   return ret;
  33:src/menu.c    **** }
  34:src/menu.c    **** 
  35:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 35 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  36:src/menu.c    ****   const char * ln;
  40              		.loc 1 36 3 view .LVU1
  37:src/menu.c    **** 
  38:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 38 3 view .LVU2
  39:src/menu.c    **** 
  40:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  41:src/menu.c    **** 
  42:src/menu.c    ****   default:
  43:src/menu.c    ****     ln = NULL;
  42              		.loc 1 43 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  38:src/menu.c    **** 
  44              		.loc 1 38 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
  44:src/menu.c    ****     break;
  45:src/menu.c    ****   }
  46:src/menu.c    **** 
  47:src/menu.c    ****   return ln;
  48:src/menu.c    **** }
  46              		.loc 1 48 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 48 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC1
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccLcrImZ.s 			page 3


  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB30:
  49:src/menu.c    **** 
  50:src/menu.c    **** void disp_about() {
  51:src/menu.c    ****   lcd_clear_buf();
  52:src/menu.c    ****   lcd_writeClr(t24);
  53:src/menu.c    **** 
  54:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  55:src/menu.c    ****   lcd_printR(t24, "WP34s calculator for DM42:");
  56:src/menu.c    ****   t24->y += 5;
  57:src/menu.c    **** #ifdef TOP_ROW
  58:src/menu.c    ****   lcd_print(t24, "with top row for annunciators,");
  59:src/menu.c    ****   lcd_print(t24, "a longer alpha display,");
  60:src/menu.c    ****   lcd_print(t24, "and some annunciators renamed.");
  61:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  62:src/menu.c    ****   lcd_print(t24, "with a longer alpha display");
  63:src/menu.c    ****   lcd_print(t24, "than the original calculator,");
  64:src/menu.c    ****   lcd_print(t24, "and some annunciators renamed.");
  65:src/menu.c    ****   #else
  66:src/menu.c    ****   lcd_print(t24, "Just like the original calculator");
  67:src/menu.c    ****   lcd_print(t24, "but with some annunciators renamed.");
  68:src/menu.c    **** #endif
  69:src/menu.c    ****   t24->y += 5;
  70:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
  71:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
  72:src/menu.c    **** 
  73:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
  74:src/menu.c    ****   t24->x = 20;
  75:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
  76:src/menu.c    **** 
  77:src/menu.c    ****   lcd_refresh();
  78:src/menu.c    **** 
  79:src/menu.c    ****   wait_for_key_press();
  80:src/menu.c    **** }
  81:src/menu.c    **** 
  82:src/menu.c    **** /*
  83:src/menu.c    ****  * WP34s menu code
  84:src/menu.c    ****  */
  85:src/menu.c    **** 
  86:src/menu.c    **** void set_menu ( int new_menu ) {
  87:src/menu.c    ****   int m = current_menu;
  88:src/menu.c    ****   if (new_menu == current_menu) { // return to default
  89:src/menu.c    ****     current_menu = default_menu;
  90:src/menu.c    ****   }
  91:src/menu.c    ****   else if (new_menu == -1) { // go to last menu
  92:src/menu.c    ****     current_menu = last_menu;
  93:src/menu.c    ****   }
  94:src/menu.c    ****   else {
  95:src/menu.c    ****     current_menu = new_menu; // change to new menu
  96:src/menu.c    ****   }
  97:src/menu.c    ****   if ( (m != 9) && (m != 16) ) last_menu = m; // store menu as last menu unless arrow or alpha
  98:src/menu.c    **** }
  99:src/menu.c    **** 
 100:src/menu.c    **** void toggle_default_menu () {
 101:src/menu.c    ****   if (current_menu == default_menu) {
 102:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
ARM GAS  /tmp/ccLcrImZ.s 			page 4


 103:src/menu.c    ****   }
 104:src/menu.c    **** }
 105:src/menu.c    **** 
 106:src/menu.c    **** int get_menu () {
 107:src/menu.c    ****   return current_menu;
 108:src/menu.c    **** }
 109:src/menu.c    **** 
 110:src/menu.c    **** void display_current_menu () {
 111:src/menu.c    ****   display_menu (current_menu);
 112:src/menu.c    **** }
 113:src/menu.c    **** 
 114:src/menu.c    **** void set_last_menu () {
 115:src/menu.c    ****   set_menu (last_menu);
 116:src/menu.c    **** }
 117:src/menu.c    **** 
 118:src/menu.c    **** static unsigned char mdots[200][2];
 119:src/menu.c    **** 
 120:src/menu.c    **** static const struct _menu Menus[] = {
 121:src/menu.c    ****   {
 122:src/menu.c    ****     "Blank", // 0
 123:src/menu.c    ****     { 
 124:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 125:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 126:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 127:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 128:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 129:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 130:src/menu.c    ****     }    
 131:src/menu.c    ****   },
 132:src/menu.c    ****   {
 133:src/menu.c    ****     "Clear", // 1
 134:src/menu.c    ****     { 
 135:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 136:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 137:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 138:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 139:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 140:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 141:src/menu.c    ****     }    
 142:src/menu.c    ****   },
 143:src/menu.c    ****   {
 144:src/menu.c    ****     "DISP", // 2
 145:src/menu.c    ****     { 
 146:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 147:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 148:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 149:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 150:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 151:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 152:src/menu.c    ****     }
 153:src/menu.c    ****   },
 154:src/menu.c    ****   {
 155:src/menu.c    ****     "BASE", // 3
 156:src/menu.c    ****     { 
 157:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 158:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 159:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
ARM GAS  /tmp/ccLcrImZ.s 			page 5


 160:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 161:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
 162:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 163:src/menu.c    ****     }
 164:src/menu.c    ****   },
 165:src/menu.c    ****   {
 166:src/menu.c    ****     "ANGLES", // 4
 167:src/menu.c    ****     { 
 168:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 169:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 170:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 171:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 172:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 173:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 174:src/menu.c    ****     }
 175:src/menu.c    ****       
 176:src/menu.c    ****   },
 177:src/menu.c    ****   {
 178:src/menu.c    ****     "MISC", // 5
 179:src/menu.c    ****     { 
 180:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 181:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 182:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 183:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 184:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 185:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 186:src/menu.c    ****     }
 187:src/menu.c    ****   },
 188:src/menu.c    ****   {
 189:src/menu.c    ****     "X<>Y Key", // 6
 190:src/menu.c    ****     { 
 191:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 192:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 193:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 194:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 195:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 196:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 197:src/menu.c    ****     }    
 198:src/menu.c    ****   },
 199:src/menu.c    ****   {
 200:src/menu.c    ****     "Program", // 7
 201:src/menu.c    ****     { 
 202:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 203:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 204:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 205:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 206:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 207:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 208:src/menu.c    ****     }
 209:src/menu.c    ****   },
 210:src/menu.c    ****   {
 211:src/menu.c    ****     "Setup 1", // 8
 212:src/menu.c    ****     { 
 213:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 214:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 215:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 216:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
ARM GAS  /tmp/ccLcrImZ.s 			page 6


 217:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 218:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 219:src/menu.c    ****     }
 220:src/menu.c    ****   },
 221:src/menu.c    ****   {
 222:src/menu.c    ****     "Arrow", // 9
 223:src/menu.c    ****     { 
 224:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 225:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 226:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 227:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "\015HMS" },
 228:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 229:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 230:src/menu.c    ****     }
 231:src/menu.c    ****   },
 232:src/menu.c    ****   {
 233:src/menu.c    ****     "Flags", // 10
 234:src/menu.c    ****     { 
 235:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
 236:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 237:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 238:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 239:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 240:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 241:src/menu.c    ****     }
 242:src/menu.c    ****   },
 243:src/menu.c    ****   {
 244:src/menu.c    ****     "Probability", // 11
 245:src/menu.c    ****     { 
 246:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 247:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 248:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 249:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 250:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 251:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 252:src/menu.c    ****     }
 253:src/menu.c    ****   },
 254:src/menu.c    ****   {
 255:src/menu.c    ****     "Statistics", // 12
 256:src/menu.c    ****     /*
 257:src/menu.c    ****      *xbar, sd;
 258:src/menu.c    ****      *yhat, xhat;
 259:src/menu.c    ****      *corr, L.R.;
 260:src/menu.c    ****      *best, linear;
 261:src/menu.c    ****      *ln, exp;
 262:src/menu.c    ****      *cmplx, power;
 263:src/menu.c    ****      *No, sums is already on g9.
 264:src/menu.c    ****      */
 265:src/menu.c    ****     { 
 266:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 267:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 268:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 269:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 270:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 271:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 272:src/menu.c    ****     }
 273:src/menu.c    ****   },
ARM GAS  /tmp/ccLcrImZ.s 			page 7


 274:src/menu.c    ****   {
 275:src/menu.c    ****     "Setup 2", // 13
 276:src/menu.c    ****     { 
 277:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 278:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 279:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 280:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 281:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 282:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 283:src/menu.c    ****     }
 284:src/menu.c    ****   },
 285:src/menu.c    ****   {
 286:src/menu.c    ****     "Integ/Sum/Prod", // 14
 287:src/menu.c    ****     { 
 288:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 289:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 290:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 291:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 292:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 293:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 294:src/menu.c    ****     }
 295:src/menu.c    ****   },
 296:src/menu.c    ****   {
 297:src/menu.c    ****     "Blank with A-D", // 15
 298:src/menu.c    ****     { 
 299:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 300:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 301:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 302:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 303:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 304:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 305:src/menu.c    ****     }    
 306:src/menu.c    ****   },
 307:src/menu.c    ****   {
 308:src/menu.c    ****     "Alpha", // 16
 309:src/menu.c    ****     { 
 310:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 311:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 312:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 313:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 314:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 315:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 316:src/menu.c    ****     }    
 317:src/menu.c    ****   },
 318:src/menu.c    **** };  
 319:src/menu.c    **** 
 320:src/menu.c    **** /* This code is the set_status_sized code with small changes
 321:src/menu.c    ****  * and non-DM42 code removed.
 322:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 323:src/menu.c    ****  */
 324:src/menu.c    **** #define MENU_WIDTH 32
 325:src/menu.c    **** 
 326:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 326 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccLcrImZ.s 			page 8


 327:src/menu.c    ****   // dotcol is the number of the starting dot column
 328:src/menu.c    ****   // shifted is 1 if shifted
 329:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 329 3 view .LVU8
 330:src/menu.c    **** 
 331:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 332:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 332 3 view .LVU9
 333:src/menu.c    **** 
 334:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 334 3 view .LVU10
 326:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 326 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 326:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 326 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 335:src/menu.c    ****   int i, j, xmax;
 336:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 336 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
  96 000e B4BF     		ite	lt
  97 0010 01F11F03 		addlt	r3, r1, #31
  98 0014 0B46     		movge	r3, r1
 337:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 338:src/menu.c    **** 
 339:src/menu.c    ****   forceDispPlot=0;
  99              		.loc 1 339 16 view .LVU14
 100 0016 4848     		ldr	r0, .L41
 101              	.LVL3:
 326:src/menu.c    ****   // dotcol is the number of the starting dot column
 102              		.loc 1 326 13 view .LVU15
 103 0018 0F46     		mov	r7, r1
 104              	.LVL4:
 335:src/menu.c    ****   int i, j, xmax;
 105              		.loc 1 335 3 is_stmt 1 view .LVU16
 336:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 106              		.loc 1 336 3 view .LVU17
 340:src/menu.c    **** 
 341:src/menu.c    **** #ifdef RP_PREFIX
 342:src/menu.c    ****   RectPolConv = 0;
 107              		.loc 1 342 15 is_stmt 0 view .LVU18
 108 001a 4849     		ldr	r1, .L41+4
 109              	.LVL5:
 339:src/menu.c    **** 
ARM GAS  /tmp/ccLcrImZ.s 			page 9


 110              		.loc 1 339 16 view .LVU19
 111 001c 0022     		movs	r2, #0
 112              	.LVL6:
 339:src/menu.c    **** 
 113              		.loc 1 339 16 view .LVU20
 114 001e 0270     		strb	r2, [r0]
 115              		.loc 1 342 15 view .LVU21
 116 0020 0A60     		str	r2, [r1]
 343:src/menu.c    **** #endif
 344:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 117              		.loc 1 344 10 view .LVU22
 118 0022 019A     		ldr	r2, [sp, #4]
 119 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 336:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 120              		.loc 1 336 30 view .LVU23
 121 0026 23F01F03 		bic	r3, r3, #31
 336:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 122              		.loc 1 336 8 view .LVU24
 123 002a 03F12009 		add	r9, r3, #32
 124              	.LVL7:
 337:src/menu.c    **** 
 125              		.loc 1 337 3 is_stmt 1 view .LVU25
 339:src/menu.c    **** 
 126              		.loc 1 339 3 view .LVU26
 342:src/menu.c    **** #endif
 127              		.loc 1 342 3 view .LVU27
 128              		.loc 1 344 3 view .LVU28
 129              		.loc 1 344 9 view .LVU29
 130 002e 002D     		cmp	r5, #0
 131 0030 78D0     		beq	.L7
 132              		.loc 1 344 23 is_stmt 0 view .LVU30
 133 0032 4F45     		cmp	r7, r9
 134 0034 76DC     		bgt	.L7
 135              	.LBB39:
 345:src/menu.c    ****     int c;
 346:src/menu.c    ****     int width;
 347:src/menu.c    ****     unsigned char cmap[6];
 348:src/menu.c    **** 
 349:src/menu.c    ****     int real_width;
 350:src/menu.c    ****     int current_smallp;
 351:src/menu.c    **** 
 352:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 353:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 354:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 355:src/menu.c    ****     //           01 -> (not used)
 356:src/menu.c    ****     //           10 -> use big font
 357:src/menu.c    ****     //           11 -> use small font
 358:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 359:src/menu.c    ****     if (str[0] == '\007') {
 136              		.loc 1 359 8 view .LVU31
 137 0036 072D     		cmp	r5, #7
 138              	.LBE39:
 332:src/menu.c    **** 
 139              		.loc 1 332 7 view .LVU32
 140 0038 4FF0FF04 		mov	r4, #255
 141              	.LVL8:
 142              	.LBB56:
ARM GAS  /tmp/ccLcrImZ.s 			page 10


 345:src/menu.c    ****     int c;
 143              		.loc 1 345 5 is_stmt 1 view .LVU33
 346:src/menu.c    ****     unsigned char cmap[6];
 144              		.loc 1 346 5 view .LVU34
 347:src/menu.c    **** 
 145              		.loc 1 347 5 view .LVU35
 349:src/menu.c    ****     int current_smallp;
 146              		.loc 1 349 5 view .LVU36
 350:src/menu.c    **** 
 147              		.loc 1 350 5 view .LVU37
 148              		.loc 1 359 5 view .LVU38
 360:src/menu.c    ****       width = str[1] & 0x1F;
 361:src/menu.c    ****       switch (str[1] & 0x60) {
 362:src/menu.c    ****       default:
 363:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 364:src/menu.c    **** 	break;
 365:src/menu.c    ****       case 0x40:	current_smallp = 0;
 366:src/menu.c    **** 	break;
 367:src/menu.c    ****       case 0x60:	current_smallp = 1;
 149              		.loc 1 367 33 is_stmt 0 view .LVU39
 150 003c 4FF0010A 		mov	r10, #1
 359:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 359 8 view .LVU40
 152 0040 64D1     		bne	.L11
 153              	.LVL9:
 154              	.L39:
 360:src/menu.c    ****       width = str[1] & 0x1F;
 155              		.loc 1 360 7 is_stmt 1 view .LVU41
 360:src/menu.c    ****       width = str[1] & 0x1F;
 156              		.loc 1 360 18 is_stmt 0 view .LVU42
 157 0042 019B     		ldr	r3, [sp, #4]
 158 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 159 0046 06F06003 		and	r3, r6, #96
 361:src/menu.c    ****       default:
 160              		.loc 1 361 7 view .LVU43
 161 004a 402B     		cmp	r3, #64
 360:src/menu.c    ****       width = str[1] & 0x1F;
 162              		.loc 1 360 13 view .LVU44
 163 004c 06F01F06 		and	r6, r6, #31
 164              	.LVL10:
 361:src/menu.c    ****       default:
 165              		.loc 1 361 7 is_stmt 1 view .LVU45
 166 0050 6CD0     		beq	.L34
 167 0052 602B     		cmp	r3, #96
 168 0054 6AD1     		bne	.L34
 169              		.loc 1 367 18 view .LVU46
 170              	.LVL11:
 368:src/menu.c    **** 	break;
 171              		.loc 1 368 2 view .LVU47
 369:src/menu.c    ****       }
 370:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 172              		.loc 1 370 7 view .LVU48
 173              		.loc 1 370 11 is_stmt 0 view .LVU49
 174 0056 019B     		ldr	r3, [sp, #4]
 175 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 367:src/menu.c    **** 	break;
 176              		.loc 1 367 33 view .LVU50
ARM GAS  /tmp/ccLcrImZ.s 			page 11


 177 005a 0123     		movs	r3, #1
 178 005c 0093     		str	r3, [sp]
 179 005e 00F58075 		add	r5, r0, #256
 180              	.LVL12:
 181              	.L15:
 371:src/menu.c    ****       str += 3;
 182              		.loc 1 371 7 is_stmt 1 view .LVU51
 372:src/menu.c    **** 
 373:src/menu.c    ****       real_width = charlengths(c);
 183              		.loc 1 373 20 is_stmt 0 view .LVU52
 184 0062 2846     		mov	r0, r5
 185 0064 FFF7FEFF 		bl	charlengths
 186              	.LVL13:
 371:src/menu.c    ****       str += 3;
 187              		.loc 1 371 11 view .LVU53
 188 0068 019B     		ldr	r3, [sp, #4]
 189 006a 0333     		adds	r3, r3, #3
 190 006c 0193     		str	r3, [sp, #4]
 191              	.LVL14:
 192              		.loc 1 373 7 is_stmt 1 view .LVU54
 374:src/menu.c    ****     } else {
 375:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 376:src/menu.c    ****       real_width = width = charlengths(c);
 377:src/menu.c    ****       current_smallp = smallp;
 378:src/menu.c    ****     }
 379:src/menu.c    **** 
 380:src/menu.c    ****     if (x + real_width > xmax)
 193              		.loc 1 380 5 view .LVU55
 194              		.loc 1 380 11 is_stmt 0 view .LVU56
 195 006e C319     		adds	r3, r0, r7
 196              	.LVL15:
 197              		.loc 1 380 8 view .LVU57
 198 0070 9945     		cmp	r9, r3
 199 0072 57DB     		blt	.L7
 200              	.L40:
 381:src/menu.c    ****       break;
 382:src/menu.c    **** 
 383:src/menu.c    ****     if (posns_state != current_smallp) {
 201              		.loc 1 383 5 is_stmt 1 view .LVU58
 202              		.loc 1 383 8 is_stmt 0 view .LVU59
 203 0074 009B     		ldr	r3, [sp]
 204 0076 A342     		cmp	r3, r4
 384:src/menu.c    ****       findlengths(posns, current_smallp);
 205              		.loc 1 384 7 view .LVU60
 206 0078 07AB     		add	r3, sp, #28
 383:src/menu.c    ****       findlengths(posns, current_smallp);
 207              		.loc 1 383 8 view .LVU61
 208 007a 05D0     		beq	.L18
 209              		.loc 1 384 7 is_stmt 1 view .LVU62
 210 007c 1846     		mov	r0, r3
 211              	.LVL16:
 212              		.loc 1 384 7 is_stmt 0 view .LVU63
 213 007e 0099     		ldr	r1, [sp]
 214 0080 0393     		str	r3, [sp, #12]
 215 0082 FFF7FEFF 		bl	findlengths
 216              	.LVL17:
 217 0086 039B     		ldr	r3, [sp, #12]
ARM GAS  /tmp/ccLcrImZ.s 			page 12


 385:src/menu.c    ****       posns_state = current_smallp;
 218              		.loc 1 385 7 is_stmt 1 view .LVU64
 219              	.LVL18:
 220              	.L18:
 386:src/menu.c    ****     }
 387:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 221              		.loc 1 387 5 view .LVU65
 222 0088 009A     		ldr	r2, [sp]
 223 008a 2846     		mov	r0, r5
 224 008c 05A9     		add	r1, sp, #20
 225 008e FFF7FEFF 		bl	unpackchar
 226              	.LVL19:
 388:src/menu.c    **** 
 389:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 227              		.loc 1 389 5 view .LVU66
 228              		.loc 1 389 15 view .LVU67
 229 0092 029B     		ldr	r3, [sp, #8]
 230 0094 03EB4704 		add	r4, r3, r7, lsl #1
 231 0098 294B     		ldr	r3, .L41+8
 232 009a 0DF1140B 		add	fp, sp, #20
 233 009e 1C44     		add	r4, r4, r3
 387:src/menu.c    **** 
 234              		.loc 1 387 5 is_stmt 0 view .LVU68
 235 00a0 4FF0050E 		mov	lr, #5
 236 00a4 A9EB0705 		sub	r5, r9, r7
 237              	.LVL20:
 238              	.L19:
 390:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 239              		.loc 1 390 17 is_stmt 1 view .LVU69
 240              		.loc 1 390 7 is_stmt 0 view .LVU70
 241 00a8 002E     		cmp	r6, #0
 242 00aa 1FDD     		ble	.L25
 391:src/menu.c    **** 	if (x+j >= xmax)
 243              		.loc 1 391 2 is_stmt 1 view .LVU71
 244              		.loc 1 391 5 is_stmt 0 view .LVU72
 245 00ac B945     		cmp	r9, r7
 246 00ae 1DDD     		ble	.L25
 247              	.LBB40:
 248              	.LBB41:
 249              	.LBB42:
 250              	.LBB43:
 392:src/menu.c    **** 	  break;
 393:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 394:src/menu.c    ****       }
 395:src/menu.c    ****     }
 396:src/menu.c    ****     x += width;
 397:src/menu.c    ****   }
 398:src/menu.c    **** }
 399:src/menu.c    **** 
 400:src/menu.c    **** 
 401:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 402:src/menu.c    **** 
 403:src/menu.c    **** int pixel_length(const char *s, int smallp)
 404:src/menu.c    **** {
 405:src/menu.c    ****   int len = 0;
 406:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 407:src/menu.c    ****   while (*s != '\0') {
ARM GAS  /tmp/ccLcrImZ.s 			page 13


 408:src/menu.c    ****     if (s[0] == '\007') {
 409:src/menu.c    ****       len += s[1] & 0x1F;
 410:src/menu.c    ****       s += 3;
 411:src/menu.c    ****       continue;
 412:src/menu.c    ****     }
 413:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 414:src/menu.c    ****   }
 415:src/menu.c    ****   return len;
 416:src/menu.c    **** }
 417:src/menu.c    **** */
 418:src/menu.c    **** 
 419:src/menu.c    **** 
 420:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 421:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 422:src/menu.c    ****   if (on) {
 423:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 424:src/menu.c    ****   }
 425:src/menu.c    ****   else {
 426:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 251              		.loc 1 426 25 view .LVU73
 252 00b0 0AFA0EFC 		lsl	ip, r10, lr
 253              		.loc 1 426 17 view .LVU74
 254 00b4 4FFA8CFC 		sxtb	ip, ip
 255              	.LBE43:
 256              	.LBE42:
 257              	.LBE41:
 258              	.LBE40:
 393:src/menu.c    ****       }
 259              		.loc 1 393 31 view .LVU75
 260 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 261              	.LBB53:
 262              	.LBB50:
 263              	.LBB47:
 264              	.LBB44:
 265              		.loc 1 426 17 view .LVU76
 266 00bc 6FEA0C08 		mvn	r8, ip
 267              	.LBE44:
 268              	.LBE47:
 269              	.LBE50:
 270              	.LBE53:
 390:src/menu.c    **** 	if (x+j >= xmax)
 271              		.loc 1 390 13 view .LVU77
 272 00c0 0023     		movs	r3, #0
 273 00c2 01E0     		b	.L20
 274              	.LVL21:
 275              	.L24:
 391:src/menu.c    **** 	  break;
 276              		.loc 1 391 5 view .LVU78
 277 00c4 9D42     		cmp	r5, r3
 278 00c6 11D0     		beq	.L25
 279              	.LVL22:
 280              	.L20:
 393:src/menu.c    ****       }
 281              		.loc 1 393 2 is_stmt 1 view .LVU79
 282              	.LBB54:
 283              	.LBI40:
 420:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
ARM GAS  /tmp/ccLcrImZ.s 			page 14


 284              		.loc 1 420 6 view .LVU80
 285              	.LBB51:
 421:src/menu.c    ****   if (on) {
 286              		.loc 1 421 3 view .LVU81
 287              	.LBB48:
 288              	.LBI42:
 420:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 289              		.loc 1 420 6 view .LVU82
 290              	.LBB45:
 422:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 291              		.loc 1 422 3 view .LVU83
 292              	.LBE45:
 293              	.LBE48:
 421:src/menu.c    ****   if (on) {
 294              		.loc 1 421 6 is_stmt 0 view .LVU84
 295 00c8 DA19     		adds	r2, r3, r7
 296              	.LVL23:
 421:src/menu.c    ****   if (on) {
 297              		.loc 1 421 6 view .LVU85
 298 00ca C72A     		cmp	r2, #199
 299              	.LBE51:
 300              	.LBE54:
 393:src/menu.c    ****       }
 301              		.loc 1 393 46 view .LVU86
 302 00cc 40FA03F1 		asr	r1, r0, r3
 303              	.LBB55:
 304              	.LBB52:
 421:src/menu.c    ****   if (on) {
 305              		.loc 1 421 6 view .LVU87
 306 00d0 09D8     		bhi	.L22
 307              	.LBB49:
 308              	.LBB46:
 423:src/menu.c    ****   }
 309              		.loc 1 423 5 is_stmt 1 view .LVU88
 310              		.loc 1 426 5 view .LVU89
 423:src/menu.c    ****   }
 311              		.loc 1 423 17 is_stmt 0 view .LVU90
 312 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 313              	.LVL24:
 422:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 314              		.loc 1 422 6 view .LVU91
 315 00d6 C907     		lsls	r1, r1, #31
 423:src/menu.c    ****   }
 316              		.loc 1 423 17 view .LVU92
 317 00d8 4CBF     		ite	mi
 318 00da 4CEA0202 		orrmi	r2, ip, r2
 319              		.loc 1 426 17 view .LVU93
 320 00de 08EA0202 		andpl	r2, r8, r2
 321 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 322              	.L22:
 323              	.LBE46:
 324              	.LBE49:
 325              	.LBE52:
 326              	.LBE55:
 391:src/menu.c    **** 	  break;
 327              		.loc 1 391 2 is_stmt 1 view .LVU94
 328              	.LVL25:
ARM GAS  /tmp/ccLcrImZ.s 			page 15


 390:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 390 26 view .LVU95
 390:src/menu.c    **** 	if (x+j >= xmax)
 330              		.loc 1 390 27 is_stmt 0 view .LVU96
 331 00e6 0133     		adds	r3, r3, #1
 332              	.LVL26:
 390:src/menu.c    **** 	if (x+j >= xmax)
 333              		.loc 1 390 17 is_stmt 1 view .LVU97
 390:src/menu.c    **** 	if (x+j >= xmax)
 334              		.loc 1 390 7 is_stmt 0 view .LVU98
 335 00e8 B342     		cmp	r3, r6
 336 00ea EBD1     		bne	.L24
 337              	.LVL27:
 338              	.L25:
 389:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 339              		.loc 1 389 20 is_stmt 1 view .LVU99
 389:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 340              		.loc 1 389 15 view .LVU100
 341 00ec 0EF1FF3E 		add	lr, lr, #-1
 389:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 342              		.loc 1 389 5 is_stmt 0 view .LVU101
 343 00f0 BEF1FF3F 		cmp	lr, #-1
 344 00f4 0BF1010B 		add	fp, fp, #1
 345              	.LVL28:
 389:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 346              		.loc 1 389 5 view .LVU102
 347 00f8 D6D1     		bne	.L19
 396:src/menu.c    ****   }
 348              		.loc 1 396 5 is_stmt 1 view .LVU103
 349              	.LBE56:
 344:src/menu.c    ****     int c;
 350              		.loc 1 344 10 is_stmt 0 view .LVU104
 351 00fa 019B     		ldr	r3, [sp, #4]
 352 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 353              	.LBB57:
 396:src/menu.c    ****   }
 354              		.loc 1 396 7 view .LVU105
 355 00fe 3744     		add	r7, r7, r6
 356              	.LVL29:
 396:src/menu.c    ****   }
 357              		.loc 1 396 7 view .LVU106
 358              	.LBE57:
 344:src/menu.c    ****     int c;
 359              		.loc 1 344 9 is_stmt 1 view .LVU107
 360 0100 85B1     		cbz	r5, .L7
 344:src/menu.c    ****     int c;
 361              		.loc 1 344 23 is_stmt 0 view .LVU108
 362 0102 B945     		cmp	r9, r7
 363 0104 0EDB     		blt	.L7
 364              	.LBB58:
 359:src/menu.c    ****       width = str[1] & 0x1F;
 365              		.loc 1 359 8 view .LVU109
 366 0106 072D     		cmp	r5, #7
 367              	.LBE58:
 368 0108 009C     		ldr	r4, [sp]
 369              	.LBB59:
 345:src/menu.c    ****     int width;
ARM GAS  /tmp/ccLcrImZ.s 			page 16


 370              		.loc 1 345 5 is_stmt 1 view .LVU110
 346:src/menu.c    ****     unsigned char cmap[6];
 371              		.loc 1 346 5 view .LVU111
 347:src/menu.c    **** 
 372              		.loc 1 347 5 view .LVU112
 349:src/menu.c    ****     int current_smallp;
 373              		.loc 1 349 5 view .LVU113
 350:src/menu.c    **** 
 374              		.loc 1 350 5 view .LVU114
 359:src/menu.c    ****       width = str[1] & 0x1F;
 375              		.loc 1 359 5 view .LVU115
 359:src/menu.c    ****       width = str[1] & 0x1F;
 376              		.loc 1 359 8 is_stmt 0 view .LVU116
 377 010a 9AD0     		beq	.L39
 378              	.LVL30:
 379              	.L11:
 375:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 375 7 is_stmt 1 view .LVU117
 376:src/menu.c    ****       current_smallp = smallp;
 381              		.loc 1 376 28 is_stmt 0 view .LVU118
 382 010c 2846     		mov	r0, r5
 383 010e FFF7FEFF 		bl	charlengths
 384              	.LVL31:
 375:src/menu.c    ****       real_width = width = charlengths(c);
 385              		.loc 1 375 31 view .LVU119
 386 0112 019B     		ldr	r3, [sp, #4]
 387 0114 0133     		adds	r3, r3, #1
 388 0116 0193     		str	r3, [sp, #4]
 389              	.LVL32:
 376:src/menu.c    ****       current_smallp = smallp;
 390              		.loc 1 376 7 is_stmt 1 view .LVU120
 377:src/menu.c    ****     }
 391              		.loc 1 377 7 view .LVU121
 377:src/menu.c    ****     }
 392              		.loc 1 377 22 is_stmt 0 view .LVU122
 393 0118 0023     		movs	r3, #0
 394              	.LVL33:
 377:src/menu.c    ****     }
 395              		.loc 1 377 22 view .LVU123
 396 011a 0093     		str	r3, [sp]
 397              	.LVL34:
 380:src/menu.c    ****       break;
 398              		.loc 1 380 11 view .LVU124
 399 011c C319     		adds	r3, r0, r7
 400              	.LVL35:
 380:src/menu.c    ****       break;
 401              		.loc 1 380 8 view .LVU125
 402 011e 9945     		cmp	r9, r3
 376:src/menu.c    ****       current_smallp = smallp;
 403              		.loc 1 376 28 view .LVU126
 404 0120 0646     		mov	r6, r0
 380:src/menu.c    ****       break;
 405              		.loc 1 380 5 is_stmt 1 view .LVU127
 380:src/menu.c    ****       break;
 406              		.loc 1 380 8 is_stmt 0 view .LVU128
 407 0122 A7DA     		bge	.L40
 408              	.LVL36:
ARM GAS  /tmp/ccLcrImZ.s 			page 17


 409              	.L7:
 380:src/menu.c    ****       break;
 410              		.loc 1 380 8 view .LVU129
 411              	.LBE59:
 398:src/menu.c    **** 
 412              		.loc 1 398 1 view .LVU130
 413 0124 0DF5097D 		add	sp, sp, #548
 414              		.cfi_remember_state
 415              		.cfi_def_cfa_offset 36
 416              		@ sp needed
 417 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 418              	.LVL37:
 419              	.L34:
 420              		.cfi_restore_state
 421              	.LBB60:
 370:src/menu.c    ****       str += 3;
 422              		.loc 1 370 7 is_stmt 1 view .LVU131
 370:src/menu.c    ****       str += 3;
 423              		.loc 1 370 11 is_stmt 0 view .LVU132
 424 012c 019B     		ldr	r3, [sp, #4]
 425 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 363:src/menu.c    **** 	break;
 426              		.loc 1 363 33 view .LVU133
 427 0130 0023     		movs	r3, #0
 428 0132 0093     		str	r3, [sp]
 429 0134 95E7     		b	.L15
 430              	.L42:
 431 0136 00BF     		.align	2
 432              	.L41:
 433 0138 00000000 		.word	forceDispPlot
 434 013c 00000000 		.word	RectPolConv
 435 0140 00000000 		.word	.LANCHOR0
 436              	.LBE60:
 437              		.cfi_endproc
 438              	.LFE30:
 440              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 441              		.align	2
 442              	.LC2:
 443 0000 57503334 		.ascii	"WP34s calculator for DM42:\000"
 443      73206361 
 443      6C63756C 
 443      61746F72 
 443      20666F72 
 444 001b 00       		.align	2
 445              	.LC3:
 446 001c 77697468 		.ascii	"with top row for annunciators,\000"
 446      20746F70 
 446      20726F77 
 446      20666F72 
 446      20616E6E 
 447 003b 00       		.align	2
 448              	.LC4:
 449 003c 61206C6F 		.ascii	"a longer alpha display,\000"
 449      6E676572 
 449      20616C70 
 449      68612064 
 449      6973706C 
ARM GAS  /tmp/ccLcrImZ.s 			page 18


 450              		.align	2
 451              	.LC5:
 452 0054 616E6420 		.ascii	"and some annunciators renamed.\000"
 452      736F6D65 
 452      20616E6E 
 452      756E6369 
 452      61746F72 
 453 0073 00       		.align	2
 454              	.LC6:
 455 0074 54686973 		.ascii	"This software is neither provided\000"
 455      20736F66 
 455      74776172 
 455      65206973 
 455      206E6569 
 456 0096 0000     		.align	2
 457              	.LC7:
 458 0098 6279206E 		.ascii	"by nor supported by SwissMicros.\000"
 458      6F722073 
 458      7570706F 
 458      72746564 
 458      20627920 
 459 00b9 000000   		.align	2
 460              	.LC8:
 461 00bc 20202020 		.ascii	"    Press EXIT key to continue...\000"
 461      50726573 
 461      73204558 
 461      4954206B 
 461      65792074 
 462              		.section	.text.disp_about,"ax",%progbits
 463              		.align	1
 464              		.p2align 2,,3
 465              		.global	disp_about
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 469              		.fpu fpv4-sp-d16
 471              	disp_about:
 472              	.LFB5:
  50:src/menu.c    ****   lcd_clear_buf();
 473              		.loc 1 50 19 is_stmt 1 view -0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
  51:src/menu.c    ****   lcd_writeClr(t24);
 477              		.loc 1 51 3 view .LVU135
  50:src/menu.c    ****   lcd_clear_buf();
 478              		.loc 1 50 19 is_stmt 0 view .LVU136
 479 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 480              		.cfi_def_cfa_offset 24
 481              		.cfi_offset 4, -24
 482              		.cfi_offset 5, -20
 483              		.cfi_offset 6, -16
 484              		.cfi_offset 7, -12
 485              		.cfi_offset 8, -8
 486              		.cfi_offset 14, -4
  52:src/menu.c    **** 
 487              		.loc 1 52 3 view .LVU137
ARM GAS  /tmp/ccLcrImZ.s 			page 19


 488 0004 1F4C     		ldr	r4, .L45
  51:src/menu.c    ****   lcd_writeClr(t24);
 489              		.loc 1 51 3 view .LVU138
 490 0006 204B     		ldr	r3, .L45+4
  55:src/menu.c    ****   t24->y += 5;
 491              		.loc 1 55 3 view .LVU139
 492 0008 204D     		ldr	r5, .L45+8
  51:src/menu.c    ****   lcd_writeClr(t24);
 493              		.loc 1 51 3 view .LVU140
 494 000a 9847     		blx	r3
 495              	.LVL38:
  52:src/menu.c    **** 
 496              		.loc 1 52 3 is_stmt 1 view .LVU141
 497 000c 606B     		ldr	r0, [r4, #52]
 498 000e 204B     		ldr	r3, .L45+12
 499 0010 9847     		blx	r3
 500              	.LVL39:
  54:src/menu.c    ****   lcd_printR(t24, "WP34s calculator for DM42:");
 501              		.loc 1 54 3 view .LVU142
 502 0012 0522     		movs	r2, #5
 503 0014 606B     		ldr	r0, [r4, #52]
 504 0016 1F4B     		ldr	r3, .L45+16
 505 0018 0021     		movs	r1, #0
 506 001a 9847     		blx	r3
 507              	.LVL40:
  55:src/menu.c    ****   t24->y += 5;
 508              		.loc 1 55 3 view .LVU143
  55:src/menu.c    ****   t24->y += 5;
 509              		.loc 1 55 3 view .LVU144
 510 001c 606B     		ldr	r0, [r4, #52]
 511 001e 1E49     		ldr	r1, .L45+20
 512 0020 0126     		movs	r6, #1
 513 0022 4674     		strb	r6, [r0, #17]
  55:src/menu.c    ****   t24->y += 5;
 514              		.loc 1 55 3 view .LVU145
 515 0024 A847     		blx	r5
 516              	.LVL41:
  55:src/menu.c    ****   t24->y += 5;
 517              		.loc 1 55 3 view .LVU146
 518 0026 606B     		ldr	r0, [r4, #52]
  58:src/menu.c    ****   lcd_print(t24, "a longer alpha display,");
 519              		.loc 1 58 3 is_stmt 0 view .LVU147
 520 0028 1C49     		ldr	r1, .L45+24
  56:src/menu.c    **** #ifdef TOP_ROW
 521              		.loc 1 56 10 view .LVU148
 522 002a C388     		ldrh	r3, [r0, #6]
  55:src/menu.c    ****   t24->y += 5;
 523              		.loc 1 55 3 view .LVU149
 524 002c 0027     		movs	r7, #0
  56:src/menu.c    **** #ifdef TOP_ROW
 525              		.loc 1 56 10 view .LVU150
 526 002e 0533     		adds	r3, r3, #5
 527 0030 C380     		strh	r3, [r0, #6]	@ movhi
  55:src/menu.c    ****   t24->y += 5;
 528              		.loc 1 55 3 view .LVU151
 529 0032 4774     		strb	r7, [r0, #17]
  55:src/menu.c    ****   t24->y += 5;
ARM GAS  /tmp/ccLcrImZ.s 			page 20


 530              		.loc 1 55 3 is_stmt 1 view .LVU152
  56:src/menu.c    **** #ifdef TOP_ROW
 531              		.loc 1 56 3 view .LVU153
  58:src/menu.c    ****   lcd_print(t24, "a longer alpha display,");
 532              		.loc 1 58 3 view .LVU154
 533 0034 A847     		blx	r5
 534              	.LVL42:
  59:src/menu.c    ****   lcd_print(t24, "and some annunciators renamed.");
 535              		.loc 1 59 3 view .LVU155
 536 0036 606B     		ldr	r0, [r4, #52]
 537 0038 1949     		ldr	r1, .L45+28
 538 003a A847     		blx	r5
 539              	.LVL43:
  60:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 540              		.loc 1 60 3 view .LVU156
 541 003c 606B     		ldr	r0, [r4, #52]
 542 003e 1949     		ldr	r1, .L45+32
 543 0040 A847     		blx	r5
 544              	.LVL44:
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 545              		.loc 1 69 3 view .LVU157
 546 0042 606B     		ldr	r0, [r4, #52]
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 547              		.loc 1 70 3 is_stmt 0 view .LVU158
 548 0044 1849     		ldr	r1, .L45+36
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 549              		.loc 1 69 10 view .LVU159
 550 0046 C388     		ldrh	r3, [r0, #6]
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 551              		.loc 1 70 3 view .LVU160
 552 0048 4674     		strb	r6, [r0, #17]
  69:src/menu.c    ****   lcd_printR(t24, "This software is neither provided");
 553              		.loc 1 69 10 view .LVU161
 554 004a 0533     		adds	r3, r3, #5
 555 004c C380     		strh	r3, [r0, #6]	@ movhi
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 556              		.loc 1 70 3 is_stmt 1 view .LVU162
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 557              		.loc 1 70 3 view .LVU163
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 558              		.loc 1 70 3 view .LVU164
 559 004e A847     		blx	r5
 560              	.LVL45:
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 561              		.loc 1 70 3 view .LVU165
 562 0050 606B     		ldr	r0, [r4, #52]
  70:src/menu.c    ****   lcd_printR(t24, "by nor supported by SwissMicros.");
 563              		.loc 1 70 3 view .LVU166
  71:src/menu.c    **** 
 564              		.loc 1 71 3 view .LVU167
  71:src/menu.c    **** 
 565              		.loc 1 71 3 view .LVU168
 566 0052 1649     		ldr	r1, .L45+40
 567 0054 4674     		strb	r6, [r0, #17]
  71:src/menu.c    **** 
 568              		.loc 1 71 3 view .LVU169
 569 0056 A847     		blx	r5
ARM GAS  /tmp/ccLcrImZ.s 			page 21


 570              	.LVL46:
  71:src/menu.c    **** 
 571              		.loc 1 71 3 view .LVU170
 572 0058 606B     		ldr	r0, [r4, #52]
  73:src/menu.c    ****   t24->x = 20;
 573              		.loc 1 73 20 is_stmt 0 view .LVU171
 574 005a 154B     		ldr	r3, .L45+44
  71:src/menu.c    **** 
 575              		.loc 1 71 3 view .LVU172
 576 005c 4774     		strb	r7, [r0, #17]
  71:src/menu.c    **** 
 577              		.loc 1 71 3 is_stmt 1 view .LVU173
  73:src/menu.c    ****   t24->x = 20;
 578              		.loc 1 73 3 view .LVU174
  73:src/menu.c    ****   t24->x = 20;
 579              		.loc 1 73 20 is_stmt 0 view .LVU175
 580 005e 9847     		blx	r3
 581              	.LVL47:
  73:src/menu.c    ****   t24->x = 20;
 582              		.loc 1 73 3 view .LVU176
 583 0060 636B     		ldr	r3, [r4, #52]
  75:src/menu.c    **** 
 584              		.loc 1 75 3 view .LVU177
 585 0062 1449     		ldr	r1, .L45+48
 586 0064 5E74     		strb	r6, [r3, #17]
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 587              		.loc 1 74 10 view .LVU178
 588 0066 1422     		movs	r2, #20
  73:src/menu.c    ****   t24->x = 20;
 589              		.loc 1 73 39 view .LVU179
 590 0068 C0F1EB00 		rsb	r0, r0, #235
  73:src/menu.c    ****   t24->x = 20;
 591              		.loc 1 73 10 view .LVU180
 592 006c D880     		strh	r0, [r3, #6]	@ movhi
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 593              		.loc 1 74 3 is_stmt 1 view .LVU181
  74:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 594              		.loc 1 74 10 is_stmt 0 view .LVU182
 595 006e 9A80     		strh	r2, [r3, #4]	@ movhi
  75:src/menu.c    **** 
 596              		.loc 1 75 3 is_stmt 1 view .LVU183
  75:src/menu.c    **** 
 597              		.loc 1 75 3 view .LVU184
  75:src/menu.c    **** 
 598              		.loc 1 75 3 view .LVU185
 599 0070 1846     		mov	r0, r3
 600 0072 A847     		blx	r5
 601              	.LVL48:
  75:src/menu.c    **** 
 602              		.loc 1 75 3 view .LVU186
 603 0074 626B     		ldr	r2, [r4, #52]
  77:src/menu.c    **** 
 604              		.loc 1 77 3 is_stmt 0 view .LVU187
 605 0076 104B     		ldr	r3, .L45+52
  75:src/menu.c    **** 
 606              		.loc 1 75 3 view .LVU188
 607 0078 5774     		strb	r7, [r2, #17]
ARM GAS  /tmp/ccLcrImZ.s 			page 22


  75:src/menu.c    **** 
 608              		.loc 1 75 3 is_stmt 1 view .LVU189
  77:src/menu.c    **** 
 609              		.loc 1 77 3 view .LVU190
 610 007a 9847     		blx	r3
 611              	.LVL49:
  79:src/menu.c    **** }
 612              		.loc 1 79 3 view .LVU191
  80:src/menu.c    **** 
 613              		.loc 1 80 1 is_stmt 0 view .LVU192
 614 007c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 615              		.cfi_restore 14
 616              		.cfi_restore 8
 617              		.cfi_restore 7
 618              		.cfi_restore 6
 619              		.cfi_restore 5
 620              		.cfi_restore 4
 621              		.cfi_def_cfa_offset 0
  79:src/menu.c    **** }
 622              		.loc 1 79 3 view .LVU193
 623 0080 0E4B     		ldr	r3, .L45+56
 624 0082 1847     		bx	r3	@ indirect register sibling call
 625              	.LVL50:
 626              	.L46:
 627              		.align	2
 628              	.L45:
 629 0084 00200010 		.word	268443648
 630 0088 2D020008 		.word	134218285
 631 008c B1020008 		.word	134218417
 632 0090 65020008 		.word	134218341
 633 0094 6D020008 		.word	134218349
 634 0098 00000000 		.word	.LC2
 635 009c 1C000000 		.word	.LC3
 636 00a0 3C000000 		.word	.LC4
 637 00a4 54000000 		.word	.LC5
 638 00a8 74000000 		.word	.LC6
 639 00ac 98000000 		.word	.LC7
 640 00b0 71020008 		.word	134218353
 641 00b4 BC000000 		.word	.LC8
 642 00b8 31020008 		.word	134218289
 643 00bc 99030008 		.word	134218649
 644              		.cfi_endproc
 645              	.LFE5:
 647              		.section	.text.run_menu_item,"ax",%progbits
 648              		.align	1
 649              		.p2align 2,,3
 650              		.global	run_menu_item
 651              		.syntax unified
 652              		.thumb
 653              		.thumb_func
 654              		.fpu fpv4-sp-d16
 656              	run_menu_item:
 657              	.LVL51:
 658              	.LFB3:
  19:src/menu.c    ****   int ret = 0;
 659              		.loc 1 19 36 is_stmt 1 view -0
 660              		.cfi_startproc
ARM GAS  /tmp/ccLcrImZ.s 			page 23


 661              		@ args = 0, pretend = 0, frame = 0
 662              		@ frame_needed = 0, uses_anonymous_args = 0
  20:src/menu.c    **** 
 663              		.loc 1 20 3 view .LVU195
  22:src/menu.c    ****     case MI_ABOUT_PGM:
 664              		.loc 1 22 3 view .LVU196
 665 0000 0B28     		cmp	r0, #11
 666 0002 04D1     		bne	.L49
  24:src/menu.c    ****       break;
 667              		.loc 1 24 7 view .LVU197
  19:src/menu.c    ****   int ret = 0;
 668              		.loc 1 19 36 is_stmt 0 view .LVU198
 669 0004 08B5     		push	{r3, lr}
 670              		.cfi_def_cfa_offset 8
 671              		.cfi_offset 3, -8
 672              		.cfi_offset 14, -4
  24:src/menu.c    ****       break;
 673              		.loc 1 24 7 view .LVU199
 674 0006 FFF7FEFF 		bl	disp_about
 675              	.LVL52:
  25:src/menu.c    **** 
 676              		.loc 1 25 7 is_stmt 1 view .LVU200
  20:src/menu.c    **** 
 677              		.loc 1 20 7 is_stmt 0 view .LVU201
 678 000a 0020     		movs	r0, #0
  33:src/menu.c    **** 
 679              		.loc 1 33 1 view .LVU202
 680 000c 08BD     		pop	{r3, pc}
 681              	.LVL53:
 682              	.L49:
 683              		.cfi_def_cfa_offset 0
 684              		.cfi_restore 3
 685              		.cfi_restore 14
  28:src/menu.c    ****       break;
 686              		.loc 1 28 11 view .LVU203
 687 000e 4FF0FF30 		mov	r0, #-1
 688              	.LVL54:
  32:src/menu.c    **** }
 689              		.loc 1 32 3 is_stmt 1 view .LVU204
  33:src/menu.c    **** 
 690              		.loc 1 33 1 is_stmt 0 view .LVU205
 691 0012 7047     		bx	lr
 692              		.cfi_endproc
 693              	.LFE3:
 695              		.section	.text.set_menu,"ax",%progbits
 696              		.align	1
 697              		.p2align 2,,3
 698              		.global	set_menu
 699              		.syntax unified
 700              		.thumb
 701              		.thumb_func
 702              		.fpu fpv4-sp-d16
 704              	set_menu:
 705              	.LVL55:
 706              	.LFB6:
  86:src/menu.c    ****   int m = current_menu;
 707              		.loc 1 86 32 is_stmt 1 view -0
ARM GAS  /tmp/ccLcrImZ.s 			page 24


 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              		@ link register save eliminated.
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 712              		.loc 1 87 3 view .LVU207
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 713              		.loc 1 87 7 is_stmt 0 view .LVU208
 714 0000 0A4A     		ldr	r2, .L66
 715 0002 1368     		ldr	r3, [r2]
 716              	.LVL56:
  88:src/menu.c    ****     current_menu = default_menu;
 717              		.loc 1 88 3 is_stmt 1 view .LVU209
  88:src/menu.c    ****     current_menu = default_menu;
 718              		.loc 1 88 6 is_stmt 0 view .LVU210
 719 0004 8342     		cmp	r3, r0
 720 0006 0CD0     		beq	.L65
  91:src/menu.c    ****     current_menu = last_menu;
 721              		.loc 1 91 8 is_stmt 1 view .LVU211
  91:src/menu.c    ****     current_menu = last_menu;
 722              		.loc 1 91 11 is_stmt 0 view .LVU212
 723 0008 411C     		adds	r1, r0, #1
  92:src/menu.c    ****   }
 724              		.loc 1 92 5 is_stmt 1 view .LVU213
  92:src/menu.c    ****   }
 725              		.loc 1 92 18 is_stmt 0 view .LVU214
 726 000a 09BF     		itett	eq
 727 000c 0849     		ldreq	r1, .L66+4
  95:src/menu.c    ****   }
 728              		.loc 1 95 18 view .LVU215
 729 000e 1060     		strne	r0, [r2]
  92:src/menu.c    ****   }
 730              		.loc 1 92 18 view .LVU216
 731 0010 0968     		ldreq	r1, [r1]
 732 0012 1160     		streq	r1, [r2]
  95:src/menu.c    ****   }
 733              		.loc 1 95 5 is_stmt 1 view .LVU217
 734              	.L56:
  97:src/menu.c    **** }
 735              		.loc 1 97 3 view .LVU218
  97:src/menu.c    **** }
 736              		.loc 1 97 6 is_stmt 0 view .LVU219
 737 0014 092B     		cmp	r3, #9
 738 0016 03D0     		beq	.L54
  97:src/menu.c    **** }
 739              		.loc 1 97 17 discriminator 1 view .LVU220
 740 0018 102B     		cmp	r3, #16
  97:src/menu.c    **** }
 741              		.loc 1 97 32 is_stmt 1 discriminator 1 view .LVU221
  97:src/menu.c    **** }
 742              		.loc 1 97 42 is_stmt 0 discriminator 1 view .LVU222
 743 001a 1CBF     		itt	ne
 744 001c 044A     		ldrne	r2, .L66+4
 745 001e 1360     		strne	r3, [r2]
 746              	.L54:
  98:src/menu.c    **** 
 747              		.loc 1 98 1 view .LVU223
ARM GAS  /tmp/ccLcrImZ.s 			page 25


 748 0020 7047     		bx	lr
 749              	.L65:
  89:src/menu.c    ****   }
 750              		.loc 1 89 5 is_stmt 1 view .LVU224
  89:src/menu.c    ****   }
 751              		.loc 1 89 18 is_stmt 0 view .LVU225
 752 0022 0449     		ldr	r1, .L66+8
 753 0024 0968     		ldr	r1, [r1]
 754 0026 1160     		str	r1, [r2]
 755 0028 F4E7     		b	.L56
 756              	.L67:
 757 002a 00BF     		.align	2
 758              	.L66:
 759 002c 00000000 		.word	.LANCHOR1
 760 0030 00000000 		.word	.LANCHOR3
 761 0034 00000000 		.word	.LANCHOR2
 762              		.cfi_endproc
 763              	.LFE6:
 765              		.section	.text.toggle_default_menu,"ax",%progbits
 766              		.align	1
 767              		.p2align 2,,3
 768              		.global	toggle_default_menu
 769              		.syntax unified
 770              		.thumb
 771              		.thumb_func
 772              		.fpu fpv4-sp-d16
 774              	toggle_default_menu:
 775              	.LFB7:
 100:src/menu.c    ****   if (current_menu == default_menu) {
 776              		.loc 1 100 29 is_stmt 1 view -0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 0
 779              		@ frame_needed = 0, uses_anonymous_args = 0
 780              		@ link register save eliminated.
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 781              		.loc 1 101 3 view .LVU227
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 782              		.loc 1 101 20 is_stmt 0 view .LVU228
 783 0000 0549     		ldr	r1, .L70
 784 0002 064A     		ldr	r2, .L70+4
 785 0004 0868     		ldr	r0, [r1]
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 786              		.loc 1 101 6 view .LVU229
 787 0006 1368     		ldr	r3, [r2]
 788 0008 8342     		cmp	r3, r0
 789 000a 03D1     		bne	.L68
 102:src/menu.c    ****   }
 790              		.loc 1 102 5 is_stmt 1 view .LVU230
 102:src/menu.c    ****   }
 791              		.loc 1 102 38 is_stmt 0 view .LVU231
 792 000c C3F10F03 		rsb	r3, r3, #15
 102:src/menu.c    ****   }
 793              		.loc 1 102 33 view .LVU232
 794 0010 0B60     		str	r3, [r1]
 102:src/menu.c    ****   }
 795              		.loc 1 102 18 view .LVU233
 796 0012 1360     		str	r3, [r2]
ARM GAS  /tmp/ccLcrImZ.s 			page 26


 797              	.L68:
 104:src/menu.c    **** 
 798              		.loc 1 104 1 view .LVU234
 799 0014 7047     		bx	lr
 800              	.L71:
 801 0016 00BF     		.align	2
 802              	.L70:
 803 0018 00000000 		.word	.LANCHOR2
 804 001c 00000000 		.word	.LANCHOR1
 805              		.cfi_endproc
 806              	.LFE7:
 808              		.section	.text.get_menu,"ax",%progbits
 809              		.align	1
 810              		.p2align 2,,3
 811              		.global	get_menu
 812              		.syntax unified
 813              		.thumb
 814              		.thumb_func
 815              		.fpu fpv4-sp-d16
 817              	get_menu:
 818              	.LFB8:
 106:src/menu.c    ****   return current_menu;
 819              		.loc 1 106 17 is_stmt 1 view -0
 820              		.cfi_startproc
 821              		@ args = 0, pretend = 0, frame = 0
 822              		@ frame_needed = 0, uses_anonymous_args = 0
 823              		@ link register save eliminated.
 107:src/menu.c    **** }
 824              		.loc 1 107 3 view .LVU236
 107:src/menu.c    **** }
 825              		.loc 1 107 10 is_stmt 0 view .LVU237
 826 0000 014B     		ldr	r3, .L73
 108:src/menu.c    **** 
 827              		.loc 1 108 1 view .LVU238
 828 0002 1868     		ldr	r0, [r3]
 829 0004 7047     		bx	lr
 830              	.L74:
 831 0006 00BF     		.align	2
 832              	.L73:
 833 0008 00000000 		.word	.LANCHOR1
 834              		.cfi_endproc
 835              	.LFE8:
 837              		.section	.text.set_last_menu,"ax",%progbits
 838              		.align	1
 839              		.p2align 2,,3
 840              		.global	set_last_menu
 841              		.syntax unified
 842              		.thumb
 843              		.thumb_func
 844              		.fpu fpv4-sp-d16
 846              	set_last_menu:
 847              	.LFB10:
 114:src/menu.c    ****   set_menu (last_menu);
 848              		.loc 1 114 23 is_stmt 1 view -0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 0
 851              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccLcrImZ.s 			page 27


 852              		@ link register save eliminated.
 115:src/menu.c    **** }
 853              		.loc 1 115 3 view .LVU240
 854              	.LBB61:
 855              	.LBB62:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 856              		.loc 1 87 7 is_stmt 0 view .LVU241
 857 0000 074A     		ldr	r2, .L86
 858              	.LBE62:
 859              	.LBE61:
 115:src/menu.c    **** }
 860              		.loc 1 115 3 view .LVU242
 861 0002 0848     		ldr	r0, .L86+4
 862              	.LBB65:
 863              	.LBB63:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 864              		.loc 1 87 7 view .LVU243
 865 0004 1368     		ldr	r3, [r2]
 866              	.LBE63:
 867              	.LBE65:
 115:src/menu.c    **** }
 868              		.loc 1 115 3 view .LVU244
 869 0006 0168     		ldr	r1, [r0]
 870              	.LVL57:
 871              	.LBB66:
 872              	.LBI61:
  86:src/menu.c    ****   int m = current_menu;
 873              		.loc 1 86 6 is_stmt 1 view .LVU245
 874              	.LBB64:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 875              		.loc 1 87 3 view .LVU246
  88:src/menu.c    ****     current_menu = default_menu;
 876              		.loc 1 88 3 view .LVU247
  88:src/menu.c    ****     current_menu = default_menu;
 877              		.loc 1 88 6 is_stmt 0 view .LVU248
 878 0008 9942     		cmp	r1, r3
  89:src/menu.c    ****   }
 879              		.loc 1 89 5 is_stmt 1 view .LVU249
  89:src/menu.c    ****   }
 880              		.loc 1 89 18 is_stmt 0 view .LVU250
 881 000a 04BF     		itt	eq
 882 000c 0649     		ldreq	r1, .L86+8
 883              	.LVL58:
  89:src/menu.c    ****   }
 884              		.loc 1 89 18 view .LVU251
 885 000e 0968     		ldreq	r1, [r1]
  91:src/menu.c    ****     current_menu = last_menu;
 886              		.loc 1 91 8 is_stmt 1 view .LVU252
  95:src/menu.c    ****   }
 887              		.loc 1 95 18 is_stmt 0 view .LVU253
 888 0010 1160     		str	r1, [r2]
  97:src/menu.c    **** }
 889              		.loc 1 97 3 is_stmt 1 view .LVU254
  97:src/menu.c    **** }
 890              		.loc 1 97 6 is_stmt 0 view .LVU255
 891 0012 092B     		cmp	r3, #9
 892 0014 02D0     		beq	.L75
ARM GAS  /tmp/ccLcrImZ.s 			page 28


  97:src/menu.c    **** }
 893              		.loc 1 97 17 view .LVU256
 894 0016 102B     		cmp	r3, #16
  97:src/menu.c    **** }
 895              		.loc 1 97 32 is_stmt 1 view .LVU257
  97:src/menu.c    **** }
 896              		.loc 1 97 42 is_stmt 0 view .LVU258
 897 0018 18BF     		it	ne
 898 001a 0360     		strne	r3, [r0]
 899              	.LVL59:
 900              	.L75:
  97:src/menu.c    **** }
 901              		.loc 1 97 42 view .LVU259
 902              	.LBE64:
 903              	.LBE66:
 116:src/menu.c    **** 
 904              		.loc 1 116 1 view .LVU260
 905 001c 7047     		bx	lr
 906              	.L87:
 907 001e 00BF     		.align	2
 908              	.L86:
 909 0020 00000000 		.word	.LANCHOR1
 910 0024 00000000 		.word	.LANCHOR3
 911 0028 00000000 		.word	.LANCHOR2
 912              		.cfi_endproc
 913              	.LFE10:
 915              		.section	.text.mdot,"ax",%progbits
 916              		.align	1
 917              		.p2align 2,,3
 918              		.global	mdot
 919              		.syntax unified
 920              		.thumb
 921              		.thumb_func
 922              		.fpu fpv4-sp-d16
 924              	mdot:
 925              	.LVL60:
 926              	.LFB12:
 420:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 927              		.loc 1 420 40 is_stmt 1 view -0
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 0
 930              		@ frame_needed = 0, uses_anonymous_args = 0
 931              		@ link register save eliminated.
 421:src/menu.c    ****   if (on) {
 932              		.loc 1 421 3 view .LVU262
 421:src/menu.c    ****   if (on) {
 933              		.loc 1 421 6 is_stmt 0 view .LVU263
 934 0000 C728     		cmp	r0, #199
 935 0002 1AD8     		bhi	.L92
 936              	.LVL61:
 937              	.LBB69:
 938              	.LBI69:
 420:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 939              		.loc 1 420 6 is_stmt 1 view .LVU264
 940              	.LBB70:
 422:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 941              		.loc 1 422 3 view .LVU265
ARM GAS  /tmp/ccLcrImZ.s 			page 29


 942              	.LBE70:
 943              	.LBE69:
 420:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 944              		.loc 1 420 40 is_stmt 0 view .LVU266
 945 0004 10B4     		push	{r4}
 946              		.cfi_def_cfa_offset 4
 947              		.cfi_offset 4, -4
 948              	.LBB73:
 949              	.LBB71:
 422:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 950              		.loc 1 422 6 view .LVU267
 951 0006 63B9     		cbnz	r3, .L95
 952              		.loc 1 426 5 is_stmt 1 view .LVU268
 953              		.loc 1 426 17 is_stmt 0 view .LVU269
 954 0008 0C4B     		ldr	r3, .L96
 955              	.LVL62:
 956              		.loc 1 426 17 view .LVU270
 957 000a 03EB4000 		add	r0, r3, r0, lsl #1
 958              	.LVL63:
 959              		.loc 1 426 25 view .LVU271
 960 000e 0124     		movs	r4, #1
 961              		.loc 1 426 17 view .LVU272
 962 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 963              		.loc 1 426 25 view .LVU273
 964 0012 04FA01F1 		lsl	r1, r4, r1
 965              	.LVL64:
 966              		.loc 1 426 17 view .LVU274
 967 0016 23EA0101 		bic	r1, r3, r1
 968 001a 8154     		strb	r1, [r0, r2]
 969              	.LVL65:
 970              		.loc 1 426 17 view .LVU275
 971              	.LBE71:
 972              	.LBE73:
 427:src/menu.c    ****   }
 428:src/menu.c    **** }
 973              		.loc 1 428 1 view .LVU276
 974 001c 5DF8044B 		ldr	r4, [sp], #4
 975              		.cfi_remember_state
 976              		.cfi_restore 4
 977              		.cfi_def_cfa_offset 0
 978 0020 7047     		bx	lr
 979              	.LVL66:
 980              	.L95:
 981              		.cfi_restore_state
 982              	.LBB74:
 983              	.LBB72:
 423:src/menu.c    ****   }
 984              		.loc 1 423 5 is_stmt 1 view .LVU277
 423:src/menu.c    ****   }
 985              		.loc 1 423 17 is_stmt 0 view .LVU278
 986 0022 064B     		ldr	r3, .L96
 987              	.LVL67:
 423:src/menu.c    ****   }
 988              		.loc 1 423 17 view .LVU279
 989 0024 03EB4000 		add	r0, r3, r0, lsl #1
 990              	.LVL68:
 423:src/menu.c    ****   }
ARM GAS  /tmp/ccLcrImZ.s 			page 30


 991              		.loc 1 423 24 view .LVU280
 992 0028 0124     		movs	r4, #1
 423:src/menu.c    ****   }
 993              		.loc 1 423 17 view .LVU281
 994 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 423:src/menu.c    ****   }
 995              		.loc 1 423 24 view .LVU282
 996 002c 04FA01F1 		lsl	r1, r4, r1
 997              	.LVL69:
 423:src/menu.c    ****   }
 998              		.loc 1 423 17 view .LVU283
 999 0030 1943     		orrs	r1, r1, r3
 1000 0032 8154     		strb	r1, [r0, r2]
 1001              	.LBE72:
 1002              	.LBE74:
 1003              		.loc 1 428 1 view .LVU284
 1004 0034 5DF8044B 		ldr	r4, [sp], #4
 1005              		.cfi_restore 4
 1006              		.cfi_def_cfa_offset 0
 1007 0038 7047     		bx	lr
 1008              	.LVL70:
 1009              	.L92:
 1010              		.loc 1 428 1 view .LVU285
 1011 003a 7047     		bx	lr
 1012              	.L97:
 1013              		.align	2
 1014              	.L96:
 1015 003c 00000000 		.word	.LANCHOR0
 1016              		.cfi_endproc
 1017              	.LFE12:
 1019              		.section	.text.display_menu,"ax",%progbits
 1020              		.align	1
 1021              		.p2align 2,,3
 1022              		.global	display_menu
 1023              		.syntax unified
 1024              		.thumb
 1025              		.thumb_func
 1026              		.fpu fpv4-sp-d16
 1028              	display_menu:
 1029              	.LVL71:
 1030              	.LFB13:
 429:src/menu.c    **** 
 430:src/menu.c    **** 
 431:src/menu.c    **** void display_menu (int current_menu) {
 1031              		.loc 1 431 38 is_stmt 1 view -0
 1032              		.cfi_startproc
 1033              		@ args = 0, pretend = 0, frame = 0
 1034              		@ frame_needed = 0, uses_anonymous_args = 0
 432:src/menu.c    ****   int len = 0;
 1035              		.loc 1 432 3 view .LVU287
 433:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1036              		.loc 1 433 3 view .LVU288
 431:src/menu.c    ****   int len = 0;
 1037              		.loc 1 431 38 is_stmt 0 view .LVU289
 1038 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1039              		.cfi_def_cfa_offset 36
 1040              		.cfi_offset 4, -36
ARM GAS  /tmp/ccLcrImZ.s 			page 31


 1041              		.cfi_offset 5, -32
 1042              		.cfi_offset 6, -28
 1043              		.cfi_offset 7, -24
 1044              		.cfi_offset 8, -20
 1045              		.cfi_offset 9, -16
 1046              		.cfi_offset 10, -12
 1047              		.cfi_offset 11, -8
 1048              		.cfi_offset 14, -4
 1049 0004 83B0     		sub	sp, sp, #12
 1050              		.cfi_def_cfa_offset 48
 1051              		.loc 1 433 3 view .LVU290
 1052 0006 0024     		movs	r4, #0
 1053 0008 404F     		ldr	r7, .L116
 1054 000a 0094     		str	r4, [sp]
 1055 000c 3423     		movs	r3, #52
 1056 000e 4FF4C872 		mov	r2, #400
 1057 0012 BC21     		movs	r1, #188
 431:src/menu.c    ****   int len = 0;
 1058              		.loc 1 431 38 view .LVU291
 1059 0014 0646     		mov	r6, r0
 1060              		.loc 1 433 3 view .LVU292
 1061 0016 2046     		mov	r0, r4
 1062              	.LVL72:
 1063              		.loc 1 433 3 view .LVU293
 1064 0018 B847     		blx	r7
 1065              	.LVL73:
 434:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1066              		.loc 1 434 3 is_stmt 1 view .LVU294
 1067 001a 3D4D     		ldr	r5, .L116+4
 1068 001c FF23     		movs	r3, #255
 1069 001e 0093     		str	r3, [sp]
 1070 0020 4FF4C872 		mov	r2, #400
 1071 0024 0123     		movs	r3, #1
 1072 0026 BC21     		movs	r1, #188
 1073 0028 2046     		mov	r0, r4
 1074 002a B847     		blx	r7
 1075              	.LVL74:
 435:src/menu.c    ****   //Clear previous menu
 436:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1076              		.loc 1 436 3 view .LVU295
 1077              	.LBB75:
 1078              		.loc 1 436 8 view .LVU296
 1079              		.loc 1 436 21 view .LVU297
 437:src/menu.c    ****     mdots[col][0] = 0;
 1080              		.loc 1 437 19 is_stmt 0 view .LVU298
 1081 002c 2246     		mov	r2, r4
 1082 002e 05F5C871 		add	r1, r5, #400
 1083              	.LBE75:
 434:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1084              		.loc 1 434 3 view .LVU299
 1085 0032 2B46     		mov	r3, r5
 1086              	.LVL75:
 1087              	.L99:
 1088              	.LBB76:
 1089              		.loc 1 437 5 is_stmt 1 discriminator 3 view .LVU300
 1090              		.loc 1 437 19 is_stmt 0 discriminator 3 view .LVU301
 1091 0034 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccLcrImZ.s 			page 32


 438:src/menu.c    ****     mdots[col][1] = 0;
 1092              		.loc 1 438 5 is_stmt 1 discriminator 3 view .LVU302
 1093              		.loc 1 438 19 is_stmt 0 discriminator 3 view .LVU303
 1094 0036 5A70     		strb	r2, [r3, #1]
 436:src/menu.c    ****     mdots[col][0] = 0;
 1095              		.loc 1 436 32 is_stmt 1 discriminator 3 view .LVU304
 436:src/menu.c    ****     mdots[col][0] = 0;
 1096              		.loc 1 436 21 discriminator 3 view .LVU305
 1097 0038 0233     		adds	r3, r3, #2
 436:src/menu.c    ****     mdots[col][0] = 0;
 1098              		.loc 1 436 3 is_stmt 0 discriminator 3 view .LVU306
 1099 003a 9942     		cmp	r1, r3
 1100 003c FAD1     		bne	.L99
 1101 003e 354B     		ldr	r3, .L116+8
 1102 0040 D022     		movs	r2, #208
 1103 0042 02FB0636 		mla	r6, r2, r6, r3
 1104              	.LVL76:
 436:src/menu.c    ****     mdots[col][0] = 0;
 1105              		.loc 1 436 3 discriminator 3 view .LVU307
 1106 0046 2036     		adds	r6, r6, #32
 436:src/menu.c    ****     mdots[col][0] = 0;
 1107              		.loc 1 436 3 view .LVU308
 1108 0048 0024     		movs	r4, #0
 1109              	.LVL77:
 1110              	.L100:
 436:src/menu.c    ****     mdots[col][0] = 0;
 1111              		.loc 1 436 3 view .LVU309
 1112              	.LBE76:
 1113              	.LBB77:
 439:src/menu.c    ****   }
 440:src/menu.c    **** 
 441:src/menu.c    ****   // Draw menu items
 442:src/menu.c    ****   // 
 443:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 444:src/menu.c    ****     /*
 445:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 446:src/menu.c    ****     */
 447:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 448:src/menu.c    ****     // Unshifted first
 449:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small fo
 1114              		.loc 1 449 5 is_stmt 1 view .LVU310
 1115              		.loc 1 449 11 is_stmt 0 view .LVU311
 1116 004a 0021     		movs	r1, #0
 1117 004c 3046     		mov	r0, r6
 1118 004e FFF7FEFF 		bl	pixel_length
 1119              	.LVL78:
 450:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 )
 1120              		.loc 1 450 5 is_stmt 1 view .LVU312
 1121              		.loc 1 450 87 is_stmt 0 view .LVU313
 1122 0052 C0F12000 		rsb	r0, r0, #32
 1123              	.LVL79:
 1124              		.loc 1 450 93 view .LVU314
 1125 0056 00EBD070 		add	r0, r0, r0, lsr #31
 1126              		.loc 1 450 5 view .LVU315
 1127 005a 04EB6001 		add	r1, r4, r0, asr #1
 1128 005e 0022     		movs	r2, #0
 1129 0060 3046     		mov	r0, r6
ARM GAS  /tmp/ccLcrImZ.s 			page 33


 1130 0062 06F10807 		add	r7, r6, #8
 1131 0066 FFF7FEFF 		bl	set_menu_label.constprop.0
 1132              	.LVL80:
 451:src/menu.c    ****     // Now shifted ...	
 452:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small font
 1133              		.loc 1 452 5 is_stmt 1 view .LVU316
 1134              		.loc 1 452 11 is_stmt 0 view .LVU317
 1135 006a 0021     		movs	r1, #0
 1136 006c 3846     		mov	r0, r7
 1137 006e FFF7FEFF 		bl	pixel_length
 1138              	.LVL81:
 453:src/menu.c    ****     len = item*32 + (32-len)/2;
 1139              		.loc 1 453 5 is_stmt 1 view .LVU318
 1140              		.loc 1 453 24 is_stmt 0 view .LVU319
 1141 0072 C0F12000 		rsb	r0, r0, #32
 1142              	.LVL82:
 1143              		.loc 1 453 29 view .LVU320
 1144 0076 00EBD070 		add	r0, r0, r0, lsr #31
 1145              	.LVL83:
 454:src/menu.c    ****     if (len<0) len = 0;
 1146              		.loc 1 454 5 is_stmt 1 view .LVU321
 453:src/menu.c    ****     len = item*32 + (32-len)/2;
 1147              		.loc 1 453 9 is_stmt 0 view .LVU322
 1148 007a 04EB6001 		add	r1, r4, r0, asr #1
 1149              	.LVL84:
 453:src/menu.c    ****     len = item*32 + (32-len)/2;
 1150              		.loc 1 453 9 view .LVU323
 1151 007e C729     		cmp	r1, #199
 1152 0080 A8BF     		it	ge
 1153 0082 C721     		movge	r1, #199
 1154              	.LVL85:
 455:src/menu.c    ****     if (len>199) len = 199;
 456:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 1155              		.loc 1 456 5 is_stmt 1 view .LVU324
 1156 0084 21EAE171 		bic	r1, r1, r1, asr #31
 1157              	.LVL86:
 1158              		.loc 1 456 5 is_stmt 0 view .LVU325
 1159 0088 3846     		mov	r0, r7
 1160 008a 2034     		adds	r4, r4, #32
 1161 008c 0122     		movs	r2, #1
 1162 008e FFF7FEFF 		bl	set_menu_label.constprop.0
 1163              	.LVL87:
 443:src/menu.c    ****     /*
 1164              		.loc 1 443 32 is_stmt 1 view .LVU326
 443:src/menu.c    ****     /*
 1165              		.loc 1 443 22 view .LVU327
 443:src/menu.c    ****     /*
 1166              		.loc 1 443 3 is_stmt 0 view .LVU328
 1167 0092 C02C     		cmp	r4, #192
 1168 0094 06F12006 		add	r6, r6, #32
 1169 0098 D7D1     		bne	.L100
 1170 009a 1F4E     		ldr	r6, .L116+12
 1171              	.LBE77:
 1172              	.LBB78:
 1173              	.LBB79:
 457:src/menu.c    ****   }
 458:src/menu.c    **** 
ARM GAS  /tmp/ccLcrImZ.s 			page 34


 459:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 460:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 461:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 462:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 463:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1174              		.loc 1 463 2 view .LVU329
 1175 009c DFF86C90 		ldr	r9, .L116
 1176 00a0 C5F1040A 		rsb	r10, r5, #4
 1177 00a4 06F5C47B 		add	fp, r6, #392
 1178              	.LBE79:
 1179              	.LBE78:
 1180              	.LBB81:
 443:src/menu.c    ****     /*
 1181              		.loc 1 443 3 view .LVU330
 1182 00a8 771E     		subs	r7, r6, #1
 1183              	.LBE81:
 1184              	.LBB82:
 1185              	.LBB80:
 1186              		.loc 1 463 2 view .LVU331
 1187 00aa 4FF0FF08 		mov	r8, #255
 1188              	.L101:
 1189              	.LVL88:
 460:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1190              		.loc 1 460 23 is_stmt 1 view .LVU332
 1191 00ae 0AEB0705 		add	r5, r10, r7
 460:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1192              		.loc 1 460 14 is_stmt 0 view .LVU333
 1193 00b2 0024     		movs	r4, #0
 1194              	.LVL89:
 1195              	.L104:
 461:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1196              		.loc 1 461 7 is_stmt 1 view .LVU334
 1197              		.loc 1 463 2 view .LVU335
 461:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1198              		.loc 1 461 22 is_stmt 0 view .LVU336
 1199 00b4 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 461:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1200              		.loc 1 461 40 view .LVU337
 1201 00b8 2241     		asrs	r2, r2, r4
 1202              		.loc 1 463 2 view .LVU338
 1203 00ba A4EB8401 		sub	r1, r4, r4, lsl #2
 1204 00be 0323     		movs	r3, #3
 461:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1205              		.loc 1 461 10 view .LVU339
 1206 00c0 12F0010F 		tst	r2, #1
 1207              		.loc 1 463 2 view .LVU340
 1208 00c4 01F1E901 		add	r1, r1, #233
 1209 00c8 1A46     		mov	r2, r3
 1210 00ca 2846     		mov	r0, r5
 461:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1211              		.loc 1 461 10 view .LVU341
 1212 00cc 02D0     		beq	.L102
 1213              		.loc 1 463 2 view .LVU342
 1214 00ce CDF80080 		str	r8, [sp]
 1215 00d2 C847     		blx	r9
 1216              	.LVL90:
 1217              	.L102:
ARM GAS  /tmp/ccLcrImZ.s 			page 35


 464:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1218              		.loc 1 464 7 is_stmt 1 view .LVU343
 465:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 466:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1219              		.loc 1 466 2 view .LVU344
 464:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1220              		.loc 1 464 22 is_stmt 0 view .LVU345
 1221 00d4 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 464:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1222              		.loc 1 464 40 view .LVU346
 1223 00d6 2241     		asrs	r2, r2, r4
 1224              		.loc 1 466 2 view .LVU347
 1225 00d8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1226 00dc 0323     		movs	r3, #3
 464:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1227              		.loc 1 464 10 view .LVU348
 1228 00de 12F0010F 		tst	r2, #1
 1229              		.loc 1 466 2 view .LVU349
 1230 00e2 01F1D001 		add	r1, r1, #208
 1231 00e6 1A46     		mov	r2, r3
 1232 00e8 04F10104 		add	r4, r4, #1
 1233              	.LVL91:
 1234              		.loc 1 466 2 view .LVU350
 1235 00ec 2846     		mov	r0, r5
 464:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1236              		.loc 1 464 10 view .LVU351
 1237 00ee 02D0     		beq	.L103
 1238              		.loc 1 466 2 view .LVU352
 1239 00f0 CDF80080 		str	r8, [sp]
 1240 00f4 C847     		blx	r9
 1241              	.LVL92:
 1242              	.L103:
 460:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1243              		.loc 1 460 32 is_stmt 1 discriminator 2 view .LVU353
 460:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1244              		.loc 1 460 23 discriminator 2 view .LVU354
 460:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1245              		.loc 1 460 5 is_stmt 0 discriminator 2 view .LVU355
 1246 00f6 062C     		cmp	r4, #6
 1247 00f8 DCD1     		bne	.L104
 1248              	.LBE80:
 459:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1249              		.loc 1 459 32 is_stmt 1 discriminator 2 view .LVU356
 459:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1250              		.loc 1 459 21 discriminator 2 view .LVU357
 1251 00fa 0236     		adds	r6, r6, #2
 459:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1252              		.loc 1 459 3 is_stmt 0 discriminator 2 view .LVU358
 1253 00fc B345     		cmp	fp, r6
 1254 00fe 07F10207 		add	r7, r7, #2
 1255 0102 D4D1     		bne	.L101
 1256              	.LBE82:
 467:src/menu.c    ****     }
 468:src/menu.c    ****   }
 469:src/menu.c    **** }
 1257              		.loc 1 469 1 view .LVU359
 1258 0104 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccLcrImZ.s 			page 36


 1259              		.cfi_def_cfa_offset 36
 1260              		@ sp needed
 1261 0106 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1262              	.LVL93:
 1263              	.L117:
 1264              		.loc 1 469 1 view .LVU360
 1265 010a 00BF     		.align	2
 1266              	.L116:
 1267 010c 3D020008 		.word	134218301
 1268 0110 00000000 		.word	.LANCHOR0
 1269 0114 00000000 		.word	.LANCHOR4
 1270 0118 01000000 		.word	.LANCHOR0+1
 1271              		.cfi_endproc
 1272              	.LFE13:
 1274              		.section	.text.display_current_menu,"ax",%progbits
 1275              		.align	1
 1276              		.p2align 2,,3
 1277              		.global	display_current_menu
 1278              		.syntax unified
 1279              		.thumb
 1280              		.thumb_func
 1281              		.fpu fpv4-sp-d16
 1283              	display_current_menu:
 1284              	.LFB9:
 110:src/menu.c    ****   display_menu (current_menu);
 1285              		.loc 1 110 30 is_stmt 1 view -0
 1286              		.cfi_startproc
 1287              		@ args = 0, pretend = 0, frame = 0
 1288              		@ frame_needed = 0, uses_anonymous_args = 0
 1289              		@ link register save eliminated.
 111:src/menu.c    **** }
 1290              		.loc 1 111 3 view .LVU362
 1291 0000 014B     		ldr	r3, .L119
 1292 0002 1868     		ldr	r0, [r3]
 1293 0004 FFF7FEBF 		b	display_menu
 1294              	.LVL94:
 1295              	.L120:
 1296              		.align	2
 1297              	.L119:
 1298 0008 00000000 		.word	.LANCHOR1
 1299              		.cfi_endproc
 1300              	.LFE9:
 1302              		.section	.text.all_menu_dots,"ax",%progbits
 1303              		.align	1
 1304              		.p2align 2,,3
 1305              		.global	all_menu_dots
 1306              		.syntax unified
 1307              		.thumb
 1308              		.thumb_func
 1309              		.fpu fpv4-sp-d16
 1311              	all_menu_dots:
 1312              	.LFB14:
 470:src/menu.c    **** 
 471:src/menu.c    **** void all_menu_dots () {
 1313              		.loc 1 471 23 view -0
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccLcrImZ.s 			page 37


 1316              		@ frame_needed = 0, uses_anonymous_args = 0
 472:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1317              		.loc 1 472 3 view .LVU364
 1318              	.LBB83:
 1319              		.loc 1 472 8 view .LVU365
 1320              	.LVL95:
 1321              		.loc 1 472 21 view .LVU366
 1322              	.LBE83:
 471:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1323              		.loc 1 471 23 is_stmt 0 view .LVU367
 1324 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1325              		.cfi_def_cfa_offset 20
 1326              		.cfi_offset 4, -20
 1327              		.cfi_offset 5, -16
 1328              		.cfi_offset 6, -12
 1329              		.cfi_offset 7, -8
 1330              		.cfi_offset 14, -4
 1331              	.LBB87:
 1332              	.LBB84:
 473:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 474:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1333              		.loc 1 474 2 view .LVU368
 1334 0002 0D4E     		ldr	r6, .L127
 1335              	.LBE84:
 1336              	.LBE87:
 471:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1337              		.loc 1 471 23 view .LVU369
 1338 0004 83B0     		sub	sp, sp, #12
 1339              		.cfi_def_cfa_offset 32
 471:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1340              		.loc 1 471 23 view .LVU370
 1341 0006 0025     		movs	r5, #0
 1342              	.LBB88:
 1343              	.LBB85:
 1344              		.loc 1 474 2 view .LVU371
 1345 0008 FF27     		movs	r7, #255
 1346              	.LVL96:
 1347              	.L122:
 473:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1348              		.loc 1 473 23 is_stmt 1 view .LVU372
 1349              	.LBE85:
 1350              	.LBE88:
 471:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1351              		.loc 1 471 23 is_stmt 0 view .LVU373
 1352 000a E924     		movs	r4, #233
 1353              	.LVL97:
 1354              	.L123:
 1355              	.LBB89:
 1356              	.LBB86:
 1357              		.loc 1 474 2 is_stmt 1 discriminator 3 view .LVU374
 1358 000c 0323     		movs	r3, #3
 1359 000e 1A46     		mov	r2, r3
 1360 0010 2146     		mov	r1, r4
 1361 0012 2846     		mov	r0, r5
 1362 0014 0097     		str	r7, [sp]
 1363 0016 B047     		blx	r6
 1364              	.LVL98:
ARM GAS  /tmp/ccLcrImZ.s 			page 38


 475:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1365              		.loc 1 475 2 discriminator 3 view .LVU375
 1366 0018 0323     		movs	r3, #3
 1367 001a A4F11901 		sub	r1, r4, #25
 1368 001e 0097     		str	r7, [sp]
 1369 0020 1A46     		mov	r2, r3
 1370 0022 2846     		mov	r0, r5
 1371 0024 033C     		subs	r4, r4, #3
 1372 0026 B047     		blx	r6
 1373              	.LVL99:
 473:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1374              		.loc 1 473 32 discriminator 3 view .LVU376
 473:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1375              		.loc 1 473 23 discriminator 3 view .LVU377
 473:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1376              		.loc 1 473 5 is_stmt 0 discriminator 3 view .LVU378
 1377 0028 D72C     		cmp	r4, #215
 1378 002a EFD1     		bne	.L123
 1379              	.LBE86:
 472:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1380              		.loc 1 472 32 is_stmt 1 discriminator 2 view .LVU379
 472:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1381              		.loc 1 472 21 discriminator 2 view .LVU380
 1382 002c 0235     		adds	r5, r5, #2
 472:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1383              		.loc 1 472 3 is_stmt 0 discriminator 2 view .LVU381
 1384 002e B5F5C87F 		cmp	r5, #400
 1385 0032 EAD1     		bne	.L122
 1386              	.LBE89:
 476:src/menu.c    ****     }
 477:src/menu.c    ****   }
 478:src/menu.c    **** }  
 1387              		.loc 1 478 1 view .LVU382
 1388 0034 03B0     		add	sp, sp, #12
 1389              		.cfi_def_cfa_offset 20
 1390              		@ sp needed
 1391 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1392              	.L128:
 1393              		.align	2
 1394              	.L127:
 1395 0038 3D020008 		.word	134218301
 1396              		.cfi_endproc
 1397              	.LFE14:
 1399              		.section	.text.shutdown,"ax",%progbits
 1400              		.align	1
 1401              		.p2align 2,,3
 1402              		.global	shutdown
 1403              		.syntax unified
 1404              		.thumb
 1405              		.thumb_func
 1406              		.fpu fpv4-sp-d16
 1408              	shutdown:
 1409              	.LFB16:
 1410              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
ARM GAS  /tmp/ccLcrImZ.s 			page 39


   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  46:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  47:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  48:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  49:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  50:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  51:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  52:src/console.c **** 
  53:src/console.c **** static struct _ndmap remap (const int c) {
  54:src/console.c **** 
  55:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  56:src/console.c **** 
  57:src/console.c **** #include "keytran.c"
  58:src/console.c **** 
  59:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  60:src/console.c **** 
ARM GAS  /tmp/ccLcrImZ.s 			page 40


  61:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  62:src/console.c **** 
  63:src/console.c ****   if (c == 44 ) {
  64:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  65:src/console.c ****     return sshot;
  66:src/console.c ****   }
  67:src/console.c ****   
  68:src/console.c ****   if (Running | Pause) {
  69:src/console.c ****     return mapping_running[c];
  70:src/console.c ****   }
  71:src/console.c ****   
  72:src/console.c ****   switch (c) {
  73:src/console.c ****   case KEY_F1:
  74:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
  75:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
  76:src/console.c ****   case KEY_F2:
  77:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
  78:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
  79:src/console.c ****   case KEY_F3:
  80:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
  81:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
  82:src/console.c ****   case KEY_F4:
  83:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
  84:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
  85:src/console.c ****   case KEY_F5:
  86:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
  87:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
  88:src/console.c ****   case KEY_F6:
  89:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
  90:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
  91:src/console.c ****   }
  92:src/console.c ****   
  93:src/console.c ****   if ( get_alpha_state() ) {
  94:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  95:src/console.c ****       switch (cur_shift()) { 
  96:src/console.c ****       case SHIFT_N:
  97:src/console.c **** 	return mapping_none[c]; // N -> F
  98:src/console.c **** 	break;
  99:src/console.c ****       case SHIFT_F:
 100:src/console.c **** 	return mapping_fshift[c]; // F -> G
 101:src/console.c **** 	break;
 102:src/console.c ****       case SHIFT_G:
 103:src/console.c **** 	return h_shift; // G -> H
 104:src/console.c **** 	break;
 105:src/console.c ****       case SHIFT_H:
 106:src/console.c **** 	return h_shift; // H -> N
 107:src/console.c ****       default:
 108:src/console.c **** 	return no_change;
 109:src/console.c ****       }
 110:src/console.c ****     }
 111:src/console.c ****     return mapping_alpha [c];
 112:src/console.c ****   }
 113:src/console.c **** 
 114:src/console.c ****   switch (cur_shift()) {
 115:src/console.c ****   case SHIFT_N:    
 116:src/console.c ****     return mapping_none[c];
 117:src/console.c ****     break;
ARM GAS  /tmp/ccLcrImZ.s 			page 41


 118:src/console.c ****   case SHIFT_F:
 119:src/console.c ****     return mapping_fshift[c];
 120:src/console.c ****     break;
 121:src/console.c ****   case SHIFT_G:
 122:src/console.c ****     return mapping_gshift[c];
 123:src/console.c ****     break;
 124:src/console.c ****   default:
 125:src/console.c ****     return no_change;
 126:src/console.c ****   }
 127:src/console.c **** }
 128:src/console.c **** 
 129:src/console.c **** #endif
 130:src/console.c **** 
 131:src/console.c **** void shutdown( void )
 132:src/console.c **** {
 1411              		.loc 2 132 1 is_stmt 1 view -0
 1412              		.cfi_startproc
 1413              		@ args = 0, pretend = 0, frame = 0
 1414              		@ frame_needed = 0, uses_anonymous_args = 0
 1415              		@ link register save eliminated.
 133:src/console.c **** #ifndef DM42
 134:src/console.c ****   checksum_all();
 135:src/console.c ****   setuptty( 1 );
 136:src/console.c ****   save_statefile( NULL );
 137:src/console.c ****   exit( 0 );
 138:src/console.c **** #else
 139:src/console.c ****   //  save_ram_file(0);
 140:src/console.c ****   SET_ST(STAT_PGM_END);
 1416              		.loc 2 140 3 view .LVU384
 1417 0000 024A     		ldr	r2, .L130
 1418 0002 1368     		ldr	r3, [r2]
 1419 0004 43F40073 		orr	r3, r3, #512
 1420 0008 1360     		str	r3, [r2]
 141:src/console.c **** #endif
 142:src/console.c **** }
 1421              		.loc 2 142 1 is_stmt 0 view .LVU385
 1422 000a 7047     		bx	lr
 1423              	.L131:
 1424              		.align	2
 1425              	.L130:
 1426 000c 00200010 		.word	268443648
 1427              		.cfi_endproc
 1428              	.LFE16:
 1430              		.section	.text.is_key_pressed,"ax",%progbits
 1431              		.align	1
 1432              		.p2align 2,,3
 1433              		.global	is_key_pressed
 1434              		.syntax unified
 1435              		.thumb
 1436              		.thumb_func
 1437              		.fpu fpv4-sp-d16
 1439              	is_key_pressed:
 1440              	.LFB17:
 143:src/console.c **** 
 144:src/console.c **** 
 145:src/console.c **** /*
 146:src/console.c ****  *  Dummies
ARM GAS  /tmp/ccLcrImZ.s 			page 42


 147:src/console.c ****  */
 148:src/console.c **** int is_key_pressed(void) 
 149:src/console.c **** {
 1441              		.loc 2 149 1 is_stmt 1 view -0
 1442              		.cfi_startproc
 1443              		@ args = 0, pretend = 0, frame = 0
 1444              		@ frame_needed = 0, uses_anonymous_args = 0
 150:src/console.c **** #ifdef DM42
 151:src/console.c ****   return !key_empty();
 1445              		.loc 2 151 3 view .LVU387
 149:src/console.c **** #ifdef DM42
 1446              		.loc 2 149 1 is_stmt 0 view .LVU388
 1447 0000 08B5     		push	{r3, lr}
 1448              		.cfi_def_cfa_offset 8
 1449              		.cfi_offset 3, -8
 1450              		.cfi_offset 14, -4
 1451              		.loc 2 151 11 view .LVU389
 1452 0002 034B     		ldr	r3, .L134
 1453 0004 9847     		blx	r3
 1454              	.LVL100:
 152:src/console.c **** #else
 153:src/console.c ****   return 0;
 154:src/console.c **** #endif
 155:src/console.c **** }
 1455              		.loc 2 155 1 view .LVU390
 1456 0006 B0FA80F0 		clz	r0, r0
 1457 000a 4009     		lsrs	r0, r0, #5
 1458 000c 08BD     		pop	{r3, pc}
 1459              	.L135:
 1460 000e 00BF     		.align	2
 1461              	.L134:
 1462 0010 7D030008 		.word	134218621
 1463              		.cfi_endproc
 1464              	.LFE17:
 1466              		.section	.text.get_key,"ax",%progbits
 1467              		.align	1
 1468              		.p2align 2,,3
 1469              		.global	get_key
 1470              		.syntax unified
 1471              		.thumb
 1472              		.thumb_func
 1473              		.fpu fpv4-sp-d16
 1475              	get_key:
 1476              	.LFB18:
 156:src/console.c **** 
 157:src/console.c **** int get_key(void)
 158:src/console.c **** {
 1477              		.loc 2 158 1 is_stmt 1 view -0
 1478              		.cfi_startproc
 1479              		@ args = 0, pretend = 0, frame = 0
 1480              		@ frame_needed = 0, uses_anonymous_args = 0
 1481              		@ link register save eliminated.
 159:src/console.c ****   #ifdef DM42
 160:src/console.c ****   return key_pop();
 1482              		.loc 2 160 3 view .LVU392
 1483              		.loc 2 160 10 is_stmt 0 view .LVU393
 1484 0000 004B     		ldr	r3, .L137
ARM GAS  /tmp/ccLcrImZ.s 			page 43


 1485 0002 1847     		bx	r3
 1486              	.LVL101:
 1487              	.L138:
 1488              		.align	2
 1489              	.L137:
 1490 0004 89030008 		.word	134218633
 1491              		.cfi_endproc
 1492              	.LFE18:
 1494              		.section	.text.put_key,"ax",%progbits
 1495              		.align	1
 1496              		.p2align 2,,3
 1497              		.global	put_key
 1498              		.syntax unified
 1499              		.thumb
 1500              		.thumb_func
 1501              		.fpu fpv4-sp-d16
 1503              	put_key:
 1504              	.LVL102:
 1505              	.LFB19:
 161:src/console.c ****   #else
 162:src/console.c ****   return 0;
 163:src/console.c ****   #endif
 164:src/console.c **** }
 165:src/console.c **** 
 166:src/console.c **** /*
 167:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 168:src/console.c ****  * 
 169:src/console.c ****  */
 170:src/console.c **** int put_key( int k )
 171:src/console.c **** {
 1506              		.loc 2 171 1 is_stmt 1 view -0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 48
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 1510              		@ link register save eliminated.
 172:src/console.c ****   #ifdef DM42
 173:src/console.c ****   const char wp34s_to_DM42[] = {
 1511              		.loc 2 173 3 view .LVU395
 171:src/console.c ****   #ifdef DM42
 1512              		.loc 2 171 1 is_stmt 0 view .LVU396
 1513 0000 70B4     		push	{r4, r5, r6}
 1514              		.cfi_def_cfa_offset 12
 1515              		.cfi_offset 4, -12
 1516              		.cfi_offset 5, -8
 1517              		.cfi_offset 6, -4
 1518              		.loc 2 173 14 view .LVU397
 1519 0002 0E4D     		ldr	r5, .L142
 171:src/console.c ****   #ifdef DM42
 1520              		.loc 2 171 1 view .LVU398
 1521 0004 0646     		mov	r6, r0
 1522              		.loc 2 173 14 view .LVU399
 1523 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1524              	.LVL103:
 171:src/console.c ****   #ifdef DM42
 1525              		.loc 2 171 1 view .LVU400
 1526 0008 8DB0     		sub	sp, sp, #52
 1527              		.cfi_def_cfa_offset 64
ARM GAS  /tmp/ccLcrImZ.s 			page 44


 1528              		.loc 2 173 14 view .LVU401
 1529 000a 01AC     		add	r4, sp, #4
 1530 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1531 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1532 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1533 0012 95E80700 		ldm	r5, {r0, r1, r2}
 1534 0016 03C4     		stmia	r4!, {r0, r1}
 174:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 175:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 176:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 177:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 178:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 179:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 180:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 181:src/console.c ****   
 182:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 1535              		.loc 2 182 6 view .LVU402
 1536 0018 282E     		cmp	r6, #40
 173:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 1537              		.loc 2 173 14 view .LVU403
 1538 001a 2270     		strb	r2, [r4]
 1539              		.loc 2 182 3 is_stmt 1 view .LVU404
 1540              		.loc 2 182 6 is_stmt 0 view .LVU405
 1541 001c 08D8     		bhi	.L140
 183:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 1542              		.loc 2 183 5 is_stmt 1 view .LVU406
 1543              		.loc 2 183 36 is_stmt 0 view .LVU407
 1544 001e 0CAB     		add	r3, sp, #48
 1545 0020 3046     		mov	r0, r6
 1546 0022 1844     		add	r0, r0, r3
 1547              		.loc 2 183 12 view .LVU408
 1548 0024 064B     		ldr	r3, .L142+4
 1549 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 184:src/console.c ****   }
 185:src/console.c ****   else {
 186:src/console.c ****     return -1;
 187:src/console.c ****   }
 188:src/console.c ****   #else
 189:src/console.c ****   return k;
 190:src/console.c ****   #endif
 191:src/console.c **** }
 1550              		.loc 2 191 1 view .LVU409
 1551 002a 0DB0     		add	sp, sp, #52
 1552              		.cfi_remember_state
 1553              		.cfi_def_cfa_offset 12
 1554              		@ sp needed
 1555 002c 70BC     		pop	{r4, r5, r6}
 1556              		.cfi_restore 6
 1557              		.cfi_restore 5
 1558              		.cfi_restore 4
 1559              		.cfi_def_cfa_offset 0
 1560              	.LVL104:
 183:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 1561              		.loc 2 183 12 view .LVU410
 1562 002e 1847     		bx	r3
 1563              	.LVL105:
 1564              	.L140:
ARM GAS  /tmp/ccLcrImZ.s 			page 45


 1565              		.cfi_restore_state
 1566              		.loc 2 191 1 view .LVU411
 1567 0030 4FF0FF30 		mov	r0, #-1
 1568 0034 0DB0     		add	sp, sp, #52
 1569              		.cfi_def_cfa_offset 12
 1570              		@ sp needed
 1571 0036 70BC     		pop	{r4, r5, r6}
 1572              		.cfi_restore 6
 1573              		.cfi_restore 5
 1574              		.cfi_restore 4
 1575              		.cfi_def_cfa_offset 0
 1576              	.LVL106:
 1577              		.loc 2 191 1 view .LVU412
 1578 0038 7047     		bx	lr
 1579              	.L143:
 1580 003a 00BF     		.align	2
 1581              	.L142:
 1582 003c 00000000 		.word	.LANCHOR5
 1583 0040 81030008 		.word	134218625
 1584              		.cfi_endproc
 1585              	.LFE19:
 1587              		.section	.text.shift_down,"ax",%progbits
 1588              		.align	1
 1589              		.p2align 2,,3
 1590              		.global	shift_down
 1591              		.syntax unified
 1592              		.thumb
 1593              		.thumb_func
 1594              		.fpu fpv4-sp-d16
 1596              	shift_down:
 1597              	.LFB20:
 192:src/console.c **** 
 193:src/console.c **** enum shifts shift_down(void)
 194:src/console.c **** {
 1598              		.loc 2 194 1 is_stmt 1 view -0
 1599              		.cfi_startproc
 1600              		@ args = 0, pretend = 0, frame = 0
 1601              		@ frame_needed = 0, uses_anonymous_args = 0
 1602              		@ link register save eliminated.
 195:src/console.c **** 	return SHIFT_N;
 1603              		.loc 2 195 2 view .LVU414
 196:src/console.c **** }
 1604              		.loc 2 196 1 is_stmt 0 view .LVU415
 1605 0000 0020     		movs	r0, #0
 1606 0002 7047     		bx	lr
 1607              		.cfi_endproc
 1608              	.LFE20:
 1610              		.section	.text.start_key_timer,"ax",%progbits
 1611              		.align	1
 1612              		.p2align 2,,3
 1613              		.global	start_key_timer
 1614              		.syntax unified
 1615              		.thumb
 1616              		.thumb_func
 1617              		.fpu fpv4-sp-d16
 1619              	start_key_timer:
 1620              	.LFB21:
ARM GAS  /tmp/ccLcrImZ.s 			page 46


 197:src/console.c **** 
 198:src/console.c **** #ifndef DM42   // No serial operations for DM42
 199:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 200:src/console.c **** /*
 201:src/console.c ****  *  Open a COM port for transmission
 202:src/console.c ****  */
 203:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 204:src/console.c **** {
 205:src/console.c **** 	return 0;
 206:src/console.c **** }
 207:src/console.c **** 
 208:src/console.c **** 
 209:src/console.c **** /*
 210:src/console.c ****  *  Close the COM port after transmission is complete
 211:src/console.c ****  */
 212:src/console.c **** extern void close_port( void )
 213:src/console.c **** {
 214:src/console.c **** }
 215:src/console.c **** 
 216:src/console.c **** 
 217:src/console.c **** /*
 218:src/console.c ****  *  Output a single byte to the serial
 219:src/console.c ****  */
 220:src/console.c **** void put_byte( unsigned char byte )
 221:src/console.c **** {
 222:src/console.c **** 	report_err(ERR_PROG_BAD);
 223:src/console.c **** }
 224:src/console.c **** 
 225:src/console.c **** 
 226:src/console.c **** /*
 227:src/console.c ****  *  Force buffer flush
 228:src/console.c ****  */
 229:src/console.c **** void flush_comm( void )
 230:src/console.c **** {
 231:src/console.c **** }
 232:src/console.c **** 
 233:src/console.c **** #endif
 234:src/console.c **** #endif
 235:src/console.c **** 
 236:src/console.c **** 
 237:src/console.c **** /*
 238:src/console.c ****  *  Main loop
 239:src/console.c ****  */
 240:src/console.c **** #ifdef DM42
 241:src/console.c **** void start_key_timer (void);
 242:src/console.c **** long int keyticks (void);
 243:src/console.c **** void moveto (int line, int x);
 244:src/console.c **** 
 245:src/console.c **** static long int start_ticks;
 246:src/console.c **** 
 247:src/console.c **** void start_key_timer() {
 1621              		.loc 2 247 24 is_stmt 1 view -0
 1622              		.cfi_startproc
 1623              		@ args = 0, pretend = 0, frame = 0
 1624              		@ frame_needed = 0, uses_anonymous_args = 0
 248:src/console.c ****     start_ticks = get_rtc_ticks();
 1625              		.loc 2 248 5 view .LVU417
ARM GAS  /tmp/ccLcrImZ.s 			page 47


 247:src/console.c ****     start_ticks = get_rtc_ticks();
 1626              		.loc 2 247 24 is_stmt 0 view .LVU418
 1627 0000 08B5     		push	{r3, lr}
 1628              		.cfi_def_cfa_offset 8
 1629              		.cfi_offset 3, -8
 1630              		.cfi_offset 14, -4
 1631              		.loc 2 248 19 view .LVU419
 1632 0002 024B     		ldr	r3, .L147
 1633 0004 9847     		blx	r3
 1634              	.LVL107:
 1635              		.loc 2 248 17 view .LVU420
 1636 0006 024B     		ldr	r3, .L147+4
 1637 0008 1860     		str	r0, [r3]
 249:src/console.c **** }
 1638              		.loc 2 249 1 view .LVU421
 1639 000a 08BD     		pop	{r3, pc}
 1640              	.L148:
 1641              		.align	2
 1642              	.L147:
 1643 000c B9040008 		.word	134218937
 1644 0010 00000000 		.word	.LANCHOR6
 1645              		.cfi_endproc
 1646              	.LFE21:
 1648              		.section	.text.keyticks,"ax",%progbits
 1649              		.align	1
 1650              		.p2align 2,,3
 1651              		.global	keyticks
 1652              		.syntax unified
 1653              		.thumb
 1654              		.thumb_func
 1655              		.fpu fpv4-sp-d16
 1657              	keyticks:
 1658              	.LFB22:
 250:src/console.c **** 
 251:src/console.c **** long int keyticks () {
 1659              		.loc 2 251 22 is_stmt 1 view -0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 0
 1662              		@ frame_needed = 0, uses_anonymous_args = 0
 252:src/console.c ****   long int i;
 1663              		.loc 2 252 3 view .LVU423
 253:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1664              		.loc 2 253 3 view .LVU424
 251:src/console.c ****   long int i;
 1665              		.loc 2 251 22 is_stmt 0 view .LVU425
 1666 0000 08B5     		push	{r3, lr}
 1667              		.cfi_def_cfa_offset 8
 1668              		.cfi_offset 3, -8
 1669              		.cfi_offset 14, -4
 1670              		.loc 2 253 8 view .LVU426
 1671 0002 054B     		ldr	r3, .L151
 1672 0004 9847     		blx	r3
 1673              	.LVL108:
 254:src/console.c ****   return i >> 8;
 1674              		.loc 2 254 3 is_stmt 1 view .LVU427
 253:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1675              		.loc 2 253 24 is_stmt 0 view .LVU428
ARM GAS  /tmp/ccLcrImZ.s 			page 48


 1676 0006 054B     		ldr	r3, .L151+4
 1677 0008 1B68     		ldr	r3, [r3]
 1678 000a C01A     		subs	r0, r0, r3
 1679              	.LVL109:
 253:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1680              		.loc 2 253 38 view .LVU429
 1681 000c 00EB8000 		add	r0, r0, r0, lsl #2
 255:src/console.c **** }
 1682              		.loc 2 255 1 view .LVU430
 1683 0010 40F3D710 		sbfx	r0, r0, #7, #24
 1684 0014 08BD     		pop	{r3, pc}
 1685              	.L152:
 1686 0016 00BF     		.align	2
 1687              	.L151:
 1688 0018 B9040008 		.word	134218937
 1689 001c 00000000 		.word	.LANCHOR6
 1690              		.cfi_endproc
 1691              	.LFE22:
 1693              		.section	.text.moveto,"ax",%progbits
 1694              		.align	1
 1695              		.p2align 2,,3
 1696              		.global	moveto
 1697              		.syntax unified
 1698              		.thumb
 1699              		.thumb_func
 1700              		.fpu fpv4-sp-d16
 1702              	moveto:
 1703              	.LVL110:
 1704              	.LFB23:
 256:src/console.c **** 
 257:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 258:src/console.c **** char print_string[22];
 259:src/console.c **** int n_p = 0;
 260:src/console.c **** 
 261:src/console.c **** 
 262:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 1705              		.loc 2 262 30 is_stmt 1 view -0
 1706              		.cfi_startproc
 1707              		@ args = 0, pretend = 0, frame = 0
 1708              		@ frame_needed = 0, uses_anonymous_args = 0
 263:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1709              		.loc 2 263 3 view .LVU432
 262:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1710              		.loc 2 262 30 is_stmt 0 view .LVU433
 1711 0000 70B5     		push	{r4, r5, r6, lr}
 1712              		.cfi_def_cfa_offset 16
 1713              		.cfi_offset 4, -16
 1714              		.cfi_offset 5, -12
 1715              		.cfi_offset 6, -8
 1716              		.cfi_offset 14, -4
 1717              		.loc 2 263 3 view .LVU434
 1718 0002 0A4D     		ldr	r5, .L155
 1719 0004 0A4B     		ldr	r3, .L155+4
 262:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1720              		.loc 2 262 30 view .LVU435
 1721 0006 0246     		mov	r2, r0
 1722 0008 0C46     		mov	r4, r1
ARM GAS  /tmp/ccLcrImZ.s 			page 49


 1723              		.loc 2 263 3 view .LVU436
 1724 000a A86B     		ldr	r0, [r5, #56]
 1725              	.LVL111:
 1726              		.loc 2 263 3 view .LVU437
 1727 000c 511E     		subs	r1, r2, #1
 1728              	.LVL112:
 1729              		.loc 2 263 3 view .LVU438
 1730 000e 9847     		blx	r3
 1731              	.LVL113:
 264:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1732              		.loc 2 264 3 is_stmt 1 view .LVU439
 1733 0010 A86B     		ldr	r0, [r5, #56]
 1734 0012 084B     		ldr	r3, .L155+8
 1735              		.loc 2 264 33 is_stmt 0 view .LVU440
 1736 0014 0168     		ldr	r1, [r0]
 1737              		.loc 2 264 3 view .LVU441
 1738 0016 B0F90620 		ldrsh	r2, [r0, #6]
 1739              		.loc 2 264 33 view .LVU442
 1740 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 1741              		.loc 2 264 43 view .LVU443
 1742 001c 013C     		subs	r4, r4, #1
 1743              	.LVL114:
 1744              		.loc 2 264 40 view .LVU444
 1745 001e 04FB01F1 		mul	r1, r4, r1
 1746              		.loc 2 264 3 view .LVU445
 1747 0022 1431     		adds	r1, r1, #20
 265:src/console.c **** }
 1748              		.loc 2 265 1 view .LVU446
 1749 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1750              		.cfi_restore 14
 1751              		.cfi_restore 6
 1752              		.cfi_restore 5
 1753              		.cfi_restore 4
 1754              		.cfi_def_cfa_offset 0
 1755              	.LVL115:
 264:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1756              		.loc 2 264 3 view .LVU447
 1757 0028 1847     		bx	r3	@ indirect register sibling call
 1758              	.LVL116:
 1759              	.L156:
 1760 002a 00BF     		.align	2
 1761              	.L155:
 1762 002c 00200010 		.word	268443648
 1763 0030 69020008 		.word	134218345
 1764 0034 6D020008 		.word	134218349
 1765              		.cfi_endproc
 1766              	.LFE23:
 1768              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 1769              		.align	2
 1770              	.LC10:
 1771 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 1771      673A2025 
 1771      34692C25 
 1771      346900
 1772              		.section	.text.print_debug,"ax",%progbits
 1773              		.align	1
 1774              		.p2align 2,,3
ARM GAS  /tmp/ccLcrImZ.s 			page 50


 1775              		.global	print_debug
 1776              		.syntax unified
 1777              		.thumb
 1778              		.thumb_func
 1779              		.fpu fpv4-sp-d16
 1781              	print_debug:
 1782              	.LVL117:
 1783              	.LFB24:
 266:src/console.c **** 
 267:src/console.c **** void print_debug (int i, int j) {
 1784              		.loc 2 267 33 is_stmt 1 view -0
 1785              		.cfi_startproc
 1786              		@ args = 0, pretend = 0, frame = 8
 1787              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/console.c ****   strcpy( print_string, spaces );
 1788              		.loc 2 268 3 view .LVU449
 267:src/console.c ****   strcpy( print_string, spaces );
 1789              		.loc 2 267 33 is_stmt 0 view .LVU450
 1790 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1791              		.cfi_def_cfa_offset 24
 1792              		.cfi_offset 4, -24
 1793              		.cfi_offset 5, -20
 1794              		.cfi_offset 6, -16
 1795              		.cfi_offset 7, -12
 1796              		.cfi_offset 8, -8
 1797              		.cfi_offset 14, -4
 1798              		.loc 2 268 3 view .LVU451
 1799 0004 164C     		ldr	r4, .L159
 1800 0006 174F     		ldr	r7, .L159+4
 269:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 270:src/console.c ****   moveto (3, 1);
 271:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1801              		.loc 2 271 3 view .LVU452
 1802 0008 174E     		ldr	r6, .L159+8
 1803 000a 184D     		ldr	r5, .L159+12
 272:src/console.c ****   lcd_refresh();
 1804              		.loc 2 272 3 view .LVU453
 1805 000c DFF86880 		ldr	r8, .L159+24
 267:src/console.c ****   strcpy( print_string, spaces );
 1806              		.loc 2 267 33 view .LVU454
 1807 0010 82B0     		sub	sp, sp, #8
 1808              		.cfi_def_cfa_offset 32
 267:src/console.c ****   strcpy( print_string, spaces );
 1809              		.loc 2 267 33 view .LVU455
 1810 0012 0190     		str	r0, [sp, #4]
 1811 0014 0091     		str	r1, [sp]
 268:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1812              		.loc 2 268 3 view .LVU456
 1813 0016 2046     		mov	r0, r4
 1814              	.LVL118:
 268:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1815              		.loc 2 268 3 view .LVU457
 1816 0018 3946     		mov	r1, r7
 1817              	.LVL119:
 268:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1818              		.loc 2 268 3 view .LVU458
 1819 001a FFF7FEFF 		bl	strcpy
ARM GAS  /tmp/ccLcrImZ.s 			page 51


 1820              	.LVL120:
 269:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1821              		.loc 2 269 3 is_stmt 1 view .LVU459
 1822 001e DDE90032 		ldrd	r3, r2, [sp]
 1823 0022 1349     		ldr	r1, .L159+16
 1824 0024 2046     		mov	r0, r4
 1825 0026 FFF7FEFF 		bl	sprintf
 1826              	.LVL121:
 270:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1827              		.loc 2 270 3 view .LVU460
 1828 002a 0121     		movs	r1, #1
 1829 002c 0320     		movs	r0, #3
 1830 002e FFF7FEFF 		bl	moveto
 1831              	.LVL122:
 271:src/console.c ****   lcd_refresh();
 1832              		.loc 2 271 3 view .LVU461
 1833 0032 2146     		mov	r1, r4
 1834 0034 B06B     		ldr	r0, [r6, #56]
 1835 0036 A847     		blx	r5
 1836              	.LVL123:
 1837              		.loc 2 272 3 view .LVU462
 1838 0038 C047     		blx	r8
 1839              	.LVL124:
 273:src/console.c ****   sys_delay (100);
 1840              		.loc 2 273 3 view .LVU463
 1841 003a 0E4B     		ldr	r3, .L159+20
 1842 003c 6420     		movs	r0, #100
 1843 003e 9847     		blx	r3
 1844              	.LVL125:
 274:src/console.c ****   /* wait_for_key_press(); */
 275:src/console.c ****   //  key_pop_all();
 276:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 277:src/console.c ****   // key_pop_all();
 278:src/console.c ****   strcpy( print_string, spaces );
 1845              		.loc 2 278 3 view .LVU464
 1846 0040 3946     		mov	r1, r7
 1847 0042 2046     		mov	r0, r4
 1848 0044 FFF7FEFF 		bl	strcpy
 1849              	.LVL126:
 279:src/console.c ****   moveto (3, 1);
 1850              		.loc 2 279 3 view .LVU465
 1851 0048 0121     		movs	r1, #1
 1852 004a 0320     		movs	r0, #3
 1853 004c FFF7FEFF 		bl	moveto
 1854              	.LVL127:
 280:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1855              		.loc 2 280 3 view .LVU466
 1856 0050 B06B     		ldr	r0, [r6, #56]
 1857 0052 2146     		mov	r1, r4
 1858 0054 A847     		blx	r5
 1859              	.LVL128:
 281:src/console.c ****   lcd_refresh();
 1860              		.loc 2 281 3 view .LVU467
 1861 0056 4346     		mov	r3, r8
 282:src/console.c ****   // while (key_empty()<=0);; // wait for release
 283:src/console.c ****   // key_pop_all();
 284:src/console.c **** }
ARM GAS  /tmp/ccLcrImZ.s 			page 52


 1862              		.loc 2 284 1 is_stmt 0 view .LVU468
 1863 0058 02B0     		add	sp, sp, #8
 1864              		.cfi_def_cfa_offset 24
 1865              	.LVL129:
 1866              		.loc 2 284 1 view .LVU469
 1867              		@ sp needed
 1868 005a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1869              		.cfi_restore 14
 1870              		.cfi_restore 8
 1871              		.cfi_restore 7
 1872              		.cfi_restore 6
 1873              		.cfi_restore 5
 1874              		.cfi_restore 4
 1875              		.cfi_def_cfa_offset 0
 1876              	.LVL130:
 281:src/console.c ****   lcd_refresh();
 1877              		.loc 2 281 3 view .LVU470
 1878 005e 1847     		bx	r3	@ indirect register sibling call
 1879              	.LVL131:
 1880              	.L160:
 1881              		.align	2
 1882              	.L159:
 1883 0060 00000000 		.word	print_string
 1884 0064 00000000 		.word	.LANCHOR7
 1885 0068 00200010 		.word	268443648
 1886 006c B1020008 		.word	134218417
 1887 0070 00000000 		.word	.LC10
 1888 0074 05040008 		.word	134218757
 1889 0078 31020008 		.word	134218289
 1890              		.cfi_endproc
 1891              	.LFE24:
 1893              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 1894              		.align	2
 1895              	.LC11:
 1896 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 1896      692C2531 
 1896      337300
 1897              		.section	.text.print_debug2,"ax",%progbits
 1898              		.align	1
 1899              		.p2align 2,,3
 1900              		.global	print_debug2
 1901              		.syntax unified
 1902              		.thumb
 1903              		.thumb_func
 1904              		.fpu fpv4-sp-d16
 1906              	print_debug2:
 1907              	.LVL132:
 1908              	.LFB25:
 285:src/console.c **** 
 286:src/console.c **** void print_debug2 (int i, char* j) {
 1909              		.loc 2 286 36 is_stmt 1 view -0
 1910              		.cfi_startproc
 1911              		@ args = 0, pretend = 0, frame = 8
 1912              		@ frame_needed = 0, uses_anonymous_args = 0
 287:src/console.c ****   strcpy( print_string, spaces );
 1913              		.loc 2 287 3 view .LVU472
 286:src/console.c ****   strcpy( print_string, spaces );
ARM GAS  /tmp/ccLcrImZ.s 			page 53


 1914              		.loc 2 286 36 is_stmt 0 view .LVU473
 1915 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1916              		.cfi_def_cfa_offset 24
 1917              		.cfi_offset 4, -24
 1918              		.cfi_offset 5, -20
 1919              		.cfi_offset 6, -16
 1920              		.cfi_offset 7, -12
 1921              		.cfi_offset 8, -8
 1922              		.cfi_offset 14, -4
 1923              		.loc 2 287 3 view .LVU474
 1924 0004 174C     		ldr	r4, .L163
 1925 0006 184F     		ldr	r7, .L163+4
 288:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 289:src/console.c ****   moveto (3, 1);
 290:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1926              		.loc 2 290 3 view .LVU475
 1927 0008 184E     		ldr	r6, .L163+8
 1928 000a 194D     		ldr	r5, .L163+12
 291:src/console.c ****   lcd_refresh();
 1929              		.loc 2 291 3 view .LVU476
 1930 000c DFF86C80 		ldr	r8, .L163+24
 286:src/console.c ****   strcpy( print_string, spaces );
 1931              		.loc 2 286 36 view .LVU477
 1932 0010 82B0     		sub	sp, sp, #8
 1933              		.cfi_def_cfa_offset 32
 286:src/console.c ****   strcpy( print_string, spaces );
 1934              		.loc 2 286 36 view .LVU478
 1935 0012 0190     		str	r0, [sp, #4]
 1936 0014 0091     		str	r1, [sp]
 287:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1937              		.loc 2 287 3 view .LVU479
 1938 0016 2046     		mov	r0, r4
 1939              	.LVL133:
 287:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1940              		.loc 2 287 3 view .LVU480
 1941 0018 3946     		mov	r1, r7
 1942              	.LVL134:
 287:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1943              		.loc 2 287 3 view .LVU481
 1944 001a FFF7FEFF 		bl	strcpy
 1945              	.LVL135:
 288:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1946              		.loc 2 288 3 is_stmt 1 view .LVU482
 1947 001e DDE90032 		ldrd	r3, r2, [sp]
 1948 0022 1449     		ldr	r1, .L163+16
 1949 0024 2046     		mov	r0, r4
 1950 0026 FFF7FEFF 		bl	sprintf
 1951              	.LVL136:
 289:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1952              		.loc 2 289 3 view .LVU483
 1953 002a 0121     		movs	r1, #1
 1954 002c 0320     		movs	r0, #3
 1955 002e FFF7FEFF 		bl	moveto
 1956              	.LVL137:
 290:src/console.c ****   lcd_refresh();
 1957              		.loc 2 290 3 view .LVU484
 1958 0032 2146     		mov	r1, r4
ARM GAS  /tmp/ccLcrImZ.s 			page 54


 1959 0034 B06B     		ldr	r0, [r6, #56]
 1960 0036 A847     		blx	r5
 1961              	.LVL138:
 1962              		.loc 2 291 3 view .LVU485
 1963 0038 C047     		blx	r8
 1964              	.LVL139:
 292:src/console.c ****   sys_delay (2500);
 1965              		.loc 2 292 3 view .LVU486
 1966 003a 0F4B     		ldr	r3, .L163+20
 1967 003c 40F6C410 		movw	r0, #2500
 1968 0040 9847     		blx	r3
 1969              	.LVL140:
 293:src/console.c ****   /* wait_for_key_press(); */
 294:src/console.c ****   //  key_pop_all();
 295:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 296:src/console.c ****   // key_pop_all();
 297:src/console.c ****   strcpy( print_string, spaces );
 1970              		.loc 2 297 3 view .LVU487
 1971 0042 3946     		mov	r1, r7
 1972 0044 2046     		mov	r0, r4
 1973 0046 FFF7FEFF 		bl	strcpy
 1974              	.LVL141:
 298:src/console.c ****   moveto (3, 1);
 1975              		.loc 2 298 3 view .LVU488
 1976 004a 0121     		movs	r1, #1
 1977 004c 0320     		movs	r0, #3
 1978 004e FFF7FEFF 		bl	moveto
 1979              	.LVL142:
 299:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1980              		.loc 2 299 3 view .LVU489
 1981 0052 B06B     		ldr	r0, [r6, #56]
 1982 0054 2146     		mov	r1, r4
 1983 0056 A847     		blx	r5
 1984              	.LVL143:
 300:src/console.c ****   lcd_refresh();
 1985              		.loc 2 300 3 view .LVU490
 1986 0058 4346     		mov	r3, r8
 301:src/console.c ****   // while (key_empty()<=0);; // wait for release
 302:src/console.c ****   // key_pop_all();
 303:src/console.c **** }
 1987              		.loc 2 303 1 is_stmt 0 view .LVU491
 1988 005a 02B0     		add	sp, sp, #8
 1989              		.cfi_def_cfa_offset 24
 1990              	.LVL144:
 1991              		.loc 2 303 1 view .LVU492
 1992              		@ sp needed
 1993 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1994              		.cfi_restore 14
 1995              		.cfi_restore 8
 1996              		.cfi_restore 7
 1997              		.cfi_restore 6
 1998              		.cfi_restore 5
 1999              		.cfi_restore 4
 2000              		.cfi_def_cfa_offset 0
 2001              	.LVL145:
 300:src/console.c ****   lcd_refresh();
 2002              		.loc 2 300 3 view .LVU493
ARM GAS  /tmp/ccLcrImZ.s 			page 55


 2003 0060 1847     		bx	r3	@ indirect register sibling call
 2004              	.LVL146:
 2005              	.L164:
 2006 0062 00BF     		.align	2
 2007              	.L163:
 2008 0064 00000000 		.word	print_string
 2009 0068 00000000 		.word	.LANCHOR7
 2010 006c 00200010 		.word	268443648
 2011 0070 B1020008 		.word	134218417
 2012 0074 00000000 		.word	.LC11
 2013 0078 05040008 		.word	134218757
 2014 007c 31020008 		.word	134218289
 2015              		.cfi_endproc
 2016              	.LFE25:
 2018              		.section	.text.do_now,"ax",%progbits
 2019              		.align	1
 2020              		.p2align 2,,3
 2021              		.global	do_now
 2022              		.syntax unified
 2023              		.thumb
 2024              		.thumb_func
 2025              		.fpu fpv4-sp-d16
 2027              	do_now:
 2028              	.LVL147:
 2029              	.LFB26:
 304:src/console.c **** 
 305:src/console.c **** void do_now (int key, int shift) {
 2030              		.loc 2 305 34 is_stmt 1 view -0
 2031              		.cfi_startproc
 2032              		@ args = 0, pretend = 0, frame = 8
 2033              		@ frame_needed = 0, uses_anonymous_args = 0
 2034              		@ link register save eliminated.
 306:src/console.c ****   struct _ndmap temp;
 2035              		.loc 2 306 3 view .LVU495
 307:src/console.c ****   temp.key_34s = key;
 2036              		.loc 2 307 3 view .LVU496
 305:src/console.c ****   struct _ndmap temp;
 2037              		.loc 2 305 34 is_stmt 0 view .LVU497
 2038 0000 82B0     		sub	sp, sp, #8
 2039              		.cfi_def_cfa_offset 8
 308:src/console.c ****   temp.shift = shift;
 309:src/console.c ****   process_keycode_with_shift (temp);
 2040              		.loc 2 309 3 view .LVU498
 2041 0002 02AB     		add	r3, sp, #8
 307:src/console.c ****   temp.shift = shift;
 2042              		.loc 2 307 16 view .LVU499
 2043 0004 8DF80000 		strb	r0, [sp]
 308:src/console.c ****   temp.shift = shift;
 2044              		.loc 2 308 3 is_stmt 1 view .LVU500
 308:src/console.c ****   temp.shift = shift;
 2045              		.loc 2 308 14 is_stmt 0 view .LVU501
 2046 0008 0191     		str	r1, [sp, #4]
 2047              		.loc 2 309 3 is_stmt 1 view .LVU502
 2048 000a 13E90300 		ldmdb	r3, {r0, r1}
 2049              	.LVL148:
 310:src/console.c **** }
 2050              		.loc 2 310 1 is_stmt 0 view .LVU503
ARM GAS  /tmp/ccLcrImZ.s 			page 56


 2051 000e 02B0     		add	sp, sp, #8
 2052              		.cfi_def_cfa_offset 0
 2053              		@ sp needed
 309:src/console.c **** }
 2054              		.loc 2 309 3 view .LVU504
 2055 0010 FFF7FEBF 		b	process_keycode_with_shift
 2056              	.LVL149:
 309:src/console.c **** }
 2057              		.loc 2 309 3 view .LVU505
 2058              		.cfi_endproc
 2059              	.LFE26:
 2061              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 2062              		.align	2
 2063              	.LC12:
 2064 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 2064      502F7770 
 2064      3334735F 
 2064      68656C70 
 2064      2E68746D 
 2065              		.section	.text.do_multi,"ax",%progbits
 2066              		.align	1
 2067              		.p2align 2,,3
 2068              		.global	do_multi
 2069              		.syntax unified
 2070              		.thumb
 2071              		.thumb_func
 2072              		.fpu fpv4-sp-d16
 2074              	do_multi:
 2075              	.LVL150:
 2076              	.LFB27:
 311:src/console.c **** 
 312:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 2077              		.loc 2 312 42 is_stmt 1 view -0
 2078              		.cfi_startproc
 2079              		@ args = 0, pretend = 0, frame = 16
 2080              		@ frame_needed = 0, uses_anonymous_args = 0
 2081              		.loc 2 312 42 is_stmt 0 view .LVU507
 2082 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2083              		.cfi_def_cfa_offset 24
 2084              		.cfi_offset 4, -24
 2085              		.cfi_offset 5, -20
 2086              		.cfi_offset 6, -16
 2087              		.cfi_offset 7, -12
 2088              		.cfi_offset 8, -8
 2089              		.cfi_offset 14, -4
 2090 0004 84B0     		sub	sp, sp, #16
 2091              		.cfi_def_cfa_offset 40
 2092              	.LVL151:
 313:src/console.c ****   switch(r.shift) {
 2093              		.loc 2 313 3 is_stmt 1 view .LVU508
 312:src/console.c ****   switch(r.shift) {
 2094              		.loc 2 312 42 is_stmt 0 view .LVU509
 2095 0006 6C46     		mov	r4, sp
 2096 0008 531E     		subs	r3, r2, #1
 2097 000a 84E80600 		stm	r4, {r1, r2}
 2098              	.LVL152:
 312:src/console.c ****   switch(r.shift) {
ARM GAS  /tmp/ccLcrImZ.s 			page 57


 2099              		.loc 2 312 42 view .LVU510
 2100 000e 0546     		mov	r5, r0
 2101 0010 0C2B     		cmp	r3, #12
 2102 0012 00F2BE80 		bhi	.L168
 2103 0016 DFE803F0 		tbb	[pc, r3]
 2104              	.L170:
 2105 001a 15       		.byte	(.L182-.L170)/2
 2106 001b 51       		.byte	(.L181-.L170)/2
 2107 001c 3D       		.byte	(.L180-.L170)/2
 2108 001d 47       		.byte	(.L179-.L170)/2
 2109 001e 5B       		.byte	(.L178-.L170)/2
 2110 001f 65       		.byte	(.L177-.L170)/2
 2111 0020 6F       		.byte	(.L176-.L170)/2
 2112 0021 79       		.byte	(.L175-.L170)/2
 2113 0022 82       		.byte	(.L174-.L170)/2
 2114 0023 8C       		.byte	(.L173-.L170)/2
 2115 0024 95       		.byte	(.L172-.L170)/2
 2116 0025 9E       		.byte	(.L171-.L170)/2
 2117 0026 07       		.byte	(.L169-.L170)/2
 2118 0027 00       		.p2align 1
 2119              	.L169:
 314:src/console.c ****   case LASTX: // Last x via RCL L
 315:src/console.c ****     do_now (K11, 0); // RCL
 316:src/console.c ****     do_now (K_RELEASE,0); // release
 317:src/console.c ****     do_now (K15,0); // TAN key
 318:src/console.c ****     r.key_34s = K_RELEASE;
 319:src/console.c ****     r.shift = 0; // set up for release;
 320:src/console.c ****     break;
 321:src/console.c ****   case ONSTO: // flash_backup()
 322:src/console.c ****     flash_backup(OP_SAVE);
 323:src/console.c ****     r = no_key;
 324:src/console.c ****     break;
 325:src/console.c ****   case ONRCL: // flash_restore()
 326:src/console.c ****     flash_restore(OP_LOAD);
 327:src/console.c ****     r = no_key;
 328:src/console.c ****     break;
 329:src/console.c ****   case WRLIB: // save library file
 330:src/console.c ****     save_lib_file(1);
 331:src/console.c ****     r = no_key;
 332:src/console.c ****     break;
 333:src/console.c ****   case LLIB: // load library file
 334:src/console.c ****     load_lib_file(1);
 335:src/console.c ****     r = no_key;
 336:src/console.c ****     break;
 337:src/console.c ****   case WRTST: // save state file
 338:src/console.c ****     save_ram_file(1);
 339:src/console.c ****     r = no_key;
 340:src/console.c ****     break;
 341:src/console.c ****   case LDST:
 342:src/console.c ****     load_ram_file(1);
 343:src/console.c ****     r = no_key;
 344:src/console.c ****     break;
 345:src/console.c ****   case LDPRG:
 346:src/console.c ****     load_prog_file();
 347:src/console.c ****     r = no_key;
 348:src/console.c ****     break;
 349:src/console.c ****   case SVPRG:
ARM GAS  /tmp/ccLcrImZ.s 			page 58


 350:src/console.c ****     save_prog_file();
 351:src/console.c ****     r = no_key;
 352:src/console.c ****     break;
 353:src/console.c ****   case HELP:
 354:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 355:src/console.c ****     r = no_key;
 356:src/console.c ****     break;
 357:src/console.c ****   case DOTS:
 358:src/console.c ****     do_all_dots();
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 362:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 363:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 364:src/console.c ****     r = no_key;
 365:src/console.c ****     break;
 366:src/console.c ****   case DEFMEN:
 367:src/console.c ****     toggle_default_menu();
 2120              		.loc 2 367 5 is_stmt 1 view .LVU511
 2121              	.LBB90:
 2122              	.LBI90:
 100:src/menu.c    ****   if (current_menu == default_menu) {
 2123              		.loc 1 100 6 view .LVU512
 2124              	.LBB91:
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2125              		.loc 1 101 3 view .LVU513
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2126              		.loc 1 101 20 is_stmt 0 view .LVU514
 2127 0028 5D49     		ldr	r1, .L187
 2128 002a 5E4A     		ldr	r2, .L187+4
 2129 002c 0868     		ldr	r0, [r1]
 2130              	.LVL153:
 101:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 2131              		.loc 1 101 6 view .LVU515
 2132 002e 1368     		ldr	r3, [r2]
 2133 0030 8342     		cmp	r3, r0
 2134 0032 00F0A980 		beq	.L186
 2135              	.L184:
 2136              	.LBE91:
 2137              	.LBE90:
 368:src/console.c ****     r = f_shift; // clears f-shift that called this function
 2138              		.loc 2 368 5 is_stmt 1 view .LVU516
 2139              		.loc 2 368 7 is_stmt 0 view .LVU517
 2140 0036 5C4B     		ldr	r3, .L187+8
 2141 0038 93E80300 		ldm	r3, {r0, r1}
 2142 003c 84E80300 		stm	r4, {r0, r1}
 2143 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2144              	.LVL154:
 369:src/console.c ****     break;
 2145              		.loc 2 369 5 is_stmt 1 view .LVU518
 2146 0042 1CE0     		b	.L183
 2147              	.LVL155:
 2148              	.L182:
 315:src/console.c ****     do_now (K_RELEASE,0); // release
 2149              		.loc 2 315 5 view .LVU519
 2150              	.LBB93:
 2151              	.LBI93:
ARM GAS  /tmp/ccLcrImZ.s 			page 59


 305:src/console.c ****   struct _ndmap temp;
 2152              		.loc 2 305 6 view .LVU520
 2153              	.LBB94:
 306:src/console.c ****   temp.key_34s = key;
 2154              		.loc 2 306 3 view .LVU521
 307:src/console.c ****   temp.shift = shift;
 2155              		.loc 2 307 3 view .LVU522
 307:src/console.c ****   temp.shift = shift;
 2156              		.loc 2 307 16 is_stmt 0 view .LVU523
 2157 0044 0723     		movs	r3, #7
 308:src/console.c ****   process_keycode_with_shift (temp);
 2158              		.loc 2 308 14 view .LVU524
 2159 0046 0026     		movs	r6, #0
 307:src/console.c ****   temp.shift = shift;
 2160              		.loc 2 307 16 view .LVU525
 2161 0048 8DF80830 		strb	r3, [sp, #8]
 308:src/console.c ****   process_keycode_with_shift (temp);
 2162              		.loc 2 308 3 is_stmt 1 view .LVU526
 309:src/console.c **** }
 2163              		.loc 2 309 3 is_stmt 0 view .LVU527
 2164 004c 0DF10808 		add	r8, sp, #8
 308:src/console.c ****   process_keycode_with_shift (temp);
 2165              		.loc 2 308 14 view .LVU528
 2166 0050 0396     		str	r6, [sp, #12]
 309:src/console.c **** }
 2167              		.loc 2 309 3 is_stmt 1 view .LVU529
 2168 0052 98E80300 		ldm	r8, {r0, r1}
 2169              	.LVL156:
 309:src/console.c **** }
 2170              		.loc 2 309 3 is_stmt 0 view .LVU530
 2171              	.LBE94:
 2172              	.LBE93:
 2173              	.LBB96:
 2174              	.LBB97:
 307:src/console.c ****   temp.shift = shift;
 2175              		.loc 2 307 16 view .LVU531
 2176 0056 6327     		movs	r7, #99
 2177              	.LBE97:
 2178              	.LBE96:
 2179              	.LBB99:
 2180              	.LBB95:
 309:src/console.c **** }
 2181              		.loc 2 309 3 view .LVU532
 2182 0058 FFF7FEFF 		bl	process_keycode_with_shift
 2183              	.LVL157:
 309:src/console.c **** }
 2184              		.loc 2 309 3 view .LVU533
 2185              	.LBE95:
 2186              	.LBE99:
 316:src/console.c ****     do_now (K15,0); // TAN key
 2187              		.loc 2 316 5 is_stmt 1 view .LVU534
 2188              	.LBB100:
 2189              	.LBI96:
 305:src/console.c ****   struct _ndmap temp;
 2190              		.loc 2 305 6 view .LVU535
 2191              	.LBB98:
 306:src/console.c ****   temp.key_34s = key;
ARM GAS  /tmp/ccLcrImZ.s 			page 60


 2192              		.loc 2 306 3 view .LVU536
 307:src/console.c ****   temp.shift = shift;
 2193              		.loc 2 307 3 view .LVU537
 308:src/console.c ****   process_keycode_with_shift (temp);
 2194              		.loc 2 308 14 is_stmt 0 view .LVU538
 2195 005c 0396     		str	r6, [sp, #12]
 307:src/console.c ****   temp.shift = shift;
 2196              		.loc 2 307 16 view .LVU539
 2197 005e 8DF80870 		strb	r7, [sp, #8]
 308:src/console.c ****   process_keycode_with_shift (temp);
 2198              		.loc 2 308 3 is_stmt 1 view .LVU540
 309:src/console.c **** }
 2199              		.loc 2 309 3 view .LVU541
 2200 0062 98E80300 		ldm	r8, {r0, r1}
 2201 0066 FFF7FEFF 		bl	process_keycode_with_shift
 2202              	.LVL158:
 309:src/console.c **** }
 2203              		.loc 2 309 3 is_stmt 0 view .LVU542
 2204              	.LBE98:
 2205              	.LBE100:
 317:src/console.c ****     r.key_34s = K_RELEASE;
 2206              		.loc 2 317 5 is_stmt 1 view .LVU543
 2207              	.LBB101:
 2208              	.LBI101:
 305:src/console.c ****   struct _ndmap temp;
 2209              		.loc 2 305 6 view .LVU544
 2210              	.LBB102:
 306:src/console.c ****   temp.key_34s = key;
 2211              		.loc 2 306 3 view .LVU545
 307:src/console.c ****   temp.shift = shift;
 2212              		.loc 2 307 3 view .LVU546
 307:src/console.c ****   temp.shift = shift;
 2213              		.loc 2 307 16 is_stmt 0 view .LVU547
 2214 006a 0B23     		movs	r3, #11
 2215 006c 8DF80830 		strb	r3, [sp, #8]
 308:src/console.c ****   process_keycode_with_shift (temp);
 2216              		.loc 2 308 3 is_stmt 1 view .LVU548
 309:src/console.c **** }
 2217              		.loc 2 309 3 view .LVU549
 308:src/console.c ****   process_keycode_with_shift (temp);
 2218              		.loc 2 308 14 is_stmt 0 view .LVU550
 2219 0070 0396     		str	r6, [sp, #12]
 309:src/console.c **** }
 2220              		.loc 2 309 3 view .LVU551
 2221 0072 98E80300 		ldm	r8, {r0, r1}
 2222 0076 FFF7FEFF 		bl	process_keycode_with_shift
 2223              	.LVL159:
 309:src/console.c **** }
 2224              		.loc 2 309 3 view .LVU552
 2225              	.LBE102:
 2226              	.LBE101:
 318:src/console.c ****     r.shift = 0; // set up for release;
 2227              		.loc 2 318 5 is_stmt 1 view .LVU553
 319:src/console.c ****     break;
 2228              		.loc 2 319 5 view .LVU554
 320:src/console.c ****   case ONSTO: // flash_backup()
 2229              		.loc 2 320 5 view .LVU555
ARM GAS  /tmp/ccLcrImZ.s 			page 61


 319:src/console.c ****     break;
 2230              		.loc 2 319 13 is_stmt 0 view .LVU556
 2231 007a 3146     		mov	r1, r6
 318:src/console.c ****     r.shift = 0; // set up for release;
 2232              		.loc 2 318 15 view .LVU557
 2233 007c 3B46     		mov	r3, r7
 2234              	.LVL160:
 2235              	.L183:
 370:src/console.c ****   default:
 371:src/console.c ****     r = no_key;
 372:src/console.c ****   }
 373:src/console.c ****   return r;
 2236              		.loc 2 373 3 is_stmt 1 view .LVU558
 2237              		.loc 2 373 10 is_stmt 0 view .LVU559
 2238 007e 8DF80030 		strb	r3, [sp]
 2239 0082 0191     		str	r1, [sp, #4]
 2240 0084 94E80300 		ldm	r4, {r0, r1}
 2241              	.LVL161:
 2242              		.loc 2 373 10 view .LVU560
 2243 0088 85E80300 		stm	r5, {r0, r1}
 374:src/console.c **** }
 2244              		.loc 2 374 1 view .LVU561
 2245 008c 2846     		mov	r0, r5
 2246 008e 04B0     		add	sp, sp, #16
 2247              		.cfi_remember_state
 2248              		.cfi_def_cfa_offset 24
 2249              		@ sp needed
 2250 0090 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2251              	.LVL162:
 2252              	.L180:
 2253              		.cfi_restore_state
 326:src/console.c ****     r = no_key;
 2254              		.loc 2 326 5 is_stmt 1 view .LVU562
 2255 0094 AE20     		movs	r0, #174
 2256              	.LVL163:
 326:src/console.c ****     r = no_key;
 2257              		.loc 2 326 5 is_stmt 0 view .LVU563
 2258 0096 FFF7FEFF 		bl	flash_restore
 2259              	.LVL164:
 327:src/console.c ****     break;
 2260              		.loc 2 327 5 is_stmt 1 view .LVU564
 327:src/console.c ****     break;
 2261              		.loc 2 327 7 is_stmt 0 view .LVU565
 2262 009a 444B     		ldr	r3, .L187+12
 2263 009c 93E80300 		ldm	r3, {r0, r1}
 2264 00a0 84E80300 		stm	r4, {r0, r1}
 2265 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2266              	.LVL165:
 328:src/console.c ****   case WRLIB: // save library file
 2267              		.loc 2 328 5 is_stmt 1 view .LVU566
 2268 00a6 EAE7     		b	.L183
 2269              	.LVL166:
 2270              	.L179:
 330:src/console.c ****     r = no_key;
 2271              		.loc 2 330 5 view .LVU567
 2272 00a8 0120     		movs	r0, #1
 2273              	.LVL167:
ARM GAS  /tmp/ccLcrImZ.s 			page 62


 330:src/console.c ****     r = no_key;
 2274              		.loc 2 330 5 is_stmt 0 view .LVU568
 2275 00aa FFF7FEFF 		bl	save_lib_file
 2276              	.LVL168:
 331:src/console.c ****     break;
 2277              		.loc 2 331 5 is_stmt 1 view .LVU569
 331:src/console.c ****     break;
 2278              		.loc 2 331 7 is_stmt 0 view .LVU570
 2279 00ae 3F4B     		ldr	r3, .L187+12
 2280 00b0 93E80300 		ldm	r3, {r0, r1}
 2281 00b4 84E80300 		stm	r4, {r0, r1}
 2282 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2283              	.LVL169:
 332:src/console.c ****   case LLIB: // load library file
 2284              		.loc 2 332 5 is_stmt 1 view .LVU571
 2285 00ba E0E7     		b	.L183
 2286              	.LVL170:
 2287              	.L181:
 322:src/console.c ****     r = no_key;
 2288              		.loc 2 322 5 view .LVU572
 2289 00bc AD20     		movs	r0, #173
 2290              	.LVL171:
 322:src/console.c ****     r = no_key;
 2291              		.loc 2 322 5 is_stmt 0 view .LVU573
 2292 00be FFF7FEFF 		bl	flash_backup
 2293              	.LVL172:
 323:src/console.c ****     break;
 2294              		.loc 2 323 5 is_stmt 1 view .LVU574
 323:src/console.c ****     break;
 2295              		.loc 2 323 7 is_stmt 0 view .LVU575
 2296 00c2 3A4B     		ldr	r3, .L187+12
 2297 00c4 93E80300 		ldm	r3, {r0, r1}
 2298 00c8 84E80300 		stm	r4, {r0, r1}
 2299 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2300              	.LVL173:
 324:src/console.c ****   case ONRCL: // flash_restore()
 2301              		.loc 2 324 5 is_stmt 1 view .LVU576
 2302 00ce D6E7     		b	.L183
 2303              	.LVL174:
 2304              	.L178:
 334:src/console.c ****     r = no_key;
 2305              		.loc 2 334 5 view .LVU577
 2306 00d0 0120     		movs	r0, #1
 2307              	.LVL175:
 334:src/console.c ****     r = no_key;
 2308              		.loc 2 334 5 is_stmt 0 view .LVU578
 2309 00d2 FFF7FEFF 		bl	load_lib_file
 2310              	.LVL176:
 335:src/console.c ****     break;
 2311              		.loc 2 335 5 is_stmt 1 view .LVU579
 335:src/console.c ****     break;
 2312              		.loc 2 335 7 is_stmt 0 view .LVU580
 2313 00d6 354B     		ldr	r3, .L187+12
 2314 00d8 93E80300 		ldm	r3, {r0, r1}
 2315 00dc 84E80300 		stm	r4, {r0, r1}
 2316 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2317              	.LVL177:
ARM GAS  /tmp/ccLcrImZ.s 			page 63


 336:src/console.c ****   case WRTST: // save state file
 2318              		.loc 2 336 5 is_stmt 1 view .LVU581
 2319 00e2 CCE7     		b	.L183
 2320              	.LVL178:
 2321              	.L177:
 338:src/console.c ****     r = no_key;
 2322              		.loc 2 338 5 view .LVU582
 2323 00e4 0120     		movs	r0, #1
 2324              	.LVL179:
 338:src/console.c ****     r = no_key;
 2325              		.loc 2 338 5 is_stmt 0 view .LVU583
 2326 00e6 FFF7FEFF 		bl	save_ram_file
 2327              	.LVL180:
 339:src/console.c ****     break;
 2328              		.loc 2 339 5 is_stmt 1 view .LVU584
 339:src/console.c ****     break;
 2329              		.loc 2 339 7 is_stmt 0 view .LVU585
 2330 00ea 304B     		ldr	r3, .L187+12
 2331 00ec 93E80300 		ldm	r3, {r0, r1}
 2332 00f0 84E80300 		stm	r4, {r0, r1}
 2333 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2334              	.LVL181:
 340:src/console.c ****   case LDST:
 2335              		.loc 2 340 5 is_stmt 1 view .LVU586
 2336 00f6 C2E7     		b	.L183
 2337              	.LVL182:
 2338              	.L176:
 342:src/console.c ****     r = no_key;
 2339              		.loc 2 342 5 view .LVU587
 2340 00f8 0120     		movs	r0, #1
 2341              	.LVL183:
 342:src/console.c ****     r = no_key;
 2342              		.loc 2 342 5 is_stmt 0 view .LVU588
 2343 00fa FFF7FEFF 		bl	load_ram_file
 2344              	.LVL184:
 343:src/console.c ****     break;
 2345              		.loc 2 343 5 is_stmt 1 view .LVU589
 343:src/console.c ****     break;
 2346              		.loc 2 343 7 is_stmt 0 view .LVU590
 2347 00fe 2B4B     		ldr	r3, .L187+12
 2348 0100 93E80300 		ldm	r3, {r0, r1}
 2349 0104 84E80300 		stm	r4, {r0, r1}
 2350 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2351              	.LVL185:
 344:src/console.c ****   case LDPRG:
 2352              		.loc 2 344 5 is_stmt 1 view .LVU591
 2353 010a B8E7     		b	.L183
 2354              	.LVL186:
 2355              	.L175:
 346:src/console.c ****     r = no_key;
 2356              		.loc 2 346 5 view .LVU592
 2357 010c FFF7FEFF 		bl	load_prog_file
 2358              	.LVL187:
 347:src/console.c ****     break;
 2359              		.loc 2 347 5 view .LVU593
 347:src/console.c ****     break;
 2360              		.loc 2 347 7 is_stmt 0 view .LVU594
ARM GAS  /tmp/ccLcrImZ.s 			page 64


 2361 0110 264B     		ldr	r3, .L187+12
 2362 0112 93E80300 		ldm	r3, {r0, r1}
 2363 0116 84E80300 		stm	r4, {r0, r1}
 2364 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2365              	.LVL188:
 348:src/console.c ****   case SVPRG:
 2366              		.loc 2 348 5 is_stmt 1 view .LVU595
 2367 011c AFE7     		b	.L183
 2368              	.LVL189:
 2369              	.L174:
 354:src/console.c ****     r = no_key;
 2370              		.loc 2 354 5 view .LVU596
 2371 011e 244B     		ldr	r3, .L187+16
 2372 0120 2448     		ldr	r0, .L187+20
 2373              	.LVL190:
 354:src/console.c ****     r = no_key;
 2374              		.loc 2 354 5 is_stmt 0 view .LVU597
 2375 0122 9847     		blx	r3
 2376              	.LVL191:
 355:src/console.c ****     break;
 2377              		.loc 2 355 5 is_stmt 1 view .LVU598
 355:src/console.c ****     break;
 2378              		.loc 2 355 7 is_stmt 0 view .LVU599
 2379 0124 214B     		ldr	r3, .L187+12
 2380 0126 93E80300 		ldm	r3, {r0, r1}
 2381 012a 84E80300 		stm	r4, {r0, r1}
 2382 012e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2383              	.LVL192:
 356:src/console.c ****   case DOTS:
 2384              		.loc 2 356 5 is_stmt 1 view .LVU600
 2385 0130 A5E7     		b	.L183
 2386              	.LVL193:
 2387              	.L173:
 350:src/console.c ****     r = no_key;
 2388              		.loc 2 350 5 view .LVU601
 2389 0132 FFF7FEFF 		bl	save_prog_file
 2390              	.LVL194:
 351:src/console.c ****     break;
 2391              		.loc 2 351 5 view .LVU602
 351:src/console.c ****     break;
 2392              		.loc 2 351 7 is_stmt 0 view .LVU603
 2393 0136 1D4B     		ldr	r3, .L187+12
 2394 0138 93E80300 		ldm	r3, {r0, r1}
 2395 013c 84E80300 		stm	r4, {r0, r1}
 2396 0140 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2397              	.LVL195:
 352:src/console.c ****   case HELP:
 2398              		.loc 2 352 5 is_stmt 1 view .LVU604
 2399 0142 9CE7     		b	.L183
 2400              	.LVL196:
 2401              	.L172:
 358:src/console.c ****     r = no_key;
 2402              		.loc 2 358 5 view .LVU605
 2403 0144 FFF7FEFF 		bl	do_all_dots
 2404              	.LVL197:
 359:src/console.c ****     break;
 2405              		.loc 2 359 5 view .LVU606
ARM GAS  /tmp/ccLcrImZ.s 			page 65


 359:src/console.c ****     break;
 2406              		.loc 2 359 7 is_stmt 0 view .LVU607
 2407 0148 184B     		ldr	r3, .L187+12
 2408 014a 93E80300 		ldm	r3, {r0, r1}
 2409 014e 84E80300 		stm	r4, {r0, r1}
 2410 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2411              	.LVL198:
 360:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 2412              		.loc 2 360 5 is_stmt 1 view .LVU608
 2413 0154 93E7     		b	.L183
 2414              	.LVL199:
 2415              	.L171:
 362:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 2416              		.loc 2 362 5 view .LVU609
 2417              	.LBB103:
 2418              	.LBI103:
 305:src/console.c ****   struct _ndmap temp;
 2419              		.loc 2 305 6 view .LVU610
 2420              	.LBB104:
 306:src/console.c ****   temp.key_34s = key;
 2421              		.loc 2 306 3 view .LVU611
 307:src/console.c ****   temp.shift = shift;
 2422              		.loc 2 307 3 view .LVU612
 307:src/console.c ****   temp.shift = shift;
 2423              		.loc 2 307 16 is_stmt 0 view .LVU613
 2424 0156 6323     		movs	r3, #99
 308:src/console.c ****   process_keycode_with_shift (temp);
 2425              		.loc 2 308 14 view .LVU614
 2426 0158 0027     		movs	r7, #0
 307:src/console.c ****   temp.shift = shift;
 2427              		.loc 2 307 16 view .LVU615
 2428 015a 8DF80830 		strb	r3, [sp, #8]
 308:src/console.c ****   process_keycode_with_shift (temp);
 2429              		.loc 2 308 3 is_stmt 1 view .LVU616
 308:src/console.c ****   process_keycode_with_shift (temp);
 2430              		.loc 2 308 14 is_stmt 0 view .LVU617
 2431 015e 0397     		str	r7, [sp, #12]
 309:src/console.c **** }
 2432              		.loc 2 309 3 is_stmt 1 view .LVU618
 2433 0160 02AE     		add	r6, sp, #8
 2434 0162 96E80300 		ldm	r6, {r0, r1}
 2435              	.LVL200:
 309:src/console.c **** }
 2436              		.loc 2 309 3 is_stmt 0 view .LVU619
 2437 0166 FFF7FEFF 		bl	process_keycode_with_shift
 2438              	.LVL201:
 309:src/console.c **** }
 2439              		.loc 2 309 3 view .LVU620
 2440              	.LBE104:
 2441              	.LBE103:
 363:src/console.c ****     r = no_key;
 2442              		.loc 2 363 5 is_stmt 1 view .LVU621
 2443              	.LBB105:
 2444              	.LBI105:
 305:src/console.c ****   struct _ndmap temp;
 2445              		.loc 2 305 6 view .LVU622
 2446              	.LBB106:
ARM GAS  /tmp/ccLcrImZ.s 			page 66


 306:src/console.c ****   temp.key_34s = key;
 2447              		.loc 2 306 3 view .LVU623
 307:src/console.c ****   temp.shift = shift;
 2448              		.loc 2 307 3 view .LVU624
 307:src/console.c ****   temp.shift = shift;
 2449              		.loc 2 307 16 is_stmt 0 view .LVU625
 2450 016a 3323     		movs	r3, #51
 2451 016c 8DF80830 		strb	r3, [sp, #8]
 308:src/console.c ****   process_keycode_with_shift (temp);
 2452              		.loc 2 308 3 is_stmt 1 view .LVU626
 309:src/console.c **** }
 2453              		.loc 2 309 3 view .LVU627
 308:src/console.c ****   process_keycode_with_shift (temp);
 2454              		.loc 2 308 14 is_stmt 0 view .LVU628
 2455 0170 0397     		str	r7, [sp, #12]
 309:src/console.c **** }
 2456              		.loc 2 309 3 view .LVU629
 2457 0172 96E80300 		ldm	r6, {r0, r1}
 2458 0176 FFF7FEFF 		bl	process_keycode_with_shift
 2459              	.LVL202:
 309:src/console.c **** }
 2460              		.loc 2 309 3 view .LVU630
 2461              	.LBE106:
 2462              	.LBE105:
 364:src/console.c ****     break;
 2463              		.loc 2 364 5 is_stmt 1 view .LVU631
 364:src/console.c ****     break;
 2464              		.loc 2 364 7 is_stmt 0 view .LVU632
 2465 017a 0C4B     		ldr	r3, .L187+12
 2466 017c 93E80300 		ldm	r3, {r0, r1}
 2467 0180 84E80300 		stm	r4, {r0, r1}
 2468 0184 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2469              	.LVL203:
 365:src/console.c ****   case DEFMEN:
 2470              		.loc 2 365 5 is_stmt 1 view .LVU633
 2471 0186 7AE7     		b	.L183
 2472              	.LVL204:
 2473              	.L186:
 2474              	.LBB107:
 2475              	.LBB92:
 102:src/menu.c    ****   }
 2476              		.loc 1 102 5 view .LVU634
 102:src/menu.c    ****   }
 2477              		.loc 1 102 38 is_stmt 0 view .LVU635
 2478 0188 C3F10F03 		rsb	r3, r3, #15
 102:src/menu.c    ****   }
 2479              		.loc 1 102 33 view .LVU636
 2480 018c 0B60     		str	r3, [r1]
 102:src/menu.c    ****   }
 2481              		.loc 1 102 18 view .LVU637
 2482 018e 1360     		str	r3, [r2]
 2483 0190 51E7     		b	.L184
 2484              	.LVL205:
 2485              	.L168:
 102:src/menu.c    ****   }
 2486              		.loc 1 102 18 view .LVU638
 2487              	.LBE92:
ARM GAS  /tmp/ccLcrImZ.s 			page 67


 2488              	.LBE107:
 371:src/console.c ****   }
 2489              		.loc 2 371 5 is_stmt 1 view .LVU639
 371:src/console.c ****   }
 2490              		.loc 2 371 7 is_stmt 0 view .LVU640
 2491 0192 064B     		ldr	r3, .L187+12
 2492 0194 93E80300 		ldm	r3, {r0, r1}
 2493              	.LVL206:
 371:src/console.c ****   }
 2494              		.loc 2 371 7 view .LVU641
 2495 0198 84E80300 		stm	r4, {r0, r1}
 2496 019c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2497              	.LVL207:
 371:src/console.c ****   }
 2498              		.loc 2 371 7 view .LVU642
 2499 019e 6EE7     		b	.L183
 2500              	.L188:
 2501              		.align	2
 2502              	.L187:
 2503 01a0 00000000 		.word	.LANCHOR2
 2504 01a4 00000000 		.word	.LANCHOR1
 2505 01a8 00000000 		.word	.LANCHOR9
 2506 01ac 00000000 		.word	.LANCHOR8
 2507 01b0 49040008 		.word	134218825
 2508 01b4 00000000 		.word	.LC12
 2509              		.cfi_endproc
 2510              	.LFE27:
 2512              		.section	.text.program_main,"ax",%progbits
 2513              		.align	1
 2514              		.p2align 2,,3
 2515              		.global	program_main
 2516              		.syntax unified
 2517              		.thumb
 2518              		.thumb_func
 2519              		.fpu fpv4-sp-d16
 2521              	program_main:
 2522              	.LFB28:
 375:src/console.c **** 
 376:src/console.c **** void program_main(){
 2523              		.loc 2 376 20 is_stmt 1 view -0
 2524              		.cfi_startproc
 2525              		@ args = 0, pretend = 0, frame = 16
 2526              		@ frame_needed = 0, uses_anonymous_args = 0
 377:src/console.c ****   int c;
 2527              		.loc 2 377 3 view .LVU644
 378:src/console.c ****   struct _ndmap remapped;
 2528              		.loc 2 378 3 view .LVU645
 379:src/console.c **** 
 380:src/console.c ****   init_mem();
 2529              		.loc 2 380 3 view .LVU646
 376:src/console.c ****   int c;
 2530              		.loc 2 376 20 is_stmt 0 view .LVU647
 2531 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2532              		.cfi_def_cfa_offset 32
 2533              		.cfi_offset 4, -32
 2534              		.cfi_offset 5, -28
 2535              		.cfi_offset 6, -24
ARM GAS  /tmp/ccLcrImZ.s 			page 68


 2536              		.cfi_offset 7, -20
 2537              		.cfi_offset 8, -16
 2538              		.cfi_offset 9, -12
 2539              		.cfi_offset 10, -8
 2540              		.cfi_offset 14, -4
 2541 0004 84B0     		sub	sp, sp, #16
 2542              		.cfi_def_cfa_offset 48
 2543              		.loc 2 380 3 view .LVU648
 2544 0006 FFF7FEFF 		bl	init_mem
 2545              	.LVL208:
 381:src/console.c ****   init_RegionTab();
 2546              		.loc 2 381 3 is_stmt 1 view .LVU649
 2547 000a FFF7FEFF 		bl	init_RegionTab
 2548              	.LVL209:
 382:src/console.c ****   init_34s();
 2549              		.loc 2 382 3 view .LVU650
 2550 000e FFF7FEFF 		bl	init_34s
 2551              	.LVL210:
 383:src/console.c ****   State2.flags = 1;  
 2552              		.loc 2 383 3 view .LVU651
 2553              		.loc 2 383 16 is_stmt 0 view .LVU652
 2554 0012 AD4A     		ldr	r2, .L289
 2555 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 2556 0016 43F00103 		orr	r3, r3, #1
 2557 001a 1376     		strb	r3, [r2, #24]
 384:src/console.c ****   check_create_wp34sdir();
 2558              		.loc 2 384 3 is_stmt 1 view .LVU653
 2559 001c FFF7FEFF 		bl	check_create_wp34sdir
 2560              	.LVL211:
 385:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 2561              		.loc 2 385 3 view .LVU654
 2562              		.loc 2 385 8 is_stmt 0 view .LVU655
 2563 0020 0020     		movs	r0, #0
 2564 0022 FFF7FEFF 		bl	load_ram_file
 2565              	.LVL212:
 2566              		.loc 2 385 6 view .LVU656
 2567 0026 08B9     		cbnz	r0, .L190
 2568              		.loc 2 385 26 is_stmt 1 discriminator 1 view .LVU657
 2569              		.loc 2 385 34 is_stmt 0 discriminator 1 view .LVU658
 2570 0028 A84B     		ldr	r3, .L289+4
 2571 002a 1860     		str	r0, [r3]
 2572              	.L190:
 386:src/console.c ****   load_backup_file(0);
 2573              		.loc 2 386 3 is_stmt 1 view .LVU659
 387:src/console.c ****   load_lib_file(0);
 388:src/console.c ****   t20->newln = 0;
 2574              		.loc 2 388 3 is_stmt 0 view .LVU660
 2575 002c A84C     		ldr	r4, .L289+8
 2576              	.LBB123:
 2577              	.LBB124:
 111:src/menu.c    **** }
 2578              		.loc 1 111 3 view .LVU661
 2579 002e A94E     		ldr	r6, .L289+12
 2580              	.LBE124:
 2581              	.LBE123:
 389:src/console.c ****   t20->lnfill = 0;
 390:src/console.c ****   t20->fixed = 1;
ARM GAS  /tmp/ccLcrImZ.s 			page 69


 391:src/console.c ****   t20->xspc = -2;
 392:src/console.c ****   t20->bgfill = 0;
 393:src/console.c ****   run_menu_item_app = run_menu_item;
 394:src/console.c ****   menu_line_str_app = menu_line_str;
 395:src/console.c **** 
 396:src/console.c ****   display();
 397:src/console.c ****   display_current_menu();
 398:src/console.c ****   lcd_refresh();
 399:src/console.c ****   JustDisplayed = 0;
 400:src/console.c ****   /*
 401:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 402:src/console.c ****     Sleeps peacefully while waiting for a key.
 403:src/console.c ****     Handles (in principle!) turning off and on.
 404:src/console.c ****     =================
 405:src/console.c ****     Main event loop
 406:src/console.c ****     =================
 407:src/console.c **** 
 408:src/console.c ****     Status flags:
 409:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 410:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 411:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 412:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 413:src/console.c ****   */
 414:src/console.c ****   for(;;) {
 415:src/console.c **** 
 416:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 417:src/console.c ****       {
 418:src/console.c **** 	CLR_ST(STAT_RUNNING);
 419:src/console.c **** 	sys_sleep();
 420:src/console.c ****       }
 421:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 2582              		.loc 2 421 35 view .LVU662
 2583 0030 A94F     		ldr	r7, .L289+16
 422:src/console.c ****     {
 423:src/console.c ****       CLR_ST(STAT_RUNNING);
 424:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2584              		.loc 2 424 7 view .LVU663
 2585 0032 DFF81C83 		ldr	r8, .L289+136
 386:src/console.c ****   load_lib_file(0);
 2586              		.loc 2 386 3 view .LVU664
 2587 0036 0020     		movs	r0, #0
 2588 0038 FFF7FEFF 		bl	load_backup_file
 2589              	.LVL213:
 387:src/console.c ****   t20->newln = 0;
 2590              		.loc 2 387 3 is_stmt 1 view .LVU665
 2591 003c 0020     		movs	r0, #0
 2592 003e FFF7FEFF 		bl	load_lib_file
 2593              	.LVL214:
 388:src/console.c ****   t20->lnfill = 0;
 2594              		.loc 2 388 3 view .LVU666
 2595 0042 236B     		ldr	r3, [r4, #48]
 389:src/console.c ****   t20->fixed = 1;
 2596              		.loc 2 389 3 view .LVU667
 390:src/console.c ****   t20->xspc = -2;
 2597              		.loc 2 390 3 view .LVU668
 393:src/console.c ****   menu_line_str_app = menu_line_str;
 2598              		.loc 2 393 21 is_stmt 0 view .LVU669
ARM GAS  /tmp/ccLcrImZ.s 			page 70


 2599 0044 A54A     		ldr	r2, .L289+20
 390:src/console.c ****   t20->xspc = -2;
 2600              		.loc 2 390 14 view .LVU670
 2601 0046 0121     		movs	r1, #1
 2602 0048 1974     		strb	r1, [r3, #16]
 391:src/console.c ****   t20->bgfill = 0;
 2603              		.loc 2 391 3 is_stmt 1 view .LVU671
 392:src/console.c ****   run_menu_item_app = run_menu_item;
 2604              		.loc 2 392 15 is_stmt 0 view .LVU672
 2605 004a 0025     		movs	r5, #0
 391:src/console.c ****   t20->bgfill = 0;
 2606              		.loc 2 391 13 view .LVU673
 2607 004c FE21     		movs	r1, #254
 2608 004e 9973     		strb	r1, [r3, #14]
 392:src/console.c ****   run_menu_item_app = run_menu_item;
 2609              		.loc 2 392 3 is_stmt 1 view .LVU674
 392:src/console.c ****   run_menu_item_app = run_menu_item;
 2610              		.loc 2 392 15 is_stmt 0 view .LVU675
 2611 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 388:src/console.c ****   t20->lnfill = 0;
 2612              		.loc 2 388 14 view .LVU676
 2613 0052 1D75     		strb	r5, [r3, #20]
 393:src/console.c ****   menu_line_str_app = menu_line_str;
 2614              		.loc 2 393 3 is_stmt 1 view .LVU677
 394:src/console.c **** 
 2615              		.loc 2 394 21 is_stmt 0 view .LVU678
 2616 0054 A24B     		ldr	r3, .L289+24
 393:src/console.c ****   menu_line_str_app = menu_line_str;
 2617              		.loc 2 393 21 view .LVU679
 2618 0056 E260     		str	r2, [r4, #12]
 394:src/console.c **** 
 2619              		.loc 2 394 3 is_stmt 1 view .LVU680
 394:src/console.c **** 
 2620              		.loc 2 394 21 is_stmt 0 view .LVU681
 2621 0058 2361     		str	r3, [r4, #16]
 396:src/console.c ****   display_current_menu();
 2622              		.loc 2 396 3 is_stmt 1 view .LVU682
 2623 005a FFF7FEFF 		bl	display
 2624              	.LVL215:
 397:src/console.c ****   lcd_refresh();
 2625              		.loc 2 397 3 view .LVU683
 2626              	.LBB126:
 2627              	.LBI123:
 110:src/menu.c    ****   display_menu (current_menu);
 2628              		.loc 1 110 6 view .LVU684
 2629              	.LBB125:
 111:src/menu.c    **** }
 2630              		.loc 1 111 3 view .LVU685
 2631 005e 3068     		ldr	r0, [r6]
 2632 0060 FFF7FEFF 		bl	display_menu
 2633              	.LVL216:
 2634              	.LBE125:
 2635              	.LBE126:
 398:src/console.c ****   JustDisplayed = 0;
 2636              		.loc 2 398 3 view .LVU686
 2637 0064 9F4B     		ldr	r3, .L289+28
 2638 0066 9847     		blx	r3
ARM GAS  /tmp/ccLcrImZ.s 			page 71


 2639              	.LVL217:
 399:src/console.c ****   /*
 2640              		.loc 2 399 3 view .LVU687
 399:src/console.c ****   /*
 2641              		.loc 2 399 17 is_stmt 0 view .LVU688
 2642 0068 9F4B     		ldr	r3, .L289+32
 2643 006a 1D60     		str	r5, [r3]
 2644              	.L191:
 414:src/console.c **** 
 2645              		.loc 2 414 3 is_stmt 1 view .LVU689
 416:src/console.c ****       {
 2646              		.loc 2 416 5 view .LVU690
 416:src/console.c ****       {
 2647              		.loc 2 416 10 is_stmt 0 view .LVU691
 2648 006c 2368     		ldr	r3, [r4]
 416:src/console.c ****       {
 2649              		.loc 2 416 8 view .LVU692
 2650 006e 9D05     		lsls	r5, r3, #22
 2651 0070 40F19380 		bpl	.L192
 416:src/console.c ****       {
 2652              		.loc 2 416 30 discriminator 1 view .LVU693
 2653 0074 2368     		ldr	r3, [r4]
 416:src/console.c ****       {
 2654              		.loc 2 416 27 discriminator 1 view .LVU694
 2655 0076 5807     		lsls	r0, r3, #29
 2656 0078 40F18F80 		bpl	.L192
 418:src/console.c **** 	sys_sleep();
 2657              		.loc 2 418 2 is_stmt 1 view .LVU695
 2658 007c 2368     		ldr	r3, [r4]
 419:src/console.c ****       }
 2659              		.loc 2 419 2 is_stmt 0 view .LVU696
 2660 007e 9B4A     		ldr	r2, .L289+36
 418:src/console.c **** 	sys_sleep();
 2661              		.loc 2 418 2 view .LVU697
 2662 0080 23F00203 		bic	r3, r3, #2
 2663 0084 2360     		str	r3, [r4]
 419:src/console.c ****       }
 2664              		.loc 2 419 2 is_stmt 1 view .LVU698
 2665 0086 9047     		blx	r2
 2666              	.LVL218:
 2667              	.L193:
 425:src/console.c ****       sys_sleep();
 426:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 427:src/console.c **** 	key_push (K_HEARTBEAT);
 428:src/console.c **** 	if (Pause > 0) Pause--;
 429:src/console.c ****       }
 430:src/console.c ****       sys_timer_disable(0); // stop timer
 431:src/console.c ****     }
 432:src/console.c ****     
 433:src/console.c ****     // Wakeup in off state or going to sleep
 434:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 2668              		.loc 2 434 5 view .LVU699
 2669              		.loc 2 434 9 is_stmt 0 view .LVU700
 2670 0088 2368     		ldr	r3, [r4]
 2671              		.loc 2 434 8 view .LVU701
 2672 008a 9905     		lsls	r1, r3, #22
 2673 008c 00F1AC80 		bmi	.L199
ARM GAS  /tmp/ccLcrImZ.s 			page 72


 2674              	.L282:
 2675              		.loc 2 434 29 discriminator 1 view .LVU702
 2676 0090 2368     		ldr	r3, [r4]
 2677              		.loc 2 434 26 discriminator 1 view .LVU703
 2678 0092 5A07     		lsls	r2, r3, #29
 2679 0094 00F1A880 		bmi	.L199
 435:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 436:src/console.c ****         // Going to off mode
 437:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 438:src/console.c ****         draw_power_off_image(1);
 439:src/console.c **** 
 440:src/console.c ****         LCD_power_off(0);
 441:src/console.c ****         SET_ST(STAT_SUSPENDED);
 442:src/console.c ****         SET_ST(STAT_OFF);
 443:src/console.c ****       }
 444:src/console.c ****       // Already in OFF -> just continue to sleep above
 445:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 446:src/console.c ****       // thus reaching the sleep()
 447:src/console.c ****     }
 448:src/console.c **** 
 449:src/console.c ****     // Well, we are woken-up
 450:src/console.c ****     SET_ST(STAT_RUNNING);
 2680              		.loc 2 450 5 is_stmt 1 view .LVU704
 2681 0098 2368     		ldr	r3, [r4]
 2682 009a 43F00203 		orr	r3, r3, #2
 2683 009e 2360     		str	r3, [r4]
 451:src/console.c **** 
 452:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 453:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 2684              		.loc 2 453 5 view .LVU705
 2685 00a0 2368     		ldr	r3, [r4]
 2686 00a2 23F00403 		bic	r3, r3, #4
 2687 00a6 2360     		str	r3, [r4]
 454:src/console.c **** 
 455:src/console.c ****     // Get up from OFF state
 456:src/console.c ****     if ( ST(STAT_OFF) ) {
 2688              		.loc 2 456 5 view .LVU706
 2689              		.loc 2 456 10 is_stmt 0 view .LVU707
 2690 00a8 2368     		ldr	r3, [r4]
 2691              		.loc 2 456 8 view .LVU708
 2692 00aa DB06     		lsls	r3, r3, #27
 2693 00ac 0ED5     		bpl	.L204
 457:src/console.c ****       LCD_power_on();
 2694              		.loc 2 457 7 is_stmt 1 view .LVU709
 2695 00ae 904B     		ldr	r3, .L289+40
 2696 00b0 9847     		blx	r3
 2697              	.LVL219:
 458:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 2698              		.loc 2 458 7 view .LVU710
 2699 00b2 904B     		ldr	r3, .L289+44
 2700 00b4 9847     		blx	r3
 2701              	.LVL220:
 459:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 2702              		.loc 2 459 7 view .LVU711
 2703 00b6 904B     		ldr	r3, .L289+48
 2704 00b8 9847     		blx	r3
 2705              	.LVL221:
ARM GAS  /tmp/ccLcrImZ.s 			page 73


 460:src/console.c **** 
 461:src/console.c ****       CLR_ST(STAT_OFF);
 2706              		.loc 2 461 7 view .LVU712
 2707 00ba 2368     		ldr	r3, [r4]
 462:src/console.c **** 
 463:src/console.c ****       if ( !lcd_get_buf_cleared() )
 2708              		.loc 2 463 13 is_stmt 0 view .LVU713
 2709 00bc 8F4A     		ldr	r2, .L289+52
 461:src/console.c **** 
 2710              		.loc 2 461 7 view .LVU714
 2711 00be 23F01003 		bic	r3, r3, #16
 2712 00c2 2360     		str	r3, [r4]
 2713              		.loc 2 463 7 is_stmt 1 view .LVU715
 2714              		.loc 2 463 13 is_stmt 0 view .LVU716
 2715 00c4 9047     		blx	r2
 2716              	.LVL222:
 2717              		.loc 2 463 10 view .LVU717
 2718 00c6 08B9     		cbnz	r0, .L204
 464:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 2719              		.loc 2 464 9 is_stmt 1 view .LVU718
 2720 00c8 8D4B     		ldr	r3, .L289+56
 2721 00ca 9847     		blx	r3
 2722              	.LVL223:
 2723              	.L204:
 465:src/console.c ****     }
 466:src/console.c **** 
 467:src/console.c ****     // Key is ready -> clear auto off timer
 468:src/console.c ****     //    if ( !key_empty() )
 469:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 470:src/console.c ****     // Fetch the key
 471:src/console.c ****     //  < 0 -> No key event
 472:src/console.c ****     //  > 0 -> Key pressed
 473:src/console.c ****     // == 0 -> Key released
 474:src/console.c ****     c = key_pop();
 2724              		.loc 2 474 5 view .LVU719
 2725              		.loc 2 474 9 is_stmt 0 view .LVU720
 2726 00cc 8D4B     		ldr	r3, .L289+60
 2727 00ce 9847     		blx	r3
 2728              	.LVL224:
 475:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2729              		.loc 2 475 8 view .LVU721
 2730 00d0 6228     		cmp	r0, #98
 474:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2731              		.loc 2 474 9 view .LVU722
 2732 00d2 0546     		mov	r5, r0
 2733              	.LVL225:
 2734              		.loc 2 475 5 is_stmt 1 view .LVU723
 2735              		.loc 2 475 8 is_stmt 0 view .LVU724
 2736 00d4 00F0A280 		beq	.L206
 2737              		.loc 2 475 29 discriminator 1 view .LVU725
 2738 00d8 0028     		cmp	r0, #0
 2739 00da 40F39C80 		ble	.L207
 476:src/console.c ****       reset_auto_off();
 2740              		.loc 2 476 7 is_stmt 1 view .LVU726
 2741 00de 8A4B     		ldr	r3, .L289+64
 2742 00e0 9847     		blx	r3
 2743              	.LVL226:
ARM GAS  /tmp/ccLcrImZ.s 			page 74


 477:src/console.c ****       start_key_timer();
 2744              		.loc 2 477 7 view .LVU727
 2745              	.LBB127:
 2746              	.LBI127:
 247:src/console.c ****     start_ticks = get_rtc_ticks();
 2747              		.loc 2 247 6 view .LVU728
 2748              	.LBB128:
 248:src/console.c **** }
 2749              		.loc 2 248 5 view .LVU729
 248:src/console.c **** }
 2750              		.loc 2 248 19 is_stmt 0 view .LVU730
 2751 00e2 8A4B     		ldr	r3, .L289+68
 2752 00e4 9847     		blx	r3
 2753              	.LVL227:
 248:src/console.c **** }
 2754              		.loc 2 248 17 view .LVU731
 2755 00e6 8A4B     		ldr	r3, .L289+72
 2756              	.LBE128:
 2757              	.LBE127:
 2758              	.LBB130:
 2759              	.LBB131:
  61:src/console.c **** 
 2760              		.loc 2 61 6 view .LVU732
 2761 00e8 632D     		cmp	r5, #99
 2762              	.LBE131:
 2763              	.LBE130:
 2764              	.LBB141:
 2765              	.LBB129:
 248:src/console.c **** }
 2766              		.loc 2 248 17 view .LVU733
 2767 00ea 1860     		str	r0, [r3]
 2768              	.LBE129:
 2769              	.LBE141:
 478:src/console.c ****     }
 479:src/console.c ****     if (c >= 0) {
 2770              		.loc 2 479 5 is_stmt 1 view .LVU734
 480:src/console.c ****       remapped = remap(c);
 2771              		.loc 2 480 7 view .LVU735
 2772              	.LVL228:
 2773              	.LBB142:
 2774              	.LBI130:
  53:src/console.c **** 
 2775              		.loc 2 53 22 view .LVU736
 2776              	.LBB133:
  55:src/console.c **** 
 2777              		.loc 2 55 3 view .LVU737
 2778              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 2779              		.loc 3 1 1 view .LVU738
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
ARM GAS  /tmp/ccLcrImZ.s 			page 75


  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 2780              		.loc 3 59 3 view .LVU739
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
ARM GAS  /tmp/ccLcrImZ.s 			page 76


  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU, 14}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  96:src/keytran.c ****     {K_NOP, 0}, // no function
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 2781              		.loc 3 117 3 view .LVU740
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
ARM GAS  /tmp/ccLcrImZ.s 			page 77


 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 2782              		.loc 3 175 1 view .LVU741
 176:src/keytran.c ****     {K_RELEASE, -1},
 177:src/keytran.c ****     // Top row of DM42 1--6
ARM GAS  /tmp/ccLcrImZ.s 			page 78


 178:src/keytran.c ****     {K00, -1},
 179:src/keytran.c ****     {K01, -1},
 180:src/keytran.c ****     {K02, -1},
 181:src/keytran.c ****     {K03, -1},
 182:src/keytran.c ****     {K04, -1},
 183:src/keytran.c ****     {K05, -1},
 184:src/keytran.c ****     // Next row of DM42 7--12
 185:src/keytran.c ****     {K10, -1},
 186:src/keytran.c ****     {K11, -1},
 187:src/keytran.c ****     {K12, -1},
 188:src/keytran.c ****     {K13, -1},
 189:src/keytran.c ****     {K14, -1},
 190:src/keytran.c ****     {K15, -1},
 191:src/keytran.c ****     // Third row of DM42 13--17
 192:src/keytran.c ****     {K20, -1},
 193:src/keytran.c ****     {K21, -1},
 194:src/keytran.c ****     {K22, -1},
 195:src/keytran.c ****     {K23, -1},
 196:src/keytran.c ****     {K24, -1},
 197:src/keytran.c ****     // Fourth row of DM42 18--22
 198:src/keytran.c ****     {K30, -1},
 199:src/keytran.c ****     {K31, -1},
 200:src/keytran.c ****     {K32, -1},
 201:src/keytran.c ****     {K33, -1},
 202:src/keytran.c ****     {K34, -1},
 203:src/keytran.c ****     // Fifth row of DM42 23--27
 204:src/keytran.c ****     {K40, -1},
 205:src/keytran.c ****     {K41, -1},
 206:src/keytran.c ****     {K42, -1},
 207:src/keytran.c ****     {K43, -1},
 208:src/keytran.c ****     {K44, -1},
 209:src/keytran.c ****     // Sixth row of DM42 28--32
 210:src/keytran.c ****     {K50, -1},
 211:src/keytran.c ****     {K51, -1},
 212:src/keytran.c ****     {K52, -1},
 213:src/keytran.c ****     {K53, -1},
 214:src/keytran.c ****     {K54, -1},
 215:src/keytran.c ****     // Last row of DM42 33--37
 216:src/keytran.c ****     {K60, -1},
 217:src/keytran.c ****     {K61, -1},
 218:src/keytran.c ****     {K62, -1},
 219:src/keytran.c ****     {K63, -1},
 220:src/keytran.c ****     {K64, -1},
 221:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 222:src/keytran.c ****     {K_NOP, -1},
 223:src/keytran.c ****     {K_NOP, -1},
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 227:src/keytran.c ****     {K_CMPLX, -1},
 228:src/keytran.c ****     {K_NOP, -1},
 229:src/keytran.c ****     {K_NOP, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c **** };
 232:src/keytran.c **** 
 233:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 2783              		.loc 3 233 1 view .LVU742
ARM GAS  /tmp/ccLcrImZ.s 			page 79


  59:src/console.c **** 
 2784              		.loc 2 59 3 view .LVU743
  61:src/console.c **** 
 2785              		.loc 2 61 3 view .LVU744
  61:src/console.c **** 
 2786              		.loc 2 61 6 is_stmt 0 view .LVU745
 2787 00ec 00F06281 		beq	.L271
  63:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 2788              		.loc 2 63 3 is_stmt 1 view .LVU746
  63:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 2789              		.loc 2 63 6 is_stmt 0 view .LVU747
 2790 00f0 2C2D     		cmp	r5, #44
 2791 00f2 00F02F81 		beq	.L245
 2792              	.LVL229:
 2793              	.L244:
  68:src/console.c ****     return mapping_running[c];
 2794              		.loc 2 68 3 is_stmt 1 view .LVU748
  68:src/console.c ****     return mapping_running[c];
 2795              		.loc 2 68 15 is_stmt 0 view .LVU749
 2796 00f6 874A     		ldr	r2, .L289+76
 2797 00f8 874B     		ldr	r3, .L289+80
 2798 00fa 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 2799 00fe 1968     		ldr	r1, [r3]
  68:src/console.c ****     return mapping_running[c];
 2800              		.loc 2 68 6 view .LVU750
 2801 0100 59EA0109 		orrs	r9, r9, r1
 2802 0104 40F04981 		bne	.L272
  72:src/console.c ****   case KEY_F1:
 2803              		.loc 2 72 3 is_stmt 1 view .LVU751
 2804 0108 A5F12603 		sub	r3, r5, #38
 2805 010c 052B     		cmp	r3, #5
 2806 010e 00F26B81 		bhi	.L212
 2807 0112 DFE813F0 		tbh	[pc, r3, lsl #1]
 2808              	.L214:
 2809 0116 7201     		.2byte	(.L219-.L214)/2
 2810 0118 0B00     		.2byte	(.L218-.L214)/2
 2811 011a 1500     		.2byte	(.L217-.L214)/2
 2812 011c 1F00     		.2byte	(.L216-.L214)/2
 2813 011e 2900     		.2byte	(.L215-.L214)/2
 2814 0120 3300     		.2byte	(.L213-.L214)/2
 2815              		.p2align 1
 2816              	.L220:
  75:src/console.c ****   case KEY_F2:
 2817              		.loc 2 75 5 view .LVU752
  75:src/console.c ****   case KEY_F2:
 2818              		.loc 2 75 9 is_stmt 0 view .LVU753
 2819 0122 FFF7FEFF 		bl	cur_shift
 2820              	.LVL230:
  75:src/console.c ****   case KEY_F2:
 2821              		.loc 2 75 8 view .LVU754
 2822 0126 0128     		cmp	r0, #1
 2823 0128 00F00D82 		beq	.L273
 2824              	.L218:
  77:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2825              		.loc 2 77 5 is_stmt 1 view .LVU755
  77:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2826              		.loc 2 77 9 is_stmt 0 view .LVU756
ARM GAS  /tmp/ccLcrImZ.s 			page 80


 2827 012c FFF7FEFF 		bl	cur_shift
 2828              	.LVL231:
  77:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2829              		.loc 2 77 8 view .LVU757
 2830 0130 0028     		cmp	r0, #0
 2831 0132 00F09781 		beq	.L274
  78:src/console.c ****   case KEY_F3:
 2832              		.loc 2 78 5 is_stmt 1 view .LVU758
  78:src/console.c ****   case KEY_F3:
 2833              		.loc 2 78 9 is_stmt 0 view .LVU759
 2834 0136 FFF7FEFF 		bl	cur_shift
 2835              	.LVL232:
  78:src/console.c ****   case KEY_F3:
 2836              		.loc 2 78 8 view .LVU760
 2837 013a 0128     		cmp	r0, #1
 2838 013c 00F0E481 		beq	.L275
 2839              	.L217:
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2840              		.loc 2 80 5 is_stmt 1 view .LVU761
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2841              		.loc 2 80 9 is_stmt 0 view .LVU762
 2842 0140 FFF7FEFF 		bl	cur_shift
 2843              	.LVL233:
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2844              		.loc 2 80 8 view .LVU763
 2845 0144 0028     		cmp	r0, #0
 2846 0146 00F08381 		beq	.L276
  81:src/console.c ****   case KEY_F4:
 2847              		.loc 2 81 5 is_stmt 1 view .LVU764
  81:src/console.c ****   case KEY_F4:
 2848              		.loc 2 81 9 is_stmt 0 view .LVU765
 2849 014a FFF7FEFF 		bl	cur_shift
 2850              	.LVL234:
  81:src/console.c ****   case KEY_F4:
 2851              		.loc 2 81 8 view .LVU766
 2852 014e 0128     		cmp	r0, #1
 2853 0150 00F0D081 		beq	.L277
 2854              	.L216:
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2855              		.loc 2 83 5 is_stmt 1 view .LVU767
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2856              		.loc 2 83 9 is_stmt 0 view .LVU768
 2857 0154 FFF7FEFF 		bl	cur_shift
 2858              	.LVL235:
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2859              		.loc 2 83 8 view .LVU769
 2860 0158 0028     		cmp	r0, #0
 2861 015a 00F06F81 		beq	.L278
  84:src/console.c ****   case KEY_F5:
 2862              		.loc 2 84 5 is_stmt 1 view .LVU770
  84:src/console.c ****   case KEY_F5:
 2863              		.loc 2 84 9 is_stmt 0 view .LVU771
 2864 015e FFF7FEFF 		bl	cur_shift
 2865              	.LVL236:
  84:src/console.c ****   case KEY_F5:
 2866              		.loc 2 84 8 view .LVU772
 2867 0162 0128     		cmp	r0, #1
ARM GAS  /tmp/ccLcrImZ.s 			page 81


 2868 0164 00F0B281 		beq	.L279
 2869              	.L215:
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2870              		.loc 2 86 5 is_stmt 1 view .LVU773
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2871              		.loc 2 86 9 is_stmt 0 view .LVU774
 2872 0168 FFF7FEFF 		bl	cur_shift
 2873              	.LVL237:
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2874              		.loc 2 86 8 view .LVU775
 2875 016c 0028     		cmp	r0, #0
 2876 016e 00F05B81 		beq	.L280
  87:src/console.c ****   case KEY_F6:
 2877              		.loc 2 87 5 is_stmt 1 view .LVU776
  87:src/console.c ****   case KEY_F6:
 2878              		.loc 2 87 9 is_stmt 0 view .LVU777
 2879 0172 FFF7FEFF 		bl	cur_shift
 2880              	.LVL238:
  87:src/console.c ****   case KEY_F6:
 2881              		.loc 2 87 8 view .LVU778
 2882 0176 0128     		cmp	r0, #1
 2883 0178 00F0B281 		beq	.L281
 2884              	.L213:
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2885              		.loc 2 89 5 is_stmt 1 view .LVU779
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2886              		.loc 2 89 9 is_stmt 0 view .LVU780
 2887 017c FFF7FEFF 		bl	cur_shift
 2888              	.LVL239:
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2889              		.loc 2 89 8 view .LVU781
 2890 0180 0028     		cmp	r0, #0
 2891 0182 40F02D81 		bne	.L225
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2892              		.loc 2 89 33 is_stmt 1 view .LVU782
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2893              		.loc 2 89 67 is_stmt 0 view .LVU783
 2894 0186 3168     		ldr	r1, [r6]
 2895 0188 644A     		ldr	r2, .L289+84
 2896 018a D023     		movs	r3, #208
 2897 018c 03FB01F3 		mul	r3, r3, r1
 2898 0190 D018     		adds	r0, r2, r3
 2899 0192 D0E92C01 		ldrd	r0, r1, [r0, #176]
 2900 0196 B033     		adds	r3, r3, #176
 2901 0198 3DE1     		b	.L270
 2902              	.LVL240:
 2903              	.L192:
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2904              		.loc 2 89 67 view .LVU784
 2905              	.LBE133:
 2906              	.LBE142:
 421:src/console.c ****     {
 2907              		.loc 2 421 10 is_stmt 1 view .LVU785
 421:src/console.c ****     {
 2908              		.loc 2 421 15 is_stmt 0 view .LVU786
 2909 019a 2568     		ldr	r5, [r4]
 421:src/console.c ****     {
ARM GAS  /tmp/ccLcrImZ.s 			page 82


 2910              		.loc 2 421 13 view .LVU787
 2911 019c 15F40075 		ands	r5, r5, #512
 2912 01a0 7FF472AF 		bne	.L193
 421:src/console.c ****     {
 2913              		.loc 2 421 35 discriminator 1 view .LVU788
 2914 01a4 B847     		blx	r7
 2915              	.LVL241:
 421:src/console.c ****     {
 2916              		.loc 2 421 32 discriminator 1 view .LVU789
 2917 01a6 0028     		cmp	r0, #0
 2918 01a8 3FF46EAF 		beq	.L193
 423:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2919              		.loc 2 423 7 is_stmt 1 view .LVU790
 2920 01ac 2368     		ldr	r3, [r4]
 2921 01ae 23F00203 		bic	r3, r3, #2
 424:src/console.c ****       sys_sleep();
 2922              		.loc 2 424 7 is_stmt 0 view .LVU791
 2923 01b2 2846     		mov	r0, r5
 2924 01b4 6421     		movs	r1, #100
 423:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2925              		.loc 2 423 7 view .LVU792
 2926 01b6 2360     		str	r3, [r4]
 424:src/console.c ****       sys_sleep();
 2927              		.loc 2 424 7 is_stmt 1 view .LVU793
 2928 01b8 C047     		blx	r8
 2929              	.LVL242:
 425:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 2930              		.loc 2 425 7 view .LVU794
 2931 01ba 4C4B     		ldr	r3, .L289+36
 2932 01bc 9847     		blx	r3
 2933              	.LVL243:
 426:src/console.c **** 	key_push (K_HEARTBEAT);
 2934              		.loc 2 426 7 view .LVU795
 426:src/console.c **** 	key_push (K_HEARTBEAT);
 2935              		.loc 2 426 11 is_stmt 0 view .LVU796
 2936 01be 584B     		ldr	r3, .L289+88
 2937 01c0 2846     		mov	r0, r5
 2938 01c2 9847     		blx	r3
 2939              	.LVL244:
 426:src/console.c **** 	key_push (K_HEARTBEAT);
 2940              		.loc 2 426 10 view .LVU797
 2941 01c4 48B1     		cbz	r0, .L197
 427:src/console.c **** 	if (Pause > 0) Pause--;
 2942              		.loc 2 427 2 is_stmt 1 view .LVU798
 2943 01c6 574B     		ldr	r3, .L289+92
 2944 01c8 6220     		movs	r0, #98
 2945 01ca 9847     		blx	r3
 2946              	.LVL245:
 428:src/console.c ****       }
 2947              		.loc 2 428 2 view .LVU799
 428:src/console.c ****       }
 2948              		.loc 2 428 12 is_stmt 0 view .LVU800
 2949 01cc 514B     		ldr	r3, .L289+76
 2950 01ce 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 428:src/console.c ****       }
 2951              		.loc 2 428 5 view .LVU801
 2952 01d0 1AB1     		cbz	r2, .L197
ARM GAS  /tmp/ccLcrImZ.s 			page 83


 428:src/console.c ****       }
 2953              		.loc 2 428 17 is_stmt 1 discriminator 1 view .LVU802
 428:src/console.c ****       }
 2954              		.loc 2 428 22 is_stmt 0 discriminator 1 view .LVU803
 2955 01d2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2956 01d4 013A     		subs	r2, r2, #1
 2957 01d6 D2B2     		uxtb	r2, r2
 2958 01d8 1A70     		strb	r2, [r3]
 2959              	.L197:
 430:src/console.c ****     }
 2960              		.loc 2 430 7 is_stmt 1 view .LVU804
 2961 01da 534B     		ldr	r3, .L289+96
 2962 01dc 0020     		movs	r0, #0
 2963 01de 9847     		blx	r3
 2964              	.LVL246:
 434:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2965              		.loc 2 434 5 view .LVU805
 434:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2966              		.loc 2 434 9 is_stmt 0 view .LVU806
 2967 01e0 2368     		ldr	r3, [r4]
 434:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2968              		.loc 2 434 8 view .LVU807
 2969 01e2 9905     		lsls	r1, r3, #22
 2970 01e4 7FF554AF 		bpl	.L282
 2971              	.L199:
 435:src/console.c ****         // Going to off mode
 2972              		.loc 2 435 7 is_stmt 1 view .LVU808
 435:src/console.c ****         // Going to off mode
 2973              		.loc 2 435 12 is_stmt 0 view .LVU809
 2974 01e8 2568     		ldr	r5, [r4]
 435:src/console.c ****         // Going to off mode
 2975              		.loc 2 435 10 view .LVU810
 2976 01ea 15F00405 		ands	r5, r5, #4
 2977 01ee 7FF43DAF 		bne	.L191
 437:src/console.c ****         draw_power_off_image(1);
 2978              		.loc 2 437 9 is_stmt 1 view .LVU811
 2979 01f2 4E4B     		ldr	r3, .L289+100
 2980 01f4 2846     		mov	r0, r5
 2981 01f6 9847     		blx	r3
 2982              	.LVL247:
 438:src/console.c **** 
 2983              		.loc 2 438 9 view .LVU812
 2984 01f8 4D4B     		ldr	r3, .L289+104
 2985 01fa 0120     		movs	r0, #1
 2986 01fc 9847     		blx	r3
 2987              	.LVL248:
 440:src/console.c ****         SET_ST(STAT_SUSPENDED);
 2988              		.loc 2 440 9 view .LVU813
 2989 01fe 4D4B     		ldr	r3, .L289+108
 2990 0200 2846     		mov	r0, r5
 2991 0202 9847     		blx	r3
 2992              	.LVL249:
 441:src/console.c ****         SET_ST(STAT_OFF);
 2993              		.loc 2 441 9 view .LVU814
 2994 0204 2368     		ldr	r3, [r4]
 2995 0206 43F00403 		orr	r3, r3, #4
 2996 020a 2360     		str	r3, [r4]
ARM GAS  /tmp/ccLcrImZ.s 			page 84


 442:src/console.c ****       }
 2997              		.loc 2 442 9 view .LVU815
 2998 020c 2368     		ldr	r3, [r4]
 2999 020e 43F01003 		orr	r3, r3, #16
 3000 0212 2360     		str	r3, [r4]
 3001 0214 2AE7     		b	.L191
 3002              	.LVL250:
 3003              	.L207:
 479:src/console.c ****       remapped = remap(c);
 3004              		.loc 2 479 5 view .LVU816
 479:src/console.c ****       remapped = remap(c);
 3005              		.loc 2 479 8 is_stmt 0 view .LVU817
 3006 0216 7FF429AF 		bne	.L191
 3007 021a 6CE7     		b	.L244
 3008              	.L206:
 479:src/console.c ****       remapped = remap(c);
 3009              		.loc 2 479 5 is_stmt 1 view .LVU818
 3010              		.loc 2 480 7 view .LVU819
 3011              	.LVL251:
 3012              	.LBB143:
  53:src/console.c **** 
 3013              		.loc 2 53 22 view .LVU820
 3014              	.LBB134:
  55:src/console.c **** 
 3015              		.loc 2 55 3 view .LVU821
   1:src/keytran.c ****     // Top row of DM42 1--6
 3016              		.loc 3 1 1 view .LVU822
  59:src/keytran.c ****     {K_RELEASE, -1},
 3017              		.loc 3 59 3 view .LVU823
 117:src/keytran.c ****     {K_RELEASE, -1},
 3018              		.loc 3 117 3 view .LVU824
 175:src/keytran.c ****     {K_RELEASE, -1},
 3019              		.loc 3 175 1 view .LVU825
 3020              		.loc 3 233 1 view .LVU826
  59:src/console.c **** 
 3021              		.loc 2 59 3 view .LVU827
  59:src/console.c **** 
 3022              		.loc 2 59 23 view .LVU828
  59:src/console.c **** 
 3023              		.loc 2 59 30 is_stmt 0 view .LVU829
 3024 021c 464B     		ldr	r3, .L289+112
 3025              	.LVL252:
 3026              	.L269:
  59:src/console.c **** 
 3027              		.loc 2 59 30 view .LVU830
 3028 021e 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3029              	.LVL253:
  59:src/console.c **** 
 3030              		.loc 2 59 30 view .LVU831
 3031 0220 93E80300 		ldm	r3, {r0, r1}
 3032 0224 0DF1080A 		add	r10, sp, #8
 3033 0228 8AE80300 		stm	r10, {r0, r1}
 3034 022c 8946     		mov	r9, r1
 3035              	.LVL254:
 3036              	.L209:
  59:src/console.c **** 
 3037              		.loc 2 59 30 view .LVU832
ARM GAS  /tmp/ccLcrImZ.s 			page 85


 3038              	.LBE134:
 3039              	.LBE143:
 481:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3040              		.loc 2 481 7 is_stmt 1 view .LVU833
 3041              		.loc 2 481 10 is_stmt 0 view .LVU834
 3042 022e 2F2D     		cmp	r5, #47
 3043 0230 29D0     		beq	.L283
 3044              	.LVL255:
 3045              	.L234:
 482:src/console.c **** 	set_menu ( remapped.shift );
 483:src/console.c **** 	display_current_menu ();
 484:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 485:src/console.c **** 	case SHIFT_F:
 486:src/console.c **** 	  remapped = f_shift; // F -> N
 487:src/console.c **** 	  break;
 488:src/console.c **** 	case SHIFT_G:
 489:src/console.c **** 	  remapped = g_shift; // G -> N
 490:src/console.c **** 	  break;
 491:src/console.c **** 	case SHIFT_H:
 492:src/console.c **** 	  remapped = h_shift; // H -> N
 493:src/console.c **** 	default:
 494:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 495:src/console.c **** 	}
 496:src/console.c ****       }
 497:src/console.c ****       if (remapped.key_34s == K_SYS) {
 3046              		.loc 2 497 7 is_stmt 1 view .LVU835
 3047              		.loc 2 497 10 is_stmt 0 view .LVU836
 3048 0232 302D     		cmp	r5, #48
 3049 0234 17D1     		bne	.L241
 498:src/console.c **** 	SET_ST(STAT_MENU);
 3050              		.loc 2 498 2 is_stmt 1 view .LVU837
 3051 0236 2368     		ldr	r3, [r4]
 499:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 3052              		.loc 2 499 2 is_stmt 0 view .LVU838
 3053 0238 404D     		ldr	r5, .L289+116
 3054              	.LVL256:
 3055              		.loc 2 499 2 view .LVU839
 3056 023a 4148     		ldr	r0, .L289+120
 3057 023c 0022     		movs	r2, #0
 498:src/console.c **** 	SET_ST(STAT_MENU);
 3058              		.loc 2 498 2 view .LVU840
 3059 023e 43F04003 		orr	r3, r3, #64
 3060              		.loc 2 499 2 view .LVU841
 3061 0242 1146     		mov	r1, r2
 498:src/console.c **** 	SET_ST(STAT_MENU);
 3062              		.loc 2 498 2 view .LVU842
 3063 0244 2360     		str	r3, [r4]
 3064              		.loc 2 499 2 is_stmt 1 view .LVU843
 3065 0246 A847     		blx	r5
 3066              	.LVL257:
 500:src/console.c **** 	CLR_ST(STAT_MENU);
 3067              		.loc 2 500 2 view .LVU844
 501:src/console.c **** 	remapped =  no_key;
 3068              		.loc 2 501 11 is_stmt 0 view .LVU845
 3069 0248 3E4B     		ldr	r3, .L289+124
 500:src/console.c **** 	CLR_ST(STAT_MENU);
 3070              		.loc 2 500 2 view .LVU846
ARM GAS  /tmp/ccLcrImZ.s 			page 86


 3071 024a 2268     		ldr	r2, [r4]
 3072              		.loc 2 501 11 view .LVU847
 3073 024c 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3074 024e 93E80300 		ldm	r3, {r0, r1}
 500:src/console.c **** 	CLR_ST(STAT_MENU);
 3075              		.loc 2 500 2 view .LVU848
 3076 0252 22F04002 		bic	r2, r2, #64
 3077 0256 2260     		str	r2, [r4]
 3078              		.loc 2 501 2 is_stmt 1 view .LVU849
 3079              	.LVL258:
 3080              		.loc 2 501 11 is_stmt 0 view .LVU850
 3081 0258 04AA     		add	r2, sp, #16
 3082 025a 02E90300 		stmdb	r2, {r0, r1}
 3083              	.LBB144:
 3084              	.LBB145:
 111:src/menu.c    **** }
 3085              		.loc 1 111 3 view .LVU851
 3086 025e 3068     		ldr	r0, [r6]
 3087              	.LBE145:
 3088              	.LBE144:
 3089              		.loc 2 501 11 view .LVU852
 3090 0260 8946     		mov	r9, r1
 3091              	.LVL259:
 502:src/console.c **** 	display_current_menu();
 3092              		.loc 2 502 2 is_stmt 1 view .LVU853
 3093              	.LBB147:
 3094              	.LBI144:
 110:src/menu.c    ****   display_menu (current_menu);
 3095              		.loc 1 110 6 view .LVU854
 3096              	.LBB146:
 111:src/menu.c    **** }
 3097              		.loc 1 111 3 view .LVU855
 3098 0262 FFF7FEFF 		bl	display_menu
 3099              	.LVL260:
 3100              	.L241:
 111:src/menu.c    **** }
 3101              		.loc 1 111 3 is_stmt 0 view .LVU856
 3102              	.LBE146:
 3103              	.LBE147:
 503:src/console.c ****       }
 504:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 3104              		.loc 2 504 7 is_stmt 1 view .LVU857
 3105              		.loc 2 504 10 is_stmt 0 view .LVU858
 3106 0266 312D     		cmp	r5, #49
 3107 0268 76D0     		beq	.L210
 505:src/console.c **** 	remapped = do_multi (remapped);
 506:src/console.c **** 	display_current_menu();
 507:src/console.c ****       }
 508:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 3108              		.loc 2 508 7 is_stmt 1 view .LVU859
 3109              		.loc 2 508 10 is_stmt 0 view .LVU860
 3110 026a 322D     		cmp	r5, #50
 3111 026c 00F08F80 		beq	.L243
 3112              	.LVL261:
 3113              	.L246:
 3114              		.loc 2 508 10 view .LVU861
 3115 0270 0DF1080A 		add	r10, sp, #8
ARM GAS  /tmp/ccLcrImZ.s 			page 87


 3116              	.L228:
 3117              	.LVL262:
 509:src/console.c ****       process_keycode_with_shift(remapped);
 3118              		.loc 2 509 7 is_stmt 1 view .LVU862
 3119              		.loc 2 509 7 is_stmt 0 view .LVU863
 3120 0274 8DF80850 		strb	r5, [sp, #8]
 3121 0278 CDF80C90 		str	r9, [sp, #12]
 3122 027c 9AE80300 		ldm	r10, {r0, r1}
 3123 0280 FFF7FEFF 		bl	process_keycode_with_shift
 3124              	.LVL263:
 3125 0284 F2E6     		b	.L191
 3126              	.L283:
 482:src/console.c **** 	display_current_menu ();
 3127              		.loc 2 482 2 is_stmt 1 view .LVU864
 3128              	.LVL264:
 3129              	.LBB148:
 3130              	.LBI148:
  86:src/menu.c    ****   int m = current_menu;
 3131              		.loc 1 86 6 view .LVU865
 3132              	.LBB149:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3133              		.loc 1 87 3 view .LVU866
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3134              		.loc 1 87 7 is_stmt 0 view .LVU867
 3135 0286 3368     		ldr	r3, [r6]
 3136              	.LVL265:
  88:src/menu.c    ****     current_menu = default_menu;
 3137              		.loc 1 88 3 is_stmt 1 view .LVU868
  88:src/menu.c    ****     current_menu = default_menu;
 3138              		.loc 1 88 6 is_stmt 0 view .LVU869
 3139 0288 4B45     		cmp	r3, r9
 3140 028a 00F09580 		beq	.L284
  91:src/menu.c    ****     current_menu = last_menu;
 3141              		.loc 1 91 8 is_stmt 1 view .LVU870
  91:src/menu.c    ****     current_menu = last_menu;
 3142              		.loc 1 91 11 is_stmt 0 view .LVU871
 3143 028e B9F1FF3F 		cmp	r9, #-1
 3144 0292 00F09F80 		beq	.L285
 3145              	.LVL266:
 3146              	.L235:
  95:src/menu.c    ****   }
 3147              		.loc 1 95 5 is_stmt 1 view .LVU872
  95:src/menu.c    ****   }
 3148              		.loc 1 95 18 is_stmt 0 view .LVU873
 3149 0296 C6F80090 		str	r9, [r6]
 3150              	.LVL267:
 3151              	.L238:
  97:src/menu.c    **** }
 3152              		.loc 1 97 3 is_stmt 1 view .LVU874
  97:src/menu.c    **** }
 3153              		.loc 1 97 6 is_stmt 0 view .LVU875
 3154 029a 092B     		cmp	r3, #9
 3155 029c 03D0     		beq	.L239
  97:src/menu.c    **** }
 3156              		.loc 1 97 17 view .LVU876
 3157 029e 102B     		cmp	r3, #16
 3158 02a0 01D0     		beq	.L239
ARM GAS  /tmp/ccLcrImZ.s 			page 88


 3159              	.L236:
  97:src/menu.c    **** }
 3160              		.loc 1 97 32 is_stmt 1 view .LVU877
  97:src/menu.c    **** }
 3161              		.loc 1 97 42 is_stmt 0 view .LVU878
 3162 02a2 294A     		ldr	r2, .L289+128
 3163 02a4 1360     		str	r3, [r2]
 3164              	.L239:
  97:src/menu.c    **** }
 3165              		.loc 1 97 42 view .LVU879
 3166              	.LBE149:
 3167              	.LBE148:
 483:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 3168              		.loc 2 483 2 is_stmt 1 view .LVU880
 3169              	.LBB154:
 3170              	.LBI154:
 110:src/menu.c    ****   display_menu (current_menu);
 3171              		.loc 1 110 6 view .LVU881
 3172              	.LBB155:
 111:src/menu.c    **** }
 3173              		.loc 1 111 3 view .LVU882
 3174 02a6 4846     		mov	r0, r9
 3175 02a8 FFF7FEFF 		bl	display_menu
 3176              	.LVL268:
 3177              	.LBE155:
 3178              	.LBE154:
 484:src/console.c **** 	case SHIFT_F:
 3179              		.loc 2 484 2 view .LVU883
 484:src/console.c **** 	case SHIFT_F:
 3180              		.loc 2 484 10 is_stmt 0 view .LVU884
 3181 02ac FFF7FEFF 		bl	cur_shift
 3182              	.LVL269:
 484:src/console.c **** 	case SHIFT_F:
 3183              		.loc 2 484 2 view .LVU885
 3184 02b0 0228     		cmp	r0, #2
 3185 02b2 00F08780 		beq	.L240
 486:src/console.c **** 	  break;
 3186              		.loc 2 486 4 is_stmt 1 view .LVU886
 486:src/console.c **** 	  break;
 3187              		.loc 2 486 13 is_stmt 0 view .LVU887
 3188 02b6 254B     		ldr	r3, .L289+132
 3189 02b8 93E80300 		ldm	r3, {r0, r1}
 3190 02bc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3191              	.LVL270:
 486:src/console.c **** 	  break;
 3192              		.loc 2 486 13 view .LVU888
 3193 02be 8AE80300 		stm	r10, {r0, r1}
 3194 02c2 8946     		mov	r9, r1
 3195              	.LVL271:
 487:src/console.c **** 	case SHIFT_G:
 3196              		.loc 2 487 4 is_stmt 1 view .LVU889
 3197 02c4 B5E7     		b	.L234
 3198              	.L290:
 3199 02c6 00BF     		.align	2
 3200              	.L289:
 3201 02c8 00000000 		.word	StateWhileOn
 3202 02cc 00000000 		.word	DispMsg
ARM GAS  /tmp/ccLcrImZ.s 			page 89


 3203 02d0 00200010 		.word	268443648
 3204 02d4 00000000 		.word	.LANCHOR1
 3205 02d8 7D030008 		.word	134218621
 3206 02dc 00000000 		.word	run_menu_item
 3207 02e0 00000000 		.word	menu_line_str
 3208 02e4 31020008 		.word	134218289
 3209 02e8 00000000 		.word	JustDisplayed
 3210 02ec 19040008 		.word	134218777
 3211 02f0 19020008 		.word	134218265
 3212 02f4 91030008 		.word	134218641
 3213 02f8 E5020008 		.word	134218469
 3214 02fc 59020008 		.word	134218329
 3215 0300 35020008 		.word	134218293
 3216 0304 89030008 		.word	134218633
 3217 0308 B9030008 		.word	134218681
 3218 030c B9040008 		.word	134218937
 3219 0310 00000000 		.word	.LANCHOR6
 3220 0314 00000000 		.word	Pause
 3221 0318 00000000 		.word	Running
 3222 031c 00000000 		.word	.LANCHOR4
 3223 0320 01040008 		.word	134218753
 3224 0324 81030008 		.word	134218625
 3225 0328 F5030008 		.word	134218741
 3226 032c 55020008 		.word	134218325
 3227 0330 2D040008 		.word	134218797
 3228 0334 1D020008 		.word	134218269
 3229 0338 00000000 		.word	.LANCHOR19
 3230 033c 59030008 		.word	134218585
 3231 0340 00000000 		.word	.LANCHOR18
 3232 0344 00000000 		.word	.LANCHOR8
 3233 0348 00000000 		.word	.LANCHOR3
 3234 034c 00000000 		.word	.LANCHOR9
 3235 0350 F9030008 		.word	134218745
 3236              	.LVL272:
 3237              	.L245:
 3238              	.LBB156:
 3239              	.LBB135:
 3240              	.LBB132:
  65:src/console.c ****   }
 3241              		.loc 2 65 12 is_stmt 0 view .LVU890
 3242 0354 4FF00C09 		mov	r9, #12
 3243              	.LVL273:
 3244              	.L210:
  65:src/console.c ****   }
 3245              		.loc 2 65 12 view .LVU891
 3246              	.LBE132:
 3247              	.LBE135:
 3248              	.LBE156:
 505:src/console.c **** 	display_current_menu();
 3249              		.loc 2 505 2 is_stmt 1 view .LVU892
 505:src/console.c **** 	display_current_menu();
 3250              		.loc 2 505 13 is_stmt 0 view .LVU893
 3251 0358 3123     		movs	r3, #49
 3252 035a CDF80C90 		str	r9, [sp, #12]
 3253 035e 8DF80830 		strb	r3, [sp, #8]
 3254 0362 6D46     		mov	r5, sp
 3255 0364 0DF1080A 		add	r10, sp, #8
ARM GAS  /tmp/ccLcrImZ.s 			page 90


 3256 0368 9AE80600 		ldm	r10, {r1, r2}
 3257 036c 2846     		mov	r0, r5
 3258 036e FFF7FEFF 		bl	do_multi
 3259              	.LVL274:
 3260 0372 95E80300 		ldm	r5, {r0, r1}
 3261 0376 8AE80300 		stm	r10, {r0, r1}
 3262 037a 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 3263              	.LVL275:
 3264              	.LBB157:
 3265              	.LBB158:
 111:src/menu.c    **** }
 3266              		.loc 1 111 3 view .LVU894
 3267 037e 3068     		ldr	r0, [r6]
 3268              	.LBE158:
 3269              	.LBE157:
 505:src/console.c **** 	display_current_menu();
 3270              		.loc 2 505 13 view .LVU895
 3271 0380 DDF80C90 		ldr	r9, [sp, #12]
 3272              	.LVL276:
 506:src/console.c ****       }
 3273              		.loc 2 506 2 is_stmt 1 view .LVU896
 3274              	.LBB160:
 3275              	.LBI157:
 110:src/menu.c    ****   display_menu (current_menu);
 3276              		.loc 1 110 6 view .LVU897
 3277              	.LBB159:
 111:src/menu.c    **** }
 3278              		.loc 1 111 3 view .LVU898
 3279 0384 FFF7FEFF 		bl	display_menu
 3280              	.LVL277:
 111:src/menu.c    **** }
 3281              		.loc 1 111 3 is_stmt 0 view .LVU899
 3282              	.LBE159:
 3283              	.LBE160:
 508:src/console.c ****       process_keycode_with_shift(remapped);
 3284              		.loc 2 508 7 is_stmt 1 view .LVU900
 508:src/console.c ****       process_keycode_with_shift(remapped);
 3285              		.loc 2 508 10 is_stmt 0 view .LVU901
 3286 0388 322D     		cmp	r5, #50
 3287 038a 7FF471AF 		bne	.L246
 3288              	.LVL278:
 3289              	.L243:
 510:src/console.c ****     }
 511:src/console.c ****   }
 512:src/console.c ****   save_ram_file(0);
 3290              		.loc 2 512 3 is_stmt 1 view .LVU902
 3291 038e 0020     		movs	r0, #0
 513:src/console.c ****   //  free_storage();
 514:src/console.c ****   return;
 515:src/console.c **** }
 3292              		.loc 2 515 1 is_stmt 0 view .LVU903
 3293 0390 04B0     		add	sp, sp, #16
 3294              		.cfi_remember_state
 3295              		.cfi_def_cfa_offset 32
 3296              		@ sp needed
 3297 0392 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 3298              		.cfi_restore 14
ARM GAS  /tmp/ccLcrImZ.s 			page 91


 3299              		.cfi_restore 10
 3300              		.cfi_restore 9
 3301              		.cfi_restore 8
 3302              		.cfi_restore 7
 3303              		.cfi_restore 6
 3304              		.cfi_restore 5
 3305              		.cfi_restore 4
 3306              		.cfi_def_cfa_offset 0
 3307              	.LVL279:
 512:src/console.c ****   //  free_storage();
 3308              		.loc 2 512 3 view .LVU904
 3309 0396 FFF7FEBF 		b	save_ram_file
 3310              	.LVL280:
 3311              	.L272:
 3312              		.cfi_restore_state
 3313              	.LBB161:
 3314              	.LBB136:
  69:src/console.c ****   }
 3315              		.loc 2 69 5 is_stmt 1 view .LVU905
  69:src/console.c ****   }
 3316              		.loc 2 69 27 is_stmt 0 view .LVU906
 3317 039a 784B     		ldr	r3, .L291
 3318              	.L268:
 119:src/console.c ****     break;
 3319              		.loc 2 119 26 view .LVU907
 3320 039c 03EBC502 		add	r2, r3, r5, lsl #3
 3321 03a0 92E80300 		ldm	r2, {r0, r1}
 3322 03a4 0DF1080A 		add	r10, sp, #8
 3323 03a8 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 3324              	.LVL281:
 119:src/console.c ****     break;
 3325              		.loc 2 119 26 view .LVU908
 3326 03ac 8946     		mov	r9, r1
 3327              	.LVL282:
 119:src/console.c ****     break;
 3328              		.loc 2 119 26 view .LVU909
 3329 03ae 8AE80300 		stm	r10, {r0, r1}
 3330 03b2 3CE7     		b	.L209
 3331              	.LVL283:
 3332              	.L271:
  61:src/console.c **** 
 3333              		.loc 2 61 16 is_stmt 1 view .LVU910
  61:src/console.c **** 
 3334              		.loc 2 61 23 is_stmt 0 view .LVU911
 3335 03b4 724B     		ldr	r3, .L291+4
 3336 03b6 32E7     		b	.L269
 3337              	.LVL284:
 3338              	.L284:
  61:src/console.c **** 
 3339              		.loc 2 61 23 view .LVU912
 3340              	.LBE136:
 3341              	.LBE161:
 3342              	.LBB162:
 3343              	.LBB150:
  89:src/menu.c    ****   }
 3344              		.loc 1 89 5 is_stmt 1 view .LVU913
  89:src/menu.c    ****   }
ARM GAS  /tmp/ccLcrImZ.s 			page 92


 3345              		.loc 1 89 18 is_stmt 0 view .LVU914
 3346 03b8 724B     		ldr	r3, .L291+8
 3347              	.LVL285:
  89:src/menu.c    ****   }
 3348              		.loc 1 89 18 view .LVU915
 3349 03ba 1A68     		ldr	r2, [r3]
 3350 03bc 3260     		str	r2, [r6]
 3351              	.LVL286:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3352              		.loc 1 87 7 view .LVU916
 3353 03be 4B46     		mov	r3, r9
  89:src/menu.c    ****   }
 3354              		.loc 1 89 18 view .LVU917
 3355 03c0 9146     		mov	r9, r2
 3356              	.LVL287:
  89:src/menu.c    ****   }
 3357              		.loc 1 89 18 view .LVU918
 3358 03c2 6AE7     		b	.L238
 3359              	.LVL288:
 3360              	.L240:
  89:src/menu.c    ****   }
 3361              		.loc 1 89 18 view .LVU919
 3362              	.LBE150:
 3363              	.LBE162:
 489:src/console.c **** 	  break;
 3364              		.loc 2 489 4 is_stmt 1 view .LVU920
 489:src/console.c **** 	  break;
 3365              		.loc 2 489 13 is_stmt 0 view .LVU921
 3366 03c4 704B     		ldr	r3, .L291+12
 3367 03c6 93E80300 		ldm	r3, {r0, r1}
 3368 03ca 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3369              	.LVL289:
 489:src/console.c **** 	  break;
 3370              		.loc 2 489 13 view .LVU922
 3371 03cc 8AE80300 		stm	r10, {r0, r1}
 3372 03d0 8946     		mov	r9, r1
 3373              	.LVL290:
 490:src/console.c **** 	case SHIFT_H:
 3374              		.loc 2 490 4 is_stmt 1 view .LVU923
 3375 03d2 2EE7     		b	.L234
 3376              	.LVL291:
 3377              	.L285:
 3378              	.LBB163:
 3379              	.LBB151:
  92:src/menu.c    ****   }
 3380              		.loc 1 92 5 view .LVU924
  92:src/menu.c    ****   }
 3381              		.loc 1 92 18 is_stmt 0 view .LVU925
 3382 03d4 6D4A     		ldr	r2, .L291+16
 3383 03d6 D2F80090 		ldr	r9, [r2]
 3384              	.LVL292:
  92:src/menu.c    ****   }
 3385              		.loc 1 92 18 view .LVU926
 3386 03da C6F80090 		str	r9, [r6]
 3387 03de 5CE7     		b	.L238
 3388              	.LVL293:
 3389              	.L225:
ARM GAS  /tmp/ccLcrImZ.s 			page 93


  92:src/menu.c    ****   }
 3390              		.loc 1 92 18 view .LVU927
 3391              	.LBE151:
 3392              	.LBE163:
 3393              	.LBB164:
 3394              	.LBB137:
  90:src/console.c ****   }
 3395              		.loc 2 90 5 is_stmt 1 view .LVU928
  90:src/console.c ****   }
 3396              		.loc 2 90 9 is_stmt 0 view .LVU929
 3397 03e0 FFF7FEFF 		bl	cur_shift
 3398              	.LVL294:
  90:src/console.c ****   }
 3399              		.loc 2 90 8 view .LVU930
 3400 03e4 0128     		cmp	r0, #1
 3401 03e6 67D0     		beq	.L286
 3402              	.L212:
  93:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 3403              		.loc 2 93 3 is_stmt 1 view .LVU931
  93:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 3404              		.loc 2 93 8 is_stmt 0 view .LVU932
 3405 03e8 FFF7FEFF 		bl	get_alpha_state
 3406              	.LVL295:
  93:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 3407              		.loc 2 93 6 view .LVU933
 3408 03ec 0028     		cmp	r0, #0
 3409 03ee 43D0     		beq	.L226
  94:src/console.c ****       switch (cur_shift()) { 
 3410              		.loc 2 94 5 is_stmt 1 view .LVU934
  94:src/console.c ****       switch (cur_shift()) { 
 3411              		.loc 2 94 8 is_stmt 0 view .LVU935
 3412 03f0 1C2D     		cmp	r5, #28
 3413 03f2 00F09580 		beq	.L287
 111:src/console.c ****   }
 3414              		.loc 2 111 5 is_stmt 1 view .LVU936
 111:src/console.c ****   }
 3415              		.loc 2 111 26 is_stmt 0 view .LVU937
 3416 03f6 664B     		ldr	r3, .L291+20
 3417 03f8 D0E7     		b	.L268
 3418              	.L219:
  74:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3419              		.loc 2 74 5 is_stmt 1 view .LVU938
  74:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3420              		.loc 2 74 9 is_stmt 0 view .LVU939
 3421 03fa FFF7FEFF 		bl	cur_shift
 3422              	.LVL296:
  74:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3423              		.loc 2 74 8 view .LVU940
 3424 03fe 0028     		cmp	r0, #0
 3425 0400 7FF48FAE 		bne	.L220
  74:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3426              		.loc 2 74 33 is_stmt 1 view .LVU941
  74:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3427              		.loc 2 74 67 is_stmt 0 view .LVU942
 3428 0404 3168     		ldr	r1, [r6]
 3429 0406 634A     		ldr	r2, .L291+24
 3430 0408 D023     		movs	r3, #208
ARM GAS  /tmp/ccLcrImZ.s 			page 94


 3431 040a 03FB01F3 		mul	r3, r3, r1
 3432 040e D018     		adds	r0, r2, r3
 3433 0410 D0E90401 		ldrd	r0, r1, [r0, #16]
 3434 0414 1033     		adds	r3, r3, #16
 3435              	.L270:
  90:src/console.c ****   }
 3436              		.loc 2 90 67 view .LVU943
 3437 0416 0DF1080A 		add	r10, sp, #8
 3438 041a D55C     		ldrb	r5, [r2, r3]	@ zero_extendqisi2
 3439              	.LVL297:
  90:src/console.c ****   }
 3440              		.loc 2 90 67 view .LVU944
 3441 041c 8AE80300 		stm	r10, {r0, r1}
 3442 0420 1344     		add	r3, r3, r2
 3443 0422 D3F80490 		ldr	r9, [r3, #4]
 3444              	.LVL298:
  90:src/console.c ****   }
 3445              		.loc 2 90 67 view .LVU945
 3446 0426 02E7     		b	.L209
 3447              	.LVL299:
 3448              	.L280:
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3449              		.loc 2 86 33 is_stmt 1 view .LVU946
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3450              		.loc 2 86 67 is_stmt 0 view .LVU947
 3451 0428 3168     		ldr	r1, [r6]
 3452 042a 5A4A     		ldr	r2, .L291+24
 3453 042c D023     		movs	r3, #208
 3454 042e 03FB01F3 		mul	r3, r3, r1
 3455 0432 D018     		adds	r0, r2, r3
 3456 0434 D0E92401 		ldrd	r0, r1, [r0, #144]
 3457 0438 9033     		adds	r3, r3, #144
 3458 043a ECE7     		b	.L270
 3459              	.L278:
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3460              		.loc 2 83 33 is_stmt 1 view .LVU948
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3461              		.loc 2 83 67 is_stmt 0 view .LVU949
 3462 043c 3168     		ldr	r1, [r6]
 3463 043e 554A     		ldr	r2, .L291+24
 3464 0440 D023     		movs	r3, #208
 3465 0442 03FB01F3 		mul	r3, r3, r1
 3466 0446 D018     		adds	r0, r2, r3
 3467 0448 D0E91C01 		ldrd	r0, r1, [r0, #112]
 3468 044c 7033     		adds	r3, r3, #112
 3469 044e E2E7     		b	.L270
 3470              	.L276:
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3471              		.loc 2 80 33 is_stmt 1 view .LVU950
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3472              		.loc 2 80 67 is_stmt 0 view .LVU951
 3473 0450 3168     		ldr	r1, [r6]
 3474 0452 504A     		ldr	r2, .L291+24
 3475 0454 D023     		movs	r3, #208
 3476 0456 03FB01F3 		mul	r3, r3, r1
 3477 045a D018     		adds	r0, r2, r3
 3478 045c D0E91401 		ldrd	r0, r1, [r0, #80]
ARM GAS  /tmp/ccLcrImZ.s 			page 95


 3479 0460 5033     		adds	r3, r3, #80
 3480 0462 D8E7     		b	.L270
 3481              	.L274:
  77:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3482              		.loc 2 77 33 is_stmt 1 view .LVU952
  77:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3483              		.loc 2 77 67 is_stmt 0 view .LVU953
 3484 0464 3168     		ldr	r1, [r6]
 3485 0466 4B4A     		ldr	r2, .L291+24
 3486 0468 D023     		movs	r3, #208
 3487 046a 03FB01F3 		mul	r3, r3, r1
 3488 046e D018     		adds	r0, r2, r3
 3489 0470 D0E90C01 		ldrd	r0, r1, [r0, #48]
 3490 0474 3033     		adds	r3, r3, #48
 3491 0476 CEE7     		b	.L270
 3492              	.L226:
 114:src/console.c ****   case SHIFT_N:    
 3493              		.loc 2 114 3 is_stmt 1 view .LVU954
 114:src/console.c ****   case SHIFT_N:    
 3494              		.loc 2 114 11 is_stmt 0 view .LVU955
 3495 0478 FFF7FEFF 		bl	cur_shift
 3496              	.LVL300:
 114:src/console.c ****   case SHIFT_N:    
 3497              		.loc 2 114 3 view .LVU956
 3498 047c 0128     		cmp	r0, #1
 3499 047e 4DD0     		beq	.L231
 3500 0480 0228     		cmp	r0, #2
 3501 0482 0AD0     		beq	.L232
 3502 0484 B0B1     		cbz	r0, .L233
  55:src/console.c **** 
 3503              		.loc 2 55 41 view .LVU957
 3504 0486 EDB2     		uxtb	r5, r5
 3505              	.LVL301:
  55:src/console.c **** 
 3506              		.loc 2 55 41 view .LVU958
 3507              	.LBE137:
 3508              	.LBE164:
 481:src/console.c **** 	set_menu ( remapped.shift );
 3509              		.loc 2 481 7 is_stmt 1 view .LVU959
 481:src/console.c **** 	set_menu ( remapped.shift );
 3510              		.loc 2 481 10 is_stmt 0 view .LVU960
 3511 0488 2F2D     		cmp	r5, #47
 3512 048a 7FF4D2AE 		bne	.L234
 482:src/console.c **** 	display_current_menu ();
 3513              		.loc 2 482 2 is_stmt 1 view .LVU961
 3514              	.LVL302:
 3515              	.LBB165:
  86:src/menu.c    ****   int m = current_menu;
 3516              		.loc 1 86 6 view .LVU962
 3517              	.LBB152:
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3518              		.loc 1 87 3 view .LVU963
  87:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3519              		.loc 1 87 7 is_stmt 0 view .LVU964
 3520 048e 3368     		ldr	r3, [r6]
 3521              	.LVL303:
  88:src/menu.c    ****     current_menu = default_menu;
ARM GAS  /tmp/ccLcrImZ.s 			page 96


 3522              		.loc 1 88 3 is_stmt 1 view .LVU965
  88:src/menu.c    ****     current_menu = default_menu;
 3523              		.loc 1 88 6 is_stmt 0 view .LVU966
 3524 0490 002B     		cmp	r3, #0
 3525 0492 6BD0     		beq	.L266
 3526 0494 0DF1080A 		add	r10, sp, #8
 3527 0498 FDE6     		b	.L235
 3528              	.LVL304:
 3529              	.L232:
  88:src/menu.c    ****     current_menu = default_menu;
 3530              		.loc 1 88 6 view .LVU967
 3531              	.LBE152:
 3532              	.LBE165:
 3533              	.LBB166:
 3534              	.LBB138:
 120:src/console.c ****   case SHIFT_G:
 3535              		.loc 2 120 5 is_stmt 1 view .LVU968
 122:src/console.c ****     break;
 3536              		.loc 2 122 5 view .LVU969
 122:src/console.c ****     break;
 3537              		.loc 2 122 26 is_stmt 0 view .LVU970
 3538 049a 3F4B     		ldr	r3, .L291+28
 3539 049c 03EBC502 		add	r2, r3, r5, lsl #3
 3540 04a0 92E80300 		ldm	r2, {r0, r1}
 3541 04a4 0DF1080A 		add	r10, sp, #8
 3542 04a8 8AE80300 		stm	r10, {r0, r1}
 3543 04ac 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 3544              	.LVL305:
 122:src/console.c ****     break;
 3545              		.loc 2 122 26 view .LVU971
 3546 04b0 8946     		mov	r9, r1
 3547              	.LVL306:
 122:src/console.c ****     break;
 3548              		.loc 2 122 26 view .LVU972
 3549 04b2 BCE6     		b	.L209
 3550              	.LVL307:
 3551              	.L233:
 116:src/console.c ****     break;
 3552              		.loc 2 116 5 is_stmt 1 view .LVU973
 116:src/console.c ****     break;
 3553              		.loc 2 116 24 is_stmt 0 view .LVU974
 3554 04b4 394B     		ldr	r3, .L291+32
 3555 04b6 71E7     		b	.L268
 3556              	.L286:
  90:src/console.c ****   }
 3557              		.loc 2 90 33 is_stmt 1 view .LVU975
  90:src/console.c ****   }
 3558              		.loc 2 90 67 is_stmt 0 view .LVU976
 3559 04b8 3168     		ldr	r1, [r6]
 3560 04ba 364A     		ldr	r2, .L291+24
 3561 04bc D023     		movs	r3, #208
 3562 04be 03FB01F3 		mul	r3, r3, r1
 3563 04c2 D018     		adds	r0, r2, r3
 3564 04c4 D0E92E01 		ldrd	r0, r1, [r0, #184]
 3565 04c8 B833     		adds	r3, r3, #184
 3566 04ca A4E7     		b	.L270
 3567              	.L279:
ARM GAS  /tmp/ccLcrImZ.s 			page 97


  84:src/console.c ****   case KEY_F5:
 3568              		.loc 2 84 33 is_stmt 1 view .LVU977
  84:src/console.c ****   case KEY_F5:
 3569              		.loc 2 84 67 is_stmt 0 view .LVU978
 3570 04cc 3168     		ldr	r1, [r6]
 3571 04ce 314A     		ldr	r2, .L291+24
 3572 04d0 D023     		movs	r3, #208
 3573 04d2 03FB01F3 		mul	r3, r3, r1
 3574 04d6 D018     		adds	r0, r2, r3
 3575 04d8 D0E91E01 		ldrd	r0, r1, [r0, #120]
 3576 04dc 7833     		adds	r3, r3, #120
 3577 04de 9AE7     		b	.L270
 3578              	.L281:
  87:src/console.c ****   case KEY_F6:
 3579              		.loc 2 87 33 is_stmt 1 view .LVU979
  87:src/console.c ****   case KEY_F6:
 3580              		.loc 2 87 67 is_stmt 0 view .LVU980
 3581 04e0 3168     		ldr	r1, [r6]
 3582 04e2 2C4A     		ldr	r2, .L291+24
 3583 04e4 D023     		movs	r3, #208
 3584 04e6 03FB01F3 		mul	r3, r3, r1
 3585 04ea D018     		adds	r0, r2, r3
 3586 04ec D0E92601 		ldrd	r0, r1, [r0, #152]
 3587 04f0 9833     		adds	r3, r3, #152
 3588 04f2 90E7     		b	.L270
 3589              	.L277:
  81:src/console.c ****   case KEY_F4:
 3590              		.loc 2 81 33 is_stmt 1 view .LVU981
  81:src/console.c ****   case KEY_F4:
 3591              		.loc 2 81 67 is_stmt 0 view .LVU982
 3592 04f4 3168     		ldr	r1, [r6]
 3593 04f6 274A     		ldr	r2, .L291+24
 3594 04f8 D023     		movs	r3, #208
 3595 04fa 03FB01F3 		mul	r3, r3, r1
 3596 04fe D018     		adds	r0, r2, r3
 3597 0500 D0E91601 		ldrd	r0, r1, [r0, #88]
 3598 0504 5833     		adds	r3, r3, #88
 3599 0506 86E7     		b	.L270
 3600              	.L275:
  78:src/console.c ****   case KEY_F3:
 3601              		.loc 2 78 33 is_stmt 1 view .LVU983
  78:src/console.c ****   case KEY_F3:
 3602              		.loc 2 78 67 is_stmt 0 view .LVU984
 3603 0508 3168     		ldr	r1, [r6]
 3604 050a 224A     		ldr	r2, .L291+24
 3605 050c D023     		movs	r3, #208
 3606 050e 03FB01F3 		mul	r3, r3, r1
 3607 0512 D018     		adds	r0, r2, r3
 3608 0514 D0E90E01 		ldrd	r0, r1, [r0, #56]
 3609 0518 3833     		adds	r3, r3, #56
 3610 051a 7CE7     		b	.L270
 3611              	.L231:
 117:src/console.c ****   case SHIFT_F:
 3612              		.loc 2 117 5 is_stmt 1 view .LVU985
 119:src/console.c ****     break;
 3613              		.loc 2 119 5 view .LVU986
 119:src/console.c ****     break;
ARM GAS  /tmp/ccLcrImZ.s 			page 98


 3614              		.loc 2 119 26 is_stmt 0 view .LVU987
 3615 051c 204B     		ldr	r3, .L291+36
 3616 051e 3DE7     		b	.L268
 3617              	.L287:
  95:src/console.c ****       case SHIFT_N:
 3618              		.loc 2 95 7 is_stmt 1 view .LVU988
  95:src/console.c ****       case SHIFT_N:
 3619              		.loc 2 95 15 is_stmt 0 view .LVU989
 3620 0520 FFF7FEFF 		bl	cur_shift
 3621              	.LVL308:
  95:src/console.c ****       case SHIFT_N:
 3622              		.loc 2 95 7 view .LVU990
 3623 0524 0328     		cmp	r0, #3
 3624 0526 3FF6A3AE 		bhi	.L246
 3625 052a 0128     		cmp	r0, #1
 3626 052c 09D8     		bhi	.L229
 3627 052e A0B1     		cbz	r0, .L288
  98:src/console.c ****       case SHIFT_F:
 3628              		.loc 2 98 2 is_stmt 1 view .LVU991
 100:src/console.c **** 	break;
 3629              		.loc 2 100 2 view .LVU992
 100:src/console.c **** 	break;
 3630              		.loc 2 100 23 is_stmt 0 view .LVU993
 3631 0530 1C4B     		ldr	r3, .L291+40
 3632 0532 93E80300 		ldm	r3, {r0, r1}
 3633 0536 0DF1080A 		add	r10, sp, #8
 3634 053a 8AE80300 		stm	r10, {r0, r1}
 3635              	.LVL309:
 100:src/console.c **** 	break;
 3636              		.loc 2 100 23 view .LVU994
 3637              	.LBE138:
 3638              	.LBE166:
 481:src/console.c **** 	set_menu ( remapped.shift );
 3639              		.loc 2 481 7 is_stmt 1 view .LVU995
 497:src/console.c **** 	SET_ST(STAT_MENU);
 3640              		.loc 2 497 7 view .LVU996
 504:src/console.c **** 	remapped = do_multi (remapped);
 3641              		.loc 2 504 7 view .LVU997
 508:src/console.c ****       process_keycode_with_shift(remapped);
 3642              		.loc 2 508 7 view .LVU998
 3643              	.LBB167:
 3644              	.LBB139:
 100:src/console.c **** 	break;
 3645              		.loc 2 100 23 is_stmt 0 view .LVU999
 3646 053e 2A25     		movs	r5, #42
 3647              	.LVL310:
 100:src/console.c **** 	break;
 3648              		.loc 2 100 23 view .LVU1000
 3649 0540 98E6     		b	.L228
 3650              	.LVL311:
 3651              	.L229:
 101:src/console.c ****       case SHIFT_G:
 3652              		.loc 2 101 2 is_stmt 1 view .LVU1001
 103:src/console.c **** 	break;
 3653              		.loc 2 103 2 view .LVU1002
 103:src/console.c **** 	break;
 3654              		.loc 2 103 9 is_stmt 0 view .LVU1003
ARM GAS  /tmp/ccLcrImZ.s 			page 99


 3655 0542 194B     		ldr	r3, .L291+44
 3656 0544 6BE6     		b	.L269
 3657              	.L273:
  75:src/console.c ****   case KEY_F2:
 3658              		.loc 2 75 33 is_stmt 1 view .LVU1004
  75:src/console.c ****   case KEY_F2:
 3659              		.loc 2 75 67 is_stmt 0 view .LVU1005
 3660 0546 3168     		ldr	r1, [r6]
 3661 0548 124A     		ldr	r2, .L291+24
 3662 054a D023     		movs	r3, #208
 3663 054c 03FB01F3 		mul	r3, r3, r1
 3664 0550 D018     		adds	r0, r2, r3
 3665 0552 D0E90601 		ldrd	r0, r1, [r0, #24]
 3666 0556 1833     		adds	r3, r3, #24
 3667 0558 5DE7     		b	.L270
 3668              	.L288:
  97:src/console.c **** 	break;
 3669              		.loc 2 97 2 is_stmt 1 view .LVU1006
  97:src/console.c **** 	break;
 3670              		.loc 2 97 21 is_stmt 0 view .LVU1007
 3671 055a 144B     		ldr	r3, .L291+48
 3672 055c 93E80300 		ldm	r3, {r0, r1}
 3673 0560 0DF1080A 		add	r10, sp, #8
 3674 0564 8AE80300 		stm	r10, {r0, r1}
 3675              	.LVL312:
  97:src/console.c **** 	break;
 3676              		.loc 2 97 21 view .LVU1008
 3677              	.LBE139:
 3678              	.LBE167:
 481:src/console.c **** 	set_menu ( remapped.shift );
 3679              		.loc 2 481 7 is_stmt 1 view .LVU1009
 497:src/console.c **** 	SET_ST(STAT_MENU);
 3680              		.loc 2 497 7 view .LVU1010
 504:src/console.c **** 	remapped = do_multi (remapped);
 3681              		.loc 2 504 7 view .LVU1011
 508:src/console.c ****       process_keycode_with_shift(remapped);
 3682              		.loc 2 508 7 view .LVU1012
 3683              	.LBB168:
 3684              	.LBB140:
  97:src/console.c **** 	break;
 3685              		.loc 2 97 21 is_stmt 0 view .LVU1013
 3686 0568 2925     		movs	r5, #41
 3687              	.LVL313:
  97:src/console.c **** 	break;
 3688              		.loc 2 97 21 view .LVU1014
 3689 056a 83E6     		b	.L228
 3690              	.LVL314:
 3691              	.L266:
  97:src/console.c **** 	break;
 3692              		.loc 2 97 21 view .LVU1015
 3693              	.LBE140:
 3694              	.LBE168:
 3695              	.LBB169:
 3696              	.LBB153:
  89:src/menu.c    ****   }
 3697              		.loc 1 89 5 is_stmt 1 view .LVU1016
  89:src/menu.c    ****   }
ARM GAS  /tmp/ccLcrImZ.s 			page 100


 3698              		.loc 1 89 18 is_stmt 0 view .LVU1017
 3699 056c 054A     		ldr	r2, .L291+8
 3700 056e D2F80090 		ldr	r9, [r2]
 3701 0572 C6F80090 		str	r9, [r6]
  97:src/menu.c    **** }
 3702              		.loc 1 97 3 is_stmt 1 view .LVU1018
 3703 0576 0DF1080A 		add	r10, sp, #8
 3704 057a 92E6     		b	.L236
 3705              	.L292:
 3706              		.align	2
 3707              	.L291:
 3708 057c 00000000 		.word	.LANCHOR11
 3709 0580 00000000 		.word	.LANCHOR10
 3710 0584 00000000 		.word	.LANCHOR2
 3711 0588 00000000 		.word	.LANCHOR17
 3712 058c 00000000 		.word	.LANCHOR3
 3713 0590 00000000 		.word	.LANCHOR15
 3714 0594 00000000 		.word	.LANCHOR4
 3715 0598 00000000 		.word	.LANCHOR16
 3716 059c 00000000 		.word	.LANCHOR12
 3717 05a0 00000000 		.word	.LANCHOR13
 3718 05a4 E0000000 		.word	.LANCHOR13+224
 3719 05a8 00000000 		.word	.LANCHOR14
 3720 05ac E0000000 		.word	.LANCHOR12+224
 3721              	.LBE153:
 3722              	.LBE169:
 3723              		.cfi_endproc
 3724              	.LFE28:
 3726              		.global	n_p
 3727              		.comm	print_string,22,4
 3728              		.global	spaces
 3729              		.global	release
 3730              		.global	h_shift
 3731              		.global	g_shift
 3732              		.global	f_shift
 3733              		.global	heartbeat
 3734              		.global	no_key
 3735              		.global	MID_MENU
 3736              		.section	.rodata.str1.4,"aMS",%progbits,1
 3737              		.align	2
 3738              	.LC13:
 3739 0000 53797374 		.ascii	"System!\000"
 3739      656D2100 
 3740              		.global	mid_menu
 3741              		.section	.rodata
 3742              		.align	2
 3743              		.set	.LANCHOR5,. + 0
 3744              	.LC9:
 3745 0000 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 3745      2A2B0708 
 3745      091C0B0C 
 3745      0D0E0F
 3746 000f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 3746      13141516 
 3746      00121819 
 3746      1A
 3747 001c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
ARM GAS  /tmp/ccLcrImZ.s 			page 101


 3747      1E1F2000 
 3747      21222324 
 3747      25
 3748              		.section	.bss.current_menu,"aw",%nobits
 3749              		.align	2
 3750              		.set	.LANCHOR1,. + 0
 3753              	current_menu:
 3754 0000 00000000 		.space	4
 3755              		.section	.bss.default_menu,"aw",%nobits
 3756              		.align	2
 3757              		.set	.LANCHOR2,. + 0
 3760              	default_menu:
 3761 0000 00000000 		.space	4
 3762              		.section	.bss.last_menu,"aw",%nobits
 3763              		.align	2
 3764              		.set	.LANCHOR3,. + 0
 3767              	last_menu:
 3768 0000 00000000 		.space	4
 3769              		.section	.bss.mdots,"aw",%nobits
 3770              		.align	2
 3771              		.set	.LANCHOR0,. + 0
 3774              	mdots:
 3775 0000 00000000 		.space	400
 3775      00000000 
 3775      00000000 
 3775      00000000 
 3775      00000000 
 3776              		.section	.bss.n_p,"aw",%nobits
 3777              		.align	2
 3780              	n_p:
 3781 0000 00000000 		.space	4
 3782              		.section	.bss.start_ticks,"aw",%nobits
 3783              		.align	2
 3784              		.set	.LANCHOR6,. + 0
 3787              	start_ticks:
 3788 0000 00000000 		.space	4
 3789              		.section	.data.f_shift,"aw"
 3790              		.align	2
 3791              		.set	.LANCHOR9,. + 0
 3794              	f_shift:
 3795 0000 29       		.byte	41
 3796 0001 000000   		.space	3
 3797 0004 FFFFFFFF 		.word	-1
 3798              		.section	.data.g_shift,"aw"
 3799              		.align	2
 3800              		.set	.LANCHOR17,. + 0
 3803              	g_shift:
 3804 0000 2A       		.byte	42
 3805 0001 000000   		.space	3
 3806 0004 FFFFFFFF 		.word	-1
 3807              		.section	.data.h_shift,"aw"
 3808              		.align	2
 3809              		.set	.LANCHOR14,. + 0
 3812              	h_shift:
 3813 0000 2B       		.byte	43
 3814 0001 000000   		.space	3
 3815 0004 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccLcrImZ.s 			page 102


 3816              		.section	.data.heartbeat,"aw"
 3817              		.align	2
 3818              		.set	.LANCHOR19,. + 0
 3821              	heartbeat:
 3822 0000 62       		.byte	98
 3823 0001 000000   		.space	3
 3824 0004 FFFFFFFF 		.word	-1
 3825              		.section	.data.no_key,"aw"
 3826              		.align	2
 3827              		.set	.LANCHOR8,. + 0
 3830              	no_key:
 3831 0000 2E       		.byte	46
 3832 0001 000000   		.space	3
 3833 0004 00000000 		.word	0
 3834              		.section	.data.release,"aw"
 3835              		.align	2
 3836              		.set	.LANCHOR10,. + 0
 3839              	release:
 3840 0000 63       		.byte	99
 3841 0001 000000   		.space	3
 3842 0004 FFFFFFFF 		.word	-1
 3843              		.section	.data.spaces,"aw"
 3844              		.align	2
 3845              		.set	.LANCHOR7,. + 0
 3848              	spaces:
 3849 0000 20202020 		.ascii	"                     \000"
 3849      20202020 
 3849      20202020 
 3849      20202020 
 3849      20202020 
 3850              		.section	.rodata.MID_MENU,"a"
 3851              		.align	2
 3852              		.set	.LANCHOR18,. + 0
 3855              	MID_MENU:
 3856 0000 00000000 		.word	.LC13
 3857 0004 00000000 		.word	mid_menu
 3858 0008 00000000 		.word	0
 3859 000c 00000000 		.word	0
 3860              		.section	.rodata.Menus,"a"
 3861              		.align	2
 3862              		.set	.LANCHOR4,. + 0
 3865              	Menus:
 3866 0000 426C616E 		.ascii	"Blank\000"
 3866      6B00
 3867 0006 00000000 		.space	9
 3867      00000000 
 3867      00
 3868 000f 00       		.space	1
 3869 0010 2E       		.byte	46
 3870 0011 000000   		.space	3
 3871 0014 FFFFFFFF 		.word	-1
 3872 0018 2E       		.byte	46
 3873 0019 000000   		.space	3
 3874 001c FFFFFFFF 		.word	-1
 3875 0020 00       		.ascii	"\000"
 3876 0021 00000000 		.space	7
 3876      000000
ARM GAS  /tmp/ccLcrImZ.s 			page 103


 3877 0028 00       		.ascii	"\000"
 3878 0029 00000000 		.space	7
 3878      000000
 3879 0030 2E       		.byte	46
 3880 0031 000000   		.space	3
 3881 0034 FFFFFFFF 		.word	-1
 3882 0038 2E       		.byte	46
 3883 0039 000000   		.space	3
 3884 003c FFFFFFFF 		.word	-1
 3885 0040 00       		.ascii	"\000"
 3886 0041 00000000 		.space	7
 3886      000000
 3887 0048 00       		.ascii	"\000"
 3888 0049 00000000 		.space	7
 3888      000000
 3889 0050 2E       		.byte	46
 3890 0051 000000   		.space	3
 3891 0054 FFFFFFFF 		.word	-1
 3892 0058 2E       		.byte	46
 3893 0059 000000   		.space	3
 3894 005c FFFFFFFF 		.word	-1
 3895 0060 00       		.ascii	"\000"
 3896 0061 00000000 		.space	7
 3896      000000
 3897 0068 00       		.ascii	"\000"
 3898 0069 00000000 		.space	7
 3898      000000
 3899 0070 2E       		.byte	46
 3900 0071 000000   		.space	3
 3901 0074 FFFFFFFF 		.word	-1
 3902 0078 2E       		.byte	46
 3903 0079 000000   		.space	3
 3904 007c FFFFFFFF 		.word	-1
 3905 0080 00       		.ascii	"\000"
 3906 0081 00000000 		.space	7
 3906      000000
 3907 0088 00       		.ascii	"\000"
 3908 0089 00000000 		.space	7
 3908      000000
 3909 0090 2C       		.byte	44
 3910 0091 000000   		.space	3
 3911 0094 FFFFFFFF 		.word	-1
 3912 0098 2E       		.byte	46
 3913 0099 000000   		.space	3
 3914 009c FFFFFFFF 		.word	-1
 3915 00a0 2D2D0D00 		.ascii	"--\015\000"
 3916 00a4 00000000 		.space	4
 3917 00a8 00       		.ascii	"\000"
 3918 00a9 00000000 		.space	7
 3918      000000
 3919 00b0 2D       		.byte	45
 3920 00b1 000000   		.space	3
 3921 00b4 FFFFFFFF 		.word	-1
 3922 00b8 31       		.byte	49
 3923 00b9 000000   		.space	3
 3924 00bc 0B000000 		.word	11
 3925 00c0 43505800 		.ascii	"CPX\000"
ARM GAS  /tmp/ccLcrImZ.s 			page 104


 3926 00c4 00000000 		.space	4
 3927 00c8 00       		.ascii	"\000"
 3928 00c9 00000000 		.space	7
 3928      000000
 3929 00d0 436C6561 		.ascii	"Clear\000"
 3929      7200
 3930 00d6 00000000 		.space	9
 3930      00000000 
 3930      00
 3931 00df 00       		.space	1
 3932 00e0 10       		.byte	16
 3933 00e1 000000   		.space	3
 3934 00e4 01000000 		.word	1
 3935 00e8 34       		.byte	52
 3936 00e9 000000   		.space	3
 3937 00ec 44010000 		.word	324
 3938 00f0 434C5072 		.ascii	"CLProg\000"
 3938      6F6700
 3939 00f7 00       		.space	1
 3940 00f8 434C5041 		.ascii	"CLPAll\000"
 3940      6C6C00
 3941 00ff 00       		.space	1
 3942 0100 10       		.byte	16
 3943 0101 000000   		.space	3
 3944 0104 02000000 		.word	2
 3945 0108 34       		.byte	52
 3946 0109 000000   		.space	3
 3947 010c 3E010000 		.word	318
 3948 0110 434C9100 		.ascii	"CL\221\000"
 3949 0114 00000000 		.space	4
 3950 0118 434C5265 		.ascii	"CLReg\000"
 3950      6700
 3951 011e 0000     		.space	2
 3952 0120 10       		.byte	16
 3953 0121 000000   		.space	3
 3954 0124 03000000 		.word	3
 3955 0128 34       		.byte	52
 3956 0129 000000   		.space	3
 3957 012c 74010000 		.word	372
 3958 0130 434C7800 		.ascii	"CLx\000"
 3959 0134 00000000 		.space	4
 3960 0138 434C06A0 		.ascii	"CL\006\240\000"
 3960      00
 3961 013d 000000   		.space	3
 3962 0140 34       		.byte	52
 3963 0141 000000   		.space	3
 3964 0144 40010000 		.word	320
 3965 0148 34       		.byte	52
 3966 0149 000000   		.space	3
 3967 014c 41010000 		.word	321
 3968 0150 434C5374 		.ascii	"CLStk\000"
 3968      6B00
 3969 0156 0000     		.space	2
 3970 0158 434C416C 		.ascii	"CLAll\000"
 3970      6C00
 3971 015e 0000     		.space	2
 3972 0160 2C       		.byte	44
ARM GAS  /tmp/ccLcrImZ.s 			page 105


 3973 0161 000000   		.space	3
 3974 0164 FFFFFFFF 		.word	-1
 3975 0168 2E       		.byte	46
 3976 0169 000000   		.space	3
 3977 016c FFFFFFFF 		.word	-1
 3978 0170 2D2D0D00 		.ascii	"--\015\000"
 3979 0174 00000000 		.space	4
 3980 0178 00       		.ascii	"\000"
 3981 0179 00000000 		.space	7
 3981      000000
 3982 0180 2D       		.byte	45
 3983 0181 000000   		.space	3
 3984 0184 FFFFFFFF 		.word	-1
 3985 0188 2E       		.byte	46
 3986 0189 000000   		.space	3
 3987 018c FFFFFFFF 		.word	-1
 3988 0190 43505800 		.ascii	"CPX\000"
 3989 0194 00000000 		.space	4
 3990 0198 00       		.ascii	"\000"
 3991 0199 00000000 		.space	7
 3991      000000
 3992 01a0 44495350 		.ascii	"DISP\000"
 3992      00
 3993 01a5 00000000 		.space	10
 3993      00000000 
 3993      0000
 3994 01af 00       		.space	1
 3995 01b0 00       		.byte	0
 3996 01b1 000000   		.space	3
 3997 01b4 03000000 		.word	3
 3998 01b8 05       		.byte	5
 3999 01b9 000000   		.space	3
 4000 01bc 01000000 		.word	1
 4001 01c0 414C4C00 		.ascii	"ALL\000"
 4002 01c4 00000000 		.space	4
 4003 01c8 6120622F 		.ascii	"a b/c\000"
 4003      6300
 4004 01ce 0000     		.space	2
 4005 01d0 01       		.byte	1
 4006 01d1 000000   		.space	3
 4007 01d4 03000000 		.word	3
 4008 01d8 05       		.byte	5
 4009 01d9 000000   		.space	3
 4010 01dc 02000000 		.word	2
 4011 01e0 46495800 		.ascii	"FIX\000"
 4012 01e4 00000000 		.space	4
 4013 01e8 642F6300 		.ascii	"d/c\000"
 4014 01ec 00000000 		.space	4
 4015 01f0 02       		.byte	2
 4016 01f1 000000   		.space	3
 4017 01f4 03000000 		.word	3
 4018 01f8 06       		.byte	6
 4019 01f9 000000   		.space	3
 4020 01fc 01000000 		.word	1
 4021 0200 53434900 		.ascii	"SCI\000"
 4022 0204 00000000 		.space	4
 4023 0208 482E4D53 		.ascii	"H.MS\000"
ARM GAS  /tmp/ccLcrImZ.s 			page 106


 4023      00
 4024 020d 000000   		.space	3
 4025 0210 03       		.byte	3
 4026 0211 000000   		.space	3
 4027 0214 03000000 		.word	3
 4028 0218 07       		.byte	7
 4029 0219 000000   		.space	3
 4030 021c 01000000 		.word	1
 4031 0220 454E4700 		.ascii	"ENG\000"
 4032 0224 00000000 		.space	4
 4033 0228 482E6400 		.ascii	"H.d\000"
 4034 022c 00000000 		.space	4
 4035 0230 2C       		.byte	44
 4036 0231 000000   		.space	3
 4037 0234 FFFFFFFF 		.word	-1
 4038 0238 26       		.byte	38
 4039 0239 000000   		.space	3
 4040 023c 03000000 		.word	3
 4041 0240 2D2D0D00 		.ascii	"--\015\000"
 4042 0244 00000000 		.space	4
 4043 0248 2E2F2C00 		.ascii	"./,\000"
 4044 024c 00000000 		.space	4
 4045 0250 2D       		.byte	45
 4046 0251 000000   		.space	3
 4047 0254 FFFFFFFF 		.word	-1
 4048 0258 2E       		.byte	46
 4049 0259 000000   		.space	3
 4050 025c FFFFFFFF 		.word	-1
 4051 0260 43505800 		.ascii	"CPX\000"
 4052 0264 00000000 		.space	4
 4053 0268 00       		.ascii	"\000"
 4054 0269 00000000 		.space	7
 4054      000000
 4055 0270 42415345 		.ascii	"BASE\000"
 4055      00
 4056 0275 00000000 		.space	10
 4056      00000000 
 4056      0000
 4057 027f 00       		.space	1
 4058 0280 0E       		.byte	14
 4059 0281 000000   		.space	3
 4060 0284 01000000 		.word	1
 4061 0288 0E       		.byte	14
 4062 0289 000000   		.space	3
 4063 028c 03000000 		.word	3
 4064 0290 42494E00 		.ascii	"BIN\000"
 4065 0294 00000000 		.space	4
 4066 0298 6E6F7400 		.ascii	"not\000"
 4067 029c 00000000 		.space	4
 4068 02a0 0E       		.byte	14
 4069 02a1 000000   		.space	3
 4070 02a4 02000000 		.word	2
 4071 02a8 13       		.byte	19
 4072 02a9 000000   		.space	3
 4073 02ac 03000000 		.word	3
 4074 02b0 4F435400 		.ascii	"OCT\000"
 4075 02b4 00000000 		.space	4
ARM GAS  /tmp/ccLcrImZ.s 			page 107


 4076 02b8 616E6400 		.ascii	"and\000"
 4077 02bc 00000000 		.space	4
 4078 02c0 0F       		.byte	15
 4079 02c1 000000   		.space	3
 4080 02c4 01000000 		.word	1
 4081 02c8 14       		.byte	20
 4082 02c9 000000   		.space	3
 4083 02cc 03000000 		.word	3
 4084 02d0 44454300 		.ascii	"DEC\000"
 4085 02d4 00000000 		.space	4
 4086 02d8 6F7200   		.ascii	"or\000"
 4087 02db 00000000 		.space	5
 4087      00
 4088 02e0 0F       		.byte	15
 4089 02e1 000000   		.space	3
 4090 02e4 02000000 		.word	2
 4091 02e8 15       		.byte	21
 4092 02e9 000000   		.space	3
 4093 02ec 03000000 		.word	3
 4094 02f0 48455800 		.ascii	"HEX\000"
 4095 02f4 00000000 		.space	4
 4096 02f8 786F7200 		.ascii	"xor\000"
 4097 02fc 00000000 		.space	4
 4098 0300 2C       		.byte	44
 4099 0301 000000   		.space	3
 4100 0304 FFFFFFFF 		.word	-1
 4101 0308 16       		.byte	22
 4102 0309 000000   		.space	3
 4103 030c 03000000 		.word	3
 4104 0310 2D2D0D00 		.ascii	"--\015\000"
 4105 0314 00000000 		.space	4
 4106 0318 524D4452 		.ascii	"RMDR\000"
 4106      00
 4107 031d 000000   		.space	3
 4108 0320 2D       		.byte	45
 4109 0321 000000   		.space	3
 4110 0324 FFFFFFFF 		.word	-1
 4111 0328 07       		.byte	7
 4112 0329 000000   		.space	3
 4113 032c 01000000 		.word	1
 4114 0330 43505800 		.ascii	"CPX\000"
 4115 0334 00000000 		.space	4
 4116 0338 482E6400 		.ascii	"H.d\000"
 4117 033c 00000000 		.space	4
 4118 0340 414E474C 		.ascii	"ANGLES\000"
 4118      455300
 4119 0347 00000000 		.space	8
 4119      00000000 
 4120 034f 00       		.space	1
 4121 0350 06       		.byte	6
 4122 0351 000000   		.space	3
 4123 0354 02000000 		.word	2
 4124 0358 04       		.byte	4
 4125 0359 000000   		.space	3
 4126 035c 01000000 		.word	1
 4127 0360 44454700 		.ascii	"DEG\000"
 4128 0364 00000000 		.space	4
ARM GAS  /tmp/ccLcrImZ.s 			page 108


 4129 0368 500D5200 		.ascii	"P\015R\000"
 4130 036c 00000000 		.space	4
 4131 0370 07       		.byte	7
 4132 0371 000000   		.space	3
 4133 0374 02000000 		.word	2
 4134 0378 04       		.byte	4
 4135 0379 000000   		.space	3
 4136 037c 02000000 		.word	2
 4137 0380 52414400 		.ascii	"RAD\000"
 4138 0384 00000000 		.space	4
 4139 0388 520D5000 		.ascii	"R\015P\000"
 4140 038c 00000000 		.space	4
 4141 0390 08       		.byte	8
 4142 0391 000000   		.space	3
 4143 0394 02000000 		.word	2
 4144 0398 00       		.byte	0
 4145 0399 000000   		.space	3
 4146 039c 01000000 		.word	1
 4147 03a0 47524144 		.ascii	"GRAD\000"
 4147      00
 4148 03a5 000000   		.space	3
 4149 03a8 48595000 		.ascii	"HYP\000"
 4150 03ac 00000000 		.space	4
 4151 03b0 06       		.byte	6
 4152 03b1 000000   		.space	3
 4153 03b4 01000000 		.word	1
 4154 03b8 07       		.byte	7
 4155 03b9 000000   		.space	3
 4156 03bc 01000000 		.word	1
 4157 03c0 482E4D53 		.ascii	"H.MS\000"
 4157      00
 4158 03c5 000000   		.space	3
 4159 03c8 482E6400 		.ascii	"H.d\000"
 4160 03cc 00000000 		.space	4
 4161 03d0 2C       		.byte	44
 4162 03d1 000000   		.space	3
 4163 03d4 FFFFFFFF 		.word	-1
 4164 03d8 00       		.byte	0
 4165 03d9 000000   		.space	3
 4166 03dc 02000000 		.word	2
 4167 03e0 2D2D0D00 		.ascii	"--\015\000"
 4168 03e4 00000000 		.space	4
 4169 03e8 4859509D 		.ascii	"HYP\235\000"
 4169      00
 4170 03ed 000000   		.space	3
 4171 03f0 2D       		.byte	45
 4172 03f1 000000   		.space	3
 4173 03f4 FFFFFFFF 		.word	-1
 4174 03f8 2E       		.byte	46
 4175 03f9 000000   		.space	3
 4176 03fc FFFFFFFF 		.word	-1
 4177 0400 43505800 		.ascii	"CPX\000"
 4178 0404 00000000 		.space	4
 4179 0408 00       		.ascii	"\000"
 4180 0409 00000000 		.space	7
 4180      000000
 4181 0410 4D495343 		.ascii	"MISC\000"
ARM GAS  /tmp/ccLcrImZ.s 			page 109


 4181      00
 4182 0415 00000000 		.space	10
 4182      00000000 
 4182      0000
 4183 041f 00       		.space	1
 4184 0420 25       		.byte	37
 4185 0421 000000   		.space	3
 4186 0424 01000000 		.word	1
 4187 0428 14       		.byte	20
 4188 0429 000000   		.space	3
 4189 042c 01000000 		.word	1
 4190 0430 7C587C00 		.ascii	"|X|\000"
 4191 0434 00000000 		.space	4
 4192 0438 329C00   		.ascii	"2\234\000"
 4193 043b 00000000 		.space	5
 4193      00
 4194 0440 25       		.byte	37
 4195 0441 000000   		.space	3
 4196 0444 02000000 		.word	2
 4197 0448 14       		.byte	20
 4198 0449 000000   		.space	3
 4199 044c 02000000 		.word	2
 4200 0450 524E4400 		.ascii	"RND\000"
 4201 0454 00000000 		.space	4
 4202 0458 4C6F67BA 		.ascii	"Log\272\000"
 4202      00
 4203 045d 000000   		.space	3
 4204 0460 26       		.byte	38
 4205 0461 000000   		.space	3
 4206 0464 01000000 		.word	1
 4207 0468 15       		.byte	21
 4208 0469 000000   		.space	3
 4209 046c 02000000 		.word	2
 4210 0470 49506172 		.ascii	"IPart\000"
 4210      7400
 4211 0476 0000     		.space	2
 4212 0478 4C6F678B 		.ascii	"Log\213\000"
 4212      00
 4213 047d 000000   		.space	3
 4214 0480 26       		.byte	38
 4215 0481 000000   		.space	3
 4216 0484 02000000 		.word	2
 4217 0488 16       		.byte	22
 4218 0489 000000   		.space	3
 4219 048c 02000000 		.word	2
 4220 0490 46506172 		.ascii	"FPart\000"
 4220      7400
 4221 0496 0000     		.space	2
 4222 0498 7C7C656C 		.ascii	"||el\000"
 4222      00
 4223 049d 000000   		.space	3
 4224 04a0 2C       		.byte	44
 4225 04a1 000000   		.space	3
 4226 04a4 FFFFFFFF 		.word	-1
 4227 04a8 22       		.byte	34
 4228 04a9 000000   		.space	3
 4229 04ac 02000000 		.word	2
ARM GAS  /tmp/ccLcrImZ.s 			page 110


 4230 04b0 2D2D0D00 		.ascii	"--\015\000"
 4231 04b4 00000000 		.space	4
 4232 04b8 832500   		.ascii	"\203%\000"
 4233 04bb 00000000 		.space	5
 4233      00
 4234 04c0 2D       		.byte	45
 4235 04c1 000000   		.space	3
 4236 04c4 FFFFFFFF 		.word	-1
 4237 04c8 2E       		.byte	46
 4238 04c9 000000   		.space	3
 4239 04cc FFFFFFFF 		.word	-1
 4240 04d0 43505800 		.ascii	"CPX\000"
 4241 04d4 00000000 		.space	4
 4242 04d8 00       		.ascii	"\000"
 4243 04d9 00000000 		.space	7
 4243      000000
 4244 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 4244      204B6579 
 4244      00
 4245 04e9 00000000 		.space	6
 4245      0000
 4246 04ef 00       		.space	1
 4247 04f0 0D       		.byte	13
 4248 04f1 000000   		.space	3
 4249 04f4 01000000 		.word	1
 4250 04f8 34       		.byte	52
 4251 04f9 000000   		.space	3
 4252 04fc 00A60000 		.word	42496
 4253 0500 53686F77 		.ascii	"Show\016\000"
 4253      0E00
 4254 0506 0000     		.space	2
 4255 0508 5B175D00 		.ascii	"[\027]\000"
 4256 050c 00000000 		.space	4
 4257 0510 0D       		.byte	13
 4258 0511 000000   		.space	3
 4259 0514 02000000 		.word	2
 4260 0518 2E       		.byte	46
 4261 0519 000000   		.space	3
 4262 051c FFFFFFFF 		.word	-1
 4263 0520 53686F77 		.ascii	"Show\015\000"
 4263      0D00
 4264 0526 0000     		.space	2
 4265 0528 00       		.ascii	"\000"
 4266 0529 00000000 		.space	7
 4266      000000
 4267 0530 0D       		.byte	13
 4268 0531 000000   		.space	3
 4269 0534 03000000 		.word	3
 4270 0538 34       		.byte	52
 4271 0539 000000   		.space	3
 4272 053c 00330000 		.word	13056
 4273 0540 78173F00 		.ascii	"x\027?\000"
 4274 0544 00000000 		.space	4
 4275 0548 7A173F00 		.ascii	"z\027?\000"
 4276 054c 00000000 		.space	4
 4277 0550 34       		.byte	52
 4278 0551 000000   		.space	3
ARM GAS  /tmp/ccLcrImZ.s 			page 111


 4279 0554 00320000 		.word	12800
 4280 0558 34       		.byte	52
 4281 0559 000000   		.space	3
 4282 055c 00340000 		.word	13312
 4283 0560 79173F00 		.ascii	"y\027?\000"
 4284 0564 00000000 		.space	4
 4285 0568 74173F00 		.ascii	"t\027?\000"
 4286 056c 00000000 		.space	4
 4287 0570 2C       		.byte	44
 4288 0571 000000   		.space	3
 4289 0574 FFFFFFFF 		.word	-1
 4290 0578 2E       		.byte	46
 4291 0579 000000   		.space	3
 4292 057c FFFFFFFF 		.word	-1
 4293 0580 2D2D0D00 		.ascii	"--\015\000"
 4294 0584 00000000 		.space	4
 4295 0588 00       		.ascii	"\000"
 4296 0589 00000000 		.space	7
 4296      000000
 4297 0590 2D       		.byte	45
 4298 0591 000000   		.space	3
 4299 0594 FFFFFFFF 		.word	-1
 4300 0598 2E       		.byte	46
 4301 0599 000000   		.space	3
 4302 059c FFFFFFFF 		.word	-1
 4303 05a0 43505800 		.ascii	"CPX\000"
 4304 05a4 00000000 		.space	4
 4305 05a8 00       		.ascii	"\000"
 4306 05a9 00000000 		.space	7
 4306      000000
 4307 05b0 50726F67 		.ascii	"Program\000"
 4307      72616D00 
 4308 05b8 00000000 		.space	7
 4308      000000
 4309 05bf 00       		.space	1
 4310 05c0 27       		.byte	39
 4311 05c1 000000   		.space	3
 4312 05c4 01000000 		.word	1
 4313 05c8 28       		.byte	40
 4314 05c9 000000   		.space	3
 4315 05cc 01000000 		.word	1
 4316 05d0 4C424C00 		.ascii	"LBL\000"
 4317 05d4 00000000 		.space	4
 4318 05d8 44534500 		.ascii	"DSE\000"
 4319 05dc 00000000 		.space	4
 4320 05e0 27       		.byte	39
 4321 05e1 000000   		.space	3
 4322 05e4 02000000 		.word	2
 4323 05e8 28       		.byte	40
 4324 05e9 000000   		.space	3
 4325 05ec 02000000 		.word	2
 4326 05f0 52544E00 		.ascii	"RTN\000"
 4327 05f4 00000000 		.space	4
 4328 05f8 49534700 		.ascii	"ISG\000"
 4329 05fc 00000000 		.space	4
 4330 0600 25       		.byte	37
 4331 0601 000000   		.space	3
ARM GAS  /tmp/ccLcrImZ.s 			page 112


 4332 0604 03000000 		.word	3
 4333 0608 34       		.byte	52
 4334 0609 000000   		.space	3
 4335 060c 00600000 		.word	24576
 4336 0610 50617573 		.ascii	"Pause\000"
 4336      6500
 4337 0616 0000     		.space	2
 4338 0618 44454300 		.ascii	"DEC\000"
 4339 061c 00000000 		.space	4
 4340 0620 12       		.byte	18
 4341 0621 000000   		.space	3
 4342 0624 03000000 		.word	3
 4343 0628 34       		.byte	52
 4344 0629 000000   		.space	3
 4345 062c 00610000 		.word	24832
 4346 0630 47544F00 		.ascii	"GTO\000"
 4347 0634 00000000 		.space	4
 4348 0638 494E4300 		.ascii	"INC\000"
 4349 063c 00000000 		.space	4
 4350 0640 2C       		.byte	44
 4351 0641 000000   		.space	3
 4352 0644 FFFFFFFF 		.word	-1
 4353 0648 34       		.byte	52
 4354 0649 000000   		.space	3
 4355 064c 00570000 		.word	22272
 4356 0650 2D2D0D00 		.ascii	"--\015\000"
 4357 0654 00000000 		.space	4
 4358 0658 4241434B 		.ascii	"BACK\000"
 4358      00
 4359 065d 000000   		.space	3
 4360 0660 2D       		.byte	45
 4361 0661 000000   		.space	3
 4362 0664 FFFFFFFF 		.word	-1
 4363 0668 34       		.byte	52
 4364 0669 000000   		.space	3
 4365 066c 00560000 		.word	22016
 4366 0670 43505800 		.ascii	"CPX\000"
 4367 0674 00000000 		.space	4
 4368 0678 534B4950 		.ascii	"SKIP\000"
 4368      00
 4369 067d 000000   		.space	3
 4370 0680 53657475 		.ascii	"Setup 1\000"
 4370      70203100 
 4371 0688 00000000 		.space	7
 4371      000000
 4372 068f 00       		.space	1
 4373 0690 32       		.byte	50
 4374 0691 000000   		.space	3
 4375 0694 00000000 		.word	0
 4376 0698 30       		.byte	48
 4377 0699 000000   		.space	3
 4378 069c 00000000 		.word	0
 4379 06a0 45584954 		.ascii	"EXIT\000"
 4379      00
 4380 06a5 000000   		.space	3
 4381 06a8 53797374 		.ascii	"System\000"
 4381      656D00
ARM GAS  /tmp/ccLcrImZ.s 			page 113


 4382 06af 00       		.space	1
 4383 06b0 31       		.byte	49
 4384 06b1 000000   		.space	3
 4385 06b4 09000000 		.word	9
 4386 06b8 2E       		.byte	46
 4387 06b9 000000   		.space	3
 4388 06bc FFFFFFFF 		.word	-1
 4389 06c0 48454C50 		.ascii	"HELP\000"
 4389      00
 4390 06c5 000000   		.space	3
 4391 06c8 00       		.ascii	"\000"
 4392 06c9 00000000 		.space	7
 4392      000000
 4393 06d0 31       		.byte	49
 4394 06d1 000000   		.space	3
 4395 06d4 02000000 		.word	2
 4396 06d8 31       		.byte	49
 4397 06d9 000000   		.space	3
 4398 06dc 06000000 		.word	6
 4399 06e0 4F6E5354 		.ascii	"OnSTO\000"
 4399      4F00
 4400 06e6 0000     		.space	2
 4401 06e8 53765241 		.ascii	"SvRAM\000"
 4401      4D00
 4402 06ee 0000     		.space	2
 4403 06f0 31       		.byte	49
 4404 06f1 000000   		.space	3
 4405 06f4 03000000 		.word	3
 4406 06f8 31       		.byte	49
 4407 06f9 000000   		.space	3
 4408 06fc 07000000 		.word	7
 4409 0700 4F6E5243 		.ascii	"OnRCL\000"
 4409      4C00
 4410 0706 0000     		.space	2
 4411 0708 4C645241 		.ascii	"LdRAM\000"
 4411      4D00
 4412 070e 0000     		.space	2
 4413 0710 2C       		.byte	44
 4414 0711 000000   		.space	3
 4415 0714 FFFFFFFF 		.word	-1
 4416 0718 2E       		.byte	46
 4417 0719 000000   		.space	3
 4418 071c FFFFFFFF 		.word	-1
 4419 0720 2D2D0D00 		.ascii	"--\015\000"
 4420 0724 00000000 		.space	4
 4421 0728 00       		.ascii	"\000"
 4422 0729 00000000 		.space	7
 4422      000000
 4423 0730 2D       		.byte	45
 4424 0731 000000   		.space	3
 4425 0734 FFFFFFFF 		.word	-1
 4426 0738 2E       		.byte	46
 4427 0739 000000   		.space	3
 4428 073c FFFFFFFF 		.word	-1
 4429 0740 43505800 		.ascii	"CPX\000"
 4430 0744 00000000 		.space	4
 4431 0748 00       		.ascii	"\000"
ARM GAS  /tmp/ccLcrImZ.s 			page 114


 4432 0749 00000000 		.space	7
 4432      000000
 4433 0750 4172726F 		.ascii	"Arrow\000"
 4433      7700
 4434 0756 00000000 		.space	9
 4434      00000000 
 4434      00
 4435 075f 00       		.space	1
 4436 0760 0E       		.byte	14
 4437 0761 000000   		.space	3
 4438 0764 01000000 		.word	1
 4439 0768 06       		.byte	6
 4440 0769 000000   		.space	3
 4441 076c 02000000 		.word	2
 4442 0770 42696E00 		.ascii	"Bin\000"
 4443 0774 00000000 		.space	4
 4444 0778 44454700 		.ascii	"DEG\000"
 4445 077c 00000000 		.space	4
 4446 0780 0E       		.byte	14
 4447 0781 000000   		.space	3
 4448 0784 02000000 		.word	2
 4449 0788 07       		.byte	7
 4450 0789 000000   		.space	3
 4451 078c 02000000 		.word	2
 4452 0790 4F637400 		.ascii	"Oct\000"
 4453 0794 00000000 		.space	4
 4454 0798 52414400 		.ascii	"RAD\000"
 4455 079c 00000000 		.space	4
 4456 07a0 0F       		.byte	15
 4457 07a1 000000   		.space	3
 4458 07a4 01000000 		.word	1
 4459 07a8 08       		.byte	8
 4460 07a9 000000   		.space	3
 4461 07ac 02000000 		.word	2
 4462 07b0 44656300 		.ascii	"Dec\000"
 4463 07b4 00000000 		.space	4
 4464 07b8 47726164 		.ascii	"Grad\000"
 4464      00
 4465 07bd 000000   		.space	3
 4466 07c0 0F       		.byte	15
 4467 07c1 000000   		.space	3
 4468 07c4 02000000 		.word	2
 4469 07c8 06       		.byte	6
 4470 07c9 000000   		.space	3
 4471 07cc 01000000 		.word	1
 4472 07d0 48657800 		.ascii	"Hex\000"
 4473 07d4 00000000 		.space	4
 4474 07d8 0D484D53 		.ascii	"\015HMS\000"
 4474      00
 4475 07dd 000000   		.space	3
 4476 07e0 2C       		.byte	44
 4477 07e1 000000   		.space	3
 4478 07e4 FFFFFFFF 		.word	-1
 4479 07e8 07       		.byte	7
 4480 07e9 000000   		.space	3
 4481 07ec 01000000 		.word	1
 4482 07f0 2D2D0D00 		.ascii	"--\015\000"
ARM GAS  /tmp/ccLcrImZ.s 			page 115


 4483 07f4 00000000 		.space	4
 4484 07f8 484D530D 		.ascii	"HMS\015\000"
 4484      00
 4485 07fd 000000   		.space	3
 4486 0800 2D       		.byte	45
 4487 0801 000000   		.space	3
 4488 0804 FFFFFFFF 		.word	-1
 4489 0808 2E       		.byte	46
 4490 0809 000000   		.space	3
 4491 080c FFFFFFFF 		.word	-1
 4492 0810 43505800 		.ascii	"CPX\000"
 4493 0814 00000000 		.space	4
 4494 0818 00       		.ascii	"\000"
 4495 0819 00000000 		.space	7
 4495      000000
 4496 0820 466C6167 		.ascii	"Flags\000"
 4496      7300
 4497 0826 00000000 		.space	9
 4497      00000000 
 4497      00
 4498 082f 00       		.space	1
 4499 0830 1E       		.byte	30
 4500 0831 000000   		.space	3
 4501 0834 01000000 		.word	1
 4502 0838 34       		.byte	52
 4503 0839 000000   		.space	3
 4504 083c 00740000 		.word	29696
 4505 0840 53465F00 		.ascii	"SF_\000"
 4506 0844 00000000 		.space	4
 4507 0848 46533F00 		.ascii	"FS?\000"
 4508 084c 00000000 		.space	4
 4509 0850 1E       		.byte	30
 4510 0851 000000   		.space	3
 4511 0854 02000000 		.word	2
 4512 0858 34       		.byte	52
 4513 0859 000000   		.space	3
 4514 085c 00750000 		.word	29952
 4515 0860 43465F00 		.ascii	"CF_\000"
 4516 0864 00000000 		.space	4
 4517 0868 46433F00 		.ascii	"FC?\000"
 4518 086c 00000000 		.space	4
 4519 0870 1F       		.byte	31
 4520 0871 000000   		.space	3
 4521 0874 01000000 		.word	1
 4522 0878 34       		.byte	52
 4523 0879 000000   		.space	3
 4524 087c 00500000 		.word	20480
 4525 0880 783D3F00 		.ascii	"x=?\000"
 4526 0884 00000000 		.space	4
 4527 0888 783C3F00 		.ascii	"x<?\000"
 4528 088c 00000000 		.space	4
 4529 0890 1F       		.byte	31
 4530 0891 000000   		.space	3
 4531 0894 02000000 		.word	2
 4532 0898 34       		.byte	52
 4533 0899 000000   		.space	3
 4534 089c 00510000 		.word	20736
ARM GAS  /tmp/ccLcrImZ.s 			page 116


 4535 08a0 780B3F00 		.ascii	"x\013?\000"
 4536 08a4 00000000 		.space	4
 4537 08a8 783C3D3F 		.ascii	"x<=?\000"
 4537      00
 4538 08ad 000000   		.space	3
 4539 08b0 2C       		.byte	44
 4540 08b1 000000   		.space	3
 4541 08b4 FFFFFFFF 		.word	-1
 4542 08b8 34       		.byte	52
 4543 08b9 000000   		.space	3
 4544 08bc 00530000 		.word	21248
 4545 08c0 2D2D0D00 		.ascii	"--\015\000"
 4546 08c4 00000000 		.space	4
 4547 08c8 783E3D3F 		.ascii	"x>=?\000"
 4547      00
 4548 08cd 000000   		.space	3
 4549 08d0 2D       		.byte	45
 4550 08d1 000000   		.space	3
 4551 08d4 FFFFFFFF 		.word	-1
 4552 08d8 34       		.byte	52
 4553 08d9 000000   		.space	3
 4554 08dc 00520000 		.word	20992
 4555 08e0 43505800 		.ascii	"CPX\000"
 4556 08e4 00000000 		.space	4
 4557 08e8 783E3F00 		.ascii	"x>?\000"
 4558 08ec 00000000 		.space	4
 4559 08f0 50726F62 		.ascii	"Probability\000"
 4559      6162696C 
 4559      69747900 
 4560 08fc 000000   		.space	3
 4561 08ff 00       		.space	1
 4562 0900 18       		.byte	24
 4563 0901 000000   		.space	3
 4564 0904 03000000 		.word	3
 4565 0908 34       		.byte	52
 4566 0909 000000   		.space	3
 4567 090c 31020000 		.word	561
 4568 0910 46616374 		.ascii	"Fact!\000"
 4568      2100
 4569 0916 0000     		.space	2
 4570 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 4570      00
 4571 091d 000000   		.space	3
 4572 0920 18       		.byte	24
 4573 0921 000000   		.space	3
 4574 0924 01000000 		.word	1
 4575 0928 19       		.byte	25
 4576 0929 000000   		.space	3
 4577 092c 01000000 		.word	1
 4578 0930 43792C78 		.ascii	"Cy,x\000"
 4578      00
 4579 0935 000000   		.space	3
 4580 0938 9400     		.ascii	"\224\000"
 4581 093a 00000000 		.space	6
 4581      0000
 4582 0940 18       		.byte	24
 4583 0941 000000   		.space	3
ARM GAS  /tmp/ccLcrImZ.s 			page 117


 4584 0944 02000000 		.word	2
 4585 0948 19       		.byte	25
 4586 0949 000000   		.space	3
 4587 094c 02000000 		.word	2
 4588 0950 50792C78 		.ascii	"Py,x\000"
 4588      00
 4589 0955 000000   		.space	3
 4590 0958 949D00   		.ascii	"\224\235\000"
 4591 095b 00000000 		.space	5
 4591      00
 4592 0960 08       		.byte	8
 4593 0961 000000   		.space	3
 4594 0964 01000000 		.word	1
 4595 0968 34       		.byte	52
 4596 0969 000000   		.space	3
 4597 096c 34010000 		.word	308
 4598 0970 52414E23 		.ascii	"RAN#\000"
 4598      00
 4599 0975 000000   		.space	3
 4600 0978 53454544 		.ascii	"SEED\000"
 4600      00
 4601 097d 000000   		.space	3
 4602 0980 2C       		.byte	44
 4603 0981 000000   		.space	3
 4604 0984 FFFFFFFF 		.word	-1
 4605 0988 2E       		.byte	46
 4606 0989 000000   		.space	3
 4607 098c FFFFFFFF 		.word	-1
 4608 0990 2D2D0D00 		.ascii	"--\015\000"
 4609 0994 00000000 		.space	4
 4610 0998 00       		.ascii	"\000"
 4611 0999 00000000 		.space	7
 4611      000000
 4612 09a0 2D       		.byte	45
 4613 09a1 000000   		.space	3
 4614 09a4 FFFFFFFF 		.word	-1
 4615 09a8 2E       		.byte	46
 4616 09a9 000000   		.space	3
 4617 09ac FFFFFFFF 		.word	-1
 4618 09b0 43505800 		.ascii	"CPX\000"
 4619 09b4 00000000 		.space	4
 4620 09b8 00       		.ascii	"\000"
 4621 09b9 00000000 		.space	7
 4621      000000
 4622 09c0 53746174 		.ascii	"Statistics\000"
 4622      69737469 
 4622      637300
 4623 09cb 00000000 		.space	4
 4624 09cf 00       		.space	1
 4625 09d0 1A       		.byte	26
 4626 09d1 000000   		.space	3
 4627 09d4 01000000 		.word	1
 4628 09d8 1A       		.byte	26
 4629 09d9 000000   		.space	3
 4630 09dc 02000000 		.word	2
 4631 09e0 0100     		.ascii	"\001\000"
 4632 09e2 00000000 		.space	6
ARM GAS  /tmp/ccLcrImZ.s 			page 118


 4632      0000
 4633 09e8 532E442E 		.ascii	"S.D.\000"
 4633      00
 4634 09ed 000000   		.space	3
 4635 09f0 1B       		.byte	27
 4636 09f1 000000   		.space	3
 4637 09f4 01000000 		.word	1
 4638 09f8 34       		.byte	52
 4639 09f9 000000   		.space	3
 4640 09fc 74020000 		.word	628
 4641 0a00 792D6861 		.ascii	"y-hat\000"
 4641      7400
 4642 0a06 0000     		.space	2
 4643 0a08 782D6861 		.ascii	"x-hat\000"
 4643      7400
 4644 0a0e 0000     		.space	2
 4645 0a10 34       		.byte	52
 4646 0a11 000000   		.space	3
 4647 0a14 27010000 		.word	295
 4648 0a18 34       		.byte	52
 4649 0a19 000000   		.space	3
 4650 0a1c 28010000 		.word	296
 4651 0a20 434F5252 		.ascii	"CORR\000"
 4651      00
 4652 0a25 000000   		.space	3
 4653 0a28 4C2E522E 		.ascii	"L.R.\000"
 4653      00
 4654 0a2d 000000   		.space	3
 4655 0a30 34       		.byte	52
 4656 0a31 000000   		.space	3
 4657 0a34 32010000 		.word	306
 4658 0a38 34       		.byte	52
 4659 0a39 000000   		.space	3
 4660 0a3c 31010000 		.word	305
 4661 0a40 42657374 		.ascii	"BestF\000"
 4661      4600
 4662 0a46 0000     		.space	2
 4663 0a48 4C6F6746 		.ascii	"LogFit\000"
 4663      697400
 4664 0a4f 00       		.space	1
 4665 0a50 34       		.byte	52
 4666 0a51 000000   		.space	3
 4667 0a54 2E010000 		.word	302
 4668 0a58 34       		.byte	52
 4669 0a59 000000   		.space	3
 4670 0a5c 2F010000 		.word	303
 4671 0a60 4C696E65 		.ascii	"Linear\000"
 4671      617200
 4672 0a67 00       		.space	1
 4673 0a68 45787046 		.ascii	"ExpFit\000"
 4673      697400
 4674 0a6f 00       		.space	1
 4675 0a70 2D       		.byte	45
 4676 0a71 000000   		.space	3
 4677 0a74 FFFFFFFF 		.word	-1
 4678 0a78 34       		.byte	52
 4679 0a79 000000   		.space	3
ARM GAS  /tmp/ccLcrImZ.s 			page 119


 4680 0a7c 30010000 		.word	304
 4681 0a80 43505800 		.ascii	"CPX\000"
 4682 0a84 00000000 		.space	4
 4683 0a88 50777246 		.ascii	"PwrFit\000"
 4683      697400
 4684 0a8f 00       		.space	1
 4685 0a90 53657475 		.ascii	"Setup 2\000"
 4685      70203200 
 4686 0a98 00000000 		.space	7
 4686      000000
 4687 0a9f 00       		.space	1
 4688 0aa0 31       		.byte	49
 4689 0aa1 000000   		.space	3
 4690 0aa4 04000000 		.word	4
 4691 0aa8 2E       		.byte	46
 4692 0aa9 000000   		.space	3
 4693 0aac FFFFFFFF 		.word	-1
 4694 0ab0 53764C49 		.ascii	"SvLIB\000"
 4694      4200
 4695 0ab6 0000     		.space	2
 4696 0ab8 00       		.ascii	"\000"
 4697 0ab9 00000000 		.space	7
 4697      000000
 4698 0ac0 31       		.byte	49
 4699 0ac1 000000   		.space	3
 4700 0ac4 05000000 		.word	5
 4701 0ac8 2E       		.byte	46
 4702 0ac9 000000   		.space	3
 4703 0acc FFFFFFFF 		.word	-1
 4704 0ad0 4C644C49 		.ascii	"LdLIB\000"
 4704      4200
 4705 0ad6 0000     		.space	2
 4706 0ad8 00       		.ascii	"\000"
 4707 0ad9 00000000 		.space	7
 4707      000000
 4708 0ae0 31       		.byte	49
 4709 0ae1 000000   		.space	3
 4710 0ae4 0A000000 		.word	10
 4711 0ae8 2E       		.byte	46
 4712 0ae9 000000   		.space	3
 4713 0aec FFFFFFFF 		.word	-1
 4714 0af0 53764350 		.ascii	"SvCPRG\000"
 4714      524700
 4715 0af7 00       		.space	1
 4716 0af8 00       		.ascii	"\000"
 4717 0af9 00000000 		.space	7
 4717      000000
 4718 0b00 31       		.byte	49
 4719 0b01 000000   		.space	3
 4720 0b04 08000000 		.word	8
 4721 0b08 2E       		.byte	46
 4722 0b09 000000   		.space	3
 4723 0b0c FFFFFFFF 		.word	-1
 4724 0b10 4C645052 		.ascii	"LdPRG\000"
 4724      4700
 4725 0b16 0000     		.space	2
 4726 0b18 00       		.ascii	"\000"
ARM GAS  /tmp/ccLcrImZ.s 			page 120


 4727 0b19 00000000 		.space	7
 4727      000000
 4728 0b20 2C       		.byte	44
 4729 0b21 000000   		.space	3
 4730 0b24 FFFFFFFF 		.word	-1
 4731 0b28 2E       		.byte	46
 4732 0b29 000000   		.space	3
 4733 0b2c FFFFFFFF 		.word	-1
 4734 0b30 2D2D0D00 		.ascii	"--\015\000"
 4735 0b34 00000000 		.space	4
 4736 0b38 00       		.ascii	"\000"
 4737 0b39 00000000 		.space	7
 4737      000000
 4738 0b40 2D       		.byte	45
 4739 0b41 000000   		.space	3
 4740 0b44 FFFFFFFF 		.word	-1
 4741 0b48 2E       		.byte	46
 4742 0b49 000000   		.space	3
 4743 0b4c FFFFFFFF 		.word	-1
 4744 0b50 43505800 		.ascii	"CPX\000"
 4745 0b54 00000000 		.space	4
 4746 0b58 00       		.ascii	"\000"
 4747 0b59 00000000 		.space	7
 4747      000000
 4748 0b60 496E7465 		.ascii	"Integ/Sum/Prod\000"
 4748      672F5375 
 4748      6D2F5072 
 4748      6F6400
 4749 0b6f 00       		.space	1
 4750 0b70 20       		.byte	32
 4751 0b71 000000   		.space	3
 4752 0b74 01000000 		.word	1
 4753 0b78 2E       		.byte	46
 4754 0b79 000000   		.space	3
 4755 0b7c FFFFFFFF 		.word	-1
 4756 0b80 534C5600 		.ascii	"SLV\000"
 4757 0b84 00000000 		.space	4
 4758 0b88 00       		.ascii	"\000"
 4759 0b89 00000000 		.space	7
 4759      000000
 4760 0b90 20       		.byte	32
 4761 0b91 000000   		.space	3
 4762 0b94 02000000 		.word	2
 4763 0b98 2E       		.byte	46
 4764 0b99 000000   		.space	3
 4765 0b9c FFFFFFFF 		.word	-1
 4766 0ba0 04206478 		.ascii	"\004 dx\000"
 4766      00
 4767 0ba5 000000   		.space	3
 4768 0ba8 00       		.ascii	"\000"
 4769 0ba9 00000000 		.space	7
 4769      000000
 4770 0bb0 21       		.byte	33
 4771 0bb1 000000   		.space	3
 4772 0bb4 02000000 		.word	2
 4773 0bb8 2E       		.byte	46
 4774 0bb9 000000   		.space	3
ARM GAS  /tmp/ccLcrImZ.s 			page 121


 4775 0bbc FFFFFFFF 		.word	-1
 4776 0bc0 53554D00 		.ascii	"SUM\000"
 4777 0bc4 00000000 		.space	4
 4778 0bc8 00       		.ascii	"\000"
 4779 0bc9 00000000 		.space	7
 4779      000000
 4780 0bd0 21       		.byte	33
 4781 0bd1 000000   		.space	3
 4782 0bd4 01000000 		.word	1
 4783 0bd8 2E       		.byte	46
 4784 0bd9 000000   		.space	3
 4785 0bdc FFFFFFFF 		.word	-1
 4786 0be0 50524F44 		.ascii	"PROD\000"
 4786      00
 4787 0be5 000000   		.space	3
 4788 0be8 00       		.ascii	"\000"
 4789 0be9 00000000 		.space	7
 4789      000000
 4790 0bf0 2C       		.byte	44
 4791 0bf1 000000   		.space	3
 4792 0bf4 FFFFFFFF 		.word	-1
 4793 0bf8 2E       		.byte	46
 4794 0bf9 000000   		.space	3
 4795 0bfc FFFFFFFF 		.word	-1
 4796 0c00 2D2D0D00 		.ascii	"--\015\000"
 4797 0c04 00000000 		.space	4
 4798 0c08 00       		.ascii	"\000"
 4799 0c09 00000000 		.space	7
 4799      000000
 4800 0c10 2D       		.byte	45
 4801 0c11 000000   		.space	3
 4802 0c14 FFFFFFFF 		.word	-1
 4803 0c18 2E       		.byte	46
 4804 0c19 000000   		.space	3
 4805 0c1c FFFFFFFF 		.word	-1
 4806 0c20 43505800 		.ascii	"CPX\000"
 4807 0c24 00000000 		.space	4
 4808 0c28 00       		.ascii	"\000"
 4809 0c29 00000000 		.space	7
 4809      000000
 4810 0c30 426C616E 		.ascii	"Blank with A-D\000"
 4810      6B207769 
 4810      74682041 
 4810      2D4400
 4811 0c3f 00       		.space	1
 4812 0c40 28       		.byte	40
 4813 0c41 000000   		.space	3
 4814 0c44 03000000 		.word	3
 4815 0c48 2E       		.byte	46
 4816 0c49 000000   		.space	3
 4817 0c4c FFFFFFFF 		.word	-1
 4818 0c50 912B00   		.ascii	"\221+\000"
 4819 0c53 00000000 		.space	5
 4819      00
 4820 0c58 00       		.ascii	"\000"
 4821 0c59 00000000 		.space	7
 4821      000000
ARM GAS  /tmp/ccLcrImZ.s 			page 122


 4822 0c60 16       		.byte	22
 4823 0c61 000000   		.space	3
 4824 0c64 01000000 		.word	1
 4825 0c68 2E       		.byte	46
 4826 0c69 000000   		.space	3
 4827 0c6c FFFFFFFF 		.word	-1
 4828 0c70 312F5800 		.ascii	"1/X\000"
 4829 0c74 00000000 		.space	4
 4830 0c78 00       		.ascii	"\000"
 4831 0c79 00000000 		.space	7
 4831      000000
 4832 0c80 1C       		.byte	28
 4833 0c81 000000   		.space	3
 4834 0c84 01000000 		.word	1
 4835 0c88 2E       		.byte	46
 4836 0c89 000000   		.space	3
 4837 0c8c FFFFFFFF 		.word	-1
 4838 0c90 035800   		.ascii	"\003X\000"
 4839 0c93 00000000 		.space	5
 4839      00
 4840 0c98 00       		.ascii	"\000"
 4841 0c99 00000000 		.space	7
 4841      000000
 4842 0ca0 13       		.byte	19
 4843 0ca1 000000   		.space	3
 4844 0ca4 02000000 		.word	2
 4845 0ca8 2E       		.byte	46
 4846 0ca9 000000   		.space	3
 4847 0cac FFFFFFFF 		.word	-1
 4848 0cb0 4C4F4700 		.ascii	"LOG\000"
 4849 0cb4 00000000 		.space	4
 4850 0cb8 00       		.ascii	"\000"
 4851 0cb9 00000000 		.space	7
 4851      000000
 4852 0cc0 2C       		.byte	44
 4853 0cc1 000000   		.space	3
 4854 0cc4 FFFFFFFF 		.word	-1
 4855 0cc8 2E       		.byte	46
 4856 0cc9 000000   		.space	3
 4857 0ccc FFFFFFFF 		.word	-1
 4858 0cd0 2D2D0D00 		.ascii	"--\015\000"
 4859 0cd4 00000000 		.space	4
 4860 0cd8 00       		.ascii	"\000"
 4861 0cd9 00000000 		.space	7
 4861      000000
 4862 0ce0 2D       		.byte	45
 4863 0ce1 000000   		.space	3
 4864 0ce4 FFFFFFFF 		.word	-1
 4865 0ce8 2E       		.byte	46
 4866 0ce9 000000   		.space	3
 4867 0cec FFFFFFFF 		.word	-1
 4868 0cf0 43505800 		.ascii	"CPX\000"
 4869 0cf4 00000000 		.space	4
 4870 0cf8 00       		.ascii	"\000"
 4871 0cf9 00000000 		.space	7
 4871      000000
 4872 0d00 416C7068 		.ascii	"Alpha\000"
ARM GAS  /tmp/ccLcrImZ.s 			page 123


 4872      6100
 4873 0d06 00000000 		.space	9
 4873      00000000 
 4873      00
 4874 0d0f 00       		.space	1
 4875 0d10 34       		.byte	52
 4876 0d11 000000   		.space	3
 4877 0d14 78010000 		.word	376
 4878 0d18 34       		.byte	52
 4879 0d19 000000   		.space	3
 4880 0d1c 6D010000 		.word	365
 4881 0d20 582D3EA0 		.ascii	"X->\240\000"
 4881      00
 4882 0d25 000000   		.space	3
 4883 0d28 A054494D 		.ascii	"\240TIME\000"
 4883      4500
 4884 0d2e 0000     		.space	2
 4885 0d30 34       		.byte	52
 4886 0d31 000000   		.space	3
 4887 0d34 77010000 		.word	375
 4888 0d38 34       		.byte	52
 4889 0d39 000000   		.space	3
 4890 0d3c 6C010000 		.word	364
 4891 0d40 A02D3E58 		.ascii	"\240->X\000"
 4891      00
 4892 0d45 000000   		.space	3
 4893 0d48 A0444154 		.ascii	"\240DATE\000"
 4893      4500
 4894 0d4e 0000     		.space	2
 4895 0d50 34       		.byte	52
 4896 0d51 000000   		.space	3
 4897 0d54 00480000 		.word	18432
 4898 0d58 34       		.byte	52
 4899 0d59 000000   		.space	3
 4900 0d5c 6A010000 		.word	362
 4901 0d60 A0495000 		.ascii	"\240IP\000"
 4902 0d64 00000000 		.space	4
 4903 0d68 A0444159 		.ascii	"\240DAY\000"
 4903      00
 4904 0d6d 000000   		.space	3
 4905 0d70 34       		.byte	52
 4906 0d71 000000   		.space	3
 4907 0d74 76010000 		.word	374
 4908 0d78 34       		.byte	52
 4909 0d79 000000   		.space	3
 4910 0d7c 6B010000 		.word	363
 4911 0d80 A04C454E 		.ascii	"\240LENG\000"
 4911      4700
 4912 0d86 0000     		.space	2
 4913 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 4913      4800
 4914 0d8e 0000     		.space	2
 4915 0d90 2C       		.byte	44
 4916 0d91 000000   		.space	3
 4917 0d94 FFFFFFFF 		.word	-1
 4918 0d98 2C       		.byte	44
 4919 0d99 000000   		.space	3
ARM GAS  /tmp/ccLcrImZ.s 			page 124


 4920 0d9c 01000000 		.word	1
 4921 0da0 2D2D0D00 		.ascii	"--\015\000"
 4922 0da4 00000000 		.space	4
 4923 0da8 00       		.ascii	"\000"
 4924 0da9 00000000 		.space	7
 4924      000000
 4925 0db0 2D       		.byte	45
 4926 0db1 000000   		.space	3
 4927 0db4 FFFFFFFF 		.word	-1
 4928 0db8 2D       		.byte	45
 4929 0db9 000000   		.space	3
 4930 0dbc 01000000 		.word	1
 4931 0dc0 43505800 		.ascii	"CPX\000"
 4932 0dc4 00000000 		.space	4
 4933 0dc8 00       		.ascii	"\000"
 4934 0dc9 00000000 		.space	7
 4934      000000
 4935              		.section	.rodata.mapping_alpha.10909,"a"
 4936              		.align	2
 4937              		.set	.LANCHOR15,. + 0
 4940              	mapping_alpha.10909:
 4941 0000 63       		.byte	99
 4942 0001 000000   		.space	3
 4943 0004 FFFFFFFF 		.word	-1
 4944 0008 00       		.byte	0
 4945 0009 000000   		.space	3
 4946 000c FFFFFFFF 		.word	-1
 4947 0010 01       		.byte	1
 4948 0011 000000   		.space	3
 4949 0014 FFFFFFFF 		.word	-1
 4950 0018 02       		.byte	2
 4951 0019 000000   		.space	3
 4952 001c FFFFFFFF 		.word	-1
 4953 0020 03       		.byte	3
 4954 0021 000000   		.space	3
 4955 0024 FFFFFFFF 		.word	-1
 4956 0028 04       		.byte	4
 4957 0029 000000   		.space	3
 4958 002c FFFFFFFF 		.word	-1
 4959 0030 05       		.byte	5
 4960 0031 000000   		.space	3
 4961 0034 FFFFFFFF 		.word	-1
 4962 0038 06       		.byte	6
 4963 0039 000000   		.space	3
 4964 003c FFFFFFFF 		.word	-1
 4965 0040 07       		.byte	7
 4966 0041 000000   		.space	3
 4967 0044 FFFFFFFF 		.word	-1
 4968 0048 08       		.byte	8
 4969 0049 000000   		.space	3
 4970 004c FFFFFFFF 		.word	-1
 4971 0050 09       		.byte	9
 4972 0051 000000   		.space	3
 4973 0054 FFFFFFFF 		.word	-1
 4974 0058 0A       		.byte	10
 4975 0059 000000   		.space	3
 4976 005c FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccLcrImZ.s 			page 125


 4977 0060 0B       		.byte	11
 4978 0061 000000   		.space	3
 4979 0064 FFFFFFFF 		.word	-1
 4980 0068 0C       		.byte	12
 4981 0069 000000   		.space	3
 4982 006c FFFFFFFF 		.word	-1
 4983 0070 0D       		.byte	13
 4984 0071 000000   		.space	3
 4985 0074 FFFFFFFF 		.word	-1
 4986 0078 0E       		.byte	14
 4987 0079 000000   		.space	3
 4988 007c FFFFFFFF 		.word	-1
 4989 0080 0F       		.byte	15
 4990 0081 000000   		.space	3
 4991 0084 FFFFFFFF 		.word	-1
 4992 0088 10       		.byte	16
 4993 0089 000000   		.space	3
 4994 008c FFFFFFFF 		.word	-1
 4995 0090 12       		.byte	18
 4996 0091 000000   		.space	3
 4997 0094 FFFFFFFF 		.word	-1
 4998 0098 13       		.byte	19
 4999 0099 000000   		.space	3
 5000 009c FFFFFFFF 		.word	-1
 5001 00a0 14       		.byte	20
 5002 00a1 000000   		.space	3
 5003 00a4 FFFFFFFF 		.word	-1
 5004 00a8 15       		.byte	21
 5005 00a9 000000   		.space	3
 5006 00ac FFFFFFFF 		.word	-1
 5007 00b0 16       		.byte	22
 5008 00b1 000000   		.space	3
 5009 00b4 FFFFFFFF 		.word	-1
 5010 00b8 18       		.byte	24
 5011 00b9 000000   		.space	3
 5012 00bc FFFFFFFF 		.word	-1
 5013 00c0 19       		.byte	25
 5014 00c1 000000   		.space	3
 5015 00c4 FFFFFFFF 		.word	-1
 5016 00c8 1A       		.byte	26
 5017 00c9 000000   		.space	3
 5018 00cc FFFFFFFF 		.word	-1
 5019 00d0 1B       		.byte	27
 5020 00d1 000000   		.space	3
 5021 00d4 FFFFFFFF 		.word	-1
 5022 00d8 1C       		.byte	28
 5023 00d9 000000   		.space	3
 5024 00dc FFFFFFFF 		.word	-1
 5025 00e0 1E       		.byte	30
 5026 00e1 000000   		.space	3
 5027 00e4 FFFFFFFF 		.word	-1
 5028 00e8 1F       		.byte	31
 5029 00e9 000000   		.space	3
 5030 00ec FFFFFFFF 		.word	-1
 5031 00f0 20       		.byte	32
 5032 00f1 000000   		.space	3
 5033 00f4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccLcrImZ.s 			page 126


 5034 00f8 21       		.byte	33
 5035 00f9 000000   		.space	3
 5036 00fc FFFFFFFF 		.word	-1
 5037 0100 22       		.byte	34
 5038 0101 000000   		.space	3
 5039 0104 FFFFFFFF 		.word	-1
 5040 0108 24       		.byte	36
 5041 0109 000000   		.space	3
 5042 010c FFFFFFFF 		.word	-1
 5043 0110 25       		.byte	37
 5044 0111 000000   		.space	3
 5045 0114 FFFFFFFF 		.word	-1
 5046 0118 26       		.byte	38
 5047 0119 000000   		.space	3
 5048 011c FFFFFFFF 		.word	-1
 5049 0120 27       		.byte	39
 5050 0121 000000   		.space	3
 5051 0124 FFFFFFFF 		.word	-1
 5052 0128 28       		.byte	40
 5053 0129 000000   		.space	3
 5054 012c FFFFFFFF 		.word	-1
 5055 0130 2E       		.byte	46
 5056 0131 000000   		.space	3
 5057 0134 FFFFFFFF 		.word	-1
 5058 0138 2E       		.byte	46
 5059 0139 000000   		.space	3
 5060 013c FFFFFFFF 		.word	-1
 5061 0140 2E       		.byte	46
 5062 0141 000000   		.space	3
 5063 0144 FFFFFFFF 		.word	-1
 5064 0148 2E       		.byte	46
 5065 0149 000000   		.space	3
 5066 014c FFFFFFFF 		.word	-1
 5067 0150 2C       		.byte	44
 5068 0151 000000   		.space	3
 5069 0154 FFFFFFFF 		.word	-1
 5070 0158 2D       		.byte	45
 5071 0159 000000   		.space	3
 5072 015c FFFFFFFF 		.word	-1
 5073 0160 2E       		.byte	46
 5074 0161 000000   		.space	3
 5075 0164 FFFFFFFF 		.word	-1
 5076 0168 2E       		.byte	46
 5077 0169 000000   		.space	3
 5078 016c FFFFFFFF 		.word	-1
 5079 0170 2E       		.byte	46
 5080 0171 000000   		.space	3
 5081 0174 FFFFFFFF 		.word	-1
 5082              		.section	.rodata.mapping_fshift.10907,"a"
 5083              		.align	2
 5084              		.set	.LANCHOR13,. + 0
 5087              	mapping_fshift.10907:
 5088 0000 63       		.byte	99
 5089 0001 000000   		.space	3
 5090 0004 FFFFFFFF 		.word	-1
 5091 0008 22       		.byte	34
 5092 0009 000000   		.space	3
ARM GAS  /tmp/ccLcrImZ.s 			page 127


 5093 000c 03000000 		.word	3
 5094 0010 15       		.byte	21
 5095 0011 000000   		.space	3
 5096 0014 01000000 		.word	1
 5097 0018 1C       		.byte	28
 5098 0019 000000   		.space	3
 5099 001c 02000000 		.word	2
 5100 0020 13       		.byte	19
 5101 0021 000000   		.space	3
 5102 0024 01000000 		.word	1
 5103 0028 12       		.byte	18
 5104 0029 000000   		.space	3
 5105 002c 01000000 		.word	1
 5106 0030 12       		.byte	18
 5107 0031 000000   		.space	3
 5108 0034 03000000 		.word	3
 5109 0038 2D       		.byte	45
 5110 0039 000000   		.space	3
 5111 003c 00000000 		.word	0
 5112 0040 22       		.byte	34
 5113 0041 000000   		.space	3
 5114 0044 01000000 		.word	1
 5115 0048 0F       		.byte	15
 5116 0049 000000   		.space	3
 5117 004c 03000000 		.word	3
 5118 0050 01       		.byte	1
 5119 0051 000000   		.space	3
 5120 0054 02000000 		.word	2
 5121 0058 02       		.byte	2
 5122 0059 000000   		.space	3
 5123 005c 02000000 		.word	2
 5124 0060 03       		.byte	3
 5125 0061 000000   		.space	3
 5126 0064 02000000 		.word	2
 5127 0068 0C       		.byte	12
 5128 0069 000000   		.space	3
 5129 006c 01000000 		.word	1
 5130 0070 31       		.byte	49
 5131 0071 000000   		.space	3
 5132 0074 01000000 		.word	1
 5133 0078 2F       		.byte	47
 5134 0079 000000   		.space	3
 5135 007c 04000000 		.word	4
 5136 0080 2F       		.byte	47
 5137 0081 000000   		.space	3
 5138 0084 02000000 		.word	2
 5139 0088 2F       		.byte	47
 5140 0089 000000   		.space	3
 5141 008c 01000000 		.word	1
 5142 0090 18       		.byte	24
 5143 0091 000000   		.space	3
 5144 0094 00000000 		.word	0
 5145 0098 20       		.byte	32
 5146 0099 000000   		.space	3
 5147 009c 01000000 		.word	1
 5148 00a0 2F       		.byte	47
 5149 00a1 000000   		.space	3
ARM GAS  /tmp/ccLcrImZ.s 			page 128


 5150 00a4 0E000000 		.word	14
 5151 00a8 1C       		.byte	28
 5152 00a9 000000   		.space	3
 5153 00ac 03000000 		.word	3
 5154 00b0 2F       		.byte	47
 5155 00b1 000000   		.space	3
 5156 00b4 0C000000 		.word	12
 5157 00b8 1E       		.byte	30
 5158 00b9 000000   		.space	3
 5159 00bc 00000000 		.word	0
 5160 00c0 2F       		.byte	47
 5161 00c1 000000   		.space	3
 5162 00c4 03000000 		.word	3
 5163 00c8 04       		.byte	4
 5164 00c9 000000   		.space	3
 5165 00cc 03000000 		.word	3
 5166 00d0 2F       		.byte	47
 5167 00d1 000000   		.space	3
 5168 00d4 0A000000 		.word	10
 5169 00d8 2F       		.byte	47
 5170 00d9 000000   		.space	3
 5171 00dc 0B000000 		.word	11
 5172 00e0 2A       		.byte	42
 5173 00e1 000000   		.space	3
 5174 00e4 00000000 		.word	0
 5175 00e8 31       		.byte	49
 5176 00e9 000000   		.space	3
 5177 00ec 0D000000 		.word	13
 5178 00f0 2E       		.byte	46
 5179 00f1 000000   		.space	3
 5180 00f4 00000000 		.word	0
 5181 00f8 20       		.byte	32
 5182 00f9 000000   		.space	3
 5183 00fc 03000000 		.word	3
 5184 0100 2E       		.byte	46
 5185 0101 000000   		.space	3
 5186 0104 00000000 		.word	0
 5187 0108 24       		.byte	36
 5188 0109 000000   		.space	3
 5189 010c 03000000 		.word	3
 5190 0110 2F       		.byte	47
 5191 0111 000000   		.space	3
 5192 0114 08000000 		.word	8
 5193 0118 0D       		.byte	13
 5194 0119 000000   		.space	3
 5195 011c 01000000 		.word	1
 5196 0120 27       		.byte	39
 5197 0121 000000   		.space	3
 5198 0124 03000000 		.word	3
 5199 0128 06       		.byte	6
 5200 0129 000000   		.space	3
 5201 012c 03000000 		.word	3
 5202 0130 2E       		.byte	46
 5203 0131 000000   		.space	3
 5204 0134 00000000 		.word	0
 5205 0138 2E       		.byte	46
 5206 0139 000000   		.space	3
ARM GAS  /tmp/ccLcrImZ.s 			page 129


 5207 013c 00000000 		.word	0
 5208 0140 2E       		.byte	46
 5209 0141 000000   		.space	3
 5210 0144 00000000 		.word	0
 5211 0148 2E       		.byte	46
 5212 0149 000000   		.space	3
 5213 014c 00000000 		.word	0
 5214 0150 2E       		.byte	46
 5215 0151 000000   		.space	3
 5216 0154 00000000 		.word	0
 5217 0158 2E       		.byte	46
 5218 0159 000000   		.space	3
 5219 015c 00000000 		.word	0
 5220 0160 2E       		.byte	46
 5221 0161 000000   		.space	3
 5222 0164 00000000 		.word	0
 5223 0168 2F       		.byte	47
 5224 0169 000000   		.space	3
 5225 016c FFFFFFFF 		.word	-1
 5226 0170 2F       		.byte	47
 5227 0171 000000   		.space	3
 5228 0174 05000000 		.word	5
 5229              		.section	.rodata.mapping_gshift.10908,"a"
 5230              		.align	2
 5231              		.set	.LANCHOR16,. + 0
 5234              	mapping_gshift.10908:
 5235 0000 63       		.byte	99
 5236 0001 000000   		.space	3
 5237 0004 FFFFFFFF 		.word	-1
 5238 0008 28       		.byte	40
 5239 0009 000000   		.space	3
 5240 000c 03000000 		.word	3
 5241 0010 16       		.byte	22
 5242 0011 000000   		.space	3
 5243 0014 01000000 		.word	1
 5244 0018 1C       		.byte	28
 5245 0019 000000   		.space	3
 5246 001c 01000000 		.word	1
 5247 0020 13       		.byte	19
 5248 0021 000000   		.space	3
 5249 0024 02000000 		.word	2
 5250 0028 2E       		.byte	46
 5251 0029 000000   		.space	3
 5252 002c 00000000 		.word	0
 5253 0030 2E       		.byte	46
 5254 0031 000000   		.space	3
 5255 0034 00000000 		.word	0
 5256 0038 2E       		.byte	46
 5257 0039 000000   		.space	3
 5258 003c 00000000 		.word	0
 5259 0040 07       		.byte	7
 5260 0041 000000   		.space	3
 5261 0044 03000000 		.word	3
 5262 0048 08       		.byte	8
 5263 0049 000000   		.space	3
 5264 004c 03000000 		.word	3
 5265 0050 2F       		.byte	47
ARM GAS  /tmp/ccLcrImZ.s 			page 130


 5266 0051 000000   		.space	3
 5267 0054 04000000 		.word	4
 5268 0058 2F       		.byte	47
 5269 0059 000000   		.space	3
 5270 005c 04000000 		.word	4
 5271 0060 2F       		.byte	47
 5272 0061 000000   		.space	3
 5273 0064 04000000 		.word	4
 5274 0068 0C       		.byte	12
 5275 0069 000000   		.space	3
 5276 006c 02000000 		.word	2
 5277 0070 2F       		.byte	47
 5278 0071 000000   		.space	3
 5279 0074 06000000 		.word	6
 5280 0078 05       		.byte	5
 5281 0079 000000   		.space	3
 5282 007c 03000000 		.word	3
 5283 0080 2E       		.byte	46
 5284 0081 000000   		.space	3
 5285 0084 00000000 		.word	0
 5286 0088 2E       		.byte	46
 5287 0089 000000   		.space	3
 5288 008c 00000000 		.word	0
 5289 0090 2E       		.byte	46
 5290 0091 000000   		.space	3
 5291 0094 00000000 		.word	0
 5292 0098 2E       		.byte	46
 5293 0099 000000   		.space	3
 5294 009c 00000000 		.word	0
 5295 00a0 2E       		.byte	46
 5296 00a1 000000   		.space	3
 5297 00a4 00000000 		.word	0
 5298 00a8 1B       		.byte	27
 5299 00a9 000000   		.space	3
 5300 00ac 03000000 		.word	3
 5301 00b0 1A       		.byte	26
 5302 00b1 000000   		.space	3
 5303 00b4 03000000 		.word	3
 5304 00b8 2E       		.byte	46
 5305 00b9 000000   		.space	3
 5306 00bc 00000000 		.word	0
 5307 00c0 2E       		.byte	46
 5308 00c1 000000   		.space	3
 5309 00c4 00000000 		.word	0
 5310 00c8 0C       		.byte	12
 5311 00c9 000000   		.space	3
 5312 00cc 03000000 		.word	3
 5313 00d0 1F       		.byte	31
 5314 00d1 000000   		.space	3
 5315 00d4 03000000 		.word	3
 5316 00d8 19       		.byte	25
 5317 00d9 000000   		.space	3
 5318 00dc 03000000 		.word	3
 5319 00e0 2A       		.byte	42
 5320 00e1 000000   		.space	3
 5321 00e4 FFFFFFFF 		.word	-1
 5322 00e8 2E       		.byte	46
ARM GAS  /tmp/ccLcrImZ.s 			page 131


 5323 00e9 000000   		.space	3
 5324 00ec 00000000 		.word	0
 5325 00f0 2E       		.byte	46
 5326 00f1 000000   		.space	3
 5327 00f4 00000000 		.word	0
 5328 00f8 21       		.byte	33
 5329 00f9 000000   		.space	3
 5330 00fc 03000000 		.word	3
 5331 0100 2E       		.byte	46
 5332 0101 000000   		.space	3
 5333 0104 00000000 		.word	0
 5334 0108 24       		.byte	36
 5335 0109 000000   		.space	3
 5336 010c 02000000 		.word	2
 5337 0110 2F       		.byte	47
 5338 0111 000000   		.space	3
 5339 0114 0D000000 		.word	13
 5340 0118 2E       		.byte	46
 5341 0119 000000   		.space	3
 5342 011c 00000000 		.word	0
 5343 0120 2F       		.byte	47
 5344 0121 000000   		.space	3
 5345 0124 07000000 		.word	7
 5346 0128 1E       		.byte	30
 5347 0129 000000   		.space	3
 5348 012c 03000000 		.word	3
 5349 0130 2E       		.byte	46
 5350 0131 000000   		.space	3
 5351 0134 00000000 		.word	0
 5352 0138 2E       		.byte	46
 5353 0139 000000   		.space	3
 5354 013c 00000000 		.word	0
 5355 0140 2E       		.byte	46
 5356 0141 000000   		.space	3
 5357 0144 00000000 		.word	0
 5358 0148 2E       		.byte	46
 5359 0149 000000   		.space	3
 5360 014c 00000000 		.word	0
 5361 0150 2E       		.byte	46
 5362 0151 000000   		.space	3
 5363 0154 00000000 		.word	0
 5364 0158 2E       		.byte	46
 5365 0159 000000   		.space	3
 5366 015c 00000000 		.word	0
 5367 0160 2E       		.byte	46
 5368 0161 000000   		.space	3
 5369 0164 00000000 		.word	0
 5370 0168 2E       		.byte	46
 5371 0169 000000   		.space	3
 5372 016c 00000000 		.word	0
 5373 0170 2E       		.byte	46
 5374 0171 000000   		.space	3
 5375 0174 00000000 		.word	0
 5376              		.section	.rodata.mapping_none.10906,"a"
 5377              		.align	2
 5378              		.set	.LANCHOR12,. + 0
 5381              	mapping_none.10906:
ARM GAS  /tmp/ccLcrImZ.s 			page 132


 5382 0000 63       		.byte	99
 5383 0001 000000   		.space	3
 5384 0004 FFFFFFFF 		.word	-1
 5385 0008 00       		.byte	0
 5386 0009 000000   		.space	3
 5387 000c 00000000 		.word	0
 5388 0010 01       		.byte	1
 5389 0011 000000   		.space	3
 5390 0014 00000000 		.word	0
 5391 0018 03       		.byte	3
 5392 0019 000000   		.space	3
 5393 001c 00000000 		.word	0
 5394 0020 13       		.byte	19
 5395 0021 000000   		.space	3
 5396 0024 02000000 		.word	2
 5397 0028 12       		.byte	18
 5398 0029 000000   		.space	3
 5399 002c 02000000 		.word	2
 5400 0030 12       		.byte	18
 5401 0031 000000   		.space	3
 5402 0034 00000000 		.word	0
 5403 0038 06       		.byte	6
 5404 0039 000000   		.space	3
 5405 003c 00000000 		.word	0
 5406 0040 07       		.byte	7
 5407 0041 000000   		.space	3
 5408 0044 00000000 		.word	0
 5409 0048 08       		.byte	8
 5410 0049 000000   		.space	3
 5411 004c 00000000 		.word	0
 5412 0050 01       		.byte	1
 5413 0051 000000   		.space	3
 5414 0054 01000000 		.word	1
 5415 0058 02       		.byte	2
 5416 0059 000000   		.space	3
 5417 005c 01000000 		.word	1
 5418 0060 03       		.byte	3
 5419 0061 000000   		.space	3
 5420 0064 01000000 		.word	1
 5421 0068 0C       		.byte	12
 5422 0069 000000   		.space	3
 5423 006c 00000000 		.word	0
 5424 0070 0D       		.byte	13
 5425 0071 000000   		.space	3
 5426 0074 00000000 		.word	0
 5427 0078 0E       		.byte	14
 5428 0079 000000   		.space	3
 5429 007c 00000000 		.word	0
 5430 0080 0F       		.byte	15
 5431 0081 000000   		.space	3
 5432 0084 00000000 		.word	0
 5433 0088 10       		.byte	16
 5434 0089 000000   		.space	3
 5435 008c 00000000 		.word	0
 5436 0090 18       		.byte	24
 5437 0091 000000   		.space	3
 5438 0094 00000000 		.word	0
ARM GAS  /tmp/ccLcrImZ.s 			page 133


 5439 0098 13       		.byte	19
 5440 0099 000000   		.space	3
 5441 009c 00000000 		.word	0
 5442 00a0 14       		.byte	20
 5443 00a1 000000   		.space	3
 5444 00a4 00000000 		.word	0
 5445 00a8 15       		.byte	21
 5446 00a9 000000   		.space	3
 5447 00ac 00000000 		.word	0
 5448 00b0 16       		.byte	22
 5449 00b1 000000   		.space	3
 5450 00b4 00000000 		.word	0
 5451 00b8 1E       		.byte	30
 5452 00b9 000000   		.space	3
 5453 00bc 00000000 		.word	0
 5454 00c0 19       		.byte	25
 5455 00c1 000000   		.space	3
 5456 00c4 00000000 		.word	0
 5457 00c8 1A       		.byte	26
 5458 00c9 000000   		.space	3
 5459 00cc 00000000 		.word	0
 5460 00d0 1B       		.byte	27
 5461 00d1 000000   		.space	3
 5462 00d4 00000000 		.word	0
 5463 00d8 1C       		.byte	28
 5464 00d9 000000   		.space	3
 5465 00dc 00000000 		.word	0
 5466 00e0 29       		.byte	41
 5467 00e1 000000   		.space	3
 5468 00e4 00000000 		.word	0
 5469 00e8 1F       		.byte	31
 5470 00e9 000000   		.space	3
 5471 00ec 00000000 		.word	0
 5472 00f0 20       		.byte	32
 5473 00f1 000000   		.space	3
 5474 00f4 00000000 		.word	0
 5475 00f8 21       		.byte	33
 5476 00f9 000000   		.space	3
 5477 00fc 00000000 		.word	0
 5478 0100 22       		.byte	34
 5479 0101 000000   		.space	3
 5480 0104 00000000 		.word	0
 5481 0108 24       		.byte	36
 5482 0109 000000   		.space	3
 5483 010c 00000000 		.word	0
 5484 0110 25       		.byte	37
 5485 0111 000000   		.space	3
 5486 0114 00000000 		.word	0
 5487 0118 26       		.byte	38
 5488 0119 000000   		.space	3
 5489 011c 00000000 		.word	0
 5490 0120 27       		.byte	39
 5491 0121 000000   		.space	3
 5492 0124 00000000 		.word	0
 5493 0128 28       		.byte	40
 5494 0129 000000   		.space	3
 5495 012c 00000000 		.word	0
ARM GAS  /tmp/ccLcrImZ.s 			page 134


 5496 0130 2E       		.byte	46
 5497 0131 000000   		.space	3
 5498 0134 00000000 		.word	0
 5499 0138 2E       		.byte	46
 5500 0139 000000   		.space	3
 5501 013c 00000000 		.word	0
 5502 0140 2E       		.byte	46
 5503 0141 000000   		.space	3
 5504 0144 00000000 		.word	0
 5505 0148 2E       		.byte	46
 5506 0149 000000   		.space	3
 5507 014c 00000000 		.word	0
 5508 0150 2E       		.byte	46
 5509 0151 000000   		.space	3
 5510 0154 00000000 		.word	0
 5511 0158 2E       		.byte	46
 5512 0159 000000   		.space	3
 5513 015c 00000000 		.word	0
 5514 0160 2E       		.byte	46
 5515 0161 000000   		.space	3
 5516 0164 00000000 		.word	0
 5517 0168 2E       		.byte	46
 5518 0169 000000   		.space	3
 5519 016c 00000000 		.word	0
 5520 0170 2E       		.byte	46
 5521 0171 000000   		.space	3
 5522 0174 00000000 		.word	0
 5523              		.section	.rodata.mapping_running.10910,"a"
 5524              		.align	2
 5525              		.set	.LANCHOR11,. + 0
 5528              	mapping_running.10910:
 5529 0000 63       		.byte	99
 5530 0001 000000   		.space	3
 5531 0004 FFFFFFFF 		.word	-1
 5532 0008 00       		.byte	0
 5533 0009 000000   		.space	3
 5534 000c 00000000 		.word	0
 5535 0010 01       		.byte	1
 5536 0011 000000   		.space	3
 5537 0014 00000000 		.word	0
 5538 0018 02       		.byte	2
 5539 0019 000000   		.space	3
 5540 001c 00000000 		.word	0
 5541 0020 03       		.byte	3
 5542 0021 000000   		.space	3
 5543 0024 00000000 		.word	0
 5544 0028 04       		.byte	4
 5545 0029 000000   		.space	3
 5546 002c 00000000 		.word	0
 5547 0030 12       		.byte	18
 5548 0031 000000   		.space	3
 5549 0034 00000000 		.word	0
 5550 0038 06       		.byte	6
 5551 0039 000000   		.space	3
 5552 003c 00000000 		.word	0
 5553 0040 07       		.byte	7
 5554 0041 000000   		.space	3
ARM GAS  /tmp/ccLcrImZ.s 			page 135


 5555 0044 00000000 		.word	0
 5556 0048 08       		.byte	8
 5557 0049 000000   		.space	3
 5558 004c 00000000 		.word	0
 5559 0050 09       		.byte	9
 5560 0051 000000   		.space	3
 5561 0054 00000000 		.word	0
 5562 0058 0A       		.byte	10
 5563 0059 000000   		.space	3
 5564 005c 00000000 		.word	0
 5565 0060 0B       		.byte	11
 5566 0061 000000   		.space	3
 5567 0064 00000000 		.word	0
 5568 0068 0C       		.byte	12
 5569 0069 000000   		.space	3
 5570 006c 00000000 		.word	0
 5571 0070 0D       		.byte	13
 5572 0071 000000   		.space	3
 5573 0074 00000000 		.word	0
 5574 0078 0E       		.byte	14
 5575 0079 000000   		.space	3
 5576 007c 00000000 		.word	0
 5577 0080 0F       		.byte	15
 5578 0081 000000   		.space	3
 5579 0084 00000000 		.word	0
 5580 0088 10       		.byte	16
 5581 0089 000000   		.space	3
 5582 008c 00000000 		.word	0
 5583 0090 18       		.byte	24
 5584 0091 000000   		.space	3
 5585 0094 00000000 		.word	0
 5586 0098 13       		.byte	19
 5587 0099 000000   		.space	3
 5588 009c 00000000 		.word	0
 5589 00a0 14       		.byte	20
 5590 00a1 000000   		.space	3
 5591 00a4 00000000 		.word	0
 5592 00a8 15       		.byte	21
 5593 00a9 000000   		.space	3
 5594 00ac 00000000 		.word	0
 5595 00b0 16       		.byte	22
 5596 00b1 000000   		.space	3
 5597 00b4 00000000 		.word	0
 5598 00b8 1E       		.byte	30
 5599 00b9 000000   		.space	3
 5600 00bc 00000000 		.word	0
 5601 00c0 19       		.byte	25
 5602 00c1 000000   		.space	3
 5603 00c4 00000000 		.word	0
 5604 00c8 1A       		.byte	26
 5605 00c9 000000   		.space	3
 5606 00cc 00000000 		.word	0
 5607 00d0 1B       		.byte	27
 5608 00d1 000000   		.space	3
 5609 00d4 00000000 		.word	0
 5610 00d8 1C       		.byte	28
 5611 00d9 000000   		.space	3
ARM GAS  /tmp/ccLcrImZ.s 			page 136


 5612 00dc 00000000 		.word	0
 5613 00e0 09       		.byte	9
 5614 00e1 000000   		.space	3
 5615 00e4 00000000 		.word	0
 5616 00e8 1F       		.byte	31
 5617 00e9 000000   		.space	3
 5618 00ec 00000000 		.word	0
 5619 00f0 20       		.byte	32
 5620 00f1 000000   		.space	3
 5621 00f4 00000000 		.word	0
 5622 00f8 21       		.byte	33
 5623 00f9 000000   		.space	3
 5624 00fc 00000000 		.word	0
 5625 0100 22       		.byte	34
 5626 0101 000000   		.space	3
 5627 0104 00000000 		.word	0
 5628 0108 24       		.byte	36
 5629 0109 000000   		.space	3
 5630 010c 00000000 		.word	0
 5631 0110 25       		.byte	37
 5632 0111 000000   		.space	3
 5633 0114 00000000 		.word	0
 5634 0118 26       		.byte	38
 5635 0119 000000   		.space	3
 5636 011c 00000000 		.word	0
 5637 0120 27       		.byte	39
 5638 0121 000000   		.space	3
 5639 0124 00000000 		.word	0
 5640 0128 28       		.byte	40
 5641 0129 000000   		.space	3
 5642 012c 00000000 		.word	0
 5643 0130 2E       		.byte	46
 5644 0131 000000   		.space	3
 5645 0134 00000000 		.word	0
 5646 0138 2E       		.byte	46
 5647 0139 000000   		.space	3
 5648 013c 00000000 		.word	0
 5649 0140 2E       		.byte	46
 5650 0141 000000   		.space	3
 5651 0144 00000000 		.word	0
 5652 0148 2E       		.byte	46
 5653 0149 000000   		.space	3
 5654 014c 00000000 		.word	0
 5655 0150 04       		.byte	4
 5656 0151 000000   		.space	3
 5657 0154 00000000 		.word	0
 5658 0158 05       		.byte	5
 5659 0159 000000   		.space	3
 5660 015c 00000000 		.word	0
 5661 0160 2E       		.byte	46
 5662 0161 000000   		.space	3
 5663 0164 00000000 		.word	0
 5664 0168 2E       		.byte	46
 5665 0169 000000   		.space	3
 5666 016c 00000000 		.word	0
 5667 0170 2E       		.byte	46
 5668 0171 000000   		.space	3
ARM GAS  /tmp/ccLcrImZ.s 			page 137


 5669 0174 00000000 		.word	0
 5670              		.section	.rodata.mid_menu,"a"
 5671              		.align	2
 5674              	mid_menu:
 5675 0000 C8C40B00 		.ascii	"\310\304\013\000"
 5676              		.text
 5677              	.Letext0:
 5678              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 5679              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 5680              		.file 6 "/usr/include/newlib/sys/_types.h"
 5681              		.file 7 "/usr/include/newlib/sys/reent.h"
 5682              		.file 8 "/usr/include/newlib/sys/lock.h"
 5683              		.file 9 "/usr/include/newlib/stdlib.h"
 5684              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 5685              		.file 11 "/usr/include/newlib/ctype.h"
 5686              		.file 12 "dmcp/ff_ifc.h"
 5687              		.file 13 "dmcp/dmcp.h"
 5688              		.file 14 "src/keys.h"
 5689              		.file 15 "src/decNumber/decContext.h"
 5690              		.file 16 "src/decNumber/decNumber.h"
 5691              		.file 17 "src/decNumber/decimal64.h"
 5692              		.file 18 "src/decNumber/decimal128.h"
 5693              		.file 19 "src/xeq.h"
 5694              		.file 20 "src/data.h"
 5695              		.file 21 "src/display.h"
 5696              		.file 22 "src/consts.h"
 5697              		.file 23 "src/storage.h"
 5698              		.file 24 "src/catalogues.h"
 5699              		.file 25 "src/menu.h"
 5700              		.file 26 "src/lcd.h"
 5701              		.file 27 "/usr/include/newlib/string.h"
 5702              		.file 28 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccLcrImZ.s 			page 138


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccLcrImZ.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/ccLcrImZ.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/ccLcrImZ.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/ccLcrImZ.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/ccLcrImZ.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccLcrImZ.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccLcrImZ.s:433    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/ccLcrImZ.s:441    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/ccLcrImZ.s:463    .text.disp_about:0000000000000000 $t
     /tmp/ccLcrImZ.s:471    .text.disp_about:0000000000000000 disp_about
     /tmp/ccLcrImZ.s:629    .text.disp_about:0000000000000084 $d
     /tmp/ccLcrImZ.s:648    .text.run_menu_item:0000000000000000 $t
     /tmp/ccLcrImZ.s:656    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/ccLcrImZ.s:696    .text.set_menu:0000000000000000 $t
     /tmp/ccLcrImZ.s:704    .text.set_menu:0000000000000000 set_menu
     /tmp/ccLcrImZ.s:759    .text.set_menu:000000000000002c $d
     /tmp/ccLcrImZ.s:766    .text.toggle_default_menu:0000000000000000 $t
     /tmp/ccLcrImZ.s:774    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/ccLcrImZ.s:803    .text.toggle_default_menu:0000000000000018 $d
     /tmp/ccLcrImZ.s:809    .text.get_menu:0000000000000000 $t
     /tmp/ccLcrImZ.s:817    .text.get_menu:0000000000000000 get_menu
     /tmp/ccLcrImZ.s:833    .text.get_menu:0000000000000008 $d
     /tmp/ccLcrImZ.s:838    .text.set_last_menu:0000000000000000 $t
     /tmp/ccLcrImZ.s:846    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccLcrImZ.s:909    .text.set_last_menu:0000000000000020 $d
     /tmp/ccLcrImZ.s:916    .text.mdot:0000000000000000 $t
     /tmp/ccLcrImZ.s:924    .text.mdot:0000000000000000 mdot
     /tmp/ccLcrImZ.s:1015   .text.mdot:000000000000003c $d
     /tmp/ccLcrImZ.s:1020   .text.display_menu:0000000000000000 $t
     /tmp/ccLcrImZ.s:1028   .text.display_menu:0000000000000000 display_menu
     /tmp/ccLcrImZ.s:1267   .text.display_menu:000000000000010c $d
     /tmp/ccLcrImZ.s:1275   .text.display_current_menu:0000000000000000 $t
     /tmp/ccLcrImZ.s:1283   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccLcrImZ.s:1298   .text.display_current_menu:0000000000000008 $d
     /tmp/ccLcrImZ.s:1303   .text.all_menu_dots:0000000000000000 $t
     /tmp/ccLcrImZ.s:1311   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccLcrImZ.s:1395   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccLcrImZ.s:1400   .text.shutdown:0000000000000000 $t
     /tmp/ccLcrImZ.s:1408   .text.shutdown:0000000000000000 shutdown
     /tmp/ccLcrImZ.s:1426   .text.shutdown:000000000000000c $d
     /tmp/ccLcrImZ.s:1431   .text.is_key_pressed:0000000000000000 $t
     /tmp/ccLcrImZ.s:1439   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccLcrImZ.s:1462   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccLcrImZ.s:1467   .text.get_key:0000000000000000 $t
     /tmp/ccLcrImZ.s:1475   .text.get_key:0000000000000000 get_key
     /tmp/ccLcrImZ.s:1490   .text.get_key:0000000000000004 $d
     /tmp/ccLcrImZ.s:1495   .text.put_key:0000000000000000 $t
     /tmp/ccLcrImZ.s:1503   .text.put_key:0000000000000000 put_key
     /tmp/ccLcrImZ.s:1582   .text.put_key:000000000000003c $d
     /tmp/ccLcrImZ.s:1588   .text.shift_down:0000000000000000 $t
     /tmp/ccLcrImZ.s:1596   .text.shift_down:0000000000000000 shift_down
     /tmp/ccLcrImZ.s:1611   .text.start_key_timer:0000000000000000 $t
     /tmp/ccLcrImZ.s:1619   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccLcrImZ.s:1643   .text.start_key_timer:000000000000000c $d
     /tmp/ccLcrImZ.s:1649   .text.keyticks:0000000000000000 $t
ARM GAS  /tmp/ccLcrImZ.s 			page 139


     /tmp/ccLcrImZ.s:1657   .text.keyticks:0000000000000000 keyticks
     /tmp/ccLcrImZ.s:1688   .text.keyticks:0000000000000018 $d
     /tmp/ccLcrImZ.s:1694   .text.moveto:0000000000000000 $t
     /tmp/ccLcrImZ.s:1702   .text.moveto:0000000000000000 moveto
     /tmp/ccLcrImZ.s:1762   .text.moveto:000000000000002c $d
     /tmp/ccLcrImZ.s:1769   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccLcrImZ.s:1773   .text.print_debug:0000000000000000 $t
     /tmp/ccLcrImZ.s:1781   .text.print_debug:0000000000000000 print_debug
     /tmp/ccLcrImZ.s:1883   .text.print_debug:0000000000000060 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccLcrImZ.s:1894   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccLcrImZ.s:1898   .text.print_debug2:0000000000000000 $t
     /tmp/ccLcrImZ.s:1906   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccLcrImZ.s:2008   .text.print_debug2:0000000000000064 $d
     /tmp/ccLcrImZ.s:2019   .text.do_now:0000000000000000 $t
     /tmp/ccLcrImZ.s:2027   .text.do_now:0000000000000000 do_now
     /tmp/ccLcrImZ.s:2062   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccLcrImZ.s:2066   .text.do_multi:0000000000000000 $t
     /tmp/ccLcrImZ.s:2074   .text.do_multi:0000000000000000 do_multi
     /tmp/ccLcrImZ.s:2105   .text.do_multi:000000000000001a $d
     /tmp/ccLcrImZ.s:2503   .text.do_multi:00000000000001a0 $d
     /tmp/ccLcrImZ.s:2513   .text.program_main:0000000000000000 $t
     /tmp/ccLcrImZ.s:2521   .text.program_main:0000000000000000 program_main
     /tmp/ccLcrImZ.s:2809   .text.program_main:0000000000000116 $d
     /tmp/ccLcrImZ.s:2815   .text.program_main:0000000000000122 $t
     /tmp/ccLcrImZ.s:3201   .text.program_main:00000000000002c8 $d
     /tmp/ccLcrImZ.s:3242   .text.program_main:0000000000000354 $t
     /tmp/ccLcrImZ.s:3708   .text.program_main:000000000000057c $d
     /tmp/ccLcrImZ.s:3780   .bss.n_p:0000000000000000 n_p
     /tmp/ccLcrImZ.s:3848   .data.spaces:0000000000000000 spaces
     /tmp/ccLcrImZ.s:3839   .data.release:0000000000000000 release
     /tmp/ccLcrImZ.s:3812   .data.h_shift:0000000000000000 h_shift
     /tmp/ccLcrImZ.s:3803   .data.g_shift:0000000000000000 g_shift
     /tmp/ccLcrImZ.s:3794   .data.f_shift:0000000000000000 f_shift
     /tmp/ccLcrImZ.s:3821   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccLcrImZ.s:3830   .data.no_key:0000000000000000 no_key
     /tmp/ccLcrImZ.s:3855   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccLcrImZ.s:3737   .rodata.str1.4:0000000000000000 $d
     /tmp/ccLcrImZ.s:5674   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccLcrImZ.s:3742   .rodata:0000000000000000 $d
     /tmp/ccLcrImZ.s:3749   .bss.current_menu:0000000000000000 $d
     /tmp/ccLcrImZ.s:3753   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccLcrImZ.s:3756   .bss.default_menu:0000000000000000 $d
     /tmp/ccLcrImZ.s:3760   .bss.default_menu:0000000000000000 default_menu
     /tmp/ccLcrImZ.s:3763   .bss.last_menu:0000000000000000 $d
     /tmp/ccLcrImZ.s:3767   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccLcrImZ.s:3770   .bss.mdots:0000000000000000 $d
     /tmp/ccLcrImZ.s:3774   .bss.mdots:0000000000000000 mdots
     /tmp/ccLcrImZ.s:3777   .bss.n_p:0000000000000000 $d
     /tmp/ccLcrImZ.s:3783   .bss.start_ticks:0000000000000000 $d
     /tmp/ccLcrImZ.s:3787   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccLcrImZ.s:3790   .data.f_shift:0000000000000000 $d
     /tmp/ccLcrImZ.s:3799   .data.g_shift:0000000000000000 $d
     /tmp/ccLcrImZ.s:3808   .data.h_shift:0000000000000000 $d
     /tmp/ccLcrImZ.s:3817   .data.heartbeat:0000000000000000 $d
     /tmp/ccLcrImZ.s:3826   .data.no_key:0000000000000000 $d
     /tmp/ccLcrImZ.s:3835   .data.release:0000000000000000 $d
ARM GAS  /tmp/ccLcrImZ.s 			page 140


     /tmp/ccLcrImZ.s:3844   .data.spaces:0000000000000000 $d
     /tmp/ccLcrImZ.s:3851   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccLcrImZ.s:3861   .rodata.Menus:0000000000000000 $d
     /tmp/ccLcrImZ.s:3865   .rodata.Menus:0000000000000000 Menus
     /tmp/ccLcrImZ.s:4936   .rodata.mapping_alpha.10909:0000000000000000 $d
     /tmp/ccLcrImZ.s:4940   .rodata.mapping_alpha.10909:0000000000000000 mapping_alpha.10909
     /tmp/ccLcrImZ.s:5083   .rodata.mapping_fshift.10907:0000000000000000 $d
     /tmp/ccLcrImZ.s:5087   .rodata.mapping_fshift.10907:0000000000000000 mapping_fshift.10907
     /tmp/ccLcrImZ.s:5230   .rodata.mapping_gshift.10908:0000000000000000 $d
     /tmp/ccLcrImZ.s:5234   .rodata.mapping_gshift.10908:0000000000000000 mapping_gshift.10908
     /tmp/ccLcrImZ.s:5377   .rodata.mapping_none.10906:0000000000000000 $d
     /tmp/ccLcrImZ.s:5381   .rodata.mapping_none.10906:0000000000000000 mapping_none.10906
     /tmp/ccLcrImZ.s:5524   .rodata.mapping_running.10910:0000000000000000 $d
     /tmp/ccLcrImZ.s:5528   .rodata.mapping_running.10910:0000000000000000 mapping_running.10910
     /tmp/ccLcrImZ.s:5671   .rodata.mid_menu:0000000000000000 $d
     /tmp/ccLcrImZ.s:2118   .text.do_multi:0000000000000027 $d
     /tmp/ccLcrImZ.s:2118   .text.do_multi:0000000000000028 $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
pixel_length
strcpy
sprintf
process_keycode_with_shift
flash_restore
save_lib_file
flash_backup
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
JustDisplayed
Pause
Running
get_alpha_state

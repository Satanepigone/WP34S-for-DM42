ARM GAS  /tmp/cc4hRDYn.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_menu_label.constprop.0:
  27              	.LVL0:
  28              	.LFB25:
  29              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** void set_menu ( int new_menu ) {
   4:src/menu.c    ****   int m = current_menu;
   5:src/menu.c    ****   if (new_menu == current_menu) {
   6:src/menu.c    ****     current_menu = 0;
   7:src/menu.c    ****   }
   8:src/menu.c    ****   else if (new_menu == -1) {
   9:src/menu.c    ****     current_menu = last_menu;
  10:src/menu.c    ****   }
  11:src/menu.c    ****   else {
  12:src/menu.c    ****     current_menu = new_menu;
  13:src/menu.c    ****   }
  14:src/menu.c    ****   last_menu = m;
  15:src/menu.c    **** }
  16:src/menu.c    **** 
  17:src/menu.c    **** int get_menu () {
  18:src/menu.c    ****   return current_menu;
  19:src/menu.c    **** }
  20:src/menu.c    **** 
  21:src/menu.c    **** void display_current_menu () {
  22:src/menu.c    ****   display_menu (current_menu);
  23:src/menu.c    **** }
  24:src/menu.c    **** 
  25:src/menu.c    **** void set_last_menu () {
  26:src/menu.c    ****   set_menu (last_menu);
  27:src/menu.c    **** }
  28:src/menu.c    **** 
  29:src/menu.c    **** static unsigned char mdots[200][2];
ARM GAS  /tmp/cc4hRDYn.s 			page 2


  30:src/menu.c    **** 
  31:src/menu.c    **** static const struct _menu Menus[] = {
  32:src/menu.c    ****   {
  33:src/menu.c    ****     "Blank", // 0
  34:src/menu.c    ****     { 
  35:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  36:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  37:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  38:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  39:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  40:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  41:src/menu.c    ****     }    
  42:src/menu.c    ****   },
  43:src/menu.c    ****   {
  44:src/menu.c    ****     "Clear", // 1
  45:src/menu.c    ****     { 
  46:src/menu.c    ****       { { K24, 1 }, NO_KEY, "CLProg", "" },
  47:src/menu.c    ****       { { K24, 2 }, NO_KEY, "CL\221", "" },
  48:src/menu.c    ****       { { K24, 3 }, NO_KEY, "CLx", "" },
  49:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  50:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  51:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  52:src/menu.c    ****     }    
  53:src/menu.c    ****   },
  54:src/menu.c    ****   {
  55:src/menu.c    ****     "DISP", // 2
  56:src/menu.c    ****     { 
  57:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
  58:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
  59:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.M.S." },
  60:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
  61:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
  62:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  63:src/menu.c    ****     }
  64:src/menu.c    ****   },
  65:src/menu.c    ****   {
  66:src/menu.c    ****     "BASE", // 3
  67:src/menu.c    ****     { 
  68:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
  69:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
  70:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
  71:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
  72:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
  73:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  74:src/menu.c    ****     }
  75:src/menu.c    ****   },
  76:src/menu.c    ****   {
  77:src/menu.c    ****     "ANGLES", // 4
  78:src/menu.c    ****     { 
  79:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
  80:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
  81:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
  82:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
  83:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
  84:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  85:src/menu.c    ****     }
  86:src/menu.c    ****       
ARM GAS  /tmp/cc4hRDYn.s 			page 3


  87:src/menu.c    ****   },
  88:src/menu.c    ****   {
  89:src/menu.c    ****     "MISC", // 5
  90:src/menu.c    ****     { 
  91:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
  92:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
  93:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
  94:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
  95:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
  96:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  97:src/menu.c    ****     }
  98:src/menu.c    ****   },
  99:src/menu.c    ****   {
 100:src/menu.c    ****     "X<>Y Key", // 6
 101:src/menu.c    ****     { 
 102:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 103:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 104:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 105:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 106:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 107:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 108:src/menu.c    ****     }    
 109:src/menu.c    ****   },
 110:src/menu.c    ****   {
 111:src/menu.c    ****     "Program", // 7
 112:src/menu.c    ****     { 
 113:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 114:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 115:src/menu.c    ****       { { K61, 3 }, NO_KEY, "Pause", "" },
 116:src/menu.c    ****       { { K30, 3 }, NO_KEY, "GTO", "" },
 117:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 118:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 119:src/menu.c    ****     }
 120:src/menu.c    ****   },
 121:src/menu.c    ****   {
 122:src/menu.c    ****     "Setup 1", // 8
 123:src/menu.c    ****     { 
 124:src/menu.c    ****       { { K_SYS, 0}, NO_KEY, "System", "" },
 125:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 126:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SaveS" },
 127:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LoadS" },
 128:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 129:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 130:src/menu.c    ****     }
 131:src/menu.c    ****   },
 132:src/menu.c    ****   {
 133:src/menu.c    ****     "Arrow", // 9
 134:src/menu.c    ****     { 
 135:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 136:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 137:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
 138:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "2HMS" },
 139:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS2" },
 140:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 141:src/menu.c    ****     }
 142:src/menu.c    ****   },
 143:src/menu.c    ****   {
ARM GAS  /tmp/cc4hRDYn.s 			page 4


 144:src/menu.c    ****     "Flags", // 10
 145:src/menu.c    ****     { 
 146:src/menu.c    ****       { { K50, 1 }, NO_KEY, "SF_", "" },
 147:src/menu.c    ****       { { K50, 2 }, NO_KEY, "CF_", "" },
 148:src/menu.c    ****       { { K51, 1 }, NO_KEY, "x=?", "" },
 149:src/menu.c    ****       { { K51, 2 }, NO_KEY, "x\013?", "" },
 150:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 151:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 152:src/menu.c    ****     }
 153:src/menu.c    ****   },
 154:src/menu.c    ****   {
 155:src/menu.c    ****     "Probability", // 11
 156:src/menu.c    ****     { 
 157:src/menu.c    ****       { { K40, 3 }, { K41, 1 }, "Fact!", "\224" },
 158:src/menu.c    ****       { { K40, 1 }, { K41, 2 }, "Cy,x", "\224\235" },
 159:src/menu.c    ****       { { K40, 2 }, NO_KEY, "Py,x", "" },
 160:src/menu.c    ****       { { K12, 1 }, NO_KEY, "RAN#", "" },
 161:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 162:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 163:src/menu.c    ****     }
 164:src/menu.c    ****   },
 165:src/menu.c    ****   {
 166:src/menu.c    ****     "Statistics", // 12
 167:src/menu.c    ****     { 
 168:src/menu.c    ****       { { K42, 1 }, { K43, 3 }, "Xbar", "SUMS" },
 169:src/menu.c    ****       { { K43, 1 }, NO_KEY, "Yhat", "" },
 170:src/menu.c    ****       { { K42, 2 }, NO_KEY, "s", "" },
 171:src/menu.c    ****       { { K43, 2 }, NO_KEY, "r", "" },
 172:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 173:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 174:src/menu.c    ****     }
 175:src/menu.c    ****   },
 176:src/menu.c    ****   {
 177:src/menu.c    ****     "Setup 2", // 13
 178:src/menu.c    ****     { 
 179:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SaveL", "" },
 180:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LoadL", "" },
 181:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SaveP", "" },
 182:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LoadP", "" },
 183:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 184:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 185:src/menu.c    ****     }
 186:src/menu.c    ****   },
 187:src/menu.c    **** };  
 188:src/menu.c    **** 
 189:src/menu.c    **** /* This code is the set_status_sized code with small changes
 190:src/menu.c    ****  * and non-DM42 code removed.
 191:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 192:src/menu.c    ****  */
 193:src/menu.c    **** #define MENU_WIDTH 32
 194:src/menu.c    **** 
 195:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  30              		.loc 1 195 13 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 544
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 196:src/menu.c    ****   // dotcol is the number of the starting dot column
ARM GAS  /tmp/cc4hRDYn.s 			page 5


 197:src/menu.c    ****   // shifted is 1 if shifted
 198:src/menu.c    ****   unsigned short int posns[257];
  34              		.loc 1 198 3 view .LVU1
 199:src/menu.c    **** 
 200:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 201:src/menu.c    ****   int posns_state = 255;
  35              		.loc 1 201 3 view .LVU2
 202:src/menu.c    **** 
 203:src/menu.c    ****   int x = dotcol;
  36              		.loc 1 203 3 view .LVU3
 195:src/menu.c    ****   // dotcol is the number of the starting dot column
  37              		.loc 1 195 13 is_stmt 0 view .LVU4
  38 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  39              		.cfi_def_cfa_offset 36
  40              		.cfi_offset 4, -36
  41              		.cfi_offset 5, -32
  42              		.cfi_offset 6, -28
  43              		.cfi_offset 7, -24
  44              		.cfi_offset 8, -20
  45              		.cfi_offset 9, -16
  46              		.cfi_offset 10, -12
  47              		.cfi_offset 11, -8
  48              		.cfi_offset 14, -4
  49 0004 ADF5097D 		sub	sp, sp, #548
  50              		.cfi_def_cfa_offset 584
 195:src/menu.c    ****   // dotcol is the number of the starting dot column
  51              		.loc 1 195 13 view .LVU5
  52 0008 CDE90102 		strd	r0, r2, [sp, #4]
 204:src/menu.c    ****   int i, j, xmax;
 205:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  53              		.loc 1 205 18 view .LVU6
  54 000c 0029     		cmp	r1, #0
  55 000e B4BF     		ite	lt
  56 0010 01F11F03 		addlt	r3, r1, #31
  57 0014 0B46     		movge	r3, r1
 206:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 207:src/menu.c    **** 
 208:src/menu.c    ****   forceDispPlot=0;
  58              		.loc 1 208 16 view .LVU7
  59 0016 4848     		ldr	r0, .L36
  60              	.LVL1:
 195:src/menu.c    ****   // dotcol is the number of the starting dot column
  61              		.loc 1 195 13 view .LVU8
  62 0018 0F46     		mov	r7, r1
  63              	.LVL2:
 204:src/menu.c    ****   int i, j, xmax;
  64              		.loc 1 204 3 is_stmt 1 view .LVU9
 205:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  65              		.loc 1 205 3 view .LVU10
 209:src/menu.c    **** 
 210:src/menu.c    **** #ifdef RP_PREFIX
 211:src/menu.c    ****   RectPolConv = 0;
  66              		.loc 1 211 15 is_stmt 0 view .LVU11
  67 001a 4849     		ldr	r1, .L36+4
  68              	.LVL3:
 208:src/menu.c    **** 
  69              		.loc 1 208 16 view .LVU12
ARM GAS  /tmp/cc4hRDYn.s 			page 6


  70 001c 0022     		movs	r2, #0
  71              	.LVL4:
 208:src/menu.c    **** 
  72              		.loc 1 208 16 view .LVU13
  73 001e 0270     		strb	r2, [r0]
  74              		.loc 1 211 15 view .LVU14
  75 0020 0A60     		str	r2, [r1]
 212:src/menu.c    **** #endif
 213:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
  76              		.loc 1 213 10 view .LVU15
  77 0022 019A     		ldr	r2, [sp, #4]
  78 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 205:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  79              		.loc 1 205 30 view .LVU16
  80 0026 23F01F03 		bic	r3, r3, #31
 205:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  81              		.loc 1 205 8 view .LVU17
  82 002a 03F12009 		add	r9, r3, #32
  83              	.LVL5:
 206:src/menu.c    **** 
  84              		.loc 1 206 3 is_stmt 1 view .LVU18
 208:src/menu.c    **** 
  85              		.loc 1 208 3 view .LVU19
 211:src/menu.c    **** #endif
  86              		.loc 1 211 3 view .LVU20
  87              		.loc 1 213 3 view .LVU21
  88              		.loc 1 213 9 view .LVU22
  89 002e 002D     		cmp	r5, #0
  90 0030 78D0     		beq	.L1
  91              		.loc 1 213 23 is_stmt 0 view .LVU23
  92 0032 4F45     		cmp	r7, r9
  93 0034 76DC     		bgt	.L1
  94              	.LBB33:
 214:src/menu.c    ****     int c;
 215:src/menu.c    ****     int width;
 216:src/menu.c    ****     unsigned char cmap[6];
 217:src/menu.c    **** 
 218:src/menu.c    ****     int real_width;
 219:src/menu.c    ****     int current_smallp;
 220:src/menu.c    **** 
 221:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 222:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 223:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 224:src/menu.c    ****     //           01 -> (not used)
 225:src/menu.c    ****     //           10 -> use big font
 226:src/menu.c    ****     //           11 -> use small font
 227:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 228:src/menu.c    ****     if (str[0] == '\007') {
  95              		.loc 1 228 8 view .LVU24
  96 0036 072D     		cmp	r5, #7
  97              	.LBE33:
 201:src/menu.c    **** 
  98              		.loc 1 201 7 view .LVU25
  99 0038 4FF0FF04 		mov	r4, #255
 100              	.LVL6:
 101              	.LBB50:
 214:src/menu.c    ****     int c;
ARM GAS  /tmp/cc4hRDYn.s 			page 7


 102              		.loc 1 214 5 is_stmt 1 view .LVU26
 215:src/menu.c    ****     unsigned char cmap[6];
 103              		.loc 1 215 5 view .LVU27
 216:src/menu.c    **** 
 104              		.loc 1 216 5 view .LVU28
 218:src/menu.c    ****     int current_smallp;
 105              		.loc 1 218 5 view .LVU29
 219:src/menu.c    **** 
 106              		.loc 1 219 5 view .LVU30
 107              		.loc 1 228 5 view .LVU31
 229:src/menu.c    ****       width = str[1] & 0x1F;
 230:src/menu.c    ****       switch (str[1] & 0x60) {
 231:src/menu.c    ****       default:
 232:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 233:src/menu.c    **** 	break;
 234:src/menu.c    ****       case 0x40:	current_smallp = 0;
 235:src/menu.c    **** 	break;
 236:src/menu.c    ****       case 0x60:	current_smallp = 1;
 108              		.loc 1 236 33 is_stmt 0 view .LVU32
 109 003c 4FF0010A 		mov	r10, #1
 228:src/menu.c    ****       width = str[1] & 0x1F;
 110              		.loc 1 228 8 view .LVU33
 111 0040 64D1     		bne	.L5
 112              	.LVL7:
 113              	.L34:
 229:src/menu.c    ****       width = str[1] & 0x1F;
 114              		.loc 1 229 7 is_stmt 1 view .LVU34
 229:src/menu.c    ****       width = str[1] & 0x1F;
 115              		.loc 1 229 18 is_stmt 0 view .LVU35
 116 0042 019B     		ldr	r3, [sp, #4]
 117 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 118 0046 06F06003 		and	r3, r6, #96
 230:src/menu.c    ****       default:
 119              		.loc 1 230 7 view .LVU36
 120 004a 402B     		cmp	r3, #64
 229:src/menu.c    ****       width = str[1] & 0x1F;
 121              		.loc 1 229 13 view .LVU37
 122 004c 06F01F06 		and	r6, r6, #31
 123              	.LVL8:
 230:src/menu.c    ****       default:
 124              		.loc 1 230 7 is_stmt 1 view .LVU38
 125 0050 6CD0     		beq	.L28
 126 0052 602B     		cmp	r3, #96
 127 0054 6AD1     		bne	.L28
 128              		.loc 1 236 18 view .LVU39
 129              	.LVL9:
 237:src/menu.c    **** 	break;
 130              		.loc 1 237 2 view .LVU40
 238:src/menu.c    ****       }
 239:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 131              		.loc 1 239 7 view .LVU41
 132              		.loc 1 239 11 is_stmt 0 view .LVU42
 133 0056 019B     		ldr	r3, [sp, #4]
 134 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 236:src/menu.c    **** 	break;
 135              		.loc 1 236 33 view .LVU43
 136 005a 0123     		movs	r3, #1
ARM GAS  /tmp/cc4hRDYn.s 			page 8


 137 005c 0093     		str	r3, [sp]
 138 005e 00F58075 		add	r5, r0, #256
 139              	.LVL10:
 140              	.L9:
 240:src/menu.c    ****       str += 3;
 141              		.loc 1 240 7 is_stmt 1 view .LVU44
 241:src/menu.c    **** 
 242:src/menu.c    ****       real_width = charlengths(c);
 142              		.loc 1 242 20 is_stmt 0 view .LVU45
 143 0062 2846     		mov	r0, r5
 144 0064 FFF7FEFF 		bl	charlengths
 145              	.LVL11:
 240:src/menu.c    ****       str += 3;
 146              		.loc 1 240 11 view .LVU46
 147 0068 019B     		ldr	r3, [sp, #4]
 148 006a 0333     		adds	r3, r3, #3
 149 006c 0193     		str	r3, [sp, #4]
 150              	.LVL12:
 151              		.loc 1 242 7 is_stmt 1 view .LVU47
 243:src/menu.c    ****     } else {
 244:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 245:src/menu.c    ****       real_width = width = charlengths(c);
 246:src/menu.c    ****       current_smallp = smallp;
 247:src/menu.c    ****     }
 248:src/menu.c    **** 
 249:src/menu.c    ****     if (x + real_width > xmax)
 152              		.loc 1 249 5 view .LVU48
 153              		.loc 1 249 11 is_stmt 0 view .LVU49
 154 006e C319     		adds	r3, r0, r7
 155              	.LVL13:
 156              		.loc 1 249 8 view .LVU50
 157 0070 9945     		cmp	r9, r3
 158 0072 57DB     		blt	.L1
 159              	.L35:
 250:src/menu.c    ****       break;
 251:src/menu.c    **** 
 252:src/menu.c    ****     if (posns_state != current_smallp) {
 160              		.loc 1 252 5 is_stmt 1 view .LVU51
 161              		.loc 1 252 8 is_stmt 0 view .LVU52
 162 0074 009B     		ldr	r3, [sp]
 163 0076 A342     		cmp	r3, r4
 253:src/menu.c    ****       findlengths(posns, current_smallp);
 164              		.loc 1 253 7 view .LVU53
 165 0078 07AB     		add	r3, sp, #28
 252:src/menu.c    ****       findlengths(posns, current_smallp);
 166              		.loc 1 252 8 view .LVU54
 167 007a 05D0     		beq	.L12
 168              		.loc 1 253 7 is_stmt 1 view .LVU55
 169 007c 1846     		mov	r0, r3
 170              	.LVL14:
 171              		.loc 1 253 7 is_stmt 0 view .LVU56
 172 007e 0099     		ldr	r1, [sp]
 173 0080 0393     		str	r3, [sp, #12]
 174 0082 FFF7FEFF 		bl	findlengths
 175              	.LVL15:
 176 0086 039B     		ldr	r3, [sp, #12]
 254:src/menu.c    ****       posns_state = current_smallp;
ARM GAS  /tmp/cc4hRDYn.s 			page 9


 177              		.loc 1 254 7 is_stmt 1 view .LVU57
 178              	.LVL16:
 179              	.L12:
 255:src/menu.c    ****     }
 256:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 180              		.loc 1 256 5 view .LVU58
 181 0088 009A     		ldr	r2, [sp]
 182 008a 2846     		mov	r0, r5
 183 008c 05A9     		add	r1, sp, #20
 184 008e FFF7FEFF 		bl	unpackchar
 185              	.LVL17:
 257:src/menu.c    **** 
 258:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 186              		.loc 1 258 5 view .LVU59
 187              		.loc 1 258 15 view .LVU60
 188 0092 029B     		ldr	r3, [sp, #8]
 189 0094 03EB4704 		add	r4, r3, r7, lsl #1
 190 0098 294B     		ldr	r3, .L36+8
 191 009a 0DF1140B 		add	fp, sp, #20
 192 009e 1C44     		add	r4, r4, r3
 256:src/menu.c    **** 
 193              		.loc 1 256 5 is_stmt 0 view .LVU61
 194 00a0 4FF0050E 		mov	lr, #5
 195 00a4 A9EB0705 		sub	r5, r9, r7
 196              	.LVL18:
 197              	.L13:
 259:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 198              		.loc 1 259 17 is_stmt 1 view .LVU62
 199              		.loc 1 259 7 is_stmt 0 view .LVU63
 200 00a8 002E     		cmp	r6, #0
 201 00aa 1FDD     		ble	.L19
 260:src/menu.c    **** 	if (x+j >= xmax)
 202              		.loc 1 260 2 is_stmt 1 view .LVU64
 203              		.loc 1 260 5 is_stmt 0 view .LVU65
 204 00ac B945     		cmp	r9, r7
 205 00ae 1DDD     		ble	.L19
 206              	.LBB34:
 207              	.LBB35:
 208              	.LBB36:
 209              	.LBB37:
 261:src/menu.c    **** 	  break;
 262:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 263:src/menu.c    ****       }
 264:src/menu.c    ****     }
 265:src/menu.c    ****     x += width;
 266:src/menu.c    ****   }
 267:src/menu.c    **** }
 268:src/menu.c    **** 
 269:src/menu.c    **** 
 270:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 271:src/menu.c    **** 
 272:src/menu.c    **** int pixel_length(const char *s, int smallp)
 273:src/menu.c    **** {
 274:src/menu.c    ****   int len = 0;
 275:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 276:src/menu.c    ****   while (*s != '\0') {
 277:src/menu.c    ****     if (s[0] == '\007') {
ARM GAS  /tmp/cc4hRDYn.s 			page 10


 278:src/menu.c    ****       len += s[1] & 0x1F;
 279:src/menu.c    ****       s += 3;
 280:src/menu.c    ****       continue;
 281:src/menu.c    ****     }
 282:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 283:src/menu.c    ****   }
 284:src/menu.c    ****   return len;
 285:src/menu.c    **** }
 286:src/menu.c    **** */
 287:src/menu.c    **** 
 288:src/menu.c    **** 
 289:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 290:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 291:src/menu.c    ****   if (on) {
 292:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 293:src/menu.c    ****   }
 294:src/menu.c    ****   else {
 295:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 210              		.loc 1 295 25 view .LVU66
 211 00b0 0AFA0EFC 		lsl	ip, r10, lr
 212              		.loc 1 295 17 view .LVU67
 213 00b4 4FFA8CFC 		sxtb	ip, ip
 214              	.LBE37:
 215              	.LBE36:
 216              	.LBE35:
 217              	.LBE34:
 262:src/menu.c    ****       }
 218              		.loc 1 262 31 view .LVU68
 219 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 220              	.LBB47:
 221              	.LBB44:
 222              	.LBB41:
 223              	.LBB38:
 224              		.loc 1 295 17 view .LVU69
 225 00bc 6FEA0C08 		mvn	r8, ip
 226              	.LBE38:
 227              	.LBE41:
 228              	.LBE44:
 229              	.LBE47:
 259:src/menu.c    **** 	if (x+j >= xmax)
 230              		.loc 1 259 13 view .LVU70
 231 00c0 0023     		movs	r3, #0
 232 00c2 01E0     		b	.L14
 233              	.LVL19:
 234              	.L18:
 260:src/menu.c    **** 	  break;
 235              		.loc 1 260 5 view .LVU71
 236 00c4 9D42     		cmp	r5, r3
 237 00c6 11D0     		beq	.L19
 238              	.LVL20:
 239              	.L14:
 262:src/menu.c    ****       }
 240              		.loc 1 262 2 is_stmt 1 view .LVU72
 241              	.LBB48:
 242              	.LBI34:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 243              		.loc 1 289 6 view .LVU73
ARM GAS  /tmp/cc4hRDYn.s 			page 11


 244              	.LBB45:
 290:src/menu.c    ****   if (on) {
 245              		.loc 1 290 3 view .LVU74
 246              	.LBB42:
 247              	.LBI36:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 248              		.loc 1 289 6 view .LVU75
 249              	.LBB39:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 250              		.loc 1 291 3 view .LVU76
 251              	.LBE39:
 252              	.LBE42:
 290:src/menu.c    ****   if (on) {
 253              		.loc 1 290 6 is_stmt 0 view .LVU77
 254 00c8 DA19     		adds	r2, r3, r7
 255              	.LVL21:
 290:src/menu.c    ****   if (on) {
 256              		.loc 1 290 6 view .LVU78
 257 00ca C72A     		cmp	r2, #199
 258              	.LBE45:
 259              	.LBE48:
 262:src/menu.c    ****       }
 260              		.loc 1 262 46 view .LVU79
 261 00cc 40FA03F1 		asr	r1, r0, r3
 262              	.LBB49:
 263              	.LBB46:
 290:src/menu.c    ****   if (on) {
 264              		.loc 1 290 6 view .LVU80
 265 00d0 09D8     		bhi	.L16
 266              	.LBB43:
 267              	.LBB40:
 292:src/menu.c    ****   }
 268              		.loc 1 292 5 is_stmt 1 view .LVU81
 269              		.loc 1 295 5 view .LVU82
 292:src/menu.c    ****   }
 270              		.loc 1 292 17 is_stmt 0 view .LVU83
 271 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 272              	.LVL22:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 273              		.loc 1 291 6 view .LVU84
 274 00d6 C907     		lsls	r1, r1, #31
 292:src/menu.c    ****   }
 275              		.loc 1 292 17 view .LVU85
 276 00d8 4CBF     		ite	mi
 277 00da 4CEA0202 		orrmi	r2, ip, r2
 278              		.loc 1 295 17 view .LVU86
 279 00de 08EA0202 		andpl	r2, r8, r2
 280 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 281              	.L16:
 282              	.LBE40:
 283              	.LBE43:
 284              	.LBE46:
 285              	.LBE49:
 260:src/menu.c    **** 	  break;
 286              		.loc 1 260 2 is_stmt 1 view .LVU87
 287              	.LVL23:
 259:src/menu.c    **** 	if (x+j >= xmax)
ARM GAS  /tmp/cc4hRDYn.s 			page 12


 288              		.loc 1 259 26 view .LVU88
 259:src/menu.c    **** 	if (x+j >= xmax)
 289              		.loc 1 259 27 is_stmt 0 view .LVU89
 290 00e6 0133     		adds	r3, r3, #1
 291              	.LVL24:
 259:src/menu.c    **** 	if (x+j >= xmax)
 292              		.loc 1 259 17 is_stmt 1 view .LVU90
 259:src/menu.c    **** 	if (x+j >= xmax)
 293              		.loc 1 259 7 is_stmt 0 view .LVU91
 294 00e8 B342     		cmp	r3, r6
 295 00ea EBD1     		bne	.L18
 296              	.LVL25:
 297              	.L19:
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 298              		.loc 1 258 20 is_stmt 1 view .LVU92
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 299              		.loc 1 258 15 view .LVU93
 300 00ec 0EF1FF3E 		add	lr, lr, #-1
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 301              		.loc 1 258 5 is_stmt 0 view .LVU94
 302 00f0 BEF1FF3F 		cmp	lr, #-1
 303 00f4 0BF1010B 		add	fp, fp, #1
 304              	.LVL26:
 258:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 305              		.loc 1 258 5 view .LVU95
 306 00f8 D6D1     		bne	.L13
 265:src/menu.c    ****   }
 307              		.loc 1 265 5 is_stmt 1 view .LVU96
 308              	.LBE50:
 213:src/menu.c    ****     int c;
 309              		.loc 1 213 10 is_stmt 0 view .LVU97
 310 00fa 019B     		ldr	r3, [sp, #4]
 311 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 312              	.LBB51:
 265:src/menu.c    ****   }
 313              		.loc 1 265 7 view .LVU98
 314 00fe 3744     		add	r7, r7, r6
 315              	.LVL27:
 265:src/menu.c    ****   }
 316              		.loc 1 265 7 view .LVU99
 317              	.LBE51:
 213:src/menu.c    ****     int c;
 318              		.loc 1 213 9 is_stmt 1 view .LVU100
 319 0100 85B1     		cbz	r5, .L1
 213:src/menu.c    ****     int c;
 320              		.loc 1 213 23 is_stmt 0 view .LVU101
 321 0102 B945     		cmp	r9, r7
 322 0104 0EDB     		blt	.L1
 323              	.LBB52:
 228:src/menu.c    ****       width = str[1] & 0x1F;
 324              		.loc 1 228 8 view .LVU102
 325 0106 072D     		cmp	r5, #7
 326              	.LBE52:
 327 0108 009C     		ldr	r4, [sp]
 328              	.LBB53:
 214:src/menu.c    ****     int width;
 329              		.loc 1 214 5 is_stmt 1 view .LVU103
ARM GAS  /tmp/cc4hRDYn.s 			page 13


 215:src/menu.c    ****     unsigned char cmap[6];
 330              		.loc 1 215 5 view .LVU104
 216:src/menu.c    **** 
 331              		.loc 1 216 5 view .LVU105
 218:src/menu.c    ****     int current_smallp;
 332              		.loc 1 218 5 view .LVU106
 219:src/menu.c    **** 
 333              		.loc 1 219 5 view .LVU107
 228:src/menu.c    ****       width = str[1] & 0x1F;
 334              		.loc 1 228 5 view .LVU108
 228:src/menu.c    ****       width = str[1] & 0x1F;
 335              		.loc 1 228 8 is_stmt 0 view .LVU109
 336 010a 9AD0     		beq	.L34
 337              	.LVL28:
 338              	.L5:
 244:src/menu.c    ****       real_width = width = charlengths(c);
 339              		.loc 1 244 7 is_stmt 1 view .LVU110
 245:src/menu.c    ****       current_smallp = smallp;
 340              		.loc 1 245 28 is_stmt 0 view .LVU111
 341 010c 2846     		mov	r0, r5
 342 010e FFF7FEFF 		bl	charlengths
 343              	.LVL29:
 244:src/menu.c    ****       real_width = width = charlengths(c);
 344              		.loc 1 244 31 view .LVU112
 345 0112 019B     		ldr	r3, [sp, #4]
 346 0114 0133     		adds	r3, r3, #1
 347 0116 0193     		str	r3, [sp, #4]
 348              	.LVL30:
 245:src/menu.c    ****       current_smallp = smallp;
 349              		.loc 1 245 7 is_stmt 1 view .LVU113
 246:src/menu.c    ****     }
 350              		.loc 1 246 7 view .LVU114
 246:src/menu.c    ****     }
 351              		.loc 1 246 22 is_stmt 0 view .LVU115
 352 0118 0023     		movs	r3, #0
 353              	.LVL31:
 246:src/menu.c    ****     }
 354              		.loc 1 246 22 view .LVU116
 355 011a 0093     		str	r3, [sp]
 356              	.LVL32:
 249:src/menu.c    ****       break;
 357              		.loc 1 249 11 view .LVU117
 358 011c C319     		adds	r3, r0, r7
 359              	.LVL33:
 249:src/menu.c    ****       break;
 360              		.loc 1 249 8 view .LVU118
 361 011e 9945     		cmp	r9, r3
 245:src/menu.c    ****       current_smallp = smallp;
 362              		.loc 1 245 28 view .LVU119
 363 0120 0646     		mov	r6, r0
 249:src/menu.c    ****       break;
 364              		.loc 1 249 5 is_stmt 1 view .LVU120
 249:src/menu.c    ****       break;
 365              		.loc 1 249 8 is_stmt 0 view .LVU121
 366 0122 A7DA     		bge	.L35
 367              	.LVL34:
 368              	.L1:
ARM GAS  /tmp/cc4hRDYn.s 			page 14


 249:src/menu.c    ****       break;
 369              		.loc 1 249 8 view .LVU122
 370              	.LBE53:
 267:src/menu.c    **** 
 371              		.loc 1 267 1 view .LVU123
 372 0124 0DF5097D 		add	sp, sp, #548
 373              		.cfi_remember_state
 374              		.cfi_def_cfa_offset 36
 375              		@ sp needed
 376 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 377              	.LVL35:
 378              	.L28:
 379              		.cfi_restore_state
 380              	.LBB54:
 239:src/menu.c    ****       str += 3;
 381              		.loc 1 239 7 is_stmt 1 view .LVU124
 239:src/menu.c    ****       str += 3;
 382              		.loc 1 239 11 is_stmt 0 view .LVU125
 383 012c 019B     		ldr	r3, [sp, #4]
 384 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 232:src/menu.c    **** 	break;
 385              		.loc 1 232 33 view .LVU126
 386 0130 0023     		movs	r3, #0
 387 0132 0093     		str	r3, [sp]
 388 0134 95E7     		b	.L9
 389              	.L37:
 390 0136 00BF     		.align	2
 391              	.L36:
 392 0138 00000000 		.word	forceDispPlot
 393 013c 00000000 		.word	RectPolConv
 394 0140 00000000 		.word	.LANCHOR0
 395              	.LBE54:
 396              		.cfi_endproc
 397              	.LFE25:
 399              		.section	.text.set_menu,"ax",%progbits
 400              		.align	1
 401              		.p2align 2,,3
 402              		.global	set_menu
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu fpv4-sp-d16
 408              	set_menu:
 409              	.LVL36:
 410              	.LFB3:
   3:src/menu.c    ****   int m = current_menu;
 411              		.loc 1 3 32 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              		@ link register save eliminated.
   4:src/menu.c    ****   if (new_menu == current_menu) {
 416              		.loc 1 4 3 view .LVU128
   4:src/menu.c    ****   if (new_menu == current_menu) {
 417              		.loc 1 4 7 is_stmt 0 view .LVU129
 418 0000 084A     		ldr	r2, .L43
 419 0002 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cc4hRDYn.s 			page 15


 420              	.LVL37:
   5:src/menu.c    ****     current_menu = 0;
 421              		.loc 1 5 3 is_stmt 1 view .LVU130
   5:src/menu.c    ****     current_menu = 0;
 422              		.loc 1 5 6 is_stmt 0 view .LVU131
 423 0004 8342     		cmp	r3, r0
 424 0006 07D0     		beq	.L42
   8:src/menu.c    ****     current_menu = last_menu;
 425              		.loc 1 8 8 is_stmt 1 view .LVU132
   9:src/menu.c    ****   }
 426              		.loc 1 9 18 is_stmt 0 view .LVU133
 427 0008 0749     		ldr	r1, .L43+4
   8:src/menu.c    ****     current_menu = last_menu;
 428              		.loc 1 8 11 view .LVU134
 429 000a B0F1FF3F 		cmp	r0, #-1
   9:src/menu.c    ****   }
 430              		.loc 1 9 5 is_stmt 1 view .LVU135
   9:src/menu.c    ****   }
 431              		.loc 1 9 18 is_stmt 0 view .LVU136
 432 000e 08BF     		it	eq
 433 0010 0868     		ldreq	r0, [r1]
 434              	.LVL38:
  12:src/menu.c    ****   }
 435              		.loc 1 12 5 is_stmt 1 view .LVU137
  12:src/menu.c    ****   }
 436              		.loc 1 12 18 is_stmt 0 view .LVU138
 437 0012 1060     		str	r0, [r2]
  14:src/menu.c    **** }
 438              		.loc 1 14 3 is_stmt 1 view .LVU139
  14:src/menu.c    **** }
 439              		.loc 1 14 13 is_stmt 0 view .LVU140
 440 0014 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 441              		.loc 1 15 1 view .LVU141
 442 0016 7047     		bx	lr
 443              	.LVL39:
 444              	.L42:
   6:src/menu.c    ****   }
 445              		.loc 1 6 5 is_stmt 1 view .LVU142
   6:src/menu.c    ****   }
 446              		.loc 1 6 18 is_stmt 0 view .LVU143
 447 0018 0021     		movs	r1, #0
 448 001a 1160     		str	r1, [r2]
 449 001c 0249     		ldr	r1, .L43+4
  14:src/menu.c    **** }
 450              		.loc 1 14 3 is_stmt 1 view .LVU144
  14:src/menu.c    **** }
 451              		.loc 1 14 13 is_stmt 0 view .LVU145
 452 001e 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 453              		.loc 1 15 1 view .LVU146
 454 0020 7047     		bx	lr
 455              	.L44:
 456 0022 00BF     		.align	2
 457              	.L43:
 458 0024 00000000 		.word	.LANCHOR1
 459 0028 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/cc4hRDYn.s 			page 16


 460              		.cfi_endproc
 461              	.LFE3:
 463              		.section	.text.get_menu,"ax",%progbits
 464              		.align	1
 465              		.p2align 2,,3
 466              		.global	get_menu
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv4-sp-d16
 472              	get_menu:
 473              	.LFB4:
  17:src/menu.c    ****   return current_menu;
 474              		.loc 1 17 17 is_stmt 1 view -0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
  18:src/menu.c    **** }
 479              		.loc 1 18 3 view .LVU148
  18:src/menu.c    **** }
 480              		.loc 1 18 10 is_stmt 0 view .LVU149
 481 0000 014B     		ldr	r3, .L46
  19:src/menu.c    **** 
 482              		.loc 1 19 1 view .LVU150
 483 0002 1868     		ldr	r0, [r3]
 484 0004 7047     		bx	lr
 485              	.L47:
 486 0006 00BF     		.align	2
 487              	.L46:
 488 0008 00000000 		.word	.LANCHOR1
 489              		.cfi_endproc
 490              	.LFE4:
 492              		.section	.text.set_last_menu,"ax",%progbits
 493              		.align	1
 494              		.p2align 2,,3
 495              		.global	set_last_menu
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu fpv4-sp-d16
 501              	set_last_menu:
 502              	.LFB6:
  25:src/menu.c    ****   set_menu (last_menu);
 503              		.loc 1 25 23 is_stmt 1 view -0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
  26:src/menu.c    **** }
 508              		.loc 1 26 3 view .LVU152
 509 0000 044B     		ldr	r3, .L52
 510              	.LBB55:
 511              	.LBB56:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 512              		.loc 1 4 7 is_stmt 0 view .LVU153
 513 0002 0549     		ldr	r1, .L52+4
ARM GAS  /tmp/cc4hRDYn.s 			page 17


 514              	.LBE56:
 515              	.LBE55:
  26:src/menu.c    **** }
 516              		.loc 1 26 3 view .LVU154
 517 0004 1868     		ldr	r0, [r3]
 518              	.LVL40:
 519              	.LBB58:
 520              	.LBI55:
   3:src/menu.c    ****   int m = current_menu;
 521              		.loc 1 3 6 is_stmt 1 view .LVU155
 522              	.LBB57:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 523              		.loc 1 4 3 view .LVU156
   4:src/menu.c    ****   if (new_menu == current_menu) {
 524              		.loc 1 4 7 is_stmt 0 view .LVU157
 525 0006 0A68     		ldr	r2, [r1]
 526              	.LVL41:
   5:src/menu.c    ****     current_menu = 0;
 527              		.loc 1 5 3 is_stmt 1 view .LVU158
  14:src/menu.c    **** }
 528              		.loc 1 14 13 is_stmt 0 view .LVU159
 529 0008 1A60     		str	r2, [r3]
   5:src/menu.c    ****     current_menu = 0;
 530              		.loc 1 5 6 view .LVU160
 531 000a 9042     		cmp	r0, r2
   6:src/menu.c    ****   }
 532              		.loc 1 6 5 is_stmt 1 view .LVU161
   6:src/menu.c    ****   }
 533              		.loc 1 6 18 is_stmt 0 view .LVU162
 534 000c 08BF     		it	eq
 535 000e 0020     		moveq	r0, #0
 536              	.LVL42:
   8:src/menu.c    ****     current_menu = last_menu;
 537              		.loc 1 8 8 is_stmt 1 view .LVU163
  12:src/menu.c    ****   }
 538              		.loc 1 12 18 is_stmt 0 view .LVU164
 539 0010 0860     		str	r0, [r1]
  14:src/menu.c    **** }
 540              		.loc 1 14 3 is_stmt 1 view .LVU165
 541              	.LVL43:
  14:src/menu.c    **** }
 542              		.loc 1 14 3 is_stmt 0 view .LVU166
 543              	.LBE57:
 544              	.LBE58:
  27:src/menu.c    **** 
 545              		.loc 1 27 1 view .LVU167
 546 0012 7047     		bx	lr
 547              	.L53:
 548              		.align	2
 549              	.L52:
 550 0014 00000000 		.word	.LANCHOR2
 551 0018 00000000 		.word	.LANCHOR1
 552              		.cfi_endproc
 553              	.LFE6:
 555              		.section	.text.mdot,"ax",%progbits
 556              		.align	1
 557              		.p2align 2,,3
ARM GAS  /tmp/cc4hRDYn.s 			page 18


 558              		.global	mdot
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu fpv4-sp-d16
 564              	mdot:
 565              	.LVL44:
 566              	.LFB8:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 567              		.loc 1 289 40 is_stmt 1 view -0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 290:src/menu.c    ****   if (on) {
 572              		.loc 1 290 3 view .LVU169
 290:src/menu.c    ****   if (on) {
 573              		.loc 1 290 6 is_stmt 0 view .LVU170
 574 0000 C728     		cmp	r0, #199
 575 0002 1AD8     		bhi	.L58
 576              	.LVL45:
 577              	.LBB61:
 578              	.LBI61:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 579              		.loc 1 289 6 is_stmt 1 view .LVU171
 580              	.LBB62:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 581              		.loc 1 291 3 view .LVU172
 582              	.LBE62:
 583              	.LBE61:
 289:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 584              		.loc 1 289 40 is_stmt 0 view .LVU173
 585 0004 10B4     		push	{r4}
 586              		.cfi_def_cfa_offset 4
 587              		.cfi_offset 4, -4
 588              	.LBB65:
 589              	.LBB63:
 291:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 590              		.loc 1 291 6 view .LVU174
 591 0006 63B9     		cbnz	r3, .L61
 592              		.loc 1 295 5 is_stmt 1 view .LVU175
 593              		.loc 1 295 17 is_stmt 0 view .LVU176
 594 0008 0C4B     		ldr	r3, .L62
 595              	.LVL46:
 596              		.loc 1 295 17 view .LVU177
 597 000a 03EB4000 		add	r0, r3, r0, lsl #1
 598              	.LVL47:
 599              		.loc 1 295 25 view .LVU178
 600 000e 0124     		movs	r4, #1
 601              		.loc 1 295 17 view .LVU179
 602 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 603              		.loc 1 295 25 view .LVU180
 604 0012 04FA01F1 		lsl	r1, r4, r1
 605              	.LVL48:
 606              		.loc 1 295 17 view .LVU181
 607 0016 23EA0101 		bic	r1, r3, r1
 608 001a 8154     		strb	r1, [r0, r2]
ARM GAS  /tmp/cc4hRDYn.s 			page 19


 609              	.LVL49:
 610              		.loc 1 295 17 view .LVU182
 611              	.LBE63:
 612              	.LBE65:
 296:src/menu.c    ****   }
 297:src/menu.c    **** }
 613              		.loc 1 297 1 view .LVU183
 614 001c 5DF8044B 		ldr	r4, [sp], #4
 615              		.cfi_remember_state
 616              		.cfi_restore 4
 617              		.cfi_def_cfa_offset 0
 618 0020 7047     		bx	lr
 619              	.LVL50:
 620              	.L61:
 621              		.cfi_restore_state
 622              	.LBB66:
 623              	.LBB64:
 292:src/menu.c    ****   }
 624              		.loc 1 292 5 is_stmt 1 view .LVU184
 292:src/menu.c    ****   }
 625              		.loc 1 292 17 is_stmt 0 view .LVU185
 626 0022 064B     		ldr	r3, .L62
 627              	.LVL51:
 292:src/menu.c    ****   }
 628              		.loc 1 292 17 view .LVU186
 629 0024 03EB4000 		add	r0, r3, r0, lsl #1
 630              	.LVL52:
 292:src/menu.c    ****   }
 631              		.loc 1 292 24 view .LVU187
 632 0028 0124     		movs	r4, #1
 292:src/menu.c    ****   }
 633              		.loc 1 292 17 view .LVU188
 634 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 292:src/menu.c    ****   }
 635              		.loc 1 292 24 view .LVU189
 636 002c 04FA01F1 		lsl	r1, r4, r1
 637              	.LVL53:
 292:src/menu.c    ****   }
 638              		.loc 1 292 17 view .LVU190
 639 0030 1943     		orrs	r1, r1, r3
 640 0032 8154     		strb	r1, [r0, r2]
 641              	.LBE64:
 642              	.LBE66:
 643              		.loc 1 297 1 view .LVU191
 644 0034 5DF8044B 		ldr	r4, [sp], #4
 645              		.cfi_restore 4
 646              		.cfi_def_cfa_offset 0
 647 0038 7047     		bx	lr
 648              	.LVL54:
 649              	.L58:
 650              		.loc 1 297 1 view .LVU192
 651 003a 7047     		bx	lr
 652              	.L63:
 653              		.align	2
 654              	.L62:
 655 003c 00000000 		.word	.LANCHOR0
 656              		.cfi_endproc
ARM GAS  /tmp/cc4hRDYn.s 			page 20


 657              	.LFE8:
 659              		.section	.text.display_menu,"ax",%progbits
 660              		.align	1
 661              		.p2align 2,,3
 662              		.global	display_menu
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu fpv4-sp-d16
 668              	display_menu:
 669              	.LVL55:
 670              	.LFB9:
 298:src/menu.c    **** 
 299:src/menu.c    **** 
 300:src/menu.c    **** void display_menu (int current_menu) {
 671              		.loc 1 300 38 is_stmt 1 view -0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 301:src/menu.c    ****   int len = 0;
 675              		.loc 1 301 3 view .LVU194
 302:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 676              		.loc 1 302 3 view .LVU195
 300:src/menu.c    ****   int len = 0;
 677              		.loc 1 300 38 is_stmt 0 view .LVU196
 678 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 679              		.cfi_def_cfa_offset 36
 680              		.cfi_offset 4, -36
 681              		.cfi_offset 5, -32
 682              		.cfi_offset 6, -28
 683              		.cfi_offset 7, -24
 684              		.cfi_offset 8, -20
 685              		.cfi_offset 9, -16
 686              		.cfi_offset 10, -12
 687              		.cfi_offset 11, -8
 688              		.cfi_offset 14, -4
 689 0004 83B0     		sub	sp, sp, #12
 690              		.cfi_def_cfa_offset 48
 691              		.loc 1 302 3 view .LVU197
 692 0006 0024     		movs	r4, #0
 693 0008 404F     		ldr	r7, .L82
 694 000a 0094     		str	r4, [sp]
 695 000c 3423     		movs	r3, #52
 696 000e 4FF4C872 		mov	r2, #400
 697 0012 BC21     		movs	r1, #188
 300:src/menu.c    ****   int len = 0;
 698              		.loc 1 300 38 view .LVU198
 699 0014 0646     		mov	r6, r0
 700              		.loc 1 302 3 view .LVU199
 701 0016 2046     		mov	r0, r4
 702              	.LVL56:
 703              		.loc 1 302 3 view .LVU200
 704 0018 B847     		blx	r7
 705              	.LVL57:
 303:src/menu.c    ****   //  if (current_menu == 0) return; // Menu 0 is blank
 304:src/menu.c    ****   // Not blank now - includes arrow and cmplx like all the others.
 305:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
ARM GAS  /tmp/cc4hRDYn.s 			page 21


 706              		.loc 1 305 3 is_stmt 1 view .LVU201
 707 001a 3D4D     		ldr	r5, .L82+4
 708 001c FF23     		movs	r3, #255
 709 001e 0093     		str	r3, [sp]
 710 0020 4FF4C872 		mov	r2, #400
 711 0024 0123     		movs	r3, #1
 712 0026 BC21     		movs	r1, #188
 713 0028 2046     		mov	r0, r4
 714 002a B847     		blx	r7
 715              	.LVL58:
 306:src/menu.c    ****   //Clear previous menu
 307:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 716              		.loc 1 307 3 view .LVU202
 717              	.LBB67:
 718              		.loc 1 307 8 view .LVU203
 719              		.loc 1 307 21 view .LVU204
 308:src/menu.c    ****     mdots[col][0] = 0;
 720              		.loc 1 308 19 is_stmt 0 view .LVU205
 721 002c 2246     		mov	r2, r4
 722 002e 05F5C871 		add	r1, r5, #400
 723              	.LBE67:
 305:src/menu.c    ****   //Clear previous menu
 724              		.loc 1 305 3 view .LVU206
 725 0032 2B46     		mov	r3, r5
 726              	.LVL59:
 727              	.L65:
 728              	.LBB68:
 729              		.loc 1 308 5 is_stmt 1 discriminator 3 view .LVU207
 730              		.loc 1 308 19 is_stmt 0 discriminator 3 view .LVU208
 731 0034 1A70     		strb	r2, [r3]
 309:src/menu.c    ****     mdots[col][1] = 0;
 732              		.loc 1 309 5 is_stmt 1 discriminator 3 view .LVU209
 733              		.loc 1 309 19 is_stmt 0 discriminator 3 view .LVU210
 734 0036 5A70     		strb	r2, [r3, #1]
 307:src/menu.c    ****     mdots[col][0] = 0;
 735              		.loc 1 307 32 is_stmt 1 discriminator 3 view .LVU211
 307:src/menu.c    ****     mdots[col][0] = 0;
 736              		.loc 1 307 21 discriminator 3 view .LVU212
 737 0038 0233     		adds	r3, r3, #2
 307:src/menu.c    ****     mdots[col][0] = 0;
 738              		.loc 1 307 3 is_stmt 0 discriminator 3 view .LVU213
 739 003a 9942     		cmp	r1, r3
 740 003c FAD1     		bne	.L65
 741 003e 354B     		ldr	r3, .L82+8
 742 0040 D022     		movs	r2, #208
 743 0042 02FB0636 		mla	r6, r2, r6, r3
 744              	.LVL60:
 307:src/menu.c    ****     mdots[col][0] = 0;
 745              		.loc 1 307 3 discriminator 3 view .LVU214
 746 0046 2036     		adds	r6, r6, #32
 307:src/menu.c    ****     mdots[col][0] = 0;
 747              		.loc 1 307 3 view .LVU215
 748 0048 0024     		movs	r4, #0
 749              	.LVL61:
 750              	.L66:
 307:src/menu.c    ****     mdots[col][0] = 0;
 751              		.loc 1 307 3 view .LVU216
ARM GAS  /tmp/cc4hRDYn.s 			page 22


 752              	.LBE68:
 753              	.LBB69:
 310:src/menu.c    ****   }
 311:src/menu.c    **** 
 312:src/menu.c    ****   // Draw menu items
 313:src/menu.c    ****   // 
 314:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 315:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 316:src/menu.c    ****     // Unshifted first
 317:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small fo
 754              		.loc 1 317 5 is_stmt 1 view .LVU217
 755              		.loc 1 317 11 is_stmt 0 view .LVU218
 756 004a 0021     		movs	r1, #0
 757 004c 3046     		mov	r0, r6
 758 004e FFF7FEFF 		bl	pixel_length
 759              	.LVL62:
 318:src/menu.c    ****     /*
 319:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 320:src/menu.c    ****     */
 321:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 )
 760              		.loc 1 321 5 is_stmt 1 view .LVU219
 761              		.loc 1 321 87 is_stmt 0 view .LVU220
 762 0052 C0F12000 		rsb	r0, r0, #32
 763              	.LVL63:
 764              		.loc 1 321 93 view .LVU221
 765 0056 00EBD070 		add	r0, r0, r0, lsr #31
 766              		.loc 1 321 5 view .LVU222
 767 005a 04EB6001 		add	r1, r4, r0, asr #1
 768 005e 0022     		movs	r2, #0
 769 0060 3046     		mov	r0, r6
 770 0062 06F10807 		add	r7, r6, #8
 771 0066 FFF7FEFF 		bl	set_menu_label.constprop.0
 772              	.LVL64:
 322:src/menu.c    ****     // Now shifted ...	
 323:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small font
 773              		.loc 1 323 5 is_stmt 1 view .LVU223
 774              		.loc 1 323 11 is_stmt 0 view .LVU224
 775 006a 0021     		movs	r1, #0
 776 006c 3846     		mov	r0, r7
 777 006e FFF7FEFF 		bl	pixel_length
 778              	.LVL65:
 324:src/menu.c    ****     len = item*32 + (32-len)/2;
 779              		.loc 1 324 5 is_stmt 1 view .LVU225
 780              		.loc 1 324 24 is_stmt 0 view .LVU226
 781 0072 C0F12000 		rsb	r0, r0, #32
 782              	.LVL66:
 783              		.loc 1 324 29 view .LVU227
 784 0076 00EBD070 		add	r0, r0, r0, lsr #31
 785              	.LVL67:
 325:src/menu.c    ****     if (len<0) len = 0;
 786              		.loc 1 325 5 is_stmt 1 view .LVU228
 324:src/menu.c    ****     len = item*32 + (32-len)/2;
 787              		.loc 1 324 9 is_stmt 0 view .LVU229
 788 007a 04EB6001 		add	r1, r4, r0, asr #1
 789              	.LVL68:
 324:src/menu.c    ****     len = item*32 + (32-len)/2;
 790              		.loc 1 324 9 view .LVU230
ARM GAS  /tmp/cc4hRDYn.s 			page 23


 791 007e C729     		cmp	r1, #199
 792 0080 A8BF     		it	ge
 793 0082 C721     		movge	r1, #199
 794              	.LVL69:
 326:src/menu.c    ****     if (len>199) len = 199;
 327:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 795              		.loc 1 327 5 is_stmt 1 view .LVU231
 796 0084 21EAE171 		bic	r1, r1, r1, asr #31
 797              	.LVL70:
 798              		.loc 1 327 5 is_stmt 0 view .LVU232
 799 0088 3846     		mov	r0, r7
 800 008a 2034     		adds	r4, r4, #32
 801 008c 0122     		movs	r2, #1
 802 008e FFF7FEFF 		bl	set_menu_label.constprop.0
 803              	.LVL71:
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 804              		.loc 1 314 32 is_stmt 1 view .LVU233
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 805              		.loc 1 314 22 view .LVU234
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 806              		.loc 1 314 3 is_stmt 0 view .LVU235
 807 0092 C02C     		cmp	r4, #192
 808 0094 06F12006 		add	r6, r6, #32
 809 0098 D7D1     		bne	.L66
 810 009a 1F4E     		ldr	r6, .L82+12
 811              	.LBE69:
 812              	.LBB70:
 813              	.LBB71:
 328:src/menu.c    ****   }
 329:src/menu.c    **** 
 330:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 331:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 332:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 333:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 334:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 814              		.loc 1 334 2 view .LVU236
 815 009c DFF86C90 		ldr	r9, .L82
 816 00a0 6FEA050A 		mvn	r10, r5
 817 00a4 06F5C87B 		add	fp, r6, #400
 818              	.LBE71:
 819              	.LBE70:
 820              	.LBB73:
 314:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 821              		.loc 1 314 3 view .LVU237
 822 00a8 771E     		subs	r7, r6, #1
 823              	.LBE73:
 824              	.LBB74:
 825              	.LBB72:
 826              		.loc 1 334 2 view .LVU238
 827 00aa 4FF0FF08 		mov	r8, #255
 828              	.L67:
 829              	.LVL72:
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 830              		.loc 1 331 23 is_stmt 1 view .LVU239
 831 00ae 0AEB0605 		add	r5, r10, r6
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 832              		.loc 1 331 14 is_stmt 0 view .LVU240
ARM GAS  /tmp/cc4hRDYn.s 			page 24


 833 00b2 0024     		movs	r4, #0
 834              	.LVL73:
 835              	.L70:
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 836              		.loc 1 332 7 is_stmt 1 view .LVU241
 837              		.loc 1 334 2 view .LVU242
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 838              		.loc 1 332 22 is_stmt 0 view .LVU243
 839 00b4 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 840              		.loc 1 332 40 view .LVU244
 841 00b8 2241     		asrs	r2, r2, r4
 842              		.loc 1 334 2 view .LVU245
 843 00ba A4EB8401 		sub	r1, r4, r4, lsl #2
 844 00be 0323     		movs	r3, #3
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 845              		.loc 1 332 10 view .LVU246
 846 00c0 12F0010F 		tst	r2, #1
 847              		.loc 1 334 2 view .LVU247
 848 00c4 01F1E901 		add	r1, r1, #233
 849 00c8 1A46     		mov	r2, r3
 850 00ca 2846     		mov	r0, r5
 332:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 851              		.loc 1 332 10 view .LVU248
 852 00cc 02D0     		beq	.L68
 853              		.loc 1 334 2 view .LVU249
 854 00ce CDF80080 		str	r8, [sp]
 855 00d2 C847     		blx	r9
 856              	.LVL74:
 857              	.L68:
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 858              		.loc 1 335 7 is_stmt 1 view .LVU250
 336:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 337:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 859              		.loc 1 337 2 view .LVU251
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 860              		.loc 1 335 22 is_stmt 0 view .LVU252
 861 00d4 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 862              		.loc 1 335 40 view .LVU253
 863 00d6 2241     		asrs	r2, r2, r4
 864              		.loc 1 337 2 view .LVU254
 865 00d8 A4EB8401 		sub	r1, r4, r4, lsl #2
 866 00dc 0323     		movs	r3, #3
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 867              		.loc 1 335 10 view .LVU255
 868 00de 12F0010F 		tst	r2, #1
 869              		.loc 1 337 2 view .LVU256
 870 00e2 01F1D001 		add	r1, r1, #208
 871 00e6 1A46     		mov	r2, r3
 872 00e8 04F10104 		add	r4, r4, #1
 873              	.LVL75:
 874              		.loc 1 337 2 view .LVU257
 875 00ec 2846     		mov	r0, r5
 335:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 876              		.loc 1 335 10 view .LVU258
 877 00ee 02D0     		beq	.L69
ARM GAS  /tmp/cc4hRDYn.s 			page 25


 878              		.loc 1 337 2 view .LVU259
 879 00f0 CDF80080 		str	r8, [sp]
 880 00f4 C847     		blx	r9
 881              	.LVL76:
 882              	.L69:
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 883              		.loc 1 331 32 is_stmt 1 discriminator 2 view .LVU260
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 884              		.loc 1 331 23 discriminator 2 view .LVU261
 331:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 885              		.loc 1 331 5 is_stmt 0 discriminator 2 view .LVU262
 886 00f6 062C     		cmp	r4, #6
 887 00f8 DCD1     		bne	.L70
 888              	.LBE72:
 330:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 889              		.loc 1 330 32 is_stmt 1 discriminator 2 view .LVU263
 330:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 890              		.loc 1 330 21 discriminator 2 view .LVU264
 891 00fa 0236     		adds	r6, r6, #2
 330:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 892              		.loc 1 330 3 is_stmt 0 discriminator 2 view .LVU265
 893 00fc B345     		cmp	fp, r6
 894 00fe 07F10207 		add	r7, r7, #2
 895 0102 D4D1     		bne	.L67
 896              	.LBE74:
 338:src/menu.c    ****     }
 339:src/menu.c    ****   }
 340:src/menu.c    **** }
 897              		.loc 1 340 1 view .LVU266
 898 0104 03B0     		add	sp, sp, #12
 899              		.cfi_def_cfa_offset 36
 900              		@ sp needed
 901 0106 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 902              	.LVL77:
 903              	.L83:
 904              		.loc 1 340 1 view .LVU267
 905 010a 00BF     		.align	2
 906              	.L82:
 907 010c 3D020008 		.word	134218301
 908 0110 00000000 		.word	.LANCHOR0
 909 0114 00000000 		.word	.LANCHOR3
 910 0118 01000000 		.word	.LANCHOR0+1
 911              		.cfi_endproc
 912              	.LFE9:
 914              		.section	.text.display_current_menu,"ax",%progbits
 915              		.align	1
 916              		.p2align 2,,3
 917              		.global	display_current_menu
 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu fpv4-sp-d16
 923              	display_current_menu:
 924              	.LFB5:
  21:src/menu.c    ****   display_menu (current_menu);
 925              		.loc 1 21 30 is_stmt 1 view -0
 926              		.cfi_startproc
ARM GAS  /tmp/cc4hRDYn.s 			page 26


 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
  22:src/menu.c    **** }
 930              		.loc 1 22 3 view .LVU269
 931 0000 014B     		ldr	r3, .L85
 932 0002 1868     		ldr	r0, [r3]
 933 0004 FFF7FEBF 		b	display_menu
 934              	.LVL78:
 935              	.L86:
 936              		.align	2
 937              	.L85:
 938 0008 00000000 		.word	.LANCHOR1
 939              		.cfi_endproc
 940              	.LFE5:
 942              		.section	.text.shutdown,"ax",%progbits
 943              		.align	1
 944              		.p2align 2,,3
 945              		.global	shutdown
 946              		.syntax unified
 947              		.thumb
 948              		.thumb_func
 949              		.fpu fpv4-sp-d16
 951              	shutdown:
 952              	.LFB11:
 953              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
ARM GAS  /tmp/cc4hRDYn.s 			page 27


  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** const uint8_t mid_menu[] = {
  46:src/console.c ****     MI_SYSTEM_ENTER,
  47:src/console.c ****     0 }; // Terminator
  48:src/console.c **** 
  49:src/console.c **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  50:src/console.c **** 
  51:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  52:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  53:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  54:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  55:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  56:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  57:src/console.c **** 
  58:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  59:src/console.c **** 
  60:src/console.c **** static struct _ndmap remap (const int c) {
  61:src/console.c **** 
  62:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  63:src/console.c **** 
  64:src/console.c **** #include "keytran.c"
  65:src/console.c **** 
  66:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  67:src/console.c **** 
  68:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  69:src/console.c **** 
  70:src/console.c ****   if (c == 44 ) {
  71:src/console.c ****     // Start click 
  72:src/console.c ****     start_buzzer_freq(4400); sys_delay(10); stop_buzzer();
  73:src/console.c ****     // Make screenshot - allow to report errors
  74:src/console.c ****     if ( create_screenshot(1) == 2 ) {
  75:src/console.c ****       // Was error just wait for confirmation
  76:src/console.c ****       wait_for_key_press();
  77:src/console.c ****     }
  78:src/console.c ****     // End click
  79:src/console.c ****     start_buzzer_freq(8800); sys_delay(10); stop_buzzer();
  80:src/console.c ****     return no_key;
  81:src/console.c ****   }
  82:src/console.c **** 
  83:src/console.c ****   
  84:src/console.c ****   if ( get_alpha_state() ) {
  85:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  86:src/console.c ****       switch (cur_shift()) { 
  87:src/console.c ****       case SHIFT_N:
  88:src/console.c **** 	return mapping_none[c]; // N -> F
ARM GAS  /tmp/cc4hRDYn.s 			page 28


  89:src/console.c **** 	break;
  90:src/console.c ****       case SHIFT_F:
  91:src/console.c **** 	return mapping_fshift[c]; // F -> G
  92:src/console.c **** 	break;
  93:src/console.c ****       case SHIFT_G:
  94:src/console.c **** 	return h_shift; // G -> H
  95:src/console.c **** 	break;
  96:src/console.c ****       case SHIFT_H:
  97:src/console.c **** 	return h_shift; // H -> N
  98:src/console.c ****       default:
  99:src/console.c **** 	return no_change;
 100:src/console.c ****       }
 101:src/console.c ****     }
 102:src/console.c ****     return mapping_alpha [c];
 103:src/console.c ****   }
 104:src/console.c ****     
 105:src/console.c ****   switch (c) {
 106:src/console.c ****   case KEY_F1:
 107:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 109:src/console.c ****   case KEY_F2:
 110:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 112:src/console.c ****   case KEY_F3:
 113:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 115:src/console.c ****   case KEY_F4:
 116:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 117:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 118:src/console.c ****   case KEY_F5:
 119:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 120:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 121:src/console.c ****   case KEY_F6:
 122:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 123:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 124:src/console.c ****   }
 125:src/console.c ****   
 126:src/console.c ****   switch (cur_shift()) {
 127:src/console.c ****   case SHIFT_N:    
 128:src/console.c ****     return mapping_none[c];
 129:src/console.c ****     break;
 130:src/console.c ****   case SHIFT_F:
 131:src/console.c ****     return mapping_fshift[c];
 132:src/console.c ****     break;
 133:src/console.c ****   case SHIFT_G:
 134:src/console.c ****     return mapping_gshift[c];
 135:src/console.c ****     break;
 136:src/console.c ****   default:
 137:src/console.c ****     return no_change;
 138:src/console.c ****   }
 139:src/console.c **** }
 140:src/console.c **** 
 141:src/console.c **** #endif
 142:src/console.c **** 
 143:src/console.c **** void shutdown( void )
 144:src/console.c **** {
 954              		.loc 2 144 1 view -0
ARM GAS  /tmp/cc4hRDYn.s 			page 29


 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 0
 957              		@ frame_needed = 0, uses_anonymous_args = 0
 145:src/console.c **** #ifndef DM42
 146:src/console.c ****   checksum_all();
 147:src/console.c ****   setuptty( 1 );
 148:src/console.c ****   save_statefile( NULL );
 149:src/console.c ****   exit( 0 );
 150:src/console.c **** #else
 151:src/console.c ****   save_ram_file(0);
 958              		.loc 2 151 3 view .LVU271
 144:src/console.c **** #ifndef DM42
 959              		.loc 2 144 1 is_stmt 0 view .LVU272
 960 0000 08B5     		push	{r3, lr}
 961              		.cfi_def_cfa_offset 8
 962              		.cfi_offset 3, -8
 963              		.cfi_offset 14, -4
 964              		.loc 2 151 3 view .LVU273
 965 0002 0020     		movs	r0, #0
 966 0004 FFF7FEFF 		bl	save_ram_file
 967              	.LVL79:
 152:src/console.c ****   SET_ST(STAT_PGM_END);
 968              		.loc 2 152 3 is_stmt 1 view .LVU274
 969 0008 024A     		ldr	r2, .L89
 970 000a 1368     		ldr	r3, [r2]
 971 000c 43F40073 		orr	r3, r3, #512
 972 0010 1360     		str	r3, [r2]
 153:src/console.c **** #endif
 154:src/console.c **** }
 973              		.loc 2 154 1 is_stmt 0 view .LVU275
 974 0012 08BD     		pop	{r3, pc}
 975              	.L90:
 976              		.align	2
 977              	.L89:
 978 0014 00200010 		.word	268443648
 979              		.cfi_endproc
 980              	.LFE11:
 982              		.section	.text.is_key_pressed,"ax",%progbits
 983              		.align	1
 984              		.p2align 2,,3
 985              		.global	is_key_pressed
 986              		.syntax unified
 987              		.thumb
 988              		.thumb_func
 989              		.fpu fpv4-sp-d16
 991              	is_key_pressed:
 992              	.LFB12:
 155:src/console.c **** 
 156:src/console.c **** 
 157:src/console.c **** /*
 158:src/console.c ****  *  Dummies
 159:src/console.c ****  */
 160:src/console.c **** int is_key_pressed(void) 
 161:src/console.c **** {
 993              		.loc 2 161 1 is_stmt 1 view -0
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc4hRDYn.s 			page 30


 996              		@ frame_needed = 0, uses_anonymous_args = 0
 162:src/console.c **** #ifdef DM42
 163:src/console.c ****   return !key_empty();
 997              		.loc 2 163 3 view .LVU277
 161:src/console.c **** #ifdef DM42
 998              		.loc 2 161 1 is_stmt 0 view .LVU278
 999 0000 08B5     		push	{r3, lr}
 1000              		.cfi_def_cfa_offset 8
 1001              		.cfi_offset 3, -8
 1002              		.cfi_offset 14, -4
 1003              		.loc 2 163 11 view .LVU279
 1004 0002 034B     		ldr	r3, .L93
 1005 0004 9847     		blx	r3
 1006              	.LVL80:
 164:src/console.c **** #else
 165:src/console.c ****   return 0;
 166:src/console.c **** #endif
 167:src/console.c **** }
 1007              		.loc 2 167 1 view .LVU280
 1008 0006 B0FA80F0 		clz	r0, r0
 1009 000a 4009     		lsrs	r0, r0, #5
 1010 000c 08BD     		pop	{r3, pc}
 1011              	.L94:
 1012 000e 00BF     		.align	2
 1013              	.L93:
 1014 0010 7D030008 		.word	134218621
 1015              		.cfi_endproc
 1016              	.LFE12:
 1018              		.section	.text.get_key,"ax",%progbits
 1019              		.align	1
 1020              		.p2align 2,,3
 1021              		.global	get_key
 1022              		.syntax unified
 1023              		.thumb
 1024              		.thumb_func
 1025              		.fpu fpv4-sp-d16
 1027              	get_key:
 1028              	.LFB13:
 168:src/console.c **** 
 169:src/console.c **** int get_key(void)
 170:src/console.c **** {
 1029              		.loc 2 170 1 is_stmt 1 view -0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 0
 1032              		@ frame_needed = 0, uses_anonymous_args = 0
 1033              		@ link register save eliminated.
 171:src/console.c ****   #ifdef DM42
 172:src/console.c ****   return key_pop();
 1034              		.loc 2 172 3 view .LVU282
 1035              		.loc 2 172 10 is_stmt 0 view .LVU283
 1036 0000 004B     		ldr	r3, .L96
 1037 0002 1847     		bx	r3
 1038              	.LVL81:
 1039              	.L97:
 1040              		.align	2
 1041              	.L96:
 1042 0004 89030008 		.word	134218633
ARM GAS  /tmp/cc4hRDYn.s 			page 31


 1043              		.cfi_endproc
 1044              	.LFE13:
 1046              		.section	.text.put_key,"ax",%progbits
 1047              		.align	1
 1048              		.p2align 2,,3
 1049              		.global	put_key
 1050              		.syntax unified
 1051              		.thumb
 1052              		.thumb_func
 1053              		.fpu fpv4-sp-d16
 1055              	put_key:
 1056              	.LVL82:
 1057              	.LFB14:
 173:src/console.c ****   #else
 174:src/console.c ****   return 0;
 175:src/console.c ****   #endif
 176:src/console.c **** }
 177:src/console.c **** 
 178:src/console.c **** int put_key( int k )
 179:src/console.c **** {
 1058              		.loc 2 179 1 is_stmt 1 view -0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062              		@ link register save eliminated.
 180:src/console.c ****   #ifdef DM42
 181:src/console.c ****   return key_push(k);
 1063              		.loc 2 181 3 view .LVU285
 1064              		.loc 2 181 10 is_stmt 0 view .LVU286
 1065 0000 004B     		ldr	r3, .L99
 1066 0002 1847     		bx	r3
 1067              	.LVL83:
 1068              	.L100:
 1069              		.loc 2 181 10 view .LVU287
 1070              		.align	2
 1071              	.L99:
 1072 0004 81030008 		.word	134218625
 1073              		.cfi_endproc
 1074              	.LFE14:
 1076              		.section	.text.shift_down,"ax",%progbits
 1077              		.align	1
 1078              		.p2align 2,,3
 1079              		.global	shift_down
 1080              		.syntax unified
 1081              		.thumb
 1082              		.thumb_func
 1083              		.fpu fpv4-sp-d16
 1085              	shift_down:
 1086              	.LFB15:
 182:src/console.c ****   #else
 183:src/console.c ****   return k;
 184:src/console.c ****   #endif
 185:src/console.c **** }
 186:src/console.c **** 
 187:src/console.c **** enum shifts shift_down(void)
 188:src/console.c **** {
 1087              		.loc 2 188 1 is_stmt 1 view -0
ARM GAS  /tmp/cc4hRDYn.s 			page 32


 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 0
 1090              		@ frame_needed = 0, uses_anonymous_args = 0
 1091              		@ link register save eliminated.
 189:src/console.c **** 	return SHIFT_N;
 1092              		.loc 2 189 2 view .LVU289
 190:src/console.c **** }
 1093              		.loc 2 190 1 is_stmt 0 view .LVU290
 1094 0000 0020     		movs	r0, #0
 1095 0002 7047     		bx	lr
 1096              		.cfi_endproc
 1097              	.LFE15:
 1099              		.section	.text.start_key_timer,"ax",%progbits
 1100              		.align	1
 1101              		.p2align 2,,3
 1102              		.global	start_key_timer
 1103              		.syntax unified
 1104              		.thumb
 1105              		.thumb_func
 1106              		.fpu fpv4-sp-d16
 1108              	start_key_timer:
 1109              	.LFB16:
 191:src/console.c **** 
 192:src/console.c **** #ifndef DM42   // No serial operations for DM42
 193:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 194:src/console.c **** /*
 195:src/console.c ****  *  Open a COM port for transmission
 196:src/console.c ****  */
 197:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 198:src/console.c **** {
 199:src/console.c **** 	return 0;
 200:src/console.c **** }
 201:src/console.c **** 
 202:src/console.c **** 
 203:src/console.c **** /*
 204:src/console.c ****  *  Close the COM port after transmission is complete
 205:src/console.c ****  */
 206:src/console.c **** extern void close_port( void )
 207:src/console.c **** {
 208:src/console.c **** }
 209:src/console.c **** 
 210:src/console.c **** 
 211:src/console.c **** /*
 212:src/console.c ****  *  Output a single byte to the serial
 213:src/console.c ****  */
 214:src/console.c **** void put_byte( unsigned char byte )
 215:src/console.c **** {
 216:src/console.c **** 	report_err(ERR_PROG_BAD);
 217:src/console.c **** }
 218:src/console.c **** 
 219:src/console.c **** 
 220:src/console.c **** /*
 221:src/console.c ****  *  Force buffer flush
 222:src/console.c ****  */
 223:src/console.c **** void flush_comm( void )
 224:src/console.c **** {
 225:src/console.c **** }
ARM GAS  /tmp/cc4hRDYn.s 			page 33


 226:src/console.c **** 
 227:src/console.c **** #endif
 228:src/console.c **** #endif
 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Main loop
 233:src/console.c ****  */
 234:src/console.c **** #ifdef DM42
 235:src/console.c **** void start_key_timer (void);
 236:src/console.c **** int keyticks (void);
 237:src/console.c **** void moveto (int line, int x);
 238:src/console.c **** 
 239:src/console.c **** static int start_ticks;
 240:src/console.c **** 
 241:src/console.c **** void start_key_timer() {
 1110              		.loc 2 241 24 is_stmt 1 view -0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 242:src/console.c ****     start_ticks = get_rtc_ticks();
 1114              		.loc 2 242 5 view .LVU292
 241:src/console.c ****     start_ticks = get_rtc_ticks();
 1115              		.loc 2 241 24 is_stmt 0 view .LVU293
 1116 0000 08B5     		push	{r3, lr}
 1117              		.cfi_def_cfa_offset 8
 1118              		.cfi_offset 3, -8
 1119              		.cfi_offset 14, -4
 1120              		.loc 2 242 19 view .LVU294
 1121 0002 024B     		ldr	r3, .L104
 1122 0004 9847     		blx	r3
 1123              	.LVL84:
 1124              		.loc 2 242 17 view .LVU295
 1125 0006 024B     		ldr	r3, .L104+4
 1126 0008 1860     		str	r0, [r3]
 243:src/console.c **** }
 1127              		.loc 2 243 1 view .LVU296
 1128 000a 08BD     		pop	{r3, pc}
 1129              	.L105:
 1130              		.align	2
 1131              	.L104:
 1132 000c B9040008 		.word	134218937
 1133 0010 00000000 		.word	.LANCHOR4
 1134              		.cfi_endproc
 1135              	.LFE16:
 1137              		.section	.text.keyticks,"ax",%progbits
 1138              		.align	1
 1139              		.p2align 2,,3
 1140              		.global	keyticks
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1144              		.fpu fpv4-sp-d16
 1146              	keyticks:
 1147              	.LFB17:
 244:src/console.c **** 
 245:src/console.c **** int keyticks () {
ARM GAS  /tmp/cc4hRDYn.s 			page 34


 1148              		.loc 2 245 17 is_stmt 1 view -0
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 0
 1151              		@ frame_needed = 0, uses_anonymous_args = 0
 246:src/console.c ****   int i;
 1152              		.loc 2 246 3 view .LVU298
 247:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1153              		.loc 2 247 3 view .LVU299
 245:src/console.c ****   int i;
 1154              		.loc 2 245 17 is_stmt 0 view .LVU300
 1155 0000 08B5     		push	{r3, lr}
 1156              		.cfi_def_cfa_offset 8
 1157              		.cfi_offset 3, -8
 1158              		.cfi_offset 14, -4
 1159              		.loc 2 247 8 view .LVU301
 1160 0002 054B     		ldr	r3, .L108
 1161 0004 9847     		blx	r3
 1162              	.LVL85:
 248:src/console.c ****   return i >> 8;
 1163              		.loc 2 248 3 is_stmt 1 view .LVU302
 247:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1164              		.loc 2 247 24 is_stmt 0 view .LVU303
 1165 0006 054B     		ldr	r3, .L108+4
 1166 0008 1B68     		ldr	r3, [r3]
 1167 000a C01A     		subs	r0, r0, r3
 1168              	.LVL86:
 247:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1169              		.loc 2 247 38 view .LVU304
 1170 000c 00EB8000 		add	r0, r0, r0, lsl #2
 249:src/console.c **** }
 1171              		.loc 2 249 1 view .LVU305
 1172 0010 40F3D710 		sbfx	r0, r0, #7, #24
 1173 0014 08BD     		pop	{r3, pc}
 1174              	.L109:
 1175 0016 00BF     		.align	2
 1176              	.L108:
 1177 0018 B9040008 		.word	134218937
 1178 001c 00000000 		.word	.LANCHOR4
 1179              		.cfi_endproc
 1180              	.LFE17:
 1182              		.section	.text.moveto,"ax",%progbits
 1183              		.align	1
 1184              		.p2align 2,,3
 1185              		.global	moveto
 1186              		.syntax unified
 1187              		.thumb
 1188              		.thumb_func
 1189              		.fpu fpv4-sp-d16
 1191              	moveto:
 1192              	.LVL87:
 1193              	.LFB18:
 250:src/console.c **** 
 251:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 252:src/console.c **** char print_string[22];
 253:src/console.c **** int n_p = 0;
 254:src/console.c **** 
 255:src/console.c **** 
ARM GAS  /tmp/cc4hRDYn.s 			page 35


 256:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 1194              		.loc 2 256 30 is_stmt 1 view -0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 0
 1197              		@ frame_needed = 0, uses_anonymous_args = 0
 257:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1198              		.loc 2 257 3 view .LVU307
 256:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1199              		.loc 2 256 30 is_stmt 0 view .LVU308
 1200 0000 70B5     		push	{r4, r5, r6, lr}
 1201              		.cfi_def_cfa_offset 16
 1202              		.cfi_offset 4, -16
 1203              		.cfi_offset 5, -12
 1204              		.cfi_offset 6, -8
 1205              		.cfi_offset 14, -4
 1206              		.loc 2 257 3 view .LVU309
 1207 0002 0A4D     		ldr	r5, .L112
 1208 0004 0A4B     		ldr	r3, .L112+4
 256:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1209              		.loc 2 256 30 view .LVU310
 1210 0006 0246     		mov	r2, r0
 1211 0008 0C46     		mov	r4, r1
 1212              		.loc 2 257 3 view .LVU311
 1213 000a A86B     		ldr	r0, [r5, #56]
 1214              	.LVL88:
 1215              		.loc 2 257 3 view .LVU312
 1216 000c 511E     		subs	r1, r2, #1
 1217              	.LVL89:
 1218              		.loc 2 257 3 view .LVU313
 1219 000e 9847     		blx	r3
 1220              	.LVL90:
 258:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1221              		.loc 2 258 3 is_stmt 1 view .LVU314
 1222 0010 A86B     		ldr	r0, [r5, #56]
 1223 0012 084B     		ldr	r3, .L112+8
 1224              		.loc 2 258 33 is_stmt 0 view .LVU315
 1225 0014 0168     		ldr	r1, [r0]
 1226              		.loc 2 258 3 view .LVU316
 1227 0016 B0F90620 		ldrsh	r2, [r0, #6]
 1228              		.loc 2 258 33 view .LVU317
 1229 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 1230              		.loc 2 258 43 view .LVU318
 1231 001c 013C     		subs	r4, r4, #1
 1232              	.LVL91:
 1233              		.loc 2 258 40 view .LVU319
 1234 001e 04FB01F1 		mul	r1, r4, r1
 1235              		.loc 2 258 3 view .LVU320
 1236 0022 1431     		adds	r1, r1, #20
 259:src/console.c **** }
 1237              		.loc 2 259 1 view .LVU321
 1238 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1239              		.cfi_restore 14
 1240              		.cfi_restore 6
 1241              		.cfi_restore 5
 1242              		.cfi_restore 4
 1243              		.cfi_def_cfa_offset 0
 1244              	.LVL92:
ARM GAS  /tmp/cc4hRDYn.s 			page 36


 258:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1245              		.loc 2 258 3 view .LVU322
 1246 0028 1847     		bx	r3	@ indirect register sibling call
 1247              	.LVL93:
 1248              	.L113:
 1249 002a 00BF     		.align	2
 1250              	.L112:
 1251 002c 00200010 		.word	268443648
 1252 0030 69020008 		.word	134218345
 1253 0034 6D020008 		.word	134218349
 1254              		.cfi_endproc
 1255              	.LFE18:
 1257              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 1258              		.align	2
 1259              	.LC0:
 1260 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 1260      673A2025 
 1260      34692C25 
 1260      346900
 1261              		.section	.text.print_debug,"ax",%progbits
 1262              		.align	1
 1263              		.p2align 2,,3
 1264              		.global	print_debug
 1265              		.syntax unified
 1266              		.thumb
 1267              		.thumb_func
 1268              		.fpu fpv4-sp-d16
 1270              	print_debug:
 1271              	.LVL94:
 1272              	.LFB19:
 260:src/console.c **** 
 261:src/console.c **** void print_debug (int i, int j) {
 1273              		.loc 2 261 33 is_stmt 1 view -0
 1274              		.cfi_startproc
 1275              		@ args = 0, pretend = 0, frame = 8
 1276              		@ frame_needed = 0, uses_anonymous_args = 0
 262:src/console.c ****   strcpy( print_string, spaces );
 1277              		.loc 2 262 3 view .LVU324
 261:src/console.c ****   strcpy( print_string, spaces );
 1278              		.loc 2 261 33 is_stmt 0 view .LVU325
 1279 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1280              		.cfi_def_cfa_offset 24
 1281              		.cfi_offset 4, -24
 1282              		.cfi_offset 5, -20
 1283              		.cfi_offset 6, -16
 1284              		.cfi_offset 7, -12
 1285              		.cfi_offset 8, -8
 1286              		.cfi_offset 14, -4
 1287              		.loc 2 262 3 view .LVU326
 1288 0004 174C     		ldr	r4, .L116
 1289 0006 184F     		ldr	r7, .L116+4
 263:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 264:src/console.c ****   moveto (3, 1);
 265:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1290              		.loc 2 265 3 view .LVU327
 1291 0008 184E     		ldr	r6, .L116+8
 1292 000a 194D     		ldr	r5, .L116+12
ARM GAS  /tmp/cc4hRDYn.s 			page 37


 266:src/console.c ****   lcd_refresh();
 1293              		.loc 2 266 3 view .LVU328
 1294 000c DFF86C80 		ldr	r8, .L116+24
 261:src/console.c ****   strcpy( print_string, spaces );
 1295              		.loc 2 261 33 view .LVU329
 1296 0010 82B0     		sub	sp, sp, #8
 1297              		.cfi_def_cfa_offset 32
 261:src/console.c ****   strcpy( print_string, spaces );
 1298              		.loc 2 261 33 view .LVU330
 1299 0012 0190     		str	r0, [sp, #4]
 1300 0014 0091     		str	r1, [sp]
 262:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1301              		.loc 2 262 3 view .LVU331
 1302 0016 2046     		mov	r0, r4
 1303              	.LVL95:
 262:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1304              		.loc 2 262 3 view .LVU332
 1305 0018 3946     		mov	r1, r7
 1306              	.LVL96:
 262:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1307              		.loc 2 262 3 view .LVU333
 1308 001a FFF7FEFF 		bl	strcpy
 1309              	.LVL97:
 263:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1310              		.loc 2 263 3 is_stmt 1 view .LVU334
 1311 001e DDE90032 		ldrd	r3, r2, [sp]
 1312 0022 1449     		ldr	r1, .L116+16
 1313 0024 2046     		mov	r0, r4
 1314 0026 FFF7FEFF 		bl	sprintf
 1315              	.LVL98:
 264:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1316              		.loc 2 264 3 view .LVU335
 1317 002a 0121     		movs	r1, #1
 1318 002c 0320     		movs	r0, #3
 1319 002e FFF7FEFF 		bl	moveto
 1320              	.LVL99:
 265:src/console.c ****   lcd_refresh();
 1321              		.loc 2 265 3 view .LVU336
 1322 0032 2146     		mov	r1, r4
 1323 0034 B06B     		ldr	r0, [r6, #56]
 1324 0036 A847     		blx	r5
 1325              	.LVL100:
 1326              		.loc 2 266 3 view .LVU337
 1327 0038 C047     		blx	r8
 1328              	.LVL101:
 267:src/console.c ****   sys_delay (2500);
 1329              		.loc 2 267 3 view .LVU338
 1330 003a 0F4B     		ldr	r3, .L116+20
 1331 003c 40F6C410 		movw	r0, #2500
 1332 0040 9847     		blx	r3
 1333              	.LVL102:
 268:src/console.c ****   /* wait_for_key_press(); */
 269:src/console.c ****   //  key_pop_all();
 270:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 271:src/console.c ****   // key_pop_all();
 272:src/console.c ****   strcpy( print_string, spaces );
 1334              		.loc 2 272 3 view .LVU339
ARM GAS  /tmp/cc4hRDYn.s 			page 38


 1335 0042 3946     		mov	r1, r7
 1336 0044 2046     		mov	r0, r4
 1337 0046 FFF7FEFF 		bl	strcpy
 1338              	.LVL103:
 273:src/console.c ****   moveto (3, 1);
 1339              		.loc 2 273 3 view .LVU340
 1340 004a 0121     		movs	r1, #1
 1341 004c 0320     		movs	r0, #3
 1342 004e FFF7FEFF 		bl	moveto
 1343              	.LVL104:
 274:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1344              		.loc 2 274 3 view .LVU341
 1345 0052 B06B     		ldr	r0, [r6, #56]
 1346 0054 2146     		mov	r1, r4
 1347 0056 A847     		blx	r5
 1348              	.LVL105:
 275:src/console.c ****   lcd_refresh();
 1349              		.loc 2 275 3 view .LVU342
 1350 0058 4346     		mov	r3, r8
 276:src/console.c ****   // while (key_empty()<=0);; // wait for release
 277:src/console.c ****   // key_pop_all();
 278:src/console.c **** }
 1351              		.loc 2 278 1 is_stmt 0 view .LVU343
 1352 005a 02B0     		add	sp, sp, #8
 1353              		.cfi_def_cfa_offset 24
 1354              	.LVL106:
 1355              		.loc 2 278 1 view .LVU344
 1356              		@ sp needed
 1357 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1358              		.cfi_restore 14
 1359              		.cfi_restore 8
 1360              		.cfi_restore 7
 1361              		.cfi_restore 6
 1362              		.cfi_restore 5
 1363              		.cfi_restore 4
 1364              		.cfi_def_cfa_offset 0
 1365              	.LVL107:
 275:src/console.c ****   lcd_refresh();
 1366              		.loc 2 275 3 view .LVU345
 1367 0060 1847     		bx	r3	@ indirect register sibling call
 1368              	.LVL108:
 1369              	.L117:
 1370 0062 00BF     		.align	2
 1371              	.L116:
 1372 0064 00000000 		.word	print_string
 1373 0068 00000000 		.word	.LANCHOR5
 1374 006c 00200010 		.word	268443648
 1375 0070 B1020008 		.word	134218417
 1376 0074 00000000 		.word	.LC0
 1377 0078 05040008 		.word	134218757
 1378 007c 31020008 		.word	134218289
 1379              		.cfi_endproc
 1380              	.LFE19:
 1382              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 1383              		.align	2
 1384              	.LC1:
 1385 0000 443A2534 		.ascii	"D:%4i,%13s\000"
ARM GAS  /tmp/cc4hRDYn.s 			page 39


 1385      692C2531 
 1385      337300
 1386              		.section	.text.print_debug2,"ax",%progbits
 1387              		.align	1
 1388              		.p2align 2,,3
 1389              		.global	print_debug2
 1390              		.syntax unified
 1391              		.thumb
 1392              		.thumb_func
 1393              		.fpu fpv4-sp-d16
 1395              	print_debug2:
 1396              	.LVL109:
 1397              	.LFB20:
 279:src/console.c **** 
 280:src/console.c **** void print_debug2 (int i, char* j) {
 1398              		.loc 2 280 36 is_stmt 1 view -0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 8
 1401              		@ frame_needed = 0, uses_anonymous_args = 0
 281:src/console.c ****   strcpy( print_string, spaces );
 1402              		.loc 2 281 3 view .LVU347
 280:src/console.c ****   strcpy( print_string, spaces );
 1403              		.loc 2 280 36 is_stmt 0 view .LVU348
 1404 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1405              		.cfi_def_cfa_offset 24
 1406              		.cfi_offset 4, -24
 1407              		.cfi_offset 5, -20
 1408              		.cfi_offset 6, -16
 1409              		.cfi_offset 7, -12
 1410              		.cfi_offset 8, -8
 1411              		.cfi_offset 14, -4
 1412              		.loc 2 281 3 view .LVU349
 1413 0004 174C     		ldr	r4, .L120
 1414 0006 184F     		ldr	r7, .L120+4
 282:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 283:src/console.c ****   moveto (3, 1);
 284:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1415              		.loc 2 284 3 view .LVU350
 1416 0008 184E     		ldr	r6, .L120+8
 1417 000a 194D     		ldr	r5, .L120+12
 285:src/console.c ****   lcd_refresh();
 1418              		.loc 2 285 3 view .LVU351
 1419 000c DFF86C80 		ldr	r8, .L120+24
 280:src/console.c ****   strcpy( print_string, spaces );
 1420              		.loc 2 280 36 view .LVU352
 1421 0010 82B0     		sub	sp, sp, #8
 1422              		.cfi_def_cfa_offset 32
 280:src/console.c ****   strcpy( print_string, spaces );
 1423              		.loc 2 280 36 view .LVU353
 1424 0012 0190     		str	r0, [sp, #4]
 1425 0014 0091     		str	r1, [sp]
 281:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1426              		.loc 2 281 3 view .LVU354
 1427 0016 2046     		mov	r0, r4
 1428              	.LVL110:
 281:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1429              		.loc 2 281 3 view .LVU355
ARM GAS  /tmp/cc4hRDYn.s 			page 40


 1430 0018 3946     		mov	r1, r7
 1431              	.LVL111:
 281:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1432              		.loc 2 281 3 view .LVU356
 1433 001a FFF7FEFF 		bl	strcpy
 1434              	.LVL112:
 282:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1435              		.loc 2 282 3 is_stmt 1 view .LVU357
 1436 001e DDE90032 		ldrd	r3, r2, [sp]
 1437 0022 1449     		ldr	r1, .L120+16
 1438 0024 2046     		mov	r0, r4
 1439 0026 FFF7FEFF 		bl	sprintf
 1440              	.LVL113:
 283:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1441              		.loc 2 283 3 view .LVU358
 1442 002a 0121     		movs	r1, #1
 1443 002c 0320     		movs	r0, #3
 1444 002e FFF7FEFF 		bl	moveto
 1445              	.LVL114:
 284:src/console.c ****   lcd_refresh();
 1446              		.loc 2 284 3 view .LVU359
 1447 0032 2146     		mov	r1, r4
 1448 0034 B06B     		ldr	r0, [r6, #56]
 1449 0036 A847     		blx	r5
 1450              	.LVL115:
 1451              		.loc 2 285 3 view .LVU360
 1452 0038 C047     		blx	r8
 1453              	.LVL116:
 286:src/console.c ****   sys_delay (2500);
 1454              		.loc 2 286 3 view .LVU361
 1455 003a 0F4B     		ldr	r3, .L120+20
 1456 003c 40F6C410 		movw	r0, #2500
 1457 0040 9847     		blx	r3
 1458              	.LVL117:
 287:src/console.c ****   /* wait_for_key_press(); */
 288:src/console.c ****   //  key_pop_all();
 289:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 290:src/console.c ****   // key_pop_all();
 291:src/console.c ****   strcpy( print_string, spaces );
 1459              		.loc 2 291 3 view .LVU362
 1460 0042 3946     		mov	r1, r7
 1461 0044 2046     		mov	r0, r4
 1462 0046 FFF7FEFF 		bl	strcpy
 1463              	.LVL118:
 292:src/console.c ****   moveto (3, 1);
 1464              		.loc 2 292 3 view .LVU363
 1465 004a 0121     		movs	r1, #1
 1466 004c 0320     		movs	r0, #3
 1467 004e FFF7FEFF 		bl	moveto
 1468              	.LVL119:
 293:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1469              		.loc 2 293 3 view .LVU364
 1470 0052 B06B     		ldr	r0, [r6, #56]
 1471 0054 2146     		mov	r1, r4
 1472 0056 A847     		blx	r5
 1473              	.LVL120:
 294:src/console.c ****   lcd_refresh();
ARM GAS  /tmp/cc4hRDYn.s 			page 41


 1474              		.loc 2 294 3 view .LVU365
 1475 0058 4346     		mov	r3, r8
 295:src/console.c ****   // while (key_empty()<=0);; // wait for release
 296:src/console.c ****   // key_pop_all();
 297:src/console.c **** }
 1476              		.loc 2 297 1 is_stmt 0 view .LVU366
 1477 005a 02B0     		add	sp, sp, #8
 1478              		.cfi_def_cfa_offset 24
 1479              	.LVL121:
 1480              		.loc 2 297 1 view .LVU367
 1481              		@ sp needed
 1482 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1483              		.cfi_restore 14
 1484              		.cfi_restore 8
 1485              		.cfi_restore 7
 1486              		.cfi_restore 6
 1487              		.cfi_restore 5
 1488              		.cfi_restore 4
 1489              		.cfi_def_cfa_offset 0
 1490              	.LVL122:
 294:src/console.c ****   lcd_refresh();
 1491              		.loc 2 294 3 view .LVU368
 1492 0060 1847     		bx	r3	@ indirect register sibling call
 1493              	.LVL123:
 1494              	.L121:
 1495 0062 00BF     		.align	2
 1496              	.L120:
 1497 0064 00000000 		.word	print_string
 1498 0068 00000000 		.word	.LANCHOR5
 1499 006c 00200010 		.word	268443648
 1500 0070 B1020008 		.word	134218417
 1501 0074 00000000 		.word	.LC1
 1502 0078 05040008 		.word	134218757
 1503 007c 31020008 		.word	134218289
 1504              		.cfi_endproc
 1505              	.LFE20:
 1507              		.section	.text.do_now,"ax",%progbits
 1508              		.align	1
 1509              		.p2align 2,,3
 1510              		.global	do_now
 1511              		.syntax unified
 1512              		.thumb
 1513              		.thumb_func
 1514              		.fpu fpv4-sp-d16
 1516              	do_now:
 1517              	.LVL124:
 1518              	.LFB21:
 298:src/console.c **** 
 299:src/console.c **** void do_now (int key, int shift) {
 1519              		.loc 2 299 34 is_stmt 1 view -0
 1520              		.cfi_startproc
 1521              		@ args = 0, pretend = 0, frame = 8
 1522              		@ frame_needed = 0, uses_anonymous_args = 0
 1523              		@ link register save eliminated.
 300:src/console.c ****   struct _ndmap temp;
 1524              		.loc 2 300 3 view .LVU370
 301:src/console.c ****   temp.key_34s = key;
ARM GAS  /tmp/cc4hRDYn.s 			page 42


 1525              		.loc 2 301 3 view .LVU371
 299:src/console.c ****   struct _ndmap temp;
 1526              		.loc 2 299 34 is_stmt 0 view .LVU372
 1527 0000 82B0     		sub	sp, sp, #8
 1528              		.cfi_def_cfa_offset 8
 302:src/console.c ****   temp.shift = shift;
 303:src/console.c ****   process_keycode_with_shift (temp);
 1529              		.loc 2 303 3 view .LVU373
 1530 0002 02AB     		add	r3, sp, #8
 301:src/console.c ****   temp.shift = shift;
 1531              		.loc 2 301 16 view .LVU374
 1532 0004 8DF80000 		strb	r0, [sp]
 302:src/console.c ****   temp.shift = shift;
 1533              		.loc 2 302 3 is_stmt 1 view .LVU375
 302:src/console.c ****   temp.shift = shift;
 1534              		.loc 2 302 14 is_stmt 0 view .LVU376
 1535 0008 0191     		str	r1, [sp, #4]
 1536              		.loc 2 303 3 is_stmt 1 view .LVU377
 1537 000a 13E90300 		ldmdb	r3, {r0, r1}
 1538              	.LVL125:
 304:src/console.c **** }
 1539              		.loc 2 304 1 is_stmt 0 view .LVU378
 1540 000e 02B0     		add	sp, sp, #8
 1541              		.cfi_def_cfa_offset 0
 1542              		@ sp needed
 303:src/console.c **** }
 1543              		.loc 2 303 3 view .LVU379
 1544 0010 FFF7FEBF 		b	process_keycode_with_shift
 1545              	.LVL126:
 303:src/console.c **** }
 1546              		.loc 2 303 3 view .LVU380
 1547              		.cfi_endproc
 1548              	.LFE21:
 1550              		.section	.text.do_multi,"ax",%progbits
 1551              		.align	1
 1552              		.p2align 2,,3
 1553              		.global	do_multi
 1554              		.syntax unified
 1555              		.thumb
 1556              		.thumb_func
 1557              		.fpu fpv4-sp-d16
 1559              	do_multi:
 1560              	.LVL127:
 1561              	.LFB22:
 305:src/console.c **** 
 306:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 1562              		.loc 2 306 42 is_stmt 1 view -0
 1563              		.cfi_startproc
 1564              		@ args = 0, pretend = 0, frame = 16
 1565              		@ frame_needed = 0, uses_anonymous_args = 0
 1566              		.loc 2 306 42 is_stmt 0 view .LVU382
 1567 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1568              		.cfi_def_cfa_offset 24
 1569              		.cfi_offset 4, -24
 1570              		.cfi_offset 5, -20
 1571              		.cfi_offset 6, -16
 1572              		.cfi_offset 7, -12
ARM GAS  /tmp/cc4hRDYn.s 			page 43


 1573              		.cfi_offset 8, -8
 1574              		.cfi_offset 14, -4
 1575 0004 84B0     		sub	sp, sp, #16
 1576              		.cfi_def_cfa_offset 40
 1577              	.LVL128:
 307:src/console.c ****   switch(r.shift) {
 1578              		.loc 2 307 3 is_stmt 1 view .LVU383
 306:src/console.c ****   switch(r.shift) {
 1579              		.loc 2 306 42 is_stmt 0 view .LVU384
 1580 0006 6C46     		mov	r4, sp
 1581 0008 531E     		subs	r3, r2, #1
 1582 000a 84E80600 		stm	r4, {r1, r2}
 1583              	.LVL129:
 306:src/console.c ****   switch(r.shift) {
 1584              		.loc 2 306 42 view .LVU385
 1585 000e 0546     		mov	r5, r0
 1586 0010 092B     		cmp	r3, #9
 1587 0012 7CD8     		bhi	.L125
 1588 0014 DFE803F0 		tbb	[pc, r3]
 1589              	.L127:
 1590 0018 18       		.byte	(.L135-.L127)/2
 1591 0019 36       		.byte	(.L134-.L127)/2
 1592 001a 40       		.byte	(.L133-.L127)/2
 1593 001b 4A       		.byte	(.L132-.L127)/2
 1594 001c 54       		.byte	(.L131-.L127)/2
 1595 001d 5E       		.byte	(.L130-.L127)/2
 1596 001e 68       		.byte	(.L129-.L127)/2
 1597 001f 72       		.byte	(.L128-.L127)/2
 1598 0020 7B       		.byte	(.L125-.L127)/2
 1599 0021 05       		.byte	(.L126-.L127)/2
 1600              		.p2align 1
 1601              	.L126:
 308:src/console.c ****   case LASTX: // Last x via RCL L
 309:src/console.c ****     do_now (K11, 0); // RCL
 310:src/console.c ****     do_now (K_RELEASE,0); // release
 311:src/console.c ****     do_now (K15,0); // TAN key
 312:src/console.c ****     r.key_34s = K_RELEASE;
 313:src/console.c ****     r.shift = 0; // set up for release;
 314:src/console.c ****     break;
 315:src/console.c ****   case ONSTO: // flash_backup()
 316:src/console.c ****     flash_backup(OP_SAVE);
 317:src/console.c ****     r = no_key;
 318:src/console.c ****     break;
 319:src/console.c ****   case ONRCL: // flash_restore()
 320:src/console.c ****     flash_restore(OP_LOAD);
 321:src/console.c ****     r = no_key;
 322:src/console.c ****     break;
 323:src/console.c ****   case WRLIB: // save library file
 324:src/console.c ****     save_lib_file(1);
 325:src/console.c ****     r = no_key;
 326:src/console.c ****     break;
 327:src/console.c ****   case LLIB: // load library file
 328:src/console.c ****     load_lib_file(1);
 329:src/console.c ****     r = no_key;
 330:src/console.c ****     break;
 331:src/console.c ****   case WRTST: // save state file
 332:src/console.c ****     save_ram_file(1);
ARM GAS  /tmp/cc4hRDYn.s 			page 44


 333:src/console.c ****     r = no_key;
 334:src/console.c ****     break;
 335:src/console.c ****   case LDST:
 336:src/console.c ****     load_ram_file(1);
 337:src/console.c ****     r = no_key;
 338:src/console.c ****     break;
 339:src/console.c ****   case LDPRG:
 340:src/console.c ****     load_prog_file();
 341:src/console.c ****     r = no_key;
 342:src/console.c ****     break;
 343:src/console.c ****   case SVPRG:
 344:src/console.c ****     save_prog_file();
 1602              		.loc 2 344 5 is_stmt 1 view .LVU386
 1603 0022 FFF7FEFF 		bl	save_prog_file
 1604              	.LVL130:
 345:src/console.c ****     r = no_key;
 1605              		.loc 2 345 5 view .LVU387
 1606              		.loc 2 345 7 is_stmt 0 view .LVU388
 1607 0026 3D4B     		ldr	r3, .L138
 1608 0028 93E80300 		ldm	r3, {r0, r1}
 1609 002c 84E80300 		stm	r4, {r0, r1}
 1610 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1611              	.LVL131:
 346:src/console.c ****     break;
 1612              		.loc 2 346 5 is_stmt 1 view .LVU389
 1613              	.L136:
 347:src/console.c ****   default:
 348:src/console.c ****     r = no_key;
 349:src/console.c ****   }
 350:src/console.c ****   return r;
 1614              		.loc 2 350 3 view .LVU390
 1615              		.loc 2 350 10 is_stmt 0 view .LVU391
 1616 0032 8DF80030 		strb	r3, [sp]
 1617 0036 0191     		str	r1, [sp, #4]
 1618 0038 94E80300 		ldm	r4, {r0, r1}
 1619              	.LVL132:
 1620              		.loc 2 350 10 view .LVU392
 1621 003c 85E80300 		stm	r5, {r0, r1}
 351:src/console.c **** }
 1622              		.loc 2 351 1 view .LVU393
 1623 0040 2846     		mov	r0, r5
 1624 0042 04B0     		add	sp, sp, #16
 1625              		.cfi_remember_state
 1626              		.cfi_def_cfa_offset 24
 1627              		@ sp needed
 1628 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1629              	.LVL133:
 1630              	.L135:
 1631              		.cfi_restore_state
 309:src/console.c ****     do_now (K_RELEASE,0); // release
 1632              		.loc 2 309 5 is_stmt 1 view .LVU394
 1633              	.LBB75:
 1634              	.LBI75:
 299:src/console.c ****   struct _ndmap temp;
 1635              		.loc 2 299 6 view .LVU395
 1636              	.LBB76:
 300:src/console.c ****   temp.key_34s = key;
ARM GAS  /tmp/cc4hRDYn.s 			page 45


 1637              		.loc 2 300 3 view .LVU396
 301:src/console.c ****   temp.shift = shift;
 1638              		.loc 2 301 3 view .LVU397
 301:src/console.c ****   temp.shift = shift;
 1639              		.loc 2 301 16 is_stmt 0 view .LVU398
 1640 0048 0723     		movs	r3, #7
 302:src/console.c ****   process_keycode_with_shift (temp);
 1641              		.loc 2 302 14 view .LVU399
 1642 004a 0026     		movs	r6, #0
 301:src/console.c ****   temp.shift = shift;
 1643              		.loc 2 301 16 view .LVU400
 1644 004c 8DF80830 		strb	r3, [sp, #8]
 302:src/console.c ****   process_keycode_with_shift (temp);
 1645              		.loc 2 302 3 is_stmt 1 view .LVU401
 303:src/console.c **** }
 1646              		.loc 2 303 3 is_stmt 0 view .LVU402
 1647 0050 0DF10808 		add	r8, sp, #8
 302:src/console.c ****   process_keycode_with_shift (temp);
 1648              		.loc 2 302 14 view .LVU403
 1649 0054 0396     		str	r6, [sp, #12]
 303:src/console.c **** }
 1650              		.loc 2 303 3 is_stmt 1 view .LVU404
 1651 0056 98E80300 		ldm	r8, {r0, r1}
 1652              	.LVL134:
 303:src/console.c **** }
 1653              		.loc 2 303 3 is_stmt 0 view .LVU405
 1654              	.LBE76:
 1655              	.LBE75:
 1656              	.LBB78:
 1657              	.LBB79:
 301:src/console.c ****   temp.shift = shift;
 1658              		.loc 2 301 16 view .LVU406
 1659 005a 6327     		movs	r7, #99
 1660              	.LBE79:
 1661              	.LBE78:
 1662              	.LBB81:
 1663              	.LBB77:
 303:src/console.c **** }
 1664              		.loc 2 303 3 view .LVU407
 1665 005c FFF7FEFF 		bl	process_keycode_with_shift
 1666              	.LVL135:
 303:src/console.c **** }
 1667              		.loc 2 303 3 view .LVU408
 1668              	.LBE77:
 1669              	.LBE81:
 310:src/console.c ****     do_now (K15,0); // TAN key
 1670              		.loc 2 310 5 is_stmt 1 view .LVU409
 1671              	.LBB82:
 1672              	.LBI78:
 299:src/console.c ****   struct _ndmap temp;
 1673              		.loc 2 299 6 view .LVU410
 1674              	.LBB80:
 300:src/console.c ****   temp.key_34s = key;
 1675              		.loc 2 300 3 view .LVU411
 301:src/console.c ****   temp.shift = shift;
 1676              		.loc 2 301 3 view .LVU412
 302:src/console.c ****   process_keycode_with_shift (temp);
ARM GAS  /tmp/cc4hRDYn.s 			page 46


 1677              		.loc 2 302 14 is_stmt 0 view .LVU413
 1678 0060 0396     		str	r6, [sp, #12]
 301:src/console.c ****   temp.shift = shift;
 1679              		.loc 2 301 16 view .LVU414
 1680 0062 8DF80870 		strb	r7, [sp, #8]
 302:src/console.c ****   process_keycode_with_shift (temp);
 1681              		.loc 2 302 3 is_stmt 1 view .LVU415
 303:src/console.c **** }
 1682              		.loc 2 303 3 view .LVU416
 1683 0066 98E80300 		ldm	r8, {r0, r1}
 1684 006a FFF7FEFF 		bl	process_keycode_with_shift
 1685              	.LVL136:
 303:src/console.c **** }
 1686              		.loc 2 303 3 is_stmt 0 view .LVU417
 1687              	.LBE80:
 1688              	.LBE82:
 311:src/console.c ****     r.key_34s = K_RELEASE;
 1689              		.loc 2 311 5 is_stmt 1 view .LVU418
 1690              	.LBB83:
 1691              	.LBI83:
 299:src/console.c ****   struct _ndmap temp;
 1692              		.loc 2 299 6 view .LVU419
 1693              	.LBB84:
 300:src/console.c ****   temp.key_34s = key;
 1694              		.loc 2 300 3 view .LVU420
 301:src/console.c ****   temp.shift = shift;
 1695              		.loc 2 301 3 view .LVU421
 301:src/console.c ****   temp.shift = shift;
 1696              		.loc 2 301 16 is_stmt 0 view .LVU422
 1697 006e 0B23     		movs	r3, #11
 1698 0070 8DF80830 		strb	r3, [sp, #8]
 302:src/console.c ****   process_keycode_with_shift (temp);
 1699              		.loc 2 302 3 is_stmt 1 view .LVU423
 303:src/console.c **** }
 1700              		.loc 2 303 3 view .LVU424
 302:src/console.c ****   process_keycode_with_shift (temp);
 1701              		.loc 2 302 14 is_stmt 0 view .LVU425
 1702 0074 0396     		str	r6, [sp, #12]
 303:src/console.c **** }
 1703              		.loc 2 303 3 view .LVU426
 1704 0076 98E80300 		ldm	r8, {r0, r1}
 1705 007a FFF7FEFF 		bl	process_keycode_with_shift
 1706              	.LVL137:
 303:src/console.c **** }
 1707              		.loc 2 303 3 view .LVU427
 1708              	.LBE84:
 1709              	.LBE83:
 312:src/console.c ****     r.shift = 0; // set up for release;
 1710              		.loc 2 312 5 is_stmt 1 view .LVU428
 313:src/console.c ****     break;
 1711              		.loc 2 313 5 view .LVU429
 314:src/console.c ****   case ONSTO: // flash_backup()
 1712              		.loc 2 314 5 view .LVU430
 313:src/console.c ****     break;
 1713              		.loc 2 313 13 is_stmt 0 view .LVU431
 1714 007e 3146     		mov	r1, r6
 312:src/console.c ****     r.shift = 0; // set up for release;
ARM GAS  /tmp/cc4hRDYn.s 			page 47


 1715              		.loc 2 312 15 view .LVU432
 1716 0080 3B46     		mov	r3, r7
 314:src/console.c ****   case ONSTO: // flash_backup()
 1717              		.loc 2 314 5 view .LVU433
 1718 0082 D6E7     		b	.L136
 1719              	.LVL138:
 1720              	.L134:
 316:src/console.c ****     r = no_key;
 1721              		.loc 2 316 5 is_stmt 1 view .LVU434
 1722 0084 AD20     		movs	r0, #173
 1723              	.LVL139:
 316:src/console.c ****     r = no_key;
 1724              		.loc 2 316 5 is_stmt 0 view .LVU435
 1725 0086 FFF7FEFF 		bl	flash_backup
 1726              	.LVL140:
 317:src/console.c ****     break;
 1727              		.loc 2 317 5 is_stmt 1 view .LVU436
 317:src/console.c ****     break;
 1728              		.loc 2 317 7 is_stmt 0 view .LVU437
 1729 008a 244B     		ldr	r3, .L138
 1730 008c 93E80300 		ldm	r3, {r0, r1}
 1731 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1732              	.LVL141:
 318:src/console.c ****   case ONRCL: // flash_restore()
 1733              		.loc 2 318 5 is_stmt 1 view .LVU438
 317:src/console.c ****     break;
 1734              		.loc 2 317 7 is_stmt 0 view .LVU439
 1735 0092 84E80300 		stm	r4, {r0, r1}
 318:src/console.c ****   case ONRCL: // flash_restore()
 1736              		.loc 2 318 5 view .LVU440
 1737 0096 CCE7     		b	.L136
 1738              	.LVL142:
 1739              	.L133:
 320:src/console.c ****     r = no_key;
 1740              		.loc 2 320 5 is_stmt 1 view .LVU441
 1741 0098 AE20     		movs	r0, #174
 1742              	.LVL143:
 320:src/console.c ****     r = no_key;
 1743              		.loc 2 320 5 is_stmt 0 view .LVU442
 1744 009a FFF7FEFF 		bl	flash_restore
 1745              	.LVL144:
 321:src/console.c ****     break;
 1746              		.loc 2 321 5 is_stmt 1 view .LVU443
 321:src/console.c ****     break;
 1747              		.loc 2 321 7 is_stmt 0 view .LVU444
 1748 009e 1F4B     		ldr	r3, .L138
 1749 00a0 93E80300 		ldm	r3, {r0, r1}
 1750 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1751              	.LVL145:
 322:src/console.c ****   case WRLIB: // save library file
 1752              		.loc 2 322 5 is_stmt 1 view .LVU445
 321:src/console.c ****     break;
 1753              		.loc 2 321 7 is_stmt 0 view .LVU446
 1754 00a6 84E80300 		stm	r4, {r0, r1}
 322:src/console.c ****   case WRLIB: // save library file
 1755              		.loc 2 322 5 view .LVU447
 1756 00aa C2E7     		b	.L136
ARM GAS  /tmp/cc4hRDYn.s 			page 48


 1757              	.LVL146:
 1758              	.L132:
 324:src/console.c ****     r = no_key;
 1759              		.loc 2 324 5 is_stmt 1 view .LVU448
 1760 00ac 0120     		movs	r0, #1
 1761              	.LVL147:
 324:src/console.c ****     r = no_key;
 1762              		.loc 2 324 5 is_stmt 0 view .LVU449
 1763 00ae FFF7FEFF 		bl	save_lib_file
 1764              	.LVL148:
 325:src/console.c ****     break;
 1765              		.loc 2 325 5 is_stmt 1 view .LVU450
 325:src/console.c ****     break;
 1766              		.loc 2 325 7 is_stmt 0 view .LVU451
 1767 00b2 1A4B     		ldr	r3, .L138
 1768 00b4 93E80300 		ldm	r3, {r0, r1}
 1769 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1770              	.LVL149:
 326:src/console.c ****   case LLIB: // load library file
 1771              		.loc 2 326 5 is_stmt 1 view .LVU452
 325:src/console.c ****     break;
 1772              		.loc 2 325 7 is_stmt 0 view .LVU453
 1773 00ba 84E80300 		stm	r4, {r0, r1}
 326:src/console.c ****   case LLIB: // load library file
 1774              		.loc 2 326 5 view .LVU454
 1775 00be B8E7     		b	.L136
 1776              	.LVL150:
 1777              	.L131:
 328:src/console.c ****     r = no_key;
 1778              		.loc 2 328 5 is_stmt 1 view .LVU455
 1779 00c0 0120     		movs	r0, #1
 1780              	.LVL151:
 328:src/console.c ****     r = no_key;
 1781              		.loc 2 328 5 is_stmt 0 view .LVU456
 1782 00c2 FFF7FEFF 		bl	load_lib_file
 1783              	.LVL152:
 329:src/console.c ****     break;
 1784              		.loc 2 329 5 is_stmt 1 view .LVU457
 329:src/console.c ****     break;
 1785              		.loc 2 329 7 is_stmt 0 view .LVU458
 1786 00c6 154B     		ldr	r3, .L138
 1787 00c8 93E80300 		ldm	r3, {r0, r1}
 1788 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1789              	.LVL153:
 330:src/console.c ****   case WRTST: // save state file
 1790              		.loc 2 330 5 is_stmt 1 view .LVU459
 329:src/console.c ****     break;
 1791              		.loc 2 329 7 is_stmt 0 view .LVU460
 1792 00ce 84E80300 		stm	r4, {r0, r1}
 330:src/console.c ****   case WRTST: // save state file
 1793              		.loc 2 330 5 view .LVU461
 1794 00d2 AEE7     		b	.L136
 1795              	.LVL154:
 1796              	.L130:
 332:src/console.c ****     r = no_key;
 1797              		.loc 2 332 5 is_stmt 1 view .LVU462
 1798 00d4 0120     		movs	r0, #1
ARM GAS  /tmp/cc4hRDYn.s 			page 49


 1799              	.LVL155:
 332:src/console.c ****     r = no_key;
 1800              		.loc 2 332 5 is_stmt 0 view .LVU463
 1801 00d6 FFF7FEFF 		bl	save_ram_file
 1802              	.LVL156:
 333:src/console.c ****     break;
 1803              		.loc 2 333 5 is_stmt 1 view .LVU464
 333:src/console.c ****     break;
 1804              		.loc 2 333 7 is_stmt 0 view .LVU465
 1805 00da 104B     		ldr	r3, .L138
 1806 00dc 93E80300 		ldm	r3, {r0, r1}
 1807 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1808              	.LVL157:
 334:src/console.c ****   case LDST:
 1809              		.loc 2 334 5 is_stmt 1 view .LVU466
 333:src/console.c ****     break;
 1810              		.loc 2 333 7 is_stmt 0 view .LVU467
 1811 00e2 84E80300 		stm	r4, {r0, r1}
 334:src/console.c ****   case LDST:
 1812              		.loc 2 334 5 view .LVU468
 1813 00e6 A4E7     		b	.L136
 1814              	.LVL158:
 1815              	.L129:
 336:src/console.c ****     r = no_key;
 1816              		.loc 2 336 5 is_stmt 1 view .LVU469
 1817 00e8 0120     		movs	r0, #1
 1818              	.LVL159:
 336:src/console.c ****     r = no_key;
 1819              		.loc 2 336 5 is_stmt 0 view .LVU470
 1820 00ea FFF7FEFF 		bl	load_ram_file
 1821              	.LVL160:
 337:src/console.c ****     break;
 1822              		.loc 2 337 5 is_stmt 1 view .LVU471
 337:src/console.c ****     break;
 1823              		.loc 2 337 7 is_stmt 0 view .LVU472
 1824 00ee 0B4B     		ldr	r3, .L138
 1825 00f0 93E80300 		ldm	r3, {r0, r1}
 1826 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1827              	.LVL161:
 338:src/console.c ****   case LDPRG:
 1828              		.loc 2 338 5 is_stmt 1 view .LVU473
 337:src/console.c ****     break;
 1829              		.loc 2 337 7 is_stmt 0 view .LVU474
 1830 00f6 84E80300 		stm	r4, {r0, r1}
 338:src/console.c ****   case LDPRG:
 1831              		.loc 2 338 5 view .LVU475
 1832 00fa 9AE7     		b	.L136
 1833              	.LVL162:
 1834              	.L128:
 340:src/console.c ****     r = no_key;
 1835              		.loc 2 340 5 is_stmt 1 view .LVU476
 1836 00fc FFF7FEFF 		bl	load_prog_file
 1837              	.LVL163:
 341:src/console.c ****     break;
 1838              		.loc 2 341 5 view .LVU477
 341:src/console.c ****     break;
 1839              		.loc 2 341 7 is_stmt 0 view .LVU478
ARM GAS  /tmp/cc4hRDYn.s 			page 50


 1840 0100 064B     		ldr	r3, .L138
 1841 0102 93E80300 		ldm	r3, {r0, r1}
 1842 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1843              	.LVL164:
 342:src/console.c ****   case SVPRG:
 1844              		.loc 2 342 5 is_stmt 1 view .LVU479
 341:src/console.c ****     break;
 1845              		.loc 2 341 7 is_stmt 0 view .LVU480
 1846 0108 84E80300 		stm	r4, {r0, r1}
 342:src/console.c ****   case SVPRG:
 1847              		.loc 2 342 5 view .LVU481
 1848 010c 91E7     		b	.L136
 1849              	.LVL165:
 1850              	.L125:
 348:src/console.c ****   }
 1851              		.loc 2 348 5 is_stmt 1 view .LVU482
 348:src/console.c ****   }
 1852              		.loc 2 348 7 is_stmt 0 view .LVU483
 1853 010e 034B     		ldr	r3, .L138
 1854 0110 93E80300 		ldm	r3, {r0, r1}
 1855              	.LVL166:
 348:src/console.c ****   }
 1856              		.loc 2 348 7 view .LVU484
 1857 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1858              	.LVL167:
 348:src/console.c ****   }
 1859              		.loc 2 348 7 view .LVU485
 1860 0116 84E80300 		stm	r4, {r0, r1}
 1861 011a 8AE7     		b	.L136
 1862              	.L139:
 1863              		.align	2
 1864              	.L138:
 1865 011c 00000000 		.word	.LANCHOR6
 1866              		.cfi_endproc
 1867              	.LFE22:
 1869              		.section	.text.program_main,"ax",%progbits
 1870              		.align	1
 1871              		.p2align 2,,3
 1872              		.global	program_main
 1873              		.syntax unified
 1874              		.thumb
 1875              		.thumb_func
 1876              		.fpu fpv4-sp-d16
 1878              	program_main:
 1879              	.LFB23:
 352:src/console.c **** 
 353:src/console.c **** void program_main(){
 1880              		.loc 2 353 20 is_stmt 1 view -0
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 24
 1883              		@ frame_needed = 0, uses_anonymous_args = 0
 354:src/console.c ****   int c;
 1884              		.loc 2 354 3 view .LVU487
 355:src/console.c ****   struct _ndmap remapped;
 1885              		.loc 2 355 3 view .LVU488
 356:src/console.c **** 
 357:src/console.c ****   init_mem();
ARM GAS  /tmp/cc4hRDYn.s 			page 51


 1886              		.loc 2 357 3 view .LVU489
 353:src/console.c ****   int c;
 1887              		.loc 2 353 20 is_stmt 0 view .LVU490
 1888 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1889              		.cfi_def_cfa_offset 36
 1890              		.cfi_offset 4, -36
 1891              		.cfi_offset 5, -32
 1892              		.cfi_offset 6, -28
 1893              		.cfi_offset 7, -24
 1894              		.cfi_offset 8, -20
 1895              		.cfi_offset 9, -16
 1896              		.cfi_offset 10, -12
 1897              		.cfi_offset 11, -8
 1898              		.cfi_offset 14, -4
 1899 0004 87B0     		sub	sp, sp, #28
 1900              		.cfi_def_cfa_offset 64
 1901              		.loc 2 357 3 view .LVU491
 1902 0006 FFF7FEFF 		bl	init_mem
 1903              	.LVL168:
 358:src/console.c ****   init_RegionTab();
 1904              		.loc 2 358 3 is_stmt 1 view .LVU492
 1905 000a FFF7FEFF 		bl	init_RegionTab
 1906              	.LVL169:
 359:src/console.c ****   init_34s();
 1907              		.loc 2 359 3 view .LVU493
 1908 000e FFF7FEFF 		bl	init_34s
 1909              	.LVL170:
 360:src/console.c ****   State2.flags = 1;
 1910              		.loc 2 360 3 view .LVU494
 1911              		.loc 2 360 16 is_stmt 0 view .LVU495
 1912 0012 B54A     		ldr	r2, .L225
 1913 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 1914 0016 43F00103 		orr	r3, r3, #1
 361:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 1915              		.loc 2 361 8 view .LVU496
 1916 001a 0020     		movs	r0, #0
 360:src/console.c ****   State2.flags = 1;
 1917              		.loc 2 360 16 view .LVU497
 1918 001c 1376     		strb	r3, [r2, #24]
 1919              		.loc 2 361 3 is_stmt 1 view .LVU498
 1920              		.loc 2 361 8 is_stmt 0 view .LVU499
 1921 001e FFF7FEFF 		bl	load_ram_file
 1922              	.LVL171:
 1923              		.loc 2 361 6 view .LVU500
 1924 0022 08B9     		cbnz	r0, .L141
 1925              		.loc 2 361 26 is_stmt 1 discriminator 1 view .LVU501
 1926              		.loc 2 361 34 is_stmt 0 discriminator 1 view .LVU502
 1927 0024 B14B     		ldr	r3, .L225+4
 1928 0026 1860     		str	r0, [r3]
 1929              	.L141:
 362:src/console.c ****   load_backup_file(0);
 1930              		.loc 2 362 3 is_stmt 1 view .LVU503
 1931 0028 0020     		movs	r0, #0
 363:src/console.c ****   load_lib_file(0);
 364:src/console.c ****   t20->newln = 0;
 1932              		.loc 2 364 3 is_stmt 0 view .LVU504
 1933 002a B14C     		ldr	r4, .L225+8
ARM GAS  /tmp/cc4hRDYn.s 			page 52


 1934              	.LBB99:
 1935              	.LBB100:
  22:src/menu.c    **** }
 1936              		.loc 1 22 3 view .LVU505
 1937 002c DFF828B3 		ldr	fp, .L225+112
 1938 0030 DFF82893 		ldr	r9, .L225+116
 1939              	.LBE100:
 1940              	.LBE99:
 365:src/console.c ****   t20->lnfill = 0;
 366:src/console.c ****   t20->fixed = 1;
 367:src/console.c ****   t20->xspc = -2;
 368:src/console.c ****   t20->bgfill = 0;
 369:src/console.c ****   
 370:src/console.c ****   display();
 371:src/console.c ****   display_current_menu();
 372:src/console.c ****   lcd_refresh();
 373:src/console.c ****   JustDisplayed = 0;
 374:src/console.c ****   /*
 375:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 376:src/console.c ****     Sleeps peacefully while waiting for a key.
 377:src/console.c ****     Handles (in principle!) turning off and on.
 378:src/console.c ****     =================
 379:src/console.c ****     Main event loop
 380:src/console.c ****     =================
 381:src/console.c **** 
 382:src/console.c ****     Status flags:
 383:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 384:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 385:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 386:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 387:src/console.c ****   */
 388:src/console.c ****   for(;;) {
 389:src/console.c **** 
 390:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 391:src/console.c ****       {
 392:src/console.c **** 	CLR_ST(STAT_RUNNING);
 393:src/console.c **** 	sys_sleep();
 394:src/console.c ****       }
 395:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 1941              		.loc 2 395 35 view .LVU506
 1942 0034 AF4E     		ldr	r6, .L225+12
 396:src/console.c ****     {
 397:src/console.c ****       CLR_ST(STAT_RUNNING);
 398:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 1943              		.loc 2 398 7 view .LVU507
 1944 0036 DFF82883 		ldr	r8, .L225+120
 362:src/console.c ****   load_lib_file(0);
 1945              		.loc 2 362 3 view .LVU508
 1946 003a FFF7FEFF 		bl	load_backup_file
 1947              	.LVL172:
 363:src/console.c ****   t20->newln = 0;
 1948              		.loc 2 363 3 is_stmt 1 view .LVU509
 1949 003e 0020     		movs	r0, #0
 1950 0040 FFF7FEFF 		bl	load_lib_file
 1951              	.LVL173:
 364:src/console.c ****   t20->lnfill = 0;
 1952              		.loc 2 364 3 view .LVU510
ARM GAS  /tmp/cc4hRDYn.s 			page 53


 1953 0044 236B     		ldr	r3, [r4, #48]
 365:src/console.c ****   t20->fixed = 1;
 1954              		.loc 2 365 3 view .LVU511
 366:src/console.c ****   t20->xspc = -2;
 1955              		.loc 2 366 3 view .LVU512
 366:src/console.c ****   t20->xspc = -2;
 1956              		.loc 2 366 14 is_stmt 0 view .LVU513
 1957 0046 0121     		movs	r1, #1
 367:src/console.c ****   t20->bgfill = 0;
 1958              		.loc 2 367 13 view .LVU514
 1959 0048 FE22     		movs	r2, #254
 368:src/console.c ****   
 1960              		.loc 2 368 15 view .LVU515
 1961 004a 0025     		movs	r5, #0
 366:src/console.c ****   t20->xspc = -2;
 1962              		.loc 2 366 14 view .LVU516
 1963 004c 1974     		strb	r1, [r3, #16]
 367:src/console.c ****   t20->bgfill = 0;
 1964              		.loc 2 367 3 is_stmt 1 view .LVU517
 367:src/console.c ****   t20->bgfill = 0;
 1965              		.loc 2 367 13 is_stmt 0 view .LVU518
 1966 004e 9A73     		strb	r2, [r3, #14]
 368:src/console.c ****   
 1967              		.loc 2 368 3 is_stmt 1 view .LVU519
 368:src/console.c ****   
 1968              		.loc 2 368 15 is_stmt 0 view .LVU520
 1969 0050 5D82     		strh	r5, [r3, #18]	@ movhi
 364:src/console.c ****   t20->lnfill = 0;
 1970              		.loc 2 364 14 view .LVU521
 1971 0052 1D75     		strb	r5, [r3, #20]
 370:src/console.c ****   display_current_menu();
 1972              		.loc 2 370 3 is_stmt 1 view .LVU522
 1973 0054 FFF7FEFF 		bl	display
 1974              	.LVL174:
 371:src/console.c ****   lcd_refresh();
 1975              		.loc 2 371 3 view .LVU523
 1976              	.LBB102:
 1977              	.LBI99:
  21:src/menu.c    ****   display_menu (current_menu);
 1978              		.loc 1 21 6 view .LVU524
 1979              	.LBB101:
  22:src/menu.c    **** }
 1980              		.loc 1 22 3 view .LVU525
 1981 0058 DBF80000 		ldr	r0, [fp]
 1982 005c FFF7FEFF 		bl	display_menu
 1983              	.LVL175:
 1984              	.LBE101:
 1985              	.LBE102:
 372:src/console.c ****   JustDisplayed = 0;
 1986              		.loc 2 372 3 view .LVU526
 1987 0060 A54B     		ldr	r3, .L225+16
 1988 0062 9847     		blx	r3
 1989              	.LVL176:
 373:src/console.c ****   /*
 1990              		.loc 2 373 3 view .LVU527
 373:src/console.c ****   /*
 1991              		.loc 2 373 17 is_stmt 0 view .LVU528
ARM GAS  /tmp/cc4hRDYn.s 			page 54


 1992 0064 A54B     		ldr	r3, .L225+20
 1993 0066 1D60     		str	r5, [r3]
 1994 0068 04AD     		add	r5, sp, #16
 1995              	.L142:
 388:src/console.c **** 
 1996              		.loc 2 388 3 is_stmt 1 view .LVU529
 390:src/console.c ****       {
 1997              		.loc 2 390 5 view .LVU530
 390:src/console.c ****       {
 1998              		.loc 2 390 10 is_stmt 0 view .LVU531
 1999 006a 2368     		ldr	r3, [r4]
 390:src/console.c ****       {
 2000              		.loc 2 390 8 view .LVU532
 2001 006c 9F05     		lsls	r7, r3, #22
 2002 006e 40F18180 		bpl	.L143
 2003              	.L214:
 390:src/console.c ****       {
 2004              		.loc 2 390 30 discriminator 1 view .LVU533
 2005 0072 2368     		ldr	r3, [r4]
 390:src/console.c ****       {
 2006              		.loc 2 390 27 discriminator 1 view .LVU534
 2007 0074 5807     		lsls	r0, r3, #29
 2008 0076 7DD5     		bpl	.L143
 392:src/console.c **** 	sys_sleep();
 2009              		.loc 2 392 2 is_stmt 1 view .LVU535
 2010 0078 2368     		ldr	r3, [r4]
 393:src/console.c ****       }
 2011              		.loc 2 393 2 is_stmt 0 view .LVU536
 2012 007a A14A     		ldr	r2, .L225+24
 392:src/console.c **** 	sys_sleep();
 2013              		.loc 2 392 2 view .LVU537
 2014 007c 23F00203 		bic	r3, r3, #2
 2015 0080 2360     		str	r3, [r4]
 393:src/console.c ****       }
 2016              		.loc 2 393 2 is_stmt 1 view .LVU538
 2017 0082 9047     		blx	r2
 2018              	.LVL177:
 2019              	.L144:
 399:src/console.c ****       sys_sleep();
 400:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 401:src/console.c **** 	key_push (K_HEARTBEAT);
 402:src/console.c **** 	if (Pause > 0) Pause--;
 403:src/console.c ****       }
 404:src/console.c ****       sys_timer_disable(0); // stop timer
 405:src/console.c ****     }
 406:src/console.c ****     
 407:src/console.c ****     // Wakeup in off state or going to sleep
 408:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 2020              		.loc 2 408 5 view .LVU539
 2021              		.loc 2 408 9 is_stmt 0 view .LVU540
 2022 0084 2368     		ldr	r3, [r4]
 2023              		.loc 2 408 8 view .LVU541
 2024 0086 9905     		lsls	r1, r3, #22
 2025 0088 00F19B80 		bmi	.L150
 2026              	.L215:
 2027              		.loc 2 408 29 discriminator 1 view .LVU542
 2028 008c 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cc4hRDYn.s 			page 55


 2029              		.loc 2 408 26 discriminator 1 view .LVU543
 2030 008e 5A07     		lsls	r2, r3, #29
 2031 0090 00F19780 		bmi	.L150
 409:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 410:src/console.c ****         // Going to off mode
 411:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 412:src/console.c ****         draw_power_off_image(1);
 413:src/console.c **** 
 414:src/console.c ****         LCD_power_off(0);
 415:src/console.c ****         SET_ST(STAT_SUSPENDED);
 416:src/console.c ****         SET_ST(STAT_OFF);
 417:src/console.c ****       }
 418:src/console.c ****       // Already in OFF -> just continue to sleep above
 419:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 420:src/console.c ****       // thus reaching the sleep()
 421:src/console.c ****     }
 422:src/console.c **** 
 423:src/console.c ****     // Well, we are woken-up
 424:src/console.c ****     SET_ST(STAT_RUNNING);
 2032              		.loc 2 424 5 is_stmt 1 view .LVU544
 2033 0094 2368     		ldr	r3, [r4]
 2034 0096 43F00203 		orr	r3, r3, #2
 2035 009a 2360     		str	r3, [r4]
 425:src/console.c **** 
 426:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 427:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 2036              		.loc 2 427 5 view .LVU545
 2037 009c 2368     		ldr	r3, [r4]
 2038 009e 23F00403 		bic	r3, r3, #4
 2039 00a2 2360     		str	r3, [r4]
 428:src/console.c **** 
 429:src/console.c ****     // Get up from OFF state
 430:src/console.c ****     if ( ST(STAT_OFF) ) {
 2040              		.loc 2 430 5 view .LVU546
 2041              		.loc 2 430 10 is_stmt 0 view .LVU547
 2042 00a4 2368     		ldr	r3, [r4]
 2043              		.loc 2 430 8 view .LVU548
 2044 00a6 DB06     		lsls	r3, r3, #27
 2045 00a8 0CD5     		bpl	.L155
 431:src/console.c ****       LCD_power_on();
 2046              		.loc 2 431 7 is_stmt 1 view .LVU549
 2047 00aa 964B     		ldr	r3, .L225+28
 2048 00ac 9847     		blx	r3
 2049              	.LVL178:
 432:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 2050              		.loc 2 432 7 view .LVU550
 2051 00ae 964B     		ldr	r3, .L225+32
 2052 00b0 9847     		blx	r3
 2053              	.LVL179:
 433:src/console.c **** 
 434:src/console.c ****       CLR_ST(STAT_OFF);
 2054              		.loc 2 434 7 view .LVU551
 2055 00b2 2368     		ldr	r3, [r4]
 435:src/console.c **** 
 436:src/console.c ****       if ( !lcd_get_buf_cleared() )
 2056              		.loc 2 436 13 is_stmt 0 view .LVU552
 2057 00b4 954A     		ldr	r2, .L225+36
ARM GAS  /tmp/cc4hRDYn.s 			page 56


 434:src/console.c **** 
 2058              		.loc 2 434 7 view .LVU553
 2059 00b6 23F01003 		bic	r3, r3, #16
 2060 00ba 2360     		str	r3, [r4]
 2061              		.loc 2 436 7 is_stmt 1 view .LVU554
 2062              		.loc 2 436 13 is_stmt 0 view .LVU555
 2063 00bc 9047     		blx	r2
 2064              	.LVL180:
 2065              		.loc 2 436 10 view .LVU556
 2066 00be 08B9     		cbnz	r0, .L155
 437:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 2067              		.loc 2 437 9 is_stmt 1 view .LVU557
 2068 00c0 934B     		ldr	r3, .L225+40
 2069 00c2 9847     		blx	r3
 2070              	.LVL181:
 2071              	.L155:
 438:src/console.c ****     }
 439:src/console.c **** 
 440:src/console.c ****     // Key is ready -> clear auto off timer
 441:src/console.c ****     //    if ( !key_empty() )
 442:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 443:src/console.c ****     // Fetch the key
 444:src/console.c ****     //  < 0 -> No key event
 445:src/console.c ****     //  > 0 -> Key pressed
 446:src/console.c ****     // == 0 -> Key released
 447:src/console.c ****     c = key_pop();
 2072              		.loc 2 447 5 view .LVU558
 2073              		.loc 2 447 9 is_stmt 0 view .LVU559
 2074 00c4 934B     		ldr	r3, .L225+44
 2075 00c6 9847     		blx	r3
 2076              	.LVL182:
 448:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2077              		.loc 2 448 8 view .LVU560
 2078 00c8 6228     		cmp	r0, #98
 447:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2079              		.loc 2 447 9 view .LVU561
 2080 00ca 8246     		mov	r10, r0
 2081              	.LVL183:
 2082              		.loc 2 448 5 is_stmt 1 view .LVU562
 2083              		.loc 2 448 8 is_stmt 0 view .LVU563
 2084 00cc 00F09981 		beq	.L157
 2085              		.loc 2 448 29 discriminator 1 view .LVU564
 2086 00d0 0028     		cmp	r0, #0
 2087 00d2 40F39381 		ble	.L158
 449:src/console.c ****       reset_auto_off();
 2088              		.loc 2 449 7 is_stmt 1 view .LVU565
 2089 00d6 904B     		ldr	r3, .L225+48
 2090 00d8 9847     		blx	r3
 2091              	.LVL184:
 450:src/console.c ****       start_key_timer();
 2092              		.loc 2 450 7 view .LVU566
 2093              	.LBB103:
 2094              	.LBI103:
 241:src/console.c ****     start_ticks = get_rtc_ticks();
 2095              		.loc 2 241 6 view .LVU567
 2096              	.LBB104:
 242:src/console.c **** }
ARM GAS  /tmp/cc4hRDYn.s 			page 57


 2097              		.loc 2 242 5 view .LVU568
 242:src/console.c **** }
 2098              		.loc 2 242 19 is_stmt 0 view .LVU569
 2099 00da 904B     		ldr	r3, .L225+52
 2100 00dc 9847     		blx	r3
 2101              	.LVL185:
 242:src/console.c **** }
 2102              		.loc 2 242 17 view .LVU570
 2103 00de 904B     		ldr	r3, .L225+56
 2104              	.LBE104:
 2105              	.LBE103:
 2106              	.LBB106:
 2107              	.LBB107:
  68:src/console.c **** 
 2108              		.loc 2 68 6 view .LVU571
 2109 00e0 BAF1630F 		cmp	r10, #99
 2110              	.LBE107:
 2111              	.LBE106:
 2112              	.LBB119:
 2113              	.LBB105:
 242:src/console.c **** }
 2114              		.loc 2 242 17 view .LVU572
 2115 00e4 1860     		str	r0, [r3]
 2116              	.LBE105:
 2117              	.LBE119:
 451:src/console.c ****     }
 452:src/console.c ****     if (c >= 0) {
 2118              		.loc 2 452 5 is_stmt 1 view .LVU573
 453:src/console.c ****       remapped = remap(c);
 2119              		.loc 2 453 7 view .LVU574
 2120              	.LVL186:
 2121              	.LBB120:
 2122              	.LBI106:
  60:src/console.c **** 
 2123              		.loc 2 60 22 view .LVU575
 2124              	.LBB108:
  62:src/console.c **** 
 2125              		.loc 2 62 3 view .LVU576
 2126              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 2127              		.loc 3 1 1 view .LVU577
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
ARM GAS  /tmp/cc4hRDYn.s 			page 58


  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 2128              		.loc 3 59 3 view .LVU578
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
ARM GAS  /tmp/cc4hRDYn.s 			page 59


  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K52, 2}, // Integral
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_NOP, 0}, // no function
  96:src/keytran.c ****     {K_NOP, 0}, // no function
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 2129              		.loc 3 117 3 view .LVU579
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K20, 2}, // Fill
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
ARM GAS  /tmp/cc4hRDYn.s 			page 60


 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K_NOP, 0}, // no function
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     {K53, 3}, // X.FCN
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 0}, // Exit
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K_NOP, 0}, // no function
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 2130              		.loc 3 175 1 view .LVU580
  66:src/console.c **** 
 2131              		.loc 2 66 3 view .LVU581
  68:src/console.c **** 
 2132              		.loc 2 68 3 view .LVU582
  68:src/console.c **** 
 2133              		.loc 2 68 6 is_stmt 0 view .LVU583
 2134 00e6 00F0CE81 		beq	.L209
  70:src/console.c ****     // Start click 
 2135              		.loc 2 70 3 is_stmt 1 view .LVU584
  70:src/console.c ****     // Start click 
ARM GAS  /tmp/cc4hRDYn.s 			page 61


 2136              		.loc 2 70 6 is_stmt 0 view .LVU585
 2137 00ea BAF12C0F 		cmp	r10, #44
 2138 00ee 00F09081 		beq	.L210
 2139              	.LVL187:
 2140              	.L161:
  84:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2141              		.loc 2 84 3 is_stmt 1 view .LVU586
  84:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2142              		.loc 2 84 8 is_stmt 0 view .LVU587
 2143 00f2 FFF7FEFF 		bl	get_alpha_state
 2144              	.LVL188:
  84:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2145              		.loc 2 84 6 view .LVU588
 2146 00f6 0028     		cmp	r0, #0
 2147 00f8 7AD0     		beq	.L163
  85:src/console.c ****       switch (cur_shift()) { 
 2148              		.loc 2 85 5 is_stmt 1 view .LVU589
  85:src/console.c ****       switch (cur_shift()) { 
 2149              		.loc 2 85 8 is_stmt 0 view .LVU590
 2150 00fa BAF11C0F 		cmp	r10, #28
 2151 00fe 00F0D781 		beq	.L211
 102:src/console.c ****   }
 2152              		.loc 2 102 5 is_stmt 1 view .LVU591
 102:src/console.c ****   }
 2153              		.loc 2 102 26 is_stmt 0 view .LVU592
 2154 0102 884A     		ldr	r2, .L225+60
 2155              	.L208:
 131:src/console.c ****     break;
 2156              		.loc 2 131 26 view .LVU593
 2157 0104 02EBCA03 		add	r3, r2, r10, lsl #3
 2158 0108 93E80300 		ldm	r3, {r0, r1}
 2159 010c 12F83A30 		ldrb	r3, [r2, r10, lsl #3]	@ zero_extendqisi2
 2160              	.LVL189:
 131:src/console.c ****     break;
 2161              		.loc 2 131 26 view .LVU594
 2162 0110 85E80300 		stm	r5, {r0, r1}
 2163 0114 8A46     		mov	r10, r1
 2164              	.LVL190:
 2165              	.L160:
 131:src/console.c ****     break;
 2166              		.loc 2 131 26 view .LVU595
 2167              	.LBE108:
 2168              	.LBE120:
 454:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2169              		.loc 2 454 7 is_stmt 1 view .LVU596
 2170              		.loc 2 454 10 is_stmt 0 view .LVU597
 2171 0116 2F2B     		cmp	r3, #47
 2172 0118 00F09480 		beq	.L212
 2173              	.LVL191:
 2174              	.L185:
 455:src/console.c **** 	set_menu ( remapped.shift );
 456:src/console.c **** 	display_current_menu ();
 457:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 458:src/console.c **** 	case SHIFT_F:
 459:src/console.c **** 	  remapped = f_shift; // F -> N
 460:src/console.c **** 	  break;
 461:src/console.c **** 	case SHIFT_G:
ARM GAS  /tmp/cc4hRDYn.s 			page 62


 462:src/console.c **** 	  remapped = g_shift; // G -> N
 463:src/console.c **** 	  break;
 464:src/console.c **** 	case SHIFT_H:
 465:src/console.c **** 	  remapped = h_shift; // H -> N
 466:src/console.c **** 	default:
 467:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 468:src/console.c **** 	}
 469:src/console.c ****       }
 470:src/console.c ****       if (remapped.key_34s == K_SYS) {
 2175              		.loc 2 470 7 is_stmt 1 view .LVU598
 2176              		.loc 2 470 10 is_stmt 0 view .LVU599
 2177 011c 302B     		cmp	r3, #48
 2178 011e 1AD1     		bne	.L191
 471:src/console.c **** 	SET_ST(STAT_MENU);
 2179              		.loc 2 471 2 is_stmt 1 view .LVU600
 2180 0120 2368     		ldr	r3, [r4]
 2181              	.LVL192:
 472:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 2182              		.loc 2 472 2 is_stmt 0 view .LVU601
 2183 0122 DFF840A2 		ldr	r10, .L225+124
 2184              	.LVL193:
 2185              		.loc 2 472 2 view .LVU602
 2186 0126 8048     		ldr	r0, .L225+64
 2187 0128 0022     		movs	r2, #0
 471:src/console.c **** 	SET_ST(STAT_MENU);
 2188              		.loc 2 471 2 view .LVU603
 2189 012a 43F04003 		orr	r3, r3, #64
 2190              		.loc 2 472 2 view .LVU604
 2191 012e 1146     		mov	r1, r2
 471:src/console.c **** 	SET_ST(STAT_MENU);
 2192              		.loc 2 471 2 view .LVU605
 2193 0130 2360     		str	r3, [r4]
 2194              		.loc 2 472 2 is_stmt 1 view .LVU606
 2195 0132 D047     		blx	r10
 2196              	.LVL194:
 473:src/console.c **** 	CLR_ST(STAT_MENU);
 2197              		.loc 2 473 2 view .LVU607
 2198 0134 2368     		ldr	r3, [r4]
 2199 0136 23F04003 		bic	r3, r3, #64
 2200 013a 2360     		str	r3, [r4]
 474:src/console.c **** 	remapped =  no_key;
 2201              		.loc 2 474 2 view .LVU608
 2202              		.loc 2 474 11 is_stmt 0 view .LVU609
 2203 013c 7B4B     		ldr	r3, .L225+68
 2204 013e 93E80300 		ldm	r3, {r0, r1}
 2205 0142 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2206 0144 0193     		str	r3, [sp, #4]
 2207              	.LVL195:
 2208              		.loc 2 474 11 view .LVU610
 2209 0146 85E80300 		stm	r5, {r0, r1}
 2210              	.LBB121:
 2211              	.LBB122:
  22:src/menu.c    **** }
 2212              		.loc 1 22 3 view .LVU611
 2213 014a DBF80000 		ldr	r0, [fp]
 2214              	.LBE122:
 2215              	.LBE121:
ARM GAS  /tmp/cc4hRDYn.s 			page 63


 2216              		.loc 2 474 11 view .LVU612
 2217 014e 8A46     		mov	r10, r1
 2218              	.LVL196:
 475:src/console.c **** 	display_current_menu();
 2219              		.loc 2 475 2 is_stmt 1 view .LVU613
 2220              	.LBB124:
 2221              	.LBI121:
  21:src/menu.c    ****   display_menu (current_menu);
 2222              		.loc 1 21 6 view .LVU614
 2223              	.LBB123:
  22:src/menu.c    **** }
 2224              		.loc 1 22 3 view .LVU615
 2225 0150 FFF7FEFF 		bl	display_menu
 2226              	.LVL197:
  22:src/menu.c    **** }
 2227              		.loc 1 22 3 is_stmt 0 view .LVU616
 2228 0154 019B     		ldr	r3, [sp, #4]
 2229              	.LVL198:
 2230              	.L191:
  22:src/menu.c    **** }
 2231              		.loc 1 22 3 view .LVU617
 2232              	.LBE123:
 2233              	.LBE124:
 476:src/console.c ****       }
 477:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 2234              		.loc 2 477 7 is_stmt 1 view .LVU618
 2235              		.loc 2 477 10 is_stmt 0 view .LVU619
 2236 0156 312B     		cmp	r3, #49
 2237 0158 00F07C81 		beq	.L213
 2238              	.LVL199:
 2239              	.L165:
 478:src/console.c **** 	remapped = do_multi (remapped);
 479:src/console.c **** 	display_current_menu();
 480:src/console.c ****       }
 481:src/console.c ****       process_keycode_with_shift(remapped);
 2240              		.loc 2 481 7 is_stmt 1 view .LVU620
 2241              		.loc 2 481 7 is_stmt 0 view .LVU621
 2242 015c 8DF81030 		strb	r3, [sp, #16]
 2243 0160 CDF814A0 		str	r10, [sp, #20]
 2244 0164 95E80300 		ldm	r5, {r0, r1}
 2245 0168 FFF7FEFF 		bl	process_keycode_with_shift
 2246              	.LVL200:
 388:src/console.c **** 
 2247              		.loc 2 388 3 is_stmt 1 view .LVU622
 390:src/console.c ****       {
 2248              		.loc 2 390 5 view .LVU623
 390:src/console.c ****       {
 2249              		.loc 2 390 10 is_stmt 0 view .LVU624
 2250 016c 2368     		ldr	r3, [r4]
 390:src/console.c ****       {
 2251              		.loc 2 390 8 view .LVU625
 2252 016e 9F05     		lsls	r7, r3, #22
 2253 0170 3FF57FAF 		bmi	.L214
 2254              	.LVL201:
 2255              	.L143:
 395:src/console.c ****     {
 2256              		.loc 2 395 10 is_stmt 1 view .LVU626
ARM GAS  /tmp/cc4hRDYn.s 			page 64


 395:src/console.c ****     {
 2257              		.loc 2 395 15 is_stmt 0 view .LVU627
 2258 0174 2068     		ldr	r0, [r4]
 395:src/console.c ****     {
 2259              		.loc 2 395 13 view .LVU628
 2260 0176 10F4007A 		ands	r10, r0, #512
 2261 017a 83D1     		bne	.L144
 395:src/console.c ****     {
 2262              		.loc 2 395 35 discriminator 1 view .LVU629
 2263 017c B047     		blx	r6
 2264              	.LVL202:
 395:src/console.c ****     {
 2265              		.loc 2 395 32 discriminator 1 view .LVU630
 2266 017e 0028     		cmp	r0, #0
 2267 0180 80D0     		beq	.L144
 397:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2268              		.loc 2 397 7 is_stmt 1 view .LVU631
 2269 0182 2368     		ldr	r3, [r4]
 2270 0184 23F00203 		bic	r3, r3, #2
 398:src/console.c ****       sys_sleep();
 2271              		.loc 2 398 7 is_stmt 0 view .LVU632
 2272 0188 5046     		mov	r0, r10
 2273 018a 6421     		movs	r1, #100
 397:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2274              		.loc 2 397 7 view .LVU633
 2275 018c 2360     		str	r3, [r4]
 398:src/console.c ****       sys_sleep();
 2276              		.loc 2 398 7 is_stmt 1 view .LVU634
 2277 018e C047     		blx	r8
 2278              	.LVL203:
 399:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 2279              		.loc 2 399 7 view .LVU635
 2280 0190 5B4B     		ldr	r3, .L225+24
 2281 0192 9847     		blx	r3
 2282              	.LVL204:
 400:src/console.c **** 	key_push (K_HEARTBEAT);
 2283              		.loc 2 400 7 view .LVU636
 400:src/console.c **** 	key_push (K_HEARTBEAT);
 2284              		.loc 2 400 11 is_stmt 0 view .LVU637
 2285 0194 664B     		ldr	r3, .L225+72
 2286 0196 5046     		mov	r0, r10
 2287 0198 9847     		blx	r3
 2288              	.LVL205:
 400:src/console.c **** 	key_push (K_HEARTBEAT);
 2289              		.loc 2 400 10 view .LVU638
 2290 019a 58B1     		cbz	r0, .L148
 401:src/console.c **** 	if (Pause > 0) Pause--;
 2291              		.loc 2 401 2 is_stmt 1 view .LVU639
 2292 019c 654B     		ldr	r3, .L225+76
 2293 019e 6220     		movs	r0, #98
 2294 01a0 9847     		blx	r3
 2295              	.LVL206:
 402:src/console.c ****       }
 2296              		.loc 2 402 2 view .LVU640
 402:src/console.c ****       }
 2297              		.loc 2 402 12 is_stmt 0 view .LVU641
 2298 01a2 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
ARM GAS  /tmp/cc4hRDYn.s 			page 65


 402:src/console.c ****       }
 2299              		.loc 2 402 5 view .LVU642
 2300 01a6 2BB1     		cbz	r3, .L148
 402:src/console.c ****       }
 2301              		.loc 2 402 17 is_stmt 1 discriminator 1 view .LVU643
 402:src/console.c ****       }
 2302              		.loc 2 402 22 is_stmt 0 discriminator 1 view .LVU644
 2303 01a8 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 2304 01ac 013B     		subs	r3, r3, #1
 2305 01ae DBB2     		uxtb	r3, r3
 2306 01b0 89F80030 		strb	r3, [r9]
 2307              	.L148:
 404:src/console.c ****     }
 2308              		.loc 2 404 7 is_stmt 1 view .LVU645
 2309 01b4 604B     		ldr	r3, .L225+80
 2310 01b6 0020     		movs	r0, #0
 2311 01b8 9847     		blx	r3
 2312              	.LVL207:
 408:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2313              		.loc 2 408 5 view .LVU646
 408:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2314              		.loc 2 408 9 is_stmt 0 view .LVU647
 2315 01ba 2368     		ldr	r3, [r4]
 408:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2316              		.loc 2 408 8 view .LVU648
 2317 01bc 9905     		lsls	r1, r3, #22
 2318 01be 7FF565AF 		bpl	.L215
 2319              	.L150:
 409:src/console.c ****         // Going to off mode
 2320              		.loc 2 409 7 is_stmt 1 view .LVU649
 409:src/console.c ****         // Going to off mode
 2321              		.loc 2 409 12 is_stmt 0 view .LVU650
 2322 01c2 2068     		ldr	r0, [r4]
 409:src/console.c ****         // Going to off mode
 2323              		.loc 2 409 10 view .LVU651
 2324 01c4 10F0040A 		ands	r10, r0, #4
 2325 01c8 7FF44FAF 		bne	.L142
 411:src/console.c ****         draw_power_off_image(1);
 2326              		.loc 2 411 9 is_stmt 1 view .LVU652
 2327 01cc 5B4B     		ldr	r3, .L225+84
 2328 01ce 5046     		mov	r0, r10
 2329 01d0 9847     		blx	r3
 2330              	.LVL208:
 412:src/console.c **** 
 2331              		.loc 2 412 9 view .LVU653
 2332 01d2 5B4B     		ldr	r3, .L225+88
 2333 01d4 0120     		movs	r0, #1
 2334 01d6 9847     		blx	r3
 2335              	.LVL209:
 414:src/console.c ****         SET_ST(STAT_SUSPENDED);
 2336              		.loc 2 414 9 view .LVU654
 2337 01d8 5A4B     		ldr	r3, .L225+92
 2338 01da 5046     		mov	r0, r10
 2339 01dc 9847     		blx	r3
 2340              	.LVL210:
 415:src/console.c ****         SET_ST(STAT_OFF);
 2341              		.loc 2 415 9 view .LVU655
ARM GAS  /tmp/cc4hRDYn.s 			page 66


 2342 01de 2368     		ldr	r3, [r4]
 2343 01e0 43F00403 		orr	r3, r3, #4
 2344 01e4 2360     		str	r3, [r4]
 416:src/console.c ****       }
 2345              		.loc 2 416 9 view .LVU656
 2346 01e6 2368     		ldr	r3, [r4]
 2347 01e8 43F01003 		orr	r3, r3, #16
 2348 01ec 2360     		str	r3, [r4]
 2349 01ee 3CE7     		b	.L142
 2350              	.LVL211:
 2351              	.L163:
 2352              	.LBB125:
 2353              	.LBB109:
 105:src/console.c ****   case KEY_F1:
 2354              		.loc 2 105 3 view .LVU657
 2355 01f0 AAF12603 		sub	r3, r10, #38
 2356 01f4 052B     		cmp	r3, #5
 2357 01f6 00F27381 		bhi	.L168
 2358 01fa DFE813F0 		tbh	[pc, r3, lsl #1]
 2359              	.L170:
 2360 01fe EA00     		.2byte	(.L175-.L170)/2
 2361 0200 D400     		.2byte	(.L174-.L170)/2
 2362 0202 BA00     		.2byte	(.L173-.L170)/2
 2363 0204 5F00     		.2byte	(.L172-.L170)/2
 2364 0206 4500     		.2byte	(.L171-.L170)/2
 2365 0208 0B00     		.2byte	(.L169-.L170)/2
 2366              		.p2align 1
 2367              	.L180:
 120:src/console.c ****   case KEY_F6:
 2368              		.loc 2 120 5 view .LVU658
 120:src/console.c ****   case KEY_F6:
 2369              		.loc 2 120 9 is_stmt 0 view .LVU659
 2370 020a FFF7FEFF 		bl	cur_shift
 2371              	.LVL212:
 120:src/console.c ****   case KEY_F6:
 2372              		.loc 2 120 8 view .LVU660
 2373 020e 0128     		cmp	r0, #1
 2374 0210 00F09181 		beq	.L216
 2375              	.L169:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2376              		.loc 2 122 5 is_stmt 1 view .LVU661
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2377              		.loc 2 122 9 is_stmt 0 view .LVU662
 2378 0214 FFF7FEFF 		bl	cur_shift
 2379              	.LVL213:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2380              		.loc 2 122 8 view .LVU663
 2381 0218 0028     		cmp	r0, #0
 2382 021a 40F05D81 		bne	.L181
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2383              		.loc 2 122 33 is_stmt 1 view .LVU664
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2384              		.loc 2 122 67 is_stmt 0 view .LVU665
 2385 021e DBF80030 		ldr	r3, [fp]
 2386 0222 494F     		ldr	r7, .L225+96
 2387 0224 D022     		movs	r2, #208
 2388 0226 02FB03F2 		mul	r2, r2, r3
ARM GAS  /tmp/cc4hRDYn.s 			page 67


 2389 022a BB18     		adds	r3, r7, r2
 2390 022c D3E92C01 		ldrd	r0, r1, [r3, #176]
 2391 0230 B032     		adds	r2, r2, #176
 2392 0232 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2393              	.LVL214:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2394              		.loc 2 122 67 view .LVU666
 2395 0234 85E80300 		stm	r5, {r0, r1}
 2396 0238 3A44     		add	r2, r2, r7
 2397              	.LBE109:
 2398              	.LBE125:
 454:src/console.c **** 	set_menu ( remapped.shift );
 2399              		.loc 2 454 10 view .LVU667
 2400 023a 2F2B     		cmp	r3, #47
 2401              	.LBB126:
 2402              	.LBB110:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2403              		.loc 2 122 67 view .LVU668
 2404 023c D2F804A0 		ldr	r10, [r2, #4]
 2405              	.LVL215:
 122:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2406              		.loc 2 122 67 view .LVU669
 2407              	.LBE110:
 2408              	.LBE126:
 454:src/console.c **** 	set_menu ( remapped.shift );
 2409              		.loc 2 454 7 is_stmt 1 view .LVU670
 454:src/console.c **** 	set_menu ( remapped.shift );
 2410              		.loc 2 454 10 is_stmt 0 view .LVU671
 2411 0240 7FF46CAF 		bne	.L185
 2412              	.L212:
 455:src/console.c **** 	display_current_menu ();
 2413              		.loc 2 455 2 is_stmt 1 view .LVU672
 2414              	.LVL216:
 2415              	.LBB127:
 2416              	.LBI127:
   3:src/menu.c    ****   if (new_menu == current_menu) {
 2417              		.loc 1 3 6 view .LVU673
 2418              	.LBB128:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2419              		.loc 1 4 3 view .LVU674
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2420              		.loc 1 4 7 is_stmt 0 view .LVU675
 2421 0244 DBF80030 		ldr	r3, [fp]
 2422              	.LVL217:
   5:src/menu.c    ****     current_menu = 0;
 2423              		.loc 1 5 3 is_stmt 1 view .LVU676
   5:src/menu.c    ****     current_menu = 0;
 2424              		.loc 1 5 6 is_stmt 0 view .LVU677
 2425 0248 5345     		cmp	r3, r10
 2426 024a 00F02581 		beq	.L186
   8:src/menu.c    ****     current_menu = last_menu;
 2427              		.loc 1 8 8 is_stmt 1 view .LVU678
   8:src/menu.c    ****     current_menu = last_menu;
 2428              		.loc 1 8 11 is_stmt 0 view .LVU679
 2429 024e BAF1FF3F 		cmp	r10, #-1
 2430 0252 00F02781 		beq	.L217
 2431              	.LVL218:
ARM GAS  /tmp/cc4hRDYn.s 			page 68


 2432              	.L187:
  12:src/menu.c    ****   }
 2433              		.loc 1 12 5 is_stmt 1 view .LVU680
  12:src/menu.c    ****   }
 2434              		.loc 1 12 18 is_stmt 0 view .LVU681
 2435 0256 CBF800A0 		str	r10, [fp]
 2436              	.LVL219:
 2437              	.L189:
  14:src/menu.c    **** }
 2438              		.loc 1 14 3 is_stmt 1 view .LVU682
  14:src/menu.c    **** }
 2439              		.loc 1 14 13 is_stmt 0 view .LVU683
 2440 025a 3C4A     		ldr	r2, .L225+100
 2441              	.LBE128:
 2442              	.LBE127:
 2443              	.LBB132:
 2444              	.LBB133:
  22:src/menu.c    **** }
 2445              		.loc 1 22 3 view .LVU684
 2446 025c 5046     		mov	r0, r10
 2447              	.LBE133:
 2448              	.LBE132:
 2449              	.LBB135:
 2450              	.LBB129:
  14:src/menu.c    **** }
 2451              		.loc 1 14 13 view .LVU685
 2452 025e 1360     		str	r3, [r2]
 2453              	.LBE129:
 2454              	.LBE135:
 456:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 2455              		.loc 2 456 2 is_stmt 1 view .LVU686
 2456              	.LBB136:
 2457              	.LBI132:
  21:src/menu.c    ****   display_menu (current_menu);
 2458              		.loc 1 21 6 view .LVU687
 2459              	.LBB134:
  22:src/menu.c    **** }
 2460              		.loc 1 22 3 view .LVU688
 2461 0260 FFF7FEFF 		bl	display_menu
 2462              	.LVL220:
 2463              	.LBE134:
 2464              	.LBE136:
 457:src/console.c **** 	case SHIFT_F:
 2465              		.loc 2 457 2 view .LVU689
 457:src/console.c **** 	case SHIFT_F:
 2466              		.loc 2 457 10 is_stmt 0 view .LVU690
 2467 0264 FFF7FEFF 		bl	cur_shift
 2468              	.LVL221:
 457:src/console.c **** 	case SHIFT_F:
 2469              		.loc 2 457 2 view .LVU691
 2470 0268 0228     		cmp	r0, #2
 459:src/console.c **** 	  break;
 2471              		.loc 2 459 4 is_stmt 1 view .LVU692
 459:src/console.c **** 	  break;
 2472              		.loc 2 459 13 is_stmt 0 view .LVU693
 2473 026a 14BF     		ite	ne
 2474 026c 384B     		ldrne	r3, .L225+104
ARM GAS  /tmp/cc4hRDYn.s 			page 69


 462:src/console.c **** 	  break;
 2475              		.loc 2 462 4 is_stmt 1 view .LVU694
 462:src/console.c **** 	  break;
 2476              		.loc 2 462 13 is_stmt 0 view .LVU695
 2477 026e 394B     		ldreq	r3, .L225+108
 2478 0270 93E80300 		ldm	r3, {r0, r1}
 2479 0274 85E80300 		stm	r5, {r0, r1}
 2480 0278 8A46     		mov	r10, r1
 2481 027a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2482              	.LVL222:
 463:src/console.c **** 	case SHIFT_H:
 2483              		.loc 2 463 4 is_stmt 1 view .LVU696
 2484 027c 4EE7     		b	.L185
 2485              	.LVL223:
 2486              	.L179:
 2487              	.LBB137:
 2488              	.LBB111:
 117:src/console.c ****   case KEY_F5:
 2489              		.loc 2 117 5 view .LVU697
 117:src/console.c ****   case KEY_F5:
 2490              		.loc 2 117 9 is_stmt 0 view .LVU698
 2491 027e FFF7FEFF 		bl	cur_shift
 2492              	.LVL224:
 117:src/console.c ****   case KEY_F5:
 2493              		.loc 2 117 8 view .LVU699
 2494 0282 0128     		cmp	r0, #1
 2495 0284 00F06881 		beq	.L218
 2496              	.L171:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2497              		.loc 2 119 5 is_stmt 1 view .LVU700
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2498              		.loc 2 119 9 is_stmt 0 view .LVU701
 2499 0288 FFF7FEFF 		bl	cur_shift
 2500              	.LVL225:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2501              		.loc 2 119 8 view .LVU702
 2502 028c 0028     		cmp	r0, #0
 2503 028e BCD1     		bne	.L180
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2504              		.loc 2 119 33 is_stmt 1 view .LVU703
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2505              		.loc 2 119 67 is_stmt 0 view .LVU704
 2506 0290 DBF80030 		ldr	r3, [fp]
 2507 0294 2C4F     		ldr	r7, .L225+96
 2508 0296 D022     		movs	r2, #208
 2509 0298 02FB03F2 		mul	r2, r2, r3
 2510 029c BB18     		adds	r3, r7, r2
 2511 029e D3E92401 		ldrd	r0, r1, [r3, #144]
 2512 02a2 9032     		adds	r2, r2, #144
 2513 02a4 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2514              	.LVL226:
 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2515              		.loc 2 119 67 view .LVU705
 2516 02a6 85E80300 		stm	r5, {r0, r1}
 2517 02aa 3A44     		add	r2, r2, r7
 2518 02ac D2F804A0 		ldr	r10, [r2, #4]
 2519              	.LVL227:
ARM GAS  /tmp/cc4hRDYn.s 			page 70


 119:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 2520              		.loc 2 119 67 view .LVU706
 2521 02b0 31E7     		b	.L160
 2522              	.LVL228:
 2523              	.L178:
 114:src/console.c ****   case KEY_F4:
 2524              		.loc 2 114 5 is_stmt 1 view .LVU707
 114:src/console.c ****   case KEY_F4:
 2525              		.loc 2 114 9 is_stmt 0 view .LVU708
 2526 02b2 FFF7FEFF 		bl	cur_shift
 2527              	.LVL229:
 114:src/console.c ****   case KEY_F4:
 2528              		.loc 2 114 8 view .LVU709
 2529 02b6 0128     		cmp	r0, #1
 2530 02b8 00F05F81 		beq	.L219
 2531              	.L172:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2532              		.loc 2 116 5 is_stmt 1 view .LVU710
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2533              		.loc 2 116 9 is_stmt 0 view .LVU711
 2534 02bc FFF7FEFF 		bl	cur_shift
 2535              	.LVL230:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2536              		.loc 2 116 8 view .LVU712
 2537 02c0 0028     		cmp	r0, #0
 2538 02c2 DCD1     		bne	.L179
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2539              		.loc 2 116 33 is_stmt 1 view .LVU713
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2540              		.loc 2 116 67 is_stmt 0 view .LVU714
 2541 02c4 DBF80030 		ldr	r3, [fp]
 2542 02c8 1F4F     		ldr	r7, .L225+96
 2543 02ca D022     		movs	r2, #208
 2544 02cc 02FB03F2 		mul	r2, r2, r3
 2545 02d0 BB18     		adds	r3, r7, r2
 2546 02d2 D3E91C01 		ldrd	r0, r1, [r3, #112]
 2547 02d6 7032     		adds	r2, r2, #112
 2548 02d8 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2549              	.LVL231:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2550              		.loc 2 116 67 view .LVU715
 2551 02da 85E80300 		stm	r5, {r0, r1}
 2552 02de 3A44     		add	r2, r2, r7
 2553 02e0 D2F804A0 		ldr	r10, [r2, #4]
 2554              	.LVL232:
 116:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 2555              		.loc 2 116 67 view .LVU716
 2556 02e4 17E7     		b	.L160
 2557              	.L226:
 2558 02e6 00BF     		.align	2
 2559              	.L225:
 2560 02e8 00000000 		.word	StateWhileOn
 2561 02ec 00000000 		.word	DispMsg
 2562 02f0 00200010 		.word	268443648
 2563 02f4 7D030008 		.word	134218621
 2564 02f8 31020008 		.word	134218289
 2565 02fc 00000000 		.word	JustDisplayed
ARM GAS  /tmp/cc4hRDYn.s 			page 71


 2566 0300 19040008 		.word	134218777
 2567 0304 19020008 		.word	134218265
 2568 0308 E5020008 		.word	134218469
 2569 030c 59020008 		.word	134218329
 2570 0310 35020008 		.word	134218293
 2571 0314 89030008 		.word	134218633
 2572 0318 B9030008 		.word	134218681
 2573 031c B9040008 		.word	134218937
 2574 0320 00000000 		.word	.LANCHOR4
 2575 0324 00000000 		.word	.LANCHOR11
 2576 0328 00000000 		.word	.LANCHOR15
 2577 032c 00000000 		.word	.LANCHOR6
 2578 0330 01040008 		.word	134218753
 2579 0334 81030008 		.word	134218625
 2580 0338 F5030008 		.word	134218741
 2581 033c 55020008 		.word	134218325
 2582 0340 2D040008 		.word	134218797
 2583 0344 1D020008 		.word	134218269
 2584 0348 00000000 		.word	.LANCHOR3
 2585 034c 00000000 		.word	.LANCHOR2
 2586 0350 00000000 		.word	.LANCHOR13
 2587 0354 00000000 		.word	.LANCHOR14
 2588 0358 00000000 		.word	.LANCHOR1
 2589 035c 00000000 		.word	Pause
 2590 0360 F9030008 		.word	134218745
 2591 0364 59030008 		.word	134218585
 2592              	.LVL233:
 2593              	.L177:
 111:src/console.c ****   case KEY_F3:
 2594              		.loc 2 111 5 is_stmt 1 view .LVU717
 111:src/console.c ****   case KEY_F3:
 2595              		.loc 2 111 9 is_stmt 0 view .LVU718
 2596 0368 FFF7FEFF 		bl	cur_shift
 2597              	.LVL234:
 111:src/console.c ****   case KEY_F3:
 2598              		.loc 2 111 8 view .LVU719
 2599 036c 0128     		cmp	r0, #1
 2600 036e 00F01581 		beq	.L220
 2601              	.L173:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2602              		.loc 2 113 5 is_stmt 1 view .LVU720
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2603              		.loc 2 113 9 is_stmt 0 view .LVU721
 2604 0372 FFF7FEFF 		bl	cur_shift
 2605              	.LVL235:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2606              		.loc 2 113 8 view .LVU722
 2607 0376 0028     		cmp	r0, #0
 2608 0378 9BD1     		bne	.L178
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2609              		.loc 2 113 33 is_stmt 1 view .LVU723
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2610              		.loc 2 113 67 is_stmt 0 view .LVU724
 2611 037a DBF80030 		ldr	r3, [fp]
 2612 037e AA4F     		ldr	r7, .L227
 2613 0380 D022     		movs	r2, #208
 2614 0382 02FB03F2 		mul	r2, r2, r3
ARM GAS  /tmp/cc4hRDYn.s 			page 72


 2615 0386 BB18     		adds	r3, r7, r2
 2616 0388 D3E91401 		ldrd	r0, r1, [r3, #80]
 2617 038c 5032     		adds	r2, r2, #80
 2618 038e BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2619              	.LVL236:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2620              		.loc 2 113 67 view .LVU725
 2621 0390 85E80300 		stm	r5, {r0, r1}
 2622 0394 3A44     		add	r2, r2, r7
 2623 0396 D2F804A0 		ldr	r10, [r2, #4]
 2624              	.LVL237:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 2625              		.loc 2 113 67 view .LVU726
 2626 039a BCE6     		b	.L160
 2627              	.LVL238:
 2628              	.L176:
 108:src/console.c ****   case KEY_F2:
 2629              		.loc 2 108 5 is_stmt 1 view .LVU727
 108:src/console.c ****   case KEY_F2:
 2630              		.loc 2 108 9 is_stmt 0 view .LVU728
 2631 039c FFF7FEFF 		bl	cur_shift
 2632              	.LVL239:
 108:src/console.c ****   case KEY_F2:
 2633              		.loc 2 108 8 view .LVU729
 2634 03a0 0128     		cmp	r0, #1
 2635 03a2 00F00C81 		beq	.L221
 2636              	.L174:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2637              		.loc 2 110 5 is_stmt 1 view .LVU730
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2638              		.loc 2 110 9 is_stmt 0 view .LVU731
 2639 03a6 FFF7FEFF 		bl	cur_shift
 2640              	.LVL240:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2641              		.loc 2 110 8 view .LVU732
 2642 03aa 0028     		cmp	r0, #0
 2643 03ac DCD1     		bne	.L177
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2644              		.loc 2 110 33 is_stmt 1 view .LVU733
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2645              		.loc 2 110 67 is_stmt 0 view .LVU734
 2646 03ae DBF80030 		ldr	r3, [fp]
 2647 03b2 D022     		movs	r2, #208
 2648 03b4 02FB03F2 		mul	r2, r2, r3
 2649 03b8 9B4B     		ldr	r3, .L227
 2650 03ba 1F46     		mov	r7, r3
 2651 03bc 1344     		add	r3, r3, r2
 2652 03be D3E90C01 		ldrd	r0, r1, [r3, #48]
 2653 03c2 3032     		adds	r2, r2, #48
 2654 03c4 85E80300 		stm	r5, {r0, r1}
 2655 03c8 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2656              	.LVL241:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2657              		.loc 2 110 67 view .LVU735
 2658 03ca 3A44     		add	r2, r2, r7
 2659 03cc D2F804A0 		ldr	r10, [r2, #4]
 2660              	.LVL242:
ARM GAS  /tmp/cc4hRDYn.s 			page 73


 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 2661              		.loc 2 110 67 view .LVU736
 2662 03d0 A1E6     		b	.L160
 2663              	.LVL243:
 2664              	.L175:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2665              		.loc 2 107 5 is_stmt 1 view .LVU737
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2666              		.loc 2 107 9 is_stmt 0 view .LVU738
 2667 03d2 FFF7FEFF 		bl	cur_shift
 2668              	.LVL244:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2669              		.loc 2 107 8 view .LVU739
 2670 03d6 0028     		cmp	r0, #0
 2671 03d8 E0D1     		bne	.L176
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2672              		.loc 2 107 33 is_stmt 1 view .LVU740
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2673              		.loc 2 107 67 is_stmt 0 view .LVU741
 2674 03da DBF80030 		ldr	r3, [fp]
 2675 03de 924F     		ldr	r7, .L227
 2676 03e0 D022     		movs	r2, #208
 2677 03e2 02FB03F2 		mul	r2, r2, r3
 2678 03e6 BB18     		adds	r3, r7, r2
 2679 03e8 D3E90401 		ldrd	r0, r1, [r3, #16]
 2680 03ec 1032     		adds	r2, r2, #16
 2681 03ee BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2682              	.LVL245:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2683              		.loc 2 107 67 view .LVU742
 2684 03f0 85E80300 		stm	r5, {r0, r1}
 2685 03f4 3A44     		add	r2, r2, r7
 2686 03f6 D2F804A0 		ldr	r10, [r2, #4]
 2687              	.LVL246:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2688              		.loc 2 107 67 view .LVU743
 2689 03fa 8CE6     		b	.L160
 2690              	.LVL247:
 2691              	.L158:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 2692              		.loc 2 107 67 view .LVU744
 2693              	.LBE111:
 2694              	.LBE137:
 452:src/console.c ****       remapped = remap(c);
 2695              		.loc 2 452 5 is_stmt 1 view .LVU745
 452:src/console.c ****       remapped = remap(c);
 2696              		.loc 2 452 8 is_stmt 0 view .LVU746
 2697 03fc 7FF435AE 		bne	.L142
 2698 0400 77E6     		b	.L161
 2699              	.L157:
 452:src/console.c ****       remapped = remap(c);
 2700              		.loc 2 452 5 is_stmt 1 view .LVU747
 453:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2701              		.loc 2 453 7 view .LVU748
 2702              	.LVL248:
 2703              	.LBB138:
  60:src/console.c **** 
ARM GAS  /tmp/cc4hRDYn.s 			page 74


 2704              		.loc 2 60 22 view .LVU749
 2705              	.LBB112:
  62:src/console.c **** 
 2706              		.loc 2 62 3 view .LVU750
   1:src/keytran.c ****     {K_RELEASE, -1},
 2707              		.loc 3 1 1 view .LVU751
  59:src/keytran.c ****     {K_RELEASE, -1},
 2708              		.loc 3 59 3 view .LVU752
 117:src/keytran.c ****     {K_RELEASE, -1},
 2709              		.loc 3 117 3 view .LVU753
 2710              		.loc 3 175 1 view .LVU754
  66:src/console.c **** 
 2711              		.loc 2 66 3 view .LVU755
  66:src/console.c **** 
 2712              		.loc 2 66 23 view .LVU756
  66:src/console.c **** 
 2713              		.loc 2 66 30 is_stmt 0 view .LVU757
 2714 0402 8A4B     		ldr	r3, .L227+4
 2715 0404 93E80300 		ldm	r3, {r0, r1}
 2716              	.LVL249:
  66:src/console.c **** 
 2717              		.loc 2 66 30 view .LVU758
 2718 0408 85E80300 		stm	r5, {r0, r1}
 2719 040c 8A46     		mov	r10, r1
 2720              	.LVL250:
  66:src/console.c **** 
 2721              		.loc 2 66 30 view .LVU759
 2722 040e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2723              	.LVL251:
  66:src/console.c **** 
 2724              		.loc 2 66 30 view .LVU760
 2725 0410 81E6     		b	.L160
 2726              	.LVL252:
 2727              	.L210:
  72:src/console.c ****     // Make screenshot - allow to report errors
 2728              		.loc 2 72 5 is_stmt 1 view .LVU761
 2729 0412 874B     		ldr	r3, .L227+8
 2730 0414 41F23010 		movw	r0, #4400
 2731 0418 9847     		blx	r3
 2732              	.LVL253:
  72:src/console.c ****     // Make screenshot - allow to report errors
 2733              		.loc 2 72 30 view .LVU762
 2734 041a 0A20     		movs	r0, #10
 2735 041c 854B     		ldr	r3, .L227+12
 2736 041e 9847     		blx	r3
 2737              	.LVL254:
  72:src/console.c ****     // Make screenshot - allow to report errors
 2738              		.loc 2 72 45 view .LVU763
 2739 0420 854B     		ldr	r3, .L227+16
 2740 0422 9847     		blx	r3
 2741              	.LVL255:
  74:src/console.c ****       // Was error just wait for confirmation
 2742              		.loc 2 74 5 view .LVU764
  74:src/console.c ****       // Was error just wait for confirmation
 2743              		.loc 2 74 10 is_stmt 0 view .LVU765
 2744 0424 854B     		ldr	r3, .L227+20
 2745 0426 0120     		movs	r0, #1
ARM GAS  /tmp/cc4hRDYn.s 			page 75


 2746 0428 9847     		blx	r3
 2747              	.LVL256:
  74:src/console.c ****       // Was error just wait for confirmation
 2748              		.loc 2 74 8 view .LVU766
 2749 042a 0228     		cmp	r0, #2
 2750 042c 01D1     		bne	.L162
  76:src/console.c ****     }
 2751              		.loc 2 76 7 is_stmt 1 view .LVU767
 2752 042e 844B     		ldr	r3, .L227+24
 2753 0430 9847     		blx	r3
 2754              	.LVL257:
 2755              	.L162:
  79:src/console.c ****     return no_key;
 2756              		.loc 2 79 5 view .LVU768
 2757 0432 7F4B     		ldr	r3, .L227+8
 2758 0434 42F26020 		movw	r0, #8800
 2759 0438 9847     		blx	r3
 2760              	.LVL258:
  79:src/console.c ****     return no_key;
 2761              		.loc 2 79 30 view .LVU769
 2762 043a 0A20     		movs	r0, #10
 2763 043c 7D4B     		ldr	r3, .L227+12
 2764 043e 9847     		blx	r3
 2765              	.LVL259:
  79:src/console.c ****     return no_key;
 2766              		.loc 2 79 45 view .LVU770
 2767 0440 7D4B     		ldr	r3, .L227+16
 2768 0442 9847     		blx	r3
 2769              	.LVL260:
  80:src/console.c ****   }
 2770              		.loc 2 80 5 view .LVU771
  80:src/console.c ****   }
 2771              		.loc 2 80 12 is_stmt 0 view .LVU772
 2772 0444 7F4B     		ldr	r3, .L227+28
 2773 0446 93E80300 		ldm	r3, {r0, r1}
 2774 044a 85E80300 		stm	r5, {r0, r1}
 2775 044e 8A46     		mov	r10, r1
 2776              	.LVL261:
  80:src/console.c ****   }
 2777              		.loc 2 80 12 view .LVU773
 2778 0450 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2779              	.LVL262:
  80:src/console.c ****   }
 2780              		.loc 2 80 12 view .LVU774
 2781 0452 60E6     		b	.L160
 2782              	.LVL263:
 2783              	.L213:
  80:src/console.c ****   }
 2784              		.loc 2 80 12 view .LVU775
 2785              	.LBE112:
 2786              	.LBE138:
 478:src/console.c **** 	display_current_menu();
 2787              		.loc 2 478 2 is_stmt 1 view .LVU776
 478:src/console.c **** 	display_current_menu();
 2788              		.loc 2 478 13 is_stmt 0 view .LVU777
 2789 0454 8DF81030 		strb	r3, [sp, #16]
 2790 0458 CDF814A0 		str	r10, [sp, #20]
ARM GAS  /tmp/cc4hRDYn.s 			page 76


 2791 045c 95E80600 		ldm	r5, {r1, r2}
 2792 0460 02A8     		add	r0, sp, #8
 2793 0462 FFF7FEFF 		bl	do_multi
 2794              	.LVL264:
 478:src/console.c **** 	display_current_menu();
 2795              		.loc 2 478 13 view .LVU778
 2796 0466 02AB     		add	r3, sp, #8
 2797 0468 93E80300 		ldm	r3, {r0, r1}
 2798 046c 85E80300 		stm	r5, {r0, r1}
 2799              	.LVL265:
 2800              	.LBB139:
 2801              	.LBB140:
  22:src/menu.c    **** }
 2802              		.loc 1 22 3 view .LVU779
 2803 0470 DBF80000 		ldr	r0, [fp]
 2804              	.LBE140:
 2805              	.LBE139:
 478:src/console.c **** 	display_current_menu();
 2806              		.loc 2 478 13 view .LVU780
 2807 0474 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 2808 0478 0193     		str	r3, [sp, #4]
 2809              	.LVL266:
 478:src/console.c **** 	display_current_menu();
 2810              		.loc 2 478 13 view .LVU781
 2811 047a DDF814A0 		ldr	r10, [sp, #20]
 2812              	.LVL267:
 479:src/console.c ****       }
 2813              		.loc 2 479 2 is_stmt 1 view .LVU782
 2814              	.LBB142:
 2815              	.LBI139:
  21:src/menu.c    ****   display_menu (current_menu);
 2816              		.loc 1 21 6 view .LVU783
 2817              	.LBB141:
  22:src/menu.c    **** }
 2818              		.loc 1 22 3 view .LVU784
 2819 047e FFF7FEFF 		bl	display_menu
 2820              	.LVL268:
  23:src/menu.c    **** 
 2821              		.loc 1 23 1 is_stmt 0 view .LVU785
 2822 0482 019B     		ldr	r3, [sp, #4]
 2823 0484 6AE6     		b	.L165
 2824              	.LVL269:
 2825              	.L209:
  23:src/menu.c    **** 
 2826              		.loc 1 23 1 view .LVU786
 2827              	.LBE141:
 2828              	.LBE142:
 2829              	.LBB143:
 2830              	.LBB113:
  68:src/console.c **** 
 2831              		.loc 2 68 16 is_stmt 1 view .LVU787
  68:src/console.c **** 
 2832              		.loc 2 68 23 is_stmt 0 view .LVU788
 2833 0486 704B     		ldr	r3, .L227+32
 2834 0488 93E80300 		ldm	r3, {r0, r1}
 2835 048c 85E80300 		stm	r5, {r0, r1}
 2836 0490 8A46     		mov	r10, r1
ARM GAS  /tmp/cc4hRDYn.s 			page 77


 2837              	.LVL270:
  68:src/console.c **** 
 2838              		.loc 2 68 23 view .LVU789
 2839 0492 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2840              	.LVL271:
  68:src/console.c **** 
 2841              		.loc 2 68 23 view .LVU790
 2842 0494 3FE6     		b	.L160
 2843              	.LVL272:
 2844              	.L194:
  68:src/console.c **** 
 2845              		.loc 2 68 23 view .LVU791
 2846              	.LBE113:
 2847              	.LBE143:
 2848              	.LBB144:
 2849              	.LBB130:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2850              		.loc 1 4 7 view .LVU792
 2851 0496 9A46     		mov	r10, r3
 2852              	.LVL273:
 2853              	.L186:
   6:src/menu.c    ****   }
 2854              		.loc 1 6 5 is_stmt 1 view .LVU793
   6:src/menu.c    ****   }
 2855              		.loc 1 6 18 is_stmt 0 view .LVU794
 2856 0498 0022     		movs	r2, #0
 2857 049a 5346     		mov	r3, r10
 2858              	.LVL274:
   6:src/menu.c    ****   }
 2859              		.loc 1 6 18 view .LVU795
 2860 049c CBF80020 		str	r2, [fp]
 2861              	.LVL275:
   6:src/menu.c    ****   }
 2862              		.loc 1 6 18 view .LVU796
 2863 04a0 9246     		mov	r10, r2
 2864 04a2 DAE6     		b	.L189
 2865              	.LVL276:
 2866              	.L217:
   9:src/menu.c    ****   }
 2867              		.loc 1 9 5 is_stmt 1 view .LVU797
   9:src/menu.c    ****   }
 2868              		.loc 1 9 18 is_stmt 0 view .LVU798
 2869 04a4 694A     		ldr	r2, .L227+36
 2870 04a6 D2F800A0 		ldr	r10, [r2]
 2871              	.LVL277:
   9:src/menu.c    ****   }
 2872              		.loc 1 9 18 view .LVU799
 2873 04aa CBF800A0 		str	r10, [fp]
 2874 04ae D4E6     		b	.L189
 2875              	.LVL278:
 2876              	.L211:
   9:src/menu.c    ****   }
 2877              		.loc 1 9 18 view .LVU800
 2878              	.LBE130:
 2879              	.LBE144:
 2880              	.LBB145:
 2881              	.LBB114:
ARM GAS  /tmp/cc4hRDYn.s 			page 78


  86:src/console.c ****       case SHIFT_N:
 2882              		.loc 2 86 7 is_stmt 1 view .LVU801
  86:src/console.c ****       case SHIFT_N:
 2883              		.loc 2 86 15 is_stmt 0 view .LVU802
 2884 04b0 FFF7FEFF 		bl	cur_shift
 2885              	.LVL279:
  86:src/console.c ****       case SHIFT_N:
 2886              		.loc 2 86 7 view .LVU803
 2887 04b4 0328     		cmp	r0, #3
  86:src/console.c ****       case SHIFT_N:
 2888              		.loc 2 86 15 view .LVU804
 2889 04b6 0346     		mov	r3, r0
  86:src/console.c ****       case SHIFT_N:
 2890              		.loc 2 86 7 view .LVU805
 2891 04b8 00F2A980 		bhi	.L192
 2892 04bc 0128     		cmp	r0, #1
 2893 04be 21D8     		bhi	.L166
 2894 04c0 0028     		cmp	r0, #0
 2895 04c2 00F08D80 		beq	.L222
  89:src/console.c ****       case SHIFT_F:
 2896              		.loc 2 89 2 is_stmt 1 view .LVU806
  91:src/console.c **** 	break;
 2897              		.loc 2 91 2 view .LVU807
  91:src/console.c **** 	break;
 2898              		.loc 2 91 23 is_stmt 0 view .LVU808
 2899 04c6 624B     		ldr	r3, .L227+40
 2900 04c8 93E80300 		ldm	r3, {r0, r1}
 2901 04cc 4FF0000A 		mov	r10, #0
 2902              	.LVL280:
  91:src/console.c **** 	break;
 2903              		.loc 2 91 23 view .LVU809
 2904 04d0 85E80300 		stm	r5, {r0, r1}
 2905              	.LVL281:
  91:src/console.c **** 	break;
 2906              		.loc 2 91 23 view .LVU810
 2907              	.LBE114:
 2908              	.LBE145:
 454:src/console.c **** 	set_menu ( remapped.shift );
 2909              		.loc 2 454 7 is_stmt 1 view .LVU811
 470:src/console.c **** 	SET_ST(STAT_MENU);
 2910              		.loc 2 470 7 view .LVU812
 477:src/console.c **** 	remapped = do_multi (remapped);
 2911              		.loc 2 477 7 view .LVU813
 2912              	.LBB146:
 2913              	.LBB115:
  91:src/console.c **** 	break;
 2914              		.loc 2 91 23 is_stmt 0 view .LVU814
 2915 04d4 2A23     		movs	r3, #42
 2916 04d6 41E6     		b	.L165
 2917              	.LVL282:
 2918              	.L181:
 123:src/console.c ****   }
 2919              		.loc 2 123 5 is_stmt 1 view .LVU815
 123:src/console.c ****   }
 2920              		.loc 2 123 9 is_stmt 0 view .LVU816
 2921 04d8 FFF7FEFF 		bl	cur_shift
 2922              	.LVL283:
ARM GAS  /tmp/cc4hRDYn.s 			page 79


 123:src/console.c ****   }
 2923              		.loc 2 123 8 view .LVU817
 2924 04dc 0128     		cmp	r0, #1
 2925 04de 19D0     		beq	.L223
 2926              	.L168:
 126:src/console.c ****   case SHIFT_N:    
 2927              		.loc 2 126 3 is_stmt 1 view .LVU818
 126:src/console.c ****   case SHIFT_N:    
 2928              		.loc 2 126 11 is_stmt 0 view .LVU819
 2929 04e0 FFF7FEFF 		bl	cur_shift
 2930              	.LVL284:
 126:src/console.c ****   case SHIFT_N:    
 2931              		.loc 2 126 3 view .LVU820
 2932 04e4 0128     		cmp	r0, #1
 2933 04e6 00F09080 		beq	.L182
 2934 04ea 0228     		cmp	r0, #2
 2935 04ec 00F08280 		beq	.L183
 2936 04f0 0028     		cmp	r0, #0
 2937 04f2 7DD0     		beq	.L184
  62:src/console.c **** 
 2938              		.loc 2 62 41 view .LVU821
 2939 04f4 5FFA8AF3 		uxtb	r3, r10
 2940              	.LVL285:
  62:src/console.c **** 
 2941              		.loc 2 62 41 view .LVU822
 2942              	.LBE115:
 2943              	.LBE146:
 454:src/console.c **** 	set_menu ( remapped.shift );
 2944              		.loc 2 454 7 is_stmt 1 view .LVU823
 454:src/console.c **** 	set_menu ( remapped.shift );
 2945              		.loc 2 454 10 is_stmt 0 view .LVU824
 2946 04f8 2F2B     		cmp	r3, #47
 2947 04fa 00F08C80 		beq	.L224
 2948              	.LBB147:
 2949              	.LBB116:
 137:src/console.c ****   }
 2950              		.loc 2 137 12 view .LVU825
 2951 04fe 4FF0000A 		mov	r10, #0
 2952              	.LVL286:
 137:src/console.c ****   }
 2953              		.loc 2 137 12 view .LVU826
 2954 0502 0BE6     		b	.L185
 2955              	.LVL287:
 2956              	.L166:
  92:src/console.c ****       case SHIFT_G:
 2957              		.loc 2 92 2 is_stmt 1 view .LVU827
  94:src/console.c **** 	break;
 2958              		.loc 2 94 2 view .LVU828
  94:src/console.c **** 	break;
 2959              		.loc 2 94 9 is_stmt 0 view .LVU829
 2960 0504 534B     		ldr	r3, .L227+44
 2961 0506 93E80300 		ldm	r3, {r0, r1}
 2962 050a 85E80300 		stm	r5, {r0, r1}
 2963 050e 8A46     		mov	r10, r1
 2964              	.LVL288:
  94:src/console.c **** 	break;
 2965              		.loc 2 94 9 view .LVU830
ARM GAS  /tmp/cc4hRDYn.s 			page 80


 2966 0510 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2967              	.LVL289:
  94:src/console.c **** 	break;
 2968              		.loc 2 94 9 view .LVU831
 2969 0512 00E6     		b	.L160
 2970              	.LVL290:
 2971              	.L223:
 123:src/console.c ****   }
 2972              		.loc 2 123 33 is_stmt 1 view .LVU832
 123:src/console.c ****   }
 2973              		.loc 2 123 67 is_stmt 0 view .LVU833
 2974 0514 DBF80030 		ldr	r3, [fp]
 2975 0518 434F     		ldr	r7, .L227
 2976 051a D022     		movs	r2, #208
 2977 051c 02FB03F2 		mul	r2, r2, r3
 2978 0520 BB18     		adds	r3, r7, r2
 2979 0522 D3E92E01 		ldrd	r0, r1, [r3, #184]
 2980 0526 B832     		adds	r2, r2, #184
 2981 0528 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 2982              	.LVL291:
 123:src/console.c ****   }
 2983              		.loc 2 123 67 view .LVU834
 2984 052a 85E80300 		stm	r5, {r0, r1}
 2985 052e 3A44     		add	r2, r2, r7
 2986 0530 D2F804A0 		ldr	r10, [r2, #4]
 2987              	.LVL292:
 123:src/console.c ****   }
 2988              		.loc 2 123 67 view .LVU835
 2989 0534 EFE5     		b	.L160
 2990              	.LVL293:
 2991              	.L216:
 120:src/console.c ****   case KEY_F6:
 2992              		.loc 2 120 33 is_stmt 1 view .LVU836
 120:src/console.c ****   case KEY_F6:
 2993              		.loc 2 120 67 is_stmt 0 view .LVU837
 2994 0536 DBF80030 		ldr	r3, [fp]
 2995 053a 3B4F     		ldr	r7, .L227
 2996 053c D022     		movs	r2, #208
 2997 053e 02FB03F2 		mul	r2, r2, r3
 2998 0542 BB18     		adds	r3, r7, r2
 2999 0544 D3E92601 		ldrd	r0, r1, [r3, #152]
 3000 0548 9832     		adds	r2, r2, #152
 3001 054a BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3002              	.LVL294:
 120:src/console.c ****   case KEY_F6:
 3003              		.loc 2 120 67 view .LVU838
 3004 054c 85E80300 		stm	r5, {r0, r1}
 3005 0550 3A44     		add	r2, r2, r7
 3006 0552 D2F804A0 		ldr	r10, [r2, #4]
 3007              	.LVL295:
 120:src/console.c ****   case KEY_F6:
 3008              		.loc 2 120 67 view .LVU839
 3009 0556 DEE5     		b	.L160
 3010              	.LVL296:
 3011              	.L218:
 117:src/console.c ****   case KEY_F5:
 3012              		.loc 2 117 33 is_stmt 1 view .LVU840
ARM GAS  /tmp/cc4hRDYn.s 			page 81


 117:src/console.c ****   case KEY_F5:
 3013              		.loc 2 117 67 is_stmt 0 view .LVU841
 3014 0558 DBF80030 		ldr	r3, [fp]
 3015 055c 324F     		ldr	r7, .L227
 3016 055e D022     		movs	r2, #208
 3017 0560 02FB03F2 		mul	r2, r2, r3
 3018 0564 BB18     		adds	r3, r7, r2
 3019 0566 D3E91E01 		ldrd	r0, r1, [r3, #120]
 3020 056a 7832     		adds	r2, r2, #120
 3021 056c BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3022              	.LVL297:
 117:src/console.c ****   case KEY_F5:
 3023              		.loc 2 117 67 view .LVU842
 3024 056e 85E80300 		stm	r5, {r0, r1}
 3025 0572 3A44     		add	r2, r2, r7
 3026 0574 D2F804A0 		ldr	r10, [r2, #4]
 3027              	.LVL298:
 117:src/console.c ****   case KEY_F5:
 3028              		.loc 2 117 67 view .LVU843
 3029 0578 CDE5     		b	.L160
 3030              	.LVL299:
 3031              	.L219:
 114:src/console.c ****   case KEY_F4:
 3032              		.loc 2 114 33 is_stmt 1 view .LVU844
 114:src/console.c ****   case KEY_F4:
 3033              		.loc 2 114 67 is_stmt 0 view .LVU845
 3034 057a DBF80030 		ldr	r3, [fp]
 3035 057e 2A4F     		ldr	r7, .L227
 3036 0580 D022     		movs	r2, #208
 3037 0582 02FB03F2 		mul	r2, r2, r3
 3038 0586 BB18     		adds	r3, r7, r2
 3039 0588 D3E91601 		ldrd	r0, r1, [r3, #88]
 3040 058c 5832     		adds	r2, r2, #88
 3041 058e BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3042              	.LVL300:
 114:src/console.c ****   case KEY_F4:
 3043              		.loc 2 114 67 view .LVU846
 3044 0590 85E80300 		stm	r5, {r0, r1}
 3045 0594 3A44     		add	r2, r2, r7
 3046 0596 D2F804A0 		ldr	r10, [r2, #4]
 3047              	.LVL301:
 114:src/console.c ****   case KEY_F4:
 3048              		.loc 2 114 67 view .LVU847
 3049 059a BCE5     		b	.L160
 3050              	.LVL302:
 3051              	.L220:
 111:src/console.c ****   case KEY_F3:
 3052              		.loc 2 111 33 is_stmt 1 view .LVU848
 111:src/console.c ****   case KEY_F3:
 3053              		.loc 2 111 67 is_stmt 0 view .LVU849
 3054 059c DBF80030 		ldr	r3, [fp]
 3055 05a0 214F     		ldr	r7, .L227
 3056 05a2 D022     		movs	r2, #208
 3057 05a4 02FB03F2 		mul	r2, r2, r3
 3058 05a8 BB18     		adds	r3, r7, r2
 3059 05aa D3E90E01 		ldrd	r0, r1, [r3, #56]
 3060 05ae 3832     		adds	r2, r2, #56
ARM GAS  /tmp/cc4hRDYn.s 			page 82


 3061 05b0 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3062              	.LVL303:
 111:src/console.c ****   case KEY_F3:
 3063              		.loc 2 111 67 view .LVU850
 3064 05b2 85E80300 		stm	r5, {r0, r1}
 3065 05b6 3A44     		add	r2, r2, r7
 3066 05b8 D2F804A0 		ldr	r10, [r2, #4]
 3067              	.LVL304:
 111:src/console.c ****   case KEY_F3:
 3068              		.loc 2 111 67 view .LVU851
 3069 05bc ABE5     		b	.L160
 3070              	.LVL305:
 3071              	.L221:
 108:src/console.c ****   case KEY_F2:
 3072              		.loc 2 108 33 is_stmt 1 view .LVU852
 108:src/console.c ****   case KEY_F2:
 3073              		.loc 2 108 67 is_stmt 0 view .LVU853
 3074 05be DBF80030 		ldr	r3, [fp]
 3075 05c2 194F     		ldr	r7, .L227
 3076 05c4 D022     		movs	r2, #208
 3077 05c6 02FB03F2 		mul	r2, r2, r3
 3078 05ca BB18     		adds	r3, r7, r2
 3079 05cc D3E90601 		ldrd	r0, r1, [r3, #24]
 3080 05d0 1832     		adds	r2, r2, #24
 3081 05d2 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 3082              	.LVL306:
 108:src/console.c ****   case KEY_F2:
 3083              		.loc 2 108 67 view .LVU854
 3084 05d4 85E80300 		stm	r5, {r0, r1}
 3085 05d8 3A44     		add	r2, r2, r7
 3086 05da D2F804A0 		ldr	r10, [r2, #4]
 3087              	.LVL307:
 108:src/console.c ****   case KEY_F2:
 3088              		.loc 2 108 67 view .LVU855
 3089 05de 9AE5     		b	.L160
 3090              	.LVL308:
 3091              	.L222:
  88:src/console.c **** 	break;
 3092              		.loc 2 88 2 is_stmt 1 view .LVU856
  88:src/console.c **** 	break;
 3093              		.loc 2 88 21 is_stmt 0 view .LVU857
 3094 05e0 1D4A     		ldr	r2, .L227+48
 3095 05e2 92E80300 		ldm	r2, {r0, r1}
 3096 05e6 9A46     		mov	r10, r3
 3097              	.LVL309:
  88:src/console.c **** 	break;
 3098              		.loc 2 88 21 view .LVU858
 3099 05e8 85E80300 		stm	r5, {r0, r1}
 3100              	.LVL310:
  88:src/console.c **** 	break;
 3101              		.loc 2 88 21 view .LVU859
 3102              	.LBE116:
 3103              	.LBE147:
 454:src/console.c **** 	set_menu ( remapped.shift );
 3104              		.loc 2 454 7 is_stmt 1 view .LVU860
 470:src/console.c **** 	SET_ST(STAT_MENU);
 3105              		.loc 2 470 7 view .LVU861
ARM GAS  /tmp/cc4hRDYn.s 			page 83


 477:src/console.c **** 	remapped = do_multi (remapped);
 3106              		.loc 2 477 7 view .LVU862
 3107              	.LBB148:
 3108              	.LBB117:
  88:src/console.c **** 	break;
 3109              		.loc 2 88 21 is_stmt 0 view .LVU863
 3110 05ec 2923     		movs	r3, #41
 3111 05ee B5E5     		b	.L165
 3112              	.LVL311:
 3113              	.L184:
 128:src/console.c ****     break;
 3114              		.loc 2 128 5 is_stmt 1 view .LVU864
 128:src/console.c ****     break;
 3115              		.loc 2 128 24 is_stmt 0 view .LVU865
 3116 05f0 1A4A     		ldr	r2, .L227+52
 3117 05f2 87E5     		b	.L208
 3118              	.L183:
 132:src/console.c ****   case SHIFT_G:
 3119              		.loc 2 132 5 is_stmt 1 view .LVU866
 134:src/console.c ****     break;
 3120              		.loc 2 134 5 view .LVU867
 134:src/console.c ****     break;
 3121              		.loc 2 134 26 is_stmt 0 view .LVU868
 3122 05f4 1A4A     		ldr	r2, .L227+56
 3123 05f6 02EBCA03 		add	r3, r2, r10, lsl #3
 3124 05fa 93E80300 		ldm	r3, {r0, r1}
 3125 05fe 12F83A30 		ldrb	r3, [r2, r10, lsl #3]	@ zero_extendqisi2
 3126              	.LVL312:
 134:src/console.c ****     break;
 3127              		.loc 2 134 26 view .LVU869
 3128 0602 85E80300 		stm	r5, {r0, r1}
 3129 0606 8A46     		mov	r10, r1
 3130              	.LVL313:
 134:src/console.c ****     break;
 3131              		.loc 2 134 26 view .LVU870
 3132 0608 85E5     		b	.L160
 3133              	.LVL314:
 3134              	.L182:
 129:src/console.c ****   case SHIFT_F:
 3135              		.loc 2 129 5 is_stmt 1 view .LVU871
 131:src/console.c ****     break;
 3136              		.loc 2 131 5 view .LVU872
 131:src/console.c ****     break;
 3137              		.loc 2 131 26 is_stmt 0 view .LVU873
 3138 060a 164A     		ldr	r2, .L227+60
 3139 060c 7AE5     		b	.L208
 3140              	.L192:
  86:src/console.c ****       case SHIFT_N:
 3141              		.loc 2 86 7 view .LVU874
 3142 060e 5346     		mov	r3, r10
 3143 0610 4FF0000A 		mov	r10, #0
 3144              	.LVL315:
  86:src/console.c ****       case SHIFT_N:
 3145              		.loc 2 86 7 view .LVU875
 3146 0614 A2E5     		b	.L165
 3147              	.LVL316:
 3148              	.L224:
ARM GAS  /tmp/cc4hRDYn.s 			page 84


  86:src/console.c ****       case SHIFT_N:
 3149              		.loc 2 86 7 view .LVU876
 3150              	.LBE117:
 3151              	.LBE148:
 455:src/console.c **** 	display_current_menu ();
 3152              		.loc 2 455 2 is_stmt 1 view .LVU877
 3153              	.LBB149:
   3:src/menu.c    ****   if (new_menu == current_menu) {
 3154              		.loc 1 3 6 view .LVU878
 3155              	.LBB131:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3156              		.loc 1 4 3 view .LVU879
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3157              		.loc 1 4 7 is_stmt 0 view .LVU880
 3158 0616 DBF80030 		ldr	r3, [fp]
 3159              	.LVL317:
   5:src/menu.c    ****     current_menu = 0;
 3160              		.loc 1 5 3 is_stmt 1 view .LVU881
   5:src/menu.c    ****     current_menu = 0;
 3161              		.loc 1 5 6 is_stmt 0 view .LVU882
 3162 061a 002B     		cmp	r3, #0
 3163 061c 3FF43BAF 		beq	.L194
 3164              	.LBE131:
 3165              	.LBE149:
 3166              	.LBB150:
 3167              	.LBB118:
 137:src/console.c ****   }
 3168              		.loc 2 137 12 view .LVU883
 3169 0620 4FF0000A 		mov	r10, #0
 3170              	.LVL318:
 137:src/console.c ****   }
 3171              		.loc 2 137 12 view .LVU884
 3172 0624 17E6     		b	.L187
 3173              	.L228:
 3174 0626 00BF     		.align	2
 3175              	.L227:
 3176 0628 00000000 		.word	.LANCHOR3
 3177 062c 00000000 		.word	.LANCHOR16
 3178 0630 F5020008 		.word	134218485
 3179 0634 05040008 		.word	134218757
 3180 0638 F9020008 		.word	134218489
 3181 063c 79030008 		.word	134218617
 3182 0640 99030008 		.word	134218649
 3183 0644 00000000 		.word	.LANCHOR6
 3184 0648 00000000 		.word	.LANCHOR7
 3185 064c 00000000 		.word	.LANCHOR2
 3186 0650 E0000000 		.word	.LANCHOR9+224
 3187 0654 00000000 		.word	.LANCHOR10
 3188 0658 E0000000 		.word	.LANCHOR8+224
 3189 065c 00000000 		.word	.LANCHOR8
 3190 0660 00000000 		.word	.LANCHOR12
 3191 0664 00000000 		.word	.LANCHOR9
 3192              	.LBE118:
 3193              	.LBE150:
 3194              		.cfi_endproc
 3195              	.LFE23:
 3197              		.global	n_p
ARM GAS  /tmp/cc4hRDYn.s 			page 85


 3198              		.comm	print_string,22,4
 3199              		.global	spaces
 3200              		.global	release
 3201              		.global	h_shift
 3202              		.global	g_shift
 3203              		.global	f_shift
 3204              		.global	heartbeat
 3205              		.global	no_key
 3206              		.global	MID_MENU
 3207              		.section	.rodata.str1.4,"aMS",%progbits,1
 3208              		.align	2
 3209              	.LC2:
 3210 0000 53797374 		.ascii	"System!\000"
 3210      656D2100 
 3211              		.global	mid_menu
 3212              		.section	.bss.current_menu,"aw",%nobits
 3213              		.align	2
 3214              		.set	.LANCHOR1,. + 0
 3217              	current_menu:
 3218 0000 00000000 		.space	4
 3219              		.section	.bss.last_menu,"aw",%nobits
 3220              		.align	2
 3221              		.set	.LANCHOR2,. + 0
 3224              	last_menu:
 3225 0000 00000000 		.space	4
 3226              		.section	.bss.mdots,"aw",%nobits
 3227              		.align	2
 3228              		.set	.LANCHOR0,. + 0
 3231              	mdots:
 3232 0000 00000000 		.space	400
 3232      00000000 
 3232      00000000 
 3232      00000000 
 3232      00000000 
 3233              		.section	.bss.n_p,"aw",%nobits
 3234              		.align	2
 3237              	n_p:
 3238 0000 00000000 		.space	4
 3239              		.section	.bss.start_ticks,"aw",%nobits
 3240              		.align	2
 3241              		.set	.LANCHOR4,. + 0
 3244              	start_ticks:
 3245 0000 00000000 		.space	4
 3246              		.section	.data.f_shift,"aw"
 3247              		.align	2
 3248              		.set	.LANCHOR13,. + 0
 3251              	f_shift:
 3252 0000 29       		.byte	41
 3253 0001 000000   		.space	3
 3254 0004 FFFFFFFF 		.word	-1
 3255              		.section	.data.g_shift,"aw"
 3256              		.align	2
 3257              		.set	.LANCHOR14,. + 0
 3260              	g_shift:
 3261 0000 2A       		.byte	42
 3262 0001 000000   		.space	3
 3263 0004 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc4hRDYn.s 			page 86


 3264              		.section	.data.h_shift,"aw"
 3265              		.align	2
 3266              		.set	.LANCHOR10,. + 0
 3269              	h_shift:
 3270 0000 2B       		.byte	43
 3271 0001 000000   		.space	3
 3272 0004 FFFFFFFF 		.word	-1
 3273              		.section	.data.heartbeat,"aw"
 3274              		.align	2
 3275              		.set	.LANCHOR16,. + 0
 3278              	heartbeat:
 3279 0000 62       		.byte	98
 3280 0001 000000   		.space	3
 3281 0004 FFFFFFFF 		.word	-1
 3282              		.section	.data.no_key,"aw"
 3283              		.align	2
 3284              		.set	.LANCHOR6,. + 0
 3287              	no_key:
 3288 0000 2E       		.byte	46
 3289 0001 000000   		.space	3
 3290 0004 00000000 		.word	0
 3291              		.section	.data.release,"aw"
 3292              		.align	2
 3293              		.set	.LANCHOR7,. + 0
 3296              	release:
 3297 0000 63       		.byte	99
 3298 0001 000000   		.space	3
 3299 0004 FFFFFFFF 		.word	-1
 3300              		.section	.data.spaces,"aw"
 3301              		.align	2
 3302              		.set	.LANCHOR5,. + 0
 3305              	spaces:
 3306 0000 20202020 		.ascii	"                     \000"
 3306      20202020 
 3306      20202020 
 3306      20202020 
 3306      20202020 
 3307              		.section	.rodata.MID_MENU,"a"
 3308              		.align	2
 3309              		.set	.LANCHOR15,. + 0
 3312              	MID_MENU:
 3313 0000 00000000 		.word	.LC2
 3314 0004 00000000 		.word	mid_menu
 3315 0008 00000000 		.word	0
 3316 000c 00000000 		.word	0
 3317              		.section	.rodata.Menus,"a"
 3318              		.align	2
 3319              		.set	.LANCHOR3,. + 0
 3322              	Menus:
 3323 0000 426C616E 		.ascii	"Blank\000"
 3323      6B00
 3324 0006 00000000 		.space	9
 3324      00000000 
 3324      00
 3325 000f 00       		.space	1
 3326 0010 2E       		.byte	46
 3327 0011 000000   		.space	3
ARM GAS  /tmp/cc4hRDYn.s 			page 87


 3328 0014 FFFFFFFF 		.word	-1
 3329 0018 2E       		.byte	46
 3330 0019 000000   		.space	3
 3331 001c FFFFFFFF 		.word	-1
 3332 0020 00       		.ascii	"\000"
 3333 0021 00000000 		.space	7
 3333      000000
 3334 0028 00       		.ascii	"\000"
 3335 0029 00000000 		.space	7
 3335      000000
 3336 0030 2E       		.byte	46
 3337 0031 000000   		.space	3
 3338 0034 FFFFFFFF 		.word	-1
 3339 0038 2E       		.byte	46
 3340 0039 000000   		.space	3
 3341 003c FFFFFFFF 		.word	-1
 3342 0040 00       		.ascii	"\000"
 3343 0041 00000000 		.space	7
 3343      000000
 3344 0048 00       		.ascii	"\000"
 3345 0049 00000000 		.space	7
 3345      000000
 3346 0050 2E       		.byte	46
 3347 0051 000000   		.space	3
 3348 0054 FFFFFFFF 		.word	-1
 3349 0058 2E       		.byte	46
 3350 0059 000000   		.space	3
 3351 005c FFFFFFFF 		.word	-1
 3352 0060 00       		.ascii	"\000"
 3353 0061 00000000 		.space	7
 3353      000000
 3354 0068 00       		.ascii	"\000"
 3355 0069 00000000 		.space	7
 3355      000000
 3356 0070 2E       		.byte	46
 3357 0071 000000   		.space	3
 3358 0074 FFFFFFFF 		.word	-1
 3359 0078 2E       		.byte	46
 3360 0079 000000   		.space	3
 3361 007c FFFFFFFF 		.word	-1
 3362 0080 00       		.ascii	"\000"
 3363 0081 00000000 		.space	7
 3363      000000
 3364 0088 00       		.ascii	"\000"
 3365 0089 00000000 		.space	7
 3365      000000
 3366 0090 2C       		.byte	44
 3367 0091 000000   		.space	3
 3368 0094 FFFFFFFF 		.word	-1
 3369 0098 2E       		.byte	46
 3370 0099 000000   		.space	3
 3371 009c FFFFFFFF 		.word	-1
 3372 00a0 2D2D0D00 		.ascii	"--\015\000"
 3373 00a4 00000000 		.space	4
 3374 00a8 00       		.ascii	"\000"
 3375 00a9 00000000 		.space	7
 3375      000000
ARM GAS  /tmp/cc4hRDYn.s 			page 88


 3376 00b0 2D       		.byte	45
 3377 00b1 000000   		.space	3
 3378 00b4 FFFFFFFF 		.word	-1
 3379 00b8 2E       		.byte	46
 3380 00b9 000000   		.space	3
 3381 00bc FFFFFFFF 		.word	-1
 3382 00c0 43505800 		.ascii	"CPX\000"
 3383 00c4 00000000 		.space	4
 3384 00c8 00       		.ascii	"\000"
 3385 00c9 00000000 		.space	7
 3385      000000
 3386 00d0 436C6561 		.ascii	"Clear\000"
 3386      7200
 3387 00d6 00000000 		.space	9
 3387      00000000 
 3387      00
 3388 00df 00       		.space	1
 3389 00e0 10       		.byte	16
 3390 00e1 000000   		.space	3
 3391 00e4 01000000 		.word	1
 3392 00e8 2E       		.byte	46
 3393 00e9 000000   		.space	3
 3394 00ec FFFFFFFF 		.word	-1
 3395 00f0 434C5072 		.ascii	"CLProg\000"
 3395      6F6700
 3396 00f7 00       		.space	1
 3397 00f8 00       		.ascii	"\000"
 3398 00f9 00000000 		.space	7
 3398      000000
 3399 0100 10       		.byte	16
 3400 0101 000000   		.space	3
 3401 0104 02000000 		.word	2
 3402 0108 2E       		.byte	46
 3403 0109 000000   		.space	3
 3404 010c FFFFFFFF 		.word	-1
 3405 0110 434C9100 		.ascii	"CL\221\000"
 3406 0114 00000000 		.space	4
 3407 0118 00       		.ascii	"\000"
 3408 0119 00000000 		.space	7
 3408      000000
 3409 0120 10       		.byte	16
 3410 0121 000000   		.space	3
 3411 0124 03000000 		.word	3
 3412 0128 2E       		.byte	46
 3413 0129 000000   		.space	3
 3414 012c FFFFFFFF 		.word	-1
 3415 0130 434C7800 		.ascii	"CLx\000"
 3416 0134 00000000 		.space	4
 3417 0138 00       		.ascii	"\000"
 3418 0139 00000000 		.space	7
 3418      000000
 3419 0140 2E       		.byte	46
 3420 0141 000000   		.space	3
 3421 0144 FFFFFFFF 		.word	-1
 3422 0148 2E       		.byte	46
 3423 0149 000000   		.space	3
 3424 014c FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc4hRDYn.s 			page 89


 3425 0150 00       		.ascii	"\000"
 3426 0151 00000000 		.space	7
 3426      000000
 3427 0158 00       		.ascii	"\000"
 3428 0159 00000000 		.space	7
 3428      000000
 3429 0160 2C       		.byte	44
 3430 0161 000000   		.space	3
 3431 0164 FFFFFFFF 		.word	-1
 3432 0168 2E       		.byte	46
 3433 0169 000000   		.space	3
 3434 016c FFFFFFFF 		.word	-1
 3435 0170 2D2D0D00 		.ascii	"--\015\000"
 3436 0174 00000000 		.space	4
 3437 0178 00       		.ascii	"\000"
 3438 0179 00000000 		.space	7
 3438      000000
 3439 0180 2D       		.byte	45
 3440 0181 000000   		.space	3
 3441 0184 FFFFFFFF 		.word	-1
 3442 0188 2E       		.byte	46
 3443 0189 000000   		.space	3
 3444 018c FFFFFFFF 		.word	-1
 3445 0190 43505800 		.ascii	"CPX\000"
 3446 0194 00000000 		.space	4
 3447 0198 00       		.ascii	"\000"
 3448 0199 00000000 		.space	7
 3448      000000
 3449 01a0 44495350 		.ascii	"DISP\000"
 3449      00
 3450 01a5 00000000 		.space	10
 3450      00000000 
 3450      0000
 3451 01af 00       		.space	1
 3452 01b0 00       		.byte	0
 3453 01b1 000000   		.space	3
 3454 01b4 03000000 		.word	3
 3455 01b8 05       		.byte	5
 3456 01b9 000000   		.space	3
 3457 01bc 01000000 		.word	1
 3458 01c0 414C4C00 		.ascii	"ALL\000"
 3459 01c4 00000000 		.space	4
 3460 01c8 6120622F 		.ascii	"a b/c\000"
 3460      6300
 3461 01ce 0000     		.space	2
 3462 01d0 01       		.byte	1
 3463 01d1 000000   		.space	3
 3464 01d4 03000000 		.word	3
 3465 01d8 05       		.byte	5
 3466 01d9 000000   		.space	3
 3467 01dc 02000000 		.word	2
 3468 01e0 46495800 		.ascii	"FIX\000"
 3469 01e4 00000000 		.space	4
 3470 01e8 642F6300 		.ascii	"d/c\000"
 3471 01ec 00000000 		.space	4
 3472 01f0 02       		.byte	2
 3473 01f1 000000   		.space	3
ARM GAS  /tmp/cc4hRDYn.s 			page 90


 3474 01f4 03000000 		.word	3
 3475 01f8 06       		.byte	6
 3476 01f9 000000   		.space	3
 3477 01fc 01000000 		.word	1
 3478 0200 53434900 		.ascii	"SCI\000"
 3479 0204 00000000 		.space	4
 3480 0208 482E4D2E 		.ascii	"H.M.S.\000"
 3480      532E00
 3481 020f 00       		.space	1
 3482 0210 03       		.byte	3
 3483 0211 000000   		.space	3
 3484 0214 03000000 		.word	3
 3485 0218 07       		.byte	7
 3486 0219 000000   		.space	3
 3487 021c 01000000 		.word	1
 3488 0220 454E4700 		.ascii	"ENG\000"
 3489 0224 00000000 		.space	4
 3490 0228 482E6400 		.ascii	"H.d\000"
 3491 022c 00000000 		.space	4
 3492 0230 2C       		.byte	44
 3493 0231 000000   		.space	3
 3494 0234 FFFFFFFF 		.word	-1
 3495 0238 26       		.byte	38
 3496 0239 000000   		.space	3
 3497 023c 03000000 		.word	3
 3498 0240 2D2D0D00 		.ascii	"--\015\000"
 3499 0244 00000000 		.space	4
 3500 0248 2E2F2C00 		.ascii	"./,\000"
 3501 024c 00000000 		.space	4
 3502 0250 2D       		.byte	45
 3503 0251 000000   		.space	3
 3504 0254 FFFFFFFF 		.word	-1
 3505 0258 2E       		.byte	46
 3506 0259 000000   		.space	3
 3507 025c FFFFFFFF 		.word	-1
 3508 0260 43505800 		.ascii	"CPX\000"
 3509 0264 00000000 		.space	4
 3510 0268 00       		.ascii	"\000"
 3511 0269 00000000 		.space	7
 3511      000000
 3512 0270 42415345 		.ascii	"BASE\000"
 3512      00
 3513 0275 00000000 		.space	10
 3513      00000000 
 3513      0000
 3514 027f 00       		.space	1
 3515 0280 0E       		.byte	14
 3516 0281 000000   		.space	3
 3517 0284 01000000 		.word	1
 3518 0288 0E       		.byte	14
 3519 0289 000000   		.space	3
 3520 028c 03000000 		.word	3
 3521 0290 42494E00 		.ascii	"BIN\000"
 3522 0294 00000000 		.space	4
 3523 0298 6E6F7400 		.ascii	"not\000"
 3524 029c 00000000 		.space	4
 3525 02a0 0E       		.byte	14
ARM GAS  /tmp/cc4hRDYn.s 			page 91


 3526 02a1 000000   		.space	3
 3527 02a4 02000000 		.word	2
 3528 02a8 13       		.byte	19
 3529 02a9 000000   		.space	3
 3530 02ac 03000000 		.word	3
 3531 02b0 4F435400 		.ascii	"OCT\000"
 3532 02b4 00000000 		.space	4
 3533 02b8 616E6400 		.ascii	"and\000"
 3534 02bc 00000000 		.space	4
 3535 02c0 0F       		.byte	15
 3536 02c1 000000   		.space	3
 3537 02c4 01000000 		.word	1
 3538 02c8 14       		.byte	20
 3539 02c9 000000   		.space	3
 3540 02cc 03000000 		.word	3
 3541 02d0 44454300 		.ascii	"DEC\000"
 3542 02d4 00000000 		.space	4
 3543 02d8 6F7200   		.ascii	"or\000"
 3544 02db 00000000 		.space	5
 3544      00
 3545 02e0 0F       		.byte	15
 3546 02e1 000000   		.space	3
 3547 02e4 02000000 		.word	2
 3548 02e8 15       		.byte	21
 3549 02e9 000000   		.space	3
 3550 02ec 03000000 		.word	3
 3551 02f0 48455800 		.ascii	"HEX\000"
 3552 02f4 00000000 		.space	4
 3553 02f8 786F7200 		.ascii	"xor\000"
 3554 02fc 00000000 		.space	4
 3555 0300 2C       		.byte	44
 3556 0301 000000   		.space	3
 3557 0304 FFFFFFFF 		.word	-1
 3558 0308 16       		.byte	22
 3559 0309 000000   		.space	3
 3560 030c 03000000 		.word	3
 3561 0310 2D2D0D00 		.ascii	"--\015\000"
 3562 0314 00000000 		.space	4
 3563 0318 524D4452 		.ascii	"RMDR\000"
 3563      00
 3564 031d 000000   		.space	3
 3565 0320 2D       		.byte	45
 3566 0321 000000   		.space	3
 3567 0324 FFFFFFFF 		.word	-1
 3568 0328 2E       		.byte	46
 3569 0329 000000   		.space	3
 3570 032c FFFFFFFF 		.word	-1
 3571 0330 43505800 		.ascii	"CPX\000"
 3572 0334 00000000 		.space	4
 3573 0338 00       		.ascii	"\000"
 3574 0339 00000000 		.space	7
 3574      000000
 3575 0340 414E474C 		.ascii	"ANGLES\000"
 3575      455300
 3576 0347 00000000 		.space	8
 3576      00000000 
 3577 034f 00       		.space	1
ARM GAS  /tmp/cc4hRDYn.s 			page 92


 3578 0350 06       		.byte	6
 3579 0351 000000   		.space	3
 3580 0354 02000000 		.word	2
 3581 0358 04       		.byte	4
 3582 0359 000000   		.space	3
 3583 035c 01000000 		.word	1
 3584 0360 44454700 		.ascii	"DEG\000"
 3585 0364 00000000 		.space	4
 3586 0368 500D5200 		.ascii	"P\015R\000"
 3587 036c 00000000 		.space	4
 3588 0370 07       		.byte	7
 3589 0371 000000   		.space	3
 3590 0374 02000000 		.word	2
 3591 0378 04       		.byte	4
 3592 0379 000000   		.space	3
 3593 037c 02000000 		.word	2
 3594 0380 52414400 		.ascii	"RAD\000"
 3595 0384 00000000 		.space	4
 3596 0388 520D5000 		.ascii	"R\015P\000"
 3597 038c 00000000 		.space	4
 3598 0390 08       		.byte	8
 3599 0391 000000   		.space	3
 3600 0394 02000000 		.word	2
 3601 0398 00       		.byte	0
 3602 0399 000000   		.space	3
 3603 039c 01000000 		.word	1
 3604 03a0 47524144 		.ascii	"GRAD\000"
 3604      00
 3605 03a5 000000   		.space	3
 3606 03a8 48595000 		.ascii	"HYP\000"
 3607 03ac 00000000 		.space	4
 3608 03b0 06       		.byte	6
 3609 03b1 000000   		.space	3
 3610 03b4 01000000 		.word	1
 3611 03b8 07       		.byte	7
 3612 03b9 000000   		.space	3
 3613 03bc 01000000 		.word	1
 3614 03c0 482E4D53 		.ascii	"H.MS\000"
 3614      00
 3615 03c5 000000   		.space	3
 3616 03c8 482E6400 		.ascii	"H.d\000"
 3617 03cc 00000000 		.space	4
 3618 03d0 2C       		.byte	44
 3619 03d1 000000   		.space	3
 3620 03d4 FFFFFFFF 		.word	-1
 3621 03d8 00       		.byte	0
 3622 03d9 000000   		.space	3
 3623 03dc 02000000 		.word	2
 3624 03e0 2D2D0D00 		.ascii	"--\015\000"
 3625 03e4 00000000 		.space	4
 3626 03e8 4859509D 		.ascii	"HYP\235\000"
 3626      00
 3627 03ed 000000   		.space	3
 3628 03f0 2D       		.byte	45
 3629 03f1 000000   		.space	3
 3630 03f4 FFFFFFFF 		.word	-1
 3631 03f8 2E       		.byte	46
ARM GAS  /tmp/cc4hRDYn.s 			page 93


 3632 03f9 000000   		.space	3
 3633 03fc FFFFFFFF 		.word	-1
 3634 0400 43505800 		.ascii	"CPX\000"
 3635 0404 00000000 		.space	4
 3636 0408 00       		.ascii	"\000"
 3637 0409 00000000 		.space	7
 3637      000000
 3638 0410 4D495343 		.ascii	"MISC\000"
 3638      00
 3639 0415 00000000 		.space	10
 3639      00000000 
 3639      0000
 3640 041f 00       		.space	1
 3641 0420 25       		.byte	37
 3642 0421 000000   		.space	3
 3643 0424 01000000 		.word	1
 3644 0428 14       		.byte	20
 3645 0429 000000   		.space	3
 3646 042c 01000000 		.word	1
 3647 0430 7C587C00 		.ascii	"|X|\000"
 3648 0434 00000000 		.space	4
 3649 0438 329C00   		.ascii	"2\234\000"
 3650 043b 00000000 		.space	5
 3650      00
 3651 0440 25       		.byte	37
 3652 0441 000000   		.space	3
 3653 0444 02000000 		.word	2
 3654 0448 14       		.byte	20
 3655 0449 000000   		.space	3
 3656 044c 02000000 		.word	2
 3657 0450 524E4400 		.ascii	"RND\000"
 3658 0454 00000000 		.space	4
 3659 0458 4C6F67BA 		.ascii	"Log\272\000"
 3659      00
 3660 045d 000000   		.space	3
 3661 0460 26       		.byte	38
 3662 0461 000000   		.space	3
 3663 0464 01000000 		.word	1
 3664 0468 15       		.byte	21
 3665 0469 000000   		.space	3
 3666 046c 02000000 		.word	2
 3667 0470 49506172 		.ascii	"IPart\000"
 3667      7400
 3668 0476 0000     		.space	2
 3669 0478 4C6F678B 		.ascii	"Log\213\000"
 3669      00
 3670 047d 000000   		.space	3
 3671 0480 26       		.byte	38
 3672 0481 000000   		.space	3
 3673 0484 02000000 		.word	2
 3674 0488 16       		.byte	22
 3675 0489 000000   		.space	3
 3676 048c 02000000 		.word	2
 3677 0490 46506172 		.ascii	"FPart\000"
 3677      7400
 3678 0496 0000     		.space	2
 3679 0498 7C7C656C 		.ascii	"||el\000"
ARM GAS  /tmp/cc4hRDYn.s 			page 94


 3679      00
 3680 049d 000000   		.space	3
 3681 04a0 2C       		.byte	44
 3682 04a1 000000   		.space	3
 3683 04a4 FFFFFFFF 		.word	-1
 3684 04a8 22       		.byte	34
 3685 04a9 000000   		.space	3
 3686 04ac 02000000 		.word	2
 3687 04b0 2D2D0D00 		.ascii	"--\015\000"
 3688 04b4 00000000 		.space	4
 3689 04b8 832500   		.ascii	"\203%\000"
 3690 04bb 00000000 		.space	5
 3690      00
 3691 04c0 2D       		.byte	45
 3692 04c1 000000   		.space	3
 3693 04c4 FFFFFFFF 		.word	-1
 3694 04c8 2E       		.byte	46
 3695 04c9 000000   		.space	3
 3696 04cc FFFFFFFF 		.word	-1
 3697 04d0 43505800 		.ascii	"CPX\000"
 3698 04d4 00000000 		.space	4
 3699 04d8 00       		.ascii	"\000"
 3700 04d9 00000000 		.space	7
 3700      000000
 3701 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 3701      204B6579 
 3701      00
 3702 04e9 00000000 		.space	6
 3702      0000
 3703 04ef 00       		.space	1
 3704 04f0 0D       		.byte	13
 3705 04f1 000000   		.space	3
 3706 04f4 01000000 		.word	1
 3707 04f8 2E       		.byte	46
 3708 04f9 000000   		.space	3
 3709 04fc FFFFFFFF 		.word	-1
 3710 0500 53686F77 		.ascii	"Show\016\000"
 3710      0E00
 3711 0506 0000     		.space	2
 3712 0508 00       		.ascii	"\000"
 3713 0509 00000000 		.space	7
 3713      000000
 3714 0510 0D       		.byte	13
 3715 0511 000000   		.space	3
 3716 0514 02000000 		.word	2
 3717 0518 2E       		.byte	46
 3718 0519 000000   		.space	3
 3719 051c FFFFFFFF 		.word	-1
 3720 0520 53686F77 		.ascii	"Show\015\000"
 3720      0D00
 3721 0526 0000     		.space	2
 3722 0528 00       		.ascii	"\000"
 3723 0529 00000000 		.space	7
 3723      000000
 3724 0530 0D       		.byte	13
 3725 0531 000000   		.space	3
 3726 0534 03000000 		.word	3
ARM GAS  /tmp/cc4hRDYn.s 			page 95


 3727 0538 2E       		.byte	46
 3728 0539 000000   		.space	3
 3729 053c FFFFFFFF 		.word	-1
 3730 0540 78173F00 		.ascii	"x\027?\000"
 3731 0544 00000000 		.space	4
 3732 0548 00       		.ascii	"\000"
 3733 0549 00000000 		.space	7
 3733      000000
 3734 0550 2E       		.byte	46
 3735 0551 000000   		.space	3
 3736 0554 FFFFFFFF 		.word	-1
 3737 0558 2E       		.byte	46
 3738 0559 000000   		.space	3
 3739 055c FFFFFFFF 		.word	-1
 3740 0560 00       		.ascii	"\000"
 3741 0561 00000000 		.space	7
 3741      000000
 3742 0568 00       		.ascii	"\000"
 3743 0569 00000000 		.space	7
 3743      000000
 3744 0570 2C       		.byte	44
 3745 0571 000000   		.space	3
 3746 0574 FFFFFFFF 		.word	-1
 3747 0578 2E       		.byte	46
 3748 0579 000000   		.space	3
 3749 057c FFFFFFFF 		.word	-1
 3750 0580 2D2D0D00 		.ascii	"--\015\000"
 3751 0584 00000000 		.space	4
 3752 0588 00       		.ascii	"\000"
 3753 0589 00000000 		.space	7
 3753      000000
 3754 0590 2D       		.byte	45
 3755 0591 000000   		.space	3
 3756 0594 FFFFFFFF 		.word	-1
 3757 0598 2E       		.byte	46
 3758 0599 000000   		.space	3
 3759 059c FFFFFFFF 		.word	-1
 3760 05a0 43505800 		.ascii	"CPX\000"
 3761 05a4 00000000 		.space	4
 3762 05a8 00       		.ascii	"\000"
 3763 05a9 00000000 		.space	7
 3763      000000
 3764 05b0 50726F67 		.ascii	"Program\000"
 3764      72616D00 
 3765 05b8 00000000 		.space	7
 3765      000000
 3766 05bf 00       		.space	1
 3767 05c0 27       		.byte	39
 3768 05c1 000000   		.space	3
 3769 05c4 01000000 		.word	1
 3770 05c8 28       		.byte	40
 3771 05c9 000000   		.space	3
 3772 05cc 01000000 		.word	1
 3773 05d0 4C424C00 		.ascii	"LBL\000"
 3774 05d4 00000000 		.space	4
 3775 05d8 44534500 		.ascii	"DSE\000"
 3776 05dc 00000000 		.space	4
ARM GAS  /tmp/cc4hRDYn.s 			page 96


 3777 05e0 27       		.byte	39
 3778 05e1 000000   		.space	3
 3779 05e4 02000000 		.word	2
 3780 05e8 28       		.byte	40
 3781 05e9 000000   		.space	3
 3782 05ec 02000000 		.word	2
 3783 05f0 52544E00 		.ascii	"RTN\000"
 3784 05f4 00000000 		.space	4
 3785 05f8 49534700 		.ascii	"ISG\000"
 3786 05fc 00000000 		.space	4
 3787 0600 25       		.byte	37
 3788 0601 000000   		.space	3
 3789 0604 03000000 		.word	3
 3790 0608 2E       		.byte	46
 3791 0609 000000   		.space	3
 3792 060c FFFFFFFF 		.word	-1
 3793 0610 50617573 		.ascii	"Pause\000"
 3793      6500
 3794 0616 0000     		.space	2
 3795 0618 00       		.ascii	"\000"
 3796 0619 00000000 		.space	7
 3796      000000
 3797 0620 12       		.byte	18
 3798 0621 000000   		.space	3
 3799 0624 03000000 		.word	3
 3800 0628 2E       		.byte	46
 3801 0629 000000   		.space	3
 3802 062c FFFFFFFF 		.word	-1
 3803 0630 47544F00 		.ascii	"GTO\000"
 3804 0634 00000000 		.space	4
 3805 0638 00       		.ascii	"\000"
 3806 0639 00000000 		.space	7
 3806      000000
 3807 0640 2C       		.byte	44
 3808 0641 000000   		.space	3
 3809 0644 FFFFFFFF 		.word	-1
 3810 0648 2E       		.byte	46
 3811 0649 000000   		.space	3
 3812 064c FFFFFFFF 		.word	-1
 3813 0650 2D2D0D00 		.ascii	"--\015\000"
 3814 0654 00000000 		.space	4
 3815 0658 00       		.ascii	"\000"
 3816 0659 00000000 		.space	7
 3816      000000
 3817 0660 2D       		.byte	45
 3818 0661 000000   		.space	3
 3819 0664 FFFFFFFF 		.word	-1
 3820 0668 2E       		.byte	46
 3821 0669 000000   		.space	3
 3822 066c FFFFFFFF 		.word	-1
 3823 0670 43505800 		.ascii	"CPX\000"
 3824 0674 00000000 		.space	4
 3825 0678 00       		.ascii	"\000"
 3826 0679 00000000 		.space	7
 3826      000000
 3827 0680 53657475 		.ascii	"Setup 1\000"
 3827      70203100 
ARM GAS  /tmp/cc4hRDYn.s 			page 97


 3828 0688 00000000 		.space	7
 3828      000000
 3829 068f 00       		.space	1
 3830 0690 30       		.byte	48
 3831 0691 000000   		.space	3
 3832 0694 00000000 		.word	0
 3833 0698 2E       		.byte	46
 3834 0699 000000   		.space	3
 3835 069c FFFFFFFF 		.word	-1
 3836 06a0 53797374 		.ascii	"System\000"
 3836      656D00
 3837 06a7 00       		.space	1
 3838 06a8 00       		.ascii	"\000"
 3839 06a9 00000000 		.space	7
 3839      000000
 3840 06b0 31       		.byte	49
 3841 06b1 000000   		.space	3
 3842 06b4 09000000 		.word	9
 3843 06b8 2E       		.byte	46
 3844 06b9 000000   		.space	3
 3845 06bc FFFFFFFF 		.word	-1
 3846 06c0 48454C50 		.ascii	"HELP\000"
 3846      00
 3847 06c5 000000   		.space	3
 3848 06c8 00       		.ascii	"\000"
 3849 06c9 00000000 		.space	7
 3849      000000
 3850 06d0 31       		.byte	49
 3851 06d1 000000   		.space	3
 3852 06d4 02000000 		.word	2
 3853 06d8 31       		.byte	49
 3854 06d9 000000   		.space	3
 3855 06dc 06000000 		.word	6
 3856 06e0 4F6E5354 		.ascii	"OnSTO\000"
 3856      4F00
 3857 06e6 0000     		.space	2
 3858 06e8 53617665 		.ascii	"SaveS\000"
 3858      5300
 3859 06ee 0000     		.space	2
 3860 06f0 31       		.byte	49
 3861 06f1 000000   		.space	3
 3862 06f4 03000000 		.word	3
 3863 06f8 31       		.byte	49
 3864 06f9 000000   		.space	3
 3865 06fc 07000000 		.word	7
 3866 0700 4F6E5243 		.ascii	"OnRCL\000"
 3866      4C00
 3867 0706 0000     		.space	2
 3868 0708 4C6F6164 		.ascii	"LoadS\000"
 3868      5300
 3869 070e 0000     		.space	2
 3870 0710 2C       		.byte	44
 3871 0711 000000   		.space	3
 3872 0714 FFFFFFFF 		.word	-1
 3873 0718 2E       		.byte	46
 3874 0719 000000   		.space	3
 3875 071c FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc4hRDYn.s 			page 98


 3876 0720 2D2D0D00 		.ascii	"--\015\000"
 3877 0724 00000000 		.space	4
 3878 0728 00       		.ascii	"\000"
 3879 0729 00000000 		.space	7
 3879      000000
 3880 0730 2D       		.byte	45
 3881 0731 000000   		.space	3
 3882 0734 FFFFFFFF 		.word	-1
 3883 0738 2E       		.byte	46
 3884 0739 000000   		.space	3
 3885 073c FFFFFFFF 		.word	-1
 3886 0740 43505800 		.ascii	"CPX\000"
 3887 0744 00000000 		.space	4
 3888 0748 00       		.ascii	"\000"
 3889 0749 00000000 		.space	7
 3889      000000
 3890 0750 4172726F 		.ascii	"Arrow\000"
 3890      7700
 3891 0756 00000000 		.space	9
 3891      00000000 
 3891      00
 3892 075f 00       		.space	1
 3893 0760 0E       		.byte	14
 3894 0761 000000   		.space	3
 3895 0764 01000000 		.word	1
 3896 0768 06       		.byte	6
 3897 0769 000000   		.space	3
 3898 076c 02000000 		.word	2
 3899 0770 42696E00 		.ascii	"Bin\000"
 3900 0774 00000000 		.space	4
 3901 0778 44454700 		.ascii	"DEG\000"
 3902 077c 00000000 		.space	4
 3903 0780 0E       		.byte	14
 3904 0781 000000   		.space	3
 3905 0784 02000000 		.word	2
 3906 0788 07       		.byte	7
 3907 0789 000000   		.space	3
 3908 078c 02000000 		.word	2
 3909 0790 4F637400 		.ascii	"Oct\000"
 3910 0794 00000000 		.space	4
 3911 0798 52414400 		.ascii	"RAD\000"
 3912 079c 00000000 		.space	4
 3913 07a0 0F       		.byte	15
 3914 07a1 000000   		.space	3
 3915 07a4 01000000 		.word	1
 3916 07a8 08       		.byte	8
 3917 07a9 000000   		.space	3
 3918 07ac 02000000 		.word	2
 3919 07b0 44656300 		.ascii	"Dec\000"
 3920 07b4 00000000 		.space	4
 3921 07b8 47726164 		.ascii	"Grad\000"
 3921      00
 3922 07bd 000000   		.space	3
 3923 07c0 0F       		.byte	15
 3924 07c1 000000   		.space	3
 3925 07c4 02000000 		.word	2
 3926 07c8 06       		.byte	6
ARM GAS  /tmp/cc4hRDYn.s 			page 99


 3927 07c9 000000   		.space	3
 3928 07cc 01000000 		.word	1
 3929 07d0 48657800 		.ascii	"Hex\000"
 3930 07d4 00000000 		.space	4
 3931 07d8 32484D53 		.ascii	"2HMS\000"
 3931      00
 3932 07dd 000000   		.space	3
 3933 07e0 2C       		.byte	44
 3934 07e1 000000   		.space	3
 3935 07e4 FFFFFFFF 		.word	-1
 3936 07e8 07       		.byte	7
 3937 07e9 000000   		.space	3
 3938 07ec 01000000 		.word	1
 3939 07f0 2D2D0D00 		.ascii	"--\015\000"
 3940 07f4 00000000 		.space	4
 3941 07f8 484D5332 		.ascii	"HMS2\000"
 3941      00
 3942 07fd 000000   		.space	3
 3943 0800 2D       		.byte	45
 3944 0801 000000   		.space	3
 3945 0804 FFFFFFFF 		.word	-1
 3946 0808 2E       		.byte	46
 3947 0809 000000   		.space	3
 3948 080c FFFFFFFF 		.word	-1
 3949 0810 43505800 		.ascii	"CPX\000"
 3950 0814 00000000 		.space	4
 3951 0818 00       		.ascii	"\000"
 3952 0819 00000000 		.space	7
 3952      000000
 3953 0820 466C6167 		.ascii	"Flags\000"
 3953      7300
 3954 0826 00000000 		.space	9
 3954      00000000 
 3954      00
 3955 082f 00       		.space	1
 3956 0830 1E       		.byte	30
 3957 0831 000000   		.space	3
 3958 0834 01000000 		.word	1
 3959 0838 2E       		.byte	46
 3960 0839 000000   		.space	3
 3961 083c FFFFFFFF 		.word	-1
 3962 0840 53465F00 		.ascii	"SF_\000"
 3963 0844 00000000 		.space	4
 3964 0848 00       		.ascii	"\000"
 3965 0849 00000000 		.space	7
 3965      000000
 3966 0850 1E       		.byte	30
 3967 0851 000000   		.space	3
 3968 0854 02000000 		.word	2
 3969 0858 2E       		.byte	46
 3970 0859 000000   		.space	3
 3971 085c FFFFFFFF 		.word	-1
 3972 0860 43465F00 		.ascii	"CF_\000"
 3973 0864 00000000 		.space	4
 3974 0868 00       		.ascii	"\000"
 3975 0869 00000000 		.space	7
 3975      000000
ARM GAS  /tmp/cc4hRDYn.s 			page 100


 3976 0870 1F       		.byte	31
 3977 0871 000000   		.space	3
 3978 0874 01000000 		.word	1
 3979 0878 2E       		.byte	46
 3980 0879 000000   		.space	3
 3981 087c FFFFFFFF 		.word	-1
 3982 0880 783D3F00 		.ascii	"x=?\000"
 3983 0884 00000000 		.space	4
 3984 0888 00       		.ascii	"\000"
 3985 0889 00000000 		.space	7
 3985      000000
 3986 0890 1F       		.byte	31
 3987 0891 000000   		.space	3
 3988 0894 02000000 		.word	2
 3989 0898 2E       		.byte	46
 3990 0899 000000   		.space	3
 3991 089c FFFFFFFF 		.word	-1
 3992 08a0 780B3F00 		.ascii	"x\013?\000"
 3993 08a4 00000000 		.space	4
 3994 08a8 00       		.ascii	"\000"
 3995 08a9 00000000 		.space	7
 3995      000000
 3996 08b0 2C       		.byte	44
 3997 08b1 000000   		.space	3
 3998 08b4 FFFFFFFF 		.word	-1
 3999 08b8 2E       		.byte	46
 4000 08b9 000000   		.space	3
 4001 08bc FFFFFFFF 		.word	-1
 4002 08c0 2D2D0D00 		.ascii	"--\015\000"
 4003 08c4 00000000 		.space	4
 4004 08c8 00       		.ascii	"\000"
 4005 08c9 00000000 		.space	7
 4005      000000
 4006 08d0 2D       		.byte	45
 4007 08d1 000000   		.space	3
 4008 08d4 FFFFFFFF 		.word	-1
 4009 08d8 2E       		.byte	46
 4010 08d9 000000   		.space	3
 4011 08dc FFFFFFFF 		.word	-1
 4012 08e0 43505800 		.ascii	"CPX\000"
 4013 08e4 00000000 		.space	4
 4014 08e8 00       		.ascii	"\000"
 4015 08e9 00000000 		.space	7
 4015      000000
 4016 08f0 50726F62 		.ascii	"Probability\000"
 4016      6162696C 
 4016      69747900 
 4017 08fc 000000   		.space	3
 4018 08ff 00       		.space	1
 4019 0900 18       		.byte	24
 4020 0901 000000   		.space	3
 4021 0904 03000000 		.word	3
 4022 0908 19       		.byte	25
 4023 0909 000000   		.space	3
 4024 090c 01000000 		.word	1
 4025 0910 46616374 		.ascii	"Fact!\000"
 4025      2100
ARM GAS  /tmp/cc4hRDYn.s 			page 101


 4026 0916 0000     		.space	2
 4027 0918 9400     		.ascii	"\224\000"
 4028 091a 00000000 		.space	6
 4028      0000
 4029 0920 18       		.byte	24
 4030 0921 000000   		.space	3
 4031 0924 01000000 		.word	1
 4032 0928 19       		.byte	25
 4033 0929 000000   		.space	3
 4034 092c 02000000 		.word	2
 4035 0930 43792C78 		.ascii	"Cy,x\000"
 4035      00
 4036 0935 000000   		.space	3
 4037 0938 949D00   		.ascii	"\224\235\000"
 4038 093b 00000000 		.space	5
 4038      00
 4039 0940 18       		.byte	24
 4040 0941 000000   		.space	3
 4041 0944 02000000 		.word	2
 4042 0948 2E       		.byte	46
 4043 0949 000000   		.space	3
 4044 094c FFFFFFFF 		.word	-1
 4045 0950 50792C78 		.ascii	"Py,x\000"
 4045      00
 4046 0955 000000   		.space	3
 4047 0958 00       		.ascii	"\000"
 4048 0959 00000000 		.space	7
 4048      000000
 4049 0960 08       		.byte	8
 4050 0961 000000   		.space	3
 4051 0964 01000000 		.word	1
 4052 0968 2E       		.byte	46
 4053 0969 000000   		.space	3
 4054 096c FFFFFFFF 		.word	-1
 4055 0970 52414E23 		.ascii	"RAN#\000"
 4055      00
 4056 0975 000000   		.space	3
 4057 0978 00       		.ascii	"\000"
 4058 0979 00000000 		.space	7
 4058      000000
 4059 0980 2C       		.byte	44
 4060 0981 000000   		.space	3
 4061 0984 FFFFFFFF 		.word	-1
 4062 0988 2E       		.byte	46
 4063 0989 000000   		.space	3
 4064 098c FFFFFFFF 		.word	-1
 4065 0990 2D2D0D00 		.ascii	"--\015\000"
 4066 0994 00000000 		.space	4
 4067 0998 00       		.ascii	"\000"
 4068 0999 00000000 		.space	7
 4068      000000
 4069 09a0 2D       		.byte	45
 4070 09a1 000000   		.space	3
 4071 09a4 FFFFFFFF 		.word	-1
 4072 09a8 2E       		.byte	46
 4073 09a9 000000   		.space	3
 4074 09ac FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc4hRDYn.s 			page 102


 4075 09b0 43505800 		.ascii	"CPX\000"
 4076 09b4 00000000 		.space	4
 4077 09b8 00       		.ascii	"\000"
 4078 09b9 00000000 		.space	7
 4078      000000
 4079 09c0 53746174 		.ascii	"Statistics\000"
 4079      69737469 
 4079      637300
 4080 09cb 00000000 		.space	4
 4081 09cf 00       		.space	1
 4082 09d0 1A       		.byte	26
 4083 09d1 000000   		.space	3
 4084 09d4 01000000 		.word	1
 4085 09d8 1B       		.byte	27
 4086 09d9 000000   		.space	3
 4087 09dc 03000000 		.word	3
 4088 09e0 58626172 		.ascii	"Xbar\000"
 4088      00
 4089 09e5 000000   		.space	3
 4090 09e8 53554D53 		.ascii	"SUMS\000"
 4090      00
 4091 09ed 000000   		.space	3
 4092 09f0 1B       		.byte	27
 4093 09f1 000000   		.space	3
 4094 09f4 01000000 		.word	1
 4095 09f8 2E       		.byte	46
 4096 09f9 000000   		.space	3
 4097 09fc FFFFFFFF 		.word	-1
 4098 0a00 59686174 		.ascii	"Yhat\000"
 4098      00
 4099 0a05 000000   		.space	3
 4100 0a08 00       		.ascii	"\000"
 4101 0a09 00000000 		.space	7
 4101      000000
 4102 0a10 1A       		.byte	26
 4103 0a11 000000   		.space	3
 4104 0a14 02000000 		.word	2
 4105 0a18 2E       		.byte	46
 4106 0a19 000000   		.space	3
 4107 0a1c FFFFFFFF 		.word	-1
 4108 0a20 7300     		.ascii	"s\000"
 4109 0a22 00000000 		.space	6
 4109      0000
 4110 0a28 00       		.ascii	"\000"
 4111 0a29 00000000 		.space	7
 4111      000000
 4112 0a30 1B       		.byte	27
 4113 0a31 000000   		.space	3
 4114 0a34 02000000 		.word	2
 4115 0a38 2E       		.byte	46
 4116 0a39 000000   		.space	3
 4117 0a3c FFFFFFFF 		.word	-1
 4118 0a40 7200     		.ascii	"r\000"
 4119 0a42 00000000 		.space	6
 4119      0000
 4120 0a48 00       		.ascii	"\000"
 4121 0a49 00000000 		.space	7
ARM GAS  /tmp/cc4hRDYn.s 			page 103


 4121      000000
 4122 0a50 2C       		.byte	44
 4123 0a51 000000   		.space	3
 4124 0a54 FFFFFFFF 		.word	-1
 4125 0a58 2E       		.byte	46
 4126 0a59 000000   		.space	3
 4127 0a5c FFFFFFFF 		.word	-1
 4128 0a60 2D2D0D00 		.ascii	"--\015\000"
 4129 0a64 00000000 		.space	4
 4130 0a68 00       		.ascii	"\000"
 4131 0a69 00000000 		.space	7
 4131      000000
 4132 0a70 2D       		.byte	45
 4133 0a71 000000   		.space	3
 4134 0a74 FFFFFFFF 		.word	-1
 4135 0a78 2E       		.byte	46
 4136 0a79 000000   		.space	3
 4137 0a7c FFFFFFFF 		.word	-1
 4138 0a80 43505800 		.ascii	"CPX\000"
 4139 0a84 00000000 		.space	4
 4140 0a88 00       		.ascii	"\000"
 4141 0a89 00000000 		.space	7
 4141      000000
 4142 0a90 53657475 		.ascii	"Setup 2\000"
 4142      70203200 
 4143 0a98 00000000 		.space	7
 4143      000000
 4144 0a9f 00       		.space	1
 4145 0aa0 31       		.byte	49
 4146 0aa1 000000   		.space	3
 4147 0aa4 04000000 		.word	4
 4148 0aa8 2E       		.byte	46
 4149 0aa9 000000   		.space	3
 4150 0aac FFFFFFFF 		.word	-1
 4151 0ab0 53617665 		.ascii	"SaveL\000"
 4151      4C00
 4152 0ab6 0000     		.space	2
 4153 0ab8 00       		.ascii	"\000"
 4154 0ab9 00000000 		.space	7
 4154      000000
 4155 0ac0 31       		.byte	49
 4156 0ac1 000000   		.space	3
 4157 0ac4 05000000 		.word	5
 4158 0ac8 2E       		.byte	46
 4159 0ac9 000000   		.space	3
 4160 0acc FFFFFFFF 		.word	-1
 4161 0ad0 4C6F6164 		.ascii	"LoadL\000"
 4161      4C00
 4162 0ad6 0000     		.space	2
 4163 0ad8 00       		.ascii	"\000"
 4164 0ad9 00000000 		.space	7
 4164      000000
 4165 0ae0 31       		.byte	49
 4166 0ae1 000000   		.space	3
 4167 0ae4 0A000000 		.word	10
 4168 0ae8 2E       		.byte	46
 4169 0ae9 000000   		.space	3
ARM GAS  /tmp/cc4hRDYn.s 			page 104


 4170 0aec FFFFFFFF 		.word	-1
 4171 0af0 53617665 		.ascii	"SaveP\000"
 4171      5000
 4172 0af6 0000     		.space	2
 4173 0af8 00       		.ascii	"\000"
 4174 0af9 00000000 		.space	7
 4174      000000
 4175 0b00 31       		.byte	49
 4176 0b01 000000   		.space	3
 4177 0b04 08000000 		.word	8
 4178 0b08 2E       		.byte	46
 4179 0b09 000000   		.space	3
 4180 0b0c FFFFFFFF 		.word	-1
 4181 0b10 4C6F6164 		.ascii	"LoadP\000"
 4181      5000
 4182 0b16 0000     		.space	2
 4183 0b18 00       		.ascii	"\000"
 4184 0b19 00000000 		.space	7
 4184      000000
 4185 0b20 2C       		.byte	44
 4186 0b21 000000   		.space	3
 4187 0b24 FFFFFFFF 		.word	-1
 4188 0b28 2E       		.byte	46
 4189 0b29 000000   		.space	3
 4190 0b2c FFFFFFFF 		.word	-1
 4191 0b30 2D2D0D00 		.ascii	"--\015\000"
 4192 0b34 00000000 		.space	4
 4193 0b38 00       		.ascii	"\000"
 4194 0b39 00000000 		.space	7
 4194      000000
 4195 0b40 2D       		.byte	45
 4196 0b41 000000   		.space	3
 4197 0b44 FFFFFFFF 		.word	-1
 4198 0b48 2E       		.byte	46
 4199 0b49 000000   		.space	3
 4200 0b4c FFFFFFFF 		.word	-1
 4201 0b50 43505800 		.ascii	"CPX\000"
 4202 0b54 00000000 		.space	4
 4203 0b58 00       		.ascii	"\000"
 4204 0b59 00000000 		.space	7
 4204      000000
 4205              		.section	.rodata.mapping_alpha.10867,"a"
 4206              		.align	2
 4207              		.set	.LANCHOR11,. + 0
 4210              	mapping_alpha.10867:
 4211 0000 63       		.byte	99
 4212 0001 000000   		.space	3
 4213 0004 FFFFFFFF 		.word	-1
 4214 0008 00       		.byte	0
 4215 0009 000000   		.space	3
 4216 000c FFFFFFFF 		.word	-1
 4217 0010 01       		.byte	1
 4218 0011 000000   		.space	3
 4219 0014 FFFFFFFF 		.word	-1
 4220 0018 02       		.byte	2
 4221 0019 000000   		.space	3
 4222 001c FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc4hRDYn.s 			page 105


 4223 0020 03       		.byte	3
 4224 0021 000000   		.space	3
 4225 0024 FFFFFFFF 		.word	-1
 4226 0028 04       		.byte	4
 4227 0029 000000   		.space	3
 4228 002c FFFFFFFF 		.word	-1
 4229 0030 05       		.byte	5
 4230 0031 000000   		.space	3
 4231 0034 FFFFFFFF 		.word	-1
 4232 0038 06       		.byte	6
 4233 0039 000000   		.space	3
 4234 003c FFFFFFFF 		.word	-1
 4235 0040 07       		.byte	7
 4236 0041 000000   		.space	3
 4237 0044 FFFFFFFF 		.word	-1
 4238 0048 08       		.byte	8
 4239 0049 000000   		.space	3
 4240 004c FFFFFFFF 		.word	-1
 4241 0050 09       		.byte	9
 4242 0051 000000   		.space	3
 4243 0054 FFFFFFFF 		.word	-1
 4244 0058 0A       		.byte	10
 4245 0059 000000   		.space	3
 4246 005c FFFFFFFF 		.word	-1
 4247 0060 0B       		.byte	11
 4248 0061 000000   		.space	3
 4249 0064 FFFFFFFF 		.word	-1
 4250 0068 0C       		.byte	12
 4251 0069 000000   		.space	3
 4252 006c FFFFFFFF 		.word	-1
 4253 0070 0D       		.byte	13
 4254 0071 000000   		.space	3
 4255 0074 FFFFFFFF 		.word	-1
 4256 0078 0E       		.byte	14
 4257 0079 000000   		.space	3
 4258 007c FFFFFFFF 		.word	-1
 4259 0080 0F       		.byte	15
 4260 0081 000000   		.space	3
 4261 0084 FFFFFFFF 		.word	-1
 4262 0088 10       		.byte	16
 4263 0089 000000   		.space	3
 4264 008c FFFFFFFF 		.word	-1
 4265 0090 12       		.byte	18
 4266 0091 000000   		.space	3
 4267 0094 FFFFFFFF 		.word	-1
 4268 0098 13       		.byte	19
 4269 0099 000000   		.space	3
 4270 009c FFFFFFFF 		.word	-1
 4271 00a0 14       		.byte	20
 4272 00a1 000000   		.space	3
 4273 00a4 FFFFFFFF 		.word	-1
 4274 00a8 15       		.byte	21
 4275 00a9 000000   		.space	3
 4276 00ac FFFFFFFF 		.word	-1
 4277 00b0 16       		.byte	22
 4278 00b1 000000   		.space	3
 4279 00b4 FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc4hRDYn.s 			page 106


 4280 00b8 18       		.byte	24
 4281 00b9 000000   		.space	3
 4282 00bc FFFFFFFF 		.word	-1
 4283 00c0 19       		.byte	25
 4284 00c1 000000   		.space	3
 4285 00c4 FFFFFFFF 		.word	-1
 4286 00c8 1A       		.byte	26
 4287 00c9 000000   		.space	3
 4288 00cc FFFFFFFF 		.word	-1
 4289 00d0 1B       		.byte	27
 4290 00d1 000000   		.space	3
 4291 00d4 FFFFFFFF 		.word	-1
 4292 00d8 1C       		.byte	28
 4293 00d9 000000   		.space	3
 4294 00dc FFFFFFFF 		.word	-1
 4295 00e0 1E       		.byte	30
 4296 00e1 000000   		.space	3
 4297 00e4 FFFFFFFF 		.word	-1
 4298 00e8 1F       		.byte	31
 4299 00e9 000000   		.space	3
 4300 00ec FFFFFFFF 		.word	-1
 4301 00f0 20       		.byte	32
 4302 00f1 000000   		.space	3
 4303 00f4 FFFFFFFF 		.word	-1
 4304 00f8 21       		.byte	33
 4305 00f9 000000   		.space	3
 4306 00fc FFFFFFFF 		.word	-1
 4307 0100 22       		.byte	34
 4308 0101 000000   		.space	3
 4309 0104 FFFFFFFF 		.word	-1
 4310 0108 24       		.byte	36
 4311 0109 000000   		.space	3
 4312 010c FFFFFFFF 		.word	-1
 4313 0110 25       		.byte	37
 4314 0111 000000   		.space	3
 4315 0114 FFFFFFFF 		.word	-1
 4316 0118 26       		.byte	38
 4317 0119 000000   		.space	3
 4318 011c FFFFFFFF 		.word	-1
 4319 0120 27       		.byte	39
 4320 0121 000000   		.space	3
 4321 0124 FFFFFFFF 		.word	-1
 4322 0128 28       		.byte	40
 4323 0129 000000   		.space	3
 4324 012c FFFFFFFF 		.word	-1
 4325 0130 2E       		.byte	46
 4326 0131 000000   		.space	3
 4327 0134 FFFFFFFF 		.word	-1
 4328 0138 2E       		.byte	46
 4329 0139 000000   		.space	3
 4330 013c FFFFFFFF 		.word	-1
 4331 0140 2E       		.byte	46
 4332 0141 000000   		.space	3
 4333 0144 FFFFFFFF 		.word	-1
 4334 0148 2E       		.byte	46
 4335 0149 000000   		.space	3
 4336 014c FFFFFFFF 		.word	-1
ARM GAS  /tmp/cc4hRDYn.s 			page 107


 4337 0150 2C       		.byte	44
 4338 0151 000000   		.space	3
 4339 0154 FFFFFFFF 		.word	-1
 4340 0158 2E       		.byte	46
 4341 0159 000000   		.space	3
 4342 015c FFFFFFFF 		.word	-1
 4343 0160 2E       		.byte	46
 4344 0161 000000   		.space	3
 4345 0164 FFFFFFFF 		.word	-1
 4346 0168 2E       		.byte	46
 4347 0169 000000   		.space	3
 4348 016c FFFFFFFF 		.word	-1
 4349 0170 2E       		.byte	46
 4350 0171 000000   		.space	3
 4351 0174 FFFFFFFF 		.word	-1
 4352              		.section	.rodata.mapping_fshift.10865,"a"
 4353              		.align	2
 4354              		.set	.LANCHOR9,. + 0
 4357              	mapping_fshift.10865:
 4358 0000 63       		.byte	99
 4359 0001 000000   		.space	3
 4360 0004 FFFFFFFF 		.word	-1
 4361 0008 22       		.byte	34
 4362 0009 000000   		.space	3
 4363 000c 03000000 		.word	3
 4364 0010 15       		.byte	21
 4365 0011 000000   		.space	3
 4366 0014 01000000 		.word	1
 4367 0018 1C       		.byte	28
 4368 0019 000000   		.space	3
 4369 001c 02000000 		.word	2
 4370 0020 13       		.byte	19
 4371 0021 000000   		.space	3
 4372 0024 01000000 		.word	1
 4373 0028 12       		.byte	18
 4374 0029 000000   		.space	3
 4375 002c 01000000 		.word	1
 4376 0030 12       		.byte	18
 4377 0031 000000   		.space	3
 4378 0034 03000000 		.word	3
 4379 0038 2D       		.byte	45
 4380 0039 000000   		.space	3
 4381 003c 00000000 		.word	0
 4382 0040 22       		.byte	34
 4383 0041 000000   		.space	3
 4384 0044 01000000 		.word	1
 4385 0048 0F       		.byte	15
 4386 0049 000000   		.space	3
 4387 004c 03000000 		.word	3
 4388 0050 01       		.byte	1
 4389 0051 000000   		.space	3
 4390 0054 02000000 		.word	2
 4391 0058 02       		.byte	2
 4392 0059 000000   		.space	3
 4393 005c 02000000 		.word	2
 4394 0060 03       		.byte	3
 4395 0061 000000   		.space	3
ARM GAS  /tmp/cc4hRDYn.s 			page 108


 4396 0064 02000000 		.word	2
 4397 0068 0C       		.byte	12
 4398 0069 000000   		.space	3
 4399 006c 01000000 		.word	1
 4400 0070 31       		.byte	49
 4401 0071 000000   		.space	3
 4402 0074 01000000 		.word	1
 4403 0078 2F       		.byte	47
 4404 0079 000000   		.space	3
 4405 007c 04000000 		.word	4
 4406 0080 2F       		.byte	47
 4407 0081 000000   		.space	3
 4408 0084 02000000 		.word	2
 4409 0088 2F       		.byte	47
 4410 0089 000000   		.space	3
 4411 008c 01000000 		.word	1
 4412 0090 18       		.byte	24
 4413 0091 000000   		.space	3
 4414 0094 00000000 		.word	0
 4415 0098 20       		.byte	32
 4416 0099 000000   		.space	3
 4417 009c 01000000 		.word	1
 4418 00a0 20       		.byte	32
 4419 00a1 000000   		.space	3
 4420 00a4 02000000 		.word	2
 4421 00a8 1C       		.byte	28
 4422 00a9 000000   		.space	3
 4423 00ac 03000000 		.word	3
 4424 00b0 2F       		.byte	47
 4425 00b1 000000   		.space	3
 4426 00b4 0C000000 		.word	12
 4427 00b8 1E       		.byte	30
 4428 00b9 000000   		.space	3
 4429 00bc 00000000 		.word	0
 4430 00c0 2F       		.byte	47
 4431 00c1 000000   		.space	3
 4432 00c4 03000000 		.word	3
 4433 00c8 04       		.byte	4
 4434 00c9 000000   		.space	3
 4435 00cc 03000000 		.word	3
 4436 00d0 2F       		.byte	47
 4437 00d1 000000   		.space	3
 4438 00d4 0A000000 		.word	10
 4439 00d8 2F       		.byte	47
 4440 00d9 000000   		.space	3
 4441 00dc 0B000000 		.word	11
 4442 00e0 2A       		.byte	42
 4443 00e1 000000   		.space	3
 4444 00e4 00000000 		.word	0
 4445 00e8 2E       		.byte	46
 4446 00e9 000000   		.space	3
 4447 00ec 00000000 		.word	0
 4448 00f0 2E       		.byte	46
 4449 00f1 000000   		.space	3
 4450 00f4 00000000 		.word	0
 4451 00f8 20       		.byte	32
 4452 00f9 000000   		.space	3
ARM GAS  /tmp/cc4hRDYn.s 			page 109


 4453 00fc 03000000 		.word	3
 4454 0100 2E       		.byte	46
 4455 0101 000000   		.space	3
 4456 0104 00000000 		.word	0
 4457 0108 24       		.byte	36
 4458 0109 000000   		.space	3
 4459 010c 03000000 		.word	3
 4460 0110 2F       		.byte	47
 4461 0111 000000   		.space	3
 4462 0114 08000000 		.word	8
 4463 0118 0D       		.byte	13
 4464 0119 000000   		.space	3
 4465 011c 01000000 		.word	1
 4466 0120 27       		.byte	39
 4467 0121 000000   		.space	3
 4468 0124 03000000 		.word	3
 4469 0128 06       		.byte	6
 4470 0129 000000   		.space	3
 4471 012c 03000000 		.word	3
 4472 0130 2E       		.byte	46
 4473 0131 000000   		.space	3
 4474 0134 00000000 		.word	0
 4475 0138 2E       		.byte	46
 4476 0139 000000   		.space	3
 4477 013c 00000000 		.word	0
 4478 0140 2E       		.byte	46
 4479 0141 000000   		.space	3
 4480 0144 00000000 		.word	0
 4481 0148 2E       		.byte	46
 4482 0149 000000   		.space	3
 4483 014c 00000000 		.word	0
 4484 0150 2E       		.byte	46
 4485 0151 000000   		.space	3
 4486 0154 00000000 		.word	0
 4487 0158 2E       		.byte	46
 4488 0159 000000   		.space	3
 4489 015c 00000000 		.word	0
 4490 0160 2E       		.byte	46
 4491 0161 000000   		.space	3
 4492 0164 00000000 		.word	0
 4493 0168 2F       		.byte	47
 4494 0169 000000   		.space	3
 4495 016c FFFFFFFF 		.word	-1
 4496 0170 2F       		.byte	47
 4497 0171 000000   		.space	3
 4498 0174 05000000 		.word	5
 4499              		.section	.rodata.mapping_gshift.10866,"a"
 4500              		.align	2
 4501              		.set	.LANCHOR12,. + 0
 4504              	mapping_gshift.10866:
 4505 0000 63       		.byte	99
 4506 0001 000000   		.space	3
 4507 0004 FFFFFFFF 		.word	-1
 4508 0008 28       		.byte	40
 4509 0009 000000   		.space	3
 4510 000c 03000000 		.word	3
 4511 0010 16       		.byte	22
ARM GAS  /tmp/cc4hRDYn.s 			page 110


 4512 0011 000000   		.space	3
 4513 0014 01000000 		.word	1
 4514 0018 1C       		.byte	28
 4515 0019 000000   		.space	3
 4516 001c 01000000 		.word	1
 4517 0020 13       		.byte	19
 4518 0021 000000   		.space	3
 4519 0024 02000000 		.word	2
 4520 0028 2E       		.byte	46
 4521 0029 000000   		.space	3
 4522 002c 00000000 		.word	0
 4523 0030 2E       		.byte	46
 4524 0031 000000   		.space	3
 4525 0034 00000000 		.word	0
 4526 0038 0C       		.byte	12
 4527 0039 000000   		.space	3
 4528 003c 02000000 		.word	2
 4529 0040 07       		.byte	7
 4530 0041 000000   		.space	3
 4531 0044 03000000 		.word	3
 4532 0048 08       		.byte	8
 4533 0049 000000   		.space	3
 4534 004c 03000000 		.word	3
 4535 0050 2F       		.byte	47
 4536 0051 000000   		.space	3
 4537 0054 04000000 		.word	4
 4538 0058 2F       		.byte	47
 4539 0059 000000   		.space	3
 4540 005c 04000000 		.word	4
 4541 0060 2F       		.byte	47
 4542 0061 000000   		.space	3
 4543 0064 04000000 		.word	4
 4544 0068 2E       		.byte	46
 4545 0069 000000   		.space	3
 4546 006c 00000000 		.word	0
 4547 0070 2F       		.byte	47
 4548 0071 000000   		.space	3
 4549 0074 06000000 		.word	6
 4550 0078 05       		.byte	5
 4551 0079 000000   		.space	3
 4552 007c 03000000 		.word	3
 4553 0080 2E       		.byte	46
 4554 0081 000000   		.space	3
 4555 0084 00000000 		.word	0
 4556 0088 2E       		.byte	46
 4557 0089 000000   		.space	3
 4558 008c 00000000 		.word	0
 4559 0090 2E       		.byte	46
 4560 0091 000000   		.space	3
 4561 0094 00000000 		.word	0
 4562 0098 2E       		.byte	46
 4563 0099 000000   		.space	3
 4564 009c 00000000 		.word	0
 4565 00a0 2E       		.byte	46
 4566 00a1 000000   		.space	3
 4567 00a4 00000000 		.word	0
 4568 00a8 1B       		.byte	27
ARM GAS  /tmp/cc4hRDYn.s 			page 111


 4569 00a9 000000   		.space	3
 4570 00ac 03000000 		.word	3
 4571 00b0 1A       		.byte	26
 4572 00b1 000000   		.space	3
 4573 00b4 03000000 		.word	3
 4574 00b8 2E       		.byte	46
 4575 00b9 000000   		.space	3
 4576 00bc 00000000 		.word	0
 4577 00c0 2E       		.byte	46
 4578 00c1 000000   		.space	3
 4579 00c4 00000000 		.word	0
 4580 00c8 0C       		.byte	12
 4581 00c9 000000   		.space	3
 4582 00cc 03000000 		.word	3
 4583 00d0 1F       		.byte	31
 4584 00d1 000000   		.space	3
 4585 00d4 03000000 		.word	3
 4586 00d8 19       		.byte	25
 4587 00d9 000000   		.space	3
 4588 00dc 03000000 		.word	3
 4589 00e0 2A       		.byte	42
 4590 00e1 000000   		.space	3
 4591 00e4 FFFFFFFF 		.word	-1
 4592 00e8 2E       		.byte	46
 4593 00e9 000000   		.space	3
 4594 00ec 00000000 		.word	0
 4595 00f0 2E       		.byte	46
 4596 00f1 000000   		.space	3
 4597 00f4 00000000 		.word	0
 4598 00f8 21       		.byte	33
 4599 00f9 000000   		.space	3
 4600 00fc 03000000 		.word	3
 4601 0100 2E       		.byte	46
 4602 0101 000000   		.space	3
 4603 0104 00000000 		.word	0
 4604 0108 24       		.byte	36
 4605 0109 000000   		.space	3
 4606 010c 00000000 		.word	0
 4607 0110 2F       		.byte	47
 4608 0111 000000   		.space	3
 4609 0114 0D000000 		.word	13
 4610 0118 2E       		.byte	46
 4611 0119 000000   		.space	3
 4612 011c 00000000 		.word	0
 4613 0120 2F       		.byte	47
 4614 0121 000000   		.space	3
 4615 0124 07000000 		.word	7
 4616 0128 2E       		.byte	46
 4617 0129 000000   		.space	3
 4618 012c 00000000 		.word	0
 4619 0130 2E       		.byte	46
 4620 0131 000000   		.space	3
 4621 0134 00000000 		.word	0
 4622 0138 2E       		.byte	46
 4623 0139 000000   		.space	3
 4624 013c 00000000 		.word	0
 4625 0140 2E       		.byte	46
ARM GAS  /tmp/cc4hRDYn.s 			page 112


 4626 0141 000000   		.space	3
 4627 0144 00000000 		.word	0
 4628 0148 2E       		.byte	46
 4629 0149 000000   		.space	3
 4630 014c 00000000 		.word	0
 4631 0150 2E       		.byte	46
 4632 0151 000000   		.space	3
 4633 0154 00000000 		.word	0
 4634 0158 2E       		.byte	46
 4635 0159 000000   		.space	3
 4636 015c 00000000 		.word	0
 4637 0160 2E       		.byte	46
 4638 0161 000000   		.space	3
 4639 0164 00000000 		.word	0
 4640 0168 2E       		.byte	46
 4641 0169 000000   		.space	3
 4642 016c 00000000 		.word	0
 4643 0170 2E       		.byte	46
 4644 0171 000000   		.space	3
 4645 0174 00000000 		.word	0
 4646              		.section	.rodata.mapping_none.10864,"a"
 4647              		.align	2
 4648              		.set	.LANCHOR8,. + 0
 4651              	mapping_none.10864:
 4652 0000 63       		.byte	99
 4653 0001 000000   		.space	3
 4654 0004 FFFFFFFF 		.word	-1
 4655 0008 00       		.byte	0
 4656 0009 000000   		.space	3
 4657 000c 00000000 		.word	0
 4658 0010 01       		.byte	1
 4659 0011 000000   		.space	3
 4660 0014 00000000 		.word	0
 4661 0018 03       		.byte	3
 4662 0019 000000   		.space	3
 4663 001c 00000000 		.word	0
 4664 0020 13       		.byte	19
 4665 0021 000000   		.space	3
 4666 0024 02000000 		.word	2
 4667 0028 12       		.byte	18
 4668 0029 000000   		.space	3
 4669 002c 02000000 		.word	2
 4670 0030 12       		.byte	18
 4671 0031 000000   		.space	3
 4672 0034 00000000 		.word	0
 4673 0038 06       		.byte	6
 4674 0039 000000   		.space	3
 4675 003c 00000000 		.word	0
 4676 0040 07       		.byte	7
 4677 0041 000000   		.space	3
 4678 0044 00000000 		.word	0
 4679 0048 08       		.byte	8
 4680 0049 000000   		.space	3
 4681 004c 00000000 		.word	0
 4682 0050 01       		.byte	1
 4683 0051 000000   		.space	3
 4684 0054 01000000 		.word	1
ARM GAS  /tmp/cc4hRDYn.s 			page 113


 4685 0058 02       		.byte	2
 4686 0059 000000   		.space	3
 4687 005c 01000000 		.word	1
 4688 0060 03       		.byte	3
 4689 0061 000000   		.space	3
 4690 0064 01000000 		.word	1
 4691 0068 0C       		.byte	12
 4692 0069 000000   		.space	3
 4693 006c 00000000 		.word	0
 4694 0070 0D       		.byte	13
 4695 0071 000000   		.space	3
 4696 0074 00000000 		.word	0
 4697 0078 0E       		.byte	14
 4698 0079 000000   		.space	3
 4699 007c 00000000 		.word	0
 4700 0080 0F       		.byte	15
 4701 0081 000000   		.space	3
 4702 0084 00000000 		.word	0
 4703 0088 10       		.byte	16
 4704 0089 000000   		.space	3
 4705 008c 00000000 		.word	0
 4706 0090 18       		.byte	24
 4707 0091 000000   		.space	3
 4708 0094 00000000 		.word	0
 4709 0098 13       		.byte	19
 4710 0099 000000   		.space	3
 4711 009c 00000000 		.word	0
 4712 00a0 14       		.byte	20
 4713 00a1 000000   		.space	3
 4714 00a4 00000000 		.word	0
 4715 00a8 15       		.byte	21
 4716 00a9 000000   		.space	3
 4717 00ac 00000000 		.word	0
 4718 00b0 16       		.byte	22
 4719 00b1 000000   		.space	3
 4720 00b4 00000000 		.word	0
 4721 00b8 1E       		.byte	30
 4722 00b9 000000   		.space	3
 4723 00bc 00000000 		.word	0
 4724 00c0 19       		.byte	25
 4725 00c1 000000   		.space	3
 4726 00c4 00000000 		.word	0
 4727 00c8 1A       		.byte	26
 4728 00c9 000000   		.space	3
 4729 00cc 00000000 		.word	0
 4730 00d0 1B       		.byte	27
 4731 00d1 000000   		.space	3
 4732 00d4 00000000 		.word	0
 4733 00d8 1C       		.byte	28
 4734 00d9 000000   		.space	3
 4735 00dc 00000000 		.word	0
 4736 00e0 29       		.byte	41
 4737 00e1 000000   		.space	3
 4738 00e4 00000000 		.word	0
 4739 00e8 1F       		.byte	31
 4740 00e9 000000   		.space	3
 4741 00ec 00000000 		.word	0
ARM GAS  /tmp/cc4hRDYn.s 			page 114


 4742 00f0 20       		.byte	32
 4743 00f1 000000   		.space	3
 4744 00f4 00000000 		.word	0
 4745 00f8 21       		.byte	33
 4746 00f9 000000   		.space	3
 4747 00fc 00000000 		.word	0
 4748 0100 22       		.byte	34
 4749 0101 000000   		.space	3
 4750 0104 00000000 		.word	0
 4751 0108 24       		.byte	36
 4752 0109 000000   		.space	3
 4753 010c 00000000 		.word	0
 4754 0110 25       		.byte	37
 4755 0111 000000   		.space	3
 4756 0114 00000000 		.word	0
 4757 0118 26       		.byte	38
 4758 0119 000000   		.space	3
 4759 011c 00000000 		.word	0
 4760 0120 27       		.byte	39
 4761 0121 000000   		.space	3
 4762 0124 00000000 		.word	0
 4763 0128 28       		.byte	40
 4764 0129 000000   		.space	3
 4765 012c 00000000 		.word	0
 4766 0130 2E       		.byte	46
 4767 0131 000000   		.space	3
 4768 0134 00000000 		.word	0
 4769 0138 2E       		.byte	46
 4770 0139 000000   		.space	3
 4771 013c 00000000 		.word	0
 4772 0140 2E       		.byte	46
 4773 0141 000000   		.space	3
 4774 0144 00000000 		.word	0
 4775 0148 2E       		.byte	46
 4776 0149 000000   		.space	3
 4777 014c 00000000 		.word	0
 4778 0150 2E       		.byte	46
 4779 0151 000000   		.space	3
 4780 0154 00000000 		.word	0
 4781 0158 2E       		.byte	46
 4782 0159 000000   		.space	3
 4783 015c 00000000 		.word	0
 4784 0160 2E       		.byte	46
 4785 0161 000000   		.space	3
 4786 0164 00000000 		.word	0
 4787 0168 2E       		.byte	46
 4788 0169 000000   		.space	3
 4789 016c 00000000 		.word	0
 4790 0170 2E       		.byte	46
 4791 0171 000000   		.space	3
 4792 0174 00000000 		.word	0
 4793              		.section	.rodata.mid_menu,"a"
 4794              		.align	2
 4797              	mid_menu:
 4798 0000 C800     		.ascii	"\310\000"
 4799              		.text
 4800              	.Letext0:
ARM GAS  /tmp/cc4hRDYn.s 			page 115


 4801              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 4802              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 4803              		.file 6 "/usr/include/newlib/sys/_types.h"
 4804              		.file 7 "/usr/include/newlib/sys/reent.h"
 4805              		.file 8 "/usr/include/newlib/sys/lock.h"
 4806              		.file 9 "/usr/include/newlib/stdlib.h"
 4807              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 4808              		.file 11 "/usr/include/newlib/ctype.h"
 4809              		.file 12 "dmcp/ff_ifc.h"
 4810              		.file 13 "dmcp/dmcp.h"
 4811              		.file 14 "src/keys.h"
 4812              		.file 15 "src/decNumber/decContext.h"
 4813              		.file 16 "src/decNumber/decNumber.h"
 4814              		.file 17 "src/decNumber/decimal64.h"
 4815              		.file 18 "src/decNumber/decimal128.h"
 4816              		.file 19 "src/xeq.h"
 4817              		.file 20 "src/data.h"
 4818              		.file 21 "src/display.h"
 4819              		.file 22 "src/consts.h"
 4820              		.file 23 "src/storage.h"
 4821              		.file 24 "src/catalogues.h"
 4822              		.file 25 "src/menu.h"
 4823              		.file 26 "/usr/include/newlib/string.h"
 4824              		.file 27 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/cc4hRDYn.s 			page 116


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/cc4hRDYn.s:18     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/cc4hRDYn.s:26     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/cc4hRDYn.s:392    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/cc4hRDYn.s:400    .text.set_menu:0000000000000000 $t
     /tmp/cc4hRDYn.s:408    .text.set_menu:0000000000000000 set_menu
     /tmp/cc4hRDYn.s:458    .text.set_menu:0000000000000024 $d
     /tmp/cc4hRDYn.s:464    .text.get_menu:0000000000000000 $t
     /tmp/cc4hRDYn.s:472    .text.get_menu:0000000000000000 get_menu
     /tmp/cc4hRDYn.s:488    .text.get_menu:0000000000000008 $d
     /tmp/cc4hRDYn.s:493    .text.set_last_menu:0000000000000000 $t
     /tmp/cc4hRDYn.s:501    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/cc4hRDYn.s:550    .text.set_last_menu:0000000000000014 $d
     /tmp/cc4hRDYn.s:556    .text.mdot:0000000000000000 $t
     /tmp/cc4hRDYn.s:564    .text.mdot:0000000000000000 mdot
     /tmp/cc4hRDYn.s:655    .text.mdot:000000000000003c $d
     /tmp/cc4hRDYn.s:660    .text.display_menu:0000000000000000 $t
     /tmp/cc4hRDYn.s:668    .text.display_menu:0000000000000000 display_menu
     /tmp/cc4hRDYn.s:907    .text.display_menu:000000000000010c $d
     /tmp/cc4hRDYn.s:915    .text.display_current_menu:0000000000000000 $t
     /tmp/cc4hRDYn.s:923    .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/cc4hRDYn.s:938    .text.display_current_menu:0000000000000008 $d
     /tmp/cc4hRDYn.s:943    .text.shutdown:0000000000000000 $t
     /tmp/cc4hRDYn.s:951    .text.shutdown:0000000000000000 shutdown
     /tmp/cc4hRDYn.s:978    .text.shutdown:0000000000000014 $d
     /tmp/cc4hRDYn.s:983    .text.is_key_pressed:0000000000000000 $t
     /tmp/cc4hRDYn.s:991    .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/cc4hRDYn.s:1014   .text.is_key_pressed:0000000000000010 $d
     /tmp/cc4hRDYn.s:1019   .text.get_key:0000000000000000 $t
     /tmp/cc4hRDYn.s:1027   .text.get_key:0000000000000000 get_key
     /tmp/cc4hRDYn.s:1042   .text.get_key:0000000000000004 $d
     /tmp/cc4hRDYn.s:1047   .text.put_key:0000000000000000 $t
     /tmp/cc4hRDYn.s:1055   .text.put_key:0000000000000000 put_key
     /tmp/cc4hRDYn.s:1072   .text.put_key:0000000000000004 $d
     /tmp/cc4hRDYn.s:1077   .text.shift_down:0000000000000000 $t
     /tmp/cc4hRDYn.s:1085   .text.shift_down:0000000000000000 shift_down
     /tmp/cc4hRDYn.s:1100   .text.start_key_timer:0000000000000000 $t
     /tmp/cc4hRDYn.s:1108   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/cc4hRDYn.s:1132   .text.start_key_timer:000000000000000c $d
     /tmp/cc4hRDYn.s:1138   .text.keyticks:0000000000000000 $t
     /tmp/cc4hRDYn.s:1146   .text.keyticks:0000000000000000 keyticks
     /tmp/cc4hRDYn.s:1177   .text.keyticks:0000000000000018 $d
     /tmp/cc4hRDYn.s:1183   .text.moveto:0000000000000000 $t
     /tmp/cc4hRDYn.s:1191   .text.moveto:0000000000000000 moveto
     /tmp/cc4hRDYn.s:1251   .text.moveto:000000000000002c $d
     /tmp/cc4hRDYn.s:1258   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/cc4hRDYn.s:1262   .text.print_debug:0000000000000000 $t
     /tmp/cc4hRDYn.s:1270   .text.print_debug:0000000000000000 print_debug
     /tmp/cc4hRDYn.s:1372   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/cc4hRDYn.s:1383   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/cc4hRDYn.s:1387   .text.print_debug2:0000000000000000 $t
     /tmp/cc4hRDYn.s:1395   .text.print_debug2:0000000000000000 print_debug2
     /tmp/cc4hRDYn.s:1497   .text.print_debug2:0000000000000064 $d
     /tmp/cc4hRDYn.s:1508   .text.do_now:0000000000000000 $t
     /tmp/cc4hRDYn.s:1516   .text.do_now:0000000000000000 do_now
ARM GAS  /tmp/cc4hRDYn.s 			page 117


     /tmp/cc4hRDYn.s:1551   .text.do_multi:0000000000000000 $t
     /tmp/cc4hRDYn.s:1559   .text.do_multi:0000000000000000 do_multi
     /tmp/cc4hRDYn.s:1590   .text.do_multi:0000000000000018 $d
     /tmp/cc4hRDYn.s:1600   .text.do_multi:0000000000000022 $t
     /tmp/cc4hRDYn.s:1865   .text.do_multi:000000000000011c $d
     /tmp/cc4hRDYn.s:1870   .text.program_main:0000000000000000 $t
     /tmp/cc4hRDYn.s:1878   .text.program_main:0000000000000000 program_main
     /tmp/cc4hRDYn.s:2360   .text.program_main:00000000000001fe $d
     /tmp/cc4hRDYn.s:2366   .text.program_main:000000000000020a $t
     /tmp/cc4hRDYn.s:2560   .text.program_main:00000000000002e8 $d
     /tmp/cc4hRDYn.s:2596   .text.program_main:0000000000000368 $t
     /tmp/cc4hRDYn.s:3176   .text.program_main:0000000000000628 $d
     /tmp/cc4hRDYn.s:3237   .bss.n_p:0000000000000000 n_p
     /tmp/cc4hRDYn.s:3305   .data.spaces:0000000000000000 spaces
     /tmp/cc4hRDYn.s:3296   .data.release:0000000000000000 release
     /tmp/cc4hRDYn.s:3269   .data.h_shift:0000000000000000 h_shift
     /tmp/cc4hRDYn.s:3260   .data.g_shift:0000000000000000 g_shift
     /tmp/cc4hRDYn.s:3251   .data.f_shift:0000000000000000 f_shift
     /tmp/cc4hRDYn.s:3278   .data.heartbeat:0000000000000000 heartbeat
     /tmp/cc4hRDYn.s:3287   .data.no_key:0000000000000000 no_key
     /tmp/cc4hRDYn.s:3312   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/cc4hRDYn.s:3208   .rodata.str1.4:0000000000000000 $d
     /tmp/cc4hRDYn.s:4797   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/cc4hRDYn.s:3213   .bss.current_menu:0000000000000000 $d
     /tmp/cc4hRDYn.s:3217   .bss.current_menu:0000000000000000 current_menu
     /tmp/cc4hRDYn.s:3220   .bss.last_menu:0000000000000000 $d
     /tmp/cc4hRDYn.s:3224   .bss.last_menu:0000000000000000 last_menu
     /tmp/cc4hRDYn.s:3227   .bss.mdots:0000000000000000 $d
     /tmp/cc4hRDYn.s:3231   .bss.mdots:0000000000000000 mdots
     /tmp/cc4hRDYn.s:3234   .bss.n_p:0000000000000000 $d
     /tmp/cc4hRDYn.s:3240   .bss.start_ticks:0000000000000000 $d
     /tmp/cc4hRDYn.s:3244   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/cc4hRDYn.s:3247   .data.f_shift:0000000000000000 $d
     /tmp/cc4hRDYn.s:3256   .data.g_shift:0000000000000000 $d
     /tmp/cc4hRDYn.s:3265   .data.h_shift:0000000000000000 $d
     /tmp/cc4hRDYn.s:3274   .data.heartbeat:0000000000000000 $d
     /tmp/cc4hRDYn.s:3283   .data.no_key:0000000000000000 $d
     /tmp/cc4hRDYn.s:3292   .data.release:0000000000000000 $d
     /tmp/cc4hRDYn.s:3301   .data.spaces:0000000000000000 $d
     /tmp/cc4hRDYn.s:3308   .rodata.MID_MENU:0000000000000000 $d
     /tmp/cc4hRDYn.s:3318   .rodata.Menus:0000000000000000 $d
     /tmp/cc4hRDYn.s:3322   .rodata.Menus:0000000000000000 Menus
     /tmp/cc4hRDYn.s:4206   .rodata.mapping_alpha.10867:0000000000000000 $d
     /tmp/cc4hRDYn.s:4210   .rodata.mapping_alpha.10867:0000000000000000 mapping_alpha.10867
     /tmp/cc4hRDYn.s:4353   .rodata.mapping_fshift.10865:0000000000000000 $d
     /tmp/cc4hRDYn.s:4357   .rodata.mapping_fshift.10865:0000000000000000 mapping_fshift.10865
     /tmp/cc4hRDYn.s:4500   .rodata.mapping_gshift.10866:0000000000000000 $d
     /tmp/cc4hRDYn.s:4504   .rodata.mapping_gshift.10866:0000000000000000 mapping_gshift.10866
     /tmp/cc4hRDYn.s:4647   .rodata.mapping_none.10864:0000000000000000 $d
     /tmp/cc4hRDYn.s:4651   .rodata.mapping_none.10864:0000000000000000 mapping_none.10864
     /tmp/cc4hRDYn.s:4794   .rodata.mid_menu:0000000000000000 $d

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
ARM GAS  /tmp/cc4hRDYn.s 			page 118


RectPolConv
pixel_length
save_ram_file
strcpy
sprintf
process_keycode_with_shift
save_prog_file
flash_backup
flash_restore
save_lib_file
load_lib_file
load_ram_file
load_prog_file
init_mem
init_RegionTab
init_34s
load_backup_file
display
get_alpha_state
cur_shift
StateWhileOn
DispMsg
JustDisplayed
Pause

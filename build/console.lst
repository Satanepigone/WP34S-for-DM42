ARM GAS  /tmp/ccZ4XUVa.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_menu_label.constprop.0:
  27              	.LVL0:
  28              	.LFB27:
  29              		.file 1 "src/menu.c"
   1:src/menu.c    **** #include <menu.h>
   2:src/menu.c    **** 
   3:src/menu.c    **** void set_menu ( int new_menu ) {
   4:src/menu.c    ****   int m = current_menu;
   5:src/menu.c    ****   if (new_menu == current_menu) {
   6:src/menu.c    ****     current_menu = default_menu;
   7:src/menu.c    ****   }
   8:src/menu.c    ****   else if (new_menu == -1) {
   9:src/menu.c    ****     current_menu = last_menu;
  10:src/menu.c    ****   }
  11:src/menu.c    ****   else {
  12:src/menu.c    ****     current_menu = new_menu;
  13:src/menu.c    ****   }
  14:src/menu.c    ****   last_menu = m;
  15:src/menu.c    **** }
  16:src/menu.c    **** 
  17:src/menu.c    **** void toggle_default_menu () {
  18:src/menu.c    ****   if (current_menu == default_menu) {
  19:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
  20:src/menu.c    ****   }
  21:src/menu.c    **** }
  22:src/menu.c    **** 
  23:src/menu.c    **** int get_menu () {
  24:src/menu.c    ****   return current_menu;
  25:src/menu.c    **** }
  26:src/menu.c    **** 
  27:src/menu.c    **** void display_current_menu () {
  28:src/menu.c    ****   display_menu (current_menu);
  29:src/menu.c    **** }
ARM GAS  /tmp/ccZ4XUVa.s 			page 2


  30:src/menu.c    **** 
  31:src/menu.c    **** void set_last_menu () {
  32:src/menu.c    ****   set_menu (last_menu);
  33:src/menu.c    **** }
  34:src/menu.c    **** 
  35:src/menu.c    **** static unsigned char mdots[200][2];
  36:src/menu.c    **** 
  37:src/menu.c    **** static const struct _menu Menus[] = {
  38:src/menu.c    ****   {
  39:src/menu.c    ****     "Blank", // 0
  40:src/menu.c    ****     { 
  41:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  42:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  43:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  44:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  45:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  46:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  47:src/menu.c    ****     }    
  48:src/menu.c    ****   },
  49:src/menu.c    ****   {
  50:src/menu.c    ****     "Clear", // 1
  51:src/menu.c    ****     { 
  52:src/menu.c    ****       { { K24, 1 }, NO_KEY, "CLProg", "" },
  53:src/menu.c    ****       { { K24, 2 }, NO_KEY, "CL\221", "" },
  54:src/menu.c    ****       { { K24, 3 }, NO_KEY, "CL X", "" },
  55:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  56:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  57:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  58:src/menu.c    ****     }    
  59:src/menu.c    ****   },
  60:src/menu.c    ****   {
  61:src/menu.c    ****     "DISP", // 2
  62:src/menu.c    ****     { 
  63:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
  64:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
  65:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
  66:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
  67:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
  68:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  69:src/menu.c    ****     }
  70:src/menu.c    ****   },
  71:src/menu.c    ****   {
  72:src/menu.c    ****     "BASE", // 3
  73:src/menu.c    ****     { 
  74:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
  75:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
  76:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
  77:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
  78:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
  79:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
  80:src/menu.c    ****     }
  81:src/menu.c    ****   },
  82:src/menu.c    ****   {
  83:src/menu.c    ****     "ANGLES", // 4
  84:src/menu.c    ****     { 
  85:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
  86:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
ARM GAS  /tmp/ccZ4XUVa.s 			page 3


  87:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
  88:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
  89:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
  90:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
  91:src/menu.c    ****     }
  92:src/menu.c    ****       
  93:src/menu.c    ****   },
  94:src/menu.c    ****   {
  95:src/menu.c    ****     "MISC", // 5
  96:src/menu.c    ****     { 
  97:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
  98:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
  99:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 100:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 101:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 102:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 103:src/menu.c    ****     }
 104:src/menu.c    ****   },
 105:src/menu.c    ****   {
 106:src/menu.c    ****     "X<>Y Key", // 6
 107:src/menu.c    ****     { 
 108:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 109:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 110:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 111:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 112:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 113:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 114:src/menu.c    ****     }    
 115:src/menu.c    ****   },
 116:src/menu.c    ****   {
 117:src/menu.c    ****     "Program", // 7
 118:src/menu.c    ****     { 
 119:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 120:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 121:src/menu.c    ****       { { K61, 3 }, NO_KEY, "Pause", "" },
 122:src/menu.c    ****       { { K30, 3 }, NO_KEY, "GTO", "" },
 123:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 124:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 125:src/menu.c    ****     }
 126:src/menu.c    ****   },
 127:src/menu.c    ****   {
 128:src/menu.c    ****     "Setup 1", // 8
 129:src/menu.c    ****     { 
 130:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 131:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 132:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 133:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 134:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 135:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 136:src/menu.c    ****     }
 137:src/menu.c    ****   },
 138:src/menu.c    ****   {
 139:src/menu.c    ****     "Arrow", // 9
 140:src/menu.c    ****     { 
 141:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "Bin", "DEG" },
 142:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "Oct", "RAD" },
 143:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "Dec", "Grad" },
ARM GAS  /tmp/ccZ4XUVa.s 			page 4


 144:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "Hex", "2HMS" },
 145:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS2" },
 146:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 147:src/menu.c    ****     }
 148:src/menu.c    ****   },
 149:src/menu.c    ****   {
 150:src/menu.c    ****     "Flags", // 10
 151:src/menu.c    ****     { 
 152:src/menu.c    ****       { { K50, 1 }, NO_KEY, "SF_", "" },
 153:src/menu.c    ****       { { K50, 2 }, NO_KEY, "CF_", "" },
 154:src/menu.c    ****       { { K51, 1 }, NO_KEY, "x=?", "" },
 155:src/menu.c    ****       { { K51, 2 }, NO_KEY, "x\013?", "" },
 156:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 157:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 158:src/menu.c    ****     }
 159:src/menu.c    ****   },
 160:src/menu.c    ****   {
 161:src/menu.c    ****     "Probability", // 11
 162:src/menu.c    ****     { 
 163:src/menu.c    ****       { { K40, 3 }, { K41, 1 }, "Fact!", "\224" },
 164:src/menu.c    ****       { { K40, 1 }, { K41, 2 }, "Cy,x", "\224\235" },
 165:src/menu.c    ****       { { K40, 2 }, NO_KEY, "Py,x", "" },
 166:src/menu.c    ****       { { K12, 1 }, NO_KEY, "RAN#", "" },
 167:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 168:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 169:src/menu.c    ****     }
 170:src/menu.c    ****   },
 171:src/menu.c    ****   {
 172:src/menu.c    ****     "Statistics", // 12
 173:src/menu.c    ****     { 
 174:src/menu.c    ****       { { K42, 1 }, { K43, 3 }, "Xbar", "SUMS" },
 175:src/menu.c    ****       { { K43, 1 }, NO_KEY, "Yhat", "" },
 176:src/menu.c    ****       { { K42, 2 }, NO_KEY, "s", "" },
 177:src/menu.c    ****       { { K43, 2 }, NO_KEY, "r", "" },
 178:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 179:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 180:src/menu.c    ****     }
 181:src/menu.c    ****   },
 182:src/menu.c    ****   {
 183:src/menu.c    ****     "Setup 2", // 13
 184:src/menu.c    ****     { 
 185:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 186:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 187:src/menu.c    ****       { { K_MULTI, SVPRG }, NO_KEY, "SvCPRG", "" },
 188:src/menu.c    ****       { { K_MULTI, LDPRG }, NO_KEY, "LdPRG", "" },
 189:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 190:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 191:src/menu.c    ****     }
 192:src/menu.c    ****   },
 193:src/menu.c    ****   {
 194:src/menu.c    ****     "Integ/Sum/Prod", // 14
 195:src/menu.c    ****     { 
 196:src/menu.c    ****       { { K52, 1 }, NO_KEY, "SLV", "" },
 197:src/menu.c    ****       { { K52, 2 }, NO_KEY, "\004 dx", "" },
 198:src/menu.c    ****       { { K53, 1 }, NO_KEY, "SUM", "" },
 199:src/menu.c    ****       { { K53, 2 }, NO_KEY, "PROD", "" },
 200:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
ARM GAS  /tmp/ccZ4XUVa.s 			page 5


 201:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 202:src/menu.c    ****     }
 203:src/menu.c    ****   },
 204:src/menu.c    ****   {
 205:src/menu.c    ****     "Blank with A-D", // 15
 206:src/menu.c    ****     { 
 207:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 208:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 209:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 210:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 211:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 212:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 213:src/menu.c    ****     }    
 214:src/menu.c    ****   },
 215:src/menu.c    **** };  
 216:src/menu.c    **** 
 217:src/menu.c    **** /* This code is the set_status_sized code with small changes
 218:src/menu.c    ****  * and non-DM42 code removed.
 219:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 220:src/menu.c    ****  */
 221:src/menu.c    **** #define MENU_WIDTH 32
 222:src/menu.c    **** 
 223:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  30              		.loc 1 223 13 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 544
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 224:src/menu.c    ****   // dotcol is the number of the starting dot column
 225:src/menu.c    ****   // shifted is 1 if shifted
 226:src/menu.c    ****   unsigned short int posns[257];
  34              		.loc 1 226 3 view .LVU1
 227:src/menu.c    **** 
 228:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 229:src/menu.c    ****   int posns_state = 255;
  35              		.loc 1 229 3 view .LVU2
 230:src/menu.c    **** 
 231:src/menu.c    ****   int x = dotcol;
  36              		.loc 1 231 3 view .LVU3
 223:src/menu.c    ****   // dotcol is the number of the starting dot column
  37              		.loc 1 223 13 is_stmt 0 view .LVU4
  38 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  39              		.cfi_def_cfa_offset 36
  40              		.cfi_offset 4, -36
  41              		.cfi_offset 5, -32
  42              		.cfi_offset 6, -28
  43              		.cfi_offset 7, -24
  44              		.cfi_offset 8, -20
  45              		.cfi_offset 9, -16
  46              		.cfi_offset 10, -12
  47              		.cfi_offset 11, -8
  48              		.cfi_offset 14, -4
  49 0004 ADF5097D 		sub	sp, sp, #548
  50              		.cfi_def_cfa_offset 584
 223:src/menu.c    ****   // dotcol is the number of the starting dot column
  51              		.loc 1 223 13 view .LVU5
  52 0008 CDE90102 		strd	r0, r2, [sp, #4]
 232:src/menu.c    ****   int i, j, xmax;
ARM GAS  /tmp/ccZ4XUVa.s 			page 6


 233:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  53              		.loc 1 233 18 view .LVU6
  54 000c 0029     		cmp	r1, #0
  55 000e B4BF     		ite	lt
  56 0010 01F11F03 		addlt	r3, r1, #31
  57 0014 0B46     		movge	r3, r1
 234:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 235:src/menu.c    **** 
 236:src/menu.c    ****   forceDispPlot=0;
  58              		.loc 1 236 16 view .LVU7
  59 0016 4848     		ldr	r0, .L36
  60              	.LVL1:
 223:src/menu.c    ****   // dotcol is the number of the starting dot column
  61              		.loc 1 223 13 view .LVU8
  62 0018 0F46     		mov	r7, r1
  63              	.LVL2:
 232:src/menu.c    ****   int i, j, xmax;
  64              		.loc 1 232 3 is_stmt 1 view .LVU9
 233:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  65              		.loc 1 233 3 view .LVU10
 237:src/menu.c    **** 
 238:src/menu.c    **** #ifdef RP_PREFIX
 239:src/menu.c    ****   RectPolConv = 0;
  66              		.loc 1 239 15 is_stmt 0 view .LVU11
  67 001a 4849     		ldr	r1, .L36+4
  68              	.LVL3:
 236:src/menu.c    **** 
  69              		.loc 1 236 16 view .LVU12
  70 001c 0022     		movs	r2, #0
  71              	.LVL4:
 236:src/menu.c    **** 
  72              		.loc 1 236 16 view .LVU13
  73 001e 0270     		strb	r2, [r0]
  74              		.loc 1 239 15 view .LVU14
  75 0020 0A60     		str	r2, [r1]
 240:src/menu.c    **** #endif
 241:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
  76              		.loc 1 241 10 view .LVU15
  77 0022 019A     		ldr	r2, [sp, #4]
  78 0024 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 233:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  79              		.loc 1 233 30 view .LVU16
  80 0026 23F01F03 		bic	r3, r3, #31
 233:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  81              		.loc 1 233 8 view .LVU17
  82 002a 03F12009 		add	r9, r3, #32
  83              	.LVL5:
 234:src/menu.c    **** 
  84              		.loc 1 234 3 is_stmt 1 view .LVU18
 236:src/menu.c    **** 
  85              		.loc 1 236 3 view .LVU19
 239:src/menu.c    **** #endif
  86              		.loc 1 239 3 view .LVU20
  87              		.loc 1 241 3 view .LVU21
  88              		.loc 1 241 9 view .LVU22
  89 002e 002D     		cmp	r5, #0
  90 0030 78D0     		beq	.L1
ARM GAS  /tmp/ccZ4XUVa.s 			page 7


  91              		.loc 1 241 23 is_stmt 0 view .LVU23
  92 0032 4F45     		cmp	r7, r9
  93 0034 76DC     		bgt	.L1
  94              	.LBB39:
 242:src/menu.c    ****     int c;
 243:src/menu.c    ****     int width;
 244:src/menu.c    ****     unsigned char cmap[6];
 245:src/menu.c    **** 
 246:src/menu.c    ****     int real_width;
 247:src/menu.c    ****     int current_smallp;
 248:src/menu.c    **** 
 249:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 250:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 251:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 252:src/menu.c    ****     //           01 -> (not used)
 253:src/menu.c    ****     //           10 -> use big font
 254:src/menu.c    ****     //           11 -> use small font
 255:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 256:src/menu.c    ****     if (str[0] == '\007') {
  95              		.loc 1 256 8 view .LVU24
  96 0036 072D     		cmp	r5, #7
  97              	.LBE39:
 229:src/menu.c    **** 
  98              		.loc 1 229 7 view .LVU25
  99 0038 4FF0FF04 		mov	r4, #255
 100              	.LVL6:
 101              	.LBB56:
 242:src/menu.c    ****     int c;
 102              		.loc 1 242 5 is_stmt 1 view .LVU26
 243:src/menu.c    ****     unsigned char cmap[6];
 103              		.loc 1 243 5 view .LVU27
 244:src/menu.c    **** 
 104              		.loc 1 244 5 view .LVU28
 246:src/menu.c    ****     int current_smallp;
 105              		.loc 1 246 5 view .LVU29
 247:src/menu.c    **** 
 106              		.loc 1 247 5 view .LVU30
 107              		.loc 1 256 5 view .LVU31
 257:src/menu.c    ****       width = str[1] & 0x1F;
 258:src/menu.c    ****       switch (str[1] & 0x60) {
 259:src/menu.c    ****       default:
 260:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 261:src/menu.c    **** 	break;
 262:src/menu.c    ****       case 0x40:	current_smallp = 0;
 263:src/menu.c    **** 	break;
 264:src/menu.c    ****       case 0x60:	current_smallp = 1;
 108              		.loc 1 264 33 is_stmt 0 view .LVU32
 109 003c 4FF0010A 		mov	r10, #1
 256:src/menu.c    ****       width = str[1] & 0x1F;
 110              		.loc 1 256 8 view .LVU33
 111 0040 64D1     		bne	.L5
 112              	.LVL7:
 113              	.L34:
 257:src/menu.c    ****       width = str[1] & 0x1F;
 114              		.loc 1 257 7 is_stmt 1 view .LVU34
 257:src/menu.c    ****       width = str[1] & 0x1F;
 115              		.loc 1 257 18 is_stmt 0 view .LVU35
ARM GAS  /tmp/ccZ4XUVa.s 			page 8


 116 0042 019B     		ldr	r3, [sp, #4]
 117 0044 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 118 0046 06F06003 		and	r3, r6, #96
 258:src/menu.c    ****       default:
 119              		.loc 1 258 7 view .LVU36
 120 004a 402B     		cmp	r3, #64
 257:src/menu.c    ****       width = str[1] & 0x1F;
 121              		.loc 1 257 13 view .LVU37
 122 004c 06F01F06 		and	r6, r6, #31
 123              	.LVL8:
 258:src/menu.c    ****       default:
 124              		.loc 1 258 7 is_stmt 1 view .LVU38
 125 0050 6CD0     		beq	.L28
 126 0052 602B     		cmp	r3, #96
 127 0054 6AD1     		bne	.L28
 128              		.loc 1 264 18 view .LVU39
 129              	.LVL9:
 265:src/menu.c    **** 	break;
 130              		.loc 1 265 2 view .LVU40
 266:src/menu.c    ****       }
 267:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 131              		.loc 1 267 7 view .LVU41
 132              		.loc 1 267 11 is_stmt 0 view .LVU42
 133 0056 019B     		ldr	r3, [sp, #4]
 134 0058 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 264:src/menu.c    **** 	break;
 135              		.loc 1 264 33 view .LVU43
 136 005a 0123     		movs	r3, #1
 137 005c 0093     		str	r3, [sp]
 138 005e 00F58075 		add	r5, r0, #256
 139              	.LVL10:
 140              	.L9:
 268:src/menu.c    ****       str += 3;
 141              		.loc 1 268 7 is_stmt 1 view .LVU44
 269:src/menu.c    **** 
 270:src/menu.c    ****       real_width = charlengths(c);
 142              		.loc 1 270 20 is_stmt 0 view .LVU45
 143 0062 2846     		mov	r0, r5
 144 0064 FFF7FEFF 		bl	charlengths
 145              	.LVL11:
 268:src/menu.c    ****       str += 3;
 146              		.loc 1 268 11 view .LVU46
 147 0068 019B     		ldr	r3, [sp, #4]
 148 006a 0333     		adds	r3, r3, #3
 149 006c 0193     		str	r3, [sp, #4]
 150              	.LVL12:
 151              		.loc 1 270 7 is_stmt 1 view .LVU47
 271:src/menu.c    ****     } else {
 272:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 273:src/menu.c    ****       real_width = width = charlengths(c);
 274:src/menu.c    ****       current_smallp = smallp;
 275:src/menu.c    ****     }
 276:src/menu.c    **** 
 277:src/menu.c    ****     if (x + real_width > xmax)
 152              		.loc 1 277 5 view .LVU48
 153              		.loc 1 277 11 is_stmt 0 view .LVU49
 154 006e C319     		adds	r3, r0, r7
ARM GAS  /tmp/ccZ4XUVa.s 			page 9


 155              	.LVL13:
 156              		.loc 1 277 8 view .LVU50
 157 0070 9945     		cmp	r9, r3
 158 0072 57DB     		blt	.L1
 159              	.L35:
 278:src/menu.c    ****       break;
 279:src/menu.c    **** 
 280:src/menu.c    ****     if (posns_state != current_smallp) {
 160              		.loc 1 280 5 is_stmt 1 view .LVU51
 161              		.loc 1 280 8 is_stmt 0 view .LVU52
 162 0074 009B     		ldr	r3, [sp]
 163 0076 A342     		cmp	r3, r4
 281:src/menu.c    ****       findlengths(posns, current_smallp);
 164              		.loc 1 281 7 view .LVU53
 165 0078 07AB     		add	r3, sp, #28
 280:src/menu.c    ****       findlengths(posns, current_smallp);
 166              		.loc 1 280 8 view .LVU54
 167 007a 05D0     		beq	.L12
 168              		.loc 1 281 7 is_stmt 1 view .LVU55
 169 007c 1846     		mov	r0, r3
 170              	.LVL14:
 171              		.loc 1 281 7 is_stmt 0 view .LVU56
 172 007e 0099     		ldr	r1, [sp]
 173 0080 0393     		str	r3, [sp, #12]
 174 0082 FFF7FEFF 		bl	findlengths
 175              	.LVL15:
 176 0086 039B     		ldr	r3, [sp, #12]
 282:src/menu.c    ****       posns_state = current_smallp;
 177              		.loc 1 282 7 is_stmt 1 view .LVU57
 178              	.LVL16:
 179              	.L12:
 283:src/menu.c    ****     }
 284:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 180              		.loc 1 284 5 view .LVU58
 181 0088 009A     		ldr	r2, [sp]
 182 008a 2846     		mov	r0, r5
 183 008c 05A9     		add	r1, sp, #20
 184 008e FFF7FEFF 		bl	unpackchar
 185              	.LVL17:
 285:src/menu.c    **** 
 286:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 186              		.loc 1 286 5 view .LVU59
 187              		.loc 1 286 15 view .LVU60
 188 0092 029B     		ldr	r3, [sp, #8]
 189 0094 03EB4704 		add	r4, r3, r7, lsl #1
 190 0098 294B     		ldr	r3, .L36+8
 191 009a 0DF1140B 		add	fp, sp, #20
 192 009e 1C44     		add	r4, r4, r3
 284:src/menu.c    **** 
 193              		.loc 1 284 5 is_stmt 0 view .LVU61
 194 00a0 4FF0050E 		mov	lr, #5
 195 00a4 A9EB0705 		sub	r5, r9, r7
 196              	.LVL18:
 197              	.L13:
 287:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 198              		.loc 1 287 17 is_stmt 1 view .LVU62
 199              		.loc 1 287 7 is_stmt 0 view .LVU63
ARM GAS  /tmp/ccZ4XUVa.s 			page 10


 200 00a8 002E     		cmp	r6, #0
 201 00aa 1FDD     		ble	.L19
 288:src/menu.c    **** 	if (x+j >= xmax)
 202              		.loc 1 288 2 is_stmt 1 view .LVU64
 203              		.loc 1 288 5 is_stmt 0 view .LVU65
 204 00ac B945     		cmp	r9, r7
 205 00ae 1DDD     		ble	.L19
 206              	.LBB40:
 207              	.LBB41:
 208              	.LBB42:
 209              	.LBB43:
 289:src/menu.c    **** 	  break;
 290:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 291:src/menu.c    ****       }
 292:src/menu.c    ****     }
 293:src/menu.c    ****     x += width;
 294:src/menu.c    ****   }
 295:src/menu.c    **** }
 296:src/menu.c    **** 
 297:src/menu.c    **** 
 298:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 299:src/menu.c    **** 
 300:src/menu.c    **** int pixel_length(const char *s, int smallp)
 301:src/menu.c    **** {
 302:src/menu.c    ****   int len = 0;
 303:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 304:src/menu.c    ****   while (*s != '\0') {
 305:src/menu.c    ****     if (s[0] == '\007') {
 306:src/menu.c    ****       len += s[1] & 0x1F;
 307:src/menu.c    ****       s += 3;
 308:src/menu.c    ****       continue;
 309:src/menu.c    ****     }
 310:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 311:src/menu.c    ****   }
 312:src/menu.c    ****   return len;
 313:src/menu.c    **** }
 314:src/menu.c    **** */
 315:src/menu.c    **** 
 316:src/menu.c    **** 
 317:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 318:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 319:src/menu.c    ****   if (on) {
 320:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 321:src/menu.c    ****   }
 322:src/menu.c    ****   else {
 323:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 210              		.loc 1 323 25 view .LVU66
 211 00b0 0AFA0EFC 		lsl	ip, r10, lr
 212              		.loc 1 323 17 view .LVU67
 213 00b4 4FFA8CFC 		sxtb	ip, ip
 214              	.LBE43:
 215              	.LBE42:
 216              	.LBE41:
 217              	.LBE40:
 290:src/menu.c    ****       }
 218              		.loc 1 290 31 view .LVU68
 219 00b8 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
ARM GAS  /tmp/ccZ4XUVa.s 			page 11


 220              	.LBB53:
 221              	.LBB50:
 222              	.LBB47:
 223              	.LBB44:
 224              		.loc 1 323 17 view .LVU69
 225 00bc 6FEA0C08 		mvn	r8, ip
 226              	.LBE44:
 227              	.LBE47:
 228              	.LBE50:
 229              	.LBE53:
 287:src/menu.c    **** 	if (x+j >= xmax)
 230              		.loc 1 287 13 view .LVU70
 231 00c0 0023     		movs	r3, #0
 232 00c2 01E0     		b	.L14
 233              	.LVL19:
 234              	.L18:
 288:src/menu.c    **** 	  break;
 235              		.loc 1 288 5 view .LVU71
 236 00c4 9D42     		cmp	r5, r3
 237 00c6 11D0     		beq	.L19
 238              	.LVL20:
 239              	.L14:
 290:src/menu.c    ****       }
 240              		.loc 1 290 2 is_stmt 1 view .LVU72
 241              	.LBB54:
 242              	.LBI40:
 317:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 243              		.loc 1 317 6 view .LVU73
 244              	.LBB51:
 318:src/menu.c    ****   if (on) {
 245              		.loc 1 318 3 view .LVU74
 246              	.LBB48:
 247              	.LBI42:
 317:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 248              		.loc 1 317 6 view .LVU75
 249              	.LBB45:
 319:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 250              		.loc 1 319 3 view .LVU76
 251              	.LBE45:
 252              	.LBE48:
 318:src/menu.c    ****   if (on) {
 253              		.loc 1 318 6 is_stmt 0 view .LVU77
 254 00c8 DA19     		adds	r2, r3, r7
 255              	.LVL21:
 318:src/menu.c    ****   if (on) {
 256              		.loc 1 318 6 view .LVU78
 257 00ca C72A     		cmp	r2, #199
 258              	.LBE51:
 259              	.LBE54:
 290:src/menu.c    ****       }
 260              		.loc 1 290 46 view .LVU79
 261 00cc 40FA03F1 		asr	r1, r0, r3
 262              	.LBB55:
 263              	.LBB52:
 318:src/menu.c    ****   if (on) {
 264              		.loc 1 318 6 view .LVU80
 265 00d0 09D8     		bhi	.L16
ARM GAS  /tmp/ccZ4XUVa.s 			page 12


 266              	.LBB49:
 267              	.LBB46:
 320:src/menu.c    ****   }
 268              		.loc 1 320 5 is_stmt 1 view .LVU81
 269              		.loc 1 323 5 view .LVU82
 320:src/menu.c    ****   }
 270              		.loc 1 320 17 is_stmt 0 view .LVU83
 271 00d2 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 272              	.LVL22:
 319:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 273              		.loc 1 319 6 view .LVU84
 274 00d6 C907     		lsls	r1, r1, #31
 320:src/menu.c    ****   }
 275              		.loc 1 320 17 view .LVU85
 276 00d8 4CBF     		ite	mi
 277 00da 4CEA0202 		orrmi	r2, ip, r2
 278              		.loc 1 323 17 view .LVU86
 279 00de 08EA0202 		andpl	r2, r8, r2
 280 00e2 04F81320 		strb	r2, [r4, r3, lsl #1]
 281              	.L16:
 282              	.LBE46:
 283              	.LBE49:
 284              	.LBE52:
 285              	.LBE55:
 288:src/menu.c    **** 	  break;
 286              		.loc 1 288 2 is_stmt 1 view .LVU87
 287              	.LVL23:
 287:src/menu.c    **** 	if (x+j >= xmax)
 288              		.loc 1 287 26 view .LVU88
 287:src/menu.c    **** 	if (x+j >= xmax)
 289              		.loc 1 287 27 is_stmt 0 view .LVU89
 290 00e6 0133     		adds	r3, r3, #1
 291              	.LVL24:
 287:src/menu.c    **** 	if (x+j >= xmax)
 292              		.loc 1 287 17 is_stmt 1 view .LVU90
 287:src/menu.c    **** 	if (x+j >= xmax)
 293              		.loc 1 287 7 is_stmt 0 view .LVU91
 294 00e8 B342     		cmp	r3, r6
 295 00ea EBD1     		bne	.L18
 296              	.LVL25:
 297              	.L19:
 286:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 298              		.loc 1 286 20 is_stmt 1 view .LVU92
 286:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 299              		.loc 1 286 15 view .LVU93
 300 00ec 0EF1FF3E 		add	lr, lr, #-1
 286:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 301              		.loc 1 286 5 is_stmt 0 view .LVU94
 302 00f0 BEF1FF3F 		cmp	lr, #-1
 303 00f4 0BF1010B 		add	fp, fp, #1
 304              	.LVL26:
 286:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 305              		.loc 1 286 5 view .LVU95
 306 00f8 D6D1     		bne	.L13
 293:src/menu.c    ****   }
 307              		.loc 1 293 5 is_stmt 1 view .LVU96
 308              	.LBE56:
ARM GAS  /tmp/ccZ4XUVa.s 			page 13


 241:src/menu.c    ****     int c;
 309              		.loc 1 241 10 is_stmt 0 view .LVU97
 310 00fa 019B     		ldr	r3, [sp, #4]
 311 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 312              	.LBB57:
 293:src/menu.c    ****   }
 313              		.loc 1 293 7 view .LVU98
 314 00fe 3744     		add	r7, r7, r6
 315              	.LVL27:
 293:src/menu.c    ****   }
 316              		.loc 1 293 7 view .LVU99
 317              	.LBE57:
 241:src/menu.c    ****     int c;
 318              		.loc 1 241 9 is_stmt 1 view .LVU100
 319 0100 85B1     		cbz	r5, .L1
 241:src/menu.c    ****     int c;
 320              		.loc 1 241 23 is_stmt 0 view .LVU101
 321 0102 B945     		cmp	r9, r7
 322 0104 0EDB     		blt	.L1
 323              	.LBB58:
 256:src/menu.c    ****       width = str[1] & 0x1F;
 324              		.loc 1 256 8 view .LVU102
 325 0106 072D     		cmp	r5, #7
 326              	.LBE58:
 327 0108 009C     		ldr	r4, [sp]
 328              	.LBB59:
 242:src/menu.c    ****     int width;
 329              		.loc 1 242 5 is_stmt 1 view .LVU103
 243:src/menu.c    ****     unsigned char cmap[6];
 330              		.loc 1 243 5 view .LVU104
 244:src/menu.c    **** 
 331              		.loc 1 244 5 view .LVU105
 246:src/menu.c    ****     int current_smallp;
 332              		.loc 1 246 5 view .LVU106
 247:src/menu.c    **** 
 333              		.loc 1 247 5 view .LVU107
 256:src/menu.c    ****       width = str[1] & 0x1F;
 334              		.loc 1 256 5 view .LVU108
 256:src/menu.c    ****       width = str[1] & 0x1F;
 335              		.loc 1 256 8 is_stmt 0 view .LVU109
 336 010a 9AD0     		beq	.L34
 337              	.LVL28:
 338              	.L5:
 272:src/menu.c    ****       real_width = width = charlengths(c);
 339              		.loc 1 272 7 is_stmt 1 view .LVU110
 273:src/menu.c    ****       current_smallp = smallp;
 340              		.loc 1 273 28 is_stmt 0 view .LVU111
 341 010c 2846     		mov	r0, r5
 342 010e FFF7FEFF 		bl	charlengths
 343              	.LVL29:
 272:src/menu.c    ****       real_width = width = charlengths(c);
 344              		.loc 1 272 31 view .LVU112
 345 0112 019B     		ldr	r3, [sp, #4]
 346 0114 0133     		adds	r3, r3, #1
 347 0116 0193     		str	r3, [sp, #4]
 348              	.LVL30:
 273:src/menu.c    ****       current_smallp = smallp;
ARM GAS  /tmp/ccZ4XUVa.s 			page 14


 349              		.loc 1 273 7 is_stmt 1 view .LVU113
 274:src/menu.c    ****     }
 350              		.loc 1 274 7 view .LVU114
 274:src/menu.c    ****     }
 351              		.loc 1 274 22 is_stmt 0 view .LVU115
 352 0118 0023     		movs	r3, #0
 353              	.LVL31:
 274:src/menu.c    ****     }
 354              		.loc 1 274 22 view .LVU116
 355 011a 0093     		str	r3, [sp]
 356              	.LVL32:
 277:src/menu.c    ****       break;
 357              		.loc 1 277 11 view .LVU117
 358 011c C319     		adds	r3, r0, r7
 359              	.LVL33:
 277:src/menu.c    ****       break;
 360              		.loc 1 277 8 view .LVU118
 361 011e 9945     		cmp	r9, r3
 273:src/menu.c    ****       current_smallp = smallp;
 362              		.loc 1 273 28 view .LVU119
 363 0120 0646     		mov	r6, r0
 277:src/menu.c    ****       break;
 364              		.loc 1 277 5 is_stmt 1 view .LVU120
 277:src/menu.c    ****       break;
 365              		.loc 1 277 8 is_stmt 0 view .LVU121
 366 0122 A7DA     		bge	.L35
 367              	.LVL34:
 368              	.L1:
 277:src/menu.c    ****       break;
 369              		.loc 1 277 8 view .LVU122
 370              	.LBE59:
 295:src/menu.c    **** 
 371              		.loc 1 295 1 view .LVU123
 372 0124 0DF5097D 		add	sp, sp, #548
 373              		.cfi_remember_state
 374              		.cfi_def_cfa_offset 36
 375              		@ sp needed
 376 0128 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 377              	.LVL35:
 378              	.L28:
 379              		.cfi_restore_state
 380              	.LBB60:
 267:src/menu.c    ****       str += 3;
 381              		.loc 1 267 7 is_stmt 1 view .LVU124
 267:src/menu.c    ****       str += 3;
 382              		.loc 1 267 11 is_stmt 0 view .LVU125
 383 012c 019B     		ldr	r3, [sp, #4]
 384 012e 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 260:src/menu.c    **** 	break;
 385              		.loc 1 260 33 view .LVU126
 386 0130 0023     		movs	r3, #0
 387 0132 0093     		str	r3, [sp]
 388 0134 95E7     		b	.L9
 389              	.L37:
 390 0136 00BF     		.align	2
 391              	.L36:
 392 0138 00000000 		.word	forceDispPlot
ARM GAS  /tmp/ccZ4XUVa.s 			page 15


 393 013c 00000000 		.word	RectPolConv
 394 0140 00000000 		.word	.LANCHOR0
 395              	.LBE60:
 396              		.cfi_endproc
 397              	.LFE27:
 399              		.section	.text.set_menu,"ax",%progbits
 400              		.align	1
 401              		.p2align 2,,3
 402              		.global	set_menu
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu fpv4-sp-d16
 408              	set_menu:
 409              	.LVL36:
 410              	.LFB3:
   3:src/menu.c    ****   int m = current_menu;
 411              		.loc 1 3 32 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              		@ link register save eliminated.
   4:src/menu.c    ****   if (new_menu == current_menu) {
 416              		.loc 1 4 3 view .LVU128
   4:src/menu.c    ****   if (new_menu == current_menu) {
 417              		.loc 1 4 7 is_stmt 0 view .LVU129
 418 0000 084A     		ldr	r2, .L43
 419 0002 1368     		ldr	r3, [r2]
 420              	.LVL37:
   5:src/menu.c    ****     current_menu = default_menu;
 421              		.loc 1 5 3 is_stmt 1 view .LVU130
   5:src/menu.c    ****     current_menu = default_menu;
 422              		.loc 1 5 6 is_stmt 0 view .LVU131
 423 0004 8342     		cmp	r3, r0
 424 0006 07D0     		beq	.L42
   8:src/menu.c    ****     current_menu = last_menu;
 425              		.loc 1 8 8 is_stmt 1 view .LVU132
   9:src/menu.c    ****   }
 426              		.loc 1 9 18 is_stmt 0 view .LVU133
 427 0008 0749     		ldr	r1, .L43+4
   8:src/menu.c    ****     current_menu = last_menu;
 428              		.loc 1 8 11 view .LVU134
 429 000a B0F1FF3F 		cmp	r0, #-1
   9:src/menu.c    ****   }
 430              		.loc 1 9 5 is_stmt 1 view .LVU135
   9:src/menu.c    ****   }
 431              		.loc 1 9 18 is_stmt 0 view .LVU136
 432 000e 08BF     		it	eq
 433 0010 0868     		ldreq	r0, [r1]
 434              	.LVL38:
  12:src/menu.c    ****   }
 435              		.loc 1 12 5 is_stmt 1 view .LVU137
  12:src/menu.c    ****   }
 436              		.loc 1 12 18 is_stmt 0 view .LVU138
 437 0012 1060     		str	r0, [r2]
  14:src/menu.c    **** }
 438              		.loc 1 14 3 is_stmt 1 view .LVU139
ARM GAS  /tmp/ccZ4XUVa.s 			page 16


  14:src/menu.c    **** }
 439              		.loc 1 14 13 is_stmt 0 view .LVU140
 440 0014 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 441              		.loc 1 15 1 view .LVU141
 442 0016 7047     		bx	lr
 443              	.LVL39:
 444              	.L42:
   6:src/menu.c    ****   }
 445              		.loc 1 6 5 is_stmt 1 view .LVU142
   6:src/menu.c    ****   }
 446              		.loc 1 6 18 is_stmt 0 view .LVU143
 447 0018 0448     		ldr	r0, .L43+8
 448              	.LVL40:
   6:src/menu.c    ****   }
 449              		.loc 1 6 18 view .LVU144
 450 001a 0349     		ldr	r1, .L43+4
 451 001c 0068     		ldr	r0, [r0]
 452 001e 1060     		str	r0, [r2]
  14:src/menu.c    **** }
 453              		.loc 1 14 3 is_stmt 1 view .LVU145
  14:src/menu.c    **** }
 454              		.loc 1 14 13 is_stmt 0 view .LVU146
 455 0020 0B60     		str	r3, [r1]
  15:src/menu.c    **** 
 456              		.loc 1 15 1 view .LVU147
 457 0022 7047     		bx	lr
 458              	.L44:
 459              		.align	2
 460              	.L43:
 461 0024 00000000 		.word	.LANCHOR1
 462 0028 00000000 		.word	.LANCHOR3
 463 002c 00000000 		.word	.LANCHOR2
 464              		.cfi_endproc
 465              	.LFE3:
 467              		.section	.text.toggle_default_menu,"ax",%progbits
 468              		.align	1
 469              		.p2align 2,,3
 470              		.global	toggle_default_menu
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 474              		.fpu fpv4-sp-d16
 476              	toggle_default_menu:
 477              	.LFB4:
  17:src/menu.c    ****   if (current_menu == default_menu) {
 478              		.loc 1 17 29 is_stmt 1 view -0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 0
 481              		@ frame_needed = 0, uses_anonymous_args = 0
 482              		@ link register save eliminated.
  18:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 483              		.loc 1 18 3 view .LVU149
  18:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 484              		.loc 1 18 20 is_stmt 0 view .LVU150
 485 0000 0549     		ldr	r1, .L47
 486 0002 064A     		ldr	r2, .L47+4
ARM GAS  /tmp/ccZ4XUVa.s 			page 17


 487 0004 0868     		ldr	r0, [r1]
  18:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 488              		.loc 1 18 6 view .LVU151
 489 0006 1368     		ldr	r3, [r2]
 490 0008 8342     		cmp	r3, r0
 491 000a 03D1     		bne	.L45
  19:src/menu.c    ****   }
 492              		.loc 1 19 5 is_stmt 1 view .LVU152
  19:src/menu.c    ****   }
 493              		.loc 1 19 38 is_stmt 0 view .LVU153
 494 000c C3F10F03 		rsb	r3, r3, #15
  19:src/menu.c    ****   }
 495              		.loc 1 19 33 view .LVU154
 496 0010 0B60     		str	r3, [r1]
  19:src/menu.c    ****   }
 497              		.loc 1 19 18 view .LVU155
 498 0012 1360     		str	r3, [r2]
 499              	.L45:
  21:src/menu.c    **** 
 500              		.loc 1 21 1 view .LVU156
 501 0014 7047     		bx	lr
 502              	.L48:
 503 0016 00BF     		.align	2
 504              	.L47:
 505 0018 00000000 		.word	.LANCHOR2
 506 001c 00000000 		.word	.LANCHOR1
 507              		.cfi_endproc
 508              	.LFE4:
 510              		.section	.text.get_menu,"ax",%progbits
 511              		.align	1
 512              		.p2align 2,,3
 513              		.global	get_menu
 514              		.syntax unified
 515              		.thumb
 516              		.thumb_func
 517              		.fpu fpv4-sp-d16
 519              	get_menu:
 520              	.LFB5:
  23:src/menu.c    ****   return current_menu;
 521              		.loc 1 23 17 is_stmt 1 view -0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525              		@ link register save eliminated.
  24:src/menu.c    **** }
 526              		.loc 1 24 3 view .LVU158
  24:src/menu.c    **** }
 527              		.loc 1 24 10 is_stmt 0 view .LVU159
 528 0000 014B     		ldr	r3, .L50
  25:src/menu.c    **** 
 529              		.loc 1 25 1 view .LVU160
 530 0002 1868     		ldr	r0, [r3]
 531 0004 7047     		bx	lr
 532              	.L51:
 533 0006 00BF     		.align	2
 534              	.L50:
 535 0008 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccZ4XUVa.s 			page 18


 536              		.cfi_endproc
 537              	.LFE5:
 539              		.section	.text.set_last_menu,"ax",%progbits
 540              		.align	1
 541              		.p2align 2,,3
 542              		.global	set_last_menu
 543              		.syntax unified
 544              		.thumb
 545              		.thumb_func
 546              		.fpu fpv4-sp-d16
 548              	set_last_menu:
 549              	.LFB7:
  31:src/menu.c    ****   set_menu (last_menu);
 550              		.loc 1 31 23 is_stmt 1 view -0
 551              		.cfi_startproc
 552              		@ args = 0, pretend = 0, frame = 0
 553              		@ frame_needed = 0, uses_anonymous_args = 0
 554              		@ link register save eliminated.
  32:src/menu.c    **** }
 555              		.loc 1 32 3 view .LVU162
 556 0000 054B     		ldr	r3, .L56
 557              	.LBB61:
 558              	.LBB62:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 559              		.loc 1 4 7 is_stmt 0 view .LVU163
 560 0002 0649     		ldr	r1, .L56+4
 561              	.LBE62:
 562              	.LBE61:
  32:src/menu.c    **** }
 563              		.loc 1 32 3 view .LVU164
 564 0004 1868     		ldr	r0, [r3]
 565              	.LVL41:
 566              	.LBB64:
 567              	.LBI61:
   3:src/menu.c    ****   int m = current_menu;
 568              		.loc 1 3 6 is_stmt 1 view .LVU165
 569              	.LBB63:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 570              		.loc 1 4 3 view .LVU166
   4:src/menu.c    ****   if (new_menu == current_menu) {
 571              		.loc 1 4 7 is_stmt 0 view .LVU167
 572 0006 0A68     		ldr	r2, [r1]
 573              	.LVL42:
   5:src/menu.c    ****     current_menu = default_menu;
 574              		.loc 1 5 3 is_stmt 1 view .LVU168
  14:src/menu.c    **** }
 575              		.loc 1 14 13 is_stmt 0 view .LVU169
 576 0008 1A60     		str	r2, [r3]
   5:src/menu.c    ****     current_menu = default_menu;
 577              		.loc 1 5 6 view .LVU170
 578 000a 9042     		cmp	r0, r2
   6:src/menu.c    ****   }
 579              		.loc 1 6 5 is_stmt 1 view .LVU171
   6:src/menu.c    ****   }
 580              		.loc 1 6 18 is_stmt 0 view .LVU172
 581 000c 04BF     		itt	eq
 582 000e 0448     		ldreq	r0, .L56+8
ARM GAS  /tmp/ccZ4XUVa.s 			page 19


 583              	.LVL43:
   6:src/menu.c    ****   }
 584              		.loc 1 6 18 view .LVU173
 585 0010 0068     		ldreq	r0, [r0]
   8:src/menu.c    ****     current_menu = last_menu;
 586              		.loc 1 8 8 is_stmt 1 view .LVU174
  12:src/menu.c    ****   }
 587              		.loc 1 12 18 is_stmt 0 view .LVU175
 588 0012 0860     		str	r0, [r1]
  14:src/menu.c    **** }
 589              		.loc 1 14 3 is_stmt 1 view .LVU176
 590              	.LVL44:
  14:src/menu.c    **** }
 591              		.loc 1 14 3 is_stmt 0 view .LVU177
 592              	.LBE63:
 593              	.LBE64:
  33:src/menu.c    **** 
 594              		.loc 1 33 1 view .LVU178
 595 0014 7047     		bx	lr
 596              	.L57:
 597 0016 00BF     		.align	2
 598              	.L56:
 599 0018 00000000 		.word	.LANCHOR3
 600 001c 00000000 		.word	.LANCHOR1
 601 0020 00000000 		.word	.LANCHOR2
 602              		.cfi_endproc
 603              	.LFE7:
 605              		.section	.text.mdot,"ax",%progbits
 606              		.align	1
 607              		.p2align 2,,3
 608              		.global	mdot
 609              		.syntax unified
 610              		.thumb
 611              		.thumb_func
 612              		.fpu fpv4-sp-d16
 614              	mdot:
 615              	.LVL45:
 616              	.LFB9:
 317:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 617              		.loc 1 317 40 is_stmt 1 view -0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621              		@ link register save eliminated.
 318:src/menu.c    ****   if (on) {
 622              		.loc 1 318 3 view .LVU180
 318:src/menu.c    ****   if (on) {
 623              		.loc 1 318 6 is_stmt 0 view .LVU181
 624 0000 C728     		cmp	r0, #199
 625 0002 1AD8     		bhi	.L62
 626              	.LVL46:
 627              	.LBB67:
 628              	.LBI67:
 317:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 629              		.loc 1 317 6 is_stmt 1 view .LVU182
 630              	.LBB68:
 319:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
ARM GAS  /tmp/ccZ4XUVa.s 			page 20


 631              		.loc 1 319 3 view .LVU183
 632              	.LBE68:
 633              	.LBE67:
 317:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 634              		.loc 1 317 40 is_stmt 0 view .LVU184
 635 0004 10B4     		push	{r4}
 636              		.cfi_def_cfa_offset 4
 637              		.cfi_offset 4, -4
 638              	.LBB71:
 639              	.LBB69:
 319:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 640              		.loc 1 319 6 view .LVU185
 641 0006 63B9     		cbnz	r3, .L65
 642              		.loc 1 323 5 is_stmt 1 view .LVU186
 643              		.loc 1 323 17 is_stmt 0 view .LVU187
 644 0008 0C4B     		ldr	r3, .L66
 645              	.LVL47:
 646              		.loc 1 323 17 view .LVU188
 647 000a 03EB4000 		add	r0, r3, r0, lsl #1
 648              	.LVL48:
 649              		.loc 1 323 25 view .LVU189
 650 000e 0124     		movs	r4, #1
 651              		.loc 1 323 17 view .LVU190
 652 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 653              		.loc 1 323 25 view .LVU191
 654 0012 04FA01F1 		lsl	r1, r4, r1
 655              	.LVL49:
 656              		.loc 1 323 17 view .LVU192
 657 0016 23EA0101 		bic	r1, r3, r1
 658 001a 8154     		strb	r1, [r0, r2]
 659              	.LVL50:
 660              		.loc 1 323 17 view .LVU193
 661              	.LBE69:
 662              	.LBE71:
 324:src/menu.c    ****   }
 325:src/menu.c    **** }
 663              		.loc 1 325 1 view .LVU194
 664 001c 5DF8044B 		ldr	r4, [sp], #4
 665              		.cfi_remember_state
 666              		.cfi_restore 4
 667              		.cfi_def_cfa_offset 0
 668 0020 7047     		bx	lr
 669              	.LVL51:
 670              	.L65:
 671              		.cfi_restore_state
 672              	.LBB72:
 673              	.LBB70:
 320:src/menu.c    ****   }
 674              		.loc 1 320 5 is_stmt 1 view .LVU195
 320:src/menu.c    ****   }
 675              		.loc 1 320 17 is_stmt 0 view .LVU196
 676 0022 064B     		ldr	r3, .L66
 677              	.LVL52:
 320:src/menu.c    ****   }
 678              		.loc 1 320 17 view .LVU197
 679 0024 03EB4000 		add	r0, r3, r0, lsl #1
 680              	.LVL53:
ARM GAS  /tmp/ccZ4XUVa.s 			page 21


 320:src/menu.c    ****   }
 681              		.loc 1 320 24 view .LVU198
 682 0028 0124     		movs	r4, #1
 320:src/menu.c    ****   }
 683              		.loc 1 320 17 view .LVU199
 684 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 320:src/menu.c    ****   }
 685              		.loc 1 320 24 view .LVU200
 686 002c 04FA01F1 		lsl	r1, r4, r1
 687              	.LVL54:
 320:src/menu.c    ****   }
 688              		.loc 1 320 17 view .LVU201
 689 0030 1943     		orrs	r1, r1, r3
 690 0032 8154     		strb	r1, [r0, r2]
 691              	.LBE70:
 692              	.LBE72:
 693              		.loc 1 325 1 view .LVU202
 694 0034 5DF8044B 		ldr	r4, [sp], #4
 695              		.cfi_restore 4
 696              		.cfi_def_cfa_offset 0
 697 0038 7047     		bx	lr
 698              	.LVL55:
 699              	.L62:
 700              		.loc 1 325 1 view .LVU203
 701 003a 7047     		bx	lr
 702              	.L67:
 703              		.align	2
 704              	.L66:
 705 003c 00000000 		.word	.LANCHOR0
 706              		.cfi_endproc
 707              	.LFE9:
 709              		.section	.text.display_menu,"ax",%progbits
 710              		.align	1
 711              		.p2align 2,,3
 712              		.global	display_menu
 713              		.syntax unified
 714              		.thumb
 715              		.thumb_func
 716              		.fpu fpv4-sp-d16
 718              	display_menu:
 719              	.LVL56:
 720              	.LFB10:
 326:src/menu.c    **** 
 327:src/menu.c    **** 
 328:src/menu.c    **** void display_menu (int current_menu) {
 721              		.loc 1 328 38 is_stmt 1 view -0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 0
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 329:src/menu.c    ****   int len = 0;
 725              		.loc 1 329 3 view .LVU205
 330:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 726              		.loc 1 330 3 view .LVU206
 328:src/menu.c    ****   int len = 0;
 727              		.loc 1 328 38 is_stmt 0 view .LVU207
 728 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 729              		.cfi_def_cfa_offset 36
ARM GAS  /tmp/ccZ4XUVa.s 			page 22


 730              		.cfi_offset 4, -36
 731              		.cfi_offset 5, -32
 732              		.cfi_offset 6, -28
 733              		.cfi_offset 7, -24
 734              		.cfi_offset 8, -20
 735              		.cfi_offset 9, -16
 736              		.cfi_offset 10, -12
 737              		.cfi_offset 11, -8
 738              		.cfi_offset 14, -4
 739 0004 83B0     		sub	sp, sp, #12
 740              		.cfi_def_cfa_offset 48
 741              		.loc 1 330 3 view .LVU208
 742 0006 0024     		movs	r4, #0
 743 0008 404F     		ldr	r7, .L86
 744 000a 0094     		str	r4, [sp]
 745 000c 3423     		movs	r3, #52
 746 000e 4FF4C872 		mov	r2, #400
 747 0012 BC21     		movs	r1, #188
 328:src/menu.c    ****   int len = 0;
 748              		.loc 1 328 38 view .LVU209
 749 0014 0646     		mov	r6, r0
 750              		.loc 1 330 3 view .LVU210
 751 0016 2046     		mov	r0, r4
 752              	.LVL57:
 753              		.loc 1 330 3 view .LVU211
 754 0018 B847     		blx	r7
 755              	.LVL58:
 331:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 756              		.loc 1 331 3 is_stmt 1 view .LVU212
 757 001a 3D4D     		ldr	r5, .L86+4
 758 001c FF23     		movs	r3, #255
 759 001e 0093     		str	r3, [sp]
 760 0020 4FF4C872 		mov	r2, #400
 761 0024 0123     		movs	r3, #1
 762 0026 BC21     		movs	r1, #188
 763 0028 2046     		mov	r0, r4
 764 002a B847     		blx	r7
 765              	.LVL59:
 332:src/menu.c    ****   //Clear previous menu
 333:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 766              		.loc 1 333 3 view .LVU213
 767              	.LBB73:
 768              		.loc 1 333 8 view .LVU214
 769              		.loc 1 333 21 view .LVU215
 334:src/menu.c    ****     mdots[col][0] = 0;
 770              		.loc 1 334 19 is_stmt 0 view .LVU216
 771 002c 2246     		mov	r2, r4
 772 002e 05F5C871 		add	r1, r5, #400
 773              	.LBE73:
 331:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 774              		.loc 1 331 3 view .LVU217
 775 0032 2B46     		mov	r3, r5
 776              	.LVL60:
 777              	.L69:
 778              	.LBB74:
 779              		.loc 1 334 5 is_stmt 1 discriminator 3 view .LVU218
 780              		.loc 1 334 19 is_stmt 0 discriminator 3 view .LVU219
ARM GAS  /tmp/ccZ4XUVa.s 			page 23


 781 0034 1A70     		strb	r2, [r3]
 335:src/menu.c    ****     mdots[col][1] = 0;
 782              		.loc 1 335 5 is_stmt 1 discriminator 3 view .LVU220
 783              		.loc 1 335 19 is_stmt 0 discriminator 3 view .LVU221
 784 0036 5A70     		strb	r2, [r3, #1]
 333:src/menu.c    ****     mdots[col][0] = 0;
 785              		.loc 1 333 32 is_stmt 1 discriminator 3 view .LVU222
 333:src/menu.c    ****     mdots[col][0] = 0;
 786              		.loc 1 333 21 discriminator 3 view .LVU223
 787 0038 0233     		adds	r3, r3, #2
 333:src/menu.c    ****     mdots[col][0] = 0;
 788              		.loc 1 333 3 is_stmt 0 discriminator 3 view .LVU224
 789 003a 9942     		cmp	r1, r3
 790 003c FAD1     		bne	.L69
 791 003e 354B     		ldr	r3, .L86+8
 792 0040 D022     		movs	r2, #208
 793 0042 02FB0636 		mla	r6, r2, r6, r3
 794              	.LVL61:
 333:src/menu.c    ****     mdots[col][0] = 0;
 795              		.loc 1 333 3 discriminator 3 view .LVU225
 796 0046 2036     		adds	r6, r6, #32
 333:src/menu.c    ****     mdots[col][0] = 0;
 797              		.loc 1 333 3 view .LVU226
 798 0048 0024     		movs	r4, #0
 799              	.LVL62:
 800              	.L70:
 333:src/menu.c    ****     mdots[col][0] = 0;
 801              		.loc 1 333 3 view .LVU227
 802              	.LBE74:
 803              	.LBB75:
 336:src/menu.c    ****   }
 337:src/menu.c    **** 
 338:src/menu.c    ****   // Draw menu items
 339:src/menu.c    ****   // 
 340:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 341:src/menu.c    ****     /*
 342:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 343:src/menu.c    ****     */
 344:src/menu.c    ****     // Label is Menus[current.menu].keys[item].unshifted_label
 345:src/menu.c    ****     // Unshifted first
 346:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].unshifted_label, 0); // 0 means not small fo
 804              		.loc 1 346 5 is_stmt 1 view .LVU228
 805              		.loc 1 346 11 is_stmt 0 view .LVU229
 806 004a 0021     		movs	r1, #0
 807 004c 3046     		mov	r0, r6
 808 004e FFF7FEFF 		bl	pixel_length
 809              	.LVL63:
 347:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 )
 810              		.loc 1 347 5 is_stmt 1 view .LVU230
 811              		.loc 1 347 87 is_stmt 0 view .LVU231
 812 0052 C0F12000 		rsb	r0, r0, #32
 813              	.LVL64:
 814              		.loc 1 347 93 view .LVU232
 815 0056 00EBD070 		add	r0, r0, r0, lsr #31
 816              		.loc 1 347 5 view .LVU233
 817 005a 04EB6001 		add	r1, r4, r0, asr #1
 818 005e 0022     		movs	r2, #0
ARM GAS  /tmp/ccZ4XUVa.s 			page 24


 819 0060 3046     		mov	r0, r6
 820 0062 06F10807 		add	r7, r6, #8
 821 0066 FFF7FEFF 		bl	set_menu_label.constprop.0
 822              	.LVL65:
 348:src/menu.c    ****     // Now shifted ...	
 349:src/menu.c    ****     len = pixel_length (Menus[current_menu].keys[item].shifted_label, 0); // 0 means not small font
 823              		.loc 1 349 5 is_stmt 1 view .LVU234
 824              		.loc 1 349 11 is_stmt 0 view .LVU235
 825 006a 0021     		movs	r1, #0
 826 006c 3846     		mov	r0, r7
 827 006e FFF7FEFF 		bl	pixel_length
 828              	.LVL66:
 350:src/menu.c    ****     len = item*32 + (32-len)/2;
 829              		.loc 1 350 5 is_stmt 1 view .LVU236
 830              		.loc 1 350 24 is_stmt 0 view .LVU237
 831 0072 C0F12000 		rsb	r0, r0, #32
 832              	.LVL67:
 833              		.loc 1 350 29 view .LVU238
 834 0076 00EBD070 		add	r0, r0, r0, lsr #31
 835              	.LVL68:
 351:src/menu.c    ****     if (len<0) len = 0;
 836              		.loc 1 351 5 is_stmt 1 view .LVU239
 350:src/menu.c    ****     len = item*32 + (32-len)/2;
 837              		.loc 1 350 9 is_stmt 0 view .LVU240
 838 007a 04EB6001 		add	r1, r4, r0, asr #1
 839              	.LVL69:
 350:src/menu.c    ****     len = item*32 + (32-len)/2;
 840              		.loc 1 350 9 view .LVU241
 841 007e C729     		cmp	r1, #199
 842 0080 A8BF     		it	ge
 843 0082 C721     		movge	r1, #199
 844              	.LVL70:
 352:src/menu.c    ****     if (len>199) len = 199;
 353:src/menu.c    ****     set_menu_label ( Menus[current_menu].keys[item].shifted_label, 0, len, 1 );
 845              		.loc 1 353 5 is_stmt 1 view .LVU242
 846 0084 21EAE171 		bic	r1, r1, r1, asr #31
 847              	.LVL71:
 848              		.loc 1 353 5 is_stmt 0 view .LVU243
 849 0088 3846     		mov	r0, r7
 850 008a 2034     		adds	r4, r4, #32
 851 008c 0122     		movs	r2, #1
 852 008e FFF7FEFF 		bl	set_menu_label.constprop.0
 853              	.LVL72:
 340:src/menu.c    ****     /*
 854              		.loc 1 340 32 is_stmt 1 view .LVU244
 340:src/menu.c    ****     /*
 855              		.loc 1 340 22 view .LVU245
 340:src/menu.c    ****     /*
 856              		.loc 1 340 3 is_stmt 0 view .LVU246
 857 0092 C02C     		cmp	r4, #192
 858 0094 06F12006 		add	r6, r6, #32
 859 0098 D7D1     		bne	.L70
 860 009a 1F4E     		ldr	r6, .L86+12
 861              	.LBE75:
 862              	.LBB76:
 863              	.LBB77:
 354:src/menu.c    ****   }
ARM GAS  /tmp/ccZ4XUVa.s 			page 25


 355:src/menu.c    **** 
 356:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 357:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 358:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 359:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 360:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 864              		.loc 1 360 2 view .LVU247
 865 009c DFF86C90 		ldr	r9, .L86
 866 00a0 C5F1040A 		rsb	r10, r5, #4
 867 00a4 06F5C47B 		add	fp, r6, #392
 868              	.LBE77:
 869              	.LBE76:
 870              	.LBB79:
 340:src/menu.c    ****     /*
 871              		.loc 1 340 3 view .LVU248
 872 00a8 771E     		subs	r7, r6, #1
 873              	.LBE79:
 874              	.LBB80:
 875              	.LBB78:
 876              		.loc 1 360 2 view .LVU249
 877 00aa 4FF0FF08 		mov	r8, #255
 878              	.L71:
 879              	.LVL73:
 357:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 880              		.loc 1 357 23 is_stmt 1 view .LVU250
 881 00ae 0AEB0705 		add	r5, r10, r7
 357:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 882              		.loc 1 357 14 is_stmt 0 view .LVU251
 883 00b2 0024     		movs	r4, #0
 884              	.LVL74:
 885              	.L74:
 358:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 886              		.loc 1 358 7 is_stmt 1 view .LVU252
 887              		.loc 1 360 2 view .LVU253
 358:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 888              		.loc 1 358 22 is_stmt 0 view .LVU254
 889 00b4 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 358:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 890              		.loc 1 358 40 view .LVU255
 891 00b8 2241     		asrs	r2, r2, r4
 892              		.loc 1 360 2 view .LVU256
 893 00ba A4EB8401 		sub	r1, r4, r4, lsl #2
 894 00be 0323     		movs	r3, #3
 358:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 895              		.loc 1 358 10 view .LVU257
 896 00c0 12F0010F 		tst	r2, #1
 897              		.loc 1 360 2 view .LVU258
 898 00c4 01F1E901 		add	r1, r1, #233
 899 00c8 1A46     		mov	r2, r3
 900 00ca 2846     		mov	r0, r5
 358:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 901              		.loc 1 358 10 view .LVU259
 902 00cc 02D0     		beq	.L72
 903              		.loc 1 360 2 view .LVU260
 904 00ce CDF80080 		str	r8, [sp]
 905 00d2 C847     		blx	r9
 906              	.LVL75:
ARM GAS  /tmp/ccZ4XUVa.s 			page 26


 907              	.L72:
 361:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 908              		.loc 1 361 7 is_stmt 1 view .LVU261
 362:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 363:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 909              		.loc 1 363 2 view .LVU262
 361:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 910              		.loc 1 361 22 is_stmt 0 view .LVU263
 911 00d4 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 361:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 912              		.loc 1 361 40 view .LVU264
 913 00d6 2241     		asrs	r2, r2, r4
 914              		.loc 1 363 2 view .LVU265
 915 00d8 A4EB8401 		sub	r1, r4, r4, lsl #2
 916 00dc 0323     		movs	r3, #3
 361:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 917              		.loc 1 361 10 view .LVU266
 918 00de 12F0010F 		tst	r2, #1
 919              		.loc 1 363 2 view .LVU267
 920 00e2 01F1D001 		add	r1, r1, #208
 921 00e6 1A46     		mov	r2, r3
 922 00e8 04F10104 		add	r4, r4, #1
 923              	.LVL76:
 924              		.loc 1 363 2 view .LVU268
 925 00ec 2846     		mov	r0, r5
 361:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 926              		.loc 1 361 10 view .LVU269
 927 00ee 02D0     		beq	.L73
 928              		.loc 1 363 2 view .LVU270
 929 00f0 CDF80080 		str	r8, [sp]
 930 00f4 C847     		blx	r9
 931              	.LVL77:
 932              	.L73:
 357:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 933              		.loc 1 357 32 is_stmt 1 discriminator 2 view .LVU271
 357:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 934              		.loc 1 357 23 discriminator 2 view .LVU272
 357:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 935              		.loc 1 357 5 is_stmt 0 discriminator 2 view .LVU273
 936 00f6 062C     		cmp	r4, #6
 937 00f8 DCD1     		bne	.L74
 938              	.LBE78:
 356:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 939              		.loc 1 356 32 is_stmt 1 discriminator 2 view .LVU274
 356:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 940              		.loc 1 356 21 discriminator 2 view .LVU275
 941 00fa 0236     		adds	r6, r6, #2
 356:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 942              		.loc 1 356 3 is_stmt 0 discriminator 2 view .LVU276
 943 00fc B345     		cmp	fp, r6
 944 00fe 07F10207 		add	r7, r7, #2
 945 0102 D4D1     		bne	.L71
 946              	.LBE80:
 364:src/menu.c    ****     }
 365:src/menu.c    ****   }
 366:src/menu.c    **** }
 947              		.loc 1 366 1 view .LVU277
ARM GAS  /tmp/ccZ4XUVa.s 			page 27


 948 0104 03B0     		add	sp, sp, #12
 949              		.cfi_def_cfa_offset 36
 950              		@ sp needed
 951 0106 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 952              	.LVL78:
 953              	.L87:
 954              		.loc 1 366 1 view .LVU278
 955 010a 00BF     		.align	2
 956              	.L86:
 957 010c 3D020008 		.word	134218301
 958 0110 00000000 		.word	.LANCHOR0
 959 0114 00000000 		.word	.LANCHOR4
 960 0118 01000000 		.word	.LANCHOR0+1
 961              		.cfi_endproc
 962              	.LFE10:
 964              		.section	.text.display_current_menu,"ax",%progbits
 965              		.align	1
 966              		.p2align 2,,3
 967              		.global	display_current_menu
 968              		.syntax unified
 969              		.thumb
 970              		.thumb_func
 971              		.fpu fpv4-sp-d16
 973              	display_current_menu:
 974              	.LFB6:
  27:src/menu.c    ****   display_menu (current_menu);
 975              		.loc 1 27 30 is_stmt 1 view -0
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 0
 978              		@ frame_needed = 0, uses_anonymous_args = 0
 979              		@ link register save eliminated.
  28:src/menu.c    **** }
 980              		.loc 1 28 3 view .LVU280
 981 0000 014B     		ldr	r3, .L89
 982 0002 1868     		ldr	r0, [r3]
 983 0004 FFF7FEBF 		b	display_menu
 984              	.LVL79:
 985              	.L90:
 986              		.align	2
 987              	.L89:
 988 0008 00000000 		.word	.LANCHOR1
 989              		.cfi_endproc
 990              	.LFE6:
 992              		.section	.text.all_menu_dots,"ax",%progbits
 993              		.align	1
 994              		.p2align 2,,3
 995              		.global	all_menu_dots
 996              		.syntax unified
 997              		.thumb
 998              		.thumb_func
 999              		.fpu fpv4-sp-d16
 1001              	all_menu_dots:
 1002              	.LFB11:
 367:src/menu.c    **** 
 368:src/menu.c    **** void all_menu_dots () {
 1003              		.loc 1 368 23 view -0
 1004              		.cfi_startproc
ARM GAS  /tmp/ccZ4XUVa.s 			page 28


 1005              		@ args = 0, pretend = 0, frame = 0
 1006              		@ frame_needed = 0, uses_anonymous_args = 0
 369:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1007              		.loc 1 369 3 view .LVU282
 1008              	.LBB81:
 1009              		.loc 1 369 8 view .LVU283
 1010              	.LVL80:
 1011              		.loc 1 369 21 view .LVU284
 1012              	.LBE81:
 368:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1013              		.loc 1 368 23 is_stmt 0 view .LVU285
 1014 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1015              		.cfi_def_cfa_offset 20
 1016              		.cfi_offset 4, -20
 1017              		.cfi_offset 5, -16
 1018              		.cfi_offset 6, -12
 1019              		.cfi_offset 7, -8
 1020              		.cfi_offset 14, -4
 1021              	.LBB85:
 1022              	.LBB82:
 370:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 371:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1023              		.loc 1 371 2 view .LVU286
 1024 0002 0D4E     		ldr	r6, .L97
 1025              	.LBE82:
 1026              	.LBE85:
 368:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1027              		.loc 1 368 23 view .LVU287
 1028 0004 83B0     		sub	sp, sp, #12
 1029              		.cfi_def_cfa_offset 32
 368:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1030              		.loc 1 368 23 view .LVU288
 1031 0006 0025     		movs	r5, #0
 1032              	.LBB86:
 1033              	.LBB83:
 1034              		.loc 1 371 2 view .LVU289
 1035 0008 FF27     		movs	r7, #255
 1036              	.LVL81:
 1037              	.L92:
 370:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1038              		.loc 1 370 23 is_stmt 1 view .LVU290
 1039              	.LBE83:
 1040              	.LBE86:
 368:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1041              		.loc 1 368 23 is_stmt 0 view .LVU291
 1042 000a E924     		movs	r4, #233
 1043              	.LVL82:
 1044              	.L93:
 1045              	.LBB87:
 1046              	.LBB84:
 1047              		.loc 1 371 2 is_stmt 1 discriminator 3 view .LVU292
 1048 000c 0323     		movs	r3, #3
 1049 000e 1A46     		mov	r2, r3
 1050 0010 2146     		mov	r1, r4
 1051 0012 2846     		mov	r0, r5
 1052 0014 0097     		str	r7, [sp]
 1053 0016 B047     		blx	r6
ARM GAS  /tmp/ccZ4XUVa.s 			page 29


 1054              	.LVL83:
 372:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1055              		.loc 1 372 2 discriminator 3 view .LVU293
 1056 0018 0323     		movs	r3, #3
 1057 001a A4F11901 		sub	r1, r4, #25
 1058 001e 0097     		str	r7, [sp]
 1059 0020 1A46     		mov	r2, r3
 1060 0022 2846     		mov	r0, r5
 1061 0024 033C     		subs	r4, r4, #3
 1062 0026 B047     		blx	r6
 1063              	.LVL84:
 370:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1064              		.loc 1 370 32 discriminator 3 view .LVU294
 370:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1065              		.loc 1 370 23 discriminator 3 view .LVU295
 370:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1066              		.loc 1 370 5 is_stmt 0 discriminator 3 view .LVU296
 1067 0028 D72C     		cmp	r4, #215
 1068 002a EFD1     		bne	.L93
 1069              	.LBE84:
 369:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1070              		.loc 1 369 32 is_stmt 1 discriminator 2 view .LVU297
 369:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1071              		.loc 1 369 21 discriminator 2 view .LVU298
 1072 002c 0235     		adds	r5, r5, #2
 369:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1073              		.loc 1 369 3 is_stmt 0 discriminator 2 view .LVU299
 1074 002e B5F5C87F 		cmp	r5, #400
 1075 0032 EAD1     		bne	.L92
 1076              	.LBE87:
 373:src/menu.c    ****     }
 374:src/menu.c    ****   }
 375:src/menu.c    **** }  
 1077              		.loc 1 375 1 view .LVU300
 1078 0034 03B0     		add	sp, sp, #12
 1079              		.cfi_def_cfa_offset 20
 1080              		@ sp needed
 1081 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1082              	.L98:
 1083              		.align	2
 1084              	.L97:
 1085 0038 3D020008 		.word	134218301
 1086              		.cfi_endproc
 1087              	.LFE11:
 1089              		.section	.text.shutdown,"ax",%progbits
 1090              		.align	1
 1091              		.p2align 2,,3
 1092              		.global	shutdown
 1093              		.syntax unified
 1094              		.thumb
 1095              		.thumb_func
 1096              		.fpu fpv4-sp-d16
 1098              	shutdown:
 1099              	.LFB13:
 1100              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
ARM GAS  /tmp/ccZ4XUVa.s 			page 30


   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #undef DM42SAFE
  39:src/console.c **** 
  40:src/console.c **** 
  41:src/console.c **** #ifdef DM42
  42:src/console.c **** 
  43:src/console.c **** #include <menu.c>
  44:src/console.c **** 
  45:src/console.c **** const uint8_t mid_menu[] = {
  46:src/console.c ****     MI_SYSTEM_ENTER,
  47:src/console.c ****     MI_MSC,
  48:src/console.c ****     0 }; // Terminator
  49:src/console.c **** 
  50:src/console.c **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  51:src/console.c **** 
  52:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  53:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  54:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  55:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  56:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  57:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  58:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  59:src/console.c **** 
ARM GAS  /tmp/ccZ4XUVa.s 			page 31


  60:src/console.c **** static struct _ndmap remap (const int c) {
  61:src/console.c **** 
  62:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  63:src/console.c **** 
  64:src/console.c **** #include "keytran.c"
  65:src/console.c **** 
  66:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  67:src/console.c **** 
  68:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  69:src/console.c **** 
  70:src/console.c ****   if (c == 44 ) {
  71:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  72:src/console.c ****     return sshot;
  73:src/console.c ****   }
  74:src/console.c ****   
  75:src/console.c ****   if ( get_alpha_state() ) {
  76:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
  77:src/console.c ****       switch (cur_shift()) { 
  78:src/console.c ****       case SHIFT_N:
  79:src/console.c **** 	return mapping_none[c]; // N -> F
  80:src/console.c **** 	break;
  81:src/console.c ****       case SHIFT_F:
  82:src/console.c **** 	return mapping_fshift[c]; // F -> G
  83:src/console.c **** 	break;
  84:src/console.c ****       case SHIFT_G:
  85:src/console.c **** 	return h_shift; // G -> H
  86:src/console.c **** 	break;
  87:src/console.c ****       case SHIFT_H:
  88:src/console.c **** 	return h_shift; // H -> N
  89:src/console.c ****       default:
  90:src/console.c **** 	return no_change;
  91:src/console.c ****       }
  92:src/console.c ****     }
  93:src/console.c ****     return mapping_alpha [c];
  94:src/console.c ****   }
  95:src/console.c ****     
  96:src/console.c ****   switch (c) {
  97:src/console.c ****   case KEY_F1:
  98:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[0].unshifted;
  99:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 100:src/console.c ****   case KEY_F2:
 101:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[1].unshifted;
 102:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 103:src/console.c ****   case KEY_F3:
 104:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[2].unshifted;
 105:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 106:src/console.c ****   case KEY_F4:
 107:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[3].unshifted;
 108:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 109:src/console.c ****   case KEY_F5:
 110:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[4].unshifted;
 111:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 112:src/console.c ****   case KEY_F6:
 113:src/console.c ****     if (cur_shift() == SHIFT_N) return Menus[current_menu].keys[5].unshifted;
 114:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 115:src/console.c ****   }
 116:src/console.c ****   
ARM GAS  /tmp/ccZ4XUVa.s 			page 32


 117:src/console.c ****   switch (cur_shift()) {
 118:src/console.c ****   case SHIFT_N:    
 119:src/console.c ****     return mapping_none[c];
 120:src/console.c ****     break;
 121:src/console.c ****   case SHIFT_F:
 122:src/console.c ****     return mapping_fshift[c];
 123:src/console.c ****     break;
 124:src/console.c ****   case SHIFT_G:
 125:src/console.c ****     return mapping_gshift[c];
 126:src/console.c ****     break;
 127:src/console.c ****   default:
 128:src/console.c ****     return no_change;
 129:src/console.c ****   }
 130:src/console.c **** }
 131:src/console.c **** 
 132:src/console.c **** #endif
 133:src/console.c **** 
 134:src/console.c **** void shutdown( void )
 135:src/console.c **** {
 1101              		.loc 2 135 1 is_stmt 1 view -0
 1102              		.cfi_startproc
 1103              		@ args = 0, pretend = 0, frame = 0
 1104              		@ frame_needed = 0, uses_anonymous_args = 0
 1105              		@ link register save eliminated.
 136:src/console.c **** #ifndef DM42
 137:src/console.c ****   checksum_all();
 138:src/console.c ****   setuptty( 1 );
 139:src/console.c ****   save_statefile( NULL );
 140:src/console.c ****   exit( 0 );
 141:src/console.c **** #else
 142:src/console.c ****   //  save_ram_file(0);
 143:src/console.c ****   SET_ST(STAT_PGM_END);
 1106              		.loc 2 143 3 view .LVU302
 1107 0000 024A     		ldr	r2, .L100
 1108 0002 1368     		ldr	r3, [r2]
 1109 0004 43F40073 		orr	r3, r3, #512
 1110 0008 1360     		str	r3, [r2]
 144:src/console.c **** #endif
 145:src/console.c **** }
 1111              		.loc 2 145 1 is_stmt 0 view .LVU303
 1112 000a 7047     		bx	lr
 1113              	.L101:
 1114              		.align	2
 1115              	.L100:
 1116 000c 00200010 		.word	268443648
 1117              		.cfi_endproc
 1118              	.LFE13:
 1120              		.section	.text.is_key_pressed,"ax",%progbits
 1121              		.align	1
 1122              		.p2align 2,,3
 1123              		.global	is_key_pressed
 1124              		.syntax unified
 1125              		.thumb
 1126              		.thumb_func
 1127              		.fpu fpv4-sp-d16
 1129              	is_key_pressed:
 1130              	.LFB14:
ARM GAS  /tmp/ccZ4XUVa.s 			page 33


 146:src/console.c **** 
 147:src/console.c **** 
 148:src/console.c **** /*
 149:src/console.c ****  *  Dummies
 150:src/console.c ****  */
 151:src/console.c **** int is_key_pressed(void) 
 152:src/console.c **** {
 1131              		.loc 2 152 1 is_stmt 1 view -0
 1132              		.cfi_startproc
 1133              		@ args = 0, pretend = 0, frame = 0
 1134              		@ frame_needed = 0, uses_anonymous_args = 0
 153:src/console.c **** #ifdef DM42
 154:src/console.c ****   return !key_empty();
 1135              		.loc 2 154 3 view .LVU305
 152:src/console.c **** #ifdef DM42
 1136              		.loc 2 152 1 is_stmt 0 view .LVU306
 1137 0000 08B5     		push	{r3, lr}
 1138              		.cfi_def_cfa_offset 8
 1139              		.cfi_offset 3, -8
 1140              		.cfi_offset 14, -4
 1141              		.loc 2 154 11 view .LVU307
 1142 0002 034B     		ldr	r3, .L104
 1143 0004 9847     		blx	r3
 1144              	.LVL85:
 155:src/console.c **** #else
 156:src/console.c ****   return 0;
 157:src/console.c **** #endif
 158:src/console.c **** }
 1145              		.loc 2 158 1 view .LVU308
 1146 0006 B0FA80F0 		clz	r0, r0
 1147 000a 4009     		lsrs	r0, r0, #5
 1148 000c 08BD     		pop	{r3, pc}
 1149              	.L105:
 1150 000e 00BF     		.align	2
 1151              	.L104:
 1152 0010 7D030008 		.word	134218621
 1153              		.cfi_endproc
 1154              	.LFE14:
 1156              		.section	.text.get_key,"ax",%progbits
 1157              		.align	1
 1158              		.p2align 2,,3
 1159              		.global	get_key
 1160              		.syntax unified
 1161              		.thumb
 1162              		.thumb_func
 1163              		.fpu fpv4-sp-d16
 1165              	get_key:
 1166              	.LFB15:
 159:src/console.c **** 
 160:src/console.c **** int get_key(void)
 161:src/console.c **** {
 1167              		.loc 2 161 1 is_stmt 1 view -0
 1168              		.cfi_startproc
 1169              		@ args = 0, pretend = 0, frame = 0
 1170              		@ frame_needed = 0, uses_anonymous_args = 0
 1171              		@ link register save eliminated.
 162:src/console.c ****   #ifdef DM42
ARM GAS  /tmp/ccZ4XUVa.s 			page 34


 163:src/console.c ****   return key_pop();
 1172              		.loc 2 163 3 view .LVU310
 1173              		.loc 2 163 10 is_stmt 0 view .LVU311
 1174 0000 004B     		ldr	r3, .L107
 1175 0002 1847     		bx	r3
 1176              	.LVL86:
 1177              	.L108:
 1178              		.align	2
 1179              	.L107:
 1180 0004 89030008 		.word	134218633
 1181              		.cfi_endproc
 1182              	.LFE15:
 1184              		.section	.text.put_key,"ax",%progbits
 1185              		.align	1
 1186              		.p2align 2,,3
 1187              		.global	put_key
 1188              		.syntax unified
 1189              		.thumb
 1190              		.thumb_func
 1191              		.fpu fpv4-sp-d16
 1193              	put_key:
 1194              	.LVL87:
 1195              	.LFB16:
 164:src/console.c ****   #else
 165:src/console.c ****   return 0;
 166:src/console.c ****   #endif
 167:src/console.c **** }
 168:src/console.c **** 
 169:src/console.c **** int put_key( int k )
 170:src/console.c **** {
 1196              		.loc 2 170 1 is_stmt 1 view -0
 1197              		.cfi_startproc
 1198              		@ args = 0, pretend = 0, frame = 0
 1199              		@ frame_needed = 0, uses_anonymous_args = 0
 1200              		@ link register save eliminated.
 171:src/console.c ****   #ifdef DM42
 172:src/console.c ****   return key_push(k);
 1201              		.loc 2 172 3 view .LVU313
 1202              		.loc 2 172 10 is_stmt 0 view .LVU314
 1203 0000 004B     		ldr	r3, .L110
 1204 0002 1847     		bx	r3
 1205              	.LVL88:
 1206              	.L111:
 1207              		.loc 2 172 10 view .LVU315
 1208              		.align	2
 1209              	.L110:
 1210 0004 81030008 		.word	134218625
 1211              		.cfi_endproc
 1212              	.LFE16:
 1214              		.section	.text.shift_down,"ax",%progbits
 1215              		.align	1
 1216              		.p2align 2,,3
 1217              		.global	shift_down
 1218              		.syntax unified
 1219              		.thumb
 1220              		.thumb_func
 1221              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccZ4XUVa.s 			page 35


 1223              	shift_down:
 1224              	.LFB17:
 173:src/console.c ****   #else
 174:src/console.c ****   return k;
 175:src/console.c ****   #endif
 176:src/console.c **** }
 177:src/console.c **** 
 178:src/console.c **** enum shifts shift_down(void)
 179:src/console.c **** {
 1225              		.loc 2 179 1 is_stmt 1 view -0
 1226              		.cfi_startproc
 1227              		@ args = 0, pretend = 0, frame = 0
 1228              		@ frame_needed = 0, uses_anonymous_args = 0
 1229              		@ link register save eliminated.
 180:src/console.c **** 	return SHIFT_N;
 1230              		.loc 2 180 2 view .LVU317
 181:src/console.c **** }
 1231              		.loc 2 181 1 is_stmt 0 view .LVU318
 1232 0000 0020     		movs	r0, #0
 1233 0002 7047     		bx	lr
 1234              		.cfi_endproc
 1235              	.LFE17:
 1237              		.section	.text.start_key_timer,"ax",%progbits
 1238              		.align	1
 1239              		.p2align 2,,3
 1240              		.global	start_key_timer
 1241              		.syntax unified
 1242              		.thumb
 1243              		.thumb_func
 1244              		.fpu fpv4-sp-d16
 1246              	start_key_timer:
 1247              	.LFB18:
 182:src/console.c **** 
 183:src/console.c **** #ifndef DM42   // No serial operations for DM42
 184:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 185:src/console.c **** /*
 186:src/console.c ****  *  Open a COM port for transmission
 187:src/console.c ****  */
 188:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 189:src/console.c **** {
 190:src/console.c **** 	return 0;
 191:src/console.c **** }
 192:src/console.c **** 
 193:src/console.c **** 
 194:src/console.c **** /*
 195:src/console.c ****  *  Close the COM port after transmission is complete
 196:src/console.c ****  */
 197:src/console.c **** extern void close_port( void )
 198:src/console.c **** {
 199:src/console.c **** }
 200:src/console.c **** 
 201:src/console.c **** 
 202:src/console.c **** /*
 203:src/console.c ****  *  Output a single byte to the serial
 204:src/console.c ****  */
 205:src/console.c **** void put_byte( unsigned char byte )
 206:src/console.c **** {
ARM GAS  /tmp/ccZ4XUVa.s 			page 36


 207:src/console.c **** 	report_err(ERR_PROG_BAD);
 208:src/console.c **** }
 209:src/console.c **** 
 210:src/console.c **** 
 211:src/console.c **** /*
 212:src/console.c ****  *  Force buffer flush
 213:src/console.c ****  */
 214:src/console.c **** void flush_comm( void )
 215:src/console.c **** {
 216:src/console.c **** }
 217:src/console.c **** 
 218:src/console.c **** #endif
 219:src/console.c **** #endif
 220:src/console.c **** 
 221:src/console.c **** 
 222:src/console.c **** /*
 223:src/console.c ****  *  Main loop
 224:src/console.c ****  */
 225:src/console.c **** #ifdef DM42
 226:src/console.c **** void start_key_timer (void);
 227:src/console.c **** int keyticks (void);
 228:src/console.c **** void moveto (int line, int x);
 229:src/console.c **** 
 230:src/console.c **** static int start_ticks;
 231:src/console.c **** 
 232:src/console.c **** void start_key_timer() {
 1248              		.loc 2 232 24 is_stmt 1 view -0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 0
 1251              		@ frame_needed = 0, uses_anonymous_args = 0
 233:src/console.c ****     start_ticks = get_rtc_ticks();
 1252              		.loc 2 233 5 view .LVU320
 232:src/console.c ****     start_ticks = get_rtc_ticks();
 1253              		.loc 2 232 24 is_stmt 0 view .LVU321
 1254 0000 08B5     		push	{r3, lr}
 1255              		.cfi_def_cfa_offset 8
 1256              		.cfi_offset 3, -8
 1257              		.cfi_offset 14, -4
 1258              		.loc 2 233 19 view .LVU322
 1259 0002 024B     		ldr	r3, .L115
 1260 0004 9847     		blx	r3
 1261              	.LVL89:
 1262              		.loc 2 233 17 view .LVU323
 1263 0006 024B     		ldr	r3, .L115+4
 1264 0008 1860     		str	r0, [r3]
 234:src/console.c **** }
 1265              		.loc 2 234 1 view .LVU324
 1266 000a 08BD     		pop	{r3, pc}
 1267              	.L116:
 1268              		.align	2
 1269              	.L115:
 1270 000c B9040008 		.word	134218937
 1271 0010 00000000 		.word	.LANCHOR5
 1272              		.cfi_endproc
 1273              	.LFE18:
 1275              		.section	.text.keyticks,"ax",%progbits
 1276              		.align	1
ARM GAS  /tmp/ccZ4XUVa.s 			page 37


 1277              		.p2align 2,,3
 1278              		.global	keyticks
 1279              		.syntax unified
 1280              		.thumb
 1281              		.thumb_func
 1282              		.fpu fpv4-sp-d16
 1284              	keyticks:
 1285              	.LFB19:
 235:src/console.c **** 
 236:src/console.c **** int keyticks () {
 1286              		.loc 2 236 17 is_stmt 1 view -0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 0
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 237:src/console.c ****   int i;
 1290              		.loc 2 237 3 view .LVU326
 238:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1291              		.loc 2 238 3 view .LVU327
 236:src/console.c ****   int i;
 1292              		.loc 2 236 17 is_stmt 0 view .LVU328
 1293 0000 08B5     		push	{r3, lr}
 1294              		.cfi_def_cfa_offset 8
 1295              		.cfi_offset 3, -8
 1296              		.cfi_offset 14, -4
 1297              		.loc 2 238 8 view .LVU329
 1298 0002 054B     		ldr	r3, .L119
 1299 0004 9847     		blx	r3
 1300              	.LVL90:
 239:src/console.c ****   return i >> 8;
 1301              		.loc 2 239 3 is_stmt 1 view .LVU330
 238:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1302              		.loc 2 238 24 is_stmt 0 view .LVU331
 1303 0006 054B     		ldr	r3, .L119+4
 1304 0008 1B68     		ldr	r3, [r3]
 1305 000a C01A     		subs	r0, r0, r3
 1306              	.LVL91:
 238:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 1307              		.loc 2 238 38 view .LVU332
 1308 000c 00EB8000 		add	r0, r0, r0, lsl #2
 240:src/console.c **** }
 1309              		.loc 2 240 1 view .LVU333
 1310 0010 40F3D710 		sbfx	r0, r0, #7, #24
 1311 0014 08BD     		pop	{r3, pc}
 1312              	.L120:
 1313 0016 00BF     		.align	2
 1314              	.L119:
 1315 0018 B9040008 		.word	134218937
 1316 001c 00000000 		.word	.LANCHOR5
 1317              		.cfi_endproc
 1318              	.LFE19:
 1320              		.section	.text.moveto,"ax",%progbits
 1321              		.align	1
 1322              		.p2align 2,,3
 1323              		.global	moveto
 1324              		.syntax unified
 1325              		.thumb
 1326              		.thumb_func
ARM GAS  /tmp/ccZ4XUVa.s 			page 38


 1327              		.fpu fpv4-sp-d16
 1329              	moveto:
 1330              	.LVL92:
 1331              	.LFB20:
 241:src/console.c **** 
 242:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 243:src/console.c **** char print_string[22];
 244:src/console.c **** int n_p = 0;
 245:src/console.c **** 
 246:src/console.c **** 
 247:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 1332              		.loc 2 247 30 is_stmt 1 view -0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 0
 1335              		@ frame_needed = 0, uses_anonymous_args = 0
 248:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1336              		.loc 2 248 3 view .LVU335
 247:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1337              		.loc 2 247 30 is_stmt 0 view .LVU336
 1338 0000 70B5     		push	{r4, r5, r6, lr}
 1339              		.cfi_def_cfa_offset 16
 1340              		.cfi_offset 4, -16
 1341              		.cfi_offset 5, -12
 1342              		.cfi_offset 6, -8
 1343              		.cfi_offset 14, -4
 1344              		.loc 2 248 3 view .LVU337
 1345 0002 0A4D     		ldr	r5, .L123
 1346 0004 0A4B     		ldr	r3, .L123+4
 247:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 1347              		.loc 2 247 30 view .LVU338
 1348 0006 0246     		mov	r2, r0
 1349 0008 0C46     		mov	r4, r1
 1350              		.loc 2 248 3 view .LVU339
 1351 000a A86B     		ldr	r0, [r5, #56]
 1352              	.LVL93:
 1353              		.loc 2 248 3 view .LVU340
 1354 000c 511E     		subs	r1, r2, #1
 1355              	.LVL94:
 1356              		.loc 2 248 3 view .LVU341
 1357 000e 9847     		blx	r3
 1358              	.LVL95:
 249:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1359              		.loc 2 249 3 is_stmt 1 view .LVU342
 1360 0010 A86B     		ldr	r0, [r5, #56]
 1361 0012 084B     		ldr	r3, .L123+8
 1362              		.loc 2 249 33 is_stmt 0 view .LVU343
 1363 0014 0168     		ldr	r1, [r0]
 1364              		.loc 2 249 3 view .LVU344
 1365 0016 B0F90620 		ldrsh	r2, [r0, #6]
 1366              		.loc 2 249 33 view .LVU345
 1367 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 1368              		.loc 2 249 43 view .LVU346
 1369 001c 013C     		subs	r4, r4, #1
 1370              	.LVL96:
 1371              		.loc 2 249 40 view .LVU347
 1372 001e 04FB01F1 		mul	r1, r4, r1
 1373              		.loc 2 249 3 view .LVU348
ARM GAS  /tmp/ccZ4XUVa.s 			page 39


 1374 0022 1431     		adds	r1, r1, #20
 250:src/console.c **** }
 1375              		.loc 2 250 1 view .LVU349
 1376 0024 BDE87040 		pop	{r4, r5, r6, lr}
 1377              		.cfi_restore 14
 1378              		.cfi_restore 6
 1379              		.cfi_restore 5
 1380              		.cfi_restore 4
 1381              		.cfi_def_cfa_offset 0
 1382              	.LVL97:
 249:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 1383              		.loc 2 249 3 view .LVU350
 1384 0028 1847     		bx	r3	@ indirect register sibling call
 1385              	.LVL98:
 1386              	.L124:
 1387 002a 00BF     		.align	2
 1388              	.L123:
 1389 002c 00200010 		.word	268443648
 1390 0030 69020008 		.word	134218345
 1391 0034 6D020008 		.word	134218349
 1392              		.cfi_endproc
 1393              	.LFE20:
 1395              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 1396              		.align	2
 1397              	.LC1:
 1398 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 1398      673A2025 
 1398      34692C25 
 1398      346900
 1399              		.section	.text.print_debug,"ax",%progbits
 1400              		.align	1
 1401              		.p2align 2,,3
 1402              		.global	print_debug
 1403              		.syntax unified
 1404              		.thumb
 1405              		.thumb_func
 1406              		.fpu fpv4-sp-d16
 1408              	print_debug:
 1409              	.LVL99:
 1410              	.LFB21:
 251:src/console.c **** 
 252:src/console.c **** void print_debug (int i, int j) {
 1411              		.loc 2 252 33 is_stmt 1 view -0
 1412              		.cfi_startproc
 1413              		@ args = 0, pretend = 0, frame = 8
 1414              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/console.c ****   strcpy( print_string, spaces );
 1415              		.loc 2 253 3 view .LVU352
 252:src/console.c ****   strcpy( print_string, spaces );
 1416              		.loc 2 252 33 is_stmt 0 view .LVU353
 1417 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1418              		.cfi_def_cfa_offset 24
 1419              		.cfi_offset 4, -24
 1420              		.cfi_offset 5, -20
 1421              		.cfi_offset 6, -16
 1422              		.cfi_offset 7, -12
 1423              		.cfi_offset 8, -8
ARM GAS  /tmp/ccZ4XUVa.s 			page 40


 1424              		.cfi_offset 14, -4
 1425              		.loc 2 253 3 view .LVU354
 1426 0004 174C     		ldr	r4, .L127
 1427 0006 184F     		ldr	r7, .L127+4
 254:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 255:src/console.c ****   moveto (3, 1);
 256:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1428              		.loc 2 256 3 view .LVU355
 1429 0008 184E     		ldr	r6, .L127+8
 1430 000a 194D     		ldr	r5, .L127+12
 257:src/console.c ****   lcd_refresh();
 1431              		.loc 2 257 3 view .LVU356
 1432 000c DFF86C80 		ldr	r8, .L127+24
 252:src/console.c ****   strcpy( print_string, spaces );
 1433              		.loc 2 252 33 view .LVU357
 1434 0010 82B0     		sub	sp, sp, #8
 1435              		.cfi_def_cfa_offset 32
 252:src/console.c ****   strcpy( print_string, spaces );
 1436              		.loc 2 252 33 view .LVU358
 1437 0012 0190     		str	r0, [sp, #4]
 1438 0014 0091     		str	r1, [sp]
 253:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1439              		.loc 2 253 3 view .LVU359
 1440 0016 2046     		mov	r0, r4
 1441              	.LVL100:
 253:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1442              		.loc 2 253 3 view .LVU360
 1443 0018 3946     		mov	r1, r7
 1444              	.LVL101:
 253:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1445              		.loc 2 253 3 view .LVU361
 1446 001a FFF7FEFF 		bl	strcpy
 1447              	.LVL102:
 254:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 1448              		.loc 2 254 3 is_stmt 1 view .LVU362
 1449 001e DDE90032 		ldrd	r3, r2, [sp]
 1450 0022 1449     		ldr	r1, .L127+16
 1451 0024 2046     		mov	r0, r4
 1452 0026 FFF7FEFF 		bl	sprintf
 1453              	.LVL103:
 255:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1454              		.loc 2 255 3 view .LVU363
 1455 002a 0121     		movs	r1, #1
 1456 002c 0320     		movs	r0, #3
 1457 002e FFF7FEFF 		bl	moveto
 1458              	.LVL104:
 256:src/console.c ****   lcd_refresh();
 1459              		.loc 2 256 3 view .LVU364
 1460 0032 2146     		mov	r1, r4
 1461 0034 B06B     		ldr	r0, [r6, #56]
 1462 0036 A847     		blx	r5
 1463              	.LVL105:
 1464              		.loc 2 257 3 view .LVU365
 1465 0038 C047     		blx	r8
 1466              	.LVL106:
 258:src/console.c ****   sys_delay (2500);
 1467              		.loc 2 258 3 view .LVU366
ARM GAS  /tmp/ccZ4XUVa.s 			page 41


 1468 003a 0F4B     		ldr	r3, .L127+20
 1469 003c 40F6C410 		movw	r0, #2500
 1470 0040 9847     		blx	r3
 1471              	.LVL107:
 259:src/console.c ****   /* wait_for_key_press(); */
 260:src/console.c ****   //  key_pop_all();
 261:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 262:src/console.c ****   // key_pop_all();
 263:src/console.c ****   strcpy( print_string, spaces );
 1472              		.loc 2 263 3 view .LVU367
 1473 0042 3946     		mov	r1, r7
 1474 0044 2046     		mov	r0, r4
 1475 0046 FFF7FEFF 		bl	strcpy
 1476              	.LVL108:
 264:src/console.c ****   moveto (3, 1);
 1477              		.loc 2 264 3 view .LVU368
 1478 004a 0121     		movs	r1, #1
 1479 004c 0320     		movs	r0, #3
 1480 004e FFF7FEFF 		bl	moveto
 1481              	.LVL109:
 265:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1482              		.loc 2 265 3 view .LVU369
 1483 0052 B06B     		ldr	r0, [r6, #56]
 1484 0054 2146     		mov	r1, r4
 1485 0056 A847     		blx	r5
 1486              	.LVL110:
 266:src/console.c ****   lcd_refresh();
 1487              		.loc 2 266 3 view .LVU370
 1488 0058 4346     		mov	r3, r8
 267:src/console.c ****   // while (key_empty()<=0);; // wait for release
 268:src/console.c ****   // key_pop_all();
 269:src/console.c **** }
 1489              		.loc 2 269 1 is_stmt 0 view .LVU371
 1490 005a 02B0     		add	sp, sp, #8
 1491              		.cfi_def_cfa_offset 24
 1492              	.LVL111:
 1493              		.loc 2 269 1 view .LVU372
 1494              		@ sp needed
 1495 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1496              		.cfi_restore 14
 1497              		.cfi_restore 8
 1498              		.cfi_restore 7
 1499              		.cfi_restore 6
 1500              		.cfi_restore 5
 1501              		.cfi_restore 4
 1502              		.cfi_def_cfa_offset 0
 1503              	.LVL112:
 266:src/console.c ****   lcd_refresh();
 1504              		.loc 2 266 3 view .LVU373
 1505 0060 1847     		bx	r3	@ indirect register sibling call
 1506              	.LVL113:
 1507              	.L128:
 1508 0062 00BF     		.align	2
 1509              	.L127:
 1510 0064 00000000 		.word	print_string
 1511 0068 00000000 		.word	.LANCHOR6
 1512 006c 00200010 		.word	268443648
ARM GAS  /tmp/ccZ4XUVa.s 			page 42


 1513 0070 B1020008 		.word	134218417
 1514 0074 00000000 		.word	.LC1
 1515 0078 05040008 		.word	134218757
 1516 007c 31020008 		.word	134218289
 1517              		.cfi_endproc
 1518              	.LFE21:
 1520              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 1521              		.align	2
 1522              	.LC2:
 1523 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 1523      692C2531 
 1523      337300
 1524              		.section	.text.print_debug2,"ax",%progbits
 1525              		.align	1
 1526              		.p2align 2,,3
 1527              		.global	print_debug2
 1528              		.syntax unified
 1529              		.thumb
 1530              		.thumb_func
 1531              		.fpu fpv4-sp-d16
 1533              	print_debug2:
 1534              	.LVL114:
 1535              	.LFB22:
 270:src/console.c **** 
 271:src/console.c **** void print_debug2 (int i, char* j) {
 1536              		.loc 2 271 36 is_stmt 1 view -0
 1537              		.cfi_startproc
 1538              		@ args = 0, pretend = 0, frame = 8
 1539              		@ frame_needed = 0, uses_anonymous_args = 0
 272:src/console.c ****   strcpy( print_string, spaces );
 1540              		.loc 2 272 3 view .LVU375
 271:src/console.c ****   strcpy( print_string, spaces );
 1541              		.loc 2 271 36 is_stmt 0 view .LVU376
 1542 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1543              		.cfi_def_cfa_offset 24
 1544              		.cfi_offset 4, -24
 1545              		.cfi_offset 5, -20
 1546              		.cfi_offset 6, -16
 1547              		.cfi_offset 7, -12
 1548              		.cfi_offset 8, -8
 1549              		.cfi_offset 14, -4
 1550              		.loc 2 272 3 view .LVU377
 1551 0004 174C     		ldr	r4, .L131
 1552 0006 184F     		ldr	r7, .L131+4
 273:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 274:src/console.c ****   moveto (3, 1);
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1553              		.loc 2 275 3 view .LVU378
 1554 0008 184E     		ldr	r6, .L131+8
 1555 000a 194D     		ldr	r5, .L131+12
 276:src/console.c ****   lcd_refresh();
 1556              		.loc 2 276 3 view .LVU379
 1557 000c DFF86C80 		ldr	r8, .L131+24
 271:src/console.c ****   strcpy( print_string, spaces );
 1558              		.loc 2 271 36 view .LVU380
 1559 0010 82B0     		sub	sp, sp, #8
 1560              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccZ4XUVa.s 			page 43


 271:src/console.c ****   strcpy( print_string, spaces );
 1561              		.loc 2 271 36 view .LVU381
 1562 0012 0190     		str	r0, [sp, #4]
 1563 0014 0091     		str	r1, [sp]
 272:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1564              		.loc 2 272 3 view .LVU382
 1565 0016 2046     		mov	r0, r4
 1566              	.LVL115:
 272:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1567              		.loc 2 272 3 view .LVU383
 1568 0018 3946     		mov	r1, r7
 1569              	.LVL116:
 272:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1570              		.loc 2 272 3 view .LVU384
 1571 001a FFF7FEFF 		bl	strcpy
 1572              	.LVL117:
 273:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 1573              		.loc 2 273 3 is_stmt 1 view .LVU385
 1574 001e DDE90032 		ldrd	r3, r2, [sp]
 1575 0022 1449     		ldr	r1, .L131+16
 1576 0024 2046     		mov	r0, r4
 1577 0026 FFF7FEFF 		bl	sprintf
 1578              	.LVL118:
 274:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1579              		.loc 2 274 3 view .LVU386
 1580 002a 0121     		movs	r1, #1
 1581 002c 0320     		movs	r0, #3
 1582 002e FFF7FEFF 		bl	moveto
 1583              	.LVL119:
 275:src/console.c ****   lcd_refresh();
 1584              		.loc 2 275 3 view .LVU387
 1585 0032 2146     		mov	r1, r4
 1586 0034 B06B     		ldr	r0, [r6, #56]
 1587 0036 A847     		blx	r5
 1588              	.LVL120:
 1589              		.loc 2 276 3 view .LVU388
 1590 0038 C047     		blx	r8
 1591              	.LVL121:
 277:src/console.c ****   sys_delay (2500);
 1592              		.loc 2 277 3 view .LVU389
 1593 003a 0F4B     		ldr	r3, .L131+20
 1594 003c 40F6C410 		movw	r0, #2500
 1595 0040 9847     		blx	r3
 1596              	.LVL122:
 278:src/console.c ****   /* wait_for_key_press(); */
 279:src/console.c ****   //  key_pop_all();
 280:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 281:src/console.c ****   // key_pop_all();
 282:src/console.c ****   strcpy( print_string, spaces );
 1597              		.loc 2 282 3 view .LVU390
 1598 0042 3946     		mov	r1, r7
 1599 0044 2046     		mov	r0, r4
 1600 0046 FFF7FEFF 		bl	strcpy
 1601              	.LVL123:
 283:src/console.c ****   moveto (3, 1);
 1602              		.loc 2 283 3 view .LVU391
 1603 004a 0121     		movs	r1, #1
ARM GAS  /tmp/ccZ4XUVa.s 			page 44


 1604 004c 0320     		movs	r0, #3
 1605 004e FFF7FEFF 		bl	moveto
 1606              	.LVL124:
 284:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 1607              		.loc 2 284 3 view .LVU392
 1608 0052 B06B     		ldr	r0, [r6, #56]
 1609 0054 2146     		mov	r1, r4
 1610 0056 A847     		blx	r5
 1611              	.LVL125:
 285:src/console.c ****   lcd_refresh();
 1612              		.loc 2 285 3 view .LVU393
 1613 0058 4346     		mov	r3, r8
 286:src/console.c ****   // while (key_empty()<=0);; // wait for release
 287:src/console.c ****   // key_pop_all();
 288:src/console.c **** }
 1614              		.loc 2 288 1 is_stmt 0 view .LVU394
 1615 005a 02B0     		add	sp, sp, #8
 1616              		.cfi_def_cfa_offset 24
 1617              	.LVL126:
 1618              		.loc 2 288 1 view .LVU395
 1619              		@ sp needed
 1620 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1621              		.cfi_restore 14
 1622              		.cfi_restore 8
 1623              		.cfi_restore 7
 1624              		.cfi_restore 6
 1625              		.cfi_restore 5
 1626              		.cfi_restore 4
 1627              		.cfi_def_cfa_offset 0
 1628              	.LVL127:
 285:src/console.c ****   lcd_refresh();
 1629              		.loc 2 285 3 view .LVU396
 1630 0060 1847     		bx	r3	@ indirect register sibling call
 1631              	.LVL128:
 1632              	.L132:
 1633 0062 00BF     		.align	2
 1634              	.L131:
 1635 0064 00000000 		.word	print_string
 1636 0068 00000000 		.word	.LANCHOR6
 1637 006c 00200010 		.word	268443648
 1638 0070 B1020008 		.word	134218417
 1639 0074 00000000 		.word	.LC2
 1640 0078 05040008 		.word	134218757
 1641 007c 31020008 		.word	134218289
 1642              		.cfi_endproc
 1643              	.LFE22:
 1645              		.section	.text.do_now,"ax",%progbits
 1646              		.align	1
 1647              		.p2align 2,,3
 1648              		.global	do_now
 1649              		.syntax unified
 1650              		.thumb
 1651              		.thumb_func
 1652              		.fpu fpv4-sp-d16
 1654              	do_now:
 1655              	.LVL129:
 1656              	.LFB23:
ARM GAS  /tmp/ccZ4XUVa.s 			page 45


 289:src/console.c **** 
 290:src/console.c **** void do_now (int key, int shift) {
 1657              		.loc 2 290 34 is_stmt 1 view -0
 1658              		.cfi_startproc
 1659              		@ args = 0, pretend = 0, frame = 8
 1660              		@ frame_needed = 0, uses_anonymous_args = 0
 1661              		@ link register save eliminated.
 291:src/console.c ****   struct _ndmap temp;
 1662              		.loc 2 291 3 view .LVU398
 292:src/console.c ****   temp.key_34s = key;
 1663              		.loc 2 292 3 view .LVU399
 290:src/console.c ****   struct _ndmap temp;
 1664              		.loc 2 290 34 is_stmt 0 view .LVU400
 1665 0000 82B0     		sub	sp, sp, #8
 1666              		.cfi_def_cfa_offset 8
 293:src/console.c ****   temp.shift = shift;
 294:src/console.c ****   process_keycode_with_shift (temp);
 1667              		.loc 2 294 3 view .LVU401
 1668 0002 02AB     		add	r3, sp, #8
 292:src/console.c ****   temp.shift = shift;
 1669              		.loc 2 292 16 view .LVU402
 1670 0004 8DF80000 		strb	r0, [sp]
 293:src/console.c ****   temp.shift = shift;
 1671              		.loc 2 293 3 is_stmt 1 view .LVU403
 293:src/console.c ****   temp.shift = shift;
 1672              		.loc 2 293 14 is_stmt 0 view .LVU404
 1673 0008 0191     		str	r1, [sp, #4]
 1674              		.loc 2 294 3 is_stmt 1 view .LVU405
 1675 000a 13E90300 		ldmdb	r3, {r0, r1}
 1676              	.LVL130:
 295:src/console.c **** }
 1677              		.loc 2 295 1 is_stmt 0 view .LVU406
 1678 000e 02B0     		add	sp, sp, #8
 1679              		.cfi_def_cfa_offset 0
 1680              		@ sp needed
 294:src/console.c **** }
 1681              		.loc 2 294 3 view .LVU407
 1682 0010 FFF7FEBF 		b	process_keycode_with_shift
 1683              	.LVL131:
 294:src/console.c **** }
 1684              		.loc 2 294 3 view .LVU408
 1685              		.cfi_endproc
 1686              	.LFE23:
 1688              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 1689              		.align	2
 1690              	.LC3:
 1691 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 1691      502F7770 
 1691      3334735F 
 1691      68656C70 
 1691      2E68746D 
 1692              		.section	.text.do_multi,"ax",%progbits
 1693              		.align	1
 1694              		.p2align 2,,3
 1695              		.global	do_multi
 1696              		.syntax unified
 1697              		.thumb
ARM GAS  /tmp/ccZ4XUVa.s 			page 46


 1698              		.thumb_func
 1699              		.fpu fpv4-sp-d16
 1701              	do_multi:
 1702              	.LVL132:
 1703              	.LFB24:
 296:src/console.c **** 
 297:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 1704              		.loc 2 297 42 is_stmt 1 view -0
 1705              		.cfi_startproc
 1706              		@ args = 0, pretend = 0, frame = 16
 1707              		@ frame_needed = 0, uses_anonymous_args = 0
 1708              		.loc 2 297 42 is_stmt 0 view .LVU410
 1709 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1710              		.cfi_def_cfa_offset 24
 1711              		.cfi_offset 4, -24
 1712              		.cfi_offset 5, -20
 1713              		.cfi_offset 6, -16
 1714              		.cfi_offset 7, -12
 1715              		.cfi_offset 8, -8
 1716              		.cfi_offset 14, -4
 1717 0004 84B0     		sub	sp, sp, #16
 1718              		.cfi_def_cfa_offset 40
 1719              	.LVL133:
 298:src/console.c ****   switch(r.shift) {
 1720              		.loc 2 298 3 is_stmt 1 view .LVU411
 297:src/console.c ****   switch(r.shift) {
 1721              		.loc 2 297 42 is_stmt 0 view .LVU412
 1722 0006 6C46     		mov	r4, sp
 1723 0008 531E     		subs	r3, r2, #1
 1724 000a 84E80600 		stm	r4, {r1, r2}
 1725              	.LVL134:
 297:src/console.c ****   switch(r.shift) {
 1726              		.loc 2 297 42 view .LVU413
 1727 000e 0546     		mov	r5, r0
 1728 0010 0C2B     		cmp	r3, #12
 1729 0012 0FD8     		bhi	.L136
 1730 0014 DFE803F0 		tbb	[pc, r3]
 1731              	.L138:
 1732 0018 15       		.byte	(.L150-.L138)/2
 1733 0019 3D       		.byte	(.L149-.L138)/2
 1734 001a 47       		.byte	(.L148-.L138)/2
 1735 001b 51       		.byte	(.L147-.L138)/2
 1736 001c 5B       		.byte	(.L146-.L138)/2
 1737 001d 65       		.byte	(.L145-.L138)/2
 1738 001e 6F       		.byte	(.L144-.L138)/2
 1739 001f 79       		.byte	(.L143-.L138)/2
 1740 0020 82       		.byte	(.L142-.L138)/2
 1741 0021 8C       		.byte	(.L141-.L138)/2
 1742 0022 95       		.byte	(.L140-.L138)/2
 1743 0023 9E       		.byte	(.L139-.L138)/2
 1744 0024 07       		.byte	(.L137-.L138)/2
 1745 0025 00       		.p2align 1
 1746              	.L137:
 299:src/console.c ****   case LASTX: // Last x via RCL L
 300:src/console.c ****     do_now (K11, 0); // RCL
 301:src/console.c ****     do_now (K_RELEASE,0); // release
 302:src/console.c ****     do_now (K15,0); // TAN key
ARM GAS  /tmp/ccZ4XUVa.s 			page 47


 303:src/console.c ****     r.key_34s = K_RELEASE;
 304:src/console.c ****     r.shift = 0; // set up for release;
 305:src/console.c ****     break;
 306:src/console.c ****   case ONSTO: // flash_backup()
 307:src/console.c ****     flash_backup(OP_SAVE);
 308:src/console.c ****     r = no_key;
 309:src/console.c ****     break;
 310:src/console.c ****   case ONRCL: // flash_restore()
 311:src/console.c ****     flash_restore(OP_LOAD);
 312:src/console.c ****     r = no_key;
 313:src/console.c ****     break;
 314:src/console.c ****   case WRLIB: // save library file
 315:src/console.c ****     save_lib_file(1);
 316:src/console.c ****     r = no_key;
 317:src/console.c ****     break;
 318:src/console.c ****   case LLIB: // load library file
 319:src/console.c ****     load_lib_file(1);
 320:src/console.c ****     r = no_key;
 321:src/console.c ****     break;
 322:src/console.c ****   case WRTST: // save state file
 323:src/console.c ****     save_ram_file(1);
 324:src/console.c ****     r = no_key;
 325:src/console.c ****     break;
 326:src/console.c ****   case LDST:
 327:src/console.c ****     load_ram_file(1);
 328:src/console.c ****     r = no_key;
 329:src/console.c ****     break;
 330:src/console.c ****   case LDPRG:
 331:src/console.c ****     load_prog_file();
 332:src/console.c ****     r = no_key;
 333:src/console.c ****     break;
 334:src/console.c ****   case SVPRG:
 335:src/console.c ****     save_prog_file();
 336:src/console.c ****     r = no_key;
 337:src/console.c ****     break;
 338:src/console.c ****   case HELP:
 339:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 340:src/console.c ****     r = no_key;
 341:src/console.c ****     break;
 342:src/console.c ****   case DOTS:
 343:src/console.c ****     do_all_dots();
 344:src/console.c ****     r = no_key;
 345:src/console.c ****     break;
 346:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 347:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
 348:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case DEFMEN:
 352:src/console.c ****     toggle_default_menu();
 1747              		.loc 2 352 5 is_stmt 1 view .LVU414
 1748              	.LBB88:
 1749              	.LBI88:
  17:src/menu.c    ****   if (current_menu == default_menu) {
 1750              		.loc 1 17 6 view .LVU415
 1751              	.LBB89:
  18:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
ARM GAS  /tmp/ccZ4XUVa.s 			page 48


 1752              		.loc 1 18 3 view .LVU416
  18:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 1753              		.loc 1 18 20 is_stmt 0 view .LVU417
 1754 0026 5A49     		ldr	r1, .L155
 1755 0028 5A4A     		ldr	r2, .L155+4
 1756 002a 0868     		ldr	r0, [r1]
 1757              	.LVL135:
  18:src/menu.c    ****     current_menu = default_menu = 15 - default_menu;
 1758              		.loc 1 18 6 view .LVU418
 1759 002c 1368     		ldr	r3, [r2]
 1760 002e 8342     		cmp	r3, r0
 1761 0030 00F0A980 		beq	.L154
 1762              	.L136:
 1763              	.LBE89:
 1764              	.LBE88:
 353:src/console.c ****     r = no_key;
 354:src/console.c ****     break;
 355:src/console.c ****   default:
 356:src/console.c ****     r = no_key;
 1765              		.loc 2 356 5 is_stmt 1 view .LVU419
 1766              		.loc 2 356 7 is_stmt 0 view .LVU420
 1767 0034 584B     		ldr	r3, .L155+8
 1768 0036 93E80300 		ldm	r3, {r0, r1}
 1769 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1770              	.LVL136:
 1771              		.loc 2 356 7 view .LVU421
 1772 003c 84E80300 		stm	r4, {r0, r1}
 1773 0040 1CE0     		b	.L151
 1774              	.LVL137:
 1775              	.L150:
 300:src/console.c ****     do_now (K_RELEASE,0); // release
 1776              		.loc 2 300 5 is_stmt 1 view .LVU422
 1777              	.LBB91:
 1778              	.LBI91:
 290:src/console.c ****   struct _ndmap temp;
 1779              		.loc 2 290 6 view .LVU423
 1780              	.LBB92:
 291:src/console.c ****   temp.key_34s = key;
 1781              		.loc 2 291 3 view .LVU424
 292:src/console.c ****   temp.shift = shift;
 1782              		.loc 2 292 3 view .LVU425
 292:src/console.c ****   temp.shift = shift;
 1783              		.loc 2 292 16 is_stmt 0 view .LVU426
 1784 0042 0723     		movs	r3, #7
 293:src/console.c ****   process_keycode_with_shift (temp);
 1785              		.loc 2 293 14 view .LVU427
 1786 0044 0026     		movs	r6, #0
 292:src/console.c ****   temp.shift = shift;
 1787              		.loc 2 292 16 view .LVU428
 1788 0046 8DF80830 		strb	r3, [sp, #8]
 293:src/console.c ****   process_keycode_with_shift (temp);
 1789              		.loc 2 293 3 is_stmt 1 view .LVU429
 294:src/console.c **** }
 1790              		.loc 2 294 3 is_stmt 0 view .LVU430
 1791 004a 0DF10808 		add	r8, sp, #8
 293:src/console.c ****   process_keycode_with_shift (temp);
 1792              		.loc 2 293 14 view .LVU431
ARM GAS  /tmp/ccZ4XUVa.s 			page 49


 1793 004e 0396     		str	r6, [sp, #12]
 294:src/console.c **** }
 1794              		.loc 2 294 3 is_stmt 1 view .LVU432
 1795 0050 98E80300 		ldm	r8, {r0, r1}
 1796              	.LVL138:
 294:src/console.c **** }
 1797              		.loc 2 294 3 is_stmt 0 view .LVU433
 1798              	.LBE92:
 1799              	.LBE91:
 1800              	.LBB94:
 1801              	.LBB95:
 292:src/console.c ****   temp.shift = shift;
 1802              		.loc 2 292 16 view .LVU434
 1803 0054 6327     		movs	r7, #99
 1804              	.LBE95:
 1805              	.LBE94:
 1806              	.LBB97:
 1807              	.LBB93:
 294:src/console.c **** }
 1808              		.loc 2 294 3 view .LVU435
 1809 0056 FFF7FEFF 		bl	process_keycode_with_shift
 1810              	.LVL139:
 294:src/console.c **** }
 1811              		.loc 2 294 3 view .LVU436
 1812              	.LBE93:
 1813              	.LBE97:
 301:src/console.c ****     do_now (K15,0); // TAN key
 1814              		.loc 2 301 5 is_stmt 1 view .LVU437
 1815              	.LBB98:
 1816              	.LBI94:
 290:src/console.c ****   struct _ndmap temp;
 1817              		.loc 2 290 6 view .LVU438
 1818              	.LBB96:
 291:src/console.c ****   temp.key_34s = key;
 1819              		.loc 2 291 3 view .LVU439
 292:src/console.c ****   temp.shift = shift;
 1820              		.loc 2 292 3 view .LVU440
 293:src/console.c ****   process_keycode_with_shift (temp);
 1821              		.loc 2 293 14 is_stmt 0 view .LVU441
 1822 005a 0396     		str	r6, [sp, #12]
 292:src/console.c ****   temp.shift = shift;
 1823              		.loc 2 292 16 view .LVU442
 1824 005c 8DF80870 		strb	r7, [sp, #8]
 293:src/console.c ****   process_keycode_with_shift (temp);
 1825              		.loc 2 293 3 is_stmt 1 view .LVU443
 294:src/console.c **** }
 1826              		.loc 2 294 3 view .LVU444
 1827 0060 98E80300 		ldm	r8, {r0, r1}
 1828 0064 FFF7FEFF 		bl	process_keycode_with_shift
 1829              	.LVL140:
 294:src/console.c **** }
 1830              		.loc 2 294 3 is_stmt 0 view .LVU445
 1831              	.LBE96:
 1832              	.LBE98:
 302:src/console.c ****     r.key_34s = K_RELEASE;
 1833              		.loc 2 302 5 is_stmt 1 view .LVU446
 1834              	.LBB99:
ARM GAS  /tmp/ccZ4XUVa.s 			page 50


 1835              	.LBI99:
 290:src/console.c ****   struct _ndmap temp;
 1836              		.loc 2 290 6 view .LVU447
 1837              	.LBB100:
 291:src/console.c ****   temp.key_34s = key;
 1838              		.loc 2 291 3 view .LVU448
 292:src/console.c ****   temp.shift = shift;
 1839              		.loc 2 292 3 view .LVU449
 292:src/console.c ****   temp.shift = shift;
 1840              		.loc 2 292 16 is_stmt 0 view .LVU450
 1841 0068 0B23     		movs	r3, #11
 1842 006a 8DF80830 		strb	r3, [sp, #8]
 293:src/console.c ****   process_keycode_with_shift (temp);
 1843              		.loc 2 293 3 is_stmt 1 view .LVU451
 294:src/console.c **** }
 1844              		.loc 2 294 3 view .LVU452
 293:src/console.c ****   process_keycode_with_shift (temp);
 1845              		.loc 2 293 14 is_stmt 0 view .LVU453
 1846 006e 0396     		str	r6, [sp, #12]
 294:src/console.c **** }
 1847              		.loc 2 294 3 view .LVU454
 1848 0070 98E80300 		ldm	r8, {r0, r1}
 1849 0074 FFF7FEFF 		bl	process_keycode_with_shift
 1850              	.LVL141:
 294:src/console.c **** }
 1851              		.loc 2 294 3 view .LVU455
 1852              	.LBE100:
 1853              	.LBE99:
 303:src/console.c ****     r.shift = 0; // set up for release;
 1854              		.loc 2 303 5 is_stmt 1 view .LVU456
 304:src/console.c ****     break;
 1855              		.loc 2 304 5 view .LVU457
 305:src/console.c ****   case ONSTO: // flash_backup()
 1856              		.loc 2 305 5 view .LVU458
 304:src/console.c ****     break;
 1857              		.loc 2 304 13 is_stmt 0 view .LVU459
 1858 0078 3146     		mov	r1, r6
 303:src/console.c ****     r.shift = 0; // set up for release;
 1859              		.loc 2 303 15 view .LVU460
 1860 007a 3B46     		mov	r3, r7
 1861              	.LVL142:
 1862              	.L151:
 357:src/console.c ****   }
 358:src/console.c ****   return r;
 1863              		.loc 2 358 3 is_stmt 1 view .LVU461
 1864              		.loc 2 358 10 is_stmt 0 view .LVU462
 1865 007c 8DF80030 		strb	r3, [sp]
 1866 0080 0191     		str	r1, [sp, #4]
 1867 0082 94E80300 		ldm	r4, {r0, r1}
 1868              	.LVL143:
 1869              		.loc 2 358 10 view .LVU463
 1870 0086 85E80300 		stm	r5, {r0, r1}
 359:src/console.c **** }
 1871              		.loc 2 359 1 view .LVU464
 1872 008a 2846     		mov	r0, r5
 1873 008c 04B0     		add	sp, sp, #16
 1874              		.cfi_remember_state
ARM GAS  /tmp/ccZ4XUVa.s 			page 51


 1875              		.cfi_def_cfa_offset 24
 1876              		@ sp needed
 1877 008e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1878              	.LVL144:
 1879              	.L149:
 1880              		.cfi_restore_state
 307:src/console.c ****     r = no_key;
 1881              		.loc 2 307 5 is_stmt 1 view .LVU465
 1882 0092 AD20     		movs	r0, #173
 1883              	.LVL145:
 307:src/console.c ****     r = no_key;
 1884              		.loc 2 307 5 is_stmt 0 view .LVU466
 1885 0094 FFF7FEFF 		bl	flash_backup
 1886              	.LVL146:
 308:src/console.c ****     break;
 1887              		.loc 2 308 5 is_stmt 1 view .LVU467
 308:src/console.c ****     break;
 1888              		.loc 2 308 7 is_stmt 0 view .LVU468
 1889 0098 3F4B     		ldr	r3, .L155+8
 1890 009a 93E80300 		ldm	r3, {r0, r1}
 1891 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1892              	.LVL147:
 309:src/console.c ****   case ONRCL: // flash_restore()
 1893              		.loc 2 309 5 is_stmt 1 view .LVU469
 308:src/console.c ****     break;
 1894              		.loc 2 308 7 is_stmt 0 view .LVU470
 1895 00a0 84E80300 		stm	r4, {r0, r1}
 309:src/console.c ****   case ONRCL: // flash_restore()
 1896              		.loc 2 309 5 view .LVU471
 1897 00a4 EAE7     		b	.L151
 1898              	.LVL148:
 1899              	.L148:
 311:src/console.c ****     r = no_key;
 1900              		.loc 2 311 5 is_stmt 1 view .LVU472
 1901 00a6 AE20     		movs	r0, #174
 1902              	.LVL149:
 311:src/console.c ****     r = no_key;
 1903              		.loc 2 311 5 is_stmt 0 view .LVU473
 1904 00a8 FFF7FEFF 		bl	flash_restore
 1905              	.LVL150:
 312:src/console.c ****     break;
 1906              		.loc 2 312 5 is_stmt 1 view .LVU474
 312:src/console.c ****     break;
 1907              		.loc 2 312 7 is_stmt 0 view .LVU475
 1908 00ac 3A4B     		ldr	r3, .L155+8
 1909 00ae 93E80300 		ldm	r3, {r0, r1}
 1910 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1911              	.LVL151:
 313:src/console.c ****   case WRLIB: // save library file
 1912              		.loc 2 313 5 is_stmt 1 view .LVU476
 312:src/console.c ****     break;
 1913              		.loc 2 312 7 is_stmt 0 view .LVU477
 1914 00b4 84E80300 		stm	r4, {r0, r1}
 313:src/console.c ****   case WRLIB: // save library file
 1915              		.loc 2 313 5 view .LVU478
 1916 00b8 E0E7     		b	.L151
 1917              	.LVL152:
ARM GAS  /tmp/ccZ4XUVa.s 			page 52


 1918              	.L147:
 315:src/console.c ****     r = no_key;
 1919              		.loc 2 315 5 is_stmt 1 view .LVU479
 1920 00ba 0120     		movs	r0, #1
 1921              	.LVL153:
 315:src/console.c ****     r = no_key;
 1922              		.loc 2 315 5 is_stmt 0 view .LVU480
 1923 00bc FFF7FEFF 		bl	save_lib_file
 1924              	.LVL154:
 316:src/console.c ****     break;
 1925              		.loc 2 316 5 is_stmt 1 view .LVU481
 316:src/console.c ****     break;
 1926              		.loc 2 316 7 is_stmt 0 view .LVU482
 1927 00c0 354B     		ldr	r3, .L155+8
 1928 00c2 93E80300 		ldm	r3, {r0, r1}
 1929 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1930              	.LVL155:
 317:src/console.c ****   case LLIB: // load library file
 1931              		.loc 2 317 5 is_stmt 1 view .LVU483
 316:src/console.c ****     break;
 1932              		.loc 2 316 7 is_stmt 0 view .LVU484
 1933 00c8 84E80300 		stm	r4, {r0, r1}
 317:src/console.c ****   case LLIB: // load library file
 1934              		.loc 2 317 5 view .LVU485
 1935 00cc D6E7     		b	.L151
 1936              	.LVL156:
 1937              	.L146:
 319:src/console.c ****     r = no_key;
 1938              		.loc 2 319 5 is_stmt 1 view .LVU486
 1939 00ce 0120     		movs	r0, #1
 1940              	.LVL157:
 319:src/console.c ****     r = no_key;
 1941              		.loc 2 319 5 is_stmt 0 view .LVU487
 1942 00d0 FFF7FEFF 		bl	load_lib_file
 1943              	.LVL158:
 320:src/console.c ****     break;
 1944              		.loc 2 320 5 is_stmt 1 view .LVU488
 320:src/console.c ****     break;
 1945              		.loc 2 320 7 is_stmt 0 view .LVU489
 1946 00d4 304B     		ldr	r3, .L155+8
 1947 00d6 93E80300 		ldm	r3, {r0, r1}
 1948 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1949              	.LVL159:
 321:src/console.c ****   case WRTST: // save state file
 1950              		.loc 2 321 5 is_stmt 1 view .LVU490
 320:src/console.c ****     break;
 1951              		.loc 2 320 7 is_stmt 0 view .LVU491
 1952 00dc 84E80300 		stm	r4, {r0, r1}
 321:src/console.c ****   case WRTST: // save state file
 1953              		.loc 2 321 5 view .LVU492
 1954 00e0 CCE7     		b	.L151
 1955              	.LVL160:
 1956              	.L145:
 323:src/console.c ****     r = no_key;
 1957              		.loc 2 323 5 is_stmt 1 view .LVU493
 1958 00e2 0120     		movs	r0, #1
 1959              	.LVL161:
ARM GAS  /tmp/ccZ4XUVa.s 			page 53


 323:src/console.c ****     r = no_key;
 1960              		.loc 2 323 5 is_stmt 0 view .LVU494
 1961 00e4 FFF7FEFF 		bl	save_ram_file
 1962              	.LVL162:
 324:src/console.c ****     break;
 1963              		.loc 2 324 5 is_stmt 1 view .LVU495
 324:src/console.c ****     break;
 1964              		.loc 2 324 7 is_stmt 0 view .LVU496
 1965 00e8 2B4B     		ldr	r3, .L155+8
 1966 00ea 93E80300 		ldm	r3, {r0, r1}
 1967 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1968              	.LVL163:
 325:src/console.c ****   case LDST:
 1969              		.loc 2 325 5 is_stmt 1 view .LVU497
 324:src/console.c ****     break;
 1970              		.loc 2 324 7 is_stmt 0 view .LVU498
 1971 00f0 84E80300 		stm	r4, {r0, r1}
 325:src/console.c ****   case LDST:
 1972              		.loc 2 325 5 view .LVU499
 1973 00f4 C2E7     		b	.L151
 1974              	.LVL164:
 1975              	.L144:
 327:src/console.c ****     r = no_key;
 1976              		.loc 2 327 5 is_stmt 1 view .LVU500
 1977 00f6 0120     		movs	r0, #1
 1978              	.LVL165:
 327:src/console.c ****     r = no_key;
 1979              		.loc 2 327 5 is_stmt 0 view .LVU501
 1980 00f8 FFF7FEFF 		bl	load_ram_file
 1981              	.LVL166:
 328:src/console.c ****     break;
 1982              		.loc 2 328 5 is_stmt 1 view .LVU502
 328:src/console.c ****     break;
 1983              		.loc 2 328 7 is_stmt 0 view .LVU503
 1984 00fc 264B     		ldr	r3, .L155+8
 1985 00fe 93E80300 		ldm	r3, {r0, r1}
 1986 0102 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1987              	.LVL167:
 329:src/console.c ****   case LDPRG:
 1988              		.loc 2 329 5 is_stmt 1 view .LVU504
 328:src/console.c ****     break;
 1989              		.loc 2 328 7 is_stmt 0 view .LVU505
 1990 0104 84E80300 		stm	r4, {r0, r1}
 329:src/console.c ****   case LDPRG:
 1991              		.loc 2 329 5 view .LVU506
 1992 0108 B8E7     		b	.L151
 1993              	.LVL168:
 1994              	.L143:
 331:src/console.c ****     r = no_key;
 1995              		.loc 2 331 5 is_stmt 1 view .LVU507
 1996 010a FFF7FEFF 		bl	load_prog_file
 1997              	.LVL169:
 332:src/console.c ****     break;
 1998              		.loc 2 332 5 view .LVU508
 332:src/console.c ****     break;
 1999              		.loc 2 332 7 is_stmt 0 view .LVU509
 2000 010e 224B     		ldr	r3, .L155+8
ARM GAS  /tmp/ccZ4XUVa.s 			page 54


 2001 0110 93E80300 		ldm	r3, {r0, r1}
 2002 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2003              	.LVL170:
 333:src/console.c ****   case SVPRG:
 2004              		.loc 2 333 5 is_stmt 1 view .LVU510
 332:src/console.c ****     break;
 2005              		.loc 2 332 7 is_stmt 0 view .LVU511
 2006 0116 84E80300 		stm	r4, {r0, r1}
 333:src/console.c ****   case SVPRG:
 2007              		.loc 2 333 5 view .LVU512
 2008 011a AFE7     		b	.L151
 2009              	.LVL171:
 2010              	.L142:
 339:src/console.c ****     r = no_key;
 2011              		.loc 2 339 5 is_stmt 1 view .LVU513
 2012 011c 1F4B     		ldr	r3, .L155+12
 2013 011e 2048     		ldr	r0, .L155+16
 2014              	.LVL172:
 339:src/console.c ****     r = no_key;
 2015              		.loc 2 339 5 is_stmt 0 view .LVU514
 2016 0120 9847     		blx	r3
 2017              	.LVL173:
 340:src/console.c ****     break;
 2018              		.loc 2 340 5 is_stmt 1 view .LVU515
 340:src/console.c ****     break;
 2019              		.loc 2 340 7 is_stmt 0 view .LVU516
 2020 0122 1D4B     		ldr	r3, .L155+8
 2021 0124 93E80300 		ldm	r3, {r0, r1}
 2022 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2023              	.LVL174:
 341:src/console.c ****   case DOTS:
 2024              		.loc 2 341 5 is_stmt 1 view .LVU517
 340:src/console.c ****     break;
 2025              		.loc 2 340 7 is_stmt 0 view .LVU518
 2026 012a 84E80300 		stm	r4, {r0, r1}
 341:src/console.c ****   case DOTS:
 2027              		.loc 2 341 5 view .LVU519
 2028 012e A5E7     		b	.L151
 2029              	.LVL175:
 2030              	.L141:
 335:src/console.c ****     r = no_key;
 2031              		.loc 2 335 5 is_stmt 1 view .LVU520
 2032 0130 FFF7FEFF 		bl	save_prog_file
 2033              	.LVL176:
 336:src/console.c ****     break;
 2034              		.loc 2 336 5 view .LVU521
 336:src/console.c ****     break;
 2035              		.loc 2 336 7 is_stmt 0 view .LVU522
 2036 0134 184B     		ldr	r3, .L155+8
 2037 0136 93E80300 		ldm	r3, {r0, r1}
 2038 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2039              	.LVL177:
 337:src/console.c ****   case HELP:
 2040              		.loc 2 337 5 is_stmt 1 view .LVU523
 336:src/console.c ****     break;
 2041              		.loc 2 336 7 is_stmt 0 view .LVU524
 2042 013c 84E80300 		stm	r4, {r0, r1}
ARM GAS  /tmp/ccZ4XUVa.s 			page 55


 337:src/console.c ****   case HELP:
 2043              		.loc 2 337 5 view .LVU525
 2044 0140 9CE7     		b	.L151
 2045              	.LVL178:
 2046              	.L140:
 343:src/console.c ****     r = no_key;
 2047              		.loc 2 343 5 is_stmt 1 view .LVU526
 2048 0142 FFF7FEFF 		bl	do_all_dots
 2049              	.LVL179:
 344:src/console.c ****     break;
 2050              		.loc 2 344 5 view .LVU527
 344:src/console.c ****     break;
 2051              		.loc 2 344 7 is_stmt 0 view .LVU528
 2052 0146 144B     		ldr	r3, .L155+8
 2053 0148 93E80300 		ldm	r3, {r0, r1}
 2054 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2055              	.LVL180:
 345:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 2056              		.loc 2 345 5 is_stmt 1 view .LVU529
 344:src/console.c ****     break;
 2057              		.loc 2 344 7 is_stmt 0 view .LVU530
 2058 014e 84E80300 		stm	r4, {r0, r1}
 345:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 2059              		.loc 2 345 5 view .LVU531
 2060 0152 93E7     		b	.L151
 2061              	.LVL181:
 2062              	.L139:
 347:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 2063              		.loc 2 347 5 is_stmt 1 view .LVU532
 2064              	.LBB101:
 2065              	.LBI101:
 290:src/console.c ****   struct _ndmap temp;
 2066              		.loc 2 290 6 view .LVU533
 2067              	.LBB102:
 291:src/console.c ****   temp.key_34s = key;
 2068              		.loc 2 291 3 view .LVU534
 292:src/console.c ****   temp.shift = shift;
 2069              		.loc 2 292 3 view .LVU535
 292:src/console.c ****   temp.shift = shift;
 2070              		.loc 2 292 16 is_stmt 0 view .LVU536
 2071 0154 6323     		movs	r3, #99
 293:src/console.c ****   process_keycode_with_shift (temp);
 2072              		.loc 2 293 14 view .LVU537
 2073 0156 0027     		movs	r7, #0
 292:src/console.c ****   temp.shift = shift;
 2074              		.loc 2 292 16 view .LVU538
 2075 0158 8DF80830 		strb	r3, [sp, #8]
 293:src/console.c ****   process_keycode_with_shift (temp);
 2076              		.loc 2 293 3 is_stmt 1 view .LVU539
 293:src/console.c ****   process_keycode_with_shift (temp);
 2077              		.loc 2 293 14 is_stmt 0 view .LVU540
 2078 015c 0397     		str	r7, [sp, #12]
 294:src/console.c **** }
 2079              		.loc 2 294 3 is_stmt 1 view .LVU541
 2080 015e 02AE     		add	r6, sp, #8
 2081 0160 96E80300 		ldm	r6, {r0, r1}
 2082              	.LVL182:
ARM GAS  /tmp/ccZ4XUVa.s 			page 56


 294:src/console.c **** }
 2083              		.loc 2 294 3 is_stmt 0 view .LVU542
 2084 0164 FFF7FEFF 		bl	process_keycode_with_shift
 2085              	.LVL183:
 294:src/console.c **** }
 2086              		.loc 2 294 3 view .LVU543
 2087              	.LBE102:
 2088              	.LBE101:
 348:src/console.c ****     r = no_key;
 2089              		.loc 2 348 5 is_stmt 1 view .LVU544
 2090              	.LBB103:
 2091              	.LBI103:
 290:src/console.c ****   struct _ndmap temp;
 2092              		.loc 2 290 6 view .LVU545
 2093              	.LBB104:
 291:src/console.c ****   temp.key_34s = key;
 2094              		.loc 2 291 3 view .LVU546
 292:src/console.c ****   temp.shift = shift;
 2095              		.loc 2 292 3 view .LVU547
 292:src/console.c ****   temp.shift = shift;
 2096              		.loc 2 292 16 is_stmt 0 view .LVU548
 2097 0168 3323     		movs	r3, #51
 2098 016a 8DF80830 		strb	r3, [sp, #8]
 293:src/console.c ****   process_keycode_with_shift (temp);
 2099              		.loc 2 293 3 is_stmt 1 view .LVU549
 294:src/console.c **** }
 2100              		.loc 2 294 3 view .LVU550
 293:src/console.c ****   process_keycode_with_shift (temp);
 2101              		.loc 2 293 14 is_stmt 0 view .LVU551
 2102 016e 0397     		str	r7, [sp, #12]
 294:src/console.c **** }
 2103              		.loc 2 294 3 view .LVU552
 2104 0170 96E80300 		ldm	r6, {r0, r1}
 2105 0174 FFF7FEFF 		bl	process_keycode_with_shift
 2106              	.LVL184:
 294:src/console.c **** }
 2107              		.loc 2 294 3 view .LVU553
 2108              	.LBE104:
 2109              	.LBE103:
 349:src/console.c ****     break;
 2110              		.loc 2 349 5 is_stmt 1 view .LVU554
 349:src/console.c ****     break;
 2111              		.loc 2 349 7 is_stmt 0 view .LVU555
 2112 0178 074B     		ldr	r3, .L155+8
 2113 017a 93E80300 		ldm	r3, {r0, r1}
 2114 017e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2115              	.LVL185:
 350:src/console.c ****   case DEFMEN:
 2116              		.loc 2 350 5 is_stmt 1 view .LVU556
 349:src/console.c ****     break;
 2117              		.loc 2 349 7 is_stmt 0 view .LVU557
 2118 0180 84E80300 		stm	r4, {r0, r1}
 350:src/console.c ****   case DEFMEN:
 2119              		.loc 2 350 5 view .LVU558
 2120 0184 7AE7     		b	.L151
 2121              	.LVL186:
 2122              	.L154:
ARM GAS  /tmp/ccZ4XUVa.s 			page 57


 2123              	.LBB105:
 2124              	.LBB90:
  19:src/menu.c    ****   }
 2125              		.loc 1 19 5 is_stmt 1 view .LVU559
  19:src/menu.c    ****   }
 2126              		.loc 1 19 38 is_stmt 0 view .LVU560
 2127 0186 C3F10F03 		rsb	r3, r3, #15
  19:src/menu.c    ****   }
 2128              		.loc 1 19 33 view .LVU561
 2129 018a 0B60     		str	r3, [r1]
  19:src/menu.c    ****   }
 2130              		.loc 1 19 18 view .LVU562
 2131 018c 1360     		str	r3, [r2]
 2132              	.LBE90:
 2133              	.LBE105:
 353:src/console.c ****     break;
 2134              		.loc 2 353 5 is_stmt 1 view .LVU563
 2135 018e 51E7     		b	.L136
 2136              	.L156:
 2137              		.align	2
 2138              	.L155:
 2139 0190 00000000 		.word	.LANCHOR2
 2140 0194 00000000 		.word	.LANCHOR1
 2141 0198 00000000 		.word	.LANCHOR7
 2142 019c 49040008 		.word	134218825
 2143 01a0 00000000 		.word	.LC3
 2144              		.cfi_endproc
 2145              	.LFE24:
 2147              		.section	.text.program_main,"ax",%progbits
 2148              		.align	1
 2149              		.p2align 2,,3
 2150              		.global	program_main
 2151              		.syntax unified
 2152              		.thumb
 2153              		.thumb_func
 2154              		.fpu fpv4-sp-d16
 2156              	program_main:
 2157              	.LFB25:
 360:src/console.c **** 
 361:src/console.c **** void program_main(){
 2158              		.loc 2 361 20 view -0
 2159              		.cfi_startproc
 2160              		@ args = 0, pretend = 0, frame = 16
 2161              		@ frame_needed = 0, uses_anonymous_args = 0
 362:src/console.c ****   int c;
 2162              		.loc 2 362 3 view .LVU565
 363:src/console.c ****   struct _ndmap remapped;
 2163              		.loc 2 363 3 view .LVU566
 364:src/console.c **** 
 365:src/console.c ****   init_mem();
 2164              		.loc 2 365 3 view .LVU567
 361:src/console.c ****   int c;
 2165              		.loc 2 361 20 is_stmt 0 view .LVU568
 2166 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2167              		.cfi_def_cfa_offset 32
 2168              		.cfi_offset 4, -32
 2169              		.cfi_offset 5, -28
ARM GAS  /tmp/ccZ4XUVa.s 			page 58


 2170              		.cfi_offset 6, -24
 2171              		.cfi_offset 7, -20
 2172              		.cfi_offset 8, -16
 2173              		.cfi_offset 9, -12
 2174              		.cfi_offset 10, -8
 2175              		.cfi_offset 14, -4
 2176 0004 84B0     		sub	sp, sp, #16
 2177              		.cfi_def_cfa_offset 48
 2178              		.loc 2 365 3 view .LVU569
 2179 0006 FFF7FEFF 		bl	init_mem
 2180              	.LVL187:
 366:src/console.c ****   init_RegionTab();
 2181              		.loc 2 366 3 is_stmt 1 view .LVU570
 2182 000a FFF7FEFF 		bl	init_RegionTab
 2183              	.LVL188:
 367:src/console.c ****   init_34s();
 2184              		.loc 2 367 3 view .LVU571
 2185 000e FFF7FEFF 		bl	init_34s
 2186              	.LVL189:
 368:src/console.c ****   State2.flags = 1;  
 2187              		.loc 2 368 3 view .LVU572
 2188              		.loc 2 368 16 is_stmt 0 view .LVU573
 2189 0012 B04A     		ldr	r2, .L249
 2190 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 2191 0016 43F00103 		orr	r3, r3, #1
 2192 001a 1376     		strb	r3, [r2, #24]
 369:src/console.c ****   check_create_wp34sdir();
 2193              		.loc 2 369 3 is_stmt 1 view .LVU574
 2194 001c FFF7FEFF 		bl	check_create_wp34sdir
 2195              	.LVL190:
 370:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 2196              		.loc 2 370 3 view .LVU575
 2197              		.loc 2 370 8 is_stmt 0 view .LVU576
 2198 0020 0020     		movs	r0, #0
 2199 0022 FFF7FEFF 		bl	load_ram_file
 2200              	.LVL191:
 2201              		.loc 2 370 6 view .LVU577
 2202 0026 08B9     		cbnz	r0, .L158
 2203              		.loc 2 370 26 is_stmt 1 discriminator 1 view .LVU578
 2204              		.loc 2 370 34 is_stmt 0 discriminator 1 view .LVU579
 2205 0028 AB4B     		ldr	r3, .L249+4
 2206 002a 1860     		str	r0, [r3]
 2207              	.L158:
 371:src/console.c ****   load_backup_file(0);
 2208              		.loc 2 371 3 is_stmt 1 view .LVU580
 2209 002c 0020     		movs	r0, #0
 372:src/console.c ****   load_lib_file(0);
 373:src/console.c ****   t20->newln = 0;
 2210              		.loc 2 373 3 is_stmt 0 view .LVU581
 2211 002e AB4C     		ldr	r4, .L249+8
 2212              	.LBB121:
 2213              	.LBB122:
  28:src/menu.c    **** }
 2214              		.loc 1 28 3 view .LVU582
 2215 0030 AB4E     		ldr	r6, .L249+12
 2216              	.LBE122:
 2217              	.LBE121:
ARM GAS  /tmp/ccZ4XUVa.s 			page 59


 374:src/console.c ****   t20->lnfill = 0;
 375:src/console.c ****   t20->fixed = 1;
 376:src/console.c ****   t20->xspc = -2;
 377:src/console.c ****   t20->bgfill = 0;
 378:src/console.c ****   
 379:src/console.c ****   display();
 380:src/console.c ****   display_current_menu();
 381:src/console.c ****   lcd_refresh();
 382:src/console.c ****   JustDisplayed = 0;
 383:src/console.c ****   /*
 384:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 385:src/console.c ****     Sleeps peacefully while waiting for a key.
 386:src/console.c ****     Handles (in principle!) turning off and on.
 387:src/console.c ****     =================
 388:src/console.c ****     Main event loop
 389:src/console.c ****     =================
 390:src/console.c **** 
 391:src/console.c ****     Status flags:
 392:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 393:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 394:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 395:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 396:src/console.c ****   */
 397:src/console.c ****   for(;;) {
 398:src/console.c **** 
 399:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 400:src/console.c ****       {
 401:src/console.c **** 	CLR_ST(STAT_RUNNING);
 402:src/console.c **** 	sys_sleep();
 403:src/console.c ****       }
 404:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 2218              		.loc 2 404 35 view .LVU583
 2219 0032 AC4F     		ldr	r7, .L249+16
 405:src/console.c ****     {
 406:src/console.c ****       CLR_ST(STAT_RUNNING);
 407:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2220              		.loc 2 407 7 view .LVU584
 2221 0034 DFF82483 		ldr	r8, .L249+136
 371:src/console.c ****   load_lib_file(0);
 2222              		.loc 2 371 3 view .LVU585
 2223 0038 FFF7FEFF 		bl	load_backup_file
 2224              	.LVL192:
 372:src/console.c ****   t20->newln = 0;
 2225              		.loc 2 372 3 is_stmt 1 view .LVU586
 2226 003c 0020     		movs	r0, #0
 2227 003e FFF7FEFF 		bl	load_lib_file
 2228              	.LVL193:
 373:src/console.c ****   t20->lnfill = 0;
 2229              		.loc 2 373 3 view .LVU587
 2230 0042 236B     		ldr	r3, [r4, #48]
 374:src/console.c ****   t20->fixed = 1;
 2231              		.loc 2 374 3 view .LVU588
 375:src/console.c ****   t20->xspc = -2;
 2232              		.loc 2 375 3 view .LVU589
 375:src/console.c ****   t20->xspc = -2;
 2233              		.loc 2 375 14 is_stmt 0 view .LVU590
 2234 0044 0122     		movs	r2, #1
ARM GAS  /tmp/ccZ4XUVa.s 			page 60


 2235 0046 1A74     		strb	r2, [r3, #16]
 376:src/console.c ****   t20->bgfill = 0;
 2236              		.loc 2 376 3 is_stmt 1 view .LVU591
 377:src/console.c ****   
 2237              		.loc 2 377 15 is_stmt 0 view .LVU592
 2238 0048 0025     		movs	r5, #0
 376:src/console.c ****   t20->bgfill = 0;
 2239              		.loc 2 376 13 view .LVU593
 2240 004a FE22     		movs	r2, #254
 2241 004c 9A73     		strb	r2, [r3, #14]
 377:src/console.c ****   
 2242              		.loc 2 377 3 is_stmt 1 view .LVU594
 377:src/console.c ****   
 2243              		.loc 2 377 15 is_stmt 0 view .LVU595
 2244 004e 5D82     		strh	r5, [r3, #18]	@ movhi
 373:src/console.c ****   t20->lnfill = 0;
 2245              		.loc 2 373 14 view .LVU596
 2246 0050 1D75     		strb	r5, [r3, #20]
 379:src/console.c ****   display_current_menu();
 2247              		.loc 2 379 3 is_stmt 1 view .LVU597
 2248 0052 FFF7FEFF 		bl	display
 2249              	.LVL194:
 380:src/console.c ****   lcd_refresh();
 2250              		.loc 2 380 3 view .LVU598
 2251              	.LBB124:
 2252              	.LBI121:
  27:src/menu.c    ****   display_menu (current_menu);
 2253              		.loc 1 27 6 view .LVU599
 2254              	.LBB123:
  28:src/menu.c    **** }
 2255              		.loc 1 28 3 view .LVU600
 2256 0056 3068     		ldr	r0, [r6]
 2257 0058 FFF7FEFF 		bl	display_menu
 2258              	.LVL195:
 2259              	.LBE123:
 2260              	.LBE124:
 381:src/console.c ****   JustDisplayed = 0;
 2261              		.loc 2 381 3 view .LVU601
 2262 005c A24B     		ldr	r3, .L249+20
 2263 005e 9847     		blx	r3
 2264              	.LVL196:
 382:src/console.c ****   /*
 2265              		.loc 2 382 3 view .LVU602
 382:src/console.c ****   /*
 2266              		.loc 2 382 17 is_stmt 0 view .LVU603
 2267 0060 A24B     		ldr	r3, .L249+24
 2268 0062 1D60     		str	r5, [r3]
 2269              	.L159:
 397:src/console.c **** 
 2270              		.loc 2 397 3 is_stmt 1 view .LVU604
 399:src/console.c ****       {
 2271              		.loc 2 399 5 view .LVU605
 399:src/console.c ****       {
 2272              		.loc 2 399 10 is_stmt 0 view .LVU606
 2273 0064 2368     		ldr	r3, [r4]
 399:src/console.c ****       {
 2274              		.loc 2 399 8 view .LVU607
ARM GAS  /tmp/ccZ4XUVa.s 			page 61


 2275 0066 9A05     		lsls	r2, r3, #22
 2276 0068 40F18D80 		bpl	.L160
 2277              	.L236:
 399:src/console.c ****       {
 2278              		.loc 2 399 30 discriminator 1 view .LVU608
 2279 006c 2368     		ldr	r3, [r4]
 399:src/console.c ****       {
 2280              		.loc 2 399 27 discriminator 1 view .LVU609
 2281 006e 5B07     		lsls	r3, r3, #29
 2282 0070 40F18980 		bpl	.L160
 401:src/console.c **** 	sys_sleep();
 2283              		.loc 2 401 2 is_stmt 1 view .LVU610
 2284 0074 2368     		ldr	r3, [r4]
 402:src/console.c ****       }
 2285              		.loc 2 402 2 is_stmt 0 view .LVU611
 2286 0076 9E4A     		ldr	r2, .L249+28
 401:src/console.c **** 	sys_sleep();
 2287              		.loc 2 401 2 view .LVU612
 2288 0078 23F00203 		bic	r3, r3, #2
 2289 007c 2360     		str	r3, [r4]
 402:src/console.c ****       }
 2290              		.loc 2 402 2 is_stmt 1 view .LVU613
 2291 007e 9047     		blx	r2
 2292              	.LVL197:
 2293              	.L161:
 408:src/console.c ****       sys_sleep();
 409:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 410:src/console.c **** 	key_push (K_HEARTBEAT);
 411:src/console.c **** 	if (Pause > 0) Pause--;
 412:src/console.c ****       }
 413:src/console.c ****       sys_timer_disable(0); // stop timer
 414:src/console.c ****     }
 415:src/console.c ****     
 416:src/console.c ****     // Wakeup in off state or going to sleep
 417:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 2294              		.loc 2 417 5 view .LVU614
 2295              		.loc 2 417 9 is_stmt 0 view .LVU615
 2296 0080 2368     		ldr	r3, [r4]
 2297              		.loc 2 417 8 view .LVU616
 2298 0082 9D05     		lsls	r5, r3, #22
 2299 0084 00F1A680 		bmi	.L167
 2300              	.L237:
 2301              		.loc 2 417 29 discriminator 1 view .LVU617
 2302 0088 2368     		ldr	r3, [r4]
 2303              		.loc 2 417 26 discriminator 1 view .LVU618
 2304 008a 5807     		lsls	r0, r3, #29
 2305 008c 00F1A280 		bmi	.L167
 418:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 419:src/console.c ****         // Going to off mode
 420:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 421:src/console.c ****         draw_power_off_image(1);
 422:src/console.c **** 
 423:src/console.c ****         LCD_power_off(0);
 424:src/console.c ****         SET_ST(STAT_SUSPENDED);
 425:src/console.c ****         SET_ST(STAT_OFF);
 426:src/console.c ****       }
 427:src/console.c ****       // Already in OFF -> just continue to sleep above
ARM GAS  /tmp/ccZ4XUVa.s 			page 62


 428:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 429:src/console.c ****       // thus reaching the sleep()
 430:src/console.c ****     }
 431:src/console.c **** 
 432:src/console.c ****     // Well, we are woken-up
 433:src/console.c ****     SET_ST(STAT_RUNNING);
 2306              		.loc 2 433 5 is_stmt 1 view .LVU619
 2307 0090 2368     		ldr	r3, [r4]
 2308 0092 43F00203 		orr	r3, r3, #2
 2309 0096 2360     		str	r3, [r4]
 434:src/console.c **** 
 435:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 436:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 2310              		.loc 2 436 5 view .LVU620
 2311 0098 2368     		ldr	r3, [r4]
 2312 009a 23F00403 		bic	r3, r3, #4
 2313 009e 2360     		str	r3, [r4]
 437:src/console.c **** 
 438:src/console.c ****     // Get up from OFF state
 439:src/console.c ****     if ( ST(STAT_OFF) ) {
 2314              		.loc 2 439 5 view .LVU621
 2315              		.loc 2 439 10 is_stmt 0 view .LVU622
 2316 00a0 2368     		ldr	r3, [r4]
 2317              		.loc 2 439 8 view .LVU623
 2318 00a2 D906     		lsls	r1, r3, #27
 2319 00a4 0ED5     		bpl	.L172
 440:src/console.c ****       LCD_power_on();
 2320              		.loc 2 440 7 is_stmt 1 view .LVU624
 2321 00a6 934B     		ldr	r3, .L249+32
 2322 00a8 9847     		blx	r3
 2323              	.LVL198:
 441:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 2324              		.loc 2 441 7 view .LVU625
 2325 00aa 934B     		ldr	r3, .L249+36
 2326 00ac 9847     		blx	r3
 2327              	.LVL199:
 442:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 2328              		.loc 2 442 7 view .LVU626
 2329 00ae 934B     		ldr	r3, .L249+40
 2330 00b0 9847     		blx	r3
 2331              	.LVL200:
 443:src/console.c **** 
 444:src/console.c ****       CLR_ST(STAT_OFF);
 2332              		.loc 2 444 7 view .LVU627
 2333 00b2 2368     		ldr	r3, [r4]
 445:src/console.c **** 
 446:src/console.c ****       if ( !lcd_get_buf_cleared() )
 2334              		.loc 2 446 13 is_stmt 0 view .LVU628
 2335 00b4 924A     		ldr	r2, .L249+44
 444:src/console.c **** 
 2336              		.loc 2 444 7 view .LVU629
 2337 00b6 23F01003 		bic	r3, r3, #16
 2338 00ba 2360     		str	r3, [r4]
 2339              		.loc 2 446 7 is_stmt 1 view .LVU630
 2340              		.loc 2 446 13 is_stmt 0 view .LVU631
 2341 00bc 9047     		blx	r2
 2342              	.LVL201:
ARM GAS  /tmp/ccZ4XUVa.s 			page 63


 2343              		.loc 2 446 10 view .LVU632
 2344 00be 08B9     		cbnz	r0, .L172
 447:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
 2345              		.loc 2 447 9 is_stmt 1 view .LVU633
 2346 00c0 904B     		ldr	r3, .L249+48
 2347 00c2 9847     		blx	r3
 2348              	.LVL202:
 2349              	.L172:
 448:src/console.c ****     }
 449:src/console.c **** 
 450:src/console.c ****     // Key is ready -> clear auto off timer
 451:src/console.c ****     //    if ( !key_empty() )
 452:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 453:src/console.c ****     // Fetch the key
 454:src/console.c ****     //  < 0 -> No key event
 455:src/console.c ****     //  > 0 -> Key pressed
 456:src/console.c ****     // == 0 -> Key released
 457:src/console.c ****     c = key_pop();
 2350              		.loc 2 457 5 view .LVU634
 2351              		.loc 2 457 9 is_stmt 0 view .LVU635
 2352 00c4 904B     		ldr	r3, .L249+52
 2353 00c6 9847     		blx	r3
 2354              	.LVL203:
 458:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2355              		.loc 2 458 8 view .LVU636
 2356 00c8 6228     		cmp	r0, #98
 457:src/console.c ****     if ( (c != K_HEARTBEAT) && (c > 0) ) {
 2357              		.loc 2 457 9 view .LVU637
 2358 00ca 8246     		mov	r10, r0
 2359              	.LVL204:
 2360              		.loc 2 458 5 is_stmt 1 view .LVU638
 2361              		.loc 2 458 8 is_stmt 0 view .LVU639
 2362 00cc 00F0A980 		beq	.L174
 2363              		.loc 2 458 29 discriminator 1 view .LVU640
 2364 00d0 0028     		cmp	r0, #0
 2365 00d2 40F3A380 		ble	.L175
 459:src/console.c ****       reset_auto_off();
 2366              		.loc 2 459 7 is_stmt 1 view .LVU641
 2367 00d6 8D4B     		ldr	r3, .L249+56
 2368 00d8 9847     		blx	r3
 2369              	.LVL205:
 460:src/console.c ****       start_key_timer();
 2370              		.loc 2 460 7 view .LVU642
 2371              	.LBB125:
 2372              	.LBI125:
 232:src/console.c ****     start_ticks = get_rtc_ticks();
 2373              		.loc 2 232 6 view .LVU643
 2374              	.LBB126:
 233:src/console.c **** }
 2375              		.loc 2 233 5 view .LVU644
 233:src/console.c **** }
 2376              		.loc 2 233 19 is_stmt 0 view .LVU645
 2377 00da 8D4B     		ldr	r3, .L249+60
 2378 00dc 9847     		blx	r3
 2379              	.LVL206:
 233:src/console.c **** }
 2380              		.loc 2 233 17 view .LVU646
ARM GAS  /tmp/ccZ4XUVa.s 			page 64


 2381 00de 8D4B     		ldr	r3, .L249+64
 2382              	.LBE126:
 2383              	.LBE125:
 2384              	.LBB128:
 2385              	.LBB129:
  68:src/console.c **** 
 2386              		.loc 2 68 6 view .LVU647
 2387 00e0 BAF1630F 		cmp	r10, #99
 2388              	.LBE129:
 2389              	.LBE128:
 2390              	.LBB142:
 2391              	.LBB127:
 233:src/console.c **** }
 2392              		.loc 2 233 17 view .LVU648
 2393 00e4 1860     		str	r0, [r3]
 2394              	.LBE127:
 2395              	.LBE142:
 461:src/console.c ****     }
 462:src/console.c ****     if (c >= 0) {
 2396              		.loc 2 462 5 is_stmt 1 view .LVU649
 463:src/console.c ****       remapped = remap(c);
 2397              		.loc 2 463 7 view .LVU650
 2398              	.LVL207:
 2399              	.LBB143:
 2400              	.LBI128:
  60:src/console.c **** 
 2401              		.loc 2 60 22 view .LVU651
 2402              	.LBB131:
  62:src/console.c **** 
 2403              		.loc 2 62 3 view .LVU652
 2404              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 2405              		.loc 3 1 1 view .LVU653
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
ARM GAS  /tmp/ccZ4XUVa.s 			page 65


  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 2406              		.loc 3 59 3 view .LVU654
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_CMPLX, 0},
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     {K_MULTI, 1}, // lastX not available; it's RCL L; so just RCL for now;
  78:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
  79:src/keytran.c ****     {K_SETMENU, 2}, // DISP menu
  80:src/keytran.c ****     {K_SETMENU, 1}, // CLR menu
  81:src/keytran.c ****     // Fourth row of DM42 18--22
ARM GAS  /tmp/ccZ4XUVa.s 			page 66


  82:src/keytran.c ****     {K40, 0}, // up-arrow
  83:src/keytran.c ****     {K52, 1}, // SLV
  84:src/keytran.c ****     {K_SETMENU, 14}, // Integral/sum/product menu
  85:src/keytran.c ****     {K44, 3}, // MATRIX cat
  86:src/keytran.c ****     {K_SETMENU, 12}, // STATS menu
  87:src/keytran.c ****     // Fifth row of DM42 23--27
  88:src/keytran.c ****     {K50, 0}, // down-arrow
  89:src/keytran.c ****     {K_SETMENU, 3}, // BASE menu 
  90:src/keytran.c ****     {K04, 3}, // CONV cat
  91:src/keytran.c ****     {K_SETMENU, 10}, // FLAGS menu
  92:src/keytran.c ****     {K_SETMENU, 11}, // PROBS menu
  93:src/keytran.c ****     // Sixth row of DM42 28--32
  94:src/keytran.c ****     {K_G, 0}, // gshift
  95:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  96:src/keytran.c ****     {K_NOP, 0}, // no function
  97:src/keytran.c ****     {K52, 3}, // P.FCN cat
  98:src/keytran.c ****     {K_NOP, 0}, // no function
  99:src/keytran.c ****     // Last row of DM42 33--37
 100:src/keytran.c ****     {K60, 3}, // off
 101:src/keytran.c ****     {K_SETMENU, 8}, // SETUP menu
 102:src/keytran.c ****     {K21, 1}, // <(
 103:src/keytran.c ****     {K63, 3}, // P/R
 104:src/keytran.c ****     {K10, 3}, // CAT cat
 105:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 106:src/keytran.c ****     {K_NOP, 0},
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_SETMENU, -1}, // last menu
 114:src/keytran.c ****     {K_SETMENU, 5}, // MISC menu!
 115:src/keytran.c ****   };
 116:src/keytran.c **** 
 117:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 2407              		.loc 3 117 3 view .LVU655
 118:src/keytran.c ****     {K_RELEASE, -1},
 119:src/keytran.c ****     // Top row of DM42 1--6
 120:src/keytran.c ****     {K64, 3}, // sig+
 121:src/keytran.c ****     {K34, 1}, // 1/x
 122:src/keytran.c ****     {K44, 1}, // sqrt x
 123:src/keytran.c ****     {K31, 2}, // 10^x
 124:src/keytran.c ****     {K_NOP, 0}, // no function
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     // Next row of DM42 7--12
 127:src/keytran.c ****     {K_NOP, 0}, // no function
 128:src/keytran.c ****     {K11, 3}, // View
 129:src/keytran.c ****     {K12, 3}, // Rup
 130:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 131:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU, 4}, // ANGLES menu
 133:src/keytran.c ****     // Third row of DM42 13--17
 134:src/keytran.c ****     {K20, 2}, // fill
 135:src/keytran.c ****     {K_SETMENU, 6}, // X<>Y menu
 136:src/keytran.c ****     {K05, 3}, // MODE cat
 137:src/keytran.c ****     {K_NOP, 0}, // no function
ARM GAS  /tmp/ccZ4XUVa.s 			page 67


 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     // Fourth row of DM42 18--22
 140:src/keytran.c ****     {K_NOP, 0}, // no function
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 144:src/keytran.c ****     {K42, 3}, // STAT catalogue
 145:src/keytran.c ****     // Fifth row of DM42 23--27
 146:src/keytran.c ****     {K_NOP, 0}, // no function 
 147:src/keytran.c ****     {K_NOP, 0}, // no function
 148:src/keytran.c ****     {K20, 3}, // CONST catalogue
 149:src/keytran.c ****     {K51, 3}, // TEST catalogue
 150:src/keytran.c ****     {K41, 3}, // PROB catalogue
 151:src/keytran.c ****     // Sixth row of DM42 28--32
 152:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 153:src/keytran.c ****     {K_NOP, 0}, // no function
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 156:src/keytran.c ****     {K_NOP, 0}, // no function
 157:src/keytran.c ****     // Last row of DM42 33--37
 158:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 159:src/keytran.c ****     {K_SETMENU, 13}, // SETUP2 menu
 160:src/keytran.c ****     {K_NOP, 0}, // no function
 161:src/keytran.c ****     {K_SETMENU, 7}, // P.FCN menu
 162:src/keytran.c ****     {K50, 3}, // Status
 163:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 164:src/keytran.c ****     {K_NOP, 0},
 165:src/keytran.c ****     {K_NOP, 0},
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****   };
 174:src/keytran.c **** 
 175:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 2408              		.loc 3 175 1 view .LVU656
  66:src/console.c **** 
 2409              		.loc 2 66 3 view .LVU657
  68:src/console.c **** 
 2410              		.loc 2 68 3 view .LVU658
  68:src/console.c **** 
 2411              		.loc 2 68 6 is_stmt 0 view .LVU659
 2412 00e6 00F0E480 		beq	.L233
  70:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 2413              		.loc 2 70 3 is_stmt 1 view .LVU660
  70:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 2414              		.loc 2 70 6 is_stmt 0 view .LVU661
 2415 00ea BAF12C0F 		cmp	r10, #44
 2416 00ee 00F0BF80 		beq	.L212
 2417              	.LVL208:
 2418              	.L211:
  75:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2419              		.loc 2 75 3 is_stmt 1 view .LVU662
  75:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
ARM GAS  /tmp/ccZ4XUVa.s 			page 68


 2420              		.loc 2 75 8 is_stmt 0 view .LVU663
 2421 00f2 FFF7FEFF 		bl	get_alpha_state
 2422              	.LVL209:
  75:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 2423              		.loc 2 75 6 view .LVU664
 2424 00f6 0028     		cmp	r0, #0
 2425 00f8 00F08380 		beq	.L179
  76:src/console.c ****       switch (cur_shift()) { 
 2426              		.loc 2 76 5 is_stmt 1 view .LVU665
  76:src/console.c ****       switch (cur_shift()) { 
 2427              		.loc 2 76 8 is_stmt 0 view .LVU666
 2428 00fc BAF11C0F 		cmp	r10, #28
 2429 0100 00F02E81 		beq	.L234
  93:src/console.c ****   }
 2430              		.loc 2 93 5 is_stmt 1 view .LVU667
  93:src/console.c ****   }
 2431              		.loc 2 93 26 is_stmt 0 view .LVU668
 2432 0104 844B     		ldr	r3, .L249+68
 2433              	.L230:
 122:src/console.c ****     break;
 2434              		.loc 2 122 26 view .LVU669
 2435 0106 03EBCA02 		add	r2, r3, r10, lsl #3
 2436 010a 92E80300 		ldm	r2, {r0, r1}
 2437 010e 0DF10809 		add	r9, sp, #8
 2438 0112 13F83AA0 		ldrb	r10, [r3, r10, lsl #3]	@ zero_extendqisi2
 2439              	.LVL210:
 122:src/console.c ****     break;
 2440              		.loc 2 122 26 view .LVU670
 2441 0116 89E80300 		stm	r9, {r0, r1}
 2442 011a 0D46     		mov	r5, r1
 2443              	.LVL211:
 2444              	.L177:
 122:src/console.c ****     break;
 2445              		.loc 2 122 26 view .LVU671
 2446              	.LBE131:
 2447              	.LBE143:
 464:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2448              		.loc 2 464 7 is_stmt 1 view .LVU672
 2449              		.loc 2 464 10 is_stmt 0 view .LVU673
 2450 011c BAF12F0F 		cmp	r10, #47
 2451 0120 00F08D80 		beq	.L235
 2452              	.LVL212:
 2453              	.L202:
 465:src/console.c **** 	set_menu ( remapped.shift );
 466:src/console.c **** 	display_current_menu ();
 467:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 468:src/console.c **** 	case SHIFT_F:
 469:src/console.c **** 	  remapped = f_shift; // F -> N
 470:src/console.c **** 	  break;
 471:src/console.c **** 	case SHIFT_G:
 472:src/console.c **** 	  remapped = g_shift; // G -> N
 473:src/console.c **** 	  break;
 474:src/console.c **** 	case SHIFT_H:
 475:src/console.c **** 	  remapped = h_shift; // H -> N
 476:src/console.c **** 	default:
 477:src/console.c **** 	  remapped = f_shift; // shouldn't happen
 478:src/console.c **** 	}
ARM GAS  /tmp/ccZ4XUVa.s 			page 69


 479:src/console.c ****       }
 480:src/console.c ****       if (remapped.key_34s == K_SYS) {
 2454              		.loc 2 480 7 is_stmt 1 view .LVU674
 2455              		.loc 2 480 10 is_stmt 0 view .LVU675
 2456 0124 BAF1300F 		cmp	r10, #48
 2457 0128 18D1     		bne	.L208
 481:src/console.c **** 	SET_ST(STAT_MENU);
 2458              		.loc 2 481 2 is_stmt 1 view .LVU676
 2459 012a 2368     		ldr	r3, [r4]
 482:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 2460              		.loc 2 482 2 is_stmt 0 view .LVU677
 2461 012c 7B4D     		ldr	r5, .L249+72
 2462              	.LVL213:
 2463              		.loc 2 482 2 view .LVU678
 2464 012e 7C48     		ldr	r0, .L249+76
 2465 0130 0022     		movs	r2, #0
 481:src/console.c **** 	SET_ST(STAT_MENU);
 2466              		.loc 2 481 2 view .LVU679
 2467 0132 43F04003 		orr	r3, r3, #64
 2468              		.loc 2 482 2 view .LVU680
 2469 0136 1146     		mov	r1, r2
 481:src/console.c **** 	SET_ST(STAT_MENU);
 2470              		.loc 2 481 2 view .LVU681
 2471 0138 2360     		str	r3, [r4]
 2472              		.loc 2 482 2 is_stmt 1 view .LVU682
 2473 013a A847     		blx	r5
 2474              	.LVL214:
 483:src/console.c **** 	CLR_ST(STAT_MENU);
 2475              		.loc 2 483 2 view .LVU683
 484:src/console.c **** 	remapped =  no_key;
 2476              		.loc 2 484 11 is_stmt 0 view .LVU684
 2477 013c 794B     		ldr	r3, .L249+80
 483:src/console.c **** 	CLR_ST(STAT_MENU);
 2478              		.loc 2 483 2 view .LVU685
 2479 013e 2268     		ldr	r2, [r4]
 2480              		.loc 2 484 11 view .LVU686
 2481 0140 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2482              	.LVL215:
 2483              		.loc 2 484 11 view .LVU687
 2484 0144 93E80300 		ldm	r3, {r0, r1}
 483:src/console.c **** 	CLR_ST(STAT_MENU);
 2485              		.loc 2 483 2 view .LVU688
 2486 0148 22F04002 		bic	r2, r2, #64
 2487 014c 2260     		str	r2, [r4]
 2488              		.loc 2 484 2 is_stmt 1 view .LVU689
 2489              	.LVL216:
 2490              		.loc 2 484 11 is_stmt 0 view .LVU690
 2491 014e 04AA     		add	r2, sp, #16
 2492 0150 02E90300 		stmdb	r2, {r0, r1}
 2493              	.LBB144:
 2494              	.LBB145:
  28:src/menu.c    **** }
 2495              		.loc 1 28 3 view .LVU691
 2496 0154 3068     		ldr	r0, [r6]
 2497              	.LBE145:
 2498              	.LBE144:
 2499              		.loc 2 484 11 view .LVU692
ARM GAS  /tmp/ccZ4XUVa.s 			page 70


 2500 0156 0D46     		mov	r5, r1
 2501              	.LVL217:
 485:src/console.c **** 	display_current_menu();
 2502              		.loc 2 485 2 is_stmt 1 view .LVU693
 2503              	.LBB147:
 2504              	.LBI144:
  27:src/menu.c    ****   display_menu (current_menu);
 2505              		.loc 1 27 6 view .LVU694
 2506              	.LBB146:
  28:src/menu.c    **** }
 2507              		.loc 1 28 3 view .LVU695
 2508 0158 FFF7FEFF 		bl	display_menu
 2509              	.LVL218:
 2510              	.L208:
  28:src/menu.c    **** }
 2511              		.loc 1 28 3 is_stmt 0 view .LVU696
 2512              	.LBE146:
 2513              	.LBE147:
 486:src/console.c ****       }
 487:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 2514              		.loc 2 487 7 is_stmt 1 view .LVU697
 2515              		.loc 2 487 10 is_stmt 0 view .LVU698
 2516 015c BAF1310F 		cmp	r10, #49
 2517 0160 00F08780 		beq	.L178
 488:src/console.c **** 	remapped = do_multi (remapped);
 489:src/console.c **** 	display_current_menu();
 490:src/console.c ****       }
 491:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 2518              		.loc 2 491 7 is_stmt 1 view .LVU699
 2519              		.loc 2 491 10 is_stmt 0 view .LVU700
 2520 0164 BAF1320F 		cmp	r10, #50
 2521 0168 00F09D80 		beq	.L210
 2522              	.LVL219:
 2523              	.L232:
 2524              		.loc 2 491 10 view .LVU701
 2525 016c 0DF10809 		add	r9, sp, #8
 2526              	.L181:
 2527              	.LVL220:
 492:src/console.c ****       process_keycode_with_shift(remapped);
 2528              		.loc 2 492 7 is_stmt 1 view .LVU702
 2529              		.loc 2 492 7 is_stmt 0 view .LVU703
 2530 0170 8DF808A0 		strb	r10, [sp, #8]
 2531 0174 0395     		str	r5, [sp, #12]
 2532 0176 99E80300 		ldm	r9, {r0, r1}
 2533 017a FFF7FEFF 		bl	process_keycode_with_shift
 2534              	.LVL221:
 397:src/console.c **** 
 2535              		.loc 2 397 3 is_stmt 1 view .LVU704
 399:src/console.c ****       {
 2536              		.loc 2 399 5 view .LVU705
 399:src/console.c ****       {
 2537              		.loc 2 399 10 is_stmt 0 view .LVU706
 2538 017e 2368     		ldr	r3, [r4]
 399:src/console.c ****       {
 2539              		.loc 2 399 8 view .LVU707
 2540 0180 9A05     		lsls	r2, r3, #22
 2541 0182 3FF573AF 		bmi	.L236
ARM GAS  /tmp/ccZ4XUVa.s 			page 71


 2542              	.LVL222:
 2543              	.L160:
 404:src/console.c ****     {
 2544              		.loc 2 404 10 is_stmt 1 view .LVU708
 404:src/console.c ****     {
 2545              		.loc 2 404 15 is_stmt 0 view .LVU709
 2546 0186 2568     		ldr	r5, [r4]
 404:src/console.c ****     {
 2547              		.loc 2 404 13 view .LVU710
 2548 0188 15F40075 		ands	r5, r5, #512
 2549 018c 7FF478AF 		bne	.L161
 404:src/console.c ****     {
 2550              		.loc 2 404 35 discriminator 1 view .LVU711
 2551 0190 B847     		blx	r7
 2552              	.LVL223:
 404:src/console.c ****     {
 2553              		.loc 2 404 32 discriminator 1 view .LVU712
 2554 0192 0028     		cmp	r0, #0
 2555 0194 3FF474AF 		beq	.L161
 406:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2556              		.loc 2 406 7 is_stmt 1 view .LVU713
 2557 0198 2368     		ldr	r3, [r4]
 2558 019a 23F00203 		bic	r3, r3, #2
 407:src/console.c ****       sys_sleep();
 2559              		.loc 2 407 7 is_stmt 0 view .LVU714
 2560 019e 2846     		mov	r0, r5
 2561 01a0 6421     		movs	r1, #100
 406:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 2562              		.loc 2 406 7 view .LVU715
 2563 01a2 2360     		str	r3, [r4]
 407:src/console.c ****       sys_sleep();
 2564              		.loc 2 407 7 is_stmt 1 view .LVU716
 2565 01a4 C047     		blx	r8
 2566              	.LVL224:
 408:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 2567              		.loc 2 408 7 view .LVU717
 2568 01a6 524B     		ldr	r3, .L249+28
 2569 01a8 9847     		blx	r3
 2570              	.LVL225:
 409:src/console.c **** 	key_push (K_HEARTBEAT);
 2571              		.loc 2 409 7 view .LVU718
 409:src/console.c **** 	key_push (K_HEARTBEAT);
 2572              		.loc 2 409 11 is_stmt 0 view .LVU719
 2573 01aa 5F4B     		ldr	r3, .L249+84
 2574 01ac 2846     		mov	r0, r5
 2575 01ae 9847     		blx	r3
 2576              	.LVL226:
 409:src/console.c **** 	key_push (K_HEARTBEAT);
 2577              		.loc 2 409 10 view .LVU720
 2578 01b0 48B1     		cbz	r0, .L165
 410:src/console.c **** 	if (Pause > 0) Pause--;
 2579              		.loc 2 410 2 is_stmt 1 view .LVU721
 2580 01b2 5E4B     		ldr	r3, .L249+88
 2581 01b4 6220     		movs	r0, #98
 2582 01b6 9847     		blx	r3
 2583              	.LVL227:
 411:src/console.c ****       }
ARM GAS  /tmp/ccZ4XUVa.s 			page 72


 2584              		.loc 2 411 2 view .LVU722
 411:src/console.c ****       }
 2585              		.loc 2 411 12 is_stmt 0 view .LVU723
 2586 01b8 5D4B     		ldr	r3, .L249+92
 2587 01ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 411:src/console.c ****       }
 2588              		.loc 2 411 5 view .LVU724
 2589 01bc 1AB1     		cbz	r2, .L165
 411:src/console.c ****       }
 2590              		.loc 2 411 17 is_stmt 1 discriminator 1 view .LVU725
 411:src/console.c ****       }
 2591              		.loc 2 411 22 is_stmt 0 discriminator 1 view .LVU726
 2592 01be 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2593 01c0 013A     		subs	r2, r2, #1
 2594 01c2 D2B2     		uxtb	r2, r2
 2595 01c4 1A70     		strb	r2, [r3]
 2596              	.L165:
 413:src/console.c ****     }
 2597              		.loc 2 413 7 is_stmt 1 view .LVU727
 2598 01c6 5B4B     		ldr	r3, .L249+96
 2599 01c8 0020     		movs	r0, #0
 2600 01ca 9847     		blx	r3
 2601              	.LVL228:
 417:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2602              		.loc 2 417 5 view .LVU728
 417:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2603              		.loc 2 417 9 is_stmt 0 view .LVU729
 2604 01cc 2368     		ldr	r3, [r4]
 417:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 2605              		.loc 2 417 8 view .LVU730
 2606 01ce 9D05     		lsls	r5, r3, #22
 2607 01d0 7FF55AAF 		bpl	.L237
 2608              	.L167:
 418:src/console.c ****         // Going to off mode
 2609              		.loc 2 418 7 is_stmt 1 view .LVU731
 418:src/console.c ****         // Going to off mode
 2610              		.loc 2 418 12 is_stmt 0 view .LVU732
 2611 01d4 2568     		ldr	r5, [r4]
 418:src/console.c ****         // Going to off mode
 2612              		.loc 2 418 10 view .LVU733
 2613 01d6 15F00405 		ands	r5, r5, #4
 2614 01da 7FF443AF 		bne	.L159
 420:src/console.c ****         draw_power_off_image(1);
 2615              		.loc 2 420 9 is_stmt 1 view .LVU734
 2616 01de 564B     		ldr	r3, .L249+100
 2617 01e0 2846     		mov	r0, r5
 2618 01e2 9847     		blx	r3
 2619              	.LVL229:
 421:src/console.c **** 
 2620              		.loc 2 421 9 view .LVU735
 2621 01e4 554B     		ldr	r3, .L249+104
 2622 01e6 0120     		movs	r0, #1
 2623 01e8 9847     		blx	r3
 2624              	.LVL230:
 423:src/console.c ****         SET_ST(STAT_SUSPENDED);
 2625              		.loc 2 423 9 view .LVU736
 2626 01ea 554B     		ldr	r3, .L249+108
ARM GAS  /tmp/ccZ4XUVa.s 			page 73


 2627 01ec 2846     		mov	r0, r5
 2628 01ee 9847     		blx	r3
 2629              	.LVL231:
 424:src/console.c ****         SET_ST(STAT_OFF);
 2630              		.loc 2 424 9 view .LVU737
 2631 01f0 2368     		ldr	r3, [r4]
 2632 01f2 43F00403 		orr	r3, r3, #4
 2633 01f6 2360     		str	r3, [r4]
 425:src/console.c ****       }
 2634              		.loc 2 425 9 view .LVU738
 2635 01f8 2368     		ldr	r3, [r4]
 2636 01fa 43F01003 		orr	r3, r3, #16
 2637 01fe 2360     		str	r3, [r4]
 2638 0200 30E7     		b	.L159
 2639              	.LVL232:
 2640              	.L179:
 2641              	.LBB148:
 2642              	.LBB132:
  96:src/console.c ****   case KEY_F1:
 2643              		.loc 2 96 3 view .LVU739
 2644 0202 AAF12603 		sub	r3, r10, #38
 2645 0206 052B     		cmp	r3, #5
 2646 0208 00F22581 		bhi	.L185
 2647 020c DFE813F0 		tbh	[pc, r3, lsl #1]
 2648              	.L187:
 2649 0210 FE00     		.2byte	(.L192-.L187)/2
 2650 0212 0701     		.2byte	(.L191-.L187)/2
 2651 0214 0F01     		.2byte	(.L190-.L187)/2
 2652 0216 F000     		.2byte	(.L189-.L187)/2
 2653 0218 DD00     		.2byte	(.L188-.L187)/2
 2654 021a C200     		.2byte	(.L186-.L187)/2
 2655              	.LVL233:
 2656              		.p2align 1
 2657              	.L175:
  96:src/console.c ****   case KEY_F1:
 2658              		.loc 2 96 3 is_stmt 0 view .LVU740
 2659              	.LBE132:
 2660              	.LBE148:
 462:src/console.c ****       remapped = remap(c);
 2661              		.loc 2 462 5 is_stmt 1 view .LVU741
 462:src/console.c ****       remapped = remap(c);
 2662              		.loc 2 462 8 is_stmt 0 view .LVU742
 2663 021c 7FF422AF 		bne	.L159
 2664 0220 67E7     		b	.L211
 2665              	.L174:
 462:src/console.c ****       remapped = remap(c);
 2666              		.loc 2 462 5 is_stmt 1 view .LVU743
 463:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 2667              		.loc 2 463 7 view .LVU744
 2668              	.LVL234:
 2669              	.LBB149:
  60:src/console.c **** 
 2670              		.loc 2 60 22 view .LVU745
 2671              	.LBB133:
  62:src/console.c **** 
 2672              		.loc 2 62 3 view .LVU746
   1:src/keytran.c ****     // Top row of DM42 1--6
ARM GAS  /tmp/ccZ4XUVa.s 			page 74


 2673              		.loc 3 1 1 view .LVU747
  59:src/keytran.c ****     {K_RELEASE, -1},
 2674              		.loc 3 59 3 view .LVU748
 117:src/keytran.c ****     {K_RELEASE, -1},
 2675              		.loc 3 117 3 view .LVU749
 2676              		.loc 3 175 1 view .LVU750
  66:src/console.c **** 
 2677              		.loc 2 66 3 view .LVU751
  66:src/console.c **** 
 2678              		.loc 2 66 23 view .LVU752
  66:src/console.c **** 
 2679              		.loc 2 66 30 is_stmt 0 view .LVU753
 2680 0222 484B     		ldr	r3, .L249+112
 2681              	.LVL235:
 2682              	.L231:
  66:src/console.c **** 
 2683              		.loc 2 66 30 view .LVU754
 2684 0224 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2685              	.LVL236:
  66:src/console.c **** 
 2686              		.loc 2 66 30 view .LVU755
 2687 0228 93E80300 		ldm	r3, {r0, r1}
 2688 022c 0DF10809 		add	r9, sp, #8
 2689              	.LBE133:
 2690              	.LBE149:
 464:src/console.c **** 	set_menu ( remapped.shift );
 2691              		.loc 2 464 10 view .LVU756
 2692 0230 BAF12F0F 		cmp	r10, #47
 2693              	.LBB150:
 2694              	.LBB134:
  66:src/console.c **** 
 2695              		.loc 2 66 30 view .LVU757
 2696 0234 89E80300 		stm	r9, {r0, r1}
 2697 0238 0D46     		mov	r5, r1
 2698              	.LVL237:
  66:src/console.c **** 
 2699              		.loc 2 66 30 view .LVU758
 2700              	.LBE134:
 2701              	.LBE150:
 464:src/console.c **** 	set_menu ( remapped.shift );
 2702              		.loc 2 464 7 is_stmt 1 view .LVU759
 464:src/console.c **** 	set_menu ( remapped.shift );
 2703              		.loc 2 464 10 is_stmt 0 view .LVU760
 2704 023a 7FF473AF 		bne	.L202
 2705              	.LVL238:
 2706              	.L235:
 465:src/console.c **** 	display_current_menu ();
 2707              		.loc 2 465 2 is_stmt 1 view .LVU761
 2708              	.LBB151:
 2709              	.LBI151:
   3:src/menu.c    ****   if (new_menu == current_menu) {
 2710              		.loc 1 3 6 view .LVU762
 2711              	.LBB152:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2712              		.loc 1 4 3 view .LVU763
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2713              		.loc 1 4 7 is_stmt 0 view .LVU764
ARM GAS  /tmp/ccZ4XUVa.s 			page 75


 2714 023e 3368     		ldr	r3, [r6]
 2715              	.LVL239:
   5:src/menu.c    ****     current_menu = default_menu;
 2716              		.loc 1 5 3 is_stmt 1 view .LVU765
   5:src/menu.c    ****     current_menu = default_menu;
 2717              		.loc 1 5 6 is_stmt 0 view .LVU766
 2718 0240 AB42     		cmp	r3, r5
 2719 0242 3BD0     		beq	.L203
   8:src/menu.c    ****     current_menu = last_menu;
 2720              		.loc 1 8 8 is_stmt 1 view .LVU767
   8:src/menu.c    ****     current_menu = last_menu;
 2721              		.loc 1 8 11 is_stmt 0 view .LVU768
 2722 0244 6A1C     		adds	r2, r5, #1
 2723 0246 40D0     		beq	.L238
 2724              	.LVL240:
 2725              	.L204:
  12:src/menu.c    ****   }
 2726              		.loc 1 12 5 is_stmt 1 view .LVU769
 2727 0248 3F4A     		ldr	r2, .L249+116
  12:src/menu.c    ****   }
 2728              		.loc 1 12 18 is_stmt 0 view .LVU770
 2729 024a 3560     		str	r5, [r6]
 2730              	.LVL241:
 2731              	.L206:
  14:src/menu.c    **** }
 2732              		.loc 1 14 3 is_stmt 1 view .LVU771
 2733              	.LBE152:
 2734              	.LBE151:
 2735              	.LBB156:
 2736              	.LBB157:
  28:src/menu.c    **** }
 2737              		.loc 1 28 3 is_stmt 0 view .LVU772
 2738 024c 2846     		mov	r0, r5
 2739              	.LBE157:
 2740              	.LBE156:
 2741              	.LBB159:
 2742              	.LBB153:
  14:src/menu.c    **** }
 2743              		.loc 1 14 13 view .LVU773
 2744 024e 1360     		str	r3, [r2]
 2745              	.LBE153:
 2746              	.LBE159:
 466:src/console.c **** 	switch (cur_shift()) { // gets rid of the shift state from the menu-selecting key
 2747              		.loc 2 466 2 is_stmt 1 view .LVU774
 2748              	.LBB160:
 2749              	.LBI156:
  27:src/menu.c    ****   display_menu (current_menu);
 2750              		.loc 1 27 6 view .LVU775
 2751              	.LBB158:
  28:src/menu.c    **** }
 2752              		.loc 1 28 3 view .LVU776
 2753 0250 FFF7FEFF 		bl	display_menu
 2754              	.LVL242:
 2755              	.LBE158:
 2756              	.LBE160:
 467:src/console.c **** 	case SHIFT_F:
 2757              		.loc 2 467 2 view .LVU777
ARM GAS  /tmp/ccZ4XUVa.s 			page 76


 467:src/console.c **** 	case SHIFT_F:
 2758              		.loc 2 467 10 is_stmt 0 view .LVU778
 2759 0254 FFF7FEFF 		bl	cur_shift
 2760              	.LVL243:
 467:src/console.c **** 	case SHIFT_F:
 2761              		.loc 2 467 2 view .LVU779
 2762 0258 0228     		cmp	r0, #2
 469:src/console.c **** 	  break;
 2763              		.loc 2 469 4 is_stmt 1 view .LVU780
 469:src/console.c **** 	  break;
 2764              		.loc 2 469 13 is_stmt 0 view .LVU781
 2765 025a 14BF     		ite	ne
 2766 025c 3B4B     		ldrne	r3, .L249+120
 472:src/console.c **** 	  break;
 2767              		.loc 2 472 4 is_stmt 1 view .LVU782
 472:src/console.c **** 	  break;
 2768              		.loc 2 472 13 is_stmt 0 view .LVU783
 2769 025e 3C4B     		ldreq	r3, .L249+124
 2770 0260 93E80300 		ldm	r3, {r0, r1}
 2771 0264 89E80300 		stm	r9, {r0, r1}
 2772 0268 0D46     		mov	r5, r1
 2773 026a 93F800A0 		ldrb	r10, [r3]	@ zero_extendqisi2
 2774              	.LVL244:
 473:src/console.c **** 	case SHIFT_H:
 2775              		.loc 2 473 4 is_stmt 1 view .LVU784
 2776 026e 59E7     		b	.L202
 2777              	.LVL245:
 2778              	.L212:
 2779              	.LBB161:
 2780              	.LBB135:
 2781              	.LBB130:
  72:src/console.c ****   }
 2782              		.loc 2 72 12 is_stmt 0 view .LVU785
 2783 0270 0C25     		movs	r5, #12
 2784              	.LVL246:
 2785              	.L178:
  72:src/console.c ****   }
 2786              		.loc 2 72 12 view .LVU786
 2787              	.LBE130:
 2788              	.LBE135:
 2789              	.LBE161:
 488:src/console.c **** 	display_current_menu();
 2790              		.loc 2 488 2 is_stmt 1 view .LVU787
 488:src/console.c **** 	display_current_menu();
 2791              		.loc 2 488 13 is_stmt 0 view .LVU788
 2792 0272 3123     		movs	r3, #49
 2793 0274 0395     		str	r5, [sp, #12]
 2794 0276 8DF80830 		strb	r3, [sp, #8]
 2795 027a 6D46     		mov	r5, sp
 2796              	.LVL247:
 488:src/console.c **** 	display_current_menu();
 2797              		.loc 2 488 13 view .LVU789
 2798 027c 0DF10809 		add	r9, sp, #8
 2799 0280 99E80600 		ldm	r9, {r1, r2}
 2800 0284 2846     		mov	r0, r5
 2801 0286 FFF7FEFF 		bl	do_multi
 2802              	.LVL248:
ARM GAS  /tmp/ccZ4XUVa.s 			page 77


 2803 028a 95E80300 		ldm	r5, {r0, r1}
 2804 028e 89E80300 		stm	r9, {r0, r1}
 2805              	.LVL249:
 488:src/console.c **** 	display_current_menu();
 2806              		.loc 2 488 13 view .LVU790
 2807 0292 9DF808A0 		ldrb	r10, [sp, #8]	@ zero_extendqisi2
 2808              	.LVL250:
 2809              	.LBB162:
 2810              	.LBB163:
  28:src/menu.c    **** }
 2811              		.loc 1 28 3 view .LVU791
 2812 0296 3068     		ldr	r0, [r6]
 2813              	.LBE163:
 2814              	.LBE162:
 488:src/console.c **** 	display_current_menu();
 2815              		.loc 2 488 13 view .LVU792
 2816 0298 039D     		ldr	r5, [sp, #12]
 2817              	.LVL251:
 489:src/console.c ****       }
 2818              		.loc 2 489 2 is_stmt 1 view .LVU793
 2819              	.LBB165:
 2820              	.LBI162:
  27:src/menu.c    ****   display_menu (current_menu);
 2821              		.loc 1 27 6 view .LVU794
 2822              	.LBB164:
  28:src/menu.c    **** }
 2823              		.loc 1 28 3 view .LVU795
 2824 029a FFF7FEFF 		bl	display_menu
 2825              	.LVL252:
  28:src/menu.c    **** }
 2826              		.loc 1 28 3 is_stmt 0 view .LVU796
 2827              	.LBE164:
 2828              	.LBE165:
 491:src/console.c ****       process_keycode_with_shift(remapped);
 2829              		.loc 2 491 7 is_stmt 1 view .LVU797
 491:src/console.c ****       process_keycode_with_shift(remapped);
 2830              		.loc 2 491 10 is_stmt 0 view .LVU798
 2831 029e BAF1320F 		cmp	r10, #50
 2832 02a2 7FF463AF 		bne	.L232
 2833              	.LVL253:
 2834              	.L210:
 493:src/console.c ****     }
 494:src/console.c ****   }
 495:src/console.c ****   save_ram_file(0);
 2835              		.loc 2 495 3 is_stmt 1 view .LVU799
 2836 02a6 0020     		movs	r0, #0
 496:src/console.c ****   return;
 497:src/console.c **** }
 2837              		.loc 2 497 1 is_stmt 0 view .LVU800
 2838 02a8 04B0     		add	sp, sp, #16
 2839              		.cfi_remember_state
 2840              		.cfi_def_cfa_offset 32
 2841              		@ sp needed
 2842 02aa BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2843              		.cfi_restore 14
 2844              		.cfi_restore 10
 2845              		.cfi_restore 9
ARM GAS  /tmp/ccZ4XUVa.s 			page 78


 2846              		.cfi_restore 8
 2847              		.cfi_restore 7
 2848              		.cfi_restore 6
 2849              		.cfi_restore 5
 2850              		.cfi_restore 4
 2851              		.cfi_def_cfa_offset 0
 2852              	.LVL254:
 495:src/console.c ****   return;
 2853              		.loc 2 495 3 view .LVU801
 2854 02ae FFF7FEBF 		b	save_ram_file
 2855              	.LVL255:
 2856              	.L233:
 2857              		.cfi_restore_state
 2858              	.LBB166:
 2859              	.LBB136:
  68:src/console.c **** 
 2860              		.loc 2 68 16 is_stmt 1 view .LVU802
  68:src/console.c **** 
 2861              		.loc 2 68 23 is_stmt 0 view .LVU803
 2862 02b2 284B     		ldr	r3, .L249+128
 2863 02b4 B6E7     		b	.L231
 2864              	.LVL256:
 2865              	.L215:
  68:src/console.c **** 
 2866              		.loc 2 68 23 view .LVU804
 2867              	.LBE136:
 2868              	.LBE166:
 2869              	.LBB167:
 2870              	.LBB154:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 2871              		.loc 1 4 7 view .LVU805
 2872 02b6 1D46     		mov	r5, r3
 2873 02b8 0DF10809 		add	r9, sp, #8
 2874              	.LVL257:
 2875              	.L203:
   6:src/menu.c    ****   }
 2876              		.loc 1 6 5 is_stmt 1 view .LVU806
   6:src/menu.c    ****   }
 2877              		.loc 1 6 18 is_stmt 0 view .LVU807
 2878 02bc 264B     		ldr	r3, .L249+132
 2879              	.LVL258:
   6:src/menu.c    ****   }
 2880              		.loc 1 6 18 view .LVU808
 2881 02be 224A     		ldr	r2, .L249+116
 2882 02c0 1968     		ldr	r1, [r3]
 2883 02c2 3160     		str	r1, [r6]
 2884              	.LVL259:
   6:src/menu.c    ****   }
 2885              		.loc 1 6 18 view .LVU809
 2886 02c4 2B46     		mov	r3, r5
 2887 02c6 0D46     		mov	r5, r1
 2888 02c8 C0E7     		b	.L206
 2889              	.LVL260:
 2890              	.L238:
   9:src/menu.c    ****   }
 2891              		.loc 1 9 5 is_stmt 1 view .LVU810
   9:src/menu.c    ****   }
ARM GAS  /tmp/ccZ4XUVa.s 			page 79


 2892              		.loc 1 9 18 is_stmt 0 view .LVU811
 2893 02ca 1F4A     		ldr	r2, .L249+116
 2894 02cc 1568     		ldr	r5, [r2]
 2895              	.LVL261:
   9:src/menu.c    ****   }
 2896              		.loc 1 9 18 view .LVU812
 2897 02ce 3560     		str	r5, [r6]
 2898 02d0 BCE7     		b	.L206
 2899              	.L250:
 2900 02d2 00BF     		.align	2
 2901              	.L249:
 2902 02d4 00000000 		.word	StateWhileOn
 2903 02d8 00000000 		.word	DispMsg
 2904 02dc 00200010 		.word	268443648
 2905 02e0 00000000 		.word	.LANCHOR1
 2906 02e4 7D030008 		.word	134218621
 2907 02e8 31020008 		.word	134218289
 2908 02ec 00000000 		.word	JustDisplayed
 2909 02f0 19040008 		.word	134218777
 2910 02f4 19020008 		.word	134218265
 2911 02f8 91030008 		.word	134218641
 2912 02fc E5020008 		.word	134218469
 2913 0300 59020008 		.word	134218329
 2914 0304 35020008 		.word	134218293
 2915 0308 89030008 		.word	134218633
 2916 030c B9030008 		.word	134218681
 2917 0310 B9040008 		.word	134218937
 2918 0314 00000000 		.word	.LANCHOR5
 2919 0318 00000000 		.word	.LANCHOR12
 2920 031c 59030008 		.word	134218585
 2921 0320 00000000 		.word	.LANCHOR16
 2922 0324 00000000 		.word	.LANCHOR7
 2923 0328 01040008 		.word	134218753
 2924 032c 81030008 		.word	134218625
 2925 0330 00000000 		.word	Pause
 2926 0334 F5030008 		.word	134218741
 2927 0338 55020008 		.word	134218325
 2928 033c 2D040008 		.word	134218797
 2929 0340 1D020008 		.word	134218269
 2930 0344 00000000 		.word	.LANCHOR17
 2931 0348 00000000 		.word	.LANCHOR3
 2932 034c 00000000 		.word	.LANCHOR14
 2933 0350 00000000 		.word	.LANCHOR15
 2934 0354 00000000 		.word	.LANCHOR8
 2935 0358 00000000 		.word	.LANCHOR2
 2936 035c F9030008 		.word	134218745
 2937              	.LVL262:
 2938              	.L234:
   9:src/menu.c    ****   }
 2939              		.loc 1 9 18 view .LVU813
 2940              	.LBE154:
 2941              	.LBE167:
 2942              	.LBB168:
 2943              	.LBB137:
  77:src/console.c ****       case SHIFT_N:
 2944              		.loc 2 77 7 is_stmt 1 view .LVU814
  77:src/console.c ****       case SHIFT_N:
ARM GAS  /tmp/ccZ4XUVa.s 			page 80


 2945              		.loc 2 77 15 is_stmt 0 view .LVU815
 2946 0360 FFF7FEFF 		bl	cur_shift
 2947              	.LVL263:
  77:src/console.c ****       case SHIFT_N:
 2948              		.loc 2 77 7 view .LVU816
 2949 0364 0328     		cmp	r0, #3
  77:src/console.c ****       case SHIFT_N:
 2950              		.loc 2 77 15 view .LVU817
 2951 0366 0546     		mov	r5, r0
  77:src/console.c ****       case SHIFT_N:
 2952              		.loc 2 77 7 view .LVU818
 2953 0368 00F2B280 		bhi	.L213
 2954 036c 0128     		cmp	r0, #1
 2955 036e 6CD8     		bhi	.L182
 2956 0370 0028     		cmp	r0, #0
 2957 0372 7ED0     		beq	.L239
  80:src/console.c ****       case SHIFT_F:
 2958              		.loc 2 80 2 is_stmt 1 view .LVU819
  82:src/console.c **** 	break;
 2959              		.loc 2 82 2 view .LVU820
  82:src/console.c **** 	break;
 2960              		.loc 2 82 23 is_stmt 0 view .LVU821
 2961 0374 794B     		ldr	r3, .L251
 2962 0376 93E80300 		ldm	r3, {r0, r1}
 2963 037a 0DF10809 		add	r9, sp, #8
 2964 037e 89E80300 		stm	r9, {r0, r1}
 2965              	.LVL264:
  82:src/console.c **** 	break;
 2966              		.loc 2 82 23 view .LVU822
 2967              	.LBE137:
 2968              	.LBE168:
 464:src/console.c **** 	set_menu ( remapped.shift );
 2969              		.loc 2 464 7 is_stmt 1 view .LVU823
 480:src/console.c **** 	SET_ST(STAT_MENU);
 2970              		.loc 2 480 7 view .LVU824
 487:src/console.c **** 	remapped = do_multi (remapped);
 2971              		.loc 2 487 7 view .LVU825
 491:src/console.c ****       process_keycode_with_shift(remapped);
 2972              		.loc 2 491 7 view .LVU826
 2973              	.LBB169:
 2974              	.LBB138:
  82:src/console.c **** 	break;
 2975              		.loc 2 82 23 is_stmt 0 view .LVU827
 2976 0382 0025     		movs	r5, #0
 2977 0384 4FF02A0A 		mov	r10, #42
 2978              	.LVL265:
  82:src/console.c **** 	break;
 2979              		.loc 2 82 23 view .LVU828
 2980 0388 F2E6     		b	.L181
 2981              	.LVL266:
 2982              	.L197:
 111:src/console.c ****   case KEY_F6:
 2983              		.loc 2 111 5 is_stmt 1 view .LVU829
 111:src/console.c ****   case KEY_F6:
 2984              		.loc 2 111 9 is_stmt 0 view .LVU830
 2985 038a FFF7FEFF 		bl	cur_shift
 2986              	.LVL267:
ARM GAS  /tmp/ccZ4XUVa.s 			page 81


 111:src/console.c ****   case KEY_F6:
 2987              		.loc 2 111 8 view .LVU831
 2988 038e 0128     		cmp	r0, #1
 2989 0390 00F0B280 		beq	.L240
 2990              	.L186:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2991              		.loc 2 113 5 is_stmt 1 view .LVU832
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2992              		.loc 2 113 9 is_stmt 0 view .LVU833
 2993 0394 FFF7FEFF 		bl	cur_shift
 2994              	.LVL268:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2995              		.loc 2 113 8 view .LVU834
 2996 0398 0028     		cmp	r0, #0
 2997 039a 58D1     		bne	.L198
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2998              		.loc 2 113 33 is_stmt 1 view .LVU835
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 2999              		.loc 2 113 67 is_stmt 0 view .LVU836
 3000 039c 3168     		ldr	r1, [r6]
 3001 039e 704A     		ldr	r2, .L251+4
 3002 03a0 D023     		movs	r3, #208
 3003 03a2 03FB01F3 		mul	r3, r3, r1
 3004 03a6 D018     		adds	r0, r2, r3
 3005 03a8 D0E92C01 		ldrd	r0, r1, [r0, #176]
 3006 03ac B033     		adds	r3, r3, #176
 3007              	.L229:
 3008 03ae 0DF10809 		add	r9, sp, #8
 3009 03b2 12F803A0 		ldrb	r10, [r2, r3]	@ zero_extendqisi2
 3010              	.LVL269:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3011              		.loc 2 113 67 view .LVU837
 3012 03b6 89E80300 		stm	r9, {r0, r1}
 3013 03ba 1344     		add	r3, r3, r2
 3014 03bc 5D68     		ldr	r5, [r3, #4]
 3015              	.LVL270:
 113:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[5].shifted;
 3016              		.loc 2 113 67 view .LVU838
 3017 03be ADE6     		b	.L177
 3018              	.LVL271:
 3019              	.L196:
 108:src/console.c ****   case KEY_F5:
 3020              		.loc 2 108 5 is_stmt 1 view .LVU839
 108:src/console.c ****   case KEY_F5:
 3021              		.loc 2 108 9 is_stmt 0 view .LVU840
 3022 03c0 FFF7FEFF 		bl	cur_shift
 3023              	.LVL272:
 108:src/console.c ****   case KEY_F5:
 3024              		.loc 2 108 8 view .LVU841
 3025 03c4 0128     		cmp	r0, #1
 3026 03c6 00F0A180 		beq	.L241
 3027              	.L188:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3028              		.loc 2 110 5 is_stmt 1 view .LVU842
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3029              		.loc 2 110 9 is_stmt 0 view .LVU843
 3030 03ca FFF7FEFF 		bl	cur_shift
ARM GAS  /tmp/ccZ4XUVa.s 			page 82


 3031              	.LVL273:
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3032              		.loc 2 110 8 view .LVU844
 3033 03ce 0028     		cmp	r0, #0
 3034 03d0 DBD1     		bne	.L197
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3035              		.loc 2 110 33 is_stmt 1 view .LVU845
 110:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[4].shifted;
 3036              		.loc 2 110 67 is_stmt 0 view .LVU846
 3037 03d2 3168     		ldr	r1, [r6]
 3038 03d4 624A     		ldr	r2, .L251+4
 3039 03d6 D023     		movs	r3, #208
 3040 03d8 03FB01F3 		mul	r3, r3, r1
 3041 03dc D018     		adds	r0, r2, r3
 3042 03de D0E92401 		ldrd	r0, r1, [r0, #144]
 3043 03e2 9033     		adds	r3, r3, #144
 3044 03e4 E3E7     		b	.L229
 3045              	.L195:
 105:src/console.c ****   case KEY_F4:
 3046              		.loc 2 105 5 is_stmt 1 view .LVU847
 105:src/console.c ****   case KEY_F4:
 3047              		.loc 2 105 9 is_stmt 0 view .LVU848
 3048 03e6 FFF7FEFF 		bl	cur_shift
 3049              	.LVL274:
 105:src/console.c ****   case KEY_F4:
 3050              		.loc 2 105 8 view .LVU849
 3051 03ea 0128     		cmp	r0, #1
 3052 03ec 00F09880 		beq	.L242
 3053              	.L189:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3054              		.loc 2 107 5 is_stmt 1 view .LVU850
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3055              		.loc 2 107 9 is_stmt 0 view .LVU851
 3056 03f0 FFF7FEFF 		bl	cur_shift
 3057              	.LVL275:
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3058              		.loc 2 107 8 view .LVU852
 3059 03f4 0028     		cmp	r0, #0
 3060 03f6 E3D1     		bne	.L196
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3061              		.loc 2 107 33 is_stmt 1 view .LVU853
 107:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[3].shifted;
 3062              		.loc 2 107 67 is_stmt 0 view .LVU854
 3063 03f8 3168     		ldr	r1, [r6]
 3064 03fa 594A     		ldr	r2, .L251+4
 3065 03fc D023     		movs	r3, #208
 3066 03fe 03FB01F3 		mul	r3, r3, r1
 3067 0402 D018     		adds	r0, r2, r3
 3068 0404 D0E91C01 		ldrd	r0, r1, [r0, #112]
 3069 0408 7033     		adds	r3, r3, #112
 3070 040a D0E7     		b	.L229
 3071              	.L192:
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3072              		.loc 2 98 5 is_stmt 1 view .LVU855
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3073              		.loc 2 98 9 is_stmt 0 view .LVU856
 3074 040c FFF7FEFF 		bl	cur_shift
ARM GAS  /tmp/ccZ4XUVa.s 			page 83


 3075              	.LVL276:
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3076              		.loc 2 98 8 view .LVU857
 3077 0410 0028     		cmp	r0, #0
 3078 0412 42D0     		beq	.L243
  99:src/console.c ****   case KEY_F2:
 3079              		.loc 2 99 5 is_stmt 1 view .LVU858
  99:src/console.c ****   case KEY_F2:
 3080              		.loc 2 99 9 is_stmt 0 view .LVU859
 3081 0414 FFF7FEFF 		bl	cur_shift
 3082              	.LVL277:
  99:src/console.c ****   case KEY_F2:
 3083              		.loc 2 99 8 view .LVU860
 3084 0418 0128     		cmp	r0, #1
 3085 041a 00F09580 		beq	.L244
 3086              	.L191:
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3087              		.loc 2 101 5 is_stmt 1 view .LVU861
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3088              		.loc 2 101 9 is_stmt 0 view .LVU862
 3089 041e FFF7FEFF 		bl	cur_shift
 3090              	.LVL278:
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3091              		.loc 2 101 8 view .LVU863
 3092 0422 80B3     		cbz	r0, .L245
 102:src/console.c ****   case KEY_F3:
 3093              		.loc 2 102 5 is_stmt 1 view .LVU864
 102:src/console.c ****   case KEY_F3:
 3094              		.loc 2 102 9 is_stmt 0 view .LVU865
 3095 0424 FFF7FEFF 		bl	cur_shift
 3096              	.LVL279:
 102:src/console.c ****   case KEY_F3:
 3097              		.loc 2 102 8 view .LVU866
 3098 0428 0128     		cmp	r0, #1
 3099 042a 00F08380 		beq	.L246
 3100              	.L190:
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3101              		.loc 2 104 5 is_stmt 1 view .LVU867
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3102              		.loc 2 104 9 is_stmt 0 view .LVU868
 3103 042e FFF7FEFF 		bl	cur_shift
 3104              	.LVL280:
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3105              		.loc 2 104 8 view .LVU869
 3106 0432 0028     		cmp	r0, #0
 3107 0434 D7D1     		bne	.L195
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3108              		.loc 2 104 33 is_stmt 1 view .LVU870
 104:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[2].shifted;
 3109              		.loc 2 104 67 is_stmt 0 view .LVU871
 3110 0436 3168     		ldr	r1, [r6]
 3111 0438 494A     		ldr	r2, .L251+4
 3112 043a D023     		movs	r3, #208
 3113 043c 03FB01F3 		mul	r3, r3, r1
 3114 0440 D018     		adds	r0, r2, r3
 3115 0442 D0E91401 		ldrd	r0, r1, [r0, #80]
 3116 0446 5033     		adds	r3, r3, #80
ARM GAS  /tmp/ccZ4XUVa.s 			page 84


 3117 0448 B1E7     		b	.L229
 3118              	.L182:
  83:src/console.c ****       case SHIFT_G:
 3119              		.loc 2 83 2 is_stmt 1 view .LVU872
  85:src/console.c **** 	break;
 3120              		.loc 2 85 2 view .LVU873
  85:src/console.c **** 	break;
 3121              		.loc 2 85 9 is_stmt 0 view .LVU874
 3122 044a 464B     		ldr	r3, .L251+8
 3123 044c EAE6     		b	.L231
 3124              	.L198:
 114:src/console.c ****   }
 3125              		.loc 2 114 5 is_stmt 1 view .LVU875
 114:src/console.c ****   }
 3126              		.loc 2 114 9 is_stmt 0 view .LVU876
 3127 044e FFF7FEFF 		bl	cur_shift
 3128              	.LVL281:
 114:src/console.c ****   }
 3129              		.loc 2 114 8 view .LVU877
 3130 0452 0128     		cmp	r0, #1
 3131 0454 46D0     		beq	.L247
 3132              	.L185:
 117:src/console.c ****   case SHIFT_N:    
 3133              		.loc 2 117 3 is_stmt 1 view .LVU878
 117:src/console.c ****   case SHIFT_N:    
 3134              		.loc 2 117 11 is_stmt 0 view .LVU879
 3135 0456 FFF7FEFF 		bl	cur_shift
 3136              	.LVL282:
 117:src/console.c ****   case SHIFT_N:    
 3137              		.loc 2 117 3 view .LVU880
 3138 045a 0128     		cmp	r0, #1
 3139 045c 27D0     		beq	.L199
 3140 045e 0228     		cmp	r0, #2
 3141 0460 29D0     		beq	.L200
 3142 0462 30B3     		cbz	r0, .L201
  62:src/console.c **** 
 3143              		.loc 2 62 41 view .LVU881
 3144 0464 5FFA8AFA 		uxtb	r10, r10
 3145              	.LVL283:
  62:src/console.c **** 
 3146              		.loc 2 62 41 view .LVU882
 3147              	.LBE138:
 3148              	.LBE169:
 464:src/console.c **** 	set_menu ( remapped.shift );
 3149              		.loc 2 464 7 is_stmt 1 view .LVU883
 464:src/console.c **** 	set_menu ( remapped.shift );
 3150              		.loc 2 464 10 is_stmt 0 view .LVU884
 3151 0468 BAF12F0F 		cmp	r10, #47
 3152 046c 32D0     		beq	.L248
 3153              	.LBB170:
 3154              	.LBB139:
 128:src/console.c ****   }
 3155              		.loc 2 128 12 view .LVU885
 3156 046e 0025     		movs	r5, #0
 3157 0470 58E6     		b	.L202
 3158              	.LVL284:
 3159              	.L239:
ARM GAS  /tmp/ccZ4XUVa.s 			page 85


  79:src/console.c **** 	break;
 3160              		.loc 2 79 2 is_stmt 1 view .LVU886
  79:src/console.c **** 	break;
 3161              		.loc 2 79 21 is_stmt 0 view .LVU887
 3162 0472 3D4A     		ldr	r2, .L251+12
 3163 0474 92E80300 		ldm	r2, {r0, r1}
 3164 0478 0DF10809 		add	r9, sp, #8
 3165 047c 89E80300 		stm	r9, {r0, r1}
 3166              	.LVL285:
  79:src/console.c **** 	break;
 3167              		.loc 2 79 21 view .LVU888
 3168              	.LBE139:
 3169              	.LBE170:
 464:src/console.c **** 	set_menu ( remapped.shift );
 3170              		.loc 2 464 7 is_stmt 1 view .LVU889
 480:src/console.c **** 	SET_ST(STAT_MENU);
 3171              		.loc 2 480 7 view .LVU890
 487:src/console.c **** 	remapped = do_multi (remapped);
 3172              		.loc 2 487 7 view .LVU891
 491:src/console.c ****       process_keycode_with_shift(remapped);
 3173              		.loc 2 491 7 view .LVU892
 3174              	.LBB171:
 3175              	.LBB140:
  79:src/console.c **** 	break;
 3176              		.loc 2 79 21 is_stmt 0 view .LVU893
 3177 0480 4FF0290A 		mov	r10, #41
 3178              	.LVL286:
  79:src/console.c **** 	break;
 3179              		.loc 2 79 21 view .LVU894
 3180 0484 74E6     		b	.L181
 3181              	.LVL287:
 3182              	.L245:
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3183              		.loc 2 101 33 is_stmt 1 view .LVU895
 101:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[1].shifted;
 3184              		.loc 2 101 67 is_stmt 0 view .LVU896
 3185 0486 3168     		ldr	r1, [r6]
 3186 0488 354A     		ldr	r2, .L251+4
 3187 048a D023     		movs	r3, #208
 3188 048c 03FB01F3 		mul	r3, r3, r1
 3189 0490 D018     		adds	r0, r2, r3
 3190 0492 D0E90C01 		ldrd	r0, r1, [r0, #48]
 3191 0496 3033     		adds	r3, r3, #48
 3192 0498 89E7     		b	.L229
 3193              	.L243:
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3194              		.loc 2 98 33 is_stmt 1 view .LVU897
  98:src/console.c ****     if (cur_shift() == SHIFT_F) return Menus[current_menu].keys[0].shifted;
 3195              		.loc 2 98 67 is_stmt 0 view .LVU898
 3196 049a 3168     		ldr	r1, [r6]
 3197 049c 304A     		ldr	r2, .L251+4
 3198 049e D023     		movs	r3, #208
 3199 04a0 03FB01F3 		mul	r3, r3, r1
 3200 04a4 D018     		adds	r0, r2, r3
 3201 04a6 D0E90401 		ldrd	r0, r1, [r0, #16]
 3202 04aa 1033     		adds	r3, r3, #16
 3203 04ac 7FE7     		b	.L229
ARM GAS  /tmp/ccZ4XUVa.s 			page 86


 3204              	.L199:
 120:src/console.c ****   case SHIFT_F:
 3205              		.loc 2 120 5 is_stmt 1 view .LVU899
 122:src/console.c ****     break;
 3206              		.loc 2 122 5 view .LVU900
 122:src/console.c ****     break;
 3207              		.loc 2 122 26 is_stmt 0 view .LVU901
 3208 04ae 2F4B     		ldr	r3, .L251+16
 3209 04b0 29E6     		b	.L230
 3210              	.L201:
 119:src/console.c ****     break;
 3211              		.loc 2 119 5 is_stmt 1 view .LVU902
 119:src/console.c ****     break;
 3212              		.loc 2 119 24 is_stmt 0 view .LVU903
 3213 04b2 2F4B     		ldr	r3, .L251+20
 3214 04b4 27E6     		b	.L230
 3215              	.L200:
 123:src/console.c ****   case SHIFT_G:
 3216              		.loc 2 123 5 is_stmt 1 view .LVU904
 125:src/console.c ****     break;
 3217              		.loc 2 125 5 view .LVU905
 125:src/console.c ****     break;
 3218              		.loc 2 125 26 is_stmt 0 view .LVU906
 3219 04b6 2F4B     		ldr	r3, .L251+24
 3220 04b8 03EBCA02 		add	r2, r3, r10, lsl #3
 3221 04bc 92E80300 		ldm	r2, {r0, r1}
 3222 04c0 0DF10809 		add	r9, sp, #8
 3223 04c4 89E80300 		stm	r9, {r0, r1}
 3224 04c8 13F83AA0 		ldrb	r10, [r3, r10, lsl #3]	@ zero_extendqisi2
 3225              	.LVL288:
 125:src/console.c ****     break;
 3226              		.loc 2 125 26 view .LVU907
 3227 04cc 0D46     		mov	r5, r1
 3228              	.LVL289:
 125:src/console.c ****     break;
 3229              		.loc 2 125 26 view .LVU908
 3230 04ce 25E6     		b	.L177
 3231              	.LVL290:
 3232              	.L213:
  77:src/console.c ****       case SHIFT_N:
 3233              		.loc 2 77 7 view .LVU909
 3234 04d0 0025     		movs	r5, #0
 3235 04d2 4BE6     		b	.L232
 3236              	.LVL291:
 3237              	.L248:
  77:src/console.c ****       case SHIFT_N:
 3238              		.loc 2 77 7 view .LVU910
 3239              	.LBE140:
 3240              	.LBE171:
 465:src/console.c **** 	display_current_menu ();
 3241              		.loc 2 465 2 is_stmt 1 view .LVU911
 3242              	.LBB172:
   3:src/menu.c    ****   if (new_menu == current_menu) {
 3243              		.loc 1 3 6 view .LVU912
 3244              	.LBB155:
   4:src/menu.c    ****   if (new_menu == current_menu) {
 3245              		.loc 1 4 3 view .LVU913
ARM GAS  /tmp/ccZ4XUVa.s 			page 87


   4:src/menu.c    ****   if (new_menu == current_menu) {
 3246              		.loc 1 4 7 is_stmt 0 view .LVU914
 3247 04d4 3368     		ldr	r3, [r6]
 3248              	.LVL292:
   5:src/menu.c    ****     current_menu = default_menu;
 3249              		.loc 1 5 3 is_stmt 1 view .LVU915
   5:src/menu.c    ****     current_menu = default_menu;
 3250              		.loc 1 5 6 is_stmt 0 view .LVU916
 3251 04d6 002B     		cmp	r3, #0
 3252 04d8 3FF4EDAE 		beq	.L215
 3253              	.LBE155:
 3254              	.LBE172:
 3255              	.LBB173:
 3256              	.LBB141:
 128:src/console.c ****   }
 3257              		.loc 2 128 12 view .LVU917
 3258 04dc 0025     		movs	r5, #0
 3259 04de 0DF10809 		add	r9, sp, #8
 3260 04e2 B1E6     		b	.L204
 3261              	.LVL293:
 3262              	.L247:
 114:src/console.c ****   }
 3263              		.loc 2 114 33 is_stmt 1 view .LVU918
 114:src/console.c ****   }
 3264              		.loc 2 114 67 is_stmt 0 view .LVU919
 3265 04e4 3168     		ldr	r1, [r6]
 3266 04e6 1E4A     		ldr	r2, .L251+4
 3267 04e8 D023     		movs	r3, #208
 3268 04ea 03FB01F3 		mul	r3, r3, r1
 3269 04ee D018     		adds	r0, r2, r3
 3270 04f0 D0E92E01 		ldrd	r0, r1, [r0, #184]
 3271 04f4 B833     		adds	r3, r3, #184
 3272 04f6 5AE7     		b	.L229
 3273              	.L240:
 111:src/console.c ****   case KEY_F6:
 3274              		.loc 2 111 33 is_stmt 1 view .LVU920
 111:src/console.c ****   case KEY_F6:
 3275              		.loc 2 111 67 is_stmt 0 view .LVU921
 3276 04f8 3168     		ldr	r1, [r6]
 3277 04fa 194A     		ldr	r2, .L251+4
 3278 04fc D023     		movs	r3, #208
 3279 04fe 03FB01F3 		mul	r3, r3, r1
 3280 0502 D018     		adds	r0, r2, r3
 3281 0504 D0E92601 		ldrd	r0, r1, [r0, #152]
 3282 0508 9833     		adds	r3, r3, #152
 3283 050a 50E7     		b	.L229
 3284              	.L241:
 108:src/console.c ****   case KEY_F5:
 3285              		.loc 2 108 33 is_stmt 1 view .LVU922
 108:src/console.c ****   case KEY_F5:
 3286              		.loc 2 108 67 is_stmt 0 view .LVU923
 3287 050c 3168     		ldr	r1, [r6]
 3288 050e 144A     		ldr	r2, .L251+4
 3289 0510 D023     		movs	r3, #208
 3290 0512 03FB01F3 		mul	r3, r3, r1
 3291 0516 D018     		adds	r0, r2, r3
 3292 0518 D0E91E01 		ldrd	r0, r1, [r0, #120]
ARM GAS  /tmp/ccZ4XUVa.s 			page 88


 3293 051c 7833     		adds	r3, r3, #120
 3294 051e 46E7     		b	.L229
 3295              	.L242:
 105:src/console.c ****   case KEY_F4:
 3296              		.loc 2 105 33 is_stmt 1 view .LVU924
 105:src/console.c ****   case KEY_F4:
 3297              		.loc 2 105 67 is_stmt 0 view .LVU925
 3298 0520 3168     		ldr	r1, [r6]
 3299 0522 0F4A     		ldr	r2, .L251+4
 3300 0524 D023     		movs	r3, #208
 3301 0526 03FB01F3 		mul	r3, r3, r1
 3302 052a D018     		adds	r0, r2, r3
 3303 052c D0E91601 		ldrd	r0, r1, [r0, #88]
 3304 0530 5833     		adds	r3, r3, #88
 3305 0532 3CE7     		b	.L229
 3306              	.L246:
 102:src/console.c ****   case KEY_F3:
 3307              		.loc 2 102 33 is_stmt 1 view .LVU926
 102:src/console.c ****   case KEY_F3:
 3308              		.loc 2 102 67 is_stmt 0 view .LVU927
 3309 0534 3168     		ldr	r1, [r6]
 3310 0536 0A4A     		ldr	r2, .L251+4
 3311 0538 D023     		movs	r3, #208
 3312 053a 03FB01F3 		mul	r3, r3, r1
 3313 053e D018     		adds	r0, r2, r3
 3314 0540 D0E90E01 		ldrd	r0, r1, [r0, #56]
 3315 0544 3833     		adds	r3, r3, #56
 3316 0546 32E7     		b	.L229
 3317              	.L244:
  99:src/console.c ****   case KEY_F2:
 3318              		.loc 2 99 33 is_stmt 1 view .LVU928
  99:src/console.c ****   case KEY_F2:
 3319              		.loc 2 99 67 is_stmt 0 view .LVU929
 3320 0548 3168     		ldr	r1, [r6]
 3321 054a 054A     		ldr	r2, .L251+4
 3322 054c D023     		movs	r3, #208
 3323 054e 03FB01F3 		mul	r3, r3, r1
 3324 0552 D018     		adds	r0, r2, r3
 3325 0554 D0E90601 		ldrd	r0, r1, [r0, #24]
 3326 0558 1833     		adds	r3, r3, #24
 3327 055a 28E7     		b	.L229
 3328              	.L252:
 3329              		.align	2
 3330              	.L251:
 3331 055c E0000000 		.word	.LANCHOR10+224
 3332 0560 00000000 		.word	.LANCHOR4
 3333 0564 00000000 		.word	.LANCHOR11
 3334 0568 E0000000 		.word	.LANCHOR9+224
 3335 056c 00000000 		.word	.LANCHOR10
 3336 0570 00000000 		.word	.LANCHOR9
 3337 0574 00000000 		.word	.LANCHOR13
 3338              	.LBE141:
 3339              	.LBE173:
 3340              		.cfi_endproc
 3341              	.LFE25:
 3343              		.global	n_p
 3344              		.comm	print_string,22,4
ARM GAS  /tmp/ccZ4XUVa.s 			page 89


 3345              		.global	spaces
 3346              		.global	release
 3347              		.global	h_shift
 3348              		.global	g_shift
 3349              		.global	f_shift
 3350              		.global	heartbeat
 3351              		.global	no_key
 3352              		.global	MID_MENU
 3353              		.section	.rodata.str1.4,"aMS",%progbits,1
 3354              		.align	2
 3355              	.LC4:
 3356 0000 53797374 		.ascii	"System!\000"
 3356      656D2100 
 3357              		.global	mid_menu
 3358              		.section	.bss.current_menu,"aw",%nobits
 3359              		.align	2
 3360              		.set	.LANCHOR1,. + 0
 3363              	current_menu:
 3364 0000 00000000 		.space	4
 3365              		.section	.bss.default_menu,"aw",%nobits
 3366              		.align	2
 3367              		.set	.LANCHOR2,. + 0
 3370              	default_menu:
 3371 0000 00000000 		.space	4
 3372              		.section	.bss.last_menu,"aw",%nobits
 3373              		.align	2
 3374              		.set	.LANCHOR3,. + 0
 3377              	last_menu:
 3378 0000 00000000 		.space	4
 3379              		.section	.bss.mdots,"aw",%nobits
 3380              		.align	2
 3381              		.set	.LANCHOR0,. + 0
 3384              	mdots:
 3385 0000 00000000 		.space	400
 3385      00000000 
 3385      00000000 
 3385      00000000 
 3385      00000000 
 3386              		.section	.bss.n_p,"aw",%nobits
 3387              		.align	2
 3390              	n_p:
 3391 0000 00000000 		.space	4
 3392              		.section	.bss.start_ticks,"aw",%nobits
 3393              		.align	2
 3394              		.set	.LANCHOR5,. + 0
 3397              	start_ticks:
 3398 0000 00000000 		.space	4
 3399              		.section	.data.f_shift,"aw"
 3400              		.align	2
 3401              		.set	.LANCHOR14,. + 0
 3404              	f_shift:
 3405 0000 29       		.byte	41
 3406 0001 000000   		.space	3
 3407 0004 FFFFFFFF 		.word	-1
 3408              		.section	.data.g_shift,"aw"
 3409              		.align	2
 3410              		.set	.LANCHOR15,. + 0
ARM GAS  /tmp/ccZ4XUVa.s 			page 90


 3413              	g_shift:
 3414 0000 2A       		.byte	42
 3415 0001 000000   		.space	3
 3416 0004 FFFFFFFF 		.word	-1
 3417              		.section	.data.h_shift,"aw"
 3418              		.align	2
 3419              		.set	.LANCHOR11,. + 0
 3422              	h_shift:
 3423 0000 2B       		.byte	43
 3424 0001 000000   		.space	3
 3425 0004 FFFFFFFF 		.word	-1
 3426              		.section	.data.heartbeat,"aw"
 3427              		.align	2
 3428              		.set	.LANCHOR17,. + 0
 3431              	heartbeat:
 3432 0000 62       		.byte	98
 3433 0001 000000   		.space	3
 3434 0004 FFFFFFFF 		.word	-1
 3435              		.section	.data.no_key,"aw"
 3436              		.align	2
 3437              		.set	.LANCHOR7,. + 0
 3440              	no_key:
 3441 0000 2E       		.byte	46
 3442 0001 000000   		.space	3
 3443 0004 00000000 		.word	0
 3444              		.section	.data.release,"aw"
 3445              		.align	2
 3446              		.set	.LANCHOR8,. + 0
 3449              	release:
 3450 0000 63       		.byte	99
 3451 0001 000000   		.space	3
 3452 0004 FFFFFFFF 		.word	-1
 3453              		.section	.data.spaces,"aw"
 3454              		.align	2
 3455              		.set	.LANCHOR6,. + 0
 3458              	spaces:
 3459 0000 20202020 		.ascii	"                     \000"
 3459      20202020 
 3459      20202020 
 3459      20202020 
 3459      20202020 
 3460              		.section	.rodata.MID_MENU,"a"
 3461              		.align	2
 3462              		.set	.LANCHOR16,. + 0
 3465              	MID_MENU:
 3466 0000 00000000 		.word	.LC4
 3467 0004 00000000 		.word	mid_menu
 3468 0008 00000000 		.word	0
 3469 000c 00000000 		.word	0
 3470              		.section	.rodata.Menus,"a"
 3471              		.align	2
 3472              		.set	.LANCHOR4,. + 0
 3475              	Menus:
 3476 0000 426C616E 		.ascii	"Blank\000"
 3476      6B00
 3477 0006 00000000 		.space	9
 3477      00000000 
ARM GAS  /tmp/ccZ4XUVa.s 			page 91


 3477      00
 3478 000f 00       		.space	1
 3479 0010 2E       		.byte	46
 3480 0011 000000   		.space	3
 3481 0014 FFFFFFFF 		.word	-1
 3482 0018 2E       		.byte	46
 3483 0019 000000   		.space	3
 3484 001c FFFFFFFF 		.word	-1
 3485 0020 00       		.ascii	"\000"
 3486 0021 00000000 		.space	7
 3486      000000
 3487 0028 00       		.ascii	"\000"
 3488 0029 00000000 		.space	7
 3488      000000
 3489 0030 2E       		.byte	46
 3490 0031 000000   		.space	3
 3491 0034 FFFFFFFF 		.word	-1
 3492 0038 2E       		.byte	46
 3493 0039 000000   		.space	3
 3494 003c FFFFFFFF 		.word	-1
 3495 0040 00       		.ascii	"\000"
 3496 0041 00000000 		.space	7
 3496      000000
 3497 0048 00       		.ascii	"\000"
 3498 0049 00000000 		.space	7
 3498      000000
 3499 0050 2E       		.byte	46
 3500 0051 000000   		.space	3
 3501 0054 FFFFFFFF 		.word	-1
 3502 0058 2E       		.byte	46
 3503 0059 000000   		.space	3
 3504 005c FFFFFFFF 		.word	-1
 3505 0060 00       		.ascii	"\000"
 3506 0061 00000000 		.space	7
 3506      000000
 3507 0068 00       		.ascii	"\000"
 3508 0069 00000000 		.space	7
 3508      000000
 3509 0070 2E       		.byte	46
 3510 0071 000000   		.space	3
 3511 0074 FFFFFFFF 		.word	-1
 3512 0078 2E       		.byte	46
 3513 0079 000000   		.space	3
 3514 007c FFFFFFFF 		.word	-1
 3515 0080 00       		.ascii	"\000"
 3516 0081 00000000 		.space	7
 3516      000000
 3517 0088 00       		.ascii	"\000"
 3518 0089 00000000 		.space	7
 3518      000000
 3519 0090 2C       		.byte	44
 3520 0091 000000   		.space	3
 3521 0094 FFFFFFFF 		.word	-1
 3522 0098 2E       		.byte	46
 3523 0099 000000   		.space	3
 3524 009c FFFFFFFF 		.word	-1
 3525 00a0 2D2D0D00 		.ascii	"--\015\000"
ARM GAS  /tmp/ccZ4XUVa.s 			page 92


 3526 00a4 00000000 		.space	4
 3527 00a8 00       		.ascii	"\000"
 3528 00a9 00000000 		.space	7
 3528      000000
 3529 00b0 2D       		.byte	45
 3530 00b1 000000   		.space	3
 3531 00b4 FFFFFFFF 		.word	-1
 3532 00b8 2E       		.byte	46
 3533 00b9 000000   		.space	3
 3534 00bc FFFFFFFF 		.word	-1
 3535 00c0 43505800 		.ascii	"CPX\000"
 3536 00c4 00000000 		.space	4
 3537 00c8 00       		.ascii	"\000"
 3538 00c9 00000000 		.space	7
 3538      000000
 3539 00d0 436C6561 		.ascii	"Clear\000"
 3539      7200
 3540 00d6 00000000 		.space	9
 3540      00000000 
 3540      00
 3541 00df 00       		.space	1
 3542 00e0 10       		.byte	16
 3543 00e1 000000   		.space	3
 3544 00e4 01000000 		.word	1
 3545 00e8 2E       		.byte	46
 3546 00e9 000000   		.space	3
 3547 00ec FFFFFFFF 		.word	-1
 3548 00f0 434C5072 		.ascii	"CLProg\000"
 3548      6F6700
 3549 00f7 00       		.space	1
 3550 00f8 00       		.ascii	"\000"
 3551 00f9 00000000 		.space	7
 3551      000000
 3552 0100 10       		.byte	16
 3553 0101 000000   		.space	3
 3554 0104 02000000 		.word	2
 3555 0108 2E       		.byte	46
 3556 0109 000000   		.space	3
 3557 010c FFFFFFFF 		.word	-1
 3558 0110 434C9100 		.ascii	"CL\221\000"
 3559 0114 00000000 		.space	4
 3560 0118 00       		.ascii	"\000"
 3561 0119 00000000 		.space	7
 3561      000000
 3562 0120 10       		.byte	16
 3563 0121 000000   		.space	3
 3564 0124 03000000 		.word	3
 3565 0128 2E       		.byte	46
 3566 0129 000000   		.space	3
 3567 012c FFFFFFFF 		.word	-1
 3568 0130 434C2058 		.ascii	"CL X\000"
 3568      00
 3569 0135 000000   		.space	3
 3570 0138 00       		.ascii	"\000"
 3571 0139 00000000 		.space	7
 3571      000000
 3572 0140 2E       		.byte	46
ARM GAS  /tmp/ccZ4XUVa.s 			page 93


 3573 0141 000000   		.space	3
 3574 0144 FFFFFFFF 		.word	-1
 3575 0148 2E       		.byte	46
 3576 0149 000000   		.space	3
 3577 014c FFFFFFFF 		.word	-1
 3578 0150 00       		.ascii	"\000"
 3579 0151 00000000 		.space	7
 3579      000000
 3580 0158 00       		.ascii	"\000"
 3581 0159 00000000 		.space	7
 3581      000000
 3582 0160 2C       		.byte	44
 3583 0161 000000   		.space	3
 3584 0164 FFFFFFFF 		.word	-1
 3585 0168 2E       		.byte	46
 3586 0169 000000   		.space	3
 3587 016c FFFFFFFF 		.word	-1
 3588 0170 2D2D0D00 		.ascii	"--\015\000"
 3589 0174 00000000 		.space	4
 3590 0178 00       		.ascii	"\000"
 3591 0179 00000000 		.space	7
 3591      000000
 3592 0180 2D       		.byte	45
 3593 0181 000000   		.space	3
 3594 0184 FFFFFFFF 		.word	-1
 3595 0188 2E       		.byte	46
 3596 0189 000000   		.space	3
 3597 018c FFFFFFFF 		.word	-1
 3598 0190 43505800 		.ascii	"CPX\000"
 3599 0194 00000000 		.space	4
 3600 0198 00       		.ascii	"\000"
 3601 0199 00000000 		.space	7
 3601      000000
 3602 01a0 44495350 		.ascii	"DISP\000"
 3602      00
 3603 01a5 00000000 		.space	10
 3603      00000000 
 3603      0000
 3604 01af 00       		.space	1
 3605 01b0 00       		.byte	0
 3606 01b1 000000   		.space	3
 3607 01b4 03000000 		.word	3
 3608 01b8 05       		.byte	5
 3609 01b9 000000   		.space	3
 3610 01bc 01000000 		.word	1
 3611 01c0 414C4C00 		.ascii	"ALL\000"
 3612 01c4 00000000 		.space	4
 3613 01c8 6120622F 		.ascii	"a b/c\000"
 3613      6300
 3614 01ce 0000     		.space	2
 3615 01d0 01       		.byte	1
 3616 01d1 000000   		.space	3
 3617 01d4 03000000 		.word	3
 3618 01d8 05       		.byte	5
 3619 01d9 000000   		.space	3
 3620 01dc 02000000 		.word	2
 3621 01e0 46495800 		.ascii	"FIX\000"
ARM GAS  /tmp/ccZ4XUVa.s 			page 94


 3622 01e4 00000000 		.space	4
 3623 01e8 642F6300 		.ascii	"d/c\000"
 3624 01ec 00000000 		.space	4
 3625 01f0 02       		.byte	2
 3626 01f1 000000   		.space	3
 3627 01f4 03000000 		.word	3
 3628 01f8 06       		.byte	6
 3629 01f9 000000   		.space	3
 3630 01fc 01000000 		.word	1
 3631 0200 53434900 		.ascii	"SCI\000"
 3632 0204 00000000 		.space	4
 3633 0208 482E4D53 		.ascii	"H.MS\000"
 3633      00
 3634 020d 000000   		.space	3
 3635 0210 03       		.byte	3
 3636 0211 000000   		.space	3
 3637 0214 03000000 		.word	3
 3638 0218 07       		.byte	7
 3639 0219 000000   		.space	3
 3640 021c 01000000 		.word	1
 3641 0220 454E4700 		.ascii	"ENG\000"
 3642 0224 00000000 		.space	4
 3643 0228 482E6400 		.ascii	"H.d\000"
 3644 022c 00000000 		.space	4
 3645 0230 2C       		.byte	44
 3646 0231 000000   		.space	3
 3647 0234 FFFFFFFF 		.word	-1
 3648 0238 26       		.byte	38
 3649 0239 000000   		.space	3
 3650 023c 03000000 		.word	3
 3651 0240 2D2D0D00 		.ascii	"--\015\000"
 3652 0244 00000000 		.space	4
 3653 0248 2E2F2C00 		.ascii	"./,\000"
 3654 024c 00000000 		.space	4
 3655 0250 2D       		.byte	45
 3656 0251 000000   		.space	3
 3657 0254 FFFFFFFF 		.word	-1
 3658 0258 2E       		.byte	46
 3659 0259 000000   		.space	3
 3660 025c FFFFFFFF 		.word	-1
 3661 0260 43505800 		.ascii	"CPX\000"
 3662 0264 00000000 		.space	4
 3663 0268 00       		.ascii	"\000"
 3664 0269 00000000 		.space	7
 3664      000000
 3665 0270 42415345 		.ascii	"BASE\000"
 3665      00
 3666 0275 00000000 		.space	10
 3666      00000000 
 3666      0000
 3667 027f 00       		.space	1
 3668 0280 0E       		.byte	14
 3669 0281 000000   		.space	3
 3670 0284 01000000 		.word	1
 3671 0288 0E       		.byte	14
 3672 0289 000000   		.space	3
 3673 028c 03000000 		.word	3
ARM GAS  /tmp/ccZ4XUVa.s 			page 95


 3674 0290 42494E00 		.ascii	"BIN\000"
 3675 0294 00000000 		.space	4
 3676 0298 6E6F7400 		.ascii	"not\000"
 3677 029c 00000000 		.space	4
 3678 02a0 0E       		.byte	14
 3679 02a1 000000   		.space	3
 3680 02a4 02000000 		.word	2
 3681 02a8 13       		.byte	19
 3682 02a9 000000   		.space	3
 3683 02ac 03000000 		.word	3
 3684 02b0 4F435400 		.ascii	"OCT\000"
 3685 02b4 00000000 		.space	4
 3686 02b8 616E6400 		.ascii	"and\000"
 3687 02bc 00000000 		.space	4
 3688 02c0 0F       		.byte	15
 3689 02c1 000000   		.space	3
 3690 02c4 01000000 		.word	1
 3691 02c8 14       		.byte	20
 3692 02c9 000000   		.space	3
 3693 02cc 03000000 		.word	3
 3694 02d0 44454300 		.ascii	"DEC\000"
 3695 02d4 00000000 		.space	4
 3696 02d8 6F7200   		.ascii	"or\000"
 3697 02db 00000000 		.space	5
 3697      00
 3698 02e0 0F       		.byte	15
 3699 02e1 000000   		.space	3
 3700 02e4 02000000 		.word	2
 3701 02e8 15       		.byte	21
 3702 02e9 000000   		.space	3
 3703 02ec 03000000 		.word	3
 3704 02f0 48455800 		.ascii	"HEX\000"
 3705 02f4 00000000 		.space	4
 3706 02f8 786F7200 		.ascii	"xor\000"
 3707 02fc 00000000 		.space	4
 3708 0300 2C       		.byte	44
 3709 0301 000000   		.space	3
 3710 0304 FFFFFFFF 		.word	-1
 3711 0308 16       		.byte	22
 3712 0309 000000   		.space	3
 3713 030c 03000000 		.word	3
 3714 0310 2D2D0D00 		.ascii	"--\015\000"
 3715 0314 00000000 		.space	4
 3716 0318 524D4452 		.ascii	"RMDR\000"
 3716      00
 3717 031d 000000   		.space	3
 3718 0320 2D       		.byte	45
 3719 0321 000000   		.space	3
 3720 0324 FFFFFFFF 		.word	-1
 3721 0328 07       		.byte	7
 3722 0329 000000   		.space	3
 3723 032c 01000000 		.word	1
 3724 0330 43505800 		.ascii	"CPX\000"
 3725 0334 00000000 		.space	4
 3726 0338 482E6400 		.ascii	"H.d\000"
 3727 033c 00000000 		.space	4
 3728 0340 414E474C 		.ascii	"ANGLES\000"
ARM GAS  /tmp/ccZ4XUVa.s 			page 96


 3728      455300
 3729 0347 00000000 		.space	8
 3729      00000000 
 3730 034f 00       		.space	1
 3731 0350 06       		.byte	6
 3732 0351 000000   		.space	3
 3733 0354 02000000 		.word	2
 3734 0358 04       		.byte	4
 3735 0359 000000   		.space	3
 3736 035c 01000000 		.word	1
 3737 0360 44454700 		.ascii	"DEG\000"
 3738 0364 00000000 		.space	4
 3739 0368 500D5200 		.ascii	"P\015R\000"
 3740 036c 00000000 		.space	4
 3741 0370 07       		.byte	7
 3742 0371 000000   		.space	3
 3743 0374 02000000 		.word	2
 3744 0378 04       		.byte	4
 3745 0379 000000   		.space	3
 3746 037c 02000000 		.word	2
 3747 0380 52414400 		.ascii	"RAD\000"
 3748 0384 00000000 		.space	4
 3749 0388 520D5000 		.ascii	"R\015P\000"
 3750 038c 00000000 		.space	4
 3751 0390 08       		.byte	8
 3752 0391 000000   		.space	3
 3753 0394 02000000 		.word	2
 3754 0398 00       		.byte	0
 3755 0399 000000   		.space	3
 3756 039c 01000000 		.word	1
 3757 03a0 47524144 		.ascii	"GRAD\000"
 3757      00
 3758 03a5 000000   		.space	3
 3759 03a8 48595000 		.ascii	"HYP\000"
 3760 03ac 00000000 		.space	4
 3761 03b0 06       		.byte	6
 3762 03b1 000000   		.space	3
 3763 03b4 01000000 		.word	1
 3764 03b8 07       		.byte	7
 3765 03b9 000000   		.space	3
 3766 03bc 01000000 		.word	1
 3767 03c0 482E4D53 		.ascii	"H.MS\000"
 3767      00
 3768 03c5 000000   		.space	3
 3769 03c8 482E6400 		.ascii	"H.d\000"
 3770 03cc 00000000 		.space	4
 3771 03d0 2C       		.byte	44
 3772 03d1 000000   		.space	3
 3773 03d4 FFFFFFFF 		.word	-1
 3774 03d8 00       		.byte	0
 3775 03d9 000000   		.space	3
 3776 03dc 02000000 		.word	2
 3777 03e0 2D2D0D00 		.ascii	"--\015\000"
 3778 03e4 00000000 		.space	4
 3779 03e8 4859509D 		.ascii	"HYP\235\000"
 3779      00
 3780 03ed 000000   		.space	3
ARM GAS  /tmp/ccZ4XUVa.s 			page 97


 3781 03f0 2D       		.byte	45
 3782 03f1 000000   		.space	3
 3783 03f4 FFFFFFFF 		.word	-1
 3784 03f8 2E       		.byte	46
 3785 03f9 000000   		.space	3
 3786 03fc FFFFFFFF 		.word	-1
 3787 0400 43505800 		.ascii	"CPX\000"
 3788 0404 00000000 		.space	4
 3789 0408 00       		.ascii	"\000"
 3790 0409 00000000 		.space	7
 3790      000000
 3791 0410 4D495343 		.ascii	"MISC\000"
 3791      00
 3792 0415 00000000 		.space	10
 3792      00000000 
 3792      0000
 3793 041f 00       		.space	1
 3794 0420 25       		.byte	37
 3795 0421 000000   		.space	3
 3796 0424 01000000 		.word	1
 3797 0428 14       		.byte	20
 3798 0429 000000   		.space	3
 3799 042c 01000000 		.word	1
 3800 0430 7C587C00 		.ascii	"|X|\000"
 3801 0434 00000000 		.space	4
 3802 0438 329C00   		.ascii	"2\234\000"
 3803 043b 00000000 		.space	5
 3803      00
 3804 0440 25       		.byte	37
 3805 0441 000000   		.space	3
 3806 0444 02000000 		.word	2
 3807 0448 14       		.byte	20
 3808 0449 000000   		.space	3
 3809 044c 02000000 		.word	2
 3810 0450 524E4400 		.ascii	"RND\000"
 3811 0454 00000000 		.space	4
 3812 0458 4C6F67BA 		.ascii	"Log\272\000"
 3812      00
 3813 045d 000000   		.space	3
 3814 0460 26       		.byte	38
 3815 0461 000000   		.space	3
 3816 0464 01000000 		.word	1
 3817 0468 15       		.byte	21
 3818 0469 000000   		.space	3
 3819 046c 02000000 		.word	2
 3820 0470 49506172 		.ascii	"IPart\000"
 3820      7400
 3821 0476 0000     		.space	2
 3822 0478 4C6F678B 		.ascii	"Log\213\000"
 3822      00
 3823 047d 000000   		.space	3
 3824 0480 26       		.byte	38
 3825 0481 000000   		.space	3
 3826 0484 02000000 		.word	2
 3827 0488 16       		.byte	22
 3828 0489 000000   		.space	3
 3829 048c 02000000 		.word	2
ARM GAS  /tmp/ccZ4XUVa.s 			page 98


 3830 0490 46506172 		.ascii	"FPart\000"
 3830      7400
 3831 0496 0000     		.space	2
 3832 0498 7C7C656C 		.ascii	"||el\000"
 3832      00
 3833 049d 000000   		.space	3
 3834 04a0 2C       		.byte	44
 3835 04a1 000000   		.space	3
 3836 04a4 FFFFFFFF 		.word	-1
 3837 04a8 22       		.byte	34
 3838 04a9 000000   		.space	3
 3839 04ac 02000000 		.word	2
 3840 04b0 2D2D0D00 		.ascii	"--\015\000"
 3841 04b4 00000000 		.space	4
 3842 04b8 832500   		.ascii	"\203%\000"
 3843 04bb 00000000 		.space	5
 3843      00
 3844 04c0 2D       		.byte	45
 3845 04c1 000000   		.space	3
 3846 04c4 FFFFFFFF 		.word	-1
 3847 04c8 2E       		.byte	46
 3848 04c9 000000   		.space	3
 3849 04cc FFFFFFFF 		.word	-1
 3850 04d0 43505800 		.ascii	"CPX\000"
 3851 04d4 00000000 		.space	4
 3852 04d8 00       		.ascii	"\000"
 3853 04d9 00000000 		.space	7
 3853      000000
 3854 04e0 583C3E59 		.ascii	"X<>Y Key\000"
 3854      204B6579 
 3854      00
 3855 04e9 00000000 		.space	6
 3855      0000
 3856 04ef 00       		.space	1
 3857 04f0 0D       		.byte	13
 3858 04f1 000000   		.space	3
 3859 04f4 01000000 		.word	1
 3860 04f8 2E       		.byte	46
 3861 04f9 000000   		.space	3
 3862 04fc FFFFFFFF 		.word	-1
 3863 0500 53686F77 		.ascii	"Show\016\000"
 3863      0E00
 3864 0506 0000     		.space	2
 3865 0508 00       		.ascii	"\000"
 3866 0509 00000000 		.space	7
 3866      000000
 3867 0510 0D       		.byte	13
 3868 0511 000000   		.space	3
 3869 0514 02000000 		.word	2
 3870 0518 2E       		.byte	46
 3871 0519 000000   		.space	3
 3872 051c FFFFFFFF 		.word	-1
 3873 0520 53686F77 		.ascii	"Show\015\000"
 3873      0D00
 3874 0526 0000     		.space	2
 3875 0528 00       		.ascii	"\000"
 3876 0529 00000000 		.space	7
ARM GAS  /tmp/ccZ4XUVa.s 			page 99


 3876      000000
 3877 0530 0D       		.byte	13
 3878 0531 000000   		.space	3
 3879 0534 03000000 		.word	3
 3880 0538 2E       		.byte	46
 3881 0539 000000   		.space	3
 3882 053c FFFFFFFF 		.word	-1
 3883 0540 78173F00 		.ascii	"x\027?\000"
 3884 0544 00000000 		.space	4
 3885 0548 00       		.ascii	"\000"
 3886 0549 00000000 		.space	7
 3886      000000
 3887 0550 2E       		.byte	46
 3888 0551 000000   		.space	3
 3889 0554 FFFFFFFF 		.word	-1
 3890 0558 2E       		.byte	46
 3891 0559 000000   		.space	3
 3892 055c FFFFFFFF 		.word	-1
 3893 0560 00       		.ascii	"\000"
 3894 0561 00000000 		.space	7
 3894      000000
 3895 0568 00       		.ascii	"\000"
 3896 0569 00000000 		.space	7
 3896      000000
 3897 0570 2C       		.byte	44
 3898 0571 000000   		.space	3
 3899 0574 FFFFFFFF 		.word	-1
 3900 0578 2E       		.byte	46
 3901 0579 000000   		.space	3
 3902 057c FFFFFFFF 		.word	-1
 3903 0580 2D2D0D00 		.ascii	"--\015\000"
 3904 0584 00000000 		.space	4
 3905 0588 00       		.ascii	"\000"
 3906 0589 00000000 		.space	7
 3906      000000
 3907 0590 2D       		.byte	45
 3908 0591 000000   		.space	3
 3909 0594 FFFFFFFF 		.word	-1
 3910 0598 2E       		.byte	46
 3911 0599 000000   		.space	3
 3912 059c FFFFFFFF 		.word	-1
 3913 05a0 43505800 		.ascii	"CPX\000"
 3914 05a4 00000000 		.space	4
 3915 05a8 00       		.ascii	"\000"
 3916 05a9 00000000 		.space	7
 3916      000000
 3917 05b0 50726F67 		.ascii	"Program\000"
 3917      72616D00 
 3918 05b8 00000000 		.space	7
 3918      000000
 3919 05bf 00       		.space	1
 3920 05c0 27       		.byte	39
 3921 05c1 000000   		.space	3
 3922 05c4 01000000 		.word	1
 3923 05c8 28       		.byte	40
 3924 05c9 000000   		.space	3
 3925 05cc 01000000 		.word	1
ARM GAS  /tmp/ccZ4XUVa.s 			page 100


 3926 05d0 4C424C00 		.ascii	"LBL\000"
 3927 05d4 00000000 		.space	4
 3928 05d8 44534500 		.ascii	"DSE\000"
 3929 05dc 00000000 		.space	4
 3930 05e0 27       		.byte	39
 3931 05e1 000000   		.space	3
 3932 05e4 02000000 		.word	2
 3933 05e8 28       		.byte	40
 3934 05e9 000000   		.space	3
 3935 05ec 02000000 		.word	2
 3936 05f0 52544E00 		.ascii	"RTN\000"
 3937 05f4 00000000 		.space	4
 3938 05f8 49534700 		.ascii	"ISG\000"
 3939 05fc 00000000 		.space	4
 3940 0600 25       		.byte	37
 3941 0601 000000   		.space	3
 3942 0604 03000000 		.word	3
 3943 0608 2E       		.byte	46
 3944 0609 000000   		.space	3
 3945 060c FFFFFFFF 		.word	-1
 3946 0610 50617573 		.ascii	"Pause\000"
 3946      6500
 3947 0616 0000     		.space	2
 3948 0618 00       		.ascii	"\000"
 3949 0619 00000000 		.space	7
 3949      000000
 3950 0620 12       		.byte	18
 3951 0621 000000   		.space	3
 3952 0624 03000000 		.word	3
 3953 0628 2E       		.byte	46
 3954 0629 000000   		.space	3
 3955 062c FFFFFFFF 		.word	-1
 3956 0630 47544F00 		.ascii	"GTO\000"
 3957 0634 00000000 		.space	4
 3958 0638 00       		.ascii	"\000"
 3959 0639 00000000 		.space	7
 3959      000000
 3960 0640 2C       		.byte	44
 3961 0641 000000   		.space	3
 3962 0644 FFFFFFFF 		.word	-1
 3963 0648 2E       		.byte	46
 3964 0649 000000   		.space	3
 3965 064c FFFFFFFF 		.word	-1
 3966 0650 2D2D0D00 		.ascii	"--\015\000"
 3967 0654 00000000 		.space	4
 3968 0658 00       		.ascii	"\000"
 3969 0659 00000000 		.space	7
 3969      000000
 3970 0660 2D       		.byte	45
 3971 0661 000000   		.space	3
 3972 0664 FFFFFFFF 		.word	-1
 3973 0668 2E       		.byte	46
 3974 0669 000000   		.space	3
 3975 066c FFFFFFFF 		.word	-1
 3976 0670 43505800 		.ascii	"CPX\000"
 3977 0674 00000000 		.space	4
 3978 0678 00       		.ascii	"\000"
ARM GAS  /tmp/ccZ4XUVa.s 			page 101


 3979 0679 00000000 		.space	7
 3979      000000
 3980 0680 53657475 		.ascii	"Setup 1\000"
 3980      70203100 
 3981 0688 00000000 		.space	7
 3981      000000
 3982 068f 00       		.space	1
 3983 0690 32       		.byte	50
 3984 0691 000000   		.space	3
 3985 0694 00000000 		.word	0
 3986 0698 30       		.byte	48
 3987 0699 000000   		.space	3
 3988 069c 00000000 		.word	0
 3989 06a0 45584954 		.ascii	"EXIT\000"
 3989      00
 3990 06a5 000000   		.space	3
 3991 06a8 53797374 		.ascii	"System\000"
 3991      656D00
 3992 06af 00       		.space	1
 3993 06b0 31       		.byte	49
 3994 06b1 000000   		.space	3
 3995 06b4 09000000 		.word	9
 3996 06b8 2E       		.byte	46
 3997 06b9 000000   		.space	3
 3998 06bc FFFFFFFF 		.word	-1
 3999 06c0 48454C50 		.ascii	"HELP\000"
 3999      00
 4000 06c5 000000   		.space	3
 4001 06c8 00       		.ascii	"\000"
 4002 06c9 00000000 		.space	7
 4002      000000
 4003 06d0 31       		.byte	49
 4004 06d1 000000   		.space	3
 4005 06d4 02000000 		.word	2
 4006 06d8 31       		.byte	49
 4007 06d9 000000   		.space	3
 4008 06dc 06000000 		.word	6
 4009 06e0 4F6E5354 		.ascii	"OnSTO\000"
 4009      4F00
 4010 06e6 0000     		.space	2
 4011 06e8 53765241 		.ascii	"SvRAM\000"
 4011      4D00
 4012 06ee 0000     		.space	2
 4013 06f0 31       		.byte	49
 4014 06f1 000000   		.space	3
 4015 06f4 03000000 		.word	3
 4016 06f8 31       		.byte	49
 4017 06f9 000000   		.space	3
 4018 06fc 07000000 		.word	7
 4019 0700 4F6E5243 		.ascii	"OnRCL\000"
 4019      4C00
 4020 0706 0000     		.space	2
 4021 0708 4C645241 		.ascii	"LdRAM\000"
 4021      4D00
 4022 070e 0000     		.space	2
 4023 0710 2C       		.byte	44
 4024 0711 000000   		.space	3
ARM GAS  /tmp/ccZ4XUVa.s 			page 102


 4025 0714 FFFFFFFF 		.word	-1
 4026 0718 2E       		.byte	46
 4027 0719 000000   		.space	3
 4028 071c FFFFFFFF 		.word	-1
 4029 0720 2D2D0D00 		.ascii	"--\015\000"
 4030 0724 00000000 		.space	4
 4031 0728 00       		.ascii	"\000"
 4032 0729 00000000 		.space	7
 4032      000000
 4033 0730 2D       		.byte	45
 4034 0731 000000   		.space	3
 4035 0734 FFFFFFFF 		.word	-1
 4036 0738 2E       		.byte	46
 4037 0739 000000   		.space	3
 4038 073c FFFFFFFF 		.word	-1
 4039 0740 43505800 		.ascii	"CPX\000"
 4040 0744 00000000 		.space	4
 4041 0748 00       		.ascii	"\000"
 4042 0749 00000000 		.space	7
 4042      000000
 4043 0750 4172726F 		.ascii	"Arrow\000"
 4043      7700
 4044 0756 00000000 		.space	9
 4044      00000000 
 4044      00
 4045 075f 00       		.space	1
 4046 0760 0E       		.byte	14
 4047 0761 000000   		.space	3
 4048 0764 01000000 		.word	1
 4049 0768 06       		.byte	6
 4050 0769 000000   		.space	3
 4051 076c 02000000 		.word	2
 4052 0770 42696E00 		.ascii	"Bin\000"
 4053 0774 00000000 		.space	4
 4054 0778 44454700 		.ascii	"DEG\000"
 4055 077c 00000000 		.space	4
 4056 0780 0E       		.byte	14
 4057 0781 000000   		.space	3
 4058 0784 02000000 		.word	2
 4059 0788 07       		.byte	7
 4060 0789 000000   		.space	3
 4061 078c 02000000 		.word	2
 4062 0790 4F637400 		.ascii	"Oct\000"
 4063 0794 00000000 		.space	4
 4064 0798 52414400 		.ascii	"RAD\000"
 4065 079c 00000000 		.space	4
 4066 07a0 0F       		.byte	15
 4067 07a1 000000   		.space	3
 4068 07a4 01000000 		.word	1
 4069 07a8 08       		.byte	8
 4070 07a9 000000   		.space	3
 4071 07ac 02000000 		.word	2
 4072 07b0 44656300 		.ascii	"Dec\000"
 4073 07b4 00000000 		.space	4
 4074 07b8 47726164 		.ascii	"Grad\000"
 4074      00
 4075 07bd 000000   		.space	3
ARM GAS  /tmp/ccZ4XUVa.s 			page 103


 4076 07c0 0F       		.byte	15
 4077 07c1 000000   		.space	3
 4078 07c4 02000000 		.word	2
 4079 07c8 06       		.byte	6
 4080 07c9 000000   		.space	3
 4081 07cc 01000000 		.word	1
 4082 07d0 48657800 		.ascii	"Hex\000"
 4083 07d4 00000000 		.space	4
 4084 07d8 32484D53 		.ascii	"2HMS\000"
 4084      00
 4085 07dd 000000   		.space	3
 4086 07e0 2C       		.byte	44
 4087 07e1 000000   		.space	3
 4088 07e4 FFFFFFFF 		.word	-1
 4089 07e8 07       		.byte	7
 4090 07e9 000000   		.space	3
 4091 07ec 01000000 		.word	1
 4092 07f0 2D2D0D00 		.ascii	"--\015\000"
 4093 07f4 00000000 		.space	4
 4094 07f8 484D5332 		.ascii	"HMS2\000"
 4094      00
 4095 07fd 000000   		.space	3
 4096 0800 2D       		.byte	45
 4097 0801 000000   		.space	3
 4098 0804 FFFFFFFF 		.word	-1
 4099 0808 2E       		.byte	46
 4100 0809 000000   		.space	3
 4101 080c FFFFFFFF 		.word	-1
 4102 0810 43505800 		.ascii	"CPX\000"
 4103 0814 00000000 		.space	4
 4104 0818 00       		.ascii	"\000"
 4105 0819 00000000 		.space	7
 4105      000000
 4106 0820 466C6167 		.ascii	"Flags\000"
 4106      7300
 4107 0826 00000000 		.space	9
 4107      00000000 
 4107      00
 4108 082f 00       		.space	1
 4109 0830 1E       		.byte	30
 4110 0831 000000   		.space	3
 4111 0834 01000000 		.word	1
 4112 0838 2E       		.byte	46
 4113 0839 000000   		.space	3
 4114 083c FFFFFFFF 		.word	-1
 4115 0840 53465F00 		.ascii	"SF_\000"
 4116 0844 00000000 		.space	4
 4117 0848 00       		.ascii	"\000"
 4118 0849 00000000 		.space	7
 4118      000000
 4119 0850 1E       		.byte	30
 4120 0851 000000   		.space	3
 4121 0854 02000000 		.word	2
 4122 0858 2E       		.byte	46
 4123 0859 000000   		.space	3
 4124 085c FFFFFFFF 		.word	-1
 4125 0860 43465F00 		.ascii	"CF_\000"
ARM GAS  /tmp/ccZ4XUVa.s 			page 104


 4126 0864 00000000 		.space	4
 4127 0868 00       		.ascii	"\000"
 4128 0869 00000000 		.space	7
 4128      000000
 4129 0870 1F       		.byte	31
 4130 0871 000000   		.space	3
 4131 0874 01000000 		.word	1
 4132 0878 2E       		.byte	46
 4133 0879 000000   		.space	3
 4134 087c FFFFFFFF 		.word	-1
 4135 0880 783D3F00 		.ascii	"x=?\000"
 4136 0884 00000000 		.space	4
 4137 0888 00       		.ascii	"\000"
 4138 0889 00000000 		.space	7
 4138      000000
 4139 0890 1F       		.byte	31
 4140 0891 000000   		.space	3
 4141 0894 02000000 		.word	2
 4142 0898 2E       		.byte	46
 4143 0899 000000   		.space	3
 4144 089c FFFFFFFF 		.word	-1
 4145 08a0 780B3F00 		.ascii	"x\013?\000"
 4146 08a4 00000000 		.space	4
 4147 08a8 00       		.ascii	"\000"
 4148 08a9 00000000 		.space	7
 4148      000000
 4149 08b0 2C       		.byte	44
 4150 08b1 000000   		.space	3
 4151 08b4 FFFFFFFF 		.word	-1
 4152 08b8 2E       		.byte	46
 4153 08b9 000000   		.space	3
 4154 08bc FFFFFFFF 		.word	-1
 4155 08c0 2D2D0D00 		.ascii	"--\015\000"
 4156 08c4 00000000 		.space	4
 4157 08c8 00       		.ascii	"\000"
 4158 08c9 00000000 		.space	7
 4158      000000
 4159 08d0 2D       		.byte	45
 4160 08d1 000000   		.space	3
 4161 08d4 FFFFFFFF 		.word	-1
 4162 08d8 2E       		.byte	46
 4163 08d9 000000   		.space	3
 4164 08dc FFFFFFFF 		.word	-1
 4165 08e0 43505800 		.ascii	"CPX\000"
 4166 08e4 00000000 		.space	4
 4167 08e8 00       		.ascii	"\000"
 4168 08e9 00000000 		.space	7
 4168      000000
 4169 08f0 50726F62 		.ascii	"Probability\000"
 4169      6162696C 
 4169      69747900 
 4170 08fc 000000   		.space	3
 4171 08ff 00       		.space	1
 4172 0900 18       		.byte	24
 4173 0901 000000   		.space	3
 4174 0904 03000000 		.word	3
 4175 0908 19       		.byte	25
ARM GAS  /tmp/ccZ4XUVa.s 			page 105


 4176 0909 000000   		.space	3
 4177 090c 01000000 		.word	1
 4178 0910 46616374 		.ascii	"Fact!\000"
 4178      2100
 4179 0916 0000     		.space	2
 4180 0918 9400     		.ascii	"\224\000"
 4181 091a 00000000 		.space	6
 4181      0000
 4182 0920 18       		.byte	24
 4183 0921 000000   		.space	3
 4184 0924 01000000 		.word	1
 4185 0928 19       		.byte	25
 4186 0929 000000   		.space	3
 4187 092c 02000000 		.word	2
 4188 0930 43792C78 		.ascii	"Cy,x\000"
 4188      00
 4189 0935 000000   		.space	3
 4190 0938 949D00   		.ascii	"\224\235\000"
 4191 093b 00000000 		.space	5
 4191      00
 4192 0940 18       		.byte	24
 4193 0941 000000   		.space	3
 4194 0944 02000000 		.word	2
 4195 0948 2E       		.byte	46
 4196 0949 000000   		.space	3
 4197 094c FFFFFFFF 		.word	-1
 4198 0950 50792C78 		.ascii	"Py,x\000"
 4198      00
 4199 0955 000000   		.space	3
 4200 0958 00       		.ascii	"\000"
 4201 0959 00000000 		.space	7
 4201      000000
 4202 0960 08       		.byte	8
 4203 0961 000000   		.space	3
 4204 0964 01000000 		.word	1
 4205 0968 2E       		.byte	46
 4206 0969 000000   		.space	3
 4207 096c FFFFFFFF 		.word	-1
 4208 0970 52414E23 		.ascii	"RAN#\000"
 4208      00
 4209 0975 000000   		.space	3
 4210 0978 00       		.ascii	"\000"
 4211 0979 00000000 		.space	7
 4211      000000
 4212 0980 2C       		.byte	44
 4213 0981 000000   		.space	3
 4214 0984 FFFFFFFF 		.word	-1
 4215 0988 2E       		.byte	46
 4216 0989 000000   		.space	3
 4217 098c FFFFFFFF 		.word	-1
 4218 0990 2D2D0D00 		.ascii	"--\015\000"
 4219 0994 00000000 		.space	4
 4220 0998 00       		.ascii	"\000"
 4221 0999 00000000 		.space	7
 4221      000000
 4222 09a0 2D       		.byte	45
 4223 09a1 000000   		.space	3
ARM GAS  /tmp/ccZ4XUVa.s 			page 106


 4224 09a4 FFFFFFFF 		.word	-1
 4225 09a8 2E       		.byte	46
 4226 09a9 000000   		.space	3
 4227 09ac FFFFFFFF 		.word	-1
 4228 09b0 43505800 		.ascii	"CPX\000"
 4229 09b4 00000000 		.space	4
 4230 09b8 00       		.ascii	"\000"
 4231 09b9 00000000 		.space	7
 4231      000000
 4232 09c0 53746174 		.ascii	"Statistics\000"
 4232      69737469 
 4232      637300
 4233 09cb 00000000 		.space	4
 4234 09cf 00       		.space	1
 4235 09d0 1A       		.byte	26
 4236 09d1 000000   		.space	3
 4237 09d4 01000000 		.word	1
 4238 09d8 1B       		.byte	27
 4239 09d9 000000   		.space	3
 4240 09dc 03000000 		.word	3
 4241 09e0 58626172 		.ascii	"Xbar\000"
 4241      00
 4242 09e5 000000   		.space	3
 4243 09e8 53554D53 		.ascii	"SUMS\000"
 4243      00
 4244 09ed 000000   		.space	3
 4245 09f0 1B       		.byte	27
 4246 09f1 000000   		.space	3
 4247 09f4 01000000 		.word	1
 4248 09f8 2E       		.byte	46
 4249 09f9 000000   		.space	3
 4250 09fc FFFFFFFF 		.word	-1
 4251 0a00 59686174 		.ascii	"Yhat\000"
 4251      00
 4252 0a05 000000   		.space	3
 4253 0a08 00       		.ascii	"\000"
 4254 0a09 00000000 		.space	7
 4254      000000
 4255 0a10 1A       		.byte	26
 4256 0a11 000000   		.space	3
 4257 0a14 02000000 		.word	2
 4258 0a18 2E       		.byte	46
 4259 0a19 000000   		.space	3
 4260 0a1c FFFFFFFF 		.word	-1
 4261 0a20 7300     		.ascii	"s\000"
 4262 0a22 00000000 		.space	6
 4262      0000
 4263 0a28 00       		.ascii	"\000"
 4264 0a29 00000000 		.space	7
 4264      000000
 4265 0a30 1B       		.byte	27
 4266 0a31 000000   		.space	3
 4267 0a34 02000000 		.word	2
 4268 0a38 2E       		.byte	46
 4269 0a39 000000   		.space	3
 4270 0a3c FFFFFFFF 		.word	-1
 4271 0a40 7200     		.ascii	"r\000"
ARM GAS  /tmp/ccZ4XUVa.s 			page 107


 4272 0a42 00000000 		.space	6
 4272      0000
 4273 0a48 00       		.ascii	"\000"
 4274 0a49 00000000 		.space	7
 4274      000000
 4275 0a50 2C       		.byte	44
 4276 0a51 000000   		.space	3
 4277 0a54 FFFFFFFF 		.word	-1
 4278 0a58 2E       		.byte	46
 4279 0a59 000000   		.space	3
 4280 0a5c FFFFFFFF 		.word	-1
 4281 0a60 2D2D0D00 		.ascii	"--\015\000"
 4282 0a64 00000000 		.space	4
 4283 0a68 00       		.ascii	"\000"
 4284 0a69 00000000 		.space	7
 4284      000000
 4285 0a70 2D       		.byte	45
 4286 0a71 000000   		.space	3
 4287 0a74 FFFFFFFF 		.word	-1
 4288 0a78 31       		.byte	49
 4289 0a79 000000   		.space	3
 4290 0a7c 0B000000 		.word	11
 4291 0a80 43505800 		.ascii	"CPX\000"
 4292 0a84 00000000 		.space	4
 4293 0a88 00       		.ascii	"\000"
 4294 0a89 00000000 		.space	7
 4294      000000
 4295 0a90 53657475 		.ascii	"Setup 2\000"
 4295      70203200 
 4296 0a98 00000000 		.space	7
 4296      000000
 4297 0a9f 00       		.space	1
 4298 0aa0 31       		.byte	49
 4299 0aa1 000000   		.space	3
 4300 0aa4 04000000 		.word	4
 4301 0aa8 2E       		.byte	46
 4302 0aa9 000000   		.space	3
 4303 0aac FFFFFFFF 		.word	-1
 4304 0ab0 53764C49 		.ascii	"SvLIB\000"
 4304      4200
 4305 0ab6 0000     		.space	2
 4306 0ab8 00       		.ascii	"\000"
 4307 0ab9 00000000 		.space	7
 4307      000000
 4308 0ac0 31       		.byte	49
 4309 0ac1 000000   		.space	3
 4310 0ac4 05000000 		.word	5
 4311 0ac8 2E       		.byte	46
 4312 0ac9 000000   		.space	3
 4313 0acc FFFFFFFF 		.word	-1
 4314 0ad0 4C644C49 		.ascii	"LdLIB\000"
 4314      4200
 4315 0ad6 0000     		.space	2
 4316 0ad8 00       		.ascii	"\000"
 4317 0ad9 00000000 		.space	7
 4317      000000
 4318 0ae0 31       		.byte	49
ARM GAS  /tmp/ccZ4XUVa.s 			page 108


 4319 0ae1 000000   		.space	3
 4320 0ae4 0A000000 		.word	10
 4321 0ae8 2E       		.byte	46
 4322 0ae9 000000   		.space	3
 4323 0aec FFFFFFFF 		.word	-1
 4324 0af0 53764350 		.ascii	"SvCPRG\000"
 4324      524700
 4325 0af7 00       		.space	1
 4326 0af8 00       		.ascii	"\000"
 4327 0af9 00000000 		.space	7
 4327      000000
 4328 0b00 31       		.byte	49
 4329 0b01 000000   		.space	3
 4330 0b04 08000000 		.word	8
 4331 0b08 2E       		.byte	46
 4332 0b09 000000   		.space	3
 4333 0b0c FFFFFFFF 		.word	-1
 4334 0b10 4C645052 		.ascii	"LdPRG\000"
 4334      4700
 4335 0b16 0000     		.space	2
 4336 0b18 00       		.ascii	"\000"
 4337 0b19 00000000 		.space	7
 4337      000000
 4338 0b20 2C       		.byte	44
 4339 0b21 000000   		.space	3
 4340 0b24 FFFFFFFF 		.word	-1
 4341 0b28 2E       		.byte	46
 4342 0b29 000000   		.space	3
 4343 0b2c FFFFFFFF 		.word	-1
 4344 0b30 2D2D0D00 		.ascii	"--\015\000"
 4345 0b34 00000000 		.space	4
 4346 0b38 00       		.ascii	"\000"
 4347 0b39 00000000 		.space	7
 4347      000000
 4348 0b40 2D       		.byte	45
 4349 0b41 000000   		.space	3
 4350 0b44 FFFFFFFF 		.word	-1
 4351 0b48 2E       		.byte	46
 4352 0b49 000000   		.space	3
 4353 0b4c FFFFFFFF 		.word	-1
 4354 0b50 43505800 		.ascii	"CPX\000"
 4355 0b54 00000000 		.space	4
 4356 0b58 00       		.ascii	"\000"
 4357 0b59 00000000 		.space	7
 4357      000000
 4358 0b60 496E7465 		.ascii	"Integ/Sum/Prod\000"
 4358      672F5375 
 4358      6D2F5072 
 4358      6F6400
 4359 0b6f 00       		.space	1
 4360 0b70 20       		.byte	32
 4361 0b71 000000   		.space	3
 4362 0b74 01000000 		.word	1
 4363 0b78 2E       		.byte	46
 4364 0b79 000000   		.space	3
 4365 0b7c FFFFFFFF 		.word	-1
 4366 0b80 534C5600 		.ascii	"SLV\000"
ARM GAS  /tmp/ccZ4XUVa.s 			page 109


 4367 0b84 00000000 		.space	4
 4368 0b88 00       		.ascii	"\000"
 4369 0b89 00000000 		.space	7
 4369      000000
 4370 0b90 20       		.byte	32
 4371 0b91 000000   		.space	3
 4372 0b94 02000000 		.word	2
 4373 0b98 2E       		.byte	46
 4374 0b99 000000   		.space	3
 4375 0b9c FFFFFFFF 		.word	-1
 4376 0ba0 04206478 		.ascii	"\004 dx\000"
 4376      00
 4377 0ba5 000000   		.space	3
 4378 0ba8 00       		.ascii	"\000"
 4379 0ba9 00000000 		.space	7
 4379      000000
 4380 0bb0 21       		.byte	33
 4381 0bb1 000000   		.space	3
 4382 0bb4 01000000 		.word	1
 4383 0bb8 2E       		.byte	46
 4384 0bb9 000000   		.space	3
 4385 0bbc FFFFFFFF 		.word	-1
 4386 0bc0 53554D00 		.ascii	"SUM\000"
 4387 0bc4 00000000 		.space	4
 4388 0bc8 00       		.ascii	"\000"
 4389 0bc9 00000000 		.space	7
 4389      000000
 4390 0bd0 21       		.byte	33
 4391 0bd1 000000   		.space	3
 4392 0bd4 02000000 		.word	2
 4393 0bd8 2E       		.byte	46
 4394 0bd9 000000   		.space	3
 4395 0bdc FFFFFFFF 		.word	-1
 4396 0be0 50524F44 		.ascii	"PROD\000"
 4396      00
 4397 0be5 000000   		.space	3
 4398 0be8 00       		.ascii	"\000"
 4399 0be9 00000000 		.space	7
 4399      000000
 4400 0bf0 2C       		.byte	44
 4401 0bf1 000000   		.space	3
 4402 0bf4 FFFFFFFF 		.word	-1
 4403 0bf8 2E       		.byte	46
 4404 0bf9 000000   		.space	3
 4405 0bfc FFFFFFFF 		.word	-1
 4406 0c00 2D2D0D00 		.ascii	"--\015\000"
 4407 0c04 00000000 		.space	4
 4408 0c08 00       		.ascii	"\000"
 4409 0c09 00000000 		.space	7
 4409      000000
 4410 0c10 2D       		.byte	45
 4411 0c11 000000   		.space	3
 4412 0c14 FFFFFFFF 		.word	-1
 4413 0c18 2E       		.byte	46
 4414 0c19 000000   		.space	3
 4415 0c1c FFFFFFFF 		.word	-1
 4416 0c20 43505800 		.ascii	"CPX\000"
ARM GAS  /tmp/ccZ4XUVa.s 			page 110


 4417 0c24 00000000 		.space	4
 4418 0c28 00       		.ascii	"\000"
 4419 0c29 00000000 		.space	7
 4419      000000
 4420 0c30 426C616E 		.ascii	"Blank with A-D\000"
 4420      6B207769 
 4420      74682041 
 4420      2D4400
 4421 0c3f 00       		.space	1
 4422 0c40 28       		.byte	40
 4423 0c41 000000   		.space	3
 4424 0c44 03000000 		.word	3
 4425 0c48 2E       		.byte	46
 4426 0c49 000000   		.space	3
 4427 0c4c FFFFFFFF 		.word	-1
 4428 0c50 912B00   		.ascii	"\221+\000"
 4429 0c53 00000000 		.space	5
 4429      00
 4430 0c58 00       		.ascii	"\000"
 4431 0c59 00000000 		.space	7
 4431      000000
 4432 0c60 16       		.byte	22
 4433 0c61 000000   		.space	3
 4434 0c64 01000000 		.word	1
 4435 0c68 2E       		.byte	46
 4436 0c69 000000   		.space	3
 4437 0c6c FFFFFFFF 		.word	-1
 4438 0c70 312F5800 		.ascii	"1/X\000"
 4439 0c74 00000000 		.space	4
 4440 0c78 00       		.ascii	"\000"
 4441 0c79 00000000 		.space	7
 4441      000000
 4442 0c80 1C       		.byte	28
 4443 0c81 000000   		.space	3
 4444 0c84 01000000 		.word	1
 4445 0c88 2E       		.byte	46
 4446 0c89 000000   		.space	3
 4447 0c8c FFFFFFFF 		.word	-1
 4448 0c90 035800   		.ascii	"\003X\000"
 4449 0c93 00000000 		.space	5
 4449      00
 4450 0c98 00       		.ascii	"\000"
 4451 0c99 00000000 		.space	7
 4451      000000
 4452 0ca0 13       		.byte	19
 4453 0ca1 000000   		.space	3
 4454 0ca4 02000000 		.word	2
 4455 0ca8 2E       		.byte	46
 4456 0ca9 000000   		.space	3
 4457 0cac FFFFFFFF 		.word	-1
 4458 0cb0 4C4F4700 		.ascii	"LOG\000"
 4459 0cb4 00000000 		.space	4
 4460 0cb8 00       		.ascii	"\000"
 4461 0cb9 00000000 		.space	7
 4461      000000
 4462 0cc0 2C       		.byte	44
 4463 0cc1 000000   		.space	3
ARM GAS  /tmp/ccZ4XUVa.s 			page 111


 4464 0cc4 FFFFFFFF 		.word	-1
 4465 0cc8 2E       		.byte	46
 4466 0cc9 000000   		.space	3
 4467 0ccc FFFFFFFF 		.word	-1
 4468 0cd0 2D2D0D00 		.ascii	"--\015\000"
 4469 0cd4 00000000 		.space	4
 4470 0cd8 00       		.ascii	"\000"
 4471 0cd9 00000000 		.space	7
 4471      000000
 4472 0ce0 2D       		.byte	45
 4473 0ce1 000000   		.space	3
 4474 0ce4 FFFFFFFF 		.word	-1
 4475 0ce8 2E       		.byte	46
 4476 0ce9 000000   		.space	3
 4477 0cec FFFFFFFF 		.word	-1
 4478 0cf0 43505800 		.ascii	"CPX\000"
 4479 0cf4 00000000 		.space	4
 4480 0cf8 00       		.ascii	"\000"
 4481 0cf9 00000000 		.space	7
 4481      000000
 4482              		.section	.rodata.mapping_alpha.10888,"a"
 4483              		.align	2
 4484              		.set	.LANCHOR12,. + 0
 4487              	mapping_alpha.10888:
 4488 0000 63       		.byte	99
 4489 0001 000000   		.space	3
 4490 0004 FFFFFFFF 		.word	-1
 4491 0008 00       		.byte	0
 4492 0009 000000   		.space	3
 4493 000c FFFFFFFF 		.word	-1
 4494 0010 01       		.byte	1
 4495 0011 000000   		.space	3
 4496 0014 FFFFFFFF 		.word	-1
 4497 0018 02       		.byte	2
 4498 0019 000000   		.space	3
 4499 001c FFFFFFFF 		.word	-1
 4500 0020 03       		.byte	3
 4501 0021 000000   		.space	3
 4502 0024 FFFFFFFF 		.word	-1
 4503 0028 04       		.byte	4
 4504 0029 000000   		.space	3
 4505 002c FFFFFFFF 		.word	-1
 4506 0030 05       		.byte	5
 4507 0031 000000   		.space	3
 4508 0034 FFFFFFFF 		.word	-1
 4509 0038 06       		.byte	6
 4510 0039 000000   		.space	3
 4511 003c FFFFFFFF 		.word	-1
 4512 0040 07       		.byte	7
 4513 0041 000000   		.space	3
 4514 0044 FFFFFFFF 		.word	-1
 4515 0048 08       		.byte	8
 4516 0049 000000   		.space	3
 4517 004c FFFFFFFF 		.word	-1
 4518 0050 09       		.byte	9
 4519 0051 000000   		.space	3
 4520 0054 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccZ4XUVa.s 			page 112


 4521 0058 0A       		.byte	10
 4522 0059 000000   		.space	3
 4523 005c FFFFFFFF 		.word	-1
 4524 0060 0B       		.byte	11
 4525 0061 000000   		.space	3
 4526 0064 FFFFFFFF 		.word	-1
 4527 0068 0C       		.byte	12
 4528 0069 000000   		.space	3
 4529 006c FFFFFFFF 		.word	-1
 4530 0070 0D       		.byte	13
 4531 0071 000000   		.space	3
 4532 0074 FFFFFFFF 		.word	-1
 4533 0078 0E       		.byte	14
 4534 0079 000000   		.space	3
 4535 007c FFFFFFFF 		.word	-1
 4536 0080 0F       		.byte	15
 4537 0081 000000   		.space	3
 4538 0084 FFFFFFFF 		.word	-1
 4539 0088 10       		.byte	16
 4540 0089 000000   		.space	3
 4541 008c FFFFFFFF 		.word	-1
 4542 0090 12       		.byte	18
 4543 0091 000000   		.space	3
 4544 0094 FFFFFFFF 		.word	-1
 4545 0098 13       		.byte	19
 4546 0099 000000   		.space	3
 4547 009c FFFFFFFF 		.word	-1
 4548 00a0 14       		.byte	20
 4549 00a1 000000   		.space	3
 4550 00a4 FFFFFFFF 		.word	-1
 4551 00a8 15       		.byte	21
 4552 00a9 000000   		.space	3
 4553 00ac FFFFFFFF 		.word	-1
 4554 00b0 16       		.byte	22
 4555 00b1 000000   		.space	3
 4556 00b4 FFFFFFFF 		.word	-1
 4557 00b8 18       		.byte	24
 4558 00b9 000000   		.space	3
 4559 00bc FFFFFFFF 		.word	-1
 4560 00c0 19       		.byte	25
 4561 00c1 000000   		.space	3
 4562 00c4 FFFFFFFF 		.word	-1
 4563 00c8 1A       		.byte	26
 4564 00c9 000000   		.space	3
 4565 00cc FFFFFFFF 		.word	-1
 4566 00d0 1B       		.byte	27
 4567 00d1 000000   		.space	3
 4568 00d4 FFFFFFFF 		.word	-1
 4569 00d8 1C       		.byte	28
 4570 00d9 000000   		.space	3
 4571 00dc FFFFFFFF 		.word	-1
 4572 00e0 1E       		.byte	30
 4573 00e1 000000   		.space	3
 4574 00e4 FFFFFFFF 		.word	-1
 4575 00e8 1F       		.byte	31
 4576 00e9 000000   		.space	3
 4577 00ec FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccZ4XUVa.s 			page 113


 4578 00f0 20       		.byte	32
 4579 00f1 000000   		.space	3
 4580 00f4 FFFFFFFF 		.word	-1
 4581 00f8 21       		.byte	33
 4582 00f9 000000   		.space	3
 4583 00fc FFFFFFFF 		.word	-1
 4584 0100 22       		.byte	34
 4585 0101 000000   		.space	3
 4586 0104 FFFFFFFF 		.word	-1
 4587 0108 24       		.byte	36
 4588 0109 000000   		.space	3
 4589 010c FFFFFFFF 		.word	-1
 4590 0110 25       		.byte	37
 4591 0111 000000   		.space	3
 4592 0114 FFFFFFFF 		.word	-1
 4593 0118 26       		.byte	38
 4594 0119 000000   		.space	3
 4595 011c FFFFFFFF 		.word	-1
 4596 0120 27       		.byte	39
 4597 0121 000000   		.space	3
 4598 0124 FFFFFFFF 		.word	-1
 4599 0128 28       		.byte	40
 4600 0129 000000   		.space	3
 4601 012c FFFFFFFF 		.word	-1
 4602 0130 2E       		.byte	46
 4603 0131 000000   		.space	3
 4604 0134 FFFFFFFF 		.word	-1
 4605 0138 2E       		.byte	46
 4606 0139 000000   		.space	3
 4607 013c FFFFFFFF 		.word	-1
 4608 0140 2E       		.byte	46
 4609 0141 000000   		.space	3
 4610 0144 FFFFFFFF 		.word	-1
 4611 0148 2E       		.byte	46
 4612 0149 000000   		.space	3
 4613 014c FFFFFFFF 		.word	-1
 4614 0150 2C       		.byte	44
 4615 0151 000000   		.space	3
 4616 0154 FFFFFFFF 		.word	-1
 4617 0158 2E       		.byte	46
 4618 0159 000000   		.space	3
 4619 015c FFFFFFFF 		.word	-1
 4620 0160 2E       		.byte	46
 4621 0161 000000   		.space	3
 4622 0164 FFFFFFFF 		.word	-1
 4623 0168 2E       		.byte	46
 4624 0169 000000   		.space	3
 4625 016c FFFFFFFF 		.word	-1
 4626 0170 2E       		.byte	46
 4627 0171 000000   		.space	3
 4628 0174 FFFFFFFF 		.word	-1
 4629              		.section	.rodata.mapping_fshift.10886,"a"
 4630              		.align	2
 4631              		.set	.LANCHOR10,. + 0
 4634              	mapping_fshift.10886:
 4635 0000 63       		.byte	99
 4636 0001 000000   		.space	3
ARM GAS  /tmp/ccZ4XUVa.s 			page 114


 4637 0004 FFFFFFFF 		.word	-1
 4638 0008 22       		.byte	34
 4639 0009 000000   		.space	3
 4640 000c 03000000 		.word	3
 4641 0010 15       		.byte	21
 4642 0011 000000   		.space	3
 4643 0014 01000000 		.word	1
 4644 0018 1C       		.byte	28
 4645 0019 000000   		.space	3
 4646 001c 02000000 		.word	2
 4647 0020 13       		.byte	19
 4648 0021 000000   		.space	3
 4649 0024 01000000 		.word	1
 4650 0028 12       		.byte	18
 4651 0029 000000   		.space	3
 4652 002c 01000000 		.word	1
 4653 0030 12       		.byte	18
 4654 0031 000000   		.space	3
 4655 0034 03000000 		.word	3
 4656 0038 2D       		.byte	45
 4657 0039 000000   		.space	3
 4658 003c 00000000 		.word	0
 4659 0040 22       		.byte	34
 4660 0041 000000   		.space	3
 4661 0044 01000000 		.word	1
 4662 0048 0F       		.byte	15
 4663 0049 000000   		.space	3
 4664 004c 03000000 		.word	3
 4665 0050 01       		.byte	1
 4666 0051 000000   		.space	3
 4667 0054 02000000 		.word	2
 4668 0058 02       		.byte	2
 4669 0059 000000   		.space	3
 4670 005c 02000000 		.word	2
 4671 0060 03       		.byte	3
 4672 0061 000000   		.space	3
 4673 0064 02000000 		.word	2
 4674 0068 0C       		.byte	12
 4675 0069 000000   		.space	3
 4676 006c 01000000 		.word	1
 4677 0070 31       		.byte	49
 4678 0071 000000   		.space	3
 4679 0074 01000000 		.word	1
 4680 0078 2F       		.byte	47
 4681 0079 000000   		.space	3
 4682 007c 04000000 		.word	4
 4683 0080 2F       		.byte	47
 4684 0081 000000   		.space	3
 4685 0084 02000000 		.word	2
 4686 0088 2F       		.byte	47
 4687 0089 000000   		.space	3
 4688 008c 01000000 		.word	1
 4689 0090 18       		.byte	24
 4690 0091 000000   		.space	3
 4691 0094 00000000 		.word	0
 4692 0098 20       		.byte	32
 4693 0099 000000   		.space	3
ARM GAS  /tmp/ccZ4XUVa.s 			page 115


 4694 009c 01000000 		.word	1
 4695 00a0 2F       		.byte	47
 4696 00a1 000000   		.space	3
 4697 00a4 0E000000 		.word	14
 4698 00a8 1C       		.byte	28
 4699 00a9 000000   		.space	3
 4700 00ac 03000000 		.word	3
 4701 00b0 2F       		.byte	47
 4702 00b1 000000   		.space	3
 4703 00b4 0C000000 		.word	12
 4704 00b8 1E       		.byte	30
 4705 00b9 000000   		.space	3
 4706 00bc 00000000 		.word	0
 4707 00c0 2F       		.byte	47
 4708 00c1 000000   		.space	3
 4709 00c4 03000000 		.word	3
 4710 00c8 04       		.byte	4
 4711 00c9 000000   		.space	3
 4712 00cc 03000000 		.word	3
 4713 00d0 2F       		.byte	47
 4714 00d1 000000   		.space	3
 4715 00d4 0A000000 		.word	10
 4716 00d8 2F       		.byte	47
 4717 00d9 000000   		.space	3
 4718 00dc 0B000000 		.word	11
 4719 00e0 2A       		.byte	42
 4720 00e1 000000   		.space	3
 4721 00e4 00000000 		.word	0
 4722 00e8 31       		.byte	49
 4723 00e9 000000   		.space	3
 4724 00ec 0D000000 		.word	13
 4725 00f0 2E       		.byte	46
 4726 00f1 000000   		.space	3
 4727 00f4 00000000 		.word	0
 4728 00f8 20       		.byte	32
 4729 00f9 000000   		.space	3
 4730 00fc 03000000 		.word	3
 4731 0100 2E       		.byte	46
 4732 0101 000000   		.space	3
 4733 0104 00000000 		.word	0
 4734 0108 24       		.byte	36
 4735 0109 000000   		.space	3
 4736 010c 03000000 		.word	3
 4737 0110 2F       		.byte	47
 4738 0111 000000   		.space	3
 4739 0114 08000000 		.word	8
 4740 0118 0D       		.byte	13
 4741 0119 000000   		.space	3
 4742 011c 01000000 		.word	1
 4743 0120 27       		.byte	39
 4744 0121 000000   		.space	3
 4745 0124 03000000 		.word	3
 4746 0128 06       		.byte	6
 4747 0129 000000   		.space	3
 4748 012c 03000000 		.word	3
 4749 0130 2E       		.byte	46
 4750 0131 000000   		.space	3
ARM GAS  /tmp/ccZ4XUVa.s 			page 116


 4751 0134 00000000 		.word	0
 4752 0138 2E       		.byte	46
 4753 0139 000000   		.space	3
 4754 013c 00000000 		.word	0
 4755 0140 2E       		.byte	46
 4756 0141 000000   		.space	3
 4757 0144 00000000 		.word	0
 4758 0148 2E       		.byte	46
 4759 0149 000000   		.space	3
 4760 014c 00000000 		.word	0
 4761 0150 2E       		.byte	46
 4762 0151 000000   		.space	3
 4763 0154 00000000 		.word	0
 4764 0158 2E       		.byte	46
 4765 0159 000000   		.space	3
 4766 015c 00000000 		.word	0
 4767 0160 2E       		.byte	46
 4768 0161 000000   		.space	3
 4769 0164 00000000 		.word	0
 4770 0168 2F       		.byte	47
 4771 0169 000000   		.space	3
 4772 016c FFFFFFFF 		.word	-1
 4773 0170 2F       		.byte	47
 4774 0171 000000   		.space	3
 4775 0174 05000000 		.word	5
 4776              		.section	.rodata.mapping_gshift.10887,"a"
 4777              		.align	2
 4778              		.set	.LANCHOR13,. + 0
 4781              	mapping_gshift.10887:
 4782 0000 63       		.byte	99
 4783 0001 000000   		.space	3
 4784 0004 FFFFFFFF 		.word	-1
 4785 0008 28       		.byte	40
 4786 0009 000000   		.space	3
 4787 000c 03000000 		.word	3
 4788 0010 16       		.byte	22
 4789 0011 000000   		.space	3
 4790 0014 01000000 		.word	1
 4791 0018 1C       		.byte	28
 4792 0019 000000   		.space	3
 4793 001c 01000000 		.word	1
 4794 0020 13       		.byte	19
 4795 0021 000000   		.space	3
 4796 0024 02000000 		.word	2
 4797 0028 2E       		.byte	46
 4798 0029 000000   		.space	3
 4799 002c 00000000 		.word	0
 4800 0030 2E       		.byte	46
 4801 0031 000000   		.space	3
 4802 0034 00000000 		.word	0
 4803 0038 2E       		.byte	46
 4804 0039 000000   		.space	3
 4805 003c 00000000 		.word	0
 4806 0040 07       		.byte	7
 4807 0041 000000   		.space	3
 4808 0044 03000000 		.word	3
 4809 0048 08       		.byte	8
ARM GAS  /tmp/ccZ4XUVa.s 			page 117


 4810 0049 000000   		.space	3
 4811 004c 03000000 		.word	3
 4812 0050 2F       		.byte	47
 4813 0051 000000   		.space	3
 4814 0054 04000000 		.word	4
 4815 0058 2F       		.byte	47
 4816 0059 000000   		.space	3
 4817 005c 04000000 		.word	4
 4818 0060 2F       		.byte	47
 4819 0061 000000   		.space	3
 4820 0064 04000000 		.word	4
 4821 0068 0C       		.byte	12
 4822 0069 000000   		.space	3
 4823 006c 02000000 		.word	2
 4824 0070 2F       		.byte	47
 4825 0071 000000   		.space	3
 4826 0074 06000000 		.word	6
 4827 0078 05       		.byte	5
 4828 0079 000000   		.space	3
 4829 007c 03000000 		.word	3
 4830 0080 2E       		.byte	46
 4831 0081 000000   		.space	3
 4832 0084 00000000 		.word	0
 4833 0088 2E       		.byte	46
 4834 0089 000000   		.space	3
 4835 008c 00000000 		.word	0
 4836 0090 2E       		.byte	46
 4837 0091 000000   		.space	3
 4838 0094 00000000 		.word	0
 4839 0098 2E       		.byte	46
 4840 0099 000000   		.space	3
 4841 009c 00000000 		.word	0
 4842 00a0 2E       		.byte	46
 4843 00a1 000000   		.space	3
 4844 00a4 00000000 		.word	0
 4845 00a8 1B       		.byte	27
 4846 00a9 000000   		.space	3
 4847 00ac 03000000 		.word	3
 4848 00b0 1A       		.byte	26
 4849 00b1 000000   		.space	3
 4850 00b4 03000000 		.word	3
 4851 00b8 2E       		.byte	46
 4852 00b9 000000   		.space	3
 4853 00bc 00000000 		.word	0
 4854 00c0 2E       		.byte	46
 4855 00c1 000000   		.space	3
 4856 00c4 00000000 		.word	0
 4857 00c8 0C       		.byte	12
 4858 00c9 000000   		.space	3
 4859 00cc 03000000 		.word	3
 4860 00d0 1F       		.byte	31
 4861 00d1 000000   		.space	3
 4862 00d4 03000000 		.word	3
 4863 00d8 19       		.byte	25
 4864 00d9 000000   		.space	3
 4865 00dc 03000000 		.word	3
 4866 00e0 2A       		.byte	42
ARM GAS  /tmp/ccZ4XUVa.s 			page 118


 4867 00e1 000000   		.space	3
 4868 00e4 FFFFFFFF 		.word	-1
 4869 00e8 2E       		.byte	46
 4870 00e9 000000   		.space	3
 4871 00ec 00000000 		.word	0
 4872 00f0 2E       		.byte	46
 4873 00f1 000000   		.space	3
 4874 00f4 00000000 		.word	0
 4875 00f8 21       		.byte	33
 4876 00f9 000000   		.space	3
 4877 00fc 03000000 		.word	3
 4878 0100 2E       		.byte	46
 4879 0101 000000   		.space	3
 4880 0104 00000000 		.word	0
 4881 0108 24       		.byte	36
 4882 0109 000000   		.space	3
 4883 010c 02000000 		.word	2
 4884 0110 2F       		.byte	47
 4885 0111 000000   		.space	3
 4886 0114 0D000000 		.word	13
 4887 0118 2E       		.byte	46
 4888 0119 000000   		.space	3
 4889 011c 00000000 		.word	0
 4890 0120 2F       		.byte	47
 4891 0121 000000   		.space	3
 4892 0124 07000000 		.word	7
 4893 0128 1E       		.byte	30
 4894 0129 000000   		.space	3
 4895 012c 03000000 		.word	3
 4896 0130 2E       		.byte	46
 4897 0131 000000   		.space	3
 4898 0134 00000000 		.word	0
 4899 0138 2E       		.byte	46
 4900 0139 000000   		.space	3
 4901 013c 00000000 		.word	0
 4902 0140 2E       		.byte	46
 4903 0141 000000   		.space	3
 4904 0144 00000000 		.word	0
 4905 0148 2E       		.byte	46
 4906 0149 000000   		.space	3
 4907 014c 00000000 		.word	0
 4908 0150 2E       		.byte	46
 4909 0151 000000   		.space	3
 4910 0154 00000000 		.word	0
 4911 0158 2E       		.byte	46
 4912 0159 000000   		.space	3
 4913 015c 00000000 		.word	0
 4914 0160 2E       		.byte	46
 4915 0161 000000   		.space	3
 4916 0164 00000000 		.word	0
 4917 0168 2E       		.byte	46
 4918 0169 000000   		.space	3
 4919 016c 00000000 		.word	0
 4920 0170 2E       		.byte	46
 4921 0171 000000   		.space	3
 4922 0174 00000000 		.word	0
 4923              		.section	.rodata.mapping_none.10885,"a"
ARM GAS  /tmp/ccZ4XUVa.s 			page 119


 4924              		.align	2
 4925              		.set	.LANCHOR9,. + 0
 4928              	mapping_none.10885:
 4929 0000 63       		.byte	99
 4930 0001 000000   		.space	3
 4931 0004 FFFFFFFF 		.word	-1
 4932 0008 00       		.byte	0
 4933 0009 000000   		.space	3
 4934 000c 00000000 		.word	0
 4935 0010 01       		.byte	1
 4936 0011 000000   		.space	3
 4937 0014 00000000 		.word	0
 4938 0018 03       		.byte	3
 4939 0019 000000   		.space	3
 4940 001c 00000000 		.word	0
 4941 0020 13       		.byte	19
 4942 0021 000000   		.space	3
 4943 0024 02000000 		.word	2
 4944 0028 12       		.byte	18
 4945 0029 000000   		.space	3
 4946 002c 02000000 		.word	2
 4947 0030 12       		.byte	18
 4948 0031 000000   		.space	3
 4949 0034 00000000 		.word	0
 4950 0038 06       		.byte	6
 4951 0039 000000   		.space	3
 4952 003c 00000000 		.word	0
 4953 0040 07       		.byte	7
 4954 0041 000000   		.space	3
 4955 0044 00000000 		.word	0
 4956 0048 08       		.byte	8
 4957 0049 000000   		.space	3
 4958 004c 00000000 		.word	0
 4959 0050 01       		.byte	1
 4960 0051 000000   		.space	3
 4961 0054 01000000 		.word	1
 4962 0058 02       		.byte	2
 4963 0059 000000   		.space	3
 4964 005c 01000000 		.word	1
 4965 0060 03       		.byte	3
 4966 0061 000000   		.space	3
 4967 0064 01000000 		.word	1
 4968 0068 0C       		.byte	12
 4969 0069 000000   		.space	3
 4970 006c 00000000 		.word	0
 4971 0070 0D       		.byte	13
 4972 0071 000000   		.space	3
 4973 0074 00000000 		.word	0
 4974 0078 0E       		.byte	14
 4975 0079 000000   		.space	3
 4976 007c 00000000 		.word	0
 4977 0080 0F       		.byte	15
 4978 0081 000000   		.space	3
 4979 0084 00000000 		.word	0
 4980 0088 10       		.byte	16
 4981 0089 000000   		.space	3
 4982 008c 00000000 		.word	0
ARM GAS  /tmp/ccZ4XUVa.s 			page 120


 4983 0090 18       		.byte	24
 4984 0091 000000   		.space	3
 4985 0094 00000000 		.word	0
 4986 0098 13       		.byte	19
 4987 0099 000000   		.space	3
 4988 009c 00000000 		.word	0
 4989 00a0 14       		.byte	20
 4990 00a1 000000   		.space	3
 4991 00a4 00000000 		.word	0
 4992 00a8 15       		.byte	21
 4993 00a9 000000   		.space	3
 4994 00ac 00000000 		.word	0
 4995 00b0 16       		.byte	22
 4996 00b1 000000   		.space	3
 4997 00b4 00000000 		.word	0
 4998 00b8 1E       		.byte	30
 4999 00b9 000000   		.space	3
 5000 00bc 00000000 		.word	0
 5001 00c0 19       		.byte	25
 5002 00c1 000000   		.space	3
 5003 00c4 00000000 		.word	0
 5004 00c8 1A       		.byte	26
 5005 00c9 000000   		.space	3
 5006 00cc 00000000 		.word	0
 5007 00d0 1B       		.byte	27
 5008 00d1 000000   		.space	3
 5009 00d4 00000000 		.word	0
 5010 00d8 1C       		.byte	28
 5011 00d9 000000   		.space	3
 5012 00dc 00000000 		.word	0
 5013 00e0 29       		.byte	41
 5014 00e1 000000   		.space	3
 5015 00e4 00000000 		.word	0
 5016 00e8 1F       		.byte	31
 5017 00e9 000000   		.space	3
 5018 00ec 00000000 		.word	0
 5019 00f0 20       		.byte	32
 5020 00f1 000000   		.space	3
 5021 00f4 00000000 		.word	0
 5022 00f8 21       		.byte	33
 5023 00f9 000000   		.space	3
 5024 00fc 00000000 		.word	0
 5025 0100 22       		.byte	34
 5026 0101 000000   		.space	3
 5027 0104 00000000 		.word	0
 5028 0108 24       		.byte	36
 5029 0109 000000   		.space	3
 5030 010c 00000000 		.word	0
 5031 0110 25       		.byte	37
 5032 0111 000000   		.space	3
 5033 0114 00000000 		.word	0
 5034 0118 26       		.byte	38
 5035 0119 000000   		.space	3
 5036 011c 00000000 		.word	0
 5037 0120 27       		.byte	39
 5038 0121 000000   		.space	3
 5039 0124 00000000 		.word	0
ARM GAS  /tmp/ccZ4XUVa.s 			page 121


 5040 0128 28       		.byte	40
 5041 0129 000000   		.space	3
 5042 012c 00000000 		.word	0
 5043 0130 2E       		.byte	46
 5044 0131 000000   		.space	3
 5045 0134 00000000 		.word	0
 5046 0138 2E       		.byte	46
 5047 0139 000000   		.space	3
 5048 013c 00000000 		.word	0
 5049 0140 2E       		.byte	46
 5050 0141 000000   		.space	3
 5051 0144 00000000 		.word	0
 5052 0148 2E       		.byte	46
 5053 0149 000000   		.space	3
 5054 014c 00000000 		.word	0
 5055 0150 2E       		.byte	46
 5056 0151 000000   		.space	3
 5057 0154 00000000 		.word	0
 5058 0158 2E       		.byte	46
 5059 0159 000000   		.space	3
 5060 015c 00000000 		.word	0
 5061 0160 2E       		.byte	46
 5062 0161 000000   		.space	3
 5063 0164 00000000 		.word	0
 5064 0168 2E       		.byte	46
 5065 0169 000000   		.space	3
 5066 016c 00000000 		.word	0
 5067 0170 2E       		.byte	46
 5068 0171 000000   		.space	3
 5069 0174 00000000 		.word	0
 5070              		.section	.rodata.mid_menu,"a"
 5071              		.align	2
 5074              	mid_menu:
 5075 0000 C8C400   		.ascii	"\310\304\000"
 5076              		.text
 5077              	.Letext0:
 5078              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 5079              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 5080              		.file 6 "/usr/include/newlib/sys/_types.h"
 5081              		.file 7 "/usr/include/newlib/sys/reent.h"
 5082              		.file 8 "/usr/include/newlib/sys/lock.h"
 5083              		.file 9 "/usr/include/newlib/stdlib.h"
 5084              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 5085              		.file 11 "/usr/include/newlib/ctype.h"
 5086              		.file 12 "dmcp/ff_ifc.h"
 5087              		.file 13 "dmcp/dmcp.h"
 5088              		.file 14 "src/keys.h"
 5089              		.file 15 "src/decNumber/decContext.h"
 5090              		.file 16 "src/decNumber/decNumber.h"
 5091              		.file 17 "src/decNumber/decimal64.h"
 5092              		.file 18 "src/decNumber/decimal128.h"
 5093              		.file 19 "src/xeq.h"
 5094              		.file 20 "src/data.h"
 5095              		.file 21 "src/display.h"
 5096              		.file 22 "src/consts.h"
 5097              		.file 23 "src/storage.h"
 5098              		.file 24 "src/catalogues.h"
ARM GAS  /tmp/ccZ4XUVa.s 			page 122


 5099              		.file 25 "src/menu.h"
 5100              		.file 26 "src/lcd.h"
 5101              		.file 27 "/usr/include/newlib/string.h"
 5102              		.file 28 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccZ4XUVa.s 			page 123


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccZ4XUVa.s:18     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccZ4XUVa.s:26     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccZ4XUVa.s:392    .text.set_menu_label.constprop.0:0000000000000138 $d
     /tmp/ccZ4XUVa.s:400    .text.set_menu:0000000000000000 $t
     /tmp/ccZ4XUVa.s:408    .text.set_menu:0000000000000000 set_menu
     /tmp/ccZ4XUVa.s:461    .text.set_menu:0000000000000024 $d
     /tmp/ccZ4XUVa.s:468    .text.toggle_default_menu:0000000000000000 $t
     /tmp/ccZ4XUVa.s:476    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/ccZ4XUVa.s:505    .text.toggle_default_menu:0000000000000018 $d
     /tmp/ccZ4XUVa.s:511    .text.get_menu:0000000000000000 $t
     /tmp/ccZ4XUVa.s:519    .text.get_menu:0000000000000000 get_menu
     /tmp/ccZ4XUVa.s:535    .text.get_menu:0000000000000008 $d
     /tmp/ccZ4XUVa.s:540    .text.set_last_menu:0000000000000000 $t
     /tmp/ccZ4XUVa.s:548    .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccZ4XUVa.s:599    .text.set_last_menu:0000000000000018 $d
     /tmp/ccZ4XUVa.s:606    .text.mdot:0000000000000000 $t
     /tmp/ccZ4XUVa.s:614    .text.mdot:0000000000000000 mdot
     /tmp/ccZ4XUVa.s:705    .text.mdot:000000000000003c $d
     /tmp/ccZ4XUVa.s:710    .text.display_menu:0000000000000000 $t
     /tmp/ccZ4XUVa.s:718    .text.display_menu:0000000000000000 display_menu
     /tmp/ccZ4XUVa.s:957    .text.display_menu:000000000000010c $d
     /tmp/ccZ4XUVa.s:965    .text.display_current_menu:0000000000000000 $t
     /tmp/ccZ4XUVa.s:973    .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccZ4XUVa.s:988    .text.display_current_menu:0000000000000008 $d
     /tmp/ccZ4XUVa.s:993    .text.all_menu_dots:0000000000000000 $t
     /tmp/ccZ4XUVa.s:1001   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccZ4XUVa.s:1085   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccZ4XUVa.s:1090   .text.shutdown:0000000000000000 $t
     /tmp/ccZ4XUVa.s:1098   .text.shutdown:0000000000000000 shutdown
     /tmp/ccZ4XUVa.s:1116   .text.shutdown:000000000000000c $d
     /tmp/ccZ4XUVa.s:1121   .text.is_key_pressed:0000000000000000 $t
     /tmp/ccZ4XUVa.s:1129   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccZ4XUVa.s:1152   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccZ4XUVa.s:1157   .text.get_key:0000000000000000 $t
     /tmp/ccZ4XUVa.s:1165   .text.get_key:0000000000000000 get_key
     /tmp/ccZ4XUVa.s:1180   .text.get_key:0000000000000004 $d
     /tmp/ccZ4XUVa.s:1185   .text.put_key:0000000000000000 $t
     /tmp/ccZ4XUVa.s:1193   .text.put_key:0000000000000000 put_key
     /tmp/ccZ4XUVa.s:1210   .text.put_key:0000000000000004 $d
     /tmp/ccZ4XUVa.s:1215   .text.shift_down:0000000000000000 $t
     /tmp/ccZ4XUVa.s:1223   .text.shift_down:0000000000000000 shift_down
     /tmp/ccZ4XUVa.s:1238   .text.start_key_timer:0000000000000000 $t
     /tmp/ccZ4XUVa.s:1246   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccZ4XUVa.s:1270   .text.start_key_timer:000000000000000c $d
     /tmp/ccZ4XUVa.s:1276   .text.keyticks:0000000000000000 $t
     /tmp/ccZ4XUVa.s:1284   .text.keyticks:0000000000000000 keyticks
     /tmp/ccZ4XUVa.s:1315   .text.keyticks:0000000000000018 $d
     /tmp/ccZ4XUVa.s:1321   .text.moveto:0000000000000000 $t
     /tmp/ccZ4XUVa.s:1329   .text.moveto:0000000000000000 moveto
     /tmp/ccZ4XUVa.s:1389   .text.moveto:000000000000002c $d
     /tmp/ccZ4XUVa.s:1396   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccZ4XUVa.s:1400   .text.print_debug:0000000000000000 $t
     /tmp/ccZ4XUVa.s:1408   .text.print_debug:0000000000000000 print_debug
     /tmp/ccZ4XUVa.s:1510   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
ARM GAS  /tmp/ccZ4XUVa.s 			page 124


     /tmp/ccZ4XUVa.s:1521   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccZ4XUVa.s:1525   .text.print_debug2:0000000000000000 $t
     /tmp/ccZ4XUVa.s:1533   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccZ4XUVa.s:1635   .text.print_debug2:0000000000000064 $d
     /tmp/ccZ4XUVa.s:1646   .text.do_now:0000000000000000 $t
     /tmp/ccZ4XUVa.s:1654   .text.do_now:0000000000000000 do_now
     /tmp/ccZ4XUVa.s:1689   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccZ4XUVa.s:1693   .text.do_multi:0000000000000000 $t
     /tmp/ccZ4XUVa.s:1701   .text.do_multi:0000000000000000 do_multi
     /tmp/ccZ4XUVa.s:1732   .text.do_multi:0000000000000018 $d
     /tmp/ccZ4XUVa.s:2139   .text.do_multi:0000000000000190 $d
     /tmp/ccZ4XUVa.s:2148   .text.program_main:0000000000000000 $t
     /tmp/ccZ4XUVa.s:2156   .text.program_main:0000000000000000 program_main
     /tmp/ccZ4XUVa.s:2649   .text.program_main:0000000000000210 $d
     /tmp/ccZ4XUVa.s:2656   .text.program_main:000000000000021c $t
     /tmp/ccZ4XUVa.s:2902   .text.program_main:00000000000002d4 $d
     /tmp/ccZ4XUVa.s:2946   .text.program_main:0000000000000360 $t
     /tmp/ccZ4XUVa.s:3331   .text.program_main:000000000000055c $d
     /tmp/ccZ4XUVa.s:3390   .bss.n_p:0000000000000000 n_p
     /tmp/ccZ4XUVa.s:3458   .data.spaces:0000000000000000 spaces
     /tmp/ccZ4XUVa.s:3449   .data.release:0000000000000000 release
     /tmp/ccZ4XUVa.s:3422   .data.h_shift:0000000000000000 h_shift
     /tmp/ccZ4XUVa.s:3413   .data.g_shift:0000000000000000 g_shift
     /tmp/ccZ4XUVa.s:3404   .data.f_shift:0000000000000000 f_shift
     /tmp/ccZ4XUVa.s:3431   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccZ4XUVa.s:3440   .data.no_key:0000000000000000 no_key
     /tmp/ccZ4XUVa.s:3465   .rodata.MID_MENU:0000000000000000 MID_MENU
     /tmp/ccZ4XUVa.s:3354   .rodata.str1.4:0000000000000000 $d
     /tmp/ccZ4XUVa.s:5074   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccZ4XUVa.s:3359   .bss.current_menu:0000000000000000 $d
     /tmp/ccZ4XUVa.s:3363   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccZ4XUVa.s:3366   .bss.default_menu:0000000000000000 $d
     /tmp/ccZ4XUVa.s:3370   .bss.default_menu:0000000000000000 default_menu
     /tmp/ccZ4XUVa.s:3373   .bss.last_menu:0000000000000000 $d
     /tmp/ccZ4XUVa.s:3377   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccZ4XUVa.s:3380   .bss.mdots:0000000000000000 $d
     /tmp/ccZ4XUVa.s:3384   .bss.mdots:0000000000000000 mdots
     /tmp/ccZ4XUVa.s:3387   .bss.n_p:0000000000000000 $d
     /tmp/ccZ4XUVa.s:3393   .bss.start_ticks:0000000000000000 $d
     /tmp/ccZ4XUVa.s:3397   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccZ4XUVa.s:3400   .data.f_shift:0000000000000000 $d
     /tmp/ccZ4XUVa.s:3409   .data.g_shift:0000000000000000 $d
     /tmp/ccZ4XUVa.s:3418   .data.h_shift:0000000000000000 $d
     /tmp/ccZ4XUVa.s:3427   .data.heartbeat:0000000000000000 $d
     /tmp/ccZ4XUVa.s:3436   .data.no_key:0000000000000000 $d
     /tmp/ccZ4XUVa.s:3445   .data.release:0000000000000000 $d
     /tmp/ccZ4XUVa.s:3454   .data.spaces:0000000000000000 $d
     /tmp/ccZ4XUVa.s:3461   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccZ4XUVa.s:3471   .rodata.Menus:0000000000000000 $d
     /tmp/ccZ4XUVa.s:3475   .rodata.Menus:0000000000000000 Menus
     /tmp/ccZ4XUVa.s:4483   .rodata.mapping_alpha.10888:0000000000000000 $d
     /tmp/ccZ4XUVa.s:4487   .rodata.mapping_alpha.10888:0000000000000000 mapping_alpha.10888
     /tmp/ccZ4XUVa.s:4630   .rodata.mapping_fshift.10886:0000000000000000 $d
     /tmp/ccZ4XUVa.s:4634   .rodata.mapping_fshift.10886:0000000000000000 mapping_fshift.10886
     /tmp/ccZ4XUVa.s:4777   .rodata.mapping_gshift.10887:0000000000000000 $d
     /tmp/ccZ4XUVa.s:4781   .rodata.mapping_gshift.10887:0000000000000000 mapping_gshift.10887
     /tmp/ccZ4XUVa.s:4924   .rodata.mapping_none.10885:0000000000000000 $d
ARM GAS  /tmp/ccZ4XUVa.s 			page 125


     /tmp/ccZ4XUVa.s:4928   .rodata.mapping_none.10885:0000000000000000 mapping_none.10885
     /tmp/ccZ4XUVa.s:5071   .rodata.mid_menu:0000000000000000 $d
     /tmp/ccZ4XUVa.s:1745   .text.do_multi:0000000000000025 $d
     /tmp/ccZ4XUVa.s:1745   .text.do_multi:0000000000000026 $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
forceDispPlot
RectPolConv
pixel_length
strcpy
sprintf
process_keycode_with_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
get_alpha_state
cur_shift
StateWhileOn
DispMsg
JustDisplayed
Pause

ARM GAS  /tmp/ccGpw0cR.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"console.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.menu_line_str.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC3:
  20 0000 41626F75 		.ascii	"About >\000"
  20      74203E00 
  21              		.section	.text.menu_line_str,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.global	menu_line_str
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	menu_line_str:
  32              	.LVL0:
  33              	.LFB4:
  34              		.file 1 "src/menu.c"
   1:src/menu.c    **** //#include <menu.h>
   2:src/menu.c    **** extern const char SvnRevision[4];
   3:src/menu.c    **** 
   4:src/menu.c    **** struct _menu UserMenu =
   5:src/menu.c    ****   {
   6:src/menu.c    ****     "User Menu", 
   7:src/menu.c    ****     {
   8:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
   9:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  10:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  11:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
  12:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
  13:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
  14:src/menu.c    ****     }
  15:src/menu.c    ****   };
  16:src/menu.c    **** 
  17:src/menu.c    **** const char* arrow_key_string = "--\015";
  18:src/menu.c    **** const char* cmplx_key_string = "CPX";
  19:src/menu.c    **** 
  20:src/menu.c    **** menu_name current_menu = 0;
  21:src/menu.c    **** menu_name last_menu = 0;
  22:src/menu.c    **** menu_name default_menu = 0;
  23:src/menu.c    **** 
ARM GAS  /tmp/ccGpw0cR.s 			page 2


  24:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted);
  25:src/menu.c    **** 
  26:src/menu.c    **** 
  27:src/menu.c    **** 
  28:src/menu.c    **** /* 
  29:src/menu.c    ****  * System menu stuff
  30:src/menu.c    ****  */
  31:src/menu.c    **** 
  32:src/menu.c    **** #define MI_ABOUT_PGM 11
  33:src/menu.c    **** 
  34:src/menu.c    **** const uint8_t mid_menu[] = {
  35:src/menu.c    ****     MI_SYSTEM_ENTER,
  36:src/menu.c    ****     MI_MSC,
  37:src/menu.c    ****     MI_ABOUT_PGM,
  38:src/menu.c    ****     0 }; // Terminator
  39:src/menu.c    **** 
  40:src/menu.c    **** const smenu_t MID_MENU = { "System!",  mid_menu,   NULL, NULL };
  41:src/menu.c    **** 
  42:src/menu.c    **** void disp_about(void);
  43:src/menu.c    **** 
  44:src/menu.c    **** int run_menu_item(uint8_t line_id) {
  45:src/menu.c    ****   int ret = 0;
  46:src/menu.c    **** 
  47:src/menu.c    ****   switch(line_id) {
  48:src/menu.c    ****     case MI_ABOUT_PGM:
  49:src/menu.c    ****       disp_about();
  50:src/menu.c    ****       break;
  51:src/menu.c    **** 
  52:src/menu.c    ****      default:
  53:src/menu.c    ****       ret = MRET_UNIMPL;
  54:src/menu.c    ****       break;
  55:src/menu.c    ****   }
  56:src/menu.c    **** 
  57:src/menu.c    ****   return ret;
  58:src/menu.c    **** }
  59:src/menu.c    **** 
  60:src/menu.c    **** const char * menu_line_str(uint8_t line_id, char * s, const int slen) {
  35              		.loc 1 60 71 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  61:src/menu.c    ****   const char * ln;
  40              		.loc 1 61 3 view .LVU1
  62:src/menu.c    **** 
  63:src/menu.c    ****   switch(line_id) {
  41              		.loc 1 63 3 view .LVU2
  64:src/menu.c    **** 
  65:src/menu.c    ****   case MI_ABOUT_PGM:    ln = "About >";              break;
  66:src/menu.c    **** 
  67:src/menu.c    ****   default:
  68:src/menu.c    ****     ln = NULL;
  42              		.loc 1 68 8 is_stmt 0 view .LVU3
  43 0000 024B     		ldr	r3, .L5
  63:src/menu.c    **** 
  44              		.loc 1 63 3 view .LVU4
  45 0002 0B28     		cmp	r0, #11
ARM GAS  /tmp/ccGpw0cR.s 			page 3


  69:src/menu.c    ****     break;
  70:src/menu.c    ****   }
  71:src/menu.c    **** 
  72:src/menu.c    ****   return ln;
  73:src/menu.c    **** }
  46              		.loc 1 73 1 view .LVU5
  47 0004 0CBF     		ite	eq
  48 0006 1846     		moveq	r0, r3
  49              	.LVL1:
  50              		.loc 1 73 1 view .LVU6
  51 0008 0020     		movne	r0, #0
  52 000a 7047     		bx	lr
  53              	.L6:
  54              		.align	2
  55              	.L5:
  56 000c 00000000 		.word	.LC3
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.set_menu_label.constprop.0,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	set_menu_label.constprop.0:
  69              	.LVL2:
  70              	.LFB37:
  74:src/menu.c    **** 
  75:src/menu.c    **** void disp_about() {
  76:src/menu.c    **** #ifdef C_VERSION
  77:src/menu.c    ****   char title[] = "WP 34C calculator for DM42: v     ";
  78:src/menu.c    **** #else
  79:src/menu.c    ****   char title[] = "WP 34S calculator for DM42: v     ";
  80:src/menu.c    **** #endif
  81:src/menu.c    ****   xcopy ((title + 29), SvnRevision, 4);
  82:src/menu.c    **** 
  83:src/menu.c    ****   clear_disp(); // clears buffer and zeros dots[]
  84:src/menu.c    ****   lcd_writeClr(t24);
  85:src/menu.c    **** 
  86:src/menu.c    ****   lcd_setXY(t24, 0, 5);
  87:src/menu.c    ****   lcd_putsR(t24, title);
  88:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
  89:src/menu.c    ****   t20->newln = 1;
  90:src/menu.c    ****   t20->inv = 0;
  91:src/menu.c    **** #ifdef TOP_ROW
  92:src/menu.c    ****   lcd_puts(t20, "With longer alpha display and top row,");
  93:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
  94:src/menu.c    ****   lcd_puts(t20, "With a longer alpha display,");
  95:src/menu.c    **** #else
  96:src/menu.c    ****   lcd_puts(t20, "Same display layout as the original WP34S,");
  97:src/menu.c    **** #endif
  98:src/menu.c    ****   lcd_puts(t20, "and some annunciators renamed.");
  99:src/menu.c    ****   lcd_puts(t20, "Includes printing, stopwatch,");
 100:src/menu.c    ****   lcd_puts(t20, "entry RPN, extended file handling,");
 101:src/menu.c    ****   lcd_puts(t20, "user-defined menus, and");
 102:src/menu.c    ****   lcd_puts(t20, "complex lock mode.");
ARM GAS  /tmp/ccGpw0cR.s 			page 4


 103:src/menu.c    **** 
 104:src/menu.c    ****   t20->y += 5;
 105:src/menu.c    **** 
 106:src/menu.c    ****   t20->bgfill = 1;
 107:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 108:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 109:src/menu.c    ****   t20->bgfill = 0;
 110:src/menu.c    ****   t20->newln = 0;
 111:src/menu.c    ****   
 112:src/menu.c    ****   t24->y = LCD_Y - lcd_lineHeight(t24)-5;
 113:src/menu.c    ****   t24->x = 20;
 114:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 115:src/menu.c    **** 
 116:src/menu.c    ****   lcd_refresh();
 117:src/menu.c    **** 
 118:src/menu.c    ****   wait_for_key_press();
 119:src/menu.c    **** }
 120:src/menu.c    **** 
 121:src/menu.c    **** /*
 122:src/menu.c    ****  * WP34s menu code
 123:src/menu.c    ****  */
 124:src/menu.c    **** 
 125:src/menu.c    **** void set_menu ( menu_name new_menu ) {
 126:src/menu.c    ****   menu_name m = current_menu;
 127:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 128:src/menu.c    ****     current_menu = default_menu;
 129:src/menu.c    ****   }
 130:src/menu.c    ****   else if (new_menu == M_Last) { // go to last menu
 131:src/menu.c    ****     current_menu = last_menu;
 132:src/menu.c    ****   }
 133:src/menu.c    ****   else {
 134:src/menu.c    ****     current_menu = new_menu; // change to new menu
 135:src/menu.c    ****   }
 136:src/menu.c    ****   if ( (m != M_Arrow) && (m != M_Alpha) ) last_menu = m;
 137:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 138:src/menu.c    **** }
 139:src/menu.c    **** 
 140:src/menu.c    **** void set_default_menu () {
 141:src/menu.c    ****   set_menu (default_menu);
 142:src/menu.c    **** }
 143:src/menu.c    **** 
 144:src/menu.c    **** void toggle_default_menu () {
 145:src/menu.c    ****   if (current_menu == M_Blank) {
 146:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 147:src/menu.c    ****     return;
 148:src/menu.c    ****   }
 149:src/menu.c    ****   else if (current_menu == M_Blank2) {
 150:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 151:src/menu.c    ****   }
 152:src/menu.c    ****   else {
 153:src/menu.c    ****     set_default_menu();
 154:src/menu.c    ****   }
 155:src/menu.c    **** }
 156:src/menu.c    **** 
 157:src/menu.c    **** menu_name get_menu () {
 158:src/menu.c    ****   return current_menu;
 159:src/menu.c    **** }
ARM GAS  /tmp/ccGpw0cR.s 			page 5


 160:src/menu.c    **** 
 161:src/menu.c    **** menu_name get_last_menu () {
 162:src/menu.c    ****   return last_menu;
 163:src/menu.c    **** }
 164:src/menu.c    **** 
 165:src/menu.c    **** void display_current_menu () {
 166:src/menu.c    ****   display_menu (get_current_menu_ref());
 167:src/menu.c    **** }
 168:src/menu.c    **** 
 169:src/menu.c    **** void set_last_menu () {
 170:src/menu.c    ****   set_menu (M_Last);
 171:src/menu.c    **** }
 172:src/menu.c    **** 
 173:src/menu.c    **** static unsigned char mdots[200][2];
 174:src/menu.c    **** 
 175:src/menu.c    **** static const struct _menu Menus[] = {
 176:src/menu.c    ****   {
 177:src/menu.c    ****     "M_Blank", // 0
 178:src/menu.c    ****     { 
 179:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 180:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 181:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 182:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 183:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 184:src/menu.c    ****       { CMPLX_KEY, { K_MULTI, DOTS }, "CPX", "" },
 185:src/menu.c    ****     }    
 186:src/menu.c    ****   },
 187:src/menu.c    ****   {
 188:src/menu.c    ****     "M_Clear", // 1
 189:src/menu.c    ****     { 
 190:src/menu.c    ****       { { K24, 1 }, { K_OP, OP_NIL | OP_CLPALL }, "CLProg", "CLPAll" },
 191:src/menu.c    ****       { { K24, 2 }, { K_OP, OP_NIL | OP_CLREG }, "CL\221", "CLReg" },
 192:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 193:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, { K_OP, OP_NIL | OP_CLALL }, "CLStk", "CLAll" },
 194:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 195:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 196:src/menu.c    ****     }    
 197:src/menu.c    ****   },
 198:src/menu.c    ****   {
 199:src/menu.c    ****     "M_Disp", // 2
 200:src/menu.c    ****     { 
 201:src/menu.c    ****       { { K00, 3 }, { K05, 1 }, "ALL", "a b/c" },
 202:src/menu.c    ****       { { K01, 3 }, { K05, 2 }, "FIX", "d/c" },
 203:src/menu.c    ****       { { K02, 3 }, { K10, 1 }, "SCI", "H.MS" },
 204:src/menu.c    ****       { { K03, 3 }, { K11, 1 }, "ENG", "H.d" },
 205:src/menu.c    ****       { ARROW_KEY, { K62, 3 }, "--\015", "./," },
 206:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 207:src/menu.c    ****     }
 208:src/menu.c    ****   },
 209:src/menu.c    ****   {
 210:src/menu.c    ****     "M_Base", // 3
 211:src/menu.c    ****     { 
 212:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "BIN", "not" },
 213:src/menu.c    ****       { { K22, 2 }, { K31, 3 }, "OCT", "and" },
 214:src/menu.c    ****       { { K23, 1 }, { K32, 3 }, "DEC", "or" },
 215:src/menu.c    ****       { { K23, 2 }, { K33, 3 }, "HEX", "xor" },
 216:src/menu.c    ****       { ARROW_KEY, { K34, 3}, "--\015", "RMDR" },
ARM GAS  /tmp/ccGpw0cR.s 			page 6


 217:src/menu.c    ****       { CMPLX_KEY, { K11, 1}, "CPX", "H.d" },
 218:src/menu.c    ****     }
 219:src/menu.c    ****   },
 220:src/menu.c    ****   {
 221:src/menu.c    ****     "M_Angles", // 4
 222:src/menu.c    ****     { 
 223:src/menu.c    ****       { { K10, 2 }, { K04, 1 }, "DEG", "P\015R" },
 224:src/menu.c    ****       { { K11, 2 }, { K04, 2 }, "RAD", "R\015P" },
 225:src/menu.c    ****       { { K12, 2 }, { K00, 1 }, "GRAD", "HYP" },
 226:src/menu.c    ****       { { K10, 1 }, { K11, 1 }, "H.MS", "H.d" },
 227:src/menu.c    ****       { ARROW_KEY, { K00, 2 }, "--\015", "HYP\235" },
 228:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 229:src/menu.c    ****     }
 230:src/menu.c    ****       
 231:src/menu.c    ****   },
 232:src/menu.c    ****   {
 233:src/menu.c    ****     "M_Misc", // 5
 234:src/menu.c    ****     { 
 235:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|X|", "2\234" },
 236:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "Log\272" },
 237:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "IPart", "Log\213" },
 238:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "FPart", "||el" },
 239:src/menu.c    ****       { ARROW_KEY, { K54, 2 }, "--\015", "\203%" },
 240:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 241:src/menu.c    ****     }
 242:src/menu.c    ****   },
 243:src/menu.c    ****   {
 244:src/menu.c    ****     "M_Swap", // 6
 245:src/menu.c    ****     { 
 246:src/menu.c    ****       { { K21, 1 }, { K_OP, RARG_BASEOP(RARG_SHUFFLE) }, "Show\016", "[\027]" },
 247:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 248:src/menu.c    ****       { { K21, 3 }, { K_OP, RARG_BASEOP(RARG_SWAPZ) }, "x\027?", "z\027?" },
 249:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_SWAPY) }, { K_OP, RARG_BASEOP(RARG_SWAPT) }, "y\027?", "t\027?" },
 250:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 251:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 252:src/menu.c    ****     }    
 253:src/menu.c    ****   },
 254:src/menu.c    ****   {
 255:src/menu.c    ****     "M_Program", // 7
 256:src/menu.c    ****     { 
 257:src/menu.c    ****       { { K63, 1 }, { K64, 1 }, "LBL", "DSE" },
 258:src/menu.c    ****       { { K63, 2 }, { K64, 2 }, "RTN", "ISG" },
 259:src/menu.c    ****       { { K61, 3 }, { K_OP, RARG_BASEOP(RARG_DEC) }, "Pause", "DEC" },
 260:src/menu.c    ****       { { K30, 3 }, { K_OP, RARG_BASEOP(RARG_INC) }, "GTO", "INC" },
 261:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_BACK) }, "--\015", "BACK" },
 262:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_SKIP) }, "CPX", "SKIP" },
 263:src/menu.c    ****     }
 264:src/menu.c    ****   },
 265:src/menu.c    ****   {
 266:src/menu.c    ****     "M_Setup1", // 8
 267:src/menu.c    ****     { 
 268:src/menu.c    ****       { { K_EXIT, 0}, { K_SYS, 0 }, "EXIT", "System" },
 269:src/menu.c    ****       { { K_MULTI, HELP }, NO_KEY, "HELP", "" },
 270:src/menu.c    ****       { { K_MULTI, ONSTO }, { K_MULTI, WRTST}, "OnSTO", "SvRAM" },
 271:src/menu.c    ****       { { K_MULTI, ONRCL }, { K_MULTI, LDST}, "OnRCL", "LdRAM" },
 272:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 273:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
ARM GAS  /tmp/ccGpw0cR.s 			page 7


 274:src/menu.c    ****     }
 275:src/menu.c    ****   },
 276:src/menu.c    ****   {
 277:src/menu.c    ****     "M_Arrow", // 9
 278:src/menu.c    ****     { 
 279:src/menu.c    ****       { { K22, 1 }, { K10, 2 }, "\015Bin", "\015DEG" },
 280:src/menu.c    ****       { { K22, 2 }, { K11, 2 }, "\015Oct", "\015RAD" },
 281:src/menu.c    ****       { { K23, 1 }, { K12, 2 }, "\015Dec", "\015Grad" },
 282:src/menu.c    ****       { { K23, 2 }, { K10, 1 }, "\015Hex", "\015HMS" },
 283:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 284:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 285:src/menu.c    ****     }
 286:src/menu.c    ****   },
 287:src/menu.c    ****   {
 288:src/menu.c    ****     "M_Flags", // 10
 289:src/menu.c    ****     { 
 290:src/menu.c    ****       { { K50, 1 }, { K_OP, RARG_BASEOP(RARG_FS) }, "SF_", "FS?" },
 291:src/menu.c    ****       { { K50, 2 }, { K_OP, RARG_BASEOP(RARG_FC)}, "CF_", "FC?" },
 292:src/menu.c    ****       { { K51, 1 }, { K_OP, RARG_BASEOP(RARG_TEST_LT)}, "x=?", "x<?" },
 293:src/menu.c    ****       { { K51, 2 }, { K_OP, RARG_BASEOP(RARG_TEST_LE)}, "x\013?", "x<=?" },
 294:src/menu.c    ****       { ARROW_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GE)}, "--\015", "x>=?" },
 295:src/menu.c    ****       { CMPLX_KEY, { K_OP, RARG_BASEOP(RARG_TEST_GT)}, "CPX", "x>?" },
 296:src/menu.c    ****     }
 297:src/menu.c    ****   },
 298:src/menu.c    ****   {
 299:src/menu.c    ****     "M_Prob", // 11
 300:src/menu.c    ****     { 
 301:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_MON | OP_LNGAMMA }, "Fact!", "Ln\006\202" },
 302:src/menu.c    ****       { { K40, 1 }, { K41, 1 }, "Cy,x", "\224" }, // phi
 303:src/menu.c    ****       { { K40, 2 }, { K41, 2 }, "Py,x", "\224\235" }, // phi^-1
 304:src/menu.c    ****       { { K12, 1 }, { K_OP, OP_NIL | OP_STORANDOM } , "RAN#", "SEED" },
 305:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 306:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 307:src/menu.c    ****     }
 308:src/menu.c    ****   },
 309:src/menu.c    ****   {
 310:src/menu.c    ****     "M_Stats", // 12
 311:src/menu.c    ****     /*
 312:src/menu.c    ****      *xbar, sd;
 313:src/menu.c    ****      *yhat, xhat;
 314:src/menu.c    ****      *corr, L.R.;
 315:src/menu.c    ****      *best, linear;
 316:src/menu.c    ****      *ln, exp;
 317:src/menu.c    ****      *cmplx, power;
 318:src/menu.c    ****      *No, sums is already on g9.
 319:src/menu.c    ****      */
 320:src/menu.c    ****     { 
 321:src/menu.c    ****       { { K42, 1 }, { K42, 2 }, "\001", "S.D." },
 322:src/menu.c    ****       { { K43, 1 }, { K_OP, OP_MON | OP_xhat }, "y-hat", "x-hat" },
 323:src/menu.c    ****       { { K_OP, OP_NIL | OP_statR}, { K_OP, OP_NIL | OP_statLR}, "CORR", "L.R." },
 324:src/menu.c    ****       { { K_OP, OP_NIL | OP_BEST}, { K_OP, OP_NIL | OP_LOGF}, "BestF", "LogFit" },
 325:src/menu.c    ****       { { K_OP, OP_NIL | OP_LINF}, { K_OP, OP_NIL | OP_EXPF}, "Linear", "ExpFit" },
 326:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PWRF }, "CPX", "PwrFit" },
 327:src/menu.c    ****     }
 328:src/menu.c    ****   },
 329:src/menu.c    ****   {
 330:src/menu.c    ****     "M_Setup2", // 13
ARM GAS  /tmp/ccGpw0cR.s 			page 8


 331:src/menu.c    ****     { 
 332:src/menu.c    ****       { { K_MULTI, WRLIB}, NO_KEY, "SvLIB", "" },
 333:src/menu.c    ****       { { K_MULTI, LLIB }, NO_KEY, "LdLIB", "" },
 334:src/menu.c    ****       { { K_MULTI, SVPRG }, { K_OP, OP_NIL | OP_PSTO }, "SvCPRG", "PSTO" },
 335:src/menu.c    ****       { { K_MULTI, LDPRG }, { K_OP, OP_NIL | OP_PRCL }, "LdPRG", "PRCL" },
 336:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 337:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 338:src/menu.c    ****     }
 339:src/menu.c    ****   },
 340:src/menu.c    ****   {
 341:src/menu.c    ****     "M_Solve", // 14
 342:src/menu.c    ****     { 
 343:src/menu.c    ****       { { K52, 1 }, { K_OP, RARG_BASEOP(RARG_DERIV)}, "SLV", "f'(x)" },
 344:src/menu.c    ****       { { K52, 2 }, { K_OP, RARG_BASEOP(RARG_2DERIV)}, "\004 dx", "f''(x)" },
 345:src/menu.c    ****       { { K53, 2 }, NO_KEY, "SUM", "" },
 346:src/menu.c    ****       { { K53, 1 }, NO_KEY, "PROD", "" },
 347:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 348:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 349:src/menu.c    ****     }
 350:src/menu.c    ****   },
 351:src/menu.c    ****   {
 352:src/menu.c    ****     "M_Blank2", // 15
 353:src/menu.c    ****     { 
 354:src/menu.c    ****       { { K64, 3 }, NO_KEY, "\221+", "" },
 355:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 356:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 357:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 358:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 359:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 360:src/menu.c    ****     }    
 361:src/menu.c    ****   },
 362:src/menu.c    ****   {
 363:src/menu.c    ****     "M_Alpha", // 16
 364:src/menu.c    ****     { 
 365:src/menu.c    ****       { { K_OP, OP_NIL | OP_XTOALPHA }, { K_OP, OP_NIL | OP_ALPHATIME }, "X->\240", "\240TIME" },
 366:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHATOX }, { K_OP, OP_NIL | OP_ALPHADATE }, "\240->X", "\240DATE" },
 367:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_AIP) }, { K_OP, OP_NIL | OP_ALPHADAY }, "\240IP", "\240DAY" },
 368:src/menu.c    ****       { { K_OP, OP_NIL | OP_ALPHALEN }, { K_OP, OP_NIL | OP_ALPHAMONTH }, "\240LENG", "\240MNTH" },
 369:src/menu.c    ****       { ARROW_KEY, { K_ARROW, 1 }, "--\015", "" },
 370:src/menu.c    ****       { CMPLX_KEY, { K_CMPLX, 1 }, "CPX", "" },
 371:src/menu.c    ****     }    
 372:src/menu.c    ****   },
 373:src/menu.c    ****   {
 374:src/menu.c    ****     "M_C_Lock", // 17
 375:src/menu.c    ****     { 
 376:src/menu.c    ****       { { K40, 2 }, { K04, 2 }, "POLAR", "\015 P" },
 377:src/menu.c    ****       { { K40, 1 }, { K04, 1 }, "RECT", "\015 R" },
 378:src/menu.c    ****       { { K22, 1 }, { K22, 3 }, "+/-\006Im", "+/-\006Re" },
 379:src/menu.c    ****       { { K21, 2 }, { K00, 1 }, "Re\027Im", "HYP" },
 380:src/menu.c    ****       { ARROW_KEY, { K23, 1 }, "--\015", "\021\006\257" },
 381:src/menu.c    ****       { CMPLX_KEY, { K20, 1 }, "CPX", "\021\006CNST" },
 382:src/menu.c    ****     }    
 383:src/menu.c    ****   },
 384:src/menu.c    ****   {
 385:src/menu.c    ****     "M_Clear_C", // 18
 386:src/menu.c    ****     { 
 387:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
ARM GAS  /tmp/ccGpw0cR.s 			page 9


 388:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 389:src/menu.c    ****       { { K24, 3 }, { K_OP, OP_NIL | OP_CLRALPHA }, "CLx", "CL\006\240" },
 390:src/menu.c    ****       { { K_OP, OP_NIL | OP_CLSTK }, NO_KEY, "CLStk", "" },
 391:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 392:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 393:src/menu.c    ****     }    
 394:src/menu.c    ****   },
 395:src/menu.c    ****   {
 396:src/menu.c    ****     "M_Swap_C", // 19
 397:src/menu.c    ****     { 
 398:src/menu.c    ****       { { K21, 1 }, NO_KEY, "Show\016", "" },
 399:src/menu.c    ****       { { K21, 2 }, NO_KEY, "Show\015", "" },
 400:src/menu.c    ****       { { K21, 3 }, NO_KEY, "x\027?", "" },
 401:src/menu.c    ****       { NO_KEY, NO_KEY, "", "" },
 402:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 403:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 404:src/menu.c    ****     }    
 405:src/menu.c    ****   },
 406:src/menu.c    ****   {
 407:src/menu.c    ****     "M_Arrow_C", // 20
 408:src/menu.c    ****     { 
 409:src/menu.c    ****       { NO_KEY, { K10, 2 }, "", "DEG" },
 410:src/menu.c    ****       { NO_KEY, { K11, 2 }, "", "RAD" },
 411:src/menu.c    ****       { NO_KEY, { K12, 2 }, "", "Grad" },
 412:src/menu.c    ****       { NO_KEY, { K10, 1 }, "", "\015HMS" },
 413:src/menu.c    ****       { ARROW_KEY, { K11, 1 }, "--\015", "HMS\015" },
 414:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 415:src/menu.c    ****     }
 416:src/menu.c    ****   },
 417:src/menu.c    ****   {
 418:src/menu.c    ****     "M_Prob_C", // 21
 419:src/menu.c    ****     { 
 420:src/menu.c    ****       { { K40, 3 }, { K_OP, OP_CMON | OP_LNGAMMA }, "\024\006!", "\024\006Ln\006\202" },
 421:src/menu.c    ****       { { K_OP, OP_CDYA | OP_COMB }, NO_KEY, "\024\006Cy,x", "" },
 422:src/menu.c    ****       { { K_OP, OP_CDYA | OP_PERM }, NO_KEY, "\024\006Py,x", "" },
 423:src/menu.c    ****       { NO_KEY, NO_KEY , "", "" },
 424:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 425:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 426:src/menu.c    ****     }
 427:src/menu.c    ****   },
 428:src/menu.c    ****   {
 429:src/menu.c    ****     "M_Blank2_C", // 22
 430:src/menu.c    ****     { 
 431:src/menu.c    ****       { { K00, 1 }, NO_KEY, "HYP", "" },
 432:src/menu.c    ****       { { K34, 1 }, NO_KEY, "1/X", "" },
 433:src/menu.c    ****       { { K44, 1 }, NO_KEY, "\003X", "" },
 434:src/menu.c    ****       { { K31, 2 }, NO_KEY, "LOG", "" },
 435:src/menu.c    ****       { ARROW_KEY, NO_KEY, "--\015", "" },
 436:src/menu.c    ****       { CMPLX_KEY, NO_KEY, "CPX", "" },
 437:src/menu.c    ****     }    
 438:src/menu.c    ****   },
 439:src/menu.c    ****   {
 440:src/menu.c    ****     "M_Misc_C", // 23
 441:src/menu.c    ****     { 
 442:src/menu.c    ****       { { K61, 1 }, { K32, 1 }, "|z|", "\0242\234" },
 443:src/menu.c    ****       { { K61, 2 }, { K32, 2 }, "RND", "\024Log\272" },
 444:src/menu.c    ****       { { K62, 1 }, { K33, 2 }, "0\015Re", "\024Log\213" },
ARM GAS  /tmp/ccGpw0cR.s 			page 10


 445:src/menu.c    ****       { { K62, 2 }, { K34, 2 }, "0\015Im", "\024||el" },
 446:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "\024.\034" },
 447:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "\024./" },
 448:src/menu.c    ****     }
 449:src/menu.c    ****   },
 450:src/menu.c    ****   {
 451:src/menu.c    ****     "M_Usermenu", // 24
 452:src/menu.c    ****     { 
 453:src/menu.c    ****       { { K_OP, 0x0000fb00  }, NO_KEY, "UMEN", "" },
 454:src/menu.c    ****       { { K_OP, 0x314dfb55 }, { K_OP, 0x344dfb55 }, "UM1", "UM4" },
 455:src/menu.c    ****       { { K_OP, 0x324dfb55 }, { K_OP, 0x354dfb55 }, "UM2", "UM5" },
 456:src/menu.c    ****       { { K_OP, 0x334dfb55 }, { K_OP, 0x364dfb55 }, "UM3", "UM6" },
 457:src/menu.c    ****       { ARROW_KEY, { K44, 3 }, "--\015", "" },
 458:src/menu.c    ****       { CMPLX_KEY, { K34, 3 }, "CPX", "" },
 459:src/menu.c    ****     }
 460:src/menu.c    ****   },
 461:src/menu.c    ****   {
 462:src/menu.c    ****     "M_Print", // 25
 463:src/menu.c    ****     { 
 464:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_ON  }, { K_OP, OP_NIL | OP_PRINT_OFF }, "\222\006On", "\222\006Of
 465:src/menu.c    ****       { { K_OP, RARG_BASEOP(RARG_PMODE) }, { K_OP, RARG_BASEOP(RARG_DBLSP) }, "\222\006Mode", "\222
 466:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_PGM }, { K_OP, OP_NIL | OP_PRINT_REGS }, "\222\006Prog", "\222\00
 467:src/menu.c    ****       { { K_OP, OP_NIL | OP_PRINT_STACK }, { K_OP, OP_NIL | OP_PRINT_SIGMA }, "\222\006Stk", "\222\
 468:src/menu.c    ****       { ARROW_KEY, { K_OP, OP_NIL | OP_PRINT_ALPHA }, "--\015", "\222\006\240" },
 469:src/menu.c    ****       { CMPLX_KEY, { K_OP, OP_NIL | OP_PRINT_ADV }, "CPX", "\222\006ADV" },
 470:src/menu.c    ****     }
 471:src/menu.c    ****   },
 472:src/menu.c    **** 
 473:src/menu.c    **** };  
 474:src/menu.c    **** 
 475:src/menu.c    **** /* This code is the set_status_sized code with small changes
 476:src/menu.c    ****  * and non-DM42 code removed.
 477:src/menu.c    ****  * MENU_WIDTH - width of menu item in "dots", not in pixels.
 478:src/menu.c    ****  */
 479:src/menu.c    **** #define MENU_WIDTH 32
 480:src/menu.c    **** 
 481:src/menu.c    **** static void set_menu_label (const char *str, int smallp, int dotcol, int shifted) {
  71              		.loc 1 481 13 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 544
  74              		@ frame_needed = 0, uses_anonymous_args = 0
 482:src/menu.c    ****   // dotcol is the number of the starting dot column
 483:src/menu.c    ****   // shifted is 1 if shifted
 484:src/menu.c    ****   unsigned short int posns[257];
  75              		.loc 1 484 3 view .LVU8
 485:src/menu.c    **** 
 486:src/menu.c    ****   // Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
 487:src/menu.c    ****   int posns_state = 255;
  76              		.loc 1 487 3 view .LVU9
 488:src/menu.c    **** 
 489:src/menu.c    ****   int x = dotcol;
  77              		.loc 1 489 3 view .LVU10
 481:src/menu.c    ****   // dotcol is the number of the starting dot column
  78              		.loc 1 481 13 is_stmt 0 view .LVU11
  79 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  80              		.cfi_def_cfa_offset 36
  81              		.cfi_offset 4, -36
ARM GAS  /tmp/ccGpw0cR.s 			page 11


  82              		.cfi_offset 5, -32
  83              		.cfi_offset 6, -28
  84              		.cfi_offset 7, -24
  85              		.cfi_offset 8, -20
  86              		.cfi_offset 9, -16
  87              		.cfi_offset 10, -12
  88              		.cfi_offset 11, -8
  89              		.cfi_offset 14, -4
  90 0004 ADF5097D 		sub	sp, sp, #548
  91              		.cfi_def_cfa_offset 584
 481:src/menu.c    ****   // dotcol is the number of the starting dot column
  92              		.loc 1 481 13 view .LVU12
  93 0008 CDE90102 		strd	r0, r2, [sp, #4]
 490:src/menu.c    ****   int i, j, xmax;
 491:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
  94              		.loc 1 491 18 view .LVU13
  95 000c 0029     		cmp	r1, #0
 492:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 493:src/menu.c    **** 
 494:src/menu.c    **** #ifdef RP_PREFIX
 495:src/menu.c    ****   RectPolConv = 0;
  96              		.loc 1 495 15 view .LVU14
  97 000e 494A     		ldr	r2, .L41
  98              	.LVL3:
 491:src/menu.c    ****   const int offset = smallp ? 256 : 0;
  99              		.loc 1 491 18 view .LVU15
 100 0010 B4BF     		ite	lt
 101 0012 01F11F03 		addlt	r3, r1, #31
 102 0016 0B46     		movge	r3, r1
 481:src/menu.c    ****   // dotcol is the number of the starting dot column
 103              		.loc 1 481 13 view .LVU16
 104 0018 0F46     		mov	r7, r1
 105              	.LVL4:
 490:src/menu.c    ****   xmax = ((dotcol/MENU_WIDTH)+1)*MENU_WIDTH;
 106              		.loc 1 490 3 is_stmt 1 view .LVU17
 491:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 107              		.loc 1 491 3 view .LVU18
 108              		.loc 1 495 15 is_stmt 0 view .LVU19
 109 001a 0021     		movs	r1, #0
 110              	.LVL5:
 111              		.loc 1 495 15 view .LVU20
 112 001c 1160     		str	r1, [r2]
 496:src/menu.c    **** #endif
 497:src/menu.c    ****   while (*str != '\0' && x <= xmax )  {
 113              		.loc 1 497 10 view .LVU21
 114 001e 019A     		ldr	r2, [sp, #4]
 115 0020 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 491:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 116              		.loc 1 491 30 view .LVU22
 117 0022 23F01F03 		bic	r3, r3, #31
 491:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 118              		.loc 1 491 8 view .LVU23
 119 0026 03F12009 		add	r9, r3, #32
 120              	.LVL6:
 492:src/menu.c    **** 
 121              		.loc 1 492 3 is_stmt 1 view .LVU24
 495:src/menu.c    **** #endif
ARM GAS  /tmp/ccGpw0cR.s 			page 12


 122              		.loc 1 495 3 view .LVU25
 123              		.loc 1 497 3 view .LVU26
 124              		.loc 1 497 9 view .LVU27
 125 002a 002D     		cmp	r5, #0
 126 002c 78D0     		beq	.L7
 127              		.loc 1 497 23 is_stmt 0 view .LVU28
 128 002e 4F45     		cmp	r7, r9
 129 0030 76DC     		bgt	.L7
 130              	.LBB39:
 498:src/menu.c    ****     int c;
 499:src/menu.c    ****     int width;
 500:src/menu.c    ****     unsigned char cmap[6];
 501:src/menu.c    **** 
 502:src/menu.c    ****     int real_width;
 503:src/menu.c    ****     int current_smallp;
 504:src/menu.c    **** 
 505:src/menu.c    ****     // A 007 byte followed by a mode byte changes the way the following character is printed.
 506:src/menu.c    ****     // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
 507:src/menu.c    ****     // Bits 6-5: 00 -> don't change font
 508:src/menu.c    ****     //           01 -> (not used)
 509:src/menu.c    ****     //           10 -> use big font
 510:src/menu.c    ****     //           11 -> use small font
 511:src/menu.c    ****     // Bits 4-0: character will be considered this wide
 512:src/menu.c    ****     if (str[0] == '\007') {
 131              		.loc 1 512 8 view .LVU29
 132 0032 072D     		cmp	r5, #7
 133              	.LBE39:
 487:src/menu.c    **** 
 134              		.loc 1 487 7 view .LVU30
 135 0034 4FF0FF04 		mov	r4, #255
 136              	.LVL7:
 137              	.LBB56:
 498:src/menu.c    ****     int c;
 138              		.loc 1 498 5 is_stmt 1 view .LVU31
 499:src/menu.c    ****     unsigned char cmap[6];
 139              		.loc 1 499 5 view .LVU32
 500:src/menu.c    **** 
 140              		.loc 1 500 5 view .LVU33
 502:src/menu.c    ****     int current_smallp;
 141              		.loc 1 502 5 view .LVU34
 503:src/menu.c    **** 
 142              		.loc 1 503 5 view .LVU35
 143              		.loc 1 512 5 view .LVU36
 513:src/menu.c    ****       width = str[1] & 0x1F;
 514:src/menu.c    ****       switch (str[1] & 0x60) {
 515:src/menu.c    ****       default:
 516:src/menu.c    ****       case 0x00:	current_smallp = smallp;
 517:src/menu.c    **** 	break;
 518:src/menu.c    ****       case 0x40:	current_smallp = 0;
 519:src/menu.c    **** 	break;
 520:src/menu.c    ****       case 0x60:	current_smallp = 1;
 144              		.loc 1 520 33 is_stmt 0 view .LVU37
 145 0038 4FF0010A 		mov	r10, #1
 512:src/menu.c    ****       width = str[1] & 0x1F;
 146              		.loc 1 512 8 view .LVU38
 147 003c 64D1     		bne	.L11
 148              	.LVL8:
ARM GAS  /tmp/ccGpw0cR.s 			page 13


 149              	.L39:
 513:src/menu.c    ****       width = str[1] & 0x1F;
 150              		.loc 1 513 7 is_stmt 1 view .LVU39
 513:src/menu.c    ****       width = str[1] & 0x1F;
 151              		.loc 1 513 18 is_stmt 0 view .LVU40
 152 003e 019B     		ldr	r3, [sp, #4]
 153 0040 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 154 0042 06F06003 		and	r3, r6, #96
 514:src/menu.c    ****       default:
 155              		.loc 1 514 7 view .LVU41
 156 0046 402B     		cmp	r3, #64
 513:src/menu.c    ****       width = str[1] & 0x1F;
 157              		.loc 1 513 13 view .LVU42
 158 0048 06F01F06 		and	r6, r6, #31
 159              	.LVL9:
 514:src/menu.c    ****       default:
 160              		.loc 1 514 7 is_stmt 1 view .LVU43
 161 004c 6CD0     		beq	.L34
 162 004e 602B     		cmp	r3, #96
 163 0050 6AD1     		bne	.L34
 164              		.loc 1 520 18 view .LVU44
 165              	.LVL10:
 521:src/menu.c    **** 	break;
 166              		.loc 1 521 2 view .LVU45
 522:src/menu.c    ****       }
 523:src/menu.c    ****       c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 167              		.loc 1 523 7 view .LVU46
 168              		.loc 1 523 11 is_stmt 0 view .LVU47
 169 0052 019B     		ldr	r3, [sp, #4]
 170 0054 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 520:src/menu.c    **** 	break;
 171              		.loc 1 520 33 view .LVU48
 172 0056 0123     		movs	r3, #1
 173 0058 0093     		str	r3, [sp]
 174 005a 00F58075 		add	r5, r0, #256
 175              	.LVL11:
 176              	.L15:
 524:src/menu.c    ****       str += 3;
 177              		.loc 1 524 7 is_stmt 1 view .LVU49
 525:src/menu.c    **** 
 526:src/menu.c    ****       real_width = charlengths(c);
 178              		.loc 1 526 20 is_stmt 0 view .LVU50
 179 005e 2846     		mov	r0, r5
 180 0060 FFF7FEFF 		bl	charlengths
 181              	.LVL12:
 524:src/menu.c    ****       str += 3;
 182              		.loc 1 524 11 view .LVU51
 183 0064 019B     		ldr	r3, [sp, #4]
 184 0066 0333     		adds	r3, r3, #3
 185 0068 0193     		str	r3, [sp, #4]
 186              	.LVL13:
 187              		.loc 1 526 7 is_stmt 1 view .LVU52
 527:src/menu.c    ****     } else {
 528:src/menu.c    ****       c = (unsigned char) *str++ + offset;
 529:src/menu.c    ****       real_width = width = charlengths(c);
 530:src/menu.c    ****       current_smallp = smallp;
 531:src/menu.c    ****     }
ARM GAS  /tmp/ccGpw0cR.s 			page 14


 532:src/menu.c    **** 
 533:src/menu.c    ****     if (x + real_width > xmax)
 188              		.loc 1 533 5 view .LVU53
 189              		.loc 1 533 11 is_stmt 0 view .LVU54
 190 006a C319     		adds	r3, r0, r7
 191              	.LVL14:
 192              		.loc 1 533 8 view .LVU55
 193 006c 9945     		cmp	r9, r3
 194 006e 57DB     		blt	.L7
 195              	.L40:
 534:src/menu.c    ****       break;
 535:src/menu.c    **** 
 536:src/menu.c    ****     if (posns_state != current_smallp) {
 196              		.loc 1 536 5 is_stmt 1 view .LVU56
 197              		.loc 1 536 8 is_stmt 0 view .LVU57
 198 0070 009B     		ldr	r3, [sp]
 199 0072 A342     		cmp	r3, r4
 537:src/menu.c    ****       findlengths(posns, current_smallp);
 200              		.loc 1 537 7 view .LVU58
 201 0074 07AB     		add	r3, sp, #28
 536:src/menu.c    ****       findlengths(posns, current_smallp);
 202              		.loc 1 536 8 view .LVU59
 203 0076 05D0     		beq	.L18
 204              		.loc 1 537 7 is_stmt 1 view .LVU60
 205 0078 1846     		mov	r0, r3
 206              	.LVL15:
 207              		.loc 1 537 7 is_stmt 0 view .LVU61
 208 007a 0099     		ldr	r1, [sp]
 209 007c 0393     		str	r3, [sp, #12]
 210 007e FFF7FEFF 		bl	findlengths
 211              	.LVL16:
 212 0082 039B     		ldr	r3, [sp, #12]
 538:src/menu.c    ****       posns_state = current_smallp;
 213              		.loc 1 538 7 is_stmt 1 view .LVU62
 214              	.LVL17:
 215              	.L18:
 539:src/menu.c    ****     }
 540:src/menu.c    ****     unpackchar(c, cmap, current_smallp, posns); // cmap contains a row of c in each element
 216              		.loc 1 540 5 view .LVU63
 217 0084 009A     		ldr	r2, [sp]
 218 0086 2846     		mov	r0, r5
 219 0088 05A9     		add	r1, sp, #20
 220 008a FFF7FEFF 		bl	unpackchar
 221              	.LVL18:
 541:src/menu.c    **** 
 542:src/menu.c    ****     for (i=0; i<6; i++) {// rows
 222              		.loc 1 542 5 view .LVU64
 223              		.loc 1 542 15 view .LVU65
 224 008e 029B     		ldr	r3, [sp, #8]
 225 0090 03EB4704 		add	r4, r3, r7, lsl #1
 226 0094 284B     		ldr	r3, .L41+4
 227 0096 0DF1140B 		add	fp, sp, #20
 228 009a 1C44     		add	r4, r4, r3
 540:src/menu.c    **** 
 229              		.loc 1 540 5 is_stmt 0 view .LVU66
 230 009c 4FF0050E 		mov	lr, #5
 231 00a0 A9EB0705 		sub	r5, r9, r7
ARM GAS  /tmp/ccGpw0cR.s 			page 15


 232              	.LVL19:
 233              	.L19:
 543:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 234              		.loc 1 543 17 is_stmt 1 view .LVU67
 235              		.loc 1 543 7 is_stmt 0 view .LVU68
 236 00a4 002E     		cmp	r6, #0
 237 00a6 1FDD     		ble	.L25
 544:src/menu.c    **** 	if (x+j >= xmax)
 238              		.loc 1 544 2 is_stmt 1 view .LVU69
 239              		.loc 1 544 5 is_stmt 0 view .LVU70
 240 00a8 B945     		cmp	r9, r7
 241 00aa 1DDD     		ble	.L25
 242              	.LBB40:
 243              	.LBB41:
 244              	.LBB42:
 245              	.LBB43:
 545:src/menu.c    **** 	  break;
 546:src/menu.c    **** 	mdot(x+j, 5-i, shifted, (cmap[i] & (1 << j))?1:0); // set or reset dot at col x+j, row i
 547:src/menu.c    ****       }
 548:src/menu.c    ****     }
 549:src/menu.c    ****     x += width;
 550:src/menu.c    ****   }
 551:src/menu.c    **** }
 552:src/menu.c    **** 
 553:src/menu.c    **** 
 554:src/menu.c    **** /* Determine the pixel length of the string if it were displayed.
 555:src/menu.c    **** 
 556:src/menu.c    **** int pixel_length(const char *s, int smallp)
 557:src/menu.c    **** {
 558:src/menu.c    ****   int len = 0;
 559:src/menu.c    ****   const int offset = smallp ? 256 : 0;
 560:src/menu.c    ****   while (*s != '\0') {
 561:src/menu.c    ****     if (s[0] == '\007') {
 562:src/menu.c    ****       len += s[1] & 0x1F;
 563:src/menu.c    ****       s += 3;
 564:src/menu.c    ****       continue;
 565:src/menu.c    ****     }
 566:src/menu.c    ****     len += charlengths( (unsigned char) *s++ + offset );
 567:src/menu.c    ****   }
 568:src/menu.c    ****   return len;
 569:src/menu.c    **** }
 570:src/menu.c    **** */
 571:src/menu.c    **** 
 572:src/menu.c    **** 
 573:src/menu.c    **** void mdot(int i, int j, int s, int on) { // Column i, row j, state on
 574:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 575:src/menu.c    ****   if (on) {
 576:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 577:src/menu.c    ****   }
 578:src/menu.c    ****   else {
 579:src/menu.c    ****     mdots[i][s] &= ~( 1 << j );
 246              		.loc 1 579 25 view .LVU71
 247 00ac 0AFA0EFC 		lsl	ip, r10, lr
 248              		.loc 1 579 17 view .LVU72
 249 00b0 4FFA8CFC 		sxtb	ip, ip
 250              	.LBE43:
 251              	.LBE42:
ARM GAS  /tmp/ccGpw0cR.s 			page 16


 252              	.LBE41:
 253              	.LBE40:
 546:src/menu.c    ****       }
 254              		.loc 1 546 31 view .LVU73
 255 00b4 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 256              	.LBB53:
 257              	.LBB50:
 258              	.LBB47:
 259              	.LBB44:
 260              		.loc 1 579 17 view .LVU74
 261 00b8 6FEA0C08 		mvn	r8, ip
 262              	.LBE44:
 263              	.LBE47:
 264              	.LBE50:
 265              	.LBE53:
 543:src/menu.c    **** 	if (x+j >= xmax)
 266              		.loc 1 543 13 view .LVU75
 267 00bc 0023     		movs	r3, #0
 268 00be 01E0     		b	.L20
 269              	.LVL20:
 270              	.L24:
 544:src/menu.c    **** 	  break;
 271              		.loc 1 544 5 view .LVU76
 272 00c0 9D42     		cmp	r5, r3
 273 00c2 11D0     		beq	.L25
 274              	.LVL21:
 275              	.L20:
 546:src/menu.c    ****       }
 276              		.loc 1 546 2 is_stmt 1 view .LVU77
 277              	.LBB54:
 278              	.LBI40:
 573:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 279              		.loc 1 573 6 view .LVU78
 280              	.LBB51:
 574:src/menu.c    ****   if (on) {
 281              		.loc 1 574 3 view .LVU79
 282              	.LBB48:
 283              	.LBI42:
 573:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 284              		.loc 1 573 6 view .LVU80
 285              	.LBB45:
 575:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 286              		.loc 1 575 3 view .LVU81
 287              	.LBE45:
 288              	.LBE48:
 574:src/menu.c    ****   if (on) {
 289              		.loc 1 574 6 is_stmt 0 view .LVU82
 290 00c4 DA19     		adds	r2, r3, r7
 291              	.LVL22:
 574:src/menu.c    ****   if (on) {
 292              		.loc 1 574 6 view .LVU83
 293 00c6 C72A     		cmp	r2, #199
 294              	.LBE51:
 295              	.LBE54:
 546:src/menu.c    ****       }
 296              		.loc 1 546 46 view .LVU84
 297 00c8 40FA03F1 		asr	r1, r0, r3
ARM GAS  /tmp/ccGpw0cR.s 			page 17


 298              	.LBB55:
 299              	.LBB52:
 574:src/menu.c    ****   if (on) {
 300              		.loc 1 574 6 view .LVU85
 301 00cc 09D8     		bhi	.L22
 302              	.LBB49:
 303              	.LBB46:
 576:src/menu.c    ****   }
 304              		.loc 1 576 5 is_stmt 1 view .LVU86
 305              		.loc 1 579 5 view .LVU87
 576:src/menu.c    ****   }
 306              		.loc 1 576 17 is_stmt 0 view .LVU88
 307 00ce 14F81320 		ldrb	r2, [r4, r3, lsl #1]	@ zero_extendqisi2
 308              	.LVL23:
 575:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 309              		.loc 1 575 6 view .LVU89
 310 00d2 C907     		lsls	r1, r1, #31
 576:src/menu.c    ****   }
 311              		.loc 1 576 17 view .LVU90
 312 00d4 4CBF     		ite	mi
 313 00d6 4CEA0202 		orrmi	r2, ip, r2
 314              		.loc 1 579 17 view .LVU91
 315 00da 08EA0202 		andpl	r2, r8, r2
 316 00de 04F81320 		strb	r2, [r4, r3, lsl #1]
 317              	.L22:
 318              	.LBE46:
 319              	.LBE49:
 320              	.LBE52:
 321              	.LBE55:
 544:src/menu.c    **** 	  break;
 322              		.loc 1 544 2 is_stmt 1 view .LVU92
 323              	.LVL24:
 543:src/menu.c    **** 	if (x+j >= xmax)
 324              		.loc 1 543 26 view .LVU93
 543:src/menu.c    **** 	if (x+j >= xmax)
 325              		.loc 1 543 27 is_stmt 0 view .LVU94
 326 00e2 0133     		adds	r3, r3, #1
 327              	.LVL25:
 543:src/menu.c    **** 	if (x+j >= xmax)
 328              		.loc 1 543 17 is_stmt 1 view .LVU95
 543:src/menu.c    **** 	if (x+j >= xmax)
 329              		.loc 1 543 7 is_stmt 0 view .LVU96
 330 00e4 B342     		cmp	r3, r6
 331 00e6 EBD1     		bne	.L24
 332              	.LVL26:
 333              	.L25:
 542:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 334              		.loc 1 542 20 is_stmt 1 view .LVU97
 542:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 335              		.loc 1 542 15 view .LVU98
 336 00e8 0EF1FF3E 		add	lr, lr, #-1
 542:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
 337              		.loc 1 542 5 is_stmt 0 view .LVU99
 338 00ec BEF1FF3F 		cmp	lr, #-1
 339 00f0 0BF1010B 		add	fp, fp, #1
 340              	.LVL27:
 542:src/menu.c    ****       for (j=0; j<width; j++) { // width is width of character
ARM GAS  /tmp/ccGpw0cR.s 			page 18


 341              		.loc 1 542 5 view .LVU100
 342 00f4 D6D1     		bne	.L19
 549:src/menu.c    ****   }
 343              		.loc 1 549 5 is_stmt 1 view .LVU101
 344              	.LBE56:
 497:src/menu.c    ****     int c;
 345              		.loc 1 497 10 is_stmt 0 view .LVU102
 346 00f6 019B     		ldr	r3, [sp, #4]
 347 00f8 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 348              	.LBB57:
 549:src/menu.c    ****   }
 349              		.loc 1 549 7 view .LVU103
 350 00fa 3744     		add	r7, r7, r6
 351              	.LVL28:
 549:src/menu.c    ****   }
 352              		.loc 1 549 7 view .LVU104
 353              	.LBE57:
 497:src/menu.c    ****     int c;
 354              		.loc 1 497 9 is_stmt 1 view .LVU105
 355 00fc 85B1     		cbz	r5, .L7
 497:src/menu.c    ****     int c;
 356              		.loc 1 497 23 is_stmt 0 view .LVU106
 357 00fe B945     		cmp	r9, r7
 358 0100 0EDB     		blt	.L7
 359              	.LBB58:
 512:src/menu.c    ****       width = str[1] & 0x1F;
 360              		.loc 1 512 8 view .LVU107
 361 0102 072D     		cmp	r5, #7
 362              	.LBE58:
 363 0104 009C     		ldr	r4, [sp]
 364              	.LBB59:
 498:src/menu.c    ****     int width;
 365              		.loc 1 498 5 is_stmt 1 view .LVU108
 499:src/menu.c    ****     unsigned char cmap[6];
 366              		.loc 1 499 5 view .LVU109
 500:src/menu.c    **** 
 367              		.loc 1 500 5 view .LVU110
 502:src/menu.c    ****     int current_smallp;
 368              		.loc 1 502 5 view .LVU111
 503:src/menu.c    **** 
 369              		.loc 1 503 5 view .LVU112
 512:src/menu.c    ****       width = str[1] & 0x1F;
 370              		.loc 1 512 5 view .LVU113
 512:src/menu.c    ****       width = str[1] & 0x1F;
 371              		.loc 1 512 8 is_stmt 0 view .LVU114
 372 0106 9AD0     		beq	.L39
 373              	.LVL29:
 374              	.L11:
 528:src/menu.c    ****       real_width = width = charlengths(c);
 375              		.loc 1 528 7 is_stmt 1 view .LVU115
 529:src/menu.c    ****       current_smallp = smallp;
 376              		.loc 1 529 28 is_stmt 0 view .LVU116
 377 0108 2846     		mov	r0, r5
 378 010a FFF7FEFF 		bl	charlengths
 379              	.LVL30:
 528:src/menu.c    ****       real_width = width = charlengths(c);
 380              		.loc 1 528 31 view .LVU117
ARM GAS  /tmp/ccGpw0cR.s 			page 19


 381 010e 019B     		ldr	r3, [sp, #4]
 382 0110 0133     		adds	r3, r3, #1
 383 0112 0193     		str	r3, [sp, #4]
 384              	.LVL31:
 529:src/menu.c    ****       current_smallp = smallp;
 385              		.loc 1 529 7 is_stmt 1 view .LVU118
 530:src/menu.c    ****     }
 386              		.loc 1 530 7 view .LVU119
 530:src/menu.c    ****     }
 387              		.loc 1 530 22 is_stmt 0 view .LVU120
 388 0114 0023     		movs	r3, #0
 389              	.LVL32:
 530:src/menu.c    ****     }
 390              		.loc 1 530 22 view .LVU121
 391 0116 0093     		str	r3, [sp]
 392              	.LVL33:
 533:src/menu.c    ****       break;
 393              		.loc 1 533 11 view .LVU122
 394 0118 C319     		adds	r3, r0, r7
 395              	.LVL34:
 533:src/menu.c    ****       break;
 396              		.loc 1 533 8 view .LVU123
 397 011a 9945     		cmp	r9, r3
 529:src/menu.c    ****       current_smallp = smallp;
 398              		.loc 1 529 28 view .LVU124
 399 011c 0646     		mov	r6, r0
 533:src/menu.c    ****       break;
 400              		.loc 1 533 5 is_stmt 1 view .LVU125
 533:src/menu.c    ****       break;
 401              		.loc 1 533 8 is_stmt 0 view .LVU126
 402 011e A7DA     		bge	.L40
 403              	.LVL35:
 404              	.L7:
 533:src/menu.c    ****       break;
 405              		.loc 1 533 8 view .LVU127
 406              	.LBE59:
 551:src/menu.c    **** 
 407              		.loc 1 551 1 view .LVU128
 408 0120 0DF5097D 		add	sp, sp, #548
 409              		.cfi_remember_state
 410              		.cfi_def_cfa_offset 36
 411              		@ sp needed
 412 0124 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 413              	.LVL36:
 414              	.L34:
 415              		.cfi_restore_state
 416              	.LBB60:
 523:src/menu.c    ****       str += 3;
 417              		.loc 1 523 7 is_stmt 1 view .LVU129
 523:src/menu.c    ****       str += 3;
 418              		.loc 1 523 11 is_stmt 0 view .LVU130
 419 0128 019B     		ldr	r3, [sp, #4]
 420 012a 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 516:src/menu.c    **** 	break;
 421              		.loc 1 516 33 view .LVU131
 422 012c 0023     		movs	r3, #0
 423 012e 0093     		str	r3, [sp]
ARM GAS  /tmp/ccGpw0cR.s 			page 20


 424 0130 95E7     		b	.L15
 425              	.L42:
 426 0132 00BF     		.align	2
 427              	.L41:
 428 0134 00000000 		.word	RectPolConv
 429 0138 00000000 		.word	.LANCHOR0
 430              	.LBE60:
 431              		.cfi_endproc
 432              	.LFE37:
 434              		.section	.rodata.disp_about.str1.4,"aMS",%progbits,1
 435              		.align	2
 436              	.LC5:
 437 0000 57697468 		.ascii	"With longer alpha display and top row,\000"
 437      206C6F6E 
 437      67657220 
 437      616C7068 
 437      61206469 
 438 0027 00       		.align	2
 439              	.LC6:
 440 0028 616E6420 		.ascii	"and some annunciators renamed.\000"
 440      736F6D65 
 440      20616E6E 
 440      756E6369 
 440      61746F72 
 441 0047 00       		.align	2
 442              	.LC7:
 443 0048 496E636C 		.ascii	"Includes printing, stopwatch,\000"
 443      75646573 
 443      20707269 
 443      6E74696E 
 443      672C2073 
 444 0066 0000     		.align	2
 445              	.LC8:
 446 0068 656E7472 		.ascii	"entry RPN, extended file handling,\000"
 446      79205250 
 446      4E2C2065 
 446      7874656E 
 446      64656420 
 447 008b 00       		.align	2
 448              	.LC9:
 449 008c 75736572 		.ascii	"user-defined menus, and\000"
 449      2D646566 
 449      696E6564 
 449      206D656E 
 449      75732C20 
 450              		.align	2
 451              	.LC10:
 452 00a4 636F6D70 		.ascii	"complex lock mode.\000"
 452      6C657820 
 452      6C6F636B 
 452      206D6F64 
 452      652E00
 453 00b7 00       		.align	2
 454              	.LC11:
 455 00b8 4E656974 		.ascii	"Neither provided by          \000"
 455      68657220 
 455      70726F76 
ARM GAS  /tmp/ccGpw0cR.s 			page 21


 455      69646564 
 455      20627920 
 456 00d6 0000     		.align	2
 457              	.LC12:
 458 00d8 6E6F7220 		.ascii	"nor supported by SwissMicros.\000"
 458      73757070 
 458      6F727465 
 458      64206279 
 458      20537769 
 459 00f6 0000     		.align	2
 460              	.LC13:
 461 00f8 20202020 		.ascii	"    Press EXIT key to continue...\000"
 461      50726573 
 461      73204558 
 461      4954206B 
 461      65792074 
 462 011a 0000     		.align	2
 463              	.LC4:
 464 011c 57502033 		.ascii	"WP 34S calculator for DM42: v     \000"
 464      34532063 
 464      616C6375 
 464      6C61746F 
 464      7220666F 
 465              		.section	.text.disp_about,"ax",%progbits
 466              		.align	1
 467              		.p2align 2,,3
 468              		.global	disp_about
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 472              		.fpu fpv4-sp-d16
 474              	disp_about:
 475              	.LFB5:
  75:src/menu.c    **** #ifdef C_VERSION
 476              		.loc 1 75 19 is_stmt 1 view -0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 40
 479              		@ frame_needed = 0, uses_anonymous_args = 0
  79:src/menu.c    **** #endif
 480              		.loc 1 79 3 view .LVU133
  75:src/menu.c    **** #ifdef C_VERSION
 481              		.loc 1 75 19 is_stmt 0 view .LVU134
 482 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 483              		.cfi_def_cfa_offset 24
 484              		.cfi_offset 4, -24
 485              		.cfi_offset 5, -20
 486              		.cfi_offset 6, -16
 487              		.cfi_offset 7, -12
 488              		.cfi_offset 8, -8
 489              		.cfi_offset 14, -4
  79:src/menu.c    **** #endif
 490              		.loc 1 79 8 view .LVU135
 491 0004 334E     		ldr	r6, .L45
  84:src/menu.c    **** 
 492              		.loc 1 84 3 view .LVU136
 493 0006 344C     		ldr	r4, .L45+4
  86:src/menu.c    ****   lcd_putsR(t24, title);
ARM GAS  /tmp/ccGpw0cR.s 			page 22


 494              		.loc 1 86 3 view .LVU137
 495 0008 DFF81081 		ldr	r8, .L45+72
  87:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 496              		.loc 1 87 3 view .LVU138
 497 000c 334F     		ldr	r7, .L45+8
  79:src/menu.c    **** #endif
 498              		.loc 1 79 8 view .LVU139
 499 000e 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
  75:src/menu.c    **** #ifdef C_VERSION
 500              		.loc 1 75 19 view .LVU140
 501 0010 8AB0     		sub	sp, sp, #40
 502              		.cfi_def_cfa_offset 64
  79:src/menu.c    **** #endif
 503              		.loc 1 79 8 view .LVU141
 504 0012 01AD     		add	r5, sp, #4
 505 0014 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 506 0016 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 507 0018 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 508 001a 3368     		ldr	r3, [r6]
 509 001c 25F8023B 		strh	r3, [r5], #2	@ movhi
  81:src/menu.c    **** 
 510              		.loc 1 81 3 view .LVU142
 511 0020 2F49     		ldr	r1, .L45+12
  79:src/menu.c    **** #endif
 512              		.loc 1 79 8 view .LVU143
 513 0022 1B0C     		lsrs	r3, r3, #16
  81:src/menu.c    **** 
 514              		.loc 1 81 3 view .LVU144
 515 0024 0422     		movs	r2, #4
 516 0026 0DF12100 		add	r0, sp, #33
  79:src/menu.c    **** #endif
 517              		.loc 1 79 8 view .LVU145
 518 002a 2B70     		strb	r3, [r5]
  81:src/menu.c    **** 
 519              		.loc 1 81 3 is_stmt 1 view .LVU146
 520 002c FFF7FEFF 		bl	xcopy
 521              	.LVL37:
  83:src/menu.c    ****   lcd_writeClr(t24);
 522              		.loc 1 83 3 view .LVU147
 523 0030 FFF7FEFF 		bl	clear_disp
 524              	.LVL38:
  84:src/menu.c    **** 
 525              		.loc 1 84 3 view .LVU148
 526 0034 2B4B     		ldr	r3, .L45+16
 527 0036 606B     		ldr	r0, [r4, #52]
 528 0038 9847     		blx	r3
 529              	.LVL39:
  86:src/menu.c    ****   lcd_putsR(t24, title);
 530              		.loc 1 86 3 view .LVU149
 531 003a 606B     		ldr	r0, [r4, #52]
 532 003c 0522     		movs	r2, #5
 533 003e 0021     		movs	r1, #0
 534 0040 C047     		blx	r8
 535              	.LVL40:
  87:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 536              		.loc 1 87 3 view .LVU150
  87:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
ARM GAS  /tmp/ccGpw0cR.s 			page 23


 537              		.loc 1 87 3 view .LVU151
 538 0042 606B     		ldr	r0, [r4, #52]
 539 0044 0126     		movs	r6, #1
 540 0046 4674     		strb	r6, [r0, #17]
  87:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 541              		.loc 1 87 3 view .LVU152
 542 0048 01A9     		add	r1, sp, #4
 543 004a B847     		blx	r7
 544              	.LVL41:
  87:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 545              		.loc 1 87 3 view .LVU153
 546 004c 636B     		ldr	r3, [r4, #52]
 547 004e 0025     		movs	r5, #0
 548 0050 5D74     		strb	r5, [r3, #17]
  87:src/menu.c    ****   lcd_setXY(t20, t24->x, t24->y);
 549              		.loc 1 87 3 view .LVU154
  88:src/menu.c    ****   t20->newln = 1;
 550              		.loc 1 88 3 view .LVU155
 551 0052 B3F90620 		ldrsh	r2, [r3, #6]
 552 0056 B3F90410 		ldrsh	r1, [r3, #4]
 553 005a 206B     		ldr	r0, [r4, #48]
 554 005c C047     		blx	r8
 555              	.LVL42:
  89:src/menu.c    ****   t20->inv = 0;
 556              		.loc 1 89 3 view .LVU156
 557 005e 206B     		ldr	r0, [r4, #48]
  92:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 558              		.loc 1 92 3 is_stmt 0 view .LVU157
 559 0060 2149     		ldr	r1, .L45+20
  89:src/menu.c    ****   t20->inv = 0;
 560              		.loc 1 89 14 view .LVU158
 561 0062 0675     		strb	r6, [r0, #20]
  90:src/menu.c    **** #ifdef TOP_ROW
 562              		.loc 1 90 3 is_stmt 1 view .LVU159
  90:src/menu.c    **** #ifdef TOP_ROW
 563              		.loc 1 90 12 is_stmt 0 view .LVU160
 564 0064 4574     		strb	r5, [r0, #17]
  92:src/menu.c    **** #elif defined(BIGGER_DISPLAY)
 565              		.loc 1 92 3 is_stmt 1 view .LVU161
 566 0066 B847     		blx	r7
 567              	.LVL43:
  98:src/menu.c    ****   lcd_puts(t20, "Includes printing, stopwatch,");
 568              		.loc 1 98 3 view .LVU162
 569 0068 206B     		ldr	r0, [r4, #48]
 570 006a 2049     		ldr	r1, .L45+24
 571 006c B847     		blx	r7
 572              	.LVL44:
  99:src/menu.c    ****   lcd_puts(t20, "entry RPN, extended file handling,");
 573              		.loc 1 99 3 view .LVU163
 574 006e 206B     		ldr	r0, [r4, #48]
 575 0070 1F49     		ldr	r1, .L45+28
 576 0072 B847     		blx	r7
 577              	.LVL45:
 100:src/menu.c    ****   lcd_puts(t20, "user-defined menus, and");
 578              		.loc 1 100 3 view .LVU164
 579 0074 206B     		ldr	r0, [r4, #48]
 580 0076 1F49     		ldr	r1, .L45+32
ARM GAS  /tmp/ccGpw0cR.s 			page 24


 581 0078 B847     		blx	r7
 582              	.LVL46:
 101:src/menu.c    ****   lcd_puts(t20, "complex lock mode.");
 583              		.loc 1 101 3 view .LVU165
 584 007a 206B     		ldr	r0, [r4, #48]
 585 007c 1E49     		ldr	r1, .L45+36
 586 007e B847     		blx	r7
 587              	.LVL47:
 102:src/menu.c    **** 
 588              		.loc 1 102 3 view .LVU166
 589 0080 206B     		ldr	r0, [r4, #48]
 590 0082 1E49     		ldr	r1, .L45+40
 591 0084 B847     		blx	r7
 592              	.LVL48:
 104:src/menu.c    **** 
 593              		.loc 1 104 3 view .LVU167
 594 0086 206B     		ldr	r0, [r4, #48]
 107:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 595              		.loc 1 107 3 is_stmt 0 view .LVU168
 596 0088 1D49     		ldr	r1, .L45+44
 104:src/menu.c    **** 
 597              		.loc 1 104 10 view .LVU169
 598 008a C388     		ldrh	r3, [r0, #6]
 106:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 599              		.loc 1 106 15 view .LVU170
 600 008c 8674     		strb	r6, [r0, #18]
 104:src/menu.c    **** 
 601              		.loc 1 104 10 view .LVU171
 602 008e 0533     		adds	r3, r3, #5
 603 0090 C380     		strh	r3, [r0, #6]	@ movhi
 106:src/menu.c    ****   lcd_putsR(t20, "Neither provided by          ");
 604              		.loc 1 106 3 is_stmt 1 view .LVU172
 107:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 605              		.loc 1 107 3 view .LVU173
 107:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 606              		.loc 1 107 3 view .LVU174
 107:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 607              		.loc 1 107 3 view .LVU175
 608 0092 4674     		strb	r6, [r0, #17]
 609 0094 B847     		blx	r7
 610              	.LVL49:
 107:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 611              		.loc 1 107 3 view .LVU176
 612 0096 206B     		ldr	r0, [r4, #48]
 107:src/menu.c    ****   lcd_putsR(t20, "nor supported by SwissMicros.");
 613              		.loc 1 107 3 view .LVU177
 108:src/menu.c    ****   t20->bgfill = 0;
 614              		.loc 1 108 3 view .LVU178
 108:src/menu.c    ****   t20->bgfill = 0;
 615              		.loc 1 108 3 view .LVU179
 616 0098 1A49     		ldr	r1, .L45+48
 617 009a 4674     		strb	r6, [r0, #17]
 108:src/menu.c    ****   t20->bgfill = 0;
 618              		.loc 1 108 3 view .LVU180
 619 009c B847     		blx	r7
 620              	.LVL50:
 108:src/menu.c    ****   t20->bgfill = 0;
ARM GAS  /tmp/ccGpw0cR.s 			page 25


 621              		.loc 1 108 3 view .LVU181
 622 009e 236B     		ldr	r3, [r4, #48]
 112:src/menu.c    ****   t24->x = 20;
 623              		.loc 1 112 20 is_stmt 0 view .LVU182
 624 00a0 194A     		ldr	r2, .L45+52
 108:src/menu.c    ****   t20->bgfill = 0;
 625              		.loc 1 108 3 view .LVU183
 626 00a2 5D74     		strb	r5, [r3, #17]
 108:src/menu.c    ****   t20->bgfill = 0;
 627              		.loc 1 108 3 is_stmt 1 view .LVU184
 109:src/menu.c    ****   t20->newln = 0;
 628              		.loc 1 109 3 view .LVU185
 109:src/menu.c    ****   t20->newln = 0;
 629              		.loc 1 109 15 is_stmt 0 view .LVU186
 630 00a4 9D74     		strb	r5, [r3, #18]
 110:src/menu.c    ****   
 631              		.loc 1 110 3 is_stmt 1 view .LVU187
 110:src/menu.c    ****   
 632              		.loc 1 110 14 is_stmt 0 view .LVU188
 633 00a6 1D75     		strb	r5, [r3, #20]
 112:src/menu.c    ****   t24->x = 20;
 634              		.loc 1 112 3 is_stmt 1 view .LVU189
 112:src/menu.c    ****   t24->x = 20;
 635              		.loc 1 112 20 is_stmt 0 view .LVU190
 636 00a8 606B     		ldr	r0, [r4, #52]
 637 00aa 9047     		blx	r2
 638              	.LVL51:
 112:src/menu.c    ****   t24->x = 20;
 639              		.loc 1 112 3 view .LVU191
 640 00ac 636B     		ldr	r3, [r4, #52]
 114:src/menu.c    **** 
 641              		.loc 1 114 3 view .LVU192
 642 00ae 174A     		ldr	r2, .L45+56
 643 00b0 5E74     		strb	r6, [r3, #17]
 112:src/menu.c    ****   t24->x = 20;
 644              		.loc 1 112 39 view .LVU193
 645 00b2 C0F1EB00 		rsb	r0, r0, #235
 113:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 646              		.loc 1 113 10 view .LVU194
 647 00b6 1421     		movs	r1, #20
 112:src/menu.c    ****   t24->x = 20;
 648              		.loc 1 112 10 view .LVU195
 649 00b8 D880     		strh	r0, [r3, #6]	@ movhi
 113:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 650              		.loc 1 113 3 is_stmt 1 view .LVU196
 113:src/menu.c    ****   lcd_printR(t24, "    Press EXIT key to continue...");
 651              		.loc 1 113 10 is_stmt 0 view .LVU197
 652 00ba 9980     		strh	r1, [r3, #4]	@ movhi
 114:src/menu.c    **** 
 653              		.loc 1 114 3 is_stmt 1 view .LVU198
 114:src/menu.c    **** 
 654              		.loc 1 114 3 view .LVU199
 114:src/menu.c    **** 
 655              		.loc 1 114 3 view .LVU200
 656 00bc 1846     		mov	r0, r3
 657 00be 1449     		ldr	r1, .L45+60
 658 00c0 9047     		blx	r2
ARM GAS  /tmp/ccGpw0cR.s 			page 26


 659              	.LVL52:
 114:src/menu.c    **** 
 660              		.loc 1 114 3 view .LVU201
 661 00c2 626B     		ldr	r2, [r4, #52]
 116:src/menu.c    **** 
 662              		.loc 1 116 3 is_stmt 0 view .LVU202
 663 00c4 134B     		ldr	r3, .L45+64
 114:src/menu.c    **** 
 664              		.loc 1 114 3 view .LVU203
 665 00c6 5574     		strb	r5, [r2, #17]
 114:src/menu.c    **** 
 666              		.loc 1 114 3 is_stmt 1 view .LVU204
 116:src/menu.c    **** 
 667              		.loc 1 116 3 view .LVU205
 668 00c8 9847     		blx	r3
 669              	.LVL53:
 118:src/menu.c    **** }
 670              		.loc 1 118 3 view .LVU206
 671 00ca 134B     		ldr	r3, .L45+68
 672 00cc 9847     		blx	r3
 673              	.LVL54:
 119:src/menu.c    **** 
 674              		.loc 1 119 1 is_stmt 0 view .LVU207
 675 00ce 0AB0     		add	sp, sp, #40
 676              		.cfi_def_cfa_offset 24
 677              		@ sp needed
 678 00d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 679              	.L46:
 680              		.align	2
 681              	.L45:
 682 00d4 1C010000 		.word	.LC4
 683 00d8 00200010 		.word	268443648
 684 00dc 7D020008 		.word	134218365
 685 00e0 00000000 		.word	SvnRevision
 686 00e4 65020008 		.word	134218341
 687 00e8 00000000 		.word	.LC5
 688 00ec 28000000 		.word	.LC6
 689 00f0 48000000 		.word	.LC7
 690 00f4 68000000 		.word	.LC8
 691 00f8 8C000000 		.word	.LC9
 692 00fc A4000000 		.word	.LC10
 693 0100 B8000000 		.word	.LC11
 694 0104 D8000000 		.word	.LC12
 695 0108 71020008 		.word	134218353
 696 010c B1020008 		.word	134218417
 697 0110 F8000000 		.word	.LC13
 698 0114 31020008 		.word	134218289
 699 0118 99030008 		.word	134218649
 700 011c 6D020008 		.word	134218349
 701              		.cfi_endproc
 702              	.LFE5:
 704              		.section	.text.run_menu_item,"ax",%progbits
 705              		.align	1
 706              		.p2align 2,,3
 707              		.global	run_menu_item
 708              		.syntax unified
 709              		.thumb
ARM GAS  /tmp/ccGpw0cR.s 			page 27


 710              		.thumb_func
 711              		.fpu fpv4-sp-d16
 713              	run_menu_item:
 714              	.LVL55:
 715              	.LFB3:
  44:src/menu.c    ****   int ret = 0;
 716              		.loc 1 44 36 is_stmt 1 view -0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
  45:src/menu.c    **** 
 720              		.loc 1 45 3 view .LVU209
  47:src/menu.c    ****     case MI_ABOUT_PGM:
 721              		.loc 1 47 3 view .LVU210
 722 0000 0B28     		cmp	r0, #11
 723 0002 04D1     		bne	.L49
  49:src/menu.c    ****       break;
 724              		.loc 1 49 7 view .LVU211
  44:src/menu.c    ****   int ret = 0;
 725              		.loc 1 44 36 is_stmt 0 view .LVU212
 726 0004 08B5     		push	{r3, lr}
 727              		.cfi_def_cfa_offset 8
 728              		.cfi_offset 3, -8
 729              		.cfi_offset 14, -4
  49:src/menu.c    ****       break;
 730              		.loc 1 49 7 view .LVU213
 731 0006 FFF7FEFF 		bl	disp_about
 732              	.LVL56:
  50:src/menu.c    **** 
 733              		.loc 1 50 7 is_stmt 1 view .LVU214
  45:src/menu.c    **** 
 734              		.loc 1 45 7 is_stmt 0 view .LVU215
 735 000a 0020     		movs	r0, #0
  58:src/menu.c    **** 
 736              		.loc 1 58 1 view .LVU216
 737 000c 08BD     		pop	{r3, pc}
 738              	.LVL57:
 739              	.L49:
 740              		.cfi_def_cfa_offset 0
 741              		.cfi_restore 3
 742              		.cfi_restore 14
  53:src/menu.c    ****       break;
 743              		.loc 1 53 11 view .LVU217
 744 000e 4FF0FF30 		mov	r0, #-1
 745              	.LVL58:
  57:src/menu.c    **** }
 746              		.loc 1 57 3 is_stmt 1 view .LVU218
  58:src/menu.c    **** 
 747              		.loc 1 58 1 is_stmt 0 view .LVU219
 748 0012 7047     		bx	lr
 749              		.cfi_endproc
 750              	.LFE3:
 752              		.section	.text.set_menu,"ax",%progbits
 753              		.align	1
 754              		.p2align 2,,3
 755              		.global	set_menu
 756              		.syntax unified
ARM GAS  /tmp/ccGpw0cR.s 			page 28


 757              		.thumb
 758              		.thumb_func
 759              		.fpu fpv4-sp-d16
 761              	set_menu:
 762              	.LVL59:
 763              	.LFB6:
 125:src/menu.c    ****   menu_name m = current_menu;
 764              		.loc 1 125 38 is_stmt 1 view -0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 0
 767              		@ frame_needed = 0, uses_anonymous_args = 0
 768              		@ link register save eliminated.
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 769              		.loc 1 126 3 view .LVU221
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 770              		.loc 1 126 13 is_stmt 0 view .LVU222
 771 0000 0A4A     		ldr	r2, .L66
 772 0002 92F90030 		ldrsb	r3, [r2]
 773              	.LVL60:
 127:src/menu.c    ****     current_menu = default_menu;
 774              		.loc 1 127 3 is_stmt 1 view .LVU223
 127:src/menu.c    ****     current_menu = default_menu;
 775              		.loc 1 127 6 is_stmt 0 view .LVU224
 776 0006 8342     		cmp	r3, r0
 777 0008 0CD0     		beq	.L65
 130:src/menu.c    ****     current_menu = last_menu;
 778              		.loc 1 130 8 is_stmt 1 view .LVU225
 130:src/menu.c    ****     current_menu = last_menu;
 779              		.loc 1 130 11 is_stmt 0 view .LVU226
 780 000a 411C     		adds	r1, r0, #1
 131:src/menu.c    ****   }
 781              		.loc 1 131 5 is_stmt 1 view .LVU227
 131:src/menu.c    ****   }
 782              		.loc 1 131 18 is_stmt 0 view .LVU228
 783 000c 09BF     		itett	eq
 784 000e 0849     		ldreq	r1, .L66+4
 134:src/menu.c    ****   }
 785              		.loc 1 134 18 view .LVU229
 786 0010 1070     		strbne	r0, [r2]
 131:src/menu.c    ****   }
 787              		.loc 1 131 18 view .LVU230
 788 0012 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 789 0014 1170     		strbeq	r1, [r2]
 134:src/menu.c    ****   }
 790              		.loc 1 134 5 is_stmt 1 view .LVU231
 791              	.L56:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 792              		.loc 1 136 3 view .LVU232
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 793              		.loc 1 136 6 is_stmt 0 view .LVU233
 794 0016 092B     		cmp	r3, #9
 795 0018 03D0     		beq	.L54
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 796              		.loc 1 136 23 discriminator 1 view .LVU234
 797 001a 102B     		cmp	r3, #16
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 798              		.loc 1 136 43 is_stmt 1 discriminator 1 view .LVU235
ARM GAS  /tmp/ccGpw0cR.s 			page 29


 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 799              		.loc 1 136 53 is_stmt 0 discriminator 1 view .LVU236
 800 001c 1CBF     		itt	ne
 801 001e 044A     		ldrne	r2, .L66+4
 802 0020 1370     		strbne	r3, [r2]
 803              	.L54:
 138:src/menu.c    **** 
 804              		.loc 1 138 1 view .LVU237
 805 0022 7047     		bx	lr
 806              	.L65:
 128:src/menu.c    ****   }
 807              		.loc 1 128 5 is_stmt 1 view .LVU238
 128:src/menu.c    ****   }
 808              		.loc 1 128 18 is_stmt 0 view .LVU239
 809 0024 0349     		ldr	r1, .L66+8
 810 0026 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 811 0028 1170     		strb	r1, [r2]
 812 002a F4E7     		b	.L56
 813              	.L67:
 814              		.align	2
 815              	.L66:
 816 002c 00000000 		.word	.LANCHOR1
 817 0030 00000000 		.word	.LANCHOR3
 818 0034 00000000 		.word	.LANCHOR2
 819              		.cfi_endproc
 820              	.LFE6:
 822              		.section	.text.set_default_menu,"ax",%progbits
 823              		.align	1
 824              		.p2align 2,,3
 825              		.global	set_default_menu
 826              		.syntax unified
 827              		.thumb
 828              		.thumb_func
 829              		.fpu fpv4-sp-d16
 831              	set_default_menu:
 832              	.LFB7:
 140:src/menu.c    ****   set_menu (default_menu);
 833              		.loc 1 140 26 is_stmt 1 view -0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 0
 836              		@ frame_needed = 0, uses_anonymous_args = 0
 837              		@ link register save eliminated.
 141:src/menu.c    **** }
 838              		.loc 1 141 3 view .LVU241
 839 0000 0A4B     		ldr	r3, .L80
 840              	.LBB61:
 841              	.LBB62:
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 842              		.loc 1 126 13 is_stmt 0 view .LVU242
 843 0002 0B49     		ldr	r1, .L80+4
 844              	.LBE62:
 845              	.LBE61:
 141:src/menu.c    **** }
 846              		.loc 1 141 3 view .LVU243
 847 0004 93F90020 		ldrsb	r2, [r3]
 848              	.LVL61:
 849              	.LBB65:
ARM GAS  /tmp/ccGpw0cR.s 			page 30


 850              	.LBI61:
 125:src/menu.c    ****   menu_name m = current_menu;
 851              		.loc 1 125 6 is_stmt 1 view .LVU244
 852              	.LBB63:
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 853              		.loc 1 126 3 view .LVU245
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 854              		.loc 1 126 13 is_stmt 0 view .LVU246
 855 0008 91F90030 		ldrsb	r3, [r1]
 856              	.LVL62:
 127:src/menu.c    ****     current_menu = default_menu;
 857              		.loc 1 127 3 is_stmt 1 view .LVU247
 127:src/menu.c    ****     current_menu = default_menu;
 858              		.loc 1 127 6 is_stmt 0 view .LVU248
 859 000c 9A42     		cmp	r2, r3
 860 000e 0BD0     		beq	.L79
 130:src/menu.c    ****     current_menu = last_menu;
 861              		.loc 1 130 8 is_stmt 1 view .LVU249
 130:src/menu.c    ****     current_menu = last_menu;
 862              		.loc 1 130 11 is_stmt 0 view .LVU250
 863 0010 501C     		adds	r0, r2, #1
 131:src/menu.c    ****   }
 864              		.loc 1 131 5 is_stmt 1 view .LVU251
 131:src/menu.c    ****   }
 865              		.loc 1 131 18 is_stmt 0 view .LVU252
 866 0012 04BF     		itt	eq
 867 0014 074A     		ldreq	r2, .L80+8
 868              	.LVL63:
 131:src/menu.c    ****   }
 869              		.loc 1 131 18 view .LVU253
 870 0016 1278     		ldrbeq	r2, [r2]	@ zero_extendqisi2
 134:src/menu.c    ****   }
 871              		.loc 1 134 5 is_stmt 1 view .LVU254
 134:src/menu.c    ****   }
 872              		.loc 1 134 18 is_stmt 0 view .LVU255
 873 0018 0A70     		strb	r2, [r1]
 874              	.LVL64:
 875              	.L70:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 876              		.loc 1 136 3 is_stmt 1 view .LVU256
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 877              		.loc 1 136 6 is_stmt 0 view .LVU257
 878 001a 092B     		cmp	r3, #9
 879 001c 03D0     		beq	.L68
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 880              		.loc 1 136 23 view .LVU258
 881 001e 102B     		cmp	r3, #16
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 882              		.loc 1 136 43 is_stmt 1 view .LVU259
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 883              		.loc 1 136 53 is_stmt 0 view .LVU260
 884 0020 1CBF     		itt	ne
 885 0022 044A     		ldrne	r2, .L80+8
 886 0024 1370     		strbne	r3, [r2]
 887              	.LVL65:
 888              	.L68:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
ARM GAS  /tmp/ccGpw0cR.s 			page 31


 889              		.loc 1 136 53 view .LVU261
 890              	.LBE63:
 891              	.LBE65:
 142:src/menu.c    **** 
 892              		.loc 1 142 1 view .LVU262
 893 0026 7047     		bx	lr
 894              	.LVL66:
 895              	.L79:
 896              	.LBB66:
 897              	.LBB64:
 128:src/menu.c    ****   }
 898              		.loc 1 128 5 is_stmt 1 view .LVU263
 128:src/menu.c    ****   }
 899              		.loc 1 128 18 is_stmt 0 view .LVU264
 900 0028 0B70     		strb	r3, [r1]
 901 002a F6E7     		b	.L70
 902              	.L81:
 903              		.align	2
 904              	.L80:
 905 002c 00000000 		.word	.LANCHOR2
 906 0030 00000000 		.word	.LANCHOR1
 907 0034 00000000 		.word	.LANCHOR3
 908              	.LBE64:
 909              	.LBE66:
 910              		.cfi_endproc
 911              	.LFE7:
 913              		.section	.text.toggle_default_menu,"ax",%progbits
 914              		.align	1
 915              		.p2align 2,,3
 916              		.global	toggle_default_menu
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu fpv4-sp-d16
 922              	toggle_default_menu:
 923              	.LFB8:
 144:src/menu.c    ****   if (current_menu == M_Blank) {
 924              		.loc 1 144 29 is_stmt 1 view -0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928              		@ link register save eliminated.
 145:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 929              		.loc 1 145 3 view .LVU266
 145:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 930              		.loc 1 145 20 is_stmt 0 view .LVU267
 931 0000 104A     		ldr	r2, .L98
 146:src/menu.c    ****     return;
 932              		.loc 1 146 33 view .LVU268
 933 0002 1149     		ldr	r1, .L98+4
 145:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 934              		.loc 1 145 20 view .LVU269
 935 0004 92F90030 		ldrsb	r3, [r2]
 145:src/menu.c    ****     current_menu = default_menu = M_Blank2;
 936              		.loc 1 145 6 view .LVU270
 937 0008 ABB1     		cbz	r3, .L95
 149:src/menu.c    ****     current_menu = default_menu = M_Blank; 
ARM GAS  /tmp/ccGpw0cR.s 			page 32


 938              		.loc 1 149 8 is_stmt 1 view .LVU271
 149:src/menu.c    ****     current_menu = default_menu = M_Blank; 
 939              		.loc 1 149 11 is_stmt 0 view .LVU272
 940 000a 0F2B     		cmp	r3, #15
 941 000c 0FD0     		beq	.L96
 153:src/menu.c    ****   }
 942              		.loc 1 153 5 is_stmt 1 view .LVU273
 943              	.LBB67:
 944              	.LBI67:
 140:src/menu.c    ****   set_menu (default_menu);
 945              		.loc 1 140 6 view .LVU274
 946              	.LBB68:
 141:src/menu.c    **** }
 947              		.loc 1 141 3 view .LVU275
 948 000e 91F90010 		ldrsb	r1, [r1]
 949              	.LVL67:
 950              	.LBB69:
 951              	.LBI69:
 125:src/menu.c    ****   menu_name m = current_menu;
 952              		.loc 1 125 6 view .LVU276
 953              	.LBB70:
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 954              		.loc 1 126 3 view .LVU277
 127:src/menu.c    ****     current_menu = default_menu;
 955              		.loc 1 127 3 view .LVU278
 127:src/menu.c    ****     current_menu = default_menu;
 956              		.loc 1 127 6 is_stmt 0 view .LVU279
 957 0012 8B42     		cmp	r3, r1
 958 0014 13D0     		beq	.L97
 130:src/menu.c    ****     current_menu = last_menu;
 959              		.loc 1 130 8 is_stmt 1 view .LVU280
 130:src/menu.c    ****     current_menu = last_menu;
 960              		.loc 1 130 11 is_stmt 0 view .LVU281
 961 0016 481C     		adds	r0, r1, #1
 131:src/menu.c    ****   }
 962              		.loc 1 131 5 is_stmt 1 view .LVU282
 131:src/menu.c    ****   }
 963              		.loc 1 131 18 is_stmt 0 view .LVU283
 964 0018 04BF     		itt	eq
 965 001a 0C49     		ldreq	r1, .L98+8
 966              	.LVL68:
 131:src/menu.c    ****   }
 967              		.loc 1 131 18 view .LVU284
 968 001c 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 134:src/menu.c    ****   }
 969              		.loc 1 134 5 is_stmt 1 view .LVU285
 134:src/menu.c    ****   }
 970              		.loc 1 134 18 is_stmt 0 view .LVU286
 971 001e 1170     		strb	r1, [r2]
 972              	.LVL69:
 973              	.L87:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 974              		.loc 1 136 3 is_stmt 1 view .LVU287
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 975              		.loc 1 136 6 is_stmt 0 view .LVU288
 976 0020 092B     		cmp	r3, #9
 977 0022 03D0     		beq	.L82
ARM GAS  /tmp/ccGpw0cR.s 			page 33


 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 978              		.loc 1 136 23 view .LVU289
 979 0024 102B     		cmp	r3, #16
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 980              		.loc 1 136 43 is_stmt 1 view .LVU290
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 981              		.loc 1 136 53 is_stmt 0 view .LVU291
 982 0026 1CBF     		itt	ne
 983 0028 084A     		ldrne	r2, .L98+8
 984 002a 1370     		strbne	r3, [r2]
 985              	.LVL70:
 986              	.L82:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 987              		.loc 1 136 53 view .LVU292
 988              	.LBE70:
 989              	.LBE69:
 990              	.LBE68:
 991              	.LBE67:
 155:src/menu.c    **** 
 992              		.loc 1 155 1 view .LVU293
 993 002c 7047     		bx	lr
 994              	.L96:
 150:src/menu.c    ****   }
 995              		.loc 1 150 5 is_stmt 1 view .LVU294
 150:src/menu.c    ****   }
 996              		.loc 1 150 33 is_stmt 0 view .LVU295
 997 002e 0023     		movs	r3, #0
 998 0030 0B70     		strb	r3, [r1]
 150:src/menu.c    ****   }
 999              		.loc 1 150 18 view .LVU296
 1000 0032 1370     		strb	r3, [r2]
 1001 0034 7047     		bx	lr
 1002              	.L95:
 146:src/menu.c    ****     return;
 1003              		.loc 1 146 5 is_stmt 1 view .LVU297
 146:src/menu.c    ****     return;
 1004              		.loc 1 146 33 is_stmt 0 view .LVU298
 1005 0036 0F23     		movs	r3, #15
 1006 0038 0B70     		strb	r3, [r1]
 146:src/menu.c    ****     return;
 1007              		.loc 1 146 18 view .LVU299
 1008 003a 1370     		strb	r3, [r2]
 147:src/menu.c    ****   }
 1009              		.loc 1 147 5 is_stmt 1 view .LVU300
 1010 003c 7047     		bx	lr
 1011              	.LVL71:
 1012              	.L97:
 1013              	.LBB74:
 1014              	.LBB73:
 1015              	.LBB72:
 1016              	.LBB71:
 128:src/menu.c    ****   }
 1017              		.loc 1 128 5 view .LVU301
 128:src/menu.c    ****   }
 1018              		.loc 1 128 18 is_stmt 0 view .LVU302
 1019 003e 1370     		strb	r3, [r2]
 1020 0040 EEE7     		b	.L87
ARM GAS  /tmp/ccGpw0cR.s 			page 34


 1021              	.L99:
 1022 0042 00BF     		.align	2
 1023              	.L98:
 1024 0044 00000000 		.word	.LANCHOR1
 1025 0048 00000000 		.word	.LANCHOR2
 1026 004c 00000000 		.word	.LANCHOR3
 1027              	.LBE71:
 1028              	.LBE72:
 1029              	.LBE73:
 1030              	.LBE74:
 1031              		.cfi_endproc
 1032              	.LFE8:
 1034              		.section	.text.get_menu,"ax",%progbits
 1035              		.align	1
 1036              		.p2align 2,,3
 1037              		.global	get_menu
 1038              		.syntax unified
 1039              		.thumb
 1040              		.thumb_func
 1041              		.fpu fpv4-sp-d16
 1043              	get_menu:
 1044              	.LFB9:
 157:src/menu.c    ****   return current_menu;
 1045              		.loc 1 157 23 is_stmt 1 view -0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 0
 1048              		@ frame_needed = 0, uses_anonymous_args = 0
 1049              		@ link register save eliminated.
 158:src/menu.c    **** }
 1050              		.loc 1 158 3 view .LVU304
 158:src/menu.c    **** }
 1051              		.loc 1 158 10 is_stmt 0 view .LVU305
 1052 0000 014B     		ldr	r3, .L101
 159:src/menu.c    **** 
 1053              		.loc 1 159 1 view .LVU306
 1054 0002 93F90000 		ldrsb	r0, [r3]
 1055 0006 7047     		bx	lr
 1056              	.L102:
 1057              		.align	2
 1058              	.L101:
 1059 0008 00000000 		.word	.LANCHOR1
 1060              		.cfi_endproc
 1061              	.LFE9:
 1063              		.section	.text.get_last_menu,"ax",%progbits
 1064              		.align	1
 1065              		.p2align 2,,3
 1066              		.global	get_last_menu
 1067              		.syntax unified
 1068              		.thumb
 1069              		.thumb_func
 1070              		.fpu fpv4-sp-d16
 1072              	get_last_menu:
 1073              	.LFB10:
 161:src/menu.c    ****   return last_menu;
 1074              		.loc 1 161 28 is_stmt 1 view -0
 1075              		.cfi_startproc
 1076              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccGpw0cR.s 			page 35


 1077              		@ frame_needed = 0, uses_anonymous_args = 0
 1078              		@ link register save eliminated.
 162:src/menu.c    **** }
 1079              		.loc 1 162 3 view .LVU308
 162:src/menu.c    **** }
 1080              		.loc 1 162 10 is_stmt 0 view .LVU309
 1081 0000 014B     		ldr	r3, .L104
 163:src/menu.c    **** 
 1082              		.loc 1 163 1 view .LVU310
 1083 0002 93F90000 		ldrsb	r0, [r3]
 1084 0006 7047     		bx	lr
 1085              	.L105:
 1086              		.align	2
 1087              	.L104:
 1088 0008 00000000 		.word	.LANCHOR3
 1089              		.cfi_endproc
 1090              	.LFE10:
 1092              		.section	.text.set_last_menu,"ax",%progbits
 1093              		.align	1
 1094              		.p2align 2,,3
 1095              		.global	set_last_menu
 1096              		.syntax unified
 1097              		.thumb
 1098              		.thumb_func
 1099              		.fpu fpv4-sp-d16
 1101              	set_last_menu:
 1102              	.LFB12:
 169:src/menu.c    ****   set_menu (M_Last);
 1103              		.loc 1 169 23 is_stmt 1 view -0
 1104              		.cfi_startproc
 1105              		@ args = 0, pretend = 0, frame = 0
 1106              		@ frame_needed = 0, uses_anonymous_args = 0
 1107              		@ link register save eliminated.
 170:src/menu.c    **** }
 1108              		.loc 1 170 3 view .LVU312
 1109              	.LVL72:
 1110              	.LBB75:
 1111              	.LBI75:
 125:src/menu.c    ****   menu_name m = current_menu;
 1112              		.loc 1 125 6 view .LVU313
 1113              	.LBB76:
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1114              		.loc 1 126 3 view .LVU314
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 1115              		.loc 1 126 13 is_stmt 0 view .LVU315
 1116 0000 0A4A     		ldr	r2, .L119
 1117 0002 92F90030 		ldrsb	r3, [r2]
 1118              	.LVL73:
 127:src/menu.c    ****     current_menu = default_menu;
 1119              		.loc 1 127 3 is_stmt 1 view .LVU316
 127:src/menu.c    ****     current_menu = default_menu;
 1120              		.loc 1 127 6 is_stmt 0 view .LVU317
 1121 0006 591C     		adds	r1, r3, #1
 1122 0008 09D0     		beq	.L116
 130:src/menu.c    ****     current_menu = last_menu;
 1123              		.loc 1 130 8 is_stmt 1 view .LVU318
 131:src/menu.c    ****   }
ARM GAS  /tmp/ccGpw0cR.s 			page 36


 1124              		.loc 1 131 5 view .LVU319
 131:src/menu.c    ****   }
 1125              		.loc 1 131 18 is_stmt 0 view .LVU320
 1126 000a 0949     		ldr	r1, .L119+4
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1127              		.loc 1 136 6 view .LVU321
 1128 000c 092B     		cmp	r3, #9
 131:src/menu.c    ****   }
 1129              		.loc 1 131 18 view .LVU322
 1130 000e 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1131 0010 1070     		strb	r0, [r2]
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1132              		.loc 1 136 3 is_stmt 1 view .LVU323
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1133              		.loc 1 136 6 is_stmt 0 view .LVU324
 1134 0012 00D1     		bne	.L117
 1135              	.L106:
 1136              	.LBE76:
 1137              	.LBE75:
 171:src/menu.c    **** 
 1138              		.loc 1 171 1 view .LVU325
 1139 0014 7047     		bx	lr
 1140              	.L117:
 1141              	.LBB79:
 1142              	.LBB77:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1143              		.loc 1 136 23 view .LVU326
 1144 0016 102B     		cmp	r3, #16
 1145 0018 FCD0     		beq	.L106
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1146              		.loc 1 136 43 is_stmt 1 view .LVU327
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1147              		.loc 1 136 53 is_stmt 0 view .LVU328
 1148 001a 0B70     		strb	r3, [r1]
 1149              	.LVL74:
 1150              	.L118:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1151              		.loc 1 136 53 view .LVU329
 1152              	.LBE77:
 1153              	.LBE79:
 171:src/menu.c    **** 
 1154              		.loc 1 171 1 view .LVU330
 1155 001c 7047     		bx	lr
 1156              	.LVL75:
 1157              	.L116:
 1158              	.LBB80:
 1159              	.LBB78:
 128:src/menu.c    ****   }
 1160              		.loc 1 128 5 is_stmt 1 view .LVU331
 128:src/menu.c    ****   }
 1161              		.loc 1 128 18 is_stmt 0 view .LVU332
 1162 001e 0548     		ldr	r0, .L119+8
 1163 0020 0349     		ldr	r1, .L119+4
 1164 0022 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1165 0024 1070     		strb	r0, [r2]
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1166              		.loc 1 136 3 is_stmt 1 view .LVU333
ARM GAS  /tmp/ccGpw0cR.s 			page 37


 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1167              		.loc 1 136 43 view .LVU334
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1168              		.loc 1 136 53 is_stmt 0 view .LVU335
 1169 0026 0B70     		strb	r3, [r1]
 1170              	.LVL76:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 1171              		.loc 1 136 53 view .LVU336
 1172 0028 F8E7     		b	.L118
 1173              	.L120:
 1174 002a 00BF     		.align	2
 1175              	.L119:
 1176 002c 00000000 		.word	.LANCHOR1
 1177 0030 00000000 		.word	.LANCHOR3
 1178 0034 00000000 		.word	.LANCHOR2
 1179              	.LBE78:
 1180              	.LBE80:
 1181              		.cfi_endproc
 1182              	.LFE12:
 1184              		.section	.text.mdot,"ax",%progbits
 1185              		.align	1
 1186              		.p2align 2,,3
 1187              		.global	mdot
 1188              		.syntax unified
 1189              		.thumb
 1190              		.thumb_func
 1191              		.fpu fpv4-sp-d16
 1193              	mdot:
 1194              	.LVL77:
 1195              	.LFB14:
 573:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1196              		.loc 1 573 40 is_stmt 1 view -0
 1197              		.cfi_startproc
 1198              		@ args = 0, pretend = 0, frame = 0
 1199              		@ frame_needed = 0, uses_anonymous_args = 0
 1200              		@ link register save eliminated.
 574:src/menu.c    ****   if (on) {
 1201              		.loc 1 574 3 view .LVU338
 574:src/menu.c    ****   if (on) {
 1202              		.loc 1 574 6 is_stmt 0 view .LVU339
 1203 0000 C728     		cmp	r0, #199
 1204 0002 1AD8     		bhi	.L125
 1205              	.LVL78:
 1206              	.LBB83:
 1207              	.LBI83:
 573:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1208              		.loc 1 573 6 is_stmt 1 view .LVU340
 1209              	.LBB84:
 575:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1210              		.loc 1 575 3 view .LVU341
 1211              	.LBE84:
 1212              	.LBE83:
 573:src/menu.c    ****   if ( (i<0) || (i>199) ) return;
 1213              		.loc 1 573 40 is_stmt 0 view .LVU342
 1214 0004 10B4     		push	{r4}
 1215              		.cfi_def_cfa_offset 4
 1216              		.cfi_offset 4, -4
ARM GAS  /tmp/ccGpw0cR.s 			page 38


 1217              	.LBB87:
 1218              	.LBB85:
 575:src/menu.c    ****     mdots[i][s] |= ( 1 << j );
 1219              		.loc 1 575 6 view .LVU343
 1220 0006 63B9     		cbnz	r3, .L128
 1221              		.loc 1 579 5 is_stmt 1 view .LVU344
 1222              		.loc 1 579 17 is_stmt 0 view .LVU345
 1223 0008 0C4B     		ldr	r3, .L129
 1224              	.LVL79:
 1225              		.loc 1 579 17 view .LVU346
 1226 000a 03EB4000 		add	r0, r3, r0, lsl #1
 1227              	.LVL80:
 1228              		.loc 1 579 25 view .LVU347
 1229 000e 0124     		movs	r4, #1
 1230              		.loc 1 579 17 view .LVU348
 1231 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 1232              		.loc 1 579 25 view .LVU349
 1233 0012 04FA01F1 		lsl	r1, r4, r1
 1234              	.LVL81:
 1235              		.loc 1 579 17 view .LVU350
 1236 0016 23EA0101 		bic	r1, r3, r1
 1237 001a 8154     		strb	r1, [r0, r2]
 1238              	.LVL82:
 1239              		.loc 1 579 17 view .LVU351
 1240              	.LBE85:
 1241              	.LBE87:
 580:src/menu.c    ****   }
 581:src/menu.c    **** }
 1242              		.loc 1 581 1 view .LVU352
 1243 001c 5DF8044B 		ldr	r4, [sp], #4
 1244              		.cfi_remember_state
 1245              		.cfi_restore 4
 1246              		.cfi_def_cfa_offset 0
 1247 0020 7047     		bx	lr
 1248              	.LVL83:
 1249              	.L128:
 1250              		.cfi_restore_state
 1251              	.LBB88:
 1252              	.LBB86:
 576:src/menu.c    ****   }
 1253              		.loc 1 576 5 is_stmt 1 view .LVU353
 576:src/menu.c    ****   }
 1254              		.loc 1 576 17 is_stmt 0 view .LVU354
 1255 0022 064B     		ldr	r3, .L129
 1256              	.LVL84:
 576:src/menu.c    ****   }
 1257              		.loc 1 576 17 view .LVU355
 1258 0024 03EB4000 		add	r0, r3, r0, lsl #1
 1259              	.LVL85:
 576:src/menu.c    ****   }
 1260              		.loc 1 576 24 view .LVU356
 1261 0028 0124     		movs	r4, #1
 576:src/menu.c    ****   }
 1262              		.loc 1 576 17 view .LVU357
 1263 002a 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 576:src/menu.c    ****   }
 1264              		.loc 1 576 24 view .LVU358
ARM GAS  /tmp/ccGpw0cR.s 			page 39


 1265 002c 04FA01F1 		lsl	r1, r4, r1
 1266              	.LVL86:
 576:src/menu.c    ****   }
 1267              		.loc 1 576 17 view .LVU359
 1268 0030 1943     		orrs	r1, r1, r3
 1269 0032 8154     		strb	r1, [r0, r2]
 1270              	.LBE86:
 1271              	.LBE88:
 1272              		.loc 1 581 1 view .LVU360
 1273 0034 5DF8044B 		ldr	r4, [sp], #4
 1274              		.cfi_restore 4
 1275              		.cfi_def_cfa_offset 0
 1276 0038 7047     		bx	lr
 1277              	.LVL87:
 1278              	.L125:
 1279              		.loc 1 581 1 view .LVU361
 1280 003a 7047     		bx	lr
 1281              	.L130:
 1282              		.align	2
 1283              	.L129:
 1284 003c 00000000 		.word	.LANCHOR0
 1285              		.cfi_endproc
 1286              	.LFE14:
 1288              		.section	.text.get_current_menu_ref,"ax",%progbits
 1289              		.align	1
 1290              		.p2align 2,,3
 1291              		.global	get_current_menu_ref
 1292              		.syntax unified
 1293              		.thumb
 1294              		.thumb_func
 1295              		.fpu fpv4-sp-d16
 1297              	get_current_menu_ref:
 1298              	.LVL88:
 1299              	.LFB15:
 582:src/menu.c    **** 
 583:src/menu.c    **** struct _menu get_current_menu_ref() {
 1300              		.loc 1 583 37 is_stmt 1 view -0
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 0
 1303              		@ frame_needed = 0, uses_anonymous_args = 0
 584:src/menu.c    ****   int i = current_menu;
 1304              		.loc 1 584 3 view .LVU363
 585:src/menu.c    ****   if (C_LOCKED)
 1305              		.loc 1 585 7 is_stmt 0 view .LVU364
 1306 0000 1E4A     		ldr	r2, .L151
 584:src/menu.c    ****   int i = current_menu;
 1307              		.loc 1 584 7 view .LVU365
 1308 0002 1F4B     		ldr	r3, .L151+4
 1309              		.loc 1 585 7 view .LVU366
 1310 0004 1268     		ldr	r2, [r2]
 583:src/menu.c    ****   int i = current_menu;
 1311              		.loc 1 583 37 view .LVU367
 1312 0006 10B5     		push	{r4, lr}
 1313              		.cfi_def_cfa_offset 8
 1314              		.cfi_offset 4, -8
 1315              		.cfi_offset 14, -4
 1316              		.loc 1 585 7 view .LVU368
ARM GAS  /tmp/ccGpw0cR.s 			page 40


 1317 0008 92F8E447 		ldrb	r4, [r2, #2020]	@ zero_extendqisi2
 584:src/menu.c    ****   int i = current_menu;
 1318              		.loc 1 584 7 view .LVU369
 1319 000c 93F90010 		ldrsb	r1, [r3]
 1320              	.LVL89:
 1321              		.loc 1 585 3 is_stmt 1 view .LVU370
 583:src/menu.c    ****   int i = current_menu;
 1322              		.loc 1 583 37 is_stmt 0 view .LVU371
 1323 0010 0346     		mov	r3, r0
 1324              		.loc 1 585 6 view .LVU372
 1325 0012 6007     		lsls	r0, r4, #29
 1326              	.LVL90:
 1327              		.loc 1 585 6 view .LVU373
 1328 0014 1DD5     		bpl	.L132
 1329              		.loc 1 585 7 discriminator 1 view .LVU374
 1330 0016 92F8DE27 		ldrb	r2, [r2, #2014]	@ zero_extendqisi2
 1331 001a 5207     		lsls	r2, r2, #29
 1332 001c 19D5     		bpl	.L132
 586:src/menu.c    ****     switch (current_menu) {
 1333              		.loc 1 586 5 is_stmt 1 view .LVU375
 1334 001e 4A1E     		subs	r2, r1, #1
 1335 0020 0E2A     		cmp	r2, #14
 1336 0022 16D8     		bhi	.L132
 1337 0024 DFE802F0 		tbb	[pc, r2]
 1338              	.L134:
 1339 0028 27       		.byte	(.L140-.L134)/2
 1340 0029 15       		.byte	(.L132-.L134)/2
 1341 002a 25       		.byte	(.L135-.L134)/2
 1342 002b 15       		.byte	(.L132-.L134)/2
 1343 002c 23       		.byte	(.L139-.L134)/2
 1344 002d 13       		.byte	(.L138-.L134)/2
 1345 002e 25       		.byte	(.L135-.L134)/2
 1346 002f 15       		.byte	(.L132-.L134)/2
 1347 0030 08       		.byte	(.L143-.L134)/2
 1348 0031 25       		.byte	(.L135-.L134)/2
 1349 0032 21       		.byte	(.L136-.L134)/2
 1350 0033 25       		.byte	(.L135-.L134)/2
 1351 0034 25       		.byte	(.L135-.L134)/2
 1352 0035 25       		.byte	(.L135-.L134)/2
 1353 0036 1F       		.byte	(.L133-.L134)/2
 1354 0037 00       		.p2align 1
 1355              	.L143:
 587:src/menu.c    ****     case (M_Clear):
 588:src/menu.c    ****       i = M_Clear_C;
 589:src/menu.c    ****       break;
 590:src/menu.c    ****     case (M_Swap):
 591:src/menu.c    ****       i = M_Swap_C;
 592:src/menu.c    ****       break;
 593:src/menu.c    ****     case (M_Arrow):
 594:src/menu.c    ****       i = M_Arrow_C;
 1356              		.loc 1 594 9 is_stmt 0 view .LVU376
 1357 0038 1421     		movs	r1, #20
 1358              	.LVL91:
 1359              	.L137:
 595:src/menu.c    ****       break;
 596:src/menu.c    ****     case (M_Prob):
 597:src/menu.c    ****       i = M_Prob_C;
ARM GAS  /tmp/ccGpw0cR.s 			page 41


 598:src/menu.c    ****       break;
 599:src/menu.c    ****     case (M_Blank2):
 600:src/menu.c    ****       i = M_Blank2_C;
 601:src/menu.c    ****       break;
 602:src/menu.c    ****     case (M_Misc):
 603:src/menu.c    ****       i = M_Misc_C;
 604:src/menu.c    ****       break;
 605:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 606:src/menu.c    ****     case (M_Flags):// so don't display them.
 607:src/menu.c    ****     case (M_Stats):
 608:src/menu.c    ****     case (M_Setup2):
 609:src/menu.c    ****     case (M_Solve):
 610:src/menu.c    ****     case (M_Program):
 611:src/menu.c    ****       i = M_C_Lock;
 612:src/menu.c    ****     default:;
 613:src/menu.c    ****     }
 614:src/menu.c    ****   if (current_menu == M_User) {
 615:src/menu.c    ****     return UserMenu;
 616:src/menu.c    ****   }
 617:src/menu.c    ****   else {
 618:src/menu.c    ****     return Menus[i];
 1360              		.loc 1 618 5 is_stmt 1 view .LVU377
 1361              		.loc 1 618 17 is_stmt 0 view .LVU378
 1362 003a 1248     		ldr	r0, .L151+8
 1363 003c D022     		movs	r2, #208
 1364 003e 02FB0101 		mla	r1, r2, r1, r0
 1365              	.LVL92:
 1366              		.loc 1 618 17 view .LVU379
 1367 0042 1846     		mov	r0, r3
 1368 0044 FFF7FEFF 		bl	memcpy
 1369              	.LVL93:
 1370              		.loc 1 618 17 view .LVU380
 1371 0048 0346     		mov	r3, r0
 619:src/menu.c    ****   }
 620:src/menu.c    **** }
 1372              		.loc 1 620 1 view .LVU381
 1373 004a 1846     		mov	r0, r3
 1374 004c 10BD     		pop	{r4, pc}
 1375              	.LVL94:
 1376              	.L138:
 585:src/menu.c    ****     switch (current_menu) {
 1377              		.loc 1 585 7 view .LVU382
 1378 004e 1321     		movs	r1, #19
 1379              	.LVL95:
 585:src/menu.c    ****     switch (current_menu) {
 1380              		.loc 1 585 7 view .LVU383
 1381 0050 F3E7     		b	.L137
 1382              	.LVL96:
 1383              	.L132:
 612:src/menu.c    ****     }
 1384              		.loc 1 612 13 is_stmt 1 view .LVU384
 614:src/menu.c    ****     return UserMenu;
 1385              		.loc 1 614 3 view .LVU385
 614:src/menu.c    ****     return UserMenu;
 1386              		.loc 1 614 6 is_stmt 0 view .LVU386
 1387 0052 6329     		cmp	r1, #99
 1388 0054 F1D1     		bne	.L137
ARM GAS  /tmp/ccGpw0cR.s 			page 42


 615:src/menu.c    ****   }
 1389              		.loc 1 615 5 is_stmt 1 view .LVU387
 615:src/menu.c    ****   }
 1390              		.loc 1 615 12 is_stmt 0 view .LVU388
 1391 0056 0C49     		ldr	r1, .L151+12
 1392              	.LVL97:
 615:src/menu.c    ****   }
 1393              		.loc 1 615 12 view .LVU389
 1394 0058 D022     		movs	r2, #208
 1395 005a 1846     		mov	r0, r3
 1396 005c FFF7FEFF 		bl	memcpy
 1397              	.LVL98:
 615:src/menu.c    ****   }
 1398              		.loc 1 615 12 view .LVU390
 1399 0060 0346     		mov	r3, r0
 1400              		.loc 1 620 1 view .LVU391
 1401 0062 1846     		mov	r0, r3
 1402 0064 10BD     		pop	{r4, pc}
 1403              	.LVL99:
 1404              	.L133:
 600:src/menu.c    ****       break;
 1405              		.loc 1 600 7 is_stmt 1 view .LVU392
 601:src/menu.c    ****     case (M_Misc):
 1406              		.loc 1 601 7 view .LVU393
 600:src/menu.c    ****       break;
 1407              		.loc 1 600 9 is_stmt 0 view .LVU394
 1408 0066 1621     		movs	r1, #22
 601:src/menu.c    ****     case (M_Misc):
 1409              		.loc 1 601 7 view .LVU395
 1410 0068 E7E7     		b	.L137
 1411              	.LVL100:
 1412              	.L136:
 597:src/menu.c    ****       break;
 1413              		.loc 1 597 7 is_stmt 1 view .LVU396
 598:src/menu.c    ****     case (M_Blank2):
 1414              		.loc 1 598 7 view .LVU397
 597:src/menu.c    ****       break;
 1415              		.loc 1 597 9 is_stmt 0 view .LVU398
 1416 006a 1521     		movs	r1, #21
 598:src/menu.c    ****     case (M_Blank2):
 1417              		.loc 1 598 7 view .LVU399
 1418 006c E5E7     		b	.L137
 1419              	.LVL101:
 1420              	.L139:
 603:src/menu.c    ****       break;
 1421              		.loc 1 603 7 is_stmt 1 view .LVU400
 604:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1422              		.loc 1 604 7 view .LVU401
 603:src/menu.c    ****       break;
 1423              		.loc 1 603 9 is_stmt 0 view .LVU402
 1424 006e 1721     		movs	r1, #23
 604:src/menu.c    ****     case (M_Base): // These menus aren't appropriate in complex mode
 1425              		.loc 1 604 7 view .LVU403
 1426 0070 E3E7     		b	.L137
 1427              	.LVL102:
 1428              	.L135:
 611:src/menu.c    ****     default:;
ARM GAS  /tmp/ccGpw0cR.s 			page 43


 1429              		.loc 1 611 7 is_stmt 1 view .LVU404
 611:src/menu.c    ****     default:;
 1430              		.loc 1 611 9 is_stmt 0 view .LVU405
 1431 0072 1121     		movs	r1, #17
 1432 0074 E1E7     		b	.L137
 1433              	.LVL103:
 1434              	.L140:
 588:src/menu.c    ****       break;
 1435              		.loc 1 588 9 view .LVU406
 1436 0076 1221     		movs	r1, #18
 1437              	.LVL104:
 588:src/menu.c    ****       break;
 1438              		.loc 1 588 9 view .LVU407
 1439 0078 DFE7     		b	.L137
 1440              	.L152:
 1441 007a 00BF     		.align	2
 1442              	.L151:
 1443 007c 00000000 		.word	main_ram
 1444 0080 00000000 		.word	.LANCHOR1
 1445 0084 00000000 		.word	Menus
 1446 0088 00000000 		.word	.LANCHOR4
 1447              		.cfi_endproc
 1448              	.LFE15:
 1450              		.section	.text.display_menu,"ax",%progbits
 1451              		.align	1
 1452              		.p2align 2,,3
 1453              		.global	display_menu
 1454              		.syntax unified
 1455              		.thumb
 1456              		.thumb_func
 1457              		.fpu fpv4-sp-d16
 1459              	display_menu:
 1460              	.LFB16:
 621:src/menu.c    **** 
 622:src/menu.c    **** void display_menu (struct _menu Ref) {
 1461              		.loc 1 622 38 is_stmt 1 view -0
 1462              		.cfi_startproc
 1463              		@ args = 208, pretend = 16, frame = 0
 1464              		@ frame_needed = 0, uses_anonymous_args = 0
 623:src/menu.c    ****   int len = 0;
 1465              		.loc 1 623 3 view .LVU409
 1466              	.LVL105:
 624:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 52, 0); // clear bottom 52 rows for menu 
 1467              		.loc 1 624 3 view .LVU410
 622:src/menu.c    ****   int len = 0;
 1468              		.loc 1 622 38 is_stmt 0 view .LVU411
 1469 0000 84B0     		sub	sp, sp, #16
 1470              		.cfi_def_cfa_offset 16
 1471 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1472              		.cfi_def_cfa_offset 52
 1473              		.cfi_offset 4, -52
 1474              		.cfi_offset 5, -48
 1475              		.cfi_offset 6, -44
 1476              		.cfi_offset 7, -40
 1477              		.cfi_offset 8, -36
 1478              		.cfi_offset 9, -32
 1479              		.cfi_offset 10, -28
ARM GAS  /tmp/ccGpw0cR.s 			page 44


 1480              		.cfi_offset 11, -24
 1481              		.cfi_offset 14, -20
 1482 0006 83B0     		sub	sp, sp, #12
 1483              		.cfi_def_cfa_offset 64
 1484              		.loc 1 624 3 view .LVU412
 1485 0008 0024     		movs	r4, #0
 622:src/menu.c    ****   int len = 0;
 1486              		.loc 1 622 38 view .LVU413
 1487 000a 0CAD     		add	r5, sp, #48
 1488 000c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1489              		.loc 1 624 3 view .LVU414
 1490 0010 3E4E     		ldr	r6, .L171
 1491 0012 0094     		str	r4, [sp]
 1492 0014 2046     		mov	r0, r4
 1493 0016 3423     		movs	r3, #52
 1494 0018 4FF4C872 		mov	r2, #400
 1495 001c BC21     		movs	r1, #188
 1496 001e B047     		blx	r6
 1497              	.LVL106:
 625:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1498              		.loc 1 625 3 is_stmt 1 view .LVU415
 1499 0020 3B4D     		ldr	r5, .L171+4
 1500 0022 FF23     		movs	r3, #255
 1501 0024 0093     		str	r3, [sp]
 1502 0026 4FF4C872 		mov	r2, #400
 1503 002a 0123     		movs	r3, #1
 1504 002c BC21     		movs	r1, #188
 1505 002e 2046     		mov	r0, r4
 1506 0030 B047     		blx	r6
 1507              	.LVL107:
 626:src/menu.c    ****   //Clear previous menu
 627:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1508              		.loc 1 627 3 view .LVU416
 1509              	.LBB89:
 1510              		.loc 1 627 8 view .LVU417
 1511              		.loc 1 627 21 view .LVU418
 628:src/menu.c    ****     mdots[col][0] = 0;
 1512              		.loc 1 628 19 is_stmt 0 view .LVU419
 1513 0032 2246     		mov	r2, r4
 1514 0034 05F5C871 		add	r1, r5, #400
 1515              	.LBE89:
 625:src/menu.c    ****   lcd_fill_rect (0, 188, 400, 1, 0xff); // lines count from line 1? No. 
 1516              		.loc 1 625 3 view .LVU420
 1517 0038 2B46     		mov	r3, r5
 1518              	.LVL108:
 1519              	.L154:
 1520              	.LBB90:
 1521              		.loc 1 628 5 is_stmt 1 discriminator 3 view .LVU421
 1522              		.loc 1 628 19 is_stmt 0 discriminator 3 view .LVU422
 1523 003a 1A70     		strb	r2, [r3]
 629:src/menu.c    ****     mdots[col][1] = 0;
 1524              		.loc 1 629 5 is_stmt 1 discriminator 3 view .LVU423
 1525              		.loc 1 629 19 is_stmt 0 discriminator 3 view .LVU424
 1526 003c 5A70     		strb	r2, [r3, #1]
 627:src/menu.c    ****     mdots[col][0] = 0;
 1527              		.loc 1 627 32 is_stmt 1 discriminator 3 view .LVU425
 627:src/menu.c    ****     mdots[col][0] = 0;
ARM GAS  /tmp/ccGpw0cR.s 			page 45


 1528              		.loc 1 627 21 discriminator 3 view .LVU426
 1529 003e 0233     		adds	r3, r3, #2
 627:src/menu.c    ****     mdots[col][0] = 0;
 1530              		.loc 1 627 3 is_stmt 0 discriminator 3 view .LVU427
 1531 0040 9942     		cmp	r1, r3
 1532 0042 FAD1     		bne	.L154
 1533 0044 14AE     		add	r6, sp, #80
 627:src/menu.c    ****     mdots[col][0] = 0;
 1534              		.loc 1 627 3 view .LVU428
 1535 0046 0024     		movs	r4, #0
 1536              	.LVL109:
 1537              	.L155:
 627:src/menu.c    ****     mdots[col][0] = 0;
 1538              		.loc 1 627 3 view .LVU429
 1539              	.LBE90:
 1540              	.LBB91:
 630:src/menu.c    ****   }
 631:src/menu.c    **** 
 632:src/menu.c    ****   // Draw menu items
 633:src/menu.c    ****   // 
 634:src/menu.c    ****   for (int item = 0; item < 6; item++ ) {
 635:src/menu.c    ****     /*
 636:src/menu.c    ****       Starting dot in the row of 200 is item*32 - no gaps; gaps will be inserted when drawing
 637:src/menu.c    ****     */
 638:src/menu.c    ****     // Label is Ref.keys[item].unshifted_label
 639:src/menu.c    ****     // Unshifted first
 640:src/menu.c    ****       len = pixel_length (Ref.keys[item].unshifted_label, 0); // 0 means not small font
 1541              		.loc 1 640 7 is_stmt 1 view .LVU430
 1542              		.loc 1 640 13 is_stmt 0 view .LVU431
 1543 0048 0021     		movs	r1, #0
 1544 004a 3046     		mov	r0, r6
 1545 004c FFF7FEFF 		bl	pixel_length
 1546              	.LVL110:
 641:src/menu.c    ****       set_menu_label ( Ref.keys[item].unshifted_label, 0, item*32 + (32 - len)/2, 0 );
 1547              		.loc 1 641 7 is_stmt 1 view .LVU432
 1548              		.loc 1 641 73 is_stmt 0 view .LVU433
 1549 0050 C0F12000 		rsb	r0, r0, #32
 1550              	.LVL111:
 1551              		.loc 1 641 79 view .LVU434
 1552 0054 00EBD070 		add	r0, r0, r0, lsr #31
 1553              		.loc 1 641 7 view .LVU435
 1554 0058 04EB6001 		add	r1, r4, r0, asr #1
 1555 005c 0022     		movs	r2, #0
 1556 005e 3046     		mov	r0, r6
 1557 0060 06F10807 		add	r7, r6, #8
 1558 0064 FFF7FEFF 		bl	set_menu_label.constprop.0
 1559              	.LVL112:
 642:src/menu.c    ****       // Now shifted ...	
 643:src/menu.c    ****       len = pixel_length (Ref.keys[item].shifted_label, 0); // 0 means not small font
 1560              		.loc 1 643 7 is_stmt 1 view .LVU436
 1561              		.loc 1 643 13 is_stmt 0 view .LVU437
 1562 0068 0021     		movs	r1, #0
 1563 006a 3846     		mov	r0, r7
 1564 006c FFF7FEFF 		bl	pixel_length
 1565              	.LVL113:
 644:src/menu.c    ****       len = item*32 + (32-len)/2;
 1566              		.loc 1 644 7 is_stmt 1 view .LVU438
ARM GAS  /tmp/ccGpw0cR.s 			page 46


 1567              		.loc 1 644 26 is_stmt 0 view .LVU439
 1568 0070 C0F12000 		rsb	r0, r0, #32
 1569              	.LVL114:
 1570              		.loc 1 644 31 view .LVU440
 1571 0074 00EBD070 		add	r0, r0, r0, lsr #31
 1572              	.LVL115:
 645:src/menu.c    ****       if (len<0) len = 0;
 1573              		.loc 1 645 7 is_stmt 1 view .LVU441
 644:src/menu.c    ****       len = item*32 + (32-len)/2;
 1574              		.loc 1 644 11 is_stmt 0 view .LVU442
 1575 0078 04EB6001 		add	r1, r4, r0, asr #1
 1576              	.LVL116:
 644:src/menu.c    ****       len = item*32 + (32-len)/2;
 1577              		.loc 1 644 11 view .LVU443
 1578 007c C729     		cmp	r1, #199
 1579 007e A8BF     		it	ge
 1580 0080 C721     		movge	r1, #199
 1581              	.LVL117:
 646:src/menu.c    ****       if (len>199) len = 199;
 647:src/menu.c    ****       set_menu_label ( Ref.keys[item].shifted_label, 0, len, 1 );
 1582              		.loc 1 647 7 is_stmt 1 view .LVU444
 1583 0082 21EAE171 		bic	r1, r1, r1, asr #31
 1584              	.LVL118:
 1585              		.loc 1 647 7 is_stmt 0 view .LVU445
 1586 0086 3846     		mov	r0, r7
 1587 0088 2034     		adds	r4, r4, #32
 1588 008a 0122     		movs	r2, #1
 1589 008c FFF7FEFF 		bl	set_menu_label.constprop.0
 1590              	.LVL119:
 634:src/menu.c    ****     /*
 1591              		.loc 1 634 32 is_stmt 1 view .LVU446
 634:src/menu.c    ****     /*
 1592              		.loc 1 634 22 view .LVU447
 634:src/menu.c    ****     /*
 1593              		.loc 1 634 3 is_stmt 0 view .LVU448
 1594 0090 C02C     		cmp	r4, #192
 1595 0092 06F12006 		add	r6, r6, #32
 1596 0096 D7D1     		bne	.L155
 1597 0098 1E4E     		ldr	r6, .L171+8
 1598              	.LBE91:
 1599              	.LBB92:
 1600              	.LBB93:
 648:src/menu.c    ****   }
 649:src/menu.c    **** 
 650:src/menu.c    ****   for (int col = 0; col < 196; col++) {
 651:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 652:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 653:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 654:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - row*3, 3, 3, 0xff);
 1601              		.loc 1 654 2 view .LVU449
 1602 009a DFF87090 		ldr	r9, .L171
 1603 009e C5F1040A 		rsb	r10, r5, #4
 1604 00a2 06F5C47B 		add	fp, r6, #392
 1605              	.LBE93:
 1606              	.LBE92:
 1607              	.LBB95:
 634:src/menu.c    ****     /*
ARM GAS  /tmp/ccGpw0cR.s 			page 47


 1608              		.loc 1 634 3 view .LVU450
 1609 00a6 771E     		subs	r7, r6, #1
 1610              	.LBE95:
 1611              	.LBB96:
 1612              	.LBB94:
 1613              		.loc 1 654 2 view .LVU451
 1614 00a8 4FF0FF08 		mov	r8, #255
 1615              	.L156:
 1616              	.LVL120:
 651:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1617              		.loc 1 651 23 is_stmt 1 view .LVU452
 1618 00ac 0AEB0705 		add	r5, r10, r7
 651:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1619              		.loc 1 651 14 is_stmt 0 view .LVU453
 1620 00b0 0024     		movs	r4, #0
 1621              	.LVL121:
 1622              	.L159:
 652:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1623              		.loc 1 652 7 is_stmt 1 view .LVU454
 1624              		.loc 1 654 2 view .LVU455
 652:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1625              		.loc 1 652 22 is_stmt 0 view .LVU456
 1626 00b2 16F8012C 		ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 652:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1627              		.loc 1 652 40 view .LVU457
 1628 00b6 2241     		asrs	r2, r2, r4
 1629              		.loc 1 654 2 view .LVU458
 1630 00b8 A4EB8401 		sub	r1, r4, r4, lsl #2
 1631 00bc 0323     		movs	r3, #3
 652:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1632              		.loc 1 652 10 view .LVU459
 1633 00be 12F0010F 		tst	r2, #1
 1634              		.loc 1 654 2 view .LVU460
 1635 00c2 01F1E901 		add	r1, r1, #233
 1636 00c6 1A46     		mov	r2, r3
 1637 00c8 2846     		mov	r0, r5
 652:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - row*3, 3, 3, 0xff);
 1638              		.loc 1 652 10 view .LVU461
 1639 00ca 02D0     		beq	.L157
 1640              		.loc 1 654 2 view .LVU462
 1641 00cc CDF80080 		str	r8, [sp]
 1642 00d0 C847     		blx	r9
 1643              	.LVL122:
 1644              	.L157:
 655:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1645              		.loc 1 655 7 is_stmt 1 view .LVU463
 656:src/menu.c    **** 	//	lcd_fill_rect( col*2-1, 230 - 5*3 -10 - row*3, 3, 3, 0xff);
 657:src/menu.c    **** 	lcd_fill_rect( 4+col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1646              		.loc 1 657 2 view .LVU464
 655:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1647              		.loc 1 655 22 is_stmt 0 view .LVU465
 1648 00d2 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 655:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1649              		.loc 1 655 40 view .LVU466
 1650 00d4 2241     		asrs	r2, r2, r4
 1651              		.loc 1 657 2 view .LVU467
 1652 00d6 A4EB8401 		sub	r1, r4, r4, lsl #2
ARM GAS  /tmp/ccGpw0cR.s 			page 48


 1653 00da 0323     		movs	r3, #3
 655:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1654              		.loc 1 655 10 view .LVU468
 1655 00dc 12F0010F 		tst	r2, #1
 1656              		.loc 1 657 2 view .LVU469
 1657 00e0 01F1D001 		add	r1, r1, #208
 1658 00e4 1A46     		mov	r2, r3
 1659 00e6 04F10104 		add	r4, r4, #1
 1660              	.LVL123:
 1661              		.loc 1 657 2 view .LVU470
 1662 00ea 2846     		mov	r0, r5
 655:src/menu.c    ****       if ((mdots[col][1] & (1 << row)) != 0) 
 1663              		.loc 1 655 10 view .LVU471
 1664 00ec 02D0     		beq	.L158
 1665              		.loc 1 657 2 view .LVU472
 1666 00ee CDF80080 		str	r8, [sp]
 1667 00f2 C847     		blx	r9
 1668              	.LVL124:
 1669              	.L158:
 651:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1670              		.loc 1 651 32 is_stmt 1 discriminator 2 view .LVU473
 651:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1671              		.loc 1 651 23 discriminator 2 view .LVU474
 651:src/menu.c    ****       if ((mdots[col][0] & (1 << row)) != 0) 
 1672              		.loc 1 651 5 is_stmt 0 discriminator 2 view .LVU475
 1673 00f4 062C     		cmp	r4, #6
 1674 00f6 DCD1     		bne	.L159
 1675              	.LBE94:
 650:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1676              		.loc 1 650 32 is_stmt 1 discriminator 2 view .LVU476
 650:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1677              		.loc 1 650 21 discriminator 2 view .LVU477
 1678 00f8 0236     		adds	r6, r6, #2
 650:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1679              		.loc 1 650 3 is_stmt 0 discriminator 2 view .LVU478
 1680 00fa B345     		cmp	fp, r6
 1681 00fc 07F10207 		add	r7, r7, #2
 1682 0100 D4D1     		bne	.L156
 1683              	.LBE96:
 658:src/menu.c    ****     }
 659:src/menu.c    ****   }
 660:src/menu.c    **** }
 1684              		.loc 1 660 1 view .LVU479
 1685 0102 03B0     		add	sp, sp, #12
 1686              		.cfi_def_cfa_offset 52
 1687              		@ sp needed
 1688 0104 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1689              		.cfi_restore 14
 1690              		.cfi_restore 11
 1691              		.cfi_restore 10
 1692              		.cfi_restore 9
 1693              		.cfi_restore 8
 1694              		.cfi_restore 7
 1695              		.cfi_restore 6
 1696              		.cfi_restore 5
 1697              		.cfi_restore 4
 1698              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccGpw0cR.s 			page 49


 1699              	.LVL125:
 1700              		.loc 1 660 1 view .LVU480
 1701 0108 04B0     		add	sp, sp, #16
 1702              		.cfi_def_cfa_offset 0
 1703 010a 7047     		bx	lr
 1704              	.L172:
 1705              		.align	2
 1706              	.L171:
 1707 010c 3D020008 		.word	134218301
 1708 0110 00000000 		.word	.LANCHOR0
 1709 0114 01000000 		.word	.LANCHOR0+1
 1710              		.cfi_endproc
 1711              	.LFE16:
 1713              		.section	.text.display_current_menu,"ax",%progbits
 1714              		.align	1
 1715              		.p2align 2,,3
 1716              		.global	display_current_menu
 1717              		.syntax unified
 1718              		.thumb
 1719              		.thumb_func
 1720              		.fpu fpv4-sp-d16
 1722              	display_current_menu:
 1723              	.LFB11:
 165:src/menu.c    ****   display_menu (get_current_menu_ref());
 1724              		.loc 1 165 30 is_stmt 1 view -0
 1725              		.cfi_startproc
 1726              		@ args = 0, pretend = 0, frame = 208
 1727              		@ frame_needed = 0, uses_anonymous_args = 0
 166:src/menu.c    **** }
 1728              		.loc 1 166 3 view .LVU482
 165:src/menu.c    ****   display_menu (get_current_menu_ref());
 1729              		.loc 1 165 30 is_stmt 0 view .LVU483
 1730 0000 10B5     		push	{r4, lr}
 1731              		.cfi_def_cfa_offset 8
 1732              		.cfi_offset 4, -8
 1733              		.cfi_offset 14, -4
 1734 0002 E4B0     		sub	sp, sp, #400
 1735              		.cfi_def_cfa_offset 408
 166:src/menu.c    **** }
 1736              		.loc 1 166 3 view .LVU484
 1737 0004 30AC     		add	r4, sp, #192
 1738 0006 2046     		mov	r0, r4
 1739 0008 FFF7FEFF 		bl	get_current_menu_ref
 1740              	.LVL126:
 1741 000c 34A9     		add	r1, sp, #208
 1742 000e C022     		movs	r2, #192
 1743 0010 6846     		mov	r0, sp
 1744 0012 FFF7FEFF 		bl	memcpy
 1745              	.LVL127:
 1746 0016 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1747 001a FFF7FEFF 		bl	display_menu
 1748              	.LVL128:
 167:src/menu.c    **** 
 1749              		.loc 1 167 1 view .LVU485
 1750 001e 64B0     		add	sp, sp, #400
 1751              		.cfi_def_cfa_offset 8
 1752              		@ sp needed
ARM GAS  /tmp/ccGpw0cR.s 			page 50


 1753 0020 10BD     		pop	{r4, pc}
 1754              		.cfi_endproc
 1755              	.LFE11:
 1757 0022 00BF     		.section	.text.all_menu_dots,"ax",%progbits
 1758              		.align	1
 1759              		.p2align 2,,3
 1760              		.global	all_menu_dots
 1761              		.syntax unified
 1762              		.thumb
 1763              		.thumb_func
 1764              		.fpu fpv4-sp-d16
 1766              	all_menu_dots:
 1767              	.LFB17:
 661:src/menu.c    **** 
 662:src/menu.c    **** void all_menu_dots () {
 1768              		.loc 1 662 23 is_stmt 1 view -0
 1769              		.cfi_startproc
 1770              		@ args = 0, pretend = 0, frame = 0
 1771              		@ frame_needed = 0, uses_anonymous_args = 0
 663:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1772              		.loc 1 663 3 view .LVU487
 1773              	.LBB97:
 1774              		.loc 1 663 8 view .LVU488
 1775              	.LVL129:
 1776              		.loc 1 663 21 view .LVU489
 1777              	.LBE97:
 662:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1778              		.loc 1 662 23 is_stmt 0 view .LVU490
 1779 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1780              		.cfi_def_cfa_offset 20
 1781              		.cfi_offset 4, -20
 1782              		.cfi_offset 5, -16
 1783              		.cfi_offset 6, -12
 1784              		.cfi_offset 7, -8
 1785              		.cfi_offset 14, -4
 1786              	.LBB101:
 1787              	.LBB98:
 664:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 665:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - row*3, 3, 3, 0xff);
 1788              		.loc 1 665 2 view .LVU491
 1789 0002 0D4E     		ldr	r6, .L181
 1790              	.LBE98:
 1791              	.LBE101:
 662:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1792              		.loc 1 662 23 view .LVU492
 1793 0004 83B0     		sub	sp, sp, #12
 1794              		.cfi_def_cfa_offset 32
 662:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1795              		.loc 1 662 23 view .LVU493
 1796 0006 0025     		movs	r5, #0
 1797              	.LBB102:
 1798              	.LBB99:
 1799              		.loc 1 665 2 view .LVU494
 1800 0008 FF27     		movs	r7, #255
 1801              	.LVL130:
 1802              	.L176:
 664:src/menu.c    ****     for (int row = 0; row < 6; row++) {
ARM GAS  /tmp/ccGpw0cR.s 			page 51


 1803              		.loc 1 664 23 is_stmt 1 view .LVU495
 1804              	.LBE99:
 1805              	.LBE102:
 662:src/menu.c    ****   for (int col = 0; col < 200; col++) {
 1806              		.loc 1 662 23 is_stmt 0 view .LVU496
 1807 000a E924     		movs	r4, #233
 1808              	.LVL131:
 1809              	.L177:
 1810              	.LBB103:
 1811              	.LBB100:
 1812              		.loc 1 665 2 is_stmt 1 discriminator 3 view .LVU497
 1813 000c 0323     		movs	r3, #3
 1814 000e 1A46     		mov	r2, r3
 1815 0010 2146     		mov	r1, r4
 1816 0012 2846     		mov	r0, r5
 1817 0014 0097     		str	r7, [sp]
 1818 0016 B047     		blx	r6
 1819              	.LVL132:
 666:src/menu.c    **** 	lcd_fill_rect( col*2, 233 - 5*3 -10 - row*3, 3, 3, 0xff);
 1820              		.loc 1 666 2 discriminator 3 view .LVU498
 1821 0018 0323     		movs	r3, #3
 1822 001a A4F11901 		sub	r1, r4, #25
 1823 001e 0097     		str	r7, [sp]
 1824 0020 1A46     		mov	r2, r3
 1825 0022 2846     		mov	r0, r5
 1826 0024 033C     		subs	r4, r4, #3
 1827 0026 B047     		blx	r6
 1828              	.LVL133:
 664:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1829              		.loc 1 664 32 discriminator 3 view .LVU499
 664:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1830              		.loc 1 664 23 discriminator 3 view .LVU500
 664:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1831              		.loc 1 664 5 is_stmt 0 discriminator 3 view .LVU501
 1832 0028 D72C     		cmp	r4, #215
 1833 002a EFD1     		bne	.L177
 1834              	.LBE100:
 663:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1835              		.loc 1 663 32 is_stmt 1 discriminator 2 view .LVU502
 663:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1836              		.loc 1 663 21 discriminator 2 view .LVU503
 1837 002c 0235     		adds	r5, r5, #2
 663:src/menu.c    ****     for (int row = 0; row < 6; row++) {
 1838              		.loc 1 663 3 is_stmt 0 discriminator 2 view .LVU504
 1839 002e B5F5C87F 		cmp	r5, #400
 1840 0032 EAD1     		bne	.L176
 1841              	.LBE103:
 667:src/menu.c    ****     }
 668:src/menu.c    ****   }
 669:src/menu.c    **** }  
 1842              		.loc 1 669 1 view .LVU505
 1843 0034 03B0     		add	sp, sp, #12
 1844              		.cfi_def_cfa_offset 20
 1845              		@ sp needed
 1846 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1847              	.L182:
 1848              		.align	2
ARM GAS  /tmp/ccGpw0cR.s 			page 52


 1849              	.L181:
 1850 0038 3D020008 		.word	134218301
 1851              		.cfi_endproc
 1852              	.LFE17:
 1854              		.section	.text.umen_store,"ax",%progbits
 1855              		.align	1
 1856              		.p2align 2,,3
 1857              		.global	umen_store
 1858              		.syntax unified
 1859              		.thumb
 1860              		.thumb_func
 1861              		.fpu fpv4-sp-d16
 1863              	umen_store:
 1864              	.LVL134:
 1865              	.LFB20:
 670:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1);
 671:src/menu.c    **** 
 672:src/menu.c    **** void build_user_menu(void){
 673:src/menu.c    ****   // find the label 'MNU'
 674:src/menu.c    ****    const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 675:src/menu.c    ****    build_user_menu_from_program (lbl);
 676:src/menu.c    **** }
 677:src/menu.c    **** 
 678:src/menu.c    **** void build_user_menu_from_program(int lbl)
 679:src/menu.c    **** {
 680:src/menu.c    ****   // find the label 'MNU'
 681:src/menu.c    ****   // const int lbl = OP_DBL + (DBL_LBL << DBL_SHIFT) + 'M' + ('N' << 16) + ('U' << 24);
 682:src/menu.c    ****   unsigned int pc = findmultilbl(lbl, 0);
 683:src/menu.c    ****   int i=0;
 684:src/menu.c    ****   s_opcode op;
 685:src/menu.c    ****   opcode opc;
 686:src/menu.c    ****   char buf1[16];
 687:src/menu.c    ****   char *p = buf1;
 688:src/menu.c    ****   char c;
 689:src/menu.c    ****   int finished = 0;
 690:src/menu.c    **** 
 691:src/menu.c    ****   for (int j = 0; j<6; j++) { // clear user menu
 692:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 693:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 694:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 695:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 696:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 697:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 698:src/menu.c    ****   }
 699:src/menu.c    ****   while (pc && i < 12) {
 700:src/menu.c    **** 
 701:src/menu.c    ****     pc = do_inc(pc, 0);
 702:src/menu.c    ****     opc = getprog(pc);
 703:src/menu.c    ****     op = (s_opcode) opc;
 704:src/menu.c    **** 
 705:src/menu.c    ****     if (op == (OP_NIL | OP_END))
 706:src/menu.c    ****       break;
 707:src/menu.c    ****     if (op == (OP_NIL | OP_NOP)) {
 708:src/menu.c    ****       if (i==4) {
 709:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 710:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 711:src/menu.c    ****       }
ARM GAS  /tmp/ccGpw0cR.s 			page 53


 712:src/menu.c    ****       else if (i==5) {
 713:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 714:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 715:src/menu.c    ****       }
 716:src/menu.c    ****       i += 1;
 717:src/menu.c    ****       continue;
 718:src/menu.c    ****     }
 719:src/menu.c    **** 
 720:src/menu.c    ****     if (isDBL(opc) && (opDBL(opc) == DBL_ALPHA)) { // is it double alpha?
 721:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 722:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 723:src/menu.c    **** 	i++;
 724:src/menu.c    ****     	p = buf1;
 725:src/menu.c    **** 	finished = 0;
 726:src/menu.c    ****       } // ..and start reading the new alpha
 727:src/menu.c    ****       *p++ = opc & 0xff; // character 1
 728:src/menu.c    ****       c = (opc >> 16) & 0xff;
 729:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 730:src/menu.c    **** 	*p++ = c;
 731:src/menu.c    **** 	c = opc>>24;
 732:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 733:src/menu.c    **** 	  *p++ = c;
 734:src/menu.c    ****       }
 735:src/menu.c    ****       *p = '\0'; // no ++: next character can overwrite the 0.
 736:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 737:src/menu.c    **** 	finished = 1;
 738:src/menu.c    ****       }
 739:src/menu.c    ****     }
 740:src/menu.c    ****     else { // Not a DBL_ALPHA op - the usual case
 741:src/menu.c    ****       if ( p == buf1 ) { // no alpha label to use
 742:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 743:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 744:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 745:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 746:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 747:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 748:src/menu.c    **** 	  }
 749:src/menu.c    **** 	  else {
 750:src/menu.c    **** 	    prt_umen(opc, buf1); // display rarg with argument
 751:src/menu.c    **** 	  }
 752:src/menu.c    **** 	}
 753:src/menu.c    **** 	else {
 754:src/menu.c    **** 	  prt_umen(opc, buf1); // display non-rarg thing
 755:src/menu.c    **** 	}
 756:src/menu.c    ****       }
 757:src/menu.c    ****       else { // there is an alpha label to use, so reset
 758:src/menu.c    **** 	p = buf1;
 759:src/menu.c    **** 	finished = 0;
 760:src/menu.c    ****       }
 761:src/menu.c    ****       umen_store (i, opc, buf1);
 762:src/menu.c    ****       i++;
 763:src/menu.c    ****     }
 764:src/menu.c    ****   }
 765:src/menu.c    **** }
 766:src/menu.c    **** 
 767:src/menu.c    **** void umen_store (int i, opcode opc, char* buf1) {
 1866              		.loc 1 767 49 is_stmt 1 view -0
ARM GAS  /tmp/ccGpw0cR.s 			page 54


 1867              		.cfi_startproc
 1868              		@ args = 0, pretend = 0, frame = 0
 1869              		@ frame_needed = 0, uses_anonymous_args = 0
 768:src/menu.c    **** #pragma GCC diagnostic push
 769:src/menu.c    **** #pragma GCC diagnostic ignored "-Wstringop-truncation"
 770:src/menu.c    ****     if (i<6) {
 1870              		.loc 1 770 5 view .LVU507
 1871              		.loc 1 770 8 is_stmt 0 view .LVU508
 1872 0000 0528     		cmp	r0, #5
 767:src/menu.c    **** #pragma GCC diagnostic push
 1873              		.loc 1 767 49 view .LVU509
 1874 0002 70B5     		push	{r4, r5, r6, lr}
 1875              		.cfi_def_cfa_offset 16
 1876              		.cfi_offset 4, -16
 1877              		.cfi_offset 5, -12
 1878              		.cfi_offset 6, -8
 1879              		.cfi_offset 14, -4
 767:src/menu.c    **** #pragma GCC diagnostic push
 1880              		.loc 1 767 49 view .LVU510
 1881 0004 0D46     		mov	r5, r1
 1882 0006 0446     		mov	r4, r0
 1883 0008 1146     		mov	r1, r2
 1884              	.LVL135:
 1885              		.loc 1 770 8 view .LVU511
 1886 000a 0FDC     		bgt	.L184
 1887              	.LBB109:
 771:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1888              		.loc 1 771 7 is_stmt 1 view .LVU512
 1889              		.loc 1 771 31 is_stmt 0 view .LVU513
 1890 000c 104E     		ldr	r6, .L187
 1891 000e 0130     		adds	r0, r0, #1
 1892              	.LVL136:
 772:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1893              		.loc 1 772 42 view .LVU514
 1894 0010 06EB4414 		add	r4, r6, r4, lsl #5
 1895              	.LVL137:
 771:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1896              		.loc 1 771 7 view .LVU515
 1897 0014 0722     		movs	r2, #7
 1898              	.LVL138:
 771:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1899              		.loc 1 771 7 view .LVU516
 1900 0016 06EB4010 		add	r0, r6, r0, lsl #5
 1901              	.LVL139:
 771:src/menu.c    ****       strncpy(UserMenu.keys[i].unshifted_label, buf1, 7);
 1902              		.loc 1 771 7 view .LVU517
 1903 001a FFF7FEFF 		bl	strncpy
 1904              	.LVL140:
 1905              		.loc 1 772 7 is_stmt 1 view .LVU518
 1906              		.loc 1 772 42 is_stmt 0 view .LVU519
 1907 001e 0022     		movs	r2, #0
 773:src/menu.c    ****       UserMenu.keys[i].unshifted = (struct _ndmap) {K_OP, opc};
 1908              		.loc 1 773 34 view .LVU520
 1909 0020 3423     		movs	r3, #52
 772:src/menu.c    ****       UserMenu.keys[i].unshifted_label[7]='\0';
 1910              		.loc 1 772 42 view .LVU521
 1911 0022 84F82720 		strb	r2, [r4, #39]
ARM GAS  /tmp/ccGpw0cR.s 			page 55


 1912              		.loc 1 773 7 is_stmt 1 view .LVU522
 1913              		.loc 1 773 34 is_stmt 0 view .LVU523
 1914 0026 2374     		strb	r3, [r4, #16]
 1915 0028 6561     		str	r5, [r4, #20]
 1916              	.LBE109:
 774:src/menu.c    ****     }
 775:src/menu.c    ****     else {
 776:src/menu.c    ****       strncpy(UserMenu.keys[i-6].shifted_label, buf1, 7);
 777:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 778:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 779:src/menu.c    ****     }
 780:src/menu.c    **** #pragma GCC diagnostic pop
 781:src/menu.c    **** }  
 1917              		.loc 1 781 1 view .LVU524
 1918 002a 70BD     		pop	{r4, r5, r6, pc}
 1919              	.LVL141:
 1920              	.L184:
 1921              	.LBB110:
 1922              	.LBI110:
 767:src/menu.c    **** #pragma GCC diagnostic push
 1923              		.loc 1 767 6 is_stmt 1 view .LVU525
 1924              	.LBB111:
 1925              	.LBB112:
 776:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1926              		.loc 1 776 7 view .LVU526
 776:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1927              		.loc 1 776 30 is_stmt 0 view .LVU527
 1928 002c 841F     		subs	r4, r0, #6
 776:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1929              		.loc 1 776 33 view .LVU528
 1930 002e 084E     		ldr	r6, .L187
 1931 0030 6401     		lsls	r4, r4, #5
 1932 0032 04F12800 		add	r0, r4, #40
 1933              	.LVL142:
 776:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1934              		.loc 1 776 7 view .LVU529
 1935 0036 0722     		movs	r2, #7
 777:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1936              		.loc 1 777 42 view .LVU530
 1937 0038 3444     		add	r4, r4, r6
 776:src/menu.c    ****       UserMenu.keys[i-6].shifted_label[7]='\0';
 1938              		.loc 1 776 7 view .LVU531
 1939 003a 3044     		add	r0, r0, r6
 1940 003c FFF7FEFF 		bl	strncpy
 1941              	.LVL143:
 777:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1942              		.loc 1 777 7 is_stmt 1 view .LVU532
 777:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1943              		.loc 1 777 42 is_stmt 0 view .LVU533
 1944 0040 0022     		movs	r2, #0
 778:src/menu.c    ****     }
 1945              		.loc 1 778 34 view .LVU534
 1946 0042 3423     		movs	r3, #52
 777:src/menu.c    ****       UserMenu.keys[i-6].shifted = (struct _ndmap) {K_OP, opc};
 1947              		.loc 1 777 42 view .LVU535
 1948 0044 84F82F20 		strb	r2, [r4, #47]
 778:src/menu.c    ****     }
ARM GAS  /tmp/ccGpw0cR.s 			page 56


 1949              		.loc 1 778 7 is_stmt 1 view .LVU536
 1950              	.LVL144:
 778:src/menu.c    ****     }
 1951              		.loc 1 778 34 is_stmt 0 view .LVU537
 1952 0048 2376     		strb	r3, [r4, #24]
 1953 004a E561     		str	r5, [r4, #28]
 1954              	.LBE112:
 1955              	.LBE111:
 1956              	.LBE110:
 1957              		.loc 1 781 1 view .LVU538
 1958 004c 70BD     		pop	{r4, r5, r6, pc}
 1959              	.LVL145:
 1960              	.L188:
 1961              		.loc 1 781 1 view .LVU539
 1962 004e 00BF     		.align	2
 1963              	.L187:
 1964 0050 00000000 		.word	.LANCHOR4
 1965              		.cfi_endproc
 1966              	.LFE20:
 1968              		.section	.text.build_user_menu_from_program,"ax",%progbits
 1969              		.align	1
 1970              		.p2align 2,,3
 1971              		.global	build_user_menu_from_program
 1972              		.syntax unified
 1973              		.thumb
 1974              		.thumb_func
 1975              		.fpu fpv4-sp-d16
 1977              	build_user_menu_from_program:
 1978              	.LVL146:
 1979              	.LFB19:
 679:src/menu.c    ****   // find the label 'MNU'
 1980              		.loc 1 679 1 is_stmt 1 view -0
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 16
 1983              		@ frame_needed = 0, uses_anonymous_args = 0
 682:src/menu.c    ****   int i=0;
 1984              		.loc 1 682 3 view .LVU541
 679:src/menu.c    ****   // find the label 'MNU'
 1985              		.loc 1 679 1 is_stmt 0 view .LVU542
 1986 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1987              		.cfi_def_cfa_offset 36
 1988              		.cfi_offset 4, -36
 1989              		.cfi_offset 5, -32
 1990              		.cfi_offset 6, -28
 1991              		.cfi_offset 7, -24
 1992              		.cfi_offset 8, -20
 1993              		.cfi_offset 9, -16
 1994              		.cfi_offset 10, -12
 1995              		.cfi_offset 11, -8
 1996              		.cfi_offset 14, -4
 682:src/menu.c    ****   int i=0;
 1997              		.loc 1 682 21 view .LVU543
 1998 0004 0021     		movs	r1, #0
 679:src/menu.c    ****   // find the label 'MNU'
 1999              		.loc 1 679 1 view .LVU544
 2000 0006 85B0     		sub	sp, sp, #20
 2001              		.cfi_def_cfa_offset 56
ARM GAS  /tmp/ccGpw0cR.s 			page 57


 682:src/menu.c    ****   int i=0;
 2002              		.loc 1 682 21 view .LVU545
 2003 0008 FFF7FEFF 		bl	findmultilbl
 2004              	.LVL147:
 682:src/menu.c    ****   int i=0;
 2005              		.loc 1 682 21 view .LVU546
 2006 000c 5C4B     		ldr	r3, .L240
 2007 000e 0546     		mov	r5, r0
 2008              	.LVL148:
 683:src/menu.c    ****   s_opcode op;
 2009              		.loc 1 683 3 is_stmt 1 view .LVU547
 684:src/menu.c    ****   opcode opc;
 2010              		.loc 1 684 3 view .LVU548
 685:src/menu.c    ****   char buf1[16];
 2011              		.loc 1 685 3 view .LVU549
 686:src/menu.c    ****   char *p = buf1;
 2012              		.loc 1 686 3 view .LVU550
 687:src/menu.c    ****   char c;
 2013              		.loc 1 687 3 view .LVU551
 688:src/menu.c    ****   int finished = 0;
 2014              		.loc 1 688 3 view .LVU552
 689:src/menu.c    **** 
 2015              		.loc 1 689 3 view .LVU553
 691:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2016              		.loc 1 691 3 view .LVU554
 2017              	.LBB113:
 691:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2018              		.loc 1 691 8 view .LVU555
 691:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2019              		.loc 1 691 19 view .LVU556
 692:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2020              		.loc 1 692 43 is_stmt 0 view .LVU557
 2021 0010 0022     		movs	r2, #0
 2022 0012 03F1C000 		add	r0, r3, #192
 2023              	.LVL149:
 694:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2024              		.loc 1 694 42 view .LVU558
 2025 0016 2E21     		movs	r1, #46
 2026              	.LVL150:
 2027              	.L190:
 692:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2028              		.loc 1 692 7 is_stmt 1 discriminator 3 view .LVU559
 692:src/menu.c    ****       UserMenu.keys[j].unshifted.shift = 0;
 2029              		.loc 1 692 43 is_stmt 0 discriminator 3 view .LVU560
 2030 0018 83F82020 		strb	r2, [r3, #32]
 693:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 2031              		.loc 1 693 7 is_stmt 1 discriminator 3 view .LVU561
 693:src/menu.c    ****       UserMenu.keys[j].unshifted.key_34s = K_NOP;
 2032              		.loc 1 693 40 is_stmt 0 discriminator 3 view .LVU562
 2033 001c 5A61     		str	r2, [r3, #20]
 694:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2034              		.loc 1 694 7 is_stmt 1 discriminator 3 view .LVU563
 694:src/menu.c    ****       UserMenu.keys[j].shifted_label[0] = '\0';
 2035              		.loc 1 694 42 is_stmt 0 discriminator 3 view .LVU564
 2036 001e 1974     		strb	r1, [r3, #16]
 695:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 2037              		.loc 1 695 7 is_stmt 1 discriminator 3 view .LVU565
ARM GAS  /tmp/ccGpw0cR.s 			page 58


 695:src/menu.c    ****       UserMenu.keys[j].shifted.shift = 0;
 2038              		.loc 1 695 41 is_stmt 0 discriminator 3 view .LVU566
 2039 0020 83F82820 		strb	r2, [r3, #40]
 696:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 2040              		.loc 1 696 7 is_stmt 1 discriminator 3 view .LVU567
 696:src/menu.c    ****       UserMenu.keys[j].shifted.key_34s = K_NOP;
 2041              		.loc 1 696 38 is_stmt 0 discriminator 3 view .LVU568
 2042 0024 DA61     		str	r2, [r3, #28]
 697:src/menu.c    ****   }
 2043              		.loc 1 697 7 is_stmt 1 discriminator 3 view .LVU569
 697:src/menu.c    ****   }
 2044              		.loc 1 697 40 is_stmt 0 discriminator 3 view .LVU570
 2045 0026 1976     		strb	r1, [r3, #24]
 691:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2046              		.loc 1 691 24 is_stmt 1 discriminator 3 view .LVU571
 691:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2047              		.loc 1 691 19 discriminator 3 view .LVU572
 2048 0028 2033     		adds	r3, r3, #32
 691:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2049              		.loc 1 691 3 is_stmt 0 discriminator 3 view .LVU573
 2050 002a 8342     		cmp	r3, r0
 2051 002c F4D1     		bne	.L190
 691:src/menu.c    ****       UserMenu.keys[j].unshifted_label[0] = '\0';
 2052              		.loc 1 691 3 discriminator 3 view .LVU574
 2053              	.LBE113:
 699:src/menu.c    **** 
 2054              		.loc 1 699 9 is_stmt 1 view .LVU575
 2055 002e 65B3     		cbz	r5, .L189
 2056              	.LBB114:
 713:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2057              		.loc 1 713 29 is_stmt 0 view .LVU576
 2058 0030 DFF86891 		ldr	r9, .L240+28
 2059              	.LBE114:
 689:src/menu.c    **** 
 2060              		.loc 1 689 7 view .LVU577
 2061 0034 4FF00008 		mov	r8, #0
 687:src/menu.c    ****   char c;
 2062              		.loc 1 687 9 view .LVU578
 2063 0038 6E46     		mov	r6, sp
 2064              	.LBB115:
 710:src/menu.c    ****       }
 2065              		.loc 1 710 2 view .LVU579
 2066 003a A9F1100A 		sub	r10, r9, #16
 2067              	.LBE115:
 683:src/menu.c    ****   s_opcode op;
 2068              		.loc 1 683 7 view .LVU580
 2069 003e C346     		mov	fp, r8
 687:src/menu.c    ****   char c;
 2070              		.loc 1 687 9 view .LVU581
 2071 0040 3746     		mov	r7, r6
 2072              	.LVL151:
 2073              	.L191:
 701:src/menu.c    ****     opc = getprog(pc);
 2074              		.loc 1 701 5 is_stmt 1 view .LVU582
 701:src/menu.c    ****     opc = getprog(pc);
 2075              		.loc 1 701 10 is_stmt 0 view .LVU583
 2076 0042 2846     		mov	r0, r5
ARM GAS  /tmp/ccGpw0cR.s 			page 59


 2077 0044 0021     		movs	r1, #0
 2078 0046 FFF7FEFF 		bl	do_inc
 2079              	.LVL152:
 2080 004a 0546     		mov	r5, r0
 2081              	.LVL153:
 702:src/menu.c    ****     op = (s_opcode) opc;
 2082              		.loc 1 702 5 is_stmt 1 view .LVU584
 702:src/menu.c    ****     op = (s_opcode) opc;
 2083              		.loc 1 702 11 is_stmt 0 view .LVU585
 2084 004c FFF7FEFF 		bl	getprog
 2085              	.LVL154:
 703:src/menu.c    **** 
 2086              		.loc 1 703 8 view .LVU586
 2087 0050 83B2     		uxth	r3, r0
 705:src/menu.c    ****       break;
 2088              		.loc 1 705 8 view .LVU587
 2089 0052 B3F59D7F 		cmp	r3, #314
 702:src/menu.c    ****     op = (s_opcode) opc;
 2090              		.loc 1 702 11 view .LVU588
 2091 0056 0446     		mov	r4, r0
 2092              	.LVL155:
 703:src/menu.c    **** 
 2093              		.loc 1 703 5 is_stmt 1 view .LVU589
 705:src/menu.c    ****       break;
 2094              		.loc 1 705 5 view .LVU590
 705:src/menu.c    ****       break;
 2095              		.loc 1 705 8 is_stmt 0 view .LVU591
 2096 0058 17D0     		beq	.L189
 707:src/menu.c    ****       if (i==4) {
 2097              		.loc 1 707 5 is_stmt 1 view .LVU592
 707:src/menu.c    ****       if (i==4) {
 2098              		.loc 1 707 8 is_stmt 0 view .LVU593
 2099 005a B3F5807F 		cmp	r3, #256
 2100 005e 43D0     		beq	.L232
 720:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2101              		.loc 1 720 5 is_stmt 1 view .LVU594
 720:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2102              		.loc 1 720 9 is_stmt 0 view .LVU595
 2103 0060 00F47042 		and	r2, r0, #61440
 720:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2104              		.loc 1 720 8 view .LVU596
 2105 0064 B2F5704F 		cmp	r2, #61440
 2106 0068 12D0     		beq	.L233
 2107              	.L197:
 741:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2108              		.loc 1 741 7 is_stmt 1 view .LVU597
 741:src/menu.c    **** 	if (isRARG(op) && p == buf1) {
 2109              		.loc 1 741 10 is_stmt 0 view .LVU598
 2110 006a B742     		cmp	r7, r6
 2111 006c 26D0     		beq	.L234
 759:src/menu.c    ****       }
 2112              		.loc 1 759 11 view .LVU599
 2113 006e 4FF00008 		mov	r8, #0
 2114              	.LVL156:
 2115              	.L203:
 761:src/menu.c    ****       i++;
 2116              		.loc 1 761 7 is_stmt 1 view .LVU600
ARM GAS  /tmp/ccGpw0cR.s 			page 60


 2117 0072 5846     		mov	r0, fp
 2118 0074 2146     		mov	r1, r4
 2119 0076 3246     		mov	r2, r6
 2120 0078 FFF7FEFF 		bl	umen_store
 2121              	.LVL157:
 762:src/menu.c    ****     }
 2122              		.loc 1 762 7 view .LVU601
 762:src/menu.c    ****     }
 2123              		.loc 1 762 8 is_stmt 0 view .LVU602
 2124 007c 0BF1010B 		add	fp, fp, #1
 2125              	.LVL158:
 762:src/menu.c    ****     }
 2126              		.loc 1 762 8 view .LVU603
 2127 0080 3746     		mov	r7, r6
 2128              	.LVL159:
 2129              	.L196:
 699:src/menu.c    **** 
 2130              		.loc 1 699 9 is_stmt 1 view .LVU604
 2131 0082 15B1     		cbz	r5, .L189
 699:src/menu.c    **** 
 2132              		.loc 1 699 13 is_stmt 0 discriminator 1 view .LVU605
 2133 0084 BBF10C0F 		cmp	fp, #12
 2134 0088 DBD1     		bne	.L191
 2135              	.LVL160:
 2136              	.L189:
 765:src/menu.c    **** 
 2137              		.loc 1 765 1 view .LVU606
 2138 008a 05B0     		add	sp, sp, #20
 2139              		.cfi_remember_state
 2140              		.cfi_def_cfa_offset 36
 2141              		@ sp needed
 2142 008c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2143              	.LVL161:
 2144              	.L233:
 2145              		.cfi_restore_state
 720:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2146              		.loc 1 720 24 discriminator 1 view .LVU607
 2147 0090 C0F30321 		ubfx	r1, r0, #8, #4
 720:src/menu.c    ****       if ( finished==1 || p - buf1 == 6 ) { // if we've already finished an alpha...
 2148              		.loc 1 720 20 discriminator 1 view .LVU608
 2149 0094 0A29     		cmp	r1, #10
 2150 0096 E8D1     		bne	.L197
 721:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2151              		.loc 1 721 7 is_stmt 1 view .LVU609
 721:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2152              		.loc 1 721 10 is_stmt 0 view .LVU610
 2153 0098 B8F1000F 		cmp	r8, #0
 2154 009c 40D1     		bne	.L198
 721:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2155              		.loc 1 721 29 discriminator 1 view .LVU611
 2156 009e BB1B     		subs	r3, r7, r6
 2157              	.LVL162:
 721:src/menu.c    **** 	umen_store (i, OP_NIL | OP_NOP, buf1); // no command, so store a NOP
 2158              		.loc 1 721 24 discriminator 1 view .LVU612
 2159 00a0 062B     		cmp	r3, #6
 2160 00a2 3DD0     		beq	.L198
 2161              	.LVL163:
ARM GAS  /tmp/ccGpw0cR.s 			page 61


 727:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2162              		.loc 1 727 7 is_stmt 1 view .LVU613
 729:src/menu.c    **** 	*p++ = c;
 2163              		.loc 1 729 10 is_stmt 0 view .LVU614
 2164 00a4 14F47F0F 		tst	r4, #16711680
 727:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2165              		.loc 1 727 12 view .LVU615
 2166 00a8 3C70     		strb	r4, [r7]
 728:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2167              		.loc 1 728 7 is_stmt 1 view .LVU616
 728:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2168              		.loc 1 728 9 is_stmt 0 view .LVU617
 2169 00aa C4F30743 		ubfx	r3, r4, #16, #8
 2170              	.LVL164:
 729:src/menu.c    **** 	*p++ = c;
 2171              		.loc 1 729 7 is_stmt 1 view .LVU618
 729:src/menu.c    **** 	*p++ = c;
 2172              		.loc 1 729 10 is_stmt 0 view .LVU619
 2173 00ae 24D1     		bne	.L235
 2174              	.LVL165:
 2175              	.L200:
 727:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2176              		.loc 1 727 9 view .LVU620
 2177 00b0 0137     		adds	r7, r7, #1
 2178              	.LVL166:
 2179              	.L202:
 735:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2180              		.loc 1 735 7 is_stmt 1 view .LVU621
 735:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2181              		.loc 1 735 10 is_stmt 0 view .LVU622
 2182 00b2 0023     		movs	r3, #0
 2183 00b4 3B70     		strb	r3, [r7]
 736:src/menu.c    **** 	finished = 1;
 2184              		.loc 1 736 7 is_stmt 1 view .LVU623
 737:src/menu.c    ****       }
 2185              		.loc 1 737 11 is_stmt 0 view .LVU624
 2186 00b6 4FF00108 		mov	r8, #1
 2187 00ba E2E7     		b	.L196
 2188              	.LVL167:
 2189              	.L234:
 742:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2190              		.loc 1 742 2 is_stmt 1 view .LVU625
 2191 00bc A0B2     		uxth	r0, r4
 2192              	.LVL168:
 742:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2193              		.loc 1 742 5 is_stmt 0 view .LVU626
 2194 00be 72B1     		cbz	r2, .L204
 742:src/menu.c    **** 	  const s_opcode rarg = RARG_CMD(op);
 2195              		.loc 1 742 6 discriminator 1 view .LVU627
 2196 00c0 B2F5704F 		cmp	r2, #61440
 2197 00c4 0BD0     		beq	.L204
 2198              	.LBB116:
 743:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2199              		.loc 1 743 4 is_stmt 1 view .LVU628
 743:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2200              		.loc 1 743 26 is_stmt 0 view .LVU629
 2201 00c6 1B0A     		lsrs	r3, r3, #8
ARM GAS  /tmp/ccGpw0cR.s 			page 62


 2202              	.LVL169:
 743:src/menu.c    **** 	  if ( rarg != RARG_ALPHA && rarg != RARG_CONV
 2203              		.loc 1 743 26 view .LVU630
 2204 00c8 203B     		subs	r3, r3, #32
 2205 00ca DBB2     		uxtb	r3, r3
 2206              	.LVL170:
 744:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2207              		.loc 1 744 4 is_stmt 1 view .LVU631
 744:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2208              		.loc 1 744 7 is_stmt 0 view .LVU632
 2209 00cc 242B     		cmp	r3, #36
 2210 00ce 06D0     		beq	.L204
 744:src/menu.c    **** 	       && rarg != RARG_CONST && rarg != RARG_CONST_CMPLX
 2211              		.loc 1 744 28 discriminator 1 view .LVU633
 2212 00d0 6C2B     		cmp	r3, #108
 2213 00d2 04D0     		beq	.L204
 745:src/menu.c    **** 	       && ( (op & 0xff) == 0 ) ) { // argument = 0 
 2214              		.loc 1 745 9 view .LVU634
 2215 00d4 012B     		cmp	r3, #1
 2216 00d6 02D9     		bls	.L204
 746:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2217              		.loc 1 746 9 view .LVU635
 2218 00d8 10F0FF0F 		tst	r0, #255
 2219 00dc 4BD0     		beq	.L236
 2220              	.LVL171:
 2221              	.L204:
 746:src/menu.c    **** 	    catcmd (op, buf1); // display rarg without argument
 2222              		.loc 1 746 9 view .LVU636
 2223              	.LBE116:
 754:src/menu.c    **** 	}
 2224              		.loc 1 754 4 is_stmt 1 view .LVU637
 2225 00de 3146     		mov	r1, r6
 2226 00e0 2046     		mov	r0, r4
 2227 00e2 FFF7FEFF 		bl	prt_umen
 2228              	.LVL172:
 2229 00e6 C4E7     		b	.L203
 2230              	.LVL173:
 2231              	.L232:
 708:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2232              		.loc 1 708 7 view .LVU638
 708:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_ARROW, -1};
 2233              		.loc 1 708 10 is_stmt 0 view .LVU639
 2234 00e8 BBF1040F 		cmp	fp, #4
 2235 00ec 28D0     		beq	.L237
 712:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2236              		.loc 1 712 12 is_stmt 1 view .LVU640
 712:src/menu.c    **** 	UserMenu.keys[i].unshifted = (struct _ndmap) {K_CMPLX, -1};
 2237              		.loc 1 712 15 is_stmt 0 view .LVU641
 2238 00ee BBF1050F 		cmp	fp, #5
 2239 00f2 32D0     		beq	.L238
 2240              	.LVL174:
 2241              	.L195:
 716:src/menu.c    ****       continue;
 2242              		.loc 1 716 7 is_stmt 1 view .LVU642
 716:src/menu.c    ****       continue;
 2243              		.loc 1 716 9 is_stmt 0 view .LVU643
 2244 00f4 0BF1010B 		add	fp, fp, #1
ARM GAS  /tmp/ccGpw0cR.s 			page 63


 2245              	.LVL175:
 717:src/menu.c    ****     }
 2246              		.loc 1 717 7 is_stmt 1 view .LVU644
 2247 00f8 C3E7     		b	.L196
 2248              	.LVL176:
 2249              	.L235:
 730:src/menu.c    **** 	c = opc>>24;
 2250              		.loc 1 730 2 view .LVU645
 730:src/menu.c    **** 	c = opc>>24;
 2251              		.loc 1 730 7 is_stmt 0 view .LVU646
 2252 00fa 7B70     		strb	r3, [r7, #1]
 731:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2253              		.loc 1 731 2 is_stmt 1 view .LVU647
 732:src/menu.c    **** 	  *p++ = c;
 2254              		.loc 1 732 5 is_stmt 0 view .LVU648
 2255 00fc 230E     		lsrs	r3, r4, #24
 2256              	.LVL177:
 731:src/menu.c    **** 	if (c != '\0') // if character 3 isn't null..
 2257              		.loc 1 731 4 view .LVU649
 2258 00fe 4FEA1461 		lsr	r1, r4, #24
 2259              	.LVL178:
 732:src/menu.c    **** 	  *p++ = c;
 2260              		.loc 1 732 2 is_stmt 1 view .LVU650
 732:src/menu.c    **** 	  *p++ = c;
 2261              		.loc 1 732 5 is_stmt 0 view .LVU651
 2262 0102 36D0     		beq	.L239
 733:src/menu.c    ****       }
 2263              		.loc 1 733 4 is_stmt 1 view .LVU652
 733:src/menu.c    ****       }
 2264              		.loc 1 733 6 is_stmt 0 view .LVU653
 2265 0104 FB1C     		adds	r3, r7, #3
 2266              	.LVL179:
 736:src/menu.c    **** 	finished = 1;
 2267              		.loc 1 736 26 view .LVU654
 2268 0106 A3EB0608 		sub	r8, r3, r6
 736:src/menu.c    **** 	finished = 1;
 2269              		.loc 1 736 21 view .LVU655
 2270 010a A8F10608 		sub	r8, r8, #6
 735:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2271              		.loc 1 735 10 view .LVU656
 2272 010e 0022     		movs	r2, #0
 736:src/menu.c    **** 	finished = 1;
 2273              		.loc 1 736 21 view .LVU657
 2274 0110 B8FA88F8 		clz	r8, r8
 733:src/menu.c    ****       }
 2275              		.loc 1 733 9 view .LVU658
 2276 0114 B970     		strb	r1, [r7, #2]
 735:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2277              		.loc 1 735 7 is_stmt 1 view .LVU659
 735:src/menu.c    ****       if (c == '\0' || p - buf1 == 6) {
 2278              		.loc 1 735 10 is_stmt 0 view .LVU660
 2279 0116 FA70     		strb	r2, [r7, #3]
 736:src/menu.c    **** 	finished = 1;
 2280              		.loc 1 736 7 is_stmt 1 view .LVU661
 736:src/menu.c    **** 	finished = 1;
 2281              		.loc 1 736 21 is_stmt 0 view .LVU662
 2282 0118 4FEA5818 		lsr	r8, r8, #5
ARM GAS  /tmp/ccGpw0cR.s 			page 64


 733:src/menu.c    ****       }
 2283              		.loc 1 733 6 view .LVU663
 2284 011c 1F46     		mov	r7, r3
 2285 011e B0E7     		b	.L196
 2286              	.LVL180:
 2287              	.L198:
 722:src/menu.c    **** 	i++;
 2288              		.loc 1 722 2 is_stmt 1 view .LVU664
 2289 0120 5846     		mov	r0, fp
 2290              	.LVL181:
 722:src/menu.c    **** 	i++;
 2291              		.loc 1 722 2 is_stmt 0 view .LVU665
 2292 0122 3246     		mov	r2, r6
 2293 0124 4FF48071 		mov	r1, #256
 724:src/menu.c    **** 	finished = 0;
 2294              		.loc 1 724 8 view .LVU666
 2295 0128 3746     		mov	r7, r6
 2296              	.LVL182:
 722:src/menu.c    **** 	i++;
 2297              		.loc 1 722 2 view .LVU667
 2298 012a FFF7FEFF 		bl	umen_store
 2299              	.LVL183:
 723:src/menu.c    ****     	p = buf1;
 2300              		.loc 1 723 2 is_stmt 1 view .LVU668
 729:src/menu.c    **** 	*p++ = c;
 2301              		.loc 1 729 10 is_stmt 0 view .LVU669
 2302 012e 14F47F0F 		tst	r4, #16711680
 723:src/menu.c    ****     	p = buf1;
 2303              		.loc 1 723 3 view .LVU670
 2304 0132 0BF1010B 		add	fp, fp, #1
 2305              	.LVL184:
 724:src/menu.c    **** 	finished = 0;
 2306              		.loc 1 724 6 is_stmt 1 view .LVU671
 725:src/menu.c    ****       } // ..and start reading the new alpha
 2307              		.loc 1 725 2 view .LVU672
 727:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2308              		.loc 1 727 7 view .LVU673
 727:src/menu.c    ****       c = (opc >> 16) & 0xff;
 2309              		.loc 1 727 12 is_stmt 0 view .LVU674
 2310 0136 3C70     		strb	r4, [r7]
 728:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2311              		.loc 1 728 7 is_stmt 1 view .LVU675
 728:src/menu.c    ****       if (c != '\0') { // if character 2 isn't null..
 2312              		.loc 1 728 9 is_stmt 0 view .LVU676
 2313 0138 C4F30743 		ubfx	r3, r4, #16, #8
 2314              	.LVL185:
 729:src/menu.c    **** 	*p++ = c;
 2315              		.loc 1 729 7 is_stmt 1 view .LVU677
 729:src/menu.c    **** 	*p++ = c;
 2316              		.loc 1 729 10 is_stmt 0 view .LVU678
 2317 013c B8D0     		beq	.L200
 2318              	.LVL186:
 729:src/menu.c    **** 	*p++ = c;
 2319              		.loc 1 729 10 view .LVU679
 2320 013e DCE7     		b	.L235
 2321              	.LVL187:
 2322              	.L237:
ARM GAS  /tmp/ccGpw0cR.s 			page 65


 2323              	.LBB117:
 709:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2324              		.loc 1 709 2 is_stmt 1 view .LVU680
 709:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2325              		.loc 1 709 29 is_stmt 0 view .LVU681
 2326 0140 104B     		ldr	r3, .L240+4
 2327              	.LVL188:
 710:src/menu.c    ****       }
 2328              		.loc 1 710 2 view .LVU682
 2329 0142 114C     		ldr	r4, .L240+8
 709:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2330              		.loc 1 709 29 view .LVU683
 2331 0144 93E80300 		ldm	r3, {r0, r1}
 2332              	.LVL189:
 709:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2333              		.loc 1 709 29 view .LVU684
 2334 0148 104B     		ldr	r3, .L240+12
 710:src/menu.c    ****       }
 2335              		.loc 1 710 2 view .LVU685
 2336 014a 0522     		movs	r2, #5
 709:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, arrow_key_string,5);
 2337              		.loc 1 709 29 view .LVU686
 2338 014c 83E80300 		stm	r3, {r0, r1}
 710:src/menu.c    ****       }
 2339              		.loc 1 710 2 is_stmt 1 view .LVU687
 2340 0150 2168     		ldr	r1, [r4]
 2341 0152 5046     		mov	r0, r10
 2342 0154 FFF7FEFF 		bl	strncpy
 2343              	.LVL190:
 2344              	.LBE117:
 2345 0158 CCE7     		b	.L195
 2346              	.LVL191:
 2347              	.L238:
 2348              	.LBB118:
 713:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2349              		.loc 1 713 2 view .LVU688
 713:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2350              		.loc 1 713 29 is_stmt 0 view .LVU689
 2351 015a 0D4B     		ldr	r3, .L240+16
 2352              	.LVL192:
 713:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2353              		.loc 1 713 29 view .LVU690
 2354 015c 93E80300 		ldm	r3, {r0, r1}
 2355              	.LVL193:
 714:src/menu.c    ****       }
 2356              		.loc 1 714 2 view .LVU691
 2357 0160 0C4B     		ldr	r3, .L240+20
 713:src/menu.c    **** 	strncpy(UserMenu.keys[i].unshifted_label, cmplx_key_string,5);
 2358              		.loc 1 713 29 view .LVU692
 2359 0162 89E80300 		stm	r9, {r0, r1}
 714:src/menu.c    ****       }
 2360              		.loc 1 714 2 is_stmt 1 view .LVU693
 2361 0166 5A46     		mov	r2, fp
 2362 0168 1968     		ldr	r1, [r3]
 2363 016a 0B48     		ldr	r0, .L240+24
 2364 016c FFF7FEFF 		bl	strncpy
 2365              	.LVL194:
ARM GAS  /tmp/ccGpw0cR.s 			page 66


 2366 0170 C0E7     		b	.L195
 2367              	.LVL195:
 2368              	.L239:
 714:src/menu.c    ****       }
 2369              		.loc 1 714 2 is_stmt 0 view .LVU694
 2370              	.LBE118:
 730:src/menu.c    **** 	c = opc>>24;
 2371              		.loc 1 730 4 view .LVU695
 2372 0172 0237     		adds	r7, r7, #2
 2373              	.LVL196:
 730:src/menu.c    **** 	c = opc>>24;
 2374              		.loc 1 730 4 view .LVU696
 2375 0174 9DE7     		b	.L202
 2376              	.LVL197:
 2377              	.L236:
 2378              	.LBB119:
 747:src/menu.c    **** 	  }
 2379              		.loc 1 747 6 is_stmt 1 view .LVU697
 2380 0176 3146     		mov	r1, r6
 2381 0178 FFF7FEFF 		bl	catcmd
 2382              	.LVL198:
 747:src/menu.c    **** 	  }
 2383              		.loc 1 747 6 is_stmt 0 view .LVU698
 2384 017c 79E7     		b	.L203
 2385              	.L241:
 2386 017e 00BF     		.align	2
 2387              	.L240:
 2388 0180 00000000 		.word	.LANCHOR4
 2389 0184 00000000 		.word	.LANCHOR5
 2390 0188 00000000 		.word	.LANCHOR6
 2391 018c 90000000 		.word	.LANCHOR4+144
 2392 0190 08000000 		.word	.LANCHOR5+8
 2393 0194 00000000 		.word	.LANCHOR7
 2394 0198 C0000000 		.word	.LANCHOR4+192
 2395 019c B0000000 		.word	.LANCHOR4+176
 2396              	.LBE119:
 2397              		.cfi_endproc
 2398              	.LFE19:
 2400              		.section	.text.build_user_menu,"ax",%progbits
 2401              		.align	1
 2402              		.p2align 2,,3
 2403              		.global	build_user_menu
 2404              		.syntax unified
 2405              		.thumb
 2406              		.thumb_func
 2407              		.fpu fpv4-sp-d16
 2409              	build_user_menu:
 2410              	.LFB18:
 672:src/menu.c    ****   // find the label 'MNU'
 2411              		.loc 1 672 27 is_stmt 1 view -0
 2412              		.cfi_startproc
 2413              		@ args = 0, pretend = 0, frame = 0
 2414              		@ frame_needed = 0, uses_anonymous_args = 0
 2415              		@ link register save eliminated.
 674:src/menu.c    ****    build_user_menu_from_program (lbl);
 2416              		.loc 1 674 4 view .LVU700
 2417              	.LVL199:
ARM GAS  /tmp/ccGpw0cR.s 			page 67


 675:src/menu.c    **** }
 2418              		.loc 1 675 4 view .LVU701
 2419 0000 0148     		ldr	r0, .L243
 2420 0002 FFF7FEBF 		b	build_user_menu_from_program
 2421              	.LVL200:
 2422              	.L244:
 2423 0006 00BF     		.align	2
 2424              	.L243:
 2425 0008 4DF04E55 		.word	1431236685
 2426              		.cfi_endproc
 2427              	.LFE18:
 2429              		.section	.text.shutdown,"ax",%progbits
 2430              		.align	1
 2431              		.p2align 2,,3
 2432              		.global	shutdown
 2433              		.syntax unified
 2434              		.thumb
 2435              		.thumb_func
 2436              		.fpu fpv4-sp-d16
 2438              	shutdown:
 2439              	.LFB22:
 2440              		.file 2 "src/console.c"
   1:src/console.c **** /* This file is part of 34S.
   2:src/console.c ****  * 
   3:src/console.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/console.c ****  * it under the terms of the GNU General Public License as published by
   5:src/console.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/console.c ****  * (at your option) any later version.
   7:src/console.c ****  * 
   8:src/console.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/console.c ****  * GNU General Public License for more details.
  12:src/console.c ****  * 
  13:src/console.c ****  * You should have received a copy of the GNU General Public License
  14:src/console.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/console.c ****  */
  16:src/console.c **** 
  17:src/console.c **** /*
  18:src/console.c ****  *  This is the console emulator part
  19:src/console.c ****  */
  20:src/console.c **** #include <stdlib.h>
  21:src/console.c **** #include <stdio.h>
  22:src/console.c **** #include <ctype.h>
  23:src/console.c **** #include <string.h>
  24:src/console.c **** 
  25:src/console.c **** #ifdef DM42
  26:src/console.c **** #include "dmcp.h"
  27:src/console.c **** #endif
  28:src/console.c **** 
  29:src/console.c **** #define DM42SAFE
  30:src/console.c **** 
  31:src/console.c **** #include "keys.h"
  32:src/console.c **** #include "display.h"
  33:src/console.c **** #include "lcd.h"
  34:src/console.c **** #include "int.h"
  35:src/console.c **** #include "consts.h"
ARM GAS  /tmp/ccGpw0cR.s 			page 68


  36:src/console.c **** #include "storage.h"
  37:src/console.c **** #include "catalogues.h"
  38:src/console.c **** #ifdef INCLUDE_STOPWATCH
  39:src/console.c **** #include "stopwatch.h"
  40:src/console.c **** #endif
  41:src/console.c **** #undef DM42SAFE
  42:src/console.c **** 
  43:src/console.c **** 
  44:src/console.c **** #ifdef DM42
  45:src/console.c **** 
  46:src/console.c **** #include <menu.c>
  47:src/console.c **** 
  48:src/console.c **** struct _ndmap no_key = {.key_34s = K_NOP, .shift = 0};
  49:src/console.c **** struct _ndmap heartbeat = {.key_34s = K_HEARTBEAT, .shift = -1};
  50:src/console.c **** struct _ndmap f_shift = {.key_34s = K_F, .shift = -1};
  51:src/console.c **** struct _ndmap g_shift = {.key_34s = K_G, .shift = -1};
  52:src/console.c **** struct _ndmap h_shift = {.key_34s = K_H, .shift = -1};
  53:src/console.c **** struct _ndmap release = {.key_34s = K_RELEASE, .shift = -1};
  54:src/console.c **** struct _ndmap do_multi (struct _ndmap r);
  55:src/console.c **** 
  56:src/console.c **** static struct _ndmap remap (const int c) {
  57:src/console.c **** 
  58:src/console.c ****   struct _ndmap no_change = {.key_34s = (char) c, .shift = 0};
  59:src/console.c **** 
  60:src/console.c **** #include "keytran.c"
  61:src/console.c **** 
  62:src/console.c ****   if (c==K_HEARTBEAT) return heartbeat;
  63:src/console.c **** 
  64:src/console.c ****   if (c == 99) return release; // turn KEY_DOUBLE_RELEASE into ordinary release
  65:src/console.c **** 
  66:src/console.c ****   if (c == 44 ) {
  67:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
  68:src/console.c ****     return sshot;
  69:src/console.c ****   }
  70:src/console.c ****   
  71:src/console.c ****   if (Running | Pause) {
  72:src/console.c ****     return mapping_running[c];
  73:src/console.c ****   }
  74:src/console.c **** 
  75:src/console.c ****   struct _menu Ref = get_current_menu_ref();
  76:src/console.c ****   
  77:src/console.c ****   switch (c) {
  78:src/console.c ****   case KEY_F1:
  79:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[0].unshifted;
  80:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
  81:src/console.c ****   case KEY_F2:
  82:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[1].unshifted;
  83:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
  84:src/console.c ****   case KEY_F3:
  85:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[2].unshifted;
  86:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
  87:src/console.c ****   case KEY_F4:
  88:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[3].unshifted;
  89:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
  90:src/console.c ****   case KEY_F5:
  91:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[4].unshifted;
  92:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
ARM GAS  /tmp/ccGpw0cR.s 			page 69


  93:src/console.c ****   case KEY_F6:
  94:src/console.c ****     if (cur_shift() == SHIFT_N) return Ref.keys[5].unshifted;
  95:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
  96:src/console.c ****   }
  97:src/console.c **** 
  98:src/console.c ****   if ( get_alpha_state() ) {
  99:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 100:src/console.c ****       switch (cur_shift()) { 
 101:src/console.c ****       case SHIFT_N:
 102:src/console.c **** 	return mapping_none[c]; // N -> F
 103:src/console.c **** 	break;
 104:src/console.c ****       case SHIFT_F:
 105:src/console.c **** 	return mapping_fshift[c]; // F -> G
 106:src/console.c **** 	break;
 107:src/console.c ****       case SHIFT_G:
 108:src/console.c **** 	return h_shift; // G -> H
 109:src/console.c **** 	break;
 110:src/console.c ****       case SHIFT_H:
 111:src/console.c **** 	return h_shift; // H -> N
 112:src/console.c ****       default:
 113:src/console.c **** 	return no_change;
 114:src/console.c ****       }
 115:src/console.c ****     }
 116:src/console.c ****     return mapping_alpha [c];
 117:src/console.c ****   }
 118:src/console.c **** 
 119:src/console.c ****   switch (cur_shift()) {
 120:src/console.c ****   case SHIFT_N:    
 121:src/console.c ****     return mapping_none[c];
 122:src/console.c ****     break;
 123:src/console.c ****   case SHIFT_F:
 124:src/console.c ****     return mapping_fshift[c];
 125:src/console.c ****     break;
 126:src/console.c ****   case SHIFT_G:
 127:src/console.c ****     return mapping_gshift[c];
 128:src/console.c ****     break;
 129:src/console.c ****   default:
 130:src/console.c ****     return no_change;
 131:src/console.c ****   }
 132:src/console.c **** }
 133:src/console.c **** 
 134:src/console.c **** #endif
 135:src/console.c **** 
 136:src/console.c **** void shutdown( void )
 137:src/console.c **** {
 2441              		.loc 2 137 1 view -0
 2442              		.cfi_startproc
 2443              		@ args = 0, pretend = 0, frame = 0
 2444              		@ frame_needed = 0, uses_anonymous_args = 0
 2445              		@ link register save eliminated.
 138:src/console.c **** #ifndef DM42
 139:src/console.c ****   checksum_all();
 140:src/console.c ****   setuptty( 1 );
 141:src/console.c ****   save_statefile( NULL );
 142:src/console.c ****   exit( 0 );
 143:src/console.c **** #else
 144:src/console.c ****   //  save_ram_file(0);
ARM GAS  /tmp/ccGpw0cR.s 			page 70


 145:src/console.c ****   SET_ST(STAT_PGM_END);
 2446              		.loc 2 145 3 view .LVU703
 2447 0000 024A     		ldr	r2, .L246
 2448 0002 1368     		ldr	r3, [r2]
 2449 0004 43F40073 		orr	r3, r3, #512
 2450 0008 1360     		str	r3, [r2]
 146:src/console.c **** #endif
 147:src/console.c **** }
 2451              		.loc 2 147 1 is_stmt 0 view .LVU704
 2452 000a 7047     		bx	lr
 2453              	.L247:
 2454              		.align	2
 2455              	.L246:
 2456 000c 00200010 		.word	268443648
 2457              		.cfi_endproc
 2458              	.LFE22:
 2460              		.section	.text.is_key_pressed,"ax",%progbits
 2461              		.align	1
 2462              		.p2align 2,,3
 2463              		.global	is_key_pressed
 2464              		.syntax unified
 2465              		.thumb
 2466              		.thumb_func
 2467              		.fpu fpv4-sp-d16
 2469              	is_key_pressed:
 2470              	.LFB23:
 148:src/console.c **** 
 149:src/console.c **** 
 150:src/console.c **** /*
 151:src/console.c ****  *  Dummies
 152:src/console.c ****  */
 153:src/console.c **** int is_key_pressed(void) 
 154:src/console.c **** {
 2471              		.loc 2 154 1 is_stmt 1 view -0
 2472              		.cfi_startproc
 2473              		@ args = 0, pretend = 0, frame = 0
 2474              		@ frame_needed = 0, uses_anonymous_args = 0
 155:src/console.c **** #ifdef DM42
 156:src/console.c ****   return !key_empty();
 2475              		.loc 2 156 3 view .LVU706
 154:src/console.c **** #ifdef DM42
 2476              		.loc 2 154 1 is_stmt 0 view .LVU707
 2477 0000 08B5     		push	{r3, lr}
 2478              		.cfi_def_cfa_offset 8
 2479              		.cfi_offset 3, -8
 2480              		.cfi_offset 14, -4
 2481              		.loc 2 156 11 view .LVU708
 2482 0002 034B     		ldr	r3, .L250
 2483 0004 9847     		blx	r3
 2484              	.LVL201:
 157:src/console.c **** #else
 158:src/console.c ****   return 0;
 159:src/console.c **** #endif
 160:src/console.c **** }
 2485              		.loc 2 160 1 view .LVU709
 2486 0006 B0FA80F0 		clz	r0, r0
 2487 000a 4009     		lsrs	r0, r0, #5
ARM GAS  /tmp/ccGpw0cR.s 			page 71


 2488 000c 08BD     		pop	{r3, pc}
 2489              	.L251:
 2490 000e 00BF     		.align	2
 2491              	.L250:
 2492 0010 7D030008 		.word	134218621
 2493              		.cfi_endproc
 2494              	.LFE23:
 2496              		.section	.text.get_key,"ax",%progbits
 2497              		.align	1
 2498              		.p2align 2,,3
 2499              		.global	get_key
 2500              		.syntax unified
 2501              		.thumb
 2502              		.thumb_func
 2503              		.fpu fpv4-sp-d16
 2505              	get_key:
 2506              	.LFB24:
 161:src/console.c **** 
 162:src/console.c **** int get_key(void)
 163:src/console.c **** {
 2507              		.loc 2 163 1 is_stmt 1 view -0
 2508              		.cfi_startproc
 2509              		@ args = 0, pretend = 0, frame = 0
 2510              		@ frame_needed = 0, uses_anonymous_args = 0
 2511              		@ link register save eliminated.
 164:src/console.c ****   #ifdef DM42
 165:src/console.c ****   return key_pop();
 2512              		.loc 2 165 3 view .LVU711
 2513              		.loc 2 165 10 is_stmt 0 view .LVU712
 2514 0000 004B     		ldr	r3, .L253
 2515 0002 1847     		bx	r3
 2516              	.LVL202:
 2517              	.L254:
 2518              		.align	2
 2519              	.L253:
 2520 0004 89030008 		.word	134218633
 2521              		.cfi_endproc
 2522              	.LFE24:
 2524              		.section	.text.put_key,"ax",%progbits
 2525              		.align	1
 2526              		.p2align 2,,3
 2527              		.global	put_key
 2528              		.syntax unified
 2529              		.thumb
 2530              		.thumb_func
 2531              		.fpu fpv4-sp-d16
 2533              	put_key:
 2534              	.LVL203:
 2535              	.LFB25:
 166:src/console.c ****   #else
 167:src/console.c ****   return 0;
 168:src/console.c ****   #endif
 169:src/console.c **** }
 170:src/console.c **** 
 171:src/console.c **** /*
 172:src/console.c ****  * k is a WP34s key code. I need to translate it into a DM42 keycode, and push it.
 173:src/console.c ****  * 
ARM GAS  /tmp/ccGpw0cR.s 			page 72


 174:src/console.c ****  */
 175:src/console.c **** int put_key( int k )
 176:src/console.c **** {
 2536              		.loc 2 176 1 is_stmt 1 view -0
 2537              		.cfi_startproc
 2538              		@ args = 0, pretend = 0, frame = 48
 2539              		@ frame_needed = 0, uses_anonymous_args = 0
 2540              		@ link register save eliminated.
 177:src/console.c ****   #ifdef DM42
 178:src/console.c ****   const char wp34s_to_DM42[] = {
 2541              		.loc 2 178 3 view .LVU714
 176:src/console.c ****   #ifdef DM42
 2542              		.loc 2 176 1 is_stmt 0 view .LVU715
 2543 0000 70B4     		push	{r4, r5, r6}
 2544              		.cfi_def_cfa_offset 12
 2545              		.cfi_offset 4, -12
 2546              		.cfi_offset 5, -8
 2547              		.cfi_offset 6, -4
 2548              		.loc 2 178 14 view .LVU716
 2549 0002 0E4D     		ldr	r5, .L258
 176:src/console.c ****   #ifdef DM42
 2550              		.loc 2 176 1 view .LVU717
 2551 0004 0646     		mov	r6, r0
 2552              		.loc 2 178 14 view .LVU718
 2553 0006 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2554              	.LVL204:
 176:src/console.c ****   #ifdef DM42
 2555              		.loc 2 176 1 view .LVU719
 2556 0008 8DB0     		sub	sp, sp, #52
 2557              		.cfi_def_cfa_offset 64
 2558              		.loc 2 178 14 view .LVU720
 2559 000a 01AC     		add	r4, sp, #4
 2560 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2561 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2562 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2563 0012 95E80700 		ldm	r5, {r0, r1, r2}
 2564 0016 03C4     		stmia	r4!, {r0, r1}
 179:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 180:src/console.c ****     KEY_STO, KEY_RCL, KEY_RDN, KEY_SHIFT, KEY_COS, KEY_TAN, // 6-11
 181:src/console.c ****     KEY_ENTER, KEY_SWAP, KEY_CHS, KEY_E, KEY_BSP, 0, // 12-17
 182:src/console.c ****     KEY_XEQ, KEY_7, KEY_8, KEY_9, KEY_DIV, 0, // 18-23
 183:src/console.c ****     KEY_UP, KEY_4, KEY_5, KEY_6, KEY_MUL, 0, // 24-29
 184:src/console.c ****     KEY_DOWN, KEY_1, KEY_2, KEY_3, KEY_SUB, 0, // 30-35
 185:src/console.c ****     KEY_EXIT, KEY_0, KEY_DOT, KEY_RUN, KEY_ADD,}; // 36-40
 186:src/console.c ****   
 187:src/console.c ****   if ( ( k >= K00 ) && ( k <= K64 ) ) {
 2565              		.loc 2 187 6 view .LVU721
 2566 0018 282E     		cmp	r6, #40
 178:src/console.c ****     KEY_SIGMA, KEY_INV, KEY_SQRT, KEY_LOG, KEY_F5, KEY_F6, // 0-5
 2567              		.loc 2 178 14 view .LVU722
 2568 001a 2270     		strb	r2, [r4]
 2569              		.loc 2 187 3 is_stmt 1 view .LVU723
 2570              		.loc 2 187 6 is_stmt 0 view .LVU724
 2571 001c 08D8     		bhi	.L256
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2572              		.loc 2 188 5 is_stmt 1 view .LVU725
 2573              		.loc 2 188 36 is_stmt 0 view .LVU726
ARM GAS  /tmp/ccGpw0cR.s 			page 73


 2574 001e 0CAB     		add	r3, sp, #48
 2575 0020 3046     		mov	r0, r6
 2576 0022 1844     		add	r0, r0, r3
 2577              		.loc 2 188 12 view .LVU727
 2578 0024 064B     		ldr	r3, .L258+4
 2579 0026 10F82C0C 		ldrb	r0, [r0, #-44]	@ zero_extendqisi2
 189:src/console.c ****   }
 190:src/console.c ****   else {
 191:src/console.c ****     return -1;
 192:src/console.c ****   }
 193:src/console.c ****   #else
 194:src/console.c ****   return k;
 195:src/console.c ****   #endif
 196:src/console.c **** }
 2580              		.loc 2 196 1 view .LVU728
 2581 002a 0DB0     		add	sp, sp, #52
 2582              		.cfi_remember_state
 2583              		.cfi_def_cfa_offset 12
 2584              		@ sp needed
 2585 002c 70BC     		pop	{r4, r5, r6}
 2586              		.cfi_restore 6
 2587              		.cfi_restore 5
 2588              		.cfi_restore 4
 2589              		.cfi_def_cfa_offset 0
 2590              	.LVL205:
 188:src/console.c ****     return key_push( wp34s_to_DM42 [k] );
 2591              		.loc 2 188 12 view .LVU729
 2592 002e 1847     		bx	r3
 2593              	.LVL206:
 2594              	.L256:
 2595              		.cfi_restore_state
 2596              		.loc 2 196 1 view .LVU730
 2597 0030 4FF0FF30 		mov	r0, #-1
 2598 0034 0DB0     		add	sp, sp, #52
 2599              		.cfi_def_cfa_offset 12
 2600              		@ sp needed
 2601 0036 70BC     		pop	{r4, r5, r6}
 2602              		.cfi_restore 6
 2603              		.cfi_restore 5
 2604              		.cfi_restore 4
 2605              		.cfi_def_cfa_offset 0
 2606              	.LVL207:
 2607              		.loc 2 196 1 view .LVU731
 2608 0038 7047     		bx	lr
 2609              	.L259:
 2610 003a 00BF     		.align	2
 2611              	.L258:
 2612 003c 10000000 		.word	.LANCHOR5+16
 2613 0040 81030008 		.word	134218625
 2614              		.cfi_endproc
 2615              	.LFE25:
 2617              		.section	.text.shift_down,"ax",%progbits
 2618              		.align	1
 2619              		.p2align 2,,3
 2620              		.global	shift_down
 2621              		.syntax unified
 2622              		.thumb
ARM GAS  /tmp/ccGpw0cR.s 			page 74


 2623              		.thumb_func
 2624              		.fpu fpv4-sp-d16
 2626              	shift_down:
 2627              	.LFB26:
 197:src/console.c **** 
 198:src/console.c **** enum shifts shift_down(void)
 199:src/console.c **** {
 2628              		.loc 2 199 1 is_stmt 1 view -0
 2629              		.cfi_startproc
 2630              		@ args = 0, pretend = 0, frame = 0
 2631              		@ frame_needed = 0, uses_anonymous_args = 0
 2632              		@ link register save eliminated.
 200:src/console.c **** 	return SHIFT_N;
 2633              		.loc 2 200 2 view .LVU733
 201:src/console.c **** }
 2634              		.loc 2 201 1 is_stmt 0 view .LVU734
 2635 0000 0020     		movs	r0, #0
 2636 0002 7047     		bx	lr
 2637              		.cfi_endproc
 2638              	.LFE26:
 2640              		.section	.text.start_key_timer,"ax",%progbits
 2641              		.align	1
 2642              		.p2align 2,,3
 2643              		.global	start_key_timer
 2644              		.syntax unified
 2645              		.thumb
 2646              		.thumb_func
 2647              		.fpu fpv4-sp-d16
 2649              	start_key_timer:
 2650              	.LFB27:
 202:src/console.c **** 
 203:src/console.c **** #ifndef DM42   // No serial operations for DM42
 204:src/console.c **** #ifndef WIN32  // Windows uses winserial.c
 205:src/console.c **** /*
 206:src/console.c ****  *  Open a COM port for transmission
 207:src/console.c ****  */
 208:src/console.c **** int open_port( int baud, int bits, int parity, int stopbits )
 209:src/console.c **** {
 210:src/console.c **** 	return 0;
 211:src/console.c **** }
 212:src/console.c **** 
 213:src/console.c **** 
 214:src/console.c **** /*
 215:src/console.c ****  *  Close the COM port after transmission is complete
 216:src/console.c ****  */
 217:src/console.c **** extern void close_port( void )
 218:src/console.c **** {
 219:src/console.c **** }
 220:src/console.c **** 
 221:src/console.c **** 
 222:src/console.c **** /*
 223:src/console.c ****  *  Output a single byte to the serial
 224:src/console.c ****  */
 225:src/console.c **** void put_byte( unsigned char byte )
 226:src/console.c **** {
 227:src/console.c **** 	report_err(ERR_PROG_BAD);
 228:src/console.c **** }
ARM GAS  /tmp/ccGpw0cR.s 			page 75


 229:src/console.c **** 
 230:src/console.c **** 
 231:src/console.c **** /*
 232:src/console.c ****  *  Force buffer flush
 233:src/console.c ****  */
 234:src/console.c **** void flush_comm( void )
 235:src/console.c **** {
 236:src/console.c **** }
 237:src/console.c **** 
 238:src/console.c **** #endif
 239:src/console.c **** #endif
 240:src/console.c **** 
 241:src/console.c **** 
 242:src/console.c **** /*
 243:src/console.c ****  *  Main loop
 244:src/console.c ****  */
 245:src/console.c **** #ifdef DM42
 246:src/console.c **** void start_key_timer (void);
 247:src/console.c **** long int keyticks (void);
 248:src/console.c **** void moveto (int line, int x);
 249:src/console.c **** 
 250:src/console.c **** static long int start_ticks;
 251:src/console.c **** 
 252:src/console.c **** void start_key_timer() {
 2651              		.loc 2 252 24 is_stmt 1 view -0
 2652              		.cfi_startproc
 2653              		@ args = 0, pretend = 0, frame = 0
 2654              		@ frame_needed = 0, uses_anonymous_args = 0
 253:src/console.c ****     start_ticks = get_rtc_ticks();
 2655              		.loc 2 253 5 view .LVU736
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 2656              		.loc 2 252 24 is_stmt 0 view .LVU737
 2657 0000 08B5     		push	{r3, lr}
 2658              		.cfi_def_cfa_offset 8
 2659              		.cfi_offset 3, -8
 2660              		.cfi_offset 14, -4
 2661              		.loc 2 253 19 view .LVU738
 2662 0002 024B     		ldr	r3, .L263
 2663 0004 9847     		blx	r3
 2664              	.LVL208:
 2665              		.loc 2 253 17 view .LVU739
 2666 0006 024B     		ldr	r3, .L263+4
 2667 0008 1860     		str	r0, [r3]
 254:src/console.c **** }
 2668              		.loc 2 254 1 view .LVU740
 2669 000a 08BD     		pop	{r3, pc}
 2670              	.L264:
 2671              		.align	2
 2672              	.L263:
 2673 000c B9040008 		.word	134218937
 2674 0010 00000000 		.word	.LANCHOR8
 2675              		.cfi_endproc
 2676              	.LFE27:
 2678              		.section	.text.keyticks,"ax",%progbits
 2679              		.align	1
 2680              		.p2align 2,,3
 2681              		.global	keyticks
ARM GAS  /tmp/ccGpw0cR.s 			page 76


 2682              		.syntax unified
 2683              		.thumb
 2684              		.thumb_func
 2685              		.fpu fpv4-sp-d16
 2687              	keyticks:
 2688              	.LFB28:
 255:src/console.c **** 
 256:src/console.c **** long int keyticks () {
 2689              		.loc 2 256 22 is_stmt 1 view -0
 2690              		.cfi_startproc
 2691              		@ args = 0, pretend = 0, frame = 0
 2692              		@ frame_needed = 0, uses_anonymous_args = 0
 257:src/console.c ****   long int i;
 2693              		.loc 2 257 3 view .LVU742
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2694              		.loc 2 258 3 view .LVU743
 256:src/console.c ****   long int i;
 2695              		.loc 2 256 22 is_stmt 0 view .LVU744
 2696 0000 08B5     		push	{r3, lr}
 2697              		.cfi_def_cfa_offset 8
 2698              		.cfi_offset 3, -8
 2699              		.cfi_offset 14, -4
 2700              		.loc 2 258 8 view .LVU745
 2701 0002 054B     		ldr	r3, .L267
 2702 0004 9847     		blx	r3
 2703              	.LVL209:
 259:src/console.c ****   return i >> 8;
 2704              		.loc 2 259 3 is_stmt 1 view .LVU746
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2705              		.loc 2 258 24 is_stmt 0 view .LVU747
 2706 0006 054B     		ldr	r3, .L267+4
 2707 0008 1B68     		ldr	r3, [r3]
 2708 000a C01A     		subs	r0, r0, r3
 2709              	.LVL210:
 258:src/console.c ****   i = (get_rtc_ticks() - start_ticks)*10;
 2710              		.loc 2 258 38 view .LVU748
 2711 000c 00EB8000 		add	r0, r0, r0, lsl #2
 260:src/console.c **** }
 2712              		.loc 2 260 1 view .LVU749
 2713 0010 40F3D710 		sbfx	r0, r0, #7, #24
 2714 0014 08BD     		pop	{r3, pc}
 2715              	.L268:
 2716 0016 00BF     		.align	2
 2717              	.L267:
 2718 0018 B9040008 		.word	134218937
 2719 001c 00000000 		.word	.LANCHOR8
 2720              		.cfi_endproc
 2721              	.LFE28:
 2723              		.section	.text.moveto,"ax",%progbits
 2724              		.align	1
 2725              		.p2align 2,,3
 2726              		.global	moveto
 2727              		.syntax unified
 2728              		.thumb
 2729              		.thumb_func
 2730              		.fpu fpv4-sp-d16
 2732              	moveto:
ARM GAS  /tmp/ccGpw0cR.s 			page 77


 2733              	.LVL211:
 2734              	.LFB29:
 261:src/console.c **** 
 262:src/console.c **** char spaces[22] = "                     ";	//21 spaces.
 263:src/console.c **** char print_string[22];
 264:src/console.c **** int n_p = 0;
 265:src/console.c **** 
 266:src/console.c **** 
 267:src/console.c **** void moveto(int line, int x) {//These are line number and character positions
 2735              		.loc 2 267 30 is_stmt 1 view -0
 2736              		.cfi_startproc
 2737              		@ args = 0, pretend = 0, frame = 0
 2738              		@ frame_needed = 0, uses_anonymous_args = 0
 268:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2739              		.loc 2 268 3 view .LVU751
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2740              		.loc 2 267 30 is_stmt 0 view .LVU752
 2741 0000 70B5     		push	{r4, r5, r6, lr}
 2742              		.cfi_def_cfa_offset 16
 2743              		.cfi_offset 4, -16
 2744              		.cfi_offset 5, -12
 2745              		.cfi_offset 6, -8
 2746              		.cfi_offset 14, -4
 2747              		.loc 2 268 3 view .LVU753
 2748 0002 0A4D     		ldr	r5, .L271
 2749 0004 0A4B     		ldr	r3, .L271+4
 267:src/console.c ****   lcd_setLine(fReg, line-1); //line 0 is the top line
 2750              		.loc 2 267 30 view .LVU754
 2751 0006 0246     		mov	r2, r0
 2752 0008 0C46     		mov	r4, r1
 2753              		.loc 2 268 3 view .LVU755
 2754 000a A86B     		ldr	r0, [r5, #56]
 2755              	.LVL212:
 2756              		.loc 2 268 3 view .LVU756
 2757 000c 511E     		subs	r1, r2, #1
 2758              	.LVL213:
 2759              		.loc 2 268 3 view .LVU757
 2760 000e 9847     		blx	r3
 2761              	.LVL214:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2762              		.loc 2 269 3 is_stmt 1 view .LVU758
 2763 0010 A86B     		ldr	r0, [r5, #56]
 2764 0012 084B     		ldr	r3, .L271+8
 2765              		.loc 2 269 33 is_stmt 0 view .LVU759
 2766 0014 0168     		ldr	r1, [r0]
 2767              		.loc 2 269 3 view .LVU760
 2768 0016 B0F90620 		ldrsh	r2, [r0, #6]
 2769              		.loc 2 269 33 view .LVU761
 2770 001a 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 2771              		.loc 2 269 43 view .LVU762
 2772 001c 013C     		subs	r4, r4, #1
 2773              	.LVL215:
 2774              		.loc 2 269 40 view .LVU763
 2775 001e 04FB01F1 		mul	r1, r4, r1
 2776              		.loc 2 269 3 view .LVU764
 2777 0022 1431     		adds	r1, r1, #20
 270:src/console.c **** }
ARM GAS  /tmp/ccGpw0cR.s 			page 78


 2778              		.loc 2 270 1 view .LVU765
 2779 0024 BDE87040 		pop	{r4, r5, r6, lr}
 2780              		.cfi_restore 14
 2781              		.cfi_restore 6
 2782              		.cfi_restore 5
 2783              		.cfi_restore 4
 2784              		.cfi_def_cfa_offset 0
 2785              	.LVL216:
 269:src/console.c ****   lcd_setXY(fReg, 20 + (fReg->f)->width*(x-1), fReg->y);
 2786              		.loc 2 269 3 view .LVU766
 2787 0028 1847     		bx	r3	@ indirect register sibling call
 2788              	.LVL217:
 2789              	.L272:
 2790 002a 00BF     		.align	2
 2791              	.L271:
 2792 002c 00200010 		.word	268443648
 2793 0030 69020008 		.word	134218345
 2794 0034 6D020008 		.word	134218349
 2795              		.cfi_endproc
 2796              	.LFE29:
 2798              		.section	.rodata.print_debug.str1.4,"aMS",%progbits,1
 2799              		.align	2
 2800              	.LC15:
 2801 0000 44656275 		.ascii	"Debug: %4i,%4i\000"
 2801      673A2025 
 2801      34692C25 
 2801      346900
 2802              		.section	.text.print_debug,"ax",%progbits
 2803              		.align	1
 2804              		.p2align 2,,3
 2805              		.global	print_debug
 2806              		.syntax unified
 2807              		.thumb
 2808              		.thumb_func
 2809              		.fpu fpv4-sp-d16
 2811              	print_debug:
 2812              	.LVL218:
 2813              	.LFB30:
 271:src/console.c **** 
 272:src/console.c **** void print_debug (int i, int j) {
 2814              		.loc 2 272 33 is_stmt 1 view -0
 2815              		.cfi_startproc
 2816              		@ args = 0, pretend = 0, frame = 8
 2817              		@ frame_needed = 0, uses_anonymous_args = 0
 273:src/console.c ****   strcpy( print_string, spaces );
 2818              		.loc 2 273 3 view .LVU768
 272:src/console.c ****   strcpy( print_string, spaces );
 2819              		.loc 2 272 33 is_stmt 0 view .LVU769
 2820 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2821              		.cfi_def_cfa_offset 24
 2822              		.cfi_offset 4, -24
 2823              		.cfi_offset 5, -20
 2824              		.cfi_offset 6, -16
 2825              		.cfi_offset 7, -12
 2826              		.cfi_offset 8, -8
 2827              		.cfi_offset 14, -4
 2828              		.loc 2 273 3 view .LVU770
ARM GAS  /tmp/ccGpw0cR.s 			page 79


 2829 0004 174C     		ldr	r4, .L275
 2830 0006 184F     		ldr	r7, .L275+4
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 275:src/console.c ****   moveto (3, 1);
 276:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2831              		.loc 2 276 3 view .LVU771
 2832 0008 184E     		ldr	r6, .L275+8
 2833 000a 194D     		ldr	r5, .L275+12
 277:src/console.c ****   lcd_refresh();
 2834              		.loc 2 277 3 view .LVU772
 2835 000c DFF86C80 		ldr	r8, .L275+24
 272:src/console.c ****   strcpy( print_string, spaces );
 2836              		.loc 2 272 33 view .LVU773
 2837 0010 82B0     		sub	sp, sp, #8
 2838              		.cfi_def_cfa_offset 32
 272:src/console.c ****   strcpy( print_string, spaces );
 2839              		.loc 2 272 33 view .LVU774
 2840 0012 0190     		str	r0, [sp, #4]
 2841 0014 0091     		str	r1, [sp]
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2842              		.loc 2 273 3 view .LVU775
 2843 0016 2046     		mov	r0, r4
 2844              	.LVL219:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2845              		.loc 2 273 3 view .LVU776
 2846 0018 3946     		mov	r1, r7
 2847              	.LVL220:
 273:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2848              		.loc 2 273 3 view .LVU777
 2849 001a FFF7FEFF 		bl	strcpy
 2850              	.LVL221:
 274:src/console.c ****   sprintf ( print_string, "Debug: %4i,%4i", i, j);
 2851              		.loc 2 274 3 is_stmt 1 view .LVU778
 2852 001e DDE90032 		ldrd	r3, r2, [sp]
 2853 0022 1449     		ldr	r1, .L275+16
 2854 0024 2046     		mov	r0, r4
 2855 0026 FFF7FEFF 		bl	sprintf
 2856              	.LVL222:
 275:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2857              		.loc 2 275 3 view .LVU779
 2858 002a 0121     		movs	r1, #1
 2859 002c 0320     		movs	r0, #3
 2860 002e FFF7FEFF 		bl	moveto
 2861              	.LVL223:
 276:src/console.c ****   lcd_refresh();
 2862              		.loc 2 276 3 view .LVU780
 2863 0032 2146     		mov	r1, r4
 2864 0034 B06B     		ldr	r0, [r6, #56]
 2865 0036 A847     		blx	r5
 2866              	.LVL224:
 2867              		.loc 2 277 3 view .LVU781
 2868 0038 C047     		blx	r8
 2869              	.LVL225:
 278:src/console.c ****   sys_delay (1000);
 2870              		.loc 2 278 3 view .LVU782
 2871 003a 0F4B     		ldr	r3, .L275+20
 2872 003c 4FF47A70 		mov	r0, #1000
ARM GAS  /tmp/ccGpw0cR.s 			page 80


 2873 0040 9847     		blx	r3
 2874              	.LVL226:
 279:src/console.c ****   /* wait_for_key_press(); */
 280:src/console.c ****   //  key_pop_all();
 281:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 282:src/console.c ****   // key_pop_all();
 283:src/console.c ****   strcpy( print_string, spaces );
 2875              		.loc 2 283 3 view .LVU783
 2876 0042 3946     		mov	r1, r7
 2877 0044 2046     		mov	r0, r4
 2878 0046 FFF7FEFF 		bl	strcpy
 2879              	.LVL227:
 284:src/console.c ****   moveto (3, 1);
 2880              		.loc 2 284 3 view .LVU784
 2881 004a 0121     		movs	r1, #1
 2882 004c 0320     		movs	r0, #3
 2883 004e FFF7FEFF 		bl	moveto
 2884              	.LVL228:
 285:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2885              		.loc 2 285 3 view .LVU785
 2886 0052 B06B     		ldr	r0, [r6, #56]
 2887 0054 2146     		mov	r1, r4
 2888 0056 A847     		blx	r5
 2889              	.LVL229:
 286:src/console.c ****   lcd_refresh();
 2890              		.loc 2 286 3 view .LVU786
 2891 0058 4346     		mov	r3, r8
 287:src/console.c ****   // while (key_empty()<=0);; // wait for release
 288:src/console.c ****   // key_pop_all();
 289:src/console.c **** }
 2892              		.loc 2 289 1 is_stmt 0 view .LVU787
 2893 005a 02B0     		add	sp, sp, #8
 2894              		.cfi_def_cfa_offset 24
 2895              	.LVL230:
 2896              		.loc 2 289 1 view .LVU788
 2897              		@ sp needed
 2898 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2899              		.cfi_restore 14
 2900              		.cfi_restore 8
 2901              		.cfi_restore 7
 2902              		.cfi_restore 6
 2903              		.cfi_restore 5
 2904              		.cfi_restore 4
 2905              		.cfi_def_cfa_offset 0
 2906              	.LVL231:
 286:src/console.c ****   lcd_refresh();
 2907              		.loc 2 286 3 view .LVU789
 2908 0060 1847     		bx	r3	@ indirect register sibling call
 2909              	.LVL232:
 2910              	.L276:
 2911 0062 00BF     		.align	2
 2912              	.L275:
 2913 0064 00000000 		.word	print_string
 2914 0068 00000000 		.word	.LANCHOR9
 2915 006c 00200010 		.word	268443648
 2916 0070 B1020008 		.word	134218417
 2917 0074 00000000 		.word	.LC15
ARM GAS  /tmp/ccGpw0cR.s 			page 81


 2918 0078 05040008 		.word	134218757
 2919 007c 31020008 		.word	134218289
 2920              		.cfi_endproc
 2921              	.LFE30:
 2923              		.section	.rodata.print_debug2.str1.4,"aMS",%progbits,1
 2924              		.align	2
 2925              	.LC16:
 2926 0000 443A2534 		.ascii	"D:%4i,%13s\000"
 2926      692C2531 
 2926      337300
 2927              		.section	.text.print_debug2,"ax",%progbits
 2928              		.align	1
 2929              		.p2align 2,,3
 2930              		.global	print_debug2
 2931              		.syntax unified
 2932              		.thumb
 2933              		.thumb_func
 2934              		.fpu fpv4-sp-d16
 2936              	print_debug2:
 2937              	.LVL233:
 2938              	.LFB31:
 290:src/console.c **** 
 291:src/console.c **** void print_debug2 (int i, char* j) {
 2939              		.loc 2 291 36 is_stmt 1 view -0
 2940              		.cfi_startproc
 2941              		@ args = 0, pretend = 0, frame = 8
 2942              		@ frame_needed = 0, uses_anonymous_args = 0
 292:src/console.c ****   strcpy( print_string, spaces );
 2943              		.loc 2 292 3 view .LVU791
 291:src/console.c ****   strcpy( print_string, spaces );
 2944              		.loc 2 291 36 is_stmt 0 view .LVU792
 2945 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2946              		.cfi_def_cfa_offset 24
 2947              		.cfi_offset 4, -24
 2948              		.cfi_offset 5, -20
 2949              		.cfi_offset 6, -16
 2950              		.cfi_offset 7, -12
 2951              		.cfi_offset 8, -8
 2952              		.cfi_offset 14, -4
 2953              		.loc 2 292 3 view .LVU793
 2954 0004 174C     		ldr	r4, .L279
 2955 0006 184F     		ldr	r7, .L279+4
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 294:src/console.c ****   moveto (3, 1);
 295:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2956              		.loc 2 295 3 view .LVU794
 2957 0008 184E     		ldr	r6, .L279+8
 2958 000a 194D     		ldr	r5, .L279+12
 296:src/console.c ****   lcd_refresh();
 2959              		.loc 2 296 3 view .LVU795
 2960 000c DFF86C80 		ldr	r8, .L279+24
 291:src/console.c ****   strcpy( print_string, spaces );
 2961              		.loc 2 291 36 view .LVU796
 2962 0010 82B0     		sub	sp, sp, #8
 2963              		.cfi_def_cfa_offset 32
 291:src/console.c ****   strcpy( print_string, spaces );
 2964              		.loc 2 291 36 view .LVU797
ARM GAS  /tmp/ccGpw0cR.s 			page 82


 2965 0012 0190     		str	r0, [sp, #4]
 2966 0014 0091     		str	r1, [sp]
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2967              		.loc 2 292 3 view .LVU798
 2968 0016 2046     		mov	r0, r4
 2969              	.LVL234:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2970              		.loc 2 292 3 view .LVU799
 2971 0018 3946     		mov	r1, r7
 2972              	.LVL235:
 292:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2973              		.loc 2 292 3 view .LVU800
 2974 001a FFF7FEFF 		bl	strcpy
 2975              	.LVL236:
 293:src/console.c ****   sprintf ( print_string, "D:%4i,%13s", i, j);
 2976              		.loc 2 293 3 is_stmt 1 view .LVU801
 2977 001e DDE90032 		ldrd	r3, r2, [sp]
 2978 0022 1449     		ldr	r1, .L279+16
 2979 0024 2046     		mov	r0, r4
 2980 0026 FFF7FEFF 		bl	sprintf
 2981              	.LVL237:
 294:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 2982              		.loc 2 294 3 view .LVU802
 2983 002a 0121     		movs	r1, #1
 2984 002c 0320     		movs	r0, #3
 2985 002e FFF7FEFF 		bl	moveto
 2986              	.LVL238:
 295:src/console.c ****   lcd_refresh();
 2987              		.loc 2 295 3 view .LVU803
 2988 0032 2146     		mov	r1, r4
 2989 0034 B06B     		ldr	r0, [r6, #56]
 2990 0036 A847     		blx	r5
 2991              	.LVL239:
 2992              		.loc 2 296 3 view .LVU804
 2993 0038 C047     		blx	r8
 2994              	.LVL240:
 297:src/console.c ****   sys_delay (2500);
 2995              		.loc 2 297 3 view .LVU805
 2996 003a 0F4B     		ldr	r3, .L279+20
 2997 003c 40F6C410 		movw	r0, #2500
 2998 0040 9847     		blx	r3
 2999              	.LVL241:
 298:src/console.c ****   /* wait_for_key_press(); */
 299:src/console.c ****   //  key_pop_all();
 300:src/console.c ****   // while ((key_pop()<=0) || (key_pop()==K_HEARTBEAT));;
 301:src/console.c ****   // key_pop_all();
 302:src/console.c ****   strcpy( print_string, spaces );
 3000              		.loc 2 302 3 view .LVU806
 3001 0042 3946     		mov	r1, r7
 3002 0044 2046     		mov	r0, r4
 3003 0046 FFF7FEFF 		bl	strcpy
 3004              	.LVL242:
 303:src/console.c ****   moveto (3, 1);
 3005              		.loc 2 303 3 view .LVU807
 3006 004a 0121     		movs	r1, #1
 3007 004c 0320     		movs	r0, #3
 3008 004e FFF7FEFF 		bl	moveto
ARM GAS  /tmp/ccGpw0cR.s 			page 83


 3009              	.LVL243:
 304:src/console.c ****   lcd_print (fReg , (const char*) print_string );
 3010              		.loc 2 304 3 view .LVU808
 3011 0052 B06B     		ldr	r0, [r6, #56]
 3012 0054 2146     		mov	r1, r4
 3013 0056 A847     		blx	r5
 3014              	.LVL244:
 305:src/console.c ****   lcd_refresh();
 3015              		.loc 2 305 3 view .LVU809
 3016 0058 4346     		mov	r3, r8
 306:src/console.c ****   // while (key_empty()<=0);; // wait for release
 307:src/console.c ****   // key_pop_all();
 308:src/console.c **** }
 3017              		.loc 2 308 1 is_stmt 0 view .LVU810
 3018 005a 02B0     		add	sp, sp, #8
 3019              		.cfi_def_cfa_offset 24
 3020              	.LVL245:
 3021              		.loc 2 308 1 view .LVU811
 3022              		@ sp needed
 3023 005c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3024              		.cfi_restore 14
 3025              		.cfi_restore 8
 3026              		.cfi_restore 7
 3027              		.cfi_restore 6
 3028              		.cfi_restore 5
 3029              		.cfi_restore 4
 3030              		.cfi_def_cfa_offset 0
 3031              	.LVL246:
 305:src/console.c ****   lcd_refresh();
 3032              		.loc 2 305 3 view .LVU812
 3033 0060 1847     		bx	r3	@ indirect register sibling call
 3034              	.LVL247:
 3035              	.L280:
 3036 0062 00BF     		.align	2
 3037              	.L279:
 3038 0064 00000000 		.word	print_string
 3039 0068 00000000 		.word	.LANCHOR9
 3040 006c 00200010 		.word	268443648
 3041 0070 B1020008 		.word	134218417
 3042 0074 00000000 		.word	.LC16
 3043 0078 05040008 		.word	134218757
 3044 007c 31020008 		.word	134218289
 3045              		.cfi_endproc
 3046              	.LFE31:
 3048              		.section	.text.do_now,"ax",%progbits
 3049              		.align	1
 3050              		.p2align 2,,3
 3051              		.global	do_now
 3052              		.syntax unified
 3053              		.thumb
 3054              		.thumb_func
 3055              		.fpu fpv4-sp-d16
 3057              	do_now:
 3058              	.LVL248:
 3059              	.LFB32:
 309:src/console.c **** 
 310:src/console.c **** void do_now (int key, int shift) { // key and shift are like the output of remapped
ARM GAS  /tmp/ccGpw0cR.s 			page 84


 3060              		.loc 2 310 34 is_stmt 1 view -0
 3061              		.cfi_startproc
 3062              		@ args = 0, pretend = 0, frame = 8
 3063              		@ frame_needed = 0, uses_anonymous_args = 0
 3064              		@ link register save eliminated.
 311:src/console.c ****   struct _ndmap temp;
 3065              		.loc 2 311 3 view .LVU814
 312:src/console.c ****   temp.key_34s = key;
 3066              		.loc 2 312 3 view .LVU815
 310:src/console.c ****   struct _ndmap temp;
 3067              		.loc 2 310 34 is_stmt 0 view .LVU816
 3068 0000 82B0     		sub	sp, sp, #8
 3069              		.cfi_def_cfa_offset 8
 313:src/console.c ****   temp.shift = shift;
 314:src/console.c ****   process_keycode_with_shift (temp);
 3070              		.loc 2 314 3 view .LVU817
 3071 0002 02AB     		add	r3, sp, #8
 312:src/console.c ****   temp.shift = shift;
 3072              		.loc 2 312 16 view .LVU818
 3073 0004 8DF80000 		strb	r0, [sp]
 313:src/console.c ****   temp.shift = shift;
 3074              		.loc 2 313 3 is_stmt 1 view .LVU819
 313:src/console.c ****   temp.shift = shift;
 3075              		.loc 2 313 14 is_stmt 0 view .LVU820
 3076 0008 0191     		str	r1, [sp, #4]
 3077              		.loc 2 314 3 is_stmt 1 view .LVU821
 3078 000a 13E90300 		ldmdb	r3, {r0, r1}
 3079              	.LVL249:
 315:src/console.c **** }
 3080              		.loc 2 315 1 is_stmt 0 view .LVU822
 3081 000e 02B0     		add	sp, sp, #8
 3082              		.cfi_def_cfa_offset 0
 3083              		@ sp needed
 314:src/console.c **** }
 3084              		.loc 2 314 3 view .LVU823
 3085 0010 FFF7FEBF 		b	process_keycode_with_shift
 3086              	.LVL250:
 314:src/console.c **** }
 3087              		.loc 2 314 3 view .LVU824
 3088              		.cfi_endproc
 3089              	.LFE32:
 3091              		.section	.rodata.do_multi.str1.4,"aMS",%progbits,1
 3092              		.align	2
 3093              	.LC17:
 3094 0000 2F48454C 		.ascii	"/HELP/wp34s_help.html\000"
 3094      502F7770 
 3094      3334735F 
 3094      68656C70 
 3094      2E68746D 
 3095              		.section	.text.do_multi,"ax",%progbits
 3096              		.align	1
 3097              		.p2align 2,,3
 3098              		.global	do_multi
 3099              		.syntax unified
 3100              		.thumb
 3101              		.thumb_func
 3102              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccGpw0cR.s 			page 85


 3104              	do_multi:
 3105              	.LVL251:
 3106              	.LFB33:
 316:src/console.c **** 
 317:src/console.c **** struct _ndmap do_multi (struct _ndmap r) {
 3107              		.loc 2 317 42 is_stmt 1 view -0
 3108              		.cfi_startproc
 3109              		@ args = 0, pretend = 0, frame = 16
 3110              		@ frame_needed = 0, uses_anonymous_args = 0
 3111              		.loc 2 317 42 is_stmt 0 view .LVU826
 3112 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3113              		.cfi_def_cfa_offset 20
 3114              		.cfi_offset 4, -20
 3115              		.cfi_offset 5, -16
 3116              		.cfi_offset 6, -12
 3117              		.cfi_offset 7, -8
 3118              		.cfi_offset 14, -4
 3119 0002 85B0     		sub	sp, sp, #20
 3120              		.cfi_def_cfa_offset 40
 3121              	.LVL252:
 318:src/console.c ****   switch(r.shift) {
 3122              		.loc 2 318 3 is_stmt 1 view .LVU827
 317:src/console.c ****   switch(r.shift) {
 3123              		.loc 2 317 42 is_stmt 0 view .LVU828
 3124 0004 6C46     		mov	r4, sp
 3125 0006 931E     		subs	r3, r2, #2
 3126 0008 84E80600 		stm	r4, {r1, r2}
 3127              	.LVL253:
 317:src/console.c ****   switch(r.shift) {
 3128              		.loc 2 317 42 view .LVU829
 3129 000c 0546     		mov	r5, r0
 3130 000e 0D2B     		cmp	r3, #13
 3131 0010 23D8     		bhi	.L284
 3132 0012 DFE803F0 		tbb	[pc, r3]
 3133              	.L286:
 3134 0016 2F       		.byte	(.L299-.L286)/2
 3135 0017 3A       		.byte	(.L298-.L286)/2
 3136 0018 45       		.byte	(.L297-.L286)/2
 3137 0019 50       		.byte	(.L296-.L286)/2
 3138 001a 5B       		.byte	(.L295-.L286)/2
 3139 001b 66       		.byte	(.L294-.L286)/2
 3140 001c 71       		.byte	(.L293-.L286)/2
 3141 001d 7B       		.byte	(.L292-.L286)/2
 3142 001e 86       		.byte	(.L291-.L286)/2
 3143 001f 90       		.byte	(.L290-.L286)/2
 3144 0020 9A       		.byte	(.L289-.L286)/2
 3145 0021 AD       		.byte	(.L288-.L286)/2
 3146 0022 B7       		.byte	(.L287-.L286)/2
 3147 0023 07       		.byte	(.L285-.L286)/2
 3148              		.p2align 1
 3149              	.L285:
 319:src/console.c ****   /* case LASTX: // Last x via RCL L */
 320:src/console.c ****   /*   do_now (K11, 0); // RCL */
 321:src/console.c ****   /*   do_now (K_RELEASE,0); // release */
 322:src/console.c ****   /*   do_now (K15,0); // TAN key */
 323:src/console.c ****   /*   r.key_34s = K_RELEASE; */
 324:src/console.c ****   /*   r.shift = 0; // set up for release; */
ARM GAS  /tmp/ccGpw0cR.s 			page 86


 325:src/console.c ****   /*   break; */
 326:src/console.c ****   case ONSTO: // flash_backup()
 327:src/console.c ****     flash_backup(OP_SAVE);
 328:src/console.c ****     reset_shift();
 329:src/console.c ****     r = no_key;
 330:src/console.c ****     break;
 331:src/console.c ****   case ONRCL: // flash_restore()
 332:src/console.c ****     flash_restore(OP_LOAD);
 333:src/console.c ****     reset_shift();
 334:src/console.c ****     r = no_key;
 335:src/console.c ****     break;
 336:src/console.c ****   case WRLIB: // save library file
 337:src/console.c ****     save_lib_file(1);
 338:src/console.c ****     reset_shift();
 339:src/console.c ****     r = no_key;
 340:src/console.c ****     break;
 341:src/console.c ****   case LLIB: // load library file
 342:src/console.c ****     load_lib_file(1);
 343:src/console.c ****     reset_shift();
 344:src/console.c ****     r = no_key;
 345:src/console.c ****     break;
 346:src/console.c ****   case WRTST: // save state file
 347:src/console.c ****     save_ram_file(1);
 348:src/console.c ****     reset_shift();
 349:src/console.c ****     r = no_key;
 350:src/console.c ****     break;
 351:src/console.c ****   case LDST:
 352:src/console.c ****     load_ram_file(1);
 353:src/console.c ****     reset_shift();
 354:src/console.c ****     r = no_key;
 355:src/console.c ****     break;
 356:src/console.c ****   case LDPRG:
 357:src/console.c ****     load_prog_file();
 358:src/console.c ****     reset_shift();
 359:src/console.c ****     r = no_key;
 360:src/console.c ****     break;
 361:src/console.c ****   case SVPRG:
 362:src/console.c ****     save_prog_file();
 363:src/console.c ****     reset_shift();
 364:src/console.c ****     r = no_key;
 365:src/console.c ****     break;
 366:src/console.c ****   case HELP:
 367:src/console.c **** #ifdef C_VERSION
 368:src/console.c ****     run_help_file("/HELP/wp34c_help.html");
 369:src/console.c **** #else
 370:src/console.c ****     run_help_file("/HELP/wp34s_help.html");
 371:src/console.c **** #endif
 372:src/console.c ****     reset_shift();
 373:src/console.c ****     r = no_key;
 374:src/console.c ****     break;
 375:src/console.c ****   case DOTS:
 376:src/console.c ****     do_all_dots();
 377:src/console.c ****     reset_shift();
 378:src/console.c ****     r = no_key;
 379:src/console.c ****     break;
 380:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 381:src/console.c ****     do_now(K_RELEASE,0); //release f-key; restore display
ARM GAS  /tmp/ccGpw0cR.s 			page 87


 382:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 383:src/console.c ****     r = no_key;
 384:src/console.c ****     break;
 385:src/console.c ****   case DEFMEN:
 386:src/console.c ****     toggle_default_menu();
 387:src/console.c ****     reset_shift();
 388:src/console.c ****     r = no_key;
 389:src/console.c ****     break;
 390:src/console.c ****   case SETUMEN:
 391:src/console.c ****     build_user_menu();
 392:src/console.c ****     reset_shift();
 393:src/console.c ****     r = no_key;;
 394:src/console.c ****     break;
 395:src/console.c ****   case KCPX:
 396:src/console.c ****     if (C_LOCKED) {
 3150              		.loc 2 396 5 is_stmt 1 view .LVU830
 3151              		.loc 2 396 9 is_stmt 0 view .LVU831
 3152 0024 664B     		ldr	r3, .L320
 3153 0026 1B68     		ldr	r3, [r3]
 3154 0028 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 3155              		.loc 2 396 8 view .LVU832
 3156 002c 5207     		lsls	r2, r2, #29
 3157 002e 40F1B480 		bpl	.L301
 3158              		.loc 2 396 9 discriminator 1 view .LVU833
 3159 0032 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 3160 0036 5B07     		lsls	r3, r3, #29
 3161 0038 40F1AF80 		bpl	.L301
 397:src/console.c ****       set_menu(M_C_Lock);
 3162              		.loc 2 397 7 is_stmt 1 view .LVU834
 3163              	.LVL254:
 3164              	.LBB120:
 3165              	.LBI120:
 125:src/menu.c    ****   menu_name m = current_menu;
 3166              		.loc 1 125 6 view .LVU835
 3167              	.LBB121:
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3168              		.loc 1 126 3 view .LVU836
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3169              		.loc 1 126 13 is_stmt 0 view .LVU837
 3170 003c 614A     		ldr	r2, .L320+4
 3171 003e 92F90030 		ldrsb	r3, [r2]
 3172              	.LVL255:
 127:src/menu.c    ****     current_menu = default_menu;
 3173              		.loc 1 127 3 is_stmt 1 view .LVU838
 127:src/menu.c    ****     current_menu = default_menu;
 3174              		.loc 1 127 6 is_stmt 0 view .LVU839
 3175 0042 112B     		cmp	r3, #17
 3176 0044 00F0B580 		beq	.L319
 130:src/menu.c    ****     current_menu = last_menu;
 3177              		.loc 1 130 8 is_stmt 1 view .LVU840
 134:src/menu.c    ****   }
 3178              		.loc 1 134 5 view .LVU841
 134:src/menu.c    ****   }
 3179              		.loc 1 134 18 is_stmt 0 view .LVU842
 3180 0048 1121     		movs	r1, #17
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3181              		.loc 1 136 6 view .LVU843
ARM GAS  /tmp/ccGpw0cR.s 			page 88


 3182 004a 092B     		cmp	r3, #9
 134:src/menu.c    ****   }
 3183              		.loc 1 134 18 view .LVU844
 3184 004c 1170     		strb	r1, [r2]
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3185              		.loc 1 136 3 is_stmt 1 view .LVU845
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3186              		.loc 1 136 6 is_stmt 0 view .LVU846
 3187 004e 02D0     		beq	.L304
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3188              		.loc 1 136 23 view .LVU847
 3189 0050 102B     		cmp	r3, #16
 3190 0052 40F0B180 		bne	.L303
 3191              	.L304:
 3192              	.LVL256:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3193              		.loc 1 136 23 view .LVU848
 3194              	.LBE121:
 3195              	.LBE120:
 398:src/console.c ****       reset_shift();
 3196              		.loc 2 398 7 is_stmt 1 view .LVU849
 3197 0056 FFF7FEFF 		bl	reset_shift
 3198              	.LVL257:
 3199              	.L284:
 399:src/console.c ****     }
 400:src/console.c ****     else {
 401:src/console.c ****       do_now (K_CMPLX, 0);
 402:src/console.c ****       do_now (K_RELEASE, 0);
 403:src/console.c ****       r = no_key;
 404:src/console.c ****     }
 405:src/console.c ****   default:
 406:src/console.c ****     r = no_key;
 3200              		.loc 2 406 5 view .LVU850
 3201              		.loc 2 406 7 is_stmt 0 view .LVU851
 3202 005a 5B4B     		ldr	r3, .L320+8
 3203 005c 93E80300 		ldm	r3, {r0, r1}
 3204 0060 84E80300 		stm	r4, {r0, r1}
 3205              	.LVL258:
 3206              	.L300:
 407:src/console.c ****   }
 408:src/console.c ****   return r;
 3207              		.loc 2 408 3 is_stmt 1 view .LVU852
 3208              		.loc 2 408 10 is_stmt 0 view .LVU853
 3209 0064 0191     		str	r1, [sp, #4]
 3210 0066 94E80300 		ldm	r4, {r0, r1}
 3211              	.LVL259:
 3212              		.loc 2 408 10 view .LVU854
 3213 006a 85E80300 		stm	r5, {r0, r1}
 409:src/console.c **** }
 3214              		.loc 2 409 1 view .LVU855
 3215 006e 2846     		mov	r0, r5
 3216 0070 05B0     		add	sp, sp, #20
 3217              		.cfi_remember_state
 3218              		.cfi_def_cfa_offset 20
 3219              		@ sp needed
 3220 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 3221              	.LVL260:
ARM GAS  /tmp/ccGpw0cR.s 			page 89


 3222              	.L299:
 3223              		.cfi_restore_state
 327:src/console.c ****     reset_shift();
 3224              		.loc 2 327 5 is_stmt 1 view .LVU856
 3225 0074 AD20     		movs	r0, #173
 3226              	.LVL261:
 327:src/console.c ****     reset_shift();
 3227              		.loc 2 327 5 is_stmt 0 view .LVU857
 3228 0076 FFF7FEFF 		bl	flash_backup
 3229              	.LVL262:
 328:src/console.c ****     r = no_key;
 3230              		.loc 2 328 5 is_stmt 1 view .LVU858
 3231 007a FFF7FEFF 		bl	reset_shift
 3232              	.LVL263:
 329:src/console.c ****     break;
 3233              		.loc 2 329 5 view .LVU859
 329:src/console.c ****     break;
 3234              		.loc 2 329 7 is_stmt 0 view .LVU860
 3235 007e 524B     		ldr	r3, .L320+8
 3236 0080 93E80300 		ldm	r3, {r0, r1}
 3237 0084 84E80300 		stm	r4, {r0, r1}
 3238              	.LVL264:
 330:src/console.c ****   case ONRCL: // flash_restore()
 3239              		.loc 2 330 5 is_stmt 1 view .LVU861
 3240 0088 ECE7     		b	.L300
 3241              	.LVL265:
 3242              	.L298:
 332:src/console.c ****     reset_shift();
 3243              		.loc 2 332 5 view .LVU862
 3244 008a AE20     		movs	r0, #174
 3245              	.LVL266:
 332:src/console.c ****     reset_shift();
 3246              		.loc 2 332 5 is_stmt 0 view .LVU863
 3247 008c FFF7FEFF 		bl	flash_restore
 3248              	.LVL267:
 333:src/console.c ****     r = no_key;
 3249              		.loc 2 333 5 is_stmt 1 view .LVU864
 3250 0090 FFF7FEFF 		bl	reset_shift
 3251              	.LVL268:
 334:src/console.c ****     break;
 3252              		.loc 2 334 5 view .LVU865
 334:src/console.c ****     break;
 3253              		.loc 2 334 7 is_stmt 0 view .LVU866
 3254 0094 4C4B     		ldr	r3, .L320+8
 3255 0096 93E80300 		ldm	r3, {r0, r1}
 3256 009a 84E80300 		stm	r4, {r0, r1}
 3257              	.LVL269:
 335:src/console.c ****   case WRLIB: // save library file
 3258              		.loc 2 335 5 is_stmt 1 view .LVU867
 3259 009e E1E7     		b	.L300
 3260              	.LVL270:
 3261              	.L297:
 337:src/console.c ****     reset_shift();
 3262              		.loc 2 337 5 view .LVU868
 3263 00a0 0120     		movs	r0, #1
 3264              	.LVL271:
 337:src/console.c ****     reset_shift();
ARM GAS  /tmp/ccGpw0cR.s 			page 90


 3265              		.loc 2 337 5 is_stmt 0 view .LVU869
 3266 00a2 FFF7FEFF 		bl	save_lib_file
 3267              	.LVL272:
 338:src/console.c ****     r = no_key;
 3268              		.loc 2 338 5 is_stmt 1 view .LVU870
 3269 00a6 FFF7FEFF 		bl	reset_shift
 3270              	.LVL273:
 339:src/console.c ****     break;
 3271              		.loc 2 339 5 view .LVU871
 339:src/console.c ****     break;
 3272              		.loc 2 339 7 is_stmt 0 view .LVU872
 3273 00aa 474B     		ldr	r3, .L320+8
 3274 00ac 93E80300 		ldm	r3, {r0, r1}
 3275 00b0 84E80300 		stm	r4, {r0, r1}
 3276              	.LVL274:
 340:src/console.c ****   case LLIB: // load library file
 3277              		.loc 2 340 5 is_stmt 1 view .LVU873
 3278 00b4 D6E7     		b	.L300
 3279              	.LVL275:
 3280              	.L296:
 342:src/console.c ****     reset_shift();
 3281              		.loc 2 342 5 view .LVU874
 3282 00b6 0120     		movs	r0, #1
 3283              	.LVL276:
 342:src/console.c ****     reset_shift();
 3284              		.loc 2 342 5 is_stmt 0 view .LVU875
 3285 00b8 FFF7FEFF 		bl	load_lib_file
 3286              	.LVL277:
 343:src/console.c ****     r = no_key;
 3287              		.loc 2 343 5 is_stmt 1 view .LVU876
 3288 00bc FFF7FEFF 		bl	reset_shift
 3289              	.LVL278:
 344:src/console.c ****     break;
 3290              		.loc 2 344 5 view .LVU877
 344:src/console.c ****     break;
 3291              		.loc 2 344 7 is_stmt 0 view .LVU878
 3292 00c0 414B     		ldr	r3, .L320+8
 3293 00c2 93E80300 		ldm	r3, {r0, r1}
 3294 00c6 84E80300 		stm	r4, {r0, r1}
 3295              	.LVL279:
 345:src/console.c ****   case WRTST: // save state file
 3296              		.loc 2 345 5 is_stmt 1 view .LVU879
 3297 00ca CBE7     		b	.L300
 3298              	.LVL280:
 3299              	.L295:
 347:src/console.c ****     reset_shift();
 3300              		.loc 2 347 5 view .LVU880
 3301 00cc 0120     		movs	r0, #1
 3302              	.LVL281:
 347:src/console.c ****     reset_shift();
 3303              		.loc 2 347 5 is_stmt 0 view .LVU881
 3304 00ce FFF7FEFF 		bl	save_ram_file
 3305              	.LVL282:
 348:src/console.c ****     r = no_key;
 3306              		.loc 2 348 5 is_stmt 1 view .LVU882
 3307 00d2 FFF7FEFF 		bl	reset_shift
 3308              	.LVL283:
ARM GAS  /tmp/ccGpw0cR.s 			page 91


 349:src/console.c ****     break;
 3309              		.loc 2 349 5 view .LVU883
 349:src/console.c ****     break;
 3310              		.loc 2 349 7 is_stmt 0 view .LVU884
 3311 00d6 3C4B     		ldr	r3, .L320+8
 3312 00d8 93E80300 		ldm	r3, {r0, r1}
 3313 00dc 84E80300 		stm	r4, {r0, r1}
 3314              	.LVL284:
 350:src/console.c ****   case LDST:
 3315              		.loc 2 350 5 is_stmt 1 view .LVU885
 3316 00e0 C0E7     		b	.L300
 3317              	.LVL285:
 3318              	.L294:
 352:src/console.c ****     reset_shift();
 3319              		.loc 2 352 5 view .LVU886
 3320 00e2 0120     		movs	r0, #1
 3321              	.LVL286:
 352:src/console.c ****     reset_shift();
 3322              		.loc 2 352 5 is_stmt 0 view .LVU887
 3323 00e4 FFF7FEFF 		bl	load_ram_file
 3324              	.LVL287:
 353:src/console.c ****     r = no_key;
 3325              		.loc 2 353 5 is_stmt 1 view .LVU888
 3326 00e8 FFF7FEFF 		bl	reset_shift
 3327              	.LVL288:
 354:src/console.c ****     break;
 3328              		.loc 2 354 5 view .LVU889
 354:src/console.c ****     break;
 3329              		.loc 2 354 7 is_stmt 0 view .LVU890
 3330 00ec 364B     		ldr	r3, .L320+8
 3331 00ee 93E80300 		ldm	r3, {r0, r1}
 3332 00f2 84E80300 		stm	r4, {r0, r1}
 3333              	.LVL289:
 355:src/console.c ****   case LDPRG:
 3334              		.loc 2 355 5 is_stmt 1 view .LVU891
 3335 00f6 B5E7     		b	.L300
 3336              	.LVL290:
 3337              	.L293:
 357:src/console.c ****     reset_shift();
 3338              		.loc 2 357 5 view .LVU892
 3339 00f8 FFF7FEFF 		bl	load_prog_file
 3340              	.LVL291:
 358:src/console.c ****     r = no_key;
 3341              		.loc 2 358 5 view .LVU893
 3342 00fc FFF7FEFF 		bl	reset_shift
 3343              	.LVL292:
 359:src/console.c ****     break;
 3344              		.loc 2 359 5 view .LVU894
 359:src/console.c ****     break;
 3345              		.loc 2 359 7 is_stmt 0 view .LVU895
 3346 0100 314B     		ldr	r3, .L320+8
 3347 0102 93E80300 		ldm	r3, {r0, r1}
 3348 0106 84E80300 		stm	r4, {r0, r1}
 3349              	.LVL293:
 360:src/console.c ****   case SVPRG:
 3350              		.loc 2 360 5 is_stmt 1 view .LVU896
 3351 010a ABE7     		b	.L300
ARM GAS  /tmp/ccGpw0cR.s 			page 92


 3352              	.LVL294:
 3353              	.L292:
 370:src/console.c **** #endif
 3354              		.loc 2 370 5 view .LVU897
 3355 010c 2F4B     		ldr	r3, .L320+12
 3356 010e 3048     		ldr	r0, .L320+16
 3357              	.LVL295:
 370:src/console.c **** #endif
 3358              		.loc 2 370 5 is_stmt 0 view .LVU898
 3359 0110 9847     		blx	r3
 3360              	.LVL296:
 372:src/console.c ****     r = no_key;
 3361              		.loc 2 372 5 is_stmt 1 view .LVU899
 3362 0112 FFF7FEFF 		bl	reset_shift
 3363              	.LVL297:
 373:src/console.c ****     break;
 3364              		.loc 2 373 5 view .LVU900
 373:src/console.c ****     break;
 3365              		.loc 2 373 7 is_stmt 0 view .LVU901
 3366 0116 2C4B     		ldr	r3, .L320+8
 3367 0118 93E80300 		ldm	r3, {r0, r1}
 3368 011c 84E80300 		stm	r4, {r0, r1}
 3369              	.LVL298:
 374:src/console.c ****   case DOTS:
 3370              		.loc 2 374 5 is_stmt 1 view .LVU902
 3371 0120 A0E7     		b	.L300
 3372              	.LVL299:
 3373              	.L291:
 362:src/console.c ****     reset_shift();
 3374              		.loc 2 362 5 view .LVU903
 3375 0122 FFF7FEFF 		bl	save_prog_file
 3376              	.LVL300:
 363:src/console.c ****     r = no_key;
 3377              		.loc 2 363 5 view .LVU904
 3378 0126 FFF7FEFF 		bl	reset_shift
 3379              	.LVL301:
 364:src/console.c ****     break;
 3380              		.loc 2 364 5 view .LVU905
 364:src/console.c ****     break;
 3381              		.loc 2 364 7 is_stmt 0 view .LVU906
 3382 012a 274B     		ldr	r3, .L320+8
 3383 012c 93E80300 		ldm	r3, {r0, r1}
 3384 0130 84E80300 		stm	r4, {r0, r1}
 3385              	.LVL302:
 365:src/console.c ****   case HELP:
 3386              		.loc 2 365 5 is_stmt 1 view .LVU907
 3387 0134 96E7     		b	.L300
 3388              	.LVL303:
 3389              	.L290:
 376:src/console.c ****     reset_shift();
 3390              		.loc 2 376 5 view .LVU908
 3391 0136 FFF7FEFF 		bl	do_all_dots
 3392              	.LVL304:
 377:src/console.c ****     r = no_key;
 3393              		.loc 2 377 5 view .LVU909
 3394 013a FFF7FEFF 		bl	reset_shift
 3395              	.LVL305:
ARM GAS  /tmp/ccGpw0cR.s 			page 93


 378:src/console.c ****     break;
 3396              		.loc 2 378 5 view .LVU910
 378:src/console.c ****     break;
 3397              		.loc 2 378 7 is_stmt 0 view .LVU911
 3398 013e 224B     		ldr	r3, .L320+8
 3399 0140 93E80300 		ldm	r3, {r0, r1}
 3400 0144 84E80300 		stm	r4, {r0, r1}
 3401              	.LVL306:
 379:src/console.c ****   case SSHOT: // comes after f-key already pressed, but not released
 3402              		.loc 2 379 5 is_stmt 1 view .LVU912
 3403 0148 8CE7     		b	.L300
 3404              	.LVL307:
 3405              	.L289:
 381:src/console.c ****     do_now(K_SSHOT,0); //activates screenshot routine in keys
 3406              		.loc 2 381 5 view .LVU913
 3407              	.LBB123:
 3408              	.LBI123:
 310:src/console.c ****   struct _ndmap temp;
 3409              		.loc 2 310 6 view .LVU914
 3410              	.LBB124:
 311:src/console.c ****   temp.key_34s = key;
 3411              		.loc 2 311 3 view .LVU915
 312:src/console.c ****   temp.shift = shift;
 3412              		.loc 2 312 3 view .LVU916
 312:src/console.c ****   temp.shift = shift;
 3413              		.loc 2 312 16 is_stmt 0 view .LVU917
 3414 014a 6323     		movs	r3, #99
 313:src/console.c ****   process_keycode_with_shift (temp);
 3415              		.loc 2 313 14 view .LVU918
 3416 014c 0027     		movs	r7, #0
 312:src/console.c ****   temp.shift = shift;
 3417              		.loc 2 312 16 view .LVU919
 3418 014e 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3419              		.loc 2 313 3 is_stmt 1 view .LVU920
 313:src/console.c ****   process_keycode_with_shift (temp);
 3420              		.loc 2 313 14 is_stmt 0 view .LVU921
 3421 0152 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3422              		.loc 2 314 3 is_stmt 1 view .LVU922
 3423 0154 02AE     		add	r6, sp, #8
 3424 0156 96E80300 		ldm	r6, {r0, r1}
 3425              	.LVL308:
 314:src/console.c **** }
 3426              		.loc 2 314 3 is_stmt 0 view .LVU923
 3427 015a FFF7FEFF 		bl	process_keycode_with_shift
 3428              	.LVL309:
 314:src/console.c **** }
 3429              		.loc 2 314 3 view .LVU924
 3430              	.LBE124:
 3431              	.LBE123:
 382:src/console.c ****     r = no_key;
 3432              		.loc 2 382 5 is_stmt 1 view .LVU925
 3433              	.LBB125:
 3434              	.LBI125:
 310:src/console.c ****   struct _ndmap temp;
 3435              		.loc 2 310 6 view .LVU926
ARM GAS  /tmp/ccGpw0cR.s 			page 94


 3436              	.LBB126:
 311:src/console.c ****   temp.key_34s = key;
 3437              		.loc 2 311 3 view .LVU927
 312:src/console.c ****   temp.shift = shift;
 3438              		.loc 2 312 3 view .LVU928
 312:src/console.c ****   temp.shift = shift;
 3439              		.loc 2 312 16 is_stmt 0 view .LVU929
 3440 015e 3323     		movs	r3, #51
 3441              	.LVL310:
 3442              	.L318:
 312:src/console.c ****   temp.shift = shift;
 3443              		.loc 2 312 16 view .LVU930
 3444              	.LBE126:
 3445              	.LBE125:
 3446              	.LBB127:
 3447              	.LBB128:
 313:src/console.c ****   process_keycode_with_shift (temp);
 3448              		.loc 2 313 14 view .LVU931
 3449 0160 0397     		str	r7, [sp, #12]
 312:src/console.c ****   temp.shift = shift;
 3450              		.loc 2 312 16 view .LVU932
 3451 0162 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3452              		.loc 2 313 3 is_stmt 1 view .LVU933
 314:src/console.c **** }
 3453              		.loc 2 314 3 view .LVU934
 3454 0166 96E80300 		ldm	r6, {r0, r1}
 3455 016a FFF7FEFF 		bl	process_keycode_with_shift
 3456              	.LVL311:
 3457              	.LBE128:
 3458              	.LBE127:
 403:src/console.c ****     }
 3459              		.loc 2 403 7 view .LVU935
 403:src/console.c ****     }
 3460              		.loc 2 403 7 is_stmt 0 view .LVU936
 3461 016e 74E7     		b	.L284
 3462              	.LVL312:
 3463              	.L288:
 386:src/console.c ****     reset_shift();
 3464              		.loc 2 386 5 is_stmt 1 view .LVU937
 3465 0170 FFF7FEFF 		bl	toggle_default_menu
 3466              	.LVL313:
 387:src/console.c ****     r = no_key;
 3467              		.loc 2 387 5 view .LVU938
 3468 0174 FFF7FEFF 		bl	reset_shift
 3469              	.LVL314:
 388:src/console.c ****     break;
 3470              		.loc 2 388 5 view .LVU939
 388:src/console.c ****     break;
 3471              		.loc 2 388 7 is_stmt 0 view .LVU940
 3472 0178 134B     		ldr	r3, .L320+8
 3473 017a 93E80300 		ldm	r3, {r0, r1}
 3474 017e 84E80300 		stm	r4, {r0, r1}
 3475              	.LVL315:
 389:src/console.c ****   case SETUMEN:
 3476              		.loc 2 389 5 is_stmt 1 view .LVU941
 3477 0182 6FE7     		b	.L300
ARM GAS  /tmp/ccGpw0cR.s 			page 95


 3478              	.LVL316:
 3479              	.L287:
 391:src/console.c ****     reset_shift();
 3480              		.loc 2 391 5 view .LVU942
 3481              	.LBB130:
 3482              	.LBI130:
 672:src/menu.c    ****   // find the label 'MNU'
 3483              		.loc 1 672 6 view .LVU943
 3484              	.LBB131:
 674:src/menu.c    ****    build_user_menu_from_program (lbl);
 3485              		.loc 1 674 4 view .LVU944
 675:src/menu.c    **** }
 3486              		.loc 1 675 4 view .LVU945
 3487 0184 1348     		ldr	r0, .L320+20
 3488              	.LVL317:
 675:src/menu.c    **** }
 3489              		.loc 1 675 4 is_stmt 0 view .LVU946
 3490 0186 FFF7FEFF 		bl	build_user_menu_from_program
 3491              	.LVL318:
 3492              	.LBE131:
 3493              	.LBE130:
 392:src/console.c ****     r = no_key;;
 3494              		.loc 2 392 5 is_stmt 1 view .LVU947
 3495 018a FFF7FEFF 		bl	reset_shift
 3496              	.LVL319:
 393:src/console.c ****     break;
 3497              		.loc 2 393 5 view .LVU948
 393:src/console.c ****     break;
 3498              		.loc 2 393 7 is_stmt 0 view .LVU949
 3499 018e 0E4B     		ldr	r3, .L320+8
 3500 0190 93E80300 		ldm	r3, {r0, r1}
 3501 0194 84E80300 		stm	r4, {r0, r1}
 3502              	.LVL320:
 393:src/console.c ****     break;
 3503              		.loc 2 393 16 is_stmt 1 view .LVU950
 394:src/console.c ****   case KCPX:
 3504              		.loc 2 394 5 view .LVU951
 3505 0198 64E7     		b	.L300
 3506              	.LVL321:
 3507              	.L301:
 401:src/console.c ****       do_now (K_RELEASE, 0);
 3508              		.loc 2 401 7 view .LVU952
 3509              	.LBB132:
 3510              	.LBI132:
 310:src/console.c ****   struct _ndmap temp;
 3511              		.loc 2 310 6 view .LVU953
 3512              	.LBB133:
 311:src/console.c ****   temp.key_34s = key;
 3513              		.loc 2 311 3 view .LVU954
 312:src/console.c ****   temp.shift = shift;
 3514              		.loc 2 312 3 view .LVU955
 312:src/console.c ****   temp.shift = shift;
 3515              		.loc 2 312 16 is_stmt 0 view .LVU956
 3516 019a 2D23     		movs	r3, #45
 313:src/console.c ****   process_keycode_with_shift (temp);
 3517              		.loc 2 313 14 view .LVU957
 3518 019c 0027     		movs	r7, #0
ARM GAS  /tmp/ccGpw0cR.s 			page 96


 312:src/console.c ****   temp.shift = shift;
 3519              		.loc 2 312 16 view .LVU958
 3520 019e 8DF80830 		strb	r3, [sp, #8]
 313:src/console.c ****   process_keycode_with_shift (temp);
 3521              		.loc 2 313 3 is_stmt 1 view .LVU959
 313:src/console.c ****   process_keycode_with_shift (temp);
 3522              		.loc 2 313 14 is_stmt 0 view .LVU960
 3523 01a2 0397     		str	r7, [sp, #12]
 314:src/console.c **** }
 3524              		.loc 2 314 3 is_stmt 1 view .LVU961
 3525 01a4 02AE     		add	r6, sp, #8
 3526 01a6 96E80300 		ldm	r6, {r0, r1}
 3527              	.LVL322:
 314:src/console.c **** }
 3528              		.loc 2 314 3 is_stmt 0 view .LVU962
 3529 01aa FFF7FEFF 		bl	process_keycode_with_shift
 3530              	.LVL323:
 314:src/console.c **** }
 3531              		.loc 2 314 3 view .LVU963
 3532              	.LBE133:
 3533              	.LBE132:
 402:src/console.c ****       r = no_key;
 3534              		.loc 2 402 7 is_stmt 1 view .LVU964
 3535              	.LBB134:
 3536              	.LBI127:
 310:src/console.c ****   struct _ndmap temp;
 3537              		.loc 2 310 6 view .LVU965
 3538              	.LBB129:
 311:src/console.c ****   temp.key_34s = key;
 3539              		.loc 2 311 3 view .LVU966
 312:src/console.c ****   temp.shift = shift;
 3540              		.loc 2 312 3 view .LVU967
 312:src/console.c ****   temp.shift = shift;
 3541              		.loc 2 312 16 is_stmt 0 view .LVU968
 3542 01ae 6323     		movs	r3, #99
 3543 01b0 D6E7     		b	.L318
 3544              	.LVL324:
 3545              	.L319:
 312:src/console.c ****   temp.shift = shift;
 3546              		.loc 2 312 16 view .LVU969
 3547              	.LBE129:
 3548              	.LBE134:
 3549              	.LBB135:
 3550              	.LBB122:
 128:src/menu.c    ****   }
 3551              		.loc 1 128 5 is_stmt 1 view .LVU970
 128:src/menu.c    ****   }
 3552              		.loc 1 128 18 is_stmt 0 view .LVU971
 3553 01b2 0949     		ldr	r1, .L320+24
 3554 01b4 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3555 01b6 1170     		strb	r1, [r2]
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3556              		.loc 1 136 3 is_stmt 1 view .LVU972
 3557              	.L303:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 3558              		.loc 1 136 43 view .LVU973
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
ARM GAS  /tmp/ccGpw0cR.s 			page 97


 3559              		.loc 1 136 53 is_stmt 0 view .LVU974
 3560 01b8 084A     		ldr	r2, .L320+28
 3561 01ba 1370     		strb	r3, [r2]
 3562 01bc 4BE7     		b	.L304
 3563              	.L321:
 3564 01be 00BF     		.align	2
 3565              	.L320:
 3566 01c0 00000000 		.word	main_ram
 3567 01c4 00000000 		.word	.LANCHOR1
 3568 01c8 00000000 		.word	.LANCHOR10
 3569 01cc 49040008 		.word	134218825
 3570 01d0 00000000 		.word	.LC17
 3571 01d4 4DF04E55 		.word	1431236685
 3572 01d8 00000000 		.word	.LANCHOR2
 3573 01dc 00000000 		.word	.LANCHOR3
 3574              	.LBE122:
 3575              	.LBE135:
 3576              		.cfi_endproc
 3577              	.LFE33:
 3579              		.section	.text.program_main,"ax",%progbits
 3580              		.align	1
 3581              		.p2align 2,,3
 3582              		.global	program_main
 3583              		.syntax unified
 3584              		.thumb
 3585              		.thumb_func
 3586              		.fpu fpv4-sp-d16
 3588              	program_main:
 3589              	.LFB34:
 410:src/console.c **** 
 411:src/console.c **** void program_main(){
 3590              		.loc 2 411 20 is_stmt 1 view -0
 3591              		.cfi_startproc
 3592              		@ args = 0, pretend = 0, frame = 224
 3593              		@ frame_needed = 0, uses_anonymous_args = 0
 412:src/console.c ****   int c;
 3594              		.loc 2 412 3 view .LVU976
 413:src/console.c ****   struct _ndmap remapped;
 3595              		.loc 2 413 3 view .LVU977
 414:src/console.c **** 
 415:src/console.c ****   init_mem();
 3596              		.loc 2 415 3 view .LVU978
 411:src/console.c ****   int c;
 3597              		.loc 2 411 20 is_stmt 0 view .LVU979
 3598 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3599              		.cfi_def_cfa_offset 32
 3600              		.cfi_offset 4, -32
 3601              		.cfi_offset 5, -28
 3602              		.cfi_offset 6, -24
 3603              		.cfi_offset 7, -20
 3604              		.cfi_offset 8, -16
 3605              		.cfi_offset 9, -12
 3606              		.cfi_offset 10, -8
 3607              		.cfi_offset 14, -4
 3608 0004 B8B0     		sub	sp, sp, #224
 3609              		.cfi_def_cfa_offset 256
 3610              		.loc 2 415 3 view .LVU980
ARM GAS  /tmp/ccGpw0cR.s 			page 98


 3611 0006 FFF7FEFF 		bl	init_mem
 3612              	.LVL325:
 416:src/console.c ****   init_RegionTab();
 3613              		.loc 2 416 3 is_stmt 1 view .LVU981
 3614 000a FFF7FEFF 		bl	init_RegionTab
 3615              	.LVL326:
 417:src/console.c ****   init_34s();
 3616              		.loc 2 417 3 view .LVU982
 3617 000e FFF7FEFF 		bl	init_34s
 3618              	.LVL327:
 418:src/console.c ****   State2.flags = 1;  
 3619              		.loc 2 418 3 view .LVU983
 3620              		.loc 2 418 16 is_stmt 0 view .LVU984
 3621 0012 954A     		ldr	r2, .L425
 3622 0014 137E     		ldrb	r3, [r2, #24]	@ zero_extendqisi2
 3623 0016 43F00103 		orr	r3, r3, #1
 3624 001a 1376     		strb	r3, [r2, #24]
 419:src/console.c ****   check_create_wp34sdir();
 3625              		.loc 2 419 3 is_stmt 1 view .LVU985
 3626 001c FFF7FEFF 		bl	check_create_wp34sdir
 3627              	.LVL328:
 420:src/console.c ****   if (!load_ram_file(0)) DispMsg = CNULL; // no message if it loads ok
 3628              		.loc 2 420 3 view .LVU986
 3629              		.loc 2 420 8 is_stmt 0 view .LVU987
 3630 0020 0020     		movs	r0, #0
 3631 0022 FFF7FEFF 		bl	load_ram_file
 3632              	.LVL329:
 3633              		.loc 2 420 6 view .LVU988
 3634 0026 08B9     		cbnz	r0, .L323
 3635              		.loc 2 420 26 is_stmt 1 discriminator 1 view .LVU989
 3636              		.loc 2 420 34 is_stmt 0 discriminator 1 view .LVU990
 3637 0028 904B     		ldr	r3, .L425+4
 3638 002a 1860     		str	r0, [r3]
 3639              	.L323:
 421:src/console.c ****   load_backup_file(0);
 3640              		.loc 2 421 3 is_stmt 1 view .LVU991
 3641 002c 0020     		movs	r0, #0
 3642 002e FFF7FEFF 		bl	load_backup_file
 3643              	.LVL330:
 422:src/console.c ****   load_lib_file(0);
 3644              		.loc 2 422 3 view .LVU992
 423:src/console.c ****   lcd_clear_buf();
 424:src/console.c ****   t20->newln = 0;
 3645              		.loc 2 424 3 is_stmt 0 view .LVU993
 3646 0032 8F4C     		ldr	r4, .L425+8
 3647 0034 8F4E     		ldr	r6, .L425+12
 425:src/console.c ****   t20->lnfill = 0;
 426:src/console.c ****   t20->fixed = 1;
 427:src/console.c ****   t20->xspc = -2;
 428:src/console.c ****   t20->bgfill = 0;
 429:src/console.c ****   run_menu_item_app = run_menu_item;
 430:src/console.c ****   menu_line_str_app = menu_line_str;
 431:src/console.c **** 
 432:src/console.c ****   display();
 433:src/console.c ****   display_current_menu();
 434:src/console.c ****   lcd_refresh();
 435:src/console.c ****   JustDisplayed = 0;
ARM GAS  /tmp/ccGpw0cR.s 			page 99


 436:src/console.c ****   /*
 437:src/console.c ****     Returns a positive integer when a key is pressed. Doesn't return until a key is pressed.
 438:src/console.c ****     Sleeps peacefully while waiting for a key.
 439:src/console.c ****     Handles (in principle!) turning off and on.
 440:src/console.c ****     =================
 441:src/console.c ****     Main event loop
 442:src/console.c ****     =================
 443:src/console.c **** 
 444:src/console.c ****     Status flags:
 445:src/console.c ****     ST(STAT_PGM_END)   - program should turn off state (set by auto off timer)
 446:src/console.c ****     ST(STAT_SUSPENDED) - Program ready for off and doesn't need to be woken-up again
 447:src/console.c ****     ST(STAT_OFF)       - Program in off state (only [EXIT] key can wake)
 448:src/console.c ****     ST(STAT_RUNNING)   - OS doesn't sleep in this mode
 449:src/console.c ****   */
 450:src/console.c ****   for(;;) {
 451:src/console.c **** 
 452:src/console.c ****     if ( ST(STAT_PGM_END) && ST(STAT_SUSPENDED) ) // In off mode and suspended
 453:src/console.c ****       {
 454:src/console.c **** 	CLR_ST(STAT_RUNNING);
 455:src/console.c **** 	sys_sleep();
 456:src/console.c ****       }
 457:src/console.c ****     else if (!ST(STAT_PGM_END) && key_empty()) // Go to sleep if no keys available
 3648              		.loc 2 457 35 view .LVU994
 3649 0036 904F     		ldr	r7, .L425+16
 458:src/console.c ****     {
 459:src/console.c ****       CLR_ST(STAT_RUNNING);
 460:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 3650              		.loc 2 460 7 view .LVU995
 3651 0038 DFF8A082 		ldr	r8, .L425+116
 422:src/console.c ****   lcd_clear_buf();
 3652              		.loc 2 422 3 view .LVU996
 3653 003c 0020     		movs	r0, #0
 3654 003e FFF7FEFF 		bl	load_lib_file
 3655              	.LVL331:
 423:src/console.c ****   t20->newln = 0;
 3656              		.loc 2 423 3 is_stmt 1 view .LVU997
 3657 0042 8E4B     		ldr	r3, .L425+20
 3658 0044 9847     		blx	r3
 3659              	.LVL332:
 424:src/console.c ****   t20->lnfill = 0;
 3660              		.loc 2 424 3 view .LVU998
 3661 0046 236B     		ldr	r3, [r4, #48]
 425:src/console.c ****   t20->fixed = 1;
 3662              		.loc 2 425 3 view .LVU999
 426:src/console.c ****   t20->xspc = -2;
 3663              		.loc 2 426 3 view .LVU1000
 429:src/console.c ****   menu_line_str_app = menu_line_str;
 3664              		.loc 2 429 21 is_stmt 0 view .LVU1001
 3665 0048 8D4A     		ldr	r2, .L425+24
 426:src/console.c ****   t20->xspc = -2;
 3666              		.loc 2 426 14 view .LVU1002
 3667 004a 0121     		movs	r1, #1
 3668 004c 1974     		strb	r1, [r3, #16]
 427:src/console.c ****   t20->bgfill = 0;
 3669              		.loc 2 427 3 is_stmt 1 view .LVU1003
 428:src/console.c ****   run_menu_item_app = run_menu_item;
 3670              		.loc 2 428 15 is_stmt 0 view .LVU1004
ARM GAS  /tmp/ccGpw0cR.s 			page 100


 3671 004e 0025     		movs	r5, #0
 427:src/console.c ****   t20->bgfill = 0;
 3672              		.loc 2 427 13 view .LVU1005
 3673 0050 FE21     		movs	r1, #254
 3674 0052 9973     		strb	r1, [r3, #14]
 428:src/console.c ****   run_menu_item_app = run_menu_item;
 3675              		.loc 2 428 3 is_stmt 1 view .LVU1006
 428:src/console.c ****   run_menu_item_app = run_menu_item;
 3676              		.loc 2 428 15 is_stmt 0 view .LVU1007
 3677 0054 5D82     		strh	r5, [r3, #18]	@ movhi
 424:src/console.c ****   t20->lnfill = 0;
 3678              		.loc 2 424 14 view .LVU1008
 3679 0056 1D75     		strb	r5, [r3, #20]
 429:src/console.c ****   menu_line_str_app = menu_line_str;
 3680              		.loc 2 429 3 is_stmt 1 view .LVU1009
 430:src/console.c **** 
 3681              		.loc 2 430 21 is_stmt 0 view .LVU1010
 3682 0058 8A4B     		ldr	r3, .L425+28
 429:src/console.c ****   menu_line_str_app = menu_line_str;
 3683              		.loc 2 429 21 view .LVU1011
 3684 005a E260     		str	r2, [r4, #12]
 430:src/console.c **** 
 3685              		.loc 2 430 3 is_stmt 1 view .LVU1012
 430:src/console.c **** 
 3686              		.loc 2 430 21 is_stmt 0 view .LVU1013
 3687 005c 2361     		str	r3, [r4, #16]
 432:src/console.c ****   display_current_menu();
 3688              		.loc 2 432 3 is_stmt 1 view .LVU1014
 3689 005e FFF7FEFF 		bl	display
 3690              	.LVL333:
 433:src/console.c ****   lcd_refresh();
 3691              		.loc 2 433 3 view .LVU1015
 3692 0062 FFF7FEFF 		bl	display_current_menu
 3693              	.LVL334:
 434:src/console.c ****   JustDisplayed = 0;
 3694              		.loc 2 434 3 view .LVU1016
 3695 0066 884B     		ldr	r3, .L425+32
 3696 0068 9847     		blx	r3
 3697              	.LVL335:
 435:src/console.c ****   /*
 3698              		.loc 2 435 3 view .LVU1017
 435:src/console.c ****   /*
 3699              		.loc 2 435 17 is_stmt 0 view .LVU1018
 3700 006a 884B     		ldr	r3, .L425+36
 3701 006c 1D60     		str	r5, [r3]
 3702              	.L324:
 450:src/console.c **** 
 3703              		.loc 2 450 3 is_stmt 1 view .LVU1019
 452:src/console.c ****       {
 3704              		.loc 2 452 5 view .LVU1020
 452:src/console.c ****       {
 3705              		.loc 2 452 10 is_stmt 0 view .LVU1021
 3706 006e 2368     		ldr	r3, [r4]
 452:src/console.c ****       {
 3707              		.loc 2 452 8 view .LVU1022
 3708 0070 9B05     		lsls	r3, r3, #22
 3709 0072 40F1BA80 		bpl	.L325
ARM GAS  /tmp/ccGpw0cR.s 			page 101


 452:src/console.c ****       {
 3710              		.loc 2 452 30 discriminator 1 view .LVU1023
 3711 0076 2368     		ldr	r3, [r4]
 452:src/console.c ****       {
 3712              		.loc 2 452 27 discriminator 1 view .LVU1024
 3713 0078 5D07     		lsls	r5, r3, #29
 3714 007a 40F1B680 		bpl	.L325
 454:src/console.c **** 	sys_sleep();
 3715              		.loc 2 454 2 is_stmt 1 view .LVU1025
 3716 007e 2368     		ldr	r3, [r4]
 455:src/console.c ****       }
 3717              		.loc 2 455 2 is_stmt 0 view .LVU1026
 3718 0080 834A     		ldr	r2, .L425+40
 454:src/console.c **** 	sys_sleep();
 3719              		.loc 2 454 2 view .LVU1027
 3720 0082 23F00203 		bic	r3, r3, #2
 3721 0086 2360     		str	r3, [r4]
 455:src/console.c ****       }
 3722              		.loc 2 455 2 is_stmt 1 view .LVU1028
 3723 0088 9047     		blx	r2
 3724              	.LVL336:
 3725              	.L326:
 461:src/console.c ****       sys_sleep();
 462:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 463:src/console.c **** 	key_push (K_HEARTBEAT);
 464:src/console.c **** 	if (Pause > 0) Pause--;
 465:src/console.c ****       }
 466:src/console.c ****       sys_timer_disable(0); // stop timer
 467:src/console.c ****     }
 468:src/console.c ****     
 469:src/console.c ****     // Wakeup in off state or going to sleep
 470:src/console.c ****     if (ST(STAT_PGM_END) || ST(STAT_SUSPENDED) ) {
 3726              		.loc 2 470 5 view .LVU1029
 3727              		.loc 2 470 9 is_stmt 0 view .LVU1030
 3728 008a 2368     		ldr	r3, [r4]
 3729              		.loc 2 470 8 view .LVU1031
 3730 008c 9805     		lsls	r0, r3, #22
 3731 008e 00F1D380 		bmi	.L332
 3732              	.L418:
 3733              		.loc 2 470 29 discriminator 1 view .LVU1032
 3734 0092 2368     		ldr	r3, [r4]
 3735              		.loc 2 470 26 discriminator 1 view .LVU1033
 3736 0094 5907     		lsls	r1, r3, #29
 3737 0096 00F1CF80 		bmi	.L332
 471:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 472:src/console.c ****         // Going to off mode
 473:src/console.c ****         lcd_set_buf_cleared(0); // Mark no buffer change region
 474:src/console.c ****         draw_power_off_image(1);
 475:src/console.c **** 
 476:src/console.c ****         LCD_power_off(0);
 477:src/console.c ****         SET_ST(STAT_SUSPENDED);
 478:src/console.c ****         SET_ST(STAT_OFF);
 479:src/console.c ****       }
 480:src/console.c ****       // Already in OFF -> just continue to sleep above
 481:src/console.c ****       continue; // note - this skips the rest of the loop and goes back to the beginning,
 482:src/console.c ****       // thus reaching the sleep()
 483:src/console.c ****     }
ARM GAS  /tmp/ccGpw0cR.s 			page 102


 484:src/console.c **** 
 485:src/console.c ****     // Well, we are woken-up
 486:src/console.c ****     SET_ST(STAT_RUNNING);
 3738              		.loc 2 486 5 is_stmt 1 view .LVU1034
 3739 009a 2368     		ldr	r3, [r4]
 3740 009c 43F00203 		orr	r3, r3, #2
 3741 00a0 2360     		str	r3, [r4]
 487:src/console.c **** 
 488:src/console.c ****     // Clear suspended state, because now we are definitely reached the active state
 489:src/console.c ****     CLR_ST(STAT_SUSPENDED);
 3742              		.loc 2 489 5 view .LVU1035
 3743 00a2 2368     		ldr	r3, [r4]
 3744 00a4 23F00403 		bic	r3, r3, #4
 3745 00a8 2360     		str	r3, [r4]
 490:src/console.c **** 
 491:src/console.c ****     // Get up from OFF state
 492:src/console.c ****     if ( ST(STAT_OFF) ) {
 3746              		.loc 2 492 5 view .LVU1036
 3747              		.loc 2 492 10 is_stmt 0 view .LVU1037
 3748 00aa 2368     		ldr	r3, [r4]
 3749              		.loc 2 492 8 view .LVU1038
 3750 00ac DA06     		lsls	r2, r3, #27
 3751 00ae 0ED5     		bpl	.L337
 493:src/console.c ****       LCD_power_on();
 3752              		.loc 2 493 7 is_stmt 1 view .LVU1039
 3753 00b0 784B     		ldr	r3, .L425+44
 3754 00b2 9847     		blx	r3
 3755              	.LVL337:
 494:src/console.c ****       key_pop_all(); //try clearing the ON key to stop double flashing of RPN
 3756              		.loc 2 494 7 view .LVU1040
 3757 00b4 784B     		ldr	r3, .L425+48
 3758 00b6 9847     		blx	r3
 3759              	.LVL338:
 495:src/console.c ****       rtc_wakeup_delay(); // Ensure that RTC readings after power off will be OK
 3760              		.loc 2 495 7 view .LVU1041
 3761 00b8 784B     		ldr	r3, .L425+52
 3762 00ba 9847     		blx	r3
 3763              	.LVL339:
 496:src/console.c **** 
 497:src/console.c ****       CLR_ST(STAT_OFF);
 3764              		.loc 2 497 7 view .LVU1042
 3765 00bc 2368     		ldr	r3, [r4]
 498:src/console.c **** 
 499:src/console.c ****       if ( !lcd_get_buf_cleared() )
 3766              		.loc 2 499 13 is_stmt 0 view .LVU1043
 3767 00be 784A     		ldr	r2, .L425+56
 497:src/console.c **** 
 3768              		.loc 2 497 7 view .LVU1044
 3769 00c0 23F01003 		bic	r3, r3, #16
 3770 00c4 2360     		str	r3, [r4]
 3771              		.loc 2 499 7 is_stmt 1 view .LVU1045
 3772              		.loc 2 499 13 is_stmt 0 view .LVU1046
 3773 00c6 9047     		blx	r2
 3774              	.LVL340:
 3775              		.loc 2 499 10 view .LVU1047
 3776 00c8 08B9     		cbnz	r0, .L337
 500:src/console.c ****         lcd_forced_refresh(); // Just redraw from LCD buffer
ARM GAS  /tmp/ccGpw0cR.s 			page 103


 3777              		.loc 2 500 9 is_stmt 1 view .LVU1048
 3778 00ca 764B     		ldr	r3, .L425+60
 3779 00cc 9847     		blx	r3
 3780              	.LVL341:
 3781              	.L337:
 501:src/console.c ****     }
 502:src/console.c **** 
 503:src/console.c ****     // Key is ready -> clear auto off timer
 504:src/console.c ****     //    if ( !key_empty() )
 505:src/console.c ****     //  reset_auto_off(); - moved as key here might be heartbeat
 506:src/console.c ****     // Fetch the key
 507:src/console.c ****     //  < 0 -> No key event
 508:src/console.c ****     //  > 0 -> Key pressed
 509:src/console.c ****     // == 0 -> Key released
 510:src/console.c ****     c = key_pop();
 3782              		.loc 2 510 5 view .LVU1049
 3783              		.loc 2 510 9 is_stmt 0 view .LVU1050
 3784 00ce 764B     		ldr	r3, .L425+64
 3785 00d0 9847     		blx	r3
 3786              	.LVL342:
 511:src/console.c **** #ifdef INCLUDE_STOPWATCH
 512:src/console.c ****     if ( KeyCallback != NULL ) {
 3787              		.loc 2 512 22 view .LVU1051
 3788 00d2 3368     		ldr	r3, [r6]
 510:src/console.c **** #ifdef INCLUDE_STOPWATCH
 3789              		.loc 2 510 9 view .LVU1052
 3790 00d4 0546     		mov	r5, r0
 3791              	.LVL343:
 3792              		.loc 2 512 5 is_stmt 1 view .LVU1053
 3793              		.loc 2 512 8 is_stmt 0 view .LVU1054
 3794 00d6 002B     		cmp	r3, #0
 3795 00d8 00F04181 		beq	.L339
 513:src/console.c ****       c = (*KeyCallback)( c );
 3796              		.loc 2 513 7 is_stmt 1 view .LVU1055
 3797              		.loc 2 513 12 is_stmt 0 view .LVU1056
 3798 00dc 9847     		blx	r3
 3799              	.LVL344:
 3800              		.loc 2 513 12 view .LVU1057
 3801 00de 0546     		mov	r5, r0
 3802              	.LVL345:
 3803              	.L340:
 514:src/console.c ****     }
 515:src/console.c ****     else if ( StopWatchRunning && ( Ticker % STOPWATCH_BLINK ) == 0 ) {
 516:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 517:src/console.c ****       lcd_refresh();
 518:src/console.c ****     }
 519:src/console.c **** #endif
 520:src/console.c ****     if ( (c != K_HEARTBEAT) && (c >= 0) ) {
 3804              		.loc 2 520 5 is_stmt 1 view .LVU1058
 3805              		.loc 2 520 8 is_stmt 0 view .LVU1059
 3806 00e0 622D     		cmp	r5, #98
 3807 00e2 00F0FD80 		beq	.L341
 3808              		.loc 2 520 29 discriminator 1 view .LVU1060
 3809 00e6 002D     		cmp	r5, #0
 3810 00e8 C1DB     		blt	.L324
 521:src/console.c ****       reset_auto_off();
 3811              		.loc 2 521 7 is_stmt 1 view .LVU1061
ARM GAS  /tmp/ccGpw0cR.s 			page 104


 3812 00ea 704B     		ldr	r3, .L425+68
 3813 00ec 9847     		blx	r3
 3814              	.LVL346:
 522:src/console.c ****       //      start_key_timer();
 523:src/console.c ****     }
 524:src/console.c ****     if (c >= 0) {
 3815              		.loc 2 524 5 view .LVU1062
 525:src/console.c ****       remapped = remap(c);
 3816              		.loc 2 525 7 view .LVU1063
 3817              	.LBB143:
 3818              	.LBI143:
  56:src/console.c **** 
 3819              		.loc 2 56 22 view .LVU1064
 3820              	.LBB144:
  58:src/console.c **** 
 3821              		.loc 2 58 3 view .LVU1065
 3822              		.file 3 "src/keytran.c"
   1:src/keytran.c **** static const struct _ndmap mapping_none[] = {
 3823              		.loc 3 1 1 view .LVU1066
   2:src/keytran.c ****     {K_RELEASE, -1},
   3:src/keytran.c ****     // Top row of DM42 1--6
   4:src/keytran.c ****     {K00, 0}, // A/sig+
   5:src/keytran.c ****     {K01, 0}, // B/1/x
   6:src/keytran.c ****     {K03, 0}, // D/sqrt x
   7:src/keytran.c ****     {K31, 2}, // log10
   8:src/keytran.c ****     {K30, 2}, // ln
   9:src/keytran.c ****     {K30, 0}, // xeq
  10:src/keytran.c ****     // Next row of DM42 7--12
  11:src/keytran.c ****     {K10, 0}, // STO
  12:src/keytran.c ****     {K11, 0}, // RCL
  13:src/keytran.c ****     {K12, 0}, // Rdown
  14:src/keytran.c ****     {K01, 1}, // sin
  15:src/keytran.c ****     {K02, 1}, // cos
  16:src/keytran.c ****     {K03, 1}, // tan
  17:src/keytran.c ****     // Third row of DM42 13--17
  18:src/keytran.c ****     {K20, 0}, // ENTER
  19:src/keytran.c ****     {K21, 0}, // x<>y
  20:src/keytran.c ****     {K22, 0}, // +/-
  21:src/keytran.c ****     {K23, 0}, // EEX
  22:src/keytran.c ****     {K24, 0}, // <-
  23:src/keytran.c ****     // Fourth row of DM42 18--22
  24:src/keytran.c ****     {K40, 0}, // up-arrow
  25:src/keytran.c ****     {K31, 0}, // 7
  26:src/keytran.c ****     {K32, 0}, // 8
  27:src/keytran.c ****     {K33, 0}, // 9
  28:src/keytran.c ****     {K34, 0}, // /
  29:src/keytran.c ****     // Fifth row of DM42 23--27
  30:src/keytran.c ****     {K50, 0}, // down-arrow
  31:src/keytran.c ****     {K41, 0}, // 4
  32:src/keytran.c ****     {K42, 0}, // 5
  33:src/keytran.c ****     {K43, 0}, // 6
  34:src/keytran.c ****     {K44, 0}, // *
  35:src/keytran.c ****     // Sixth row of DM42 28--32
  36:src/keytran.c ****     {K_F, 0}, // shift
  37:src/keytran.c ****     {K51, 0}, // 1
  38:src/keytran.c ****     {K52, 0}, // 2
  39:src/keytran.c ****     {K53, 0}, // 3
ARM GAS  /tmp/ccGpw0cR.s 			page 105


  40:src/keytran.c ****     {K54, 0}, // -
  41:src/keytran.c ****     // Last row of DM42 33--37
  42:src/keytran.c ****     {K60, 0}, // EXIT
  43:src/keytran.c ****     {K61, 0}, // 0
  44:src/keytran.c ****     {K62, 0}, // .
  45:src/keytran.c ****     {K63, 0}, // R/S
  46:src/keytran.c ****     {K64, 0}, // +
  47:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
  48:src/keytran.c ****     {K_NOP, 0}, // F1
  49:src/keytran.c ****     {K_NOP, 0},
  50:src/keytran.c ****     {K_NOP, 0},
  51:src/keytran.c ****     {K_NOP, 0},
  52:src/keytran.c ****     {K_NOP, 0},
  53:src/keytran.c ****     {K_NOP, 0}, // F6
  54:src/keytran.c ****     {K_NOP, 0}, // 44
  55:src/keytran.c ****     {K_NOP, 0}, // 45
  56:src/keytran.c ****     {K_NOP, 0}, // 46
  57:src/keytran.c ****   };
  58:src/keytran.c **** 
  59:src/keytran.c ****   static const struct _ndmap mapping_fshift[] = {
 3824              		.loc 3 59 3 view .LVU1067
  60:src/keytran.c ****     {K_RELEASE, -1},
  61:src/keytran.c ****     // Top row of DM42 1--6
  62:src/keytran.c ****     {K54, 3}, // sig- 
  63:src/keytran.c ****     {K33, 1}, // y^x
  64:src/keytran.c ****     {K44, 2}, // x^2
  65:src/keytran.c ****     {K31, 1}, // 10^x
  66:src/keytran.c ****     {K30, 1}, // e^x
  67:src/keytran.c ****     {K30, 3}, // GTO
  68:src/keytran.c ****     // Next row of DM42 7--12
  69:src/keytran.c ****     {K_MULTI, KCPX}, // Complex
  70:src/keytran.c ****     {K54, 1}, // %
  71:src/keytran.c ****     {K23, 3}, // pi
  72:src/keytran.c ****     {K01, 2}, // asin
  73:src/keytran.c ****     {K02, 2}, // acos
  74:src/keytran.c ****     {K03, 2}, // atan
  75:src/keytran.c ****     // Third row of DM42 13--17
  76:src/keytran.c ****     {K20, 1}, // alpha
  77:src/keytran.c ****     //    {K_MULTI, 1}, // lastX 
  78:src/keytran.c ****     {K_OP, RARG( RARG_RCL, regL_idx )}, // lastX 
  79:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
  80:src/keytran.c ****     {K_SETMENU,  M_Disp}, // DISP menu
  81:src/keytran.c ****     {K_SETMENU,  M_Clear}, // CLR menu
  82:src/keytran.c ****     // Fourth row of DM42 18--22
  83:src/keytran.c ****     {K40, 0}, // up-arrow
  84:src/keytran.c ****     {K52, 1}, // SLV
  85:src/keytran.c ****     {K_SETMENU,  M_Solve}, // Integral/sum/product menu
  86:src/keytran.c ****     {K44, 3}, // MATRIX cat
  87:src/keytran.c ****     {K_SETMENU,  M_Stats}, // STATS menu
  88:src/keytran.c ****     // Fifth row of DM42 23--27
  89:src/keytran.c ****     {K50, 0}, // down-arrow
  90:src/keytran.c ****     {K_SETMENU,  M_Base}, // BASE menu 
  91:src/keytran.c ****     {K04, 3}, // CONV cat
  92:src/keytran.c ****     {K_SETMENU,  M_Flags}, // FLAGS menu
  93:src/keytran.c ****     {K_SETMENU,  M_Prob}, // PROBS menu
  94:src/keytran.c ****     // Sixth row of DM42 28--32
  95:src/keytran.c ****     {K_G, 0}, // gshift
ARM GAS  /tmp/ccGpw0cR.s 			page 106


  96:src/keytran.c ****     {K_MULTI, DEFMEN}, // toggle default menu
  97:src/keytran.c ****     {K_SETMENU,  M_User}, // select user menu
  98:src/keytran.c ****     {K52, 3}, // P.FCN cat
  99:src/keytran.c ****     {K_SETMENU, M_Print}, // Print menu
 100:src/keytran.c ****     // Last row of DM42 33--37
 101:src/keytran.c ****     {K60, 3}, // off
 102:src/keytran.c ****     {K_SETMENU,  M_Setup1}, // SETUP menu
 103:src/keytran.c ****     {K21, 1}, // <(
 104:src/keytran.c ****     {K63, 3}, // P/R
 105:src/keytran.c ****     {K10, 3}, // CAT cat
 106:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 107:src/keytran.c ****     {K_NOP, 0},
 108:src/keytran.c ****     {K_NOP, 0},
 109:src/keytran.c ****     {K_NOP, 0},
 110:src/keytran.c ****     {K_NOP, 0},
 111:src/keytran.c ****     {K_NOP, 0},
 112:src/keytran.c ****     {K_NOP, 0},
 113:src/keytran.c ****     {K_NOP, 0},
 114:src/keytran.c ****     {K_SETMENU,  M_Last}, // last menu
 115:src/keytran.c ****     {K_SETMENU,  M_Misc}, // MISC menu!
 116:src/keytran.c ****   };
 117:src/keytran.c **** 
 118:src/keytran.c ****   static const struct _ndmap mapping_gshift[] = {
 3825              		.loc 3 118 3 view .LVU1068
 119:src/keytran.c ****     {K_RELEASE, -1},
 120:src/keytran.c ****     // Top row of DM42 1--6
 121:src/keytran.c ****     {K64, 3}, // sig+
 122:src/keytran.c ****     {K34, 1}, // 1/x
 123:src/keytran.c ****     {K44, 1}, // sqrt x
 124:src/keytran.c ****     {K31, 2}, // 10^x
 125:src/keytran.c ****     {K_NOP, 0}, // no function
 126:src/keytran.c ****     {K_NOP, 0}, // no function
 127:src/keytran.c ****     // Next row of DM42 7--12
 128:src/keytran.c ****     {K_NOP, 0}, // no function
 129:src/keytran.c ****     {K11, 3}, // View
 130:src/keytran.c ****     {K12, 3}, // Rup
 131:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 132:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 133:src/keytran.c ****     {K_SETMENU,  M_Angles}, // ANGLES menu
 134:src/keytran.c ****     // Third row of DM42 13--17
 135:src/keytran.c ****     {K20, 2}, // fill
 136:src/keytran.c ****     {K_SETMENU,  M_Swap}, // X<>Y menu
 137:src/keytran.c ****     {K05, 3}, // MODE cat
 138:src/keytran.c ****     {K_NOP, 0}, // no function
 139:src/keytran.c ****     {K_NOP, 0}, // no function
 140:src/keytran.c ****     // Fourth row of DM42 18--22
 141:src/keytran.c ****     {K_NOP, 0}, // no function
 142:src/keytran.c ****     {K_NOP, 0}, // no function
 143:src/keytran.c ****     {K_NOP, 0}, // no function
 144:src/keytran.c ****     {K43, 3}, // SUMS catalogue
 145:src/keytran.c ****     {K42, 3}, // STAT catalogue
 146:src/keytran.c ****     // Fifth row of DM42 23--27
 147:src/keytran.c ****     {K_NOP, 0}, // no function 
 148:src/keytran.c ****     {K_NOP, 0}, // no function
 149:src/keytran.c ****     {K20, 3}, // CONST catalogue
 150:src/keytran.c ****     {K51, 3}, // TEST catalogue
 151:src/keytran.c ****     {K41, 3}, // PROB catalogue
ARM GAS  /tmp/ccGpw0cR.s 			page 107


 152:src/keytran.c ****     // Sixth row of DM42 28--32
 153:src/keytran.c ****     {K_G, -1}, // gshift (clears shift state)
 154:src/keytran.c ****     {K_NOP, 0}, // no function
 155:src/keytran.c ****     //    {K_MULTI, SETUMEN}, // Set up user menu
 156:src/keytran.c ****     {K_SETMENU, M_Usermenu}, //User menu create
 157:src/keytran.c ****     {K53, 3}, // X.FCN catalogue.
 158:src/keytran.c ****     {K_NOP, 0}, // no function
 159:src/keytran.c ****     // Last row of DM42 33--37
 160:src/keytran.c ****     {K60, 2}, // SHOW (register browser)
 161:src/keytran.c ****     {K_SETMENU,  M_Setup2}, // SETUP2 menu
 162:src/keytran.c ****     {K_NOP, 0}, // no function
 163:src/keytran.c ****     {K_SETMENU,  M_Program}, // P.FCN menu
 164:src/keytran.c ****     {K50, 3}, // Status
 165:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 166:src/keytran.c ****     {K_NOP, 0},
 167:src/keytran.c ****     {K_NOP, 0},
 168:src/keytran.c ****     {K_NOP, 0},
 169:src/keytran.c ****     {K_NOP, 0},
 170:src/keytran.c ****     {K_NOP, 0},
 171:src/keytran.c ****     {K_NOP, 0},
 172:src/keytran.c ****     {K_NOP, 0},
 173:src/keytran.c ****     {K_NOP, 0},
 174:src/keytran.c ****     {K_NOP, 0},
 175:src/keytran.c ****   };
 176:src/keytran.c **** 
 177:src/keytran.c **** static const struct _ndmap mapping_alpha[] = {
 3826              		.loc 3 177 1 view .LVU1069
 178:src/keytran.c ****     {K_RELEASE, -1},
 179:src/keytran.c ****     // Top row of DM42 1--6
 180:src/keytran.c ****     {K00, -1},
 181:src/keytran.c ****     {K01, -1},
 182:src/keytran.c ****     {K02, -1},
 183:src/keytran.c ****     {K03, -1},
 184:src/keytran.c ****     {K04, -1},
 185:src/keytran.c ****     {K05, -1},
 186:src/keytran.c ****     // Next row of DM42 7--12
 187:src/keytran.c ****     {K10, -1},
 188:src/keytran.c ****     {K11, -1},
 189:src/keytran.c ****     {K12, -1},
 190:src/keytran.c ****     {K13, -1},
 191:src/keytran.c ****     {K14, -1},
 192:src/keytran.c ****     {K15, -1},
 193:src/keytran.c ****     // Third row of DM42 13--17
 194:src/keytran.c ****     {K20, -1},
 195:src/keytran.c ****     {K21, -1},
 196:src/keytran.c ****     {K22, -1},
 197:src/keytran.c ****     {K23, -1},
 198:src/keytran.c ****     {K24, -1},
 199:src/keytran.c ****     // Fourth row of DM42 18--22
 200:src/keytran.c ****     {K30, -1},
 201:src/keytran.c ****     {K31, -1},
 202:src/keytran.c ****     {K32, -1},
 203:src/keytran.c ****     {K33, -1},
 204:src/keytran.c ****     {K34, -1},
 205:src/keytran.c ****     // Fifth row of DM42 23--27
 206:src/keytran.c ****     {K40, -1},
 207:src/keytran.c ****     {K41, -1},
ARM GAS  /tmp/ccGpw0cR.s 			page 108


 208:src/keytran.c ****     {K42, -1},
 209:src/keytran.c ****     {K43, -1},
 210:src/keytran.c ****     {K44, -1},
 211:src/keytran.c ****     // Sixth row of DM42 28--32
 212:src/keytran.c ****     {K50, -1},
 213:src/keytran.c ****     {K51, -1},
 214:src/keytran.c ****     {K52, -1},
 215:src/keytran.c ****     {K53, -1},
 216:src/keytran.c ****     {K54, -1},
 217:src/keytran.c ****     // Last row of DM42 33--37
 218:src/keytran.c ****     {K60, -1},
 219:src/keytran.c ****     {K61, -1},
 220:src/keytran.c ****     {K62, -1},
 221:src/keytran.c ****     {K63, -1},
 222:src/keytran.c ****     {K64, -1},
 223:src/keytran.c ****     // Function keys, screenshot, sh_up, sh_down
 224:src/keytran.c ****     {K_NOP, -1},
 225:src/keytran.c ****     {K_NOP, -1},
 226:src/keytran.c ****     {K_NOP, -1},
 227:src/keytran.c ****     {K_NOP, -1},
 228:src/keytran.c ****     {K_ARROW, -1}, // allow arrow and CMPLX to be used for K04 and K05
 229:src/keytran.c ****     {K_CMPLX, -1},
 230:src/keytran.c ****     {K_NOP, -1},
 231:src/keytran.c ****     {K_NOP, -1},
 232:src/keytran.c ****     {K_NOP, -1},
 233:src/keytran.c **** };
 234:src/keytran.c **** 
 235:src/keytran.c **** static const struct _ndmap mapping_running[] = {
 3827              		.loc 3 235 1 view .LVU1070
  62:src/console.c **** 
 3828              		.loc 2 62 3 view .LVU1071
  64:src/console.c **** 
 3829              		.loc 2 64 3 view .LVU1072
  64:src/console.c **** 
 3830              		.loc 2 64 6 is_stmt 0 view .LVU1073
 3831 00ee 632D     		cmp	r5, #99
 3832 00f0 00F08481 		beq	.L406
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3833              		.loc 2 66 3 is_stmt 1 view .LVU1074
  66:src/console.c ****     struct _ndmap sshot = {.key_34s = K_MULTI, .shift = SSHOT};
 3834              		.loc 2 66 6 is_stmt 0 view .LVU1075
 3835 00f4 2C2D     		cmp	r5, #44
 3836 00f6 00F05381 		beq	.L344
  71:src/console.c ****     return mapping_running[c];
 3837              		.loc 2 71 3 is_stmt 1 view .LVU1076
  71:src/console.c ****     return mapping_running[c];
 3838              		.loc 2 71 15 is_stmt 0 view .LVU1077
 3839 00fa 6D4A     		ldr	r2, .L425+72
 3840 00fc 6D4B     		ldr	r3, .L425+76
 3841 00fe 92F80090 		ldrb	r9, [r2]	@ zero_extendqisi2
 3842 0102 1968     		ldr	r1, [r3]
  71:src/console.c ****     return mapping_running[c];
 3843              		.loc 2 71 6 view .LVU1078
 3844 0104 59EA0109 		orrs	r9, r9, r1
 3845 0108 40F06B81 		bne	.L407
  75:src/console.c ****   
 3846              		.loc 2 75 3 is_stmt 1 view .LVU1079
ARM GAS  /tmp/ccGpw0cR.s 			page 109


  75:src/console.c ****   
 3847              		.loc 2 75 22 is_stmt 0 view .LVU1080
 3848 010c 04A8     		add	r0, sp, #16
 3849 010e FFF7FEFF 		bl	get_current_menu_ref
 3850              	.LVL347:
  77:src/console.c ****   case KEY_F1:
 3851              		.loc 2 77 3 is_stmt 1 view .LVU1081
 3852 0112 A5F12603 		sub	r3, r5, #38
 3853 0116 052B     		cmp	r3, #5
 3854 0118 00F27A81 		bhi	.L346
 3855 011c DFE813F0 		tbh	[pc, r3, lsl #1]
 3856              	.L348:
 3857 0120 8001     		.2byte	(.L353-.L348)/2
 3858 0122 0B00     		.2byte	(.L352-.L348)/2
 3859 0124 1500     		.2byte	(.L351-.L348)/2
 3860 0126 1F00     		.2byte	(.L350-.L348)/2
 3861 0128 2900     		.2byte	(.L349-.L348)/2
 3862 012a 3300     		.2byte	(.L347-.L348)/2
 3863              		.p2align 1
 3864              	.L354:
  80:src/console.c ****   case KEY_F2:
 3865              		.loc 2 80 5 view .LVU1082
  80:src/console.c ****   case KEY_F2:
 3866              		.loc 2 80 9 is_stmt 0 view .LVU1083
 3867 012c FFF7FEFF 		bl	cur_shift
 3868              	.LVL348:
  80:src/console.c ****   case KEY_F2:
 3869              		.loc 2 80 8 view .LVU1084
 3870 0130 0128     		cmp	r0, #1
 3871 0132 00F01282 		beq	.L408
 3872              	.L352:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3873              		.loc 2 82 5 is_stmt 1 view .LVU1085
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3874              		.loc 2 82 9 is_stmt 0 view .LVU1086
 3875 0136 FFF7FEFF 		bl	cur_shift
 3876              	.LVL349:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 3877              		.loc 2 82 8 view .LVU1087
 3878 013a 0028     		cmp	r0, #0
 3879 013c 00F09D81 		beq	.L409
  83:src/console.c ****   case KEY_F3:
 3880              		.loc 2 83 5 is_stmt 1 view .LVU1088
  83:src/console.c ****   case KEY_F3:
 3881              		.loc 2 83 9 is_stmt 0 view .LVU1089
 3882 0140 FFF7FEFF 		bl	cur_shift
 3883              	.LVL350:
  83:src/console.c ****   case KEY_F3:
 3884              		.loc 2 83 8 view .LVU1090
 3885 0144 0128     		cmp	r0, #1
 3886 0146 00F0E281 		beq	.L410
 3887              	.L351:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3888              		.loc 2 85 5 is_stmt 1 view .LVU1091
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3889              		.loc 2 85 9 is_stmt 0 view .LVU1092
 3890 014a FFF7FEFF 		bl	cur_shift
ARM GAS  /tmp/ccGpw0cR.s 			page 110


 3891              	.LVL351:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 3892              		.loc 2 85 8 view .LVU1093
 3893 014e 0028     		cmp	r0, #0
 3894 0150 00F08981 		beq	.L411
  86:src/console.c ****   case KEY_F4:
 3895              		.loc 2 86 5 is_stmt 1 view .LVU1094
  86:src/console.c ****   case KEY_F4:
 3896              		.loc 2 86 9 is_stmt 0 view .LVU1095
 3897 0154 FFF7FEFF 		bl	cur_shift
 3898              	.LVL352:
  86:src/console.c ****   case KEY_F4:
 3899              		.loc 2 86 8 view .LVU1096
 3900 0158 0128     		cmp	r0, #1
 3901 015a 00F0CE81 		beq	.L412
 3902              	.L350:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3903              		.loc 2 88 5 is_stmt 1 view .LVU1097
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3904              		.loc 2 88 9 is_stmt 0 view .LVU1098
 3905 015e FFF7FEFF 		bl	cur_shift
 3906              	.LVL353:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 3907              		.loc 2 88 8 view .LVU1099
 3908 0162 0028     		cmp	r0, #0
 3909 0164 00F07581 		beq	.L413
  89:src/console.c ****   case KEY_F5:
 3910              		.loc 2 89 5 is_stmt 1 view .LVU1100
  89:src/console.c ****   case KEY_F5:
 3911              		.loc 2 89 9 is_stmt 0 view .LVU1101
 3912 0168 FFF7FEFF 		bl	cur_shift
 3913              	.LVL354:
  89:src/console.c ****   case KEY_F5:
 3914              		.loc 2 89 8 view .LVU1102
 3915 016c 0128     		cmp	r0, #1
 3916 016e 00F0B081 		beq	.L414
 3917              	.L349:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3918              		.loc 2 91 5 is_stmt 1 view .LVU1103
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3919              		.loc 2 91 9 is_stmt 0 view .LVU1104
 3920 0172 FFF7FEFF 		bl	cur_shift
 3921              	.LVL355:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 3922              		.loc 2 91 8 view .LVU1105
 3923 0176 0028     		cmp	r0, #0
 3924 0178 00F06181 		beq	.L415
  92:src/console.c ****   case KEY_F6:
 3925              		.loc 2 92 5 is_stmt 1 view .LVU1106
  92:src/console.c ****   case KEY_F6:
 3926              		.loc 2 92 9 is_stmt 0 view .LVU1107
 3927 017c FFF7FEFF 		bl	cur_shift
 3928              	.LVL356:
  92:src/console.c ****   case KEY_F6:
 3929              		.loc 2 92 8 view .LVU1108
 3930 0180 0128     		cmp	r0, #1
 3931 0182 00F0B081 		beq	.L416
ARM GAS  /tmp/ccGpw0cR.s 			page 111


 3932              	.L347:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3933              		.loc 2 94 5 is_stmt 1 view .LVU1109
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3934              		.loc 2 94 9 is_stmt 0 view .LVU1110
 3935 0186 FFF7FEFF 		bl	cur_shift
 3936              	.LVL357:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3937              		.loc 2 94 8 view .LVU1111
 3938 018a 0028     		cmp	r0, #0
 3939 018c 40F03C81 		bne	.L359
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3940              		.loc 2 94 33 is_stmt 1 view .LVU1112
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3941              		.loc 2 94 51 is_stmt 0 view .LVU1113
 3942 0190 DDE93001 		ldrd	r0, r1, [sp, #192]
 3943 0194 9DF8C050 		ldrb	r5, [sp, #192]	@ zero_extendqisi2
 3944              	.LVL358:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3945              		.loc 2 94 51 view .LVU1114
 3946 0198 0DF1080A 		add	r10, sp, #8
 3947              	.LBE144:
 3948              	.LBE143:
 526:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 3949              		.loc 2 526 10 view .LVU1115
 3950 019c 2F2D     		cmp	r5, #47
 3951              	.LBB153:
 3952              	.LBB146:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3953              		.loc 2 94 51 view .LVU1116
 3954 019e 8AE80300 		stm	r10, {r0, r1}
 3955 01a2 8946     		mov	r9, r1
 3956              	.LVL359:
  94:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[5].shifted;
 3957              		.loc 2 94 51 view .LVU1117
 3958              	.LBE146:
 3959              	.LBE153:
 3960              		.loc 2 526 7 is_stmt 1 view .LVU1118
 3961              		.loc 2 526 10 is_stmt 0 view .LVU1119
 3962 01a4 40F0A880 		bne	.L370
 3963              	.LVL360:
 3964              	.L419:
 527:src/console.c **** 	set_menu ( remapped.shift );
 3965              		.loc 2 527 2 is_stmt 1 view .LVU1120
 3966              	.LBB154:
 3967              	.LBB155:
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3968              		.loc 1 126 13 is_stmt 0 view .LVU1121
 3969 01a8 434A     		ldr	r2, .L425+80
 3970 01aa 92F90030 		ldrsb	r3, [r2]
 3971              	.LBE155:
 3972              	.LBE154:
 3973              		.loc 2 527 2 view .LVU1122
 3974 01ae 4FFA89F1 		sxtb	r1, r9
 3975              	.LVL361:
 3976              	.LBB158:
 3977              	.LBI154:
ARM GAS  /tmp/ccGpw0cR.s 			page 112


 125:src/menu.c    ****   menu_name m = current_menu;
 3978              		.loc 1 125 6 is_stmt 1 view .LVU1123
 3979              	.LBB156:
 126:src/menu.c    ****   if (new_menu == current_menu) { // return to default
 3980              		.loc 1 126 3 view .LVU1124
 127:src/menu.c    ****     current_menu = default_menu;
 3981              		.loc 1 127 3 view .LVU1125
 127:src/menu.c    ****     current_menu = default_menu;
 3982              		.loc 1 127 6 is_stmt 0 view .LVU1126
 3983 01b2 9942     		cmp	r1, r3
 3984 01b4 00F02481 		beq	.L417
 130:src/menu.c    ****     current_menu = last_menu;
 3985              		.loc 1 130 8 is_stmt 1 view .LVU1127
 130:src/menu.c    ****     current_menu = last_menu;
 3986              		.loc 1 130 11 is_stmt 0 view .LVU1128
 3987 01b8 481C     		adds	r0, r1, #1
 131:src/menu.c    ****   }
 3988              		.loc 1 131 5 is_stmt 1 view .LVU1129
 131:src/menu.c    ****   }
 3989              		.loc 1 131 18 is_stmt 0 view .LVU1130
 3990 01ba 04BF     		itt	eq
 3991 01bc 3F49     		ldreq	r1, .L425+84
 3992              	.LVL362:
 131:src/menu.c    ****   }
 3993              		.loc 1 131 18 view .LVU1131
 3994 01be 0978     		ldrbeq	r1, [r1]	@ zero_extendqisi2
 134:src/menu.c    ****   }
 3995              		.loc 1 134 5 is_stmt 1 view .LVU1132
 134:src/menu.c    ****   }
 3996              		.loc 1 134 18 is_stmt 0 view .LVU1133
 3997 01c0 1170     		strb	r1, [r2]
 3998              	.LVL363:
 3999              	.L372:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4000              		.loc 1 136 3 is_stmt 1 view .LVU1134
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4001              		.loc 1 136 6 is_stmt 0 view .LVU1135
 4002 01c2 092B     		cmp	r3, #9
 4003 01c4 03D0     		beq	.L374
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4004              		.loc 1 136 23 view .LVU1136
 4005 01c6 102B     		cmp	r3, #16
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4006              		.loc 1 136 43 is_stmt 1 view .LVU1137
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4007              		.loc 1 136 53 is_stmt 0 view .LVU1138
 4008 01c8 1CBF     		itt	ne
 4009 01ca 3C4A     		ldrne	r2, .L425+84
 4010 01cc 1370     		strbne	r3, [r2]
 4011              	.L374:
 4012              	.LVL364:
 136:src/menu.c    ****   // store menu as last menu unless arrow or alpha
 4013              		.loc 1 136 53 view .LVU1139
 4014              	.LBE156:
 4015              	.LBE158:
 528:src/console.c **** 	display_current_menu ();
 4016              		.loc 2 528 2 is_stmt 1 view .LVU1140
ARM GAS  /tmp/ccGpw0cR.s 			page 113


 4017 01ce FFF7FEFF 		bl	display_current_menu
 4018              	.LVL365:
 529:src/console.c **** 	reset_shift();
 4019              		.loc 2 529 2 view .LVU1141
 4020 01d2 FFF7FEFF 		bl	reset_shift
 4021              	.LVL366:
 530:src/console.c **** 	remapped = no_key;
 4022              		.loc 2 530 2 view .LVU1142
 4023              		.loc 2 530 11 is_stmt 0 view .LVU1143
 4024 01d6 3A4B     		ldr	r3, .L425+88
 4025 01d8 93E80300 		ldm	r3, {r0, r1}
 4026 01dc 0DF1080A 		add	r10, sp, #8
 4027 01e0 8AE80300 		stm	r10, {r0, r1}
 4028 01e4 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4029              	.LVL367:
 4030              		.loc 2 530 11 view .LVU1144
 4031 01e6 8946     		mov	r9, r1
 4032              	.LVL368:
 4033              		.loc 2 530 11 view .LVU1145
 4034 01e8 86E0     		b	.L370
 4035              	.LVL369:
 4036              	.L325:
 457:src/console.c ****     {
 4037              		.loc 2 457 10 is_stmt 1 view .LVU1146
 457:src/console.c ****     {
 4038              		.loc 2 457 15 is_stmt 0 view .LVU1147
 4039 01ea 2568     		ldr	r5, [r4]
 457:src/console.c ****     {
 4040              		.loc 2 457 13 view .LVU1148
 4041 01ec 15F40075 		ands	r5, r5, #512
 4042 01f0 7FF44BAF 		bne	.L326
 457:src/console.c ****     {
 4043              		.loc 2 457 35 discriminator 1 view .LVU1149
 4044 01f4 B847     		blx	r7
 4045              	.LVL370:
 457:src/console.c ****     {
 4046              		.loc 2 457 32 discriminator 1 view .LVU1150
 4047 01f6 0028     		cmp	r0, #0
 4048 01f8 3FF447AF 		beq	.L326
 459:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 4049              		.loc 2 459 7 is_stmt 1 view .LVU1151
 4050 01fc 2368     		ldr	r3, [r4]
 4051 01fe 23F00203 		bic	r3, r3, #2
 460:src/console.c ****       sys_sleep();
 4052              		.loc 2 460 7 is_stmt 0 view .LVU1152
 4053 0202 2846     		mov	r0, r5
 4054 0204 6421     		movs	r1, #100
 459:src/console.c ****       sys_timer_start(0, 100);  // Timer 0: wake up for heartbeat 
 4055              		.loc 2 459 7 view .LVU1153
 4056 0206 2360     		str	r3, [r4]
 460:src/console.c ****       sys_sleep();
 4057              		.loc 2 460 7 is_stmt 1 view .LVU1154
 4058 0208 C047     		blx	r8
 4059              	.LVL371:
 461:src/console.c ****       if (sys_timer_timeout(0)) { // If timer has completed...
 4060              		.loc 2 461 7 view .LVU1155
 4061 020a 214B     		ldr	r3, .L425+40
ARM GAS  /tmp/ccGpw0cR.s 			page 114


 4062 020c 9847     		blx	r3
 4063              	.LVL372:
 462:src/console.c **** 	key_push (K_HEARTBEAT);
 4064              		.loc 2 462 7 view .LVU1156
 462:src/console.c **** 	key_push (K_HEARTBEAT);
 4065              		.loc 2 462 11 is_stmt 0 view .LVU1157
 4066 020e 2D4B     		ldr	r3, .L425+92
 4067 0210 2846     		mov	r0, r5
 4068 0212 9847     		blx	r3
 4069              	.LVL373:
 462:src/console.c **** 	key_push (K_HEARTBEAT);
 4070              		.loc 2 462 10 view .LVU1158
 4071 0214 48B1     		cbz	r0, .L330
 463:src/console.c **** 	if (Pause > 0) Pause--;
 4072              		.loc 2 463 2 is_stmt 1 view .LVU1159
 4073 0216 2C4B     		ldr	r3, .L425+96
 4074 0218 6220     		movs	r0, #98
 4075 021a 9847     		blx	r3
 4076              	.LVL374:
 464:src/console.c ****       }
 4077              		.loc 2 464 2 view .LVU1160
 464:src/console.c ****       }
 4078              		.loc 2 464 12 is_stmt 0 view .LVU1161
 4079 021c 244B     		ldr	r3, .L425+72
 4080 021e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 464:src/console.c ****       }
 4081              		.loc 2 464 5 view .LVU1162
 4082 0220 1AB1     		cbz	r2, .L330
 464:src/console.c ****       }
 4083              		.loc 2 464 17 is_stmt 1 discriminator 1 view .LVU1163
 464:src/console.c ****       }
 4084              		.loc 2 464 22 is_stmt 0 discriminator 1 view .LVU1164
 4085 0222 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4086 0224 013A     		subs	r2, r2, #1
 4087 0226 D2B2     		uxtb	r2, r2
 4088 0228 1A70     		strb	r2, [r3]
 4089              	.L330:
 466:src/console.c ****     }
 4090              		.loc 2 466 7 is_stmt 1 view .LVU1165
 4091 022a 284B     		ldr	r3, .L425+100
 4092 022c 0020     		movs	r0, #0
 4093 022e 9847     		blx	r3
 4094              	.LVL375:
 470:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4095              		.loc 2 470 5 view .LVU1166
 470:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4096              		.loc 2 470 9 is_stmt 0 view .LVU1167
 4097 0230 2368     		ldr	r3, [r4]
 470:src/console.c ****       if (!ST(STAT_SUSPENDED)) {
 4098              		.loc 2 470 8 view .LVU1168
 4099 0232 9805     		lsls	r0, r3, #22
 4100 0234 7FF52DAF 		bpl	.L418
 4101              	.L332:
 471:src/console.c ****         // Going to off mode
 4102              		.loc 2 471 7 is_stmt 1 view .LVU1169
 471:src/console.c ****         // Going to off mode
 4103              		.loc 2 471 12 is_stmt 0 view .LVU1170
ARM GAS  /tmp/ccGpw0cR.s 			page 115


 4104 0238 2568     		ldr	r5, [r4]
 471:src/console.c ****         // Going to off mode
 4105              		.loc 2 471 10 view .LVU1171
 4106 023a 15F00405 		ands	r5, r5, #4
 4107 023e 7FF416AF 		bne	.L324
 473:src/console.c ****         draw_power_off_image(1);
 4108              		.loc 2 473 9 is_stmt 1 view .LVU1172
 4109 0242 234B     		ldr	r3, .L425+104
 4110 0244 2846     		mov	r0, r5
 4111 0246 9847     		blx	r3
 4112              	.LVL376:
 474:src/console.c **** 
 4113              		.loc 2 474 9 view .LVU1173
 4114 0248 224B     		ldr	r3, .L425+108
 4115 024a 0120     		movs	r0, #1
 4116 024c 9847     		blx	r3
 4117              	.LVL377:
 476:src/console.c ****         SET_ST(STAT_SUSPENDED);
 4118              		.loc 2 476 9 view .LVU1174
 4119 024e 224B     		ldr	r3, .L425+112
 4120 0250 2846     		mov	r0, r5
 4121 0252 9847     		blx	r3
 4122              	.LVL378:
 477:src/console.c ****         SET_ST(STAT_OFF);
 4123              		.loc 2 477 9 view .LVU1175
 4124 0254 2368     		ldr	r3, [r4]
 4125 0256 43F00403 		orr	r3, r3, #4
 4126 025a 2360     		str	r3, [r4]
 478:src/console.c ****       }
 4127              		.loc 2 478 9 view .LVU1176
 4128 025c 2368     		ldr	r3, [r4]
 4129 025e 43F01003 		orr	r3, r3, #16
 4130 0262 2360     		str	r3, [r4]
 4131 0264 03E7     		b	.L324
 4132              	.L426:
 4133 0266 00BF     		.align	2
 4134              	.L425:
 4135 0268 00000000 		.word	StateWhileOn
 4136 026c 00000000 		.word	DispMsg
 4137 0270 00200010 		.word	268443648
 4138 0274 00000000 		.word	KeyCallback
 4139 0278 7D030008 		.word	134218621
 4140 027c 2D020008 		.word	134218285
 4141 0280 00000000 		.word	run_menu_item
 4142 0284 00000000 		.word	menu_line_str
 4143 0288 31020008 		.word	134218289
 4144 028c 00000000 		.word	JustDisplayed
 4145 0290 19040008 		.word	134218777
 4146 0294 19020008 		.word	134218265
 4147 0298 91030008 		.word	134218641
 4148 029c E5020008 		.word	134218469
 4149 02a0 59020008 		.word	134218329
 4150 02a4 35020008 		.word	134218293
 4151 02a8 89030008 		.word	134218633
 4152 02ac B9030008 		.word	134218681
 4153 02b0 00000000 		.word	Pause
 4154 02b4 00000000 		.word	Running
ARM GAS  /tmp/ccGpw0cR.s 			page 116


 4155 02b8 00000000 		.word	.LANCHOR1
 4156 02bc 00000000 		.word	.LANCHOR3
 4157 02c0 00000000 		.word	.LANCHOR10
 4158 02c4 01040008 		.word	134218753
 4159 02c8 81030008 		.word	134218625
 4160 02cc F5030008 		.word	134218741
 4161 02d0 55020008 		.word	134218325
 4162 02d4 2D040008 		.word	134218797
 4163 02d8 1D020008 		.word	134218269
 4164 02dc F9030008 		.word	134218745
 4165              	.LVL379:
 4166              	.L341:
 524:src/console.c ****       remapped = remap(c);
 4167              		.loc 2 524 5 view .LVU1177
 525:src/console.c ****       if (remapped.key_34s == K_SETMENU) {
 4168              		.loc 2 525 7 view .LVU1178
 4169              	.LBB159:
  56:src/console.c **** 
 4170              		.loc 2 56 22 view .LVU1179
 4171              	.LBB147:
  58:src/console.c **** 
 4172              		.loc 2 58 3 view .LVU1180
   1:src/keytran.c ****     {K_RELEASE, -1},
 4173              		.loc 3 1 1 view .LVU1181
  59:src/keytran.c ****     {K_RELEASE, -1},
 4174              		.loc 3 59 3 view .LVU1182
 118:src/keytran.c ****     {K_RELEASE, -1},
 4175              		.loc 3 118 3 view .LVU1183
 177:src/keytran.c ****     {K_RELEASE, -1},
 4176              		.loc 3 177 1 view .LVU1184
 4177              		.loc 3 235 1 view .LVU1185
  62:src/console.c **** 
 4178              		.loc 2 62 3 view .LVU1186
  62:src/console.c **** 
 4179              		.loc 2 62 23 view .LVU1187
  62:src/console.c **** 
 4180              		.loc 2 62 30 is_stmt 0 view .LVU1188
 4181 02e0 AC4B     		ldr	r3, .L427
 4182              	.LVL380:
 4183              	.L405:
  62:src/console.c **** 
 4184              		.loc 2 62 30 view .LVU1189
 4185 02e2 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4186              	.LVL381:
  62:src/console.c **** 
 4187              		.loc 2 62 30 view .LVU1190
 4188 02e4 93E80300 		ldm	r3, {r0, r1}
 4189 02e8 0DF1080A 		add	r10, sp, #8
 4190 02ec 8AE80300 		stm	r10, {r0, r1}
 4191 02f0 8946     		mov	r9, r1
 4192              	.LVL382:
 4193              	.L343:
  62:src/console.c **** 
 4194              		.loc 2 62 30 view .LVU1191
 4195              	.LBE147:
 4196              	.LBE159:
 526:src/console.c **** 	set_menu ( remapped.shift );
ARM GAS  /tmp/ccGpw0cR.s 			page 117


 4197              		.loc 2 526 7 is_stmt 1 view .LVU1192
 526:src/console.c **** 	set_menu ( remapped.shift );
 4198              		.loc 2 526 10 is_stmt 0 view .LVU1193
 4199 02f2 2F2D     		cmp	r5, #47
 4200 02f4 3FF458AF 		beq	.L419
 4201              	.L370:
 531:src/console.c ****       }
 532:src/console.c ****       if (remapped.key_34s == K_SYS) {
 4202              		.loc 2 532 7 is_stmt 1 view .LVU1194
 4203              		.loc 2 532 10 is_stmt 0 view .LVU1195
 4204 02f8 302D     		cmp	r5, #48
 4205 02fa 1BD1     		bne	.L375
 533:src/console.c **** 	SET_ST(STAT_MENU);
 4206              		.loc 2 533 2 is_stmt 1 view .LVU1196
 4207 02fc 2368     		ldr	r3, [r4]
 534:src/console.c **** 	handle_menu(&MID_MENU, MENU_RESET, 0); // App menu
 4208              		.loc 2 534 2 is_stmt 0 view .LVU1197
 4209 02fe A64D     		ldr	r5, .L427+4
 4210              	.LVL383:
 4211              		.loc 2 534 2 view .LVU1198
 4212 0300 A648     		ldr	r0, .L427+8
 4213 0302 0022     		movs	r2, #0
 533:src/console.c **** 	SET_ST(STAT_MENU);
 4214              		.loc 2 533 2 view .LVU1199
 4215 0304 43F04003 		orr	r3, r3, #64
 4216              		.loc 2 534 2 view .LVU1200
 4217 0308 1146     		mov	r1, r2
 533:src/console.c **** 	SET_ST(STAT_MENU);
 4218              		.loc 2 533 2 view .LVU1201
 4219 030a 2360     		str	r3, [r4]
 4220              		.loc 2 534 2 is_stmt 1 view .LVU1202
 4221 030c A847     		blx	r5
 4222              	.LVL384:
 535:src/console.c **** 	CLR_ST(STAT_MENU);
 4223              		.loc 2 535 2 view .LVU1203
 4224 030e 2368     		ldr	r3, [r4]
 4225 0310 23F04003 		bic	r3, r3, #64
 4226 0314 2360     		str	r3, [r4]
 536:src/console.c **** 	reset_shift();
 4227              		.loc 2 536 2 view .LVU1204
 4228 0316 FFF7FEFF 		bl	reset_shift
 4229              	.LVL385:
 537:src/console.c **** 	remapped =  no_key;
 4230              		.loc 2 537 2 view .LVU1205
 4231              		.loc 2 537 11 is_stmt 0 view .LVU1206
 4232 031a A14B     		ldr	r3, .L427+12
 4233 031c 93E80300 		ldm	r3, {r0, r1}
 4234 0320 0DF1080A 		add	r10, sp, #8
 4235 0324 8AE80300 		stm	r10, {r0, r1}
 4236 0328 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 4237              	.LVL386:
 4238              		.loc 2 537 11 view .LVU1207
 4239 032a 8946     		mov	r9, r1
 4240              	.LVL387:
 538:src/console.c **** 	clear_disp();
 4241              		.loc 2 538 2 is_stmt 1 view .LVU1208
 4242 032c FFF7FEFF 		bl	clear_disp
ARM GAS  /tmp/ccGpw0cR.s 			page 118


 4243              	.LVL388:
 539:src/console.c **** 	display_current_menu();
 4244              		.loc 2 539 2 view .LVU1209
 4245 0330 FFF7FEFF 		bl	display_current_menu
 4246              	.LVL389:
 4247              	.L375:
 540:src/console.c ****       }
 541:src/console.c ****       if (remapped.key_34s == K_MULTI) {
 4248              		.loc 2 541 7 view .LVU1210
 4249              		.loc 2 541 10 is_stmt 0 view .LVU1211
 4250 0334 312D     		cmp	r5, #49
 4251 0336 35D0     		beq	.L378
 542:src/console.c **** 	remapped = do_multi (remapped);
 543:src/console.c **** 	display_current_menu();
 544:src/console.c ****       }
 545:src/console.c ****       if (remapped.key_34s == K_EXIT) break;
 4252              		.loc 2 545 7 is_stmt 1 view .LVU1212
 4253              		.loc 2 545 10 is_stmt 0 view .LVU1213
 4254 0338 322D     		cmp	r5, #50
 4255 033a 4CD0     		beq	.L377
 4256              	.L421:
 4257              		.loc 2 545 10 view .LVU1214
 4258 033c 0DF1080A 		add	r10, sp, #8
 4259              	.LVL390:
 4260              	.L365:
 546:src/console.c ****       process_keycode_with_shift(remapped);
 4261              		.loc 2 546 7 is_stmt 1 view .LVU1215
 4262              		.loc 2 546 7 is_stmt 0 view .LVU1216
 4263 0340 8DF80850 		strb	r5, [sp, #8]
 4264 0344 CDF80C90 		str	r9, [sp, #12]
 4265 0348 9AE80300 		ldm	r10, {r0, r1}
 4266 034c FFF7FEFF 		bl	process_keycode_with_shift
 4267              	.LVL391:
 547:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4268              		.loc 2 547 7 is_stmt 1 view .LVU1217
 4269              		.loc 2 547 10 is_stmt 0 view .LVU1218
 4270 0350 622D     		cmp	r5, #98
 4271 0352 1FD0     		beq	.L420
 4272              	.LVL392:
 4273              	.L366:
 4274              		.loc 2 547 59 is_stmt 1 view .LVU1219
 4275              	.LBB160:
 4276              	.LBI160:
 252:src/console.c ****     start_ticks = get_rtc_ticks();
 4277              		.loc 2 252 6 view .LVU1220
 4278              	.LBB161:
 253:src/console.c **** }
 4279              		.loc 2 253 5 view .LVU1221
 253:src/console.c **** }
 4280              		.loc 2 253 19 is_stmt 0 view .LVU1222
 4281 0354 934B     		ldr	r3, .L427+16
 4282 0356 9847     		blx	r3
 4283              	.LVL393:
 253:src/console.c **** }
 4284              		.loc 2 253 17 view .LVU1223
 4285 0358 934B     		ldr	r3, .L427+20
 4286 035a 1860     		str	r0, [r3]
ARM GAS  /tmp/ccGpw0cR.s 			page 119


 254:src/console.c **** 
 4287              		.loc 2 254 1 view .LVU1224
 4288 035c 87E6     		b	.L324
 4289              	.LVL394:
 4290              	.L339:
 254:src/console.c **** 
 4291              		.loc 2 254 1 view .LVU1225
 4292              	.LBE161:
 4293              	.LBE160:
 515:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4294              		.loc 2 515 10 is_stmt 1 view .LVU1226
 515:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4295              		.loc 2 515 15 is_stmt 0 view .LVU1227
 4296 035e 934B     		ldr	r3, .L427+24
 4297 0360 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 515:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4298              		.loc 2 515 13 view .LVU1228
 4299 0362 DB07     		lsls	r3, r3, #31
 4300 0364 7FF5BCAE 		bpl	.L340
 515:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4301              		.loc 2 515 37 discriminator 1 view .LVU1229
 4302 0368 FFF7FEFF 		bl	DM42_Ticker
 4303              	.LVL395:
 515:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4304              		.loc 2 515 37 discriminator 1 view .LVU1230
 4305 036c 904A     		ldr	r2, .L427+28
 4306 036e 914B     		ldr	r3, .L427+32
 4307 0370 02FB0030 		mla	r0, r2, r0, r3
 515:src/console.c ****       dot( LIT_EQ, !is_dot( LIT_EQ ) );
 4308              		.loc 2 515 32 discriminator 1 view .LVU1231
 4309 0374 B0F1333F 		cmp	r0, #858993459
 4310 0378 BFF4B2AE 		bcs	.L340
 516:src/console.c ****       lcd_refresh();
 4311              		.loc 2 516 7 is_stmt 1 view .LVU1232
 516:src/console.c ****       lcd_refresh();
 4312              		.loc 2 516 21 is_stmt 0 view .LVU1233
 4313 037c 8420     		movs	r0, #132
 4314 037e FFF7FEFF 		bl	is_dot
 4315              	.LVL396:
 516:src/console.c ****       lcd_refresh();
 4316              		.loc 2 516 7 view .LVU1234
 4317 0382 B0FA80F1 		clz	r1, r0
 4318 0386 4909     		lsrs	r1, r1, #5
 4319 0388 8420     		movs	r0, #132
 4320 038a FFF7FEFF 		bl	dot
 4321              	.LVL397:
 517:src/console.c ****     }
 4322              		.loc 2 517 7 is_stmt 1 view .LVU1235
 4323 038e 8A4B     		ldr	r3, .L427+36
 4324 0390 9847     		blx	r3
 4325              	.LVL398:
 4326 0392 A5E6     		b	.L340
 4327              	.LVL399:
 4328              	.L420:
 4329              		.loc 2 547 43 is_stmt 0 discriminator 2 view .LVU1236
 4330 0394 894B     		ldr	r3, .L427+40
 4331 0396 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccGpw0cR.s 			page 120


 4332 0398 002B     		cmp	r3, #0
 4333 039a 3FF468AE 		beq	.L324
 4334 039e D9E7     		b	.L366
 4335              	.LVL400:
 4336              	.L344:
 526:src/console.c **** 	set_menu ( remapped.shift );
 4337              		.loc 2 526 7 is_stmt 1 view .LVU1237
 532:src/console.c **** 	SET_ST(STAT_MENU);
 4338              		.loc 2 532 7 view .LVU1238
 541:src/console.c **** 	remapped = do_multi (remapped);
 4339              		.loc 2 541 7 view .LVU1239
 4340              	.LBB162:
 4341              	.LBB148:
 4342              	.LBB145:
  68:src/console.c ****   }
 4343              		.loc 2 68 12 is_stmt 0 view .LVU1240
 4344 03a0 4FF00C09 		mov	r9, #12
 4345              	.LVL401:
 4346              	.L378:
  68:src/console.c ****   }
 4347              		.loc 2 68 12 view .LVU1241
 4348              	.LBE145:
 4349              	.LBE148:
 4350              	.LBE162:
 542:src/console.c **** 	display_current_menu();
 4351              		.loc 2 542 2 is_stmt 1 view .LVU1242
 542:src/console.c **** 	display_current_menu();
 4352              		.loc 2 542 13 is_stmt 0 view .LVU1243
 4353 03a4 3123     		movs	r3, #49
 4354 03a6 CDF80C90 		str	r9, [sp, #12]
 4355 03aa 8DF80830 		strb	r3, [sp, #8]
 4356 03ae 6D46     		mov	r5, sp
 4357 03b0 0DF1080A 		add	r10, sp, #8
 4358 03b4 9AE80600 		ldm	r10, {r1, r2}
 4359 03b8 2846     		mov	r0, r5
 4360 03ba FFF7FEFF 		bl	do_multi
 4361              	.LVL402:
 4362 03be 95E80300 		ldm	r5, {r0, r1}
 4363 03c2 8AE80300 		stm	r10, {r0, r1}
 4364 03c6 9DF80850 		ldrb	r5, [sp, #8]	@ zero_extendqisi2
 4365              	.LVL403:
 542:src/console.c **** 	display_current_menu();
 4366              		.loc 2 542 13 view .LVU1244
 4367 03ca DDF80C90 		ldr	r9, [sp, #12]
 4368              	.LVL404:
 543:src/console.c ****       }
 4369              		.loc 2 543 2 is_stmt 1 view .LVU1245
 4370 03ce FFF7FEFF 		bl	display_current_menu
 4371              	.LVL405:
 545:src/console.c ****       process_keycode_with_shift(remapped);
 4372              		.loc 2 545 7 view .LVU1246
 545:src/console.c ****       process_keycode_with_shift(remapped);
 4373              		.loc 2 545 10 is_stmt 0 view .LVU1247
 4374 03d2 322D     		cmp	r5, #50
 4375 03d4 B2D1     		bne	.L421
 4376              	.L377:
 548:src/console.c ****     }
ARM GAS  /tmp/ccGpw0cR.s 			page 121


 549:src/console.c ****   }
 550:src/console.c ****   save_ram_file(0);
 4377              		.loc 2 550 3 is_stmt 1 view .LVU1248
 4378 03d6 0020     		movs	r0, #0
 551:src/console.c ****   //  free_storage();
 552:src/console.c ****   return;
 553:src/console.c **** }
 4379              		.loc 2 553 1 is_stmt 0 view .LVU1249
 4380 03d8 38B0     		add	sp, sp, #224
 4381              		.cfi_remember_state
 4382              		.cfi_def_cfa_offset 32
 4383              		@ sp needed
 4384 03da BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 4385              		.cfi_restore 14
 4386              		.cfi_restore 10
 4387              		.cfi_restore 9
 4388              		.cfi_restore 8
 4389              		.cfi_restore 7
 4390              		.cfi_restore 6
 4391              		.cfi_restore 5
 4392              		.cfi_restore 4
 4393              		.cfi_def_cfa_offset 0
 4394              	.LVL406:
 550:src/console.c ****   //  free_storage();
 4395              		.loc 2 550 3 view .LVU1250
 4396 03de FFF7FEBF 		b	save_ram_file
 4397              	.LVL407:
 4398              	.L407:
 4399              		.cfi_restore_state
 4400              	.LBB163:
 4401              	.LBB149:
  72:src/console.c ****   }
 4402              		.loc 2 72 5 is_stmt 1 view .LVU1251
  72:src/console.c ****   }
 4403              		.loc 2 72 27 is_stmt 0 view .LVU1252
 4404 03e2 774B     		ldr	r3, .L427+44
 4405              	.L404:
 124:src/console.c ****     break;
 4406              		.loc 2 124 26 view .LVU1253
 4407 03e4 03EBC502 		add	r2, r3, r5, lsl #3
 4408 03e8 92E80300 		ldm	r2, {r0, r1}
 4409 03ec 0DF1080A 		add	r10, sp, #8
 4410 03f0 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4411              	.LVL408:
 124:src/console.c ****     break;
 4412              		.loc 2 124 26 view .LVU1254
 4413 03f4 8946     		mov	r9, r1
 4414              	.LVL409:
 124:src/console.c ****     break;
 4415              		.loc 2 124 26 view .LVU1255
 4416 03f6 8AE80300 		stm	r10, {r0, r1}
 4417 03fa 7AE7     		b	.L343
 4418              	.LVL410:
 4419              	.L406:
  64:src/console.c **** 
 4420              		.loc 2 64 16 is_stmt 1 view .LVU1256
  64:src/console.c **** 
ARM GAS  /tmp/ccGpw0cR.s 			page 122


 4421              		.loc 2 64 23 is_stmt 0 view .LVU1257
 4422 03fc 714B     		ldr	r3, .L427+48
 4423 03fe 70E7     		b	.L405
 4424              	.LVL411:
 4425              	.L417:
  64:src/console.c **** 
 4426              		.loc 2 64 23 view .LVU1258
 4427              	.LBE149:
 4428              	.LBE163:
 4429              	.LBB164:
 4430              	.LBB157:
 128:src/menu.c    ****   }
 4431              		.loc 1 128 5 is_stmt 1 view .LVU1259
 128:src/menu.c    ****   }
 4432              		.loc 1 128 18 is_stmt 0 view .LVU1260
 4433 0400 7149     		ldr	r1, .L427+52
 4434              	.LVL412:
 128:src/menu.c    ****   }
 4435              		.loc 1 128 18 view .LVU1261
 4436 0402 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4437 0404 1170     		strb	r1, [r2]
 4438 0406 DCE6     		b	.L372
 4439              	.LVL413:
 4440              	.L359:
 128:src/menu.c    ****   }
 4441              		.loc 1 128 18 view .LVU1262
 4442              	.LBE157:
 4443              	.LBE164:
 4444              	.LBB165:
 4445              	.LBB150:
  95:src/console.c ****   }
 4446              		.loc 2 95 5 is_stmt 1 view .LVU1263
  95:src/console.c ****   }
 4447              		.loc 2 95 9 is_stmt 0 view .LVU1264
 4448 0408 FFF7FEFF 		bl	cur_shift
 4449              	.LVL414:
  95:src/console.c ****   }
 4450              		.loc 2 95 8 view .LVU1265
 4451 040c 0128     		cmp	r0, #1
 4452 040e 56D0     		beq	.L422
 4453              	.L346:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4454              		.loc 2 98 3 is_stmt 1 view .LVU1266
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4455              		.loc 2 98 8 is_stmt 0 view .LVU1267
 4456 0410 FFF7FEFF 		bl	get_alpha_state
 4457              	.LVL415:
  98:src/console.c ****     if (c == KEY_SHIFT) { //deal with shift keys
 4458              		.loc 2 98 6 view .LVU1268
 4459 0414 D8B3     		cbz	r0, .L360
  99:src/console.c ****       switch (cur_shift()) { 
 4460              		.loc 2 99 5 is_stmt 1 view .LVU1269
  99:src/console.c ****       switch (cur_shift()) { 
 4461              		.loc 2 99 8 is_stmt 0 view .LVU1270
 4462 0416 1C2D     		cmp	r5, #28
 4463 0418 00F08580 		beq	.L423
 116:src/console.c ****   }
ARM GAS  /tmp/ccGpw0cR.s 			page 123


 4464              		.loc 2 116 5 is_stmt 1 view .LVU1271
 116:src/console.c ****   }
 4465              		.loc 2 116 26 is_stmt 0 view .LVU1272
 4466 041c 6B4B     		ldr	r3, .L427+56
 4467 041e E1E7     		b	.L404
 4468              	.L353:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4469              		.loc 2 79 5 is_stmt 1 view .LVU1273
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4470              		.loc 2 79 9 is_stmt 0 view .LVU1274
 4471 0420 FFF7FEFF 		bl	cur_shift
 4472              	.LVL416:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4473              		.loc 2 79 8 view .LVU1275
 4474 0424 0028     		cmp	r0, #0
 4475 0426 7FF481AE 		bne	.L354
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4476              		.loc 2 79 33 is_stmt 1 view .LVU1276
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4477              		.loc 2 79 51 is_stmt 0 view .LVU1277
 4478 042a DDE90801 		ldrd	r0, r1, [sp, #32]
 4479 042e 0DF1080A 		add	r10, sp, #8
 4480 0432 8AE80300 		stm	r10, {r0, r1}
 4481 0436 9DF82050 		ldrb	r5, [sp, #32]	@ zero_extendqisi2
 4482              	.LVL417:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4483              		.loc 2 79 51 view .LVU1278
 4484 043a 8946     		mov	r9, r1
 4485              	.LVL418:
  79:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[0].shifted;
 4486              		.loc 2 79 51 view .LVU1279
 4487 043c 59E7     		b	.L343
 4488              	.LVL419:
 4489              	.L415:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4490              		.loc 2 91 33 is_stmt 1 view .LVU1280
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4491              		.loc 2 91 51 is_stmt 0 view .LVU1281
 4492 043e DDE92801 		ldrd	r0, r1, [sp, #160]
 4493 0442 0DF1080A 		add	r10, sp, #8
 4494 0446 8AE80300 		stm	r10, {r0, r1}
 4495 044a 9DF8A050 		ldrb	r5, [sp, #160]	@ zero_extendqisi2
 4496              	.LVL420:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4497              		.loc 2 91 51 view .LVU1282
 4498 044e 8946     		mov	r9, r1
 4499              	.LVL421:
  91:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[4].shifted;
 4500              		.loc 2 91 51 view .LVU1283
 4501 0450 4FE7     		b	.L343
 4502              	.LVL422:
 4503              	.L413:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4504              		.loc 2 88 33 is_stmt 1 view .LVU1284
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4505              		.loc 2 88 51 is_stmt 0 view .LVU1285
 4506 0452 DDE92001 		ldrd	r0, r1, [sp, #128]
ARM GAS  /tmp/ccGpw0cR.s 			page 124


 4507 0456 0DF1080A 		add	r10, sp, #8
 4508 045a 8AE80300 		stm	r10, {r0, r1}
 4509 045e 9DF88050 		ldrb	r5, [sp, #128]	@ zero_extendqisi2
 4510              	.LVL423:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4511              		.loc 2 88 51 view .LVU1286
 4512 0462 8946     		mov	r9, r1
 4513              	.LVL424:
  88:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[3].shifted;
 4514              		.loc 2 88 51 view .LVU1287
 4515 0464 45E7     		b	.L343
 4516              	.LVL425:
 4517              	.L411:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4518              		.loc 2 85 33 is_stmt 1 view .LVU1288
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4519              		.loc 2 85 51 is_stmt 0 view .LVU1289
 4520 0466 DDE91801 		ldrd	r0, r1, [sp, #96]
 4521 046a 0DF1080A 		add	r10, sp, #8
 4522 046e 8AE80300 		stm	r10, {r0, r1}
 4523 0472 9DF86050 		ldrb	r5, [sp, #96]	@ zero_extendqisi2
 4524              	.LVL426:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4525              		.loc 2 85 51 view .LVU1290
 4526 0476 8946     		mov	r9, r1
 4527              	.LVL427:
  85:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[2].shifted;
 4528              		.loc 2 85 51 view .LVU1291
 4529 0478 3BE7     		b	.L343
 4530              	.LVL428:
 4531              	.L409:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4532              		.loc 2 82 33 is_stmt 1 view .LVU1292
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4533              		.loc 2 82 51 is_stmt 0 view .LVU1293
 4534 047a DDE91001 		ldrd	r0, r1, [sp, #64]
 4535 047e 0DF1080A 		add	r10, sp, #8
 4536 0482 8AE80300 		stm	r10, {r0, r1}
 4537 0486 9DF84050 		ldrb	r5, [sp, #64]	@ zero_extendqisi2
 4538              	.LVL429:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4539              		.loc 2 82 51 view .LVU1294
 4540 048a 8946     		mov	r9, r1
 4541              	.LVL430:
  82:src/console.c ****     if (cur_shift() == SHIFT_F) return Ref.keys[1].shifted;
 4542              		.loc 2 82 51 view .LVU1295
 4543 048c 31E7     		b	.L343
 4544              	.LVL431:
 4545              	.L360:
 119:src/console.c ****   case SHIFT_N:    
 4546              		.loc 2 119 3 is_stmt 1 view .LVU1296
 119:src/console.c ****   case SHIFT_N:    
 4547              		.loc 2 119 11 is_stmt 0 view .LVU1297
 4548 048e FFF7FEFF 		bl	cur_shift
 4549              	.LVL432:
 119:src/console.c ****   case SHIFT_N:    
 4550              		.loc 2 119 3 view .LVU1298
ARM GAS  /tmp/ccGpw0cR.s 			page 125


 4551 0492 0128     		cmp	r0, #1
 4552 0494 45D0     		beq	.L367
 4553 0496 0228     		cmp	r0, #2
 4554 0498 02D0     		beq	.L368
 4555 049a 70B1     		cbz	r0, .L369
  58:src/console.c **** 
 4556              		.loc 2 58 41 view .LVU1299
 4557 049c EDB2     		uxtb	r5, r5
 4558              	.LVL433:
  58:src/console.c **** 
 4559              		.loc 2 58 41 view .LVU1300
 4560 049e 28E7     		b	.L343
 4561              	.LVL434:
 4562              	.L368:
 125:src/console.c ****   case SHIFT_G:
 4563              		.loc 2 125 5 is_stmt 1 view .LVU1301
 127:src/console.c ****     break;
 4564              		.loc 2 127 5 view .LVU1302
 127:src/console.c ****     break;
 4565              		.loc 2 127 26 is_stmt 0 view .LVU1303
 4566 04a0 4B4B     		ldr	r3, .L427+60
 4567 04a2 03EBC502 		add	r2, r3, r5, lsl #3
 4568 04a6 92E80300 		ldm	r2, {r0, r1}
 4569 04aa 0DF1080A 		add	r10, sp, #8
 4570 04ae 8AE80300 		stm	r10, {r0, r1}
 4571 04b2 13F83550 		ldrb	r5, [r3, r5, lsl #3]	@ zero_extendqisi2
 4572              	.LVL435:
 127:src/console.c ****     break;
 4573              		.loc 2 127 26 view .LVU1304
 4574 04b6 8946     		mov	r9, r1
 4575              	.LVL436:
 127:src/console.c ****     break;
 4576              		.loc 2 127 26 view .LVU1305
 4577 04b8 1BE7     		b	.L343
 4578              	.LVL437:
 4579              	.L369:
 121:src/console.c ****     break;
 4580              		.loc 2 121 5 is_stmt 1 view .LVU1306
 121:src/console.c ****     break;
 4581              		.loc 2 121 24 is_stmt 0 view .LVU1307
 4582 04ba 464B     		ldr	r3, .L427+64
 4583 04bc 92E7     		b	.L404
 4584              	.L422:
  95:src/console.c ****   }
 4585              		.loc 2 95 33 is_stmt 1 view .LVU1308
  95:src/console.c ****   }
 4586              		.loc 2 95 51 is_stmt 0 view .LVU1309
 4587 04be DDE93201 		ldrd	r0, r1, [sp, #200]
 4588 04c2 0DF1080A 		add	r10, sp, #8
 4589 04c6 8AE80300 		stm	r10, {r0, r1}
 4590 04ca 9DF8C850 		ldrb	r5, [sp, #200]	@ zero_extendqisi2
 4591              	.LVL438:
  95:src/console.c ****   }
 4592              		.loc 2 95 51 view .LVU1310
 4593 04ce 8946     		mov	r9, r1
 4594              	.LVL439:
  95:src/console.c ****   }
ARM GAS  /tmp/ccGpw0cR.s 			page 126


 4595              		.loc 2 95 51 view .LVU1311
 4596 04d0 0FE7     		b	.L343
 4597              	.LVL440:
 4598              	.L414:
  89:src/console.c ****   case KEY_F5:
 4599              		.loc 2 89 33 is_stmt 1 view .LVU1312
  89:src/console.c ****   case KEY_F5:
 4600              		.loc 2 89 51 is_stmt 0 view .LVU1313
 4601 04d2 DDE92201 		ldrd	r0, r1, [sp, #136]
 4602 04d6 0DF1080A 		add	r10, sp, #8
 4603 04da 8AE80300 		stm	r10, {r0, r1}
 4604 04de 9DF88850 		ldrb	r5, [sp, #136]	@ zero_extendqisi2
 4605              	.LVL441:
  89:src/console.c ****   case KEY_F5:
 4606              		.loc 2 89 51 view .LVU1314
 4607 04e2 8946     		mov	r9, r1
 4608              	.LVL442:
  89:src/console.c ****   case KEY_F5:
 4609              		.loc 2 89 51 view .LVU1315
 4610 04e4 05E7     		b	.L343
 4611              	.LVL443:
 4612              	.L416:
  92:src/console.c ****   case KEY_F6:
 4613              		.loc 2 92 33 is_stmt 1 view .LVU1316
  92:src/console.c ****   case KEY_F6:
 4614              		.loc 2 92 51 is_stmt 0 view .LVU1317
 4615 04e6 DDE92A01 		ldrd	r0, r1, [sp, #168]
 4616 04ea 0DF1080A 		add	r10, sp, #8
 4617 04ee 8AE80300 		stm	r10, {r0, r1}
 4618 04f2 9DF8A850 		ldrb	r5, [sp, #168]	@ zero_extendqisi2
 4619              	.LVL444:
  92:src/console.c ****   case KEY_F6:
 4620              		.loc 2 92 51 view .LVU1318
 4621 04f6 8946     		mov	r9, r1
 4622              	.LVL445:
  92:src/console.c ****   case KEY_F6:
 4623              		.loc 2 92 51 view .LVU1319
 4624 04f8 FBE6     		b	.L343
 4625              	.LVL446:
 4626              	.L412:
  86:src/console.c ****   case KEY_F4:
 4627              		.loc 2 86 33 is_stmt 1 view .LVU1320
  86:src/console.c ****   case KEY_F4:
 4628              		.loc 2 86 51 is_stmt 0 view .LVU1321
 4629 04fa DDE91A01 		ldrd	r0, r1, [sp, #104]
 4630 04fe 0DF1080A 		add	r10, sp, #8
 4631 0502 8AE80300 		stm	r10, {r0, r1}
 4632 0506 9DF86850 		ldrb	r5, [sp, #104]	@ zero_extendqisi2
 4633              	.LVL447:
  86:src/console.c ****   case KEY_F4:
 4634              		.loc 2 86 51 view .LVU1322
 4635 050a 8946     		mov	r9, r1
 4636              	.LVL448:
  86:src/console.c ****   case KEY_F4:
 4637              		.loc 2 86 51 view .LVU1323
 4638 050c F1E6     		b	.L343
 4639              	.LVL449:
ARM GAS  /tmp/ccGpw0cR.s 			page 127


 4640              	.L410:
  83:src/console.c ****   case KEY_F3:
 4641              		.loc 2 83 33 is_stmt 1 view .LVU1324
  83:src/console.c ****   case KEY_F3:
 4642              		.loc 2 83 51 is_stmt 0 view .LVU1325
 4643 050e DDE91201 		ldrd	r0, r1, [sp, #72]
 4644 0512 0DF1080A 		add	r10, sp, #8
 4645 0516 8AE80300 		stm	r10, {r0, r1}
 4646 051a 9DF84850 		ldrb	r5, [sp, #72]	@ zero_extendqisi2
 4647              	.LVL450:
  83:src/console.c ****   case KEY_F3:
 4648              		.loc 2 83 51 view .LVU1326
 4649 051e 8946     		mov	r9, r1
 4650              	.LVL451:
  83:src/console.c ****   case KEY_F3:
 4651              		.loc 2 83 51 view .LVU1327
 4652 0520 E7E6     		b	.L343
 4653              	.LVL452:
 4654              	.L367:
 122:src/console.c ****   case SHIFT_F:
 4655              		.loc 2 122 5 is_stmt 1 view .LVU1328
 124:src/console.c ****     break;
 4656              		.loc 2 124 5 view .LVU1329
 124:src/console.c ****     break;
 4657              		.loc 2 124 26 is_stmt 0 view .LVU1330
 4658 0522 2D4B     		ldr	r3, .L427+68
 4659 0524 5EE7     		b	.L404
 4660              	.L423:
 100:src/console.c ****       case SHIFT_N:
 4661              		.loc 2 100 7 is_stmt 1 view .LVU1331
 100:src/console.c ****       case SHIFT_N:
 4662              		.loc 2 100 15 is_stmt 0 view .LVU1332
 4663 0526 FFF7FEFF 		bl	cur_shift
 4664              	.LVL453:
 100:src/console.c ****       case SHIFT_N:
 4665              		.loc 2 100 7 view .LVU1333
 4666 052a 0328     		cmp	r0, #3
 4667 052c 28D8     		bhi	.L362
 4668 052e 0128     		cmp	r0, #1
 4669 0530 11D8     		bhi	.L363
 4670 0532 E0B1     		cbz	r0, .L424
 103:src/console.c ****       case SHIFT_F:
 4671              		.loc 2 103 2 is_stmt 1 view .LVU1334
 105:src/console.c **** 	break;
 4672              		.loc 2 105 2 view .LVU1335
 105:src/console.c **** 	break;
 4673              		.loc 2 105 23 is_stmt 0 view .LVU1336
 4674 0534 294B     		ldr	r3, .L427+72
 4675 0536 93E80300 		ldm	r3, {r0, r1}
 4676 053a 0DF1080A 		add	r10, sp, #8
 4677 053e 8AE80300 		stm	r10, {r0, r1}
 4678              	.LVL454:
 105:src/console.c **** 	break;
 4679              		.loc 2 105 23 view .LVU1337
 4680              	.LBE150:
 4681              	.LBE165:
 526:src/console.c **** 	set_menu ( remapped.shift );
ARM GAS  /tmp/ccGpw0cR.s 			page 128


 4682              		.loc 2 526 7 is_stmt 1 view .LVU1338
 532:src/console.c **** 	SET_ST(STAT_MENU);
 4683              		.loc 2 532 7 view .LVU1339
 541:src/console.c **** 	remapped = do_multi (remapped);
 4684              		.loc 2 541 7 view .LVU1340
 545:src/console.c ****       process_keycode_with_shift(remapped);
 4685              		.loc 2 545 7 view .LVU1341
 546:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4686              		.loc 2 546 7 view .LVU1342
 546:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4687              		.loc 2 546 7 is_stmt 0 view .LVU1343
 4688 0542 2A22     		movs	r2, #42
 4689 0544 0023     		movs	r3, #0
 4690 0546 8DF80820 		strb	r2, [sp, #8]
 4691 054a 0393     		str	r3, [sp, #12]
 4692 054c 9AE80300 		ldm	r10, {r0, r1}
 4693 0550 FFF7FEFF 		bl	process_keycode_with_shift
 4694              	.LVL455:
 547:src/console.c ****     }
 4695              		.loc 2 547 7 is_stmt 1 view .LVU1344
 4696 0554 FEE6     		b	.L366
 4697              	.LVL456:
 4698              	.L363:
 4699              	.LBB166:
 4700              	.LBB151:
 106:src/console.c ****       case SHIFT_G:
 4701              		.loc 2 106 2 view .LVU1345
 108:src/console.c **** 	break;
 4702              		.loc 2 108 2 view .LVU1346
 108:src/console.c **** 	break;
 4703              		.loc 2 108 9 is_stmt 0 view .LVU1347
 4704 0556 224B     		ldr	r3, .L427+76
 4705 0558 C3E6     		b	.L405
 4706              	.L408:
  80:src/console.c ****   case KEY_F2:
 4707              		.loc 2 80 33 is_stmt 1 view .LVU1348
  80:src/console.c ****   case KEY_F2:
 4708              		.loc 2 80 51 is_stmt 0 view .LVU1349
 4709 055a DDE90A01 		ldrd	r0, r1, [sp, #40]
 4710 055e 0DF1080A 		add	r10, sp, #8
 4711 0562 8AE80300 		stm	r10, {r0, r1}
 4712 0566 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 4713              	.LVL457:
  80:src/console.c ****   case KEY_F2:
 4714              		.loc 2 80 51 view .LVU1350
 4715 056a 8946     		mov	r9, r1
 4716              	.LVL458:
  80:src/console.c ****   case KEY_F2:
 4717              		.loc 2 80 51 view .LVU1351
 4718 056c C1E6     		b	.L343
 4719              	.LVL459:
 4720              	.L424:
 102:src/console.c **** 	break;
 4721              		.loc 2 102 2 is_stmt 1 view .LVU1352
 102:src/console.c **** 	break;
 4722              		.loc 2 102 21 is_stmt 0 view .LVU1353
 4723 056e 1D4B     		ldr	r3, .L427+80
ARM GAS  /tmp/ccGpw0cR.s 			page 129


 4724 0570 93E80300 		ldm	r3, {r0, r1}
 4725 0574 0DF1080A 		add	r10, sp, #8
 4726 0578 8AE80300 		stm	r10, {r0, r1}
 4727              	.LVL460:
 102:src/console.c **** 	break;
 4728              		.loc 2 102 21 view .LVU1354
 4729              	.LBE151:
 4730              	.LBE166:
 526:src/console.c **** 	set_menu ( remapped.shift );
 4731              		.loc 2 526 7 is_stmt 1 view .LVU1355
 532:src/console.c **** 	SET_ST(STAT_MENU);
 4732              		.loc 2 532 7 view .LVU1356
 541:src/console.c **** 	remapped = do_multi (remapped);
 4733              		.loc 2 541 7 view .LVU1357
 545:src/console.c ****       process_keycode_with_shift(remapped);
 4734              		.loc 2 545 7 view .LVU1358
 4735              	.LBB167:
 4736              	.LBB152:
 102:src/console.c **** 	break;
 4737              		.loc 2 102 21 is_stmt 0 view .LVU1359
 4738 057c 2925     		movs	r5, #41
 4739              	.LVL461:
 102:src/console.c **** 	break;
 4740              		.loc 2 102 21 view .LVU1360
 4741 057e DFE6     		b	.L365
 4742              	.LVL462:
 4743              	.L362:
 102:src/console.c **** 	break;
 4744              		.loc 2 102 21 view .LVU1361
 4745              	.LBE152:
 4746              	.LBE167:
 526:src/console.c **** 	set_menu ( remapped.shift );
 4747              		.loc 2 526 7 is_stmt 1 view .LVU1362
 532:src/console.c **** 	SET_ST(STAT_MENU);
 4748              		.loc 2 532 7 view .LVU1363
 541:src/console.c **** 	remapped = do_multi (remapped);
 4749              		.loc 2 541 7 view .LVU1364
 545:src/console.c ****       process_keycode_with_shift(remapped);
 4750              		.loc 2 545 7 view .LVU1365
 546:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4751              		.loc 2 546 7 view .LVU1366
 546:src/console.c ****       if (remapped.key_34s != K_HEARTBEAT || JustStopped) start_key_timer(); 
 4752              		.loc 2 546 7 is_stmt 0 view .LVU1367
 4753 0580 0023     		movs	r3, #0
 4754 0582 8DF80850 		strb	r5, [sp, #8]
 4755 0586 0298     		ldr	r0, [sp, #8]
 4756 0588 0393     		str	r3, [sp, #12]
 4757 058a 1946     		mov	r1, r3
 4758 058c FFF7FEFF 		bl	process_keycode_with_shift
 4759              	.LVL463:
 547:src/console.c ****     }
 4760              		.loc 2 547 7 is_stmt 1 view .LVU1368
 4761 0590 E0E6     		b	.L366
 4762              	.L428:
 4763 0592 00BF     		.align	2
 4764              	.L427:
 4765 0594 00000000 		.word	.LANCHOR19
ARM GAS  /tmp/ccGpw0cR.s 			page 130


 4766 0598 59030008 		.word	134218585
 4767 059c 00000000 		.word	.LANCHOR18
 4768 05a0 00000000 		.word	.LANCHOR10
 4769 05a4 B9040008 		.word	134218937
 4770 05a8 00000000 		.word	.LANCHOR8
 4771 05ac 00000000 		.word	StopWatchStatus
 4772 05b0 CDCCCCCC 		.word	-858993459
 4773 05b4 99999919 		.word	429496729
 4774 05b8 31020008 		.word	134218289
 4775 05bc 00000000 		.word	JustStopped
 4776 05c0 00000000 		.word	.LANCHOR12
 4777 05c4 00000000 		.word	.LANCHOR11
 4778 05c8 00000000 		.word	.LANCHOR2
 4779 05cc 00000000 		.word	.LANCHOR16
 4780 05d0 00000000 		.word	.LANCHOR17
 4781 05d4 00000000 		.word	.LANCHOR13
 4782 05d8 00000000 		.word	.LANCHOR14
 4783 05dc E0000000 		.word	.LANCHOR14+224
 4784 05e0 00000000 		.word	.LANCHOR15
 4785 05e4 E0000000 		.word	.LANCHOR13+224
 4786              		.cfi_endproc
 4787              	.LFE34:
 4789              		.global	n_p
 4790              		.comm	print_string,22,4
 4791              		.global	spaces
 4792              		.global	release
 4793              		.global	h_shift
 4794              		.global	g_shift
 4795              		.global	f_shift
 4796              		.global	heartbeat
 4797              		.global	no_key
 4798              		.global	MID_MENU
 4799              		.section	.rodata.str1.4,"aMS",%progbits,1
 4800              		.align	2
 4801              	.LC18:
 4802 0000 53797374 		.ascii	"System!\000"
 4802      656D2100 
 4803              		.global	mid_menu
 4804              		.global	default_menu
 4805              		.global	last_menu
 4806              		.global	current_menu
 4807              		.global	cmplx_key_string
 4808              		.align	2
 4809              	.LC19:
 4810 0008 43505800 		.ascii	"CPX\000"
 4811              		.global	arrow_key_string
 4812              		.align	2
 4813              	.LC20:
 4814 000c 2D2D0D00 		.ascii	"--\015\000"
 4815              		.global	UserMenu
 4816              		.section	.rodata
 4817              		.align	2
 4818              		.set	.LANCHOR5,. + 0
 4819              	.LC0:
 4820 0000 2C       		.byte	44
 4821 0001 000000   		.space	3
 4822 0004 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccGpw0cR.s 			page 131


 4823              	.LC1:
 4824 0008 2D       		.byte	45
 4825 0009 000000   		.space	3
 4826 000c FFFFFFFF 		.word	-1
 4827              	.LC14:
 4828 0010 01020304 		.ascii	"\001\002\003\004*+\007\010\011\034\013\014\015\016\017"
 4828      2A2B0708 
 4828      091C0B0C 
 4828      0D0E0F
 4829 001f 10110006 		.ascii	"\020\021\000\006\023\024\025\026\000\022\030\031\032"
 4829      13141516 
 4829      00121819 
 4829      1A
 4830 002c 1B00171D 		.ascii	"\033\000\027\035\036\037 \000!\"#$%"
 4830      1E1F2000 
 4830      21222324 
 4830      25
 4831              		.section	.bss.current_menu,"aw",%nobits
 4832              		.set	.LANCHOR1,. + 0
 4835              	current_menu:
 4836 0000 00       		.space	1
 4837              		.section	.bss.default_menu,"aw",%nobits
 4838              		.set	.LANCHOR2,. + 0
 4841              	default_menu:
 4842 0000 00       		.space	1
 4843              		.section	.bss.last_menu,"aw",%nobits
 4844              		.set	.LANCHOR3,. + 0
 4847              	last_menu:
 4848 0000 00       		.space	1
 4849              		.section	.bss.mdots,"aw",%nobits
 4850              		.align	2
 4851              		.set	.LANCHOR0,. + 0
 4854              	mdots:
 4855 0000 00000000 		.space	400
 4855      00000000 
 4855      00000000 
 4855      00000000 
 4855      00000000 
 4856              		.section	.bss.n_p,"aw",%nobits
 4857              		.align	2
 4860              	n_p:
 4861 0000 00000000 		.space	4
 4862              		.section	.bss.start_ticks,"aw",%nobits
 4863              		.align	2
 4864              		.set	.LANCHOR8,. + 0
 4867              	start_ticks:
 4868 0000 00000000 		.space	4
 4869              		.section	.data.UserMenu,"aw"
 4870              		.align	2
 4871              		.set	.LANCHOR4,. + 0
 4874              	UserMenu:
 4875 0000 55736572 		.ascii	"User Menu\000"
 4875      204D656E 
 4875      7500
 4876 000a 00000000 		.space	5
 4876      00
 4877 000f 00       		.space	1
ARM GAS  /tmp/ccGpw0cR.s 			page 132


 4878 0010 2E       		.byte	46
 4879 0011 000000   		.space	3
 4880 0014 FFFFFFFF 		.word	-1
 4881 0018 2E       		.byte	46
 4882 0019 000000   		.space	3
 4883 001c FFFFFFFF 		.word	-1
 4884 0020 00       		.ascii	"\000"
 4885 0021 00000000 		.space	7
 4885      000000
 4886 0028 00       		.ascii	"\000"
 4887 0029 00000000 		.space	7
 4887      000000
 4888 0030 2E       		.byte	46
 4889 0031 000000   		.space	3
 4890 0034 FFFFFFFF 		.word	-1
 4891 0038 2E       		.byte	46
 4892 0039 000000   		.space	3
 4893 003c FFFFFFFF 		.word	-1
 4894 0040 00       		.ascii	"\000"
 4895 0041 00000000 		.space	7
 4895      000000
 4896 0048 00       		.ascii	"\000"
 4897 0049 00000000 		.space	7
 4897      000000
 4898 0050 2E       		.byte	46
 4899 0051 000000   		.space	3
 4900 0054 FFFFFFFF 		.word	-1
 4901 0058 2E       		.byte	46
 4902 0059 000000   		.space	3
 4903 005c FFFFFFFF 		.word	-1
 4904 0060 00       		.ascii	"\000"
 4905 0061 00000000 		.space	7
 4905      000000
 4906 0068 00       		.ascii	"\000"
 4907 0069 00000000 		.space	7
 4907      000000
 4908 0070 2E       		.byte	46
 4909 0071 000000   		.space	3
 4910 0074 FFFFFFFF 		.word	-1
 4911 0078 2E       		.byte	46
 4912 0079 000000   		.space	3
 4913 007c FFFFFFFF 		.word	-1
 4914 0080 00       		.ascii	"\000"
 4915 0081 00000000 		.space	7
 4915      000000
 4916 0088 00       		.ascii	"\000"
 4917 0089 00000000 		.space	7
 4917      000000
 4918 0090 2C       		.byte	44
 4919 0091 000000   		.space	3
 4920 0094 FFFFFFFF 		.word	-1
 4921 0098 2E       		.byte	46
 4922 0099 000000   		.space	3
 4923 009c FFFFFFFF 		.word	-1
 4924 00a0 2D2D0D00 		.ascii	"--\015\000"
 4925 00a4 00000000 		.space	4
 4926 00a8 00       		.ascii	"\000"
ARM GAS  /tmp/ccGpw0cR.s 			page 133


 4927 00a9 00000000 		.space	7
 4927      000000
 4928 00b0 2D       		.byte	45
 4929 00b1 000000   		.space	3
 4930 00b4 FFFFFFFF 		.word	-1
 4931 00b8 31       		.byte	49
 4932 00b9 000000   		.space	3
 4933 00bc 0B000000 		.word	11
 4934 00c0 43505800 		.ascii	"CPX\000"
 4935 00c4 00000000 		.space	4
 4936 00c8 00       		.ascii	"\000"
 4937 00c9 00000000 		.space	7
 4937      000000
 4938              		.section	.data.arrow_key_string,"aw"
 4939              		.align	2
 4940              		.set	.LANCHOR6,. + 0
 4943              	arrow_key_string:
 4944 0000 0C000000 		.word	.LC20
 4945              		.section	.data.cmplx_key_string,"aw"
 4946              		.align	2
 4947              		.set	.LANCHOR7,. + 0
 4950              	cmplx_key_string:
 4951 0000 08000000 		.word	.LC19
 4952              		.section	.data.f_shift,"aw"
 4953              		.align	2
 4956              	f_shift:
 4957 0000 29       		.byte	41
 4958 0001 000000   		.space	3
 4959 0004 FFFFFFFF 		.word	-1
 4960              		.section	.data.g_shift,"aw"
 4961              		.align	2
 4964              	g_shift:
 4965 0000 2A       		.byte	42
 4966 0001 000000   		.space	3
 4967 0004 FFFFFFFF 		.word	-1
 4968              		.section	.data.h_shift,"aw"
 4969              		.align	2
 4970              		.set	.LANCHOR15,. + 0
 4973              	h_shift:
 4974 0000 2B       		.byte	43
 4975 0001 000000   		.space	3
 4976 0004 FFFFFFFF 		.word	-1
 4977              		.section	.data.heartbeat,"aw"
 4978              		.align	2
 4979              		.set	.LANCHOR19,. + 0
 4982              	heartbeat:
 4983 0000 62       		.byte	98
 4984 0001 000000   		.space	3
 4985 0004 FFFFFFFF 		.word	-1
 4986              		.section	.data.no_key,"aw"
 4987              		.align	2
 4988              		.set	.LANCHOR10,. + 0
 4991              	no_key:
 4992 0000 2E       		.byte	46
 4993 0001 000000   		.space	3
 4994 0004 00000000 		.word	0
 4995              		.section	.data.release,"aw"
ARM GAS  /tmp/ccGpw0cR.s 			page 134


 4996              		.align	2
 4997              		.set	.LANCHOR11,. + 0
 5000              	release:
 5001 0000 63       		.byte	99
 5002 0001 000000   		.space	3
 5003 0004 FFFFFFFF 		.word	-1
 5004              		.section	.data.spaces,"aw"
 5005              		.align	2
 5006              		.set	.LANCHOR9,. + 0
 5009              	spaces:
 5010 0000 20202020 		.ascii	"                     \000"
 5010      20202020 
 5010      20202020 
 5010      20202020 
 5010      20202020 
 5011              		.section	.rodata.MID_MENU,"a"
 5012              		.align	2
 5013              		.set	.LANCHOR18,. + 0
 5016              	MID_MENU:
 5017 0000 00000000 		.word	.LC18
 5018 0004 00000000 		.word	mid_menu
 5019 0008 00000000 		.word	0
 5020 000c 00000000 		.word	0
 5021              		.section	.rodata.Menus,"a"
 5022              		.align	2
 5025              	Menus:
 5026 0000 4D5F426C 		.ascii	"M_Blank\000"
 5026      616E6B00 
 5027 0008 00000000 		.space	7
 5027      000000
 5028 000f 00       		.space	1
 5029 0010 2E       		.byte	46
 5030 0011 000000   		.space	3
 5031 0014 FFFFFFFF 		.word	-1
 5032 0018 2E       		.byte	46
 5033 0019 000000   		.space	3
 5034 001c FFFFFFFF 		.word	-1
 5035 0020 00       		.ascii	"\000"
 5036 0021 00000000 		.space	7
 5036      000000
 5037 0028 00       		.ascii	"\000"
 5038 0029 00000000 		.space	7
 5038      000000
 5039 0030 2E       		.byte	46
 5040 0031 000000   		.space	3
 5041 0034 FFFFFFFF 		.word	-1
 5042 0038 2E       		.byte	46
 5043 0039 000000   		.space	3
 5044 003c FFFFFFFF 		.word	-1
 5045 0040 00       		.ascii	"\000"
 5046 0041 00000000 		.space	7
 5046      000000
 5047 0048 00       		.ascii	"\000"
 5048 0049 00000000 		.space	7
 5048      000000
 5049 0050 2E       		.byte	46
 5050 0051 000000   		.space	3
ARM GAS  /tmp/ccGpw0cR.s 			page 135


 5051 0054 FFFFFFFF 		.word	-1
 5052 0058 2E       		.byte	46
 5053 0059 000000   		.space	3
 5054 005c FFFFFFFF 		.word	-1
 5055 0060 00       		.ascii	"\000"
 5056 0061 00000000 		.space	7
 5056      000000
 5057 0068 00       		.ascii	"\000"
 5058 0069 00000000 		.space	7
 5058      000000
 5059 0070 2E       		.byte	46
 5060 0071 000000   		.space	3
 5061 0074 FFFFFFFF 		.word	-1
 5062 0078 2E       		.byte	46
 5063 0079 000000   		.space	3
 5064 007c FFFFFFFF 		.word	-1
 5065 0080 00       		.ascii	"\000"
 5066 0081 00000000 		.space	7
 5066      000000
 5067 0088 00       		.ascii	"\000"
 5068 0089 00000000 		.space	7
 5068      000000
 5069 0090 2C       		.byte	44
 5070 0091 000000   		.space	3
 5071 0094 FFFFFFFF 		.word	-1
 5072 0098 2E       		.byte	46
 5073 0099 000000   		.space	3
 5074 009c FFFFFFFF 		.word	-1
 5075 00a0 2D2D0D00 		.ascii	"--\015\000"
 5076 00a4 00000000 		.space	4
 5077 00a8 00       		.ascii	"\000"
 5078 00a9 00000000 		.space	7
 5078      000000
 5079 00b0 2D       		.byte	45
 5080 00b1 000000   		.space	3
 5081 00b4 FFFFFFFF 		.word	-1
 5082 00b8 31       		.byte	49
 5083 00b9 000000   		.space	3
 5084 00bc 0B000000 		.word	11
 5085 00c0 43505800 		.ascii	"CPX\000"
 5086 00c4 00000000 		.space	4
 5087 00c8 00       		.ascii	"\000"
 5088 00c9 00000000 		.space	7
 5088      000000
 5089 00d0 4D5F436C 		.ascii	"M_Clear\000"
 5089      65617200 
 5090 00d8 00000000 		.space	7
 5090      000000
 5091 00df 00       		.space	1
 5092 00e0 10       		.byte	16
 5093 00e1 000000   		.space	3
 5094 00e4 01000000 		.word	1
 5095 00e8 34       		.byte	52
 5096 00e9 000000   		.space	3
 5097 00ec 44010000 		.word	324
 5098 00f0 434C5072 		.ascii	"CLProg\000"
 5098      6F6700
ARM GAS  /tmp/ccGpw0cR.s 			page 136


 5099 00f7 00       		.space	1
 5100 00f8 434C5041 		.ascii	"CLPAll\000"
 5100      6C6C00
 5101 00ff 00       		.space	1
 5102 0100 10       		.byte	16
 5103 0101 000000   		.space	3
 5104 0104 02000000 		.word	2
 5105 0108 34       		.byte	52
 5106 0109 000000   		.space	3
 5107 010c 3E010000 		.word	318
 5108 0110 434C9100 		.ascii	"CL\221\000"
 5109 0114 00000000 		.space	4
 5110 0118 434C5265 		.ascii	"CLReg\000"
 5110      6700
 5111 011e 0000     		.space	2
 5112 0120 10       		.byte	16
 5113 0121 000000   		.space	3
 5114 0124 03000000 		.word	3
 5115 0128 34       		.byte	52
 5116 0129 000000   		.space	3
 5117 012c 74010000 		.word	372
 5118 0130 434C7800 		.ascii	"CLx\000"
 5119 0134 00000000 		.space	4
 5120 0138 434C06A0 		.ascii	"CL\006\240\000"
 5120      00
 5121 013d 000000   		.space	3
 5122 0140 34       		.byte	52
 5123 0141 000000   		.space	3
 5124 0144 40010000 		.word	320
 5125 0148 34       		.byte	52
 5126 0149 000000   		.space	3
 5127 014c 41010000 		.word	321
 5128 0150 434C5374 		.ascii	"CLStk\000"
 5128      6B00
 5129 0156 0000     		.space	2
 5130 0158 434C416C 		.ascii	"CLAll\000"
 5130      6C00
 5131 015e 0000     		.space	2
 5132 0160 2C       		.byte	44
 5133 0161 000000   		.space	3
 5134 0164 FFFFFFFF 		.word	-1
 5135 0168 2E       		.byte	46
 5136 0169 000000   		.space	3
 5137 016c FFFFFFFF 		.word	-1
 5138 0170 2D2D0D00 		.ascii	"--\015\000"
 5139 0174 00000000 		.space	4
 5140 0178 00       		.ascii	"\000"
 5141 0179 00000000 		.space	7
 5141      000000
 5142 0180 2D       		.byte	45
 5143 0181 000000   		.space	3
 5144 0184 FFFFFFFF 		.word	-1
 5145 0188 2E       		.byte	46
 5146 0189 000000   		.space	3
 5147 018c FFFFFFFF 		.word	-1
 5148 0190 43505800 		.ascii	"CPX\000"
 5149 0194 00000000 		.space	4
ARM GAS  /tmp/ccGpw0cR.s 			page 137


 5150 0198 00       		.ascii	"\000"
 5151 0199 00000000 		.space	7
 5151      000000
 5152 01a0 4D5F4469 		.ascii	"M_Disp\000"
 5152      737000
 5153 01a7 00000000 		.space	8
 5153      00000000 
 5154 01af 00       		.space	1
 5155 01b0 00       		.byte	0
 5156 01b1 000000   		.space	3
 5157 01b4 03000000 		.word	3
 5158 01b8 05       		.byte	5
 5159 01b9 000000   		.space	3
 5160 01bc 01000000 		.word	1
 5161 01c0 414C4C00 		.ascii	"ALL\000"
 5162 01c4 00000000 		.space	4
 5163 01c8 6120622F 		.ascii	"a b/c\000"
 5163      6300
 5164 01ce 0000     		.space	2
 5165 01d0 01       		.byte	1
 5166 01d1 000000   		.space	3
 5167 01d4 03000000 		.word	3
 5168 01d8 05       		.byte	5
 5169 01d9 000000   		.space	3
 5170 01dc 02000000 		.word	2
 5171 01e0 46495800 		.ascii	"FIX\000"
 5172 01e4 00000000 		.space	4
 5173 01e8 642F6300 		.ascii	"d/c\000"
 5174 01ec 00000000 		.space	4
 5175 01f0 02       		.byte	2
 5176 01f1 000000   		.space	3
 5177 01f4 03000000 		.word	3
 5178 01f8 06       		.byte	6
 5179 01f9 000000   		.space	3
 5180 01fc 01000000 		.word	1
 5181 0200 53434900 		.ascii	"SCI\000"
 5182 0204 00000000 		.space	4
 5183 0208 482E4D53 		.ascii	"H.MS\000"
 5183      00
 5184 020d 000000   		.space	3
 5185 0210 03       		.byte	3
 5186 0211 000000   		.space	3
 5187 0214 03000000 		.word	3
 5188 0218 07       		.byte	7
 5189 0219 000000   		.space	3
 5190 021c 01000000 		.word	1
 5191 0220 454E4700 		.ascii	"ENG\000"
 5192 0224 00000000 		.space	4
 5193 0228 482E6400 		.ascii	"H.d\000"
 5194 022c 00000000 		.space	4
 5195 0230 2C       		.byte	44
 5196 0231 000000   		.space	3
 5197 0234 FFFFFFFF 		.word	-1
 5198 0238 26       		.byte	38
 5199 0239 000000   		.space	3
 5200 023c 03000000 		.word	3
 5201 0240 2D2D0D00 		.ascii	"--\015\000"
ARM GAS  /tmp/ccGpw0cR.s 			page 138


 5202 0244 00000000 		.space	4
 5203 0248 2E2F2C00 		.ascii	"./,\000"
 5204 024c 00000000 		.space	4
 5205 0250 2D       		.byte	45
 5206 0251 000000   		.space	3
 5207 0254 FFFFFFFF 		.word	-1
 5208 0258 2E       		.byte	46
 5209 0259 000000   		.space	3
 5210 025c FFFFFFFF 		.word	-1
 5211 0260 43505800 		.ascii	"CPX\000"
 5212 0264 00000000 		.space	4
 5213 0268 00       		.ascii	"\000"
 5214 0269 00000000 		.space	7
 5214      000000
 5215 0270 4D5F4261 		.ascii	"M_Base\000"
 5215      736500
 5216 0277 00000000 		.space	8
 5216      00000000 
 5217 027f 00       		.space	1
 5218 0280 0E       		.byte	14
 5219 0281 000000   		.space	3
 5220 0284 01000000 		.word	1
 5221 0288 0E       		.byte	14
 5222 0289 000000   		.space	3
 5223 028c 03000000 		.word	3
 5224 0290 42494E00 		.ascii	"BIN\000"
 5225 0294 00000000 		.space	4
 5226 0298 6E6F7400 		.ascii	"not\000"
 5227 029c 00000000 		.space	4
 5228 02a0 0E       		.byte	14
 5229 02a1 000000   		.space	3
 5230 02a4 02000000 		.word	2
 5231 02a8 13       		.byte	19
 5232 02a9 000000   		.space	3
 5233 02ac 03000000 		.word	3
 5234 02b0 4F435400 		.ascii	"OCT\000"
 5235 02b4 00000000 		.space	4
 5236 02b8 616E6400 		.ascii	"and\000"
 5237 02bc 00000000 		.space	4
 5238 02c0 0F       		.byte	15
 5239 02c1 000000   		.space	3
 5240 02c4 01000000 		.word	1
 5241 02c8 14       		.byte	20
 5242 02c9 000000   		.space	3
 5243 02cc 03000000 		.word	3
 5244 02d0 44454300 		.ascii	"DEC\000"
 5245 02d4 00000000 		.space	4
 5246 02d8 6F7200   		.ascii	"or\000"
 5247 02db 00000000 		.space	5
 5247      00
 5248 02e0 0F       		.byte	15
 5249 02e1 000000   		.space	3
 5250 02e4 02000000 		.word	2
 5251 02e8 15       		.byte	21
 5252 02e9 000000   		.space	3
 5253 02ec 03000000 		.word	3
 5254 02f0 48455800 		.ascii	"HEX\000"
ARM GAS  /tmp/ccGpw0cR.s 			page 139


 5255 02f4 00000000 		.space	4
 5256 02f8 786F7200 		.ascii	"xor\000"
 5257 02fc 00000000 		.space	4
 5258 0300 2C       		.byte	44
 5259 0301 000000   		.space	3
 5260 0304 FFFFFFFF 		.word	-1
 5261 0308 16       		.byte	22
 5262 0309 000000   		.space	3
 5263 030c 03000000 		.word	3
 5264 0310 2D2D0D00 		.ascii	"--\015\000"
 5265 0314 00000000 		.space	4
 5266 0318 524D4452 		.ascii	"RMDR\000"
 5266      00
 5267 031d 000000   		.space	3
 5268 0320 2D       		.byte	45
 5269 0321 000000   		.space	3
 5270 0324 FFFFFFFF 		.word	-1
 5271 0328 07       		.byte	7
 5272 0329 000000   		.space	3
 5273 032c 01000000 		.word	1
 5274 0330 43505800 		.ascii	"CPX\000"
 5275 0334 00000000 		.space	4
 5276 0338 482E6400 		.ascii	"H.d\000"
 5277 033c 00000000 		.space	4
 5278 0340 4D5F416E 		.ascii	"M_Angles\000"
 5278      676C6573 
 5278      00
 5279 0349 00000000 		.space	6
 5279      0000
 5280 034f 00       		.space	1
 5281 0350 06       		.byte	6
 5282 0351 000000   		.space	3
 5283 0354 02000000 		.word	2
 5284 0358 04       		.byte	4
 5285 0359 000000   		.space	3
 5286 035c 01000000 		.word	1
 5287 0360 44454700 		.ascii	"DEG\000"
 5288 0364 00000000 		.space	4
 5289 0368 500D5200 		.ascii	"P\015R\000"
 5290 036c 00000000 		.space	4
 5291 0370 07       		.byte	7
 5292 0371 000000   		.space	3
 5293 0374 02000000 		.word	2
 5294 0378 04       		.byte	4
 5295 0379 000000   		.space	3
 5296 037c 02000000 		.word	2
 5297 0380 52414400 		.ascii	"RAD\000"
 5298 0384 00000000 		.space	4
 5299 0388 520D5000 		.ascii	"R\015P\000"
 5300 038c 00000000 		.space	4
 5301 0390 08       		.byte	8
 5302 0391 000000   		.space	3
 5303 0394 02000000 		.word	2
 5304 0398 00       		.byte	0
 5305 0399 000000   		.space	3
 5306 039c 01000000 		.word	1
 5307 03a0 47524144 		.ascii	"GRAD\000"
ARM GAS  /tmp/ccGpw0cR.s 			page 140


 5307      00
 5308 03a5 000000   		.space	3
 5309 03a8 48595000 		.ascii	"HYP\000"
 5310 03ac 00000000 		.space	4
 5311 03b0 06       		.byte	6
 5312 03b1 000000   		.space	3
 5313 03b4 01000000 		.word	1
 5314 03b8 07       		.byte	7
 5315 03b9 000000   		.space	3
 5316 03bc 01000000 		.word	1
 5317 03c0 482E4D53 		.ascii	"H.MS\000"
 5317      00
 5318 03c5 000000   		.space	3
 5319 03c8 482E6400 		.ascii	"H.d\000"
 5320 03cc 00000000 		.space	4
 5321 03d0 2C       		.byte	44
 5322 03d1 000000   		.space	3
 5323 03d4 FFFFFFFF 		.word	-1
 5324 03d8 00       		.byte	0
 5325 03d9 000000   		.space	3
 5326 03dc 02000000 		.word	2
 5327 03e0 2D2D0D00 		.ascii	"--\015\000"
 5328 03e4 00000000 		.space	4
 5329 03e8 4859509D 		.ascii	"HYP\235\000"
 5329      00
 5330 03ed 000000   		.space	3
 5331 03f0 2D       		.byte	45
 5332 03f1 000000   		.space	3
 5333 03f4 FFFFFFFF 		.word	-1
 5334 03f8 2E       		.byte	46
 5335 03f9 000000   		.space	3
 5336 03fc FFFFFFFF 		.word	-1
 5337 0400 43505800 		.ascii	"CPX\000"
 5338 0404 00000000 		.space	4
 5339 0408 00       		.ascii	"\000"
 5340 0409 00000000 		.space	7
 5340      000000
 5341 0410 4D5F4D69 		.ascii	"M_Misc\000"
 5341      736300
 5342 0417 00000000 		.space	8
 5342      00000000 
 5343 041f 00       		.space	1
 5344 0420 25       		.byte	37
 5345 0421 000000   		.space	3
 5346 0424 01000000 		.word	1
 5347 0428 14       		.byte	20
 5348 0429 000000   		.space	3
 5349 042c 01000000 		.word	1
 5350 0430 7C587C00 		.ascii	"|X|\000"
 5351 0434 00000000 		.space	4
 5352 0438 329C00   		.ascii	"2\234\000"
 5353 043b 00000000 		.space	5
 5353      00
 5354 0440 25       		.byte	37
 5355 0441 000000   		.space	3
 5356 0444 02000000 		.word	2
 5357 0448 14       		.byte	20
ARM GAS  /tmp/ccGpw0cR.s 			page 141


 5358 0449 000000   		.space	3
 5359 044c 02000000 		.word	2
 5360 0450 524E4400 		.ascii	"RND\000"
 5361 0454 00000000 		.space	4
 5362 0458 4C6F67BA 		.ascii	"Log\272\000"
 5362      00
 5363 045d 000000   		.space	3
 5364 0460 26       		.byte	38
 5365 0461 000000   		.space	3
 5366 0464 01000000 		.word	1
 5367 0468 15       		.byte	21
 5368 0469 000000   		.space	3
 5369 046c 02000000 		.word	2
 5370 0470 49506172 		.ascii	"IPart\000"
 5370      7400
 5371 0476 0000     		.space	2
 5372 0478 4C6F678B 		.ascii	"Log\213\000"
 5372      00
 5373 047d 000000   		.space	3
 5374 0480 26       		.byte	38
 5375 0481 000000   		.space	3
 5376 0484 02000000 		.word	2
 5377 0488 16       		.byte	22
 5378 0489 000000   		.space	3
 5379 048c 02000000 		.word	2
 5380 0490 46506172 		.ascii	"FPart\000"
 5380      7400
 5381 0496 0000     		.space	2
 5382 0498 7C7C656C 		.ascii	"||el\000"
 5382      00
 5383 049d 000000   		.space	3
 5384 04a0 2C       		.byte	44
 5385 04a1 000000   		.space	3
 5386 04a4 FFFFFFFF 		.word	-1
 5387 04a8 22       		.byte	34
 5388 04a9 000000   		.space	3
 5389 04ac 02000000 		.word	2
 5390 04b0 2D2D0D00 		.ascii	"--\015\000"
 5391 04b4 00000000 		.space	4
 5392 04b8 832500   		.ascii	"\203%\000"
 5393 04bb 00000000 		.space	5
 5393      00
 5394 04c0 2D       		.byte	45
 5395 04c1 000000   		.space	3
 5396 04c4 FFFFFFFF 		.word	-1
 5397 04c8 2E       		.byte	46
 5398 04c9 000000   		.space	3
 5399 04cc FFFFFFFF 		.word	-1
 5400 04d0 43505800 		.ascii	"CPX\000"
 5401 04d4 00000000 		.space	4
 5402 04d8 00       		.ascii	"\000"
 5403 04d9 00000000 		.space	7
 5403      000000
 5404 04e0 4D5F5377 		.ascii	"M_Swap\000"
 5404      617000
 5405 04e7 00000000 		.space	8
 5405      00000000 
ARM GAS  /tmp/ccGpw0cR.s 			page 142


 5406 04ef 00       		.space	1
 5407 04f0 0D       		.byte	13
 5408 04f1 000000   		.space	3
 5409 04f4 01000000 		.word	1
 5410 04f8 34       		.byte	52
 5411 04f9 000000   		.space	3
 5412 04fc 00A60000 		.word	42496
 5413 0500 53686F77 		.ascii	"Show\016\000"
 5413      0E00
 5414 0506 0000     		.space	2
 5415 0508 5B175D00 		.ascii	"[\027]\000"
 5416 050c 00000000 		.space	4
 5417 0510 0D       		.byte	13
 5418 0511 000000   		.space	3
 5419 0514 02000000 		.word	2
 5420 0518 2E       		.byte	46
 5421 0519 000000   		.space	3
 5422 051c FFFFFFFF 		.word	-1
 5423 0520 53686F77 		.ascii	"Show\015\000"
 5423      0D00
 5424 0526 0000     		.space	2
 5425 0528 00       		.ascii	"\000"
 5426 0529 00000000 		.space	7
 5426      000000
 5427 0530 0D       		.byte	13
 5428 0531 000000   		.space	3
 5429 0534 03000000 		.word	3
 5430 0538 34       		.byte	52
 5431 0539 000000   		.space	3
 5432 053c 00330000 		.word	13056
 5433 0540 78173F00 		.ascii	"x\027?\000"
 5434 0544 00000000 		.space	4
 5435 0548 7A173F00 		.ascii	"z\027?\000"
 5436 054c 00000000 		.space	4
 5437 0550 34       		.byte	52
 5438 0551 000000   		.space	3
 5439 0554 00320000 		.word	12800
 5440 0558 34       		.byte	52
 5441 0559 000000   		.space	3
 5442 055c 00340000 		.word	13312
 5443 0560 79173F00 		.ascii	"y\027?\000"
 5444 0564 00000000 		.space	4
 5445 0568 74173F00 		.ascii	"t\027?\000"
 5446 056c 00000000 		.space	4
 5447 0570 2C       		.byte	44
 5448 0571 000000   		.space	3
 5449 0574 FFFFFFFF 		.word	-1
 5450 0578 2E       		.byte	46
 5451 0579 000000   		.space	3
 5452 057c FFFFFFFF 		.word	-1
 5453 0580 2D2D0D00 		.ascii	"--\015\000"
 5454 0584 00000000 		.space	4
 5455 0588 00       		.ascii	"\000"
 5456 0589 00000000 		.space	7
 5456      000000
 5457 0590 2D       		.byte	45
 5458 0591 000000   		.space	3
ARM GAS  /tmp/ccGpw0cR.s 			page 143


 5459 0594 FFFFFFFF 		.word	-1
 5460 0598 2E       		.byte	46
 5461 0599 000000   		.space	3
 5462 059c FFFFFFFF 		.word	-1
 5463 05a0 43505800 		.ascii	"CPX\000"
 5464 05a4 00000000 		.space	4
 5465 05a8 00       		.ascii	"\000"
 5466 05a9 00000000 		.space	7
 5466      000000
 5467 05b0 4D5F5072 		.ascii	"M_Program\000"
 5467      6F677261 
 5467      6D00
 5468 05ba 00000000 		.space	5
 5468      00
 5469 05bf 00       		.space	1
 5470 05c0 27       		.byte	39
 5471 05c1 000000   		.space	3
 5472 05c4 01000000 		.word	1
 5473 05c8 28       		.byte	40
 5474 05c9 000000   		.space	3
 5475 05cc 01000000 		.word	1
 5476 05d0 4C424C00 		.ascii	"LBL\000"
 5477 05d4 00000000 		.space	4
 5478 05d8 44534500 		.ascii	"DSE\000"
 5479 05dc 00000000 		.space	4
 5480 05e0 27       		.byte	39
 5481 05e1 000000   		.space	3
 5482 05e4 02000000 		.word	2
 5483 05e8 28       		.byte	40
 5484 05e9 000000   		.space	3
 5485 05ec 02000000 		.word	2
 5486 05f0 52544E00 		.ascii	"RTN\000"
 5487 05f4 00000000 		.space	4
 5488 05f8 49534700 		.ascii	"ISG\000"
 5489 05fc 00000000 		.space	4
 5490 0600 25       		.byte	37
 5491 0601 000000   		.space	3
 5492 0604 03000000 		.word	3
 5493 0608 34       		.byte	52
 5494 0609 000000   		.space	3
 5495 060c 00600000 		.word	24576
 5496 0610 50617573 		.ascii	"Pause\000"
 5496      6500
 5497 0616 0000     		.space	2
 5498 0618 44454300 		.ascii	"DEC\000"
 5499 061c 00000000 		.space	4
 5500 0620 12       		.byte	18
 5501 0621 000000   		.space	3
 5502 0624 03000000 		.word	3
 5503 0628 34       		.byte	52
 5504 0629 000000   		.space	3
 5505 062c 00610000 		.word	24832
 5506 0630 47544F00 		.ascii	"GTO\000"
 5507 0634 00000000 		.space	4
 5508 0638 494E4300 		.ascii	"INC\000"
 5509 063c 00000000 		.space	4
 5510 0640 2C       		.byte	44
ARM GAS  /tmp/ccGpw0cR.s 			page 144


 5511 0641 000000   		.space	3
 5512 0644 FFFFFFFF 		.word	-1
 5513 0648 34       		.byte	52
 5514 0649 000000   		.space	3
 5515 064c 00570000 		.word	22272
 5516 0650 2D2D0D00 		.ascii	"--\015\000"
 5517 0654 00000000 		.space	4
 5518 0658 4241434B 		.ascii	"BACK\000"
 5518      00
 5519 065d 000000   		.space	3
 5520 0660 2D       		.byte	45
 5521 0661 000000   		.space	3
 5522 0664 FFFFFFFF 		.word	-1
 5523 0668 34       		.byte	52
 5524 0669 000000   		.space	3
 5525 066c 00560000 		.word	22016
 5526 0670 43505800 		.ascii	"CPX\000"
 5527 0674 00000000 		.space	4
 5528 0678 534B4950 		.ascii	"SKIP\000"
 5528      00
 5529 067d 000000   		.space	3
 5530 0680 4D5F5365 		.ascii	"M_Setup1\000"
 5530      74757031 
 5530      00
 5531 0689 00000000 		.space	6
 5531      0000
 5532 068f 00       		.space	1
 5533 0690 32       		.byte	50
 5534 0691 000000   		.space	3
 5535 0694 00000000 		.word	0
 5536 0698 30       		.byte	48
 5537 0699 000000   		.space	3
 5538 069c 00000000 		.word	0
 5539 06a0 45584954 		.ascii	"EXIT\000"
 5539      00
 5540 06a5 000000   		.space	3
 5541 06a8 53797374 		.ascii	"System\000"
 5541      656D00
 5542 06af 00       		.space	1
 5543 06b0 31       		.byte	49
 5544 06b1 000000   		.space	3
 5545 06b4 09000000 		.word	9
 5546 06b8 2E       		.byte	46
 5547 06b9 000000   		.space	3
 5548 06bc FFFFFFFF 		.word	-1
 5549 06c0 48454C50 		.ascii	"HELP\000"
 5549      00
 5550 06c5 000000   		.space	3
 5551 06c8 00       		.ascii	"\000"
 5552 06c9 00000000 		.space	7
 5552      000000
 5553 06d0 31       		.byte	49
 5554 06d1 000000   		.space	3
 5555 06d4 02000000 		.word	2
 5556 06d8 31       		.byte	49
 5557 06d9 000000   		.space	3
 5558 06dc 06000000 		.word	6
ARM GAS  /tmp/ccGpw0cR.s 			page 145


 5559 06e0 4F6E5354 		.ascii	"OnSTO\000"
 5559      4F00
 5560 06e6 0000     		.space	2
 5561 06e8 53765241 		.ascii	"SvRAM\000"
 5561      4D00
 5562 06ee 0000     		.space	2
 5563 06f0 31       		.byte	49
 5564 06f1 000000   		.space	3
 5565 06f4 03000000 		.word	3
 5566 06f8 31       		.byte	49
 5567 06f9 000000   		.space	3
 5568 06fc 07000000 		.word	7
 5569 0700 4F6E5243 		.ascii	"OnRCL\000"
 5569      4C00
 5570 0706 0000     		.space	2
 5571 0708 4C645241 		.ascii	"LdRAM\000"
 5571      4D00
 5572 070e 0000     		.space	2
 5573 0710 2C       		.byte	44
 5574 0711 000000   		.space	3
 5575 0714 FFFFFFFF 		.word	-1
 5576 0718 2E       		.byte	46
 5577 0719 000000   		.space	3
 5578 071c FFFFFFFF 		.word	-1
 5579 0720 2D2D0D00 		.ascii	"--\015\000"
 5580 0724 00000000 		.space	4
 5581 0728 00       		.ascii	"\000"
 5582 0729 00000000 		.space	7
 5582      000000
 5583 0730 2D       		.byte	45
 5584 0731 000000   		.space	3
 5585 0734 FFFFFFFF 		.word	-1
 5586 0738 2E       		.byte	46
 5587 0739 000000   		.space	3
 5588 073c FFFFFFFF 		.word	-1
 5589 0740 43505800 		.ascii	"CPX\000"
 5590 0744 00000000 		.space	4
 5591 0748 00       		.ascii	"\000"
 5592 0749 00000000 		.space	7
 5592      000000
 5593 0750 4D5F4172 		.ascii	"M_Arrow\000"
 5593      726F7700 
 5594 0758 00000000 		.space	7
 5594      000000
 5595 075f 00       		.space	1
 5596 0760 0E       		.byte	14
 5597 0761 000000   		.space	3
 5598 0764 01000000 		.word	1
 5599 0768 06       		.byte	6
 5600 0769 000000   		.space	3
 5601 076c 02000000 		.word	2
 5602 0770 0D42696E 		.ascii	"\015Bin\000"
 5602      00
 5603 0775 000000   		.space	3
 5604 0778 0D444547 		.ascii	"\015DEG\000"
 5604      00
 5605 077d 000000   		.space	3
ARM GAS  /tmp/ccGpw0cR.s 			page 146


 5606 0780 0E       		.byte	14
 5607 0781 000000   		.space	3
 5608 0784 02000000 		.word	2
 5609 0788 07       		.byte	7
 5610 0789 000000   		.space	3
 5611 078c 02000000 		.word	2
 5612 0790 0D4F6374 		.ascii	"\015Oct\000"
 5612      00
 5613 0795 000000   		.space	3
 5614 0798 0D524144 		.ascii	"\015RAD\000"
 5614      00
 5615 079d 000000   		.space	3
 5616 07a0 0F       		.byte	15
 5617 07a1 000000   		.space	3
 5618 07a4 01000000 		.word	1
 5619 07a8 08       		.byte	8
 5620 07a9 000000   		.space	3
 5621 07ac 02000000 		.word	2
 5622 07b0 0D446563 		.ascii	"\015Dec\000"
 5622      00
 5623 07b5 000000   		.space	3
 5624 07b8 0D477261 		.ascii	"\015Grad\000"
 5624      6400
 5625 07be 0000     		.space	2
 5626 07c0 0F       		.byte	15
 5627 07c1 000000   		.space	3
 5628 07c4 02000000 		.word	2
 5629 07c8 06       		.byte	6
 5630 07c9 000000   		.space	3
 5631 07cc 01000000 		.word	1
 5632 07d0 0D486578 		.ascii	"\015Hex\000"
 5632      00
 5633 07d5 000000   		.space	3
 5634 07d8 0D484D53 		.ascii	"\015HMS\000"
 5634      00
 5635 07dd 000000   		.space	3
 5636 07e0 2C       		.byte	44
 5637 07e1 000000   		.space	3
 5638 07e4 FFFFFFFF 		.word	-1
 5639 07e8 07       		.byte	7
 5640 07e9 000000   		.space	3
 5641 07ec 01000000 		.word	1
 5642 07f0 2D2D0D00 		.ascii	"--\015\000"
 5643 07f4 00000000 		.space	4
 5644 07f8 484D530D 		.ascii	"HMS\015\000"
 5644      00
 5645 07fd 000000   		.space	3
 5646 0800 2D       		.byte	45
 5647 0801 000000   		.space	3
 5648 0804 FFFFFFFF 		.word	-1
 5649 0808 2E       		.byte	46
 5650 0809 000000   		.space	3
 5651 080c FFFFFFFF 		.word	-1
 5652 0810 43505800 		.ascii	"CPX\000"
 5653 0814 00000000 		.space	4
 5654 0818 00       		.ascii	"\000"
 5655 0819 00000000 		.space	7
ARM GAS  /tmp/ccGpw0cR.s 			page 147


 5655      000000
 5656 0820 4D5F466C 		.ascii	"M_Flags\000"
 5656      61677300 
 5657 0828 00000000 		.space	7
 5657      000000
 5658 082f 00       		.space	1
 5659 0830 1E       		.byte	30
 5660 0831 000000   		.space	3
 5661 0834 01000000 		.word	1
 5662 0838 34       		.byte	52
 5663 0839 000000   		.space	3
 5664 083c 00740000 		.word	29696
 5665 0840 53465F00 		.ascii	"SF_\000"
 5666 0844 00000000 		.space	4
 5667 0848 46533F00 		.ascii	"FS?\000"
 5668 084c 00000000 		.space	4
 5669 0850 1E       		.byte	30
 5670 0851 000000   		.space	3
 5671 0854 02000000 		.word	2
 5672 0858 34       		.byte	52
 5673 0859 000000   		.space	3
 5674 085c 00750000 		.word	29952
 5675 0860 43465F00 		.ascii	"CF_\000"
 5676 0864 00000000 		.space	4
 5677 0868 46433F00 		.ascii	"FC?\000"
 5678 086c 00000000 		.space	4
 5679 0870 1F       		.byte	31
 5680 0871 000000   		.space	3
 5681 0874 01000000 		.word	1
 5682 0878 34       		.byte	52
 5683 0879 000000   		.space	3
 5684 087c 00500000 		.word	20480
 5685 0880 783D3F00 		.ascii	"x=?\000"
 5686 0884 00000000 		.space	4
 5687 0888 783C3F00 		.ascii	"x<?\000"
 5688 088c 00000000 		.space	4
 5689 0890 1F       		.byte	31
 5690 0891 000000   		.space	3
 5691 0894 02000000 		.word	2
 5692 0898 34       		.byte	52
 5693 0899 000000   		.space	3
 5694 089c 00510000 		.word	20736
 5695 08a0 780B3F00 		.ascii	"x\013?\000"
 5696 08a4 00000000 		.space	4
 5697 08a8 783C3D3F 		.ascii	"x<=?\000"
 5697      00
 5698 08ad 000000   		.space	3
 5699 08b0 2C       		.byte	44
 5700 08b1 000000   		.space	3
 5701 08b4 FFFFFFFF 		.word	-1
 5702 08b8 34       		.byte	52
 5703 08b9 000000   		.space	3
 5704 08bc 00530000 		.word	21248
 5705 08c0 2D2D0D00 		.ascii	"--\015\000"
 5706 08c4 00000000 		.space	4
 5707 08c8 783E3D3F 		.ascii	"x>=?\000"
 5707      00
ARM GAS  /tmp/ccGpw0cR.s 			page 148


 5708 08cd 000000   		.space	3
 5709 08d0 2D       		.byte	45
 5710 08d1 000000   		.space	3
 5711 08d4 FFFFFFFF 		.word	-1
 5712 08d8 34       		.byte	52
 5713 08d9 000000   		.space	3
 5714 08dc 00520000 		.word	20992
 5715 08e0 43505800 		.ascii	"CPX\000"
 5716 08e4 00000000 		.space	4
 5717 08e8 783E3F00 		.ascii	"x>?\000"
 5718 08ec 00000000 		.space	4
 5719 08f0 4D5F5072 		.ascii	"M_Prob\000"
 5719      6F6200
 5720 08f7 00000000 		.space	8
 5720      00000000 
 5721 08ff 00       		.space	1
 5722 0900 18       		.byte	24
 5723 0901 000000   		.space	3
 5724 0904 03000000 		.word	3
 5725 0908 34       		.byte	52
 5726 0909 000000   		.space	3
 5727 090c 31020000 		.word	561
 5728 0910 46616374 		.ascii	"Fact!\000"
 5728      2100
 5729 0916 0000     		.space	2
 5730 0918 4C6E0682 		.ascii	"Ln\006\202\000"
 5730      00
 5731 091d 000000   		.space	3
 5732 0920 18       		.byte	24
 5733 0921 000000   		.space	3
 5734 0924 01000000 		.word	1
 5735 0928 19       		.byte	25
 5736 0929 000000   		.space	3
 5737 092c 01000000 		.word	1
 5738 0930 43792C78 		.ascii	"Cy,x\000"
 5738      00
 5739 0935 000000   		.space	3
 5740 0938 9400     		.ascii	"\224\000"
 5741 093a 00000000 		.space	6
 5741      0000
 5742 0940 18       		.byte	24
 5743 0941 000000   		.space	3
 5744 0944 02000000 		.word	2
 5745 0948 19       		.byte	25
 5746 0949 000000   		.space	3
 5747 094c 02000000 		.word	2
 5748 0950 50792C78 		.ascii	"Py,x\000"
 5748      00
 5749 0955 000000   		.space	3
 5750 0958 949D00   		.ascii	"\224\235\000"
 5751 095b 00000000 		.space	5
 5751      00
 5752 0960 08       		.byte	8
 5753 0961 000000   		.space	3
 5754 0964 01000000 		.word	1
 5755 0968 34       		.byte	52
 5756 0969 000000   		.space	3
ARM GAS  /tmp/ccGpw0cR.s 			page 149


 5757 096c 34010000 		.word	308
 5758 0970 52414E23 		.ascii	"RAN#\000"
 5758      00
 5759 0975 000000   		.space	3
 5760 0978 53454544 		.ascii	"SEED\000"
 5760      00
 5761 097d 000000   		.space	3
 5762 0980 2C       		.byte	44
 5763 0981 000000   		.space	3
 5764 0984 FFFFFFFF 		.word	-1
 5765 0988 2E       		.byte	46
 5766 0989 000000   		.space	3
 5767 098c FFFFFFFF 		.word	-1
 5768 0990 2D2D0D00 		.ascii	"--\015\000"
 5769 0994 00000000 		.space	4
 5770 0998 00       		.ascii	"\000"
 5771 0999 00000000 		.space	7
 5771      000000
 5772 09a0 2D       		.byte	45
 5773 09a1 000000   		.space	3
 5774 09a4 FFFFFFFF 		.word	-1
 5775 09a8 2E       		.byte	46
 5776 09a9 000000   		.space	3
 5777 09ac FFFFFFFF 		.word	-1
 5778 09b0 43505800 		.ascii	"CPX\000"
 5779 09b4 00000000 		.space	4
 5780 09b8 00       		.ascii	"\000"
 5781 09b9 00000000 		.space	7
 5781      000000
 5782 09c0 4D5F5374 		.ascii	"M_Stats\000"
 5782      61747300 
 5783 09c8 00000000 		.space	7
 5783      000000
 5784 09cf 00       		.space	1
 5785 09d0 1A       		.byte	26
 5786 09d1 000000   		.space	3
 5787 09d4 01000000 		.word	1
 5788 09d8 1A       		.byte	26
 5789 09d9 000000   		.space	3
 5790 09dc 02000000 		.word	2
 5791 09e0 0100     		.ascii	"\001\000"
 5792 09e2 00000000 		.space	6
 5792      0000
 5793 09e8 532E442E 		.ascii	"S.D.\000"
 5793      00
 5794 09ed 000000   		.space	3
 5795 09f0 1B       		.byte	27
 5796 09f1 000000   		.space	3
 5797 09f4 01000000 		.word	1
 5798 09f8 34       		.byte	52
 5799 09f9 000000   		.space	3
 5800 09fc 74020000 		.word	628
 5801 0a00 792D6861 		.ascii	"y-hat\000"
 5801      7400
 5802 0a06 0000     		.space	2
 5803 0a08 782D6861 		.ascii	"x-hat\000"
 5803      7400
ARM GAS  /tmp/ccGpw0cR.s 			page 150


 5804 0a0e 0000     		.space	2
 5805 0a10 34       		.byte	52
 5806 0a11 000000   		.space	3
 5807 0a14 27010000 		.word	295
 5808 0a18 34       		.byte	52
 5809 0a19 000000   		.space	3
 5810 0a1c 28010000 		.word	296
 5811 0a20 434F5252 		.ascii	"CORR\000"
 5811      00
 5812 0a25 000000   		.space	3
 5813 0a28 4C2E522E 		.ascii	"L.R.\000"
 5813      00
 5814 0a2d 000000   		.space	3
 5815 0a30 34       		.byte	52
 5816 0a31 000000   		.space	3
 5817 0a34 32010000 		.word	306
 5818 0a38 34       		.byte	52
 5819 0a39 000000   		.space	3
 5820 0a3c 31010000 		.word	305
 5821 0a40 42657374 		.ascii	"BestF\000"
 5821      4600
 5822 0a46 0000     		.space	2
 5823 0a48 4C6F6746 		.ascii	"LogFit\000"
 5823      697400
 5824 0a4f 00       		.space	1
 5825 0a50 34       		.byte	52
 5826 0a51 000000   		.space	3
 5827 0a54 2E010000 		.word	302
 5828 0a58 34       		.byte	52
 5829 0a59 000000   		.space	3
 5830 0a5c 2F010000 		.word	303
 5831 0a60 4C696E65 		.ascii	"Linear\000"
 5831      617200
 5832 0a67 00       		.space	1
 5833 0a68 45787046 		.ascii	"ExpFit\000"
 5833      697400
 5834 0a6f 00       		.space	1
 5835 0a70 2D       		.byte	45
 5836 0a71 000000   		.space	3
 5837 0a74 FFFFFFFF 		.word	-1
 5838 0a78 34       		.byte	52
 5839 0a79 000000   		.space	3
 5840 0a7c 30010000 		.word	304
 5841 0a80 43505800 		.ascii	"CPX\000"
 5842 0a84 00000000 		.space	4
 5843 0a88 50777246 		.ascii	"PwrFit\000"
 5843      697400
 5844 0a8f 00       		.space	1
 5845 0a90 4D5F5365 		.ascii	"M_Setup2\000"
 5845      74757032 
 5845      00
 5846 0a99 00000000 		.space	6
 5846      0000
 5847 0a9f 00       		.space	1
 5848 0aa0 31       		.byte	49
 5849 0aa1 000000   		.space	3
 5850 0aa4 04000000 		.word	4
ARM GAS  /tmp/ccGpw0cR.s 			page 151


 5851 0aa8 2E       		.byte	46
 5852 0aa9 000000   		.space	3
 5853 0aac FFFFFFFF 		.word	-1
 5854 0ab0 53764C49 		.ascii	"SvLIB\000"
 5854      4200
 5855 0ab6 0000     		.space	2
 5856 0ab8 00       		.ascii	"\000"
 5857 0ab9 00000000 		.space	7
 5857      000000
 5858 0ac0 31       		.byte	49
 5859 0ac1 000000   		.space	3
 5860 0ac4 05000000 		.word	5
 5861 0ac8 2E       		.byte	46
 5862 0ac9 000000   		.space	3
 5863 0acc FFFFFFFF 		.word	-1
 5864 0ad0 4C644C49 		.ascii	"LdLIB\000"
 5864      4200
 5865 0ad6 0000     		.space	2
 5866 0ad8 00       		.ascii	"\000"
 5867 0ad9 00000000 		.space	7
 5867      000000
 5868 0ae0 31       		.byte	49
 5869 0ae1 000000   		.space	3
 5870 0ae4 0A000000 		.word	10
 5871 0ae8 34       		.byte	52
 5872 0ae9 000000   		.space	3
 5873 0aec B2010000 		.word	434
 5874 0af0 53764350 		.ascii	"SvCPRG\000"
 5874      524700
 5875 0af7 00       		.space	1
 5876 0af8 5053544F 		.ascii	"PSTO\000"
 5876      00
 5877 0afd 000000   		.space	3
 5878 0b00 31       		.byte	49
 5879 0b01 000000   		.space	3
 5880 0b04 08000000 		.word	8
 5881 0b08 34       		.byte	52
 5882 0b09 000000   		.space	3
 5883 0b0c B1010000 		.word	433
 5884 0b10 4C645052 		.ascii	"LdPRG\000"
 5884      4700
 5885 0b16 0000     		.space	2
 5886 0b18 5052434C 		.ascii	"PRCL\000"
 5886      00
 5887 0b1d 000000   		.space	3
 5888 0b20 2C       		.byte	44
 5889 0b21 000000   		.space	3
 5890 0b24 FFFFFFFF 		.word	-1
 5891 0b28 2E       		.byte	46
 5892 0b29 000000   		.space	3
 5893 0b2c FFFFFFFF 		.word	-1
 5894 0b30 2D2D0D00 		.ascii	"--\015\000"
 5895 0b34 00000000 		.space	4
 5896 0b38 00       		.ascii	"\000"
 5897 0b39 00000000 		.space	7
 5897      000000
 5898 0b40 2D       		.byte	45
ARM GAS  /tmp/ccGpw0cR.s 			page 152


 5899 0b41 000000   		.space	3
 5900 0b44 FFFFFFFF 		.word	-1
 5901 0b48 2E       		.byte	46
 5902 0b49 000000   		.space	3
 5903 0b4c FFFFFFFF 		.word	-1
 5904 0b50 43505800 		.ascii	"CPX\000"
 5905 0b54 00000000 		.space	4
 5906 0b58 00       		.ascii	"\000"
 5907 0b59 00000000 		.space	7
 5907      000000
 5908 0b60 4D5F536F 		.ascii	"M_Solve\000"
 5908      6C766500 
 5909 0b68 00000000 		.space	7
 5909      000000
 5910 0b6f 00       		.space	1
 5911 0b70 20       		.byte	32
 5912 0b71 000000   		.space	3
 5913 0b74 01000000 		.word	1
 5914 0b78 34       		.byte	52
 5915 0b79 000000   		.space	3
 5916 0b7c 00690000 		.word	26880
 5917 0b80 534C5600 		.ascii	"SLV\000"
 5918 0b84 00000000 		.space	4
 5919 0b88 66272878 		.ascii	"f'(x)\000"
 5919      2900
 5920 0b8e 0000     		.space	2
 5921 0b90 20       		.byte	32
 5922 0b91 000000   		.space	3
 5923 0b94 02000000 		.word	2
 5924 0b98 34       		.byte	52
 5925 0b99 000000   		.space	3
 5926 0b9c 006A0000 		.word	27136
 5927 0ba0 04206478 		.ascii	"\004 dx\000"
 5927      00
 5928 0ba5 000000   		.space	3
 5929 0ba8 66272728 		.ascii	"f''(x)\000"
 5929      782900
 5930 0baf 00       		.space	1
 5931 0bb0 21       		.byte	33
 5932 0bb1 000000   		.space	3
 5933 0bb4 02000000 		.word	2
 5934 0bb8 2E       		.byte	46
 5935 0bb9 000000   		.space	3
 5936 0bbc FFFFFFFF 		.word	-1
 5937 0bc0 53554D00 		.ascii	"SUM\000"
 5938 0bc4 00000000 		.space	4
 5939 0bc8 00       		.ascii	"\000"
 5940 0bc9 00000000 		.space	7
 5940      000000
 5941 0bd0 21       		.byte	33
 5942 0bd1 000000   		.space	3
 5943 0bd4 01000000 		.word	1
 5944 0bd8 2E       		.byte	46
 5945 0bd9 000000   		.space	3
 5946 0bdc FFFFFFFF 		.word	-1
 5947 0be0 50524F44 		.ascii	"PROD\000"
 5947      00
ARM GAS  /tmp/ccGpw0cR.s 			page 153


 5948 0be5 000000   		.space	3
 5949 0be8 00       		.ascii	"\000"
 5950 0be9 00000000 		.space	7
 5950      000000
 5951 0bf0 2C       		.byte	44
 5952 0bf1 000000   		.space	3
 5953 0bf4 FFFFFFFF 		.word	-1
 5954 0bf8 2E       		.byte	46
 5955 0bf9 000000   		.space	3
 5956 0bfc FFFFFFFF 		.word	-1
 5957 0c00 2D2D0D00 		.ascii	"--\015\000"
 5958 0c04 00000000 		.space	4
 5959 0c08 00       		.ascii	"\000"
 5960 0c09 00000000 		.space	7
 5960      000000
 5961 0c10 2D       		.byte	45
 5962 0c11 000000   		.space	3
 5963 0c14 FFFFFFFF 		.word	-1
 5964 0c18 2E       		.byte	46
 5965 0c19 000000   		.space	3
 5966 0c1c FFFFFFFF 		.word	-1
 5967 0c20 43505800 		.ascii	"CPX\000"
 5968 0c24 00000000 		.space	4
 5969 0c28 00       		.ascii	"\000"
 5970 0c29 00000000 		.space	7
 5970      000000
 5971 0c30 4D5F426C 		.ascii	"M_Blank2\000"
 5971      616E6B32 
 5971      00
 5972 0c39 00000000 		.space	6
 5972      0000
 5973 0c3f 00       		.space	1
 5974 0c40 28       		.byte	40
 5975 0c41 000000   		.space	3
 5976 0c44 03000000 		.word	3
 5977 0c48 2E       		.byte	46
 5978 0c49 000000   		.space	3
 5979 0c4c FFFFFFFF 		.word	-1
 5980 0c50 912B00   		.ascii	"\221+\000"
 5981 0c53 00000000 		.space	5
 5981      00
 5982 0c58 00       		.ascii	"\000"
 5983 0c59 00000000 		.space	7
 5983      000000
 5984 0c60 16       		.byte	22
 5985 0c61 000000   		.space	3
 5986 0c64 01000000 		.word	1
 5987 0c68 2E       		.byte	46
 5988 0c69 000000   		.space	3
 5989 0c6c FFFFFFFF 		.word	-1
 5990 0c70 312F5800 		.ascii	"1/X\000"
 5991 0c74 00000000 		.space	4
 5992 0c78 00       		.ascii	"\000"
 5993 0c79 00000000 		.space	7
 5993      000000
 5994 0c80 1C       		.byte	28
 5995 0c81 000000   		.space	3
ARM GAS  /tmp/ccGpw0cR.s 			page 154


 5996 0c84 01000000 		.word	1
 5997 0c88 2E       		.byte	46
 5998 0c89 000000   		.space	3
 5999 0c8c FFFFFFFF 		.word	-1
 6000 0c90 035800   		.ascii	"\003X\000"
 6001 0c93 00000000 		.space	5
 6001      00
 6002 0c98 00       		.ascii	"\000"
 6003 0c99 00000000 		.space	7
 6003      000000
 6004 0ca0 13       		.byte	19
 6005 0ca1 000000   		.space	3
 6006 0ca4 02000000 		.word	2
 6007 0ca8 2E       		.byte	46
 6008 0ca9 000000   		.space	3
 6009 0cac FFFFFFFF 		.word	-1
 6010 0cb0 4C4F4700 		.ascii	"LOG\000"
 6011 0cb4 00000000 		.space	4
 6012 0cb8 00       		.ascii	"\000"
 6013 0cb9 00000000 		.space	7
 6013      000000
 6014 0cc0 2C       		.byte	44
 6015 0cc1 000000   		.space	3
 6016 0cc4 FFFFFFFF 		.word	-1
 6017 0cc8 2E       		.byte	46
 6018 0cc9 000000   		.space	3
 6019 0ccc FFFFFFFF 		.word	-1
 6020 0cd0 2D2D0D00 		.ascii	"--\015\000"
 6021 0cd4 00000000 		.space	4
 6022 0cd8 00       		.ascii	"\000"
 6023 0cd9 00000000 		.space	7
 6023      000000
 6024 0ce0 2D       		.byte	45
 6025 0ce1 000000   		.space	3
 6026 0ce4 FFFFFFFF 		.word	-1
 6027 0ce8 2E       		.byte	46
 6028 0ce9 000000   		.space	3
 6029 0cec FFFFFFFF 		.word	-1
 6030 0cf0 43505800 		.ascii	"CPX\000"
 6031 0cf4 00000000 		.space	4
 6032 0cf8 00       		.ascii	"\000"
 6033 0cf9 00000000 		.space	7
 6033      000000
 6034 0d00 4D5F416C 		.ascii	"M_Alpha\000"
 6034      70686100 
 6035 0d08 00000000 		.space	7
 6035      000000
 6036 0d0f 00       		.space	1
 6037 0d10 34       		.byte	52
 6038 0d11 000000   		.space	3
 6039 0d14 78010000 		.word	376
 6040 0d18 34       		.byte	52
 6041 0d19 000000   		.space	3
 6042 0d1c 6D010000 		.word	365
 6043 0d20 582D3EA0 		.ascii	"X->\240\000"
 6043      00
 6044 0d25 000000   		.space	3
ARM GAS  /tmp/ccGpw0cR.s 			page 155


 6045 0d28 A054494D 		.ascii	"\240TIME\000"
 6045      4500
 6046 0d2e 0000     		.space	2
 6047 0d30 34       		.byte	52
 6048 0d31 000000   		.space	3
 6049 0d34 77010000 		.word	375
 6050 0d38 34       		.byte	52
 6051 0d39 000000   		.space	3
 6052 0d3c 6C010000 		.word	364
 6053 0d40 A02D3E58 		.ascii	"\240->X\000"
 6053      00
 6054 0d45 000000   		.space	3
 6055 0d48 A0444154 		.ascii	"\240DATE\000"
 6055      4500
 6056 0d4e 0000     		.space	2
 6057 0d50 34       		.byte	52
 6058 0d51 000000   		.space	3
 6059 0d54 00480000 		.word	18432
 6060 0d58 34       		.byte	52
 6061 0d59 000000   		.space	3
 6062 0d5c 6A010000 		.word	362
 6063 0d60 A0495000 		.ascii	"\240IP\000"
 6064 0d64 00000000 		.space	4
 6065 0d68 A0444159 		.ascii	"\240DAY\000"
 6065      00
 6066 0d6d 000000   		.space	3
 6067 0d70 34       		.byte	52
 6068 0d71 000000   		.space	3
 6069 0d74 76010000 		.word	374
 6070 0d78 34       		.byte	52
 6071 0d79 000000   		.space	3
 6072 0d7c 6B010000 		.word	363
 6073 0d80 A04C454E 		.ascii	"\240LENG\000"
 6073      4700
 6074 0d86 0000     		.space	2
 6075 0d88 A04D4E54 		.ascii	"\240MNTH\000"
 6075      4800
 6076 0d8e 0000     		.space	2
 6077 0d90 2C       		.byte	44
 6078 0d91 000000   		.space	3
 6079 0d94 FFFFFFFF 		.word	-1
 6080 0d98 2C       		.byte	44
 6081 0d99 000000   		.space	3
 6082 0d9c 01000000 		.word	1
 6083 0da0 2D2D0D00 		.ascii	"--\015\000"
 6084 0da4 00000000 		.space	4
 6085 0da8 00       		.ascii	"\000"
 6086 0da9 00000000 		.space	7
 6086      000000
 6087 0db0 2D       		.byte	45
 6088 0db1 000000   		.space	3
 6089 0db4 FFFFFFFF 		.word	-1
 6090 0db8 2D       		.byte	45
 6091 0db9 000000   		.space	3
 6092 0dbc 01000000 		.word	1
 6093 0dc0 43505800 		.ascii	"CPX\000"
 6094 0dc4 00000000 		.space	4
ARM GAS  /tmp/ccGpw0cR.s 			page 156


 6095 0dc8 00       		.ascii	"\000"
 6096 0dc9 00000000 		.space	7
 6096      000000
 6097 0dd0 4D5F435F 		.ascii	"M_C_Lock\000"
 6097      4C6F636B 
 6097      00
 6098 0dd9 00000000 		.space	6
 6098      0000
 6099 0ddf 00       		.space	1
 6100 0de0 18       		.byte	24
 6101 0de1 000000   		.space	3
 6102 0de4 02000000 		.word	2
 6103 0de8 04       		.byte	4
 6104 0de9 000000   		.space	3
 6105 0dec 02000000 		.word	2
 6106 0df0 504F4C41 		.ascii	"POLAR\000"
 6106      5200
 6107 0df6 0000     		.space	2
 6108 0df8 0D205000 		.ascii	"\015 P\000"
 6109 0dfc 00000000 		.space	4
 6110 0e00 18       		.byte	24
 6111 0e01 000000   		.space	3
 6112 0e04 01000000 		.word	1
 6113 0e08 04       		.byte	4
 6114 0e09 000000   		.space	3
 6115 0e0c 01000000 		.word	1
 6116 0e10 52454354 		.ascii	"RECT\000"
 6116      00
 6117 0e15 000000   		.space	3
 6118 0e18 0D205200 		.ascii	"\015 R\000"
 6119 0e1c 00000000 		.space	4
 6120 0e20 0E       		.byte	14
 6121 0e21 000000   		.space	3
 6122 0e24 01000000 		.word	1
 6123 0e28 0E       		.byte	14
 6124 0e29 000000   		.space	3
 6125 0e2c 03000000 		.word	3
 6126 0e30 2B2F2D06 		.ascii	"+/-\006Im\000"
 6126      496D00
 6127 0e37 00       		.space	1
 6128 0e38 2B2F2D06 		.ascii	"+/-\006Re\000"
 6128      526500
 6129 0e3f 00       		.space	1
 6130 0e40 0D       		.byte	13
 6131 0e41 000000   		.space	3
 6132 0e44 02000000 		.word	2
 6133 0e48 00       		.byte	0
 6134 0e49 000000   		.space	3
 6135 0e4c 01000000 		.word	1
 6136 0e50 52651749 		.ascii	"Re\027Im\000"
 6136      6D00
 6137 0e56 0000     		.space	2
 6138 0e58 48595000 		.ascii	"HYP\000"
 6139 0e5c 00000000 		.space	4
 6140 0e60 2C       		.byte	44
 6141 0e61 000000   		.space	3
 6142 0e64 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccGpw0cR.s 			page 157


 6143 0e68 0F       		.byte	15
 6144 0e69 000000   		.space	3
 6145 0e6c 01000000 		.word	1
 6146 0e70 2D2D0D00 		.ascii	"--\015\000"
 6147 0e74 00000000 		.space	4
 6148 0e78 1106AF00 		.ascii	"\021\006\257\000"
 6149 0e7c 00000000 		.space	4
 6150 0e80 2D       		.byte	45
 6151 0e81 000000   		.space	3
 6152 0e84 FFFFFFFF 		.word	-1
 6153 0e88 0C       		.byte	12
 6154 0e89 000000   		.space	3
 6155 0e8c 01000000 		.word	1
 6156 0e90 43505800 		.ascii	"CPX\000"
 6157 0e94 00000000 		.space	4
 6158 0e98 1106434E 		.ascii	"\021\006CNST\000"
 6158      535400
 6159 0e9f 00       		.space	1
 6160 0ea0 4D5F436C 		.ascii	"M_Clear_C\000"
 6160      6561725F 
 6160      4300
 6161 0eaa 00000000 		.space	5
 6161      00
 6162 0eaf 00       		.space	1
 6163 0eb0 2E       		.byte	46
 6164 0eb1 000000   		.space	3
 6165 0eb4 FFFFFFFF 		.word	-1
 6166 0eb8 2E       		.byte	46
 6167 0eb9 000000   		.space	3
 6168 0ebc FFFFFFFF 		.word	-1
 6169 0ec0 00       		.ascii	"\000"
 6170 0ec1 00000000 		.space	7
 6170      000000
 6171 0ec8 00       		.ascii	"\000"
 6172 0ec9 00000000 		.space	7
 6172      000000
 6173 0ed0 2E       		.byte	46
 6174 0ed1 000000   		.space	3
 6175 0ed4 FFFFFFFF 		.word	-1
 6176 0ed8 2E       		.byte	46
 6177 0ed9 000000   		.space	3
 6178 0edc FFFFFFFF 		.word	-1
 6179 0ee0 00       		.ascii	"\000"
 6180 0ee1 00000000 		.space	7
 6180      000000
 6181 0ee8 00       		.ascii	"\000"
 6182 0ee9 00000000 		.space	7
 6182      000000
 6183 0ef0 10       		.byte	16
 6184 0ef1 000000   		.space	3
 6185 0ef4 03000000 		.word	3
 6186 0ef8 34       		.byte	52
 6187 0ef9 000000   		.space	3
 6188 0efc 74010000 		.word	372
 6189 0f00 434C7800 		.ascii	"CLx\000"
 6190 0f04 00000000 		.space	4
 6191 0f08 434C06A0 		.ascii	"CL\006\240\000"
ARM GAS  /tmp/ccGpw0cR.s 			page 158


 6191      00
 6192 0f0d 000000   		.space	3
 6193 0f10 34       		.byte	52
 6194 0f11 000000   		.space	3
 6195 0f14 40010000 		.word	320
 6196 0f18 2E       		.byte	46
 6197 0f19 000000   		.space	3
 6198 0f1c FFFFFFFF 		.word	-1
 6199 0f20 434C5374 		.ascii	"CLStk\000"
 6199      6B00
 6200 0f26 0000     		.space	2
 6201 0f28 00       		.ascii	"\000"
 6202 0f29 00000000 		.space	7
 6202      000000
 6203 0f30 2C       		.byte	44
 6204 0f31 000000   		.space	3
 6205 0f34 FFFFFFFF 		.word	-1
 6206 0f38 2E       		.byte	46
 6207 0f39 000000   		.space	3
 6208 0f3c FFFFFFFF 		.word	-1
 6209 0f40 2D2D0D00 		.ascii	"--\015\000"
 6210 0f44 00000000 		.space	4
 6211 0f48 00       		.ascii	"\000"
 6212 0f49 00000000 		.space	7
 6212      000000
 6213 0f50 2D       		.byte	45
 6214 0f51 000000   		.space	3
 6215 0f54 FFFFFFFF 		.word	-1
 6216 0f58 2E       		.byte	46
 6217 0f59 000000   		.space	3
 6218 0f5c FFFFFFFF 		.word	-1
 6219 0f60 43505800 		.ascii	"CPX\000"
 6220 0f64 00000000 		.space	4
 6221 0f68 00       		.ascii	"\000"
 6222 0f69 00000000 		.space	7
 6222      000000
 6223 0f70 4D5F5377 		.ascii	"M_Swap_C\000"
 6223      61705F43 
 6223      00
 6224 0f79 00000000 		.space	6
 6224      0000
 6225 0f7f 00       		.space	1
 6226 0f80 0D       		.byte	13
 6227 0f81 000000   		.space	3
 6228 0f84 01000000 		.word	1
 6229 0f88 2E       		.byte	46
 6230 0f89 000000   		.space	3
 6231 0f8c FFFFFFFF 		.word	-1
 6232 0f90 53686F77 		.ascii	"Show\016\000"
 6232      0E00
 6233 0f96 0000     		.space	2
 6234 0f98 00       		.ascii	"\000"
 6235 0f99 00000000 		.space	7
 6235      000000
 6236 0fa0 0D       		.byte	13
 6237 0fa1 000000   		.space	3
 6238 0fa4 02000000 		.word	2
ARM GAS  /tmp/ccGpw0cR.s 			page 159


 6239 0fa8 2E       		.byte	46
 6240 0fa9 000000   		.space	3
 6241 0fac FFFFFFFF 		.word	-1
 6242 0fb0 53686F77 		.ascii	"Show\015\000"
 6242      0D00
 6243 0fb6 0000     		.space	2
 6244 0fb8 00       		.ascii	"\000"
 6245 0fb9 00000000 		.space	7
 6245      000000
 6246 0fc0 0D       		.byte	13
 6247 0fc1 000000   		.space	3
 6248 0fc4 03000000 		.word	3
 6249 0fc8 2E       		.byte	46
 6250 0fc9 000000   		.space	3
 6251 0fcc FFFFFFFF 		.word	-1
 6252 0fd0 78173F00 		.ascii	"x\027?\000"
 6253 0fd4 00000000 		.space	4
 6254 0fd8 00       		.ascii	"\000"
 6255 0fd9 00000000 		.space	7
 6255      000000
 6256 0fe0 2E       		.byte	46
 6257 0fe1 000000   		.space	3
 6258 0fe4 FFFFFFFF 		.word	-1
 6259 0fe8 2E       		.byte	46
 6260 0fe9 000000   		.space	3
 6261 0fec FFFFFFFF 		.word	-1
 6262 0ff0 00       		.ascii	"\000"
 6263 0ff1 00000000 		.space	7
 6263      000000
 6264 0ff8 00       		.ascii	"\000"
 6265 0ff9 00000000 		.space	7
 6265      000000
 6266 1000 2C       		.byte	44
 6267 1001 000000   		.space	3
 6268 1004 FFFFFFFF 		.word	-1
 6269 1008 2E       		.byte	46
 6270 1009 000000   		.space	3
 6271 100c FFFFFFFF 		.word	-1
 6272 1010 2D2D0D00 		.ascii	"--\015\000"
 6273 1014 00000000 		.space	4
 6274 1018 00       		.ascii	"\000"
 6275 1019 00000000 		.space	7
 6275      000000
 6276 1020 2D       		.byte	45
 6277 1021 000000   		.space	3
 6278 1024 FFFFFFFF 		.word	-1
 6279 1028 2E       		.byte	46
 6280 1029 000000   		.space	3
 6281 102c FFFFFFFF 		.word	-1
 6282 1030 43505800 		.ascii	"CPX\000"
 6283 1034 00000000 		.space	4
 6284 1038 00       		.ascii	"\000"
 6285 1039 00000000 		.space	7
 6285      000000
 6286 1040 4D5F4172 		.ascii	"M_Arrow_C\000"
 6286      726F775F 
 6286      4300
ARM GAS  /tmp/ccGpw0cR.s 			page 160


 6287 104a 00000000 		.space	5
 6287      00
 6288 104f 00       		.space	1
 6289 1050 2E       		.byte	46
 6290 1051 000000   		.space	3
 6291 1054 FFFFFFFF 		.word	-1
 6292 1058 06       		.byte	6
 6293 1059 000000   		.space	3
 6294 105c 02000000 		.word	2
 6295 1060 00       		.ascii	"\000"
 6296 1061 00000000 		.space	7
 6296      000000
 6297 1068 44454700 		.ascii	"DEG\000"
 6298 106c 00000000 		.space	4
 6299 1070 2E       		.byte	46
 6300 1071 000000   		.space	3
 6301 1074 FFFFFFFF 		.word	-1
 6302 1078 07       		.byte	7
 6303 1079 000000   		.space	3
 6304 107c 02000000 		.word	2
 6305 1080 00       		.ascii	"\000"
 6306 1081 00000000 		.space	7
 6306      000000
 6307 1088 52414400 		.ascii	"RAD\000"
 6308 108c 00000000 		.space	4
 6309 1090 2E       		.byte	46
 6310 1091 000000   		.space	3
 6311 1094 FFFFFFFF 		.word	-1
 6312 1098 08       		.byte	8
 6313 1099 000000   		.space	3
 6314 109c 02000000 		.word	2
 6315 10a0 00       		.ascii	"\000"
 6316 10a1 00000000 		.space	7
 6316      000000
 6317 10a8 47726164 		.ascii	"Grad\000"
 6317      00
 6318 10ad 000000   		.space	3
 6319 10b0 2E       		.byte	46
 6320 10b1 000000   		.space	3
 6321 10b4 FFFFFFFF 		.word	-1
 6322 10b8 06       		.byte	6
 6323 10b9 000000   		.space	3
 6324 10bc 01000000 		.word	1
 6325 10c0 00       		.ascii	"\000"
 6326 10c1 00000000 		.space	7
 6326      000000
 6327 10c8 0D484D53 		.ascii	"\015HMS\000"
 6327      00
 6328 10cd 000000   		.space	3
 6329 10d0 2C       		.byte	44
 6330 10d1 000000   		.space	3
 6331 10d4 FFFFFFFF 		.word	-1
 6332 10d8 07       		.byte	7
 6333 10d9 000000   		.space	3
 6334 10dc 01000000 		.word	1
 6335 10e0 2D2D0D00 		.ascii	"--\015\000"
 6336 10e4 00000000 		.space	4
ARM GAS  /tmp/ccGpw0cR.s 			page 161


 6337 10e8 484D530D 		.ascii	"HMS\015\000"
 6337      00
 6338 10ed 000000   		.space	3
 6339 10f0 2D       		.byte	45
 6340 10f1 000000   		.space	3
 6341 10f4 FFFFFFFF 		.word	-1
 6342 10f8 2E       		.byte	46
 6343 10f9 000000   		.space	3
 6344 10fc FFFFFFFF 		.word	-1
 6345 1100 43505800 		.ascii	"CPX\000"
 6346 1104 00000000 		.space	4
 6347 1108 00       		.ascii	"\000"
 6348 1109 00000000 		.space	7
 6348      000000
 6349 1110 4D5F5072 		.ascii	"M_Prob_C\000"
 6349      6F625F43 
 6349      00
 6350 1119 00000000 		.space	6
 6350      0000
 6351 111f 00       		.space	1
 6352 1120 18       		.byte	24
 6353 1121 000000   		.space	3
 6354 1124 03000000 		.word	3
 6355 1128 34       		.byte	52
 6356 1129 000000   		.space	3
 6357 112c 31050000 		.word	1329
 6358 1130 14062100 		.ascii	"\024\006!\000"
 6359 1134 00000000 		.space	4
 6360 1138 14064C6E 		.ascii	"\024\006Ln\006\202\000"
 6360      068200
 6361 113f 00       		.space	1
 6362 1140 34       		.byte	52
 6363 1141 000000   		.space	3
 6364 1144 12060000 		.word	1554
 6365 1148 2E       		.byte	46
 6366 1149 000000   		.space	3
 6367 114c FFFFFFFF 		.word	-1
 6368 1150 14064379 		.ascii	"\024\006Cy,x\000"
 6368      2C7800
 6369 1157 00       		.space	1
 6370 1158 00       		.ascii	"\000"
 6371 1159 00000000 		.space	7
 6371      000000
 6372 1160 34       		.byte	52
 6373 1161 000000   		.space	3
 6374 1164 13060000 		.word	1555
 6375 1168 2E       		.byte	46
 6376 1169 000000   		.space	3
 6377 116c FFFFFFFF 		.word	-1
 6378 1170 14065079 		.ascii	"\024\006Py,x\000"
 6378      2C7800
 6379 1177 00       		.space	1
 6380 1178 00       		.ascii	"\000"
 6381 1179 00000000 		.space	7
 6381      000000
 6382 1180 2E       		.byte	46
 6383 1181 000000   		.space	3
ARM GAS  /tmp/ccGpw0cR.s 			page 162


 6384 1184 FFFFFFFF 		.word	-1
 6385 1188 2E       		.byte	46
 6386 1189 000000   		.space	3
 6387 118c FFFFFFFF 		.word	-1
 6388 1190 00       		.ascii	"\000"
 6389 1191 00000000 		.space	7
 6389      000000
 6390 1198 00       		.ascii	"\000"
 6391 1199 00000000 		.space	7
 6391      000000
 6392 11a0 2C       		.byte	44
 6393 11a1 000000   		.space	3
 6394 11a4 FFFFFFFF 		.word	-1
 6395 11a8 2E       		.byte	46
 6396 11a9 000000   		.space	3
 6397 11ac FFFFFFFF 		.word	-1
 6398 11b0 2D2D0D00 		.ascii	"--\015\000"
 6399 11b4 00000000 		.space	4
 6400 11b8 00       		.ascii	"\000"
 6401 11b9 00000000 		.space	7
 6401      000000
 6402 11c0 2D       		.byte	45
 6403 11c1 000000   		.space	3
 6404 11c4 FFFFFFFF 		.word	-1
 6405 11c8 2E       		.byte	46
 6406 11c9 000000   		.space	3
 6407 11cc FFFFFFFF 		.word	-1
 6408 11d0 43505800 		.ascii	"CPX\000"
 6409 11d4 00000000 		.space	4
 6410 11d8 00       		.ascii	"\000"
 6411 11d9 00000000 		.space	7
 6411      000000
 6412 11e0 4D5F426C 		.ascii	"M_Blank2_C\000"
 6412      616E6B32 
 6412      5F4300
 6413 11eb 00000000 		.space	4
 6414 11ef 00       		.space	1
 6415 11f0 00       		.byte	0
 6416 11f1 000000   		.space	3
 6417 11f4 01000000 		.word	1
 6418 11f8 2E       		.byte	46
 6419 11f9 000000   		.space	3
 6420 11fc FFFFFFFF 		.word	-1
 6421 1200 48595000 		.ascii	"HYP\000"
 6422 1204 00000000 		.space	4
 6423 1208 00       		.ascii	"\000"
 6424 1209 00000000 		.space	7
 6424      000000
 6425 1210 16       		.byte	22
 6426 1211 000000   		.space	3
 6427 1214 01000000 		.word	1
 6428 1218 2E       		.byte	46
 6429 1219 000000   		.space	3
 6430 121c FFFFFFFF 		.word	-1
 6431 1220 312F5800 		.ascii	"1/X\000"
 6432 1224 00000000 		.space	4
 6433 1228 00       		.ascii	"\000"
ARM GAS  /tmp/ccGpw0cR.s 			page 163


 6434 1229 00000000 		.space	7
 6434      000000
 6435 1230 1C       		.byte	28
 6436 1231 000000   		.space	3
 6437 1234 01000000 		.word	1
 6438 1238 2E       		.byte	46
 6439 1239 000000   		.space	3
 6440 123c FFFFFFFF 		.word	-1
 6441 1240 035800   		.ascii	"\003X\000"
 6442 1243 00000000 		.space	5
 6442      00
 6443 1248 00       		.ascii	"\000"
 6444 1249 00000000 		.space	7
 6444      000000
 6445 1250 13       		.byte	19
 6446 1251 000000   		.space	3
 6447 1254 02000000 		.word	2
 6448 1258 2E       		.byte	46
 6449 1259 000000   		.space	3
 6450 125c FFFFFFFF 		.word	-1
 6451 1260 4C4F4700 		.ascii	"LOG\000"
 6452 1264 00000000 		.space	4
 6453 1268 00       		.ascii	"\000"
 6454 1269 00000000 		.space	7
 6454      000000
 6455 1270 2C       		.byte	44
 6456 1271 000000   		.space	3
 6457 1274 FFFFFFFF 		.word	-1
 6458 1278 2E       		.byte	46
 6459 1279 000000   		.space	3
 6460 127c FFFFFFFF 		.word	-1
 6461 1280 2D2D0D00 		.ascii	"--\015\000"
 6462 1284 00000000 		.space	4
 6463 1288 00       		.ascii	"\000"
 6464 1289 00000000 		.space	7
 6464      000000
 6465 1290 2D       		.byte	45
 6466 1291 000000   		.space	3
 6467 1294 FFFFFFFF 		.word	-1
 6468 1298 2E       		.byte	46
 6469 1299 000000   		.space	3
 6470 129c FFFFFFFF 		.word	-1
 6471 12a0 43505800 		.ascii	"CPX\000"
 6472 12a4 00000000 		.space	4
 6473 12a8 00       		.ascii	"\000"
 6474 12a9 00000000 		.space	7
 6474      000000
 6475 12b0 4D5F4D69 		.ascii	"M_Misc_C\000"
 6475      73635F43 
 6475      00
 6476 12b9 00000000 		.space	6
 6476      0000
 6477 12bf 00       		.space	1
 6478 12c0 25       		.byte	37
 6479 12c1 000000   		.space	3
 6480 12c4 01000000 		.word	1
 6481 12c8 14       		.byte	20
ARM GAS  /tmp/ccGpw0cR.s 			page 164


 6482 12c9 000000   		.space	3
 6483 12cc 01000000 		.word	1
 6484 12d0 7C7A7C00 		.ascii	"|z|\000"
 6485 12d4 00000000 		.space	4
 6486 12d8 14329C00 		.ascii	"\0242\234\000"
 6487 12dc 00000000 		.space	4
 6488 12e0 25       		.byte	37
 6489 12e1 000000   		.space	3
 6490 12e4 02000000 		.word	2
 6491 12e8 14       		.byte	20
 6492 12e9 000000   		.space	3
 6493 12ec 02000000 		.word	2
 6494 12f0 524E4400 		.ascii	"RND\000"
 6495 12f4 00000000 		.space	4
 6496 12f8 144C6F67 		.ascii	"\024Log\272\000"
 6496      BA00
 6497 12fe 0000     		.space	2
 6498 1300 26       		.byte	38
 6499 1301 000000   		.space	3
 6500 1304 01000000 		.word	1
 6501 1308 15       		.byte	21
 6502 1309 000000   		.space	3
 6503 130c 02000000 		.word	2
 6504 1310 300D5265 		.ascii	"0\015Re\000"
 6504      00
 6505 1315 000000   		.space	3
 6506 1318 144C6F67 		.ascii	"\024Log\213\000"
 6506      8B00
 6507 131e 0000     		.space	2
 6508 1320 26       		.byte	38
 6509 1321 000000   		.space	3
 6510 1324 02000000 		.word	2
 6511 1328 16       		.byte	22
 6512 1329 000000   		.space	3
 6513 132c 02000000 		.word	2
 6514 1330 300D496D 		.ascii	"0\015Im\000"
 6514      00
 6515 1335 000000   		.space	3
 6516 1338 147C7C65 		.ascii	"\024||el\000"
 6516      6C00
 6517 133e 0000     		.space	2
 6518 1340 2C       		.byte	44
 6519 1341 000000   		.space	3
 6520 1344 FFFFFFFF 		.word	-1
 6521 1348 1C       		.byte	28
 6522 1349 000000   		.space	3
 6523 134c 03000000 		.word	3
 6524 1350 2D2D0D00 		.ascii	"--\015\000"
 6525 1354 00000000 		.space	4
 6526 1358 142E1C00 		.ascii	"\024.\034\000"
 6527 135c 00000000 		.space	4
 6528 1360 2D       		.byte	45
 6529 1361 000000   		.space	3
 6530 1364 FFFFFFFF 		.word	-1
 6531 1368 16       		.byte	22
 6532 1369 000000   		.space	3
 6533 136c 03000000 		.word	3
ARM GAS  /tmp/ccGpw0cR.s 			page 165


 6534 1370 43505800 		.ascii	"CPX\000"
 6535 1374 00000000 		.space	4
 6536 1378 142E2F00 		.ascii	"\024./\000"
 6537 137c 00000000 		.space	4
 6538 1380 4D5F5573 		.ascii	"M_Usermenu\000"
 6538      65726D65 
 6538      6E7500
 6539 138b 00000000 		.space	4
 6540 138f 00       		.space	1
 6541 1390 34       		.byte	52
 6542 1391 000000   		.space	3
 6543 1394 00FB0000 		.word	64256
 6544 1398 2E       		.byte	46
 6545 1399 000000   		.space	3
 6546 139c FFFFFFFF 		.word	-1
 6547 13a0 554D454E 		.ascii	"UMEN\000"
 6547      00
 6548 13a5 000000   		.space	3
 6549 13a8 00       		.ascii	"\000"
 6550 13a9 00000000 		.space	7
 6550      000000
 6551 13b0 34       		.byte	52
 6552 13b1 000000   		.space	3
 6553 13b4 55FB4D31 		.word	827194197
 6554 13b8 34       		.byte	52
 6555 13b9 000000   		.space	3
 6556 13bc 55FB4D34 		.word	877525845
 6557 13c0 554D3100 		.ascii	"UM1\000"
 6558 13c4 00000000 		.space	4
 6559 13c8 554D3400 		.ascii	"UM4\000"
 6560 13cc 00000000 		.space	4
 6561 13d0 34       		.byte	52
 6562 13d1 000000   		.space	3
 6563 13d4 55FB4D32 		.word	843971413
 6564 13d8 34       		.byte	52
 6565 13d9 000000   		.space	3
 6566 13dc 55FB4D35 		.word	894303061
 6567 13e0 554D3200 		.ascii	"UM2\000"
 6568 13e4 00000000 		.space	4
 6569 13e8 554D3500 		.ascii	"UM5\000"
 6570 13ec 00000000 		.space	4
 6571 13f0 34       		.byte	52
 6572 13f1 000000   		.space	3
 6573 13f4 55FB4D33 		.word	860748629
 6574 13f8 34       		.byte	52
 6575 13f9 000000   		.space	3
 6576 13fc 55FB4D36 		.word	911080277
 6577 1400 554D3300 		.ascii	"UM3\000"
 6578 1404 00000000 		.space	4
 6579 1408 554D3600 		.ascii	"UM6\000"
 6580 140c 00000000 		.space	4
 6581 1410 2C       		.byte	44
 6582 1411 000000   		.space	3
 6583 1414 FFFFFFFF 		.word	-1
 6584 1418 1C       		.byte	28
 6585 1419 000000   		.space	3
 6586 141c 03000000 		.word	3
ARM GAS  /tmp/ccGpw0cR.s 			page 166


 6587 1420 2D2D0D00 		.ascii	"--\015\000"
 6588 1424 00000000 		.space	4
 6589 1428 00       		.ascii	"\000"
 6590 1429 00000000 		.space	7
 6590      000000
 6591 1430 2D       		.byte	45
 6592 1431 000000   		.space	3
 6593 1434 FFFFFFFF 		.word	-1
 6594 1438 16       		.byte	22
 6595 1439 000000   		.space	3
 6596 143c 03000000 		.word	3
 6597 1440 43505800 		.ascii	"CPX\000"
 6598 1444 00000000 		.space	4
 6599 1448 00       		.ascii	"\000"
 6600 1449 00000000 		.space	7
 6600      000000
 6601 1450 4D5F5072 		.ascii	"M_Print\000"
 6601      696E7400 
 6602 1458 00000000 		.space	7
 6602      000000
 6603 145f 00       		.space	1
 6604 1460 34       		.byte	52
 6605 1461 000000   		.space	3
 6606 1464 D9010000 		.word	473
 6607 1468 34       		.byte	52
 6608 1469 000000   		.space	3
 6609 146c DA010000 		.word	474
 6610 1470 92064F6E 		.ascii	"\222\006On\000"
 6610      00
 6611 1475 000000   		.space	3
 6612 1478 92064F66 		.ascii	"\222\006Off\000"
 6612      6600
 6613 147e 0000     		.space	2
 6614 1480 34       		.byte	52
 6615 1481 000000   		.space	3
 6616 1484 00AF0000 		.word	44800
 6617 1488 34       		.byte	52
 6618 1489 000000   		.space	3
 6619 148c 00B60000 		.word	46592
 6620 1490 92064D6F 		.ascii	"\222\006Mode\000"
 6620      646500
 6621 1497 00       		.space	1
 6622 1498 92064462 		.ascii	"\222\006DbSp\000"
 6622      537000
 6623 149f 00       		.space	1
 6624 14a0 34       		.byte	52
 6625 14a1 000000   		.space	3
 6626 14a4 BC010000 		.word	444
 6627 14a8 34       		.byte	52
 6628 14a9 000000   		.space	3
 6629 14ac BD010000 		.word	445
 6630 14b0 92065072 		.ascii	"\222\006Prog\000"
 6630      6F6700
 6631 14b7 00       		.space	1
 6632 14b8 92065265 		.ascii	"\222\006Regs\000"
 6632      677300
 6633 14bf 00       		.space	1
ARM GAS  /tmp/ccGpw0cR.s 			page 167


 6634 14c0 34       		.byte	52
 6635 14c1 000000   		.space	3
 6636 14c4 BE010000 		.word	446
 6637 14c8 34       		.byte	52
 6638 14c9 000000   		.space	3
 6639 14cc BF010000 		.word	447
 6640 14d0 92065374 		.ascii	"\222\006Stk\000"
 6640      6B00
 6641 14d6 0000     		.space	2
 6642 14d8 92069100 		.ascii	"\222\006\221\000"
 6643 14dc 00000000 		.space	4
 6644 14e0 2C       		.byte	44
 6645 14e1 000000   		.space	3
 6646 14e4 FFFFFFFF 		.word	-1
 6647 14e8 34       		.byte	52
 6648 14e9 000000   		.space	3
 6649 14ec C0010000 		.word	448
 6650 14f0 2D2D0D00 		.ascii	"--\015\000"
 6651 14f4 00000000 		.space	4
 6652 14f8 9206A000 		.ascii	"\222\006\240\000"
 6653 14fc 00000000 		.space	4
 6654 1500 2D       		.byte	45
 6655 1501 000000   		.space	3
 6656 1504 FFFFFFFF 		.word	-1
 6657 1508 34       		.byte	52
 6658 1509 000000   		.space	3
 6659 150c C3010000 		.word	451
 6660 1510 43505800 		.ascii	"CPX\000"
 6661 1514 00000000 		.space	4
 6662 1518 92064144 		.ascii	"\222\006ADV\000"
 6662      5600
 6663 151e 0000     		.space	2
 6664              		.section	.rodata.mapping_alpha.11154,"a"
 6665              		.align	2
 6666              		.set	.LANCHOR16,. + 0
 6669              	mapping_alpha.11154:
 6670 0000 63       		.byte	99
 6671 0001 000000   		.space	3
 6672 0004 FFFFFFFF 		.word	-1
 6673 0008 00       		.byte	0
 6674 0009 000000   		.space	3
 6675 000c FFFFFFFF 		.word	-1
 6676 0010 01       		.byte	1
 6677 0011 000000   		.space	3
 6678 0014 FFFFFFFF 		.word	-1
 6679 0018 02       		.byte	2
 6680 0019 000000   		.space	3
 6681 001c FFFFFFFF 		.word	-1
 6682 0020 03       		.byte	3
 6683 0021 000000   		.space	3
 6684 0024 FFFFFFFF 		.word	-1
 6685 0028 04       		.byte	4
 6686 0029 000000   		.space	3
 6687 002c FFFFFFFF 		.word	-1
 6688 0030 05       		.byte	5
 6689 0031 000000   		.space	3
 6690 0034 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccGpw0cR.s 			page 168


 6691 0038 06       		.byte	6
 6692 0039 000000   		.space	3
 6693 003c FFFFFFFF 		.word	-1
 6694 0040 07       		.byte	7
 6695 0041 000000   		.space	3
 6696 0044 FFFFFFFF 		.word	-1
 6697 0048 08       		.byte	8
 6698 0049 000000   		.space	3
 6699 004c FFFFFFFF 		.word	-1
 6700 0050 09       		.byte	9
 6701 0051 000000   		.space	3
 6702 0054 FFFFFFFF 		.word	-1
 6703 0058 0A       		.byte	10
 6704 0059 000000   		.space	3
 6705 005c FFFFFFFF 		.word	-1
 6706 0060 0B       		.byte	11
 6707 0061 000000   		.space	3
 6708 0064 FFFFFFFF 		.word	-1
 6709 0068 0C       		.byte	12
 6710 0069 000000   		.space	3
 6711 006c FFFFFFFF 		.word	-1
 6712 0070 0D       		.byte	13
 6713 0071 000000   		.space	3
 6714 0074 FFFFFFFF 		.word	-1
 6715 0078 0E       		.byte	14
 6716 0079 000000   		.space	3
 6717 007c FFFFFFFF 		.word	-1
 6718 0080 0F       		.byte	15
 6719 0081 000000   		.space	3
 6720 0084 FFFFFFFF 		.word	-1
 6721 0088 10       		.byte	16
 6722 0089 000000   		.space	3
 6723 008c FFFFFFFF 		.word	-1
 6724 0090 12       		.byte	18
 6725 0091 000000   		.space	3
 6726 0094 FFFFFFFF 		.word	-1
 6727 0098 13       		.byte	19
 6728 0099 000000   		.space	3
 6729 009c FFFFFFFF 		.word	-1
 6730 00a0 14       		.byte	20
 6731 00a1 000000   		.space	3
 6732 00a4 FFFFFFFF 		.word	-1
 6733 00a8 15       		.byte	21
 6734 00a9 000000   		.space	3
 6735 00ac FFFFFFFF 		.word	-1
 6736 00b0 16       		.byte	22
 6737 00b1 000000   		.space	3
 6738 00b4 FFFFFFFF 		.word	-1
 6739 00b8 18       		.byte	24
 6740 00b9 000000   		.space	3
 6741 00bc FFFFFFFF 		.word	-1
 6742 00c0 19       		.byte	25
 6743 00c1 000000   		.space	3
 6744 00c4 FFFFFFFF 		.word	-1
 6745 00c8 1A       		.byte	26
 6746 00c9 000000   		.space	3
 6747 00cc FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccGpw0cR.s 			page 169


 6748 00d0 1B       		.byte	27
 6749 00d1 000000   		.space	3
 6750 00d4 FFFFFFFF 		.word	-1
 6751 00d8 1C       		.byte	28
 6752 00d9 000000   		.space	3
 6753 00dc FFFFFFFF 		.word	-1
 6754 00e0 1E       		.byte	30
 6755 00e1 000000   		.space	3
 6756 00e4 FFFFFFFF 		.word	-1
 6757 00e8 1F       		.byte	31
 6758 00e9 000000   		.space	3
 6759 00ec FFFFFFFF 		.word	-1
 6760 00f0 20       		.byte	32
 6761 00f1 000000   		.space	3
 6762 00f4 FFFFFFFF 		.word	-1
 6763 00f8 21       		.byte	33
 6764 00f9 000000   		.space	3
 6765 00fc FFFFFFFF 		.word	-1
 6766 0100 22       		.byte	34
 6767 0101 000000   		.space	3
 6768 0104 FFFFFFFF 		.word	-1
 6769 0108 24       		.byte	36
 6770 0109 000000   		.space	3
 6771 010c FFFFFFFF 		.word	-1
 6772 0110 25       		.byte	37
 6773 0111 000000   		.space	3
 6774 0114 FFFFFFFF 		.word	-1
 6775 0118 26       		.byte	38
 6776 0119 000000   		.space	3
 6777 011c FFFFFFFF 		.word	-1
 6778 0120 27       		.byte	39
 6779 0121 000000   		.space	3
 6780 0124 FFFFFFFF 		.word	-1
 6781 0128 28       		.byte	40
 6782 0129 000000   		.space	3
 6783 012c FFFFFFFF 		.word	-1
 6784 0130 2E       		.byte	46
 6785 0131 000000   		.space	3
 6786 0134 FFFFFFFF 		.word	-1
 6787 0138 2E       		.byte	46
 6788 0139 000000   		.space	3
 6789 013c FFFFFFFF 		.word	-1
 6790 0140 2E       		.byte	46
 6791 0141 000000   		.space	3
 6792 0144 FFFFFFFF 		.word	-1
 6793 0148 2E       		.byte	46
 6794 0149 000000   		.space	3
 6795 014c FFFFFFFF 		.word	-1
 6796 0150 2C       		.byte	44
 6797 0151 000000   		.space	3
 6798 0154 FFFFFFFF 		.word	-1
 6799 0158 2D       		.byte	45
 6800 0159 000000   		.space	3
 6801 015c FFFFFFFF 		.word	-1
 6802 0160 2E       		.byte	46
 6803 0161 000000   		.space	3
 6804 0164 FFFFFFFF 		.word	-1
ARM GAS  /tmp/ccGpw0cR.s 			page 170


 6805 0168 2E       		.byte	46
 6806 0169 000000   		.space	3
 6807 016c FFFFFFFF 		.word	-1
 6808 0170 2E       		.byte	46
 6809 0171 000000   		.space	3
 6810 0174 FFFFFFFF 		.word	-1
 6811              		.section	.rodata.mapping_fshift.11152,"a"
 6812              		.align	2
 6813              		.set	.LANCHOR14,. + 0
 6816              	mapping_fshift.11152:
 6817 0000 63       		.byte	99
 6818 0001 000000   		.space	3
 6819 0004 FFFFFFFF 		.word	-1
 6820 0008 22       		.byte	34
 6821 0009 000000   		.space	3
 6822 000c 03000000 		.word	3
 6823 0010 15       		.byte	21
 6824 0011 000000   		.space	3
 6825 0014 01000000 		.word	1
 6826 0018 1C       		.byte	28
 6827 0019 000000   		.space	3
 6828 001c 02000000 		.word	2
 6829 0020 13       		.byte	19
 6830 0021 000000   		.space	3
 6831 0024 01000000 		.word	1
 6832 0028 12       		.byte	18
 6833 0029 000000   		.space	3
 6834 002c 01000000 		.word	1
 6835 0030 12       		.byte	18
 6836 0031 000000   		.space	3
 6837 0034 03000000 		.word	3
 6838 0038 31       		.byte	49
 6839 0039 000000   		.space	3
 6840 003c 0F000000 		.word	15
 6841 0040 22       		.byte	34
 6842 0041 000000   		.space	3
 6843 0044 01000000 		.word	1
 6844 0048 0F       		.byte	15
 6845 0049 000000   		.space	3
 6846 004c 03000000 		.word	3
 6847 0050 01       		.byte	1
 6848 0051 000000   		.space	3
 6849 0054 02000000 		.word	2
 6850 0058 02       		.byte	2
 6851 0059 000000   		.space	3
 6852 005c 02000000 		.word	2
 6853 0060 03       		.byte	3
 6854 0061 000000   		.space	3
 6855 0064 02000000 		.word	2
 6856 0068 0C       		.byte	12
 6857 0069 000000   		.space	3
 6858 006c 01000000 		.word	1
 6859 0070 34       		.byte	52
 6860 0071 000000   		.space	3
 6861 0074 6C2A0000 		.word	10860
 6862 0078 2F       		.byte	47
 6863 0079 000000   		.space	3
ARM GAS  /tmp/ccGpw0cR.s 			page 171


 6864 007c 04000000 		.word	4
 6865 0080 2F       		.byte	47
 6866 0081 000000   		.space	3
 6867 0084 02000000 		.word	2
 6868 0088 2F       		.byte	47
 6869 0089 000000   		.space	3
 6870 008c 01000000 		.word	1
 6871 0090 18       		.byte	24
 6872 0091 000000   		.space	3
 6873 0094 00000000 		.word	0
 6874 0098 20       		.byte	32
 6875 0099 000000   		.space	3
 6876 009c 01000000 		.word	1
 6877 00a0 2F       		.byte	47
 6878 00a1 000000   		.space	3
 6879 00a4 0E000000 		.word	14
 6880 00a8 1C       		.byte	28
 6881 00a9 000000   		.space	3
 6882 00ac 03000000 		.word	3
 6883 00b0 2F       		.byte	47
 6884 00b1 000000   		.space	3
 6885 00b4 0C000000 		.word	12
 6886 00b8 1E       		.byte	30
 6887 00b9 000000   		.space	3
 6888 00bc 00000000 		.word	0
 6889 00c0 2F       		.byte	47
 6890 00c1 000000   		.space	3
 6891 00c4 03000000 		.word	3
 6892 00c8 04       		.byte	4
 6893 00c9 000000   		.space	3
 6894 00cc 03000000 		.word	3
 6895 00d0 2F       		.byte	47
 6896 00d1 000000   		.space	3
 6897 00d4 0A000000 		.word	10
 6898 00d8 2F       		.byte	47
 6899 00d9 000000   		.space	3
 6900 00dc 0B000000 		.word	11
 6901 00e0 2A       		.byte	42
 6902 00e1 000000   		.space	3
 6903 00e4 00000000 		.word	0
 6904 00e8 31       		.byte	49
 6905 00e9 000000   		.space	3
 6906 00ec 0D000000 		.word	13
 6907 00f0 2F       		.byte	47
 6908 00f1 000000   		.space	3
 6909 00f4 63000000 		.word	99
 6910 00f8 20       		.byte	32
 6911 00f9 000000   		.space	3
 6912 00fc 03000000 		.word	3
 6913 0100 2F       		.byte	47
 6914 0101 000000   		.space	3
 6915 0104 19000000 		.word	25
 6916 0108 24       		.byte	36
 6917 0109 000000   		.space	3
 6918 010c 03000000 		.word	3
 6919 0110 2F       		.byte	47
 6920 0111 000000   		.space	3
ARM GAS  /tmp/ccGpw0cR.s 			page 172


 6921 0114 08000000 		.word	8
 6922 0118 0D       		.byte	13
 6923 0119 000000   		.space	3
 6924 011c 01000000 		.word	1
 6925 0120 27       		.byte	39
 6926 0121 000000   		.space	3
 6927 0124 03000000 		.word	3
 6928 0128 06       		.byte	6
 6929 0129 000000   		.space	3
 6930 012c 03000000 		.word	3
 6931 0130 2E       		.byte	46
 6932 0131 000000   		.space	3
 6933 0134 00000000 		.word	0
 6934 0138 2E       		.byte	46
 6935 0139 000000   		.space	3
 6936 013c 00000000 		.word	0
 6937 0140 2E       		.byte	46
 6938 0141 000000   		.space	3
 6939 0144 00000000 		.word	0
 6940 0148 2E       		.byte	46
 6941 0149 000000   		.space	3
 6942 014c 00000000 		.word	0
 6943 0150 2E       		.byte	46
 6944 0151 000000   		.space	3
 6945 0154 00000000 		.word	0
 6946 0158 2E       		.byte	46
 6947 0159 000000   		.space	3
 6948 015c 00000000 		.word	0
 6949 0160 2E       		.byte	46
 6950 0161 000000   		.space	3
 6951 0164 00000000 		.word	0
 6952 0168 2F       		.byte	47
 6953 0169 000000   		.space	3
 6954 016c FFFFFFFF 		.word	-1
 6955 0170 2F       		.byte	47
 6956 0171 000000   		.space	3
 6957 0174 05000000 		.word	5
 6958              		.section	.rodata.mapping_gshift.11153,"a"
 6959              		.align	2
 6960              		.set	.LANCHOR17,. + 0
 6963              	mapping_gshift.11153:
 6964 0000 63       		.byte	99
 6965 0001 000000   		.space	3
 6966 0004 FFFFFFFF 		.word	-1
 6967 0008 28       		.byte	40
 6968 0009 000000   		.space	3
 6969 000c 03000000 		.word	3
 6970 0010 16       		.byte	22
 6971 0011 000000   		.space	3
 6972 0014 01000000 		.word	1
 6973 0018 1C       		.byte	28
 6974 0019 000000   		.space	3
 6975 001c 01000000 		.word	1
 6976 0020 13       		.byte	19
 6977 0021 000000   		.space	3
 6978 0024 02000000 		.word	2
 6979 0028 2E       		.byte	46
ARM GAS  /tmp/ccGpw0cR.s 			page 173


 6980 0029 000000   		.space	3
 6981 002c 00000000 		.word	0
 6982 0030 2E       		.byte	46
 6983 0031 000000   		.space	3
 6984 0034 00000000 		.word	0
 6985 0038 2E       		.byte	46
 6986 0039 000000   		.space	3
 6987 003c 00000000 		.word	0
 6988 0040 07       		.byte	7
 6989 0041 000000   		.space	3
 6990 0044 03000000 		.word	3
 6991 0048 08       		.byte	8
 6992 0049 000000   		.space	3
 6993 004c 03000000 		.word	3
 6994 0050 2F       		.byte	47
 6995 0051 000000   		.space	3
 6996 0054 04000000 		.word	4
 6997 0058 2F       		.byte	47
 6998 0059 000000   		.space	3
 6999 005c 04000000 		.word	4
 7000 0060 2F       		.byte	47
 7001 0061 000000   		.space	3
 7002 0064 04000000 		.word	4
 7003 0068 0C       		.byte	12
 7004 0069 000000   		.space	3
 7005 006c 02000000 		.word	2
 7006 0070 2F       		.byte	47
 7007 0071 000000   		.space	3
 7008 0074 06000000 		.word	6
 7009 0078 05       		.byte	5
 7010 0079 000000   		.space	3
 7011 007c 03000000 		.word	3
 7012 0080 2E       		.byte	46
 7013 0081 000000   		.space	3
 7014 0084 00000000 		.word	0
 7015 0088 2E       		.byte	46
 7016 0089 000000   		.space	3
 7017 008c 00000000 		.word	0
 7018 0090 2E       		.byte	46
 7019 0091 000000   		.space	3
 7020 0094 00000000 		.word	0
 7021 0098 2E       		.byte	46
 7022 0099 000000   		.space	3
 7023 009c 00000000 		.word	0
 7024 00a0 2E       		.byte	46
 7025 00a1 000000   		.space	3
 7026 00a4 00000000 		.word	0
 7027 00a8 1B       		.byte	27
 7028 00a9 000000   		.space	3
 7029 00ac 03000000 		.word	3
 7030 00b0 1A       		.byte	26
 7031 00b1 000000   		.space	3
 7032 00b4 03000000 		.word	3
 7033 00b8 2E       		.byte	46
 7034 00b9 000000   		.space	3
 7035 00bc 00000000 		.word	0
 7036 00c0 2E       		.byte	46
ARM GAS  /tmp/ccGpw0cR.s 			page 174


 7037 00c1 000000   		.space	3
 7038 00c4 00000000 		.word	0
 7039 00c8 0C       		.byte	12
 7040 00c9 000000   		.space	3
 7041 00cc 03000000 		.word	3
 7042 00d0 1F       		.byte	31
 7043 00d1 000000   		.space	3
 7044 00d4 03000000 		.word	3
 7045 00d8 19       		.byte	25
 7046 00d9 000000   		.space	3
 7047 00dc 03000000 		.word	3
 7048 00e0 2A       		.byte	42
 7049 00e1 000000   		.space	3
 7050 00e4 FFFFFFFF 		.word	-1
 7051 00e8 2E       		.byte	46
 7052 00e9 000000   		.space	3
 7053 00ec 00000000 		.word	0
 7054 00f0 2F       		.byte	47
 7055 00f1 000000   		.space	3
 7056 00f4 18000000 		.word	24
 7057 00f8 21       		.byte	33
 7058 00f9 000000   		.space	3
 7059 00fc 03000000 		.word	3
 7060 0100 2E       		.byte	46
 7061 0101 000000   		.space	3
 7062 0104 00000000 		.word	0
 7063 0108 24       		.byte	36
 7064 0109 000000   		.space	3
 7065 010c 02000000 		.word	2
 7066 0110 2F       		.byte	47
 7067 0111 000000   		.space	3
 7068 0114 0D000000 		.word	13
 7069 0118 2E       		.byte	46
 7070 0119 000000   		.space	3
 7071 011c 00000000 		.word	0
 7072 0120 2F       		.byte	47
 7073 0121 000000   		.space	3
 7074 0124 07000000 		.word	7
 7075 0128 1E       		.byte	30
 7076 0129 000000   		.space	3
 7077 012c 03000000 		.word	3
 7078 0130 2E       		.byte	46
 7079 0131 000000   		.space	3
 7080 0134 00000000 		.word	0
 7081 0138 2E       		.byte	46
 7082 0139 000000   		.space	3
 7083 013c 00000000 		.word	0
 7084 0140 2E       		.byte	46
 7085 0141 000000   		.space	3
 7086 0144 00000000 		.word	0
 7087 0148 2E       		.byte	46
 7088 0149 000000   		.space	3
 7089 014c 00000000 		.word	0
 7090 0150 2E       		.byte	46
 7091 0151 000000   		.space	3
 7092 0154 00000000 		.word	0
 7093 0158 2E       		.byte	46
ARM GAS  /tmp/ccGpw0cR.s 			page 175


 7094 0159 000000   		.space	3
 7095 015c 00000000 		.word	0
 7096 0160 2E       		.byte	46
 7097 0161 000000   		.space	3
 7098 0164 00000000 		.word	0
 7099 0168 2E       		.byte	46
 7100 0169 000000   		.space	3
 7101 016c 00000000 		.word	0
 7102 0170 2E       		.byte	46
 7103 0171 000000   		.space	3
 7104 0174 00000000 		.word	0
 7105              		.section	.rodata.mapping_none.11151,"a"
 7106              		.align	2
 7107              		.set	.LANCHOR13,. + 0
 7110              	mapping_none.11151:
 7111 0000 63       		.byte	99
 7112 0001 000000   		.space	3
 7113 0004 FFFFFFFF 		.word	-1
 7114 0008 00       		.byte	0
 7115 0009 000000   		.space	3
 7116 000c 00000000 		.word	0
 7117 0010 01       		.byte	1
 7118 0011 000000   		.space	3
 7119 0014 00000000 		.word	0
 7120 0018 03       		.byte	3
 7121 0019 000000   		.space	3
 7122 001c 00000000 		.word	0
 7123 0020 13       		.byte	19
 7124 0021 000000   		.space	3
 7125 0024 02000000 		.word	2
 7126 0028 12       		.byte	18
 7127 0029 000000   		.space	3
 7128 002c 02000000 		.word	2
 7129 0030 12       		.byte	18
 7130 0031 000000   		.space	3
 7131 0034 00000000 		.word	0
 7132 0038 06       		.byte	6
 7133 0039 000000   		.space	3
 7134 003c 00000000 		.word	0
 7135 0040 07       		.byte	7
 7136 0041 000000   		.space	3
 7137 0044 00000000 		.word	0
 7138 0048 08       		.byte	8
 7139 0049 000000   		.space	3
 7140 004c 00000000 		.word	0
 7141 0050 01       		.byte	1
 7142 0051 000000   		.space	3
 7143 0054 01000000 		.word	1
 7144 0058 02       		.byte	2
 7145 0059 000000   		.space	3
 7146 005c 01000000 		.word	1
 7147 0060 03       		.byte	3
 7148 0061 000000   		.space	3
 7149 0064 01000000 		.word	1
 7150 0068 0C       		.byte	12
 7151 0069 000000   		.space	3
 7152 006c 00000000 		.word	0
ARM GAS  /tmp/ccGpw0cR.s 			page 176


 7153 0070 0D       		.byte	13
 7154 0071 000000   		.space	3
 7155 0074 00000000 		.word	0
 7156 0078 0E       		.byte	14
 7157 0079 000000   		.space	3
 7158 007c 00000000 		.word	0
 7159 0080 0F       		.byte	15
 7160 0081 000000   		.space	3
 7161 0084 00000000 		.word	0
 7162 0088 10       		.byte	16
 7163 0089 000000   		.space	3
 7164 008c 00000000 		.word	0
 7165 0090 18       		.byte	24
 7166 0091 000000   		.space	3
 7167 0094 00000000 		.word	0
 7168 0098 13       		.byte	19
 7169 0099 000000   		.space	3
 7170 009c 00000000 		.word	0
 7171 00a0 14       		.byte	20
 7172 00a1 000000   		.space	3
 7173 00a4 00000000 		.word	0
 7174 00a8 15       		.byte	21
 7175 00a9 000000   		.space	3
 7176 00ac 00000000 		.word	0
 7177 00b0 16       		.byte	22
 7178 00b1 000000   		.space	3
 7179 00b4 00000000 		.word	0
 7180 00b8 1E       		.byte	30
 7181 00b9 000000   		.space	3
 7182 00bc 00000000 		.word	0
 7183 00c0 19       		.byte	25
 7184 00c1 000000   		.space	3
 7185 00c4 00000000 		.word	0
 7186 00c8 1A       		.byte	26
 7187 00c9 000000   		.space	3
 7188 00cc 00000000 		.word	0
 7189 00d0 1B       		.byte	27
 7190 00d1 000000   		.space	3
 7191 00d4 00000000 		.word	0
 7192 00d8 1C       		.byte	28
 7193 00d9 000000   		.space	3
 7194 00dc 00000000 		.word	0
 7195 00e0 29       		.byte	41
 7196 00e1 000000   		.space	3
 7197 00e4 00000000 		.word	0
 7198 00e8 1F       		.byte	31
 7199 00e9 000000   		.space	3
 7200 00ec 00000000 		.word	0
 7201 00f0 20       		.byte	32
 7202 00f1 000000   		.space	3
 7203 00f4 00000000 		.word	0
 7204 00f8 21       		.byte	33
 7205 00f9 000000   		.space	3
 7206 00fc 00000000 		.word	0
 7207 0100 22       		.byte	34
 7208 0101 000000   		.space	3
 7209 0104 00000000 		.word	0
ARM GAS  /tmp/ccGpw0cR.s 			page 177


 7210 0108 24       		.byte	36
 7211 0109 000000   		.space	3
 7212 010c 00000000 		.word	0
 7213 0110 25       		.byte	37
 7214 0111 000000   		.space	3
 7215 0114 00000000 		.word	0
 7216 0118 26       		.byte	38
 7217 0119 000000   		.space	3
 7218 011c 00000000 		.word	0
 7219 0120 27       		.byte	39
 7220 0121 000000   		.space	3
 7221 0124 00000000 		.word	0
 7222 0128 28       		.byte	40
 7223 0129 000000   		.space	3
 7224 012c 00000000 		.word	0
 7225 0130 2E       		.byte	46
 7226 0131 000000   		.space	3
 7227 0134 00000000 		.word	0
 7228 0138 2E       		.byte	46
 7229 0139 000000   		.space	3
 7230 013c 00000000 		.word	0
 7231 0140 2E       		.byte	46
 7232 0141 000000   		.space	3
 7233 0144 00000000 		.word	0
 7234 0148 2E       		.byte	46
 7235 0149 000000   		.space	3
 7236 014c 00000000 		.word	0
 7237 0150 2E       		.byte	46
 7238 0151 000000   		.space	3
 7239 0154 00000000 		.word	0
 7240 0158 2E       		.byte	46
 7241 0159 000000   		.space	3
 7242 015c 00000000 		.word	0
 7243 0160 2E       		.byte	46
 7244 0161 000000   		.space	3
 7245 0164 00000000 		.word	0
 7246 0168 2E       		.byte	46
 7247 0169 000000   		.space	3
 7248 016c 00000000 		.word	0
 7249 0170 2E       		.byte	46
 7250 0171 000000   		.space	3
 7251 0174 00000000 		.word	0
 7252              		.section	.rodata.mapping_running.11155,"a"
 7253              		.align	2
 7254              		.set	.LANCHOR12,. + 0
 7257              	mapping_running.11155:
 7258 0000 63       		.byte	99
 7259 0001 000000   		.space	3
 7260 0004 FFFFFFFF 		.word	-1
 7261 0008 00       		.byte	0
 7262 0009 000000   		.space	3
 7263 000c 00000000 		.word	0
 7264 0010 01       		.byte	1
 7265 0011 000000   		.space	3
 7266 0014 00000000 		.word	0
 7267 0018 02       		.byte	2
 7268 0019 000000   		.space	3
ARM GAS  /tmp/ccGpw0cR.s 			page 178


 7269 001c 00000000 		.word	0
 7270 0020 03       		.byte	3
 7271 0021 000000   		.space	3
 7272 0024 00000000 		.word	0
 7273 0028 04       		.byte	4
 7274 0029 000000   		.space	3
 7275 002c 00000000 		.word	0
 7276 0030 12       		.byte	18
 7277 0031 000000   		.space	3
 7278 0034 00000000 		.word	0
 7279 0038 06       		.byte	6
 7280 0039 000000   		.space	3
 7281 003c 00000000 		.word	0
 7282 0040 07       		.byte	7
 7283 0041 000000   		.space	3
 7284 0044 00000000 		.word	0
 7285 0048 08       		.byte	8
 7286 0049 000000   		.space	3
 7287 004c 00000000 		.word	0
 7288 0050 09       		.byte	9
 7289 0051 000000   		.space	3
 7290 0054 00000000 		.word	0
 7291 0058 0A       		.byte	10
 7292 0059 000000   		.space	3
 7293 005c 00000000 		.word	0
 7294 0060 0B       		.byte	11
 7295 0061 000000   		.space	3
 7296 0064 00000000 		.word	0
 7297 0068 0C       		.byte	12
 7298 0069 000000   		.space	3
 7299 006c 00000000 		.word	0
 7300 0070 0D       		.byte	13
 7301 0071 000000   		.space	3
 7302 0074 00000000 		.word	0
 7303 0078 0E       		.byte	14
 7304 0079 000000   		.space	3
 7305 007c 00000000 		.word	0
 7306 0080 0F       		.byte	15
 7307 0081 000000   		.space	3
 7308 0084 00000000 		.word	0
 7309 0088 10       		.byte	16
 7310 0089 000000   		.space	3
 7311 008c 00000000 		.word	0
 7312 0090 18       		.byte	24
 7313 0091 000000   		.space	3
 7314 0094 00000000 		.word	0
 7315 0098 13       		.byte	19
 7316 0099 000000   		.space	3
 7317 009c 00000000 		.word	0
 7318 00a0 14       		.byte	20
 7319 00a1 000000   		.space	3
 7320 00a4 00000000 		.word	0
 7321 00a8 15       		.byte	21
 7322 00a9 000000   		.space	3
 7323 00ac 00000000 		.word	0
 7324 00b0 16       		.byte	22
 7325 00b1 000000   		.space	3
ARM GAS  /tmp/ccGpw0cR.s 			page 179


 7326 00b4 00000000 		.word	0
 7327 00b8 1E       		.byte	30
 7328 00b9 000000   		.space	3
 7329 00bc 00000000 		.word	0
 7330 00c0 19       		.byte	25
 7331 00c1 000000   		.space	3
 7332 00c4 00000000 		.word	0
 7333 00c8 1A       		.byte	26
 7334 00c9 000000   		.space	3
 7335 00cc 00000000 		.word	0
 7336 00d0 1B       		.byte	27
 7337 00d1 000000   		.space	3
 7338 00d4 00000000 		.word	0
 7339 00d8 1C       		.byte	28
 7340 00d9 000000   		.space	3
 7341 00dc 00000000 		.word	0
 7342 00e0 09       		.byte	9
 7343 00e1 000000   		.space	3
 7344 00e4 00000000 		.word	0
 7345 00e8 1F       		.byte	31
 7346 00e9 000000   		.space	3
 7347 00ec 00000000 		.word	0
 7348 00f0 20       		.byte	32
 7349 00f1 000000   		.space	3
 7350 00f4 00000000 		.word	0
 7351 00f8 21       		.byte	33
 7352 00f9 000000   		.space	3
 7353 00fc 00000000 		.word	0
 7354 0100 22       		.byte	34
 7355 0101 000000   		.space	3
 7356 0104 00000000 		.word	0
 7357 0108 24       		.byte	36
 7358 0109 000000   		.space	3
 7359 010c 00000000 		.word	0
 7360 0110 25       		.byte	37
 7361 0111 000000   		.space	3
 7362 0114 00000000 		.word	0
 7363 0118 26       		.byte	38
 7364 0119 000000   		.space	3
 7365 011c 00000000 		.word	0
 7366 0120 27       		.byte	39
 7367 0121 000000   		.space	3
 7368 0124 00000000 		.word	0
 7369 0128 28       		.byte	40
 7370 0129 000000   		.space	3
 7371 012c 00000000 		.word	0
 7372 0130 2E       		.byte	46
 7373 0131 000000   		.space	3
 7374 0134 00000000 		.word	0
 7375 0138 2E       		.byte	46
 7376 0139 000000   		.space	3
 7377 013c 00000000 		.word	0
 7378 0140 2E       		.byte	46
 7379 0141 000000   		.space	3
 7380 0144 00000000 		.word	0
 7381 0148 2E       		.byte	46
 7382 0149 000000   		.space	3
ARM GAS  /tmp/ccGpw0cR.s 			page 180


 7383 014c 00000000 		.word	0
 7384 0150 04       		.byte	4
 7385 0151 000000   		.space	3
 7386 0154 00000000 		.word	0
 7387 0158 05       		.byte	5
 7388 0159 000000   		.space	3
 7389 015c 00000000 		.word	0
 7390 0160 2E       		.byte	46
 7391 0161 000000   		.space	3
 7392 0164 00000000 		.word	0
 7393 0168 2E       		.byte	46
 7394 0169 000000   		.space	3
 7395 016c 00000000 		.word	0
 7396 0170 2E       		.byte	46
 7397 0171 000000   		.space	3
 7398 0174 00000000 		.word	0
 7399              		.section	.rodata.mid_menu,"a"
 7400              		.align	2
 7403              	mid_menu:
 7404 0000 C8C40B00 		.ascii	"\310\304\013\000"
 7405              		.text
 7406              	.Letext0:
 7407              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 7408              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 7409              		.file 6 "/usr/include/newlib/sys/_types.h"
 7410              		.file 7 "/usr/include/newlib/sys/reent.h"
 7411              		.file 8 "/usr/include/newlib/sys/lock.h"
 7412              		.file 9 "/usr/include/newlib/stdlib.h"
 7413              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 7414              		.file 11 "/usr/include/newlib/ctype.h"
 7415              		.file 12 "dmcp/ff_ifc.h"
 7416              		.file 13 "dmcp/dmcp.h"
 7417              		.file 14 "src/keys.h"
 7418              		.file 15 "src/menu.h"
 7419              		.file 16 "src/decNumber/decContext.h"
 7420              		.file 17 "src/decNumber/decNumber.h"
 7421              		.file 18 "src/decNumber/decimal64.h"
 7422              		.file 19 "src/decNumber/decimal128.h"
 7423              		.file 20 "src/xeq.h"
 7424              		.file 21 "src/data.h"
 7425              		.file 22 "src/display.h"
 7426              		.file 23 "src/consts.h"
 7427              		.file 24 "src/storage.h"
 7428              		.file 25 "src/catalogues.h"
 7429              		.file 26 "src/stopwatch.h"
 7430              		.file 27 "src/lcd.h"
 7431              		.file 28 "/usr/include/newlib/string.h"
 7432              		.file 29 "/usr/include/newlib/stdio.h"
 7433              		.file 30 "<built-in>"
ARM GAS  /tmp/ccGpw0cR.s 			page 181


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccGpw0cR.s:18     .rodata.menu_line_str.str1.4:0000000000000000 $d
     /tmp/ccGpw0cR.s:22     .text.menu_line_str:0000000000000000 $t
     /tmp/ccGpw0cR.s:31     .text.menu_line_str:0000000000000000 menu_line_str
     /tmp/ccGpw0cR.s:56     .text.menu_line_str:000000000000000c $d
     /tmp/ccGpw0cR.s:61     .text.set_menu_label.constprop.0:0000000000000000 $t
     /tmp/ccGpw0cR.s:68     .text.set_menu_label.constprop.0:0000000000000000 set_menu_label.constprop.0
     /tmp/ccGpw0cR.s:428    .text.set_menu_label.constprop.0:0000000000000134 $d
     /tmp/ccGpw0cR.s:435    .rodata.disp_about.str1.4:0000000000000000 $d
     /tmp/ccGpw0cR.s:466    .text.disp_about:0000000000000000 $t
     /tmp/ccGpw0cR.s:474    .text.disp_about:0000000000000000 disp_about
     /tmp/ccGpw0cR.s:682    .text.disp_about:00000000000000d4 $d
     /tmp/ccGpw0cR.s:705    .text.run_menu_item:0000000000000000 $t
     /tmp/ccGpw0cR.s:713    .text.run_menu_item:0000000000000000 run_menu_item
     /tmp/ccGpw0cR.s:753    .text.set_menu:0000000000000000 $t
     /tmp/ccGpw0cR.s:761    .text.set_menu:0000000000000000 set_menu
     /tmp/ccGpw0cR.s:816    .text.set_menu:000000000000002c $d
     /tmp/ccGpw0cR.s:823    .text.set_default_menu:0000000000000000 $t
     /tmp/ccGpw0cR.s:831    .text.set_default_menu:0000000000000000 set_default_menu
     /tmp/ccGpw0cR.s:905    .text.set_default_menu:000000000000002c $d
     /tmp/ccGpw0cR.s:914    .text.toggle_default_menu:0000000000000000 $t
     /tmp/ccGpw0cR.s:922    .text.toggle_default_menu:0000000000000000 toggle_default_menu
     /tmp/ccGpw0cR.s:1024   .text.toggle_default_menu:0000000000000044 $d
     /tmp/ccGpw0cR.s:1035   .text.get_menu:0000000000000000 $t
     /tmp/ccGpw0cR.s:1043   .text.get_menu:0000000000000000 get_menu
     /tmp/ccGpw0cR.s:1059   .text.get_menu:0000000000000008 $d
     /tmp/ccGpw0cR.s:1064   .text.get_last_menu:0000000000000000 $t
     /tmp/ccGpw0cR.s:1072   .text.get_last_menu:0000000000000000 get_last_menu
     /tmp/ccGpw0cR.s:1088   .text.get_last_menu:0000000000000008 $d
     /tmp/ccGpw0cR.s:1093   .text.set_last_menu:0000000000000000 $t
     /tmp/ccGpw0cR.s:1101   .text.set_last_menu:0000000000000000 set_last_menu
     /tmp/ccGpw0cR.s:1176   .text.set_last_menu:000000000000002c $d
     /tmp/ccGpw0cR.s:1185   .text.mdot:0000000000000000 $t
     /tmp/ccGpw0cR.s:1193   .text.mdot:0000000000000000 mdot
     /tmp/ccGpw0cR.s:1284   .text.mdot:000000000000003c $d
     /tmp/ccGpw0cR.s:1289   .text.get_current_menu_ref:0000000000000000 $t
     /tmp/ccGpw0cR.s:1297   .text.get_current_menu_ref:0000000000000000 get_current_menu_ref
     /tmp/ccGpw0cR.s:1339   .text.get_current_menu_ref:0000000000000028 $d
     /tmp/ccGpw0cR.s:1443   .text.get_current_menu_ref:000000000000007c $d
     /tmp/ccGpw0cR.s:5025   .rodata.Menus:0000000000000000 Menus
     /tmp/ccGpw0cR.s:1451   .text.display_menu:0000000000000000 $t
     /tmp/ccGpw0cR.s:1459   .text.display_menu:0000000000000000 display_menu
     /tmp/ccGpw0cR.s:1707   .text.display_menu:000000000000010c $d
     /tmp/ccGpw0cR.s:1714   .text.display_current_menu:0000000000000000 $t
     /tmp/ccGpw0cR.s:1722   .text.display_current_menu:0000000000000000 display_current_menu
     /tmp/ccGpw0cR.s:1758   .text.all_menu_dots:0000000000000000 $t
     /tmp/ccGpw0cR.s:1766   .text.all_menu_dots:0000000000000000 all_menu_dots
     /tmp/ccGpw0cR.s:1850   .text.all_menu_dots:0000000000000038 $d
     /tmp/ccGpw0cR.s:1855   .text.umen_store:0000000000000000 $t
     /tmp/ccGpw0cR.s:1863   .text.umen_store:0000000000000000 umen_store
     /tmp/ccGpw0cR.s:1964   .text.umen_store:0000000000000050 $d
     /tmp/ccGpw0cR.s:1969   .text.build_user_menu_from_program:0000000000000000 $t
     /tmp/ccGpw0cR.s:1977   .text.build_user_menu_from_program:0000000000000000 build_user_menu_from_program
     /tmp/ccGpw0cR.s:2388   .text.build_user_menu_from_program:0000000000000180 $d
     /tmp/ccGpw0cR.s:2401   .text.build_user_menu:0000000000000000 $t
     /tmp/ccGpw0cR.s:2409   .text.build_user_menu:0000000000000000 build_user_menu
ARM GAS  /tmp/ccGpw0cR.s 			page 182


     /tmp/ccGpw0cR.s:2425   .text.build_user_menu:0000000000000008 $d
     /tmp/ccGpw0cR.s:2430   .text.shutdown:0000000000000000 $t
     /tmp/ccGpw0cR.s:2438   .text.shutdown:0000000000000000 shutdown
     /tmp/ccGpw0cR.s:2456   .text.shutdown:000000000000000c $d
     /tmp/ccGpw0cR.s:2461   .text.is_key_pressed:0000000000000000 $t
     /tmp/ccGpw0cR.s:2469   .text.is_key_pressed:0000000000000000 is_key_pressed
     /tmp/ccGpw0cR.s:2492   .text.is_key_pressed:0000000000000010 $d
     /tmp/ccGpw0cR.s:2497   .text.get_key:0000000000000000 $t
     /tmp/ccGpw0cR.s:2505   .text.get_key:0000000000000000 get_key
     /tmp/ccGpw0cR.s:2520   .text.get_key:0000000000000004 $d
     /tmp/ccGpw0cR.s:2525   .text.put_key:0000000000000000 $t
     /tmp/ccGpw0cR.s:2533   .text.put_key:0000000000000000 put_key
     /tmp/ccGpw0cR.s:2612   .text.put_key:000000000000003c $d
     /tmp/ccGpw0cR.s:2618   .text.shift_down:0000000000000000 $t
     /tmp/ccGpw0cR.s:2626   .text.shift_down:0000000000000000 shift_down
     /tmp/ccGpw0cR.s:2641   .text.start_key_timer:0000000000000000 $t
     /tmp/ccGpw0cR.s:2649   .text.start_key_timer:0000000000000000 start_key_timer
     /tmp/ccGpw0cR.s:2673   .text.start_key_timer:000000000000000c $d
     /tmp/ccGpw0cR.s:2679   .text.keyticks:0000000000000000 $t
     /tmp/ccGpw0cR.s:2687   .text.keyticks:0000000000000000 keyticks
     /tmp/ccGpw0cR.s:2718   .text.keyticks:0000000000000018 $d
     /tmp/ccGpw0cR.s:2724   .text.moveto:0000000000000000 $t
     /tmp/ccGpw0cR.s:2732   .text.moveto:0000000000000000 moveto
     /tmp/ccGpw0cR.s:2792   .text.moveto:000000000000002c $d
     /tmp/ccGpw0cR.s:2799   .rodata.print_debug.str1.4:0000000000000000 $d
     /tmp/ccGpw0cR.s:2803   .text.print_debug:0000000000000000 $t
     /tmp/ccGpw0cR.s:2811   .text.print_debug:0000000000000000 print_debug
     /tmp/ccGpw0cR.s:2913   .text.print_debug:0000000000000064 $d
                            *COM*:0000000000000016 print_string
     /tmp/ccGpw0cR.s:2924   .rodata.print_debug2.str1.4:0000000000000000 $d
     /tmp/ccGpw0cR.s:2928   .text.print_debug2:0000000000000000 $t
     /tmp/ccGpw0cR.s:2936   .text.print_debug2:0000000000000000 print_debug2
     /tmp/ccGpw0cR.s:3038   .text.print_debug2:0000000000000064 $d
     /tmp/ccGpw0cR.s:3049   .text.do_now:0000000000000000 $t
     /tmp/ccGpw0cR.s:3057   .text.do_now:0000000000000000 do_now
     /tmp/ccGpw0cR.s:3092   .rodata.do_multi.str1.4:0000000000000000 $d
     /tmp/ccGpw0cR.s:3096   .text.do_multi:0000000000000000 $t
     /tmp/ccGpw0cR.s:3104   .text.do_multi:0000000000000000 do_multi
     /tmp/ccGpw0cR.s:3134   .text.do_multi:0000000000000016 $d
     /tmp/ccGpw0cR.s:3148   .text.do_multi:0000000000000024 $t
     /tmp/ccGpw0cR.s:3566   .text.do_multi:00000000000001c0 $d
     /tmp/ccGpw0cR.s:3580   .text.program_main:0000000000000000 $t
     /tmp/ccGpw0cR.s:3588   .text.program_main:0000000000000000 program_main
     /tmp/ccGpw0cR.s:3857   .text.program_main:0000000000000120 $d
     /tmp/ccGpw0cR.s:3863   .text.program_main:000000000000012c $t
     /tmp/ccGpw0cR.s:4135   .text.program_main:0000000000000268 $d
     /tmp/ccGpw0cR.s:4181   .text.program_main:00000000000002e0 $t
     /tmp/ccGpw0cR.s:4765   .text.program_main:0000000000000594 $d
     /tmp/ccGpw0cR.s:4860   .bss.n_p:0000000000000000 n_p
     /tmp/ccGpw0cR.s:5009   .data.spaces:0000000000000000 spaces
     /tmp/ccGpw0cR.s:5000   .data.release:0000000000000000 release
     /tmp/ccGpw0cR.s:4973   .data.h_shift:0000000000000000 h_shift
     /tmp/ccGpw0cR.s:4964   .data.g_shift:0000000000000000 g_shift
     /tmp/ccGpw0cR.s:4956   .data.f_shift:0000000000000000 f_shift
     /tmp/ccGpw0cR.s:4982   .data.heartbeat:0000000000000000 heartbeat
     /tmp/ccGpw0cR.s:4991   .data.no_key:0000000000000000 no_key
     /tmp/ccGpw0cR.s:5016   .rodata.MID_MENU:0000000000000000 MID_MENU
ARM GAS  /tmp/ccGpw0cR.s 			page 183


     /tmp/ccGpw0cR.s:4800   .rodata.str1.4:0000000000000000 $d
     /tmp/ccGpw0cR.s:7403   .rodata.mid_menu:0000000000000000 mid_menu
     /tmp/ccGpw0cR.s:4841   .bss.default_menu:0000000000000000 default_menu
     /tmp/ccGpw0cR.s:4847   .bss.last_menu:0000000000000000 last_menu
     /tmp/ccGpw0cR.s:4835   .bss.current_menu:0000000000000000 current_menu
     /tmp/ccGpw0cR.s:4950   .data.cmplx_key_string:0000000000000000 cmplx_key_string
     /tmp/ccGpw0cR.s:4943   .data.arrow_key_string:0000000000000000 arrow_key_string
     /tmp/ccGpw0cR.s:4874   .data.UserMenu:0000000000000000 UserMenu
     /tmp/ccGpw0cR.s:4817   .rodata:0000000000000000 $d
     /tmp/ccGpw0cR.s:4836   .bss.current_menu:0000000000000000 $d
     /tmp/ccGpw0cR.s:4842   .bss.default_menu:0000000000000000 $d
     /tmp/ccGpw0cR.s:4848   .bss.last_menu:0000000000000000 $d
     /tmp/ccGpw0cR.s:4850   .bss.mdots:0000000000000000 $d
     /tmp/ccGpw0cR.s:4854   .bss.mdots:0000000000000000 mdots
     /tmp/ccGpw0cR.s:4857   .bss.n_p:0000000000000000 $d
     /tmp/ccGpw0cR.s:4863   .bss.start_ticks:0000000000000000 $d
     /tmp/ccGpw0cR.s:4867   .bss.start_ticks:0000000000000000 start_ticks
     /tmp/ccGpw0cR.s:4870   .data.UserMenu:0000000000000000 $d
     /tmp/ccGpw0cR.s:4939   .data.arrow_key_string:0000000000000000 $d
     /tmp/ccGpw0cR.s:4946   .data.cmplx_key_string:0000000000000000 $d
     /tmp/ccGpw0cR.s:4953   .data.f_shift:0000000000000000 $d
     /tmp/ccGpw0cR.s:4961   .data.g_shift:0000000000000000 $d
     /tmp/ccGpw0cR.s:4969   .data.h_shift:0000000000000000 $d
     /tmp/ccGpw0cR.s:4978   .data.heartbeat:0000000000000000 $d
     /tmp/ccGpw0cR.s:4987   .data.no_key:0000000000000000 $d
     /tmp/ccGpw0cR.s:4996   .data.release:0000000000000000 $d
     /tmp/ccGpw0cR.s:5005   .data.spaces:0000000000000000 $d
     /tmp/ccGpw0cR.s:5012   .rodata.MID_MENU:0000000000000000 $d
     /tmp/ccGpw0cR.s:5022   .rodata.Menus:0000000000000000 $d
     /tmp/ccGpw0cR.s:6665   .rodata.mapping_alpha.11154:0000000000000000 $d
     /tmp/ccGpw0cR.s:6669   .rodata.mapping_alpha.11154:0000000000000000 mapping_alpha.11154
     /tmp/ccGpw0cR.s:6812   .rodata.mapping_fshift.11152:0000000000000000 $d
     /tmp/ccGpw0cR.s:6816   .rodata.mapping_fshift.11152:0000000000000000 mapping_fshift.11152
     /tmp/ccGpw0cR.s:6959   .rodata.mapping_gshift.11153:0000000000000000 $d
     /tmp/ccGpw0cR.s:6963   .rodata.mapping_gshift.11153:0000000000000000 mapping_gshift.11153
     /tmp/ccGpw0cR.s:7106   .rodata.mapping_none.11151:0000000000000000 $d
     /tmp/ccGpw0cR.s:7110   .rodata.mapping_none.11151:0000000000000000 mapping_none.11151
     /tmp/ccGpw0cR.s:7253   .rodata.mapping_running.11155:0000000000000000 $d
     /tmp/ccGpw0cR.s:7257   .rodata.mapping_running.11155:0000000000000000 mapping_running.11155
     /tmp/ccGpw0cR.s:7400   .rodata.mid_menu:0000000000000000 $d
     /tmp/ccGpw0cR.s:1354   .text.get_current_menu_ref:0000000000000037 $d
     /tmp/ccGpw0cR.s:1354   .text.get_current_menu_ref:0000000000000038 $t

UNDEFINED SYMBOLS
charlengths
findlengths
unpackchar
RectPolConv
xcopy
clear_disp
SvnRevision
memcpy
main_ram
pixel_length
strncpy
findmultilbl
do_inc
ARM GAS  /tmp/ccGpw0cR.s 			page 184


getprog
prt_umen
catcmd
strcpy
sprintf
process_keycode_with_shift
reset_shift
flash_backup
flash_restore
save_lib_file
load_lib_file
save_ram_file
load_ram_file
load_prog_file
save_prog_file
do_all_dots
init_mem
init_RegionTab
init_34s
check_create_wp34sdir
load_backup_file
display
cur_shift
StateWhileOn
DispMsg
KeyCallback
JustDisplayed
Pause
Running
DM42_Ticker
is_dot
dot
get_alpha_state
StopWatchStatus
JustStopped

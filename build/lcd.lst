ARM GAS  /tmp/ccctyiBz.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"lcd.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.draw_BEG.part.0.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC0:
  20 0000 533A3400 		.ascii	"S:4\000"
  21              		.section	.text.draw_BEG.part.0,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.arch armv7e-m
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  28              		.fpu fpv4-sp-d16
  30              	draw_BEG.part.0:
  31              	.LFB38:
  32              		.file 1 "src/lcd.c"
   1:src/lcd.c     **** /* This file is part of 34S.
   2:src/lcd.c     ****  * 
   3:src/lcd.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/lcd.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/lcd.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/lcd.c     ****  * (at your option) any later version.
   7:src/lcd.c     ****  * 
   8:src/lcd.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/lcd.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/lcd.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/lcd.c     ****  * GNU General Public License for more details.
  12:src/lcd.c     ****  * 
  13:src/lcd.c     ****  * You should have received a copy of the GNU General Public License
  14:src/lcd.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/lcd.c     ****  */
  16:src/lcd.c     **** 
  17:src/lcd.c     **** #ifdef DM42
  18:src/lcd.c     **** #include "dmcp.h"
  19:src/lcd.c     **** #endif
  20:src/lcd.c     **** 
  21:src/lcd.c     **** #define DM42SAFE
  22:src/lcd.c     **** #include "lcd.h"
  23:src/lcd.c     **** #include "display.h"
  24:src/lcd.c     **** #include "xeq.h"
  25:src/lcd.c     **** 
  26:src/lcd.c     **** #if defined(INCLUDE_C_LOCK) || defined(INFRARED)
ARM GAS  /tmp/ccctyiBz.s 			page 2


  27:src/lcd.c     **** #include "data.h"
  28:src/lcd.c     **** #include "storage.h"
  29:src/lcd.c     **** #endif
  30:src/lcd.c     **** 
  31:src/lcd.c     **** #undef DM42SAFE
  32:src/lcd.c     **** 
  33:src/lcd.c     **** #include "pretty.h"
  34:src/lcd.c     **** 
  35:src/lcd.c     **** 
  36:src/lcd.c     **** static unsigned char dots[TOP_DOTS];
  37:src/lcd.c     **** /*
  38:src/lcd.c     ****  * bit 1 of each char represents what's in the display buffer;
  39:src/lcd.c     ****  * bit 0 is zeroed at the start of display() by the reset functions.
  40:src/lcd.c     ****  * set_dot and clr_dot look at bit 1 to decide whether to draw / erase / leave
  41:src/lcd.c     ****  * At the end of display(), "10" means that something is drawn which hasn't been
  42:src/lcd.c     ****  * set by display(). finish_display looks for this, and erases such dots.
  43:src/lcd.c     ****  */ 
  44:src/lcd.c     **** 
  45:src/lcd.c     **** /* Some wrapper routines to set segments of the display */
  46:src/lcd.c     **** void set_dot(int n) {
  47:src/lcd.c     ****   dots[n] |= 1;
  48:src/lcd.c     ****   if (dots[n]&2) return;
  49:src/lcd.c     ****   draw_dot(n);
  50:src/lcd.c     ****   dots[n] = 3; // 11;
  51:src/lcd.c     **** }
  52:src/lcd.c     **** void clr_dot(int n) {
  53:src/lcd.c     ****   dots[n] &= ~1;
  54:src/lcd.c     ****   if ( !(dots[n]&2)) return;
  55:src/lcd.c     ****   draw_dot(n);
  56:src/lcd.c     ****   dots[n] = 0; 
  57:src/lcd.c     **** }
  58:src/lcd.c     **** 
  59:src/lcd.c     **** int is_dot(int n) {
  60:src/lcd.c     **** 	return dots[n]&1;
  61:src/lcd.c     **** }
  62:src/lcd.c     **** 
  63:src/lcd.c     **** void clear_disp(void) {
  64:src/lcd.c     ****       for (int i=0; i<TOP_DOTS; i++)
  65:src/lcd.c     **** 	dots[i] = 0;
  66:src/lcd.c     ****       lcd_clear_buf();
  67:src/lcd.c     **** }
  68:src/lcd.c     ****   
  69:src/lcd.c     **** void reset_disp(void) {
  70:src/lcd.c     ****   clr_dot(STO_annun); // gets turned back on if needed;
  71:src/lcd.c     ****   int rcl = is_dot(RCL_annun);
  72:src/lcd.c     ****   int bat = is_dot(BATTERY);
  73:src/lcd.c     ****   int leq = is_dot(LIT_EQ);
  74:src/lcd.c     ****   int rpn = is_dot(RPN);
  75:src/lcd.c     ****   int i;
  76:src/lcd.c     ****   for (i=0; i<TOP_DOTS; i++)
  77:src/lcd.c     ****     dots[i] <<= 1;
  78:src/lcd.c     ****   dot(RCL_annun, rcl);
  79:src/lcd.c     ****   dot(BATTERY, bat);
  80:src/lcd.c     ****   dot(LIT_EQ, leq);
  81:src/lcd.c     ****   dot(RPN, rpn);
  82:src/lcd.c     **** }
  83:src/lcd.c     **** 
ARM GAS  /tmp/ccctyiBz.s 			page 3


  84:src/lcd.c     **** void reset_7_segment(void) {
  85:src/lcd.c     ****   for (int i = 0; i <= EXP_SIGN; ++i) {
  86:src/lcd.c     ****     dots[i] <<= 1;
  87:src/lcd.c     ****   }
  88:src/lcd.c     **** }
  89:src/lcd.c     **** 
  90:src/lcd.c     **** 
  91:src/lcd.c     **** void left_side (int i, int j, int col) { // i - xleft reference; j - ytop reference; col - colour
  92:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, col);
  93:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
  94:src/lcd.c     ****   lcd_fill_rect (i+4, j+2, 1, 17, col);
  95:src/lcd.c     ****   lcd_fill_rect (i+5, j+3, 1, 15, col);
  96:src/lcd.c     ****   lcd_fill_rect (i+6, j+4, 1, 7, col);
  97:src/lcd.c     **** }
  98:src/lcd.c     **** void left_side_top (int i, int j, int col) {
  99:src/lcd.c     ****   left_side(i, j, col);
 100:src/lcd.c     **** }
 101:src/lcd.c     **** void left_side_bottom (int i, int j, int col) {
 102:src/lcd.c     ****   left_side(i-2, j+19, col);
 103:src/lcd.c     **** }
 104:src/lcd.c     **** void right_side (int i, int j, int col) {
 105:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, col);
 106:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 107:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, col);
 108:src/lcd.c     ****   lcd_fill_rect (i+19, j+2, 1, 18, col);
 109:src/lcd.c     ****   lcd_fill_rect (i+20, j+2, 1, 9, col);
 110:src/lcd.c     **** }
 111:src/lcd.c     **** void right_side_top (int i, int j, int col) {
 112:src/lcd.c     ****   right_side(i, j, col);
 113:src/lcd.c     **** }
 114:src/lcd.c     **** void right_side_bottom (int i, int j, int col) {
 115:src/lcd.c     ****   right_side(i-2, j+19, col);
 116:src/lcd.c     **** }
 117:src/lcd.c     **** void top (int i, int j, int col) {
 118:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, col );
 119:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 120:src/lcd.c     ****   lcd_fill_rect ( i+6, j+2, 12, 1, col );
 121:src/lcd.c     ****   lcd_fill_rect ( i+7, j+3, 10, 1, col );
 122:src/lcd.c     **** }
 123:src/lcd.c     **** void middle (int i, int j, int col) {
 124:src/lcd.c     ****   lcd_fill_rect ( i+5, j+21, 11, 1, col );
 125:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 126:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 1, col );
 127:src/lcd.c     **** }
 128:src/lcd.c     **** void bottom (int i, int j, int col) {
 129:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, col );
 130:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 131:src/lcd.c     ****   lcd_fill_rect ( i+3, j+38, 12, 1, col );
 132:src/lcd.c     ****   lcd_fill_rect ( i+4, j+37, 10, 1, col );
 133:src/lcd.c     **** }
 134:src/lcd.c     **** void decimal (int i, int j, int col) {
 135:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, col);
 136:src/lcd.c     **** }
 137:src/lcd.c     **** void comma (int i, int j, int col) {
 138:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, col);
 139:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 140:src/lcd.c     **** }
ARM GAS  /tmp/ccctyiBz.s 			page 4


 141:src/lcd.c     **** 
 142:src/lcd.c     **** void exp_left_side (int i, int j, int col) {
 143:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, col );
 144:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 145:src/lcd.c     ****   lcd_fill_rect (i+2, j+1, 1, 9, col );
 146:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 4, col );
 147:src/lcd.c     **** }
 148:src/lcd.c     **** void exp_left_side_top (int i, int j, int col) {
 149:src/lcd.c     ****   exp_left_side(i+1, j, col);
 150:src/lcd.c     **** }
 151:src/lcd.c     **** void exp_left_side_bottom (int i, int j, int col) {
 152:src/lcd.c     ****   exp_left_side(i, j+11, col);
 153:src/lcd.c     **** }
 154:src/lcd.c     **** void exp_right_side (int i, int j, int col) {
 155:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, col );
 156:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 157:src/lcd.c     ****   lcd_fill_rect (i+10, j+2, 1, 9, col );
 158:src/lcd.c     ****   lcd_fill_rect (i+9, j+6, 1, 4, col );
 159:src/lcd.c     **** }
 160:src/lcd.c     **** void exp_right_side_top (int i, int j, int col) {
 161:src/lcd.c     ****   exp_right_side(i, j, col);
 162:src/lcd.c     **** }
 163:src/lcd.c     **** void exp_right_side_bottom (int i, int j, int col) {
 164:src/lcd.c     ****   exp_right_side(i-1, j+11, col);
 165:src/lcd.c     **** }
 166:src/lcd.c     **** void exp_top (int i, int j, int col) {
 167:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, col );
 168:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 169:src/lcd.c     ****   lcd_fill_rect (i+6, j+2, 3, 1, col );
 170:src/lcd.c     **** }
 171:src/lcd.c     **** void exp_bottom (int i, int j, int col) {
 172:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, col );
 173:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 174:src/lcd.c     ****   lcd_fill_rect (i+4, j+20, 3, 1, col );
 175:src/lcd.c     **** }
 176:src/lcd.c     **** void exp_middle (int i, int j, int col) {
 177:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, col );
 178:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 179:src/lcd.c     ****   lcd_fill_rect (i+4, j+12, 5, 1, col );
 180:src/lcd.c     **** }
 181:src/lcd.c     **** 
 182:src/lcd.c     **** void draw_dot (int n) {
 183:src/lcd.c     ****   int x, col = 0, inverse = 1;
 184:src/lcd.c     ****   if (dots[n] & 1) {
 185:src/lcd.c     ****     col = 0xff;
 186:src/lcd.c     ****     inverse = 0;
 187:src/lcd.c     ****   }
 188:src/lcd.c     ****   
 189:src/lcd.c     ****   if (n <= 107) {
 190:src/lcd.c     ****     x = XLEFT + DWIDTH*(n/9);
 191:src/lcd.c     ****     switch (n % 9) {  
 192:src/lcd.c     ****     case 0:
 193:src/lcd.c     ****       top (x, YTOP, col);
 194:src/lcd.c     ****       return;
 195:src/lcd.c     ****     case 1:
 196:src/lcd.c     ****       left_side_top (x, YTOP, col);
 197:src/lcd.c     ****       return;
ARM GAS  /tmp/ccctyiBz.s 			page 5


 198:src/lcd.c     ****     case 2:
 199:src/lcd.c     ****       middle (x, YTOP, col);
 200:src/lcd.c     ****       return;
 201:src/lcd.c     ****     case 3:
 202:src/lcd.c     ****       right_side_top (x, YTOP, col);
 203:src/lcd.c     ****       return;
 204:src/lcd.c     ****     case 4:
 205:src/lcd.c     ****       left_side_bottom (x, YTOP, col);
 206:src/lcd.c     ****       return;
 207:src/lcd.c     ****     case 5:
 208:src/lcd.c     ****       bottom (x, YTOP, col);
 209:src/lcd.c     ****       return;
 210:src/lcd.c     ****     case 6:
 211:src/lcd.c     ****       right_side_bottom (x, YTOP, col);
 212:src/lcd.c     ****       return;
 213:src/lcd.c     ****     case 7:
 214:src/lcd.c     ****       decimal (x, YTOP, col);
 215:src/lcd.c     ****       return;
 216:src/lcd.c     ****     case 8:
 217:src/lcd.c     ****       comma (x, YTOP, col);
 218:src/lcd.c     ****       return;
 219:src/lcd.c     ****     default:;
 220:src/lcd.c     ****     }
 221:src/lcd.c     ****   }
 222:src/lcd.c     ****   else if (n <= 128) { // exponent digits
 223:src/lcd.c     ****     x = XLEFT_EXP + DWIDTH_EXP*((n-108)/7);
 224:src/lcd.c     ****     switch ((n-108) % 7) {
 225:src/lcd.c     ****     case 0:
 226:src/lcd.c     ****       exp_top (x, YTOP_EXP, col);
 227:src/lcd.c     ****       return;
 228:src/lcd.c     ****     case 1:
 229:src/lcd.c     ****       exp_left_side_top (x, YTOP_EXP, col);
 230:src/lcd.c     ****       return;
 231:src/lcd.c     ****     case 2:
 232:src/lcd.c     ****       exp_middle (x, YTOP_EXP, col);
 233:src/lcd.c     ****       return;
 234:src/lcd.c     ****     case 3:
 235:src/lcd.c     ****       exp_right_side_top (x, YTOP_EXP, col);
 236:src/lcd.c     ****       return;
 237:src/lcd.c     ****     case 4:
 238:src/lcd.c     ****       exp_left_side_bottom (x, YTOP_EXP, col);
 239:src/lcd.c     ****       return;
 240:src/lcd.c     ****     case 5:
 241:src/lcd.c     ****       exp_bottom (x, YTOP_EXP, col);
 242:src/lcd.c     ****       return;
 243:src/lcd.c     ****     case 6:
 244:src/lcd.c     ****       exp_right_side_bottom (x, YTOP_EXP, col);
 245:src/lcd.c     ****       return;
 246:src/lcd.c     ****     default:;
 247:src/lcd.c     ****     }
 248:src/lcd.c     ****   }
 249:src/lcd.c     ****   else if (n <= 141) {
 250:src/lcd.c     ****     switch (n) {
 251:src/lcd.c     ****     case MANT_SIGN:
 252:src/lcd.c     ****       middle (XLEFT - DWIDTH, YTOP, col);
 253:src/lcd.c     ****       return;
 254:src/lcd.c     ****     case EXP_SIGN:
ARM GAS  /tmp/ccctyiBz.s 			page 6


 255:src/lcd.c     ****       exp_middle (XLEFT_EXP-DWIDTH_EXP, YTOP, col);
 256:src/lcd.c     ****       return;
 257:src/lcd.c     ****     case BIG_EQ:
 258:src/lcd.c     ****       lcd_fill_rect (250, Y_ANNUNC-34, 15, 4, col);
 259:src/lcd.c     ****       lcd_fill_rect (250, Y_ANNUNC-24, 15, 4, col);
 260:src/lcd.c     ****       return;
 261:src/lcd.c     ****     case LIT_EQ:
 262:src/lcd.c     ****       draw_LEQ();
 263:src/lcd.c     ****       return;
 264:src/lcd.c     ****     case DOWN_ARR:
 265:src/lcd.c     ****       lcd_fill_rect(287,Y_ANNUNC-67,5,12,col);
 266:src/lcd.c     ****       lcd_fill_rect(285,Y_ANNUNC-55,9,1,col);
 267:src/lcd.c     ****       lcd_fill_rect(286,Y_ANNUNC-54,7,1,col);
 268:src/lcd.c     ****       lcd_fill_rect(287,Y_ANNUNC-53,5,1,col);
 269:src/lcd.c     ****       lcd_fill_rect(288,Y_ANNUNC-52,3,1,col);
 270:src/lcd.c     ****       lcd_fill_rect(289,Y_ANNUNC-51,1,1,col);
 271:src/lcd.c     ****       return;
 272:src/lcd.c     ****     case INPUT:
 273:src/lcd.c     ****       t20->inv = inverse;
 274:src/lcd.c     ****       lcd_setXY(t20, 305, Y_ANNUNC-70);
 275:src/lcd.c     ****       lcd_writeText(t20,"ALPHA");
 276:src/lcd.c     ****       return;
 277:src/lcd.c     ****     case BATTERY:
 278:src/lcd.c     ****       return;
 279:src/lcd.c     ****     case BEG:
 280:src/lcd.c     **** #ifdef MODIFY_BEG_SSIZE8
 281:src/lcd.c     ****       {
 282:src/lcd.c     **** 	int d = UState.stack_depth;
 283:src/lcd.c     **** 	if (!(dots[BEG] & 8)) { // test bit 3;
 284:src/lcd.c     **** 	  if (d) {
 285:src/lcd.c     **** 	    draw_BEG(8, 0);
 286:src/lcd.c     **** 	    dots[BEG] = 7; // 0111
 287:src/lcd.c     **** 	  }
 288:src/lcd.c     **** 	  else {
 289:src/lcd.c     **** 	    draw_BEG(4, 0);
 290:src/lcd.c     **** 	    dots[BEG] = 4; // 0100
 291:src/lcd.c     **** 	  }
 292:src/lcd.c     **** 	}
 293:src/lcd.c     **** 	else if (d == (dots[BEG] & 2)) { // no drawing needed
 294:src/lcd.c     **** 	  if (d) {
 295:src/lcd.c     **** 	    dots[BEG] = 7;
 296:src/lcd.c     **** 	  }
 297:src/lcd.c     **** 	  else {
 298:src/lcd.c     **** 	    dots[BEG] = 4;
 299:src/lcd.c     **** 	  }
 300:src/lcd.c     **** 	}
 301:src/lcd.c     **** 	else {
 302:src/lcd.c     **** 	  if (d) { // changing S:4 to S:8
 303:src/lcd.c     **** 	    draw_BEG(4, 1);
 304:src/lcd.c     **** 	    draw_BEG(8, 0);
 305:src/lcd.c     **** 	    dots[BEG] = 7;
 306:src/lcd.c     **** 	  }
 307:src/lcd.c     **** 	  else {
 308:src/lcd.c     **** 	    draw_BEG(8, 1);
 309:src/lcd.c     **** 	    draw_BEG(4, 0);
 310:src/lcd.c     **** 	    dots[BEG] = 4;
 311:src/lcd.c     **** 	  }
ARM GAS  /tmp/ccctyiBz.s 			page 7


 312:src/lcd.c     **** 	}
 313:src/lcd.c     ****       }
 314:src/lcd.c     **** #else
 315:src/lcd.c     ****       t20->inv = inverse;
 316:src/lcd.c     ****       lcd_setXY (t20, 285, y_ann-50);
 317:src/lcd.c     ****       lcd_writeText(t20, "BEG");
 318:src/lcd.c     **** #endif
 319:src/lcd.c     ****       return;
 320:src/lcd.c     ****     case STO_annun:
 321:src/lcd.c     ****       t20->inv = inverse;
 322:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-50);
 323:src/lcd.c     ****       lcd_writeText(t20, "PGM");
 324:src/lcd.c     ****       return;
 325:src/lcd.c     ****     case RCL_annun:
 326:src/lcd.c     ****       draw_RCL(inverse);
 327:src/lcd.c     ****     case RAD:
 328:src/lcd.c     ****       t20->inv = inverse;
 329:src/lcd.c     ****       lcd_setXY (t20, 285, Y_ANNUNC-30);
 330:src/lcd.c     ****       lcd_writeText(t20, "RAD");
 331:src/lcd.c     ****       return;
 332:src/lcd.c     ****     case DEG:
 333:src/lcd.c     ****       t20->inv = inverse;
 334:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-30);
 335:src/lcd.c     ****       lcd_writeText(t20, "DEG");
 336:src/lcd.c     ****       return;
 337:src/lcd.c     ****     case RPN:
 338:src/lcd.c     ****       draw_RPN(inverse);
 339:src/lcd.c     ****       return;
 340:src/lcd.c     ****     default:;
 341:src/lcd.c     ****     }
 342:src/lcd.c     ****   }
 343:src/lcd.c     ****   else if (n < MAX_DOTS) { // column = (n-142)/6; row = (n-142) % 6
 344:src/lcd.c     ****     lcd_fill_rect ( XLEFT-DWIDTH+5*((n-142)/6)+15, YTOP-(10+6*6)+((n-142)%6)*6, 4, 5, col);
 345:src/lcd.c     ****     return;
 346:src/lcd.c     ****   }
 347:src/lcd.c     ****   else if (n < TOP_DOTS) { // column = (n-MAX_DOTS)/6; row = ((n-MAX_DOTS)%6)
 348:src/lcd.c     ****     lcd_fill_rect( XLEFT-DWIDTH+5*((n-MAX_DOTS)/6)+15, 70-(10+6*5)+((n-MAX_DOTS)%6)*5, 4, 4, col);
 349:src/lcd.c     ****     return;
 350:src/lcd.c     ****   }
 351:src/lcd.c     **** }
 352:src/lcd.c     **** 
 353:src/lcd.c     **** void draw_BEG (int depth, int inverse) {
  33              		.loc 1 353 6 view -0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 0
  36              		@ frame_needed = 0, uses_anonymous_args = 0
  37              		@ link register save eliminated.
  38              	.LVL0:
 354:src/lcd.c     ****   t20->inv = inverse;
 355:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 356:src/lcd.c     ****   if (depth == 4) {
 357:src/lcd.c     ****     lcd_writeText(t20, "S:4");
  39              		.loc 1 357 5 view .LVU1
  40 0000 024A     		ldr	r2, .L3
  41 0002 034B     		ldr	r3, .L3+4
  42 0004 106B     		ldr	r0, [r2, #48]
  43 0006 0349     		ldr	r1, .L3+8
ARM GAS  /tmp/ccctyiBz.s 			page 8


  44 0008 1847     		bx	r3	@ indirect register sibling call
  45              	.LVL1:
  46              	.L4:
  47 000a 00BF     		.align	2
  48              	.L3:
  49 000c 00200010 		.word	268443648
  50 0010 7D020008 		.word	134218365
  51 0014 00000000 		.word	.LC0
  52              		.cfi_endproc
  53              	.LFE38:
  55              		.section	.text.is_dot,"ax",%progbits
  56              		.align	1
  57              		.p2align 2,,3
  58              		.global	is_dot
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu fpv4-sp-d16
  64              	is_dot:
  65              	.LVL2:
  66              	.LFB2:
  59:src/lcd.c     **** 	return dots[n]&1;
  67              		.loc 1 59 19 view -0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  60:src/lcd.c     **** }
  72              		.loc 1 60 2 view .LVU3
  60:src/lcd.c     **** }
  73              		.loc 1 60 13 is_stmt 0 view .LVU4
  74 0000 024B     		ldr	r3, .L6
  60:src/lcd.c     **** }
  75              		.loc 1 60 16 view .LVU5
  76 0002 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
  77              	.LVL3:
  61:src/lcd.c     **** 
  78              		.loc 1 61 1 view .LVU6
  79 0004 00F00100 		and	r0, r0, #1
  80 0008 7047     		bx	lr
  81              	.L7:
  82 000a 00BF     		.align	2
  83              	.L6:
  84 000c 00000000 		.word	.LANCHOR0
  85              		.cfi_endproc
  86              	.LFE2:
  88              		.section	.text.clear_disp,"ax",%progbits
  89              		.align	1
  90              		.p2align 2,,3
  91              		.global	clear_disp
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu fpv4-sp-d16
  97              	clear_disp:
  98              	.LFB3:
  63:src/lcd.c     ****       for (int i=0; i<TOP_DOTS; i++)
ARM GAS  /tmp/ccctyiBz.s 			page 9


  99              		.loc 1 63 23 is_stmt 1 view -0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
  64:src/lcd.c     **** 	dots[i] = 0;
 104              		.loc 1 64 7 view .LVU8
 105              	.LBB54:
  64:src/lcd.c     **** 	dots[i] = 0;
 106              		.loc 1 64 12 view .LVU9
 107              	.LVL4:
  64:src/lcd.c     **** 	dots[i] = 0;
 108              		.loc 1 64 21 view .LVU10
 109 0000 044B     		ldr	r3, .L11
  65:src/lcd.c     ****       lcd_clear_buf();
 110              		.loc 1 65 10 is_stmt 0 view .LVU11
 111 0002 0021     		movs	r1, #0
 112 0004 03F5C872 		add	r2, r3, #400
 113              	.LVL5:
 114              	.L9:
  65:src/lcd.c     ****       lcd_clear_buf();
 115              		.loc 1 65 2 is_stmt 1 discriminator 3 view .LVU12
  65:src/lcd.c     ****       lcd_clear_buf();
 116              		.loc 1 65 10 is_stmt 0 discriminator 3 view .LVU13
 117 0008 03F8011F 		strb	r1, [r3, #1]!
 118              	.LVL6:
  64:src/lcd.c     **** 	dots[i] = 0;
 119              		.loc 1 64 33 is_stmt 1 discriminator 3 view .LVU14
  64:src/lcd.c     **** 	dots[i] = 0;
 120              		.loc 1 64 21 discriminator 3 view .LVU15
  64:src/lcd.c     **** 	dots[i] = 0;
 121              		.loc 1 64 7 is_stmt 0 discriminator 3 view .LVU16
 122 000c 9342     		cmp	r3, r2
 123 000e FBD1     		bne	.L9
 124              	.LBE54:
  66:src/lcd.c     **** }
 125              		.loc 1 66 7 is_stmt 1 view .LVU17
 126 0010 014B     		ldr	r3, .L11+4
 127              	.LVL7:
  66:src/lcd.c     **** }
 128              		.loc 1 66 7 is_stmt 0 view .LVU18
 129 0012 1847     		bx	r3	@ indirect register sibling call
 130              	.LVL8:
 131              	.L12:
 132              		.align	2
 133              	.L11:
 134 0014 FFFFFFFF 		.word	.LANCHOR0-1
 135 0018 2D020008 		.word	134218285
 136              		.cfi_endproc
 137              	.LFE3:
 139              		.section	.text.reset_7_segment,"ax",%progbits
 140              		.align	1
 141              		.p2align 2,,3
 142              		.global	reset_7_segment
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
ARM GAS  /tmp/ccctyiBz.s 			page 10


 146              		.fpu fpv4-sp-d16
 148              	reset_7_segment:
 149              	.LFB5:
  84:src/lcd.c     ****   for (int i = 0; i <= EXP_SIGN; ++i) {
 150              		.loc 1 84 28 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		@ link register save eliminated.
  85:src/lcd.c     ****     dots[i] <<= 1;
 155              		.loc 1 85 3 view .LVU20
 156              	.LBB55:
  85:src/lcd.c     ****     dots[i] <<= 1;
 157              		.loc 1 85 8 view .LVU21
 158              	.LVL9:
  85:src/lcd.c     ****     dots[i] <<= 1;
 159              		.loc 1 85 19 view .LVU22
 160 0000 044B     		ldr	r3, .L16
 161 0002 03F18301 		add	r1, r3, #131
 162              	.LVL10:
 163              	.L14:
  86:src/lcd.c     ****   }
 164              		.loc 1 86 5 discriminator 3 view .LVU23
  86:src/lcd.c     ****   }
 165              		.loc 1 86 13 is_stmt 0 discriminator 3 view .LVU24
 166 0006 13F8012F 		ldrb	r2, [r3, #1]!	@ zero_extendqisi2
 167              	.LVL11:
  86:src/lcd.c     ****   }
 168              		.loc 1 86 13 discriminator 3 view .LVU25
 169 000a 5200     		lsls	r2, r2, #1
  85:src/lcd.c     ****     dots[i] <<= 1;
 170              		.loc 1 85 3 discriminator 3 view .LVU26
 171 000c 8B42     		cmp	r3, r1
  86:src/lcd.c     ****   }
 172              		.loc 1 86 13 discriminator 3 view .LVU27
 173 000e 1A70     		strb	r2, [r3]
  85:src/lcd.c     ****     dots[i] <<= 1;
 174              		.loc 1 85 34 is_stmt 1 discriminator 3 view .LVU28
 175              	.LVL12:
  85:src/lcd.c     ****     dots[i] <<= 1;
 176              		.loc 1 85 19 discriminator 3 view .LVU29
  85:src/lcd.c     ****     dots[i] <<= 1;
 177              		.loc 1 85 3 is_stmt 0 discriminator 3 view .LVU30
 178 0010 F9D1     		bne	.L14
 179              	.LBE55:
  88:src/lcd.c     **** 
 180              		.loc 1 88 1 view .LVU31
 181 0012 7047     		bx	lr
 182              	.L17:
 183              		.align	2
 184              	.L16:
 185 0014 FFFFFFFF 		.word	.LANCHOR0-1
 186              		.cfi_endproc
 187              	.LFE5:
 189              		.section	.text.left_side,"ax",%progbits
 190              		.align	1
 191              		.p2align 2,,3
ARM GAS  /tmp/ccctyiBz.s 			page 11


 192              		.global	left_side
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu fpv4-sp-d16
 198              	left_side:
 199              	.LVL13:
 200              	.LFB6:
  91:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, col);
 201              		.loc 1 91 40 is_stmt 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
  92:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 205              		.loc 1 92 3 view .LVU33
  91:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, col);
 206              		.loc 1 91 40 is_stmt 0 view .LVU34
 207 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 208              		.cfi_def_cfa_offset 24
 209              		.cfi_offset 4, -24
 210              		.cfi_offset 5, -20
 211              		.cfi_offset 6, -16
 212              		.cfi_offset 7, -12
 213              		.cfi_offset 8, -8
 214              		.cfi_offset 14, -4
 215 0004 82B0     		sub	sp, sp, #8
 216              		.cfi_def_cfa_offset 32
  91:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, col);
 217              		.loc 1 91 40 view .LVU35
 218 0006 0E46     		mov	r6, r1
  92:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 219              		.loc 1 92 3 view .LVU36
 220 0008 124F     		ldr	r7, .L20
 221 000a 0092     		str	r2, [sp]
  91:src/lcd.c     ****   lcd_fill_rect (i+2, j+11, 1, 9, col);
 222              		.loc 1 91 40 view .LVU37
 223 000c 0446     		mov	r4, r0
 224 000e 1546     		mov	r5, r2
  93:src/lcd.c     ****   lcd_fill_rect (i+4, j+2, 1, 17, col);
 225              		.loc 1 93 24 view .LVU38
 226 0010 06F10208 		add	r8, r6, #2
  92:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 227              		.loc 1 92 3 view .LVU39
 228 0014 0B31     		adds	r1, r1, #11
 229              	.LVL14:
  92:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 230              		.loc 1 92 3 view .LVU40
 231 0016 0230     		adds	r0, r0, #2
 232              	.LVL15:
  92:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 233              		.loc 1 92 3 view .LVU41
 234 0018 0923     		movs	r3, #9
 235 001a 0122     		movs	r2, #1
 236              	.LVL16:
  92:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 18, col);
 237              		.loc 1 92 3 view .LVU42
 238 001c B847     		blx	r7
ARM GAS  /tmp/ccctyiBz.s 			page 12


 239              	.LVL17:
  93:src/lcd.c     ****   lcd_fill_rect (i+4, j+2, 1, 17, col);
 240              		.loc 1 93 3 is_stmt 1 view .LVU43
 241 001e 4146     		mov	r1, r8
 242 0020 E01C     		adds	r0, r4, #3
 243 0022 0095     		str	r5, [sp]
 244 0024 1223     		movs	r3, #18
 245 0026 0122     		movs	r2, #1
 246 0028 B847     		blx	r7
 247              	.LVL18:
  94:src/lcd.c     ****   lcd_fill_rect (i+5, j+3, 1, 15, col);
 248              		.loc 1 94 3 view .LVU44
 249 002a 4146     		mov	r1, r8
 250 002c 201D     		adds	r0, r4, #4
 251 002e 0095     		str	r5, [sp]
 252 0030 1123     		movs	r3, #17
 253 0032 0122     		movs	r2, #1
 254 0034 B847     		blx	r7
 255              	.LVL19:
  95:src/lcd.c     ****   lcd_fill_rect (i+6, j+4, 1, 7, col);
 256              		.loc 1 95 3 view .LVU45
 257 0036 F11C     		adds	r1, r6, #3
 258 0038 601D     		adds	r0, r4, #5
 259 003a 0095     		str	r5, [sp]
 260 003c 0F23     		movs	r3, #15
 261 003e 0122     		movs	r2, #1
 262 0040 B847     		blx	r7
 263              	.LVL20:
  96:src/lcd.c     **** }
 264              		.loc 1 96 3 view .LVU46
 265 0042 0095     		str	r5, [sp]
 266 0044 311D     		adds	r1, r6, #4
 267 0046 A01D     		adds	r0, r4, #6
 268 0048 0723     		movs	r3, #7
 269 004a 0122     		movs	r2, #1
 270 004c B847     		blx	r7
 271              	.LVL21:
  97:src/lcd.c     **** void left_side_top (int i, int j, int col) {
 272              		.loc 1 97 1 is_stmt 0 view .LVU47
 273 004e 02B0     		add	sp, sp, #8
 274              		.cfi_def_cfa_offset 24
 275              		@ sp needed
 276 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 277              	.LVL22:
 278              	.L21:
  97:src/lcd.c     **** void left_side_top (int i, int j, int col) {
 279              		.loc 1 97 1 view .LVU48
 280              		.align	2
 281              	.L20:
 282 0054 3D020008 		.word	134218301
 283              		.cfi_endproc
 284              	.LFE6:
 286              		.section	.text.left_side_top,"ax",%progbits
 287              		.align	1
 288              		.p2align 2,,3
 289              		.global	left_side_top
 290              		.syntax unified
ARM GAS  /tmp/ccctyiBz.s 			page 13


 291              		.thumb
 292              		.thumb_func
 293              		.fpu fpv4-sp-d16
 295              	left_side_top:
 296              	.LVL23:
 297              	.LFB7:
  98:src/lcd.c     ****   left_side(i, j, col);
 298              		.loc 1 98 44 is_stmt 1 view -0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              		@ link register save eliminated.
  99:src/lcd.c     **** }
 303              		.loc 1 99 3 view .LVU50
 304 0000 FFF7FEBF 		b	left_side
 305              	.LVL24:
  99:src/lcd.c     **** }
 306              		.loc 1 99 3 is_stmt 0 view .LVU51
 307              		.cfi_endproc
 308              	.LFE7:
 310              		.section	.text.left_side_bottom,"ax",%progbits
 311              		.align	1
 312              		.p2align 2,,3
 313              		.global	left_side_bottom
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 317              		.fpu fpv4-sp-d16
 319              	left_side_bottom:
 320              	.LVL25:
 321              	.LFB8:
 101:src/lcd.c     ****   left_side(i-2, j+19, col);
 322              		.loc 1 101 47 is_stmt 1 view -0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              		@ link register save eliminated.
 102:src/lcd.c     **** }
 327              		.loc 1 102 3 view .LVU53
 328 0000 0238     		subs	r0, r0, #2
 329              	.LVL26:
 102:src/lcd.c     **** }
 330              		.loc 1 102 3 is_stmt 0 view .LVU54
 331 0002 1331     		adds	r1, r1, #19
 332              	.LVL27:
 102:src/lcd.c     **** }
 333              		.loc 1 102 3 view .LVU55
 334 0004 FFF7FEBF 		b	left_side
 335              	.LVL28:
 102:src/lcd.c     **** }
 336              		.loc 1 102 3 view .LVU56
 337              		.cfi_endproc
 338              	.LFE8:
 340              		.section	.text.right_side,"ax",%progbits
 341              		.align	1
 342              		.p2align 2,,3
 343              		.global	right_side
ARM GAS  /tmp/ccctyiBz.s 			page 14


 344              		.syntax unified
 345              		.thumb
 346              		.thumb_func
 347              		.fpu fpv4-sp-d16
 349              	right_side:
 350              	.LVL29:
 351              	.LFB9:
 104:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, col);
 352              		.loc 1 104 41 is_stmt 1 view -0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 105:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 356              		.loc 1 105 3 view .LVU58
 104:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, col);
 357              		.loc 1 104 41 is_stmt 0 view .LVU59
 358 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 359              		.cfi_def_cfa_offset 24
 360              		.cfi_offset 4, -24
 361              		.cfi_offset 5, -20
 362              		.cfi_offset 6, -16
 363              		.cfi_offset 7, -12
 364              		.cfi_offset 8, -8
 365              		.cfi_offset 14, -4
 366 0004 82B0     		sub	sp, sp, #8
 367              		.cfi_def_cfa_offset 32
 105:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 368              		.loc 1 105 3 view .LVU60
 369 0006 154F     		ldr	r7, .L26
 370 0008 0092     		str	r2, [sp]
 104:src/lcd.c     ****   lcd_fill_rect (i+16, j+11, 1, 7, col);
 371              		.loc 1 104 41 view .LVU61
 372 000a 0446     		mov	r4, r0
 373 000c 1546     		mov	r5, r2
 374 000e 0E46     		mov	r6, r1
 105:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 375              		.loc 1 105 3 view .LVU62
 376 0010 1030     		adds	r0, r0, #16
 377              	.LVL30:
 105:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 378              		.loc 1 105 3 view .LVU63
 379 0012 0B31     		adds	r1, r1, #11
 380              	.LVL31:
 105:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 381              		.loc 1 105 3 view .LVU64
 382 0014 0723     		movs	r3, #7
 383 0016 0122     		movs	r2, #1
 384              	.LVL32:
 105:src/lcd.c     ****   lcd_fill_rect (i+17, j+4, 1, 15, col);
 385              		.loc 1 105 3 view .LVU65
 386 0018 B847     		blx	r7
 387              	.LVL33:
 106:src/lcd.c     ****   lcd_fill_rect (i+18, j+3, 1, 17, col);
 388              		.loc 1 106 3 is_stmt 1 view .LVU66
 389 001a 311D     		adds	r1, r6, #4
 390 001c 04F11100 		add	r0, r4, #17
 391 0020 0095     		str	r5, [sp]
ARM GAS  /tmp/ccctyiBz.s 			page 15


 392 0022 0F23     		movs	r3, #15
 393 0024 0122     		movs	r2, #1
 394 0026 B847     		blx	r7
 395              	.LVL34:
 107:src/lcd.c     ****   lcd_fill_rect (i+19, j+2, 1, 18, col);
 396              		.loc 1 107 3 view .LVU67
 108:src/lcd.c     ****   lcd_fill_rect (i+20, j+2, 1, 9, col);
 397              		.loc 1 108 25 is_stmt 0 view .LVU68
 398 0028 06F10208 		add	r8, r6, #2
 107:src/lcd.c     ****   lcd_fill_rect (i+19, j+2, 1, 18, col);
 399              		.loc 1 107 3 view .LVU69
 400 002c F11C     		adds	r1, r6, #3
 401 002e 04F11200 		add	r0, r4, #18
 402 0032 0095     		str	r5, [sp]
 403 0034 1123     		movs	r3, #17
 404 0036 0122     		movs	r2, #1
 405 0038 B847     		blx	r7
 406              	.LVL35:
 108:src/lcd.c     ****   lcd_fill_rect (i+20, j+2, 1, 9, col);
 407              		.loc 1 108 3 is_stmt 1 view .LVU70
 408 003a 4146     		mov	r1, r8
 409 003c 04F11300 		add	r0, r4, #19
 410 0040 0095     		str	r5, [sp]
 411 0042 1223     		movs	r3, #18
 412 0044 0122     		movs	r2, #1
 413 0046 B847     		blx	r7
 414              	.LVL36:
 109:src/lcd.c     **** }
 415              		.loc 1 109 3 view .LVU71
 416 0048 4146     		mov	r1, r8
 417 004a 0095     		str	r5, [sp]
 418 004c 04F11400 		add	r0, r4, #20
 419 0050 0923     		movs	r3, #9
 420 0052 0122     		movs	r2, #1
 421 0054 B847     		blx	r7
 422              	.LVL37:
 110:src/lcd.c     **** void right_side_top (int i, int j, int col) {
 423              		.loc 1 110 1 is_stmt 0 view .LVU72
 424 0056 02B0     		add	sp, sp, #8
 425              		.cfi_def_cfa_offset 24
 426              		@ sp needed
 427 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 428              	.LVL38:
 429              	.L27:
 110:src/lcd.c     **** void right_side_top (int i, int j, int col) {
 430              		.loc 1 110 1 view .LVU73
 431              		.align	2
 432              	.L26:
 433 005c 3D020008 		.word	134218301
 434              		.cfi_endproc
 435              	.LFE9:
 437              		.section	.text.right_side_top,"ax",%progbits
 438              		.align	1
 439              		.p2align 2,,3
 440              		.global	right_side_top
 441              		.syntax unified
 442              		.thumb
ARM GAS  /tmp/ccctyiBz.s 			page 16


 443              		.thumb_func
 444              		.fpu fpv4-sp-d16
 446              	right_side_top:
 447              	.LVL39:
 448              	.LFB10:
 111:src/lcd.c     ****   right_side(i, j, col);
 449              		.loc 1 111 45 is_stmt 1 view -0
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 0
 452              		@ frame_needed = 0, uses_anonymous_args = 0
 453              		@ link register save eliminated.
 112:src/lcd.c     **** }
 454              		.loc 1 112 3 view .LVU75
 455 0000 FFF7FEBF 		b	right_side
 456              	.LVL40:
 112:src/lcd.c     **** }
 457              		.loc 1 112 3 is_stmt 0 view .LVU76
 458              		.cfi_endproc
 459              	.LFE10:
 461              		.section	.text.right_side_bottom,"ax",%progbits
 462              		.align	1
 463              		.p2align 2,,3
 464              		.global	right_side_bottom
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu fpv4-sp-d16
 470              	right_side_bottom:
 471              	.LVL41:
 472              	.LFB11:
 114:src/lcd.c     ****   right_side(i-2, j+19, col);
 473              		.loc 1 114 48 is_stmt 1 view -0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              		@ link register save eliminated.
 115:src/lcd.c     **** }
 478              		.loc 1 115 3 view .LVU78
 479 0000 0238     		subs	r0, r0, #2
 480              	.LVL42:
 115:src/lcd.c     **** }
 481              		.loc 1 115 3 is_stmt 0 view .LVU79
 482 0002 1331     		adds	r1, r1, #19
 483              	.LVL43:
 115:src/lcd.c     **** }
 484              		.loc 1 115 3 view .LVU80
 485 0004 FFF7FEBF 		b	right_side
 486              	.LVL44:
 115:src/lcd.c     **** }
 487              		.loc 1 115 3 view .LVU81
 488              		.cfi_endproc
 489              	.LFE11:
 491              		.section	.text.top,"ax",%progbits
 492              		.align	1
 493              		.p2align 2,,3
 494              		.global	top
 495              		.syntax unified
ARM GAS  /tmp/ccctyiBz.s 			page 17


 496              		.thumb
 497              		.thumb_func
 498              		.fpu fpv4-sp-d16
 500              	top:
 501              	.LVL45:
 502              	.LFB12:
 117:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, col );
 503              		.loc 1 117 34 is_stmt 1 view -0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 118:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 507              		.loc 1 118 3 view .LVU83
 117:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, col );
 508              		.loc 1 117 34 is_stmt 0 view .LVU84
 509 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 510              		.cfi_def_cfa_offset 20
 511              		.cfi_offset 4, -20
 512              		.cfi_offset 5, -16
 513              		.cfi_offset 6, -12
 514              		.cfi_offset 7, -8
 515              		.cfi_offset 14, -4
 516 0002 83B0     		sub	sp, sp, #12
 517              		.cfi_def_cfa_offset 32
 118:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 518              		.loc 1 118 3 view .LVU85
 519 0004 0E4F     		ldr	r7, .L32
 520 0006 0092     		str	r2, [sp]
 117:src/lcd.c     ****   lcd_fill_rect ( i+5, j, 14, 1, col );
 521              		.loc 1 117 34 view .LVU86
 522 0008 0446     		mov	r4, r0
 523 000a 1546     		mov	r5, r2
 524 000c 0E46     		mov	r6, r1
 118:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 525              		.loc 1 118 3 view .LVU87
 526 000e 0530     		adds	r0, r0, #5
 527              	.LVL46:
 118:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 528              		.loc 1 118 3 view .LVU88
 529 0010 0123     		movs	r3, #1
 530 0012 0E22     		movs	r2, #14
 531              	.LVL47:
 118:src/lcd.c     ****   lcd_fill_rect ( i+4, j+1, 16, 1, col );
 532              		.loc 1 118 3 view .LVU89
 533 0014 B847     		blx	r7
 534              	.LVL48:
 119:src/lcd.c     ****   lcd_fill_rect ( i+6, j+2, 12, 1, col );
 535              		.loc 1 119 3 is_stmt 1 view .LVU90
 536 0016 711C     		adds	r1, r6, #1
 537 0018 201D     		adds	r0, r4, #4
 538 001a 0095     		str	r5, [sp]
 539 001c 0123     		movs	r3, #1
 540 001e 1022     		movs	r2, #16
 541 0020 B847     		blx	r7
 542              	.LVL49:
 120:src/lcd.c     ****   lcd_fill_rect ( i+7, j+3, 10, 1, col );
 543              		.loc 1 120 3 view .LVU91
ARM GAS  /tmp/ccctyiBz.s 			page 18


 544 0022 B11C     		adds	r1, r6, #2
 545 0024 A01D     		adds	r0, r4, #6
 546 0026 0095     		str	r5, [sp]
 547 0028 0123     		movs	r3, #1
 548 002a 0C22     		movs	r2, #12
 549 002c B847     		blx	r7
 550              	.LVL50:
 121:src/lcd.c     **** }
 551              		.loc 1 121 3 view .LVU92
 552 002e 0095     		str	r5, [sp]
 553 0030 F11C     		adds	r1, r6, #3
 554 0032 E01D     		adds	r0, r4, #7
 555 0034 0123     		movs	r3, #1
 556 0036 0A22     		movs	r2, #10
 557 0038 B847     		blx	r7
 558              	.LVL51:
 122:src/lcd.c     **** void middle (int i, int j, int col) {
 559              		.loc 1 122 1 is_stmt 0 view .LVU93
 560 003a 03B0     		add	sp, sp, #12
 561              		.cfi_def_cfa_offset 20
 562              		@ sp needed
 563 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 564              	.LVL52:
 565              	.L33:
 122:src/lcd.c     **** void middle (int i, int j, int col) {
 566              		.loc 1 122 1 view .LVU94
 567 003e 00BF     		.align	2
 568              	.L32:
 569 0040 3D020008 		.word	134218301
 570              		.cfi_endproc
 571              	.LFE12:
 573              		.section	.text.middle,"ax",%progbits
 574              		.align	1
 575              		.p2align 2,,3
 576              		.global	middle
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 580              		.fpu fpv4-sp-d16
 582              	middle:
 583              	.LVL53:
 584              	.LFB13:
 123:src/lcd.c     ****   lcd_fill_rect ( i+5, j+21, 11, 1, col );
 585              		.loc 1 123 37 is_stmt 1 view -0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 124:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 589              		.loc 1 124 3 view .LVU96
 123:src/lcd.c     ****   lcd_fill_rect ( i+5, j+21, 11, 1, col );
 590              		.loc 1 123 37 is_stmt 0 view .LVU97
 591 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 592              		.cfi_def_cfa_offset 24
 593              		.cfi_offset 4, -24
 594              		.cfi_offset 5, -20
 595              		.cfi_offset 6, -16
 596              		.cfi_offset 7, -12
ARM GAS  /tmp/ccctyiBz.s 			page 19


 597              		.cfi_offset 8, -8
 598              		.cfi_offset 14, -4
 599 0004 82B0     		sub	sp, sp, #8
 600              		.cfi_def_cfa_offset 32
 124:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 601              		.loc 1 124 20 view .LVU98
 602 0006 00F10508 		add	r8, r0, #5
 124:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 603              		.loc 1 124 3 view .LVU99
 604 000a 0D4F     		ldr	r7, .L36
 605 000c 0092     		str	r2, [sp]
 123:src/lcd.c     ****   lcd_fill_rect ( i+5, j+21, 11, 1, col );
 606              		.loc 1 123 37 view .LVU100
 607 000e 0C46     		mov	r4, r1
 608 0010 1546     		mov	r5, r2
 609 0012 0646     		mov	r6, r0
 124:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 610              		.loc 1 124 3 view .LVU101
 611 0014 1531     		adds	r1, r1, #21
 612              	.LVL54:
 124:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 613              		.loc 1 124 3 view .LVU102
 614 0016 4046     		mov	r0, r8
 615              	.LVL55:
 124:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 616              		.loc 1 124 3 view .LVU103
 617 0018 0123     		movs	r3, #1
 618 001a 0B22     		movs	r2, #11
 619              	.LVL56:
 124:src/lcd.c     ****   lcd_fill_rect ( i+4, j+20, 13, 1, col );
 620              		.loc 1 124 3 view .LVU104
 621 001c B847     		blx	r7
 622              	.LVL57:
 125:src/lcd.c     ****   lcd_fill_rect ( i+5, j+19, 11, 1, col );
 623              		.loc 1 125 3 is_stmt 1 view .LVU105
 624 001e 301D     		adds	r0, r6, #4
 625 0020 04F11401 		add	r1, r4, #20
 626 0024 0095     		str	r5, [sp]
 627 0026 0123     		movs	r3, #1
 628 0028 0D22     		movs	r2, #13
 629 002a B847     		blx	r7
 630              	.LVL58:
 126:src/lcd.c     **** }
 631              		.loc 1 126 3 view .LVU106
 632 002c 4046     		mov	r0, r8
 633 002e 0095     		str	r5, [sp]
 634 0030 04F11301 		add	r1, r4, #19
 635 0034 0123     		movs	r3, #1
 636 0036 0B22     		movs	r2, #11
 637 0038 B847     		blx	r7
 638              	.LVL59:
 127:src/lcd.c     **** void bottom (int i, int j, int col) {
 639              		.loc 1 127 1 is_stmt 0 view .LVU107
 640 003a 02B0     		add	sp, sp, #8
 641              		.cfi_def_cfa_offset 24
 642              		@ sp needed
 643 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /tmp/ccctyiBz.s 			page 20


 644              	.LVL60:
 645              	.L37:
 127:src/lcd.c     **** void bottom (int i, int j, int col) {
 646              		.loc 1 127 1 view .LVU108
 647              		.align	2
 648              	.L36:
 649 0040 3D020008 		.word	134218301
 650              		.cfi_endproc
 651              	.LFE13:
 653              		.section	.text.bottom,"ax",%progbits
 654              		.align	1
 655              		.p2align 2,,3
 656              		.global	bottom
 657              		.syntax unified
 658              		.thumb
 659              		.thumb_func
 660              		.fpu fpv4-sp-d16
 662              	bottom:
 663              	.LVL61:
 664              	.LFB14:
 128:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, col );
 665              		.loc 1 128 37 is_stmt 1 view -0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 129:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 669              		.loc 1 129 3 view .LVU110
 128:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, col );
 670              		.loc 1 128 37 is_stmt 0 view .LVU111
 671 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 672              		.cfi_def_cfa_offset 20
 673              		.cfi_offset 4, -20
 674              		.cfi_offset 5, -16
 675              		.cfi_offset 6, -12
 676              		.cfi_offset 7, -8
 677              		.cfi_offset 14, -4
 678 0002 83B0     		sub	sp, sp, #12
 679              		.cfi_def_cfa_offset 32
 129:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 680              		.loc 1 129 3 view .LVU112
 681 0004 104F     		ldr	r7, .L40
 682 0006 0092     		str	r2, [sp]
 128:src/lcd.c     ****   lcd_fill_rect ( i+2, j+40, 14, 1, col );
 683              		.loc 1 128 37 view .LVU113
 684 0008 0446     		mov	r4, r0
 685 000a 0D46     		mov	r5, r1
 686 000c 1646     		mov	r6, r2
 129:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 687              		.loc 1 129 3 view .LVU114
 688 000e 2831     		adds	r1, r1, #40
 689              	.LVL62:
 129:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 690              		.loc 1 129 3 view .LVU115
 691 0010 0230     		adds	r0, r0, #2
 692              	.LVL63:
 129:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 693              		.loc 1 129 3 view .LVU116
ARM GAS  /tmp/ccctyiBz.s 			page 21


 694 0012 0123     		movs	r3, #1
 695 0014 0E22     		movs	r2, #14
 696              	.LVL64:
 129:src/lcd.c     ****   lcd_fill_rect ( i+1, j+39, 16, 1, col );
 697              		.loc 1 129 3 view .LVU117
 698 0016 B847     		blx	r7
 699              	.LVL65:
 130:src/lcd.c     ****   lcd_fill_rect ( i+3, j+38, 12, 1, col );
 700              		.loc 1 130 3 is_stmt 1 view .LVU118
 701 0018 05F12701 		add	r1, r5, #39
 702 001c 601C     		adds	r0, r4, #1
 703 001e 0096     		str	r6, [sp]
 704 0020 0123     		movs	r3, #1
 705 0022 1022     		movs	r2, #16
 706 0024 B847     		blx	r7
 707              	.LVL66:
 131:src/lcd.c     ****   lcd_fill_rect ( i+4, j+37, 10, 1, col );
 708              		.loc 1 131 3 view .LVU119
 709 0026 05F12601 		add	r1, r5, #38
 710 002a E01C     		adds	r0, r4, #3
 711 002c 0096     		str	r6, [sp]
 712 002e 0123     		movs	r3, #1
 713 0030 0C22     		movs	r2, #12
 714 0032 B847     		blx	r7
 715              	.LVL67:
 132:src/lcd.c     **** }
 716              		.loc 1 132 3 view .LVU120
 717 0034 0096     		str	r6, [sp]
 718 0036 05F12501 		add	r1, r5, #37
 719 003a 201D     		adds	r0, r4, #4
 720 003c 0123     		movs	r3, #1
 721 003e 0A22     		movs	r2, #10
 722 0040 B847     		blx	r7
 723              	.LVL68:
 133:src/lcd.c     **** void decimal (int i, int j, int col) {
 724              		.loc 1 133 1 is_stmt 0 view .LVU121
 725 0042 03B0     		add	sp, sp, #12
 726              		.cfi_def_cfa_offset 20
 727              		@ sp needed
 728 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 729              	.LVL69:
 730              	.L41:
 133:src/lcd.c     **** void decimal (int i, int j, int col) {
 731              		.loc 1 133 1 view .LVU122
 732 0046 00BF     		.align	2
 733              	.L40:
 734 0048 3D020008 		.word	134218301
 735              		.cfi_endproc
 736              	.LFE14:
 738              		.section	.text.decimal,"ax",%progbits
 739              		.align	1
 740              		.p2align 2,,3
 741              		.global	decimal
 742              		.syntax unified
 743              		.thumb
 744              		.thumb_func
 745              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccctyiBz.s 			page 22


 747              	decimal:
 748              	.LVL70:
 749              	.LFB15:
 134:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, col);
 750              		.loc 1 134 38 is_stmt 1 view -0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 135:src/lcd.c     **** }
 754              		.loc 1 135 3 view .LVU124
 134:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, col);
 755              		.loc 1 134 38 is_stmt 0 view .LVU125
 756 0000 10B5     		push	{r4, lr}
 757              		.cfi_def_cfa_offset 8
 758              		.cfi_offset 4, -8
 759              		.cfi_offset 14, -4
 760 0002 82B0     		sub	sp, sp, #8
 761              		.cfi_def_cfa_offset 16
 135:src/lcd.c     **** }
 762              		.loc 1 135 3 view .LVU126
 763 0004 0523     		movs	r3, #5
 764 0006 0092     		str	r2, [sp]
 765 0008 034C     		ldr	r4, .L44
 766 000a 1330     		adds	r0, r0, #19
 767              	.LVL71:
 135:src/lcd.c     **** }
 768              		.loc 1 135 3 view .LVU127
 769 000c 2831     		adds	r1, r1, #40
 770              	.LVL72:
 135:src/lcd.c     **** }
 771              		.loc 1 135 3 view .LVU128
 772 000e 1A46     		mov	r2, r3
 773              	.LVL73:
 135:src/lcd.c     **** }
 774              		.loc 1 135 3 view .LVU129
 775 0010 A047     		blx	r4
 776              	.LVL74:
 136:src/lcd.c     **** void comma (int i, int j, int col) {
 777              		.loc 1 136 1 view .LVU130
 778 0012 02B0     		add	sp, sp, #8
 779              		.cfi_def_cfa_offset 8
 780              		@ sp needed
 781 0014 10BD     		pop	{r4, pc}
 782              	.L45:
 783 0016 00BF     		.align	2
 784              	.L44:
 785 0018 3D020008 		.word	134218301
 786              		.cfi_endproc
 787              	.LFE15:
 789              		.section	.text.comma,"ax",%progbits
 790              		.align	1
 791              		.p2align 2,,3
 792              		.global	comma
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
 796              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccctyiBz.s 			page 23


 798              	comma:
 799              	.LVL75:
 800              	.LFB16:
 137:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, col);
 801              		.loc 1 137 36 is_stmt 1 view -0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 0
 804              		@ frame_needed = 0, uses_anonymous_args = 0
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 805              		.loc 1 138 3 view .LVU132
 137:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, col);
 806              		.loc 1 137 36 is_stmt 0 view .LVU133
 807 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 808              		.cfi_def_cfa_offset 20
 809              		.cfi_offset 4, -20
 810              		.cfi_offset 5, -16
 811              		.cfi_offset 6, -12
 812              		.cfi_offset 7, -8
 813              		.cfi_offset 14, -4
 814 0002 83B0     		sub	sp, sp, #12
 815              		.cfi_def_cfa_offset 32
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 816              		.loc 1 138 3 view .LVU134
 817 0004 0323     		movs	r3, #3
 818 0006 094F     		ldr	r7, .L48
 819 0008 0092     		str	r2, [sp]
 137:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, col);
 820              		.loc 1 137 36 view .LVU135
 821 000a 0446     		mov	r4, r0
 822 000c 0D46     		mov	r5, r1
 823 000e 1646     		mov	r6, r2
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 824              		.loc 1 138 3 view .LVU136
 825 0010 2D31     		adds	r1, r1, #45
 826              	.LVL76:
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 827              		.loc 1 138 3 view .LVU137
 828 0012 1A46     		mov	r2, r3
 829              	.LVL77:
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 830              		.loc 1 138 3 view .LVU138
 831 0014 1530     		adds	r0, r0, #21
 832              	.LVL78:
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 833              		.loc 1 138 3 view .LVU139
 834 0016 B847     		blx	r7
 835              	.LVL79:
 139:src/lcd.c     **** }
 836              		.loc 1 139 3 is_stmt 1 view .LVU140
 837 0018 0323     		movs	r3, #3
 838 001a 0096     		str	r6, [sp]
 839 001c 05F13001 		add	r1, r5, #48
 840 0020 04F11300 		add	r0, r4, #19
 841 0024 1A46     		mov	r2, r3
 842 0026 B847     		blx	r7
 843              	.LVL80:
 140:src/lcd.c     **** 
ARM GAS  /tmp/ccctyiBz.s 			page 24


 844              		.loc 1 140 1 is_stmt 0 view .LVU141
 845 0028 03B0     		add	sp, sp, #12
 846              		.cfi_def_cfa_offset 20
 847              		@ sp needed
 848 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 849              	.LVL81:
 850              	.L49:
 140:src/lcd.c     **** 
 851              		.loc 1 140 1 view .LVU142
 852              		.align	2
 853              	.L48:
 854 002c 3D020008 		.word	134218301
 855              		.cfi_endproc
 856              	.LFE16:
 858              		.section	.text.exp_left_side,"ax",%progbits
 859              		.align	1
 860              		.p2align 2,,3
 861              		.global	exp_left_side
 862              		.syntax unified
 863              		.thumb
 864              		.thumb_func
 865              		.fpu fpv4-sp-d16
 867              	exp_left_side:
 868              	.LVL82:
 869              	.LFB17:
 142:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, col );
 870              		.loc 1 142 44 is_stmt 1 view -0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 143:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 874              		.loc 1 143 3 view .LVU144
 142:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, col );
 875              		.loc 1 142 44 is_stmt 0 view .LVU145
 876 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 877              		.cfi_def_cfa_offset 20
 878              		.cfi_offset 4, -20
 879              		.cfi_offset 5, -16
 880              		.cfi_offset 6, -12
 881              		.cfi_offset 7, -8
 882              		.cfi_offset 14, -4
 883 0002 83B0     		sub	sp, sp, #12
 884              		.cfi_def_cfa_offset 32
 143:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 885              		.loc 1 143 3 view .LVU146
 886 0004 0E4F     		ldr	r7, .L52
 887 0006 0092     		str	r2, [sp]
 142:src/lcd.c     ****   lcd_fill_rect (i, j+6, 1, 6, col );
 888              		.loc 1 142 44 view .LVU147
 889 0008 0C46     		mov	r4, r1
 890 000a 1546     		mov	r5, r2
 891 000c 0646     		mov	r6, r0
 143:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 892              		.loc 1 143 3 view .LVU148
 893 000e 0631     		adds	r1, r1, #6
 894              	.LVL83:
 143:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
ARM GAS  /tmp/ccctyiBz.s 			page 25


 895              		.loc 1 143 3 view .LVU149
 896 0010 0623     		movs	r3, #6
 897 0012 0122     		movs	r2, #1
 898              	.LVL84:
 143:src/lcd.c     ****   lcd_fill_rect (i+1, j, 1, 11, col );
 899              		.loc 1 143 3 view .LVU150
 900 0014 B847     		blx	r7
 901              	.LVL85:
 144:src/lcd.c     ****   lcd_fill_rect (i+2, j+1, 1, 9, col );
 902              		.loc 1 144 3 is_stmt 1 view .LVU151
 903 0016 2146     		mov	r1, r4
 904 0018 701C     		adds	r0, r6, #1
 905 001a 0095     		str	r5, [sp]
 906 001c 0B23     		movs	r3, #11
 907 001e 0122     		movs	r2, #1
 908 0020 B847     		blx	r7
 909              	.LVL86:
 145:src/lcd.c     ****   lcd_fill_rect (i+3, j+2, 1, 4, col );
 910              		.loc 1 145 3 view .LVU152
 911 0022 611C     		adds	r1, r4, #1
 912 0024 B01C     		adds	r0, r6, #2
 913 0026 0095     		str	r5, [sp]
 914 0028 0923     		movs	r3, #9
 915 002a 0122     		movs	r2, #1
 916 002c B847     		blx	r7
 917              	.LVL87:
 146:src/lcd.c     **** }
 918              		.loc 1 146 3 view .LVU153
 919 002e 0095     		str	r5, [sp]
 920 0030 A11C     		adds	r1, r4, #2
 921 0032 F01C     		adds	r0, r6, #3
 922 0034 0423     		movs	r3, #4
 923 0036 0122     		movs	r2, #1
 924 0038 B847     		blx	r7
 925              	.LVL88:
 147:src/lcd.c     **** void exp_left_side_top (int i, int j, int col) {
 926              		.loc 1 147 1 is_stmt 0 view .LVU154
 927 003a 03B0     		add	sp, sp, #12
 928              		.cfi_def_cfa_offset 20
 929              		@ sp needed
 930 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 931              	.LVL89:
 932              	.L53:
 147:src/lcd.c     **** void exp_left_side_top (int i, int j, int col) {
 933              		.loc 1 147 1 view .LVU155
 934 003e 00BF     		.align	2
 935              	.L52:
 936 0040 3D020008 		.word	134218301
 937              		.cfi_endproc
 938              	.LFE17:
 940              		.section	.text.exp_left_side_top,"ax",%progbits
 941              		.align	1
 942              		.p2align 2,,3
 943              		.global	exp_left_side_top
 944              		.syntax unified
 945              		.thumb
 946              		.thumb_func
ARM GAS  /tmp/ccctyiBz.s 			page 26


 947              		.fpu fpv4-sp-d16
 949              	exp_left_side_top:
 950              	.LVL90:
 951              	.LFB18:
 148:src/lcd.c     ****   exp_left_side(i+1, j, col);
 952              		.loc 1 148 48 is_stmt 1 view -0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 0
 955              		@ frame_needed = 0, uses_anonymous_args = 0
 956              		@ link register save eliminated.
 149:src/lcd.c     **** }
 957              		.loc 1 149 3 view .LVU157
 958 0000 0130     		adds	r0, r0, #1
 959              	.LVL91:
 149:src/lcd.c     **** }
 960              		.loc 1 149 3 is_stmt 0 view .LVU158
 961 0002 FFF7FEBF 		b	exp_left_side
 962              	.LVL92:
 149:src/lcd.c     **** }
 963              		.loc 1 149 3 view .LVU159
 964              		.cfi_endproc
 965              	.LFE18:
 967 0006 00BF     		.section	.text.exp_left_side_bottom,"ax",%progbits
 968              		.align	1
 969              		.p2align 2,,3
 970              		.global	exp_left_side_bottom
 971              		.syntax unified
 972              		.thumb
 973              		.thumb_func
 974              		.fpu fpv4-sp-d16
 976              	exp_left_side_bottom:
 977              	.LVL93:
 978              	.LFB19:
 151:src/lcd.c     ****   exp_left_side(i, j+11, col);
 979              		.loc 1 151 51 is_stmt 1 view -0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 0
 982              		@ frame_needed = 0, uses_anonymous_args = 0
 983              		@ link register save eliminated.
 152:src/lcd.c     **** }
 984              		.loc 1 152 3 view .LVU161
 985 0000 0B31     		adds	r1, r1, #11
 986              	.LVL94:
 152:src/lcd.c     **** }
 987              		.loc 1 152 3 is_stmt 0 view .LVU162
 988 0002 FFF7FEBF 		b	exp_left_side
 989              	.LVL95:
 152:src/lcd.c     **** }
 990              		.loc 1 152 3 view .LVU163
 991              		.cfi_endproc
 992              	.LFE19:
 994 0006 00BF     		.section	.text.exp_right_side,"ax",%progbits
 995              		.align	1
 996              		.p2align 2,,3
 997              		.global	exp_right_side
 998              		.syntax unified
 999              		.thumb
ARM GAS  /tmp/ccctyiBz.s 			page 27


 1000              		.thumb_func
 1001              		.fpu fpv4-sp-d16
 1003              	exp_right_side:
 1004              	.LVL96:
 1005              	.LFB20:
 154:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, col );
 1006              		.loc 1 154 45 is_stmt 1 view -0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 0
 1009              		@ frame_needed = 0, uses_anonymous_args = 0
 155:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 1010              		.loc 1 155 3 view .LVU165
 154:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, col );
 1011              		.loc 1 154 45 is_stmt 0 view .LVU166
 1012 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1013              		.cfi_def_cfa_offset 20
 1014              		.cfi_offset 4, -20
 1015              		.cfi_offset 5, -16
 1016              		.cfi_offset 6, -12
 1017              		.cfi_offset 7, -8
 1018              		.cfi_offset 14, -4
 1019 0002 83B0     		sub	sp, sp, #12
 1020              		.cfi_def_cfa_offset 32
 155:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 1021              		.loc 1 155 3 view .LVU167
 1022 0004 0F4F     		ldr	r7, .L58
 1023 0006 0092     		str	r2, [sp]
 154:src/lcd.c     ****   lcd_fill_rect (i+12, j, 1, 6, col );
 1024              		.loc 1 154 45 view .LVU168
 1025 0008 0446     		mov	r4, r0
 1026 000a 1546     		mov	r5, r2
 1027 000c 0E46     		mov	r6, r1
 155:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 1028              		.loc 1 155 3 view .LVU169
 1029 000e 0C30     		adds	r0, r0, #12
 1030              	.LVL97:
 155:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 1031              		.loc 1 155 3 view .LVU170
 1032 0010 0623     		movs	r3, #6
 1033 0012 0122     		movs	r2, #1
 1034              	.LVL98:
 155:src/lcd.c     ****   lcd_fill_rect (i+11, j+1, 1, 11, col );
 1035              		.loc 1 155 3 view .LVU171
 1036 0014 B847     		blx	r7
 1037              	.LVL99:
 156:src/lcd.c     ****   lcd_fill_rect (i+10, j+2, 1, 9, col );
 1038              		.loc 1 156 3 is_stmt 1 view .LVU172
 1039 0016 711C     		adds	r1, r6, #1
 1040 0018 04F10B00 		add	r0, r4, #11
 1041 001c 0095     		str	r5, [sp]
 1042 001e 0B23     		movs	r3, #11
 1043 0020 0122     		movs	r2, #1
 1044 0022 B847     		blx	r7
 1045              	.LVL100:
 157:src/lcd.c     ****   lcd_fill_rect (i+9, j+6, 1, 4, col );
 1046              		.loc 1 157 3 view .LVU173
 1047 0024 B11C     		adds	r1, r6, #2
ARM GAS  /tmp/ccctyiBz.s 			page 28


 1048 0026 04F10A00 		add	r0, r4, #10
 1049 002a 0095     		str	r5, [sp]
 1050 002c 0923     		movs	r3, #9
 1051 002e 0122     		movs	r2, #1
 1052 0030 B847     		blx	r7
 1053              	.LVL101:
 158:src/lcd.c     **** }
 1054              		.loc 1 158 3 view .LVU174
 1055 0032 0095     		str	r5, [sp]
 1056 0034 B11D     		adds	r1, r6, #6
 1057 0036 04F10900 		add	r0, r4, #9
 1058 003a 0423     		movs	r3, #4
 1059 003c 0122     		movs	r2, #1
 1060 003e B847     		blx	r7
 1061              	.LVL102:
 159:src/lcd.c     **** void exp_right_side_top (int i, int j, int col) {
 1062              		.loc 1 159 1 is_stmt 0 view .LVU175
 1063 0040 03B0     		add	sp, sp, #12
 1064              		.cfi_def_cfa_offset 20
 1065              		@ sp needed
 1066 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 1067              	.LVL103:
 1068              	.L59:
 159:src/lcd.c     **** void exp_right_side_top (int i, int j, int col) {
 1069              		.loc 1 159 1 view .LVU176
 1070              		.align	2
 1071              	.L58:
 1072 0044 3D020008 		.word	134218301
 1073              		.cfi_endproc
 1074              	.LFE20:
 1076              		.section	.text.exp_right_side_top,"ax",%progbits
 1077              		.align	1
 1078              		.p2align 2,,3
 1079              		.global	exp_right_side_top
 1080              		.syntax unified
 1081              		.thumb
 1082              		.thumb_func
 1083              		.fpu fpv4-sp-d16
 1085              	exp_right_side_top:
 1086              	.LVL104:
 1087              	.LFB21:
 160:src/lcd.c     ****   exp_right_side(i, j, col);
 1088              		.loc 1 160 49 is_stmt 1 view -0
 1089              		.cfi_startproc
 1090              		@ args = 0, pretend = 0, frame = 0
 1091              		@ frame_needed = 0, uses_anonymous_args = 0
 1092              		@ link register save eliminated.
 161:src/lcd.c     **** }
 1093              		.loc 1 161 3 view .LVU178
 1094 0000 FFF7FEBF 		b	exp_right_side
 1095              	.LVL105:
 161:src/lcd.c     **** }
 1096              		.loc 1 161 3 is_stmt 0 view .LVU179
 1097              		.cfi_endproc
 1098              	.LFE21:
 1100              		.section	.text.exp_right_side_bottom,"ax",%progbits
 1101              		.align	1
ARM GAS  /tmp/ccctyiBz.s 			page 29


 1102              		.p2align 2,,3
 1103              		.global	exp_right_side_bottom
 1104              		.syntax unified
 1105              		.thumb
 1106              		.thumb_func
 1107              		.fpu fpv4-sp-d16
 1109              	exp_right_side_bottom:
 1110              	.LVL106:
 1111              	.LFB22:
 163:src/lcd.c     ****   exp_right_side(i-1, j+11, col);
 1112              		.loc 1 163 52 is_stmt 1 view -0
 1113              		.cfi_startproc
 1114              		@ args = 0, pretend = 0, frame = 0
 1115              		@ frame_needed = 0, uses_anonymous_args = 0
 1116              		@ link register save eliminated.
 164:src/lcd.c     **** }
 1117              		.loc 1 164 3 view .LVU181
 1118 0000 0138     		subs	r0, r0, #1
 1119              	.LVL107:
 164:src/lcd.c     **** }
 1120              		.loc 1 164 3 is_stmt 0 view .LVU182
 1121 0002 0B31     		adds	r1, r1, #11
 1122              	.LVL108:
 164:src/lcd.c     **** }
 1123              		.loc 1 164 3 view .LVU183
 1124 0004 FFF7FEBF 		b	exp_right_side
 1125              	.LVL109:
 164:src/lcd.c     **** }
 1126              		.loc 1 164 3 view .LVU184
 1127              		.cfi_endproc
 1128              	.LFE22:
 1130              		.section	.text.exp_top,"ax",%progbits
 1131              		.align	1
 1132              		.p2align 2,,3
 1133              		.global	exp_top
 1134              		.syntax unified
 1135              		.thumb
 1136              		.thumb_func
 1137              		.fpu fpv4-sp-d16
 1139              	exp_top:
 1140              	.LVL110:
 1141              	.LFB23:
 166:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, col );
 1142              		.loc 1 166 38 is_stmt 1 view -0
 1143              		.cfi_startproc
 1144              		@ args = 0, pretend = 0, frame = 0
 1145              		@ frame_needed = 0, uses_anonymous_args = 0
 167:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 1146              		.loc 1 167 3 view .LVU186
 166:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, col );
 1147              		.loc 1 166 38 is_stmt 0 view .LVU187
 1148 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1149              		.cfi_def_cfa_offset 20
 1150              		.cfi_offset 4, -20
 1151              		.cfi_offset 5, -16
 1152              		.cfi_offset 6, -12
 1153              		.cfi_offset 7, -8
ARM GAS  /tmp/ccctyiBz.s 			page 30


 1154              		.cfi_offset 14, -4
 1155 0002 83B0     		sub	sp, sp, #12
 1156              		.cfi_def_cfa_offset 32
 167:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 1157              		.loc 1 167 3 view .LVU188
 1158 0004 0B4F     		ldr	r7, .L64
 1159 0006 0092     		str	r2, [sp]
 166:src/lcd.c     ****   lcd_fill_rect (i+4, j, 7, 1, col );
 1160              		.loc 1 166 38 view .LVU189
 1161 0008 0446     		mov	r4, r0
 1162 000a 1546     		mov	r5, r2
 1163 000c 0E46     		mov	r6, r1
 167:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 1164              		.loc 1 167 3 view .LVU190
 1165 000e 0430     		adds	r0, r0, #4
 1166              	.LVL111:
 167:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 1167              		.loc 1 167 3 view .LVU191
 1168 0010 0123     		movs	r3, #1
 1169 0012 0722     		movs	r2, #7
 1170              	.LVL112:
 167:src/lcd.c     ****   lcd_fill_rect (i+5, j+1, 5, 1, col );
 1171              		.loc 1 167 3 view .LVU192
 1172 0014 B847     		blx	r7
 1173              	.LVL113:
 168:src/lcd.c     ****   lcd_fill_rect (i+6, j+2, 3, 1, col );
 1174              		.loc 1 168 3 is_stmt 1 view .LVU193
 1175 0016 711C     		adds	r1, r6, #1
 1176 0018 601D     		adds	r0, r4, #5
 1177 001a 0095     		str	r5, [sp]
 1178 001c 0123     		movs	r3, #1
 1179 001e 0522     		movs	r2, #5
 1180 0020 B847     		blx	r7
 1181              	.LVL114:
 169:src/lcd.c     **** }
 1182              		.loc 1 169 3 view .LVU194
 1183 0022 0095     		str	r5, [sp]
 1184 0024 B11C     		adds	r1, r6, #2
 1185 0026 A01D     		adds	r0, r4, #6
 1186 0028 0123     		movs	r3, #1
 1187 002a 0322     		movs	r2, #3
 1188 002c B847     		blx	r7
 1189              	.LVL115:
 170:src/lcd.c     **** void exp_bottom (int i, int j, int col) {
 1190              		.loc 1 170 1 is_stmt 0 view .LVU195
 1191 002e 03B0     		add	sp, sp, #12
 1192              		.cfi_def_cfa_offset 20
 1193              		@ sp needed
 1194 0030 F0BD     		pop	{r4, r5, r6, r7, pc}
 1195              	.LVL116:
 1196              	.L65:
 170:src/lcd.c     **** void exp_bottom (int i, int j, int col) {
 1197              		.loc 1 170 1 view .LVU196
 1198 0032 00BF     		.align	2
 1199              	.L64:
 1200 0034 3D020008 		.word	134218301
 1201              		.cfi_endproc
ARM GAS  /tmp/ccctyiBz.s 			page 31


 1202              	.LFE23:
 1204              		.section	.text.exp_bottom,"ax",%progbits
 1205              		.align	1
 1206              		.p2align 2,,3
 1207              		.global	exp_bottom
 1208              		.syntax unified
 1209              		.thumb
 1210              		.thumb_func
 1211              		.fpu fpv4-sp-d16
 1213              	exp_bottom:
 1214              	.LVL117:
 1215              	.LFB24:
 171:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, col );
 1216              		.loc 1 171 41 is_stmt 1 view -0
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 172:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1220              		.loc 1 172 3 view .LVU198
 171:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, col );
 1221              		.loc 1 171 41 is_stmt 0 view .LVU199
 1222 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1223              		.cfi_def_cfa_offset 20
 1224              		.cfi_offset 4, -20
 1225              		.cfi_offset 5, -16
 1226              		.cfi_offset 6, -12
 1227              		.cfi_offset 7, -8
 1228              		.cfi_offset 14, -4
 1229 0002 83B0     		sub	sp, sp, #12
 1230              		.cfi_def_cfa_offset 32
 172:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1231              		.loc 1 172 3 view .LVU200
 1232 0004 0C4F     		ldr	r7, .L68
 1233 0006 0092     		str	r2, [sp]
 171:src/lcd.c     ****   lcd_fill_rect (i+2, j+22, 7, 1, col );
 1234              		.loc 1 171 41 view .LVU201
 1235 0008 0446     		mov	r4, r0
 1236 000a 0D46     		mov	r5, r1
 1237 000c 1646     		mov	r6, r2
 172:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1238              		.loc 1 172 3 view .LVU202
 1239 000e 1631     		adds	r1, r1, #22
 1240              	.LVL118:
 172:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1241              		.loc 1 172 3 view .LVU203
 1242 0010 0230     		adds	r0, r0, #2
 1243              	.LVL119:
 172:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1244              		.loc 1 172 3 view .LVU204
 1245 0012 0123     		movs	r3, #1
 1246 0014 0722     		movs	r2, #7
 1247              	.LVL120:
 172:src/lcd.c     ****   lcd_fill_rect (i+3, j+21, 5, 1, col );
 1248              		.loc 1 172 3 view .LVU205
 1249 0016 B847     		blx	r7
 1250              	.LVL121:
 173:src/lcd.c     ****   lcd_fill_rect (i+4, j+20, 3, 1, col );
ARM GAS  /tmp/ccctyiBz.s 			page 32


 1251              		.loc 1 173 3 is_stmt 1 view .LVU206
 1252 0018 05F11501 		add	r1, r5, #21
 1253 001c E01C     		adds	r0, r4, #3
 1254 001e 0096     		str	r6, [sp]
 1255 0020 0123     		movs	r3, #1
 1256 0022 0522     		movs	r2, #5
 1257 0024 B847     		blx	r7
 1258              	.LVL122:
 174:src/lcd.c     **** }
 1259              		.loc 1 174 3 view .LVU207
 1260 0026 0096     		str	r6, [sp]
 1261 0028 05F11401 		add	r1, r5, #20
 1262 002c 201D     		adds	r0, r4, #4
 1263 002e 0123     		movs	r3, #1
 1264 0030 0322     		movs	r2, #3
 1265 0032 B847     		blx	r7
 1266              	.LVL123:
 175:src/lcd.c     **** void exp_middle (int i, int j, int col) {
 1267              		.loc 1 175 1 is_stmt 0 view .LVU208
 1268 0034 03B0     		add	sp, sp, #12
 1269              		.cfi_def_cfa_offset 20
 1270              		@ sp needed
 1271 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1272              	.LVL124:
 1273              	.L69:
 175:src/lcd.c     **** void exp_middle (int i, int j, int col) {
 1274              		.loc 1 175 1 view .LVU209
 1275              		.align	2
 1276              	.L68:
 1277 0038 3D020008 		.word	134218301
 1278              		.cfi_endproc
 1279              	.LFE24:
 1281              		.section	.text.exp_middle,"ax",%progbits
 1282              		.align	1
 1283              		.p2align 2,,3
 1284              		.global	exp_middle
 1285              		.syntax unified
 1286              		.thumb
 1287              		.thumb_func
 1288              		.fpu fpv4-sp-d16
 1290              	exp_middle:
 1291              	.LVL125:
 1292              	.LFB25:
 176:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, col );
 1293              		.loc 1 176 41 is_stmt 1 view -0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 177:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1297              		.loc 1 177 3 view .LVU211
 176:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, col );
 1298              		.loc 1 176 41 is_stmt 0 view .LVU212
 1299 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1300              		.cfi_def_cfa_offset 24
 1301              		.cfi_offset 4, -24
 1302              		.cfi_offset 5, -20
 1303              		.cfi_offset 6, -16
ARM GAS  /tmp/ccctyiBz.s 			page 33


 1304              		.cfi_offset 7, -12
 1305              		.cfi_offset 8, -8
 1306              		.cfi_offset 14, -4
 1307 0004 82B0     		sub	sp, sp, #8
 1308              		.cfi_def_cfa_offset 32
 177:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1309              		.loc 1 177 19 view .LVU213
 1310 0006 00F10408 		add	r8, r0, #4
 177:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1311              		.loc 1 177 3 view .LVU214
 1312 000a 0D4F     		ldr	r7, .L72
 1313 000c 0092     		str	r2, [sp]
 176:src/lcd.c     ****   lcd_fill_rect (i+4, j+10, 5, 1, col );
 1314              		.loc 1 176 41 view .LVU215
 1315 000e 0C46     		mov	r4, r1
 1316 0010 1546     		mov	r5, r2
 1317 0012 0646     		mov	r6, r0
 177:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1318              		.loc 1 177 3 view .LVU216
 1319 0014 0A31     		adds	r1, r1, #10
 1320              	.LVL126:
 177:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1321              		.loc 1 177 3 view .LVU217
 1322 0016 4046     		mov	r0, r8
 1323              	.LVL127:
 177:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1324              		.loc 1 177 3 view .LVU218
 1325 0018 0123     		movs	r3, #1
 1326 001a 0522     		movs	r2, #5
 1327              	.LVL128:
 177:src/lcd.c     ****   lcd_fill_rect (i+3, j+11, 7, 1, col );
 1328              		.loc 1 177 3 view .LVU219
 1329 001c B847     		blx	r7
 1330              	.LVL129:
 178:src/lcd.c     ****   lcd_fill_rect (i+4, j+12, 5, 1, col );
 1331              		.loc 1 178 3 is_stmt 1 view .LVU220
 1332 001e F01C     		adds	r0, r6, #3
 1333 0020 04F10B01 		add	r1, r4, #11
 1334 0024 0095     		str	r5, [sp]
 1335 0026 0123     		movs	r3, #1
 1336 0028 0722     		movs	r2, #7
 1337 002a B847     		blx	r7
 1338              	.LVL130:
 179:src/lcd.c     **** }
 1339              		.loc 1 179 3 view .LVU221
 1340 002c 4046     		mov	r0, r8
 1341 002e 0095     		str	r5, [sp]
 1342 0030 04F10C01 		add	r1, r4, #12
 1343 0034 0123     		movs	r3, #1
 1344 0036 0522     		movs	r2, #5
 1345 0038 B847     		blx	r7
 1346              	.LVL131:
 180:src/lcd.c     **** 
 1347              		.loc 1 180 1 is_stmt 0 view .LVU222
 1348 003a 02B0     		add	sp, sp, #8
 1349              		.cfi_def_cfa_offset 24
 1350              		@ sp needed
ARM GAS  /tmp/ccctyiBz.s 			page 34


 1351 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1352              	.LVL132:
 1353              	.L73:
 180:src/lcd.c     **** 
 1354              		.loc 1 180 1 view .LVU223
 1355              		.align	2
 1356              	.L72:
 1357 0040 3D020008 		.word	134218301
 1358              		.cfi_endproc
 1359              	.LFE25:
 1361              		.section	.rodata.draw_BEG.str1.4,"aMS",%progbits,1
 1362              		.align	2
 1363              	.LC1:
 1364 0000 533A3800 		.ascii	"S:8\000"
 1365              		.section	.text.draw_BEG,"ax",%progbits
 1366              		.align	1
 1367              		.p2align 2,,3
 1368              		.global	draw_BEG
 1369              		.syntax unified
 1370              		.thumb
 1371              		.thumb_func
 1372              		.fpu fpv4-sp-d16
 1374              	draw_BEG:
 1375              	.LVL133:
 1376              	.LFB27:
 353:src/lcd.c     ****   t20->inv = inverse;
 1377              		.loc 1 353 40 is_stmt 1 view -0
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 0
 1380              		@ frame_needed = 0, uses_anonymous_args = 0
 353:src/lcd.c     ****   t20->inv = inverse;
 1381              		.loc 1 353 40 is_stmt 0 view .LVU225
 1382 0000 70B5     		push	{r4, r5, r6, lr}
 1383              		.cfi_def_cfa_offset 16
 1384              		.cfi_offset 4, -16
 1385              		.cfi_offset 5, -12
 1386              		.cfi_offset 6, -8
 1387              		.cfi_offset 14, -4
 354:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1388              		.loc 1 354 3 view .LVU226
 1389 0002 0B4D     		ldr	r5, .L78
 355:src/lcd.c     ****   if (depth == 4) {
 1390              		.loc 1 355 3 view .LVU227
 1391 0004 0B4E     		ldr	r6, .L78+4
 354:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1392              		.loc 1 354 3 view .LVU228
 1393 0006 2B6B     		ldr	r3, [r5, #48]
 353:src/lcd.c     ****   t20->inv = inverse;
 1394              		.loc 1 353 40 view .LVU229
 1395 0008 0446     		mov	r4, r0
 354:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1396              		.loc 1 354 3 is_stmt 1 view .LVU230
 354:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1397              		.loc 1 354 12 is_stmt 0 view .LVU231
 1398 000a 5974     		strb	r1, [r3, #17]
 355:src/lcd.c     ****   if (depth == 4) {
 1399              		.loc 1 355 3 is_stmt 1 view .LVU232
ARM GAS  /tmp/ccctyiBz.s 			page 35


 1400 000c 1846     		mov	r0, r3
 1401              	.LVL134:
 355:src/lcd.c     ****   if (depth == 4) {
 1402              		.loc 1 355 3 is_stmt 0 view .LVU233
 1403 000e 5022     		movs	r2, #80
 1404 0010 40F21D11 		movw	r1, #285
 1405              	.LVL135:
 355:src/lcd.c     ****   if (depth == 4) {
 1406              		.loc 1 355 3 view .LVU234
 1407 0014 B047     		blx	r6
 1408              	.LVL136:
 356:src/lcd.c     ****     lcd_writeText(t20, "S:4");
 1409              		.loc 1 356 3 is_stmt 1 view .LVU235
 356:src/lcd.c     ****     lcd_writeText(t20, "S:4");
 1410              		.loc 1 356 6 is_stmt 0 view .LVU236
 1411 0016 042C     		cmp	r4, #4
 1412 0018 05D0     		beq	.L77
 358:src/lcd.c     ****   }
 359:src/lcd.c     ****   else {
 360:src/lcd.c     ****     lcd_writeText(t20, "S:8");
 1413              		.loc 1 360 5 is_stmt 1 view .LVU237
 1414 001a 286B     		ldr	r0, [r5, #48]
 1415 001c 064B     		ldr	r3, .L78+8
 1416 001e 0749     		ldr	r1, .L78+12
 361:src/lcd.c     ****   }
 362:src/lcd.c     ****   return;
 363:src/lcd.c     **** }
 1417              		.loc 1 363 1 is_stmt 0 view .LVU238
 1418 0020 BDE87040 		pop	{r4, r5, r6, lr}
 1419              		.cfi_remember_state
 1420              		.cfi_restore 14
 1421              		.cfi_restore 6
 1422              		.cfi_restore 5
 1423              		.cfi_restore 4
 1424              		.cfi_def_cfa_offset 0
 1425              	.LVL137:
 360:src/lcd.c     ****   }
 1426              		.loc 1 360 5 view .LVU239
 1427 0024 1847     		bx	r3	@ indirect register sibling call
 1428              	.LVL138:
 1429              	.L77:
 1430              		.cfi_restore_state
 1431              		.loc 1 363 1 view .LVU240
 1432 0026 BDE87040 		pop	{r4, r5, r6, lr}
 1433              		.cfi_restore 14
 1434              		.cfi_restore 6
 1435              		.cfi_restore 5
 1436              		.cfi_restore 4
 1437              		.cfi_def_cfa_offset 0
 1438              	.LVL139:
 1439              		.loc 1 363 1 view .LVU241
 1440 002a FFF7FEBF 		b	draw_BEG.part.0
 1441              	.LVL140:
 1442              	.L79:
 1443 002e 00BF     		.align	2
 1444              	.L78:
 1445 0030 00200010 		.word	268443648
ARM GAS  /tmp/ccctyiBz.s 			page 36


 1446 0034 6D020008 		.word	134218349
 1447 0038 7D020008 		.word	134218365
 1448 003c 00000000 		.word	.LC1
 1449              		.cfi_endproc
 1450              	.LFE27:
 1452              		.section	.rodata.draw_RPN.str1.4,"aMS",%progbits,1
 1453              		.align	2
 1454              	.LC2:
 1455 0000 6552504E 		.ascii	"eRPN\000"
 1455      00
 1456 0005 000000   		.align	2
 1457              	.LC3:
 1458 0008 52504E00 		.ascii	"RPN\000"
 1459              		.section	.text.draw_RPN,"ax",%progbits
 1460              		.align	1
 1461              		.p2align 2,,3
 1462              		.global	draw_RPN
 1463              		.syntax unified
 1464              		.thumb
 1465              		.thumb_func
 1466              		.fpu fpv4-sp-d16
 1468              	draw_RPN:
 1469              	.LVL141:
 1470              	.LFB31:
 364:src/lcd.c     **** 
 365:src/lcd.c     **** void finish_display(void) {
 366:src/lcd.c     ****   draw_PRT();
 367:src/lcd.c     ****   finish_7_segment();
 368:src/lcd.c     ****   finish_alpha_row();
 369:src/lcd.c     **** #ifdef TOP_ROW
 370:src/lcd.c     ****   finish_top_row();
 371:src/lcd.c     **** #endif
 372:src/lcd.c     ****   lcd_refresh();
 373:src/lcd.c     **** }
 374:src/lcd.c     **** 
 375:src/lcd.c     **** void finish_7_segment(void) {
 376:src/lcd.c     ****   for (int i = 0; i <= EXP_SIGN; ++i) {
 377:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 378:src/lcd.c     ****   }
 379:src/lcd.c     **** }
 380:src/lcd.c     **** 
 381:src/lcd.c     **** void finish_alpha_row(void) {
 382:src/lcd.c     ****   for (int i = MATRIX_BASE; i < MAX_DOTS; ++i) {
 383:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 384:src/lcd.c     ****   }
 385:src/lcd.c     **** }
 386:src/lcd.c     **** 
 387:src/lcd.c     **** #ifdef TOP_ROW
 388:src/lcd.c     **** void finish_top_row(void) {
 389:src/lcd.c     ****  for (int i = MB_TOP; i < TOP_DOTS; ++i) {
 390:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 391:src/lcd.c     ****   }
 392:src/lcd.c     **** } 
 393:src/lcd.c     **** #endif
 394:src/lcd.c     **** 
 395:src/lcd.c     **** void draw_RPN(int inverse) {
 1471              		.loc 1 395 28 is_stmt 1 view -0
ARM GAS  /tmp/ccctyiBz.s 			page 37


 1472              		.cfi_startproc
 1473              		@ args = 0, pretend = 0, frame = 0
 1474              		@ frame_needed = 0, uses_anonymous_args = 0
 396:src/lcd.c     ****   t20->inv = inverse;
 1475              		.loc 1 396 3 view .LVU243
 395:src/lcd.c     ****   t20->inv = inverse;
 1476              		.loc 1 395 28 is_stmt 0 view .LVU244
 1477 0000 10B5     		push	{r4, lr}
 1478              		.cfi_def_cfa_offset 8
 1479              		.cfi_offset 4, -8
 1480              		.cfi_offset 14, -4
 1481              		.loc 1 396 3 view .LVU245
 1482 0002 0F4C     		ldr	r4, .L84
 397:src/lcd.c     ****   if (ENTRY_RPN_ENABLED) {
 1483              		.loc 1 397 7 view .LVU246
 1484 0004 0F4A     		ldr	r2, .L84+4
 396:src/lcd.c     ****   t20->inv = inverse;
 1485              		.loc 1 396 3 view .LVU247
 1486 0006 236B     		ldr	r3, [r4, #48]
 1487              		.loc 1 397 7 view .LVU248
 1488 0008 1268     		ldr	r2, [r2]
 396:src/lcd.c     ****   t20->inv = inverse;
 1489              		.loc 1 396 12 view .LVU249
 1490 000a 5874     		strb	r0, [r3, #17]
 1491              		.loc 1 397 3 is_stmt 1 view .LVU250
 1492              		.loc 1 397 6 is_stmt 0 view .LVU251
 1493 000c 92F9DD27 		ldrsb	r2, [r2, #2013]
 1494 0010 002A     		cmp	r2, #0
 398:src/lcd.c     ****     lcd_setXY (t20, 355, Y_ANNUNC-30);
 1495              		.loc 1 398 5 view .LVU252
 1496 0012 1846     		mov	r0, r3
 1497              	.LVL142:
 1498              		.loc 1 398 5 view .LVU253
 1499 0014 4FF06402 		mov	r2, #100
 1500 0018 0B4B     		ldr	r3, .L84+8
 397:src/lcd.c     ****   if (ENTRY_RPN_ENABLED) {
 1501              		.loc 1 397 6 view .LVU254
 1502 001a 08DB     		blt	.L83
 399:src/lcd.c     ****     lcd_writeText(t20, "eRPN");
 400:src/lcd.c     ****   }
 401:src/lcd.c     ****   else {
 402:src/lcd.c     ****     lcd_setXY (t20, 365, Y_ANNUNC-30);
 1503              		.loc 1 402 5 is_stmt 1 view .LVU255
 1504 001c 40F26D11 		movw	r1, #365
 1505 0020 9847     		blx	r3
 1506              	.LVL143:
 403:src/lcd.c     ****     lcd_writeText(t20, "RPN");
 1507              		.loc 1 403 5 view .LVU256
 1508 0022 206B     		ldr	r0, [r4, #48]
 1509 0024 094B     		ldr	r3, .L84+12
 1510 0026 0A49     		ldr	r1, .L84+16
 404:src/lcd.c     ****   }
 405:src/lcd.c     **** }
 1511              		.loc 1 405 1 is_stmt 0 view .LVU257
 1512 0028 BDE81040 		pop	{r4, lr}
 1513              		.cfi_remember_state
 1514              		.cfi_restore 14
ARM GAS  /tmp/ccctyiBz.s 			page 38


 1515              		.cfi_restore 4
 1516              		.cfi_def_cfa_offset 0
 403:src/lcd.c     ****     lcd_writeText(t20, "RPN");
 1517              		.loc 1 403 5 view .LVU258
 1518 002c 1847     		bx	r3	@ indirect register sibling call
 1519              	.LVL144:
 1520              	.L83:
 1521              		.cfi_restore_state
 398:src/lcd.c     ****     lcd_writeText(t20, "eRPN");
 1522              		.loc 1 398 5 is_stmt 1 view .LVU259
 1523 002e 40F26311 		movw	r1, #355
 1524 0032 9847     		blx	r3
 1525              	.LVL145:
 399:src/lcd.c     ****   }
 1526              		.loc 1 399 5 view .LVU260
 1527 0034 206B     		ldr	r0, [r4, #48]
 1528 0036 054B     		ldr	r3, .L84+12
 1529 0038 0649     		ldr	r1, .L84+20
 1530              		.loc 1 405 1 is_stmt 0 view .LVU261
 1531 003a BDE81040 		pop	{r4, lr}
 1532              		.cfi_restore 14
 1533              		.cfi_restore 4
 1534              		.cfi_def_cfa_offset 0
 399:src/lcd.c     ****   }
 1535              		.loc 1 399 5 view .LVU262
 1536 003e 1847     		bx	r3	@ indirect register sibling call
 1537              	.LVL146:
 1538              	.L85:
 1539              		.align	2
 1540              	.L84:
 1541 0040 00200010 		.word	268443648
 1542 0044 00000000 		.word	main_ram
 1543 0048 6D020008 		.word	134218349
 1544 004c 7D020008 		.word	134218365
 1545 0050 08000000 		.word	.LC3
 1546 0054 00000000 		.word	.LC2
 1547              		.cfi_endproc
 1548              	.LFE31:
 1550              		.section	.rodata.draw_RCL.str1.4,"aMS",%progbits,1
 1551              		.align	2
 1552              	.LC4:
 1553 0000 52554E00 		.ascii	"RUN\000"
 1554              		.section	.text.draw_RCL,"ax",%progbits
 1555              		.align	1
 1556              		.p2align 2,,3
 1557              		.global	draw_RCL
 1558              		.syntax unified
 1559              		.thumb
 1560              		.thumb_func
 1561              		.fpu fpv4-sp-d16
 1563              	draw_RCL:
 1564              	.LVL147:
 1565              	.LFB32:
 406:src/lcd.c     **** 
 407:src/lcd.c     **** void draw_RCL(int inverse) {
 1566              		.loc 1 407 28 is_stmt 1 view -0
 1567              		.cfi_startproc
ARM GAS  /tmp/ccctyiBz.s 			page 39


 1568              		@ args = 0, pretend = 0, frame = 0
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 408:src/lcd.c     ****   t20->inv = inverse;
 1570              		.loc 1 408 3 view .LVU264
 407:src/lcd.c     ****   t20->inv = inverse;
 1571              		.loc 1 407 28 is_stmt 0 view .LVU265
 1572 0000 70B5     		push	{r4, r5, r6, lr}
 1573              		.cfi_def_cfa_offset 16
 1574              		.cfi_offset 4, -16
 1575              		.cfi_offset 5, -12
 1576              		.cfi_offset 6, -8
 1577              		.cfi_offset 14, -4
 1578              		.loc 1 408 3 view .LVU266
 1579 0002 074C     		ldr	r4, .L88
 409:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50);
 1580              		.loc 1 409 3 view .LVU267
 1581 0004 074D     		ldr	r5, .L88+4
 408:src/lcd.c     ****   t20->inv = inverse;
 1582              		.loc 1 408 3 view .LVU268
 1583 0006 236B     		ldr	r3, [r4, #48]
 1584              		.loc 1 409 3 view .LVU269
 1585 0008 40F26D11 		movw	r1, #365
 408:src/lcd.c     ****   t20->inv = inverse;
 1586              		.loc 1 408 12 view .LVU270
 1587 000c 5874     		strb	r0, [r3, #17]
 1588              		.loc 1 409 3 is_stmt 1 view .LVU271
 1589 000e 5022     		movs	r2, #80
 1590 0010 1846     		mov	r0, r3
 1591              	.LVL148:
 1592              		.loc 1 409 3 is_stmt 0 view .LVU272
 1593 0012 A847     		blx	r5
 1594              	.LVL149:
 410:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 1595              		.loc 1 410 3 is_stmt 1 view .LVU273
 1596 0014 206B     		ldr	r0, [r4, #48]
 1597 0016 044B     		ldr	r3, .L88+8
 1598 0018 0449     		ldr	r1, .L88+12
 411:src/lcd.c     ****   //  t20->inv = 0;
 412:src/lcd.c     **** }
 1599              		.loc 1 412 1 is_stmt 0 view .LVU274
 1600 001a BDE87040 		pop	{r4, r5, r6, lr}
 1601              		.cfi_restore 14
 1602              		.cfi_restore 6
 1603              		.cfi_restore 5
 1604              		.cfi_restore 4
 1605              		.cfi_def_cfa_offset 0
 410:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 1606              		.loc 1 410 3 view .LVU275
 1607 001e 1847     		bx	r3	@ indirect register sibling call
 1608              	.LVL150:
 1609              	.L89:
 1610              		.align	2
 1611              	.L88:
 1612 0020 00200010 		.word	268443648
 1613 0024 6D020008 		.word	134218349
 1614 0028 7D020008 		.word	134218365
 1615 002c 00000000 		.word	.LC4
ARM GAS  /tmp/ccctyiBz.s 			page 40


 1616              		.cfi_endproc
 1617              	.LFE32:
 1619              		.section	.rodata.draw_LEQ.str1.4,"aMS",%progbits,1
 1620              		.align	2
 1621              	.LC5:
 1622 0000 435F4C4B 		.ascii	"C_LK\000"
 1622      00
 1623 0005 000000   		.align	2
 1624              	.LC6:
 1625 0008 3D00     		.ascii	"=\000"
 1626              		.section	.text.draw_LEQ,"ax",%progbits
 1627              		.align	1
 1628              		.p2align 2,,3
 1629              		.global	draw_LEQ
 1630              		.syntax unified
 1631              		.thumb
 1632              		.thumb_func
 1633              		.fpu fpv4-sp-d16
 1635              	draw_LEQ:
 1636              	.LFB33:
 413:src/lcd.c     **** 
 414:src/lcd.c     **** void draw_LEQ(void) { // little equals
 1637              		.loc 1 414 21 is_stmt 1 view -0
 1638              		.cfi_startproc
 1639              		@ args = 0, pretend = 0, frame = 0
 1640              		@ frame_needed = 0, uses_anonymous_args = 0
 415:src/lcd.c     ****   t20->inv = !(dots[LIT_EQ]&1);
 1641              		.loc 1 415 3 view .LVU277
 414:src/lcd.c     ****   t20->inv = !(dots[LIT_EQ]&1);
 1642              		.loc 1 414 21 is_stmt 0 view .LVU278
 1643 0000 38B5     		push	{r3, r4, r5, lr}
 1644              		.cfi_def_cfa_offset 16
 1645              		.cfi_offset 3, -16
 1646              		.cfi_offset 4, -12
 1647              		.cfi_offset 5, -8
 1648              		.cfi_offset 14, -4
 1649              		.loc 1 415 20 view .LVU279
 1650 0002 154B     		ldr	r3, .L101
 1651              		.loc 1 415 3 view .LVU280
 1652 0004 154C     		ldr	r4, .L101+4
 1653              		.loc 1 415 12 view .LVU281
 1654 0006 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 1655              		.loc 1 415 3 view .LVU282
 1656 000a 206B     		ldr	r0, [r4, #48]
 416:src/lcd.c     ****   lcd_setXY (t20, 360, Y_ANNUNC-70);
 1657              		.loc 1 416 3 view .LVU283
 1658 000c 144D     		ldr	r5, .L101+8
 415:src/lcd.c     ****   t20->inv = !(dots[LIT_EQ]&1);
 1659              		.loc 1 415 12 view .LVU284
 1660 000e DB43     		mvns	r3, r3
 1661 0010 03F00103 		and	r3, r3, #1
 1662 0014 4374     		strb	r3, [r0, #17]
 1663              		.loc 1 416 3 is_stmt 1 view .LVU285
 1664 0016 3C22     		movs	r2, #60
 1665 0018 4FF4B471 		mov	r1, #360
 1666 001c A847     		blx	r5
 1667              	.LVL151:
ARM GAS  /tmp/ccctyiBz.s 			page 41


 417:src/lcd.c     **** #ifdef INCLUDE_C_LOCK
 418:src/lcd.c     ****   if (C_LOCKED) {
 1668              		.loc 1 418 3 view .LVU286
 1669              		.loc 1 418 7 is_stmt 0 view .LVU287
 1670 001e 114B     		ldr	r3, .L101+12
 1671 0020 1B68     		ldr	r3, [r3]
 1672 0022 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 1673              		.loc 1 418 6 view .LVU288
 1674 0026 5207     		lsls	r2, r2, #29
 1675 0028 03D5     		bpl	.L91
 1676              		.loc 1 418 7 discriminator 1 view .LVU289
 1677 002a 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 1678 002e 5B07     		lsls	r3, r3, #29
 1679 0030 09D4     		bmi	.L100
 1680              	.L91:
 419:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 420:src/lcd.c     ****   }
 421:src/lcd.c     ****   else {
 422:src/lcd.c     ****     lcd_writeText(t20, "=");
 1681              		.loc 1 422 5 is_stmt 1 view .LVU290
 1682 0032 0A4A     		ldr	r2, .L101+4
 1683 0034 0C4B     		ldr	r3, .L101+16
 1684 0036 106B     		ldr	r0, [r2, #48]
 1685 0038 0C49     		ldr	r1, .L101+20
 1686 003a 9847     		blx	r3
 1687              	.LVL152:
 423:src/lcd.c     ****   }
 424:src/lcd.c     **** #else
 425:src/lcd.c     ****   lcd_writeText(t20, "=");
 426:src/lcd.c     **** #endif
 427:src/lcd.c     ****   t20->inv = 0;
 1688              		.loc 1 427 3 view .LVU291
 1689 003c 074B     		ldr	r3, .L101+4
 1690              		.loc 1 427 12 is_stmt 0 view .LVU292
 1691 003e 1B6B     		ldr	r3, [r3, #48]
 1692 0040 0022     		movs	r2, #0
 1693 0042 5A74     		strb	r2, [r3, #17]
 428:src/lcd.c     **** }
 1694              		.loc 1 428 1 view .LVU293
 1695 0044 38BD     		pop	{r3, r4, r5, pc}
 1696              	.L100:
 419:src/lcd.c     ****     lcd_writeText(t20, "C_LK");
 1697              		.loc 1 419 5 is_stmt 1 view .LVU294
 1698 0046 084B     		ldr	r3, .L101+16
 1699 0048 206B     		ldr	r0, [r4, #48]
 1700 004a 0949     		ldr	r1, .L101+24
 1701 004c 9847     		blx	r3
 1702              	.LVL153:
 427:src/lcd.c     **** }
 1703              		.loc 1 427 3 view .LVU295
 1704 004e 034B     		ldr	r3, .L101+4
 427:src/lcd.c     **** }
 1705              		.loc 1 427 12 is_stmt 0 view .LVU296
 1706 0050 1B6B     		ldr	r3, [r3, #48]
 1707 0052 0022     		movs	r2, #0
 1708 0054 5A74     		strb	r2, [r3, #17]
 1709              		.loc 1 428 1 view .LVU297
ARM GAS  /tmp/ccctyiBz.s 			page 42


 1710 0056 38BD     		pop	{r3, r4, r5, pc}
 1711              	.L102:
 1712              		.align	2
 1713              	.L101:
 1714 0058 00000000 		.word	.LANCHOR0
 1715 005c 00200010 		.word	268443648
 1716 0060 6D020008 		.word	134218349
 1717 0064 00000000 		.word	main_ram
 1718 0068 7D020008 		.word	134218365
 1719 006c 08000000 		.word	.LC6
 1720 0070 00000000 		.word	.LC5
 1721              		.cfi_endproc
 1722              	.LFE33:
 1724              		.section	.rodata.draw_dot.str1.4,"aMS",%progbits,1
 1725              		.align	2
 1726              	.LC7:
 1727 0000 414C5048 		.ascii	"ALPHA\000"
 1727      4100
 1728 0006 0000     		.align	2
 1729              	.LC8:
 1730 0008 50474D00 		.ascii	"PGM\000"
 1731              		.align	2
 1732              	.LC9:
 1733 000c 52414400 		.ascii	"RAD\000"
 1734              		.align	2
 1735              	.LC10:
 1736 0010 44454700 		.ascii	"DEG\000"
 1737              		.section	.text.draw_dot,"ax",%progbits
 1738              		.align	1
 1739              		.p2align 2,,3
 1740              		.global	draw_dot
 1741              		.syntax unified
 1742              		.thumb
 1743              		.thumb_func
 1744              		.fpu fpv4-sp-d16
 1746              	draw_dot:
 1747              	.LVL154:
 1748              	.LFB26:
 182:src/lcd.c     ****   int x, col = 0, inverse = 1;
 1749              		.loc 1 182 23 is_stmt 1 view -0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 0
 1752              		@ frame_needed = 0, uses_anonymous_args = 0
 183:src/lcd.c     ****   if (dots[n] & 1) {
 1753              		.loc 1 183 3 view .LVU299
 184:src/lcd.c     ****     col = 0xff;
 1754              		.loc 1 184 3 view .LVU300
 182:src/lcd.c     ****   int x, col = 0, inverse = 1;
 1755              		.loc 1 182 23 is_stmt 0 view .LVU301
 1756 0000 70B5     		push	{r4, r5, r6, lr}
 1757              		.cfi_def_cfa_offset 16
 1758              		.cfi_offset 4, -16
 1759              		.cfi_offset 5, -12
 1760              		.cfi_offset 6, -8
 1761              		.cfi_offset 14, -4
 184:src/lcd.c     ****     col = 0xff;
 1762              		.loc 1 184 11 view .LVU302
ARM GAS  /tmp/ccctyiBz.s 			page 43


 1763 0002 B24D     		ldr	r5, .L160
 184:src/lcd.c     ****     col = 0xff;
 1764              		.loc 1 184 6 view .LVU303
 1765 0004 2B5C     		ldrb	r3, [r5, r0]	@ zero_extendqisi2
 186:src/lcd.c     ****   }
 1766              		.loc 1 186 13 view .LVU304
 1767 0006 13F00103 		ands	r3, r3, #1
 1768 000a 0CBF     		ite	eq
 1769 000c 0024     		moveq	r4, #0
 1770 000e FF24     		movne	r4, #255
 1771              	.LVL155:
 189:src/lcd.c     ****     x = XLEFT + DWIDTH*(n/9);
 1772              		.loc 1 189 3 is_stmt 1 view .LVU305
 189:src/lcd.c     ****     x = XLEFT + DWIDTH*(n/9);
 1773              		.loc 1 189 6 is_stmt 0 view .LVU306
 1774 0010 6B28     		cmp	r0, #107
 182:src/lcd.c     ****   int x, col = 0, inverse = 1;
 1775              		.loc 1 182 23 view .LVU307
 1776 0012 82B0     		sub	sp, sp, #8
 1777              		.cfi_def_cfa_offset 24
 189:src/lcd.c     ****     x = XLEFT + DWIDTH*(n/9);
 1778              		.loc 1 189 6 view .LVU308
 1779 0014 17DC     		bgt	.L105
 190:src/lcd.c     ****     switch (n % 9) {  
 1780              		.loc 1 190 5 is_stmt 1 view .LVU309
 190:src/lcd.c     ****     switch (n % 9) {  
 1781              		.loc 1 190 26 is_stmt 0 view .LVU310
 1782 0016 AE4A     		ldr	r2, .L160+4
 1783 0018 C317     		asrs	r3, r0, #31
 1784              	.LVL156:
 190:src/lcd.c     ****     switch (n % 9) {  
 1785              		.loc 1 190 26 view .LVU311
 1786 001a 82FB0012 		smull	r1, r2, r2, r0
 1787 001e C3EB6203 		rsb	r3, r3, r2, asr #1
 190:src/lcd.c     ****     switch (n % 9) {  
 1788              		.loc 1 190 23 view .LVU312
 1789 0022 03EB8302 		add	r2, r3, r3, lsl #2
 191:src/lcd.c     ****     case 0:
 1790              		.loc 1 191 15 view .LVU313
 1791 0026 03EBC303 		add	r3, r3, r3, lsl #3
 190:src/lcd.c     ****     switch (n % 9) {  
 1792              		.loc 1 190 23 view .LVU314
 1793 002a 02EB8205 		add	r5, r2, r2, lsl #2
 1794              	.LVL157:
 191:src/lcd.c     ****     case 0:
 1795              		.loc 1 191 15 view .LVU315
 1796 002e C31A     		subs	r3, r0, r3
 190:src/lcd.c     ****     switch (n % 9) {  
 1797              		.loc 1 190 7 view .LVU316
 1798 0030 05F11A00 		add	r0, r5, #26
 1799              	.LVL158:
 191:src/lcd.c     ****     case 0:
 1800              		.loc 1 191 5 is_stmt 1 view .LVU317
 1801 0034 082B     		cmp	r3, #8
 1802 0036 3ED8     		bhi	.L103
 1803 0038 DFE803F0 		tbb	[pc, r3]
 1804              	.L108:
ARM GAS  /tmp/ccctyiBz.s 			page 44


 1805 003c 7C       		.byte	(.L116-.L108)/2
 1806 003d 83       		.byte	(.L115-.L108)/2
 1807 003e 8A       		.byte	(.L114-.L108)/2
 1808 003f 91       		.byte	(.L113-.L108)/2
 1809 0040 98       		.byte	(.L112-.L108)/2
 1810 0041 9D       		.byte	(.L111-.L108)/2
 1811 0042 A4       		.byte	(.L110-.L108)/2
 1812 0043 A9       		.byte	(.L109-.L108)/2
 1813 0044 B2       		.byte	(.L107-.L108)/2
 1814              	.LVL159:
 1815 0045 00       		.p2align 1
 1816              	.L105:
 222:src/lcd.c     ****     x = XLEFT_EXP + DWIDTH_EXP*((n-108)/7);
 1817              		.loc 1 222 8 view .LVU318
 222:src/lcd.c     ****     x = XLEFT_EXP + DWIDTH_EXP*((n-108)/7);
 1818              		.loc 1 222 11 is_stmt 0 view .LVU319
 1819 0046 8028     		cmp	r0, #128
 1820 0048 37DC     		bgt	.L117
 223:src/lcd.c     ****     switch ((n-108) % 7) {
 1821              		.loc 1 223 5 is_stmt 1 view .LVU320
 223:src/lcd.c     ****     switch ((n-108) % 7) {
 1822              		.loc 1 223 40 is_stmt 0 view .LVU321
 1823 004a A24B     		ldr	r3, .L160+8
 1824              	.LVL160:
 223:src/lcd.c     ****     switch ((n-108) % 7) {
 1825              		.loc 1 223 35 view .LVU322
 1826 004c 6C38     		subs	r0, r0, #108
 1827              	.LVL161:
 223:src/lcd.c     ****     switch ((n-108) % 7) {
 1828              		.loc 1 223 40 view .LVU323
 1829 004e A3FB0023 		umull	r2, r3, r3, r0
 1830 0052 C21A     		subs	r2, r0, r3
 1831 0054 03EB5203 		add	r3, r3, r2, lsr #1
 1832 0058 9B08     		lsrs	r3, r3, #2
 224:src/lcd.c     ****     case 0:
 1833              		.loc 1 224 21 view .LVU324
 1834 005a C3EBC302 		rsb	r2, r3, r3, lsl #3
 1835 005e 801A     		subs	r0, r0, r2
 1836              	.LVL162:
 223:src/lcd.c     ****     switch ((n-108) % 7) {
 1837              		.loc 1 223 31 view .LVU325
 1838 0060 03EBC303 		add	r3, r3, r3, lsl #3
 1839 0064 421E     		subs	r2, r0, #1
 1840 0066 5B00     		lsls	r3, r3, #1
 223:src/lcd.c     ****     switch ((n-108) % 7) {
 1841              		.loc 1 223 7 view .LVU326
 1842 0068 03F5AC70 		add	r0, r3, #344
 1843              	.LVL163:
 224:src/lcd.c     ****     case 0:
 1844              		.loc 1 224 5 is_stmt 1 view .LVU327
 1845 006c 052A     		cmp	r2, #5
 1846 006e 00F29481 		bhi	.L118
 1847 0072 DFE812F0 		tbh	[pc, r2, lsl #1]
 1848              	.L120:
 1849 0076 8501     		.2byte	(.L125-.L120)/2
 1850 0078 6801     		.2byte	(.L124-.L120)/2
 1851 007a 6B01     		.2byte	(.L123-.L120)/2
ARM GAS  /tmp/ccctyiBz.s 			page 45


 1852 007c 7201     		.2byte	(.L122-.L120)/2
 1853 007e 7901     		.2byte	(.L121-.L120)/2
 1854 0080 8001     		.2byte	(.L119-.L120)/2
 1855              	.LVL164:
 1856              		.p2align 1
 1857              	.L141:
 1858              	.LBB56:
 293:src/lcd.c     **** 	  if (d) {
 1859              		.loc 1 293 7 view .LVU328
 293:src/lcd.c     **** 	  if (d) {
 1860              		.loc 1 293 10 is_stmt 0 view .LVU329
 1861 0082 02F00202 		and	r2, r2, #2
 1862 0086 A242     		cmp	r2, r4
 1863 0088 00F07F81 		beq	.L159
 302:src/lcd.c     **** 	    draw_BEG(4, 1);
 1864              		.loc 1 302 4 is_stmt 1 view .LVU330
 302:src/lcd.c     **** 	    draw_BEG(4, 1);
 1865              		.loc 1 302 7 is_stmt 0 view .LVU331
 1866 008c 002C     		cmp	r4, #0
 1867 008e 00F07F81 		beq	.L145
 303:src/lcd.c     **** 	    draw_BEG(8, 0);
 1868              		.loc 1 303 6 is_stmt 1 view .LVU332
 1869              	.LVL165:
 1870              	.LBB57:
 1871              	.LBI57:
 353:src/lcd.c     ****   t20->inv = inverse;
 1872              		.loc 1 353 6 view .LVU333
 1873              	.LBB58:
 354:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1874              		.loc 1 354 3 view .LVU334
 1875 0092 914A     		ldr	r2, .L160+12
 355:src/lcd.c     ****   if (depth == 4) {
 1876              		.loc 1 355 3 is_stmt 0 view .LVU335
 1877 0094 914B     		ldr	r3, .L160+16
 354:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1878              		.loc 1 354 3 view .LVU336
 1879 0096 106B     		ldr	r0, [r2, #48]
 1880              	.LVL166:
 354:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 1881              		.loc 1 354 12 view .LVU337
 1882 0098 0122     		movs	r2, #1
 1883 009a 4274     		strb	r2, [r0, #17]
 1884              	.LVL167:
 355:src/lcd.c     ****   if (depth == 4) {
 1885              		.loc 1 355 3 is_stmt 1 view .LVU338
 1886 009c 40F21D11 		movw	r1, #285
 1887 00a0 5022     		movs	r2, #80
 1888 00a2 9847     		blx	r3
 1889              	.LVL168:
 356:src/lcd.c     ****     lcd_writeText(t20, "S:4");
 1890              		.loc 1 356 3 view .LVU339
 1891 00a4 FFF7FEFF 		bl	draw_BEG.part.0
 1892              	.LVL169:
 362:src/lcd.c     **** }
 1893              		.loc 1 362 3 view .LVU340
 362:src/lcd.c     **** }
 1894              		.loc 1 362 3 is_stmt 0 view .LVU341
ARM GAS  /tmp/ccctyiBz.s 			page 46


 1895              	.LBE58:
 1896              	.LBE57:
 304:src/lcd.c     **** 	    dots[BEG] = 7;
 1897              		.loc 1 304 6 is_stmt 1 view .LVU342
 1898 00a8 0021     		movs	r1, #0
 1899              	.L148:
 304:src/lcd.c     **** 	    dots[BEG] = 7;
 1900              		.loc 1 304 6 is_stmt 0 view .LVU343
 1901 00aa 0820     		movs	r0, #8
 1902 00ac FFF7FEFF 		bl	draw_BEG
 1903              	.LVL170:
 1904              	.L150:
 305:src/lcd.c     **** 	  }
 1905              		.loc 1 305 6 is_stmt 1 view .LVU344
 305:src/lcd.c     **** 	  }
 1906              		.loc 1 305 16 is_stmt 0 view .LVU345
 1907 00b0 0723     		movs	r3, #7
 1908 00b2 85F88830 		strb	r3, [r5, #136]
 1909              	.LVL171:
 1910              	.L103:
 305:src/lcd.c     **** 	  }
 1911              		.loc 1 305 16 view .LVU346
 1912              	.LBE56:
 351:src/lcd.c     **** 
 1913              		.loc 1 351 1 view .LVU347
 1914 00b6 02B0     		add	sp, sp, #8
 1915              		.cfi_remember_state
 1916              		.cfi_def_cfa_offset 16
 1917              		@ sp needed
 1918 00b8 70BD     		pop	{r4, r5, r6, pc}
 1919              	.LVL172:
 1920              	.L117:
 1921              		.cfi_restore_state
 249:src/lcd.c     ****     switch (n) {
 1922              		.loc 1 249 8 is_stmt 1 view .LVU348
 249:src/lcd.c     ****     switch (n) {
 1923              		.loc 1 249 11 is_stmt 0 view .LVU349
 1924 00ba 8D28     		cmp	r0, #141
 1925 00bc 20DC     		bgt	.L126
 1926 00be 8238     		subs	r0, r0, #130
 1927              	.LVL173:
 249:src/lcd.c     ****     switch (n) {
 1928              		.loc 1 249 11 view .LVU350
 1929 00c0 83F00103 		eor	r3, r3, #1
 1930              	.LVL174:
 250:src/lcd.c     ****     case MANT_SIGN:
 1931              		.loc 1 250 5 is_stmt 1 view .LVU351
 1932 00c4 0B28     		cmp	r0, #11
 1933 00c6 00F26F81 		bhi	.L127
 1934 00ca 01A2     		adr	r2, .L129
 1935 00cc 52F820F0 		ldr	pc, [r2, r0, lsl #2]
 1936              		.p2align 2
 1937              	.L129:
 1938 00d0 CD010000 		.word	.L139+1
 1939 00d4 DF010000 		.word	.L138+1
 1940 00d8 FB010000 		.word	.L137+1
 1941 00dc 05020000 		.word	.L136+1
ARM GAS  /tmp/ccctyiBz.s 			page 47


 1942 00e0 5D020000 		.word	.L135+1
 1943 00e4 B7000000 		.word	.L103+1
 1944 00e8 7B020000 		.word	.L134+1
 1945 00ec B5020000 		.word	.L133+1
 1946 00f0 F9020000 		.word	.L132+1
 1947 00f4 2B030000 		.word	.L131+1
 1948 00f8 2F030000 		.word	.L130+1
 1949 00fc C1010000 		.word	.L128+1
 1950              	.LVL175:
 1951              		.p2align 1
 1952              	.L126:
 343:src/lcd.c     ****     lcd_fill_rect ( XLEFT-DWIDTH+5*((n-142)/6)+15, YTOP-(10+6*6)+((n-142)%6)*6, 4, 5, col);
 1953              		.loc 1 343 8 view .LVU352
 343:src/lcd.c     ****     lcd_fill_rect ( XLEFT-DWIDTH+5*((n-142)/6)+15, YTOP-(10+6*6)+((n-142)%6)*6, 4, 5, col);
 1954              		.loc 1 343 11 is_stmt 0 view .LVU353
 1955 0100 B0F5C87F 		cmp	r0, #400
 1956 0104 D7DA     		bge	.L103
 344:src/lcd.c     ****     return;
 1957              		.loc 1 344 5 is_stmt 1 view .LVU354
 344:src/lcd.c     ****     return;
 1958              		.loc 1 344 74 is_stmt 0 view .LVU355
 1959 0106 764B     		ldr	r3, .L160+20
 1960              	.LVL176:
 344:src/lcd.c     ****     return;
 1961              		.loc 1 344 5 view .LVU356
 1962 0108 0094     		str	r4, [sp]
 344:src/lcd.c     ****     return;
 1963              		.loc 1 344 39 view .LVU357
 1964 010a 8E38     		subs	r0, r0, #142
 1965              	.LVL177:
 344:src/lcd.c     ****     return;
 1966              		.loc 1 344 74 view .LVU358
 1967 010c A3FB0023 		umull	r2, r3, r3, r0
 1968 0110 9B08     		lsrs	r3, r3, #2
 1969 0112 03EB4301 		add	r1, r3, r3, lsl #1
 1970 0116 A0EB4101 		sub	r1, r0, r1, lsl #1
 344:src/lcd.c     ****     return;
 1971              		.loc 1 344 77 view .LVU359
 1972 011a 01EB4101 		add	r1, r1, r1, lsl #1
 344:src/lcd.c     ****     return;
 1973              		.loc 1 344 35 view .LVU360
 1974 011e 03EB8303 		add	r3, r3, r3, lsl #2
 344:src/lcd.c     ****     return;
 1975              		.loc 1 344 77 view .LVU361
 1976 0122 4900     		lsls	r1, r1, #1
 344:src/lcd.c     ****     return;
 1977              		.loc 1 344 5 view .LVU362
 1978 0124 03F11000 		add	r0, r3, #16
 1979              	.LVL178:
 344:src/lcd.c     ****     return;
 1980              		.loc 1 344 5 view .LVU363
 1981 0128 6E4C     		ldr	r4, .L160+24
 1982              	.LVL179:
 344:src/lcd.c     ****     return;
 1983              		.loc 1 344 5 view .LVU364
 1984 012a 5431     		adds	r1, r1, #84
 1985 012c 0523     		movs	r3, #5
ARM GAS  /tmp/ccctyiBz.s 			page 48


 1986 012e 0422     		movs	r2, #4
 1987 0130 A047     		blx	r4
 1988              	.LVL180:
 345:src/lcd.c     ****   }
 1989              		.loc 1 345 5 is_stmt 1 view .LVU365
 1990 0132 C0E7     		b	.L103
 1991              	.LVL181:
 1992              	.L116:
 193:src/lcd.c     ****       return;
 1993              		.loc 1 193 7 view .LVU366
 1994 0134 2246     		mov	r2, r4
 1995 0136 8221     		movs	r1, #130
 351:src/lcd.c     **** 
 1996              		.loc 1 351 1 is_stmt 0 view .LVU367
 1997 0138 02B0     		add	sp, sp, #8
 1998              		.cfi_remember_state
 1999              		.cfi_def_cfa_offset 16
 2000              		@ sp needed
 2001 013a BDE87040 		pop	{r4, r5, r6, lr}
 2002              		.cfi_restore 14
 2003              		.cfi_restore 6
 2004              		.cfi_restore 5
 2005              		.cfi_restore 4
 2006              		.cfi_def_cfa_offset 0
 2007              	.LVL182:
 193:src/lcd.c     ****       return;
 2008              		.loc 1 193 7 view .LVU368
 2009 013e FFF7FEBF 		b	top
 2010              	.LVL183:
 2011              	.L115:
 2012              		.cfi_restore_state
 196:src/lcd.c     ****       return;
 2013              		.loc 1 196 7 is_stmt 1 view .LVU369
 2014              	.LBB61:
 2015              	.LBI61:
  98:src/lcd.c     ****   left_side(i, j, col);
 2016              		.loc 1 98 6 view .LVU370
 2017              	.LBB62:
  99:src/lcd.c     **** }
 2018              		.loc 1 99 3 view .LVU371
 2019 0142 2246     		mov	r2, r4
 2020 0144 8221     		movs	r1, #130
 2021              	.LVL184:
 2022              	.L152:
  99:src/lcd.c     **** }
 2023              		.loc 1 99 3 is_stmt 0 view .LVU372
 2024              	.LBE62:
 2025              	.LBE61:
 351:src/lcd.c     **** 
 2026              		.loc 1 351 1 view .LVU373
 2027 0146 02B0     		add	sp, sp, #8
 2028              		.cfi_remember_state
 2029              		.cfi_def_cfa_offset 16
 2030              		@ sp needed
 2031 0148 BDE87040 		pop	{r4, r5, r6, lr}
 2032              		.cfi_restore 14
 2033              		.cfi_restore 6
ARM GAS  /tmp/ccctyiBz.s 			page 49


 2034              		.cfi_restore 5
 2035              		.cfi_restore 4
 2036              		.cfi_def_cfa_offset 0
 2037              	.LVL185:
 2038              	.LBB63:
 2039              	.LBB64:
 102:src/lcd.c     **** }
 2040              		.loc 1 102 3 view .LVU374
 2041 014c FFF7FEBF 		b	left_side
 2042              	.LVL186:
 2043              	.L114:
 2044              		.cfi_restore_state
 102:src/lcd.c     **** }
 2045              		.loc 1 102 3 view .LVU375
 2046              	.LBE64:
 2047              	.LBE63:
 199:src/lcd.c     ****       return;
 2048              		.loc 1 199 7 is_stmt 1 view .LVU376
 2049 0150 2246     		mov	r2, r4
 2050 0152 8221     		movs	r1, #130
 2051              	.LVL187:
 2052              	.L153:
 351:src/lcd.c     **** 
 2053              		.loc 1 351 1 is_stmt 0 view .LVU377
 2054 0154 02B0     		add	sp, sp, #8
 2055              		.cfi_remember_state
 2056              		.cfi_def_cfa_offset 16
 2057              		@ sp needed
 2058 0156 BDE87040 		pop	{r4, r5, r6, lr}
 2059              		.cfi_restore 14
 2060              		.cfi_restore 6
 2061              		.cfi_restore 5
 2062              		.cfi_restore 4
 2063              		.cfi_def_cfa_offset 0
 252:src/lcd.c     ****       return;
 2064              		.loc 1 252 7 view .LVU378
 2065 015a FFF7FEBF 		b	middle
 2066              	.LVL188:
 2067              	.L113:
 2068              		.cfi_restore_state
 202:src/lcd.c     ****       return;
 2069              		.loc 1 202 7 is_stmt 1 view .LVU379
 2070              	.LBB66:
 2071              	.LBI66:
 111:src/lcd.c     ****   right_side(i, j, col);
 2072              		.loc 1 111 6 view .LVU380
 2073              	.LBB67:
 112:src/lcd.c     **** }
 2074              		.loc 1 112 3 view .LVU381
 2075 015e 2246     		mov	r2, r4
 2076 0160 8221     		movs	r1, #130
 2077              	.LVL189:
 2078              	.L154:
 112:src/lcd.c     **** }
 2079              		.loc 1 112 3 is_stmt 0 view .LVU382
 2080              	.LBE67:
 2081              	.LBE66:
ARM GAS  /tmp/ccctyiBz.s 			page 50


 351:src/lcd.c     **** 
 2082              		.loc 1 351 1 view .LVU383
 2083 0162 02B0     		add	sp, sp, #8
 2084              		.cfi_remember_state
 2085              		.cfi_def_cfa_offset 16
 2086              		@ sp needed
 2087 0164 BDE87040 		pop	{r4, r5, r6, lr}
 2088              		.cfi_restore 14
 2089              		.cfi_restore 6
 2090              		.cfi_restore 5
 2091              		.cfi_restore 4
 2092              		.cfi_def_cfa_offset 0
 2093              	.LVL190:
 2094              	.LBB68:
 2095              	.LBB69:
 115:src/lcd.c     **** }
 2096              		.loc 1 115 3 view .LVU384
 2097 0168 FFF7FEBF 		b	right_side
 2098              	.LVL191:
 2099              	.L112:
 2100              		.cfi_restore_state
 115:src/lcd.c     **** }
 2101              		.loc 1 115 3 view .LVU385
 2102              	.LBE69:
 2103              	.LBE68:
 205:src/lcd.c     ****       return;
 2104              		.loc 1 205 7 is_stmt 1 view .LVU386
 2105              	.LBB71:
 2106              	.LBI63:
 101:src/lcd.c     ****   left_side(i-2, j+19, col);
 2107              		.loc 1 101 6 view .LVU387
 2108              	.LBB65:
 102:src/lcd.c     **** }
 2109              		.loc 1 102 3 view .LVU388
 2110 016c 2246     		mov	r2, r4
 2111 016e 05F11800 		add	r0, r5, #24
 2112              	.LVL192:
 102:src/lcd.c     **** }
 2113              		.loc 1 102 3 is_stmt 0 view .LVU389
 2114 0172 9521     		movs	r1, #149
 2115 0174 E7E7     		b	.L152
 2116              	.LVL193:
 2117              	.L111:
 102:src/lcd.c     **** }
 2118              		.loc 1 102 3 view .LVU390
 2119              	.LBE65:
 2120              	.LBE71:
 208:src/lcd.c     ****       return;
 2121              		.loc 1 208 7 is_stmt 1 view .LVU391
 2122 0176 2246     		mov	r2, r4
 2123 0178 8221     		movs	r1, #130
 351:src/lcd.c     **** 
 2124              		.loc 1 351 1 is_stmt 0 view .LVU392
 2125 017a 02B0     		add	sp, sp, #8
 2126              		.cfi_remember_state
 2127              		.cfi_def_cfa_offset 16
 2128              		@ sp needed
ARM GAS  /tmp/ccctyiBz.s 			page 51


 2129 017c BDE87040 		pop	{r4, r5, r6, lr}
 2130              		.cfi_restore 14
 2131              		.cfi_restore 6
 2132              		.cfi_restore 5
 2133              		.cfi_restore 4
 2134              		.cfi_def_cfa_offset 0
 2135              	.LVL194:
 208:src/lcd.c     ****       return;
 2136              		.loc 1 208 7 view .LVU393
 2137 0180 FFF7FEBF 		b	bottom
 2138              	.LVL195:
 2139              	.L110:
 2140              		.cfi_restore_state
 211:src/lcd.c     ****       return;
 2141              		.loc 1 211 7 is_stmt 1 view .LVU394
 2142              	.LBB72:
 2143              	.LBI68:
 114:src/lcd.c     ****   right_side(i-2, j+19, col);
 2144              		.loc 1 114 6 view .LVU395
 2145              	.LBB70:
 115:src/lcd.c     **** }
 2146              		.loc 1 115 3 view .LVU396
 2147 0184 2246     		mov	r2, r4
 2148 0186 05F11800 		add	r0, r5, #24
 2149              	.LVL196:
 115:src/lcd.c     **** }
 2150              		.loc 1 115 3 is_stmt 0 view .LVU397
 2151 018a 9521     		movs	r1, #149
 2152 018c E9E7     		b	.L154
 2153              	.LVL197:
 2154              	.L109:
 115:src/lcd.c     **** }
 2155              		.loc 1 115 3 view .LVU398
 2156              	.LBE70:
 2157              	.LBE72:
 214:src/lcd.c     ****       return;
 2158              		.loc 1 214 7 is_stmt 1 view .LVU399
 2159              	.LBB73:
 2160              	.LBI73:
 134:src/lcd.c     ****   lcd_fill_rect (i+19, j+40, 5, 5, col);
 2161              		.loc 1 134 6 view .LVU400
 2162              	.LBB74:
 135:src/lcd.c     **** }
 2163              		.loc 1 135 3 view .LVU401
 2164 018e 0523     		movs	r3, #5
 2165 0190 0094     		str	r4, [sp]
 2166 0192 05F12D00 		add	r0, r5, #45
 2167              	.LVL198:
 135:src/lcd.c     **** }
 2168              		.loc 1 135 3 is_stmt 0 view .LVU402
 2169 0196 534C     		ldr	r4, .L160+24
 2170              	.LVL199:
 135:src/lcd.c     **** }
 2171              		.loc 1 135 3 view .LVU403
 2172 0198 1A46     		mov	r2, r3
 2173 019a AA21     		movs	r1, #170
 2174 019c A047     		blx	r4
ARM GAS  /tmp/ccctyiBz.s 			page 52


 2175              	.LVL200:
 135:src/lcd.c     **** }
 2176              		.loc 1 135 3 view .LVU404
 2177              	.LBE74:
 2178              	.LBE73:
 215:src/lcd.c     ****     case 8:
 2179              		.loc 1 215 7 is_stmt 1 view .LVU405
 2180 019e 8AE7     		b	.L103
 2181              	.LVL201:
 2182              	.L107:
 217:src/lcd.c     ****       return;
 2183              		.loc 1 217 7 view .LVU406
 2184              	.LBB75:
 2185              	.LBI75:
 137:src/lcd.c     ****   lcd_fill_rect (i+21, j+45, 3, 3, col);
 2186              		.loc 1 137 6 view .LVU407
 2187              	.LBB76:
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 2188              		.loc 1 138 3 view .LVU408
 2189 01a0 0323     		movs	r3, #3
 2190 01a2 1A46     		mov	r2, r3
 2191 01a4 05F12F00 		add	r0, r5, #47
 2192              	.LVL202:
 138:src/lcd.c     ****   lcd_fill_rect (i+19, j+48, 3, 3, col);
 2193              		.loc 1 138 3 is_stmt 0 view .LVU409
 2194 01a8 4E4E     		ldr	r6, .L160+24
 2195 01aa 0094     		str	r4, [sp]
 2196 01ac AF21     		movs	r1, #175
 2197 01ae B047     		blx	r6
 2198              	.LVL203:
 139:src/lcd.c     **** }
 2199              		.loc 1 139 3 is_stmt 1 view .LVU410
 2200 01b0 0323     		movs	r3, #3
 2201 01b2 0094     		str	r4, [sp]
 2202 01b4 05F12D00 		add	r0, r5, #45
 2203 01b8 1A46     		mov	r2, r3
 2204 01ba B221     		movs	r1, #178
 2205 01bc B047     		blx	r6
 2206              	.LVL204:
 139:src/lcd.c     **** }
 2207              		.loc 1 139 3 is_stmt 0 view .LVU411
 2208              	.LBE76:
 2209              	.LBE75:
 218:src/lcd.c     ****     default:;
 2210              		.loc 1 218 7 is_stmt 1 view .LVU412
 2211 01be 7AE7     		b	.L103
 2212              	.LVL205:
 2213              	.L128:
 338:src/lcd.c     ****       return;
 2214              		.loc 1 338 7 view .LVU413
 2215 01c0 1846     		mov	r0, r3
 2216              	.LVL206:
 351:src/lcd.c     **** 
 2217              		.loc 1 351 1 is_stmt 0 view .LVU414
 2218 01c2 02B0     		add	sp, sp, #8
 2219              		.cfi_remember_state
 2220              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccctyiBz.s 			page 53


 2221              		@ sp needed
 2222 01c4 BDE87040 		pop	{r4, r5, r6, lr}
 2223              		.cfi_restore 14
 2224              		.cfi_restore 6
 2225              		.cfi_restore 5
 2226              		.cfi_restore 4
 2227              		.cfi_def_cfa_offset 0
 2228              	.LVL207:
 338:src/lcd.c     ****       return;
 2229              		.loc 1 338 7 view .LVU415
 2230 01c8 FFF7FEBF 		b	draw_RPN
 2231              	.LVL208:
 2232              	.L139:
 2233              		.cfi_restore_state
 255:src/lcd.c     ****       return;
 2234              		.loc 1 255 7 is_stmt 1 view .LVU416
 2235 01cc 2246     		mov	r2, r4
 2236 01ce 8221     		movs	r1, #130
 2237 01d0 4FF4A370 		mov	r0, #326
 2238              	.LVL209:
 2239              	.L157:
 351:src/lcd.c     **** 
 2240              		.loc 1 351 1 is_stmt 0 view .LVU417
 2241 01d4 02B0     		add	sp, sp, #8
 2242              		.cfi_remember_state
 2243              		.cfi_def_cfa_offset 16
 2244              		@ sp needed
 2245 01d6 BDE87040 		pop	{r4, r5, r6, lr}
 2246              		.cfi_restore 14
 2247              		.cfi_restore 6
 2248              		.cfi_restore 5
 2249              		.cfi_restore 4
 2250              		.cfi_def_cfa_offset 0
 2251              	.LVL210:
 255:src/lcd.c     ****       return;
 2252              		.loc 1 255 7 view .LVU418
 2253 01da FFF7FEBF 		b	exp_middle
 2254              	.LVL211:
 2255              	.L138:
 2256              		.cfi_restore_state
 258:src/lcd.c     ****       lcd_fill_rect (250, Y_ANNUNC-24, 15, 4, col);
 2257              		.loc 1 258 7 is_stmt 1 view .LVU419
 2258 01de 414D     		ldr	r5, .L160+24
 2259 01e0 0094     		str	r4, [sp]
 2260 01e2 0423     		movs	r3, #4
 2261              	.LVL212:
 258:src/lcd.c     ****       lcd_fill_rect (250, Y_ANNUNC-24, 15, 4, col);
 2262              		.loc 1 258 7 is_stmt 0 view .LVU420
 2263 01e4 0F22     		movs	r2, #15
 2264 01e6 6021     		movs	r1, #96
 2265 01e8 FA20     		movs	r0, #250
 2266              	.LVL213:
 258:src/lcd.c     ****       lcd_fill_rect (250, Y_ANNUNC-24, 15, 4, col);
 2267              		.loc 1 258 7 view .LVU421
 2268 01ea A847     		blx	r5
 2269              	.LVL214:
 259:src/lcd.c     ****       return;
ARM GAS  /tmp/ccctyiBz.s 			page 54


 2270              		.loc 1 259 7 is_stmt 1 view .LVU422
 2271 01ec 0094     		str	r4, [sp]
 2272 01ee 0423     		movs	r3, #4
 2273 01f0 0F22     		movs	r2, #15
 2274 01f2 6A21     		movs	r1, #106
 2275 01f4 FA20     		movs	r0, #250
 2276 01f6 A847     		blx	r5
 2277              	.LVL215:
 260:src/lcd.c     ****     case LIT_EQ:
 2278              		.loc 1 260 7 view .LVU423
 2279 01f8 5DE7     		b	.L103
 2280              	.LVL216:
 2281              	.L137:
 262:src/lcd.c     ****       return;
 2282              		.loc 1 262 7 view .LVU424
 351:src/lcd.c     **** 
 2283              		.loc 1 351 1 is_stmt 0 view .LVU425
 2284 01fa 02B0     		add	sp, sp, #8
 2285              		.cfi_remember_state
 2286              		.cfi_def_cfa_offset 16
 2287              		@ sp needed
 2288 01fc BDE87040 		pop	{r4, r5, r6, lr}
 2289              		.cfi_restore 14
 2290              		.cfi_restore 6
 2291              		.cfi_restore 5
 2292              		.cfi_restore 4
 2293              		.cfi_def_cfa_offset 0
 2294              	.LVL217:
 262:src/lcd.c     ****       return;
 2295              		.loc 1 262 7 view .LVU426
 2296 0200 FFF7FEBF 		b	draw_LEQ
 2297              	.LVL218:
 2298              	.L136:
 2299              		.cfi_restore_state
 265:src/lcd.c     ****       lcd_fill_rect(285,Y_ANNUNC-55,9,1,col);
 2300              		.loc 1 265 7 is_stmt 1 view .LVU427
 2301 0204 374D     		ldr	r5, .L160+24
 2302 0206 0094     		str	r4, [sp]
 2303 0208 0C23     		movs	r3, #12
 2304              	.LVL219:
 265:src/lcd.c     ****       lcd_fill_rect(285,Y_ANNUNC-55,9,1,col);
 2305              		.loc 1 265 7 is_stmt 0 view .LVU428
 2306 020a 0522     		movs	r2, #5
 2307 020c 3F21     		movs	r1, #63
 2308 020e 40F21F10 		movw	r0, #287
 2309 0212 A847     		blx	r5
 2310              	.LVL220:
 266:src/lcd.c     ****       lcd_fill_rect(286,Y_ANNUNC-54,7,1,col);
 2311              		.loc 1 266 7 is_stmt 1 view .LVU429
 2312 0214 0094     		str	r4, [sp]
 2313 0216 0123     		movs	r3, #1
 2314 0218 0922     		movs	r2, #9
 2315 021a 4B21     		movs	r1, #75
 2316 021c 40F21D10 		movw	r0, #285
 2317 0220 A847     		blx	r5
 2318              	.LVL221:
 267:src/lcd.c     ****       lcd_fill_rect(287,Y_ANNUNC-53,5,1,col);
ARM GAS  /tmp/ccctyiBz.s 			page 55


 2319              		.loc 1 267 7 view .LVU430
 2320 0222 0094     		str	r4, [sp]
 2321 0224 0123     		movs	r3, #1
 2322 0226 0722     		movs	r2, #7
 2323 0228 4C21     		movs	r1, #76
 2324 022a 4FF48F70 		mov	r0, #286
 2325 022e A847     		blx	r5
 2326              	.LVL222:
 268:src/lcd.c     ****       lcd_fill_rect(288,Y_ANNUNC-52,3,1,col);
 2327              		.loc 1 268 7 view .LVU431
 2328 0230 0094     		str	r4, [sp]
 2329 0232 0123     		movs	r3, #1
 2330 0234 0522     		movs	r2, #5
 2331 0236 4D21     		movs	r1, #77
 2332 0238 40F21F10 		movw	r0, #287
 2333 023c A847     		blx	r5
 2334              	.LVL223:
 269:src/lcd.c     ****       lcd_fill_rect(289,Y_ANNUNC-51,1,1,col);
 2335              		.loc 1 269 7 view .LVU432
 2336 023e 0094     		str	r4, [sp]
 2337 0240 0123     		movs	r3, #1
 2338 0242 0322     		movs	r2, #3
 2339 0244 4E21     		movs	r1, #78
 2340 0246 4FF49070 		mov	r0, #288
 2341 024a A847     		blx	r5
 2342              	.LVL224:
 270:src/lcd.c     ****       return;
 2343              		.loc 1 270 7 view .LVU433
 2344 024c 0123     		movs	r3, #1
 2345 024e 0094     		str	r4, [sp]
 2346 0250 1A46     		mov	r2, r3
 2347 0252 4F21     		movs	r1, #79
 2348 0254 40F22110 		movw	r0, #289
 2349 0258 A847     		blx	r5
 2350              	.LVL225:
 271:src/lcd.c     ****     case INPUT:
 2351              		.loc 1 271 7 view .LVU434
 2352 025a 2CE7     		b	.L103
 2353              	.LVL226:
 2354              	.L135:
 273:src/lcd.c     ****       lcd_setXY(t20, 305, Y_ANNUNC-70);
 2355              		.loc 1 273 7 view .LVU435
 2356 025c 1E4C     		ldr	r4, .L160+12
 2357              	.LVL227:
 274:src/lcd.c     ****       lcd_writeText(t20,"ALPHA");
 2358              		.loc 1 274 7 is_stmt 0 view .LVU436
 2359 025e 1F4D     		ldr	r5, .L160+16
 273:src/lcd.c     ****       lcd_setXY(t20, 305, Y_ANNUNC-70);
 2360              		.loc 1 273 7 view .LVU437
 2361 0260 206B     		ldr	r0, [r4, #48]
 274:src/lcd.c     ****       lcd_writeText(t20,"ALPHA");
 2362              		.loc 1 274 7 view .LVU438
 2363 0262 40F23111 		movw	r1, #305
 273:src/lcd.c     ****       lcd_setXY(t20, 305, Y_ANNUNC-70);
 2364              		.loc 1 273 16 view .LVU439
 2365 0266 4374     		strb	r3, [r0, #17]
 274:src/lcd.c     ****       lcd_writeText(t20,"ALPHA");
ARM GAS  /tmp/ccctyiBz.s 			page 56


 2366              		.loc 1 274 7 is_stmt 1 view .LVU440
 2367 0268 3C22     		movs	r2, #60
 2368 026a A847     		blx	r5
 2369              	.LVL228:
 275:src/lcd.c     ****       return;
 2370              		.loc 1 275 7 view .LVU441
 2371 026c 206B     		ldr	r0, [r4, #48]
 2372 026e 1E4B     		ldr	r3, .L160+28
 2373 0270 1E49     		ldr	r1, .L160+32
 2374              	.L155:
 351:src/lcd.c     **** 
 2375              		.loc 1 351 1 is_stmt 0 view .LVU442
 2376 0272 02B0     		add	sp, sp, #8
 2377              		.cfi_remember_state
 2378              		.cfi_def_cfa_offset 16
 2379              		@ sp needed
 2380 0274 BDE87040 		pop	{r4, r5, r6, lr}
 2381              		.cfi_restore 14
 2382              		.cfi_restore 6
 2383              		.cfi_restore 5
 2384              		.cfi_restore 4
 2385              		.cfi_def_cfa_offset 0
 335:src/lcd.c     ****       return;
 2386              		.loc 1 335 7 view .LVU443
 2387 0278 1847     		bx	r3	@ indirect register sibling call
 2388              	.LVL229:
 2389              	.L134:
 2390              		.cfi_restore_state
 2391              	.LBB77:
 282:src/lcd.c     **** 	if (!(dots[BEG] & 8)) { // test bit 3;
 2392              		.loc 1 282 2 is_stmt 1 view .LVU444
 282:src/lcd.c     **** 	if (!(dots[BEG] & 8)) { // test bit 3;
 2393              		.loc 1 282 16 is_stmt 0 view .LVU445
 2394 027a 1D4B     		ldr	r3, .L160+36
 2395              	.LVL230:
 283:src/lcd.c     **** 	  if (d) {
 2396              		.loc 1 283 12 view .LVU446
 2397 027c 95F88820 		ldrb	r2, [r5, #136]	@ zero_extendqisi2
 282:src/lcd.c     **** 	if (!(dots[BEG] & 8)) { // test bit 3;
 2398              		.loc 1 282 16 view .LVU447
 2399 0280 1B68     		ldr	r3, [r3]
 2400 0282 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 283:src/lcd.c     **** 	  if (d) {
 2401              		.loc 1 283 5 view .LVU448
 2402 0286 12F00801 		ands	r1, r2, #8
 282:src/lcd.c     **** 	if (!(dots[BEG] & 8)) { // test bit 3;
 2403              		.loc 1 282 16 view .LVU449
 2404 028a C3F3C004 		ubfx	r4, r3, #3, #1
 2405              	.LVL231:
 283:src/lcd.c     **** 	  if (d) {
 2406              		.loc 1 283 2 is_stmt 1 view .LVU450
 283:src/lcd.c     **** 	  if (d) {
 2407              		.loc 1 283 5 is_stmt 0 view .LVU451
 2408 028e 7FF4F8AE 		bne	.L141
 284:src/lcd.c     **** 	    draw_BEG(8, 0);
 2409              		.loc 1 284 4 is_stmt 1 view .LVU452
 284:src/lcd.c     **** 	    draw_BEG(8, 0);
ARM GAS  /tmp/ccctyiBz.s 			page 57


 2410              		.loc 1 284 7 is_stmt 0 view .LVU453
 2411 0292 002C     		cmp	r4, #0
 2412 0294 7FF409AF 		bne	.L148
 2413              	.LVL232:
 2414              	.L149:
 309:src/lcd.c     **** 	    dots[BEG] = 4;
 2415              		.loc 1 309 6 is_stmt 1 view .LVU454
 2416              	.LBB59:
 2417              	.LBI59:
 353:src/lcd.c     ****   t20->inv = inverse;
 2418              		.loc 1 353 6 view .LVU455
 2419              	.LBB60:
 354:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 2420              		.loc 1 354 3 view .LVU456
 2421 0298 0F4A     		ldr	r2, .L160+12
 355:src/lcd.c     ****   if (depth == 4) {
 2422              		.loc 1 355 3 is_stmt 0 view .LVU457
 2423 029a 104B     		ldr	r3, .L160+16
 354:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 2424              		.loc 1 354 3 view .LVU458
 2425 029c 106B     		ldr	r0, [r2, #48]
 355:src/lcd.c     ****   if (depth == 4) {
 2426              		.loc 1 355 3 view .LVU459
 2427 029e 40F21D11 		movw	r1, #285
 2428 02a2 5022     		movs	r2, #80
 354:src/lcd.c     ****   lcd_setXY (t20, 285, Y_ANNUNC-50);
 2429              		.loc 1 354 12 view .LVU460
 2430 02a4 4474     		strb	r4, [r0, #17]
 355:src/lcd.c     ****   if (depth == 4) {
 2431              		.loc 1 355 3 is_stmt 1 view .LVU461
 2432 02a6 9847     		blx	r3
 2433              	.LVL233:
 356:src/lcd.c     ****     lcd_writeText(t20, "S:4");
 2434              		.loc 1 356 3 view .LVU462
 2435 02a8 FFF7FEFF 		bl	draw_BEG.part.0
 2436              	.LVL234:
 2437              	.L151:
 362:src/lcd.c     **** }
 2438              		.loc 1 362 3 view .LVU463
 2439              	.LBE60:
 2440              	.LBE59:
 310:src/lcd.c     **** 	  }
 2441              		.loc 1 310 6 view .LVU464
 310:src/lcd.c     **** 	  }
 2442              		.loc 1 310 16 is_stmt 0 view .LVU465
 2443 02ac 0423     		movs	r3, #4
 2444 02ae 85F88830 		strb	r3, [r5, #136]
 2445 02b2 00E7     		b	.L103
 2446              	.LVL235:
 2447              	.L133:
 310:src/lcd.c     **** 	  }
 2448              		.loc 1 310 16 view .LVU466
 2449              	.LBE77:
 321:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-50);
 2450              		.loc 1 321 7 is_stmt 1 view .LVU467
 2451 02b4 084C     		ldr	r4, .L160+12
 2452              	.LVL236:
ARM GAS  /tmp/ccctyiBz.s 			page 58


 322:src/lcd.c     ****       lcd_writeText(t20, "PGM");
 2453              		.loc 1 322 7 is_stmt 0 view .LVU468
 2454 02b6 094D     		ldr	r5, .L160+16
 321:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-50);
 2455              		.loc 1 321 7 view .LVU469
 2456 02b8 206B     		ldr	r0, [r4, #48]
 322:src/lcd.c     ****       lcd_writeText(t20, "PGM");
 2457              		.loc 1 322 7 view .LVU470
 2458 02ba 40F24511 		movw	r1, #325
 321:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-50);
 2459              		.loc 1 321 16 view .LVU471
 2460 02be 4374     		strb	r3, [r0, #17]
 322:src/lcd.c     ****       lcd_writeText(t20, "PGM");
 2461              		.loc 1 322 7 is_stmt 1 view .LVU472
 2462 02c0 5022     		movs	r2, #80
 2463 02c2 A847     		blx	r5
 2464              	.LVL237:
 323:src/lcd.c     ****       return;
 2465              		.loc 1 323 7 view .LVU473
 2466 02c4 206B     		ldr	r0, [r4, #48]
 2467 02c6 084B     		ldr	r3, .L160+28
 2468 02c8 0A49     		ldr	r1, .L160+40
 2469 02ca D2E7     		b	.L155
 2470              	.L161:
 2471              		.align	2
 2472              	.L160:
 2473 02cc 00000000 		.word	.LANCHOR0
 2474 02d0 398EE338 		.word	954437177
 2475 02d4 25499224 		.word	613566757
 2476 02d8 00200010 		.word	268443648
 2477 02dc 6D020008 		.word	134218349
 2478 02e0 ABAAAAAA 		.word	-1431655765
 2479 02e4 3D020008 		.word	134218301
 2480 02e8 7D020008 		.word	134218365
 2481 02ec 00000000 		.word	.LC7
 2482 02f0 00000000 		.word	main_ram
 2483 02f4 08000000 		.word	.LC8
 2484              	.LVL238:
 2485              	.L132:
 326:src/lcd.c     ****     case RAD:
 2486              		.loc 1 326 7 view .LVU474
 2487              	.LBB78:
 2488              	.LBI78:
 407:src/lcd.c     ****   t20->inv = inverse;
 2489              		.loc 1 407 6 view .LVU475
 2490              	.LBB79:
 408:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50);
 2491              		.loc 1 408 3 view .LVU476
 2492 02f8 2D4C     		ldr	r4, .L162
 2493              	.LVL239:
 409:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 2494              		.loc 1 409 3 is_stmt 0 view .LVU477
 2495 02fa 2E4E     		ldr	r6, .L162+4
 408:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50);
 2496              		.loc 1 408 3 view .LVU478
 2497 02fc 206B     		ldr	r0, [r4, #48]
 408:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50);
ARM GAS  /tmp/ccctyiBz.s 			page 59


 2498              		.loc 1 408 12 view .LVU479
 2499 02fe DDB2     		uxtb	r5, r3
 408:src/lcd.c     ****   lcd_setXY (t20, 365, Y_ANNUNC-50);
 2500              		.loc 1 408 12 view .LVU480
 2501 0300 4574     		strb	r5, [r0, #17]
 409:src/lcd.c     ****   lcd_writeText(t20, "RUN");
 2502              		.loc 1 409 3 is_stmt 1 view .LVU481
 2503 0302 40F26D11 		movw	r1, #365
 2504 0306 5022     		movs	r2, #80
 2505 0308 B047     		blx	r6
 2506              	.LVL240:
 410:src/lcd.c     ****   //  t20->inv = 0;
 2507              		.loc 1 410 3 view .LVU482
 2508 030a 206B     		ldr	r0, [r4, #48]
 2509 030c 2A4B     		ldr	r3, .L162+8
 2510 030e 2B49     		ldr	r1, .L162+12
 2511 0310 9847     		blx	r3
 2512              	.LVL241:
 2513              	.L140:
 410:src/lcd.c     ****   //  t20->inv = 0;
 2514              		.loc 1 410 3 is_stmt 0 view .LVU483
 2515              	.LBE79:
 2516              	.LBE78:
 328:src/lcd.c     ****       lcd_setXY (t20, 285, Y_ANNUNC-30);
 2517              		.loc 1 328 7 is_stmt 1 view .LVU484
 2518 0312 274C     		ldr	r4, .L162
 329:src/lcd.c     ****       lcd_writeText(t20, "RAD");
 2519              		.loc 1 329 7 is_stmt 0 view .LVU485
 2520 0314 274B     		ldr	r3, .L162+4
 328:src/lcd.c     ****       lcd_setXY (t20, 285, Y_ANNUNC-30);
 2521              		.loc 1 328 7 view .LVU486
 2522 0316 206B     		ldr	r0, [r4, #48]
 329:src/lcd.c     ****       lcd_writeText(t20, "RAD");
 2523              		.loc 1 329 7 view .LVU487
 2524 0318 40F21D11 		movw	r1, #285
 328:src/lcd.c     ****       lcd_setXY (t20, 285, Y_ANNUNC-30);
 2525              		.loc 1 328 16 view .LVU488
 2526 031c 4574     		strb	r5, [r0, #17]
 329:src/lcd.c     ****       lcd_writeText(t20, "RAD");
 2527              		.loc 1 329 7 is_stmt 1 view .LVU489
 2528 031e 6422     		movs	r2, #100
 2529 0320 9847     		blx	r3
 2530              	.LVL242:
 330:src/lcd.c     ****       return;
 2531              		.loc 1 330 7 view .LVU490
 2532 0322 206B     		ldr	r0, [r4, #48]
 2533 0324 244B     		ldr	r3, .L162+8
 2534 0326 2649     		ldr	r1, .L162+16
 2535 0328 A3E7     		b	.L155
 2536              	.LVL243:
 2537              	.L131:
 330:src/lcd.c     ****       return;
 2538              		.loc 1 330 7 is_stmt 0 view .LVU491
 2539 032a DDB2     		uxtb	r5, r3
 2540 032c F1E7     		b	.L140
 2541              	.L130:
 333:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-30);
ARM GAS  /tmp/ccctyiBz.s 			page 60


 2542              		.loc 1 333 7 is_stmt 1 view .LVU492
 2543 032e 204C     		ldr	r4, .L162
 2544              	.LVL244:
 334:src/lcd.c     ****       lcd_writeText(t20, "DEG");
 2545              		.loc 1 334 7 is_stmt 0 view .LVU493
 2546 0330 204D     		ldr	r5, .L162+4
 333:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-30);
 2547              		.loc 1 333 7 view .LVU494
 2548 0332 206B     		ldr	r0, [r4, #48]
 334:src/lcd.c     ****       lcd_writeText(t20, "DEG");
 2549              		.loc 1 334 7 view .LVU495
 2550 0334 40F24511 		movw	r1, #325
 333:src/lcd.c     ****       lcd_setXY (t20, 325, Y_ANNUNC-30);
 2551              		.loc 1 333 16 view .LVU496
 2552 0338 4374     		strb	r3, [r0, #17]
 334:src/lcd.c     ****       lcd_writeText(t20, "DEG");
 2553              		.loc 1 334 7 is_stmt 1 view .LVU497
 2554 033a 6422     		movs	r2, #100
 2555 033c A847     		blx	r5
 2556              	.LVL245:
 335:src/lcd.c     ****       return;
 2557              		.loc 1 335 7 view .LVU498
 2558 033e 206B     		ldr	r0, [r4, #48]
 2559 0340 1D4B     		ldr	r3, .L162+8
 2560 0342 2049     		ldr	r1, .L162+20
 2561 0344 95E7     		b	.L155
 2562              	.LVL246:
 2563              	.L124:
 232:src/lcd.c     ****       return;
 2564              		.loc 1 232 7 view .LVU499
 2565 0346 2246     		mov	r2, r4
 2566 0348 8221     		movs	r1, #130
 2567 034a 43E7     		b	.L157
 2568              	.L123:
 235:src/lcd.c     ****       return;
 2569              		.loc 1 235 7 view .LVU500
 2570              	.LVL247:
 2571              	.LBB80:
 2572              	.LBI80:
 160:src/lcd.c     ****   exp_right_side(i, j, col);
 2573              		.loc 1 160 6 view .LVU501
 2574              	.LBB81:
 161:src/lcd.c     **** }
 2575              		.loc 1 161 3 view .LVU502
 2576 034c 2246     		mov	r2, r4
 2577 034e 8221     		movs	r1, #130
 2578              	.LVL248:
 2579              	.L158:
 161:src/lcd.c     **** }
 2580              		.loc 1 161 3 is_stmt 0 view .LVU503
 2581              	.LBE81:
 2582              	.LBE80:
 351:src/lcd.c     **** 
 2583              		.loc 1 351 1 view .LVU504
 2584 0350 02B0     		add	sp, sp, #8
 2585              		.cfi_remember_state
 2586              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccctyiBz.s 			page 61


 2587              		@ sp needed
 2588 0352 BDE87040 		pop	{r4, r5, r6, lr}
 2589              		.cfi_restore 14
 2590              		.cfi_restore 6
 2591              		.cfi_restore 5
 2592              		.cfi_restore 4
 2593              		.cfi_def_cfa_offset 0
 2594              	.LVL249:
 2595              	.LBB82:
 2596              	.LBB83:
 164:src/lcd.c     **** }
 2597              		.loc 1 164 3 view .LVU505
 2598 0356 FFF7FEBF 		b	exp_right_side
 2599              	.LVL250:
 2600              	.L122:
 2601              		.cfi_restore_state
 164:src/lcd.c     **** }
 2602              		.loc 1 164 3 view .LVU506
 2603              	.LBE83:
 2604              	.LBE82:
 238:src/lcd.c     ****       return;
 2605              		.loc 1 238 7 is_stmt 1 view .LVU507
 2606              	.LBB85:
 2607              	.LBI85:
 151:src/lcd.c     ****   exp_left_side(i, j+11, col);
 2608              		.loc 1 151 6 view .LVU508
 2609              	.LBB86:
 152:src/lcd.c     **** }
 2610              		.loc 1 152 3 view .LVU509
 2611 035a 2246     		mov	r2, r4
 2612 035c 8D21     		movs	r1, #141
 2613              	.LVL251:
 2614              	.L156:
 152:src/lcd.c     **** }
 2615              		.loc 1 152 3 is_stmt 0 view .LVU510
 2616              	.LBE86:
 2617              	.LBE85:
 351:src/lcd.c     **** 
 2618              		.loc 1 351 1 view .LVU511
 2619 035e 02B0     		add	sp, sp, #8
 2620              		.cfi_remember_state
 2621              		.cfi_def_cfa_offset 16
 2622              		@ sp needed
 2623 0360 BDE87040 		pop	{r4, r5, r6, lr}
 2624              		.cfi_restore 14
 2625              		.cfi_restore 6
 2626              		.cfi_restore 5
 2627              		.cfi_restore 4
 2628              		.cfi_def_cfa_offset 0
 2629              	.LVL252:
 2630              	.LBB88:
 2631              	.LBB87:
 152:src/lcd.c     **** }
 2632              		.loc 1 152 3 view .LVU512
 2633 0364 FFF7FEBF 		b	exp_left_side
 2634              	.LVL253:
 2635              	.L121:
ARM GAS  /tmp/ccctyiBz.s 			page 62


 2636              		.cfi_restore_state
 152:src/lcd.c     **** }
 2637              		.loc 1 152 3 view .LVU513
 2638              	.LBE87:
 2639              	.LBE88:
 241:src/lcd.c     ****       return;
 2640              		.loc 1 241 7 is_stmt 1 view .LVU514
 2641 0368 2246     		mov	r2, r4
 2642 036a 8221     		movs	r1, #130
 351:src/lcd.c     **** 
 2643              		.loc 1 351 1 is_stmt 0 view .LVU515
 2644 036c 02B0     		add	sp, sp, #8
 2645              		.cfi_remember_state
 2646              		.cfi_def_cfa_offset 16
 2647              		@ sp needed
 2648 036e BDE87040 		pop	{r4, r5, r6, lr}
 2649              		.cfi_restore 14
 2650              		.cfi_restore 6
 2651              		.cfi_restore 5
 2652              		.cfi_restore 4
 2653              		.cfi_def_cfa_offset 0
 2654              	.LVL254:
 241:src/lcd.c     ****       return;
 2655              		.loc 1 241 7 view .LVU516
 2656 0372 FFF7FEBF 		b	exp_bottom
 2657              	.LVL255:
 2658              	.L119:
 2659              		.cfi_restore_state
 244:src/lcd.c     ****       return;
 2660              		.loc 1 244 7 is_stmt 1 view .LVU517
 2661              	.LBB89:
 2662              	.LBI82:
 163:src/lcd.c     ****   exp_right_side(i-1, j+11, col);
 2663              		.loc 1 163 6 view .LVU518
 2664              	.LBB84:
 164:src/lcd.c     **** }
 2665              		.loc 1 164 3 view .LVU519
 2666 0376 2246     		mov	r2, r4
 2667 0378 03F25710 		addw	r0, r3, #343
 2668              	.LVL256:
 164:src/lcd.c     **** }
 2669              		.loc 1 164 3 is_stmt 0 view .LVU520
 2670 037c 8D21     		movs	r1, #141
 2671 037e E7E7     		b	.L158
 2672              	.LVL257:
 2673              	.L125:
 164:src/lcd.c     **** }
 2674              		.loc 1 164 3 view .LVU521
 2675              	.LBE84:
 2676              	.LBE89:
 229:src/lcd.c     ****       return;
 2677              		.loc 1 229 7 is_stmt 1 view .LVU522
 2678              	.LBB90:
 2679              	.LBI90:
 148:src/lcd.c     ****   exp_left_side(i+1, j, col);
 2680              		.loc 1 148 6 view .LVU523
 2681              	.LBB91:
ARM GAS  /tmp/ccctyiBz.s 			page 63


 149:src/lcd.c     **** }
 2682              		.loc 1 149 3 view .LVU524
 2683 0380 2246     		mov	r2, r4
 2684 0382 03F25910 		addw	r0, r3, #345
 2685              	.LVL258:
 149:src/lcd.c     **** }
 2686              		.loc 1 149 3 is_stmt 0 view .LVU525
 2687 0386 8221     		movs	r1, #130
 2688 0388 E9E7     		b	.L156
 2689              	.LVL259:
 2690              	.L159:
 149:src/lcd.c     **** }
 2691              		.loc 1 149 3 view .LVU526
 2692              	.LBE91:
 2693              	.LBE90:
 2694              	.LBB92:
 294:src/lcd.c     **** 	    dots[BEG] = 7;
 2695              		.loc 1 294 4 is_stmt 1 view .LVU527
 294:src/lcd.c     **** 	    dots[BEG] = 7;
 2696              		.loc 1 294 7 is_stmt 0 view .LVU528
 2697 038a 002A     		cmp	r2, #0
 2698 038c 8ED0     		beq	.L151
 2699 038e 8FE6     		b	.L150
 2700              	.L145:
 308:src/lcd.c     **** 	    draw_BEG(4, 0);
 2701              		.loc 1 308 6 is_stmt 1 view .LVU529
 2702 0390 0121     		movs	r1, #1
 2703 0392 0820     		movs	r0, #8
 2704              	.LVL260:
 308:src/lcd.c     **** 	    draw_BEG(4, 0);
 2705              		.loc 1 308 6 is_stmt 0 view .LVU530
 2706 0394 FFF7FEFF 		bl	draw_BEG
 2707              	.LVL261:
 308:src/lcd.c     **** 	    draw_BEG(4, 0);
 2708              		.loc 1 308 6 view .LVU531
 2709 0398 7EE7     		b	.L149
 2710              	.LVL262:
 2711              	.L118:
 308:src/lcd.c     **** 	    draw_BEG(4, 0);
 2712              		.loc 1 308 6 view .LVU532
 2713              	.LBE92:
 226:src/lcd.c     ****       return;
 2714              		.loc 1 226 7 is_stmt 1 view .LVU533
 2715 039a 2246     		mov	r2, r4
 2716 039c 8221     		movs	r1, #130
 351:src/lcd.c     **** 
 2717              		.loc 1 351 1 is_stmt 0 view .LVU534
 2718 039e 02B0     		add	sp, sp, #8
 2719              		@ sp needed
 2720 03a0 BDE87040 		pop	{r4, r5, r6, lr}
 2721              	.LVL263:
 226:src/lcd.c     ****       return;
 2722              		.loc 1 226 7 view .LVU535
 2723 03a4 FFF7FEBF 		b	exp_top
 2724              	.LVL264:
 2725              	.L127:
 252:src/lcd.c     ****       return;
ARM GAS  /tmp/ccctyiBz.s 			page 64


 2726              		.loc 1 252 7 is_stmt 1 view .LVU536
 2727 03a8 2246     		mov	r2, r4
 2728 03aa 8221     		movs	r1, #130
 2729 03ac 0120     		movs	r0, #1
 2730              	.LVL265:
 252:src/lcd.c     ****       return;
 2731              		.loc 1 252 7 is_stmt 0 view .LVU537
 2732 03ae D1E6     		b	.L153
 2733              	.L163:
 2734              		.align	2
 2735              	.L162:
 2736 03b0 00200010 		.word	268443648
 2737 03b4 6D020008 		.word	134218349
 2738 03b8 7D020008 		.word	134218365
 2739 03bc 00000000 		.word	.LC4
 2740 03c0 0C000000 		.word	.LC9
 2741 03c4 10000000 		.word	.LC10
 2742              		.cfi_endproc
 2743              	.LFE26:
 2745              		.section	.text.set_dot,"ax",%progbits
 2746              		.align	1
 2747              		.p2align 2,,3
 2748              		.global	set_dot
 2749              		.syntax unified
 2750              		.thumb
 2751              		.thumb_func
 2752              		.fpu fpv4-sp-d16
 2754              	set_dot:
 2755              	.LVL266:
 2756              	.LFB0:
  46:src/lcd.c     ****   dots[n] |= 1;
 2757              		.loc 1 46 21 is_stmt 1 view -0
 2758              		.cfi_startproc
 2759              		@ args = 0, pretend = 0, frame = 0
 2760              		@ frame_needed = 0, uses_anonymous_args = 0
  47:src/lcd.c     ****   if (dots[n]&2) return;
 2761              		.loc 1 47 3 view .LVU539
  46:src/lcd.c     ****   dots[n] |= 1;
 2762              		.loc 1 46 21 is_stmt 0 view .LVU540
 2763 0000 38B5     		push	{r3, r4, r5, lr}
 2764              		.cfi_def_cfa_offset 16
 2765              		.cfi_offset 3, -16
 2766              		.cfi_offset 4, -12
 2767              		.cfi_offset 5, -8
 2768              		.cfi_offset 14, -4
  47:src/lcd.c     ****   if (dots[n]&2) return;
 2769              		.loc 1 47 11 view .LVU541
 2770 0002 074D     		ldr	r5, .L168
 2771 0004 2B5C     		ldrb	r3, [r5, r0]	@ zero_extendqisi2
 2772 0006 43F00102 		orr	r2, r3, #1
  48:src/lcd.c     ****   draw_dot(n);
 2773              		.loc 1 48 6 view .LVU542
 2774 000a 9B07     		lsls	r3, r3, #30
  47:src/lcd.c     ****   if (dots[n]&2) return;
 2775              		.loc 1 47 11 view .LVU543
 2776 000c 2A54     		strb	r2, [r5, r0]
  48:src/lcd.c     ****   draw_dot(n);
ARM GAS  /tmp/ccctyiBz.s 			page 65


 2777              		.loc 1 48 3 is_stmt 1 view .LVU544
  48:src/lcd.c     ****   draw_dot(n);
 2778              		.loc 1 48 6 is_stmt 0 view .LVU545
 2779 000e 00D5     		bpl	.L167
  51:src/lcd.c     **** void clr_dot(int n) {
 2780              		.loc 1 51 1 view .LVU546
 2781 0010 38BD     		pop	{r3, r4, r5, pc}
 2782              	.L167:
 2783 0012 0446     		mov	r4, r0
  49:src/lcd.c     ****   dots[n] = 3; // 11;
 2784              		.loc 1 49 3 is_stmt 1 view .LVU547
 2785 0014 FFF7FEFF 		bl	draw_dot
 2786              	.LVL267:
  50:src/lcd.c     **** }
 2787              		.loc 1 50 3 view .LVU548
  50:src/lcd.c     **** }
 2788              		.loc 1 50 11 is_stmt 0 view .LVU549
 2789 0018 0323     		movs	r3, #3
 2790 001a 2B55     		strb	r3, [r5, r4]
  51:src/lcd.c     **** void clr_dot(int n) {
 2791              		.loc 1 51 1 view .LVU550
 2792 001c 38BD     		pop	{r3, r4, r5, pc}
 2793              	.LVL268:
 2794              	.L169:
  51:src/lcd.c     **** void clr_dot(int n) {
 2795              		.loc 1 51 1 view .LVU551
 2796 001e 00BF     		.align	2
 2797              	.L168:
 2798 0020 00000000 		.word	.LANCHOR0
 2799              		.cfi_endproc
 2800              	.LFE0:
 2802              		.section	.text.clr_dot,"ax",%progbits
 2803              		.align	1
 2804              		.p2align 2,,3
 2805              		.global	clr_dot
 2806              		.syntax unified
 2807              		.thumb
 2808              		.thumb_func
 2809              		.fpu fpv4-sp-d16
 2811              	clr_dot:
 2812              	.LVL269:
 2813              	.LFB1:
  52:src/lcd.c     ****   dots[n] &= ~1;
 2814              		.loc 1 52 21 is_stmt 1 view -0
 2815              		.cfi_startproc
 2816              		@ args = 0, pretend = 0, frame = 0
 2817              		@ frame_needed = 0, uses_anonymous_args = 0
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 2818              		.loc 1 53 3 view .LVU553
  52:src/lcd.c     ****   dots[n] &= ~1;
 2819              		.loc 1 52 21 is_stmt 0 view .LVU554
 2820 0000 38B5     		push	{r3, r4, r5, lr}
 2821              		.cfi_def_cfa_offset 16
 2822              		.cfi_offset 3, -16
 2823              		.cfi_offset 4, -12
 2824              		.cfi_offset 5, -8
 2825              		.cfi_offset 14, -4
ARM GAS  /tmp/ccctyiBz.s 			page 66


  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 2826              		.loc 1 53 11 view .LVU555
 2827 0002 074D     		ldr	r5, .L177
 2828 0004 2B5C     		ldrb	r3, [r5, r0]	@ zero_extendqisi2
 2829 0006 23F00102 		bic	r2, r3, #1
  54:src/lcd.c     ****   draw_dot(n);
 2830              		.loc 1 54 6 view .LVU556
 2831 000a 9B07     		lsls	r3, r3, #30
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 2832              		.loc 1 53 11 view .LVU557
 2833 000c 2A54     		strb	r2, [r5, r0]
  54:src/lcd.c     ****   draw_dot(n);
 2834              		.loc 1 54 3 is_stmt 1 view .LVU558
  54:src/lcd.c     ****   draw_dot(n);
 2835              		.loc 1 54 6 is_stmt 0 view .LVU559
 2836 000e 00D4     		bmi	.L176
  57:src/lcd.c     **** 
 2837              		.loc 1 57 1 view .LVU560
 2838 0010 38BD     		pop	{r3, r4, r5, pc}
 2839              	.L176:
 2840 0012 0446     		mov	r4, r0
  55:src/lcd.c     ****   dots[n] = 0; 
 2841              		.loc 1 55 3 is_stmt 1 view .LVU561
 2842 0014 FFF7FEFF 		bl	draw_dot
 2843              	.LVL270:
  56:src/lcd.c     **** }
 2844              		.loc 1 56 3 view .LVU562
  56:src/lcd.c     **** }
 2845              		.loc 1 56 11 is_stmt 0 view .LVU563
 2846 0018 0023     		movs	r3, #0
 2847 001a 2B55     		strb	r3, [r5, r4]
  57:src/lcd.c     **** 
 2848              		.loc 1 57 1 view .LVU564
 2849 001c 38BD     		pop	{r3, r4, r5, pc}
 2850              	.LVL271:
 2851              	.L178:
  57:src/lcd.c     **** 
 2852              		.loc 1 57 1 view .LVU565
 2853 001e 00BF     		.align	2
 2854              	.L177:
 2855 0020 00000000 		.word	.LANCHOR0
 2856              		.cfi_endproc
 2857              	.LFE1:
 2859              		.section	.text.reset_disp,"ax",%progbits
 2860              		.align	1
 2861              		.p2align 2,,3
 2862              		.global	reset_disp
 2863              		.syntax unified
 2864              		.thumb
 2865              		.thumb_func
 2866              		.fpu fpv4-sp-d16
 2868              	reset_disp:
 2869              	.LFB4:
  69:src/lcd.c     ****   clr_dot(STO_annun); // gets turned back on if needed;
 2870              		.loc 1 69 23 is_stmt 1 view -0
 2871              		.cfi_startproc
 2872              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccctyiBz.s 			page 67


 2873              		@ frame_needed = 0, uses_anonymous_args = 0
  70:src/lcd.c     ****   int rcl = is_dot(RCL_annun);
 2874              		.loc 1 70 3 view .LVU567
 2875              	.LVL272:
 2876              	.LBB93:
 2877              	.LBI93:
  52:src/lcd.c     ****   dots[n] &= ~1;
 2878              		.loc 1 52 6 view .LVU568
 2879              	.LBB94:
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 2880              		.loc 1 53 3 view .LVU569
 2881              	.LBE94:
 2882              	.LBE93:
  69:src/lcd.c     ****   clr_dot(STO_annun); // gets turned back on if needed;
 2883              		.loc 1 69 23 is_stmt 0 view .LVU570
 2884 0000 70B5     		push	{r4, r5, r6, lr}
 2885              		.cfi_def_cfa_offset 16
 2886              		.cfi_offset 4, -16
 2887              		.cfi_offset 5, -12
 2888              		.cfi_offset 6, -8
 2889              		.cfi_offset 14, -4
 2890              	.LBB96:
 2891              	.LBB95:
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 2892              		.loc 1 53 11 view .LVU571
 2893 0002 1C4C     		ldr	r4, .L187
 2894 0004 94F88930 		ldrb	r3, [r4, #137]	@ zero_extendqisi2
 2895 0008 23F00102 		bic	r2, r3, #1
  54:src/lcd.c     ****   draw_dot(n);
 2896              		.loc 1 54 6 view .LVU572
 2897 000c 9B07     		lsls	r3, r3, #30
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 2898              		.loc 1 53 11 view .LVU573
 2899 000e 84F88920 		strb	r2, [r4, #137]
  54:src/lcd.c     ****   draw_dot(n);
 2900              		.loc 1 54 3 is_stmt 1 view .LVU574
  54:src/lcd.c     ****   draw_dot(n);
 2901              		.loc 1 54 6 is_stmt 0 view .LVU575
 2902 0012 05D5     		bpl	.L180
  55:src/lcd.c     ****   dots[n] = 0; 
 2903              		.loc 1 55 3 is_stmt 1 view .LVU576
 2904 0014 8920     		movs	r0, #137
 2905 0016 FFF7FEFF 		bl	draw_dot
 2906              	.LVL273:
  56:src/lcd.c     **** }
 2907              		.loc 1 56 3 view .LVU577
  56:src/lcd.c     **** }
 2908              		.loc 1 56 11 is_stmt 0 view .LVU578
 2909 001a 0023     		movs	r3, #0
 2910 001c 84F88930 		strb	r3, [r4, #137]
 2911              	.L180:
 2912              	.LVL274:
  56:src/lcd.c     **** }
 2913              		.loc 1 56 11 view .LVU579
 2914              	.LBE95:
 2915              	.LBE96:
  71:src/lcd.c     ****   int bat = is_dot(BATTERY);
ARM GAS  /tmp/ccctyiBz.s 			page 68


 2916              		.loc 1 71 3 is_stmt 1 view .LVU580
 2917              	.LBB97:
 2918              	.LBI97:
  59:src/lcd.c     **** 	return dots[n]&1;
 2919              		.loc 1 59 5 view .LVU581
 2920              	.LBB98:
  60:src/lcd.c     **** }
 2921              		.loc 1 60 2 view .LVU582
  60:src/lcd.c     **** }
 2922              		.loc 1 60 16 is_stmt 0 view .LVU583
 2923 0020 94F88A10 		ldrb	r1, [r4, #138]	@ zero_extendqisi2
 2924              	.LBE98:
 2925              	.LBE97:
 2926              	.LBB100:
 2927              	.LBB101:
 2928 0024 94F88760 		ldrb	r6, [r4, #135]	@ zero_extendqisi2
 2929              	.LBE101:
 2930              	.LBE100:
 2931              	.LBB103:
 2932              	.LBB104:
 2933 0028 94F88450 		ldrb	r5, [r4, #132]	@ zero_extendqisi2
 2934 002c 124B     		ldr	r3, .L187+4
 2935              	.LBE104:
 2936              	.LBE103:
 2937              	.LBB106:
 2938              	.LBB107:
 2939 002e 94F88D40 		ldrb	r4, [r4, #141]	@ zero_extendqisi2
 2940              	.LBE107:
 2941              	.LBE106:
 2942              	.LBB109:
 2943              	.LBB99:
 2944 0032 01F00101 		and	r1, r1, #1
 2945              	.LVL275:
  60:src/lcd.c     **** }
 2946              		.loc 1 60 16 view .LVU584
 2947              	.LBE99:
 2948              	.LBE109:
  72:src/lcd.c     ****   int leq = is_dot(LIT_EQ);
 2949              		.loc 1 72 3 is_stmt 1 view .LVU585
 2950              	.LBB110:
 2951              	.LBI100:
  59:src/lcd.c     **** 	return dots[n]&1;
 2952              		.loc 1 59 5 view .LVU586
 2953              	.LBB102:
  60:src/lcd.c     **** }
 2954              		.loc 1 60 2 view .LVU587
  60:src/lcd.c     **** }
 2955              		.loc 1 60 16 is_stmt 0 view .LVU588
 2956 0036 06F00106 		and	r6, r6, #1
 2957              	.LVL276:
  60:src/lcd.c     **** }
 2958              		.loc 1 60 16 view .LVU589
 2959              	.LBE102:
 2960              	.LBE110:
  73:src/lcd.c     ****   int rpn = is_dot(RPN);
 2961              		.loc 1 73 3 is_stmt 1 view .LVU590
 2962              	.LBB111:
ARM GAS  /tmp/ccctyiBz.s 			page 69


 2963              	.LBI103:
  59:src/lcd.c     **** 	return dots[n]&1;
 2964              		.loc 1 59 5 view .LVU591
 2965              	.LBB105:
  60:src/lcd.c     **** }
 2966              		.loc 1 60 2 view .LVU592
  60:src/lcd.c     **** }
 2967              		.loc 1 60 16 is_stmt 0 view .LVU593
 2968 003a 05F00105 		and	r5, r5, #1
 2969              	.LVL277:
  60:src/lcd.c     **** }
 2970              		.loc 1 60 16 view .LVU594
 2971              	.LBE105:
 2972              	.LBE111:
  74:src/lcd.c     ****   int i;
 2973              		.loc 1 74 3 is_stmt 1 view .LVU595
 2974              	.LBB112:
 2975              	.LBI106:
  59:src/lcd.c     **** 	return dots[n]&1;
 2976              		.loc 1 59 5 view .LVU596
 2977              	.LBB108:
  60:src/lcd.c     **** }
 2978              		.loc 1 60 2 view .LVU597
  60:src/lcd.c     **** }
 2979              		.loc 1 60 16 is_stmt 0 view .LVU598
 2980 003e 04F00104 		and	r4, r4, #1
 2981              	.LVL278:
  60:src/lcd.c     **** }
 2982              		.loc 1 60 16 view .LVU599
 2983              	.LBE108:
 2984              	.LBE112:
  75:src/lcd.c     ****   for (i=0; i<TOP_DOTS; i++)
 2985              		.loc 1 75 3 is_stmt 1 view .LVU600
  76:src/lcd.c     ****     dots[i] <<= 1;
 2986              		.loc 1 76 3 view .LVU601
  76:src/lcd.c     ****     dots[i] <<= 1;
 2987              		.loc 1 76 13 view .LVU602
 2988 0042 03F5C870 		add	r0, r3, #400
 2989              	.LVL279:
 2990              	.L181:
  77:src/lcd.c     ****   dot(RCL_annun, rcl);
 2991              		.loc 1 77 5 discriminator 3 view .LVU603
  77:src/lcd.c     ****   dot(RCL_annun, rcl);
 2992              		.loc 1 77 13 is_stmt 0 discriminator 3 view .LVU604
 2993 0046 13F8012F 		ldrb	r2, [r3, #1]!	@ zero_extendqisi2
 2994              	.LVL280:
  77:src/lcd.c     ****   dot(RCL_annun, rcl);
 2995              		.loc 1 77 13 discriminator 3 view .LVU605
 2996 004a 5200     		lsls	r2, r2, #1
  76:src/lcd.c     ****     dots[i] <<= 1;
 2997              		.loc 1 76 3 discriminator 3 view .LVU606
 2998 004c 9842     		cmp	r0, r3
  77:src/lcd.c     ****   dot(RCL_annun, rcl);
 2999              		.loc 1 77 13 discriminator 3 view .LVU607
 3000 004e 1A70     		strb	r2, [r3]
  76:src/lcd.c     ****     dots[i] <<= 1;
 3001              		.loc 1 76 25 is_stmt 1 discriminator 3 view .LVU608
ARM GAS  /tmp/ccctyiBz.s 			page 70


 3002              	.LVL281:
  76:src/lcd.c     ****     dots[i] <<= 1;
 3003              		.loc 1 76 13 discriminator 3 view .LVU609
  76:src/lcd.c     ****     dots[i] <<= 1;
 3004              		.loc 1 76 3 is_stmt 0 discriminator 3 view .LVU610
 3005 0050 F9D1     		bne	.L181
  78:src/lcd.c     ****   dot(BATTERY, bat);
 3006              		.loc 1 78 3 is_stmt 1 view .LVU611
 3007 0052 8A20     		movs	r0, #138
 3008 0054 FFF7FEFF 		bl	dot
 3009              	.LVL282:
  79:src/lcd.c     ****   dot(LIT_EQ, leq);
 3010              		.loc 1 79 3 view .LVU612
 3011 0058 3146     		mov	r1, r6
 3012 005a 8720     		movs	r0, #135
 3013 005c FFF7FEFF 		bl	dot
 3014              	.LVL283:
  80:src/lcd.c     ****   dot(RPN, rpn);
 3015              		.loc 1 80 3 view .LVU613
 3016 0060 2946     		mov	r1, r5
 3017 0062 8420     		movs	r0, #132
 3018 0064 FFF7FEFF 		bl	dot
 3019              	.LVL284:
  81:src/lcd.c     **** }
 3020              		.loc 1 81 3 view .LVU614
 3021 0068 2146     		mov	r1, r4
 3022 006a 8D20     		movs	r0, #141
  82:src/lcd.c     **** 
 3023              		.loc 1 82 1 is_stmt 0 view .LVU615
 3024 006c BDE87040 		pop	{r4, r5, r6, lr}
 3025              		.cfi_restore 14
 3026              		.cfi_restore 6
 3027              		.cfi_restore 5
 3028              		.cfi_restore 4
 3029              		.cfi_def_cfa_offset 0
 3030              	.LVL285:
  81:src/lcd.c     **** }
 3031              		.loc 1 81 3 view .LVU616
 3032 0070 FFF7FEBF 		b	dot
 3033              	.LVL286:
 3034              	.L188:
  81:src/lcd.c     **** }
 3035              		.loc 1 81 3 view .LVU617
 3036              		.align	2
 3037              	.L187:
 3038 0074 00000000 		.word	.LANCHOR0
 3039 0078 FFFFFFFF 		.word	.LANCHOR0-1
 3040              		.cfi_endproc
 3041              	.LFE4:
 3043              		.section	.text.finish_7_segment,"ax",%progbits
 3044              		.align	1
 3045              		.p2align 2,,3
 3046              		.global	finish_7_segment
 3047              		.syntax unified
 3048              		.thumb
 3049              		.thumb_func
 3050              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccctyiBz.s 			page 71


 3052              	finish_7_segment:
 3053              	.LFB29:
 375:src/lcd.c     ****   for (int i = 0; i <= EXP_SIGN; ++i) {
 3054              		.loc 1 375 29 is_stmt 1 view -0
 3055              		.cfi_startproc
 3056              		@ args = 0, pretend = 0, frame = 0
 3057              		@ frame_needed = 0, uses_anonymous_args = 0
 376:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3058              		.loc 1 376 3 view .LVU619
 3059              	.LBB113:
 376:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3060              		.loc 1 376 8 view .LVU620
 3061              	.LVL287:
 376:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3062              		.loc 1 376 19 view .LVU621
 3063              	.LBE113:
 375:src/lcd.c     ****   for (int i = 0; i <= EXP_SIGN; ++i) {
 3064              		.loc 1 375 29 is_stmt 0 view .LVU622
 3065 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3066              		.cfi_def_cfa_offset 24
 3067              		.cfi_offset 3, -24
 3068              		.cfi_offset 4, -20
 3069              		.cfi_offset 5, -16
 3070              		.cfi_offset 6, -12
 3071              		.cfi_offset 7, -8
 3072              		.cfi_offset 14, -4
 3073 0002 0D4C     		ldr	r4, .L200
 3074              	.LBB120:
 3075              	.LBB114:
 3076              	.LBB115:
  56:src/lcd.c     **** }
 3077              		.loc 1 56 11 view .LVU623
 3078 0004 0027     		movs	r7, #0
 3079 0006 04F18306 		add	r6, r4, #131
 3080 000a 6542     		rsbs	r5, r4, #0
 3081 000c 01E0     		b	.L193
 3082              	.LVL288:
 3083              	.L191:
  56:src/lcd.c     **** }
 3084              		.loc 1 56 11 view .LVU624
 3085              	.LBE115:
 3086              	.LBE114:
 376:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3087              		.loc 1 376 34 is_stmt 1 discriminator 2 view .LVU625
 376:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3088              		.loc 1 376 19 discriminator 2 view .LVU626
 376:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3089              		.loc 1 376 3 is_stmt 0 discriminator 2 view .LVU627
 3090 000e B442     		cmp	r4, r6
 3091 0010 10D0     		beq	.L199
 3092              	.LVL289:
 3093              	.L193:
 376:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3094              		.loc 1 376 3 discriminator 2 view .LVU628
 3095 0012 2819     		adds	r0, r5, r4
 3096              	.LVL290:
 377:src/lcd.c     ****   }
ARM GAS  /tmp/ccctyiBz.s 			page 72


 3097              		.loc 1 377 5 is_stmt 1 view .LVU629
 377:src/lcd.c     ****   }
 3098              		.loc 1 377 14 is_stmt 0 view .LVU630
 3099 0014 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 377:src/lcd.c     ****   }
 3100              		.loc 1 377 8 view .LVU631
 3101 0018 03F00302 		and	r2, r3, #3
 3102 001c 022A     		cmp	r2, #2
 3103 001e F6D1     		bne	.L191
 377:src/lcd.c     ****   }
 3104              		.loc 1 377 27 is_stmt 1 view .LVU632
 3105              	.LVL291:
 3106              	.LBB118:
 3107              	.LBI114:
  52:src/lcd.c     ****   dots[n] &= ~1;
 3108              		.loc 1 52 6 view .LVU633
 3109              	.LBB116:
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3110              		.loc 1 53 3 view .LVU634
  55:src/lcd.c     ****   dots[n] = 0; 
 3111              		.loc 1 55 3 view .LVU635
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3112              		.loc 1 53 11 is_stmt 0 view .LVU636
 3113 0020 23F00102 		bic	r2, r3, #1
  54:src/lcd.c     ****   draw_dot(n);
 3114              		.loc 1 54 6 view .LVU637
 3115 0024 9B07     		lsls	r3, r3, #30
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3116              		.loc 1 53 11 view .LVU638
 3117 0026 2270     		strb	r2, [r4]
  54:src/lcd.c     ****   draw_dot(n);
 3118              		.loc 1 54 3 is_stmt 1 view .LVU639
  54:src/lcd.c     ****   draw_dot(n);
 3119              		.loc 1 54 6 is_stmt 0 view .LVU640
 3120 0028 F1D5     		bpl	.L191
  55:src/lcd.c     ****   dots[n] = 0; 
 3121              		.loc 1 55 3 view .LVU641
 3122 002a FFF7FEFF 		bl	draw_dot
 3123              	.LVL292:
  56:src/lcd.c     **** }
 3124              		.loc 1 56 3 is_stmt 1 view .LVU642
 3125              	.LBE116:
 3126              	.LBE118:
 376:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3127              		.loc 1 376 3 is_stmt 0 view .LVU643
 3128 002e B442     		cmp	r4, r6
 3129              	.LBB119:
 3130              	.LBB117:
  56:src/lcd.c     **** }
 3131              		.loc 1 56 11 view .LVU644
 3132 0030 2770     		strb	r7, [r4]
 3133              	.LVL293:
  56:src/lcd.c     **** }
 3134              		.loc 1 56 11 view .LVU645
 3135              	.LBE117:
 3136              	.LBE119:
 376:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
ARM GAS  /tmp/ccctyiBz.s 			page 73


 3137              		.loc 1 376 34 is_stmt 1 view .LVU646
 376:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3138              		.loc 1 376 19 view .LVU647
 376:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3139              		.loc 1 376 3 is_stmt 0 view .LVU648
 3140 0032 EED1     		bne	.L193
 3141              	.LVL294:
 3142              	.L199:
 376:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3143              		.loc 1 376 3 view .LVU649
 3144              	.LBE120:
 379:src/lcd.c     **** 
 3145              		.loc 1 379 1 view .LVU650
 3146 0034 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3147              	.L201:
 3148 0036 00BF     		.align	2
 3149              	.L200:
 3150 0038 FFFFFFFF 		.word	.LANCHOR0-1
 3151              		.cfi_endproc
 3152              	.LFE29:
 3154              		.section	.text.finish_alpha_row,"ax",%progbits
 3155              		.align	1
 3156              		.p2align 2,,3
 3157              		.global	finish_alpha_row
 3158              		.syntax unified
 3159              		.thumb
 3160              		.thumb_func
 3161              		.fpu fpv4-sp-d16
 3163              	finish_alpha_row:
 3164              	.LFB30:
 381:src/lcd.c     ****   for (int i = MATRIX_BASE; i < MAX_DOTS; ++i) {
 3165              		.loc 1 381 29 is_stmt 1 view -0
 3166              		.cfi_startproc
 3167              		@ args = 0, pretend = 0, frame = 0
 3168              		@ frame_needed = 0, uses_anonymous_args = 0
 382:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3169              		.loc 1 382 3 view .LVU652
 3170              	.LBB121:
 382:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3171              		.loc 1 382 8 view .LVU653
 3172              	.LVL295:
 382:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3173              		.loc 1 382 29 view .LVU654
 3174              	.LBE121:
 381:src/lcd.c     ****   for (int i = MATRIX_BASE; i < MAX_DOTS; ++i) {
 3175              		.loc 1 381 29 is_stmt 0 view .LVU655
 3176 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3177              		.cfi_def_cfa_offset 24
 3178              		.cfi_offset 3, -24
 3179              		.cfi_offset 4, -20
 3180              		.cfi_offset 5, -16
 3181              		.cfi_offset 6, -12
 3182              		.cfi_offset 7, -8
 3183              		.cfi_offset 14, -4
 3184 0002 0D4C     		ldr	r4, .L213
 3185              	.LBB128:
 3186              	.LBB122:
ARM GAS  /tmp/ccctyiBz.s 			page 74


 3187              	.LBB123:
  56:src/lcd.c     **** }
 3188              		.loc 1 56 11 view .LVU656
 3189 0004 0027     		movs	r7, #0
 3190 0006 04F58176 		add	r6, r4, #258
 3191 000a C4F18E05 		rsb	r5, r4, #142
 3192 000e 01E0     		b	.L206
 3193              	.LVL296:
 3194              	.L204:
  56:src/lcd.c     **** }
 3195              		.loc 1 56 11 view .LVU657
 3196              	.LBE123:
 3197              	.LBE122:
 382:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3198              		.loc 1 382 43 is_stmt 1 discriminator 2 view .LVU658
 382:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3199              		.loc 1 382 29 discriminator 2 view .LVU659
 382:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3200              		.loc 1 382 3 is_stmt 0 discriminator 2 view .LVU660
 3201 0010 B442     		cmp	r4, r6
 3202 0012 10D0     		beq	.L212
 3203              	.LVL297:
 3204              	.L206:
 382:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3205              		.loc 1 382 3 discriminator 2 view .LVU661
 3206 0014 2819     		adds	r0, r5, r4
 3207              	.LVL298:
 383:src/lcd.c     ****   }
 3208              		.loc 1 383 5 is_stmt 1 view .LVU662
 383:src/lcd.c     ****   }
 3209              		.loc 1 383 14 is_stmt 0 view .LVU663
 3210 0016 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 383:src/lcd.c     ****   }
 3211              		.loc 1 383 8 view .LVU664
 3212 001a 03F00302 		and	r2, r3, #3
 3213 001e 022A     		cmp	r2, #2
 3214 0020 F6D1     		bne	.L204
 383:src/lcd.c     ****   }
 3215              		.loc 1 383 27 is_stmt 1 view .LVU665
 3216              	.LVL299:
 3217              	.LBB126:
 3218              	.LBI122:
  52:src/lcd.c     ****   dots[n] &= ~1;
 3219              		.loc 1 52 6 view .LVU666
 3220              	.LBB124:
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3221              		.loc 1 53 3 view .LVU667
  55:src/lcd.c     ****   dots[n] = 0; 
 3222              		.loc 1 55 3 view .LVU668
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3223              		.loc 1 53 11 is_stmt 0 view .LVU669
 3224 0022 23F00102 		bic	r2, r3, #1
  54:src/lcd.c     ****   draw_dot(n);
 3225              		.loc 1 54 6 view .LVU670
 3226 0026 9B07     		lsls	r3, r3, #30
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3227              		.loc 1 53 11 view .LVU671
ARM GAS  /tmp/ccctyiBz.s 			page 75


 3228 0028 2270     		strb	r2, [r4]
  54:src/lcd.c     ****   draw_dot(n);
 3229              		.loc 1 54 3 is_stmt 1 view .LVU672
  54:src/lcd.c     ****   draw_dot(n);
 3230              		.loc 1 54 6 is_stmt 0 view .LVU673
 3231 002a F1D5     		bpl	.L204
  55:src/lcd.c     ****   dots[n] = 0; 
 3232              		.loc 1 55 3 view .LVU674
 3233 002c FFF7FEFF 		bl	draw_dot
 3234              	.LVL300:
  56:src/lcd.c     **** }
 3235              		.loc 1 56 3 is_stmt 1 view .LVU675
 3236              	.LBE124:
 3237              	.LBE126:
 382:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3238              		.loc 1 382 3 is_stmt 0 view .LVU676
 3239 0030 B442     		cmp	r4, r6
 3240              	.LBB127:
 3241              	.LBB125:
  56:src/lcd.c     **** }
 3242              		.loc 1 56 11 view .LVU677
 3243 0032 2770     		strb	r7, [r4]
 3244              	.LVL301:
  56:src/lcd.c     **** }
 3245              		.loc 1 56 11 view .LVU678
 3246              	.LBE125:
 3247              	.LBE127:
 382:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3248              		.loc 1 382 43 is_stmt 1 view .LVU679
 382:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3249              		.loc 1 382 29 view .LVU680
 382:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3250              		.loc 1 382 3 is_stmt 0 view .LVU681
 3251 0034 EED1     		bne	.L206
 3252              	.LVL302:
 3253              	.L212:
 382:src/lcd.c     ****     if ((dots[i]&3) == 2) clr_dot(i);
 3254              		.loc 1 382 3 view .LVU682
 3255              	.LBE128:
 385:src/lcd.c     **** 
 3256              		.loc 1 385 1 view .LVU683
 3257 0036 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3258              	.L214:
 3259              		.align	2
 3260              	.L213:
 3261 0038 8D000000 		.word	.LANCHOR0+141
 3262              		.cfi_endproc
 3263              	.LFE30:
 3265              		.section	.rodata.draw_PRT.str1.4,"aMS",%progbits,1
 3266              		.align	2
 3267              	.LC11:
 3268 0000 50525400 		.ascii	"PRT\000"
 3269              		.section	.text.draw_PRT,"ax",%progbits
 3270              		.align	1
 3271              		.p2align 2,,3
 3272              		.global	draw_PRT
 3273              		.syntax unified
ARM GAS  /tmp/ccctyiBz.s 			page 76


 3274              		.thumb
 3275              		.thumb_func
 3276              		.fpu fpv4-sp-d16
 3278              	draw_PRT:
 3279              	.LFB34:
 429:src/lcd.c     **** 
 430:src/lcd.c     **** void draw_PRT (void) {
 3280              		.loc 1 430 22 is_stmt 1 view -0
 3281              		.cfi_startproc
 3282              		@ args = 0, pretend = 0, frame = 0
 3283              		@ frame_needed = 0, uses_anonymous_args = 0
 431:src/lcd.c     ****   t20->inv = !UState.print_on;
 3284              		.loc 1 431 3 view .LVU685
 3285              		.loc 1 431 14 is_stmt 0 view .LVU686
 3286 0000 0A4B     		ldr	r3, .L217
 3287 0002 1B68     		ldr	r3, [r3]
 430:src/lcd.c     ****   t20->inv = !UState.print_on;
 3288              		.loc 1 430 22 view .LVU687
 3289 0004 70B5     		push	{r4, r5, r6, lr}
 3290              		.cfi_def_cfa_offset 16
 3291              		.cfi_offset 4, -16
 3292              		.cfi_offset 5, -12
 3293              		.cfi_offset 6, -8
 3294              		.cfi_offset 14, -4
 3295              		.loc 1 431 12 view .LVU688
 3296 0006 93F8E437 		ldrb	r3, [r3, #2020]	@ zero_extendqisi2
 3297              		.loc 1 431 3 view .LVU689
 3298 000a 094C     		ldr	r4, .L217+4
 432:src/lcd.c     ****   lcd_setXY(t20, 250, Y_ANNUNC-70);
 3299              		.loc 1 432 3 view .LVU690
 3300 000c 094D     		ldr	r5, .L217+8
 431:src/lcd.c     ****   t20->inv = !UState.print_on;
 3301              		.loc 1 431 3 view .LVU691
 3302 000e 206B     		ldr	r0, [r4, #48]
 431:src/lcd.c     ****   t20->inv = !UState.print_on;
 3303              		.loc 1 431 12 view .LVU692
 3304 0010 DB43     		mvns	r3, r3
 3305 0012 03F00103 		and	r3, r3, #1
 3306 0016 4374     		strb	r3, [r0, #17]
 3307              		.loc 1 432 3 is_stmt 1 view .LVU693
 3308 0018 FA21     		movs	r1, #250
 3309 001a 3C22     		movs	r2, #60
 3310 001c A847     		blx	r5
 3311              	.LVL303:
 433:src/lcd.c     ****   lcd_writeText(t20,"PRT");
 3312              		.loc 1 433 3 view .LVU694
 3313 001e 206B     		ldr	r0, [r4, #48]
 3314 0020 054B     		ldr	r3, .L217+12
 3315 0022 0649     		ldr	r1, .L217+16
 434:src/lcd.c     **** }
 3316              		.loc 1 434 1 is_stmt 0 view .LVU695
 3317 0024 BDE87040 		pop	{r4, r5, r6, lr}
 3318              		.cfi_restore 14
 3319              		.cfi_restore 6
 3320              		.cfi_restore 5
 3321              		.cfi_restore 4
 3322              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccctyiBz.s 			page 77


 433:src/lcd.c     ****   lcd_writeText(t20,"PRT");
 3323              		.loc 1 433 3 view .LVU696
 3324 0028 1847     		bx	r3	@ indirect register sibling call
 3325              	.LVL304:
 3326              	.L218:
 3327 002a 00BF     		.align	2
 3328              	.L217:
 3329 002c 00000000 		.word	main_ram
 3330 0030 00200010 		.word	268443648
 3331 0034 6D020008 		.word	134218349
 3332 0038 7D020008 		.word	134218365
 3333 003c 00000000 		.word	.LC11
 3334              		.cfi_endproc
 3335              	.LFE34:
 3337              		.section	.text.finish_display,"ax",%progbits
 3338              		.align	1
 3339              		.p2align 2,,3
 3340              		.global	finish_display
 3341              		.syntax unified
 3342              		.thumb
 3343              		.thumb_func
 3344              		.fpu fpv4-sp-d16
 3346              	finish_display:
 3347              	.LFB28:
 365:src/lcd.c     ****   draw_PRT();
 3348              		.loc 1 365 27 is_stmt 1 view -0
 3349              		.cfi_startproc
 3350              		@ args = 0, pretend = 0, frame = 0
 3351              		@ frame_needed = 0, uses_anonymous_args = 0
 366:src/lcd.c     ****   finish_7_segment();
 3352              		.loc 1 366 3 view .LVU698
 365:src/lcd.c     ****   draw_PRT();
 3353              		.loc 1 365 27 is_stmt 0 view .LVU699
 3354 0000 10B5     		push	{r4, lr}
 3355              		.cfi_def_cfa_offset 8
 3356              		.cfi_offset 4, -8
 3357              		.cfi_offset 14, -4
 366:src/lcd.c     ****   finish_7_segment();
 3358              		.loc 1 366 3 view .LVU700
 3359 0002 FFF7FEFF 		bl	draw_PRT
 3360              	.LVL305:
 367:src/lcd.c     ****   finish_alpha_row();
 3361              		.loc 1 367 3 is_stmt 1 view .LVU701
 3362 0006 FFF7FEFF 		bl	finish_7_segment
 3363              	.LVL306:
 368:src/lcd.c     **** #ifdef TOP_ROW
 3364              		.loc 1 368 3 view .LVU702
 3365 000a FFF7FEFF 		bl	finish_alpha_row
 3366              	.LVL307:
 372:src/lcd.c     **** }
 3367              		.loc 1 372 3 view .LVU703
 373:src/lcd.c     **** 
 3368              		.loc 1 373 1 is_stmt 0 view .LVU704
 3369 000e BDE81040 		pop	{r4, lr}
 3370              		.cfi_restore 14
 3371              		.cfi_restore 4
 3372              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccctyiBz.s 			page 78


 372:src/lcd.c     **** }
 3373              		.loc 1 372 3 view .LVU705
 3374 0012 014B     		ldr	r3, .L221
 3375 0014 1847     		bx	r3	@ indirect register sibling call
 3376              	.LVL308:
 3377              	.L222:
 3378 0016 00BF     		.align	2
 3379              	.L221:
 3380 0018 31020008 		.word	134218289
 3381              		.cfi_endproc
 3382              	.LFE28:
 3384              		.section	.text.finish_PRT,"ax",%progbits
 3385              		.align	1
 3386              		.p2align 2,,3
 3387              		.global	finish_PRT
 3388              		.syntax unified
 3389              		.thumb
 3390              		.thumb_func
 3391              		.fpu fpv4-sp-d16
 3393              	finish_PRT:
 3394              	.LFB35:
 435:src/lcd.c     **** 
 436:src/lcd.c     **** void finish_PRT (void) {
 3395              		.loc 1 436 24 is_stmt 1 view -0
 3396              		.cfi_startproc
 3397              		@ args = 0, pretend = 0, frame = 0
 3398              		@ frame_needed = 0, uses_anonymous_args = 0
 437:src/lcd.c     ****   draw_PRT();
 3399              		.loc 1 437 3 view .LVU707
 436:src/lcd.c     ****   draw_PRT();
 3400              		.loc 1 436 24 is_stmt 0 view .LVU708
 3401 0000 10B5     		push	{r4, lr}
 3402              		.cfi_def_cfa_offset 8
 3403              		.cfi_offset 4, -8
 3404              		.cfi_offset 14, -4
 3405              		.loc 1 437 3 view .LVU709
 3406 0002 FFF7FEFF 		bl	draw_PRT
 3407              	.LVL309:
 438:src/lcd.c     ****   lcd_refresh();
 3408              		.loc 1 438 3 is_stmt 1 view .LVU710
 439:src/lcd.c     **** }
 3409              		.loc 1 439 1 is_stmt 0 view .LVU711
 3410 0006 BDE81040 		pop	{r4, lr}
 3411              		.cfi_restore 14
 3412              		.cfi_restore 4
 3413              		.cfi_def_cfa_offset 0
 438:src/lcd.c     ****   lcd_refresh();
 3414              		.loc 1 438 3 view .LVU712
 3415 000a 014B     		ldr	r3, .L225
 3416 000c 1847     		bx	r3	@ indirect register sibling call
 3417              	.LVL310:
 3418              	.L226:
 3419 000e 00BF     		.align	2
 3420              	.L225:
 3421 0010 31020008 		.word	134218289
 3422              		.cfi_endproc
 3423              	.LFE35:
ARM GAS  /tmp/ccctyiBz.s 			page 79


 3425              		.section	.text.finish_LEQ,"ax",%progbits
 3426              		.align	1
 3427              		.p2align 2,,3
 3428              		.global	finish_LEQ
 3429              		.syntax unified
 3430              		.thumb
 3431              		.thumb_func
 3432              		.fpu fpv4-sp-d16
 3434              	finish_LEQ:
 3435              	.LFB36:
 440:src/lcd.c     **** 
 441:src/lcd.c     **** void finish_LEQ(void) { // refreshes the LEQ flag only
 3436              		.loc 1 441 23 is_stmt 1 view -0
 3437              		.cfi_startproc
 3438              		@ args = 0, pretend = 0, frame = 0
 3439              		@ frame_needed = 0, uses_anonymous_args = 0
 3440              		@ link register save eliminated.
 442:src/lcd.c     ****   lcd_refresh();
 3441              		.loc 1 442 3 view .LVU714
 3442 0000 004B     		ldr	r3, .L228
 3443 0002 1847     		bx	r3	@ indirect register sibling call
 3444              	.LVL311:
 3445              	.L229:
 3446              		.align	2
 3447              	.L228:
 3448 0004 31020008 		.word	134218289
 3449              		.cfi_endproc
 3450              	.LFE36:
 3452              		.section	.text.do_all_dots,"ax",%progbits
 3453              		.align	1
 3454              		.p2align 2,,3
 3455              		.global	do_all_dots
 3456              		.syntax unified
 3457              		.thumb
 3458              		.thumb_func
 3459              		.fpu fpv4-sp-d16
 3461              	do_all_dots:
 3462              	.LFB37:
 443:src/lcd.c     **** }
 444:src/lcd.c     ****   
 445:src/lcd.c     **** extern void all_menu_dots (void);
 446:src/lcd.c     **** 
 447:src/lcd.c     **** void do_all_dots(void) {
 3463              		.loc 1 447 24 view -0
 3464              		.cfi_startproc
 3465              		@ args = 0, pretend = 0, frame = 0
 3466              		@ frame_needed = 0, uses_anonymous_args = 0
 448:src/lcd.c     ****   for (int i=0; i<TOP_DOTS; i++) {
 3467              		.loc 1 448 3 view .LVU716
 3468              	.LBB129:
 3469              		.loc 1 448 8 view .LVU717
 3470              	.LVL312:
 3471              		.loc 1 448 17 view .LVU718
 3472              	.LBE129:
 447:src/lcd.c     ****   for (int i=0; i<TOP_DOTS; i++) {
 3473              		.loc 1 447 24 is_stmt 0 view .LVU719
 3474 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/ccctyiBz.s 			page 80


 3475              		.cfi_def_cfa_offset 24
 3476              		.cfi_offset 4, -24
 3477              		.cfi_offset 5, -20
 3478              		.cfi_offset 6, -16
 3479              		.cfi_offset 7, -12
 3480              		.cfi_offset 8, -8
 3481              		.cfi_offset 14, -4
 3482 0004 1A4C     		ldr	r4, .L243
 3483              	.LBB134:
 3484              	.LBB130:
 3485              	.LBB131:
  50:src/lcd.c     **** }
 3486              		.loc 1 50 11 view .LVU720
 3487 0006 0327     		movs	r7, #3
 3488 0008 04F10108 		add	r8, r4, #1
 3489 000c 04F5C876 		add	r6, r4, #400
 3490 0010 6542     		rsbs	r5, r4, #0
 3491              	.LVL313:
 3492              	.L232:
  49:src/lcd.c     ****   dots[n] = 3; // 11;
 3493              		.loc 1 49 3 is_stmt 1 view .LVU721
 3494 0012 2819     		adds	r0, r5, r4
 3495              	.LVL314:
  49:src/lcd.c     ****   dots[n] = 3; // 11;
 3496              		.loc 1 49 3 is_stmt 0 view .LVU722
 3497              	.LBE131:
 3498              	.LBE130:
 449:src/lcd.c     ****     set_dot(i);
 3499              		.loc 1 449 5 is_stmt 1 view .LVU723
 3500              	.LBB133:
 3501              	.LBI130:
  46:src/lcd.c     ****   dots[n] |= 1;
 3502              		.loc 1 46 6 view .LVU724
 3503              	.LBB132:
  47:src/lcd.c     ****   if (dots[n]&2) return;
 3504              		.loc 1 47 3 view .LVU725
  47:src/lcd.c     ****   if (dots[n]&2) return;
 3505              		.loc 1 47 11 is_stmt 0 view .LVU726
 3506 0014 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 3507 0018 43F00102 		orr	r2, r3, #1
  48:src/lcd.c     ****   draw_dot(n);
 3508              		.loc 1 48 6 view .LVU727
 3509 001c 9907     		lsls	r1, r3, #30
  47:src/lcd.c     ****   if (dots[n]&2) return;
 3510              		.loc 1 47 11 view .LVU728
 3511 001e 2270     		strb	r2, [r4]
  48:src/lcd.c     ****   draw_dot(n);
 3512              		.loc 1 48 3 is_stmt 1 view .LVU729
  48:src/lcd.c     ****   draw_dot(n);
 3513              		.loc 1 48 6 is_stmt 0 view .LVU730
 3514 0020 02D4     		bmi	.L231
  49:src/lcd.c     ****   dots[n] = 3; // 11;
 3515              		.loc 1 49 3 view .LVU731
 3516 0022 FFF7FEFF 		bl	draw_dot
 3517              	.LVL315:
  50:src/lcd.c     **** }
 3518              		.loc 1 50 3 is_stmt 1 view .LVU732
ARM GAS  /tmp/ccctyiBz.s 			page 81


  50:src/lcd.c     **** }
 3519              		.loc 1 50 11 is_stmt 0 view .LVU733
 3520 0026 2770     		strb	r7, [r4]
 3521              	.L231:
 3522              	.LVL316:
  50:src/lcd.c     **** }
 3523              		.loc 1 50 11 view .LVU734
 3524              	.LBE132:
 3525              	.LBE133:
 448:src/lcd.c     ****     set_dot(i);
 3526              		.loc 1 448 29 is_stmt 1 view .LVU735
 448:src/lcd.c     ****     set_dot(i);
 3527              		.loc 1 448 17 view .LVU736
 448:src/lcd.c     ****     set_dot(i);
 3528              		.loc 1 448 3 is_stmt 0 view .LVU737
 3529 0028 B442     		cmp	r4, r6
 3530 002a F2D1     		bne	.L232
 3531              	.LBE134:
 450:src/lcd.c     ****   }
 451:src/lcd.c     ****   all_menu_dots();
 3532              		.loc 1 451 3 is_stmt 1 view .LVU738
 3533 002c FFF7FEFF 		bl	all_menu_dots
 3534              	.LVL317:
 452:src/lcd.c     ****   finish_display();
 3535              		.loc 1 452 3 view .LVU739
 3536 0030 FFF7FEFF 		bl	finish_display
 3537              	.LVL318:
 453:src/lcd.c     ****   clr_dot(RCL_annun);
 3538              		.loc 1 453 3 view .LVU740
 3539              	.LBB135:
 3540              	.LBI135:
  52:src/lcd.c     ****   dots[n] &= ~1;
 3541              		.loc 1 52 6 view .LVU741
 3542              	.LBB136:
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3543              		.loc 1 53 3 view .LVU742
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3544              		.loc 1 53 11 is_stmt 0 view .LVU743
 3545 0034 98F88A30 		ldrb	r3, [r8, #138]	@ zero_extendqisi2
 3546 0038 23F00102 		bic	r2, r3, #1
 3547 003c 88F88A20 		strb	r2, [r8, #138]
  54:src/lcd.c     ****   draw_dot(n);
 3548              		.loc 1 54 3 is_stmt 1 view .LVU744
  54:src/lcd.c     ****   draw_dot(n);
 3549              		.loc 1 54 6 is_stmt 0 view .LVU745
 3550 0040 9A07     		lsls	r2, r3, #30
 3551 0042 05D5     		bpl	.L233
  55:src/lcd.c     ****   dots[n] = 0; 
 3552              		.loc 1 55 3 is_stmt 1 view .LVU746
 3553 0044 8A20     		movs	r0, #138
 3554 0046 FFF7FEFF 		bl	draw_dot
 3555              	.LVL319:
  56:src/lcd.c     **** }
 3556              		.loc 1 56 3 view .LVU747
  56:src/lcd.c     **** }
 3557              		.loc 1 56 11 is_stmt 0 view .LVU748
 3558 004a 0023     		movs	r3, #0
ARM GAS  /tmp/ccctyiBz.s 			page 82


 3559 004c 88F88A30 		strb	r3, [r8, #138]
 3560              	.L233:
 3561              	.LVL320:
  56:src/lcd.c     **** }
 3562              		.loc 1 56 11 view .LVU749
 3563              	.LBE136:
 3564              	.LBE135:
 454:src/lcd.c     ****   clr_dot(LIT_EQ);
 3565              		.loc 1 454 3 is_stmt 1 view .LVU750
 3566              	.LBB137:
 3567              	.LBI137:
  52:src/lcd.c     ****   dots[n] &= ~1;
 3568              		.loc 1 52 6 view .LVU751
 3569              	.LBB138:
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3570              		.loc 1 53 3 view .LVU752
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3571              		.loc 1 53 11 is_stmt 0 view .LVU753
 3572 0050 98F88430 		ldrb	r3, [r8, #132]	@ zero_extendqisi2
 3573 0054 23F00102 		bic	r2, r3, #1
  54:src/lcd.c     ****   draw_dot(n);
 3574              		.loc 1 54 6 view .LVU754
 3575 0058 9B07     		lsls	r3, r3, #30
  53:src/lcd.c     ****   if ( !(dots[n]&2)) return;
 3576              		.loc 1 53 11 view .LVU755
 3577 005a 88F88420 		strb	r2, [r8, #132]
  54:src/lcd.c     ****   draw_dot(n);
 3578              		.loc 1 54 3 is_stmt 1 view .LVU756
  54:src/lcd.c     ****   draw_dot(n);
 3579              		.loc 1 54 6 is_stmt 0 view .LVU757
 3580 005e 05D5     		bpl	.L230
  55:src/lcd.c     ****   dots[n] = 0; 
 3581              		.loc 1 55 3 is_stmt 1 view .LVU758
 3582 0060 8420     		movs	r0, #132
 3583 0062 FFF7FEFF 		bl	draw_dot
 3584              	.LVL321:
  56:src/lcd.c     **** }
 3585              		.loc 1 56 3 view .LVU759
  56:src/lcd.c     **** }
 3586              		.loc 1 56 11 is_stmt 0 view .LVU760
 3587 0066 0023     		movs	r3, #0
 3588 0068 88F88430 		strb	r3, [r8, #132]
 3589              	.LVL322:
 3590              	.L230:
  56:src/lcd.c     **** }
 3591              		.loc 1 56 11 view .LVU761
 3592              	.LBE138:
 3593              	.LBE137:
 455:src/lcd.c     **** }
 3594              		.loc 1 455 1 view .LVU762
 3595 006c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3596              	.LVL323:
 3597              	.L244:
 3598              		.loc 1 455 1 view .LVU763
 3599              		.align	2
 3600              	.L243:
 3601 0070 FFFFFFFF 		.word	.LANCHOR0-1
ARM GAS  /tmp/ccctyiBz.s 			page 83


 3602              		.cfi_endproc
 3603              	.LFE37:
 3605              		.section	.bss.dots,"aw",%nobits
 3606              		.align	2
 3607              		.set	.LANCHOR0,. + 0
 3610              	dots:
 3611 0000 00000000 		.space	400
 3611      00000000 
 3611      00000000 
 3611      00000000 
 3611      00000000 
 3612              		.text
 3613              	.Letext0:
 3614              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 3615              		.file 3 "dmcp/ff_ifc.h"
 3616              		.file 4 "dmcp/dmcp.h"
 3617              		.file 5 "src/decNumber/decContext.h"
 3618              		.file 6 "src/decNumber/decNumber.h"
 3619              		.file 7 "src/decNumber/decimal64.h"
 3620              		.file 8 "src/decNumber/decimal128.h"
 3621              		.file 9 "src/xeq.h"
 3622              		.file 10 "src/data.h"
 3623              		.file 11 "src/display.h"
 3624              		.file 12 "src/storage.h"
 3625              		.file 13 "src/pretty.h"
ARM GAS  /tmp/ccctyiBz.s 			page 84


DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/ccctyiBz.s:18     .rodata.draw_BEG.part.0.str1.4:0000000000000000 $d
     /tmp/ccctyiBz.s:22     .text.draw_BEG.part.0:0000000000000000 $t
     /tmp/ccctyiBz.s:30     .text.draw_BEG.part.0:0000000000000000 draw_BEG.part.0
     /tmp/ccctyiBz.s:49     .text.draw_BEG.part.0:000000000000000c $d
     /tmp/ccctyiBz.s:56     .text.is_dot:0000000000000000 $t
     /tmp/ccctyiBz.s:64     .text.is_dot:0000000000000000 is_dot
     /tmp/ccctyiBz.s:84     .text.is_dot:000000000000000c $d
     /tmp/ccctyiBz.s:89     .text.clear_disp:0000000000000000 $t
     /tmp/ccctyiBz.s:97     .text.clear_disp:0000000000000000 clear_disp
     /tmp/ccctyiBz.s:134    .text.clear_disp:0000000000000014 $d
     /tmp/ccctyiBz.s:140    .text.reset_7_segment:0000000000000000 $t
     /tmp/ccctyiBz.s:148    .text.reset_7_segment:0000000000000000 reset_7_segment
     /tmp/ccctyiBz.s:185    .text.reset_7_segment:0000000000000014 $d
     /tmp/ccctyiBz.s:190    .text.left_side:0000000000000000 $t
     /tmp/ccctyiBz.s:198    .text.left_side:0000000000000000 left_side
     /tmp/ccctyiBz.s:282    .text.left_side:0000000000000054 $d
     /tmp/ccctyiBz.s:287    .text.left_side_top:0000000000000000 $t
     /tmp/ccctyiBz.s:295    .text.left_side_top:0000000000000000 left_side_top
     /tmp/ccctyiBz.s:311    .text.left_side_bottom:0000000000000000 $t
     /tmp/ccctyiBz.s:319    .text.left_side_bottom:0000000000000000 left_side_bottom
     /tmp/ccctyiBz.s:341    .text.right_side:0000000000000000 $t
     /tmp/ccctyiBz.s:349    .text.right_side:0000000000000000 right_side
     /tmp/ccctyiBz.s:433    .text.right_side:000000000000005c $d
     /tmp/ccctyiBz.s:438    .text.right_side_top:0000000000000000 $t
     /tmp/ccctyiBz.s:446    .text.right_side_top:0000000000000000 right_side_top
     /tmp/ccctyiBz.s:462    .text.right_side_bottom:0000000000000000 $t
     /tmp/ccctyiBz.s:470    .text.right_side_bottom:0000000000000000 right_side_bottom
     /tmp/ccctyiBz.s:492    .text.top:0000000000000000 $t
     /tmp/ccctyiBz.s:500    .text.top:0000000000000000 top
     /tmp/ccctyiBz.s:569    .text.top:0000000000000040 $d
     /tmp/ccctyiBz.s:574    .text.middle:0000000000000000 $t
     /tmp/ccctyiBz.s:582    .text.middle:0000000000000000 middle
     /tmp/ccctyiBz.s:649    .text.middle:0000000000000040 $d
     /tmp/ccctyiBz.s:654    .text.bottom:0000000000000000 $t
     /tmp/ccctyiBz.s:662    .text.bottom:0000000000000000 bottom
     /tmp/ccctyiBz.s:734    .text.bottom:0000000000000048 $d
     /tmp/ccctyiBz.s:739    .text.decimal:0000000000000000 $t
     /tmp/ccctyiBz.s:747    .text.decimal:0000000000000000 decimal
     /tmp/ccctyiBz.s:785    .text.decimal:0000000000000018 $d
     /tmp/ccctyiBz.s:790    .text.comma:0000000000000000 $t
     /tmp/ccctyiBz.s:798    .text.comma:0000000000000000 comma
     /tmp/ccctyiBz.s:854    .text.comma:000000000000002c $d
     /tmp/ccctyiBz.s:859    .text.exp_left_side:0000000000000000 $t
     /tmp/ccctyiBz.s:867    .text.exp_left_side:0000000000000000 exp_left_side
     /tmp/ccctyiBz.s:936    .text.exp_left_side:0000000000000040 $d
     /tmp/ccctyiBz.s:941    .text.exp_left_side_top:0000000000000000 $t
     /tmp/ccctyiBz.s:949    .text.exp_left_side_top:0000000000000000 exp_left_side_top
     /tmp/ccctyiBz.s:968    .text.exp_left_side_bottom:0000000000000000 $t
     /tmp/ccctyiBz.s:976    .text.exp_left_side_bottom:0000000000000000 exp_left_side_bottom
     /tmp/ccctyiBz.s:995    .text.exp_right_side:0000000000000000 $t
     /tmp/ccctyiBz.s:1003   .text.exp_right_side:0000000000000000 exp_right_side
     /tmp/ccctyiBz.s:1072   .text.exp_right_side:0000000000000044 $d
     /tmp/ccctyiBz.s:1077   .text.exp_right_side_top:0000000000000000 $t
     /tmp/ccctyiBz.s:1085   .text.exp_right_side_top:0000000000000000 exp_right_side_top
     /tmp/ccctyiBz.s:1101   .text.exp_right_side_bottom:0000000000000000 $t
ARM GAS  /tmp/ccctyiBz.s 			page 85


     /tmp/ccctyiBz.s:1109   .text.exp_right_side_bottom:0000000000000000 exp_right_side_bottom
     /tmp/ccctyiBz.s:1131   .text.exp_top:0000000000000000 $t
     /tmp/ccctyiBz.s:1139   .text.exp_top:0000000000000000 exp_top
     /tmp/ccctyiBz.s:1200   .text.exp_top:0000000000000034 $d
     /tmp/ccctyiBz.s:1205   .text.exp_bottom:0000000000000000 $t
     /tmp/ccctyiBz.s:1213   .text.exp_bottom:0000000000000000 exp_bottom
     /tmp/ccctyiBz.s:1277   .text.exp_bottom:0000000000000038 $d
     /tmp/ccctyiBz.s:1282   .text.exp_middle:0000000000000000 $t
     /tmp/ccctyiBz.s:1290   .text.exp_middle:0000000000000000 exp_middle
     /tmp/ccctyiBz.s:1357   .text.exp_middle:0000000000000040 $d
     /tmp/ccctyiBz.s:1362   .rodata.draw_BEG.str1.4:0000000000000000 $d
     /tmp/ccctyiBz.s:1366   .text.draw_BEG:0000000000000000 $t
     /tmp/ccctyiBz.s:1374   .text.draw_BEG:0000000000000000 draw_BEG
     /tmp/ccctyiBz.s:1445   .text.draw_BEG:0000000000000030 $d
     /tmp/ccctyiBz.s:1453   .rodata.draw_RPN.str1.4:0000000000000000 $d
     /tmp/ccctyiBz.s:1460   .text.draw_RPN:0000000000000000 $t
     /tmp/ccctyiBz.s:1468   .text.draw_RPN:0000000000000000 draw_RPN
     /tmp/ccctyiBz.s:1541   .text.draw_RPN:0000000000000040 $d
     /tmp/ccctyiBz.s:1551   .rodata.draw_RCL.str1.4:0000000000000000 $d
     /tmp/ccctyiBz.s:1555   .text.draw_RCL:0000000000000000 $t
     /tmp/ccctyiBz.s:1563   .text.draw_RCL:0000000000000000 draw_RCL
     /tmp/ccctyiBz.s:1612   .text.draw_RCL:0000000000000020 $d
     /tmp/ccctyiBz.s:1620   .rodata.draw_LEQ.str1.4:0000000000000000 $d
     /tmp/ccctyiBz.s:1627   .text.draw_LEQ:0000000000000000 $t
     /tmp/ccctyiBz.s:1635   .text.draw_LEQ:0000000000000000 draw_LEQ
     /tmp/ccctyiBz.s:1714   .text.draw_LEQ:0000000000000058 $d
     /tmp/ccctyiBz.s:1725   .rodata.draw_dot.str1.4:0000000000000000 $d
     /tmp/ccctyiBz.s:1738   .text.draw_dot:0000000000000000 $t
     /tmp/ccctyiBz.s:1746   .text.draw_dot:0000000000000000 draw_dot
     /tmp/ccctyiBz.s:1805   .text.draw_dot:000000000000003c $d
     /tmp/ccctyiBz.s:1849   .text.draw_dot:0000000000000076 $d
     /tmp/ccctyiBz.s:1856   .text.draw_dot:0000000000000082 $t
     /tmp/ccctyiBz.s:1938   .text.draw_dot:00000000000000d0 $d
     /tmp/ccctyiBz.s:1951   .text.draw_dot:0000000000000100 $t
     /tmp/ccctyiBz.s:2473   .text.draw_dot:00000000000002cc $d
     /tmp/ccctyiBz.s:2492   .text.draw_dot:00000000000002f8 $t
     /tmp/ccctyiBz.s:2736   .text.draw_dot:00000000000003b0 $d
     /tmp/ccctyiBz.s:2746   .text.set_dot:0000000000000000 $t
     /tmp/ccctyiBz.s:2754   .text.set_dot:0000000000000000 set_dot
     /tmp/ccctyiBz.s:2798   .text.set_dot:0000000000000020 $d
     /tmp/ccctyiBz.s:2803   .text.clr_dot:0000000000000000 $t
     /tmp/ccctyiBz.s:2811   .text.clr_dot:0000000000000000 clr_dot
     /tmp/ccctyiBz.s:2855   .text.clr_dot:0000000000000020 $d
     /tmp/ccctyiBz.s:2860   .text.reset_disp:0000000000000000 $t
     /tmp/ccctyiBz.s:2868   .text.reset_disp:0000000000000000 reset_disp
     /tmp/ccctyiBz.s:3038   .text.reset_disp:0000000000000074 $d
     /tmp/ccctyiBz.s:3044   .text.finish_7_segment:0000000000000000 $t
     /tmp/ccctyiBz.s:3052   .text.finish_7_segment:0000000000000000 finish_7_segment
     /tmp/ccctyiBz.s:3150   .text.finish_7_segment:0000000000000038 $d
     /tmp/ccctyiBz.s:3155   .text.finish_alpha_row:0000000000000000 $t
     /tmp/ccctyiBz.s:3163   .text.finish_alpha_row:0000000000000000 finish_alpha_row
     /tmp/ccctyiBz.s:3261   .text.finish_alpha_row:0000000000000038 $d
     /tmp/ccctyiBz.s:3266   .rodata.draw_PRT.str1.4:0000000000000000 $d
     /tmp/ccctyiBz.s:3270   .text.draw_PRT:0000000000000000 $t
     /tmp/ccctyiBz.s:3278   .text.draw_PRT:0000000000000000 draw_PRT
     /tmp/ccctyiBz.s:3329   .text.draw_PRT:000000000000002c $d
     /tmp/ccctyiBz.s:3338   .text.finish_display:0000000000000000 $t
ARM GAS  /tmp/ccctyiBz.s 			page 86


     /tmp/ccctyiBz.s:3346   .text.finish_display:0000000000000000 finish_display
     /tmp/ccctyiBz.s:3380   .text.finish_display:0000000000000018 $d
     /tmp/ccctyiBz.s:3385   .text.finish_PRT:0000000000000000 $t
     /tmp/ccctyiBz.s:3393   .text.finish_PRT:0000000000000000 finish_PRT
     /tmp/ccctyiBz.s:3421   .text.finish_PRT:0000000000000010 $d
     /tmp/ccctyiBz.s:3426   .text.finish_LEQ:0000000000000000 $t
     /tmp/ccctyiBz.s:3434   .text.finish_LEQ:0000000000000000 finish_LEQ
     /tmp/ccctyiBz.s:3448   .text.finish_LEQ:0000000000000004 $d
     /tmp/ccctyiBz.s:3453   .text.do_all_dots:0000000000000000 $t
     /tmp/ccctyiBz.s:3461   .text.do_all_dots:0000000000000000 do_all_dots
     /tmp/ccctyiBz.s:3601   .text.do_all_dots:0000000000000070 $d
     /tmp/ccctyiBz.s:3606   .bss.dots:0000000000000000 $d
     /tmp/ccctyiBz.s:3610   .bss.dots:0000000000000000 dots
     /tmp/ccctyiBz.s:1815   .text.draw_dot:0000000000000045 $d
     /tmp/ccctyiBz.s:1815   .text.draw_dot:0000000000000046 $t

UNDEFINED SYMBOLS
main_ram
dot
all_menu_dots
